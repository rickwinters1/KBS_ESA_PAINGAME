
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002608c memsz 0x0002608c flags r-x
    LOAD off    0x000270ac vaddr 0x000260ac paddr 0x00027fdc align 2**12
         filesz 0x00001f30 memsz 0x00001f30 flags rw-
    LOAD off    0x00029f0c vaddr 0x00029f0c paddr 0x00029f0c align 2**12
         filesz 0x00000000 memsz 0x00025aec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024fb8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000eb0  000251fc  000251fc  000261fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f30  000260ac  00027fdc  000270ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00025aec  00029f0c  00029f0c  00029f0c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0004f9f8  0004f9f8  00028fdc  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00028fdc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00028fdc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001290  00000000  00000000  00029000  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000385b9  00000000  00000000  0002a290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000cafd  00000000  00000000  00062849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011ddf  00000000  00000000  0006f346  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004824  00000000  00000000  00081128  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000647d  00000000  00000000  0008594c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b65a  00000000  00000000  0008bdc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a7424  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a98  00000000  00000000  000a7448  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000afbe2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000afbe8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000afbed  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000afbee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000afbef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000afbf3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000afbf7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000afbfb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000afc04  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000afc0d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000afc16  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000afc21  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000afc7f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ba844  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000251fc l    d  .rodata	00000000 .rodata
000260ac l    d  .rwdata	00000000 .rwdata
00029f0c l    d  .bss	00000000 .bss
0004f9f8 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 bzero.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025afa l     O .rodata	00000010 zeroes.4240
00025b0a l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00025b1a l     O .rodata	00000010 zeroes.4255
00008778 l     F .text	000000bc __sbprintf
00025b2a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00008988 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000a544 l     F .text	00000008 __fp_lock
0000a54c l     F .text	00000008 __fp_unlock
0000a560 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000260ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000264f0 l     O .rwdata	00000020 lc_ctype_charset
000264d0 l     O .rwdata	00000020 lc_message_charset
00026510 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00025b5c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00025c80 l     O .rodata	00000010 zeroes.4184
00025c90 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000ec1c l     F .text	000000fc __sprint_r.part.0
00025cb0 l     O .rodata	00000010 blanks.4199
00025ca0 l     O .rodata	00000010 zeroes.4200
00010024 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00011528 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00013c54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013d74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013da0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013ea0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013f94 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014078 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00014270 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027f50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000144cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00027f54 l     O .rwdata	00000004 lockid
00029fd0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00027f58 l     O .rwdata	00000004 lockid
00029fd8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00015f00 l     F .text	00000044 OS_InitMisc
00015f44 l     F .text	00000068 OS_InitRdyList
000160a4 l     F .text	000000e0 OS_InitTCBList
00015e24 l     F .text	000000dc OS_InitEventList
00015fac l     F .text	0000007c OS_InitTaskIdle
00016028 l     F .text	0000007c OS_InitTaskStat
00016304 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00018108 l     F .text	00000110 OS_FlagTaskRdy
00017e60 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001d138 l     F .text	00000038 alt_dev_reg
00026af8 l     O .rwdata	0000106c JTAG_UART
00027b64 l     O .rwdata	00000030 AV_Config
00027b94 l     O .rwdata	00000030 Audio_Subsystem_Audio
00027bc4 l     O .rwdata	0000002c Char_LCD_16x2
00027bf0 l     O .rwdata	0000002c IrDA
00027c1c l     O .rwdata	0000002c Expansion_JP5
00027c48 l     O .rwdata	0000002c Green_LEDs
00027c74 l     O .rwdata	0000002c HEX3_HEX0
00027ca0 l     O .rwdata	0000002c HEX7_HEX4
00027ccc l     O .rwdata	0000002c Pushbuttons
00027cf8 l     O .rwdata	0000002c Red_LEDs
00027d24 l     O .rwdata	0000002c Slider_Switches
00027d50 l     O .rwdata	00000038 PS2_Port
00027d88 l     O .rwdata	00000038 PS2_Port_Dual
00027dc0 l     O .rwdata	0000002c Serial_Port
00027dec l     O .rwdata	00000034 USB
00027e20 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00027e68 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00027ebc l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021bc4 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00021e6c l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022644 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00023e60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000240cc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000243b4 l     F .text	00000050 alt_get_errno
00024404 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002a070 g     O .bss	00000004 alt_instruction_exception_handler
0002a038 g     O .bss	00000004 aux_status_register
0000452c g     F .text	00000018 putchar
0000cf24 g     F .text	00000074 _mprec_log10
00027fa6 g     O .rwdata	00000002 OSTaskNameSize
0000d010 g     F .text	0000008c __any_on
000106e4 g     F .text	00000054 _isatty_r
00025b68 g     O .rodata	00000028 __mprec_tinytens
0001419c g     F .text	000000d4 alt_main
0000474c g     F .text	00000090 strcpy
00004544 g     F .text	000000a8 _puts_r
0004f8f8 g     O .bss	00000100 alt_irq
00023220 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00010738 g     F .text	0000005c _lseek_r
000194f4 g     F .text	000000d0 OS_MemInit
00027fdc g       *ABS*	00000000 __flash_rwdata_start
0001d0d4 g     F .text	00000064 OSTimeSet
000227b0 g     F .text	0000003c alt_up_character_lcd_send_cmd
000127bc g     F .text	00000084 .hidden __eqdf2
0001d8e8 g     F .text	000001ac Check_for_Master_Boot_Record
00014b7c g     F .text	00000610 OSEventPendMulti
0004f9f8 g       *ABS*	00000000 __alt_heap_start
00024a10 g     F .text	00000020 OSTaskCreateHook
00021764 g     F .text	000001bc alt_up_sd_card_fclose
000044e8 g     F .text	0000003c printf
00027f7e g     O .rwdata	00000002 OSMboxEn
00029f40 g     O .bss	00000004 random
000151e0 g     F .text	0000007c OSIntEnter
000107f0 g     F .text	0000009c _wcrtomb_r
0000d910 g     F .text	0000005c __sseek
00000e18 g     F .text	0000021c collision
0000a894 g     F .text	00000010 __sinit
00023ba8 g     F .text	00000100 alt_up_char_buffer_string
000100e0 g     F .text	00000138 __swbuf_r
00023040 g     F .text	00000034 read_CE_bit
00029f44 g     O .bss	00000002 b
00027f8e g     O .rwdata	00000002 OSQEn
00002198 g     F .text	000002a0 Tutorial
0000b340 g     F .text	0000007c _setlocale_r
0000a6fc g     F .text	00000068 __sfmoreglue
00000d14 g     F .text	00000084 laagst
00014850 g     F .text	000000d0 __malloc_unlock
00024a6c g     F .text	0000001c OSTaskStatHook
000233c4 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
000238b8 g     F .text	00000090 alt_up_rs232_read_fd
00029fe0 g     O .bss	00000001 OSLockNesting
0002a05c g     O .bss	00000004 current_sector_modified
00002d98 g     F .text	000000ec menu
00027fcc g     O .rwdata	00000002 OSDataSize
00029fe1 g     O .bss	00000001 OSRunning
00023adc g     F .text	000000cc alt_up_char_buffer_draw
0002a100 g     O .bss	00009c40 Singleplayer_stk
00029f0c g     O .bss	00000004 counter3
0000bfa0 g     F .text	0000015c memmove
00024aa4 g     F .text	0000001c OSInitHookBegin
00027fc4 g     O .rwdata	00000002 OSTmrSize
0000a87c g     F .text	00000018 _cleanup
0000c0fc g     F .text	000000a8 _Balloc
00027ef8 g     O .rwdata	00000004 gameModeMenu
00020290 g     F .text	000000c4 alt_up_sd_card_is_Present
0001d630 g     F .text	0000004c Save_Modified_Sector
00029fe4 g     O .bss	00000004 OSIdleCtr
00012840 g     F .text	000000e0 .hidden __gtdf2
00027f00 g     O .rwdata	00000004 xRechts
000247c4 g     F .text	00000020 altera_nios2_gen2_irq_init
00024890 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0002273c g     F .text	00000074 get_DDRAM_addr
0001663c g     F .text	000002d4 OS_TCBInit
00027f10 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0002a054 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00027fca g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00027f6a g     O .rwdata	00000002 OSEventSize
00029fe8 g     O .bss	00000001 OSPrioHighRdy
0001068c g     F .text	00000058 _fstat_r
00001dbc g     F .text	00000058 VGAtextClear
00024a30 g     F .text	00000020 OSTaskDelHook
00029fbc g     O .bss	00000004 errno
0000d88c g     F .text	00000008 __seofread
00024870 g       .text	00000000 OSStartHighRdy
00029f48 g     O .bss	00000004 pixel_buffer_y
0001b9d8 g     F .text	000001ec OSTaskCreateExt
0000dbe4 g     F .text	00001038 ___svfiprintf_internal_r
000179ac g     F .text	00000068 OSFlagPendGetFlagsRdy
00027faa g     O .rwdata	00000002 OSTaskStatStkSize
00016a9c g     F .text	00000308 OSFlagAccept
00019bc8 g     F .text	000000b8 OSQFlush
000195c4 g     F .text	00000140 OSQAccept
00029fc8 g     O .bss	00000004 alt_argv
00002044 g     F .text	00000154 endTutorial
00029f4c g     O .bss	00000004 score1
0002fee8 g       *ABS*	00000000 _gp
0002083c g     F .text	00000384 alt_up_sd_card_fopen
000203c0 g     F .text	000000d0 alt_up_sd_card_find_first
0001b81c g     F .text	000001bc OSTaskCreate
0002a048 g     O .bss	00000004 command_argument_register
0001b2dc g     F .text	00000540 OSTaskChangePrio
00029fdc g     O .bss	00000004 alt_heapsem
00003bc4 g     F .text	0000003c del_middenlijn
00016910 g     F .text	0000018c OSDebugInit
0001bbc4 g     F .text	000003e0 OSTaskDel
00027f04 g     O .rwdata	00000004 xBoven
00026978 g     O .rwdata	00000180 alt_fd_list
00027f18 g     O .rwdata	00000004 onePress
0004c16c g     O .bss	00000370 OSFlagTbl
00004524 g     F .text	00000008 _putchar_r
00015c10 g     F .text	000000b4 OS_EventTaskRemove
0001fb14 g     F .text	0000012c find_first_empty_record_in_root_directory
0002400c g     F .text	00000090 alt_find_dev
0000be68 g     F .text	00000138 memcpy
00027f94 g     O .rwdata	00000002 OSRdyTblSize
0002294c g     F .text	00000050 alt_up_character_lcd_write_fd
00023ca8 g     F .text	0000005c alt_up_char_buffer_clear
0000a554 g     F .text	0000000c _cleanup_r
00013a7c g     F .text	000000d0 .hidden __floatsidf
0002418c g     F .text	00000078 alt_io_redirect
00012920 g     F .text	000000e0 .hidden __ltdf2
000251fc g       *ABS*	00000000 __DTOR_END__
00022ecc g     F .text	00000090 alt_up_irda_write_fd
00023844 g     F .text	00000074 alt_up_rs232_read_data
000045ec g     F .text	00000014 puts
00024db4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014920 g     F .text	00000120 OSEventNameGet
00027f78 g     O .rwdata	00000002 OSFlagMax
0001f724 g     F .text	000001a4 find_first_empty_cluster
0000d770 g     F .text	00000074 __fpclassifyd
00029f94 g     O .bss	00000004 last
0000ce80 g     F .text	000000a4 __ratio
000201d0 g     F .text	000000c0 alt_up_sd_card_open_dev
0001525c g     F .text	000000f4 OSIntExit
00010000 g     F .text	00000024 __vfiprintf_internal
00027fb2 g     O .rwdata	00000002 OSTCBSize
00029fe9 g     O .bss	00000001 OSPrioCur
00022cc8 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000220d0 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000044bc g     F .text	0000002c _printf_r
00011644 g     F .text	00000008 .hidden __udivsi3
00013ef0 g     F .text	000000a4 isatty
00027f98 g     O .rwdata	00000002 OSStkWidth
00025bb8 g     O .rodata	000000c8 __mprec_tens
00027f8c g     O .rwdata	00000002 OSPtrSize
0000b3bc g     F .text	0000000c __locale_charset
00027f6c g     O .rwdata	00000002 OSEventTblSize
00022c6c g     F .text	0000005c alt_up_irda_disable_read_interrupt
00027f0c g     O .rwdata	00000004 xMenu
000247e4 g       .text	00000000 OSCtxSw
00024d28 g     F .text	0000008c alt_icache_flush
00029fb8 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00029fec g     O .bss	00000004 OSTCBList
00029f10 g     O .bss	00000004 gpio_dev
00027ef0 g     O .rwdata	00000004 leven
00029fc0 g     O .bss	00000004 alt_fd_list_lock
00027f28 g     O .rwdata	00000004 __mb_cur_max
0000b3ec g     F .text	0000000c _localeconv_r
0000c508 g     F .text	0000003c __i2b
0000acf8 g     F .text	000004c0 __sfvwrite_r
0001ea3c g     F .text	000000b8 get_dir_divider_location
0004c4dc g     O .bss	00000c30 OSMemTbl
00029ff0 g     O .bss	00000001 OSTickStepState
0000d7e4 g     F .text	00000054 _sbrk_r
00033d40 g     O .bss	00002004 menu_stk
0001e710 g     F .text	000000c0 filename_to_upper_case
00027f90 g     O .rwdata	00000002 OSQMax
00020bc0 g     F .text	00000084 alt_up_sd_card_set_attributes
0004d10c g     O .bss	00000800 OSTaskStatStk
00019124 g     F .text	000000f8 OSMemNameGet
0001da94 g     F .text	0000027c Read_File_Record_At_Offset
00027f70 g     O .rwdata	00000002 OSFlagEn
00010794 g     F .text	0000005c _read_r
00027fb6 g     O .rwdata	00000002 OSTimeTickHookEn
0001a0e8 g     F .text	00000168 OSQPost
00018218 g     F .text	000000a0 OS_FlagUnlink
00027f48 g     O .rwdata	00000004 alt_max_fd
000237c0 g     F .text	00000044 alt_up_rs232_check_parity
000161d4 g     F .text	00000064 OS_MemCopy
00016238 g     F .text	000000cc OS_Sched
0001f2bc g     F .text	00000468 find_file_in_directory
000103a8 g     F .text	000000f0 _fclose_r
00019034 g     F .text	000000f0 OSMemGet
00018d30 g     F .text	00000110 OSMboxQuery
0001c2a4 g     F .text	000001c0 OSTaskNameSet
00023074 g     F .text	00000030 read_num_bytes_available
0000a514 g     F .text	00000030 fflush
00029fb4 g     O .bss	00000004 __malloc_max_sbrked_mem
00029ff4 g     O .bss	00000004 OSCtxSwCtr
00024a88 g     F .text	0000001c OSTimeTickHook
00024204 g     F .text	000001b0 alt_irq_register
00027f7a g     O .rwdata	00000002 OSFlagNameSize
00022fdc g     F .text	00000034 read_RI_bit
00000d98 g     F .text	00000080 schuifScores
00015cc4 g     F .text	000000fc OS_EventTaskRemoveMulti
00029f14 g     O .bss	00000004 controllerSem
00020354 g     F .text	0000006c alt_up_sd_card_is_FAT16
00011654 g     F .text	0000089c .hidden __adddf3
00015ac4 g     F .text	0000014c OS_EventTaskWaitMulti
0000cc28 g     F .text	0000011c __b2d
00027f92 g     O .rwdata	00000002 OSQSize
00010f98 g     F .text	00000590 .hidden __umoddi3
000140c8 g     F .text	000000d4 lseek
0001abec g     F .text	00000268 OSSemPend
00027f20 g     O .rwdata	00000004 _global_impure_ptr
0001ed90 g     F .text	0000052c get_home_directory_cluster_for_file
0000d208 g     F .text	00000568 _realloc_r
00029f90 g     O .bss	00000004 vorige
00027f7c g     O .rwdata	00000002 OSLowestPrio
0004f9f8 g       *ABS*	00000000 __bss_end
00024af8 g     F .text	00000020 OSTCBInitHook
00027fc2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000246c0 g     F .text	00000104 alt_tick
00004380 g     F .text	00000018 bzero
00018ac4 g     F .text	00000110 OSMboxPost
0002a074 g     O .bss	00000064 highscores
00029f18 g     O .bss	00000004 counter1
000109d8 g     F .text	000005c0 .hidden __udivdi3
000104ac g     F .text	00000184 _fputwc_r
00027f64 g     O .rwdata	00000002 OSEventEn
00025b90 g     O .rodata	00000028 __mprec_bigtens
0000c2ec g     F .text	00000104 __s2b
00027fbe g     O .rwdata	00000002 OSTmrCfgNameSize
000017b0 g     F .text	00000058 dakjeOmlaag
00013b4c g     F .text	000000a4 .hidden __floatunsidf
0000c9d0 g     F .text	00000060 __mcmp
0002a060 g     O .bss	00000004 current_sector_index
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
000230d8 g     F .text	0000002c read_data_byte
00002d4c g     F .text	0000004c terugMenu
0000a8b4 g     F .text	00000018 __fp_lock_all
00027ef4 g     O .rwdata	00000004 oneTime
00018024 g     F .text	000000e4 OS_FlagInit
00024628 g     F .text	00000098 alt_alarm_stop
00029f1c g     O .bss	00000004 Flags_Games
00002530 g     F .text	0000009c clearHighscoreText
00023010 g     F .text	00000030 read_RE_bit
0001d808 g     F .text	000000e0 mark_cluster
00027fa0 g     O .rwdata	00000002 OSTaskIdleStkSize
0002a064 g     O .bss	00000004 alt_irq_active
0001a7d4 g     F .text	000000b0 OSSemAccept
00003acc g     F .text	00000090 VGA_text
00019334 g     F .text	000000d8 OSMemPut
00029f50 g     O .bss	00000004 pixel_buffer_x
00018e40 g     F .text	000001f4 OSMemCreate
00029ff8 g     O .bss	00000004 OSIdleCtrMax
00035d44 g     O .bss	00002004 controller1_stk
00022d08 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00026950 g     O .rwdata	00000028 alt_dev_null
00027fb4 g     O .rwdata	00000002 OSTicksPerSec
00029f54 g     O .bss	00000004 Flags_Highscores
0001fc40 g     F .text	00000188 convert_filename_to_name_extension
00022be0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00022f9c g     F .text	00000040 alt_up_parallel_port_open_dev
000247e4 g       .text	00000000 OSIntCtxSw
0002327c g     F .text	00000074 alt_up_ps2_write_data_byte
000015dc g     F .text	0000017c endGame
00023e44 g     F .text	0000001c alt_dcache_flush_all
0000c3f0 g     F .text	00000068 __hi0bits
0002a034 g     O .bss	00000004 is_sd_card_formated_as_FAT16
000139f4 g     F .text	00000088 .hidden __fixdfsi
00001758 g     F .text	00000058 dakjeOmhoog
0001f8c8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00029ffc g     O .bss	00000004 OSTCBFreeList
00027fdc g       *ABS*	00000000 __ram_rwdata_end
0001ae54 g     F .text	0000016c OSSemPendAbort
00027f40 g     O .rwdata	00000008 alt_dev_list
0001451c g     F .text	000000f8 write
0000d09c g     F .text	000000a0 _putc_r
00029f58 g     O .bss	00000004 verandert
00037d48 g     O .bss	00002004 Tutorial_stk
0002a058 g     O .bss	00000004 device_pointer
00027fb8 g     O .rwdata	00000002 OSVersionNbr
000260ac g       *ABS*	00000000 __ram_rodata_end
00013df0 g     F .text	000000b0 fstat
00023948 g     F .text	00000094 alt_up_rs232_write_fd
00002e84 g     F .text	0000049c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00012920 g     F .text	000000e0 .hidden __ledf2
000046c4 g     F .text	00000088 strcat
00027f60 g     O .rwdata	00000004 OSEndiannessTest
0000c740 g     F .text	00000140 __pow5mult
0000ed30 g     F .text	000012d0 ___vfiprintf_internal_r
00029fac g     O .bss	00000004 __nlocale_changed
0001164c g     F .text	00000008 .hidden __umodsi3
00027f72 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
000009b8 g     F .text	0000035c sorteer
0004f9f8 g       *ABS*	00000000 end
000235b8 g     F .text	00000098 alt_up_ps2_write_fd
00022d44 g     F .text	00000044 alt_up_irda_check_parity
00023a1c g     F .text	00000080 alt_up_char_buffer_init
000034e0 g     F .text	00000238 teken_menu
00021a84 g     F .text	00000140 altera_avalon_jtag_uart_init
00016498 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00001034 g     F .text	00000378 Game
00027eec g     O .rwdata	00000004 check
000251fc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000226bc g     F .text	00000080 alt_avalon_timer_sc_init
00013bf0 g     F .text	00000064 .hidden __clzsi2
00022384 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000a8a4 g     F .text	00000004 __sfp_lock_acquire
0000bd80 g     F .text	000000e8 memchr
00016184 g     F .text	00000050 OS_MemClr
00022860 g     F .text	00000078 alt_up_character_lcd_write
00006804 g     F .text	00001f50 ___vfprintf_internal_r
000248b4 g     F .text	0000015c OSTaskStkInit
00004600 g     F .text	00000058 _sprintf_r
0000aa08 g     F .text	000002f0 _free_r
0000b3c8 g     F .text	00000010 __locale_mb_cur_max
00015820 g     F .text	00000198 OS_EventTaskRdy
0002502c g     F .text	00000194 __call_exitprocs
0002a000 g     O .bss	00000001 OSCPUUsage
00029fa8 g     O .bss	00000004 __mlocale_changed
00027f2c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00003c70 g     F .text	0000003c deleteNummer
0002a068 g     O .bss	00000004 _alt_tick_rate
00019c80 g     F .text	000002fc OSQPend
00039d4c g     O .bss	00002004 newHighscores_stk
0001cbd0 g     F .text	00000148 OSTimeDly
0000078c g     F .text	0000013c read_file
0003bd50 g     O .bss	00002004 controller2_stk
0000c880 g     F .text	00000150 __lshift
0002a06c g     O .bss	00000004 _alt_nticks
000142c0 g     F .text	000000fc read
0001d1a4 g     F .text	000003d8 alt_sys_init
00022a98 g     F .text	00000088 alt_up_character_lcd_shift_display
0000da18 g     F .text	000001cc __ssprint_r
00024f18 g     F .text	00000114 __register_exitproc
0002a001 g     O .bss	00000001 OSTaskCtr
000234d8 g     F .text	00000054 alt_up_ps2_clear_fifo
00023784 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00029f34 g     O .bss	00000004 score2
00029f20 g     O .bss	00000004 MailBox2
00003a18 g     F .text	000000b4 VGA_box
0001cd18 g     F .text	00000168 OSTimeDlyHMSM
000019a8 g     F .text	00000414 Singleplayer
0000c544 g     F .text	000001fc __multiply
00022b20 g     F .text	0000008c alt_up_character_lcd_erase_pos
00021f7c g     F .text	00000068 altera_avalon_jtag_uart_close
000260ac g       *ABS*	00000000 __ram_rwdata_start
000251fc g       *ABS*	00000000 __ram_rodata_start
0002a0d8 g     O .bss	00000028 __malloc_current_mallinfo
00027f66 g     O .rwdata	00000002 OSEventMax
0000cd44 g     F .text	0000013c __d2b
0001afc0 g     F .text	00000110 OSSemPost
0002a030 g     O .bss	00000004 initialized
00002438 g     F .text	000000f8 endNewHighscores
00029f5c g     O .bss	00000002 c
000153d8 g     F .text	000000d8 OSSchedUnlock
00003b5c g     F .text	00000068 draw_middenlijn
00021920 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024c2c g     F .text	000000fc alt_get_fd
0002a004 g     O .bss	00000004 OSMemFreeList
0001551c g     F .text	000000ac OSStatInit
0004f390 g     O .bss	00000014 search_data
00017d9c g     F .text	000000c4 OSFlagQuery
00027f9c g     O .rwdata	00000002 OSTaskCreateExtEn
00010290 g     F .text	00000054 _close_r
00024e9c g     F .text	0000007c memcmp
00015804 g     F .text	0000001c OS_Dummy
000219e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004f9f8 g       *ABS*	00000000 __alt_stack_base
00021a30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00029f98 g     O .bss	00000004 changed
00022c14 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00008834 g     F .text	00000154 __swsetup_r
0003dd54 g     O .bss	00002004 Highscores_stk
0004d90c g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00011ef0 g     F .text	000008cc .hidden __divdf3
0000a764 g     F .text	00000118 __sfp
0004f3a4 g     O .bss	00000054 boot_sector_data
0000cf98 g     F .text	00000078 __copybits
00026548 g     O .rwdata	00000408 __malloc_av_
00029f60 g     O .bss	00000004 ALT_y
0000a8b0 g     F .text	00000004 __sinit_lock_release
0002a008 g     O .bss	00000004 OSTCBHighRdy
00012a00 g     F .text	00000724 .hidden __muldf3
0000d838 g     F .text	00000054 __sread
0002a00c g     O .bss	00000004 OSQFreeList
000236e8 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00024b18 g     F .text	00000114 alt_find_file
00023eb0 g     F .text	000000a4 alt_dev_llist_insert
00014730 g     F .text	00000120 __malloc_lock
0001441c g     F .text	000000b0 sbrk
00004874 g     F .text	00001f90 ___svfprintf_internal_r
00029f64 g     O .bss	00000004 textWeg
00029f68 g     O .bss	00000004 ALT_inc_y
00014a40 g     F .text	0000013c OSEventNameSet
0000a4b8 g     F .text	0000005c _fflush_r
00029f3c g     O .bss	00000004 tutorialText
000102e4 g     F .text	000000c4 _calloc_r
0002a010 g     O .bss	00000001 OSRdyGrp
00029f0c g       *ABS*	00000000 __bss_start
00004398 g     F .text	00000124 memset
00003718 g     F .text	00000300 main
00029fcc g     O .bss	00000004 alt_envp
00029fb0 g     O .bss	00000004 __malloc_max_total_mem
00023a9c g     F .text	00000040 alt_up_char_buffer_open_dev
00021980 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010218 g     F .text	0000001c __swbuf
00025ddc g     O .rodata	00000100 OSUnMapTbl
00020c44 g     F .text	00000088 alt_up_sd_card_get_attributes
00027f96 g     O .rwdata	00000002 OSSemEn
0001d57c g     F .text	000000b4 Write_Sector_Data
00021044 g     F .text	00000720 alt_up_sd_card_write
00022a10 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00017a14 g     F .text	00000388 OSFlagPost
0000d96c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00010498 g     F .text	00000014 fclose
000159b8 g     F .text	0000010c OS_EventTaskWait
00023468 g     F .text	00000070 alt_up_ps2_read_data_byte
00029fa0 g     O .bss	00000004 timeout
00016574 g     F .text	000000c8 OS_TaskStatStkChk
0001bfa4 g     F .text	00000158 OSTaskDelReq
00008b88 g     F .text	00001728 _dtoa_r
0000b5d8 g     F .text	000007a8 _malloc_r
0001094c g     F .text	00000030 __ascii_wctomb
00027f4c g     O .rwdata	00000004 alt_errno
000154b0 g     F .text	0000006c OSStart
00029f6c g     O .bss	00000004 Flags_newHighscores
000146d4 g     F .text	0000005c __env_unlock
0000b1b8 g     F .text	000000c4 _fwalk
0001c464 g     F .text	000001f8 OSTaskResume
0001940c g     F .text	000000e8 OSMemQuery
00027fa8 g     O .rwdata	00000002 OSTaskStatEn
0003fd58 g     O .bss	00009c40 Game_stk
00022d88 g     F .text	00000040 alt_up_irda_write_data
00027f82 g     O .rwdata	00000002 OSMemMax
0001a250 g     F .text	00000170 OSQPostFront
00023650 g     F .text	00000040 alt_up_ps2_open_dev
0000d13c g     F .text	000000cc putc
00011594 g     F .text	00000054 .hidden __divsi3
0002a011 g     O .bss	00000003 OSRdyTbl
00027f5c g     O .rwdata	00000002 OSDebugEn
00022820 g     F .text	00000040 alt_up_character_lcd_open_dev
0000a8e4 g     F .text	00000124 _malloc_trim_r
000231c8 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
000251fc g       *ABS*	00000000 __CTOR_END__
000008c8 g     F .text	000000f0 write_file
00027f74 g     O .rwdata	00000002 OSFlagNodeSize
0002a03c g     O .bss	00000004 status_register
00027fbc g     O .rwdata	00000002 OSTmrCfgMax
000227ec g     F .text	00000034 alt_up_character_lcd_init
0000d974 g     F .text	000000a4 strcmp
0002a044 g     O .bss	00000004 command_register
00019704 g     F .text	000001fc OSQCreate
0001c0fc g     F .text	000001a8 OSTaskNameGet
000251fc g       *ABS*	00000000 __flash_rodata_start
0001a3c0 g     F .text	0000020c OSQPostOpt
000155c8 g     F .text	0000021c OSTimeTick
00027fa4 g     O .rwdata	00000002 OSTaskMax
000251fc g       *ABS*	00000000 __DTOR_LIST__
0001a884 g     F .text	00000100 OSSemCreate
00027fc8 g     O .rwdata	00000002 OSTmrWheelSize
000239dc g     F .text	00000040 alt_up_rs232_open_dev
00029f70 g     O .bss	00000004 gameSem
000127bc g     F .text	00000084 .hidden __nedf2
00027f9e g     O .rwdata	00000002 OSTaskDelEn
0001b0d0 g     F .text	00000110 OSSemQuery
00019900 g     F .text	000002c8 OSQDel
00019f7c g     F .text	0000016c OSQPendAbort
0001d170 g     F .text	00000034 alt_irq_init
000143bc g     F .text	00000060 alt_release_fd
0001d754 g     F .text	000000b4 get_cluster_flag
0000053c g     F .text	0000004c checkID
000230a4 g     F .text	00000034 read_data_valid
00004658 g     F .text	0000006c sprintf
00022bac g     F .text	00000034 alt_up_character_lcd_cursor_off
00025cc0 g     O .rodata	00000100 .hidden __clz_tab
0001dd10 g     F .text	0000028c Write_File_Record_At_Offset
000025cc g     F .text	0000054c newHighscores
00029fa4 g     O .bss	00000004 _PathLocale
00023360 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00024e50 g     F .text	00000014 atexit
00002b18 g     F .text	00000114 endHighscores
00003c00 g     F .text	00000070 del_number
00010234 g     F .text	0000005c _write_r
00015350 g     F .text	00000088 OSSchedLock
0000b3f8 g     F .text	0000001c setlocale
00016da4 g     F .text	00000128 OSFlagCreate
0001df9c g     F .text	00000688 Check_for_DOS_FAT
0001fdc8 g     F .text	000002c4 create_file
00027f24 g     O .rwdata	00000004 _impure_ptr
0002a040 g     O .bss	00000004 CSD_register_w0
00029fc4 g     O .bss	00000004 alt_argc
0000a2b0 g     F .text	00000208 __sflush_r
00023fb0 g     F .text	0000005c _do_dtors
0000b3e4 g     F .text	00000008 __locale_cjk_lang
00027f6e g     O .rwdata	00000002 OSEventMultiEn
00029f74 g     O .bss	00000004 newHighscoreSelect
00016ecc g     F .text	00000270 OSFlagDel
0002a014 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00018958 g     F .text	0000016c OSMboxPendAbort
0000cbc8 g     F .text	00000060 __ulp
00027fba g     O .rwdata	00000002 OSTmrEn
000173bc g     F .text	000005f0 OSFlagPend
0000a8cc g     F .text	00000018 __fp_unlock_all
00027f38 g     O .rwdata	00000008 alt_fs_list
0001e7d0 g     F .text	0000026c check_file_name_for_FAT16_compliance
00016374 g     F .text	00000074 OS_StrCopy
0002a04c g     O .bss	00000004 buffer_memory
00023690 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00023804 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
00027f84 g     O .rwdata	00000002 OSMemNameSize
00029f78 g     O .bss	00000004 ALT_x1
00024ac0 g     F .text	0000001c OSInitHookEnd
00049998 g     O .bss	000007d0 Messages
00003cac g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00027fb0 g     O .rwdata	00000002 OSTCBPrioTblMax
0000b414 g     F .text	0000000c localeconv
00027fac g     O .rwdata	00000002 OSTaskStatStkChkEn
00018350 g     F .text	000000fc OSMboxCreate
00027f80 g     O .rwdata	00000002 OSMemEn
00027ee8 g     O .rwdata	00000004 first
0002a050 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00027f8a g     O .rwdata	00000002 OSMutexEn
00029f38 g     O .bss	00000004 score3
00027fdc g       *ABS*	00000000 _edata
00027f1c g     O .rwdata	00000004 interval_timer_ptr
0004f9f8 g       *ABS*	00000000 _end
0004f3f8 g     O .bss	00000500 active_files
0002a018 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0002008c g     F .text	00000144 copy_file_record_name_to_string
00021fe4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001ce80 g     F .text	000001f0 OSTimeDlyResume
0001e624 g     F .text	000000ec Look_for_FAT16
0001726c g     F .text	00000150 OSFlagNameSet
00003360 g     F .text	000000a0 clearText
000186b4 g     F .text	000002a4 OSMboxPend
0001c65c g     F .text	000001c8 OSTaskStkChk
00027f86 g     O .rwdata	00000002 OSMemSize
0000d894 g     F .text	0000007c __swrite
00027f30 g     O .rwdata	00000004 __malloc_trim_threshold
0000b3d8 g     F .text	0000000c __locale_msgcharset
0002a01c g     O .bss	00000004 OSTCBCur
00029f7c g     O .bss	00000004 laagste
00024e64 g     F .text	00000038 exit
00004320 g     F .text	00000060 checkIDScore
00022dc8 g     F .text	00000074 alt_up_irda_read_data
00029f80 g     O .bss	00000002 a
00020490 g     F .text	000003ac alt_up_sd_card_find_next
00027f88 g     O .rwdata	00000002 OSMemTblSize
0000b27c g     F .text	000000c4 _fwalk_reent
00023104 g     F .text	000000c4 alt_up_ps2_init
0000ca30 g     F .text	00000198 __mdiff
000115e8 g     F .text	0000005c .hidden __modsi3
0004a168 g     O .bss	00002004 menu_stk2
0001d67c g     F .text	000000d8 Read_Sector_Data
000182b8 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a8a8 g     F .text	00000004 __sfp_lock_release
0001518c g     F .text	00000054 OSInit
0001ca38 g     F .text	0000012c OSTaskQuery
000228d8 g     F .text	00000074 alt_up_character_lcd_string
0001a728 g     F .text	000000ac OS_QInit
000163e8 g     F .text	00000054 OS_StrLen
00022f5c g     F .text	00000040 alt_up_irda_open_dev
0001921c g     F .text	00000118 OSMemNameSet
000013ac g     F .text	00000230 gescoord
00027fa2 g     O .rwdata	00000002 OSTaskProfileEn
00001e14 g     F .text	00000230 tutorialUitleg
0002a020 g     O .bss	00000004 OSTime
00029f24 g     O .bss	00000004 Flags
00003400 g     F .text	00000058 tekenBox
0004daec g     O .bss	00000800 OSTaskIdleStk
000251c0 g     F .text	0000003c _exit
00029f84 g     O .bss	00000004 ALT_inc_x
00018bd4 g     F .text	0000015c OSMboxPostOpt
00023d04 g     F .text	00000140 alt_alarm_start
0001713c g     F .text	00000130 OSFlagNameGet
0001d070 g     F .text	00000064 OSTimeGet
00020ccc g     F .text	00000378 alt_up_sd_card_read
0000b420 g     F .text	000001b8 __smakebuf_r
000232f0 g     F .text	00000070 alt_up_ps2_wait_for_ack
000047dc g     F .text	00000098 strlen
00024a50 g     F .text	0000001c OSTaskSwHook
000244d0 g     F .text	00000158 open
0004e2ec g     O .bss	00000b40 OSEventTbl
00012840 g     F .text	000000e0 .hidden __gedf2
0004ee2c g     O .bss	00000510 OSTCBTbl
0001b1e0 g     F .text	000000fc OSSemSet
00027f14 g     O .rwdata	00000004 eenkeer
00003320 g     F .text	00000040 clearScreen
00027f34 g     O .rwdata	00000004 __wctomb
0000ed18 g     F .text	00000018 __sprint_r
00029f88 g     O .bss	00000004 ALT_x2
0002409c g     F .text	00000030 alt_icache_flush_all
00002c2c g     F .text	00000120 Highscores
0002299c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00027fd0 g     O .rwdata	00000004 alt_priority_mask
0001a984 g     F .text	00000268 OSSemDel
0002a024 g     O .bss	00000004 OSFlagFreeList
00027f68 g     O .rwdata	00000002 OSEventNameSize
0001844c g     F .text	00000268 OSMboxDel
00008754 g     F .text	00000024 __vfprintf_internal
0002a028 g     O .bss	00000001 OSStatRdy
00029f28 g     O .bss	00000004 MailBox
0004f33c g     O .bss	00000054 OSTCBPrioTbl
0001097c g     F .text	0000005c _wctomb_r
00014614 g     F .text	000000c0 __env_lock
0002352c g     F .text	0000008c alt_up_ps2_read_fd
00027fae g     O .rwdata	00000002 OSTaskSwHookEn
00027efc g     O .rwdata	00000004 xLinks
00013124 g     F .text	000008d0 .hidden __subdf3
00022e3c g     F .text	00000090 alt_up_irda_read_fd
0000c458 g     F .text	000000b0 __lo0bits
00027fd4 g     O .rwdata	00000008 alt_alarm_list
00027f76 g     O .rwdata	00000002 OSFlagWidth
00023f54 g     F .text	0000005c _do_ctors
00023744 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0001088c g     F .text	000000c0 wcrtomb
00013ca4 g     F .text	000000d0 close
00029fd4 g     O .bss	00000004 alt_envsem
0002a02c g     O .bss	00000004 OSIdleCtrRun
00027f08 g     O .rwdata	00000004 xOnder
000157e4 g     F .text	00000020 OSVersion
00027fc0 g     O .rwdata	00000002 OSTmrCfgWheelSize
00013ff8 g     F .text	00000080 alt_load
0001cb64 g     F .text	0000006c OS_TaskStkClr
00003458 g     F .text	00000088 tekenBox2
00027f9a g     O .rwdata	00000002 OSTaskCreateEn
00029f9c g     O .bss	00000004 menuSem
0001eaf4 g     F .text	0000029c match_file_record_to_name_ext
00015dc0 g     F .text	00000064 OS_EventWaitListInit
00010630 g     F .text	0000005c fputwc
00024adc g     F .text	0000001c OSTaskIdleHook
00029f8c g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
0000a8ac g     F .text	00000004 __sinit_lock_acquire
0000c1cc g     F .text	00000120 __multadd
00001808 g     F .text	000001a0 endSingleplayer
0001c824 g     F .text	00000214 OSTaskSuspend
0000c1a4 g     F .text	00000028 _Bfree
00029f2c g     O .bss	00000004 counter2
00029f30 g     O .bss	00000004 Flags_Tutorial
0001643c g     F .text	0000005c OS_TaskIdle
00027fc6 g     O .rwdata	00000002 OSTmrTblSize
0001a5cc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00151e00 	call	151e0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	10be3e04 	addi	r2,r2,-1800
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	10be3e04 	addi	r2,r2,-1800
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	001525c0 	call	1525c <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a86217 	ldw	r2,-24184(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a86217 	ldw	r2,-24184(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6bfba14 	ori	gp,gp,65256
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10a7c314 	ori	r2,r2,40716

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18fe7e14 	ori	r3,r3,63992

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0013ff80 	call	13ff8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	001419c0 	call	1419c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80f17 	ldw	r3,-24516(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00173bc0 	call	173bc <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80f17 	ldw	r3,-24516(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	00173bc0 	call	173bc <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e81017 	ldw	r3,-24512(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	0018ac40 	call	18ac4 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80f17 	ldw	r3,-24516(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	00173bc0 	call	173bc <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80e17 	ldw	r3,-24520(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	0018ac40 	call	18ac4 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001cbd00 	call	1cbd0 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	21147f04 	addi	r4,r4,20988
     3b8:	0022f9c0 	call	22f9c <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	21148404 	addi	r4,r4,21008
     3c8:	0022f9c0 	call	22f9c <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	21148a04 	addi	r4,r4,21032
     3d8:	0022f9c0 	call	22f9c <alt_up_parallel_port_open_dev>
     3dc:	d0a80a15 	stw	r2,-24536(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80a17 	ldw	r2,-24536(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80a17 	ldw	r2,-24536(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	0003a180 	call	3a18 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	0003a180 	call	3a18 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	0003a180 	call	3a18 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	0003a180 	call	3a18 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <read_file>:
typedef struct balk {
	int Hoogte;
} Balk;

void read_file()
{
     78c:	defff804 	addi	sp,sp,-32
     790:	dfc00715 	stw	ra,28(sp)
     794:	df000615 	stw	fp,24(sp)
     798:	df000604 	addi	fp,sp,24
	short int Read;
	Read = alt_up_sd_card_fopen("hoi.txt", false);
     79c:	010000b4 	movhi	r4,2
     7a0:	21148f04 	addi	r4,r4,21052
     7a4:	000b883a 	mov	r5,zero
     7a8:	002083c0 	call	2083c <alt_up_sd_card_fopen>
     7ac:	e0bffd0d 	sth	r2,-12(fp)

	bzero(highscores, 200);
     7b0:	010000f4 	movhi	r4,3
     7b4:	21281d04 	addi	r4,r4,-24460
     7b8:	01403204 	movi	r5,200
     7bc:	00043800 	call	4380 <bzero>

	int i = 0;
     7c0:	e03ffa15 	stw	zero,-24(fp)
	int k = 0;
     7c4:	e03ffe15 	stw	zero,-8(fp)

	char buffer[1] = "";
     7c8:	e03fff05 	stb	zero,-4(fp)
	short int c = 1;
     7cc:	00800044 	movi	r2,1
     7d0:	e0bffb0d 	sth	r2,-20(fp)

	c = alt_up_sd_card_read(Read);
     7d4:	e0bffd0f 	ldh	r2,-12(fp)
     7d8:	1009883a 	mov	r4,r2
     7dc:	0020ccc0 	call	20ccc <alt_up_sd_card_read>
     7e0:	e0bffb0d 	sth	r2,-20(fp)

	while (c != -1){
     7e4:	00001b06 	br	854 <read_file+0xc8>
		if(c == '|'){		//check voor komma
     7e8:	e0bffb0f 	ldh	r2,-20(fp)
     7ec:	10801f18 	cmpnei	r2,r2,124
     7f0:	1000041e 	bne	r2,zero,804 <read_file+0x78>
			i++;
     7f4:	e0bffa17 	ldw	r2,-24(fp)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	e0bffa15 	stw	r2,-24(fp)
     800:	00001006 	br	844 <read_file+0xb8>
		}else{
			sprintf(buffer, "%c", c);
     804:	e0bffb0f 	ldh	r2,-20(fp)
     808:	e0ffff04 	addi	r3,fp,-4
     80c:	1809883a 	mov	r4,r3
     810:	014000b4 	movhi	r5,2
     814:	29549104 	addi	r5,r5,21060
     818:	100d883a 	mov	r6,r2
     81c:	00046580 	call	4658 <sprintf>
			strcat(highscores[i], buffer);
     820:	e0bffa17 	ldw	r2,-24(fp)
     824:	10c00524 	muli	r3,r2,20
     828:	008000f4 	movhi	r2,3
     82c:	10a81d04 	addi	r2,r2,-24460
     830:	1887883a 	add	r3,r3,r2
     834:	e0bfff04 	addi	r2,fp,-4
     838:	1809883a 	mov	r4,r3
     83c:	100b883a 	mov	r5,r2
     840:	00046c40 	call	46c4 <strcat>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
     844:	e0bffd0f 	ldh	r2,-12(fp)
     848:	1009883a 	mov	r4,r2
     84c:	0020ccc0 	call	20ccc <alt_up_sd_card_read>
     850:	e0bffb0d 	sth	r2,-20(fp)
	char buffer[1] = "";
	short int c = 1;

	c = alt_up_sd_card_read(Read);

	while (c != -1){
     854:	e0bffb0f 	ldh	r2,-20(fp)
     858:	10bfffd8 	cmpnei	r2,r2,-1
     85c:	103fe21e 	bne	r2,zero,7e8 <__alt_mem_Flash_flash_data+0xf40007e8>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     860:	e03ffc15 	stw	zero,-16(fp)
     864:	00000d06 	br	89c <read_file+0x110>
		printf("Number is : %d data :%s\n",j , highscores[j]);
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	10c00524 	muli	r3,r2,20
     870:	008000f4 	movhi	r2,3
     874:	10a81d04 	addi	r2,r2,-24460
     878:	1885883a 	add	r2,r3,r2
     87c:	010000b4 	movhi	r4,2
     880:	21149204 	addi	r4,r4,21064
     884:	e17ffc17 	ldw	r5,-16(fp)
     888:	100d883a 	mov	r6,r2
     88c:	00044e80 	call	44e8 <printf>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	10800044 	addi	r2,r2,1
     898:	e0bffc15 	stw	r2,-16(fp)
     89c:	e0bffc17 	ldw	r2,-16(fp)
     8a0:	10800150 	cmplti	r2,r2,5
     8a4:	103ff01e 	bne	r2,zero,868 <__alt_mem_Flash_flash_data+0xf4000868>
		printf("Number is : %d data :%s\n",j , highscores[j]);
	}

	alt_up_sd_card_fclose(Read);						//sluit het bestand
     8a8:	e0bffd0f 	ldh	r2,-12(fp)
     8ac:	1009883a 	mov	r4,r2
     8b0:	00217640 	call	21764 <alt_up_sd_card_fclose>
}
     8b4:	e037883a 	mov	sp,fp
     8b8:	dfc00117 	ldw	ra,4(sp)
     8bc:	df000017 	ldw	fp,0(sp)
     8c0:	dec00204 	addi	sp,sp,8
     8c4:	f800283a 	ret

000008c8 <write_file>:
void write_file(char input[]){
     8c8:	defffb04 	addi	sp,sp,-20
     8cc:	dfc00415 	stw	ra,16(sp)
     8d0:	df000315 	stw	fp,12(sp)
     8d4:	df000304 	addi	fp,sp,12
     8d8:	e13fff15 	stw	r4,-4(fp)
	short int Write;
	Write = alt_up_sd_card_fopen("hoi.txt", false);
     8dc:	010000b4 	movhi	r4,2
     8e0:	21148f04 	addi	r4,r4,21052
     8e4:	000b883a 	mov	r5,zero
     8e8:	002083c0 	call	2083c <alt_up_sd_card_fopen>
     8ec:	e0bffe0d 	sth	r2,-8(fp)
	int i = 0;
     8f0:	e03ffd15 	stw	zero,-12(fp)
	bool writing;
	if(Write < 0){
     8f4:	e0bffe0f 	ldh	r2,-8(fp)
     8f8:	1000040e 	bge	r2,zero,90c <write_file+0x44>
		printf("Can't open\n");
     8fc:	010000b4 	movhi	r4,2
     900:	21149904 	addi	r4,r4,21092
     904:	00045ec0 	call	45ec <puts>
     908:	00002606 	br	9a4 <write_file+0xdc>
	}else{
		while(input[i] != '\0'){
     90c:	00001706 	br	96c <write_file+0xa4>
			writing = alt_up_sd_card_write(Write, input[i]);
     910:	e13ffe0f 	ldh	r4,-8(fp)
     914:	e0bffd17 	ldw	r2,-12(fp)
     918:	e0ffff17 	ldw	r3,-4(fp)
     91c:	1885883a 	add	r2,r3,r2
     920:	10800003 	ldbu	r2,0(r2)
     924:	10803fcc 	andi	r2,r2,255
     928:	1080201c 	xori	r2,r2,128
     92c:	10bfe004 	addi	r2,r2,-128
     930:	100b883a 	mov	r5,r2
     934:	00210440 	call	21044 <alt_up_sd_card_write>
     938:	e0bffe85 	stb	r2,-6(fp)
			printf("%c", input[i]);
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	e0ffff17 	ldw	r3,-4(fp)
     944:	1885883a 	add	r2,r3,r2
     948:	10800003 	ldbu	r2,0(r2)
     94c:	10803fcc 	andi	r2,r2,255
     950:	1080201c 	xori	r2,r2,128
     954:	10bfe004 	addi	r2,r2,-128
     958:	1009883a 	mov	r4,r2
     95c:	000452c0 	call	452c <putchar>
			i++;
     960:	e0bffd17 	ldw	r2,-12(fp)
     964:	10800044 	addi	r2,r2,1
     968:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
	bool writing;
	if(Write < 0){
		printf("Can't open\n");
	}else{
		while(input[i] != '\0'){
     96c:	e0bffd17 	ldw	r2,-12(fp)
     970:	e0ffff17 	ldw	r3,-4(fp)
     974:	1885883a 	add	r2,r3,r2
     978:	10800003 	ldbu	r2,0(r2)
     97c:	10803fcc 	andi	r2,r2,255
     980:	1080201c 	xori	r2,r2,128
     984:	10bfe004 	addi	r2,r2,-128
     988:	103fe11e 	bne	r2,zero,910 <__alt_mem_Flash_flash_data+0xf4000910>
			writing = alt_up_sd_card_write(Write, input[i]);
			printf("%c", input[i]);
			i++;
		}
		alt_up_sd_card_fclose(Write);
     98c:	e0bffe0f 	ldh	r2,-8(fp)
     990:	1009883a 	mov	r4,r2
     994:	00217640 	call	21764 <alt_up_sd_card_fclose>
		printf("\nFile is geschreven\n");
     998:	010000b4 	movhi	r4,2
     99c:	21149c04 	addi	r4,r4,21104
     9a0:	00045ec0 	call	45ec <puts>
	}

}
     9a4:	e037883a 	mov	sp,fp
     9a8:	dfc00117 	ldw	ra,4(sp)
     9ac:	df000017 	ldw	fp,0(sp)
     9b0:	dec00204 	addi	sp,sp,8
     9b4:	f800283a 	ret

000009b8 <sorteer>:
void sorteer(){
     9b8:	deffe304 	addi	sp,sp,-116
     9bc:	dfc01c15 	stw	ra,112(sp)
     9c0:	df001b15 	stw	fp,108(sp)
     9c4:	dc001a15 	stw	r16,104(sp)
     9c8:	df001b04 	addi	fp,sp,108
	char letter1, letter2, letter3;


	char cijfers[4];

	if(score3 < 100){
     9cc:	d0a81417 	ldw	r2,-24496(gp)
     9d0:	10801908 	cmpgei	r2,r2,100
     9d4:	10000c1e 	bne	r2,zero,a08 <sorteer+0x50>
		cijfers[0] = 0;
     9d8:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = score3 / 10;
     9dc:	d0e81417 	ldw	r3,-24496(gp)
     9e0:	00800284 	movi	r2,10
     9e4:	1885283a 	div	r2,r3,r2
     9e8:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     9ec:	d0a81417 	ldw	r2,-24496(gp)
     9f0:	00c00284 	movi	r3,10
     9f4:	10c7283a 	div	r3,r2,r3
     9f8:	18c002a4 	muli	r3,r3,10
     9fc:	10c5c83a 	sub	r2,r2,r3
     a00:	e0bfea85 	stb	r2,-86(fp)
     a04:	00001d06 	br	a7c <sorteer+0xc4>
	}else if(score3 < 10){
     a08:	d0a81417 	ldw	r2,-24496(gp)
     a0c:	10800288 	cmpgei	r2,r2,10
     a10:	1000051e 	bne	r2,zero,a28 <sorteer+0x70>
		cijfers[0] = 0;
     a14:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = 0;
     a18:	e03fea45 	stb	zero,-87(fp)
		cijfers[2] = score3;
     a1c:	d0a81417 	ldw	r2,-24496(gp)
     a20:	e0bfea85 	stb	r2,-86(fp)
     a24:	00001506 	br	a7c <sorteer+0xc4>
	}else if(score3 > 100){
     a28:	d0a81417 	ldw	r2,-24496(gp)
     a2c:	10801950 	cmplti	r2,r2,101
     a30:	1000121e 	bne	r2,zero,a7c <sorteer+0xc4>
		cijfers[0] = score3 /100;
     a34:	d0e81417 	ldw	r3,-24496(gp)
     a38:	00801904 	movi	r2,100
     a3c:	1885283a 	div	r2,r3,r2
     a40:	e0bfea05 	stb	r2,-88(fp)
		cijfers[1] = score3 /10 %10;
     a44:	d0e81417 	ldw	r3,-24496(gp)
     a48:	00800284 	movi	r2,10
     a4c:	1885283a 	div	r2,r3,r2
     a50:	00c00284 	movi	r3,10
     a54:	10c7283a 	div	r3,r2,r3
     a58:	18c002a4 	muli	r3,r3,10
     a5c:	10c5c83a 	sub	r2,r2,r3
     a60:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     a64:	d0a81417 	ldw	r2,-24496(gp)
     a68:	00c00284 	movi	r3,10
     a6c:	10c7283a 	div	r3,r2,r3
     a70:	18c002a4 	muli	r3,r3,10
     a74:	10c5c83a 	sub	r2,r2,r3
     a78:	e0bfea85 	stb	r2,-86(fp)
	}


	char buffer[30] = "";
     a7c:	e03feb15 	stw	zero,-84(fp)
     a80:	e03fec15 	stw	zero,-80(fp)
     a84:	e03fed15 	stw	zero,-76(fp)
     a88:	e03fee15 	stw	zero,-72(fp)
     a8c:	e03fef15 	stw	zero,-68(fp)
     a90:	e03ff015 	stw	zero,-64(fp)
     a94:	e03ff115 	stw	zero,-60(fp)
     a98:	e03ff20d 	sth	zero,-56(fp)
	char input[50] = "";
     a9c:	e03ff28d 	sth	zero,-54(fp)
     aa0:	e03ff30d 	sth	zero,-52(fp)
     aa4:	e0fff384 	addi	r3,fp,-50
     aa8:	00800b84 	movi	r2,46
     aac:	1809883a 	mov	r4,r3
     ab0:	000b883a 	mov	r5,zero
     ab4:	100d883a 	mov	r6,r2
     ab8:	00043980 	call	4398 <memset>

	for(i = 0; i < 5; i++){
     abc:	e03fe515 	stw	zero,-108(fp)
     ac0:	00008a06 	br	cec <sorteer+0x334>
		hoogste = ((highscores[i][4] - '0') *100) +
     ac4:	008000f4 	movhi	r2,3
     ac8:	10a81d04 	addi	r2,r2,-24460
     acc:	e0ffe517 	ldw	r3,-108(fp)
     ad0:	18c00524 	muli	r3,r3,20
     ad4:	18c00104 	addi	r3,r3,4
     ad8:	10c5883a 	add	r2,r2,r3
     adc:	10800003 	ldbu	r2,0(r2)
     ae0:	10803fcc 	andi	r2,r2,255
     ae4:	1080201c 	xori	r2,r2,128
     ae8:	10bfe004 	addi	r2,r2,-128
     aec:	10bff404 	addi	r2,r2,-48
     af0:	10c01924 	muli	r3,r2,100
				   ((highscores[i][5] - '0') *10) +
     af4:	008000f4 	movhi	r2,3
     af8:	10a81d04 	addi	r2,r2,-24460
     afc:	e13fe517 	ldw	r4,-108(fp)
     b00:	21000524 	muli	r4,r4,20
     b04:	21000144 	addi	r4,r4,5
     b08:	1105883a 	add	r2,r2,r4
     b0c:	10800003 	ldbu	r2,0(r2)
     b10:	10803fcc 	andi	r2,r2,255
     b14:	1080201c 	xori	r2,r2,128
     b18:	10bfe004 	addi	r2,r2,-128
     b1c:	10bff404 	addi	r2,r2,-48
     b20:	108002a4 	muli	r2,r2,10

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     b24:	1887883a 	add	r3,r3,r2
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
     b28:	008000f4 	movhi	r2,3
     b2c:	10a81d04 	addi	r2,r2,-24460
     b30:	e13fe517 	ldw	r4,-108(fp)
     b34:	21000524 	muli	r4,r4,20
     b38:	21000184 	addi	r4,r4,6
     b3c:	1105883a 	add	r2,r2,r4
     b40:	10800003 	ldbu	r2,0(r2)
     b44:	10803fcc 	andi	r2,r2,255
     b48:	1080201c 	xori	r2,r2,128
     b4c:	10bfe004 	addi	r2,r2,-128
     b50:	10bff404 	addi	r2,r2,-48

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     b54:	1885883a 	add	r2,r3,r2
     b58:	e0bfe915 	stw	r2,-92(fp)
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
		if(hoogste < score3){
     b5c:	d0a81417 	ldw	r2,-24496(gp)
     b60:	e0ffe917 	ldw	r3,-92(fp)
     b64:	18805b0e 	bge	r3,r2,cd4 <sorteer+0x31c>

			schuifScores(i);
     b68:	e13fe517 	ldw	r4,-108(fp)
     b6c:	0000d980 	call	d98 <schuifScores>
			printf("score = hoger dan %de score\n", i);
     b70:	010000b4 	movhi	r4,2
     b74:	2114a104 	addi	r4,r4,21124
     b78:	e17fe517 	ldw	r5,-108(fp)
     b7c:	00044e80 	call	44e8 <printf>
			buffer[0] = a[0];
     b80:	d0a82603 	ldbu	r2,-24424(gp)
     b84:	e0bfeb05 	stb	r2,-84(fp)
			buffer[1] = b[0];
     b88:	d0a81703 	ldbu	r2,-24484(gp)
     b8c:	e0bfeb45 	stb	r2,-83(fp)
			buffer[2] = c[0];
     b90:	d0a81d03 	ldbu	r2,-24460(gp)
     b94:	e0bfeb85 	stb	r2,-82(fp)
			buffer[3] = ' ';
     b98:	00800804 	movi	r2,32
     b9c:	e0bfebc5 	stb	r2,-81(fp)
			for(k = 4; k < 7; k++){
     ba0:	00800104 	movi	r2,4
     ba4:	e0bfe615 	stw	r2,-104(fp)
     ba8:	00000e06 	br	be4 <sorteer+0x22c>
				buffer[k] = cijfers[k - 4] + '0';
     bac:	e0bfe617 	ldw	r2,-104(fp)
     bb0:	10bfff04 	addi	r2,r2,-4
     bb4:	e0ffea04 	addi	r3,fp,-88
     bb8:	1885883a 	add	r2,r3,r2
     bbc:	10800003 	ldbu	r2,0(r2)
     bc0:	10800c04 	addi	r2,r2,48
     bc4:	1009883a 	mov	r4,r2
     bc8:	e0ffeb04 	addi	r3,fp,-84
     bcc:	e0bfe617 	ldw	r2,-104(fp)
     bd0:	1885883a 	add	r2,r3,r2
     bd4:	11000005 	stb	r4,0(r2)
			printf("score = hoger dan %de score\n", i);
			buffer[0] = a[0];
			buffer[1] = b[0];
			buffer[2] = c[0];
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
     bd8:	e0bfe617 	ldw	r2,-104(fp)
     bdc:	10800044 	addi	r2,r2,1
     be0:	e0bfe615 	stw	r2,-104(fp)
     be4:	e0bfe617 	ldw	r2,-104(fp)
     be8:	108001d0 	cmplti	r2,r2,7
     bec:	103fef1e 	bne	r2,zero,bac <__alt_mem_Flash_flash_data+0xf4000bac>
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     bf0:	e03fe715 	stw	zero,-100(fp)
     bf4:	00000f06 	br	c34 <sorteer+0x27c>
				highscores[i][l] = buffer[l];
     bf8:	e0ffeb04 	addi	r3,fp,-84
     bfc:	e0bfe717 	ldw	r2,-100(fp)
     c00:	1885883a 	add	r2,r3,r2
     c04:	10c00003 	ldbu	r3,0(r2)
     c08:	008000f4 	movhi	r2,3
     c0c:	10a81d04 	addi	r2,r2,-24460
     c10:	e13fe517 	ldw	r4,-108(fp)
     c14:	21400524 	muli	r5,r4,20
     c18:	e13fe717 	ldw	r4,-100(fp)
     c1c:	2909883a 	add	r4,r5,r4
     c20:	1105883a 	add	r2,r2,r4
     c24:	10c00005 	stb	r3,0(r2)
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     c28:	e0bfe717 	ldw	r2,-100(fp)
     c2c:	10800044 	addi	r2,r2,1
     c30:	e0bfe715 	stw	r2,-100(fp)
     c34:	e0bfe717 	ldw	r2,-100(fp)
     c38:	10800210 	cmplti	r2,r2,8
     c3c:	103fee1e 	bne	r2,zero,bf8 <__alt_mem_Flash_flash_data+0xf4000bf8>
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     c40:	e03fe815 	stw	zero,-96(fp)
     c44:	00001706 	br	ca4 <sorteer+0x2ec>
				strcat(highscores[o], "|");
     c48:	e0bfe817 	ldw	r2,-96(fp)
     c4c:	10c00524 	muli	r3,r2,20
     c50:	008000f4 	movhi	r2,3
     c54:	10a81d04 	addi	r2,r2,-24460
     c58:	18a1883a 	add	r16,r3,r2
     c5c:	8009883a 	mov	r4,r16
     c60:	00047dc0 	call	47dc <strlen>
     c64:	8085883a 	add	r2,r16,r2
     c68:	00c01f04 	movi	r3,124
     c6c:	10c00005 	stb	r3,0(r2)
     c70:	10000045 	stb	zero,1(r2)
				strcat(input, highscores[o]);
     c74:	e0bfe817 	ldw	r2,-96(fp)
     c78:	10c00524 	muli	r3,r2,20
     c7c:	008000f4 	movhi	r2,3
     c80:	10a81d04 	addi	r2,r2,-24460
     c84:	1885883a 	add	r2,r3,r2
     c88:	e0fff284 	addi	r3,fp,-54
     c8c:	1809883a 	mov	r4,r3
     c90:	100b883a 	mov	r5,r2
     c94:	00046c40 	call	46c4 <strcat>

			for(l = 0; l < 8; l++){
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     c98:	e0bfe817 	ldw	r2,-96(fp)
     c9c:	10800044 	addi	r2,r2,1
     ca0:	e0bfe815 	stw	r2,-96(fp)
     ca4:	e0bfe817 	ldw	r2,-96(fp)
     ca8:	10800150 	cmplti	r2,r2,5
     cac:	103fe61e 	bne	r2,zero,c48 <__alt_mem_Flash_flash_data+0xf4000c48>
				strcat(highscores[o], "|");
				strcat(input, highscores[o]);
			}

			printf("%s\nde uiteindelijke string!\n", input);
     cb0:	e0bff284 	addi	r2,fp,-54
     cb4:	010000b4 	movhi	r4,2
     cb8:	2114a904 	addi	r4,r4,21156
     cbc:	100b883a 	mov	r5,r2
     cc0:	00044e80 	call	44e8 <printf>
			//[i] = buffer;

			write_file(input);
     cc4:	e0bff284 	addi	r2,fp,-54
     cc8:	1009883a 	mov	r4,r2
     ccc:	00008c80 	call	8c8 <write_file>
			break;
     cd0:	00000906 	br	cf8 <sorteer+0x340>
		}

		else{
			printf("score is niet hoger\n");
     cd4:	010000b4 	movhi	r4,2
     cd8:	2114b104 	addi	r4,r4,21188
     cdc:	00045ec0 	call	45ec <puts>


	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
     ce0:	e0bfe517 	ldw	r2,-108(fp)
     ce4:	10800044 	addi	r2,r2,1
     ce8:	e0bfe515 	stw	r2,-108(fp)
     cec:	e0bfe517 	ldw	r2,-108(fp)
     cf0:	10800150 	cmplti	r2,r2,5
     cf4:	103f731e 	bne	r2,zero,ac4 <__alt_mem_Flash_flash_data+0xf4000ac4>
			printf("score is niet hoger\n");
		}


	}
	read_file();
     cf8:	000078c0 	call	78c <read_file>
}
     cfc:	e6ffff04 	addi	sp,fp,-4
     d00:	dfc00217 	ldw	ra,8(sp)
     d04:	df000117 	ldw	fp,4(sp)
     d08:	dc000017 	ldw	r16,0(sp)
     d0c:	dec00304 	addi	sp,sp,12
     d10:	f800283a 	ret

00000d14 <laagst>:

void laagst(){
     d14:	deffff04 	addi	sp,sp,-4
     d18:	df000015 	stw	fp,0(sp)
     d1c:	d839883a 	mov	fp,sp
	laagste = ((highscores[4][4] - '0') *100) +
     d20:	008000f4 	movhi	r2,3
     d24:	10a81d04 	addi	r2,r2,-24460
     d28:	10801503 	ldbu	r2,84(r2)
     d2c:	10803fcc 	andi	r2,r2,255
     d30:	1080201c 	xori	r2,r2,128
     d34:	10bfe004 	addi	r2,r2,-128
     d38:	10bff404 	addi	r2,r2,-48
     d3c:	10c01924 	muli	r3,r2,100
			   ((highscores[4][5] - '0') *10) +
     d40:	008000f4 	movhi	r2,3
     d44:	10a81d04 	addi	r2,r2,-24460
     d48:	10801543 	ldbu	r2,85(r2)
     d4c:	10803fcc 	andi	r2,r2,255
     d50:	1080201c 	xori	r2,r2,128
     d54:	10bfe004 	addi	r2,r2,-128
     d58:	10bff404 	addi	r2,r2,-48
     d5c:	108002a4 	muli	r2,r2,10
	}
	read_file();
}

void laagst(){
	laagste = ((highscores[4][4] - '0') *100) +
     d60:	1887883a 	add	r3,r3,r2
			   ((highscores[4][5] - '0') *10) +
			   (highscores[4][6] - '0');
     d64:	008000f4 	movhi	r2,3
     d68:	10a81d04 	addi	r2,r2,-24460
     d6c:	10801583 	ldbu	r2,86(r2)
     d70:	10803fcc 	andi	r2,r2,255
     d74:	1080201c 	xori	r2,r2,128
     d78:	10bfe004 	addi	r2,r2,-128
     d7c:	10bff404 	addi	r2,r2,-48
	read_file();
}

void laagst(){
	laagste = ((highscores[4][4] - '0') *100) +
			   ((highscores[4][5] - '0') *10) +
     d80:	1885883a 	add	r2,r3,r2
	}
	read_file();
}

void laagst(){
	laagste = ((highscores[4][4] - '0') *100) +
     d84:	d0a82515 	stw	r2,-24428(gp)
			   ((highscores[4][5] - '0') *10) +
			   (highscores[4][6] - '0');
}
     d88:	e037883a 	mov	sp,fp
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00104 	addi	sp,sp,4
     d94:	f800283a 	ret

00000d98 <schuifScores>:
void schuifScores(int nummer){
     d98:	defffc04 	addi	sp,sp,-16
     d9c:	dfc00315 	stw	ra,12(sp)
     da0:	df000215 	stw	fp,8(sp)
     da4:	df000204 	addi	fp,sp,8
     da8:	e13fff15 	stw	r4,-4(fp)
	int i;

	for(i = 5; i > nummer; i--){
     dac:	00800144 	movi	r2,5
     db0:	e0bffe15 	stw	r2,-8(fp)
     db4:	00001006 	br	df8 <schuifScores+0x60>
		strcpy(highscores[i], highscores[i-1]);
     db8:	e0bffe17 	ldw	r2,-8(fp)
     dbc:	10c00524 	muli	r3,r2,20
     dc0:	008000f4 	movhi	r2,3
     dc4:	10a81d04 	addi	r2,r2,-24460
     dc8:	1889883a 	add	r4,r3,r2
     dcc:	e0bffe17 	ldw	r2,-8(fp)
     dd0:	10bfffc4 	addi	r2,r2,-1
     dd4:	10c00524 	muli	r3,r2,20
     dd8:	008000f4 	movhi	r2,3
     ddc:	10a81d04 	addi	r2,r2,-24460
     de0:	1885883a 	add	r2,r3,r2
     de4:	100b883a 	mov	r5,r2
     de8:	000474c0 	call	474c <strcpy>
			   (highscores[4][6] - '0');
}
void schuifScores(int nummer){
	int i;

	for(i = 5; i > nummer; i--){
     dec:	e0bffe17 	ldw	r2,-8(fp)
     df0:	10bfffc4 	addi	r2,r2,-1
     df4:	e0bffe15 	stw	r2,-8(fp)
     df8:	e0bffe17 	ldw	r2,-8(fp)
     dfc:	e0ffff17 	ldw	r3,-4(fp)
     e00:	18bfed16 	blt	r3,r2,db8 <__alt_mem_Flash_flash_data+0xf4000db8>
		strcpy(highscores[i], highscores[i-1]);
	}

}
     e04:	e037883a 	mov	sp,fp
     e08:	dfc00117 	ldw	ra,4(sp)
     e0c:	df000017 	ldw	fp,0(sp)
     e10:	dec00204 	addi	sp,sp,8
     e14:	f800283a 	ret

00000e18 <collision>:

void collision(int aantal){
     e18:	defffa04 	addi	sp,sp,-24
     e1c:	dfc00515 	stw	ra,20(sp)
     e20:	df000415 	stw	fp,16(sp)
     e24:	df000404 	addi	fp,sp,16
     e28:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	Balk * balkje;
	Balk * balkje2;

	balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     e2c:	d0e81017 	ldw	r3,-24512(gp)
     e30:	e0bffe04 	addi	r2,fp,-8
     e34:	1809883a 	mov	r4,r3
     e38:	000b883a 	mov	r5,zero
     e3c:	100d883a 	mov	r6,r2
     e40:	00186b40 	call	186b4 <OSMboxPend>
     e44:	e0bffc15 	stw	r2,-16(fp)
	balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     e48:	d0e80e17 	ldw	r3,-24520(gp)
     e4c:	e0bffe04 	addi	r2,fp,-8
     e50:	1809883a 	mov	r4,r3
     e54:	000b883a 	mov	r5,zero
     e58:	100d883a 	mov	r6,r2
     e5c:	00186b40 	call	186b4 <OSMboxPend>
     e60:	e0bffd15 	stw	r2,-12(fp)

	//collision linker balkje
	//lange zijde
	if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50) || ((ALT_y + 5 > balkje->Hoogte && ALT_y < balkje->Hoogte +5) && ALT_x1 == 21) ){
     e64:	d0a82417 	ldw	r2,-24432(gp)
     e68:	10800558 	cmpnei	r2,r2,21
     e6c:	10000a1e 	bne	r2,zero,e98 <collision+0x80>
     e70:	e0bffc17 	ldw	r2,-16(fp)
     e74:	10800017 	ldw	r2,0(r2)
     e78:	10fffe84 	addi	r3,r2,-6
     e7c:	d0a81e17 	ldw	r2,-24456(gp)
     e80:	1880050e 	bge	r3,r2,e98 <collision+0x80>
     e84:	e0bffc17 	ldw	r2,-16(fp)
     e88:	10800017 	ldw	r2,0(r2)
     e8c:	10800c84 	addi	r2,r2,50
     e90:	d0e81e17 	ldw	r3,-24456(gp)
     e94:	18800d16 	blt	r3,r2,ecc <collision+0xb4>
     e98:	d0a81e17 	ldw	r2,-24456(gp)
     e9c:	10800144 	addi	r2,r2,5
     ea0:	e0fffc17 	ldw	r3,-16(fp)
     ea4:	18c00017 	ldw	r3,0(r3)
     ea8:	18800b0e 	bge	r3,r2,ed8 <collision+0xc0>
     eac:	e0bffc17 	ldw	r2,-16(fp)
     eb0:	10800017 	ldw	r2,0(r2)
     eb4:	10800144 	addi	r2,r2,5
     eb8:	d0e81e17 	ldw	r3,-24456(gp)
     ebc:	1880060e 	bge	r3,r2,ed8 <collision+0xc0>
     ec0:	d0a82417 	ldw	r2,-24432(gp)
     ec4:	10800558 	cmpnei	r2,r2,21
     ec8:	1000031e 	bne	r2,zero,ed8 <collision+0xc0>
		ALT_inc_x = -(ALT_inc_x);
     ecc:	d0a82717 	ldw	r2,-24420(gp)
     ed0:	0085c83a 	sub	r2,zero,r2
     ed4:	d0a82715 	stw	r2,-24420(gp)
	}
	//boven
	if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     ed8:	d0a82417 	ldw	r2,-24432(gp)
     edc:	10800548 	cmpgei	r2,r2,21
     ee0:	1000081e 	bne	r2,zero,f04 <collision+0xec>
     ee4:	d0a82417 	ldw	r2,-24432(gp)
     ee8:	108003d0 	cmplti	r2,r2,15
     eec:	1000051e 	bne	r2,zero,f04 <collision+0xec>
     ef0:	e0bffc17 	ldw	r2,-16(fp)
     ef4:	10800017 	ldw	r2,0(r2)
     ef8:	10fffe84 	addi	r3,r2,-6
     efc:	d0a81e17 	ldw	r2,-24456(gp)
     f00:	18800b26 	beq	r3,r2,f30 <collision+0x118>
     f04:	d0a82417 	ldw	r2,-24432(gp)
     f08:	10800548 	cmpgei	r2,r2,21
     f0c:	10000b1e 	bne	r2,zero,f3c <collision+0x124>
     f10:	d0a82417 	ldw	r2,-24432(gp)
     f14:	108003d0 	cmplti	r2,r2,15
     f18:	1000081e 	bne	r2,zero,f3c <collision+0x124>
     f1c:	e0bffc17 	ldw	r2,-16(fp)
     f20:	10800017 	ldw	r2,0(r2)
     f24:	10c00c84 	addi	r3,r2,50
     f28:	d0a81e17 	ldw	r2,-24456(gp)
     f2c:	1880031e 	bne	r3,r2,f3c <collision+0x124>
		ALT_inc_y = -(ALT_inc_y);
     f30:	d0a82017 	ldw	r2,-24448(gp)
     f34:	0085c83a 	sub	r2,zero,r2
     f38:	d0a82015 	stw	r2,-24448(gp)
	}

	if(aantal == 2){
     f3c:	e0bfff17 	ldw	r2,-4(fp)
     f40:	10800098 	cmpnei	r2,r2,2
     f44:	1000361e 	bne	r2,zero,1020 <collision+0x208>
		//collision rechter balkje
		//lange zijde
		if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50) || ((ALT_y + 5 > balkje2->Hoogte && ALT_y < balkje2->Hoogte +5) && ALT_x2 == 299) ){
     f48:	d0a82817 	ldw	r2,-24416(gp)
     f4c:	10804ad8 	cmpnei	r2,r2,299
     f50:	10000a1e 	bne	r2,zero,f7c <collision+0x164>
     f54:	e0bffd17 	ldw	r2,-12(fp)
     f58:	10800017 	ldw	r2,0(r2)
     f5c:	10fffe84 	addi	r3,r2,-6
     f60:	d0a81e17 	ldw	r2,-24456(gp)
     f64:	1880050e 	bge	r3,r2,f7c <collision+0x164>
     f68:	e0bffd17 	ldw	r2,-12(fp)
     f6c:	10800017 	ldw	r2,0(r2)
     f70:	10800c84 	addi	r2,r2,50
     f74:	d0e81e17 	ldw	r3,-24456(gp)
     f78:	18800d16 	blt	r3,r2,fb0 <collision+0x198>
     f7c:	d0a81e17 	ldw	r2,-24456(gp)
     f80:	10800144 	addi	r2,r2,5
     f84:	e0fffd17 	ldw	r3,-12(fp)
     f88:	18c00017 	ldw	r3,0(r3)
     f8c:	18800b0e 	bge	r3,r2,fbc <collision+0x1a4>
     f90:	e0bffd17 	ldw	r2,-12(fp)
     f94:	10800017 	ldw	r2,0(r2)
     f98:	10800144 	addi	r2,r2,5
     f9c:	d0e81e17 	ldw	r3,-24456(gp)
     fa0:	1880060e 	bge	r3,r2,fbc <collision+0x1a4>
     fa4:	d0a82817 	ldw	r2,-24416(gp)
     fa8:	10804ad8 	cmpnei	r2,r2,299
     fac:	1000031e 	bne	r2,zero,fbc <collision+0x1a4>
			ALT_inc_x = -(ALT_inc_x);
     fb0:	d0a82717 	ldw	r2,-24420(gp)
     fb4:	0085c83a 	sub	r2,zero,r2
     fb8:	d0a82715 	stw	r2,-24420(gp)
		}
		//boven
		if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     fbc:	d0a82817 	ldw	r2,-24416(gp)
     fc0:	10804c88 	cmpgei	r2,r2,306
     fc4:	1000081e 	bne	r2,zero,fe8 <collision+0x1d0>
     fc8:	d0a82817 	ldw	r2,-24416(gp)
     fcc:	10804b10 	cmplti	r2,r2,300
     fd0:	1000051e 	bne	r2,zero,fe8 <collision+0x1d0>
     fd4:	e0bffd17 	ldw	r2,-12(fp)
     fd8:	10800017 	ldw	r2,0(r2)
     fdc:	10fffe84 	addi	r3,r2,-6
     fe0:	d0a81e17 	ldw	r2,-24456(gp)
     fe4:	18800b26 	beq	r3,r2,1014 <collision+0x1fc>
     fe8:	d0a82817 	ldw	r2,-24416(gp)
     fec:	10804c88 	cmpgei	r2,r2,306
     ff0:	10000b1e 	bne	r2,zero,1020 <collision+0x208>
     ff4:	d0a82817 	ldw	r2,-24416(gp)
     ff8:	10804b10 	cmplti	r2,r2,300
     ffc:	1000081e 	bne	r2,zero,1020 <collision+0x208>
    1000:	e0bffd17 	ldw	r2,-12(fp)
    1004:	10800017 	ldw	r2,0(r2)
    1008:	10c00c84 	addi	r3,r2,50
    100c:	d0a81e17 	ldw	r2,-24456(gp)
    1010:	1880031e 	bne	r3,r2,1020 <collision+0x208>
			ALT_inc_y = -(ALT_inc_y);
    1014:	d0a82017 	ldw	r2,-24448(gp)
    1018:	0085c83a 	sub	r2,zero,r2
    101c:	d0a82015 	stw	r2,-24448(gp)
		}
	}



}
    1020:	e037883a 	mov	sp,fp
    1024:	dfc00117 	ldw	ra,4(sp)
    1028:	df000017 	ldw	fp,0(sp)
    102c:	dec00204 	addi	sp,sp,8
    1030:	f800283a 	ret

00001034 <Game>:

void Game(void* pdata) {
    1034:	defff604 	addi	sp,sp,-40
    1038:	dfc00915 	stw	ra,36(sp)
    103c:	df000815 	stw	fp,32(sp)
    1040:	df000804 	addi	fp,sp,32
    1044:	e13ffd15 	stw	r4,-12(fp)
	Balk * balkje;
	Balk * balkje2;



	ALT_x1 = 0;
    1048:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    104c:	00802944 	movi	r2,165
    1050:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    1054:	00801904 	movi	r2,100
    1058:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = 1;
    105c:	00800044 	movi	r2,1
    1060:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    1064:	00800044 	movi	r2,1
    1068:	d0a82015 	stw	r2,-24448(gp)

	pixel_buffer_x = 319;
    106c:	00804fc4 	movi	r2,319
    1070:	d0a81a15 	stw	r2,-24472(gp)
	pixel_buffer_y = 230;
    1074:	00803984 	movi	r2,230
    1078:	d0a81815 	stw	r2,-24480(gp)
	int i;
	int hoogte;
	int ID;
	int count;

	balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    107c:	d0e81017 	ldw	r3,-24512(gp)
    1080:	e0bffc04 	addi	r2,fp,-16
    1084:	1809883a 	mov	r4,r3
    1088:	000b883a 	mov	r5,zero
    108c:	100d883a 	mov	r6,r2
    1090:	00186b40 	call	186b4 <OSMboxPend>
    1094:	e0bffa15 	stw	r2,-24(fp)
	balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
    1098:	d0e80e17 	ldw	r3,-24520(gp)
    109c:	e0bffc04 	addi	r2,fp,-16
    10a0:	1809883a 	mov	r4,r3
    10a4:	000b883a 	mov	r5,zero
    10a8:	100d883a 	mov	r6,r2
    10ac:	00186b40 	call	186b4 <OSMboxPend>
    10b0:	e0bffb15 	stw	r2,-20(fp)
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    10b4:	d8000015 	stw	zero,0(sp)
    10b8:	01004f04 	movi	r4,316
    10bc:	01400144 	movi	r5,5
    10c0:	01804fc4 	movi	r6,319
    10c4:	01c03ac4 	movi	r7,235
    10c8:	0003a180 	call	3a18 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    10cc:	d0e80d17 	ldw	r3,-24524(gp)
    10d0:	e0bffc04 	addi	r2,fp,-16
    10d4:	d8800015 	stw	r2,0(sp)
    10d8:	1809883a 	mov	r4,r3
    10dc:	01400084 	movi	r5,2
    10e0:	01800044 	movi	r6,1
    10e4:	000f883a 	mov	r7,zero
    10e8:	00173bc0 	call	173bc <OSFlagPend>





		for (i = 0; i <= 9; i++) {
    10ec:	e03ff915 	stw	zero,-28(fp)
    10f0:	00001706 	br	1150 <Game+0x11c>

			if (score1 == i) {
    10f4:	d0e81917 	ldw	r3,-24476(gp)
    10f8:	e0bff917 	ldw	r2,-28(fp)
    10fc:	1880031e 	bne	r3,r2,110c <Game+0xd8>
				draw_number(i, 1);
    1100:	e13ff917 	ldw	r4,-28(fp)
    1104:	01400044 	movi	r5,1
    1108:	0003cac0 	call	3cac <draw_number>
			}
			if (score2 == i) {
    110c:	d0e81317 	ldw	r3,-24500(gp)
    1110:	e0bff917 	ldw	r2,-28(fp)
    1114:	1880031e 	bne	r3,r2,1124 <Game+0xf0>
				draw_number(i, 3);
    1118:	e13ff917 	ldw	r4,-28(fp)
    111c:	014000c4 	movi	r5,3
    1120:	0003cac0 	call	3cac <draw_number>
			}
			if(score1 == 9 || score2 == 9){
    1124:	d0a81917 	ldw	r2,-24476(gp)
    1128:	10800260 	cmpeqi	r2,r2,9
    112c:	1000031e 	bne	r2,zero,113c <Game+0x108>
    1130:	d0a81317 	ldw	r2,-24500(gp)
    1134:	10800258 	cmpnei	r2,r2,9
    1138:	1000021e 	bne	r2,zero,1144 <Game+0x110>
				score1 =0;
    113c:	d0281915 	stw	zero,-24476(gp)
				score2 =0;
    1140:	d0281315 	stw	zero,-24500(gp)





		for (i = 0; i <= 9; i++) {
    1144:	e0bff917 	ldw	r2,-28(fp)
    1148:	10800044 	addi	r2,r2,1
    114c:	e0bff915 	stw	r2,-28(fp)
    1150:	e0bff917 	ldw	r2,-28(fp)
    1154:	10800290 	cmplti	r2,r2,10
    1158:	103fe61e 	bne	r2,zero,10f4 <__alt_mem_Flash_flash_data+0xf40010f4>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
    115c:	0003b5c0 	call	3b5c <draw_middenlijn>
		if (check == 1) {
    1160:	d0a00117 	ldw	r2,-32764(gp)
    1164:	10800058 	cmpnei	r2,r2,1
    1168:	1000231e 	bne	r2,zero,11f8 <Game+0x1c4>
			del_middenlijn();
    116c:	0003bc40 	call	3bc4 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
    1170:	e0bffb17 	ldw	r2,-20(fp)
    1174:	11400017 	ldw	r5,0(r2)
    1178:	e0bffb17 	ldw	r2,-20(fp)
    117c:	10800017 	ldw	r2,0(r2)
    1180:	10c00c84 	addi	r3,r2,50
    1184:	00803fc4 	movi	r2,255
    1188:	d8800015 	stw	r2,0(sp)
    118c:	01004b04 	movi	r4,300
    1190:	01804c44 	movi	r6,305
    1194:	180f883a 	mov	r7,r3
    1198:	0003a180 	call	3a18 <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
    119c:	01000504 	movi	r4,20
    11a0:	01400504 	movi	r5,20
    11a4:	018000b4 	movhi	r6,2
    11a8:	3194b604 	addi	r6,r6,21208
    11ac:	0003acc0 	call	3acc <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
    11b0:	0009883a 	mov	r4,zero
    11b4:	01400044 	movi	r5,1
    11b8:	000d883a 	mov	r6,zero
    11bc:	000f883a 	mov	r7,zero
    11c0:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
    11c4:	01000504 	movi	r4,20
    11c8:	01400504 	movi	r5,20
    11cc:	018000b4 	movhi	r6,2
    11d0:	3194c004 	addi	r6,r6,21248
    11d4:	0003acc0 	call	3acc <VGA_text>



			del_number(1);
    11d8:	01000044 	movi	r4,1
    11dc:	0003c000 	call	3c00 <del_number>
			del_number(2);
    11e0:	01000084 	movi	r4,2
    11e4:	0003c000 	call	3c00 <del_number>

			score1 = 0;
    11e8:	d0281915 	stw	zero,-24476(gp)
			score2 = 0;
    11ec:	d0281315 	stw	zero,-24500(gp)

			i = 0;
    11f0:	e03ff915 	stw	zero,-28(fp)

			check = 0;
    11f4:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
    11f8:	010000c4 	movi	r4,3
    11fc:	000039c0 	call	39c <controller>
    1200:	10800058 	cmpnei	r2,r2,1
    1204:	1000541e 	bne	r2,zero,1358 <Game+0x324>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1208:	d1282417 	ldw	r4,-24432(gp)
    120c:	d1681e17 	ldw	r5,-24456(gp)
    1210:	d0a82417 	ldw	r2,-24432(gp)
    1214:	10c00144 	addi	r3,r2,5
    1218:	d0a81e17 	ldw	r2,-24456(gp)
    121c:	10800144 	addi	r2,r2,5
    1220:	d8000015 	stw	zero,0(sp)
    1224:	180d883a 	mov	r6,r3
    1228:	100f883a 	mov	r7,r2
    122c:	0003a180 	call	3a18 <VGA_box>
			if (first == 1) {
    1230:	d0a00017 	ldw	r2,-32768(gp)
    1234:	10800058 	cmpnei	r2,r2,1
    1238:	10000f1e 	bne	r2,zero,1278 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    123c:	d0a82417 	ldw	r2,-24432(gp)
    1240:	10c02804 	addi	r3,r2,160
    1244:	d0a82717 	ldw	r2,-24420(gp)
    1248:	1885883a 	add	r2,r3,r2
    124c:	d0a82415 	stw	r2,-24432(gp)
				ALT_x2 += ALT_inc_x;
    1250:	d0e82817 	ldw	r3,-24416(gp)
    1254:	d0a82717 	ldw	r2,-24420(gp)
    1258:	1885883a 	add	r2,r3,r2
    125c:	d0a82815 	stw	r2,-24416(gp)
				ALT_y += ALT_inc_y;
    1260:	d0e81e17 	ldw	r3,-24456(gp)
    1264:	d0a82017 	ldw	r2,-24448(gp)
    1268:	1885883a 	add	r2,r3,r2
    126c:	d0a81e15 	stw	r2,-24456(gp)
				first = 0;
    1270:	d0200015 	stw	zero,-32768(gp)
    1274:	00000c06 	br	12a8 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
    1278:	d0e82417 	ldw	r3,-24432(gp)
    127c:	d0a82717 	ldw	r2,-24420(gp)
    1280:	1885883a 	add	r2,r3,r2
    1284:	d0a82415 	stw	r2,-24432(gp)
				ALT_x2 += ALT_inc_x;
    1288:	d0e82817 	ldw	r3,-24416(gp)
    128c:	d0a82717 	ldw	r2,-24420(gp)
    1290:	1885883a 	add	r2,r3,r2
    1294:	d0a82815 	stw	r2,-24416(gp)
				ALT_y += ALT_inc_y;
    1298:	d0e81e17 	ldw	r3,-24456(gp)
    129c:	d0a82017 	ldw	r2,-24448(gp)
    12a0:	1885883a 	add	r2,r3,r2
    12a4:	d0a81e15 	stw	r2,-24456(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    12a8:	d1282417 	ldw	r4,-24432(gp)
    12ac:	d1681e17 	ldw	r5,-24456(gp)
    12b0:	d0a82417 	ldw	r2,-24432(gp)
    12b4:	11800144 	addi	r6,r2,5
    12b8:	d0a81e17 	ldw	r2,-24456(gp)
    12bc:	10c00144 	addi	r3,r2,5
    12c0:	00804034 	movhi	r2,256
    12c4:	10bfffc4 	addi	r2,r2,-1
    12c8:	d8800015 	stw	r2,0(sp)
    12cc:	180f883a 	mov	r7,r3
    12d0:	0003a180 	call	3a18 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    12d4:	d0e81e17 	ldw	r3,-24456(gp)
    12d8:	d0a81817 	ldw	r2,-24480(gp)
    12dc:	18800326 	beq	r3,r2,12ec <Game+0x2b8>
    12e0:	d0a81e17 	ldw	r2,-24456(gp)
    12e4:	10800118 	cmpnei	r2,r2,4
    12e8:	1000031e 	bne	r2,zero,12f8 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
    12ec:	d0a82017 	ldw	r2,-24448(gp)
    12f0:	0085c83a 	sub	r2,zero,r2
    12f4:	d0a82015 	stw	r2,-24448(gp)
			//collision rand rechts en links
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			collision(2);
    12f8:	01000084 	movi	r4,2
    12fc:	0000e180 	call	e18 <collision>

			//links dood
			if (ALT_x1 == 0) {
    1300:	d0a82417 	ldw	r2,-24432(gp)
    1304:	1000071e 	bne	r2,zero,1324 <Game+0x2f0>
				score2++;
    1308:	d0a81317 	ldw	r2,-24500(gp)
    130c:	10800044 	addi	r2,r2,1
    1310:	d0a81315 	stw	r2,-24500(gp)
				gescoord(2);
    1314:	01000084 	movi	r4,2
    1318:	00013ac0 	call	13ac <gescoord>
				del_number(2);
    131c:	01000084 	movi	r4,2
    1320:	0003c000 	call	3c00 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
    1324:	d0e82817 	ldw	r3,-24416(gp)
    1328:	d0a81a17 	ldw	r2,-24472(gp)
    132c:	1880071e 	bne	r3,r2,134c <Game+0x318>
				score1++;
    1330:	d0a81917 	ldw	r2,-24476(gp)
    1334:	10800044 	addi	r2,r2,1
    1338:	d0a81915 	stw	r2,-24476(gp)
				gescoord(1);
    133c:	01000044 	movi	r4,1
    1340:	00013ac0 	call	13ac <gescoord>
				del_number(1);
    1344:	01000044 	movi	r4,1
    1348:	0003c000 	call	3c00 <del_number>





			OSTimeDly(1);
    134c:	01000044 	movi	r4,1
    1350:	001cbd00 	call	1cbd0 <OSTimeDly>
    1354:	00001406 	br	13a8 <Game+0x374>

		} else if (controller(3) == 2) {
    1358:	010000c4 	movi	r4,3
    135c:	000039c0 	call	39c <controller>
    1360:	10800098 	cmpnei	r2,r2,2
    1364:	1000031e 	bne	r2,zero,1374 <Game+0x340>
			//links
			endGame(2);
    1368:	01000084 	movi	r4,2
    136c:	00015dc0 	call	15dc <endGame>
    1370:	00000d06 	br	13a8 <Game+0x374>
		}else if(controller(3) == 3){
    1374:	010000c4 	movi	r4,3
    1378:	000039c0 	call	39c <controller>
    137c:	108000d8 	cmpnei	r2,r2,3
    1380:	1000031e 	bne	r2,zero,1390 <Game+0x35c>
			//rechts
			endGame(1);
    1384:	01000044 	movi	r4,1
    1388:	00015dc0 	call	15dc <endGame>
    138c:	00000606 	br	13a8 <Game+0x374>
		} else if(controller(2) != 2){
    1390:	01000084 	movi	r4,2
    1394:	000039c0 	call	39c <controller>
    1398:	108000a0 	cmpeqi	r2,r2,2
    139c:	1000021e 	bne	r2,zero,13a8 <Game+0x374>
			endGame(1);
    13a0:	01000044 	movi	r4,1
    13a4:	00015dc0 	call	15dc <endGame>
		}

	}
    13a8:	003f4806 	br	10cc <__alt_mem_Flash_flash_data+0xf40010cc>

000013ac <gescoord>:
}

void gescoord(int ID){
    13ac:	defffc04 	addi	sp,sp,-16
    13b0:	dfc00315 	stw	ra,12(sp)
    13b4:	df000215 	stw	fp,8(sp)
    13b8:	df000204 	addi	fp,sp,8
    13bc:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    13c0:	d1282417 	ldw	r4,-24432(gp)
    13c4:	d1681e17 	ldw	r5,-24456(gp)
    13c8:	d0a82417 	ldw	r2,-24432(gp)
    13cc:	10c00144 	addi	r3,r2,5
    13d0:	d0a81e17 	ldw	r2,-24456(gp)
    13d4:	10800144 	addi	r2,r2,5
    13d8:	d8000015 	stw	zero,0(sp)
    13dc:	180d883a 	mov	r6,r3
    13e0:	100f883a 	mov	r7,r2
    13e4:	0003a180 	call	3a18 <VGA_box>

	first = 1;
    13e8:	00800044 	movi	r2,1
    13ec:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
    13f0:	e0bfff17 	ldw	r2,-4(fp)
    13f4:	10800058 	cmpnei	r2,r2,1
    13f8:	1000251e 	bne	r2,zero,1490 <gescoord+0xe4>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
    13fc:	01000784 	movi	r4,30
    1400:	01400644 	movi	r5,25
    1404:	018000b4 	movhi	r6,2
    1408:	3194ca04 	addi	r6,r6,21288
    140c:	0003acc0 	call	3acc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    1410:	0009883a 	mov	r4,zero
    1414:	000b883a 	mov	r5,zero
    1418:	018008c4 	movi	r6,35
    141c:	000f883a 	mov	r7,zero
    1420:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
    1424:	01000784 	movi	r4,30
    1428:	01400644 	movi	r5,25
    142c:	018000b4 	movhi	r6,2
    1430:	3194d104 	addi	r6,r6,21316
    1434:	0003acc0 	call	3acc <VGA_text>
		ALT_x1 = 0;
    1438:	d0282415 	stw	zero,-24432(gp)
		ALT_x2 = 165;
    143c:	00802944 	movi	r2,165
    1440:	d0a82815 	stw	r2,-24416(gp)
		ALT_y = 100;
    1444:	00801904 	movi	r2,100
    1448:	d0a81e15 	stw	r2,-24456(gp)
		ALT_inc_x = -1;
    144c:	00bfffc4 	movi	r2,-1
    1450:	d0a82715 	stw	r2,-24420(gp)
		if(random == 1){
    1454:	d0a81617 	ldw	r2,-24488(gp)
    1458:	10800058 	cmpnei	r2,r2,1
    145c:	1000041e 	bne	r2,zero,1470 <gescoord+0xc4>
			ALT_inc_y = -1;
    1460:	00bfffc4 	movi	r2,-1
    1464:	d0a82015 	stw	r2,-24448(gp)
			random = 0;
    1468:	d0281615 	stw	zero,-24488(gp)
    146c:	00000706 	br	148c <gescoord+0xe0>
		}else if(random == 0){
    1470:	d0a81617 	ldw	r2,-24488(gp)
    1474:	1000051e 	bne	r2,zero,148c <gescoord+0xe0>
			ALT_inc_y = 1;
    1478:	00800044 	movi	r2,1
    147c:	d0a82015 	stw	r2,-24448(gp)
			random = 1;
    1480:	00800044 	movi	r2,1
    1484:	d0a81615 	stw	r2,-24488(gp)
    1488:	00004f06 	br	15c8 <gescoord+0x21c>
    148c:	00004e06 	br	15c8 <gescoord+0x21c>
		}
	}else if(ID == 2){
    1490:	e0bfff17 	ldw	r2,-4(fp)
    1494:	10800098 	cmpnei	r2,r2,2
    1498:	1000251e 	bne	r2,zero,1530 <gescoord+0x184>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
    149c:	01000784 	movi	r4,30
    14a0:	01400644 	movi	r5,25
    14a4:	018000b4 	movhi	r6,2
    14a8:	3194d804 	addi	r6,r6,21344
    14ac:	0003acc0 	call	3acc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    14b0:	0009883a 	mov	r4,zero
    14b4:	000b883a 	mov	r5,zero
    14b8:	018008c4 	movi	r6,35
    14bc:	000f883a 	mov	r7,zero
    14c0:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
    14c4:	01000784 	movi	r4,30
    14c8:	01400644 	movi	r5,25
    14cc:	018000b4 	movhi	r6,2
    14d0:	3194d104 	addi	r6,r6,21316
    14d4:	0003acc0 	call	3acc <VGA_text>
		ALT_x1 = 0;
    14d8:	d0282415 	stw	zero,-24432(gp)
		ALT_x2 = 165;
    14dc:	00802944 	movi	r2,165
    14e0:	d0a82815 	stw	r2,-24416(gp)
		ALT_y = 100;
    14e4:	00801904 	movi	r2,100
    14e8:	d0a81e15 	stw	r2,-24456(gp)
		ALT_inc_x = 1;
    14ec:	00800044 	movi	r2,1
    14f0:	d0a82715 	stw	r2,-24420(gp)
		if(random == 1){
    14f4:	d0a81617 	ldw	r2,-24488(gp)
    14f8:	10800058 	cmpnei	r2,r2,1
    14fc:	1000041e 	bne	r2,zero,1510 <gescoord+0x164>
			ALT_inc_y = 1;
    1500:	00800044 	movi	r2,1
    1504:	d0a82015 	stw	r2,-24448(gp)
			random = 0;
    1508:	d0281615 	stw	zero,-24488(gp)
    150c:	00000706 	br	152c <gescoord+0x180>
		}else if(random == 0){
    1510:	d0a81617 	ldw	r2,-24488(gp)
    1514:	1000051e 	bne	r2,zero,152c <gescoord+0x180>
			ALT_inc_y = -1;
    1518:	00bfffc4 	movi	r2,-1
    151c:	d0a82015 	stw	r2,-24448(gp)
			random = 1;
    1520:	00800044 	movi	r2,1
    1524:	d0a81615 	stw	r2,-24488(gp)
    1528:	00002706 	br	15c8 <gescoord+0x21c>
    152c:	00002606 	br	15c8 <gescoord+0x21c>
		}
	}else if(ID == 3){
    1530:	e0bfff17 	ldw	r2,-4(fp)
    1534:	108000d8 	cmpnei	r2,r2,3
    1538:	1000231e 	bne	r2,zero,15c8 <gescoord+0x21c>
		VGA_text(30, 25, "De computer heeft gescoord!");
    153c:	01000784 	movi	r4,30
    1540:	01400644 	movi	r5,25
    1544:	018000b4 	movhi	r6,2
    1548:	3194df04 	addi	r6,r6,21372
    154c:	0003acc0 	call	3acc <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
    1550:	0009883a 	mov	r4,zero
    1554:	000b883a 	mov	r5,zero
    1558:	018008c4 	movi	r6,35
    155c:	000f883a 	mov	r7,zero
    1560:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
    1564:	01000784 	movi	r4,30
    1568:	01400644 	movi	r5,25
    156c:	018000b4 	movhi	r6,2
    1570:	3194e604 	addi	r6,r6,21400
    1574:	0003acc0 	call	3acc <VGA_text>
		ALT_x1 = 0;
    1578:	d0282415 	stw	zero,-24432(gp)
		ALT_x2 = 165;
    157c:	00802944 	movi	r2,165
    1580:	d0a82815 	stw	r2,-24416(gp)
		ALT_y = 100;
    1584:	00801904 	movi	r2,100
    1588:	d0a81e15 	stw	r2,-24456(gp)
		ALT_inc_x = -1;
    158c:	00bfffc4 	movi	r2,-1
    1590:	d0a82715 	stw	r2,-24420(gp)
		if(random == 1){
    1594:	d0a81617 	ldw	r2,-24488(gp)
    1598:	10800058 	cmpnei	r2,r2,1
    159c:	1000041e 	bne	r2,zero,15b0 <gescoord+0x204>
			ALT_inc_y = 1;
    15a0:	00800044 	movi	r2,1
    15a4:	d0a82015 	stw	r2,-24448(gp)
			random = 0;
    15a8:	d0281615 	stw	zero,-24488(gp)
    15ac:	00000606 	br	15c8 <gescoord+0x21c>
		}else if(random == 0){
    15b0:	d0a81617 	ldw	r2,-24488(gp)
    15b4:	1000041e 	bne	r2,zero,15c8 <gescoord+0x21c>
			ALT_inc_y = -1;
    15b8:	00bfffc4 	movi	r2,-1
    15bc:	d0a82015 	stw	r2,-24448(gp)
			random = 1;
    15c0:	00800044 	movi	r2,1
    15c4:	d0a81615 	stw	r2,-24488(gp)
		}
	}

}
    15c8:	e037883a 	mov	sp,fp
    15cc:	dfc00117 	ldw	ra,4(sp)
    15d0:	df000017 	ldw	fp,0(sp)
    15d4:	dec00204 	addi	sp,sp,8
    15d8:	f800283a 	ret

000015dc <endGame>:

void endGame(int ID) {
    15dc:	defffb04 	addi	sp,sp,-20
    15e0:	dfc00415 	stw	ra,16(sp)
    15e4:	df000315 	stw	fp,12(sp)
    15e8:	df000304 	addi	fp,sp,12
    15ec:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
    15f0:	010000b4 	movhi	r4,2
    15f4:	2114ed04 	addi	r4,r4,21428
    15f8:	00045ec0 	call	45ec <puts>

	clearScreen();
    15fc:	00033200 	call	3320 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
    1600:	d0a80f17 	ldw	r2,-24516(gp)
    1604:	1009883a 	mov	r4,r2
    1608:	01400304 	movi	r5,12
    160c:	01800044 	movi	r6,1
    1610:	e1fffe04 	addi	r7,fp,-8
    1614:	0017a140 	call	17a14 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
    1618:	d0a80d17 	ldw	r2,-24524(gp)
    161c:	1009883a 	mov	r4,r2
    1620:	01400084 	movi	r5,2
    1624:	01800044 	movi	r6,1
    1628:	e1fffe04 	addi	r7,fp,-8
    162c:	0017a140 	call	17a14 <OSFlagPost>


	if(ID == 1){
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	10800058 	cmpnei	r2,r2,1
    1638:	1000101e 	bne	r2,zero,167c <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
    163c:	010008c4 	movi	r4,35
    1640:	01400644 	movi	r5,25
    1644:	018000b4 	movhi	r6,2
    1648:	3194f004 	addi	r6,r6,21440
    164c:	0003acc0 	call	3acc <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
    1650:	0009883a 	mov	r4,zero
    1654:	000b883a 	mov	r5,zero
    1658:	01800a04 	movi	r6,40
    165c:	000f883a 	mov	r7,zero
    1660:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
    1664:	010008c4 	movi	r4,35
    1668:	01400644 	movi	r5,25
    166c:	018000b4 	movhi	r6,2
    1670:	3194f404 	addi	r6,r6,21456
    1674:	0003acc0 	call	3acc <VGA_text>
    1678:	00001206 	br	16c4 <endGame+0xe8>
	} else if(ID == 2){
    167c:	e0bfff17 	ldw	r2,-4(fp)
    1680:	10800098 	cmpnei	r2,r2,2
    1684:	10000f1e 	bne	r2,zero,16c4 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
    1688:	010008c4 	movi	r4,35
    168c:	01400644 	movi	r5,25
    1690:	018000b4 	movhi	r6,2
    1694:	3194f804 	addi	r6,r6,21472
    1698:	0003acc0 	call	3acc <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
    169c:	0009883a 	mov	r4,zero
    16a0:	000b883a 	mov	r5,zero
    16a4:	01800a04 	movi	r6,40
    16a8:	000f883a 	mov	r7,zero
    16ac:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
    16b0:	010008c4 	movi	r4,35
    16b4:	01400644 	movi	r5,25
    16b8:	018000b4 	movhi	r6,2
    16bc:	3194f404 	addi	r6,r6,21456
    16c0:	0003acc0 	call	3acc <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    16c4:	d0a80f17 	ldw	r2,-24516(gp)
    16c8:	1009883a 	mov	r4,r2
    16cc:	01400444 	movi	r5,17
    16d0:	000d883a 	mov	r6,zero
    16d4:	e1fffe04 	addi	r7,fp,-8
    16d8:	0017a140 	call	17a14 <OSFlagPost>

	teken_menu(2);
    16dc:	01000084 	movi	r4,2
    16e0:	00034e00 	call	34e0 <teken_menu>
	deleteNummer();
    16e4:	0003c700 	call	3c70 <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    16e8:	d1282417 	ldw	r4,-24432(gp)
    16ec:	d1681e17 	ldw	r5,-24456(gp)
    16f0:	d0a82417 	ldw	r2,-24432(gp)
    16f4:	10c00144 	addi	r3,r2,5
    16f8:	d0a81e17 	ldw	r2,-24456(gp)
    16fc:	10800144 	addi	r2,r2,5
    1700:	d8000015 	stw	zero,0(sp)
    1704:	180d883a 	mov	r6,r3
    1708:	100f883a 	mov	r7,r2
    170c:	0003a180 	call	3a18 <VGA_box>

	ALT_x1 = 0;
    1710:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    1714:	00802944 	movi	r2,165
    1718:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    171c:	00801904 	movi	r2,100
    1720:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = 1;
    1724:	00800044 	movi	r2,1
    1728:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    172c:	00800044 	movi	r2,1
    1730:	d0a82015 	stw	r2,-24448(gp)

	check = 1;
    1734:	00800044 	movi	r2,1
    1738:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
    173c:	00800044 	movi	r2,1
    1740:	d0a00015 	stw	r2,-32768(gp)

}
    1744:	e037883a 	mov	sp,fp
    1748:	dfc00117 	ldw	ra,4(sp)
    174c:	df000017 	ldw	fp,0(sp)
    1750:	dec00204 	addi	sp,sp,8
    1754:	f800283a 	ret

00001758 <dakjeOmhoog>:

void dakjeOmhoog(int omhoogX, int omhoogY){
    1758:	defff904 	addi	sp,sp,-28
    175c:	dfc00615 	stw	ra,24(sp)
    1760:	df000515 	stw	fp,20(sp)
    1764:	df000504 	addi	fp,sp,20
    1768:	e13ffe15 	stw	r4,-8(fp)
    176c:	e17fff15 	stw	r5,-4(fp)
	char buffer[10];
	sprintf(buffer,"%c", 30);
    1770:	e13ffb04 	addi	r4,fp,-20
    1774:	014000b4 	movhi	r5,2
    1778:	29549104 	addi	r5,r5,21060
    177c:	01800784 	movi	r6,30
    1780:	00046580 	call	4658 <sprintf>
	VGA_text(omhoogX, omhoogY + 2, buffer); //= dakje omhoog
    1784:	e0bfff17 	ldw	r2,-4(fp)
    1788:	10800084 	addi	r2,r2,2
    178c:	e13ffe17 	ldw	r4,-8(fp)
    1790:	100b883a 	mov	r5,r2
    1794:	e1bffb04 	addi	r6,fp,-20
    1798:	0003acc0 	call	3acc <VGA_text>
}
    179c:	e037883a 	mov	sp,fp
    17a0:	dfc00117 	ldw	ra,4(sp)
    17a4:	df000017 	ldw	fp,0(sp)
    17a8:	dec00204 	addi	sp,sp,8
    17ac:	f800283a 	ret

000017b0 <dakjeOmlaag>:

void dakjeOmlaag(int omlaagX, int omlaagY){
    17b0:	defff904 	addi	sp,sp,-28
    17b4:	dfc00615 	stw	ra,24(sp)
    17b8:	df000515 	stw	fp,20(sp)
    17bc:	df000504 	addi	fp,sp,20
    17c0:	e13ffe15 	stw	r4,-8(fp)
    17c4:	e17fff15 	stw	r5,-4(fp)
	char buffer[10];
	sprintf(buffer,"%c", 31);
    17c8:	e13ffb04 	addi	r4,fp,-20
    17cc:	014000b4 	movhi	r5,2
    17d0:	29549104 	addi	r5,r5,21060
    17d4:	018007c4 	movi	r6,31
    17d8:	00046580 	call	4658 <sprintf>
	VGA_text(omlaagX, omlaagY - 2, buffer); //= dakje omlaag
    17dc:	e0bfff17 	ldw	r2,-4(fp)
    17e0:	10bfff84 	addi	r2,r2,-2
    17e4:	e13ffe17 	ldw	r4,-8(fp)
    17e8:	100b883a 	mov	r5,r2
    17ec:	e1bffb04 	addi	r6,fp,-20
    17f0:	0003acc0 	call	3acc <VGA_text>
}
    17f4:	e037883a 	mov	sp,fp
    17f8:	dfc00117 	ldw	ra,4(sp)
    17fc:	df000017 	ldw	fp,0(sp)
    1800:	dec00204 	addi	sp,sp,8
    1804:	f800283a 	ret

00001808 <endSingleplayer>:

void endSingleplayer(){
    1808:	defffc04 	addi	sp,sp,-16
    180c:	dfc00315 	stw	ra,12(sp)
    1810:	df000215 	stw	fp,8(sp)
    1814:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
    1818:	010000b4 	movhi	r4,2
    181c:	2114fc04 	addi	r4,r4,21488
    1820:	00045ec0 	call	45ec <puts>

	clearScreen();
    1824:	00033200 	call	3320 <clearScreen>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1828:	d0a80f17 	ldw	r2,-24516(gp)
    182c:	1009883a 	mov	r4,r2
    1830:	01400104 	movi	r5,4
    1834:	01800044 	movi	r6,1
    1838:	e1ffff04 	addi	r7,fp,-4
    183c:	0017a140 	call	17a14 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    1840:	010008c4 	movi	r4,35
    1844:	01400644 	movi	r5,25
    1848:	018000b4 	movhi	r6,2
    184c:	31950104 	addi	r6,r6,21508
    1850:	0003acc0 	call	3acc <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1854:	0009883a 	mov	r4,zero
    1858:	000b883a 	mov	r5,zero
    185c:	01800a04 	movi	r6,40
    1860:	000f883a 	mov	r7,zero
    1864:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1868:	010008c4 	movi	r4,35
    186c:	01400644 	movi	r5,25
    1870:	018000b4 	movhi	r6,2
    1874:	31950404 	addi	r6,r6,21520
    1878:	0003acc0 	call	3acc <VGA_text>


	VGA_text(6,5, "           ");
    187c:	01000184 	movi	r4,6
    1880:	01400144 	movi	r5,5
    1884:	018000b4 	movhi	r6,2
    1888:	31950704 	addi	r6,r6,21532
    188c:	0003acc0 	call	3acc <VGA_text>

	leven = beginLevens;
    1890:	008000c4 	movi	r2,3
    1894:	d0a00215 	stw	r2,-32760(gp)

	laagst();
    1898:	0000d140 	call	d14 <laagst>

	if(score3 > laagste){
    189c:	d0a81417 	ldw	r2,-24496(gp)
    18a0:	d0e82517 	ldw	r3,-24428(gp)
    18a4:	18800e0e 	bge	r3,r2,18e0 <endSingleplayer+0xd8>

		clearScreen();
    18a8:	00033200 	call	3320 <clearScreen>
		OSFlagPost(Flags_newHighscores, newHighscores_Flag, OS_FLAG_CLR, &err);
    18ac:	d0a82117 	ldw	r2,-24444(gp)
    18b0:	1009883a 	mov	r4,r2
    18b4:	01404004 	movi	r5,256
    18b8:	000d883a 	mov	r6,zero
    18bc:	e1ffff04 	addi	r7,fp,-4
    18c0:	0017a140 	call	17a14 <OSFlagPost>
		OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    18c4:	d0a80d17 	ldw	r2,-24524(gp)
    18c8:	1009883a 	mov	r4,r2
    18cc:	01400804 	movi	r5,32
    18d0:	01800044 	movi	r6,1
    18d4:	e1ffff04 	addi	r7,fp,-4
    18d8:	0017a140 	call	17a14 <OSFlagPost>
    18dc:	00002d06 	br	1994 <endSingleplayer+0x18c>
		//knop links is bevestig van alle 3 letters in 1 keer
		//knop rechts is letter naar rechts, ook naar bevestig, eenmaal op bevestig en druk nogmaals op rechts, opnieuw bij de meeste linkse letter.



		teken_menu(1);
    18e0:	01000044 	movi	r4,1
    18e4:	00034e00 	call	34e0 <teken_menu>

		VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    18e8:	d8000015 	stw	zero,0(sp)
    18ec:	01004f04 	movi	r4,316
    18f0:	01400104 	movi	r5,4
    18f4:	01804fc4 	movi	r6,319
    18f8:	01c03ac4 	movi	r7,235
    18fc:	0003a180 	call	3a18 <VGA_box>

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1900:	d1282417 	ldw	r4,-24432(gp)
    1904:	d1681e17 	ldw	r5,-24456(gp)
    1908:	d0a82417 	ldw	r2,-24432(gp)
    190c:	10c00144 	addi	r3,r2,5
    1910:	d0a81e17 	ldw	r2,-24456(gp)
    1914:	10800144 	addi	r2,r2,5
    1918:	d8000015 	stw	zero,0(sp)
    191c:	180d883a 	mov	r6,r3
    1920:	100f883a 	mov	r7,r2
    1924:	0003a180 	call	3a18 <VGA_box>
		deleteNummer();
    1928:	0003c700 	call	3c70 <deleteNummer>


		ALT_x1 = 0;
    192c:	d0282415 	stw	zero,-24432(gp)
		ALT_x2 = 165;
    1930:	00802944 	movi	r2,165
    1934:	d0a82815 	stw	r2,-24416(gp)
		ALT_y = 100;
    1938:	00801904 	movi	r2,100
    193c:	d0a81e15 	stw	r2,-24456(gp)
		ALT_inc_x = -1;
    1940:	00bfffc4 	movi	r2,-1
    1944:	d0a82715 	stw	r2,-24420(gp)
		ALT_inc_y = 1;
    1948:	00800044 	movi	r2,1
    194c:	d0a82015 	stw	r2,-24448(gp)
	
		leven = beginLevens;
    1950:	008000c4 	movi	r2,3
    1954:	d0a00215 	stw	r2,-32760(gp)
		score3 = 0;
    1958:	d0281415 	stw	zero,-24496(gp)
		first = 1;
    195c:	00800044 	movi	r2,1
    1960:	d0a00015 	stw	r2,-32768(gp)

		OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1964:	d0a80d17 	ldw	r2,-24524(gp)
    1968:	1009883a 	mov	r4,r2
    196c:	01400804 	movi	r5,32
    1970:	01800044 	movi	r6,1
    1974:	e1ffff04 	addi	r7,fp,-4
    1978:	0017a140 	call	17a14 <OSFlagPost>

		OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    197c:	d0a80f17 	ldw	r2,-24516(gp)
    1980:	1009883a 	mov	r4,r2
    1984:	01400444 	movi	r5,17
    1988:	000d883a 	mov	r6,zero
    198c:	e1ffff04 	addi	r7,fp,-4
    1990:	0017a140 	call	17a14 <OSFlagPost>
	

	}

}
    1994:	e037883a 	mov	sp,fp
    1998:	dfc00117 	ldw	ra,4(sp)
    199c:	df000017 	ldw	fp,0(sp)
    19a0:	dec00204 	addi	sp,sp,8
    19a4:	f800283a 	ret

000019a8 <Singleplayer>:

void Singleplayer(void* pdata){
    19a8:	defff704 	addi	sp,sp,-36
    19ac:	dfc00815 	stw	ra,32(sp)
    19b0:	df000715 	stw	fp,28(sp)
    19b4:	df000704 	addi	fp,sp,28
    19b8:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    19bc:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    19c0:	00802944 	movi	r2,165
    19c4:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    19c8:	00801904 	movi	r2,100
    19cc:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = -1;
    19d0:	00bfffc4 	movi	r2,-1
    19d4:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    19d8:	00800044 	movi	r2,1
    19dc:	d0a82015 	stw	r2,-24448(gp)

	pixel_buffer_x = 315;
    19e0:	00804ec4 	movi	r2,315
    19e4:	d0a81a15 	stw	r2,-24472(gp)
	pixel_buffer_y = 230;
    19e8:	00803984 	movi	r2,230
    19ec:	d0a81815 	stw	r2,-24480(gp)
	char levens[10];

	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    19f0:	d0e80d17 	ldw	r3,-24524(gp)
    19f4:	e0bffc04 	addi	r2,fp,-16
    19f8:	d8800015 	stw	r2,0(sp)
    19fc:	1809883a 	mov	r4,r3
    1a00:	01400804 	movi	r5,32
    1a04:	000d883a 	mov	r6,zero
    1a08:	000f883a 	mov	r7,zero
    1a0c:	00173bc0 	call	173bc <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    1a10:	d0e81017 	ldw	r3,-24512(gp)
    1a14:	e0bffc04 	addi	r2,fp,-16
    1a18:	1809883a 	mov	r4,r3
    1a1c:	000b883a 	mov	r5,zero
    1a20:	100d883a 	mov	r6,r2
    1a24:	00186b40 	call	186b4 <OSMboxPend>
    1a28:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1a2c:	d1282417 	ldw	r4,-24432(gp)
    1a30:	d1681e17 	ldw	r5,-24456(gp)
    1a34:	d0a82417 	ldw	r2,-24432(gp)
    1a38:	10c00144 	addi	r3,r2,5
    1a3c:	d0a81e17 	ldw	r2,-24456(gp)
    1a40:	10800144 	addi	r2,r2,5
    1a44:	d8000015 	stw	zero,0(sp)
    1a48:	180d883a 	mov	r6,r3
    1a4c:	100f883a 	mov	r7,r2
    1a50:	0003a180 	call	3a18 <VGA_box>

		if (first == 1) {
    1a54:	d0a00017 	ldw	r2,-32768(gp)
    1a58:	10800058 	cmpnei	r2,r2,1
    1a5c:	1000201e 	bne	r2,zero,1ae0 <Singleplayer+0x138>
			printf("FIRST");
    1a60:	010000b4 	movhi	r4,2
    1a64:	21150a04 	addi	r4,r4,21544
    1a68:	00044e80 	call	44e8 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    1a6c:	d0a82417 	ldw	r2,-24432(gp)
    1a70:	10c02804 	addi	r3,r2,160
    1a74:	d0a82717 	ldw	r2,-24420(gp)
    1a78:	1885883a 	add	r2,r3,r2
    1a7c:	d0a82415 	stw	r2,-24432(gp)
			ALT_x2 += ALT_inc_x;
    1a80:	d0e82817 	ldw	r3,-24416(gp)
    1a84:	d0a82717 	ldw	r2,-24420(gp)
    1a88:	1885883a 	add	r2,r3,r2
    1a8c:	d0a82815 	stw	r2,-24416(gp)
			ALT_y += ALT_inc_y;
    1a90:	d0e81e17 	ldw	r3,-24456(gp)
    1a94:	d0a82017 	ldw	r2,-24448(gp)
    1a98:	1885883a 	add	r2,r3,r2
    1a9c:	d0a81e15 	stw	r2,-24456(gp)

			del_middenlijn();
    1aa0:	0003bc40 	call	3bc4 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1aa4:	0081a5c4 	movi	r2,1687
    1aa8:	d8800015 	stw	r2,0(sp)
    1aac:	01004f04 	movi	r4,316
    1ab0:	000b883a 	mov	r5,zero
    1ab4:	01804fc4 	movi	r6,319
    1ab8:	01c03bc4 	movi	r7,239
    1abc:	0003a180 	call	3a18 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1ac0:	d8000015 	stw	zero,0(sp)
    1ac4:	01004b04 	movi	r4,300
    1ac8:	01400104 	movi	r5,4
    1acc:	01804c44 	movi	r6,305
    1ad0:	01c03ac4 	movi	r7,235
    1ad4:	0003a180 	call	3a18 <VGA_box>

			first = 0;
    1ad8:	d0200015 	stw	zero,-32768(gp)
    1adc:	00000c06 	br	1b10 <Singleplayer+0x168>
		} else {
			ALT_x1 += ALT_inc_x;
    1ae0:	d0e82417 	ldw	r3,-24432(gp)
    1ae4:	d0a82717 	ldw	r2,-24420(gp)
    1ae8:	1885883a 	add	r2,r3,r2
    1aec:	d0a82415 	stw	r2,-24432(gp)
			ALT_x2 += ALT_inc_x;
    1af0:	d0e82817 	ldw	r3,-24416(gp)
    1af4:	d0a82717 	ldw	r2,-24420(gp)
    1af8:	1885883a 	add	r2,r3,r2
    1afc:	d0a82815 	stw	r2,-24416(gp)
			ALT_y += ALT_inc_y;
    1b00:	d0e81e17 	ldw	r3,-24456(gp)
    1b04:	d0a82017 	ldw	r2,-24448(gp)
    1b08:	1885883a 	add	r2,r3,r2
    1b0c:	d0a81e15 	stw	r2,-24456(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1b10:	d0e81e17 	ldw	r3,-24456(gp)
    1b14:	d0a81817 	ldw	r2,-24480(gp)
    1b18:	18800326 	beq	r3,r2,1b28 <Singleplayer+0x180>
    1b1c:	d0a81e17 	ldw	r2,-24456(gp)
    1b20:	10800118 	cmpnei	r2,r2,4
    1b24:	1000031e 	bne	r2,zero,1b34 <Singleplayer+0x18c>
			ALT_inc_y = -(ALT_inc_y);
    1b28:	d0a82017 	ldw	r2,-24448(gp)
    1b2c:	0085c83a 	sub	r2,zero,r2
    1b30:	d0a82015 	stw	r2,-24448(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1b34:	d0e82817 	ldw	r3,-24416(gp)
    1b38:	d0a81a17 	ldw	r2,-24472(gp)
    1b3c:	1880071e 	bne	r3,r2,1b5c <Singleplayer+0x1b4>
			ALT_inc_x = -(ALT_inc_x);
    1b40:	d0a82717 	ldw	r2,-24420(gp)
    1b44:	0085c83a 	sub	r2,zero,r2
    1b48:	d0a82715 	stw	r2,-24420(gp)
			deleteNummer();
    1b4c:	0003c700 	call	3c70 <deleteNummer>
			score3++;
    1b50:	d0a81417 	ldw	r2,-24496(gp)
    1b54:	10800044 	addi	r2,r2,1
    1b58:	d0a81415 	stw	r2,-24496(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1b5c:	d1282417 	ldw	r4,-24432(gp)
    1b60:	d1681e17 	ldw	r5,-24456(gp)
    1b64:	d0a82417 	ldw	r2,-24432(gp)
    1b68:	11800144 	addi	r6,r2,5
    1b6c:	d0a81e17 	ldw	r2,-24456(gp)
    1b70:	10c00144 	addi	r3,r2,5
    1b74:	00804034 	movhi	r2,256
    1b78:	10bfffc4 	addi	r2,r2,-1
    1b7c:	d8800015 	stw	r2,0(sp)
    1b80:	180f883a 	mov	r7,r3
    1b84:	0003a180 	call	3a18 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    1b88:	d0a82417 	ldw	r2,-24432(gp)
    1b8c:	1000051e 	bne	r2,zero,1ba4 <Singleplayer+0x1fc>
			leven--;
    1b90:	d0a00217 	ldw	r2,-32760(gp)
    1b94:	10bfffc4 	addi	r2,r2,-1
    1b98:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    1b9c:	010000c4 	movi	r4,3
    1ba0:	00013ac0 	call	13ac <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1ba4:	d0a82417 	ldw	r2,-24432(gp)
    1ba8:	10800558 	cmpnei	r2,r2,21
    1bac:	10000c1e 	bne	r2,zero,1be0 <Singleplayer+0x238>
    1bb0:	e0bffb17 	ldw	r2,-20(fp)
    1bb4:	10c00017 	ldw	r3,0(r2)
    1bb8:	d0a81e17 	ldw	r2,-24456(gp)
    1bbc:	1880080e 	bge	r3,r2,1be0 <Singleplayer+0x238>
    1bc0:	e0bffb17 	ldw	r2,-20(fp)
    1bc4:	10800017 	ldw	r2,0(r2)
    1bc8:	10800c84 	addi	r2,r2,50
    1bcc:	d0e81e17 	ldw	r3,-24456(gp)
    1bd0:	1880030e 	bge	r3,r2,1be0 <Singleplayer+0x238>
			ALT_inc_x = -(ALT_inc_x);
    1bd4:	d0a82717 	ldw	r2,-24420(gp)
    1bd8:	0085c83a 	sub	r2,zero,r2
    1bdc:	d0a82715 	stw	r2,-24420(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1be0:	d0a82417 	ldw	r2,-24432(gp)
    1be4:	10800608 	cmpgei	r2,r2,24
    1be8:	10000a1e 	bne	r2,zero,1c14 <Singleplayer+0x26c>
    1bec:	d0a82417 	ldw	r2,-24432(gp)
    1bf0:	10800590 	cmplti	r2,r2,22
    1bf4:	1000071e 	bne	r2,zero,1c14 <Singleplayer+0x26c>
    1bf8:	e0bffb17 	ldw	r2,-20(fp)
    1bfc:	10c00017 	ldw	r3,0(r2)
    1c00:	d0a81e17 	ldw	r2,-24456(gp)
    1c04:	1880031e 	bne	r3,r2,1c14 <Singleplayer+0x26c>
			ALT_inc_y = -(ALT_inc_y);
    1c08:	d0a82017 	ldw	r2,-24448(gp)
    1c0c:	0085c83a 	sub	r2,zero,r2
    1c10:	d0a82015 	stw	r2,-24448(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1c14:	d0a82417 	ldw	r2,-24432(gp)
    1c18:	10800608 	cmpgei	r2,r2,24
    1c1c:	10000b1e 	bne	r2,zero,1c4c <Singleplayer+0x2a4>
    1c20:	d0a82417 	ldw	r2,-24432(gp)
    1c24:	10800590 	cmplti	r2,r2,22
    1c28:	1000081e 	bne	r2,zero,1c4c <Singleplayer+0x2a4>
    1c2c:	e0bffb17 	ldw	r2,-20(fp)
    1c30:	10800017 	ldw	r2,0(r2)
    1c34:	10c00c84 	addi	r3,r2,50
    1c38:	d0a81e17 	ldw	r2,-24456(gp)
    1c3c:	1880031e 	bne	r3,r2,1c4c <Singleplayer+0x2a4>
			ALT_inc_y = -(ALT_inc_y);
    1c40:	d0a82017 	ldw	r2,-24448(gp)
    1c44:	0085c83a 	sub	r2,zero,r2
    1c48:	d0a82015 	stw	r2,-24448(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    1c4c:	d0a00217 	ldw	r2,-32760(gp)
    1c50:	e0fffc44 	addi	r3,fp,-15
    1c54:	1809883a 	mov	r4,r3
    1c58:	014000b4 	movhi	r5,2
    1c5c:	29550c04 	addi	r5,r5,21552
    1c60:	100d883a 	mov	r6,r2
    1c64:	00046580 	call	4658 <sprintf>
		VGA_text(6,5, levens);
    1c68:	e0bffc44 	addi	r2,fp,-15
    1c6c:	01000184 	movi	r4,6
    1c70:	01400144 	movi	r5,5
    1c74:	100d883a 	mov	r6,r2
    1c78:	0003acc0 	call	3acc <VGA_text>
		OSTimeDly(1);
    1c7c:	01000044 	movi	r4,1
    1c80:	001cbd00 	call	1cbd0 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    1c84:	e03ffa15 	stw	zero,-24(fp)
    1c88:	00004806 	br	1dac <Singleplayer+0x404>

			if(score3 == i){
    1c8c:	d0e81417 	ldw	r3,-24496(gp)
    1c90:	e0bffa17 	ldw	r2,-24(fp)
    1c94:	18803c1e 	bne	r3,r2,1d88 <Singleplayer+0x3e0>

				if (score3 >= 0 && score3 <= 9){
    1c98:	d0a81417 	ldw	r2,-24496(gp)
    1c9c:	10000716 	blt	r2,zero,1cbc <Singleplayer+0x314>
    1ca0:	d0a81417 	ldw	r2,-24496(gp)
    1ca4:	10800288 	cmpgei	r2,r2,10
    1ca8:	1000041e 	bne	r2,zero,1cbc <Singleplayer+0x314>
					draw_number(i, 3);
    1cac:	e13ffa17 	ldw	r4,-24(fp)
    1cb0:	014000c4 	movi	r5,3
    1cb4:	0003cac0 	call	3cac <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    1cb8:	00003306 	br	1d88 <Singleplayer+0x3e0>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1cbc:	d0a81417 	ldw	r2,-24496(gp)
    1cc0:	10800290 	cmplti	r2,r2,10
    1cc4:	1000121e 	bne	r2,zero,1d10 <Singleplayer+0x368>
    1cc8:	d0a81417 	ldw	r2,-24496(gp)
    1ccc:	10801908 	cmpgei	r2,r2,100
    1cd0:	10000f1e 	bne	r2,zero,1d10 <Singleplayer+0x368>
					draw_number(i /10 , 2);
    1cd4:	e0fffa17 	ldw	r3,-24(fp)
    1cd8:	00800284 	movi	r2,10
    1cdc:	1885283a 	div	r2,r3,r2
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	01400084 	movi	r5,2
    1ce8:	0003cac0 	call	3cac <draw_number>
					draw_number(i %10, 3);
    1cec:	e0bffa17 	ldw	r2,-24(fp)
    1cf0:	00c00284 	movi	r3,10
    1cf4:	10c7283a 	div	r3,r2,r3
    1cf8:	18c002a4 	muli	r3,r3,10
    1cfc:	10c5c83a 	sub	r2,r2,r3
    1d00:	1009883a 	mov	r4,r2
    1d04:	014000c4 	movi	r5,3
    1d08:	0003cac0 	call	3cac <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1d0c:	00001e06 	br	1d88 <Singleplayer+0x3e0>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1d10:	d0a81417 	ldw	r2,-24496(gp)
    1d14:	10801910 	cmplti	r2,r2,100
    1d18:	10001b1e 	bne	r2,zero,1d88 <Singleplayer+0x3e0>
    1d1c:	d0a81417 	ldw	r2,-24496(gp)
    1d20:	1080fa08 	cmpgei	r2,r2,1000
    1d24:	1000181e 	bne	r2,zero,1d88 <Singleplayer+0x3e0>
					draw_number(i /100 , 1);
    1d28:	e0fffa17 	ldw	r3,-24(fp)
    1d2c:	00801904 	movi	r2,100
    1d30:	1885283a 	div	r2,r3,r2
    1d34:	1009883a 	mov	r4,r2
    1d38:	01400044 	movi	r5,1
    1d3c:	0003cac0 	call	3cac <draw_number>
					draw_number(i /10 %10, 2);
    1d40:	e0fffa17 	ldw	r3,-24(fp)
    1d44:	00800284 	movi	r2,10
    1d48:	1885283a 	div	r2,r3,r2
    1d4c:	00c00284 	movi	r3,10
    1d50:	10c7283a 	div	r3,r2,r3
    1d54:	18c002a4 	muli	r3,r3,10
    1d58:	10c5c83a 	sub	r2,r2,r3
    1d5c:	1009883a 	mov	r4,r2
    1d60:	01400084 	movi	r5,2
    1d64:	0003cac0 	call	3cac <draw_number>
					draw_number(i %10, 3);
    1d68:	e0bffa17 	ldw	r2,-24(fp)
    1d6c:	00c00284 	movi	r3,10
    1d70:	10c7283a 	div	r3,r2,r3
    1d74:	18c002a4 	muli	r3,r3,10
    1d78:	10c5c83a 	sub	r2,r2,r3
    1d7c:	1009883a 	mov	r4,r2
    1d80:	014000c4 	movi	r5,3
    1d84:	0003cac0 	call	3cac <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    1d88:	d0a81417 	ldw	r2,-24496(gp)
    1d8c:	1080f9e0 	cmpeqi	r2,r2,999
    1d90:	1000021e 	bne	r2,zero,1d9c <Singleplayer+0x3f4>
    1d94:	d0a00217 	ldw	r2,-32760(gp)
    1d98:	1000011e 	bne	r2,zero,1da0 <Singleplayer+0x3f8>
				endSingleplayer();
    1d9c:	00018080 	call	1808 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    1da0:	e0bffa17 	ldw	r2,-24(fp)
    1da4:	10800044 	addi	r2,r2,1
    1da8:	e0bffa15 	stw	r2,-24(fp)
    1dac:	e0bffa17 	ldw	r2,-24(fp)
    1db0:	1080fa10 	cmplti	r2,r2,1000
    1db4:	103fb51e 	bne	r2,zero,1c8c <__alt_mem_Flash_flash_data+0xf4001c8c>





	}
    1db8:	003f0d06 	br	19f0 <__alt_mem_Flash_flash_data+0xf40019f0>

00001dbc <VGAtextClear>:
	
}

void VGAtextClear(){
    1dbc:	defffd04 	addi	sp,sp,-12
    1dc0:	dfc00215 	stw	ra,8(sp)
    1dc4:	df000115 	stw	fp,4(sp)
    1dc8:	df000104 	addi	fp,sp,4
	int clear;
	
	for (clear = 0; clear < 60; clear++){
    1dcc:	e03fff15 	stw	zero,-4(fp)
    1dd0:	00000806 	br	1df4 <VGAtextClear+0x38>
		VGA_text(1, clear, "                                                                                              ");
    1dd4:	01000044 	movi	r4,1
    1dd8:	e17fff17 	ldw	r5,-4(fp)
    1ddc:	018000b4 	movhi	r6,2
    1de0:	31950f04 	addi	r6,r6,21564
    1de4:	0003acc0 	call	3acc <VGA_text>
}

void VGAtextClear(){
	int clear;
	
	for (clear = 0; clear < 60; clear++){
    1de8:	e0bfff17 	ldw	r2,-4(fp)
    1dec:	10800044 	addi	r2,r2,1
    1df0:	e0bfff15 	stw	r2,-4(fp)
    1df4:	e0bfff17 	ldw	r2,-4(fp)
    1df8:	10800f10 	cmplti	r2,r2,60
    1dfc:	103ff51e 	bne	r2,zero,1dd4 <__alt_mem_Flash_flash_data+0xf4001dd4>
		VGA_text(1, clear, "                                                                                              ");
	}
}
    1e00:	e037883a 	mov	sp,fp
    1e04:	dfc00117 	ldw	ra,4(sp)
    1e08:	df000017 	ldw	fp,0(sp)
    1e0c:	dec00204 	addi	sp,sp,8
    1e10:	f800283a 	ret

00001e14 <tutorialUitleg>:

void tutorialUitleg(){
    1e14:	defffe04 	addi	sp,sp,-8
    1e18:	dfc00115 	stw	ra,4(sp)
    1e1c:	df000015 	stw	fp,0(sp)
    1e20:	d839883a 	mov	fp,sp
	INT8U err;
	


	if(controller(3) == 2){
    1e24:	010000c4 	movi	r4,3
    1e28:	000039c0 	call	39c <controller>
    1e2c:	10800098 	cmpnei	r2,r2,2
    1e30:	10000a1e 	bne	r2,zero,1e5c <tutorialUitleg+0x48>
		tutorialText++;
    1e34:	d0a81517 	ldw	r2,-24492(gp)
    1e38:	10800044 	addi	r2,r2,1
    1e3c:	d0a81515 	stw	r2,-24492(gp)
		OSTimeDly(20);
    1e40:	01000504 	movi	r4,20
    1e44:	001cbd00 	call	1cbd0 <OSTimeDly>
		VGAtextClear();
    1e48:	0001dbc0 	call	1dbc <VGAtextClear>
		if (tutorialText >= 7){
    1e4c:	d0a81517 	ldw	r2,-24492(gp)
    1e50:	108001d0 	cmplti	r2,r2,7
    1e54:	1000011e 	bne	r2,zero,1e5c <tutorialUitleg+0x48>
			tutorialText = 0;
    1e58:	d0281515 	stw	zero,-24492(gp)
		}
	}
	
	if(tutorialText == 0){
    1e5c:	d0a81517 	ldw	r2,-24492(gp)
    1e60:	1000061e 	bne	r2,zero,1e7c <tutorialUitleg+0x68>
		VGA_text(10, 5, ""); // niks
    1e64:	01000284 	movi	r4,10
    1e68:	01400144 	movi	r5,5
    1e6c:	018000b4 	movhi	r6,2
    1e70:	31952704 	addi	r6,r6,21660
    1e74:	0003acc0 	call	3acc <VGA_text>
    1e78:	00006206 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 1){
    1e7c:	d0a81517 	ldw	r2,-24492(gp)
    1e80:	10800058 	cmpnei	r2,r2,1
    1e84:	1000061e 	bne	r2,zero,1ea0 <tutorialUitleg+0x8c>
		VGA_text(10, 38, "De besturing is als volgt:");	
    1e88:	01000284 	movi	r4,10
    1e8c:	01400984 	movi	r5,38
    1e90:	018000b4 	movhi	r6,2
    1e94:	31952804 	addi	r6,r6,21664
    1e98:	0003acc0 	call	3acc <VGA_text>
    1e9c:	00005906 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 2){
    1ea0:	d0a81517 	ldw	r2,-24492(gp)
    1ea4:	10800098 	cmpnei	r2,r2,2
    1ea8:	1000151e 	bne	r2,zero,1f00 <tutorialUitleg+0xec>
		VGA_text(10, 40, "De linker balk wordt bestuurd door het op en neer bewegen");
    1eac:	01000284 	movi	r4,10
    1eb0:	01400a04 	movi	r5,40
    1eb4:	018000b4 	movhi	r6,2
    1eb8:	31952f04 	addi	r6,r6,21692
    1ebc:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 41, "van switch 17. Bij de multiplayer wordt ook nog vereist om");
    1ec0:	01000284 	movi	r4,10
    1ec4:	01400a44 	movi	r5,41
    1ec8:	018000b4 	movhi	r6,2
    1ecc:	31953e04 	addi	r6,r6,21752
    1ed0:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 42, "de linker knop in te houden, anders ben je af. Dit geldt ook");
    1ed4:	01000284 	movi	r4,10
    1ed8:	01400a84 	movi	r5,42
    1edc:	018000b4 	movhi	r6,2
    1ee0:	31954d04 	addi	r6,r6,21812
    1ee4:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 43, "voor de rechter knop voor de rechter balk.");
    1ee8:	01000284 	movi	r4,10
    1eec:	01400ac4 	movi	r5,43
    1ef0:	018000b4 	movhi	r6,2
    1ef4:	31955d04 	addi	r6,r6,21876
    1ef8:	0003acc0 	call	3acc <VGA_text>
    1efc:	00004106 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 3){
    1f00:	d0a81517 	ldw	r2,-24492(gp)
    1f04:	108000d8 	cmpnei	r2,r2,3
    1f08:	10000b1e 	bne	r2,zero,1f38 <tutorialUitleg+0x124>
		VGA_text(10, 45, "De rechter balk wordt bestuurd KEY3 en KEY2. KEY3 = omlaag,");
    1f0c:	01000284 	movi	r4,10
    1f10:	01400b44 	movi	r5,45
    1f14:	018000b4 	movhi	r6,2
    1f18:	31956804 	addi	r6,r6,21920
    1f1c:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 46, "KEY2 = omhoog.");	
    1f20:	01000284 	movi	r4,10
    1f24:	01400b84 	movi	r5,46
    1f28:	018000b4 	movhi	r6,2
    1f2c:	31957704 	addi	r6,r6,21980
    1f30:	0003acc0 	call	3acc <VGA_text>
    1f34:	00003306 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 4){
    1f38:	d0a81517 	ldw	r2,-24492(gp)
    1f3c:	10800118 	cmpnei	r2,r2,4
    1f40:	1000061e 	bne	r2,zero,1f5c <tutorialUitleg+0x148>
		VGA_text(10, 5, "Dit spel heeft een Singleplayer en een Multiplayer.");
    1f44:	01000284 	movi	r4,10
    1f48:	01400144 	movi	r5,5
    1f4c:	018000b4 	movhi	r6,2
    1f50:	31957b04 	addi	r6,r6,21996
    1f54:	0003acc0 	call	3acc <VGA_text>
    1f58:	00002a06 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 5){
    1f5c:	d0a81517 	ldw	r2,-24492(gp)
    1f60:	10800158 	cmpnei	r2,r2,5
    1f64:	1000101e 	bne	r2,zero,1fa8 <tutorialUitleg+0x194>
		VGA_text(10, 7, "In Singleplayer speel je tegen de computer, waarbij je");
    1f68:	01000284 	movi	r4,10
    1f6c:	014001c4 	movi	r5,7
    1f70:	018000b4 	movhi	r6,2
    1f74:	31958804 	addi	r6,r6,22048
    1f78:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 8, "zoveel mogelijk aantal punten moet bereiken door de bal");
    1f7c:	01000284 	movi	r4,10
    1f80:	01400204 	movi	r5,8
    1f84:	018000b4 	movhi	r6,2
    1f88:	31959604 	addi	r6,r6,22104
    1f8c:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 9, "tegen de muur te kaatsen. Hierbij heb je 3 levens.");		
    1f90:	01000284 	movi	r4,10
    1f94:	01400244 	movi	r5,9
    1f98:	018000b4 	movhi	r6,2
    1f9c:	3195a404 	addi	r6,r6,22160
    1fa0:	0003acc0 	call	3acc <VGA_text>
    1fa4:	00001706 	br	2004 <tutorialUitleg+0x1f0>
	} else if (tutorialText == 6){
    1fa8:	d0a81517 	ldw	r2,-24492(gp)
    1fac:	10800198 	cmpnei	r2,r2,6
    1fb0:	1000141e 	bne	r2,zero,2004 <tutorialUitleg+0x1f0>
		VGA_text(10, 11, "In Multiplayer gaat het er om dat je de bal in het doel");
    1fb4:	01000284 	movi	r4,10
    1fb8:	014002c4 	movi	r5,11
    1fbc:	018000b4 	movhi	r6,2
    1fc0:	3195b104 	addi	r6,r6,22212
    1fc4:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 12, "van de tegenstander krijgt. Het doel bevindt zich achter");
    1fc8:	01000284 	movi	r4,10
    1fcc:	01400304 	movi	r5,12
    1fd0:	018000b4 	movhi	r6,2
    1fd4:	3195bf04 	addi	r6,r6,22268
    1fd8:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 13, "het balkje van de tegenstander. Wanneer je scoort krijg je");
    1fdc:	01000284 	movi	r4,10
    1fe0:	01400344 	movi	r5,13
    1fe4:	018000b4 	movhi	r6,2
    1fe8:	3195ce04 	addi	r6,r6,22328
    1fec:	0003acc0 	call	3acc <VGA_text>
		VGA_text(10, 14, "1 punt.");	
    1ff0:	01000284 	movi	r4,10
    1ff4:	01400384 	movi	r5,14
    1ff8:	018000b4 	movhi	r6,2
    1ffc:	3195dd04 	addi	r6,r6,22388
    2000:	0003acc0 	call	3acc <VGA_text>
	}
	
	VGA_text(10, 56, "Linker knop = ");
    2004:	01000284 	movi	r4,10
    2008:	01400e04 	movi	r5,56
    200c:	018000b4 	movhi	r6,2
    2010:	3195df04 	addi	r6,r6,22396
    2014:	0003acc0 	call	3acc <VGA_text>
	VGA_text(10, 57, "Volgende tutorial uitleg");
    2018:	01000284 	movi	r4,10
    201c:	01400e44 	movi	r5,57
    2020:	018000b4 	movhi	r6,2
    2024:	3195e304 	addi	r6,r6,22412
    2028:	0003acc0 	call	3acc <VGA_text>
	
	terugMenu();
    202c:	0002d4c0 	call	2d4c <terugMenu>
}
    2030:	e037883a 	mov	sp,fp
    2034:	dfc00117 	ldw	ra,4(sp)
    2038:	df000017 	ldw	fp,0(sp)
    203c:	dec00204 	addi	sp,sp,8
    2040:	f800283a 	ret

00002044 <endTutorial>:

void endTutorial(){
    2044:	defffc04 	addi	sp,sp,-16
    2048:	dfc00315 	stw	ra,12(sp)
    204c:	df000215 	stw	fp,8(sp)
    2050:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    2054:	010000b4 	movhi	r4,2
    2058:	2115ea04 	addi	r4,r4,22440
    205c:	00045ec0 	call	45ec <puts>

	//clearScreen();
	VGAtextClear();
    2060:	0001dbc0 	call	1dbc <VGAtextClear>
	
	VGA_text(63, 56, "              ");
    2064:	01000fc4 	movi	r4,63
    2068:	01400e04 	movi	r5,56
    206c:	018000b4 	movhi	r6,2
    2070:	3195ee04 	addi	r6,r6,22456
    2074:	0003acc0 	call	3acc <VGA_text>
	VGA_text(63, 57, "               ");
    2078:	01000fc4 	movi	r4,63
    207c:	01400e44 	movi	r5,57
    2080:	018000b4 	movhi	r6,2
    2084:	3195f204 	addi	r6,r6,22472
    2088:	0003acc0 	call	3acc <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    208c:	d0a80f17 	ldw	r2,-24516(gp)
    2090:	1009883a 	mov	r4,r2
    2094:	01400104 	movi	r5,4
    2098:	01800044 	movi	r6,1
    209c:	e1ffff04 	addi	r7,fp,-4
    20a0:	0017a140 	call	17a14 <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    20a4:	010008c4 	movi	r4,35
    20a8:	01400644 	movi	r5,25
    20ac:	018000b4 	movhi	r6,2
    20b0:	3195f604 	addi	r6,r6,22488
    20b4:	0003acc0 	call	3acc <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    20b8:	0009883a 	mov	r4,zero
    20bc:	000b883a 	mov	r5,zero
    20c0:	01800a04 	movi	r6,40
    20c4:	000f883a 	mov	r7,zero
    20c8:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    20cc:	010008c4 	movi	r4,35
    20d0:	01400644 	movi	r5,25
    20d4:	018000b4 	movhi	r6,2
    20d8:	3195ee04 	addi	r6,r6,22456
    20dc:	0003acc0 	call	3acc <VGA_text>




	teken_menu(4);
    20e0:	01000104 	movi	r4,4
    20e4:	00034e00 	call	34e0 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    20e8:	d8000015 	stw	zero,0(sp)
    20ec:	01004f04 	movi	r4,316
    20f0:	01400104 	movi	r5,4
    20f4:	01804fc4 	movi	r6,319
    20f8:	01c03ac4 	movi	r7,235
    20fc:	0003a180 	call	3a18 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2100:	d1282417 	ldw	r4,-24432(gp)
    2104:	d1681e17 	ldw	r5,-24456(gp)
    2108:	d0a82417 	ldw	r2,-24432(gp)
    210c:	10c00144 	addi	r3,r2,5
    2110:	d0a81e17 	ldw	r2,-24456(gp)
    2114:	10800144 	addi	r2,r2,5
    2118:	d8000015 	stw	zero,0(sp)
    211c:	180d883a 	mov	r6,r3
    2120:	100f883a 	mov	r7,r2
    2124:	0003a180 	call	3a18 <VGA_box>


	ALT_x1 = 0;
    2128:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    212c:	00802944 	movi	r2,165
    2130:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    2134:	00801904 	movi	r2,100
    2138:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = -1;
    213c:	00bfffc4 	movi	r2,-1
    2140:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    2144:	00800044 	movi	r2,1
    2148:	d0a82015 	stw	r2,-24448(gp)

	first = 1;
    214c:	00800044 	movi	r2,1
    2150:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2154:	d0a80f17 	ldw	r2,-24516(gp)
    2158:	1009883a 	mov	r4,r2
    215c:	01400444 	movi	r5,17
    2160:	000d883a 	mov	r6,zero
    2164:	e1ffff04 	addi	r7,fp,-4
    2168:	0017a140 	call	17a14 <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    216c:	d0a81217 	ldw	r2,-24504(gp)
    2170:	1009883a 	mov	r4,r2
    2174:	01401004 	movi	r5,64
    2178:	01800044 	movi	r6,1
    217c:	e1ffff04 	addi	r7,fp,-4
    2180:	0017a140 	call	17a14 <OSFlagPost>

}
    2184:	e037883a 	mov	sp,fp
    2188:	dfc00117 	ldw	ra,4(sp)
    218c:	df000017 	ldw	fp,0(sp)
    2190:	dec00204 	addi	sp,sp,8
    2194:	f800283a 	ret

00002198 <Tutorial>:

void Tutorial(void* pdata){
    2198:	defffa04 	addi	sp,sp,-24
    219c:	dfc00515 	stw	ra,20(sp)
    21a0:	df000415 	stw	fp,16(sp)
    21a4:	df000404 	addi	fp,sp,16
    21a8:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    21ac:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    21b0:	00802944 	movi	r2,165
    21b4:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    21b8:	00801904 	movi	r2,100
    21bc:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = 1;
    21c0:	00800044 	movi	r2,1
    21c4:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    21c8:	00800044 	movi	r2,1
    21cc:	d0a82015 	stw	r2,-24448(gp)

	pixel_buffer_x = 315;
    21d0:	00804ec4 	movi	r2,315
    21d4:	d0a81a15 	stw	r2,-24472(gp)
	pixel_buffer_y = 230;
    21d8:	00803984 	movi	r2,230
    21dc:	d0a81815 	stw	r2,-24480(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    21e0:	d0e81217 	ldw	r3,-24504(gp)
    21e4:	e0bffe04 	addi	r2,fp,-8
    21e8:	d8800015 	stw	r2,0(sp)
    21ec:	1809883a 	mov	r4,r3
    21f0:	01401004 	movi	r5,64
    21f4:	01800044 	movi	r6,1
    21f8:	000f883a 	mov	r7,zero
    21fc:	00173bc0 	call	173bc <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    2200:	d0e81017 	ldw	r3,-24512(gp)
    2204:	e0bffe04 	addi	r2,fp,-8
    2208:	1809883a 	mov	r4,r3
    220c:	000b883a 	mov	r5,zero
    2210:	100d883a 	mov	r6,r2
    2214:	00186b40 	call	186b4 <OSMboxPend>
    2218:	e0bffd15 	stw	r2,-12(fp)

		//printf("TUTORIAL SET\n");

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    221c:	0001e140 	call	1e14 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2220:	d1282417 	ldw	r4,-24432(gp)
    2224:	d1681e17 	ldw	r5,-24456(gp)
    2228:	d0a82417 	ldw	r2,-24432(gp)
    222c:	10c00144 	addi	r3,r2,5
    2230:	d0a81e17 	ldw	r2,-24456(gp)
    2234:	10800144 	addi	r2,r2,5
    2238:	d8000015 	stw	zero,0(sp)
    223c:	180d883a 	mov	r6,r3
    2240:	100f883a 	mov	r7,r2
    2244:	0003a180 	call	3a18 <VGA_box>


		if (first == 1) {
    2248:	d0a00017 	ldw	r2,-32768(gp)
    224c:	10800058 	cmpnei	r2,r2,1
    2250:	10001d1e 	bne	r2,zero,22c8 <Tutorial+0x130>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    2254:	d0a82417 	ldw	r2,-24432(gp)
    2258:	10c02804 	addi	r3,r2,160
    225c:	d0a82717 	ldw	r2,-24420(gp)
    2260:	1885883a 	add	r2,r3,r2
    2264:	d0a82415 	stw	r2,-24432(gp)
			ALT_x2 += ALT_inc_x;
    2268:	d0e82817 	ldw	r3,-24416(gp)
    226c:	d0a82717 	ldw	r2,-24420(gp)
    2270:	1885883a 	add	r2,r3,r2
    2274:	d0a82815 	stw	r2,-24416(gp)
			ALT_y += ALT_inc_y;
    2278:	d0e81e17 	ldw	r3,-24456(gp)
    227c:	d0a82017 	ldw	r2,-24448(gp)
    2280:	1885883a 	add	r2,r3,r2
    2284:	d0a81e15 	stw	r2,-24456(gp)

			del_middenlijn();
    2288:	0003bc40 	call	3bc4 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    228c:	0081a5c4 	movi	r2,1687
    2290:	d8800015 	stw	r2,0(sp)
    2294:	01004f04 	movi	r4,316
    2298:	000b883a 	mov	r5,zero
    229c:	01804fc4 	movi	r6,319
    22a0:	01c03bc4 	movi	r7,239
    22a4:	0003a180 	call	3a18 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    22a8:	d8000015 	stw	zero,0(sp)
    22ac:	01004b04 	movi	r4,300
    22b0:	01400104 	movi	r5,4
    22b4:	01804c44 	movi	r6,305
    22b8:	01c03ac4 	movi	r7,235
    22bc:	0003a180 	call	3a18 <VGA_box>

			first = 0;
    22c0:	d0200015 	stw	zero,-32768(gp)
    22c4:	00000c06 	br	22f8 <Tutorial+0x160>
		} else {
			ALT_x1 += ALT_inc_x;
    22c8:	d0e82417 	ldw	r3,-24432(gp)
    22cc:	d0a82717 	ldw	r2,-24420(gp)
    22d0:	1885883a 	add	r2,r3,r2
    22d4:	d0a82415 	stw	r2,-24432(gp)
			ALT_x2 += ALT_inc_x;
    22d8:	d0e82817 	ldw	r3,-24416(gp)
    22dc:	d0a82717 	ldw	r2,-24420(gp)
    22e0:	1885883a 	add	r2,r3,r2
    22e4:	d0a82815 	stw	r2,-24416(gp)
			ALT_y += ALT_inc_y;
    22e8:	d0e81e17 	ldw	r3,-24456(gp)
    22ec:	d0a82017 	ldw	r2,-24448(gp)
    22f0:	1885883a 	add	r2,r3,r2
    22f4:	d0a81e15 	stw	r2,-24456(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    22f8:	d0e81e17 	ldw	r3,-24456(gp)
    22fc:	d0a81817 	ldw	r2,-24480(gp)
    2300:	18800326 	beq	r3,r2,2310 <Tutorial+0x178>
    2304:	d0a81e17 	ldw	r2,-24456(gp)
    2308:	10800118 	cmpnei	r2,r2,4
    230c:	1000031e 	bne	r2,zero,231c <Tutorial+0x184>
			ALT_inc_y = -(ALT_inc_y);
    2310:	d0a82017 	ldw	r2,-24448(gp)
    2314:	0085c83a 	sub	r2,zero,r2
    2318:	d0a82015 	stw	r2,-24448(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    231c:	d0e82817 	ldw	r3,-24416(gp)
    2320:	d0a81a17 	ldw	r2,-24472(gp)
    2324:	1880031e 	bne	r3,r2,2334 <Tutorial+0x19c>
			ALT_inc_x = -(ALT_inc_x);
    2328:	d0a82717 	ldw	r2,-24420(gp)
    232c:	0085c83a 	sub	r2,zero,r2
    2330:	d0a82715 	stw	r2,-24420(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    2334:	d1282417 	ldw	r4,-24432(gp)
    2338:	d1681e17 	ldw	r5,-24456(gp)
    233c:	d0a82417 	ldw	r2,-24432(gp)
    2340:	11800144 	addi	r6,r2,5
    2344:	d0a81e17 	ldw	r2,-24456(gp)
    2348:	10c00144 	addi	r3,r2,5
    234c:	00804034 	movhi	r2,256
    2350:	10bfffc4 	addi	r2,r2,-1
    2354:	d8800015 	stw	r2,0(sp)
    2358:	180f883a 	mov	r7,r3
    235c:	0003a180 	call	3a18 <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    2360:	d0a82417 	ldw	r2,-24432(gp)
    2364:	1000021e 	bne	r2,zero,2370 <Tutorial+0x1d8>
			gescoord(3);
    2368:	010000c4 	movi	r4,3
    236c:	00013ac0 	call	13ac <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    2370:	d0a82417 	ldw	r2,-24432(gp)
    2374:	10800558 	cmpnei	r2,r2,21
    2378:	10000c1e 	bne	r2,zero,23ac <Tutorial+0x214>
    237c:	e0bffd17 	ldw	r2,-12(fp)
    2380:	10c00017 	ldw	r3,0(r2)
    2384:	d0a81e17 	ldw	r2,-24456(gp)
    2388:	1880080e 	bge	r3,r2,23ac <Tutorial+0x214>
    238c:	e0bffd17 	ldw	r2,-12(fp)
    2390:	10800017 	ldw	r2,0(r2)
    2394:	10800c84 	addi	r2,r2,50
    2398:	d0e81e17 	ldw	r3,-24456(gp)
    239c:	1880030e 	bge	r3,r2,23ac <Tutorial+0x214>
			ALT_inc_x = -(ALT_inc_x);
    23a0:	d0a82717 	ldw	r2,-24420(gp)
    23a4:	0085c83a 	sub	r2,zero,r2
    23a8:	d0a82715 	stw	r2,-24420(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    23ac:	d0a82417 	ldw	r2,-24432(gp)
    23b0:	10800608 	cmpgei	r2,r2,24
    23b4:	10000a1e 	bne	r2,zero,23e0 <Tutorial+0x248>
    23b8:	d0a82417 	ldw	r2,-24432(gp)
    23bc:	10800590 	cmplti	r2,r2,22
    23c0:	1000071e 	bne	r2,zero,23e0 <Tutorial+0x248>
    23c4:	e0bffd17 	ldw	r2,-12(fp)
    23c8:	10c00017 	ldw	r3,0(r2)
    23cc:	d0a81e17 	ldw	r2,-24456(gp)
    23d0:	1880031e 	bne	r3,r2,23e0 <Tutorial+0x248>
			ALT_inc_y = -(ALT_inc_y);
    23d4:	d0a82017 	ldw	r2,-24448(gp)
    23d8:	0085c83a 	sub	r2,zero,r2
    23dc:	d0a82015 	stw	r2,-24448(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    23e0:	d0a82417 	ldw	r2,-24432(gp)
    23e4:	10800608 	cmpgei	r2,r2,24
    23e8:	10000b1e 	bne	r2,zero,2418 <Tutorial+0x280>
    23ec:	d0a82417 	ldw	r2,-24432(gp)
    23f0:	10800590 	cmplti	r2,r2,22
    23f4:	1000081e 	bne	r2,zero,2418 <Tutorial+0x280>
    23f8:	e0bffd17 	ldw	r2,-12(fp)
    23fc:	10800017 	ldw	r2,0(r2)
    2400:	10c00c84 	addi	r3,r2,50
    2404:	d0a81e17 	ldw	r2,-24456(gp)
    2408:	1880031e 	bne	r3,r2,2418 <Tutorial+0x280>
			ALT_inc_y = -(ALT_inc_y);
    240c:	d0a82017 	ldw	r2,-24448(gp)
    2410:	0085c83a 	sub	r2,zero,r2
    2414:	d0a82015 	stw	r2,-24448(gp)
		}

		
		if (controller(3) == 3) {
    2418:	010000c4 	movi	r4,3
    241c:	000039c0 	call	39c <controller>
    2420:	108000d8 	cmpnei	r2,r2,3
    2424:	1000011e 	bne	r2,zero,242c <Tutorial+0x294>
			endTutorial();
    2428:	00020440 	call	2044 <endTutorial>
		}

		OSTimeDly(1);
    242c:	01000044 	movi	r4,1
    2430:	001cbd00 	call	1cbd0 <OSTimeDly>


	}
    2434:	003f6a06 	br	21e0 <__alt_mem_Flash_flash_data+0xf40021e0>

00002438 <endNewHighscores>:
	
}

void endNewHighscores(){
    2438:	defffd04 	addi	sp,sp,-12
    243c:	dfc00215 	stw	ra,8(sp)
    2440:	df000115 	stw	fp,4(sp)
    2444:	df000104 	addi	fp,sp,4
	
	INT8U err;

	printf("end newHighscores\n");
    2448:	010000b4 	movhi	r4,2
    244c:	2115fa04 	addi	r4,r4,22504
    2450:	00045ec0 	call	45ec <puts>

	//clearScreen();
	
	for (textWeg = 0; textWeg < 60; textWeg++){
    2454:	d0281f15 	stw	zero,-24452(gp)
    2458:	00000906 	br	2480 <endNewHighscores+0x48>
	VGA_text(1, textWeg, "                                                                                ");
    245c:	d0a81f17 	ldw	r2,-24452(gp)
    2460:	01000044 	movi	r4,1
    2464:	100b883a 	mov	r5,r2
    2468:	018000b4 	movhi	r6,2
    246c:	3195ff04 	addi	r6,r6,22524
    2470:	0003acc0 	call	3acc <VGA_text>

	printf("end newHighscores\n");

	//clearScreen();
	
	for (textWeg = 0; textWeg < 60; textWeg++){
    2474:	d0a81f17 	ldw	r2,-24452(gp)
    2478:	10800044 	addi	r2,r2,1
    247c:	d0a81f15 	stw	r2,-24452(gp)
    2480:	d0a81f17 	ldw	r2,-24452(gp)
    2484:	10800f10 	cmplti	r2,r2,60
    2488:	103ff41e 	bne	r2,zero,245c <__alt_mem_Flash_flash_data+0xf400245c>
	VGA_text(1, textWeg, "                                                                                ");
	}
	

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    248c:	d0a80f17 	ldw	r2,-24516(gp)
    2490:	1009883a 	mov	r4,r2
    2494:	01400104 	movi	r5,4
    2498:	01800044 	movi	r6,1
    249c:	e1ffff04 	addi	r7,fp,-4
    24a0:	0017a140 	call	17a14 <OSFlagPost>

	VGA_text(25, 25, "Einde Nieuwe Highscores");
    24a4:	01000644 	movi	r4,25
    24a8:	01400644 	movi	r5,25
    24ac:	018000b4 	movhi	r6,2
    24b0:	31961404 	addi	r6,r6,22608
    24b4:	0003acc0 	call	3acc <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    24b8:	0009883a 	mov	r4,zero
    24bc:	000b883a 	mov	r5,zero
    24c0:	01800a04 	movi	r6,40
    24c4:	000f883a 	mov	r7,zero
    24c8:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
	VGA_text(25, 25, "                           ");
    24cc:	01000644 	movi	r4,25
    24d0:	01400644 	movi	r5,25
    24d4:	018000b4 	movhi	r6,2
    24d8:	3194e604 	addi	r6,r6,21400
    24dc:	0003acc0 	call	3acc <VGA_text>


	score3 = 0;
    24e0:	d0281415 	stw	zero,-24496(gp)

	teken_menu(1);
    24e4:	01000044 	movi	r4,1
    24e8:	00034e00 	call	34e0 <teken_menu>

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    24ec:	d0a80f17 	ldw	r2,-24516(gp)
    24f0:	1009883a 	mov	r4,r2
    24f4:	01400444 	movi	r5,17
    24f8:	000d883a 	mov	r6,zero
    24fc:	e1ffff04 	addi	r7,fp,-4
    2500:	0017a140 	call	17a14 <OSFlagPost>

	OSFlagPost(Flags_newHighscores, newHighscores_Flag, OS_FLAG_SET, &err);
    2504:	d0a82117 	ldw	r2,-24444(gp)
    2508:	1009883a 	mov	r4,r2
    250c:	01404004 	movi	r5,256
    2510:	01800044 	movi	r6,1
    2514:	e1ffff04 	addi	r7,fp,-4
    2518:	0017a140 	call	17a14 <OSFlagPost>
	
}
    251c:	e037883a 	mov	sp,fp
    2520:	dfc00117 	ldw	ra,4(sp)
    2524:	df000017 	ldw	fp,0(sp)
    2528:	dec00204 	addi	sp,sp,8
    252c:	f800283a 	ret

00002530 <clearHighscoreText>:

void clearHighscoreText(){
    2530:	defffe04 	addi	sp,sp,-8
    2534:	dfc00115 	stw	ra,4(sp)
    2538:	df000015 	stw	fp,0(sp)
    253c:	d839883a 	mov	fp,sp
	
	VGA_text(20, 35, "  ");
    2540:	01000504 	movi	r4,20
    2544:	014008c4 	movi	r5,35
    2548:	018000b4 	movhi	r6,2
    254c:	31961a04 	addi	r6,r6,22632
    2550:	0003acc0 	call	3acc <VGA_text>
	VGA_text(30, 35, "  ");
    2554:	01000784 	movi	r4,30
    2558:	014008c4 	movi	r5,35
    255c:	018000b4 	movhi	r6,2
    2560:	31961a04 	addi	r6,r6,22632
    2564:	0003acc0 	call	3acc <VGA_text>
	VGA_text(40, 35, "  ");
    2568:	01000a04 	movi	r4,40
    256c:	014008c4 	movi	r5,35
    2570:	018000b4 	movhi	r6,2
    2574:	31961a04 	addi	r6,r6,22632
    2578:	0003acc0 	call	3acc <VGA_text>
	VGA_text(50, 35, "           ");
    257c:	01000c84 	movi	r4,50
    2580:	014008c4 	movi	r5,35
    2584:	018000b4 	movhi	r6,2
    2588:	31950704 	addi	r6,r6,21532
    258c:	0003acc0 	call	3acc <VGA_text>
	
	VGA_text(20, 30, "                                                                        ");
    2590:	01000504 	movi	r4,20
    2594:	01400784 	movi	r5,30
    2598:	018000b4 	movhi	r6,2
    259c:	31961b04 	addi	r6,r6,22636
    25a0:	0003acc0 	call	3acc <VGA_text>
	VGA_text(20, 40, "                                                                        ");
    25a4:	01000504 	movi	r4,20
    25a8:	01400a04 	movi	r5,40
    25ac:	018000b4 	movhi	r6,2
    25b0:	31961b04 	addi	r6,r6,22636
    25b4:	0003acc0 	call	3acc <VGA_text>
	
}
    25b8:	e037883a 	mov	sp,fp
    25bc:	dfc00117 	ldw	ra,4(sp)
    25c0:	df000017 	ldw	fp,0(sp)
    25c4:	dec00204 	addi	sp,sp,8
    25c8:	f800283a 	ret

000025cc <newHighscores>:

void newHighscores(void *pdata){
    25cc:	defffb04 	addi	sp,sp,-20
    25d0:	dfc00415 	stw	ra,16(sp)
    25d4:	df000315 	stw	fp,12(sp)
    25d8:	df000304 	addi	fp,sp,12
    25dc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	a[0] = 'A';
    25e0:	00801044 	movi	r2,65
    25e4:	d0a82605 	stb	r2,-24424(gp)
	a[1] = '\0';
    25e8:	d0a82644 	addi	r2,gp,-24423
    25ec:	10000005 	stb	zero,0(r2)

	b[0] = 'B';
    25f0:	00801084 	movi	r2,66
    25f4:	d0a81705 	stb	r2,-24484(gp)
	b[1] = '\0';
    25f8:	d0a81744 	addi	r2,gp,-24483
    25fc:	10000005 	stb	zero,0(r2)

	c[0] = 'C';
    2600:	008010c4 	movi	r2,67
    2604:	d0a81d05 	stb	r2,-24460(gp)
	c[1] = '\0';
    2608:	d0a81d44 	addi	r2,gp,-24459
    260c:	10000005 	stb	zero,0(r2)
	newHighscoreSelect = 1;
    2610:	00800044 	movi	r2,1
    2614:	d0a82315 	stw	r2,-24436(gp)
	
	while(1){
		OSFlagPend(Flags_newHighscores, newHighscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    2618:	d0a82117 	ldw	r2,-24444(gp)
    261c:	e0fffe04 	addi	r3,fp,-8
    2620:	d8c00015 	stw	r3,0(sp)
    2624:	1009883a 	mov	r4,r2
    2628:	01404004 	movi	r5,256
    262c:	01800044 	movi	r6,1
    2630:	000f883a 	mov	r7,zero
    2634:	00173bc0 	call	173bc <OSFlagPend>

		VGA_text(35, 18, "New Highscore!");
    2638:	010008c4 	movi	r4,35
    263c:	01400484 	movi	r5,18
    2640:	018000b4 	movhi	r6,2
    2644:	31962e04 	addi	r6,r6,22712
    2648:	0003acc0 	call	3acc <VGA_text>
		
		if (controller(3) == 3){
    264c:	010000c4 	movi	r4,3
    2650:	000039c0 	call	39c <controller>
    2654:	108000d8 	cmpnei	r2,r2,3
    2658:	1000251e 	bne	r2,zero,26f0 <newHighscores+0x124>
			if(verandert != 0){
    265c:	d0a81c17 	ldw	r2,-24464(gp)
    2660:	10001e26 	beq	r2,zero,26dc <newHighscores+0x110>
				newHighscoreSelect++;
    2664:	d0a82317 	ldw	r2,-24436(gp)
    2668:	10800044 	addi	r2,r2,1
    266c:	d0a82315 	stw	r2,-24436(gp)
				oneTime = 1;
    2670:	00800044 	movi	r2,1
    2674:	d0a00315 	stw	r2,-32756(gp)
				verandert = 0;
    2678:	d0281c15 	stw	zero,-24464(gp)
				VGA_box(19 *4, 34 * 4, 22 * 4, 37 * 4, zwart);
    267c:	d8000015 	stw	zero,0(sp)
    2680:	01001304 	movi	r4,76
    2684:	01402204 	movi	r5,136
    2688:	01801604 	movi	r6,88
    268c:	01c02504 	movi	r7,148
    2690:	0003a180 	call	3a18 <VGA_box>
				VGA_box(29 * 4, 34 * 4, 32 * 4, 37 * 4, zwart);
    2694:	d8000015 	stw	zero,0(sp)
    2698:	01001d04 	movi	r4,116
    269c:	01402204 	movi	r5,136
    26a0:	01802004 	movi	r6,128
    26a4:	01c02504 	movi	r7,148
    26a8:	0003a180 	call	3a18 <VGA_box>
				VGA_box(39 * 4, 34 * 4, 42 * 4, 37 * 4, zwart);
    26ac:	d8000015 	stw	zero,0(sp)
    26b0:	01002704 	movi	r4,156
    26b4:	01402204 	movi	r5,136
    26b8:	01802a04 	movi	r6,168
    26bc:	01c02504 	movi	r7,148
    26c0:	0003a180 	call	3a18 <VGA_box>
				VGA_box(49 * 4, 34 * 4, 59 * 4, 37 * 4, zwart);
    26c4:	d8000015 	stw	zero,0(sp)
    26c8:	01003104 	movi	r4,196
    26cc:	01402204 	movi	r5,136
    26d0:	01803b04 	movi	r6,236
    26d4:	01c02504 	movi	r7,148
    26d8:	0003a180 	call	3a18 <VGA_box>
			}			
			if (newHighscoreSelect >= 5){
    26dc:	d0a82317 	ldw	r2,-24436(gp)
    26e0:	10800150 	cmplti	r2,r2,5
    26e4:	1000021e 	bne	r2,zero,26f0 <newHighscores+0x124>
			newHighscoreSelect = 1;
    26e8:	00800044 	movi	r2,1
    26ec:	d0a82315 	stw	r2,-24436(gp)
			}
		}

		if(controller(2) == 1 && newHighscoreSelect == 1){
    26f0:	01000084 	movi	r4,2
    26f4:	000039c0 	call	39c <controller>
    26f8:	10800058 	cmpnei	r2,r2,1
    26fc:	1000151e 	bne	r2,zero,2754 <newHighscores+0x188>
    2700:	d0a82317 	ldw	r2,-24436(gp)
    2704:	10800058 	cmpnei	r2,r2,1
    2708:	1000121e 	bne	r2,zero,2754 <newHighscores+0x188>
			if(a[0] >= 'Z' && controller(2) == 1){
    270c:	d0a82603 	ldbu	r2,-24424(gp)
    2710:	10803fcc 	andi	r2,r2,255
    2714:	1080201c 	xori	r2,r2,128
    2718:	10bfe004 	addi	r2,r2,-128
    271c:	10801690 	cmplti	r2,r2,90
    2720:	1000061e 	bne	r2,zero,273c <newHighscores+0x170>
    2724:	01000084 	movi	r4,2
    2728:	000039c0 	call	39c <controller>
    272c:	10800058 	cmpnei	r2,r2,1
    2730:	1000021e 	bne	r2,zero,273c <newHighscores+0x170>
				a[0] = '@';
    2734:	00801004 	movi	r2,64
    2738:	d0a82605 	stb	r2,-24424(gp)
			}
			a[0]++;
    273c:	d0a82603 	ldbu	r2,-24424(gp)
    2740:	10800044 	addi	r2,r2,1
    2744:	d0a82605 	stb	r2,-24424(gp)
			OSTimeDly(10);
    2748:	01000284 	movi	r4,10
    274c:	001cbd00 	call	1cbd0 <OSTimeDly>
    2750:	00001606 	br	27ac <newHighscores+0x1e0>
		} else if (controller(2) == 0 && newHighscoreSelect == 1){
    2754:	01000084 	movi	r4,2
    2758:	000039c0 	call	39c <controller>
    275c:	1000131e 	bne	r2,zero,27ac <newHighscores+0x1e0>
    2760:	d0a82317 	ldw	r2,-24436(gp)
    2764:	10800058 	cmpnei	r2,r2,1
    2768:	1000101e 	bne	r2,zero,27ac <newHighscores+0x1e0>
			if (a[0] <= 'A' && controller(2) == 0){
    276c:	d0a82603 	ldbu	r2,-24424(gp)
    2770:	10803fcc 	andi	r2,r2,255
    2774:	1080201c 	xori	r2,r2,128
    2778:	10bfe004 	addi	r2,r2,-128
    277c:	10801088 	cmpgei	r2,r2,66
    2780:	1000051e 	bne	r2,zero,2798 <newHighscores+0x1cc>
    2784:	01000084 	movi	r4,2
    2788:	000039c0 	call	39c <controller>
    278c:	1000021e 	bne	r2,zero,2798 <newHighscores+0x1cc>
				a[0] = '[';
    2790:	008016c4 	movi	r2,91
    2794:	d0a82605 	stb	r2,-24424(gp)
			}
			a[0]--;
    2798:	d0a82603 	ldbu	r2,-24424(gp)
    279c:	10bfffc4 	addi	r2,r2,-1
    27a0:	d0a82605 	stb	r2,-24424(gp)
			OSTimeDly(10);
    27a4:	01000284 	movi	r4,10
    27a8:	001cbd00 	call	1cbd0 <OSTimeDly>
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 2){
    27ac:	01000084 	movi	r4,2
    27b0:	000039c0 	call	39c <controller>
    27b4:	10800058 	cmpnei	r2,r2,1
    27b8:	1000151e 	bne	r2,zero,2810 <newHighscores+0x244>
    27bc:	d0a82317 	ldw	r2,-24436(gp)
    27c0:	10800098 	cmpnei	r2,r2,2
    27c4:	1000121e 	bne	r2,zero,2810 <newHighscores+0x244>
			if(b[0] >= 'Z' && controller(2) == 1){
    27c8:	d0a81703 	ldbu	r2,-24484(gp)
    27cc:	10803fcc 	andi	r2,r2,255
    27d0:	1080201c 	xori	r2,r2,128
    27d4:	10bfe004 	addi	r2,r2,-128
    27d8:	10801690 	cmplti	r2,r2,90
    27dc:	1000061e 	bne	r2,zero,27f8 <newHighscores+0x22c>
    27e0:	01000084 	movi	r4,2
    27e4:	000039c0 	call	39c <controller>
    27e8:	10800058 	cmpnei	r2,r2,1
    27ec:	1000021e 	bne	r2,zero,27f8 <newHighscores+0x22c>
				b[0] = '@';
    27f0:	00801004 	movi	r2,64
    27f4:	d0a81705 	stb	r2,-24484(gp)
			}
			b[0]++;
    27f8:	d0a81703 	ldbu	r2,-24484(gp)
    27fc:	10800044 	addi	r2,r2,1
    2800:	d0a81705 	stb	r2,-24484(gp)
			OSTimeDly(10);
    2804:	01000284 	movi	r4,10
    2808:	001cbd00 	call	1cbd0 <OSTimeDly>
    280c:	00001606 	br	2868 <newHighscores+0x29c>
		} else if (controller(2) == 0 && newHighscoreSelect == 2){
    2810:	01000084 	movi	r4,2
    2814:	000039c0 	call	39c <controller>
    2818:	1000131e 	bne	r2,zero,2868 <newHighscores+0x29c>
    281c:	d0a82317 	ldw	r2,-24436(gp)
    2820:	10800098 	cmpnei	r2,r2,2
    2824:	1000101e 	bne	r2,zero,2868 <newHighscores+0x29c>
			if(b[0] <= 'A' && controller(2) == 0){
    2828:	d0a81703 	ldbu	r2,-24484(gp)
    282c:	10803fcc 	andi	r2,r2,255
    2830:	1080201c 	xori	r2,r2,128
    2834:	10bfe004 	addi	r2,r2,-128
    2838:	10801088 	cmpgei	r2,r2,66
    283c:	1000051e 	bne	r2,zero,2854 <newHighscores+0x288>
    2840:	01000084 	movi	r4,2
    2844:	000039c0 	call	39c <controller>
    2848:	1000021e 	bne	r2,zero,2854 <newHighscores+0x288>
				b[0] = '[';
    284c:	008016c4 	movi	r2,91
    2850:	d0a81705 	stb	r2,-24484(gp)
			}
			b[0]--;
    2854:	d0a81703 	ldbu	r2,-24484(gp)
    2858:	10bfffc4 	addi	r2,r2,-1
    285c:	d0a81705 	stb	r2,-24484(gp)
			OSTimeDly(10);
    2860:	01000284 	movi	r4,10
    2864:	001cbd00 	call	1cbd0 <OSTimeDly>
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 3){
    2868:	01000084 	movi	r4,2
    286c:	000039c0 	call	39c <controller>
    2870:	10800058 	cmpnei	r2,r2,1
    2874:	1000151e 	bne	r2,zero,28cc <newHighscores+0x300>
    2878:	d0a82317 	ldw	r2,-24436(gp)
    287c:	108000d8 	cmpnei	r2,r2,3
    2880:	1000121e 	bne	r2,zero,28cc <newHighscores+0x300>
			if(c[0] >= 'Z' && controller(2) == 1){
    2884:	d0a81d03 	ldbu	r2,-24460(gp)
    2888:	10803fcc 	andi	r2,r2,255
    288c:	1080201c 	xori	r2,r2,128
    2890:	10bfe004 	addi	r2,r2,-128
    2894:	10801690 	cmplti	r2,r2,90
    2898:	1000061e 	bne	r2,zero,28b4 <newHighscores+0x2e8>
    289c:	01000084 	movi	r4,2
    28a0:	000039c0 	call	39c <controller>
    28a4:	10800058 	cmpnei	r2,r2,1
    28a8:	1000021e 	bne	r2,zero,28b4 <newHighscores+0x2e8>
				c[0] = '@';
    28ac:	00801004 	movi	r2,64
    28b0:	d0a81d05 	stb	r2,-24460(gp)
			}
			c[0]++;
    28b4:	d0a81d03 	ldbu	r2,-24460(gp)
    28b8:	10800044 	addi	r2,r2,1
    28bc:	d0a81d05 	stb	r2,-24460(gp)
			OSTimeDly(10);
    28c0:	01000284 	movi	r4,10
    28c4:	001cbd00 	call	1cbd0 <OSTimeDly>
    28c8:	00001606 	br	2924 <newHighscores+0x358>
		} else if (controller(2) == 0 && newHighscoreSelect == 3){
    28cc:	01000084 	movi	r4,2
    28d0:	000039c0 	call	39c <controller>
    28d4:	1000131e 	bne	r2,zero,2924 <newHighscores+0x358>
    28d8:	d0a82317 	ldw	r2,-24436(gp)
    28dc:	108000d8 	cmpnei	r2,r2,3
    28e0:	1000101e 	bne	r2,zero,2924 <newHighscores+0x358>
			if(c[0] <= 'A' && controller(2) == 0){
    28e4:	d0a81d03 	ldbu	r2,-24460(gp)
    28e8:	10803fcc 	andi	r2,r2,255
    28ec:	1080201c 	xori	r2,r2,128
    28f0:	10bfe004 	addi	r2,r2,-128
    28f4:	10801088 	cmpgei	r2,r2,66
    28f8:	1000051e 	bne	r2,zero,2910 <newHighscores+0x344>
    28fc:	01000084 	movi	r4,2
    2900:	000039c0 	call	39c <controller>
    2904:	1000021e 	bne	r2,zero,2910 <newHighscores+0x344>
				c[0] = '[';
    2908:	008016c4 	movi	r2,91
    290c:	d0a81d05 	stb	r2,-24460(gp)
			}
			c[0]--;
    2910:	d0a81d03 	ldbu	r2,-24460(gp)
    2914:	10bfffc4 	addi	r2,r2,-1
    2918:	d0a81d05 	stb	r2,-24460(gp)
			OSTimeDly(10);
    291c:	01000284 	movi	r4,10
    2920:	001cbd00 	call	1cbd0 <OSTimeDly>
		}		
		
		if (newHighscoreSelect == 1){
    2924:	d0a82317 	ldw	r2,-24436(gp)
    2928:	10800058 	cmpnei	r2,r2,1
    292c:	10000f1e 	bne	r2,zero,296c <newHighscores+0x3a0>
			if(oneTime == 1){
    2930:	d0a00317 	ldw	r2,-32756(gp)
    2934:	10800058 	cmpnei	r2,r2,1
    2938:	1000411e 	bne	r2,zero,2a40 <newHighscores+0x474>
				VGA_box(19 *4, 34 * 4, 22 * 4, 37 * 4, geel);
    293c:	00804034 	movhi	r2,256
    2940:	10bfc004 	addi	r2,r2,-256
    2944:	d8800015 	stw	r2,0(sp)
    2948:	01001304 	movi	r4,76
    294c:	01402204 	movi	r5,136
    2950:	01801604 	movi	r6,88
    2954:	01c02504 	movi	r7,148
    2958:	0003a180 	call	3a18 <VGA_box>
				oneTime = 0;
    295c:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    2960:	00800044 	movi	r2,1
    2964:	d0a81c15 	stw	r2,-24464(gp)
    2968:	00003506 	br	2a40 <newHighscores+0x474>
			}
		} else if (newHighscoreSelect == 2){
    296c:	d0a82317 	ldw	r2,-24436(gp)
    2970:	10800098 	cmpnei	r2,r2,2
    2974:	10000f1e 	bne	r2,zero,29b4 <newHighscores+0x3e8>
			if(oneTime == 1){
    2978:	d0a00317 	ldw	r2,-32756(gp)
    297c:	10800058 	cmpnei	r2,r2,1
    2980:	10002f1e 	bne	r2,zero,2a40 <newHighscores+0x474>
				VGA_box(29 * 4, 34 * 4, 32 * 4, 37 * 4, geel);
    2984:	00804034 	movhi	r2,256
    2988:	10bfc004 	addi	r2,r2,-256
    298c:	d8800015 	stw	r2,0(sp)
    2990:	01001d04 	movi	r4,116
    2994:	01402204 	movi	r5,136
    2998:	01802004 	movi	r6,128
    299c:	01c02504 	movi	r7,148
    29a0:	0003a180 	call	3a18 <VGA_box>
				oneTime = 0;
    29a4:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    29a8:	00800044 	movi	r2,1
    29ac:	d0a81c15 	stw	r2,-24464(gp)
    29b0:	00002306 	br	2a40 <newHighscores+0x474>
			}
		} else if (newHighscoreSelect == 3){
    29b4:	d0a82317 	ldw	r2,-24436(gp)
    29b8:	108000d8 	cmpnei	r2,r2,3
    29bc:	10000f1e 	bne	r2,zero,29fc <newHighscores+0x430>
			if(oneTime == 1){
    29c0:	d0a00317 	ldw	r2,-32756(gp)
    29c4:	10800058 	cmpnei	r2,r2,1
    29c8:	10001d1e 	bne	r2,zero,2a40 <newHighscores+0x474>
				VGA_box(39 * 4, 34 * 4, 42 * 4, 37 * 4, geel);
    29cc:	00804034 	movhi	r2,256
    29d0:	10bfc004 	addi	r2,r2,-256
    29d4:	d8800015 	stw	r2,0(sp)
    29d8:	01002704 	movi	r4,156
    29dc:	01402204 	movi	r5,136
    29e0:	01802a04 	movi	r6,168
    29e4:	01c02504 	movi	r7,148
    29e8:	0003a180 	call	3a18 <VGA_box>
				oneTime = 0;
    29ec:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    29f0:	00800044 	movi	r2,1
    29f4:	d0a81c15 	stw	r2,-24464(gp)
    29f8:	00001106 	br	2a40 <newHighscores+0x474>
			}
		} else if (newHighscoreSelect == 4){
    29fc:	d0a82317 	ldw	r2,-24436(gp)
    2a00:	10800118 	cmpnei	r2,r2,4
    2a04:	10000e1e 	bne	r2,zero,2a40 <newHighscores+0x474>
			if(oneTime == 1){
    2a08:	d0a00317 	ldw	r2,-32756(gp)
    2a0c:	10800058 	cmpnei	r2,r2,1
    2a10:	10000b1e 	bne	r2,zero,2a40 <newHighscores+0x474>
				VGA_box(49 * 4, 34 * 4, 59 * 4, 37 * 4, geel);
    2a14:	00804034 	movhi	r2,256
    2a18:	10bfc004 	addi	r2,r2,-256
    2a1c:	d8800015 	stw	r2,0(sp)
    2a20:	01003104 	movi	r4,196
    2a24:	01402204 	movi	r5,136
    2a28:	01803b04 	movi	r6,236
    2a2c:	01c02504 	movi	r7,148
    2a30:	0003a180 	call	3a18 <VGA_box>
				oneTime = 0;
    2a34:	d0200315 	stw	zero,-32756(gp)
				verandert = 1;
    2a38:	00800044 	movi	r2,1
    2a3c:	d0a81c15 	stw	r2,-24464(gp)
			}
		}
		
		dakjeOmhoog(20, 30);
    2a40:	01000504 	movi	r4,20
    2a44:	01400784 	movi	r5,30
    2a48:	00017580 	call	1758 <dakjeOmhoog>
		VGA_text(20, 35, a);
    2a4c:	01000504 	movi	r4,20
    2a50:	014008c4 	movi	r5,35
    2a54:	d1a82604 	addi	r6,gp,-24424
    2a58:	0003acc0 	call	3acc <VGA_text>
		dakjeOmlaag(20, 40);
    2a5c:	01000504 	movi	r4,20
    2a60:	01400a04 	movi	r5,40
    2a64:	00017b00 	call	17b0 <dakjeOmlaag>
		
		dakjeOmhoog(30, 30);
    2a68:	01000784 	movi	r4,30
    2a6c:	01400784 	movi	r5,30
    2a70:	00017580 	call	1758 <dakjeOmhoog>
		VGA_text(30, 35, b);
    2a74:	01000784 	movi	r4,30
    2a78:	014008c4 	movi	r5,35
    2a7c:	d1a81704 	addi	r6,gp,-24484
    2a80:	0003acc0 	call	3acc <VGA_text>
		dakjeOmlaag(30, 40);
    2a84:	01000784 	movi	r4,30
    2a88:	01400a04 	movi	r5,40
    2a8c:	00017b00 	call	17b0 <dakjeOmlaag>
		
		dakjeOmhoog(40, 30);
    2a90:	01000a04 	movi	r4,40
    2a94:	01400784 	movi	r5,30
    2a98:	00017580 	call	1758 <dakjeOmhoog>
		VGA_text(40, 35, c);
    2a9c:	01000a04 	movi	r4,40
    2aa0:	014008c4 	movi	r5,35
    2aa4:	d1a81d04 	addi	r6,gp,-24460
    2aa8:	0003acc0 	call	3acc <VGA_text>
		dakjeOmlaag(40, 40);
    2aac:	01000a04 	movi	r4,40
    2ab0:	01400a04 	movi	r5,40
    2ab4:	00017b00 	call	17b0 <dakjeOmlaag>
		
		VGA_text(50, 35, "Bevestig");
    2ab8:	01000c84 	movi	r4,50
    2abc:	014008c4 	movi	r5,35
    2ac0:	018000b4 	movhi	r6,2
    2ac4:	31963204 	addi	r6,r6,22728
    2ac8:	0003acc0 	call	3acc <VGA_text>
		


					//controller(3) == 3 ??	
		if (controller(3) == 2 && newHighscoreSelect == 4) {
    2acc:	010000c4 	movi	r4,3
    2ad0:	000039c0 	call	39c <controller>
    2ad4:	10800098 	cmpnei	r2,r2,2
    2ad8:	10000c1e 	bne	r2,zero,2b0c <newHighscores+0x540>
    2adc:	d0a82317 	ldw	r2,-24436(gp)
    2ae0:	10800118 	cmpnei	r2,r2,4
    2ae4:	1000091e 	bne	r2,zero,2b0c <newHighscores+0x540>
			//save highscores naar SD kaart
			sorteer();
    2ae8:	00009b80 	call	9b8 <sorteer>

			VGA_box(48 * 4, 33 * 4, 60 * 4, 37 * 4, zwart); //omdat je alleen terug kan op bevestig, moet daar het gele selecteer gebied zitten, dus die schrijven we alleen weg.
    2aec:	d8000015 	stw	zero,0(sp)
    2af0:	01003004 	movi	r4,192
    2af4:	01402104 	movi	r5,132
    2af8:	01803c04 	movi	r6,240
    2afc:	01c02504 	movi	r7,148
    2b00:	0003a180 	call	3a18 <VGA_box>
			clearHighscoreText();
    2b04:	00025300 	call	2530 <clearHighscoreText>
			
			endNewHighscores();
    2b08:	00024380 	call	2438 <endNewHighscores>

		}
		
		OSTimeDly(20);
    2b0c:	01000504 	movi	r4,20
    2b10:	001cbd00 	call	1cbd0 <OSTimeDly>
		
	}
    2b14:	003ec006 	br	2618 <__alt_mem_Flash_flash_data+0xf4002618>

00002b18 <endHighscores>:
	
}

void endHighscores(){
    2b18:	defffc04 	addi	sp,sp,-16
    2b1c:	dfc00315 	stw	ra,12(sp)
    2b20:	df000215 	stw	fp,8(sp)
    2b24:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Highscores\n");
    2b28:	010000b4 	movhi	r4,2
    2b2c:	21163504 	addi	r4,r4,22740
    2b30:	00045ec0 	call	45ec <puts>

	//clearScreen();

	VGAtextClear();
    2b34:	0001dbc0 	call	1dbc <VGAtextClear>
	VGA_text(35, 25, "Einde Highscores");
    2b38:	010008c4 	movi	r4,35
    2b3c:	01400644 	movi	r5,25
    2b40:	018000b4 	movhi	r6,2
    2b44:	31963904 	addi	r6,r6,22756
    2b48:	0003acc0 	call	3acc <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    2b4c:	0009883a 	mov	r4,zero
    2b50:	000b883a 	mov	r5,zero
    2b54:	01800a04 	movi	r6,40
    2b58:	000f883a 	mov	r7,zero
    2b5c:	001cd180 	call	1cd18 <OSTimeDlyHMSM>
	VGA_text(35, 25, "                  ");
    2b60:	010008c4 	movi	r4,35
    2b64:	01400644 	movi	r5,25
    2b68:	018000b4 	movhi	r6,2
    2b6c:	31963e04 	addi	r6,r6,22776
    2b70:	0003acc0 	call	3acc <VGA_text>




	teken_menu(3);
    2b74:	010000c4 	movi	r4,3
    2b78:	00034e00 	call	34e0 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    2b7c:	d8000015 	stw	zero,0(sp)
    2b80:	01004f04 	movi	r4,316
    2b84:	01400104 	movi	r5,4
    2b88:	01804fc4 	movi	r6,319
    2b8c:	01c03ac4 	movi	r7,235
    2b90:	0003a180 	call	3a18 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2b94:	d1282417 	ldw	r4,-24432(gp)
    2b98:	d1681e17 	ldw	r5,-24456(gp)
    2b9c:	d0a82417 	ldw	r2,-24432(gp)
    2ba0:	10c00144 	addi	r3,r2,5
    2ba4:	d0a81e17 	ldw	r2,-24456(gp)
    2ba8:	10800144 	addi	r2,r2,5
    2bac:	d8000015 	stw	zero,0(sp)
    2bb0:	180d883a 	mov	r6,r3
    2bb4:	100f883a 	mov	r7,r2
    2bb8:	0003a180 	call	3a18 <VGA_box>


	ALT_x1 = 0;
    2bbc:	d0282415 	stw	zero,-24432(gp)
	ALT_x2 = 165;
    2bc0:	00802944 	movi	r2,165
    2bc4:	d0a82815 	stw	r2,-24416(gp)
	ALT_y = 100;
    2bc8:	00801904 	movi	r2,100
    2bcc:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_x = -1;
    2bd0:	00bfffc4 	movi	r2,-1
    2bd4:	d0a82715 	stw	r2,-24420(gp)
	ALT_inc_y = 1;
    2bd8:	00800044 	movi	r2,1
    2bdc:	d0a82015 	stw	r2,-24448(gp)

	first = 1;
    2be0:	00800044 	movi	r2,1
    2be4:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2be8:	d0a80f17 	ldw	r2,-24516(gp)
    2bec:	1009883a 	mov	r4,r2
    2bf0:	01400444 	movi	r5,17
    2bf4:	000d883a 	mov	r6,zero
    2bf8:	e1ffff04 	addi	r7,fp,-4
    2bfc:	0017a140 	call	17a14 <OSFlagPost>

	OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_SET, &err);
    2c00:	d0a81b17 	ldw	r2,-24468(gp)
    2c04:	1009883a 	mov	r4,r2
    2c08:	01402004 	movi	r5,128
    2c0c:	01800044 	movi	r6,1
    2c10:	e1ffff04 	addi	r7,fp,-4
    2c14:	0017a140 	call	17a14 <OSFlagPost>

}
    2c18:	e037883a 	mov	sp,fp
    2c1c:	dfc00117 	ldw	ra,4(sp)
    2c20:	df000017 	ldw	fp,0(sp)
    2c24:	dec00204 	addi	sp,sp,8
    2c28:	f800283a 	ret

00002c2c <Highscores>:

void Highscores(void* pdata){
    2c2c:	defffa04 	addi	sp,sp,-24
    2c30:	dfc00515 	stw	ra,20(sp)
    2c34:	df000415 	stw	fp,16(sp)
    2c38:	df000404 	addi	fp,sp,16
    2c3c:	e13fff15 	stw	r4,-4(fp)
	int ID;
	int count;
	int q;
	
	while(1){
		OSFlagPend(Flags_Highscores, Highscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    2c40:	d0e81b17 	ldw	r3,-24468(gp)
    2c44:	e0bffe04 	addi	r2,fp,-8
    2c48:	d8800015 	stw	r2,0(sp)
    2c4c:	1809883a 	mov	r4,r3
    2c50:	01402004 	movi	r5,128
    2c54:	01800044 	movi	r6,1
    2c58:	000f883a 	mov	r7,zero
    2c5c:	00173bc0 	call	173bc <OSFlagPend>
		VGA_text(35, 17, "Highscores");
    2c60:	010008c4 	movi	r4,35
    2c64:	01400444 	movi	r5,17
    2c68:	018000b4 	movhi	r6,2
    2c6c:	31964304 	addi	r6,r6,22796
    2c70:	0003acc0 	call	3acc <VGA_text>
		


		// highscores 1 t/m 5

		for(j = 0; j < 5; j++){
    2c74:	e03ffd15 	stw	zero,-12(fp)
    2c78:	00000f06 	br	2cb8 <Highscores+0x8c>
			VGA_text(38, 20 + 2 * j, highscores[j]);
    2c7c:	e0bffd17 	ldw	r2,-12(fp)
    2c80:	10800284 	addi	r2,r2,10
    2c84:	1085883a 	add	r2,r2,r2
    2c88:	100b883a 	mov	r5,r2
    2c8c:	e0bffd17 	ldw	r2,-12(fp)
    2c90:	10c00524 	muli	r3,r2,20
    2c94:	008000f4 	movhi	r2,3
    2c98:	10a81d04 	addi	r2,r2,-24460
    2c9c:	1885883a 	add	r2,r3,r2
    2ca0:	01000984 	movi	r4,38
    2ca4:	100d883a 	mov	r6,r2
    2ca8:	0003acc0 	call	3acc <VGA_text>
		


		// highscores 1 t/m 5

		for(j = 0; j < 5; j++){
    2cac:	e0bffd17 	ldw	r2,-12(fp)
    2cb0:	10800044 	addi	r2,r2,1
    2cb4:	e0bffd15 	stw	r2,-12(fp)
    2cb8:	e0bffd17 	ldw	r2,-12(fp)
    2cbc:	10800150 	cmplti	r2,r2,5
    2cc0:	103fee1e 	bne	r2,zero,2c7c <__alt_mem_Flash_flash_data+0xf4002c7c>
			VGA_text(38, 20 + 2 * j, highscores[j]);
		}
		
		VGA_text(35, 20, "1.");
    2cc4:	010008c4 	movi	r4,35
    2cc8:	01400504 	movi	r5,20
    2ccc:	018000b4 	movhi	r6,2
    2cd0:	31964604 	addi	r6,r6,22808
    2cd4:	0003acc0 	call	3acc <VGA_text>
		VGA_text(35, 22, "2.");
    2cd8:	010008c4 	movi	r4,35
    2cdc:	01400584 	movi	r5,22
    2ce0:	018000b4 	movhi	r6,2
    2ce4:	31964704 	addi	r6,r6,22812
    2ce8:	0003acc0 	call	3acc <VGA_text>
		VGA_text(35, 24, "3.");
    2cec:	010008c4 	movi	r4,35
    2cf0:	01400604 	movi	r5,24
    2cf4:	018000b4 	movhi	r6,2
    2cf8:	31964804 	addi	r6,r6,22816
    2cfc:	0003acc0 	call	3acc <VGA_text>
		VGA_text(35, 26, "4.");
    2d00:	010008c4 	movi	r4,35
    2d04:	01400684 	movi	r5,26
    2d08:	018000b4 	movhi	r6,2
    2d0c:	31964904 	addi	r6,r6,22820
    2d10:	0003acc0 	call	3acc <VGA_text>
		VGA_text(35, 28, "5.");
    2d14:	010008c4 	movi	r4,35
    2d18:	01400704 	movi	r5,28
    2d1c:	018000b4 	movhi	r6,2
    2d20:	31964a04 	addi	r6,r6,22824
    2d24:	0003acc0 	call	3acc <VGA_text>

		terugMenu();
    2d28:	0002d4c0 	call	2d4c <terugMenu>
		
		
		if (controller(3) == 3) {
    2d2c:	010000c4 	movi	r4,3
    2d30:	000039c0 	call	39c <controller>
    2d34:	108000d8 	cmpnei	r2,r2,3
    2d38:	1000011e 	bne	r2,zero,2d40 <Highscores+0x114>
			endHighscores();
    2d3c:	0002b180 	call	2b18 <endHighscores>
		}
		
		OSTimeDly(1);
    2d40:	01000044 	movi	r4,1
    2d44:	001cbd00 	call	1cbd0 <OSTimeDly>
		
	}
    2d48:	003fbd06 	br	2c40 <__alt_mem_Flash_flash_data+0xf4002c40>

00002d4c <terugMenu>:
	
}

void terugMenu(){
    2d4c:	defffe04 	addi	sp,sp,-8
    2d50:	dfc00115 	stw	ra,4(sp)
    2d54:	df000015 	stw	fp,0(sp)
    2d58:	d839883a 	mov	fp,sp
	
	INT8U err;
	
	VGA_text(63, 56, "Rechter knop =");
    2d5c:	01000fc4 	movi	r4,63
    2d60:	01400e04 	movi	r5,56
    2d64:	018000b4 	movhi	r6,2
    2d68:	31964b04 	addi	r6,r6,22828
    2d6c:	0003acc0 	call	3acc <VGA_text>
	VGA_text(63, 57, "terug naar menu");
    2d70:	01000fc4 	movi	r4,63
    2d74:	01400e44 	movi	r5,57
    2d78:	018000b4 	movhi	r6,2
    2d7c:	31964f04 	addi	r6,r6,22844
    2d80:	0003acc0 	call	3acc <VGA_text>
	
}
    2d84:	e037883a 	mov	sp,fp
    2d88:	dfc00117 	ldw	ra,4(sp)
    2d8c:	df000017 	ldw	fp,0(sp)
    2d90:	dec00204 	addi	sp,sp,8
    2d94:	f800283a 	ret

00002d98 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    2d98:	defffa04 	addi	sp,sp,-24
    2d9c:	dfc00515 	stw	ra,20(sp)
    2da0:	df000415 	stw	fp,16(sp)
    2da4:	df000404 	addi	fp,sp,16
    2da8:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    2dac:	e0bfff17 	ldw	r2,-4(fp)
    2db0:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    2db4:	00034e00 	call	34e0 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2db8:	d0e80f17 	ldw	r3,-24516(gp)
    2dbc:	e0bffe04 	addi	r2,fp,-8
    2dc0:	d8800015 	stw	r2,0(sp)
    2dc4:	1809883a 	mov	r4,r3
    2dc8:	01400044 	movi	r5,1
    2dcc:	000d883a 	mov	r6,zero
    2dd0:	000f883a 	mov	r7,zero
    2dd4:	00173bc0 	call	173bc <OSFlagPend>

		if (controller(ID) == 1){
    2dd8:	e13ffd17 	ldw	r4,-12(fp)
    2ddc:	000039c0 	call	39c <controller>
    2de0:	10800058 	cmpnei	r2,r2,1
    2de4:	1000111e 	bne	r2,zero,2e2c <menu+0x94>
			if(changed != 0){
    2de8:	d0a82c17 	ldw	r2,-24400(gp)
    2dec:	10000926 	beq	r2,zero,2e14 <menu+0x7c>
				gameModeMenu++;
    2df0:	d0a00417 	ldw	r2,-32752(gp)
    2df4:	10800044 	addi	r2,r2,1
    2df8:	d0a00415 	stw	r2,-32752(gp)
				eenkeer = 1;
    2dfc:	00800044 	movi	r2,1
    2e00:	d0a00b15 	stw	r2,-32724(gp)
				changed=0;
    2e04:	d0282c15 	stw	zero,-24400(gp)
				printf("heeft 1 gereturned \n");
    2e08:	010000b4 	movhi	r4,2
    2e0c:	21165304 	addi	r4,r4,22860
    2e10:	00045ec0 	call	45ec <puts>
			}
			if (gameModeMenu >= 5){
    2e14:	d0a00417 	ldw	r2,-32752(gp)
    2e18:	10800150 	cmplti	r2,r2,5
    2e1c:	1000161e 	bne	r2,zero,2e78 <menu+0xe0>
				gameModeMenu = 1;
    2e20:	00800044 	movi	r2,1
    2e24:	d0a00415 	stw	r2,-32752(gp)
    2e28:	00001306 	br	2e78 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    2e2c:	e13ffd17 	ldw	r4,-12(fp)
    2e30:	000039c0 	call	39c <controller>
    2e34:	1000101e 	bne	r2,zero,2e78 <menu+0xe0>
			if(changed !=0){
    2e38:	d0a82c17 	ldw	r2,-24400(gp)
    2e3c:	10000a26 	beq	r2,zero,2e68 <menu+0xd0>
				gameModeMenu--;
    2e40:	d0a00417 	ldw	r2,-32752(gp)
    2e44:	10bfffc4 	addi	r2,r2,-1
    2e48:	d0a00415 	stw	r2,-32752(gp)
				last=0;
    2e4c:	d0282b15 	stw	zero,-24404(gp)
				changed=0;
    2e50:	d0282c15 	stw	zero,-24400(gp)
				eenkeer = 1;
    2e54:	00800044 	movi	r2,1
    2e58:	d0a00b15 	stw	r2,-32724(gp)
				printf("heeft 0 gereturned \n");
    2e5c:	010000b4 	movhi	r4,2
    2e60:	21165804 	addi	r4,r4,22880
    2e64:	00045ec0 	call	45ec <puts>
			}
			if (gameModeMenu <= 0){
    2e68:	d0a00417 	ldw	r2,-32752(gp)
    2e6c:	00800216 	blt	zero,r2,2e78 <menu+0xe0>
				gameModeMenu = 4;
    2e70:	00800104 	movi	r2,4
    2e74:	d0a00415 	stw	r2,-32752(gp)
			}
		}
		OSTimeDly(20);
    2e78:	01000504 	movi	r4,20
    2e7c:	001cbd00 	call	1cbd0 <OSTimeDly>
	}
    2e80:	003fcd06 	br	2db8 <__alt_mem_Flash_flash_data+0xf4002db8>

00002e84 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    2e84:	defffa04 	addi	sp,sp,-24
    2e88:	dfc00515 	stw	ra,20(sp)
    2e8c:	df000415 	stw	fp,16(sp)
    2e90:	df000404 	addi	fp,sp,16
    2e94:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    2e98:	e0bfff17 	ldw	r2,-4(fp)
    2e9c:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2ea0:	d0e80f17 	ldw	r3,-24516(gp)
    2ea4:	e0bffe04 	addi	r2,fp,-8
    2ea8:	d8800015 	stw	r2,0(sp)
    2eac:	1809883a 	mov	r4,r3
    2eb0:	01400404 	movi	r5,16
    2eb4:	000d883a 	mov	r6,zero
    2eb8:	000f883a 	mov	r7,zero
    2ebc:	00173bc0 	call	173bc <OSFlagPend>

		if (gameModeMenu == 1){
    2ec0:	d0a00417 	ldw	r2,-32752(gp)
    2ec4:	10800058 	cmpnei	r2,r2,1
    2ec8:	1000411e 	bne	r2,zero,2fd0 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    2ecc:	d0a00b17 	ldw	r2,-32724(gp)
    2ed0:	10800058 	cmpnei	r2,r2,1
    2ed4:	10001f1e 	bne	r2,zero,2f54 <selecteerMenu+0xd0>
				clearScreen();
    2ed8:	00033200 	call	3320 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2edc:	d0a00517 	ldw	r2,-32748(gp)
    2ee0:	1085883a 	add	r2,r2,r2
    2ee4:	1085883a 	add	r2,r2,r2
    2ee8:	1009883a 	mov	r4,r2
    2eec:	d0a00717 	ldw	r2,-32740(gp)
    2ef0:	1085883a 	add	r2,r2,r2
    2ef4:	1085883a 	add	r2,r2,r2
    2ef8:	100b883a 	mov	r5,r2
    2efc:	d0a00617 	ldw	r2,-32744(gp)
    2f00:	1085883a 	add	r2,r2,r2
    2f04:	1085883a 	add	r2,r2,r2
    2f08:	100d883a 	mov	r6,r2
    2f0c:	d0a00817 	ldw	r2,-32736(gp)
    2f10:	1085883a 	add	r2,r2,r2
    2f14:	1085883a 	add	r2,r2,r2
    2f18:	1007883a 	mov	r3,r2
    2f1c:	00be0014 	movui	r2,63488
    2f20:	d8800015 	stw	r2,0(sp)
    2f24:	180f883a 	mov	r7,r3
    2f28:	0003a180 	call	3a18 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    2f2c:	d0e00917 	ldw	r3,-32732(gp)
    2f30:	d0a00a17 	ldw	r2,-32728(gp)
    2f34:	1809883a 	mov	r4,r3
    2f38:	100b883a 	mov	r5,r2
    2f3c:	018000b4 	movhi	r6,2
    2f40:	31965d04 	addi	r6,r6,22900
    2f44:	0003acc0 	call	3acc <VGA_text>
				eenkeer = 0;
    2f48:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    2f4c:	00800044 	movi	r2,1
    2f50:	d0a82c15 	stw	r2,-24400(gp)
			}
			if(controller(ID) == 2){
    2f54:	e13ffd17 	ldw	r4,-12(fp)
    2f58:	000039c0 	call	39c <controller>
    2f5c:	10800098 	cmpnei	r2,r2,2
    2f60:	1000ec1e 	bne	r2,zero,3314 <selecteerMenu+0x490>
				clearScreen();
    2f64:	00033200 	call	3320 <clearScreen>
				clearText();
    2f68:	00033600 	call	3360 <clearText>
				printf("start Singleplayer\n");
    2f6c:	010000b4 	movhi	r4,2
    2f70:	21166104 	addi	r4,r4,22916
    2f74:	00045ec0 	call	45ec <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    2f78:	d0e80f17 	ldw	r3,-24516(gp)
    2f7c:	e0bffe04 	addi	r2,fp,-8
    2f80:	1809883a 	mov	r4,r3
    2f84:	01400104 	movi	r5,4
    2f88:	000d883a 	mov	r6,zero
    2f8c:	100f883a 	mov	r7,r2
    2f90:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    2f94:	d0e80d17 	ldw	r3,-24524(gp)
    2f98:	e0bffe04 	addi	r2,fp,-8
    2f9c:	1809883a 	mov	r4,r3
    2fa0:	01400804 	movi	r5,32
    2fa4:	000d883a 	mov	r6,zero
    2fa8:	100f883a 	mov	r7,r2
    2fac:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2fb0:	d0e80f17 	ldw	r3,-24516(gp)
    2fb4:	e0bffe04 	addi	r2,fp,-8
    2fb8:	1809883a 	mov	r4,r3
    2fbc:	01400444 	movi	r5,17
    2fc0:	01800044 	movi	r6,1
    2fc4:	100f883a 	mov	r7,r2
    2fc8:	0017a140 	call	17a14 <OSFlagPost>
    2fcc:	0000d106 	br	3314 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 2){
    2fd0:	d0a00417 	ldw	r2,-32752(gp)
    2fd4:	10800098 	cmpnei	r2,r2,2
    2fd8:	1000481e 	bne	r2,zero,30fc <selecteerMenu+0x278>
			if(eenkeer == 1){
    2fdc:	d0a00b17 	ldw	r2,-32724(gp)
    2fe0:	10800058 	cmpnei	r2,r2,1
    2fe4:	1000221e 	bne	r2,zero,3070 <selecteerMenu+0x1ec>
				clearScreen();
    2fe8:	00033200 	call	3320 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2fec:	d0a00517 	ldw	r2,-32748(gp)
    2ff0:	1085883a 	add	r2,r2,r2
    2ff4:	1085883a 	add	r2,r2,r2
    2ff8:	1009883a 	mov	r4,r2
    2ffc:	d0a00717 	ldw	r2,-32740(gp)
    3000:	10800104 	addi	r2,r2,4
    3004:	1085883a 	add	r2,r2,r2
    3008:	1085883a 	add	r2,r2,r2
    300c:	100b883a 	mov	r5,r2
    3010:	d0a00617 	ldw	r2,-32744(gp)
    3014:	1085883a 	add	r2,r2,r2
    3018:	1085883a 	add	r2,r2,r2
    301c:	100d883a 	mov	r6,r2
    3020:	d0a00817 	ldw	r2,-32736(gp)
    3024:	10800104 	addi	r2,r2,4
    3028:	1085883a 	add	r2,r2,r2
    302c:	1085883a 	add	r2,r2,r2
    3030:	1007883a 	mov	r3,r2
    3034:	00be0014 	movui	r2,63488
    3038:	d8800015 	stw	r2,0(sp)
    303c:	180f883a 	mov	r7,r3
    3040:	0003a180 	call	3a18 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    3044:	d0e00917 	ldw	r3,-32732(gp)
    3048:	d0a00a17 	ldw	r2,-32728(gp)
    304c:	10800104 	addi	r2,r2,4
    3050:	1809883a 	mov	r4,r3
    3054:	100b883a 	mov	r5,r2
    3058:	018000b4 	movhi	r6,2
    305c:	31966604 	addi	r6,r6,22936
    3060:	0003acc0 	call	3acc <VGA_text>
				eenkeer = 0;
    3064:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    3068:	00800044 	movi	r2,1
    306c:	d0a82c15 	stw	r2,-24400(gp)
			}
			if(controller(ID) == 2 || controller(ID) == 1){
    3070:	e13ffd17 	ldw	r4,-12(fp)
    3074:	000039c0 	call	39c <controller>
    3078:	108000a0 	cmpeqi	r2,r2,2
    307c:	1000041e 	bne	r2,zero,3090 <selecteerMenu+0x20c>
    3080:	e13ffd17 	ldw	r4,-12(fp)
    3084:	000039c0 	call	39c <controller>
    3088:	10800058 	cmpnei	r2,r2,1
    308c:	1000a11e 	bne	r2,zero,3314 <selecteerMenu+0x490>
				clearScreen();
    3090:	00033200 	call	3320 <clearScreen>
				clearText();
    3094:	00033600 	call	3360 <clearText>
				printf("start game\n");
    3098:	010000b4 	movhi	r4,2
    309c:	21166904 	addi	r4,r4,22948
    30a0:	00045ec0 	call	45ec <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    30a4:	d0e80f17 	ldw	r3,-24516(gp)
    30a8:	e0bffe04 	addi	r2,fp,-8
    30ac:	1809883a 	mov	r4,r3
    30b0:	01400304 	movi	r5,12
    30b4:	000d883a 	mov	r6,zero
    30b8:	100f883a 	mov	r7,r2
    30bc:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    30c0:	d0e80d17 	ldw	r3,-24524(gp)
    30c4:	e0bffe04 	addi	r2,fp,-8
    30c8:	1809883a 	mov	r4,r3
    30cc:	01400084 	movi	r5,2
    30d0:	000d883a 	mov	r6,zero
    30d4:	100f883a 	mov	r7,r2
    30d8:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    30dc:	d0e80f17 	ldw	r3,-24516(gp)
    30e0:	e0bffe04 	addi	r2,fp,-8
    30e4:	1809883a 	mov	r4,r3
    30e8:	01400444 	movi	r5,17
    30ec:	01800044 	movi	r6,1
    30f0:	100f883a 	mov	r7,r2
    30f4:	0017a140 	call	17a14 <OSFlagPost>
    30f8:	00008606 	br	3314 <selecteerMenu+0x490>
			}

		} else if (gameModeMenu == 3){
    30fc:	d0a00417 	ldw	r2,-32752(gp)
    3100:	108000d8 	cmpnei	r2,r2,3
    3104:	10003d1e 	bne	r2,zero,31fc <selecteerMenu+0x378>
			if(eenkeer == 1){
    3108:	d0a00b17 	ldw	r2,-32724(gp)
    310c:	10800058 	cmpnei	r2,r2,1
    3110:	1000221e 	bne	r2,zero,319c <selecteerMenu+0x318>
				clearScreen();
    3114:	00033200 	call	3320 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    3118:	d0a00517 	ldw	r2,-32748(gp)
    311c:	1085883a 	add	r2,r2,r2
    3120:	1085883a 	add	r2,r2,r2
    3124:	1009883a 	mov	r4,r2
    3128:	d0a00717 	ldw	r2,-32740(gp)
    312c:	10800204 	addi	r2,r2,8
    3130:	1085883a 	add	r2,r2,r2
    3134:	1085883a 	add	r2,r2,r2
    3138:	100b883a 	mov	r5,r2
    313c:	d0a00617 	ldw	r2,-32744(gp)
    3140:	1085883a 	add	r2,r2,r2
    3144:	1085883a 	add	r2,r2,r2
    3148:	100d883a 	mov	r6,r2
    314c:	d0a00817 	ldw	r2,-32736(gp)
    3150:	10800204 	addi	r2,r2,8
    3154:	1085883a 	add	r2,r2,r2
    3158:	1085883a 	add	r2,r2,r2
    315c:	1007883a 	mov	r3,r2
    3160:	00be0014 	movui	r2,63488
    3164:	d8800015 	stw	r2,0(sp)
    3168:	180f883a 	mov	r7,r3
    316c:	0003a180 	call	3a18 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    3170:	d0e00917 	ldw	r3,-32732(gp)
    3174:	d0a00a17 	ldw	r2,-32728(gp)
    3178:	10800204 	addi	r2,r2,8
    317c:	1809883a 	mov	r4,r3
    3180:	100b883a 	mov	r5,r2
    3184:	018000b4 	movhi	r6,2
    3188:	31966c04 	addi	r6,r6,22960
    318c:	0003acc0 	call	3acc <VGA_text>
				eenkeer = 0;
    3190:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;				
    3194:	00800044 	movi	r2,1
    3198:	d0a82c15 	stw	r2,-24400(gp)
			}
			if(controller(ID) == 2){
    319c:	e13ffd17 	ldw	r4,-12(fp)
    31a0:	000039c0 	call	39c <controller>
    31a4:	10800098 	cmpnei	r2,r2,2
    31a8:	10005a1e 	bne	r2,zero,3314 <selecteerMenu+0x490>
				clearScreen();
    31ac:	00033200 	call	3320 <clearScreen>
				clearText();
    31b0:	00033600 	call	3360 <clearText>
				printf("Start Highscores\n");
    31b4:	010000b4 	movhi	r4,2
    31b8:	21166f04 	addi	r4,r4,22972
    31bc:	00045ec0 	call	45ec <puts>
				OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_CLR, &err);
    31c0:	d0e81b17 	ldw	r3,-24468(gp)
    31c4:	e0bffe04 	addi	r2,fp,-8
    31c8:	1809883a 	mov	r4,r3
    31cc:	01402004 	movi	r5,128
    31d0:	000d883a 	mov	r6,zero
    31d4:	100f883a 	mov	r7,r2
    31d8:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    31dc:	d0e80f17 	ldw	r3,-24516(gp)
    31e0:	e0bffe04 	addi	r2,fp,-8
    31e4:	1809883a 	mov	r4,r3
    31e8:	01400444 	movi	r5,17
    31ec:	01800044 	movi	r6,1
    31f0:	100f883a 	mov	r7,r2
    31f4:	0017a140 	call	17a14 <OSFlagPost>
    31f8:	00004606 	br	3314 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 4){
    31fc:	d0a00417 	ldw	r2,-32752(gp)
    3200:	10800118 	cmpnei	r2,r2,4
    3204:	1000431e 	bne	r2,zero,3314 <selecteerMenu+0x490>
			if(eenkeer == 1){
    3208:	d0a00b17 	ldw	r2,-32724(gp)
    320c:	10800058 	cmpnei	r2,r2,1
    3210:	1000221e 	bne	r2,zero,329c <selecteerMenu+0x418>
				clearScreen();
    3214:	00033200 	call	3320 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    3218:	d0a00517 	ldw	r2,-32748(gp)
    321c:	1085883a 	add	r2,r2,r2
    3220:	1085883a 	add	r2,r2,r2
    3224:	1009883a 	mov	r4,r2
    3228:	d0a00717 	ldw	r2,-32740(gp)
    322c:	10800304 	addi	r2,r2,12
    3230:	1085883a 	add	r2,r2,r2
    3234:	1085883a 	add	r2,r2,r2
    3238:	100b883a 	mov	r5,r2
    323c:	d0a00617 	ldw	r2,-32744(gp)
    3240:	1085883a 	add	r2,r2,r2
    3244:	1085883a 	add	r2,r2,r2
    3248:	100d883a 	mov	r6,r2
    324c:	d0a00817 	ldw	r2,-32736(gp)
    3250:	10800304 	addi	r2,r2,12
    3254:	1085883a 	add	r2,r2,r2
    3258:	1085883a 	add	r2,r2,r2
    325c:	1007883a 	mov	r3,r2
    3260:	00be0014 	movui	r2,63488
    3264:	d8800015 	stw	r2,0(sp)
    3268:	180f883a 	mov	r7,r3
    326c:	0003a180 	call	3a18 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    3270:	d0e00917 	ldw	r3,-32732(gp)
    3274:	d0a00a17 	ldw	r2,-32728(gp)
    3278:	10800304 	addi	r2,r2,12
    327c:	1809883a 	mov	r4,r3
    3280:	100b883a 	mov	r5,r2
    3284:	018000b4 	movhi	r6,2
    3288:	31967404 	addi	r6,r6,22992
    328c:	0003acc0 	call	3acc <VGA_text>
				eenkeer = 0;
    3290:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
    3294:	00800044 	movi	r2,1
    3298:	d0a82c15 	stw	r2,-24400(gp)

			}
			
			if(controller(ID) == 2){
    329c:	e13ffd17 	ldw	r4,-12(fp)
    32a0:	000039c0 	call	39c <controller>
    32a4:	10800098 	cmpnei	r2,r2,2
    32a8:	10001a1e 	bne	r2,zero,3314 <selecteerMenu+0x490>
				clearScreen();
    32ac:	00033200 	call	3320 <clearScreen>
				clearText();
    32b0:	00033600 	call	3360 <clearText>
				printf("Start Tutorial\n");
    32b4:	010000b4 	movhi	r4,2
    32b8:	21167704 	addi	r4,r4,23004
    32bc:	00045ec0 	call	45ec <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    32c0:	d0e80f17 	ldw	r3,-24516(gp)
    32c4:	e0bffe04 	addi	r2,fp,-8
    32c8:	1809883a 	mov	r4,r3
    32cc:	01400104 	movi	r5,4
    32d0:	000d883a 	mov	r6,zero
    32d4:	100f883a 	mov	r7,r2
    32d8:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    32dc:	d0e81217 	ldw	r3,-24504(gp)
    32e0:	e0bffe04 	addi	r2,fp,-8
    32e4:	1809883a 	mov	r4,r3
    32e8:	01401004 	movi	r5,64
    32ec:	000d883a 	mov	r6,zero
    32f0:	100f883a 	mov	r7,r2
    32f4:	0017a140 	call	17a14 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    32f8:	d0e80f17 	ldw	r3,-24516(gp)
    32fc:	e0bffe04 	addi	r2,fp,-8
    3300:	1809883a 	mov	r4,r3
    3304:	01400444 	movi	r5,17
    3308:	01800044 	movi	r6,1
    330c:	100f883a 	mov	r7,r2
    3310:	0017a140 	call	17a14 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    3314:	01000504 	movi	r4,20
    3318:	001cbd00 	call	1cbd0 <OSTimeDly>
	}
    331c:	003ee006 	br	2ea0 <__alt_mem_Flash_flash_data+0xf4002ea0>

00003320 <clearScreen>:
}

void clearScreen(){
    3320:	defffd04 	addi	sp,sp,-12
    3324:	dfc00215 	stw	ra,8(sp)
    3328:	df000115 	stw	fp,4(sp)
    332c:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    3330:	d8000015 	stw	zero,0(sp)
    3334:	01000644 	movi	r4,25
    3338:	01401184 	movi	r5,70
    333c:	01803204 	movi	r6,200
    3340:	01c021c4 	movi	r7,135
    3344:	0003a180 	call	3a18 <VGA_box>
	del_middenlijn();
    3348:	0003bc40 	call	3bc4 <del_middenlijn>
}
    334c:	e037883a 	mov	sp,fp
    3350:	dfc00117 	ldw	ra,4(sp)
    3354:	df000017 	ldw	fp,0(sp)
    3358:	dec00204 	addi	sp,sp,8
    335c:	f800283a 	ret

00003360 <clearText>:

void clearText(){
    3360:	defffe04 	addi	sp,sp,-8
    3364:	dfc00115 	stw	ra,4(sp)
    3368:	df000015 	stw	fp,0(sp)
    336c:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    3370:	d0e00917 	ldw	r3,-32732(gp)
    3374:	d0a00a17 	ldw	r2,-32728(gp)
    3378:	1809883a 	mov	r4,r3
    337c:	100b883a 	mov	r5,r2
    3380:	018000b4 	movhi	r6,2
    3384:	31967b04 	addi	r6,r6,23020
    3388:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    338c:	d0e00917 	ldw	r3,-32732(gp)
    3390:	d0a00a17 	ldw	r2,-32728(gp)
    3394:	10800104 	addi	r2,r2,4
    3398:	1809883a 	mov	r4,r3
    339c:	100b883a 	mov	r5,r2
    33a0:	018000b4 	movhi	r6,2
    33a4:	31967f04 	addi	r6,r6,23036
    33a8:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    33ac:	d0e00917 	ldw	r3,-32732(gp)
    33b0:	d0a00a17 	ldw	r2,-32728(gp)
    33b4:	10800204 	addi	r2,r2,8
    33b8:	1809883a 	mov	r4,r3
    33bc:	100b883a 	mov	r5,r2
    33c0:	018000b4 	movhi	r6,2
    33c4:	31968204 	addi	r6,r6,23048
    33c8:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    33cc:	d0e00917 	ldw	r3,-32732(gp)
    33d0:	d0a00a17 	ldw	r2,-32728(gp)
    33d4:	10800304 	addi	r2,r2,12
    33d8:	1809883a 	mov	r4,r3
    33dc:	100b883a 	mov	r5,r2
    33e0:	018000b4 	movhi	r6,2
    33e4:	31968504 	addi	r6,r6,23060
    33e8:	0003acc0 	call	3acc <VGA_text>
}
    33ec:	e037883a 	mov	sp,fp
    33f0:	dfc00117 	ldw	ra,4(sp)
    33f4:	df000017 	ldw	fp,0(sp)
    33f8:	dec00204 	addi	sp,sp,8
    33fc:	f800283a 	ret

00003400 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    3400:	defff804 	addi	sp,sp,-32
    3404:	dfc00715 	stw	ra,28(sp)
    3408:	df000615 	stw	fp,24(sp)
    340c:	df000604 	addi	fp,sp,24
    3410:	e13ffb15 	stw	r4,-20(fp)
    3414:	e17ffc15 	stw	r5,-16(fp)
    3418:	e1bffd15 	stw	r6,-12(fp)
    341c:	e1fffe15 	stw	r7,-8(fp)
    3420:	e0800217 	ldw	r2,8(fp)
    3424:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    3428:	e0bfff0f 	ldh	r2,-4(fp)
    342c:	d8800015 	stw	r2,0(sp)
    3430:	e13ffb17 	ldw	r4,-20(fp)
    3434:	e17ffc17 	ldw	r5,-16(fp)
    3438:	e1bffd17 	ldw	r6,-12(fp)
    343c:	e1fffe17 	ldw	r7,-8(fp)
    3440:	0003a180 	call	3a18 <VGA_box>
}
    3444:	e037883a 	mov	sp,fp
    3448:	dfc00117 	ldw	ra,4(sp)
    344c:	df000017 	ldw	fp,0(sp)
    3450:	dec00204 	addi	sp,sp,8
    3454:	f800283a 	ret

00003458 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    3458:	defff804 	addi	sp,sp,-32
    345c:	dfc00715 	stw	ra,28(sp)
    3460:	df000615 	stw	fp,24(sp)
    3464:	df000604 	addi	fp,sp,24
    3468:	e13ffb15 	stw	r4,-20(fp)
    346c:	e17ffc15 	stw	r5,-16(fp)
    3470:	e1bffd15 	stw	r6,-12(fp)
    3474:	e1fffe15 	stw	r7,-8(fp)
    3478:	e0800217 	ldw	r2,8(fp)
    347c:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    3480:	e0bffb17 	ldw	r2,-20(fp)
    3484:	10800044 	addi	r2,r2,1
    3488:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    348c:	e0bffc17 	ldw	r2,-16(fp)
    3490:	10800044 	addi	r2,r2,1
    3494:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    3498:	e0bffd17 	ldw	r2,-12(fp)
    349c:	10bfffc4 	addi	r2,r2,-1
    34a0:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    34a4:	e0bffe17 	ldw	r2,-8(fp)
    34a8:	10bfffc4 	addi	r2,r2,-1
    34ac:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    34b0:	e0bfff0f 	ldh	r2,-4(fp)
    34b4:	d8800015 	stw	r2,0(sp)
    34b8:	e13ffb17 	ldw	r4,-20(fp)
    34bc:	e17ffc17 	ldw	r5,-16(fp)
    34c0:	e1bffd17 	ldw	r6,-12(fp)
    34c4:	e1fffe17 	ldw	r7,-8(fp)
    34c8:	0003a180 	call	3a18 <VGA_box>
}
    34cc:	e037883a 	mov	sp,fp
    34d0:	dfc00117 	ldw	ra,4(sp)
    34d4:	df000017 	ldw	fp,0(sp)
    34d8:	dec00204 	addi	sp,sp,8
    34dc:	f800283a 	ret

000034e0 <teken_menu>:

void teken_menu(int ID){
    34e0:	defffc04 	addi	sp,sp,-16
    34e4:	dfc00315 	stw	ra,12(sp)
    34e8:	df000215 	stw	fp,8(sp)
    34ec:	df000204 	addi	fp,sp,8
    34f0:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    34f4:	d0e00917 	ldw	r3,-32732(gp)
    34f8:	d0a00a17 	ldw	r2,-32728(gp)
    34fc:	1809883a 	mov	r4,r3
    3500:	100b883a 	mov	r5,r2
    3504:	018000b4 	movhi	r6,2
    3508:	31965d04 	addi	r6,r6,22900
    350c:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    3510:	d0e00917 	ldw	r3,-32732(gp)
    3514:	d0a00a17 	ldw	r2,-32728(gp)
    3518:	10800104 	addi	r2,r2,4
    351c:	1809883a 	mov	r4,r3
    3520:	100b883a 	mov	r5,r2
    3524:	018000b4 	movhi	r6,2
    3528:	31966604 	addi	r6,r6,22936
    352c:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    3530:	d0e00917 	ldw	r3,-32732(gp)
    3534:	d0a00a17 	ldw	r2,-32728(gp)
    3538:	10800204 	addi	r2,r2,8
    353c:	1809883a 	mov	r4,r3
    3540:	100b883a 	mov	r5,r2
    3544:	018000b4 	movhi	r6,2
    3548:	31966c04 	addi	r6,r6,22960
    354c:	0003acc0 	call	3acc <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    3550:	d0e00917 	ldw	r3,-32732(gp)
    3554:	d0a00a17 	ldw	r2,-32728(gp)
    3558:	10800304 	addi	r2,r2,12
    355c:	1809883a 	mov	r4,r3
    3560:	100b883a 	mov	r5,r2
    3564:	018000b4 	movhi	r6,2
    3568:	31967404 	addi	r6,r6,22992
    356c:	0003acc0 	call	3acc <VGA_text>
	if(ID == 1){
    3570:	e0bfff17 	ldw	r2,-4(fp)
    3574:	10800058 	cmpnei	r2,r2,1
    3578:	1000151e 	bne	r2,zero,35d0 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    357c:	d0a00517 	ldw	r2,-32748(gp)
    3580:	1085883a 	add	r2,r2,r2
    3584:	1085883a 	add	r2,r2,r2
    3588:	1009883a 	mov	r4,r2
    358c:	d0a00717 	ldw	r2,-32740(gp)
    3590:	1085883a 	add	r2,r2,r2
    3594:	1085883a 	add	r2,r2,r2
    3598:	100b883a 	mov	r5,r2
    359c:	d0a00617 	ldw	r2,-32744(gp)
    35a0:	1085883a 	add	r2,r2,r2
    35a4:	1085883a 	add	r2,r2,r2
    35a8:	100d883a 	mov	r6,r2
    35ac:	d0a00817 	ldw	r2,-32736(gp)
    35b0:	1085883a 	add	r2,r2,r2
    35b4:	1085883a 	add	r2,r2,r2
    35b8:	1007883a 	mov	r3,r2
    35bc:	00be0014 	movui	r2,63488
    35c0:	d8800015 	stw	r2,0(sp)
    35c4:	180f883a 	mov	r7,r3
    35c8:	0003a180 	call	3a18 <VGA_box>
    35cc:	00004d06 	br	3704 <teken_menu+0x224>
	}else if(ID == 2){
    35d0:	e0bfff17 	ldw	r2,-4(fp)
    35d4:	10800098 	cmpnei	r2,r2,2
    35d8:	1000171e 	bne	r2,zero,3638 <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    35dc:	d0a00517 	ldw	r2,-32748(gp)
    35e0:	1085883a 	add	r2,r2,r2
    35e4:	1085883a 	add	r2,r2,r2
    35e8:	1009883a 	mov	r4,r2
    35ec:	d0a00717 	ldw	r2,-32740(gp)
    35f0:	10800104 	addi	r2,r2,4
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	1085883a 	add	r2,r2,r2
    35fc:	100b883a 	mov	r5,r2
    3600:	d0a00617 	ldw	r2,-32744(gp)
    3604:	1085883a 	add	r2,r2,r2
    3608:	1085883a 	add	r2,r2,r2
    360c:	100d883a 	mov	r6,r2
    3610:	d0a00817 	ldw	r2,-32736(gp)
    3614:	10800104 	addi	r2,r2,4
    3618:	1085883a 	add	r2,r2,r2
    361c:	1085883a 	add	r2,r2,r2
    3620:	1007883a 	mov	r3,r2
    3624:	00be0014 	movui	r2,63488
    3628:	d8800015 	stw	r2,0(sp)
    362c:	180f883a 	mov	r7,r3
    3630:	0003a180 	call	3a18 <VGA_box>
    3634:	00003306 	br	3704 <teken_menu+0x224>
	}else if(ID == 3){
    3638:	e0bfff17 	ldw	r2,-4(fp)
    363c:	108000d8 	cmpnei	r2,r2,3
    3640:	1000171e 	bne	r2,zero,36a0 <teken_menu+0x1c0>
		VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    3644:	d0a00517 	ldw	r2,-32748(gp)
    3648:	1085883a 	add	r2,r2,r2
    364c:	1085883a 	add	r2,r2,r2
    3650:	1009883a 	mov	r4,r2
    3654:	d0a00717 	ldw	r2,-32740(gp)
    3658:	10800204 	addi	r2,r2,8
    365c:	1085883a 	add	r2,r2,r2
    3660:	1085883a 	add	r2,r2,r2
    3664:	100b883a 	mov	r5,r2
    3668:	d0a00617 	ldw	r2,-32744(gp)
    366c:	1085883a 	add	r2,r2,r2
    3670:	1085883a 	add	r2,r2,r2
    3674:	100d883a 	mov	r6,r2
    3678:	d0a00817 	ldw	r2,-32736(gp)
    367c:	10800204 	addi	r2,r2,8
    3680:	1085883a 	add	r2,r2,r2
    3684:	1085883a 	add	r2,r2,r2
    3688:	1007883a 	mov	r3,r2
    368c:	00be0014 	movui	r2,63488
    3690:	d8800015 	stw	r2,0(sp)
    3694:	180f883a 	mov	r7,r3
    3698:	0003a180 	call	3a18 <VGA_box>
    369c:	00001906 	br	3704 <teken_menu+0x224>
	}else if(ID == 4){
    36a0:	e0bfff17 	ldw	r2,-4(fp)
    36a4:	10800118 	cmpnei	r2,r2,4
    36a8:	1000161e 	bne	r2,zero,3704 <teken_menu+0x224>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    36ac:	d0a00517 	ldw	r2,-32748(gp)
    36b0:	1085883a 	add	r2,r2,r2
    36b4:	1085883a 	add	r2,r2,r2
    36b8:	1009883a 	mov	r4,r2
    36bc:	d0a00717 	ldw	r2,-32740(gp)
    36c0:	10800304 	addi	r2,r2,12
    36c4:	1085883a 	add	r2,r2,r2
    36c8:	1085883a 	add	r2,r2,r2
    36cc:	100b883a 	mov	r5,r2
    36d0:	d0a00617 	ldw	r2,-32744(gp)
    36d4:	1085883a 	add	r2,r2,r2
    36d8:	1085883a 	add	r2,r2,r2
    36dc:	100d883a 	mov	r6,r2
    36e0:	d0a00817 	ldw	r2,-32736(gp)
    36e4:	10800304 	addi	r2,r2,12
    36e8:	1085883a 	add	r2,r2,r2
    36ec:	1085883a 	add	r2,r2,r2
    36f0:	1007883a 	mov	r3,r2
    36f4:	00be0014 	movui	r2,63488
    36f8:	d8800015 	stw	r2,0(sp)
    36fc:	180f883a 	mov	r7,r3
    3700:	0003a180 	call	3a18 <VGA_box>
	}


}
    3704:	e037883a 	mov	sp,fp
    3708:	dfc00117 	ldw	ra,4(sp)
    370c:	df000017 	ldw	fp,0(sp)
    3710:	dec00204 	addi	sp,sp,8
    3714:	f800283a 	ret

00003718 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    3718:	defffa04 	addi	sp,sp,-24
    371c:	dfc00515 	stw	ra,20(sp)
    3720:	df000415 	stw	fp,16(sp)
    3724:	df000404 	addi	fp,sp,16
	INT8U err;
	OSInit();
    3728:	001518c0 	call	1518c <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    372c:	00800174 	movhi	r2,5
    3730:	10814004 	addi	r2,r2,1280
    3734:	e0bffd15 	stw	r2,-12(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    3738:	d0a00d17 	ldw	r2,-32716(gp)
    373c:	10800204 	addi	r2,r2,8
    3740:	e0fffd17 	ldw	r3,-12(fp)
    3744:	18ffffcc 	andi	r3,r3,65535
    3748:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    374c:	d0a00d17 	ldw	r2,-32716(gp)
    3750:	10800304 	addi	r2,r2,12
    3754:	e0fffd17 	ldw	r3,-12(fp)
    3758:	1806d43a 	srli	r3,r3,16
    375c:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    3760:	d0a00d17 	ldw	r2,-32716(gp)
    3764:	10800104 	addi	r2,r2,4
    3768:	00c001c4 	movi	r3,7
    376c:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    3770:	e0bfff04 	addi	r2,fp,-4
    3774:	01000304 	movi	r4,12
    3778:	100b883a 	mov	r5,r2
    377c:	0016da40 	call	16da4 <OSFlagCreate>
    3780:	d0a80f15 	stw	r2,-24516(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    3784:	e0bfff04 	addi	r2,fp,-4
    3788:	01000884 	movi	r4,34
    378c:	100b883a 	mov	r5,r2
    3790:	0016da40 	call	16da4 <OSFlagCreate>
    3794:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    3798:	e0bfff04 	addi	r2,fp,-4
    379c:	01001004 	movi	r4,64
    37a0:	100b883a 	mov	r5,r2
    37a4:	0016da40 	call	16da4 <OSFlagCreate>
    37a8:	d0a81215 	stw	r2,-24504(gp)
	Flags_Highscores = OSFlagCreate(Highscores_Flag, &err);
    37ac:	e0bfff04 	addi	r2,fp,-4
    37b0:	01002004 	movi	r4,128
    37b4:	100b883a 	mov	r5,r2
    37b8:	0016da40 	call	16da4 <OSFlagCreate>
    37bc:	d0a81b15 	stw	r2,-24468(gp)
	Flags_newHighscores = OSFlagCreate(newHighscores_Flag, &err);
    37c0:	e0bfff04 	addi	r2,fp,-4
    37c4:	01004004 	movi	r4,256
    37c8:	100b883a 	mov	r5,r2
    37cc:	0016da40 	call	16da4 <OSFlagCreate>
    37d0:	d0a82115 	stw	r2,-24444(gp)

	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
    37d4:	010000b4 	movhi	r4,2
    37d8:	21168804 	addi	r4,r4,23072
    37dc:	00201d00 	call	201d0 <alt_up_sd_card_open_dev>
    37e0:	e0bffe15 	stw	r2,-8(fp)

 	 if (sd_card!=NULL){
    37e4:	e0bffe17 	ldw	r2,-8(fp)
    37e8:	10001726 	beq	r2,zero,3848 <main+0x130>
		if (alt_up_sd_card_is_Present()){
    37ec:	00202900 	call	20290 <alt_up_sd_card_is_Present>
    37f0:	10000626 	beq	r2,zero,380c <main+0xf4>
			printf("An SD Card was found!\n");
    37f4:	010000b4 	movhi	r4,2
    37f8:	21168c04 	addi	r4,r4,23088
    37fc:	00045ec0 	call	45ec <puts>
		else {
			printf("No SD Card Found. \n Exiting the program.");
			return -1;
		}

 		if (alt_up_sd_card_is_FAT16()){
    3800:	00203540 	call	20354 <alt_up_sd_card_is_FAT16>
    3804:	10000b26 	beq	r2,zero,3834 <main+0x11c>
    3808:	00000506 	br	3820 <main+0x108>
		if (alt_up_sd_card_is_Present()){
			printf("An SD Card was found!\n");

		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
    380c:	010000b4 	movhi	r4,2
    3810:	21169204 	addi	r4,r4,23112
    3814:	00044e80 	call	44e8 <printf>
			return -1;
    3818:	00bfffc4 	movi	r2,-1
    381c:	00007906 	br	3a04 <main+0x2ec>
		}

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
    3820:	010000b4 	movhi	r4,2
    3824:	21169d04 	addi	r4,r4,23156
    3828:	00045ec0 	call	45ec <puts>
		else{
			printf("No FAT-16 partition found - Exiting!\n");
			return -1;
		}

 		read_file();
    382c:	000078c0 	call	78c <read_file>
    3830:	00000506 	br	3848 <main+0x130>

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
    3834:	010000b4 	movhi	r4,2
    3838:	2116a304 	addi	r4,r4,23180
    383c:	00045ec0 	call	45ec <puts>
			return -1;
    3840:	00bfffc4 	movi	r2,-1
    3844:	00006f06 	br	3a04 <main+0x2ec>
		}

 		read_file();
	}

	gameSem = OSSemCreate(0);
    3848:	0009883a 	mov	r4,zero
    384c:	001a8840 	call	1a884 <OSSemCreate>
    3850:	d0a82215 	stw	r2,-24440(gp)
	controllerSem = OSSemCreate(0);
    3854:	0009883a 	mov	r4,zero
    3858:	001a8840 	call	1a884 <OSSemCreate>
    385c:	d0a80b15 	stw	r2,-24532(gp)

	MailBox = OSMboxCreate((void *)0);
    3860:	0009883a 	mov	r4,zero
    3864:	00183500 	call	18350 <OSMboxCreate>
    3868:	d0a81015 	stw	r2,-24512(gp)
	MailBox2 = OSMboxCreate((void *)0);
    386c:	0009883a 	mov	r4,zero
    3870:	00183500 	call	18350 <OSMboxCreate>
    3874:	d0a80e15 	stw	r2,-24520(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    3878:	d8000015 	stw	zero,0(sp)
    387c:	0009883a 	mov	r4,zero
    3880:	000b883a 	mov	r5,zero
    3884:	01804fc4 	movi	r6,319
    3888:	01c03bc4 	movi	r7,239
    388c:	0003a180 	call	3a18 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    3890:	00803fc4 	movi	r2,255
    3894:	d8800015 	stw	r2,0(sp)
    3898:	010003c4 	movi	r4,15
    389c:	01400c84 	movi	r5,50
    38a0:	01800504 	movi	r6,20
    38a4:	01c01904 	movi	r7,100
    38a8:	0003a180 	call	3a18 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    38ac:	00803fc4 	movi	r2,255
    38b0:	d8800015 	stw	r2,0(sp)
    38b4:	01004b04 	movi	r4,300
    38b8:	01400c84 	movi	r5,50
    38bc:	01804c44 	movi	r6,305
    38c0:	01c01904 	movi	r7,100
    38c4:	0003a180 	call	3a18 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    38c8:	0081a5c4 	movi	r2,1687
    38cc:	d8800015 	stw	r2,0(sp)
    38d0:	0009883a 	mov	r4,zero
    38d4:	000b883a 	mov	r5,zero
    38d8:	01804fc4 	movi	r6,319
    38dc:	01c000c4 	movi	r7,3
    38e0:	0003a180 	call	3a18 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    38e4:	0081a5c4 	movi	r2,1687
    38e8:	d8800015 	stw	r2,0(sp)
    38ec:	0009883a 	mov	r4,zero
    38f0:	01403b04 	movi	r5,236
    38f4:	01804fc4 	movi	r6,319
    38f8:	01c03bc4 	movi	r7,239
    38fc:	0003a180 	call	3a18 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    3900:	01000034 	movhi	r4,0
    3904:	2100a004 	addi	r4,r4,640
    3908:	01400044 	movi	r5,1
    390c:	018000f4 	movhi	r6,3
    3910:	319f5104 	addi	r6,r6,32068
    3914:	01c002c4 	movi	r7,11
    3918:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    391c:	01000034 	movhi	r4,0
    3920:	2100a004 	addi	r4,r4,640
    3924:	01400084 	movi	r5,2
    3928:	01800134 	movhi	r6,4
    392c:	31b75404 	addi	r6,r6,-8880
    3930:	01c00304 	movi	r7,12
    3934:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    3938:	01000034 	movhi	r4,0
    393c:	21040d04 	addi	r4,r4,4148
    3940:	000b883a 	mov	r5,zero
    3944:	01800134 	movhi	r6,4
    3948:	31875604 	addi	r6,r6,7512
    394c:	01c00184 	movi	r7,6
    3950:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    3954:	01000034 	movhi	r4,0
    3958:	21066a04 	addi	r4,r4,6568
    395c:	000b883a 	mov	r5,zero
    3960:	018000f4 	movhi	r6,3
    3964:	31b04004 	addi	r6,r6,-16128
    3968:	01c001c4 	movi	r7,7
    396c:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    3970:	01000034 	movhi	r4,0
    3974:	21086604 	addi	r4,r4,8600
    3978:	000b883a 	mov	r5,zero
    397c:	01800134 	movhi	r6,4
    3980:	31a75204 	addi	r6,r6,-25272
    3984:	01c00204 	movi	r7,8
    3988:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(Highscores,(void*) 0, &Highscores_stk[TASK_STACKSIZE-1],Highscores_PRIORITY);
    398c:	01000034 	movhi	r4,0
    3990:	210b0b04 	addi	r4,r4,11308
    3994:	000b883a 	mov	r5,zero
    3998:	01800134 	movhi	r6,4
    399c:	31bf5504 	addi	r6,r6,-684
    39a0:	01c00344 	movi	r7,13
    39a4:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(newHighscores,(void*) 0, &newHighscores_stk[TASK_STACKSIZE-1],newHighscores_PRIORITY);
    39a8:	01000034 	movhi	r4,0
    39ac:	21097304 	addi	r4,r4,9676
    39b0:	000b883a 	mov	r5,zero
    39b4:	01800134 	movhi	r6,4
    39b8:	31af5304 	addi	r6,r6,-17076
    39bc:	01c00384 	movi	r7,14
    39c0:	001b81c0 	call	1b81c <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    39c4:	01000034 	movhi	r4,0
    39c8:	210b6604 	addi	r4,r4,11672
    39cc:	01400084 	movi	r5,2
    39d0:	018000f4 	movhi	r6,3
    39d4:	31975004 	addi	r6,r6,23872
    39d8:	01c00244 	movi	r7,9
    39dc:	001b81c0 	call	1b81c <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    39e0:	01000034 	movhi	r4,0
    39e4:	210ba104 	addi	r4,r4,11908
    39e8:	014000c4 	movi	r5,3
    39ec:	01800174 	movhi	r6,5
    39f0:	31b05a04 	addi	r6,r6,-16024
    39f4:	01c00284 	movi	r7,10
    39f8:	001b81c0 	call	1b81c <OSTaskCreate>
	OSStart();
    39fc:	00154b00 	call	154b0 <OSStart>
	return 0;
    3a00:	0005883a 	mov	r2,zero
}
    3a04:	e037883a 	mov	sp,fp
    3a08:	dfc00117 	ldw	ra,4(sp)
    3a0c:	df000017 	ldw	fp,0(sp)
    3a10:	dec00204 	addi	sp,sp,8
    3a14:	f800283a 	ret

00003a18 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    3a18:	defff604 	addi	sp,sp,-40
    3a1c:	df000915 	stw	fp,36(sp)
    3a20:	df000904 	addi	fp,sp,36
    3a24:	e13ffb15 	stw	r4,-20(fp)
    3a28:	e17ffc15 	stw	r5,-16(fp)
    3a2c:	e1bffd15 	stw	r6,-12(fp)
    3a30:	e1fffe15 	stw	r7,-8(fp)
    3a34:	e0800117 	ldw	r2,4(fp)
    3a38:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    3a3c:	00820034 	movhi	r2,2048
    3a40:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    3a44:	e0bffc17 	ldw	r2,-16(fp)
    3a48:	e0bff715 	stw	r2,-36(fp)
    3a4c:	00001806 	br	3ab0 <VGA_box+0x98>
	{
		col = x1;
    3a50:	e0bffb17 	ldw	r2,-20(fp)
    3a54:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    3a58:	00000f06 	br	3a98 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    3a5c:	e0bff717 	ldw	r2,-36(fp)
    3a60:	1006927a 	slli	r3,r2,9
    3a64:	e0bff817 	ldw	r2,-32(fp)
    3a68:	1885883a 	add	r2,r3,r2
    3a6c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    3a70:	e0bffa17 	ldw	r2,-24(fp)
    3a74:	1085883a 	add	r2,r2,r2
    3a78:	1007883a 	mov	r3,r2
    3a7c:	e0bff917 	ldw	r2,-28(fp)
    3a80:	10c5883a 	add	r2,r2,r3
    3a84:	e0ffff0b 	ldhu	r3,-4(fp)
    3a88:	10c0000d 	sth	r3,0(r2)
			++col;
    3a8c:	e0bff817 	ldw	r2,-32(fp)
    3a90:	10800044 	addi	r2,r2,1
    3a94:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    3a98:	e0bff817 	ldw	r2,-32(fp)
    3a9c:	e0fffd17 	ldw	r3,-12(fp)
    3aa0:	18bfee0e 	bge	r3,r2,3a5c <__alt_mem_Flash_flash_data+0xf4003a5c>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    3aa4:	e0bff717 	ldw	r2,-36(fp)
    3aa8:	10800044 	addi	r2,r2,1
    3aac:	e0bff715 	stw	r2,-36(fp)
    3ab0:	e0bff717 	ldw	r2,-36(fp)
    3ab4:	e0fffe17 	ldw	r3,-8(fp)
    3ab8:	18bfe50e 	bge	r3,r2,3a50 <__alt_mem_Flash_flash_data+0xf4003a50>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    3abc:	e037883a 	mov	sp,fp
    3ac0:	df000017 	ldw	fp,0(sp)
    3ac4:	dec00104 	addi	sp,sp,4
    3ac8:	f800283a 	ret

00003acc <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    3acc:	defffa04 	addi	sp,sp,-24
    3ad0:	df000515 	stw	fp,20(sp)
    3ad4:	df000504 	addi	fp,sp,20
    3ad8:	e13ffd15 	stw	r4,-12(fp)
    3adc:	e17ffe15 	stw	r5,-8(fp)
    3ae0:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    3ae4:	00824034 	movhi	r2,2304
    3ae8:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    3aec:	e0bffe17 	ldw	r2,-8(fp)
    3af0:	100691fa 	slli	r3,r2,7
    3af4:	e0bffd17 	ldw	r2,-12(fp)
    3af8:	1885883a 	add	r2,r3,r2
    3afc:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    3b00:	00000c06 	br	3b34 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    3b04:	e0bffb17 	ldw	r2,-20(fp)
    3b08:	e0fffc17 	ldw	r3,-16(fp)
    3b0c:	1885883a 	add	r2,r3,r2
    3b10:	e0ffff17 	ldw	r3,-4(fp)
    3b14:	18c00003 	ldbu	r3,0(r3)
    3b18:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    3b1c:	e0bfff17 	ldw	r2,-4(fp)
    3b20:	10800044 	addi	r2,r2,1
    3b24:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    3b28:	e0bffb17 	ldw	r2,-20(fp)
    3b2c:	10800044 	addi	r2,r2,1
    3b30:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    3b34:	e0bfff17 	ldw	r2,-4(fp)
    3b38:	10800003 	ldbu	r2,0(r2)
    3b3c:	10803fcc 	andi	r2,r2,255
    3b40:	1080201c 	xori	r2,r2,128
    3b44:	10bfe004 	addi	r2,r2,-128
    3b48:	103fee1e 	bne	r2,zero,3b04 <__alt_mem_Flash_flash_data+0xf4003b04>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    3b4c:	e037883a 	mov	sp,fp
    3b50:	df000017 	ldw	fp,0(sp)
    3b54:	dec00104 	addi	sp,sp,4
    3b58:	f800283a 	ret

00003b5c <draw_middenlijn>:

void draw_middenlijn(){
    3b5c:	defffc04 	addi	sp,sp,-16
    3b60:	dfc00315 	stw	ra,12(sp)
    3b64:	df000215 	stw	fp,8(sp)
    3b68:	df000204 	addi	fp,sp,8
	int i = 0;
    3b6c:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    3b70:	00000c06 	br	3ba4 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    3b74:	e0bfff17 	ldw	r2,-4(fp)
    3b78:	10c001c4 	addi	r3,r2,7
    3b7c:	0081a5c4 	movi	r2,1687
    3b80:	d8800015 	stw	r2,0(sp)
    3b84:	010027c4 	movi	r4,159
    3b88:	e17fff17 	ldw	r5,-4(fp)
    3b8c:	01802804 	movi	r6,160
    3b90:	180f883a 	mov	r7,r3
    3b94:	0003a180 	call	3a18 <VGA_box>
		i = i + 11;
    3b98:	e0bfff17 	ldw	r2,-4(fp)
    3b9c:	108002c4 	addi	r2,r2,11
    3ba0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    3ba4:	e0bfff17 	ldw	r2,-4(fp)
    3ba8:	10803c10 	cmplti	r2,r2,240
    3bac:	103ff11e 	bne	r2,zero,3b74 <__alt_mem_Flash_flash_data+0xf4003b74>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    3bb0:	e037883a 	mov	sp,fp
    3bb4:	dfc00117 	ldw	ra,4(sp)
    3bb8:	df000017 	ldw	fp,0(sp)
    3bbc:	dec00204 	addi	sp,sp,8
    3bc0:	f800283a 	ret

00003bc4 <del_middenlijn>:

void del_middenlijn(){
    3bc4:	defffd04 	addi	sp,sp,-12
    3bc8:	dfc00215 	stw	ra,8(sp)
    3bcc:	df000115 	stw	fp,4(sp)
    3bd0:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    3bd4:	d8000015 	stw	zero,0(sp)
    3bd8:	010027c4 	movi	r4,159
    3bdc:	01400104 	movi	r5,4
    3be0:	01802804 	movi	r6,160
    3be4:	01c03ac4 	movi	r7,235
    3be8:	0003a180 	call	3a18 <VGA_box>
}
    3bec:	e037883a 	mov	sp,fp
    3bf0:	dfc00117 	ldw	ra,4(sp)
    3bf4:	df000017 	ldw	fp,0(sp)
    3bf8:	dec00204 	addi	sp,sp,8
    3bfc:	f800283a 	ret

00003c00 <del_number>:

void del_number(int side){
    3c00:	defffc04 	addi	sp,sp,-16
    3c04:	dfc00315 	stw	ra,12(sp)
    3c08:	df000215 	stw	fp,8(sp)
    3c0c:	df000204 	addi	fp,sp,8
    3c10:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    3c14:	e0bfff17 	ldw	r2,-4(fp)
    3c18:	10800058 	cmpnei	r2,r2,1
    3c1c:	1000061e 	bne	r2,zero,3c38 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    3c20:	d8000015 	stw	zero,0(sp)
    3c24:	01001e04 	movi	r4,120
    3c28:	01400504 	movi	r5,20
    3c2c:	01802304 	movi	r6,140
    3c30:	01c00f04 	movi	r7,60
    3c34:	0003a180 	call	3a18 <VGA_box>
	}
	if(side == 2){
    3c38:	e0bfff17 	ldw	r2,-4(fp)
    3c3c:	10800098 	cmpnei	r2,r2,2
    3c40:	1000061e 	bne	r2,zero,3c5c <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    3c44:	d8000015 	stw	zero,0(sp)
    3c48:	01002d04 	movi	r4,180
    3c4c:	01400504 	movi	r5,20
    3c50:	01803204 	movi	r6,200
    3c54:	01c00f04 	movi	r7,60
    3c58:	0003a180 	call	3a18 <VGA_box>
	}
}
    3c5c:	e037883a 	mov	sp,fp
    3c60:	dfc00117 	ldw	ra,4(sp)
    3c64:	df000017 	ldw	fp,0(sp)
    3c68:	dec00204 	addi	sp,sp,8
    3c6c:	f800283a 	ret

00003c70 <deleteNummer>:

void deleteNummer(){
    3c70:	defffd04 	addi	sp,sp,-12
    3c74:	dfc00215 	stw	ra,8(sp)
    3c78:	df000115 	stw	fp,4(sp)
    3c7c:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    3c80:	d8000015 	stw	zero,0(sp)
    3c84:	01001e04 	movi	r4,120
    3c88:	01400504 	movi	r5,20
    3c8c:	01803204 	movi	r6,200
    3c90:	01c00f04 	movi	r7,60
    3c94:	0003a180 	call	3a18 <VGA_box>
}
    3c98:	e037883a 	mov	sp,fp
    3c9c:	dfc00117 	ldw	ra,4(sp)
    3ca0:	df000017 	ldw	fp,0(sp)
    3ca4:	dec00204 	addi	sp,sp,8
    3ca8:	f800283a 	ret

00003cac <draw_number>:

void draw_number(int nummer, int ID){
    3cac:	defffa04 	addi	sp,sp,-24
    3cb0:	dfc00515 	stw	ra,20(sp)
    3cb4:	df000415 	stw	fp,16(sp)
    3cb8:	df000404 	addi	fp,sp,16
    3cbc:	e13ffe15 	stw	r4,-8(fp)
    3cc0:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    3cc4:	e13fff17 	ldw	r4,-4(fp)
    3cc8:	00043200 	call	4320 <checkIDScore>
    3ccc:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    3cd0:	e0bffe17 	ldw	r2,-8(fp)
    3cd4:	10800058 	cmpnei	r2,r2,1
    3cd8:	10000b1e 	bne	r2,zero,3d08 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    3cdc:	e0bffd17 	ldw	r2,-12(fp)
    3ce0:	11000244 	addi	r4,r2,9
    3ce4:	e0bffd17 	ldw	r2,-12(fp)
    3ce8:	10c00304 	addi	r3,r2,12
    3cec:	00bfffc4 	movi	r2,-1
    3cf0:	d8800015 	stw	r2,0(sp)
    3cf4:	01400504 	movi	r5,20
    3cf8:	180d883a 	mov	r6,r3
    3cfc:	01c00f04 	movi	r7,60
    3d00:	0003a180 	call	3a18 <VGA_box>
    3d04:	00018106 	br	430c <draw_number+0x660>
	}else if(nummer == 2){
    3d08:	e0bffe17 	ldw	r2,-8(fp)
    3d0c:	10800098 	cmpnei	r2,r2,2
    3d10:	10002f1e 	bne	r2,zero,3dd0 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3d14:	e0bffd17 	ldw	r2,-12(fp)
    3d18:	10c00504 	addi	r3,r2,20
    3d1c:	00bfffc4 	movi	r2,-1
    3d20:	d8800015 	stw	r2,0(sp)
    3d24:	e13ffd17 	ldw	r4,-12(fp)
    3d28:	01400504 	movi	r5,20
    3d2c:	180d883a 	mov	r6,r3
    3d30:	01c00584 	movi	r7,22
    3d34:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    3d38:	e0bffd17 	ldw	r2,-12(fp)
    3d3c:	11000484 	addi	r4,r2,18
    3d40:	e0bffd17 	ldw	r2,-12(fp)
    3d44:	10c00504 	addi	r3,r2,20
    3d48:	00bfffc4 	movi	r2,-1
    3d4c:	d8800015 	stw	r2,0(sp)
    3d50:	01400584 	movi	r5,22
    3d54:	180d883a 	mov	r6,r3
    3d58:	01c00984 	movi	r7,38
    3d5c:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3d60:	e0bffd17 	ldw	r2,-12(fp)
    3d64:	10c00504 	addi	r3,r2,20
    3d68:	00bfffc4 	movi	r2,-1
    3d6c:	d8800015 	stw	r2,0(sp)
    3d70:	e13ffd17 	ldw	r4,-12(fp)
    3d74:	01400984 	movi	r5,38
    3d78:	180d883a 	mov	r6,r3
    3d7c:	01c00a04 	movi	r7,40
    3d80:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    3d84:	e0bffd17 	ldw	r2,-12(fp)
    3d88:	10c00084 	addi	r3,r2,2
    3d8c:	00bfffc4 	movi	r2,-1
    3d90:	d8800015 	stw	r2,0(sp)
    3d94:	e13ffd17 	ldw	r4,-12(fp)
    3d98:	01400a04 	movi	r5,40
    3d9c:	180d883a 	mov	r6,r3
    3da0:	01c00e84 	movi	r7,58
    3da4:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3da8:	e0bffd17 	ldw	r2,-12(fp)
    3dac:	10c00504 	addi	r3,r2,20
    3db0:	00bfffc4 	movi	r2,-1
    3db4:	d8800015 	stw	r2,0(sp)
    3db8:	e13ffd17 	ldw	r4,-12(fp)
    3dbc:	01400e84 	movi	r5,58
    3dc0:	180d883a 	mov	r6,r3
    3dc4:	01c00f04 	movi	r7,60
    3dc8:	0003a180 	call	3a18 <VGA_box>
    3dcc:	00014f06 	br	430c <draw_number+0x660>
	}else if(nummer == 3){
    3dd0:	e0bffe17 	ldw	r2,-8(fp)
    3dd4:	108000d8 	cmpnei	r2,r2,3
    3dd8:	1000261e 	bne	r2,zero,3e74 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3ddc:	e0bffd17 	ldw	r2,-12(fp)
    3de0:	10c00504 	addi	r3,r2,20
    3de4:	00bfffc4 	movi	r2,-1
    3de8:	d8800015 	stw	r2,0(sp)
    3dec:	e13ffd17 	ldw	r4,-12(fp)
    3df0:	01400504 	movi	r5,20
    3df4:	180d883a 	mov	r6,r3
    3df8:	01c00584 	movi	r7,22
    3dfc:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    3e00:	e0bffd17 	ldw	r2,-12(fp)
    3e04:	11000484 	addi	r4,r2,18
    3e08:	e0bffd17 	ldw	r2,-12(fp)
    3e0c:	10c00504 	addi	r3,r2,20
    3e10:	00bfffc4 	movi	r2,-1
    3e14:	d8800015 	stw	r2,0(sp)
    3e18:	01400584 	movi	r5,22
    3e1c:	180d883a 	mov	r6,r3
    3e20:	01c00f04 	movi	r7,60
    3e24:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    3e28:	e0bffd17 	ldw	r2,-12(fp)
    3e2c:	10c00504 	addi	r3,r2,20
    3e30:	00bfffc4 	movi	r2,-1
    3e34:	d8800015 	stw	r2,0(sp)
    3e38:	e13ffd17 	ldw	r4,-12(fp)
    3e3c:	014009c4 	movi	r5,39
    3e40:	180d883a 	mov	r6,r3
    3e44:	01c00a44 	movi	r7,41
    3e48:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3e4c:	e0bffd17 	ldw	r2,-12(fp)
    3e50:	10c00504 	addi	r3,r2,20
    3e54:	00bfffc4 	movi	r2,-1
    3e58:	d8800015 	stw	r2,0(sp)
    3e5c:	e13ffd17 	ldw	r4,-12(fp)
    3e60:	01400e84 	movi	r5,58
    3e64:	180d883a 	mov	r6,r3
    3e68:	01c00f04 	movi	r7,60
    3e6c:	0003a180 	call	3a18 <VGA_box>
    3e70:	00012606 	br	430c <draw_number+0x660>
	}else if(nummer == 4){
    3e74:	e0bffe17 	ldw	r2,-8(fp)
    3e78:	10800118 	cmpnei	r2,r2,4
    3e7c:	10001d1e 	bne	r2,zero,3ef4 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    3e80:	e0bffd17 	ldw	r2,-12(fp)
    3e84:	10c00084 	addi	r3,r2,2
    3e88:	00bfffc4 	movi	r2,-1
    3e8c:	d8800015 	stw	r2,0(sp)
    3e90:	e13ffd17 	ldw	r4,-12(fp)
    3e94:	01400504 	movi	r5,20
    3e98:	180d883a 	mov	r6,r3
    3e9c:	01c00a04 	movi	r7,40
    3ea0:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3ea4:	e0bffd17 	ldw	r2,-12(fp)
    3ea8:	10c00504 	addi	r3,r2,20
    3eac:	00bfffc4 	movi	r2,-1
    3eb0:	d8800015 	stw	r2,0(sp)
    3eb4:	e13ffd17 	ldw	r4,-12(fp)
    3eb8:	014009c4 	movi	r5,39
    3ebc:	180d883a 	mov	r6,r3
    3ec0:	01c00a44 	movi	r7,41
    3ec4:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
    3ecc:	11000484 	addi	r4,r2,18
    3ed0:	e0bffd17 	ldw	r2,-12(fp)
    3ed4:	10c00504 	addi	r3,r2,20
    3ed8:	00bfffc4 	movi	r2,-1
    3edc:	d8800015 	stw	r2,0(sp)
    3ee0:	01400504 	movi	r5,20
    3ee4:	180d883a 	mov	r6,r3
    3ee8:	01c00f04 	movi	r7,60
    3eec:	0003a180 	call	3a18 <VGA_box>
    3ef0:	00010606 	br	430c <draw_number+0x660>
	}else if(nummer == 5){
    3ef4:	e0bffe17 	ldw	r2,-8(fp)
    3ef8:	10800158 	cmpnei	r2,r2,5
    3efc:	10002f1e 	bne	r2,zero,3fbc <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3f00:	e0bffd17 	ldw	r2,-12(fp)
    3f04:	10c00504 	addi	r3,r2,20
    3f08:	00bfffc4 	movi	r2,-1
    3f0c:	d8800015 	stw	r2,0(sp)
    3f10:	e13ffd17 	ldw	r4,-12(fp)
    3f14:	01400504 	movi	r5,20
    3f18:	180d883a 	mov	r6,r3
    3f1c:	01c00584 	movi	r7,22
    3f20:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    3f24:	e0bffd17 	ldw	r2,-12(fp)
    3f28:	10c00084 	addi	r3,r2,2
    3f2c:	00bfffc4 	movi	r2,-1
    3f30:	d8800015 	stw	r2,0(sp)
    3f34:	e13ffd17 	ldw	r4,-12(fp)
    3f38:	01400584 	movi	r5,22
    3f3c:	180d883a 	mov	r6,r3
    3f40:	01c00984 	movi	r7,38
    3f44:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3f48:	e0bffd17 	ldw	r2,-12(fp)
    3f4c:	10c00504 	addi	r3,r2,20
    3f50:	00bfffc4 	movi	r2,-1
    3f54:	d8800015 	stw	r2,0(sp)
    3f58:	e13ffd17 	ldw	r4,-12(fp)
    3f5c:	01400984 	movi	r5,38
    3f60:	180d883a 	mov	r6,r3
    3f64:	01c00a04 	movi	r7,40
    3f68:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    3f6c:	e0bffd17 	ldw	r2,-12(fp)
    3f70:	11000484 	addi	r4,r2,18
    3f74:	e0bffd17 	ldw	r2,-12(fp)
    3f78:	10c00504 	addi	r3,r2,20
    3f7c:	00bfffc4 	movi	r2,-1
    3f80:	d8800015 	stw	r2,0(sp)
    3f84:	01400a04 	movi	r5,40
    3f88:	180d883a 	mov	r6,r3
    3f8c:	01c00e84 	movi	r7,58
    3f90:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3f94:	e0bffd17 	ldw	r2,-12(fp)
    3f98:	10c00504 	addi	r3,r2,20
    3f9c:	00bfffc4 	movi	r2,-1
    3fa0:	d8800015 	stw	r2,0(sp)
    3fa4:	e13ffd17 	ldw	r4,-12(fp)
    3fa8:	01400e84 	movi	r5,58
    3fac:	180d883a 	mov	r6,r3
    3fb0:	01c00f04 	movi	r7,60
    3fb4:	0003a180 	call	3a18 <VGA_box>
    3fb8:	0000d406 	br	430c <draw_number+0x660>
	}else if(nummer == 6){
    3fbc:	e0bffe17 	ldw	r2,-8(fp)
    3fc0:	10800198 	cmpnei	r2,r2,6
    3fc4:	10002f1e 	bne	r2,zero,4084 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3fc8:	e0bffd17 	ldw	r2,-12(fp)
    3fcc:	10c00084 	addi	r3,r2,2
    3fd0:	00bfffc4 	movi	r2,-1
    3fd4:	d8800015 	stw	r2,0(sp)
    3fd8:	e13ffd17 	ldw	r4,-12(fp)
    3fdc:	01400504 	movi	r5,20
    3fe0:	180d883a 	mov	r6,r3
    3fe4:	01c00f04 	movi	r7,60
    3fe8:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3fec:	e0bffd17 	ldw	r2,-12(fp)
    3ff0:	10c00504 	addi	r3,r2,20
    3ff4:	00bfffc4 	movi	r2,-1
    3ff8:	d8800015 	stw	r2,0(sp)
    3ffc:	e13ffd17 	ldw	r4,-12(fp)
    4000:	01400504 	movi	r5,20
    4004:	180d883a 	mov	r6,r3
    4008:	01c00584 	movi	r7,22
    400c:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    4010:	e0bffd17 	ldw	r2,-12(fp)
    4014:	10c00504 	addi	r3,r2,20
    4018:	00bfffc4 	movi	r2,-1
    401c:	d8800015 	stw	r2,0(sp)
    4020:	e13ffd17 	ldw	r4,-12(fp)
    4024:	01400e84 	movi	r5,58
    4028:	180d883a 	mov	r6,r3
    402c:	01c00f04 	movi	r7,60
    4030:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    4034:	e0bffd17 	ldw	r2,-12(fp)
    4038:	11000484 	addi	r4,r2,18
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	10c00504 	addi	r3,r2,20
    4044:	00bfffc4 	movi	r2,-1
    4048:	d8800015 	stw	r2,0(sp)
    404c:	01400a04 	movi	r5,40
    4050:	180d883a 	mov	r6,r3
    4054:	01c00e84 	movi	r7,58
    4058:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    405c:	e0bffd17 	ldw	r2,-12(fp)
    4060:	10c00504 	addi	r3,r2,20
    4064:	00bfffc4 	movi	r2,-1
    4068:	d8800015 	stw	r2,0(sp)
    406c:	e13ffd17 	ldw	r4,-12(fp)
    4070:	014009c4 	movi	r5,39
    4074:	180d883a 	mov	r6,r3
    4078:	01c00a44 	movi	r7,41
    407c:	0003a180 	call	3a18 <VGA_box>
    4080:	0000a206 	br	430c <draw_number+0x660>
	}else if(nummer == 7){
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	108001d8 	cmpnei	r2,r2,7
    408c:	1000141e 	bne	r2,zero,40e0 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	11000484 	addi	r4,r2,18
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10c00504 	addi	r3,r2,20
    40a0:	00bfffc4 	movi	r2,-1
    40a4:	d8800015 	stw	r2,0(sp)
    40a8:	01400504 	movi	r5,20
    40ac:	180d883a 	mov	r6,r3
    40b0:	01c00f04 	movi	r7,60
    40b4:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    40b8:	e0bffd17 	ldw	r2,-12(fp)
    40bc:	10c00504 	addi	r3,r2,20
    40c0:	00bfffc4 	movi	r2,-1
    40c4:	d8800015 	stw	r2,0(sp)
    40c8:	e13ffd17 	ldw	r4,-12(fp)
    40cc:	01400504 	movi	r5,20
    40d0:	180d883a 	mov	r6,r3
    40d4:	01c00584 	movi	r7,22
    40d8:	0003a180 	call	3a18 <VGA_box>
    40dc:	00008b06 	br	430c <draw_number+0x660>
	}else if(nummer == 8){
    40e0:	e0bffe17 	ldw	r2,-8(fp)
    40e4:	10800218 	cmpnei	r2,r2,8
    40e8:	10002f1e 	bne	r2,zero,41a8 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    40ec:	e0bffd17 	ldw	r2,-12(fp)
    40f0:	11000484 	addi	r4,r2,18
    40f4:	e0bffd17 	ldw	r2,-12(fp)
    40f8:	10c00504 	addi	r3,r2,20
    40fc:	00bfffc4 	movi	r2,-1
    4100:	d8800015 	stw	r2,0(sp)
    4104:	01400504 	movi	r5,20
    4108:	180d883a 	mov	r6,r3
    410c:	01c00f04 	movi	r7,60
    4110:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    4114:	e0bffd17 	ldw	r2,-12(fp)
    4118:	10c00084 	addi	r3,r2,2
    411c:	00bfffc4 	movi	r2,-1
    4120:	d8800015 	stw	r2,0(sp)
    4124:	e13ffd17 	ldw	r4,-12(fp)
    4128:	01400504 	movi	r5,20
    412c:	180d883a 	mov	r6,r3
    4130:	01c00f04 	movi	r7,60
    4134:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    4138:	e0bffd17 	ldw	r2,-12(fp)
    413c:	10c00504 	addi	r3,r2,20
    4140:	00bfffc4 	movi	r2,-1
    4144:	d8800015 	stw	r2,0(sp)
    4148:	e13ffd17 	ldw	r4,-12(fp)
    414c:	01400504 	movi	r5,20
    4150:	180d883a 	mov	r6,r3
    4154:	01c00584 	movi	r7,22
    4158:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    415c:	e0bffd17 	ldw	r2,-12(fp)
    4160:	10c00504 	addi	r3,r2,20
    4164:	00bfffc4 	movi	r2,-1
    4168:	d8800015 	stw	r2,0(sp)
    416c:	e13ffd17 	ldw	r4,-12(fp)
    4170:	014009c4 	movi	r5,39
    4174:	180d883a 	mov	r6,r3
    4178:	01c00a44 	movi	r7,41
    417c:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    4180:	e0bffd17 	ldw	r2,-12(fp)
    4184:	10c00504 	addi	r3,r2,20
    4188:	00bfffc4 	movi	r2,-1
    418c:	d8800015 	stw	r2,0(sp)
    4190:	e13ffd17 	ldw	r4,-12(fp)
    4194:	01400e84 	movi	r5,58
    4198:	180d883a 	mov	r6,r3
    419c:	01c00f04 	movi	r7,60
    41a0:	0003a180 	call	3a18 <VGA_box>
    41a4:	00005906 	br	430c <draw_number+0x660>
	}else if(nummer == 9){
    41a8:	e0bffe17 	ldw	r2,-8(fp)
    41ac:	10800258 	cmpnei	r2,r2,9
    41b0:	10002f1e 	bne	r2,zero,4270 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    41b4:	e0bffd17 	ldw	r2,-12(fp)
    41b8:	11000484 	addi	r4,r2,18
    41bc:	e0bffd17 	ldw	r2,-12(fp)
    41c0:	10c00504 	addi	r3,r2,20
    41c4:	00bfffc4 	movi	r2,-1
    41c8:	d8800015 	stw	r2,0(sp)
    41cc:	01400504 	movi	r5,20
    41d0:	180d883a 	mov	r6,r3
    41d4:	01c00f04 	movi	r7,60
    41d8:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    41dc:	e0bffd17 	ldw	r2,-12(fp)
    41e0:	10c00084 	addi	r3,r2,2
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	d8800015 	stw	r2,0(sp)
    41ec:	e13ffd17 	ldw	r4,-12(fp)
    41f0:	01400504 	movi	r5,20
    41f4:	180d883a 	mov	r6,r3
    41f8:	01c00a04 	movi	r7,40
    41fc:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    4200:	e0bffd17 	ldw	r2,-12(fp)
    4204:	10c00504 	addi	r3,r2,20
    4208:	00bfffc4 	movi	r2,-1
    420c:	d8800015 	stw	r2,0(sp)
    4210:	e13ffd17 	ldw	r4,-12(fp)
    4214:	01400504 	movi	r5,20
    4218:	180d883a 	mov	r6,r3
    421c:	01c00584 	movi	r7,22
    4220:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    4224:	e0bffd17 	ldw	r2,-12(fp)
    4228:	10c00504 	addi	r3,r2,20
    422c:	00bfffc4 	movi	r2,-1
    4230:	d8800015 	stw	r2,0(sp)
    4234:	e13ffd17 	ldw	r4,-12(fp)
    4238:	014009c4 	movi	r5,39
    423c:	180d883a 	mov	r6,r3
    4240:	01c00a44 	movi	r7,41
    4244:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    4248:	e0bffd17 	ldw	r2,-12(fp)
    424c:	10c00504 	addi	r3,r2,20
    4250:	00bfffc4 	movi	r2,-1
    4254:	d8800015 	stw	r2,0(sp)
    4258:	e13ffd17 	ldw	r4,-12(fp)
    425c:	01400e84 	movi	r5,58
    4260:	180d883a 	mov	r6,r3
    4264:	01c00f04 	movi	r7,60
    4268:	0003a180 	call	3a18 <VGA_box>
    426c:	00002706 	br	430c <draw_number+0x660>
	}else if(nummer == 0){
    4270:	e0bffe17 	ldw	r2,-8(fp)
    4274:	1000251e 	bne	r2,zero,430c <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    4278:	e0bffd17 	ldw	r2,-12(fp)
    427c:	11000484 	addi	r4,r2,18
    4280:	e0bffd17 	ldw	r2,-12(fp)
    4284:	10c00504 	addi	r3,r2,20
    4288:	00bfffc4 	movi	r2,-1
    428c:	d8800015 	stw	r2,0(sp)
    4290:	01400504 	movi	r5,20
    4294:	180d883a 	mov	r6,r3
    4298:	01c00f04 	movi	r7,60
    429c:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    42a0:	e0bffd17 	ldw	r2,-12(fp)
    42a4:	10c00084 	addi	r3,r2,2
    42a8:	00bfffc4 	movi	r2,-1
    42ac:	d8800015 	stw	r2,0(sp)
    42b0:	e13ffd17 	ldw	r4,-12(fp)
    42b4:	01400504 	movi	r5,20
    42b8:	180d883a 	mov	r6,r3
    42bc:	01c00f04 	movi	r7,60
    42c0:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    42c4:	e0bffd17 	ldw	r2,-12(fp)
    42c8:	10c00504 	addi	r3,r2,20
    42cc:	00bfffc4 	movi	r2,-1
    42d0:	d8800015 	stw	r2,0(sp)
    42d4:	e13ffd17 	ldw	r4,-12(fp)
    42d8:	01400504 	movi	r5,20
    42dc:	180d883a 	mov	r6,r3
    42e0:	01c00584 	movi	r7,22
    42e4:	0003a180 	call	3a18 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    42e8:	e0bffd17 	ldw	r2,-12(fp)
    42ec:	10c00504 	addi	r3,r2,20
    42f0:	00bfffc4 	movi	r2,-1
    42f4:	d8800015 	stw	r2,0(sp)
    42f8:	e13ffd17 	ldw	r4,-12(fp)
    42fc:	01400e84 	movi	r5,58
    4300:	180d883a 	mov	r6,r3
    4304:	01c00f04 	movi	r7,60
    4308:	0003a180 	call	3a18 <VGA_box>
	}
}
    430c:	e037883a 	mov	sp,fp
    4310:	dfc00117 	ldw	ra,4(sp)
    4314:	df000017 	ldw	fp,0(sp)
    4318:	dec00204 	addi	sp,sp,8
    431c:	f800283a 	ret

00004320 <checkIDScore>:

int checkIDScore(int ID){
    4320:	defffe04 	addi	sp,sp,-8
    4324:	df000115 	stw	fp,4(sp)
    4328:	df000104 	addi	fp,sp,4
    432c:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    4330:	e0bfff17 	ldw	r2,-4(fp)
    4334:	10800058 	cmpnei	r2,r2,1
    4338:	1000021e 	bne	r2,zero,4344 <checkIDScore+0x24>
		return 120;
    433c:	00801e04 	movi	r2,120
    4340:	00000b06 	br	4370 <checkIDScore+0x50>
	}else if(ID == 2){
    4344:	e0bfff17 	ldw	r2,-4(fp)
    4348:	10800098 	cmpnei	r2,r2,2
    434c:	1000021e 	bne	r2,zero,4358 <checkIDScore+0x38>
		return 150;
    4350:	00802584 	movi	r2,150
    4354:	00000606 	br	4370 <checkIDScore+0x50>
	}else if(ID == 3){
    4358:	e0bfff17 	ldw	r2,-4(fp)
    435c:	108000d8 	cmpnei	r2,r2,3
    4360:	1000021e 	bne	r2,zero,436c <checkIDScore+0x4c>
		return 180;
    4364:	00802d04 	movi	r2,180
    4368:	00000106 	br	4370 <checkIDScore+0x50>
	}
	
	return 0;
    436c:	0005883a 	mov	r2,zero
}
    4370:	e037883a 	mov	sp,fp
    4374:	df000017 	ldw	fp,0(sp)
    4378:	dec00104 	addi	sp,sp,4
    437c:	f800283a 	ret

00004380 <bzero>:
    4380:	28000426 	beq	r5,zero,4394 <bzero+0x14>
    4384:	214b883a 	add	r5,r4,r5
    4388:	20000005 	stb	zero,0(r4)
    438c:	21000044 	addi	r4,r4,1
    4390:	217ffd1e 	bne	r4,r5,4388 <__alt_mem_Flash_flash_data+0xf4004388>
    4394:	f800283a 	ret

00004398 <memset>:
    4398:	20c000cc 	andi	r3,r4,3
    439c:	2005883a 	mov	r2,r4
    43a0:	18004326 	beq	r3,zero,44b0 <memset+0x118>
    43a4:	31ffffc4 	addi	r7,r6,-1
    43a8:	30004026 	beq	r6,zero,44ac <memset+0x114>
    43ac:	2813883a 	mov	r9,r5
    43b0:	200d883a 	mov	r6,r4
    43b4:	2007883a 	mov	r3,r4
    43b8:	00000406 	br	43cc <memset+0x34>
    43bc:	3a3fffc4 	addi	r8,r7,-1
    43c0:	31800044 	addi	r6,r6,1
    43c4:	38003926 	beq	r7,zero,44ac <memset+0x114>
    43c8:	400f883a 	mov	r7,r8
    43cc:	18c00044 	addi	r3,r3,1
    43d0:	32400005 	stb	r9,0(r6)
    43d4:	1a0000cc 	andi	r8,r3,3
    43d8:	403ff81e 	bne	r8,zero,43bc <__alt_mem_Flash_flash_data+0xf40043bc>
    43dc:	010000c4 	movi	r4,3
    43e0:	21c02d2e 	bgeu	r4,r7,4498 <memset+0x100>
    43e4:	29803fcc 	andi	r6,r5,255
    43e8:	3008923a 	slli	r4,r6,8
    43ec:	218cb03a 	or	r6,r4,r6
    43f0:	3008943a 	slli	r4,r6,16
    43f4:	218cb03a 	or	r6,r4,r6
    43f8:	010003c4 	movi	r4,15
    43fc:	21c0182e 	bgeu	r4,r7,4460 <memset+0xc8>
    4400:	3b3ffc04 	addi	r12,r7,-16
    4404:	6018d13a 	srli	r12,r12,4
    4408:	1a000104 	addi	r8,r3,4
    440c:	1ac00204 	addi	r11,r3,8
    4410:	6008913a 	slli	r4,r12,4
    4414:	1a800304 	addi	r10,r3,12
    4418:	1813883a 	mov	r9,r3
    441c:	21000504 	addi	r4,r4,20
    4420:	1909883a 	add	r4,r3,r4
    4424:	49800015 	stw	r6,0(r9)
    4428:	41800015 	stw	r6,0(r8)
    442c:	59800015 	stw	r6,0(r11)
    4430:	51800015 	stw	r6,0(r10)
    4434:	42000404 	addi	r8,r8,16
    4438:	4a400404 	addi	r9,r9,16
    443c:	5ac00404 	addi	r11,r11,16
    4440:	52800404 	addi	r10,r10,16
    4444:	413ff71e 	bne	r8,r4,4424 <__alt_mem_Flash_flash_data+0xf4004424>
    4448:	63000044 	addi	r12,r12,1
    444c:	6018913a 	slli	r12,r12,4
    4450:	39c003cc 	andi	r7,r7,15
    4454:	010000c4 	movi	r4,3
    4458:	1b07883a 	add	r3,r3,r12
    445c:	21c00e2e 	bgeu	r4,r7,4498 <memset+0x100>
    4460:	1813883a 	mov	r9,r3
    4464:	3811883a 	mov	r8,r7
    4468:	010000c4 	movi	r4,3
    446c:	49800015 	stw	r6,0(r9)
    4470:	423fff04 	addi	r8,r8,-4
    4474:	4a400104 	addi	r9,r9,4
    4478:	223ffc36 	bltu	r4,r8,446c <__alt_mem_Flash_flash_data+0xf400446c>
    447c:	393fff04 	addi	r4,r7,-4
    4480:	2008d0ba 	srli	r4,r4,2
    4484:	39c000cc 	andi	r7,r7,3
    4488:	21000044 	addi	r4,r4,1
    448c:	2109883a 	add	r4,r4,r4
    4490:	2109883a 	add	r4,r4,r4
    4494:	1907883a 	add	r3,r3,r4
    4498:	38000426 	beq	r7,zero,44ac <memset+0x114>
    449c:	19cf883a 	add	r7,r3,r7
    44a0:	19400005 	stb	r5,0(r3)
    44a4:	18c00044 	addi	r3,r3,1
    44a8:	19fffd1e 	bne	r3,r7,44a0 <__alt_mem_Flash_flash_data+0xf40044a0>
    44ac:	f800283a 	ret
    44b0:	2007883a 	mov	r3,r4
    44b4:	300f883a 	mov	r7,r6
    44b8:	003fc806 	br	43dc <__alt_mem_Flash_flash_data+0xf40043dc>

000044bc <_printf_r>:
    44bc:	defffd04 	addi	sp,sp,-12
    44c0:	dfc00015 	stw	ra,0(sp)
    44c4:	d9800115 	stw	r6,4(sp)
    44c8:	d9c00215 	stw	r7,8(sp)
    44cc:	280d883a 	mov	r6,r5
    44d0:	21400217 	ldw	r5,8(r4)
    44d4:	d9c00104 	addi	r7,sp,4
    44d8:	00068040 	call	6804 <___vfprintf_internal_r>
    44dc:	dfc00017 	ldw	ra,0(sp)
    44e0:	dec00304 	addi	sp,sp,12
    44e4:	f800283a 	ret

000044e8 <printf>:
    44e8:	defffc04 	addi	sp,sp,-16
    44ec:	dfc00015 	stw	ra,0(sp)
    44f0:	d9400115 	stw	r5,4(sp)
    44f4:	d9800215 	stw	r6,8(sp)
    44f8:	d9c00315 	stw	r7,12(sp)
    44fc:	008000b4 	movhi	r2,2
    4500:	109fc904 	addi	r2,r2,32548
    4504:	10800017 	ldw	r2,0(r2)
    4508:	200b883a 	mov	r5,r4
    450c:	d9800104 	addi	r6,sp,4
    4510:	11000217 	ldw	r4,8(r2)
    4514:	00087540 	call	8754 <__vfprintf_internal>
    4518:	dfc00017 	ldw	ra,0(sp)
    451c:	dec00404 	addi	sp,sp,16
    4520:	f800283a 	ret

00004524 <_putchar_r>:
    4524:	21800217 	ldw	r6,8(r4)
    4528:	000d09c1 	jmpi	d09c <_putc_r>

0000452c <putchar>:
    452c:	008000b4 	movhi	r2,2
    4530:	109fc904 	addi	r2,r2,32548
    4534:	200b883a 	mov	r5,r4
    4538:	11000017 	ldw	r4,0(r2)
    453c:	21800217 	ldw	r6,8(r4)
    4540:	000d09c1 	jmpi	d09c <_putc_r>

00004544 <_puts_r>:
    4544:	defff604 	addi	sp,sp,-40
    4548:	dc000715 	stw	r16,28(sp)
    454c:	2021883a 	mov	r16,r4
    4550:	2809883a 	mov	r4,r5
    4554:	dc400815 	stw	r17,32(sp)
    4558:	dfc00915 	stw	ra,36(sp)
    455c:	2823883a 	mov	r17,r5
    4560:	00047dc0 	call	47dc <strlen>
    4564:	81400217 	ldw	r5,8(r16)
    4568:	11000044 	addi	r4,r2,1
    456c:	d8800115 	stw	r2,4(sp)
    4570:	008000b4 	movhi	r2,2
    4574:	2980030b 	ldhu	r6,12(r5)
    4578:	1096ad04 	addi	r2,r2,23220
    457c:	d8800215 	stw	r2,8(sp)
    4580:	00800044 	movi	r2,1
    4584:	d8800315 	stw	r2,12(sp)
    4588:	00800084 	movi	r2,2
    458c:	d8800515 	stw	r2,20(sp)
    4590:	dc400015 	stw	r17,0(sp)
    4594:	d9000615 	stw	r4,24(sp)
    4598:	dec00415 	stw	sp,16(sp)
    459c:	3088000c 	andi	r2,r6,8192
    45a0:	1000061e 	bne	r2,zero,45bc <_puts_r+0x78>
    45a4:	29001917 	ldw	r4,100(r5)
    45a8:	00b7ffc4 	movi	r2,-8193
    45ac:	31880014 	ori	r6,r6,8192
    45b0:	2084703a 	and	r2,r4,r2
    45b4:	2980030d 	sth	r6,12(r5)
    45b8:	28801915 	stw	r2,100(r5)
    45bc:	8009883a 	mov	r4,r16
    45c0:	d9800404 	addi	r6,sp,16
    45c4:	000acf80 	call	acf8 <__sfvwrite_r>
    45c8:	1000061e 	bne	r2,zero,45e4 <_puts_r+0xa0>
    45cc:	00800284 	movi	r2,10
    45d0:	dfc00917 	ldw	ra,36(sp)
    45d4:	dc400817 	ldw	r17,32(sp)
    45d8:	dc000717 	ldw	r16,28(sp)
    45dc:	dec00a04 	addi	sp,sp,40
    45e0:	f800283a 	ret
    45e4:	00bfffc4 	movi	r2,-1
    45e8:	003ff906 	br	45d0 <__alt_mem_Flash_flash_data+0xf40045d0>

000045ec <puts>:
    45ec:	008000b4 	movhi	r2,2
    45f0:	109fc904 	addi	r2,r2,32548
    45f4:	200b883a 	mov	r5,r4
    45f8:	11000017 	ldw	r4,0(r2)
    45fc:	00045441 	jmpi	4544 <_puts_r>

00004600 <_sprintf_r>:
    4600:	deffe404 	addi	sp,sp,-112
    4604:	2807883a 	mov	r3,r5
    4608:	dfc01a15 	stw	ra,104(sp)
    460c:	d9c01b15 	stw	r7,108(sp)
    4610:	00a00034 	movhi	r2,32768
    4614:	10bfffc4 	addi	r2,r2,-1
    4618:	02008204 	movi	r8,520
    461c:	d8800215 	stw	r2,8(sp)
    4620:	d8800515 	stw	r2,20(sp)
    4624:	d80b883a 	mov	r5,sp
    4628:	d9c01b04 	addi	r7,sp,108
    462c:	00bfffc4 	movi	r2,-1
    4630:	d8c00015 	stw	r3,0(sp)
    4634:	d8c00415 	stw	r3,16(sp)
    4638:	da00030d 	sth	r8,12(sp)
    463c:	d880038d 	sth	r2,14(sp)
    4640:	00048740 	call	4874 <___svfprintf_internal_r>
    4644:	d8c00017 	ldw	r3,0(sp)
    4648:	18000005 	stb	zero,0(r3)
    464c:	dfc01a17 	ldw	ra,104(sp)
    4650:	dec01c04 	addi	sp,sp,112
    4654:	f800283a 	ret

00004658 <sprintf>:
    4658:	deffe304 	addi	sp,sp,-116
    465c:	2007883a 	mov	r3,r4
    4660:	dfc01a15 	stw	ra,104(sp)
    4664:	d9801b15 	stw	r6,108(sp)
    4668:	d9c01c15 	stw	r7,112(sp)
    466c:	010000b4 	movhi	r4,2
    4670:	211fc904 	addi	r4,r4,32548
    4674:	21000017 	ldw	r4,0(r4)
    4678:	00a00034 	movhi	r2,32768
    467c:	10bfffc4 	addi	r2,r2,-1
    4680:	280d883a 	mov	r6,r5
    4684:	02008204 	movi	r8,520
    4688:	d8800215 	stw	r2,8(sp)
    468c:	d8800515 	stw	r2,20(sp)
    4690:	d80b883a 	mov	r5,sp
    4694:	d9c01b04 	addi	r7,sp,108
    4698:	00bfffc4 	movi	r2,-1
    469c:	d8c00015 	stw	r3,0(sp)
    46a0:	d8c00415 	stw	r3,16(sp)
    46a4:	da00030d 	sth	r8,12(sp)
    46a8:	d880038d 	sth	r2,14(sp)
    46ac:	00048740 	call	4874 <___svfprintf_internal_r>
    46b0:	d8c00017 	ldw	r3,0(sp)
    46b4:	18000005 	stb	zero,0(r3)
    46b8:	dfc01a17 	ldw	ra,104(sp)
    46bc:	dec01d04 	addi	sp,sp,116
    46c0:	f800283a 	ret

000046c4 <strcat>:
    46c4:	defffe04 	addi	sp,sp,-8
    46c8:	dc000015 	stw	r16,0(sp)
    46cc:	dfc00115 	stw	ra,4(sp)
    46d0:	208000cc 	andi	r2,r4,3
    46d4:	2021883a 	mov	r16,r4
    46d8:	1000111e 	bne	r2,zero,4720 <strcat+0x5c>
    46dc:	20800017 	ldw	r2,0(r4)
    46e0:	027fbff4 	movhi	r9,65279
    46e4:	4a7fbfc4 	addi	r9,r9,-257
    46e8:	0086303a 	nor	r3,zero,r2
    46ec:	02202074 	movhi	r8,32897
    46f0:	1245883a 	add	r2,r2,r9
    46f4:	42202004 	addi	r8,r8,-32640
    46f8:	10c4703a 	and	r2,r2,r3
    46fc:	1204703a 	and	r2,r2,r8
    4700:	1000071e 	bne	r2,zero,4720 <strcat+0x5c>
    4704:	21000104 	addi	r4,r4,4
    4708:	21800017 	ldw	r6,0(r4)
    470c:	324f883a 	add	r7,r6,r9
    4710:	018c303a 	nor	r6,zero,r6
    4714:	398c703a 	and	r6,r7,r6
    4718:	320c703a 	and	r6,r6,r8
    471c:	303ff926 	beq	r6,zero,4704 <__alt_mem_Flash_flash_data+0xf4004704>
    4720:	20800007 	ldb	r2,0(r4)
    4724:	10000326 	beq	r2,zero,4734 <strcat+0x70>
    4728:	21000044 	addi	r4,r4,1
    472c:	21800007 	ldb	r6,0(r4)
    4730:	303ffd1e 	bne	r6,zero,4728 <__alt_mem_Flash_flash_data+0xf4004728>
    4734:	000474c0 	call	474c <strcpy>
    4738:	8005883a 	mov	r2,r16
    473c:	dfc00117 	ldw	ra,4(sp)
    4740:	dc000017 	ldw	r16,0(sp)
    4744:	dec00204 	addi	sp,sp,8
    4748:	f800283a 	ret

0000474c <strcpy>:
    474c:	2906b03a 	or	r3,r5,r4
    4750:	18c000cc 	andi	r3,r3,3
    4754:	2005883a 	mov	r2,r4
    4758:	1800161e 	bne	r3,zero,47b4 <strcpy+0x68>
    475c:	29c00017 	ldw	r7,0(r5)
    4760:	02ffbff4 	movhi	r11,65279
    4764:	5affbfc4 	addi	r11,r11,-257
    4768:	02a02074 	movhi	r10,32897
    476c:	01c8303a 	nor	r4,zero,r7
    4770:	3ac7883a 	add	r3,r7,r11
    4774:	52a02004 	addi	r10,r10,-32640
    4778:	20c6703a 	and	r3,r4,r3
    477c:	1a86703a 	and	r3,r3,r10
    4780:	18000c1e 	bne	r3,zero,47b4 <strcpy+0x68>
    4784:	1011883a 	mov	r8,r2
    4788:	41c00015 	stw	r7,0(r8)
    478c:	29400104 	addi	r5,r5,4
    4790:	29c00017 	ldw	r7,0(r5)
    4794:	41800104 	addi	r6,r8,4
    4798:	3011883a 	mov	r8,r6
    479c:	01d2303a 	nor	r9,zero,r7
    47a0:	3ac7883a 	add	r3,r7,r11
    47a4:	48c6703a 	and	r3,r9,r3
    47a8:	1a86703a 	and	r3,r3,r10
    47ac:	183ff626 	beq	r3,zero,4788 <__alt_mem_Flash_flash_data+0xf4004788>
    47b0:	00000106 	br	47b8 <strcpy+0x6c>
    47b4:	100d883a 	mov	r6,r2
    47b8:	28c00003 	ldbu	r3,0(r5)
    47bc:	31800044 	addi	r6,r6,1
    47c0:	29400044 	addi	r5,r5,1
    47c4:	30ffffc5 	stb	r3,-1(r6)
    47c8:	18c03fcc 	andi	r3,r3,255
    47cc:	18c0201c 	xori	r3,r3,128
    47d0:	18ffe004 	addi	r3,r3,-128
    47d4:	183ff81e 	bne	r3,zero,47b8 <__alt_mem_Flash_flash_data+0xf40047b8>
    47d8:	f800283a 	ret

000047dc <strlen>:
    47dc:	208000cc 	andi	r2,r4,3
    47e0:	10002026 	beq	r2,zero,4864 <strlen+0x88>
    47e4:	20800007 	ldb	r2,0(r4)
    47e8:	10002026 	beq	r2,zero,486c <strlen+0x90>
    47ec:	2005883a 	mov	r2,r4
    47f0:	00000206 	br	47fc <strlen+0x20>
    47f4:	10c00007 	ldb	r3,0(r2)
    47f8:	18001826 	beq	r3,zero,485c <strlen+0x80>
    47fc:	10800044 	addi	r2,r2,1
    4800:	10c000cc 	andi	r3,r2,3
    4804:	183ffb1e 	bne	r3,zero,47f4 <__alt_mem_Flash_flash_data+0xf40047f4>
    4808:	10c00017 	ldw	r3,0(r2)
    480c:	01ffbff4 	movhi	r7,65279
    4810:	39ffbfc4 	addi	r7,r7,-257
    4814:	00ca303a 	nor	r5,zero,r3
    4818:	01a02074 	movhi	r6,32897
    481c:	19c7883a 	add	r3,r3,r7
    4820:	31a02004 	addi	r6,r6,-32640
    4824:	1946703a 	and	r3,r3,r5
    4828:	1986703a 	and	r3,r3,r6
    482c:	1800091e 	bne	r3,zero,4854 <strlen+0x78>
    4830:	10800104 	addi	r2,r2,4
    4834:	10c00017 	ldw	r3,0(r2)
    4838:	19cb883a 	add	r5,r3,r7
    483c:	00c6303a 	nor	r3,zero,r3
    4840:	28c6703a 	and	r3,r5,r3
    4844:	1986703a 	and	r3,r3,r6
    4848:	183ff926 	beq	r3,zero,4830 <__alt_mem_Flash_flash_data+0xf4004830>
    484c:	00000106 	br	4854 <strlen+0x78>
    4850:	10800044 	addi	r2,r2,1
    4854:	10c00007 	ldb	r3,0(r2)
    4858:	183ffd1e 	bne	r3,zero,4850 <__alt_mem_Flash_flash_data+0xf4004850>
    485c:	1105c83a 	sub	r2,r2,r4
    4860:	f800283a 	ret
    4864:	2005883a 	mov	r2,r4
    4868:	003fe706 	br	4808 <__alt_mem_Flash_flash_data+0xf4004808>
    486c:	0005883a 	mov	r2,zero
    4870:	f800283a 	ret

00004874 <___svfprintf_internal_r>:
    4874:	deffb504 	addi	sp,sp,-300
    4878:	dfc04a15 	stw	ra,296(sp)
    487c:	ddc04815 	stw	r23,288(sp)
    4880:	d9002f15 	stw	r4,188(sp)
    4884:	282f883a 	mov	r23,r5
    4888:	d9802915 	stw	r6,164(sp)
    488c:	d9c02d15 	stw	r7,180(sp)
    4890:	df004915 	stw	fp,292(sp)
    4894:	dd804715 	stw	r22,284(sp)
    4898:	dd404615 	stw	r21,280(sp)
    489c:	dd004515 	stw	r20,276(sp)
    48a0:	dcc04415 	stw	r19,272(sp)
    48a4:	dc804315 	stw	r18,268(sp)
    48a8:	dc404215 	stw	r17,264(sp)
    48ac:	dc004115 	stw	r16,260(sp)
    48b0:	000b3ec0 	call	b3ec <_localeconv_r>
    48b4:	10800017 	ldw	r2,0(r2)
    48b8:	1009883a 	mov	r4,r2
    48bc:	d8803515 	stw	r2,212(sp)
    48c0:	00047dc0 	call	47dc <strlen>
    48c4:	d8803915 	stw	r2,228(sp)
    48c8:	b880030b 	ldhu	r2,12(r23)
    48cc:	1080200c 	andi	r2,r2,128
    48d0:	10000226 	beq	r2,zero,48dc <___svfprintf_internal_r+0x68>
    48d4:	b8800417 	ldw	r2,16(r23)
    48d8:	10065f26 	beq	r2,zero,6258 <___svfprintf_internal_r+0x19e4>
    48dc:	db001dc4 	addi	r12,sp,119
    48e0:	dd801e04 	addi	r22,sp,120
    48e4:	d8800404 	addi	r2,sp,16
    48e8:	050000b4 	movhi	r20,2
    48ec:	b317c83a 	sub	r11,r22,r12
    48f0:	a516be84 	addi	r20,r20,23290
    48f4:	db002815 	stw	r12,160(sp)
    48f8:	d8801e15 	stw	r2,120(sp)
    48fc:	d8002015 	stw	zero,128(sp)
    4900:	d8001f15 	stw	zero,124(sp)
    4904:	d8003315 	stw	zero,204(sp)
    4908:	d8003715 	stw	zero,220(sp)
    490c:	d8003815 	stw	zero,224(sp)
    4910:	1011883a 	mov	r8,r2
    4914:	d8003b15 	stw	zero,236(sp)
    4918:	d8003a15 	stw	zero,232(sp)
    491c:	d8003015 	stw	zero,192(sp)
    4920:	dac03d15 	stw	r11,244(sp)
    4924:	db002917 	ldw	r12,164(sp)
    4928:	60800007 	ldb	r2,0(r12)
    492c:	1000ab26 	beq	r2,zero,4bdc <___svfprintf_internal_r+0x368>
    4930:	00c00944 	movi	r3,37
    4934:	10c0a926 	beq	r2,r3,4bdc <___svfprintf_internal_r+0x368>
    4938:	6021883a 	mov	r16,r12
    493c:	00000106 	br	4944 <___svfprintf_internal_r+0xd0>
    4940:	10c08426 	beq	r2,r3,4b54 <___svfprintf_internal_r+0x2e0>
    4944:	84000044 	addi	r16,r16,1
    4948:	80800007 	ldb	r2,0(r16)
    494c:	103ffc1e 	bne	r2,zero,4940 <__alt_mem_Flash_flash_data+0xf4004940>
    4950:	dac02917 	ldw	r11,164(sp)
    4954:	82e3c83a 	sub	r17,r16,r11
    4958:	88000f26 	beq	r17,zero,4998 <___svfprintf_internal_r+0x124>
    495c:	d8c02017 	ldw	r3,128(sp)
    4960:	d8801f17 	ldw	r2,124(sp)
    4964:	dac02917 	ldw	r11,164(sp)
    4968:	1c47883a 	add	r3,r3,r17
    496c:	10800044 	addi	r2,r2,1
    4970:	d8c02015 	stw	r3,128(sp)
    4974:	42c00015 	stw	r11,0(r8)
    4978:	44400115 	stw	r17,4(r8)
    497c:	d8801f15 	stw	r2,124(sp)
    4980:	00c001c4 	movi	r3,7
    4984:	18807616 	blt	r3,r2,4b60 <___svfprintf_internal_r+0x2ec>
    4988:	42000204 	addi	r8,r8,8
    498c:	db003017 	ldw	r12,192(sp)
    4990:	6459883a 	add	r12,r12,r17
    4994:	db003015 	stw	r12,192(sp)
    4998:	80800007 	ldb	r2,0(r16)
    499c:	10007726 	beq	r2,zero,4b7c <___svfprintf_internal_r+0x308>
    49a0:	80800044 	addi	r2,r16,1
    49a4:	84000047 	ldb	r16,1(r16)
    49a8:	d8002785 	stb	zero,158(sp)
    49ac:	000d883a 	mov	r6,zero
    49b0:	027fffc4 	movi	r9,-1
    49b4:	d8002e15 	stw	zero,184(sp)
    49b8:	0023883a 	mov	r17,zero
    49bc:	01001604 	movi	r4,88
    49c0:	01400244 	movi	r5,9
    49c4:	02800a84 	movi	r10,42
    49c8:	01c01b04 	movi	r7,108
    49cc:	10c00044 	addi	r3,r2,1
    49d0:	80bff804 	addi	r2,r16,-32
    49d4:	2082e636 	bltu	r4,r2,5570 <___svfprintf_internal_r+0xcfc>
    49d8:	100490ba 	slli	r2,r2,2
    49dc:	02c00034 	movhi	r11,0
    49e0:	5ad27c04 	addi	r11,r11,18928
    49e4:	12c5883a 	add	r2,r2,r11
    49e8:	10800017 	ldw	r2,0(r2)
    49ec:	1000683a 	jmp	r2
    49f0:	00005350 	cmplti	zero,zero,333
    49f4:	00005570 	cmpltui	zero,zero,341
    49f8:	00005570 	cmpltui	zero,zero,341
    49fc:	00005370 	cmpltui	zero,zero,333
    4a00:	00005570 	cmpltui	zero,zero,341
    4a04:	00005570 	cmpltui	zero,zero,341
    4a08:	00005570 	cmpltui	zero,zero,341
    4a0c:	00005570 	cmpltui	zero,zero,341
    4a10:	00005570 	cmpltui	zero,zero,341
    4a14:	00005570 	cmpltui	zero,zero,341
    4a18:	00005380 	call	538 <controller+0x19c>
    4a1c:	000053ac 	andhi	zero,zero,334
    4a20:	00005570 	cmpltui	zero,zero,341
    4a24:	00004be4 	muli	zero,zero,303
    4a28:	00004bf4 	movhi	zero,303
    4a2c:	00005570 	cmpltui	zero,zero,341
    4a30:	00004c34 	movhi	zero,304
    4a34:	00005214 	movui	zero,328
    4a38:	00005214 	movui	zero,328
    4a3c:	00005214 	movui	zero,328
    4a40:	00005214 	movui	zero,328
    4a44:	00005214 	movui	zero,328
    4a48:	00005214 	movui	zero,328
    4a4c:	00005214 	movui	zero,328
    4a50:	00005214 	movui	zero,328
    4a54:	00005214 	movui	zero,328
    4a58:	00005570 	cmpltui	zero,zero,341
    4a5c:	00005570 	cmpltui	zero,zero,341
    4a60:	00005570 	cmpltui	zero,zero,341
    4a64:	00005570 	cmpltui	zero,zero,341
    4a68:	00005570 	cmpltui	zero,zero,341
    4a6c:	00005570 	cmpltui	zero,zero,341
    4a70:	00005570 	cmpltui	zero,zero,341
    4a74:	00005570 	cmpltui	zero,zero,341
    4a78:	00005570 	cmpltui	zero,zero,341
    4a7c:	00005570 	cmpltui	zero,zero,341
    4a80:	00004c44 	movi	zero,305
    4a84:	000050c4 	movi	zero,323
    4a88:	00005570 	cmpltui	zero,zero,341
    4a8c:	000050c4 	movi	zero,323
    4a90:	00005570 	cmpltui	zero,zero,341
    4a94:	00005570 	cmpltui	zero,zero,341
    4a98:	00005570 	cmpltui	zero,zero,341
    4a9c:	00005570 	cmpltui	zero,zero,341
    4aa0:	00005168 	cmpgeui	zero,zero,325
    4aa4:	00005570 	cmpltui	zero,zero,341
    4aa8:	00005570 	cmpltui	zero,zero,341
    4aac:	00005504 	movi	zero,340
    4ab0:	00005570 	cmpltui	zero,zero,341
    4ab4:	00005570 	cmpltui	zero,zero,341
    4ab8:	00005570 	cmpltui	zero,zero,341
    4abc:	00005570 	cmpltui	zero,zero,341
    4ac0:	00005570 	cmpltui	zero,zero,341
    4ac4:	00005178 	rdprs	zero,zero,325
    4ac8:	00005570 	cmpltui	zero,zero,341
    4acc:	00005570 	cmpltui	zero,zero,341
    4ad0:	000051b8 	rdprs	zero,zero,326
    4ad4:	00005570 	cmpltui	zero,zero,341
    4ad8:	00005570 	cmpltui	zero,zero,341
    4adc:	00005570 	cmpltui	zero,zero,341
    4ae0:	00005570 	cmpltui	zero,zero,341
    4ae4:	00005570 	cmpltui	zero,zero,341
    4ae8:	00005570 	cmpltui	zero,zero,341
    4aec:	00005570 	cmpltui	zero,zero,341
    4af0:	00005570 	cmpltui	zero,zero,341
    4af4:	00005570 	cmpltui	zero,zero,341
    4af8:	00005570 	cmpltui	zero,zero,341
    4afc:	0000545c 	xori	zero,zero,337
    4b00:	0000549c 	xori	zero,zero,338
    4b04:	000050c4 	movi	zero,323
    4b08:	000050c4 	movi	zero,323
    4b0c:	000050c4 	movi	zero,323
    4b10:	000053bc 	xorhi	zero,zero,334
    4b14:	0000549c 	xori	zero,zero,338
    4b18:	00005570 	cmpltui	zero,zero,341
    4b1c:	00005570 	cmpltui	zero,zero,341
    4b20:	000053cc 	andi	zero,zero,335
    4b24:	00005570 	cmpltui	zero,zero,341
    4b28:	000053e0 	cmpeqi	zero,zero,335
    4b2c:	00005534 	movhi	zero,340
    4b30:	00005414 	movui	zero,336
    4b34:	00005248 	cmpgei	zero,zero,329
    4b38:	00005570 	cmpltui	zero,zero,341
    4b3c:	00005258 	cmpnei	zero,zero,329
    4b40:	00005570 	cmpltui	zero,zero,341
    4b44:	000052d0 	cmplti	zero,zero,331
    4b48:	00005570 	cmpltui	zero,zero,341
    4b4c:	00005570 	cmpltui	zero,zero,341
    4b50:	00005310 	cmplti	zero,zero,332
    4b54:	db002917 	ldw	r12,164(sp)
    4b58:	8323c83a 	sub	r17,r16,r12
    4b5c:	003f7e06 	br	4958 <__alt_mem_Flash_flash_data+0xf4004958>
    4b60:	d9002f17 	ldw	r4,188(sp)
    4b64:	b80b883a 	mov	r5,r23
    4b68:	b00d883a 	mov	r6,r22
    4b6c:	000da180 	call	da18 <__ssprint_r>
    4b70:	1000081e 	bne	r2,zero,4b94 <___svfprintf_internal_r+0x320>
    4b74:	da000404 	addi	r8,sp,16
    4b78:	003f8406 	br	498c <__alt_mem_Flash_flash_data+0xf400498c>
    4b7c:	d8802017 	ldw	r2,128(sp)
    4b80:	10000426 	beq	r2,zero,4b94 <___svfprintf_internal_r+0x320>
    4b84:	d9002f17 	ldw	r4,188(sp)
    4b88:	b80b883a 	mov	r5,r23
    4b8c:	d9801e04 	addi	r6,sp,120
    4b90:	000da180 	call	da18 <__ssprint_r>
    4b94:	b880030b 	ldhu	r2,12(r23)
    4b98:	1080100c 	andi	r2,r2,64
    4b9c:	10000d1e 	bne	r2,zero,4bd4 <___svfprintf_internal_r+0x360>
    4ba0:	d8803017 	ldw	r2,192(sp)
    4ba4:	dfc04a17 	ldw	ra,296(sp)
    4ba8:	df004917 	ldw	fp,292(sp)
    4bac:	ddc04817 	ldw	r23,288(sp)
    4bb0:	dd804717 	ldw	r22,284(sp)
    4bb4:	dd404617 	ldw	r21,280(sp)
    4bb8:	dd004517 	ldw	r20,276(sp)
    4bbc:	dcc04417 	ldw	r19,272(sp)
    4bc0:	dc804317 	ldw	r18,268(sp)
    4bc4:	dc404217 	ldw	r17,264(sp)
    4bc8:	dc004117 	ldw	r16,260(sp)
    4bcc:	dec04b04 	addi	sp,sp,300
    4bd0:	f800283a 	ret
    4bd4:	00bfffc4 	movi	r2,-1
    4bd8:	003ff206 	br	4ba4 <__alt_mem_Flash_flash_data+0xf4004ba4>
    4bdc:	dc002917 	ldw	r16,164(sp)
    4be0:	003f6d06 	br	4998 <__alt_mem_Flash_flash_data+0xf4004998>
    4be4:	1805883a 	mov	r2,r3
    4be8:	8c400114 	ori	r17,r17,4
    4bec:	1c000007 	ldb	r16,0(r3)
    4bf0:	003f7606 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    4bf4:	1c000007 	ldb	r16,0(r3)
    4bf8:	18800044 	addi	r2,r3,1
    4bfc:	8286e726 	beq	r16,r10,679c <___svfprintf_internal_r+0x1f28>
    4c00:	82fff404 	addi	r11,r16,-48
    4c04:	1007883a 	mov	r3,r2
    4c08:	0013883a 	mov	r9,zero
    4c0c:	2aff7036 	bltu	r5,r11,49d0 <__alt_mem_Flash_flash_data+0xf40049d0>
    4c10:	1c000007 	ldb	r16,0(r3)
    4c14:	4a4002a4 	muli	r9,r9,10
    4c18:	18c00044 	addi	r3,r3,1
    4c1c:	5a53883a 	add	r9,r11,r9
    4c20:	82fff404 	addi	r11,r16,-48
    4c24:	2afffa2e 	bgeu	r5,r11,4c10 <__alt_mem_Flash_flash_data+0xf4004c10>
    4c28:	483f690e 	bge	r9,zero,49d0 <__alt_mem_Flash_flash_data+0xf40049d0>
    4c2c:	027fffc4 	movi	r9,-1
    4c30:	003f6706 	br	49d0 <__alt_mem_Flash_flash_data+0xf40049d0>
    4c34:	8c402014 	ori	r17,r17,128
    4c38:	1805883a 	mov	r2,r3
    4c3c:	1c000007 	ldb	r16,0(r3)
    4c40:	003f6206 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    4c44:	8c400414 	ori	r17,r17,16
    4c48:	d8c02915 	stw	r3,164(sp)
    4c4c:	d9802785 	stb	r6,158(sp)
    4c50:	8880080c 	andi	r2,r17,32
    4c54:	d8c02d17 	ldw	r3,180(sp)
    4c58:	10021526 	beq	r2,zero,54b0 <___svfprintf_internal_r+0xc3c>
    4c5c:	db002d17 	ldw	r12,180(sp)
    4c60:	18800117 	ldw	r2,4(r3)
    4c64:	1cc00017 	ldw	r19,0(r3)
    4c68:	63000204 	addi	r12,r12,8
    4c6c:	db002d15 	stw	r12,180(sp)
    4c70:	1039883a 	mov	fp,r2
    4c74:	10021916 	blt	r2,zero,54dc <___svfprintf_internal_r+0xc68>
    4c78:	dd402783 	ldbu	r21,158(sp)
    4c7c:	da403215 	stw	r9,200(sp)
    4c80:	00800044 	movi	r2,1
    4c84:	9f06b03a 	or	r3,r19,fp
    4c88:	48000216 	blt	r9,zero,4c94 <___svfprintf_internal_r+0x420>
    4c8c:	013fdfc4 	movi	r4,-129
    4c90:	8922703a 	and	r17,r17,r4
    4c94:	1802461e 	bne	r3,zero,55b0 <___svfprintf_internal_r+0xd3c>
    4c98:	48035426 	beq	r9,zero,59ec <___svfprintf_internal_r+0x1178>
    4c9c:	10803fcc 	andi	r2,r2,255
    4ca0:	00c00044 	movi	r3,1
    4ca4:	10c26726 	beq	r2,r3,5644 <___svfprintf_internal_r+0xdd0>
    4ca8:	00c00084 	movi	r3,2
    4cac:	10c2ea26 	beq	r2,r3,5858 <___svfprintf_internal_r+0xfe4>
    4cb0:	b007883a 	mov	r3,r22
    4cb4:	9808d0fa 	srli	r4,r19,3
    4cb8:	e00a977a 	slli	r5,fp,29
    4cbc:	e038d0fa 	srli	fp,fp,3
    4cc0:	9cc001cc 	andi	r19,r19,7
    4cc4:	98800c04 	addi	r2,r19,48
    4cc8:	18ffffc4 	addi	r3,r3,-1
    4ccc:	2926b03a 	or	r19,r5,r4
    4cd0:	18800005 	stb	r2,0(r3)
    4cd4:	9f08b03a 	or	r4,r19,fp
    4cd8:	203ff61e 	bne	r4,zero,4cb4 <__alt_mem_Flash_flash_data+0xf4004cb4>
    4cdc:	8900004c 	andi	r4,r17,1
    4ce0:	d8c03115 	stw	r3,196(sp)
    4ce4:	2002ea26 	beq	r4,zero,5890 <___svfprintf_internal_r+0x101c>
    4ce8:	10803fcc 	andi	r2,r2,255
    4cec:	1080201c 	xori	r2,r2,128
    4cf0:	10bfe004 	addi	r2,r2,-128
    4cf4:	01000c04 	movi	r4,48
    4cf8:	11057526 	beq	r2,r4,62d0 <___svfprintf_internal_r+0x1a5c>
    4cfc:	dac03117 	ldw	r11,196(sp)
    4d00:	193fffc5 	stb	r4,-1(r3)
    4d04:	5affffc4 	addi	r11,r11,-1
    4d08:	dac03115 	stw	r11,196(sp)
    4d0c:	b2e5c83a 	sub	r18,r22,r11
    4d10:	9005883a 	mov	r2,r18
    4d14:	9240010e 	bge	r18,r9,4d1c <___svfprintf_internal_r+0x4a8>
    4d18:	4805883a 	mov	r2,r9
    4d1c:	d8802a15 	stw	r2,168(sp)
    4d20:	d8003415 	stw	zero,208(sp)
    4d24:	a8803fcc 	andi	r2,r21,255
    4d28:	1080201c 	xori	r2,r2,128
    4d2c:	10bfe004 	addi	r2,r2,-128
    4d30:	10000326 	beq	r2,zero,4d40 <___svfprintf_internal_r+0x4cc>
    4d34:	d8c02a17 	ldw	r3,168(sp)
    4d38:	18c00044 	addi	r3,r3,1
    4d3c:	d8c02a15 	stw	r3,168(sp)
    4d40:	8ac0008c 	andi	r11,r17,2
    4d44:	dac02b15 	stw	r11,172(sp)
    4d48:	58000326 	beq	r11,zero,4d58 <___svfprintf_internal_r+0x4e4>
    4d4c:	db002a17 	ldw	r12,168(sp)
    4d50:	63000084 	addi	r12,r12,2
    4d54:	db002a15 	stw	r12,168(sp)
    4d58:	88c0210c 	andi	r3,r17,132
    4d5c:	d8c02c15 	stw	r3,176(sp)
    4d60:	1802111e 	bne	r3,zero,55a8 <___svfprintf_internal_r+0xd34>
    4d64:	dac02e17 	ldw	r11,184(sp)
    4d68:	db002a17 	ldw	r12,168(sp)
    4d6c:	5b39c83a 	sub	fp,r11,r12
    4d70:	07020d0e 	bge	zero,fp,55a8 <___svfprintf_internal_r+0xd34>
    4d74:	02400404 	movi	r9,16
    4d78:	d8c02017 	ldw	r3,128(sp)
    4d7c:	d8801f17 	ldw	r2,124(sp)
    4d80:	4f058c0e 	bge	r9,fp,63b4 <___svfprintf_internal_r+0x1b40>
    4d84:	014000b4 	movhi	r5,2
    4d88:	e009883a 	mov	r4,fp
    4d8c:	2956c284 	addi	r5,r5,23306
    4d90:	dc003c15 	stw	r16,240(sp)
    4d94:	9039883a 	mov	fp,r18
    4d98:	d9403615 	stw	r5,216(sp)
    4d9c:	8825883a 	mov	r18,r17
    4da0:	482b883a 	mov	r21,r9
    4da4:	04c001c4 	movi	r19,7
    4da8:	dc002f17 	ldw	r16,188(sp)
    4dac:	2023883a 	mov	r17,r4
    4db0:	00000306 	br	4dc0 <___svfprintf_internal_r+0x54c>
    4db4:	8c7ffc04 	addi	r17,r17,-16
    4db8:	42000204 	addi	r8,r8,8
    4dbc:	ac40130e 	bge	r21,r17,4e0c <___svfprintf_internal_r+0x598>
    4dc0:	02c000b4 	movhi	r11,2
    4dc4:	18c00404 	addi	r3,r3,16
    4dc8:	10800044 	addi	r2,r2,1
    4dcc:	5ad6c284 	addi	r11,r11,23306
    4dd0:	42c00015 	stw	r11,0(r8)
    4dd4:	45400115 	stw	r21,4(r8)
    4dd8:	d8c02015 	stw	r3,128(sp)
    4ddc:	d8801f15 	stw	r2,124(sp)
    4de0:	98bff40e 	bge	r19,r2,4db4 <__alt_mem_Flash_flash_data+0xf4004db4>
    4de4:	8009883a 	mov	r4,r16
    4de8:	b80b883a 	mov	r5,r23
    4dec:	b00d883a 	mov	r6,r22
    4df0:	000da180 	call	da18 <__ssprint_r>
    4df4:	103f671e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    4df8:	8c7ffc04 	addi	r17,r17,-16
    4dfc:	d8c02017 	ldw	r3,128(sp)
    4e00:	d8801f17 	ldw	r2,124(sp)
    4e04:	da000404 	addi	r8,sp,16
    4e08:	ac7fed16 	blt	r21,r17,4dc0 <__alt_mem_Flash_flash_data+0xf4004dc0>
    4e0c:	dc003c17 	ldw	r16,240(sp)
    4e10:	8809883a 	mov	r4,r17
    4e14:	9023883a 	mov	r17,r18
    4e18:	e025883a 	mov	r18,fp
    4e1c:	2039883a 	mov	fp,r4
    4e20:	db003617 	ldw	r12,216(sp)
    4e24:	e0c7883a 	add	r3,fp,r3
    4e28:	10800044 	addi	r2,r2,1
    4e2c:	43000015 	stw	r12,0(r8)
    4e30:	47000115 	stw	fp,4(r8)
    4e34:	d8c02015 	stw	r3,128(sp)
    4e38:	d8801f15 	stw	r2,124(sp)
    4e3c:	010001c4 	movi	r4,7
    4e40:	20834416 	blt	r4,r2,5b54 <___svfprintf_internal_r+0x12e0>
    4e44:	d8802787 	ldb	r2,158(sp)
    4e48:	42000204 	addi	r8,r8,8
    4e4c:	10000c26 	beq	r2,zero,4e80 <___svfprintf_internal_r+0x60c>
    4e50:	d8801f17 	ldw	r2,124(sp)
    4e54:	d9002784 	addi	r4,sp,158
    4e58:	18c00044 	addi	r3,r3,1
    4e5c:	10800044 	addi	r2,r2,1
    4e60:	41000015 	stw	r4,0(r8)
    4e64:	01000044 	movi	r4,1
    4e68:	41000115 	stw	r4,4(r8)
    4e6c:	d8c02015 	stw	r3,128(sp)
    4e70:	d8801f15 	stw	r2,124(sp)
    4e74:	010001c4 	movi	r4,7
    4e78:	2082f616 	blt	r4,r2,5a54 <___svfprintf_internal_r+0x11e0>
    4e7c:	42000204 	addi	r8,r8,8
    4e80:	dac02b17 	ldw	r11,172(sp)
    4e84:	58000c26 	beq	r11,zero,4eb8 <___svfprintf_internal_r+0x644>
    4e88:	d8801f17 	ldw	r2,124(sp)
    4e8c:	d9002704 	addi	r4,sp,156
    4e90:	18c00084 	addi	r3,r3,2
    4e94:	10800044 	addi	r2,r2,1
    4e98:	41000015 	stw	r4,0(r8)
    4e9c:	01000084 	movi	r4,2
    4ea0:	41000115 	stw	r4,4(r8)
    4ea4:	d8c02015 	stw	r3,128(sp)
    4ea8:	d8801f15 	stw	r2,124(sp)
    4eac:	010001c4 	movi	r4,7
    4eb0:	2082e016 	blt	r4,r2,5a34 <___svfprintf_internal_r+0x11c0>
    4eb4:	42000204 	addi	r8,r8,8
    4eb8:	db002c17 	ldw	r12,176(sp)
    4ebc:	00802004 	movi	r2,128
    4ec0:	60822f26 	beq	r12,r2,5780 <___svfprintf_internal_r+0xf0c>
    4ec4:	db003217 	ldw	r12,200(sp)
    4ec8:	64abc83a 	sub	r21,r12,r18
    4ecc:	0540310e 	bge	zero,r21,4f94 <___svfprintf_internal_r+0x720>
    4ed0:	07000404 	movi	fp,16
    4ed4:	d8801f17 	ldw	r2,124(sp)
    4ed8:	e544270e 	bge	fp,r21,5f78 <___svfprintf_internal_r+0x1704>
    4edc:	014000b4 	movhi	r5,2
    4ee0:	a809883a 	mov	r4,r21
    4ee4:	2956be84 	addi	r5,r5,23290
    4ee8:	dc002c15 	stw	r16,176(sp)
    4eec:	902b883a 	mov	r21,r18
    4ef0:	d9402b15 	stw	r5,172(sp)
    4ef4:	8825883a 	mov	r18,r17
    4ef8:	04c001c4 	movi	r19,7
    4efc:	dc002f17 	ldw	r16,188(sp)
    4f00:	2023883a 	mov	r17,r4
    4f04:	00000306 	br	4f14 <___svfprintf_internal_r+0x6a0>
    4f08:	8c7ffc04 	addi	r17,r17,-16
    4f0c:	42000204 	addi	r8,r8,8
    4f10:	e440110e 	bge	fp,r17,4f58 <___svfprintf_internal_r+0x6e4>
    4f14:	18c00404 	addi	r3,r3,16
    4f18:	10800044 	addi	r2,r2,1
    4f1c:	45000015 	stw	r20,0(r8)
    4f20:	47000115 	stw	fp,4(r8)
    4f24:	d8c02015 	stw	r3,128(sp)
    4f28:	d8801f15 	stw	r2,124(sp)
    4f2c:	98bff60e 	bge	r19,r2,4f08 <__alt_mem_Flash_flash_data+0xf4004f08>
    4f30:	8009883a 	mov	r4,r16
    4f34:	b80b883a 	mov	r5,r23
    4f38:	b00d883a 	mov	r6,r22
    4f3c:	000da180 	call	da18 <__ssprint_r>
    4f40:	103f141e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    4f44:	8c7ffc04 	addi	r17,r17,-16
    4f48:	d8c02017 	ldw	r3,128(sp)
    4f4c:	d8801f17 	ldw	r2,124(sp)
    4f50:	da000404 	addi	r8,sp,16
    4f54:	e47fef16 	blt	fp,r17,4f14 <__alt_mem_Flash_flash_data+0xf4004f14>
    4f58:	dc002c17 	ldw	r16,176(sp)
    4f5c:	8809883a 	mov	r4,r17
    4f60:	9023883a 	mov	r17,r18
    4f64:	a825883a 	mov	r18,r21
    4f68:	202b883a 	mov	r21,r4
    4f6c:	dac02b17 	ldw	r11,172(sp)
    4f70:	1d47883a 	add	r3,r3,r21
    4f74:	10800044 	addi	r2,r2,1
    4f78:	42c00015 	stw	r11,0(r8)
    4f7c:	45400115 	stw	r21,4(r8)
    4f80:	d8c02015 	stw	r3,128(sp)
    4f84:	d8801f15 	stw	r2,124(sp)
    4f88:	010001c4 	movi	r4,7
    4f8c:	2082a116 	blt	r4,r2,5a14 <___svfprintf_internal_r+0x11a0>
    4f90:	42000204 	addi	r8,r8,8
    4f94:	8880400c 	andi	r2,r17,256
    4f98:	1001b01e 	bne	r2,zero,565c <___svfprintf_internal_r+0xde8>
    4f9c:	d8801f17 	ldw	r2,124(sp)
    4fa0:	db003117 	ldw	r12,196(sp)
    4fa4:	1c87883a 	add	r3,r3,r18
    4fa8:	10800044 	addi	r2,r2,1
    4fac:	43000015 	stw	r12,0(r8)
    4fb0:	44800115 	stw	r18,4(r8)
    4fb4:	d8c02015 	stw	r3,128(sp)
    4fb8:	d8801f15 	stw	r2,124(sp)
    4fbc:	010001c4 	movi	r4,7
    4fc0:	20828216 	blt	r4,r2,59cc <___svfprintf_internal_r+0x1158>
    4fc4:	42000204 	addi	r8,r8,8
    4fc8:	8c40010c 	andi	r17,r17,4
    4fcc:	88003226 	beq	r17,zero,5098 <___svfprintf_internal_r+0x824>
    4fd0:	db002e17 	ldw	r12,184(sp)
    4fd4:	dac02a17 	ldw	r11,168(sp)
    4fd8:	62e1c83a 	sub	r16,r12,r11
    4fdc:	04002e0e 	bge	zero,r16,5098 <___svfprintf_internal_r+0x824>
    4fe0:	04400404 	movi	r17,16
    4fe4:	d8801f17 	ldw	r2,124(sp)
    4fe8:	8c05330e 	bge	r17,r16,64b8 <___svfprintf_internal_r+0x1c44>
    4fec:	010000b4 	movhi	r4,2
    4ff0:	2116c284 	addi	r4,r4,23306
    4ff4:	d9003615 	stw	r4,216(sp)
    4ff8:	048001c4 	movi	r18,7
    4ffc:	dcc02f17 	ldw	r19,188(sp)
    5000:	00000306 	br	5010 <___svfprintf_internal_r+0x79c>
    5004:	843ffc04 	addi	r16,r16,-16
    5008:	42000204 	addi	r8,r8,8
    500c:	8c00130e 	bge	r17,r16,505c <___svfprintf_internal_r+0x7e8>
    5010:	014000b4 	movhi	r5,2
    5014:	18c00404 	addi	r3,r3,16
    5018:	10800044 	addi	r2,r2,1
    501c:	2956c284 	addi	r5,r5,23306
    5020:	41400015 	stw	r5,0(r8)
    5024:	44400115 	stw	r17,4(r8)
    5028:	d8c02015 	stw	r3,128(sp)
    502c:	d8801f15 	stw	r2,124(sp)
    5030:	90bff40e 	bge	r18,r2,5004 <__alt_mem_Flash_flash_data+0xf4005004>
    5034:	9809883a 	mov	r4,r19
    5038:	b80b883a 	mov	r5,r23
    503c:	b00d883a 	mov	r6,r22
    5040:	000da180 	call	da18 <__ssprint_r>
    5044:	103ed31e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5048:	843ffc04 	addi	r16,r16,-16
    504c:	d8c02017 	ldw	r3,128(sp)
    5050:	d8801f17 	ldw	r2,124(sp)
    5054:	da000404 	addi	r8,sp,16
    5058:	8c3fed16 	blt	r17,r16,5010 <__alt_mem_Flash_flash_data+0xf4005010>
    505c:	dac03617 	ldw	r11,216(sp)
    5060:	1c07883a 	add	r3,r3,r16
    5064:	10800044 	addi	r2,r2,1
    5068:	42c00015 	stw	r11,0(r8)
    506c:	44000115 	stw	r16,4(r8)
    5070:	d8c02015 	stw	r3,128(sp)
    5074:	d8801f15 	stw	r2,124(sp)
    5078:	010001c4 	movi	r4,7
    507c:	2080060e 	bge	r4,r2,5098 <___svfprintf_internal_r+0x824>
    5080:	d9002f17 	ldw	r4,188(sp)
    5084:	b80b883a 	mov	r5,r23
    5088:	b00d883a 	mov	r6,r22
    508c:	000da180 	call	da18 <__ssprint_r>
    5090:	103ec01e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5094:	d8c02017 	ldw	r3,128(sp)
    5098:	d8802a17 	ldw	r2,168(sp)
    509c:	db002e17 	ldw	r12,184(sp)
    50a0:	1300010e 	bge	r2,r12,50a8 <___svfprintf_internal_r+0x834>
    50a4:	6005883a 	mov	r2,r12
    50a8:	dac03017 	ldw	r11,192(sp)
    50ac:	5897883a 	add	r11,r11,r2
    50b0:	dac03015 	stw	r11,192(sp)
    50b4:	1802331e 	bne	r3,zero,5984 <___svfprintf_internal_r+0x1110>
    50b8:	d8001f15 	stw	zero,124(sp)
    50bc:	da000404 	addi	r8,sp,16
    50c0:	003e1806 	br	4924 <__alt_mem_Flash_flash_data+0xf4004924>
    50c4:	db002d17 	ldw	r12,180(sp)
    50c8:	dac02d17 	ldw	r11,180(sp)
    50cc:	d8c02915 	stw	r3,164(sp)
    50d0:	63000017 	ldw	r12,0(r12)
    50d4:	5ac00117 	ldw	r11,4(r11)
    50d8:	d9802785 	stb	r6,158(sp)
    50dc:	6009883a 	mov	r4,r12
    50e0:	580b883a 	mov	r5,r11
    50e4:	db003715 	stw	r12,220(sp)
    50e8:	da004015 	stw	r8,256(sp)
    50ec:	da403f15 	stw	r9,252(sp)
    50f0:	dac03815 	stw	r11,224(sp)
    50f4:	000d7700 	call	d770 <__fpclassifyd>
    50f8:	db002d17 	ldw	r12,180(sp)
    50fc:	04800044 	movi	r18,1
    5100:	da004017 	ldw	r8,256(sp)
    5104:	64c00204 	addi	r19,r12,8
    5108:	da403f17 	ldw	r9,252(sp)
    510c:	d9003717 	ldw	r4,220(sp)
    5110:	d9403817 	ldw	r5,224(sp)
    5114:	1483561e 	bne	r2,r18,5e70 <___svfprintf_internal_r+0x15fc>
    5118:	000d883a 	mov	r6,zero
    511c:	000f883a 	mov	r7,zero
    5120:	00129200 	call	12920 <__ledf2>
    5124:	da004017 	ldw	r8,256(sp)
    5128:	1004ee16 	blt	r2,zero,64e4 <___svfprintf_internal_r+0x1c70>
    512c:	dd402783 	ldbu	r21,158(sp)
    5130:	008011c4 	movi	r2,71
    5134:	1404440e 	bge	r2,r16,6248 <___svfprintf_internal_r+0x19d4>
    5138:	00c000b4 	movhi	r3,2
    513c:	18d6af04 	addi	r3,r3,23228
    5140:	d8c03115 	stw	r3,196(sp)
    5144:	02c000c4 	movi	r11,3
    5148:	00bfdfc4 	movi	r2,-129
    514c:	dac02a15 	stw	r11,168(sp)
    5150:	88a2703a 	and	r17,r17,r2
    5154:	dcc02d15 	stw	r19,180(sp)
    5158:	5825883a 	mov	r18,r11
    515c:	d8003215 	stw	zero,200(sp)
    5160:	d8003415 	stw	zero,208(sp)
    5164:	003eef06 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    5168:	8c400214 	ori	r17,r17,8
    516c:	1805883a 	mov	r2,r3
    5170:	1c000007 	ldb	r16,0(r3)
    5174:	003e1506 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    5178:	8c400414 	ori	r17,r17,16
    517c:	d8c02915 	stw	r3,164(sp)
    5180:	88c0080c 	andi	r3,r17,32
    5184:	d8802d17 	ldw	r2,180(sp)
    5188:	18005526 	beq	r3,zero,52e0 <___svfprintf_internal_r+0xa6c>
    518c:	dac02d17 	ldw	r11,180(sp)
    5190:	14c00017 	ldw	r19,0(r2)
    5194:	17000117 	ldw	fp,4(r2)
    5198:	5ac00204 	addi	r11,r11,8
    519c:	dac02d15 	stw	r11,180(sp)
    51a0:	00800044 	movi	r2,1
    51a4:	9f06b03a 	or	r3,r19,fp
    51a8:	d8002785 	stb	zero,158(sp)
    51ac:	da403215 	stw	r9,200(sp)
    51b0:	002b883a 	mov	r21,zero
    51b4:	003eb406 	br	4c88 <__alt_mem_Flash_flash_data+0xf4004c88>
    51b8:	030000b4 	movhi	r12,2
    51bc:	6316b204 	addi	r12,r12,23240
    51c0:	d8c02915 	stw	r3,164(sp)
    51c4:	d9802785 	stb	r6,158(sp)
    51c8:	db003b15 	stw	r12,236(sp)
    51cc:	88c0080c 	andi	r3,r17,32
    51d0:	d8802d17 	ldw	r2,180(sp)
    51d4:	18005626 	beq	r3,zero,5330 <___svfprintf_internal_r+0xabc>
    51d8:	dac02d17 	ldw	r11,180(sp)
    51dc:	14c00017 	ldw	r19,0(r2)
    51e0:	17000117 	ldw	fp,4(r2)
    51e4:	5ac00204 	addi	r11,r11,8
    51e8:	dac02d15 	stw	r11,180(sp)
    51ec:	8880004c 	andi	r2,r17,1
    51f0:	10029326 	beq	r2,zero,5c40 <___svfprintf_internal_r+0x13cc>
    51f4:	9f06b03a 	or	r3,r19,fp
    51f8:	18033526 	beq	r3,zero,5ed0 <___svfprintf_internal_r+0x165c>
    51fc:	00800c04 	movi	r2,48
    5200:	d8802705 	stb	r2,156(sp)
    5204:	dc002745 	stb	r16,157(sp)
    5208:	8c400094 	ori	r17,r17,2
    520c:	00800084 	movi	r2,2
    5210:	003fe506 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5214:	1805883a 	mov	r2,r3
    5218:	d8002e15 	stw	zero,184(sp)
    521c:	82fff404 	addi	r11,r16,-48
    5220:	0019883a 	mov	r12,zero
    5224:	14000007 	ldb	r16,0(r2)
    5228:	630002a4 	muli	r12,r12,10
    522c:	18c00044 	addi	r3,r3,1
    5230:	1805883a 	mov	r2,r3
    5234:	62d9883a 	add	r12,r12,r11
    5238:	82fff404 	addi	r11,r16,-48
    523c:	2afff92e 	bgeu	r5,r11,5224 <__alt_mem_Flash_flash_data+0xf4005224>
    5240:	db002e15 	stw	r12,184(sp)
    5244:	003de206 	br	49d0 <__alt_mem_Flash_flash_data+0xf40049d0>
    5248:	8c400814 	ori	r17,r17,32
    524c:	1805883a 	mov	r2,r3
    5250:	1c000007 	ldb	r16,0(r3)
    5254:	003ddd06 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    5258:	dac02d17 	ldw	r11,180(sp)
    525c:	db002d17 	ldw	r12,180(sp)
    5260:	d8c02915 	stw	r3,164(sp)
    5264:	5ac00017 	ldw	r11,0(r11)
    5268:	d8002785 	stb	zero,158(sp)
    526c:	64c00104 	addi	r19,r12,4
    5270:	dac03115 	stw	r11,196(sp)
    5274:	58048126 	beq	r11,zero,647c <___svfprintf_internal_r+0x1c08>
    5278:	d9003117 	ldw	r4,196(sp)
    527c:	48041716 	blt	r9,zero,62dc <___svfprintf_internal_r+0x1a68>
    5280:	480d883a 	mov	r6,r9
    5284:	000b883a 	mov	r5,zero
    5288:	da004015 	stw	r8,256(sp)
    528c:	da403f15 	stw	r9,252(sp)
    5290:	000bd800 	call	bd80 <memchr>
    5294:	da004017 	ldw	r8,256(sp)
    5298:	da403f17 	ldw	r9,252(sp)
    529c:	1004db26 	beq	r2,zero,660c <___svfprintf_internal_r+0x1d98>
    52a0:	d8c03117 	ldw	r3,196(sp)
    52a4:	10e5c83a 	sub	r18,r2,r3
    52a8:	4c80010e 	bge	r9,r18,52b0 <___svfprintf_internal_r+0xa3c>
    52ac:	4825883a 	mov	r18,r9
    52b0:	9005883a 	mov	r2,r18
    52b4:	90040e16 	blt	r18,zero,62f0 <___svfprintf_internal_r+0x1a7c>
    52b8:	dd402783 	ldbu	r21,158(sp)
    52bc:	d8802a15 	stw	r2,168(sp)
    52c0:	dcc02d15 	stw	r19,180(sp)
    52c4:	d8003215 	stw	zero,200(sp)
    52c8:	d8003415 	stw	zero,208(sp)
    52cc:	003e9506 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    52d0:	d8c02915 	stw	r3,164(sp)
    52d4:	88c0080c 	andi	r3,r17,32
    52d8:	d8802d17 	ldw	r2,180(sp)
    52dc:	183fab1e 	bne	r3,zero,518c <__alt_mem_Flash_flash_data+0xf400518c>
    52e0:	88c0040c 	andi	r3,r17,16
    52e4:	1802681e 	bne	r3,zero,5c88 <___svfprintf_internal_r+0x1414>
    52e8:	88c0100c 	andi	r3,r17,64
    52ec:	18026626 	beq	r3,zero,5c88 <___svfprintf_internal_r+0x1414>
    52f0:	dac02d17 	ldw	r11,180(sp)
    52f4:	14c0000b 	ldhu	r19,0(r2)
    52f8:	0039883a 	mov	fp,zero
    52fc:	5ac00104 	addi	r11,r11,4
    5300:	dac02d15 	stw	r11,180(sp)
    5304:	00800044 	movi	r2,1
    5308:	9807883a 	mov	r3,r19
    530c:	003fa606 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5310:	008000b4 	movhi	r2,2
    5314:	1096b704 	addi	r2,r2,23260
    5318:	d8c02915 	stw	r3,164(sp)
    531c:	d8803b15 	stw	r2,236(sp)
    5320:	d9802785 	stb	r6,158(sp)
    5324:	88c0080c 	andi	r3,r17,32
    5328:	d8802d17 	ldw	r2,180(sp)
    532c:	183faa1e 	bne	r3,zero,51d8 <__alt_mem_Flash_flash_data+0xf40051d8>
    5330:	88c0040c 	andi	r3,r17,16
    5334:	1802e826 	beq	r3,zero,5ed8 <___svfprintf_internal_r+0x1664>
    5338:	db002d17 	ldw	r12,180(sp)
    533c:	14c00017 	ldw	r19,0(r2)
    5340:	0039883a 	mov	fp,zero
    5344:	63000104 	addi	r12,r12,4
    5348:	db002d15 	stw	r12,180(sp)
    534c:	003fa706 	br	51ec <__alt_mem_Flash_flash_data+0xf40051ec>
    5350:	30803fcc 	andi	r2,r6,255
    5354:	1080201c 	xori	r2,r2,128
    5358:	10bfe004 	addi	r2,r2,-128
    535c:	1002d91e 	bne	r2,zero,5ec4 <___svfprintf_internal_r+0x1650>
    5360:	1805883a 	mov	r2,r3
    5364:	01800804 	movi	r6,32
    5368:	1c000007 	ldb	r16,0(r3)
    536c:	003d9706 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    5370:	8c400054 	ori	r17,r17,1
    5374:	1805883a 	mov	r2,r3
    5378:	1c000007 	ldb	r16,0(r3)
    537c:	003d9306 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    5380:	dac02d17 	ldw	r11,180(sp)
    5384:	db002d17 	ldw	r12,180(sp)
    5388:	5ac00017 	ldw	r11,0(r11)
    538c:	dac02e15 	stw	r11,184(sp)
    5390:	62c00104 	addi	r11,r12,4
    5394:	db002e17 	ldw	r12,184(sp)
    5398:	60033e16 	blt	r12,zero,6094 <___svfprintf_internal_r+0x1820>
    539c:	dac02d15 	stw	r11,180(sp)
    53a0:	1805883a 	mov	r2,r3
    53a4:	1c000007 	ldb	r16,0(r3)
    53a8:	003d8806 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    53ac:	1805883a 	mov	r2,r3
    53b0:	01800ac4 	movi	r6,43
    53b4:	1c000007 	ldb	r16,0(r3)
    53b8:	003d8406 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    53bc:	8c401014 	ori	r17,r17,64
    53c0:	1805883a 	mov	r2,r3
    53c4:	1c000007 	ldb	r16,0(r3)
    53c8:	003d8006 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    53cc:	1c000007 	ldb	r16,0(r3)
    53d0:	81c33626 	beq	r16,r7,60ac <___svfprintf_internal_r+0x1838>
    53d4:	8c400414 	ori	r17,r17,16
    53d8:	1805883a 	mov	r2,r3
    53dc:	003d7b06 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    53e0:	d8c02915 	stw	r3,164(sp)
    53e4:	d9802785 	stb	r6,158(sp)
    53e8:	8880080c 	andi	r2,r17,32
    53ec:	1002c226 	beq	r2,zero,5ef8 <___svfprintf_internal_r+0x1684>
    53f0:	db002d17 	ldw	r12,180(sp)
    53f4:	dac03017 	ldw	r11,192(sp)
    53f8:	60800017 	ldw	r2,0(r12)
    53fc:	5807d7fa 	srai	r3,r11,31
    5400:	63000104 	addi	r12,r12,4
    5404:	db002d15 	stw	r12,180(sp)
    5408:	12c00015 	stw	r11,0(r2)
    540c:	10c00115 	stw	r3,4(r2)
    5410:	003d4406 	br	4924 <__alt_mem_Flash_flash_data+0xf4004924>
    5414:	db002d17 	ldw	r12,180(sp)
    5418:	00800c04 	movi	r2,48
    541c:	d8802705 	stb	r2,156(sp)
    5420:	64c00017 	ldw	r19,0(r12)
    5424:	00801e04 	movi	r2,120
    5428:	d8802745 	stb	r2,157(sp)
    542c:	008000b4 	movhi	r2,2
    5430:	1096b704 	addi	r2,r2,23260
    5434:	63000104 	addi	r12,r12,4
    5438:	d8c02915 	stw	r3,164(sp)
    543c:	d8803b15 	stw	r2,236(sp)
    5440:	0039883a 	mov	fp,zero
    5444:	8c400094 	ori	r17,r17,2
    5448:	db002d15 	stw	r12,180(sp)
    544c:	00800084 	movi	r2,2
    5450:	04001e04 	movi	r16,120
    5454:	9807883a 	mov	r3,r19
    5458:	003f5306 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    545c:	db002d17 	ldw	r12,180(sp)
    5460:	d8c02915 	stw	r3,164(sp)
    5464:	dac01404 	addi	r11,sp,80
    5468:	60800017 	ldw	r2,0(r12)
    546c:	00c00044 	movi	r3,1
    5470:	63000104 	addi	r12,r12,4
    5474:	d8801405 	stb	r2,80(sp)
    5478:	d8c02a15 	stw	r3,168(sp)
    547c:	d8002785 	stb	zero,158(sp)
    5480:	db002d15 	stw	r12,180(sp)
    5484:	1825883a 	mov	r18,r3
    5488:	d8003215 	stw	zero,200(sp)
    548c:	d8003415 	stw	zero,208(sp)
    5490:	dac03115 	stw	r11,196(sp)
    5494:	0005883a 	mov	r2,zero
    5498:	003e2906 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    549c:	d8c02915 	stw	r3,164(sp)
    54a0:	d9802785 	stb	r6,158(sp)
    54a4:	8880080c 	andi	r2,r17,32
    54a8:	d8c02d17 	ldw	r3,180(sp)
    54ac:	103deb1e 	bne	r2,zero,4c5c <__alt_mem_Flash_flash_data+0xf4004c5c>
    54b0:	8880040c 	andi	r2,r17,16
    54b4:	1001e51e 	bne	r2,zero,5c4c <___svfprintf_internal_r+0x13d8>
    54b8:	8880100c 	andi	r2,r17,64
    54bc:	1001e326 	beq	r2,zero,5c4c <___svfprintf_internal_r+0x13d8>
    54c0:	1cc0000f 	ldh	r19,0(r3)
    54c4:	db002d17 	ldw	r12,180(sp)
    54c8:	9839d7fa 	srai	fp,r19,31
    54cc:	63000104 	addi	r12,r12,4
    54d0:	db002d15 	stw	r12,180(sp)
    54d4:	e005883a 	mov	r2,fp
    54d8:	103de70e 	bge	r2,zero,4c78 <__alt_mem_Flash_flash_data+0xf4004c78>
    54dc:	04e7c83a 	sub	r19,zero,r19
    54e0:	9804c03a 	cmpne	r2,r19,zero
    54e4:	0739c83a 	sub	fp,zero,fp
    54e8:	e0b9c83a 	sub	fp,fp,r2
    54ec:	05400b44 	movi	r21,45
    54f0:	dd402785 	stb	r21,158(sp)
    54f4:	da403215 	stw	r9,200(sp)
    54f8:	00800044 	movi	r2,1
    54fc:	9f06b03a 	or	r3,r19,fp
    5500:	003de106 	br	4c88 <__alt_mem_Flash_flash_data+0xf4004c88>
    5504:	8c400414 	ori	r17,r17,16
    5508:	d8c02915 	stw	r3,164(sp)
    550c:	8880080c 	andi	r2,r17,32
    5510:	10000b26 	beq	r2,zero,5540 <___svfprintf_internal_r+0xccc>
    5514:	db002d17 	ldw	r12,180(sp)
    5518:	0005883a 	mov	r2,zero
    551c:	64c00017 	ldw	r19,0(r12)
    5520:	67000117 	ldw	fp,4(r12)
    5524:	63000204 	addi	r12,r12,8
    5528:	db002d15 	stw	r12,180(sp)
    552c:	9f06b03a 	or	r3,r19,fp
    5530:	003f1d06 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5534:	d8c02915 	stw	r3,164(sp)
    5538:	8880080c 	andi	r2,r17,32
    553c:	103ff51e 	bne	r2,zero,5514 <__alt_mem_Flash_flash_data+0xf4005514>
    5540:	8880040c 	andi	r2,r17,16
    5544:	1001c81e 	bne	r2,zero,5c68 <___svfprintf_internal_r+0x13f4>
    5548:	8880100c 	andi	r2,r17,64
    554c:	1001c626 	beq	r2,zero,5c68 <___svfprintf_internal_r+0x13f4>
    5550:	db002d17 	ldw	r12,180(sp)
    5554:	0039883a 	mov	fp,zero
    5558:	0005883a 	mov	r2,zero
    555c:	64c0000b 	ldhu	r19,0(r12)
    5560:	63000104 	addi	r12,r12,4
    5564:	db002d15 	stw	r12,180(sp)
    5568:	9807883a 	mov	r3,r19
    556c:	003f0e06 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5570:	d8c02915 	stw	r3,164(sp)
    5574:	d9802785 	stb	r6,158(sp)
    5578:	803d8026 	beq	r16,zero,4b7c <__alt_mem_Flash_flash_data+0xf4004b7c>
    557c:	02c00044 	movi	r11,1
    5580:	db001404 	addi	r12,sp,80
    5584:	dac02a15 	stw	r11,168(sp)
    5588:	dc001405 	stb	r16,80(sp)
    558c:	d8002785 	stb	zero,158(sp)
    5590:	5825883a 	mov	r18,r11
    5594:	d8003215 	stw	zero,200(sp)
    5598:	d8003415 	stw	zero,208(sp)
    559c:	db003115 	stw	r12,196(sp)
    55a0:	0005883a 	mov	r2,zero
    55a4:	003de606 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    55a8:	d8c02017 	ldw	r3,128(sp)
    55ac:	003e2706 	br	4e4c <__alt_mem_Flash_flash_data+0xf4004e4c>
    55b0:	10803fcc 	andi	r2,r2,255
    55b4:	00c00044 	movi	r3,1
    55b8:	10fdbb1e 	bne	r2,r3,4ca8 <__alt_mem_Flash_flash_data+0xf4004ca8>
    55bc:	e000021e 	bne	fp,zero,55c8 <___svfprintf_internal_r+0xd54>
    55c0:	00800244 	movi	r2,9
    55c4:	14c01f2e 	bgeu	r2,r19,5644 <___svfprintf_internal_r+0xdd0>
    55c8:	dc002a15 	stw	r16,168(sp)
    55cc:	dc402b15 	stw	r17,172(sp)
    55d0:	9821883a 	mov	r16,r19
    55d4:	e023883a 	mov	r17,fp
    55d8:	b025883a 	mov	r18,r22
    55dc:	4827883a 	mov	r19,r9
    55e0:	4039883a 	mov	fp,r8
    55e4:	8009883a 	mov	r4,r16
    55e8:	880b883a 	mov	r5,r17
    55ec:	01800284 	movi	r6,10
    55f0:	000f883a 	mov	r7,zero
    55f4:	0010f980 	call	10f98 <__umoddi3>
    55f8:	10800c04 	addi	r2,r2,48
    55fc:	94bfffc4 	addi	r18,r18,-1
    5600:	8009883a 	mov	r4,r16
    5604:	880b883a 	mov	r5,r17
    5608:	01800284 	movi	r6,10
    560c:	000f883a 	mov	r7,zero
    5610:	90800005 	stb	r2,0(r18)
    5614:	00109d80 	call	109d8 <__udivdi3>
    5618:	1021883a 	mov	r16,r2
    561c:	10c4b03a 	or	r2,r2,r3
    5620:	1823883a 	mov	r17,r3
    5624:	103fef1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    5628:	dc803115 	stw	r18,196(sp)
    562c:	dc002a17 	ldw	r16,168(sp)
    5630:	dc402b17 	ldw	r17,172(sp)
    5634:	9813883a 	mov	r9,r19
    5638:	e011883a 	mov	r8,fp
    563c:	b4a5c83a 	sub	r18,r22,r18
    5640:	003db306 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    5644:	9cc00c04 	addi	r19,r19,48
    5648:	db001dc4 	addi	r12,sp,119
    564c:	dcc01dc5 	stb	r19,119(sp)
    5650:	dc803d17 	ldw	r18,244(sp)
    5654:	db003115 	stw	r12,196(sp)
    5658:	003dad06 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    565c:	00801944 	movi	r2,101
    5660:	14008d0e 	bge	r2,r16,5898 <___svfprintf_internal_r+0x1024>
    5664:	d9003717 	ldw	r4,220(sp)
    5668:	d9403817 	ldw	r5,224(sp)
    566c:	000d883a 	mov	r6,zero
    5670:	000f883a 	mov	r7,zero
    5674:	d8c03e15 	stw	r3,248(sp)
    5678:	da004015 	stw	r8,256(sp)
    567c:	00127bc0 	call	127bc <__eqdf2>
    5680:	d8c03e17 	ldw	r3,248(sp)
    5684:	da004017 	ldw	r8,256(sp)
    5688:	1000fd1e 	bne	r2,zero,5a80 <___svfprintf_internal_r+0x120c>
    568c:	d8801f17 	ldw	r2,124(sp)
    5690:	010000b4 	movhi	r4,2
    5694:	2116be04 	addi	r4,r4,23288
    5698:	18c00044 	addi	r3,r3,1
    569c:	10800044 	addi	r2,r2,1
    56a0:	41000015 	stw	r4,0(r8)
    56a4:	01000044 	movi	r4,1
    56a8:	41000115 	stw	r4,4(r8)
    56ac:	d8c02015 	stw	r3,128(sp)
    56b0:	d8801f15 	stw	r2,124(sp)
    56b4:	010001c4 	movi	r4,7
    56b8:	20823316 	blt	r4,r2,5f88 <___svfprintf_internal_r+0x1714>
    56bc:	42000204 	addi	r8,r8,8
    56c0:	d8802617 	ldw	r2,152(sp)
    56c4:	dac03317 	ldw	r11,204(sp)
    56c8:	12c00216 	blt	r2,r11,56d4 <___svfprintf_internal_r+0xe60>
    56cc:	8880004c 	andi	r2,r17,1
    56d0:	103e3d26 	beq	r2,zero,4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    56d4:	db003917 	ldw	r12,228(sp)
    56d8:	d8801f17 	ldw	r2,124(sp)
    56dc:	dac03517 	ldw	r11,212(sp)
    56e0:	1b07883a 	add	r3,r3,r12
    56e4:	10800044 	addi	r2,r2,1
    56e8:	42c00015 	stw	r11,0(r8)
    56ec:	43000115 	stw	r12,4(r8)
    56f0:	d8c02015 	stw	r3,128(sp)
    56f4:	d8801f15 	stw	r2,124(sp)
    56f8:	010001c4 	movi	r4,7
    56fc:	20826f16 	blt	r4,r2,60bc <___svfprintf_internal_r+0x1848>
    5700:	42000204 	addi	r8,r8,8
    5704:	db003317 	ldw	r12,204(sp)
    5708:	643fffc4 	addi	r16,r12,-1
    570c:	043e2e0e 	bge	zero,r16,4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    5710:	04800404 	movi	r18,16
    5714:	d8801f17 	ldw	r2,124(sp)
    5718:	9400a00e 	bge	r18,r16,599c <___svfprintf_internal_r+0x1128>
    571c:	014000b4 	movhi	r5,2
    5720:	2956be84 	addi	r5,r5,23290
    5724:	d9402b15 	stw	r5,172(sp)
    5728:	054001c4 	movi	r21,7
    572c:	dcc02f17 	ldw	r19,188(sp)
    5730:	00000306 	br	5740 <___svfprintf_internal_r+0xecc>
    5734:	42000204 	addi	r8,r8,8
    5738:	843ffc04 	addi	r16,r16,-16
    573c:	94009a0e 	bge	r18,r16,59a8 <___svfprintf_internal_r+0x1134>
    5740:	18c00404 	addi	r3,r3,16
    5744:	10800044 	addi	r2,r2,1
    5748:	45000015 	stw	r20,0(r8)
    574c:	44800115 	stw	r18,4(r8)
    5750:	d8c02015 	stw	r3,128(sp)
    5754:	d8801f15 	stw	r2,124(sp)
    5758:	a8bff60e 	bge	r21,r2,5734 <__alt_mem_Flash_flash_data+0xf4005734>
    575c:	9809883a 	mov	r4,r19
    5760:	b80b883a 	mov	r5,r23
    5764:	b00d883a 	mov	r6,r22
    5768:	000da180 	call	da18 <__ssprint_r>
    576c:	103d091e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5770:	d8c02017 	ldw	r3,128(sp)
    5774:	d8801f17 	ldw	r2,124(sp)
    5778:	da000404 	addi	r8,sp,16
    577c:	003fee06 	br	5738 <__alt_mem_Flash_flash_data+0xf4005738>
    5780:	dac02e17 	ldw	r11,184(sp)
    5784:	db002a17 	ldw	r12,168(sp)
    5788:	5b2bc83a 	sub	r21,r11,r12
    578c:	057dcd0e 	bge	zero,r21,4ec4 <__alt_mem_Flash_flash_data+0xf4004ec4>
    5790:	07000404 	movi	fp,16
    5794:	d8801f17 	ldw	r2,124(sp)
    5798:	e5435d0e 	bge	fp,r21,6510 <___svfprintf_internal_r+0x1c9c>
    579c:	014000b4 	movhi	r5,2
    57a0:	a809883a 	mov	r4,r21
    57a4:	2956be84 	addi	r5,r5,23290
    57a8:	dc002c15 	stw	r16,176(sp)
    57ac:	902b883a 	mov	r21,r18
    57b0:	d9402b15 	stw	r5,172(sp)
    57b4:	8825883a 	mov	r18,r17
    57b8:	04c001c4 	movi	r19,7
    57bc:	dc002f17 	ldw	r16,188(sp)
    57c0:	2023883a 	mov	r17,r4
    57c4:	00000306 	br	57d4 <___svfprintf_internal_r+0xf60>
    57c8:	8c7ffc04 	addi	r17,r17,-16
    57cc:	42000204 	addi	r8,r8,8
    57d0:	e440110e 	bge	fp,r17,5818 <___svfprintf_internal_r+0xfa4>
    57d4:	18c00404 	addi	r3,r3,16
    57d8:	10800044 	addi	r2,r2,1
    57dc:	45000015 	stw	r20,0(r8)
    57e0:	47000115 	stw	fp,4(r8)
    57e4:	d8c02015 	stw	r3,128(sp)
    57e8:	d8801f15 	stw	r2,124(sp)
    57ec:	98bff60e 	bge	r19,r2,57c8 <__alt_mem_Flash_flash_data+0xf40057c8>
    57f0:	8009883a 	mov	r4,r16
    57f4:	b80b883a 	mov	r5,r23
    57f8:	b00d883a 	mov	r6,r22
    57fc:	000da180 	call	da18 <__ssprint_r>
    5800:	103ce41e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5804:	8c7ffc04 	addi	r17,r17,-16
    5808:	d8c02017 	ldw	r3,128(sp)
    580c:	d8801f17 	ldw	r2,124(sp)
    5810:	da000404 	addi	r8,sp,16
    5814:	e47fef16 	blt	fp,r17,57d4 <__alt_mem_Flash_flash_data+0xf40057d4>
    5818:	dc002c17 	ldw	r16,176(sp)
    581c:	8809883a 	mov	r4,r17
    5820:	9023883a 	mov	r17,r18
    5824:	a825883a 	mov	r18,r21
    5828:	202b883a 	mov	r21,r4
    582c:	dac02b17 	ldw	r11,172(sp)
    5830:	1d47883a 	add	r3,r3,r21
    5834:	10800044 	addi	r2,r2,1
    5838:	42c00015 	stw	r11,0(r8)
    583c:	45400115 	stw	r21,4(r8)
    5840:	d8c02015 	stw	r3,128(sp)
    5844:	d8801f15 	stw	r2,124(sp)
    5848:	010001c4 	movi	r4,7
    584c:	20818016 	blt	r4,r2,5e50 <___svfprintf_internal_r+0x15dc>
    5850:	42000204 	addi	r8,r8,8
    5854:	003d9b06 	br	4ec4 <__alt_mem_Flash_flash_data+0xf4004ec4>
    5858:	d9403b17 	ldw	r5,236(sp)
    585c:	b007883a 	mov	r3,r22
    5860:	988003cc 	andi	r2,r19,15
    5864:	e008973a 	slli	r4,fp,28
    5868:	2885883a 	add	r2,r5,r2
    586c:	9826d13a 	srli	r19,r19,4
    5870:	10800003 	ldbu	r2,0(r2)
    5874:	e038d13a 	srli	fp,fp,4
    5878:	18ffffc4 	addi	r3,r3,-1
    587c:	24e6b03a 	or	r19,r4,r19
    5880:	18800005 	stb	r2,0(r3)
    5884:	9f04b03a 	or	r2,r19,fp
    5888:	103ff51e 	bne	r2,zero,5860 <__alt_mem_Flash_flash_data+0xf4005860>
    588c:	d8c03115 	stw	r3,196(sp)
    5890:	b0e5c83a 	sub	r18,r22,r3
    5894:	003d1e06 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    5898:	db003317 	ldw	r12,204(sp)
    589c:	00800044 	movi	r2,1
    58a0:	18c00044 	addi	r3,r3,1
    58a4:	13014b0e 	bge	r2,r12,5dd4 <___svfprintf_internal_r+0x1560>
    58a8:	dc001f17 	ldw	r16,124(sp)
    58ac:	dac03117 	ldw	r11,196(sp)
    58b0:	00800044 	movi	r2,1
    58b4:	84000044 	addi	r16,r16,1
    58b8:	40800115 	stw	r2,4(r8)
    58bc:	42c00015 	stw	r11,0(r8)
    58c0:	d8c02015 	stw	r3,128(sp)
    58c4:	dc001f15 	stw	r16,124(sp)
    58c8:	008001c4 	movi	r2,7
    58cc:	14014e16 	blt	r2,r16,5e08 <___svfprintf_internal_r+0x1594>
    58d0:	42000204 	addi	r8,r8,8
    58d4:	db003917 	ldw	r12,228(sp)
    58d8:	dac03517 	ldw	r11,212(sp)
    58dc:	84000044 	addi	r16,r16,1
    58e0:	1b07883a 	add	r3,r3,r12
    58e4:	42c00015 	stw	r11,0(r8)
    58e8:	43000115 	stw	r12,4(r8)
    58ec:	d8c02015 	stw	r3,128(sp)
    58f0:	dc001f15 	stw	r16,124(sp)
    58f4:	008001c4 	movi	r2,7
    58f8:	14014c16 	blt	r2,r16,5e2c <___svfprintf_internal_r+0x15b8>
    58fc:	44800204 	addi	r18,r8,8
    5900:	d9003717 	ldw	r4,220(sp)
    5904:	d9403817 	ldw	r5,224(sp)
    5908:	000d883a 	mov	r6,zero
    590c:	000f883a 	mov	r7,zero
    5910:	d8c03e15 	stw	r3,248(sp)
    5914:	00127bc0 	call	127bc <__eqdf2>
    5918:	d8c03e17 	ldw	r3,248(sp)
    591c:	db003317 	ldw	r12,204(sp)
    5920:	10009526 	beq	r2,zero,5b78 <___svfprintf_internal_r+0x1304>
    5924:	dac03117 	ldw	r11,196(sp)
    5928:	60bfffc4 	addi	r2,r12,-1
    592c:	1887883a 	add	r3,r3,r2
    5930:	59000044 	addi	r4,r11,1
    5934:	84000044 	addi	r16,r16,1
    5938:	90800115 	stw	r2,4(r18)
    593c:	91000015 	stw	r4,0(r18)
    5940:	d8c02015 	stw	r3,128(sp)
    5944:	dc001f15 	stw	r16,124(sp)
    5948:	008001c4 	movi	r2,7
    594c:	1400b316 	blt	r2,r16,5c1c <___svfprintf_internal_r+0x13a8>
    5950:	94800204 	addi	r18,r18,8
    5954:	dac03a17 	ldw	r11,232(sp)
    5958:	dd4022c4 	addi	r21,sp,139
    595c:	84000044 	addi	r16,r16,1
    5960:	1ac7883a 	add	r3,r3,r11
    5964:	95400015 	stw	r21,0(r18)
    5968:	92c00115 	stw	r11,4(r18)
    596c:	d8c02015 	stw	r3,128(sp)
    5970:	dc001f15 	stw	r16,124(sp)
    5974:	008001c4 	movi	r2,7
    5978:	14001416 	blt	r2,r16,59cc <___svfprintf_internal_r+0x1158>
    597c:	92000204 	addi	r8,r18,8
    5980:	003d9106 	br	4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    5984:	d9002f17 	ldw	r4,188(sp)
    5988:	b80b883a 	mov	r5,r23
    598c:	b00d883a 	mov	r6,r22
    5990:	000da180 	call	da18 <__ssprint_r>
    5994:	103dc826 	beq	r2,zero,50b8 <__alt_mem_Flash_flash_data+0xf40050b8>
    5998:	003c7e06 	br	4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    599c:	010000b4 	movhi	r4,2
    59a0:	2116be84 	addi	r4,r4,23290
    59a4:	d9002b15 	stw	r4,172(sp)
    59a8:	dac02b17 	ldw	r11,172(sp)
    59ac:	1c07883a 	add	r3,r3,r16
    59b0:	44000115 	stw	r16,4(r8)
    59b4:	42c00015 	stw	r11,0(r8)
    59b8:	10800044 	addi	r2,r2,1
    59bc:	d8c02015 	stw	r3,128(sp)
    59c0:	d8801f15 	stw	r2,124(sp)
    59c4:	010001c4 	movi	r4,7
    59c8:	20bd7e0e 	bge	r4,r2,4fc4 <__alt_mem_Flash_flash_data+0xf4004fc4>
    59cc:	d9002f17 	ldw	r4,188(sp)
    59d0:	b80b883a 	mov	r5,r23
    59d4:	b00d883a 	mov	r6,r22
    59d8:	000da180 	call	da18 <__ssprint_r>
    59dc:	103c6d1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    59e0:	d8c02017 	ldw	r3,128(sp)
    59e4:	da000404 	addi	r8,sp,16
    59e8:	003d7706 	br	4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    59ec:	10803fcc 	andi	r2,r2,255
    59f0:	1000201e 	bne	r2,zero,5a74 <___svfprintf_internal_r+0x1200>
    59f4:	8880004c 	andi	r2,r17,1
    59f8:	10001e26 	beq	r2,zero,5a74 <___svfprintf_internal_r+0x1200>
    59fc:	00800c04 	movi	r2,48
    5a00:	d8c01dc4 	addi	r3,sp,119
    5a04:	d8801dc5 	stb	r2,119(sp)
    5a08:	dc803d17 	ldw	r18,244(sp)
    5a0c:	d8c03115 	stw	r3,196(sp)
    5a10:	003cbf06 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    5a14:	d9002f17 	ldw	r4,188(sp)
    5a18:	b80b883a 	mov	r5,r23
    5a1c:	b00d883a 	mov	r6,r22
    5a20:	000da180 	call	da18 <__ssprint_r>
    5a24:	103c5b1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5a28:	d8c02017 	ldw	r3,128(sp)
    5a2c:	da000404 	addi	r8,sp,16
    5a30:	003d5806 	br	4f94 <__alt_mem_Flash_flash_data+0xf4004f94>
    5a34:	d9002f17 	ldw	r4,188(sp)
    5a38:	b80b883a 	mov	r5,r23
    5a3c:	b00d883a 	mov	r6,r22
    5a40:	000da180 	call	da18 <__ssprint_r>
    5a44:	103c531e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5a48:	d8c02017 	ldw	r3,128(sp)
    5a4c:	da000404 	addi	r8,sp,16
    5a50:	003d1906 	br	4eb8 <__alt_mem_Flash_flash_data+0xf4004eb8>
    5a54:	d9002f17 	ldw	r4,188(sp)
    5a58:	b80b883a 	mov	r5,r23
    5a5c:	b00d883a 	mov	r6,r22
    5a60:	000da180 	call	da18 <__ssprint_r>
    5a64:	103c4b1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5a68:	d8c02017 	ldw	r3,128(sp)
    5a6c:	da000404 	addi	r8,sp,16
    5a70:	003d0306 	br	4e80 <__alt_mem_Flash_flash_data+0xf4004e80>
    5a74:	0025883a 	mov	r18,zero
    5a78:	dd803115 	stw	r22,196(sp)
    5a7c:	003ca406 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    5a80:	dc002617 	ldw	r16,152(sp)
    5a84:	0401480e 	bge	zero,r16,5fa8 <___svfprintf_internal_r+0x1734>
    5a88:	db003117 	ldw	r12,196(sp)
    5a8c:	dac03317 	ldw	r11,204(sp)
    5a90:	62e1883a 	add	r16,r12,r11
    5a94:	db003417 	ldw	r12,208(sp)
    5a98:	5825883a 	mov	r18,r11
    5a9c:	62c0010e 	bge	r12,r11,5aa4 <___svfprintf_internal_r+0x1230>
    5aa0:	6025883a 	mov	r18,r12
    5aa4:	04800b0e 	bge	zero,r18,5ad4 <___svfprintf_internal_r+0x1260>
    5aa8:	d8801f17 	ldw	r2,124(sp)
    5aac:	dac03117 	ldw	r11,196(sp)
    5ab0:	1c87883a 	add	r3,r3,r18
    5ab4:	10800044 	addi	r2,r2,1
    5ab8:	42c00015 	stw	r11,0(r8)
    5abc:	44800115 	stw	r18,4(r8)
    5ac0:	d8c02015 	stw	r3,128(sp)
    5ac4:	d8801f15 	stw	r2,124(sp)
    5ac8:	010001c4 	movi	r4,7
    5acc:	20823f16 	blt	r4,r2,63cc <___svfprintf_internal_r+0x1b58>
    5ad0:	42000204 	addi	r8,r8,8
    5ad4:	90023b16 	blt	r18,zero,63c4 <___svfprintf_internal_r+0x1b50>
    5ad8:	db003417 	ldw	r12,208(sp)
    5adc:	64a5c83a 	sub	r18,r12,r18
    5ae0:	0480780e 	bge	zero,r18,5cc4 <___svfprintf_internal_r+0x1450>
    5ae4:	05400404 	movi	r21,16
    5ae8:	d8801f17 	ldw	r2,124(sp)
    5aec:	ac81140e 	bge	r21,r18,5f40 <___svfprintf_internal_r+0x16cc>
    5af0:	014000b4 	movhi	r5,2
    5af4:	2956be84 	addi	r5,r5,23290
    5af8:	d9402b15 	stw	r5,172(sp)
    5afc:	070001c4 	movi	fp,7
    5b00:	dcc02f17 	ldw	r19,188(sp)
    5b04:	00000306 	br	5b14 <___svfprintf_internal_r+0x12a0>
    5b08:	42000204 	addi	r8,r8,8
    5b0c:	94bffc04 	addi	r18,r18,-16
    5b10:	ac810e0e 	bge	r21,r18,5f4c <___svfprintf_internal_r+0x16d8>
    5b14:	18c00404 	addi	r3,r3,16
    5b18:	10800044 	addi	r2,r2,1
    5b1c:	45000015 	stw	r20,0(r8)
    5b20:	45400115 	stw	r21,4(r8)
    5b24:	d8c02015 	stw	r3,128(sp)
    5b28:	d8801f15 	stw	r2,124(sp)
    5b2c:	e0bff60e 	bge	fp,r2,5b08 <__alt_mem_Flash_flash_data+0xf4005b08>
    5b30:	9809883a 	mov	r4,r19
    5b34:	b80b883a 	mov	r5,r23
    5b38:	b00d883a 	mov	r6,r22
    5b3c:	000da180 	call	da18 <__ssprint_r>
    5b40:	103c141e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5b44:	d8c02017 	ldw	r3,128(sp)
    5b48:	d8801f17 	ldw	r2,124(sp)
    5b4c:	da000404 	addi	r8,sp,16
    5b50:	003fee06 	br	5b0c <__alt_mem_Flash_flash_data+0xf4005b0c>
    5b54:	d9002f17 	ldw	r4,188(sp)
    5b58:	b80b883a 	mov	r5,r23
    5b5c:	b00d883a 	mov	r6,r22
    5b60:	000da180 	call	da18 <__ssprint_r>
    5b64:	103c0b1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5b68:	d8c02017 	ldw	r3,128(sp)
    5b6c:	d8802787 	ldb	r2,158(sp)
    5b70:	da000404 	addi	r8,sp,16
    5b74:	003cb506 	br	4e4c <__alt_mem_Flash_flash_data+0xf4004e4c>
    5b78:	657fffc4 	addi	r21,r12,-1
    5b7c:	057f750e 	bge	zero,r21,5954 <__alt_mem_Flash_flash_data+0xf4005954>
    5b80:	07000404 	movi	fp,16
    5b84:	e542ed0e 	bge	fp,r21,673c <___svfprintf_internal_r+0x1ec8>
    5b88:	010000b4 	movhi	r4,2
    5b8c:	2116be84 	addi	r4,r4,23290
    5b90:	d9002b15 	stw	r4,172(sp)
    5b94:	01c001c4 	movi	r7,7
    5b98:	dcc02f17 	ldw	r19,188(sp)
    5b9c:	00000306 	br	5bac <___svfprintf_internal_r+0x1338>
    5ba0:	ad7ffc04 	addi	r21,r21,-16
    5ba4:	94800204 	addi	r18,r18,8
    5ba8:	e540130e 	bge	fp,r21,5bf8 <___svfprintf_internal_r+0x1384>
    5bac:	18c00404 	addi	r3,r3,16
    5bb0:	84000044 	addi	r16,r16,1
    5bb4:	95000015 	stw	r20,0(r18)
    5bb8:	97000115 	stw	fp,4(r18)
    5bbc:	d8c02015 	stw	r3,128(sp)
    5bc0:	dc001f15 	stw	r16,124(sp)
    5bc4:	3c3ff60e 	bge	r7,r16,5ba0 <__alt_mem_Flash_flash_data+0xf4005ba0>
    5bc8:	9809883a 	mov	r4,r19
    5bcc:	b80b883a 	mov	r5,r23
    5bd0:	b00d883a 	mov	r6,r22
    5bd4:	d9c03e15 	stw	r7,248(sp)
    5bd8:	000da180 	call	da18 <__ssprint_r>
    5bdc:	d9c03e17 	ldw	r7,248(sp)
    5be0:	103bec1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5be4:	ad7ffc04 	addi	r21,r21,-16
    5be8:	d8c02017 	ldw	r3,128(sp)
    5bec:	dc001f17 	ldw	r16,124(sp)
    5bf0:	dc800404 	addi	r18,sp,16
    5bf4:	e57fed16 	blt	fp,r21,5bac <__alt_mem_Flash_flash_data+0xf4005bac>
    5bf8:	dac02b17 	ldw	r11,172(sp)
    5bfc:	1d47883a 	add	r3,r3,r21
    5c00:	84000044 	addi	r16,r16,1
    5c04:	92c00015 	stw	r11,0(r18)
    5c08:	95400115 	stw	r21,4(r18)
    5c0c:	d8c02015 	stw	r3,128(sp)
    5c10:	dc001f15 	stw	r16,124(sp)
    5c14:	008001c4 	movi	r2,7
    5c18:	143f4d0e 	bge	r2,r16,5950 <__alt_mem_Flash_flash_data+0xf4005950>
    5c1c:	d9002f17 	ldw	r4,188(sp)
    5c20:	b80b883a 	mov	r5,r23
    5c24:	b00d883a 	mov	r6,r22
    5c28:	000da180 	call	da18 <__ssprint_r>
    5c2c:	103bd91e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5c30:	d8c02017 	ldw	r3,128(sp)
    5c34:	dc001f17 	ldw	r16,124(sp)
    5c38:	dc800404 	addi	r18,sp,16
    5c3c:	003f4506 	br	5954 <__alt_mem_Flash_flash_data+0xf4005954>
    5c40:	00800084 	movi	r2,2
    5c44:	9f06b03a 	or	r3,r19,fp
    5c48:	003d5706 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5c4c:	1cc00017 	ldw	r19,0(r3)
    5c50:	dac02d17 	ldw	r11,180(sp)
    5c54:	9839d7fa 	srai	fp,r19,31
    5c58:	5ac00104 	addi	r11,r11,4
    5c5c:	dac02d15 	stw	r11,180(sp)
    5c60:	e005883a 	mov	r2,fp
    5c64:	003c0306 	br	4c74 <__alt_mem_Flash_flash_data+0xf4004c74>
    5c68:	dac02d17 	ldw	r11,180(sp)
    5c6c:	0039883a 	mov	fp,zero
    5c70:	0005883a 	mov	r2,zero
    5c74:	5cc00017 	ldw	r19,0(r11)
    5c78:	5ac00104 	addi	r11,r11,4
    5c7c:	dac02d15 	stw	r11,180(sp)
    5c80:	9807883a 	mov	r3,r19
    5c84:	003d4806 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5c88:	db002d17 	ldw	r12,180(sp)
    5c8c:	14c00017 	ldw	r19,0(r2)
    5c90:	0039883a 	mov	fp,zero
    5c94:	63000104 	addi	r12,r12,4
    5c98:	db002d15 	stw	r12,180(sp)
    5c9c:	00800044 	movi	r2,1
    5ca0:	9807883a 	mov	r3,r19
    5ca4:	003d4006 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5ca8:	d9002f17 	ldw	r4,188(sp)
    5cac:	b80b883a 	mov	r5,r23
    5cb0:	b00d883a 	mov	r6,r22
    5cb4:	000da180 	call	da18 <__ssprint_r>
    5cb8:	103bb61e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5cbc:	d8c02017 	ldw	r3,128(sp)
    5cc0:	da000404 	addi	r8,sp,16
    5cc4:	db003117 	ldw	r12,196(sp)
    5cc8:	dac03417 	ldw	r11,208(sp)
    5ccc:	d8802617 	ldw	r2,152(sp)
    5cd0:	62e5883a 	add	r18,r12,r11
    5cd4:	db003317 	ldw	r12,204(sp)
    5cd8:	13000216 	blt	r2,r12,5ce4 <___svfprintf_internal_r+0x1470>
    5cdc:	8900004c 	andi	r4,r17,1
    5ce0:	20000c26 	beq	r4,zero,5d14 <___svfprintf_internal_r+0x14a0>
    5ce4:	dac03917 	ldw	r11,228(sp)
    5ce8:	d9001f17 	ldw	r4,124(sp)
    5cec:	db003517 	ldw	r12,212(sp)
    5cf0:	1ac7883a 	add	r3,r3,r11
    5cf4:	21000044 	addi	r4,r4,1
    5cf8:	43000015 	stw	r12,0(r8)
    5cfc:	42c00115 	stw	r11,4(r8)
    5d00:	d8c02015 	stw	r3,128(sp)
    5d04:	d9001f15 	stw	r4,124(sp)
    5d08:	014001c4 	movi	r5,7
    5d0c:	2901b716 	blt	r5,r4,63ec <___svfprintf_internal_r+0x1b78>
    5d10:	42000204 	addi	r8,r8,8
    5d14:	dac03317 	ldw	r11,204(sp)
    5d18:	8489c83a 	sub	r4,r16,r18
    5d1c:	5885c83a 	sub	r2,r11,r2
    5d20:	1021883a 	mov	r16,r2
    5d24:	2080010e 	bge	r4,r2,5d2c <___svfprintf_internal_r+0x14b8>
    5d28:	2021883a 	mov	r16,r4
    5d2c:	04000a0e 	bge	zero,r16,5d58 <___svfprintf_internal_r+0x14e4>
    5d30:	d9001f17 	ldw	r4,124(sp)
    5d34:	1c07883a 	add	r3,r3,r16
    5d38:	44800015 	stw	r18,0(r8)
    5d3c:	21000044 	addi	r4,r4,1
    5d40:	44000115 	stw	r16,4(r8)
    5d44:	d8c02015 	stw	r3,128(sp)
    5d48:	d9001f15 	stw	r4,124(sp)
    5d4c:	014001c4 	movi	r5,7
    5d50:	2901bf16 	blt	r5,r4,6450 <___svfprintf_internal_r+0x1bdc>
    5d54:	42000204 	addi	r8,r8,8
    5d58:	8001bb16 	blt	r16,zero,6448 <___svfprintf_internal_r+0x1bd4>
    5d5c:	1421c83a 	sub	r16,r2,r16
    5d60:	043c990e 	bge	zero,r16,4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    5d64:	04800404 	movi	r18,16
    5d68:	d8801f17 	ldw	r2,124(sp)
    5d6c:	943f0b0e 	bge	r18,r16,599c <__alt_mem_Flash_flash_data+0xf400599c>
    5d70:	014000b4 	movhi	r5,2
    5d74:	2956be84 	addi	r5,r5,23290
    5d78:	d9402b15 	stw	r5,172(sp)
    5d7c:	054001c4 	movi	r21,7
    5d80:	dcc02f17 	ldw	r19,188(sp)
    5d84:	00000306 	br	5d94 <___svfprintf_internal_r+0x1520>
    5d88:	42000204 	addi	r8,r8,8
    5d8c:	843ffc04 	addi	r16,r16,-16
    5d90:	943f050e 	bge	r18,r16,59a8 <__alt_mem_Flash_flash_data+0xf40059a8>
    5d94:	18c00404 	addi	r3,r3,16
    5d98:	10800044 	addi	r2,r2,1
    5d9c:	45000015 	stw	r20,0(r8)
    5da0:	44800115 	stw	r18,4(r8)
    5da4:	d8c02015 	stw	r3,128(sp)
    5da8:	d8801f15 	stw	r2,124(sp)
    5dac:	a8bff60e 	bge	r21,r2,5d88 <__alt_mem_Flash_flash_data+0xf4005d88>
    5db0:	9809883a 	mov	r4,r19
    5db4:	b80b883a 	mov	r5,r23
    5db8:	b00d883a 	mov	r6,r22
    5dbc:	000da180 	call	da18 <__ssprint_r>
    5dc0:	103b741e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5dc4:	d8c02017 	ldw	r3,128(sp)
    5dc8:	d8801f17 	ldw	r2,124(sp)
    5dcc:	da000404 	addi	r8,sp,16
    5dd0:	003fee06 	br	5d8c <__alt_mem_Flash_flash_data+0xf4005d8c>
    5dd4:	8888703a 	and	r4,r17,r2
    5dd8:	203eb31e 	bne	r4,zero,58a8 <__alt_mem_Flash_flash_data+0xf40058a8>
    5ddc:	dc001f17 	ldw	r16,124(sp)
    5de0:	db003117 	ldw	r12,196(sp)
    5de4:	40800115 	stw	r2,4(r8)
    5de8:	84000044 	addi	r16,r16,1
    5dec:	43000015 	stw	r12,0(r8)
    5df0:	d8c02015 	stw	r3,128(sp)
    5df4:	dc001f15 	stw	r16,124(sp)
    5df8:	008001c4 	movi	r2,7
    5dfc:	143f8716 	blt	r2,r16,5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5e00:	44800204 	addi	r18,r8,8
    5e04:	003ed306 	br	5954 <__alt_mem_Flash_flash_data+0xf4005954>
    5e08:	d9002f17 	ldw	r4,188(sp)
    5e0c:	b80b883a 	mov	r5,r23
    5e10:	b00d883a 	mov	r6,r22
    5e14:	000da180 	call	da18 <__ssprint_r>
    5e18:	103b5e1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5e1c:	d8c02017 	ldw	r3,128(sp)
    5e20:	dc001f17 	ldw	r16,124(sp)
    5e24:	da000404 	addi	r8,sp,16
    5e28:	003eaa06 	br	58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    5e2c:	d9002f17 	ldw	r4,188(sp)
    5e30:	b80b883a 	mov	r5,r23
    5e34:	b00d883a 	mov	r6,r22
    5e38:	000da180 	call	da18 <__ssprint_r>
    5e3c:	103b551e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5e40:	d8c02017 	ldw	r3,128(sp)
    5e44:	dc001f17 	ldw	r16,124(sp)
    5e48:	dc800404 	addi	r18,sp,16
    5e4c:	003eac06 	br	5900 <__alt_mem_Flash_flash_data+0xf4005900>
    5e50:	d9002f17 	ldw	r4,188(sp)
    5e54:	b80b883a 	mov	r5,r23
    5e58:	b00d883a 	mov	r6,r22
    5e5c:	000da180 	call	da18 <__ssprint_r>
    5e60:	103b4c1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5e64:	d8c02017 	ldw	r3,128(sp)
    5e68:	da000404 	addi	r8,sp,16
    5e6c:	003c1506 	br	4ec4 <__alt_mem_Flash_flash_data+0xf4004ec4>
    5e70:	da004015 	stw	r8,256(sp)
    5e74:	da403f15 	stw	r9,252(sp)
    5e78:	000d7700 	call	d770 <__fpclassifyd>
    5e7c:	da004017 	ldw	r8,256(sp)
    5e80:	da403f17 	ldw	r9,252(sp)
    5e84:	1000951e 	bne	r2,zero,60dc <___svfprintf_internal_r+0x1868>
    5e88:	008011c4 	movi	r2,71
    5e8c:	1400fb16 	blt	r2,r16,627c <___svfprintf_internal_r+0x1a08>
    5e90:	030000b4 	movhi	r12,2
    5e94:	6316b004 	addi	r12,r12,23232
    5e98:	db003115 	stw	r12,196(sp)
    5e9c:	00c000c4 	movi	r3,3
    5ea0:	00bfdfc4 	movi	r2,-129
    5ea4:	d8c02a15 	stw	r3,168(sp)
    5ea8:	88a2703a 	and	r17,r17,r2
    5eac:	dd402783 	ldbu	r21,158(sp)
    5eb0:	dcc02d15 	stw	r19,180(sp)
    5eb4:	1825883a 	mov	r18,r3
    5eb8:	d8003215 	stw	zero,200(sp)
    5ebc:	d8003415 	stw	zero,208(sp)
    5ec0:	003b9806 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    5ec4:	1c000007 	ldb	r16,0(r3)
    5ec8:	1805883a 	mov	r2,r3
    5ecc:	003abf06 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    5ed0:	00800084 	movi	r2,2
    5ed4:	003cb406 	br	51a8 <__alt_mem_Flash_flash_data+0xf40051a8>
    5ed8:	88c0100c 	andi	r3,r17,64
    5edc:	1800f626 	beq	r3,zero,62b8 <___svfprintf_internal_r+0x1a44>
    5ee0:	dac02d17 	ldw	r11,180(sp)
    5ee4:	14c0000b 	ldhu	r19,0(r2)
    5ee8:	0039883a 	mov	fp,zero
    5eec:	5ac00104 	addi	r11,r11,4
    5ef0:	dac02d15 	stw	r11,180(sp)
    5ef4:	003cbd06 	br	51ec <__alt_mem_Flash_flash_data+0xf40051ec>
    5ef8:	8880040c 	andi	r2,r17,16
    5efc:	1000091e 	bne	r2,zero,5f24 <___svfprintf_internal_r+0x16b0>
    5f00:	8c40100c 	andi	r17,r17,64
    5f04:	88000726 	beq	r17,zero,5f24 <___svfprintf_internal_r+0x16b0>
    5f08:	db002d17 	ldw	r12,180(sp)
    5f0c:	dac03017 	ldw	r11,192(sp)
    5f10:	60800017 	ldw	r2,0(r12)
    5f14:	63000104 	addi	r12,r12,4
    5f18:	db002d15 	stw	r12,180(sp)
    5f1c:	12c0000d 	sth	r11,0(r2)
    5f20:	003a8006 	br	4924 <__alt_mem_Flash_flash_data+0xf4004924>
    5f24:	db002d17 	ldw	r12,180(sp)
    5f28:	dac03017 	ldw	r11,192(sp)
    5f2c:	60800017 	ldw	r2,0(r12)
    5f30:	63000104 	addi	r12,r12,4
    5f34:	db002d15 	stw	r12,180(sp)
    5f38:	12c00015 	stw	r11,0(r2)
    5f3c:	003a7906 	br	4924 <__alt_mem_Flash_flash_data+0xf4004924>
    5f40:	010000b4 	movhi	r4,2
    5f44:	2116be84 	addi	r4,r4,23290
    5f48:	d9002b15 	stw	r4,172(sp)
    5f4c:	dac02b17 	ldw	r11,172(sp)
    5f50:	1c87883a 	add	r3,r3,r18
    5f54:	10800044 	addi	r2,r2,1
    5f58:	42c00015 	stw	r11,0(r8)
    5f5c:	44800115 	stw	r18,4(r8)
    5f60:	d8c02015 	stw	r3,128(sp)
    5f64:	d8801f15 	stw	r2,124(sp)
    5f68:	010001c4 	movi	r4,7
    5f6c:	20bf4e16 	blt	r4,r2,5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    5f70:	42000204 	addi	r8,r8,8
    5f74:	003f5306 	br	5cc4 <__alt_mem_Flash_flash_data+0xf4005cc4>
    5f78:	010000b4 	movhi	r4,2
    5f7c:	2116be84 	addi	r4,r4,23290
    5f80:	d9002b15 	stw	r4,172(sp)
    5f84:	003bf906 	br	4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    5f88:	d9002f17 	ldw	r4,188(sp)
    5f8c:	b80b883a 	mov	r5,r23
    5f90:	b00d883a 	mov	r6,r22
    5f94:	000da180 	call	da18 <__ssprint_r>
    5f98:	103afe1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    5f9c:	d8c02017 	ldw	r3,128(sp)
    5fa0:	da000404 	addi	r8,sp,16
    5fa4:	003dc606 	br	56c0 <__alt_mem_Flash_flash_data+0xf40056c0>
    5fa8:	d8801f17 	ldw	r2,124(sp)
    5fac:	030000b4 	movhi	r12,2
    5fb0:	01000044 	movi	r4,1
    5fb4:	18c00044 	addi	r3,r3,1
    5fb8:	10800044 	addi	r2,r2,1
    5fbc:	6316be04 	addi	r12,r12,23288
    5fc0:	41000115 	stw	r4,4(r8)
    5fc4:	43000015 	stw	r12,0(r8)
    5fc8:	d8c02015 	stw	r3,128(sp)
    5fcc:	d8801f15 	stw	r2,124(sp)
    5fd0:	010001c4 	movi	r4,7
    5fd4:	2080ad16 	blt	r4,r2,628c <___svfprintf_internal_r+0x1a18>
    5fd8:	42000204 	addi	r8,r8,8
    5fdc:	8000041e 	bne	r16,zero,5ff0 <___svfprintf_internal_r+0x177c>
    5fe0:	dac03317 	ldw	r11,204(sp)
    5fe4:	5800021e 	bne	r11,zero,5ff0 <___svfprintf_internal_r+0x177c>
    5fe8:	8880004c 	andi	r2,r17,1
    5fec:	103bf626 	beq	r2,zero,4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    5ff0:	db003917 	ldw	r12,228(sp)
    5ff4:	d8801f17 	ldw	r2,124(sp)
    5ff8:	dac03517 	ldw	r11,212(sp)
    5ffc:	1b07883a 	add	r3,r3,r12
    6000:	10800044 	addi	r2,r2,1
    6004:	42c00015 	stw	r11,0(r8)
    6008:	43000115 	stw	r12,4(r8)
    600c:	d8c02015 	stw	r3,128(sp)
    6010:	d8801f15 	stw	r2,124(sp)
    6014:	010001c4 	movi	r4,7
    6018:	20818616 	blt	r4,r2,6634 <___svfprintf_internal_r+0x1dc0>
    601c:	42000204 	addi	r8,r8,8
    6020:	0421c83a 	sub	r16,zero,r16
    6024:	0400bc0e 	bge	zero,r16,6318 <___svfprintf_internal_r+0x1aa4>
    6028:	04800404 	movi	r18,16
    602c:	9400f80e 	bge	r18,r16,6410 <___svfprintf_internal_r+0x1b9c>
    6030:	010000b4 	movhi	r4,2
    6034:	2116be84 	addi	r4,r4,23290
    6038:	d9002b15 	stw	r4,172(sp)
    603c:	054001c4 	movi	r21,7
    6040:	dcc02f17 	ldw	r19,188(sp)
    6044:	00000306 	br	6054 <___svfprintf_internal_r+0x17e0>
    6048:	42000204 	addi	r8,r8,8
    604c:	843ffc04 	addi	r16,r16,-16
    6050:	9400f20e 	bge	r18,r16,641c <___svfprintf_internal_r+0x1ba8>
    6054:	18c00404 	addi	r3,r3,16
    6058:	10800044 	addi	r2,r2,1
    605c:	45000015 	stw	r20,0(r8)
    6060:	44800115 	stw	r18,4(r8)
    6064:	d8c02015 	stw	r3,128(sp)
    6068:	d8801f15 	stw	r2,124(sp)
    606c:	a8bff60e 	bge	r21,r2,6048 <__alt_mem_Flash_flash_data+0xf4006048>
    6070:	9809883a 	mov	r4,r19
    6074:	b80b883a 	mov	r5,r23
    6078:	b00d883a 	mov	r6,r22
    607c:	000da180 	call	da18 <__ssprint_r>
    6080:	103ac41e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    6084:	d8c02017 	ldw	r3,128(sp)
    6088:	d8801f17 	ldw	r2,124(sp)
    608c:	da000404 	addi	r8,sp,16
    6090:	003fee06 	br	604c <__alt_mem_Flash_flash_data+0xf400604c>
    6094:	db002e17 	ldw	r12,184(sp)
    6098:	1805883a 	mov	r2,r3
    609c:	dac02d15 	stw	r11,180(sp)
    60a0:	0319c83a 	sub	r12,zero,r12
    60a4:	db002e15 	stw	r12,184(sp)
    60a8:	003acf06 	br	4be8 <__alt_mem_Flash_flash_data+0xf4004be8>
    60ac:	18800044 	addi	r2,r3,1
    60b0:	8c400814 	ori	r17,r17,32
    60b4:	1c000047 	ldb	r16,1(r3)
    60b8:	003a4406 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    60bc:	d9002f17 	ldw	r4,188(sp)
    60c0:	b80b883a 	mov	r5,r23
    60c4:	b00d883a 	mov	r6,r22
    60c8:	000da180 	call	da18 <__ssprint_r>
    60cc:	103ab11e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    60d0:	d8c02017 	ldw	r3,128(sp)
    60d4:	da000404 	addi	r8,sp,16
    60d8:	003d8a06 	br	5704 <__alt_mem_Flash_flash_data+0xf4005704>
    60dc:	057ff7c4 	movi	r21,-33
    60e0:	00bfffc4 	movi	r2,-1
    60e4:	856a703a 	and	r21,r16,r21
    60e8:	48807126 	beq	r9,r2,62b0 <___svfprintf_internal_r+0x1a3c>
    60ec:	008011c4 	movi	r2,71
    60f0:	a8814d26 	beq	r21,r2,6628 <___svfprintf_internal_r+0x1db4>
    60f4:	db003817 	ldw	r12,224(sp)
    60f8:	8ac04014 	ori	r11,r17,256
    60fc:	dac02d15 	stw	r11,180(sp)
    6100:	60015616 	blt	r12,zero,665c <___svfprintf_internal_r+0x1de8>
    6104:	dc803817 	ldw	r18,224(sp)
    6108:	d8002a05 	stb	zero,168(sp)
    610c:	00801984 	movi	r2,102
    6110:	80808c26 	beq	r16,r2,6344 <___svfprintf_internal_r+0x1ad0>
    6114:	00801184 	movi	r2,70
    6118:	80808a26 	beq	r16,r2,6344 <___svfprintf_internal_r+0x1ad0>
    611c:	00801144 	movi	r2,69
    6120:	a8815226 	beq	r21,r2,666c <___svfprintf_internal_r+0x1df8>
    6124:	4839883a 	mov	fp,r9
    6128:	d8802604 	addi	r2,sp,152
    612c:	d8800115 	stw	r2,4(sp)
    6130:	d9002f17 	ldw	r4,188(sp)
    6134:	d8802504 	addi	r2,sp,148
    6138:	d9403717 	ldw	r5,220(sp)
    613c:	d8800215 	stw	r2,8(sp)
    6140:	d8802104 	addi	r2,sp,132
    6144:	df000015 	stw	fp,0(sp)
    6148:	d8800315 	stw	r2,12(sp)
    614c:	900d883a 	mov	r6,r18
    6150:	01c00084 	movi	r7,2
    6154:	da004015 	stw	r8,256(sp)
    6158:	da403f15 	stw	r9,252(sp)
    615c:	0008b880 	call	8b88 <_dtoa_r>
    6160:	d8803115 	stw	r2,196(sp)
    6164:	008019c4 	movi	r2,103
    6168:	da004017 	ldw	r8,256(sp)
    616c:	da403f17 	ldw	r9,252(sp)
    6170:	80800226 	beq	r16,r2,617c <___svfprintf_internal_r+0x1908>
    6174:	008011c4 	movi	r2,71
    6178:	8080841e 	bne	r16,r2,638c <___svfprintf_internal_r+0x1b18>
    617c:	8880004c 	andi	r2,r17,1
    6180:	10014f26 	beq	r2,zero,66c0 <___svfprintf_internal_r+0x1e4c>
    6184:	db003117 	ldw	r12,196(sp)
    6188:	6715883a 	add	r10,r12,fp
    618c:	d9003717 	ldw	r4,220(sp)
    6190:	900b883a 	mov	r5,r18
    6194:	000d883a 	mov	r6,zero
    6198:	000f883a 	mov	r7,zero
    619c:	da004015 	stw	r8,256(sp)
    61a0:	da403f15 	stw	r9,252(sp)
    61a4:	da803e15 	stw	r10,248(sp)
    61a8:	00127bc0 	call	127bc <__eqdf2>
    61ac:	da004017 	ldw	r8,256(sp)
    61b0:	da403f17 	ldw	r9,252(sp)
    61b4:	da803e17 	ldw	r10,248(sp)
    61b8:	1000d926 	beq	r2,zero,6520 <___svfprintf_internal_r+0x1cac>
    61bc:	d8802117 	ldw	r2,132(sp)
    61c0:	1280062e 	bgeu	r2,r10,61dc <___svfprintf_internal_r+0x1968>
    61c4:	01000c04 	movi	r4,48
    61c8:	10c00044 	addi	r3,r2,1
    61cc:	d8c02115 	stw	r3,132(sp)
    61d0:	11000005 	stb	r4,0(r2)
    61d4:	d8802117 	ldw	r2,132(sp)
    61d8:	12bffb36 	bltu	r2,r10,61c8 <__alt_mem_Flash_flash_data+0xf40061c8>
    61dc:	db003117 	ldw	r12,196(sp)
    61e0:	1305c83a 	sub	r2,r2,r12
    61e4:	d8803315 	stw	r2,204(sp)
    61e8:	008011c4 	movi	r2,71
    61ec:	a880b626 	beq	r21,r2,64c8 <___svfprintf_internal_r+0x1c54>
    61f0:	00801944 	movi	r2,101
    61f4:	14017c0e 	bge	r2,r16,67e8 <___svfprintf_internal_r+0x1f74>
    61f8:	00801984 	movi	r2,102
    61fc:	80812626 	beq	r16,r2,6698 <___svfprintf_internal_r+0x1e24>
    6200:	db002617 	ldw	r12,152(sp)
    6204:	db003415 	stw	r12,208(sp)
    6208:	db003417 	ldw	r12,208(sp)
    620c:	dac03317 	ldw	r11,204(sp)
    6210:	62c11816 	blt	r12,r11,6674 <___svfprintf_internal_r+0x1e00>
    6214:	8c40004c 	andi	r17,r17,1
    6218:	88013b1e 	bne	r17,zero,6708 <___svfprintf_internal_r+0x1e94>
    621c:	6005883a 	mov	r2,r12
    6220:	60012516 	blt	r12,zero,66b8 <___svfprintf_internal_r+0x1e44>
    6224:	dc803417 	ldw	r18,208(sp)
    6228:	df002a07 	ldb	fp,168(sp)
    622c:	e000b01e 	bne	fp,zero,64f0 <___svfprintf_internal_r+0x1c7c>
    6230:	dc402d17 	ldw	r17,180(sp)
    6234:	dd402783 	ldbu	r21,158(sp)
    6238:	d8802a15 	stw	r2,168(sp)
    623c:	dcc02d15 	stw	r19,180(sp)
    6240:	d8003215 	stw	zero,200(sp)
    6244:	003ab706 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    6248:	008000b4 	movhi	r2,2
    624c:	1096ae04 	addi	r2,r2,23224
    6250:	d8803115 	stw	r2,196(sp)
    6254:	003bbb06 	br	5144 <__alt_mem_Flash_flash_data+0xf4005144>
    6258:	d9002f17 	ldw	r4,188(sp)
    625c:	04001004 	movi	r16,64
    6260:	800b883a 	mov	r5,r16
    6264:	000b5d80 	call	b5d8 <_malloc_r>
    6268:	b8800015 	stw	r2,0(r23)
    626c:	b8800415 	stw	r2,16(r23)
    6270:	10015f26 	beq	r2,zero,67f0 <___svfprintf_internal_r+0x1f7c>
    6274:	bc000515 	stw	r16,20(r23)
    6278:	00399806 	br	48dc <__alt_mem_Flash_flash_data+0xf40048dc>
    627c:	008000b4 	movhi	r2,2
    6280:	1096b104 	addi	r2,r2,23236
    6284:	d8803115 	stw	r2,196(sp)
    6288:	003f0406 	br	5e9c <__alt_mem_Flash_flash_data+0xf4005e9c>
    628c:	d9002f17 	ldw	r4,188(sp)
    6290:	b80b883a 	mov	r5,r23
    6294:	b00d883a 	mov	r6,r22
    6298:	000da180 	call	da18 <__ssprint_r>
    629c:	103a3d1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    62a0:	dc002617 	ldw	r16,152(sp)
    62a4:	d8c02017 	ldw	r3,128(sp)
    62a8:	da000404 	addi	r8,sp,16
    62ac:	003f4b06 	br	5fdc <__alt_mem_Flash_flash_data+0xf4005fdc>
    62b0:	02400184 	movi	r9,6
    62b4:	003f8f06 	br	60f4 <__alt_mem_Flash_flash_data+0xf40060f4>
    62b8:	db002d17 	ldw	r12,180(sp)
    62bc:	14c00017 	ldw	r19,0(r2)
    62c0:	0039883a 	mov	fp,zero
    62c4:	63000104 	addi	r12,r12,4
    62c8:	db002d15 	stw	r12,180(sp)
    62cc:	003bc706 	br	51ec <__alt_mem_Flash_flash_data+0xf40051ec>
    62d0:	d8c03117 	ldw	r3,196(sp)
    62d4:	b0e5c83a 	sub	r18,r22,r3
    62d8:	003a8d06 	br	4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    62dc:	da004015 	stw	r8,256(sp)
    62e0:	00047dc0 	call	47dc <strlen>
    62e4:	1025883a 	mov	r18,r2
    62e8:	da004017 	ldw	r8,256(sp)
    62ec:	903bf20e 	bge	r18,zero,52b8 <__alt_mem_Flash_flash_data+0xf40052b8>
    62f0:	0005883a 	mov	r2,zero
    62f4:	003bf006 	br	52b8 <__alt_mem_Flash_flash_data+0xf40052b8>
    62f8:	d9002f17 	ldw	r4,188(sp)
    62fc:	b80b883a 	mov	r5,r23
    6300:	b00d883a 	mov	r6,r22
    6304:	000da180 	call	da18 <__ssprint_r>
    6308:	103a221e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    630c:	d8c02017 	ldw	r3,128(sp)
    6310:	d8801f17 	ldw	r2,124(sp)
    6314:	da000404 	addi	r8,sp,16
    6318:	db003317 	ldw	r12,204(sp)
    631c:	dac03117 	ldw	r11,196(sp)
    6320:	10800044 	addi	r2,r2,1
    6324:	1b07883a 	add	r3,r3,r12
    6328:	42c00015 	stw	r11,0(r8)
    632c:	43000115 	stw	r12,4(r8)
    6330:	d8c02015 	stw	r3,128(sp)
    6334:	d8801f15 	stw	r2,124(sp)
    6338:	010001c4 	movi	r4,7
    633c:	20bb210e 	bge	r4,r2,4fc4 <__alt_mem_Flash_flash_data+0xf4004fc4>
    6340:	003da206 	br	59cc <__alt_mem_Flash_flash_data+0xf40059cc>
    6344:	d8802604 	addi	r2,sp,152
    6348:	d8800115 	stw	r2,4(sp)
    634c:	d9002f17 	ldw	r4,188(sp)
    6350:	d8802504 	addi	r2,sp,148
    6354:	d9403717 	ldw	r5,220(sp)
    6358:	d8800215 	stw	r2,8(sp)
    635c:	d8802104 	addi	r2,sp,132
    6360:	da400015 	stw	r9,0(sp)
    6364:	d8800315 	stw	r2,12(sp)
    6368:	900d883a 	mov	r6,r18
    636c:	01c000c4 	movi	r7,3
    6370:	da004015 	stw	r8,256(sp)
    6374:	da403f15 	stw	r9,252(sp)
    6378:	0008b880 	call	8b88 <_dtoa_r>
    637c:	da403f17 	ldw	r9,252(sp)
    6380:	da004017 	ldw	r8,256(sp)
    6384:	d8803115 	stw	r2,196(sp)
    6388:	4839883a 	mov	fp,r9
    638c:	dac03117 	ldw	r11,196(sp)
    6390:	00801184 	movi	r2,70
    6394:	5f15883a 	add	r10,r11,fp
    6398:	a8bf7c1e 	bne	r21,r2,618c <__alt_mem_Flash_flash_data+0xf400618c>
    639c:	59000007 	ldb	r4,0(r11)
    63a0:	00800c04 	movi	r2,48
    63a4:	2080c826 	beq	r4,r2,66c8 <___svfprintf_internal_r+0x1e54>
    63a8:	d8c02617 	ldw	r3,152(sp)
    63ac:	50d5883a 	add	r10,r10,r3
    63b0:	003f7606 	br	618c <__alt_mem_Flash_flash_data+0xf400618c>
    63b4:	010000b4 	movhi	r4,2
    63b8:	2116c284 	addi	r4,r4,23306
    63bc:	d9003615 	stw	r4,216(sp)
    63c0:	003a9706 	br	4e20 <__alt_mem_Flash_flash_data+0xf4004e20>
    63c4:	0025883a 	mov	r18,zero
    63c8:	003dc306 	br	5ad8 <__alt_mem_Flash_flash_data+0xf4005ad8>
    63cc:	d9002f17 	ldw	r4,188(sp)
    63d0:	b80b883a 	mov	r5,r23
    63d4:	b00d883a 	mov	r6,r22
    63d8:	000da180 	call	da18 <__ssprint_r>
    63dc:	1039ed1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    63e0:	d8c02017 	ldw	r3,128(sp)
    63e4:	da000404 	addi	r8,sp,16
    63e8:	003dba06 	br	5ad4 <__alt_mem_Flash_flash_data+0xf4005ad4>
    63ec:	d9002f17 	ldw	r4,188(sp)
    63f0:	b80b883a 	mov	r5,r23
    63f4:	b00d883a 	mov	r6,r22
    63f8:	000da180 	call	da18 <__ssprint_r>
    63fc:	1039e51e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    6400:	d8802617 	ldw	r2,152(sp)
    6404:	d8c02017 	ldw	r3,128(sp)
    6408:	da000404 	addi	r8,sp,16
    640c:	003e4106 	br	5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    6410:	030000b4 	movhi	r12,2
    6414:	6316be84 	addi	r12,r12,23290
    6418:	db002b15 	stw	r12,172(sp)
    641c:	dac02b17 	ldw	r11,172(sp)
    6420:	1c07883a 	add	r3,r3,r16
    6424:	10800044 	addi	r2,r2,1
    6428:	42c00015 	stw	r11,0(r8)
    642c:	44000115 	stw	r16,4(r8)
    6430:	d8c02015 	stw	r3,128(sp)
    6434:	d8801f15 	stw	r2,124(sp)
    6438:	010001c4 	movi	r4,7
    643c:	20bfae16 	blt	r4,r2,62f8 <__alt_mem_Flash_flash_data+0xf40062f8>
    6440:	42000204 	addi	r8,r8,8
    6444:	003fb406 	br	6318 <__alt_mem_Flash_flash_data+0xf4006318>
    6448:	0021883a 	mov	r16,zero
    644c:	003e4306 	br	5d5c <__alt_mem_Flash_flash_data+0xf4005d5c>
    6450:	d9002f17 	ldw	r4,188(sp)
    6454:	b80b883a 	mov	r5,r23
    6458:	b00d883a 	mov	r6,r22
    645c:	000da180 	call	da18 <__ssprint_r>
    6460:	1039cc1e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    6464:	d8802617 	ldw	r2,152(sp)
    6468:	db003317 	ldw	r12,204(sp)
    646c:	d8c02017 	ldw	r3,128(sp)
    6470:	da000404 	addi	r8,sp,16
    6474:	6085c83a 	sub	r2,r12,r2
    6478:	003e3706 	br	5d58 <__alt_mem_Flash_flash_data+0xf4005d58>
    647c:	00800184 	movi	r2,6
    6480:	1240012e 	bgeu	r2,r9,6488 <___svfprintf_internal_r+0x1c14>
    6484:	1013883a 	mov	r9,r2
    6488:	4825883a 	mov	r18,r9
    648c:	4805883a 	mov	r2,r9
    6490:	4800a216 	blt	r9,zero,671c <___svfprintf_internal_r+0x1ea8>
    6494:	d8802a15 	stw	r2,168(sp)
    6498:	008000b4 	movhi	r2,2
    649c:	1096bc04 	addi	r2,r2,23280
    64a0:	d8803115 	stw	r2,196(sp)
    64a4:	dcc02d15 	stw	r19,180(sp)
    64a8:	d8003215 	stw	zero,200(sp)
    64ac:	d8003415 	stw	zero,208(sp)
    64b0:	0005883a 	mov	r2,zero
    64b4:	003a2206 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    64b8:	030000b4 	movhi	r12,2
    64bc:	6316c284 	addi	r12,r12,23306
    64c0:	db003615 	stw	r12,216(sp)
    64c4:	003ae506 	br	505c <__alt_mem_Flash_flash_data+0xf400505c>
    64c8:	d8c02617 	ldw	r3,152(sp)
    64cc:	00bfff44 	movi	r2,-3
    64d0:	18801516 	blt	r3,r2,6528 <___svfprintf_internal_r+0x1cb4>
    64d4:	48c01416 	blt	r9,r3,6528 <___svfprintf_internal_r+0x1cb4>
    64d8:	d8c03415 	stw	r3,208(sp)
    64dc:	040019c4 	movi	r16,103
    64e0:	003f4906 	br	6208 <__alt_mem_Flash_flash_data+0xf4006208>
    64e4:	05400b44 	movi	r21,45
    64e8:	dd402785 	stb	r21,158(sp)
    64ec:	003b1006 	br	5130 <__alt_mem_Flash_flash_data+0xf4005130>
    64f0:	00c00b44 	movi	r3,45
    64f4:	d8802a15 	stw	r2,168(sp)
    64f8:	dc402d17 	ldw	r17,180(sp)
    64fc:	d8c02785 	stb	r3,158(sp)
    6500:	dcc02d15 	stw	r19,180(sp)
    6504:	d8003215 	stw	zero,200(sp)
    6508:	00800b44 	movi	r2,45
    650c:	003a0906 	br	4d34 <__alt_mem_Flash_flash_data+0xf4004d34>
    6510:	010000b4 	movhi	r4,2
    6514:	2116be84 	addi	r4,r4,23290
    6518:	d9002b15 	stw	r4,172(sp)
    651c:	003cc306 	br	582c <__alt_mem_Flash_flash_data+0xf400582c>
    6520:	5005883a 	mov	r2,r10
    6524:	003f2d06 	br	61dc <__alt_mem_Flash_flash_data+0xf40061dc>
    6528:	843fff84 	addi	r16,r16,-2
    652c:	1f3fffc4 	addi	fp,r3,-1
    6530:	df002615 	stw	fp,152(sp)
    6534:	dc0022c5 	stb	r16,139(sp)
    6538:	e000a016 	blt	fp,zero,67bc <___svfprintf_internal_r+0x1f48>
    653c:	00800ac4 	movi	r2,43
    6540:	d8802305 	stb	r2,140(sp)
    6544:	00800244 	movi	r2,9
    6548:	1700800e 	bge	r2,fp,674c <___svfprintf_internal_r+0x1ed8>
    654c:	dd4022c4 	addi	r21,sp,139
    6550:	dc002b15 	stw	r16,172(sp)
    6554:	4025883a 	mov	r18,r8
    6558:	a821883a 	mov	r16,r21
    655c:	e009883a 	mov	r4,fp
    6560:	01400284 	movi	r5,10
    6564:	00115e80 	call	115e8 <__modsi3>
    6568:	10800c04 	addi	r2,r2,48
    656c:	843fffc4 	addi	r16,r16,-1
    6570:	e009883a 	mov	r4,fp
    6574:	01400284 	movi	r5,10
    6578:	80800005 	stb	r2,0(r16)
    657c:	00115940 	call	11594 <__divsi3>
    6580:	1039883a 	mov	fp,r2
    6584:	00800244 	movi	r2,9
    6588:	173ff416 	blt	r2,fp,655c <__alt_mem_Flash_flash_data+0xf400655c>
    658c:	9011883a 	mov	r8,r18
    6590:	e0800c04 	addi	r2,fp,48
    6594:	8025883a 	mov	r18,r16
    6598:	913fffc4 	addi	r4,r18,-1
    659c:	90bfffc5 	stb	r2,-1(r18)
    65a0:	dc002b17 	ldw	r16,172(sp)
    65a4:	25408e2e 	bgeu	r4,r21,67e0 <___svfprintf_internal_r+0x1f6c>
    65a8:	d9402384 	addi	r5,sp,142
    65ac:	2c8bc83a 	sub	r5,r5,r18
    65b0:	d8c02344 	addi	r3,sp,141
    65b4:	a94b883a 	add	r5,r21,r5
    65b8:	00000106 	br	65c0 <___svfprintf_internal_r+0x1d4c>
    65bc:	20800003 	ldbu	r2,0(r4)
    65c0:	18800005 	stb	r2,0(r3)
    65c4:	18c00044 	addi	r3,r3,1
    65c8:	21000044 	addi	r4,r4,1
    65cc:	197ffb1e 	bne	r3,r5,65bc <__alt_mem_Flash_flash_data+0xf40065bc>
    65d0:	d8802304 	addi	r2,sp,140
    65d4:	1485c83a 	sub	r2,r2,r18
    65d8:	d8c02344 	addi	r3,sp,141
    65dc:	1885883a 	add	r2,r3,r2
    65e0:	dac03317 	ldw	r11,204(sp)
    65e4:	156bc83a 	sub	r21,r2,r21
    65e8:	dd403a15 	stw	r21,232(sp)
    65ec:	00800044 	movi	r2,1
    65f0:	5d65883a 	add	r18,r11,r21
    65f4:	12c0770e 	bge	r2,r11,67d4 <___svfprintf_internal_r+0x1f60>
    65f8:	94800044 	addi	r18,r18,1
    65fc:	9005883a 	mov	r2,r18
    6600:	90007216 	blt	r18,zero,67cc <___svfprintf_internal_r+0x1f58>
    6604:	d8003415 	stw	zero,208(sp)
    6608:	003f0706 	br	6228 <__alt_mem_Flash_flash_data+0xf4006228>
    660c:	da402a15 	stw	r9,168(sp)
    6610:	dd402783 	ldbu	r21,158(sp)
    6614:	4825883a 	mov	r18,r9
    6618:	dcc02d15 	stw	r19,180(sp)
    661c:	d8003215 	stw	zero,200(sp)
    6620:	d8003415 	stw	zero,208(sp)
    6624:	0039bf06 	br	4d24 <__alt_mem_Flash_flash_data+0xf4004d24>
    6628:	483eb21e 	bne	r9,zero,60f4 <__alt_mem_Flash_flash_data+0xf40060f4>
    662c:	9013883a 	mov	r9,r18
    6630:	003eb006 	br	60f4 <__alt_mem_Flash_flash_data+0xf40060f4>
    6634:	d9002f17 	ldw	r4,188(sp)
    6638:	b80b883a 	mov	r5,r23
    663c:	b00d883a 	mov	r6,r22
    6640:	000da180 	call	da18 <__ssprint_r>
    6644:	1039531e 	bne	r2,zero,4b94 <__alt_mem_Flash_flash_data+0xf4004b94>
    6648:	dc002617 	ldw	r16,152(sp)
    664c:	d8c02017 	ldw	r3,128(sp)
    6650:	d8801f17 	ldw	r2,124(sp)
    6654:	da000404 	addi	r8,sp,16
    6658:	003e7106 	br	6020 <__alt_mem_Flash_flash_data+0xf4006020>
    665c:	00c00b44 	movi	r3,45
    6660:	64a0003c 	xorhi	r18,r12,32768
    6664:	d8c02a05 	stb	r3,168(sp)
    6668:	003ea806 	br	610c <__alt_mem_Flash_flash_data+0xf400610c>
    666c:	4f000044 	addi	fp,r9,1
    6670:	003ead06 	br	6128 <__alt_mem_Flash_flash_data+0xf4006128>
    6674:	d8c03417 	ldw	r3,208(sp)
    6678:	00c0410e 	bge	zero,r3,6780 <___svfprintf_internal_r+0x1f0c>
    667c:	04800044 	movi	r18,1
    6680:	dac03317 	ldw	r11,204(sp)
    6684:	92e5883a 	add	r18,r18,r11
    6688:	9005883a 	mov	r2,r18
    668c:	903ee60e 	bge	r18,zero,6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6690:	0005883a 	mov	r2,zero
    6694:	003ee406 	br	6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6698:	d8c02617 	ldw	r3,152(sp)
    669c:	d8c03415 	stw	r3,208(sp)
    66a0:	00c0310e 	bge	zero,r3,6768 <___svfprintf_internal_r+0x1ef4>
    66a4:	48001f1e 	bne	r9,zero,6724 <___svfprintf_internal_r+0x1eb0>
    66a8:	8c40004c 	andi	r17,r17,1
    66ac:	88001d1e 	bne	r17,zero,6724 <___svfprintf_internal_r+0x1eb0>
    66b0:	1805883a 	mov	r2,r3
    66b4:	183edb0e 	bge	r3,zero,6224 <__alt_mem_Flash_flash_data+0xf4006224>
    66b8:	0005883a 	mov	r2,zero
    66bc:	003ed906 	br	6224 <__alt_mem_Flash_flash_data+0xf4006224>
    66c0:	d8802117 	ldw	r2,132(sp)
    66c4:	003ec506 	br	61dc <__alt_mem_Flash_flash_data+0xf40061dc>
    66c8:	d9003717 	ldw	r4,220(sp)
    66cc:	900b883a 	mov	r5,r18
    66d0:	000d883a 	mov	r6,zero
    66d4:	000f883a 	mov	r7,zero
    66d8:	da004015 	stw	r8,256(sp)
    66dc:	da403f15 	stw	r9,252(sp)
    66e0:	da803e15 	stw	r10,248(sp)
    66e4:	00127bc0 	call	127bc <__eqdf2>
    66e8:	da004017 	ldw	r8,256(sp)
    66ec:	da403f17 	ldw	r9,252(sp)
    66f0:	da803e17 	ldw	r10,248(sp)
    66f4:	103f2c26 	beq	r2,zero,63a8 <__alt_mem_Flash_flash_data+0xf40063a8>
    66f8:	00800044 	movi	r2,1
    66fc:	1707c83a 	sub	r3,r2,fp
    6700:	d8c02615 	stw	r3,152(sp)
    6704:	003f2906 	br	63ac <__alt_mem_Flash_flash_data+0xf40063ac>
    6708:	db003417 	ldw	r12,208(sp)
    670c:	64800044 	addi	r18,r12,1
    6710:	9005883a 	mov	r2,r18
    6714:	903ec40e 	bge	r18,zero,6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6718:	003fdd06 	br	6690 <__alt_mem_Flash_flash_data+0xf4006690>
    671c:	0005883a 	mov	r2,zero
    6720:	003f5c06 	br	6494 <__alt_mem_Flash_flash_data+0xf4006494>
    6724:	dac03417 	ldw	r11,208(sp)
    6728:	4a400044 	addi	r9,r9,1
    672c:	5a65883a 	add	r18,r11,r9
    6730:	9005883a 	mov	r2,r18
    6734:	903ebc0e 	bge	r18,zero,6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6738:	003fd506 	br	6690 <__alt_mem_Flash_flash_data+0xf4006690>
    673c:	008000b4 	movhi	r2,2
    6740:	1096be84 	addi	r2,r2,23290
    6744:	d8802b15 	stw	r2,172(sp)
    6748:	003d2b06 	br	5bf8 <__alt_mem_Flash_flash_data+0xf4005bf8>
    674c:	00800c04 	movi	r2,48
    6750:	e0c00c04 	addi	r3,fp,48
    6754:	d8802345 	stb	r2,141(sp)
    6758:	d8c02385 	stb	r3,142(sp)
    675c:	d88023c4 	addi	r2,sp,143
    6760:	dd4022c4 	addi	r21,sp,139
    6764:	003f9e06 	br	65e0 <__alt_mem_Flash_flash_data+0xf40065e0>
    6768:	4800081e 	bne	r9,zero,678c <___svfprintf_internal_r+0x1f18>
    676c:	8c40004c 	andi	r17,r17,1
    6770:	8800061e 	bne	r17,zero,678c <___svfprintf_internal_r+0x1f18>
    6774:	00800044 	movi	r2,1
    6778:	1025883a 	mov	r18,r2
    677c:	003eaa06 	br	6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6780:	04800084 	movi	r18,2
    6784:	90e5c83a 	sub	r18,r18,r3
    6788:	003fbd06 	br	6680 <__alt_mem_Flash_flash_data+0xf4006680>
    678c:	4c800084 	addi	r18,r9,2
    6790:	9005883a 	mov	r2,r18
    6794:	903ea40e 	bge	r18,zero,6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6798:	003fbd06 	br	6690 <__alt_mem_Flash_flash_data+0xf4006690>
    679c:	dac02d17 	ldw	r11,180(sp)
    67a0:	5a400017 	ldw	r9,0(r11)
    67a4:	5ac00104 	addi	r11,r11,4
    67a8:	dac02d15 	stw	r11,180(sp)
    67ac:	483e410e 	bge	r9,zero,60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    67b0:	027fffc4 	movi	r9,-1
    67b4:	1c000047 	ldb	r16,1(r3)
    67b8:	00388406 	br	49cc <__alt_mem_Flash_flash_data+0xf40049cc>
    67bc:	00800b44 	movi	r2,45
    67c0:	0739c83a 	sub	fp,zero,fp
    67c4:	d8802305 	stb	r2,140(sp)
    67c8:	003f5e06 	br	6544 <__alt_mem_Flash_flash_data+0xf4006544>
    67cc:	0005883a 	mov	r2,zero
    67d0:	003f8c06 	br	6604 <__alt_mem_Flash_flash_data+0xf4006604>
    67d4:	88a2703a 	and	r17,r17,r2
    67d8:	883f8826 	beq	r17,zero,65fc <__alt_mem_Flash_flash_data+0xf40065fc>
    67dc:	003f8606 	br	65f8 <__alt_mem_Flash_flash_data+0xf40065f8>
    67e0:	d8802344 	addi	r2,sp,141
    67e4:	003f7e06 	br	65e0 <__alt_mem_Flash_flash_data+0xf40065e0>
    67e8:	d8c02617 	ldw	r3,152(sp)
    67ec:	003f4f06 	br	652c <__alt_mem_Flash_flash_data+0xf400652c>
    67f0:	dac02f17 	ldw	r11,188(sp)
    67f4:	00800304 	movi	r2,12
    67f8:	58800015 	stw	r2,0(r11)
    67fc:	00bfffc4 	movi	r2,-1
    6800:	0038e806 	br	4ba4 <__alt_mem_Flash_flash_data+0xf4004ba4>

00006804 <___vfprintf_internal_r>:
    6804:	deffb604 	addi	sp,sp,-296
    6808:	dfc04915 	stw	ra,292(sp)
    680c:	ddc04715 	stw	r23,284(sp)
    6810:	dd804615 	stw	r22,280(sp)
    6814:	282f883a 	mov	r23,r5
    6818:	202d883a 	mov	r22,r4
    681c:	d9802a15 	stw	r6,168(sp)
    6820:	d9c02d15 	stw	r7,180(sp)
    6824:	df004815 	stw	fp,288(sp)
    6828:	dd404515 	stw	r21,276(sp)
    682c:	dd004415 	stw	r20,272(sp)
    6830:	dcc04315 	stw	r19,268(sp)
    6834:	dc804215 	stw	r18,264(sp)
    6838:	dc404115 	stw	r17,260(sp)
    683c:	dc004015 	stw	r16,256(sp)
    6840:	000b3ec0 	call	b3ec <_localeconv_r>
    6844:	10800017 	ldw	r2,0(r2)
    6848:	1009883a 	mov	r4,r2
    684c:	d8803515 	stw	r2,212(sp)
    6850:	00047dc0 	call	47dc <strlen>
    6854:	d8803815 	stw	r2,224(sp)
    6858:	b0000226 	beq	r22,zero,6864 <___vfprintf_internal_r+0x60>
    685c:	b0800e17 	ldw	r2,56(r22)
    6860:	1000e126 	beq	r2,zero,6be8 <___vfprintf_internal_r+0x3e4>
    6864:	b880030b 	ldhu	r2,12(r23)
    6868:	10c8000c 	andi	r3,r2,8192
    686c:	1800061e 	bne	r3,zero,6888 <___vfprintf_internal_r+0x84>
    6870:	b9001917 	ldw	r4,100(r23)
    6874:	00f7ffc4 	movi	r3,-8193
    6878:	10880014 	ori	r2,r2,8192
    687c:	20c6703a 	and	r3,r4,r3
    6880:	b880030d 	sth	r2,12(r23)
    6884:	b8c01915 	stw	r3,100(r23)
    6888:	10c0020c 	andi	r3,r2,8
    688c:	1800a726 	beq	r3,zero,6b2c <___vfprintf_internal_r+0x328>
    6890:	b8c00417 	ldw	r3,16(r23)
    6894:	1800a526 	beq	r3,zero,6b2c <___vfprintf_internal_r+0x328>
    6898:	1080068c 	andi	r2,r2,26
    689c:	00c00284 	movi	r3,10
    68a0:	10c0aa26 	beq	r2,r3,6b4c <___vfprintf_internal_r+0x348>
    68a4:	dac01e04 	addi	r11,sp,120
    68a8:	db001dc4 	addi	r12,sp,119
    68ac:	d8800404 	addi	r2,sp,16
    68b0:	050000b4 	movhi	r20,2
    68b4:	dac02815 	stw	r11,160(sp)
    68b8:	5b17c83a 	sub	r11,r11,r12
    68bc:	a516c684 	addi	r20,r20,23322
    68c0:	db002915 	stw	r12,164(sp)
    68c4:	d8801e15 	stw	r2,120(sp)
    68c8:	d8002015 	stw	zero,128(sp)
    68cc:	d8001f15 	stw	zero,124(sp)
    68d0:	d8003315 	stw	zero,204(sp)
    68d4:	d8003715 	stw	zero,220(sp)
    68d8:	d8003915 	stw	zero,228(sp)
    68dc:	1011883a 	mov	r8,r2
    68e0:	d8003b15 	stw	zero,236(sp)
    68e4:	d8003a15 	stw	zero,232(sp)
    68e8:	d8002f15 	stw	zero,188(sp)
    68ec:	dac03c15 	stw	r11,240(sp)
    68f0:	db002a17 	ldw	r12,168(sp)
    68f4:	60800007 	ldb	r2,0(r12)
    68f8:	1000be26 	beq	r2,zero,6bf4 <___vfprintf_internal_r+0x3f0>
    68fc:	00c00944 	movi	r3,37
    6900:	10c0bc26 	beq	r2,r3,6bf4 <___vfprintf_internal_r+0x3f0>
    6904:	6021883a 	mov	r16,r12
    6908:	00000106 	br	6910 <___vfprintf_internal_r+0x10c>
    690c:	10c08426 	beq	r2,r3,6b20 <___vfprintf_internal_r+0x31c>
    6910:	84000044 	addi	r16,r16,1
    6914:	80800007 	ldb	r2,0(r16)
    6918:	103ffc1e 	bne	r2,zero,690c <__alt_mem_Flash_flash_data+0xf400690c>
    691c:	dac02a17 	ldw	r11,168(sp)
    6920:	82e3c83a 	sub	r17,r16,r11
    6924:	88000f26 	beq	r17,zero,6964 <___vfprintf_internal_r+0x160>
    6928:	d8c02017 	ldw	r3,128(sp)
    692c:	d8801f17 	ldw	r2,124(sp)
    6930:	dac02a17 	ldw	r11,168(sp)
    6934:	1c47883a 	add	r3,r3,r17
    6938:	10800044 	addi	r2,r2,1
    693c:	d8c02015 	stw	r3,128(sp)
    6940:	42c00015 	stw	r11,0(r8)
    6944:	44400115 	stw	r17,4(r8)
    6948:	d8801f15 	stw	r2,124(sp)
    694c:	00c001c4 	movi	r3,7
    6950:	18809316 	blt	r3,r2,6ba0 <___vfprintf_internal_r+0x39c>
    6954:	42000204 	addi	r8,r8,8
    6958:	db002f17 	ldw	r12,188(sp)
    695c:	6459883a 	add	r12,r12,r17
    6960:	db002f15 	stw	r12,188(sp)
    6964:	80800007 	ldb	r2,0(r16)
    6968:	10009426 	beq	r2,zero,6bbc <___vfprintf_internal_r+0x3b8>
    696c:	80800044 	addi	r2,r16,1
    6970:	84000047 	ldb	r16,1(r16)
    6974:	d8002785 	stb	zero,158(sp)
    6978:	000d883a 	mov	r6,zero
    697c:	027fffc4 	movi	r9,-1
    6980:	d8002e15 	stw	zero,184(sp)
    6984:	0023883a 	mov	r17,zero
    6988:	01001604 	movi	r4,88
    698c:	01400244 	movi	r5,9
    6990:	02800a84 	movi	r10,42
    6994:	01c01b04 	movi	r7,108
    6998:	10c00044 	addi	r3,r2,1
    699c:	80bff804 	addi	r2,r16,-32
    69a0:	2082cd36 	bltu	r4,r2,74d8 <___vfprintf_internal_r+0xcd4>
    69a4:	100490ba 	slli	r2,r2,2
    69a8:	02c00034 	movhi	r11,0
    69ac:	5ada6f04 	addi	r11,r11,27068
    69b0:	12c5883a 	add	r2,r2,r11
    69b4:	10800017 	ldw	r2,0(r2)
    69b8:	1000683a 	jmp	r2
    69bc:	000072f0 	cmpltui	zero,zero,459
    69c0:	000074d8 	cmpnei	zero,zero,467
    69c4:	000074d8 	cmpnei	zero,zero,467
    69c8:	00007440 	call	744 <moveDown+0xbc>
    69cc:	000074d8 	cmpnei	zero,zero,467
    69d0:	000074d8 	cmpnei	zero,zero,467
    69d4:	000074d8 	cmpnei	zero,zero,467
    69d8:	000074d8 	cmpnei	zero,zero,467
    69dc:	000074d8 	cmpnei	zero,zero,467
    69e0:	000074d8 	cmpnei	zero,zero,467
    69e4:	00007310 	cmplti	zero,zero,460
    69e8:	0000733c 	xorhi	zero,zero,460
    69ec:	000074d8 	cmpnei	zero,zero,467
    69f0:	00006bfc 	xorhi	zero,zero,431
    69f4:	00006c0c 	andi	zero,zero,432
    69f8:	000074d8 	cmpnei	zero,zero,467
    69fc:	00006c4c 	andi	zero,zero,433
    6a00:	00006c5c 	xori	zero,zero,433
    6a04:	00006c5c 	xori	zero,zero,433
    6a08:	00006c5c 	xori	zero,zero,433
    6a0c:	00006c5c 	xori	zero,zero,433
    6a10:	00006c5c 	xori	zero,zero,433
    6a14:	00006c5c 	xori	zero,zero,433
    6a18:	00006c5c 	xori	zero,zero,433
    6a1c:	00006c5c 	xori	zero,zero,433
    6a20:	00006c5c 	xori	zero,zero,433
    6a24:	000074d8 	cmpnei	zero,zero,467
    6a28:	000074d8 	cmpnei	zero,zero,467
    6a2c:	000074d8 	cmpnei	zero,zero,467
    6a30:	000074d8 	cmpnei	zero,zero,467
    6a34:	000074d8 	cmpnei	zero,zero,467
    6a38:	000074d8 	cmpnei	zero,zero,467
    6a3c:	000074d8 	cmpnei	zero,zero,467
    6a40:	000074d8 	cmpnei	zero,zero,467
    6a44:	000074d8 	cmpnei	zero,zero,467
    6a48:	000074d8 	cmpnei	zero,zero,467
    6a4c:	00006c90 	cmplti	zero,zero,434
    6a50:	00007100 	call	710 <moveDown+0x88>
    6a54:	000074d8 	cmpnei	zero,zero,467
    6a58:	00007100 	call	710 <moveDown+0x88>
    6a5c:	000074d8 	cmpnei	zero,zero,467
    6a60:	000074d8 	cmpnei	zero,zero,467
    6a64:	000074d8 	cmpnei	zero,zero,467
    6a68:	000074d8 	cmpnei	zero,zero,467
    6a6c:	000071ec 	andhi	zero,zero,455
    6a70:	000074d8 	cmpnei	zero,zero,467
    6a74:	000074d8 	cmpnei	zero,zero,467
    6a78:	00007094 	movui	zero,450
    6a7c:	000074d8 	cmpnei	zero,zero,467
    6a80:	000074d8 	cmpnei	zero,zero,467
    6a84:	000074d8 	cmpnei	zero,zero,467
    6a88:	000074d8 	cmpnei	zero,zero,467
    6a8c:	000074d8 	cmpnei	zero,zero,467
    6a90:	000070d0 	cmplti	zero,zero,451
    6a94:	000074d8 	cmpnei	zero,zero,467
    6a98:	000074d8 	cmpnei	zero,zero,467
    6a9c:	00007294 	movui	zero,458
    6aa0:	000074d8 	cmpnei	zero,zero,467
    6aa4:	000074d8 	cmpnei	zero,zero,467
    6aa8:	000074d8 	cmpnei	zero,zero,467
    6aac:	000074d8 	cmpnei	zero,zero,467
    6ab0:	000074d8 	cmpnei	zero,zero,467
    6ab4:	000074d8 	cmpnei	zero,zero,467
    6ab8:	000074d8 	cmpnei	zero,zero,467
    6abc:	000074d8 	cmpnei	zero,zero,467
    6ac0:	000074d8 	cmpnei	zero,zero,467
    6ac4:	000074d8 	cmpnei	zero,zero,467
    6ac8:	0000734c 	andi	zero,zero,461
    6acc:	000071fc 	xorhi	zero,zero,455
    6ad0:	00007100 	call	710 <moveDown+0x88>
    6ad4:	00007100 	call	710 <moveDown+0x88>
    6ad8:	00007100 	call	710 <moveDown+0x88>
    6adc:	0000723c 	xorhi	zero,zero,456
    6ae0:	000071fc 	xorhi	zero,zero,455
    6ae4:	000074d8 	cmpnei	zero,zero,467
    6ae8:	000074d8 	cmpnei	zero,zero,467
    6aec:	0000724c 	andi	zero,zero,457
    6af0:	000074d8 	cmpnei	zero,zero,467
    6af4:	00007260 	cmpeqi	zero,zero,457
    6af8:	0000749c 	xori	zero,zero,466
    6afc:	000071a4 	muli	zero,zero,454
    6b00:	00007450 	cmplti	zero,zero,465
    6b04:	000074d8 	cmpnei	zero,zero,467
    6b08:	0000738c 	andi	zero,zero,462
    6b0c:	000074d8 	cmpnei	zero,zero,467
    6b10:	00007460 	cmpeqi	zero,zero,465
    6b14:	000074d8 	cmpnei	zero,zero,467
    6b18:	000074d8 	cmpnei	zero,zero,467
    6b1c:	00007400 	call	740 <moveDown+0xb8>
    6b20:	db002a17 	ldw	r12,168(sp)
    6b24:	8323c83a 	sub	r17,r16,r12
    6b28:	003f7e06 	br	6924 <__alt_mem_Flash_flash_data+0xf4006924>
    6b2c:	b009883a 	mov	r4,r22
    6b30:	b80b883a 	mov	r5,r23
    6b34:	00088340 	call	8834 <__swsetup_r>
    6b38:	10000c1e 	bne	r2,zero,6b6c <___vfprintf_internal_r+0x368>
    6b3c:	b880030b 	ldhu	r2,12(r23)
    6b40:	00c00284 	movi	r3,10
    6b44:	1080068c 	andi	r2,r2,26
    6b48:	10ff561e 	bne	r2,r3,68a4 <__alt_mem_Flash_flash_data+0xf40068a4>
    6b4c:	b880038f 	ldh	r2,14(r23)
    6b50:	103f5416 	blt	r2,zero,68a4 <__alt_mem_Flash_flash_data+0xf40068a4>
    6b54:	d9802a17 	ldw	r6,168(sp)
    6b58:	d9c02d17 	ldw	r7,180(sp)
    6b5c:	b009883a 	mov	r4,r22
    6b60:	b80b883a 	mov	r5,r23
    6b64:	00087780 	call	8778 <__sbprintf>
    6b68:	00000106 	br	6b70 <___vfprintf_internal_r+0x36c>
    6b6c:	00bfffc4 	movi	r2,-1
    6b70:	dfc04917 	ldw	ra,292(sp)
    6b74:	df004817 	ldw	fp,288(sp)
    6b78:	ddc04717 	ldw	r23,284(sp)
    6b7c:	dd804617 	ldw	r22,280(sp)
    6b80:	dd404517 	ldw	r21,276(sp)
    6b84:	dd004417 	ldw	r20,272(sp)
    6b88:	dcc04317 	ldw	r19,268(sp)
    6b8c:	dc804217 	ldw	r18,264(sp)
    6b90:	dc404117 	ldw	r17,260(sp)
    6b94:	dc004017 	ldw	r16,256(sp)
    6b98:	dec04a04 	addi	sp,sp,296
    6b9c:	f800283a 	ret
    6ba0:	b009883a 	mov	r4,r22
    6ba4:	b80b883a 	mov	r5,r23
    6ba8:	d9801e04 	addi	r6,sp,120
    6bac:	000ed180 	call	ed18 <__sprint_r>
    6bb0:	1000081e 	bne	r2,zero,6bd4 <___vfprintf_internal_r+0x3d0>
    6bb4:	da000404 	addi	r8,sp,16
    6bb8:	003f6706 	br	6958 <__alt_mem_Flash_flash_data+0xf4006958>
    6bbc:	d8802017 	ldw	r2,128(sp)
    6bc0:	10000426 	beq	r2,zero,6bd4 <___vfprintf_internal_r+0x3d0>
    6bc4:	b009883a 	mov	r4,r22
    6bc8:	b80b883a 	mov	r5,r23
    6bcc:	d9801e04 	addi	r6,sp,120
    6bd0:	000ed180 	call	ed18 <__sprint_r>
    6bd4:	b880030b 	ldhu	r2,12(r23)
    6bd8:	1080100c 	andi	r2,r2,64
    6bdc:	103fe31e 	bne	r2,zero,6b6c <__alt_mem_Flash_flash_data+0xf4006b6c>
    6be0:	d8802f17 	ldw	r2,188(sp)
    6be4:	003fe206 	br	6b70 <__alt_mem_Flash_flash_data+0xf4006b70>
    6be8:	b009883a 	mov	r4,r22
    6bec:	000a8940 	call	a894 <__sinit>
    6bf0:	003f1c06 	br	6864 <__alt_mem_Flash_flash_data+0xf4006864>
    6bf4:	dc002a17 	ldw	r16,168(sp)
    6bf8:	003f5a06 	br	6964 <__alt_mem_Flash_flash_data+0xf4006964>
    6bfc:	1805883a 	mov	r2,r3
    6c00:	8c400114 	ori	r17,r17,4
    6c04:	1c000007 	ldb	r16,0(r3)
    6c08:	003f6306 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    6c0c:	1c000007 	ldb	r16,0(r3)
    6c10:	18800044 	addi	r2,r3,1
    6c14:	8286ad26 	beq	r16,r10,86cc <___vfprintf_internal_r+0x1ec8>
    6c18:	82fff404 	addi	r11,r16,-48
    6c1c:	1007883a 	mov	r3,r2
    6c20:	0013883a 	mov	r9,zero
    6c24:	2aff5d36 	bltu	r5,r11,699c <__alt_mem_Flash_flash_data+0xf400699c>
    6c28:	1c000007 	ldb	r16,0(r3)
    6c2c:	4a4002a4 	muli	r9,r9,10
    6c30:	18c00044 	addi	r3,r3,1
    6c34:	5a53883a 	add	r9,r11,r9
    6c38:	82fff404 	addi	r11,r16,-48
    6c3c:	2afffa2e 	bgeu	r5,r11,6c28 <__alt_mem_Flash_flash_data+0xf4006c28>
    6c40:	483f560e 	bge	r9,zero,699c <__alt_mem_Flash_flash_data+0xf400699c>
    6c44:	027fffc4 	movi	r9,-1
    6c48:	003f5406 	br	699c <__alt_mem_Flash_flash_data+0xf400699c>
    6c4c:	8c402014 	ori	r17,r17,128
    6c50:	1805883a 	mov	r2,r3
    6c54:	1c000007 	ldb	r16,0(r3)
    6c58:	003f4f06 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    6c5c:	1805883a 	mov	r2,r3
    6c60:	d8002e15 	stw	zero,184(sp)
    6c64:	82fff404 	addi	r11,r16,-48
    6c68:	0019883a 	mov	r12,zero
    6c6c:	14000007 	ldb	r16,0(r2)
    6c70:	630002a4 	muli	r12,r12,10
    6c74:	18c00044 	addi	r3,r3,1
    6c78:	1805883a 	mov	r2,r3
    6c7c:	62d9883a 	add	r12,r12,r11
    6c80:	82fff404 	addi	r11,r16,-48
    6c84:	2afff92e 	bgeu	r5,r11,6c6c <__alt_mem_Flash_flash_data+0xf4006c6c>
    6c88:	db002e15 	stw	r12,184(sp)
    6c8c:	003f4306 	br	699c <__alt_mem_Flash_flash_data+0xf400699c>
    6c90:	8c400414 	ori	r17,r17,16
    6c94:	d8c02a15 	stw	r3,168(sp)
    6c98:	d9802785 	stb	r6,158(sp)
    6c9c:	8880080c 	andi	r2,r17,32
    6ca0:	d8c02d17 	ldw	r3,180(sp)
    6ca4:	10015a26 	beq	r2,zero,7210 <___vfprintf_internal_r+0xa0c>
    6ca8:	db002d17 	ldw	r12,180(sp)
    6cac:	18800117 	ldw	r2,4(r3)
    6cb0:	1cc00017 	ldw	r19,0(r3)
    6cb4:	63000204 	addi	r12,r12,8
    6cb8:	db002d15 	stw	r12,180(sp)
    6cbc:	1039883a 	mov	fp,r2
    6cc0:	10044516 	blt	r2,zero,7dd8 <___vfprintf_internal_r+0x15d4>
    6cc4:	dd402783 	ldbu	r21,158(sp)
    6cc8:	da403215 	stw	r9,200(sp)
    6ccc:	00800044 	movi	r2,1
    6cd0:	9f06b03a 	or	r3,r19,fp
    6cd4:	48000216 	blt	r9,zero,6ce0 <___vfprintf_internal_r+0x4dc>
    6cd8:	013fdfc4 	movi	r4,-129
    6cdc:	8922703a 	and	r17,r17,r4
    6ce0:	1802071e 	bne	r3,zero,7500 <___vfprintf_internal_r+0xcfc>
    6ce4:	4802fa26 	beq	r9,zero,78d0 <___vfprintf_internal_r+0x10cc>
    6ce8:	10803fcc 	andi	r2,r2,255
    6cec:	00c00044 	movi	r3,1
    6cf0:	10c22926 	beq	r2,r3,7598 <___vfprintf_internal_r+0xd94>
    6cf4:	00c00084 	movi	r3,2
    6cf8:	10c31726 	beq	r2,r3,7958 <___vfprintf_internal_r+0x1154>
    6cfc:	d8c01e04 	addi	r3,sp,120
    6d00:	9808d0fa 	srli	r4,r19,3
    6d04:	e00a977a 	slli	r5,fp,29
    6d08:	e038d0fa 	srli	fp,fp,3
    6d0c:	9cc001cc 	andi	r19,r19,7
    6d10:	98800c04 	addi	r2,r19,48
    6d14:	18ffffc4 	addi	r3,r3,-1
    6d18:	2926b03a 	or	r19,r5,r4
    6d1c:	18800005 	stb	r2,0(r3)
    6d20:	9f08b03a 	or	r4,r19,fp
    6d24:	203ff61e 	bne	r4,zero,6d00 <__alt_mem_Flash_flash_data+0xf4006d00>
    6d28:	8900004c 	andi	r4,r17,1
    6d2c:	d8c03115 	stw	r3,196(sp)
    6d30:	2003931e 	bne	r4,zero,7b80 <___vfprintf_internal_r+0x137c>
    6d34:	dac02817 	ldw	r11,160(sp)
    6d38:	58e5c83a 	sub	r18,r11,r3
    6d3c:	9005883a 	mov	r2,r18
    6d40:	9240010e 	bge	r18,r9,6d48 <___vfprintf_internal_r+0x544>
    6d44:	4805883a 	mov	r2,r9
    6d48:	d8802b15 	stw	r2,172(sp)
    6d4c:	d8003415 	stw	zero,208(sp)
    6d50:	a8803fcc 	andi	r2,r21,255
    6d54:	1080201c 	xori	r2,r2,128
    6d58:	10bfe004 	addi	r2,r2,-128
    6d5c:	10000326 	beq	r2,zero,6d6c <___vfprintf_internal_r+0x568>
    6d60:	db002b17 	ldw	r12,172(sp)
    6d64:	63000044 	addi	r12,r12,1
    6d68:	db002b15 	stw	r12,172(sp)
    6d6c:	88c0008c 	andi	r3,r17,2
    6d70:	d8c02c15 	stw	r3,176(sp)
    6d74:	18000326 	beq	r3,zero,6d84 <___vfprintf_internal_r+0x580>
    6d78:	dac02b17 	ldw	r11,172(sp)
    6d7c:	5ac00084 	addi	r11,r11,2
    6d80:	dac02b15 	stw	r11,172(sp)
    6d84:	8b00210c 	andi	r12,r17,132
    6d88:	db003015 	stw	r12,192(sp)
    6d8c:	6001da1e 	bne	r12,zero,74f8 <___vfprintf_internal_r+0xcf4>
    6d90:	dac02e17 	ldw	r11,184(sp)
    6d94:	db002b17 	ldw	r12,172(sp)
    6d98:	5b39c83a 	sub	fp,r11,r12
    6d9c:	0701d60e 	bge	zero,fp,74f8 <___vfprintf_internal_r+0xcf4>
    6da0:	02400404 	movi	r9,16
    6da4:	d8c02017 	ldw	r3,128(sp)
    6da8:	d8801f17 	ldw	r2,124(sp)
    6dac:	4f053c0e 	bge	r9,fp,82a0 <___vfprintf_internal_r+0x1a9c>
    6db0:	014000b4 	movhi	r5,2
    6db4:	2956ca84 	addi	r5,r5,23338
    6db8:	d9403615 	stw	r5,216(sp)
    6dbc:	482b883a 	mov	r21,r9
    6dc0:	04c001c4 	movi	r19,7
    6dc4:	00000306 	br	6dd4 <___vfprintf_internal_r+0x5d0>
    6dc8:	e73ffc04 	addi	fp,fp,-16
    6dcc:	42000204 	addi	r8,r8,8
    6dd0:	af00130e 	bge	r21,fp,6e20 <___vfprintf_internal_r+0x61c>
    6dd4:	02c000b4 	movhi	r11,2
    6dd8:	18c00404 	addi	r3,r3,16
    6ddc:	10800044 	addi	r2,r2,1
    6de0:	5ad6ca84 	addi	r11,r11,23338
    6de4:	42c00015 	stw	r11,0(r8)
    6de8:	45400115 	stw	r21,4(r8)
    6dec:	d8c02015 	stw	r3,128(sp)
    6df0:	d8801f15 	stw	r2,124(sp)
    6df4:	98bff40e 	bge	r19,r2,6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6df8:	b009883a 	mov	r4,r22
    6dfc:	b80b883a 	mov	r5,r23
    6e00:	d9801e04 	addi	r6,sp,120
    6e04:	000ed180 	call	ed18 <__sprint_r>
    6e08:	103f721e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    6e0c:	e73ffc04 	addi	fp,fp,-16
    6e10:	d8c02017 	ldw	r3,128(sp)
    6e14:	d8801f17 	ldw	r2,124(sp)
    6e18:	da000404 	addi	r8,sp,16
    6e1c:	af3fed16 	blt	r21,fp,6dd4 <__alt_mem_Flash_flash_data+0xf4006dd4>
    6e20:	db003617 	ldw	r12,216(sp)
    6e24:	e0c7883a 	add	r3,fp,r3
    6e28:	10800044 	addi	r2,r2,1
    6e2c:	43000015 	stw	r12,0(r8)
    6e30:	47000115 	stw	fp,4(r8)
    6e34:	d8c02015 	stw	r3,128(sp)
    6e38:	d8801f15 	stw	r2,124(sp)
    6e3c:	010001c4 	movi	r4,7
    6e40:	20830e16 	blt	r4,r2,7a7c <___vfprintf_internal_r+0x1278>
    6e44:	d8802787 	ldb	r2,158(sp)
    6e48:	42000204 	addi	r8,r8,8
    6e4c:	10000c26 	beq	r2,zero,6e80 <___vfprintf_internal_r+0x67c>
    6e50:	d8801f17 	ldw	r2,124(sp)
    6e54:	d9002784 	addi	r4,sp,158
    6e58:	18c00044 	addi	r3,r3,1
    6e5c:	10800044 	addi	r2,r2,1
    6e60:	41000015 	stw	r4,0(r8)
    6e64:	01000044 	movi	r4,1
    6e68:	41000115 	stw	r4,4(r8)
    6e6c:	d8c02015 	stw	r3,128(sp)
    6e70:	d8801f15 	stw	r2,124(sp)
    6e74:	010001c4 	movi	r4,7
    6e78:	2082a716 	blt	r4,r2,7918 <___vfprintf_internal_r+0x1114>
    6e7c:	42000204 	addi	r8,r8,8
    6e80:	dac02c17 	ldw	r11,176(sp)
    6e84:	58000c26 	beq	r11,zero,6eb8 <___vfprintf_internal_r+0x6b4>
    6e88:	d8801f17 	ldw	r2,124(sp)
    6e8c:	d9002704 	addi	r4,sp,156
    6e90:	18c00084 	addi	r3,r3,2
    6e94:	10800044 	addi	r2,r2,1
    6e98:	41000015 	stw	r4,0(r8)
    6e9c:	01000084 	movi	r4,2
    6ea0:	41000115 	stw	r4,4(r8)
    6ea4:	d8c02015 	stw	r3,128(sp)
    6ea8:	d8801f15 	stw	r2,124(sp)
    6eac:	010001c4 	movi	r4,7
    6eb0:	2082a116 	blt	r4,r2,7938 <___vfprintf_internal_r+0x1134>
    6eb4:	42000204 	addi	r8,r8,8
    6eb8:	db003017 	ldw	r12,192(sp)
    6ebc:	00802004 	movi	r2,128
    6ec0:	60820326 	beq	r12,r2,76d0 <___vfprintf_internal_r+0xecc>
    6ec4:	db003217 	ldw	r12,200(sp)
    6ec8:	64abc83a 	sub	r21,r12,r18
    6ecc:	0540260e 	bge	zero,r21,6f68 <___vfprintf_internal_r+0x764>
    6ed0:	07000404 	movi	fp,16
    6ed4:	d8801f17 	ldw	r2,124(sp)
    6ed8:	e544570e 	bge	fp,r21,8038 <___vfprintf_internal_r+0x1834>
    6edc:	014000b4 	movhi	r5,2
    6ee0:	2956c684 	addi	r5,r5,23322
    6ee4:	d9402c15 	stw	r5,176(sp)
    6ee8:	04c001c4 	movi	r19,7
    6eec:	00000306 	br	6efc <___vfprintf_internal_r+0x6f8>
    6ef0:	ad7ffc04 	addi	r21,r21,-16
    6ef4:	42000204 	addi	r8,r8,8
    6ef8:	e540110e 	bge	fp,r21,6f40 <___vfprintf_internal_r+0x73c>
    6efc:	18c00404 	addi	r3,r3,16
    6f00:	10800044 	addi	r2,r2,1
    6f04:	45000015 	stw	r20,0(r8)
    6f08:	47000115 	stw	fp,4(r8)
    6f0c:	d8c02015 	stw	r3,128(sp)
    6f10:	d8801f15 	stw	r2,124(sp)
    6f14:	98bff60e 	bge	r19,r2,6ef0 <__alt_mem_Flash_flash_data+0xf4006ef0>
    6f18:	b009883a 	mov	r4,r22
    6f1c:	b80b883a 	mov	r5,r23
    6f20:	d9801e04 	addi	r6,sp,120
    6f24:	000ed180 	call	ed18 <__sprint_r>
    6f28:	103f2a1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    6f2c:	ad7ffc04 	addi	r21,r21,-16
    6f30:	d8c02017 	ldw	r3,128(sp)
    6f34:	d8801f17 	ldw	r2,124(sp)
    6f38:	da000404 	addi	r8,sp,16
    6f3c:	e57fef16 	blt	fp,r21,6efc <__alt_mem_Flash_flash_data+0xf4006efc>
    6f40:	dac02c17 	ldw	r11,176(sp)
    6f44:	1d47883a 	add	r3,r3,r21
    6f48:	10800044 	addi	r2,r2,1
    6f4c:	42c00015 	stw	r11,0(r8)
    6f50:	45400115 	stw	r21,4(r8)
    6f54:	d8c02015 	stw	r3,128(sp)
    6f58:	d8801f15 	stw	r2,124(sp)
    6f5c:	010001c4 	movi	r4,7
    6f60:	20826516 	blt	r4,r2,78f8 <___vfprintf_internal_r+0x10f4>
    6f64:	42000204 	addi	r8,r8,8
    6f68:	8880400c 	andi	r2,r17,256
    6f6c:	1001901e 	bne	r2,zero,75b0 <___vfprintf_internal_r+0xdac>
    6f70:	d8801f17 	ldw	r2,124(sp)
    6f74:	db003117 	ldw	r12,196(sp)
    6f78:	1c87883a 	add	r3,r3,r18
    6f7c:	10800044 	addi	r2,r2,1
    6f80:	43000015 	stw	r12,0(r8)
    6f84:	44800115 	stw	r18,4(r8)
    6f88:	d8c02015 	stw	r3,128(sp)
    6f8c:	d8801f15 	stw	r2,124(sp)
    6f90:	010001c4 	movi	r4,7
    6f94:	20824016 	blt	r4,r2,7898 <___vfprintf_internal_r+0x1094>
    6f98:	42000204 	addi	r8,r8,8
    6f9c:	8c40010c 	andi	r17,r17,4
    6fa0:	88003126 	beq	r17,zero,7068 <___vfprintf_internal_r+0x864>
    6fa4:	db002e17 	ldw	r12,184(sp)
    6fa8:	dac02b17 	ldw	r11,172(sp)
    6fac:	62e1c83a 	sub	r16,r12,r11
    6fb0:	04002d0e 	bge	zero,r16,7068 <___vfprintf_internal_r+0x864>
    6fb4:	04400404 	movi	r17,16
    6fb8:	d8801f17 	ldw	r2,124(sp)
    6fbc:	8c05150e 	bge	r17,r16,8414 <___vfprintf_internal_r+0x1c10>
    6fc0:	010000b4 	movhi	r4,2
    6fc4:	2116ca84 	addi	r4,r4,23338
    6fc8:	d9003615 	stw	r4,216(sp)
    6fcc:	048001c4 	movi	r18,7
    6fd0:	00000306 	br	6fe0 <___vfprintf_internal_r+0x7dc>
    6fd4:	843ffc04 	addi	r16,r16,-16
    6fd8:	42000204 	addi	r8,r8,8
    6fdc:	8c00130e 	bge	r17,r16,702c <___vfprintf_internal_r+0x828>
    6fe0:	014000b4 	movhi	r5,2
    6fe4:	18c00404 	addi	r3,r3,16
    6fe8:	10800044 	addi	r2,r2,1
    6fec:	2956ca84 	addi	r5,r5,23338
    6ff0:	41400015 	stw	r5,0(r8)
    6ff4:	44400115 	stw	r17,4(r8)
    6ff8:	d8c02015 	stw	r3,128(sp)
    6ffc:	d8801f15 	stw	r2,124(sp)
    7000:	90bff40e 	bge	r18,r2,6fd4 <__alt_mem_Flash_flash_data+0xf4006fd4>
    7004:	b009883a 	mov	r4,r22
    7008:	b80b883a 	mov	r5,r23
    700c:	d9801e04 	addi	r6,sp,120
    7010:	000ed180 	call	ed18 <__sprint_r>
    7014:	103eef1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7018:	843ffc04 	addi	r16,r16,-16
    701c:	d8c02017 	ldw	r3,128(sp)
    7020:	d8801f17 	ldw	r2,124(sp)
    7024:	da000404 	addi	r8,sp,16
    7028:	8c3fed16 	blt	r17,r16,6fe0 <__alt_mem_Flash_flash_data+0xf4006fe0>
    702c:	dac03617 	ldw	r11,216(sp)
    7030:	1c07883a 	add	r3,r3,r16
    7034:	10800044 	addi	r2,r2,1
    7038:	42c00015 	stw	r11,0(r8)
    703c:	44000115 	stw	r16,4(r8)
    7040:	d8c02015 	stw	r3,128(sp)
    7044:	d8801f15 	stw	r2,124(sp)
    7048:	010001c4 	movi	r4,7
    704c:	2080060e 	bge	r4,r2,7068 <___vfprintf_internal_r+0x864>
    7050:	b009883a 	mov	r4,r22
    7054:	b80b883a 	mov	r5,r23
    7058:	d9801e04 	addi	r6,sp,120
    705c:	000ed180 	call	ed18 <__sprint_r>
    7060:	103edc1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7064:	d8c02017 	ldw	r3,128(sp)
    7068:	d8802b17 	ldw	r2,172(sp)
    706c:	db002e17 	ldw	r12,184(sp)
    7070:	1300010e 	bge	r2,r12,7078 <___vfprintf_internal_r+0x874>
    7074:	6005883a 	mov	r2,r12
    7078:	dac02f17 	ldw	r11,188(sp)
    707c:	5897883a 	add	r11,r11,r2
    7080:	dac02f15 	stw	r11,188(sp)
    7084:	18020c1e 	bne	r3,zero,78b8 <___vfprintf_internal_r+0x10b4>
    7088:	d8001f15 	stw	zero,124(sp)
    708c:	da000404 	addi	r8,sp,16
    7090:	003e1706 	br	68f0 <__alt_mem_Flash_flash_data+0xf40068f0>
    7094:	8c400414 	ori	r17,r17,16
    7098:	d8c02a15 	stw	r3,168(sp)
    709c:	8880080c 	andi	r2,r17,32
    70a0:	10010126 	beq	r2,zero,74a8 <___vfprintf_internal_r+0xca4>
    70a4:	db002d17 	ldw	r12,180(sp)
    70a8:	0005883a 	mov	r2,zero
    70ac:	64c00017 	ldw	r19,0(r12)
    70b0:	67000117 	ldw	fp,4(r12)
    70b4:	63000204 	addi	r12,r12,8
    70b8:	db002d15 	stw	r12,180(sp)
    70bc:	9f06b03a 	or	r3,r19,fp
    70c0:	d8002785 	stb	zero,158(sp)
    70c4:	da403215 	stw	r9,200(sp)
    70c8:	002b883a 	mov	r21,zero
    70cc:	003f0106 	br	6cd4 <__alt_mem_Flash_flash_data+0xf4006cd4>
    70d0:	8c400414 	ori	r17,r17,16
    70d4:	d8c02a15 	stw	r3,168(sp)
    70d8:	8880080c 	andi	r2,r17,32
    70dc:	1000e326 	beq	r2,zero,746c <___vfprintf_internal_r+0xc68>
    70e0:	dac02d17 	ldw	r11,180(sp)
    70e4:	00800044 	movi	r2,1
    70e8:	5cc00017 	ldw	r19,0(r11)
    70ec:	5f000117 	ldw	fp,4(r11)
    70f0:	5ac00204 	addi	r11,r11,8
    70f4:	dac02d15 	stw	r11,180(sp)
    70f8:	9f06b03a 	or	r3,r19,fp
    70fc:	003ff006 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    7100:	db002d17 	ldw	r12,180(sp)
    7104:	dac02d17 	ldw	r11,180(sp)
    7108:	d8c02a15 	stw	r3,168(sp)
    710c:	63000017 	ldw	r12,0(r12)
    7110:	5ac00117 	ldw	r11,4(r11)
    7114:	d9802785 	stb	r6,158(sp)
    7118:	6009883a 	mov	r4,r12
    711c:	580b883a 	mov	r5,r11
    7120:	db003715 	stw	r12,220(sp)
    7124:	da003f15 	stw	r8,252(sp)
    7128:	da403e15 	stw	r9,248(sp)
    712c:	dac03915 	stw	r11,228(sp)
    7130:	000d7700 	call	d770 <__fpclassifyd>
    7134:	db002d17 	ldw	r12,180(sp)
    7138:	04800044 	movi	r18,1
    713c:	da003f17 	ldw	r8,252(sp)
    7140:	64c00204 	addi	r19,r12,8
    7144:	da403e17 	ldw	r9,248(sp)
    7148:	d9003717 	ldw	r4,220(sp)
    714c:	d9403917 	ldw	r5,228(sp)
    7150:	14832b1e 	bne	r2,r18,7e00 <___vfprintf_internal_r+0x15fc>
    7154:	000d883a 	mov	r6,zero
    7158:	000f883a 	mov	r7,zero
    715c:	00129200 	call	12920 <__ledf2>
    7160:	da003f17 	ldw	r8,252(sp)
    7164:	1004b716 	blt	r2,zero,8444 <___vfprintf_internal_r+0x1c40>
    7168:	dd402783 	ldbu	r21,158(sp)
    716c:	008011c4 	movi	r2,71
    7170:	14040e0e 	bge	r2,r16,81ac <___vfprintf_internal_r+0x19a8>
    7174:	00c000b4 	movhi	r3,2
    7178:	18d6af04 	addi	r3,r3,23228
    717c:	d8c03115 	stw	r3,196(sp)
    7180:	02c000c4 	movi	r11,3
    7184:	00bfdfc4 	movi	r2,-129
    7188:	dac02b15 	stw	r11,172(sp)
    718c:	88a2703a 	and	r17,r17,r2
    7190:	dcc02d15 	stw	r19,180(sp)
    7194:	5825883a 	mov	r18,r11
    7198:	d8003215 	stw	zero,200(sp)
    719c:	d8003415 	stw	zero,208(sp)
    71a0:	003eeb06 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    71a4:	db002d17 	ldw	r12,180(sp)
    71a8:	00800c04 	movi	r2,48
    71ac:	d8802705 	stb	r2,156(sp)
    71b0:	64c00017 	ldw	r19,0(r12)
    71b4:	00801e04 	movi	r2,120
    71b8:	d8802745 	stb	r2,157(sp)
    71bc:	008000b4 	movhi	r2,2
    71c0:	1096b704 	addi	r2,r2,23260
    71c4:	63000104 	addi	r12,r12,4
    71c8:	d8c02a15 	stw	r3,168(sp)
    71cc:	d8803b15 	stw	r2,236(sp)
    71d0:	0039883a 	mov	fp,zero
    71d4:	8c400094 	ori	r17,r17,2
    71d8:	db002d15 	stw	r12,180(sp)
    71dc:	00800084 	movi	r2,2
    71e0:	04001e04 	movi	r16,120
    71e4:	9807883a 	mov	r3,r19
    71e8:	003fb506 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    71ec:	8c400214 	ori	r17,r17,8
    71f0:	1805883a 	mov	r2,r3
    71f4:	1c000007 	ldb	r16,0(r3)
    71f8:	003de706 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    71fc:	d8c02a15 	stw	r3,168(sp)
    7200:	d9802785 	stb	r6,158(sp)
    7204:	8880080c 	andi	r2,r17,32
    7208:	d8c02d17 	ldw	r3,180(sp)
    720c:	103ea61e 	bne	r2,zero,6ca8 <__alt_mem_Flash_flash_data+0xf4006ca8>
    7210:	8880040c 	andi	r2,r17,16
    7214:	1002221e 	bne	r2,zero,7aa0 <___vfprintf_internal_r+0x129c>
    7218:	8880100c 	andi	r2,r17,64
    721c:	10022026 	beq	r2,zero,7aa0 <___vfprintf_internal_r+0x129c>
    7220:	1cc0000f 	ldh	r19,0(r3)
    7224:	db002d17 	ldw	r12,180(sp)
    7228:	9839d7fa 	srai	fp,r19,31
    722c:	63000104 	addi	r12,r12,4
    7230:	db002d15 	stw	r12,180(sp)
    7234:	e005883a 	mov	r2,fp
    7238:	003ea106 	br	6cc0 <__alt_mem_Flash_flash_data+0xf4006cc0>
    723c:	8c401014 	ori	r17,r17,64
    7240:	1805883a 	mov	r2,r3
    7244:	1c000007 	ldb	r16,0(r3)
    7248:	003dd306 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    724c:	1c000007 	ldb	r16,0(r3)
    7250:	81c3e926 	beq	r16,r7,81f8 <___vfprintf_internal_r+0x19f4>
    7254:	8c400414 	ori	r17,r17,16
    7258:	1805883a 	mov	r2,r3
    725c:	003dce06 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    7260:	d8c02a15 	stw	r3,168(sp)
    7264:	d9802785 	stb	r6,158(sp)
    7268:	8880080c 	andi	r2,r17,32
    726c:	10034726 	beq	r2,zero,7f8c <___vfprintf_internal_r+0x1788>
    7270:	db002d17 	ldw	r12,180(sp)
    7274:	dac02f17 	ldw	r11,188(sp)
    7278:	60800017 	ldw	r2,0(r12)
    727c:	5807d7fa 	srai	r3,r11,31
    7280:	63000104 	addi	r12,r12,4
    7284:	db002d15 	stw	r12,180(sp)
    7288:	12c00015 	stw	r11,0(r2)
    728c:	10c00115 	stw	r3,4(r2)
    7290:	003d9706 	br	68f0 <__alt_mem_Flash_flash_data+0xf40068f0>
    7294:	030000b4 	movhi	r12,2
    7298:	6316b204 	addi	r12,r12,23240
    729c:	d8c02a15 	stw	r3,168(sp)
    72a0:	d9802785 	stb	r6,158(sp)
    72a4:	db003b15 	stw	r12,236(sp)
    72a8:	88c0080c 	andi	r3,r17,32
    72ac:	d8802d17 	ldw	r2,180(sp)
    72b0:	18005b26 	beq	r3,zero,7420 <___vfprintf_internal_r+0xc1c>
    72b4:	dac02d17 	ldw	r11,180(sp)
    72b8:	14c00017 	ldw	r19,0(r2)
    72bc:	17000117 	ldw	fp,4(r2)
    72c0:	5ac00204 	addi	r11,r11,8
    72c4:	dac02d15 	stw	r11,180(sp)
    72c8:	8880004c 	andi	r2,r17,1
    72cc:	10022926 	beq	r2,zero,7b74 <___vfprintf_internal_r+0x1370>
    72d0:	9f06b03a 	or	r3,r19,fp
    72d4:	18032b26 	beq	r3,zero,7f84 <___vfprintf_internal_r+0x1780>
    72d8:	00800c04 	movi	r2,48
    72dc:	d8802705 	stb	r2,156(sp)
    72e0:	dc002745 	stb	r16,157(sp)
    72e4:	8c400094 	ori	r17,r17,2
    72e8:	00800084 	movi	r2,2
    72ec:	003f7406 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    72f0:	30803fcc 	andi	r2,r6,255
    72f4:	1080201c 	xori	r2,r2,128
    72f8:	10bfe004 	addi	r2,r2,-128
    72fc:	1003351e 	bne	r2,zero,7fd4 <___vfprintf_internal_r+0x17d0>
    7300:	1805883a 	mov	r2,r3
    7304:	01800804 	movi	r6,32
    7308:	1c000007 	ldb	r16,0(r3)
    730c:	003da206 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    7310:	dac02d17 	ldw	r11,180(sp)
    7314:	db002d17 	ldw	r12,180(sp)
    7318:	5ac00017 	ldw	r11,0(r11)
    731c:	dac02e15 	stw	r11,184(sp)
    7320:	62c00104 	addi	r11,r12,4
    7324:	db002e17 	ldw	r12,184(sp)
    7328:	6003ad16 	blt	r12,zero,81e0 <___vfprintf_internal_r+0x19dc>
    732c:	dac02d15 	stw	r11,180(sp)
    7330:	1805883a 	mov	r2,r3
    7334:	1c000007 	ldb	r16,0(r3)
    7338:	003d9706 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    733c:	1805883a 	mov	r2,r3
    7340:	01800ac4 	movi	r6,43
    7344:	1c000007 	ldb	r16,0(r3)
    7348:	003d9306 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    734c:	db002d17 	ldw	r12,180(sp)
    7350:	d8c02a15 	stw	r3,168(sp)
    7354:	00c00044 	movi	r3,1
    7358:	60800017 	ldw	r2,0(r12)
    735c:	63000104 	addi	r12,r12,4
    7360:	d8c02b15 	stw	r3,172(sp)
    7364:	d8002785 	stb	zero,158(sp)
    7368:	d8801405 	stb	r2,80(sp)
    736c:	db002d15 	stw	r12,180(sp)
    7370:	dac01404 	addi	r11,sp,80
    7374:	1825883a 	mov	r18,r3
    7378:	d8003215 	stw	zero,200(sp)
    737c:	d8003415 	stw	zero,208(sp)
    7380:	dac03115 	stw	r11,196(sp)
    7384:	0005883a 	mov	r2,zero
    7388:	003e7806 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    738c:	dac02d17 	ldw	r11,180(sp)
    7390:	db002d17 	ldw	r12,180(sp)
    7394:	d8c02a15 	stw	r3,168(sp)
    7398:	5ac00017 	ldw	r11,0(r11)
    739c:	d8002785 	stb	zero,158(sp)
    73a0:	64c00104 	addi	r19,r12,4
    73a4:	dac03115 	stw	r11,196(sp)
    73a8:	5803fe26 	beq	r11,zero,83a4 <___vfprintf_internal_r+0x1ba0>
    73ac:	d9003117 	ldw	r4,196(sp)
    73b0:	4803b416 	blt	r9,zero,8284 <___vfprintf_internal_r+0x1a80>
    73b4:	480d883a 	mov	r6,r9
    73b8:	000b883a 	mov	r5,zero
    73bc:	da003f15 	stw	r8,252(sp)
    73c0:	da403e15 	stw	r9,248(sp)
    73c4:	000bd800 	call	bd80 <memchr>
    73c8:	da003f17 	ldw	r8,252(sp)
    73cc:	da403e17 	ldw	r9,248(sp)
    73d0:	10043026 	beq	r2,zero,8494 <___vfprintf_internal_r+0x1c90>
    73d4:	d8c03117 	ldw	r3,196(sp)
    73d8:	10e5c83a 	sub	r18,r2,r3
    73dc:	4c836b16 	blt	r9,r18,818c <___vfprintf_internal_r+0x1988>
    73e0:	9005883a 	mov	r2,r18
    73e4:	9003ac16 	blt	r18,zero,8298 <___vfprintf_internal_r+0x1a94>
    73e8:	dd402783 	ldbu	r21,158(sp)
    73ec:	d8802b15 	stw	r2,172(sp)
    73f0:	dcc02d15 	stw	r19,180(sp)
    73f4:	d8003215 	stw	zero,200(sp)
    73f8:	d8003415 	stw	zero,208(sp)
    73fc:	003e5406 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    7400:	008000b4 	movhi	r2,2
    7404:	1096b704 	addi	r2,r2,23260
    7408:	d8c02a15 	stw	r3,168(sp)
    740c:	d8803b15 	stw	r2,236(sp)
    7410:	d9802785 	stb	r6,158(sp)
    7414:	88c0080c 	andi	r3,r17,32
    7418:	d8802d17 	ldw	r2,180(sp)
    741c:	183fa51e 	bne	r3,zero,72b4 <__alt_mem_Flash_flash_data+0xf40072b4>
    7420:	88c0040c 	andi	r3,r17,16
    7424:	1802ee26 	beq	r3,zero,7fe0 <___vfprintf_internal_r+0x17dc>
    7428:	db002d17 	ldw	r12,180(sp)
    742c:	14c00017 	ldw	r19,0(r2)
    7430:	0039883a 	mov	fp,zero
    7434:	63000104 	addi	r12,r12,4
    7438:	db002d15 	stw	r12,180(sp)
    743c:	003fa206 	br	72c8 <__alt_mem_Flash_flash_data+0xf40072c8>
    7440:	8c400054 	ori	r17,r17,1
    7444:	1805883a 	mov	r2,r3
    7448:	1c000007 	ldb	r16,0(r3)
    744c:	003d5206 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    7450:	8c400814 	ori	r17,r17,32
    7454:	1805883a 	mov	r2,r3
    7458:	1c000007 	ldb	r16,0(r3)
    745c:	003d4e06 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    7460:	d8c02a15 	stw	r3,168(sp)
    7464:	8880080c 	andi	r2,r17,32
    7468:	103f1d1e 	bne	r2,zero,70e0 <__alt_mem_Flash_flash_data+0xf40070e0>
    746c:	8880040c 	andi	r2,r17,16
    7470:	1001b81e 	bne	r2,zero,7b54 <___vfprintf_internal_r+0x1350>
    7474:	8880100c 	andi	r2,r17,64
    7478:	1001b626 	beq	r2,zero,7b54 <___vfprintf_internal_r+0x1350>
    747c:	dac02d17 	ldw	r11,180(sp)
    7480:	0039883a 	mov	fp,zero
    7484:	00800044 	movi	r2,1
    7488:	5cc0000b 	ldhu	r19,0(r11)
    748c:	5ac00104 	addi	r11,r11,4
    7490:	dac02d15 	stw	r11,180(sp)
    7494:	9807883a 	mov	r3,r19
    7498:	003f0906 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    749c:	d8c02a15 	stw	r3,168(sp)
    74a0:	8880080c 	andi	r2,r17,32
    74a4:	103eff1e 	bne	r2,zero,70a4 <__alt_mem_Flash_flash_data+0xf40070a4>
    74a8:	8880040c 	andi	r2,r17,16
    74ac:	1001a11e 	bne	r2,zero,7b34 <___vfprintf_internal_r+0x1330>
    74b0:	8880100c 	andi	r2,r17,64
    74b4:	10019f26 	beq	r2,zero,7b34 <___vfprintf_internal_r+0x1330>
    74b8:	db002d17 	ldw	r12,180(sp)
    74bc:	0039883a 	mov	fp,zero
    74c0:	0005883a 	mov	r2,zero
    74c4:	64c0000b 	ldhu	r19,0(r12)
    74c8:	63000104 	addi	r12,r12,4
    74cc:	db002d15 	stw	r12,180(sp)
    74d0:	9807883a 	mov	r3,r19
    74d4:	003efa06 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    74d8:	d8c02a15 	stw	r3,168(sp)
    74dc:	d9802785 	stb	r6,158(sp)
    74e0:	803db626 	beq	r16,zero,6bbc <__alt_mem_Flash_flash_data+0xf4006bbc>
    74e4:	00c00044 	movi	r3,1
    74e8:	d8c02b15 	stw	r3,172(sp)
    74ec:	dc001405 	stb	r16,80(sp)
    74f0:	d8002785 	stb	zero,158(sp)
    74f4:	003f9e06 	br	7370 <__alt_mem_Flash_flash_data+0xf4007370>
    74f8:	d8c02017 	ldw	r3,128(sp)
    74fc:	003e5306 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7500:	10803fcc 	andi	r2,r2,255
    7504:	00c00044 	movi	r3,1
    7508:	10fdfa1e 	bne	r2,r3,6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    750c:	e000021e 	bne	fp,zero,7518 <___vfprintf_internal_r+0xd14>
    7510:	00800244 	movi	r2,9
    7514:	14c0202e 	bgeu	r2,r19,7598 <___vfprintf_internal_r+0xd94>
    7518:	dc002b15 	stw	r16,172(sp)
    751c:	dc402c15 	stw	r17,176(sp)
    7520:	9821883a 	mov	r16,r19
    7524:	e023883a 	mov	r17,fp
    7528:	dc801e04 	addi	r18,sp,120
    752c:	4827883a 	mov	r19,r9
    7530:	4039883a 	mov	fp,r8
    7534:	8009883a 	mov	r4,r16
    7538:	880b883a 	mov	r5,r17
    753c:	01800284 	movi	r6,10
    7540:	000f883a 	mov	r7,zero
    7544:	0010f980 	call	10f98 <__umoddi3>
    7548:	10800c04 	addi	r2,r2,48
    754c:	94bfffc4 	addi	r18,r18,-1
    7550:	8009883a 	mov	r4,r16
    7554:	880b883a 	mov	r5,r17
    7558:	01800284 	movi	r6,10
    755c:	000f883a 	mov	r7,zero
    7560:	90800005 	stb	r2,0(r18)
    7564:	00109d80 	call	109d8 <__udivdi3>
    7568:	1021883a 	mov	r16,r2
    756c:	10c4b03a 	or	r2,r2,r3
    7570:	1823883a 	mov	r17,r3
    7574:	103fef1e 	bne	r2,zero,7534 <__alt_mem_Flash_flash_data+0xf4007534>
    7578:	dac02817 	ldw	r11,160(sp)
    757c:	dc803115 	stw	r18,196(sp)
    7580:	dc002b17 	ldw	r16,172(sp)
    7584:	dc402c17 	ldw	r17,176(sp)
    7588:	9813883a 	mov	r9,r19
    758c:	e011883a 	mov	r8,fp
    7590:	5ca5c83a 	sub	r18,r11,r18
    7594:	003de906 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    7598:	9cc00c04 	addi	r19,r19,48
    759c:	d8c01dc4 	addi	r3,sp,119
    75a0:	dcc01dc5 	stb	r19,119(sp)
    75a4:	dc803c17 	ldw	r18,240(sp)
    75a8:	d8c03115 	stw	r3,196(sp)
    75ac:	003de306 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    75b0:	00801944 	movi	r2,101
    75b4:	1400710e 	bge	r2,r16,777c <___vfprintf_internal_r+0xf78>
    75b8:	d9003717 	ldw	r4,220(sp)
    75bc:	d9403917 	ldw	r5,228(sp)
    75c0:	000d883a 	mov	r6,zero
    75c4:	000f883a 	mov	r7,zero
    75c8:	d8c03d15 	stw	r3,244(sp)
    75cc:	da003f15 	stw	r8,252(sp)
    75d0:	00127bc0 	call	127bc <__eqdf2>
    75d4:	d8c03d17 	ldw	r3,244(sp)
    75d8:	da003f17 	ldw	r8,252(sp)
    75dc:	1000ef1e 	bne	r2,zero,799c <___vfprintf_internal_r+0x1198>
    75e0:	d8801f17 	ldw	r2,124(sp)
    75e4:	010000b4 	movhi	r4,2
    75e8:	2116be04 	addi	r4,r4,23288
    75ec:	18c00044 	addi	r3,r3,1
    75f0:	10800044 	addi	r2,r2,1
    75f4:	41000015 	stw	r4,0(r8)
    75f8:	01000044 	movi	r4,1
    75fc:	41000115 	stw	r4,4(r8)
    7600:	d8c02015 	stw	r3,128(sp)
    7604:	d8801f15 	stw	r2,124(sp)
    7608:	010001c4 	movi	r4,7
    760c:	20828e16 	blt	r4,r2,8048 <___vfprintf_internal_r+0x1844>
    7610:	42000204 	addi	r8,r8,8
    7614:	d8802617 	ldw	r2,152(sp)
    7618:	dac03317 	ldw	r11,204(sp)
    761c:	12c00216 	blt	r2,r11,7628 <___vfprintf_internal_r+0xe24>
    7620:	8880004c 	andi	r2,r17,1
    7624:	103e5d26 	beq	r2,zero,6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    7628:	db003817 	ldw	r12,224(sp)
    762c:	d8801f17 	ldw	r2,124(sp)
    7630:	dac03517 	ldw	r11,212(sp)
    7634:	1b07883a 	add	r3,r3,r12
    7638:	10800044 	addi	r2,r2,1
    763c:	42c00015 	stw	r11,0(r8)
    7640:	43000115 	stw	r12,4(r8)
    7644:	d8c02015 	stw	r3,128(sp)
    7648:	d8801f15 	stw	r2,124(sp)
    764c:	010001c4 	movi	r4,7
    7650:	2082ed16 	blt	r4,r2,8208 <___vfprintf_internal_r+0x1a04>
    7654:	42000204 	addi	r8,r8,8
    7658:	db003317 	ldw	r12,204(sp)
    765c:	643fffc4 	addi	r16,r12,-1
    7660:	043e4e0e 	bge	zero,r16,6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    7664:	04800404 	movi	r18,16
    7668:	d8801f17 	ldw	r2,124(sp)
    766c:	94007e0e 	bge	r18,r16,7868 <___vfprintf_internal_r+0x1064>
    7670:	014000b4 	movhi	r5,2
    7674:	2956c684 	addi	r5,r5,23322
    7678:	d9402c15 	stw	r5,176(sp)
    767c:	054001c4 	movi	r21,7
    7680:	00000306 	br	7690 <___vfprintf_internal_r+0xe8c>
    7684:	42000204 	addi	r8,r8,8
    7688:	843ffc04 	addi	r16,r16,-16
    768c:	9400790e 	bge	r18,r16,7874 <___vfprintf_internal_r+0x1070>
    7690:	18c00404 	addi	r3,r3,16
    7694:	10800044 	addi	r2,r2,1
    7698:	45000015 	stw	r20,0(r8)
    769c:	44800115 	stw	r18,4(r8)
    76a0:	d8c02015 	stw	r3,128(sp)
    76a4:	d8801f15 	stw	r2,124(sp)
    76a8:	a8bff60e 	bge	r21,r2,7684 <__alt_mem_Flash_flash_data+0xf4007684>
    76ac:	b009883a 	mov	r4,r22
    76b0:	b80b883a 	mov	r5,r23
    76b4:	d9801e04 	addi	r6,sp,120
    76b8:	000ed180 	call	ed18 <__sprint_r>
    76bc:	103d451e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    76c0:	d8c02017 	ldw	r3,128(sp)
    76c4:	d8801f17 	ldw	r2,124(sp)
    76c8:	da000404 	addi	r8,sp,16
    76cc:	003fee06 	br	7688 <__alt_mem_Flash_flash_data+0xf4007688>
    76d0:	dac02e17 	ldw	r11,184(sp)
    76d4:	db002b17 	ldw	r12,172(sp)
    76d8:	5b2bc83a 	sub	r21,r11,r12
    76dc:	057df90e 	bge	zero,r21,6ec4 <__alt_mem_Flash_flash_data+0xf4006ec4>
    76e0:	07000404 	movi	fp,16
    76e4:	d8801f17 	ldw	r2,124(sp)
    76e8:	e543640e 	bge	fp,r21,847c <___vfprintf_internal_r+0x1c78>
    76ec:	014000b4 	movhi	r5,2
    76f0:	2956c684 	addi	r5,r5,23322
    76f4:	d9402c15 	stw	r5,176(sp)
    76f8:	04c001c4 	movi	r19,7
    76fc:	00000306 	br	770c <___vfprintf_internal_r+0xf08>
    7700:	ad7ffc04 	addi	r21,r21,-16
    7704:	42000204 	addi	r8,r8,8
    7708:	e540110e 	bge	fp,r21,7750 <___vfprintf_internal_r+0xf4c>
    770c:	18c00404 	addi	r3,r3,16
    7710:	10800044 	addi	r2,r2,1
    7714:	45000015 	stw	r20,0(r8)
    7718:	47000115 	stw	fp,4(r8)
    771c:	d8c02015 	stw	r3,128(sp)
    7720:	d8801f15 	stw	r2,124(sp)
    7724:	98bff60e 	bge	r19,r2,7700 <__alt_mem_Flash_flash_data+0xf4007700>
    7728:	b009883a 	mov	r4,r22
    772c:	b80b883a 	mov	r5,r23
    7730:	d9801e04 	addi	r6,sp,120
    7734:	000ed180 	call	ed18 <__sprint_r>
    7738:	103d261e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    773c:	ad7ffc04 	addi	r21,r21,-16
    7740:	d8c02017 	ldw	r3,128(sp)
    7744:	d8801f17 	ldw	r2,124(sp)
    7748:	da000404 	addi	r8,sp,16
    774c:	e57fef16 	blt	fp,r21,770c <__alt_mem_Flash_flash_data+0xf400770c>
    7750:	dac02c17 	ldw	r11,176(sp)
    7754:	1d47883a 	add	r3,r3,r21
    7758:	10800044 	addi	r2,r2,1
    775c:	42c00015 	stw	r11,0(r8)
    7760:	45400115 	stw	r21,4(r8)
    7764:	d8c02015 	stw	r3,128(sp)
    7768:	d8801f15 	stw	r2,124(sp)
    776c:	010001c4 	movi	r4,7
    7770:	20819116 	blt	r4,r2,7db8 <___vfprintf_internal_r+0x15b4>
    7774:	42000204 	addi	r8,r8,8
    7778:	003dd206 	br	6ec4 <__alt_mem_Flash_flash_data+0xf4006ec4>
    777c:	db003317 	ldw	r12,204(sp)
    7780:	00800044 	movi	r2,1
    7784:	18c00044 	addi	r3,r3,1
    7788:	1301530e 	bge	r2,r12,7cd8 <___vfprintf_internal_r+0x14d4>
    778c:	dc001f17 	ldw	r16,124(sp)
    7790:	dac03117 	ldw	r11,196(sp)
    7794:	00800044 	movi	r2,1
    7798:	84000044 	addi	r16,r16,1
    779c:	40800115 	stw	r2,4(r8)
    77a0:	42c00015 	stw	r11,0(r8)
    77a4:	d8c02015 	stw	r3,128(sp)
    77a8:	dc001f15 	stw	r16,124(sp)
    77ac:	008001c4 	movi	r2,7
    77b0:	14016b16 	blt	r2,r16,7d60 <___vfprintf_internal_r+0x155c>
    77b4:	42000204 	addi	r8,r8,8
    77b8:	db003817 	ldw	r12,224(sp)
    77bc:	dac03517 	ldw	r11,212(sp)
    77c0:	84000044 	addi	r16,r16,1
    77c4:	1b07883a 	add	r3,r3,r12
    77c8:	42c00015 	stw	r11,0(r8)
    77cc:	43000115 	stw	r12,4(r8)
    77d0:	d8c02015 	stw	r3,128(sp)
    77d4:	dc001f15 	stw	r16,124(sp)
    77d8:	008001c4 	movi	r2,7
    77dc:	14016916 	blt	r2,r16,7d84 <___vfprintf_internal_r+0x1580>
    77e0:	44800204 	addi	r18,r8,8
    77e4:	d9003717 	ldw	r4,220(sp)
    77e8:	d9403917 	ldw	r5,228(sp)
    77ec:	000d883a 	mov	r6,zero
    77f0:	000f883a 	mov	r7,zero
    77f4:	d8c03d15 	stw	r3,244(sp)
    77f8:	00127bc0 	call	127bc <__eqdf2>
    77fc:	d8c03d17 	ldw	r3,244(sp)
    7800:	db003317 	ldw	r12,204(sp)
    7804:	1000ad26 	beq	r2,zero,7abc <___vfprintf_internal_r+0x12b8>
    7808:	dac03117 	ldw	r11,196(sp)
    780c:	60bfffc4 	addi	r2,r12,-1
    7810:	1887883a 	add	r3,r3,r2
    7814:	59000044 	addi	r4,r11,1
    7818:	84000044 	addi	r16,r16,1
    781c:	90800115 	stw	r2,4(r18)
    7820:	91000015 	stw	r4,0(r18)
    7824:	d8c02015 	stw	r3,128(sp)
    7828:	dc001f15 	stw	r16,124(sp)
    782c:	008001c4 	movi	r2,7
    7830:	14014216 	blt	r2,r16,7d3c <___vfprintf_internal_r+0x1538>
    7834:	94800204 	addi	r18,r18,8
    7838:	dac03a17 	ldw	r11,232(sp)
    783c:	dd4022c4 	addi	r21,sp,139
    7840:	84000044 	addi	r16,r16,1
    7844:	1ac7883a 	add	r3,r3,r11
    7848:	95400015 	stw	r21,0(r18)
    784c:	92c00115 	stw	r11,4(r18)
    7850:	d8c02015 	stw	r3,128(sp)
    7854:	dc001f15 	stw	r16,124(sp)
    7858:	008001c4 	movi	r2,7
    785c:	14000e16 	blt	r2,r16,7898 <___vfprintf_internal_r+0x1094>
    7860:	92000204 	addi	r8,r18,8
    7864:	003dcd06 	br	6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    7868:	010000b4 	movhi	r4,2
    786c:	2116c684 	addi	r4,r4,23322
    7870:	d9002c15 	stw	r4,176(sp)
    7874:	dac02c17 	ldw	r11,176(sp)
    7878:	1c07883a 	add	r3,r3,r16
    787c:	44000115 	stw	r16,4(r8)
    7880:	42c00015 	stw	r11,0(r8)
    7884:	10800044 	addi	r2,r2,1
    7888:	d8c02015 	stw	r3,128(sp)
    788c:	d8801f15 	stw	r2,124(sp)
    7890:	010001c4 	movi	r4,7
    7894:	20bdc00e 	bge	r4,r2,6f98 <__alt_mem_Flash_flash_data+0xf4006f98>
    7898:	b009883a 	mov	r4,r22
    789c:	b80b883a 	mov	r5,r23
    78a0:	d9801e04 	addi	r6,sp,120
    78a4:	000ed180 	call	ed18 <__sprint_r>
    78a8:	103cca1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    78ac:	d8c02017 	ldw	r3,128(sp)
    78b0:	da000404 	addi	r8,sp,16
    78b4:	003db906 	br	6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    78b8:	b009883a 	mov	r4,r22
    78bc:	b80b883a 	mov	r5,r23
    78c0:	d9801e04 	addi	r6,sp,120
    78c4:	000ed180 	call	ed18 <__sprint_r>
    78c8:	103def26 	beq	r2,zero,7088 <__alt_mem_Flash_flash_data+0xf4007088>
    78cc:	003cc106 	br	6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    78d0:	10803fcc 	andi	r2,r2,255
    78d4:	1000651e 	bne	r2,zero,7a6c <___vfprintf_internal_r+0x1268>
    78d8:	8880004c 	andi	r2,r17,1
    78dc:	10013226 	beq	r2,zero,7da8 <___vfprintf_internal_r+0x15a4>
    78e0:	00800c04 	movi	r2,48
    78e4:	d8c01dc4 	addi	r3,sp,119
    78e8:	d8801dc5 	stb	r2,119(sp)
    78ec:	dc803c17 	ldw	r18,240(sp)
    78f0:	d8c03115 	stw	r3,196(sp)
    78f4:	003d1106 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    78f8:	b009883a 	mov	r4,r22
    78fc:	b80b883a 	mov	r5,r23
    7900:	d9801e04 	addi	r6,sp,120
    7904:	000ed180 	call	ed18 <__sprint_r>
    7908:	103cb21e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    790c:	d8c02017 	ldw	r3,128(sp)
    7910:	da000404 	addi	r8,sp,16
    7914:	003d9406 	br	6f68 <__alt_mem_Flash_flash_data+0xf4006f68>
    7918:	b009883a 	mov	r4,r22
    791c:	b80b883a 	mov	r5,r23
    7920:	d9801e04 	addi	r6,sp,120
    7924:	000ed180 	call	ed18 <__sprint_r>
    7928:	103caa1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    792c:	d8c02017 	ldw	r3,128(sp)
    7930:	da000404 	addi	r8,sp,16
    7934:	003d5206 	br	6e80 <__alt_mem_Flash_flash_data+0xf4006e80>
    7938:	b009883a 	mov	r4,r22
    793c:	b80b883a 	mov	r5,r23
    7940:	d9801e04 	addi	r6,sp,120
    7944:	000ed180 	call	ed18 <__sprint_r>
    7948:	103ca21e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    794c:	d8c02017 	ldw	r3,128(sp)
    7950:	da000404 	addi	r8,sp,16
    7954:	003d5806 	br	6eb8 <__alt_mem_Flash_flash_data+0xf4006eb8>
    7958:	d9403b17 	ldw	r5,236(sp)
    795c:	d8c01e04 	addi	r3,sp,120
    7960:	988003cc 	andi	r2,r19,15
    7964:	e008973a 	slli	r4,fp,28
    7968:	2885883a 	add	r2,r5,r2
    796c:	9826d13a 	srli	r19,r19,4
    7970:	10800003 	ldbu	r2,0(r2)
    7974:	e038d13a 	srli	fp,fp,4
    7978:	18ffffc4 	addi	r3,r3,-1
    797c:	24e6b03a 	or	r19,r4,r19
    7980:	18800005 	stb	r2,0(r3)
    7984:	9f04b03a 	or	r2,r19,fp
    7988:	103ff51e 	bne	r2,zero,7960 <__alt_mem_Flash_flash_data+0xf4007960>
    798c:	db002817 	ldw	r12,160(sp)
    7990:	d8c03115 	stw	r3,196(sp)
    7994:	60e5c83a 	sub	r18,r12,r3
    7998:	003ce806 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    799c:	dc002617 	ldw	r16,152(sp)
    79a0:	0401b10e 	bge	zero,r16,8068 <___vfprintf_internal_r+0x1864>
    79a4:	db003117 	ldw	r12,196(sp)
    79a8:	dac03317 	ldw	r11,204(sp)
    79ac:	62e1883a 	add	r16,r12,r11
    79b0:	db003417 	ldw	r12,208(sp)
    79b4:	5825883a 	mov	r18,r11
    79b8:	62c0010e 	bge	r12,r11,79c0 <___vfprintf_internal_r+0x11bc>
    79bc:	6025883a 	mov	r18,r12
    79c0:	04800b0e 	bge	zero,r18,79f0 <___vfprintf_internal_r+0x11ec>
    79c4:	d8801f17 	ldw	r2,124(sp)
    79c8:	dac03117 	ldw	r11,196(sp)
    79cc:	1c87883a 	add	r3,r3,r18
    79d0:	10800044 	addi	r2,r2,1
    79d4:	42c00015 	stw	r11,0(r8)
    79d8:	44800115 	stw	r18,4(r8)
    79dc:	d8c02015 	stw	r3,128(sp)
    79e0:	d8801f15 	stw	r2,124(sp)
    79e4:	010001c4 	movi	r4,7
    79e8:	20824f16 	blt	r4,r2,8328 <___vfprintf_internal_r+0x1b24>
    79ec:	42000204 	addi	r8,r8,8
    79f0:	90024b16 	blt	r18,zero,8320 <___vfprintf_internal_r+0x1b1c>
    79f4:	db003417 	ldw	r12,208(sp)
    79f8:	64a5c83a 	sub	r18,r12,r18
    79fc:	0480730e 	bge	zero,r18,7bcc <___vfprintf_internal_r+0x13c8>
    7a00:	05400404 	movi	r21,16
    7a04:	d8801f17 	ldw	r2,124(sp)
    7a08:	ac817d0e 	bge	r21,r18,8000 <___vfprintf_internal_r+0x17fc>
    7a0c:	014000b4 	movhi	r5,2
    7a10:	2956c684 	addi	r5,r5,23322
    7a14:	d9402c15 	stw	r5,176(sp)
    7a18:	070001c4 	movi	fp,7
    7a1c:	00000306 	br	7a2c <___vfprintf_internal_r+0x1228>
    7a20:	42000204 	addi	r8,r8,8
    7a24:	94bffc04 	addi	r18,r18,-16
    7a28:	ac81780e 	bge	r21,r18,800c <___vfprintf_internal_r+0x1808>
    7a2c:	18c00404 	addi	r3,r3,16
    7a30:	10800044 	addi	r2,r2,1
    7a34:	45000015 	stw	r20,0(r8)
    7a38:	45400115 	stw	r21,4(r8)
    7a3c:	d8c02015 	stw	r3,128(sp)
    7a40:	d8801f15 	stw	r2,124(sp)
    7a44:	e0bff60e 	bge	fp,r2,7a20 <__alt_mem_Flash_flash_data+0xf4007a20>
    7a48:	b009883a 	mov	r4,r22
    7a4c:	b80b883a 	mov	r5,r23
    7a50:	d9801e04 	addi	r6,sp,120
    7a54:	000ed180 	call	ed18 <__sprint_r>
    7a58:	103c5e1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7a5c:	d8c02017 	ldw	r3,128(sp)
    7a60:	d8801f17 	ldw	r2,124(sp)
    7a64:	da000404 	addi	r8,sp,16
    7a68:	003fee06 	br	7a24 <__alt_mem_Flash_flash_data+0xf4007a24>
    7a6c:	dac01e04 	addi	r11,sp,120
    7a70:	0025883a 	mov	r18,zero
    7a74:	dac03115 	stw	r11,196(sp)
    7a78:	003cb006 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    7a7c:	b009883a 	mov	r4,r22
    7a80:	b80b883a 	mov	r5,r23
    7a84:	d9801e04 	addi	r6,sp,120
    7a88:	000ed180 	call	ed18 <__sprint_r>
    7a8c:	103c511e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7a90:	d8c02017 	ldw	r3,128(sp)
    7a94:	d8802787 	ldb	r2,158(sp)
    7a98:	da000404 	addi	r8,sp,16
    7a9c:	003ceb06 	br	6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    7aa0:	1cc00017 	ldw	r19,0(r3)
    7aa4:	dac02d17 	ldw	r11,180(sp)
    7aa8:	9839d7fa 	srai	fp,r19,31
    7aac:	5ac00104 	addi	r11,r11,4
    7ab0:	dac02d15 	stw	r11,180(sp)
    7ab4:	e005883a 	mov	r2,fp
    7ab8:	003c8106 	br	6cc0 <__alt_mem_Flash_flash_data+0xf4006cc0>
    7abc:	657fffc4 	addi	r21,r12,-1
    7ac0:	057f5d0e 	bge	zero,r21,7838 <__alt_mem_Flash_flash_data+0xf4007838>
    7ac4:	07000404 	movi	fp,16
    7ac8:	e540900e 	bge	fp,r21,7d0c <___vfprintf_internal_r+0x1508>
    7acc:	010000b4 	movhi	r4,2
    7ad0:	2116c684 	addi	r4,r4,23322
    7ad4:	d9002c15 	stw	r4,176(sp)
    7ad8:	01c001c4 	movi	r7,7
    7adc:	00000306 	br	7aec <___vfprintf_internal_r+0x12e8>
    7ae0:	94800204 	addi	r18,r18,8
    7ae4:	ad7ffc04 	addi	r21,r21,-16
    7ae8:	e5408b0e 	bge	fp,r21,7d18 <___vfprintf_internal_r+0x1514>
    7aec:	18c00404 	addi	r3,r3,16
    7af0:	84000044 	addi	r16,r16,1
    7af4:	95000015 	stw	r20,0(r18)
    7af8:	97000115 	stw	fp,4(r18)
    7afc:	d8c02015 	stw	r3,128(sp)
    7b00:	dc001f15 	stw	r16,124(sp)
    7b04:	3c3ff60e 	bge	r7,r16,7ae0 <__alt_mem_Flash_flash_data+0xf4007ae0>
    7b08:	b009883a 	mov	r4,r22
    7b0c:	b80b883a 	mov	r5,r23
    7b10:	d9801e04 	addi	r6,sp,120
    7b14:	d9c03d15 	stw	r7,244(sp)
    7b18:	000ed180 	call	ed18 <__sprint_r>
    7b1c:	d9c03d17 	ldw	r7,244(sp)
    7b20:	103c2c1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7b24:	d8c02017 	ldw	r3,128(sp)
    7b28:	dc001f17 	ldw	r16,124(sp)
    7b2c:	dc800404 	addi	r18,sp,16
    7b30:	003fec06 	br	7ae4 <__alt_mem_Flash_flash_data+0xf4007ae4>
    7b34:	dac02d17 	ldw	r11,180(sp)
    7b38:	0039883a 	mov	fp,zero
    7b3c:	0005883a 	mov	r2,zero
    7b40:	5cc00017 	ldw	r19,0(r11)
    7b44:	5ac00104 	addi	r11,r11,4
    7b48:	dac02d15 	stw	r11,180(sp)
    7b4c:	9807883a 	mov	r3,r19
    7b50:	003d5b06 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    7b54:	db002d17 	ldw	r12,180(sp)
    7b58:	0039883a 	mov	fp,zero
    7b5c:	00800044 	movi	r2,1
    7b60:	64c00017 	ldw	r19,0(r12)
    7b64:	63000104 	addi	r12,r12,4
    7b68:	db002d15 	stw	r12,180(sp)
    7b6c:	9807883a 	mov	r3,r19
    7b70:	003d5306 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    7b74:	00800084 	movi	r2,2
    7b78:	9f06b03a 	or	r3,r19,fp
    7b7c:	003d5006 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    7b80:	10803fcc 	andi	r2,r2,255
    7b84:	1080201c 	xori	r2,r2,128
    7b88:	10bfe004 	addi	r2,r2,-128
    7b8c:	01000c04 	movi	r4,48
    7b90:	1101a526 	beq	r2,r4,8228 <___vfprintf_internal_r+0x1a24>
    7b94:	dac03117 	ldw	r11,196(sp)
    7b98:	db002817 	ldw	r12,160(sp)
    7b9c:	193fffc5 	stb	r4,-1(r3)
    7ba0:	5affffc4 	addi	r11,r11,-1
    7ba4:	dac03115 	stw	r11,196(sp)
    7ba8:	62e5c83a 	sub	r18,r12,r11
    7bac:	003c6306 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    7bb0:	b009883a 	mov	r4,r22
    7bb4:	b80b883a 	mov	r5,r23
    7bb8:	d9801e04 	addi	r6,sp,120
    7bbc:	000ed180 	call	ed18 <__sprint_r>
    7bc0:	103c041e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7bc4:	d8c02017 	ldw	r3,128(sp)
    7bc8:	da000404 	addi	r8,sp,16
    7bcc:	db003117 	ldw	r12,196(sp)
    7bd0:	dac03417 	ldw	r11,208(sp)
    7bd4:	d8802617 	ldw	r2,152(sp)
    7bd8:	62e5883a 	add	r18,r12,r11
    7bdc:	db003317 	ldw	r12,204(sp)
    7be0:	13000216 	blt	r2,r12,7bec <___vfprintf_internal_r+0x13e8>
    7be4:	8900004c 	andi	r4,r17,1
    7be8:	20000c26 	beq	r4,zero,7c1c <___vfprintf_internal_r+0x1418>
    7bec:	dac03817 	ldw	r11,224(sp)
    7bf0:	d9001f17 	ldw	r4,124(sp)
    7bf4:	db003517 	ldw	r12,212(sp)
    7bf8:	1ac7883a 	add	r3,r3,r11
    7bfc:	21000044 	addi	r4,r4,1
    7c00:	43000015 	stw	r12,0(r8)
    7c04:	42c00115 	stw	r11,4(r8)
    7c08:	d8c02015 	stw	r3,128(sp)
    7c0c:	d9001f15 	stw	r4,124(sp)
    7c10:	014001c4 	movi	r5,7
    7c14:	2901cc16 	blt	r5,r4,8348 <___vfprintf_internal_r+0x1b44>
    7c18:	42000204 	addi	r8,r8,8
    7c1c:	dac03317 	ldw	r11,204(sp)
    7c20:	8489c83a 	sub	r4,r16,r18
    7c24:	5885c83a 	sub	r2,r11,r2
    7c28:	1021883a 	mov	r16,r2
    7c2c:	2080010e 	bge	r4,r2,7c34 <___vfprintf_internal_r+0x1430>
    7c30:	2021883a 	mov	r16,r4
    7c34:	04000a0e 	bge	zero,r16,7c60 <___vfprintf_internal_r+0x145c>
    7c38:	d9001f17 	ldw	r4,124(sp)
    7c3c:	1c07883a 	add	r3,r3,r16
    7c40:	44800015 	stw	r18,0(r8)
    7c44:	21000044 	addi	r4,r4,1
    7c48:	44000115 	stw	r16,4(r8)
    7c4c:	d8c02015 	stw	r3,128(sp)
    7c50:	d9001f15 	stw	r4,124(sp)
    7c54:	014001c4 	movi	r5,7
    7c58:	2901e316 	blt	r5,r4,83e8 <___vfprintf_internal_r+0x1be4>
    7c5c:	42000204 	addi	r8,r8,8
    7c60:	8001df16 	blt	r16,zero,83e0 <___vfprintf_internal_r+0x1bdc>
    7c64:	1421c83a 	sub	r16,r2,r16
    7c68:	043ccc0e 	bge	zero,r16,6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    7c6c:	04800404 	movi	r18,16
    7c70:	d8801f17 	ldw	r2,124(sp)
    7c74:	943efc0e 	bge	r18,r16,7868 <__alt_mem_Flash_flash_data+0xf4007868>
    7c78:	014000b4 	movhi	r5,2
    7c7c:	2956c684 	addi	r5,r5,23322
    7c80:	d9402c15 	stw	r5,176(sp)
    7c84:	054001c4 	movi	r21,7
    7c88:	00000306 	br	7c98 <___vfprintf_internal_r+0x1494>
    7c8c:	42000204 	addi	r8,r8,8
    7c90:	843ffc04 	addi	r16,r16,-16
    7c94:	943ef70e 	bge	r18,r16,7874 <__alt_mem_Flash_flash_data+0xf4007874>
    7c98:	18c00404 	addi	r3,r3,16
    7c9c:	10800044 	addi	r2,r2,1
    7ca0:	45000015 	stw	r20,0(r8)
    7ca4:	44800115 	stw	r18,4(r8)
    7ca8:	d8c02015 	stw	r3,128(sp)
    7cac:	d8801f15 	stw	r2,124(sp)
    7cb0:	a8bff60e 	bge	r21,r2,7c8c <__alt_mem_Flash_flash_data+0xf4007c8c>
    7cb4:	b009883a 	mov	r4,r22
    7cb8:	b80b883a 	mov	r5,r23
    7cbc:	d9801e04 	addi	r6,sp,120
    7cc0:	000ed180 	call	ed18 <__sprint_r>
    7cc4:	103bc31e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7cc8:	d8c02017 	ldw	r3,128(sp)
    7ccc:	d8801f17 	ldw	r2,124(sp)
    7cd0:	da000404 	addi	r8,sp,16
    7cd4:	003fee06 	br	7c90 <__alt_mem_Flash_flash_data+0xf4007c90>
    7cd8:	8888703a 	and	r4,r17,r2
    7cdc:	203eab1e 	bne	r4,zero,778c <__alt_mem_Flash_flash_data+0xf400778c>
    7ce0:	dc001f17 	ldw	r16,124(sp)
    7ce4:	db003117 	ldw	r12,196(sp)
    7ce8:	40800115 	stw	r2,4(r8)
    7cec:	84000044 	addi	r16,r16,1
    7cf0:	43000015 	stw	r12,0(r8)
    7cf4:	d8c02015 	stw	r3,128(sp)
    7cf8:	dc001f15 	stw	r16,124(sp)
    7cfc:	008001c4 	movi	r2,7
    7d00:	14000e16 	blt	r2,r16,7d3c <___vfprintf_internal_r+0x1538>
    7d04:	44800204 	addi	r18,r8,8
    7d08:	003ecb06 	br	7838 <__alt_mem_Flash_flash_data+0xf4007838>
    7d0c:	008000b4 	movhi	r2,2
    7d10:	1096c684 	addi	r2,r2,23322
    7d14:	d8802c15 	stw	r2,176(sp)
    7d18:	dac02c17 	ldw	r11,176(sp)
    7d1c:	1d47883a 	add	r3,r3,r21
    7d20:	84000044 	addi	r16,r16,1
    7d24:	92c00015 	stw	r11,0(r18)
    7d28:	95400115 	stw	r21,4(r18)
    7d2c:	d8c02015 	stw	r3,128(sp)
    7d30:	dc001f15 	stw	r16,124(sp)
    7d34:	008001c4 	movi	r2,7
    7d38:	143ebe0e 	bge	r2,r16,7834 <__alt_mem_Flash_flash_data+0xf4007834>
    7d3c:	b009883a 	mov	r4,r22
    7d40:	b80b883a 	mov	r5,r23
    7d44:	d9801e04 	addi	r6,sp,120
    7d48:	000ed180 	call	ed18 <__sprint_r>
    7d4c:	103ba11e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7d50:	d8c02017 	ldw	r3,128(sp)
    7d54:	dc001f17 	ldw	r16,124(sp)
    7d58:	dc800404 	addi	r18,sp,16
    7d5c:	003eb606 	br	7838 <__alt_mem_Flash_flash_data+0xf4007838>
    7d60:	b009883a 	mov	r4,r22
    7d64:	b80b883a 	mov	r5,r23
    7d68:	d9801e04 	addi	r6,sp,120
    7d6c:	000ed180 	call	ed18 <__sprint_r>
    7d70:	103b981e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7d74:	d8c02017 	ldw	r3,128(sp)
    7d78:	dc001f17 	ldw	r16,124(sp)
    7d7c:	da000404 	addi	r8,sp,16
    7d80:	003e8d06 	br	77b8 <__alt_mem_Flash_flash_data+0xf40077b8>
    7d84:	b009883a 	mov	r4,r22
    7d88:	b80b883a 	mov	r5,r23
    7d8c:	d9801e04 	addi	r6,sp,120
    7d90:	000ed180 	call	ed18 <__sprint_r>
    7d94:	103b8f1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7d98:	d8c02017 	ldw	r3,128(sp)
    7d9c:	dc001f17 	ldw	r16,124(sp)
    7da0:	dc800404 	addi	r18,sp,16
    7da4:	003e8f06 	br	77e4 <__alt_mem_Flash_flash_data+0xf40077e4>
    7da8:	db001e04 	addi	r12,sp,120
    7dac:	0025883a 	mov	r18,zero
    7db0:	db003115 	stw	r12,196(sp)
    7db4:	003be106 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    7db8:	b009883a 	mov	r4,r22
    7dbc:	b80b883a 	mov	r5,r23
    7dc0:	d9801e04 	addi	r6,sp,120
    7dc4:	000ed180 	call	ed18 <__sprint_r>
    7dc8:	103b821e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    7dcc:	d8c02017 	ldw	r3,128(sp)
    7dd0:	da000404 	addi	r8,sp,16
    7dd4:	003c3b06 	br	6ec4 <__alt_mem_Flash_flash_data+0xf4006ec4>
    7dd8:	04e7c83a 	sub	r19,zero,r19
    7ddc:	9804c03a 	cmpne	r2,r19,zero
    7de0:	0739c83a 	sub	fp,zero,fp
    7de4:	e0b9c83a 	sub	fp,fp,r2
    7de8:	05400b44 	movi	r21,45
    7dec:	dd402785 	stb	r21,158(sp)
    7df0:	da403215 	stw	r9,200(sp)
    7df4:	00800044 	movi	r2,1
    7df8:	9f06b03a 	or	r3,r19,fp
    7dfc:	003bb506 	br	6cd4 <__alt_mem_Flash_flash_data+0xf4006cd4>
    7e00:	da003f15 	stw	r8,252(sp)
    7e04:	da403e15 	stw	r9,248(sp)
    7e08:	000d7700 	call	d770 <__fpclassifyd>
    7e0c:	da003f17 	ldw	r8,252(sp)
    7e10:	da403e17 	ldw	r9,248(sp)
    7e14:	1000ce26 	beq	r2,zero,8150 <___vfprintf_internal_r+0x194c>
    7e18:	057ff7c4 	movi	r21,-33
    7e1c:	00bfffc4 	movi	r2,-1
    7e20:	856a703a 	and	r21,r16,r21
    7e24:	4881e826 	beq	r9,r2,85c8 <___vfprintf_internal_r+0x1dc4>
    7e28:	008011c4 	movi	r2,71
    7e2c:	a881e326 	beq	r21,r2,85bc <___vfprintf_internal_r+0x1db8>
    7e30:	db003917 	ldw	r12,228(sp)
    7e34:	8ac04014 	ori	r11,r17,256
    7e38:	dac02d15 	stw	r11,180(sp)
    7e3c:	6001ed16 	blt	r12,zero,85f4 <___vfprintf_internal_r+0x1df0>
    7e40:	dc803917 	ldw	r18,228(sp)
    7e44:	d8002b05 	stb	zero,172(sp)
    7e48:	00801984 	movi	r2,102
    7e4c:	80811826 	beq	r16,r2,82b0 <___vfprintf_internal_r+0x1aac>
    7e50:	00801184 	movi	r2,70
    7e54:	80811626 	beq	r16,r2,82b0 <___vfprintf_internal_r+0x1aac>
    7e58:	00801144 	movi	r2,69
    7e5c:	a881e926 	beq	r21,r2,8604 <___vfprintf_internal_r+0x1e00>
    7e60:	4839883a 	mov	fp,r9
    7e64:	d8802604 	addi	r2,sp,152
    7e68:	d8800115 	stw	r2,4(sp)
    7e6c:	d9403717 	ldw	r5,220(sp)
    7e70:	d8802504 	addi	r2,sp,148
    7e74:	d8800215 	stw	r2,8(sp)
    7e78:	d8802104 	addi	r2,sp,132
    7e7c:	df000015 	stw	fp,0(sp)
    7e80:	d8800315 	stw	r2,12(sp)
    7e84:	b009883a 	mov	r4,r22
    7e88:	900d883a 	mov	r6,r18
    7e8c:	01c00084 	movi	r7,2
    7e90:	da003f15 	stw	r8,252(sp)
    7e94:	da403e15 	stw	r9,248(sp)
    7e98:	0008b880 	call	8b88 <_dtoa_r>
    7e9c:	d8803115 	stw	r2,196(sp)
    7ea0:	008019c4 	movi	r2,103
    7ea4:	da003f17 	ldw	r8,252(sp)
    7ea8:	da403e17 	ldw	r9,248(sp)
    7eac:	80800226 	beq	r16,r2,7eb8 <___vfprintf_internal_r+0x16b4>
    7eb0:	008011c4 	movi	r2,71
    7eb4:	8081101e 	bne	r16,r2,82f8 <___vfprintf_internal_r+0x1af4>
    7eb8:	8880004c 	andi	r2,r17,1
    7ebc:	1001dd26 	beq	r2,zero,8634 <___vfprintf_internal_r+0x1e30>
    7ec0:	db003117 	ldw	r12,196(sp)
    7ec4:	6715883a 	add	r10,r12,fp
    7ec8:	d9003717 	ldw	r4,220(sp)
    7ecc:	900b883a 	mov	r5,r18
    7ed0:	000d883a 	mov	r6,zero
    7ed4:	000f883a 	mov	r7,zero
    7ed8:	da003f15 	stw	r8,252(sp)
    7edc:	da403e15 	stw	r9,248(sp)
    7ee0:	da803d15 	stw	r10,244(sp)
    7ee4:	00127bc0 	call	127bc <__eqdf2>
    7ee8:	da003f17 	ldw	r8,252(sp)
    7eec:	da403e17 	ldw	r9,248(sp)
    7ef0:	da803d17 	ldw	r10,244(sp)
    7ef4:	10016526 	beq	r2,zero,848c <___vfprintf_internal_r+0x1c88>
    7ef8:	d8802117 	ldw	r2,132(sp)
    7efc:	1280062e 	bgeu	r2,r10,7f18 <___vfprintf_internal_r+0x1714>
    7f00:	01000c04 	movi	r4,48
    7f04:	10c00044 	addi	r3,r2,1
    7f08:	d8c02115 	stw	r3,132(sp)
    7f0c:	11000005 	stb	r4,0(r2)
    7f10:	d8802117 	ldw	r2,132(sp)
    7f14:	12bffb36 	bltu	r2,r10,7f04 <__alt_mem_Flash_flash_data+0xf4007f04>
    7f18:	db003117 	ldw	r12,196(sp)
    7f1c:	1305c83a 	sub	r2,r2,r12
    7f20:	d8803315 	stw	r2,204(sp)
    7f24:	008011c4 	movi	r2,71
    7f28:	a8814d26 	beq	r21,r2,8460 <___vfprintf_internal_r+0x1c5c>
    7f2c:	00801944 	movi	r2,101
    7f30:	1402060e 	bge	r2,r16,874c <___vfprintf_internal_r+0x1f48>
    7f34:	00801984 	movi	r2,102
    7f38:	8081b426 	beq	r16,r2,860c <___vfprintf_internal_r+0x1e08>
    7f3c:	db002617 	ldw	r12,152(sp)
    7f40:	db003415 	stw	r12,208(sp)
    7f44:	db003417 	ldw	r12,208(sp)
    7f48:	dac03317 	ldw	r11,204(sp)
    7f4c:	62c1a016 	blt	r12,r11,85d0 <___vfprintf_internal_r+0x1dcc>
    7f50:	8c40004c 	andi	r17,r17,1
    7f54:	8801bf1e 	bne	r17,zero,8654 <___vfprintf_internal_r+0x1e50>
    7f58:	6005883a 	mov	r2,r12
    7f5c:	6001b316 	blt	r12,zero,862c <___vfprintf_internal_r+0x1e28>
    7f60:	dc803417 	ldw	r18,208(sp)
    7f64:	df002b07 	ldb	fp,172(sp)
    7f68:	e0012e1e 	bne	fp,zero,8424 <___vfprintf_internal_r+0x1c20>
    7f6c:	dc402d17 	ldw	r17,180(sp)
    7f70:	dd402783 	ldbu	r21,158(sp)
    7f74:	d8802b15 	stw	r2,172(sp)
    7f78:	dcc02d15 	stw	r19,180(sp)
    7f7c:	d8003215 	stw	zero,200(sp)
    7f80:	003b7306 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    7f84:	00800084 	movi	r2,2
    7f88:	003c4d06 	br	70c0 <__alt_mem_Flash_flash_data+0xf40070c0>
    7f8c:	8880040c 	andi	r2,r17,16
    7f90:	1000091e 	bne	r2,zero,7fb8 <___vfprintf_internal_r+0x17b4>
    7f94:	8c40100c 	andi	r17,r17,64
    7f98:	88000726 	beq	r17,zero,7fb8 <___vfprintf_internal_r+0x17b4>
    7f9c:	db002d17 	ldw	r12,180(sp)
    7fa0:	dac02f17 	ldw	r11,188(sp)
    7fa4:	60800017 	ldw	r2,0(r12)
    7fa8:	63000104 	addi	r12,r12,4
    7fac:	db002d15 	stw	r12,180(sp)
    7fb0:	12c0000d 	sth	r11,0(r2)
    7fb4:	003a4e06 	br	68f0 <__alt_mem_Flash_flash_data+0xf40068f0>
    7fb8:	db002d17 	ldw	r12,180(sp)
    7fbc:	dac02f17 	ldw	r11,188(sp)
    7fc0:	60800017 	ldw	r2,0(r12)
    7fc4:	63000104 	addi	r12,r12,4
    7fc8:	db002d15 	stw	r12,180(sp)
    7fcc:	12c00015 	stw	r11,0(r2)
    7fd0:	003a4706 	br	68f0 <__alt_mem_Flash_flash_data+0xf40068f0>
    7fd4:	1c000007 	ldb	r16,0(r3)
    7fd8:	1805883a 	mov	r2,r3
    7fdc:	003a6e06 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    7fe0:	88c0100c 	andi	r3,r17,64
    7fe4:	18006b26 	beq	r3,zero,8194 <___vfprintf_internal_r+0x1990>
    7fe8:	dac02d17 	ldw	r11,180(sp)
    7fec:	14c0000b 	ldhu	r19,0(r2)
    7ff0:	0039883a 	mov	fp,zero
    7ff4:	5ac00104 	addi	r11,r11,4
    7ff8:	dac02d15 	stw	r11,180(sp)
    7ffc:	003cb206 	br	72c8 <__alt_mem_Flash_flash_data+0xf40072c8>
    8000:	010000b4 	movhi	r4,2
    8004:	2116c684 	addi	r4,r4,23322
    8008:	d9002c15 	stw	r4,176(sp)
    800c:	dac02c17 	ldw	r11,176(sp)
    8010:	1c87883a 	add	r3,r3,r18
    8014:	10800044 	addi	r2,r2,1
    8018:	42c00015 	stw	r11,0(r8)
    801c:	44800115 	stw	r18,4(r8)
    8020:	d8c02015 	stw	r3,128(sp)
    8024:	d8801f15 	stw	r2,124(sp)
    8028:	010001c4 	movi	r4,7
    802c:	20bee016 	blt	r4,r2,7bb0 <__alt_mem_Flash_flash_data+0xf4007bb0>
    8030:	42000204 	addi	r8,r8,8
    8034:	003ee506 	br	7bcc <__alt_mem_Flash_flash_data+0xf4007bcc>
    8038:	010000b4 	movhi	r4,2
    803c:	2116c684 	addi	r4,r4,23322
    8040:	d9002c15 	stw	r4,176(sp)
    8044:	003bbe06 	br	6f40 <__alt_mem_Flash_flash_data+0xf4006f40>
    8048:	b009883a 	mov	r4,r22
    804c:	b80b883a 	mov	r5,r23
    8050:	d9801e04 	addi	r6,sp,120
    8054:	000ed180 	call	ed18 <__sprint_r>
    8058:	103ade1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    805c:	d8c02017 	ldw	r3,128(sp)
    8060:	da000404 	addi	r8,sp,16
    8064:	003d6b06 	br	7614 <__alt_mem_Flash_flash_data+0xf4007614>
    8068:	d8801f17 	ldw	r2,124(sp)
    806c:	030000b4 	movhi	r12,2
    8070:	01000044 	movi	r4,1
    8074:	18c00044 	addi	r3,r3,1
    8078:	10800044 	addi	r2,r2,1
    807c:	6316be04 	addi	r12,r12,23288
    8080:	41000115 	stw	r4,4(r8)
    8084:	43000015 	stw	r12,0(r8)
    8088:	d8c02015 	stw	r3,128(sp)
    808c:	d8801f15 	stw	r2,124(sp)
    8090:	010001c4 	movi	r4,7
    8094:	20804916 	blt	r4,r2,81bc <___vfprintf_internal_r+0x19b8>
    8098:	42000204 	addi	r8,r8,8
    809c:	8000041e 	bne	r16,zero,80b0 <___vfprintf_internal_r+0x18ac>
    80a0:	dac03317 	ldw	r11,204(sp)
    80a4:	5800021e 	bne	r11,zero,80b0 <___vfprintf_internal_r+0x18ac>
    80a8:	8880004c 	andi	r2,r17,1
    80ac:	103bbb26 	beq	r2,zero,6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    80b0:	db003817 	ldw	r12,224(sp)
    80b4:	d8801f17 	ldw	r2,124(sp)
    80b8:	dac03517 	ldw	r11,212(sp)
    80bc:	1b07883a 	add	r3,r3,r12
    80c0:	10800044 	addi	r2,r2,1
    80c4:	42c00015 	stw	r11,0(r8)
    80c8:	43000115 	stw	r12,4(r8)
    80cc:	d8c02015 	stw	r3,128(sp)
    80d0:	d8801f15 	stw	r2,124(sp)
    80d4:	010001c4 	movi	r4,7
    80d8:	20812e16 	blt	r4,r2,8594 <___vfprintf_internal_r+0x1d90>
    80dc:	42000204 	addi	r8,r8,8
    80e0:	0421c83a 	sub	r16,zero,r16
    80e4:	04005c0e 	bge	zero,r16,8258 <___vfprintf_internal_r+0x1a54>
    80e8:	04800404 	movi	r18,16
    80ec:	94009f0e 	bge	r18,r16,836c <___vfprintf_internal_r+0x1b68>
    80f0:	010000b4 	movhi	r4,2
    80f4:	2116c684 	addi	r4,r4,23322
    80f8:	d9002c15 	stw	r4,176(sp)
    80fc:	054001c4 	movi	r21,7
    8100:	00000306 	br	8110 <___vfprintf_internal_r+0x190c>
    8104:	42000204 	addi	r8,r8,8
    8108:	843ffc04 	addi	r16,r16,-16
    810c:	94009a0e 	bge	r18,r16,8378 <___vfprintf_internal_r+0x1b74>
    8110:	18c00404 	addi	r3,r3,16
    8114:	10800044 	addi	r2,r2,1
    8118:	45000015 	stw	r20,0(r8)
    811c:	44800115 	stw	r18,4(r8)
    8120:	d8c02015 	stw	r3,128(sp)
    8124:	d8801f15 	stw	r2,124(sp)
    8128:	a8bff60e 	bge	r21,r2,8104 <__alt_mem_Flash_flash_data+0xf4008104>
    812c:	b009883a 	mov	r4,r22
    8130:	b80b883a 	mov	r5,r23
    8134:	d9801e04 	addi	r6,sp,120
    8138:	000ed180 	call	ed18 <__sprint_r>
    813c:	103aa51e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    8140:	d8c02017 	ldw	r3,128(sp)
    8144:	d8801f17 	ldw	r2,124(sp)
    8148:	da000404 	addi	r8,sp,16
    814c:	003fee06 	br	8108 <__alt_mem_Flash_flash_data+0xf4008108>
    8150:	008011c4 	movi	r2,71
    8154:	1400be16 	blt	r2,r16,8450 <___vfprintf_internal_r+0x1c4c>
    8158:	030000b4 	movhi	r12,2
    815c:	6316b004 	addi	r12,r12,23232
    8160:	db003115 	stw	r12,196(sp)
    8164:	00c000c4 	movi	r3,3
    8168:	00bfdfc4 	movi	r2,-129
    816c:	d8c02b15 	stw	r3,172(sp)
    8170:	88a2703a 	and	r17,r17,r2
    8174:	dd402783 	ldbu	r21,158(sp)
    8178:	dcc02d15 	stw	r19,180(sp)
    817c:	1825883a 	mov	r18,r3
    8180:	d8003215 	stw	zero,200(sp)
    8184:	d8003415 	stw	zero,208(sp)
    8188:	003af106 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    818c:	4825883a 	mov	r18,r9
    8190:	003c9306 	br	73e0 <__alt_mem_Flash_flash_data+0xf40073e0>
    8194:	db002d17 	ldw	r12,180(sp)
    8198:	14c00017 	ldw	r19,0(r2)
    819c:	0039883a 	mov	fp,zero
    81a0:	63000104 	addi	r12,r12,4
    81a4:	db002d15 	stw	r12,180(sp)
    81a8:	003c4706 	br	72c8 <__alt_mem_Flash_flash_data+0xf40072c8>
    81ac:	008000b4 	movhi	r2,2
    81b0:	1096ae04 	addi	r2,r2,23224
    81b4:	d8803115 	stw	r2,196(sp)
    81b8:	003bf106 	br	7180 <__alt_mem_Flash_flash_data+0xf4007180>
    81bc:	b009883a 	mov	r4,r22
    81c0:	b80b883a 	mov	r5,r23
    81c4:	d9801e04 	addi	r6,sp,120
    81c8:	000ed180 	call	ed18 <__sprint_r>
    81cc:	103a811e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    81d0:	dc002617 	ldw	r16,152(sp)
    81d4:	d8c02017 	ldw	r3,128(sp)
    81d8:	da000404 	addi	r8,sp,16
    81dc:	003faf06 	br	809c <__alt_mem_Flash_flash_data+0xf400809c>
    81e0:	db002e17 	ldw	r12,184(sp)
    81e4:	1805883a 	mov	r2,r3
    81e8:	dac02d15 	stw	r11,180(sp)
    81ec:	0319c83a 	sub	r12,zero,r12
    81f0:	db002e15 	stw	r12,184(sp)
    81f4:	003a8206 	br	6c00 <__alt_mem_Flash_flash_data+0xf4006c00>
    81f8:	18800044 	addi	r2,r3,1
    81fc:	8c400814 	ori	r17,r17,32
    8200:	1c000047 	ldb	r16,1(r3)
    8204:	0039e406 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    8208:	b009883a 	mov	r4,r22
    820c:	b80b883a 	mov	r5,r23
    8210:	d9801e04 	addi	r6,sp,120
    8214:	000ed180 	call	ed18 <__sprint_r>
    8218:	103a6e1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    821c:	d8c02017 	ldw	r3,128(sp)
    8220:	da000404 	addi	r8,sp,16
    8224:	003d0c06 	br	7658 <__alt_mem_Flash_flash_data+0xf4007658>
    8228:	db002817 	ldw	r12,160(sp)
    822c:	d8c03117 	ldw	r3,196(sp)
    8230:	60e5c83a 	sub	r18,r12,r3
    8234:	003ac106 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    8238:	b009883a 	mov	r4,r22
    823c:	b80b883a 	mov	r5,r23
    8240:	d9801e04 	addi	r6,sp,120
    8244:	000ed180 	call	ed18 <__sprint_r>
    8248:	103a621e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    824c:	d8c02017 	ldw	r3,128(sp)
    8250:	d8801f17 	ldw	r2,124(sp)
    8254:	da000404 	addi	r8,sp,16
    8258:	db003317 	ldw	r12,204(sp)
    825c:	dac03117 	ldw	r11,196(sp)
    8260:	10800044 	addi	r2,r2,1
    8264:	1b07883a 	add	r3,r3,r12
    8268:	42c00015 	stw	r11,0(r8)
    826c:	43000115 	stw	r12,4(r8)
    8270:	d8c02015 	stw	r3,128(sp)
    8274:	d8801f15 	stw	r2,124(sp)
    8278:	010001c4 	movi	r4,7
    827c:	20bb460e 	bge	r4,r2,6f98 <__alt_mem_Flash_flash_data+0xf4006f98>
    8280:	003d8506 	br	7898 <__alt_mem_Flash_flash_data+0xf4007898>
    8284:	da003f15 	stw	r8,252(sp)
    8288:	00047dc0 	call	47dc <strlen>
    828c:	1025883a 	mov	r18,r2
    8290:	da003f17 	ldw	r8,252(sp)
    8294:	903c540e 	bge	r18,zero,73e8 <__alt_mem_Flash_flash_data+0xf40073e8>
    8298:	0005883a 	mov	r2,zero
    829c:	003c5206 	br	73e8 <__alt_mem_Flash_flash_data+0xf40073e8>
    82a0:	010000b4 	movhi	r4,2
    82a4:	2116ca84 	addi	r4,r4,23338
    82a8:	d9003615 	stw	r4,216(sp)
    82ac:	003adc06 	br	6e20 <__alt_mem_Flash_flash_data+0xf4006e20>
    82b0:	d8802604 	addi	r2,sp,152
    82b4:	d8800115 	stw	r2,4(sp)
    82b8:	d9403717 	ldw	r5,220(sp)
    82bc:	d8802504 	addi	r2,sp,148
    82c0:	d8800215 	stw	r2,8(sp)
    82c4:	d8802104 	addi	r2,sp,132
    82c8:	da400015 	stw	r9,0(sp)
    82cc:	d8800315 	stw	r2,12(sp)
    82d0:	b009883a 	mov	r4,r22
    82d4:	900d883a 	mov	r6,r18
    82d8:	01c000c4 	movi	r7,3
    82dc:	da003f15 	stw	r8,252(sp)
    82e0:	da403e15 	stw	r9,248(sp)
    82e4:	0008b880 	call	8b88 <_dtoa_r>
    82e8:	da403e17 	ldw	r9,248(sp)
    82ec:	da003f17 	ldw	r8,252(sp)
    82f0:	d8803115 	stw	r2,196(sp)
    82f4:	4839883a 	mov	fp,r9
    82f8:	dac03117 	ldw	r11,196(sp)
    82fc:	00801184 	movi	r2,70
    8300:	5f15883a 	add	r10,r11,fp
    8304:	a8bef01e 	bne	r21,r2,7ec8 <__alt_mem_Flash_flash_data+0xf4007ec8>
    8308:	59000007 	ldb	r4,0(r11)
    830c:	00800c04 	movi	r2,48
    8310:	2080d526 	beq	r4,r2,8668 <___vfprintf_internal_r+0x1e64>
    8314:	d8c02617 	ldw	r3,152(sp)
    8318:	50d5883a 	add	r10,r10,r3
    831c:	003eea06 	br	7ec8 <__alt_mem_Flash_flash_data+0xf4007ec8>
    8320:	0025883a 	mov	r18,zero
    8324:	003db306 	br	79f4 <__alt_mem_Flash_flash_data+0xf40079f4>
    8328:	b009883a 	mov	r4,r22
    832c:	b80b883a 	mov	r5,r23
    8330:	d9801e04 	addi	r6,sp,120
    8334:	000ed180 	call	ed18 <__sprint_r>
    8338:	103a261e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    833c:	d8c02017 	ldw	r3,128(sp)
    8340:	da000404 	addi	r8,sp,16
    8344:	003daa06 	br	79f0 <__alt_mem_Flash_flash_data+0xf40079f0>
    8348:	b009883a 	mov	r4,r22
    834c:	b80b883a 	mov	r5,r23
    8350:	d9801e04 	addi	r6,sp,120
    8354:	000ed180 	call	ed18 <__sprint_r>
    8358:	103a1e1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    835c:	d8802617 	ldw	r2,152(sp)
    8360:	d8c02017 	ldw	r3,128(sp)
    8364:	da000404 	addi	r8,sp,16
    8368:	003e2c06 	br	7c1c <__alt_mem_Flash_flash_data+0xf4007c1c>
    836c:	030000b4 	movhi	r12,2
    8370:	6316c684 	addi	r12,r12,23322
    8374:	db002c15 	stw	r12,176(sp)
    8378:	dac02c17 	ldw	r11,176(sp)
    837c:	1c07883a 	add	r3,r3,r16
    8380:	10800044 	addi	r2,r2,1
    8384:	42c00015 	stw	r11,0(r8)
    8388:	44000115 	stw	r16,4(r8)
    838c:	d8c02015 	stw	r3,128(sp)
    8390:	d8801f15 	stw	r2,124(sp)
    8394:	010001c4 	movi	r4,7
    8398:	20bfa716 	blt	r4,r2,8238 <__alt_mem_Flash_flash_data+0xf4008238>
    839c:	42000204 	addi	r8,r8,8
    83a0:	003fad06 	br	8258 <__alt_mem_Flash_flash_data+0xf4008258>
    83a4:	00800184 	movi	r2,6
    83a8:	1240012e 	bgeu	r2,r9,83b0 <___vfprintf_internal_r+0x1bac>
    83ac:	1013883a 	mov	r9,r2
    83b0:	4825883a 	mov	r18,r9
    83b4:	4805883a 	mov	r2,r9
    83b8:	4800c216 	blt	r9,zero,86c4 <___vfprintf_internal_r+0x1ec0>
    83bc:	d8802b15 	stw	r2,172(sp)
    83c0:	008000b4 	movhi	r2,2
    83c4:	1096bc04 	addi	r2,r2,23280
    83c8:	d8803115 	stw	r2,196(sp)
    83cc:	dcc02d15 	stw	r19,180(sp)
    83d0:	d8003215 	stw	zero,200(sp)
    83d4:	d8003415 	stw	zero,208(sp)
    83d8:	0005883a 	mov	r2,zero
    83dc:	003a6306 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    83e0:	0021883a 	mov	r16,zero
    83e4:	003e1f06 	br	7c64 <__alt_mem_Flash_flash_data+0xf4007c64>
    83e8:	b009883a 	mov	r4,r22
    83ec:	b80b883a 	mov	r5,r23
    83f0:	d9801e04 	addi	r6,sp,120
    83f4:	000ed180 	call	ed18 <__sprint_r>
    83f8:	1039f61e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    83fc:	d8802617 	ldw	r2,152(sp)
    8400:	db003317 	ldw	r12,204(sp)
    8404:	d8c02017 	ldw	r3,128(sp)
    8408:	da000404 	addi	r8,sp,16
    840c:	6085c83a 	sub	r2,r12,r2
    8410:	003e1306 	br	7c60 <__alt_mem_Flash_flash_data+0xf4007c60>
    8414:	030000b4 	movhi	r12,2
    8418:	6316ca84 	addi	r12,r12,23338
    841c:	db003615 	stw	r12,216(sp)
    8420:	003b0206 	br	702c <__alt_mem_Flash_flash_data+0xf400702c>
    8424:	00c00b44 	movi	r3,45
    8428:	d8802b15 	stw	r2,172(sp)
    842c:	dc402d17 	ldw	r17,180(sp)
    8430:	d8c02785 	stb	r3,158(sp)
    8434:	dcc02d15 	stw	r19,180(sp)
    8438:	d8003215 	stw	zero,200(sp)
    843c:	00800b44 	movi	r2,45
    8440:	003a4706 	br	6d60 <__alt_mem_Flash_flash_data+0xf4006d60>
    8444:	05400b44 	movi	r21,45
    8448:	dd402785 	stb	r21,158(sp)
    844c:	003b4706 	br	716c <__alt_mem_Flash_flash_data+0xf400716c>
    8450:	008000b4 	movhi	r2,2
    8454:	1096b104 	addi	r2,r2,23236
    8458:	d8803115 	stw	r2,196(sp)
    845c:	003f4106 	br	8164 <__alt_mem_Flash_flash_data+0xf4008164>
    8460:	d8c02617 	ldw	r3,152(sp)
    8464:	00bfff44 	movi	r2,-3
    8468:	18801116 	blt	r3,r2,84b0 <___vfprintf_internal_r+0x1cac>
    846c:	48c01016 	blt	r9,r3,84b0 <___vfprintf_internal_r+0x1cac>
    8470:	d8c03415 	stw	r3,208(sp)
    8474:	040019c4 	movi	r16,103
    8478:	003eb206 	br	7f44 <__alt_mem_Flash_flash_data+0xf4007f44>
    847c:	010000b4 	movhi	r4,2
    8480:	2116c684 	addi	r4,r4,23322
    8484:	d9002c15 	stw	r4,176(sp)
    8488:	003cb106 	br	7750 <__alt_mem_Flash_flash_data+0xf4007750>
    848c:	5005883a 	mov	r2,r10
    8490:	003ea106 	br	7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    8494:	da402b15 	stw	r9,172(sp)
    8498:	dd402783 	ldbu	r21,158(sp)
    849c:	4825883a 	mov	r18,r9
    84a0:	dcc02d15 	stw	r19,180(sp)
    84a4:	d8003215 	stw	zero,200(sp)
    84a8:	d8003415 	stw	zero,208(sp)
    84ac:	003a2806 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    84b0:	843fff84 	addi	r16,r16,-2
    84b4:	1f3fffc4 	addi	fp,r3,-1
    84b8:	df002615 	stw	fp,152(sp)
    84bc:	dc0022c5 	stb	r16,139(sp)
    84c0:	e0009816 	blt	fp,zero,8724 <___vfprintf_internal_r+0x1f20>
    84c4:	00800ac4 	movi	r2,43
    84c8:	d8802305 	stb	r2,140(sp)
    84cc:	00800244 	movi	r2,9
    84d0:	1700750e 	bge	r2,fp,86a8 <___vfprintf_internal_r+0x1ea4>
    84d4:	dd4022c4 	addi	r21,sp,139
    84d8:	dc002c15 	stw	r16,176(sp)
    84dc:	4025883a 	mov	r18,r8
    84e0:	a821883a 	mov	r16,r21
    84e4:	e009883a 	mov	r4,fp
    84e8:	01400284 	movi	r5,10
    84ec:	00115e80 	call	115e8 <__modsi3>
    84f0:	10800c04 	addi	r2,r2,48
    84f4:	843fffc4 	addi	r16,r16,-1
    84f8:	e009883a 	mov	r4,fp
    84fc:	01400284 	movi	r5,10
    8500:	80800005 	stb	r2,0(r16)
    8504:	00115940 	call	11594 <__divsi3>
    8508:	1039883a 	mov	fp,r2
    850c:	00800244 	movi	r2,9
    8510:	173ff416 	blt	r2,fp,84e4 <__alt_mem_Flash_flash_data+0xf40084e4>
    8514:	9011883a 	mov	r8,r18
    8518:	e0800c04 	addi	r2,fp,48
    851c:	8025883a 	mov	r18,r16
    8520:	913fffc4 	addi	r4,r18,-1
    8524:	90bfffc5 	stb	r2,-1(r18)
    8528:	dc002c17 	ldw	r16,176(sp)
    852c:	2540852e 	bgeu	r4,r21,8744 <___vfprintf_internal_r+0x1f40>
    8530:	d9402384 	addi	r5,sp,142
    8534:	2c8bc83a 	sub	r5,r5,r18
    8538:	d8c02344 	addi	r3,sp,141
    853c:	a94b883a 	add	r5,r21,r5
    8540:	00000106 	br	8548 <___vfprintf_internal_r+0x1d44>
    8544:	20800003 	ldbu	r2,0(r4)
    8548:	18800005 	stb	r2,0(r3)
    854c:	18c00044 	addi	r3,r3,1
    8550:	21000044 	addi	r4,r4,1
    8554:	197ffb1e 	bne	r3,r5,8544 <__alt_mem_Flash_flash_data+0xf4008544>
    8558:	d8802304 	addi	r2,sp,140
    855c:	1485c83a 	sub	r2,r2,r18
    8560:	d8c02344 	addi	r3,sp,141
    8564:	1885883a 	add	r2,r3,r2
    8568:	dac03317 	ldw	r11,204(sp)
    856c:	156bc83a 	sub	r21,r2,r21
    8570:	dd403a15 	stw	r21,232(sp)
    8574:	00800044 	movi	r2,1
    8578:	5d65883a 	add	r18,r11,r21
    857c:	12c0660e 	bge	r2,r11,8718 <___vfprintf_internal_r+0x1f14>
    8580:	94800044 	addi	r18,r18,1
    8584:	9005883a 	mov	r2,r18
    8588:	90006116 	blt	r18,zero,8710 <___vfprintf_internal_r+0x1f0c>
    858c:	d8003415 	stw	zero,208(sp)
    8590:	003e7406 	br	7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8594:	b009883a 	mov	r4,r22
    8598:	b80b883a 	mov	r5,r23
    859c:	d9801e04 	addi	r6,sp,120
    85a0:	000ed180 	call	ed18 <__sprint_r>
    85a4:	10398b1e 	bne	r2,zero,6bd4 <__alt_mem_Flash_flash_data+0xf4006bd4>
    85a8:	dc002617 	ldw	r16,152(sp)
    85ac:	d8c02017 	ldw	r3,128(sp)
    85b0:	d8801f17 	ldw	r2,124(sp)
    85b4:	da000404 	addi	r8,sp,16
    85b8:	003ec906 	br	80e0 <__alt_mem_Flash_flash_data+0xf40080e0>
    85bc:	483e1c1e 	bne	r9,zero,7e30 <__alt_mem_Flash_flash_data+0xf4007e30>
    85c0:	9013883a 	mov	r9,r18
    85c4:	003e1a06 	br	7e30 <__alt_mem_Flash_flash_data+0xf4007e30>
    85c8:	02400184 	movi	r9,6
    85cc:	003e1806 	br	7e30 <__alt_mem_Flash_flash_data+0xf4007e30>
    85d0:	d8c03417 	ldw	r3,208(sp)
    85d4:	00c04b0e 	bge	zero,r3,8704 <___vfprintf_internal_r+0x1f00>
    85d8:	04800044 	movi	r18,1
    85dc:	dac03317 	ldw	r11,204(sp)
    85e0:	92e5883a 	add	r18,r18,r11
    85e4:	9005883a 	mov	r2,r18
    85e8:	903e5e0e 	bge	r18,zero,7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    85ec:	0005883a 	mov	r2,zero
    85f0:	003e5c06 	br	7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    85f4:	00c00b44 	movi	r3,45
    85f8:	64a0003c 	xorhi	r18,r12,32768
    85fc:	d8c02b05 	stb	r3,172(sp)
    8600:	003e1106 	br	7e48 <__alt_mem_Flash_flash_data+0xf4007e48>
    8604:	4f000044 	addi	fp,r9,1
    8608:	003e1606 	br	7e64 <__alt_mem_Flash_flash_data+0xf4007e64>
    860c:	d8c02617 	ldw	r3,152(sp)
    8610:	d8c03415 	stw	r3,208(sp)
    8614:	00c0350e 	bge	zero,r3,86ec <___vfprintf_internal_r+0x1ee8>
    8618:	4800081e 	bne	r9,zero,863c <___vfprintf_internal_r+0x1e38>
    861c:	8c40004c 	andi	r17,r17,1
    8620:	8800061e 	bne	r17,zero,863c <___vfprintf_internal_r+0x1e38>
    8624:	1805883a 	mov	r2,r3
    8628:	183e4d0e 	bge	r3,zero,7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    862c:	0005883a 	mov	r2,zero
    8630:	003e4b06 	br	7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    8634:	d8802117 	ldw	r2,132(sp)
    8638:	003e3706 	br	7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    863c:	dac03417 	ldw	r11,208(sp)
    8640:	4a400044 	addi	r9,r9,1
    8644:	5a65883a 	add	r18,r11,r9
    8648:	9005883a 	mov	r2,r18
    864c:	903e450e 	bge	r18,zero,7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8650:	003fe606 	br	85ec <__alt_mem_Flash_flash_data+0xf40085ec>
    8654:	db003417 	ldw	r12,208(sp)
    8658:	64800044 	addi	r18,r12,1
    865c:	9005883a 	mov	r2,r18
    8660:	903e400e 	bge	r18,zero,7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8664:	003fe106 	br	85ec <__alt_mem_Flash_flash_data+0xf40085ec>
    8668:	d9003717 	ldw	r4,220(sp)
    866c:	900b883a 	mov	r5,r18
    8670:	000d883a 	mov	r6,zero
    8674:	000f883a 	mov	r7,zero
    8678:	da003f15 	stw	r8,252(sp)
    867c:	da403e15 	stw	r9,248(sp)
    8680:	da803d15 	stw	r10,244(sp)
    8684:	00127bc0 	call	127bc <__eqdf2>
    8688:	da003f17 	ldw	r8,252(sp)
    868c:	da403e17 	ldw	r9,248(sp)
    8690:	da803d17 	ldw	r10,244(sp)
    8694:	103f1f26 	beq	r2,zero,8314 <__alt_mem_Flash_flash_data+0xf4008314>
    8698:	00800044 	movi	r2,1
    869c:	1707c83a 	sub	r3,r2,fp
    86a0:	d8c02615 	stw	r3,152(sp)
    86a4:	003f1c06 	br	8318 <__alt_mem_Flash_flash_data+0xf4008318>
    86a8:	00800c04 	movi	r2,48
    86ac:	e0c00c04 	addi	r3,fp,48
    86b0:	d8802345 	stb	r2,141(sp)
    86b4:	d8c02385 	stb	r3,142(sp)
    86b8:	d88023c4 	addi	r2,sp,143
    86bc:	dd4022c4 	addi	r21,sp,139
    86c0:	003fa906 	br	8568 <__alt_mem_Flash_flash_data+0xf4008568>
    86c4:	0005883a 	mov	r2,zero
    86c8:	003f3c06 	br	83bc <__alt_mem_Flash_flash_data+0xf40083bc>
    86cc:	dac02d17 	ldw	r11,180(sp)
    86d0:	5a400017 	ldw	r9,0(r11)
    86d4:	5ac00104 	addi	r11,r11,4
    86d8:	dac02d15 	stw	r11,180(sp)
    86dc:	483ec80e 	bge	r9,zero,8200 <__alt_mem_Flash_flash_data+0xf4008200>
    86e0:	027fffc4 	movi	r9,-1
    86e4:	1c000047 	ldb	r16,1(r3)
    86e8:	0038ab06 	br	6998 <__alt_mem_Flash_flash_data+0xf4006998>
    86ec:	4800111e 	bne	r9,zero,8734 <___vfprintf_internal_r+0x1f30>
    86f0:	8c40004c 	andi	r17,r17,1
    86f4:	88000f1e 	bne	r17,zero,8734 <___vfprintf_internal_r+0x1f30>
    86f8:	00800044 	movi	r2,1
    86fc:	1025883a 	mov	r18,r2
    8700:	003e1806 	br	7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8704:	04800084 	movi	r18,2
    8708:	90e5c83a 	sub	r18,r18,r3
    870c:	003fb306 	br	85dc <__alt_mem_Flash_flash_data+0xf40085dc>
    8710:	0005883a 	mov	r2,zero
    8714:	003f9d06 	br	858c <__alt_mem_Flash_flash_data+0xf400858c>
    8718:	88a2703a 	and	r17,r17,r2
    871c:	883f9926 	beq	r17,zero,8584 <__alt_mem_Flash_flash_data+0xf4008584>
    8720:	003f9706 	br	8580 <__alt_mem_Flash_flash_data+0xf4008580>
    8724:	00800b44 	movi	r2,45
    8728:	0739c83a 	sub	fp,zero,fp
    872c:	d8802305 	stb	r2,140(sp)
    8730:	003f6606 	br	84cc <__alt_mem_Flash_flash_data+0xf40084cc>
    8734:	4c800084 	addi	r18,r9,2
    8738:	9005883a 	mov	r2,r18
    873c:	903e090e 	bge	r18,zero,7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8740:	003faa06 	br	85ec <__alt_mem_Flash_flash_data+0xf40085ec>
    8744:	d8802344 	addi	r2,sp,141
    8748:	003f8706 	br	8568 <__alt_mem_Flash_flash_data+0xf4008568>
    874c:	d8c02617 	ldw	r3,152(sp)
    8750:	003f5806 	br	84b4 <__alt_mem_Flash_flash_data+0xf40084b4>

00008754 <__vfprintf_internal>:
    8754:	2007883a 	mov	r3,r4
    8758:	010000b4 	movhi	r4,2
    875c:	211fc904 	addi	r4,r4,32548
    8760:	21000017 	ldw	r4,0(r4)
    8764:	2805883a 	mov	r2,r5
    8768:	300f883a 	mov	r7,r6
    876c:	180b883a 	mov	r5,r3
    8770:	100d883a 	mov	r6,r2
    8774:	00068041 	jmpi	6804 <___vfprintf_internal_r>

00008778 <__sbprintf>:
    8778:	2880030b 	ldhu	r2,12(r5)
    877c:	2ac01917 	ldw	r11,100(r5)
    8780:	2a80038b 	ldhu	r10,14(r5)
    8784:	2a400717 	ldw	r9,28(r5)
    8788:	2a000917 	ldw	r8,36(r5)
    878c:	defee204 	addi	sp,sp,-1144
    8790:	00c10004 	movi	r3,1024
    8794:	dc011a15 	stw	r16,1128(sp)
    8798:	10bfff4c 	andi	r2,r2,65533
    879c:	2821883a 	mov	r16,r5
    87a0:	d8cb883a 	add	r5,sp,r3
    87a4:	dc811c15 	stw	r18,1136(sp)
    87a8:	dc411b15 	stw	r17,1132(sp)
    87ac:	dfc11d15 	stw	ra,1140(sp)
    87b0:	2025883a 	mov	r18,r4
    87b4:	d881030d 	sth	r2,1036(sp)
    87b8:	dac11915 	stw	r11,1124(sp)
    87bc:	da81038d 	sth	r10,1038(sp)
    87c0:	da410715 	stw	r9,1052(sp)
    87c4:	da010915 	stw	r8,1060(sp)
    87c8:	dec10015 	stw	sp,1024(sp)
    87cc:	dec10415 	stw	sp,1040(sp)
    87d0:	d8c10215 	stw	r3,1032(sp)
    87d4:	d8c10515 	stw	r3,1044(sp)
    87d8:	d8010615 	stw	zero,1048(sp)
    87dc:	00068040 	call	6804 <___vfprintf_internal_r>
    87e0:	1023883a 	mov	r17,r2
    87e4:	10000416 	blt	r2,zero,87f8 <__sbprintf+0x80>
    87e8:	9009883a 	mov	r4,r18
    87ec:	d9410004 	addi	r5,sp,1024
    87f0:	000a4b80 	call	a4b8 <_fflush_r>
    87f4:	10000d1e 	bne	r2,zero,882c <__sbprintf+0xb4>
    87f8:	d8c1030b 	ldhu	r3,1036(sp)
    87fc:	18c0100c 	andi	r3,r3,64
    8800:	18000326 	beq	r3,zero,8810 <__sbprintf+0x98>
    8804:	8080030b 	ldhu	r2,12(r16)
    8808:	10801014 	ori	r2,r2,64
    880c:	8080030d 	sth	r2,12(r16)
    8810:	8805883a 	mov	r2,r17
    8814:	dfc11d17 	ldw	ra,1140(sp)
    8818:	dc811c17 	ldw	r18,1136(sp)
    881c:	dc411b17 	ldw	r17,1132(sp)
    8820:	dc011a17 	ldw	r16,1128(sp)
    8824:	dec11e04 	addi	sp,sp,1144
    8828:	f800283a 	ret
    882c:	047fffc4 	movi	r17,-1
    8830:	003ff106 	br	87f8 <__alt_mem_Flash_flash_data+0xf40087f8>

00008834 <__swsetup_r>:
    8834:	008000b4 	movhi	r2,2
    8838:	defffd04 	addi	sp,sp,-12
    883c:	109fc904 	addi	r2,r2,32548
    8840:	dc400115 	stw	r17,4(sp)
    8844:	2023883a 	mov	r17,r4
    8848:	11000017 	ldw	r4,0(r2)
    884c:	dc000015 	stw	r16,0(sp)
    8850:	dfc00215 	stw	ra,8(sp)
    8854:	2821883a 	mov	r16,r5
    8858:	20000226 	beq	r4,zero,8864 <__swsetup_r+0x30>
    885c:	20c00e17 	ldw	r3,56(r4)
    8860:	18003126 	beq	r3,zero,8928 <__swsetup_r+0xf4>
    8864:	8080030b 	ldhu	r2,12(r16)
    8868:	10c0020c 	andi	r3,r2,8
    886c:	100d883a 	mov	r6,r2
    8870:	18000f26 	beq	r3,zero,88b0 <__swsetup_r+0x7c>
    8874:	80c00417 	ldw	r3,16(r16)
    8878:	18001526 	beq	r3,zero,88d0 <__swsetup_r+0x9c>
    887c:	1100004c 	andi	r4,r2,1
    8880:	20001c1e 	bne	r4,zero,88f4 <__swsetup_r+0xc0>
    8884:	1080008c 	andi	r2,r2,2
    8888:	1000291e 	bne	r2,zero,8930 <__swsetup_r+0xfc>
    888c:	80800517 	ldw	r2,20(r16)
    8890:	80800215 	stw	r2,8(r16)
    8894:	18001c26 	beq	r3,zero,8908 <__swsetup_r+0xd4>
    8898:	0005883a 	mov	r2,zero
    889c:	dfc00217 	ldw	ra,8(sp)
    88a0:	dc400117 	ldw	r17,4(sp)
    88a4:	dc000017 	ldw	r16,0(sp)
    88a8:	dec00304 	addi	sp,sp,12
    88ac:	f800283a 	ret
    88b0:	3080040c 	andi	r2,r6,16
    88b4:	10002e26 	beq	r2,zero,8970 <__swsetup_r+0x13c>
    88b8:	3080010c 	andi	r2,r6,4
    88bc:	10001e1e 	bne	r2,zero,8938 <__swsetup_r+0x104>
    88c0:	80c00417 	ldw	r3,16(r16)
    88c4:	30800214 	ori	r2,r6,8
    88c8:	8080030d 	sth	r2,12(r16)
    88cc:	183feb1e 	bne	r3,zero,887c <__alt_mem_Flash_flash_data+0xf400887c>
    88d0:	1140a00c 	andi	r5,r2,640
    88d4:	01008004 	movi	r4,512
    88d8:	293fe826 	beq	r5,r4,887c <__alt_mem_Flash_flash_data+0xf400887c>
    88dc:	8809883a 	mov	r4,r17
    88e0:	800b883a 	mov	r5,r16
    88e4:	000b4200 	call	b420 <__smakebuf_r>
    88e8:	8080030b 	ldhu	r2,12(r16)
    88ec:	80c00417 	ldw	r3,16(r16)
    88f0:	003fe206 	br	887c <__alt_mem_Flash_flash_data+0xf400887c>
    88f4:	80800517 	ldw	r2,20(r16)
    88f8:	80000215 	stw	zero,8(r16)
    88fc:	0085c83a 	sub	r2,zero,r2
    8900:	80800615 	stw	r2,24(r16)
    8904:	183fe41e 	bne	r3,zero,8898 <__alt_mem_Flash_flash_data+0xf4008898>
    8908:	80c0030b 	ldhu	r3,12(r16)
    890c:	0005883a 	mov	r2,zero
    8910:	1900200c 	andi	r4,r3,128
    8914:	203fe126 	beq	r4,zero,889c <__alt_mem_Flash_flash_data+0xf400889c>
    8918:	18c01014 	ori	r3,r3,64
    891c:	80c0030d 	sth	r3,12(r16)
    8920:	00bfffc4 	movi	r2,-1
    8924:	003fdd06 	br	889c <__alt_mem_Flash_flash_data+0xf400889c>
    8928:	000a8940 	call	a894 <__sinit>
    892c:	003fcd06 	br	8864 <__alt_mem_Flash_flash_data+0xf4008864>
    8930:	0005883a 	mov	r2,zero
    8934:	003fd606 	br	8890 <__alt_mem_Flash_flash_data+0xf4008890>
    8938:	81400c17 	ldw	r5,48(r16)
    893c:	28000626 	beq	r5,zero,8958 <__swsetup_r+0x124>
    8940:	80801004 	addi	r2,r16,64
    8944:	28800326 	beq	r5,r2,8954 <__swsetup_r+0x120>
    8948:	8809883a 	mov	r4,r17
    894c:	000aa080 	call	aa08 <_free_r>
    8950:	8180030b 	ldhu	r6,12(r16)
    8954:	80000c15 	stw	zero,48(r16)
    8958:	80c00417 	ldw	r3,16(r16)
    895c:	00bff6c4 	movi	r2,-37
    8960:	118c703a 	and	r6,r2,r6
    8964:	80000115 	stw	zero,4(r16)
    8968:	80c00015 	stw	r3,0(r16)
    896c:	003fd506 	br	88c4 <__alt_mem_Flash_flash_data+0xf40088c4>
    8970:	00800244 	movi	r2,9
    8974:	88800015 	stw	r2,0(r17)
    8978:	30801014 	ori	r2,r6,64
    897c:	8080030d 	sth	r2,12(r16)
    8980:	00bfffc4 	movi	r2,-1
    8984:	003fc506 	br	889c <__alt_mem_Flash_flash_data+0xf400889c>

00008988 <quorem>:
    8988:	defff704 	addi	sp,sp,-36
    898c:	dc800215 	stw	r18,8(sp)
    8990:	20800417 	ldw	r2,16(r4)
    8994:	2c800417 	ldw	r18,16(r5)
    8998:	dfc00815 	stw	ra,32(sp)
    899c:	ddc00715 	stw	r23,28(sp)
    89a0:	dd800615 	stw	r22,24(sp)
    89a4:	dd400515 	stw	r21,20(sp)
    89a8:	dd000415 	stw	r20,16(sp)
    89ac:	dcc00315 	stw	r19,12(sp)
    89b0:	dc400115 	stw	r17,4(sp)
    89b4:	dc000015 	stw	r16,0(sp)
    89b8:	14807116 	blt	r2,r18,8b80 <quorem+0x1f8>
    89bc:	94bfffc4 	addi	r18,r18,-1
    89c0:	94ad883a 	add	r22,r18,r18
    89c4:	b5ad883a 	add	r22,r22,r22
    89c8:	2c400504 	addi	r17,r5,20
    89cc:	8da9883a 	add	r20,r17,r22
    89d0:	25400504 	addi	r21,r4,20
    89d4:	282f883a 	mov	r23,r5
    89d8:	adad883a 	add	r22,r21,r22
    89dc:	a1400017 	ldw	r5,0(r20)
    89e0:	2021883a 	mov	r16,r4
    89e4:	b1000017 	ldw	r4,0(r22)
    89e8:	29400044 	addi	r5,r5,1
    89ec:	00116440 	call	11644 <__udivsi3>
    89f0:	1027883a 	mov	r19,r2
    89f4:	10002c26 	beq	r2,zero,8aa8 <quorem+0x120>
    89f8:	a813883a 	mov	r9,r21
    89fc:	8811883a 	mov	r8,r17
    8a00:	0009883a 	mov	r4,zero
    8a04:	000d883a 	mov	r6,zero
    8a08:	41c00017 	ldw	r7,0(r8)
    8a0c:	49400017 	ldw	r5,0(r9)
    8a10:	42000104 	addi	r8,r8,4
    8a14:	38bfffcc 	andi	r2,r7,65535
    8a18:	14c5383a 	mul	r2,r2,r19
    8a1c:	380ed43a 	srli	r7,r7,16
    8a20:	28ffffcc 	andi	r3,r5,65535
    8a24:	2085883a 	add	r2,r4,r2
    8a28:	1008d43a 	srli	r4,r2,16
    8a2c:	3ccf383a 	mul	r7,r7,r19
    8a30:	198d883a 	add	r6,r3,r6
    8a34:	10ffffcc 	andi	r3,r2,65535
    8a38:	30c7c83a 	sub	r3,r6,r3
    8a3c:	280ad43a 	srli	r5,r5,16
    8a40:	21c9883a 	add	r4,r4,r7
    8a44:	180dd43a 	srai	r6,r3,16
    8a48:	20bfffcc 	andi	r2,r4,65535
    8a4c:	288bc83a 	sub	r5,r5,r2
    8a50:	298b883a 	add	r5,r5,r6
    8a54:	280e943a 	slli	r7,r5,16
    8a58:	18ffffcc 	andi	r3,r3,65535
    8a5c:	2008d43a 	srli	r4,r4,16
    8a60:	38ceb03a 	or	r7,r7,r3
    8a64:	49c00015 	stw	r7,0(r9)
    8a68:	280dd43a 	srai	r6,r5,16
    8a6c:	4a400104 	addi	r9,r9,4
    8a70:	a23fe52e 	bgeu	r20,r8,8a08 <__alt_mem_Flash_flash_data+0xf4008a08>
    8a74:	b0800017 	ldw	r2,0(r22)
    8a78:	10000b1e 	bne	r2,zero,8aa8 <quorem+0x120>
    8a7c:	b0bfff04 	addi	r2,r22,-4
    8a80:	a880082e 	bgeu	r21,r2,8aa4 <quorem+0x11c>
    8a84:	b0ffff17 	ldw	r3,-4(r22)
    8a88:	18000326 	beq	r3,zero,8a98 <quorem+0x110>
    8a8c:	00000506 	br	8aa4 <quorem+0x11c>
    8a90:	10c00017 	ldw	r3,0(r2)
    8a94:	1800031e 	bne	r3,zero,8aa4 <quorem+0x11c>
    8a98:	10bfff04 	addi	r2,r2,-4
    8a9c:	94bfffc4 	addi	r18,r18,-1
    8aa0:	a8bffb36 	bltu	r21,r2,8a90 <__alt_mem_Flash_flash_data+0xf4008a90>
    8aa4:	84800415 	stw	r18,16(r16)
    8aa8:	8009883a 	mov	r4,r16
    8aac:	b80b883a 	mov	r5,r23
    8ab0:	000c9d00 	call	c9d0 <__mcmp>
    8ab4:	10002616 	blt	r2,zero,8b50 <quorem+0x1c8>
    8ab8:	9cc00044 	addi	r19,r19,1
    8abc:	a80d883a 	mov	r6,r21
    8ac0:	000b883a 	mov	r5,zero
    8ac4:	31000017 	ldw	r4,0(r6)
    8ac8:	88800017 	ldw	r2,0(r17)
    8acc:	31800104 	addi	r6,r6,4
    8ad0:	20ffffcc 	andi	r3,r4,65535
    8ad4:	194b883a 	add	r5,r3,r5
    8ad8:	10ffffcc 	andi	r3,r2,65535
    8adc:	28c7c83a 	sub	r3,r5,r3
    8ae0:	1004d43a 	srli	r2,r2,16
    8ae4:	2008d43a 	srli	r4,r4,16
    8ae8:	180bd43a 	srai	r5,r3,16
    8aec:	18ffffcc 	andi	r3,r3,65535
    8af0:	2089c83a 	sub	r4,r4,r2
    8af4:	2149883a 	add	r4,r4,r5
    8af8:	2004943a 	slli	r2,r4,16
    8afc:	8c400104 	addi	r17,r17,4
    8b00:	200bd43a 	srai	r5,r4,16
    8b04:	10c6b03a 	or	r3,r2,r3
    8b08:	30ffff15 	stw	r3,-4(r6)
    8b0c:	a47fed2e 	bgeu	r20,r17,8ac4 <__alt_mem_Flash_flash_data+0xf4008ac4>
    8b10:	9485883a 	add	r2,r18,r18
    8b14:	1085883a 	add	r2,r2,r2
    8b18:	a887883a 	add	r3,r21,r2
    8b1c:	18800017 	ldw	r2,0(r3)
    8b20:	10000b1e 	bne	r2,zero,8b50 <quorem+0x1c8>
    8b24:	18bfff04 	addi	r2,r3,-4
    8b28:	a880082e 	bgeu	r21,r2,8b4c <quorem+0x1c4>
    8b2c:	18ffff17 	ldw	r3,-4(r3)
    8b30:	18000326 	beq	r3,zero,8b40 <quorem+0x1b8>
    8b34:	00000506 	br	8b4c <quorem+0x1c4>
    8b38:	10c00017 	ldw	r3,0(r2)
    8b3c:	1800031e 	bne	r3,zero,8b4c <quorem+0x1c4>
    8b40:	10bfff04 	addi	r2,r2,-4
    8b44:	94bfffc4 	addi	r18,r18,-1
    8b48:	a8bffb36 	bltu	r21,r2,8b38 <__alt_mem_Flash_flash_data+0xf4008b38>
    8b4c:	84800415 	stw	r18,16(r16)
    8b50:	9805883a 	mov	r2,r19
    8b54:	dfc00817 	ldw	ra,32(sp)
    8b58:	ddc00717 	ldw	r23,28(sp)
    8b5c:	dd800617 	ldw	r22,24(sp)
    8b60:	dd400517 	ldw	r21,20(sp)
    8b64:	dd000417 	ldw	r20,16(sp)
    8b68:	dcc00317 	ldw	r19,12(sp)
    8b6c:	dc800217 	ldw	r18,8(sp)
    8b70:	dc400117 	ldw	r17,4(sp)
    8b74:	dc000017 	ldw	r16,0(sp)
    8b78:	dec00904 	addi	sp,sp,36
    8b7c:	f800283a 	ret
    8b80:	0005883a 	mov	r2,zero
    8b84:	003ff306 	br	8b54 <__alt_mem_Flash_flash_data+0xf4008b54>

00008b88 <_dtoa_r>:
    8b88:	20801017 	ldw	r2,64(r4)
    8b8c:	deffde04 	addi	sp,sp,-136
    8b90:	dd401d15 	stw	r21,116(sp)
    8b94:	dcc01b15 	stw	r19,108(sp)
    8b98:	dc801a15 	stw	r18,104(sp)
    8b9c:	dc401915 	stw	r17,100(sp)
    8ba0:	dc001815 	stw	r16,96(sp)
    8ba4:	dfc02115 	stw	ra,132(sp)
    8ba8:	df002015 	stw	fp,128(sp)
    8bac:	ddc01f15 	stw	r23,124(sp)
    8bb0:	dd801e15 	stw	r22,120(sp)
    8bb4:	dd001c15 	stw	r20,112(sp)
    8bb8:	d9c00315 	stw	r7,12(sp)
    8bbc:	2021883a 	mov	r16,r4
    8bc0:	302b883a 	mov	r21,r6
    8bc4:	2825883a 	mov	r18,r5
    8bc8:	dc402417 	ldw	r17,144(sp)
    8bcc:	3027883a 	mov	r19,r6
    8bd0:	10000826 	beq	r2,zero,8bf4 <_dtoa_r+0x6c>
    8bd4:	21801117 	ldw	r6,68(r4)
    8bd8:	00c00044 	movi	r3,1
    8bdc:	100b883a 	mov	r5,r2
    8be0:	1986983a 	sll	r3,r3,r6
    8be4:	11800115 	stw	r6,4(r2)
    8be8:	10c00215 	stw	r3,8(r2)
    8bec:	000c1a40 	call	c1a4 <_Bfree>
    8bf0:	80001015 	stw	zero,64(r16)
    8bf4:	a8002d16 	blt	r21,zero,8cac <_dtoa_r+0x124>
    8bf8:	88000015 	stw	zero,0(r17)
    8bfc:	a8dffc2c 	andhi	r3,r21,32752
    8c00:	009ffc34 	movhi	r2,32752
    8c04:	18801b26 	beq	r3,r2,8c74 <_dtoa_r+0xec>
    8c08:	9009883a 	mov	r4,r18
    8c0c:	980b883a 	mov	r5,r19
    8c10:	000d883a 	mov	r6,zero
    8c14:	000f883a 	mov	r7,zero
    8c18:	00127bc0 	call	127bc <__eqdf2>
    8c1c:	10002a1e 	bne	r2,zero,8cc8 <_dtoa_r+0x140>
    8c20:	d8c02317 	ldw	r3,140(sp)
    8c24:	d9002517 	ldw	r4,148(sp)
    8c28:	00800044 	movi	r2,1
    8c2c:	18800015 	stw	r2,0(r3)
    8c30:	2001a226 	beq	r4,zero,92bc <_dtoa_r+0x734>
    8c34:	008000b4 	movhi	r2,2
    8c38:	1096be44 	addi	r2,r2,23289
    8c3c:	20800015 	stw	r2,0(r4)
    8c40:	10bfffc4 	addi	r2,r2,-1
    8c44:	dfc02117 	ldw	ra,132(sp)
    8c48:	df002017 	ldw	fp,128(sp)
    8c4c:	ddc01f17 	ldw	r23,124(sp)
    8c50:	dd801e17 	ldw	r22,120(sp)
    8c54:	dd401d17 	ldw	r21,116(sp)
    8c58:	dd001c17 	ldw	r20,112(sp)
    8c5c:	dcc01b17 	ldw	r19,108(sp)
    8c60:	dc801a17 	ldw	r18,104(sp)
    8c64:	dc401917 	ldw	r17,100(sp)
    8c68:	dc001817 	ldw	r16,96(sp)
    8c6c:	dec02204 	addi	sp,sp,136
    8c70:	f800283a 	ret
    8c74:	d8c02317 	ldw	r3,140(sp)
    8c78:	0089c3c4 	movi	r2,9999
    8c7c:	18800015 	stw	r2,0(r3)
    8c80:	90017c26 	beq	r18,zero,9274 <_dtoa_r+0x6ec>
    8c84:	008000b4 	movhi	r2,2
    8c88:	1096d204 	addi	r2,r2,23368
    8c8c:	d9002517 	ldw	r4,148(sp)
    8c90:	203fec26 	beq	r4,zero,8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    8c94:	10c000c7 	ldb	r3,3(r2)
    8c98:	18017d1e 	bne	r3,zero,9290 <_dtoa_r+0x708>
    8c9c:	10c000c4 	addi	r3,r2,3
    8ca0:	d9802517 	ldw	r6,148(sp)
    8ca4:	30c00015 	stw	r3,0(r6)
    8ca8:	003fe606 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    8cac:	04e00034 	movhi	r19,32768
    8cb0:	9cffffc4 	addi	r19,r19,-1
    8cb4:	00800044 	movi	r2,1
    8cb8:	ace6703a 	and	r19,r21,r19
    8cbc:	88800015 	stw	r2,0(r17)
    8cc0:	982b883a 	mov	r21,r19
    8cc4:	003fcd06 	br	8bfc <__alt_mem_Flash_flash_data+0xf4008bfc>
    8cc8:	d8800204 	addi	r2,sp,8
    8ccc:	a822d53a 	srli	r17,r21,20
    8cd0:	d8800015 	stw	r2,0(sp)
    8cd4:	8009883a 	mov	r4,r16
    8cd8:	900b883a 	mov	r5,r18
    8cdc:	980d883a 	mov	r6,r19
    8ce0:	d9c00104 	addi	r7,sp,4
    8ce4:	000cd440 	call	cd44 <__d2b>
    8ce8:	1039883a 	mov	fp,r2
    8cec:	88016a1e 	bne	r17,zero,9298 <_dtoa_r+0x710>
    8cf0:	dd000217 	ldw	r20,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	00befbc4 	movi	r2,-1041
    8cfc:	a463883a 	add	r17,r20,r17
    8d00:	8882ea16 	blt	r17,r2,98ac <_dtoa_r+0xd24>
    8d04:	00bf0384 	movi	r2,-1010
    8d08:	1445c83a 	sub	r2,r2,r17
    8d0c:	89010484 	addi	r4,r17,1042
    8d10:	a8aa983a 	sll	r21,r21,r2
    8d14:	9108d83a 	srl	r4,r18,r4
    8d18:	a908b03a 	or	r4,r21,r4
    8d1c:	0013b4c0 	call	13b4c <__floatunsidf>
    8d20:	017f8434 	movhi	r5,65040
    8d24:	01800044 	movi	r6,1
    8d28:	1009883a 	mov	r4,r2
    8d2c:	194b883a 	add	r5,r3,r5
    8d30:	8c7fffc4 	addi	r17,r17,-1
    8d34:	d9800f15 	stw	r6,60(sp)
    8d38:	000d883a 	mov	r6,zero
    8d3c:	01cffe34 	movhi	r7,16376
    8d40:	00131240 	call	13124 <__subdf3>
    8d44:	0198dbf4 	movhi	r6,25455
    8d48:	01cff4f4 	movhi	r7,16339
    8d4c:	1009883a 	mov	r4,r2
    8d50:	180b883a 	mov	r5,r3
    8d54:	3190d844 	addi	r6,r6,17249
    8d58:	39e1e9c4 	addi	r7,r7,-30809
    8d5c:	0012a000 	call	12a00 <__muldf3>
    8d60:	01a2d874 	movhi	r6,35681
    8d64:	01cff1f4 	movhi	r7,16327
    8d68:	180b883a 	mov	r5,r3
    8d6c:	31b22cc4 	addi	r6,r6,-14157
    8d70:	39e28a04 	addi	r7,r7,-30168
    8d74:	1009883a 	mov	r4,r2
    8d78:	00116540 	call	11654 <__adddf3>
    8d7c:	8809883a 	mov	r4,r17
    8d80:	102d883a 	mov	r22,r2
    8d84:	182b883a 	mov	r21,r3
    8d88:	0013a7c0 	call	13a7c <__floatsidf>
    8d8c:	019427f4 	movhi	r6,20639
    8d90:	01cff4f4 	movhi	r7,16339
    8d94:	1009883a 	mov	r4,r2
    8d98:	180b883a 	mov	r5,r3
    8d9c:	319e7ec4 	addi	r6,r6,31227
    8da0:	39d104c4 	addi	r7,r7,17427
    8da4:	0012a000 	call	12a00 <__muldf3>
    8da8:	b009883a 	mov	r4,r22
    8dac:	a80b883a 	mov	r5,r21
    8db0:	100d883a 	mov	r6,r2
    8db4:	180f883a 	mov	r7,r3
    8db8:	00116540 	call	11654 <__adddf3>
    8dbc:	1009883a 	mov	r4,r2
    8dc0:	180b883a 	mov	r5,r3
    8dc4:	102d883a 	mov	r22,r2
    8dc8:	182b883a 	mov	r21,r3
    8dcc:	00139f40 	call	139f4 <__fixdfsi>
    8dd0:	b009883a 	mov	r4,r22
    8dd4:	a80b883a 	mov	r5,r21
    8dd8:	000d883a 	mov	r6,zero
    8ddc:	000f883a 	mov	r7,zero
    8de0:	d8800515 	stw	r2,20(sp)
    8de4:	00129200 	call	12920 <__ledf2>
    8de8:	10023116 	blt	r2,zero,96b0 <_dtoa_r+0xb28>
    8dec:	d8c00517 	ldw	r3,20(sp)
    8df0:	00800584 	movi	r2,22
    8df4:	10c21f36 	bltu	r2,r3,9674 <_dtoa_r+0xaec>
    8df8:	180490fa 	slli	r2,r3,3
    8dfc:	00c000b4 	movhi	r3,2
    8e00:	18d6ee04 	addi	r3,r3,23480
    8e04:	1885883a 	add	r2,r3,r2
    8e08:	11000017 	ldw	r4,0(r2)
    8e0c:	11400117 	ldw	r5,4(r2)
    8e10:	900d883a 	mov	r6,r18
    8e14:	980f883a 	mov	r7,r19
    8e18:	00128400 	call	12840 <__gedf2>
    8e1c:	0082a70e 	bge	zero,r2,98bc <_dtoa_r+0xd34>
    8e20:	d9000517 	ldw	r4,20(sp)
    8e24:	d8000d15 	stw	zero,52(sp)
    8e28:	213fffc4 	addi	r4,r4,-1
    8e2c:	d9000515 	stw	r4,20(sp)
    8e30:	a463c83a 	sub	r17,r20,r17
    8e34:	8dbfffc4 	addi	r22,r17,-1
    8e38:	b0021916 	blt	r22,zero,96a0 <_dtoa_r+0xb18>
    8e3c:	d8000815 	stw	zero,32(sp)
    8e40:	d8800517 	ldw	r2,20(sp)
    8e44:	10020e16 	blt	r2,zero,9680 <_dtoa_r+0xaf8>
    8e48:	b0ad883a 	add	r22,r22,r2
    8e4c:	d8800a15 	stw	r2,40(sp)
    8e50:	d8000915 	stw	zero,36(sp)
    8e54:	d8c00317 	ldw	r3,12(sp)
    8e58:	00800244 	movi	r2,9
    8e5c:	10c11a36 	bltu	r2,r3,92c8 <_dtoa_r+0x740>
    8e60:	00800144 	movi	r2,5
    8e64:	10c4fc0e 	bge	r2,r3,a258 <_dtoa_r+0x16d0>
    8e68:	18ffff04 	addi	r3,r3,-4
    8e6c:	d8c00315 	stw	r3,12(sp)
    8e70:	0029883a 	mov	r20,zero
    8e74:	d9800317 	ldw	r6,12(sp)
    8e78:	008000c4 	movi	r2,3
    8e7c:	3083bd26 	beq	r6,r2,9d74 <_dtoa_r+0x11ec>
    8e80:	1183670e 	bge	r2,r6,9c20 <_dtoa_r+0x1098>
    8e84:	d8c00317 	ldw	r3,12(sp)
    8e88:	00800104 	movi	r2,4
    8e8c:	1882e726 	beq	r3,r2,9a2c <_dtoa_r+0xea4>
    8e90:	00800144 	movi	r2,5
    8e94:	1884f21e 	bne	r3,r2,a260 <_dtoa_r+0x16d8>
    8e98:	00800044 	movi	r2,1
    8e9c:	d8800b15 	stw	r2,44(sp)
    8ea0:	d8c02217 	ldw	r3,136(sp)
    8ea4:	d9000517 	ldw	r4,20(sp)
    8ea8:	1907883a 	add	r3,r3,r4
    8eac:	19800044 	addi	r6,r3,1
    8eb0:	d8c00c15 	stw	r3,48(sp)
    8eb4:	d9800615 	stw	r6,24(sp)
    8eb8:	0183c30e 	bge	zero,r6,9dc8 <_dtoa_r+0x1240>
    8ebc:	d9800617 	ldw	r6,24(sp)
    8ec0:	3023883a 	mov	r17,r6
    8ec4:	80001115 	stw	zero,68(r16)
    8ec8:	008005c4 	movi	r2,23
    8ecc:	1184f62e 	bgeu	r2,r6,a2a8 <_dtoa_r+0x1720>
    8ed0:	00c00044 	movi	r3,1
    8ed4:	00800104 	movi	r2,4
    8ed8:	1085883a 	add	r2,r2,r2
    8edc:	11000504 	addi	r4,r2,20
    8ee0:	180b883a 	mov	r5,r3
    8ee4:	18c00044 	addi	r3,r3,1
    8ee8:	313ffb2e 	bgeu	r6,r4,8ed8 <__alt_mem_Flash_flash_data+0xf4008ed8>
    8eec:	81401115 	stw	r5,68(r16)
    8ef0:	8009883a 	mov	r4,r16
    8ef4:	000c0fc0 	call	c0fc <_Balloc>
    8ef8:	d8800715 	stw	r2,28(sp)
    8efc:	80801015 	stw	r2,64(r16)
    8f00:	00800384 	movi	r2,14
    8f04:	1440fd36 	bltu	r2,r17,92fc <_dtoa_r+0x774>
    8f08:	a000fc26 	beq	r20,zero,92fc <_dtoa_r+0x774>
    8f0c:	d8800517 	ldw	r2,20(sp)
    8f10:	0083b90e 	bge	zero,r2,9df8 <_dtoa_r+0x1270>
    8f14:	d8c00517 	ldw	r3,20(sp)
    8f18:	108003cc 	andi	r2,r2,15
    8f1c:	100490fa 	slli	r2,r2,3
    8f20:	182fd13a 	srai	r23,r3,4
    8f24:	00c000b4 	movhi	r3,2
    8f28:	18d6ee04 	addi	r3,r3,23480
    8f2c:	1885883a 	add	r2,r3,r2
    8f30:	b8c0040c 	andi	r3,r23,16
    8f34:	12c00017 	ldw	r11,0(r2)
    8f38:	12800117 	ldw	r10,4(r2)
    8f3c:	18039726 	beq	r3,zero,9d9c <_dtoa_r+0x1214>
    8f40:	008000b4 	movhi	r2,2
    8f44:	1096e404 	addi	r2,r2,23440
    8f48:	11800817 	ldw	r6,32(r2)
    8f4c:	11c00917 	ldw	r7,36(r2)
    8f50:	9009883a 	mov	r4,r18
    8f54:	980b883a 	mov	r5,r19
    8f58:	da801615 	stw	r10,88(sp)
    8f5c:	dac01515 	stw	r11,84(sp)
    8f60:	0011ef00 	call	11ef0 <__divdf3>
    8f64:	da801617 	ldw	r10,88(sp)
    8f68:	dac01517 	ldw	r11,84(sp)
    8f6c:	bdc003cc 	andi	r23,r23,15
    8f70:	044000c4 	movi	r17,3
    8f74:	d8800e15 	stw	r2,56(sp)
    8f78:	182b883a 	mov	r21,r3
    8f7c:	b8001126 	beq	r23,zero,8fc4 <_dtoa_r+0x43c>
    8f80:	050000b4 	movhi	r20,2
    8f84:	a516e404 	addi	r20,r20,23440
    8f88:	5805883a 	mov	r2,r11
    8f8c:	5007883a 	mov	r3,r10
    8f90:	b980004c 	andi	r6,r23,1
    8f94:	1009883a 	mov	r4,r2
    8f98:	b82fd07a 	srai	r23,r23,1
    8f9c:	180b883a 	mov	r5,r3
    8fa0:	30000426 	beq	r6,zero,8fb4 <_dtoa_r+0x42c>
    8fa4:	a1800017 	ldw	r6,0(r20)
    8fa8:	a1c00117 	ldw	r7,4(r20)
    8fac:	8c400044 	addi	r17,r17,1
    8fb0:	0012a000 	call	12a00 <__muldf3>
    8fb4:	a5000204 	addi	r20,r20,8
    8fb8:	b83ff51e 	bne	r23,zero,8f90 <__alt_mem_Flash_flash_data+0xf4008f90>
    8fbc:	1017883a 	mov	r11,r2
    8fc0:	1815883a 	mov	r10,r3
    8fc4:	d9000e17 	ldw	r4,56(sp)
    8fc8:	a80b883a 	mov	r5,r21
    8fcc:	580d883a 	mov	r6,r11
    8fd0:	500f883a 	mov	r7,r10
    8fd4:	0011ef00 	call	11ef0 <__divdf3>
    8fd8:	1029883a 	mov	r20,r2
    8fdc:	182b883a 	mov	r21,r3
    8fe0:	d9800d17 	ldw	r6,52(sp)
    8fe4:	30000626 	beq	r6,zero,9000 <_dtoa_r+0x478>
    8fe8:	a009883a 	mov	r4,r20
    8fec:	a80b883a 	mov	r5,r21
    8ff0:	000d883a 	mov	r6,zero
    8ff4:	01cffc34 	movhi	r7,16368
    8ff8:	00129200 	call	12920 <__ledf2>
    8ffc:	10043216 	blt	r2,zero,a0c8 <_dtoa_r+0x1540>
    9000:	8809883a 	mov	r4,r17
    9004:	0013a7c0 	call	13a7c <__floatsidf>
    9008:	1009883a 	mov	r4,r2
    900c:	180b883a 	mov	r5,r3
    9010:	a00d883a 	mov	r6,r20
    9014:	a80f883a 	mov	r7,r21
    9018:	0012a000 	call	12a00 <__muldf3>
    901c:	000d883a 	mov	r6,zero
    9020:	1009883a 	mov	r4,r2
    9024:	180b883a 	mov	r5,r3
    9028:	01d00734 	movhi	r7,16412
    902c:	00116540 	call	11654 <__adddf3>
    9030:	1023883a 	mov	r17,r2
    9034:	d9800617 	ldw	r6,24(sp)
    9038:	00bf3034 	movhi	r2,64704
    903c:	1885883a 	add	r2,r3,r2
    9040:	d8800e15 	stw	r2,56(sp)
    9044:	30032e26 	beq	r6,zero,9d00 <_dtoa_r+0x1178>
    9048:	d8c00517 	ldw	r3,20(sp)
    904c:	da800617 	ldw	r10,24(sp)
    9050:	d8c01215 	stw	r3,72(sp)
    9054:	d9000b17 	ldw	r4,44(sp)
    9058:	2003b026 	beq	r4,zero,9f1c <_dtoa_r+0x1394>
    905c:	50bfffc4 	addi	r2,r10,-1
    9060:	100490fa 	slli	r2,r2,3
    9064:	00c000b4 	movhi	r3,2
    9068:	18d6ee04 	addi	r3,r3,23480
    906c:	1885883a 	add	r2,r3,r2
    9070:	11800017 	ldw	r6,0(r2)
    9074:	11c00117 	ldw	r7,4(r2)
    9078:	d8800717 	ldw	r2,28(sp)
    907c:	0009883a 	mov	r4,zero
    9080:	014ff834 	movhi	r5,16352
    9084:	da801615 	stw	r10,88(sp)
    9088:	15c00044 	addi	r23,r2,1
    908c:	0011ef00 	call	11ef0 <__divdf3>
    9090:	d9c00e17 	ldw	r7,56(sp)
    9094:	880d883a 	mov	r6,r17
    9098:	1009883a 	mov	r4,r2
    909c:	180b883a 	mov	r5,r3
    90a0:	00131240 	call	13124 <__subdf3>
    90a4:	a80b883a 	mov	r5,r21
    90a8:	a009883a 	mov	r4,r20
    90ac:	d8c01015 	stw	r3,64(sp)
    90b0:	d8800e15 	stw	r2,56(sp)
    90b4:	00139f40 	call	139f4 <__fixdfsi>
    90b8:	1009883a 	mov	r4,r2
    90bc:	d8801715 	stw	r2,92(sp)
    90c0:	0013a7c0 	call	13a7c <__floatsidf>
    90c4:	a009883a 	mov	r4,r20
    90c8:	a80b883a 	mov	r5,r21
    90cc:	100d883a 	mov	r6,r2
    90d0:	180f883a 	mov	r7,r3
    90d4:	00131240 	call	13124 <__subdf3>
    90d8:	da001717 	ldw	r8,92(sp)
    90dc:	1829883a 	mov	r20,r3
    90e0:	d8c00717 	ldw	r3,28(sp)
    90e4:	d9000e17 	ldw	r4,56(sp)
    90e8:	d9401017 	ldw	r5,64(sp)
    90ec:	42000c04 	addi	r8,r8,48
    90f0:	1023883a 	mov	r17,r2
    90f4:	1a000005 	stb	r8,0(r3)
    90f8:	880d883a 	mov	r6,r17
    90fc:	a00f883a 	mov	r7,r20
    9100:	402b883a 	mov	r21,r8
    9104:	00128400 	call	12840 <__gedf2>
    9108:	00844516 	blt	zero,r2,a220 <_dtoa_r+0x1698>
    910c:	0009883a 	mov	r4,zero
    9110:	014ffc34 	movhi	r5,16368
    9114:	880d883a 	mov	r6,r17
    9118:	a00f883a 	mov	r7,r20
    911c:	00131240 	call	13124 <__subdf3>
    9120:	d9000e17 	ldw	r4,56(sp)
    9124:	d9401017 	ldw	r5,64(sp)
    9128:	100d883a 	mov	r6,r2
    912c:	180f883a 	mov	r7,r3
    9130:	00128400 	call	12840 <__gedf2>
    9134:	da801617 	ldw	r10,88(sp)
    9138:	00843616 	blt	zero,r2,a214 <_dtoa_r+0x168c>
    913c:	00800044 	movi	r2,1
    9140:	12806e0e 	bge	r2,r10,92fc <_dtoa_r+0x774>
    9144:	d9000717 	ldw	r4,28(sp)
    9148:	dd801315 	stw	r22,76(sp)
    914c:	dc001115 	stw	r16,68(sp)
    9150:	2295883a 	add	r10,r4,r10
    9154:	dcc01415 	stw	r19,80(sp)
    9158:	502d883a 	mov	r22,r10
    915c:	dcc01017 	ldw	r19,64(sp)
    9160:	b821883a 	mov	r16,r23
    9164:	dc801015 	stw	r18,64(sp)
    9168:	dc800e17 	ldw	r18,56(sp)
    916c:	00000906 	br	9194 <_dtoa_r+0x60c>
    9170:	00131240 	call	13124 <__subdf3>
    9174:	1009883a 	mov	r4,r2
    9178:	180b883a 	mov	r5,r3
    917c:	900d883a 	mov	r6,r18
    9180:	980f883a 	mov	r7,r19
    9184:	00129200 	call	12920 <__ledf2>
    9188:	10040e16 	blt	r2,zero,a1c4 <_dtoa_r+0x163c>
    918c:	b821883a 	mov	r16,r23
    9190:	bd841026 	beq	r23,r22,a1d4 <_dtoa_r+0x164c>
    9194:	9009883a 	mov	r4,r18
    9198:	980b883a 	mov	r5,r19
    919c:	000d883a 	mov	r6,zero
    91a0:	01d00934 	movhi	r7,16420
    91a4:	0012a000 	call	12a00 <__muldf3>
    91a8:	000d883a 	mov	r6,zero
    91ac:	01d00934 	movhi	r7,16420
    91b0:	8809883a 	mov	r4,r17
    91b4:	a00b883a 	mov	r5,r20
    91b8:	1025883a 	mov	r18,r2
    91bc:	1827883a 	mov	r19,r3
    91c0:	0012a000 	call	12a00 <__muldf3>
    91c4:	180b883a 	mov	r5,r3
    91c8:	1009883a 	mov	r4,r2
    91cc:	1823883a 	mov	r17,r3
    91d0:	1029883a 	mov	r20,r2
    91d4:	00139f40 	call	139f4 <__fixdfsi>
    91d8:	1009883a 	mov	r4,r2
    91dc:	102b883a 	mov	r21,r2
    91e0:	0013a7c0 	call	13a7c <__floatsidf>
    91e4:	a009883a 	mov	r4,r20
    91e8:	880b883a 	mov	r5,r17
    91ec:	100d883a 	mov	r6,r2
    91f0:	180f883a 	mov	r7,r3
    91f4:	00131240 	call	13124 <__subdf3>
    91f8:	ad400c04 	addi	r21,r21,48
    91fc:	1009883a 	mov	r4,r2
    9200:	180b883a 	mov	r5,r3
    9204:	900d883a 	mov	r6,r18
    9208:	980f883a 	mov	r7,r19
    920c:	85400005 	stb	r21,0(r16)
    9210:	1023883a 	mov	r17,r2
    9214:	1829883a 	mov	r20,r3
    9218:	00129200 	call	12920 <__ledf2>
    921c:	bdc00044 	addi	r23,r23,1
    9220:	0009883a 	mov	r4,zero
    9224:	014ffc34 	movhi	r5,16368
    9228:	880d883a 	mov	r6,r17
    922c:	a00f883a 	mov	r7,r20
    9230:	103fcf0e 	bge	r2,zero,9170 <__alt_mem_Flash_flash_data+0xf4009170>
    9234:	d9801217 	ldw	r6,72(sp)
    9238:	dc001117 	ldw	r16,68(sp)
    923c:	d9800515 	stw	r6,20(sp)
    9240:	8009883a 	mov	r4,r16
    9244:	e00b883a 	mov	r5,fp
    9248:	000c1a40 	call	c1a4 <_Bfree>
    924c:	d8c00517 	ldw	r3,20(sp)
    9250:	d9002317 	ldw	r4,140(sp)
    9254:	d9802517 	ldw	r6,148(sp)
    9258:	b8000005 	stb	zero,0(r23)
    925c:	18800044 	addi	r2,r3,1
    9260:	20800015 	stw	r2,0(r4)
    9264:	30027226 	beq	r6,zero,9c30 <_dtoa_r+0x10a8>
    9268:	35c00015 	stw	r23,0(r6)
    926c:	d8800717 	ldw	r2,28(sp)
    9270:	003e7406 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    9274:	00800434 	movhi	r2,16
    9278:	10bfffc4 	addi	r2,r2,-1
    927c:	a8aa703a 	and	r21,r21,r2
    9280:	a83e801e 	bne	r21,zero,8c84 <__alt_mem_Flash_flash_data+0xf4008c84>
    9284:	008000b4 	movhi	r2,2
    9288:	1096cf04 	addi	r2,r2,23356
    928c:	003e7f06 	br	8c8c <__alt_mem_Flash_flash_data+0xf4008c8c>
    9290:	10c00204 	addi	r3,r2,8
    9294:	003e8206 	br	8ca0 <__alt_mem_Flash_flash_data+0xf4008ca0>
    9298:	01400434 	movhi	r5,16
    929c:	297fffc4 	addi	r5,r5,-1
    92a0:	994a703a 	and	r5,r19,r5
    92a4:	9009883a 	mov	r4,r18
    92a8:	8c7f0044 	addi	r17,r17,-1023
    92ac:	294ffc34 	orhi	r5,r5,16368
    92b0:	dd000217 	ldw	r20,8(sp)
    92b4:	d8000f15 	stw	zero,60(sp)
    92b8:	003e9f06 	br	8d38 <__alt_mem_Flash_flash_data+0xf4008d38>
    92bc:	008000b4 	movhi	r2,2
    92c0:	1096be04 	addi	r2,r2,23288
    92c4:	003e5f06 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    92c8:	80001115 	stw	zero,68(r16)
    92cc:	8009883a 	mov	r4,r16
    92d0:	000b883a 	mov	r5,zero
    92d4:	000c0fc0 	call	c0fc <_Balloc>
    92d8:	01bfffc4 	movi	r6,-1
    92dc:	d8800715 	stw	r2,28(sp)
    92e0:	80801015 	stw	r2,64(r16)
    92e4:	00800044 	movi	r2,1
    92e8:	d9800c15 	stw	r6,48(sp)
    92ec:	d8800b15 	stw	r2,44(sp)
    92f0:	d9800615 	stw	r6,24(sp)
    92f4:	d8002215 	stw	zero,136(sp)
    92f8:	d8000315 	stw	zero,12(sp)
    92fc:	d8800117 	ldw	r2,4(sp)
    9300:	10008e16 	blt	r2,zero,953c <_dtoa_r+0x9b4>
    9304:	d9000517 	ldw	r4,20(sp)
    9308:	00c00384 	movi	r3,14
    930c:	19008b16 	blt	r3,r4,953c <_dtoa_r+0x9b4>
    9310:	200490fa 	slli	r2,r4,3
    9314:	00c000b4 	movhi	r3,2
    9318:	d9802217 	ldw	r6,136(sp)
    931c:	18d6ee04 	addi	r3,r3,23480
    9320:	1885883a 	add	r2,r3,r2
    9324:	14400017 	ldw	r17,0(r2)
    9328:	15000117 	ldw	r20,4(r2)
    932c:	3001c716 	blt	r6,zero,9a4c <_dtoa_r+0xec4>
    9330:	880d883a 	mov	r6,r17
    9334:	a00f883a 	mov	r7,r20
    9338:	9009883a 	mov	r4,r18
    933c:	980b883a 	mov	r5,r19
    9340:	0011ef00 	call	11ef0 <__divdf3>
    9344:	180b883a 	mov	r5,r3
    9348:	1009883a 	mov	r4,r2
    934c:	00139f40 	call	139f4 <__fixdfsi>
    9350:	1009883a 	mov	r4,r2
    9354:	102d883a 	mov	r22,r2
    9358:	0013a7c0 	call	13a7c <__floatsidf>
    935c:	1009883a 	mov	r4,r2
    9360:	180b883a 	mov	r5,r3
    9364:	880d883a 	mov	r6,r17
    9368:	a00f883a 	mov	r7,r20
    936c:	0012a000 	call	12a00 <__muldf3>
    9370:	9009883a 	mov	r4,r18
    9374:	980b883a 	mov	r5,r19
    9378:	100d883a 	mov	r6,r2
    937c:	180f883a 	mov	r7,r3
    9380:	00131240 	call	13124 <__subdf3>
    9384:	d9000717 	ldw	r4,28(sp)
    9388:	d9800617 	ldw	r6,24(sp)
    938c:	180b883a 	mov	r5,r3
    9390:	b0c00c04 	addi	r3,r22,48
    9394:	20c00005 	stb	r3,0(r4)
    9398:	25c00044 	addi	r23,r4,1
    939c:	01000044 	movi	r4,1
    93a0:	1011883a 	mov	r8,r2
    93a4:	2807883a 	mov	r3,r5
    93a8:	31003d26 	beq	r6,r4,94a0 <_dtoa_r+0x918>
    93ac:	000d883a 	mov	r6,zero
    93b0:	01d00934 	movhi	r7,16420
    93b4:	1009883a 	mov	r4,r2
    93b8:	0012a000 	call	12a00 <__muldf3>
    93bc:	1009883a 	mov	r4,r2
    93c0:	180b883a 	mov	r5,r3
    93c4:	000d883a 	mov	r6,zero
    93c8:	000f883a 	mov	r7,zero
    93cc:	1027883a 	mov	r19,r2
    93d0:	182b883a 	mov	r21,r3
    93d4:	00127bc0 	call	127bc <__eqdf2>
    93d8:	103f9926 	beq	r2,zero,9240 <__alt_mem_Flash_flash_data+0xf4009240>
    93dc:	d8c00617 	ldw	r3,24(sp)
    93e0:	d9000717 	ldw	r4,28(sp)
    93e4:	b825883a 	mov	r18,r23
    93e8:	18bfffc4 	addi	r2,r3,-1
    93ec:	20ad883a 	add	r22,r4,r2
    93f0:	dc000315 	stw	r16,12(sp)
    93f4:	00000a06 	br	9420 <_dtoa_r+0x898>
    93f8:	0012a000 	call	12a00 <__muldf3>
    93fc:	1009883a 	mov	r4,r2
    9400:	180b883a 	mov	r5,r3
    9404:	000d883a 	mov	r6,zero
    9408:	000f883a 	mov	r7,zero
    940c:	1027883a 	mov	r19,r2
    9410:	182b883a 	mov	r21,r3
    9414:	b825883a 	mov	r18,r23
    9418:	00127bc0 	call	127bc <__eqdf2>
    941c:	10022626 	beq	r2,zero,9cb8 <_dtoa_r+0x1130>
    9420:	880d883a 	mov	r6,r17
    9424:	a00f883a 	mov	r7,r20
    9428:	9809883a 	mov	r4,r19
    942c:	a80b883a 	mov	r5,r21
    9430:	0011ef00 	call	11ef0 <__divdf3>
    9434:	180b883a 	mov	r5,r3
    9438:	1009883a 	mov	r4,r2
    943c:	00139f40 	call	139f4 <__fixdfsi>
    9440:	1009883a 	mov	r4,r2
    9444:	1021883a 	mov	r16,r2
    9448:	0013a7c0 	call	13a7c <__floatsidf>
    944c:	1009883a 	mov	r4,r2
    9450:	180b883a 	mov	r5,r3
    9454:	880d883a 	mov	r6,r17
    9458:	a00f883a 	mov	r7,r20
    945c:	0012a000 	call	12a00 <__muldf3>
    9460:	9809883a 	mov	r4,r19
    9464:	a80b883a 	mov	r5,r21
    9468:	100d883a 	mov	r6,r2
    946c:	180f883a 	mov	r7,r3
    9470:	00131240 	call	13124 <__subdf3>
    9474:	82000c04 	addi	r8,r16,48
    9478:	92000005 	stb	r8,0(r18)
    947c:	1009883a 	mov	r4,r2
    9480:	180b883a 	mov	r5,r3
    9484:	000d883a 	mov	r6,zero
    9488:	01d00934 	movhi	r7,16420
    948c:	1011883a 	mov	r8,r2
    9490:	bdc00044 	addi	r23,r23,1
    9494:	95bfd81e 	bne	r18,r22,93f8 <__alt_mem_Flash_flash_data+0xf40093f8>
    9498:	802d883a 	mov	r22,r16
    949c:	dc000317 	ldw	r16,12(sp)
    94a0:	4009883a 	mov	r4,r8
    94a4:	180b883a 	mov	r5,r3
    94a8:	400d883a 	mov	r6,r8
    94ac:	180f883a 	mov	r7,r3
    94b0:	00116540 	call	11654 <__adddf3>
    94b4:	8809883a 	mov	r4,r17
    94b8:	a00b883a 	mov	r5,r20
    94bc:	100d883a 	mov	r6,r2
    94c0:	180f883a 	mov	r7,r3
    94c4:	1027883a 	mov	r19,r2
    94c8:	1825883a 	mov	r18,r3
    94cc:	00129200 	call	12920 <__ledf2>
    94d0:	10000816 	blt	r2,zero,94f4 <_dtoa_r+0x96c>
    94d4:	8809883a 	mov	r4,r17
    94d8:	a00b883a 	mov	r5,r20
    94dc:	980d883a 	mov	r6,r19
    94e0:	900f883a 	mov	r7,r18
    94e4:	00127bc0 	call	127bc <__eqdf2>
    94e8:	103f551e 	bne	r2,zero,9240 <__alt_mem_Flash_flash_data+0xf4009240>
    94ec:	b580004c 	andi	r22,r22,1
    94f0:	b03f5326 	beq	r22,zero,9240 <__alt_mem_Flash_flash_data+0xf4009240>
    94f4:	bd7fffc3 	ldbu	r21,-1(r23)
    94f8:	b8bfffc4 	addi	r2,r23,-1
    94fc:	1007883a 	mov	r3,r2
    9500:	01400e44 	movi	r5,57
    9504:	d9800717 	ldw	r6,28(sp)
    9508:	00000506 	br	9520 <_dtoa_r+0x998>
    950c:	18ffffc4 	addi	r3,r3,-1
    9510:	30825e26 	beq	r6,r2,9e8c <_dtoa_r+0x1304>
    9514:	1d400003 	ldbu	r21,0(r3)
    9518:	102f883a 	mov	r23,r2
    951c:	10bfffc4 	addi	r2,r2,-1
    9520:	a9003fcc 	andi	r4,r21,255
    9524:	2100201c 	xori	r4,r4,128
    9528:	213fe004 	addi	r4,r4,-128
    952c:	217ff726 	beq	r4,r5,950c <__alt_mem_Flash_flash_data+0xf400950c>
    9530:	aa000044 	addi	r8,r21,1
    9534:	12000005 	stb	r8,0(r2)
    9538:	003f4106 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    953c:	d8c00b17 	ldw	r3,44(sp)
    9540:	18006726 	beq	r3,zero,96e0 <_dtoa_r+0xb58>
    9544:	d9000317 	ldw	r4,12(sp)
    9548:	00c00044 	movi	r3,1
    954c:	19016a0e 	bge	r3,r4,9af8 <_dtoa_r+0xf70>
    9550:	d8800617 	ldw	r2,24(sp)
    9554:	d8c00917 	ldw	r3,36(sp)
    9558:	157fffc4 	addi	r21,r2,-1
    955c:	1d420716 	blt	r3,r21,9d7c <_dtoa_r+0x11f4>
    9560:	1d6bc83a 	sub	r21,r3,r21
    9564:	d8800617 	ldw	r2,24(sp)
    9568:	1002c716 	blt	r2,zero,a088 <_dtoa_r+0x1500>
    956c:	dd000817 	ldw	r20,32(sp)
    9570:	d8800617 	ldw	r2,24(sp)
    9574:	d9800817 	ldw	r6,32(sp)
    9578:	8009883a 	mov	r4,r16
    957c:	01400044 	movi	r5,1
    9580:	308d883a 	add	r6,r6,r2
    9584:	d9800815 	stw	r6,32(sp)
    9588:	b0ad883a 	add	r22,r22,r2
    958c:	000c5080 	call	c508 <__i2b>
    9590:	1023883a 	mov	r17,r2
    9594:	a0000826 	beq	r20,zero,95b8 <_dtoa_r+0xa30>
    9598:	0580070e 	bge	zero,r22,95b8 <_dtoa_r+0xa30>
    959c:	b005883a 	mov	r2,r22
    95a0:	a5812016 	blt	r20,r22,9a24 <_dtoa_r+0xe9c>
    95a4:	d8c00817 	ldw	r3,32(sp)
    95a8:	a0a9c83a 	sub	r20,r20,r2
    95ac:	b0adc83a 	sub	r22,r22,r2
    95b0:	1887c83a 	sub	r3,r3,r2
    95b4:	d8c00815 	stw	r3,32(sp)
    95b8:	d9000917 	ldw	r4,36(sp)
    95bc:	0100140e 	bge	zero,r4,9610 <_dtoa_r+0xa88>
    95c0:	d9800b17 	ldw	r6,44(sp)
    95c4:	3001e526 	beq	r6,zero,9d5c <_dtoa_r+0x11d4>
    95c8:	05400e0e 	bge	zero,r21,9604 <_dtoa_r+0xa7c>
    95cc:	880b883a 	mov	r5,r17
    95d0:	8009883a 	mov	r4,r16
    95d4:	a80d883a 	mov	r6,r21
    95d8:	000c7400 	call	c740 <__pow5mult>
    95dc:	e00d883a 	mov	r6,fp
    95e0:	8009883a 	mov	r4,r16
    95e4:	100b883a 	mov	r5,r2
    95e8:	1023883a 	mov	r17,r2
    95ec:	000c5440 	call	c544 <__multiply>
    95f0:	102f883a 	mov	r23,r2
    95f4:	e00b883a 	mov	r5,fp
    95f8:	8009883a 	mov	r4,r16
    95fc:	000c1a40 	call	c1a4 <_Bfree>
    9600:	b839883a 	mov	fp,r23
    9604:	d8800917 	ldw	r2,36(sp)
    9608:	154dc83a 	sub	r6,r2,r21
    960c:	3001281e 	bne	r6,zero,9ab0 <_dtoa_r+0xf28>
    9610:	05c00044 	movi	r23,1
    9614:	8009883a 	mov	r4,r16
    9618:	b80b883a 	mov	r5,r23
    961c:	000c5080 	call	c508 <__i2b>
    9620:	d8c00a17 	ldw	r3,40(sp)
    9624:	102b883a 	mov	r21,r2
    9628:	00c0310e 	bge	zero,r3,96f0 <_dtoa_r+0xb68>
    962c:	8009883a 	mov	r4,r16
    9630:	100b883a 	mov	r5,r2
    9634:	180d883a 	mov	r6,r3
    9638:	000c7400 	call	c740 <__pow5mult>
    963c:	d9000317 	ldw	r4,12(sp)
    9640:	102b883a 	mov	r21,r2
    9644:	b9011f0e 	bge	r23,r4,9ac4 <_dtoa_r+0xf3c>
    9648:	0027883a 	mov	r19,zero
    964c:	a8800417 	ldw	r2,16(r21)
    9650:	10800104 	addi	r2,r2,4
    9654:	1085883a 	add	r2,r2,r2
    9658:	1085883a 	add	r2,r2,r2
    965c:	a885883a 	add	r2,r21,r2
    9660:	11000017 	ldw	r4,0(r2)
    9664:	000c3f00 	call	c3f0 <__hi0bits>
    9668:	00c00804 	movi	r3,32
    966c:	1885c83a 	sub	r2,r3,r2
    9670:	00002506 	br	9708 <_dtoa_r+0xb80>
    9674:	01800044 	movi	r6,1
    9678:	d9800d15 	stw	r6,52(sp)
    967c:	003dec06 	br	8e30 <__alt_mem_Flash_flash_data+0xf4008e30>
    9680:	d8c00817 	ldw	r3,32(sp)
    9684:	d9000517 	ldw	r4,20(sp)
    9688:	d8000a15 	stw	zero,40(sp)
    968c:	1907c83a 	sub	r3,r3,r4
    9690:	010dc83a 	sub	r6,zero,r4
    9694:	d8c00815 	stw	r3,32(sp)
    9698:	d9800915 	stw	r6,36(sp)
    969c:	003ded06 	br	8e54 <__alt_mem_Flash_flash_data+0xf4008e54>
    96a0:	05adc83a 	sub	r22,zero,r22
    96a4:	dd800815 	stw	r22,32(sp)
    96a8:	002d883a 	mov	r22,zero
    96ac:	003de406 	br	8e40 <__alt_mem_Flash_flash_data+0xf4008e40>
    96b0:	d9000517 	ldw	r4,20(sp)
    96b4:	0013a7c0 	call	13a7c <__floatsidf>
    96b8:	1009883a 	mov	r4,r2
    96bc:	180b883a 	mov	r5,r3
    96c0:	b00d883a 	mov	r6,r22
    96c4:	a80f883a 	mov	r7,r21
    96c8:	00127bc0 	call	127bc <__eqdf2>
    96cc:	103dc726 	beq	r2,zero,8dec <__alt_mem_Flash_flash_data+0xf4008dec>
    96d0:	d8800517 	ldw	r2,20(sp)
    96d4:	10bfffc4 	addi	r2,r2,-1
    96d8:	d8800515 	stw	r2,20(sp)
    96dc:	003dc306 	br	8dec <__alt_mem_Flash_flash_data+0xf4008dec>
    96e0:	dd400917 	ldw	r21,36(sp)
    96e4:	dd000817 	ldw	r20,32(sp)
    96e8:	0023883a 	mov	r17,zero
    96ec:	003fa906 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    96f0:	d9800317 	ldw	r6,12(sp)
    96f4:	b981670e 	bge	r23,r6,9c94 <_dtoa_r+0x110c>
    96f8:	0027883a 	mov	r19,zero
    96fc:	d8c00a17 	ldw	r3,40(sp)
    9700:	183fd21e 	bne	r3,zero,964c <__alt_mem_Flash_flash_data+0xf400964c>
    9704:	00800044 	movi	r2,1
    9708:	1585883a 	add	r2,r2,r22
    970c:	108007cc 	andi	r2,r2,31
    9710:	10005f26 	beq	r2,zero,9890 <_dtoa_r+0xd08>
    9714:	00c00804 	movi	r3,32
    9718:	1887c83a 	sub	r3,r3,r2
    971c:	01000104 	movi	r4,4
    9720:	20c2dd0e 	bge	r4,r3,a298 <_dtoa_r+0x1710>
    9724:	d9000817 	ldw	r4,32(sp)
    9728:	00c00704 	movi	r3,28
    972c:	1885c83a 	sub	r2,r3,r2
    9730:	2089883a 	add	r4,r4,r2
    9734:	d9000815 	stw	r4,32(sp)
    9738:	a0a9883a 	add	r20,r20,r2
    973c:	b0ad883a 	add	r22,r22,r2
    9740:	d8800817 	ldw	r2,32(sp)
    9744:	0080050e 	bge	zero,r2,975c <_dtoa_r+0xbd4>
    9748:	e00b883a 	mov	r5,fp
    974c:	8009883a 	mov	r4,r16
    9750:	100d883a 	mov	r6,r2
    9754:	000c8800 	call	c880 <__lshift>
    9758:	1039883a 	mov	fp,r2
    975c:	0580050e 	bge	zero,r22,9774 <_dtoa_r+0xbec>
    9760:	a80b883a 	mov	r5,r21
    9764:	8009883a 	mov	r4,r16
    9768:	b00d883a 	mov	r6,r22
    976c:	000c8800 	call	c880 <__lshift>
    9770:	102b883a 	mov	r21,r2
    9774:	d8c00d17 	ldw	r3,52(sp)
    9778:	1801161e 	bne	r3,zero,9bd4 <_dtoa_r+0x104c>
    977c:	d8c00617 	ldw	r3,24(sp)
    9780:	00c12d0e 	bge	zero,r3,9c38 <_dtoa_r+0x10b0>
    9784:	d8c00b17 	ldw	r3,44(sp)
    9788:	1800571e 	bne	r3,zero,98e8 <_dtoa_r+0xd60>
    978c:	dc800717 	ldw	r18,28(sp)
    9790:	dcc00617 	ldw	r19,24(sp)
    9794:	9029883a 	mov	r20,r18
    9798:	00000206 	br	97a4 <_dtoa_r+0xc1c>
    979c:	000c1cc0 	call	c1cc <__multadd>
    97a0:	1039883a 	mov	fp,r2
    97a4:	e009883a 	mov	r4,fp
    97a8:	a80b883a 	mov	r5,r21
    97ac:	00089880 	call	8988 <quorem>
    97b0:	10800c04 	addi	r2,r2,48
    97b4:	90800005 	stb	r2,0(r18)
    97b8:	94800044 	addi	r18,r18,1
    97bc:	9507c83a 	sub	r3,r18,r20
    97c0:	8009883a 	mov	r4,r16
    97c4:	e00b883a 	mov	r5,fp
    97c8:	01800284 	movi	r6,10
    97cc:	000f883a 	mov	r7,zero
    97d0:	1cfff216 	blt	r3,r19,979c <__alt_mem_Flash_flash_data+0xf400979c>
    97d4:	1011883a 	mov	r8,r2
    97d8:	d8800617 	ldw	r2,24(sp)
    97dc:	00822e0e 	bge	zero,r2,a098 <_dtoa_r+0x1510>
    97e0:	d9000717 	ldw	r4,28(sp)
    97e4:	0025883a 	mov	r18,zero
    97e8:	20af883a 	add	r23,r4,r2
    97ec:	e00b883a 	mov	r5,fp
    97f0:	01800044 	movi	r6,1
    97f4:	8009883a 	mov	r4,r16
    97f8:	da001715 	stw	r8,92(sp)
    97fc:	000c8800 	call	c880 <__lshift>
    9800:	1009883a 	mov	r4,r2
    9804:	a80b883a 	mov	r5,r21
    9808:	1039883a 	mov	fp,r2
    980c:	000c9d00 	call	c9d0 <__mcmp>
    9810:	da001717 	ldw	r8,92(sp)
    9814:	00816e0e 	bge	zero,r2,9dd0 <_dtoa_r+0x1248>
    9818:	b93fffc3 	ldbu	r4,-1(r23)
    981c:	b8bfffc4 	addi	r2,r23,-1
    9820:	1007883a 	mov	r3,r2
    9824:	01800e44 	movi	r6,57
    9828:	d9c00717 	ldw	r7,28(sp)
    982c:	00000506 	br	9844 <_dtoa_r+0xcbc>
    9830:	18ffffc4 	addi	r3,r3,-1
    9834:	38811926 	beq	r7,r2,9c9c <_dtoa_r+0x1114>
    9838:	19000003 	ldbu	r4,0(r3)
    983c:	102f883a 	mov	r23,r2
    9840:	10bfffc4 	addi	r2,r2,-1
    9844:	21403fcc 	andi	r5,r4,255
    9848:	2940201c 	xori	r5,r5,128
    984c:	297fe004 	addi	r5,r5,-128
    9850:	29bff726 	beq	r5,r6,9830 <__alt_mem_Flash_flash_data+0xf4009830>
    9854:	21000044 	addi	r4,r4,1
    9858:	11000005 	stb	r4,0(r2)
    985c:	8009883a 	mov	r4,r16
    9860:	a80b883a 	mov	r5,r21
    9864:	000c1a40 	call	c1a4 <_Bfree>
    9868:	883e7526 	beq	r17,zero,9240 <__alt_mem_Flash_flash_data+0xf4009240>
    986c:	90000426 	beq	r18,zero,9880 <_dtoa_r+0xcf8>
    9870:	94400326 	beq	r18,r17,9880 <_dtoa_r+0xcf8>
    9874:	8009883a 	mov	r4,r16
    9878:	900b883a 	mov	r5,r18
    987c:	000c1a40 	call	c1a4 <_Bfree>
    9880:	8009883a 	mov	r4,r16
    9884:	880b883a 	mov	r5,r17
    9888:	000c1a40 	call	c1a4 <_Bfree>
    988c:	003e6c06 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    9890:	00800704 	movi	r2,28
    9894:	d9800817 	ldw	r6,32(sp)
    9898:	a0a9883a 	add	r20,r20,r2
    989c:	b0ad883a 	add	r22,r22,r2
    98a0:	308d883a 	add	r6,r6,r2
    98a4:	d9800815 	stw	r6,32(sp)
    98a8:	003fa506 	br	9740 <__alt_mem_Flash_flash_data+0xf4009740>
    98ac:	013efb84 	movi	r4,-1042
    98b0:	246bc83a 	sub	r21,r4,r17
    98b4:	9548983a 	sll	r4,r18,r21
    98b8:	003d1806 	br	8d1c <__alt_mem_Flash_flash_data+0xf4008d1c>
    98bc:	d8000d15 	stw	zero,52(sp)
    98c0:	003d5b06 	br	8e30 <__alt_mem_Flash_flash_data+0xf4008e30>
    98c4:	880b883a 	mov	r5,r17
    98c8:	8009883a 	mov	r4,r16
    98cc:	01800284 	movi	r6,10
    98d0:	000f883a 	mov	r7,zero
    98d4:	000c1cc0 	call	c1cc <__multadd>
    98d8:	1023883a 	mov	r17,r2
    98dc:	d8800c17 	ldw	r2,48(sp)
    98e0:	0082550e 	bge	zero,r2,a238 <_dtoa_r+0x16b0>
    98e4:	d8800615 	stw	r2,24(sp)
    98e8:	0500050e 	bge	zero,r20,9900 <_dtoa_r+0xd78>
    98ec:	880b883a 	mov	r5,r17
    98f0:	8009883a 	mov	r4,r16
    98f4:	a00d883a 	mov	r6,r20
    98f8:	000c8800 	call	c880 <__lshift>
    98fc:	1023883a 	mov	r17,r2
    9900:	98016a1e 	bne	r19,zero,9eac <_dtoa_r+0x1324>
    9904:	8829883a 	mov	r20,r17
    9908:	d9000617 	ldw	r4,24(sp)
    990c:	dcc00717 	ldw	r19,28(sp)
    9910:	9480004c 	andi	r18,r18,1
    9914:	20bfffc4 	addi	r2,r4,-1
    9918:	9885883a 	add	r2,r19,r2
    991c:	d8800415 	stw	r2,16(sp)
    9920:	dc800615 	stw	r18,24(sp)
    9924:	e009883a 	mov	r4,fp
    9928:	a80b883a 	mov	r5,r21
    992c:	00089880 	call	8988 <quorem>
    9930:	e009883a 	mov	r4,fp
    9934:	880b883a 	mov	r5,r17
    9938:	102f883a 	mov	r23,r2
    993c:	000c9d00 	call	c9d0 <__mcmp>
    9940:	8009883a 	mov	r4,r16
    9944:	a80b883a 	mov	r5,r21
    9948:	a00d883a 	mov	r6,r20
    994c:	102d883a 	mov	r22,r2
    9950:	000ca300 	call	ca30 <__mdiff>
    9954:	1007883a 	mov	r3,r2
    9958:	10800317 	ldw	r2,12(r2)
    995c:	bc800c04 	addi	r18,r23,48
    9960:	1000971e 	bne	r2,zero,9bc0 <_dtoa_r+0x1038>
    9964:	180b883a 	mov	r5,r3
    9968:	e009883a 	mov	r4,fp
    996c:	d8c01515 	stw	r3,84(sp)
    9970:	000c9d00 	call	c9d0 <__mcmp>
    9974:	d8c01517 	ldw	r3,84(sp)
    9978:	8009883a 	mov	r4,r16
    997c:	d8801515 	stw	r2,84(sp)
    9980:	180b883a 	mov	r5,r3
    9984:	000c1a40 	call	c1a4 <_Bfree>
    9988:	d8801517 	ldw	r2,84(sp)
    998c:	1000041e 	bne	r2,zero,99a0 <_dtoa_r+0xe18>
    9990:	d9800317 	ldw	r6,12(sp)
    9994:	3000021e 	bne	r6,zero,99a0 <_dtoa_r+0xe18>
    9998:	d8c00617 	ldw	r3,24(sp)
    999c:	18007626 	beq	r3,zero,9b78 <_dtoa_r+0xff0>
    99a0:	b0005b16 	blt	r22,zero,9b10 <_dtoa_r+0xf88>
    99a4:	b000041e 	bne	r22,zero,99b8 <_dtoa_r+0xe30>
    99a8:	d9000317 	ldw	r4,12(sp)
    99ac:	2000021e 	bne	r4,zero,99b8 <_dtoa_r+0xe30>
    99b0:	d8c00617 	ldw	r3,24(sp)
    99b4:	18005626 	beq	r3,zero,9b10 <_dtoa_r+0xf88>
    99b8:	00814d16 	blt	zero,r2,9ef0 <_dtoa_r+0x1368>
    99bc:	d8c00417 	ldw	r3,16(sp)
    99c0:	9d800044 	addi	r22,r19,1
    99c4:	9c800005 	stb	r18,0(r19)
    99c8:	b02f883a 	mov	r23,r22
    99cc:	98c14c26 	beq	r19,r3,9f00 <_dtoa_r+0x1378>
    99d0:	e00b883a 	mov	r5,fp
    99d4:	8009883a 	mov	r4,r16
    99d8:	01800284 	movi	r6,10
    99dc:	000f883a 	mov	r7,zero
    99e0:	000c1cc0 	call	c1cc <__multadd>
    99e4:	1039883a 	mov	fp,r2
    99e8:	8d006d26 	beq	r17,r20,9ba0 <_dtoa_r+0x1018>
    99ec:	880b883a 	mov	r5,r17
    99f0:	01800284 	movi	r6,10
    99f4:	000f883a 	mov	r7,zero
    99f8:	8009883a 	mov	r4,r16
    99fc:	000c1cc0 	call	c1cc <__multadd>
    9a00:	a00b883a 	mov	r5,r20
    9a04:	8009883a 	mov	r4,r16
    9a08:	01800284 	movi	r6,10
    9a0c:	000f883a 	mov	r7,zero
    9a10:	1023883a 	mov	r17,r2
    9a14:	000c1cc0 	call	c1cc <__multadd>
    9a18:	1029883a 	mov	r20,r2
    9a1c:	b027883a 	mov	r19,r22
    9a20:	003fc006 	br	9924 <__alt_mem_Flash_flash_data+0xf4009924>
    9a24:	a005883a 	mov	r2,r20
    9a28:	003ede06 	br	95a4 <__alt_mem_Flash_flash_data+0xf40095a4>
    9a2c:	01000044 	movi	r4,1
    9a30:	d9000b15 	stw	r4,44(sp)
    9a34:	d9802217 	ldw	r6,136(sp)
    9a38:	0180dc0e 	bge	zero,r6,9dac <_dtoa_r+0x1224>
    9a3c:	3023883a 	mov	r17,r6
    9a40:	d9800c15 	stw	r6,48(sp)
    9a44:	d9800615 	stw	r6,24(sp)
    9a48:	003d1e06 	br	8ec4 <__alt_mem_Flash_flash_data+0xf4008ec4>
    9a4c:	d8800617 	ldw	r2,24(sp)
    9a50:	00be3716 	blt	zero,r2,9330 <__alt_mem_Flash_flash_data+0xf4009330>
    9a54:	1000be1e 	bne	r2,zero,9d50 <_dtoa_r+0x11c8>
    9a58:	8809883a 	mov	r4,r17
    9a5c:	a00b883a 	mov	r5,r20
    9a60:	000d883a 	mov	r6,zero
    9a64:	01d00534 	movhi	r7,16404
    9a68:	0012a000 	call	12a00 <__muldf3>
    9a6c:	1009883a 	mov	r4,r2
    9a70:	180b883a 	mov	r5,r3
    9a74:	900d883a 	mov	r6,r18
    9a78:	980f883a 	mov	r7,r19
    9a7c:	00128400 	call	12840 <__gedf2>
    9a80:	002b883a 	mov	r21,zero
    9a84:	0023883a 	mov	r17,zero
    9a88:	10007a16 	blt	r2,zero,9c74 <_dtoa_r+0x10ec>
    9a8c:	d9002217 	ldw	r4,136(sp)
    9a90:	ddc00717 	ldw	r23,28(sp)
    9a94:	0108303a 	nor	r4,zero,r4
    9a98:	d9000515 	stw	r4,20(sp)
    9a9c:	8009883a 	mov	r4,r16
    9aa0:	a80b883a 	mov	r5,r21
    9aa4:	000c1a40 	call	c1a4 <_Bfree>
    9aa8:	883f751e 	bne	r17,zero,9880 <__alt_mem_Flash_flash_data+0xf4009880>
    9aac:	003de406 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    9ab0:	e00b883a 	mov	r5,fp
    9ab4:	8009883a 	mov	r4,r16
    9ab8:	000c7400 	call	c740 <__pow5mult>
    9abc:	1039883a 	mov	fp,r2
    9ac0:	003ed306 	br	9610 <__alt_mem_Flash_flash_data+0xf4009610>
    9ac4:	903ee01e 	bne	r18,zero,9648 <__alt_mem_Flash_flash_data+0xf4009648>
    9ac8:	00800434 	movhi	r2,16
    9acc:	10bfffc4 	addi	r2,r2,-1
    9ad0:	9884703a 	and	r2,r19,r2
    9ad4:	103f081e 	bne	r2,zero,96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    9ad8:	9cdffc2c 	andhi	r19,r19,32752
    9adc:	983f0626 	beq	r19,zero,96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    9ae0:	d8800817 	ldw	r2,32(sp)
    9ae4:	b5800044 	addi	r22,r22,1
    9ae8:	04c00044 	movi	r19,1
    9aec:	10800044 	addi	r2,r2,1
    9af0:	d8800815 	stw	r2,32(sp)
    9af4:	003f0106 	br	96fc <__alt_mem_Flash_flash_data+0xf40096fc>
    9af8:	d9800f17 	ldw	r6,60(sp)
    9afc:	30016826 	beq	r6,zero,a0a0 <_dtoa_r+0x1518>
    9b00:	10810cc4 	addi	r2,r2,1075
    9b04:	dd400917 	ldw	r21,36(sp)
    9b08:	dd000817 	ldw	r20,32(sp)
    9b0c:	003e9906 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    9b10:	9011883a 	mov	r8,r18
    9b14:	4007883a 	mov	r3,r8
    9b18:	e02d883a 	mov	r22,fp
    9b1c:	0080100e 	bge	zero,r2,9b60 <_dtoa_r+0xfd8>
    9b20:	01800044 	movi	r6,1
    9b24:	8009883a 	mov	r4,r16
    9b28:	e00b883a 	mov	r5,fp
    9b2c:	da001515 	stw	r8,84(sp)
    9b30:	da001715 	stw	r8,92(sp)
    9b34:	000c8800 	call	c880 <__lshift>
    9b38:	1009883a 	mov	r4,r2
    9b3c:	a80b883a 	mov	r5,r21
    9b40:	102d883a 	mov	r22,r2
    9b44:	000c9d00 	call	c9d0 <__mcmp>
    9b48:	d8c01517 	ldw	r3,84(sp)
    9b4c:	da001717 	ldw	r8,92(sp)
    9b50:	0081a50e 	bge	zero,r2,a1e8 <_dtoa_r+0x1660>
    9b54:	00800e44 	movi	r2,57
    9b58:	40817b26 	beq	r8,r2,a148 <_dtoa_r+0x15c0>
    9b5c:	40c00044 	addi	r3,r8,1
    9b60:	8825883a 	mov	r18,r17
    9b64:	9dc00044 	addi	r23,r19,1
    9b68:	98c00005 	stb	r3,0(r19)
    9b6c:	a023883a 	mov	r17,r20
    9b70:	b039883a 	mov	fp,r22
    9b74:	003f3906 	br	985c <__alt_mem_Flash_flash_data+0xf400985c>
    9b78:	00800e44 	movi	r2,57
    9b7c:	9011883a 	mov	r8,r18
    9b80:	90817226 	beq	r18,r2,a14c <_dtoa_r+0x15c4>
    9b84:	0580010e 	bge	zero,r22,9b8c <_dtoa_r+0x1004>
    9b88:	ba000c44 	addi	r8,r23,49
    9b8c:	8825883a 	mov	r18,r17
    9b90:	9dc00044 	addi	r23,r19,1
    9b94:	9a000005 	stb	r8,0(r19)
    9b98:	a023883a 	mov	r17,r20
    9b9c:	003f2f06 	br	985c <__alt_mem_Flash_flash_data+0xf400985c>
    9ba0:	880b883a 	mov	r5,r17
    9ba4:	8009883a 	mov	r4,r16
    9ba8:	01800284 	movi	r6,10
    9bac:	000f883a 	mov	r7,zero
    9bb0:	000c1cc0 	call	c1cc <__multadd>
    9bb4:	1023883a 	mov	r17,r2
    9bb8:	1029883a 	mov	r20,r2
    9bbc:	003f9706 	br	9a1c <__alt_mem_Flash_flash_data+0xf4009a1c>
    9bc0:	8009883a 	mov	r4,r16
    9bc4:	180b883a 	mov	r5,r3
    9bc8:	000c1a40 	call	c1a4 <_Bfree>
    9bcc:	00800044 	movi	r2,1
    9bd0:	003f7306 	br	99a0 <__alt_mem_Flash_flash_data+0xf40099a0>
    9bd4:	e009883a 	mov	r4,fp
    9bd8:	a80b883a 	mov	r5,r21
    9bdc:	000c9d00 	call	c9d0 <__mcmp>
    9be0:	103ee60e 	bge	r2,zero,977c <__alt_mem_Flash_flash_data+0xf400977c>
    9be4:	8009883a 	mov	r4,r16
    9be8:	e00b883a 	mov	r5,fp
    9bec:	01800284 	movi	r6,10
    9bf0:	000f883a 	mov	r7,zero
    9bf4:	000c1cc0 	call	c1cc <__multadd>
    9bf8:	d9000517 	ldw	r4,20(sp)
    9bfc:	d9800b17 	ldw	r6,44(sp)
    9c00:	1039883a 	mov	fp,r2
    9c04:	213fffc4 	addi	r4,r4,-1
    9c08:	d9000515 	stw	r4,20(sp)
    9c0c:	303f2d1e 	bne	r6,zero,98c4 <__alt_mem_Flash_flash_data+0xf40098c4>
    9c10:	d9000c17 	ldw	r4,48(sp)
    9c14:	0101780e 	bge	zero,r4,a1f8 <_dtoa_r+0x1670>
    9c18:	d9000615 	stw	r4,24(sp)
    9c1c:	003edb06 	br	978c <__alt_mem_Flash_flash_data+0xf400978c>
    9c20:	00800084 	movi	r2,2
    9c24:	30818e1e 	bne	r6,r2,a260 <_dtoa_r+0x16d8>
    9c28:	d8000b15 	stw	zero,44(sp)
    9c2c:	003f8106 	br	9a34 <__alt_mem_Flash_flash_data+0xf4009a34>
    9c30:	d8800717 	ldw	r2,28(sp)
    9c34:	003c0306 	br	8c44 <__alt_mem_Flash_flash_data+0xf4008c44>
    9c38:	d9000317 	ldw	r4,12(sp)
    9c3c:	00800084 	movi	r2,2
    9c40:	113ed00e 	bge	r2,r4,9784 <__alt_mem_Flash_flash_data+0xf4009784>
    9c44:	d8c00617 	ldw	r3,24(sp)
    9c48:	183f901e 	bne	r3,zero,9a8c <__alt_mem_Flash_flash_data+0xf4009a8c>
    9c4c:	a80b883a 	mov	r5,r21
    9c50:	8009883a 	mov	r4,r16
    9c54:	01800144 	movi	r6,5
    9c58:	000f883a 	mov	r7,zero
    9c5c:	000c1cc0 	call	c1cc <__multadd>
    9c60:	e009883a 	mov	r4,fp
    9c64:	100b883a 	mov	r5,r2
    9c68:	102b883a 	mov	r21,r2
    9c6c:	000c9d00 	call	c9d0 <__mcmp>
    9c70:	00bf860e 	bge	zero,r2,9a8c <__alt_mem_Flash_flash_data+0xf4009a8c>
    9c74:	d9800717 	ldw	r6,28(sp)
    9c78:	00800c44 	movi	r2,49
    9c7c:	30800005 	stb	r2,0(r6)
    9c80:	d8800517 	ldw	r2,20(sp)
    9c84:	35c00044 	addi	r23,r6,1
    9c88:	10800044 	addi	r2,r2,1
    9c8c:	d8800515 	stw	r2,20(sp)
    9c90:	003f8206 	br	9a9c <__alt_mem_Flash_flash_data+0xf4009a9c>
    9c94:	903e981e 	bne	r18,zero,96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    9c98:	003f8b06 	br	9ac8 <__alt_mem_Flash_flash_data+0xf4009ac8>
    9c9c:	d9800517 	ldw	r6,20(sp)
    9ca0:	d8c00717 	ldw	r3,28(sp)
    9ca4:	00800c44 	movi	r2,49
    9ca8:	31800044 	addi	r6,r6,1
    9cac:	d9800515 	stw	r6,20(sp)
    9cb0:	18800005 	stb	r2,0(r3)
    9cb4:	003ee906 	br	985c <__alt_mem_Flash_flash_data+0xf400985c>
    9cb8:	dc000317 	ldw	r16,12(sp)
    9cbc:	003d6006 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    9cc0:	8809883a 	mov	r4,r17
    9cc4:	0013a7c0 	call	13a7c <__floatsidf>
    9cc8:	a009883a 	mov	r4,r20
    9ccc:	a80b883a 	mov	r5,r21
    9cd0:	100d883a 	mov	r6,r2
    9cd4:	180f883a 	mov	r7,r3
    9cd8:	0012a000 	call	12a00 <__muldf3>
    9cdc:	1009883a 	mov	r4,r2
    9ce0:	180b883a 	mov	r5,r3
    9ce4:	000d883a 	mov	r6,zero
    9ce8:	01d00734 	movhi	r7,16412
    9cec:	00116540 	call	11654 <__adddf3>
    9cf0:	1023883a 	mov	r17,r2
    9cf4:	00bf3034 	movhi	r2,64704
    9cf8:	1885883a 	add	r2,r3,r2
    9cfc:	d8800e15 	stw	r2,56(sp)
    9d00:	a009883a 	mov	r4,r20
    9d04:	a80b883a 	mov	r5,r21
    9d08:	000d883a 	mov	r6,zero
    9d0c:	01d00534 	movhi	r7,16404
    9d10:	00131240 	call	13124 <__subdf3>
    9d14:	d9c00e17 	ldw	r7,56(sp)
    9d18:	1009883a 	mov	r4,r2
    9d1c:	180b883a 	mov	r5,r3
    9d20:	880d883a 	mov	r6,r17
    9d24:	102b883a 	mov	r21,r2
    9d28:	1829883a 	mov	r20,r3
    9d2c:	00128400 	call	12840 <__gedf2>
    9d30:	00807716 	blt	zero,r2,9f10 <_dtoa_r+0x1388>
    9d34:	d8800e17 	ldw	r2,56(sp)
    9d38:	a809883a 	mov	r4,r21
    9d3c:	a00b883a 	mov	r5,r20
    9d40:	11e0003c 	xorhi	r7,r2,32768
    9d44:	880d883a 	mov	r6,r17
    9d48:	00129200 	call	12920 <__ledf2>
    9d4c:	103d6b0e 	bge	r2,zero,92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    9d50:	002b883a 	mov	r21,zero
    9d54:	0023883a 	mov	r17,zero
    9d58:	003f4c06 	br	9a8c <__alt_mem_Flash_flash_data+0xf4009a8c>
    9d5c:	d9800917 	ldw	r6,36(sp)
    9d60:	e00b883a 	mov	r5,fp
    9d64:	8009883a 	mov	r4,r16
    9d68:	000c7400 	call	c740 <__pow5mult>
    9d6c:	1039883a 	mov	fp,r2
    9d70:	003e2706 	br	9610 <__alt_mem_Flash_flash_data+0xf4009610>
    9d74:	d8000b15 	stw	zero,44(sp)
    9d78:	003c4906 	br	8ea0 <__alt_mem_Flash_flash_data+0xf4008ea0>
    9d7c:	d9000917 	ldw	r4,36(sp)
    9d80:	d9800a17 	ldw	r6,40(sp)
    9d84:	dd400915 	stw	r21,36(sp)
    9d88:	a905c83a 	sub	r2,r21,r4
    9d8c:	308d883a 	add	r6,r6,r2
    9d90:	d9800a15 	stw	r6,40(sp)
    9d94:	002b883a 	mov	r21,zero
    9d98:	003df206 	br	9564 <__alt_mem_Flash_flash_data+0xf4009564>
    9d9c:	dc800e15 	stw	r18,56(sp)
    9da0:	982b883a 	mov	r21,r19
    9da4:	04400084 	movi	r17,2
    9da8:	003c7406 	br	8f7c <__alt_mem_Flash_flash_data+0xf4008f7c>
    9dac:	04400044 	movi	r17,1
    9db0:	dc400c15 	stw	r17,48(sp)
    9db4:	dc400615 	stw	r17,24(sp)
    9db8:	dc402215 	stw	r17,136(sp)
    9dbc:	80001115 	stw	zero,68(r16)
    9dc0:	000b883a 	mov	r5,zero
    9dc4:	003c4a06 	br	8ef0 <__alt_mem_Flash_flash_data+0xf4008ef0>
    9dc8:	3023883a 	mov	r17,r6
    9dcc:	003ffb06 	br	9dbc <__alt_mem_Flash_flash_data+0xf4009dbc>
    9dd0:	1000021e 	bne	r2,zero,9ddc <_dtoa_r+0x1254>
    9dd4:	4200004c 	andi	r8,r8,1
    9dd8:	403e8f1e 	bne	r8,zero,9818 <__alt_mem_Flash_flash_data+0xf4009818>
    9ddc:	01000c04 	movi	r4,48
    9de0:	00000106 	br	9de8 <_dtoa_r+0x1260>
    9de4:	102f883a 	mov	r23,r2
    9de8:	b8bfffc4 	addi	r2,r23,-1
    9dec:	10c00007 	ldb	r3,0(r2)
    9df0:	193ffc26 	beq	r3,r4,9de4 <__alt_mem_Flash_flash_data+0xf4009de4>
    9df4:	003e9906 	br	985c <__alt_mem_Flash_flash_data+0xf400985c>
    9df8:	d9000517 	ldw	r4,20(sp)
    9dfc:	012fc83a 	sub	r23,zero,r4
    9e00:	b800ad26 	beq	r23,zero,a0b8 <_dtoa_r+0x1530>
    9e04:	b88003cc 	andi	r2,r23,15
    9e08:	100490fa 	slli	r2,r2,3
    9e0c:	00c000b4 	movhi	r3,2
    9e10:	18d6ee04 	addi	r3,r3,23480
    9e14:	1885883a 	add	r2,r3,r2
    9e18:	11800017 	ldw	r6,0(r2)
    9e1c:	11c00117 	ldw	r7,4(r2)
    9e20:	b82fd13a 	srai	r23,r23,4
    9e24:	9009883a 	mov	r4,r18
    9e28:	980b883a 	mov	r5,r19
    9e2c:	0012a000 	call	12a00 <__muldf3>
    9e30:	1029883a 	mov	r20,r2
    9e34:	182b883a 	mov	r21,r3
    9e38:	b800f426 	beq	r23,zero,a20c <_dtoa_r+0x1684>
    9e3c:	020000b4 	movhi	r8,2
    9e40:	4216e404 	addi	r8,r8,23440
    9e44:	8029883a 	mov	r20,r16
    9e48:	04400084 	movi	r17,2
    9e4c:	4021883a 	mov	r16,r8
    9e50:	b980004c 	andi	r6,r23,1
    9e54:	1009883a 	mov	r4,r2
    9e58:	b82fd07a 	srai	r23,r23,1
    9e5c:	180b883a 	mov	r5,r3
    9e60:	30000426 	beq	r6,zero,9e74 <_dtoa_r+0x12ec>
    9e64:	81800017 	ldw	r6,0(r16)
    9e68:	81c00117 	ldw	r7,4(r16)
    9e6c:	8c400044 	addi	r17,r17,1
    9e70:	0012a000 	call	12a00 <__muldf3>
    9e74:	84000204 	addi	r16,r16,8
    9e78:	b83ff51e 	bne	r23,zero,9e50 <__alt_mem_Flash_flash_data+0xf4009e50>
    9e7c:	a021883a 	mov	r16,r20
    9e80:	182b883a 	mov	r21,r3
    9e84:	1029883a 	mov	r20,r2
    9e88:	003c5506 	br	8fe0 <__alt_mem_Flash_flash_data+0xf4008fe0>
    9e8c:	d9800517 	ldw	r6,20(sp)
    9e90:	d9000717 	ldw	r4,28(sp)
    9e94:	00c00c04 	movi	r3,48
    9e98:	31800044 	addi	r6,r6,1
    9e9c:	d9800515 	stw	r6,20(sp)
    9ea0:	20c00005 	stb	r3,0(r4)
    9ea4:	02000c44 	movi	r8,49
    9ea8:	003da206 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    9eac:	89400117 	ldw	r5,4(r17)
    9eb0:	8009883a 	mov	r4,r16
    9eb4:	000c0fc0 	call	c0fc <_Balloc>
    9eb8:	89800417 	ldw	r6,16(r17)
    9ebc:	11000304 	addi	r4,r2,12
    9ec0:	89400304 	addi	r5,r17,12
    9ec4:	31800084 	addi	r6,r6,2
    9ec8:	318d883a 	add	r6,r6,r6
    9ecc:	318d883a 	add	r6,r6,r6
    9ed0:	1027883a 	mov	r19,r2
    9ed4:	000be680 	call	be68 <memcpy>
    9ed8:	8009883a 	mov	r4,r16
    9edc:	980b883a 	mov	r5,r19
    9ee0:	01800044 	movi	r6,1
    9ee4:	000c8800 	call	c880 <__lshift>
    9ee8:	1029883a 	mov	r20,r2
    9eec:	003e8606 	br	9908 <__alt_mem_Flash_flash_data+0xf4009908>
    9ef0:	00800e44 	movi	r2,57
    9ef4:	90809526 	beq	r18,r2,a14c <_dtoa_r+0x15c4>
    9ef8:	92000044 	addi	r8,r18,1
    9efc:	003f2306 	br	9b8c <__alt_mem_Flash_flash_data+0xf4009b8c>
    9f00:	9011883a 	mov	r8,r18
    9f04:	8825883a 	mov	r18,r17
    9f08:	a023883a 	mov	r17,r20
    9f0c:	003e3706 	br	97ec <__alt_mem_Flash_flash_data+0xf40097ec>
    9f10:	002b883a 	mov	r21,zero
    9f14:	0023883a 	mov	r17,zero
    9f18:	003f5606 	br	9c74 <__alt_mem_Flash_flash_data+0xf4009c74>
    9f1c:	51bfffc4 	addi	r6,r10,-1
    9f20:	300490fa 	slli	r2,r6,3
    9f24:	00c000b4 	movhi	r3,2
    9f28:	18d6ee04 	addi	r3,r3,23480
    9f2c:	1885883a 	add	r2,r3,r2
    9f30:	d9c00e17 	ldw	r7,56(sp)
    9f34:	11000017 	ldw	r4,0(r2)
    9f38:	11400117 	ldw	r5,4(r2)
    9f3c:	d8800717 	ldw	r2,28(sp)
    9f40:	d9801015 	stw	r6,64(sp)
    9f44:	880d883a 	mov	r6,r17
    9f48:	da801615 	stw	r10,88(sp)
    9f4c:	15c00044 	addi	r23,r2,1
    9f50:	0012a000 	call	12a00 <__muldf3>
    9f54:	a80b883a 	mov	r5,r21
    9f58:	a009883a 	mov	r4,r20
    9f5c:	d8c01115 	stw	r3,68(sp)
    9f60:	d8800e15 	stw	r2,56(sp)
    9f64:	00139f40 	call	139f4 <__fixdfsi>
    9f68:	1009883a 	mov	r4,r2
    9f6c:	1023883a 	mov	r17,r2
    9f70:	0013a7c0 	call	13a7c <__floatsidf>
    9f74:	a009883a 	mov	r4,r20
    9f78:	a80b883a 	mov	r5,r21
    9f7c:	100d883a 	mov	r6,r2
    9f80:	180f883a 	mov	r7,r3
    9f84:	00131240 	call	13124 <__subdf3>
    9f88:	1813883a 	mov	r9,r3
    9f8c:	d8c00717 	ldw	r3,28(sp)
    9f90:	8c400c04 	addi	r17,r17,48
    9f94:	1011883a 	mov	r8,r2
    9f98:	1c400005 	stb	r17,0(r3)
    9f9c:	da801617 	ldw	r10,88(sp)
    9fa0:	00800044 	movi	r2,1
    9fa4:	50802326 	beq	r10,r2,a034 <_dtoa_r+0x14ac>
    9fa8:	d8800717 	ldw	r2,28(sp)
    9fac:	b82b883a 	mov	r21,r23
    9fb0:	dc001315 	stw	r16,76(sp)
    9fb4:	12a9883a 	add	r20,r2,r10
    9fb8:	4807883a 	mov	r3,r9
    9fbc:	4005883a 	mov	r2,r8
    9fc0:	dc801415 	stw	r18,80(sp)
    9fc4:	000d883a 	mov	r6,zero
    9fc8:	01d00934 	movhi	r7,16420
    9fcc:	1009883a 	mov	r4,r2
    9fd0:	180b883a 	mov	r5,r3
    9fd4:	0012a000 	call	12a00 <__muldf3>
    9fd8:	180b883a 	mov	r5,r3
    9fdc:	1009883a 	mov	r4,r2
    9fe0:	1821883a 	mov	r16,r3
    9fe4:	1025883a 	mov	r18,r2
    9fe8:	00139f40 	call	139f4 <__fixdfsi>
    9fec:	1009883a 	mov	r4,r2
    9ff0:	1023883a 	mov	r17,r2
    9ff4:	0013a7c0 	call	13a7c <__floatsidf>
    9ff8:	9009883a 	mov	r4,r18
    9ffc:	800b883a 	mov	r5,r16
    a000:	100d883a 	mov	r6,r2
    a004:	180f883a 	mov	r7,r3
    a008:	8c400c04 	addi	r17,r17,48
    a00c:	00131240 	call	13124 <__subdf3>
    a010:	ad400044 	addi	r21,r21,1
    a014:	ac7fffc5 	stb	r17,-1(r21)
    a018:	ad3fea1e 	bne	r21,r20,9fc4 <__alt_mem_Flash_flash_data+0xf4009fc4>
    a01c:	1813883a 	mov	r9,r3
    a020:	d8c01017 	ldw	r3,64(sp)
    a024:	dc001317 	ldw	r16,76(sp)
    a028:	dc801417 	ldw	r18,80(sp)
    a02c:	1011883a 	mov	r8,r2
    a030:	b8ef883a 	add	r23,r23,r3
    a034:	d9000e17 	ldw	r4,56(sp)
    a038:	d9401117 	ldw	r5,68(sp)
    a03c:	000d883a 	mov	r6,zero
    a040:	01cff834 	movhi	r7,16352
    a044:	da001715 	stw	r8,92(sp)
    a048:	da401515 	stw	r9,84(sp)
    a04c:	00116540 	call	11654 <__adddf3>
    a050:	da001717 	ldw	r8,92(sp)
    a054:	da401517 	ldw	r9,84(sp)
    a058:	1009883a 	mov	r4,r2
    a05c:	400d883a 	mov	r6,r8
    a060:	480f883a 	mov	r7,r9
    a064:	180b883a 	mov	r5,r3
    a068:	00129200 	call	12920 <__ledf2>
    a06c:	da001717 	ldw	r8,92(sp)
    a070:	da401517 	ldw	r9,84(sp)
    a074:	10003b0e 	bge	r2,zero,a164 <_dtoa_r+0x15dc>
    a078:	d9001217 	ldw	r4,72(sp)
    a07c:	bd7fffc3 	ldbu	r21,-1(r23)
    a080:	d9000515 	stw	r4,20(sp)
    a084:	003d1c06 	br	94f8 <__alt_mem_Flash_flash_data+0xf40094f8>
    a088:	d8c00817 	ldw	r3,32(sp)
    a08c:	18a9c83a 	sub	r20,r3,r2
    a090:	0005883a 	mov	r2,zero
    a094:	003d3706 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    a098:	00800044 	movi	r2,1
    a09c:	003dd006 	br	97e0 <__alt_mem_Flash_flash_data+0xf40097e0>
    a0a0:	d8c00217 	ldw	r3,8(sp)
    a0a4:	00800d84 	movi	r2,54
    a0a8:	dd400917 	ldw	r21,36(sp)
    a0ac:	10c5c83a 	sub	r2,r2,r3
    a0b0:	dd000817 	ldw	r20,32(sp)
    a0b4:	003d2f06 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    a0b8:	9029883a 	mov	r20,r18
    a0bc:	982b883a 	mov	r21,r19
    a0c0:	04400084 	movi	r17,2
    a0c4:	003bc606 	br	8fe0 <__alt_mem_Flash_flash_data+0xf4008fe0>
    a0c8:	d8800617 	ldw	r2,24(sp)
    a0cc:	103efc26 	beq	r2,zero,9cc0 <__alt_mem_Flash_flash_data+0xf4009cc0>
    a0d0:	d8c00c17 	ldw	r3,48(sp)
    a0d4:	00fc890e 	bge	zero,r3,92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    a0d8:	a80b883a 	mov	r5,r21
    a0dc:	a009883a 	mov	r4,r20
    a0e0:	000d883a 	mov	r6,zero
    a0e4:	01d00934 	movhi	r7,16420
    a0e8:	0012a000 	call	12a00 <__muldf3>
    a0ec:	89000044 	addi	r4,r17,1
    a0f0:	1029883a 	mov	r20,r2
    a0f4:	182b883a 	mov	r21,r3
    a0f8:	0013a7c0 	call	13a7c <__floatsidf>
    a0fc:	a009883a 	mov	r4,r20
    a100:	a80b883a 	mov	r5,r21
    a104:	100d883a 	mov	r6,r2
    a108:	180f883a 	mov	r7,r3
    a10c:	0012a000 	call	12a00 <__muldf3>
    a110:	1009883a 	mov	r4,r2
    a114:	180b883a 	mov	r5,r3
    a118:	000d883a 	mov	r6,zero
    a11c:	01d00734 	movhi	r7,16412
    a120:	00116540 	call	11654 <__adddf3>
    a124:	d9000517 	ldw	r4,20(sp)
    a128:	1023883a 	mov	r17,r2
    a12c:	00bf3034 	movhi	r2,64704
    a130:	213fffc4 	addi	r4,r4,-1
    a134:	1885883a 	add	r2,r3,r2
    a138:	d9001215 	stw	r4,72(sp)
    a13c:	d8800e15 	stw	r2,56(sp)
    a140:	da800c17 	ldw	r10,48(sp)
    a144:	003bc306 	br	9054 <__alt_mem_Flash_flash_data+0xf4009054>
    a148:	b039883a 	mov	fp,r22
    a14c:	01000e44 	movi	r4,57
    a150:	8825883a 	mov	r18,r17
    a154:	9dc00044 	addi	r23,r19,1
    a158:	99000005 	stb	r4,0(r19)
    a15c:	a023883a 	mov	r17,r20
    a160:	003dae06 	br	981c <__alt_mem_Flash_flash_data+0xf400981c>
    a164:	d9800e17 	ldw	r6,56(sp)
    a168:	d9c01117 	ldw	r7,68(sp)
    a16c:	0009883a 	mov	r4,zero
    a170:	014ff834 	movhi	r5,16352
    a174:	da001715 	stw	r8,92(sp)
    a178:	da401515 	stw	r9,84(sp)
    a17c:	00131240 	call	13124 <__subdf3>
    a180:	da001717 	ldw	r8,92(sp)
    a184:	da401517 	ldw	r9,84(sp)
    a188:	1009883a 	mov	r4,r2
    a18c:	180b883a 	mov	r5,r3
    a190:	400d883a 	mov	r6,r8
    a194:	480f883a 	mov	r7,r9
    a198:	00128400 	call	12840 <__gedf2>
    a19c:	00bc570e 	bge	zero,r2,92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    a1a0:	01000c04 	movi	r4,48
    a1a4:	00000106 	br	a1ac <_dtoa_r+0x1624>
    a1a8:	102f883a 	mov	r23,r2
    a1ac:	b8bfffc4 	addi	r2,r23,-1
    a1b0:	10c00007 	ldb	r3,0(r2)
    a1b4:	193ffc26 	beq	r3,r4,a1a8 <__alt_mem_Flash_flash_data+0xf400a1a8>
    a1b8:	d9801217 	ldw	r6,72(sp)
    a1bc:	d9800515 	stw	r6,20(sp)
    a1c0:	003c1f06 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    a1c4:	d8801217 	ldw	r2,72(sp)
    a1c8:	dc001117 	ldw	r16,68(sp)
    a1cc:	d8800515 	stw	r2,20(sp)
    a1d0:	003cc906 	br	94f8 <__alt_mem_Flash_flash_data+0xf40094f8>
    a1d4:	dd801317 	ldw	r22,76(sp)
    a1d8:	dc001117 	ldw	r16,68(sp)
    a1dc:	dcc01417 	ldw	r19,80(sp)
    a1e0:	dc801017 	ldw	r18,64(sp)
    a1e4:	003c4506 	br	92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    a1e8:	103e5d1e 	bne	r2,zero,9b60 <__alt_mem_Flash_flash_data+0xf4009b60>
    a1ec:	4080004c 	andi	r2,r8,1
    a1f0:	103e5b26 	beq	r2,zero,9b60 <__alt_mem_Flash_flash_data+0xf4009b60>
    a1f4:	003e5706 	br	9b54 <__alt_mem_Flash_flash_data+0xf4009b54>
    a1f8:	d8c00317 	ldw	r3,12(sp)
    a1fc:	00800084 	movi	r2,2
    a200:	10c00a16 	blt	r2,r3,a22c <_dtoa_r+0x16a4>
    a204:	d9000c17 	ldw	r4,48(sp)
    a208:	003e8306 	br	9c18 <__alt_mem_Flash_flash_data+0xf4009c18>
    a20c:	04400084 	movi	r17,2
    a210:	003b7306 	br	8fe0 <__alt_mem_Flash_flash_data+0xf4008fe0>
    a214:	d9801217 	ldw	r6,72(sp)
    a218:	d9800515 	stw	r6,20(sp)
    a21c:	003cb606 	br	94f8 <__alt_mem_Flash_flash_data+0xf40094f8>
    a220:	d9001217 	ldw	r4,72(sp)
    a224:	d9000515 	stw	r4,20(sp)
    a228:	003c0506 	br	9240 <__alt_mem_Flash_flash_data+0xf4009240>
    a22c:	d9800c17 	ldw	r6,48(sp)
    a230:	d9800615 	stw	r6,24(sp)
    a234:	003e8306 	br	9c44 <__alt_mem_Flash_flash_data+0xf4009c44>
    a238:	d9800317 	ldw	r6,12(sp)
    a23c:	00800084 	movi	r2,2
    a240:	11800216 	blt	r2,r6,a24c <_dtoa_r+0x16c4>
    a244:	d8800c17 	ldw	r2,48(sp)
    a248:	003da606 	br	98e4 <__alt_mem_Flash_flash_data+0xf40098e4>
    a24c:	d8800c17 	ldw	r2,48(sp)
    a250:	d8800615 	stw	r2,24(sp)
    a254:	003e7b06 	br	9c44 <__alt_mem_Flash_flash_data+0xf4009c44>
    a258:	05000044 	movi	r20,1
    a25c:	003b0506 	br	8e74 <__alt_mem_Flash_flash_data+0xf4008e74>
    a260:	8009883a 	mov	r4,r16
    a264:	80001115 	stw	zero,68(r16)
    a268:	000b883a 	mov	r5,zero
    a26c:	000c0fc0 	call	c0fc <_Balloc>
    a270:	d8800715 	stw	r2,28(sp)
    a274:	d8c00717 	ldw	r3,28(sp)
    a278:	00bfffc4 	movi	r2,-1
    a27c:	01000044 	movi	r4,1
    a280:	d8800c15 	stw	r2,48(sp)
    a284:	80c01015 	stw	r3,64(r16)
    a288:	d9000b15 	stw	r4,44(sp)
    a28c:	d8800615 	stw	r2,24(sp)
    a290:	d8002215 	stw	zero,136(sp)
    a294:	003c1906 	br	92fc <__alt_mem_Flash_flash_data+0xf40092fc>
    a298:	193d2926 	beq	r3,r4,9740 <__alt_mem_Flash_flash_data+0xf4009740>
    a29c:	00c00f04 	movi	r3,60
    a2a0:	1885c83a 	sub	r2,r3,r2
    a2a4:	003d7b06 	br	9894 <__alt_mem_Flash_flash_data+0xf4009894>
    a2a8:	000b883a 	mov	r5,zero
    a2ac:	003b1006 	br	8ef0 <__alt_mem_Flash_flash_data+0xf4008ef0>

0000a2b0 <__sflush_r>:
    a2b0:	2880030b 	ldhu	r2,12(r5)
    a2b4:	defffb04 	addi	sp,sp,-20
    a2b8:	dcc00315 	stw	r19,12(sp)
    a2bc:	dc400115 	stw	r17,4(sp)
    a2c0:	dfc00415 	stw	ra,16(sp)
    a2c4:	dc800215 	stw	r18,8(sp)
    a2c8:	dc000015 	stw	r16,0(sp)
    a2cc:	10c0020c 	andi	r3,r2,8
    a2d0:	2823883a 	mov	r17,r5
    a2d4:	2027883a 	mov	r19,r4
    a2d8:	1800311e 	bne	r3,zero,a3a0 <__sflush_r+0xf0>
    a2dc:	28c00117 	ldw	r3,4(r5)
    a2e0:	10820014 	ori	r2,r2,2048
    a2e4:	2880030d 	sth	r2,12(r5)
    a2e8:	00c04b0e 	bge	zero,r3,a418 <__sflush_r+0x168>
    a2ec:	8a000a17 	ldw	r8,40(r17)
    a2f0:	40002326 	beq	r8,zero,a380 <__sflush_r+0xd0>
    a2f4:	9c000017 	ldw	r16,0(r19)
    a2f8:	10c4000c 	andi	r3,r2,4096
    a2fc:	98000015 	stw	zero,0(r19)
    a300:	18004826 	beq	r3,zero,a424 <__sflush_r+0x174>
    a304:	89801417 	ldw	r6,80(r17)
    a308:	10c0010c 	andi	r3,r2,4
    a30c:	18000626 	beq	r3,zero,a328 <__sflush_r+0x78>
    a310:	88c00117 	ldw	r3,4(r17)
    a314:	88800c17 	ldw	r2,48(r17)
    a318:	30cdc83a 	sub	r6,r6,r3
    a31c:	10000226 	beq	r2,zero,a328 <__sflush_r+0x78>
    a320:	88800f17 	ldw	r2,60(r17)
    a324:	308dc83a 	sub	r6,r6,r2
    a328:	89400717 	ldw	r5,28(r17)
    a32c:	9809883a 	mov	r4,r19
    a330:	000f883a 	mov	r7,zero
    a334:	403ee83a 	callr	r8
    a338:	00ffffc4 	movi	r3,-1
    a33c:	10c04426 	beq	r2,r3,a450 <__sflush_r+0x1a0>
    a340:	88c0030b 	ldhu	r3,12(r17)
    a344:	89000417 	ldw	r4,16(r17)
    a348:	88000115 	stw	zero,4(r17)
    a34c:	197dffcc 	andi	r5,r3,63487
    a350:	8940030d 	sth	r5,12(r17)
    a354:	89000015 	stw	r4,0(r17)
    a358:	18c4000c 	andi	r3,r3,4096
    a35c:	18002c1e 	bne	r3,zero,a410 <__sflush_r+0x160>
    a360:	89400c17 	ldw	r5,48(r17)
    a364:	9c000015 	stw	r16,0(r19)
    a368:	28000526 	beq	r5,zero,a380 <__sflush_r+0xd0>
    a36c:	88801004 	addi	r2,r17,64
    a370:	28800226 	beq	r5,r2,a37c <__sflush_r+0xcc>
    a374:	9809883a 	mov	r4,r19
    a378:	000aa080 	call	aa08 <_free_r>
    a37c:	88000c15 	stw	zero,48(r17)
    a380:	0005883a 	mov	r2,zero
    a384:	dfc00417 	ldw	ra,16(sp)
    a388:	dcc00317 	ldw	r19,12(sp)
    a38c:	dc800217 	ldw	r18,8(sp)
    a390:	dc400117 	ldw	r17,4(sp)
    a394:	dc000017 	ldw	r16,0(sp)
    a398:	dec00504 	addi	sp,sp,20
    a39c:	f800283a 	ret
    a3a0:	2c800417 	ldw	r18,16(r5)
    a3a4:	903ff626 	beq	r18,zero,a380 <__alt_mem_Flash_flash_data+0xf400a380>
    a3a8:	2c000017 	ldw	r16,0(r5)
    a3ac:	108000cc 	andi	r2,r2,3
    a3b0:	2c800015 	stw	r18,0(r5)
    a3b4:	84a1c83a 	sub	r16,r16,r18
    a3b8:	1000131e 	bne	r2,zero,a408 <__sflush_r+0x158>
    a3bc:	28800517 	ldw	r2,20(r5)
    a3c0:	88800215 	stw	r2,8(r17)
    a3c4:	04000316 	blt	zero,r16,a3d4 <__sflush_r+0x124>
    a3c8:	003fed06 	br	a380 <__alt_mem_Flash_flash_data+0xf400a380>
    a3cc:	90a5883a 	add	r18,r18,r2
    a3d0:	043feb0e 	bge	zero,r16,a380 <__alt_mem_Flash_flash_data+0xf400a380>
    a3d4:	88800917 	ldw	r2,36(r17)
    a3d8:	89400717 	ldw	r5,28(r17)
    a3dc:	800f883a 	mov	r7,r16
    a3e0:	900d883a 	mov	r6,r18
    a3e4:	9809883a 	mov	r4,r19
    a3e8:	103ee83a 	callr	r2
    a3ec:	80a1c83a 	sub	r16,r16,r2
    a3f0:	00bff616 	blt	zero,r2,a3cc <__alt_mem_Flash_flash_data+0xf400a3cc>
    a3f4:	88c0030b 	ldhu	r3,12(r17)
    a3f8:	00bfffc4 	movi	r2,-1
    a3fc:	18c01014 	ori	r3,r3,64
    a400:	88c0030d 	sth	r3,12(r17)
    a404:	003fdf06 	br	a384 <__alt_mem_Flash_flash_data+0xf400a384>
    a408:	0005883a 	mov	r2,zero
    a40c:	003fec06 	br	a3c0 <__alt_mem_Flash_flash_data+0xf400a3c0>
    a410:	88801415 	stw	r2,80(r17)
    a414:	003fd206 	br	a360 <__alt_mem_Flash_flash_data+0xf400a360>
    a418:	28c00f17 	ldw	r3,60(r5)
    a41c:	00ffb316 	blt	zero,r3,a2ec <__alt_mem_Flash_flash_data+0xf400a2ec>
    a420:	003fd706 	br	a380 <__alt_mem_Flash_flash_data+0xf400a380>
    a424:	89400717 	ldw	r5,28(r17)
    a428:	000d883a 	mov	r6,zero
    a42c:	9809883a 	mov	r4,r19
    a430:	01c00044 	movi	r7,1
    a434:	403ee83a 	callr	r8
    a438:	100d883a 	mov	r6,r2
    a43c:	00bfffc4 	movi	r2,-1
    a440:	30801426 	beq	r6,r2,a494 <__sflush_r+0x1e4>
    a444:	8880030b 	ldhu	r2,12(r17)
    a448:	8a000a17 	ldw	r8,40(r17)
    a44c:	003fae06 	br	a308 <__alt_mem_Flash_flash_data+0xf400a308>
    a450:	98c00017 	ldw	r3,0(r19)
    a454:	183fba26 	beq	r3,zero,a340 <__alt_mem_Flash_flash_data+0xf400a340>
    a458:	01000744 	movi	r4,29
    a45c:	19000626 	beq	r3,r4,a478 <__sflush_r+0x1c8>
    a460:	01000584 	movi	r4,22
    a464:	19000426 	beq	r3,r4,a478 <__sflush_r+0x1c8>
    a468:	88c0030b 	ldhu	r3,12(r17)
    a46c:	18c01014 	ori	r3,r3,64
    a470:	88c0030d 	sth	r3,12(r17)
    a474:	003fc306 	br	a384 <__alt_mem_Flash_flash_data+0xf400a384>
    a478:	8880030b 	ldhu	r2,12(r17)
    a47c:	88c00417 	ldw	r3,16(r17)
    a480:	88000115 	stw	zero,4(r17)
    a484:	10bdffcc 	andi	r2,r2,63487
    a488:	8880030d 	sth	r2,12(r17)
    a48c:	88c00015 	stw	r3,0(r17)
    a490:	003fb306 	br	a360 <__alt_mem_Flash_flash_data+0xf400a360>
    a494:	98800017 	ldw	r2,0(r19)
    a498:	103fea26 	beq	r2,zero,a444 <__alt_mem_Flash_flash_data+0xf400a444>
    a49c:	00c00744 	movi	r3,29
    a4a0:	10c00226 	beq	r2,r3,a4ac <__sflush_r+0x1fc>
    a4a4:	00c00584 	movi	r3,22
    a4a8:	10ffd21e 	bne	r2,r3,a3f4 <__alt_mem_Flash_flash_data+0xf400a3f4>
    a4ac:	9c000015 	stw	r16,0(r19)
    a4b0:	0005883a 	mov	r2,zero
    a4b4:	003fb306 	br	a384 <__alt_mem_Flash_flash_data+0xf400a384>

0000a4b8 <_fflush_r>:
    a4b8:	defffd04 	addi	sp,sp,-12
    a4bc:	dc000115 	stw	r16,4(sp)
    a4c0:	dfc00215 	stw	ra,8(sp)
    a4c4:	2021883a 	mov	r16,r4
    a4c8:	20000226 	beq	r4,zero,a4d4 <_fflush_r+0x1c>
    a4cc:	20800e17 	ldw	r2,56(r4)
    a4d0:	10000c26 	beq	r2,zero,a504 <_fflush_r+0x4c>
    a4d4:	2880030f 	ldh	r2,12(r5)
    a4d8:	1000051e 	bne	r2,zero,a4f0 <_fflush_r+0x38>
    a4dc:	0005883a 	mov	r2,zero
    a4e0:	dfc00217 	ldw	ra,8(sp)
    a4e4:	dc000117 	ldw	r16,4(sp)
    a4e8:	dec00304 	addi	sp,sp,12
    a4ec:	f800283a 	ret
    a4f0:	8009883a 	mov	r4,r16
    a4f4:	dfc00217 	ldw	ra,8(sp)
    a4f8:	dc000117 	ldw	r16,4(sp)
    a4fc:	dec00304 	addi	sp,sp,12
    a500:	000a2b01 	jmpi	a2b0 <__sflush_r>
    a504:	d9400015 	stw	r5,0(sp)
    a508:	000a8940 	call	a894 <__sinit>
    a50c:	d9400017 	ldw	r5,0(sp)
    a510:	003ff006 	br	a4d4 <__alt_mem_Flash_flash_data+0xf400a4d4>

0000a514 <fflush>:
    a514:	20000526 	beq	r4,zero,a52c <fflush+0x18>
    a518:	008000b4 	movhi	r2,2
    a51c:	109fc904 	addi	r2,r2,32548
    a520:	200b883a 	mov	r5,r4
    a524:	11000017 	ldw	r4,0(r2)
    a528:	000a4b81 	jmpi	a4b8 <_fflush_r>
    a52c:	008000b4 	movhi	r2,2
    a530:	109fc804 	addi	r2,r2,32544
    a534:	11000017 	ldw	r4,0(r2)
    a538:	01400074 	movhi	r5,1
    a53c:	29692e04 	addi	r5,r5,-23368
    a540:	000b27c1 	jmpi	b27c <_fwalk_reent>

0000a544 <__fp_lock>:
    a544:	0005883a 	mov	r2,zero
    a548:	f800283a 	ret

0000a54c <__fp_unlock>:
    a54c:	0005883a 	mov	r2,zero
    a550:	f800283a 	ret

0000a554 <_cleanup_r>:
    a554:	01400074 	movhi	r5,1
    a558:	2940ea04 	addi	r5,r5,936
    a55c:	000b27c1 	jmpi	b27c <_fwalk_reent>

0000a560 <__sinit.part.1>:
    a560:	defff704 	addi	sp,sp,-36
    a564:	00c00074 	movhi	r3,1
    a568:	dfc00815 	stw	ra,32(sp)
    a56c:	ddc00715 	stw	r23,28(sp)
    a570:	dd800615 	stw	r22,24(sp)
    a574:	dd400515 	stw	r21,20(sp)
    a578:	dd000415 	stw	r20,16(sp)
    a57c:	dcc00315 	stw	r19,12(sp)
    a580:	dc800215 	stw	r18,8(sp)
    a584:	dc400115 	stw	r17,4(sp)
    a588:	dc000015 	stw	r16,0(sp)
    a58c:	18e95504 	addi	r3,r3,-23212
    a590:	24000117 	ldw	r16,4(r4)
    a594:	20c00f15 	stw	r3,60(r4)
    a598:	2080bb04 	addi	r2,r4,748
    a59c:	00c000c4 	movi	r3,3
    a5a0:	20c0b915 	stw	r3,740(r4)
    a5a4:	2080ba15 	stw	r2,744(r4)
    a5a8:	2000b815 	stw	zero,736(r4)
    a5ac:	05c00204 	movi	r23,8
    a5b0:	00800104 	movi	r2,4
    a5b4:	2025883a 	mov	r18,r4
    a5b8:	b80d883a 	mov	r6,r23
    a5bc:	81001704 	addi	r4,r16,92
    a5c0:	000b883a 	mov	r5,zero
    a5c4:	80000015 	stw	zero,0(r16)
    a5c8:	80000115 	stw	zero,4(r16)
    a5cc:	80000215 	stw	zero,8(r16)
    a5d0:	8080030d 	sth	r2,12(r16)
    a5d4:	80001915 	stw	zero,100(r16)
    a5d8:	8000038d 	sth	zero,14(r16)
    a5dc:	80000415 	stw	zero,16(r16)
    a5e0:	80000515 	stw	zero,20(r16)
    a5e4:	80000615 	stw	zero,24(r16)
    a5e8:	00043980 	call	4398 <memset>
    a5ec:	05800074 	movhi	r22,1
    a5f0:	94400217 	ldw	r17,8(r18)
    a5f4:	05400074 	movhi	r21,1
    a5f8:	05000074 	movhi	r20,1
    a5fc:	04c00074 	movhi	r19,1
    a600:	b5b60e04 	addi	r22,r22,-10184
    a604:	ad762504 	addi	r21,r21,-10092
    a608:	a5364404 	addi	r20,r20,-9968
    a60c:	9cf65b04 	addi	r19,r19,-9876
    a610:	85800815 	stw	r22,32(r16)
    a614:	85400915 	stw	r21,36(r16)
    a618:	85000a15 	stw	r20,40(r16)
    a61c:	84c00b15 	stw	r19,44(r16)
    a620:	84000715 	stw	r16,28(r16)
    a624:	00800284 	movi	r2,10
    a628:	8880030d 	sth	r2,12(r17)
    a62c:	00800044 	movi	r2,1
    a630:	89001704 	addi	r4,r17,92
    a634:	b80d883a 	mov	r6,r23
    a638:	000b883a 	mov	r5,zero
    a63c:	88000015 	stw	zero,0(r17)
    a640:	88000115 	stw	zero,4(r17)
    a644:	88000215 	stw	zero,8(r17)
    a648:	88001915 	stw	zero,100(r17)
    a64c:	8880038d 	sth	r2,14(r17)
    a650:	88000415 	stw	zero,16(r17)
    a654:	88000515 	stw	zero,20(r17)
    a658:	88000615 	stw	zero,24(r17)
    a65c:	00043980 	call	4398 <memset>
    a660:	94000317 	ldw	r16,12(r18)
    a664:	00800484 	movi	r2,18
    a668:	8c400715 	stw	r17,28(r17)
    a66c:	8d800815 	stw	r22,32(r17)
    a670:	8d400915 	stw	r21,36(r17)
    a674:	8d000a15 	stw	r20,40(r17)
    a678:	8cc00b15 	stw	r19,44(r17)
    a67c:	8080030d 	sth	r2,12(r16)
    a680:	00800084 	movi	r2,2
    a684:	80000015 	stw	zero,0(r16)
    a688:	80000115 	stw	zero,4(r16)
    a68c:	80000215 	stw	zero,8(r16)
    a690:	80001915 	stw	zero,100(r16)
    a694:	8080038d 	sth	r2,14(r16)
    a698:	80000415 	stw	zero,16(r16)
    a69c:	80000515 	stw	zero,20(r16)
    a6a0:	80000615 	stw	zero,24(r16)
    a6a4:	81001704 	addi	r4,r16,92
    a6a8:	000b883a 	mov	r5,zero
    a6ac:	b80d883a 	mov	r6,r23
    a6b0:	00043980 	call	4398 <memset>
    a6b4:	00800044 	movi	r2,1
    a6b8:	84000715 	stw	r16,28(r16)
    a6bc:	85800815 	stw	r22,32(r16)
    a6c0:	85400915 	stw	r21,36(r16)
    a6c4:	85000a15 	stw	r20,40(r16)
    a6c8:	84c00b15 	stw	r19,44(r16)
    a6cc:	90800e15 	stw	r2,56(r18)
    a6d0:	dfc00817 	ldw	ra,32(sp)
    a6d4:	ddc00717 	ldw	r23,28(sp)
    a6d8:	dd800617 	ldw	r22,24(sp)
    a6dc:	dd400517 	ldw	r21,20(sp)
    a6e0:	dd000417 	ldw	r20,16(sp)
    a6e4:	dcc00317 	ldw	r19,12(sp)
    a6e8:	dc800217 	ldw	r18,8(sp)
    a6ec:	dc400117 	ldw	r17,4(sp)
    a6f0:	dc000017 	ldw	r16,0(sp)
    a6f4:	dec00904 	addi	sp,sp,36
    a6f8:	f800283a 	ret

0000a6fc <__sfmoreglue>:
    a6fc:	defffc04 	addi	sp,sp,-16
    a700:	dc400115 	stw	r17,4(sp)
    a704:	2c7fffc4 	addi	r17,r5,-1
    a708:	8c401a24 	muli	r17,r17,104
    a70c:	dc800215 	stw	r18,8(sp)
    a710:	2825883a 	mov	r18,r5
    a714:	89401d04 	addi	r5,r17,116
    a718:	dc000015 	stw	r16,0(sp)
    a71c:	dfc00315 	stw	ra,12(sp)
    a720:	000b5d80 	call	b5d8 <_malloc_r>
    a724:	1021883a 	mov	r16,r2
    a728:	10000726 	beq	r2,zero,a748 <__sfmoreglue+0x4c>
    a72c:	11000304 	addi	r4,r2,12
    a730:	10000015 	stw	zero,0(r2)
    a734:	14800115 	stw	r18,4(r2)
    a738:	11000215 	stw	r4,8(r2)
    a73c:	000b883a 	mov	r5,zero
    a740:	89801a04 	addi	r6,r17,104
    a744:	00043980 	call	4398 <memset>
    a748:	8005883a 	mov	r2,r16
    a74c:	dfc00317 	ldw	ra,12(sp)
    a750:	dc800217 	ldw	r18,8(sp)
    a754:	dc400117 	ldw	r17,4(sp)
    a758:	dc000017 	ldw	r16,0(sp)
    a75c:	dec00404 	addi	sp,sp,16
    a760:	f800283a 	ret

0000a764 <__sfp>:
    a764:	008000b4 	movhi	r2,2
    a768:	defffb04 	addi	sp,sp,-20
    a76c:	109fc804 	addi	r2,r2,32544
    a770:	dc800215 	stw	r18,8(sp)
    a774:	14800017 	ldw	r18,0(r2)
    a778:	dcc00315 	stw	r19,12(sp)
    a77c:	dfc00415 	stw	ra,16(sp)
    a780:	90800e17 	ldw	r2,56(r18)
    a784:	dc400115 	stw	r17,4(sp)
    a788:	dc000015 	stw	r16,0(sp)
    a78c:	2027883a 	mov	r19,r4
    a790:	1000021e 	bne	r2,zero,a79c <__sfp+0x38>
    a794:	9009883a 	mov	r4,r18
    a798:	000a5600 	call	a560 <__sinit.part.1>
    a79c:	9480b804 	addi	r18,r18,736
    a7a0:	047fffc4 	movi	r17,-1
    a7a4:	91400117 	ldw	r5,4(r18)
    a7a8:	94000217 	ldw	r16,8(r18)
    a7ac:	297fffc4 	addi	r5,r5,-1
    a7b0:	28000a16 	blt	r5,zero,a7dc <__sfp+0x78>
    a7b4:	8080030f 	ldh	r2,12(r16)
    a7b8:	10000c26 	beq	r2,zero,a7ec <__sfp+0x88>
    a7bc:	80c01d04 	addi	r3,r16,116
    a7c0:	00000206 	br	a7cc <__sfp+0x68>
    a7c4:	18bfe60f 	ldh	r2,-104(r3)
    a7c8:	10000826 	beq	r2,zero,a7ec <__sfp+0x88>
    a7cc:	297fffc4 	addi	r5,r5,-1
    a7d0:	1c3ffd04 	addi	r16,r3,-12
    a7d4:	18c01a04 	addi	r3,r3,104
    a7d8:	2c7ffa1e 	bne	r5,r17,a7c4 <__alt_mem_Flash_flash_data+0xf400a7c4>
    a7dc:	90800017 	ldw	r2,0(r18)
    a7e0:	10001d26 	beq	r2,zero,a858 <__sfp+0xf4>
    a7e4:	1025883a 	mov	r18,r2
    a7e8:	003fee06 	br	a7a4 <__alt_mem_Flash_flash_data+0xf400a7a4>
    a7ec:	00bfffc4 	movi	r2,-1
    a7f0:	8080038d 	sth	r2,14(r16)
    a7f4:	00800044 	movi	r2,1
    a7f8:	8080030d 	sth	r2,12(r16)
    a7fc:	80001915 	stw	zero,100(r16)
    a800:	80000015 	stw	zero,0(r16)
    a804:	80000215 	stw	zero,8(r16)
    a808:	80000115 	stw	zero,4(r16)
    a80c:	80000415 	stw	zero,16(r16)
    a810:	80000515 	stw	zero,20(r16)
    a814:	80000615 	stw	zero,24(r16)
    a818:	81001704 	addi	r4,r16,92
    a81c:	000b883a 	mov	r5,zero
    a820:	01800204 	movi	r6,8
    a824:	00043980 	call	4398 <memset>
    a828:	8005883a 	mov	r2,r16
    a82c:	80000c15 	stw	zero,48(r16)
    a830:	80000d15 	stw	zero,52(r16)
    a834:	80001115 	stw	zero,68(r16)
    a838:	80001215 	stw	zero,72(r16)
    a83c:	dfc00417 	ldw	ra,16(sp)
    a840:	dcc00317 	ldw	r19,12(sp)
    a844:	dc800217 	ldw	r18,8(sp)
    a848:	dc400117 	ldw	r17,4(sp)
    a84c:	dc000017 	ldw	r16,0(sp)
    a850:	dec00504 	addi	sp,sp,20
    a854:	f800283a 	ret
    a858:	9809883a 	mov	r4,r19
    a85c:	01400104 	movi	r5,4
    a860:	000a6fc0 	call	a6fc <__sfmoreglue>
    a864:	90800015 	stw	r2,0(r18)
    a868:	103fde1e 	bne	r2,zero,a7e4 <__alt_mem_Flash_flash_data+0xf400a7e4>
    a86c:	00800304 	movi	r2,12
    a870:	98800015 	stw	r2,0(r19)
    a874:	0005883a 	mov	r2,zero
    a878:	003ff006 	br	a83c <__alt_mem_Flash_flash_data+0xf400a83c>

0000a87c <_cleanup>:
    a87c:	008000b4 	movhi	r2,2
    a880:	109fc804 	addi	r2,r2,32544
    a884:	11000017 	ldw	r4,0(r2)
    a888:	01400074 	movhi	r5,1
    a88c:	2940ea04 	addi	r5,r5,936
    a890:	000b27c1 	jmpi	b27c <_fwalk_reent>

0000a894 <__sinit>:
    a894:	20800e17 	ldw	r2,56(r4)
    a898:	10000126 	beq	r2,zero,a8a0 <__sinit+0xc>
    a89c:	f800283a 	ret
    a8a0:	000a5601 	jmpi	a560 <__sinit.part.1>

0000a8a4 <__sfp_lock_acquire>:
    a8a4:	f800283a 	ret

0000a8a8 <__sfp_lock_release>:
    a8a8:	f800283a 	ret

0000a8ac <__sinit_lock_acquire>:
    a8ac:	f800283a 	ret

0000a8b0 <__sinit_lock_release>:
    a8b0:	f800283a 	ret

0000a8b4 <__fp_lock_all>:
    a8b4:	008000b4 	movhi	r2,2
    a8b8:	109fc904 	addi	r2,r2,32548
    a8bc:	11000017 	ldw	r4,0(r2)
    a8c0:	01400074 	movhi	r5,1
    a8c4:	29695104 	addi	r5,r5,-23228
    a8c8:	000b1b81 	jmpi	b1b8 <_fwalk>

0000a8cc <__fp_unlock_all>:
    a8cc:	008000b4 	movhi	r2,2
    a8d0:	109fc904 	addi	r2,r2,32548
    a8d4:	11000017 	ldw	r4,0(r2)
    a8d8:	01400074 	movhi	r5,1
    a8dc:	29695304 	addi	r5,r5,-23220
    a8e0:	000b1b81 	jmpi	b1b8 <_fwalk>

0000a8e4 <_malloc_trim_r>:
    a8e4:	defffb04 	addi	sp,sp,-20
    a8e8:	dcc00315 	stw	r19,12(sp)
    a8ec:	04c000b4 	movhi	r19,2
    a8f0:	dc800215 	stw	r18,8(sp)
    a8f4:	dc400115 	stw	r17,4(sp)
    a8f8:	dc000015 	stw	r16,0(sp)
    a8fc:	dfc00415 	stw	ra,16(sp)
    a900:	2821883a 	mov	r16,r5
    a904:	9cd95204 	addi	r19,r19,25928
    a908:	2025883a 	mov	r18,r4
    a90c:	00147300 	call	14730 <__malloc_lock>
    a910:	98800217 	ldw	r2,8(r19)
    a914:	14400117 	ldw	r17,4(r2)
    a918:	00bfff04 	movi	r2,-4
    a91c:	88a2703a 	and	r17,r17,r2
    a920:	8c21c83a 	sub	r16,r17,r16
    a924:	8403fbc4 	addi	r16,r16,4079
    a928:	8020d33a 	srli	r16,r16,12
    a92c:	0083ffc4 	movi	r2,4095
    a930:	843fffc4 	addi	r16,r16,-1
    a934:	8020933a 	slli	r16,r16,12
    a938:	1400060e 	bge	r2,r16,a954 <_malloc_trim_r+0x70>
    a93c:	9009883a 	mov	r4,r18
    a940:	000b883a 	mov	r5,zero
    a944:	000d7e40 	call	d7e4 <_sbrk_r>
    a948:	98c00217 	ldw	r3,8(r19)
    a94c:	1c47883a 	add	r3,r3,r17
    a950:	10c00a26 	beq	r2,r3,a97c <_malloc_trim_r+0x98>
    a954:	9009883a 	mov	r4,r18
    a958:	00148500 	call	14850 <__malloc_unlock>
    a95c:	0005883a 	mov	r2,zero
    a960:	dfc00417 	ldw	ra,16(sp)
    a964:	dcc00317 	ldw	r19,12(sp)
    a968:	dc800217 	ldw	r18,8(sp)
    a96c:	dc400117 	ldw	r17,4(sp)
    a970:	dc000017 	ldw	r16,0(sp)
    a974:	dec00504 	addi	sp,sp,20
    a978:	f800283a 	ret
    a97c:	9009883a 	mov	r4,r18
    a980:	040bc83a 	sub	r5,zero,r16
    a984:	000d7e40 	call	d7e4 <_sbrk_r>
    a988:	00ffffc4 	movi	r3,-1
    a98c:	10c00d26 	beq	r2,r3,a9c4 <_malloc_trim_r+0xe0>
    a990:	00c000f4 	movhi	r3,3
    a994:	18e83604 	addi	r3,r3,-24360
    a998:	18800017 	ldw	r2,0(r3)
    a99c:	99000217 	ldw	r4,8(r19)
    a9a0:	8c23c83a 	sub	r17,r17,r16
    a9a4:	8c400054 	ori	r17,r17,1
    a9a8:	1421c83a 	sub	r16,r2,r16
    a9ac:	24400115 	stw	r17,4(r4)
    a9b0:	9009883a 	mov	r4,r18
    a9b4:	1c000015 	stw	r16,0(r3)
    a9b8:	00148500 	call	14850 <__malloc_unlock>
    a9bc:	00800044 	movi	r2,1
    a9c0:	003fe706 	br	a960 <__alt_mem_Flash_flash_data+0xf400a960>
    a9c4:	9009883a 	mov	r4,r18
    a9c8:	000b883a 	mov	r5,zero
    a9cc:	000d7e40 	call	d7e4 <_sbrk_r>
    a9d0:	99000217 	ldw	r4,8(r19)
    a9d4:	014003c4 	movi	r5,15
    a9d8:	1107c83a 	sub	r3,r2,r4
    a9dc:	28ffdd0e 	bge	r5,r3,a954 <__alt_mem_Flash_flash_data+0xf400a954>
    a9e0:	014000b4 	movhi	r5,2
    a9e4:	295fcb04 	addi	r5,r5,32556
    a9e8:	29400017 	ldw	r5,0(r5)
    a9ec:	18c00054 	ori	r3,r3,1
    a9f0:	20c00115 	stw	r3,4(r4)
    a9f4:	00c000f4 	movhi	r3,3
    a9f8:	1145c83a 	sub	r2,r2,r5
    a9fc:	18e83604 	addi	r3,r3,-24360
    aa00:	18800015 	stw	r2,0(r3)
    aa04:	003fd306 	br	a954 <__alt_mem_Flash_flash_data+0xf400a954>

0000aa08 <_free_r>:
    aa08:	28004c26 	beq	r5,zero,ab3c <_free_r+0x134>
    aa0c:	defffd04 	addi	sp,sp,-12
    aa10:	dc400115 	stw	r17,4(sp)
    aa14:	dc000015 	stw	r16,0(sp)
    aa18:	2023883a 	mov	r17,r4
    aa1c:	2821883a 	mov	r16,r5
    aa20:	dfc00215 	stw	ra,8(sp)
    aa24:	00147300 	call	14730 <__malloc_lock>
    aa28:	813fff17 	ldw	r4,-4(r16)
    aa2c:	00bfff84 	movi	r2,-2
    aa30:	024000b4 	movhi	r9,2
    aa34:	81bffe04 	addi	r6,r16,-8
    aa38:	2084703a 	and	r2,r4,r2
    aa3c:	4a595204 	addi	r9,r9,25928
    aa40:	308b883a 	add	r5,r6,r2
    aa44:	2a000117 	ldw	r8,4(r5)
    aa48:	49c00217 	ldw	r7,8(r9)
    aa4c:	00ffff04 	movi	r3,-4
    aa50:	40c6703a 	and	r3,r8,r3
    aa54:	39405326 	beq	r7,r5,aba4 <_free_r+0x19c>
    aa58:	28c00115 	stw	r3,4(r5)
    aa5c:	2100004c 	andi	r4,r4,1
    aa60:	2000091e 	bne	r4,zero,aa88 <_free_r+0x80>
    aa64:	81fffe17 	ldw	r7,-8(r16)
    aa68:	4a000204 	addi	r8,r9,8
    aa6c:	31cdc83a 	sub	r6,r6,r7
    aa70:	31000217 	ldw	r4,8(r6)
    aa74:	11c5883a 	add	r2,r2,r7
    aa78:	22006126 	beq	r4,r8,ac00 <_free_r+0x1f8>
    aa7c:	31c00317 	ldw	r7,12(r6)
    aa80:	21c00315 	stw	r7,12(r4)
    aa84:	39000215 	stw	r4,8(r7)
    aa88:	28c9883a 	add	r4,r5,r3
    aa8c:	21c00117 	ldw	r7,4(r4)
    aa90:	39c0004c 	andi	r7,r7,1
    aa94:	38000d1e 	bne	r7,zero,aacc <_free_r+0xc4>
    aa98:	29000217 	ldw	r4,8(r5)
    aa9c:	10c5883a 	add	r2,r2,r3
    aaa0:	00c000b4 	movhi	r3,2
    aaa4:	18d95404 	addi	r3,r3,25936
    aaa8:	20c07526 	beq	r4,r3,ac80 <_free_r+0x278>
    aaac:	29c00317 	ldw	r7,12(r5)
    aab0:	11400054 	ori	r5,r2,1
    aab4:	3087883a 	add	r3,r6,r2
    aab8:	21c00315 	stw	r7,12(r4)
    aabc:	39000215 	stw	r4,8(r7)
    aac0:	31400115 	stw	r5,4(r6)
    aac4:	18800015 	stw	r2,0(r3)
    aac8:	00000406 	br	aadc <_free_r+0xd4>
    aacc:	10c00054 	ori	r3,r2,1
    aad0:	30c00115 	stw	r3,4(r6)
    aad4:	3087883a 	add	r3,r6,r2
    aad8:	18800015 	stw	r2,0(r3)
    aadc:	00c07fc4 	movi	r3,511
    aae0:	18801736 	bltu	r3,r2,ab40 <_free_r+0x138>
    aae4:	1004d0fa 	srli	r2,r2,3
    aae8:	01400044 	movi	r5,1
    aaec:	49000117 	ldw	r4,4(r9)
    aaf0:	1087883a 	add	r3,r2,r2
    aaf4:	18c7883a 	add	r3,r3,r3
    aaf8:	1005d0ba 	srai	r2,r2,2
    aafc:	18c7883a 	add	r3,r3,r3
    ab00:	1a47883a 	add	r3,r3,r9
    ab04:	19c00217 	ldw	r7,8(r3)
    ab08:	2884983a 	sll	r2,r5,r2
    ab0c:	30c00315 	stw	r3,12(r6)
    ab10:	31c00215 	stw	r7,8(r6)
    ab14:	1104b03a 	or	r2,r2,r4
    ab18:	19800215 	stw	r6,8(r3)
    ab1c:	48800115 	stw	r2,4(r9)
    ab20:	39800315 	stw	r6,12(r7)
    ab24:	8809883a 	mov	r4,r17
    ab28:	dfc00217 	ldw	ra,8(sp)
    ab2c:	dc400117 	ldw	r17,4(sp)
    ab30:	dc000017 	ldw	r16,0(sp)
    ab34:	dec00304 	addi	sp,sp,12
    ab38:	00148501 	jmpi	14850 <__malloc_unlock>
    ab3c:	f800283a 	ret
    ab40:	1006d27a 	srli	r3,r2,9
    ab44:	01000104 	movi	r4,4
    ab48:	20c04036 	bltu	r4,r3,ac4c <_free_r+0x244>
    ab4c:	1006d1ba 	srli	r3,r2,6
    ab50:	19400e04 	addi	r5,r3,56
    ab54:	2947883a 	add	r3,r5,r5
    ab58:	18c7883a 	add	r3,r3,r3
    ab5c:	18c7883a 	add	r3,r3,r3
    ab60:	1a49883a 	add	r4,r3,r9
    ab64:	20c00217 	ldw	r3,8(r4)
    ab68:	01c000b4 	movhi	r7,2
    ab6c:	39d95204 	addi	r7,r7,25928
    ab70:	19003b26 	beq	r3,r4,ac60 <_free_r+0x258>
    ab74:	01ffff04 	movi	r7,-4
    ab78:	19400117 	ldw	r5,4(r3)
    ab7c:	29ca703a 	and	r5,r5,r7
    ab80:	1140022e 	bgeu	r2,r5,ab8c <_free_r+0x184>
    ab84:	18c00217 	ldw	r3,8(r3)
    ab88:	20fffb1e 	bne	r4,r3,ab78 <__alt_mem_Flash_flash_data+0xf400ab78>
    ab8c:	18800317 	ldw	r2,12(r3)
    ab90:	30800315 	stw	r2,12(r6)
    ab94:	30c00215 	stw	r3,8(r6)
    ab98:	11800215 	stw	r6,8(r2)
    ab9c:	19800315 	stw	r6,12(r3)
    aba0:	003fe006 	br	ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    aba4:	2100004c 	andi	r4,r4,1
    aba8:	1885883a 	add	r2,r3,r2
    abac:	2000071e 	bne	r4,zero,abcc <_free_r+0x1c4>
    abb0:	817ffe17 	ldw	r5,-8(r16)
    abb4:	314dc83a 	sub	r6,r6,r5
    abb8:	30c00317 	ldw	r3,12(r6)
    abbc:	31000217 	ldw	r4,8(r6)
    abc0:	1145883a 	add	r2,r2,r5
    abc4:	20c00315 	stw	r3,12(r4)
    abc8:	19000215 	stw	r4,8(r3)
    abcc:	10c00054 	ori	r3,r2,1
    abd0:	30c00115 	stw	r3,4(r6)
    abd4:	00c000b4 	movhi	r3,2
    abd8:	18dfcc04 	addi	r3,r3,32560
    abdc:	18c00017 	ldw	r3,0(r3)
    abe0:	49800215 	stw	r6,8(r9)
    abe4:	10ffcf36 	bltu	r2,r3,ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    abe8:	008000f4 	movhi	r2,3
    abec:	10a7ee04 	addi	r2,r2,-24648
    abf0:	11400017 	ldw	r5,0(r2)
    abf4:	8809883a 	mov	r4,r17
    abf8:	000a8e40 	call	a8e4 <_malloc_trim_r>
    abfc:	003fc906 	br	ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    ac00:	28c9883a 	add	r4,r5,r3
    ac04:	21000117 	ldw	r4,4(r4)
    ac08:	2100004c 	andi	r4,r4,1
    ac0c:	20000a1e 	bne	r4,zero,ac38 <_free_r+0x230>
    ac10:	29000317 	ldw	r4,12(r5)
    ac14:	29400217 	ldw	r5,8(r5)
    ac18:	10c5883a 	add	r2,r2,r3
    ac1c:	10c00054 	ori	r3,r2,1
    ac20:	29000315 	stw	r4,12(r5)
    ac24:	21400215 	stw	r5,8(r4)
    ac28:	30c00115 	stw	r3,4(r6)
    ac2c:	308d883a 	add	r6,r6,r2
    ac30:	30800015 	stw	r2,0(r6)
    ac34:	003fbb06 	br	ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    ac38:	10c00054 	ori	r3,r2,1
    ac3c:	30c00115 	stw	r3,4(r6)
    ac40:	308d883a 	add	r6,r6,r2
    ac44:	30800015 	stw	r2,0(r6)
    ac48:	003fb606 	br	ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    ac4c:	01000504 	movi	r4,20
    ac50:	20c01436 	bltu	r4,r3,aca4 <_free_r+0x29c>
    ac54:	194016c4 	addi	r5,r3,91
    ac58:	2947883a 	add	r3,r5,r5
    ac5c:	003fbe06 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>
    ac60:	280bd0ba 	srai	r5,r5,2
    ac64:	00800044 	movi	r2,1
    ac68:	39000117 	ldw	r4,4(r7)
    ac6c:	114a983a 	sll	r5,r2,r5
    ac70:	1805883a 	mov	r2,r3
    ac74:	2908b03a 	or	r4,r5,r4
    ac78:	39000115 	stw	r4,4(r7)
    ac7c:	003fc406 	br	ab90 <__alt_mem_Flash_flash_data+0xf400ab90>
    ac80:	49800515 	stw	r6,20(r9)
    ac84:	49800415 	stw	r6,16(r9)
    ac88:	10c00054 	ori	r3,r2,1
    ac8c:	31000315 	stw	r4,12(r6)
    ac90:	31000215 	stw	r4,8(r6)
    ac94:	30c00115 	stw	r3,4(r6)
    ac98:	308d883a 	add	r6,r6,r2
    ac9c:	30800015 	stw	r2,0(r6)
    aca0:	003fa006 	br	ab24 <__alt_mem_Flash_flash_data+0xf400ab24>
    aca4:	01001504 	movi	r4,84
    aca8:	20c00436 	bltu	r4,r3,acbc <_free_r+0x2b4>
    acac:	1006d33a 	srli	r3,r2,12
    acb0:	19401b84 	addi	r5,r3,110
    acb4:	2947883a 	add	r3,r5,r5
    acb8:	003fa706 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>
    acbc:	01005504 	movi	r4,340
    acc0:	20c00436 	bltu	r4,r3,acd4 <_free_r+0x2cc>
    acc4:	1006d3fa 	srli	r3,r2,15
    acc8:	19401dc4 	addi	r5,r3,119
    accc:	2947883a 	add	r3,r5,r5
    acd0:	003fa106 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>
    acd4:	01015504 	movi	r4,1364
    acd8:	20c00436 	bltu	r4,r3,acec <_free_r+0x2e4>
    acdc:	1006d4ba 	srli	r3,r2,18
    ace0:	19401f04 	addi	r5,r3,124
    ace4:	2947883a 	add	r3,r5,r5
    ace8:	003f9b06 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>
    acec:	00c03f04 	movi	r3,252
    acf0:	01401f84 	movi	r5,126
    acf4:	003f9806 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>

0000acf8 <__sfvwrite_r>:
    acf8:	30800217 	ldw	r2,8(r6)
    acfc:	10006726 	beq	r2,zero,ae9c <__sfvwrite_r+0x1a4>
    ad00:	defff404 	addi	sp,sp,-48
    ad04:	dd000615 	stw	r20,24(sp)
    ad08:	2029883a 	mov	r20,r4
    ad0c:	2900030b 	ldhu	r4,12(r5)
    ad10:	ddc00915 	stw	r23,36(sp)
    ad14:	dc000215 	stw	r16,8(sp)
    ad18:	dfc00b15 	stw	ra,44(sp)
    ad1c:	df000a15 	stw	fp,40(sp)
    ad20:	dd800815 	stw	r22,32(sp)
    ad24:	dd400715 	stw	r21,28(sp)
    ad28:	dcc00515 	stw	r19,20(sp)
    ad2c:	dc800415 	stw	r18,16(sp)
    ad30:	dc400315 	stw	r17,12(sp)
    ad34:	2080020c 	andi	r2,r4,8
    ad38:	2821883a 	mov	r16,r5
    ad3c:	302f883a 	mov	r23,r6
    ad40:	10002726 	beq	r2,zero,ade0 <__sfvwrite_r+0xe8>
    ad44:	28800417 	ldw	r2,16(r5)
    ad48:	10002526 	beq	r2,zero,ade0 <__sfvwrite_r+0xe8>
    ad4c:	2080008c 	andi	r2,r4,2
    ad50:	bc400017 	ldw	r17,0(r23)
    ad54:	10002a26 	beq	r2,zero,ae00 <__sfvwrite_r+0x108>
    ad58:	05600034 	movhi	r21,32768
    ad5c:	0027883a 	mov	r19,zero
    ad60:	0025883a 	mov	r18,zero
    ad64:	ad7f0004 	addi	r21,r21,-1024
    ad68:	980d883a 	mov	r6,r19
    ad6c:	a009883a 	mov	r4,r20
    ad70:	90004626 	beq	r18,zero,ae8c <__sfvwrite_r+0x194>
    ad74:	900f883a 	mov	r7,r18
    ad78:	81400717 	ldw	r5,28(r16)
    ad7c:	ac80022e 	bgeu	r21,r18,ad88 <__sfvwrite_r+0x90>
    ad80:	01e00034 	movhi	r7,32768
    ad84:	39ff0004 	addi	r7,r7,-1024
    ad88:	80800917 	ldw	r2,36(r16)
    ad8c:	103ee83a 	callr	r2
    ad90:	0080520e 	bge	zero,r2,aedc <__sfvwrite_r+0x1e4>
    ad94:	b8c00217 	ldw	r3,8(r23)
    ad98:	98a7883a 	add	r19,r19,r2
    ad9c:	90a5c83a 	sub	r18,r18,r2
    ada0:	1885c83a 	sub	r2,r3,r2
    ada4:	b8800215 	stw	r2,8(r23)
    ada8:	103fef1e 	bne	r2,zero,ad68 <__alt_mem_Flash_flash_data+0xf400ad68>
    adac:	0005883a 	mov	r2,zero
    adb0:	dfc00b17 	ldw	ra,44(sp)
    adb4:	df000a17 	ldw	fp,40(sp)
    adb8:	ddc00917 	ldw	r23,36(sp)
    adbc:	dd800817 	ldw	r22,32(sp)
    adc0:	dd400717 	ldw	r21,28(sp)
    adc4:	dd000617 	ldw	r20,24(sp)
    adc8:	dcc00517 	ldw	r19,20(sp)
    adcc:	dc800417 	ldw	r18,16(sp)
    add0:	dc400317 	ldw	r17,12(sp)
    add4:	dc000217 	ldw	r16,8(sp)
    add8:	dec00c04 	addi	sp,sp,48
    addc:	f800283a 	ret
    ade0:	a009883a 	mov	r4,r20
    ade4:	800b883a 	mov	r5,r16
    ade8:	00088340 	call	8834 <__swsetup_r>
    adec:	1000ec1e 	bne	r2,zero,b1a0 <__sfvwrite_r+0x4a8>
    adf0:	8100030b 	ldhu	r4,12(r16)
    adf4:	bc400017 	ldw	r17,0(r23)
    adf8:	2080008c 	andi	r2,r4,2
    adfc:	103fd61e 	bne	r2,zero,ad58 <__alt_mem_Flash_flash_data+0xf400ad58>
    ae00:	2080004c 	andi	r2,r4,1
    ae04:	10003a1e 	bne	r2,zero,aef0 <__sfvwrite_r+0x1f8>
    ae08:	0039883a 	mov	fp,zero
    ae0c:	0025883a 	mov	r18,zero
    ae10:	90001a26 	beq	r18,zero,ae7c <__sfvwrite_r+0x184>
    ae14:	2080800c 	andi	r2,r4,512
    ae18:	85800217 	ldw	r22,8(r16)
    ae1c:	10007626 	beq	r2,zero,aff8 <__sfvwrite_r+0x300>
    ae20:	b027883a 	mov	r19,r22
    ae24:	95809436 	bltu	r18,r22,b078 <__sfvwrite_r+0x380>
    ae28:	2081200c 	andi	r2,r4,1152
    ae2c:	10009f1e 	bne	r2,zero,b0ac <__sfvwrite_r+0x3b4>
    ae30:	81000017 	ldw	r4,0(r16)
    ae34:	e00b883a 	mov	r5,fp
    ae38:	980d883a 	mov	r6,r19
    ae3c:	000bfa00 	call	bfa0 <memmove>
    ae40:	81000217 	ldw	r4,8(r16)
    ae44:	81400017 	ldw	r5,0(r16)
    ae48:	9005883a 	mov	r2,r18
    ae4c:	2587c83a 	sub	r3,r4,r22
    ae50:	2ce7883a 	add	r19,r5,r19
    ae54:	80c00215 	stw	r3,8(r16)
    ae58:	84c00015 	stw	r19,0(r16)
    ae5c:	b8c00217 	ldw	r3,8(r23)
    ae60:	e0b9883a 	add	fp,fp,r2
    ae64:	90a5c83a 	sub	r18,r18,r2
    ae68:	1885c83a 	sub	r2,r3,r2
    ae6c:	b8800215 	stw	r2,8(r23)
    ae70:	103fce26 	beq	r2,zero,adac <__alt_mem_Flash_flash_data+0xf400adac>
    ae74:	8100030b 	ldhu	r4,12(r16)
    ae78:	903fe61e 	bne	r18,zero,ae14 <__alt_mem_Flash_flash_data+0xf400ae14>
    ae7c:	8f000017 	ldw	fp,0(r17)
    ae80:	8c800117 	ldw	r18,4(r17)
    ae84:	8c400204 	addi	r17,r17,8
    ae88:	003fe106 	br	ae10 <__alt_mem_Flash_flash_data+0xf400ae10>
    ae8c:	8cc00017 	ldw	r19,0(r17)
    ae90:	8c800117 	ldw	r18,4(r17)
    ae94:	8c400204 	addi	r17,r17,8
    ae98:	003fb306 	br	ad68 <__alt_mem_Flash_flash_data+0xf400ad68>
    ae9c:	0005883a 	mov	r2,zero
    aea0:	f800283a 	ret
    aea4:	00a00034 	movhi	r2,32768
    aea8:	10bfffc4 	addi	r2,r2,-1
    aeac:	9009883a 	mov	r4,r18
    aeb0:	1480012e 	bgeu	r2,r18,aeb8 <__sfvwrite_r+0x1c0>
    aeb4:	1009883a 	mov	r4,r2
    aeb8:	980b883a 	mov	r5,r19
    aebc:	00115940 	call	11594 <__divsi3>
    aec0:	81400717 	ldw	r5,28(r16)
    aec4:	80c00917 	ldw	r3,36(r16)
    aec8:	988f383a 	mul	r7,r19,r2
    aecc:	a009883a 	mov	r4,r20
    aed0:	e00d883a 	mov	r6,fp
    aed4:	183ee83a 	callr	r3
    aed8:	00bfe016 	blt	zero,r2,ae5c <__alt_mem_Flash_flash_data+0xf400ae5c>
    aedc:	8080030b 	ldhu	r2,12(r16)
    aee0:	10801014 	ori	r2,r2,64
    aee4:	8080030d 	sth	r2,12(r16)
    aee8:	00bfffc4 	movi	r2,-1
    aeec:	003fb006 	br	adb0 <__alt_mem_Flash_flash_data+0xf400adb0>
    aef0:	0027883a 	mov	r19,zero
    aef4:	0011883a 	mov	r8,zero
    aef8:	0039883a 	mov	fp,zero
    aefc:	0025883a 	mov	r18,zero
    af00:	90001f26 	beq	r18,zero,af80 <__sfvwrite_r+0x288>
    af04:	40006026 	beq	r8,zero,b088 <__sfvwrite_r+0x390>
    af08:	982b883a 	mov	r21,r19
    af0c:	94c0012e 	bgeu	r18,r19,af14 <__sfvwrite_r+0x21c>
    af10:	902b883a 	mov	r21,r18
    af14:	81000017 	ldw	r4,0(r16)
    af18:	80800417 	ldw	r2,16(r16)
    af1c:	a82d883a 	mov	r22,r21
    af20:	81800217 	ldw	r6,8(r16)
    af24:	81c00517 	ldw	r7,20(r16)
    af28:	1100022e 	bgeu	r2,r4,af34 <__sfvwrite_r+0x23c>
    af2c:	31c7883a 	add	r3,r6,r7
    af30:	1d401816 	blt	r3,r21,af94 <__sfvwrite_r+0x29c>
    af34:	a9c04416 	blt	r21,r7,b048 <__sfvwrite_r+0x350>
    af38:	80800917 	ldw	r2,36(r16)
    af3c:	81400717 	ldw	r5,28(r16)
    af40:	a009883a 	mov	r4,r20
    af44:	da000115 	stw	r8,4(sp)
    af48:	e00d883a 	mov	r6,fp
    af4c:	103ee83a 	callr	r2
    af50:	102d883a 	mov	r22,r2
    af54:	da000117 	ldw	r8,4(sp)
    af58:	00bfe00e 	bge	zero,r2,aedc <__alt_mem_Flash_flash_data+0xf400aedc>
    af5c:	9da7c83a 	sub	r19,r19,r22
    af60:	98001f26 	beq	r19,zero,afe0 <__sfvwrite_r+0x2e8>
    af64:	b8800217 	ldw	r2,8(r23)
    af68:	e5b9883a 	add	fp,fp,r22
    af6c:	95a5c83a 	sub	r18,r18,r22
    af70:	15adc83a 	sub	r22,r2,r22
    af74:	bd800215 	stw	r22,8(r23)
    af78:	b03f8c26 	beq	r22,zero,adac <__alt_mem_Flash_flash_data+0xf400adac>
    af7c:	903fe11e 	bne	r18,zero,af04 <__alt_mem_Flash_flash_data+0xf400af04>
    af80:	8f000017 	ldw	fp,0(r17)
    af84:	8c800117 	ldw	r18,4(r17)
    af88:	0011883a 	mov	r8,zero
    af8c:	8c400204 	addi	r17,r17,8
    af90:	003fdb06 	br	af00 <__alt_mem_Flash_flash_data+0xf400af00>
    af94:	180d883a 	mov	r6,r3
    af98:	e00b883a 	mov	r5,fp
    af9c:	da000115 	stw	r8,4(sp)
    afa0:	d8c00015 	stw	r3,0(sp)
    afa4:	000bfa00 	call	bfa0 <memmove>
    afa8:	d8c00017 	ldw	r3,0(sp)
    afac:	80800017 	ldw	r2,0(r16)
    afb0:	a009883a 	mov	r4,r20
    afb4:	800b883a 	mov	r5,r16
    afb8:	10c5883a 	add	r2,r2,r3
    afbc:	80800015 	stw	r2,0(r16)
    afc0:	d8c00015 	stw	r3,0(sp)
    afc4:	000a4b80 	call	a4b8 <_fflush_r>
    afc8:	d8c00017 	ldw	r3,0(sp)
    afcc:	da000117 	ldw	r8,4(sp)
    afd0:	103fc21e 	bne	r2,zero,aedc <__alt_mem_Flash_flash_data+0xf400aedc>
    afd4:	182d883a 	mov	r22,r3
    afd8:	9da7c83a 	sub	r19,r19,r22
    afdc:	983fe11e 	bne	r19,zero,af64 <__alt_mem_Flash_flash_data+0xf400af64>
    afe0:	a009883a 	mov	r4,r20
    afe4:	800b883a 	mov	r5,r16
    afe8:	000a4b80 	call	a4b8 <_fflush_r>
    afec:	103fbb1e 	bne	r2,zero,aedc <__alt_mem_Flash_flash_data+0xf400aedc>
    aff0:	0011883a 	mov	r8,zero
    aff4:	003fdb06 	br	af64 <__alt_mem_Flash_flash_data+0xf400af64>
    aff8:	81000017 	ldw	r4,0(r16)
    affc:	80800417 	ldw	r2,16(r16)
    b000:	11000236 	bltu	r2,r4,b00c <__sfvwrite_r+0x314>
    b004:	84c00517 	ldw	r19,20(r16)
    b008:	94ffa62e 	bgeu	r18,r19,aea4 <__alt_mem_Flash_flash_data+0xf400aea4>
    b00c:	9027883a 	mov	r19,r18
    b010:	b480012e 	bgeu	r22,r18,b018 <__sfvwrite_r+0x320>
    b014:	b027883a 	mov	r19,r22
    b018:	e00b883a 	mov	r5,fp
    b01c:	980d883a 	mov	r6,r19
    b020:	000bfa00 	call	bfa0 <memmove>
    b024:	80800217 	ldw	r2,8(r16)
    b028:	80c00017 	ldw	r3,0(r16)
    b02c:	14c5c83a 	sub	r2,r2,r19
    b030:	1cc7883a 	add	r3,r3,r19
    b034:	80800215 	stw	r2,8(r16)
    b038:	80c00015 	stw	r3,0(r16)
    b03c:	10004326 	beq	r2,zero,b14c <__sfvwrite_r+0x454>
    b040:	9805883a 	mov	r2,r19
    b044:	003f8506 	br	ae5c <__alt_mem_Flash_flash_data+0xf400ae5c>
    b048:	a80d883a 	mov	r6,r21
    b04c:	e00b883a 	mov	r5,fp
    b050:	da000115 	stw	r8,4(sp)
    b054:	000bfa00 	call	bfa0 <memmove>
    b058:	80800217 	ldw	r2,8(r16)
    b05c:	80c00017 	ldw	r3,0(r16)
    b060:	da000117 	ldw	r8,4(sp)
    b064:	1545c83a 	sub	r2,r2,r21
    b068:	1d6b883a 	add	r21,r3,r21
    b06c:	80800215 	stw	r2,8(r16)
    b070:	85400015 	stw	r21,0(r16)
    b074:	003fb906 	br	af5c <__alt_mem_Flash_flash_data+0xf400af5c>
    b078:	81000017 	ldw	r4,0(r16)
    b07c:	902d883a 	mov	r22,r18
    b080:	9027883a 	mov	r19,r18
    b084:	003f6b06 	br	ae34 <__alt_mem_Flash_flash_data+0xf400ae34>
    b088:	e009883a 	mov	r4,fp
    b08c:	01400284 	movi	r5,10
    b090:	900d883a 	mov	r6,r18
    b094:	000bd800 	call	bd80 <memchr>
    b098:	10003e26 	beq	r2,zero,b194 <__sfvwrite_r+0x49c>
    b09c:	10800044 	addi	r2,r2,1
    b0a0:	1727c83a 	sub	r19,r2,fp
    b0a4:	02000044 	movi	r8,1
    b0a8:	003f9706 	br	af08 <__alt_mem_Flash_flash_data+0xf400af08>
    b0ac:	80800517 	ldw	r2,20(r16)
    b0b0:	81400417 	ldw	r5,16(r16)
    b0b4:	80c00017 	ldw	r3,0(r16)
    b0b8:	10a7883a 	add	r19,r2,r2
    b0bc:	9885883a 	add	r2,r19,r2
    b0c0:	1026d7fa 	srli	r19,r2,31
    b0c4:	196bc83a 	sub	r21,r3,r5
    b0c8:	a9800044 	addi	r6,r21,1
    b0cc:	9885883a 	add	r2,r19,r2
    b0d0:	1027d07a 	srai	r19,r2,1
    b0d4:	3485883a 	add	r2,r6,r18
    b0d8:	980d883a 	mov	r6,r19
    b0dc:	9880022e 	bgeu	r19,r2,b0e8 <__sfvwrite_r+0x3f0>
    b0e0:	1027883a 	mov	r19,r2
    b0e4:	100d883a 	mov	r6,r2
    b0e8:	2101000c 	andi	r4,r4,1024
    b0ec:	20001c26 	beq	r4,zero,b160 <__sfvwrite_r+0x468>
    b0f0:	a009883a 	mov	r4,r20
    b0f4:	300b883a 	mov	r5,r6
    b0f8:	000b5d80 	call	b5d8 <_malloc_r>
    b0fc:	102d883a 	mov	r22,r2
    b100:	10002926 	beq	r2,zero,b1a8 <__sfvwrite_r+0x4b0>
    b104:	81400417 	ldw	r5,16(r16)
    b108:	1009883a 	mov	r4,r2
    b10c:	a80d883a 	mov	r6,r21
    b110:	000be680 	call	be68 <memcpy>
    b114:	8080030b 	ldhu	r2,12(r16)
    b118:	00fedfc4 	movi	r3,-1153
    b11c:	10c4703a 	and	r2,r2,r3
    b120:	10802014 	ori	r2,r2,128
    b124:	8080030d 	sth	r2,12(r16)
    b128:	b549883a 	add	r4,r22,r21
    b12c:	9d4bc83a 	sub	r5,r19,r21
    b130:	85800415 	stw	r22,16(r16)
    b134:	84c00515 	stw	r19,20(r16)
    b138:	81000015 	stw	r4,0(r16)
    b13c:	902d883a 	mov	r22,r18
    b140:	81400215 	stw	r5,8(r16)
    b144:	9027883a 	mov	r19,r18
    b148:	003f3a06 	br	ae34 <__alt_mem_Flash_flash_data+0xf400ae34>
    b14c:	a009883a 	mov	r4,r20
    b150:	800b883a 	mov	r5,r16
    b154:	000a4b80 	call	a4b8 <_fflush_r>
    b158:	103fb926 	beq	r2,zero,b040 <__alt_mem_Flash_flash_data+0xf400b040>
    b15c:	003f5f06 	br	aedc <__alt_mem_Flash_flash_data+0xf400aedc>
    b160:	a009883a 	mov	r4,r20
    b164:	000d2080 	call	d208 <_realloc_r>
    b168:	102d883a 	mov	r22,r2
    b16c:	103fee1e 	bne	r2,zero,b128 <__alt_mem_Flash_flash_data+0xf400b128>
    b170:	81400417 	ldw	r5,16(r16)
    b174:	a009883a 	mov	r4,r20
    b178:	000aa080 	call	aa08 <_free_r>
    b17c:	8080030b 	ldhu	r2,12(r16)
    b180:	00ffdfc4 	movi	r3,-129
    b184:	1884703a 	and	r2,r3,r2
    b188:	00c00304 	movi	r3,12
    b18c:	a0c00015 	stw	r3,0(r20)
    b190:	003f5306 	br	aee0 <__alt_mem_Flash_flash_data+0xf400aee0>
    b194:	94c00044 	addi	r19,r18,1
    b198:	02000044 	movi	r8,1
    b19c:	003f5a06 	br	af08 <__alt_mem_Flash_flash_data+0xf400af08>
    b1a0:	00bfffc4 	movi	r2,-1
    b1a4:	003f0206 	br	adb0 <__alt_mem_Flash_flash_data+0xf400adb0>
    b1a8:	00800304 	movi	r2,12
    b1ac:	a0800015 	stw	r2,0(r20)
    b1b0:	8080030b 	ldhu	r2,12(r16)
    b1b4:	003f4a06 	br	aee0 <__alt_mem_Flash_flash_data+0xf400aee0>

0000b1b8 <_fwalk>:
    b1b8:	defff704 	addi	sp,sp,-36
    b1bc:	dd000415 	stw	r20,16(sp)
    b1c0:	dfc00815 	stw	ra,32(sp)
    b1c4:	ddc00715 	stw	r23,28(sp)
    b1c8:	dd800615 	stw	r22,24(sp)
    b1cc:	dd400515 	stw	r21,20(sp)
    b1d0:	dcc00315 	stw	r19,12(sp)
    b1d4:	dc800215 	stw	r18,8(sp)
    b1d8:	dc400115 	stw	r17,4(sp)
    b1dc:	dc000015 	stw	r16,0(sp)
    b1e0:	2500b804 	addi	r20,r4,736
    b1e4:	a0002326 	beq	r20,zero,b274 <_fwalk+0xbc>
    b1e8:	282b883a 	mov	r21,r5
    b1ec:	002f883a 	mov	r23,zero
    b1f0:	05800044 	movi	r22,1
    b1f4:	04ffffc4 	movi	r19,-1
    b1f8:	a4400117 	ldw	r17,4(r20)
    b1fc:	a4800217 	ldw	r18,8(r20)
    b200:	8c7fffc4 	addi	r17,r17,-1
    b204:	88000d16 	blt	r17,zero,b23c <_fwalk+0x84>
    b208:	94000304 	addi	r16,r18,12
    b20c:	94800384 	addi	r18,r18,14
    b210:	80c0000b 	ldhu	r3,0(r16)
    b214:	8c7fffc4 	addi	r17,r17,-1
    b218:	813ffd04 	addi	r4,r16,-12
    b21c:	b0c0042e 	bgeu	r22,r3,b230 <_fwalk+0x78>
    b220:	90c0000f 	ldh	r3,0(r18)
    b224:	1cc00226 	beq	r3,r19,b230 <_fwalk+0x78>
    b228:	a83ee83a 	callr	r21
    b22c:	b8aeb03a 	or	r23,r23,r2
    b230:	84001a04 	addi	r16,r16,104
    b234:	94801a04 	addi	r18,r18,104
    b238:	8cfff51e 	bne	r17,r19,b210 <__alt_mem_Flash_flash_data+0xf400b210>
    b23c:	a5000017 	ldw	r20,0(r20)
    b240:	a03fed1e 	bne	r20,zero,b1f8 <__alt_mem_Flash_flash_data+0xf400b1f8>
    b244:	b805883a 	mov	r2,r23
    b248:	dfc00817 	ldw	ra,32(sp)
    b24c:	ddc00717 	ldw	r23,28(sp)
    b250:	dd800617 	ldw	r22,24(sp)
    b254:	dd400517 	ldw	r21,20(sp)
    b258:	dd000417 	ldw	r20,16(sp)
    b25c:	dcc00317 	ldw	r19,12(sp)
    b260:	dc800217 	ldw	r18,8(sp)
    b264:	dc400117 	ldw	r17,4(sp)
    b268:	dc000017 	ldw	r16,0(sp)
    b26c:	dec00904 	addi	sp,sp,36
    b270:	f800283a 	ret
    b274:	002f883a 	mov	r23,zero
    b278:	003ff206 	br	b244 <__alt_mem_Flash_flash_data+0xf400b244>

0000b27c <_fwalk_reent>:
    b27c:	defff704 	addi	sp,sp,-36
    b280:	dd400515 	stw	r21,20(sp)
    b284:	dfc00815 	stw	ra,32(sp)
    b288:	ddc00715 	stw	r23,28(sp)
    b28c:	dd800615 	stw	r22,24(sp)
    b290:	dd000415 	stw	r20,16(sp)
    b294:	dcc00315 	stw	r19,12(sp)
    b298:	dc800215 	stw	r18,8(sp)
    b29c:	dc400115 	stw	r17,4(sp)
    b2a0:	dc000015 	stw	r16,0(sp)
    b2a4:	2540b804 	addi	r21,r4,736
    b2a8:	a8002326 	beq	r21,zero,b338 <_fwalk_reent+0xbc>
    b2ac:	2829883a 	mov	r20,r5
    b2b0:	202d883a 	mov	r22,r4
    b2b4:	002f883a 	mov	r23,zero
    b2b8:	04c00044 	movi	r19,1
    b2bc:	04bfffc4 	movi	r18,-1
    b2c0:	ac400117 	ldw	r17,4(r21)
    b2c4:	ac000217 	ldw	r16,8(r21)
    b2c8:	8c7fffc4 	addi	r17,r17,-1
    b2cc:	88000c16 	blt	r17,zero,b300 <_fwalk_reent+0x84>
    b2d0:	84000304 	addi	r16,r16,12
    b2d4:	80c0000b 	ldhu	r3,0(r16)
    b2d8:	8c7fffc4 	addi	r17,r17,-1
    b2dc:	817ffd04 	addi	r5,r16,-12
    b2e0:	98c0052e 	bgeu	r19,r3,b2f8 <_fwalk_reent+0x7c>
    b2e4:	80c0008f 	ldh	r3,2(r16)
    b2e8:	b009883a 	mov	r4,r22
    b2ec:	1c800226 	beq	r3,r18,b2f8 <_fwalk_reent+0x7c>
    b2f0:	a03ee83a 	callr	r20
    b2f4:	b8aeb03a 	or	r23,r23,r2
    b2f8:	84001a04 	addi	r16,r16,104
    b2fc:	8cbff51e 	bne	r17,r18,b2d4 <__alt_mem_Flash_flash_data+0xf400b2d4>
    b300:	ad400017 	ldw	r21,0(r21)
    b304:	a83fee1e 	bne	r21,zero,b2c0 <__alt_mem_Flash_flash_data+0xf400b2c0>
    b308:	b805883a 	mov	r2,r23
    b30c:	dfc00817 	ldw	ra,32(sp)
    b310:	ddc00717 	ldw	r23,28(sp)
    b314:	dd800617 	ldw	r22,24(sp)
    b318:	dd400517 	ldw	r21,20(sp)
    b31c:	dd000417 	ldw	r20,16(sp)
    b320:	dcc00317 	ldw	r19,12(sp)
    b324:	dc800217 	ldw	r18,8(sp)
    b328:	dc400117 	ldw	r17,4(sp)
    b32c:	dc000017 	ldw	r16,0(sp)
    b330:	dec00904 	addi	sp,sp,36
    b334:	f800283a 	ret
    b338:	002f883a 	mov	r23,zero
    b33c:	003ff206 	br	b308 <__alt_mem_Flash_flash_data+0xf400b308>

0000b340 <_setlocale_r>:
    b340:	30001b26 	beq	r6,zero,b3b0 <_setlocale_r+0x70>
    b344:	014000b4 	movhi	r5,2
    b348:	defffe04 	addi	sp,sp,-8
    b34c:	2956d404 	addi	r5,r5,23376
    b350:	3009883a 	mov	r4,r6
    b354:	dc000015 	stw	r16,0(sp)
    b358:	dfc00115 	stw	ra,4(sp)
    b35c:	3021883a 	mov	r16,r6
    b360:	000d9740 	call	d974 <strcmp>
    b364:	1000061e 	bne	r2,zero,b380 <_setlocale_r+0x40>
    b368:	008000b4 	movhi	r2,2
    b36c:	1096d304 	addi	r2,r2,23372
    b370:	dfc00117 	ldw	ra,4(sp)
    b374:	dc000017 	ldw	r16,0(sp)
    b378:	dec00204 	addi	sp,sp,8
    b37c:	f800283a 	ret
    b380:	014000b4 	movhi	r5,2
    b384:	2956d304 	addi	r5,r5,23372
    b388:	8009883a 	mov	r4,r16
    b38c:	000d9740 	call	d974 <strcmp>
    b390:	103ff526 	beq	r2,zero,b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b394:	014000b4 	movhi	r5,2
    b398:	2956b604 	addi	r5,r5,23256
    b39c:	8009883a 	mov	r4,r16
    b3a0:	000d9740 	call	d974 <strcmp>
    b3a4:	103ff026 	beq	r2,zero,b368 <__alt_mem_Flash_flash_data+0xf400b368>
    b3a8:	0005883a 	mov	r2,zero
    b3ac:	003ff006 	br	b370 <__alt_mem_Flash_flash_data+0xf400b370>
    b3b0:	008000b4 	movhi	r2,2
    b3b4:	1096d304 	addi	r2,r2,23372
    b3b8:	f800283a 	ret

0000b3bc <__locale_charset>:
    b3bc:	008000b4 	movhi	r2,2
    b3c0:	10993c04 	addi	r2,r2,25840
    b3c4:	f800283a 	ret

0000b3c8 <__locale_mb_cur_max>:
    b3c8:	008000b4 	movhi	r2,2
    b3cc:	109fca04 	addi	r2,r2,32552
    b3d0:	10800017 	ldw	r2,0(r2)
    b3d4:	f800283a 	ret

0000b3d8 <__locale_msgcharset>:
    b3d8:	008000b4 	movhi	r2,2
    b3dc:	10993404 	addi	r2,r2,25808
    b3e0:	f800283a 	ret

0000b3e4 <__locale_cjk_lang>:
    b3e4:	0005883a 	mov	r2,zero
    b3e8:	f800283a 	ret

0000b3ec <_localeconv_r>:
    b3ec:	008000b4 	movhi	r2,2
    b3f0:	10994404 	addi	r2,r2,25872
    b3f4:	f800283a 	ret

0000b3f8 <setlocale>:
    b3f8:	00c000b4 	movhi	r3,2
    b3fc:	18dfc904 	addi	r3,r3,32548
    b400:	2005883a 	mov	r2,r4
    b404:	19000017 	ldw	r4,0(r3)
    b408:	280d883a 	mov	r6,r5
    b40c:	100b883a 	mov	r5,r2
    b410:	000b3401 	jmpi	b340 <_setlocale_r>

0000b414 <localeconv>:
    b414:	008000b4 	movhi	r2,2
    b418:	10994404 	addi	r2,r2,25872
    b41c:	f800283a 	ret

0000b420 <__smakebuf_r>:
    b420:	2880030b 	ldhu	r2,12(r5)
    b424:	10c0008c 	andi	r3,r2,2
    b428:	1800401e 	bne	r3,zero,b52c <__smakebuf_r+0x10c>
    b42c:	deffec04 	addi	sp,sp,-80
    b430:	dc000f15 	stw	r16,60(sp)
    b434:	2821883a 	mov	r16,r5
    b438:	2940038f 	ldh	r5,14(r5)
    b43c:	dc401015 	stw	r17,64(sp)
    b440:	dfc01315 	stw	ra,76(sp)
    b444:	dcc01215 	stw	r19,72(sp)
    b448:	dc801115 	stw	r18,68(sp)
    b44c:	2023883a 	mov	r17,r4
    b450:	28001b16 	blt	r5,zero,b4c0 <__smakebuf_r+0xa0>
    b454:	d80d883a 	mov	r6,sp
    b458:	001068c0 	call	1068c <_fstat_r>
    b45c:	10001716 	blt	r2,zero,b4bc <__smakebuf_r+0x9c>
    b460:	d8800117 	ldw	r2,4(sp)
    b464:	00e00014 	movui	r3,32768
    b468:	10bc000c 	andi	r2,r2,61440
    b46c:	10c03726 	beq	r2,r3,b54c <__smakebuf_r+0x12c>
    b470:	80c0030b 	ldhu	r3,12(r16)
    b474:	18c20014 	ori	r3,r3,2048
    b478:	80c0030d 	sth	r3,12(r16)
    b47c:	00c80004 	movi	r3,8192
    b480:	10c03c1e 	bne	r2,r3,b574 <__smakebuf_r+0x154>
    b484:	8140038f 	ldh	r5,14(r16)
    b488:	8809883a 	mov	r4,r17
    b48c:	00106e40 	call	106e4 <_isatty_r>
    b490:	10004e26 	beq	r2,zero,b5cc <__smakebuf_r+0x1ac>
    b494:	8080030b 	ldhu	r2,12(r16)
    b498:	04c00044 	movi	r19,1
    b49c:	80c010c4 	addi	r3,r16,67
    b4a0:	14c4b03a 	or	r2,r2,r19
    b4a4:	8080030d 	sth	r2,12(r16)
    b4a8:	80c00015 	stw	r3,0(r16)
    b4ac:	80c00415 	stw	r3,16(r16)
    b4b0:	84c00515 	stw	r19,20(r16)
    b4b4:	04810004 	movi	r18,1024
    b4b8:	00000706 	br	b4d8 <__smakebuf_r+0xb8>
    b4bc:	8080030b 	ldhu	r2,12(r16)
    b4c0:	10c0200c 	andi	r3,r2,128
    b4c4:	18001f1e 	bne	r3,zero,b544 <__smakebuf_r+0x124>
    b4c8:	04810004 	movi	r18,1024
    b4cc:	10820014 	ori	r2,r2,2048
    b4d0:	8080030d 	sth	r2,12(r16)
    b4d4:	0027883a 	mov	r19,zero
    b4d8:	8809883a 	mov	r4,r17
    b4dc:	900b883a 	mov	r5,r18
    b4e0:	000b5d80 	call	b5d8 <_malloc_r>
    b4e4:	10002e26 	beq	r2,zero,b5a0 <__smakebuf_r+0x180>
    b4e8:	80c0030b 	ldhu	r3,12(r16)
    b4ec:	01000074 	movhi	r4,1
    b4f0:	21295504 	addi	r4,r4,-23212
    b4f4:	89000f15 	stw	r4,60(r17)
    b4f8:	18c02014 	ori	r3,r3,128
    b4fc:	80c0030d 	sth	r3,12(r16)
    b500:	80800015 	stw	r2,0(r16)
    b504:	80800415 	stw	r2,16(r16)
    b508:	84800515 	stw	r18,20(r16)
    b50c:	98001c1e 	bne	r19,zero,b580 <__smakebuf_r+0x160>
    b510:	dfc01317 	ldw	ra,76(sp)
    b514:	dcc01217 	ldw	r19,72(sp)
    b518:	dc801117 	ldw	r18,68(sp)
    b51c:	dc401017 	ldw	r17,64(sp)
    b520:	dc000f17 	ldw	r16,60(sp)
    b524:	dec01404 	addi	sp,sp,80
    b528:	f800283a 	ret
    b52c:	288010c4 	addi	r2,r5,67
    b530:	28800015 	stw	r2,0(r5)
    b534:	28800415 	stw	r2,16(r5)
    b538:	00800044 	movi	r2,1
    b53c:	28800515 	stw	r2,20(r5)
    b540:	f800283a 	ret
    b544:	04801004 	movi	r18,64
    b548:	003fe006 	br	b4cc <__alt_mem_Flash_flash_data+0xf400b4cc>
    b54c:	81000a17 	ldw	r4,40(r16)
    b550:	00c00074 	movhi	r3,1
    b554:	18f64404 	addi	r3,r3,-9968
    b558:	20ffc51e 	bne	r4,r3,b470 <__alt_mem_Flash_flash_data+0xf400b470>
    b55c:	80c0030b 	ldhu	r3,12(r16)
    b560:	01010004 	movi	r4,1024
    b564:	81001315 	stw	r4,76(r16)
    b568:	1906b03a 	or	r3,r3,r4
    b56c:	80c0030d 	sth	r3,12(r16)
    b570:	003fc206 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    b574:	0027883a 	mov	r19,zero
    b578:	04810004 	movi	r18,1024
    b57c:	003fd606 	br	b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>
    b580:	8140038f 	ldh	r5,14(r16)
    b584:	8809883a 	mov	r4,r17
    b588:	00106e40 	call	106e4 <_isatty_r>
    b58c:	103fe026 	beq	r2,zero,b510 <__alt_mem_Flash_flash_data+0xf400b510>
    b590:	8080030b 	ldhu	r2,12(r16)
    b594:	10800054 	ori	r2,r2,1
    b598:	8080030d 	sth	r2,12(r16)
    b59c:	003fdc06 	br	b510 <__alt_mem_Flash_flash_data+0xf400b510>
    b5a0:	8080030b 	ldhu	r2,12(r16)
    b5a4:	10c0800c 	andi	r3,r2,512
    b5a8:	183fd91e 	bne	r3,zero,b510 <__alt_mem_Flash_flash_data+0xf400b510>
    b5ac:	10800094 	ori	r2,r2,2
    b5b0:	80c010c4 	addi	r3,r16,67
    b5b4:	8080030d 	sth	r2,12(r16)
    b5b8:	00800044 	movi	r2,1
    b5bc:	80c00015 	stw	r3,0(r16)
    b5c0:	80c00415 	stw	r3,16(r16)
    b5c4:	80800515 	stw	r2,20(r16)
    b5c8:	003fd106 	br	b510 <__alt_mem_Flash_flash_data+0xf400b510>
    b5cc:	04c00044 	movi	r19,1
    b5d0:	04810004 	movi	r18,1024
    b5d4:	003fc006 	br	b4d8 <__alt_mem_Flash_flash_data+0xf400b4d8>

0000b5d8 <_malloc_r>:
    b5d8:	defff504 	addi	sp,sp,-44
    b5dc:	dc800315 	stw	r18,12(sp)
    b5e0:	dfc00a15 	stw	ra,40(sp)
    b5e4:	df000915 	stw	fp,36(sp)
    b5e8:	ddc00815 	stw	r23,32(sp)
    b5ec:	dd800715 	stw	r22,28(sp)
    b5f0:	dd400615 	stw	r21,24(sp)
    b5f4:	dd000515 	stw	r20,20(sp)
    b5f8:	dcc00415 	stw	r19,16(sp)
    b5fc:	dc400215 	stw	r17,8(sp)
    b600:	dc000115 	stw	r16,4(sp)
    b604:	288002c4 	addi	r2,r5,11
    b608:	00c00584 	movi	r3,22
    b60c:	2025883a 	mov	r18,r4
    b610:	18802a2e 	bgeu	r3,r2,b6bc <_malloc_r+0xe4>
    b614:	047ffe04 	movi	r17,-8
    b618:	1462703a 	and	r17,r2,r17
    b61c:	88009e16 	blt	r17,zero,b898 <_malloc_r+0x2c0>
    b620:	89409d36 	bltu	r17,r5,b898 <_malloc_r+0x2c0>
    b624:	00147300 	call	14730 <__malloc_lock>
    b628:	00807dc4 	movi	r2,503
    b62c:	14402736 	bltu	r2,r17,b6cc <_malloc_r+0xf4>
    b630:	8806d0fa 	srli	r3,r17,3
    b634:	04c000b4 	movhi	r19,2
    b638:	9cd95204 	addi	r19,r19,25928
    b63c:	18c5883a 	add	r2,r3,r3
    b640:	1085883a 	add	r2,r2,r2
    b644:	1085883a 	add	r2,r2,r2
    b648:	9885883a 	add	r2,r19,r2
    b64c:	14000317 	ldw	r16,12(r2)
    b650:	80814a26 	beq	r16,r2,bb7c <_malloc_r+0x5a4>
    b654:	80c00117 	ldw	r3,4(r16)
    b658:	81000317 	ldw	r4,12(r16)
    b65c:	00bfff04 	movi	r2,-4
    b660:	1884703a 	and	r2,r3,r2
    b664:	81400217 	ldw	r5,8(r16)
    b668:	8085883a 	add	r2,r16,r2
    b66c:	10c00117 	ldw	r3,4(r2)
    b670:	29000315 	stw	r4,12(r5)
    b674:	21400215 	stw	r5,8(r4)
    b678:	18c00054 	ori	r3,r3,1
    b67c:	10c00115 	stw	r3,4(r2)
    b680:	9009883a 	mov	r4,r18
    b684:	00148500 	call	14850 <__malloc_unlock>
    b688:	80800204 	addi	r2,r16,8
    b68c:	dfc00a17 	ldw	ra,40(sp)
    b690:	df000917 	ldw	fp,36(sp)
    b694:	ddc00817 	ldw	r23,32(sp)
    b698:	dd800717 	ldw	r22,28(sp)
    b69c:	dd400617 	ldw	r21,24(sp)
    b6a0:	dd000517 	ldw	r20,20(sp)
    b6a4:	dcc00417 	ldw	r19,16(sp)
    b6a8:	dc800317 	ldw	r18,12(sp)
    b6ac:	dc400217 	ldw	r17,8(sp)
    b6b0:	dc000117 	ldw	r16,4(sp)
    b6b4:	dec00b04 	addi	sp,sp,44
    b6b8:	f800283a 	ret
    b6bc:	04400404 	movi	r17,16
    b6c0:	89407536 	bltu	r17,r5,b898 <_malloc_r+0x2c0>
    b6c4:	00147300 	call	14730 <__malloc_lock>
    b6c8:	003fd906 	br	b630 <__alt_mem_Flash_flash_data+0xf400b630>
    b6cc:	8806d27a 	srli	r3,r17,9
    b6d0:	18007526 	beq	r3,zero,b8a8 <_malloc_r+0x2d0>
    b6d4:	00800104 	movi	r2,4
    b6d8:	10c0ef36 	bltu	r2,r3,ba98 <_malloc_r+0x4c0>
    b6dc:	8806d1ba 	srli	r3,r17,6
    b6e0:	19c00e04 	addi	r7,r3,56
    b6e4:	39cb883a 	add	r5,r7,r7
    b6e8:	04c000b4 	movhi	r19,2
    b6ec:	294b883a 	add	r5,r5,r5
    b6f0:	9cd95204 	addi	r19,r19,25928
    b6f4:	294b883a 	add	r5,r5,r5
    b6f8:	994b883a 	add	r5,r19,r5
    b6fc:	2c000317 	ldw	r16,12(r5)
    b700:	2c000e26 	beq	r5,r16,b73c <_malloc_r+0x164>
    b704:	80800117 	ldw	r2,4(r16)
    b708:	01bfff04 	movi	r6,-4
    b70c:	010003c4 	movi	r4,15
    b710:	1184703a 	and	r2,r2,r6
    b714:	1447c83a 	sub	r3,r2,r17
    b718:	20c00716 	blt	r4,r3,b738 <_malloc_r+0x160>
    b71c:	1800650e 	bge	r3,zero,b8b4 <_malloc_r+0x2dc>
    b720:	84000317 	ldw	r16,12(r16)
    b724:	2c000526 	beq	r5,r16,b73c <_malloc_r+0x164>
    b728:	80800117 	ldw	r2,4(r16)
    b72c:	1184703a 	and	r2,r2,r6
    b730:	1447c83a 	sub	r3,r2,r17
    b734:	20fff90e 	bge	r4,r3,b71c <__alt_mem_Flash_flash_data+0xf400b71c>
    b738:	39ffffc4 	addi	r7,r7,-1
    b73c:	38c00044 	addi	r3,r7,1
    b740:	018000b4 	movhi	r6,2
    b744:	9c000417 	ldw	r16,16(r19)
    b748:	31995204 	addi	r6,r6,25928
    b74c:	32400204 	addi	r9,r6,8
    b750:	82410326 	beq	r16,r9,bb60 <_malloc_r+0x588>
    b754:	81000117 	ldw	r4,4(r16)
    b758:	00bfff04 	movi	r2,-4
    b75c:	208e703a 	and	r7,r4,r2
    b760:	3c45c83a 	sub	r2,r7,r17
    b764:	010003c4 	movi	r4,15
    b768:	2080ee16 	blt	r4,r2,bb24 <_malloc_r+0x54c>
    b76c:	32400515 	stw	r9,20(r6)
    b770:	32400415 	stw	r9,16(r6)
    b774:	1000510e 	bge	r2,zero,b8bc <_malloc_r+0x2e4>
    b778:	00807fc4 	movi	r2,511
    b77c:	11c0ce36 	bltu	r2,r7,bab8 <_malloc_r+0x4e0>
    b780:	3808d0fa 	srli	r4,r7,3
    b784:	01c00044 	movi	r7,1
    b788:	30800117 	ldw	r2,4(r6)
    b78c:	210b883a 	add	r5,r4,r4
    b790:	294b883a 	add	r5,r5,r5
    b794:	2009d0ba 	srai	r4,r4,2
    b798:	294b883a 	add	r5,r5,r5
    b79c:	298b883a 	add	r5,r5,r6
    b7a0:	2a000217 	ldw	r8,8(r5)
    b7a4:	3908983a 	sll	r4,r7,r4
    b7a8:	81400315 	stw	r5,12(r16)
    b7ac:	82000215 	stw	r8,8(r16)
    b7b0:	2088b03a 	or	r4,r4,r2
    b7b4:	2c000215 	stw	r16,8(r5)
    b7b8:	31000115 	stw	r4,4(r6)
    b7bc:	44000315 	stw	r16,12(r8)
    b7c0:	1805d0ba 	srai	r2,r3,2
    b7c4:	01400044 	movi	r5,1
    b7c8:	288a983a 	sll	r5,r5,r2
    b7cc:	21404336 	bltu	r4,r5,b8dc <_malloc_r+0x304>
    b7d0:	2144703a 	and	r2,r4,r5
    b7d4:	10000a1e 	bne	r2,zero,b800 <_malloc_r+0x228>
    b7d8:	00bfff04 	movi	r2,-4
    b7dc:	294b883a 	add	r5,r5,r5
    b7e0:	1886703a 	and	r3,r3,r2
    b7e4:	2144703a 	and	r2,r4,r5
    b7e8:	18c00104 	addi	r3,r3,4
    b7ec:	1000041e 	bne	r2,zero,b800 <_malloc_r+0x228>
    b7f0:	294b883a 	add	r5,r5,r5
    b7f4:	2144703a 	and	r2,r4,r5
    b7f8:	18c00104 	addi	r3,r3,4
    b7fc:	103ffc26 	beq	r2,zero,b7f0 <__alt_mem_Flash_flash_data+0xf400b7f0>
    b800:	023fff04 	movi	r8,-4
    b804:	01c003c4 	movi	r7,15
    b808:	18c5883a 	add	r2,r3,r3
    b80c:	1085883a 	add	r2,r2,r2
    b810:	1085883a 	add	r2,r2,r2
    b814:	9895883a 	add	r10,r19,r2
    b818:	52c00304 	addi	r11,r10,12
    b81c:	1819883a 	mov	r12,r3
    b820:	5c000017 	ldw	r16,0(r11)
    b824:	59bffd04 	addi	r6,r11,-12
    b828:	8180041e 	bne	r16,r6,b83c <_malloc_r+0x264>
    b82c:	0000ce06 	br	bb68 <_malloc_r+0x590>
    b830:	2000d70e 	bge	r4,zero,bb90 <_malloc_r+0x5b8>
    b834:	84000317 	ldw	r16,12(r16)
    b838:	8180cb26 	beq	r16,r6,bb68 <_malloc_r+0x590>
    b83c:	80800117 	ldw	r2,4(r16)
    b840:	1204703a 	and	r2,r2,r8
    b844:	1449c83a 	sub	r4,r2,r17
    b848:	393ff90e 	bge	r7,r4,b830 <__alt_mem_Flash_flash_data+0xf400b830>
    b84c:	80800317 	ldw	r2,12(r16)
    b850:	80c00217 	ldw	r3,8(r16)
    b854:	89400054 	ori	r5,r17,1
    b858:	81400115 	stw	r5,4(r16)
    b85c:	18800315 	stw	r2,12(r3)
    b860:	10c00215 	stw	r3,8(r2)
    b864:	8463883a 	add	r17,r16,r17
    b868:	9c400515 	stw	r17,20(r19)
    b86c:	9c400415 	stw	r17,16(r19)
    b870:	20800054 	ori	r2,r4,1
    b874:	88800115 	stw	r2,4(r17)
    b878:	8a400315 	stw	r9,12(r17)
    b87c:	8a400215 	stw	r9,8(r17)
    b880:	8923883a 	add	r17,r17,r4
    b884:	89000015 	stw	r4,0(r17)
    b888:	9009883a 	mov	r4,r18
    b88c:	00148500 	call	14850 <__malloc_unlock>
    b890:	80800204 	addi	r2,r16,8
    b894:	003f7d06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b898:	00800304 	movi	r2,12
    b89c:	90800015 	stw	r2,0(r18)
    b8a0:	0005883a 	mov	r2,zero
    b8a4:	003f7906 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b8a8:	01401f84 	movi	r5,126
    b8ac:	01c00fc4 	movi	r7,63
    b8b0:	003f8d06 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    b8b4:	81000317 	ldw	r4,12(r16)
    b8b8:	003f6a06 	br	b664 <__alt_mem_Flash_flash_data+0xf400b664>
    b8bc:	81c5883a 	add	r2,r16,r7
    b8c0:	10c00117 	ldw	r3,4(r2)
    b8c4:	9009883a 	mov	r4,r18
    b8c8:	18c00054 	ori	r3,r3,1
    b8cc:	10c00115 	stw	r3,4(r2)
    b8d0:	00148500 	call	14850 <__malloc_unlock>
    b8d4:	80800204 	addi	r2,r16,8
    b8d8:	003f6c06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b8dc:	9c000217 	ldw	r16,8(r19)
    b8e0:	00bfff04 	movi	r2,-4
    b8e4:	85800117 	ldw	r22,4(r16)
    b8e8:	b0ac703a 	and	r22,r22,r2
    b8ec:	b4400336 	bltu	r22,r17,b8fc <_malloc_r+0x324>
    b8f0:	b445c83a 	sub	r2,r22,r17
    b8f4:	00c003c4 	movi	r3,15
    b8f8:	18805d16 	blt	r3,r2,ba70 <_malloc_r+0x498>
    b8fc:	05c000b4 	movhi	r23,2
    b900:	008000f4 	movhi	r2,3
    b904:	bddfcb04 	addi	r23,r23,32556
    b908:	10a7ee04 	addi	r2,r2,-24648
    b90c:	15400017 	ldw	r21,0(r2)
    b910:	b9000017 	ldw	r4,0(r23)
    b914:	00ffffc4 	movi	r3,-1
    b918:	858d883a 	add	r6,r16,r22
    b91c:	8d6b883a 	add	r21,r17,r21
    b920:	20c0e426 	beq	r4,r3,bcb4 <_malloc_r+0x6dc>
    b924:	ad4403c4 	addi	r21,r21,4111
    b928:	00fc0004 	movi	r3,-4096
    b92c:	a8ea703a 	and	r21,r21,r3
    b930:	9009883a 	mov	r4,r18
    b934:	a80b883a 	mov	r5,r21
    b938:	d9800015 	stw	r6,0(sp)
    b93c:	000d7e40 	call	d7e4 <_sbrk_r>
    b940:	00ffffc4 	movi	r3,-1
    b944:	1029883a 	mov	r20,r2
    b948:	d9800017 	ldw	r6,0(sp)
    b94c:	10c0a426 	beq	r2,r3,bbe0 <_malloc_r+0x608>
    b950:	1180a236 	bltu	r2,r6,bbdc <_malloc_r+0x604>
    b954:	070000f4 	movhi	fp,3
    b958:	e7283604 	addi	fp,fp,-24360
    b95c:	e0c00017 	ldw	r3,0(fp)
    b960:	a8c7883a 	add	r3,r21,r3
    b964:	e0c00015 	stw	r3,0(fp)
    b968:	3500da26 	beq	r6,r20,bcd4 <_malloc_r+0x6fc>
    b96c:	b9000017 	ldw	r4,0(r23)
    b970:	00bfffc4 	movi	r2,-1
    b974:	2080e426 	beq	r4,r2,bd08 <_malloc_r+0x730>
    b978:	a185c83a 	sub	r2,r20,r6
    b97c:	1885883a 	add	r2,r3,r2
    b980:	e0800015 	stw	r2,0(fp)
    b984:	a0c001cc 	andi	r3,r20,7
    b988:	1800b526 	beq	r3,zero,bc60 <_malloc_r+0x688>
    b98c:	a0e9c83a 	sub	r20,r20,r3
    b990:	00840204 	movi	r2,4104
    b994:	a5000204 	addi	r20,r20,8
    b998:	10c7c83a 	sub	r3,r2,r3
    b99c:	a545883a 	add	r2,r20,r21
    b9a0:	1083ffcc 	andi	r2,r2,4095
    b9a4:	18abc83a 	sub	r21,r3,r2
    b9a8:	9009883a 	mov	r4,r18
    b9ac:	a80b883a 	mov	r5,r21
    b9b0:	000d7e40 	call	d7e4 <_sbrk_r>
    b9b4:	00ffffc4 	movi	r3,-1
    b9b8:	10c0d026 	beq	r2,r3,bcfc <_malloc_r+0x724>
    b9bc:	1507c83a 	sub	r3,r2,r20
    b9c0:	a8c7883a 	add	r3,r21,r3
    b9c4:	18c00054 	ori	r3,r3,1
    b9c8:	e0800017 	ldw	r2,0(fp)
    b9cc:	9d000215 	stw	r20,8(r19)
    b9d0:	a0c00115 	stw	r3,4(r20)
    b9d4:	a887883a 	add	r3,r21,r2
    b9d8:	e0c00015 	stw	r3,0(fp)
    b9dc:	84c00e26 	beq	r16,r19,ba18 <_malloc_r+0x440>
    b9e0:	018003c4 	movi	r6,15
    b9e4:	3580a02e 	bgeu	r6,r22,bc68 <_malloc_r+0x690>
    b9e8:	81400117 	ldw	r5,4(r16)
    b9ec:	013ffe04 	movi	r4,-8
    b9f0:	b0bffd04 	addi	r2,r22,-12
    b9f4:	1104703a 	and	r2,r2,r4
    b9f8:	2900004c 	andi	r4,r5,1
    b9fc:	1108b03a 	or	r4,r2,r4
    ba00:	81000115 	stw	r4,4(r16)
    ba04:	01400144 	movi	r5,5
    ba08:	8089883a 	add	r4,r16,r2
    ba0c:	21400115 	stw	r5,4(r4)
    ba10:	21400215 	stw	r5,8(r4)
    ba14:	3080c036 	bltu	r6,r2,bd18 <_malloc_r+0x740>
    ba18:	008000f4 	movhi	r2,3
    ba1c:	10a7ed04 	addi	r2,r2,-24652
    ba20:	11000017 	ldw	r4,0(r2)
    ba24:	20c0012e 	bgeu	r4,r3,ba2c <_malloc_r+0x454>
    ba28:	10c00015 	stw	r3,0(r2)
    ba2c:	008000f4 	movhi	r2,3
    ba30:	10a7ec04 	addi	r2,r2,-24656
    ba34:	11000017 	ldw	r4,0(r2)
    ba38:	9c000217 	ldw	r16,8(r19)
    ba3c:	20c0012e 	bgeu	r4,r3,ba44 <_malloc_r+0x46c>
    ba40:	10c00015 	stw	r3,0(r2)
    ba44:	80c00117 	ldw	r3,4(r16)
    ba48:	00bfff04 	movi	r2,-4
    ba4c:	1886703a 	and	r3,r3,r2
    ba50:	1c45c83a 	sub	r2,r3,r17
    ba54:	1c400236 	bltu	r3,r17,ba60 <_malloc_r+0x488>
    ba58:	00c003c4 	movi	r3,15
    ba5c:	18800416 	blt	r3,r2,ba70 <_malloc_r+0x498>
    ba60:	9009883a 	mov	r4,r18
    ba64:	00148500 	call	14850 <__malloc_unlock>
    ba68:	0005883a 	mov	r2,zero
    ba6c:	003f0706 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    ba70:	88c00054 	ori	r3,r17,1
    ba74:	80c00115 	stw	r3,4(r16)
    ba78:	8463883a 	add	r17,r16,r17
    ba7c:	10800054 	ori	r2,r2,1
    ba80:	9c400215 	stw	r17,8(r19)
    ba84:	88800115 	stw	r2,4(r17)
    ba88:	9009883a 	mov	r4,r18
    ba8c:	00148500 	call	14850 <__malloc_unlock>
    ba90:	80800204 	addi	r2,r16,8
    ba94:	003efd06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    ba98:	00800504 	movi	r2,20
    ba9c:	10c0482e 	bgeu	r2,r3,bbc0 <_malloc_r+0x5e8>
    baa0:	00801504 	movi	r2,84
    baa4:	10c06836 	bltu	r2,r3,bc48 <_malloc_r+0x670>
    baa8:	8806d33a 	srli	r3,r17,12
    baac:	19c01b84 	addi	r7,r3,110
    bab0:	39cb883a 	add	r5,r7,r7
    bab4:	003f0c06 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    bab8:	3804d27a 	srli	r2,r7,9
    babc:	01000104 	movi	r4,4
    bac0:	2080422e 	bgeu	r4,r2,bbcc <_malloc_r+0x5f4>
    bac4:	01000504 	movi	r4,20
    bac8:	20807c36 	bltu	r4,r2,bcbc <_malloc_r+0x6e4>
    bacc:	110016c4 	addi	r4,r2,91
    bad0:	210b883a 	add	r5,r4,r4
    bad4:	294b883a 	add	r5,r5,r5
    bad8:	294b883a 	add	r5,r5,r5
    badc:	994b883a 	add	r5,r19,r5
    bae0:	28800217 	ldw	r2,8(r5)
    bae4:	020000b4 	movhi	r8,2
    bae8:	42195204 	addi	r8,r8,25928
    baec:	11406326 	beq	r2,r5,bc7c <_malloc_r+0x6a4>
    baf0:	01bfff04 	movi	r6,-4
    baf4:	11000117 	ldw	r4,4(r2)
    baf8:	2188703a 	and	r4,r4,r6
    bafc:	3900022e 	bgeu	r7,r4,bb08 <_malloc_r+0x530>
    bb00:	10800217 	ldw	r2,8(r2)
    bb04:	28bffb1e 	bne	r5,r2,baf4 <__alt_mem_Flash_flash_data+0xf400baf4>
    bb08:	11800317 	ldw	r6,12(r2)
    bb0c:	99000117 	ldw	r4,4(r19)
    bb10:	81800315 	stw	r6,12(r16)
    bb14:	80800215 	stw	r2,8(r16)
    bb18:	34000215 	stw	r16,8(r6)
    bb1c:	14000315 	stw	r16,12(r2)
    bb20:	003f2706 	br	b7c0 <__alt_mem_Flash_flash_data+0xf400b7c0>
    bb24:	88c00054 	ori	r3,r17,1
    bb28:	80c00115 	stw	r3,4(r16)
    bb2c:	8463883a 	add	r17,r16,r17
    bb30:	34400515 	stw	r17,20(r6)
    bb34:	34400415 	stw	r17,16(r6)
    bb38:	10c00054 	ori	r3,r2,1
    bb3c:	8a400315 	stw	r9,12(r17)
    bb40:	8a400215 	stw	r9,8(r17)
    bb44:	88c00115 	stw	r3,4(r17)
    bb48:	88a3883a 	add	r17,r17,r2
    bb4c:	88800015 	stw	r2,0(r17)
    bb50:	9009883a 	mov	r4,r18
    bb54:	00148500 	call	14850 <__malloc_unlock>
    bb58:	80800204 	addi	r2,r16,8
    bb5c:	003ecb06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bb60:	31000117 	ldw	r4,4(r6)
    bb64:	003f1606 	br	b7c0 <__alt_mem_Flash_flash_data+0xf400b7c0>
    bb68:	63000044 	addi	r12,r12,1
    bb6c:	608000cc 	andi	r2,r12,3
    bb70:	5ac00204 	addi	r11,r11,8
    bb74:	103f2a1e 	bne	r2,zero,b820 <__alt_mem_Flash_flash_data+0xf400b820>
    bb78:	00002106 	br	bc00 <_malloc_r+0x628>
    bb7c:	80800204 	addi	r2,r16,8
    bb80:	84000517 	ldw	r16,20(r16)
    bb84:	143eb31e 	bne	r2,r16,b654 <__alt_mem_Flash_flash_data+0xf400b654>
    bb88:	18c00084 	addi	r3,r3,2
    bb8c:	003eec06 	br	b740 <__alt_mem_Flash_flash_data+0xf400b740>
    bb90:	8085883a 	add	r2,r16,r2
    bb94:	10c00117 	ldw	r3,4(r2)
    bb98:	81000317 	ldw	r4,12(r16)
    bb9c:	81400217 	ldw	r5,8(r16)
    bba0:	18c00054 	ori	r3,r3,1
    bba4:	10c00115 	stw	r3,4(r2)
    bba8:	29000315 	stw	r4,12(r5)
    bbac:	21400215 	stw	r5,8(r4)
    bbb0:	9009883a 	mov	r4,r18
    bbb4:	00148500 	call	14850 <__malloc_unlock>
    bbb8:	80800204 	addi	r2,r16,8
    bbbc:	003eb306 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    bbc0:	19c016c4 	addi	r7,r3,91
    bbc4:	39cb883a 	add	r5,r7,r7
    bbc8:	003ec706 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    bbcc:	3804d1ba 	srli	r2,r7,6
    bbd0:	11000e04 	addi	r4,r2,56
    bbd4:	210b883a 	add	r5,r4,r4
    bbd8:	003fbe06 	br	bad4 <__alt_mem_Flash_flash_data+0xf400bad4>
    bbdc:	84ff5d26 	beq	r16,r19,b954 <__alt_mem_Flash_flash_data+0xf400b954>
    bbe0:	9c000217 	ldw	r16,8(r19)
    bbe4:	00bfff04 	movi	r2,-4
    bbe8:	80c00117 	ldw	r3,4(r16)
    bbec:	1886703a 	and	r3,r3,r2
    bbf0:	003f9706 	br	ba50 <__alt_mem_Flash_flash_data+0xf400ba50>
    bbf4:	52800017 	ldw	r10,0(r10)
    bbf8:	18ffffc4 	addi	r3,r3,-1
    bbfc:	50805c1e 	bne	r10,r2,bd70 <_malloc_r+0x798>
    bc00:	190000cc 	andi	r4,r3,3
    bc04:	50bffe04 	addi	r2,r10,-8
    bc08:	203ffa1e 	bne	r4,zero,bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    bc0c:	98800117 	ldw	r2,4(r19)
    bc10:	0146303a 	nor	r3,zero,r5
    bc14:	1884703a 	and	r2,r3,r2
    bc18:	98800115 	stw	r2,4(r19)
    bc1c:	294b883a 	add	r5,r5,r5
    bc20:	117f2e36 	bltu	r2,r5,b8dc <__alt_mem_Flash_flash_data+0xf400b8dc>
    bc24:	283f2d26 	beq	r5,zero,b8dc <__alt_mem_Flash_flash_data+0xf400b8dc>
    bc28:	1146703a 	and	r3,r2,r5
    bc2c:	1800521e 	bne	r3,zero,bd78 <_malloc_r+0x7a0>
    bc30:	6007883a 	mov	r3,r12
    bc34:	294b883a 	add	r5,r5,r5
    bc38:	1148703a 	and	r4,r2,r5
    bc3c:	18c00104 	addi	r3,r3,4
    bc40:	203ffc26 	beq	r4,zero,bc34 <__alt_mem_Flash_flash_data+0xf400bc34>
    bc44:	003ef006 	br	b808 <__alt_mem_Flash_flash_data+0xf400b808>
    bc48:	00805504 	movi	r2,340
    bc4c:	10c01336 	bltu	r2,r3,bc9c <_malloc_r+0x6c4>
    bc50:	8806d3fa 	srli	r3,r17,15
    bc54:	19c01dc4 	addi	r7,r3,119
    bc58:	39cb883a 	add	r5,r7,r7
    bc5c:	003ea206 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    bc60:	00c40004 	movi	r3,4096
    bc64:	003f4d06 	br	b99c <__alt_mem_Flash_flash_data+0xf400b99c>
    bc68:	00800044 	movi	r2,1
    bc6c:	a0800115 	stw	r2,4(r20)
    bc70:	a021883a 	mov	r16,r20
    bc74:	0007883a 	mov	r3,zero
    bc78:	003f7506 	br	ba50 <__alt_mem_Flash_flash_data+0xf400ba50>
    bc7c:	200bd0ba 	srai	r5,r4,2
    bc80:	01800044 	movi	r6,1
    bc84:	41000117 	ldw	r4,4(r8)
    bc88:	314a983a 	sll	r5,r6,r5
    bc8c:	100d883a 	mov	r6,r2
    bc90:	2908b03a 	or	r4,r5,r4
    bc94:	41000115 	stw	r4,4(r8)
    bc98:	003f9d06 	br	bb10 <__alt_mem_Flash_flash_data+0xf400bb10>
    bc9c:	00815504 	movi	r2,1364
    bca0:	10c01336 	bltu	r2,r3,bcf0 <_malloc_r+0x718>
    bca4:	8806d4ba 	srli	r3,r17,18
    bca8:	19c01f04 	addi	r7,r3,124
    bcac:	39cb883a 	add	r5,r7,r7
    bcb0:	003e8d06 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    bcb4:	ad400404 	addi	r21,r21,16
    bcb8:	003f1d06 	br	b930 <__alt_mem_Flash_flash_data+0xf400b930>
    bcbc:	01001504 	movi	r4,84
    bcc0:	20801c36 	bltu	r4,r2,bd34 <_malloc_r+0x75c>
    bcc4:	3804d33a 	srli	r2,r7,12
    bcc8:	11001b84 	addi	r4,r2,110
    bccc:	210b883a 	add	r5,r4,r4
    bcd0:	003f8006 	br	bad4 <__alt_mem_Flash_flash_data+0xf400bad4>
    bcd4:	3083ffcc 	andi	r2,r6,4095
    bcd8:	103f241e 	bne	r2,zero,b96c <__alt_mem_Flash_flash_data+0xf400b96c>
    bcdc:	99000217 	ldw	r4,8(r19)
    bce0:	ad85883a 	add	r2,r21,r22
    bce4:	10800054 	ori	r2,r2,1
    bce8:	20800115 	stw	r2,4(r4)
    bcec:	003f4a06 	br	ba18 <__alt_mem_Flash_flash_data+0xf400ba18>
    bcf0:	01403f04 	movi	r5,252
    bcf4:	01c01f84 	movi	r7,126
    bcf8:	003e7b06 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    bcfc:	00c00044 	movi	r3,1
    bd00:	002b883a 	mov	r21,zero
    bd04:	003f3006 	br	b9c8 <__alt_mem_Flash_flash_data+0xf400b9c8>
    bd08:	008000b4 	movhi	r2,2
    bd0c:	109fcb04 	addi	r2,r2,32556
    bd10:	15000015 	stw	r20,0(r2)
    bd14:	003f1b06 	br	b984 <__alt_mem_Flash_flash_data+0xf400b984>
    bd18:	9009883a 	mov	r4,r18
    bd1c:	81400204 	addi	r5,r16,8
    bd20:	000aa080 	call	aa08 <_free_r>
    bd24:	008000f4 	movhi	r2,3
    bd28:	10a83604 	addi	r2,r2,-24360
    bd2c:	10c00017 	ldw	r3,0(r2)
    bd30:	003f3906 	br	ba18 <__alt_mem_Flash_flash_data+0xf400ba18>
    bd34:	01005504 	movi	r4,340
    bd38:	20800436 	bltu	r4,r2,bd4c <_malloc_r+0x774>
    bd3c:	3804d3fa 	srli	r2,r7,15
    bd40:	11001dc4 	addi	r4,r2,119
    bd44:	210b883a 	add	r5,r4,r4
    bd48:	003f6206 	br	bad4 <__alt_mem_Flash_flash_data+0xf400bad4>
    bd4c:	01015504 	movi	r4,1364
    bd50:	20800436 	bltu	r4,r2,bd64 <_malloc_r+0x78c>
    bd54:	3804d4ba 	srli	r2,r7,18
    bd58:	11001f04 	addi	r4,r2,124
    bd5c:	210b883a 	add	r5,r4,r4
    bd60:	003f5c06 	br	bad4 <__alt_mem_Flash_flash_data+0xf400bad4>
    bd64:	01403f04 	movi	r5,252
    bd68:	01001f84 	movi	r4,126
    bd6c:	003f5906 	br	bad4 <__alt_mem_Flash_flash_data+0xf400bad4>
    bd70:	98800117 	ldw	r2,4(r19)
    bd74:	003fa906 	br	bc1c <__alt_mem_Flash_flash_data+0xf400bc1c>
    bd78:	6007883a 	mov	r3,r12
    bd7c:	003ea206 	br	b808 <__alt_mem_Flash_flash_data+0xf400b808>

0000bd80 <memchr>:
    bd80:	208000cc 	andi	r2,r4,3
    bd84:	280f883a 	mov	r7,r5
    bd88:	10003526 	beq	r2,zero,be60 <memchr+0xe0>
    bd8c:	30bfffc4 	addi	r2,r6,-1
    bd90:	30001b26 	beq	r6,zero,be00 <memchr+0x80>
    bd94:	21800003 	ldbu	r6,0(r4)
    bd98:	28c03fcc 	andi	r3,r5,255
    bd9c:	30c01a26 	beq	r6,r3,be08 <memchr+0x88>
    bda0:	180d883a 	mov	r6,r3
    bda4:	00000406 	br	bdb8 <memchr+0x38>
    bda8:	10001526 	beq	r2,zero,be00 <memchr+0x80>
    bdac:	20c00003 	ldbu	r3,0(r4)
    bdb0:	10bfffc4 	addi	r2,r2,-1
    bdb4:	19801426 	beq	r3,r6,be08 <memchr+0x88>
    bdb8:	21000044 	addi	r4,r4,1
    bdbc:	20c000cc 	andi	r3,r4,3
    bdc0:	183ff91e 	bne	r3,zero,bda8 <__alt_mem_Flash_flash_data+0xf400bda8>
    bdc4:	024000c4 	movi	r9,3
    bdc8:	48801136 	bltu	r9,r2,be10 <memchr+0x90>
    bdcc:	10000c26 	beq	r2,zero,be00 <memchr+0x80>
    bdd0:	20c00003 	ldbu	r3,0(r4)
    bdd4:	29403fcc 	andi	r5,r5,255
    bdd8:	19400b26 	beq	r3,r5,be08 <memchr+0x88>
    bddc:	20c00044 	addi	r3,r4,1
    bde0:	2085883a 	add	r2,r4,r2
    bde4:	39803fcc 	andi	r6,r7,255
    bde8:	00000306 	br	bdf8 <memchr+0x78>
    bdec:	18c00044 	addi	r3,r3,1
    bdf0:	197fffc3 	ldbu	r5,-1(r3)
    bdf4:	29800426 	beq	r5,r6,be08 <memchr+0x88>
    bdf8:	1809883a 	mov	r4,r3
    bdfc:	18bffb1e 	bne	r3,r2,bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    be00:	0005883a 	mov	r2,zero
    be04:	f800283a 	ret
    be08:	2005883a 	mov	r2,r4
    be0c:	f800283a 	ret
    be10:	28c03fcc 	andi	r3,r5,255
    be14:	1810923a 	slli	r8,r3,8
    be18:	02ffbff4 	movhi	r11,65279
    be1c:	02a02074 	movhi	r10,32897
    be20:	40c6b03a 	or	r3,r8,r3
    be24:	1810943a 	slli	r8,r3,16
    be28:	5affbfc4 	addi	r11,r11,-257
    be2c:	52a02004 	addi	r10,r10,-32640
    be30:	40d0b03a 	or	r8,r8,r3
    be34:	20c00017 	ldw	r3,0(r4)
    be38:	40c6f03a 	xor	r3,r8,r3
    be3c:	1acd883a 	add	r6,r3,r11
    be40:	00c6303a 	nor	r3,zero,r3
    be44:	30c6703a 	and	r3,r6,r3
    be48:	1a86703a 	and	r3,r3,r10
    be4c:	183fdf1e 	bne	r3,zero,bdcc <__alt_mem_Flash_flash_data+0xf400bdcc>
    be50:	10bfff04 	addi	r2,r2,-4
    be54:	21000104 	addi	r4,r4,4
    be58:	48bff636 	bltu	r9,r2,be34 <__alt_mem_Flash_flash_data+0xf400be34>
    be5c:	003fdb06 	br	bdcc <__alt_mem_Flash_flash_data+0xf400bdcc>
    be60:	3005883a 	mov	r2,r6
    be64:	003fd706 	br	bdc4 <__alt_mem_Flash_flash_data+0xf400bdc4>

0000be68 <memcpy>:
    be68:	deffff04 	addi	sp,sp,-4
    be6c:	dc000015 	stw	r16,0(sp)
    be70:	00c003c4 	movi	r3,15
    be74:	2005883a 	mov	r2,r4
    be78:	1980432e 	bgeu	r3,r6,bf88 <memcpy+0x120>
    be7c:	2146b03a 	or	r3,r4,r5
    be80:	18c000cc 	andi	r3,r3,3
    be84:	1800421e 	bne	r3,zero,bf90 <memcpy+0x128>
    be88:	343ffc04 	addi	r16,r6,-16
    be8c:	8020d13a 	srli	r16,r16,4
    be90:	28c00104 	addi	r3,r5,4
    be94:	23400104 	addi	r13,r4,4
    be98:	801e913a 	slli	r15,r16,4
    be9c:	2b000204 	addi	r12,r5,8
    bea0:	22c00204 	addi	r11,r4,8
    bea4:	7bc00504 	addi	r15,r15,20
    bea8:	2a800304 	addi	r10,r5,12
    beac:	22400304 	addi	r9,r4,12
    beb0:	2bdf883a 	add	r15,r5,r15
    beb4:	2811883a 	mov	r8,r5
    beb8:	200f883a 	mov	r7,r4
    bebc:	41000017 	ldw	r4,0(r8)
    bec0:	39c00404 	addi	r7,r7,16
    bec4:	18c00404 	addi	r3,r3,16
    bec8:	393ffc15 	stw	r4,-16(r7)
    becc:	1bbffc17 	ldw	r14,-16(r3)
    bed0:	6b400404 	addi	r13,r13,16
    bed4:	5ac00404 	addi	r11,r11,16
    bed8:	6bbffc15 	stw	r14,-16(r13)
    bedc:	63800017 	ldw	r14,0(r12)
    bee0:	4a400404 	addi	r9,r9,16
    bee4:	42000404 	addi	r8,r8,16
    bee8:	5bbffc15 	stw	r14,-16(r11)
    beec:	53800017 	ldw	r14,0(r10)
    bef0:	63000404 	addi	r12,r12,16
    bef4:	52800404 	addi	r10,r10,16
    bef8:	4bbffc15 	stw	r14,-16(r9)
    befc:	1bffef1e 	bne	r3,r15,bebc <__alt_mem_Flash_flash_data+0xf400bebc>
    bf00:	81c00044 	addi	r7,r16,1
    bf04:	380e913a 	slli	r7,r7,4
    bf08:	310003cc 	andi	r4,r6,15
    bf0c:	02c000c4 	movi	r11,3
    bf10:	11c7883a 	add	r3,r2,r7
    bf14:	29cb883a 	add	r5,r5,r7
    bf18:	59001f2e 	bgeu	r11,r4,bf98 <memcpy+0x130>
    bf1c:	1813883a 	mov	r9,r3
    bf20:	2811883a 	mov	r8,r5
    bf24:	200f883a 	mov	r7,r4
    bf28:	42800017 	ldw	r10,0(r8)
    bf2c:	4a400104 	addi	r9,r9,4
    bf30:	39ffff04 	addi	r7,r7,-4
    bf34:	4abfff15 	stw	r10,-4(r9)
    bf38:	42000104 	addi	r8,r8,4
    bf3c:	59fffa36 	bltu	r11,r7,bf28 <__alt_mem_Flash_flash_data+0xf400bf28>
    bf40:	213fff04 	addi	r4,r4,-4
    bf44:	2008d0ba 	srli	r4,r4,2
    bf48:	318000cc 	andi	r6,r6,3
    bf4c:	21000044 	addi	r4,r4,1
    bf50:	2109883a 	add	r4,r4,r4
    bf54:	2109883a 	add	r4,r4,r4
    bf58:	1907883a 	add	r3,r3,r4
    bf5c:	290b883a 	add	r5,r5,r4
    bf60:	30000626 	beq	r6,zero,bf7c <memcpy+0x114>
    bf64:	198d883a 	add	r6,r3,r6
    bf68:	29c00003 	ldbu	r7,0(r5)
    bf6c:	18c00044 	addi	r3,r3,1
    bf70:	29400044 	addi	r5,r5,1
    bf74:	19ffffc5 	stb	r7,-1(r3)
    bf78:	19bffb1e 	bne	r3,r6,bf68 <__alt_mem_Flash_flash_data+0xf400bf68>
    bf7c:	dc000017 	ldw	r16,0(sp)
    bf80:	dec00104 	addi	sp,sp,4
    bf84:	f800283a 	ret
    bf88:	2007883a 	mov	r3,r4
    bf8c:	003ff406 	br	bf60 <__alt_mem_Flash_flash_data+0xf400bf60>
    bf90:	2007883a 	mov	r3,r4
    bf94:	003ff306 	br	bf64 <__alt_mem_Flash_flash_data+0xf400bf64>
    bf98:	200d883a 	mov	r6,r4
    bf9c:	003ff006 	br	bf60 <__alt_mem_Flash_flash_data+0xf400bf60>

0000bfa0 <memmove>:
    bfa0:	2005883a 	mov	r2,r4
    bfa4:	29000b2e 	bgeu	r5,r4,bfd4 <memmove+0x34>
    bfa8:	298f883a 	add	r7,r5,r6
    bfac:	21c0092e 	bgeu	r4,r7,bfd4 <memmove+0x34>
    bfb0:	2187883a 	add	r3,r4,r6
    bfb4:	198bc83a 	sub	r5,r3,r6
    bfb8:	30004b26 	beq	r6,zero,c0e8 <memmove+0x148>
    bfbc:	39ffffc4 	addi	r7,r7,-1
    bfc0:	39000003 	ldbu	r4,0(r7)
    bfc4:	18ffffc4 	addi	r3,r3,-1
    bfc8:	19000005 	stb	r4,0(r3)
    bfcc:	197ffb1e 	bne	r3,r5,bfbc <__alt_mem_Flash_flash_data+0xf400bfbc>
    bfd0:	f800283a 	ret
    bfd4:	00c003c4 	movi	r3,15
    bfd8:	1980412e 	bgeu	r3,r6,c0e0 <memmove+0x140>
    bfdc:	1146b03a 	or	r3,r2,r5
    bfe0:	18c000cc 	andi	r3,r3,3
    bfe4:	1800411e 	bne	r3,zero,c0ec <memmove+0x14c>
    bfe8:	33fffc04 	addi	r15,r6,-16
    bfec:	781ed13a 	srli	r15,r15,4
    bff0:	28c00104 	addi	r3,r5,4
    bff4:	13400104 	addi	r13,r2,4
    bff8:	781c913a 	slli	r14,r15,4
    bffc:	2b000204 	addi	r12,r5,8
    c000:	12c00204 	addi	r11,r2,8
    c004:	73800504 	addi	r14,r14,20
    c008:	2a800304 	addi	r10,r5,12
    c00c:	12400304 	addi	r9,r2,12
    c010:	2b9d883a 	add	r14,r5,r14
    c014:	2811883a 	mov	r8,r5
    c018:	100f883a 	mov	r7,r2
    c01c:	41000017 	ldw	r4,0(r8)
    c020:	39c00404 	addi	r7,r7,16
    c024:	18c00404 	addi	r3,r3,16
    c028:	393ffc15 	stw	r4,-16(r7)
    c02c:	193ffc17 	ldw	r4,-16(r3)
    c030:	6b400404 	addi	r13,r13,16
    c034:	5ac00404 	addi	r11,r11,16
    c038:	693ffc15 	stw	r4,-16(r13)
    c03c:	61000017 	ldw	r4,0(r12)
    c040:	4a400404 	addi	r9,r9,16
    c044:	42000404 	addi	r8,r8,16
    c048:	593ffc15 	stw	r4,-16(r11)
    c04c:	51000017 	ldw	r4,0(r10)
    c050:	63000404 	addi	r12,r12,16
    c054:	52800404 	addi	r10,r10,16
    c058:	493ffc15 	stw	r4,-16(r9)
    c05c:	1bbfef1e 	bne	r3,r14,c01c <__alt_mem_Flash_flash_data+0xf400c01c>
    c060:	79000044 	addi	r4,r15,1
    c064:	2008913a 	slli	r4,r4,4
    c068:	328003cc 	andi	r10,r6,15
    c06c:	02c000c4 	movi	r11,3
    c070:	1107883a 	add	r3,r2,r4
    c074:	290b883a 	add	r5,r5,r4
    c078:	5a801e2e 	bgeu	r11,r10,c0f4 <memmove+0x154>
    c07c:	1813883a 	mov	r9,r3
    c080:	2811883a 	mov	r8,r5
    c084:	500f883a 	mov	r7,r10
    c088:	41000017 	ldw	r4,0(r8)
    c08c:	4a400104 	addi	r9,r9,4
    c090:	39ffff04 	addi	r7,r7,-4
    c094:	493fff15 	stw	r4,-4(r9)
    c098:	42000104 	addi	r8,r8,4
    c09c:	59fffa36 	bltu	r11,r7,c088 <__alt_mem_Flash_flash_data+0xf400c088>
    c0a0:	513fff04 	addi	r4,r10,-4
    c0a4:	2008d0ba 	srli	r4,r4,2
    c0a8:	318000cc 	andi	r6,r6,3
    c0ac:	21000044 	addi	r4,r4,1
    c0b0:	2109883a 	add	r4,r4,r4
    c0b4:	2109883a 	add	r4,r4,r4
    c0b8:	1907883a 	add	r3,r3,r4
    c0bc:	290b883a 	add	r5,r5,r4
    c0c0:	30000926 	beq	r6,zero,c0e8 <memmove+0x148>
    c0c4:	198d883a 	add	r6,r3,r6
    c0c8:	29c00003 	ldbu	r7,0(r5)
    c0cc:	18c00044 	addi	r3,r3,1
    c0d0:	29400044 	addi	r5,r5,1
    c0d4:	19ffffc5 	stb	r7,-1(r3)
    c0d8:	19bffb1e 	bne	r3,r6,c0c8 <__alt_mem_Flash_flash_data+0xf400c0c8>
    c0dc:	f800283a 	ret
    c0e0:	1007883a 	mov	r3,r2
    c0e4:	003ff606 	br	c0c0 <__alt_mem_Flash_flash_data+0xf400c0c0>
    c0e8:	f800283a 	ret
    c0ec:	1007883a 	mov	r3,r2
    c0f0:	003ff406 	br	c0c4 <__alt_mem_Flash_flash_data+0xf400c0c4>
    c0f4:	500d883a 	mov	r6,r10
    c0f8:	003ff106 	br	c0c0 <__alt_mem_Flash_flash_data+0xf400c0c0>

0000c0fc <_Balloc>:
    c0fc:	20801317 	ldw	r2,76(r4)
    c100:	defffc04 	addi	sp,sp,-16
    c104:	dc400115 	stw	r17,4(sp)
    c108:	dc000015 	stw	r16,0(sp)
    c10c:	dfc00315 	stw	ra,12(sp)
    c110:	dc800215 	stw	r18,8(sp)
    c114:	2023883a 	mov	r17,r4
    c118:	2821883a 	mov	r16,r5
    c11c:	10000f26 	beq	r2,zero,c15c <_Balloc+0x60>
    c120:	8407883a 	add	r3,r16,r16
    c124:	18c7883a 	add	r3,r3,r3
    c128:	10c7883a 	add	r3,r2,r3
    c12c:	18800017 	ldw	r2,0(r3)
    c130:	10001126 	beq	r2,zero,c178 <_Balloc+0x7c>
    c134:	11000017 	ldw	r4,0(r2)
    c138:	19000015 	stw	r4,0(r3)
    c13c:	10000415 	stw	zero,16(r2)
    c140:	10000315 	stw	zero,12(r2)
    c144:	dfc00317 	ldw	ra,12(sp)
    c148:	dc800217 	ldw	r18,8(sp)
    c14c:	dc400117 	ldw	r17,4(sp)
    c150:	dc000017 	ldw	r16,0(sp)
    c154:	dec00404 	addi	sp,sp,16
    c158:	f800283a 	ret
    c15c:	01400104 	movi	r5,4
    c160:	01800844 	movi	r6,33
    c164:	00102e40 	call	102e4 <_calloc_r>
    c168:	88801315 	stw	r2,76(r17)
    c16c:	103fec1e 	bne	r2,zero,c120 <__alt_mem_Flash_flash_data+0xf400c120>
    c170:	0005883a 	mov	r2,zero
    c174:	003ff306 	br	c144 <__alt_mem_Flash_flash_data+0xf400c144>
    c178:	01400044 	movi	r5,1
    c17c:	2c24983a 	sll	r18,r5,r16
    c180:	8809883a 	mov	r4,r17
    c184:	91800144 	addi	r6,r18,5
    c188:	318d883a 	add	r6,r6,r6
    c18c:	318d883a 	add	r6,r6,r6
    c190:	00102e40 	call	102e4 <_calloc_r>
    c194:	103ff626 	beq	r2,zero,c170 <__alt_mem_Flash_flash_data+0xf400c170>
    c198:	14000115 	stw	r16,4(r2)
    c19c:	14800215 	stw	r18,8(r2)
    c1a0:	003fe606 	br	c13c <__alt_mem_Flash_flash_data+0xf400c13c>

0000c1a4 <_Bfree>:
    c1a4:	28000826 	beq	r5,zero,c1c8 <_Bfree+0x24>
    c1a8:	28c00117 	ldw	r3,4(r5)
    c1ac:	20801317 	ldw	r2,76(r4)
    c1b0:	18c7883a 	add	r3,r3,r3
    c1b4:	18c7883a 	add	r3,r3,r3
    c1b8:	10c5883a 	add	r2,r2,r3
    c1bc:	10c00017 	ldw	r3,0(r2)
    c1c0:	28c00015 	stw	r3,0(r5)
    c1c4:	11400015 	stw	r5,0(r2)
    c1c8:	f800283a 	ret

0000c1cc <__multadd>:
    c1cc:	defffa04 	addi	sp,sp,-24
    c1d0:	dc000115 	stw	r16,4(sp)
    c1d4:	2c000417 	ldw	r16,16(r5)
    c1d8:	dc800315 	stw	r18,12(sp)
    c1dc:	dc400215 	stw	r17,8(sp)
    c1e0:	dfc00515 	stw	ra,20(sp)
    c1e4:	dcc00415 	stw	r19,16(sp)
    c1e8:	2823883a 	mov	r17,r5
    c1ec:	2025883a 	mov	r18,r4
    c1f0:	2a400504 	addi	r9,r5,20
    c1f4:	0015883a 	mov	r10,zero
    c1f8:	4a000017 	ldw	r8,0(r9)
    c1fc:	4a400104 	addi	r9,r9,4
    c200:	52800044 	addi	r10,r10,1
    c204:	40ffffcc 	andi	r3,r8,65535
    c208:	1987383a 	mul	r3,r3,r6
    c20c:	4010d43a 	srli	r8,r8,16
    c210:	19cf883a 	add	r7,r3,r7
    c214:	4191383a 	mul	r8,r8,r6
    c218:	3816d43a 	srli	r11,r7,16
    c21c:	38ffffcc 	andi	r3,r7,65535
    c220:	5a0f883a 	add	r7,r11,r8
    c224:	3810943a 	slli	r8,r7,16
    c228:	380ed43a 	srli	r7,r7,16
    c22c:	40c7883a 	add	r3,r8,r3
    c230:	48ffff15 	stw	r3,-4(r9)
    c234:	543ff016 	blt	r10,r16,c1f8 <__alt_mem_Flash_flash_data+0xf400c1f8>
    c238:	38000926 	beq	r7,zero,c260 <__multadd+0x94>
    c23c:	88800217 	ldw	r2,8(r17)
    c240:	80800f0e 	bge	r16,r2,c280 <__multadd+0xb4>
    c244:	80800144 	addi	r2,r16,5
    c248:	1085883a 	add	r2,r2,r2
    c24c:	1085883a 	add	r2,r2,r2
    c250:	8885883a 	add	r2,r17,r2
    c254:	11c00015 	stw	r7,0(r2)
    c258:	84000044 	addi	r16,r16,1
    c25c:	8c000415 	stw	r16,16(r17)
    c260:	8805883a 	mov	r2,r17
    c264:	dfc00517 	ldw	ra,20(sp)
    c268:	dcc00417 	ldw	r19,16(sp)
    c26c:	dc800317 	ldw	r18,12(sp)
    c270:	dc400217 	ldw	r17,8(sp)
    c274:	dc000117 	ldw	r16,4(sp)
    c278:	dec00604 	addi	sp,sp,24
    c27c:	f800283a 	ret
    c280:	89400117 	ldw	r5,4(r17)
    c284:	9009883a 	mov	r4,r18
    c288:	d9c00015 	stw	r7,0(sp)
    c28c:	29400044 	addi	r5,r5,1
    c290:	000c0fc0 	call	c0fc <_Balloc>
    c294:	89800417 	ldw	r6,16(r17)
    c298:	11000304 	addi	r4,r2,12
    c29c:	89400304 	addi	r5,r17,12
    c2a0:	31800084 	addi	r6,r6,2
    c2a4:	318d883a 	add	r6,r6,r6
    c2a8:	318d883a 	add	r6,r6,r6
    c2ac:	1027883a 	mov	r19,r2
    c2b0:	000be680 	call	be68 <memcpy>
    c2b4:	d9c00017 	ldw	r7,0(sp)
    c2b8:	88000a26 	beq	r17,zero,c2e4 <__multadd+0x118>
    c2bc:	89000117 	ldw	r4,4(r17)
    c2c0:	90c01317 	ldw	r3,76(r18)
    c2c4:	2109883a 	add	r4,r4,r4
    c2c8:	2109883a 	add	r4,r4,r4
    c2cc:	1907883a 	add	r3,r3,r4
    c2d0:	18800017 	ldw	r2,0(r3)
    c2d4:	88800015 	stw	r2,0(r17)
    c2d8:	1c400015 	stw	r17,0(r3)
    c2dc:	9823883a 	mov	r17,r19
    c2e0:	003fd806 	br	c244 <__alt_mem_Flash_flash_data+0xf400c244>
    c2e4:	9823883a 	mov	r17,r19
    c2e8:	003fd606 	br	c244 <__alt_mem_Flash_flash_data+0xf400c244>

0000c2ec <__s2b>:
    c2ec:	defff904 	addi	sp,sp,-28
    c2f0:	dc400115 	stw	r17,4(sp)
    c2f4:	dc000015 	stw	r16,0(sp)
    c2f8:	2023883a 	mov	r17,r4
    c2fc:	2821883a 	mov	r16,r5
    c300:	39000204 	addi	r4,r7,8
    c304:	01400244 	movi	r5,9
    c308:	dcc00315 	stw	r19,12(sp)
    c30c:	dc800215 	stw	r18,8(sp)
    c310:	dfc00615 	stw	ra,24(sp)
    c314:	dd400515 	stw	r21,20(sp)
    c318:	dd000415 	stw	r20,16(sp)
    c31c:	3825883a 	mov	r18,r7
    c320:	3027883a 	mov	r19,r6
    c324:	00115940 	call	11594 <__divsi3>
    c328:	00c00044 	movi	r3,1
    c32c:	000b883a 	mov	r5,zero
    c330:	1880030e 	bge	r3,r2,c340 <__s2b+0x54>
    c334:	18c7883a 	add	r3,r3,r3
    c338:	29400044 	addi	r5,r5,1
    c33c:	18bffd16 	blt	r3,r2,c334 <__alt_mem_Flash_flash_data+0xf400c334>
    c340:	8809883a 	mov	r4,r17
    c344:	000c0fc0 	call	c0fc <_Balloc>
    c348:	d8c00717 	ldw	r3,28(sp)
    c34c:	10c00515 	stw	r3,20(r2)
    c350:	00c00044 	movi	r3,1
    c354:	10c00415 	stw	r3,16(r2)
    c358:	00c00244 	movi	r3,9
    c35c:	1cc0210e 	bge	r3,r19,c3e4 <__s2b+0xf8>
    c360:	80eb883a 	add	r21,r16,r3
    c364:	a829883a 	mov	r20,r21
    c368:	84e1883a 	add	r16,r16,r19
    c36c:	a1c00007 	ldb	r7,0(r20)
    c370:	8809883a 	mov	r4,r17
    c374:	a5000044 	addi	r20,r20,1
    c378:	100b883a 	mov	r5,r2
    c37c:	01800284 	movi	r6,10
    c380:	39fff404 	addi	r7,r7,-48
    c384:	000c1cc0 	call	c1cc <__multadd>
    c388:	a43ff81e 	bne	r20,r16,c36c <__alt_mem_Flash_flash_data+0xf400c36c>
    c38c:	ace1883a 	add	r16,r21,r19
    c390:	843ffe04 	addi	r16,r16,-8
    c394:	9c800a0e 	bge	r19,r18,c3c0 <__s2b+0xd4>
    c398:	94e5c83a 	sub	r18,r18,r19
    c39c:	84a5883a 	add	r18,r16,r18
    c3a0:	81c00007 	ldb	r7,0(r16)
    c3a4:	8809883a 	mov	r4,r17
    c3a8:	84000044 	addi	r16,r16,1
    c3ac:	100b883a 	mov	r5,r2
    c3b0:	01800284 	movi	r6,10
    c3b4:	39fff404 	addi	r7,r7,-48
    c3b8:	000c1cc0 	call	c1cc <__multadd>
    c3bc:	84bff81e 	bne	r16,r18,c3a0 <__alt_mem_Flash_flash_data+0xf400c3a0>
    c3c0:	dfc00617 	ldw	ra,24(sp)
    c3c4:	dd400517 	ldw	r21,20(sp)
    c3c8:	dd000417 	ldw	r20,16(sp)
    c3cc:	dcc00317 	ldw	r19,12(sp)
    c3d0:	dc800217 	ldw	r18,8(sp)
    c3d4:	dc400117 	ldw	r17,4(sp)
    c3d8:	dc000017 	ldw	r16,0(sp)
    c3dc:	dec00704 	addi	sp,sp,28
    c3e0:	f800283a 	ret
    c3e4:	84000284 	addi	r16,r16,10
    c3e8:	1827883a 	mov	r19,r3
    c3ec:	003fe906 	br	c394 <__alt_mem_Flash_flash_data+0xf400c394>

0000c3f0 <__hi0bits>:
    c3f0:	20bfffec 	andhi	r2,r4,65535
    c3f4:	1000141e 	bne	r2,zero,c448 <__hi0bits+0x58>
    c3f8:	2008943a 	slli	r4,r4,16
    c3fc:	00800404 	movi	r2,16
    c400:	20ffc02c 	andhi	r3,r4,65280
    c404:	1800021e 	bne	r3,zero,c410 <__hi0bits+0x20>
    c408:	2008923a 	slli	r4,r4,8
    c40c:	10800204 	addi	r2,r2,8
    c410:	20fc002c 	andhi	r3,r4,61440
    c414:	1800021e 	bne	r3,zero,c420 <__hi0bits+0x30>
    c418:	2008913a 	slli	r4,r4,4
    c41c:	10800104 	addi	r2,r2,4
    c420:	20f0002c 	andhi	r3,r4,49152
    c424:	1800031e 	bne	r3,zero,c434 <__hi0bits+0x44>
    c428:	2109883a 	add	r4,r4,r4
    c42c:	10800084 	addi	r2,r2,2
    c430:	2109883a 	add	r4,r4,r4
    c434:	20000316 	blt	r4,zero,c444 <__hi0bits+0x54>
    c438:	2110002c 	andhi	r4,r4,16384
    c43c:	2000041e 	bne	r4,zero,c450 <__hi0bits+0x60>
    c440:	00800804 	movi	r2,32
    c444:	f800283a 	ret
    c448:	0005883a 	mov	r2,zero
    c44c:	003fec06 	br	c400 <__alt_mem_Flash_flash_data+0xf400c400>
    c450:	10800044 	addi	r2,r2,1
    c454:	f800283a 	ret

0000c458 <__lo0bits>:
    c458:	20c00017 	ldw	r3,0(r4)
    c45c:	188001cc 	andi	r2,r3,7
    c460:	10000826 	beq	r2,zero,c484 <__lo0bits+0x2c>
    c464:	1880004c 	andi	r2,r3,1
    c468:	1000211e 	bne	r2,zero,c4f0 <__lo0bits+0x98>
    c46c:	1880008c 	andi	r2,r3,2
    c470:	1000211e 	bne	r2,zero,c4f8 <__lo0bits+0xa0>
    c474:	1806d0ba 	srli	r3,r3,2
    c478:	00800084 	movi	r2,2
    c47c:	20c00015 	stw	r3,0(r4)
    c480:	f800283a 	ret
    c484:	18bfffcc 	andi	r2,r3,65535
    c488:	10001326 	beq	r2,zero,c4d8 <__lo0bits+0x80>
    c48c:	0005883a 	mov	r2,zero
    c490:	19403fcc 	andi	r5,r3,255
    c494:	2800021e 	bne	r5,zero,c4a0 <__lo0bits+0x48>
    c498:	1806d23a 	srli	r3,r3,8
    c49c:	10800204 	addi	r2,r2,8
    c4a0:	194003cc 	andi	r5,r3,15
    c4a4:	2800021e 	bne	r5,zero,c4b0 <__lo0bits+0x58>
    c4a8:	1806d13a 	srli	r3,r3,4
    c4ac:	10800104 	addi	r2,r2,4
    c4b0:	194000cc 	andi	r5,r3,3
    c4b4:	2800021e 	bne	r5,zero,c4c0 <__lo0bits+0x68>
    c4b8:	1806d0ba 	srli	r3,r3,2
    c4bc:	10800084 	addi	r2,r2,2
    c4c0:	1940004c 	andi	r5,r3,1
    c4c4:	2800081e 	bne	r5,zero,c4e8 <__lo0bits+0x90>
    c4c8:	1806d07a 	srli	r3,r3,1
    c4cc:	1800051e 	bne	r3,zero,c4e4 <__lo0bits+0x8c>
    c4d0:	00800804 	movi	r2,32
    c4d4:	f800283a 	ret
    c4d8:	1806d43a 	srli	r3,r3,16
    c4dc:	00800404 	movi	r2,16
    c4e0:	003feb06 	br	c490 <__alt_mem_Flash_flash_data+0xf400c490>
    c4e4:	10800044 	addi	r2,r2,1
    c4e8:	20c00015 	stw	r3,0(r4)
    c4ec:	f800283a 	ret
    c4f0:	0005883a 	mov	r2,zero
    c4f4:	f800283a 	ret
    c4f8:	1806d07a 	srli	r3,r3,1
    c4fc:	00800044 	movi	r2,1
    c500:	20c00015 	stw	r3,0(r4)
    c504:	f800283a 	ret

0000c508 <__i2b>:
    c508:	defffd04 	addi	sp,sp,-12
    c50c:	dc000015 	stw	r16,0(sp)
    c510:	04000044 	movi	r16,1
    c514:	dc400115 	stw	r17,4(sp)
    c518:	2823883a 	mov	r17,r5
    c51c:	800b883a 	mov	r5,r16
    c520:	dfc00215 	stw	ra,8(sp)
    c524:	000c0fc0 	call	c0fc <_Balloc>
    c528:	14400515 	stw	r17,20(r2)
    c52c:	14000415 	stw	r16,16(r2)
    c530:	dfc00217 	ldw	ra,8(sp)
    c534:	dc400117 	ldw	r17,4(sp)
    c538:	dc000017 	ldw	r16,0(sp)
    c53c:	dec00304 	addi	sp,sp,12
    c540:	f800283a 	ret

0000c544 <__multiply>:
    c544:	defffa04 	addi	sp,sp,-24
    c548:	dcc00315 	stw	r19,12(sp)
    c54c:	dc800215 	stw	r18,8(sp)
    c550:	2cc00417 	ldw	r19,16(r5)
    c554:	34800417 	ldw	r18,16(r6)
    c558:	dd000415 	stw	r20,16(sp)
    c55c:	dc400115 	stw	r17,4(sp)
    c560:	dfc00515 	stw	ra,20(sp)
    c564:	dc000015 	stw	r16,0(sp)
    c568:	2829883a 	mov	r20,r5
    c56c:	3023883a 	mov	r17,r6
    c570:	9c807016 	blt	r19,r18,c734 <__multiply+0x1f0>
    c574:	9005883a 	mov	r2,r18
    c578:	9825883a 	mov	r18,r19
    c57c:	1027883a 	mov	r19,r2
    c580:	a0800217 	ldw	r2,8(r20)
    c584:	94e1883a 	add	r16,r18,r19
    c588:	a1400117 	ldw	r5,4(r20)
    c58c:	1400010e 	bge	r2,r16,c594 <__multiply+0x50>
    c590:	29400044 	addi	r5,r5,1
    c594:	000c0fc0 	call	c0fc <_Balloc>
    c598:	8417883a 	add	r11,r16,r16
    c59c:	13000504 	addi	r12,r2,20
    c5a0:	5ad7883a 	add	r11,r11,r11
    c5a4:	62d7883a 	add	r11,r12,r11
    c5a8:	6007883a 	mov	r3,r12
    c5ac:	62c0032e 	bgeu	r12,r11,c5bc <__multiply+0x78>
    c5b0:	18000015 	stw	zero,0(r3)
    c5b4:	18c00104 	addi	r3,r3,4
    c5b8:	1afffd36 	bltu	r3,r11,c5b0 <__alt_mem_Flash_flash_data+0xf400c5b0>
    c5bc:	9ce7883a 	add	r19,r19,r19
    c5c0:	94a5883a 	add	r18,r18,r18
    c5c4:	89800504 	addi	r6,r17,20
    c5c8:	9ce7883a 	add	r19,r19,r19
    c5cc:	a3800504 	addi	r14,r20,20
    c5d0:	94a5883a 	add	r18,r18,r18
    c5d4:	34db883a 	add	r13,r6,r19
    c5d8:	7495883a 	add	r10,r14,r18
    c5dc:	3340422e 	bgeu	r6,r13,c6e8 <__multiply+0x1a4>
    c5e0:	34400017 	ldw	r17,0(r6)
    c5e4:	8cbfffcc 	andi	r18,r17,65535
    c5e8:	90001b26 	beq	r18,zero,c658 <__multiply+0x114>
    c5ec:	6013883a 	mov	r9,r12
    c5f0:	7023883a 	mov	r17,r14
    c5f4:	0011883a 	mov	r8,zero
    c5f8:	88c00017 	ldw	r3,0(r17)
    c5fc:	4bc00017 	ldw	r15,0(r9)
    c600:	8c400104 	addi	r17,r17,4
    c604:	19ffffcc 	andi	r7,r3,65535
    c608:	3c8f383a 	mul	r7,r7,r18
    c60c:	1808d43a 	srli	r4,r3,16
    c610:	797fffcc 	andi	r5,r15,65535
    c614:	29cb883a 	add	r5,r5,r7
    c618:	2a0b883a 	add	r5,r5,r8
    c61c:	2489383a 	mul	r4,r4,r18
    c620:	7806d43a 	srli	r3,r15,16
    c624:	2810d43a 	srli	r8,r5,16
    c628:	297fffcc 	andi	r5,r5,65535
    c62c:	1907883a 	add	r3,r3,r4
    c630:	1a07883a 	add	r3,r3,r8
    c634:	1808943a 	slli	r4,r3,16
    c638:	480f883a 	mov	r7,r9
    c63c:	1810d43a 	srli	r8,r3,16
    c640:	214ab03a 	or	r5,r4,r5
    c644:	49400015 	stw	r5,0(r9)
    c648:	4a400104 	addi	r9,r9,4
    c64c:	8abfea36 	bltu	r17,r10,c5f8 <__alt_mem_Flash_flash_data+0xf400c5f8>
    c650:	3a000115 	stw	r8,4(r7)
    c654:	34400017 	ldw	r17,0(r6)
    c658:	8822d43a 	srli	r17,r17,16
    c65c:	88001f26 	beq	r17,zero,c6dc <__multiply+0x198>
    c660:	60c00017 	ldw	r3,0(r12)
    c664:	7013883a 	mov	r9,r14
    c668:	601f883a 	mov	r15,r12
    c66c:	1811883a 	mov	r8,r3
    c670:	6027883a 	mov	r19,r12
    c674:	000f883a 	mov	r7,zero
    c678:	00000106 	br	c680 <__multiply+0x13c>
    c67c:	9027883a 	mov	r19,r18
    c680:	4940000b 	ldhu	r5,0(r9)
    c684:	4010d43a 	srli	r8,r8,16
    c688:	193fffcc 	andi	r4,r3,65535
    c68c:	2c4b383a 	mul	r5,r5,r17
    c690:	7bc00104 	addi	r15,r15,4
    c694:	4a400104 	addi	r9,r9,4
    c698:	2a0b883a 	add	r5,r5,r8
    c69c:	29cb883a 	add	r5,r5,r7
    c6a0:	2806943a 	slli	r3,r5,16
    c6a4:	9c800104 	addi	r18,r19,4
    c6a8:	280ad43a 	srli	r5,r5,16
    c6ac:	1908b03a 	or	r4,r3,r4
    c6b0:	793fff15 	stw	r4,-4(r15)
    c6b4:	48ffff17 	ldw	r3,-4(r9)
    c6b8:	92000017 	ldw	r8,0(r18)
    c6bc:	1806d43a 	srli	r3,r3,16
    c6c0:	413fffcc 	andi	r4,r8,65535
    c6c4:	1c47383a 	mul	r3,r3,r17
    c6c8:	1907883a 	add	r3,r3,r4
    c6cc:	1947883a 	add	r3,r3,r5
    c6d0:	180ed43a 	srli	r7,r3,16
    c6d4:	4abfe936 	bltu	r9,r10,c67c <__alt_mem_Flash_flash_data+0xf400c67c>
    c6d8:	98c00115 	stw	r3,4(r19)
    c6dc:	31800104 	addi	r6,r6,4
    c6e0:	63000104 	addi	r12,r12,4
    c6e4:	337fbe36 	bltu	r6,r13,c5e0 <__alt_mem_Flash_flash_data+0xf400c5e0>
    c6e8:	0400090e 	bge	zero,r16,c710 <__multiply+0x1cc>
    c6ec:	58ffff17 	ldw	r3,-4(r11)
    c6f0:	5affff04 	addi	r11,r11,-4
    c6f4:	18000326 	beq	r3,zero,c704 <__multiply+0x1c0>
    c6f8:	00000506 	br	c710 <__multiply+0x1cc>
    c6fc:	58c00017 	ldw	r3,0(r11)
    c700:	1800031e 	bne	r3,zero,c710 <__multiply+0x1cc>
    c704:	843fffc4 	addi	r16,r16,-1
    c708:	5affff04 	addi	r11,r11,-4
    c70c:	803ffb1e 	bne	r16,zero,c6fc <__alt_mem_Flash_flash_data+0xf400c6fc>
    c710:	14000415 	stw	r16,16(r2)
    c714:	dfc00517 	ldw	ra,20(sp)
    c718:	dd000417 	ldw	r20,16(sp)
    c71c:	dcc00317 	ldw	r19,12(sp)
    c720:	dc800217 	ldw	r18,8(sp)
    c724:	dc400117 	ldw	r17,4(sp)
    c728:	dc000017 	ldw	r16,0(sp)
    c72c:	dec00604 	addi	sp,sp,24
    c730:	f800283a 	ret
    c734:	3029883a 	mov	r20,r6
    c738:	2823883a 	mov	r17,r5
    c73c:	003f9006 	br	c580 <__alt_mem_Flash_flash_data+0xf400c580>

0000c740 <__pow5mult>:
    c740:	defffa04 	addi	sp,sp,-24
    c744:	dcc00315 	stw	r19,12(sp)
    c748:	dc800215 	stw	r18,8(sp)
    c74c:	dc000015 	stw	r16,0(sp)
    c750:	dfc00515 	stw	ra,20(sp)
    c754:	dd000415 	stw	r20,16(sp)
    c758:	dc400115 	stw	r17,4(sp)
    c75c:	308000cc 	andi	r2,r6,3
    c760:	3021883a 	mov	r16,r6
    c764:	2027883a 	mov	r19,r4
    c768:	2825883a 	mov	r18,r5
    c76c:	10002e1e 	bne	r2,zero,c828 <__pow5mult+0xe8>
    c770:	8021d0ba 	srai	r16,r16,2
    c774:	80001a26 	beq	r16,zero,c7e0 <__pow5mult+0xa0>
    c778:	9c401217 	ldw	r17,72(r19)
    c77c:	8800061e 	bne	r17,zero,c798 <__pow5mult+0x58>
    c780:	00003406 	br	c854 <__pow5mult+0x114>
    c784:	8021d07a 	srai	r16,r16,1
    c788:	80001526 	beq	r16,zero,c7e0 <__pow5mult+0xa0>
    c78c:	88800017 	ldw	r2,0(r17)
    c790:	10001c26 	beq	r2,zero,c804 <__pow5mult+0xc4>
    c794:	1023883a 	mov	r17,r2
    c798:	80c0004c 	andi	r3,r16,1
    c79c:	183ff926 	beq	r3,zero,c784 <__alt_mem_Flash_flash_data+0xf400c784>
    c7a0:	900b883a 	mov	r5,r18
    c7a4:	880d883a 	mov	r6,r17
    c7a8:	9809883a 	mov	r4,r19
    c7ac:	000c5440 	call	c544 <__multiply>
    c7b0:	90001b26 	beq	r18,zero,c820 <__pow5mult+0xe0>
    c7b4:	91c00117 	ldw	r7,4(r18)
    c7b8:	98c01317 	ldw	r3,76(r19)
    c7bc:	8021d07a 	srai	r16,r16,1
    c7c0:	39cf883a 	add	r7,r7,r7
    c7c4:	39cf883a 	add	r7,r7,r7
    c7c8:	19c7883a 	add	r3,r3,r7
    c7cc:	19000017 	ldw	r4,0(r3)
    c7d0:	91000015 	stw	r4,0(r18)
    c7d4:	1c800015 	stw	r18,0(r3)
    c7d8:	1025883a 	mov	r18,r2
    c7dc:	803feb1e 	bne	r16,zero,c78c <__alt_mem_Flash_flash_data+0xf400c78c>
    c7e0:	9005883a 	mov	r2,r18
    c7e4:	dfc00517 	ldw	ra,20(sp)
    c7e8:	dd000417 	ldw	r20,16(sp)
    c7ec:	dcc00317 	ldw	r19,12(sp)
    c7f0:	dc800217 	ldw	r18,8(sp)
    c7f4:	dc400117 	ldw	r17,4(sp)
    c7f8:	dc000017 	ldw	r16,0(sp)
    c7fc:	dec00604 	addi	sp,sp,24
    c800:	f800283a 	ret
    c804:	9809883a 	mov	r4,r19
    c808:	880b883a 	mov	r5,r17
    c80c:	880d883a 	mov	r6,r17
    c810:	000c5440 	call	c544 <__multiply>
    c814:	88800015 	stw	r2,0(r17)
    c818:	10000015 	stw	zero,0(r2)
    c81c:	003fdd06 	br	c794 <__alt_mem_Flash_flash_data+0xf400c794>
    c820:	1025883a 	mov	r18,r2
    c824:	003fd706 	br	c784 <__alt_mem_Flash_flash_data+0xf400c784>
    c828:	10bfffc4 	addi	r2,r2,-1
    c82c:	1085883a 	add	r2,r2,r2
    c830:	00c000b4 	movhi	r3,2
    c834:	18d6d704 	addi	r3,r3,23388
    c838:	1085883a 	add	r2,r2,r2
    c83c:	1885883a 	add	r2,r3,r2
    c840:	11800017 	ldw	r6,0(r2)
    c844:	000f883a 	mov	r7,zero
    c848:	000c1cc0 	call	c1cc <__multadd>
    c84c:	1025883a 	mov	r18,r2
    c850:	003fc706 	br	c770 <__alt_mem_Flash_flash_data+0xf400c770>
    c854:	05000044 	movi	r20,1
    c858:	9809883a 	mov	r4,r19
    c85c:	a00b883a 	mov	r5,r20
    c860:	000c0fc0 	call	c0fc <_Balloc>
    c864:	1023883a 	mov	r17,r2
    c868:	00809c44 	movi	r2,625
    c86c:	88800515 	stw	r2,20(r17)
    c870:	8d000415 	stw	r20,16(r17)
    c874:	9c401215 	stw	r17,72(r19)
    c878:	88000015 	stw	zero,0(r17)
    c87c:	003fc606 	br	c798 <__alt_mem_Flash_flash_data+0xf400c798>

0000c880 <__lshift>:
    c880:	defff904 	addi	sp,sp,-28
    c884:	dd000415 	stw	r20,16(sp)
    c888:	dcc00315 	stw	r19,12(sp)
    c88c:	3029d17a 	srai	r20,r6,5
    c890:	2cc00417 	ldw	r19,16(r5)
    c894:	28800217 	ldw	r2,8(r5)
    c898:	dd400515 	stw	r21,20(sp)
    c89c:	a4e7883a 	add	r19,r20,r19
    c8a0:	dc800215 	stw	r18,8(sp)
    c8a4:	dc400115 	stw	r17,4(sp)
    c8a8:	dc000015 	stw	r16,0(sp)
    c8ac:	dfc00615 	stw	ra,24(sp)
    c8b0:	9c000044 	addi	r16,r19,1
    c8b4:	2823883a 	mov	r17,r5
    c8b8:	302b883a 	mov	r21,r6
    c8bc:	2025883a 	mov	r18,r4
    c8c0:	29400117 	ldw	r5,4(r5)
    c8c4:	1400030e 	bge	r2,r16,c8d4 <__lshift+0x54>
    c8c8:	1085883a 	add	r2,r2,r2
    c8cc:	29400044 	addi	r5,r5,1
    c8d0:	143ffd16 	blt	r2,r16,c8c8 <__alt_mem_Flash_flash_data+0xf400c8c8>
    c8d4:	9009883a 	mov	r4,r18
    c8d8:	000c0fc0 	call	c0fc <_Balloc>
    c8dc:	11c00504 	addi	r7,r2,20
    c8e0:	0500090e 	bge	zero,r20,c908 <__lshift+0x88>
    c8e4:	3811883a 	mov	r8,r7
    c8e8:	0007883a 	mov	r3,zero
    c8ec:	40000015 	stw	zero,0(r8)
    c8f0:	18c00044 	addi	r3,r3,1
    c8f4:	42000104 	addi	r8,r8,4
    c8f8:	1d3ffc1e 	bne	r3,r20,c8ec <__alt_mem_Flash_flash_data+0xf400c8ec>
    c8fc:	18c7883a 	add	r3,r3,r3
    c900:	18c7883a 	add	r3,r3,r3
    c904:	38cf883a 	add	r7,r7,r3
    c908:	89000417 	ldw	r4,16(r17)
    c90c:	88c00504 	addi	r3,r17,20
    c910:	a98007cc 	andi	r6,r21,31
    c914:	2109883a 	add	r4,r4,r4
    c918:	2109883a 	add	r4,r4,r4
    c91c:	1909883a 	add	r4,r3,r4
    c920:	30002326 	beq	r6,zero,c9b0 <__lshift+0x130>
    c924:	01400804 	movi	r5,32
    c928:	298bc83a 	sub	r5,r5,r6
    c92c:	0013883a 	mov	r9,zero
    c930:	1a000017 	ldw	r8,0(r3)
    c934:	3815883a 	mov	r10,r7
    c938:	39c00104 	addi	r7,r7,4
    c93c:	4190983a 	sll	r8,r8,r6
    c940:	18c00104 	addi	r3,r3,4
    c944:	4a10b03a 	or	r8,r9,r8
    c948:	3a3fff15 	stw	r8,-4(r7)
    c94c:	1a3fff17 	ldw	r8,-4(r3)
    c950:	4152d83a 	srl	r9,r8,r5
    c954:	193ff636 	bltu	r3,r4,c930 <__alt_mem_Flash_flash_data+0xf400c930>
    c958:	52400115 	stw	r9,4(r10)
    c95c:	48001a1e 	bne	r9,zero,c9c8 <__lshift+0x148>
    c960:	843fffc4 	addi	r16,r16,-1
    c964:	14000415 	stw	r16,16(r2)
    c968:	88000826 	beq	r17,zero,c98c <__lshift+0x10c>
    c96c:	89000117 	ldw	r4,4(r17)
    c970:	90c01317 	ldw	r3,76(r18)
    c974:	2109883a 	add	r4,r4,r4
    c978:	2109883a 	add	r4,r4,r4
    c97c:	1907883a 	add	r3,r3,r4
    c980:	19000017 	ldw	r4,0(r3)
    c984:	89000015 	stw	r4,0(r17)
    c988:	1c400015 	stw	r17,0(r3)
    c98c:	dfc00617 	ldw	ra,24(sp)
    c990:	dd400517 	ldw	r21,20(sp)
    c994:	dd000417 	ldw	r20,16(sp)
    c998:	dcc00317 	ldw	r19,12(sp)
    c99c:	dc800217 	ldw	r18,8(sp)
    c9a0:	dc400117 	ldw	r17,4(sp)
    c9a4:	dc000017 	ldw	r16,0(sp)
    c9a8:	dec00704 	addi	sp,sp,28
    c9ac:	f800283a 	ret
    c9b0:	19400017 	ldw	r5,0(r3)
    c9b4:	39c00104 	addi	r7,r7,4
    c9b8:	18c00104 	addi	r3,r3,4
    c9bc:	397fff15 	stw	r5,-4(r7)
    c9c0:	193ffb36 	bltu	r3,r4,c9b0 <__alt_mem_Flash_flash_data+0xf400c9b0>
    c9c4:	003fe606 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>
    c9c8:	9c000084 	addi	r16,r19,2
    c9cc:	003fe406 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>

0000c9d0 <__mcmp>:
    c9d0:	20800417 	ldw	r2,16(r4)
    c9d4:	28c00417 	ldw	r3,16(r5)
    c9d8:	10c5c83a 	sub	r2,r2,r3
    c9dc:	1000111e 	bne	r2,zero,ca24 <__mcmp+0x54>
    c9e0:	18c7883a 	add	r3,r3,r3
    c9e4:	18c7883a 	add	r3,r3,r3
    c9e8:	21000504 	addi	r4,r4,20
    c9ec:	29400504 	addi	r5,r5,20
    c9f0:	20c5883a 	add	r2,r4,r3
    c9f4:	28cb883a 	add	r5,r5,r3
    c9f8:	00000106 	br	ca00 <__mcmp+0x30>
    c9fc:	20800a2e 	bgeu	r4,r2,ca28 <__mcmp+0x58>
    ca00:	10bfff04 	addi	r2,r2,-4
    ca04:	297fff04 	addi	r5,r5,-4
    ca08:	11800017 	ldw	r6,0(r2)
    ca0c:	28c00017 	ldw	r3,0(r5)
    ca10:	30fffa26 	beq	r6,r3,c9fc <__alt_mem_Flash_flash_data+0xf400c9fc>
    ca14:	30c00236 	bltu	r6,r3,ca20 <__mcmp+0x50>
    ca18:	00800044 	movi	r2,1
    ca1c:	f800283a 	ret
    ca20:	00bfffc4 	movi	r2,-1
    ca24:	f800283a 	ret
    ca28:	0005883a 	mov	r2,zero
    ca2c:	f800283a 	ret

0000ca30 <__mdiff>:
    ca30:	defffb04 	addi	sp,sp,-20
    ca34:	dc000015 	stw	r16,0(sp)
    ca38:	2821883a 	mov	r16,r5
    ca3c:	dcc00315 	stw	r19,12(sp)
    ca40:	300b883a 	mov	r5,r6
    ca44:	2027883a 	mov	r19,r4
    ca48:	8009883a 	mov	r4,r16
    ca4c:	dc800215 	stw	r18,8(sp)
    ca50:	dfc00415 	stw	ra,16(sp)
    ca54:	dc400115 	stw	r17,4(sp)
    ca58:	3025883a 	mov	r18,r6
    ca5c:	000c9d00 	call	c9d0 <__mcmp>
    ca60:	10005226 	beq	r2,zero,cbac <__mdiff+0x17c>
    ca64:	10004c16 	blt	r2,zero,cb98 <__mdiff+0x168>
    ca68:	0023883a 	mov	r17,zero
    ca6c:	81400117 	ldw	r5,4(r16)
    ca70:	9809883a 	mov	r4,r19
    ca74:	000c0fc0 	call	c0fc <_Balloc>
    ca78:	83400417 	ldw	r13,16(r16)
    ca7c:	93800417 	ldw	r14,16(r18)
    ca80:	81000504 	addi	r4,r16,20
    ca84:	6b59883a 	add	r12,r13,r13
    ca88:	739d883a 	add	r14,r14,r14
    ca8c:	6319883a 	add	r12,r12,r12
    ca90:	91800504 	addi	r6,r18,20
    ca94:	739d883a 	add	r14,r14,r14
    ca98:	14400315 	stw	r17,12(r2)
    ca9c:	2319883a 	add	r12,r4,r12
    caa0:	339d883a 	add	r14,r6,r14
    caa4:	12400504 	addi	r9,r2,20
    caa8:	0007883a 	mov	r3,zero
    caac:	22000017 	ldw	r8,0(r4)
    cab0:	32800017 	ldw	r10,0(r6)
    cab4:	4ac00104 	addi	r11,r9,4
    cab8:	41ffffcc 	andi	r7,r8,65535
    cabc:	38c7883a 	add	r3,r7,r3
    cac0:	51ffffcc 	andi	r7,r10,65535
    cac4:	19cfc83a 	sub	r7,r3,r7
    cac8:	4010d43a 	srli	r8,r8,16
    cacc:	5014d43a 	srli	r10,r10,16
    cad0:	3807d43a 	srai	r3,r7,16
    cad4:	39ffffcc 	andi	r7,r7,65535
    cad8:	4291c83a 	sub	r8,r8,r10
    cadc:	40c7883a 	add	r3,r8,r3
    cae0:	1810943a 	slli	r8,r3,16
    cae4:	31800104 	addi	r6,r6,4
    cae8:	21000104 	addi	r4,r4,4
    caec:	41ceb03a 	or	r7,r8,r7
    caf0:	49c00015 	stw	r7,0(r9)
    caf4:	1807d43a 	srai	r3,r3,16
    caf8:	580b883a 	mov	r5,r11
    cafc:	5813883a 	mov	r9,r11
    cb00:	33bfea36 	bltu	r6,r14,caac <__alt_mem_Flash_flash_data+0xf400caac>
    cb04:	2011883a 	mov	r8,r4
    cb08:	2300152e 	bgeu	r4,r12,cb60 <__mdiff+0x130>
    cb0c:	21400017 	ldw	r5,0(r4)
    cb10:	4a400104 	addi	r9,r9,4
    cb14:	21000104 	addi	r4,r4,4
    cb18:	29ffffcc 	andi	r7,r5,65535
    cb1c:	38c7883a 	add	r3,r7,r3
    cb20:	280ad43a 	srli	r5,r5,16
    cb24:	180dd43a 	srai	r6,r3,16
    cb28:	19ffffcc 	andi	r7,r3,65535
    cb2c:	3147883a 	add	r3,r6,r5
    cb30:	180a943a 	slli	r5,r3,16
    cb34:	1807d43a 	srai	r3,r3,16
    cb38:	29ceb03a 	or	r7,r5,r7
    cb3c:	49ffff15 	stw	r7,-4(r9)
    cb40:	233ff236 	bltu	r4,r12,cb0c <__alt_mem_Flash_flash_data+0xf400cb0c>
    cb44:	0206303a 	nor	r3,zero,r8
    cb48:	1b07883a 	add	r3,r3,r12
    cb4c:	1806d0ba 	srli	r3,r3,2
    cb50:	18c00044 	addi	r3,r3,1
    cb54:	18c7883a 	add	r3,r3,r3
    cb58:	18c7883a 	add	r3,r3,r3
    cb5c:	58cb883a 	add	r5,r11,r3
    cb60:	28ffff04 	addi	r3,r5,-4
    cb64:	3800041e 	bne	r7,zero,cb78 <__mdiff+0x148>
    cb68:	18ffff04 	addi	r3,r3,-4
    cb6c:	19000017 	ldw	r4,0(r3)
    cb70:	6b7fffc4 	addi	r13,r13,-1
    cb74:	203ffc26 	beq	r4,zero,cb68 <__alt_mem_Flash_flash_data+0xf400cb68>
    cb78:	13400415 	stw	r13,16(r2)
    cb7c:	dfc00417 	ldw	ra,16(sp)
    cb80:	dcc00317 	ldw	r19,12(sp)
    cb84:	dc800217 	ldw	r18,8(sp)
    cb88:	dc400117 	ldw	r17,4(sp)
    cb8c:	dc000017 	ldw	r16,0(sp)
    cb90:	dec00504 	addi	sp,sp,20
    cb94:	f800283a 	ret
    cb98:	8005883a 	mov	r2,r16
    cb9c:	04400044 	movi	r17,1
    cba0:	9021883a 	mov	r16,r18
    cba4:	1025883a 	mov	r18,r2
    cba8:	003fb006 	br	ca6c <__alt_mem_Flash_flash_data+0xf400ca6c>
    cbac:	9809883a 	mov	r4,r19
    cbb0:	000b883a 	mov	r5,zero
    cbb4:	000c0fc0 	call	c0fc <_Balloc>
    cbb8:	00c00044 	movi	r3,1
    cbbc:	10c00415 	stw	r3,16(r2)
    cbc0:	10000515 	stw	zero,20(r2)
    cbc4:	003fed06 	br	cb7c <__alt_mem_Flash_flash_data+0xf400cb7c>

0000cbc8 <__ulp>:
    cbc8:	295ffc2c 	andhi	r5,r5,32752
    cbcc:	00bf3034 	movhi	r2,64704
    cbd0:	2887883a 	add	r3,r5,r2
    cbd4:	00c0020e 	bge	zero,r3,cbe0 <__ulp+0x18>
    cbd8:	0005883a 	mov	r2,zero
    cbdc:	f800283a 	ret
    cbe0:	00c7c83a 	sub	r3,zero,r3
    cbe4:	180bd53a 	srai	r5,r3,20
    cbe8:	008004c4 	movi	r2,19
    cbec:	11400a0e 	bge	r2,r5,cc18 <__ulp+0x50>
    cbf0:	00800c84 	movi	r2,50
    cbf4:	0007883a 	mov	r3,zero
    cbf8:	11400516 	blt	r2,r5,cc10 <__ulp+0x48>
    cbfc:	00800cc4 	movi	r2,51
    cc00:	114bc83a 	sub	r5,r2,r5
    cc04:	00800044 	movi	r2,1
    cc08:	1144983a 	sll	r2,r2,r5
    cc0c:	f800283a 	ret
    cc10:	00800044 	movi	r2,1
    cc14:	f800283a 	ret
    cc18:	00800234 	movhi	r2,8
    cc1c:	1147d83a 	sra	r3,r2,r5
    cc20:	0005883a 	mov	r2,zero
    cc24:	f800283a 	ret

0000cc28 <__b2d>:
    cc28:	defffa04 	addi	sp,sp,-24
    cc2c:	dc000015 	stw	r16,0(sp)
    cc30:	24000417 	ldw	r16,16(r4)
    cc34:	dc400115 	stw	r17,4(sp)
    cc38:	24400504 	addi	r17,r4,20
    cc3c:	8421883a 	add	r16,r16,r16
    cc40:	8421883a 	add	r16,r16,r16
    cc44:	8c21883a 	add	r16,r17,r16
    cc48:	dc800215 	stw	r18,8(sp)
    cc4c:	84bfff17 	ldw	r18,-4(r16)
    cc50:	dd000415 	stw	r20,16(sp)
    cc54:	dcc00315 	stw	r19,12(sp)
    cc58:	9009883a 	mov	r4,r18
    cc5c:	2829883a 	mov	r20,r5
    cc60:	dfc00515 	stw	ra,20(sp)
    cc64:	000c3f00 	call	c3f0 <__hi0bits>
    cc68:	00c00804 	movi	r3,32
    cc6c:	1887c83a 	sub	r3,r3,r2
    cc70:	a0c00015 	stw	r3,0(r20)
    cc74:	00c00284 	movi	r3,10
    cc78:	84ffff04 	addi	r19,r16,-4
    cc7c:	18801216 	blt	r3,r2,ccc8 <__b2d+0xa0>
    cc80:	014002c4 	movi	r5,11
    cc84:	2889c83a 	sub	r4,r5,r2
    cc88:	9106d83a 	srl	r3,r18,r4
    cc8c:	18cffc34 	orhi	r3,r3,16368
    cc90:	8cc0282e 	bgeu	r17,r19,cd34 <__b2d+0x10c>
    cc94:	817ffe17 	ldw	r5,-8(r16)
    cc98:	290ad83a 	srl	r5,r5,r4
    cc9c:	10800544 	addi	r2,r2,21
    cca0:	9084983a 	sll	r2,r18,r2
    cca4:	2884b03a 	or	r2,r5,r2
    cca8:	dfc00517 	ldw	ra,20(sp)
    ccac:	dd000417 	ldw	r20,16(sp)
    ccb0:	dcc00317 	ldw	r19,12(sp)
    ccb4:	dc800217 	ldw	r18,8(sp)
    ccb8:	dc400117 	ldw	r17,4(sp)
    ccbc:	dc000017 	ldw	r16,0(sp)
    ccc0:	dec00604 	addi	sp,sp,24
    ccc4:	f800283a 	ret
    ccc8:	113ffd44 	addi	r4,r2,-11
    cccc:	8cc00f2e 	bgeu	r17,r19,cd0c <__b2d+0xe4>
    ccd0:	81bffe04 	addi	r6,r16,-8
    ccd4:	817ffe17 	ldw	r5,-8(r16)
    ccd8:	20001326 	beq	r4,zero,cd28 <__b2d+0x100>
    ccdc:	00c00ac4 	movi	r3,43
    cce0:	1885c83a 	sub	r2,r3,r2
    cce4:	2886d83a 	srl	r3,r5,r2
    cce8:	9124983a 	sll	r18,r18,r4
    ccec:	90e4b03a 	or	r18,r18,r3
    ccf0:	90cffc34 	orhi	r3,r18,16368
    ccf4:	8980112e 	bgeu	r17,r6,cd3c <__b2d+0x114>
    ccf8:	81bffd17 	ldw	r6,-12(r16)
    ccfc:	308cd83a 	srl	r6,r6,r2
    cd00:	2904983a 	sll	r2,r5,r4
    cd04:	1184b03a 	or	r2,r2,r6
    cd08:	003fe706 	br	cca8 <__alt_mem_Flash_flash_data+0xf400cca8>
    cd0c:	20000526 	beq	r4,zero,cd24 <__b2d+0xfc>
    cd10:	9124983a 	sll	r18,r18,r4
    cd14:	000d883a 	mov	r6,zero
    cd18:	000b883a 	mov	r5,zero
    cd1c:	90cffc34 	orhi	r3,r18,16368
    cd20:	003ff706 	br	cd00 <__alt_mem_Flash_flash_data+0xf400cd00>
    cd24:	000b883a 	mov	r5,zero
    cd28:	90cffc34 	orhi	r3,r18,16368
    cd2c:	2805883a 	mov	r2,r5
    cd30:	003fdd06 	br	cca8 <__alt_mem_Flash_flash_data+0xf400cca8>
    cd34:	000b883a 	mov	r5,zero
    cd38:	003fd806 	br	cc9c <__alt_mem_Flash_flash_data+0xf400cc9c>
    cd3c:	000d883a 	mov	r6,zero
    cd40:	003fef06 	br	cd00 <__alt_mem_Flash_flash_data+0xf400cd00>

0000cd44 <__d2b>:
    cd44:	defff704 	addi	sp,sp,-36
    cd48:	dc000215 	stw	r16,8(sp)
    cd4c:	3021883a 	mov	r16,r6
    cd50:	dc400315 	stw	r17,12(sp)
    cd54:	8022907a 	slli	r17,r16,1
    cd58:	dd400715 	stw	r21,28(sp)
    cd5c:	282b883a 	mov	r21,r5
    cd60:	01400044 	movi	r5,1
    cd64:	dd000615 	stw	r20,24(sp)
    cd68:	dcc00515 	stw	r19,20(sp)
    cd6c:	dc800415 	stw	r18,16(sp)
    cd70:	dfc00815 	stw	ra,32(sp)
    cd74:	3829883a 	mov	r20,r7
    cd78:	dc800917 	ldw	r18,36(sp)
    cd7c:	8822d57a 	srli	r17,r17,21
    cd80:	000c0fc0 	call	c0fc <_Balloc>
    cd84:	1027883a 	mov	r19,r2
    cd88:	00800434 	movhi	r2,16
    cd8c:	10bfffc4 	addi	r2,r2,-1
    cd90:	808c703a 	and	r6,r16,r2
    cd94:	88000126 	beq	r17,zero,cd9c <__d2b+0x58>
    cd98:	31800434 	orhi	r6,r6,16
    cd9c:	d9800015 	stw	r6,0(sp)
    cda0:	a8001f26 	beq	r21,zero,ce20 <__d2b+0xdc>
    cda4:	d9000104 	addi	r4,sp,4
    cda8:	dd400115 	stw	r21,4(sp)
    cdac:	000c4580 	call	c458 <__lo0bits>
    cdb0:	d8c00017 	ldw	r3,0(sp)
    cdb4:	1000291e 	bne	r2,zero,ce5c <__d2b+0x118>
    cdb8:	d9000117 	ldw	r4,4(sp)
    cdbc:	99000515 	stw	r4,20(r19)
    cdc0:	1820c03a 	cmpne	r16,r3,zero
    cdc4:	84000044 	addi	r16,r16,1
    cdc8:	98c00615 	stw	r3,24(r19)
    cdcc:	9c000415 	stw	r16,16(r19)
    cdd0:	88001b1e 	bne	r17,zero,ce40 <__d2b+0xfc>
    cdd4:	800690ba 	slli	r3,r16,2
    cdd8:	10bef384 	addi	r2,r2,-1074
    cddc:	a0800015 	stw	r2,0(r20)
    cde0:	98c5883a 	add	r2,r19,r3
    cde4:	11000417 	ldw	r4,16(r2)
    cde8:	8020917a 	slli	r16,r16,5
    cdec:	000c3f00 	call	c3f0 <__hi0bits>
    cdf0:	8085c83a 	sub	r2,r16,r2
    cdf4:	90800015 	stw	r2,0(r18)
    cdf8:	9805883a 	mov	r2,r19
    cdfc:	dfc00817 	ldw	ra,32(sp)
    ce00:	dd400717 	ldw	r21,28(sp)
    ce04:	dd000617 	ldw	r20,24(sp)
    ce08:	dcc00517 	ldw	r19,20(sp)
    ce0c:	dc800417 	ldw	r18,16(sp)
    ce10:	dc400317 	ldw	r17,12(sp)
    ce14:	dc000217 	ldw	r16,8(sp)
    ce18:	dec00904 	addi	sp,sp,36
    ce1c:	f800283a 	ret
    ce20:	d809883a 	mov	r4,sp
    ce24:	000c4580 	call	c458 <__lo0bits>
    ce28:	d8c00017 	ldw	r3,0(sp)
    ce2c:	04000044 	movi	r16,1
    ce30:	9c000415 	stw	r16,16(r19)
    ce34:	98c00515 	stw	r3,20(r19)
    ce38:	10800804 	addi	r2,r2,32
    ce3c:	883fe526 	beq	r17,zero,cdd4 <__alt_mem_Flash_flash_data+0xf400cdd4>
    ce40:	8c7ef344 	addi	r17,r17,-1075
    ce44:	88a3883a 	add	r17,r17,r2
    ce48:	00c00d44 	movi	r3,53
    ce4c:	a4400015 	stw	r17,0(r20)
    ce50:	1885c83a 	sub	r2,r3,r2
    ce54:	90800015 	stw	r2,0(r18)
    ce58:	003fe706 	br	cdf8 <__alt_mem_Flash_flash_data+0xf400cdf8>
    ce5c:	01000804 	movi	r4,32
    ce60:	2089c83a 	sub	r4,r4,r2
    ce64:	1908983a 	sll	r4,r3,r4
    ce68:	d9400117 	ldw	r5,4(sp)
    ce6c:	1886d83a 	srl	r3,r3,r2
    ce70:	2148b03a 	or	r4,r4,r5
    ce74:	99000515 	stw	r4,20(r19)
    ce78:	d8c00015 	stw	r3,0(sp)
    ce7c:	003fd006 	br	cdc0 <__alt_mem_Flash_flash_data+0xf400cdc0>

0000ce80 <__ratio>:
    ce80:	defff904 	addi	sp,sp,-28
    ce84:	dc400315 	stw	r17,12(sp)
    ce88:	2823883a 	mov	r17,r5
    ce8c:	d9400104 	addi	r5,sp,4
    ce90:	dfc00615 	stw	ra,24(sp)
    ce94:	dcc00515 	stw	r19,20(sp)
    ce98:	dc800415 	stw	r18,16(sp)
    ce9c:	2027883a 	mov	r19,r4
    cea0:	dc000215 	stw	r16,8(sp)
    cea4:	000cc280 	call	cc28 <__b2d>
    cea8:	8809883a 	mov	r4,r17
    ceac:	d80b883a 	mov	r5,sp
    ceb0:	1025883a 	mov	r18,r2
    ceb4:	1821883a 	mov	r16,r3
    ceb8:	000cc280 	call	cc28 <__b2d>
    cebc:	8a400417 	ldw	r9,16(r17)
    cec0:	9a000417 	ldw	r8,16(r19)
    cec4:	100d883a 	mov	r6,r2
    cec8:	d8800017 	ldw	r2,0(sp)
    cecc:	4251c83a 	sub	r8,r8,r9
    ced0:	4012917a 	slli	r9,r8,5
    ced4:	da000117 	ldw	r8,4(sp)
    ced8:	4091c83a 	sub	r8,r8,r2
    cedc:	4251883a 	add	r8,r8,r9
    cee0:	02000d0e 	bge	zero,r8,cf18 <__ratio+0x98>
    cee4:	4010953a 	slli	r8,r8,20
    cee8:	4421883a 	add	r16,r8,r16
    ceec:	9009883a 	mov	r4,r18
    cef0:	800b883a 	mov	r5,r16
    cef4:	180f883a 	mov	r7,r3
    cef8:	0011ef00 	call	11ef0 <__divdf3>
    cefc:	dfc00617 	ldw	ra,24(sp)
    cf00:	dcc00517 	ldw	r19,20(sp)
    cf04:	dc800417 	ldw	r18,16(sp)
    cf08:	dc400317 	ldw	r17,12(sp)
    cf0c:	dc000217 	ldw	r16,8(sp)
    cf10:	dec00704 	addi	sp,sp,28
    cf14:	f800283a 	ret
    cf18:	4010953a 	slli	r8,r8,20
    cf1c:	1a07c83a 	sub	r3,r3,r8
    cf20:	003ff206 	br	ceec <__alt_mem_Flash_flash_data+0xf400ceec>

0000cf24 <_mprec_log10>:
    cf24:	defffe04 	addi	sp,sp,-8
    cf28:	dc000015 	stw	r16,0(sp)
    cf2c:	dfc00115 	stw	ra,4(sp)
    cf30:	008005c4 	movi	r2,23
    cf34:	2021883a 	mov	r16,r4
    cf38:	11000d0e 	bge	r2,r4,cf70 <_mprec_log10+0x4c>
    cf3c:	0005883a 	mov	r2,zero
    cf40:	00cffc34 	movhi	r3,16368
    cf44:	843fffc4 	addi	r16,r16,-1
    cf48:	1009883a 	mov	r4,r2
    cf4c:	180b883a 	mov	r5,r3
    cf50:	000d883a 	mov	r6,zero
    cf54:	01d00934 	movhi	r7,16420
    cf58:	0012a000 	call	12a00 <__muldf3>
    cf5c:	803ff91e 	bne	r16,zero,cf44 <__alt_mem_Flash_flash_data+0xf400cf44>
    cf60:	dfc00117 	ldw	ra,4(sp)
    cf64:	dc000017 	ldw	r16,0(sp)
    cf68:	dec00204 	addi	sp,sp,8
    cf6c:	f800283a 	ret
    cf70:	202090fa 	slli	r16,r4,3
    cf74:	008000b4 	movhi	r2,2
    cf78:	1096ee04 	addi	r2,r2,23480
    cf7c:	1421883a 	add	r16,r2,r16
    cf80:	80800017 	ldw	r2,0(r16)
    cf84:	80c00117 	ldw	r3,4(r16)
    cf88:	dfc00117 	ldw	ra,4(sp)
    cf8c:	dc000017 	ldw	r16,0(sp)
    cf90:	dec00204 	addi	sp,sp,8
    cf94:	f800283a 	ret

0000cf98 <__copybits>:
    cf98:	297fffc4 	addi	r5,r5,-1
    cf9c:	280fd17a 	srai	r7,r5,5
    cfa0:	30c00417 	ldw	r3,16(r6)
    cfa4:	30800504 	addi	r2,r6,20
    cfa8:	39c00044 	addi	r7,r7,1
    cfac:	18c7883a 	add	r3,r3,r3
    cfb0:	39cf883a 	add	r7,r7,r7
    cfb4:	18c7883a 	add	r3,r3,r3
    cfb8:	39cf883a 	add	r7,r7,r7
    cfbc:	10c7883a 	add	r3,r2,r3
    cfc0:	21cf883a 	add	r7,r4,r7
    cfc4:	10c00d2e 	bgeu	r2,r3,cffc <__copybits+0x64>
    cfc8:	200b883a 	mov	r5,r4
    cfcc:	12000017 	ldw	r8,0(r2)
    cfd0:	29400104 	addi	r5,r5,4
    cfd4:	10800104 	addi	r2,r2,4
    cfd8:	2a3fff15 	stw	r8,-4(r5)
    cfdc:	10fffb36 	bltu	r2,r3,cfcc <__alt_mem_Flash_flash_data+0xf400cfcc>
    cfe0:	1985c83a 	sub	r2,r3,r6
    cfe4:	10bffac4 	addi	r2,r2,-21
    cfe8:	1004d0ba 	srli	r2,r2,2
    cfec:	10800044 	addi	r2,r2,1
    cff0:	1085883a 	add	r2,r2,r2
    cff4:	1085883a 	add	r2,r2,r2
    cff8:	2089883a 	add	r4,r4,r2
    cffc:	21c0032e 	bgeu	r4,r7,d00c <__copybits+0x74>
    d000:	20000015 	stw	zero,0(r4)
    d004:	21000104 	addi	r4,r4,4
    d008:	21fffd36 	bltu	r4,r7,d000 <__alt_mem_Flash_flash_data+0xf400d000>
    d00c:	f800283a 	ret

0000d010 <__any_on>:
    d010:	20c00417 	ldw	r3,16(r4)
    d014:	2805d17a 	srai	r2,r5,5
    d018:	21000504 	addi	r4,r4,20
    d01c:	18800d0e 	bge	r3,r2,d054 <__any_on+0x44>
    d020:	18c7883a 	add	r3,r3,r3
    d024:	18c7883a 	add	r3,r3,r3
    d028:	20c7883a 	add	r3,r4,r3
    d02c:	20c0192e 	bgeu	r4,r3,d094 <__any_on+0x84>
    d030:	18bfff17 	ldw	r2,-4(r3)
    d034:	18ffff04 	addi	r3,r3,-4
    d038:	1000041e 	bne	r2,zero,d04c <__any_on+0x3c>
    d03c:	20c0142e 	bgeu	r4,r3,d090 <__any_on+0x80>
    d040:	18ffff04 	addi	r3,r3,-4
    d044:	19400017 	ldw	r5,0(r3)
    d048:	283ffc26 	beq	r5,zero,d03c <__alt_mem_Flash_flash_data+0xf400d03c>
    d04c:	00800044 	movi	r2,1
    d050:	f800283a 	ret
    d054:	10c00a0e 	bge	r2,r3,d080 <__any_on+0x70>
    d058:	1085883a 	add	r2,r2,r2
    d05c:	1085883a 	add	r2,r2,r2
    d060:	294007cc 	andi	r5,r5,31
    d064:	2087883a 	add	r3,r4,r2
    d068:	283ff026 	beq	r5,zero,d02c <__alt_mem_Flash_flash_data+0xf400d02c>
    d06c:	19800017 	ldw	r6,0(r3)
    d070:	3144d83a 	srl	r2,r6,r5
    d074:	114a983a 	sll	r5,r2,r5
    d078:	29bff41e 	bne	r5,r6,d04c <__alt_mem_Flash_flash_data+0xf400d04c>
    d07c:	003feb06 	br	d02c <__alt_mem_Flash_flash_data+0xf400d02c>
    d080:	1085883a 	add	r2,r2,r2
    d084:	1085883a 	add	r2,r2,r2
    d088:	2087883a 	add	r3,r4,r2
    d08c:	003fe706 	br	d02c <__alt_mem_Flash_flash_data+0xf400d02c>
    d090:	f800283a 	ret
    d094:	0005883a 	mov	r2,zero
    d098:	f800283a 	ret

0000d09c <_putc_r>:
    d09c:	defffc04 	addi	sp,sp,-16
    d0a0:	dc000215 	stw	r16,8(sp)
    d0a4:	dfc00315 	stw	ra,12(sp)
    d0a8:	2021883a 	mov	r16,r4
    d0ac:	20000226 	beq	r4,zero,d0b8 <_putc_r+0x1c>
    d0b0:	20800e17 	ldw	r2,56(r4)
    d0b4:	10001b26 	beq	r2,zero,d124 <_putc_r+0x88>
    d0b8:	30800217 	ldw	r2,8(r6)
    d0bc:	10bfffc4 	addi	r2,r2,-1
    d0c0:	30800215 	stw	r2,8(r6)
    d0c4:	10000a16 	blt	r2,zero,d0f0 <_putc_r+0x54>
    d0c8:	30800017 	ldw	r2,0(r6)
    d0cc:	11400005 	stb	r5,0(r2)
    d0d0:	30800017 	ldw	r2,0(r6)
    d0d4:	10c00044 	addi	r3,r2,1
    d0d8:	30c00015 	stw	r3,0(r6)
    d0dc:	10800003 	ldbu	r2,0(r2)
    d0e0:	dfc00317 	ldw	ra,12(sp)
    d0e4:	dc000217 	ldw	r16,8(sp)
    d0e8:	dec00404 	addi	sp,sp,16
    d0ec:	f800283a 	ret
    d0f0:	30c00617 	ldw	r3,24(r6)
    d0f4:	10c00616 	blt	r2,r3,d110 <_putc_r+0x74>
    d0f8:	30800017 	ldw	r2,0(r6)
    d0fc:	00c00284 	movi	r3,10
    d100:	11400005 	stb	r5,0(r2)
    d104:	30800017 	ldw	r2,0(r6)
    d108:	11400003 	ldbu	r5,0(r2)
    d10c:	28fff11e 	bne	r5,r3,d0d4 <__alt_mem_Flash_flash_data+0xf400d0d4>
    d110:	8009883a 	mov	r4,r16
    d114:	dfc00317 	ldw	ra,12(sp)
    d118:	dc000217 	ldw	r16,8(sp)
    d11c:	dec00404 	addi	sp,sp,16
    d120:	00100e01 	jmpi	100e0 <__swbuf_r>
    d124:	d9400015 	stw	r5,0(sp)
    d128:	d9800115 	stw	r6,4(sp)
    d12c:	000a8940 	call	a894 <__sinit>
    d130:	d9800117 	ldw	r6,4(sp)
    d134:	d9400017 	ldw	r5,0(sp)
    d138:	003fdf06 	br	d0b8 <__alt_mem_Flash_flash_data+0xf400d0b8>

0000d13c <putc>:
    d13c:	008000b4 	movhi	r2,2
    d140:	defffc04 	addi	sp,sp,-16
    d144:	109fc904 	addi	r2,r2,32548
    d148:	dc400115 	stw	r17,4(sp)
    d14c:	14400017 	ldw	r17,0(r2)
    d150:	dc800215 	stw	r18,8(sp)
    d154:	dc000015 	stw	r16,0(sp)
    d158:	dfc00315 	stw	ra,12(sp)
    d15c:	2025883a 	mov	r18,r4
    d160:	2821883a 	mov	r16,r5
    d164:	88000226 	beq	r17,zero,d170 <putc+0x34>
    d168:	88800e17 	ldw	r2,56(r17)
    d16c:	10001a26 	beq	r2,zero,d1d8 <putc+0x9c>
    d170:	80800217 	ldw	r2,8(r16)
    d174:	10bfffc4 	addi	r2,r2,-1
    d178:	80800215 	stw	r2,8(r16)
    d17c:	10000c16 	blt	r2,zero,d1b0 <putc+0x74>
    d180:	80800017 	ldw	r2,0(r16)
    d184:	14800005 	stb	r18,0(r2)
    d188:	80800017 	ldw	r2,0(r16)
    d18c:	10c00044 	addi	r3,r2,1
    d190:	80c00015 	stw	r3,0(r16)
    d194:	10800003 	ldbu	r2,0(r2)
    d198:	dfc00317 	ldw	ra,12(sp)
    d19c:	dc800217 	ldw	r18,8(sp)
    d1a0:	dc400117 	ldw	r17,4(sp)
    d1a4:	dc000017 	ldw	r16,0(sp)
    d1a8:	dec00404 	addi	sp,sp,16
    d1ac:	f800283a 	ret
    d1b0:	80c00617 	ldw	r3,24(r16)
    d1b4:	10c00b16 	blt	r2,r3,d1e4 <putc+0xa8>
    d1b8:	80800017 	ldw	r2,0(r16)
    d1bc:	00c00284 	movi	r3,10
    d1c0:	14800005 	stb	r18,0(r2)
    d1c4:	80800017 	ldw	r2,0(r16)
    d1c8:	11400003 	ldbu	r5,0(r2)
    d1cc:	28ffef1e 	bne	r5,r3,d18c <__alt_mem_Flash_flash_data+0xf400d18c>
    d1d0:	8809883a 	mov	r4,r17
    d1d4:	00000506 	br	d1ec <putc+0xb0>
    d1d8:	8809883a 	mov	r4,r17
    d1dc:	000a8940 	call	a894 <__sinit>
    d1e0:	003fe306 	br	d170 <__alt_mem_Flash_flash_data+0xf400d170>
    d1e4:	8809883a 	mov	r4,r17
    d1e8:	900b883a 	mov	r5,r18
    d1ec:	800d883a 	mov	r6,r16
    d1f0:	dfc00317 	ldw	ra,12(sp)
    d1f4:	dc800217 	ldw	r18,8(sp)
    d1f8:	dc400117 	ldw	r17,4(sp)
    d1fc:	dc000017 	ldw	r16,0(sp)
    d200:	dec00404 	addi	sp,sp,16
    d204:	00100e01 	jmpi	100e0 <__swbuf_r>

0000d208 <_realloc_r>:
    d208:	defff604 	addi	sp,sp,-40
    d20c:	dd000415 	stw	r20,16(sp)
    d210:	dc400115 	stw	r17,4(sp)
    d214:	dfc00915 	stw	ra,36(sp)
    d218:	df000815 	stw	fp,32(sp)
    d21c:	ddc00715 	stw	r23,28(sp)
    d220:	dd800615 	stw	r22,24(sp)
    d224:	dd400515 	stw	r21,20(sp)
    d228:	dcc00315 	stw	r19,12(sp)
    d22c:	dc800215 	stw	r18,8(sp)
    d230:	dc000015 	stw	r16,0(sp)
    d234:	2829883a 	mov	r20,r5
    d238:	3023883a 	mov	r17,r6
    d23c:	2800ad26 	beq	r5,zero,d4f4 <_realloc_r+0x2ec>
    d240:	2025883a 	mov	r18,r4
    d244:	00147300 	call	14730 <__malloc_lock>
    d248:	a0ffff17 	ldw	r3,-4(r20)
    d24c:	043fff04 	movi	r16,-4
    d250:	890002c4 	addi	r4,r17,11
    d254:	01c00584 	movi	r7,22
    d258:	a57ffe04 	addi	r21,r20,-8
    d25c:	1c20703a 	and	r16,r3,r16
    d260:	39001d2e 	bgeu	r7,r4,d2d8 <_realloc_r+0xd0>
    d264:	05bffe04 	movi	r22,-8
    d268:	25ac703a 	and	r22,r4,r22
    d26c:	b00f883a 	mov	r7,r22
    d270:	b0006516 	blt	r22,zero,d408 <_realloc_r+0x200>
    d274:	b4406436 	bltu	r22,r17,d408 <_realloc_r+0x200>
    d278:	81c01a0e 	bge	r16,r7,d2e4 <_realloc_r+0xdc>
    d27c:	070000b4 	movhi	fp,2
    d280:	e7195204 	addi	fp,fp,25928
    d284:	e1400217 	ldw	r5,8(fp)
    d288:	ac11883a 	add	r8,r21,r16
    d28c:	2a006226 	beq	r5,r8,d418 <_realloc_r+0x210>
    d290:	41800117 	ldw	r6,4(r8)
    d294:	027fff84 	movi	r9,-2
    d298:	3252703a 	and	r9,r6,r9
    d29c:	4253883a 	add	r9,r8,r9
    d2a0:	49000117 	ldw	r4,4(r9)
    d2a4:	2100004c 	andi	r4,r4,1
    d2a8:	2000281e 	bne	r4,zero,d34c <_realloc_r+0x144>
    d2ac:	00bfff04 	movi	r2,-4
    d2b0:	3084703a 	and	r2,r6,r2
    d2b4:	1409883a 	add	r4,r2,r16
    d2b8:	21c05e16 	blt	r4,r7,d434 <_realloc_r+0x22c>
    d2bc:	40800317 	ldw	r2,12(r8)
    d2c0:	41400217 	ldw	r5,8(r8)
    d2c4:	a023883a 	mov	r17,r20
    d2c8:	2021883a 	mov	r16,r4
    d2cc:	28800315 	stw	r2,12(r5)
    d2d0:	11400215 	stw	r5,8(r2)
    d2d4:	00000406 	br	d2e8 <_realloc_r+0xe0>
    d2d8:	01c00404 	movi	r7,16
    d2dc:	382d883a 	mov	r22,r7
    d2e0:	003fe406 	br	d274 <__alt_mem_Flash_flash_data+0xf400d274>
    d2e4:	a023883a 	mov	r17,r20
    d2e8:	858fc83a 	sub	r7,r16,r22
    d2ec:	008003c4 	movi	r2,15
    d2f0:	18c0004c 	andi	r3,r3,1
    d2f4:	11c07236 	bltu	r2,r7,d4c0 <_realloc_r+0x2b8>
    d2f8:	1c06b03a 	or	r3,r3,r16
    d2fc:	a8c00115 	stw	r3,4(r21)
    d300:	ac21883a 	add	r16,r21,r16
    d304:	80800117 	ldw	r2,4(r16)
    d308:	10800054 	ori	r2,r2,1
    d30c:	80800115 	stw	r2,4(r16)
    d310:	9009883a 	mov	r4,r18
    d314:	00148500 	call	14850 <__malloc_unlock>
    d318:	8805883a 	mov	r2,r17
    d31c:	dfc00917 	ldw	ra,36(sp)
    d320:	df000817 	ldw	fp,32(sp)
    d324:	ddc00717 	ldw	r23,28(sp)
    d328:	dd800617 	ldw	r22,24(sp)
    d32c:	dd400517 	ldw	r21,20(sp)
    d330:	dd000417 	ldw	r20,16(sp)
    d334:	dcc00317 	ldw	r19,12(sp)
    d338:	dc800217 	ldw	r18,8(sp)
    d33c:	dc400117 	ldw	r17,4(sp)
    d340:	dc000017 	ldw	r16,0(sp)
    d344:	dec00a04 	addi	sp,sp,40
    d348:	f800283a 	ret
    d34c:	18c0004c 	andi	r3,r3,1
    d350:	1800081e 	bne	r3,zero,d374 <_realloc_r+0x16c>
    d354:	a4fffe17 	ldw	r19,-8(r20)
    d358:	00bfff04 	movi	r2,-4
    d35c:	ace7c83a 	sub	r19,r21,r19
    d360:	98c00117 	ldw	r3,4(r19)
    d364:	1886703a 	and	r3,r3,r2
    d368:	98000226 	beq	r19,zero,d374 <_realloc_r+0x16c>
    d36c:	1c2f883a 	add	r23,r3,r16
    d370:	b9c06d0e 	bge	r23,r7,d528 <_realloc_r+0x320>
    d374:	880b883a 	mov	r5,r17
    d378:	9009883a 	mov	r4,r18
    d37c:	000b5d80 	call	b5d8 <_malloc_r>
    d380:	1023883a 	mov	r17,r2
    d384:	1000ef26 	beq	r2,zero,d744 <_realloc_r+0x53c>
    d388:	a0ffff17 	ldw	r3,-4(r20)
    d38c:	113ffe04 	addi	r4,r2,-8
    d390:	00bfff84 	movi	r2,-2
    d394:	1884703a 	and	r2,r3,r2
    d398:	a885883a 	add	r2,r21,r2
    d39c:	2080bf26 	beq	r4,r2,d69c <_realloc_r+0x494>
    d3a0:	81bfff04 	addi	r6,r16,-4
    d3a4:	00800904 	movi	r2,36
    d3a8:	11808936 	bltu	r2,r6,d5d0 <_realloc_r+0x3c8>
    d3ac:	00c004c4 	movi	r3,19
    d3b0:	19806c2e 	bgeu	r3,r6,d564 <_realloc_r+0x35c>
    d3b4:	a0c00017 	ldw	r3,0(r20)
    d3b8:	88c00015 	stw	r3,0(r17)
    d3bc:	a0c00117 	ldw	r3,4(r20)
    d3c0:	88c00115 	stw	r3,4(r17)
    d3c4:	00c006c4 	movi	r3,27
    d3c8:	1980ac36 	bltu	r3,r6,d67c <_realloc_r+0x474>
    d3cc:	88800204 	addi	r2,r17,8
    d3d0:	a0c00204 	addi	r3,r20,8
    d3d4:	19000017 	ldw	r4,0(r3)
    d3d8:	11000015 	stw	r4,0(r2)
    d3dc:	19000117 	ldw	r4,4(r3)
    d3e0:	11000115 	stw	r4,4(r2)
    d3e4:	18c00217 	ldw	r3,8(r3)
    d3e8:	10c00215 	stw	r3,8(r2)
    d3ec:	a00b883a 	mov	r5,r20
    d3f0:	9009883a 	mov	r4,r18
    d3f4:	000aa080 	call	aa08 <_free_r>
    d3f8:	9009883a 	mov	r4,r18
    d3fc:	00148500 	call	14850 <__malloc_unlock>
    d400:	8805883a 	mov	r2,r17
    d404:	003fc506 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d408:	00800304 	movi	r2,12
    d40c:	90800015 	stw	r2,0(r18)
    d410:	0005883a 	mov	r2,zero
    d414:	003fc106 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d418:	29800117 	ldw	r6,4(r5)
    d41c:	00bfff04 	movi	r2,-4
    d420:	b1000404 	addi	r4,r22,16
    d424:	3084703a 	and	r2,r6,r2
    d428:	140d883a 	add	r6,r2,r16
    d42c:	31005b0e 	bge	r6,r4,d59c <_realloc_r+0x394>
    d430:	2811883a 	mov	r8,r5
    d434:	18c0004c 	andi	r3,r3,1
    d438:	183fce1e 	bne	r3,zero,d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d43c:	a4fffe17 	ldw	r19,-8(r20)
    d440:	00ffff04 	movi	r3,-4
    d444:	ace7c83a 	sub	r19,r21,r19
    d448:	99000117 	ldw	r4,4(r19)
    d44c:	20c6703a 	and	r3,r4,r3
    d450:	403fc526 	beq	r8,zero,d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d454:	1c2f883a 	add	r23,r3,r16
    d458:	b8af883a 	add	r23,r23,r2
    d45c:	41406026 	beq	r8,r5,d5e0 <_realloc_r+0x3d8>
    d460:	b9ffc116 	blt	r23,r7,d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d464:	40c00217 	ldw	r3,8(r8)
    d468:	40800317 	ldw	r2,12(r8)
    d46c:	81bfff04 	addi	r6,r16,-4
    d470:	01000904 	movi	r4,36
    d474:	18800315 	stw	r2,12(r3)
    d478:	10c00215 	stw	r3,8(r2)
    d47c:	99400217 	ldw	r5,8(r19)
    d480:	98c00317 	ldw	r3,12(r19)
    d484:	9c400204 	addi	r17,r19,8
    d488:	28c00315 	stw	r3,12(r5)
    d48c:	19400215 	stw	r5,8(r3)
    d490:	21802d36 	bltu	r4,r6,d548 <_realloc_r+0x340>
    d494:	008004c4 	movi	r2,19
    d498:	1180352e 	bgeu	r2,r6,d570 <_realloc_r+0x368>
    d49c:	a0800017 	ldw	r2,0(r20)
    d4a0:	98800215 	stw	r2,8(r19)
    d4a4:	a0800117 	ldw	r2,4(r20)
    d4a8:	98800315 	stw	r2,12(r19)
    d4ac:	008006c4 	movi	r2,27
    d4b0:	11808036 	bltu	r2,r6,d6b4 <_realloc_r+0x4ac>
    d4b4:	98c00404 	addi	r3,r19,16
    d4b8:	a5000204 	addi	r20,r20,8
    d4bc:	00002d06 	br	d574 <_realloc_r+0x36c>
    d4c0:	1d86b03a 	or	r3,r3,r22
    d4c4:	ad8b883a 	add	r5,r21,r22
    d4c8:	a8c00115 	stw	r3,4(r21)
    d4cc:	38800054 	ori	r2,r7,1
    d4d0:	28800115 	stw	r2,4(r5)
    d4d4:	29cf883a 	add	r7,r5,r7
    d4d8:	38800117 	ldw	r2,4(r7)
    d4dc:	9009883a 	mov	r4,r18
    d4e0:	29400204 	addi	r5,r5,8
    d4e4:	10800054 	ori	r2,r2,1
    d4e8:	38800115 	stw	r2,4(r7)
    d4ec:	000aa080 	call	aa08 <_free_r>
    d4f0:	003f8706 	br	d310 <__alt_mem_Flash_flash_data+0xf400d310>
    d4f4:	300b883a 	mov	r5,r6
    d4f8:	dfc00917 	ldw	ra,36(sp)
    d4fc:	df000817 	ldw	fp,32(sp)
    d500:	ddc00717 	ldw	r23,28(sp)
    d504:	dd800617 	ldw	r22,24(sp)
    d508:	dd400517 	ldw	r21,20(sp)
    d50c:	dd000417 	ldw	r20,16(sp)
    d510:	dcc00317 	ldw	r19,12(sp)
    d514:	dc800217 	ldw	r18,8(sp)
    d518:	dc400117 	ldw	r17,4(sp)
    d51c:	dc000017 	ldw	r16,0(sp)
    d520:	dec00a04 	addi	sp,sp,40
    d524:	000b5d81 	jmpi	b5d8 <_malloc_r>
    d528:	98800317 	ldw	r2,12(r19)
    d52c:	98c00217 	ldw	r3,8(r19)
    d530:	81bfff04 	addi	r6,r16,-4
    d534:	01000904 	movi	r4,36
    d538:	18800315 	stw	r2,12(r3)
    d53c:	10c00215 	stw	r3,8(r2)
    d540:	9c400204 	addi	r17,r19,8
    d544:	21bfd32e 	bgeu	r4,r6,d494 <__alt_mem_Flash_flash_data+0xf400d494>
    d548:	8809883a 	mov	r4,r17
    d54c:	a00b883a 	mov	r5,r20
    d550:	000bfa00 	call	bfa0 <memmove>
    d554:	98c00117 	ldw	r3,4(r19)
    d558:	b821883a 	mov	r16,r23
    d55c:	982b883a 	mov	r21,r19
    d560:	003f6106 	br	d2e8 <__alt_mem_Flash_flash_data+0xf400d2e8>
    d564:	8805883a 	mov	r2,r17
    d568:	a007883a 	mov	r3,r20
    d56c:	003f9906 	br	d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d570:	8807883a 	mov	r3,r17
    d574:	a0800017 	ldw	r2,0(r20)
    d578:	b821883a 	mov	r16,r23
    d57c:	982b883a 	mov	r21,r19
    d580:	18800015 	stw	r2,0(r3)
    d584:	a0800117 	ldw	r2,4(r20)
    d588:	18800115 	stw	r2,4(r3)
    d58c:	a0800217 	ldw	r2,8(r20)
    d590:	18800215 	stw	r2,8(r3)
    d594:	98c00117 	ldw	r3,4(r19)
    d598:	003f5306 	br	d2e8 <__alt_mem_Flash_flash_data+0xf400d2e8>
    d59c:	adab883a 	add	r21,r21,r22
    d5a0:	3585c83a 	sub	r2,r6,r22
    d5a4:	e5400215 	stw	r21,8(fp)
    d5a8:	10800054 	ori	r2,r2,1
    d5ac:	a8800115 	stw	r2,4(r21)
    d5b0:	a0bfff17 	ldw	r2,-4(r20)
    d5b4:	9009883a 	mov	r4,r18
    d5b8:	1080004c 	andi	r2,r2,1
    d5bc:	b0acb03a 	or	r22,r22,r2
    d5c0:	a5bfff15 	stw	r22,-4(r20)
    d5c4:	00148500 	call	14850 <__malloc_unlock>
    d5c8:	a005883a 	mov	r2,r20
    d5cc:	003f5306 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d5d0:	8809883a 	mov	r4,r17
    d5d4:	a00b883a 	mov	r5,r20
    d5d8:	000bfa00 	call	bfa0 <memmove>
    d5dc:	003f8306 	br	d3ec <__alt_mem_Flash_flash_data+0xf400d3ec>
    d5e0:	b0800404 	addi	r2,r22,16
    d5e4:	b8bf6016 	blt	r23,r2,d368 <__alt_mem_Flash_flash_data+0xf400d368>
    d5e8:	98800317 	ldw	r2,12(r19)
    d5ec:	98c00217 	ldw	r3,8(r19)
    d5f0:	81bfff04 	addi	r6,r16,-4
    d5f4:	01000904 	movi	r4,36
    d5f8:	18800315 	stw	r2,12(r3)
    d5fc:	10c00215 	stw	r3,8(r2)
    d600:	9c400204 	addi	r17,r19,8
    d604:	21804336 	bltu	r4,r6,d714 <_realloc_r+0x50c>
    d608:	008004c4 	movi	r2,19
    d60c:	11803f2e 	bgeu	r2,r6,d70c <_realloc_r+0x504>
    d610:	a0800017 	ldw	r2,0(r20)
    d614:	98800215 	stw	r2,8(r19)
    d618:	a0800117 	ldw	r2,4(r20)
    d61c:	98800315 	stw	r2,12(r19)
    d620:	008006c4 	movi	r2,27
    d624:	11803f36 	bltu	r2,r6,d724 <_realloc_r+0x51c>
    d628:	98800404 	addi	r2,r19,16
    d62c:	a5000204 	addi	r20,r20,8
    d630:	a0c00017 	ldw	r3,0(r20)
    d634:	10c00015 	stw	r3,0(r2)
    d638:	a0c00117 	ldw	r3,4(r20)
    d63c:	10c00115 	stw	r3,4(r2)
    d640:	a0c00217 	ldw	r3,8(r20)
    d644:	10c00215 	stw	r3,8(r2)
    d648:	9d87883a 	add	r3,r19,r22
    d64c:	bd85c83a 	sub	r2,r23,r22
    d650:	e0c00215 	stw	r3,8(fp)
    d654:	10800054 	ori	r2,r2,1
    d658:	18800115 	stw	r2,4(r3)
    d65c:	98800117 	ldw	r2,4(r19)
    d660:	9009883a 	mov	r4,r18
    d664:	1080004c 	andi	r2,r2,1
    d668:	b0acb03a 	or	r22,r22,r2
    d66c:	9d800115 	stw	r22,4(r19)
    d670:	00148500 	call	14850 <__malloc_unlock>
    d674:	8805883a 	mov	r2,r17
    d678:	003f2806 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d67c:	a0c00217 	ldw	r3,8(r20)
    d680:	88c00215 	stw	r3,8(r17)
    d684:	a0c00317 	ldw	r3,12(r20)
    d688:	88c00315 	stw	r3,12(r17)
    d68c:	30801126 	beq	r6,r2,d6d4 <_realloc_r+0x4cc>
    d690:	88800404 	addi	r2,r17,16
    d694:	a0c00404 	addi	r3,r20,16
    d698:	003f4e06 	br	d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d69c:	893fff17 	ldw	r4,-4(r17)
    d6a0:	00bfff04 	movi	r2,-4
    d6a4:	a023883a 	mov	r17,r20
    d6a8:	2084703a 	and	r2,r4,r2
    d6ac:	80a1883a 	add	r16,r16,r2
    d6b0:	003f0d06 	br	d2e8 <__alt_mem_Flash_flash_data+0xf400d2e8>
    d6b4:	a0800217 	ldw	r2,8(r20)
    d6b8:	98800415 	stw	r2,16(r19)
    d6bc:	a0800317 	ldw	r2,12(r20)
    d6c0:	98800515 	stw	r2,20(r19)
    d6c4:	31000a26 	beq	r6,r4,d6f0 <_realloc_r+0x4e8>
    d6c8:	98c00604 	addi	r3,r19,24
    d6cc:	a5000404 	addi	r20,r20,16
    d6d0:	003fa806 	br	d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d6d4:	a1000417 	ldw	r4,16(r20)
    d6d8:	88800604 	addi	r2,r17,24
    d6dc:	a0c00604 	addi	r3,r20,24
    d6e0:	89000415 	stw	r4,16(r17)
    d6e4:	a1000517 	ldw	r4,20(r20)
    d6e8:	89000515 	stw	r4,20(r17)
    d6ec:	003f3906 	br	d3d4 <__alt_mem_Flash_flash_data+0xf400d3d4>
    d6f0:	a0800417 	ldw	r2,16(r20)
    d6f4:	a5000604 	addi	r20,r20,24
    d6f8:	98c00804 	addi	r3,r19,32
    d6fc:	98800615 	stw	r2,24(r19)
    d700:	a0bfff17 	ldw	r2,-4(r20)
    d704:	98800715 	stw	r2,28(r19)
    d708:	003f9a06 	br	d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d70c:	8805883a 	mov	r2,r17
    d710:	003fc706 	br	d630 <__alt_mem_Flash_flash_data+0xf400d630>
    d714:	8809883a 	mov	r4,r17
    d718:	a00b883a 	mov	r5,r20
    d71c:	000bfa00 	call	bfa0 <memmove>
    d720:	003fc906 	br	d648 <__alt_mem_Flash_flash_data+0xf400d648>
    d724:	a0800217 	ldw	r2,8(r20)
    d728:	98800415 	stw	r2,16(r19)
    d72c:	a0800317 	ldw	r2,12(r20)
    d730:	98800515 	stw	r2,20(r19)
    d734:	31000726 	beq	r6,r4,d754 <_realloc_r+0x54c>
    d738:	98800604 	addi	r2,r19,24
    d73c:	a5000404 	addi	r20,r20,16
    d740:	003fbb06 	br	d630 <__alt_mem_Flash_flash_data+0xf400d630>
    d744:	9009883a 	mov	r4,r18
    d748:	00148500 	call	14850 <__malloc_unlock>
    d74c:	0005883a 	mov	r2,zero
    d750:	003ef206 	br	d31c <__alt_mem_Flash_flash_data+0xf400d31c>
    d754:	a0c00417 	ldw	r3,16(r20)
    d758:	a5000604 	addi	r20,r20,24
    d75c:	98800804 	addi	r2,r19,32
    d760:	98c00615 	stw	r3,24(r19)
    d764:	a0ffff17 	ldw	r3,-4(r20)
    d768:	98c00715 	stw	r3,28(r19)
    d76c:	003fb006 	br	d630 <__alt_mem_Flash_flash_data+0xf400d630>

0000d770 <__fpclassifyd>:
    d770:	00a00034 	movhi	r2,32768
    d774:	10bfffc4 	addi	r2,r2,-1
    d778:	2884703a 	and	r2,r5,r2
    d77c:	10000726 	beq	r2,zero,d79c <__fpclassifyd+0x2c>
    d780:	00fffc34 	movhi	r3,65520
    d784:	019ff834 	movhi	r6,32736
    d788:	28c7883a 	add	r3,r5,r3
    d78c:	31bfffc4 	addi	r6,r6,-1
    d790:	30c00536 	bltu	r6,r3,d7a8 <__fpclassifyd+0x38>
    d794:	00800104 	movi	r2,4
    d798:	f800283a 	ret
    d79c:	2000021e 	bne	r4,zero,d7a8 <__fpclassifyd+0x38>
    d7a0:	00800084 	movi	r2,2
    d7a4:	f800283a 	ret
    d7a8:	00dffc34 	movhi	r3,32752
    d7ac:	019ff834 	movhi	r6,32736
    d7b0:	28cb883a 	add	r5,r5,r3
    d7b4:	31bfffc4 	addi	r6,r6,-1
    d7b8:	317ff62e 	bgeu	r6,r5,d794 <__alt_mem_Flash_flash_data+0xf400d794>
    d7bc:	01400434 	movhi	r5,16
    d7c0:	297fffc4 	addi	r5,r5,-1
    d7c4:	28800236 	bltu	r5,r2,d7d0 <__fpclassifyd+0x60>
    d7c8:	008000c4 	movi	r2,3
    d7cc:	f800283a 	ret
    d7d0:	10c00226 	beq	r2,r3,d7dc <__fpclassifyd+0x6c>
    d7d4:	0005883a 	mov	r2,zero
    d7d8:	f800283a 	ret
    d7dc:	2005003a 	cmpeq	r2,r4,zero
    d7e0:	f800283a 	ret

0000d7e4 <_sbrk_r>:
    d7e4:	defffd04 	addi	sp,sp,-12
    d7e8:	dc000015 	stw	r16,0(sp)
    d7ec:	040000f4 	movhi	r16,3
    d7f0:	dc400115 	stw	r17,4(sp)
    d7f4:	8427ef04 	addi	r16,r16,-24644
    d7f8:	2023883a 	mov	r17,r4
    d7fc:	2809883a 	mov	r4,r5
    d800:	dfc00215 	stw	ra,8(sp)
    d804:	80000015 	stw	zero,0(r16)
    d808:	001441c0 	call	1441c <sbrk>
    d80c:	00ffffc4 	movi	r3,-1
    d810:	10c00526 	beq	r2,r3,d828 <_sbrk_r+0x44>
    d814:	dfc00217 	ldw	ra,8(sp)
    d818:	dc400117 	ldw	r17,4(sp)
    d81c:	dc000017 	ldw	r16,0(sp)
    d820:	dec00304 	addi	sp,sp,12
    d824:	f800283a 	ret
    d828:	80c00017 	ldw	r3,0(r16)
    d82c:	183ff926 	beq	r3,zero,d814 <__alt_mem_Flash_flash_data+0xf400d814>
    d830:	88c00015 	stw	r3,0(r17)
    d834:	003ff706 	br	d814 <__alt_mem_Flash_flash_data+0xf400d814>

0000d838 <__sread>:
    d838:	defffe04 	addi	sp,sp,-8
    d83c:	dc000015 	stw	r16,0(sp)
    d840:	2821883a 	mov	r16,r5
    d844:	2940038f 	ldh	r5,14(r5)
    d848:	dfc00115 	stw	ra,4(sp)
    d84c:	00107940 	call	10794 <_read_r>
    d850:	10000716 	blt	r2,zero,d870 <__sread+0x38>
    d854:	80c01417 	ldw	r3,80(r16)
    d858:	1887883a 	add	r3,r3,r2
    d85c:	80c01415 	stw	r3,80(r16)
    d860:	dfc00117 	ldw	ra,4(sp)
    d864:	dc000017 	ldw	r16,0(sp)
    d868:	dec00204 	addi	sp,sp,8
    d86c:	f800283a 	ret
    d870:	80c0030b 	ldhu	r3,12(r16)
    d874:	18fbffcc 	andi	r3,r3,61439
    d878:	80c0030d 	sth	r3,12(r16)
    d87c:	dfc00117 	ldw	ra,4(sp)
    d880:	dc000017 	ldw	r16,0(sp)
    d884:	dec00204 	addi	sp,sp,8
    d888:	f800283a 	ret

0000d88c <__seofread>:
    d88c:	0005883a 	mov	r2,zero
    d890:	f800283a 	ret

0000d894 <__swrite>:
    d894:	2880030b 	ldhu	r2,12(r5)
    d898:	defffb04 	addi	sp,sp,-20
    d89c:	dcc00315 	stw	r19,12(sp)
    d8a0:	dc800215 	stw	r18,8(sp)
    d8a4:	dc400115 	stw	r17,4(sp)
    d8a8:	dc000015 	stw	r16,0(sp)
    d8ac:	dfc00415 	stw	ra,16(sp)
    d8b0:	10c0400c 	andi	r3,r2,256
    d8b4:	2821883a 	mov	r16,r5
    d8b8:	2027883a 	mov	r19,r4
    d8bc:	3025883a 	mov	r18,r6
    d8c0:	3823883a 	mov	r17,r7
    d8c4:	18000526 	beq	r3,zero,d8dc <__swrite+0x48>
    d8c8:	2940038f 	ldh	r5,14(r5)
    d8cc:	000d883a 	mov	r6,zero
    d8d0:	01c00084 	movi	r7,2
    d8d4:	00107380 	call	10738 <_lseek_r>
    d8d8:	8080030b 	ldhu	r2,12(r16)
    d8dc:	8140038f 	ldh	r5,14(r16)
    d8e0:	10bbffcc 	andi	r2,r2,61439
    d8e4:	9809883a 	mov	r4,r19
    d8e8:	900d883a 	mov	r6,r18
    d8ec:	880f883a 	mov	r7,r17
    d8f0:	8080030d 	sth	r2,12(r16)
    d8f4:	dfc00417 	ldw	ra,16(sp)
    d8f8:	dcc00317 	ldw	r19,12(sp)
    d8fc:	dc800217 	ldw	r18,8(sp)
    d900:	dc400117 	ldw	r17,4(sp)
    d904:	dc000017 	ldw	r16,0(sp)
    d908:	dec00504 	addi	sp,sp,20
    d90c:	00102341 	jmpi	10234 <_write_r>

0000d910 <__sseek>:
    d910:	defffe04 	addi	sp,sp,-8
    d914:	dc000015 	stw	r16,0(sp)
    d918:	2821883a 	mov	r16,r5
    d91c:	2940038f 	ldh	r5,14(r5)
    d920:	dfc00115 	stw	ra,4(sp)
    d924:	00107380 	call	10738 <_lseek_r>
    d928:	00ffffc4 	movi	r3,-1
    d92c:	10c00826 	beq	r2,r3,d950 <__sseek+0x40>
    d930:	80c0030b 	ldhu	r3,12(r16)
    d934:	80801415 	stw	r2,80(r16)
    d938:	18c40014 	ori	r3,r3,4096
    d93c:	80c0030d 	sth	r3,12(r16)
    d940:	dfc00117 	ldw	ra,4(sp)
    d944:	dc000017 	ldw	r16,0(sp)
    d948:	dec00204 	addi	sp,sp,8
    d94c:	f800283a 	ret
    d950:	80c0030b 	ldhu	r3,12(r16)
    d954:	18fbffcc 	andi	r3,r3,61439
    d958:	80c0030d 	sth	r3,12(r16)
    d95c:	dfc00117 	ldw	ra,4(sp)
    d960:	dc000017 	ldw	r16,0(sp)
    d964:	dec00204 	addi	sp,sp,8
    d968:	f800283a 	ret

0000d96c <__sclose>:
    d96c:	2940038f 	ldh	r5,14(r5)
    d970:	00102901 	jmpi	10290 <_close_r>

0000d974 <strcmp>:
    d974:	2144b03a 	or	r2,r4,r5
    d978:	108000cc 	andi	r2,r2,3
    d97c:	1000171e 	bne	r2,zero,d9dc <strcmp+0x68>
    d980:	20800017 	ldw	r2,0(r4)
    d984:	28c00017 	ldw	r3,0(r5)
    d988:	10c0141e 	bne	r2,r3,d9dc <strcmp+0x68>
    d98c:	027fbff4 	movhi	r9,65279
    d990:	4a7fbfc4 	addi	r9,r9,-257
    d994:	0086303a 	nor	r3,zero,r2
    d998:	02202074 	movhi	r8,32897
    d99c:	1245883a 	add	r2,r2,r9
    d9a0:	42202004 	addi	r8,r8,-32640
    d9a4:	10c4703a 	and	r2,r2,r3
    d9a8:	1204703a 	and	r2,r2,r8
    d9ac:	10000226 	beq	r2,zero,d9b8 <strcmp+0x44>
    d9b0:	00001706 	br	da10 <strcmp+0x9c>
    d9b4:	1000161e 	bne	r2,zero,da10 <strcmp+0x9c>
    d9b8:	21000104 	addi	r4,r4,4
    d9bc:	20c00017 	ldw	r3,0(r4)
    d9c0:	29400104 	addi	r5,r5,4
    d9c4:	29800017 	ldw	r6,0(r5)
    d9c8:	1a4f883a 	add	r7,r3,r9
    d9cc:	00c4303a 	nor	r2,zero,r3
    d9d0:	3884703a 	and	r2,r7,r2
    d9d4:	1204703a 	and	r2,r2,r8
    d9d8:	19bff626 	beq	r3,r6,d9b4 <__alt_mem_Flash_flash_data+0xf400d9b4>
    d9dc:	20800007 	ldb	r2,0(r4)
    d9e0:	1000051e 	bne	r2,zero,d9f8 <strcmp+0x84>
    d9e4:	00000606 	br	da00 <strcmp+0x8c>
    d9e8:	21000044 	addi	r4,r4,1
    d9ec:	20800007 	ldb	r2,0(r4)
    d9f0:	29400044 	addi	r5,r5,1
    d9f4:	10000226 	beq	r2,zero,da00 <strcmp+0x8c>
    d9f8:	28c00007 	ldb	r3,0(r5)
    d9fc:	10fffa26 	beq	r2,r3,d9e8 <__alt_mem_Flash_flash_data+0xf400d9e8>
    da00:	20800003 	ldbu	r2,0(r4)
    da04:	28c00003 	ldbu	r3,0(r5)
    da08:	10c5c83a 	sub	r2,r2,r3
    da0c:	f800283a 	ret
    da10:	0005883a 	mov	r2,zero
    da14:	f800283a 	ret

0000da18 <__ssprint_r>:
    da18:	30800217 	ldw	r2,8(r6)
    da1c:	defff604 	addi	sp,sp,-40
    da20:	ddc00715 	stw	r23,28(sp)
    da24:	dc800215 	stw	r18,8(sp)
    da28:	dfc00915 	stw	ra,36(sp)
    da2c:	df000815 	stw	fp,32(sp)
    da30:	dd800615 	stw	r22,24(sp)
    da34:	dd400515 	stw	r21,20(sp)
    da38:	dd000415 	stw	r20,16(sp)
    da3c:	dcc00315 	stw	r19,12(sp)
    da40:	dc400115 	stw	r17,4(sp)
    da44:	dc000015 	stw	r16,0(sp)
    da48:	3025883a 	mov	r18,r6
    da4c:	35c00017 	ldw	r23,0(r6)
    da50:	10005626 	beq	r2,zero,dbac <__ssprint_r+0x194>
    da54:	2027883a 	mov	r19,r4
    da58:	28800217 	ldw	r2,8(r5)
    da5c:	29000017 	ldw	r4,0(r5)
    da60:	2823883a 	mov	r17,r5
    da64:	0039883a 	mov	fp,zero
    da68:	0021883a 	mov	r16,zero
    da6c:	80003926 	beq	r16,zero,db54 <__ssprint_r+0x13c>
    da70:	102b883a 	mov	r21,r2
    da74:	102d883a 	mov	r22,r2
    da78:	80803a36 	bltu	r16,r2,db64 <__ssprint_r+0x14c>
    da7c:	88c0030b 	ldhu	r3,12(r17)
    da80:	1881200c 	andi	r2,r3,1152
    da84:	10002626 	beq	r2,zero,db20 <__ssprint_r+0x108>
    da88:	88800517 	ldw	r2,20(r17)
    da8c:	89400417 	ldw	r5,16(r17)
    da90:	81c00044 	addi	r7,r16,1
    da94:	108d883a 	add	r6,r2,r2
    da98:	3085883a 	add	r2,r6,r2
    da9c:	100cd7fa 	srli	r6,r2,31
    daa0:	216dc83a 	sub	r22,r4,r5
    daa4:	3d89883a 	add	r4,r7,r22
    daa8:	3085883a 	add	r2,r6,r2
    daac:	102bd07a 	srai	r21,r2,1
    dab0:	a80d883a 	mov	r6,r21
    dab4:	a900022e 	bgeu	r21,r4,dac0 <__ssprint_r+0xa8>
    dab8:	202b883a 	mov	r21,r4
    dabc:	200d883a 	mov	r6,r4
    dac0:	18c1000c 	andi	r3,r3,1024
    dac4:	9809883a 	mov	r4,r19
    dac8:	18002926 	beq	r3,zero,db70 <__ssprint_r+0x158>
    dacc:	300b883a 	mov	r5,r6
    dad0:	000b5d80 	call	b5d8 <_malloc_r>
    dad4:	1029883a 	mov	r20,r2
    dad8:	10002b26 	beq	r2,zero,db88 <__ssprint_r+0x170>
    dadc:	89400417 	ldw	r5,16(r17)
    dae0:	1009883a 	mov	r4,r2
    dae4:	b00d883a 	mov	r6,r22
    dae8:	000be680 	call	be68 <memcpy>
    daec:	8880030b 	ldhu	r2,12(r17)
    daf0:	00fedfc4 	movi	r3,-1153
    daf4:	10c4703a 	and	r2,r2,r3
    daf8:	10802014 	ori	r2,r2,128
    dafc:	8880030d 	sth	r2,12(r17)
    db00:	a589883a 	add	r4,r20,r22
    db04:	adadc83a 	sub	r22,r21,r22
    db08:	8d400515 	stw	r21,20(r17)
    db0c:	8d800215 	stw	r22,8(r17)
    db10:	8d000415 	stw	r20,16(r17)
    db14:	89000015 	stw	r4,0(r17)
    db18:	802b883a 	mov	r21,r16
    db1c:	802d883a 	mov	r22,r16
    db20:	e00b883a 	mov	r5,fp
    db24:	b00d883a 	mov	r6,r22
    db28:	000bfa00 	call	bfa0 <memmove>
    db2c:	88800217 	ldw	r2,8(r17)
    db30:	89000017 	ldw	r4,0(r17)
    db34:	90c00217 	ldw	r3,8(r18)
    db38:	1545c83a 	sub	r2,r2,r21
    db3c:	2589883a 	add	r4,r4,r22
    db40:	88800215 	stw	r2,8(r17)
    db44:	89000015 	stw	r4,0(r17)
    db48:	1c21c83a 	sub	r16,r3,r16
    db4c:	94000215 	stw	r16,8(r18)
    db50:	80001626 	beq	r16,zero,dbac <__ssprint_r+0x194>
    db54:	bf000017 	ldw	fp,0(r23)
    db58:	bc000117 	ldw	r16,4(r23)
    db5c:	bdc00204 	addi	r23,r23,8
    db60:	003fc206 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    db64:	802b883a 	mov	r21,r16
    db68:	802d883a 	mov	r22,r16
    db6c:	003fec06 	br	db20 <__alt_mem_Flash_flash_data+0xf400db20>
    db70:	000d2080 	call	d208 <_realloc_r>
    db74:	1029883a 	mov	r20,r2
    db78:	103fe11e 	bne	r2,zero,db00 <__alt_mem_Flash_flash_data+0xf400db00>
    db7c:	89400417 	ldw	r5,16(r17)
    db80:	9809883a 	mov	r4,r19
    db84:	000aa080 	call	aa08 <_free_r>
    db88:	88c0030b 	ldhu	r3,12(r17)
    db8c:	00800304 	movi	r2,12
    db90:	98800015 	stw	r2,0(r19)
    db94:	18c01014 	ori	r3,r3,64
    db98:	88c0030d 	sth	r3,12(r17)
    db9c:	00bfffc4 	movi	r2,-1
    dba0:	90000215 	stw	zero,8(r18)
    dba4:	90000115 	stw	zero,4(r18)
    dba8:	00000206 	br	dbb4 <__ssprint_r+0x19c>
    dbac:	90000115 	stw	zero,4(r18)
    dbb0:	0005883a 	mov	r2,zero
    dbb4:	dfc00917 	ldw	ra,36(sp)
    dbb8:	df000817 	ldw	fp,32(sp)
    dbbc:	ddc00717 	ldw	r23,28(sp)
    dbc0:	dd800617 	ldw	r22,24(sp)
    dbc4:	dd400517 	ldw	r21,20(sp)
    dbc8:	dd000417 	ldw	r20,16(sp)
    dbcc:	dcc00317 	ldw	r19,12(sp)
    dbd0:	dc800217 	ldw	r18,8(sp)
    dbd4:	dc400117 	ldw	r17,4(sp)
    dbd8:	dc000017 	ldw	r16,0(sp)
    dbdc:	dec00a04 	addi	sp,sp,40
    dbe0:	f800283a 	ret

0000dbe4 <___svfiprintf_internal_r>:
    dbe4:	2880030b 	ldhu	r2,12(r5)
    dbe8:	deffc904 	addi	sp,sp,-220
    dbec:	dd403215 	stw	r21,200(sp)
    dbf0:	dfc03615 	stw	ra,216(sp)
    dbf4:	df003515 	stw	fp,212(sp)
    dbf8:	ddc03415 	stw	r23,208(sp)
    dbfc:	dd803315 	stw	r22,204(sp)
    dc00:	dd003115 	stw	r20,196(sp)
    dc04:	dcc03015 	stw	r19,192(sp)
    dc08:	dc802f15 	stw	r18,188(sp)
    dc0c:	dc402e15 	stw	r17,184(sp)
    dc10:	dc002d15 	stw	r16,180(sp)
    dc14:	d9402715 	stw	r5,156(sp)
    dc18:	d9002915 	stw	r4,164(sp)
    dc1c:	1080200c 	andi	r2,r2,128
    dc20:	d9c02315 	stw	r7,140(sp)
    dc24:	302b883a 	mov	r21,r6
    dc28:	10000226 	beq	r2,zero,dc34 <___svfiprintf_internal_r+0x50>
    dc2c:	28800417 	ldw	r2,16(r5)
    dc30:	1003ce26 	beq	r2,zero,eb6c <___svfiprintf_internal_r+0xf88>
    dc34:	dac01a04 	addi	r11,sp,104
    dc38:	da8019c4 	addi	r10,sp,103
    dc3c:	dc802917 	ldw	r18,164(sp)
    dc40:	dd002717 	ldw	r20,156(sp)
    dc44:	04c000b4 	movhi	r19,2
    dc48:	dac01e15 	stw	r11,120(sp)
    dc4c:	5a97c83a 	sub	r11,r11,r10
    dc50:	9cd72004 	addi	r19,r19,23680
    dc54:	da801f15 	stw	r10,124(sp)
    dc58:	dec01a15 	stw	sp,104(sp)
    dc5c:	d8001c15 	stw	zero,112(sp)
    dc60:	d8001b15 	stw	zero,108(sp)
    dc64:	d811883a 	mov	r8,sp
    dc68:	d8002a15 	stw	zero,168(sp)
    dc6c:	d8002415 	stw	zero,144(sp)
    dc70:	dac02b15 	stw	r11,172(sp)
    dc74:	a8800007 	ldb	r2,0(r21)
    dc78:	10026a26 	beq	r2,zero,e624 <___svfiprintf_internal_r+0xa40>
    dc7c:	01000944 	movi	r4,37
    dc80:	11026826 	beq	r2,r4,e624 <___svfiprintf_internal_r+0xa40>
    dc84:	a805883a 	mov	r2,r21
    dc88:	00000106 	br	dc90 <___svfiprintf_internal_r+0xac>
    dc8c:	19000326 	beq	r3,r4,dc9c <___svfiprintf_internal_r+0xb8>
    dc90:	10800044 	addi	r2,r2,1
    dc94:	10c00007 	ldb	r3,0(r2)
    dc98:	183ffc1e 	bne	r3,zero,dc8c <__alt_mem_Flash_flash_data+0xf400dc8c>
    dc9c:	1561c83a 	sub	r16,r2,r21
    dca0:	102d883a 	mov	r22,r2
    dca4:	80000e26 	beq	r16,zero,dce0 <___svfiprintf_internal_r+0xfc>
    dca8:	d8c01c17 	ldw	r3,112(sp)
    dcac:	d8801b17 	ldw	r2,108(sp)
    dcb0:	45400015 	stw	r21,0(r8)
    dcb4:	1c07883a 	add	r3,r3,r16
    dcb8:	10800044 	addi	r2,r2,1
    dcbc:	d8c01c15 	stw	r3,112(sp)
    dcc0:	44000115 	stw	r16,4(r8)
    dcc4:	d8801b15 	stw	r2,108(sp)
    dcc8:	00c001c4 	movi	r3,7
    dccc:	1882d816 	blt	r3,r2,e830 <___svfiprintf_internal_r+0xc4c>
    dcd0:	42000204 	addi	r8,r8,8
    dcd4:	da802417 	ldw	r10,144(sp)
    dcd8:	5415883a 	add	r10,r10,r16
    dcdc:	da802415 	stw	r10,144(sp)
    dce0:	b0800007 	ldb	r2,0(r22)
    dce4:	10027526 	beq	r2,zero,e6bc <___svfiprintf_internal_r+0xad8>
    dce8:	b1000047 	ldb	r4,1(r22)
    dcec:	b5400044 	addi	r21,r22,1
    dcf0:	d8001d85 	stb	zero,118(sp)
    dcf4:	000d883a 	mov	r6,zero
    dcf8:	043fffc4 	movi	r16,-1
    dcfc:	d8002115 	stw	zero,132(sp)
    dd00:	0023883a 	mov	r17,zero
    dd04:	00c01604 	movi	r3,88
    dd08:	01400244 	movi	r5,9
    dd0c:	02400a84 	movi	r9,42
    dd10:	01c01b04 	movi	r7,108
    dd14:	ad400044 	addi	r21,r21,1
    dd18:	20bff804 	addi	r2,r4,-32
    dd1c:	18819736 	bltu	r3,r2,e37c <___svfiprintf_internal_r+0x798>
    dd20:	100490ba 	slli	r2,r2,2
    dd24:	02c00074 	movhi	r11,1
    dd28:	5af74e04 	addi	r11,r11,-8904
    dd2c:	12c5883a 	add	r2,r2,r11
    dd30:	10800017 	ldw	r2,0(r2)
    dd34:	1000683a 	jmp	r2
    dd38:	0000e274 	movhi	zero,905
    dd3c:	0000e37c 	xorhi	zero,zero,909
    dd40:	0000e37c 	xorhi	zero,zero,909
    dd44:	0000e268 	cmpgeui	zero,zero,905
    dd48:	0000e37c 	xorhi	zero,zero,909
    dd4c:	0000e37c 	xorhi	zero,zero,909
    dd50:	0000e37c 	xorhi	zero,zero,909
    dd54:	0000e37c 	xorhi	zero,zero,909
    dd58:	0000e37c 	xorhi	zero,zero,909
    dd5c:	0000e37c 	xorhi	zero,zero,909
    dd60:	0000df94 	movui	zero,894
    dd64:	0000e3b0 	cmpltui	zero,zero,910
    dd68:	0000e37c 	xorhi	zero,zero,909
    dd6c:	0000dfbc 	xorhi	zero,zero,894
    dd70:	0000e3bc 	xorhi	zero,zero,910
    dd74:	0000e37c 	xorhi	zero,zero,909
    dd78:	0000e3a4 	muli	zero,zero,910
    dd7c:	0000e344 	movi	zero,909
    dd80:	0000e344 	movi	zero,909
    dd84:	0000e344 	movi	zero,909
    dd88:	0000e344 	movi	zero,909
    dd8c:	0000e344 	movi	zero,909
    dd90:	0000e344 	movi	zero,909
    dd94:	0000e344 	movi	zero,909
    dd98:	0000e344 	movi	zero,909
    dd9c:	0000e344 	movi	zero,909
    dda0:	0000e37c 	xorhi	zero,zero,909
    dda4:	0000e37c 	xorhi	zero,zero,909
    dda8:	0000e37c 	xorhi	zero,zero,909
    ddac:	0000e37c 	xorhi	zero,zero,909
    ddb0:	0000e37c 	xorhi	zero,zero,909
    ddb4:	0000e37c 	xorhi	zero,zero,909
    ddb8:	0000e37c 	xorhi	zero,zero,909
    ddbc:	0000e37c 	xorhi	zero,zero,909
    ddc0:	0000e37c 	xorhi	zero,zero,909
    ddc4:	0000e37c 	xorhi	zero,zero,909
    ddc8:	0000e2dc 	xori	zero,zero,907
    ddcc:	0000e37c 	xorhi	zero,zero,909
    ddd0:	0000e37c 	xorhi	zero,zero,909
    ddd4:	0000e37c 	xorhi	zero,zero,909
    ddd8:	0000e37c 	xorhi	zero,zero,909
    dddc:	0000e37c 	xorhi	zero,zero,909
    dde0:	0000e37c 	xorhi	zero,zero,909
    dde4:	0000e37c 	xorhi	zero,zero,909
    dde8:	0000e37c 	xorhi	zero,zero,909
    ddec:	0000e37c 	xorhi	zero,zero,909
    ddf0:	0000e37c 	xorhi	zero,zero,909
    ddf4:	0000df68 	cmpgeui	zero,zero,893
    ddf8:	0000e37c 	xorhi	zero,zero,909
    ddfc:	0000e37c 	xorhi	zero,zero,909
    de00:	0000e37c 	xorhi	zero,zero,909
    de04:	0000e37c 	xorhi	zero,zero,909
    de08:	0000e37c 	xorhi	zero,zero,909
    de0c:	0000de9c 	xori	zero,zero,890
    de10:	0000e37c 	xorhi	zero,zero,909
    de14:	0000e37c 	xorhi	zero,zero,909
    de18:	0000e1c8 	cmpgei	zero,zero,903
    de1c:	0000e37c 	xorhi	zero,zero,909
    de20:	0000e37c 	xorhi	zero,zero,909
    de24:	0000e37c 	xorhi	zero,zero,909
    de28:	0000e37c 	xorhi	zero,zero,909
    de2c:	0000e37c 	xorhi	zero,zero,909
    de30:	0000e37c 	xorhi	zero,zero,909
    de34:	0000e37c 	xorhi	zero,zero,909
    de38:	0000e37c 	xorhi	zero,zero,909
    de3c:	0000e37c 	xorhi	zero,zero,909
    de40:	0000e37c 	xorhi	zero,zero,909
    de44:	0000e0b4 	movhi	zero,898
    de48:	0000e074 	movhi	zero,897
    de4c:	0000e37c 	xorhi	zero,zero,909
    de50:	0000e37c 	xorhi	zero,zero,909
    de54:	0000e37c 	xorhi	zero,zero,909
    de58:	0000e224 	muli	zero,zero,904
    de5c:	0000e074 	movhi	zero,897
    de60:	0000e37c 	xorhi	zero,zero,909
    de64:	0000e37c 	xorhi	zero,zero,909
    de68:	0000e210 	cmplti	zero,zero,904
    de6c:	0000e37c 	xorhi	zero,zero,909
    de70:	0000e230 	cmpltui	zero,zero,904
    de74:	0000df6c 	andhi	zero,zero,893
    de78:	0000e030 	cmpltui	zero,zero,896
    de7c:	0000e024 	muli	zero,zero,896
    de80:	0000e37c 	xorhi	zero,zero,909
    de84:	0000dfc8 	cmpgei	zero,zero,895
    de88:	0000e37c 	xorhi	zero,zero,909
    de8c:	0000dea0 	cmpeqi	zero,zero,890
    de90:	0000e37c 	xorhi	zero,zero,909
    de94:	0000e37c 	xorhi	zero,zero,909
    de98:	0000e290 	cmplti	zero,zero,906
    de9c:	8c400414 	ori	r17,r17,16
    dea0:	8880080c 	andi	r2,r17,32
    dea4:	10029626 	beq	r2,zero,e900 <___svfiprintf_internal_r+0xd1c>
    dea8:	da802317 	ldw	r10,140(sp)
    deac:	dac02317 	ldw	r11,140(sp)
    deb0:	00800044 	movi	r2,1
    deb4:	52400017 	ldw	r9,0(r10)
    deb8:	52800117 	ldw	r10,4(r10)
    debc:	5ac00204 	addi	r11,r11,8
    dec0:	dac02315 	stw	r11,140(sp)
    dec4:	4a86b03a 	or	r3,r9,r10
    dec8:	d8001d85 	stb	zero,118(sp)
    decc:	8039883a 	mov	fp,r16
    ded0:	0017883a 	mov	r11,zero
    ded4:	80000216 	blt	r16,zero,dee0 <___svfiprintf_internal_r+0x2fc>
    ded8:	013fdfc4 	movi	r4,-129
    dedc:	8922703a 	and	r17,r17,r4
    dee0:	1801d21e 	bne	r3,zero,e62c <___svfiprintf_internal_r+0xa48>
    dee4:	80024626 	beq	r16,zero,e800 <___svfiprintf_internal_r+0xc1c>
    dee8:	10803fcc 	andi	r2,r2,255
    deec:	00c00044 	movi	r3,1
    def0:	10c2b426 	beq	r2,r3,e9c4 <___svfiprintf_internal_r+0xde0>
    def4:	00c00084 	movi	r3,2
    def8:	10c25d26 	beq	r2,r3,e870 <___svfiprintf_internal_r+0xc8c>
    defc:	d8c01a04 	addi	r3,sp,104
    df00:	4808d0fa 	srli	r4,r9,3
    df04:	500a977a 	slli	r5,r10,29
    df08:	5014d0fa 	srli	r10,r10,3
    df0c:	4a4001cc 	andi	r9,r9,7
    df10:	48800c04 	addi	r2,r9,48
    df14:	18ffffc4 	addi	r3,r3,-1
    df18:	2912b03a 	or	r9,r5,r4
    df1c:	18800005 	stb	r2,0(r3)
    df20:	4a88b03a 	or	r4,r9,r10
    df24:	203ff61e 	bne	r4,zero,df00 <__alt_mem_Flash_flash_data+0xf400df00>
    df28:	8900004c 	andi	r4,r17,1
    df2c:	d8c02615 	stw	r3,152(sp)
    df30:	2002961e 	bne	r4,zero,e98c <___svfiprintf_internal_r+0xda8>
    df34:	da801e17 	ldw	r10,120(sp)
    df38:	50f9c83a 	sub	fp,r10,r3
    df3c:	df002015 	stw	fp,128(sp)
    df40:	e400010e 	bge	fp,r16,df48 <___svfiprintf_internal_r+0x364>
    df44:	dc002015 	stw	r16,128(sp)
    df48:	5ac03fcc 	andi	r11,r11,255
    df4c:	5ac0201c 	xori	r11,r11,128
    df50:	5affe004 	addi	r11,r11,-128
    df54:	58006326 	beq	r11,zero,e0e4 <___svfiprintf_internal_r+0x500>
    df58:	d8c02017 	ldw	r3,128(sp)
    df5c:	18c00044 	addi	r3,r3,1
    df60:	d8c02015 	stw	r3,128(sp)
    df64:	00005f06 	br	e0e4 <___svfiprintf_internal_r+0x500>
    df68:	8c400414 	ori	r17,r17,16
    df6c:	8880080c 	andi	r2,r17,32
    df70:	10027926 	beq	r2,zero,e958 <___svfiprintf_internal_r+0xd74>
    df74:	dac02317 	ldw	r11,140(sp)
    df78:	0005883a 	mov	r2,zero
    df7c:	5a400017 	ldw	r9,0(r11)
    df80:	5a800117 	ldw	r10,4(r11)
    df84:	5ac00204 	addi	r11,r11,8
    df88:	dac02315 	stw	r11,140(sp)
    df8c:	4a86b03a 	or	r3,r9,r10
    df90:	003fcd06 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    df94:	da802317 	ldw	r10,140(sp)
    df98:	dac02317 	ldw	r11,140(sp)
    df9c:	52800017 	ldw	r10,0(r10)
    dfa0:	58800104 	addi	r2,r11,4
    dfa4:	da802115 	stw	r10,132(sp)
    dfa8:	50028c0e 	bge	r10,zero,e9dc <___svfiprintf_internal_r+0xdf8>
    dfac:	da802117 	ldw	r10,132(sp)
    dfb0:	d8802315 	stw	r2,140(sp)
    dfb4:	0295c83a 	sub	r10,zero,r10
    dfb8:	da802115 	stw	r10,132(sp)
    dfbc:	8c400114 	ori	r17,r17,4
    dfc0:	a9000007 	ldb	r4,0(r21)
    dfc4:	003f5306 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    dfc8:	da802317 	ldw	r10,140(sp)
    dfcc:	dac02317 	ldw	r11,140(sp)
    dfd0:	d8001d85 	stb	zero,118(sp)
    dfd4:	52800017 	ldw	r10,0(r10)
    dfd8:	5dc00104 	addi	r23,r11,4
    dfdc:	da802615 	stw	r10,152(sp)
    dfe0:	5002d626 	beq	r10,zero,eb3c <___svfiprintf_internal_r+0xf58>
    dfe4:	d9002617 	ldw	r4,152(sp)
    dfe8:	8002cc16 	blt	r16,zero,eb1c <___svfiprintf_internal_r+0xf38>
    dfec:	000b883a 	mov	r5,zero
    dff0:	800d883a 	mov	r6,r16
    dff4:	da002c15 	stw	r8,176(sp)
    dff8:	000bd800 	call	bd80 <memchr>
    dffc:	da002c17 	ldw	r8,176(sp)
    e000:	1002f026 	beq	r2,zero,ebc4 <___svfiprintf_internal_r+0xfe0>
    e004:	d8c02617 	ldw	r3,152(sp)
    e008:	10f9c83a 	sub	fp,r2,r3
    e00c:	8700010e 	bge	r16,fp,e014 <___svfiprintf_internal_r+0x430>
    e010:	8039883a 	mov	fp,r16
    e014:	dac01d83 	ldbu	r11,118(sp)
    e018:	ddc02315 	stw	r23,140(sp)
    e01c:	0021883a 	mov	r16,zero
    e020:	003fc606 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e024:	8c400814 	ori	r17,r17,32
    e028:	a9000007 	ldb	r4,0(r21)
    e02c:	003f3906 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e030:	da802317 	ldw	r10,140(sp)
    e034:	00800c04 	movi	r2,48
    e038:	dac02317 	ldw	r11,140(sp)
    e03c:	52400017 	ldw	r9,0(r10)
    e040:	d8801d05 	stb	r2,116(sp)
    e044:	00801e04 	movi	r2,120
    e048:	d8801d45 	stb	r2,117(sp)
    e04c:	008000b4 	movhi	r2,2
    e050:	1096b704 	addi	r2,r2,23260
    e054:	5ac00104 	addi	r11,r11,4
    e058:	d8802a15 	stw	r2,168(sp)
    e05c:	0015883a 	mov	r10,zero
    e060:	8c400094 	ori	r17,r17,2
    e064:	dac02315 	stw	r11,140(sp)
    e068:	00800084 	movi	r2,2
    e06c:	4807883a 	mov	r3,r9
    e070:	003f9506 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e074:	d9801d85 	stb	r6,118(sp)
    e078:	8880080c 	andi	r2,r17,32
    e07c:	d8c02317 	ldw	r3,140(sp)
    e080:	10009b26 	beq	r2,zero,e2f0 <___svfiprintf_internal_r+0x70c>
    e084:	dac02317 	ldw	r11,140(sp)
    e088:	18800117 	ldw	r2,4(r3)
    e08c:	1a400017 	ldw	r9,0(r3)
    e090:	5ac00204 	addi	r11,r11,8
    e094:	dac02315 	stw	r11,140(sp)
    e098:	1015883a 	mov	r10,r2
    e09c:	10009f16 	blt	r2,zero,e31c <___svfiprintf_internal_r+0x738>
    e0a0:	dac01d83 	ldbu	r11,118(sp)
    e0a4:	8039883a 	mov	fp,r16
    e0a8:	00800044 	movi	r2,1
    e0ac:	4a86b03a 	or	r3,r9,r10
    e0b0:	003f8806 	br	ded4 <__alt_mem_Flash_flash_data+0xf400ded4>
    e0b4:	dac02317 	ldw	r11,140(sp)
    e0b8:	00c00044 	movi	r3,1
    e0bc:	da801004 	addi	r10,sp,64
    e0c0:	58800017 	ldw	r2,0(r11)
    e0c4:	5ac00104 	addi	r11,r11,4
    e0c8:	d8c02015 	stw	r3,128(sp)
    e0cc:	d8001d85 	stb	zero,118(sp)
    e0d0:	d8801005 	stb	r2,64(sp)
    e0d4:	dac02315 	stw	r11,140(sp)
    e0d8:	1839883a 	mov	fp,r3
    e0dc:	da802615 	stw	r10,152(sp)
    e0e0:	0021883a 	mov	r16,zero
    e0e4:	8a80008c 	andi	r10,r17,2
    e0e8:	da802215 	stw	r10,136(sp)
    e0ec:	50000326 	beq	r10,zero,e0fc <___svfiprintf_internal_r+0x518>
    e0f0:	dac02017 	ldw	r11,128(sp)
    e0f4:	5ac00084 	addi	r11,r11,2
    e0f8:	dac02015 	stw	r11,128(sp)
    e0fc:	88c0210c 	andi	r3,r17,132
    e100:	d8c02515 	stw	r3,148(sp)
    e104:	1800bd1e 	bne	r3,zero,e3fc <___svfiprintf_internal_r+0x818>
    e108:	da802117 	ldw	r10,132(sp)
    e10c:	dac02017 	ldw	r11,128(sp)
    e110:	52edc83a 	sub	r22,r10,r11
    e114:	0580b90e 	bge	zero,r22,e3fc <___svfiprintf_internal_r+0x818>
    e118:	02400404 	movi	r9,16
    e11c:	d8c01c17 	ldw	r3,112(sp)
    e120:	d8801b17 	ldw	r2,108(sp)
    e124:	4d829b0e 	bge	r9,r22,eb94 <___svfiprintf_internal_r+0xfb0>
    e128:	014000b4 	movhi	r5,2
    e12c:	29572404 	addi	r5,r5,23696
    e130:	d9402815 	stw	r5,160(sp)
    e134:	05c001c4 	movi	r23,7
    e138:	00000306 	br	e148 <___svfiprintf_internal_r+0x564>
    e13c:	b5bffc04 	addi	r22,r22,-16
    e140:	42000204 	addi	r8,r8,8
    e144:	4d80150e 	bge	r9,r22,e19c <___svfiprintf_internal_r+0x5b8>
    e148:	028000b4 	movhi	r10,2
    e14c:	18c00404 	addi	r3,r3,16
    e150:	10800044 	addi	r2,r2,1
    e154:	52972404 	addi	r10,r10,23696
    e158:	42800015 	stw	r10,0(r8)
    e15c:	42400115 	stw	r9,4(r8)
    e160:	d8c01c15 	stw	r3,112(sp)
    e164:	d8801b15 	stw	r2,108(sp)
    e168:	b8bff40e 	bge	r23,r2,e13c <__alt_mem_Flash_flash_data+0xf400e13c>
    e16c:	9009883a 	mov	r4,r18
    e170:	a00b883a 	mov	r5,r20
    e174:	d9801a04 	addi	r6,sp,104
    e178:	da402c15 	stw	r9,176(sp)
    e17c:	000da180 	call	da18 <__ssprint_r>
    e180:	da402c17 	ldw	r9,176(sp)
    e184:	1001531e 	bne	r2,zero,e6d4 <___svfiprintf_internal_r+0xaf0>
    e188:	b5bffc04 	addi	r22,r22,-16
    e18c:	d8c01c17 	ldw	r3,112(sp)
    e190:	d8801b17 	ldw	r2,108(sp)
    e194:	d811883a 	mov	r8,sp
    e198:	4dbfeb16 	blt	r9,r22,e148 <__alt_mem_Flash_flash_data+0xf400e148>
    e19c:	dac02817 	ldw	r11,160(sp)
    e1a0:	b0c7883a 	add	r3,r22,r3
    e1a4:	10800044 	addi	r2,r2,1
    e1a8:	42c00015 	stw	r11,0(r8)
    e1ac:	45800115 	stw	r22,4(r8)
    e1b0:	d8c01c15 	stw	r3,112(sp)
    e1b4:	d8801b15 	stw	r2,108(sp)
    e1b8:	010001c4 	movi	r4,7
    e1bc:	2081dd16 	blt	r4,r2,e934 <___svfiprintf_internal_r+0xd50>
    e1c0:	42000204 	addi	r8,r8,8
    e1c4:	00008f06 	br	e404 <___svfiprintf_internal_r+0x820>
    e1c8:	008000b4 	movhi	r2,2
    e1cc:	1096b204 	addi	r2,r2,23240
    e1d0:	d8802a15 	stw	r2,168(sp)
    e1d4:	d9801d85 	stb	r6,118(sp)
    e1d8:	8880080c 	andi	r2,r17,32
    e1dc:	10003226 	beq	r2,zero,e2a8 <___svfiprintf_internal_r+0x6c4>
    e1e0:	da802317 	ldw	r10,140(sp)
    e1e4:	dac02317 	ldw	r11,140(sp)
    e1e8:	52400017 	ldw	r9,0(r10)
    e1ec:	52800117 	ldw	r10,4(r10)
    e1f0:	5ac00204 	addi	r11,r11,8
    e1f4:	dac02315 	stw	r11,140(sp)
    e1f8:	8880004c 	andi	r2,r17,1
    e1fc:	10003426 	beq	r2,zero,e2d0 <___svfiprintf_internal_r+0x6ec>
    e200:	4a86b03a 	or	r3,r9,r10
    e204:	1802231e 	bne	r3,zero,ea94 <___svfiprintf_internal_r+0xeb0>
    e208:	00800084 	movi	r2,2
    e20c:	003f2e06 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e210:	a9000007 	ldb	r4,0(r21)
    e214:	a805883a 	mov	r2,r21
    e218:	21c22426 	beq	r4,r7,eaac <___svfiprintf_internal_r+0xec8>
    e21c:	8c400414 	ori	r17,r17,16
    e220:	003ebc06 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e224:	8c401014 	ori	r17,r17,64
    e228:	a9000007 	ldb	r4,0(r21)
    e22c:	003eb906 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e230:	d9801d85 	stb	r6,118(sp)
    e234:	8880080c 	andi	r2,r17,32
    e238:	10020d1e 	bne	r2,zero,ea70 <___svfiprintf_internal_r+0xe8c>
    e23c:	8880040c 	andi	r2,r17,16
    e240:	10021e1e 	bne	r2,zero,eabc <___svfiprintf_internal_r+0xed8>
    e244:	8c40100c 	andi	r17,r17,64
    e248:	88021c26 	beq	r17,zero,eabc <___svfiprintf_internal_r+0xed8>
    e24c:	dac02317 	ldw	r11,140(sp)
    e250:	da802417 	ldw	r10,144(sp)
    e254:	58800017 	ldw	r2,0(r11)
    e258:	5ac00104 	addi	r11,r11,4
    e25c:	dac02315 	stw	r11,140(sp)
    e260:	1280000d 	sth	r10,0(r2)
    e264:	003e8306 	br	dc74 <__alt_mem_Flash_flash_data+0xf400dc74>
    e268:	8c400054 	ori	r17,r17,1
    e26c:	a9000007 	ldb	r4,0(r21)
    e270:	003ea806 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e274:	30803fcc 	andi	r2,r6,255
    e278:	1080201c 	xori	r2,r2,128
    e27c:	10bfe004 	addi	r2,r2,-128
    e280:	1001f91e 	bne	r2,zero,ea68 <___svfiprintf_internal_r+0xe84>
    e284:	01800804 	movi	r6,32
    e288:	a9000007 	ldb	r4,0(r21)
    e28c:	003ea106 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e290:	008000b4 	movhi	r2,2
    e294:	1096b704 	addi	r2,r2,23260
    e298:	d8802a15 	stw	r2,168(sp)
    e29c:	d9801d85 	stb	r6,118(sp)
    e2a0:	8880080c 	andi	r2,r17,32
    e2a4:	103fce1e 	bne	r2,zero,e1e0 <__alt_mem_Flash_flash_data+0xf400e1e0>
    e2a8:	8880040c 	andi	r2,r17,16
    e2ac:	1001e526 	beq	r2,zero,ea44 <___svfiprintf_internal_r+0xe60>
    e2b0:	da802317 	ldw	r10,140(sp)
    e2b4:	dac02317 	ldw	r11,140(sp)
    e2b8:	52400017 	ldw	r9,0(r10)
    e2bc:	8880004c 	andi	r2,r17,1
    e2c0:	5ac00104 	addi	r11,r11,4
    e2c4:	dac02315 	stw	r11,140(sp)
    e2c8:	0015883a 	mov	r10,zero
    e2cc:	103fcc1e 	bne	r2,zero,e200 <__alt_mem_Flash_flash_data+0xf400e200>
    e2d0:	00800084 	movi	r2,2
    e2d4:	4a86b03a 	or	r3,r9,r10
    e2d8:	003efb06 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e2dc:	8c400414 	ori	r17,r17,16
    e2e0:	d9801d85 	stb	r6,118(sp)
    e2e4:	8880080c 	andi	r2,r17,32
    e2e8:	d8c02317 	ldw	r3,140(sp)
    e2ec:	103f651e 	bne	r2,zero,e084 <__alt_mem_Flash_flash_data+0xf400e084>
    e2f0:	8880040c 	andi	r2,r17,16
    e2f4:	1001c61e 	bne	r2,zero,ea10 <___svfiprintf_internal_r+0xe2c>
    e2f8:	8880100c 	andi	r2,r17,64
    e2fc:	1001c426 	beq	r2,zero,ea10 <___svfiprintf_internal_r+0xe2c>
    e300:	1a40000f 	ldh	r9,0(r3)
    e304:	dac02317 	ldw	r11,140(sp)
    e308:	4815d7fa 	srai	r10,r9,31
    e30c:	5ac00104 	addi	r11,r11,4
    e310:	dac02315 	stw	r11,140(sp)
    e314:	5005883a 	mov	r2,r10
    e318:	103f610e 	bge	r2,zero,e0a0 <__alt_mem_Flash_flash_data+0xf400e0a0>
    e31c:	0253c83a 	sub	r9,zero,r9
    e320:	4804c03a 	cmpne	r2,r9,zero
    e324:	0295c83a 	sub	r10,zero,r10
    e328:	5095c83a 	sub	r10,r10,r2
    e32c:	02c00b44 	movi	r11,45
    e330:	dac01d85 	stb	r11,118(sp)
    e334:	8039883a 	mov	fp,r16
    e338:	00800044 	movi	r2,1
    e33c:	4a86b03a 	or	r3,r9,r10
    e340:	003ee406 	br	ded4 <__alt_mem_Flash_flash_data+0xf400ded4>
    e344:	a815883a 	mov	r10,r21
    e348:	d8002115 	stw	zero,132(sp)
    e34c:	20bff404 	addi	r2,r4,-48
    e350:	51000007 	ldb	r4,0(r10)
    e354:	da802117 	ldw	r10,132(sp)
    e358:	ad400044 	addi	r21,r21,1
    e35c:	52c002a4 	muli	r11,r10,10
    e360:	a815883a 	mov	r10,r21
    e364:	5885883a 	add	r2,r11,r2
    e368:	d8802115 	stw	r2,132(sp)
    e36c:	20bff404 	addi	r2,r4,-48
    e370:	28bff72e 	bgeu	r5,r2,e350 <__alt_mem_Flash_flash_data+0xf400e350>
    e374:	20bff804 	addi	r2,r4,-32
    e378:	18be692e 	bgeu	r3,r2,dd20 <__alt_mem_Flash_flash_data+0xf400dd20>
    e37c:	d9801d85 	stb	r6,118(sp)
    e380:	2000ce26 	beq	r4,zero,e6bc <___svfiprintf_internal_r+0xad8>
    e384:	02800044 	movi	r10,1
    e388:	dac01004 	addi	r11,sp,64
    e38c:	da802015 	stw	r10,128(sp)
    e390:	d9001005 	stb	r4,64(sp)
    e394:	d8001d85 	stb	zero,118(sp)
    e398:	5039883a 	mov	fp,r10
    e39c:	dac02615 	stw	r11,152(sp)
    e3a0:	003f4f06 	br	e0e0 <__alt_mem_Flash_flash_data+0xf400e0e0>
    e3a4:	8c402014 	ori	r17,r17,128
    e3a8:	a9000007 	ldb	r4,0(r21)
    e3ac:	003e5906 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e3b0:	01800ac4 	movi	r6,43
    e3b4:	a9000007 	ldb	r4,0(r21)
    e3b8:	003e5606 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e3bc:	a9000007 	ldb	r4,0(r21)
    e3c0:	aa800044 	addi	r10,r21,1
    e3c4:	22420626 	beq	r4,r9,ebe0 <___svfiprintf_internal_r+0xffc>
    e3c8:	20bff404 	addi	r2,r4,-48
    e3cc:	502b883a 	mov	r21,r10
    e3d0:	0021883a 	mov	r16,zero
    e3d4:	28be5036 	bltu	r5,r2,dd18 <__alt_mem_Flash_flash_data+0xf400dd18>
    e3d8:	a9000007 	ldb	r4,0(r21)
    e3dc:	840002a4 	muli	r16,r16,10
    e3e0:	ad400044 	addi	r21,r21,1
    e3e4:	1421883a 	add	r16,r2,r16
    e3e8:	20bff404 	addi	r2,r4,-48
    e3ec:	28bffa2e 	bgeu	r5,r2,e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    e3f0:	803e490e 	bge	r16,zero,dd18 <__alt_mem_Flash_flash_data+0xf400dd18>
    e3f4:	043fffc4 	movi	r16,-1
    e3f8:	003e4706 	br	dd18 <__alt_mem_Flash_flash_data+0xf400dd18>
    e3fc:	d8c01c17 	ldw	r3,112(sp)
    e400:	d8801b17 	ldw	r2,108(sp)
    e404:	d9001d87 	ldb	r4,118(sp)
    e408:	20000b26 	beq	r4,zero,e438 <___svfiprintf_internal_r+0x854>
    e40c:	d9001d84 	addi	r4,sp,118
    e410:	18c00044 	addi	r3,r3,1
    e414:	10800044 	addi	r2,r2,1
    e418:	41000015 	stw	r4,0(r8)
    e41c:	01000044 	movi	r4,1
    e420:	41000115 	stw	r4,4(r8)
    e424:	d8c01c15 	stw	r3,112(sp)
    e428:	d8801b15 	stw	r2,108(sp)
    e42c:	010001c4 	movi	r4,7
    e430:	20811e16 	blt	r4,r2,e8ac <___svfiprintf_internal_r+0xcc8>
    e434:	42000204 	addi	r8,r8,8
    e438:	da802217 	ldw	r10,136(sp)
    e43c:	50000b26 	beq	r10,zero,e46c <___svfiprintf_internal_r+0x888>
    e440:	d9001d04 	addi	r4,sp,116
    e444:	18c00084 	addi	r3,r3,2
    e448:	10800044 	addi	r2,r2,1
    e44c:	41000015 	stw	r4,0(r8)
    e450:	01000084 	movi	r4,2
    e454:	41000115 	stw	r4,4(r8)
    e458:	d8c01c15 	stw	r3,112(sp)
    e45c:	d8801b15 	stw	r2,108(sp)
    e460:	010001c4 	movi	r4,7
    e464:	20811a16 	blt	r4,r2,e8d0 <___svfiprintf_internal_r+0xcec>
    e468:	42000204 	addi	r8,r8,8
    e46c:	dac02517 	ldw	r11,148(sp)
    e470:	01002004 	movi	r4,128
    e474:	5900a826 	beq	r11,r4,e718 <___svfiprintf_internal_r+0xb34>
    e478:	8721c83a 	sub	r16,r16,fp
    e47c:	0400260e 	bge	zero,r16,e518 <___svfiprintf_internal_r+0x934>
    e480:	01c00404 	movi	r7,16
    e484:	3c019d0e 	bge	r7,r16,eafc <___svfiprintf_internal_r+0xf18>
    e488:	010000b4 	movhi	r4,2
    e48c:	21172004 	addi	r4,r4,23680
    e490:	d9002215 	stw	r4,136(sp)
    e494:	382f883a 	mov	r23,r7
    e498:	058001c4 	movi	r22,7
    e49c:	00000306 	br	e4ac <___svfiprintf_internal_r+0x8c8>
    e4a0:	843ffc04 	addi	r16,r16,-16
    e4a4:	42000204 	addi	r8,r8,8
    e4a8:	bc00110e 	bge	r23,r16,e4f0 <___svfiprintf_internal_r+0x90c>
    e4ac:	18c00404 	addi	r3,r3,16
    e4b0:	10800044 	addi	r2,r2,1
    e4b4:	44c00015 	stw	r19,0(r8)
    e4b8:	45c00115 	stw	r23,4(r8)
    e4bc:	d8c01c15 	stw	r3,112(sp)
    e4c0:	d8801b15 	stw	r2,108(sp)
    e4c4:	b0bff60e 	bge	r22,r2,e4a0 <__alt_mem_Flash_flash_data+0xf400e4a0>
    e4c8:	9009883a 	mov	r4,r18
    e4cc:	a00b883a 	mov	r5,r20
    e4d0:	d9801a04 	addi	r6,sp,104
    e4d4:	000da180 	call	da18 <__ssprint_r>
    e4d8:	10007e1e 	bne	r2,zero,e6d4 <___svfiprintf_internal_r+0xaf0>
    e4dc:	843ffc04 	addi	r16,r16,-16
    e4e0:	d8c01c17 	ldw	r3,112(sp)
    e4e4:	d8801b17 	ldw	r2,108(sp)
    e4e8:	d811883a 	mov	r8,sp
    e4ec:	bc3fef16 	blt	r23,r16,e4ac <__alt_mem_Flash_flash_data+0xf400e4ac>
    e4f0:	da802217 	ldw	r10,136(sp)
    e4f4:	1c07883a 	add	r3,r3,r16
    e4f8:	10800044 	addi	r2,r2,1
    e4fc:	42800015 	stw	r10,0(r8)
    e500:	44000115 	stw	r16,4(r8)
    e504:	d8c01c15 	stw	r3,112(sp)
    e508:	d8801b15 	stw	r2,108(sp)
    e50c:	010001c4 	movi	r4,7
    e510:	2080ce16 	blt	r4,r2,e84c <___svfiprintf_internal_r+0xc68>
    e514:	42000204 	addi	r8,r8,8
    e518:	dac02617 	ldw	r11,152(sp)
    e51c:	1f07883a 	add	r3,r3,fp
    e520:	10800044 	addi	r2,r2,1
    e524:	42c00015 	stw	r11,0(r8)
    e528:	47000115 	stw	fp,4(r8)
    e52c:	d8c01c15 	stw	r3,112(sp)
    e530:	d8801b15 	stw	r2,108(sp)
    e534:	010001c4 	movi	r4,7
    e538:	2080a316 	blt	r4,r2,e7c8 <___svfiprintf_internal_r+0xbe4>
    e53c:	42000204 	addi	r8,r8,8
    e540:	8c40010c 	andi	r17,r17,4
    e544:	88002b26 	beq	r17,zero,e5f4 <___svfiprintf_internal_r+0xa10>
    e548:	da802117 	ldw	r10,132(sp)
    e54c:	dac02017 	ldw	r11,128(sp)
    e550:	52e1c83a 	sub	r16,r10,r11
    e554:	0400270e 	bge	zero,r16,e5f4 <___svfiprintf_internal_r+0xa10>
    e558:	04400404 	movi	r17,16
    e55c:	d8801b17 	ldw	r2,108(sp)
    e560:	8c01900e 	bge	r17,r16,eba4 <___svfiprintf_internal_r+0xfc0>
    e564:	014000b4 	movhi	r5,2
    e568:	29572404 	addi	r5,r5,23696
    e56c:	d9402815 	stw	r5,160(sp)
    e570:	070001c4 	movi	fp,7
    e574:	00000306 	br	e584 <___svfiprintf_internal_r+0x9a0>
    e578:	843ffc04 	addi	r16,r16,-16
    e57c:	42000204 	addi	r8,r8,8
    e580:	8c00130e 	bge	r17,r16,e5d0 <___svfiprintf_internal_r+0x9ec>
    e584:	028000b4 	movhi	r10,2
    e588:	18c00404 	addi	r3,r3,16
    e58c:	10800044 	addi	r2,r2,1
    e590:	52972404 	addi	r10,r10,23696
    e594:	42800015 	stw	r10,0(r8)
    e598:	44400115 	stw	r17,4(r8)
    e59c:	d8c01c15 	stw	r3,112(sp)
    e5a0:	d8801b15 	stw	r2,108(sp)
    e5a4:	e0bff40e 	bge	fp,r2,e578 <__alt_mem_Flash_flash_data+0xf400e578>
    e5a8:	9009883a 	mov	r4,r18
    e5ac:	a00b883a 	mov	r5,r20
    e5b0:	d9801a04 	addi	r6,sp,104
    e5b4:	000da180 	call	da18 <__ssprint_r>
    e5b8:	1000461e 	bne	r2,zero,e6d4 <___svfiprintf_internal_r+0xaf0>
    e5bc:	843ffc04 	addi	r16,r16,-16
    e5c0:	d8c01c17 	ldw	r3,112(sp)
    e5c4:	d8801b17 	ldw	r2,108(sp)
    e5c8:	d811883a 	mov	r8,sp
    e5cc:	8c3fed16 	blt	r17,r16,e584 <__alt_mem_Flash_flash_data+0xf400e584>
    e5d0:	dac02817 	ldw	r11,160(sp)
    e5d4:	1c07883a 	add	r3,r3,r16
    e5d8:	10800044 	addi	r2,r2,1
    e5dc:	42c00015 	stw	r11,0(r8)
    e5e0:	44000115 	stw	r16,4(r8)
    e5e4:	d8c01c15 	stw	r3,112(sp)
    e5e8:	d8801b15 	stw	r2,108(sp)
    e5ec:	010001c4 	movi	r4,7
    e5f0:	2080fd16 	blt	r4,r2,e9e8 <___svfiprintf_internal_r+0xe04>
    e5f4:	dd802017 	ldw	r22,128(sp)
    e5f8:	da802117 	ldw	r10,132(sp)
    e5fc:	b280010e 	bge	r22,r10,e604 <___svfiprintf_internal_r+0xa20>
    e600:	502d883a 	mov	r22,r10
    e604:	dac02417 	ldw	r11,144(sp)
    e608:	5d97883a 	add	r11,r11,r22
    e60c:	dac02415 	stw	r11,144(sp)
    e610:	1800751e 	bne	r3,zero,e7e8 <___svfiprintf_internal_r+0xc04>
    e614:	a8800007 	ldb	r2,0(r21)
    e618:	d8001b15 	stw	zero,108(sp)
    e61c:	d811883a 	mov	r8,sp
    e620:	103d961e 	bne	r2,zero,dc7c <__alt_mem_Flash_flash_data+0xf400dc7c>
    e624:	a82d883a 	mov	r22,r21
    e628:	003dad06 	br	dce0 <__alt_mem_Flash_flash_data+0xf400dce0>
    e62c:	10803fcc 	andi	r2,r2,255
    e630:	00c00044 	movi	r3,1
    e634:	10fe2f1e 	bne	r2,r3,def4 <__alt_mem_Flash_flash_data+0xf400def4>
    e638:	5000e026 	beq	r10,zero,e9bc <___svfiprintf_internal_r+0xdd8>
    e63c:	dc002015 	stw	r16,128(sp)
    e640:	dc402215 	stw	r17,136(sp)
    e644:	dd801a04 	addi	r22,sp,104
    e648:	402f883a 	mov	r23,r8
    e64c:	5839883a 	mov	fp,r11
    e650:	4821883a 	mov	r16,r9
    e654:	5023883a 	mov	r17,r10
    e658:	8009883a 	mov	r4,r16
    e65c:	880b883a 	mov	r5,r17
    e660:	01800284 	movi	r6,10
    e664:	000f883a 	mov	r7,zero
    e668:	0010f980 	call	10f98 <__umoddi3>
    e66c:	10800c04 	addi	r2,r2,48
    e670:	b5bfffc4 	addi	r22,r22,-1
    e674:	8009883a 	mov	r4,r16
    e678:	880b883a 	mov	r5,r17
    e67c:	01800284 	movi	r6,10
    e680:	000f883a 	mov	r7,zero
    e684:	b0800005 	stb	r2,0(r22)
    e688:	00109d80 	call	109d8 <__udivdi3>
    e68c:	1021883a 	mov	r16,r2
    e690:	10c4b03a 	or	r2,r2,r3
    e694:	1823883a 	mov	r17,r3
    e698:	103fef1e 	bne	r2,zero,e658 <__alt_mem_Flash_flash_data+0xf400e658>
    e69c:	da801e17 	ldw	r10,120(sp)
    e6a0:	e017883a 	mov	r11,fp
    e6a4:	dc002017 	ldw	r16,128(sp)
    e6a8:	dc402217 	ldw	r17,136(sp)
    e6ac:	b811883a 	mov	r8,r23
    e6b0:	dd802615 	stw	r22,152(sp)
    e6b4:	55b9c83a 	sub	fp,r10,r22
    e6b8:	003e2006 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e6bc:	d8801c17 	ldw	r2,112(sp)
    e6c0:	10000426 	beq	r2,zero,e6d4 <___svfiprintf_internal_r+0xaf0>
    e6c4:	d9002917 	ldw	r4,164(sp)
    e6c8:	d9402717 	ldw	r5,156(sp)
    e6cc:	d9801a04 	addi	r6,sp,104
    e6d0:	000da180 	call	da18 <__ssprint_r>
    e6d4:	da802717 	ldw	r10,156(sp)
    e6d8:	5080030b 	ldhu	r2,12(r10)
    e6dc:	1080100c 	andi	r2,r2,64
    e6e0:	1000511e 	bne	r2,zero,e828 <___svfiprintf_internal_r+0xc44>
    e6e4:	d8802417 	ldw	r2,144(sp)
    e6e8:	dfc03617 	ldw	ra,216(sp)
    e6ec:	df003517 	ldw	fp,212(sp)
    e6f0:	ddc03417 	ldw	r23,208(sp)
    e6f4:	dd803317 	ldw	r22,204(sp)
    e6f8:	dd403217 	ldw	r21,200(sp)
    e6fc:	dd003117 	ldw	r20,196(sp)
    e700:	dcc03017 	ldw	r19,192(sp)
    e704:	dc802f17 	ldw	r18,188(sp)
    e708:	dc402e17 	ldw	r17,184(sp)
    e70c:	dc002d17 	ldw	r16,180(sp)
    e710:	dec03704 	addi	sp,sp,220
    e714:	f800283a 	ret
    e718:	da802117 	ldw	r10,132(sp)
    e71c:	dac02017 	ldw	r11,128(sp)
    e720:	52edc83a 	sub	r22,r10,r11
    e724:	05bf540e 	bge	zero,r22,e478 <__alt_mem_Flash_flash_data+0xf400e478>
    e728:	02400404 	movi	r9,16
    e72c:	4d81210e 	bge	r9,r22,ebb4 <___svfiprintf_internal_r+0xfd0>
    e730:	014000b4 	movhi	r5,2
    e734:	29572004 	addi	r5,r5,23680
    e738:	d9402215 	stw	r5,136(sp)
    e73c:	05c001c4 	movi	r23,7
    e740:	00000306 	br	e750 <___svfiprintf_internal_r+0xb6c>
    e744:	b5bffc04 	addi	r22,r22,-16
    e748:	42000204 	addi	r8,r8,8
    e74c:	4d80130e 	bge	r9,r22,e79c <___svfiprintf_internal_r+0xbb8>
    e750:	18c00404 	addi	r3,r3,16
    e754:	10800044 	addi	r2,r2,1
    e758:	44c00015 	stw	r19,0(r8)
    e75c:	42400115 	stw	r9,4(r8)
    e760:	d8c01c15 	stw	r3,112(sp)
    e764:	d8801b15 	stw	r2,108(sp)
    e768:	b8bff60e 	bge	r23,r2,e744 <__alt_mem_Flash_flash_data+0xf400e744>
    e76c:	9009883a 	mov	r4,r18
    e770:	a00b883a 	mov	r5,r20
    e774:	d9801a04 	addi	r6,sp,104
    e778:	da402c15 	stw	r9,176(sp)
    e77c:	000da180 	call	da18 <__ssprint_r>
    e780:	da402c17 	ldw	r9,176(sp)
    e784:	103fd31e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e788:	b5bffc04 	addi	r22,r22,-16
    e78c:	d8c01c17 	ldw	r3,112(sp)
    e790:	d8801b17 	ldw	r2,108(sp)
    e794:	d811883a 	mov	r8,sp
    e798:	4dbfed16 	blt	r9,r22,e750 <__alt_mem_Flash_flash_data+0xf400e750>
    e79c:	da802217 	ldw	r10,136(sp)
    e7a0:	1d87883a 	add	r3,r3,r22
    e7a4:	10800044 	addi	r2,r2,1
    e7a8:	42800015 	stw	r10,0(r8)
    e7ac:	45800115 	stw	r22,4(r8)
    e7b0:	d8c01c15 	stw	r3,112(sp)
    e7b4:	d8801b15 	stw	r2,108(sp)
    e7b8:	010001c4 	movi	r4,7
    e7bc:	2080c616 	blt	r4,r2,ead8 <___svfiprintf_internal_r+0xef4>
    e7c0:	42000204 	addi	r8,r8,8
    e7c4:	003f2c06 	br	e478 <__alt_mem_Flash_flash_data+0xf400e478>
    e7c8:	9009883a 	mov	r4,r18
    e7cc:	a00b883a 	mov	r5,r20
    e7d0:	d9801a04 	addi	r6,sp,104
    e7d4:	000da180 	call	da18 <__ssprint_r>
    e7d8:	103fbe1e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e7dc:	d8c01c17 	ldw	r3,112(sp)
    e7e0:	d811883a 	mov	r8,sp
    e7e4:	003f5606 	br	e540 <__alt_mem_Flash_flash_data+0xf400e540>
    e7e8:	9009883a 	mov	r4,r18
    e7ec:	a00b883a 	mov	r5,r20
    e7f0:	d9801a04 	addi	r6,sp,104
    e7f4:	000da180 	call	da18 <__ssprint_r>
    e7f8:	103f8626 	beq	r2,zero,e614 <__alt_mem_Flash_flash_data+0xf400e614>
    e7fc:	003fb506 	br	e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e800:	10803fcc 	andi	r2,r2,255
    e804:	10003b1e 	bne	r2,zero,e8f4 <___svfiprintf_internal_r+0xd10>
    e808:	8880004c 	andi	r2,r17,1
    e80c:	10007d26 	beq	r2,zero,ea04 <___svfiprintf_internal_r+0xe20>
    e810:	00800c04 	movi	r2,48
    e814:	d8c019c4 	addi	r3,sp,103
    e818:	d88019c5 	stb	r2,103(sp)
    e81c:	df002b17 	ldw	fp,172(sp)
    e820:	d8c02615 	stw	r3,152(sp)
    e824:	003dc506 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e828:	00bfffc4 	movi	r2,-1
    e82c:	003fae06 	br	e6e8 <__alt_mem_Flash_flash_data+0xf400e6e8>
    e830:	9009883a 	mov	r4,r18
    e834:	a00b883a 	mov	r5,r20
    e838:	d9801a04 	addi	r6,sp,104
    e83c:	000da180 	call	da18 <__ssprint_r>
    e840:	103fa41e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e844:	d811883a 	mov	r8,sp
    e848:	003d2206 	br	dcd4 <__alt_mem_Flash_flash_data+0xf400dcd4>
    e84c:	9009883a 	mov	r4,r18
    e850:	a00b883a 	mov	r5,r20
    e854:	d9801a04 	addi	r6,sp,104
    e858:	000da180 	call	da18 <__ssprint_r>
    e85c:	103f9d1e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e860:	d8c01c17 	ldw	r3,112(sp)
    e864:	d8801b17 	ldw	r2,108(sp)
    e868:	d811883a 	mov	r8,sp
    e86c:	003f2a06 	br	e518 <__alt_mem_Flash_flash_data+0xf400e518>
    e870:	d9402a17 	ldw	r5,168(sp)
    e874:	d8c01a04 	addi	r3,sp,104
    e878:	488003cc 	andi	r2,r9,15
    e87c:	5008973a 	slli	r4,r10,28
    e880:	2885883a 	add	r2,r5,r2
    e884:	4812d13a 	srli	r9,r9,4
    e888:	10800003 	ldbu	r2,0(r2)
    e88c:	5014d13a 	srli	r10,r10,4
    e890:	18ffffc4 	addi	r3,r3,-1
    e894:	2252b03a 	or	r9,r4,r9
    e898:	18800005 	stb	r2,0(r3)
    e89c:	4a84b03a 	or	r2,r9,r10
    e8a0:	103ff51e 	bne	r2,zero,e878 <__alt_mem_Flash_flash_data+0xf400e878>
    e8a4:	d8c02615 	stw	r3,152(sp)
    e8a8:	003da206 	br	df34 <__alt_mem_Flash_flash_data+0xf400df34>
    e8ac:	9009883a 	mov	r4,r18
    e8b0:	a00b883a 	mov	r5,r20
    e8b4:	d9801a04 	addi	r6,sp,104
    e8b8:	000da180 	call	da18 <__ssprint_r>
    e8bc:	103f851e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e8c0:	d8c01c17 	ldw	r3,112(sp)
    e8c4:	d8801b17 	ldw	r2,108(sp)
    e8c8:	d811883a 	mov	r8,sp
    e8cc:	003eda06 	br	e438 <__alt_mem_Flash_flash_data+0xf400e438>
    e8d0:	9009883a 	mov	r4,r18
    e8d4:	a00b883a 	mov	r5,r20
    e8d8:	d9801a04 	addi	r6,sp,104
    e8dc:	000da180 	call	da18 <__ssprint_r>
    e8e0:	103f7c1e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e8e4:	d8c01c17 	ldw	r3,112(sp)
    e8e8:	d8801b17 	ldw	r2,108(sp)
    e8ec:	d811883a 	mov	r8,sp
    e8f0:	003ede06 	br	e46c <__alt_mem_Flash_flash_data+0xf400e46c>
    e8f4:	da801a04 	addi	r10,sp,104
    e8f8:	da802615 	stw	r10,152(sp)
    e8fc:	003d8f06 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e900:	8880040c 	andi	r2,r17,16
    e904:	10004c1e 	bne	r2,zero,ea38 <___svfiprintf_internal_r+0xe54>
    e908:	8880100c 	andi	r2,r17,64
    e90c:	da802317 	ldw	r10,140(sp)
    e910:	10004a26 	beq	r2,zero,ea3c <___svfiprintf_internal_r+0xe58>
    e914:	5240000b 	ldhu	r9,0(r10)
    e918:	dac02317 	ldw	r11,140(sp)
    e91c:	0015883a 	mov	r10,zero
    e920:	00800044 	movi	r2,1
    e924:	5ac00104 	addi	r11,r11,4
    e928:	dac02315 	stw	r11,140(sp)
    e92c:	4807883a 	mov	r3,r9
    e930:	003d6506 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e934:	9009883a 	mov	r4,r18
    e938:	a00b883a 	mov	r5,r20
    e93c:	d9801a04 	addi	r6,sp,104
    e940:	000da180 	call	da18 <__ssprint_r>
    e944:	103f631e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e948:	d8c01c17 	ldw	r3,112(sp)
    e94c:	d8801b17 	ldw	r2,108(sp)
    e950:	d811883a 	mov	r8,sp
    e954:	003eab06 	br	e404 <__alt_mem_Flash_flash_data+0xf400e404>
    e958:	8880040c 	andi	r2,r17,16
    e95c:	1000331e 	bne	r2,zero,ea2c <___svfiprintf_internal_r+0xe48>
    e960:	8880100c 	andi	r2,r17,64
    e964:	da802317 	ldw	r10,140(sp)
    e968:	10003126 	beq	r2,zero,ea30 <___svfiprintf_internal_r+0xe4c>
    e96c:	5240000b 	ldhu	r9,0(r10)
    e970:	dac02317 	ldw	r11,140(sp)
    e974:	0015883a 	mov	r10,zero
    e978:	0005883a 	mov	r2,zero
    e97c:	5ac00104 	addi	r11,r11,4
    e980:	dac02315 	stw	r11,140(sp)
    e984:	4807883a 	mov	r3,r9
    e988:	003d4f06 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e98c:	10803fcc 	andi	r2,r2,255
    e990:	1080201c 	xori	r2,r2,128
    e994:	10bfe004 	addi	r2,r2,-128
    e998:	01000c04 	movi	r4,48
    e99c:	11005b26 	beq	r2,r4,eb0c <___svfiprintf_internal_r+0xf28>
    e9a0:	da802617 	ldw	r10,152(sp)
    e9a4:	d8801e17 	ldw	r2,120(sp)
    e9a8:	193fffc5 	stb	r4,-1(r3)
    e9ac:	52bfffc4 	addi	r10,r10,-1
    e9b0:	da802615 	stw	r10,152(sp)
    e9b4:	12b9c83a 	sub	fp,r2,r10
    e9b8:	003d6006 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e9bc:	00800244 	movi	r2,9
    e9c0:	127f1e36 	bltu	r2,r9,e63c <__alt_mem_Flash_flash_data+0xf400e63c>
    e9c4:	4a400c04 	addi	r9,r9,48
    e9c8:	d8c019c4 	addi	r3,sp,103
    e9cc:	da4019c5 	stb	r9,103(sp)
    e9d0:	df002b17 	ldw	fp,172(sp)
    e9d4:	d8c02615 	stw	r3,152(sp)
    e9d8:	003d5806 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    e9dc:	d8802315 	stw	r2,140(sp)
    e9e0:	a9000007 	ldb	r4,0(r21)
    e9e4:	003ccb06 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e9e8:	9009883a 	mov	r4,r18
    e9ec:	a00b883a 	mov	r5,r20
    e9f0:	d9801a04 	addi	r6,sp,104
    e9f4:	000da180 	call	da18 <__ssprint_r>
    e9f8:	103f361e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    e9fc:	d8c01c17 	ldw	r3,112(sp)
    ea00:	003efc06 	br	e5f4 <__alt_mem_Flash_flash_data+0xf400e5f4>
    ea04:	d8c01a04 	addi	r3,sp,104
    ea08:	d8c02615 	stw	r3,152(sp)
    ea0c:	003d4b06 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    ea10:	da802317 	ldw	r10,140(sp)
    ea14:	1a400017 	ldw	r9,0(r3)
    ea18:	52800104 	addi	r10,r10,4
    ea1c:	da802315 	stw	r10,140(sp)
    ea20:	4815d7fa 	srai	r10,r9,31
    ea24:	5005883a 	mov	r2,r10
    ea28:	003d9c06 	br	e09c <__alt_mem_Flash_flash_data+0xf400e09c>
    ea2c:	da802317 	ldw	r10,140(sp)
    ea30:	52400017 	ldw	r9,0(r10)
    ea34:	003fce06 	br	e970 <__alt_mem_Flash_flash_data+0xf400e970>
    ea38:	da802317 	ldw	r10,140(sp)
    ea3c:	52400017 	ldw	r9,0(r10)
    ea40:	003fb506 	br	e918 <__alt_mem_Flash_flash_data+0xf400e918>
    ea44:	8880100c 	andi	r2,r17,64
    ea48:	da802317 	ldw	r10,140(sp)
    ea4c:	103e1926 	beq	r2,zero,e2b4 <__alt_mem_Flash_flash_data+0xf400e2b4>
    ea50:	dac02317 	ldw	r11,140(sp)
    ea54:	5240000b 	ldhu	r9,0(r10)
    ea58:	0015883a 	mov	r10,zero
    ea5c:	5ac00104 	addi	r11,r11,4
    ea60:	dac02315 	stw	r11,140(sp)
    ea64:	003de406 	br	e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    ea68:	a9000007 	ldb	r4,0(r21)
    ea6c:	003ca906 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    ea70:	dac02317 	ldw	r11,140(sp)
    ea74:	da802417 	ldw	r10,144(sp)
    ea78:	58800017 	ldw	r2,0(r11)
    ea7c:	5007d7fa 	srai	r3,r10,31
    ea80:	5ac00104 	addi	r11,r11,4
    ea84:	dac02315 	stw	r11,140(sp)
    ea88:	12800015 	stw	r10,0(r2)
    ea8c:	10c00115 	stw	r3,4(r2)
    ea90:	003c7806 	br	dc74 <__alt_mem_Flash_flash_data+0xf400dc74>
    ea94:	00800c04 	movi	r2,48
    ea98:	d8801d05 	stb	r2,116(sp)
    ea9c:	d9001d45 	stb	r4,117(sp)
    eaa0:	8c400094 	ori	r17,r17,2
    eaa4:	00800084 	movi	r2,2
    eaa8:	003d0706 	br	dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    eaac:	ad400044 	addi	r21,r21,1
    eab0:	8c400814 	ori	r17,r17,32
    eab4:	11000047 	ldb	r4,1(r2)
    eab8:	003c9606 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    eabc:	dac02317 	ldw	r11,140(sp)
    eac0:	da802417 	ldw	r10,144(sp)
    eac4:	58800017 	ldw	r2,0(r11)
    eac8:	5ac00104 	addi	r11,r11,4
    eacc:	dac02315 	stw	r11,140(sp)
    ead0:	12800015 	stw	r10,0(r2)
    ead4:	003c6706 	br	dc74 <__alt_mem_Flash_flash_data+0xf400dc74>
    ead8:	9009883a 	mov	r4,r18
    eadc:	a00b883a 	mov	r5,r20
    eae0:	d9801a04 	addi	r6,sp,104
    eae4:	000da180 	call	da18 <__ssprint_r>
    eae8:	103efa1e 	bne	r2,zero,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    eaec:	d8c01c17 	ldw	r3,112(sp)
    eaf0:	d8801b17 	ldw	r2,108(sp)
    eaf4:	d811883a 	mov	r8,sp
    eaf8:	003e5f06 	br	e478 <__alt_mem_Flash_flash_data+0xf400e478>
    eafc:	02c000b4 	movhi	r11,2
    eb00:	5ad72004 	addi	r11,r11,23680
    eb04:	dac02215 	stw	r11,136(sp)
    eb08:	003e7906 	br	e4f0 <__alt_mem_Flash_flash_data+0xf400e4f0>
    eb0c:	da801e17 	ldw	r10,120(sp)
    eb10:	d8c02617 	ldw	r3,152(sp)
    eb14:	50f9c83a 	sub	fp,r10,r3
    eb18:	003d0806 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    eb1c:	da002c15 	stw	r8,176(sp)
    eb20:	00047dc0 	call	47dc <strlen>
    eb24:	1039883a 	mov	fp,r2
    eb28:	dac01d83 	ldbu	r11,118(sp)
    eb2c:	ddc02315 	stw	r23,140(sp)
    eb30:	0021883a 	mov	r16,zero
    eb34:	da002c17 	ldw	r8,176(sp)
    eb38:	003d0006 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    eb3c:	00800184 	movi	r2,6
    eb40:	1400012e 	bgeu	r2,r16,eb48 <___svfiprintf_internal_r+0xf64>
    eb44:	1021883a 	mov	r16,r2
    eb48:	8039883a 	mov	fp,r16
    eb4c:	802d883a 	mov	r22,r16
    eb50:	80002116 	blt	r16,zero,ebd8 <___svfiprintf_internal_r+0xff4>
    eb54:	008000b4 	movhi	r2,2
    eb58:	1096bc04 	addi	r2,r2,23280
    eb5c:	dd802015 	stw	r22,128(sp)
    eb60:	ddc02315 	stw	r23,140(sp)
    eb64:	d8802615 	stw	r2,152(sp)
    eb68:	003d5d06 	br	e0e0 <__alt_mem_Flash_flash_data+0xf400e0e0>
    eb6c:	04001004 	movi	r16,64
    eb70:	800b883a 	mov	r5,r16
    eb74:	000b5d80 	call	b5d8 <_malloc_r>
    eb78:	da802717 	ldw	r10,156(sp)
    eb7c:	50800015 	stw	r2,0(r10)
    eb80:	50800415 	stw	r2,16(r10)
    eb84:	10002026 	beq	r2,zero,ec08 <___svfiprintf_internal_r+0x1024>
    eb88:	da802717 	ldw	r10,156(sp)
    eb8c:	54000515 	stw	r16,20(r10)
    eb90:	003c2806 	br	dc34 <__alt_mem_Flash_flash_data+0xf400dc34>
    eb94:	010000b4 	movhi	r4,2
    eb98:	21172404 	addi	r4,r4,23696
    eb9c:	d9002815 	stw	r4,160(sp)
    eba0:	003d7e06 	br	e19c <__alt_mem_Flash_flash_data+0xf400e19c>
    eba4:	010000b4 	movhi	r4,2
    eba8:	21172404 	addi	r4,r4,23696
    ebac:	d9002815 	stw	r4,160(sp)
    ebb0:	003e8706 	br	e5d0 <__alt_mem_Flash_flash_data+0xf400e5d0>
    ebb4:	010000b4 	movhi	r4,2
    ebb8:	21172004 	addi	r4,r4,23680
    ebbc:	d9002215 	stw	r4,136(sp)
    ebc0:	003ef606 	br	e79c <__alt_mem_Flash_flash_data+0xf400e79c>
    ebc4:	8039883a 	mov	fp,r16
    ebc8:	dac01d83 	ldbu	r11,118(sp)
    ebcc:	ddc02315 	stw	r23,140(sp)
    ebd0:	0021883a 	mov	r16,zero
    ebd4:	003cd906 	br	df3c <__alt_mem_Flash_flash_data+0xf400df3c>
    ebd8:	002d883a 	mov	r22,zero
    ebdc:	003fdd06 	br	eb54 <__alt_mem_Flash_flash_data+0xf400eb54>
    ebe0:	dac02317 	ldw	r11,140(sp)
    ebe4:	a805883a 	mov	r2,r21
    ebe8:	502b883a 	mov	r21,r10
    ebec:	5c000017 	ldw	r16,0(r11)
    ebf0:	59000104 	addi	r4,r11,4
    ebf4:	d9002315 	stw	r4,140(sp)
    ebf8:	803fae0e 	bge	r16,zero,eab4 <__alt_mem_Flash_flash_data+0xf400eab4>
    ebfc:	043fffc4 	movi	r16,-1
    ec00:	11000047 	ldb	r4,1(r2)
    ec04:	003c4306 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    ec08:	dac02917 	ldw	r11,164(sp)
    ec0c:	00800304 	movi	r2,12
    ec10:	58800015 	stw	r2,0(r11)
    ec14:	00bfffc4 	movi	r2,-1
    ec18:	003eb306 	br	e6e8 <__alt_mem_Flash_flash_data+0xf400e6e8>

0000ec1c <__sprint_r.part.0>:
    ec1c:	28801917 	ldw	r2,100(r5)
    ec20:	defff604 	addi	sp,sp,-40
    ec24:	dd400515 	stw	r21,20(sp)
    ec28:	dcc00315 	stw	r19,12(sp)
    ec2c:	dfc00915 	stw	ra,36(sp)
    ec30:	df000815 	stw	fp,32(sp)
    ec34:	ddc00715 	stw	r23,28(sp)
    ec38:	dd800615 	stw	r22,24(sp)
    ec3c:	dd000415 	stw	r20,16(sp)
    ec40:	dc800215 	stw	r18,8(sp)
    ec44:	dc400115 	stw	r17,4(sp)
    ec48:	dc000015 	stw	r16,0(sp)
    ec4c:	1088000c 	andi	r2,r2,8192
    ec50:	2827883a 	mov	r19,r5
    ec54:	302b883a 	mov	r21,r6
    ec58:	10002d26 	beq	r2,zero,ed10 <__sprint_r.part.0+0xf4>
    ec5c:	30800217 	ldw	r2,8(r6)
    ec60:	35800017 	ldw	r22,0(r6)
    ec64:	10002826 	beq	r2,zero,ed08 <__sprint_r.part.0+0xec>
    ec68:	2029883a 	mov	r20,r4
    ec6c:	b5c00104 	addi	r23,r22,4
    ec70:	04bfffc4 	movi	r18,-1
    ec74:	bc400017 	ldw	r17,0(r23)
    ec78:	b4000017 	ldw	r16,0(r22)
    ec7c:	0039883a 	mov	fp,zero
    ec80:	8822d0ba 	srli	r17,r17,2
    ec84:	04400316 	blt	zero,r17,ec94 <__sprint_r.part.0+0x78>
    ec88:	00001806 	br	ecec <__sprint_r.part.0+0xd0>
    ec8c:	84000104 	addi	r16,r16,4
    ec90:	8f001526 	beq	r17,fp,ece8 <__sprint_r.part.0+0xcc>
    ec94:	81400017 	ldw	r5,0(r16)
    ec98:	a009883a 	mov	r4,r20
    ec9c:	980d883a 	mov	r6,r19
    eca0:	00104ac0 	call	104ac <_fputwc_r>
    eca4:	e7000044 	addi	fp,fp,1
    eca8:	14bff81e 	bne	r2,r18,ec8c <__alt_mem_Flash_flash_data+0xf400ec8c>
    ecac:	9005883a 	mov	r2,r18
    ecb0:	a8000215 	stw	zero,8(r21)
    ecb4:	a8000115 	stw	zero,4(r21)
    ecb8:	dfc00917 	ldw	ra,36(sp)
    ecbc:	df000817 	ldw	fp,32(sp)
    ecc0:	ddc00717 	ldw	r23,28(sp)
    ecc4:	dd800617 	ldw	r22,24(sp)
    ecc8:	dd400517 	ldw	r21,20(sp)
    eccc:	dd000417 	ldw	r20,16(sp)
    ecd0:	dcc00317 	ldw	r19,12(sp)
    ecd4:	dc800217 	ldw	r18,8(sp)
    ecd8:	dc400117 	ldw	r17,4(sp)
    ecdc:	dc000017 	ldw	r16,0(sp)
    ece0:	dec00a04 	addi	sp,sp,40
    ece4:	f800283a 	ret
    ece8:	a8800217 	ldw	r2,8(r21)
    ecec:	8c63883a 	add	r17,r17,r17
    ecf0:	8c63883a 	add	r17,r17,r17
    ecf4:	1445c83a 	sub	r2,r2,r17
    ecf8:	a8800215 	stw	r2,8(r21)
    ecfc:	b5800204 	addi	r22,r22,8
    ed00:	bdc00204 	addi	r23,r23,8
    ed04:	103fdb1e 	bne	r2,zero,ec74 <__alt_mem_Flash_flash_data+0xf400ec74>
    ed08:	0005883a 	mov	r2,zero
    ed0c:	003fe806 	br	ecb0 <__alt_mem_Flash_flash_data+0xf400ecb0>
    ed10:	000acf80 	call	acf8 <__sfvwrite_r>
    ed14:	003fe606 	br	ecb0 <__alt_mem_Flash_flash_data+0xf400ecb0>

0000ed18 <__sprint_r>:
    ed18:	30c00217 	ldw	r3,8(r6)
    ed1c:	18000126 	beq	r3,zero,ed24 <__sprint_r+0xc>
    ed20:	000ec1c1 	jmpi	ec1c <__sprint_r.part.0>
    ed24:	30000115 	stw	zero,4(r6)
    ed28:	0005883a 	mov	r2,zero
    ed2c:	f800283a 	ret

0000ed30 <___vfiprintf_internal_r>:
    ed30:	deffca04 	addi	sp,sp,-216
    ed34:	dd803215 	stw	r22,200(sp)
    ed38:	dd403115 	stw	r21,196(sp)
    ed3c:	dfc03515 	stw	ra,212(sp)
    ed40:	df003415 	stw	fp,208(sp)
    ed44:	ddc03315 	stw	r23,204(sp)
    ed48:	dd003015 	stw	r20,192(sp)
    ed4c:	dcc02f15 	stw	r19,188(sp)
    ed50:	dc802e15 	stw	r18,184(sp)
    ed54:	dc402d15 	stw	r17,180(sp)
    ed58:	dc002c15 	stw	r16,176(sp)
    ed5c:	d9002015 	stw	r4,128(sp)
    ed60:	d9c02215 	stw	r7,136(sp)
    ed64:	282b883a 	mov	r21,r5
    ed68:	302d883a 	mov	r22,r6
    ed6c:	20000226 	beq	r4,zero,ed78 <___vfiprintf_internal_r+0x48>
    ed70:	20800e17 	ldw	r2,56(r4)
    ed74:	1001b126 	beq	r2,zero,f43c <___vfiprintf_internal_r+0x70c>
    ed78:	a880030b 	ldhu	r2,12(r21)
    ed7c:	10c8000c 	andi	r3,r2,8192
    ed80:	1800061e 	bne	r3,zero,ed9c <___vfiprintf_internal_r+0x6c>
    ed84:	a9001917 	ldw	r4,100(r21)
    ed88:	00f7ffc4 	movi	r3,-8193
    ed8c:	10880014 	ori	r2,r2,8192
    ed90:	20c6703a 	and	r3,r4,r3
    ed94:	a880030d 	sth	r2,12(r21)
    ed98:	a8c01915 	stw	r3,100(r21)
    ed9c:	10c0020c 	andi	r3,r2,8
    eda0:	18018926 	beq	r3,zero,f3c8 <___vfiprintf_internal_r+0x698>
    eda4:	a8c00417 	ldw	r3,16(r21)
    eda8:	18018726 	beq	r3,zero,f3c8 <___vfiprintf_internal_r+0x698>
    edac:	1080068c 	andi	r2,r2,26
    edb0:	00c00284 	movi	r3,10
    edb4:	10c18c26 	beq	r2,r3,f3e8 <___vfiprintf_internal_r+0x6b8>
    edb8:	d8801a04 	addi	r2,sp,104
    edbc:	d8c019c4 	addi	r3,sp,103
    edc0:	070000b4 	movhi	fp,2
    edc4:	05c000b4 	movhi	r23,2
    edc8:	10c9c83a 	sub	r4,r2,r3
    edcc:	e7172c04 	addi	fp,fp,23728
    edd0:	bdd72804 	addi	r23,r23,23712
    edd4:	d8801e15 	stw	r2,120(sp)
    edd8:	d8c01f15 	stw	r3,124(sp)
    eddc:	dec01a15 	stw	sp,104(sp)
    ede0:	d8001c15 	stw	zero,112(sp)
    ede4:	d8001b15 	stw	zero,108(sp)
    ede8:	d8002615 	stw	zero,152(sp)
    edec:	d8002315 	stw	zero,140(sp)
    edf0:	d9002715 	stw	r4,156(sp)
    edf4:	d811883a 	mov	r8,sp
    edf8:	dd402115 	stw	r21,132(sp)
    edfc:	b021883a 	mov	r16,r22
    ee00:	80800007 	ldb	r2,0(r16)
    ee04:	10037226 	beq	r2,zero,fbd0 <___vfiprintf_internal_r+0xea0>
    ee08:	01000944 	movi	r4,37
    ee0c:	11037026 	beq	r2,r4,fbd0 <___vfiprintf_internal_r+0xea0>
    ee10:	8005883a 	mov	r2,r16
    ee14:	00000106 	br	ee1c <___vfiprintf_internal_r+0xec>
    ee18:	19000326 	beq	r3,r4,ee28 <___vfiprintf_internal_r+0xf8>
    ee1c:	10800044 	addi	r2,r2,1
    ee20:	10c00007 	ldb	r3,0(r2)
    ee24:	183ffc1e 	bne	r3,zero,ee18 <__alt_mem_Flash_flash_data+0xf400ee18>
    ee28:	1425c83a 	sub	r18,r2,r16
    ee2c:	1023883a 	mov	r17,r2
    ee30:	90001026 	beq	r18,zero,ee74 <___vfiprintf_internal_r+0x144>
    ee34:	d8c01c17 	ldw	r3,112(sp)
    ee38:	d8801b17 	ldw	r2,108(sp)
    ee3c:	44000015 	stw	r16,0(r8)
    ee40:	90c7883a 	add	r3,r18,r3
    ee44:	10800044 	addi	r2,r2,1
    ee48:	44800115 	stw	r18,4(r8)
    ee4c:	d8c01c15 	stw	r3,112(sp)
    ee50:	d8801b15 	stw	r2,108(sp)
    ee54:	010001c4 	movi	r4,7
    ee58:	2080750e 	bge	r4,r2,f030 <___vfiprintf_internal_r+0x300>
    ee5c:	18036f1e 	bne	r3,zero,fc1c <___vfiprintf_internal_r+0xeec>
    ee60:	d8802317 	ldw	r2,140(sp)
    ee64:	d8001b15 	stw	zero,108(sp)
    ee68:	d811883a 	mov	r8,sp
    ee6c:	1485883a 	add	r2,r2,r18
    ee70:	d8802315 	stw	r2,140(sp)
    ee74:	88800007 	ldb	r2,0(r17)
    ee78:	10041026 	beq	r2,zero,febc <___vfiprintf_internal_r+0x118c>
    ee7c:	88c00047 	ldb	r3,1(r17)
    ee80:	88800044 	addi	r2,r17,1
    ee84:	d8001d85 	stb	zero,118(sp)
    ee88:	000f883a 	mov	r7,zero
    ee8c:	027fffc4 	movi	r9,-1
    ee90:	0025883a 	mov	r18,zero
    ee94:	002b883a 	mov	r21,zero
    ee98:	01401604 	movi	r5,88
    ee9c:	01800244 	movi	r6,9
    eea0:	03400a84 	movi	r13,42
    eea4:	03001b04 	movi	r12,108
    eea8:	14000044 	addi	r16,r2,1
    eeac:	18bff804 	addi	r2,r3,-32
    eeb0:	28825536 	bltu	r5,r2,f808 <___vfiprintf_internal_r+0xad8>
    eeb4:	100490ba 	slli	r2,r2,2
    eeb8:	01000074 	movhi	r4,1
    eebc:	213bb304 	addi	r4,r4,-4404
    eec0:	1105883a 	add	r2,r2,r4
    eec4:	10800017 	ldw	r2,0(r2)
    eec8:	1000683a 	jmp	r2
    eecc:	0000f5cc 	andi	zero,zero,983
    eed0:	0000f808 	cmpgei	zero,zero,992
    eed4:	0000f808 	cmpgei	zero,zero,992
    eed8:	0000f5ec 	andhi	zero,zero,983
    eedc:	0000f808 	cmpgei	zero,zero,992
    eee0:	0000f808 	cmpgei	zero,zero,992
    eee4:	0000f808 	cmpgei	zero,zero,992
    eee8:	0000f808 	cmpgei	zero,zero,992
    eeec:	0000f808 	cmpgei	zero,zero,992
    eef0:	0000f808 	cmpgei	zero,zero,992
    eef4:	0000f5fc 	xorhi	zero,zero,983
    eef8:	0000f61c 	xori	zero,zero,984
    eefc:	0000f808 	cmpgei	zero,zero,992
    ef00:	0000f444 	movi	zero,977
    ef04:	0000f530 	cmpltui	zero,zero,980
    ef08:	0000f808 	cmpgei	zero,zero,992
    ef0c:	0000f4b0 	cmpltui	zero,zero,978
    ef10:	0000f4c0 	call	f4c <collision+0x134>
    ef14:	0000f4c0 	call	f4c <collision+0x134>
    ef18:	0000f4c0 	call	f4c <collision+0x134>
    ef1c:	0000f4c0 	call	f4c <collision+0x134>
    ef20:	0000f4c0 	call	f4c <collision+0x134>
    ef24:	0000f4c0 	call	f4c <collision+0x134>
    ef28:	0000f4c0 	call	f4c <collision+0x134>
    ef2c:	0000f4c0 	call	f4c <collision+0x134>
    ef30:	0000f4c0 	call	f4c <collision+0x134>
    ef34:	0000f808 	cmpgei	zero,zero,992
    ef38:	0000f808 	cmpgei	zero,zero,992
    ef3c:	0000f808 	cmpgei	zero,zero,992
    ef40:	0000f808 	cmpgei	zero,zero,992
    ef44:	0000f808 	cmpgei	zero,zero,992
    ef48:	0000f808 	cmpgei	zero,zero,992
    ef4c:	0000f808 	cmpgei	zero,zero,992
    ef50:	0000f808 	cmpgei	zero,zero,992
    ef54:	0000f808 	cmpgei	zero,zero,992
    ef58:	0000f808 	cmpgei	zero,zero,992
    ef5c:	0000f4ec 	andhi	zero,zero,979
    ef60:	0000f808 	cmpgei	zero,zero,992
    ef64:	0000f808 	cmpgei	zero,zero,992
    ef68:	0000f808 	cmpgei	zero,zero,992
    ef6c:	0000f808 	cmpgei	zero,zero,992
    ef70:	0000f808 	cmpgei	zero,zero,992
    ef74:	0000f808 	cmpgei	zero,zero,992
    ef78:	0000f808 	cmpgei	zero,zero,992
    ef7c:	0000f808 	cmpgei	zero,zero,992
    ef80:	0000f808 	cmpgei	zero,zero,992
    ef84:	0000f808 	cmpgei	zero,zero,992
    ef88:	0000f078 	rdprs	zero,zero,961
    ef8c:	0000f808 	cmpgei	zero,zero,992
    ef90:	0000f808 	cmpgei	zero,zero,992
    ef94:	0000f808 	cmpgei	zero,zero,992
    ef98:	0000f808 	cmpgei	zero,zero,992
    ef9c:	0000f808 	cmpgei	zero,zero,992
    efa0:	0000f044 	movi	zero,961
    efa4:	0000f808 	cmpgei	zero,zero,992
    efa8:	0000f808 	cmpgei	zero,zero,992
    efac:	0000f68c 	andi	zero,zero,986
    efb0:	0000f808 	cmpgei	zero,zero,992
    efb4:	0000f808 	cmpgei	zero,zero,992
    efb8:	0000f808 	cmpgei	zero,zero,992
    efbc:	0000f808 	cmpgei	zero,zero,992
    efc0:	0000f808 	cmpgei	zero,zero,992
    efc4:	0000f808 	cmpgei	zero,zero,992
    efc8:	0000f808 	cmpgei	zero,zero,992
    efcc:	0000f808 	cmpgei	zero,zero,992
    efd0:	0000f808 	cmpgei	zero,zero,992
    efd4:	0000f808 	cmpgei	zero,zero,992
    efd8:	0000f62c 	andhi	zero,zero,984
    efdc:	0000f658 	cmpnei	zero,zero,985
    efe0:	0000f808 	cmpgei	zero,zero,992
    efe4:	0000f808 	cmpgei	zero,zero,992
    efe8:	0000f808 	cmpgei	zero,zero,992
    efec:	0000f734 	movhi	zero,988
    eff0:	0000f658 	cmpnei	zero,zero,985
    eff4:	0000f808 	cmpgei	zero,zero,992
    eff8:	0000f808 	cmpgei	zero,zero,992
    effc:	0000f744 	movi	zero,989
    f000:	0000f808 	cmpgei	zero,zero,992
    f004:	0000f570 	cmpltui	zero,zero,981
    f008:	0000f07c 	xorhi	zero,zero,961
    f00c:	0000f758 	cmpnei	zero,zero,989
    f010:	0000f798 	cmpnei	zero,zero,990
    f014:	0000f808 	cmpgei	zero,zero,992
    f018:	0000f6e0 	cmpeqi	zero,zero,987
    f01c:	0000f808 	cmpgei	zero,zero,992
    f020:	0000f048 	cmpgei	zero,zero,961
    f024:	0000f808 	cmpgei	zero,zero,992
    f028:	0000f808 	cmpgei	zero,zero,992
    f02c:	0000f7a8 	cmpgeui	zero,zero,990
    f030:	42000204 	addi	r8,r8,8
    f034:	d8802317 	ldw	r2,140(sp)
    f038:	1485883a 	add	r2,r2,r18
    f03c:	d8802315 	stw	r2,140(sp)
    f040:	003f8c06 	br	ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    f044:	ad400414 	ori	r21,r21,16
    f048:	a880080c 	andi	r2,r21,32
    f04c:	1001e61e 	bne	r2,zero,f7e8 <___vfiprintf_internal_r+0xab8>
    f050:	a880040c 	andi	r2,r21,16
    f054:	10034726 	beq	r2,zero,fd74 <___vfiprintf_internal_r+0x1044>
    f058:	d8802217 	ldw	r2,136(sp)
    f05c:	001b883a 	mov	r13,zero
    f060:	15800017 	ldw	r22,0(r2)
    f064:	10800104 	addi	r2,r2,4
    f068:	d8802215 	stw	r2,136(sp)
    f06c:	b009883a 	mov	r4,r22
    f070:	00800044 	movi	r2,1
    f074:	00000c06 	br	f0a8 <___vfiprintf_internal_r+0x378>
    f078:	ad400414 	ori	r21,r21,16
    f07c:	a880080c 	andi	r2,r21,32
    f080:	1001491e 	bne	r2,zero,f5a8 <___vfiprintf_internal_r+0x878>
    f084:	a880040c 	andi	r2,r21,16
    f088:	10032d26 	beq	r2,zero,fd40 <___vfiprintf_internal_r+0x1010>
    f08c:	d9002217 	ldw	r4,136(sp)
    f090:	001b883a 	mov	r13,zero
    f094:	0005883a 	mov	r2,zero
    f098:	25800017 	ldw	r22,0(r4)
    f09c:	21000104 	addi	r4,r4,4
    f0a0:	d9002215 	stw	r4,136(sp)
    f0a4:	b009883a 	mov	r4,r22
    f0a8:	d8001d85 	stb	zero,118(sp)
    f0ac:	4827883a 	mov	r19,r9
    f0b0:	001d883a 	mov	r14,zero
    f0b4:	48000216 	blt	r9,zero,f0c0 <___vfiprintf_internal_r+0x390>
    f0b8:	00ffdfc4 	movi	r3,-129
    f0bc:	a8ea703a 	and	r21,r21,r3
    f0c0:	2002071e 	bne	r4,zero,f8e0 <___vfiprintf_internal_r+0xbb0>
    f0c4:	4802ad26 	beq	r9,zero,fb7c <___vfiprintf_internal_r+0xe4c>
    f0c8:	10803fcc 	andi	r2,r2,255
    f0cc:	00c00044 	movi	r3,1
    f0d0:	10c22b26 	beq	r2,r3,f980 <___vfiprintf_internal_r+0xc50>
    f0d4:	00c00084 	movi	r3,2
    f0d8:	dd001a04 	addi	r20,sp,104
    f0dc:	10c0dd1e 	bne	r2,r3,f454 <___vfiprintf_internal_r+0x724>
    f0e0:	d9002617 	ldw	r4,152(sp)
    f0e4:	b08003cc 	andi	r2,r22,15
    f0e8:	6806973a 	slli	r3,r13,28
    f0ec:	2085883a 	add	r2,r4,r2
    f0f0:	b02cd13a 	srli	r22,r22,4
    f0f4:	10800003 	ldbu	r2,0(r2)
    f0f8:	681ad13a 	srli	r13,r13,4
    f0fc:	a53fffc4 	addi	r20,r20,-1
    f100:	1dacb03a 	or	r22,r3,r22
    f104:	a0800005 	stb	r2,0(r20)
    f108:	b344b03a 	or	r2,r22,r13
    f10c:	103ff51e 	bne	r2,zero,f0e4 <__alt_mem_Flash_flash_data+0xf400f0e4>
    f110:	d9001e17 	ldw	r4,120(sp)
    f114:	2527c83a 	sub	r19,r4,r20
    f118:	9823883a 	mov	r17,r19
    f11c:	9a40010e 	bge	r19,r9,f124 <___vfiprintf_internal_r+0x3f4>
    f120:	4823883a 	mov	r17,r9
    f124:	73803fcc 	andi	r14,r14,255
    f128:	7380201c 	xori	r14,r14,128
    f12c:	73bfe004 	addi	r14,r14,-128
    f130:	70000126 	beq	r14,zero,f138 <___vfiprintf_internal_r+0x408>
    f134:	8c400044 	addi	r17,r17,1
    f138:	ab40008c 	andi	r13,r21,2
    f13c:	68000126 	beq	r13,zero,f144 <___vfiprintf_internal_r+0x414>
    f140:	8c400084 	addi	r17,r17,2
    f144:	ad80210c 	andi	r22,r21,132
    f148:	b001c51e 	bne	r22,zero,f860 <___vfiprintf_internal_r+0xb30>
    f14c:	9447c83a 	sub	r3,r18,r17
    f150:	00c1c30e 	bge	zero,r3,f860 <___vfiprintf_internal_r+0xb30>
    f154:	01c00404 	movi	r7,16
    f158:	d8801c17 	ldw	r2,112(sp)
    f15c:	38c37b0e 	bge	r7,r3,ff4c <___vfiprintf_internal_r+0x121c>
    f160:	010000b4 	movhi	r4,2
    f164:	21172c04 	addi	r4,r4,23728
    f168:	dc002915 	stw	r16,164(sp)
    f16c:	d9801b17 	ldw	r6,108(sp)
    f170:	d9002415 	stw	r4,144(sp)
    f174:	03c001c4 	movi	r15,7
    f178:	da402515 	stw	r9,148(sp)
    f17c:	db402815 	stw	r13,160(sp)
    f180:	1821883a 	mov	r16,r3
    f184:	00000506 	br	f19c <___vfiprintf_internal_r+0x46c>
    f188:	31400084 	addi	r5,r6,2
    f18c:	42000204 	addi	r8,r8,8
    f190:	200d883a 	mov	r6,r4
    f194:	843ffc04 	addi	r16,r16,-16
    f198:	3c000d0e 	bge	r7,r16,f1d0 <___vfiprintf_internal_r+0x4a0>
    f19c:	10800404 	addi	r2,r2,16
    f1a0:	31000044 	addi	r4,r6,1
    f1a4:	47000015 	stw	fp,0(r8)
    f1a8:	41c00115 	stw	r7,4(r8)
    f1ac:	d8801c15 	stw	r2,112(sp)
    f1b0:	d9001b15 	stw	r4,108(sp)
    f1b4:	793ff40e 	bge	r15,r4,f188 <__alt_mem_Flash_flash_data+0xf400f188>
    f1b8:	10019b1e 	bne	r2,zero,f828 <___vfiprintf_internal_r+0xaf8>
    f1bc:	843ffc04 	addi	r16,r16,-16
    f1c0:	000d883a 	mov	r6,zero
    f1c4:	01400044 	movi	r5,1
    f1c8:	d811883a 	mov	r8,sp
    f1cc:	3c3ff316 	blt	r7,r16,f19c <__alt_mem_Flash_flash_data+0xf400f19c>
    f1d0:	8007883a 	mov	r3,r16
    f1d4:	da402517 	ldw	r9,148(sp)
    f1d8:	db402817 	ldw	r13,160(sp)
    f1dc:	dc002917 	ldw	r16,164(sp)
    f1e0:	d9002417 	ldw	r4,144(sp)
    f1e4:	1885883a 	add	r2,r3,r2
    f1e8:	40c00115 	stw	r3,4(r8)
    f1ec:	41000015 	stw	r4,0(r8)
    f1f0:	d8801c15 	stw	r2,112(sp)
    f1f4:	d9401b15 	stw	r5,108(sp)
    f1f8:	00c001c4 	movi	r3,7
    f1fc:	19426a16 	blt	r3,r5,fba8 <___vfiprintf_internal_r+0xe78>
    f200:	d8c01d87 	ldb	r3,118(sp)
    f204:	42000204 	addi	r8,r8,8
    f208:	29000044 	addi	r4,r5,1
    f20c:	1801991e 	bne	r3,zero,f874 <___vfiprintf_internal_r+0xb44>
    f210:	68000c26 	beq	r13,zero,f244 <___vfiprintf_internal_r+0x514>
    f214:	d8c01d04 	addi	r3,sp,116
    f218:	10800084 	addi	r2,r2,2
    f21c:	40c00015 	stw	r3,0(r8)
    f220:	00c00084 	movi	r3,2
    f224:	40c00115 	stw	r3,4(r8)
    f228:	d8801c15 	stw	r2,112(sp)
    f22c:	d9001b15 	stw	r4,108(sp)
    f230:	00c001c4 	movi	r3,7
    f234:	19024c16 	blt	r3,r4,fb68 <___vfiprintf_internal_r+0xe38>
    f238:	200b883a 	mov	r5,r4
    f23c:	42000204 	addi	r8,r8,8
    f240:	21000044 	addi	r4,r4,1
    f244:	00c02004 	movi	r3,128
    f248:	b0c20126 	beq	r22,r3,fa50 <___vfiprintf_internal_r+0xd20>
    f24c:	4cedc83a 	sub	r22,r9,r19
    f250:	0580230e 	bge	zero,r22,f2e0 <___vfiprintf_internal_r+0x5b0>
    f254:	01c00404 	movi	r7,16
    f258:	3d83140e 	bge	r7,r22,feac <___vfiprintf_internal_r+0x117c>
    f25c:	010000b4 	movhi	r4,2
    f260:	21172804 	addi	r4,r4,23712
    f264:	d9002415 	stw	r4,144(sp)
    f268:	034001c4 	movi	r13,7
    f26c:	00000506 	br	f284 <___vfiprintf_internal_r+0x554>
    f270:	29000084 	addi	r4,r5,2
    f274:	42000204 	addi	r8,r8,8
    f278:	180b883a 	mov	r5,r3
    f27c:	b5bffc04 	addi	r22,r22,-16
    f280:	3d800d0e 	bge	r7,r22,f2b8 <___vfiprintf_internal_r+0x588>
    f284:	10800404 	addi	r2,r2,16
    f288:	28c00044 	addi	r3,r5,1
    f28c:	45c00015 	stw	r23,0(r8)
    f290:	41c00115 	stw	r7,4(r8)
    f294:	d8801c15 	stw	r2,112(sp)
    f298:	d8c01b15 	stw	r3,108(sp)
    f29c:	68fff40e 	bge	r13,r3,f270 <__alt_mem_Flash_flash_data+0xf400f270>
    f2a0:	1001811e 	bne	r2,zero,f8a8 <___vfiprintf_internal_r+0xb78>
    f2a4:	b5bffc04 	addi	r22,r22,-16
    f2a8:	01000044 	movi	r4,1
    f2ac:	000b883a 	mov	r5,zero
    f2b0:	d811883a 	mov	r8,sp
    f2b4:	3dbff316 	blt	r7,r22,f284 <__alt_mem_Flash_flash_data+0xf400f284>
    f2b8:	d8c02417 	ldw	r3,144(sp)
    f2bc:	1585883a 	add	r2,r2,r22
    f2c0:	45800115 	stw	r22,4(r8)
    f2c4:	40c00015 	stw	r3,0(r8)
    f2c8:	d8801c15 	stw	r2,112(sp)
    f2cc:	d9001b15 	stw	r4,108(sp)
    f2d0:	00c001c4 	movi	r3,7
    f2d4:	1901d016 	blt	r3,r4,fa18 <___vfiprintf_internal_r+0xce8>
    f2d8:	42000204 	addi	r8,r8,8
    f2dc:	21000044 	addi	r4,r4,1
    f2e0:	14c5883a 	add	r2,r2,r19
    f2e4:	45000015 	stw	r20,0(r8)
    f2e8:	44c00115 	stw	r19,4(r8)
    f2ec:	d8801c15 	stw	r2,112(sp)
    f2f0:	d9001b15 	stw	r4,108(sp)
    f2f4:	00c001c4 	movi	r3,7
    f2f8:	1901cf0e 	bge	r3,r4,fa38 <___vfiprintf_internal_r+0xd08>
    f2fc:	1002361e 	bne	r2,zero,fbd8 <___vfiprintf_internal_r+0xea8>
    f300:	d8001b15 	stw	zero,108(sp)
    f304:	aac0010c 	andi	r11,r21,4
    f308:	58002826 	beq	r11,zero,f3ac <___vfiprintf_internal_r+0x67c>
    f30c:	9467c83a 	sub	r19,r18,r17
    f310:	d811883a 	mov	r8,sp
    f314:	04c3340e 	bge	zero,r19,ffe8 <___vfiprintf_internal_r+0x12b8>
    f318:	01c00404 	movi	r7,16
    f31c:	3cc31b0e 	bge	r7,r19,ff8c <___vfiprintf_internal_r+0x125c>
    f320:	00c000b4 	movhi	r3,2
    f324:	18d72c04 	addi	r3,r3,23728
    f328:	d9001b17 	ldw	r4,108(sp)
    f32c:	d8c02415 	stw	r3,144(sp)
    f330:	382b883a 	mov	r21,r7
    f334:	050001c4 	movi	r20,7
    f338:	dd802017 	ldw	r22,128(sp)
    f33c:	00000506 	br	f354 <___vfiprintf_internal_r+0x624>
    f340:	21400084 	addi	r5,r4,2
    f344:	42000204 	addi	r8,r8,8
    f348:	1809883a 	mov	r4,r3
    f34c:	9cfffc04 	addi	r19,r19,-16
    f350:	acc00d0e 	bge	r21,r19,f388 <___vfiprintf_internal_r+0x658>
    f354:	10800404 	addi	r2,r2,16
    f358:	20c00044 	addi	r3,r4,1
    f35c:	47000015 	stw	fp,0(r8)
    f360:	45400115 	stw	r21,4(r8)
    f364:	d8801c15 	stw	r2,112(sp)
    f368:	d8c01b15 	stw	r3,108(sp)
    f36c:	a0fff40e 	bge	r20,r3,f340 <__alt_mem_Flash_flash_data+0xf400f340>
    f370:	10019f1e 	bne	r2,zero,f9f0 <___vfiprintf_internal_r+0xcc0>
    f374:	9cfffc04 	addi	r19,r19,-16
    f378:	01400044 	movi	r5,1
    f37c:	0009883a 	mov	r4,zero
    f380:	d811883a 	mov	r8,sp
    f384:	acfff316 	blt	r21,r19,f354 <__alt_mem_Flash_flash_data+0xf400f354>
    f388:	d8c02417 	ldw	r3,144(sp)
    f38c:	14c5883a 	add	r2,r2,r19
    f390:	44c00115 	stw	r19,4(r8)
    f394:	40c00015 	stw	r3,0(r8)
    f398:	d8801c15 	stw	r2,112(sp)
    f39c:	d9401b15 	stw	r5,108(sp)
    f3a0:	00c001c4 	movi	r3,7
    f3a4:	1941810e 	bge	r3,r5,f9ac <___vfiprintf_internal_r+0xc7c>
    f3a8:	10017a1e 	bne	r2,zero,f994 <___vfiprintf_internal_r+0xc64>
    f3ac:	8c82a416 	blt	r17,r18,fe40 <___vfiprintf_internal_r+0x1110>
    f3b0:	d9002317 	ldw	r4,140(sp)
    f3b4:	2449883a 	add	r4,r4,r17
    f3b8:	d9002315 	stw	r4,140(sp)
    f3bc:	d8001b15 	stw	zero,108(sp)
    f3c0:	d811883a 	mov	r8,sp
    f3c4:	003e8e06 	br	ee00 <__alt_mem_Flash_flash_data+0xf400ee00>
    f3c8:	d9002017 	ldw	r4,128(sp)
    f3cc:	a80b883a 	mov	r5,r21
    f3d0:	00088340 	call	8834 <__swsetup_r>
    f3d4:	10000c1e 	bne	r2,zero,f408 <___vfiprintf_internal_r+0x6d8>
    f3d8:	a880030b 	ldhu	r2,12(r21)
    f3dc:	00c00284 	movi	r3,10
    f3e0:	1080068c 	andi	r2,r2,26
    f3e4:	10fe741e 	bne	r2,r3,edb8 <__alt_mem_Flash_flash_data+0xf400edb8>
    f3e8:	a880038f 	ldh	r2,14(r21)
    f3ec:	103e7216 	blt	r2,zero,edb8 <__alt_mem_Flash_flash_data+0xf400edb8>
    f3f0:	d9002017 	ldw	r4,128(sp)
    f3f4:	d9c02217 	ldw	r7,136(sp)
    f3f8:	a80b883a 	mov	r5,r21
    f3fc:	b00d883a 	mov	r6,r22
    f400:	00100240 	call	10024 <__sbprintf>
    f404:	00000106 	br	f40c <___vfiprintf_internal_r+0x6dc>
    f408:	00bfffc4 	movi	r2,-1
    f40c:	dfc03517 	ldw	ra,212(sp)
    f410:	df003417 	ldw	fp,208(sp)
    f414:	ddc03317 	ldw	r23,204(sp)
    f418:	dd803217 	ldw	r22,200(sp)
    f41c:	dd403117 	ldw	r21,196(sp)
    f420:	dd003017 	ldw	r20,192(sp)
    f424:	dcc02f17 	ldw	r19,188(sp)
    f428:	dc802e17 	ldw	r18,184(sp)
    f42c:	dc402d17 	ldw	r17,180(sp)
    f430:	dc002c17 	ldw	r16,176(sp)
    f434:	dec03604 	addi	sp,sp,216
    f438:	f800283a 	ret
    f43c:	000a8940 	call	a894 <__sinit>
    f440:	003e4d06 	br	ed78 <__alt_mem_Flash_flash_data+0xf400ed78>
    f444:	8005883a 	mov	r2,r16
    f448:	ad400114 	ori	r21,r21,4
    f44c:	80c00007 	ldb	r3,0(r16)
    f450:	003e9506 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f454:	b006d0fa 	srli	r3,r22,3
    f458:	6808977a 	slli	r4,r13,29
    f45c:	681ad0fa 	srli	r13,r13,3
    f460:	b58001cc 	andi	r22,r22,7
    f464:	b0800c04 	addi	r2,r22,48
    f468:	a53fffc4 	addi	r20,r20,-1
    f46c:	20ecb03a 	or	r22,r4,r3
    f470:	a0800005 	stb	r2,0(r20)
    f474:	b346b03a 	or	r3,r22,r13
    f478:	183ff61e 	bne	r3,zero,f454 <__alt_mem_Flash_flash_data+0xf400f454>
    f47c:	a8c0004c 	andi	r3,r21,1
    f480:	a009883a 	mov	r4,r20
    f484:	18013b26 	beq	r3,zero,f974 <___vfiprintf_internal_r+0xc44>
    f488:	10803fcc 	andi	r2,r2,255
    f48c:	1080201c 	xori	r2,r2,128
    f490:	10bfe004 	addi	r2,r2,-128
    f494:	00c00c04 	movi	r3,48
    f498:	10ff1d26 	beq	r2,r3,f110 <__alt_mem_Flash_flash_data+0xf400f110>
    f49c:	d8801e17 	ldw	r2,120(sp)
    f4a0:	a53fffc4 	addi	r20,r20,-1
    f4a4:	20ffffc5 	stb	r3,-1(r4)
    f4a8:	1527c83a 	sub	r19,r2,r20
    f4ac:	003f1a06 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    f4b0:	ad402014 	ori	r21,r21,128
    f4b4:	8005883a 	mov	r2,r16
    f4b8:	80c00007 	ldb	r3,0(r16)
    f4bc:	003e7a06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f4c0:	8005883a 	mov	r2,r16
    f4c4:	0025883a 	mov	r18,zero
    f4c8:	193ff404 	addi	r4,r3,-48
    f4cc:	10c00007 	ldb	r3,0(r2)
    f4d0:	948002a4 	muli	r18,r18,10
    f4d4:	84000044 	addi	r16,r16,1
    f4d8:	8005883a 	mov	r2,r16
    f4dc:	9125883a 	add	r18,r18,r4
    f4e0:	193ff404 	addi	r4,r3,-48
    f4e4:	313ff92e 	bgeu	r6,r4,f4cc <__alt_mem_Flash_flash_data+0xf400f4cc>
    f4e8:	003e7006 	br	eeac <__alt_mem_Flash_flash_data+0xf400eeac>
    f4ec:	ad400414 	ori	r21,r21,16
    f4f0:	d9c01d85 	stb	r7,118(sp)
    f4f4:	a880080c 	andi	r2,r21,32
    f4f8:	d8c02217 	ldw	r3,136(sp)
    f4fc:	10005a26 	beq	r2,zero,f668 <___vfiprintf_internal_r+0x938>
    f500:	d9002217 	ldw	r4,136(sp)
    f504:	18800117 	ldw	r2,4(r3)
    f508:	1d800017 	ldw	r22,0(r3)
    f50c:	21000204 	addi	r4,r4,8
    f510:	d9002215 	stw	r4,136(sp)
    f514:	101b883a 	mov	r13,r2
    f518:	1001f416 	blt	r2,zero,fcec <___vfiprintf_internal_r+0xfbc>
    f51c:	db801d83 	ldbu	r14,118(sp)
    f520:	4827883a 	mov	r19,r9
    f524:	00800044 	movi	r2,1
    f528:	b348b03a 	or	r4,r22,r13
    f52c:	003ee106 	br	f0b4 <__alt_mem_Flash_flash_data+0xf400f0b4>
    f530:	80c00007 	ldb	r3,0(r16)
    f534:	80800044 	addi	r2,r16,1
    f538:	1b42a326 	beq	r3,r13,ffc8 <___vfiprintf_internal_r+0x1298>
    f53c:	193ff404 	addi	r4,r3,-48
    f540:	1021883a 	mov	r16,r2
    f544:	0013883a 	mov	r9,zero
    f548:	313e5836 	bltu	r6,r4,eeac <__alt_mem_Flash_flash_data+0xf400eeac>
    f54c:	80c00007 	ldb	r3,0(r16)
    f550:	4a4002a4 	muli	r9,r9,10
    f554:	84000044 	addi	r16,r16,1
    f558:	2253883a 	add	r9,r4,r9
    f55c:	193ff404 	addi	r4,r3,-48
    f560:	313ffa2e 	bgeu	r6,r4,f54c <__alt_mem_Flash_flash_data+0xf400f54c>
    f564:	483e510e 	bge	r9,zero,eeac <__alt_mem_Flash_flash_data+0xf400eeac>
    f568:	027fffc4 	movi	r9,-1
    f56c:	003e4f06 	br	eeac <__alt_mem_Flash_flash_data+0xf400eeac>
    f570:	d9c01d85 	stb	r7,118(sp)
    f574:	a880080c 	andi	r2,r21,32
    f578:	10020826 	beq	r2,zero,fd9c <___vfiprintf_internal_r+0x106c>
    f57c:	d8c02217 	ldw	r3,136(sp)
    f580:	d9002317 	ldw	r4,140(sp)
    f584:	18800017 	ldw	r2,0(r3)
    f588:	2007d7fa 	srai	r3,r4,31
    f58c:	d9002217 	ldw	r4,136(sp)
    f590:	10c00115 	stw	r3,4(r2)
    f594:	21000104 	addi	r4,r4,4
    f598:	d9002215 	stw	r4,136(sp)
    f59c:	d9002317 	ldw	r4,140(sp)
    f5a0:	11000015 	stw	r4,0(r2)
    f5a4:	003e1606 	br	ee00 <__alt_mem_Flash_flash_data+0xf400ee00>
    f5a8:	d8802217 	ldw	r2,136(sp)
    f5ac:	d8c02217 	ldw	r3,136(sp)
    f5b0:	15800017 	ldw	r22,0(r2)
    f5b4:	13400117 	ldw	r13,4(r2)
    f5b8:	18c00204 	addi	r3,r3,8
    f5bc:	0005883a 	mov	r2,zero
    f5c0:	d8c02215 	stw	r3,136(sp)
    f5c4:	b348b03a 	or	r4,r22,r13
    f5c8:	003eb706 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    f5cc:	38803fcc 	andi	r2,r7,255
    f5d0:	1080201c 	xori	r2,r2,128
    f5d4:	10bfe004 	addi	r2,r2,-128
    f5d8:	1001e31e 	bne	r2,zero,fd68 <___vfiprintf_internal_r+0x1038>
    f5dc:	8005883a 	mov	r2,r16
    f5e0:	01c00804 	movi	r7,32
    f5e4:	80c00007 	ldb	r3,0(r16)
    f5e8:	003e2f06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f5ec:	ad400054 	ori	r21,r21,1
    f5f0:	8005883a 	mov	r2,r16
    f5f4:	80c00007 	ldb	r3,0(r16)
    f5f8:	003e2b06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f5fc:	d8c02217 	ldw	r3,136(sp)
    f600:	1c800017 	ldw	r18,0(r3)
    f604:	18c00104 	addi	r3,r3,4
    f608:	90023816 	blt	r18,zero,feec <___vfiprintf_internal_r+0x11bc>
    f60c:	d8c02215 	stw	r3,136(sp)
    f610:	8005883a 	mov	r2,r16
    f614:	80c00007 	ldb	r3,0(r16)
    f618:	003e2306 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f61c:	8005883a 	mov	r2,r16
    f620:	01c00ac4 	movi	r7,43
    f624:	80c00007 	ldb	r3,0(r16)
    f628:	003e1f06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f62c:	d8c02217 	ldw	r3,136(sp)
    f630:	04400044 	movi	r17,1
    f634:	d8001d85 	stb	zero,118(sp)
    f638:	18800017 	ldw	r2,0(r3)
    f63c:	18c00104 	addi	r3,r3,4
    f640:	d8c02215 	stw	r3,136(sp)
    f644:	d8801005 	stb	r2,64(sp)
    f648:	8827883a 	mov	r19,r17
    f64c:	dd001004 	addi	r20,sp,64
    f650:	0013883a 	mov	r9,zero
    f654:	003eb806 	br	f138 <__alt_mem_Flash_flash_data+0xf400f138>
    f658:	d9c01d85 	stb	r7,118(sp)
    f65c:	a880080c 	andi	r2,r21,32
    f660:	d8c02217 	ldw	r3,136(sp)
    f664:	103fa61e 	bne	r2,zero,f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f668:	a880040c 	andi	r2,r21,16
    f66c:	1001dd26 	beq	r2,zero,fde4 <___vfiprintf_internal_r+0x10b4>
    f670:	1d800017 	ldw	r22,0(r3)
    f674:	d8802217 	ldw	r2,136(sp)
    f678:	b01bd7fa 	srai	r13,r22,31
    f67c:	10800104 	addi	r2,r2,4
    f680:	d8802215 	stw	r2,136(sp)
    f684:	6805883a 	mov	r2,r13
    f688:	003fa306 	br	f518 <__alt_mem_Flash_flash_data+0xf400f518>
    f68c:	008000b4 	movhi	r2,2
    f690:	1096b204 	addi	r2,r2,23240
    f694:	d8802615 	stw	r2,152(sp)
    f698:	d9c01d85 	stb	r7,118(sp)
    f69c:	a880080c 	andi	r2,r21,32
    f6a0:	10004726 	beq	r2,zero,f7c0 <___vfiprintf_internal_r+0xa90>
    f6a4:	d9002217 	ldw	r4,136(sp)
    f6a8:	25800017 	ldw	r22,0(r4)
    f6ac:	23400117 	ldw	r13,4(r4)
    f6b0:	21000204 	addi	r4,r4,8
    f6b4:	d9002215 	stw	r4,136(sp)
    f6b8:	a880004c 	andi	r2,r21,1
    f6bc:	10014e26 	beq	r2,zero,fbf8 <___vfiprintf_internal_r+0xec8>
    f6c0:	b348b03a 	or	r4,r22,r13
    f6c4:	20019c26 	beq	r4,zero,fd38 <___vfiprintf_internal_r+0x1008>
    f6c8:	00800c04 	movi	r2,48
    f6cc:	d8801d05 	stb	r2,116(sp)
    f6d0:	d8c01d45 	stb	r3,117(sp)
    f6d4:	ad400094 	ori	r21,r21,2
    f6d8:	00800084 	movi	r2,2
    f6dc:	003e7206 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    f6e0:	d8c02217 	ldw	r3,136(sp)
    f6e4:	d8001d85 	stb	zero,118(sp)
    f6e8:	1d000017 	ldw	r20,0(r3)
    f6ec:	1d800104 	addi	r22,r3,4
    f6f0:	a0021c26 	beq	r20,zero,ff64 <___vfiprintf_internal_r+0x1234>
    f6f4:	a009883a 	mov	r4,r20
    f6f8:	48020016 	blt	r9,zero,fefc <___vfiprintf_internal_r+0x11cc>
    f6fc:	480d883a 	mov	r6,r9
    f700:	000b883a 	mov	r5,zero
    f704:	da002a15 	stw	r8,168(sp)
    f708:	da402b15 	stw	r9,172(sp)
    f70c:	000bd800 	call	bd80 <memchr>
    f710:	da002a17 	ldw	r8,168(sp)
    f714:	da402b17 	ldw	r9,172(sp)
    f718:	10022226 	beq	r2,zero,ffa4 <___vfiprintf_internal_r+0x1274>
    f71c:	1527c83a 	sub	r19,r2,r20
    f720:	4cc1c916 	blt	r9,r19,fe48 <___vfiprintf_internal_r+0x1118>
    f724:	db801d83 	ldbu	r14,118(sp)
    f728:	dd802215 	stw	r22,136(sp)
    f72c:	0013883a 	mov	r9,zero
    f730:	003e7906 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    f734:	ad401014 	ori	r21,r21,64
    f738:	8005883a 	mov	r2,r16
    f73c:	80c00007 	ldb	r3,0(r16)
    f740:	003dd906 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f744:	80c00007 	ldb	r3,0(r16)
    f748:	8005883a 	mov	r2,r16
    f74c:	1b01e326 	beq	r3,r12,fedc <___vfiprintf_internal_r+0x11ac>
    f750:	ad400414 	ori	r21,r21,16
    f754:	003dd406 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f758:	d9002217 	ldw	r4,136(sp)
    f75c:	00800c04 	movi	r2,48
    f760:	d8801d05 	stb	r2,116(sp)
    f764:	25800017 	ldw	r22,0(r4)
    f768:	00801e04 	movi	r2,120
    f76c:	d8801d45 	stb	r2,117(sp)
    f770:	008000b4 	movhi	r2,2
    f774:	21000104 	addi	r4,r4,4
    f778:	1096b704 	addi	r2,r2,23260
    f77c:	d9002215 	stw	r4,136(sp)
    f780:	d8802615 	stw	r2,152(sp)
    f784:	001b883a 	mov	r13,zero
    f788:	ad400094 	ori	r21,r21,2
    f78c:	00800084 	movi	r2,2
    f790:	b009883a 	mov	r4,r22
    f794:	003e4406 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    f798:	ad400814 	ori	r21,r21,32
    f79c:	8005883a 	mov	r2,r16
    f7a0:	80c00007 	ldb	r3,0(r16)
    f7a4:	003dc006 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    f7a8:	008000b4 	movhi	r2,2
    f7ac:	1096b704 	addi	r2,r2,23260
    f7b0:	d8802615 	stw	r2,152(sp)
    f7b4:	d9c01d85 	stb	r7,118(sp)
    f7b8:	a880080c 	andi	r2,r21,32
    f7bc:	103fb91e 	bne	r2,zero,f6a4 <__alt_mem_Flash_flash_data+0xf400f6a4>
    f7c0:	a880040c 	andi	r2,r21,16
    f7c4:	10010f1e 	bne	r2,zero,fc04 <___vfiprintf_internal_r+0xed4>
    f7c8:	a880100c 	andi	r2,r21,64
    f7cc:	10010d26 	beq	r2,zero,fc04 <___vfiprintf_internal_r+0xed4>
    f7d0:	d9002217 	ldw	r4,136(sp)
    f7d4:	001b883a 	mov	r13,zero
    f7d8:	2580000b 	ldhu	r22,0(r4)
    f7dc:	21000104 	addi	r4,r4,4
    f7e0:	d9002215 	stw	r4,136(sp)
    f7e4:	003fb406 	br	f6b8 <__alt_mem_Flash_flash_data+0xf400f6b8>
    f7e8:	d9002217 	ldw	r4,136(sp)
    f7ec:	00800044 	movi	r2,1
    f7f0:	25800017 	ldw	r22,0(r4)
    f7f4:	23400117 	ldw	r13,4(r4)
    f7f8:	21000204 	addi	r4,r4,8
    f7fc:	d9002215 	stw	r4,136(sp)
    f800:	b348b03a 	or	r4,r22,r13
    f804:	003e2806 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    f808:	d9c01d85 	stb	r7,118(sp)
    f80c:	1801ab26 	beq	r3,zero,febc <___vfiprintf_internal_r+0x118c>
    f810:	04400044 	movi	r17,1
    f814:	d8c01005 	stb	r3,64(sp)
    f818:	d8001d85 	stb	zero,118(sp)
    f81c:	8827883a 	mov	r19,r17
    f820:	dd001004 	addi	r20,sp,64
    f824:	003f8a06 	br	f650 <__alt_mem_Flash_flash_data+0xf400f650>
    f828:	d9002017 	ldw	r4,128(sp)
    f82c:	d9402117 	ldw	r5,132(sp)
    f830:	d9801a04 	addi	r6,sp,104
    f834:	d9c02b15 	stw	r7,172(sp)
    f838:	dbc02a15 	stw	r15,168(sp)
    f83c:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    f840:	d9c02b17 	ldw	r7,172(sp)
    f844:	dbc02a17 	ldw	r15,168(sp)
    f848:	1000631e 	bne	r2,zero,f9d8 <___vfiprintf_internal_r+0xca8>
    f84c:	d9801b17 	ldw	r6,108(sp)
    f850:	d8801c17 	ldw	r2,112(sp)
    f854:	d811883a 	mov	r8,sp
    f858:	31400044 	addi	r5,r6,1
    f85c:	003e4d06 	br	f194 <__alt_mem_Flash_flash_data+0xf400f194>
    f860:	d9401b17 	ldw	r5,108(sp)
    f864:	d8801c17 	ldw	r2,112(sp)
    f868:	29000044 	addi	r4,r5,1
    f86c:	d8c01d87 	ldb	r3,118(sp)
    f870:	183e6726 	beq	r3,zero,f210 <__alt_mem_Flash_flash_data+0xf400f210>
    f874:	00c00044 	movi	r3,1
    f878:	d9401d84 	addi	r5,sp,118
    f87c:	10c5883a 	add	r2,r2,r3
    f880:	41400015 	stw	r5,0(r8)
    f884:	40c00115 	stw	r3,4(r8)
    f888:	d8801c15 	stw	r2,112(sp)
    f88c:	d9001b15 	stw	r4,108(sp)
    f890:	014001c4 	movi	r5,7
    f894:	2900ab16 	blt	r5,r4,fb44 <___vfiprintf_internal_r+0xe14>
    f898:	200b883a 	mov	r5,r4
    f89c:	42000204 	addi	r8,r8,8
    f8a0:	21000044 	addi	r4,r4,1
    f8a4:	003e5a06 	br	f210 <__alt_mem_Flash_flash_data+0xf400f210>
    f8a8:	d9002017 	ldw	r4,128(sp)
    f8ac:	d9402117 	ldw	r5,132(sp)
    f8b0:	d9801a04 	addi	r6,sp,104
    f8b4:	d9c02b15 	stw	r7,172(sp)
    f8b8:	db402a15 	stw	r13,168(sp)
    f8bc:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    f8c0:	d9c02b17 	ldw	r7,172(sp)
    f8c4:	db402a17 	ldw	r13,168(sp)
    f8c8:	1000431e 	bne	r2,zero,f9d8 <___vfiprintf_internal_r+0xca8>
    f8cc:	d9401b17 	ldw	r5,108(sp)
    f8d0:	d8801c17 	ldw	r2,112(sp)
    f8d4:	d811883a 	mov	r8,sp
    f8d8:	29000044 	addi	r4,r5,1
    f8dc:	003e6706 	br	f27c <__alt_mem_Flash_flash_data+0xf400f27c>
    f8e0:	10803fcc 	andi	r2,r2,255
    f8e4:	00c00044 	movi	r3,1
    f8e8:	10fdfa1e 	bne	r2,r3,f0d4 <__alt_mem_Flash_flash_data+0xf400f0d4>
    f8ec:	6800021e 	bne	r13,zero,f8f8 <___vfiprintf_internal_r+0xbc8>
    f8f0:	00800244 	movi	r2,9
    f8f4:	1580222e 	bgeu	r2,r22,f980 <___vfiprintf_internal_r+0xc50>
    f8f8:	dc802415 	stw	r18,144(sp)
    f8fc:	dc002515 	stw	r16,148(sp)
    f900:	dc401a04 	addi	r17,sp,104
    f904:	b021883a 	mov	r16,r22
    f908:	4827883a 	mov	r19,r9
    f90c:	4029883a 	mov	r20,r8
    f910:	702d883a 	mov	r22,r14
    f914:	6825883a 	mov	r18,r13
    f918:	8009883a 	mov	r4,r16
    f91c:	900b883a 	mov	r5,r18
    f920:	01800284 	movi	r6,10
    f924:	000f883a 	mov	r7,zero
    f928:	0010f980 	call	10f98 <__umoddi3>
    f92c:	10800c04 	addi	r2,r2,48
    f930:	8c7fffc4 	addi	r17,r17,-1
    f934:	8009883a 	mov	r4,r16
    f938:	900b883a 	mov	r5,r18
    f93c:	01800284 	movi	r6,10
    f940:	000f883a 	mov	r7,zero
    f944:	88800005 	stb	r2,0(r17)
    f948:	00109d80 	call	109d8 <__udivdi3>
    f94c:	1021883a 	mov	r16,r2
    f950:	10c4b03a 	or	r2,r2,r3
    f954:	1825883a 	mov	r18,r3
    f958:	103fef1e 	bne	r2,zero,f918 <__alt_mem_Flash_flash_data+0xf400f918>
    f95c:	dc802417 	ldw	r18,144(sp)
    f960:	dc002517 	ldw	r16,148(sp)
    f964:	a011883a 	mov	r8,r20
    f968:	9813883a 	mov	r9,r19
    f96c:	b01d883a 	mov	r14,r22
    f970:	8829883a 	mov	r20,r17
    f974:	d8c01e17 	ldw	r3,120(sp)
    f978:	1d27c83a 	sub	r19,r3,r20
    f97c:	003de606 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    f980:	b5800c04 	addi	r22,r22,48
    f984:	dd8019c5 	stb	r22,103(sp)
    f988:	dcc02717 	ldw	r19,156(sp)
    f98c:	dd0019c4 	addi	r20,sp,103
    f990:	003de106 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    f994:	d9002017 	ldw	r4,128(sp)
    f998:	d9402117 	ldw	r5,132(sp)
    f99c:	d9801a04 	addi	r6,sp,104
    f9a0:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    f9a4:	10000c1e 	bne	r2,zero,f9d8 <___vfiprintf_internal_r+0xca8>
    f9a8:	d8801c17 	ldw	r2,112(sp)
    f9ac:	8c80010e 	bge	r17,r18,f9b4 <___vfiprintf_internal_r+0xc84>
    f9b0:	9023883a 	mov	r17,r18
    f9b4:	d8c02317 	ldw	r3,140(sp)
    f9b8:	1c47883a 	add	r3,r3,r17
    f9bc:	d8c02315 	stw	r3,140(sp)
    f9c0:	103e7e26 	beq	r2,zero,f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f9c4:	d9002017 	ldw	r4,128(sp)
    f9c8:	d9402117 	ldw	r5,132(sp)
    f9cc:	d9801a04 	addi	r6,sp,104
    f9d0:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    f9d4:	103e7926 	beq	r2,zero,f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f9d8:	dd402117 	ldw	r21,132(sp)
    f9dc:	a880030b 	ldhu	r2,12(r21)
    f9e0:	1080100c 	andi	r2,r2,64
    f9e4:	103e881e 	bne	r2,zero,f408 <__alt_mem_Flash_flash_data+0xf400f408>
    f9e8:	d8802317 	ldw	r2,140(sp)
    f9ec:	003e8706 	br	f40c <__alt_mem_Flash_flash_data+0xf400f40c>
    f9f0:	d9402117 	ldw	r5,132(sp)
    f9f4:	b009883a 	mov	r4,r22
    f9f8:	d9801a04 	addi	r6,sp,104
    f9fc:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fa00:	103ff51e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fa04:	d9001b17 	ldw	r4,108(sp)
    fa08:	d8801c17 	ldw	r2,112(sp)
    fa0c:	d811883a 	mov	r8,sp
    fa10:	21400044 	addi	r5,r4,1
    fa14:	003e4d06 	br	f34c <__alt_mem_Flash_flash_data+0xf400f34c>
    fa18:	1000aa1e 	bne	r2,zero,fcc4 <___vfiprintf_internal_r+0xf94>
    fa1c:	00c00044 	movi	r3,1
    fa20:	9805883a 	mov	r2,r19
    fa24:	dd000015 	stw	r20,0(sp)
    fa28:	dcc00115 	stw	r19,4(sp)
    fa2c:	dcc01c15 	stw	r19,112(sp)
    fa30:	d8c01b15 	stw	r3,108(sp)
    fa34:	d811883a 	mov	r8,sp
    fa38:	42000204 	addi	r8,r8,8
    fa3c:	aac0010c 	andi	r11,r21,4
    fa40:	583fda26 	beq	r11,zero,f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fa44:	9467c83a 	sub	r19,r18,r17
    fa48:	04fe3316 	blt	zero,r19,f318 <__alt_mem_Flash_flash_data+0xf400f318>
    fa4c:	003fd706 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fa50:	946dc83a 	sub	r22,r18,r17
    fa54:	05bdfd0e 	bge	zero,r22,f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    fa58:	00c000b4 	movhi	r3,2
    fa5c:	18d72804 	addi	r3,r3,23712
    fa60:	01c00404 	movi	r7,16
    fa64:	d8c02415 	stw	r3,144(sp)
    fa68:	3d81530e 	bge	r7,r22,ffb8 <___vfiprintf_internal_r+0x1288>
    fa6c:	8007883a 	mov	r3,r16
    fa70:	034001c4 	movi	r13,7
    fa74:	b021883a 	mov	r16,r22
    fa78:	da402515 	stw	r9,148(sp)
    fa7c:	182d883a 	mov	r22,r3
    fa80:	00000506 	br	fa98 <___vfiprintf_internal_r+0xd68>
    fa84:	29800084 	addi	r6,r5,2
    fa88:	42000204 	addi	r8,r8,8
    fa8c:	180b883a 	mov	r5,r3
    fa90:	843ffc04 	addi	r16,r16,-16
    fa94:	3c000d0e 	bge	r7,r16,facc <___vfiprintf_internal_r+0xd9c>
    fa98:	10800404 	addi	r2,r2,16
    fa9c:	28c00044 	addi	r3,r5,1
    faa0:	45c00015 	stw	r23,0(r8)
    faa4:	41c00115 	stw	r7,4(r8)
    faa8:	d8801c15 	stw	r2,112(sp)
    faac:	d8c01b15 	stw	r3,108(sp)
    fab0:	68fff40e 	bge	r13,r3,fa84 <__alt_mem_Flash_flash_data+0xf400fa84>
    fab4:	1000151e 	bne	r2,zero,fb0c <___vfiprintf_internal_r+0xddc>
    fab8:	843ffc04 	addi	r16,r16,-16
    fabc:	01800044 	movi	r6,1
    fac0:	000b883a 	mov	r5,zero
    fac4:	d811883a 	mov	r8,sp
    fac8:	3c3ff316 	blt	r7,r16,fa98 <__alt_mem_Flash_flash_data+0xf400fa98>
    facc:	da402517 	ldw	r9,148(sp)
    fad0:	b007883a 	mov	r3,r22
    fad4:	802d883a 	mov	r22,r16
    fad8:	1821883a 	mov	r16,r3
    fadc:	d8c02417 	ldw	r3,144(sp)
    fae0:	1585883a 	add	r2,r2,r22
    fae4:	45800115 	stw	r22,4(r8)
    fae8:	40c00015 	stw	r3,0(r8)
    faec:	d8801c15 	stw	r2,112(sp)
    faf0:	d9801b15 	stw	r6,108(sp)
    faf4:	00c001c4 	movi	r3,7
    faf8:	19806d16 	blt	r3,r6,fcb0 <___vfiprintf_internal_r+0xf80>
    fafc:	42000204 	addi	r8,r8,8
    fb00:	31000044 	addi	r4,r6,1
    fb04:	300b883a 	mov	r5,r6
    fb08:	003dd006 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    fb0c:	d9002017 	ldw	r4,128(sp)
    fb10:	d9402117 	ldw	r5,132(sp)
    fb14:	d9801a04 	addi	r6,sp,104
    fb18:	d9c02b15 	stw	r7,172(sp)
    fb1c:	db402a15 	stw	r13,168(sp)
    fb20:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fb24:	d9c02b17 	ldw	r7,172(sp)
    fb28:	db402a17 	ldw	r13,168(sp)
    fb2c:	103faa1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fb30:	d9401b17 	ldw	r5,108(sp)
    fb34:	d8801c17 	ldw	r2,112(sp)
    fb38:	d811883a 	mov	r8,sp
    fb3c:	29800044 	addi	r6,r5,1
    fb40:	003fd306 	br	fa90 <__alt_mem_Flash_flash_data+0xf400fa90>
    fb44:	1000401e 	bne	r2,zero,fc48 <___vfiprintf_internal_r+0xf18>
    fb48:	68003b26 	beq	r13,zero,fc38 <___vfiprintf_internal_r+0xf08>
    fb4c:	d9001d04 	addi	r4,sp,116
    fb50:	00800084 	movi	r2,2
    fb54:	d9000015 	stw	r4,0(sp)
    fb58:	d8800115 	stw	r2,4(sp)
    fb5c:	1809883a 	mov	r4,r3
    fb60:	d811883a 	mov	r8,sp
    fb64:	003db406 	br	f238 <__alt_mem_Flash_flash_data+0xf400f238>
    fb68:	1000451e 	bne	r2,zero,fc80 <___vfiprintf_internal_r+0xf50>
    fb6c:	01000044 	movi	r4,1
    fb70:	000b883a 	mov	r5,zero
    fb74:	d811883a 	mov	r8,sp
    fb78:	003db206 	br	f244 <__alt_mem_Flash_flash_data+0xf400f244>
    fb7c:	10803fcc 	andi	r2,r2,255
    fb80:	1000071e 	bne	r2,zero,fba0 <___vfiprintf_internal_r+0xe70>
    fb84:	a880004c 	andi	r2,r21,1
    fb88:	10000526 	beq	r2,zero,fba0 <___vfiprintf_internal_r+0xe70>
    fb8c:	00800c04 	movi	r2,48
    fb90:	d88019c5 	stb	r2,103(sp)
    fb94:	dcc02717 	ldw	r19,156(sp)
    fb98:	dd0019c4 	addi	r20,sp,103
    fb9c:	003d5e06 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    fba0:	dd001a04 	addi	r20,sp,104
    fba4:	003d5c06 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    fba8:	1000971e 	bne	r2,zero,fe08 <___vfiprintf_internal_r+0x10d8>
    fbac:	d8c01d87 	ldb	r3,118(sp)
    fbb0:	18005826 	beq	r3,zero,fd14 <___vfiprintf_internal_r+0xfe4>
    fbb4:	00800044 	movi	r2,1
    fbb8:	d8c01d84 	addi	r3,sp,118
    fbbc:	1009883a 	mov	r4,r2
    fbc0:	d8c00015 	stw	r3,0(sp)
    fbc4:	d8800115 	stw	r2,4(sp)
    fbc8:	d811883a 	mov	r8,sp
    fbcc:	003f3206 	br	f898 <__alt_mem_Flash_flash_data+0xf400f898>
    fbd0:	8023883a 	mov	r17,r16
    fbd4:	003ca706 	br	ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    fbd8:	d9002017 	ldw	r4,128(sp)
    fbdc:	d9402117 	ldw	r5,132(sp)
    fbe0:	d9801a04 	addi	r6,sp,104
    fbe4:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fbe8:	103f7b1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fbec:	d8801c17 	ldw	r2,112(sp)
    fbf0:	d811883a 	mov	r8,sp
    fbf4:	003f9106 	br	fa3c <__alt_mem_Flash_flash_data+0xf400fa3c>
    fbf8:	00800084 	movi	r2,2
    fbfc:	b348b03a 	or	r4,r22,r13
    fc00:	003d2906 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    fc04:	d8802217 	ldw	r2,136(sp)
    fc08:	001b883a 	mov	r13,zero
    fc0c:	15800017 	ldw	r22,0(r2)
    fc10:	10800104 	addi	r2,r2,4
    fc14:	d8802215 	stw	r2,136(sp)
    fc18:	003ea706 	br	f6b8 <__alt_mem_Flash_flash_data+0xf400f6b8>
    fc1c:	d9002017 	ldw	r4,128(sp)
    fc20:	d9402117 	ldw	r5,132(sp)
    fc24:	d9801a04 	addi	r6,sp,104
    fc28:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fc2c:	103f6a1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fc30:	d811883a 	mov	r8,sp
    fc34:	003cff06 	br	f034 <__alt_mem_Flash_flash_data+0xf400f034>
    fc38:	000b883a 	mov	r5,zero
    fc3c:	1809883a 	mov	r4,r3
    fc40:	d811883a 	mov	r8,sp
    fc44:	003d7f06 	br	f244 <__alt_mem_Flash_flash_data+0xf400f244>
    fc48:	d9002017 	ldw	r4,128(sp)
    fc4c:	d9402117 	ldw	r5,132(sp)
    fc50:	d9801a04 	addi	r6,sp,104
    fc54:	da402b15 	stw	r9,172(sp)
    fc58:	db402a15 	stw	r13,168(sp)
    fc5c:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fc60:	da402b17 	ldw	r9,172(sp)
    fc64:	db402a17 	ldw	r13,168(sp)
    fc68:	103f5b1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fc6c:	d9401b17 	ldw	r5,108(sp)
    fc70:	d8801c17 	ldw	r2,112(sp)
    fc74:	d811883a 	mov	r8,sp
    fc78:	29000044 	addi	r4,r5,1
    fc7c:	003d6406 	br	f210 <__alt_mem_Flash_flash_data+0xf400f210>
    fc80:	d9002017 	ldw	r4,128(sp)
    fc84:	d9402117 	ldw	r5,132(sp)
    fc88:	d9801a04 	addi	r6,sp,104
    fc8c:	da402b15 	stw	r9,172(sp)
    fc90:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fc94:	da402b17 	ldw	r9,172(sp)
    fc98:	103f4f1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fc9c:	d9401b17 	ldw	r5,108(sp)
    fca0:	d8801c17 	ldw	r2,112(sp)
    fca4:	d811883a 	mov	r8,sp
    fca8:	29000044 	addi	r4,r5,1
    fcac:	003d6506 	br	f244 <__alt_mem_Flash_flash_data+0xf400f244>
    fcb0:	10009a1e 	bne	r2,zero,ff1c <___vfiprintf_internal_r+0x11ec>
    fcb4:	01000044 	movi	r4,1
    fcb8:	000b883a 	mov	r5,zero
    fcbc:	d811883a 	mov	r8,sp
    fcc0:	003d6206 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    fcc4:	d9002017 	ldw	r4,128(sp)
    fcc8:	d9402117 	ldw	r5,132(sp)
    fccc:	d9801a04 	addi	r6,sp,104
    fcd0:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fcd4:	103f401e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fcd8:	d9001b17 	ldw	r4,108(sp)
    fcdc:	d8801c17 	ldw	r2,112(sp)
    fce0:	d811883a 	mov	r8,sp
    fce4:	21000044 	addi	r4,r4,1
    fce8:	003d7d06 	br	f2e0 <__alt_mem_Flash_flash_data+0xf400f2e0>
    fcec:	05adc83a 	sub	r22,zero,r22
    fcf0:	b004c03a 	cmpne	r2,r22,zero
    fcf4:	035bc83a 	sub	r13,zero,r13
    fcf8:	689bc83a 	sub	r13,r13,r2
    fcfc:	03800b44 	movi	r14,45
    fd00:	db801d85 	stb	r14,118(sp)
    fd04:	4827883a 	mov	r19,r9
    fd08:	00800044 	movi	r2,1
    fd0c:	b348b03a 	or	r4,r22,r13
    fd10:	003ce806 	br	f0b4 <__alt_mem_Flash_flash_data+0xf400f0b4>
    fd14:	000b883a 	mov	r5,zero
    fd18:	01000044 	movi	r4,1
    fd1c:	d811883a 	mov	r8,sp
    fd20:	683d4826 	beq	r13,zero,f244 <__alt_mem_Flash_flash_data+0xf400f244>
    fd24:	00800084 	movi	r2,2
    fd28:	d8c01d04 	addi	r3,sp,116
    fd2c:	d8c00015 	stw	r3,0(sp)
    fd30:	d8800115 	stw	r2,4(sp)
    fd34:	003d4006 	br	f238 <__alt_mem_Flash_flash_data+0xf400f238>
    fd38:	00800084 	movi	r2,2
    fd3c:	003cda06 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    fd40:	a880100c 	andi	r2,r21,64
    fd44:	10004226 	beq	r2,zero,fe50 <___vfiprintf_internal_r+0x1120>
    fd48:	d8802217 	ldw	r2,136(sp)
    fd4c:	001b883a 	mov	r13,zero
    fd50:	1580000b 	ldhu	r22,0(r2)
    fd54:	10800104 	addi	r2,r2,4
    fd58:	d8802215 	stw	r2,136(sp)
    fd5c:	b009883a 	mov	r4,r22
    fd60:	0005883a 	mov	r2,zero
    fd64:	003cd006 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    fd68:	80c00007 	ldb	r3,0(r16)
    fd6c:	8005883a 	mov	r2,r16
    fd70:	003c4d06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    fd74:	a880100c 	andi	r2,r21,64
    fd78:	10004426 	beq	r2,zero,fe8c <___vfiprintf_internal_r+0x115c>
    fd7c:	d8c02217 	ldw	r3,136(sp)
    fd80:	001b883a 	mov	r13,zero
    fd84:	00800044 	movi	r2,1
    fd88:	1d80000b 	ldhu	r22,0(r3)
    fd8c:	18c00104 	addi	r3,r3,4
    fd90:	d8c02215 	stw	r3,136(sp)
    fd94:	b009883a 	mov	r4,r22
    fd98:	003cc306 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    fd9c:	a880040c 	andi	r2,r21,16
    fda0:	1000091e 	bne	r2,zero,fdc8 <___vfiprintf_internal_r+0x1098>
    fda4:	aac0100c 	andi	r11,r21,64
    fda8:	58000726 	beq	r11,zero,fdc8 <___vfiprintf_internal_r+0x1098>
    fdac:	d8c02217 	ldw	r3,136(sp)
    fdb0:	d9002317 	ldw	r4,140(sp)
    fdb4:	18800017 	ldw	r2,0(r3)
    fdb8:	18c00104 	addi	r3,r3,4
    fdbc:	d8c02215 	stw	r3,136(sp)
    fdc0:	1100000d 	sth	r4,0(r2)
    fdc4:	003c0e06 	br	ee00 <__alt_mem_Flash_flash_data+0xf400ee00>
    fdc8:	d8c02217 	ldw	r3,136(sp)
    fdcc:	d9002317 	ldw	r4,140(sp)
    fdd0:	18800017 	ldw	r2,0(r3)
    fdd4:	18c00104 	addi	r3,r3,4
    fdd8:	d8c02215 	stw	r3,136(sp)
    fddc:	11000015 	stw	r4,0(r2)
    fde0:	003c0706 	br	ee00 <__alt_mem_Flash_flash_data+0xf400ee00>
    fde4:	a880100c 	andi	r2,r21,64
    fde8:	10002126 	beq	r2,zero,fe70 <___vfiprintf_internal_r+0x1140>
    fdec:	1d80000f 	ldh	r22,0(r3)
    fdf0:	d8c02217 	ldw	r3,136(sp)
    fdf4:	b01bd7fa 	srai	r13,r22,31
    fdf8:	18c00104 	addi	r3,r3,4
    fdfc:	d8c02215 	stw	r3,136(sp)
    fe00:	6805883a 	mov	r2,r13
    fe04:	003dc406 	br	f518 <__alt_mem_Flash_flash_data+0xf400f518>
    fe08:	d9002017 	ldw	r4,128(sp)
    fe0c:	d9402117 	ldw	r5,132(sp)
    fe10:	d9801a04 	addi	r6,sp,104
    fe14:	da402b15 	stw	r9,172(sp)
    fe18:	db402a15 	stw	r13,168(sp)
    fe1c:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fe20:	da402b17 	ldw	r9,172(sp)
    fe24:	db402a17 	ldw	r13,168(sp)
    fe28:	103eeb1e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fe2c:	d9401b17 	ldw	r5,108(sp)
    fe30:	d8801c17 	ldw	r2,112(sp)
    fe34:	d811883a 	mov	r8,sp
    fe38:	29000044 	addi	r4,r5,1
    fe3c:	003e8b06 	br	f86c <__alt_mem_Flash_flash_data+0xf400f86c>
    fe40:	9023883a 	mov	r17,r18
    fe44:	003d5a06 	br	f3b0 <__alt_mem_Flash_flash_data+0xf400f3b0>
    fe48:	4827883a 	mov	r19,r9
    fe4c:	003e3506 	br	f724 <__alt_mem_Flash_flash_data+0xf400f724>
    fe50:	d8c02217 	ldw	r3,136(sp)
    fe54:	001b883a 	mov	r13,zero
    fe58:	0005883a 	mov	r2,zero
    fe5c:	1d800017 	ldw	r22,0(r3)
    fe60:	18c00104 	addi	r3,r3,4
    fe64:	d8c02215 	stw	r3,136(sp)
    fe68:	b009883a 	mov	r4,r22
    fe6c:	003c8e06 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    fe70:	1d800017 	ldw	r22,0(r3)
    fe74:	d9002217 	ldw	r4,136(sp)
    fe78:	b01bd7fa 	srai	r13,r22,31
    fe7c:	21000104 	addi	r4,r4,4
    fe80:	d9002215 	stw	r4,136(sp)
    fe84:	6805883a 	mov	r2,r13
    fe88:	003da306 	br	f518 <__alt_mem_Flash_flash_data+0xf400f518>
    fe8c:	d9002217 	ldw	r4,136(sp)
    fe90:	001b883a 	mov	r13,zero
    fe94:	00800044 	movi	r2,1
    fe98:	25800017 	ldw	r22,0(r4)
    fe9c:	21000104 	addi	r4,r4,4
    fea0:	d9002215 	stw	r4,136(sp)
    fea4:	b009883a 	mov	r4,r22
    fea8:	003c7f06 	br	f0a8 <__alt_mem_Flash_flash_data+0xf400f0a8>
    feac:	00c000b4 	movhi	r3,2
    feb0:	18d72804 	addi	r3,r3,23712
    feb4:	d8c02415 	stw	r3,144(sp)
    feb8:	003cff06 	br	f2b8 <__alt_mem_Flash_flash_data+0xf400f2b8>
    febc:	d8801c17 	ldw	r2,112(sp)
    fec0:	dd402117 	ldw	r21,132(sp)
    fec4:	103ec526 	beq	r2,zero,f9dc <__alt_mem_Flash_flash_data+0xf400f9dc>
    fec8:	d9002017 	ldw	r4,128(sp)
    fecc:	a80b883a 	mov	r5,r21
    fed0:	d9801a04 	addi	r6,sp,104
    fed4:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    fed8:	003ec006 	br	f9dc <__alt_mem_Flash_flash_data+0xf400f9dc>
    fedc:	80800044 	addi	r2,r16,1
    fee0:	ad400814 	ori	r21,r21,32
    fee4:	80c00047 	ldb	r3,1(r16)
    fee8:	003bef06 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    feec:	04a5c83a 	sub	r18,zero,r18
    fef0:	8005883a 	mov	r2,r16
    fef4:	d8c02215 	stw	r3,136(sp)
    fef8:	003d5306 	br	f448 <__alt_mem_Flash_flash_data+0xf400f448>
    fefc:	da002a15 	stw	r8,168(sp)
    ff00:	00047dc0 	call	47dc <strlen>
    ff04:	1027883a 	mov	r19,r2
    ff08:	db801d83 	ldbu	r14,118(sp)
    ff0c:	dd802215 	stw	r22,136(sp)
    ff10:	0013883a 	mov	r9,zero
    ff14:	da002a17 	ldw	r8,168(sp)
    ff18:	003c7f06 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    ff1c:	d9002017 	ldw	r4,128(sp)
    ff20:	d9402117 	ldw	r5,132(sp)
    ff24:	d9801a04 	addi	r6,sp,104
    ff28:	da402b15 	stw	r9,172(sp)
    ff2c:	000ec1c0 	call	ec1c <__sprint_r.part.0>
    ff30:	da402b17 	ldw	r9,172(sp)
    ff34:	103ea81e 	bne	r2,zero,f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    ff38:	d9401b17 	ldw	r5,108(sp)
    ff3c:	d8801c17 	ldw	r2,112(sp)
    ff40:	d811883a 	mov	r8,sp
    ff44:	29000044 	addi	r4,r5,1
    ff48:	003cc006 	br	f24c <__alt_mem_Flash_flash_data+0xf400f24c>
    ff4c:	d9401b17 	ldw	r5,108(sp)
    ff50:	010000b4 	movhi	r4,2
    ff54:	21172c04 	addi	r4,r4,23728
    ff58:	d9002415 	stw	r4,144(sp)
    ff5c:	29400044 	addi	r5,r5,1
    ff60:	003c9f06 	br	f1e0 <__alt_mem_Flash_flash_data+0xf400f1e0>
    ff64:	00800184 	movi	r2,6
    ff68:	1240012e 	bgeu	r2,r9,ff70 <___vfiprintf_internal_r+0x1240>
    ff6c:	1013883a 	mov	r9,r2
    ff70:	4827883a 	mov	r19,r9
    ff74:	4823883a 	mov	r17,r9
    ff78:	48001116 	blt	r9,zero,ffc0 <___vfiprintf_internal_r+0x1290>
    ff7c:	050000b4 	movhi	r20,2
    ff80:	dd802215 	stw	r22,136(sp)
    ff84:	a516bc04 	addi	r20,r20,23280
    ff88:	003db106 	br	f650 <__alt_mem_Flash_flash_data+0xf400f650>
    ff8c:	d9401b17 	ldw	r5,108(sp)
    ff90:	010000b4 	movhi	r4,2
    ff94:	21172c04 	addi	r4,r4,23728
    ff98:	d9002415 	stw	r4,144(sp)
    ff9c:	29400044 	addi	r5,r5,1
    ffa0:	003cf906 	br	f388 <__alt_mem_Flash_flash_data+0xf400f388>
    ffa4:	4827883a 	mov	r19,r9
    ffa8:	db801d83 	ldbu	r14,118(sp)
    ffac:	dd802215 	stw	r22,136(sp)
    ffb0:	0013883a 	mov	r9,zero
    ffb4:	003c5806 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    ffb8:	200d883a 	mov	r6,r4
    ffbc:	003ec706 	br	fadc <__alt_mem_Flash_flash_data+0xf400fadc>
    ffc0:	0023883a 	mov	r17,zero
    ffc4:	003fed06 	br	ff7c <__alt_mem_Flash_flash_data+0xf400ff7c>
    ffc8:	d9002217 	ldw	r4,136(sp)
    ffcc:	22400017 	ldw	r9,0(r4)
    ffd0:	20c00104 	addi	r3,r4,4
    ffd4:	d8c02215 	stw	r3,136(sp)
    ffd8:	483fc20e 	bge	r9,zero,fee4 <__alt_mem_Flash_flash_data+0xf400fee4>
    ffdc:	027fffc4 	movi	r9,-1
    ffe0:	80c00047 	ldb	r3,1(r16)
    ffe4:	003bb006 	br	eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
    ffe8:	8c80010e 	bge	r17,r18,fff0 <___vfiprintf_internal_r+0x12c0>
    ffec:	9023883a 	mov	r17,r18
    fff0:	d8802317 	ldw	r2,140(sp)
    fff4:	1445883a 	add	r2,r2,r17
    fff8:	d8802315 	stw	r2,140(sp)
    fffc:	003cef06 	br	f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>

00010000 <__vfiprintf_internal>:
   10000:	2007883a 	mov	r3,r4
   10004:	010000b4 	movhi	r4,2
   10008:	211fc904 	addi	r4,r4,32548
   1000c:	21000017 	ldw	r4,0(r4)
   10010:	2805883a 	mov	r2,r5
   10014:	300f883a 	mov	r7,r6
   10018:	180b883a 	mov	r5,r3
   1001c:	100d883a 	mov	r6,r2
   10020:	000ed301 	jmpi	ed30 <___vfiprintf_internal_r>

00010024 <__sbprintf>:
   10024:	2880030b 	ldhu	r2,12(r5)
   10028:	2ac01917 	ldw	r11,100(r5)
   1002c:	2a80038b 	ldhu	r10,14(r5)
   10030:	2a400717 	ldw	r9,28(r5)
   10034:	2a000917 	ldw	r8,36(r5)
   10038:	defee204 	addi	sp,sp,-1144
   1003c:	00c10004 	movi	r3,1024
   10040:	dc011a15 	stw	r16,1128(sp)
   10044:	10bfff4c 	andi	r2,r2,65533
   10048:	2821883a 	mov	r16,r5
   1004c:	d8cb883a 	add	r5,sp,r3
   10050:	dc811c15 	stw	r18,1136(sp)
   10054:	dc411b15 	stw	r17,1132(sp)
   10058:	dfc11d15 	stw	ra,1140(sp)
   1005c:	2025883a 	mov	r18,r4
   10060:	d881030d 	sth	r2,1036(sp)
   10064:	dac11915 	stw	r11,1124(sp)
   10068:	da81038d 	sth	r10,1038(sp)
   1006c:	da410715 	stw	r9,1052(sp)
   10070:	da010915 	stw	r8,1060(sp)
   10074:	dec10015 	stw	sp,1024(sp)
   10078:	dec10415 	stw	sp,1040(sp)
   1007c:	d8c10215 	stw	r3,1032(sp)
   10080:	d8c10515 	stw	r3,1044(sp)
   10084:	d8010615 	stw	zero,1048(sp)
   10088:	000ed300 	call	ed30 <___vfiprintf_internal_r>
   1008c:	1023883a 	mov	r17,r2
   10090:	10000416 	blt	r2,zero,100a4 <__sbprintf+0x80>
   10094:	9009883a 	mov	r4,r18
   10098:	d9410004 	addi	r5,sp,1024
   1009c:	000a4b80 	call	a4b8 <_fflush_r>
   100a0:	10000d1e 	bne	r2,zero,100d8 <__sbprintf+0xb4>
   100a4:	d8c1030b 	ldhu	r3,1036(sp)
   100a8:	18c0100c 	andi	r3,r3,64
   100ac:	18000326 	beq	r3,zero,100bc <__sbprintf+0x98>
   100b0:	8080030b 	ldhu	r2,12(r16)
   100b4:	10801014 	ori	r2,r2,64
   100b8:	8080030d 	sth	r2,12(r16)
   100bc:	8805883a 	mov	r2,r17
   100c0:	dfc11d17 	ldw	ra,1140(sp)
   100c4:	dc811c17 	ldw	r18,1136(sp)
   100c8:	dc411b17 	ldw	r17,1132(sp)
   100cc:	dc011a17 	ldw	r16,1128(sp)
   100d0:	dec11e04 	addi	sp,sp,1144
   100d4:	f800283a 	ret
   100d8:	047fffc4 	movi	r17,-1
   100dc:	003ff106 	br	100a4 <__alt_mem_Flash_flash_data+0xf40100a4>

000100e0 <__swbuf_r>:
   100e0:	defffc04 	addi	sp,sp,-16
   100e4:	dc800215 	stw	r18,8(sp)
   100e8:	dc400115 	stw	r17,4(sp)
   100ec:	dc000015 	stw	r16,0(sp)
   100f0:	dfc00315 	stw	ra,12(sp)
   100f4:	2025883a 	mov	r18,r4
   100f8:	2823883a 	mov	r17,r5
   100fc:	3021883a 	mov	r16,r6
   10100:	20000226 	beq	r4,zero,1010c <__swbuf_r+0x2c>
   10104:	20800e17 	ldw	r2,56(r4)
   10108:	10004126 	beq	r2,zero,10210 <__swbuf_r+0x130>
   1010c:	80c00617 	ldw	r3,24(r16)
   10110:	8180030b 	ldhu	r6,12(r16)
   10114:	80c00215 	stw	r3,8(r16)
   10118:	30c0020c 	andi	r3,r6,8
   1011c:	18003526 	beq	r3,zero,101f4 <__swbuf_r+0x114>
   10120:	80c00417 	ldw	r3,16(r16)
   10124:	18003326 	beq	r3,zero,101f4 <__swbuf_r+0x114>
   10128:	3088000c 	andi	r2,r6,8192
   1012c:	8c403fcc 	andi	r17,r17,255
   10130:	10001726 	beq	r2,zero,10190 <__swbuf_r+0xb0>
   10134:	80800017 	ldw	r2,0(r16)
   10138:	81000517 	ldw	r4,20(r16)
   1013c:	10c7c83a 	sub	r3,r2,r3
   10140:	19001d0e 	bge	r3,r4,101b8 <__swbuf_r+0xd8>
   10144:	18c00044 	addi	r3,r3,1
   10148:	81400217 	ldw	r5,8(r16)
   1014c:	11000044 	addi	r4,r2,1
   10150:	81000015 	stw	r4,0(r16)
   10154:	297fffc4 	addi	r5,r5,-1
   10158:	81400215 	stw	r5,8(r16)
   1015c:	14400005 	stb	r17,0(r2)
   10160:	80800517 	ldw	r2,20(r16)
   10164:	10c01d26 	beq	r2,r3,101dc <__swbuf_r+0xfc>
   10168:	8080030b 	ldhu	r2,12(r16)
   1016c:	1080004c 	andi	r2,r2,1
   10170:	1000181e 	bne	r2,zero,101d4 <__swbuf_r+0xf4>
   10174:	8805883a 	mov	r2,r17
   10178:	dfc00317 	ldw	ra,12(sp)
   1017c:	dc800217 	ldw	r18,8(sp)
   10180:	dc400117 	ldw	r17,4(sp)
   10184:	dc000017 	ldw	r16,0(sp)
   10188:	dec00404 	addi	sp,sp,16
   1018c:	f800283a 	ret
   10190:	81001917 	ldw	r4,100(r16)
   10194:	00b7ffc4 	movi	r2,-8193
   10198:	31880014 	ori	r6,r6,8192
   1019c:	2084703a 	and	r2,r4,r2
   101a0:	80801915 	stw	r2,100(r16)
   101a4:	80800017 	ldw	r2,0(r16)
   101a8:	81000517 	ldw	r4,20(r16)
   101ac:	8180030d 	sth	r6,12(r16)
   101b0:	10c7c83a 	sub	r3,r2,r3
   101b4:	193fe316 	blt	r3,r4,10144 <__alt_mem_Flash_flash_data+0xf4010144>
   101b8:	9009883a 	mov	r4,r18
   101bc:	800b883a 	mov	r5,r16
   101c0:	000a4b80 	call	a4b8 <_fflush_r>
   101c4:	1000091e 	bne	r2,zero,101ec <__swbuf_r+0x10c>
   101c8:	80800017 	ldw	r2,0(r16)
   101cc:	00c00044 	movi	r3,1
   101d0:	003fdd06 	br	10148 <__alt_mem_Flash_flash_data+0xf4010148>
   101d4:	00800284 	movi	r2,10
   101d8:	88bfe61e 	bne	r17,r2,10174 <__alt_mem_Flash_flash_data+0xf4010174>
   101dc:	9009883a 	mov	r4,r18
   101e0:	800b883a 	mov	r5,r16
   101e4:	000a4b80 	call	a4b8 <_fflush_r>
   101e8:	103fe226 	beq	r2,zero,10174 <__alt_mem_Flash_flash_data+0xf4010174>
   101ec:	00bfffc4 	movi	r2,-1
   101f0:	003fe106 	br	10178 <__alt_mem_Flash_flash_data+0xf4010178>
   101f4:	9009883a 	mov	r4,r18
   101f8:	800b883a 	mov	r5,r16
   101fc:	00088340 	call	8834 <__swsetup_r>
   10200:	103ffa1e 	bne	r2,zero,101ec <__alt_mem_Flash_flash_data+0xf40101ec>
   10204:	8180030b 	ldhu	r6,12(r16)
   10208:	80c00417 	ldw	r3,16(r16)
   1020c:	003fc606 	br	10128 <__alt_mem_Flash_flash_data+0xf4010128>
   10210:	000a8940 	call	a894 <__sinit>
   10214:	003fbd06 	br	1010c <__alt_mem_Flash_flash_data+0xf401010c>

00010218 <__swbuf>:
   10218:	00c000b4 	movhi	r3,2
   1021c:	18dfc904 	addi	r3,r3,32548
   10220:	2005883a 	mov	r2,r4
   10224:	19000017 	ldw	r4,0(r3)
   10228:	280d883a 	mov	r6,r5
   1022c:	100b883a 	mov	r5,r2
   10230:	00100e01 	jmpi	100e0 <__swbuf_r>

00010234 <_write_r>:
   10234:	defffd04 	addi	sp,sp,-12
   10238:	dc000015 	stw	r16,0(sp)
   1023c:	040000f4 	movhi	r16,3
   10240:	dc400115 	stw	r17,4(sp)
   10244:	8427ef04 	addi	r16,r16,-24644
   10248:	2023883a 	mov	r17,r4
   1024c:	2809883a 	mov	r4,r5
   10250:	300b883a 	mov	r5,r6
   10254:	380d883a 	mov	r6,r7
   10258:	dfc00215 	stw	ra,8(sp)
   1025c:	80000015 	stw	zero,0(r16)
   10260:	001451c0 	call	1451c <write>
   10264:	00ffffc4 	movi	r3,-1
   10268:	10c00526 	beq	r2,r3,10280 <_write_r+0x4c>
   1026c:	dfc00217 	ldw	ra,8(sp)
   10270:	dc400117 	ldw	r17,4(sp)
   10274:	dc000017 	ldw	r16,0(sp)
   10278:	dec00304 	addi	sp,sp,12
   1027c:	f800283a 	ret
   10280:	80c00017 	ldw	r3,0(r16)
   10284:	183ff926 	beq	r3,zero,1026c <__alt_mem_Flash_flash_data+0xf401026c>
   10288:	88c00015 	stw	r3,0(r17)
   1028c:	003ff706 	br	1026c <__alt_mem_Flash_flash_data+0xf401026c>

00010290 <_close_r>:
   10290:	defffd04 	addi	sp,sp,-12
   10294:	dc000015 	stw	r16,0(sp)
   10298:	040000f4 	movhi	r16,3
   1029c:	dc400115 	stw	r17,4(sp)
   102a0:	8427ef04 	addi	r16,r16,-24644
   102a4:	2023883a 	mov	r17,r4
   102a8:	2809883a 	mov	r4,r5
   102ac:	dfc00215 	stw	ra,8(sp)
   102b0:	80000015 	stw	zero,0(r16)
   102b4:	0013ca40 	call	13ca4 <close>
   102b8:	00ffffc4 	movi	r3,-1
   102bc:	10c00526 	beq	r2,r3,102d4 <_close_r+0x44>
   102c0:	dfc00217 	ldw	ra,8(sp)
   102c4:	dc400117 	ldw	r17,4(sp)
   102c8:	dc000017 	ldw	r16,0(sp)
   102cc:	dec00304 	addi	sp,sp,12
   102d0:	f800283a 	ret
   102d4:	80c00017 	ldw	r3,0(r16)
   102d8:	183ff926 	beq	r3,zero,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   102dc:	88c00015 	stw	r3,0(r17)
   102e0:	003ff706 	br	102c0 <__alt_mem_Flash_flash_data+0xf40102c0>

000102e4 <_calloc_r>:
   102e4:	298b383a 	mul	r5,r5,r6
   102e8:	defffe04 	addi	sp,sp,-8
   102ec:	dc000015 	stw	r16,0(sp)
   102f0:	dfc00115 	stw	ra,4(sp)
   102f4:	000b5d80 	call	b5d8 <_malloc_r>
   102f8:	1021883a 	mov	r16,r2
   102fc:	10002826 	beq	r2,zero,103a0 <_calloc_r+0xbc>
   10300:	11bfff17 	ldw	r6,-4(r2)
   10304:	00bfff04 	movi	r2,-4
   10308:	00c00904 	movi	r3,36
   1030c:	308c703a 	and	r6,r6,r2
   10310:	308d883a 	add	r6,r6,r2
   10314:	19801436 	bltu	r3,r6,10368 <_calloc_r+0x84>
   10318:	008004c4 	movi	r2,19
   1031c:	11800936 	bltu	r2,r6,10344 <_calloc_r+0x60>
   10320:	8005883a 	mov	r2,r16
   10324:	10000015 	stw	zero,0(r2)
   10328:	10000115 	stw	zero,4(r2)
   1032c:	10000215 	stw	zero,8(r2)
   10330:	8005883a 	mov	r2,r16
   10334:	dfc00117 	ldw	ra,4(sp)
   10338:	dc000017 	ldw	r16,0(sp)
   1033c:	dec00204 	addi	sp,sp,8
   10340:	f800283a 	ret
   10344:	80000015 	stw	zero,0(r16)
   10348:	80000115 	stw	zero,4(r16)
   1034c:	008006c4 	movi	r2,27
   10350:	11800d2e 	bgeu	r2,r6,10388 <_calloc_r+0xa4>
   10354:	80000215 	stw	zero,8(r16)
   10358:	80000315 	stw	zero,12(r16)
   1035c:	30c00c26 	beq	r6,r3,10390 <_calloc_r+0xac>
   10360:	80800404 	addi	r2,r16,16
   10364:	003fef06 	br	10324 <__alt_mem_Flash_flash_data+0xf4010324>
   10368:	8009883a 	mov	r4,r16
   1036c:	000b883a 	mov	r5,zero
   10370:	00043980 	call	4398 <memset>
   10374:	8005883a 	mov	r2,r16
   10378:	dfc00117 	ldw	ra,4(sp)
   1037c:	dc000017 	ldw	r16,0(sp)
   10380:	dec00204 	addi	sp,sp,8
   10384:	f800283a 	ret
   10388:	80800204 	addi	r2,r16,8
   1038c:	003fe506 	br	10324 <__alt_mem_Flash_flash_data+0xf4010324>
   10390:	80000415 	stw	zero,16(r16)
   10394:	80800604 	addi	r2,r16,24
   10398:	80000515 	stw	zero,20(r16)
   1039c:	003fe106 	br	10324 <__alt_mem_Flash_flash_data+0xf4010324>
   103a0:	0005883a 	mov	r2,zero
   103a4:	003fe306 	br	10334 <__alt_mem_Flash_flash_data+0xf4010334>

000103a8 <_fclose_r>:
   103a8:	28003926 	beq	r5,zero,10490 <_fclose_r+0xe8>
   103ac:	defffc04 	addi	sp,sp,-16
   103b0:	dc400115 	stw	r17,4(sp)
   103b4:	dc000015 	stw	r16,0(sp)
   103b8:	dfc00315 	stw	ra,12(sp)
   103bc:	dc800215 	stw	r18,8(sp)
   103c0:	2023883a 	mov	r17,r4
   103c4:	2821883a 	mov	r16,r5
   103c8:	20000226 	beq	r4,zero,103d4 <_fclose_r+0x2c>
   103cc:	20800e17 	ldw	r2,56(r4)
   103d0:	10002726 	beq	r2,zero,10470 <_fclose_r+0xc8>
   103d4:	8080030f 	ldh	r2,12(r16)
   103d8:	1000071e 	bne	r2,zero,103f8 <_fclose_r+0x50>
   103dc:	0005883a 	mov	r2,zero
   103e0:	dfc00317 	ldw	ra,12(sp)
   103e4:	dc800217 	ldw	r18,8(sp)
   103e8:	dc400117 	ldw	r17,4(sp)
   103ec:	dc000017 	ldw	r16,0(sp)
   103f0:	dec00404 	addi	sp,sp,16
   103f4:	f800283a 	ret
   103f8:	8809883a 	mov	r4,r17
   103fc:	800b883a 	mov	r5,r16
   10400:	000a2b00 	call	a2b0 <__sflush_r>
   10404:	1025883a 	mov	r18,r2
   10408:	80800b17 	ldw	r2,44(r16)
   1040c:	10000426 	beq	r2,zero,10420 <_fclose_r+0x78>
   10410:	81400717 	ldw	r5,28(r16)
   10414:	8809883a 	mov	r4,r17
   10418:	103ee83a 	callr	r2
   1041c:	10001616 	blt	r2,zero,10478 <_fclose_r+0xd0>
   10420:	8080030b 	ldhu	r2,12(r16)
   10424:	1080200c 	andi	r2,r2,128
   10428:	1000151e 	bne	r2,zero,10480 <_fclose_r+0xd8>
   1042c:	81400c17 	ldw	r5,48(r16)
   10430:	28000526 	beq	r5,zero,10448 <_fclose_r+0xa0>
   10434:	80801004 	addi	r2,r16,64
   10438:	28800226 	beq	r5,r2,10444 <_fclose_r+0x9c>
   1043c:	8809883a 	mov	r4,r17
   10440:	000aa080 	call	aa08 <_free_r>
   10444:	80000c15 	stw	zero,48(r16)
   10448:	81401117 	ldw	r5,68(r16)
   1044c:	28000326 	beq	r5,zero,1045c <_fclose_r+0xb4>
   10450:	8809883a 	mov	r4,r17
   10454:	000aa080 	call	aa08 <_free_r>
   10458:	80001115 	stw	zero,68(r16)
   1045c:	000a8a40 	call	a8a4 <__sfp_lock_acquire>
   10460:	8000030d 	sth	zero,12(r16)
   10464:	000a8a80 	call	a8a8 <__sfp_lock_release>
   10468:	9005883a 	mov	r2,r18
   1046c:	003fdc06 	br	103e0 <__alt_mem_Flash_flash_data+0xf40103e0>
   10470:	000a8940 	call	a894 <__sinit>
   10474:	003fd706 	br	103d4 <__alt_mem_Flash_flash_data+0xf40103d4>
   10478:	04bfffc4 	movi	r18,-1
   1047c:	003fe806 	br	10420 <__alt_mem_Flash_flash_data+0xf4010420>
   10480:	81400417 	ldw	r5,16(r16)
   10484:	8809883a 	mov	r4,r17
   10488:	000aa080 	call	aa08 <_free_r>
   1048c:	003fe706 	br	1042c <__alt_mem_Flash_flash_data+0xf401042c>
   10490:	0005883a 	mov	r2,zero
   10494:	f800283a 	ret

00010498 <fclose>:
   10498:	008000b4 	movhi	r2,2
   1049c:	109fc904 	addi	r2,r2,32548
   104a0:	200b883a 	mov	r5,r4
   104a4:	11000017 	ldw	r4,0(r2)
   104a8:	00103a81 	jmpi	103a8 <_fclose_r>

000104ac <_fputwc_r>:
   104ac:	3080030b 	ldhu	r2,12(r6)
   104b0:	defff804 	addi	sp,sp,-32
   104b4:	dcc00415 	stw	r19,16(sp)
   104b8:	dc800315 	stw	r18,12(sp)
   104bc:	dc000115 	stw	r16,4(sp)
   104c0:	dfc00715 	stw	ra,28(sp)
   104c4:	dd400615 	stw	r21,24(sp)
   104c8:	dd000515 	stw	r20,20(sp)
   104cc:	dc400215 	stw	r17,8(sp)
   104d0:	10c8000c 	andi	r3,r2,8192
   104d4:	3021883a 	mov	r16,r6
   104d8:	2027883a 	mov	r19,r4
   104dc:	2825883a 	mov	r18,r5
   104e0:	1800051e 	bne	r3,zero,104f8 <_fputwc_r+0x4c>
   104e4:	30c01917 	ldw	r3,100(r6)
   104e8:	10880014 	ori	r2,r2,8192
   104ec:	3080030d 	sth	r2,12(r6)
   104f0:	18880014 	ori	r2,r3,8192
   104f4:	30801915 	stw	r2,100(r6)
   104f8:	000b3c80 	call	b3c8 <__locale_mb_cur_max>
   104fc:	00c00044 	movi	r3,1
   10500:	10c03e26 	beq	r2,r3,105fc <_fputwc_r+0x150>
   10504:	9809883a 	mov	r4,r19
   10508:	d80b883a 	mov	r5,sp
   1050c:	900d883a 	mov	r6,r18
   10510:	81c01704 	addi	r7,r16,92
   10514:	00107f00 	call	107f0 <_wcrtomb_r>
   10518:	1029883a 	mov	r20,r2
   1051c:	00bfffc4 	movi	r2,-1
   10520:	a0802026 	beq	r20,r2,105a4 <_fputwc_r+0xf8>
   10524:	d9400003 	ldbu	r5,0(sp)
   10528:	a0001c26 	beq	r20,zero,1059c <_fputwc_r+0xf0>
   1052c:	0023883a 	mov	r17,zero
   10530:	05400284 	movi	r21,10
   10534:	00000906 	br	1055c <_fputwc_r+0xb0>
   10538:	80800017 	ldw	r2,0(r16)
   1053c:	11400005 	stb	r5,0(r2)
   10540:	80c00017 	ldw	r3,0(r16)
   10544:	18c00044 	addi	r3,r3,1
   10548:	80c00015 	stw	r3,0(r16)
   1054c:	8c400044 	addi	r17,r17,1
   10550:	dc45883a 	add	r2,sp,r17
   10554:	8d00112e 	bgeu	r17,r20,1059c <_fputwc_r+0xf0>
   10558:	11400003 	ldbu	r5,0(r2)
   1055c:	80c00217 	ldw	r3,8(r16)
   10560:	18ffffc4 	addi	r3,r3,-1
   10564:	80c00215 	stw	r3,8(r16)
   10568:	183ff30e 	bge	r3,zero,10538 <__alt_mem_Flash_flash_data+0xf4010538>
   1056c:	80800617 	ldw	r2,24(r16)
   10570:	18801916 	blt	r3,r2,105d8 <_fputwc_r+0x12c>
   10574:	80800017 	ldw	r2,0(r16)
   10578:	11400005 	stb	r5,0(r2)
   1057c:	80800017 	ldw	r2,0(r16)
   10580:	10c00003 	ldbu	r3,0(r2)
   10584:	10800044 	addi	r2,r2,1
   10588:	1d402326 	beq	r3,r21,10618 <_fputwc_r+0x16c>
   1058c:	80800015 	stw	r2,0(r16)
   10590:	8c400044 	addi	r17,r17,1
   10594:	dc45883a 	add	r2,sp,r17
   10598:	8d3fef36 	bltu	r17,r20,10558 <__alt_mem_Flash_flash_data+0xf4010558>
   1059c:	9005883a 	mov	r2,r18
   105a0:	00000406 	br	105b4 <_fputwc_r+0x108>
   105a4:	80c0030b 	ldhu	r3,12(r16)
   105a8:	a005883a 	mov	r2,r20
   105ac:	18c01014 	ori	r3,r3,64
   105b0:	80c0030d 	sth	r3,12(r16)
   105b4:	dfc00717 	ldw	ra,28(sp)
   105b8:	dd400617 	ldw	r21,24(sp)
   105bc:	dd000517 	ldw	r20,20(sp)
   105c0:	dcc00417 	ldw	r19,16(sp)
   105c4:	dc800317 	ldw	r18,12(sp)
   105c8:	dc400217 	ldw	r17,8(sp)
   105cc:	dc000117 	ldw	r16,4(sp)
   105d0:	dec00804 	addi	sp,sp,32
   105d4:	f800283a 	ret
   105d8:	9809883a 	mov	r4,r19
   105dc:	29403fcc 	andi	r5,r5,255
   105e0:	800d883a 	mov	r6,r16
   105e4:	00100e00 	call	100e0 <__swbuf_r>
   105e8:	10bfffe0 	cmpeqi	r2,r2,-1
   105ec:	10803fcc 	andi	r2,r2,255
   105f0:	103fd626 	beq	r2,zero,1054c <__alt_mem_Flash_flash_data+0xf401054c>
   105f4:	00bfffc4 	movi	r2,-1
   105f8:	003fee06 	br	105b4 <__alt_mem_Flash_flash_data+0xf40105b4>
   105fc:	90ffffc4 	addi	r3,r18,-1
   10600:	01003f84 	movi	r4,254
   10604:	20ffbf36 	bltu	r4,r3,10504 <__alt_mem_Flash_flash_data+0xf4010504>
   10608:	900b883a 	mov	r5,r18
   1060c:	dc800005 	stb	r18,0(sp)
   10610:	1029883a 	mov	r20,r2
   10614:	003fc506 	br	1052c <__alt_mem_Flash_flash_data+0xf401052c>
   10618:	9809883a 	mov	r4,r19
   1061c:	a80b883a 	mov	r5,r21
   10620:	800d883a 	mov	r6,r16
   10624:	00100e00 	call	100e0 <__swbuf_r>
   10628:	10bfffe0 	cmpeqi	r2,r2,-1
   1062c:	003fef06 	br	105ec <__alt_mem_Flash_flash_data+0xf40105ec>

00010630 <fputwc>:
   10630:	008000b4 	movhi	r2,2
   10634:	defffc04 	addi	sp,sp,-16
   10638:	109fc904 	addi	r2,r2,32548
   1063c:	dc000115 	stw	r16,4(sp)
   10640:	14000017 	ldw	r16,0(r2)
   10644:	dc400215 	stw	r17,8(sp)
   10648:	dfc00315 	stw	ra,12(sp)
   1064c:	2023883a 	mov	r17,r4
   10650:	280d883a 	mov	r6,r5
   10654:	80000626 	beq	r16,zero,10670 <fputwc+0x40>
   10658:	80800e17 	ldw	r2,56(r16)
   1065c:	1000041e 	bne	r2,zero,10670 <fputwc+0x40>
   10660:	8009883a 	mov	r4,r16
   10664:	d9400015 	stw	r5,0(sp)
   10668:	000a8940 	call	a894 <__sinit>
   1066c:	d9800017 	ldw	r6,0(sp)
   10670:	8009883a 	mov	r4,r16
   10674:	880b883a 	mov	r5,r17
   10678:	dfc00317 	ldw	ra,12(sp)
   1067c:	dc400217 	ldw	r17,8(sp)
   10680:	dc000117 	ldw	r16,4(sp)
   10684:	dec00404 	addi	sp,sp,16
   10688:	00104ac1 	jmpi	104ac <_fputwc_r>

0001068c <_fstat_r>:
   1068c:	defffd04 	addi	sp,sp,-12
   10690:	dc000015 	stw	r16,0(sp)
   10694:	040000f4 	movhi	r16,3
   10698:	dc400115 	stw	r17,4(sp)
   1069c:	8427ef04 	addi	r16,r16,-24644
   106a0:	2023883a 	mov	r17,r4
   106a4:	2809883a 	mov	r4,r5
   106a8:	300b883a 	mov	r5,r6
   106ac:	dfc00215 	stw	ra,8(sp)
   106b0:	80000015 	stw	zero,0(r16)
   106b4:	0013df00 	call	13df0 <fstat>
   106b8:	00ffffc4 	movi	r3,-1
   106bc:	10c00526 	beq	r2,r3,106d4 <_fstat_r+0x48>
   106c0:	dfc00217 	ldw	ra,8(sp)
   106c4:	dc400117 	ldw	r17,4(sp)
   106c8:	dc000017 	ldw	r16,0(sp)
   106cc:	dec00304 	addi	sp,sp,12
   106d0:	f800283a 	ret
   106d4:	80c00017 	ldw	r3,0(r16)
   106d8:	183ff926 	beq	r3,zero,106c0 <__alt_mem_Flash_flash_data+0xf40106c0>
   106dc:	88c00015 	stw	r3,0(r17)
   106e0:	003ff706 	br	106c0 <__alt_mem_Flash_flash_data+0xf40106c0>

000106e4 <_isatty_r>:
   106e4:	defffd04 	addi	sp,sp,-12
   106e8:	dc000015 	stw	r16,0(sp)
   106ec:	040000f4 	movhi	r16,3
   106f0:	dc400115 	stw	r17,4(sp)
   106f4:	8427ef04 	addi	r16,r16,-24644
   106f8:	2023883a 	mov	r17,r4
   106fc:	2809883a 	mov	r4,r5
   10700:	dfc00215 	stw	ra,8(sp)
   10704:	80000015 	stw	zero,0(r16)
   10708:	0013ef00 	call	13ef0 <isatty>
   1070c:	00ffffc4 	movi	r3,-1
   10710:	10c00526 	beq	r2,r3,10728 <_isatty_r+0x44>
   10714:	dfc00217 	ldw	ra,8(sp)
   10718:	dc400117 	ldw	r17,4(sp)
   1071c:	dc000017 	ldw	r16,0(sp)
   10720:	dec00304 	addi	sp,sp,12
   10724:	f800283a 	ret
   10728:	80c00017 	ldw	r3,0(r16)
   1072c:	183ff926 	beq	r3,zero,10714 <__alt_mem_Flash_flash_data+0xf4010714>
   10730:	88c00015 	stw	r3,0(r17)
   10734:	003ff706 	br	10714 <__alt_mem_Flash_flash_data+0xf4010714>

00010738 <_lseek_r>:
   10738:	defffd04 	addi	sp,sp,-12
   1073c:	dc000015 	stw	r16,0(sp)
   10740:	040000f4 	movhi	r16,3
   10744:	dc400115 	stw	r17,4(sp)
   10748:	8427ef04 	addi	r16,r16,-24644
   1074c:	2023883a 	mov	r17,r4
   10750:	2809883a 	mov	r4,r5
   10754:	300b883a 	mov	r5,r6
   10758:	380d883a 	mov	r6,r7
   1075c:	dfc00215 	stw	ra,8(sp)
   10760:	80000015 	stw	zero,0(r16)
   10764:	00140c80 	call	140c8 <lseek>
   10768:	00ffffc4 	movi	r3,-1
   1076c:	10c00526 	beq	r2,r3,10784 <_lseek_r+0x4c>
   10770:	dfc00217 	ldw	ra,8(sp)
   10774:	dc400117 	ldw	r17,4(sp)
   10778:	dc000017 	ldw	r16,0(sp)
   1077c:	dec00304 	addi	sp,sp,12
   10780:	f800283a 	ret
   10784:	80c00017 	ldw	r3,0(r16)
   10788:	183ff926 	beq	r3,zero,10770 <__alt_mem_Flash_flash_data+0xf4010770>
   1078c:	88c00015 	stw	r3,0(r17)
   10790:	003ff706 	br	10770 <__alt_mem_Flash_flash_data+0xf4010770>

00010794 <_read_r>:
   10794:	defffd04 	addi	sp,sp,-12
   10798:	dc000015 	stw	r16,0(sp)
   1079c:	040000f4 	movhi	r16,3
   107a0:	dc400115 	stw	r17,4(sp)
   107a4:	8427ef04 	addi	r16,r16,-24644
   107a8:	2023883a 	mov	r17,r4
   107ac:	2809883a 	mov	r4,r5
   107b0:	300b883a 	mov	r5,r6
   107b4:	380d883a 	mov	r6,r7
   107b8:	dfc00215 	stw	ra,8(sp)
   107bc:	80000015 	stw	zero,0(r16)
   107c0:	00142c00 	call	142c0 <read>
   107c4:	00ffffc4 	movi	r3,-1
   107c8:	10c00526 	beq	r2,r3,107e0 <_read_r+0x4c>
   107cc:	dfc00217 	ldw	ra,8(sp)
   107d0:	dc400117 	ldw	r17,4(sp)
   107d4:	dc000017 	ldw	r16,0(sp)
   107d8:	dec00304 	addi	sp,sp,12
   107dc:	f800283a 	ret
   107e0:	80c00017 	ldw	r3,0(r16)
   107e4:	183ff926 	beq	r3,zero,107cc <__alt_mem_Flash_flash_data+0xf40107cc>
   107e8:	88c00015 	stw	r3,0(r17)
   107ec:	003ff706 	br	107cc <__alt_mem_Flash_flash_data+0xf40107cc>

000107f0 <_wcrtomb_r>:
   107f0:	defff604 	addi	sp,sp,-40
   107f4:	008000b4 	movhi	r2,2
   107f8:	dc800815 	stw	r18,32(sp)
   107fc:	dc400715 	stw	r17,28(sp)
   10800:	dc000615 	stw	r16,24(sp)
   10804:	109fcd04 	addi	r2,r2,32564
   10808:	dfc00915 	stw	ra,36(sp)
   1080c:	2021883a 	mov	r16,r4
   10810:	3823883a 	mov	r17,r7
   10814:	14800017 	ldw	r18,0(r2)
   10818:	28001426 	beq	r5,zero,1086c <_wcrtomb_r+0x7c>
   1081c:	d9400415 	stw	r5,16(sp)
   10820:	d9800515 	stw	r6,20(sp)
   10824:	000b3bc0 	call	b3bc <__locale_charset>
   10828:	d9400417 	ldw	r5,16(sp)
   1082c:	d9800517 	ldw	r6,20(sp)
   10830:	8009883a 	mov	r4,r16
   10834:	dc400015 	stw	r17,0(sp)
   10838:	100f883a 	mov	r7,r2
   1083c:	903ee83a 	callr	r18
   10840:	00ffffc4 	movi	r3,-1
   10844:	10c0031e 	bne	r2,r3,10854 <_wcrtomb_r+0x64>
   10848:	88000015 	stw	zero,0(r17)
   1084c:	00c02284 	movi	r3,138
   10850:	80c00015 	stw	r3,0(r16)
   10854:	dfc00917 	ldw	ra,36(sp)
   10858:	dc800817 	ldw	r18,32(sp)
   1085c:	dc400717 	ldw	r17,28(sp)
   10860:	dc000617 	ldw	r16,24(sp)
   10864:	dec00a04 	addi	sp,sp,40
   10868:	f800283a 	ret
   1086c:	000b3bc0 	call	b3bc <__locale_charset>
   10870:	8009883a 	mov	r4,r16
   10874:	dc400015 	stw	r17,0(sp)
   10878:	d9400104 	addi	r5,sp,4
   1087c:	000d883a 	mov	r6,zero
   10880:	100f883a 	mov	r7,r2
   10884:	903ee83a 	callr	r18
   10888:	003fed06 	br	10840 <__alt_mem_Flash_flash_data+0xf4010840>

0001088c <wcrtomb>:
   1088c:	defff604 	addi	sp,sp,-40
   10890:	008000b4 	movhi	r2,2
   10894:	dc800615 	stw	r18,24(sp)
   10898:	dc400515 	stw	r17,20(sp)
   1089c:	dc000415 	stw	r16,16(sp)
   108a0:	109fc904 	addi	r2,r2,32548
   108a4:	dfc00915 	stw	ra,36(sp)
   108a8:	dd000815 	stw	r20,32(sp)
   108ac:	dcc00715 	stw	r19,28(sp)
   108b0:	2021883a 	mov	r16,r4
   108b4:	3025883a 	mov	r18,r6
   108b8:	14400017 	ldw	r17,0(r2)
   108bc:	20001826 	beq	r4,zero,10920 <wcrtomb+0x94>
   108c0:	008000b4 	movhi	r2,2
   108c4:	109fcd04 	addi	r2,r2,32564
   108c8:	15000017 	ldw	r20,0(r2)
   108cc:	2827883a 	mov	r19,r5
   108d0:	000b3bc0 	call	b3bc <__locale_charset>
   108d4:	8809883a 	mov	r4,r17
   108d8:	dc800015 	stw	r18,0(sp)
   108dc:	800b883a 	mov	r5,r16
   108e0:	980d883a 	mov	r6,r19
   108e4:	100f883a 	mov	r7,r2
   108e8:	a03ee83a 	callr	r20
   108ec:	00ffffc4 	movi	r3,-1
   108f0:	10c0031e 	bne	r2,r3,10900 <wcrtomb+0x74>
   108f4:	90000015 	stw	zero,0(r18)
   108f8:	00c02284 	movi	r3,138
   108fc:	88c00015 	stw	r3,0(r17)
   10900:	dfc00917 	ldw	ra,36(sp)
   10904:	dd000817 	ldw	r20,32(sp)
   10908:	dcc00717 	ldw	r19,28(sp)
   1090c:	dc800617 	ldw	r18,24(sp)
   10910:	dc400517 	ldw	r17,20(sp)
   10914:	dc000417 	ldw	r16,16(sp)
   10918:	dec00a04 	addi	sp,sp,40
   1091c:	f800283a 	ret
   10920:	008000b4 	movhi	r2,2
   10924:	109fcd04 	addi	r2,r2,32564
   10928:	14000017 	ldw	r16,0(r2)
   1092c:	000b3bc0 	call	b3bc <__locale_charset>
   10930:	8809883a 	mov	r4,r17
   10934:	dc800015 	stw	r18,0(sp)
   10938:	d9400104 	addi	r5,sp,4
   1093c:	000d883a 	mov	r6,zero
   10940:	100f883a 	mov	r7,r2
   10944:	803ee83a 	callr	r16
   10948:	003fe806 	br	108ec <__alt_mem_Flash_flash_data+0xf40108ec>

0001094c <__ascii_wctomb>:
   1094c:	28000526 	beq	r5,zero,10964 <__ascii_wctomb+0x18>
   10950:	00803fc4 	movi	r2,255
   10954:	11800536 	bltu	r2,r6,1096c <__ascii_wctomb+0x20>
   10958:	29800005 	stb	r6,0(r5)
   1095c:	00800044 	movi	r2,1
   10960:	f800283a 	ret
   10964:	0005883a 	mov	r2,zero
   10968:	f800283a 	ret
   1096c:	00802284 	movi	r2,138
   10970:	20800015 	stw	r2,0(r4)
   10974:	00bfffc4 	movi	r2,-1
   10978:	f800283a 	ret

0001097c <_wctomb_r>:
   1097c:	008000b4 	movhi	r2,2
   10980:	defff904 	addi	sp,sp,-28
   10984:	109fcd04 	addi	r2,r2,32564
   10988:	dfc00615 	stw	ra,24(sp)
   1098c:	dc400515 	stw	r17,20(sp)
   10990:	dc000415 	stw	r16,16(sp)
   10994:	3823883a 	mov	r17,r7
   10998:	14000017 	ldw	r16,0(r2)
   1099c:	d9000115 	stw	r4,4(sp)
   109a0:	d9400215 	stw	r5,8(sp)
   109a4:	d9800315 	stw	r6,12(sp)
   109a8:	000b3bc0 	call	b3bc <__locale_charset>
   109ac:	d9000117 	ldw	r4,4(sp)
   109b0:	d9400217 	ldw	r5,8(sp)
   109b4:	d9800317 	ldw	r6,12(sp)
   109b8:	dc400015 	stw	r17,0(sp)
   109bc:	100f883a 	mov	r7,r2
   109c0:	803ee83a 	callr	r16
   109c4:	dfc00617 	ldw	ra,24(sp)
   109c8:	dc400517 	ldw	r17,20(sp)
   109cc:	dc000417 	ldw	r16,16(sp)
   109d0:	dec00704 	addi	sp,sp,28
   109d4:	f800283a 	ret

000109d8 <__udivdi3>:
   109d8:	defff504 	addi	sp,sp,-44
   109dc:	dcc00415 	stw	r19,16(sp)
   109e0:	dc000115 	stw	r16,4(sp)
   109e4:	dfc00a15 	stw	ra,40(sp)
   109e8:	df000915 	stw	fp,36(sp)
   109ec:	ddc00815 	stw	r23,32(sp)
   109f0:	dd800715 	stw	r22,28(sp)
   109f4:	dd400615 	stw	r21,24(sp)
   109f8:	dd000515 	stw	r20,20(sp)
   109fc:	dc800315 	stw	r18,12(sp)
   10a00:	dc400215 	stw	r17,8(sp)
   10a04:	2027883a 	mov	r19,r4
   10a08:	2821883a 	mov	r16,r5
   10a0c:	3800421e 	bne	r7,zero,10b18 <__udivdi3+0x140>
   10a10:	3025883a 	mov	r18,r6
   10a14:	2023883a 	mov	r17,r4
   10a18:	2980542e 	bgeu	r5,r6,10b6c <__udivdi3+0x194>
   10a1c:	00bfffd4 	movui	r2,65535
   10a20:	282d883a 	mov	r22,r5
   10a24:	1180a836 	bltu	r2,r6,10cc8 <__udivdi3+0x2f0>
   10a28:	00803fc4 	movi	r2,255
   10a2c:	1181422e 	bgeu	r2,r6,10f38 <__udivdi3+0x560>
   10a30:	00800204 	movi	r2,8
   10a34:	1007883a 	mov	r3,r2
   10a38:	3084d83a 	srl	r2,r6,r2
   10a3c:	010000b4 	movhi	r4,2
   10a40:	21173004 	addi	r4,r4,23744
   10a44:	2085883a 	add	r2,r4,r2
   10a48:	10800003 	ldbu	r2,0(r2)
   10a4c:	10c7883a 	add	r3,r2,r3
   10a50:	00800804 	movi	r2,32
   10a54:	10c5c83a 	sub	r2,r2,r3
   10a58:	10000526 	beq	r2,zero,10a70 <__udivdi3+0x98>
   10a5c:	80a0983a 	sll	r16,r16,r2
   10a60:	98c6d83a 	srl	r3,r19,r3
   10a64:	30a4983a 	sll	r18,r6,r2
   10a68:	98a2983a 	sll	r17,r19,r2
   10a6c:	80ecb03a 	or	r22,r16,r3
   10a70:	902ad43a 	srli	r21,r18,16
   10a74:	b009883a 	mov	r4,r22
   10a78:	953fffcc 	andi	r20,r18,65535
   10a7c:	a80b883a 	mov	r5,r21
   10a80:	001164c0 	call	1164c <__umodsi3>
   10a84:	b009883a 	mov	r4,r22
   10a88:	a80b883a 	mov	r5,r21
   10a8c:	1027883a 	mov	r19,r2
   10a90:	00116440 	call	11644 <__udivsi3>
   10a94:	1021883a 	mov	r16,r2
   10a98:	8806d43a 	srli	r3,r17,16
   10a9c:	9804943a 	slli	r2,r19,16
   10aa0:	8527383a 	mul	r19,r16,r20
   10aa4:	10c4b03a 	or	r2,r2,r3
   10aa8:	14c0052e 	bgeu	r2,r19,10ac0 <__udivdi3+0xe8>
   10aac:	1485883a 	add	r2,r2,r18
   10ab0:	80ffffc4 	addi	r3,r16,-1
   10ab4:	14800136 	bltu	r2,r18,10abc <__udivdi3+0xe4>
   10ab8:	14c13436 	bltu	r2,r19,10f8c <__udivdi3+0x5b4>
   10abc:	1821883a 	mov	r16,r3
   10ac0:	14e7c83a 	sub	r19,r2,r19
   10ac4:	9809883a 	mov	r4,r19
   10ac8:	a80b883a 	mov	r5,r21
   10acc:	001164c0 	call	1164c <__umodsi3>
   10ad0:	102d883a 	mov	r22,r2
   10ad4:	9809883a 	mov	r4,r19
   10ad8:	a80b883a 	mov	r5,r21
   10adc:	00116440 	call	11644 <__udivsi3>
   10ae0:	b02c943a 	slli	r22,r22,16
   10ae4:	1529383a 	mul	r20,r2,r20
   10ae8:	8c7fffcc 	andi	r17,r17,65535
   10aec:	b462b03a 	or	r17,r22,r17
   10af0:	8d00052e 	bgeu	r17,r20,10b08 <__udivdi3+0x130>
   10af4:	8ca3883a 	add	r17,r17,r18
   10af8:	10ffffc4 	addi	r3,r2,-1
   10afc:	8c80f636 	bltu	r17,r18,10ed8 <__udivdi3+0x500>
   10b00:	8d00f52e 	bgeu	r17,r20,10ed8 <__udivdi3+0x500>
   10b04:	10bfff84 	addi	r2,r2,-2
   10b08:	8020943a 	slli	r16,r16,16
   10b0c:	0007883a 	mov	r3,zero
   10b10:	1404b03a 	or	r2,r2,r16
   10b14:	00005b06 	br	10c84 <__udivdi3+0x2ac>
   10b18:	29c05836 	bltu	r5,r7,10c7c <__udivdi3+0x2a4>
   10b1c:	00bfffd4 	movui	r2,65535
   10b20:	11c0642e 	bgeu	r2,r7,10cb4 <__udivdi3+0x2dc>
   10b24:	00804034 	movhi	r2,256
   10b28:	10bfffc4 	addi	r2,r2,-1
   10b2c:	11c0f32e 	bgeu	r2,r7,10efc <__udivdi3+0x524>
   10b30:	00c00604 	movi	r3,24
   10b34:	180b883a 	mov	r5,r3
   10b38:	38c6d83a 	srl	r3,r7,r3
   10b3c:	008000b4 	movhi	r2,2
   10b40:	10973004 	addi	r2,r2,23744
   10b44:	10c7883a 	add	r3,r2,r3
   10b48:	18c00003 	ldbu	r3,0(r3)
   10b4c:	01000804 	movi	r4,32
   10b50:	1947883a 	add	r3,r3,r5
   10b54:	20e5c83a 	sub	r18,r4,r3
   10b58:	9000661e 	bne	r18,zero,10cf4 <__udivdi3+0x31c>
   10b5c:	3c00f936 	bltu	r7,r16,10f44 <__udivdi3+0x56c>
   10b60:	9985403a 	cmpgeu	r2,r19,r6
   10b64:	0007883a 	mov	r3,zero
   10b68:	00004606 	br	10c84 <__udivdi3+0x2ac>
   10b6c:	3000041e 	bne	r6,zero,10b80 <__udivdi3+0x1a8>
   10b70:	01000044 	movi	r4,1
   10b74:	000b883a 	mov	r5,zero
   10b78:	00116440 	call	11644 <__udivsi3>
   10b7c:	1025883a 	mov	r18,r2
   10b80:	00bfffd4 	movui	r2,65535
   10b84:	1480562e 	bgeu	r2,r18,10ce0 <__udivdi3+0x308>
   10b88:	00804034 	movhi	r2,256
   10b8c:	10bfffc4 	addi	r2,r2,-1
   10b90:	1480e32e 	bgeu	r2,r18,10f20 <__udivdi3+0x548>
   10b94:	00800604 	movi	r2,24
   10b98:	1007883a 	mov	r3,r2
   10b9c:	9084d83a 	srl	r2,r18,r2
   10ba0:	010000b4 	movhi	r4,2
   10ba4:	21173004 	addi	r4,r4,23744
   10ba8:	2085883a 	add	r2,r4,r2
   10bac:	10800003 	ldbu	r2,0(r2)
   10bb0:	10c5883a 	add	r2,r2,r3
   10bb4:	00c00804 	movi	r3,32
   10bb8:	1887c83a 	sub	r3,r3,r2
   10bbc:	1800911e 	bne	r3,zero,10e04 <__udivdi3+0x42c>
   10bc0:	9028d43a 	srli	r20,r18,16
   10bc4:	84a1c83a 	sub	r16,r16,r18
   10bc8:	957fffcc 	andi	r21,r18,65535
   10bcc:	00c00044 	movi	r3,1
   10bd0:	8009883a 	mov	r4,r16
   10bd4:	a00b883a 	mov	r5,r20
   10bd8:	d8c00015 	stw	r3,0(sp)
   10bdc:	001164c0 	call	1164c <__umodsi3>
   10be0:	8009883a 	mov	r4,r16
   10be4:	a00b883a 	mov	r5,r20
   10be8:	1027883a 	mov	r19,r2
   10bec:	00116440 	call	11644 <__udivsi3>
   10bf0:	1021883a 	mov	r16,r2
   10bf4:	880cd43a 	srli	r6,r17,16
   10bf8:	9804943a 	slli	r2,r19,16
   10bfc:	8567383a 	mul	r19,r16,r21
   10c00:	d8c00017 	ldw	r3,0(sp)
   10c04:	1188b03a 	or	r4,r2,r6
   10c08:	24c0052e 	bgeu	r4,r19,10c20 <__udivdi3+0x248>
   10c0c:	2489883a 	add	r4,r4,r18
   10c10:	80bfffc4 	addi	r2,r16,-1
   10c14:	24800136 	bltu	r4,r18,10c1c <__udivdi3+0x244>
   10c18:	24c0d936 	bltu	r4,r19,10f80 <__udivdi3+0x5a8>
   10c1c:	1021883a 	mov	r16,r2
   10c20:	24e7c83a 	sub	r19,r4,r19
   10c24:	9809883a 	mov	r4,r19
   10c28:	a00b883a 	mov	r5,r20
   10c2c:	d8c00015 	stw	r3,0(sp)
   10c30:	001164c0 	call	1164c <__umodsi3>
   10c34:	102d883a 	mov	r22,r2
   10c38:	9809883a 	mov	r4,r19
   10c3c:	a00b883a 	mov	r5,r20
   10c40:	00116440 	call	11644 <__udivsi3>
   10c44:	b02c943a 	slli	r22,r22,16
   10c48:	156b383a 	mul	r21,r2,r21
   10c4c:	8c7fffcc 	andi	r17,r17,65535
   10c50:	b462b03a 	or	r17,r22,r17
   10c54:	d8c00017 	ldw	r3,0(sp)
   10c58:	8d40052e 	bgeu	r17,r21,10c70 <__udivdi3+0x298>
   10c5c:	8ca3883a 	add	r17,r17,r18
   10c60:	113fffc4 	addi	r4,r2,-1
   10c64:	8c809a36 	bltu	r17,r18,10ed0 <__udivdi3+0x4f8>
   10c68:	8d40992e 	bgeu	r17,r21,10ed0 <__udivdi3+0x4f8>
   10c6c:	10bfff84 	addi	r2,r2,-2
   10c70:	8020943a 	slli	r16,r16,16
   10c74:	1404b03a 	or	r2,r2,r16
   10c78:	00000206 	br	10c84 <__udivdi3+0x2ac>
   10c7c:	0007883a 	mov	r3,zero
   10c80:	0005883a 	mov	r2,zero
   10c84:	dfc00a17 	ldw	ra,40(sp)
   10c88:	df000917 	ldw	fp,36(sp)
   10c8c:	ddc00817 	ldw	r23,32(sp)
   10c90:	dd800717 	ldw	r22,28(sp)
   10c94:	dd400617 	ldw	r21,24(sp)
   10c98:	dd000517 	ldw	r20,20(sp)
   10c9c:	dcc00417 	ldw	r19,16(sp)
   10ca0:	dc800317 	ldw	r18,12(sp)
   10ca4:	dc400217 	ldw	r17,8(sp)
   10ca8:	dc000117 	ldw	r16,4(sp)
   10cac:	dec00b04 	addi	sp,sp,44
   10cb0:	f800283a 	ret
   10cb4:	00803fc4 	movi	r2,255
   10cb8:	11c0932e 	bgeu	r2,r7,10f08 <__udivdi3+0x530>
   10cbc:	00c00204 	movi	r3,8
   10cc0:	180b883a 	mov	r5,r3
   10cc4:	003f9c06 	br	10b38 <__alt_mem_Flash_flash_data+0xf4010b38>
   10cc8:	00804034 	movhi	r2,256
   10ccc:	10bfffc4 	addi	r2,r2,-1
   10cd0:	1180902e 	bgeu	r2,r6,10f14 <__udivdi3+0x53c>
   10cd4:	00800604 	movi	r2,24
   10cd8:	1007883a 	mov	r3,r2
   10cdc:	003f5606 	br	10a38 <__alt_mem_Flash_flash_data+0xf4010a38>
   10ce0:	00803fc4 	movi	r2,255
   10ce4:	1480912e 	bgeu	r2,r18,10f2c <__udivdi3+0x554>
   10ce8:	00800204 	movi	r2,8
   10cec:	1007883a 	mov	r3,r2
   10cf0:	003faa06 	br	10b9c <__alt_mem_Flash_flash_data+0xf4010b9c>
   10cf4:	30eed83a 	srl	r23,r6,r3
   10cf8:	3c8e983a 	sll	r7,r7,r18
   10cfc:	80f8d83a 	srl	fp,r16,r3
   10d00:	98c6d83a 	srl	r3,r19,r3
   10d04:	3deeb03a 	or	r23,r7,r23
   10d08:	b828d43a 	srli	r20,r23,16
   10d0c:	84a0983a 	sll	r16,r16,r18
   10d10:	e009883a 	mov	r4,fp
   10d14:	a00b883a 	mov	r5,r20
   10d18:	80e2b03a 	or	r17,r16,r3
   10d1c:	34aa983a 	sll	r21,r6,r18
   10d20:	001164c0 	call	1164c <__umodsi3>
   10d24:	e009883a 	mov	r4,fp
   10d28:	a00b883a 	mov	r5,r20
   10d2c:	102d883a 	mov	r22,r2
   10d30:	00116440 	call	11644 <__udivsi3>
   10d34:	1021883a 	mov	r16,r2
   10d38:	bf3fffcc 	andi	fp,r23,65535
   10d3c:	b004943a 	slli	r2,r22,16
   10d40:	8808d43a 	srli	r4,r17,16
   10d44:	872d383a 	mul	r22,r16,fp
   10d48:	1104b03a 	or	r2,r2,r4
   10d4c:	1580042e 	bgeu	r2,r22,10d60 <__udivdi3+0x388>
   10d50:	15c5883a 	add	r2,r2,r23
   10d54:	80ffffc4 	addi	r3,r16,-1
   10d58:	15c0812e 	bgeu	r2,r23,10f60 <__udivdi3+0x588>
   10d5c:	1821883a 	mov	r16,r3
   10d60:	15adc83a 	sub	r22,r2,r22
   10d64:	b009883a 	mov	r4,r22
   10d68:	a00b883a 	mov	r5,r20
   10d6c:	001164c0 	call	1164c <__umodsi3>
   10d70:	a00b883a 	mov	r5,r20
   10d74:	b009883a 	mov	r4,r22
   10d78:	d8800015 	stw	r2,0(sp)
   10d7c:	00116440 	call	11644 <__udivsi3>
   10d80:	d8c00017 	ldw	r3,0(sp)
   10d84:	170b383a 	mul	r5,r2,fp
   10d88:	8c7fffcc 	andi	r17,r17,65535
   10d8c:	1806943a 	slli	r3,r3,16
   10d90:	1c46b03a 	or	r3,r3,r17
   10d94:	1940042e 	bgeu	r3,r5,10da8 <__udivdi3+0x3d0>
   10d98:	1dc7883a 	add	r3,r3,r23
   10d9c:	113fffc4 	addi	r4,r2,-1
   10da0:	1dc06b2e 	bgeu	r3,r23,10f50 <__udivdi3+0x578>
   10da4:	2005883a 	mov	r2,r4
   10da8:	8020943a 	slli	r16,r16,16
   10dac:	a9ffffcc 	andi	r7,r21,65535
   10db0:	a82ad43a 	srli	r21,r21,16
   10db4:	1404b03a 	or	r2,r2,r16
   10db8:	113fffcc 	andi	r4,r2,65535
   10dbc:	100cd43a 	srli	r6,r2,16
   10dc0:	21d3383a 	mul	r9,r4,r7
   10dc4:	2549383a 	mul	r4,r4,r21
   10dc8:	31cf383a 	mul	r7,r6,r7
   10dcc:	4810d43a 	srli	r8,r9,16
   10dd0:	1947c83a 	sub	r3,r3,r5
   10dd4:	3909883a 	add	r4,r7,r4
   10dd8:	2209883a 	add	r4,r4,r8
   10ddc:	354d383a 	mul	r6,r6,r21
   10de0:	21c0022e 	bgeu	r4,r7,10dec <__udivdi3+0x414>
   10de4:	01400074 	movhi	r5,1
   10de8:	314d883a 	add	r6,r6,r5
   10dec:	202ad43a 	srli	r21,r4,16
   10df0:	354d883a 	add	r6,r6,r21
   10df4:	19803f36 	bltu	r3,r6,10ef4 <__udivdi3+0x51c>
   10df8:	19803926 	beq	r3,r6,10ee0 <__udivdi3+0x508>
   10dfc:	0007883a 	mov	r3,zero
   10e00:	003fa006 	br	10c84 <__alt_mem_Flash_flash_data+0xf4010c84>
   10e04:	90e4983a 	sll	r18,r18,r3
   10e08:	80aad83a 	srl	r21,r16,r2
   10e0c:	80e0983a 	sll	r16,r16,r3
   10e10:	9028d43a 	srli	r20,r18,16
   10e14:	9884d83a 	srl	r2,r19,r2
   10e18:	a809883a 	mov	r4,r21
   10e1c:	a00b883a 	mov	r5,r20
   10e20:	80acb03a 	or	r22,r16,r2
   10e24:	98e2983a 	sll	r17,r19,r3
   10e28:	001164c0 	call	1164c <__umodsi3>
   10e2c:	a809883a 	mov	r4,r21
   10e30:	a00b883a 	mov	r5,r20
   10e34:	1021883a 	mov	r16,r2
   10e38:	00116440 	call	11644 <__udivsi3>
   10e3c:	957fffcc 	andi	r21,r18,65535
   10e40:	8020943a 	slli	r16,r16,16
   10e44:	b00ad43a 	srli	r5,r22,16
   10e48:	1567383a 	mul	r19,r2,r21
   10e4c:	102f883a 	mov	r23,r2
   10e50:	8148b03a 	or	r4,r16,r5
   10e54:	24c0062e 	bgeu	r4,r19,10e70 <__udivdi3+0x498>
   10e58:	2489883a 	add	r4,r4,r18
   10e5c:	10bfffc4 	addi	r2,r2,-1
   10e60:	24804536 	bltu	r4,r18,10f78 <__udivdi3+0x5a0>
   10e64:	24c0442e 	bgeu	r4,r19,10f78 <__udivdi3+0x5a0>
   10e68:	bdffff84 	addi	r23,r23,-2
   10e6c:	2489883a 	add	r4,r4,r18
   10e70:	24e7c83a 	sub	r19,r4,r19
   10e74:	9809883a 	mov	r4,r19
   10e78:	a00b883a 	mov	r5,r20
   10e7c:	001164c0 	call	1164c <__umodsi3>
   10e80:	1021883a 	mov	r16,r2
   10e84:	9809883a 	mov	r4,r19
   10e88:	a00b883a 	mov	r5,r20
   10e8c:	00116440 	call	11644 <__udivsi3>
   10e90:	8020943a 	slli	r16,r16,16
   10e94:	1007883a 	mov	r3,r2
   10e98:	1545383a 	mul	r2,r2,r21
   10e9c:	b13fffcc 	andi	r4,r22,65535
   10ea0:	8108b03a 	or	r4,r16,r4
   10ea4:	2080062e 	bgeu	r4,r2,10ec0 <__udivdi3+0x4e8>
   10ea8:	2489883a 	add	r4,r4,r18
   10eac:	197fffc4 	addi	r5,r3,-1
   10eb0:	24802f36 	bltu	r4,r18,10f70 <__udivdi3+0x598>
   10eb4:	20802e2e 	bgeu	r4,r2,10f70 <__udivdi3+0x598>
   10eb8:	18ffff84 	addi	r3,r3,-2
   10ebc:	2489883a 	add	r4,r4,r18
   10ec0:	b82e943a 	slli	r23,r23,16
   10ec4:	20a1c83a 	sub	r16,r4,r2
   10ec8:	1dc6b03a 	or	r3,r3,r23
   10ecc:	003f4006 	br	10bd0 <__alt_mem_Flash_flash_data+0xf4010bd0>
   10ed0:	2005883a 	mov	r2,r4
   10ed4:	003f6606 	br	10c70 <__alt_mem_Flash_flash_data+0xf4010c70>
   10ed8:	1805883a 	mov	r2,r3
   10edc:	003f0a06 	br	10b08 <__alt_mem_Flash_flash_data+0xf4010b08>
   10ee0:	2006943a 	slli	r3,r4,16
   10ee4:	9c88983a 	sll	r4,r19,r18
   10ee8:	4a7fffcc 	andi	r9,r9,65535
   10eec:	1a47883a 	add	r3,r3,r9
   10ef0:	20ffc22e 	bgeu	r4,r3,10dfc <__alt_mem_Flash_flash_data+0xf4010dfc>
   10ef4:	10bfffc4 	addi	r2,r2,-1
   10ef8:	003fc006 	br	10dfc <__alt_mem_Flash_flash_data+0xf4010dfc>
   10efc:	00c00404 	movi	r3,16
   10f00:	180b883a 	mov	r5,r3
   10f04:	003f0c06 	br	10b38 <__alt_mem_Flash_flash_data+0xf4010b38>
   10f08:	0007883a 	mov	r3,zero
   10f0c:	000b883a 	mov	r5,zero
   10f10:	003f0906 	br	10b38 <__alt_mem_Flash_flash_data+0xf4010b38>
   10f14:	00800404 	movi	r2,16
   10f18:	1007883a 	mov	r3,r2
   10f1c:	003ec606 	br	10a38 <__alt_mem_Flash_flash_data+0xf4010a38>
   10f20:	00800404 	movi	r2,16
   10f24:	1007883a 	mov	r3,r2
   10f28:	003f1c06 	br	10b9c <__alt_mem_Flash_flash_data+0xf4010b9c>
   10f2c:	0005883a 	mov	r2,zero
   10f30:	0007883a 	mov	r3,zero
   10f34:	003f1906 	br	10b9c <__alt_mem_Flash_flash_data+0xf4010b9c>
   10f38:	0005883a 	mov	r2,zero
   10f3c:	0007883a 	mov	r3,zero
   10f40:	003ebd06 	br	10a38 <__alt_mem_Flash_flash_data+0xf4010a38>
   10f44:	0007883a 	mov	r3,zero
   10f48:	00800044 	movi	r2,1
   10f4c:	003f4d06 	br	10c84 <__alt_mem_Flash_flash_data+0xf4010c84>
   10f50:	197f942e 	bgeu	r3,r5,10da4 <__alt_mem_Flash_flash_data+0xf4010da4>
   10f54:	10bfff84 	addi	r2,r2,-2
   10f58:	1dc7883a 	add	r3,r3,r23
   10f5c:	003f9206 	br	10da8 <__alt_mem_Flash_flash_data+0xf4010da8>
   10f60:	15bf7e2e 	bgeu	r2,r22,10d5c <__alt_mem_Flash_flash_data+0xf4010d5c>
   10f64:	843fff84 	addi	r16,r16,-2
   10f68:	15c5883a 	add	r2,r2,r23
   10f6c:	003f7c06 	br	10d60 <__alt_mem_Flash_flash_data+0xf4010d60>
   10f70:	2807883a 	mov	r3,r5
   10f74:	003fd206 	br	10ec0 <__alt_mem_Flash_flash_data+0xf4010ec0>
   10f78:	102f883a 	mov	r23,r2
   10f7c:	003fbc06 	br	10e70 <__alt_mem_Flash_flash_data+0xf4010e70>
   10f80:	843fff84 	addi	r16,r16,-2
   10f84:	2489883a 	add	r4,r4,r18
   10f88:	003f2506 	br	10c20 <__alt_mem_Flash_flash_data+0xf4010c20>
   10f8c:	843fff84 	addi	r16,r16,-2
   10f90:	1485883a 	add	r2,r2,r18
   10f94:	003eca06 	br	10ac0 <__alt_mem_Flash_flash_data+0xf4010ac0>

00010f98 <__umoddi3>:
   10f98:	defff404 	addi	sp,sp,-48
   10f9c:	ddc00915 	stw	r23,36(sp)
   10fa0:	dc400315 	stw	r17,12(sp)
   10fa4:	dc000215 	stw	r16,8(sp)
   10fa8:	dfc00b15 	stw	ra,44(sp)
   10fac:	df000a15 	stw	fp,40(sp)
   10fb0:	dd800815 	stw	r22,32(sp)
   10fb4:	dd400715 	stw	r21,28(sp)
   10fb8:	dd000615 	stw	r20,24(sp)
   10fbc:	dcc00515 	stw	r19,20(sp)
   10fc0:	dc800415 	stw	r18,16(sp)
   10fc4:	2021883a 	mov	r16,r4
   10fc8:	2823883a 	mov	r17,r5
   10fcc:	282f883a 	mov	r23,r5
   10fd0:	3800381e 	bne	r7,zero,110b4 <__umoddi3+0x11c>
   10fd4:	3027883a 	mov	r19,r6
   10fd8:	2029883a 	mov	r20,r4
   10fdc:	29804e2e 	bgeu	r5,r6,11118 <__umoddi3+0x180>
   10fe0:	00bfffd4 	movui	r2,65535
   10fe4:	11809c36 	bltu	r2,r6,11258 <__umoddi3+0x2c0>
   10fe8:	00803fc4 	movi	r2,255
   10fec:	11813b2e 	bgeu	r2,r6,114dc <__umoddi3+0x544>
   10ff0:	01400204 	movi	r5,8
   10ff4:	2805883a 	mov	r2,r5
   10ff8:	314ad83a 	srl	r5,r6,r5
   10ffc:	00c000b4 	movhi	r3,2
   11000:	18d73004 	addi	r3,r3,23744
   11004:	194b883a 	add	r5,r3,r5
   11008:	29000003 	ldbu	r4,0(r5)
   1100c:	2089883a 	add	r4,r4,r2
   11010:	00800804 	movi	r2,32
   11014:	1105c83a 	sub	r2,r2,r4
   11018:	1000ec26 	beq	r2,zero,113cc <__umoddi3+0x434>
   1101c:	88a2983a 	sll	r17,r17,r2
   11020:	8108d83a 	srl	r4,r16,r4
   11024:	30a6983a 	sll	r19,r6,r2
   11028:	80a8983a 	sll	r20,r16,r2
   1102c:	1025883a 	mov	r18,r2
   11030:	892eb03a 	or	r23,r17,r4
   11034:	982cd43a 	srli	r22,r19,16
   11038:	b809883a 	mov	r4,r23
   1103c:	9d7fffcc 	andi	r21,r19,65535
   11040:	b00b883a 	mov	r5,r22
   11044:	001164c0 	call	1164c <__umodsi3>
   11048:	b809883a 	mov	r4,r23
   1104c:	b00b883a 	mov	r5,r22
   11050:	1021883a 	mov	r16,r2
   11054:	00116440 	call	11644 <__udivsi3>
   11058:	8020943a 	slli	r16,r16,16
   1105c:	a00cd43a 	srli	r6,r20,16
   11060:	1545383a 	mul	r2,r2,r21
   11064:	8188b03a 	or	r4,r16,r6
   11068:	2080042e 	bgeu	r4,r2,1107c <__umoddi3+0xe4>
   1106c:	24c9883a 	add	r4,r4,r19
   11070:	24c00236 	bltu	r4,r19,1107c <__umoddi3+0xe4>
   11074:	2080012e 	bgeu	r4,r2,1107c <__umoddi3+0xe4>
   11078:	24c9883a 	add	r4,r4,r19
   1107c:	20a3c83a 	sub	r17,r4,r2
   11080:	8809883a 	mov	r4,r17
   11084:	b00b883a 	mov	r5,r22
   11088:	001164c0 	call	1164c <__umodsi3>
   1108c:	8809883a 	mov	r4,r17
   11090:	b00b883a 	mov	r5,r22
   11094:	1021883a 	mov	r16,r2
   11098:	00116440 	call	11644 <__udivsi3>
   1109c:	8006943a 	slli	r3,r16,16
   110a0:	1545383a 	mul	r2,r2,r21
   110a4:	a13fffcc 	andi	r4,r20,65535
   110a8:	1906b03a 	or	r3,r3,r4
   110ac:	1880532e 	bgeu	r3,r2,111fc <__umoddi3+0x264>
   110b0:	00004e06 	br	111ec <__umoddi3+0x254>
   110b4:	29c05536 	bltu	r5,r7,1120c <__umoddi3+0x274>
   110b8:	00bfffd4 	movui	r2,65535
   110bc:	11c0612e 	bgeu	r2,r7,11244 <__umoddi3+0x2ac>
   110c0:	00804034 	movhi	r2,256
   110c4:	10bfffc4 	addi	r2,r2,-1
   110c8:	11c0f82e 	bgeu	r2,r7,114ac <__umoddi3+0x514>
   110cc:	01400604 	movi	r5,24
   110d0:	282b883a 	mov	r21,r5
   110d4:	394ad83a 	srl	r5,r7,r5
   110d8:	00c000b4 	movhi	r3,2
   110dc:	18d73004 	addi	r3,r3,23744
   110e0:	194b883a 	add	r5,r3,r5
   110e4:	28800003 	ldbu	r2,0(r5)
   110e8:	00c00804 	movi	r3,32
   110ec:	156b883a 	add	r21,r2,r21
   110f0:	1d69c83a 	sub	r20,r3,r21
   110f4:	a000631e 	bne	r20,zero,11284 <__umoddi3+0x2ec>
   110f8:	3c400136 	bltu	r7,r17,11100 <__umoddi3+0x168>
   110fc:	81810436 	bltu	r16,r6,11510 <__umoddi3+0x578>
   11100:	8185c83a 	sub	r2,r16,r6
   11104:	89e3c83a 	sub	r17,r17,r7
   11108:	8087803a 	cmpltu	r3,r16,r2
   1110c:	88efc83a 	sub	r23,r17,r3
   11110:	b807883a 	mov	r3,r23
   11114:	00003f06 	br	11214 <__umoddi3+0x27c>
   11118:	3000041e 	bne	r6,zero,1112c <__umoddi3+0x194>
   1111c:	01000044 	movi	r4,1
   11120:	000b883a 	mov	r5,zero
   11124:	00116440 	call	11644 <__udivsi3>
   11128:	1027883a 	mov	r19,r2
   1112c:	00bfffd4 	movui	r2,65535
   11130:	14c04f2e 	bgeu	r2,r19,11270 <__umoddi3+0x2d8>
   11134:	00804034 	movhi	r2,256
   11138:	10bfffc4 	addi	r2,r2,-1
   1113c:	14c0e42e 	bgeu	r2,r19,114d0 <__umoddi3+0x538>
   11140:	00800604 	movi	r2,24
   11144:	1007883a 	mov	r3,r2
   11148:	9884d83a 	srl	r2,r19,r2
   1114c:	010000b4 	movhi	r4,2
   11150:	21173004 	addi	r4,r4,23744
   11154:	2085883a 	add	r2,r4,r2
   11158:	11000003 	ldbu	r4,0(r2)
   1115c:	00800804 	movi	r2,32
   11160:	20c7883a 	add	r3,r4,r3
   11164:	10c5c83a 	sub	r2,r2,r3
   11168:	10009a1e 	bne	r2,zero,113d4 <__umoddi3+0x43c>
   1116c:	982cd43a 	srli	r22,r19,16
   11170:	8ce3c83a 	sub	r17,r17,r19
   11174:	9c3fffcc 	andi	r16,r19,65535
   11178:	0025883a 	mov	r18,zero
   1117c:	8809883a 	mov	r4,r17
   11180:	b00b883a 	mov	r5,r22
   11184:	001164c0 	call	1164c <__umodsi3>
   11188:	8809883a 	mov	r4,r17
   1118c:	b00b883a 	mov	r5,r22
   11190:	102b883a 	mov	r21,r2
   11194:	00116440 	call	11644 <__udivsi3>
   11198:	a806943a 	slli	r3,r21,16
   1119c:	a008d43a 	srli	r4,r20,16
   111a0:	1405383a 	mul	r2,r2,r16
   111a4:	190cb03a 	or	r6,r3,r4
   111a8:	3080032e 	bgeu	r6,r2,111b8 <__umoddi3+0x220>
   111ac:	34cd883a 	add	r6,r6,r19
   111b0:	34c00136 	bltu	r6,r19,111b8 <__umoddi3+0x220>
   111b4:	3080d436 	bltu	r6,r2,11508 <__umoddi3+0x570>
   111b8:	30abc83a 	sub	r21,r6,r2
   111bc:	a809883a 	mov	r4,r21
   111c0:	b00b883a 	mov	r5,r22
   111c4:	001164c0 	call	1164c <__umodsi3>
   111c8:	1023883a 	mov	r17,r2
   111cc:	a809883a 	mov	r4,r21
   111d0:	b00b883a 	mov	r5,r22
   111d4:	00116440 	call	11644 <__udivsi3>
   111d8:	8822943a 	slli	r17,r17,16
   111dc:	1405383a 	mul	r2,r2,r16
   111e0:	a13fffcc 	andi	r4,r20,65535
   111e4:	8906b03a 	or	r3,r17,r4
   111e8:	1880042e 	bgeu	r3,r2,111fc <__umoddi3+0x264>
   111ec:	1cc7883a 	add	r3,r3,r19
   111f0:	1cc00236 	bltu	r3,r19,111fc <__umoddi3+0x264>
   111f4:	1880012e 	bgeu	r3,r2,111fc <__umoddi3+0x264>
   111f8:	1cc7883a 	add	r3,r3,r19
   111fc:	1887c83a 	sub	r3,r3,r2
   11200:	1c84d83a 	srl	r2,r3,r18
   11204:	0007883a 	mov	r3,zero
   11208:	00000206 	br	11214 <__umoddi3+0x27c>
   1120c:	2005883a 	mov	r2,r4
   11210:	2807883a 	mov	r3,r5
   11214:	dfc00b17 	ldw	ra,44(sp)
   11218:	df000a17 	ldw	fp,40(sp)
   1121c:	ddc00917 	ldw	r23,36(sp)
   11220:	dd800817 	ldw	r22,32(sp)
   11224:	dd400717 	ldw	r21,28(sp)
   11228:	dd000617 	ldw	r20,24(sp)
   1122c:	dcc00517 	ldw	r19,20(sp)
   11230:	dc800417 	ldw	r18,16(sp)
   11234:	dc400317 	ldw	r17,12(sp)
   11238:	dc000217 	ldw	r16,8(sp)
   1123c:	dec00c04 	addi	sp,sp,48
   11240:	f800283a 	ret
   11244:	00803fc4 	movi	r2,255
   11248:	11c0952e 	bgeu	r2,r7,114a0 <__umoddi3+0x508>
   1124c:	01400204 	movi	r5,8
   11250:	282b883a 	mov	r21,r5
   11254:	003f9f06 	br	110d4 <__alt_mem_Flash_flash_data+0xf40110d4>
   11258:	00804034 	movhi	r2,256
   1125c:	10bfffc4 	addi	r2,r2,-1
   11260:	1180952e 	bgeu	r2,r6,114b8 <__umoddi3+0x520>
   11264:	01400604 	movi	r5,24
   11268:	2805883a 	mov	r2,r5
   1126c:	003f6206 	br	10ff8 <__alt_mem_Flash_flash_data+0xf4010ff8>
   11270:	00803fc4 	movi	r2,255
   11274:	14c0932e 	bgeu	r2,r19,114c4 <__umoddi3+0x52c>
   11278:	00800204 	movi	r2,8
   1127c:	1007883a 	mov	r3,r2
   11280:	003fb106 	br	11148 <__alt_mem_Flash_flash_data+0xf4011148>
   11284:	3548d83a 	srl	r4,r6,r21
   11288:	3d0e983a 	sll	r7,r7,r20
   1128c:	8d10983a 	sll	r8,r17,r20
   11290:	8d6cd83a 	srl	r22,r17,r21
   11294:	3922b03a 	or	r17,r7,r4
   11298:	882ed43a 	srli	r23,r17,16
   1129c:	8564d83a 	srl	r18,r16,r21
   112a0:	b009883a 	mov	r4,r22
   112a4:	b80b883a 	mov	r5,r23
   112a8:	44a4b03a 	or	r18,r8,r18
   112ac:	3526983a 	sll	r19,r6,r20
   112b0:	001164c0 	call	1164c <__umodsi3>
   112b4:	b009883a 	mov	r4,r22
   112b8:	b80b883a 	mov	r5,r23
   112bc:	1039883a 	mov	fp,r2
   112c0:	00116440 	call	11644 <__udivsi3>
   112c4:	102d883a 	mov	r22,r2
   112c8:	8a3fffcc 	andi	r8,r17,65535
   112cc:	e004943a 	slli	r2,fp,16
   112d0:	900cd43a 	srli	r6,r18,16
   112d4:	b239383a 	mul	fp,r22,r8
   112d8:	8520983a 	sll	r16,r16,r20
   112dc:	118ab03a 	or	r5,r2,r6
   112e0:	2f00042e 	bgeu	r5,fp,112f4 <__umoddi3+0x35c>
   112e4:	2c4b883a 	add	r5,r5,r17
   112e8:	b0bfffc4 	addi	r2,r22,-1
   112ec:	2c40822e 	bgeu	r5,r17,114f8 <__umoddi3+0x560>
   112f0:	102d883a 	mov	r22,r2
   112f4:	2f39c83a 	sub	fp,r5,fp
   112f8:	e009883a 	mov	r4,fp
   112fc:	b80b883a 	mov	r5,r23
   11300:	da000115 	stw	r8,4(sp)
   11304:	001164c0 	call	1164c <__umodsi3>
   11308:	e009883a 	mov	r4,fp
   1130c:	b80b883a 	mov	r5,r23
   11310:	d8800015 	stw	r2,0(sp)
   11314:	00116440 	call	11644 <__udivsi3>
   11318:	d9800017 	ldw	r6,0(sp)
   1131c:	da000117 	ldw	r8,4(sp)
   11320:	94bfffcc 	andi	r18,r18,65535
   11324:	300c943a 	slli	r6,r6,16
   11328:	1209383a 	mul	r4,r2,r8
   1132c:	3490b03a 	or	r8,r6,r18
   11330:	4100042e 	bgeu	r8,r4,11344 <__umoddi3+0x3ac>
   11334:	4451883a 	add	r8,r8,r17
   11338:	10ffffc4 	addi	r3,r2,-1
   1133c:	44406a2e 	bgeu	r8,r17,114e8 <__umoddi3+0x550>
   11340:	1805883a 	mov	r2,r3
   11344:	b012943a 	slli	r9,r22,16
   11348:	9abfffcc 	andi	r10,r19,65535
   1134c:	980ed43a 	srli	r7,r19,16
   11350:	124ab03a 	or	r5,r2,r9
   11354:	2a7fffcc 	andi	r9,r5,65535
   11358:	280ad43a 	srli	r5,r5,16
   1135c:	4a8d383a 	mul	r6,r9,r10
   11360:	49d3383a 	mul	r9,r9,r7
   11364:	2a95383a 	mul	r10,r5,r10
   11368:	3004d43a 	srli	r2,r6,16
   1136c:	4111c83a 	sub	r8,r8,r4
   11370:	5253883a 	add	r9,r10,r9
   11374:	4893883a 	add	r9,r9,r2
   11378:	29cb383a 	mul	r5,r5,r7
   1137c:	4a80022e 	bgeu	r9,r10,11388 <__umoddi3+0x3f0>
   11380:	00800074 	movhi	r2,1
   11384:	288b883a 	add	r5,r5,r2
   11388:	4808d43a 	srli	r4,r9,16
   1138c:	4812943a 	slli	r9,r9,16
   11390:	31bfffcc 	andi	r6,r6,65535
   11394:	290b883a 	add	r5,r5,r4
   11398:	498d883a 	add	r6,r9,r6
   1139c:	41403a36 	bltu	r8,r5,11488 <__umoddi3+0x4f0>
   113a0:	41405d26 	beq	r8,r5,11518 <__umoddi3+0x580>
   113a4:	4149c83a 	sub	r4,r8,r5
   113a8:	300f883a 	mov	r7,r6
   113ac:	81cfc83a 	sub	r7,r16,r7
   113b0:	81c7803a 	cmpltu	r3,r16,r7
   113b4:	20c7c83a 	sub	r3,r4,r3
   113b8:	1d44983a 	sll	r2,r3,r21
   113bc:	3d0ed83a 	srl	r7,r7,r20
   113c0:	1d06d83a 	srl	r3,r3,r20
   113c4:	11c4b03a 	or	r2,r2,r7
   113c8:	003f9206 	br	11214 <__alt_mem_Flash_flash_data+0xf4011214>
   113cc:	0025883a 	mov	r18,zero
   113d0:	003f1806 	br	11034 <__alt_mem_Flash_flash_data+0xf4011034>
   113d4:	98a6983a 	sll	r19,r19,r2
   113d8:	88e8d83a 	srl	r20,r17,r3
   113dc:	80c6d83a 	srl	r3,r16,r3
   113e0:	982cd43a 	srli	r22,r19,16
   113e4:	88a2983a 	sll	r17,r17,r2
   113e8:	a009883a 	mov	r4,r20
   113ec:	b00b883a 	mov	r5,r22
   113f0:	88eab03a 	or	r21,r17,r3
   113f4:	1025883a 	mov	r18,r2
   113f8:	001164c0 	call	1164c <__umodsi3>
   113fc:	a009883a 	mov	r4,r20
   11400:	b00b883a 	mov	r5,r22
   11404:	1023883a 	mov	r17,r2
   11408:	00116440 	call	11644 <__udivsi3>
   1140c:	9f3fffcc 	andi	fp,r19,65535
   11410:	8822943a 	slli	r17,r17,16
   11414:	a80ad43a 	srli	r5,r21,16
   11418:	1705383a 	mul	r2,r2,fp
   1141c:	84a8983a 	sll	r20,r16,r18
   11420:	8948b03a 	or	r4,r17,r5
   11424:	2080042e 	bgeu	r4,r2,11438 <__umoddi3+0x4a0>
   11428:	24c9883a 	add	r4,r4,r19
   1142c:	24c00236 	bltu	r4,r19,11438 <__umoddi3+0x4a0>
   11430:	2080012e 	bgeu	r4,r2,11438 <__umoddi3+0x4a0>
   11434:	24c9883a 	add	r4,r4,r19
   11438:	20afc83a 	sub	r23,r4,r2
   1143c:	b809883a 	mov	r4,r23
   11440:	b00b883a 	mov	r5,r22
   11444:	001164c0 	call	1164c <__umodsi3>
   11448:	1023883a 	mov	r17,r2
   1144c:	b809883a 	mov	r4,r23
   11450:	b00b883a 	mov	r5,r22
   11454:	00116440 	call	11644 <__udivsi3>
   11458:	8822943a 	slli	r17,r17,16
   1145c:	1705383a 	mul	r2,r2,fp
   11460:	a93fffcc 	andi	r4,r21,65535
   11464:	8908b03a 	or	r4,r17,r4
   11468:	2080042e 	bgeu	r4,r2,1147c <__umoddi3+0x4e4>
   1146c:	24c9883a 	add	r4,r4,r19
   11470:	24c00236 	bltu	r4,r19,1147c <__umoddi3+0x4e4>
   11474:	2080012e 	bgeu	r4,r2,1147c <__umoddi3+0x4e4>
   11478:	24c9883a 	add	r4,r4,r19
   1147c:	20a3c83a 	sub	r17,r4,r2
   11480:	e021883a 	mov	r16,fp
   11484:	003f3d06 	br	1117c <__alt_mem_Flash_flash_data+0xf401117c>
   11488:	34cfc83a 	sub	r7,r6,r19
   1148c:	2c4bc83a 	sub	r5,r5,r17
   11490:	31cd803a 	cmpltu	r6,r6,r7
   11494:	298dc83a 	sub	r6,r5,r6
   11498:	4189c83a 	sub	r4,r8,r6
   1149c:	003fc306 	br	113ac <__alt_mem_Flash_flash_data+0xf40113ac>
   114a0:	000b883a 	mov	r5,zero
   114a4:	002b883a 	mov	r21,zero
   114a8:	003f0a06 	br	110d4 <__alt_mem_Flash_flash_data+0xf40110d4>
   114ac:	01400404 	movi	r5,16
   114b0:	282b883a 	mov	r21,r5
   114b4:	003f0706 	br	110d4 <__alt_mem_Flash_flash_data+0xf40110d4>
   114b8:	01400404 	movi	r5,16
   114bc:	2805883a 	mov	r2,r5
   114c0:	003ecd06 	br	10ff8 <__alt_mem_Flash_flash_data+0xf4010ff8>
   114c4:	0005883a 	mov	r2,zero
   114c8:	0007883a 	mov	r3,zero
   114cc:	003f1e06 	br	11148 <__alt_mem_Flash_flash_data+0xf4011148>
   114d0:	00800404 	movi	r2,16
   114d4:	1007883a 	mov	r3,r2
   114d8:	003f1b06 	br	11148 <__alt_mem_Flash_flash_data+0xf4011148>
   114dc:	000b883a 	mov	r5,zero
   114e0:	0005883a 	mov	r2,zero
   114e4:	003ec406 	br	10ff8 <__alt_mem_Flash_flash_data+0xf4010ff8>
   114e8:	413f952e 	bgeu	r8,r4,11340 <__alt_mem_Flash_flash_data+0xf4011340>
   114ec:	10bfff84 	addi	r2,r2,-2
   114f0:	4451883a 	add	r8,r8,r17
   114f4:	003f9306 	br	11344 <__alt_mem_Flash_flash_data+0xf4011344>
   114f8:	2f3f7d2e 	bgeu	r5,fp,112f0 <__alt_mem_Flash_flash_data+0xf40112f0>
   114fc:	b5bfff84 	addi	r22,r22,-2
   11500:	2c4b883a 	add	r5,r5,r17
   11504:	003f7b06 	br	112f4 <__alt_mem_Flash_flash_data+0xf40112f4>
   11508:	34cd883a 	add	r6,r6,r19
   1150c:	003f2a06 	br	111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   11510:	8005883a 	mov	r2,r16
   11514:	003efe06 	br	11110 <__alt_mem_Flash_flash_data+0xf4011110>
   11518:	81bfdb36 	bltu	r16,r6,11488 <__alt_mem_Flash_flash_data+0xf4011488>
   1151c:	300f883a 	mov	r7,r6
   11520:	0009883a 	mov	r4,zero
   11524:	003fa106 	br	113ac <__alt_mem_Flash_flash_data+0xf40113ac>

00011528 <udivmodsi4>:
   11528:	2900182e 	bgeu	r5,r4,1158c <udivmodsi4+0x64>
   1152c:	28001716 	blt	r5,zero,1158c <udivmodsi4+0x64>
   11530:	00800804 	movi	r2,32
   11534:	00c00044 	movi	r3,1
   11538:	00000206 	br	11544 <udivmodsi4+0x1c>
   1153c:	10001126 	beq	r2,zero,11584 <udivmodsi4+0x5c>
   11540:	28000516 	blt	r5,zero,11558 <udivmodsi4+0x30>
   11544:	294b883a 	add	r5,r5,r5
   11548:	10bfffc4 	addi	r2,r2,-1
   1154c:	18c7883a 	add	r3,r3,r3
   11550:	293ffa36 	bltu	r5,r4,1153c <__alt_mem_Flash_flash_data+0xf401153c>
   11554:	18000b26 	beq	r3,zero,11584 <udivmodsi4+0x5c>
   11558:	0005883a 	mov	r2,zero
   1155c:	21400236 	bltu	r4,r5,11568 <udivmodsi4+0x40>
   11560:	2149c83a 	sub	r4,r4,r5
   11564:	10c4b03a 	or	r2,r2,r3
   11568:	1806d07a 	srli	r3,r3,1
   1156c:	280ad07a 	srli	r5,r5,1
   11570:	183ffa1e 	bne	r3,zero,1155c <__alt_mem_Flash_flash_data+0xf401155c>
   11574:	3000011e 	bne	r6,zero,1157c <udivmodsi4+0x54>
   11578:	f800283a 	ret
   1157c:	2005883a 	mov	r2,r4
   11580:	f800283a 	ret
   11584:	0005883a 	mov	r2,zero
   11588:	003ffa06 	br	11574 <__alt_mem_Flash_flash_data+0xf4011574>
   1158c:	00c00044 	movi	r3,1
   11590:	003ff106 	br	11558 <__alt_mem_Flash_flash_data+0xf4011558>

00011594 <__divsi3>:
   11594:	defffe04 	addi	sp,sp,-8
   11598:	dfc00115 	stw	ra,4(sp)
   1159c:	dc000015 	stw	r16,0(sp)
   115a0:	20000b16 	blt	r4,zero,115d0 <__divsi3+0x3c>
   115a4:	0021883a 	mov	r16,zero
   115a8:	28000c16 	blt	r5,zero,115dc <__divsi3+0x48>
   115ac:	000d883a 	mov	r6,zero
   115b0:	00115280 	call	11528 <udivmodsi4>
   115b4:	0407c83a 	sub	r3,zero,r16
   115b8:	1884f03a 	xor	r2,r3,r2
   115bc:	1405883a 	add	r2,r2,r16
   115c0:	dfc00117 	ldw	ra,4(sp)
   115c4:	dc000017 	ldw	r16,0(sp)
   115c8:	dec00204 	addi	sp,sp,8
   115cc:	f800283a 	ret
   115d0:	0109c83a 	sub	r4,zero,r4
   115d4:	04000044 	movi	r16,1
   115d8:	283ff40e 	bge	r5,zero,115ac <__alt_mem_Flash_flash_data+0xf40115ac>
   115dc:	014bc83a 	sub	r5,zero,r5
   115e0:	8400005c 	xori	r16,r16,1
   115e4:	003ff106 	br	115ac <__alt_mem_Flash_flash_data+0xf40115ac>

000115e8 <__modsi3>:
   115e8:	defffd04 	addi	sp,sp,-12
   115ec:	dfc00215 	stw	ra,8(sp)
   115f0:	dc400115 	stw	r17,4(sp)
   115f4:	dc000015 	stw	r16,0(sp)
   115f8:	20000c16 	blt	r4,zero,1162c <__modsi3+0x44>
   115fc:	0023883a 	mov	r17,zero
   11600:	0021883a 	mov	r16,zero
   11604:	28000d16 	blt	r5,zero,1163c <__modsi3+0x54>
   11608:	01800044 	movi	r6,1
   1160c:	00115280 	call	11528 <udivmodsi4>
   11610:	1404f03a 	xor	r2,r2,r16
   11614:	8885883a 	add	r2,r17,r2
   11618:	dfc00217 	ldw	ra,8(sp)
   1161c:	dc400117 	ldw	r17,4(sp)
   11620:	dc000017 	ldw	r16,0(sp)
   11624:	dec00304 	addi	sp,sp,12
   11628:	f800283a 	ret
   1162c:	0109c83a 	sub	r4,zero,r4
   11630:	04400044 	movi	r17,1
   11634:	043fffc4 	movi	r16,-1
   11638:	283ff30e 	bge	r5,zero,11608 <__alt_mem_Flash_flash_data+0xf4011608>
   1163c:	014bc83a 	sub	r5,zero,r5
   11640:	003ff106 	br	11608 <__alt_mem_Flash_flash_data+0xf4011608>

00011644 <__udivsi3>:
   11644:	000d883a 	mov	r6,zero
   11648:	00115281 	jmpi	11528 <udivmodsi4>

0001164c <__umodsi3>:
   1164c:	01800044 	movi	r6,1
   11650:	00115281 	jmpi	11528 <udivmodsi4>

00011654 <__adddf3>:
   11654:	02000434 	movhi	r8,16
   11658:	423fffc4 	addi	r8,r8,-1
   1165c:	defffb04 	addi	sp,sp,-20
   11660:	2a12703a 	and	r9,r5,r8
   11664:	2806d7fa 	srli	r3,r5,31
   11668:	3a10703a 	and	r8,r7,r8
   1166c:	3804d53a 	srli	r2,r7,20
   11670:	3014d77a 	srli	r10,r6,29
   11674:	dc000015 	stw	r16,0(sp)
   11678:	481290fa 	slli	r9,r9,3
   1167c:	2820d53a 	srli	r16,r5,20
   11680:	401090fa 	slli	r8,r8,3
   11684:	200ad77a 	srli	r5,r4,29
   11688:	380ed7fa 	srli	r7,r7,31
   1168c:	dc800215 	stw	r18,8(sp)
   11690:	dc400115 	stw	r17,4(sp)
   11694:	dfc00415 	stw	ra,16(sp)
   11698:	dcc00315 	stw	r19,12(sp)
   1169c:	1c803fcc 	andi	r18,r3,255
   116a0:	8401ffcc 	andi	r16,r16,2047
   116a4:	494ab03a 	or	r5,r9,r5
   116a8:	202290fa 	slli	r17,r4,3
   116ac:	1081ffcc 	andi	r2,r2,2047
   116b0:	4290b03a 	or	r8,r8,r10
   116b4:	300c90fa 	slli	r6,r6,3
   116b8:	91c07026 	beq	r18,r7,1187c <__adddf3+0x228>
   116bc:	8087c83a 	sub	r3,r16,r2
   116c0:	00c0b30e 	bge	zero,r3,11990 <__adddf3+0x33c>
   116c4:	10002a1e 	bne	r2,zero,11770 <__adddf3+0x11c>
   116c8:	4184b03a 	or	r2,r8,r6
   116cc:	1000991e 	bne	r2,zero,11934 <__adddf3+0x2e0>
   116d0:	888001cc 	andi	r2,r17,7
   116d4:	10005b26 	beq	r2,zero,11844 <__adddf3+0x1f0>
   116d8:	88c003cc 	andi	r3,r17,15
   116dc:	00800104 	movi	r2,4
   116e0:	18805826 	beq	r3,r2,11844 <__adddf3+0x1f0>
   116e4:	89800104 	addi	r6,r17,4
   116e8:	3463803a 	cmpltu	r17,r6,r17
   116ec:	2c4b883a 	add	r5,r5,r17
   116f0:	2880202c 	andhi	r2,r5,128
   116f4:	9007883a 	mov	r3,r18
   116f8:	3023883a 	mov	r17,r6
   116fc:	10005426 	beq	r2,zero,11850 <__adddf3+0x1fc>
   11700:	84000044 	addi	r16,r16,1
   11704:	0081ffc4 	movi	r2,2047
   11708:	8080c126 	beq	r16,r2,11a10 <__adddf3+0x3bc>
   1170c:	013fe034 	movhi	r4,65408
   11710:	213fffc4 	addi	r4,r4,-1
   11714:	290a703a 	and	r5,r5,r4
   11718:	2804977a 	slli	r2,r5,29
   1171c:	280a927a 	slli	r5,r5,9
   11720:	8822d0fa 	srli	r17,r17,3
   11724:	8401ffcc 	andi	r16,r16,2047
   11728:	2808d33a 	srli	r4,r5,12
   1172c:	1444b03a 	or	r2,r2,r17
   11730:	8401ffcc 	andi	r16,r16,2047
   11734:	800a953a 	slli	r5,r16,20
   11738:	18c03fcc 	andi	r3,r3,255
   1173c:	04000434 	movhi	r16,16
   11740:	180697fa 	slli	r3,r3,31
   11744:	843fffc4 	addi	r16,r16,-1
   11748:	2420703a 	and	r16,r4,r16
   1174c:	8160b03a 	or	r16,r16,r5
   11750:	80c6b03a 	or	r3,r16,r3
   11754:	dfc00417 	ldw	ra,16(sp)
   11758:	dcc00317 	ldw	r19,12(sp)
   1175c:	dc800217 	ldw	r18,8(sp)
   11760:	dc400117 	ldw	r17,4(sp)
   11764:	dc000017 	ldw	r16,0(sp)
   11768:	dec00504 	addi	sp,sp,20
   1176c:	f800283a 	ret
   11770:	0081ffc4 	movi	r2,2047
   11774:	80bfd626 	beq	r16,r2,116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11778:	42002034 	orhi	r8,r8,128
   1177c:	00800e04 	movi	r2,56
   11780:	10c0a616 	blt	r2,r3,11a1c <__adddf3+0x3c8>
   11784:	008007c4 	movi	r2,31
   11788:	10c0c916 	blt	r2,r3,11ab0 <__adddf3+0x45c>
   1178c:	00800804 	movi	r2,32
   11790:	10c5c83a 	sub	r2,r2,r3
   11794:	408e983a 	sll	r7,r8,r2
   11798:	30c8d83a 	srl	r4,r6,r3
   1179c:	3084983a 	sll	r2,r6,r2
   117a0:	40c6d83a 	srl	r3,r8,r3
   117a4:	390cb03a 	or	r6,r7,r4
   117a8:	1004c03a 	cmpne	r2,r2,zero
   117ac:	308cb03a 	or	r6,r6,r2
   117b0:	898dc83a 	sub	r6,r17,r6
   117b4:	89a3803a 	cmpltu	r17,r17,r6
   117b8:	28cbc83a 	sub	r5,r5,r3
   117bc:	2c4bc83a 	sub	r5,r5,r17
   117c0:	3023883a 	mov	r17,r6
   117c4:	2880202c 	andhi	r2,r5,128
   117c8:	10006d26 	beq	r2,zero,11980 <__adddf3+0x32c>
   117cc:	04c02034 	movhi	r19,128
   117d0:	9cffffc4 	addi	r19,r19,-1
   117d4:	2ce6703a 	and	r19,r5,r19
   117d8:	98007e26 	beq	r19,zero,119d4 <__adddf3+0x380>
   117dc:	9809883a 	mov	r4,r19
   117e0:	0013bf00 	call	13bf0 <__clzsi2>
   117e4:	10fffe04 	addi	r3,r2,-8
   117e8:	010007c4 	movi	r4,31
   117ec:	20c07f16 	blt	r4,r3,119ec <__adddf3+0x398>
   117f0:	01400a04 	movi	r5,40
   117f4:	2885c83a 	sub	r2,r5,r2
   117f8:	888ad83a 	srl	r5,r17,r2
   117fc:	98e6983a 	sll	r19,r19,r3
   11800:	88e2983a 	sll	r17,r17,r3
   11804:	2ce6b03a 	or	r19,r5,r19
   11808:	1c007c16 	blt	r3,r16,119fc <__adddf3+0x3a8>
   1180c:	1c21c83a 	sub	r16,r3,r16
   11810:	81400044 	addi	r5,r16,1
   11814:	00c007c4 	movi	r3,31
   11818:	19409816 	blt	r3,r5,11a7c <__adddf3+0x428>
   1181c:	1c21c83a 	sub	r16,r3,r16
   11820:	8c08983a 	sll	r4,r17,r16
   11824:	8946d83a 	srl	r3,r17,r5
   11828:	9c20983a 	sll	r16,r19,r16
   1182c:	2008c03a 	cmpne	r4,r4,zero
   11830:	994ad83a 	srl	r5,r19,r5
   11834:	1c06b03a 	or	r3,r3,r16
   11838:	1922b03a 	or	r17,r3,r4
   1183c:	0021883a 	mov	r16,zero
   11840:	003fa306 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11844:	2880202c 	andhi	r2,r5,128
   11848:	9007883a 	mov	r3,r18
   1184c:	103fac1e 	bne	r2,zero,11700 <__alt_mem_Flash_flash_data+0xf4011700>
   11850:	2804977a 	slli	r2,r5,29
   11854:	8822d0fa 	srli	r17,r17,3
   11858:	0101ffc4 	movi	r4,2047
   1185c:	280ad0fa 	srli	r5,r5,3
   11860:	1444b03a 	or	r2,r2,r17
   11864:	81002c26 	beq	r16,r4,11918 <__adddf3+0x2c4>
   11868:	8120703a 	and	r16,r16,r4
   1186c:	01000434 	movhi	r4,16
   11870:	213fffc4 	addi	r4,r4,-1
   11874:	2908703a 	and	r4,r5,r4
   11878:	003fad06 	br	11730 <__alt_mem_Flash_flash_data+0xf4011730>
   1187c:	8089c83a 	sub	r4,r16,r2
   11880:	01006a0e 	bge	zero,r4,11a2c <__adddf3+0x3d8>
   11884:	10003326 	beq	r2,zero,11954 <__adddf3+0x300>
   11888:	0081ffc4 	movi	r2,2047
   1188c:	80bf9026 	beq	r16,r2,116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11890:	42002034 	orhi	r8,r8,128
   11894:	00800e04 	movi	r2,56
   11898:	1100b116 	blt	r2,r4,11b60 <__adddf3+0x50c>
   1189c:	008007c4 	movi	r2,31
   118a0:	1100e216 	blt	r2,r4,11c2c <__adddf3+0x5d8>
   118a4:	00800804 	movi	r2,32
   118a8:	1105c83a 	sub	r2,r2,r4
   118ac:	4092983a 	sll	r9,r8,r2
   118b0:	310ed83a 	srl	r7,r6,r4
   118b4:	3084983a 	sll	r2,r6,r2
   118b8:	4110d83a 	srl	r8,r8,r4
   118bc:	49ccb03a 	or	r6,r9,r7
   118c0:	1004c03a 	cmpne	r2,r2,zero
   118c4:	308cb03a 	or	r6,r6,r2
   118c8:	344d883a 	add	r6,r6,r17
   118cc:	3463803a 	cmpltu	r17,r6,r17
   118d0:	414b883a 	add	r5,r8,r5
   118d4:	2c4b883a 	add	r5,r5,r17
   118d8:	3023883a 	mov	r17,r6
   118dc:	2880202c 	andhi	r2,r5,128
   118e0:	10002726 	beq	r2,zero,11980 <__adddf3+0x32c>
   118e4:	84000044 	addi	r16,r16,1
   118e8:	0081ffc4 	movi	r2,2047
   118ec:	8080ae26 	beq	r16,r2,11ba8 <__adddf3+0x554>
   118f0:	00bfe034 	movhi	r2,65408
   118f4:	10bfffc4 	addi	r2,r2,-1
   118f8:	288a703a 	and	r5,r5,r2
   118fc:	880cd07a 	srli	r6,r17,1
   11900:	280897fa 	slli	r4,r5,31
   11904:	88c0004c 	andi	r3,r17,1
   11908:	30e2b03a 	or	r17,r6,r3
   1190c:	280ad07a 	srli	r5,r5,1
   11910:	8922b03a 	or	r17,r17,r4
   11914:	003f6e06 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11918:	1148b03a 	or	r4,r2,r5
   1191c:	20003c26 	beq	r4,zero,11a10 <__adddf3+0x3bc>
   11920:	29000234 	orhi	r4,r5,8
   11924:	01400434 	movhi	r5,16
   11928:	297fffc4 	addi	r5,r5,-1
   1192c:	2148703a 	and	r4,r4,r5
   11930:	003f7f06 	br	11730 <__alt_mem_Flash_flash_data+0xf4011730>
   11934:	18ffffc4 	addi	r3,r3,-1
   11938:	18004d1e 	bne	r3,zero,11a70 <__adddf3+0x41c>
   1193c:	898dc83a 	sub	r6,r17,r6
   11940:	89a3803a 	cmpltu	r17,r17,r6
   11944:	2a0bc83a 	sub	r5,r5,r8
   11948:	2c4bc83a 	sub	r5,r5,r17
   1194c:	3023883a 	mov	r17,r6
   11950:	003f9c06 	br	117c4 <__alt_mem_Flash_flash_data+0xf40117c4>
   11954:	4184b03a 	or	r2,r8,r6
   11958:	103f5d26 	beq	r2,zero,116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   1195c:	213fffc4 	addi	r4,r4,-1
   11960:	203fd926 	beq	r4,zero,118c8 <__alt_mem_Flash_flash_data+0xf40118c8>
   11964:	0081ffc4 	movi	r2,2047
   11968:	80bfca1e 	bne	r16,r2,11894 <__alt_mem_Flash_flash_data+0xf4011894>
   1196c:	003f5806 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11970:	10c8b03a 	or	r4,r2,r3
   11974:	20008b26 	beq	r4,zero,11ba4 <__adddf3+0x550>
   11978:	100b883a 	mov	r5,r2
   1197c:	1823883a 	mov	r17,r3
   11980:	888001cc 	andi	r2,r17,7
   11984:	103f541e 	bne	r2,zero,116d8 <__alt_mem_Flash_flash_data+0xf40116d8>
   11988:	9007883a 	mov	r3,r18
   1198c:	003fb006 	br	11850 <__alt_mem_Flash_flash_data+0xf4011850>
   11990:	1800531e 	bne	r3,zero,11ae0 <__adddf3+0x48c>
   11994:	80800044 	addi	r2,r16,1
   11998:	1081ffcc 	andi	r2,r2,2047
   1199c:	00c00044 	movi	r3,1
   119a0:	1880990e 	bge	r3,r2,11c08 <__adddf3+0x5b4>
   119a4:	8985c83a 	sub	r2,r17,r6
   119a8:	8887803a 	cmpltu	r3,r17,r2
   119ac:	2a27c83a 	sub	r19,r5,r8
   119b0:	98e7c83a 	sub	r19,r19,r3
   119b4:	98c0202c 	andhi	r3,r19,128
   119b8:	18006226 	beq	r3,zero,11b44 <__adddf3+0x4f0>
   119bc:	3463c83a 	sub	r17,r6,r17
   119c0:	4151c83a 	sub	r8,r8,r5
   119c4:	344d803a 	cmpltu	r6,r6,r17
   119c8:	41a7c83a 	sub	r19,r8,r6
   119cc:	3825883a 	mov	r18,r7
   119d0:	983f821e 	bne	r19,zero,117dc <__alt_mem_Flash_flash_data+0xf40117dc>
   119d4:	8809883a 	mov	r4,r17
   119d8:	0013bf00 	call	13bf0 <__clzsi2>
   119dc:	10800804 	addi	r2,r2,32
   119e0:	10fffe04 	addi	r3,r2,-8
   119e4:	010007c4 	movi	r4,31
   119e8:	20ff810e 	bge	r4,r3,117f0 <__alt_mem_Flash_flash_data+0xf40117f0>
   119ec:	14fff604 	addi	r19,r2,-40
   119f0:	8ce6983a 	sll	r19,r17,r19
   119f4:	0023883a 	mov	r17,zero
   119f8:	1c3f840e 	bge	r3,r16,1180c <__alt_mem_Flash_flash_data+0xf401180c>
   119fc:	017fe034 	movhi	r5,65408
   11a00:	297fffc4 	addi	r5,r5,-1
   11a04:	80e1c83a 	sub	r16,r16,r3
   11a08:	994a703a 	and	r5,r19,r5
   11a0c:	003f3006 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11a10:	0009883a 	mov	r4,zero
   11a14:	0005883a 	mov	r2,zero
   11a18:	003f4506 	br	11730 <__alt_mem_Flash_flash_data+0xf4011730>
   11a1c:	418cb03a 	or	r6,r8,r6
   11a20:	300cc03a 	cmpne	r6,r6,zero
   11a24:	0007883a 	mov	r3,zero
   11a28:	003f6106 	br	117b0 <__alt_mem_Flash_flash_data+0xf40117b0>
   11a2c:	2000921e 	bne	r4,zero,11c78 <__adddf3+0x624>
   11a30:	80800044 	addi	r2,r16,1
   11a34:	11c1ffcc 	andi	r7,r2,2047
   11a38:	01000044 	movi	r4,1
   11a3c:	21c0610e 	bge	r4,r7,11bc4 <__adddf3+0x570>
   11a40:	0101ffc4 	movi	r4,2047
   11a44:	1100a326 	beq	r2,r4,11cd4 <__adddf3+0x680>
   11a48:	344d883a 	add	r6,r6,r17
   11a4c:	3463803a 	cmpltu	r17,r6,r17
   11a50:	414b883a 	add	r5,r8,r5
   11a54:	2c4b883a 	add	r5,r5,r17
   11a58:	282297fa 	slli	r17,r5,31
   11a5c:	300cd07a 	srli	r6,r6,1
   11a60:	280ad07a 	srli	r5,r5,1
   11a64:	1021883a 	mov	r16,r2
   11a68:	89a2b03a 	or	r17,r17,r6
   11a6c:	003f1806 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11a70:	0081ffc4 	movi	r2,2047
   11a74:	80bf411e 	bne	r16,r2,1177c <__alt_mem_Flash_flash_data+0xf401177c>
   11a78:	003f1506 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11a7c:	80bff844 	addi	r2,r16,-31
   11a80:	00c00804 	movi	r3,32
   11a84:	9884d83a 	srl	r2,r19,r2
   11a88:	28c04a26 	beq	r5,r3,11bb4 <__adddf3+0x560>
   11a8c:	00c00fc4 	movi	r3,63
   11a90:	1c21c83a 	sub	r16,r3,r16
   11a94:	9c26983a 	sll	r19,r19,r16
   11a98:	9c62b03a 	or	r17,r19,r17
   11a9c:	8822c03a 	cmpne	r17,r17,zero
   11aa0:	88a2b03a 	or	r17,r17,r2
   11aa4:	000b883a 	mov	r5,zero
   11aa8:	0021883a 	mov	r16,zero
   11aac:	003fb406 	br	11980 <__alt_mem_Flash_flash_data+0xf4011980>
   11ab0:	18bff804 	addi	r2,r3,-32
   11ab4:	01000804 	movi	r4,32
   11ab8:	4084d83a 	srl	r2,r8,r2
   11abc:	19003f26 	beq	r3,r4,11bbc <__adddf3+0x568>
   11ac0:	01001004 	movi	r4,64
   11ac4:	20c7c83a 	sub	r3,r4,r3
   11ac8:	40d0983a 	sll	r8,r8,r3
   11acc:	418cb03a 	or	r6,r8,r6
   11ad0:	300cc03a 	cmpne	r6,r6,zero
   11ad4:	308cb03a 	or	r6,r6,r2
   11ad8:	0007883a 	mov	r3,zero
   11adc:	003f3406 	br	117b0 <__alt_mem_Flash_flash_data+0xf40117b0>
   11ae0:	80002326 	beq	r16,zero,11b70 <__adddf3+0x51c>
   11ae4:	0101ffc4 	movi	r4,2047
   11ae8:	11005e26 	beq	r2,r4,11c64 <__adddf3+0x610>
   11aec:	00c7c83a 	sub	r3,zero,r3
   11af0:	29402034 	orhi	r5,r5,128
   11af4:	01000e04 	movi	r4,56
   11af8:	20c07216 	blt	r4,r3,11cc4 <__adddf3+0x670>
   11afc:	010007c4 	movi	r4,31
   11b00:	20c0ce16 	blt	r4,r3,11e3c <__adddf3+0x7e8>
   11b04:	01000804 	movi	r4,32
   11b08:	20c9c83a 	sub	r4,r4,r3
   11b0c:	2914983a 	sll	r10,r5,r4
   11b10:	88d2d83a 	srl	r9,r17,r3
   11b14:	8908983a 	sll	r4,r17,r4
   11b18:	28c6d83a 	srl	r3,r5,r3
   11b1c:	5262b03a 	or	r17,r10,r9
   11b20:	2008c03a 	cmpne	r4,r4,zero
   11b24:	8922b03a 	or	r17,r17,r4
   11b28:	3463c83a 	sub	r17,r6,r17
   11b2c:	40c7c83a 	sub	r3,r8,r3
   11b30:	344d803a 	cmpltu	r6,r6,r17
   11b34:	198bc83a 	sub	r5,r3,r6
   11b38:	1021883a 	mov	r16,r2
   11b3c:	3825883a 	mov	r18,r7
   11b40:	003f2006 	br	117c4 <__alt_mem_Flash_flash_data+0xf40117c4>
   11b44:	9886b03a 	or	r3,r19,r2
   11b48:	1800141e 	bne	r3,zero,11b9c <__adddf3+0x548>
   11b4c:	0007883a 	mov	r3,zero
   11b50:	000b883a 	mov	r5,zero
   11b54:	0023883a 	mov	r17,zero
   11b58:	0021883a 	mov	r16,zero
   11b5c:	003f3c06 	br	11850 <__alt_mem_Flash_flash_data+0xf4011850>
   11b60:	418cb03a 	or	r6,r8,r6
   11b64:	300cc03a 	cmpne	r6,r6,zero
   11b68:	0011883a 	mov	r8,zero
   11b6c:	003f5606 	br	118c8 <__alt_mem_Flash_flash_data+0xf40118c8>
   11b70:	2c48b03a 	or	r4,r5,r17
   11b74:	20003b26 	beq	r4,zero,11c64 <__adddf3+0x610>
   11b78:	00c6303a 	nor	r3,zero,r3
   11b7c:	1800371e 	bne	r3,zero,11c5c <__adddf3+0x608>
   11b80:	3463c83a 	sub	r17,r6,r17
   11b84:	414bc83a 	sub	r5,r8,r5
   11b88:	344d803a 	cmpltu	r6,r6,r17
   11b8c:	298bc83a 	sub	r5,r5,r6
   11b90:	1021883a 	mov	r16,r2
   11b94:	3825883a 	mov	r18,r7
   11b98:	003f0a06 	br	117c4 <__alt_mem_Flash_flash_data+0xf40117c4>
   11b9c:	1023883a 	mov	r17,r2
   11ba0:	003f0d06 	br	117d8 <__alt_mem_Flash_flash_data+0xf40117d8>
   11ba4:	0007883a 	mov	r3,zero
   11ba8:	000b883a 	mov	r5,zero
   11bac:	0023883a 	mov	r17,zero
   11bb0:	003f2706 	br	11850 <__alt_mem_Flash_flash_data+0xf4011850>
   11bb4:	0027883a 	mov	r19,zero
   11bb8:	003fb706 	br	11a98 <__alt_mem_Flash_flash_data+0xf4011a98>
   11bbc:	0011883a 	mov	r8,zero
   11bc0:	003fc206 	br	11acc <__alt_mem_Flash_flash_data+0xf4011acc>
   11bc4:	2c44b03a 	or	r2,r5,r17
   11bc8:	8000871e 	bne	r16,zero,11de8 <__adddf3+0x794>
   11bcc:	1000b126 	beq	r2,zero,11e94 <__adddf3+0x840>
   11bd0:	4184b03a 	or	r2,r8,r6
   11bd4:	103ebe26 	beq	r2,zero,116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11bd8:	3445883a 	add	r2,r6,r17
   11bdc:	1463803a 	cmpltu	r17,r2,r17
   11be0:	414b883a 	add	r5,r8,r5
   11be4:	2c4b883a 	add	r5,r5,r17
   11be8:	28c0202c 	andhi	r3,r5,128
   11bec:	1023883a 	mov	r17,r2
   11bf0:	183f6326 	beq	r3,zero,11980 <__alt_mem_Flash_flash_data+0xf4011980>
   11bf4:	00bfe034 	movhi	r2,65408
   11bf8:	10bfffc4 	addi	r2,r2,-1
   11bfc:	2021883a 	mov	r16,r4
   11c00:	288a703a 	and	r5,r5,r2
   11c04:	003eb206 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11c08:	2c44b03a 	or	r2,r5,r17
   11c0c:	8000251e 	bne	r16,zero,11ca4 <__adddf3+0x650>
   11c10:	10004b1e 	bne	r2,zero,11d40 <__adddf3+0x6ec>
   11c14:	4184b03a 	or	r2,r8,r6
   11c18:	103fe226 	beq	r2,zero,11ba4 <__alt_mem_Flash_flash_data+0xf4011ba4>
   11c1c:	400b883a 	mov	r5,r8
   11c20:	3023883a 	mov	r17,r6
   11c24:	3825883a 	mov	r18,r7
   11c28:	003ea906 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11c2c:	20bff804 	addi	r2,r4,-32
   11c30:	01c00804 	movi	r7,32
   11c34:	4084d83a 	srl	r2,r8,r2
   11c38:	21c07e26 	beq	r4,r7,11e34 <__adddf3+0x7e0>
   11c3c:	01c01004 	movi	r7,64
   11c40:	3909c83a 	sub	r4,r7,r4
   11c44:	4110983a 	sll	r8,r8,r4
   11c48:	418cb03a 	or	r6,r8,r6
   11c4c:	300cc03a 	cmpne	r6,r6,zero
   11c50:	308cb03a 	or	r6,r6,r2
   11c54:	0011883a 	mov	r8,zero
   11c58:	003f1b06 	br	118c8 <__alt_mem_Flash_flash_data+0xf40118c8>
   11c5c:	0101ffc4 	movi	r4,2047
   11c60:	113fa41e 	bne	r2,r4,11af4 <__alt_mem_Flash_flash_data+0xf4011af4>
   11c64:	400b883a 	mov	r5,r8
   11c68:	3023883a 	mov	r17,r6
   11c6c:	1021883a 	mov	r16,r2
   11c70:	3825883a 	mov	r18,r7
   11c74:	003e9606 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11c78:	80001a1e 	bne	r16,zero,11ce4 <__adddf3+0x690>
   11c7c:	2c4eb03a 	or	r7,r5,r17
   11c80:	38005526 	beq	r7,zero,11dd8 <__adddf3+0x784>
   11c84:	0108303a 	nor	r4,zero,r4
   11c88:	2000511e 	bne	r4,zero,11dd0 <__adddf3+0x77c>
   11c8c:	89a3883a 	add	r17,r17,r6
   11c90:	414b883a 	add	r5,r8,r5
   11c94:	898d803a 	cmpltu	r6,r17,r6
   11c98:	298b883a 	add	r5,r5,r6
   11c9c:	1021883a 	mov	r16,r2
   11ca0:	003f0e06 	br	118dc <__alt_mem_Flash_flash_data+0xf40118dc>
   11ca4:	1000341e 	bne	r2,zero,11d78 <__adddf3+0x724>
   11ca8:	4184b03a 	or	r2,r8,r6
   11cac:	10006f26 	beq	r2,zero,11e6c <__adddf3+0x818>
   11cb0:	400b883a 	mov	r5,r8
   11cb4:	3023883a 	mov	r17,r6
   11cb8:	3825883a 	mov	r18,r7
   11cbc:	0401ffc4 	movi	r16,2047
   11cc0:	003e8306 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11cc4:	2c62b03a 	or	r17,r5,r17
   11cc8:	8822c03a 	cmpne	r17,r17,zero
   11ccc:	0007883a 	mov	r3,zero
   11cd0:	003f9506 	br	11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11cd4:	1021883a 	mov	r16,r2
   11cd8:	000b883a 	mov	r5,zero
   11cdc:	0023883a 	mov	r17,zero
   11ce0:	003edb06 	br	11850 <__alt_mem_Flash_flash_data+0xf4011850>
   11ce4:	01c1ffc4 	movi	r7,2047
   11ce8:	11c03b26 	beq	r2,r7,11dd8 <__adddf3+0x784>
   11cec:	0109c83a 	sub	r4,zero,r4
   11cf0:	29402034 	orhi	r5,r5,128
   11cf4:	01c00e04 	movi	r7,56
   11cf8:	39006216 	blt	r7,r4,11e84 <__adddf3+0x830>
   11cfc:	01c007c4 	movi	r7,31
   11d00:	39006b16 	blt	r7,r4,11eb0 <__adddf3+0x85c>
   11d04:	01c00804 	movi	r7,32
   11d08:	390fc83a 	sub	r7,r7,r4
   11d0c:	29d4983a 	sll	r10,r5,r7
   11d10:	8912d83a 	srl	r9,r17,r4
   11d14:	89ce983a 	sll	r7,r17,r7
   11d18:	2908d83a 	srl	r4,r5,r4
   11d1c:	5262b03a 	or	r17,r10,r9
   11d20:	380ac03a 	cmpne	r5,r7,zero
   11d24:	8962b03a 	or	r17,r17,r5
   11d28:	89a3883a 	add	r17,r17,r6
   11d2c:	2211883a 	add	r8,r4,r8
   11d30:	898d803a 	cmpltu	r6,r17,r6
   11d34:	418b883a 	add	r5,r8,r6
   11d38:	1021883a 	mov	r16,r2
   11d3c:	003ee706 	br	118dc <__alt_mem_Flash_flash_data+0xf40118dc>
   11d40:	4184b03a 	or	r2,r8,r6
   11d44:	103e6226 	beq	r2,zero,116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11d48:	8987c83a 	sub	r3,r17,r6
   11d4c:	88c9803a 	cmpltu	r4,r17,r3
   11d50:	2a05c83a 	sub	r2,r5,r8
   11d54:	1105c83a 	sub	r2,r2,r4
   11d58:	1100202c 	andhi	r4,r2,128
   11d5c:	203f0426 	beq	r4,zero,11970 <__alt_mem_Flash_flash_data+0xf4011970>
   11d60:	3463c83a 	sub	r17,r6,r17
   11d64:	414bc83a 	sub	r5,r8,r5
   11d68:	344d803a 	cmpltu	r6,r6,r17
   11d6c:	298bc83a 	sub	r5,r5,r6
   11d70:	3825883a 	mov	r18,r7
   11d74:	003e5606 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11d78:	4184b03a 	or	r2,r8,r6
   11d7c:	10002b26 	beq	r2,zero,11e2c <__adddf3+0x7d8>
   11d80:	2804d0fa 	srli	r2,r5,3
   11d84:	8822d0fa 	srli	r17,r17,3
   11d88:	280a977a 	slli	r5,r5,29
   11d8c:	10c0022c 	andhi	r3,r2,8
   11d90:	2c62b03a 	or	r17,r5,r17
   11d94:	18000826 	beq	r3,zero,11db8 <__adddf3+0x764>
   11d98:	4008d0fa 	srli	r4,r8,3
   11d9c:	20c0022c 	andhi	r3,r4,8
   11da0:	1800051e 	bne	r3,zero,11db8 <__adddf3+0x764>
   11da4:	300cd0fa 	srli	r6,r6,3
   11da8:	4010977a 	slli	r8,r8,29
   11dac:	2005883a 	mov	r2,r4
   11db0:	3825883a 	mov	r18,r7
   11db4:	41a2b03a 	or	r17,r8,r6
   11db8:	880ad77a 	srli	r5,r17,29
   11dbc:	100490fa 	slli	r2,r2,3
   11dc0:	882290fa 	slli	r17,r17,3
   11dc4:	0401ffc4 	movi	r16,2047
   11dc8:	288ab03a 	or	r5,r5,r2
   11dcc:	003e4006 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11dd0:	01c1ffc4 	movi	r7,2047
   11dd4:	11ffc71e 	bne	r2,r7,11cf4 <__alt_mem_Flash_flash_data+0xf4011cf4>
   11dd8:	400b883a 	mov	r5,r8
   11ddc:	3023883a 	mov	r17,r6
   11de0:	1021883a 	mov	r16,r2
   11de4:	003e3a06 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11de8:	10002d26 	beq	r2,zero,11ea0 <__adddf3+0x84c>
   11dec:	4184b03a 	or	r2,r8,r6
   11df0:	10000e26 	beq	r2,zero,11e2c <__adddf3+0x7d8>
   11df4:	2804d0fa 	srli	r2,r5,3
   11df8:	8822d0fa 	srli	r17,r17,3
   11dfc:	280a977a 	slli	r5,r5,29
   11e00:	10c0022c 	andhi	r3,r2,8
   11e04:	2c62b03a 	or	r17,r5,r17
   11e08:	183feb26 	beq	r3,zero,11db8 <__alt_mem_Flash_flash_data+0xf4011db8>
   11e0c:	4008d0fa 	srli	r4,r8,3
   11e10:	20c0022c 	andhi	r3,r4,8
   11e14:	183fe81e 	bne	r3,zero,11db8 <__alt_mem_Flash_flash_data+0xf4011db8>
   11e18:	300cd0fa 	srli	r6,r6,3
   11e1c:	4010977a 	slli	r8,r8,29
   11e20:	2005883a 	mov	r2,r4
   11e24:	41a2b03a 	or	r17,r8,r6
   11e28:	003fe306 	br	11db8 <__alt_mem_Flash_flash_data+0xf4011db8>
   11e2c:	0401ffc4 	movi	r16,2047
   11e30:	003e2706 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11e34:	0011883a 	mov	r8,zero
   11e38:	003f8306 	br	11c48 <__alt_mem_Flash_flash_data+0xf4011c48>
   11e3c:	193ff804 	addi	r4,r3,-32
   11e40:	02400804 	movi	r9,32
   11e44:	2908d83a 	srl	r4,r5,r4
   11e48:	1a402526 	beq	r3,r9,11ee0 <__adddf3+0x88c>
   11e4c:	02401004 	movi	r9,64
   11e50:	48c7c83a 	sub	r3,r9,r3
   11e54:	28ca983a 	sll	r5,r5,r3
   11e58:	2c62b03a 	or	r17,r5,r17
   11e5c:	8822c03a 	cmpne	r17,r17,zero
   11e60:	8922b03a 	or	r17,r17,r4
   11e64:	0007883a 	mov	r3,zero
   11e68:	003f2f06 	br	11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11e6c:	01402034 	movhi	r5,128
   11e70:	0007883a 	mov	r3,zero
   11e74:	297fffc4 	addi	r5,r5,-1
   11e78:	047ffe04 	movi	r17,-8
   11e7c:	0401ffc4 	movi	r16,2047
   11e80:	003e7306 	br	11850 <__alt_mem_Flash_flash_data+0xf4011850>
   11e84:	2c62b03a 	or	r17,r5,r17
   11e88:	8822c03a 	cmpne	r17,r17,zero
   11e8c:	0009883a 	mov	r4,zero
   11e90:	003fa506 	br	11d28 <__alt_mem_Flash_flash_data+0xf4011d28>
   11e94:	400b883a 	mov	r5,r8
   11e98:	3023883a 	mov	r17,r6
   11e9c:	003e0c06 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11ea0:	400b883a 	mov	r5,r8
   11ea4:	3023883a 	mov	r17,r6
   11ea8:	0401ffc4 	movi	r16,2047
   11eac:	003e0806 	br	116d0 <__alt_mem_Flash_flash_data+0xf40116d0>
   11eb0:	21fff804 	addi	r7,r4,-32
   11eb4:	02400804 	movi	r9,32
   11eb8:	29ced83a 	srl	r7,r5,r7
   11ebc:	22400a26 	beq	r4,r9,11ee8 <__adddf3+0x894>
   11ec0:	02401004 	movi	r9,64
   11ec4:	4909c83a 	sub	r4,r9,r4
   11ec8:	290a983a 	sll	r5,r5,r4
   11ecc:	2c62b03a 	or	r17,r5,r17
   11ed0:	8822c03a 	cmpne	r17,r17,zero
   11ed4:	89e2b03a 	or	r17,r17,r7
   11ed8:	0009883a 	mov	r4,zero
   11edc:	003f9206 	br	11d28 <__alt_mem_Flash_flash_data+0xf4011d28>
   11ee0:	000b883a 	mov	r5,zero
   11ee4:	003fdc06 	br	11e58 <__alt_mem_Flash_flash_data+0xf4011e58>
   11ee8:	000b883a 	mov	r5,zero
   11eec:	003ff706 	br	11ecc <__alt_mem_Flash_flash_data+0xf4011ecc>

00011ef0 <__divdf3>:
   11ef0:	defff204 	addi	sp,sp,-56
   11ef4:	dd000815 	stw	r20,32(sp)
   11ef8:	2828d53a 	srli	r20,r5,20
   11efc:	dd800a15 	stw	r22,40(sp)
   11f00:	282cd7fa 	srli	r22,r5,31
   11f04:	dc000415 	stw	r16,16(sp)
   11f08:	04000434 	movhi	r16,16
   11f0c:	df000c15 	stw	fp,48(sp)
   11f10:	dcc00715 	stw	r19,28(sp)
   11f14:	dc800615 	stw	r18,24(sp)
   11f18:	dc400515 	stw	r17,20(sp)
   11f1c:	843fffc4 	addi	r16,r16,-1
   11f20:	dfc00d15 	stw	ra,52(sp)
   11f24:	ddc00b15 	stw	r23,44(sp)
   11f28:	dd400915 	stw	r21,36(sp)
   11f2c:	a501ffcc 	andi	r20,r20,2047
   11f30:	2025883a 	mov	r18,r4
   11f34:	2027883a 	mov	r19,r4
   11f38:	2c22703a 	and	r17,r5,r16
   11f3c:	b7003fcc 	andi	fp,r22,255
   11f40:	a0005e26 	beq	r20,zero,120bc <__divdf3+0x1cc>
   11f44:	0081ffc4 	movi	r2,2047
   11f48:	a0803526 	beq	r20,r2,12020 <__divdf3+0x130>
   11f4c:	8c000434 	orhi	r16,r17,16
   11f50:	2004d77a 	srli	r2,r4,29
   11f54:	802090fa 	slli	r16,r16,3
   11f58:	202690fa 	slli	r19,r4,3
   11f5c:	a53f0044 	addi	r20,r20,-1023
   11f60:	80a2b03a 	or	r17,r16,r2
   11f64:	0025883a 	mov	r18,zero
   11f68:	0011883a 	mov	r8,zero
   11f6c:	380ad53a 	srli	r5,r7,20
   11f70:	382ed7fa 	srli	r23,r7,31
   11f74:	04000434 	movhi	r16,16
   11f78:	843fffc4 	addi	r16,r16,-1
   11f7c:	2941ffcc 	andi	r5,r5,2047
   11f80:	302b883a 	mov	r21,r6
   11f84:	3c20703a 	and	r16,r7,r16
   11f88:	ba403fcc 	andi	r9,r23,255
   11f8c:	28006726 	beq	r5,zero,1212c <__divdf3+0x23c>
   11f90:	0081ffc4 	movi	r2,2047
   11f94:	28805f26 	beq	r5,r2,12114 <__divdf3+0x224>
   11f98:	84000434 	orhi	r16,r16,16
   11f9c:	3004d77a 	srli	r2,r6,29
   11fa0:	802090fa 	slli	r16,r16,3
   11fa4:	302a90fa 	slli	r21,r6,3
   11fa8:	297f0044 	addi	r5,r5,-1023
   11fac:	80a0b03a 	or	r16,r16,r2
   11fb0:	000f883a 	mov	r7,zero
   11fb4:	3c86b03a 	or	r3,r7,r18
   11fb8:	180690ba 	slli	r3,r3,2
   11fbc:	00800074 	movhi	r2,1
   11fc0:	1087f804 	addi	r2,r2,8160
   11fc4:	1887883a 	add	r3,r3,r2
   11fc8:	18c00017 	ldw	r3,0(r3)
   11fcc:	b5c8f03a 	xor	r4,r22,r23
   11fd0:	200d883a 	mov	r6,r4
   11fd4:	24803fcc 	andi	r18,r4,255
   11fd8:	a169c83a 	sub	r20,r20,r5
   11fdc:	1800683a 	jmp	r3
   11fe0:	00012228 	cmpgeui	zero,zero,1160
   11fe4:	00012058 	cmpnei	zero,zero,1153
   11fe8:	000121ec 	andhi	zero,zero,1159
   11fec:	0001203c 	xorhi	zero,zero,1152
   11ff0:	000121ec 	andhi	zero,zero,1159
   11ff4:	000121c0 	call	121c <Game+0x1e8>
   11ff8:	000121ec 	andhi	zero,zero,1159
   11ffc:	0001203c 	xorhi	zero,zero,1152
   12000:	00012058 	cmpnei	zero,zero,1153
   12004:	00012058 	cmpnei	zero,zero,1153
   12008:	000121c0 	call	121c <Game+0x1e8>
   1200c:	0001203c 	xorhi	zero,zero,1152
   12010:	0001204c 	andi	zero,zero,1153
   12014:	0001204c 	andi	zero,zero,1153
   12018:	0001204c 	andi	zero,zero,1153
   1201c:	000121fc 	xorhi	zero,zero,1159
   12020:	8904b03a 	or	r2,r17,r4
   12024:	1000631e 	bne	r2,zero,121b4 <__divdf3+0x2c4>
   12028:	04800204 	movi	r18,8
   1202c:	0023883a 	mov	r17,zero
   12030:	0027883a 	mov	r19,zero
   12034:	02000084 	movi	r8,2
   12038:	003fcc06 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   1203c:	8023883a 	mov	r17,r16
   12040:	a827883a 	mov	r19,r21
   12044:	4839883a 	mov	fp,r9
   12048:	3811883a 	mov	r8,r7
   1204c:	00800084 	movi	r2,2
   12050:	40812a1e 	bne	r8,r2,124fc <__divdf3+0x60c>
   12054:	e025883a 	mov	r18,fp
   12058:	9180004c 	andi	r6,r18,1
   1205c:	0101ffc4 	movi	r4,2047
   12060:	000b883a 	mov	r5,zero
   12064:	0027883a 	mov	r19,zero
   12068:	2008953a 	slli	r4,r4,20
   1206c:	30c03fcc 	andi	r3,r6,255
   12070:	04000434 	movhi	r16,16
   12074:	180697fa 	slli	r3,r3,31
   12078:	843fffc4 	addi	r16,r16,-1
   1207c:	2c20703a 	and	r16,r5,r16
   12080:	8120b03a 	or	r16,r16,r4
   12084:	80c6b03a 	or	r3,r16,r3
   12088:	9805883a 	mov	r2,r19
   1208c:	dfc00d17 	ldw	ra,52(sp)
   12090:	df000c17 	ldw	fp,48(sp)
   12094:	ddc00b17 	ldw	r23,44(sp)
   12098:	dd800a17 	ldw	r22,40(sp)
   1209c:	dd400917 	ldw	r21,36(sp)
   120a0:	dd000817 	ldw	r20,32(sp)
   120a4:	dcc00717 	ldw	r19,28(sp)
   120a8:	dc800617 	ldw	r18,24(sp)
   120ac:	dc400517 	ldw	r17,20(sp)
   120b0:	dc000417 	ldw	r16,16(sp)
   120b4:	dec00e04 	addi	sp,sp,56
   120b8:	f800283a 	ret
   120bc:	8904b03a 	or	r2,r17,r4
   120c0:	10003726 	beq	r2,zero,121a0 <__divdf3+0x2b0>
   120c4:	88011c26 	beq	r17,zero,12538 <__divdf3+0x648>
   120c8:	8809883a 	mov	r4,r17
   120cc:	d9800315 	stw	r6,12(sp)
   120d0:	d9c00115 	stw	r7,4(sp)
   120d4:	0013bf00 	call	13bf0 <__clzsi2>
   120d8:	d9800317 	ldw	r6,12(sp)
   120dc:	d9c00117 	ldw	r7,4(sp)
   120e0:	1007883a 	mov	r3,r2
   120e4:	01000a04 	movi	r4,40
   120e8:	1cfffe04 	addi	r19,r3,-8
   120ec:	20c9c83a 	sub	r4,r4,r3
   120f0:	8cca983a 	sll	r5,r17,r19
   120f4:	9108d83a 	srl	r4,r18,r4
   120f8:	94e6983a 	sll	r19,r18,r19
   120fc:	2162b03a 	or	r17,r4,r5
   12100:	053f0344 	movi	r20,-1011
   12104:	a0e9c83a 	sub	r20,r20,r3
   12108:	0025883a 	mov	r18,zero
   1210c:	0011883a 	mov	r8,zero
   12110:	003f9606 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   12114:	8184b03a 	or	r2,r16,r6
   12118:	10001f1e 	bne	r2,zero,12198 <__divdf3+0x2a8>
   1211c:	0021883a 	mov	r16,zero
   12120:	002b883a 	mov	r21,zero
   12124:	01c00084 	movi	r7,2
   12128:	003fa206 	br	11fb4 <__alt_mem_Flash_flash_data+0xf4011fb4>
   1212c:	8184b03a 	or	r2,r16,r6
   12130:	10001526 	beq	r2,zero,12188 <__divdf3+0x298>
   12134:	80010c26 	beq	r16,zero,12568 <__divdf3+0x678>
   12138:	8009883a 	mov	r4,r16
   1213c:	d9800315 	stw	r6,12(sp)
   12140:	da000215 	stw	r8,8(sp)
   12144:	da400015 	stw	r9,0(sp)
   12148:	0013bf00 	call	13bf0 <__clzsi2>
   1214c:	d9800317 	ldw	r6,12(sp)
   12150:	da000217 	ldw	r8,8(sp)
   12154:	da400017 	ldw	r9,0(sp)
   12158:	1007883a 	mov	r3,r2
   1215c:	01000a04 	movi	r4,40
   12160:	1d7ffe04 	addi	r21,r3,-8
   12164:	20c9c83a 	sub	r4,r4,r3
   12168:	8560983a 	sll	r16,r16,r21
   1216c:	3108d83a 	srl	r4,r6,r4
   12170:	356a983a 	sll	r21,r6,r21
   12174:	2420b03a 	or	r16,r4,r16
   12178:	017f0344 	movi	r5,-1011
   1217c:	28cbc83a 	sub	r5,r5,r3
   12180:	000f883a 	mov	r7,zero
   12184:	003f8b06 	br	11fb4 <__alt_mem_Flash_flash_data+0xf4011fb4>
   12188:	0021883a 	mov	r16,zero
   1218c:	002b883a 	mov	r21,zero
   12190:	01c00044 	movi	r7,1
   12194:	003f8706 	br	11fb4 <__alt_mem_Flash_flash_data+0xf4011fb4>
   12198:	01c000c4 	movi	r7,3
   1219c:	003f8506 	br	11fb4 <__alt_mem_Flash_flash_data+0xf4011fb4>
   121a0:	04800104 	movi	r18,4
   121a4:	0023883a 	mov	r17,zero
   121a8:	0027883a 	mov	r19,zero
   121ac:	02000044 	movi	r8,1
   121b0:	003f6e06 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   121b4:	04800304 	movi	r18,12
   121b8:	020000c4 	movi	r8,3
   121bc:	003f6b06 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   121c0:	01400434 	movhi	r5,16
   121c4:	000d883a 	mov	r6,zero
   121c8:	297fffc4 	addi	r5,r5,-1
   121cc:	04ffffc4 	movi	r19,-1
   121d0:	0101ffc4 	movi	r4,2047
   121d4:	003fa406 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   121d8:	043f0084 	movi	r16,-1022
   121dc:	8521c83a 	sub	r16,r16,r20
   121e0:	00800e04 	movi	r2,56
   121e4:	1401200e 	bge	r2,r16,12668 <__divdf3+0x778>
   121e8:	9180004c 	andi	r6,r18,1
   121ec:	0009883a 	mov	r4,zero
   121f0:	000b883a 	mov	r5,zero
   121f4:	0027883a 	mov	r19,zero
   121f8:	003f9b06 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   121fc:	8880022c 	andhi	r2,r17,8
   12200:	1000c726 	beq	r2,zero,12520 <__divdf3+0x630>
   12204:	8080022c 	andhi	r2,r16,8
   12208:	1000c51e 	bne	r2,zero,12520 <__divdf3+0x630>
   1220c:	00800434 	movhi	r2,16
   12210:	81400234 	orhi	r5,r16,8
   12214:	10bfffc4 	addi	r2,r2,-1
   12218:	b80d883a 	mov	r6,r23
   1221c:	288a703a 	and	r5,r5,r2
   12220:	a827883a 	mov	r19,r21
   12224:	003fea06 	br	121d0 <__alt_mem_Flash_flash_data+0xf40121d0>
   12228:	8440ea36 	bltu	r16,r17,125d4 <__divdf3+0x6e4>
   1222c:	8c00e826 	beq	r17,r16,125d0 <__divdf3+0x6e0>
   12230:	a53fffc4 	addi	r20,r20,-1
   12234:	882d883a 	mov	r22,r17
   12238:	000d883a 	mov	r6,zero
   1223c:	a804d63a 	srli	r2,r21,24
   12240:	8020923a 	slli	r16,r16,8
   12244:	b009883a 	mov	r4,r22
   12248:	d9800315 	stw	r6,12(sp)
   1224c:	1420b03a 	or	r16,r2,r16
   12250:	802ed43a 	srli	r23,r16,16
   12254:	873fffcc 	andi	fp,r16,65535
   12258:	a82a923a 	slli	r21,r21,8
   1225c:	b80b883a 	mov	r5,r23
   12260:	00116440 	call	11644 <__udivsi3>
   12264:	b009883a 	mov	r4,r22
   12268:	b80b883a 	mov	r5,r23
   1226c:	1023883a 	mov	r17,r2
   12270:	001164c0 	call	1164c <__umodsi3>
   12274:	1004943a 	slli	r2,r2,16
   12278:	9808d43a 	srli	r4,r19,16
   1227c:	8f2d383a 	mul	r22,r17,fp
   12280:	d9800317 	ldw	r6,12(sp)
   12284:	1106b03a 	or	r3,r2,r4
   12288:	1d80062e 	bgeu	r3,r22,122a4 <__divdf3+0x3b4>
   1228c:	1c07883a 	add	r3,r3,r16
   12290:	88bfffc4 	addi	r2,r17,-1
   12294:	1c00dc36 	bltu	r3,r16,12608 <__divdf3+0x718>
   12298:	1d80db2e 	bgeu	r3,r22,12608 <__divdf3+0x718>
   1229c:	8c7fff84 	addi	r17,r17,-2
   122a0:	1c07883a 	add	r3,r3,r16
   122a4:	1dadc83a 	sub	r22,r3,r22
   122a8:	b009883a 	mov	r4,r22
   122ac:	b80b883a 	mov	r5,r23
   122b0:	d9800315 	stw	r6,12(sp)
   122b4:	00116440 	call	11644 <__udivsi3>
   122b8:	b009883a 	mov	r4,r22
   122bc:	b80b883a 	mov	r5,r23
   122c0:	d8800015 	stw	r2,0(sp)
   122c4:	001164c0 	call	1164c <__umodsi3>
   122c8:	da400017 	ldw	r9,0(sp)
   122cc:	1004943a 	slli	r2,r2,16
   122d0:	9cffffcc 	andi	r19,r19,65535
   122d4:	4f07383a 	mul	r3,r9,fp
   122d8:	14c8b03a 	or	r4,r2,r19
   122dc:	d9800317 	ldw	r6,12(sp)
   122e0:	20c0062e 	bgeu	r4,r3,122fc <__divdf3+0x40c>
   122e4:	2409883a 	add	r4,r4,r16
   122e8:	48bfffc4 	addi	r2,r9,-1
   122ec:	2400c436 	bltu	r4,r16,12600 <__divdf3+0x710>
   122f0:	20c0c32e 	bgeu	r4,r3,12600 <__divdf3+0x710>
   122f4:	4a7fff84 	addi	r9,r9,-2
   122f8:	2409883a 	add	r4,r4,r16
   122fc:	8822943a 	slli	r17,r17,16
   12300:	a80ed43a 	srli	r7,r21,16
   12304:	aa3fffcc 	andi	r8,r21,65535
   12308:	4c62b03a 	or	r17,r9,r17
   1230c:	8816d43a 	srli	r11,r17,16
   12310:	897fffcc 	andi	r5,r17,65535
   12314:	2a15383a 	mul	r10,r5,r8
   12318:	5a19383a 	mul	r12,r11,r8
   1231c:	29cb383a 	mul	r5,r5,r7
   12320:	5012d43a 	srli	r9,r10,16
   12324:	20c5c83a 	sub	r2,r4,r3
   12328:	614b883a 	add	r5,r12,r5
   1232c:	2a4b883a 	add	r5,r5,r9
   12330:	59c7383a 	mul	r3,r11,r7
   12334:	2b00022e 	bgeu	r5,r12,12340 <__divdf3+0x450>
   12338:	01000074 	movhi	r4,1
   1233c:	1907883a 	add	r3,r3,r4
   12340:	2808d43a 	srli	r4,r5,16
   12344:	280a943a 	slli	r5,r5,16
   12348:	54ffffcc 	andi	r19,r10,65535
   1234c:	1907883a 	add	r3,r3,r4
   12350:	2ccb883a 	add	r5,r5,r19
   12354:	10c09336 	bltu	r2,r3,125a4 <__divdf3+0x6b4>
   12358:	10c0ad26 	beq	r2,r3,12610 <__divdf3+0x720>
   1235c:	10c7c83a 	sub	r3,r2,r3
   12360:	3167c83a 	sub	r19,r6,r5
   12364:	34ed803a 	cmpltu	r22,r6,r19
   12368:	1dadc83a 	sub	r22,r3,r22
   1236c:	b400b226 	beq	r22,r16,12638 <__divdf3+0x748>
   12370:	b009883a 	mov	r4,r22
   12374:	b80b883a 	mov	r5,r23
   12378:	d9c00115 	stw	r7,4(sp)
   1237c:	da000215 	stw	r8,8(sp)
   12380:	00116440 	call	11644 <__udivsi3>
   12384:	b009883a 	mov	r4,r22
   12388:	b80b883a 	mov	r5,r23
   1238c:	d8800315 	stw	r2,12(sp)
   12390:	001164c0 	call	1164c <__umodsi3>
   12394:	d9800317 	ldw	r6,12(sp)
   12398:	1004943a 	slli	r2,r2,16
   1239c:	9808d43a 	srli	r4,r19,16
   123a0:	372d383a 	mul	r22,r6,fp
   123a4:	d9c00117 	ldw	r7,4(sp)
   123a8:	1106b03a 	or	r3,r2,r4
   123ac:	da000217 	ldw	r8,8(sp)
   123b0:	1d80062e 	bgeu	r3,r22,123cc <__divdf3+0x4dc>
   123b4:	1c07883a 	add	r3,r3,r16
   123b8:	30bfffc4 	addi	r2,r6,-1
   123bc:	1c00a036 	bltu	r3,r16,12640 <__divdf3+0x750>
   123c0:	1d809f2e 	bgeu	r3,r22,12640 <__divdf3+0x750>
   123c4:	31bfff84 	addi	r6,r6,-2
   123c8:	1c07883a 	add	r3,r3,r16
   123cc:	1dadc83a 	sub	r22,r3,r22
   123d0:	b009883a 	mov	r4,r22
   123d4:	b80b883a 	mov	r5,r23
   123d8:	d9800315 	stw	r6,12(sp)
   123dc:	d9c00115 	stw	r7,4(sp)
   123e0:	da000215 	stw	r8,8(sp)
   123e4:	00116440 	call	11644 <__udivsi3>
   123e8:	b009883a 	mov	r4,r22
   123ec:	b80b883a 	mov	r5,r23
   123f0:	d8800015 	stw	r2,0(sp)
   123f4:	001164c0 	call	1164c <__umodsi3>
   123f8:	da400017 	ldw	r9,0(sp)
   123fc:	1004943a 	slli	r2,r2,16
   12400:	993fffcc 	andi	r4,r19,65535
   12404:	4f39383a 	mul	fp,r9,fp
   12408:	1106b03a 	or	r3,r2,r4
   1240c:	d9800317 	ldw	r6,12(sp)
   12410:	d9c00117 	ldw	r7,4(sp)
   12414:	da000217 	ldw	r8,8(sp)
   12418:	1f00062e 	bgeu	r3,fp,12434 <__divdf3+0x544>
   1241c:	1c07883a 	add	r3,r3,r16
   12420:	48bfffc4 	addi	r2,r9,-1
   12424:	1c008836 	bltu	r3,r16,12648 <__divdf3+0x758>
   12428:	1f00872e 	bgeu	r3,fp,12648 <__divdf3+0x758>
   1242c:	4a7fff84 	addi	r9,r9,-2
   12430:	1c07883a 	add	r3,r3,r16
   12434:	3008943a 	slli	r4,r6,16
   12438:	1f07c83a 	sub	r3,r3,fp
   1243c:	4926b03a 	or	r19,r9,r4
   12440:	993fffcc 	andi	r4,r19,65535
   12444:	980cd43a 	srli	r6,r19,16
   12448:	220b383a 	mul	r5,r4,r8
   1244c:	21c5383a 	mul	r2,r4,r7
   12450:	3211383a 	mul	r8,r6,r8
   12454:	2808d43a 	srli	r4,r5,16
   12458:	31cf383a 	mul	r7,r6,r7
   1245c:	4085883a 	add	r2,r8,r2
   12460:	1105883a 	add	r2,r2,r4
   12464:	1200022e 	bgeu	r2,r8,12470 <__divdf3+0x580>
   12468:	01000074 	movhi	r4,1
   1246c:	390f883a 	add	r7,r7,r4
   12470:	1008d43a 	srli	r4,r2,16
   12474:	1004943a 	slli	r2,r2,16
   12478:	297fffcc 	andi	r5,r5,65535
   1247c:	390f883a 	add	r7,r7,r4
   12480:	1145883a 	add	r2,r2,r5
   12484:	19c06536 	bltu	r3,r7,1261c <__divdf3+0x72c>
   12488:	19c09f26 	beq	r3,r7,12708 <__divdf3+0x818>
   1248c:	9cc00054 	ori	r19,r19,1
   12490:	a100ffc4 	addi	r4,r20,1023
   12494:	013f500e 	bge	zero,r4,121d8 <__alt_mem_Flash_flash_data+0xf40121d8>
   12498:	988001cc 	andi	r2,r19,7
   1249c:	10000726 	beq	r2,zero,124bc <__divdf3+0x5cc>
   124a0:	98c003cc 	andi	r3,r19,15
   124a4:	00800104 	movi	r2,4
   124a8:	18800426 	beq	r3,r2,124bc <__divdf3+0x5cc>
   124ac:	9885883a 	add	r2,r19,r2
   124b0:	14e1803a 	cmpltu	r16,r2,r19
   124b4:	8c23883a 	add	r17,r17,r16
   124b8:	1027883a 	mov	r19,r2
   124bc:	8880402c 	andhi	r2,r17,256
   124c0:	10000426 	beq	r2,zero,124d4 <__divdf3+0x5e4>
   124c4:	00bfc034 	movhi	r2,65280
   124c8:	10bfffc4 	addi	r2,r2,-1
   124cc:	a1010004 	addi	r4,r20,1024
   124d0:	88a2703a 	and	r17,r17,r2
   124d4:	0081ff84 	movi	r2,2046
   124d8:	113edf16 	blt	r2,r4,12058 <__alt_mem_Flash_flash_data+0xf4012058>
   124dc:	9826d0fa 	srli	r19,r19,3
   124e0:	8804977a 	slli	r2,r17,29
   124e4:	8820927a 	slli	r16,r17,9
   124e8:	2101ffcc 	andi	r4,r4,2047
   124ec:	14e6b03a 	or	r19,r2,r19
   124f0:	800ad33a 	srli	r5,r16,12
   124f4:	9180004c 	andi	r6,r18,1
   124f8:	003edb06 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   124fc:	008000c4 	movi	r2,3
   12500:	4080a826 	beq	r8,r2,127a4 <__divdf3+0x8b4>
   12504:	00800044 	movi	r2,1
   12508:	4080551e 	bne	r8,r2,12660 <__divdf3+0x770>
   1250c:	e00d883a 	mov	r6,fp
   12510:	0009883a 	mov	r4,zero
   12514:	000b883a 	mov	r5,zero
   12518:	0027883a 	mov	r19,zero
   1251c:	003ed206 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   12520:	00800434 	movhi	r2,16
   12524:	89400234 	orhi	r5,r17,8
   12528:	10bfffc4 	addi	r2,r2,-1
   1252c:	b00d883a 	mov	r6,r22
   12530:	288a703a 	and	r5,r5,r2
   12534:	003f2606 	br	121d0 <__alt_mem_Flash_flash_data+0xf40121d0>
   12538:	d9800315 	stw	r6,12(sp)
   1253c:	d9c00115 	stw	r7,4(sp)
   12540:	0013bf00 	call	13bf0 <__clzsi2>
   12544:	10c00804 	addi	r3,r2,32
   12548:	010009c4 	movi	r4,39
   1254c:	d9800317 	ldw	r6,12(sp)
   12550:	d9c00117 	ldw	r7,4(sp)
   12554:	20fee30e 	bge	r4,r3,120e4 <__alt_mem_Flash_flash_data+0xf40120e4>
   12558:	117ffe04 	addi	r5,r2,-8
   1255c:	9162983a 	sll	r17,r18,r5
   12560:	0027883a 	mov	r19,zero
   12564:	003ee606 	br	12100 <__alt_mem_Flash_flash_data+0xf4012100>
   12568:	3009883a 	mov	r4,r6
   1256c:	d9800315 	stw	r6,12(sp)
   12570:	da000215 	stw	r8,8(sp)
   12574:	da400015 	stw	r9,0(sp)
   12578:	0013bf00 	call	13bf0 <__clzsi2>
   1257c:	10c00804 	addi	r3,r2,32
   12580:	010009c4 	movi	r4,39
   12584:	d9800317 	ldw	r6,12(sp)
   12588:	da000217 	ldw	r8,8(sp)
   1258c:	da400017 	ldw	r9,0(sp)
   12590:	20fef20e 	bge	r4,r3,1215c <__alt_mem_Flash_flash_data+0xf401215c>
   12594:	10bffe04 	addi	r2,r2,-8
   12598:	a8a0983a 	sll	r16,r21,r2
   1259c:	002b883a 	mov	r21,zero
   125a0:	003ef506 	br	12178 <__alt_mem_Flash_flash_data+0xf4012178>
   125a4:	354d883a 	add	r6,r6,r21
   125a8:	3549803a 	cmpltu	r4,r6,r21
   125ac:	2409883a 	add	r4,r4,r16
   125b0:	2089883a 	add	r4,r4,r2
   125b4:	88bfffc4 	addi	r2,r17,-1
   125b8:	81000c2e 	bgeu	r16,r4,125ec <__divdf3+0x6fc>
   125bc:	20c04436 	bltu	r4,r3,126d0 <__divdf3+0x7e0>
   125c0:	19006f26 	beq	r3,r4,12780 <__divdf3+0x890>
   125c4:	20c7c83a 	sub	r3,r4,r3
   125c8:	1023883a 	mov	r17,r2
   125cc:	003f6406 	br	12360 <__alt_mem_Flash_flash_data+0xf4012360>
   125d0:	9d7f1736 	bltu	r19,r21,12230 <__alt_mem_Flash_flash_data+0xf4012230>
   125d4:	9806d07a 	srli	r3,r19,1
   125d8:	880497fa 	slli	r2,r17,31
   125dc:	980c97fa 	slli	r6,r19,31
   125e0:	882cd07a 	srli	r22,r17,1
   125e4:	18a6b03a 	or	r19,r3,r2
   125e8:	003f1406 	br	1223c <__alt_mem_Flash_flash_data+0xf401223c>
   125ec:	243ff51e 	bne	r4,r16,125c4 <__alt_mem_Flash_flash_data+0xf40125c4>
   125f0:	357ff22e 	bgeu	r6,r21,125bc <__alt_mem_Flash_flash_data+0xf40125bc>
   125f4:	80c7c83a 	sub	r3,r16,r3
   125f8:	1023883a 	mov	r17,r2
   125fc:	003f5806 	br	12360 <__alt_mem_Flash_flash_data+0xf4012360>
   12600:	1013883a 	mov	r9,r2
   12604:	003f3d06 	br	122fc <__alt_mem_Flash_flash_data+0xf40122fc>
   12608:	1023883a 	mov	r17,r2
   1260c:	003f2506 	br	122a4 <__alt_mem_Flash_flash_data+0xf40122a4>
   12610:	317fe436 	bltu	r6,r5,125a4 <__alt_mem_Flash_flash_data+0xf40125a4>
   12614:	0007883a 	mov	r3,zero
   12618:	003f5106 	br	12360 <__alt_mem_Flash_flash_data+0xf4012360>
   1261c:	1c07883a 	add	r3,r3,r16
   12620:	993fffc4 	addi	r4,r19,-1
   12624:	1c000a2e 	bgeu	r3,r16,12650 <__divdf3+0x760>
   12628:	2027883a 	mov	r19,r4
   1262c:	19ff971e 	bne	r3,r7,1248c <__alt_mem_Flash_flash_data+0xf401248c>
   12630:	a8bf961e 	bne	r21,r2,1248c <__alt_mem_Flash_flash_data+0xf401248c>
   12634:	003f9606 	br	12490 <__alt_mem_Flash_flash_data+0xf4012490>
   12638:	04ffffc4 	movi	r19,-1
   1263c:	003f9406 	br	12490 <__alt_mem_Flash_flash_data+0xf4012490>
   12640:	100d883a 	mov	r6,r2
   12644:	003f6106 	br	123cc <__alt_mem_Flash_flash_data+0xf40123cc>
   12648:	1013883a 	mov	r9,r2
   1264c:	003f7906 	br	12434 <__alt_mem_Flash_flash_data+0xf4012434>
   12650:	19c02636 	bltu	r3,r7,126ec <__divdf3+0x7fc>
   12654:	38c04d26 	beq	r7,r3,1278c <__divdf3+0x89c>
   12658:	2027883a 	mov	r19,r4
   1265c:	003f8b06 	br	1248c <__alt_mem_Flash_flash_data+0xf401248c>
   12660:	e025883a 	mov	r18,fp
   12664:	003f8a06 	br	12490 <__alt_mem_Flash_flash_data+0xf4012490>
   12668:	008007c4 	movi	r2,31
   1266c:	14002a16 	blt	r2,r16,12718 <__divdf3+0x828>
   12670:	a5010784 	addi	r20,r20,1054
   12674:	8d04983a 	sll	r2,r17,r20
   12678:	9c06d83a 	srl	r3,r19,r16
   1267c:	9d28983a 	sll	r20,r19,r20
   12680:	8c20d83a 	srl	r16,r17,r16
   12684:	1886b03a 	or	r3,r3,r2
   12688:	a004c03a 	cmpne	r2,r20,zero
   1268c:	1884b03a 	or	r2,r3,r2
   12690:	10c001cc 	andi	r3,r2,7
   12694:	18000726 	beq	r3,zero,126b4 <__divdf3+0x7c4>
   12698:	110003cc 	andi	r4,r2,15
   1269c:	00c00104 	movi	r3,4
   126a0:	20c00426 	beq	r4,r3,126b4 <__divdf3+0x7c4>
   126a4:	10c00104 	addi	r3,r2,4
   126a8:	1885803a 	cmpltu	r2,r3,r2
   126ac:	80a1883a 	add	r16,r16,r2
   126b0:	1805883a 	mov	r2,r3
   126b4:	80c0202c 	andhi	r3,r16,128
   126b8:	18002d26 	beq	r3,zero,12770 <__divdf3+0x880>
   126bc:	9180004c 	andi	r6,r18,1
   126c0:	01000044 	movi	r4,1
   126c4:	000b883a 	mov	r5,zero
   126c8:	0027883a 	mov	r19,zero
   126cc:	003e6606 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   126d0:	354d883a 	add	r6,r6,r21
   126d4:	356d803a 	cmpltu	r22,r6,r21
   126d8:	b42d883a 	add	r22,r22,r16
   126dc:	b12d883a 	add	r22,r22,r4
   126e0:	8c7fff84 	addi	r17,r17,-2
   126e4:	b0c7c83a 	sub	r3,r22,r3
   126e8:	003f1d06 	br	12360 <__alt_mem_Flash_flash_data+0xf4012360>
   126ec:	ad4b883a 	add	r5,r21,r21
   126f0:	2d6b803a 	cmpltu	r21,r5,r21
   126f4:	ac2b883a 	add	r21,r21,r16
   126f8:	1d47883a 	add	r3,r3,r21
   126fc:	993fff84 	addi	r4,r19,-2
   12700:	282b883a 	mov	r21,r5
   12704:	003fc806 	br	12628 <__alt_mem_Flash_flash_data+0xf4012628>
   12708:	103fc41e 	bne	r2,zero,1261c <__alt_mem_Flash_flash_data+0xf401261c>
   1270c:	002b883a 	mov	r21,zero
   12710:	a8bf5e1e 	bne	r21,r2,1248c <__alt_mem_Flash_flash_data+0xf401248c>
   12714:	003f5e06 	br	12490 <__alt_mem_Flash_flash_data+0xf4012490>
   12718:	00bef884 	movi	r2,-1054
   1271c:	1505c83a 	sub	r2,r2,r20
   12720:	00c00804 	movi	r3,32
   12724:	8884d83a 	srl	r2,r17,r2
   12728:	80c01c26 	beq	r16,r3,1279c <__divdf3+0x8ac>
   1272c:	a0c10f84 	addi	r3,r20,1086
   12730:	88c6983a 	sll	r3,r17,r3
   12734:	1cc6b03a 	or	r3,r3,r19
   12738:	1806c03a 	cmpne	r3,r3,zero
   1273c:	1884b03a 	or	r2,r3,r2
   12740:	140001cc 	andi	r16,r2,7
   12744:	8000061e 	bne	r16,zero,12760 <__divdf3+0x870>
   12748:	000b883a 	mov	r5,zero
   1274c:	1004d0fa 	srli	r2,r2,3
   12750:	9180004c 	andi	r6,r18,1
   12754:	0009883a 	mov	r4,zero
   12758:	1426b03a 	or	r19,r2,r16
   1275c:	003e4206 	br	12068 <__alt_mem_Flash_flash_data+0xf4012068>
   12760:	110003cc 	andi	r4,r2,15
   12764:	00c00104 	movi	r3,4
   12768:	0021883a 	mov	r16,zero
   1276c:	20ffcd1e 	bne	r4,r3,126a4 <__alt_mem_Flash_flash_data+0xf40126a4>
   12770:	800a927a 	slli	r5,r16,9
   12774:	8020977a 	slli	r16,r16,29
   12778:	280ad33a 	srli	r5,r5,12
   1277c:	003ff306 	br	1274c <__alt_mem_Flash_flash_data+0xf401274c>
   12780:	317fd336 	bltu	r6,r5,126d0 <__alt_mem_Flash_flash_data+0xf40126d0>
   12784:	1023883a 	mov	r17,r2
   12788:	003fa206 	br	12614 <__alt_mem_Flash_flash_data+0xf4012614>
   1278c:	a8bfd736 	bltu	r21,r2,126ec <__alt_mem_Flash_flash_data+0xf40126ec>
   12790:	2027883a 	mov	r19,r4
   12794:	a8bf3d1e 	bne	r21,r2,1248c <__alt_mem_Flash_flash_data+0xf401248c>
   12798:	003f3d06 	br	12490 <__alt_mem_Flash_flash_data+0xf4012490>
   1279c:	0007883a 	mov	r3,zero
   127a0:	003fe406 	br	12734 <__alt_mem_Flash_flash_data+0xf4012734>
   127a4:	00800434 	movhi	r2,16
   127a8:	89400234 	orhi	r5,r17,8
   127ac:	10bfffc4 	addi	r2,r2,-1
   127b0:	e00d883a 	mov	r6,fp
   127b4:	288a703a 	and	r5,r5,r2
   127b8:	003e8506 	br	121d0 <__alt_mem_Flash_flash_data+0xf40121d0>

000127bc <__eqdf2>:
   127bc:	2804d53a 	srli	r2,r5,20
   127c0:	3806d53a 	srli	r3,r7,20
   127c4:	02000434 	movhi	r8,16
   127c8:	423fffc4 	addi	r8,r8,-1
   127cc:	1081ffcc 	andi	r2,r2,2047
   127d0:	0241ffc4 	movi	r9,2047
   127d4:	2a14703a 	and	r10,r5,r8
   127d8:	18c1ffcc 	andi	r3,r3,2047
   127dc:	3a10703a 	and	r8,r7,r8
   127e0:	280ad7fa 	srli	r5,r5,31
   127e4:	380ed7fa 	srli	r7,r7,31
   127e8:	12400f26 	beq	r2,r9,12828 <__eqdf2+0x6c>
   127ec:	0241ffc4 	movi	r9,2047
   127f0:	1a400326 	beq	r3,r9,12800 <__eqdf2+0x44>
   127f4:	10c00526 	beq	r2,r3,1280c <__eqdf2+0x50>
   127f8:	00800044 	movi	r2,1
   127fc:	f800283a 	ret
   12800:	4192b03a 	or	r9,r8,r6
   12804:	483ffc1e 	bne	r9,zero,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   12808:	10fffb1e 	bne	r2,r3,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   1280c:	523ffa1e 	bne	r10,r8,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   12810:	21bff91e 	bne	r4,r6,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   12814:	29c00826 	beq	r5,r7,12838 <__eqdf2+0x7c>
   12818:	103ff71e 	bne	r2,zero,127f8 <__alt_mem_Flash_flash_data+0xf40127f8>
   1281c:	5104b03a 	or	r2,r10,r4
   12820:	1004c03a 	cmpne	r2,r2,zero
   12824:	f800283a 	ret
   12828:	5112b03a 	or	r9,r10,r4
   1282c:	483fef26 	beq	r9,zero,127ec <__alt_mem_Flash_flash_data+0xf40127ec>
   12830:	00800044 	movi	r2,1
   12834:	f800283a 	ret
   12838:	0005883a 	mov	r2,zero
   1283c:	f800283a 	ret

00012840 <__gedf2>:
   12840:	2804d53a 	srli	r2,r5,20
   12844:	3806d53a 	srli	r3,r7,20
   12848:	02000434 	movhi	r8,16
   1284c:	423fffc4 	addi	r8,r8,-1
   12850:	0241ffc4 	movi	r9,2047
   12854:	1081ffcc 	andi	r2,r2,2047
   12858:	2a14703a 	and	r10,r5,r8
   1285c:	1a46703a 	and	r3,r3,r9
   12860:	3a10703a 	and	r8,r7,r8
   12864:	280ad7fa 	srli	r5,r5,31
   12868:	380ed7fa 	srli	r7,r7,31
   1286c:	12400b26 	beq	r2,r9,1289c <__gedf2+0x5c>
   12870:	1a401626 	beq	r3,r9,128cc <__gedf2+0x8c>
   12874:	10000c1e 	bne	r2,zero,128a8 <__gedf2+0x68>
   12878:	5112b03a 	or	r9,r10,r4
   1287c:	4813003a 	cmpeq	r9,r9,zero
   12880:	4817883a 	mov	r11,r9
   12884:	18000c1e 	bne	r3,zero,128b8 <__gedf2+0x78>
   12888:	4198b03a 	or	r12,r8,r6
   1288c:	60000a1e 	bne	r12,zero,128b8 <__gedf2+0x78>
   12890:	48001326 	beq	r9,zero,128e0 <__gedf2+0xa0>
   12894:	0005883a 	mov	r2,zero
   12898:	f800283a 	ret
   1289c:	5112b03a 	or	r9,r10,r4
   128a0:	4800191e 	bne	r9,zero,12908 <__gedf2+0xc8>
   128a4:	18800926 	beq	r3,r2,128cc <__gedf2+0x8c>
   128a8:	18000b1e 	bne	r3,zero,128d8 <__gedf2+0x98>
   128ac:	4192b03a 	or	r9,r8,r6
   128b0:	0017883a 	mov	r11,zero
   128b4:	48000a26 	beq	r9,zero,128e0 <__gedf2+0xa0>
   128b8:	39c03fcc 	andi	r7,r7,255
   128bc:	58000726 	beq	r11,zero,128dc <__gedf2+0x9c>
   128c0:	3800081e 	bne	r7,zero,128e4 <__gedf2+0xa4>
   128c4:	00bfffc4 	movi	r2,-1
   128c8:	f800283a 	ret
   128cc:	4192b03a 	or	r9,r8,r6
   128d0:	48000d1e 	bne	r9,zero,12908 <__gedf2+0xc8>
   128d4:	103fe826 	beq	r2,zero,12878 <__alt_mem_Flash_flash_data+0xf4012878>
   128d8:	39c03fcc 	andi	r7,r7,255
   128dc:	29c00326 	beq	r5,r7,128ec <__gedf2+0xac>
   128e0:	283ff81e 	bne	r5,zero,128c4 <__alt_mem_Flash_flash_data+0xf40128c4>
   128e4:	00800044 	movi	r2,1
   128e8:	f800283a 	ret
   128ec:	18bffc16 	blt	r3,r2,128e0 <__alt_mem_Flash_flash_data+0xf40128e0>
   128f0:	10c00316 	blt	r2,r3,12900 <__gedf2+0xc0>
   128f4:	42bffa36 	bltu	r8,r10,128e0 <__alt_mem_Flash_flash_data+0xf40128e0>
   128f8:	52000526 	beq	r10,r8,12910 <__gedf2+0xd0>
   128fc:	523fe52e 	bgeu	r10,r8,12894 <__alt_mem_Flash_flash_data+0xf4012894>
   12900:	283ff026 	beq	r5,zero,128c4 <__alt_mem_Flash_flash_data+0xf40128c4>
   12904:	003ff706 	br	128e4 <__alt_mem_Flash_flash_data+0xf40128e4>
   12908:	00bfff84 	movi	r2,-2
   1290c:	f800283a 	ret
   12910:	313ff336 	bltu	r6,r4,128e0 <__alt_mem_Flash_flash_data+0xf40128e0>
   12914:	21bfdf2e 	bgeu	r4,r6,12894 <__alt_mem_Flash_flash_data+0xf4012894>
   12918:	283fea26 	beq	r5,zero,128c4 <__alt_mem_Flash_flash_data+0xf40128c4>
   1291c:	003ff106 	br	128e4 <__alt_mem_Flash_flash_data+0xf40128e4>

00012920 <__ledf2>:
   12920:	2804d53a 	srli	r2,r5,20
   12924:	3810d53a 	srli	r8,r7,20
   12928:	00c00434 	movhi	r3,16
   1292c:	18ffffc4 	addi	r3,r3,-1
   12930:	0241ffc4 	movi	r9,2047
   12934:	1081ffcc 	andi	r2,r2,2047
   12938:	28d4703a 	and	r10,r5,r3
   1293c:	4250703a 	and	r8,r8,r9
   12940:	38c6703a 	and	r3,r7,r3
   12944:	280ad7fa 	srli	r5,r5,31
   12948:	380ed7fa 	srli	r7,r7,31
   1294c:	12400b26 	beq	r2,r9,1297c <__ledf2+0x5c>
   12950:	42401926 	beq	r8,r9,129b8 <__ledf2+0x98>
   12954:	10000c1e 	bne	r2,zero,12988 <__ledf2+0x68>
   12958:	5112b03a 	or	r9,r10,r4
   1295c:	4813003a 	cmpeq	r9,r9,zero
   12960:	4817883a 	mov	r11,r9
   12964:	40000f26 	beq	r8,zero,129a4 <__ledf2+0x84>
   12968:	39c03fcc 	andi	r7,r7,255
   1296c:	58001826 	beq	r11,zero,129d0 <__ledf2+0xb0>
   12970:	38000a1e 	bne	r7,zero,1299c <__ledf2+0x7c>
   12974:	00bfffc4 	movi	r2,-1
   12978:	f800283a 	ret
   1297c:	5112b03a 	or	r9,r10,r4
   12980:	48000f1e 	bne	r9,zero,129c0 <__ledf2+0xa0>
   12984:	40800c26 	beq	r8,r2,129b8 <__ledf2+0x98>
   12988:	4000101e 	bne	r8,zero,129cc <__ledf2+0xac>
   1298c:	1992b03a 	or	r9,r3,r6
   12990:	0017883a 	mov	r11,zero
   12994:	483ff41e 	bne	r9,zero,12968 <__alt_mem_Flash_flash_data+0xf4012968>
   12998:	283ff61e 	bne	r5,zero,12974 <__alt_mem_Flash_flash_data+0xf4012974>
   1299c:	00800044 	movi	r2,1
   129a0:	f800283a 	ret
   129a4:	1998b03a 	or	r12,r3,r6
   129a8:	603fef1e 	bne	r12,zero,12968 <__alt_mem_Flash_flash_data+0xf4012968>
   129ac:	483ffa26 	beq	r9,zero,12998 <__alt_mem_Flash_flash_data+0xf4012998>
   129b0:	0005883a 	mov	r2,zero
   129b4:	f800283a 	ret
   129b8:	1992b03a 	or	r9,r3,r6
   129bc:	48000226 	beq	r9,zero,129c8 <__ledf2+0xa8>
   129c0:	00800084 	movi	r2,2
   129c4:	f800283a 	ret
   129c8:	103fe326 	beq	r2,zero,12958 <__alt_mem_Flash_flash_data+0xf4012958>
   129cc:	39c03fcc 	andi	r7,r7,255
   129d0:	29fff11e 	bne	r5,r7,12998 <__alt_mem_Flash_flash_data+0xf4012998>
   129d4:	40bff016 	blt	r8,r2,12998 <__alt_mem_Flash_flash_data+0xf4012998>
   129d8:	12000316 	blt	r2,r8,129e8 <__ledf2+0xc8>
   129dc:	1abfee36 	bltu	r3,r10,12998 <__alt_mem_Flash_flash_data+0xf4012998>
   129e0:	50c00326 	beq	r10,r3,129f0 <__ledf2+0xd0>
   129e4:	50fff22e 	bgeu	r10,r3,129b0 <__alt_mem_Flash_flash_data+0xf40129b0>
   129e8:	283fe226 	beq	r5,zero,12974 <__alt_mem_Flash_flash_data+0xf4012974>
   129ec:	003feb06 	br	1299c <__alt_mem_Flash_flash_data+0xf401299c>
   129f0:	313fe936 	bltu	r6,r4,12998 <__alt_mem_Flash_flash_data+0xf4012998>
   129f4:	21bfee2e 	bgeu	r4,r6,129b0 <__alt_mem_Flash_flash_data+0xf40129b0>
   129f8:	283fde26 	beq	r5,zero,12974 <__alt_mem_Flash_flash_data+0xf4012974>
   129fc:	003fe706 	br	1299c <__alt_mem_Flash_flash_data+0xf401299c>

00012a00 <__muldf3>:
   12a00:	defff204 	addi	sp,sp,-56
   12a04:	2804d53a 	srli	r2,r5,20
   12a08:	dd800a15 	stw	r22,40(sp)
   12a0c:	282cd7fa 	srli	r22,r5,31
   12a10:	dc000415 	stw	r16,16(sp)
   12a14:	04000434 	movhi	r16,16
   12a18:	df000c15 	stw	fp,48(sp)
   12a1c:	dd000815 	stw	r20,32(sp)
   12a20:	dcc00715 	stw	r19,28(sp)
   12a24:	dc800615 	stw	r18,24(sp)
   12a28:	dc400515 	stw	r17,20(sp)
   12a2c:	843fffc4 	addi	r16,r16,-1
   12a30:	dfc00d15 	stw	ra,52(sp)
   12a34:	ddc00b15 	stw	r23,44(sp)
   12a38:	dd400915 	stw	r21,36(sp)
   12a3c:	1501ffcc 	andi	r20,r2,2047
   12a40:	2023883a 	mov	r17,r4
   12a44:	2025883a 	mov	r18,r4
   12a48:	2c20703a 	and	r16,r5,r16
   12a4c:	b027883a 	mov	r19,r22
   12a50:	b7003fcc 	andi	fp,r22,255
   12a54:	a0005926 	beq	r20,zero,12bbc <__muldf3+0x1bc>
   12a58:	0081ffc4 	movi	r2,2047
   12a5c:	a0803426 	beq	r20,r2,12b30 <__muldf3+0x130>
   12a60:	84000434 	orhi	r16,r16,16
   12a64:	2004d77a 	srli	r2,r4,29
   12a68:	802090fa 	slli	r16,r16,3
   12a6c:	202490fa 	slli	r18,r4,3
   12a70:	a53f0044 	addi	r20,r20,-1023
   12a74:	80a0b03a 	or	r16,r16,r2
   12a78:	002b883a 	mov	r21,zero
   12a7c:	0015883a 	mov	r10,zero
   12a80:	3812d53a 	srli	r9,r7,20
   12a84:	3806d7fa 	srli	r3,r7,31
   12a88:	02000434 	movhi	r8,16
   12a8c:	423fffc4 	addi	r8,r8,-1
   12a90:	4941ffcc 	andi	r5,r9,2047
   12a94:	302f883a 	mov	r23,r6
   12a98:	3a22703a 	and	r17,r7,r8
   12a9c:	1ac03fcc 	andi	r11,r3,255
   12aa0:	28006226 	beq	r5,zero,12c2c <__muldf3+0x22c>
   12aa4:	0081ffc4 	movi	r2,2047
   12aa8:	28805a26 	beq	r5,r2,12c14 <__muldf3+0x214>
   12aac:	8a000434 	orhi	r8,r17,16
   12ab0:	3004d77a 	srli	r2,r6,29
   12ab4:	401090fa 	slli	r8,r8,3
   12ab8:	302e90fa 	slli	r23,r6,3
   12abc:	297f0044 	addi	r5,r5,-1023
   12ac0:	40a2b03a 	or	r17,r8,r2
   12ac4:	0013883a 	mov	r9,zero
   12ac8:	4d4cb03a 	or	r6,r9,r21
   12acc:	300c90ba 	slli	r6,r6,2
   12ad0:	02000074 	movhi	r8,1
   12ad4:	420abc04 	addi	r8,r8,10992
   12ad8:	320d883a 	add	r6,r6,r8
   12adc:	31800017 	ldw	r6,0(r6)
   12ae0:	a14b883a 	add	r5,r20,r5
   12ae4:	1dacf03a 	xor	r22,r3,r22
   12ae8:	2b000044 	addi	r12,r5,1
   12aec:	3000683a 	jmp	r6
   12af0:	00012d2c 	andhi	zero,zero,1204
   12af4:	00012d18 	cmpnei	zero,zero,1204
   12af8:	00012d18 	cmpnei	zero,zero,1204
   12afc:	00012d04 	movi	zero,1204
   12b00:	00012b4c 	andi	zero,zero,1197
   12b04:	00012b4c 	andi	zero,zero,1197
   12b08:	00012cec 	andhi	zero,zero,1203
   12b0c:	00012d04 	movi	zero,1204
   12b10:	00012b4c 	andi	zero,zero,1197
   12b14:	00012cec 	andhi	zero,zero,1203
   12b18:	00012b4c 	andi	zero,zero,1197
   12b1c:	00012d04 	movi	zero,1204
   12b20:	00012b50 	cmplti	zero,zero,1197
   12b24:	00012b50 	cmplti	zero,zero,1197
   12b28:	00012b50 	cmplti	zero,zero,1197
   12b2c:	00012f28 	cmpgeui	zero,zero,1212
   12b30:	8104b03a 	or	r2,r16,r4
   12b34:	10006a1e 	bne	r2,zero,12ce0 <__muldf3+0x2e0>
   12b38:	05400204 	movi	r21,8
   12b3c:	0021883a 	mov	r16,zero
   12b40:	0025883a 	mov	r18,zero
   12b44:	02800084 	movi	r10,2
   12b48:	003fcd06 	br	12a80 <__alt_mem_Flash_flash_data+0xf4012a80>
   12b4c:	b039883a 	mov	fp,r22
   12b50:	00800084 	movi	r2,2
   12b54:	50804e1e 	bne	r10,r2,12c90 <__muldf3+0x290>
   12b58:	e4c0004c 	andi	r19,fp,1
   12b5c:	0101ffc4 	movi	r4,2047
   12b60:	0021883a 	mov	r16,zero
   12b64:	0025883a 	mov	r18,zero
   12b68:	2008953a 	slli	r4,r4,20
   12b6c:	98c03fcc 	andi	r3,r19,255
   12b70:	01400434 	movhi	r5,16
   12b74:	297fffc4 	addi	r5,r5,-1
   12b78:	180697fa 	slli	r3,r3,31
   12b7c:	8160703a 	and	r16,r16,r5
   12b80:	8120b03a 	or	r16,r16,r4
   12b84:	80c6b03a 	or	r3,r16,r3
   12b88:	9005883a 	mov	r2,r18
   12b8c:	dfc00d17 	ldw	ra,52(sp)
   12b90:	df000c17 	ldw	fp,48(sp)
   12b94:	ddc00b17 	ldw	r23,44(sp)
   12b98:	dd800a17 	ldw	r22,40(sp)
   12b9c:	dd400917 	ldw	r21,36(sp)
   12ba0:	dd000817 	ldw	r20,32(sp)
   12ba4:	dcc00717 	ldw	r19,28(sp)
   12ba8:	dc800617 	ldw	r18,24(sp)
   12bac:	dc400517 	ldw	r17,20(sp)
   12bb0:	dc000417 	ldw	r16,16(sp)
   12bb4:	dec00e04 	addi	sp,sp,56
   12bb8:	f800283a 	ret
   12bbc:	8104b03a 	or	r2,r16,r4
   12bc0:	10004226 	beq	r2,zero,12ccc <__muldf3+0x2cc>
   12bc4:	8000f926 	beq	r16,zero,12fac <__muldf3+0x5ac>
   12bc8:	8009883a 	mov	r4,r16
   12bcc:	d9800315 	stw	r6,12(sp)
   12bd0:	d9c00015 	stw	r7,0(sp)
   12bd4:	0013bf00 	call	13bf0 <__clzsi2>
   12bd8:	d9800317 	ldw	r6,12(sp)
   12bdc:	d9c00017 	ldw	r7,0(sp)
   12be0:	1007883a 	mov	r3,r2
   12be4:	01000a04 	movi	r4,40
   12be8:	18bffe04 	addi	r2,r3,-8
   12bec:	20c9c83a 	sub	r4,r4,r3
   12bf0:	80a0983a 	sll	r16,r16,r2
   12bf4:	8908d83a 	srl	r4,r17,r4
   12bf8:	88a4983a 	sll	r18,r17,r2
   12bfc:	2420b03a 	or	r16,r4,r16
   12c00:	017f0344 	movi	r5,-1011
   12c04:	28e9c83a 	sub	r20,r5,r3
   12c08:	002b883a 	mov	r21,zero
   12c0c:	0015883a 	mov	r10,zero
   12c10:	003f9b06 	br	12a80 <__alt_mem_Flash_flash_data+0xf4012a80>
   12c14:	8984b03a 	or	r2,r17,r6
   12c18:	10002a1e 	bne	r2,zero,12cc4 <__muldf3+0x2c4>
   12c1c:	0023883a 	mov	r17,zero
   12c20:	002f883a 	mov	r23,zero
   12c24:	02400084 	movi	r9,2
   12c28:	003fa706 	br	12ac8 <__alt_mem_Flash_flash_data+0xf4012ac8>
   12c2c:	8984b03a 	or	r2,r17,r6
   12c30:	10002026 	beq	r2,zero,12cb4 <__muldf3+0x2b4>
   12c34:	8800cc26 	beq	r17,zero,12f68 <__muldf3+0x568>
   12c38:	8809883a 	mov	r4,r17
   12c3c:	d8c00215 	stw	r3,8(sp)
   12c40:	d9800315 	stw	r6,12(sp)
   12c44:	da800015 	stw	r10,0(sp)
   12c48:	dac00115 	stw	r11,4(sp)
   12c4c:	0013bf00 	call	13bf0 <__clzsi2>
   12c50:	d8c00217 	ldw	r3,8(sp)
   12c54:	d9800317 	ldw	r6,12(sp)
   12c58:	da800017 	ldw	r10,0(sp)
   12c5c:	dac00117 	ldw	r11,4(sp)
   12c60:	1009883a 	mov	r4,r2
   12c64:	01400a04 	movi	r5,40
   12c68:	25fffe04 	addi	r23,r4,-8
   12c6c:	290bc83a 	sub	r5,r5,r4
   12c70:	8dd0983a 	sll	r8,r17,r23
   12c74:	314ad83a 	srl	r5,r6,r5
   12c78:	35ee983a 	sll	r23,r6,r23
   12c7c:	2a22b03a 	or	r17,r5,r8
   12c80:	017f0344 	movi	r5,-1011
   12c84:	290bc83a 	sub	r5,r5,r4
   12c88:	0013883a 	mov	r9,zero
   12c8c:	003f8e06 	br	12ac8 <__alt_mem_Flash_flash_data+0xf4012ac8>
   12c90:	008000c4 	movi	r2,3
   12c94:	50811d26 	beq	r10,r2,1310c <__muldf3+0x70c>
   12c98:	00800044 	movi	r2,1
   12c9c:	5080e01e 	bne	r10,r2,13020 <__muldf3+0x620>
   12ca0:	e0a6703a 	and	r19,fp,r2
   12ca4:	0009883a 	mov	r4,zero
   12ca8:	0021883a 	mov	r16,zero
   12cac:	0025883a 	mov	r18,zero
   12cb0:	003fad06 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   12cb4:	0023883a 	mov	r17,zero
   12cb8:	002f883a 	mov	r23,zero
   12cbc:	02400044 	movi	r9,1
   12cc0:	003f8106 	br	12ac8 <__alt_mem_Flash_flash_data+0xf4012ac8>
   12cc4:	024000c4 	movi	r9,3
   12cc8:	003f7f06 	br	12ac8 <__alt_mem_Flash_flash_data+0xf4012ac8>
   12ccc:	05400104 	movi	r21,4
   12cd0:	0021883a 	mov	r16,zero
   12cd4:	0025883a 	mov	r18,zero
   12cd8:	02800044 	movi	r10,1
   12cdc:	003f6806 	br	12a80 <__alt_mem_Flash_flash_data+0xf4012a80>
   12ce0:	05400304 	movi	r21,12
   12ce4:	028000c4 	movi	r10,3
   12ce8:	003f6506 	br	12a80 <__alt_mem_Flash_flash_data+0xf4012a80>
   12cec:	04000434 	movhi	r16,16
   12cf0:	0027883a 	mov	r19,zero
   12cf4:	843fffc4 	addi	r16,r16,-1
   12cf8:	04bfffc4 	movi	r18,-1
   12cfc:	0101ffc4 	movi	r4,2047
   12d00:	003f9906 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   12d04:	8821883a 	mov	r16,r17
   12d08:	b825883a 	mov	r18,r23
   12d0c:	5839883a 	mov	fp,r11
   12d10:	4815883a 	mov	r10,r9
   12d14:	003f8e06 	br	12b50 <__alt_mem_Flash_flash_data+0xf4012b50>
   12d18:	8821883a 	mov	r16,r17
   12d1c:	b825883a 	mov	r18,r23
   12d20:	b039883a 	mov	fp,r22
   12d24:	4815883a 	mov	r10,r9
   12d28:	003f8906 	br	12b50 <__alt_mem_Flash_flash_data+0xf4012b50>
   12d2c:	b80cd43a 	srli	r6,r23,16
   12d30:	9006d43a 	srli	r3,r18,16
   12d34:	90bfffcc 	andi	r2,r18,65535
   12d38:	bdffffcc 	andi	r23,r23,65535
   12d3c:	b891383a 	mul	r8,r23,r2
   12d40:	b8c9383a 	mul	r4,r23,r3
   12d44:	309b383a 	mul	r13,r6,r2
   12d48:	400ed43a 	srli	r7,r8,16
   12d4c:	30df383a 	mul	r15,r6,r3
   12d50:	235b883a 	add	r13,r4,r13
   12d54:	69db883a 	add	r13,r13,r7
   12d58:	6900022e 	bgeu	r13,r4,12d64 <__muldf3+0x364>
   12d5c:	01000074 	movhi	r4,1
   12d60:	791f883a 	add	r15,r15,r4
   12d64:	8828d43a 	srli	r20,r17,16
   12d68:	8c7fffcc 	andi	r17,r17,65535
   12d6c:	888f383a 	mul	r7,r17,r2
   12d70:	88d3383a 	mul	r9,r17,r3
   12d74:	a0a5383a 	mul	r18,r20,r2
   12d78:	3816d43a 	srli	r11,r7,16
   12d7c:	6814943a 	slli	r10,r13,16
   12d80:	4ca5883a 	add	r18,r9,r18
   12d84:	423fffcc 	andi	r8,r8,65535
   12d88:	92e5883a 	add	r18,r18,r11
   12d8c:	6808d43a 	srli	r4,r13,16
   12d90:	5215883a 	add	r10,r10,r8
   12d94:	a0c7383a 	mul	r3,r20,r3
   12d98:	9240022e 	bgeu	r18,r9,12da4 <__muldf3+0x3a4>
   12d9c:	00800074 	movhi	r2,1
   12da0:	1887883a 	add	r3,r3,r2
   12da4:	802ad43a 	srli	r21,r16,16
   12da8:	80bfffcc 	andi	r2,r16,65535
   12dac:	b893383a 	mul	r9,r23,r2
   12db0:	3091383a 	mul	r8,r6,r2
   12db4:	bd6f383a 	mul	r23,r23,r21
   12db8:	9026943a 	slli	r19,r18,16
   12dbc:	481ad43a 	srli	r13,r9,16
   12dc0:	9024d43a 	srli	r18,r18,16
   12dc4:	39ffffcc 	andi	r7,r7,65535
   12dc8:	ba11883a 	add	r8,r23,r8
   12dcc:	99e7883a 	add	r19,r19,r7
   12dd0:	4351883a 	add	r8,r8,r13
   12dd4:	1c97883a 	add	r11,r3,r18
   12dd8:	354d383a 	mul	r6,r6,r21
   12ddc:	9925883a 	add	r18,r19,r4
   12de0:	45c0022e 	bgeu	r8,r23,12dec <__muldf3+0x3ec>
   12de4:	00c00074 	movhi	r3,1
   12de8:	30cd883a 	add	r6,r6,r3
   12dec:	8889383a 	mul	r4,r17,r2
   12df0:	8d63383a 	mul	r17,r17,r21
   12df4:	a085383a 	mul	r2,r20,r2
   12df8:	200ed43a 	srli	r7,r4,16
   12dfc:	401cd43a 	srli	r14,r8,16
   12e00:	401a943a 	slli	r13,r8,16
   12e04:	8885883a 	add	r2,r17,r2
   12e08:	4a3fffcc 	andi	r8,r9,65535
   12e0c:	11c5883a 	add	r2,r2,r7
   12e10:	339d883a 	add	r14,r6,r14
   12e14:	6a11883a 	add	r8,r13,r8
   12e18:	a561383a 	mul	r16,r20,r21
   12e1c:	1440022e 	bgeu	r2,r17,12e28 <__muldf3+0x428>
   12e20:	00c00074 	movhi	r3,1
   12e24:	80e1883a 	add	r16,r16,r3
   12e28:	1006943a 	slli	r3,r2,16
   12e2c:	213fffcc 	andi	r4,r4,65535
   12e30:	93db883a 	add	r13,r18,r15
   12e34:	1909883a 	add	r4,r3,r4
   12e38:	22c7883a 	add	r3,r4,r11
   12e3c:	6cd3803a 	cmpltu	r9,r13,r19
   12e40:	6a09883a 	add	r4,r13,r8
   12e44:	1a5b883a 	add	r13,r3,r9
   12e48:	2211803a 	cmpltu	r8,r4,r8
   12e4c:	734d883a 	add	r6,r14,r13
   12e50:	100ed43a 	srli	r7,r2,16
   12e54:	6a53803a 	cmpltu	r9,r13,r9
   12e58:	3205883a 	add	r2,r6,r8
   12e5c:	1ac7803a 	cmpltu	r3,r3,r11
   12e60:	1211803a 	cmpltu	r8,r2,r8
   12e64:	48c6b03a 	or	r3,r9,r3
   12e68:	338d803a 	cmpltu	r6,r6,r14
   12e6c:	19c7883a 	add	r3,r3,r7
   12e70:	418cb03a 	or	r6,r8,r6
   12e74:	1987883a 	add	r3,r3,r6
   12e78:	2024927a 	slli	r18,r4,9
   12e7c:	1c07883a 	add	r3,r3,r16
   12e80:	1806927a 	slli	r3,r3,9
   12e84:	1020d5fa 	srli	r16,r2,23
   12e88:	2008d5fa 	srli	r4,r4,23
   12e8c:	9294b03a 	or	r10,r18,r10
   12e90:	1004927a 	slli	r2,r2,9
   12e94:	5024c03a 	cmpne	r18,r10,zero
   12e98:	1c20b03a 	or	r16,r3,r16
   12e9c:	9108b03a 	or	r4,r18,r4
   12ea0:	80c0402c 	andhi	r3,r16,256
   12ea4:	20a4b03a 	or	r18,r4,r2
   12ea8:	18000726 	beq	r3,zero,12ec8 <__muldf3+0x4c8>
   12eac:	9006d07a 	srli	r3,r18,1
   12eb0:	800897fa 	slli	r4,r16,31
   12eb4:	9080004c 	andi	r2,r18,1
   12eb8:	8020d07a 	srli	r16,r16,1
   12ebc:	10c4b03a 	or	r2,r2,r3
   12ec0:	1124b03a 	or	r18,r2,r4
   12ec4:	600b883a 	mov	r5,r12
   12ec8:	2900ffc4 	addi	r4,r5,1023
   12ecc:	01004b0e 	bge	zero,r4,12ffc <__muldf3+0x5fc>
   12ed0:	908001cc 	andi	r2,r18,7
   12ed4:	10000726 	beq	r2,zero,12ef4 <__muldf3+0x4f4>
   12ed8:	90c003cc 	andi	r3,r18,15
   12edc:	00800104 	movi	r2,4
   12ee0:	18800426 	beq	r3,r2,12ef4 <__muldf3+0x4f4>
   12ee4:	9087883a 	add	r3,r18,r2
   12ee8:	1c85803a 	cmpltu	r2,r3,r18
   12eec:	80a1883a 	add	r16,r16,r2
   12ef0:	1825883a 	mov	r18,r3
   12ef4:	8080402c 	andhi	r2,r16,256
   12ef8:	10000426 	beq	r2,zero,12f0c <__muldf3+0x50c>
   12efc:	00bfc034 	movhi	r2,65280
   12f00:	10bfffc4 	addi	r2,r2,-1
   12f04:	29010004 	addi	r4,r5,1024
   12f08:	80a0703a 	and	r16,r16,r2
   12f0c:	0081ff84 	movi	r2,2046
   12f10:	1100320e 	bge	r2,r4,12fdc <__muldf3+0x5dc>
   12f14:	b4c0004c 	andi	r19,r22,1
   12f18:	0101ffc4 	movi	r4,2047
   12f1c:	0021883a 	mov	r16,zero
   12f20:	0025883a 	mov	r18,zero
   12f24:	003f1006 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   12f28:	8080022c 	andhi	r2,r16,8
   12f2c:	10000926 	beq	r2,zero,12f54 <__muldf3+0x554>
   12f30:	8880022c 	andhi	r2,r17,8
   12f34:	1000071e 	bne	r2,zero,12f54 <__muldf3+0x554>
   12f38:	00800434 	movhi	r2,16
   12f3c:	8c000234 	orhi	r16,r17,8
   12f40:	10bfffc4 	addi	r2,r2,-1
   12f44:	1827883a 	mov	r19,r3
   12f48:	80a0703a 	and	r16,r16,r2
   12f4c:	b825883a 	mov	r18,r23
   12f50:	003f6a06 	br	12cfc <__alt_mem_Flash_flash_data+0xf4012cfc>
   12f54:	00800434 	movhi	r2,16
   12f58:	84000234 	orhi	r16,r16,8
   12f5c:	10bfffc4 	addi	r2,r2,-1
   12f60:	80a0703a 	and	r16,r16,r2
   12f64:	003f6506 	br	12cfc <__alt_mem_Flash_flash_data+0xf4012cfc>
   12f68:	3009883a 	mov	r4,r6
   12f6c:	d8c00215 	stw	r3,8(sp)
   12f70:	d9800315 	stw	r6,12(sp)
   12f74:	da800015 	stw	r10,0(sp)
   12f78:	dac00115 	stw	r11,4(sp)
   12f7c:	0013bf00 	call	13bf0 <__clzsi2>
   12f80:	11000804 	addi	r4,r2,32
   12f84:	014009c4 	movi	r5,39
   12f88:	d8c00217 	ldw	r3,8(sp)
   12f8c:	d9800317 	ldw	r6,12(sp)
   12f90:	da800017 	ldw	r10,0(sp)
   12f94:	dac00117 	ldw	r11,4(sp)
   12f98:	293f320e 	bge	r5,r4,12c64 <__alt_mem_Flash_flash_data+0xf4012c64>
   12f9c:	10bffe04 	addi	r2,r2,-8
   12fa0:	b8a2983a 	sll	r17,r23,r2
   12fa4:	002f883a 	mov	r23,zero
   12fa8:	003f3506 	br	12c80 <__alt_mem_Flash_flash_data+0xf4012c80>
   12fac:	d9800315 	stw	r6,12(sp)
   12fb0:	d9c00015 	stw	r7,0(sp)
   12fb4:	0013bf00 	call	13bf0 <__clzsi2>
   12fb8:	10c00804 	addi	r3,r2,32
   12fbc:	010009c4 	movi	r4,39
   12fc0:	d9800317 	ldw	r6,12(sp)
   12fc4:	d9c00017 	ldw	r7,0(sp)
   12fc8:	20ff060e 	bge	r4,r3,12be4 <__alt_mem_Flash_flash_data+0xf4012be4>
   12fcc:	10bffe04 	addi	r2,r2,-8
   12fd0:	88a0983a 	sll	r16,r17,r2
   12fd4:	0025883a 	mov	r18,zero
   12fd8:	003f0906 	br	12c00 <__alt_mem_Flash_flash_data+0xf4012c00>
   12fdc:	9004d0fa 	srli	r2,r18,3
   12fe0:	8024977a 	slli	r18,r16,29
   12fe4:	8020927a 	slli	r16,r16,9
   12fe8:	2101ffcc 	andi	r4,r4,2047
   12fec:	90a4b03a 	or	r18,r18,r2
   12ff0:	8020d33a 	srli	r16,r16,12
   12ff4:	b4c0004c 	andi	r19,r22,1
   12ff8:	003edb06 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   12ffc:	00ff0084 	movi	r3,-1022
   13000:	1947c83a 	sub	r3,r3,r5
   13004:	00800e04 	movi	r2,56
   13008:	10c0080e 	bge	r2,r3,1302c <__muldf3+0x62c>
   1300c:	b4c0004c 	andi	r19,r22,1
   13010:	0009883a 	mov	r4,zero
   13014:	0021883a 	mov	r16,zero
   13018:	0025883a 	mov	r18,zero
   1301c:	003ed206 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   13020:	600b883a 	mov	r5,r12
   13024:	e02d883a 	mov	r22,fp
   13028:	003fa706 	br	12ec8 <__alt_mem_Flash_flash_data+0xf4012ec8>
   1302c:	008007c4 	movi	r2,31
   13030:	10c01816 	blt	r2,r3,13094 <__muldf3+0x694>
   13034:	29410784 	addi	r5,r5,1054
   13038:	8144983a 	sll	r2,r16,r5
   1303c:	90c8d83a 	srl	r4,r18,r3
   13040:	914a983a 	sll	r5,r18,r5
   13044:	80c6d83a 	srl	r3,r16,r3
   13048:	2088b03a 	or	r4,r4,r2
   1304c:	2804c03a 	cmpne	r2,r5,zero
   13050:	2084b03a 	or	r2,r4,r2
   13054:	110001cc 	andi	r4,r2,7
   13058:	20000726 	beq	r4,zero,13078 <__muldf3+0x678>
   1305c:	114003cc 	andi	r5,r2,15
   13060:	01000104 	movi	r4,4
   13064:	29000426 	beq	r5,r4,13078 <__muldf3+0x678>
   13068:	11000104 	addi	r4,r2,4
   1306c:	2085803a 	cmpltu	r2,r4,r2
   13070:	1887883a 	add	r3,r3,r2
   13074:	2005883a 	mov	r2,r4
   13078:	1900202c 	andhi	r4,r3,128
   1307c:	20001826 	beq	r4,zero,130e0 <__muldf3+0x6e0>
   13080:	b4c0004c 	andi	r19,r22,1
   13084:	01000044 	movi	r4,1
   13088:	0021883a 	mov	r16,zero
   1308c:	0025883a 	mov	r18,zero
   13090:	003eb506 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   13094:	00bef884 	movi	r2,-1054
   13098:	1145c83a 	sub	r2,r2,r5
   1309c:	8088d83a 	srl	r4,r16,r2
   130a0:	00800804 	movi	r2,32
   130a4:	18801726 	beq	r3,r2,13104 <__muldf3+0x704>
   130a8:	28810f84 	addi	r2,r5,1086
   130ac:	8084983a 	sll	r2,r16,r2
   130b0:	1484b03a 	or	r2,r2,r18
   130b4:	1004c03a 	cmpne	r2,r2,zero
   130b8:	1104b03a 	or	r2,r2,r4
   130bc:	10c001cc 	andi	r3,r2,7
   130c0:	18000b1e 	bne	r3,zero,130f0 <__muldf3+0x6f0>
   130c4:	0021883a 	mov	r16,zero
   130c8:	1004d0fa 	srli	r2,r2,3
   130cc:	b4c0004c 	andi	r19,r22,1
   130d0:	0009883a 	mov	r4,zero
   130d4:	10e4b03a 	or	r18,r2,r3
   130d8:	003ea306 	br	12b68 <__alt_mem_Flash_flash_data+0xf4012b68>
   130dc:	0007883a 	mov	r3,zero
   130e0:	1820927a 	slli	r16,r3,9
   130e4:	1806977a 	slli	r3,r3,29
   130e8:	8020d33a 	srli	r16,r16,12
   130ec:	003ff606 	br	130c8 <__alt_mem_Flash_flash_data+0xf40130c8>
   130f0:	110003cc 	andi	r4,r2,15
   130f4:	00c00104 	movi	r3,4
   130f8:	20fff826 	beq	r4,r3,130dc <__alt_mem_Flash_flash_data+0xf40130dc>
   130fc:	0007883a 	mov	r3,zero
   13100:	003fd906 	br	13068 <__alt_mem_Flash_flash_data+0xf4013068>
   13104:	0005883a 	mov	r2,zero
   13108:	003fe906 	br	130b0 <__alt_mem_Flash_flash_data+0xf40130b0>
   1310c:	00800434 	movhi	r2,16
   13110:	84000234 	orhi	r16,r16,8
   13114:	10bfffc4 	addi	r2,r2,-1
   13118:	e4c0004c 	andi	r19,fp,1
   1311c:	80a0703a 	and	r16,r16,r2
   13120:	003ef606 	br	12cfc <__alt_mem_Flash_flash_data+0xf4012cfc>

00013124 <__subdf3>:
   13124:	00c00434 	movhi	r3,16
   13128:	18ffffc4 	addi	r3,r3,-1
   1312c:	defffb04 	addi	sp,sp,-20
   13130:	28d2703a 	and	r9,r5,r3
   13134:	3814d53a 	srli	r10,r7,20
   13138:	38c6703a 	and	r3,r7,r3
   1313c:	3004d77a 	srli	r2,r6,29
   13140:	dc800215 	stw	r18,8(sp)
   13144:	dc000015 	stw	r16,0(sp)
   13148:	2824d7fa 	srli	r18,r5,31
   1314c:	2820d53a 	srli	r16,r5,20
   13150:	481290fa 	slli	r9,r9,3
   13154:	200ad77a 	srli	r5,r4,29
   13158:	180690fa 	slli	r3,r3,3
   1315c:	dc400115 	stw	r17,4(sp)
   13160:	dfc00415 	stw	ra,16(sp)
   13164:	202290fa 	slli	r17,r4,3
   13168:	dcc00315 	stw	r19,12(sp)
   1316c:	5281ffcc 	andi	r10,r10,2047
   13170:	0101ffc4 	movi	r4,2047
   13174:	9011883a 	mov	r8,r18
   13178:	8401ffcc 	andi	r16,r16,2047
   1317c:	94803fcc 	andi	r18,r18,255
   13180:	494ab03a 	or	r5,r9,r5
   13184:	380ed7fa 	srli	r7,r7,31
   13188:	1886b03a 	or	r3,r3,r2
   1318c:	300c90fa 	slli	r6,r6,3
   13190:	51009026 	beq	r10,r4,133d4 <__subdf3+0x2b0>
   13194:	39c0005c 	xori	r7,r7,1
   13198:	8285c83a 	sub	r2,r16,r10
   1319c:	91c06f26 	beq	r18,r7,1335c <__subdf3+0x238>
   131a0:	0080b10e 	bge	zero,r2,13468 <__subdf3+0x344>
   131a4:	50002a1e 	bne	r10,zero,13250 <__subdf3+0x12c>
   131a8:	1988b03a 	or	r4,r3,r6
   131ac:	2000941e 	bne	r4,zero,13400 <__subdf3+0x2dc>
   131b0:	888001cc 	andi	r2,r17,7
   131b4:	10005b26 	beq	r2,zero,13324 <__subdf3+0x200>
   131b8:	88c003cc 	andi	r3,r17,15
   131bc:	00800104 	movi	r2,4
   131c0:	18805826 	beq	r3,r2,13324 <__subdf3+0x200>
   131c4:	88c00104 	addi	r3,r17,4
   131c8:	1c63803a 	cmpltu	r17,r3,r17
   131cc:	2c4b883a 	add	r5,r5,r17
   131d0:	2880202c 	andhi	r2,r5,128
   131d4:	9200004c 	andi	r8,r18,1
   131d8:	1823883a 	mov	r17,r3
   131dc:	10005426 	beq	r2,zero,13330 <__subdf3+0x20c>
   131e0:	84000044 	addi	r16,r16,1
   131e4:	0081ffc4 	movi	r2,2047
   131e8:	8080bf26 	beq	r16,r2,134e8 <__subdf3+0x3c4>
   131ec:	013fe034 	movhi	r4,65408
   131f0:	213fffc4 	addi	r4,r4,-1
   131f4:	290a703a 	and	r5,r5,r4
   131f8:	2804977a 	slli	r2,r5,29
   131fc:	280a927a 	slli	r5,r5,9
   13200:	8822d0fa 	srli	r17,r17,3
   13204:	8401ffcc 	andi	r16,r16,2047
   13208:	2808d33a 	srli	r4,r5,12
   1320c:	1444b03a 	or	r2,r2,r17
   13210:	8401ffcc 	andi	r16,r16,2047
   13214:	800a953a 	slli	r5,r16,20
   13218:	40c03fcc 	andi	r3,r8,255
   1321c:	04000434 	movhi	r16,16
   13220:	180697fa 	slli	r3,r3,31
   13224:	843fffc4 	addi	r16,r16,-1
   13228:	2420703a 	and	r16,r4,r16
   1322c:	8160b03a 	or	r16,r16,r5
   13230:	80c6b03a 	or	r3,r16,r3
   13234:	dfc00417 	ldw	ra,16(sp)
   13238:	dcc00317 	ldw	r19,12(sp)
   1323c:	dc800217 	ldw	r18,8(sp)
   13240:	dc400117 	ldw	r17,4(sp)
   13244:	dc000017 	ldw	r16,0(sp)
   13248:	dec00504 	addi	sp,sp,20
   1324c:	f800283a 	ret
   13250:	0101ffc4 	movi	r4,2047
   13254:	813fd626 	beq	r16,r4,131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13258:	18c02034 	orhi	r3,r3,128
   1325c:	01000e04 	movi	r4,56
   13260:	2080a416 	blt	r4,r2,134f4 <__subdf3+0x3d0>
   13264:	010007c4 	movi	r4,31
   13268:	2080c716 	blt	r4,r2,13588 <__subdf3+0x464>
   1326c:	01000804 	movi	r4,32
   13270:	2089c83a 	sub	r4,r4,r2
   13274:	1910983a 	sll	r8,r3,r4
   13278:	308ed83a 	srl	r7,r6,r2
   1327c:	3108983a 	sll	r4,r6,r4
   13280:	1884d83a 	srl	r2,r3,r2
   13284:	41ccb03a 	or	r6,r8,r7
   13288:	2008c03a 	cmpne	r4,r4,zero
   1328c:	310cb03a 	or	r6,r6,r4
   13290:	898dc83a 	sub	r6,r17,r6
   13294:	89a3803a 	cmpltu	r17,r17,r6
   13298:	288bc83a 	sub	r5,r5,r2
   1329c:	2c4bc83a 	sub	r5,r5,r17
   132a0:	3023883a 	mov	r17,r6
   132a4:	2880202c 	andhi	r2,r5,128
   132a8:	10006b26 	beq	r2,zero,13458 <__subdf3+0x334>
   132ac:	04c02034 	movhi	r19,128
   132b0:	9cffffc4 	addi	r19,r19,-1
   132b4:	2ce6703a 	and	r19,r5,r19
   132b8:	98007c26 	beq	r19,zero,134ac <__subdf3+0x388>
   132bc:	9809883a 	mov	r4,r19
   132c0:	0013bf00 	call	13bf0 <__clzsi2>
   132c4:	10fffe04 	addi	r3,r2,-8
   132c8:	010007c4 	movi	r4,31
   132cc:	20c07d16 	blt	r4,r3,134c4 <__subdf3+0x3a0>
   132d0:	01400a04 	movi	r5,40
   132d4:	2885c83a 	sub	r2,r5,r2
   132d8:	888ad83a 	srl	r5,r17,r2
   132dc:	98e6983a 	sll	r19,r19,r3
   132e0:	88e2983a 	sll	r17,r17,r3
   132e4:	2ce6b03a 	or	r19,r5,r19
   132e8:	1c007a16 	blt	r3,r16,134d4 <__subdf3+0x3b0>
   132ec:	1c21c83a 	sub	r16,r3,r16
   132f0:	81400044 	addi	r5,r16,1
   132f4:	00c007c4 	movi	r3,31
   132f8:	19409616 	blt	r3,r5,13554 <__subdf3+0x430>
   132fc:	1c21c83a 	sub	r16,r3,r16
   13300:	8c08983a 	sll	r4,r17,r16
   13304:	8946d83a 	srl	r3,r17,r5
   13308:	9c20983a 	sll	r16,r19,r16
   1330c:	2008c03a 	cmpne	r4,r4,zero
   13310:	994ad83a 	srl	r5,r19,r5
   13314:	1c06b03a 	or	r3,r3,r16
   13318:	1922b03a 	or	r17,r3,r4
   1331c:	0021883a 	mov	r16,zero
   13320:	003fa306 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13324:	2880202c 	andhi	r2,r5,128
   13328:	9200004c 	andi	r8,r18,1
   1332c:	103fac1e 	bne	r2,zero,131e0 <__alt_mem_Flash_flash_data+0xf40131e0>
   13330:	2804977a 	slli	r2,r5,29
   13334:	8822d0fa 	srli	r17,r17,3
   13338:	00c1ffc4 	movi	r3,2047
   1333c:	280ad0fa 	srli	r5,r5,3
   13340:	1444b03a 	or	r2,r2,r17
   13344:	80c02726 	beq	r16,r3,133e4 <__subdf3+0x2c0>
   13348:	01000434 	movhi	r4,16
   1334c:	213fffc4 	addi	r4,r4,-1
   13350:	80e0703a 	and	r16,r16,r3
   13354:	2908703a 	and	r4,r5,r4
   13358:	003fad06 	br	13210 <__alt_mem_Flash_flash_data+0xf4013210>
   1335c:	0080690e 	bge	zero,r2,13504 <__subdf3+0x3e0>
   13360:	50002f26 	beq	r10,zero,13420 <__subdf3+0x2fc>
   13364:	0101ffc4 	movi	r4,2047
   13368:	813f9126 	beq	r16,r4,131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   1336c:	18c02034 	orhi	r3,r3,128
   13370:	01000e04 	movi	r4,56
   13374:	2080b00e 	bge	r4,r2,13638 <__subdf3+0x514>
   13378:	198cb03a 	or	r6,r3,r6
   1337c:	300ec03a 	cmpne	r7,r6,zero
   13380:	0005883a 	mov	r2,zero
   13384:	3c4f883a 	add	r7,r7,r17
   13388:	3c63803a 	cmpltu	r17,r7,r17
   1338c:	114b883a 	add	r5,r2,r5
   13390:	2c4b883a 	add	r5,r5,r17
   13394:	3823883a 	mov	r17,r7
   13398:	2880202c 	andhi	r2,r5,128
   1339c:	10002e26 	beq	r2,zero,13458 <__subdf3+0x334>
   133a0:	84000044 	addi	r16,r16,1
   133a4:	0081ffc4 	movi	r2,2047
   133a8:	8080de26 	beq	r16,r2,13724 <__subdf3+0x600>
   133ac:	00bfe034 	movhi	r2,65408
   133b0:	10bfffc4 	addi	r2,r2,-1
   133b4:	288a703a 	and	r5,r5,r2
   133b8:	880cd07a 	srli	r6,r17,1
   133bc:	280897fa 	slli	r4,r5,31
   133c0:	88c0004c 	andi	r3,r17,1
   133c4:	30e2b03a 	or	r17,r6,r3
   133c8:	280ad07a 	srli	r5,r5,1
   133cc:	8922b03a 	or	r17,r17,r4
   133d0:	003f7706 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   133d4:	1984b03a 	or	r2,r3,r6
   133d8:	103f6e26 	beq	r2,zero,13194 <__alt_mem_Flash_flash_data+0xf4013194>
   133dc:	39c03fcc 	andi	r7,r7,255
   133e0:	003f6d06 	br	13198 <__alt_mem_Flash_flash_data+0xf4013198>
   133e4:	1146b03a 	or	r3,r2,r5
   133e8:	18003f26 	beq	r3,zero,134e8 <__subdf3+0x3c4>
   133ec:	00c00434 	movhi	r3,16
   133f0:	29000234 	orhi	r4,r5,8
   133f4:	18ffffc4 	addi	r3,r3,-1
   133f8:	20c8703a 	and	r4,r4,r3
   133fc:	003f8406 	br	13210 <__alt_mem_Flash_flash_data+0xf4013210>
   13400:	10bfffc4 	addi	r2,r2,-1
   13404:	1000501e 	bne	r2,zero,13548 <__subdf3+0x424>
   13408:	898fc83a 	sub	r7,r17,r6
   1340c:	89e3803a 	cmpltu	r17,r17,r7
   13410:	28cbc83a 	sub	r5,r5,r3
   13414:	2c4bc83a 	sub	r5,r5,r17
   13418:	3823883a 	mov	r17,r7
   1341c:	003fa106 	br	132a4 <__alt_mem_Flash_flash_data+0xf40132a4>
   13420:	1988b03a 	or	r4,r3,r6
   13424:	203f6226 	beq	r4,zero,131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13428:	10bfffc4 	addi	r2,r2,-1
   1342c:	10009b1e 	bne	r2,zero,1369c <__subdf3+0x578>
   13430:	344d883a 	add	r6,r6,r17
   13434:	3463803a 	cmpltu	r17,r6,r17
   13438:	194b883a 	add	r5,r3,r5
   1343c:	2c4b883a 	add	r5,r5,r17
   13440:	3023883a 	mov	r17,r6
   13444:	003fd406 	br	13398 <__alt_mem_Flash_flash_data+0xf4013398>
   13448:	1106b03a 	or	r3,r2,r4
   1344c:	1800b426 	beq	r3,zero,13720 <__subdf3+0x5fc>
   13450:	100b883a 	mov	r5,r2
   13454:	2023883a 	mov	r17,r4
   13458:	888001cc 	andi	r2,r17,7
   1345c:	103f561e 	bne	r2,zero,131b8 <__alt_mem_Flash_flash_data+0xf40131b8>
   13460:	9200004c 	andi	r8,r18,1
   13464:	003fb206 	br	13330 <__alt_mem_Flash_flash_data+0xf4013330>
   13468:	1000531e 	bne	r2,zero,135b8 <__subdf3+0x494>
   1346c:	80800044 	addi	r2,r16,1
   13470:	1081ffcc 	andi	r2,r2,2047
   13474:	01000044 	movi	r4,1
   13478:	2080a00e 	bge	r4,r2,136fc <__subdf3+0x5d8>
   1347c:	8985c83a 	sub	r2,r17,r6
   13480:	8889803a 	cmpltu	r4,r17,r2
   13484:	28e7c83a 	sub	r19,r5,r3
   13488:	9927c83a 	sub	r19,r19,r4
   1348c:	9900202c 	andhi	r4,r19,128
   13490:	20006226 	beq	r4,zero,1361c <__subdf3+0x4f8>
   13494:	3463c83a 	sub	r17,r6,r17
   13498:	194bc83a 	sub	r5,r3,r5
   1349c:	344d803a 	cmpltu	r6,r6,r17
   134a0:	29a7c83a 	sub	r19,r5,r6
   134a4:	3825883a 	mov	r18,r7
   134a8:	983f841e 	bne	r19,zero,132bc <__alt_mem_Flash_flash_data+0xf40132bc>
   134ac:	8809883a 	mov	r4,r17
   134b0:	0013bf00 	call	13bf0 <__clzsi2>
   134b4:	10800804 	addi	r2,r2,32
   134b8:	10fffe04 	addi	r3,r2,-8
   134bc:	010007c4 	movi	r4,31
   134c0:	20ff830e 	bge	r4,r3,132d0 <__alt_mem_Flash_flash_data+0xf40132d0>
   134c4:	14fff604 	addi	r19,r2,-40
   134c8:	8ce6983a 	sll	r19,r17,r19
   134cc:	0023883a 	mov	r17,zero
   134d0:	1c3f860e 	bge	r3,r16,132ec <__alt_mem_Flash_flash_data+0xf40132ec>
   134d4:	017fe034 	movhi	r5,65408
   134d8:	297fffc4 	addi	r5,r5,-1
   134dc:	80e1c83a 	sub	r16,r16,r3
   134e0:	994a703a 	and	r5,r19,r5
   134e4:	003f3206 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   134e8:	0009883a 	mov	r4,zero
   134ec:	0005883a 	mov	r2,zero
   134f0:	003f4706 	br	13210 <__alt_mem_Flash_flash_data+0xf4013210>
   134f4:	198cb03a 	or	r6,r3,r6
   134f8:	300cc03a 	cmpne	r6,r6,zero
   134fc:	0005883a 	mov	r2,zero
   13500:	003f6306 	br	13290 <__alt_mem_Flash_flash_data+0xf4013290>
   13504:	10009d1e 	bne	r2,zero,1377c <__subdf3+0x658>
   13508:	81c00044 	addi	r7,r16,1
   1350c:	3881ffcc 	andi	r2,r7,2047
   13510:	02400044 	movi	r9,1
   13514:	4880680e 	bge	r9,r2,136b8 <__subdf3+0x594>
   13518:	0081ffc4 	movi	r2,2047
   1351c:	3880ae26 	beq	r7,r2,137d8 <__subdf3+0x6b4>
   13520:	344d883a 	add	r6,r6,r17
   13524:	3463803a 	cmpltu	r17,r6,r17
   13528:	194b883a 	add	r5,r3,r5
   1352c:	2c4b883a 	add	r5,r5,r17
   13530:	282297fa 	slli	r17,r5,31
   13534:	300cd07a 	srli	r6,r6,1
   13538:	280ad07a 	srli	r5,r5,1
   1353c:	3821883a 	mov	r16,r7
   13540:	89a2b03a 	or	r17,r17,r6
   13544:	003f1a06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13548:	0101ffc4 	movi	r4,2047
   1354c:	813f431e 	bne	r16,r4,1325c <__alt_mem_Flash_flash_data+0xf401325c>
   13550:	003f1706 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13554:	80bff844 	addi	r2,r16,-31
   13558:	00c00804 	movi	r3,32
   1355c:	9884d83a 	srl	r2,r19,r2
   13560:	28c05126 	beq	r5,r3,136a8 <__subdf3+0x584>
   13564:	00c00fc4 	movi	r3,63
   13568:	1c21c83a 	sub	r16,r3,r16
   1356c:	9c26983a 	sll	r19,r19,r16
   13570:	9c62b03a 	or	r17,r19,r17
   13574:	8822c03a 	cmpne	r17,r17,zero
   13578:	88a2b03a 	or	r17,r17,r2
   1357c:	000b883a 	mov	r5,zero
   13580:	0021883a 	mov	r16,zero
   13584:	003fb406 	br	13458 <__alt_mem_Flash_flash_data+0xf4013458>
   13588:	113ff804 	addi	r4,r2,-32
   1358c:	01c00804 	movi	r7,32
   13590:	1908d83a 	srl	r4,r3,r4
   13594:	11c04626 	beq	r2,r7,136b0 <__subdf3+0x58c>
   13598:	01c01004 	movi	r7,64
   1359c:	3885c83a 	sub	r2,r7,r2
   135a0:	1884983a 	sll	r2,r3,r2
   135a4:	118cb03a 	or	r6,r2,r6
   135a8:	300cc03a 	cmpne	r6,r6,zero
   135ac:	310cb03a 	or	r6,r6,r4
   135b0:	0005883a 	mov	r2,zero
   135b4:	003f3606 	br	13290 <__alt_mem_Flash_flash_data+0xf4013290>
   135b8:	80002b26 	beq	r16,zero,13668 <__subdf3+0x544>
   135bc:	0101ffc4 	movi	r4,2047
   135c0:	51006926 	beq	r10,r4,13768 <__subdf3+0x644>
   135c4:	0085c83a 	sub	r2,zero,r2
   135c8:	29402034 	orhi	r5,r5,128
   135cc:	01000e04 	movi	r4,56
   135d0:	20807d16 	blt	r4,r2,137c8 <__subdf3+0x6a4>
   135d4:	010007c4 	movi	r4,31
   135d8:	2080d916 	blt	r4,r2,13940 <__subdf3+0x81c>
   135dc:	01000804 	movi	r4,32
   135e0:	2089c83a 	sub	r4,r4,r2
   135e4:	2912983a 	sll	r9,r5,r4
   135e8:	8890d83a 	srl	r8,r17,r2
   135ec:	8908983a 	sll	r4,r17,r4
   135f0:	2884d83a 	srl	r2,r5,r2
   135f4:	4a22b03a 	or	r17,r9,r8
   135f8:	2008c03a 	cmpne	r4,r4,zero
   135fc:	8922b03a 	or	r17,r17,r4
   13600:	3463c83a 	sub	r17,r6,r17
   13604:	1885c83a 	sub	r2,r3,r2
   13608:	344d803a 	cmpltu	r6,r6,r17
   1360c:	118bc83a 	sub	r5,r2,r6
   13610:	5021883a 	mov	r16,r10
   13614:	3825883a 	mov	r18,r7
   13618:	003f2206 	br	132a4 <__alt_mem_Flash_flash_data+0xf40132a4>
   1361c:	9886b03a 	or	r3,r19,r2
   13620:	18001c1e 	bne	r3,zero,13694 <__subdf3+0x570>
   13624:	0011883a 	mov	r8,zero
   13628:	000b883a 	mov	r5,zero
   1362c:	0023883a 	mov	r17,zero
   13630:	0021883a 	mov	r16,zero
   13634:	003f3e06 	br	13330 <__alt_mem_Flash_flash_data+0xf4013330>
   13638:	010007c4 	movi	r4,31
   1363c:	20803c16 	blt	r4,r2,13730 <__subdf3+0x60c>
   13640:	01000804 	movi	r4,32
   13644:	2089c83a 	sub	r4,r4,r2
   13648:	1912983a 	sll	r9,r3,r4
   1364c:	308ed83a 	srl	r7,r6,r2
   13650:	3108983a 	sll	r4,r6,r4
   13654:	1884d83a 	srl	r2,r3,r2
   13658:	49ceb03a 	or	r7,r9,r7
   1365c:	2008c03a 	cmpne	r4,r4,zero
   13660:	390eb03a 	or	r7,r7,r4
   13664:	003f4706 	br	13384 <__alt_mem_Flash_flash_data+0xf4013384>
   13668:	2c48b03a 	or	r4,r5,r17
   1366c:	20003e26 	beq	r4,zero,13768 <__subdf3+0x644>
   13670:	0084303a 	nor	r2,zero,r2
   13674:	10003a1e 	bne	r2,zero,13760 <__subdf3+0x63c>
   13678:	3463c83a 	sub	r17,r6,r17
   1367c:	194bc83a 	sub	r5,r3,r5
   13680:	344d803a 	cmpltu	r6,r6,r17
   13684:	298bc83a 	sub	r5,r5,r6
   13688:	5021883a 	mov	r16,r10
   1368c:	3825883a 	mov	r18,r7
   13690:	003f0406 	br	132a4 <__alt_mem_Flash_flash_data+0xf40132a4>
   13694:	1023883a 	mov	r17,r2
   13698:	003f0706 	br	132b8 <__alt_mem_Flash_flash_data+0xf40132b8>
   1369c:	0101ffc4 	movi	r4,2047
   136a0:	813f331e 	bne	r16,r4,13370 <__alt_mem_Flash_flash_data+0xf4013370>
   136a4:	003ec206 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   136a8:	0027883a 	mov	r19,zero
   136ac:	003fb006 	br	13570 <__alt_mem_Flash_flash_data+0xf4013570>
   136b0:	0005883a 	mov	r2,zero
   136b4:	003fbb06 	br	135a4 <__alt_mem_Flash_flash_data+0xf40135a4>
   136b8:	2c44b03a 	or	r2,r5,r17
   136bc:	80008b1e 	bne	r16,zero,138ec <__subdf3+0x7c8>
   136c0:	1000b526 	beq	r2,zero,13998 <__subdf3+0x874>
   136c4:	1984b03a 	or	r2,r3,r6
   136c8:	103eb926 	beq	r2,zero,131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   136cc:	3449883a 	add	r4,r6,r17
   136d0:	2463803a 	cmpltu	r17,r4,r17
   136d4:	194b883a 	add	r5,r3,r5
   136d8:	2c4b883a 	add	r5,r5,r17
   136dc:	2880202c 	andhi	r2,r5,128
   136e0:	2023883a 	mov	r17,r4
   136e4:	103f5c26 	beq	r2,zero,13458 <__alt_mem_Flash_flash_data+0xf4013458>
   136e8:	00bfe034 	movhi	r2,65408
   136ec:	10bfffc4 	addi	r2,r2,-1
   136f0:	4821883a 	mov	r16,r9
   136f4:	288a703a 	and	r5,r5,r2
   136f8:	003ead06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   136fc:	2c44b03a 	or	r2,r5,r17
   13700:	8000291e 	bne	r16,zero,137a8 <__subdf3+0x684>
   13704:	10004f1e 	bne	r2,zero,13844 <__subdf3+0x720>
   13708:	1984b03a 	or	r2,r3,r6
   1370c:	10000426 	beq	r2,zero,13720 <__subdf3+0x5fc>
   13710:	180b883a 	mov	r5,r3
   13714:	3023883a 	mov	r17,r6
   13718:	3825883a 	mov	r18,r7
   1371c:	003ea406 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13720:	0011883a 	mov	r8,zero
   13724:	000b883a 	mov	r5,zero
   13728:	0023883a 	mov	r17,zero
   1372c:	003f0006 	br	13330 <__alt_mem_Flash_flash_data+0xf4013330>
   13730:	11fff804 	addi	r7,r2,-32
   13734:	19c8d83a 	srl	r4,r3,r7
   13738:	01c00804 	movi	r7,32
   1373c:	11c07e26 	beq	r2,r7,13938 <__subdf3+0x814>
   13740:	01c01004 	movi	r7,64
   13744:	3885c83a 	sub	r2,r7,r2
   13748:	1884983a 	sll	r2,r3,r2
   1374c:	118cb03a 	or	r6,r2,r6
   13750:	300ec03a 	cmpne	r7,r6,zero
   13754:	390eb03a 	or	r7,r7,r4
   13758:	0005883a 	mov	r2,zero
   1375c:	003f0906 	br	13384 <__alt_mem_Flash_flash_data+0xf4013384>
   13760:	0101ffc4 	movi	r4,2047
   13764:	513f991e 	bne	r10,r4,135cc <__alt_mem_Flash_flash_data+0xf40135cc>
   13768:	180b883a 	mov	r5,r3
   1376c:	3023883a 	mov	r17,r6
   13770:	5021883a 	mov	r16,r10
   13774:	3825883a 	mov	r18,r7
   13778:	003e8d06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   1377c:	80001a1e 	bne	r16,zero,137e8 <__subdf3+0x6c4>
   13780:	2c48b03a 	or	r4,r5,r17
   13784:	20005526 	beq	r4,zero,138dc <__subdf3+0x7b8>
   13788:	0084303a 	nor	r2,zero,r2
   1378c:	1000511e 	bne	r2,zero,138d4 <__subdf3+0x7b0>
   13790:	89a3883a 	add	r17,r17,r6
   13794:	194b883a 	add	r5,r3,r5
   13798:	898d803a 	cmpltu	r6,r17,r6
   1379c:	298b883a 	add	r5,r5,r6
   137a0:	5021883a 	mov	r16,r10
   137a4:	003efc06 	br	13398 <__alt_mem_Flash_flash_data+0xf4013398>
   137a8:	1000341e 	bne	r2,zero,1387c <__subdf3+0x758>
   137ac:	1984b03a 	or	r2,r3,r6
   137b0:	10006f26 	beq	r2,zero,13970 <__subdf3+0x84c>
   137b4:	180b883a 	mov	r5,r3
   137b8:	3023883a 	mov	r17,r6
   137bc:	3825883a 	mov	r18,r7
   137c0:	0401ffc4 	movi	r16,2047
   137c4:	003e7a06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   137c8:	2c62b03a 	or	r17,r5,r17
   137cc:	8822c03a 	cmpne	r17,r17,zero
   137d0:	0005883a 	mov	r2,zero
   137d4:	003f8a06 	br	13600 <__alt_mem_Flash_flash_data+0xf4013600>
   137d8:	3821883a 	mov	r16,r7
   137dc:	000b883a 	mov	r5,zero
   137e0:	0023883a 	mov	r17,zero
   137e4:	003ed206 	br	13330 <__alt_mem_Flash_flash_data+0xf4013330>
   137e8:	0101ffc4 	movi	r4,2047
   137ec:	51003b26 	beq	r10,r4,138dc <__subdf3+0x7b8>
   137f0:	0085c83a 	sub	r2,zero,r2
   137f4:	29402034 	orhi	r5,r5,128
   137f8:	01000e04 	movi	r4,56
   137fc:	20806216 	blt	r4,r2,13988 <__subdf3+0x864>
   13800:	010007c4 	movi	r4,31
   13804:	20806b16 	blt	r4,r2,139b4 <__subdf3+0x890>
   13808:	01000804 	movi	r4,32
   1380c:	2089c83a 	sub	r4,r4,r2
   13810:	2912983a 	sll	r9,r5,r4
   13814:	888ed83a 	srl	r7,r17,r2
   13818:	8908983a 	sll	r4,r17,r4
   1381c:	2884d83a 	srl	r2,r5,r2
   13820:	49e2b03a 	or	r17,r9,r7
   13824:	2008c03a 	cmpne	r4,r4,zero
   13828:	8922b03a 	or	r17,r17,r4
   1382c:	89a3883a 	add	r17,r17,r6
   13830:	10c5883a 	add	r2,r2,r3
   13834:	898d803a 	cmpltu	r6,r17,r6
   13838:	118b883a 	add	r5,r2,r6
   1383c:	5021883a 	mov	r16,r10
   13840:	003ed506 	br	13398 <__alt_mem_Flash_flash_data+0xf4013398>
   13844:	1984b03a 	or	r2,r3,r6
   13848:	103e5926 	beq	r2,zero,131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   1384c:	8989c83a 	sub	r4,r17,r6
   13850:	8911803a 	cmpltu	r8,r17,r4
   13854:	28c5c83a 	sub	r2,r5,r3
   13858:	1205c83a 	sub	r2,r2,r8
   1385c:	1200202c 	andhi	r8,r2,128
   13860:	403ef926 	beq	r8,zero,13448 <__alt_mem_Flash_flash_data+0xf4013448>
   13864:	3463c83a 	sub	r17,r6,r17
   13868:	194bc83a 	sub	r5,r3,r5
   1386c:	344d803a 	cmpltu	r6,r6,r17
   13870:	298bc83a 	sub	r5,r5,r6
   13874:	3825883a 	mov	r18,r7
   13878:	003e4d06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   1387c:	1984b03a 	or	r2,r3,r6
   13880:	10002b26 	beq	r2,zero,13930 <__subdf3+0x80c>
   13884:	2808d0fa 	srli	r4,r5,3
   13888:	8822d0fa 	srli	r17,r17,3
   1388c:	280a977a 	slli	r5,r5,29
   13890:	2080022c 	andhi	r2,r4,8
   13894:	2c62b03a 	or	r17,r5,r17
   13898:	10000826 	beq	r2,zero,138bc <__subdf3+0x798>
   1389c:	1810d0fa 	srli	r8,r3,3
   138a0:	4080022c 	andhi	r2,r8,8
   138a4:	1000051e 	bne	r2,zero,138bc <__subdf3+0x798>
   138a8:	300cd0fa 	srli	r6,r6,3
   138ac:	1804977a 	slli	r2,r3,29
   138b0:	4009883a 	mov	r4,r8
   138b4:	3825883a 	mov	r18,r7
   138b8:	11a2b03a 	or	r17,r2,r6
   138bc:	880ad77a 	srli	r5,r17,29
   138c0:	200890fa 	slli	r4,r4,3
   138c4:	882290fa 	slli	r17,r17,3
   138c8:	0401ffc4 	movi	r16,2047
   138cc:	290ab03a 	or	r5,r5,r4
   138d0:	003e3706 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   138d4:	0101ffc4 	movi	r4,2047
   138d8:	513fc71e 	bne	r10,r4,137f8 <__alt_mem_Flash_flash_data+0xf40137f8>
   138dc:	180b883a 	mov	r5,r3
   138e0:	3023883a 	mov	r17,r6
   138e4:	5021883a 	mov	r16,r10
   138e8:	003e3106 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   138ec:	10002d26 	beq	r2,zero,139a4 <__subdf3+0x880>
   138f0:	1984b03a 	or	r2,r3,r6
   138f4:	10000e26 	beq	r2,zero,13930 <__subdf3+0x80c>
   138f8:	2808d0fa 	srli	r4,r5,3
   138fc:	8822d0fa 	srli	r17,r17,3
   13900:	280a977a 	slli	r5,r5,29
   13904:	2080022c 	andhi	r2,r4,8
   13908:	2c62b03a 	or	r17,r5,r17
   1390c:	103feb26 	beq	r2,zero,138bc <__alt_mem_Flash_flash_data+0xf40138bc>
   13910:	180ed0fa 	srli	r7,r3,3
   13914:	3880022c 	andhi	r2,r7,8
   13918:	103fe81e 	bne	r2,zero,138bc <__alt_mem_Flash_flash_data+0xf40138bc>
   1391c:	300cd0fa 	srli	r6,r6,3
   13920:	1804977a 	slli	r2,r3,29
   13924:	3809883a 	mov	r4,r7
   13928:	11a2b03a 	or	r17,r2,r6
   1392c:	003fe306 	br	138bc <__alt_mem_Flash_flash_data+0xf40138bc>
   13930:	0401ffc4 	movi	r16,2047
   13934:	003e1e06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   13938:	0005883a 	mov	r2,zero
   1393c:	003f8306 	br	1374c <__alt_mem_Flash_flash_data+0xf401374c>
   13940:	113ff804 	addi	r4,r2,-32
   13944:	02000804 	movi	r8,32
   13948:	2908d83a 	srl	r4,r5,r4
   1394c:	12002526 	beq	r2,r8,139e4 <__subdf3+0x8c0>
   13950:	02001004 	movi	r8,64
   13954:	4085c83a 	sub	r2,r8,r2
   13958:	288a983a 	sll	r5,r5,r2
   1395c:	2c62b03a 	or	r17,r5,r17
   13960:	8822c03a 	cmpne	r17,r17,zero
   13964:	8922b03a 	or	r17,r17,r4
   13968:	0005883a 	mov	r2,zero
   1396c:	003f2406 	br	13600 <__alt_mem_Flash_flash_data+0xf4013600>
   13970:	01402034 	movhi	r5,128
   13974:	0011883a 	mov	r8,zero
   13978:	297fffc4 	addi	r5,r5,-1
   1397c:	047ffe04 	movi	r17,-8
   13980:	0401ffc4 	movi	r16,2047
   13984:	003e6a06 	br	13330 <__alt_mem_Flash_flash_data+0xf4013330>
   13988:	2c62b03a 	or	r17,r5,r17
   1398c:	8822c03a 	cmpne	r17,r17,zero
   13990:	0005883a 	mov	r2,zero
   13994:	003fa506 	br	1382c <__alt_mem_Flash_flash_data+0xf401382c>
   13998:	180b883a 	mov	r5,r3
   1399c:	3023883a 	mov	r17,r6
   139a0:	003e0306 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   139a4:	180b883a 	mov	r5,r3
   139a8:	3023883a 	mov	r17,r6
   139ac:	0401ffc4 	movi	r16,2047
   139b0:	003dff06 	br	131b0 <__alt_mem_Flash_flash_data+0xf40131b0>
   139b4:	113ff804 	addi	r4,r2,-32
   139b8:	01c00804 	movi	r7,32
   139bc:	2908d83a 	srl	r4,r5,r4
   139c0:	11c00a26 	beq	r2,r7,139ec <__subdf3+0x8c8>
   139c4:	01c01004 	movi	r7,64
   139c8:	3885c83a 	sub	r2,r7,r2
   139cc:	288a983a 	sll	r5,r5,r2
   139d0:	2c62b03a 	or	r17,r5,r17
   139d4:	8822c03a 	cmpne	r17,r17,zero
   139d8:	8922b03a 	or	r17,r17,r4
   139dc:	0005883a 	mov	r2,zero
   139e0:	003f9206 	br	1382c <__alt_mem_Flash_flash_data+0xf401382c>
   139e4:	000b883a 	mov	r5,zero
   139e8:	003fdc06 	br	1395c <__alt_mem_Flash_flash_data+0xf401395c>
   139ec:	000b883a 	mov	r5,zero
   139f0:	003ff706 	br	139d0 <__alt_mem_Flash_flash_data+0xf40139d0>

000139f4 <__fixdfsi>:
   139f4:	2806d53a 	srli	r3,r5,20
   139f8:	00800434 	movhi	r2,16
   139fc:	10bfffc4 	addi	r2,r2,-1
   13a00:	18c1ffcc 	andi	r3,r3,2047
   13a04:	0180ff84 	movi	r6,1022
   13a08:	2884703a 	and	r2,r5,r2
   13a0c:	280ad7fa 	srli	r5,r5,31
   13a10:	30c0130e 	bge	r6,r3,13a60 <__fixdfsi+0x6c>
   13a14:	01810744 	movi	r6,1053
   13a18:	30c00d16 	blt	r6,r3,13a50 <__fixdfsi+0x5c>
   13a1c:	01810cc4 	movi	r6,1075
   13a20:	30cdc83a 	sub	r6,r6,r3
   13a24:	01c007c4 	movi	r7,31
   13a28:	10800434 	orhi	r2,r2,16
   13a2c:	39800e0e 	bge	r7,r6,13a68 <__fixdfsi+0x74>
   13a30:	010104c4 	movi	r4,1043
   13a34:	20c7c83a 	sub	r3,r4,r3
   13a38:	10c6d83a 	srl	r3,r2,r3
   13a3c:	29403fcc 	andi	r5,r5,255
   13a40:	0145c83a 	sub	r2,zero,r5
   13a44:	1884f03a 	xor	r2,r3,r2
   13a48:	1145883a 	add	r2,r2,r5
   13a4c:	f800283a 	ret
   13a50:	00a00034 	movhi	r2,32768
   13a54:	10bfffc4 	addi	r2,r2,-1
   13a58:	2885883a 	add	r2,r5,r2
   13a5c:	f800283a 	ret
   13a60:	0005883a 	mov	r2,zero
   13a64:	f800283a 	ret
   13a68:	18fefb44 	addi	r3,r3,-1043
   13a6c:	2188d83a 	srl	r4,r4,r6
   13a70:	10c6983a 	sll	r3,r2,r3
   13a74:	20c6b03a 	or	r3,r4,r3
   13a78:	003ff006 	br	13a3c <__alt_mem_Flash_flash_data+0xf4013a3c>

00013a7c <__floatsidf>:
   13a7c:	defffd04 	addi	sp,sp,-12
   13a80:	dc400115 	stw	r17,4(sp)
   13a84:	dfc00215 	stw	ra,8(sp)
   13a88:	dc000015 	stw	r16,0(sp)
   13a8c:	2023883a 	mov	r17,r4
   13a90:	20001426 	beq	r4,zero,13ae4 <__floatsidf+0x68>
   13a94:	2020d7fa 	srli	r16,r4,31
   13a98:	80000126 	beq	r16,zero,13aa0 <__floatsidf+0x24>
   13a9c:	0123c83a 	sub	r17,zero,r4
   13aa0:	8809883a 	mov	r4,r17
   13aa4:	0013bf00 	call	13bf0 <__clzsi2>
   13aa8:	01410784 	movi	r5,1054
   13aac:	00c00284 	movi	r3,10
   13ab0:	288bc83a 	sub	r5,r5,r2
   13ab4:	18801c16 	blt	r3,r2,13b28 <__floatsidf+0xac>
   13ab8:	00c002c4 	movi	r3,11
   13abc:	1887c83a 	sub	r3,r3,r2
   13ac0:	88c8d83a 	srl	r4,r17,r3
   13ac4:	00c00434 	movhi	r3,16
   13ac8:	18ffffc4 	addi	r3,r3,-1
   13acc:	10800544 	addi	r2,r2,21
   13ad0:	20c8703a 	and	r4,r4,r3
   13ad4:	8884983a 	sll	r2,r17,r2
   13ad8:	28c1ffcc 	andi	r3,r5,2047
   13adc:	800d883a 	mov	r6,r16
   13ae0:	00000406 	br	13af4 <__floatsidf+0x78>
   13ae4:	000d883a 	mov	r6,zero
   13ae8:	0007883a 	mov	r3,zero
   13aec:	0009883a 	mov	r4,zero
   13af0:	0005883a 	mov	r2,zero
   13af4:	180a953a 	slli	r5,r3,20
   13af8:	31803fcc 	andi	r6,r6,255
   13afc:	00c00434 	movhi	r3,16
   13b00:	300c97fa 	slli	r6,r6,31
   13b04:	18ffffc4 	addi	r3,r3,-1
   13b08:	20c6703a 	and	r3,r4,r3
   13b0c:	1946b03a 	or	r3,r3,r5
   13b10:	1986b03a 	or	r3,r3,r6
   13b14:	dfc00217 	ldw	ra,8(sp)
   13b18:	dc400117 	ldw	r17,4(sp)
   13b1c:	dc000017 	ldw	r16,0(sp)
   13b20:	dec00304 	addi	sp,sp,12
   13b24:	f800283a 	ret
   13b28:	10fffd44 	addi	r3,r2,-11
   13b2c:	88c8983a 	sll	r4,r17,r3
   13b30:	00800434 	movhi	r2,16
   13b34:	10bfffc4 	addi	r2,r2,-1
   13b38:	2088703a 	and	r4,r4,r2
   13b3c:	28c1ffcc 	andi	r3,r5,2047
   13b40:	800d883a 	mov	r6,r16
   13b44:	0005883a 	mov	r2,zero
   13b48:	003fea06 	br	13af4 <__alt_mem_Flash_flash_data+0xf4013af4>

00013b4c <__floatunsidf>:
   13b4c:	defffe04 	addi	sp,sp,-8
   13b50:	dc000015 	stw	r16,0(sp)
   13b54:	dfc00115 	stw	ra,4(sp)
   13b58:	2021883a 	mov	r16,r4
   13b5c:	20001026 	beq	r4,zero,13ba0 <__floatunsidf+0x54>
   13b60:	0013bf00 	call	13bf0 <__clzsi2>
   13b64:	01410784 	movi	r5,1054
   13b68:	100d883a 	mov	r6,r2
   13b6c:	288bc83a 	sub	r5,r5,r2
   13b70:	00800284 	movi	r2,10
   13b74:	11801616 	blt	r2,r6,13bd0 <__floatunsidf+0x84>
   13b78:	008002c4 	movi	r2,11
   13b7c:	1185c83a 	sub	r2,r2,r6
   13b80:	8084d83a 	srl	r2,r16,r2
   13b84:	00c00434 	movhi	r3,16
   13b88:	31c00544 	addi	r7,r6,21
   13b8c:	18ffffc4 	addi	r3,r3,-1
   13b90:	81e0983a 	sll	r16,r16,r7
   13b94:	10cc703a 	and	r6,r2,r3
   13b98:	2941ffcc 	andi	r5,r5,2047
   13b9c:	00000206 	br	13ba8 <__floatunsidf+0x5c>
   13ba0:	000b883a 	mov	r5,zero
   13ba4:	000d883a 	mov	r6,zero
   13ba8:	280a953a 	slli	r5,r5,20
   13bac:	00c00434 	movhi	r3,16
   13bb0:	18ffffc4 	addi	r3,r3,-1
   13bb4:	30c6703a 	and	r3,r6,r3
   13bb8:	8005883a 	mov	r2,r16
   13bbc:	1946b03a 	or	r3,r3,r5
   13bc0:	dfc00117 	ldw	ra,4(sp)
   13bc4:	dc000017 	ldw	r16,0(sp)
   13bc8:	dec00204 	addi	sp,sp,8
   13bcc:	f800283a 	ret
   13bd0:	31bffd44 	addi	r6,r6,-11
   13bd4:	818c983a 	sll	r6,r16,r6
   13bd8:	00800434 	movhi	r2,16
   13bdc:	10bfffc4 	addi	r2,r2,-1
   13be0:	2941ffcc 	andi	r5,r5,2047
   13be4:	0021883a 	mov	r16,zero
   13be8:	308c703a 	and	r6,r6,r2
   13bec:	003fee06 	br	13ba8 <__alt_mem_Flash_flash_data+0xf4013ba8>

00013bf0 <__clzsi2>:
   13bf0:	00bfffd4 	movui	r2,65535
   13bf4:	11000b36 	bltu	r2,r4,13c24 <__clzsi2+0x34>
   13bf8:	00803fc4 	movi	r2,255
   13bfc:	1100122e 	bgeu	r2,r4,13c48 <__clzsi2+0x58>
   13c00:	00c00204 	movi	r3,8
   13c04:	01400604 	movi	r5,24
   13c08:	20c8d83a 	srl	r4,r4,r3
   13c0c:	008000b4 	movhi	r2,2
   13c10:	10973004 	addi	r2,r2,23744
   13c14:	1109883a 	add	r4,r2,r4
   13c18:	20800003 	ldbu	r2,0(r4)
   13c1c:	2885c83a 	sub	r2,r5,r2
   13c20:	f800283a 	ret
   13c24:	00804034 	movhi	r2,256
   13c28:	10bfffc4 	addi	r2,r2,-1
   13c2c:	11000336 	bltu	r2,r4,13c3c <__clzsi2+0x4c>
   13c30:	00c00404 	movi	r3,16
   13c34:	180b883a 	mov	r5,r3
   13c38:	003ff306 	br	13c08 <__alt_mem_Flash_flash_data+0xf4013c08>
   13c3c:	00c00604 	movi	r3,24
   13c40:	01400204 	movi	r5,8
   13c44:	003ff006 	br	13c08 <__alt_mem_Flash_flash_data+0xf4013c08>
   13c48:	0007883a 	mov	r3,zero
   13c4c:	01400804 	movi	r5,32
   13c50:	003fed06 	br	13c08 <__alt_mem_Flash_flash_data+0xf4013c08>

00013c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c54:	defffe04 	addi	sp,sp,-8
   13c58:	dfc00115 	stw	ra,4(sp)
   13c5c:	df000015 	stw	fp,0(sp)
   13c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c64:	008000b4 	movhi	r2,2
   13c68:	109fd304 	addi	r2,r2,32588
   13c6c:	10800017 	ldw	r2,0(r2)
   13c70:	10000526 	beq	r2,zero,13c88 <alt_get_errno+0x34>
   13c74:	008000b4 	movhi	r2,2
   13c78:	109fd304 	addi	r2,r2,32588
   13c7c:	10800017 	ldw	r2,0(r2)
   13c80:	103ee83a 	callr	r2
   13c84:	00000206 	br	13c90 <alt_get_errno+0x3c>
   13c88:	008000f4 	movhi	r2,3
   13c8c:	10a7ef04 	addi	r2,r2,-24644
}
   13c90:	e037883a 	mov	sp,fp
   13c94:	dfc00117 	ldw	ra,4(sp)
   13c98:	df000017 	ldw	fp,0(sp)
   13c9c:	dec00204 	addi	sp,sp,8
   13ca0:	f800283a 	ret

00013ca4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13ca4:	defffb04 	addi	sp,sp,-20
   13ca8:	dfc00415 	stw	ra,16(sp)
   13cac:	df000315 	stw	fp,12(sp)
   13cb0:	df000304 	addi	fp,sp,12
   13cb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13cb8:	e0bfff17 	ldw	r2,-4(fp)
   13cbc:	10000616 	blt	r2,zero,13cd8 <close+0x34>
   13cc0:	e0bfff17 	ldw	r2,-4(fp)
   13cc4:	10c00324 	muli	r3,r2,12
   13cc8:	008000b4 	movhi	r2,2
   13ccc:	109a5e04 	addi	r2,r2,27000
   13cd0:	1885883a 	add	r2,r3,r2
   13cd4:	00000106 	br	13cdc <close+0x38>
   13cd8:	0005883a 	mov	r2,zero
   13cdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13ce0:	e0bffd17 	ldw	r2,-12(fp)
   13ce4:	10001926 	beq	r2,zero,13d4c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13ce8:	e0bffd17 	ldw	r2,-12(fp)
   13cec:	10800017 	ldw	r2,0(r2)
   13cf0:	10800417 	ldw	r2,16(r2)
   13cf4:	10000626 	beq	r2,zero,13d10 <close+0x6c>
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10800017 	ldw	r2,0(r2)
   13d00:	10800417 	ldw	r2,16(r2)
   13d04:	e13ffd17 	ldw	r4,-12(fp)
   13d08:	103ee83a 	callr	r2
   13d0c:	00000106 	br	13d14 <close+0x70>
   13d10:	0005883a 	mov	r2,zero
   13d14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13d18:	e13fff17 	ldw	r4,-4(fp)
   13d1c:	00143bc0 	call	143bc <alt_release_fd>
    if (rval < 0)
   13d20:	e0bffe17 	ldw	r2,-8(fp)
   13d24:	1000070e 	bge	r2,zero,13d44 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13d28:	0013c540 	call	13c54 <alt_get_errno>
   13d2c:	1007883a 	mov	r3,r2
   13d30:	e0bffe17 	ldw	r2,-8(fp)
   13d34:	0085c83a 	sub	r2,zero,r2
   13d38:	18800015 	stw	r2,0(r3)
      return -1;
   13d3c:	00bfffc4 	movi	r2,-1
   13d40:	00000706 	br	13d60 <close+0xbc>
    }
    return 0;
   13d44:	0005883a 	mov	r2,zero
   13d48:	00000506 	br	13d60 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13d4c:	0013c540 	call	13c54 <alt_get_errno>
   13d50:	1007883a 	mov	r3,r2
   13d54:	00801444 	movi	r2,81
   13d58:	18800015 	stw	r2,0(r3)
    return -1;
   13d5c:	00bfffc4 	movi	r2,-1
  }
}
   13d60:	e037883a 	mov	sp,fp
   13d64:	dfc00117 	ldw	ra,4(sp)
   13d68:	df000017 	ldw	fp,0(sp)
   13d6c:	dec00204 	addi	sp,sp,8
   13d70:	f800283a 	ret

00013d74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13d74:	defffc04 	addi	sp,sp,-16
   13d78:	df000315 	stw	fp,12(sp)
   13d7c:	df000304 	addi	fp,sp,12
   13d80:	e13ffd15 	stw	r4,-12(fp)
   13d84:	e17ffe15 	stw	r5,-8(fp)
   13d88:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13d8c:	e0bfff17 	ldw	r2,-4(fp)
}
   13d90:	e037883a 	mov	sp,fp
   13d94:	df000017 	ldw	fp,0(sp)
   13d98:	dec00104 	addi	sp,sp,4
   13d9c:	f800283a 	ret

00013da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13da0:	defffe04 	addi	sp,sp,-8
   13da4:	dfc00115 	stw	ra,4(sp)
   13da8:	df000015 	stw	fp,0(sp)
   13dac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13db0:	008000b4 	movhi	r2,2
   13db4:	109fd304 	addi	r2,r2,32588
   13db8:	10800017 	ldw	r2,0(r2)
   13dbc:	10000526 	beq	r2,zero,13dd4 <alt_get_errno+0x34>
   13dc0:	008000b4 	movhi	r2,2
   13dc4:	109fd304 	addi	r2,r2,32588
   13dc8:	10800017 	ldw	r2,0(r2)
   13dcc:	103ee83a 	callr	r2
   13dd0:	00000206 	br	13ddc <alt_get_errno+0x3c>
   13dd4:	008000f4 	movhi	r2,3
   13dd8:	10a7ef04 	addi	r2,r2,-24644
}
   13ddc:	e037883a 	mov	sp,fp
   13de0:	dfc00117 	ldw	ra,4(sp)
   13de4:	df000017 	ldw	fp,0(sp)
   13de8:	dec00204 	addi	sp,sp,8
   13dec:	f800283a 	ret

00013df0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13df0:	defffb04 	addi	sp,sp,-20
   13df4:	dfc00415 	stw	ra,16(sp)
   13df8:	df000315 	stw	fp,12(sp)
   13dfc:	df000304 	addi	fp,sp,12
   13e00:	e13ffe15 	stw	r4,-8(fp)
   13e04:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13e08:	e0bffe17 	ldw	r2,-8(fp)
   13e0c:	10000616 	blt	r2,zero,13e28 <fstat+0x38>
   13e10:	e0bffe17 	ldw	r2,-8(fp)
   13e14:	10c00324 	muli	r3,r2,12
   13e18:	008000b4 	movhi	r2,2
   13e1c:	109a5e04 	addi	r2,r2,27000
   13e20:	1885883a 	add	r2,r3,r2
   13e24:	00000106 	br	13e2c <fstat+0x3c>
   13e28:	0005883a 	mov	r2,zero
   13e2c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13e30:	e0bffd17 	ldw	r2,-12(fp)
   13e34:	10001026 	beq	r2,zero,13e78 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13e38:	e0bffd17 	ldw	r2,-12(fp)
   13e3c:	10800017 	ldw	r2,0(r2)
   13e40:	10800817 	ldw	r2,32(r2)
   13e44:	10000726 	beq	r2,zero,13e64 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13e48:	e0bffd17 	ldw	r2,-12(fp)
   13e4c:	10800017 	ldw	r2,0(r2)
   13e50:	10800817 	ldw	r2,32(r2)
   13e54:	e13ffd17 	ldw	r4,-12(fp)
   13e58:	e17fff17 	ldw	r5,-4(fp)
   13e5c:	103ee83a 	callr	r2
   13e60:	00000a06 	br	13e8c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13e64:	e0bfff17 	ldw	r2,-4(fp)
   13e68:	00c80004 	movi	r3,8192
   13e6c:	10c00115 	stw	r3,4(r2)
      return 0;
   13e70:	0005883a 	mov	r2,zero
   13e74:	00000506 	br	13e8c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13e78:	0013da00 	call	13da0 <alt_get_errno>
   13e7c:	1007883a 	mov	r3,r2
   13e80:	00801444 	movi	r2,81
   13e84:	18800015 	stw	r2,0(r3)
    return -1;
   13e88:	00bfffc4 	movi	r2,-1
  }
}
   13e8c:	e037883a 	mov	sp,fp
   13e90:	dfc00117 	ldw	ra,4(sp)
   13e94:	df000017 	ldw	fp,0(sp)
   13e98:	dec00204 	addi	sp,sp,8
   13e9c:	f800283a 	ret

00013ea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13ea0:	defffe04 	addi	sp,sp,-8
   13ea4:	dfc00115 	stw	ra,4(sp)
   13ea8:	df000015 	stw	fp,0(sp)
   13eac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13eb0:	008000b4 	movhi	r2,2
   13eb4:	109fd304 	addi	r2,r2,32588
   13eb8:	10800017 	ldw	r2,0(r2)
   13ebc:	10000526 	beq	r2,zero,13ed4 <alt_get_errno+0x34>
   13ec0:	008000b4 	movhi	r2,2
   13ec4:	109fd304 	addi	r2,r2,32588
   13ec8:	10800017 	ldw	r2,0(r2)
   13ecc:	103ee83a 	callr	r2
   13ed0:	00000206 	br	13edc <alt_get_errno+0x3c>
   13ed4:	008000f4 	movhi	r2,3
   13ed8:	10a7ef04 	addi	r2,r2,-24644
}
   13edc:	e037883a 	mov	sp,fp
   13ee0:	dfc00117 	ldw	ra,4(sp)
   13ee4:	df000017 	ldw	fp,0(sp)
   13ee8:	dec00204 	addi	sp,sp,8
   13eec:	f800283a 	ret

00013ef0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13ef0:	deffed04 	addi	sp,sp,-76
   13ef4:	dfc01215 	stw	ra,72(sp)
   13ef8:	df001115 	stw	fp,68(sp)
   13efc:	df001104 	addi	fp,sp,68
   13f00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13f04:	e0bfff17 	ldw	r2,-4(fp)
   13f08:	10000616 	blt	r2,zero,13f24 <isatty+0x34>
   13f0c:	e0bfff17 	ldw	r2,-4(fp)
   13f10:	10c00324 	muli	r3,r2,12
   13f14:	008000b4 	movhi	r2,2
   13f18:	109a5e04 	addi	r2,r2,27000
   13f1c:	1885883a 	add	r2,r3,r2
   13f20:	00000106 	br	13f28 <isatty+0x38>
   13f24:	0005883a 	mov	r2,zero
   13f28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13f2c:	e0bfef17 	ldw	r2,-68(fp)
   13f30:	10000e26 	beq	r2,zero,13f6c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13f34:	e0bfef17 	ldw	r2,-68(fp)
   13f38:	10800017 	ldw	r2,0(r2)
   13f3c:	10800817 	ldw	r2,32(r2)
   13f40:	1000021e 	bne	r2,zero,13f4c <isatty+0x5c>
    {
      return 1;
   13f44:	00800044 	movi	r2,1
   13f48:	00000d06 	br	13f80 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13f4c:	e0bff004 	addi	r2,fp,-64
   13f50:	e13fff17 	ldw	r4,-4(fp)
   13f54:	100b883a 	mov	r5,r2
   13f58:	0013df00 	call	13df0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13f5c:	e0bff117 	ldw	r2,-60(fp)
   13f60:	10880020 	cmpeqi	r2,r2,8192
   13f64:	10803fcc 	andi	r2,r2,255
   13f68:	00000506 	br	13f80 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13f6c:	0013ea00 	call	13ea0 <alt_get_errno>
   13f70:	1007883a 	mov	r3,r2
   13f74:	00801444 	movi	r2,81
   13f78:	18800015 	stw	r2,0(r3)
    return 0;
   13f7c:	0005883a 	mov	r2,zero
  }
}
   13f80:	e037883a 	mov	sp,fp
   13f84:	dfc00117 	ldw	ra,4(sp)
   13f88:	df000017 	ldw	fp,0(sp)
   13f8c:	dec00204 	addi	sp,sp,8
   13f90:	f800283a 	ret

00013f94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13f94:	defffc04 	addi	sp,sp,-16
   13f98:	df000315 	stw	fp,12(sp)
   13f9c:	df000304 	addi	fp,sp,12
   13fa0:	e13ffd15 	stw	r4,-12(fp)
   13fa4:	e17ffe15 	stw	r5,-8(fp)
   13fa8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13fac:	e0fffe17 	ldw	r3,-8(fp)
   13fb0:	e0bffd17 	ldw	r2,-12(fp)
   13fb4:	18800c26 	beq	r3,r2,13fe8 <alt_load_section+0x54>
  {
    while( to != end )
   13fb8:	00000806 	br	13fdc <alt_load_section+0x48>
    {
      *to++ = *from++;
   13fbc:	e0bffe17 	ldw	r2,-8(fp)
   13fc0:	10c00104 	addi	r3,r2,4
   13fc4:	e0fffe15 	stw	r3,-8(fp)
   13fc8:	e0fffd17 	ldw	r3,-12(fp)
   13fcc:	19000104 	addi	r4,r3,4
   13fd0:	e13ffd15 	stw	r4,-12(fp)
   13fd4:	18c00017 	ldw	r3,0(r3)
   13fd8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13fdc:	e0fffe17 	ldw	r3,-8(fp)
   13fe0:	e0bfff17 	ldw	r2,-4(fp)
   13fe4:	18bff51e 	bne	r3,r2,13fbc <__alt_mem_Flash_flash_data+0xf4013fbc>
    {
      *to++ = *from++;
    }
  }
}
   13fe8:	e037883a 	mov	sp,fp
   13fec:	df000017 	ldw	fp,0(sp)
   13ff0:	dec00104 	addi	sp,sp,4
   13ff4:	f800283a 	ret

00013ff8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13ff8:	defffe04 	addi	sp,sp,-8
   13ffc:	dfc00115 	stw	ra,4(sp)
   14000:	df000015 	stw	fp,0(sp)
   14004:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14008:	010000b4 	movhi	r4,2
   1400c:	211ff704 	addi	r4,r4,32732
   14010:	014000b4 	movhi	r5,2
   14014:	29582b04 	addi	r5,r5,24748
   14018:	018000b4 	movhi	r6,2
   1401c:	319ff704 	addi	r6,r6,32732
   14020:	0013f940 	call	13f94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14024:	01000034 	movhi	r4,0
   14028:	21000804 	addi	r4,r4,32
   1402c:	01400034 	movhi	r5,0
   14030:	29400804 	addi	r5,r5,32
   14034:	01800034 	movhi	r6,0
   14038:	31809104 	addi	r6,r6,580
   1403c:	0013f940 	call	13f94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14040:	010000b4 	movhi	r4,2
   14044:	21147f04 	addi	r4,r4,20988
   14048:	014000b4 	movhi	r5,2
   1404c:	29547f04 	addi	r5,r5,20988
   14050:	018000b4 	movhi	r6,2
   14054:	31982b04 	addi	r6,r6,24748
   14058:	0013f940 	call	13f94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1405c:	0023e440 	call	23e44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14060:	002409c0 	call	2409c <alt_icache_flush_all>
}
   14064:	e037883a 	mov	sp,fp
   14068:	dfc00117 	ldw	ra,4(sp)
   1406c:	df000017 	ldw	fp,0(sp)
   14070:	dec00204 	addi	sp,sp,8
   14074:	f800283a 	ret

00014078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14078:	defffe04 	addi	sp,sp,-8
   1407c:	dfc00115 	stw	ra,4(sp)
   14080:	df000015 	stw	fp,0(sp)
   14084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14088:	008000b4 	movhi	r2,2
   1408c:	109fd304 	addi	r2,r2,32588
   14090:	10800017 	ldw	r2,0(r2)
   14094:	10000526 	beq	r2,zero,140ac <alt_get_errno+0x34>
   14098:	008000b4 	movhi	r2,2
   1409c:	109fd304 	addi	r2,r2,32588
   140a0:	10800017 	ldw	r2,0(r2)
   140a4:	103ee83a 	callr	r2
   140a8:	00000206 	br	140b4 <alt_get_errno+0x3c>
   140ac:	008000f4 	movhi	r2,3
   140b0:	10a7ef04 	addi	r2,r2,-24644
}
   140b4:	e037883a 	mov	sp,fp
   140b8:	dfc00117 	ldw	ra,4(sp)
   140bc:	df000017 	ldw	fp,0(sp)
   140c0:	dec00204 	addi	sp,sp,8
   140c4:	f800283a 	ret

000140c8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   140c8:	defff904 	addi	sp,sp,-28
   140cc:	dfc00615 	stw	ra,24(sp)
   140d0:	df000515 	stw	fp,20(sp)
   140d4:	df000504 	addi	fp,sp,20
   140d8:	e13ffd15 	stw	r4,-12(fp)
   140dc:	e17ffe15 	stw	r5,-8(fp)
   140e0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   140e4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   140e8:	e0bffd17 	ldw	r2,-12(fp)
   140ec:	10000616 	blt	r2,zero,14108 <lseek+0x40>
   140f0:	e0bffd17 	ldw	r2,-12(fp)
   140f4:	10c00324 	muli	r3,r2,12
   140f8:	008000b4 	movhi	r2,2
   140fc:	109a5e04 	addi	r2,r2,27000
   14100:	1885883a 	add	r2,r3,r2
   14104:	00000106 	br	1410c <lseek+0x44>
   14108:	0005883a 	mov	r2,zero
   1410c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   14110:	e0bffc17 	ldw	r2,-16(fp)
   14114:	10001026 	beq	r2,zero,14158 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14118:	e0bffc17 	ldw	r2,-16(fp)
   1411c:	10800017 	ldw	r2,0(r2)
   14120:	10800717 	ldw	r2,28(r2)
   14124:	10000926 	beq	r2,zero,1414c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14128:	e0bffc17 	ldw	r2,-16(fp)
   1412c:	10800017 	ldw	r2,0(r2)
   14130:	10800717 	ldw	r2,28(r2)
   14134:	e13ffc17 	ldw	r4,-16(fp)
   14138:	e17ffe17 	ldw	r5,-8(fp)
   1413c:	e1bfff17 	ldw	r6,-4(fp)
   14140:	103ee83a 	callr	r2
   14144:	e0bffb15 	stw	r2,-20(fp)
   14148:	00000506 	br	14160 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1414c:	00bfde84 	movi	r2,-134
   14150:	e0bffb15 	stw	r2,-20(fp)
   14154:	00000206 	br	14160 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   14158:	00bfebc4 	movi	r2,-81
   1415c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   14160:	e0bffb17 	ldw	r2,-20(fp)
   14164:	1000070e 	bge	r2,zero,14184 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   14168:	00140780 	call	14078 <alt_get_errno>
   1416c:	1007883a 	mov	r3,r2
   14170:	e0bffb17 	ldw	r2,-20(fp)
   14174:	0085c83a 	sub	r2,zero,r2
   14178:	18800015 	stw	r2,0(r3)
    rc = -1;
   1417c:	00bfffc4 	movi	r2,-1
   14180:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   14184:	e0bffb17 	ldw	r2,-20(fp)
}
   14188:	e037883a 	mov	sp,fp
   1418c:	dfc00117 	ldw	ra,4(sp)
   14190:	df000017 	ldw	fp,0(sp)
   14194:	dec00204 	addi	sp,sp,8
   14198:	f800283a 	ret

0001419c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1419c:	defff904 	addi	sp,sp,-28
   141a0:	dfc00615 	stw	ra,24(sp)
   141a4:	df000515 	stw	fp,20(sp)
   141a8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   141ac:	0009883a 	mov	r4,zero
   141b0:	001d1700 	call	1d170 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   141b4:	001518c0 	call	1518c <OSInit>
   141b8:	01000044 	movi	r4,1
   141bc:	001a8840 	call	1a884 <OSSemCreate>
   141c0:	1007883a 	mov	r3,r2
   141c4:	008000f4 	movhi	r2,3
   141c8:	10a7f504 	addi	r2,r2,-24620
   141cc:	10c00015 	stw	r3,0(r2)
   141d0:	01000044 	movi	r4,1
   141d4:	001a8840 	call	1a884 <OSSemCreate>
   141d8:	1007883a 	mov	r3,r2
   141dc:	008000f4 	movhi	r2,3
   141e0:	10a7f704 	addi	r2,r2,-24612
   141e4:	10c00015 	stw	r3,0(r2)
   141e8:	008000f4 	movhi	r2,3
   141ec:	10a7f004 	addi	r2,r2,-24640
   141f0:	e0bffc15 	stw	r2,-16(fp)
   141f4:	00800044 	movi	r2,1
   141f8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   141fc:	e0bffd0b 	ldhu	r2,-12(fp)
   14200:	1009883a 	mov	r4,r2
   14204:	001a8840 	call	1a884 <OSSemCreate>
   14208:	1007883a 	mov	r3,r2
   1420c:	e0bffc17 	ldw	r2,-16(fp)
   14210:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14214:	001d1a40 	call	1d1a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14218:	010000b4 	movhi	r4,2
   1421c:	21177304 	addi	r4,r4,24012
   14220:	014000b4 	movhi	r5,2
   14224:	29577304 	addi	r5,r5,24012
   14228:	018000b4 	movhi	r6,2
   1422c:	31977304 	addi	r6,r6,24012
   14230:	002418c0 	call	2418c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14234:	0023f540 	call	23f54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14238:	010000b4 	movhi	r4,2
   1423c:	210fec04 	addi	r4,r4,16304
   14240:	0024e500 	call	24e50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14244:	d1283717 	ldw	r4,-24356(gp)
   14248:	d0e83817 	ldw	r3,-24352(gp)
   1424c:	d0a83917 	ldw	r2,-24348(gp)
   14250:	180b883a 	mov	r5,r3
   14254:	100d883a 	mov	r6,r2
   14258:	00037180 	call	3718 <main>
   1425c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   14260:	01000044 	movi	r4,1
   14264:	0013ca40 	call	13ca4 <close>
  exit (result);
   14268:	e13ffb17 	ldw	r4,-20(fp)
   1426c:	0024e640 	call	24e64 <exit>

00014270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14270:	defffe04 	addi	sp,sp,-8
   14274:	dfc00115 	stw	ra,4(sp)
   14278:	df000015 	stw	fp,0(sp)
   1427c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14280:	008000b4 	movhi	r2,2
   14284:	109fd304 	addi	r2,r2,32588
   14288:	10800017 	ldw	r2,0(r2)
   1428c:	10000526 	beq	r2,zero,142a4 <alt_get_errno+0x34>
   14290:	008000b4 	movhi	r2,2
   14294:	109fd304 	addi	r2,r2,32588
   14298:	10800017 	ldw	r2,0(r2)
   1429c:	103ee83a 	callr	r2
   142a0:	00000206 	br	142ac <alt_get_errno+0x3c>
   142a4:	008000f4 	movhi	r2,3
   142a8:	10a7ef04 	addi	r2,r2,-24644
}
   142ac:	e037883a 	mov	sp,fp
   142b0:	dfc00117 	ldw	ra,4(sp)
   142b4:	df000017 	ldw	fp,0(sp)
   142b8:	dec00204 	addi	sp,sp,8
   142bc:	f800283a 	ret

000142c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   142c0:	defff904 	addi	sp,sp,-28
   142c4:	dfc00615 	stw	ra,24(sp)
   142c8:	df000515 	stw	fp,20(sp)
   142cc:	df000504 	addi	fp,sp,20
   142d0:	e13ffd15 	stw	r4,-12(fp)
   142d4:	e17ffe15 	stw	r5,-8(fp)
   142d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	10000616 	blt	r2,zero,142fc <read+0x3c>
   142e4:	e0bffd17 	ldw	r2,-12(fp)
   142e8:	10c00324 	muli	r3,r2,12
   142ec:	008000b4 	movhi	r2,2
   142f0:	109a5e04 	addi	r2,r2,27000
   142f4:	1885883a 	add	r2,r3,r2
   142f8:	00000106 	br	14300 <read+0x40>
   142fc:	0005883a 	mov	r2,zero
   14300:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14304:	e0bffb17 	ldw	r2,-20(fp)
   14308:	10002226 	beq	r2,zero,14394 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1430c:	e0bffb17 	ldw	r2,-20(fp)
   14310:	10800217 	ldw	r2,8(r2)
   14314:	108000cc 	andi	r2,r2,3
   14318:	10800060 	cmpeqi	r2,r2,1
   1431c:	1000181e 	bne	r2,zero,14380 <read+0xc0>
        (fd->dev->read))
   14320:	e0bffb17 	ldw	r2,-20(fp)
   14324:	10800017 	ldw	r2,0(r2)
   14328:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1432c:	10001426 	beq	r2,zero,14380 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14330:	e0bffb17 	ldw	r2,-20(fp)
   14334:	10800017 	ldw	r2,0(r2)
   14338:	10800517 	ldw	r2,20(r2)
   1433c:	e0ffff17 	ldw	r3,-4(fp)
   14340:	e13ffb17 	ldw	r4,-20(fp)
   14344:	e17ffe17 	ldw	r5,-8(fp)
   14348:	180d883a 	mov	r6,r3
   1434c:	103ee83a 	callr	r2
   14350:	e0bffc15 	stw	r2,-16(fp)
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	1000070e 	bge	r2,zero,14378 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1435c:	00142700 	call	14270 <alt_get_errno>
   14360:	1007883a 	mov	r3,r2
   14364:	e0bffc17 	ldw	r2,-16(fp)
   14368:	0085c83a 	sub	r2,zero,r2
   1436c:	18800015 	stw	r2,0(r3)
          return -1;
   14370:	00bfffc4 	movi	r2,-1
   14374:	00000c06 	br	143a8 <read+0xe8>
        }
        return rval;
   14378:	e0bffc17 	ldw	r2,-16(fp)
   1437c:	00000a06 	br	143a8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14380:	00142700 	call	14270 <alt_get_errno>
   14384:	1007883a 	mov	r3,r2
   14388:	00800344 	movi	r2,13
   1438c:	18800015 	stw	r2,0(r3)
   14390:	00000406 	br	143a4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14394:	00142700 	call	14270 <alt_get_errno>
   14398:	1007883a 	mov	r3,r2
   1439c:	00801444 	movi	r2,81
   143a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   143a4:	00bfffc4 	movi	r2,-1
}
   143a8:	e037883a 	mov	sp,fp
   143ac:	dfc00117 	ldw	ra,4(sp)
   143b0:	df000017 	ldw	fp,0(sp)
   143b4:	dec00204 	addi	sp,sp,8
   143b8:	f800283a 	ret

000143bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   143bc:	defffe04 	addi	sp,sp,-8
   143c0:	df000115 	stw	fp,4(sp)
   143c4:	df000104 	addi	fp,sp,4
   143c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   143cc:	e0bfff17 	ldw	r2,-4(fp)
   143d0:	108000d0 	cmplti	r2,r2,3
   143d4:	10000d1e 	bne	r2,zero,1440c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   143d8:	008000b4 	movhi	r2,2
   143dc:	109a5e04 	addi	r2,r2,27000
   143e0:	e0ffff17 	ldw	r3,-4(fp)
   143e4:	18c00324 	muli	r3,r3,12
   143e8:	18c00204 	addi	r3,r3,8
   143ec:	10c5883a 	add	r2,r2,r3
   143f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   143f4:	008000b4 	movhi	r2,2
   143f8:	109a5e04 	addi	r2,r2,27000
   143fc:	e0ffff17 	ldw	r3,-4(fp)
   14400:	18c00324 	muli	r3,r3,12
   14404:	10c5883a 	add	r2,r2,r3
   14408:	10000015 	stw	zero,0(r2)
  }
}
   1440c:	e037883a 	mov	sp,fp
   14410:	df000017 	ldw	fp,0(sp)
   14414:	dec00104 	addi	sp,sp,4
   14418:	f800283a 	ret

0001441c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1441c:	defff904 	addi	sp,sp,-28
   14420:	df000615 	stw	fp,24(sp)
   14424:	df000604 	addi	fp,sp,24
   14428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1442c:	0005303a 	rdctl	r2,status
   14430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14434:	e0fffc17 	ldw	r3,-16(fp)
   14438:	00bfff84 	movi	r2,-2
   1443c:	1884703a 	and	r2,r3,r2
   14440:	1001703a 	wrctl	status,r2
  
  return context;
   14444:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14448:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1444c:	d0a01a17 	ldw	r2,-32664(gp)
   14450:	10c000c4 	addi	r3,r2,3
   14454:	00bfff04 	movi	r2,-4
   14458:	1884703a 	and	r2,r3,r2
   1445c:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14460:	d0e01a17 	ldw	r3,-32664(gp)
   14464:	e0bfff17 	ldw	r2,-4(fp)
   14468:	1887883a 	add	r3,r3,r2
   1446c:	00810034 	movhi	r2,1024
   14470:	10800004 	addi	r2,r2,0
   14474:	10c0062e 	bgeu	r2,r3,14490 <sbrk+0x74>
   14478:	e0bffa17 	ldw	r2,-24(fp)
   1447c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14480:	e0bffd17 	ldw	r2,-12(fp)
   14484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14488:	00bfffc4 	movi	r2,-1
   1448c:	00000b06 	br	144bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14490:	d0a01a17 	ldw	r2,-32664(gp)
   14494:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   14498:	d0e01a17 	ldw	r3,-32664(gp)
   1449c:	e0bfff17 	ldw	r2,-4(fp)
   144a0:	1885883a 	add	r2,r3,r2
   144a4:	d0a01a15 	stw	r2,-32664(gp)
   144a8:	e0bffa17 	ldw	r2,-24(fp)
   144ac:	e0bffe15 	stw	r2,-8(fp)
   144b0:	e0bffe17 	ldw	r2,-8(fp)
   144b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   144b8:	e0bffb17 	ldw	r2,-20(fp)
} 
   144bc:	e037883a 	mov	sp,fp
   144c0:	df000017 	ldw	fp,0(sp)
   144c4:	dec00104 	addi	sp,sp,4
   144c8:	f800283a 	ret

000144cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   144cc:	defffe04 	addi	sp,sp,-8
   144d0:	dfc00115 	stw	ra,4(sp)
   144d4:	df000015 	stw	fp,0(sp)
   144d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   144dc:	008000b4 	movhi	r2,2
   144e0:	109fd304 	addi	r2,r2,32588
   144e4:	10800017 	ldw	r2,0(r2)
   144e8:	10000526 	beq	r2,zero,14500 <alt_get_errno+0x34>
   144ec:	008000b4 	movhi	r2,2
   144f0:	109fd304 	addi	r2,r2,32588
   144f4:	10800017 	ldw	r2,0(r2)
   144f8:	103ee83a 	callr	r2
   144fc:	00000206 	br	14508 <alt_get_errno+0x3c>
   14500:	008000f4 	movhi	r2,3
   14504:	10a7ef04 	addi	r2,r2,-24644
}
   14508:	e037883a 	mov	sp,fp
   1450c:	dfc00117 	ldw	ra,4(sp)
   14510:	df000017 	ldw	fp,0(sp)
   14514:	dec00204 	addi	sp,sp,8
   14518:	f800283a 	ret

0001451c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1451c:	defff904 	addi	sp,sp,-28
   14520:	dfc00615 	stw	ra,24(sp)
   14524:	df000515 	stw	fp,20(sp)
   14528:	df000504 	addi	fp,sp,20
   1452c:	e13ffd15 	stw	r4,-12(fp)
   14530:	e17ffe15 	stw	r5,-8(fp)
   14534:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14538:	e0bffd17 	ldw	r2,-12(fp)
   1453c:	10000616 	blt	r2,zero,14558 <write+0x3c>
   14540:	e0bffd17 	ldw	r2,-12(fp)
   14544:	10c00324 	muli	r3,r2,12
   14548:	008000b4 	movhi	r2,2
   1454c:	109a5e04 	addi	r2,r2,27000
   14550:	1885883a 	add	r2,r3,r2
   14554:	00000106 	br	1455c <write+0x40>
   14558:	0005883a 	mov	r2,zero
   1455c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14560:	e0bffb17 	ldw	r2,-20(fp)
   14564:	10002126 	beq	r2,zero,145ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14568:	e0bffb17 	ldw	r2,-20(fp)
   1456c:	10800217 	ldw	r2,8(r2)
   14570:	108000cc 	andi	r2,r2,3
   14574:	10001826 	beq	r2,zero,145d8 <write+0xbc>
   14578:	e0bffb17 	ldw	r2,-20(fp)
   1457c:	10800017 	ldw	r2,0(r2)
   14580:	10800617 	ldw	r2,24(r2)
   14584:	10001426 	beq	r2,zero,145d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14588:	e0bffb17 	ldw	r2,-20(fp)
   1458c:	10800017 	ldw	r2,0(r2)
   14590:	10800617 	ldw	r2,24(r2)
   14594:	e0ffff17 	ldw	r3,-4(fp)
   14598:	e13ffb17 	ldw	r4,-20(fp)
   1459c:	e17ffe17 	ldw	r5,-8(fp)
   145a0:	180d883a 	mov	r6,r3
   145a4:	103ee83a 	callr	r2
   145a8:	e0bffc15 	stw	r2,-16(fp)
   145ac:	e0bffc17 	ldw	r2,-16(fp)
   145b0:	1000070e 	bge	r2,zero,145d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   145b4:	00144cc0 	call	144cc <alt_get_errno>
   145b8:	1007883a 	mov	r3,r2
   145bc:	e0bffc17 	ldw	r2,-16(fp)
   145c0:	0085c83a 	sub	r2,zero,r2
   145c4:	18800015 	stw	r2,0(r3)
        return -1;
   145c8:	00bfffc4 	movi	r2,-1
   145cc:	00000c06 	br	14600 <write+0xe4>
      }
      return rval;
   145d0:	e0bffc17 	ldw	r2,-16(fp)
   145d4:	00000a06 	br	14600 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   145d8:	00144cc0 	call	144cc <alt_get_errno>
   145dc:	1007883a 	mov	r3,r2
   145e0:	00800344 	movi	r2,13
   145e4:	18800015 	stw	r2,0(r3)
   145e8:	00000406 	br	145fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   145ec:	00144cc0 	call	144cc <alt_get_errno>
   145f0:	1007883a 	mov	r3,r2
   145f4:	00801444 	movi	r2,81
   145f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   145fc:	00bfffc4 	movi	r2,-1
}
   14600:	e037883a 	mov	sp,fp
   14604:	dfc00117 	ldw	ra,4(sp)
   14608:	df000017 	ldw	fp,0(sp)
   1460c:	dec00204 	addi	sp,sp,8
   14610:	f800283a 	ret

00014614 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   14614:	deffdf04 	addi	sp,sp,-132
   14618:	dfc02015 	stw	ra,128(sp)
   1461c:	df001f15 	stw	fp,124(sp)
   14620:	df001f04 	addi	fp,sp,124
   14624:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   14628:	e0bfe204 	addi	r2,fp,-120
   1462c:	01003fc4 	movi	r4,255
   14630:	100b883a 	mov	r5,r2
   14634:	001ca380 	call	1ca38 <OSTaskQuery>
   14638:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1463c:	e0bffe83 	ldbu	r2,-6(fp)
   14640:	10803fcc 	andi	r2,r2,255
   14644:	10000126 	beq	r2,zero,1464c <__env_lock+0x38>
    return;
   14648:	00001d06 	br	146c0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   1464c:	e0bfee83 	ldbu	r2,-70(fp)
   14650:	10803fcc 	andi	r2,r2,255
   14654:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   14658:	d0e83b17 	ldw	r3,-24340(gp)
   1465c:	e0bffd04 	addi	r2,fp,-12
   14660:	1809883a 	mov	r4,r3
   14664:	100b883a 	mov	r5,r2
   14668:	001b0d00 	call	1b0d0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1466c:	e0bffe43 	ldbu	r2,-7(fp)
   14670:	10803fcc 	andi	r2,r2,255
   14674:	10000726 	beq	r2,zero,14694 <__env_lock+0x80>
   14678:	d0a01b17 	ldw	r2,-32660(gp)
   1467c:	e0ffe117 	ldw	r3,-124(fp)
   14680:	1880041e 	bne	r3,r2,14694 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   14684:	d0a83a17 	ldw	r2,-24344(gp)
   14688:	10800044 	addi	r2,r2,1
   1468c:	d0a83a15 	stw	r2,-24344(gp)
   14690:	00000a06 	br	146bc <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   14694:	d0e83b17 	ldw	r3,-24340(gp)
   14698:	e0bffe84 	addi	r2,fp,-6
   1469c:	1809883a 	mov	r4,r3
   146a0:	000b883a 	mov	r5,zero
   146a4:	100d883a 	mov	r6,r2
   146a8:	001abec0 	call	1abec <OSSemPend>
    locks  = 1;
   146ac:	00800044 	movi	r2,1
   146b0:	d0a83a15 	stw	r2,-24344(gp)
    lockid = id;
   146b4:	e0bfe117 	ldw	r2,-124(fp)
   146b8:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   146bc:	0001883a 	nop
}
   146c0:	e037883a 	mov	sp,fp
   146c4:	dfc00117 	ldw	ra,4(sp)
   146c8:	df000017 	ldw	fp,0(sp)
   146cc:	dec00204 	addi	sp,sp,8
   146d0:	f800283a 	ret

000146d4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   146d4:	defffd04 	addi	sp,sp,-12
   146d8:	dfc00215 	stw	ra,8(sp)
   146dc:	df000115 	stw	fp,4(sp)
   146e0:	df000104 	addi	fp,sp,4
   146e4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   146e8:	d0a83a17 	ldw	r2,-24344(gp)
   146ec:	1000011e 	bne	r2,zero,146f4 <__env_unlock+0x20>
    return;
   146f0:	00000a06 	br	1471c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   146f4:	d0a83a17 	ldw	r2,-24344(gp)
   146f8:	10bfffc4 	addi	r2,r2,-1
   146fc:	d0a83a15 	stw	r2,-24344(gp)
   14700:	d0a83a17 	ldw	r2,-24344(gp)
   14704:	1000051e 	bne	r2,zero,1471c <__env_unlock+0x48>
  {
    lockid = -1;
   14708:	00bfffc4 	movi	r2,-1
   1470c:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
   14710:	d0a83b17 	ldw	r2,-24340(gp)
   14714:	1009883a 	mov	r4,r2
   14718:	001afc00 	call	1afc0 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1471c:	e037883a 	mov	sp,fp
   14720:	dfc00117 	ldw	ra,4(sp)
   14724:	df000017 	ldw	fp,0(sp)
   14728:	dec00204 	addi	sp,sp,8
   1472c:	f800283a 	ret

00014730 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   14730:	deffdb04 	addi	sp,sp,-148
   14734:	dfc02415 	stw	ra,144(sp)
   14738:	df002315 	stw	fp,140(sp)
   1473c:	df002304 	addi	fp,sp,140
   14740:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14744:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   14748:	008000f4 	movhi	r2,3
   1474c:	10a7f844 	addi	r2,r2,-24607
   14750:	10800003 	ldbu	r2,0(r2)
   14754:	10803fcc 	andi	r2,r2,255
   14758:	10800060 	cmpeqi	r2,r2,1
   1475c:	1000011e 	bne	r2,zero,14764 <__malloc_lock+0x34>
      return;
   14760:	00003606 	br	1483c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   14764:	e0bfe204 	addi	r2,fp,-120
   14768:	01003fc4 	movi	r4,255
   1476c:	100b883a 	mov	r5,r2
   14770:	001ca380 	call	1ca38 <OSTaskQuery>
   14774:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   14778:	e0bffe83 	ldbu	r2,-6(fp)
   1477c:	10803fcc 	andi	r2,r2,255
   14780:	10000126 	beq	r2,zero,14788 <__malloc_lock+0x58>
    return;
   14784:	00002d06 	br	1483c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   14788:	e0bfee83 	ldbu	r2,-70(fp)
   1478c:	10803fcc 	andi	r2,r2,255
   14790:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   14794:	d0e83d17 	ldw	r3,-24332(gp)
   14798:	e0bffd04 	addi	r2,fp,-12
   1479c:	1809883a 	mov	r4,r3
   147a0:	100b883a 	mov	r5,r2
   147a4:	001b0d00 	call	1b0d0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147a8:	0005303a 	rdctl	r2,status
   147ac:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147b0:	e0ffdf17 	ldw	r3,-132(fp)
   147b4:	00bfff84 	movi	r2,-2
   147b8:	1884703a 	and	r2,r3,r2
   147bc:	1001703a 	wrctl	status,r2
  
  return context;
   147c0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   147c4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   147c8:	e0bffd0b 	ldhu	r2,-12(fp)
   147cc:	10bfffcc 	andi	r2,r2,65535
   147d0:	10000b1e 	bne	r2,zero,14800 <__malloc_lock+0xd0>
   147d4:	d0a01c17 	ldw	r2,-32656(gp)
   147d8:	e0ffde17 	ldw	r3,-136(fp)
   147dc:	1880081e 	bne	r3,r2,14800 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   147e0:	d0a83c17 	ldw	r2,-24336(gp)
   147e4:	10800044 	addi	r2,r2,1
   147e8:	d0a83c15 	stw	r2,-24336(gp)
   147ec:	e0bfdd17 	ldw	r2,-140(fp)
   147f0:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147f4:	e0bfe017 	ldw	r2,-128(fp)
   147f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   147fc:	00000e06 	br	14838 <__malloc_lock+0x108>
   14800:	e0bfdd17 	ldw	r2,-140(fp)
   14804:	e0bfe115 	stw	r2,-124(fp)
   14808:	e0bfe117 	ldw	r2,-124(fp)
   1480c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   14810:	d0e83d17 	ldw	r3,-24332(gp)
   14814:	e0bffe84 	addi	r2,fp,-6
   14818:	1809883a 	mov	r4,r3
   1481c:	000b883a 	mov	r5,zero
   14820:	100d883a 	mov	r6,r2
   14824:	001abec0 	call	1abec <OSSemPend>
    locks  = 1;
   14828:	00800044 	movi	r2,1
   1482c:	d0a83c15 	stw	r2,-24336(gp)
    lockid = id;
   14830:	e0bfde17 	ldw	r2,-136(fp)
   14834:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   14838:	0001883a 	nop
}
   1483c:	e037883a 	mov	sp,fp
   14840:	dfc00117 	ldw	ra,4(sp)
   14844:	df000017 	ldw	fp,0(sp)
   14848:	dec00204 	addi	sp,sp,8
   1484c:	f800283a 	ret

00014850 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14850:	defff804 	addi	sp,sp,-32
   14854:	dfc00715 	stw	ra,28(sp)
   14858:	df000615 	stw	fp,24(sp)
   1485c:	df000604 	addi	fp,sp,24
   14860:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14864:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   14868:	008000f4 	movhi	r2,3
   1486c:	10a7f844 	addi	r2,r2,-24607
   14870:	10800003 	ldbu	r2,0(r2)
   14874:	10803fcc 	andi	r2,r2,255
   14878:	10800060 	cmpeqi	r2,r2,1
   1487c:	1000011e 	bne	r2,zero,14884 <__malloc_unlock+0x34>
      return;
   14880:	00002206 	br	1490c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14884:	0005303a 	rdctl	r2,status
   14888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1488c:	e0fffb17 	ldw	r3,-20(fp)
   14890:	00bfff84 	movi	r2,-2
   14894:	1884703a 	and	r2,r3,r2
   14898:	1001703a 	wrctl	status,r2
  
  return context;
   1489c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   148a0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   148a4:	d0a83c17 	ldw	r2,-24336(gp)
   148a8:	1000051e 	bne	r2,zero,148c0 <__malloc_unlock+0x70>
   148ac:	e0bffa17 	ldw	r2,-24(fp)
   148b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148b4:	e0bffc17 	ldw	r2,-16(fp)
   148b8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   148bc:	00001306 	br	1490c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   148c0:	d0a83c17 	ldw	r2,-24336(gp)
   148c4:	10bfffc4 	addi	r2,r2,-1
   148c8:	d0a83c15 	stw	r2,-24336(gp)
   148cc:	d0a83c17 	ldw	r2,-24336(gp)
   148d0:	10000a1e 	bne	r2,zero,148fc <__malloc_unlock+0xac>
  {
    lockid = -1;
   148d4:	00bfffc4 	movi	r2,-1
   148d8:	d0a01c15 	stw	r2,-32656(gp)
   148dc:	e0bffa17 	ldw	r2,-24(fp)
   148e0:	e0bffd15 	stw	r2,-12(fp)
   148e4:	e0bffd17 	ldw	r2,-12(fp)
   148e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   148ec:	d0a83d17 	ldw	r2,-24332(gp)
   148f0:	1009883a 	mov	r4,r2
   148f4:	001afc00 	call	1afc0 <OSSemPost>
   148f8:	00000406 	br	1490c <__malloc_unlock+0xbc>
   148fc:	e0bffa17 	ldw	r2,-24(fp)
   14900:	e0bffe15 	stw	r2,-8(fp)
   14904:	e0bffe17 	ldw	r2,-8(fp)
   14908:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1490c:	e037883a 	mov	sp,fp
   14910:	dfc00117 	ldw	ra,4(sp)
   14914:	df000017 	ldw	fp,0(sp)
   14918:	dec00204 	addi	sp,sp,8
   1491c:	f800283a 	ret

00014920 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   14920:	defff704 	addi	sp,sp,-36
   14924:	dfc00815 	stw	ra,32(sp)
   14928:	df000715 	stw	fp,28(sp)
   1492c:	df000704 	addi	fp,sp,28
   14930:	e13ffd15 	stw	r4,-12(fp)
   14934:	e17ffe15 	stw	r5,-8(fp)
   14938:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1493c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14940:	e0bfff17 	ldw	r2,-4(fp)
   14944:	1000021e 	bne	r2,zero,14950 <OSEventNameGet+0x30>
        return (0);
   14948:	0005883a 	mov	r2,zero
   1494c:	00003706 	br	14a2c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   14950:	e0bffd17 	ldw	r2,-12(fp)
   14954:	1000051e 	bne	r2,zero,1496c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   14958:	e0bfff17 	ldw	r2,-4(fp)
   1495c:	00c00104 	movi	r3,4
   14960:	10c00005 	stb	r3,0(r2)
        return (0);
   14964:	0005883a 	mov	r2,zero
   14968:	00003006 	br	14a2c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1496c:	e0bffe17 	ldw	r2,-8(fp)
   14970:	1000051e 	bne	r2,zero,14988 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14974:	e0bfff17 	ldw	r2,-4(fp)
   14978:	00c00304 	movi	r3,12
   1497c:	10c00005 	stb	r3,0(r2)
        return (0);
   14980:	0005883a 	mov	r2,zero
   14984:	00002906 	br	14a2c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14988:	d0a84c03 	ldbu	r2,-24272(gp)
   1498c:	10803fcc 	andi	r2,r2,255
   14990:	10000526 	beq	r2,zero,149a8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	00c00444 	movi	r3,17
   1499c:	10c00005 	stb	r3,0(r2)
        return (0);
   149a0:	0005883a 	mov	r2,zero
   149a4:	00002106 	br	14a2c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   149a8:	e0bffd17 	ldw	r2,-12(fp)
   149ac:	10800003 	ldbu	r2,0(r2)
   149b0:	10803fcc 	andi	r2,r2,255
   149b4:	10bfffc4 	addi	r2,r2,-1
   149b8:	10800128 	cmpgeui	r2,r2,4
   149bc:	10000526 	beq	r2,zero,149d4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   149c0:	e0bfff17 	ldw	r2,-4(fp)
   149c4:	00c00044 	movi	r3,1
   149c8:	10c00005 	stb	r3,0(r2)
             return (0);
   149cc:	0005883a 	mov	r2,zero
   149d0:	00001606 	br	14a2c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   149d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149d8:	0005303a 	rdctl	r2,status
   149dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149e0:	e0fffb17 	ldw	r3,-20(fp)
   149e4:	00bfff84 	movi	r2,-2
   149e8:	1884703a 	and	r2,r3,r2
   149ec:	1001703a 	wrctl	status,r2
  
  return context;
   149f0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   149f4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   149f8:	e0bffd17 	ldw	r2,-12(fp)
   149fc:	10800384 	addi	r2,r2,14
   14a00:	e13ffe17 	ldw	r4,-8(fp)
   14a04:	100b883a 	mov	r5,r2
   14a08:	00163740 	call	16374 <OS_StrCopy>
   14a0c:	e0bffa05 	stb	r2,-24(fp)
   14a10:	e0bff917 	ldw	r2,-28(fp)
   14a14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a18:	e0bffc17 	ldw	r2,-16(fp)
   14a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	10000005 	stb	zero,0(r2)
    return (len);
   14a28:	e0bffa03 	ldbu	r2,-24(fp)
}
   14a2c:	e037883a 	mov	sp,fp
   14a30:	dfc00117 	ldw	ra,4(sp)
   14a34:	df000017 	ldw	fp,0(sp)
   14a38:	dec00204 	addi	sp,sp,8
   14a3c:	f800283a 	ret

00014a40 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   14a40:	defff604 	addi	sp,sp,-40
   14a44:	dfc00915 	stw	ra,36(sp)
   14a48:	df000815 	stw	fp,32(sp)
   14a4c:	df000804 	addi	fp,sp,32
   14a50:	e13ffd15 	stw	r4,-12(fp)
   14a54:	e17ffe15 	stw	r5,-8(fp)
   14a58:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14a60:	e0bfff17 	ldw	r2,-4(fp)
   14a64:	1000011e 	bne	r2,zero,14a6c <OSEventNameSet+0x2c>
        return;
   14a68:	00003f06 	br	14b68 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   14a6c:	e0bffd17 	ldw	r2,-12(fp)
   14a70:	1000041e 	bne	r2,zero,14a84 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14a74:	e0bfff17 	ldw	r2,-4(fp)
   14a78:	00c00104 	movi	r3,4
   14a7c:	10c00005 	stb	r3,0(r2)
        return;
   14a80:	00003906 	br	14b68 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14a84:	e0bffe17 	ldw	r2,-8(fp)
   14a88:	1000041e 	bne	r2,zero,14a9c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14a8c:	e0bfff17 	ldw	r2,-4(fp)
   14a90:	00c00304 	movi	r3,12
   14a94:	10c00005 	stb	r3,0(r2)
        return;
   14a98:	00003306 	br	14b68 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14a9c:	d0a84c03 	ldbu	r2,-24272(gp)
   14aa0:	10803fcc 	andi	r2,r2,255
   14aa4:	10000426 	beq	r2,zero,14ab8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   14aa8:	e0bfff17 	ldw	r2,-4(fp)
   14aac:	00c00484 	movi	r3,18
   14ab0:	10c00005 	stb	r3,0(r2)
        return;
   14ab4:	00002c06 	br	14b68 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   14ab8:	e0bffd17 	ldw	r2,-12(fp)
   14abc:	10800003 	ldbu	r2,0(r2)
   14ac0:	10803fcc 	andi	r2,r2,255
   14ac4:	10bfffc4 	addi	r2,r2,-1
   14ac8:	10800128 	cmpgeui	r2,r2,4
   14acc:	10000426 	beq	r2,zero,14ae0 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   14ad0:	e0bfff17 	ldw	r2,-4(fp)
   14ad4:	00c00044 	movi	r3,1
   14ad8:	10c00005 	stb	r3,0(r2)
             return;
   14adc:	00002206 	br	14b68 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   14ae0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ae4:	0005303a 	rdctl	r2,status
   14ae8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14aec:	e0fffa17 	ldw	r3,-24(fp)
   14af0:	00bfff84 	movi	r2,-2
   14af4:	1884703a 	and	r2,r3,r2
   14af8:	1001703a 	wrctl	status,r2
  
  return context;
   14afc:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   14b00:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   14b04:	e13ffe17 	ldw	r4,-8(fp)
   14b08:	00163e80 	call	163e8 <OS_StrLen>
   14b0c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   14b10:	e0bff903 	ldbu	r2,-28(fp)
   14b14:	10800830 	cmpltui	r2,r2,32
   14b18:	1000081e 	bne	r2,zero,14b3c <OSEventNameSet+0xfc>
   14b1c:	e0bff817 	ldw	r2,-32(fp)
   14b20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b24:	e0bffb17 	ldw	r2,-20(fp)
   14b28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   14b2c:	e0bfff17 	ldw	r2,-4(fp)
   14b30:	00c002c4 	movi	r3,11
   14b34:	10c00005 	stb	r3,0(r2)
        return;
   14b38:	00000b06 	br	14b68 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   14b3c:	e0bffd17 	ldw	r2,-12(fp)
   14b40:	10800384 	addi	r2,r2,14
   14b44:	1009883a 	mov	r4,r2
   14b48:	e17ffe17 	ldw	r5,-8(fp)
   14b4c:	00163740 	call	16374 <OS_StrCopy>
   14b50:	e0bff817 	ldw	r2,-32(fp)
   14b54:	e0bffc15 	stw	r2,-16(fp)
   14b58:	e0bffc17 	ldw	r2,-16(fp)
   14b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14b60:	e0bfff17 	ldw	r2,-4(fp)
   14b64:	10000005 	stb	zero,0(r2)
}
   14b68:	e037883a 	mov	sp,fp
   14b6c:	dfc00117 	ldw	ra,4(sp)
   14b70:	df000017 	ldw	fp,0(sp)
   14b74:	dec00204 	addi	sp,sp,8
   14b78:	f800283a 	ret

00014b7c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   14b7c:	deffed04 	addi	sp,sp,-76
   14b80:	dfc01215 	stw	ra,72(sp)
   14b84:	df001115 	stw	fp,68(sp)
   14b88:	df001104 	addi	fp,sp,68
   14b8c:	e13ffc15 	stw	r4,-16(fp)
   14b90:	e17ffd15 	stw	r5,-12(fp)
   14b94:	e1bffe15 	stw	r6,-8(fp)
   14b98:	3805883a 	mov	r2,r7
   14b9c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   14ba0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   14ba4:	e0800217 	ldw	r2,8(fp)
   14ba8:	1000021e 	bne	r2,zero,14bb4 <OSEventPendMulti+0x38>
        return (0);
   14bac:	0005883a 	mov	r2,zero
   14bb0:	00017106 	br	15178 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   14bb4:	e0bffc17 	ldw	r2,-16(fp)
   14bb8:	1000051e 	bne	r2,zero,14bd0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   14bbc:	e0800217 	ldw	r2,8(fp)
   14bc0:	00c00104 	movi	r3,4
   14bc4:	10c00005 	stb	r3,0(r2)
        return (0);
   14bc8:	0005883a 	mov	r2,zero
   14bcc:	00016a06 	br	15178 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   14bd0:	e0bffd17 	ldw	r2,-12(fp)
   14bd4:	1000051e 	bne	r2,zero,14bec <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   14bd8:	e0800217 	ldw	r2,8(fp)
   14bdc:	00c00104 	movi	r3,4
   14be0:	10c00005 	stb	r3,0(r2)
        return (0);
   14be4:	0005883a 	mov	r2,zero
   14be8:	00016306 	br	15178 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   14bec:	e0bffe17 	ldw	r2,-8(fp)
   14bf0:	1000051e 	bne	r2,zero,14c08 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   14bf4:	e0800217 	ldw	r2,8(fp)
   14bf8:	00c00104 	movi	r3,4
   14bfc:	10c00005 	stb	r3,0(r2)
        return (0);
   14c00:	0005883a 	mov	r2,zero
   14c04:	00015c06 	br	15178 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   14c08:	e0bffd17 	ldw	r2,-12(fp)
   14c0c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   14c10:	e0bffc17 	ldw	r2,-16(fp)
   14c14:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   14c18:	e0bfef17 	ldw	r2,-68(fp)
   14c1c:	10800017 	ldw	r2,0(r2)
   14c20:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   14c24:	00001906 	br	14c8c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   14c28:	e0bff017 	ldw	r2,-64(fp)
   14c2c:	10800003 	ldbu	r2,0(r2)
   14c30:	10803fcc 	andi	r2,r2,255
   14c34:	10c000a0 	cmpeqi	r3,r2,2
   14c38:	1800091e 	bne	r3,zero,14c60 <OSEventPendMulti+0xe4>
   14c3c:	10c000e0 	cmpeqi	r3,r2,3
   14c40:	1800091e 	bne	r3,zero,14c68 <OSEventPendMulti+0xec>
   14c44:	10800060 	cmpeqi	r2,r2,1
   14c48:	1000091e 	bne	r2,zero,14c70 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   14c4c:	e0800217 	ldw	r2,8(fp)
   14c50:	00c00044 	movi	r3,1
   14c54:	10c00005 	stb	r3,0(r2)
                 return (0);
   14c58:	0005883a 	mov	r2,zero
   14c5c:	00014606 	br	15178 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   14c60:	0001883a 	nop
   14c64:	00000306 	br	14c74 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   14c68:	0001883a 	nop
   14c6c:	00000106 	br	14c74 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   14c70:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   14c74:	e0bfef17 	ldw	r2,-68(fp)
   14c78:	10800104 	addi	r2,r2,4
   14c7c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14c80:	e0bfef17 	ldw	r2,-68(fp)
   14c84:	10800017 	ldw	r2,0(r2)
   14c88:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   14c8c:	e0bff017 	ldw	r2,-64(fp)
   14c90:	103fe51e 	bne	r2,zero,14c28 <__alt_mem_Flash_flash_data+0xf4014c28>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   14c94:	d0a84c03 	ldbu	r2,-24272(gp)
   14c98:	10803fcc 	andi	r2,r2,255
   14c9c:	10000526 	beq	r2,zero,14cb4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   14ca0:	e0800217 	ldw	r2,8(fp)
   14ca4:	00c00084 	movi	r3,2
   14ca8:	10c00005 	stb	r3,0(r2)
        return (0);
   14cac:	0005883a 	mov	r2,zero
   14cb0:	00013106 	br	15178 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   14cb4:	d0a83e03 	ldbu	r2,-24328(gp)
   14cb8:	10803fcc 	andi	r2,r2,255
   14cbc:	10000526 	beq	r2,zero,14cd4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   14cc0:	e0800217 	ldw	r2,8(fp)
   14cc4:	00c00344 	movi	r3,13
   14cc8:	10c00005 	stb	r3,0(r2)
        return (0);
   14ccc:	0005883a 	mov	r2,zero
   14cd0:	00012906 	br	15178 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fff517 	ldw	r3,-44(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14cf0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   14cf4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   14cf8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   14cfc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   14d08:	e0bfef17 	ldw	r2,-68(fp)
   14d0c:	10800017 	ldw	r2,0(r2)
   14d10:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   14d14:	00008106 	br	14f1c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   14d18:	e0bff017 	ldw	r2,-64(fp)
   14d1c:	10800003 	ldbu	r2,0(r2)
   14d20:	10803fcc 	andi	r2,r2,255
   14d24:	10c000a0 	cmpeqi	r3,r2,2
   14d28:	18003c1e 	bne	r3,zero,14e1c <OSEventPendMulti+0x2a0>
   14d2c:	10c000e0 	cmpeqi	r3,r2,3
   14d30:	1800031e 	bne	r3,zero,14d40 <OSEventPendMulti+0x1c4>
   14d34:	10800060 	cmpeqi	r2,r2,1
   14d38:	10001e1e 	bne	r2,zero,14db4 <OSEventPendMulti+0x238>
   14d3c:	00006606 	br	14ed8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   14d40:	e0bff017 	ldw	r2,-64(fp)
   14d44:	1080020b 	ldhu	r2,8(r2)
   14d48:	10bfffcc 	andi	r2,r2,65535
   14d4c:	10001526 	beq	r2,zero,14da4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   14d50:	e0bff017 	ldw	r2,-64(fp)
   14d54:	1080020b 	ldhu	r2,8(r2)
   14d58:	10bfffc4 	addi	r2,r2,-1
   14d5c:	1007883a 	mov	r3,r2
   14d60:	e0bff017 	ldw	r2,-64(fp)
   14d64:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   14d68:	e0bffd17 	ldw	r2,-12(fp)
   14d6c:	10c00104 	addi	r3,r2,4
   14d70:	e0fffd15 	stw	r3,-12(fp)
   14d74:	e0fff017 	ldw	r3,-64(fp)
   14d78:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   14d7c:	00800044 	movi	r2,1
   14d80:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   14d84:	e0bffe17 	ldw	r2,-8(fp)
   14d88:	10c00104 	addi	r3,r2,4
   14d8c:	e0fffe15 	stw	r3,-8(fp)
   14d90:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   14d94:	e0bff18b 	ldhu	r2,-58(fp)
   14d98:	10800044 	addi	r2,r2,1
   14d9c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   14da0:	00005806 	br	14f04 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   14da4:	e0bff203 	ldbu	r2,-56(fp)
   14da8:	10800054 	ori	r2,r2,1
   14dac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14db0:	00005406 	br	14f04 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   14db4:	e0bff017 	ldw	r2,-64(fp)
   14db8:	10800117 	ldw	r2,4(r2)
   14dbc:	10001326 	beq	r2,zero,14e0c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   14dc0:	e0bffe17 	ldw	r2,-8(fp)
   14dc4:	10c00104 	addi	r3,r2,4
   14dc8:	e0fffe15 	stw	r3,-8(fp)
   14dcc:	e0fff017 	ldw	r3,-64(fp)
   14dd0:	18c00117 	ldw	r3,4(r3)
   14dd4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   14dd8:	e0bff017 	ldw	r2,-64(fp)
   14ddc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   14de0:	e0bffd17 	ldw	r2,-12(fp)
   14de4:	10c00104 	addi	r3,r2,4
   14de8:	e0fffd15 	stw	r3,-12(fp)
   14dec:	e0fff017 	ldw	r3,-64(fp)
   14df0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   14df4:	00800044 	movi	r2,1
   14df8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   14dfc:	e0bff18b 	ldhu	r2,-58(fp)
   14e00:	10800044 	addi	r2,r2,1
   14e04:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   14e08:	00003e06 	br	14f04 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   14e0c:	e0bff203 	ldbu	r2,-56(fp)
   14e10:	10800094 	ori	r2,r2,2
   14e14:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14e18:	00003a06 	br	14f04 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   14e1c:	e0bff017 	ldw	r2,-64(fp)
   14e20:	10800117 	ldw	r2,4(r2)
   14e24:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   14e28:	e0bff417 	ldw	r2,-48(fp)
   14e2c:	1080058b 	ldhu	r2,22(r2)
   14e30:	10bfffcc 	andi	r2,r2,65535
   14e34:	10002426 	beq	r2,zero,14ec8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   14e38:	e0bffe17 	ldw	r2,-8(fp)
   14e3c:	10c00104 	addi	r3,r2,4
   14e40:	e0fffe15 	stw	r3,-8(fp)
   14e44:	e0fff417 	ldw	r3,-48(fp)
   14e48:	18c00417 	ldw	r3,16(r3)
   14e4c:	19400104 	addi	r5,r3,4
   14e50:	e13ff417 	ldw	r4,-48(fp)
   14e54:	21400415 	stw	r5,16(r4)
   14e58:	18c00017 	ldw	r3,0(r3)
   14e5c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   14e60:	e0bff417 	ldw	r2,-48(fp)
   14e64:	10c00417 	ldw	r3,16(r2)
   14e68:	e0bff417 	ldw	r2,-48(fp)
   14e6c:	10800217 	ldw	r2,8(r2)
   14e70:	1880041e 	bne	r3,r2,14e84 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   14e74:	e0bff417 	ldw	r2,-48(fp)
   14e78:	10c00117 	ldw	r3,4(r2)
   14e7c:	e0bff417 	ldw	r2,-48(fp)
   14e80:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   14e84:	e0bff417 	ldw	r2,-48(fp)
   14e88:	1080058b 	ldhu	r2,22(r2)
   14e8c:	10bfffc4 	addi	r2,r2,-1
   14e90:	1007883a 	mov	r3,r2
   14e94:	e0bff417 	ldw	r2,-48(fp)
   14e98:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   14e9c:	e0bffd17 	ldw	r2,-12(fp)
   14ea0:	10c00104 	addi	r3,r2,4
   14ea4:	e0fffd15 	stw	r3,-12(fp)
   14ea8:	e0fff017 	ldw	r3,-64(fp)
   14eac:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   14eb0:	00800044 	movi	r2,1
   14eb4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   14eb8:	e0bff18b 	ldhu	r2,-58(fp)
   14ebc:	10800044 	addi	r2,r2,1
   14ec0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   14ec4:	00000f06 	br	14f04 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   14ec8:	e0bff203 	ldbu	r2,-56(fp)
   14ecc:	10800114 	ori	r2,r2,4
   14ed0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14ed4:	00000b06 	br	14f04 <OSEventPendMulti+0x388>
   14ed8:	e0bff317 	ldw	r2,-52(fp)
   14edc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ee0:	e0bff617 	ldw	r2,-40(fp)
   14ee4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   14ee8:	e0bffd17 	ldw	r2,-12(fp)
   14eec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   14ef0:	e0800217 	ldw	r2,8(fp)
   14ef4:	00c00044 	movi	r3,1
   14ef8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   14efc:	e0bff18b 	ldhu	r2,-58(fp)
   14f00:	00009d06 	br	15178 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   14f04:	e0bfef17 	ldw	r2,-68(fp)
   14f08:	10800104 	addi	r2,r2,4
   14f0c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14f10:	e0bfef17 	ldw	r2,-68(fp)
   14f14:	10800017 	ldw	r2,0(r2)
   14f18:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   14f1c:	e0bff017 	ldw	r2,-64(fp)
   14f20:	103f7d1e 	bne	r2,zero,14d18 <__alt_mem_Flash_flash_data+0xf4014d18>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   14f24:	e0bff103 	ldbu	r2,-60(fp)
   14f28:	10800058 	cmpnei	r2,r2,1
   14f2c:	10000a1e 	bne	r2,zero,14f58 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   14f30:	e0bffd17 	ldw	r2,-12(fp)
   14f34:	10000015 	stw	zero,0(r2)
   14f38:	e0bff317 	ldw	r2,-52(fp)
   14f3c:	e0bff715 	stw	r2,-36(fp)
   14f40:	e0bff717 	ldw	r2,-36(fp)
   14f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   14f48:	e0800217 	ldw	r2,8(fp)
   14f4c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   14f50:	e0bff18b 	ldhu	r2,-58(fp)
   14f54:	00008806 	br	15178 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   14f58:	d0a84d17 	ldw	r2,-24268(gp)
   14f5c:	d0e84d17 	ldw	r3,-24268(gp)
   14f60:	19000c03 	ldbu	r4,48(r3)
   14f64:	e0fff203 	ldbu	r3,-56(fp)
   14f68:	20c6b03a 	or	r3,r4,r3
   14f6c:	1809883a 	mov	r4,r3
   14f70:	00ffe004 	movi	r3,-128
   14f74:	20c6b03a 	or	r3,r4,r3
   14f78:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14f7c:	d0a84d17 	ldw	r2,-24268(gp)
   14f80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   14f84:	d0a84d17 	ldw	r2,-24268(gp)
   14f88:	e0ffff0b 	ldhu	r3,-4(fp)
   14f8c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   14f90:	e13ffc17 	ldw	r4,-16(fp)
   14f94:	0015ac40 	call	15ac4 <OS_EventTaskWaitMulti>
   14f98:	e0bff317 	ldw	r2,-52(fp)
   14f9c:	e0bff815 	stw	r2,-32(fp)
   14fa0:	e0bff817 	ldw	r2,-32(fp)
   14fa4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   14fa8:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fac:	0005303a 	rdctl	r2,status
   14fb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fb4:	e0fff917 	ldw	r3,-28(fp)
   14fb8:	00bfff84 	movi	r2,-2
   14fbc:	1884703a 	and	r2,r3,r2
   14fc0:	1001703a 	wrctl	status,r2
  
  return context;
   14fc4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14fc8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   14fcc:	d0a84d17 	ldw	r2,-24268(gp)
   14fd0:	10800c43 	ldbu	r2,49(r2)
   14fd4:	10803fcc 	andi	r2,r2,255
   14fd8:	10000226 	beq	r2,zero,14fe4 <OSEventPendMulti+0x468>
   14fdc:	108000a0 	cmpeqi	r2,r2,2
   14fe0:	10001826 	beq	r2,zero,15044 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   14fe4:	d0a84d17 	ldw	r2,-24268(gp)
   14fe8:	10800717 	ldw	r2,28(r2)
   14fec:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   14ff0:	e0bff017 	ldw	r2,-64(fp)
   14ff4:	10000b26 	beq	r2,zero,15024 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	10c00104 	addi	r3,r2,4
   15000:	e0fffd15 	stw	r3,-12(fp)
   15004:	e0fff017 	ldw	r3,-64(fp)
   15008:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1500c:	e0bffd17 	ldw	r2,-12(fp)
   15010:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   15014:	e0bff18b 	ldhu	r2,-58(fp)
   15018:	10800044 	addi	r2,r2,1
   1501c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   15020:	00000d06 	br	15058 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   15024:	d0a84d17 	ldw	r2,-24268(gp)
   15028:	00c00044 	movi	r3,1
   1502c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   15030:	d0a84d17 	ldw	r2,-24268(gp)
   15034:	1009883a 	mov	r4,r2
   15038:	e17ffc17 	ldw	r5,-16(fp)
   1503c:	0015cc40 	call	15cc4 <OS_EventTaskRemoveMulti>
             }
			 break;
   15040:	00000506 	br	15058 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   15044:	d0a84d17 	ldw	r2,-24268(gp)
   15048:	1009883a 	mov	r4,r2
   1504c:	e17ffc17 	ldw	r5,-16(fp)
   15050:	0015cc40 	call	15cc4 <OS_EventTaskRemoveMulti>
             break;
   15054:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   15058:	d0a84d17 	ldw	r2,-24268(gp)
   1505c:	10800c43 	ldbu	r2,49(r2)
   15060:	10803fcc 	andi	r2,r2,255
   15064:	10000326 	beq	r2,zero,15074 <OSEventPendMulti+0x4f8>
   15068:	108000a0 	cmpeqi	r2,r2,2
   1506c:	1000231e 	bne	r2,zero,150fc <OSEventPendMulti+0x580>
   15070:	00002a06 	br	1511c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   15074:	e0bff017 	ldw	r2,-64(fp)
   15078:	10800003 	ldbu	r2,0(r2)
   1507c:	10803fcc 	andi	r2,r2,255
   15080:	0080100e 	bge	zero,r2,150c4 <OSEventPendMulti+0x548>
   15084:	10c000d0 	cmplti	r3,r2,3
   15088:	1800071e 	bne	r3,zero,150a8 <OSEventPendMulti+0x52c>
   1508c:	108000e0 	cmpeqi	r2,r2,3
   15090:	10000c26 	beq	r2,zero,150c4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   15094:	e0bffe17 	ldw	r2,-8(fp)
   15098:	10c00104 	addi	r3,r2,4
   1509c:	e0fffe15 	stw	r3,-8(fp)
   150a0:	10000015 	stw	zero,0(r2)
                      break;
   150a4:	00001206 	br	150f0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   150a8:	e0bffe17 	ldw	r2,-8(fp)
   150ac:	10c00104 	addi	r3,r2,4
   150b0:	e0fffe15 	stw	r3,-8(fp)
   150b4:	d0e84d17 	ldw	r3,-24268(gp)
   150b8:	18c00917 	ldw	r3,36(r3)
   150bc:	10c00015 	stw	r3,0(r2)
                      break;
   150c0:	00000b06 	br	150f0 <OSEventPendMulti+0x574>
   150c4:	e0bff317 	ldw	r2,-52(fp)
   150c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150cc:	e0bffa17 	ldw	r2,-24(fp)
   150d0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   150d4:	e0bffd17 	ldw	r2,-12(fp)
   150d8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   150dc:	e0800217 	ldw	r2,8(fp)
   150e0:	00c00044 	movi	r3,1
   150e4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   150e8:	e0bff18b 	ldhu	r2,-58(fp)
   150ec:	00002206 	br	15178 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   150f0:	e0800217 	ldw	r2,8(fp)
   150f4:	10000005 	stb	zero,0(r2)
             break;
   150f8:	00001006 	br	1513c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   150fc:	e0bffe17 	ldw	r2,-8(fp)
   15100:	10c00104 	addi	r3,r2,4
   15104:	e0fffe15 	stw	r3,-8(fp)
   15108:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1510c:	e0800217 	ldw	r2,8(fp)
   15110:	00c00384 	movi	r3,14
   15114:	10c00005 	stb	r3,0(r2)
             break;
   15118:	00000806 	br	1513c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	10c00104 	addi	r3,r2,4
   15124:	e0fffe15 	stw	r3,-8(fp)
   15128:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1512c:	e0800217 	ldw	r2,8(fp)
   15130:	00c00284 	movi	r3,10
   15134:	10c00005 	stb	r3,0(r2)
             break;
   15138:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1513c:	d0a84d17 	ldw	r2,-24268(gp)
   15140:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   15144:	d0a84d17 	ldw	r2,-24268(gp)
   15148:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1514c:	d0a84d17 	ldw	r2,-24268(gp)
   15150:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15154:	d0a84d17 	ldw	r2,-24268(gp)
   15158:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1515c:	d0a84d17 	ldw	r2,-24268(gp)
   15160:	10000915 	stw	zero,36(r2)
   15164:	e0bff317 	ldw	r2,-52(fp)
   15168:	e0bffb15 	stw	r2,-20(fp)
   1516c:	e0bffb17 	ldw	r2,-20(fp)
   15170:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   15174:	e0bff18b 	ldhu	r2,-58(fp)
}
   15178:	e037883a 	mov	sp,fp
   1517c:	dfc00117 	ldw	ra,4(sp)
   15180:	df000017 	ldw	fp,0(sp)
   15184:	dec00204 	addi	sp,sp,8
   15188:	f800283a 	ret

0001518c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1518c:	defffe04 	addi	sp,sp,-8
   15190:	dfc00115 	stw	ra,4(sp)
   15194:	df000015 	stw	fp,0(sp)
   15198:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1519c:	0024aa40 	call	24aa4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   151a0:	0015f000 	call	15f00 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   151a4:	0015f440 	call	15f44 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   151a8:	00160a40 	call	160a4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   151ac:	0015e240 	call	15e24 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   151b0:	00180240 	call	18024 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   151b4:	00194f40 	call	194f4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   151b8:	001a7280 	call	1a728 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   151bc:	0015fac0 	call	15fac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   151c0:	00160280 	call	16028 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   151c4:	0024ac00 	call	24ac0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   151c8:	00169100 	call	16910 <OSDebugInit>
#endif
}
   151cc:	e037883a 	mov	sp,fp
   151d0:	dfc00117 	ldw	ra,4(sp)
   151d4:	df000017 	ldw	fp,0(sp)
   151d8:	dec00204 	addi	sp,sp,8
   151dc:	f800283a 	ret

000151e0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   151e0:	defffc04 	addi	sp,sp,-16
   151e4:	df000315 	stw	fp,12(sp)
   151e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   151ec:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   151f0:	d0a83e43 	ldbu	r2,-24327(gp)
   151f4:	10803fcc 	andi	r2,r2,255
   151f8:	10800058 	cmpnei	r2,r2,1
   151fc:	1000131e 	bne	r2,zero,1524c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15200:	0005303a 	rdctl	r2,status
   15204:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15208:	e0fffe17 	ldw	r3,-8(fp)
   1520c:	00bfff84 	movi	r2,-2
   15210:	1884703a 	and	r2,r3,r2
   15214:	1001703a 	wrctl	status,r2
  
  return context;
   15218:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1521c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   15220:	d0a84c03 	ldbu	r2,-24272(gp)
   15224:	10803fcc 	andi	r2,r2,255
   15228:	10803fe0 	cmpeqi	r2,r2,255
   1522c:	1000031e 	bne	r2,zero,1523c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   15230:	d0a84c03 	ldbu	r2,-24272(gp)
   15234:	10800044 	addi	r2,r2,1
   15238:	d0a84c05 	stb	r2,-24272(gp)
   1523c:	e0bffd17 	ldw	r2,-12(fp)
   15240:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15244:	e0bfff17 	ldw	r2,-4(fp)
   15248:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   1524c:	e037883a 	mov	sp,fp
   15250:	df000017 	ldw	fp,0(sp)
   15254:	dec00104 	addi	sp,sp,4
   15258:	f800283a 	ret

0001525c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1525c:	defffb04 	addi	sp,sp,-20
   15260:	dfc00415 	stw	ra,16(sp)
   15264:	df000315 	stw	fp,12(sp)
   15268:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1526c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   15270:	d0a83e43 	ldbu	r2,-24327(gp)
   15274:	10803fcc 	andi	r2,r2,255
   15278:	10800058 	cmpnei	r2,r2,1
   1527c:	10002f1e 	bne	r2,zero,1533c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15280:	0005303a 	rdctl	r2,status
   15284:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15288:	e0fffe17 	ldw	r3,-8(fp)
   1528c:	00bfff84 	movi	r2,-2
   15290:	1884703a 	and	r2,r3,r2
   15294:	1001703a 	wrctl	status,r2
  
  return context;
   15298:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1529c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   152a0:	d0a84c03 	ldbu	r2,-24272(gp)
   152a4:	10803fcc 	andi	r2,r2,255
   152a8:	10000326 	beq	r2,zero,152b8 <OSIntExit+0x5c>
            OSIntNesting--;
   152ac:	d0a84c03 	ldbu	r2,-24272(gp)
   152b0:	10bfffc4 	addi	r2,r2,-1
   152b4:	d0a84c05 	stb	r2,-24272(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   152b8:	d0a84c03 	ldbu	r2,-24272(gp)
   152bc:	10803fcc 	andi	r2,r2,255
   152c0:	10001a1e 	bne	r2,zero,1532c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   152c4:	d0a83e03 	ldbu	r2,-24328(gp)
   152c8:	10803fcc 	andi	r2,r2,255
   152cc:	1000171e 	bne	r2,zero,1532c <OSIntExit+0xd0>
                OS_SchedNew();
   152d0:	00163040 	call	16304 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   152d4:	d0e84003 	ldbu	r3,-24320(gp)
   152d8:	d0a84043 	ldbu	r2,-24319(gp)
   152dc:	18c03fcc 	andi	r3,r3,255
   152e0:	10803fcc 	andi	r2,r2,255
   152e4:	18801126 	beq	r3,r2,1532c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   152e8:	d0a84003 	ldbu	r2,-24320(gp)
   152ec:	10c03fcc 	andi	r3,r2,255
   152f0:	00800174 	movhi	r2,5
   152f4:	10bccf04 	addi	r2,r2,-3268
   152f8:	18c7883a 	add	r3,r3,r3
   152fc:	18c7883a 	add	r3,r3,r3
   15300:	10c5883a 	add	r2,r2,r3
   15304:	10800017 	ldw	r2,0(r2)
   15308:	d0a84815 	stw	r2,-24288(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1530c:	d0a84817 	ldw	r2,-24288(gp)
   15310:	10c00e17 	ldw	r3,56(r2)
   15314:	18c00044 	addi	r3,r3,1
   15318:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1531c:	d0a84317 	ldw	r2,-24308(gp)
   15320:	10800044 	addi	r2,r2,1
   15324:	d0a84315 	stw	r2,-24308(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   15328:	00247e40 	call	247e4 <OSCtxSw>
   1532c:	e0bffd17 	ldw	r2,-12(fp)
   15330:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15334:	e0bfff17 	ldw	r2,-4(fp)
   15338:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1533c:	e037883a 	mov	sp,fp
   15340:	dfc00117 	ldw	ra,4(sp)
   15344:	df000017 	ldw	fp,0(sp)
   15348:	dec00204 	addi	sp,sp,8
   1534c:	f800283a 	ret

00015350 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   15350:	defffc04 	addi	sp,sp,-16
   15354:	df000315 	stw	fp,12(sp)
   15358:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1535c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   15360:	d0a83e43 	ldbu	r2,-24327(gp)
   15364:	10803fcc 	andi	r2,r2,255
   15368:	10800058 	cmpnei	r2,r2,1
   1536c:	1000161e 	bne	r2,zero,153c8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15370:	0005303a 	rdctl	r2,status
   15374:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15378:	e0fffe17 	ldw	r3,-8(fp)
   1537c:	00bfff84 	movi	r2,-2
   15380:	1884703a 	and	r2,r3,r2
   15384:	1001703a 	wrctl	status,r2
  
  return context;
   15388:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1538c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   15390:	d0a84c03 	ldbu	r2,-24272(gp)
   15394:	10803fcc 	andi	r2,r2,255
   15398:	1000071e 	bne	r2,zero,153b8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   1539c:	d0a83e03 	ldbu	r2,-24328(gp)
   153a0:	10803fcc 	andi	r2,r2,255
   153a4:	10803fe0 	cmpeqi	r2,r2,255
   153a8:	1000031e 	bne	r2,zero,153b8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   153ac:	d0a83e03 	ldbu	r2,-24328(gp)
   153b0:	10800044 	addi	r2,r2,1
   153b4:	d0a83e05 	stb	r2,-24328(gp)
   153b8:	e0bffd17 	ldw	r2,-12(fp)
   153bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153c0:	e0bfff17 	ldw	r2,-4(fp)
   153c4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   153c8:	e037883a 	mov	sp,fp
   153cc:	df000017 	ldw	fp,0(sp)
   153d0:	dec00104 	addi	sp,sp,4
   153d4:	f800283a 	ret

000153d8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   153d8:	defff804 	addi	sp,sp,-32
   153dc:	dfc00715 	stw	ra,28(sp)
   153e0:	df000615 	stw	fp,24(sp)
   153e4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   153e8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   153ec:	d0a83e43 	ldbu	r2,-24327(gp)
   153f0:	10803fcc 	andi	r2,r2,255
   153f4:	10800058 	cmpnei	r2,r2,1
   153f8:	1000281e 	bne	r2,zero,1549c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153fc:	0005303a 	rdctl	r2,status
   15400:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15404:	e0fffb17 	ldw	r3,-20(fp)
   15408:	00bfff84 	movi	r2,-2
   1540c:	1884703a 	and	r2,r3,r2
   15410:	1001703a 	wrctl	status,r2
  
  return context;
   15414:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   15418:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1541c:	d0a83e03 	ldbu	r2,-24328(gp)
   15420:	10803fcc 	andi	r2,r2,255
   15424:	10001926 	beq	r2,zero,1548c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   15428:	d0a83e03 	ldbu	r2,-24328(gp)
   1542c:	10bfffc4 	addi	r2,r2,-1
   15430:	d0a83e05 	stb	r2,-24328(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   15434:	d0a83e03 	ldbu	r2,-24328(gp)
   15438:	10803fcc 	andi	r2,r2,255
   1543c:	10000e1e 	bne	r2,zero,15478 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   15440:	d0a84c03 	ldbu	r2,-24272(gp)
   15444:	10803fcc 	andi	r2,r2,255
   15448:	1000061e 	bne	r2,zero,15464 <OSSchedUnlock+0x8c>
   1544c:	e0bffa17 	ldw	r2,-24(fp)
   15450:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15454:	e0bffc17 	ldw	r2,-16(fp)
   15458:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   1545c:	00162380 	call	16238 <OS_Sched>
   15460:	00000e06 	br	1549c <OSSchedUnlock+0xc4>
   15464:	e0bffa17 	ldw	r2,-24(fp)
   15468:	e0bffd15 	stw	r2,-12(fp)
   1546c:	e0bffd17 	ldw	r2,-12(fp)
   15470:	1001703a 	wrctl	status,r2
   15474:	00000906 	br	1549c <OSSchedUnlock+0xc4>
   15478:	e0bffa17 	ldw	r2,-24(fp)
   1547c:	e0bffe15 	stw	r2,-8(fp)
   15480:	e0bffe17 	ldw	r2,-8(fp)
   15484:	1001703a 	wrctl	status,r2
   15488:	00000406 	br	1549c <OSSchedUnlock+0xc4>
   1548c:	e0bffa17 	ldw	r2,-24(fp)
   15490:	e0bfff15 	stw	r2,-4(fp)
   15494:	e0bfff17 	ldw	r2,-4(fp)
   15498:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1549c:	e037883a 	mov	sp,fp
   154a0:	dfc00117 	ldw	ra,4(sp)
   154a4:	df000017 	ldw	fp,0(sp)
   154a8:	dec00204 	addi	sp,sp,8
   154ac:	f800283a 	ret

000154b0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   154b0:	defffe04 	addi	sp,sp,-8
   154b4:	dfc00115 	stw	ra,4(sp)
   154b8:	df000015 	stw	fp,0(sp)
   154bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   154c0:	d0a83e43 	ldbu	r2,-24327(gp)
   154c4:	10803fcc 	andi	r2,r2,255
   154c8:	10000f1e 	bne	r2,zero,15508 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   154cc:	00163040 	call	16304 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   154d0:	d0a84003 	ldbu	r2,-24320(gp)
   154d4:	d0a84045 	stb	r2,-24319(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   154d8:	d0a84003 	ldbu	r2,-24320(gp)
   154dc:	10c03fcc 	andi	r3,r2,255
   154e0:	00800174 	movhi	r2,5
   154e4:	10bccf04 	addi	r2,r2,-3268
   154e8:	18c7883a 	add	r3,r3,r3
   154ec:	18c7883a 	add	r3,r3,r3
   154f0:	10c5883a 	add	r2,r2,r3
   154f4:	10800017 	ldw	r2,0(r2)
   154f8:	d0a84815 	stw	r2,-24288(gp)
        OSTCBCur      = OSTCBHighRdy;
   154fc:	d0a84817 	ldw	r2,-24288(gp)
   15500:	d0a84d15 	stw	r2,-24268(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   15504:	00248700 	call	24870 <OSStartHighRdy>
    }
}
   15508:	e037883a 	mov	sp,fp
   1550c:	dfc00117 	ldw	ra,4(sp)
   15510:	df000017 	ldw	fp,0(sp)
   15514:	dec00204 	addi	sp,sp,8
   15518:	f800283a 	ret

0001551c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1551c:	defff904 	addi	sp,sp,-28
   15520:	dfc00615 	stw	ra,24(sp)
   15524:	df000515 	stw	fp,20(sp)
   15528:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1552c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   15530:	01000084 	movi	r4,2
   15534:	001cbd00 	call	1cbd0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15538:	0005303a 	rdctl	r2,status
   1553c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15540:	e0fffc17 	ldw	r3,-16(fp)
   15544:	00bfff84 	movi	r2,-2
   15548:	1884703a 	and	r2,r3,r2
   1554c:	1001703a 	wrctl	status,r2
  
  return context;
   15550:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   15554:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   15558:	d0283f15 	stw	zero,-24324(gp)
   1555c:	e0bffb17 	ldw	r2,-20(fp)
   15560:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15564:	e0bffd17 	ldw	r2,-12(fp)
   15568:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1556c:	0009883a 	mov	r4,zero
   15570:	001cbd00 	call	1cbd0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15574:	0005303a 	rdctl	r2,status
   15578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1557c:	e0fffe17 	ldw	r3,-8(fp)
   15580:	00bfff84 	movi	r2,-2
   15584:	1884703a 	and	r2,r3,r2
   15588:	1001703a 	wrctl	status,r2
  
  return context;
   1558c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   15590:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   15594:	d0a83f17 	ldw	r2,-24324(gp)
   15598:	d0a84415 	stw	r2,-24304(gp)
    OSStatRdy    = OS_TRUE;
   1559c:	00800044 	movi	r2,1
   155a0:	d0a85005 	stb	r2,-24256(gp)
   155a4:	e0bffb17 	ldw	r2,-20(fp)
   155a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155ac:	e0bfff17 	ldw	r2,-4(fp)
   155b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   155b4:	e037883a 	mov	sp,fp
   155b8:	dfc00117 	ldw	ra,4(sp)
   155bc:	df000017 	ldw	fp,0(sp)
   155c0:	dec00204 	addi	sp,sp,8
   155c4:	f800283a 	ret

000155c8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   155c8:	defff704 	addi	sp,sp,-36
   155cc:	dfc00815 	stw	ra,32(sp)
   155d0:	df000715 	stw	fp,28(sp)
   155d4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   155d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   155dc:	0024a880 	call	24a88 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155e0:	0005303a 	rdctl	r2,status
   155e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155e8:	e0fffc17 	ldw	r3,-16(fp)
   155ec:	00bfff84 	movi	r2,-2
   155f0:	1884703a 	and	r2,r3,r2
   155f4:	1001703a 	wrctl	status,r2
  
  return context;
   155f8:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   155fc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   15600:	d0a84e17 	ldw	r2,-24264(gp)
   15604:	10800044 	addi	r2,r2,1
   15608:	d0a84e15 	stw	r2,-24264(gp)
   1560c:	e0bffb17 	ldw	r2,-20(fp)
   15610:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15614:	e0bffd17 	ldw	r2,-12(fp)
   15618:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1561c:	d0a83e43 	ldbu	r2,-24327(gp)
   15620:	10803fcc 	andi	r2,r2,255
   15624:	10800058 	cmpnei	r2,r2,1
   15628:	1000691e 	bne	r2,zero,157d0 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1562c:	d0a84203 	ldbu	r2,-24312(gp)
   15630:	10803fcc 	andi	r2,r2,255
   15634:	10c00060 	cmpeqi	r3,r2,1
   15638:	1800061e 	bne	r3,zero,15654 <OSTimeTick+0x8c>
   1563c:	10c000a0 	cmpeqi	r3,r2,2
   15640:	1800061e 	bne	r3,zero,1565c <OSTimeTick+0x94>
   15644:	10000a1e 	bne	r2,zero,15670 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   15648:	00800044 	movi	r2,1
   1564c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   15650:	00000b06 	br	15680 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   15654:	e03ffa05 	stb	zero,-24(fp)
                 break;
   15658:	00000906 	br	15680 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   1565c:	00800044 	movi	r2,1
   15660:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   15664:	00800044 	movi	r2,1
   15668:	d0a84205 	stb	r2,-24312(gp)
                 break;
   1566c:	00000406 	br	15680 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   15670:	00800044 	movi	r2,1
   15674:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   15678:	d0284205 	stb	zero,-24312(gp)
                 break;
   1567c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   15680:	e0bffa03 	ldbu	r2,-24(fp)
   15684:	1000011e 	bne	r2,zero,1568c <OSTimeTick+0xc4>
            return;
   15688:	00005106 	br	157d0 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1568c:	d0a84117 	ldw	r2,-24316(gp)
   15690:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   15694:	00004906 	br	157bc <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15698:	0005303a 	rdctl	r2,status
   1569c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156a0:	e0fffe17 	ldw	r3,-8(fp)
   156a4:	00bfff84 	movi	r2,-2
   156a8:	1884703a 	and	r2,r3,r2
   156ac:	1001703a 	wrctl	status,r2
  
  return context;
   156b0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   156b4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   156b8:	e0bff917 	ldw	r2,-28(fp)
   156bc:	10800b8b 	ldhu	r2,46(r2)
   156c0:	10bfffcc 	andi	r2,r2,65535
   156c4:	10003626 	beq	r2,zero,157a0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   156c8:	e0bff917 	ldw	r2,-28(fp)
   156cc:	10800b8b 	ldhu	r2,46(r2)
   156d0:	10bfffc4 	addi	r2,r2,-1
   156d4:	1007883a 	mov	r3,r2
   156d8:	e0bff917 	ldw	r2,-28(fp)
   156dc:	10c00b8d 	sth	r3,46(r2)
   156e0:	e0bff917 	ldw	r2,-28(fp)
   156e4:	10800b8b 	ldhu	r2,46(r2)
   156e8:	10bfffcc 	andi	r2,r2,65535
   156ec:	10002c1e 	bne	r2,zero,157a0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   156f0:	e0bff917 	ldw	r2,-28(fp)
   156f4:	10800c03 	ldbu	r2,48(r2)
   156f8:	10803fcc 	andi	r2,r2,255
   156fc:	10800dcc 	andi	r2,r2,55
   15700:	10000b26 	beq	r2,zero,15730 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   15704:	e0bff917 	ldw	r2,-28(fp)
   15708:	10c00c03 	ldbu	r3,48(r2)
   1570c:	00bff204 	movi	r2,-56
   15710:	1884703a 	and	r2,r3,r2
   15714:	1007883a 	mov	r3,r2
   15718:	e0bff917 	ldw	r2,-28(fp)
   1571c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   15720:	e0bff917 	ldw	r2,-28(fp)
   15724:	00c00044 	movi	r3,1
   15728:	10c00c45 	stb	r3,49(r2)
   1572c:	00000206 	br	15738 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   15730:	e0bff917 	ldw	r2,-28(fp)
   15734:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   15738:	e0bff917 	ldw	r2,-28(fp)
   1573c:	10800c03 	ldbu	r2,48(r2)
   15740:	10803fcc 	andi	r2,r2,255
   15744:	1080020c 	andi	r2,r2,8
   15748:	1000151e 	bne	r2,zero,157a0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1574c:	e0bff917 	ldw	r2,-28(fp)
   15750:	10c00d83 	ldbu	r3,54(r2)
   15754:	d0a84a03 	ldbu	r2,-24280(gp)
   15758:	1884b03a 	or	r2,r3,r2
   1575c:	d0a84a05 	stb	r2,-24280(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15760:	e0bff917 	ldw	r2,-28(fp)
   15764:	10800d03 	ldbu	r2,52(r2)
   15768:	10c03fcc 	andi	r3,r2,255
   1576c:	e0bff917 	ldw	r2,-28(fp)
   15770:	10800d03 	ldbu	r2,52(r2)
   15774:	11003fcc 	andi	r4,r2,255
   15778:	d0a84a44 	addi	r2,gp,-24279
   1577c:	2085883a 	add	r2,r4,r2
   15780:	11000003 	ldbu	r4,0(r2)
   15784:	e0bff917 	ldw	r2,-28(fp)
   15788:	10800d43 	ldbu	r2,53(r2)
   1578c:	2084b03a 	or	r2,r4,r2
   15790:	1009883a 	mov	r4,r2
   15794:	d0a84a44 	addi	r2,gp,-24279
   15798:	1885883a 	add	r2,r3,r2
   1579c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   157a0:	e0bff917 	ldw	r2,-28(fp)
   157a4:	10800517 	ldw	r2,20(r2)
   157a8:	e0bff915 	stw	r2,-28(fp)
   157ac:	e0bffb17 	ldw	r2,-20(fp)
   157b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   157bc:	e0bff917 	ldw	r2,-28(fp)
   157c0:	10800c83 	ldbu	r2,50(r2)
   157c4:	10803fcc 	andi	r2,r2,255
   157c8:	10800518 	cmpnei	r2,r2,20
   157cc:	103fb21e 	bne	r2,zero,15698 <__alt_mem_Flash_flash_data+0xf4015698>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   157d0:	e037883a 	mov	sp,fp
   157d4:	dfc00117 	ldw	ra,4(sp)
   157d8:	df000017 	ldw	fp,0(sp)
   157dc:	dec00204 	addi	sp,sp,8
   157e0:	f800283a 	ret

000157e4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   157e4:	deffff04 	addi	sp,sp,-4
   157e8:	df000015 	stw	fp,0(sp)
   157ec:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   157f0:	00804784 	movi	r2,286
}
   157f4:	e037883a 	mov	sp,fp
   157f8:	df000017 	ldw	fp,0(sp)
   157fc:	dec00104 	addi	sp,sp,4
   15800:	f800283a 	ret

00015804 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   15804:	deffff04 	addi	sp,sp,-4
   15808:	df000015 	stw	fp,0(sp)
   1580c:	d839883a 	mov	fp,sp
}
   15810:	e037883a 	mov	sp,fp
   15814:	df000017 	ldw	fp,0(sp)
   15818:	dec00104 	addi	sp,sp,4
   1581c:	f800283a 	ret

00015820 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   15820:	defff804 	addi	sp,sp,-32
   15824:	dfc00715 	stw	ra,28(sp)
   15828:	df000615 	stw	fp,24(sp)
   1582c:	df000604 	addi	fp,sp,24
   15830:	e13ffc15 	stw	r4,-16(fp)
   15834:	e17ffd15 	stw	r5,-12(fp)
   15838:	3007883a 	mov	r3,r6
   1583c:	3805883a 	mov	r2,r7
   15840:	e0fffe05 	stb	r3,-8(fp)
   15844:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   15848:	e0bffc17 	ldw	r2,-16(fp)
   1584c:	10800283 	ldbu	r2,10(r2)
   15850:	10c03fcc 	andi	r3,r2,255
   15854:	008000b4 	movhi	r2,2
   15858:	10977704 	addi	r2,r2,24028
   1585c:	10c5883a 	add	r2,r2,r3
   15860:	10800003 	ldbu	r2,0(r2)
   15864:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   15868:	e0bffa03 	ldbu	r2,-24(fp)
   1586c:	e0fffc17 	ldw	r3,-16(fp)
   15870:	1885883a 	add	r2,r3,r2
   15874:	10800204 	addi	r2,r2,8
   15878:	108000c3 	ldbu	r2,3(r2)
   1587c:	10c03fcc 	andi	r3,r2,255
   15880:	008000b4 	movhi	r2,2
   15884:	10977704 	addi	r2,r2,24028
   15888:	10c5883a 	add	r2,r2,r3
   1588c:	10800003 	ldbu	r2,0(r2)
   15890:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   15894:	e0bffa03 	ldbu	r2,-24(fp)
   15898:	100490fa 	slli	r2,r2,3
   1589c:	1007883a 	mov	r3,r2
   158a0:	e0bffa43 	ldbu	r2,-23(fp)
   158a4:	1885883a 	add	r2,r3,r2
   158a8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   158ac:	e0fffa83 	ldbu	r3,-22(fp)
   158b0:	00800174 	movhi	r2,5
   158b4:	10bccf04 	addi	r2,r2,-3268
   158b8:	18c7883a 	add	r3,r3,r3
   158bc:	18c7883a 	add	r3,r3,r3
   158c0:	10c5883a 	add	r2,r2,r3
   158c4:	10800017 	ldw	r2,0(r2)
   158c8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   158cc:	e0bffb17 	ldw	r2,-20(fp)
   158d0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   158d4:	e0bffb17 	ldw	r2,-20(fp)
   158d8:	e0fffd17 	ldw	r3,-12(fp)
   158dc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   158e0:	e0bffb17 	ldw	r2,-20(fp)
   158e4:	10800c03 	ldbu	r2,48(r2)
   158e8:	1007883a 	mov	r3,r2
   158ec:	e0bffe03 	ldbu	r2,-8(fp)
   158f0:	0084303a 	nor	r2,zero,r2
   158f4:	1884703a 	and	r2,r3,r2
   158f8:	1007883a 	mov	r3,r2
   158fc:	e0bffb17 	ldw	r2,-20(fp)
   15900:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   15904:	e0bffb17 	ldw	r2,-20(fp)
   15908:	e0ffff03 	ldbu	r3,-4(fp)
   1590c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   15910:	e0bffb17 	ldw	r2,-20(fp)
   15914:	10800c03 	ldbu	r2,48(r2)
   15918:	10803fcc 	andi	r2,r2,255
   1591c:	1080020c 	andi	r2,r2,8
   15920:	1000111e 	bne	r2,zero,15968 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   15924:	e0bffb17 	ldw	r2,-20(fp)
   15928:	10c00d83 	ldbu	r3,54(r2)
   1592c:	d0a84a03 	ldbu	r2,-24280(gp)
   15930:	1884b03a 	or	r2,r3,r2
   15934:	d0a84a05 	stb	r2,-24280(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   15938:	e0fffa03 	ldbu	r3,-24(fp)
   1593c:	e13ffa03 	ldbu	r4,-24(fp)
   15940:	d0a84a44 	addi	r2,gp,-24279
   15944:	2085883a 	add	r2,r4,r2
   15948:	11000003 	ldbu	r4,0(r2)
   1594c:	e0bffb17 	ldw	r2,-20(fp)
   15950:	10800d43 	ldbu	r2,53(r2)
   15954:	2084b03a 	or	r2,r4,r2
   15958:	1009883a 	mov	r4,r2
   1595c:	d0a84a44 	addi	r2,gp,-24279
   15960:	1885883a 	add	r2,r3,r2
   15964:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   15968:	e13ffb17 	ldw	r4,-20(fp)
   1596c:	e17ffc17 	ldw	r5,-16(fp)
   15970:	0015c100 	call	15c10 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   15974:	e0bffb17 	ldw	r2,-20(fp)
   15978:	10800817 	ldw	r2,32(r2)
   1597c:	10000826 	beq	r2,zero,159a0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   15980:	e0bffb17 	ldw	r2,-20(fp)
   15984:	10800817 	ldw	r2,32(r2)
   15988:	e13ffb17 	ldw	r4,-20(fp)
   1598c:	100b883a 	mov	r5,r2
   15990:	0015cc40 	call	15cc4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   15994:	e0bffb17 	ldw	r2,-20(fp)
   15998:	e0fffc17 	ldw	r3,-16(fp)
   1599c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   159a0:	e0bffa83 	ldbu	r2,-22(fp)
}
   159a4:	e037883a 	mov	sp,fp
   159a8:	dfc00117 	ldw	ra,4(sp)
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00204 	addi	sp,sp,8
   159b4:	f800283a 	ret

000159b8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   159b8:	defffd04 	addi	sp,sp,-12
   159bc:	df000215 	stw	fp,8(sp)
   159c0:	df000204 	addi	fp,sp,8
   159c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   159c8:	d0a84d17 	ldw	r2,-24268(gp)
   159cc:	e0ffff17 	ldw	r3,-4(fp)
   159d0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   159d4:	d0a84d17 	ldw	r2,-24268(gp)
   159d8:	10800d03 	ldbu	r2,52(r2)
   159dc:	10803fcc 	andi	r2,r2,255
   159e0:	d0e84d17 	ldw	r3,-24268(gp)
   159e4:	18c00d03 	ldbu	r3,52(r3)
   159e8:	18c03fcc 	andi	r3,r3,255
   159ec:	e13fff17 	ldw	r4,-4(fp)
   159f0:	20c7883a 	add	r3,r4,r3
   159f4:	18c00204 	addi	r3,r3,8
   159f8:	190000c3 	ldbu	r4,3(r3)
   159fc:	d0e84d17 	ldw	r3,-24268(gp)
   15a00:	18c00d43 	ldbu	r3,53(r3)
   15a04:	20c6b03a 	or	r3,r4,r3
   15a08:	1809883a 	mov	r4,r3
   15a0c:	e0ffff17 	ldw	r3,-4(fp)
   15a10:	1885883a 	add	r2,r3,r2
   15a14:	10800204 	addi	r2,r2,8
   15a18:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   15a1c:	e0bfff17 	ldw	r2,-4(fp)
   15a20:	10c00283 	ldbu	r3,10(r2)
   15a24:	d0a84d17 	ldw	r2,-24268(gp)
   15a28:	10800d83 	ldbu	r2,54(r2)
   15a2c:	1884b03a 	or	r2,r3,r2
   15a30:	1007883a 	mov	r3,r2
   15a34:	e0bfff17 	ldw	r2,-4(fp)
   15a38:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   15a3c:	d0a84d17 	ldw	r2,-24268(gp)
   15a40:	10800d03 	ldbu	r2,52(r2)
   15a44:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   15a48:	e0fffe03 	ldbu	r3,-8(fp)
   15a4c:	e13ffe03 	ldbu	r4,-8(fp)
   15a50:	d0a84a44 	addi	r2,gp,-24279
   15a54:	2085883a 	add	r2,r4,r2
   15a58:	10800003 	ldbu	r2,0(r2)
   15a5c:	1009883a 	mov	r4,r2
   15a60:	d0a84d17 	ldw	r2,-24268(gp)
   15a64:	10800d43 	ldbu	r2,53(r2)
   15a68:	0084303a 	nor	r2,zero,r2
   15a6c:	2084703a 	and	r2,r4,r2
   15a70:	1009883a 	mov	r4,r2
   15a74:	d0a84a44 	addi	r2,gp,-24279
   15a78:	1885883a 	add	r2,r3,r2
   15a7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15a80:	e0fffe03 	ldbu	r3,-8(fp)
   15a84:	d0a84a44 	addi	r2,gp,-24279
   15a88:	1885883a 	add	r2,r3,r2
   15a8c:	10800003 	ldbu	r2,0(r2)
   15a90:	10803fcc 	andi	r2,r2,255
   15a94:	1000071e 	bne	r2,zero,15ab4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   15a98:	d0a84d17 	ldw	r2,-24268(gp)
   15a9c:	10800d83 	ldbu	r2,54(r2)
   15aa0:	0084303a 	nor	r2,zero,r2
   15aa4:	1007883a 	mov	r3,r2
   15aa8:	d0a84a03 	ldbu	r2,-24280(gp)
   15aac:	1884703a 	and	r2,r3,r2
   15ab0:	d0a84a05 	stb	r2,-24280(gp)
    }
}
   15ab4:	e037883a 	mov	sp,fp
   15ab8:	df000017 	ldw	fp,0(sp)
   15abc:	dec00104 	addi	sp,sp,4
   15ac0:	f800283a 	ret

00015ac4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   15ac4:	defffb04 	addi	sp,sp,-20
   15ac8:	df000415 	stw	fp,16(sp)
   15acc:	df000404 	addi	fp,sp,16
   15ad0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   15ad4:	d0a84d17 	ldw	r2,-24268(gp)
   15ad8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   15adc:	d0a84d17 	ldw	r2,-24268(gp)
   15ae0:	e0ffff17 	ldw	r3,-4(fp)
   15ae4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   15af0:	e0bffc17 	ldw	r2,-16(fp)
   15af4:	10800017 	ldw	r2,0(r2)
   15af8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   15afc:	00002006 	br	15b80 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   15b00:	d0a84d17 	ldw	r2,-24268(gp)
   15b04:	10800d03 	ldbu	r2,52(r2)
   15b08:	10803fcc 	andi	r2,r2,255
   15b0c:	d0e84d17 	ldw	r3,-24268(gp)
   15b10:	18c00d03 	ldbu	r3,52(r3)
   15b14:	18c03fcc 	andi	r3,r3,255
   15b18:	e13ffd17 	ldw	r4,-12(fp)
   15b1c:	20c7883a 	add	r3,r4,r3
   15b20:	18c00204 	addi	r3,r3,8
   15b24:	190000c3 	ldbu	r4,3(r3)
   15b28:	d0e84d17 	ldw	r3,-24268(gp)
   15b2c:	18c00d43 	ldbu	r3,53(r3)
   15b30:	20c6b03a 	or	r3,r4,r3
   15b34:	1809883a 	mov	r4,r3
   15b38:	e0fffd17 	ldw	r3,-12(fp)
   15b3c:	1885883a 	add	r2,r3,r2
   15b40:	10800204 	addi	r2,r2,8
   15b44:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   15b48:	e0bffd17 	ldw	r2,-12(fp)
   15b4c:	10c00283 	ldbu	r3,10(r2)
   15b50:	d0a84d17 	ldw	r2,-24268(gp)
   15b54:	10800d83 	ldbu	r2,54(r2)
   15b58:	1884b03a 	or	r2,r3,r2
   15b5c:	1007883a 	mov	r3,r2
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	10c00285 	stb	r3,10(r2)
        pevents++;
   15b68:	e0bffc17 	ldw	r2,-16(fp)
   15b6c:	10800104 	addi	r2,r2,4
   15b70:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   15b74:	e0bffc17 	ldw	r2,-16(fp)
   15b78:	10800017 	ldw	r2,0(r2)
   15b7c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   15b80:	e0bffd17 	ldw	r2,-12(fp)
   15b84:	103fde1e 	bne	r2,zero,15b00 <__alt_mem_Flash_flash_data+0xf4015b00>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   15b88:	d0a84d17 	ldw	r2,-24268(gp)
   15b8c:	10800d03 	ldbu	r2,52(r2)
   15b90:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   15b94:	e0fffe03 	ldbu	r3,-8(fp)
   15b98:	e13ffe03 	ldbu	r4,-8(fp)
   15b9c:	d0a84a44 	addi	r2,gp,-24279
   15ba0:	2085883a 	add	r2,r4,r2
   15ba4:	10800003 	ldbu	r2,0(r2)
   15ba8:	1009883a 	mov	r4,r2
   15bac:	d0a84d17 	ldw	r2,-24268(gp)
   15bb0:	10800d43 	ldbu	r2,53(r2)
   15bb4:	0084303a 	nor	r2,zero,r2
   15bb8:	2084703a 	and	r2,r4,r2
   15bbc:	1009883a 	mov	r4,r2
   15bc0:	d0a84a44 	addi	r2,gp,-24279
   15bc4:	1885883a 	add	r2,r3,r2
   15bc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15bcc:	e0fffe03 	ldbu	r3,-8(fp)
   15bd0:	d0a84a44 	addi	r2,gp,-24279
   15bd4:	1885883a 	add	r2,r3,r2
   15bd8:	10800003 	ldbu	r2,0(r2)
   15bdc:	10803fcc 	andi	r2,r2,255
   15be0:	1000071e 	bne	r2,zero,15c00 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   15be4:	d0a84d17 	ldw	r2,-24268(gp)
   15be8:	10800d83 	ldbu	r2,54(r2)
   15bec:	0084303a 	nor	r2,zero,r2
   15bf0:	1007883a 	mov	r3,r2
   15bf4:	d0a84a03 	ldbu	r2,-24280(gp)
   15bf8:	1884703a 	and	r2,r3,r2
   15bfc:	d0a84a05 	stb	r2,-24280(gp)
    }
}
   15c00:	e037883a 	mov	sp,fp
   15c04:	df000017 	ldw	fp,0(sp)
   15c08:	dec00104 	addi	sp,sp,4
   15c0c:	f800283a 	ret

00015c10 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   15c10:	defffc04 	addi	sp,sp,-16
   15c14:	df000315 	stw	fp,12(sp)
   15c18:	df000304 	addi	fp,sp,12
   15c1c:	e13ffe15 	stw	r4,-8(fp)
   15c20:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   15c24:	e0bffe17 	ldw	r2,-8(fp)
   15c28:	10800d03 	ldbu	r2,52(r2)
   15c2c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   15c30:	e0bffd03 	ldbu	r2,-12(fp)
   15c34:	e0fffd03 	ldbu	r3,-12(fp)
   15c38:	e13fff17 	ldw	r4,-4(fp)
   15c3c:	20c7883a 	add	r3,r4,r3
   15c40:	18c00204 	addi	r3,r3,8
   15c44:	18c000c3 	ldbu	r3,3(r3)
   15c48:	1809883a 	mov	r4,r3
   15c4c:	e0fffe17 	ldw	r3,-8(fp)
   15c50:	18c00d43 	ldbu	r3,53(r3)
   15c54:	00c6303a 	nor	r3,zero,r3
   15c58:	20c6703a 	and	r3,r4,r3
   15c5c:	1809883a 	mov	r4,r3
   15c60:	e0ffff17 	ldw	r3,-4(fp)
   15c64:	1885883a 	add	r2,r3,r2
   15c68:	10800204 	addi	r2,r2,8
   15c6c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   15c70:	e0bffd03 	ldbu	r2,-12(fp)
   15c74:	e0ffff17 	ldw	r3,-4(fp)
   15c78:	1885883a 	add	r2,r3,r2
   15c7c:	10800204 	addi	r2,r2,8
   15c80:	108000c3 	ldbu	r2,3(r2)
   15c84:	10803fcc 	andi	r2,r2,255
   15c88:	10000a1e 	bne	r2,zero,15cb4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   15c8c:	e0bfff17 	ldw	r2,-4(fp)
   15c90:	10800283 	ldbu	r2,10(r2)
   15c94:	1007883a 	mov	r3,r2
   15c98:	e0bffe17 	ldw	r2,-8(fp)
   15c9c:	10800d83 	ldbu	r2,54(r2)
   15ca0:	0084303a 	nor	r2,zero,r2
   15ca4:	1884703a 	and	r2,r3,r2
   15ca8:	1007883a 	mov	r3,r2
   15cac:	e0bfff17 	ldw	r2,-4(fp)
   15cb0:	10c00285 	stb	r3,10(r2)
    }
}
   15cb4:	e037883a 	mov	sp,fp
   15cb8:	df000017 	ldw	fp,0(sp)
   15cbc:	dec00104 	addi	sp,sp,4
   15cc0:	f800283a 	ret

00015cc4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   15cc4:	defffa04 	addi	sp,sp,-24
   15cc8:	df000515 	stw	fp,20(sp)
   15ccc:	df000504 	addi	fp,sp,20
   15cd0:	e13ffe15 	stw	r4,-8(fp)
   15cd4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   15cd8:	e0bffe17 	ldw	r2,-8(fp)
   15cdc:	10800d03 	ldbu	r2,52(r2)
   15ce0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   15ce4:	e0bffe17 	ldw	r2,-8(fp)
   15ce8:	10800d83 	ldbu	r2,54(r2)
   15cec:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   15cf0:	e0bffe17 	ldw	r2,-8(fp)
   15cf4:	10800d43 	ldbu	r2,53(r2)
   15cf8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   15cfc:	e0bfff17 	ldw	r2,-4(fp)
   15d00:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   15d04:	e0bffb17 	ldw	r2,-20(fp)
   15d08:	10800017 	ldw	r2,0(r2)
   15d0c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   15d10:	00002506 	br	15da8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   15d14:	e0bffd03 	ldbu	r2,-12(fp)
   15d18:	e0fffd03 	ldbu	r3,-12(fp)
   15d1c:	e13ffc17 	ldw	r4,-16(fp)
   15d20:	20c7883a 	add	r3,r4,r3
   15d24:	18c00204 	addi	r3,r3,8
   15d28:	18c000c3 	ldbu	r3,3(r3)
   15d2c:	1809883a 	mov	r4,r3
   15d30:	e0fffd83 	ldbu	r3,-10(fp)
   15d34:	00c6303a 	nor	r3,zero,r3
   15d38:	20c6703a 	and	r3,r4,r3
   15d3c:	1809883a 	mov	r4,r3
   15d40:	e0fffc17 	ldw	r3,-16(fp)
   15d44:	1885883a 	add	r2,r3,r2
   15d48:	10800204 	addi	r2,r2,8
   15d4c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   15d50:	e0bffd03 	ldbu	r2,-12(fp)
   15d54:	e0fffc17 	ldw	r3,-16(fp)
   15d58:	1885883a 	add	r2,r3,r2
   15d5c:	10800204 	addi	r2,r2,8
   15d60:	108000c3 	ldbu	r2,3(r2)
   15d64:	10803fcc 	andi	r2,r2,255
   15d68:	1000091e 	bne	r2,zero,15d90 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   15d6c:	e0bffc17 	ldw	r2,-16(fp)
   15d70:	10800283 	ldbu	r2,10(r2)
   15d74:	1007883a 	mov	r3,r2
   15d78:	e0bffd43 	ldbu	r2,-11(fp)
   15d7c:	0084303a 	nor	r2,zero,r2
   15d80:	1884703a 	and	r2,r3,r2
   15d84:	1007883a 	mov	r3,r2
   15d88:	e0bffc17 	ldw	r2,-16(fp)
   15d8c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   15d90:	e0bffb17 	ldw	r2,-20(fp)
   15d94:	10800104 	addi	r2,r2,4
   15d98:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   15d9c:	e0bffb17 	ldw	r2,-20(fp)
   15da0:	10800017 	ldw	r2,0(r2)
   15da4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   15da8:	e0bffc17 	ldw	r2,-16(fp)
   15dac:	103fd91e 	bne	r2,zero,15d14 <__alt_mem_Flash_flash_data+0xf4015d14>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   15db0:	e037883a 	mov	sp,fp
   15db4:	df000017 	ldw	fp,0(sp)
   15db8:	dec00104 	addi	sp,sp,4
   15dbc:	f800283a 	ret

00015dc0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   15dc0:	defffc04 	addi	sp,sp,-16
   15dc4:	df000315 	stw	fp,12(sp)
   15dc8:	df000304 	addi	fp,sp,12
   15dcc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   15dd0:	e0bfff17 	ldw	r2,-4(fp)
   15dd4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   15dd8:	e0bfff17 	ldw	r2,-4(fp)
   15ddc:	108002c4 	addi	r2,r2,11
   15de0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15de4:	e03ffe05 	stb	zero,-8(fp)
   15de8:	00000706 	br	15e08 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   15dec:	e0bffd17 	ldw	r2,-12(fp)
   15df0:	10c00044 	addi	r3,r2,1
   15df4:	e0fffd15 	stw	r3,-12(fp)
   15df8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15dfc:	e0bffe03 	ldbu	r2,-8(fp)
   15e00:	10800044 	addi	r2,r2,1
   15e04:	e0bffe05 	stb	r2,-8(fp)
   15e08:	e0bffe03 	ldbu	r2,-8(fp)
   15e0c:	108000f0 	cmpltui	r2,r2,3
   15e10:	103ff61e 	bne	r2,zero,15dec <__alt_mem_Flash_flash_data+0xf4015dec>
        *ptbl++ = 0;
    }
}
   15e14:	e037883a 	mov	sp,fp
   15e18:	df000017 	ldw	fp,0(sp)
   15e1c:	dec00104 	addi	sp,sp,4
   15e20:	f800283a 	ret

00015e24 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   15e24:	defffb04 	addi	sp,sp,-20
   15e28:	dfc00415 	stw	ra,16(sp)
   15e2c:	df000315 	stw	fp,12(sp)
   15e30:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   15e34:	01000174 	movhi	r4,5
   15e38:	2138bb04 	addi	r4,r4,-7444
   15e3c:	0142d004 	movi	r5,2880
   15e40:	00161840 	call	16184 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   15e44:	00800174 	movhi	r2,5
   15e48:	10b8bb04 	addi	r2,r2,-7444
   15e4c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   15e50:	00800174 	movhi	r2,5
   15e54:	10b8c704 	addi	r2,r2,-7396
   15e58:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   15e5c:	e03ffd0d 	sth	zero,-12(fp)
   15e60:	00001306 	br	15eb0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15e64:	e0bffe17 	ldw	r2,-8(fp)
   15e68:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   15e6c:	e0bffe17 	ldw	r2,-8(fp)
   15e70:	e0ffff17 	ldw	r3,-4(fp)
   15e74:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   15e78:	e0bffe17 	ldw	r2,-8(fp)
   15e7c:	00c00fc4 	movi	r3,63
   15e80:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   15e84:	e0bffe17 	ldw	r2,-8(fp)
   15e88:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   15e8c:	e0bffe17 	ldw	r2,-8(fp)
   15e90:	10800c04 	addi	r2,r2,48
   15e94:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   15e98:	e0bfff17 	ldw	r2,-4(fp)
   15e9c:	10800c04 	addi	r2,r2,48
   15ea0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   15ea4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ea8:	10800044 	addi	r2,r2,1
   15eac:	e0bffd0d 	sth	r2,-12(fp)
   15eb0:	e0bffd0b 	ldhu	r2,-12(fp)
   15eb4:	10800ef0 	cmpltui	r2,r2,59
   15eb8:	103fea1e 	bne	r2,zero,15e64 <__alt_mem_Flash_flash_data+0xf4015e64>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   15ebc:	e0bffe17 	ldw	r2,-8(fp)
   15ec0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   15ec4:	e0bffe17 	ldw	r2,-8(fp)
   15ec8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   15ecc:	e0bffe17 	ldw	r2,-8(fp)
   15ed0:	00c00fc4 	movi	r3,63
   15ed4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   15ed8:	e0bffe17 	ldw	r2,-8(fp)
   15edc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   15ee0:	00800174 	movhi	r2,5
   15ee4:	10b8bb04 	addi	r2,r2,-7444
   15ee8:	d0a84b15 	stw	r2,-24276(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   15eec:	e037883a 	mov	sp,fp
   15ef0:	dfc00117 	ldw	ra,4(sp)
   15ef4:	df000017 	ldw	fp,0(sp)
   15ef8:	dec00204 	addi	sp,sp,8
   15efc:	f800283a 	ret

00015f00 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   15f00:	deffff04 	addi	sp,sp,-4
   15f04:	df000015 	stw	fp,0(sp)
   15f08:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   15f0c:	d0284e15 	stw	zero,-24264(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   15f10:	d0284c05 	stb	zero,-24272(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   15f14:	d0283e05 	stb	zero,-24328(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   15f18:	d0284645 	stb	zero,-24295(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   15f1c:	d0283e45 	stb	zero,-24327(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   15f20:	d0284315 	stw	zero,-24308(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   15f24:	d0283f15 	stw	zero,-24324(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   15f28:	d0285115 	stw	zero,-24252(gp)
    OSIdleCtrMax  = 0L;
   15f2c:	d0284415 	stw	zero,-24304(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   15f30:	d0285005 	stb	zero,-24256(gp)
#endif
}
   15f34:	e037883a 	mov	sp,fp
   15f38:	df000017 	ldw	fp,0(sp)
   15f3c:	dec00104 	addi	sp,sp,4
   15f40:	f800283a 	ret

00015f44 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   15f44:	defffd04 	addi	sp,sp,-12
   15f48:	df000215 	stw	fp,8(sp)
   15f4c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   15f50:	d0284a05 	stb	zero,-24280(gp)
    prdytbl       = &OSRdyTbl[0];
   15f54:	d0a84a44 	addi	r2,gp,-24279
   15f58:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15f5c:	e03ffe05 	stb	zero,-8(fp)
   15f60:	00000706 	br	15f80 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   15f64:	e0bfff17 	ldw	r2,-4(fp)
   15f68:	10c00044 	addi	r3,r2,1
   15f6c:	e0ffff15 	stw	r3,-4(fp)
   15f70:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15f74:	e0bffe03 	ldbu	r2,-8(fp)
   15f78:	10800044 	addi	r2,r2,1
   15f7c:	e0bffe05 	stb	r2,-8(fp)
   15f80:	e0bffe03 	ldbu	r2,-8(fp)
   15f84:	108000f0 	cmpltui	r2,r2,3
   15f88:	103ff61e 	bne	r2,zero,15f64 <__alt_mem_Flash_flash_data+0xf4015f64>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   15f8c:	d0284045 	stb	zero,-24319(gp)
    OSPrioHighRdy = 0;
   15f90:	d0284005 	stb	zero,-24320(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   15f94:	d0284815 	stw	zero,-24288(gp)
    OSTCBCur      = (OS_TCB *)0;
   15f98:	d0284d15 	stw	zero,-24268(gp)
}
   15f9c:	e037883a 	mov	sp,fp
   15fa0:	df000017 	ldw	fp,0(sp)
   15fa4:	dec00104 	addi	sp,sp,4
   15fa8:	f800283a 	ret

00015fac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   15fac:	defff804 	addi	sp,sp,-32
   15fb0:	dfc00715 	stw	ra,28(sp)
   15fb4:	df000615 	stw	fp,24(sp)
   15fb8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   15fbc:	00bfffd4 	movui	r2,65535
   15fc0:	d8800015 	stw	r2,0(sp)
   15fc4:	00800174 	movhi	r2,5
   15fc8:	10b6bb04 	addi	r2,r2,-9492
   15fcc:	d8800115 	stw	r2,4(sp)
   15fd0:	00808004 	movi	r2,512
   15fd4:	d8800215 	stw	r2,8(sp)
   15fd8:	d8000315 	stw	zero,12(sp)
   15fdc:	008000c4 	movi	r2,3
   15fe0:	d8800415 	stw	r2,16(sp)
   15fe4:	01000074 	movhi	r4,1
   15fe8:	21190f04 	addi	r4,r4,25660
   15fec:	000b883a 	mov	r5,zero
   15ff0:	01800174 	movhi	r6,5
   15ff4:	31b8ba04 	addi	r6,r6,-7448
   15ff8:	01c00504 	movi	r7,20
   15ffc:	001b9d80 	call	1b9d8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   16000:	01000504 	movi	r4,20
   16004:	014000b4 	movhi	r5,2
   16008:	2957b704 	addi	r5,r5,24284
   1600c:	e1bfff04 	addi	r6,fp,-4
   16010:	001c2a40 	call	1c2a4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   16014:	e037883a 	mov	sp,fp
   16018:	dfc00117 	ldw	ra,4(sp)
   1601c:	df000017 	ldw	fp,0(sp)
   16020:	dec00204 	addi	sp,sp,8
   16024:	f800283a 	ret

00016028 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   16028:	defff804 	addi	sp,sp,-32
   1602c:	dfc00715 	stw	ra,28(sp)
   16030:	df000615 	stw	fp,24(sp)
   16034:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   16038:	00bfff94 	movui	r2,65534
   1603c:	d8800015 	stw	r2,0(sp)
   16040:	00800174 	movhi	r2,5
   16044:	10b44304 	addi	r2,r2,-12020
   16048:	d8800115 	stw	r2,4(sp)
   1604c:	00808004 	movi	r2,512
   16050:	d8800215 	stw	r2,8(sp)
   16054:	d8000315 	stw	zero,12(sp)
   16058:	008000c4 	movi	r2,3
   1605c:	d8800415 	stw	r2,16(sp)
   16060:	01000074 	movhi	r4,1
   16064:	21192604 	addi	r4,r4,25752
   16068:	000b883a 	mov	r5,zero
   1606c:	01800174 	movhi	r6,5
   16070:	31b64204 	addi	r6,r6,-9976
   16074:	01c004c4 	movi	r7,19
   16078:	001b9d80 	call	1b9d8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1607c:	010004c4 	movi	r4,19
   16080:	014000b4 	movhi	r5,2
   16084:	2957bb04 	addi	r5,r5,24300
   16088:	e1bfff04 	addi	r6,fp,-4
   1608c:	001c2a40 	call	1c2a4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   16090:	e037883a 	mov	sp,fp
   16094:	dfc00117 	ldw	ra,4(sp)
   16098:	df000017 	ldw	fp,0(sp)
   1609c:	dec00204 	addi	sp,sp,8
   160a0:	f800283a 	ret

000160a4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   160a4:	defffb04 	addi	sp,sp,-20
   160a8:	dfc00415 	stw	ra,16(sp)
   160ac:	df000315 	stw	fp,12(sp)
   160b0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   160b4:	01000174 	movhi	r4,5
   160b8:	213b8b04 	addi	r4,r4,-4564
   160bc:	01414404 	movi	r5,1296
   160c0:	00161840 	call	16184 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   160c4:	01000174 	movhi	r4,5
   160c8:	213ccf04 	addi	r4,r4,-3268
   160cc:	01401504 	movi	r5,84
   160d0:	00161840 	call	16184 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   160d4:	00800174 	movhi	r2,5
   160d8:	10bb8b04 	addi	r2,r2,-4564
   160dc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   160e0:	00800174 	movhi	r2,5
   160e4:	10bba604 	addi	r2,r2,-4456
   160e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   160ec:	e03ffd05 	stb	zero,-12(fp)
   160f0:	00001106 	br	16138 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   160f4:	e0bffe17 	ldw	r2,-8(fp)
   160f8:	e0ffff17 	ldw	r3,-4(fp)
   160fc:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   16100:	e0bffe17 	ldw	r2,-8(fp)
   16104:	00c00fc4 	movi	r3,63
   16108:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1610c:	e0bffe17 	ldw	r2,-8(fp)
   16110:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   16114:	e0bffe17 	ldw	r2,-8(fp)
   16118:	10801b04 	addi	r2,r2,108
   1611c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   16120:	e0bfff17 	ldw	r2,-4(fp)
   16124:	10801b04 	addi	r2,r2,108
   16128:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1612c:	e0bffd03 	ldbu	r2,-12(fp)
   16130:	10800044 	addi	r2,r2,1
   16134:	e0bffd05 	stb	r2,-12(fp)
   16138:	e0bffd03 	ldbu	r2,-12(fp)
   1613c:	108002f0 	cmpltui	r2,r2,11
   16140:	103fec1e 	bne	r2,zero,160f4 <__alt_mem_Flash_flash_data+0xf40160f4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   16144:	e0bffe17 	ldw	r2,-8(fp)
   16148:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1614c:	e0bffe17 	ldw	r2,-8(fp)
   16150:	00c00fc4 	movi	r3,63
   16154:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   16158:	e0bffe17 	ldw	r2,-8(fp)
   1615c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   16160:	d0284115 	stw	zero,-24316(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   16164:	00800174 	movhi	r2,5
   16168:	10bb8b04 	addi	r2,r2,-4564
   1616c:	d0a84515 	stw	r2,-24300(gp)
}
   16170:	e037883a 	mov	sp,fp
   16174:	dfc00117 	ldw	ra,4(sp)
   16178:	df000017 	ldw	fp,0(sp)
   1617c:	dec00204 	addi	sp,sp,8
   16180:	f800283a 	ret

00016184 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   16184:	defffd04 	addi	sp,sp,-12
   16188:	df000215 	stw	fp,8(sp)
   1618c:	df000204 	addi	fp,sp,8
   16190:	e13ffe15 	stw	r4,-8(fp)
   16194:	2805883a 	mov	r2,r5
   16198:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1619c:	00000706 	br	161bc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   161a0:	e0bffe17 	ldw	r2,-8(fp)
   161a4:	10c00044 	addi	r3,r2,1
   161a8:	e0fffe15 	stw	r3,-8(fp)
   161ac:	10000005 	stb	zero,0(r2)
        size--;
   161b0:	e0bfff0b 	ldhu	r2,-4(fp)
   161b4:	10bfffc4 	addi	r2,r2,-1
   161b8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   161bc:	e0bfff0b 	ldhu	r2,-4(fp)
   161c0:	103ff71e 	bne	r2,zero,161a0 <__alt_mem_Flash_flash_data+0xf40161a0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   161c4:	e037883a 	mov	sp,fp
   161c8:	df000017 	ldw	fp,0(sp)
   161cc:	dec00104 	addi	sp,sp,4
   161d0:	f800283a 	ret

000161d4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   161d4:	defffc04 	addi	sp,sp,-16
   161d8:	df000315 	stw	fp,12(sp)
   161dc:	df000304 	addi	fp,sp,12
   161e0:	e13ffd15 	stw	r4,-12(fp)
   161e4:	e17ffe15 	stw	r5,-8(fp)
   161e8:	3005883a 	mov	r2,r6
   161ec:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   161f0:	00000b06 	br	16220 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   161f4:	e0bffd17 	ldw	r2,-12(fp)
   161f8:	10c00044 	addi	r3,r2,1
   161fc:	e0fffd15 	stw	r3,-12(fp)
   16200:	e0fffe17 	ldw	r3,-8(fp)
   16204:	19000044 	addi	r4,r3,1
   16208:	e13ffe15 	stw	r4,-8(fp)
   1620c:	18c00003 	ldbu	r3,0(r3)
   16210:	10c00005 	stb	r3,0(r2)
        size--;
   16214:	e0bfff0b 	ldhu	r2,-4(fp)
   16218:	10bfffc4 	addi	r2,r2,-1
   1621c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   16220:	e0bfff0b 	ldhu	r2,-4(fp)
   16224:	103ff31e 	bne	r2,zero,161f4 <__alt_mem_Flash_flash_data+0xf40161f4>
        *pdest++ = *psrc++;
        size--;
    }
}
   16228:	e037883a 	mov	sp,fp
   1622c:	df000017 	ldw	fp,0(sp)
   16230:	dec00104 	addi	sp,sp,4
   16234:	f800283a 	ret

00016238 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   16238:	defffb04 	addi	sp,sp,-20
   1623c:	dfc00415 	stw	ra,16(sp)
   16240:	df000315 	stw	fp,12(sp)
   16244:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16248:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1624c:	0005303a 	rdctl	r2,status
   16250:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16254:	e0fffe17 	ldw	r3,-8(fp)
   16258:	00bfff84 	movi	r2,-2
   1625c:	1884703a 	and	r2,r3,r2
   16260:	1001703a 	wrctl	status,r2
  
  return context;
   16264:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16268:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1626c:	d0a84c03 	ldbu	r2,-24272(gp)
   16270:	10803fcc 	andi	r2,r2,255
   16274:	10001a1e 	bne	r2,zero,162e0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   16278:	d0a83e03 	ldbu	r2,-24328(gp)
   1627c:	10803fcc 	andi	r2,r2,255
   16280:	1000171e 	bne	r2,zero,162e0 <OS_Sched+0xa8>
            OS_SchedNew();
   16284:	00163040 	call	16304 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   16288:	d0e84003 	ldbu	r3,-24320(gp)
   1628c:	d0a84043 	ldbu	r2,-24319(gp)
   16290:	18c03fcc 	andi	r3,r3,255
   16294:	10803fcc 	andi	r2,r2,255
   16298:	18801126 	beq	r3,r2,162e0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1629c:	d0a84003 	ldbu	r2,-24320(gp)
   162a0:	10c03fcc 	andi	r3,r2,255
   162a4:	00800174 	movhi	r2,5
   162a8:	10bccf04 	addi	r2,r2,-3268
   162ac:	18c7883a 	add	r3,r3,r3
   162b0:	18c7883a 	add	r3,r3,r3
   162b4:	10c5883a 	add	r2,r2,r3
   162b8:	10800017 	ldw	r2,0(r2)
   162bc:	d0a84815 	stw	r2,-24288(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   162c0:	d0a84817 	ldw	r2,-24288(gp)
   162c4:	10c00e17 	ldw	r3,56(r2)
   162c8:	18c00044 	addi	r3,r3,1
   162cc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   162d0:	d0a84317 	ldw	r2,-24308(gp)
   162d4:	10800044 	addi	r2,r2,1
   162d8:	d0a84315 	stw	r2,-24308(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   162dc:	00247e40 	call	247e4 <OSCtxSw>
   162e0:	e0bffd17 	ldw	r2,-12(fp)
   162e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162e8:	e0bfff17 	ldw	r2,-4(fp)
   162ec:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   162f0:	e037883a 	mov	sp,fp
   162f4:	dfc00117 	ldw	ra,4(sp)
   162f8:	df000017 	ldw	fp,0(sp)
   162fc:	dec00204 	addi	sp,sp,8
   16300:	f800283a 	ret

00016304 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   16304:	defffe04 	addi	sp,sp,-8
   16308:	df000115 	stw	fp,4(sp)
   1630c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   16310:	d0a84a03 	ldbu	r2,-24280(gp)
   16314:	10c03fcc 	andi	r3,r2,255
   16318:	008000b4 	movhi	r2,2
   1631c:	10977704 	addi	r2,r2,24028
   16320:	10c5883a 	add	r2,r2,r3
   16324:	10800003 	ldbu	r2,0(r2)
   16328:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1632c:	e0bfff03 	ldbu	r2,-4(fp)
   16330:	100490fa 	slli	r2,r2,3
   16334:	1009883a 	mov	r4,r2
   16338:	e0ffff03 	ldbu	r3,-4(fp)
   1633c:	d0a84a44 	addi	r2,gp,-24279
   16340:	1885883a 	add	r2,r3,r2
   16344:	10800003 	ldbu	r2,0(r2)
   16348:	10c03fcc 	andi	r3,r2,255
   1634c:	008000b4 	movhi	r2,2
   16350:	10977704 	addi	r2,r2,24028
   16354:	10c5883a 	add	r2,r2,r3
   16358:	10800003 	ldbu	r2,0(r2)
   1635c:	2085883a 	add	r2,r4,r2
   16360:	d0a84005 	stb	r2,-24320(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   16364:	e037883a 	mov	sp,fp
   16368:	df000017 	ldw	fp,0(sp)
   1636c:	dec00104 	addi	sp,sp,4
   16370:	f800283a 	ret

00016374 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   16374:	defffc04 	addi	sp,sp,-16
   16378:	df000315 	stw	fp,12(sp)
   1637c:	df000304 	addi	fp,sp,12
   16380:	e13ffe15 	stw	r4,-8(fp)
   16384:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   16388:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1638c:	00000b06 	br	163bc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   16390:	e0bffe17 	ldw	r2,-8(fp)
   16394:	10c00044 	addi	r3,r2,1
   16398:	e0fffe15 	stw	r3,-8(fp)
   1639c:	e0ffff17 	ldw	r3,-4(fp)
   163a0:	19000044 	addi	r4,r3,1
   163a4:	e13fff15 	stw	r4,-4(fp)
   163a8:	18c00003 	ldbu	r3,0(r3)
   163ac:	10c00005 	stb	r3,0(r2)
        len++;
   163b0:	e0bffd03 	ldbu	r2,-12(fp)
   163b4:	10800044 	addi	r2,r2,1
   163b8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   163bc:	e0bfff17 	ldw	r2,-4(fp)
   163c0:	10800003 	ldbu	r2,0(r2)
   163c4:	10803fcc 	andi	r2,r2,255
   163c8:	103ff11e 	bne	r2,zero,16390 <__alt_mem_Flash_flash_data+0xf4016390>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   163cc:	e0bffe17 	ldw	r2,-8(fp)
   163d0:	10000005 	stb	zero,0(r2)
    return (len);
   163d4:	e0bffd03 	ldbu	r2,-12(fp)
}
   163d8:	e037883a 	mov	sp,fp
   163dc:	df000017 	ldw	fp,0(sp)
   163e0:	dec00104 	addi	sp,sp,4
   163e4:	f800283a 	ret

000163e8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   163e8:	defffd04 	addi	sp,sp,-12
   163ec:	df000215 	stw	fp,8(sp)
   163f0:	df000204 	addi	fp,sp,8
   163f4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   163f8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   163fc:	00000606 	br	16418 <OS_StrLen+0x30>
        psrc++;
   16400:	e0bfff17 	ldw	r2,-4(fp)
   16404:	10800044 	addi	r2,r2,1
   16408:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1640c:	e0bffe03 	ldbu	r2,-8(fp)
   16410:	10800044 	addi	r2,r2,1
   16414:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   16418:	e0bfff17 	ldw	r2,-4(fp)
   1641c:	10800003 	ldbu	r2,0(r2)
   16420:	10803fcc 	andi	r2,r2,255
   16424:	103ff61e 	bne	r2,zero,16400 <__alt_mem_Flash_flash_data+0xf4016400>
        psrc++;
        len++;
    }
    return (len);
   16428:	e0bffe03 	ldbu	r2,-8(fp)
}
   1642c:	e037883a 	mov	sp,fp
   16430:	df000017 	ldw	fp,0(sp)
   16434:	dec00104 	addi	sp,sp,4
   16438:	f800283a 	ret

0001643c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1643c:	defffa04 	addi	sp,sp,-24
   16440:	dfc00515 	stw	ra,20(sp)
   16444:	df000415 	stw	fp,16(sp)
   16448:	df000404 	addi	fp,sp,16
   1644c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16450:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16454:	0005303a 	rdctl	r2,status
   16458:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1645c:	e0fffd17 	ldw	r3,-12(fp)
   16460:	00bfff84 	movi	r2,-2
   16464:	1884703a 	and	r2,r3,r2
   16468:	1001703a 	wrctl	status,r2
  
  return context;
   1646c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   16470:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   16474:	d0a83f17 	ldw	r2,-24324(gp)
   16478:	10800044 	addi	r2,r2,1
   1647c:	d0a83f15 	stw	r2,-24324(gp)
   16480:	e0bffc17 	ldw	r2,-16(fp)
   16484:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16488:	e0bffe17 	ldw	r2,-8(fp)
   1648c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   16490:	0024adc0 	call	24adc <OSTaskIdleHook>
    }
   16494:	003fef06 	br	16454 <__alt_mem_Flash_flash_data+0xf4016454>

00016498 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   16498:	defff804 	addi	sp,sp,-32
   1649c:	dfc00715 	stw	ra,28(sp)
   164a0:	df000615 	stw	fp,24(sp)
   164a4:	dc400515 	stw	r17,20(sp)
   164a8:	dc000415 	stw	r16,16(sp)
   164ac:	df000604 	addi	fp,sp,24
   164b0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   164b4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   164b8:	00000206 	br	164c4 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   164bc:	01000044 	movi	r4,1
   164c0:	001cbd00 	call	1cbd0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   164c4:	d0a85003 	ldbu	r2,-24256(gp)
   164c8:	10803fcc 	andi	r2,r2,255
   164cc:	103ffb26 	beq	r2,zero,164bc <__alt_mem_Flash_flash_data+0xf40164bc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   164d0:	d0e84417 	ldw	r3,-24304(gp)
   164d4:	00947b34 	movhi	r2,20972
   164d8:	10a147c4 	addi	r2,r2,-31457
   164dc:	1888383a 	mulxuu	r4,r3,r2
   164e0:	1885383a 	mul	r2,r3,r2
   164e4:	1021883a 	mov	r16,r2
   164e8:	2023883a 	mov	r17,r4
   164ec:	8804d17a 	srli	r2,r17,5
   164f0:	d0a84415 	stw	r2,-24304(gp)
    if (OSIdleCtrMax == 0L) {
   164f4:	d0a84417 	ldw	r2,-24304(gp)
   164f8:	1000031e 	bne	r2,zero,16508 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   164fc:	d0284605 	stb	zero,-24296(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   16500:	01003fc4 	movi	r4,255
   16504:	001c8240 	call	1c824 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16508:	0005303a 	rdctl	r2,status
   1650c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16510:	e0fffb17 	ldw	r3,-20(fp)
   16514:	00bfff84 	movi	r2,-2
   16518:	1884703a 	and	r2,r3,r2
   1651c:	1001703a 	wrctl	status,r2
  
  return context;
   16520:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   16524:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   16528:	d0a83f17 	ldw	r2,-24324(gp)
   1652c:	d0a85115 	stw	r2,-24252(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   16530:	d0283f15 	stw	zero,-24324(gp)
   16534:	e0bffa17 	ldw	r2,-24(fp)
   16538:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1653c:	e0bffc17 	ldw	r2,-16(fp)
   16540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   16544:	d0e85117 	ldw	r3,-24252(gp)
   16548:	d0a84417 	ldw	r2,-24304(gp)
   1654c:	1885203a 	divu	r2,r3,r2
   16550:	1007883a 	mov	r3,r2
   16554:	00801904 	movi	r2,100
   16558:	10c5c83a 	sub	r2,r2,r3
   1655c:	d0a84605 	stb	r2,-24296(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   16560:	0024a6c0 	call	24a6c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   16564:	00165740 	call	16574 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   16568:	0009883a 	mov	r4,zero
   1656c:	001cbd00 	call	1cbd0 <OSTimeDly>
    }
   16570:	003fe506 	br	16508 <__alt_mem_Flash_flash_data+0xf4016508>

00016574 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   16574:	defffa04 	addi	sp,sp,-24
   16578:	dfc00515 	stw	ra,20(sp)
   1657c:	df000415 	stw	fp,16(sp)
   16580:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   16584:	e03ffc05 	stb	zero,-16(fp)
   16588:	00002406 	br	1661c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1658c:	e0fffc03 	ldbu	r3,-16(fp)
   16590:	e0bffe04 	addi	r2,fp,-8
   16594:	1809883a 	mov	r4,r3
   16598:	100b883a 	mov	r5,r2
   1659c:	001c65c0 	call	1c65c <OSTaskStkChk>
   165a0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   165a4:	e0bffc43 	ldbu	r2,-15(fp)
   165a8:	1000191e 	bne	r2,zero,16610 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   165ac:	e0fffc03 	ldbu	r3,-16(fp)
   165b0:	00800174 	movhi	r2,5
   165b4:	10bccf04 	addi	r2,r2,-3268
   165b8:	18c7883a 	add	r3,r3,r3
   165bc:	18c7883a 	add	r3,r3,r3
   165c0:	10c5883a 	add	r2,r2,r3
   165c4:	10800017 	ldw	r2,0(r2)
   165c8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   165cc:	e0bffd17 	ldw	r2,-12(fp)
   165d0:	10000f26 	beq	r2,zero,16610 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   165d4:	e0bffd17 	ldw	r2,-12(fp)
   165d8:	10800060 	cmpeqi	r2,r2,1
   165dc:	10000c1e 	bne	r2,zero,16610 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   165e0:	e0bffd17 	ldw	r2,-12(fp)
   165e4:	10c00217 	ldw	r3,8(r2)
   165e8:	e0bffd17 	ldw	r2,-12(fp)
   165ec:	10800317 	ldw	r2,12(r2)
   165f0:	1085883a 	add	r2,r2,r2
   165f4:	1085883a 	add	r2,r2,r2
   165f8:	1887883a 	add	r3,r3,r2
   165fc:	e0bffd17 	ldw	r2,-12(fp)
   16600:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   16604:	e0ffff17 	ldw	r3,-4(fp)
   16608:	e0bffd17 	ldw	r2,-12(fp)
   1660c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   16610:	e0bffc03 	ldbu	r2,-16(fp)
   16614:	10800044 	addi	r2,r2,1
   16618:	e0bffc05 	stb	r2,-16(fp)
   1661c:	e0bffc03 	ldbu	r2,-16(fp)
   16620:	10800570 	cmpltui	r2,r2,21
   16624:	103fd91e 	bne	r2,zero,1658c <__alt_mem_Flash_flash_data+0xf401658c>
#endif
                }
            }
        }
    }
}
   16628:	e037883a 	mov	sp,fp
   1662c:	dfc00117 	ldw	ra,4(sp)
   16630:	df000017 	ldw	fp,0(sp)
   16634:	dec00204 	addi	sp,sp,8
   16638:	f800283a 	ret

0001663c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1663c:	defff204 	addi	sp,sp,-56
   16640:	dfc00d15 	stw	ra,52(sp)
   16644:	df000c15 	stw	fp,48(sp)
   16648:	df000c04 	addi	fp,sp,48
   1664c:	e17ffc15 	stw	r5,-16(fp)
   16650:	e1bffd15 	stw	r6,-12(fp)
   16654:	3807883a 	mov	r3,r7
   16658:	e0800417 	ldw	r2,16(fp)
   1665c:	e13ffb05 	stb	r4,-20(fp)
   16660:	e0fffe0d 	sth	r3,-8(fp)
   16664:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16668:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1666c:	0005303a 	rdctl	r2,status
   16670:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16674:	e0fff617 	ldw	r3,-40(fp)
   16678:	00bfff84 	movi	r2,-2
   1667c:	1884703a 	and	r2,r3,r2
   16680:	1001703a 	wrctl	status,r2
  
  return context;
   16684:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   16688:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1668c:	d0a84517 	ldw	r2,-24300(gp)
   16690:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   16694:	e0bff517 	ldw	r2,-44(fp)
   16698:	10009326 	beq	r2,zero,168e8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1669c:	e0bff517 	ldw	r2,-44(fp)
   166a0:	10800517 	ldw	r2,20(r2)
   166a4:	d0a84515 	stw	r2,-24300(gp)
   166a8:	e0bff417 	ldw	r2,-48(fp)
   166ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166b0:	e0bff717 	ldw	r2,-36(fp)
   166b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   166b8:	e0bff517 	ldw	r2,-44(fp)
   166bc:	e0fffc17 	ldw	r3,-16(fp)
   166c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   166c4:	e0bff517 	ldw	r2,-44(fp)
   166c8:	e0fffb03 	ldbu	r3,-20(fp)
   166cc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   166d0:	e0bff517 	ldw	r2,-44(fp)
   166d4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   166d8:	e0bff517 	ldw	r2,-44(fp)
   166dc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   166e0:	e0bff517 	ldw	r2,-44(fp)
   166e4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   166e8:	e0bff517 	ldw	r2,-44(fp)
   166ec:	e0c00317 	ldw	r3,12(fp)
   166f0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   166f4:	e0bff517 	ldw	r2,-44(fp)
   166f8:	e0c00217 	ldw	r3,8(fp)
   166fc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   16700:	e0bff517 	ldw	r2,-44(fp)
   16704:	e0fffd17 	ldw	r3,-12(fp)
   16708:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1670c:	e0bff517 	ldw	r2,-44(fp)
   16710:	e0ffff0b 	ldhu	r3,-4(fp)
   16714:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   16718:	e0bff517 	ldw	r2,-44(fp)
   1671c:	e0fffe0b 	ldhu	r3,-8(fp)
   16720:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   16724:	e0bff517 	ldw	r2,-44(fp)
   16728:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1672c:	e0bffb03 	ldbu	r2,-20(fp)
   16730:	1004d0fa 	srli	r2,r2,3
   16734:	1007883a 	mov	r3,r2
   16738:	e0bff517 	ldw	r2,-44(fp)
   1673c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   16740:	e0bffb03 	ldbu	r2,-20(fp)
   16744:	108001cc 	andi	r2,r2,7
   16748:	1007883a 	mov	r3,r2
   1674c:	e0bff517 	ldw	r2,-44(fp)
   16750:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   16754:	e0bff517 	ldw	r2,-44(fp)
   16758:	10800d03 	ldbu	r2,52(r2)
   1675c:	10803fcc 	andi	r2,r2,255
   16760:	00c00044 	movi	r3,1
   16764:	1884983a 	sll	r2,r3,r2
   16768:	1007883a 	mov	r3,r2
   1676c:	e0bff517 	ldw	r2,-44(fp)
   16770:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   16774:	e0bff517 	ldw	r2,-44(fp)
   16778:	10800cc3 	ldbu	r2,51(r2)
   1677c:	10803fcc 	andi	r2,r2,255
   16780:	00c00044 	movi	r3,1
   16784:	1884983a 	sll	r2,r3,r2
   16788:	1007883a 	mov	r3,r2
   1678c:	e0bff517 	ldw	r2,-44(fp)
   16790:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   16794:	e0bff517 	ldw	r2,-44(fp)
   16798:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1679c:	e0bff517 	ldw	r2,-44(fp)
   167a0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   167a4:	e0bff517 	ldw	r2,-44(fp)
   167a8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   167ac:	e0bff517 	ldw	r2,-44(fp)
   167b0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   167b4:	e0bff517 	ldw	r2,-44(fp)
   167b8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   167bc:	e0bff517 	ldw	r2,-44(fp)
   167c0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   167c4:	e0bff517 	ldw	r2,-44(fp)
   167c8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   167cc:	e0bff517 	ldw	r2,-44(fp)
   167d0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   167d4:	e0bff517 	ldw	r2,-44(fp)
   167d8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   167dc:	e0bff517 	ldw	r2,-44(fp)
   167e0:	00c00fc4 	movi	r3,63
   167e4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   167e8:	e0bff517 	ldw	r2,-44(fp)
   167ec:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   167f0:	e13ff517 	ldw	r4,-44(fp)
   167f4:	0024af80 	call	24af8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   167f8:	e13ff517 	ldw	r4,-44(fp)
   167fc:	0024a100 	call	24a10 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16800:	0005303a 	rdctl	r2,status
   16804:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16808:	e0fff817 	ldw	r3,-32(fp)
   1680c:	00bfff84 	movi	r2,-2
   16810:	1884703a 	and	r2,r3,r2
   16814:	1001703a 	wrctl	status,r2
  
  return context;
   16818:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   1681c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   16820:	e0fffb03 	ldbu	r3,-20(fp)
   16824:	00800174 	movhi	r2,5
   16828:	10bccf04 	addi	r2,r2,-3268
   1682c:	18c7883a 	add	r3,r3,r3
   16830:	18c7883a 	add	r3,r3,r3
   16834:	10c5883a 	add	r2,r2,r3
   16838:	e0fff517 	ldw	r3,-44(fp)
   1683c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   16840:	d0e84117 	ldw	r3,-24316(gp)
   16844:	e0bff517 	ldw	r2,-44(fp)
   16848:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1684c:	e0bff517 	ldw	r2,-44(fp)
   16850:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   16854:	d0a84117 	ldw	r2,-24316(gp)
   16858:	10000326 	beq	r2,zero,16868 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1685c:	d0a84117 	ldw	r2,-24316(gp)
   16860:	e0fff517 	ldw	r3,-44(fp)
   16864:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   16868:	e0bff517 	ldw	r2,-44(fp)
   1686c:	d0a84115 	stw	r2,-24316(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   16870:	e0bff517 	ldw	r2,-44(fp)
   16874:	10c00d83 	ldbu	r3,54(r2)
   16878:	d0a84a03 	ldbu	r2,-24280(gp)
   1687c:	1884b03a 	or	r2,r3,r2
   16880:	d0a84a05 	stb	r2,-24280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16884:	e0bff517 	ldw	r2,-44(fp)
   16888:	10800d03 	ldbu	r2,52(r2)
   1688c:	10c03fcc 	andi	r3,r2,255
   16890:	e0bff517 	ldw	r2,-44(fp)
   16894:	10800d03 	ldbu	r2,52(r2)
   16898:	11003fcc 	andi	r4,r2,255
   1689c:	d0a84a44 	addi	r2,gp,-24279
   168a0:	2085883a 	add	r2,r4,r2
   168a4:	11000003 	ldbu	r4,0(r2)
   168a8:	e0bff517 	ldw	r2,-44(fp)
   168ac:	10800d43 	ldbu	r2,53(r2)
   168b0:	2084b03a 	or	r2,r4,r2
   168b4:	1009883a 	mov	r4,r2
   168b8:	d0a84a44 	addi	r2,gp,-24279
   168bc:	1885883a 	add	r2,r3,r2
   168c0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   168c4:	d0a84643 	ldbu	r2,-24295(gp)
   168c8:	10800044 	addi	r2,r2,1
   168cc:	d0a84645 	stb	r2,-24295(gp)
   168d0:	e0bff417 	ldw	r2,-48(fp)
   168d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168d8:	e0bff917 	ldw	r2,-28(fp)
   168dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   168e0:	0005883a 	mov	r2,zero
   168e4:	00000506 	br	168fc <OS_TCBInit+0x2c0>
   168e8:	e0bff417 	ldw	r2,-48(fp)
   168ec:	e0bffa15 	stw	r2,-24(fp)
   168f0:	e0bffa17 	ldw	r2,-24(fp)
   168f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   168f8:	00801084 	movi	r2,66
}
   168fc:	e037883a 	mov	sp,fp
   16900:	dfc00117 	ldw	ra,4(sp)
   16904:	df000017 	ldw	fp,0(sp)
   16908:	dec00204 	addi	sp,sp,8
   1690c:	f800283a 	ret

00016910 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   16910:	defffe04 	addi	sp,sp,-8
   16914:	df000115 	stw	fp,4(sp)
   16918:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1691c:	d0a01d04 	addi	r2,gp,-32652
   16920:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   16924:	d0a01e04 	addi	r2,gp,-32648
   16928:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1692c:	d0a01f84 	addi	r2,gp,-32642
   16930:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   16934:	d0a02004 	addi	r2,gp,-32640
   16938:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1693c:	d0a01f04 	addi	r2,gp,-32644
   16940:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   16944:	d0a02084 	addi	r2,gp,-32638
   16948:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1694c:	d0a02104 	addi	r2,gp,-32636
   16950:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   16954:	d0a02184 	addi	r2,gp,-32634
   16958:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1695c:	d0a02204 	addi	r2,gp,-32632
   16960:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   16964:	d0a02284 	addi	r2,gp,-32630
   16968:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1696c:	d0a02304 	addi	r2,gp,-32628
   16970:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   16974:	d0a02384 	addi	r2,gp,-32626
   16978:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1697c:	d0a02404 	addi	r2,gp,-32624
   16980:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   16984:	d0a02484 	addi	r2,gp,-32622
   16988:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1698c:	d0a02504 	addi	r2,gp,-32620
   16990:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   16994:	d0a02584 	addi	r2,gp,-32618
   16998:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1699c:	d0a02604 	addi	r2,gp,-32616
   169a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   169a4:	d0a02684 	addi	r2,gp,-32614
   169a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   169ac:	d0a02704 	addi	r2,gp,-32612
   169b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   169b4:	d0a02784 	addi	r2,gp,-32610
   169b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   169bc:	d0a02804 	addi	r2,gp,-32608
   169c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   169c4:	d0a02884 	addi	r2,gp,-32606
   169c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   169cc:	d0a02904 	addi	r2,gp,-32604
   169d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   169d4:	d0a02984 	addi	r2,gp,-32602
   169d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   169dc:	d0a02a04 	addi	r2,gp,-32600
   169e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   169e4:	d0a02a84 	addi	r2,gp,-32598
   169e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   169ec:	d0a02b04 	addi	r2,gp,-32596
   169f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   169f4:	d0a02b84 	addi	r2,gp,-32594
   169f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   169fc:	d0a02c04 	addi	r2,gp,-32592
   16a00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   16a04:	d0a02c84 	addi	r2,gp,-32590
   16a08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   16a0c:	d0a02d04 	addi	r2,gp,-32588
   16a10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   16a14:	d0a02d84 	addi	r2,gp,-32586
   16a18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   16a1c:	d0a02e04 	addi	r2,gp,-32584
   16a20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   16a24:	d0a02e84 	addi	r2,gp,-32582
   16a28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   16a2c:	d0a02f04 	addi	r2,gp,-32580
   16a30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   16a34:	d0a02f84 	addi	r2,gp,-32578
   16a38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   16a3c:	d0a03004 	addi	r2,gp,-32576
   16a40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   16a44:	d0a03084 	addi	r2,gp,-32574
   16a48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   16a4c:	d0a03104 	addi	r2,gp,-32572
   16a50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   16a54:	d0a03184 	addi	r2,gp,-32570
   16a58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   16a5c:	d0a03204 	addi	r2,gp,-32568
   16a60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   16a64:	d0a03284 	addi	r2,gp,-32566
   16a68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   16a6c:	d0a03304 	addi	r2,gp,-32564
   16a70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   16a74:	d0a03384 	addi	r2,gp,-32562
   16a78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   16a7c:	d0a03404 	addi	r2,gp,-32560
   16a80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   16a84:	d0a03904 	addi	r2,gp,-32540
   16a88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   16a8c:	e037883a 	mov	sp,fp
   16a90:	df000017 	ldw	fp,0(sp)
   16a94:	dec00104 	addi	sp,sp,4
   16a98:	f800283a 	ret

00016a9c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   16a9c:	defff204 	addi	sp,sp,-56
   16aa0:	df000d15 	stw	fp,52(sp)
   16aa4:	df000d04 	addi	fp,sp,52
   16aa8:	e13ffc15 	stw	r4,-16(fp)
   16aac:	2807883a 	mov	r3,r5
   16ab0:	3005883a 	mov	r2,r6
   16ab4:	e1ffff15 	stw	r7,-4(fp)
   16ab8:	e0fffd0d 	sth	r3,-12(fp)
   16abc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16ac0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16ac4:	e0bfff17 	ldw	r2,-4(fp)
   16ac8:	1000021e 	bne	r2,zero,16ad4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   16acc:	0005883a 	mov	r2,zero
   16ad0:	0000b006 	br	16d94 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16ad4:	e0bffc17 	ldw	r2,-16(fp)
   16ad8:	1000051e 	bne	r2,zero,16af0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16adc:	e0bfff17 	ldw	r2,-4(fp)
   16ae0:	00c01b84 	movi	r3,110
   16ae4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16ae8:	0005883a 	mov	r2,zero
   16aec:	0000a906 	br	16d94 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   16af0:	e0bffc17 	ldw	r2,-16(fp)
   16af4:	10800003 	ldbu	r2,0(r2)
   16af8:	10803fcc 	andi	r2,r2,255
   16afc:	10800160 	cmpeqi	r2,r2,5
   16b00:	1000051e 	bne	r2,zero,16b18 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   16b04:	e0bfff17 	ldw	r2,-4(fp)
   16b08:	00c00044 	movi	r3,1
   16b0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16b10:	0005883a 	mov	r2,zero
   16b14:	00009f06 	br	16d94 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   16b18:	e0fffe03 	ldbu	r3,-8(fp)
   16b1c:	00bfe004 	movi	r2,-128
   16b20:	1884703a 	and	r2,r3,r2
   16b24:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   16b28:	e0bff503 	ldbu	r2,-44(fp)
   16b2c:	10000626 	beq	r2,zero,16b48 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   16b30:	e0bffe03 	ldbu	r2,-8(fp)
   16b34:	10801fcc 	andi	r2,r2,127
   16b38:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   16b3c:	00800044 	movi	r2,1
   16b40:	e0bff385 	stb	r2,-50(fp)
   16b44:	00000106 	br	16b4c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   16b48:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   16b4c:	e0bfff17 	ldw	r2,-4(fp)
   16b50:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b54:	0005303a 	rdctl	r2,status
   16b58:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b5c:	e0fff617 	ldw	r3,-40(fp)
   16b60:	00bfff84 	movi	r2,-2
   16b64:	1884703a 	and	r2,r3,r2
   16b68:	1001703a 	wrctl	status,r2
  
  return context;
   16b6c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   16b70:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   16b74:	e0bffe03 	ldbu	r2,-8(fp)
   16b78:	10c00060 	cmpeqi	r3,r2,1
   16b7c:	18005f1e 	bne	r3,zero,16cfc <OSFlagAccept+0x260>
   16b80:	10c00088 	cmpgei	r3,r2,2
   16b84:	1800021e 	bne	r3,zero,16b90 <OSFlagAccept+0xf4>
   16b88:	10003f26 	beq	r2,zero,16c88 <OSFlagAccept+0x1ec>
   16b8c:	00007706 	br	16d6c <OSFlagAccept+0x2d0>
   16b90:	10c000a0 	cmpeqi	r3,r2,2
   16b94:	1800031e 	bne	r3,zero,16ba4 <OSFlagAccept+0x108>
   16b98:	108000e0 	cmpeqi	r2,r2,3
   16b9c:	10001e1e 	bne	r2,zero,16c18 <OSFlagAccept+0x17c>
   16ba0:	00007206 	br	16d6c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   16ba4:	e0bffc17 	ldw	r2,-16(fp)
   16ba8:	10c0020b 	ldhu	r3,8(r2)
   16bac:	e0bffd0b 	ldhu	r2,-12(fp)
   16bb0:	1884703a 	and	r2,r3,r2
   16bb4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16bb8:	e0fff30b 	ldhu	r3,-52(fp)
   16bbc:	e0bffd0b 	ldhu	r2,-12(fp)
   16bc0:	18800d1e 	bne	r3,r2,16bf8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16bc4:	e0bff383 	ldbu	r2,-50(fp)
   16bc8:	10800058 	cmpnei	r2,r2,1
   16bcc:	10000d1e 	bne	r2,zero,16c04 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   16bd0:	e0bffc17 	ldw	r2,-16(fp)
   16bd4:	1080020b 	ldhu	r2,8(r2)
   16bd8:	1007883a 	mov	r3,r2
   16bdc:	e0bff30b 	ldhu	r2,-52(fp)
   16be0:	0084303a 	nor	r2,zero,r2
   16be4:	1884703a 	and	r2,r3,r2
   16be8:	1007883a 	mov	r3,r2
   16bec:	e0bffc17 	ldw	r2,-16(fp)
   16bf0:	10c0020d 	sth	r3,8(r2)
   16bf4:	00000306 	br	16c04 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	00c01c04 	movi	r3,112
   16c00:	10c00005 	stb	r3,0(r2)
   16c04:	e0bff417 	ldw	r2,-48(fp)
   16c08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c0c:	e0bff717 	ldw	r2,-36(fp)
   16c10:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16c14:	00005e06 	br	16d90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   16c18:	e0bffc17 	ldw	r2,-16(fp)
   16c1c:	10c0020b 	ldhu	r3,8(r2)
   16c20:	e0bffd0b 	ldhu	r2,-12(fp)
   16c24:	1884703a 	and	r2,r3,r2
   16c28:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   16c2c:	e0bff30b 	ldhu	r2,-52(fp)
   16c30:	10000d26 	beq	r2,zero,16c68 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16c34:	e0bff383 	ldbu	r2,-50(fp)
   16c38:	10800058 	cmpnei	r2,r2,1
   16c3c:	10000d1e 	bne	r2,zero,16c74 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   16c40:	e0bffc17 	ldw	r2,-16(fp)
   16c44:	1080020b 	ldhu	r2,8(r2)
   16c48:	1007883a 	mov	r3,r2
   16c4c:	e0bff30b 	ldhu	r2,-52(fp)
   16c50:	0084303a 	nor	r2,zero,r2
   16c54:	1884703a 	and	r2,r3,r2
   16c58:	1007883a 	mov	r3,r2
   16c5c:	e0bffc17 	ldw	r2,-16(fp)
   16c60:	10c0020d 	sth	r3,8(r2)
   16c64:	00000306 	br	16c74 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16c68:	e0bfff17 	ldw	r2,-4(fp)
   16c6c:	00c01c04 	movi	r3,112
   16c70:	10c00005 	stb	r3,0(r2)
   16c74:	e0bff417 	ldw	r2,-48(fp)
   16c78:	e0bff815 	stw	r2,-32(fp)
   16c7c:	e0bff817 	ldw	r2,-32(fp)
   16c80:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16c84:	00004206 	br	16d90 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16c88:	e0bffc17 	ldw	r2,-16(fp)
   16c8c:	1080020b 	ldhu	r2,8(r2)
   16c90:	0084303a 	nor	r2,zero,r2
   16c94:	1007883a 	mov	r3,r2
   16c98:	e0bffd0b 	ldhu	r2,-12(fp)
   16c9c:	1884703a 	and	r2,r3,r2
   16ca0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16ca4:	e0fff30b 	ldhu	r3,-52(fp)
   16ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   16cac:	18800b1e 	bne	r3,r2,16cdc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16cb0:	e0bff383 	ldbu	r2,-50(fp)
   16cb4:	10800058 	cmpnei	r2,r2,1
   16cb8:	10000b1e 	bne	r2,zero,16ce8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16cbc:	e0bffc17 	ldw	r2,-16(fp)
   16cc0:	10c0020b 	ldhu	r3,8(r2)
   16cc4:	e0bff30b 	ldhu	r2,-52(fp)
   16cc8:	1884b03a 	or	r2,r3,r2
   16ccc:	1007883a 	mov	r3,r2
   16cd0:	e0bffc17 	ldw	r2,-16(fp)
   16cd4:	10c0020d 	sth	r3,8(r2)
   16cd8:	00000306 	br	16ce8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16cdc:	e0bfff17 	ldw	r2,-4(fp)
   16ce0:	00c01c04 	movi	r3,112
   16ce4:	10c00005 	stb	r3,0(r2)
   16ce8:	e0bff417 	ldw	r2,-48(fp)
   16cec:	e0bff915 	stw	r2,-28(fp)
   16cf0:	e0bff917 	ldw	r2,-28(fp)
   16cf4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16cf8:	00002506 	br	16d90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   16cfc:	e0bffc17 	ldw	r2,-16(fp)
   16d00:	1080020b 	ldhu	r2,8(r2)
   16d04:	0084303a 	nor	r2,zero,r2
   16d08:	1007883a 	mov	r3,r2
   16d0c:	e0bffd0b 	ldhu	r2,-12(fp)
   16d10:	1884703a 	and	r2,r3,r2
   16d14:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16d18:	e0bff30b 	ldhu	r2,-52(fp)
   16d1c:	10000b26 	beq	r2,zero,16d4c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16d20:	e0bff383 	ldbu	r2,-50(fp)
   16d24:	10800058 	cmpnei	r2,r2,1
   16d28:	10000b1e 	bne	r2,zero,16d58 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16d2c:	e0bffc17 	ldw	r2,-16(fp)
   16d30:	10c0020b 	ldhu	r3,8(r2)
   16d34:	e0bff30b 	ldhu	r2,-52(fp)
   16d38:	1884b03a 	or	r2,r3,r2
   16d3c:	1007883a 	mov	r3,r2
   16d40:	e0bffc17 	ldw	r2,-16(fp)
   16d44:	10c0020d 	sth	r3,8(r2)
   16d48:	00000306 	br	16d58 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   16d4c:	e0bfff17 	ldw	r2,-4(fp)
   16d50:	00c01c04 	movi	r3,112
   16d54:	10c00005 	stb	r3,0(r2)
   16d58:	e0bff417 	ldw	r2,-48(fp)
   16d5c:	e0bffa15 	stw	r2,-24(fp)
   16d60:	e0bffa17 	ldw	r2,-24(fp)
   16d64:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16d68:	00000906 	br	16d90 <OSFlagAccept+0x2f4>
   16d6c:	e0bff417 	ldw	r2,-48(fp)
   16d70:	e0bffb15 	stw	r2,-20(fp)
   16d74:	e0bffb17 	ldw	r2,-20(fp)
   16d78:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   16d7c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   16d80:	e0bfff17 	ldw	r2,-4(fp)
   16d84:	00c01bc4 	movi	r3,111
   16d88:	10c00005 	stb	r3,0(r2)
             break;
   16d8c:	0001883a 	nop
    }
    return (flags_rdy);
   16d90:	e0bff30b 	ldhu	r2,-52(fp)
}
   16d94:	e037883a 	mov	sp,fp
   16d98:	df000017 	ldw	fp,0(sp)
   16d9c:	dec00104 	addi	sp,sp,4
   16da0:	f800283a 	ret

00016da4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   16da4:	defff804 	addi	sp,sp,-32
   16da8:	df000715 	stw	fp,28(sp)
   16dac:	df000704 	addi	fp,sp,28
   16db0:	2005883a 	mov	r2,r4
   16db4:	e17fff15 	stw	r5,-4(fp)
   16db8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   16dbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   16dc0:	e0bfff17 	ldw	r2,-4(fp)
   16dc4:	1000021e 	bne	r2,zero,16dd0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   16dc8:	0005883a 	mov	r2,zero
   16dcc:	00003b06 	br	16ebc <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   16dd0:	008000f4 	movhi	r2,3
   16dd4:	10a80604 	addi	r2,r2,-24552
   16dd8:	10800003 	ldbu	r2,0(r2)
   16ddc:	10803fcc 	andi	r2,r2,255
   16de0:	10000526 	beq	r2,zero,16df8 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   16de4:	e0bfff17 	ldw	r2,-4(fp)
   16de8:	00c00404 	movi	r3,16
   16dec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   16df0:	0005883a 	mov	r2,zero
   16df4:	00003106 	br	16ebc <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16df8:	0005303a 	rdctl	r2,status
   16dfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e00:	e0fffb17 	ldw	r3,-20(fp)
   16e04:	00bfff84 	movi	r2,-2
   16e08:	1884703a 	and	r2,r3,r2
   16e0c:	1001703a 	wrctl	status,r2
  
  return context;
   16e10:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16e14:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   16e18:	008000f4 	movhi	r2,3
   16e1c:	10a80904 	addi	r2,r2,-24540
   16e20:	10800017 	ldw	r2,0(r2)
   16e24:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   16e28:	e0bffa17 	ldw	r2,-24(fp)
   16e2c:	10001b26 	beq	r2,zero,16e9c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   16e30:	008000f4 	movhi	r2,3
   16e34:	10a80904 	addi	r2,r2,-24540
   16e38:	10800017 	ldw	r2,0(r2)
   16e3c:	10c00117 	ldw	r3,4(r2)
   16e40:	008000f4 	movhi	r2,3
   16e44:	10a80904 	addi	r2,r2,-24540
   16e48:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   16e4c:	e0bffa17 	ldw	r2,-24(fp)
   16e50:	00c00144 	movi	r3,5
   16e54:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   16e58:	e0bffa17 	ldw	r2,-24(fp)
   16e5c:	e0fffe0b 	ldhu	r3,-8(fp)
   16e60:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   16e64:	e0bffa17 	ldw	r2,-24(fp)
   16e68:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   16e6c:	e0bffa17 	ldw	r2,-24(fp)
   16e70:	00c00fc4 	movi	r3,63
   16e74:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16e78:	e0bffa17 	ldw	r2,-24(fp)
   16e7c:	100002c5 	stb	zero,11(r2)
   16e80:	e0bff917 	ldw	r2,-28(fp)
   16e84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e88:	e0bffc17 	ldw	r2,-16(fp)
   16e8c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   16e90:	e0bfff17 	ldw	r2,-4(fp)
   16e94:	10000005 	stb	zero,0(r2)
   16e98:	00000706 	br	16eb8 <OSFlagCreate+0x114>
   16e9c:	e0bff917 	ldw	r2,-28(fp)
   16ea0:	e0bffd15 	stw	r2,-12(fp)
   16ea4:	e0bffd17 	ldw	r2,-12(fp)
   16ea8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   16eac:	e0bfff17 	ldw	r2,-4(fp)
   16eb0:	00c01c84 	movi	r3,114
   16eb4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   16eb8:	e0bffa17 	ldw	r2,-24(fp)
}
   16ebc:	e037883a 	mov	sp,fp
   16ec0:	df000017 	ldw	fp,0(sp)
   16ec4:	dec00104 	addi	sp,sp,4
   16ec8:	f800283a 	ret

00016ecc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   16ecc:	defff204 	addi	sp,sp,-56
   16ed0:	dfc00d15 	stw	ra,52(sp)
   16ed4:	df000c15 	stw	fp,48(sp)
   16ed8:	df000c04 	addi	fp,sp,48
   16edc:	e13ffd15 	stw	r4,-12(fp)
   16ee0:	2805883a 	mov	r2,r5
   16ee4:	e1bfff15 	stw	r6,-4(fp)
   16ee8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16eec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16ef0:	e0bfff17 	ldw	r2,-4(fp)
   16ef4:	1000021e 	bne	r2,zero,16f00 <OSFlagDel+0x34>
        return (pgrp);
   16ef8:	e0bffd17 	ldw	r2,-12(fp)
   16efc:	00008a06 	br	17128 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16f00:	e0bffd17 	ldw	r2,-12(fp)
   16f04:	1000051e 	bne	r2,zero,16f1c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16f08:	e0bfff17 	ldw	r2,-4(fp)
   16f0c:	00c01b84 	movi	r3,110
   16f10:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16f14:	e0bffd17 	ldw	r2,-12(fp)
   16f18:	00008306 	br	17128 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16f1c:	008000f4 	movhi	r2,3
   16f20:	10a80604 	addi	r2,r2,-24552
   16f24:	10800003 	ldbu	r2,0(r2)
   16f28:	10803fcc 	andi	r2,r2,255
   16f2c:	10000526 	beq	r2,zero,16f44 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16f30:	e0bfff17 	ldw	r2,-4(fp)
   16f34:	00c003c4 	movi	r3,15
   16f38:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16f3c:	e0bffd17 	ldw	r2,-12(fp)
   16f40:	00007906 	br	17128 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   16f44:	e0bffd17 	ldw	r2,-12(fp)
   16f48:	10800003 	ldbu	r2,0(r2)
   16f4c:	10803fcc 	andi	r2,r2,255
   16f50:	10800160 	cmpeqi	r2,r2,5
   16f54:	1000051e 	bne	r2,zero,16f6c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   16f58:	e0bfff17 	ldw	r2,-4(fp)
   16f5c:	00c00044 	movi	r3,1
   16f60:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16f64:	e0bffd17 	ldw	r2,-12(fp)
   16f68:	00006f06 	br	17128 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f6c:	0005303a 	rdctl	r2,status
   16f70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f74:	e0fff817 	ldw	r3,-32(fp)
   16f78:	00bfff84 	movi	r2,-2
   16f7c:	1884703a 	and	r2,r3,r2
   16f80:	1001703a 	wrctl	status,r2
  
  return context;
   16f84:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16f88:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   16f8c:	e0bffd17 	ldw	r2,-12(fp)
   16f90:	10800117 	ldw	r2,4(r2)
   16f94:	10000326 	beq	r2,zero,16fa4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16f98:	00800044 	movi	r2,1
   16f9c:	e0bff405 	stb	r2,-48(fp)
   16fa0:	00000106 	br	16fa8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16fa4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   16fa8:	e0bffe03 	ldbu	r2,-8(fp)
   16fac:	10000326 	beq	r2,zero,16fbc <OSFlagDel+0xf0>
   16fb0:	10800060 	cmpeqi	r2,r2,1
   16fb4:	1000271e 	bne	r2,zero,17054 <OSFlagDel+0x188>
   16fb8:	00005006 	br	170fc <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   16fbc:	e0bff403 	ldbu	r2,-48(fp)
   16fc0:	10001a1e 	bne	r2,zero,1702c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   16fc4:	e0bffd17 	ldw	r2,-12(fp)
   16fc8:	00c00fc4 	movi	r3,63
   16fcc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16fd8:	e0bffd17 	ldw	r2,-12(fp)
   16fdc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   16fe0:	008000f4 	movhi	r2,3
   16fe4:	10a80904 	addi	r2,r2,-24540
   16fe8:	10c00017 	ldw	r3,0(r2)
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   16ff4:	e0bffd17 	ldw	r2,-12(fp)
   16ff8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   16ffc:	008000f4 	movhi	r2,3
   17000:	10a80904 	addi	r2,r2,-24540
   17004:	e0fffd17 	ldw	r3,-12(fp)
   17008:	10c00015 	stw	r3,0(r2)
   1700c:	e0bff717 	ldw	r2,-36(fp)
   17010:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17014:	e0bff917 	ldw	r2,-28(fp)
   17018:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   17024:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   17028:	00003e06 	br	17124 <OSFlagDel+0x258>
   1702c:	e0bff717 	ldw	r2,-36(fp)
   17030:	e0bffa15 	stw	r2,-24(fp)
   17034:	e0bffa17 	ldw	r2,-24(fp)
   17038:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1703c:	e0bfff17 	ldw	r2,-4(fp)
   17040:	00c01244 	movi	r3,73
   17044:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   17048:	e0bffd17 	ldw	r2,-12(fp)
   1704c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   17050:	00003406 	br	17124 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17054:	e0bffd17 	ldw	r2,-12(fp)
   17058:	10800117 	ldw	r2,4(r2)
   1705c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   17060:	00000606 	br	1707c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   17064:	e13ff517 	ldw	r4,-44(fp)
   17068:	000b883a 	mov	r5,zero
   1706c:	00181080 	call	18108 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   17070:	e0bff517 	ldw	r2,-44(fp)
   17074:	10800017 	ldw	r2,0(r2)
   17078:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1707c:	e0bff517 	ldw	r2,-44(fp)
   17080:	103ff81e 	bne	r2,zero,17064 <__alt_mem_Flash_flash_data+0xf4017064>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   17084:	e0bffd17 	ldw	r2,-12(fp)
   17088:	00c00fc4 	movi	r3,63
   1708c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   17090:	e0bffd17 	ldw	r2,-12(fp)
   17094:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   17098:	e0bffd17 	ldw	r2,-12(fp)
   1709c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   170a0:	008000f4 	movhi	r2,3
   170a4:	10a80904 	addi	r2,r2,-24540
   170a8:	10c00017 	ldw	r3,0(r2)
   170ac:	e0bffd17 	ldw	r2,-12(fp)
   170b0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   170b4:	e0bffd17 	ldw	r2,-12(fp)
   170b8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   170bc:	008000f4 	movhi	r2,3
   170c0:	10a80904 	addi	r2,r2,-24540
   170c4:	e0fffd17 	ldw	r3,-12(fp)
   170c8:	10c00015 	stw	r3,0(r2)
   170cc:	e0bff717 	ldw	r2,-36(fp)
   170d0:	e0bffb15 	stw	r2,-20(fp)
   170d4:	e0bffb17 	ldw	r2,-20(fp)
   170d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   170dc:	e0bff403 	ldbu	r2,-48(fp)
   170e0:	10800058 	cmpnei	r2,r2,1
   170e4:	1000011e 	bne	r2,zero,170ec <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   170e8:	00162380 	call	16238 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   170ec:	e0bfff17 	ldw	r2,-4(fp)
   170f0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   170f4:	e03ff615 	stw	zero,-40(fp)
             break;
   170f8:	00000a06 	br	17124 <OSFlagDel+0x258>
   170fc:	e0bff717 	ldw	r2,-36(fp)
   17100:	e0bffc15 	stw	r2,-16(fp)
   17104:	e0bffc17 	ldw	r2,-16(fp)
   17108:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1710c:	e0bfff17 	ldw	r2,-4(fp)
   17110:	00c001c4 	movi	r3,7
   17114:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   17118:	e0bffd17 	ldw	r2,-12(fp)
   1711c:	e0bff615 	stw	r2,-40(fp)
             break;
   17120:	0001883a 	nop
    }
    return (pgrp_return);
   17124:	e0bff617 	ldw	r2,-40(fp)
}
   17128:	e037883a 	mov	sp,fp
   1712c:	dfc00117 	ldw	ra,4(sp)
   17130:	df000017 	ldw	fp,0(sp)
   17134:	dec00204 	addi	sp,sp,8
   17138:	f800283a 	ret

0001713c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1713c:	defff604 	addi	sp,sp,-40
   17140:	dfc00915 	stw	ra,36(sp)
   17144:	df000815 	stw	fp,32(sp)
   17148:	df000804 	addi	fp,sp,32
   1714c:	e13ffd15 	stw	r4,-12(fp)
   17150:	e17ffe15 	stw	r5,-8(fp)
   17154:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17158:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1715c:	e0bfff17 	ldw	r2,-4(fp)
   17160:	1000021e 	bne	r2,zero,1716c <OSFlagNameGet+0x30>
        return (0);
   17164:	0005883a 	mov	r2,zero
   17168:	00003b06 	br	17258 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1716c:	e0bffd17 	ldw	r2,-12(fp)
   17170:	1000051e 	bne	r2,zero,17188 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17174:	e0bfff17 	ldw	r2,-4(fp)
   17178:	00c01b84 	movi	r3,110
   1717c:	10c00005 	stb	r3,0(r2)
        return (0);
   17180:	0005883a 	mov	r2,zero
   17184:	00003406 	br	17258 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17188:	e0bffe17 	ldw	r2,-8(fp)
   1718c:	1000051e 	bne	r2,zero,171a4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17190:	e0bfff17 	ldw	r2,-4(fp)
   17194:	00c00304 	movi	r3,12
   17198:	10c00005 	stb	r3,0(r2)
        return (0);
   1719c:	0005883a 	mov	r2,zero
   171a0:	00002d06 	br	17258 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   171a4:	008000f4 	movhi	r2,3
   171a8:	10a80604 	addi	r2,r2,-24552
   171ac:	10800003 	ldbu	r2,0(r2)
   171b0:	10803fcc 	andi	r2,r2,255
   171b4:	10000526 	beq	r2,zero,171cc <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   171b8:	e0bfff17 	ldw	r2,-4(fp)
   171bc:	00c00444 	movi	r3,17
   171c0:	10c00005 	stb	r3,0(r2)
        return (0);
   171c4:	0005883a 	mov	r2,zero
   171c8:	00002306 	br	17258 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171cc:	0005303a 	rdctl	r2,status
   171d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171d4:	e0fffa17 	ldw	r3,-24(fp)
   171d8:	00bfff84 	movi	r2,-2
   171dc:	1884703a 	and	r2,r3,r2
   171e0:	1001703a 	wrctl	status,r2
  
  return context;
   171e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   171e8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   171ec:	e0bffd17 	ldw	r2,-12(fp)
   171f0:	10800003 	ldbu	r2,0(r2)
   171f4:	10803fcc 	andi	r2,r2,255
   171f8:	10800160 	cmpeqi	r2,r2,5
   171fc:	1000091e 	bne	r2,zero,17224 <OSFlagNameGet+0xe8>
   17200:	e0bff817 	ldw	r2,-32(fp)
   17204:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17208:	e0bffb17 	ldw	r2,-20(fp)
   1720c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   17210:	e0bfff17 	ldw	r2,-4(fp)
   17214:	00c00044 	movi	r3,1
   17218:	10c00005 	stb	r3,0(r2)
        return (0);
   1721c:	0005883a 	mov	r2,zero
   17220:	00000d06 	br	17258 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   17224:	e0bffd17 	ldw	r2,-12(fp)
   17228:	10800284 	addi	r2,r2,10
   1722c:	e13ffe17 	ldw	r4,-8(fp)
   17230:	100b883a 	mov	r5,r2
   17234:	00163740 	call	16374 <OS_StrCopy>
   17238:	e0bff905 	stb	r2,-28(fp)
   1723c:	e0bff817 	ldw	r2,-32(fp)
   17240:	e0bffc15 	stw	r2,-16(fp)
   17244:	e0bffc17 	ldw	r2,-16(fp)
   17248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1724c:	e0bfff17 	ldw	r2,-4(fp)
   17250:	10000005 	stb	zero,0(r2)
    return (len);
   17254:	e0bff903 	ldbu	r2,-28(fp)
}
   17258:	e037883a 	mov	sp,fp
   1725c:	dfc00117 	ldw	ra,4(sp)
   17260:	df000017 	ldw	fp,0(sp)
   17264:	dec00204 	addi	sp,sp,8
   17268:	f800283a 	ret

0001726c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1726c:	defff504 	addi	sp,sp,-44
   17270:	dfc00a15 	stw	ra,40(sp)
   17274:	df000915 	stw	fp,36(sp)
   17278:	df000904 	addi	fp,sp,36
   1727c:	e13ffd15 	stw	r4,-12(fp)
   17280:	e17ffe15 	stw	r5,-8(fp)
   17284:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17288:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1728c:	e0bfff17 	ldw	r2,-4(fp)
   17290:	1000011e 	bne	r2,zero,17298 <OSFlagNameSet+0x2c>
        return;
   17294:	00004406 	br	173a8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   17298:	e0bffd17 	ldw	r2,-12(fp)
   1729c:	1000041e 	bne	r2,zero,172b0 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   172a0:	e0bfff17 	ldw	r2,-4(fp)
   172a4:	00c01b84 	movi	r3,110
   172a8:	10c00005 	stb	r3,0(r2)
        return;
   172ac:	00003e06 	br	173a8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   172b0:	e0bffe17 	ldw	r2,-8(fp)
   172b4:	1000041e 	bne	r2,zero,172c8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   172b8:	e0bfff17 	ldw	r2,-4(fp)
   172bc:	00c00304 	movi	r3,12
   172c0:	10c00005 	stb	r3,0(r2)
        return;
   172c4:	00003806 	br	173a8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   172c8:	008000f4 	movhi	r2,3
   172cc:	10a80604 	addi	r2,r2,-24552
   172d0:	10800003 	ldbu	r2,0(r2)
   172d4:	10803fcc 	andi	r2,r2,255
   172d8:	10000426 	beq	r2,zero,172ec <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   172dc:	e0bfff17 	ldw	r2,-4(fp)
   172e0:	00c00484 	movi	r3,18
   172e4:	10c00005 	stb	r3,0(r2)
        return;
   172e8:	00002f06 	br	173a8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172ec:	0005303a 	rdctl	r2,status
   172f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172f4:	e0fff917 	ldw	r3,-28(fp)
   172f8:	00bfff84 	movi	r2,-2
   172fc:	1884703a 	and	r2,r3,r2
   17300:	1001703a 	wrctl	status,r2
  
  return context;
   17304:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17308:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1730c:	e0bffd17 	ldw	r2,-12(fp)
   17310:	10800003 	ldbu	r2,0(r2)
   17314:	10803fcc 	andi	r2,r2,255
   17318:	10800160 	cmpeqi	r2,r2,5
   1731c:	1000081e 	bne	r2,zero,17340 <OSFlagNameSet+0xd4>
   17320:	e0bff717 	ldw	r2,-36(fp)
   17324:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17328:	e0bffa17 	ldw	r2,-24(fp)
   1732c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   17330:	e0bfff17 	ldw	r2,-4(fp)
   17334:	00c00044 	movi	r3,1
   17338:	10c00005 	stb	r3,0(r2)
        return;
   1733c:	00001a06 	br	173a8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17340:	e13ffe17 	ldw	r4,-8(fp)
   17344:	00163e80 	call	163e8 <OS_StrLen>
   17348:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1734c:	e0bff803 	ldbu	r2,-32(fp)
   17350:	10800830 	cmpltui	r2,r2,32
   17354:	1000081e 	bne	r2,zero,17378 <OSFlagNameSet+0x10c>
   17358:	e0bff717 	ldw	r2,-36(fp)
   1735c:	e0bffb15 	stw	r2,-20(fp)
   17360:	e0bffb17 	ldw	r2,-20(fp)
   17364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   17368:	e0bfff17 	ldw	r2,-4(fp)
   1736c:	00c01cc4 	movi	r3,115
   17370:	10c00005 	stb	r3,0(r2)
        return;
   17374:	00000c06 	br	173a8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   17378:	e0bffd17 	ldw	r2,-12(fp)
   1737c:	10800284 	addi	r2,r2,10
   17380:	1009883a 	mov	r4,r2
   17384:	e17ffe17 	ldw	r5,-8(fp)
   17388:	00163740 	call	16374 <OS_StrCopy>
   1738c:	e0bff717 	ldw	r2,-36(fp)
   17390:	e0bffc15 	stw	r2,-16(fp)
   17394:	e0bffc17 	ldw	r2,-16(fp)
   17398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1739c:	e0bfff17 	ldw	r2,-4(fp)
   173a0:	10000005 	stb	zero,0(r2)
    return;
   173a4:	0001883a 	nop
}
   173a8:	e037883a 	mov	sp,fp
   173ac:	dfc00117 	ldw	ra,4(sp)
   173b0:	df000017 	ldw	fp,0(sp)
   173b4:	dec00204 	addi	sp,sp,8
   173b8:	f800283a 	ret

000173bc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   173bc:	deffe204 	addi	sp,sp,-120
   173c0:	dfc01d15 	stw	ra,116(sp)
   173c4:	df001c15 	stw	fp,112(sp)
   173c8:	df001c04 	addi	fp,sp,112
   173cc:	e13ffc15 	stw	r4,-16(fp)
   173d0:	2809883a 	mov	r4,r5
   173d4:	3007883a 	mov	r3,r6
   173d8:	3805883a 	mov	r2,r7
   173dc:	e13ffd0d 	sth	r4,-12(fp)
   173e0:	e0fffe05 	stb	r3,-8(fp)
   173e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   173e8:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   173ec:	e0800217 	ldw	r2,8(fp)
   173f0:	1000021e 	bne	r2,zero,173fc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   173f4:	0005883a 	mov	r2,zero
   173f8:	00016706 	br	17998 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   173fc:	e0bffc17 	ldw	r2,-16(fp)
   17400:	1000051e 	bne	r2,zero,17418 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17404:	e0800217 	ldw	r2,8(fp)
   17408:	00c01b84 	movi	r3,110
   1740c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17410:	0005883a 	mov	r2,zero
   17414:	00016006 	br	17998 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17418:	008000f4 	movhi	r2,3
   1741c:	10a80604 	addi	r2,r2,-24552
   17420:	10800003 	ldbu	r2,0(r2)
   17424:	10803fcc 	andi	r2,r2,255
   17428:	10000526 	beq	r2,zero,17440 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1742c:	e0800217 	ldw	r2,8(fp)
   17430:	00c00084 	movi	r3,2
   17434:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17438:	0005883a 	mov	r2,zero
   1743c:	00015606 	br	17998 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   17440:	008000f4 	movhi	r2,3
   17444:	10a7f804 	addi	r2,r2,-24608
   17448:	10800003 	ldbu	r2,0(r2)
   1744c:	10803fcc 	andi	r2,r2,255
   17450:	10000526 	beq	r2,zero,17468 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   17454:	e0800217 	ldw	r2,8(fp)
   17458:	00c00344 	movi	r3,13
   1745c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17460:	0005883a 	mov	r2,zero
   17464:	00014c06 	br	17998 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   17468:	e0bffc17 	ldw	r2,-16(fp)
   1746c:	10800003 	ldbu	r2,0(r2)
   17470:	10803fcc 	andi	r2,r2,255
   17474:	10800160 	cmpeqi	r2,r2,5
   17478:	1000051e 	bne	r2,zero,17490 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   1747c:	e0800217 	ldw	r2,8(fp)
   17480:	00c00044 	movi	r3,1
   17484:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17488:	0005883a 	mov	r2,zero
   1748c:	00014206 	br	17998 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   17490:	e0fffe03 	ldbu	r3,-8(fp)
   17494:	00bfe004 	movi	r2,-128
   17498:	1884703a 	and	r2,r3,r2
   1749c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   174a0:	e0bfe703 	ldbu	r2,-100(fp)
   174a4:	10000626 	beq	r2,zero,174c0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   174a8:	e0bffe03 	ldbu	r2,-8(fp)
   174ac:	10801fcc 	andi	r2,r2,127
   174b0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   174b4:	00800044 	movi	r2,1
   174b8:	e0bfe505 	stb	r2,-108(fp)
   174bc:	00000106 	br	174c4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   174c0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174c4:	0005303a 	rdctl	r2,status
   174c8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174cc:	e0ffe917 	ldw	r3,-92(fp)
   174d0:	00bfff84 	movi	r2,-2
   174d4:	1884703a 	and	r2,r3,r2
   174d8:	1001703a 	wrctl	status,r2
  
  return context;
   174dc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   174e0:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   174e4:	e0bffe03 	ldbu	r2,-8(fp)
   174e8:	10c00060 	cmpeqi	r3,r2,1
   174ec:	1800921e 	bne	r3,zero,17738 <OSFlagPend+0x37c>
   174f0:	10c00088 	cmpgei	r3,r2,2
   174f4:	1800021e 	bne	r3,zero,17500 <OSFlagPend+0x144>
   174f8:	10006126 	beq	r2,zero,17680 <OSFlagPend+0x2c4>
   174fc:	0000bb06 	br	177ec <OSFlagPend+0x430>
   17500:	10c000a0 	cmpeqi	r3,r2,2
   17504:	1800031e 	bne	r3,zero,17514 <OSFlagPend+0x158>
   17508:	108000e0 	cmpeqi	r2,r2,3
   1750c:	10002f1e 	bne	r2,zero,175cc <OSFlagPend+0x210>
   17510:	0000b606 	br	177ec <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   17514:	e0bffc17 	ldw	r2,-16(fp)
   17518:	10c0020b 	ldhu	r3,8(r2)
   1751c:	e0bffd0b 	ldhu	r2,-12(fp)
   17520:	1884703a 	and	r2,r3,r2
   17524:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   17528:	e0ffe78b 	ldhu	r3,-98(fp)
   1752c:	e0bffd0b 	ldhu	r2,-12(fp)
   17530:	1880191e 	bne	r3,r2,17598 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   17534:	e0bfe503 	ldbu	r2,-108(fp)
   17538:	10800058 	cmpnei	r2,r2,1
   1753c:	1000091e 	bne	r2,zero,17564 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   17540:	e0bffc17 	ldw	r2,-16(fp)
   17544:	1080020b 	ldhu	r2,8(r2)
   17548:	1007883a 	mov	r3,r2
   1754c:	e0bfe78b 	ldhu	r2,-98(fp)
   17550:	0084303a 	nor	r2,zero,r2
   17554:	1884703a 	and	r2,r3,r2
   17558:	1007883a 	mov	r3,r2
   1755c:	e0bffc17 	ldw	r2,-16(fp)
   17560:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17564:	008000f4 	movhi	r2,3
   17568:	10a80704 	addi	r2,r2,-24548
   1756c:	10800017 	ldw	r2,0(r2)
   17570:	e0ffe78b 	ldhu	r3,-98(fp)
   17574:	10c00b0d 	sth	r3,44(r2)
   17578:	e0bfe617 	ldw	r2,-104(fp)
   1757c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17580:	e0bfea17 	ldw	r2,-88(fp)
   17584:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   17588:	e0800217 	ldw	r2,8(fp)
   1758c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17590:	e0bfe78b 	ldhu	r2,-98(fp)
   17594:	00010006 	br	17998 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17598:	e1bffd0b 	ldhu	r6,-12(fp)
   1759c:	e0fffe03 	ldbu	r3,-8(fp)
   175a0:	e0bfff0b 	ldhu	r2,-4(fp)
   175a4:	e17ff704 	addi	r5,fp,-36
   175a8:	d8800015 	stw	r2,0(sp)
   175ac:	e13ffc17 	ldw	r4,-16(fp)
   175b0:	180f883a 	mov	r7,r3
   175b4:	0017e600 	call	17e60 <OS_FlagBlock>
   175b8:	e0bfe617 	ldw	r2,-104(fp)
   175bc:	e0bfeb15 	stw	r2,-84(fp)
   175c0:	e0bfeb17 	ldw	r2,-84(fp)
   175c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   175c8:	00009206 	br	17814 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   175cc:	e0bffc17 	ldw	r2,-16(fp)
   175d0:	10c0020b 	ldhu	r3,8(r2)
   175d4:	e0bffd0b 	ldhu	r2,-12(fp)
   175d8:	1884703a 	and	r2,r3,r2
   175dc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   175e0:	e0bfe78b 	ldhu	r2,-98(fp)
   175e4:	10001926 	beq	r2,zero,1764c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   175e8:	e0bfe503 	ldbu	r2,-108(fp)
   175ec:	10800058 	cmpnei	r2,r2,1
   175f0:	1000091e 	bne	r2,zero,17618 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   175f4:	e0bffc17 	ldw	r2,-16(fp)
   175f8:	1080020b 	ldhu	r2,8(r2)
   175fc:	1007883a 	mov	r3,r2
   17600:	e0bfe78b 	ldhu	r2,-98(fp)
   17604:	0084303a 	nor	r2,zero,r2
   17608:	1884703a 	and	r2,r3,r2
   1760c:	1007883a 	mov	r3,r2
   17610:	e0bffc17 	ldw	r2,-16(fp)
   17614:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17618:	008000f4 	movhi	r2,3
   1761c:	10a80704 	addi	r2,r2,-24548
   17620:	10800017 	ldw	r2,0(r2)
   17624:	e0ffe78b 	ldhu	r3,-98(fp)
   17628:	10c00b0d 	sth	r3,44(r2)
   1762c:	e0bfe617 	ldw	r2,-104(fp)
   17630:	e0bfec15 	stw	r2,-80(fp)
   17634:	e0bfec17 	ldw	r2,-80(fp)
   17638:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1763c:	e0800217 	ldw	r2,8(fp)
   17640:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   17644:	e0bfe78b 	ldhu	r2,-98(fp)
   17648:	0000d306 	br	17998 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1764c:	e1bffd0b 	ldhu	r6,-12(fp)
   17650:	e0fffe03 	ldbu	r3,-8(fp)
   17654:	e0bfff0b 	ldhu	r2,-4(fp)
   17658:	e17ff704 	addi	r5,fp,-36
   1765c:	d8800015 	stw	r2,0(sp)
   17660:	e13ffc17 	ldw	r4,-16(fp)
   17664:	180f883a 	mov	r7,r3
   17668:	0017e600 	call	17e60 <OS_FlagBlock>
   1766c:	e0bfe617 	ldw	r2,-104(fp)
   17670:	e0bfed15 	stw	r2,-76(fp)
   17674:	e0bfed17 	ldw	r2,-76(fp)
   17678:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1767c:	00006506 	br	17814 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   17680:	e0bffc17 	ldw	r2,-16(fp)
   17684:	1080020b 	ldhu	r2,8(r2)
   17688:	0084303a 	nor	r2,zero,r2
   1768c:	1007883a 	mov	r3,r2
   17690:	e0bffd0b 	ldhu	r2,-12(fp)
   17694:	1884703a 	and	r2,r3,r2
   17698:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1769c:	e0ffe78b 	ldhu	r3,-98(fp)
   176a0:	e0bffd0b 	ldhu	r2,-12(fp)
   176a4:	1880171e 	bne	r3,r2,17704 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   176a8:	e0bfe503 	ldbu	r2,-108(fp)
   176ac:	10800058 	cmpnei	r2,r2,1
   176b0:	1000071e 	bne	r2,zero,176d0 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   176b4:	e0bffc17 	ldw	r2,-16(fp)
   176b8:	10c0020b 	ldhu	r3,8(r2)
   176bc:	e0bfe78b 	ldhu	r2,-98(fp)
   176c0:	1884b03a 	or	r2,r3,r2
   176c4:	1007883a 	mov	r3,r2
   176c8:	e0bffc17 	ldw	r2,-16(fp)
   176cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   176d0:	008000f4 	movhi	r2,3
   176d4:	10a80704 	addi	r2,r2,-24548
   176d8:	10800017 	ldw	r2,0(r2)
   176dc:	e0ffe78b 	ldhu	r3,-98(fp)
   176e0:	10c00b0d 	sth	r3,44(r2)
   176e4:	e0bfe617 	ldw	r2,-104(fp)
   176e8:	e0bfee15 	stw	r2,-72(fp)
   176ec:	e0bfee17 	ldw	r2,-72(fp)
   176f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   176f4:	e0800217 	ldw	r2,8(fp)
   176f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   176fc:	e0bfe78b 	ldhu	r2,-98(fp)
   17700:	0000a506 	br	17998 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   17704:	e1bffd0b 	ldhu	r6,-12(fp)
   17708:	e0fffe03 	ldbu	r3,-8(fp)
   1770c:	e0bfff0b 	ldhu	r2,-4(fp)
   17710:	e17ff704 	addi	r5,fp,-36
   17714:	d8800015 	stw	r2,0(sp)
   17718:	e13ffc17 	ldw	r4,-16(fp)
   1771c:	180f883a 	mov	r7,r3
   17720:	0017e600 	call	17e60 <OS_FlagBlock>
   17724:	e0bfe617 	ldw	r2,-104(fp)
   17728:	e0bfef15 	stw	r2,-68(fp)
   1772c:	e0bfef17 	ldw	r2,-68(fp)
   17730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   17734:	00003706 	br	17814 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   17738:	e0bffc17 	ldw	r2,-16(fp)
   1773c:	1080020b 	ldhu	r2,8(r2)
   17740:	0084303a 	nor	r2,zero,r2
   17744:	1007883a 	mov	r3,r2
   17748:	e0bffd0b 	ldhu	r2,-12(fp)
   1774c:	1884703a 	and	r2,r3,r2
   17750:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   17754:	e0bfe78b 	ldhu	r2,-98(fp)
   17758:	10001726 	beq	r2,zero,177b8 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1775c:	e0bfe503 	ldbu	r2,-108(fp)
   17760:	10800058 	cmpnei	r2,r2,1
   17764:	1000071e 	bne	r2,zero,17784 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   17768:	e0bffc17 	ldw	r2,-16(fp)
   1776c:	10c0020b 	ldhu	r3,8(r2)
   17770:	e0bfe78b 	ldhu	r2,-98(fp)
   17774:	1884b03a 	or	r2,r3,r2
   17778:	1007883a 	mov	r3,r2
   1777c:	e0bffc17 	ldw	r2,-16(fp)
   17780:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   17784:	008000f4 	movhi	r2,3
   17788:	10a80704 	addi	r2,r2,-24548
   1778c:	10800017 	ldw	r2,0(r2)
   17790:	e0ffe78b 	ldhu	r3,-98(fp)
   17794:	10c00b0d 	sth	r3,44(r2)
   17798:	e0bfe617 	ldw	r2,-104(fp)
   1779c:	e0bff015 	stw	r2,-64(fp)
   177a0:	e0bff017 	ldw	r2,-64(fp)
   177a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   177a8:	e0800217 	ldw	r2,8(fp)
   177ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   177b0:	e0bfe78b 	ldhu	r2,-98(fp)
   177b4:	00007806 	br	17998 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   177b8:	e1bffd0b 	ldhu	r6,-12(fp)
   177bc:	e0fffe03 	ldbu	r3,-8(fp)
   177c0:	e0bfff0b 	ldhu	r2,-4(fp)
   177c4:	e17ff704 	addi	r5,fp,-36
   177c8:	d8800015 	stw	r2,0(sp)
   177cc:	e13ffc17 	ldw	r4,-16(fp)
   177d0:	180f883a 	mov	r7,r3
   177d4:	0017e600 	call	17e60 <OS_FlagBlock>
   177d8:	e0bfe617 	ldw	r2,-104(fp)
   177dc:	e0bff115 	stw	r2,-60(fp)
   177e0:	e0bff117 	ldw	r2,-60(fp)
   177e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   177e8:	00000a06 	br	17814 <OSFlagPend+0x458>
   177ec:	e0bfe617 	ldw	r2,-104(fp)
   177f0:	e0bff215 	stw	r2,-56(fp)
   177f4:	e0bff217 	ldw	r2,-56(fp)
   177f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   177fc:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   17800:	e0800217 	ldw	r2,8(fp)
   17804:	00c01bc4 	movi	r3,111
   17808:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1780c:	e0bfe78b 	ldhu	r2,-98(fp)
   17810:	00006106 	br	17998 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   17814:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17818:	0005303a 	rdctl	r2,status
   1781c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17820:	e0fff317 	ldw	r3,-52(fp)
   17824:	00bfff84 	movi	r2,-2
   17828:	1884703a 	and	r2,r3,r2
   1782c:	1001703a 	wrctl	status,r2
  
  return context;
   17830:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   17834:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   17838:	008000f4 	movhi	r2,3
   1783c:	10a80704 	addi	r2,r2,-24548
   17840:	10800017 	ldw	r2,0(r2)
   17844:	10800c43 	ldbu	r2,49(r2)
   17848:	10803fcc 	andi	r2,r2,255
   1784c:	10002226 	beq	r2,zero,178d8 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   17850:	008000f4 	movhi	r2,3
   17854:	10a80704 	addi	r2,r2,-24548
   17858:	10800017 	ldw	r2,0(r2)
   1785c:	10800c43 	ldbu	r2,49(r2)
   17860:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17864:	008000f4 	movhi	r2,3
   17868:	10a80704 	addi	r2,r2,-24548
   1786c:	10800017 	ldw	r2,0(r2)
   17870:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   17874:	e0bff704 	addi	r2,fp,-36
   17878:	1009883a 	mov	r4,r2
   1787c:	00182180 	call	18218 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   17880:	008000f4 	movhi	r2,3
   17884:	10a80704 	addi	r2,r2,-24548
   17888:	10800017 	ldw	r2,0(r2)
   1788c:	10000c05 	stb	zero,48(r2)
   17890:	e0bfe617 	ldw	r2,-104(fp)
   17894:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17898:	e0bff417 	ldw	r2,-48(fp)
   1789c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   178a0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   178a4:	e0bfe803 	ldbu	r2,-96(fp)
   178a8:	108000a0 	cmpeqi	r2,r2,2
   178ac:	10000426 	beq	r2,zero,178c0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   178b0:	e0800217 	ldw	r2,8(fp)
   178b4:	00c00384 	movi	r3,14
   178b8:	10c00005 	stb	r3,0(r2)
                 break;
   178bc:	00000406 	br	178d0 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   178c0:	e0800217 	ldw	r2,8(fp)
   178c4:	00c00284 	movi	r3,10
   178c8:	10c00005 	stb	r3,0(r2)
                 break;
   178cc:	0001883a 	nop
        }
        return (flags_rdy);
   178d0:	e0bfe78b 	ldhu	r2,-98(fp)
   178d4:	00003006 	br	17998 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   178d8:	008000f4 	movhi	r2,3
   178dc:	10a80704 	addi	r2,r2,-24548
   178e0:	10800017 	ldw	r2,0(r2)
   178e4:	10800b0b 	ldhu	r2,44(r2)
   178e8:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   178ec:	e0bfe503 	ldbu	r2,-108(fp)
   178f0:	10800058 	cmpnei	r2,r2,1
   178f4:	1000211e 	bne	r2,zero,1797c <OSFlagPend+0x5c0>
        switch (wait_type) {
   178f8:	e0bffe03 	ldbu	r2,-8(fp)
   178fc:	10001616 	blt	r2,zero,17958 <OSFlagPend+0x59c>
   17900:	10c00090 	cmplti	r3,r2,2
   17904:	18000c1e 	bne	r3,zero,17938 <OSFlagPend+0x57c>
   17908:	10800108 	cmpgei	r2,r2,4
   1790c:	1000121e 	bne	r2,zero,17958 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   17910:	e0bffc17 	ldw	r2,-16(fp)
   17914:	1080020b 	ldhu	r2,8(r2)
   17918:	1007883a 	mov	r3,r2
   1791c:	e0bfe78b 	ldhu	r2,-98(fp)
   17920:	0084303a 	nor	r2,zero,r2
   17924:	1884703a 	and	r2,r3,r2
   17928:	1007883a 	mov	r3,r2
   1792c:	e0bffc17 	ldw	r2,-16(fp)
   17930:	10c0020d 	sth	r3,8(r2)
                 break;
   17934:	00001106 	br	1797c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   17938:	e0bffc17 	ldw	r2,-16(fp)
   1793c:	10c0020b 	ldhu	r3,8(r2)
   17940:	e0bfe78b 	ldhu	r2,-98(fp)
   17944:	1884b03a 	or	r2,r3,r2
   17948:	1007883a 	mov	r3,r2
   1794c:	e0bffc17 	ldw	r2,-16(fp)
   17950:	10c0020d 	sth	r3,8(r2)
                 break;
   17954:	00000906 	br	1797c <OSFlagPend+0x5c0>
   17958:	e0bfe617 	ldw	r2,-104(fp)
   1795c:	e0bff515 	stw	r2,-44(fp)
   17960:	e0bff517 	ldw	r2,-44(fp)
   17964:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   17968:	e0800217 	ldw	r2,8(fp)
   1796c:	00c01bc4 	movi	r3,111
   17970:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17974:	0005883a 	mov	r2,zero
   17978:	00000706 	br	17998 <OSFlagPend+0x5dc>
   1797c:	e0bfe617 	ldw	r2,-104(fp)
   17980:	e0bff615 	stw	r2,-40(fp)
   17984:	e0bff617 	ldw	r2,-40(fp)
   17988:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1798c:	e0800217 	ldw	r2,8(fp)
   17990:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   17994:	e0bfe78b 	ldhu	r2,-98(fp)
}
   17998:	e037883a 	mov	sp,fp
   1799c:	dfc00117 	ldw	ra,4(sp)
   179a0:	df000017 	ldw	fp,0(sp)
   179a4:	dec00204 	addi	sp,sp,8
   179a8:	f800283a 	ret

000179ac <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   179ac:	defffb04 	addi	sp,sp,-20
   179b0:	df000415 	stw	fp,16(sp)
   179b4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   179b8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179bc:	0005303a 	rdctl	r2,status
   179c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179c4:	e0fffe17 	ldw	r3,-8(fp)
   179c8:	00bfff84 	movi	r2,-2
   179cc:	1884703a 	and	r2,r3,r2
   179d0:	1001703a 	wrctl	status,r2
  
  return context;
   179d4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   179d8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   179dc:	008000f4 	movhi	r2,3
   179e0:	10a80704 	addi	r2,r2,-24548
   179e4:	10800017 	ldw	r2,0(r2)
   179e8:	10800b0b 	ldhu	r2,44(r2)
   179ec:	e0bffd0d 	sth	r2,-12(fp)
   179f0:	e0bffc17 	ldw	r2,-16(fp)
   179f4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   179f8:	e0bfff17 	ldw	r2,-4(fp)
   179fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   17a00:	e0bffd0b 	ldhu	r2,-12(fp)
}
   17a04:	e037883a 	mov	sp,fp
   17a08:	df000017 	ldw	fp,0(sp)
   17a0c:	dec00104 	addi	sp,sp,4
   17a10:	f800283a 	ret

00017a14 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   17a14:	deffef04 	addi	sp,sp,-68
   17a18:	dfc01015 	stw	ra,64(sp)
   17a1c:	df000f15 	stw	fp,60(sp)
   17a20:	df000f04 	addi	fp,sp,60
   17a24:	e13ffc15 	stw	r4,-16(fp)
   17a28:	2807883a 	mov	r3,r5
   17a2c:	3005883a 	mov	r2,r6
   17a30:	e1ffff15 	stw	r7,-4(fp)
   17a34:	e0fffd0d 	sth	r3,-12(fp)
   17a38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   17a3c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   17a40:	e0bfff17 	ldw	r2,-4(fp)
   17a44:	1000021e 	bne	r2,zero,17a50 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   17a48:	0005883a 	mov	r2,zero
   17a4c:	0000ce06 	br	17d88 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   17a50:	e0bffc17 	ldw	r2,-16(fp)
   17a54:	1000051e 	bne	r2,zero,17a6c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17a58:	e0bfff17 	ldw	r2,-4(fp)
   17a5c:	00c01b84 	movi	r3,110
   17a60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17a64:	0005883a 	mov	r2,zero
   17a68:	0000c706 	br	17d88 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   17a6c:	e0bffc17 	ldw	r2,-16(fp)
   17a70:	10800003 	ldbu	r2,0(r2)
   17a74:	10803fcc 	andi	r2,r2,255
   17a78:	10800160 	cmpeqi	r2,r2,5
   17a7c:	1000051e 	bne	r2,zero,17a94 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   17a80:	e0bfff17 	ldw	r2,-4(fp)
   17a84:	00c00044 	movi	r3,1
   17a88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17a8c:	0005883a 	mov	r2,zero
   17a90:	0000bd06 	br	17d88 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a94:	0005303a 	rdctl	r2,status
   17a98:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a9c:	e0fff617 	ldw	r3,-40(fp)
   17aa0:	00bfff84 	movi	r2,-2
   17aa4:	1884703a 	and	r2,r3,r2
   17aa8:	1001703a 	wrctl	status,r2
  
  return context;
   17aac:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   17ab0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   17ab4:	e0bffe03 	ldbu	r2,-8(fp)
   17ab8:	10000326 	beq	r2,zero,17ac8 <OSFlagPost+0xb4>
   17abc:	10800060 	cmpeqi	r2,r2,1
   17ac0:	10000b1e 	bne	r2,zero,17af0 <OSFlagPost+0xdc>
   17ac4:	00001206 	br	17b10 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   17ac8:	e0bffc17 	ldw	r2,-16(fp)
   17acc:	1080020b 	ldhu	r2,8(r2)
   17ad0:	1007883a 	mov	r3,r2
   17ad4:	e0bffd0b 	ldhu	r2,-12(fp)
   17ad8:	0084303a 	nor	r2,zero,r2
   17adc:	1884703a 	and	r2,r3,r2
   17ae0:	1007883a 	mov	r3,r2
   17ae4:	e0bffc17 	ldw	r2,-16(fp)
   17ae8:	10c0020d 	sth	r3,8(r2)
             break;
   17aec:	00001106 	br	17b34 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   17af0:	e0bffc17 	ldw	r2,-16(fp)
   17af4:	10c0020b 	ldhu	r3,8(r2)
   17af8:	e0bffd0b 	ldhu	r2,-12(fp)
   17afc:	1884b03a 	or	r2,r3,r2
   17b00:	1007883a 	mov	r3,r2
   17b04:	e0bffc17 	ldw	r2,-16(fp)
   17b08:	10c0020d 	sth	r3,8(r2)
             break;
   17b0c:	00000906 	br	17b34 <OSFlagPost+0x120>
   17b10:	e0bff317 	ldw	r2,-52(fp)
   17b14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b18:	e0bff717 	ldw	r2,-36(fp)
   17b1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   17b20:	e0bfff17 	ldw	r2,-4(fp)
   17b24:	00c01c44 	movi	r3,113
   17b28:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   17b2c:	0005883a 	mov	r2,zero
   17b30:	00009506 	br	17d88 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   17b34:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17b38:	e0bffc17 	ldw	r2,-16(fp)
   17b3c:	10800117 	ldw	r2,4(r2)
   17b40:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   17b44:	00007406 	br	17d18 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   17b48:	e0bff117 	ldw	r2,-60(fp)
   17b4c:	10800483 	ldbu	r2,18(r2)
   17b50:	10803fcc 	andi	r2,r2,255
   17b54:	10c00060 	cmpeqi	r3,r2,1
   17b58:	18004d1e 	bne	r3,zero,17c90 <OSFlagPost+0x27c>
   17b5c:	10c00088 	cmpgei	r3,r2,2
   17b60:	1800021e 	bne	r3,zero,17b6c <OSFlagPost+0x158>
   17b64:	10003126 	beq	r2,zero,17c2c <OSFlagPost+0x218>
   17b68:	00005f06 	br	17ce8 <OSFlagPost+0x2d4>
   17b6c:	10c000a0 	cmpeqi	r3,r2,2
   17b70:	1800031e 	bne	r3,zero,17b80 <OSFlagPost+0x16c>
   17b74:	108000e0 	cmpeqi	r2,r2,3
   17b78:	1000181e 	bne	r2,zero,17bdc <OSFlagPost+0x1c8>
   17b7c:	00005a06 	br	17ce8 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17b80:	e0bffc17 	ldw	r2,-16(fp)
   17b84:	10c0020b 	ldhu	r3,8(r2)
   17b88:	e0bff117 	ldw	r2,-60(fp)
   17b8c:	1080040b 	ldhu	r2,16(r2)
   17b90:	1884703a 	and	r2,r3,r2
   17b94:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   17b98:	e0bff117 	ldw	r2,-60(fp)
   17b9c:	1080040b 	ldhu	r2,16(r2)
   17ba0:	10ffffcc 	andi	r3,r2,65535
   17ba4:	e0bff40b 	ldhu	r2,-48(fp)
   17ba8:	18800b1e 	bne	r3,r2,17bd8 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17bac:	e0bff40b 	ldhu	r2,-48(fp)
   17bb0:	e13ff117 	ldw	r4,-60(fp)
   17bb4:	100b883a 	mov	r5,r2
   17bb8:	00181080 	call	18108 <OS_FlagTaskRdy>
   17bbc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17bc0:	e0bff483 	ldbu	r2,-46(fp)
   17bc4:	10800058 	cmpnei	r2,r2,1
   17bc8:	1000031e 	bne	r2,zero,17bd8 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17bcc:	00800044 	movi	r2,1
   17bd0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17bd4:	00004d06 	br	17d0c <OSFlagPost+0x2f8>
   17bd8:	00004c06 	br	17d0c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17bdc:	e0bffc17 	ldw	r2,-16(fp)
   17be0:	10c0020b 	ldhu	r3,8(r2)
   17be4:	e0bff117 	ldw	r2,-60(fp)
   17be8:	1080040b 	ldhu	r2,16(r2)
   17bec:	1884703a 	and	r2,r3,r2
   17bf0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   17bf4:	e0bff40b 	ldhu	r2,-48(fp)
   17bf8:	10000b26 	beq	r2,zero,17c28 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17bfc:	e0bff40b 	ldhu	r2,-48(fp)
   17c00:	e13ff117 	ldw	r4,-60(fp)
   17c04:	100b883a 	mov	r5,r2
   17c08:	00181080 	call	18108 <OS_FlagTaskRdy>
   17c0c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17c10:	e0bff483 	ldbu	r2,-46(fp)
   17c14:	10800058 	cmpnei	r2,r2,1
   17c18:	1000031e 	bne	r2,zero,17c28 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17c1c:	00800044 	movi	r2,1
   17c20:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17c24:	00003906 	br	17d0c <OSFlagPost+0x2f8>
   17c28:	00003806 	br	17d0c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17c2c:	e0bffc17 	ldw	r2,-16(fp)
   17c30:	1080020b 	ldhu	r2,8(r2)
   17c34:	0084303a 	nor	r2,zero,r2
   17c38:	1007883a 	mov	r3,r2
   17c3c:	e0bff117 	ldw	r2,-60(fp)
   17c40:	1080040b 	ldhu	r2,16(r2)
   17c44:	1884703a 	and	r2,r3,r2
   17c48:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   17c4c:	e0bff117 	ldw	r2,-60(fp)
   17c50:	1080040b 	ldhu	r2,16(r2)
   17c54:	10ffffcc 	andi	r3,r2,65535
   17c58:	e0bff40b 	ldhu	r2,-48(fp)
   17c5c:	18800b1e 	bne	r3,r2,17c8c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17c60:	e0bff40b 	ldhu	r2,-48(fp)
   17c64:	e13ff117 	ldw	r4,-60(fp)
   17c68:	100b883a 	mov	r5,r2
   17c6c:	00181080 	call	18108 <OS_FlagTaskRdy>
   17c70:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17c74:	e0bff483 	ldbu	r2,-46(fp)
   17c78:	10800058 	cmpnei	r2,r2,1
   17c7c:	1000031e 	bne	r2,zero,17c8c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17c80:	00800044 	movi	r2,1
   17c84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17c88:	00002006 	br	17d0c <OSFlagPost+0x2f8>
   17c8c:	00001f06 	br	17d0c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   17c90:	e0bffc17 	ldw	r2,-16(fp)
   17c94:	1080020b 	ldhu	r2,8(r2)
   17c98:	0084303a 	nor	r2,zero,r2
   17c9c:	1007883a 	mov	r3,r2
   17ca0:	e0bff117 	ldw	r2,-60(fp)
   17ca4:	1080040b 	ldhu	r2,16(r2)
   17ca8:	1884703a 	and	r2,r3,r2
   17cac:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   17cb0:	e0bff40b 	ldhu	r2,-48(fp)
   17cb4:	10000b26 	beq	r2,zero,17ce4 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   17cb8:	e0bff40b 	ldhu	r2,-48(fp)
   17cbc:	e13ff117 	ldw	r4,-60(fp)
   17cc0:	100b883a 	mov	r5,r2
   17cc4:	00181080 	call	18108 <OS_FlagTaskRdy>
   17cc8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   17ccc:	e0bff483 	ldbu	r2,-46(fp)
   17cd0:	10800058 	cmpnei	r2,r2,1
   17cd4:	1000031e 	bne	r2,zero,17ce4 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17cd8:	00800044 	movi	r2,1
   17cdc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17ce0:	00000a06 	br	17d0c <OSFlagPost+0x2f8>
   17ce4:	00000906 	br	17d0c <OSFlagPost+0x2f8>
   17ce8:	e0bff317 	ldw	r2,-52(fp)
   17cec:	e0bff815 	stw	r2,-32(fp)
   17cf0:	e0bff817 	ldw	r2,-32(fp)
   17cf4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   17cf8:	e0bfff17 	ldw	r2,-4(fp)
   17cfc:	00c01bc4 	movi	r3,111
   17d00:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17d04:	0005883a 	mov	r2,zero
   17d08:	00001f06 	br	17d88 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   17d0c:	e0bff117 	ldw	r2,-60(fp)
   17d10:	10800017 	ldw	r2,0(r2)
   17d14:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   17d18:	e0bff117 	ldw	r2,-60(fp)
   17d1c:	103f8a1e 	bne	r2,zero,17b48 <__alt_mem_Flash_flash_data+0xf4017b48>
   17d20:	e0bff317 	ldw	r2,-52(fp)
   17d24:	e0bff915 	stw	r2,-28(fp)
   17d28:	e0bff917 	ldw	r2,-28(fp)
   17d2c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   17d30:	e0bff203 	ldbu	r2,-56(fp)
   17d34:	10800058 	cmpnei	r2,r2,1
   17d38:	1000011e 	bne	r2,zero,17d40 <OSFlagPost+0x32c>
        OS_Sched();
   17d3c:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d40:	0005303a 	rdctl	r2,status
   17d44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d48:	e0fffa17 	ldw	r3,-24(fp)
   17d4c:	00bfff84 	movi	r2,-2
   17d50:	1884703a 	and	r2,r3,r2
   17d54:	1001703a 	wrctl	status,r2
  
  return context;
   17d58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17d5c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   17d60:	e0bffc17 	ldw	r2,-16(fp)
   17d64:	1080020b 	ldhu	r2,8(r2)
   17d68:	e0bff50d 	sth	r2,-44(fp)
   17d6c:	e0bff317 	ldw	r2,-52(fp)
   17d70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d74:	e0bffb17 	ldw	r2,-20(fp)
   17d78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   17d7c:	e0bfff17 	ldw	r2,-4(fp)
   17d80:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   17d84:	e0bff50b 	ldhu	r2,-44(fp)
}
   17d88:	e037883a 	mov	sp,fp
   17d8c:	dfc00117 	ldw	ra,4(sp)
   17d90:	df000017 	ldw	fp,0(sp)
   17d94:	dec00204 	addi	sp,sp,8
   17d98:	f800283a 	ret

00017d9c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   17d9c:	defff904 	addi	sp,sp,-28
   17da0:	df000615 	stw	fp,24(sp)
   17da4:	df000604 	addi	fp,sp,24
   17da8:	e13ffe15 	stw	r4,-8(fp)
   17dac:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   17db0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   17db4:	e0bfff17 	ldw	r2,-4(fp)
   17db8:	1000021e 	bne	r2,zero,17dc4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   17dbc:	0005883a 	mov	r2,zero
   17dc0:	00002306 	br	17e50 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   17dc4:	e0bffe17 	ldw	r2,-8(fp)
   17dc8:	1000051e 	bne	r2,zero,17de0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   17dcc:	e0bfff17 	ldw	r2,-4(fp)
   17dd0:	00c01b84 	movi	r3,110
   17dd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17dd8:	0005883a 	mov	r2,zero
   17ddc:	00001c06 	br	17e50 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   17de0:	e0bffe17 	ldw	r2,-8(fp)
   17de4:	10800003 	ldbu	r2,0(r2)
   17de8:	10803fcc 	andi	r2,r2,255
   17dec:	10800160 	cmpeqi	r2,r2,5
   17df0:	1000051e 	bne	r2,zero,17e08 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17df4:	e0bfff17 	ldw	r2,-4(fp)
   17df8:	00c00044 	movi	r3,1
   17dfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17e00:	0005883a 	mov	r2,zero
   17e04:	00001206 	br	17e50 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e08:	0005303a 	rdctl	r2,status
   17e0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e10:	e0fffc17 	ldw	r3,-16(fp)
   17e14:	00bfff84 	movi	r2,-2
   17e18:	1884703a 	and	r2,r3,r2
   17e1c:	1001703a 	wrctl	status,r2
  
  return context;
   17e20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17e24:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   17e28:	e0bffe17 	ldw	r2,-8(fp)
   17e2c:	1080020b 	ldhu	r2,8(r2)
   17e30:	e0bffb0d 	sth	r2,-20(fp)
   17e34:	e0bffa17 	ldw	r2,-24(fp)
   17e38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e3c:	e0bffd17 	ldw	r2,-12(fp)
   17e40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17e44:	e0bfff17 	ldw	r2,-4(fp)
   17e48:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   17e4c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   17e50:	e037883a 	mov	sp,fp
   17e54:	df000017 	ldw	fp,0(sp)
   17e58:	dec00104 	addi	sp,sp,4
   17e5c:	f800283a 	ret

00017e60 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   17e60:	defff804 	addi	sp,sp,-32
   17e64:	df000715 	stw	fp,28(sp)
   17e68:	df000704 	addi	fp,sp,28
   17e6c:	e13ffb15 	stw	r4,-20(fp)
   17e70:	e17ffc15 	stw	r5,-16(fp)
   17e74:	3009883a 	mov	r4,r6
   17e78:	3807883a 	mov	r3,r7
   17e7c:	e0800117 	ldw	r2,4(fp)
   17e80:	e13ffd0d 	sth	r4,-12(fp)
   17e84:	e0fffe05 	stb	r3,-8(fp)
   17e88:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   17e8c:	008000f4 	movhi	r2,3
   17e90:	10a80704 	addi	r2,r2,-24548
   17e94:	10c00017 	ldw	r3,0(r2)
   17e98:	008000f4 	movhi	r2,3
   17e9c:	10a80704 	addi	r2,r2,-24548
   17ea0:	10800017 	ldw	r2,0(r2)
   17ea4:	10800c03 	ldbu	r2,48(r2)
   17ea8:	10800814 	ori	r2,r2,32
   17eac:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   17eb0:	008000f4 	movhi	r2,3
   17eb4:	10a80704 	addi	r2,r2,-24548
   17eb8:	10800017 	ldw	r2,0(r2)
   17ebc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   17ec0:	008000f4 	movhi	r2,3
   17ec4:	10a80704 	addi	r2,r2,-24548
   17ec8:	10800017 	ldw	r2,0(r2)
   17ecc:	e0ffff0b 	ldhu	r3,-4(fp)
   17ed0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   17ed4:	008000f4 	movhi	r2,3
   17ed8:	10a80704 	addi	r2,r2,-24548
   17edc:	10800017 	ldw	r2,0(r2)
   17ee0:	e0fffc17 	ldw	r3,-16(fp)
   17ee4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   17ee8:	e0bffc17 	ldw	r2,-16(fp)
   17eec:	e0fffd0b 	ldhu	r3,-12(fp)
   17ef0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   17ef4:	e0bffc17 	ldw	r2,-16(fp)
   17ef8:	e0fffe03 	ldbu	r3,-8(fp)
   17efc:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   17f00:	008000f4 	movhi	r2,3
   17f04:	10a80704 	addi	r2,r2,-24548
   17f08:	10c00017 	ldw	r3,0(r2)
   17f0c:	e0bffc17 	ldw	r2,-16(fp)
   17f10:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   17f14:	e0bffb17 	ldw	r2,-20(fp)
   17f18:	10c00117 	ldw	r3,4(r2)
   17f1c:	e0bffc17 	ldw	r2,-16(fp)
   17f20:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   17f24:	e0bffc17 	ldw	r2,-16(fp)
   17f28:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   17f2c:	e0bffc17 	ldw	r2,-16(fp)
   17f30:	e0fffb17 	ldw	r3,-20(fp)
   17f34:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17f38:	e0bffb17 	ldw	r2,-20(fp)
   17f3c:	10800117 	ldw	r2,4(r2)
   17f40:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   17f44:	e0bff917 	ldw	r2,-28(fp)
   17f48:	10000326 	beq	r2,zero,17f58 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   17f4c:	e0bff917 	ldw	r2,-28(fp)
   17f50:	e0fffc17 	ldw	r3,-16(fp)
   17f54:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   17f58:	e0bffb17 	ldw	r2,-20(fp)
   17f5c:	e0fffc17 	ldw	r3,-16(fp)
   17f60:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   17f64:	008000f4 	movhi	r2,3
   17f68:	10a80704 	addi	r2,r2,-24548
   17f6c:	10800017 	ldw	r2,0(r2)
   17f70:	10800d03 	ldbu	r2,52(r2)
   17f74:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17f78:	e0fffa03 	ldbu	r3,-24(fp)
   17f7c:	e13ffa03 	ldbu	r4,-24(fp)
   17f80:	008000f4 	movhi	r2,3
   17f84:	10a80444 	addi	r2,r2,-24559
   17f88:	1105883a 	add	r2,r2,r4
   17f8c:	10800003 	ldbu	r2,0(r2)
   17f90:	1009883a 	mov	r4,r2
   17f94:	008000f4 	movhi	r2,3
   17f98:	10a80704 	addi	r2,r2,-24548
   17f9c:	10800017 	ldw	r2,0(r2)
   17fa0:	10800d43 	ldbu	r2,53(r2)
   17fa4:	0084303a 	nor	r2,zero,r2
   17fa8:	2084703a 	and	r2,r4,r2
   17fac:	1009883a 	mov	r4,r2
   17fb0:	008000f4 	movhi	r2,3
   17fb4:	10a80444 	addi	r2,r2,-24559
   17fb8:	10c5883a 	add	r2,r2,r3
   17fbc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   17fc0:	e0fffa03 	ldbu	r3,-24(fp)
   17fc4:	008000f4 	movhi	r2,3
   17fc8:	10a80444 	addi	r2,r2,-24559
   17fcc:	10c5883a 	add	r2,r2,r3
   17fd0:	10800003 	ldbu	r2,0(r2)
   17fd4:	10803fcc 	andi	r2,r2,255
   17fd8:	10000e1e 	bne	r2,zero,18014 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17fdc:	008000f4 	movhi	r2,3
   17fe0:	10a80704 	addi	r2,r2,-24548
   17fe4:	10800017 	ldw	r2,0(r2)
   17fe8:	10800d83 	ldbu	r2,54(r2)
   17fec:	0084303a 	nor	r2,zero,r2
   17ff0:	1007883a 	mov	r3,r2
   17ff4:	008000f4 	movhi	r2,3
   17ff8:	10a80404 	addi	r2,r2,-24560
   17ffc:	10800003 	ldbu	r2,0(r2)
   18000:	1884703a 	and	r2,r3,r2
   18004:	1007883a 	mov	r3,r2
   18008:	008000f4 	movhi	r2,3
   1800c:	10a80404 	addi	r2,r2,-24560
   18010:	10c00005 	stb	r3,0(r2)
    }
}
   18014:	e037883a 	mov	sp,fp
   18018:	df000017 	ldw	fp,0(sp)
   1801c:	dec00104 	addi	sp,sp,4
   18020:	f800283a 	ret

00018024 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   18024:	defffb04 	addi	sp,sp,-20
   18028:	dfc00415 	stw	ra,16(sp)
   1802c:	df000315 	stw	fp,12(sp)
   18030:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   18034:	01000174 	movhi	r4,5
   18038:	21305b04 	addi	r4,r4,-16020
   1803c:	0140dc04 	movi	r5,880
   18040:	00161840 	call	16184 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   18044:	00800174 	movhi	r2,5
   18048:	10b05b04 	addi	r2,r2,-16020
   1804c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   18050:	00800174 	movhi	r2,5
   18054:	10b06604 	addi	r2,r2,-15976
   18058:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1805c:	e03ffd0d 	sth	zero,-12(fp)
   18060:	00001306 	br	180b0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   18064:	e0bffe17 	ldw	r2,-8(fp)
   18068:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1806c:	e0bffe17 	ldw	r2,-8(fp)
   18070:	e0ffff17 	ldw	r3,-4(fp)
   18074:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   18078:	e0bffe17 	ldw	r2,-8(fp)
   1807c:	00c00fc4 	movi	r3,63
   18080:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   18084:	e0bffe17 	ldw	r2,-8(fp)
   18088:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1808c:	e0bffe17 	ldw	r2,-8(fp)
   18090:	10800b04 	addi	r2,r2,44
   18094:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   18098:	e0bfff17 	ldw	r2,-4(fp)
   1809c:	10800b04 	addi	r2,r2,44
   180a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   180a4:	e0bffd0b 	ldhu	r2,-12(fp)
   180a8:	10800044 	addi	r2,r2,1
   180ac:	e0bffd0d 	sth	r2,-12(fp)
   180b0:	e0bffd0b 	ldhu	r2,-12(fp)
   180b4:	108004f0 	cmpltui	r2,r2,19
   180b8:	103fea1e 	bne	r2,zero,18064 <__alt_mem_Flash_flash_data+0xf4018064>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   180bc:	e0bffe17 	ldw	r2,-8(fp)
   180c0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   180c4:	e0bffe17 	ldw	r2,-8(fp)
   180c8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   180cc:	e0bffe17 	ldw	r2,-8(fp)
   180d0:	00c00fc4 	movi	r3,63
   180d4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   180d8:	e0bffe17 	ldw	r2,-8(fp)
   180dc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   180e0:	008000f4 	movhi	r2,3
   180e4:	10a80904 	addi	r2,r2,-24540
   180e8:	00c00174 	movhi	r3,5
   180ec:	18f05b04 	addi	r3,r3,-16020
   180f0:	10c00015 	stw	r3,0(r2)
#endif
}
   180f4:	e037883a 	mov	sp,fp
   180f8:	dfc00117 	ldw	ra,4(sp)
   180fc:	df000017 	ldw	fp,0(sp)
   18100:	dec00204 	addi	sp,sp,8
   18104:	f800283a 	ret

00018108 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   18108:	defffa04 	addi	sp,sp,-24
   1810c:	dfc00515 	stw	ra,20(sp)
   18110:	df000415 	stw	fp,16(sp)
   18114:	df000404 	addi	fp,sp,16
   18118:	e13ffe15 	stw	r4,-8(fp)
   1811c:	2805883a 	mov	r2,r5
   18120:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   18124:	e0bffe17 	ldw	r2,-8(fp)
   18128:	10800217 	ldw	r2,8(r2)
   1812c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   18130:	e0bffd17 	ldw	r2,-12(fp)
   18134:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   18138:	e0bffd17 	ldw	r2,-12(fp)
   1813c:	e0ffff0b 	ldhu	r3,-4(fp)
   18140:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   18144:	e0bffd17 	ldw	r2,-12(fp)
   18148:	10c00c03 	ldbu	r3,48(r2)
   1814c:	00bff7c4 	movi	r2,-33
   18150:	1884703a 	and	r2,r3,r2
   18154:	1007883a 	mov	r3,r2
   18158:	e0bffd17 	ldw	r2,-12(fp)
   1815c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   18160:	e0bffd17 	ldw	r2,-12(fp)
   18164:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   18168:	e0bffd17 	ldw	r2,-12(fp)
   1816c:	10800c03 	ldbu	r2,48(r2)
   18170:	10803fcc 	andi	r2,r2,255
   18174:	10001f1e 	bne	r2,zero,181f4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   18178:	e0bffd17 	ldw	r2,-12(fp)
   1817c:	10c00d83 	ldbu	r3,54(r2)
   18180:	008000f4 	movhi	r2,3
   18184:	10a80404 	addi	r2,r2,-24560
   18188:	10800003 	ldbu	r2,0(r2)
   1818c:	1884b03a 	or	r2,r3,r2
   18190:	1007883a 	mov	r3,r2
   18194:	008000f4 	movhi	r2,3
   18198:	10a80404 	addi	r2,r2,-24560
   1819c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   181a0:	e0bffd17 	ldw	r2,-12(fp)
   181a4:	10800d03 	ldbu	r2,52(r2)
   181a8:	10c03fcc 	andi	r3,r2,255
   181ac:	e0bffd17 	ldw	r2,-12(fp)
   181b0:	10800d03 	ldbu	r2,52(r2)
   181b4:	11003fcc 	andi	r4,r2,255
   181b8:	008000f4 	movhi	r2,3
   181bc:	10a80444 	addi	r2,r2,-24559
   181c0:	1105883a 	add	r2,r2,r4
   181c4:	11000003 	ldbu	r4,0(r2)
   181c8:	e0bffd17 	ldw	r2,-12(fp)
   181cc:	10800d43 	ldbu	r2,53(r2)
   181d0:	2084b03a 	or	r2,r4,r2
   181d4:	1009883a 	mov	r4,r2
   181d8:	008000f4 	movhi	r2,3
   181dc:	10a80444 	addi	r2,r2,-24559
   181e0:	10c5883a 	add	r2,r2,r3
   181e4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   181e8:	00800044 	movi	r2,1
   181ec:	e0bffc05 	stb	r2,-16(fp)
   181f0:	00000106 	br	181f8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   181f4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   181f8:	e13ffe17 	ldw	r4,-8(fp)
   181fc:	00182180 	call	18218 <OS_FlagUnlink>
    return (sched);
   18200:	e0bffc03 	ldbu	r2,-16(fp)
}
   18204:	e037883a 	mov	sp,fp
   18208:	dfc00117 	ldw	ra,4(sp)
   1820c:	df000017 	ldw	fp,0(sp)
   18210:	dec00204 	addi	sp,sp,8
   18214:	f800283a 	ret

00018218 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   18218:	defffa04 	addi	sp,sp,-24
   1821c:	df000515 	stw	fp,20(sp)
   18220:	df000504 	addi	fp,sp,20
   18224:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   18228:	e0bfff17 	ldw	r2,-4(fp)
   1822c:	10800117 	ldw	r2,4(r2)
   18230:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   18234:	e0bfff17 	ldw	r2,-4(fp)
   18238:	10800017 	ldw	r2,0(r2)
   1823c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   18240:	e0bffb17 	ldw	r2,-20(fp)
   18244:	10000b1e 	bne	r2,zero,18274 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   18248:	e0bfff17 	ldw	r2,-4(fp)
   1824c:	10800317 	ldw	r2,12(r2)
   18250:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   18254:	e0bffd17 	ldw	r2,-12(fp)
   18258:	e0fffc17 	ldw	r3,-16(fp)
   1825c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   18260:	e0bffc17 	ldw	r2,-16(fp)
   18264:	10000b26 	beq	r2,zero,18294 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   18268:	e0bffc17 	ldw	r2,-16(fp)
   1826c:	10000115 	stw	zero,4(r2)
   18270:	00000806 	br	18294 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   18274:	e0bffb17 	ldw	r2,-20(fp)
   18278:	e0fffc17 	ldw	r3,-16(fp)
   1827c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   18280:	e0bffc17 	ldw	r2,-16(fp)
   18284:	10000326 	beq	r2,zero,18294 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   18288:	e0bffc17 	ldw	r2,-16(fp)
   1828c:	e0fffb17 	ldw	r3,-20(fp)
   18290:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   18294:	e0bfff17 	ldw	r2,-4(fp)
   18298:	10800217 	ldw	r2,8(r2)
   1829c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   182a0:	e0bffe17 	ldw	r2,-8(fp)
   182a4:	10000a15 	stw	zero,40(r2)
#endif
}
   182a8:	e037883a 	mov	sp,fp
   182ac:	df000017 	ldw	fp,0(sp)
   182b0:	dec00104 	addi	sp,sp,4
   182b4:	f800283a 	ret

000182b8 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   182b8:	defffa04 	addi	sp,sp,-24
   182bc:	df000515 	stw	fp,20(sp)
   182c0:	df000504 	addi	fp,sp,20
   182c4:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   182c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   182cc:	e0bfff17 	ldw	r2,-4(fp)
   182d0:	1000021e 	bne	r2,zero,182dc <OSMboxAccept+0x24>
        return ((void *)0);
   182d4:	0005883a 	mov	r2,zero
   182d8:	00001906 	br	18340 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   182dc:	e0bfff17 	ldw	r2,-4(fp)
   182e0:	10800003 	ldbu	r2,0(r2)
   182e4:	10803fcc 	andi	r2,r2,255
   182e8:	10800060 	cmpeqi	r2,r2,1
   182ec:	1000021e 	bne	r2,zero,182f8 <OSMboxAccept+0x40>
        return ((void *)0);
   182f0:	0005883a 	mov	r2,zero
   182f4:	00001206 	br	18340 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   182f8:	0005303a 	rdctl	r2,status
   182fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18300:	e0fffd17 	ldw	r3,-12(fp)
   18304:	00bfff84 	movi	r2,-2
   18308:	1884703a 	and	r2,r3,r2
   1830c:	1001703a 	wrctl	status,r2
  
  return context;
   18310:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18314:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   18318:	e0bfff17 	ldw	r2,-4(fp)
   1831c:	10800117 	ldw	r2,4(r2)
   18320:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   18324:	e0bfff17 	ldw	r2,-4(fp)
   18328:	10000115 	stw	zero,4(r2)
   1832c:	e0bffb17 	ldw	r2,-20(fp)
   18330:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18334:	e0bffe17 	ldw	r2,-8(fp)
   18338:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   1833c:	e0bffc17 	ldw	r2,-16(fp)
}
   18340:	e037883a 	mov	sp,fp
   18344:	df000017 	ldw	fp,0(sp)
   18348:	dec00104 	addi	sp,sp,4
   1834c:	f800283a 	ret

00018350 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   18350:	defff904 	addi	sp,sp,-28
   18354:	dfc00615 	stw	ra,24(sp)
   18358:	df000515 	stw	fp,20(sp)
   1835c:	df000504 	addi	fp,sp,20
   18360:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18364:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   18368:	008000f4 	movhi	r2,3
   1836c:	10a80604 	addi	r2,r2,-24552
   18370:	10800003 	ldbu	r2,0(r2)
   18374:	10803fcc 	andi	r2,r2,255
   18378:	10000226 	beq	r2,zero,18384 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1837c:	0005883a 	mov	r2,zero
   18380:	00002d06 	br	18438 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18384:	0005303a 	rdctl	r2,status
   18388:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1838c:	e0fffd17 	ldw	r3,-12(fp)
   18390:	00bfff84 	movi	r2,-2
   18394:	1884703a 	and	r2,r3,r2
   18398:	1001703a 	wrctl	status,r2
  
  return context;
   1839c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   183a0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   183a4:	008000f4 	movhi	r2,3
   183a8:	10a80504 	addi	r2,r2,-24556
   183ac:	10800017 	ldw	r2,0(r2)
   183b0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   183b4:	008000f4 	movhi	r2,3
   183b8:	10a80504 	addi	r2,r2,-24556
   183bc:	10800017 	ldw	r2,0(r2)
   183c0:	10000726 	beq	r2,zero,183e0 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   183c4:	008000f4 	movhi	r2,3
   183c8:	10a80504 	addi	r2,r2,-24556
   183cc:	10800017 	ldw	r2,0(r2)
   183d0:	10c00117 	ldw	r3,4(r2)
   183d4:	008000f4 	movhi	r2,3
   183d8:	10a80504 	addi	r2,r2,-24556
   183dc:	10c00015 	stw	r3,0(r2)
   183e0:	e0bffb17 	ldw	r2,-20(fp)
   183e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183e8:	e0bffe17 	ldw	r2,-8(fp)
   183ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   183f0:	e0bffc17 	ldw	r2,-16(fp)
   183f4:	10000f26 	beq	r2,zero,18434 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   183f8:	e0bffc17 	ldw	r2,-16(fp)
   183fc:	00c00044 	movi	r3,1
   18400:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   18404:	e0bffc17 	ldw	r2,-16(fp)
   18408:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   1840c:	e0bffc17 	ldw	r2,-16(fp)
   18410:	e0ffff17 	ldw	r3,-4(fp)
   18414:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   18418:	e0bffc17 	ldw	r2,-16(fp)
   1841c:	00c00fc4 	movi	r3,63
   18420:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   18424:	e0bffc17 	ldw	r2,-16(fp)
   18428:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   1842c:	e13ffc17 	ldw	r4,-16(fp)
   18430:	0015dc00 	call	15dc0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   18434:	e0bffc17 	ldw	r2,-16(fp)
}
   18438:	e037883a 	mov	sp,fp
   1843c:	dfc00117 	ldw	ra,4(sp)
   18440:	df000017 	ldw	fp,0(sp)
   18444:	dec00204 	addi	sp,sp,8
   18448:	f800283a 	ret

0001844c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1844c:	defff304 	addi	sp,sp,-52
   18450:	dfc00c15 	stw	ra,48(sp)
   18454:	df000b15 	stw	fp,44(sp)
   18458:	df000b04 	addi	fp,sp,44
   1845c:	e13ffd15 	stw	r4,-12(fp)
   18460:	2805883a 	mov	r2,r5
   18464:	e1bfff15 	stw	r6,-4(fp)
   18468:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1846c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18470:	e0bfff17 	ldw	r2,-4(fp)
   18474:	1000021e 	bne	r2,zero,18480 <OSMboxDel+0x34>
        return (pevent);
   18478:	e0bffd17 	ldw	r2,-12(fp)
   1847c:	00008806 	br	186a0 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18480:	e0bffd17 	ldw	r2,-12(fp)
   18484:	1000051e 	bne	r2,zero,1849c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18488:	e0bfff17 	ldw	r2,-4(fp)
   1848c:	00c00104 	movi	r3,4
   18490:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18494:	e0bffd17 	ldw	r2,-12(fp)
   18498:	00008106 	br	186a0 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   1849c:	e0bffd17 	ldw	r2,-12(fp)
   184a0:	10800003 	ldbu	r2,0(r2)
   184a4:	10803fcc 	andi	r2,r2,255
   184a8:	10800060 	cmpeqi	r2,r2,1
   184ac:	1000051e 	bne	r2,zero,184c4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   184b0:	e0bfff17 	ldw	r2,-4(fp)
   184b4:	00c00044 	movi	r3,1
   184b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   184bc:	e0bffd17 	ldw	r2,-12(fp)
   184c0:	00007706 	br	186a0 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   184c4:	008000f4 	movhi	r2,3
   184c8:	10a80604 	addi	r2,r2,-24552
   184cc:	10800003 	ldbu	r2,0(r2)
   184d0:	10803fcc 	andi	r2,r2,255
   184d4:	10000526 	beq	r2,zero,184ec <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   184d8:	e0bfff17 	ldw	r2,-4(fp)
   184dc:	00c003c4 	movi	r3,15
   184e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   184e4:	e0bffd17 	ldw	r2,-12(fp)
   184e8:	00006d06 	br	186a0 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184ec:	0005303a 	rdctl	r2,status
   184f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184f4:	e0fff817 	ldw	r3,-32(fp)
   184f8:	00bfff84 	movi	r2,-2
   184fc:	1884703a 	and	r2,r3,r2
   18500:	1001703a 	wrctl	status,r2
  
  return context;
   18504:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18508:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   1850c:	e0bffd17 	ldw	r2,-12(fp)
   18510:	10800283 	ldbu	r2,10(r2)
   18514:	10803fcc 	andi	r2,r2,255
   18518:	10000326 	beq	r2,zero,18528 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1851c:	00800044 	movi	r2,1
   18520:	e0bff505 	stb	r2,-44(fp)
   18524:	00000106 	br	1852c <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18528:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1852c:	e0bffe03 	ldbu	r2,-8(fp)
   18530:	10000326 	beq	r2,zero,18540 <OSMboxDel+0xf4>
   18534:	10800060 	cmpeqi	r2,r2,1
   18538:	10002c1e 	bne	r2,zero,185ec <OSMboxDel+0x1a0>
   1853c:	00004d06 	br	18674 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   18540:	e0bff503 	ldbu	r2,-44(fp)
   18544:	10001a1e 	bne	r2,zero,185b0 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18548:	e0bffd17 	ldw	r2,-12(fp)
   1854c:	00c00fc4 	movi	r3,63
   18550:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18554:	e0bffd17 	ldw	r2,-12(fp)
   18558:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   1855c:	e0bffd17 	ldw	r2,-12(fp)
   18560:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   18564:	008000f4 	movhi	r2,3
   18568:	10a80504 	addi	r2,r2,-24556
   1856c:	10c00017 	ldw	r3,0(r2)
   18570:	e0bffd17 	ldw	r2,-12(fp)
   18574:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   18578:	e0bffd17 	ldw	r2,-12(fp)
   1857c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   18580:	008000f4 	movhi	r2,3
   18584:	10a80504 	addi	r2,r2,-24556
   18588:	e0fffd17 	ldw	r3,-12(fp)
   1858c:	10c00015 	stw	r3,0(r2)
   18590:	e0bff717 	ldw	r2,-36(fp)
   18594:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18598:	e0bff917 	ldw	r2,-28(fp)
   1859c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   185a0:	e0bfff17 	ldw	r2,-4(fp)
   185a4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   185a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   185ac:	00003b06 	br	1869c <OSMboxDel+0x250>
   185b0:	e0bff717 	ldw	r2,-36(fp)
   185b4:	e0bffa15 	stw	r2,-24(fp)
   185b8:	e0bffa17 	ldw	r2,-24(fp)
   185bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   185c0:	e0bfff17 	ldw	r2,-4(fp)
   185c4:	00c01244 	movi	r3,73
   185c8:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   185cc:	e0bffd17 	ldw	r2,-12(fp)
   185d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   185d4:	00003106 	br	1869c <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   185d8:	e13ffd17 	ldw	r4,-12(fp)
   185dc:	000b883a 	mov	r5,zero
   185e0:	01800084 	movi	r6,2
   185e4:	000f883a 	mov	r7,zero
   185e8:	00158200 	call	15820 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   185ec:	e0bffd17 	ldw	r2,-12(fp)
   185f0:	10800283 	ldbu	r2,10(r2)
   185f4:	10803fcc 	andi	r2,r2,255
   185f8:	103ff71e 	bne	r2,zero,185d8 <__alt_mem_Flash_flash_data+0xf40185d8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   185fc:	e0bffd17 	ldw	r2,-12(fp)
   18600:	00c00fc4 	movi	r3,63
   18604:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18608:	e0bffd17 	ldw	r2,-12(fp)
   1860c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18610:	e0bffd17 	ldw	r2,-12(fp)
   18614:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18618:	008000f4 	movhi	r2,3
   1861c:	10a80504 	addi	r2,r2,-24556
   18620:	10c00017 	ldw	r3,0(r2)
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1862c:	e0bffd17 	ldw	r2,-12(fp)
   18630:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18634:	008000f4 	movhi	r2,3
   18638:	10a80504 	addi	r2,r2,-24556
   1863c:	e0fffd17 	ldw	r3,-12(fp)
   18640:	10c00015 	stw	r3,0(r2)
   18644:	e0bff717 	ldw	r2,-36(fp)
   18648:	e0bffb15 	stw	r2,-20(fp)
   1864c:	e0bffb17 	ldw	r2,-20(fp)
   18650:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18654:	e0bff503 	ldbu	r2,-44(fp)
   18658:	10800058 	cmpnei	r2,r2,1
   1865c:	1000011e 	bne	r2,zero,18664 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18660:	00162380 	call	16238 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   18664:	e0bfff17 	ldw	r2,-4(fp)
   18668:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   1866c:	e03ff615 	stw	zero,-40(fp)
             break;
   18670:	00000a06 	br	1869c <OSMboxDel+0x250>
   18674:	e0bff717 	ldw	r2,-36(fp)
   18678:	e0bffc15 	stw	r2,-16(fp)
   1867c:	e0bffc17 	ldw	r2,-16(fp)
   18680:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   18684:	e0bfff17 	ldw	r2,-4(fp)
   18688:	00c001c4 	movi	r3,7
   1868c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   18690:	e0bffd17 	ldw	r2,-12(fp)
   18694:	e0bff615 	stw	r2,-40(fp)
             break;
   18698:	0001883a 	nop
    }
    return (pevent_return);
   1869c:	e0bff617 	ldw	r2,-40(fp)
}
   186a0:	e037883a 	mov	sp,fp
   186a4:	dfc00117 	ldw	ra,4(sp)
   186a8:	df000017 	ldw	fp,0(sp)
   186ac:	dec00204 	addi	sp,sp,8
   186b0:	f800283a 	ret

000186b4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   186b4:	defff404 	addi	sp,sp,-48
   186b8:	dfc00b15 	stw	ra,44(sp)
   186bc:	df000a15 	stw	fp,40(sp)
   186c0:	df000a04 	addi	fp,sp,40
   186c4:	e13ffd15 	stw	r4,-12(fp)
   186c8:	2805883a 	mov	r2,r5
   186cc:	e1bfff15 	stw	r6,-4(fp)
   186d0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   186d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   186d8:	e0bfff17 	ldw	r2,-4(fp)
   186dc:	1000021e 	bne	r2,zero,186e8 <OSMboxPend+0x34>
        return ((void *)0);
   186e0:	0005883a 	mov	r2,zero
   186e4:	00009706 	br	18944 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   186e8:	e0bffd17 	ldw	r2,-12(fp)
   186ec:	1000051e 	bne	r2,zero,18704 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	00c00104 	movi	r3,4
   186f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186fc:	0005883a 	mov	r2,zero
   18700:	00009006 	br	18944 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   18704:	e0bffd17 	ldw	r2,-12(fp)
   18708:	10800003 	ldbu	r2,0(r2)
   1870c:	10803fcc 	andi	r2,r2,255
   18710:	10800060 	cmpeqi	r2,r2,1
   18714:	1000051e 	bne	r2,zero,1872c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18718:	e0bfff17 	ldw	r2,-4(fp)
   1871c:	00c00044 	movi	r3,1
   18720:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18724:	0005883a 	mov	r2,zero
   18728:	00008606 	br	18944 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1872c:	008000f4 	movhi	r2,3
   18730:	10a80604 	addi	r2,r2,-24552
   18734:	10800003 	ldbu	r2,0(r2)
   18738:	10803fcc 	andi	r2,r2,255
   1873c:	10000526 	beq	r2,zero,18754 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   18740:	e0bfff17 	ldw	r2,-4(fp)
   18744:	00c00084 	movi	r3,2
   18748:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1874c:	0005883a 	mov	r2,zero
   18750:	00007c06 	br	18944 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   18754:	008000f4 	movhi	r2,3
   18758:	10a7f804 	addi	r2,r2,-24608
   1875c:	10800003 	ldbu	r2,0(r2)
   18760:	10803fcc 	andi	r2,r2,255
   18764:	10000526 	beq	r2,zero,1877c <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   18768:	e0bfff17 	ldw	r2,-4(fp)
   1876c:	00c00344 	movi	r3,13
   18770:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18774:	0005883a 	mov	r2,zero
   18778:	00007206 	br	18944 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1877c:	0005303a 	rdctl	r2,status
   18780:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18784:	e0fff817 	ldw	r3,-32(fp)
   18788:	00bfff84 	movi	r2,-2
   1878c:	1884703a 	and	r2,r3,r2
   18790:	1001703a 	wrctl	status,r2
  
  return context;
   18794:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18798:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   1879c:	e0bffd17 	ldw	r2,-12(fp)
   187a0:	10800117 	ldw	r2,4(r2)
   187a4:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   187a8:	e0bff617 	ldw	r2,-40(fp)
   187ac:	10000a26 	beq	r2,zero,187d8 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   187b0:	e0bffd17 	ldw	r2,-12(fp)
   187b4:	10000115 	stw	zero,4(r2)
   187b8:	e0bff717 	ldw	r2,-36(fp)
   187bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187c0:	e0bff917 	ldw	r2,-28(fp)
   187c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   187c8:	e0bfff17 	ldw	r2,-4(fp)
   187cc:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   187d0:	e0bff617 	ldw	r2,-40(fp)
   187d4:	00005b06 	br	18944 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   187d8:	008000f4 	movhi	r2,3
   187dc:	10a80704 	addi	r2,r2,-24548
   187e0:	10c00017 	ldw	r3,0(r2)
   187e4:	008000f4 	movhi	r2,3
   187e8:	10a80704 	addi	r2,r2,-24548
   187ec:	10800017 	ldw	r2,0(r2)
   187f0:	10800c03 	ldbu	r2,48(r2)
   187f4:	10800094 	ori	r2,r2,2
   187f8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   187fc:	008000f4 	movhi	r2,3
   18800:	10a80704 	addi	r2,r2,-24548
   18804:	10800017 	ldw	r2,0(r2)
   18808:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   1880c:	008000f4 	movhi	r2,3
   18810:	10a80704 	addi	r2,r2,-24548
   18814:	10800017 	ldw	r2,0(r2)
   18818:	e0fffe0b 	ldhu	r3,-8(fp)
   1881c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   18820:	e13ffd17 	ldw	r4,-12(fp)
   18824:	00159b80 	call	159b8 <OS_EventTaskWait>
   18828:	e0bff717 	ldw	r2,-36(fp)
   1882c:	e0bffa15 	stw	r2,-24(fp)
   18830:	e0bffa17 	ldw	r2,-24(fp)
   18834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   18838:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1883c:	0005303a 	rdctl	r2,status
   18840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18844:	e0fffb17 	ldw	r3,-20(fp)
   18848:	00bfff84 	movi	r2,-2
   1884c:	1884703a 	and	r2,r3,r2
   18850:	1001703a 	wrctl	status,r2
  
  return context;
   18854:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   18858:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1885c:	008000f4 	movhi	r2,3
   18860:	10a80704 	addi	r2,r2,-24548
   18864:	10800017 	ldw	r2,0(r2)
   18868:	10800c43 	ldbu	r2,49(r2)
   1886c:	10803fcc 	andi	r2,r2,255
   18870:	10000326 	beq	r2,zero,18880 <OSMboxPend+0x1cc>
   18874:	108000a0 	cmpeqi	r2,r2,2
   18878:	1000091e 	bne	r2,zero,188a0 <OSMboxPend+0x1ec>
   1887c:	00000d06 	br	188b4 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   18880:	008000f4 	movhi	r2,3
   18884:	10a80704 	addi	r2,r2,-24548
   18888:	10800017 	ldw	r2,0(r2)
   1888c:	10800917 	ldw	r2,36(r2)
   18890:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   18894:	e0bfff17 	ldw	r2,-4(fp)
   18898:	10000005 	stb	zero,0(r2)
             break;
   1889c:	00001006 	br	188e0 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   188a0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   188a4:	e0bfff17 	ldw	r2,-4(fp)
   188a8:	00c00384 	movi	r3,14
   188ac:	10c00005 	stb	r3,0(r2)
             break;
   188b0:	00000b06 	br	188e0 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   188b4:	008000f4 	movhi	r2,3
   188b8:	10a80704 	addi	r2,r2,-24548
   188bc:	10800017 	ldw	r2,0(r2)
   188c0:	1009883a 	mov	r4,r2
   188c4:	e17ffd17 	ldw	r5,-12(fp)
   188c8:	0015c100 	call	15c10 <OS_EventTaskRemove>
             pmsg = (void *)0;
   188cc:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   188d0:	e0bfff17 	ldw	r2,-4(fp)
   188d4:	00c00284 	movi	r3,10
   188d8:	10c00005 	stb	r3,0(r2)
             break;
   188dc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   188e0:	008000f4 	movhi	r2,3
   188e4:	10a80704 	addi	r2,r2,-24548
   188e8:	10800017 	ldw	r2,0(r2)
   188ec:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   188f0:	008000f4 	movhi	r2,3
   188f4:	10a80704 	addi	r2,r2,-24548
   188f8:	10800017 	ldw	r2,0(r2)
   188fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   18900:	008000f4 	movhi	r2,3
   18904:	10a80704 	addi	r2,r2,-24548
   18908:	10800017 	ldw	r2,0(r2)
   1890c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18910:	008000f4 	movhi	r2,3
   18914:	10a80704 	addi	r2,r2,-24548
   18918:	10800017 	ldw	r2,0(r2)
   1891c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   18920:	008000f4 	movhi	r2,3
   18924:	10a80704 	addi	r2,r2,-24548
   18928:	10800017 	ldw	r2,0(r2)
   1892c:	10000915 	stw	zero,36(r2)
   18930:	e0bff717 	ldw	r2,-36(fp)
   18934:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18938:	e0bffc17 	ldw	r2,-16(fp)
   1893c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   18940:	e0bff617 	ldw	r2,-40(fp)
}
   18944:	e037883a 	mov	sp,fp
   18948:	dfc00117 	ldw	ra,4(sp)
   1894c:	df000017 	ldw	fp,0(sp)
   18950:	dec00204 	addi	sp,sp,8
   18954:	f800283a 	ret

00018958 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18958:	defff604 	addi	sp,sp,-40
   1895c:	dfc00915 	stw	ra,36(sp)
   18960:	df000815 	stw	fp,32(sp)
   18964:	df000804 	addi	fp,sp,32
   18968:	e13ffd15 	stw	r4,-12(fp)
   1896c:	2805883a 	mov	r2,r5
   18970:	e1bfff15 	stw	r6,-4(fp)
   18974:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18978:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1897c:	e0bfff17 	ldw	r2,-4(fp)
   18980:	1000021e 	bne	r2,zero,1898c <OSMboxPendAbort+0x34>
        return (0);
   18984:	0005883a 	mov	r2,zero
   18988:	00004906 	br	18ab0 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1898c:	e0bffd17 	ldw	r2,-12(fp)
   18990:	1000051e 	bne	r2,zero,189a8 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18994:	e0bfff17 	ldw	r2,-4(fp)
   18998:	00c00104 	movi	r3,4
   1899c:	10c00005 	stb	r3,0(r2)
        return (0);
   189a0:	0005883a 	mov	r2,zero
   189a4:	00004206 	br	18ab0 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   189a8:	e0bffd17 	ldw	r2,-12(fp)
   189ac:	10800003 	ldbu	r2,0(r2)
   189b0:	10803fcc 	andi	r2,r2,255
   189b4:	10800060 	cmpeqi	r2,r2,1
   189b8:	1000051e 	bne	r2,zero,189d0 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   189bc:	e0bfff17 	ldw	r2,-4(fp)
   189c0:	00c00044 	movi	r3,1
   189c4:	10c00005 	stb	r3,0(r2)
        return (0);
   189c8:	0005883a 	mov	r2,zero
   189cc:	00003806 	br	18ab0 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189d0:	0005303a 	rdctl	r2,status
   189d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189d8:	e0fffa17 	ldw	r3,-24(fp)
   189dc:	00bfff84 	movi	r2,-2
   189e0:	1884703a 	and	r2,r3,r2
   189e4:	1001703a 	wrctl	status,r2
  
  return context;
   189e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   189ec:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   189f0:	e0bffd17 	ldw	r2,-12(fp)
   189f4:	10800283 	ldbu	r2,10(r2)
   189f8:	10803fcc 	andi	r2,r2,255
   189fc:	10002526 	beq	r2,zero,18a94 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   18a00:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18a04:	e0bffe03 	ldbu	r2,-8(fp)
   18a08:	10800060 	cmpeqi	r2,r2,1
   18a0c:	10000e26 	beq	r2,zero,18a48 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   18a10:	00000806 	br	18a34 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   18a14:	e13ffd17 	ldw	r4,-12(fp)
   18a18:	000b883a 	mov	r5,zero
   18a1c:	01800084 	movi	r6,2
   18a20:	01c00084 	movi	r7,2
   18a24:	00158200 	call	15820 <OS_EventTaskRdy>
                     nbr_tasks++;
   18a28:	e0bff803 	ldbu	r2,-32(fp)
   18a2c:	10800044 	addi	r2,r2,1
   18a30:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   18a34:	e0bffd17 	ldw	r2,-12(fp)
   18a38:	10800283 	ldbu	r2,10(r2)
   18a3c:	10803fcc 	andi	r2,r2,255
   18a40:	103ff41e 	bne	r2,zero,18a14 <__alt_mem_Flash_flash_data+0xf4018a14>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18a44:	00000906 	br	18a6c <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   18a48:	e13ffd17 	ldw	r4,-12(fp)
   18a4c:	000b883a 	mov	r5,zero
   18a50:	01800084 	movi	r6,2
   18a54:	01c00084 	movi	r7,2
   18a58:	00158200 	call	15820 <OS_EventTaskRdy>
                 nbr_tasks++;
   18a5c:	e0bff803 	ldbu	r2,-32(fp)
   18a60:	10800044 	addi	r2,r2,1
   18a64:	e0bff805 	stb	r2,-32(fp)
                 break;
   18a68:	0001883a 	nop
   18a6c:	e0bff917 	ldw	r2,-28(fp)
   18a70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a74:	e0bffb17 	ldw	r2,-20(fp)
   18a78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   18a7c:	00162380 	call	16238 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18a80:	e0bfff17 	ldw	r2,-4(fp)
   18a84:	00c00384 	movi	r3,14
   18a88:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18a8c:	e0bff803 	ldbu	r2,-32(fp)
   18a90:	00000706 	br	18ab0 <OSMboxPendAbort+0x158>
   18a94:	e0bff917 	ldw	r2,-28(fp)
   18a98:	e0bffc15 	stw	r2,-16(fp)
   18a9c:	e0bffc17 	ldw	r2,-16(fp)
   18aa0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   18aac:	0005883a 	mov	r2,zero
}
   18ab0:	e037883a 	mov	sp,fp
   18ab4:	dfc00117 	ldw	ra,4(sp)
   18ab8:	df000017 	ldw	fp,0(sp)
   18abc:	dec00204 	addi	sp,sp,8
   18ac0:	f800283a 	ret

00018ac4 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   18ac4:	defff704 	addi	sp,sp,-36
   18ac8:	dfc00815 	stw	ra,32(sp)
   18acc:	df000715 	stw	fp,28(sp)
   18ad0:	df000704 	addi	fp,sp,28
   18ad4:	e13ffe15 	stw	r4,-8(fp)
   18ad8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18adc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18ae0:	e0bffe17 	ldw	r2,-8(fp)
   18ae4:	1000021e 	bne	r2,zero,18af0 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18ae8:	00800104 	movi	r2,4
   18aec:	00003406 	br	18bc0 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   18af0:	e0bfff17 	ldw	r2,-4(fp)
   18af4:	1000021e 	bne	r2,zero,18b00 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   18af8:	008000c4 	movi	r2,3
   18afc:	00003006 	br	18bc0 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   18b00:	e0bffe17 	ldw	r2,-8(fp)
   18b04:	10800003 	ldbu	r2,0(r2)
   18b08:	10803fcc 	andi	r2,r2,255
   18b0c:	10800060 	cmpeqi	r2,r2,1
   18b10:	1000021e 	bne	r2,zero,18b1c <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   18b14:	00800044 	movi	r2,1
   18b18:	00002906 	br	18bc0 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b1c:	0005303a 	rdctl	r2,status
   18b20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b24:	e0fffa17 	ldw	r3,-24(fp)
   18b28:	00bfff84 	movi	r2,-2
   18b2c:	1884703a 	and	r2,r3,r2
   18b30:	1001703a 	wrctl	status,r2
  
  return context;
   18b34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18b38:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   18b3c:	e0bffe17 	ldw	r2,-8(fp)
   18b40:	10800283 	ldbu	r2,10(r2)
   18b44:	10803fcc 	andi	r2,r2,255
   18b48:	10000c26 	beq	r2,zero,18b7c <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18b4c:	e13ffe17 	ldw	r4,-8(fp)
   18b50:	e17fff17 	ldw	r5,-4(fp)
   18b54:	01800084 	movi	r6,2
   18b58:	000f883a 	mov	r7,zero
   18b5c:	00158200 	call	15820 <OS_EventTaskRdy>
   18b60:	e0bff917 	ldw	r2,-28(fp)
   18b64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b68:	e0bffb17 	ldw	r2,-20(fp)
   18b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18b70:	00162380 	call	16238 <OS_Sched>
        return (OS_ERR_NONE);
   18b74:	0005883a 	mov	r2,zero
   18b78:	00001106 	br	18bc0 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   18b7c:	e0bffe17 	ldw	r2,-8(fp)
   18b80:	10800117 	ldw	r2,4(r2)
   18b84:	10000626 	beq	r2,zero,18ba0 <OSMboxPost+0xdc>
   18b88:	e0bff917 	ldw	r2,-28(fp)
   18b8c:	e0bffc15 	stw	r2,-16(fp)
   18b90:	e0bffc17 	ldw	r2,-16(fp)
   18b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   18b98:	00800504 	movi	r2,20
   18b9c:	00000806 	br	18bc0 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   18ba0:	e0bffe17 	ldw	r2,-8(fp)
   18ba4:	e0ffff17 	ldw	r3,-4(fp)
   18ba8:	10c00115 	stw	r3,4(r2)
   18bac:	e0bff917 	ldw	r2,-28(fp)
   18bb0:	e0bffd15 	stw	r2,-12(fp)
   18bb4:	e0bffd17 	ldw	r2,-12(fp)
   18bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18bbc:	0005883a 	mov	r2,zero
}
   18bc0:	e037883a 	mov	sp,fp
   18bc4:	dfc00117 	ldw	ra,4(sp)
   18bc8:	df000017 	ldw	fp,0(sp)
   18bcc:	dec00204 	addi	sp,sp,8
   18bd0:	f800283a 	ret

00018bd4 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   18bd4:	defff604 	addi	sp,sp,-40
   18bd8:	dfc00915 	stw	ra,36(sp)
   18bdc:	df000815 	stw	fp,32(sp)
   18be0:	df000804 	addi	fp,sp,32
   18be4:	e13ffd15 	stw	r4,-12(fp)
   18be8:	e17ffe15 	stw	r5,-8(fp)
   18bec:	3005883a 	mov	r2,r6
   18bf0:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18bf4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18bf8:	e0bffd17 	ldw	r2,-12(fp)
   18bfc:	1000021e 	bne	r2,zero,18c08 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18c00:	00800104 	movi	r2,4
   18c04:	00004506 	br	18d1c <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   18c08:	e0bffe17 	ldw	r2,-8(fp)
   18c0c:	1000021e 	bne	r2,zero,18c18 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   18c10:	008000c4 	movi	r2,3
   18c14:	00004106 	br	18d1c <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   18c18:	e0bffd17 	ldw	r2,-12(fp)
   18c1c:	10800003 	ldbu	r2,0(r2)
   18c20:	10803fcc 	andi	r2,r2,255
   18c24:	10800060 	cmpeqi	r2,r2,1
   18c28:	1000021e 	bne	r2,zero,18c34 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   18c2c:	00800044 	movi	r2,1
   18c30:	00003a06 	br	18d1c <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c34:	0005303a 	rdctl	r2,status
   18c38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c3c:	e0fff917 	ldw	r3,-28(fp)
   18c40:	00bfff84 	movi	r2,-2
   18c44:	1884703a 	and	r2,r3,r2
   18c48:	1001703a 	wrctl	status,r2
  
  return context;
   18c4c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18c50:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   18c54:	e0bffd17 	ldw	r2,-12(fp)
   18c58:	10800283 	ldbu	r2,10(r2)
   18c5c:	10803fcc 	andi	r2,r2,255
   18c60:	10001d26 	beq	r2,zero,18cd8 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   18c64:	e0bfff03 	ldbu	r2,-4(fp)
   18c68:	1080004c 	andi	r2,r2,1
   18c6c:	10000b26 	beq	r2,zero,18c9c <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   18c70:	00000506 	br	18c88 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18c74:	e13ffd17 	ldw	r4,-12(fp)
   18c78:	e17ffe17 	ldw	r5,-8(fp)
   18c7c:	01800084 	movi	r6,2
   18c80:	000f883a 	mov	r7,zero
   18c84:	00158200 	call	15820 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   18c88:	e0bffd17 	ldw	r2,-12(fp)
   18c8c:	10800283 	ldbu	r2,10(r2)
   18c90:	10803fcc 	andi	r2,r2,255
   18c94:	103ff71e 	bne	r2,zero,18c74 <__alt_mem_Flash_flash_data+0xf4018c74>
   18c98:	00000506 	br	18cb0 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   18c9c:	e13ffd17 	ldw	r4,-12(fp)
   18ca0:	e17ffe17 	ldw	r5,-8(fp)
   18ca4:	01800084 	movi	r6,2
   18ca8:	000f883a 	mov	r7,zero
   18cac:	00158200 	call	15820 <OS_EventTaskRdy>
   18cb0:	e0bff817 	ldw	r2,-32(fp)
   18cb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cb8:	e0bffa17 	ldw	r2,-24(fp)
   18cbc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18cc0:	e0bfff03 	ldbu	r2,-4(fp)
   18cc4:	1080010c 	andi	r2,r2,4
   18cc8:	1000011e 	bne	r2,zero,18cd0 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   18ccc:	00162380 	call	16238 <OS_Sched>
        }
        return (OS_ERR_NONE);
   18cd0:	0005883a 	mov	r2,zero
   18cd4:	00001106 	br	18d1c <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   18cd8:	e0bffd17 	ldw	r2,-12(fp)
   18cdc:	10800117 	ldw	r2,4(r2)
   18ce0:	10000626 	beq	r2,zero,18cfc <OSMboxPostOpt+0x128>
   18ce4:	e0bff817 	ldw	r2,-32(fp)
   18ce8:	e0bffb15 	stw	r2,-20(fp)
   18cec:	e0bffb17 	ldw	r2,-20(fp)
   18cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   18cf4:	00800504 	movi	r2,20
   18cf8:	00000806 	br	18d1c <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   18cfc:	e0bffd17 	ldw	r2,-12(fp)
   18d00:	e0fffe17 	ldw	r3,-8(fp)
   18d04:	10c00115 	stw	r3,4(r2)
   18d08:	e0bff817 	ldw	r2,-32(fp)
   18d0c:	e0bffc15 	stw	r2,-16(fp)
   18d10:	e0bffc17 	ldw	r2,-16(fp)
   18d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18d18:	0005883a 	mov	r2,zero
}
   18d1c:	e037883a 	mov	sp,fp
   18d20:	dfc00117 	ldw	ra,4(sp)
   18d24:	df000017 	ldw	fp,0(sp)
   18d28:	dec00204 	addi	sp,sp,8
   18d2c:	f800283a 	ret

00018d30 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   18d30:	defff704 	addi	sp,sp,-36
   18d34:	df000815 	stw	fp,32(sp)
   18d38:	df000804 	addi	fp,sp,32
   18d3c:	e13ffe15 	stw	r4,-8(fp)
   18d40:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18d44:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18d48:	e0bffe17 	ldw	r2,-8(fp)
   18d4c:	1000021e 	bne	r2,zero,18d58 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18d50:	00800104 	movi	r2,4
   18d54:	00003606 	br	18e30 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   18d58:	e0bfff17 	ldw	r2,-4(fp)
   18d5c:	1000021e 	bne	r2,zero,18d68 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18d60:	00800244 	movi	r2,9
   18d64:	00003206 	br	18e30 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   18d68:	e0bffe17 	ldw	r2,-8(fp)
   18d6c:	10800003 	ldbu	r2,0(r2)
   18d70:	10803fcc 	andi	r2,r2,255
   18d74:	10800060 	cmpeqi	r2,r2,1
   18d78:	1000021e 	bne	r2,zero,18d84 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18d7c:	00800044 	movi	r2,1
   18d80:	00002b06 	br	18e30 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d84:	0005303a 	rdctl	r2,status
   18d88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d8c:	e0fffc17 	ldw	r3,-16(fp)
   18d90:	00bfff84 	movi	r2,-2
   18d94:	1884703a 	and	r2,r3,r2
   18d98:	1001703a 	wrctl	status,r2
  
  return context;
   18d9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18da0:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   18da4:	e0bffe17 	ldw	r2,-8(fp)
   18da8:	10c00283 	ldbu	r3,10(r2)
   18dac:	e0bfff17 	ldw	r2,-4(fp)
   18db0:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   18db4:	e0bffe17 	ldw	r2,-8(fp)
   18db8:	108002c4 	addi	r2,r2,11
   18dbc:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   18dc0:	e0bfff17 	ldw	r2,-4(fp)
   18dc4:	10800104 	addi	r2,r2,4
   18dc8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18dcc:	e03ff805 	stb	zero,-32(fp)
   18dd0:	00000b06 	br	18e00 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   18dd4:	e0bffa17 	ldw	r2,-24(fp)
   18dd8:	10c00044 	addi	r3,r2,1
   18ddc:	e0fffa15 	stw	r3,-24(fp)
   18de0:	e0fff917 	ldw	r3,-28(fp)
   18de4:	19000044 	addi	r4,r3,1
   18de8:	e13ff915 	stw	r4,-28(fp)
   18dec:	18c00003 	ldbu	r3,0(r3)
   18df0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18df4:	e0bff803 	ldbu	r2,-32(fp)
   18df8:	10800044 	addi	r2,r2,1
   18dfc:	e0bff805 	stb	r2,-32(fp)
   18e00:	e0bff803 	ldbu	r2,-32(fp)
   18e04:	108000f0 	cmpltui	r2,r2,3
   18e08:	103ff21e 	bne	r2,zero,18dd4 <__alt_mem_Flash_flash_data+0xf4018dd4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   18e0c:	e0bffe17 	ldw	r2,-8(fp)
   18e10:	10c00117 	ldw	r3,4(r2)
   18e14:	e0bfff17 	ldw	r2,-4(fp)
   18e18:	10c00015 	stw	r3,0(r2)
   18e1c:	e0bffb17 	ldw	r2,-20(fp)
   18e20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e24:	e0bffd17 	ldw	r2,-12(fp)
   18e28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18e2c:	0005883a 	mov	r2,zero
}
   18e30:	e037883a 	mov	sp,fp
   18e34:	df000017 	ldw	fp,0(sp)
   18e38:	dec00104 	addi	sp,sp,4
   18e3c:	f800283a 	ret

00018e40 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   18e40:	defff404 	addi	sp,sp,-48
   18e44:	df000b15 	stw	fp,44(sp)
   18e48:	df000b04 	addi	fp,sp,44
   18e4c:	e13ffc15 	stw	r4,-16(fp)
   18e50:	e17ffd15 	stw	r5,-12(fp)
   18e54:	e1bffe15 	stw	r6,-8(fp)
   18e58:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18e5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18e60:	e0bfff17 	ldw	r2,-4(fp)
   18e64:	1000021e 	bne	r2,zero,18e70 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   18e68:	0005883a 	mov	r2,zero
   18e6c:	00006d06 	br	19024 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   18e70:	e0bffc17 	ldw	r2,-16(fp)
   18e74:	1000051e 	bne	r2,zero,18e8c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18e78:	e0bfff17 	ldw	r2,-4(fp)
   18e7c:	00c01884 	movi	r3,98
   18e80:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18e84:	0005883a 	mov	r2,zero
   18e88:	00006606 	br	19024 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   18e8c:	e0bffc17 	ldw	r2,-16(fp)
   18e90:	108000cc 	andi	r2,r2,3
   18e94:	10000526 	beq	r2,zero,18eac <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   18e98:	e0bfff17 	ldw	r2,-4(fp)
   18e9c:	00c01884 	movi	r3,98
   18ea0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18ea4:	0005883a 	mov	r2,zero
   18ea8:	00005e06 	br	19024 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   18eac:	e0bffd17 	ldw	r2,-12(fp)
   18eb0:	108000a8 	cmpgeui	r2,r2,2
   18eb4:	1000051e 	bne	r2,zero,18ecc <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   18eb8:	e0bfff17 	ldw	r2,-4(fp)
   18ebc:	00c016c4 	movi	r3,91
   18ec0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18ec4:	0005883a 	mov	r2,zero
   18ec8:	00005606 	br	19024 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   18ecc:	e0bffe17 	ldw	r2,-8(fp)
   18ed0:	10800128 	cmpgeui	r2,r2,4
   18ed4:	1000051e 	bne	r2,zero,18eec <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   18ed8:	e0bfff17 	ldw	r2,-4(fp)
   18edc:	00c01704 	movi	r3,92
   18ee0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18ee4:	0005883a 	mov	r2,zero
   18ee8:	00004e06 	br	19024 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18eec:	0005303a 	rdctl	r2,status
   18ef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ef4:	e0fffa17 	ldw	r3,-24(fp)
   18ef8:	00bfff84 	movi	r2,-2
   18efc:	1884703a 	and	r2,r3,r2
   18f00:	1001703a 	wrctl	status,r2
  
  return context;
   18f04:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18f08:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   18f0c:	008000f4 	movhi	r2,3
   18f10:	10a80104 	addi	r2,r2,-24572
   18f14:	10800017 	ldw	r2,0(r2)
   18f18:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   18f1c:	008000f4 	movhi	r2,3
   18f20:	10a80104 	addi	r2,r2,-24572
   18f24:	10800017 	ldw	r2,0(r2)
   18f28:	10000726 	beq	r2,zero,18f48 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   18f2c:	008000f4 	movhi	r2,3
   18f30:	10a80104 	addi	r2,r2,-24572
   18f34:	10800017 	ldw	r2,0(r2)
   18f38:	10c00117 	ldw	r3,4(r2)
   18f3c:	008000f4 	movhi	r2,3
   18f40:	10a80104 	addi	r2,r2,-24572
   18f44:	10c00015 	stw	r3,0(r2)
   18f48:	e0bff817 	ldw	r2,-32(fp)
   18f4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f50:	e0bffb17 	ldw	r2,-20(fp)
   18f54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   18f58:	e0bff917 	ldw	r2,-28(fp)
   18f5c:	1000051e 	bne	r2,zero,18f74 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   18f60:	e0bfff17 	ldw	r2,-4(fp)
   18f64:	00c01684 	movi	r3,90
   18f68:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18f6c:	0005883a 	mov	r2,zero
   18f70:	00002c06 	br	19024 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   18f74:	e0bffc17 	ldw	r2,-16(fp)
   18f78:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   18f7c:	e0fffc17 	ldw	r3,-16(fp)
   18f80:	e0bffe17 	ldw	r2,-8(fp)
   18f84:	1885883a 	add	r2,r3,r2
   18f88:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   18f8c:	e03ff715 	stw	zero,-36(fp)
   18f90:	00000c06 	br	18fc4 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   18f94:	e0bff617 	ldw	r2,-40(fp)
   18f98:	e0fff517 	ldw	r3,-44(fp)
   18f9c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   18fa0:	e0bff517 	ldw	r2,-44(fp)
   18fa4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   18fa8:	e0fff517 	ldw	r3,-44(fp)
   18fac:	e0bffe17 	ldw	r2,-8(fp)
   18fb0:	1885883a 	add	r2,r3,r2
   18fb4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   18fb8:	e0bff717 	ldw	r2,-36(fp)
   18fbc:	10800044 	addi	r2,r2,1
   18fc0:	e0bff715 	stw	r2,-36(fp)
   18fc4:	e0bffd17 	ldw	r2,-12(fp)
   18fc8:	10bfffc4 	addi	r2,r2,-1
   18fcc:	e0fff717 	ldw	r3,-36(fp)
   18fd0:	18bff036 	bltu	r3,r2,18f94 <__alt_mem_Flash_flash_data+0xf4018f94>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   18fd4:	e0bff617 	ldw	r2,-40(fp)
   18fd8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   18fdc:	e0bff917 	ldw	r2,-28(fp)
   18fe0:	e0fffc17 	ldw	r3,-16(fp)
   18fe4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   18fe8:	e0bff917 	ldw	r2,-28(fp)
   18fec:	e0fffc17 	ldw	r3,-16(fp)
   18ff0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   18ff4:	e0bff917 	ldw	r2,-28(fp)
   18ff8:	e0fffd17 	ldw	r3,-12(fp)
   18ffc:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   19000:	e0bff917 	ldw	r2,-28(fp)
   19004:	e0fffd17 	ldw	r3,-12(fp)
   19008:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1900c:	e0bff917 	ldw	r2,-28(fp)
   19010:	e0fffe17 	ldw	r3,-8(fp)
   19014:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   19018:	e0bfff17 	ldw	r2,-4(fp)
   1901c:	10000005 	stb	zero,0(r2)
    return (pmem);
   19020:	e0bff917 	ldw	r2,-28(fp)
}
   19024:	e037883a 	mov	sp,fp
   19028:	df000017 	ldw	fp,0(sp)
   1902c:	dec00104 	addi	sp,sp,4
   19030:	f800283a 	ret

00019034 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   19034:	defff804 	addi	sp,sp,-32
   19038:	df000715 	stw	fp,28(sp)
   1903c:	df000704 	addi	fp,sp,28
   19040:	e13ffe15 	stw	r4,-8(fp)
   19044:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19048:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1904c:	e0bfff17 	ldw	r2,-4(fp)
   19050:	1000021e 	bne	r2,zero,1905c <OSMemGet+0x28>
        return ((void *)0);
   19054:	0005883a 	mov	r2,zero
   19058:	00002e06 	br	19114 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1905c:	e0bffe17 	ldw	r2,-8(fp)
   19060:	1000051e 	bne	r2,zero,19078 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   19064:	e0bfff17 	ldw	r2,-4(fp)
   19068:	00c01804 	movi	r3,96
   1906c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19070:	0005883a 	mov	r2,zero
   19074:	00002706 	br	19114 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19078:	0005303a 	rdctl	r2,status
   1907c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19080:	e0fffb17 	ldw	r3,-20(fp)
   19084:	00bfff84 	movi	r2,-2
   19088:	1884703a 	and	r2,r3,r2
   1908c:	1001703a 	wrctl	status,r2
  
  return context;
   19090:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19094:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   19098:	e0bffe17 	ldw	r2,-8(fp)
   1909c:	10800417 	ldw	r2,16(r2)
   190a0:	10001426 	beq	r2,zero,190f4 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   190a4:	e0bffe17 	ldw	r2,-8(fp)
   190a8:	10800117 	ldw	r2,4(r2)
   190ac:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   190b0:	e0bffa17 	ldw	r2,-24(fp)
   190b4:	10c00017 	ldw	r3,0(r2)
   190b8:	e0bffe17 	ldw	r2,-8(fp)
   190bc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   190c0:	e0bffe17 	ldw	r2,-8(fp)
   190c4:	10800417 	ldw	r2,16(r2)
   190c8:	10ffffc4 	addi	r3,r2,-1
   190cc:	e0bffe17 	ldw	r2,-8(fp)
   190d0:	10c00415 	stw	r3,16(r2)
   190d4:	e0bff917 	ldw	r2,-28(fp)
   190d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190dc:	e0bffc17 	ldw	r2,-16(fp)
   190e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   190e4:	e0bfff17 	ldw	r2,-4(fp)
   190e8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   190ec:	e0bffa17 	ldw	r2,-24(fp)
   190f0:	00000806 	br	19114 <OSMemGet+0xe0>
   190f4:	e0bff917 	ldw	r2,-28(fp)
   190f8:	e0bffd15 	stw	r2,-12(fp)
   190fc:	e0bffd17 	ldw	r2,-12(fp)
   19100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   19104:	e0bfff17 	ldw	r2,-4(fp)
   19108:	00c01744 	movi	r3,93
   1910c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   19110:	0005883a 	mov	r2,zero
}
   19114:	e037883a 	mov	sp,fp
   19118:	df000017 	ldw	fp,0(sp)
   1911c:	dec00104 	addi	sp,sp,4
   19120:	f800283a 	ret

00019124 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   19124:	defff704 	addi	sp,sp,-36
   19128:	dfc00815 	stw	ra,32(sp)
   1912c:	df000715 	stw	fp,28(sp)
   19130:	df000704 	addi	fp,sp,28
   19134:	e13ffd15 	stw	r4,-12(fp)
   19138:	e17ffe15 	stw	r5,-8(fp)
   1913c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19140:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   19144:	e0bfff17 	ldw	r2,-4(fp)
   19148:	1000021e 	bne	r2,zero,19154 <OSMemNameGet+0x30>
        return (0);
   1914c:	0005883a 	mov	r2,zero
   19150:	00002d06 	br	19208 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   19154:	e0bffd17 	ldw	r2,-12(fp)
   19158:	1000051e 	bne	r2,zero,19170 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1915c:	e0bfff17 	ldw	r2,-4(fp)
   19160:	00c01804 	movi	r3,96
   19164:	10c00005 	stb	r3,0(r2)
        return (0);
   19168:	0005883a 	mov	r2,zero
   1916c:	00002606 	br	19208 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   19170:	e0bffe17 	ldw	r2,-8(fp)
   19174:	1000051e 	bne	r2,zero,1918c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   19178:	e0bfff17 	ldw	r2,-4(fp)
   1917c:	00c00304 	movi	r3,12
   19180:	10c00005 	stb	r3,0(r2)
        return (0);
   19184:	0005883a 	mov	r2,zero
   19188:	00001f06 	br	19208 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1918c:	008000f4 	movhi	r2,3
   19190:	10a80604 	addi	r2,r2,-24552
   19194:	10800003 	ldbu	r2,0(r2)
   19198:	10803fcc 	andi	r2,r2,255
   1919c:	10000526 	beq	r2,zero,191b4 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   191a0:	e0bfff17 	ldw	r2,-4(fp)
   191a4:	00c00444 	movi	r3,17
   191a8:	10c00005 	stb	r3,0(r2)
        return (0);
   191ac:	0005883a 	mov	r2,zero
   191b0:	00001506 	br	19208 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191b4:	0005303a 	rdctl	r2,status
   191b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191bc:	e0fffb17 	ldw	r3,-20(fp)
   191c0:	00bfff84 	movi	r2,-2
   191c4:	1884703a 	and	r2,r3,r2
   191c8:	1001703a 	wrctl	status,r2
  
  return context;
   191cc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   191d0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   191d4:	e0bffd17 	ldw	r2,-12(fp)
   191d8:	10800504 	addi	r2,r2,20
   191dc:	e13ffe17 	ldw	r4,-8(fp)
   191e0:	100b883a 	mov	r5,r2
   191e4:	00163740 	call	16374 <OS_StrCopy>
   191e8:	e0bffa05 	stb	r2,-24(fp)
   191ec:	e0bff917 	ldw	r2,-28(fp)
   191f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   191f4:	e0bffc17 	ldw	r2,-16(fp)
   191f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   191fc:	e0bfff17 	ldw	r2,-4(fp)
   19200:	10000005 	stb	zero,0(r2)
    return (len);
   19204:	e0bffa03 	ldbu	r2,-24(fp)
}
   19208:	e037883a 	mov	sp,fp
   1920c:	dfc00117 	ldw	ra,4(sp)
   19210:	df000017 	ldw	fp,0(sp)
   19214:	dec00204 	addi	sp,sp,8
   19218:	f800283a 	ret

0001921c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1921c:	defff604 	addi	sp,sp,-40
   19220:	dfc00915 	stw	ra,36(sp)
   19224:	df000815 	stw	fp,32(sp)
   19228:	df000804 	addi	fp,sp,32
   1922c:	e13ffd15 	stw	r4,-12(fp)
   19230:	e17ffe15 	stw	r5,-8(fp)
   19234:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19238:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1923c:	e0bfff17 	ldw	r2,-4(fp)
   19240:	1000011e 	bne	r2,zero,19248 <OSMemNameSet+0x2c>
        return;
   19244:	00003606 	br	19320 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   19248:	e0bffd17 	ldw	r2,-12(fp)
   1924c:	1000041e 	bne	r2,zero,19260 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   19250:	e0bfff17 	ldw	r2,-4(fp)
   19254:	00c01804 	movi	r3,96
   19258:	10c00005 	stb	r3,0(r2)
        return;
   1925c:	00003006 	br	19320 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   19260:	e0bffe17 	ldw	r2,-8(fp)
   19264:	1000041e 	bne	r2,zero,19278 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   19268:	e0bfff17 	ldw	r2,-4(fp)
   1926c:	00c00304 	movi	r3,12
   19270:	10c00005 	stb	r3,0(r2)
        return;
   19274:	00002a06 	br	19320 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19278:	008000f4 	movhi	r2,3
   1927c:	10a80604 	addi	r2,r2,-24552
   19280:	10800003 	ldbu	r2,0(r2)
   19284:	10803fcc 	andi	r2,r2,255
   19288:	10000426 	beq	r2,zero,1929c <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1928c:	e0bfff17 	ldw	r2,-4(fp)
   19290:	00c00484 	movi	r3,18
   19294:	10c00005 	stb	r3,0(r2)
        return;
   19298:	00002106 	br	19320 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1929c:	0005303a 	rdctl	r2,status
   192a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   192a4:	e0fffa17 	ldw	r3,-24(fp)
   192a8:	00bfff84 	movi	r2,-2
   192ac:	1884703a 	and	r2,r3,r2
   192b0:	1001703a 	wrctl	status,r2
  
  return context;
   192b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   192b8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   192bc:	e13ffe17 	ldw	r4,-8(fp)
   192c0:	00163e80 	call	163e8 <OS_StrLen>
   192c4:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   192c8:	e0bff903 	ldbu	r2,-28(fp)
   192cc:	10800830 	cmpltui	r2,r2,32
   192d0:	1000081e 	bne	r2,zero,192f4 <OSMemNameSet+0xd8>
   192d4:	e0bff817 	ldw	r2,-32(fp)
   192d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   192dc:	e0bffb17 	ldw	r2,-20(fp)
   192e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   192e4:	e0bfff17 	ldw	r2,-4(fp)
   192e8:	00c018c4 	movi	r3,99
   192ec:	10c00005 	stb	r3,0(r2)
        return;
   192f0:	00000b06 	br	19320 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   192f4:	e0bffd17 	ldw	r2,-12(fp)
   192f8:	10800504 	addi	r2,r2,20
   192fc:	1009883a 	mov	r4,r2
   19300:	e17ffe17 	ldw	r5,-8(fp)
   19304:	00163740 	call	16374 <OS_StrCopy>
   19308:	e0bff817 	ldw	r2,-32(fp)
   1930c:	e0bffc15 	stw	r2,-16(fp)
   19310:	e0bffc17 	ldw	r2,-16(fp)
   19314:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19318:	e0bfff17 	ldw	r2,-4(fp)
   1931c:	10000005 	stb	zero,0(r2)
}
   19320:	e037883a 	mov	sp,fp
   19324:	dfc00117 	ldw	ra,4(sp)
   19328:	df000017 	ldw	fp,0(sp)
   1932c:	dec00204 	addi	sp,sp,8
   19330:	f800283a 	ret

00019334 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   19334:	defff904 	addi	sp,sp,-28
   19338:	df000615 	stw	fp,24(sp)
   1933c:	df000604 	addi	fp,sp,24
   19340:	e13ffe15 	stw	r4,-8(fp)
   19344:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19348:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1934c:	e0bffe17 	ldw	r2,-8(fp)
   19350:	1000021e 	bne	r2,zero,1935c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   19354:	00801804 	movi	r2,96
   19358:	00002806 	br	193fc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1935c:	e0bfff17 	ldw	r2,-4(fp)
   19360:	1000021e 	bne	r2,zero,1936c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   19364:	008017c4 	movi	r2,95
   19368:	00002406 	br	193fc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1936c:	0005303a 	rdctl	r2,status
   19370:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19374:	e0fffb17 	ldw	r3,-20(fp)
   19378:	00bfff84 	movi	r2,-2
   1937c:	1884703a 	and	r2,r3,r2
   19380:	1001703a 	wrctl	status,r2
  
  return context;
   19384:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19388:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1938c:	e0bffe17 	ldw	r2,-8(fp)
   19390:	10c00417 	ldw	r3,16(r2)
   19394:	e0bffe17 	ldw	r2,-8(fp)
   19398:	10800317 	ldw	r2,12(r2)
   1939c:	18800636 	bltu	r3,r2,193b8 <OSMemPut+0x84>
   193a0:	e0bffa17 	ldw	r2,-24(fp)
   193a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193a8:	e0bffc17 	ldw	r2,-16(fp)
   193ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   193b0:	00801784 	movi	r2,94
   193b4:	00001106 	br	193fc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   193b8:	e0bffe17 	ldw	r2,-8(fp)
   193bc:	10c00117 	ldw	r3,4(r2)
   193c0:	e0bfff17 	ldw	r2,-4(fp)
   193c4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   193c8:	e0bffe17 	ldw	r2,-8(fp)
   193cc:	e0ffff17 	ldw	r3,-4(fp)
   193d0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   193d4:	e0bffe17 	ldw	r2,-8(fp)
   193d8:	10800417 	ldw	r2,16(r2)
   193dc:	10c00044 	addi	r3,r2,1
   193e0:	e0bffe17 	ldw	r2,-8(fp)
   193e4:	10c00415 	stw	r3,16(r2)
   193e8:	e0bffa17 	ldw	r2,-24(fp)
   193ec:	e0bffd15 	stw	r2,-12(fp)
   193f0:	e0bffd17 	ldw	r2,-12(fp)
   193f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   193f8:	0005883a 	mov	r2,zero
}
   193fc:	e037883a 	mov	sp,fp
   19400:	df000017 	ldw	fp,0(sp)
   19404:	dec00104 	addi	sp,sp,4
   19408:	f800283a 	ret

0001940c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1940c:	defffa04 	addi	sp,sp,-24
   19410:	df000515 	stw	fp,20(sp)
   19414:	df000504 	addi	fp,sp,20
   19418:	e13ffe15 	stw	r4,-8(fp)
   1941c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19420:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   19424:	e0bffe17 	ldw	r2,-8(fp)
   19428:	1000021e 	bne	r2,zero,19434 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1942c:	00801804 	movi	r2,96
   19430:	00002c06 	br	194e4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   19434:	e0bfff17 	ldw	r2,-4(fp)
   19438:	1000021e 	bne	r2,zero,19444 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1943c:	00801844 	movi	r2,97
   19440:	00002806 	br	194e4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19444:	0005303a 	rdctl	r2,status
   19448:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1944c:	e0fffc17 	ldw	r3,-16(fp)
   19450:	00bfff84 	movi	r2,-2
   19454:	1884703a 	and	r2,r3,r2
   19458:	1001703a 	wrctl	status,r2
  
  return context;
   1945c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19460:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   19464:	e0bffe17 	ldw	r2,-8(fp)
   19468:	10c00017 	ldw	r3,0(r2)
   1946c:	e0bfff17 	ldw	r2,-4(fp)
   19470:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   19474:	e0bffe17 	ldw	r2,-8(fp)
   19478:	10c00117 	ldw	r3,4(r2)
   1947c:	e0bfff17 	ldw	r2,-4(fp)
   19480:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   19484:	e0bffe17 	ldw	r2,-8(fp)
   19488:	10c00217 	ldw	r3,8(r2)
   1948c:	e0bfff17 	ldw	r2,-4(fp)
   19490:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   19494:	e0bffe17 	ldw	r2,-8(fp)
   19498:	10c00317 	ldw	r3,12(r2)
   1949c:	e0bfff17 	ldw	r2,-4(fp)
   194a0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   194a4:	e0bffe17 	ldw	r2,-8(fp)
   194a8:	10c00417 	ldw	r3,16(r2)
   194ac:	e0bfff17 	ldw	r2,-4(fp)
   194b0:	10c00415 	stw	r3,16(r2)
   194b4:	e0bffb17 	ldw	r2,-20(fp)
   194b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   194bc:	e0bffd17 	ldw	r2,-12(fp)
   194c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   194c4:	e0bfff17 	ldw	r2,-4(fp)
   194c8:	10c00317 	ldw	r3,12(r2)
   194cc:	e0bfff17 	ldw	r2,-4(fp)
   194d0:	10800417 	ldw	r2,16(r2)
   194d4:	1887c83a 	sub	r3,r3,r2
   194d8:	e0bfff17 	ldw	r2,-4(fp)
   194dc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   194e0:	0005883a 	mov	r2,zero
}
   194e4:	e037883a 	mov	sp,fp
   194e8:	df000017 	ldw	fp,0(sp)
   194ec:	dec00104 	addi	sp,sp,4
   194f0:	f800283a 	ret

000194f4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   194f4:	defffc04 	addi	sp,sp,-16
   194f8:	dfc00315 	stw	ra,12(sp)
   194fc:	df000215 	stw	fp,8(sp)
   19500:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   19504:	01000174 	movhi	r4,5
   19508:	21313704 	addi	r4,r4,-15140
   1950c:	01430c04 	movi	r5,3120
   19510:	00161840 	call	16184 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   19514:	00800174 	movhi	r2,5
   19518:	10b13704 	addi	r2,r2,-15140
   1951c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   19520:	e03fff0d 	sth	zero,-4(fp)
   19524:	00001306 	br	19574 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   19528:	e0bfff0b 	ldhu	r2,-4(fp)
   1952c:	10800044 	addi	r2,r2,1
   19530:	10c00d24 	muli	r3,r2,52
   19534:	00800174 	movhi	r2,5
   19538:	10b13704 	addi	r2,r2,-15140
   1953c:	1887883a 	add	r3,r3,r2
   19540:	e0bffe17 	ldw	r2,-8(fp)
   19544:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   19548:	e0bffe17 	ldw	r2,-8(fp)
   1954c:	00c00fc4 	movi	r3,63
   19550:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   19554:	e0bffe17 	ldw	r2,-8(fp)
   19558:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1955c:	e0bffe17 	ldw	r2,-8(fp)
   19560:	10800d04 	addi	r2,r2,52
   19564:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   19568:	e0bfff0b 	ldhu	r2,-4(fp)
   1956c:	10800044 	addi	r2,r2,1
   19570:	e0bfff0d 	sth	r2,-4(fp)
   19574:	e0bfff0b 	ldhu	r2,-4(fp)
   19578:	10800ef0 	cmpltui	r2,r2,59
   1957c:	103fea1e 	bne	r2,zero,19528 <__alt_mem_Flash_flash_data+0xf4019528>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   19580:	e0bffe17 	ldw	r2,-8(fp)
   19584:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   19588:	e0bffe17 	ldw	r2,-8(fp)
   1958c:	00c00fc4 	movi	r3,63
   19590:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   19594:	e0bffe17 	ldw	r2,-8(fp)
   19598:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1959c:	008000f4 	movhi	r2,3
   195a0:	10a80104 	addi	r2,r2,-24572
   195a4:	00c00174 	movhi	r3,5
   195a8:	18f13704 	addi	r3,r3,-15140
   195ac:	10c00015 	stw	r3,0(r2)
#endif
}
   195b0:	e037883a 	mov	sp,fp
   195b4:	dfc00117 	ldw	ra,4(sp)
   195b8:	df000017 	ldw	fp,0(sp)
   195bc:	dec00204 	addi	sp,sp,8
   195c0:	f800283a 	ret

000195c4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   195c4:	defff804 	addi	sp,sp,-32
   195c8:	df000715 	stw	fp,28(sp)
   195cc:	df000704 	addi	fp,sp,28
   195d0:	e13ffe15 	stw	r4,-8(fp)
   195d4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   195d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   195dc:	e0bfff17 	ldw	r2,-4(fp)
   195e0:	1000021e 	bne	r2,zero,195ec <OSQAccept+0x28>
        return ((void *)0);
   195e4:	0005883a 	mov	r2,zero
   195e8:	00004206 	br	196f4 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   195ec:	e0bffe17 	ldw	r2,-8(fp)
   195f0:	1000051e 	bne	r2,zero,19608 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   195f4:	e0bfff17 	ldw	r2,-4(fp)
   195f8:	00c00104 	movi	r3,4
   195fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19600:	0005883a 	mov	r2,zero
   19604:	00003b06 	br	196f4 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   19608:	e0bffe17 	ldw	r2,-8(fp)
   1960c:	10800003 	ldbu	r2,0(r2)
   19610:	10803fcc 	andi	r2,r2,255
   19614:	108000a0 	cmpeqi	r2,r2,2
   19618:	1000051e 	bne	r2,zero,19630 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1961c:	e0bfff17 	ldw	r2,-4(fp)
   19620:	00c00044 	movi	r3,1
   19624:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19628:	0005883a 	mov	r2,zero
   1962c:	00003106 	br	196f4 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19630:	0005303a 	rdctl	r2,status
   19634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19638:	e0fffc17 	ldw	r3,-16(fp)
   1963c:	00bfff84 	movi	r2,-2
   19640:	1884703a 	and	r2,r3,r2
   19644:	1001703a 	wrctl	status,r2
  
  return context;
   19648:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1964c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19650:	e0bffe17 	ldw	r2,-8(fp)
   19654:	10800117 	ldw	r2,4(r2)
   19658:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1965c:	e0bffb17 	ldw	r2,-20(fp)
   19660:	1080058b 	ldhu	r2,22(r2)
   19664:	10bfffcc 	andi	r2,r2,65535
   19668:	10001926 	beq	r2,zero,196d0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1966c:	e0bffb17 	ldw	r2,-20(fp)
   19670:	10800417 	ldw	r2,16(r2)
   19674:	11000104 	addi	r4,r2,4
   19678:	e0fffb17 	ldw	r3,-20(fp)
   1967c:	19000415 	stw	r4,16(r3)
   19680:	10800017 	ldw	r2,0(r2)
   19684:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   19688:	e0bffb17 	ldw	r2,-20(fp)
   1968c:	1080058b 	ldhu	r2,22(r2)
   19690:	10bfffc4 	addi	r2,r2,-1
   19694:	1007883a 	mov	r3,r2
   19698:	e0bffb17 	ldw	r2,-20(fp)
   1969c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   196a0:	e0bffb17 	ldw	r2,-20(fp)
   196a4:	10c00417 	ldw	r3,16(r2)
   196a8:	e0bffb17 	ldw	r2,-20(fp)
   196ac:	10800217 	ldw	r2,8(r2)
   196b0:	1880041e 	bne	r3,r2,196c4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   196b4:	e0bffb17 	ldw	r2,-20(fp)
   196b8:	10c00117 	ldw	r3,4(r2)
   196bc:	e0bffb17 	ldw	r2,-20(fp)
   196c0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   196c4:	e0bfff17 	ldw	r2,-4(fp)
   196c8:	10000005 	stb	zero,0(r2)
   196cc:	00000406 	br	196e0 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   196d0:	e0bfff17 	ldw	r2,-4(fp)
   196d4:	00c007c4 	movi	r3,31
   196d8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   196dc:	e03ff915 	stw	zero,-28(fp)
   196e0:	e0bffa17 	ldw	r2,-24(fp)
   196e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   196e8:	e0bffd17 	ldw	r2,-12(fp)
   196ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   196f0:	e0bff917 	ldw	r2,-28(fp)
}
   196f4:	e037883a 	mov	sp,fp
   196f8:	df000017 	ldw	fp,0(sp)
   196fc:	dec00104 	addi	sp,sp,4
   19700:	f800283a 	ret

00019704 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   19704:	defff404 	addi	sp,sp,-48
   19708:	dfc00b15 	stw	ra,44(sp)
   1970c:	df000a15 	stw	fp,40(sp)
   19710:	df000a04 	addi	fp,sp,40
   19714:	e13ffe15 	stw	r4,-8(fp)
   19718:	2805883a 	mov	r2,r5
   1971c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19720:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   19724:	008000f4 	movhi	r2,3
   19728:	10a80604 	addi	r2,r2,-24552
   1972c:	10800003 	ldbu	r2,0(r2)
   19730:	10803fcc 	andi	r2,r2,255
   19734:	10000226 	beq	r2,zero,19740 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   19738:	0005883a 	mov	r2,zero
   1973c:	00006b06 	br	198ec <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19740:	0005303a 	rdctl	r2,status
   19744:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19748:	e0fff917 	ldw	r3,-28(fp)
   1974c:	00bfff84 	movi	r2,-2
   19750:	1884703a 	and	r2,r3,r2
   19754:	1001703a 	wrctl	status,r2
  
  return context;
   19758:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1975c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   19760:	008000f4 	movhi	r2,3
   19764:	10a80504 	addi	r2,r2,-24556
   19768:	10800017 	ldw	r2,0(r2)
   1976c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   19770:	008000f4 	movhi	r2,3
   19774:	10a80504 	addi	r2,r2,-24556
   19778:	10800017 	ldw	r2,0(r2)
   1977c:	10000726 	beq	r2,zero,1979c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   19780:	008000f4 	movhi	r2,3
   19784:	10a80504 	addi	r2,r2,-24556
   19788:	10800017 	ldw	r2,0(r2)
   1978c:	10c00117 	ldw	r3,4(r2)
   19790:	008000f4 	movhi	r2,3
   19794:	10a80504 	addi	r2,r2,-24556
   19798:	10c00015 	stw	r3,0(r2)
   1979c:	e0bff717 	ldw	r2,-36(fp)
   197a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197a4:	e0bffa17 	ldw	r2,-24(fp)
   197a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   197ac:	e0bff617 	ldw	r2,-40(fp)
   197b0:	10004d26 	beq	r2,zero,198e8 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   197b4:	0005303a 	rdctl	r2,status
   197b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   197bc:	e0fffb17 	ldw	r3,-20(fp)
   197c0:	00bfff84 	movi	r2,-2
   197c4:	1884703a 	and	r2,r3,r2
   197c8:	1001703a 	wrctl	status,r2
  
  return context;
   197cc:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   197d0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   197d4:	008000f4 	movhi	r2,3
   197d8:	10a80304 	addi	r2,r2,-24564
   197dc:	10800017 	ldw	r2,0(r2)
   197e0:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   197e4:	e0bff817 	ldw	r2,-32(fp)
   197e8:	10003126 	beq	r2,zero,198b0 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   197ec:	008000f4 	movhi	r2,3
   197f0:	10a80304 	addi	r2,r2,-24564
   197f4:	10800017 	ldw	r2,0(r2)
   197f8:	10c00017 	ldw	r3,0(r2)
   197fc:	008000f4 	movhi	r2,3
   19800:	10a80304 	addi	r2,r2,-24564
   19804:	10c00015 	stw	r3,0(r2)
   19808:	e0bff717 	ldw	r2,-36(fp)
   1980c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19810:	e0bffc17 	ldw	r2,-16(fp)
   19814:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   19818:	e0bff817 	ldw	r2,-32(fp)
   1981c:	e0fffe17 	ldw	r3,-8(fp)
   19820:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   19824:	e0bfff0b 	ldhu	r2,-4(fp)
   19828:	1085883a 	add	r2,r2,r2
   1982c:	1085883a 	add	r2,r2,r2
   19830:	1007883a 	mov	r3,r2
   19834:	e0bffe17 	ldw	r2,-8(fp)
   19838:	10c7883a 	add	r3,r2,r3
   1983c:	e0bff817 	ldw	r2,-32(fp)
   19840:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   19844:	e0bff817 	ldw	r2,-32(fp)
   19848:	e0fffe17 	ldw	r3,-8(fp)
   1984c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   19850:	e0bff817 	ldw	r2,-32(fp)
   19854:	e0fffe17 	ldw	r3,-8(fp)
   19858:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1985c:	e0bff817 	ldw	r2,-32(fp)
   19860:	e0ffff0b 	ldhu	r3,-4(fp)
   19864:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   19868:	e0bff817 	ldw	r2,-32(fp)
   1986c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   19870:	e0bff617 	ldw	r2,-40(fp)
   19874:	00c00084 	movi	r3,2
   19878:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1987c:	e0bff617 	ldw	r2,-40(fp)
   19880:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   19884:	e0bff617 	ldw	r2,-40(fp)
   19888:	e0fff817 	ldw	r3,-32(fp)
   1988c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   19890:	e0bff617 	ldw	r2,-40(fp)
   19894:	00c00fc4 	movi	r3,63
   19898:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1989c:	e0bff617 	ldw	r2,-40(fp)
   198a0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   198a4:	e13ff617 	ldw	r4,-40(fp)
   198a8:	0015dc00 	call	15dc0 <OS_EventWaitListInit>
   198ac:	00000e06 	br	198e8 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   198b0:	008000f4 	movhi	r2,3
   198b4:	10a80504 	addi	r2,r2,-24556
   198b8:	10c00017 	ldw	r3,0(r2)
   198bc:	e0bff617 	ldw	r2,-40(fp)
   198c0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   198c4:	008000f4 	movhi	r2,3
   198c8:	10a80504 	addi	r2,r2,-24556
   198cc:	e0fff617 	ldw	r3,-40(fp)
   198d0:	10c00015 	stw	r3,0(r2)
   198d4:	e0bff717 	ldw	r2,-36(fp)
   198d8:	e0bffd15 	stw	r2,-12(fp)
   198dc:	e0bffd17 	ldw	r2,-12(fp)
   198e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   198e4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   198e8:	e0bff617 	ldw	r2,-40(fp)
}
   198ec:	e037883a 	mov	sp,fp
   198f0:	dfc00117 	ldw	ra,4(sp)
   198f4:	df000017 	ldw	fp,0(sp)
   198f8:	dec00204 	addi	sp,sp,8
   198fc:	f800283a 	ret

00019900 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19900:	defff204 	addi	sp,sp,-56
   19904:	dfc00d15 	stw	ra,52(sp)
   19908:	df000c15 	stw	fp,48(sp)
   1990c:	df000c04 	addi	fp,sp,48
   19910:	e13ffd15 	stw	r4,-12(fp)
   19914:	2805883a 	mov	r2,r5
   19918:	e1bfff15 	stw	r6,-4(fp)
   1991c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19920:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19924:	e0bfff17 	ldw	r2,-4(fp)
   19928:	1000021e 	bne	r2,zero,19934 <OSQDel+0x34>
        return (pevent);
   1992c:	e0bffd17 	ldw	r2,-12(fp)
   19930:	0000a006 	br	19bb4 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19934:	e0bffd17 	ldw	r2,-12(fp)
   19938:	1000051e 	bne	r2,zero,19950 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1993c:	e0bfff17 	ldw	r2,-4(fp)
   19940:	00c00104 	movi	r3,4
   19944:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19948:	e0bffd17 	ldw	r2,-12(fp)
   1994c:	00009906 	br	19bb4 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   19950:	e0bffd17 	ldw	r2,-12(fp)
   19954:	10800003 	ldbu	r2,0(r2)
   19958:	10803fcc 	andi	r2,r2,255
   1995c:	108000a0 	cmpeqi	r2,r2,2
   19960:	1000051e 	bne	r2,zero,19978 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19964:	e0bfff17 	ldw	r2,-4(fp)
   19968:	00c00044 	movi	r3,1
   1996c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19970:	e0bffd17 	ldw	r2,-12(fp)
   19974:	00008f06 	br	19bb4 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19978:	008000f4 	movhi	r2,3
   1997c:	10a80604 	addi	r2,r2,-24552
   19980:	10800003 	ldbu	r2,0(r2)
   19984:	10803fcc 	andi	r2,r2,255
   19988:	10000526 	beq	r2,zero,199a0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1998c:	e0bfff17 	ldw	r2,-4(fp)
   19990:	00c003c4 	movi	r3,15
   19994:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19998:	e0bffd17 	ldw	r2,-12(fp)
   1999c:	00008506 	br	19bb4 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199a0:	0005303a 	rdctl	r2,status
   199a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   199a8:	e0fff817 	ldw	r3,-32(fp)
   199ac:	00bfff84 	movi	r2,-2
   199b0:	1884703a 	and	r2,r3,r2
   199b4:	1001703a 	wrctl	status,r2
  
  return context;
   199b8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   199bc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   199c0:	e0bffd17 	ldw	r2,-12(fp)
   199c4:	10800283 	ldbu	r2,10(r2)
   199c8:	10803fcc 	andi	r2,r2,255
   199cc:	10000326 	beq	r2,zero,199dc <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   199d0:	00800044 	movi	r2,1
   199d4:	e0bff405 	stb	r2,-48(fp)
   199d8:	00000106 	br	199e0 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   199dc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   199e0:	e0bffe03 	ldbu	r2,-8(fp)
   199e4:	10000326 	beq	r2,zero,199f4 <OSQDel+0xf4>
   199e8:	10800060 	cmpeqi	r2,r2,1
   199ec:	1000381e 	bne	r2,zero,19ad0 <OSQDel+0x1d0>
   199f0:	00006506 	br	19b88 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   199f4:	e0bff403 	ldbu	r2,-48(fp)
   199f8:	1000261e 	bne	r2,zero,19a94 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   199fc:	e0bffd17 	ldw	r2,-12(fp)
   19a00:	00c00fc4 	movi	r3,63
   19a04:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   19a08:	e0bffd17 	ldw	r2,-12(fp)
   19a0c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   19a10:	e0bffd17 	ldw	r2,-12(fp)
   19a14:	10800117 	ldw	r2,4(r2)
   19a18:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   19a1c:	008000f4 	movhi	r2,3
   19a20:	10a80304 	addi	r2,r2,-24564
   19a24:	10c00017 	ldw	r3,0(r2)
   19a28:	e0bff717 	ldw	r2,-36(fp)
   19a2c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   19a30:	008000f4 	movhi	r2,3
   19a34:	10a80304 	addi	r2,r2,-24564
   19a38:	e0fff717 	ldw	r3,-36(fp)
   19a3c:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19a40:	e0bffd17 	ldw	r2,-12(fp)
   19a44:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19a48:	008000f4 	movhi	r2,3
   19a4c:	10a80504 	addi	r2,r2,-24556
   19a50:	10c00017 	ldw	r3,0(r2)
   19a54:	e0bffd17 	ldw	r2,-12(fp)
   19a58:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   19a5c:	e0bffd17 	ldw	r2,-12(fp)
   19a60:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19a64:	008000f4 	movhi	r2,3
   19a68:	10a80504 	addi	r2,r2,-24556
   19a6c:	e0fffd17 	ldw	r3,-12(fp)
   19a70:	10c00015 	stw	r3,0(r2)
   19a74:	e0bff617 	ldw	r2,-40(fp)
   19a78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a7c:	e0bff917 	ldw	r2,-28(fp)
   19a80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   19a84:	e0bfff17 	ldw	r2,-4(fp)
   19a88:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   19a8c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19a90:	00004706 	br	19bb0 <OSQDel+0x2b0>
   19a94:	e0bff617 	ldw	r2,-40(fp)
   19a98:	e0bffa15 	stw	r2,-24(fp)
   19a9c:	e0bffa17 	ldw	r2,-24(fp)
   19aa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19aa4:	e0bfff17 	ldw	r2,-4(fp)
   19aa8:	00c01244 	movi	r3,73
   19aac:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19ab0:	e0bffd17 	ldw	r2,-12(fp)
   19ab4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   19ab8:	00003d06 	br	19bb0 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   19abc:	e13ffd17 	ldw	r4,-12(fp)
   19ac0:	000b883a 	mov	r5,zero
   19ac4:	01800104 	movi	r6,4
   19ac8:	000f883a 	mov	r7,zero
   19acc:	00158200 	call	15820 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   19ad0:	e0bffd17 	ldw	r2,-12(fp)
   19ad4:	10800283 	ldbu	r2,10(r2)
   19ad8:	10803fcc 	andi	r2,r2,255
   19adc:	103ff71e 	bne	r2,zero,19abc <__alt_mem_Flash_flash_data+0xf4019abc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19ae0:	e0bffd17 	ldw	r2,-12(fp)
   19ae4:	00c00fc4 	movi	r3,63
   19ae8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19aec:	e0bffd17 	ldw	r2,-12(fp)
   19af0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   19af4:	e0bffd17 	ldw	r2,-12(fp)
   19af8:	10800117 	ldw	r2,4(r2)
   19afc:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   19b00:	008000f4 	movhi	r2,3
   19b04:	10a80304 	addi	r2,r2,-24564
   19b08:	10c00017 	ldw	r3,0(r2)
   19b0c:	e0bff717 	ldw	r2,-36(fp)
   19b10:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   19b14:	008000f4 	movhi	r2,3
   19b18:	10a80304 	addi	r2,r2,-24564
   19b1c:	e0fff717 	ldw	r3,-36(fp)
   19b20:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19b24:	e0bffd17 	ldw	r2,-12(fp)
   19b28:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19b2c:	008000f4 	movhi	r2,3
   19b30:	10a80504 	addi	r2,r2,-24556
   19b34:	10c00017 	ldw	r3,0(r2)
   19b38:	e0bffd17 	ldw	r2,-12(fp)
   19b3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19b40:	e0bffd17 	ldw	r2,-12(fp)
   19b44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19b48:	008000f4 	movhi	r2,3
   19b4c:	10a80504 	addi	r2,r2,-24556
   19b50:	e0fffd17 	ldw	r3,-12(fp)
   19b54:	10c00015 	stw	r3,0(r2)
   19b58:	e0bff617 	ldw	r2,-40(fp)
   19b5c:	e0bffb15 	stw	r2,-20(fp)
   19b60:	e0bffb17 	ldw	r2,-20(fp)
   19b64:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19b68:	e0bff403 	ldbu	r2,-48(fp)
   19b6c:	10800058 	cmpnei	r2,r2,1
   19b70:	1000011e 	bne	r2,zero,19b78 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19b74:	00162380 	call	16238 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19b78:	e0bfff17 	ldw	r2,-4(fp)
   19b7c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   19b80:	e03ff515 	stw	zero,-44(fp)
             break;
   19b84:	00000a06 	br	19bb0 <OSQDel+0x2b0>
   19b88:	e0bff617 	ldw	r2,-40(fp)
   19b8c:	e0bffc15 	stw	r2,-16(fp)
   19b90:	e0bffc17 	ldw	r2,-16(fp)
   19b94:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19b98:	e0bfff17 	ldw	r2,-4(fp)
   19b9c:	00c001c4 	movi	r3,7
   19ba0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19ba4:	e0bffd17 	ldw	r2,-12(fp)
   19ba8:	e0bff515 	stw	r2,-44(fp)
             break;
   19bac:	0001883a 	nop
    }
    return (pevent_return);
   19bb0:	e0bff517 	ldw	r2,-44(fp)
}
   19bb4:	e037883a 	mov	sp,fp
   19bb8:	dfc00117 	ldw	ra,4(sp)
   19bbc:	df000017 	ldw	fp,0(sp)
   19bc0:	dec00204 	addi	sp,sp,8
   19bc4:	f800283a 	ret

00019bc8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   19bc8:	defffa04 	addi	sp,sp,-24
   19bcc:	df000515 	stw	fp,20(sp)
   19bd0:	df000504 	addi	fp,sp,20
   19bd4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19bd8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19bdc:	e0bfff17 	ldw	r2,-4(fp)
   19be0:	1000021e 	bne	r2,zero,19bec <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   19be4:	00800104 	movi	r2,4
   19be8:	00002106 	br	19c70 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19bec:	e0bfff17 	ldw	r2,-4(fp)
   19bf0:	10800003 	ldbu	r2,0(r2)
   19bf4:	10803fcc 	andi	r2,r2,255
   19bf8:	108000a0 	cmpeqi	r2,r2,2
   19bfc:	1000021e 	bne	r2,zero,19c08 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   19c00:	00800044 	movi	r2,1
   19c04:	00001a06 	br	19c70 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c08:	0005303a 	rdctl	r2,status
   19c0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c10:	e0fffd17 	ldw	r3,-12(fp)
   19c14:	00bfff84 	movi	r2,-2
   19c18:	1884703a 	and	r2,r3,r2
   19c1c:	1001703a 	wrctl	status,r2
  
  return context;
   19c20:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19c24:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   19c28:	e0bfff17 	ldw	r2,-4(fp)
   19c2c:	10800117 	ldw	r2,4(r2)
   19c30:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   19c34:	e0bffc17 	ldw	r2,-16(fp)
   19c38:	10c00117 	ldw	r3,4(r2)
   19c3c:	e0bffc17 	ldw	r2,-16(fp)
   19c40:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   19c44:	e0bffc17 	ldw	r2,-16(fp)
   19c48:	10c00117 	ldw	r3,4(r2)
   19c4c:	e0bffc17 	ldw	r2,-16(fp)
   19c50:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   19c54:	e0bffc17 	ldw	r2,-16(fp)
   19c58:	1000058d 	sth	zero,22(r2)
   19c5c:	e0bffb17 	ldw	r2,-20(fp)
   19c60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c64:	e0bffe17 	ldw	r2,-8(fp)
   19c68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19c6c:	0005883a 	mov	r2,zero
}
   19c70:	e037883a 	mov	sp,fp
   19c74:	df000017 	ldw	fp,0(sp)
   19c78:	dec00104 	addi	sp,sp,4
   19c7c:	f800283a 	ret

00019c80 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19c80:	defff304 	addi	sp,sp,-52
   19c84:	dfc00c15 	stw	ra,48(sp)
   19c88:	df000b15 	stw	fp,44(sp)
   19c8c:	df000b04 	addi	fp,sp,44
   19c90:	e13ffd15 	stw	r4,-12(fp)
   19c94:	2805883a 	mov	r2,r5
   19c98:	e1bfff15 	stw	r6,-4(fp)
   19c9c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19ca0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   19ca4:	e0bfff17 	ldw	r2,-4(fp)
   19ca8:	1000021e 	bne	r2,zero,19cb4 <OSQPend+0x34>
        return ((void *)0);
   19cac:	0005883a 	mov	r2,zero
   19cb0:	0000ad06 	br	19f68 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   19cb4:	e0bffd17 	ldw	r2,-12(fp)
   19cb8:	1000051e 	bne	r2,zero,19cd0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19cbc:	e0bfff17 	ldw	r2,-4(fp)
   19cc0:	00c00104 	movi	r3,4
   19cc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19cc8:	0005883a 	mov	r2,zero
   19ccc:	0000a606 	br	19f68 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   19cd0:	e0bffd17 	ldw	r2,-12(fp)
   19cd4:	10800003 	ldbu	r2,0(r2)
   19cd8:	10803fcc 	andi	r2,r2,255
   19cdc:	108000a0 	cmpeqi	r2,r2,2
   19ce0:	1000051e 	bne	r2,zero,19cf8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19ce4:	e0bfff17 	ldw	r2,-4(fp)
   19ce8:	00c00044 	movi	r3,1
   19cec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19cf0:	0005883a 	mov	r2,zero
   19cf4:	00009c06 	br	19f68 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   19cf8:	008000f4 	movhi	r2,3
   19cfc:	10a80604 	addi	r2,r2,-24552
   19d00:	10800003 	ldbu	r2,0(r2)
   19d04:	10803fcc 	andi	r2,r2,255
   19d08:	10000526 	beq	r2,zero,19d20 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   19d0c:	e0bfff17 	ldw	r2,-4(fp)
   19d10:	00c00084 	movi	r3,2
   19d14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19d18:	0005883a 	mov	r2,zero
   19d1c:	00009206 	br	19f68 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   19d20:	008000f4 	movhi	r2,3
   19d24:	10a7f804 	addi	r2,r2,-24608
   19d28:	10800003 	ldbu	r2,0(r2)
   19d2c:	10803fcc 	andi	r2,r2,255
   19d30:	10000526 	beq	r2,zero,19d48 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   19d34:	e0bfff17 	ldw	r2,-4(fp)
   19d38:	00c00344 	movi	r3,13
   19d3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19d40:	0005883a 	mov	r2,zero
   19d44:	00008806 	br	19f68 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d48:	0005303a 	rdctl	r2,status
   19d4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d50:	e0fff817 	ldw	r3,-32(fp)
   19d54:	00bfff84 	movi	r2,-2
   19d58:	1884703a 	and	r2,r3,r2
   19d5c:	1001703a 	wrctl	status,r2
  
  return context;
   19d60:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19d64:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19d68:	e0bffd17 	ldw	r2,-12(fp)
   19d6c:	10800117 	ldw	r2,4(r2)
   19d70:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   19d74:	e0bff717 	ldw	r2,-36(fp)
   19d78:	1080058b 	ldhu	r2,22(r2)
   19d7c:	10bfffcc 	andi	r2,r2,65535
   19d80:	10001e26 	beq	r2,zero,19dfc <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   19d84:	e0bff717 	ldw	r2,-36(fp)
   19d88:	10800417 	ldw	r2,16(r2)
   19d8c:	11000104 	addi	r4,r2,4
   19d90:	e0fff717 	ldw	r3,-36(fp)
   19d94:	19000415 	stw	r4,16(r3)
   19d98:	10800017 	ldw	r2,0(r2)
   19d9c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   19da0:	e0bff717 	ldw	r2,-36(fp)
   19da4:	1080058b 	ldhu	r2,22(r2)
   19da8:	10bfffc4 	addi	r2,r2,-1
   19dac:	1007883a 	mov	r3,r2
   19db0:	e0bff717 	ldw	r2,-36(fp)
   19db4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   19db8:	e0bff717 	ldw	r2,-36(fp)
   19dbc:	10c00417 	ldw	r3,16(r2)
   19dc0:	e0bff717 	ldw	r2,-36(fp)
   19dc4:	10800217 	ldw	r2,8(r2)
   19dc8:	1880041e 	bne	r3,r2,19ddc <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   19dcc:	e0bff717 	ldw	r2,-36(fp)
   19dd0:	10c00117 	ldw	r3,4(r2)
   19dd4:	e0bff717 	ldw	r2,-36(fp)
   19dd8:	10c00415 	stw	r3,16(r2)
   19ddc:	e0bff617 	ldw	r2,-40(fp)
   19de0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19de4:	e0bff917 	ldw	r2,-28(fp)
   19de8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   19dec:	e0bfff17 	ldw	r2,-4(fp)
   19df0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   19df4:	e0bff517 	ldw	r2,-44(fp)
   19df8:	00005b06 	br	19f68 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   19dfc:	008000f4 	movhi	r2,3
   19e00:	10a80704 	addi	r2,r2,-24548
   19e04:	10c00017 	ldw	r3,0(r2)
   19e08:	008000f4 	movhi	r2,3
   19e0c:	10a80704 	addi	r2,r2,-24548
   19e10:	10800017 	ldw	r2,0(r2)
   19e14:	10800c03 	ldbu	r2,48(r2)
   19e18:	10800114 	ori	r2,r2,4
   19e1c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19e20:	008000f4 	movhi	r2,3
   19e24:	10a80704 	addi	r2,r2,-24548
   19e28:	10800017 	ldw	r2,0(r2)
   19e2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   19e30:	008000f4 	movhi	r2,3
   19e34:	10a80704 	addi	r2,r2,-24548
   19e38:	10800017 	ldw	r2,0(r2)
   19e3c:	e0fffe0b 	ldhu	r3,-8(fp)
   19e40:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   19e44:	e13ffd17 	ldw	r4,-12(fp)
   19e48:	00159b80 	call	159b8 <OS_EventTaskWait>
   19e4c:	e0bff617 	ldw	r2,-40(fp)
   19e50:	e0bffa15 	stw	r2,-24(fp)
   19e54:	e0bffa17 	ldw	r2,-24(fp)
   19e58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   19e5c:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e60:	0005303a 	rdctl	r2,status
   19e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e68:	e0fffb17 	ldw	r3,-20(fp)
   19e6c:	00bfff84 	movi	r2,-2
   19e70:	1884703a 	and	r2,r3,r2
   19e74:	1001703a 	wrctl	status,r2
  
  return context;
   19e78:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   19e7c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19e80:	008000f4 	movhi	r2,3
   19e84:	10a80704 	addi	r2,r2,-24548
   19e88:	10800017 	ldw	r2,0(r2)
   19e8c:	10800c43 	ldbu	r2,49(r2)
   19e90:	10803fcc 	andi	r2,r2,255
   19e94:	10000326 	beq	r2,zero,19ea4 <OSQPend+0x224>
   19e98:	108000a0 	cmpeqi	r2,r2,2
   19e9c:	1000091e 	bne	r2,zero,19ec4 <OSQPend+0x244>
   19ea0:	00000d06 	br	19ed8 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   19ea4:	008000f4 	movhi	r2,3
   19ea8:	10a80704 	addi	r2,r2,-24548
   19eac:	10800017 	ldw	r2,0(r2)
   19eb0:	10800917 	ldw	r2,36(r2)
   19eb4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   19eb8:	e0bfff17 	ldw	r2,-4(fp)
   19ebc:	10000005 	stb	zero,0(r2)
             break;
   19ec0:	00001006 	br	19f04 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   19ec4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19ec8:	e0bfff17 	ldw	r2,-4(fp)
   19ecc:	00c00384 	movi	r3,14
   19ed0:	10c00005 	stb	r3,0(r2)
             break;
   19ed4:	00000b06 	br	19f04 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   19ed8:	008000f4 	movhi	r2,3
   19edc:	10a80704 	addi	r2,r2,-24548
   19ee0:	10800017 	ldw	r2,0(r2)
   19ee4:	1009883a 	mov	r4,r2
   19ee8:	e17ffd17 	ldw	r5,-12(fp)
   19eec:	0015c100 	call	15c10 <OS_EventTaskRemove>
             pmsg = (void *)0;
   19ef0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19ef4:	e0bfff17 	ldw	r2,-4(fp)
   19ef8:	00c00284 	movi	r3,10
   19efc:	10c00005 	stb	r3,0(r2)
             break;
   19f00:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19f04:	008000f4 	movhi	r2,3
   19f08:	10a80704 	addi	r2,r2,-24548
   19f0c:	10800017 	ldw	r2,0(r2)
   19f10:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19f14:	008000f4 	movhi	r2,3
   19f18:	10a80704 	addi	r2,r2,-24548
   19f1c:	10800017 	ldw	r2,0(r2)
   19f20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19f24:	008000f4 	movhi	r2,3
   19f28:	10a80704 	addi	r2,r2,-24548
   19f2c:	10800017 	ldw	r2,0(r2)
   19f30:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19f34:	008000f4 	movhi	r2,3
   19f38:	10a80704 	addi	r2,r2,-24548
   19f3c:	10800017 	ldw	r2,0(r2)
   19f40:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   19f44:	008000f4 	movhi	r2,3
   19f48:	10a80704 	addi	r2,r2,-24548
   19f4c:	10800017 	ldw	r2,0(r2)
   19f50:	10000915 	stw	zero,36(r2)
   19f54:	e0bff617 	ldw	r2,-40(fp)
   19f58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f5c:	e0bffc17 	ldw	r2,-16(fp)
   19f60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   19f64:	e0bff517 	ldw	r2,-44(fp)
}
   19f68:	e037883a 	mov	sp,fp
   19f6c:	dfc00117 	ldw	ra,4(sp)
   19f70:	df000017 	ldw	fp,0(sp)
   19f74:	dec00204 	addi	sp,sp,8
   19f78:	f800283a 	ret

00019f7c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19f7c:	defff604 	addi	sp,sp,-40
   19f80:	dfc00915 	stw	ra,36(sp)
   19f84:	df000815 	stw	fp,32(sp)
   19f88:	df000804 	addi	fp,sp,32
   19f8c:	e13ffd15 	stw	r4,-12(fp)
   19f90:	2805883a 	mov	r2,r5
   19f94:	e1bfff15 	stw	r6,-4(fp)
   19f98:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19f9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19fa0:	e0bfff17 	ldw	r2,-4(fp)
   19fa4:	1000021e 	bne	r2,zero,19fb0 <OSQPendAbort+0x34>
        return (0);
   19fa8:	0005883a 	mov	r2,zero
   19fac:	00004906 	br	1a0d4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19fb0:	e0bffd17 	ldw	r2,-12(fp)
   19fb4:	1000051e 	bne	r2,zero,19fcc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19fb8:	e0bfff17 	ldw	r2,-4(fp)
   19fbc:	00c00104 	movi	r3,4
   19fc0:	10c00005 	stb	r3,0(r2)
        return (0);
   19fc4:	0005883a 	mov	r2,zero
   19fc8:	00004206 	br	1a0d4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   19fcc:	e0bffd17 	ldw	r2,-12(fp)
   19fd0:	10800003 	ldbu	r2,0(r2)
   19fd4:	10803fcc 	andi	r2,r2,255
   19fd8:	108000a0 	cmpeqi	r2,r2,2
   19fdc:	1000051e 	bne	r2,zero,19ff4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19fe0:	e0bfff17 	ldw	r2,-4(fp)
   19fe4:	00c00044 	movi	r3,1
   19fe8:	10c00005 	stb	r3,0(r2)
        return (0);
   19fec:	0005883a 	mov	r2,zero
   19ff0:	00003806 	br	1a0d4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ff4:	0005303a 	rdctl	r2,status
   19ff8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ffc:	e0fffa17 	ldw	r3,-24(fp)
   1a000:	00bfff84 	movi	r2,-2
   1a004:	1884703a 	and	r2,r3,r2
   1a008:	1001703a 	wrctl	status,r2
  
  return context;
   1a00c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a010:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1a014:	e0bffd17 	ldw	r2,-12(fp)
   1a018:	10800283 	ldbu	r2,10(r2)
   1a01c:	10803fcc 	andi	r2,r2,255
   1a020:	10002526 	beq	r2,zero,1a0b8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1a024:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1a028:	e0bffe03 	ldbu	r2,-8(fp)
   1a02c:	10800060 	cmpeqi	r2,r2,1
   1a030:	10000e26 	beq	r2,zero,1a06c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1a034:	00000806 	br	1a058 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1a038:	e13ffd17 	ldw	r4,-12(fp)
   1a03c:	000b883a 	mov	r5,zero
   1a040:	01800104 	movi	r6,4
   1a044:	01c00084 	movi	r7,2
   1a048:	00158200 	call	15820 <OS_EventTaskRdy>
                     nbr_tasks++;
   1a04c:	e0bff803 	ldbu	r2,-32(fp)
   1a050:	10800044 	addi	r2,r2,1
   1a054:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1a058:	e0bffd17 	ldw	r2,-12(fp)
   1a05c:	10800283 	ldbu	r2,10(r2)
   1a060:	10803fcc 	andi	r2,r2,255
   1a064:	103ff41e 	bne	r2,zero,1a038 <__alt_mem_Flash_flash_data+0xf401a038>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1a068:	00000906 	br	1a090 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1a06c:	e13ffd17 	ldw	r4,-12(fp)
   1a070:	000b883a 	mov	r5,zero
   1a074:	01800104 	movi	r6,4
   1a078:	01c00084 	movi	r7,2
   1a07c:	00158200 	call	15820 <OS_EventTaskRdy>
                 nbr_tasks++;
   1a080:	e0bff803 	ldbu	r2,-32(fp)
   1a084:	10800044 	addi	r2,r2,1
   1a088:	e0bff805 	stb	r2,-32(fp)
                 break;
   1a08c:	0001883a 	nop
   1a090:	e0bff917 	ldw	r2,-28(fp)
   1a094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a098:	e0bffb17 	ldw	r2,-20(fp)
   1a09c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1a0a0:	00162380 	call	16238 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1a0a4:	e0bfff17 	ldw	r2,-4(fp)
   1a0a8:	00c00384 	movi	r3,14
   1a0ac:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1a0b0:	e0bff803 	ldbu	r2,-32(fp)
   1a0b4:	00000706 	br	1a0d4 <OSQPendAbort+0x158>
   1a0b8:	e0bff917 	ldw	r2,-28(fp)
   1a0bc:	e0bffc15 	stw	r2,-16(fp)
   1a0c0:	e0bffc17 	ldw	r2,-16(fp)
   1a0c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a0c8:	e0bfff17 	ldw	r2,-4(fp)
   1a0cc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1a0d0:	0005883a 	mov	r2,zero
}
   1a0d4:	e037883a 	mov	sp,fp
   1a0d8:	dfc00117 	ldw	ra,4(sp)
   1a0dc:	df000017 	ldw	fp,0(sp)
   1a0e0:	dec00204 	addi	sp,sp,8
   1a0e4:	f800283a 	ret

0001a0e8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1a0e8:	defff604 	addi	sp,sp,-40
   1a0ec:	dfc00915 	stw	ra,36(sp)
   1a0f0:	df000815 	stw	fp,32(sp)
   1a0f4:	df000804 	addi	fp,sp,32
   1a0f8:	e13ffe15 	stw	r4,-8(fp)
   1a0fc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a100:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1a104:	e0bffe17 	ldw	r2,-8(fp)
   1a108:	1000021e 	bne	r2,zero,1a114 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1a10c:	00800104 	movi	r2,4
   1a110:	00004a06 	br	1a23c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1a114:	e0bffe17 	ldw	r2,-8(fp)
   1a118:	10800003 	ldbu	r2,0(r2)
   1a11c:	10803fcc 	andi	r2,r2,255
   1a120:	108000a0 	cmpeqi	r2,r2,2
   1a124:	1000021e 	bne	r2,zero,1a130 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1a128:	00800044 	movi	r2,1
   1a12c:	00004306 	br	1a23c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a130:	0005303a 	rdctl	r2,status
   1a134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a138:	e0fffa17 	ldw	r3,-24(fp)
   1a13c:	00bfff84 	movi	r2,-2
   1a140:	1884703a 	and	r2,r3,r2
   1a144:	1001703a 	wrctl	status,r2
  
  return context;
   1a148:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a14c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1a150:	e0bffe17 	ldw	r2,-8(fp)
   1a154:	10800283 	ldbu	r2,10(r2)
   1a158:	10803fcc 	andi	r2,r2,255
   1a15c:	10000c26 	beq	r2,zero,1a190 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a160:	e13ffe17 	ldw	r4,-8(fp)
   1a164:	e17fff17 	ldw	r5,-4(fp)
   1a168:	01800104 	movi	r6,4
   1a16c:	000f883a 	mov	r7,zero
   1a170:	00158200 	call	15820 <OS_EventTaskRdy>
   1a174:	e0bff817 	ldw	r2,-32(fp)
   1a178:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a17c:	e0bffb17 	ldw	r2,-20(fp)
   1a180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1a184:	00162380 	call	16238 <OS_Sched>
        return (OS_ERR_NONE);
   1a188:	0005883a 	mov	r2,zero
   1a18c:	00002b06 	br	1a23c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1a190:	e0bffe17 	ldw	r2,-8(fp)
   1a194:	10800117 	ldw	r2,4(r2)
   1a198:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1a19c:	e0bff917 	ldw	r2,-28(fp)
   1a1a0:	10c0058b 	ldhu	r3,22(r2)
   1a1a4:	e0bff917 	ldw	r2,-28(fp)
   1a1a8:	1080050b 	ldhu	r2,20(r2)
   1a1ac:	18ffffcc 	andi	r3,r3,65535
   1a1b0:	10bfffcc 	andi	r2,r2,65535
   1a1b4:	18800636 	bltu	r3,r2,1a1d0 <OSQPost+0xe8>
   1a1b8:	e0bff817 	ldw	r2,-32(fp)
   1a1bc:	e0bffc15 	stw	r2,-16(fp)
   1a1c0:	e0bffc17 	ldw	r2,-16(fp)
   1a1c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a1c8:	00800784 	movi	r2,30
   1a1cc:	00001b06 	br	1a23c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1a1d0:	e0bff917 	ldw	r2,-28(fp)
   1a1d4:	10800317 	ldw	r2,12(r2)
   1a1d8:	11000104 	addi	r4,r2,4
   1a1dc:	e0fff917 	ldw	r3,-28(fp)
   1a1e0:	19000315 	stw	r4,12(r3)
   1a1e4:	e0ffff17 	ldw	r3,-4(fp)
   1a1e8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1a1ec:	e0bff917 	ldw	r2,-28(fp)
   1a1f0:	1080058b 	ldhu	r2,22(r2)
   1a1f4:	10800044 	addi	r2,r2,1
   1a1f8:	1007883a 	mov	r3,r2
   1a1fc:	e0bff917 	ldw	r2,-28(fp)
   1a200:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1a204:	e0bff917 	ldw	r2,-28(fp)
   1a208:	10c00317 	ldw	r3,12(r2)
   1a20c:	e0bff917 	ldw	r2,-28(fp)
   1a210:	10800217 	ldw	r2,8(r2)
   1a214:	1880041e 	bne	r3,r2,1a228 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1a218:	e0bff917 	ldw	r2,-28(fp)
   1a21c:	10c00117 	ldw	r3,4(r2)
   1a220:	e0bff917 	ldw	r2,-28(fp)
   1a224:	10c00315 	stw	r3,12(r2)
   1a228:	e0bff817 	ldw	r2,-32(fp)
   1a22c:	e0bffd15 	stw	r2,-12(fp)
   1a230:	e0bffd17 	ldw	r2,-12(fp)
   1a234:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a238:	0005883a 	mov	r2,zero
}
   1a23c:	e037883a 	mov	sp,fp
   1a240:	dfc00117 	ldw	ra,4(sp)
   1a244:	df000017 	ldw	fp,0(sp)
   1a248:	dec00204 	addi	sp,sp,8
   1a24c:	f800283a 	ret

0001a250 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1a250:	defff604 	addi	sp,sp,-40
   1a254:	dfc00915 	stw	ra,36(sp)
   1a258:	df000815 	stw	fp,32(sp)
   1a25c:	df000804 	addi	fp,sp,32
   1a260:	e13ffe15 	stw	r4,-8(fp)
   1a264:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a268:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a26c:	e0bffe17 	ldw	r2,-8(fp)
   1a270:	1000021e 	bne	r2,zero,1a27c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1a274:	00800104 	movi	r2,4
   1a278:	00004c06 	br	1a3ac <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1a27c:	e0bffe17 	ldw	r2,-8(fp)
   1a280:	10800003 	ldbu	r2,0(r2)
   1a284:	10803fcc 	andi	r2,r2,255
   1a288:	108000a0 	cmpeqi	r2,r2,2
   1a28c:	1000021e 	bne	r2,zero,1a298 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1a290:	00800044 	movi	r2,1
   1a294:	00004506 	br	1a3ac <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a298:	0005303a 	rdctl	r2,status
   1a29c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a2a0:	e0fffa17 	ldw	r3,-24(fp)
   1a2a4:	00bfff84 	movi	r2,-2
   1a2a8:	1884703a 	and	r2,r3,r2
   1a2ac:	1001703a 	wrctl	status,r2
  
  return context;
   1a2b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a2b4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1a2b8:	e0bffe17 	ldw	r2,-8(fp)
   1a2bc:	10800283 	ldbu	r2,10(r2)
   1a2c0:	10803fcc 	andi	r2,r2,255
   1a2c4:	10000c26 	beq	r2,zero,1a2f8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a2c8:	e13ffe17 	ldw	r4,-8(fp)
   1a2cc:	e17fff17 	ldw	r5,-4(fp)
   1a2d0:	01800104 	movi	r6,4
   1a2d4:	000f883a 	mov	r7,zero
   1a2d8:	00158200 	call	15820 <OS_EventTaskRdy>
   1a2dc:	e0bff817 	ldw	r2,-32(fp)
   1a2e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2e4:	e0bffb17 	ldw	r2,-20(fp)
   1a2e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1a2ec:	00162380 	call	16238 <OS_Sched>
        return (OS_ERR_NONE);
   1a2f0:	0005883a 	mov	r2,zero
   1a2f4:	00002d06 	br	1a3ac <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1a2f8:	e0bffe17 	ldw	r2,-8(fp)
   1a2fc:	10800117 	ldw	r2,4(r2)
   1a300:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1a304:	e0bff917 	ldw	r2,-28(fp)
   1a308:	10c0058b 	ldhu	r3,22(r2)
   1a30c:	e0bff917 	ldw	r2,-28(fp)
   1a310:	1080050b 	ldhu	r2,20(r2)
   1a314:	18ffffcc 	andi	r3,r3,65535
   1a318:	10bfffcc 	andi	r2,r2,65535
   1a31c:	18800636 	bltu	r3,r2,1a338 <OSQPostFront+0xe8>
   1a320:	e0bff817 	ldw	r2,-32(fp)
   1a324:	e0bffc15 	stw	r2,-16(fp)
   1a328:	e0bffc17 	ldw	r2,-16(fp)
   1a32c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a330:	00800784 	movi	r2,30
   1a334:	00001d06 	br	1a3ac <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1a338:	e0bff917 	ldw	r2,-28(fp)
   1a33c:	10c00417 	ldw	r3,16(r2)
   1a340:	e0bff917 	ldw	r2,-28(fp)
   1a344:	10800117 	ldw	r2,4(r2)
   1a348:	1880041e 	bne	r3,r2,1a35c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1a34c:	e0bff917 	ldw	r2,-28(fp)
   1a350:	10c00217 	ldw	r3,8(r2)
   1a354:	e0bff917 	ldw	r2,-28(fp)
   1a358:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1a35c:	e0bff917 	ldw	r2,-28(fp)
   1a360:	10800417 	ldw	r2,16(r2)
   1a364:	10ffff04 	addi	r3,r2,-4
   1a368:	e0bff917 	ldw	r2,-28(fp)
   1a36c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1a370:	e0bff917 	ldw	r2,-28(fp)
   1a374:	10800417 	ldw	r2,16(r2)
   1a378:	e0ffff17 	ldw	r3,-4(fp)
   1a37c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1a380:	e0bff917 	ldw	r2,-28(fp)
   1a384:	1080058b 	ldhu	r2,22(r2)
   1a388:	10800044 	addi	r2,r2,1
   1a38c:	1007883a 	mov	r3,r2
   1a390:	e0bff917 	ldw	r2,-28(fp)
   1a394:	10c0058d 	sth	r3,22(r2)
   1a398:	e0bff817 	ldw	r2,-32(fp)
   1a39c:	e0bffd15 	stw	r2,-12(fp)
   1a3a0:	e0bffd17 	ldw	r2,-12(fp)
   1a3a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a3a8:	0005883a 	mov	r2,zero
}
   1a3ac:	e037883a 	mov	sp,fp
   1a3b0:	dfc00117 	ldw	ra,4(sp)
   1a3b4:	df000017 	ldw	fp,0(sp)
   1a3b8:	dec00204 	addi	sp,sp,8
   1a3bc:	f800283a 	ret

0001a3c0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1a3c0:	defff504 	addi	sp,sp,-44
   1a3c4:	dfc00a15 	stw	ra,40(sp)
   1a3c8:	df000915 	stw	fp,36(sp)
   1a3cc:	df000904 	addi	fp,sp,36
   1a3d0:	e13ffd15 	stw	r4,-12(fp)
   1a3d4:	e17ffe15 	stw	r5,-8(fp)
   1a3d8:	3005883a 	mov	r2,r6
   1a3dc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a3e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a3e4:	e0bffd17 	ldw	r2,-12(fp)
   1a3e8:	1000021e 	bne	r2,zero,1a3f4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1a3ec:	00800104 	movi	r2,4
   1a3f0:	00007106 	br	1a5b8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1a3f4:	e0bffd17 	ldw	r2,-12(fp)
   1a3f8:	10800003 	ldbu	r2,0(r2)
   1a3fc:	10803fcc 	andi	r2,r2,255
   1a400:	108000a0 	cmpeqi	r2,r2,2
   1a404:	1000021e 	bne	r2,zero,1a410 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1a408:	00800044 	movi	r2,1
   1a40c:	00006a06 	br	1a5b8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a410:	0005303a 	rdctl	r2,status
   1a414:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a418:	e0fff917 	ldw	r3,-28(fp)
   1a41c:	00bfff84 	movi	r2,-2
   1a420:	1884703a 	and	r2,r3,r2
   1a424:	1001703a 	wrctl	status,r2
  
  return context;
   1a428:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1a42c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1a430:	e0bffd17 	ldw	r2,-12(fp)
   1a434:	10800283 	ldbu	r2,10(r2)
   1a438:	10803fcc 	andi	r2,r2,255
   1a43c:	10001d26 	beq	r2,zero,1a4b4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1a440:	e0bfff03 	ldbu	r2,-4(fp)
   1a444:	1080004c 	andi	r2,r2,1
   1a448:	10000b26 	beq	r2,zero,1a478 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1a44c:	00000506 	br	1a464 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a450:	e13ffd17 	ldw	r4,-12(fp)
   1a454:	e17ffe17 	ldw	r5,-8(fp)
   1a458:	01800104 	movi	r6,4
   1a45c:	000f883a 	mov	r7,zero
   1a460:	00158200 	call	15820 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1a464:	e0bffd17 	ldw	r2,-12(fp)
   1a468:	10800283 	ldbu	r2,10(r2)
   1a46c:	10803fcc 	andi	r2,r2,255
   1a470:	103ff71e 	bne	r2,zero,1a450 <__alt_mem_Flash_flash_data+0xf401a450>
   1a474:	00000506 	br	1a48c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1a478:	e13ffd17 	ldw	r4,-12(fp)
   1a47c:	e17ffe17 	ldw	r5,-8(fp)
   1a480:	01800104 	movi	r6,4
   1a484:	000f883a 	mov	r7,zero
   1a488:	00158200 	call	15820 <OS_EventTaskRdy>
   1a48c:	e0bff717 	ldw	r2,-36(fp)
   1a490:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a494:	e0bffa17 	ldw	r2,-24(fp)
   1a498:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1a49c:	e0bfff03 	ldbu	r2,-4(fp)
   1a4a0:	1080010c 	andi	r2,r2,4
   1a4a4:	1000011e 	bne	r2,zero,1a4ac <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1a4a8:	00162380 	call	16238 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1a4ac:	0005883a 	mov	r2,zero
   1a4b0:	00004106 	br	1a5b8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1a4b4:	e0bffd17 	ldw	r2,-12(fp)
   1a4b8:	10800117 	ldw	r2,4(r2)
   1a4bc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1a4c0:	e0bff817 	ldw	r2,-32(fp)
   1a4c4:	10c0058b 	ldhu	r3,22(r2)
   1a4c8:	e0bff817 	ldw	r2,-32(fp)
   1a4cc:	1080050b 	ldhu	r2,20(r2)
   1a4d0:	18ffffcc 	andi	r3,r3,65535
   1a4d4:	10bfffcc 	andi	r2,r2,65535
   1a4d8:	18800636 	bltu	r3,r2,1a4f4 <OSQPostOpt+0x134>
   1a4dc:	e0bff717 	ldw	r2,-36(fp)
   1a4e0:	e0bffb15 	stw	r2,-20(fp)
   1a4e4:	e0bffb17 	ldw	r2,-20(fp)
   1a4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1a4ec:	00800784 	movi	r2,30
   1a4f0:	00003106 	br	1a5b8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1a4f4:	e0bfff03 	ldbu	r2,-4(fp)
   1a4f8:	1080008c 	andi	r2,r2,2
   1a4fc:	10001326 	beq	r2,zero,1a54c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1a500:	e0bff817 	ldw	r2,-32(fp)
   1a504:	10c00417 	ldw	r3,16(r2)
   1a508:	e0bff817 	ldw	r2,-32(fp)
   1a50c:	10800117 	ldw	r2,4(r2)
   1a510:	1880041e 	bne	r3,r2,1a524 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1a514:	e0bff817 	ldw	r2,-32(fp)
   1a518:	10c00217 	ldw	r3,8(r2)
   1a51c:	e0bff817 	ldw	r2,-32(fp)
   1a520:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1a524:	e0bff817 	ldw	r2,-32(fp)
   1a528:	10800417 	ldw	r2,16(r2)
   1a52c:	10ffff04 	addi	r3,r2,-4
   1a530:	e0bff817 	ldw	r2,-32(fp)
   1a534:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1a538:	e0bff817 	ldw	r2,-32(fp)
   1a53c:	10800417 	ldw	r2,16(r2)
   1a540:	e0fffe17 	ldw	r3,-8(fp)
   1a544:	10c00015 	stw	r3,0(r2)
   1a548:	00001006 	br	1a58c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1a54c:	e0bff817 	ldw	r2,-32(fp)
   1a550:	10800317 	ldw	r2,12(r2)
   1a554:	11000104 	addi	r4,r2,4
   1a558:	e0fff817 	ldw	r3,-32(fp)
   1a55c:	19000315 	stw	r4,12(r3)
   1a560:	e0fffe17 	ldw	r3,-8(fp)
   1a564:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1a568:	e0bff817 	ldw	r2,-32(fp)
   1a56c:	10c00317 	ldw	r3,12(r2)
   1a570:	e0bff817 	ldw	r2,-32(fp)
   1a574:	10800217 	ldw	r2,8(r2)
   1a578:	1880041e 	bne	r3,r2,1a58c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1a57c:	e0bff817 	ldw	r2,-32(fp)
   1a580:	10c00117 	ldw	r3,4(r2)
   1a584:	e0bff817 	ldw	r2,-32(fp)
   1a588:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1a58c:	e0bff817 	ldw	r2,-32(fp)
   1a590:	1080058b 	ldhu	r2,22(r2)
   1a594:	10800044 	addi	r2,r2,1
   1a598:	1007883a 	mov	r3,r2
   1a59c:	e0bff817 	ldw	r2,-32(fp)
   1a5a0:	10c0058d 	sth	r3,22(r2)
   1a5a4:	e0bff717 	ldw	r2,-36(fp)
   1a5a8:	e0bffc15 	stw	r2,-16(fp)
   1a5ac:	e0bffc17 	ldw	r2,-16(fp)
   1a5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a5b4:	0005883a 	mov	r2,zero
}
   1a5b8:	e037883a 	mov	sp,fp
   1a5bc:	dfc00117 	ldw	ra,4(sp)
   1a5c0:	df000017 	ldw	fp,0(sp)
   1a5c4:	dec00204 	addi	sp,sp,8
   1a5c8:	f800283a 	ret

0001a5cc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1a5cc:	defff604 	addi	sp,sp,-40
   1a5d0:	df000915 	stw	fp,36(sp)
   1a5d4:	df000904 	addi	fp,sp,36
   1a5d8:	e13ffe15 	stw	r4,-8(fp)
   1a5dc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a5e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1a5e4:	e0bffe17 	ldw	r2,-8(fp)
   1a5e8:	1000021e 	bne	r2,zero,1a5f4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a5ec:	00800104 	movi	r2,4
   1a5f0:	00004906 	br	1a718 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1a5f4:	e0bfff17 	ldw	r2,-4(fp)
   1a5f8:	1000021e 	bne	r2,zero,1a604 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1a5fc:	00800244 	movi	r2,9
   1a600:	00004506 	br	1a718 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1a604:	e0bffe17 	ldw	r2,-8(fp)
   1a608:	10800003 	ldbu	r2,0(r2)
   1a60c:	10803fcc 	andi	r2,r2,255
   1a610:	108000a0 	cmpeqi	r2,r2,2
   1a614:	1000021e 	bne	r2,zero,1a620 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1a618:	00800044 	movi	r2,1
   1a61c:	00003e06 	br	1a718 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a620:	0005303a 	rdctl	r2,status
   1a624:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a628:	e0fffc17 	ldw	r3,-16(fp)
   1a62c:	00bfff84 	movi	r2,-2
   1a630:	1884703a 	and	r2,r3,r2
   1a634:	1001703a 	wrctl	status,r2
  
  return context;
   1a638:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a63c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1a640:	e0bffe17 	ldw	r2,-8(fp)
   1a644:	10c00283 	ldbu	r3,10(r2)
   1a648:	e0bfff17 	ldw	r2,-4(fp)
   1a64c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1a650:	e0bffe17 	ldw	r2,-8(fp)
   1a654:	108002c4 	addi	r2,r2,11
   1a658:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1a65c:	e0bfff17 	ldw	r2,-4(fp)
   1a660:	10800204 	addi	r2,r2,8
   1a664:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a668:	e03ff705 	stb	zero,-36(fp)
   1a66c:	00000b06 	br	1a69c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1a670:	e0bff917 	ldw	r2,-28(fp)
   1a674:	10c00044 	addi	r3,r2,1
   1a678:	e0fff915 	stw	r3,-28(fp)
   1a67c:	e0fff817 	ldw	r3,-32(fp)
   1a680:	19000044 	addi	r4,r3,1
   1a684:	e13ff815 	stw	r4,-32(fp)
   1a688:	18c00003 	ldbu	r3,0(r3)
   1a68c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a690:	e0bff703 	ldbu	r2,-36(fp)
   1a694:	10800044 	addi	r2,r2,1
   1a698:	e0bff705 	stb	r2,-36(fp)
   1a69c:	e0bff703 	ldbu	r2,-36(fp)
   1a6a0:	108000f0 	cmpltui	r2,r2,3
   1a6a4:	103ff21e 	bne	r2,zero,1a670 <__alt_mem_Flash_flash_data+0xf401a670>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1a6a8:	e0bffe17 	ldw	r2,-8(fp)
   1a6ac:	10800117 	ldw	r2,4(r2)
   1a6b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   1a6b4:	e0bffb17 	ldw	r2,-20(fp)
   1a6b8:	1080058b 	ldhu	r2,22(r2)
   1a6bc:	10bfffcc 	andi	r2,r2,65535
   1a6c0:	10000626 	beq	r2,zero,1a6dc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1a6c4:	e0bffb17 	ldw	r2,-20(fp)
   1a6c8:	10800417 	ldw	r2,16(r2)
   1a6cc:	10c00017 	ldw	r3,0(r2)
   1a6d0:	e0bfff17 	ldw	r2,-4(fp)
   1a6d4:	10c00015 	stw	r3,0(r2)
   1a6d8:	00000206 	br	1a6e4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1a6dc:	e0bfff17 	ldw	r2,-4(fp)
   1a6e0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1a6e4:	e0bffb17 	ldw	r2,-20(fp)
   1a6e8:	10c0058b 	ldhu	r3,22(r2)
   1a6ec:	e0bfff17 	ldw	r2,-4(fp)
   1a6f0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1a6f4:	e0bffb17 	ldw	r2,-20(fp)
   1a6f8:	10c0050b 	ldhu	r3,20(r2)
   1a6fc:	e0bfff17 	ldw	r2,-4(fp)
   1a700:	10c0018d 	sth	r3,6(r2)
   1a704:	e0bffa17 	ldw	r2,-24(fp)
   1a708:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a70c:	e0bffd17 	ldw	r2,-12(fp)
   1a710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a714:	0005883a 	mov	r2,zero
}
   1a718:	e037883a 	mov	sp,fp
   1a71c:	df000017 	ldw	fp,0(sp)
   1a720:	dec00104 	addi	sp,sp,4
   1a724:	f800283a 	ret

0001a728 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1a728:	defffb04 	addi	sp,sp,-20
   1a72c:	dfc00415 	stw	ra,16(sp)
   1a730:	df000315 	stw	fp,12(sp)
   1a734:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1a738:	01000174 	movhi	r4,5
   1a73c:	21364304 	addi	r4,r4,-9972
   1a740:	01407804 	movi	r5,480
   1a744:	00161840 	call	16184 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1a748:	00800174 	movhi	r2,5
   1a74c:	10b64304 	addi	r2,r2,-9972
   1a750:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1a754:	00800174 	movhi	r2,5
   1a758:	10b64904 	addi	r2,r2,-9948
   1a75c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a760:	e03ffd0d 	sth	zero,-12(fp)
   1a764:	00000c06 	br	1a798 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1a768:	e0bffe17 	ldw	r2,-8(fp)
   1a76c:	e0ffff17 	ldw	r3,-4(fp)
   1a770:	10c00015 	stw	r3,0(r2)
        pq1++;
   1a774:	e0bffe17 	ldw	r2,-8(fp)
   1a778:	10800604 	addi	r2,r2,24
   1a77c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1a780:	e0bfff17 	ldw	r2,-4(fp)
   1a784:	10800604 	addi	r2,r2,24
   1a788:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1a78c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a790:	10800044 	addi	r2,r2,1
   1a794:	e0bffd0d 	sth	r2,-12(fp)
   1a798:	e0bffd0b 	ldhu	r2,-12(fp)
   1a79c:	108004f0 	cmpltui	r2,r2,19
   1a7a0:	103ff11e 	bne	r2,zero,1a768 <__alt_mem_Flash_flash_data+0xf401a768>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1a7a4:	e0bffe17 	ldw	r2,-8(fp)
   1a7a8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1a7ac:	008000f4 	movhi	r2,3
   1a7b0:	10a80304 	addi	r2,r2,-24564
   1a7b4:	00c00174 	movhi	r3,5
   1a7b8:	18f64304 	addi	r3,r3,-9972
   1a7bc:	10c00015 	stw	r3,0(r2)
#endif
}
   1a7c0:	e037883a 	mov	sp,fp
   1a7c4:	dfc00117 	ldw	ra,4(sp)
   1a7c8:	df000017 	ldw	fp,0(sp)
   1a7cc:	dec00204 	addi	sp,sp,8
   1a7d0:	f800283a 	ret

0001a7d4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1a7d4:	defffa04 	addi	sp,sp,-24
   1a7d8:	df000515 	stw	fp,20(sp)
   1a7dc:	df000504 	addi	fp,sp,20
   1a7e0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a7e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a7e8:	e0bfff17 	ldw	r2,-4(fp)
   1a7ec:	1000021e 	bne	r2,zero,1a7f8 <OSSemAccept+0x24>
        return (0);
   1a7f0:	0005883a 	mov	r2,zero
   1a7f4:	00001f06 	br	1a874 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a7f8:	e0bfff17 	ldw	r2,-4(fp)
   1a7fc:	10800003 	ldbu	r2,0(r2)
   1a800:	10803fcc 	andi	r2,r2,255
   1a804:	108000e0 	cmpeqi	r2,r2,3
   1a808:	1000021e 	bne	r2,zero,1a814 <OSSemAccept+0x40>
        return (0);
   1a80c:	0005883a 	mov	r2,zero
   1a810:	00001806 	br	1a874 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a814:	0005303a 	rdctl	r2,status
   1a818:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a81c:	e0fffd17 	ldw	r3,-12(fp)
   1a820:	00bfff84 	movi	r2,-2
   1a824:	1884703a 	and	r2,r3,r2
   1a828:	1001703a 	wrctl	status,r2
  
  return context;
   1a82c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a830:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1a834:	e0bfff17 	ldw	r2,-4(fp)
   1a838:	1080020b 	ldhu	r2,8(r2)
   1a83c:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1a840:	e0bffc0b 	ldhu	r2,-16(fp)
   1a844:	10000626 	beq	r2,zero,1a860 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1a848:	e0bfff17 	ldw	r2,-4(fp)
   1a84c:	1080020b 	ldhu	r2,8(r2)
   1a850:	10bfffc4 	addi	r2,r2,-1
   1a854:	1007883a 	mov	r3,r2
   1a858:	e0bfff17 	ldw	r2,-4(fp)
   1a85c:	10c0020d 	sth	r3,8(r2)
   1a860:	e0bffb17 	ldw	r2,-20(fp)
   1a864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a868:	e0bffe17 	ldw	r2,-8(fp)
   1a86c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1a870:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1a874:	e037883a 	mov	sp,fp
   1a878:	df000017 	ldw	fp,0(sp)
   1a87c:	dec00104 	addi	sp,sp,4
   1a880:	f800283a 	ret

0001a884 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1a884:	defff904 	addi	sp,sp,-28
   1a888:	dfc00615 	stw	ra,24(sp)
   1a88c:	df000515 	stw	fp,20(sp)
   1a890:	df000504 	addi	fp,sp,20
   1a894:	2005883a 	mov	r2,r4
   1a898:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a89c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a8a0:	008000f4 	movhi	r2,3
   1a8a4:	10a80604 	addi	r2,r2,-24552
   1a8a8:	10800003 	ldbu	r2,0(r2)
   1a8ac:	10803fcc 	andi	r2,r2,255
   1a8b0:	10000226 	beq	r2,zero,1a8bc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1a8b4:	0005883a 	mov	r2,zero
   1a8b8:	00002d06 	br	1a970 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a8bc:	0005303a 	rdctl	r2,status
   1a8c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8c4:	e0fffd17 	ldw	r3,-12(fp)
   1a8c8:	00bfff84 	movi	r2,-2
   1a8cc:	1884703a 	and	r2,r3,r2
   1a8d0:	1001703a 	wrctl	status,r2
  
  return context;
   1a8d4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a8d8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1a8dc:	008000f4 	movhi	r2,3
   1a8e0:	10a80504 	addi	r2,r2,-24556
   1a8e4:	10800017 	ldw	r2,0(r2)
   1a8e8:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1a8ec:	008000f4 	movhi	r2,3
   1a8f0:	10a80504 	addi	r2,r2,-24556
   1a8f4:	10800017 	ldw	r2,0(r2)
   1a8f8:	10000726 	beq	r2,zero,1a918 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1a8fc:	008000f4 	movhi	r2,3
   1a900:	10a80504 	addi	r2,r2,-24556
   1a904:	10800017 	ldw	r2,0(r2)
   1a908:	10c00117 	ldw	r3,4(r2)
   1a90c:	008000f4 	movhi	r2,3
   1a910:	10a80504 	addi	r2,r2,-24556
   1a914:	10c00015 	stw	r3,0(r2)
   1a918:	e0bffb17 	ldw	r2,-20(fp)
   1a91c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a920:	e0bffe17 	ldw	r2,-8(fp)
   1a924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1a928:	e0bffc17 	ldw	r2,-16(fp)
   1a92c:	10000f26 	beq	r2,zero,1a96c <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1a930:	e0bffc17 	ldw	r2,-16(fp)
   1a934:	00c000c4 	movi	r3,3
   1a938:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1a93c:	e0bffc17 	ldw	r2,-16(fp)
   1a940:	e0ffff0b 	ldhu	r3,-4(fp)
   1a944:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1a948:	e0bffc17 	ldw	r2,-16(fp)
   1a94c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1a950:	e0bffc17 	ldw	r2,-16(fp)
   1a954:	00c00fc4 	movi	r3,63
   1a958:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1a95c:	e0bffc17 	ldw	r2,-16(fp)
   1a960:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1a964:	e13ffc17 	ldw	r4,-16(fp)
   1a968:	0015dc00 	call	15dc0 <OS_EventWaitListInit>
    }
    return (pevent);
   1a96c:	e0bffc17 	ldw	r2,-16(fp)
}
   1a970:	e037883a 	mov	sp,fp
   1a974:	dfc00117 	ldw	ra,4(sp)
   1a978:	df000017 	ldw	fp,0(sp)
   1a97c:	dec00204 	addi	sp,sp,8
   1a980:	f800283a 	ret

0001a984 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1a984:	defff304 	addi	sp,sp,-52
   1a988:	dfc00c15 	stw	ra,48(sp)
   1a98c:	df000b15 	stw	fp,44(sp)
   1a990:	df000b04 	addi	fp,sp,44
   1a994:	e13ffd15 	stw	r4,-12(fp)
   1a998:	2805883a 	mov	r2,r5
   1a99c:	e1bfff15 	stw	r6,-4(fp)
   1a9a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a9a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a9a8:	e0bfff17 	ldw	r2,-4(fp)
   1a9ac:	1000021e 	bne	r2,zero,1a9b8 <OSSemDel+0x34>
        return (pevent);
   1a9b0:	e0bffd17 	ldw	r2,-12(fp)
   1a9b4:	00008806 	br	1abd8 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1a9b8:	e0bffd17 	ldw	r2,-12(fp)
   1a9bc:	1000051e 	bne	r2,zero,1a9d4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1a9c0:	e0bfff17 	ldw	r2,-4(fp)
   1a9c4:	00c00104 	movi	r3,4
   1a9c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a9cc:	e0bffd17 	ldw	r2,-12(fp)
   1a9d0:	00008106 	br	1abd8 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1a9d4:	e0bffd17 	ldw	r2,-12(fp)
   1a9d8:	10800003 	ldbu	r2,0(r2)
   1a9dc:	10803fcc 	andi	r2,r2,255
   1a9e0:	108000e0 	cmpeqi	r2,r2,3
   1a9e4:	1000051e 	bne	r2,zero,1a9fc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1a9e8:	e0bfff17 	ldw	r2,-4(fp)
   1a9ec:	00c00044 	movi	r3,1
   1a9f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1a9f4:	e0bffd17 	ldw	r2,-12(fp)
   1a9f8:	00007706 	br	1abd8 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a9fc:	008000f4 	movhi	r2,3
   1aa00:	10a80604 	addi	r2,r2,-24552
   1aa04:	10800003 	ldbu	r2,0(r2)
   1aa08:	10803fcc 	andi	r2,r2,255
   1aa0c:	10000526 	beq	r2,zero,1aa24 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1aa10:	e0bfff17 	ldw	r2,-4(fp)
   1aa14:	00c003c4 	movi	r3,15
   1aa18:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1aa1c:	e0bffd17 	ldw	r2,-12(fp)
   1aa20:	00006d06 	br	1abd8 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa24:	0005303a 	rdctl	r2,status
   1aa28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa2c:	e0fff817 	ldw	r3,-32(fp)
   1aa30:	00bfff84 	movi	r2,-2
   1aa34:	1884703a 	and	r2,r3,r2
   1aa38:	1001703a 	wrctl	status,r2
  
  return context;
   1aa3c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1aa40:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1aa44:	e0bffd17 	ldw	r2,-12(fp)
   1aa48:	10800283 	ldbu	r2,10(r2)
   1aa4c:	10803fcc 	andi	r2,r2,255
   1aa50:	10000326 	beq	r2,zero,1aa60 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1aa54:	00800044 	movi	r2,1
   1aa58:	e0bff505 	stb	r2,-44(fp)
   1aa5c:	00000106 	br	1aa64 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1aa60:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1aa64:	e0bffe03 	ldbu	r2,-8(fp)
   1aa68:	10000326 	beq	r2,zero,1aa78 <OSSemDel+0xf4>
   1aa6c:	10800060 	cmpeqi	r2,r2,1
   1aa70:	10002c1e 	bne	r2,zero,1ab24 <OSSemDel+0x1a0>
   1aa74:	00004d06 	br	1abac <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1aa78:	e0bff503 	ldbu	r2,-44(fp)
   1aa7c:	10001a1e 	bne	r2,zero,1aae8 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1aa80:	e0bffd17 	ldw	r2,-12(fp)
   1aa84:	00c00fc4 	movi	r3,63
   1aa88:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1aa8c:	e0bffd17 	ldw	r2,-12(fp)
   1aa90:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1aa94:	e0bffd17 	ldw	r2,-12(fp)
   1aa98:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1aa9c:	008000f4 	movhi	r2,3
   1aaa0:	10a80504 	addi	r2,r2,-24556
   1aaa4:	10c00017 	ldw	r3,0(r2)
   1aaa8:	e0bffd17 	ldw	r2,-12(fp)
   1aaac:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1aab0:	e0bffd17 	ldw	r2,-12(fp)
   1aab4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1aab8:	008000f4 	movhi	r2,3
   1aabc:	10a80504 	addi	r2,r2,-24556
   1aac0:	e0fffd17 	ldw	r3,-12(fp)
   1aac4:	10c00015 	stw	r3,0(r2)
   1aac8:	e0bff717 	ldw	r2,-36(fp)
   1aacc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aad0:	e0bff917 	ldw	r2,-28(fp)
   1aad4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1aad8:	e0bfff17 	ldw	r2,-4(fp)
   1aadc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1aae0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1aae4:	00003b06 	br	1abd4 <OSSemDel+0x250>
   1aae8:	e0bff717 	ldw	r2,-36(fp)
   1aaec:	e0bffa15 	stw	r2,-24(fp)
   1aaf0:	e0bffa17 	ldw	r2,-24(fp)
   1aaf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1aaf8:	e0bfff17 	ldw	r2,-4(fp)
   1aafc:	00c01244 	movi	r3,73
   1ab00:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1ab04:	e0bffd17 	ldw	r2,-12(fp)
   1ab08:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1ab0c:	00003106 	br	1abd4 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1ab10:	e13ffd17 	ldw	r4,-12(fp)
   1ab14:	000b883a 	mov	r5,zero
   1ab18:	01800044 	movi	r6,1
   1ab1c:	000f883a 	mov	r7,zero
   1ab20:	00158200 	call	15820 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1ab24:	e0bffd17 	ldw	r2,-12(fp)
   1ab28:	10800283 	ldbu	r2,10(r2)
   1ab2c:	10803fcc 	andi	r2,r2,255
   1ab30:	103ff71e 	bne	r2,zero,1ab10 <__alt_mem_Flash_flash_data+0xf401ab10>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1ab34:	e0bffd17 	ldw	r2,-12(fp)
   1ab38:	00c00fc4 	movi	r3,63
   1ab3c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1ab40:	e0bffd17 	ldw	r2,-12(fp)
   1ab44:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1ab48:	e0bffd17 	ldw	r2,-12(fp)
   1ab4c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1ab50:	008000f4 	movhi	r2,3
   1ab54:	10a80504 	addi	r2,r2,-24556
   1ab58:	10c00017 	ldw	r3,0(r2)
   1ab5c:	e0bffd17 	ldw	r2,-12(fp)
   1ab60:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1ab64:	e0bffd17 	ldw	r2,-12(fp)
   1ab68:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1ab6c:	008000f4 	movhi	r2,3
   1ab70:	10a80504 	addi	r2,r2,-24556
   1ab74:	e0fffd17 	ldw	r3,-12(fp)
   1ab78:	10c00015 	stw	r3,0(r2)
   1ab7c:	e0bff717 	ldw	r2,-36(fp)
   1ab80:	e0bffb15 	stw	r2,-20(fp)
   1ab84:	e0bffb17 	ldw	r2,-20(fp)
   1ab88:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1ab8c:	e0bff503 	ldbu	r2,-44(fp)
   1ab90:	10800058 	cmpnei	r2,r2,1
   1ab94:	1000011e 	bne	r2,zero,1ab9c <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1ab98:	00162380 	call	16238 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1ab9c:	e0bfff17 	ldw	r2,-4(fp)
   1aba0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1aba4:	e03ff615 	stw	zero,-40(fp)
             break;
   1aba8:	00000a06 	br	1abd4 <OSSemDel+0x250>
   1abac:	e0bff717 	ldw	r2,-36(fp)
   1abb0:	e0bffc15 	stw	r2,-16(fp)
   1abb4:	e0bffc17 	ldw	r2,-16(fp)
   1abb8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1abbc:	e0bfff17 	ldw	r2,-4(fp)
   1abc0:	00c001c4 	movi	r3,7
   1abc4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1abc8:	e0bffd17 	ldw	r2,-12(fp)
   1abcc:	e0bff615 	stw	r2,-40(fp)
             break;
   1abd0:	0001883a 	nop
    }
    return (pevent_return);
   1abd4:	e0bff617 	ldw	r2,-40(fp)
}
   1abd8:	e037883a 	mov	sp,fp
   1abdc:	dfc00117 	ldw	ra,4(sp)
   1abe0:	df000017 	ldw	fp,0(sp)
   1abe4:	dec00204 	addi	sp,sp,8
   1abe8:	f800283a 	ret

0001abec <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1abec:	defff504 	addi	sp,sp,-44
   1abf0:	dfc00a15 	stw	ra,40(sp)
   1abf4:	df000915 	stw	fp,36(sp)
   1abf8:	df000904 	addi	fp,sp,36
   1abfc:	e13ffd15 	stw	r4,-12(fp)
   1ac00:	2805883a 	mov	r2,r5
   1ac04:	e1bfff15 	stw	r6,-4(fp)
   1ac08:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ac0c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1ac10:	e0bfff17 	ldw	r2,-4(fp)
   1ac14:	1000011e 	bne	r2,zero,1ac1c <OSSemPend+0x30>
        return;
   1ac18:	00008906 	br	1ae40 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1ac1c:	e0bffd17 	ldw	r2,-12(fp)
   1ac20:	1000041e 	bne	r2,zero,1ac34 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1ac24:	e0bfff17 	ldw	r2,-4(fp)
   1ac28:	00c00104 	movi	r3,4
   1ac2c:	10c00005 	stb	r3,0(r2)
        return;
   1ac30:	00008306 	br	1ae40 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1ac34:	e0bffd17 	ldw	r2,-12(fp)
   1ac38:	10800003 	ldbu	r2,0(r2)
   1ac3c:	10803fcc 	andi	r2,r2,255
   1ac40:	108000e0 	cmpeqi	r2,r2,3
   1ac44:	1000041e 	bne	r2,zero,1ac58 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1ac48:	e0bfff17 	ldw	r2,-4(fp)
   1ac4c:	00c00044 	movi	r3,1
   1ac50:	10c00005 	stb	r3,0(r2)
        return;
   1ac54:	00007a06 	br	1ae40 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1ac58:	008000f4 	movhi	r2,3
   1ac5c:	10a80604 	addi	r2,r2,-24552
   1ac60:	10800003 	ldbu	r2,0(r2)
   1ac64:	10803fcc 	andi	r2,r2,255
   1ac68:	10000426 	beq	r2,zero,1ac7c <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1ac6c:	e0bfff17 	ldw	r2,-4(fp)
   1ac70:	00c00084 	movi	r3,2
   1ac74:	10c00005 	stb	r3,0(r2)
        return;
   1ac78:	00007106 	br	1ae40 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1ac7c:	008000f4 	movhi	r2,3
   1ac80:	10a7f804 	addi	r2,r2,-24608
   1ac84:	10800003 	ldbu	r2,0(r2)
   1ac88:	10803fcc 	andi	r2,r2,255
   1ac8c:	10000426 	beq	r2,zero,1aca0 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1ac90:	e0bfff17 	ldw	r2,-4(fp)
   1ac94:	00c00344 	movi	r3,13
   1ac98:	10c00005 	stb	r3,0(r2)
        return;
   1ac9c:	00006806 	br	1ae40 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aca0:	0005303a 	rdctl	r2,status
   1aca4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aca8:	e0fff817 	ldw	r3,-32(fp)
   1acac:	00bfff84 	movi	r2,-2
   1acb0:	1884703a 	and	r2,r3,r2
   1acb4:	1001703a 	wrctl	status,r2
  
  return context;
   1acb8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1acbc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1acc0:	e0bffd17 	ldw	r2,-12(fp)
   1acc4:	1080020b 	ldhu	r2,8(r2)
   1acc8:	10bfffcc 	andi	r2,r2,65535
   1accc:	10000d26 	beq	r2,zero,1ad04 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1acd0:	e0bffd17 	ldw	r2,-12(fp)
   1acd4:	1080020b 	ldhu	r2,8(r2)
   1acd8:	10bfffc4 	addi	r2,r2,-1
   1acdc:	1007883a 	mov	r3,r2
   1ace0:	e0bffd17 	ldw	r2,-12(fp)
   1ace4:	10c0020d 	sth	r3,8(r2)
   1ace8:	e0bff717 	ldw	r2,-36(fp)
   1acec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1acf0:	e0bff917 	ldw	r2,-28(fp)
   1acf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1acf8:	e0bfff17 	ldw	r2,-4(fp)
   1acfc:	10000005 	stb	zero,0(r2)
        return;
   1ad00:	00004f06 	br	1ae40 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1ad04:	008000f4 	movhi	r2,3
   1ad08:	10a80704 	addi	r2,r2,-24548
   1ad0c:	10c00017 	ldw	r3,0(r2)
   1ad10:	008000f4 	movhi	r2,3
   1ad14:	10a80704 	addi	r2,r2,-24548
   1ad18:	10800017 	ldw	r2,0(r2)
   1ad1c:	10800c03 	ldbu	r2,48(r2)
   1ad20:	10800054 	ori	r2,r2,1
   1ad24:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1ad28:	008000f4 	movhi	r2,3
   1ad2c:	10a80704 	addi	r2,r2,-24548
   1ad30:	10800017 	ldw	r2,0(r2)
   1ad34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1ad38:	008000f4 	movhi	r2,3
   1ad3c:	10a80704 	addi	r2,r2,-24548
   1ad40:	10800017 	ldw	r2,0(r2)
   1ad44:	e0fffe0b 	ldhu	r3,-8(fp)
   1ad48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1ad4c:	e13ffd17 	ldw	r4,-12(fp)
   1ad50:	00159b80 	call	159b8 <OS_EventTaskWait>
   1ad54:	e0bff717 	ldw	r2,-36(fp)
   1ad58:	e0bffa15 	stw	r2,-24(fp)
   1ad5c:	e0bffa17 	ldw	r2,-24(fp)
   1ad60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1ad64:	00162380 	call	16238 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad68:	0005303a 	rdctl	r2,status
   1ad6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad70:	e0fffb17 	ldw	r3,-20(fp)
   1ad74:	00bfff84 	movi	r2,-2
   1ad78:	1884703a 	and	r2,r3,r2
   1ad7c:	1001703a 	wrctl	status,r2
  
  return context;
   1ad80:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1ad84:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1ad88:	008000f4 	movhi	r2,3
   1ad8c:	10a80704 	addi	r2,r2,-24548
   1ad90:	10800017 	ldw	r2,0(r2)
   1ad94:	10800c43 	ldbu	r2,49(r2)
   1ad98:	10803fcc 	andi	r2,r2,255
   1ad9c:	10000326 	beq	r2,zero,1adac <OSSemPend+0x1c0>
   1ada0:	108000a0 	cmpeqi	r2,r2,2
   1ada4:	1000041e 	bne	r2,zero,1adb8 <OSSemPend+0x1cc>
   1ada8:	00000706 	br	1adc8 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1adac:	e0bfff17 	ldw	r2,-4(fp)
   1adb0:	10000005 	stb	zero,0(r2)
             break;
   1adb4:	00000e06 	br	1adf0 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1adb8:	e0bfff17 	ldw	r2,-4(fp)
   1adbc:	00c00384 	movi	r3,14
   1adc0:	10c00005 	stb	r3,0(r2)
             break;
   1adc4:	00000a06 	br	1adf0 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1adc8:	008000f4 	movhi	r2,3
   1adcc:	10a80704 	addi	r2,r2,-24548
   1add0:	10800017 	ldw	r2,0(r2)
   1add4:	1009883a 	mov	r4,r2
   1add8:	e17ffd17 	ldw	r5,-12(fp)
   1addc:	0015c100 	call	15c10 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1ade0:	e0bfff17 	ldw	r2,-4(fp)
   1ade4:	00c00284 	movi	r3,10
   1ade8:	10c00005 	stb	r3,0(r2)
             break;
   1adec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1adf0:	008000f4 	movhi	r2,3
   1adf4:	10a80704 	addi	r2,r2,-24548
   1adf8:	10800017 	ldw	r2,0(r2)
   1adfc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1ae00:	008000f4 	movhi	r2,3
   1ae04:	10a80704 	addi	r2,r2,-24548
   1ae08:	10800017 	ldw	r2,0(r2)
   1ae0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1ae10:	008000f4 	movhi	r2,3
   1ae14:	10a80704 	addi	r2,r2,-24548
   1ae18:	10800017 	ldw	r2,0(r2)
   1ae1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1ae20:	008000f4 	movhi	r2,3
   1ae24:	10a80704 	addi	r2,r2,-24548
   1ae28:	10800017 	ldw	r2,0(r2)
   1ae2c:	10000815 	stw	zero,32(r2)
   1ae30:	e0bff717 	ldw	r2,-36(fp)
   1ae34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ae38:	e0bffc17 	ldw	r2,-16(fp)
   1ae3c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1ae40:	e037883a 	mov	sp,fp
   1ae44:	dfc00117 	ldw	ra,4(sp)
   1ae48:	df000017 	ldw	fp,0(sp)
   1ae4c:	dec00204 	addi	sp,sp,8
   1ae50:	f800283a 	ret

0001ae54 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1ae54:	defff604 	addi	sp,sp,-40
   1ae58:	dfc00915 	stw	ra,36(sp)
   1ae5c:	df000815 	stw	fp,32(sp)
   1ae60:	df000804 	addi	fp,sp,32
   1ae64:	e13ffd15 	stw	r4,-12(fp)
   1ae68:	2805883a 	mov	r2,r5
   1ae6c:	e1bfff15 	stw	r6,-4(fp)
   1ae70:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ae74:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1ae78:	e0bfff17 	ldw	r2,-4(fp)
   1ae7c:	1000021e 	bne	r2,zero,1ae88 <OSSemPendAbort+0x34>
        return (0);
   1ae80:	0005883a 	mov	r2,zero
   1ae84:	00004906 	br	1afac <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1ae88:	e0bffd17 	ldw	r2,-12(fp)
   1ae8c:	1000051e 	bne	r2,zero,1aea4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1ae90:	e0bfff17 	ldw	r2,-4(fp)
   1ae94:	00c00104 	movi	r3,4
   1ae98:	10c00005 	stb	r3,0(r2)
        return (0);
   1ae9c:	0005883a 	mov	r2,zero
   1aea0:	00004206 	br	1afac <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1aea4:	e0bffd17 	ldw	r2,-12(fp)
   1aea8:	10800003 	ldbu	r2,0(r2)
   1aeac:	10803fcc 	andi	r2,r2,255
   1aeb0:	108000e0 	cmpeqi	r2,r2,3
   1aeb4:	1000051e 	bne	r2,zero,1aecc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1aeb8:	e0bfff17 	ldw	r2,-4(fp)
   1aebc:	00c00044 	movi	r3,1
   1aec0:	10c00005 	stb	r3,0(r2)
        return (0);
   1aec4:	0005883a 	mov	r2,zero
   1aec8:	00003806 	br	1afac <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aecc:	0005303a 	rdctl	r2,status
   1aed0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aed4:	e0fffa17 	ldw	r3,-24(fp)
   1aed8:	00bfff84 	movi	r2,-2
   1aedc:	1884703a 	and	r2,r3,r2
   1aee0:	1001703a 	wrctl	status,r2
  
  return context;
   1aee4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1aee8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1aeec:	e0bffd17 	ldw	r2,-12(fp)
   1aef0:	10800283 	ldbu	r2,10(r2)
   1aef4:	10803fcc 	andi	r2,r2,255
   1aef8:	10002526 	beq	r2,zero,1af90 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1aefc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1af00:	e0bffe03 	ldbu	r2,-8(fp)
   1af04:	10800060 	cmpeqi	r2,r2,1
   1af08:	10000e26 	beq	r2,zero,1af44 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1af0c:	00000806 	br	1af30 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1af10:	e13ffd17 	ldw	r4,-12(fp)
   1af14:	000b883a 	mov	r5,zero
   1af18:	01800044 	movi	r6,1
   1af1c:	01c00084 	movi	r7,2
   1af20:	00158200 	call	15820 <OS_EventTaskRdy>
                     nbr_tasks++;
   1af24:	e0bff803 	ldbu	r2,-32(fp)
   1af28:	10800044 	addi	r2,r2,1
   1af2c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1af30:	e0bffd17 	ldw	r2,-12(fp)
   1af34:	10800283 	ldbu	r2,10(r2)
   1af38:	10803fcc 	andi	r2,r2,255
   1af3c:	103ff41e 	bne	r2,zero,1af10 <__alt_mem_Flash_flash_data+0xf401af10>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1af40:	00000906 	br	1af68 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1af44:	e13ffd17 	ldw	r4,-12(fp)
   1af48:	000b883a 	mov	r5,zero
   1af4c:	01800044 	movi	r6,1
   1af50:	01c00084 	movi	r7,2
   1af54:	00158200 	call	15820 <OS_EventTaskRdy>
                 nbr_tasks++;
   1af58:	e0bff803 	ldbu	r2,-32(fp)
   1af5c:	10800044 	addi	r2,r2,1
   1af60:	e0bff805 	stb	r2,-32(fp)
                 break;
   1af64:	0001883a 	nop
   1af68:	e0bff917 	ldw	r2,-28(fp)
   1af6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af70:	e0bffb17 	ldw	r2,-20(fp)
   1af74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1af78:	00162380 	call	16238 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1af7c:	e0bfff17 	ldw	r2,-4(fp)
   1af80:	00c00384 	movi	r3,14
   1af84:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1af88:	e0bff803 	ldbu	r2,-32(fp)
   1af8c:	00000706 	br	1afac <OSSemPendAbort+0x158>
   1af90:	e0bff917 	ldw	r2,-28(fp)
   1af94:	e0bffc15 	stw	r2,-16(fp)
   1af98:	e0bffc17 	ldw	r2,-16(fp)
   1af9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1afa0:	e0bfff17 	ldw	r2,-4(fp)
   1afa4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1afa8:	0005883a 	mov	r2,zero
}
   1afac:	e037883a 	mov	sp,fp
   1afb0:	dfc00117 	ldw	ra,4(sp)
   1afb4:	df000017 	ldw	fp,0(sp)
   1afb8:	dec00204 	addi	sp,sp,8
   1afbc:	f800283a 	ret

0001afc0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1afc0:	defff804 	addi	sp,sp,-32
   1afc4:	dfc00715 	stw	ra,28(sp)
   1afc8:	df000615 	stw	fp,24(sp)
   1afcc:	df000604 	addi	fp,sp,24
   1afd0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1afd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1afd8:	e0bfff17 	ldw	r2,-4(fp)
   1afdc:	1000021e 	bne	r2,zero,1afe8 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1afe0:	00800104 	movi	r2,4
   1afe4:	00003506 	br	1b0bc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1afe8:	e0bfff17 	ldw	r2,-4(fp)
   1afec:	10800003 	ldbu	r2,0(r2)
   1aff0:	10803fcc 	andi	r2,r2,255
   1aff4:	108000e0 	cmpeqi	r2,r2,3
   1aff8:	1000021e 	bne	r2,zero,1b004 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1affc:	00800044 	movi	r2,1
   1b000:	00002e06 	br	1b0bc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b004:	0005303a 	rdctl	r2,status
   1b008:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b00c:	e0fffb17 	ldw	r3,-20(fp)
   1b010:	00bfff84 	movi	r2,-2
   1b014:	1884703a 	and	r2,r3,r2
   1b018:	1001703a 	wrctl	status,r2
  
  return context;
   1b01c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1b020:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1b024:	e0bfff17 	ldw	r2,-4(fp)
   1b028:	10800283 	ldbu	r2,10(r2)
   1b02c:	10803fcc 	andi	r2,r2,255
   1b030:	10000c26 	beq	r2,zero,1b064 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1b034:	e13fff17 	ldw	r4,-4(fp)
   1b038:	000b883a 	mov	r5,zero
   1b03c:	01800044 	movi	r6,1
   1b040:	000f883a 	mov	r7,zero
   1b044:	00158200 	call	15820 <OS_EventTaskRdy>
   1b048:	e0bffa17 	ldw	r2,-24(fp)
   1b04c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b050:	e0bffc17 	ldw	r2,-16(fp)
   1b054:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1b058:	00162380 	call	16238 <OS_Sched>
        return (OS_ERR_NONE);
   1b05c:	0005883a 	mov	r2,zero
   1b060:	00001606 	br	1b0bc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1b064:	e0bfff17 	ldw	r2,-4(fp)
   1b068:	1080020b 	ldhu	r2,8(r2)
   1b06c:	10ffffcc 	andi	r3,r2,65535
   1b070:	00bfffd4 	movui	r2,65535
   1b074:	18800c26 	beq	r3,r2,1b0a8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1b078:	e0bfff17 	ldw	r2,-4(fp)
   1b07c:	1080020b 	ldhu	r2,8(r2)
   1b080:	10800044 	addi	r2,r2,1
   1b084:	1007883a 	mov	r3,r2
   1b088:	e0bfff17 	ldw	r2,-4(fp)
   1b08c:	10c0020d 	sth	r3,8(r2)
   1b090:	e0bffa17 	ldw	r2,-24(fp)
   1b094:	e0bffd15 	stw	r2,-12(fp)
   1b098:	e0bffd17 	ldw	r2,-12(fp)
   1b09c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1b0a0:	0005883a 	mov	r2,zero
   1b0a4:	00000506 	br	1b0bc <OSSemPost+0xfc>
   1b0a8:	e0bffa17 	ldw	r2,-24(fp)
   1b0ac:	e0bffe15 	stw	r2,-8(fp)
   1b0b0:	e0bffe17 	ldw	r2,-8(fp)
   1b0b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1b0b8:	00800c84 	movi	r2,50
}
   1b0bc:	e037883a 	mov	sp,fp
   1b0c0:	dfc00117 	ldw	ra,4(sp)
   1b0c4:	df000017 	ldw	fp,0(sp)
   1b0c8:	dec00204 	addi	sp,sp,8
   1b0cc:	f800283a 	ret

0001b0d0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1b0d0:	defff704 	addi	sp,sp,-36
   1b0d4:	df000815 	stw	fp,32(sp)
   1b0d8:	df000804 	addi	fp,sp,32
   1b0dc:	e13ffe15 	stw	r4,-8(fp)
   1b0e0:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1b0e4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1b0e8:	e0bffe17 	ldw	r2,-8(fp)
   1b0ec:	1000021e 	bne	r2,zero,1b0f8 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1b0f0:	00800104 	movi	r2,4
   1b0f4:	00003606 	br	1b1d0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1b0f8:	e0bfff17 	ldw	r2,-4(fp)
   1b0fc:	1000021e 	bne	r2,zero,1b108 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1b100:	00800244 	movi	r2,9
   1b104:	00003206 	br	1b1d0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1b108:	e0bffe17 	ldw	r2,-8(fp)
   1b10c:	10800003 	ldbu	r2,0(r2)
   1b110:	10803fcc 	andi	r2,r2,255
   1b114:	108000e0 	cmpeqi	r2,r2,3
   1b118:	1000021e 	bne	r2,zero,1b124 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1b11c:	00800044 	movi	r2,1
   1b120:	00002b06 	br	1b1d0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b124:	0005303a 	rdctl	r2,status
   1b128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b12c:	e0fffc17 	ldw	r3,-16(fp)
   1b130:	00bfff84 	movi	r2,-2
   1b134:	1884703a 	and	r2,r3,r2
   1b138:	1001703a 	wrctl	status,r2
  
  return context;
   1b13c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1b140:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1b144:	e0bffe17 	ldw	r2,-8(fp)
   1b148:	10c00283 	ldbu	r3,10(r2)
   1b14c:	e0bfff17 	ldw	r2,-4(fp)
   1b150:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1b154:	e0bffe17 	ldw	r2,-8(fp)
   1b158:	108002c4 	addi	r2,r2,11
   1b15c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1b160:	e0bfff17 	ldw	r2,-4(fp)
   1b164:	10800084 	addi	r2,r2,2
   1b168:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1b16c:	e03ffa05 	stb	zero,-24(fp)
   1b170:	00000b06 	br	1b1a0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1b174:	e0bff917 	ldw	r2,-28(fp)
   1b178:	10c00044 	addi	r3,r2,1
   1b17c:	e0fff915 	stw	r3,-28(fp)
   1b180:	e0fff817 	ldw	r3,-32(fp)
   1b184:	19000044 	addi	r4,r3,1
   1b188:	e13ff815 	stw	r4,-32(fp)
   1b18c:	18c00003 	ldbu	r3,0(r3)
   1b190:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1b194:	e0bffa03 	ldbu	r2,-24(fp)
   1b198:	10800044 	addi	r2,r2,1
   1b19c:	e0bffa05 	stb	r2,-24(fp)
   1b1a0:	e0bffa03 	ldbu	r2,-24(fp)
   1b1a4:	108000f0 	cmpltui	r2,r2,3
   1b1a8:	103ff21e 	bne	r2,zero,1b174 <__alt_mem_Flash_flash_data+0xf401b174>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1b1ac:	e0bffe17 	ldw	r2,-8(fp)
   1b1b0:	10c0020b 	ldhu	r3,8(r2)
   1b1b4:	e0bfff17 	ldw	r2,-4(fp)
   1b1b8:	10c0000d 	sth	r3,0(r2)
   1b1bc:	e0bffb17 	ldw	r2,-20(fp)
   1b1c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b1c4:	e0bffd17 	ldw	r2,-12(fp)
   1b1c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b1cc:	0005883a 	mov	r2,zero
}
   1b1d0:	e037883a 	mov	sp,fp
   1b1d4:	df000017 	ldw	fp,0(sp)
   1b1d8:	dec00104 	addi	sp,sp,4
   1b1dc:	f800283a 	ret

0001b1e0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1b1e0:	defff904 	addi	sp,sp,-28
   1b1e4:	df000615 	stw	fp,24(sp)
   1b1e8:	df000604 	addi	fp,sp,24
   1b1ec:	e13ffd15 	stw	r4,-12(fp)
   1b1f0:	2805883a 	mov	r2,r5
   1b1f4:	e1bfff15 	stw	r6,-4(fp)
   1b1f8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b1fc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1b200:	e0bfff17 	ldw	r2,-4(fp)
   1b204:	1000011e 	bne	r2,zero,1b20c <OSSemSet+0x2c>
        return;
   1b208:	00003006 	br	1b2cc <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1b20c:	e0bffd17 	ldw	r2,-12(fp)
   1b210:	1000041e 	bne	r2,zero,1b224 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1b214:	e0bfff17 	ldw	r2,-4(fp)
   1b218:	00c00104 	movi	r3,4
   1b21c:	10c00005 	stb	r3,0(r2)
        return;
   1b220:	00002a06 	br	1b2cc <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1b224:	e0bffd17 	ldw	r2,-12(fp)
   1b228:	10800003 	ldbu	r2,0(r2)
   1b22c:	10803fcc 	andi	r2,r2,255
   1b230:	108000e0 	cmpeqi	r2,r2,3
   1b234:	1000041e 	bne	r2,zero,1b248 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1b238:	e0bfff17 	ldw	r2,-4(fp)
   1b23c:	00c00044 	movi	r3,1
   1b240:	10c00005 	stb	r3,0(r2)
        return;
   1b244:	00002106 	br	1b2cc <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b248:	0005303a 	rdctl	r2,status
   1b24c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b250:	e0fffb17 	ldw	r3,-20(fp)
   1b254:	00bfff84 	movi	r2,-2
   1b258:	1884703a 	and	r2,r3,r2
   1b25c:	1001703a 	wrctl	status,r2
  
  return context;
   1b260:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1b264:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1b268:	e0bfff17 	ldw	r2,-4(fp)
   1b26c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1b270:	e0bffd17 	ldw	r2,-12(fp)
   1b274:	1080020b 	ldhu	r2,8(r2)
   1b278:	10bfffcc 	andi	r2,r2,65535
   1b27c:	10000426 	beq	r2,zero,1b290 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1b280:	e0bffd17 	ldw	r2,-12(fp)
   1b284:	e0fffe0b 	ldhu	r3,-8(fp)
   1b288:	10c0020d 	sth	r3,8(r2)
   1b28c:	00000b06 	br	1b2bc <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1b290:	e0bffd17 	ldw	r2,-12(fp)
   1b294:	10800283 	ldbu	r2,10(r2)
   1b298:	10803fcc 	andi	r2,r2,255
   1b29c:	1000041e 	bne	r2,zero,1b2b0 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1b2a0:	e0bffd17 	ldw	r2,-12(fp)
   1b2a4:	e0fffe0b 	ldhu	r3,-8(fp)
   1b2a8:	10c0020d 	sth	r3,8(r2)
   1b2ac:	00000306 	br	1b2bc <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1b2b0:	e0bfff17 	ldw	r2,-4(fp)
   1b2b4:	00c01244 	movi	r3,73
   1b2b8:	10c00005 	stb	r3,0(r2)
   1b2bc:	e0bffa17 	ldw	r2,-24(fp)
   1b2c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2c4:	e0bffc17 	ldw	r2,-16(fp)
   1b2c8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1b2cc:	e037883a 	mov	sp,fp
   1b2d0:	df000017 	ldw	fp,0(sp)
   1b2d4:	dec00104 	addi	sp,sp,4
   1b2d8:	f800283a 	ret

0001b2dc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1b2dc:	defff104 	addi	sp,sp,-60
   1b2e0:	dfc00e15 	stw	ra,56(sp)
   1b2e4:	df000d15 	stw	fp,52(sp)
   1b2e8:	df000d04 	addi	fp,sp,52
   1b2ec:	2007883a 	mov	r3,r4
   1b2f0:	2805883a 	mov	r2,r5
   1b2f4:	e0fffe05 	stb	r3,-8(fp)
   1b2f8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1b2fc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1b300:	e0bffe03 	ldbu	r2,-8(fp)
   1b304:	10800530 	cmpltui	r2,r2,20
   1b308:	1000051e 	bne	r2,zero,1b320 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1b30c:	e0bffe03 	ldbu	r2,-8(fp)
   1b310:	10803fe0 	cmpeqi	r2,r2,255
   1b314:	1000021e 	bne	r2,zero,1b320 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1b318:	00800a84 	movi	r2,42
   1b31c:	00013a06 	br	1b808 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1b320:	e0bfff03 	ldbu	r2,-4(fp)
   1b324:	10800530 	cmpltui	r2,r2,20
   1b328:	1000021e 	bne	r2,zero,1b334 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1b32c:	00800a84 	movi	r2,42
   1b330:	00013506 	br	1b808 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b334:	0005303a 	rdctl	r2,status
   1b338:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b33c:	e0fff917 	ldw	r3,-28(fp)
   1b340:	00bfff84 	movi	r2,-2
   1b344:	1884703a 	and	r2,r3,r2
   1b348:	1001703a 	wrctl	status,r2
  
  return context;
   1b34c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b350:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1b354:	e0ffff03 	ldbu	r3,-4(fp)
   1b358:	00800174 	movhi	r2,5
   1b35c:	10bccf04 	addi	r2,r2,-3268
   1b360:	18c7883a 	add	r3,r3,r3
   1b364:	18c7883a 	add	r3,r3,r3
   1b368:	10c5883a 	add	r2,r2,r3
   1b36c:	10800017 	ldw	r2,0(r2)
   1b370:	10000626 	beq	r2,zero,1b38c <OSTaskChangePrio+0xb0>
   1b374:	e0bff517 	ldw	r2,-44(fp)
   1b378:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b37c:	e0bffa17 	ldw	r2,-24(fp)
   1b380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1b384:	00800a04 	movi	r2,40
   1b388:	00011f06 	br	1b808 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1b38c:	e0bffe03 	ldbu	r2,-8(fp)
   1b390:	10803fd8 	cmpnei	r2,r2,255
   1b394:	1000051e 	bne	r2,zero,1b3ac <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1b398:	008000f4 	movhi	r2,3
   1b39c:	10a80704 	addi	r2,r2,-24548
   1b3a0:	10800017 	ldw	r2,0(r2)
   1b3a4:	10800c83 	ldbu	r2,50(r2)
   1b3a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1b3ac:	e0fffe03 	ldbu	r3,-8(fp)
   1b3b0:	00800174 	movhi	r2,5
   1b3b4:	10bccf04 	addi	r2,r2,-3268
   1b3b8:	18c7883a 	add	r3,r3,r3
   1b3bc:	18c7883a 	add	r3,r3,r3
   1b3c0:	10c5883a 	add	r2,r2,r3
   1b3c4:	10800017 	ldw	r2,0(r2)
   1b3c8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1b3cc:	e0bff617 	ldw	r2,-40(fp)
   1b3d0:	1000061e 	bne	r2,zero,1b3ec <OSTaskChangePrio+0x110>
   1b3d4:	e0bff517 	ldw	r2,-44(fp)
   1b3d8:	e0bffb15 	stw	r2,-20(fp)
   1b3dc:	e0bffb17 	ldw	r2,-20(fp)
   1b3e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1b3e4:	00800a44 	movi	r2,41
   1b3e8:	00010706 	br	1b808 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1b3ec:	e0bff617 	ldw	r2,-40(fp)
   1b3f0:	10800058 	cmpnei	r2,r2,1
   1b3f4:	1000061e 	bne	r2,zero,1b410 <OSTaskChangePrio+0x134>
   1b3f8:	e0bff517 	ldw	r2,-44(fp)
   1b3fc:	e0bffc15 	stw	r2,-16(fp)
   1b400:	e0bffc17 	ldw	r2,-16(fp)
   1b404:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1b408:	008010c4 	movi	r2,67
   1b40c:	0000fe06 	br	1b808 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1b410:	e0bfff03 	ldbu	r2,-4(fp)
   1b414:	1004d0fa 	srli	r2,r2,3
   1b418:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1b41c:	e0bfff03 	ldbu	r2,-4(fp)
   1b420:	108001cc 	andi	r2,r2,7
   1b424:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1b428:	e0bff703 	ldbu	r2,-36(fp)
   1b42c:	00c00044 	movi	r3,1
   1b430:	1884983a 	sll	r2,r3,r2
   1b434:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1b438:	e0bff743 	ldbu	r2,-35(fp)
   1b43c:	00c00044 	movi	r3,1
   1b440:	1884983a 	sll	r2,r3,r2
   1b444:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1b448:	e0fffe03 	ldbu	r3,-8(fp)
   1b44c:	00800174 	movhi	r2,5
   1b450:	10bccf04 	addi	r2,r2,-3268
   1b454:	18c7883a 	add	r3,r3,r3
   1b458:	18c7883a 	add	r3,r3,r3
   1b45c:	10c5883a 	add	r2,r2,r3
   1b460:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1b464:	e0ffff03 	ldbu	r3,-4(fp)
   1b468:	00800174 	movhi	r2,5
   1b46c:	10bccf04 	addi	r2,r2,-3268
   1b470:	18c7883a 	add	r3,r3,r3
   1b474:	18c7883a 	add	r3,r3,r3
   1b478:	10c5883a 	add	r2,r2,r3
   1b47c:	e0fff617 	ldw	r3,-40(fp)
   1b480:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1b484:	e0bff617 	ldw	r2,-40(fp)
   1b488:	10800d03 	ldbu	r2,52(r2)
   1b48c:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1b490:	e0bff617 	ldw	r2,-40(fp)
   1b494:	10800d83 	ldbu	r2,54(r2)
   1b498:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1b49c:	e0bff617 	ldw	r2,-40(fp)
   1b4a0:	10800d43 	ldbu	r2,53(r2)
   1b4a4:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1b4a8:	e0fff803 	ldbu	r3,-32(fp)
   1b4ac:	008000f4 	movhi	r2,3
   1b4b0:	10a80444 	addi	r2,r2,-24559
   1b4b4:	10c5883a 	add	r2,r2,r3
   1b4b8:	10c00003 	ldbu	r3,0(r2)
   1b4bc:	e0bff883 	ldbu	r2,-30(fp)
   1b4c0:	1884703a 	and	r2,r3,r2
   1b4c4:	10803fcc 	andi	r2,r2,255
   1b4c8:	10003726 	beq	r2,zero,1b5a8 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1b4cc:	e0fff803 	ldbu	r3,-32(fp)
   1b4d0:	e13ff803 	ldbu	r4,-32(fp)
   1b4d4:	008000f4 	movhi	r2,3
   1b4d8:	10a80444 	addi	r2,r2,-24559
   1b4dc:	1105883a 	add	r2,r2,r4
   1b4e0:	10800003 	ldbu	r2,0(r2)
   1b4e4:	1009883a 	mov	r4,r2
   1b4e8:	e0bff883 	ldbu	r2,-30(fp)
   1b4ec:	0084303a 	nor	r2,zero,r2
   1b4f0:	2084703a 	and	r2,r4,r2
   1b4f4:	1009883a 	mov	r4,r2
   1b4f8:	008000f4 	movhi	r2,3
   1b4fc:	10a80444 	addi	r2,r2,-24559
   1b500:	10c5883a 	add	r2,r2,r3
   1b504:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1b508:	e0fff803 	ldbu	r3,-32(fp)
   1b50c:	008000f4 	movhi	r2,3
   1b510:	10a80444 	addi	r2,r2,-24559
   1b514:	10c5883a 	add	r2,r2,r3
   1b518:	10800003 	ldbu	r2,0(r2)
   1b51c:	10803fcc 	andi	r2,r2,255
   1b520:	10000b1e 	bne	r2,zero,1b550 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1b524:	e0bff843 	ldbu	r2,-31(fp)
   1b528:	0084303a 	nor	r2,zero,r2
   1b52c:	1007883a 	mov	r3,r2
   1b530:	008000f4 	movhi	r2,3
   1b534:	10a80404 	addi	r2,r2,-24560
   1b538:	10800003 	ldbu	r2,0(r2)
   1b53c:	1884703a 	and	r2,r3,r2
   1b540:	1007883a 	mov	r3,r2
   1b544:	008000f4 	movhi	r2,3
   1b548:	10a80404 	addi	r2,r2,-24560
   1b54c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1b550:	008000f4 	movhi	r2,3
   1b554:	10a80404 	addi	r2,r2,-24560
   1b558:	10c00003 	ldbu	r3,0(r2)
   1b55c:	e0bff783 	ldbu	r2,-34(fp)
   1b560:	1884b03a 	or	r2,r3,r2
   1b564:	1007883a 	mov	r3,r2
   1b568:	008000f4 	movhi	r2,3
   1b56c:	10a80404 	addi	r2,r2,-24560
   1b570:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1b574:	e0fff703 	ldbu	r3,-36(fp)
   1b578:	e13ff703 	ldbu	r4,-36(fp)
   1b57c:	008000f4 	movhi	r2,3
   1b580:	10a80444 	addi	r2,r2,-24559
   1b584:	1105883a 	add	r2,r2,r4
   1b588:	11000003 	ldbu	r4,0(r2)
   1b58c:	e0bff7c3 	ldbu	r2,-33(fp)
   1b590:	2084b03a 	or	r2,r4,r2
   1b594:	1009883a 	mov	r4,r2
   1b598:	008000f4 	movhi	r2,3
   1b59c:	10a80444 	addi	r2,r2,-24559
   1b5a0:	10c5883a 	add	r2,r2,r3
   1b5a4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1b5a8:	e0bff617 	ldw	r2,-40(fp)
   1b5ac:	10800717 	ldw	r2,28(r2)
   1b5b0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1b5b4:	e0bff317 	ldw	r2,-52(fp)
   1b5b8:	10003326 	beq	r2,zero,1b688 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1b5bc:	e0bff803 	ldbu	r2,-32(fp)
   1b5c0:	e0fff803 	ldbu	r3,-32(fp)
   1b5c4:	e13ff317 	ldw	r4,-52(fp)
   1b5c8:	20c7883a 	add	r3,r4,r3
   1b5cc:	18c00204 	addi	r3,r3,8
   1b5d0:	18c000c3 	ldbu	r3,3(r3)
   1b5d4:	1809883a 	mov	r4,r3
   1b5d8:	e0fff883 	ldbu	r3,-30(fp)
   1b5dc:	00c6303a 	nor	r3,zero,r3
   1b5e0:	20c6703a 	and	r3,r4,r3
   1b5e4:	1809883a 	mov	r4,r3
   1b5e8:	e0fff317 	ldw	r3,-52(fp)
   1b5ec:	1885883a 	add	r2,r3,r2
   1b5f0:	10800204 	addi	r2,r2,8
   1b5f4:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1b5f8:	e0bff803 	ldbu	r2,-32(fp)
   1b5fc:	e0fff317 	ldw	r3,-52(fp)
   1b600:	1885883a 	add	r2,r3,r2
   1b604:	10800204 	addi	r2,r2,8
   1b608:	108000c3 	ldbu	r2,3(r2)
   1b60c:	10803fcc 	andi	r2,r2,255
   1b610:	1000091e 	bne	r2,zero,1b638 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1b614:	e0bff317 	ldw	r2,-52(fp)
   1b618:	10800283 	ldbu	r2,10(r2)
   1b61c:	1007883a 	mov	r3,r2
   1b620:	e0bff843 	ldbu	r2,-31(fp)
   1b624:	0084303a 	nor	r2,zero,r2
   1b628:	1884703a 	and	r2,r3,r2
   1b62c:	1007883a 	mov	r3,r2
   1b630:	e0bff317 	ldw	r2,-52(fp)
   1b634:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1b638:	e0bff317 	ldw	r2,-52(fp)
   1b63c:	10c00283 	ldbu	r3,10(r2)
   1b640:	e0bff783 	ldbu	r2,-34(fp)
   1b644:	1884b03a 	or	r2,r3,r2
   1b648:	1007883a 	mov	r3,r2
   1b64c:	e0bff317 	ldw	r2,-52(fp)
   1b650:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1b654:	e0bff703 	ldbu	r2,-36(fp)
   1b658:	e0fff703 	ldbu	r3,-36(fp)
   1b65c:	e13ff317 	ldw	r4,-52(fp)
   1b660:	20c7883a 	add	r3,r4,r3
   1b664:	18c00204 	addi	r3,r3,8
   1b668:	190000c3 	ldbu	r4,3(r3)
   1b66c:	e0fff7c3 	ldbu	r3,-33(fp)
   1b670:	20c6b03a 	or	r3,r4,r3
   1b674:	1809883a 	mov	r4,r3
   1b678:	e0fff317 	ldw	r3,-52(fp)
   1b67c:	1885883a 	add	r2,r3,r2
   1b680:	10800204 	addi	r2,r2,8
   1b684:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1b688:	e0bff617 	ldw	r2,-40(fp)
   1b68c:	10800817 	ldw	r2,32(r2)
   1b690:	10004226 	beq	r2,zero,1b79c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1b694:	e0bff617 	ldw	r2,-40(fp)
   1b698:	10800817 	ldw	r2,32(r2)
   1b69c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1b6a0:	e0bff417 	ldw	r2,-48(fp)
   1b6a4:	10800017 	ldw	r2,0(r2)
   1b6a8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1b6ac:	00003906 	br	1b794 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1b6b0:	e0bff803 	ldbu	r2,-32(fp)
   1b6b4:	e0fff803 	ldbu	r3,-32(fp)
   1b6b8:	e13ff317 	ldw	r4,-52(fp)
   1b6bc:	20c7883a 	add	r3,r4,r3
   1b6c0:	18c00204 	addi	r3,r3,8
   1b6c4:	18c000c3 	ldbu	r3,3(r3)
   1b6c8:	1809883a 	mov	r4,r3
   1b6cc:	e0fff883 	ldbu	r3,-30(fp)
   1b6d0:	00c6303a 	nor	r3,zero,r3
   1b6d4:	20c6703a 	and	r3,r4,r3
   1b6d8:	1809883a 	mov	r4,r3
   1b6dc:	e0fff317 	ldw	r3,-52(fp)
   1b6e0:	1885883a 	add	r2,r3,r2
   1b6e4:	10800204 	addi	r2,r2,8
   1b6e8:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1b6ec:	e0bff803 	ldbu	r2,-32(fp)
   1b6f0:	e0fff317 	ldw	r3,-52(fp)
   1b6f4:	1885883a 	add	r2,r3,r2
   1b6f8:	10800204 	addi	r2,r2,8
   1b6fc:	108000c3 	ldbu	r2,3(r2)
   1b700:	10803fcc 	andi	r2,r2,255
   1b704:	1000091e 	bne	r2,zero,1b72c <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1b708:	e0bff317 	ldw	r2,-52(fp)
   1b70c:	10800283 	ldbu	r2,10(r2)
   1b710:	1007883a 	mov	r3,r2
   1b714:	e0bff843 	ldbu	r2,-31(fp)
   1b718:	0084303a 	nor	r2,zero,r2
   1b71c:	1884703a 	and	r2,r3,r2
   1b720:	1007883a 	mov	r3,r2
   1b724:	e0bff317 	ldw	r2,-52(fp)
   1b728:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1b72c:	e0bff317 	ldw	r2,-52(fp)
   1b730:	10c00283 	ldbu	r3,10(r2)
   1b734:	e0bff783 	ldbu	r2,-34(fp)
   1b738:	1884b03a 	or	r2,r3,r2
   1b73c:	1007883a 	mov	r3,r2
   1b740:	e0bff317 	ldw	r2,-52(fp)
   1b744:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1b748:	e0bff703 	ldbu	r2,-36(fp)
   1b74c:	e0fff703 	ldbu	r3,-36(fp)
   1b750:	e13ff317 	ldw	r4,-52(fp)
   1b754:	20c7883a 	add	r3,r4,r3
   1b758:	18c00204 	addi	r3,r3,8
   1b75c:	190000c3 	ldbu	r4,3(r3)
   1b760:	e0fff7c3 	ldbu	r3,-33(fp)
   1b764:	20c6b03a 	or	r3,r4,r3
   1b768:	1809883a 	mov	r4,r3
   1b76c:	e0fff317 	ldw	r3,-52(fp)
   1b770:	1885883a 	add	r2,r3,r2
   1b774:	10800204 	addi	r2,r2,8
   1b778:	110000c5 	stb	r4,3(r2)
            pevents++;
   1b77c:	e0bff417 	ldw	r2,-48(fp)
   1b780:	10800104 	addi	r2,r2,4
   1b784:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1b788:	e0bff417 	ldw	r2,-48(fp)
   1b78c:	10800017 	ldw	r2,0(r2)
   1b790:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1b794:	e0bff317 	ldw	r2,-52(fp)
   1b798:	103fc51e 	bne	r2,zero,1b6b0 <__alt_mem_Flash_flash_data+0xf401b6b0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1b79c:	e0bff617 	ldw	r2,-40(fp)
   1b7a0:	e0ffff03 	ldbu	r3,-4(fp)
   1b7a4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1b7a8:	e0bff617 	ldw	r2,-40(fp)
   1b7ac:	e0fff703 	ldbu	r3,-36(fp)
   1b7b0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1b7b4:	e0bff617 	ldw	r2,-40(fp)
   1b7b8:	e0fff743 	ldbu	r3,-35(fp)
   1b7bc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1b7c0:	e0bff617 	ldw	r2,-40(fp)
   1b7c4:	e0fff783 	ldbu	r3,-34(fp)
   1b7c8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1b7cc:	e0bff617 	ldw	r2,-40(fp)
   1b7d0:	e0fff7c3 	ldbu	r3,-33(fp)
   1b7d4:	10c00d45 	stb	r3,53(r2)
   1b7d8:	e0bff517 	ldw	r2,-44(fp)
   1b7dc:	e0bffd15 	stw	r2,-12(fp)
   1b7e0:	e0bffd17 	ldw	r2,-12(fp)
   1b7e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1b7e8:	008000f4 	movhi	r2,3
   1b7ec:	10a7f844 	addi	r2,r2,-24607
   1b7f0:	10800003 	ldbu	r2,0(r2)
   1b7f4:	10803fcc 	andi	r2,r2,255
   1b7f8:	10800058 	cmpnei	r2,r2,1
   1b7fc:	1000011e 	bne	r2,zero,1b804 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1b800:	00162380 	call	16238 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b804:	0005883a 	mov	r2,zero
}
   1b808:	e037883a 	mov	sp,fp
   1b80c:	dfc00117 	ldw	ra,4(sp)
   1b810:	df000017 	ldw	fp,0(sp)
   1b814:	dec00204 	addi	sp,sp,8
   1b818:	f800283a 	ret

0001b81c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1b81c:	deffee04 	addi	sp,sp,-72
   1b820:	dfc01115 	stw	ra,68(sp)
   1b824:	df001015 	stw	fp,64(sp)
   1b828:	df001004 	addi	fp,sp,64
   1b82c:	e13ffc15 	stw	r4,-16(fp)
   1b830:	e17ffd15 	stw	r5,-12(fp)
   1b834:	e1bffe15 	stw	r6,-8(fp)
   1b838:	3805883a 	mov	r2,r7
   1b83c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1b840:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1b844:	e0bfff03 	ldbu	r2,-4(fp)
   1b848:	10800570 	cmpltui	r2,r2,21
   1b84c:	1000021e 	bne	r2,zero,1b858 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1b850:	00800a84 	movi	r2,42
   1b854:	00005b06 	br	1b9c4 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b858:	0005303a 	rdctl	r2,status
   1b85c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b860:	e0fff617 	ldw	r3,-40(fp)
   1b864:	00bfff84 	movi	r2,-2
   1b868:	1884703a 	and	r2,r3,r2
   1b86c:	1001703a 	wrctl	status,r2
  
  return context;
   1b870:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b874:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1b878:	008000f4 	movhi	r2,3
   1b87c:	10a80604 	addi	r2,r2,-24552
   1b880:	10800003 	ldbu	r2,0(r2)
   1b884:	10803fcc 	andi	r2,r2,255
   1b888:	10000626 	beq	r2,zero,1b8a4 <OSTaskCreate+0x88>
   1b88c:	e0bff317 	ldw	r2,-52(fp)
   1b890:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b894:	e0bff717 	ldw	r2,-36(fp)
   1b898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1b89c:	00800f04 	movi	r2,60
   1b8a0:	00004806 	br	1b9c4 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1b8a4:	e0ffff03 	ldbu	r3,-4(fp)
   1b8a8:	00800174 	movhi	r2,5
   1b8ac:	10bccf04 	addi	r2,r2,-3268
   1b8b0:	18c7883a 	add	r3,r3,r3
   1b8b4:	18c7883a 	add	r3,r3,r3
   1b8b8:	10c5883a 	add	r2,r2,r3
   1b8bc:	10800017 	ldw	r2,0(r2)
   1b8c0:	10003b1e 	bne	r2,zero,1b9b0 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1b8c4:	e0ffff03 	ldbu	r3,-4(fp)
   1b8c8:	00800174 	movhi	r2,5
   1b8cc:	10bccf04 	addi	r2,r2,-3268
   1b8d0:	18c7883a 	add	r3,r3,r3
   1b8d4:	18c7883a 	add	r3,r3,r3
   1b8d8:	10c5883a 	add	r2,r2,r3
   1b8dc:	00c00044 	movi	r3,1
   1b8e0:	10c00015 	stw	r3,0(r2)
   1b8e4:	e0bff317 	ldw	r2,-52(fp)
   1b8e8:	e0bff815 	stw	r2,-32(fp)
   1b8ec:	e0bff817 	ldw	r2,-32(fp)
   1b8f0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1b8f4:	e13ffc17 	ldw	r4,-16(fp)
   1b8f8:	e17ffd17 	ldw	r5,-12(fp)
   1b8fc:	e1bffe17 	ldw	r6,-8(fp)
   1b900:	000f883a 	mov	r7,zero
   1b904:	00248b40 	call	248b4 <OSTaskStkInit>
   1b908:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1b90c:	e0bfff03 	ldbu	r2,-4(fp)
   1b910:	d8000015 	stw	zero,0(sp)
   1b914:	d8000115 	stw	zero,4(sp)
   1b918:	d8000215 	stw	zero,8(sp)
   1b91c:	1009883a 	mov	r4,r2
   1b920:	e17ff417 	ldw	r5,-48(fp)
   1b924:	000d883a 	mov	r6,zero
   1b928:	000f883a 	mov	r7,zero
   1b92c:	001663c0 	call	1663c <OS_TCBInit>
   1b930:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1b934:	e0bff503 	ldbu	r2,-44(fp)
   1b938:	1000081e 	bne	r2,zero,1b95c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1b93c:	008000f4 	movhi	r2,3
   1b940:	10a7f844 	addi	r2,r2,-24607
   1b944:	10800003 	ldbu	r2,0(r2)
   1b948:	10803fcc 	andi	r2,r2,255
   1b94c:	10800058 	cmpnei	r2,r2,1
   1b950:	1000151e 	bne	r2,zero,1b9a8 <OSTaskCreate+0x18c>
                OS_Sched();
   1b954:	00162380 	call	16238 <OS_Sched>
   1b958:	00001306 	br	1b9a8 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b95c:	0005303a 	rdctl	r2,status
   1b960:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b964:	e0fff917 	ldw	r3,-28(fp)
   1b968:	00bfff84 	movi	r2,-2
   1b96c:	1884703a 	and	r2,r3,r2
   1b970:	1001703a 	wrctl	status,r2
  
  return context;
   1b974:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1b978:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1b97c:	e0ffff03 	ldbu	r3,-4(fp)
   1b980:	00800174 	movhi	r2,5
   1b984:	10bccf04 	addi	r2,r2,-3268
   1b988:	18c7883a 	add	r3,r3,r3
   1b98c:	18c7883a 	add	r3,r3,r3
   1b990:	10c5883a 	add	r2,r2,r3
   1b994:	10000015 	stw	zero,0(r2)
   1b998:	e0bff317 	ldw	r2,-52(fp)
   1b99c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b9a0:	e0bffa17 	ldw	r2,-24(fp)
   1b9a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1b9a8:	e0bff503 	ldbu	r2,-44(fp)
   1b9ac:	00000506 	br	1b9c4 <OSTaskCreate+0x1a8>
   1b9b0:	e0bff317 	ldw	r2,-52(fp)
   1b9b4:	e0bffb15 	stw	r2,-20(fp)
   1b9b8:	e0bffb17 	ldw	r2,-20(fp)
   1b9bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1b9c0:	00800a04 	movi	r2,40
}
   1b9c4:	e037883a 	mov	sp,fp
   1b9c8:	dfc00117 	ldw	ra,4(sp)
   1b9cc:	df000017 	ldw	fp,0(sp)
   1b9d0:	dec00204 	addi	sp,sp,8
   1b9d4:	f800283a 	ret

0001b9d8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1b9d8:	deffec04 	addi	sp,sp,-80
   1b9dc:	dfc01315 	stw	ra,76(sp)
   1b9e0:	df001215 	stw	fp,72(sp)
   1b9e4:	df001204 	addi	fp,sp,72
   1b9e8:	e13ffa15 	stw	r4,-24(fp)
   1b9ec:	e17ffb15 	stw	r5,-20(fp)
   1b9f0:	e1bffc15 	stw	r6,-16(fp)
   1b9f4:	3809883a 	mov	r4,r7
   1b9f8:	e0c00217 	ldw	r3,8(fp)
   1b9fc:	e0800617 	ldw	r2,24(fp)
   1ba00:	e13ffd05 	stb	r4,-12(fp)
   1ba04:	e0fffe0d 	sth	r3,-8(fp)
   1ba08:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1ba0c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1ba10:	e0bffd03 	ldbu	r2,-12(fp)
   1ba14:	10800570 	cmpltui	r2,r2,21
   1ba18:	1000021e 	bne	r2,zero,1ba24 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1ba1c:	00800a84 	movi	r2,42
   1ba20:	00006306 	br	1bbb0 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba24:	0005303a 	rdctl	r2,status
   1ba28:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba2c:	e0fff417 	ldw	r3,-48(fp)
   1ba30:	00bfff84 	movi	r2,-2
   1ba34:	1884703a 	and	r2,r3,r2
   1ba38:	1001703a 	wrctl	status,r2
  
  return context;
   1ba3c:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ba40:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1ba44:	008000f4 	movhi	r2,3
   1ba48:	10a80604 	addi	r2,r2,-24552
   1ba4c:	10800003 	ldbu	r2,0(r2)
   1ba50:	10803fcc 	andi	r2,r2,255
   1ba54:	10000626 	beq	r2,zero,1ba70 <OSTaskCreateExt+0x98>
   1ba58:	e0bff117 	ldw	r2,-60(fp)
   1ba5c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba60:	e0bff517 	ldw	r2,-44(fp)
   1ba64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1ba68:	00800f04 	movi	r2,60
   1ba6c:	00005006 	br	1bbb0 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1ba70:	e0fffd03 	ldbu	r3,-12(fp)
   1ba74:	00800174 	movhi	r2,5
   1ba78:	10bccf04 	addi	r2,r2,-3268
   1ba7c:	18c7883a 	add	r3,r3,r3
   1ba80:	18c7883a 	add	r3,r3,r3
   1ba84:	10c5883a 	add	r2,r2,r3
   1ba88:	10800017 	ldw	r2,0(r2)
   1ba8c:	1000431e 	bne	r2,zero,1bb9c <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1ba90:	e0fffd03 	ldbu	r3,-12(fp)
   1ba94:	00800174 	movhi	r2,5
   1ba98:	10bccf04 	addi	r2,r2,-3268
   1ba9c:	18c7883a 	add	r3,r3,r3
   1baa0:	18c7883a 	add	r3,r3,r3
   1baa4:	10c5883a 	add	r2,r2,r3
   1baa8:	00c00044 	movi	r3,1
   1baac:	10c00015 	stw	r3,0(r2)
   1bab0:	e0bff117 	ldw	r2,-60(fp)
   1bab4:	e0bff615 	stw	r2,-40(fp)
   1bab8:	e0bff617 	ldw	r2,-40(fp)
   1babc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1bac0:	e0bfff0b 	ldhu	r2,-4(fp)
   1bac4:	e1000317 	ldw	r4,12(fp)
   1bac8:	e1400417 	ldw	r5,16(fp)
   1bacc:	100d883a 	mov	r6,r2
   1bad0:	001cb640 	call	1cb64 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1bad4:	e0bfff0b 	ldhu	r2,-4(fp)
   1bad8:	e13ffa17 	ldw	r4,-24(fp)
   1badc:	e17ffb17 	ldw	r5,-20(fp)
   1bae0:	e1bffc17 	ldw	r6,-16(fp)
   1bae4:	100f883a 	mov	r7,r2
   1bae8:	00248b40 	call	248b4 <OSTaskStkInit>
   1baec:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1baf0:	e13ffd03 	ldbu	r4,-12(fp)
   1baf4:	e1fffe0b 	ldhu	r7,-8(fp)
   1baf8:	e0bfff0b 	ldhu	r2,-4(fp)
   1bafc:	e0c00417 	ldw	r3,16(fp)
   1bb00:	d8c00015 	stw	r3,0(sp)
   1bb04:	e0c00517 	ldw	r3,20(fp)
   1bb08:	d8c00115 	stw	r3,4(sp)
   1bb0c:	d8800215 	stw	r2,8(sp)
   1bb10:	e17ff217 	ldw	r5,-56(fp)
   1bb14:	e1800317 	ldw	r6,12(fp)
   1bb18:	001663c0 	call	1663c <OS_TCBInit>
   1bb1c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1bb20:	e0bff303 	ldbu	r2,-52(fp)
   1bb24:	1000081e 	bne	r2,zero,1bb48 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1bb28:	008000f4 	movhi	r2,3
   1bb2c:	10a7f844 	addi	r2,r2,-24607
   1bb30:	10800003 	ldbu	r2,0(r2)
   1bb34:	10803fcc 	andi	r2,r2,255
   1bb38:	10800058 	cmpnei	r2,r2,1
   1bb3c:	1000151e 	bne	r2,zero,1bb94 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1bb40:	00162380 	call	16238 <OS_Sched>
   1bb44:	00001306 	br	1bb94 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb48:	0005303a 	rdctl	r2,status
   1bb4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb50:	e0fff717 	ldw	r3,-36(fp)
   1bb54:	00bfff84 	movi	r2,-2
   1bb58:	1884703a 	and	r2,r3,r2
   1bb5c:	1001703a 	wrctl	status,r2
  
  return context;
   1bb60:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1bb64:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1bb68:	e0fffd03 	ldbu	r3,-12(fp)
   1bb6c:	00800174 	movhi	r2,5
   1bb70:	10bccf04 	addi	r2,r2,-3268
   1bb74:	18c7883a 	add	r3,r3,r3
   1bb78:	18c7883a 	add	r3,r3,r3
   1bb7c:	10c5883a 	add	r2,r2,r3
   1bb80:	10000015 	stw	zero,0(r2)
   1bb84:	e0bff117 	ldw	r2,-60(fp)
   1bb88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb8c:	e0bff817 	ldw	r2,-32(fp)
   1bb90:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1bb94:	e0bff303 	ldbu	r2,-52(fp)
   1bb98:	00000506 	br	1bbb0 <OSTaskCreateExt+0x1d8>
   1bb9c:	e0bff117 	ldw	r2,-60(fp)
   1bba0:	e0bff915 	stw	r2,-28(fp)
   1bba4:	e0bff917 	ldw	r2,-28(fp)
   1bba8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1bbac:	00800a04 	movi	r2,40
}
   1bbb0:	e037883a 	mov	sp,fp
   1bbb4:	dfc00117 	ldw	ra,4(sp)
   1bbb8:	df000017 	ldw	fp,0(sp)
   1bbbc:	dec00204 	addi	sp,sp,8
   1bbc0:	f800283a 	ret

0001bbc4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1bbc4:	defff404 	addi	sp,sp,-48
   1bbc8:	dfc00b15 	stw	ra,44(sp)
   1bbcc:	df000a15 	stw	fp,40(sp)
   1bbd0:	df000a04 	addi	fp,sp,40
   1bbd4:	2005883a 	mov	r2,r4
   1bbd8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1bbdc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1bbe0:	008000f4 	movhi	r2,3
   1bbe4:	10a80604 	addi	r2,r2,-24552
   1bbe8:	10800003 	ldbu	r2,0(r2)
   1bbec:	10803fcc 	andi	r2,r2,255
   1bbf0:	10000226 	beq	r2,zero,1bbfc <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1bbf4:	00801004 	movi	r2,64
   1bbf8:	0000e506 	br	1bf90 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1bbfc:	e0bfff03 	ldbu	r2,-4(fp)
   1bc00:	10800518 	cmpnei	r2,r2,20
   1bc04:	1000021e 	bne	r2,zero,1bc10 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1bc08:	00800f84 	movi	r2,62
   1bc0c:	0000e006 	br	1bf90 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1bc10:	e0bfff03 	ldbu	r2,-4(fp)
   1bc14:	10800530 	cmpltui	r2,r2,20
   1bc18:	1000051e 	bne	r2,zero,1bc30 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1bc1c:	e0bfff03 	ldbu	r2,-4(fp)
   1bc20:	10803fe0 	cmpeqi	r2,r2,255
   1bc24:	1000021e 	bne	r2,zero,1bc30 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1bc28:	00800a84 	movi	r2,42
   1bc2c:	0000d806 	br	1bf90 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc30:	0005303a 	rdctl	r2,status
   1bc34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc38:	e0fff917 	ldw	r3,-28(fp)
   1bc3c:	00bfff84 	movi	r2,-2
   1bc40:	1884703a 	and	r2,r3,r2
   1bc44:	1001703a 	wrctl	status,r2
  
  return context;
   1bc48:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1bc4c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1bc50:	e0bfff03 	ldbu	r2,-4(fp)
   1bc54:	10803fd8 	cmpnei	r2,r2,255
   1bc58:	1000051e 	bne	r2,zero,1bc70 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1bc5c:	008000f4 	movhi	r2,3
   1bc60:	10a80704 	addi	r2,r2,-24548
   1bc64:	10800017 	ldw	r2,0(r2)
   1bc68:	10800c83 	ldbu	r2,50(r2)
   1bc6c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bc70:	e0ffff03 	ldbu	r3,-4(fp)
   1bc74:	00800174 	movhi	r2,5
   1bc78:	10bccf04 	addi	r2,r2,-3268
   1bc7c:	18c7883a 	add	r3,r3,r3
   1bc80:	18c7883a 	add	r3,r3,r3
   1bc84:	10c5883a 	add	r2,r2,r3
   1bc88:	10800017 	ldw	r2,0(r2)
   1bc8c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1bc90:	e0bff717 	ldw	r2,-36(fp)
   1bc94:	1000061e 	bne	r2,zero,1bcb0 <OSTaskDel+0xec>
   1bc98:	e0bff617 	ldw	r2,-40(fp)
   1bc9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bca0:	e0bffa17 	ldw	r2,-24(fp)
   1bca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1bca8:	008010c4 	movi	r2,67
   1bcac:	0000b806 	br	1bf90 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1bcb0:	e0bff717 	ldw	r2,-36(fp)
   1bcb4:	10800058 	cmpnei	r2,r2,1
   1bcb8:	1000061e 	bne	r2,zero,1bcd4 <OSTaskDel+0x110>
   1bcbc:	e0bff617 	ldw	r2,-40(fp)
   1bcc0:	e0bffb15 	stw	r2,-20(fp)
   1bcc4:	e0bffb17 	ldw	r2,-20(fp)
   1bcc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1bccc:	00800f44 	movi	r2,61
   1bcd0:	0000af06 	br	1bf90 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1bcd4:	e0bff717 	ldw	r2,-36(fp)
   1bcd8:	10800d03 	ldbu	r2,52(r2)
   1bcdc:	10c03fcc 	andi	r3,r2,255
   1bce0:	e0bff717 	ldw	r2,-36(fp)
   1bce4:	10800d03 	ldbu	r2,52(r2)
   1bce8:	11003fcc 	andi	r4,r2,255
   1bcec:	008000f4 	movhi	r2,3
   1bcf0:	10a80444 	addi	r2,r2,-24559
   1bcf4:	1105883a 	add	r2,r2,r4
   1bcf8:	10800003 	ldbu	r2,0(r2)
   1bcfc:	1009883a 	mov	r4,r2
   1bd00:	e0bff717 	ldw	r2,-36(fp)
   1bd04:	10800d43 	ldbu	r2,53(r2)
   1bd08:	0084303a 	nor	r2,zero,r2
   1bd0c:	2084703a 	and	r2,r4,r2
   1bd10:	1009883a 	mov	r4,r2
   1bd14:	008000f4 	movhi	r2,3
   1bd18:	10a80444 	addi	r2,r2,-24559
   1bd1c:	10c5883a 	add	r2,r2,r3
   1bd20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1bd24:	e0bff717 	ldw	r2,-36(fp)
   1bd28:	10800d03 	ldbu	r2,52(r2)
   1bd2c:	10c03fcc 	andi	r3,r2,255
   1bd30:	008000f4 	movhi	r2,3
   1bd34:	10a80444 	addi	r2,r2,-24559
   1bd38:	10c5883a 	add	r2,r2,r3
   1bd3c:	10800003 	ldbu	r2,0(r2)
   1bd40:	10803fcc 	andi	r2,r2,255
   1bd44:	10000c1e 	bne	r2,zero,1bd78 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1bd48:	e0bff717 	ldw	r2,-36(fp)
   1bd4c:	10800d83 	ldbu	r2,54(r2)
   1bd50:	0084303a 	nor	r2,zero,r2
   1bd54:	1007883a 	mov	r3,r2
   1bd58:	008000f4 	movhi	r2,3
   1bd5c:	10a80404 	addi	r2,r2,-24560
   1bd60:	10800003 	ldbu	r2,0(r2)
   1bd64:	1884703a 	and	r2,r3,r2
   1bd68:	1007883a 	mov	r3,r2
   1bd6c:	008000f4 	movhi	r2,3
   1bd70:	10a80404 	addi	r2,r2,-24560
   1bd74:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1bd78:	e0bff717 	ldw	r2,-36(fp)
   1bd7c:	10800717 	ldw	r2,28(r2)
   1bd80:	10000526 	beq	r2,zero,1bd98 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1bd84:	e0bff717 	ldw	r2,-36(fp)
   1bd88:	10800717 	ldw	r2,28(r2)
   1bd8c:	e13ff717 	ldw	r4,-36(fp)
   1bd90:	100b883a 	mov	r5,r2
   1bd94:	0015c100 	call	15c10 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1bd98:	e0bff717 	ldw	r2,-36(fp)
   1bd9c:	10800817 	ldw	r2,32(r2)
   1bda0:	10000526 	beq	r2,zero,1bdb8 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1bda4:	e0bff717 	ldw	r2,-36(fp)
   1bda8:	10800817 	ldw	r2,32(r2)
   1bdac:	e13ff717 	ldw	r4,-36(fp)
   1bdb0:	100b883a 	mov	r5,r2
   1bdb4:	0015cc40 	call	15cc4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1bdb8:	e0bff717 	ldw	r2,-36(fp)
   1bdbc:	10800a17 	ldw	r2,40(r2)
   1bdc0:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1bdc4:	e0bff817 	ldw	r2,-32(fp)
   1bdc8:	10000226 	beq	r2,zero,1bdd4 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1bdcc:	e13ff817 	ldw	r4,-32(fp)
   1bdd0:	00182180 	call	18218 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1bdd4:	e0bff717 	ldw	r2,-36(fp)
   1bdd8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1bddc:	e0bff717 	ldw	r2,-36(fp)
   1bde0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1bde4:	e0bff717 	ldw	r2,-36(fp)
   1bde8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1bdec:	008000f4 	movhi	r2,3
   1bdf0:	10a7f804 	addi	r2,r2,-24608
   1bdf4:	10800003 	ldbu	r2,0(r2)
   1bdf8:	10803fcc 	andi	r2,r2,255
   1bdfc:	10803fe0 	cmpeqi	r2,r2,255
   1be00:	1000081e 	bne	r2,zero,1be24 <OSTaskDel+0x260>
        OSLockNesting++;
   1be04:	008000f4 	movhi	r2,3
   1be08:	10a7f804 	addi	r2,r2,-24608
   1be0c:	10800003 	ldbu	r2,0(r2)
   1be10:	10800044 	addi	r2,r2,1
   1be14:	1007883a 	mov	r3,r2
   1be18:	008000f4 	movhi	r2,3
   1be1c:	10a7f804 	addi	r2,r2,-24608
   1be20:	10c00005 	stb	r3,0(r2)
   1be24:	e0bff617 	ldw	r2,-40(fp)
   1be28:	e0bffc15 	stw	r2,-16(fp)
   1be2c:	e0bffc17 	ldw	r2,-16(fp)
   1be30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1be34:	00158040 	call	15804 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be38:	0005303a 	rdctl	r2,status
   1be3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be40:	e0fffd17 	ldw	r3,-12(fp)
   1be44:	00bfff84 	movi	r2,-2
   1be48:	1884703a 	and	r2,r3,r2
   1be4c:	1001703a 	wrctl	status,r2
  
  return context;
   1be50:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1be54:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1be58:	008000f4 	movhi	r2,3
   1be5c:	10a7f804 	addi	r2,r2,-24608
   1be60:	10800003 	ldbu	r2,0(r2)
   1be64:	10803fcc 	andi	r2,r2,255
   1be68:	10000826 	beq	r2,zero,1be8c <OSTaskDel+0x2c8>
        OSLockNesting--;
   1be6c:	008000f4 	movhi	r2,3
   1be70:	10a7f804 	addi	r2,r2,-24608
   1be74:	10800003 	ldbu	r2,0(r2)
   1be78:	10bfffc4 	addi	r2,r2,-1
   1be7c:	1007883a 	mov	r3,r2
   1be80:	008000f4 	movhi	r2,3
   1be84:	10a7f804 	addi	r2,r2,-24608
   1be88:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1be8c:	e13ff717 	ldw	r4,-36(fp)
   1be90:	0024a300 	call	24a30 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1be94:	008000f4 	movhi	r2,3
   1be98:	10a80044 	addi	r2,r2,-24575
   1be9c:	10800003 	ldbu	r2,0(r2)
   1bea0:	10bfffc4 	addi	r2,r2,-1
   1bea4:	1007883a 	mov	r3,r2
   1bea8:	008000f4 	movhi	r2,3
   1beac:	10a80044 	addi	r2,r2,-24575
   1beb0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1beb4:	e0ffff03 	ldbu	r3,-4(fp)
   1beb8:	00800174 	movhi	r2,5
   1bebc:	10bccf04 	addi	r2,r2,-3268
   1bec0:	18c7883a 	add	r3,r3,r3
   1bec4:	18c7883a 	add	r3,r3,r3
   1bec8:	10c5883a 	add	r2,r2,r3
   1becc:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1bed0:	e0bff717 	ldw	r2,-36(fp)
   1bed4:	10800617 	ldw	r2,24(r2)
   1bed8:	1000091e 	bne	r2,zero,1bf00 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1bedc:	e0bff717 	ldw	r2,-36(fp)
   1bee0:	10800517 	ldw	r2,20(r2)
   1bee4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1bee8:	e0bff717 	ldw	r2,-36(fp)
   1beec:	10c00517 	ldw	r3,20(r2)
   1bef0:	008000f4 	movhi	r2,3
   1bef4:	10a7fb04 	addi	r2,r2,-24596
   1bef8:	10c00015 	stw	r3,0(r2)
   1befc:	00000a06 	br	1bf28 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1bf00:	e0bff717 	ldw	r2,-36(fp)
   1bf04:	10800617 	ldw	r2,24(r2)
   1bf08:	e0fff717 	ldw	r3,-36(fp)
   1bf0c:	18c00517 	ldw	r3,20(r3)
   1bf10:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1bf14:	e0bff717 	ldw	r2,-36(fp)
   1bf18:	10800517 	ldw	r2,20(r2)
   1bf1c:	e0fff717 	ldw	r3,-36(fp)
   1bf20:	18c00617 	ldw	r3,24(r3)
   1bf24:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1bf28:	008000f4 	movhi	r2,3
   1bf2c:	10a7ff04 	addi	r2,r2,-24580
   1bf30:	10c00017 	ldw	r3,0(r2)
   1bf34:	e0bff717 	ldw	r2,-36(fp)
   1bf38:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1bf3c:	008000f4 	movhi	r2,3
   1bf40:	10a7ff04 	addi	r2,r2,-24580
   1bf44:	e0fff717 	ldw	r3,-36(fp)
   1bf48:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1bf4c:	e0bff717 	ldw	r2,-36(fp)
   1bf50:	00c00fc4 	movi	r3,63
   1bf54:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1bf58:	e0bff717 	ldw	r2,-36(fp)
   1bf5c:	10001345 	stb	zero,77(r2)
   1bf60:	e0bff617 	ldw	r2,-40(fp)
   1bf64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf68:	e0bffe17 	ldw	r2,-8(fp)
   1bf6c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1bf70:	008000f4 	movhi	r2,3
   1bf74:	10a7f844 	addi	r2,r2,-24607
   1bf78:	10800003 	ldbu	r2,0(r2)
   1bf7c:	10803fcc 	andi	r2,r2,255
   1bf80:	10800058 	cmpnei	r2,r2,1
   1bf84:	1000011e 	bne	r2,zero,1bf8c <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1bf88:	00162380 	call	16238 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1bf8c:	0005883a 	mov	r2,zero
}
   1bf90:	e037883a 	mov	sp,fp
   1bf94:	dfc00117 	ldw	ra,4(sp)
   1bf98:	df000017 	ldw	fp,0(sp)
   1bf9c:	dec00204 	addi	sp,sp,8
   1bfa0:	f800283a 	ret

0001bfa4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1bfa4:	defff504 	addi	sp,sp,-44
   1bfa8:	df000a15 	stw	fp,40(sp)
   1bfac:	df000a04 	addi	fp,sp,40
   1bfb0:	2005883a 	mov	r2,r4
   1bfb4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bfb8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1bfbc:	e0bfff03 	ldbu	r2,-4(fp)
   1bfc0:	10800518 	cmpnei	r2,r2,20
   1bfc4:	1000021e 	bne	r2,zero,1bfd0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1bfc8:	00800f84 	movi	r2,62
   1bfcc:	00004706 	br	1c0ec <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1bfd0:	e0bfff03 	ldbu	r2,-4(fp)
   1bfd4:	10800530 	cmpltui	r2,r2,20
   1bfd8:	1000051e 	bne	r2,zero,1bff0 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1bfdc:	e0bfff03 	ldbu	r2,-4(fp)
   1bfe0:	10803fe0 	cmpeqi	r2,r2,255
   1bfe4:	1000021e 	bne	r2,zero,1bff0 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1bfe8:	00800a84 	movi	r2,42
   1bfec:	00003f06 	br	1c0ec <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1bff0:	e0bfff03 	ldbu	r2,-4(fp)
   1bff4:	10803fd8 	cmpnei	r2,r2,255
   1bff8:	1000131e 	bne	r2,zero,1c048 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bffc:	0005303a 	rdctl	r2,status
   1c000:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c004:	e0fff917 	ldw	r3,-28(fp)
   1c008:	00bfff84 	movi	r2,-2
   1c00c:	1884703a 	and	r2,r3,r2
   1c010:	1001703a 	wrctl	status,r2
  
  return context;
   1c014:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1c018:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1c01c:	008000f4 	movhi	r2,3
   1c020:	10a80704 	addi	r2,r2,-24548
   1c024:	10800017 	ldw	r2,0(r2)
   1c028:	10800dc3 	ldbu	r2,55(r2)
   1c02c:	e0bff705 	stb	r2,-36(fp)
   1c030:	e0bff617 	ldw	r2,-40(fp)
   1c034:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c038:	e0bffa17 	ldw	r2,-24(fp)
   1c03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1c040:	e0bff703 	ldbu	r2,-36(fp)
   1c044:	00002906 	br	1c0ec <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c048:	0005303a 	rdctl	r2,status
   1c04c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c050:	e0fffb17 	ldw	r3,-20(fp)
   1c054:	00bfff84 	movi	r2,-2
   1c058:	1884703a 	and	r2,r3,r2
   1c05c:	1001703a 	wrctl	status,r2
  
  return context;
   1c060:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1c064:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1c068:	e0ffff03 	ldbu	r3,-4(fp)
   1c06c:	00800174 	movhi	r2,5
   1c070:	10bccf04 	addi	r2,r2,-3268
   1c074:	18c7883a 	add	r3,r3,r3
   1c078:	18c7883a 	add	r3,r3,r3
   1c07c:	10c5883a 	add	r2,r2,r3
   1c080:	10800017 	ldw	r2,0(r2)
   1c084:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1c088:	e0bff817 	ldw	r2,-32(fp)
   1c08c:	1000061e 	bne	r2,zero,1c0a8 <OSTaskDelReq+0x104>
   1c090:	e0bff617 	ldw	r2,-40(fp)
   1c094:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c098:	e0bffc17 	ldw	r2,-16(fp)
   1c09c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1c0a0:	008010c4 	movi	r2,67
   1c0a4:	00001106 	br	1c0ec <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1c0a8:	e0bff817 	ldw	r2,-32(fp)
   1c0ac:	10800058 	cmpnei	r2,r2,1
   1c0b0:	1000061e 	bne	r2,zero,1c0cc <OSTaskDelReq+0x128>
   1c0b4:	e0bff617 	ldw	r2,-40(fp)
   1c0b8:	e0bffd15 	stw	r2,-12(fp)
   1c0bc:	e0bffd17 	ldw	r2,-12(fp)
   1c0c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1c0c4:	00800f44 	movi	r2,61
   1c0c8:	00000806 	br	1c0ec <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1c0cc:	e0bff817 	ldw	r2,-32(fp)
   1c0d0:	00c00fc4 	movi	r3,63
   1c0d4:	10c00dc5 	stb	r3,55(r2)
   1c0d8:	e0bff617 	ldw	r2,-40(fp)
   1c0dc:	e0bffe15 	stw	r2,-8(fp)
   1c0e0:	e0bffe17 	ldw	r2,-8(fp)
   1c0e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1c0e8:	0005883a 	mov	r2,zero
}
   1c0ec:	e037883a 	mov	sp,fp
   1c0f0:	df000017 	ldw	fp,0(sp)
   1c0f4:	dec00104 	addi	sp,sp,4
   1c0f8:	f800283a 	ret

0001c0fc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1c0fc:	defff404 	addi	sp,sp,-48
   1c100:	dfc00b15 	stw	ra,44(sp)
   1c104:	df000a15 	stw	fp,40(sp)
   1c108:	df000a04 	addi	fp,sp,40
   1c10c:	2005883a 	mov	r2,r4
   1c110:	e17ffe15 	stw	r5,-8(fp)
   1c114:	e1bfff15 	stw	r6,-4(fp)
   1c118:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1c11c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1c120:	e0bfff17 	ldw	r2,-4(fp)
   1c124:	1000021e 	bne	r2,zero,1c130 <OSTaskNameGet+0x34>
        return (0);
   1c128:	0005883a 	mov	r2,zero
   1c12c:	00005806 	br	1c290 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1c130:	e0bffd03 	ldbu	r2,-12(fp)
   1c134:	10800570 	cmpltui	r2,r2,21
   1c138:	1000081e 	bne	r2,zero,1c15c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1c13c:	e0bffd03 	ldbu	r2,-12(fp)
   1c140:	10803fe0 	cmpeqi	r2,r2,255
   1c144:	1000051e 	bne	r2,zero,1c15c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1c148:	e0bfff17 	ldw	r2,-4(fp)
   1c14c:	00c00a84 	movi	r3,42
   1c150:	10c00005 	stb	r3,0(r2)
            return (0);
   1c154:	0005883a 	mov	r2,zero
   1c158:	00004d06 	br	1c290 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1c15c:	e0bffe17 	ldw	r2,-8(fp)
   1c160:	1000051e 	bne	r2,zero,1c178 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1c164:	e0bfff17 	ldw	r2,-4(fp)
   1c168:	00c00304 	movi	r3,12
   1c16c:	10c00005 	stb	r3,0(r2)
        return (0);
   1c170:	0005883a 	mov	r2,zero
   1c174:	00004606 	br	1c290 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1c178:	008000f4 	movhi	r2,3
   1c17c:	10a80604 	addi	r2,r2,-24552
   1c180:	10800003 	ldbu	r2,0(r2)
   1c184:	10803fcc 	andi	r2,r2,255
   1c188:	10000526 	beq	r2,zero,1c1a0 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1c18c:	e0bfff17 	ldw	r2,-4(fp)
   1c190:	00c00444 	movi	r3,17
   1c194:	10c00005 	stb	r3,0(r2)
        return (0);
   1c198:	0005883a 	mov	r2,zero
   1c19c:	00003c06 	br	1c290 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c1a0:	0005303a 	rdctl	r2,status
   1c1a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c1a8:	e0fff917 	ldw	r3,-28(fp)
   1c1ac:	00bfff84 	movi	r2,-2
   1c1b0:	1884703a 	and	r2,r3,r2
   1c1b4:	1001703a 	wrctl	status,r2
  
  return context;
   1c1b8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1c1bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1c1c0:	e0bffd03 	ldbu	r2,-12(fp)
   1c1c4:	10803fd8 	cmpnei	r2,r2,255
   1c1c8:	1000051e 	bne	r2,zero,1c1e0 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1c1cc:	008000f4 	movhi	r2,3
   1c1d0:	10a80704 	addi	r2,r2,-24548
   1c1d4:	10800017 	ldw	r2,0(r2)
   1c1d8:	10800c83 	ldbu	r2,50(r2)
   1c1dc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c1e0:	e0fffd03 	ldbu	r3,-12(fp)
   1c1e4:	00800174 	movhi	r2,5
   1c1e8:	10bccf04 	addi	r2,r2,-3268
   1c1ec:	18c7883a 	add	r3,r3,r3
   1c1f0:	18c7883a 	add	r3,r3,r3
   1c1f4:	10c5883a 	add	r2,r2,r3
   1c1f8:	10800017 	ldw	r2,0(r2)
   1c1fc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1c200:	e0bff717 	ldw	r2,-36(fp)
   1c204:	1000091e 	bne	r2,zero,1c22c <OSTaskNameGet+0x130>
   1c208:	e0bff617 	ldw	r2,-40(fp)
   1c20c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c210:	e0bffa17 	ldw	r2,-24(fp)
   1c214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c218:	e0bfff17 	ldw	r2,-4(fp)
   1c21c:	00c010c4 	movi	r3,67
   1c220:	10c00005 	stb	r3,0(r2)
        return (0);
   1c224:	0005883a 	mov	r2,zero
   1c228:	00001906 	br	1c290 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1c22c:	e0bff717 	ldw	r2,-36(fp)
   1c230:	10800058 	cmpnei	r2,r2,1
   1c234:	1000091e 	bne	r2,zero,1c25c <OSTaskNameGet+0x160>
   1c238:	e0bff617 	ldw	r2,-40(fp)
   1c23c:	e0bffb15 	stw	r2,-20(fp)
   1c240:	e0bffb17 	ldw	r2,-20(fp)
   1c244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c248:	e0bfff17 	ldw	r2,-4(fp)
   1c24c:	00c010c4 	movi	r3,67
   1c250:	10c00005 	stb	r3,0(r2)
        return (0);
   1c254:	0005883a 	mov	r2,zero
   1c258:	00000d06 	br	1c290 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1c25c:	e0bff717 	ldw	r2,-36(fp)
   1c260:	10801304 	addi	r2,r2,76
   1c264:	e13ffe17 	ldw	r4,-8(fp)
   1c268:	100b883a 	mov	r5,r2
   1c26c:	00163740 	call	16374 <OS_StrCopy>
   1c270:	e0bff805 	stb	r2,-32(fp)
   1c274:	e0bff617 	ldw	r2,-40(fp)
   1c278:	e0bffc15 	stw	r2,-16(fp)
   1c27c:	e0bffc17 	ldw	r2,-16(fp)
   1c280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c284:	e0bfff17 	ldw	r2,-4(fp)
   1c288:	10000005 	stb	zero,0(r2)
    return (len);
   1c28c:	e0bff803 	ldbu	r2,-32(fp)
}
   1c290:	e037883a 	mov	sp,fp
   1c294:	dfc00117 	ldw	ra,4(sp)
   1c298:	df000017 	ldw	fp,0(sp)
   1c29c:	dec00204 	addi	sp,sp,8
   1c2a0:	f800283a 	ret

0001c2a4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1c2a4:	defff304 	addi	sp,sp,-52
   1c2a8:	dfc00c15 	stw	ra,48(sp)
   1c2ac:	df000b15 	stw	fp,44(sp)
   1c2b0:	df000b04 	addi	fp,sp,44
   1c2b4:	2005883a 	mov	r2,r4
   1c2b8:	e17ffe15 	stw	r5,-8(fp)
   1c2bc:	e1bfff15 	stw	r6,-4(fp)
   1c2c0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1c2c4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1c2c8:	e0bfff17 	ldw	r2,-4(fp)
   1c2cc:	1000011e 	bne	r2,zero,1c2d4 <OSTaskNameSet+0x30>
        return;
   1c2d0:	00005f06 	br	1c450 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1c2d4:	e0bffd03 	ldbu	r2,-12(fp)
   1c2d8:	10800570 	cmpltui	r2,r2,21
   1c2dc:	1000071e 	bne	r2,zero,1c2fc <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1c2e0:	e0bffd03 	ldbu	r2,-12(fp)
   1c2e4:	10803fe0 	cmpeqi	r2,r2,255
   1c2e8:	1000041e 	bne	r2,zero,1c2fc <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1c2ec:	e0bfff17 	ldw	r2,-4(fp)
   1c2f0:	00c00a84 	movi	r3,42
   1c2f4:	10c00005 	stb	r3,0(r2)
            return;
   1c2f8:	00005506 	br	1c450 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1c2fc:	e0bffe17 	ldw	r2,-8(fp)
   1c300:	1000041e 	bne	r2,zero,1c314 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1c304:	e0bfff17 	ldw	r2,-4(fp)
   1c308:	00c00304 	movi	r3,12
   1c30c:	10c00005 	stb	r3,0(r2)
        return;
   1c310:	00004f06 	br	1c450 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1c314:	008000f4 	movhi	r2,3
   1c318:	10a80604 	addi	r2,r2,-24552
   1c31c:	10800003 	ldbu	r2,0(r2)
   1c320:	10803fcc 	andi	r2,r2,255
   1c324:	10000426 	beq	r2,zero,1c338 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1c328:	e0bfff17 	ldw	r2,-4(fp)
   1c32c:	00c00484 	movi	r3,18
   1c330:	10c00005 	stb	r3,0(r2)
        return;
   1c334:	00004606 	br	1c450 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c338:	0005303a 	rdctl	r2,status
   1c33c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c340:	e0fff817 	ldw	r3,-32(fp)
   1c344:	00bfff84 	movi	r2,-2
   1c348:	1884703a 	and	r2,r3,r2
   1c34c:	1001703a 	wrctl	status,r2
  
  return context;
   1c350:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1c354:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1c358:	e0bffd03 	ldbu	r2,-12(fp)
   1c35c:	10803fd8 	cmpnei	r2,r2,255
   1c360:	1000051e 	bne	r2,zero,1c378 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1c364:	008000f4 	movhi	r2,3
   1c368:	10a80704 	addi	r2,r2,-24548
   1c36c:	10800017 	ldw	r2,0(r2)
   1c370:	10800c83 	ldbu	r2,50(r2)
   1c374:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c378:	e0fffd03 	ldbu	r3,-12(fp)
   1c37c:	00800174 	movhi	r2,5
   1c380:	10bccf04 	addi	r2,r2,-3268
   1c384:	18c7883a 	add	r3,r3,r3
   1c388:	18c7883a 	add	r3,r3,r3
   1c38c:	10c5883a 	add	r2,r2,r3
   1c390:	10800017 	ldw	r2,0(r2)
   1c394:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1c398:	e0bff617 	ldw	r2,-40(fp)
   1c39c:	1000081e 	bne	r2,zero,1c3c0 <OSTaskNameSet+0x11c>
   1c3a0:	e0bff517 	ldw	r2,-44(fp)
   1c3a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c3a8:	e0bff917 	ldw	r2,-28(fp)
   1c3ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c3b0:	e0bfff17 	ldw	r2,-4(fp)
   1c3b4:	00c010c4 	movi	r3,67
   1c3b8:	10c00005 	stb	r3,0(r2)
        return;
   1c3bc:	00002406 	br	1c450 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1c3c0:	e0bff617 	ldw	r2,-40(fp)
   1c3c4:	10800058 	cmpnei	r2,r2,1
   1c3c8:	1000081e 	bne	r2,zero,1c3ec <OSTaskNameSet+0x148>
   1c3cc:	e0bff517 	ldw	r2,-44(fp)
   1c3d0:	e0bffa15 	stw	r2,-24(fp)
   1c3d4:	e0bffa17 	ldw	r2,-24(fp)
   1c3d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1c3dc:	e0bfff17 	ldw	r2,-4(fp)
   1c3e0:	00c010c4 	movi	r3,67
   1c3e4:	10c00005 	stb	r3,0(r2)
        return;
   1c3e8:	00001906 	br	1c450 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1c3ec:	e13ffe17 	ldw	r4,-8(fp)
   1c3f0:	00163e80 	call	163e8 <OS_StrLen>
   1c3f4:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1c3f8:	e0bff703 	ldbu	r2,-36(fp)
   1c3fc:	10800830 	cmpltui	r2,r2,32
   1c400:	1000081e 	bne	r2,zero,1c424 <OSTaskNameSet+0x180>
   1c404:	e0bff517 	ldw	r2,-44(fp)
   1c408:	e0bffb15 	stw	r2,-20(fp)
   1c40c:	e0bffb17 	ldw	r2,-20(fp)
   1c410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1c414:	e0bfff17 	ldw	r2,-4(fp)
   1c418:	00c01044 	movi	r3,65
   1c41c:	10c00005 	stb	r3,0(r2)
        return;
   1c420:	00000b06 	br	1c450 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1c424:	e0bff617 	ldw	r2,-40(fp)
   1c428:	10801304 	addi	r2,r2,76
   1c42c:	1009883a 	mov	r4,r2
   1c430:	e17ffe17 	ldw	r5,-8(fp)
   1c434:	00163740 	call	16374 <OS_StrCopy>
   1c438:	e0bff517 	ldw	r2,-44(fp)
   1c43c:	e0bffc15 	stw	r2,-16(fp)
   1c440:	e0bffc17 	ldw	r2,-16(fp)
   1c444:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c448:	e0bfff17 	ldw	r2,-4(fp)
   1c44c:	10000005 	stb	zero,0(r2)
}
   1c450:	e037883a 	mov	sp,fp
   1c454:	dfc00117 	ldw	ra,4(sp)
   1c458:	df000017 	ldw	fp,0(sp)
   1c45c:	dec00204 	addi	sp,sp,8
   1c460:	f800283a 	ret

0001c464 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1c464:	defff404 	addi	sp,sp,-48
   1c468:	dfc00b15 	stw	ra,44(sp)
   1c46c:	df000a15 	stw	fp,40(sp)
   1c470:	df000a04 	addi	fp,sp,40
   1c474:	2005883a 	mov	r2,r4
   1c478:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1c47c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1c480:	e0bfff03 	ldbu	r2,-4(fp)
   1c484:	10800530 	cmpltui	r2,r2,20
   1c488:	1000021e 	bne	r2,zero,1c494 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1c48c:	00800a84 	movi	r2,42
   1c490:	00006d06 	br	1c648 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c494:	0005303a 	rdctl	r2,status
   1c498:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c49c:	e0fff817 	ldw	r3,-32(fp)
   1c4a0:	00bfff84 	movi	r2,-2
   1c4a4:	1884703a 	and	r2,r3,r2
   1c4a8:	1001703a 	wrctl	status,r2
  
  return context;
   1c4ac:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c4b0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1c4b4:	e0ffff03 	ldbu	r3,-4(fp)
   1c4b8:	00800174 	movhi	r2,5
   1c4bc:	10bccf04 	addi	r2,r2,-3268
   1c4c0:	18c7883a 	add	r3,r3,r3
   1c4c4:	18c7883a 	add	r3,r3,r3
   1c4c8:	10c5883a 	add	r2,r2,r3
   1c4cc:	10800017 	ldw	r2,0(r2)
   1c4d0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1c4d4:	e0bff717 	ldw	r2,-36(fp)
   1c4d8:	1000061e 	bne	r2,zero,1c4f4 <OSTaskResume+0x90>
   1c4dc:	e0bff617 	ldw	r2,-40(fp)
   1c4e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c4e4:	e0bff917 	ldw	r2,-28(fp)
   1c4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1c4ec:	00801184 	movi	r2,70
   1c4f0:	00005506 	br	1c648 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1c4f4:	e0bff717 	ldw	r2,-36(fp)
   1c4f8:	10800058 	cmpnei	r2,r2,1
   1c4fc:	1000061e 	bne	r2,zero,1c518 <OSTaskResume+0xb4>
   1c500:	e0bff617 	ldw	r2,-40(fp)
   1c504:	e0bffa15 	stw	r2,-24(fp)
   1c508:	e0bffa17 	ldw	r2,-24(fp)
   1c50c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c510:	008010c4 	movi	r2,67
   1c514:	00004c06 	br	1c648 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1c518:	e0bff717 	ldw	r2,-36(fp)
   1c51c:	10800c03 	ldbu	r2,48(r2)
   1c520:	10803fcc 	andi	r2,r2,255
   1c524:	1080020c 	andi	r2,r2,8
   1c528:	10004226 	beq	r2,zero,1c634 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1c52c:	e0bff717 	ldw	r2,-36(fp)
   1c530:	10c00c03 	ldbu	r3,48(r2)
   1c534:	00bffdc4 	movi	r2,-9
   1c538:	1884703a 	and	r2,r3,r2
   1c53c:	1007883a 	mov	r3,r2
   1c540:	e0bff717 	ldw	r2,-36(fp)
   1c544:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1c548:	e0bff717 	ldw	r2,-36(fp)
   1c54c:	10800c03 	ldbu	r2,48(r2)
   1c550:	10803fcc 	andi	r2,r2,255
   1c554:	1000311e 	bne	r2,zero,1c61c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1c558:	e0bff717 	ldw	r2,-36(fp)
   1c55c:	10800b8b 	ldhu	r2,46(r2)
   1c560:	10bfffcc 	andi	r2,r2,65535
   1c564:	1000281e 	bne	r2,zero,1c608 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1c568:	e0bff717 	ldw	r2,-36(fp)
   1c56c:	10c00d83 	ldbu	r3,54(r2)
   1c570:	008000f4 	movhi	r2,3
   1c574:	10a80404 	addi	r2,r2,-24560
   1c578:	10800003 	ldbu	r2,0(r2)
   1c57c:	1884b03a 	or	r2,r3,r2
   1c580:	1007883a 	mov	r3,r2
   1c584:	008000f4 	movhi	r2,3
   1c588:	10a80404 	addi	r2,r2,-24560
   1c58c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1c590:	e0bff717 	ldw	r2,-36(fp)
   1c594:	10800d03 	ldbu	r2,52(r2)
   1c598:	10c03fcc 	andi	r3,r2,255
   1c59c:	e0bff717 	ldw	r2,-36(fp)
   1c5a0:	10800d03 	ldbu	r2,52(r2)
   1c5a4:	11003fcc 	andi	r4,r2,255
   1c5a8:	008000f4 	movhi	r2,3
   1c5ac:	10a80444 	addi	r2,r2,-24559
   1c5b0:	1105883a 	add	r2,r2,r4
   1c5b4:	11000003 	ldbu	r4,0(r2)
   1c5b8:	e0bff717 	ldw	r2,-36(fp)
   1c5bc:	10800d43 	ldbu	r2,53(r2)
   1c5c0:	2084b03a 	or	r2,r4,r2
   1c5c4:	1009883a 	mov	r4,r2
   1c5c8:	008000f4 	movhi	r2,3
   1c5cc:	10a80444 	addi	r2,r2,-24559
   1c5d0:	10c5883a 	add	r2,r2,r3
   1c5d4:	11000005 	stb	r4,0(r2)
   1c5d8:	e0bff617 	ldw	r2,-40(fp)
   1c5dc:	e0bffb15 	stw	r2,-20(fp)
   1c5e0:	e0bffb17 	ldw	r2,-20(fp)
   1c5e4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1c5e8:	008000f4 	movhi	r2,3
   1c5ec:	10a7f844 	addi	r2,r2,-24607
   1c5f0:	10800003 	ldbu	r2,0(r2)
   1c5f4:	10803fcc 	andi	r2,r2,255
   1c5f8:	10800058 	cmpnei	r2,r2,1
   1c5fc:	10000b1e 	bne	r2,zero,1c62c <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1c600:	00162380 	call	16238 <OS_Sched>
   1c604:	00000906 	br	1c62c <OSTaskResume+0x1c8>
   1c608:	e0bff617 	ldw	r2,-40(fp)
   1c60c:	e0bffc15 	stw	r2,-16(fp)
   1c610:	e0bffc17 	ldw	r2,-16(fp)
   1c614:	1001703a 	wrctl	status,r2
   1c618:	00000406 	br	1c62c <OSTaskResume+0x1c8>
   1c61c:	e0bff617 	ldw	r2,-40(fp)
   1c620:	e0bffd15 	stw	r2,-12(fp)
   1c624:	e0bffd17 	ldw	r2,-12(fp)
   1c628:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1c62c:	0005883a 	mov	r2,zero
   1c630:	00000506 	br	1c648 <OSTaskResume+0x1e4>
   1c634:	e0bff617 	ldw	r2,-40(fp)
   1c638:	e0bffe15 	stw	r2,-8(fp)
   1c63c:	e0bffe17 	ldw	r2,-8(fp)
   1c640:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1c644:	00801104 	movi	r2,68
}
   1c648:	e037883a 	mov	sp,fp
   1c64c:	dfc00117 	ldw	ra,4(sp)
   1c650:	df000017 	ldw	fp,0(sp)
   1c654:	dec00204 	addi	sp,sp,8
   1c658:	f800283a 	ret

0001c65c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1c65c:	defff304 	addi	sp,sp,-52
   1c660:	df000c15 	stw	fp,48(sp)
   1c664:	df000c04 	addi	fp,sp,48
   1c668:	2005883a 	mov	r2,r4
   1c66c:	e17fff15 	stw	r5,-4(fp)
   1c670:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c674:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1c678:	e0bffe03 	ldbu	r2,-8(fp)
   1c67c:	10800570 	cmpltui	r2,r2,21
   1c680:	1000051e 	bne	r2,zero,1c698 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1c684:	e0bffe03 	ldbu	r2,-8(fp)
   1c688:	10803fe0 	cmpeqi	r2,r2,255
   1c68c:	1000021e 	bne	r2,zero,1c698 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1c690:	00800a84 	movi	r2,42
   1c694:	00005f06 	br	1c814 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1c698:	e0bfff17 	ldw	r2,-4(fp)
   1c69c:	1000021e 	bne	r2,zero,1c6a8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1c6a0:	00800244 	movi	r2,9
   1c6a4:	00005b06 	br	1c814 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1c6a8:	e0bfff17 	ldw	r2,-4(fp)
   1c6ac:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1c6b0:	e0bfff17 	ldw	r2,-4(fp)
   1c6b4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c6b8:	0005303a 	rdctl	r2,status
   1c6bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c6c0:	e0fff917 	ldw	r3,-28(fp)
   1c6c4:	00bfff84 	movi	r2,-2
   1c6c8:	1884703a 	and	r2,r3,r2
   1c6cc:	1001703a 	wrctl	status,r2
  
  return context;
   1c6d0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1c6d4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1c6d8:	e0bffe03 	ldbu	r2,-8(fp)
   1c6dc:	10803fd8 	cmpnei	r2,r2,255
   1c6e0:	1000051e 	bne	r2,zero,1c6f8 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c6e4:	008000f4 	movhi	r2,3
   1c6e8:	10a80704 	addi	r2,r2,-24548
   1c6ec:	10800017 	ldw	r2,0(r2)
   1c6f0:	10800c83 	ldbu	r2,50(r2)
   1c6f4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c6f8:	e0fffe03 	ldbu	r3,-8(fp)
   1c6fc:	00800174 	movhi	r2,5
   1c700:	10bccf04 	addi	r2,r2,-3268
   1c704:	18c7883a 	add	r3,r3,r3
   1c708:	18c7883a 	add	r3,r3,r3
   1c70c:	10c5883a 	add	r2,r2,r3
   1c710:	10800017 	ldw	r2,0(r2)
   1c714:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1c718:	e0bff717 	ldw	r2,-36(fp)
   1c71c:	1000061e 	bne	r2,zero,1c738 <OSTaskStkChk+0xdc>
   1c720:	e0bff617 	ldw	r2,-40(fp)
   1c724:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c728:	e0bffa17 	ldw	r2,-24(fp)
   1c72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c730:	008010c4 	movi	r2,67
   1c734:	00003706 	br	1c814 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1c738:	e0bff717 	ldw	r2,-36(fp)
   1c73c:	10800058 	cmpnei	r2,r2,1
   1c740:	1000061e 	bne	r2,zero,1c75c <OSTaskStkChk+0x100>
   1c744:	e0bff617 	ldw	r2,-40(fp)
   1c748:	e0bffb15 	stw	r2,-20(fp)
   1c74c:	e0bffb17 	ldw	r2,-20(fp)
   1c750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c754:	008010c4 	movi	r2,67
   1c758:	00002e06 	br	1c814 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1c75c:	e0bff717 	ldw	r2,-36(fp)
   1c760:	1080040b 	ldhu	r2,16(r2)
   1c764:	10bfffcc 	andi	r2,r2,65535
   1c768:	1080004c 	andi	r2,r2,1
   1c76c:	1000061e 	bne	r2,zero,1c788 <OSTaskStkChk+0x12c>
   1c770:	e0bff617 	ldw	r2,-40(fp)
   1c774:	e0bffc15 	stw	r2,-16(fp)
   1c778:	e0bffc17 	ldw	r2,-16(fp)
   1c77c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1c780:	00801144 	movi	r2,69
   1c784:	00002306 	br	1c814 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1c788:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1c78c:	e0bff717 	ldw	r2,-36(fp)
   1c790:	10800317 	ldw	r2,12(r2)
   1c794:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1c798:	e0bff717 	ldw	r2,-36(fp)
   1c79c:	10800217 	ldw	r2,8(r2)
   1c7a0:	e0bff415 	stw	r2,-48(fp)
   1c7a4:	e0bff617 	ldw	r2,-40(fp)
   1c7a8:	e0bffd15 	stw	r2,-12(fp)
   1c7ac:	e0bffd17 	ldw	r2,-12(fp)
   1c7b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c7b4:	00000306 	br	1c7c4 <OSTaskStkChk+0x168>
        nfree++;
   1c7b8:	e0bff517 	ldw	r2,-44(fp)
   1c7bc:	10800044 	addi	r2,r2,1
   1c7c0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1c7c4:	e0bff417 	ldw	r2,-48(fp)
   1c7c8:	10c00104 	addi	r3,r2,4
   1c7cc:	e0fff415 	stw	r3,-48(fp)
   1c7d0:	10800017 	ldw	r2,0(r2)
   1c7d4:	103ff826 	beq	r2,zero,1c7b8 <__alt_mem_Flash_flash_data+0xf401c7b8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1c7d8:	e0bff517 	ldw	r2,-44(fp)
   1c7dc:	1085883a 	add	r2,r2,r2
   1c7e0:	1085883a 	add	r2,r2,r2
   1c7e4:	1007883a 	mov	r3,r2
   1c7e8:	e0bfff17 	ldw	r2,-4(fp)
   1c7ec:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1c7f0:	e0fff817 	ldw	r3,-32(fp)
   1c7f4:	e0bff517 	ldw	r2,-44(fp)
   1c7f8:	1885c83a 	sub	r2,r3,r2
   1c7fc:	1085883a 	add	r2,r2,r2
   1c800:	1085883a 	add	r2,r2,r2
   1c804:	1007883a 	mov	r3,r2
   1c808:	e0bfff17 	ldw	r2,-4(fp)
   1c80c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1c810:	0005883a 	mov	r2,zero
}
   1c814:	e037883a 	mov	sp,fp
   1c818:	df000017 	ldw	fp,0(sp)
   1c81c:	dec00104 	addi	sp,sp,4
   1c820:	f800283a 	ret

0001c824 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1c824:	defff504 	addi	sp,sp,-44
   1c828:	dfc00a15 	stw	ra,40(sp)
   1c82c:	df000915 	stw	fp,36(sp)
   1c830:	df000904 	addi	fp,sp,36
   1c834:	2005883a 	mov	r2,r4
   1c838:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c83c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1c840:	e0bfff03 	ldbu	r2,-4(fp)
   1c844:	10800518 	cmpnei	r2,r2,20
   1c848:	1000021e 	bne	r2,zero,1c854 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1c84c:	008011c4 	movi	r2,71
   1c850:	00007406 	br	1ca24 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1c854:	e0bfff03 	ldbu	r2,-4(fp)
   1c858:	10800530 	cmpltui	r2,r2,20
   1c85c:	1000051e 	bne	r2,zero,1c874 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1c860:	e0bfff03 	ldbu	r2,-4(fp)
   1c864:	10803fe0 	cmpeqi	r2,r2,255
   1c868:	1000021e 	bne	r2,zero,1c874 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1c86c:	00800a84 	movi	r2,42
   1c870:	00006c06 	br	1ca24 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c874:	0005303a 	rdctl	r2,status
   1c878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c87c:	e0fffb17 	ldw	r3,-20(fp)
   1c880:	00bfff84 	movi	r2,-2
   1c884:	1884703a 	and	r2,r3,r2
   1c888:	1001703a 	wrctl	status,r2
  
  return context;
   1c88c:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1c890:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1c894:	e0bfff03 	ldbu	r2,-4(fp)
   1c898:	10803fd8 	cmpnei	r2,r2,255
   1c89c:	1000081e 	bne	r2,zero,1c8c0 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1c8a0:	008000f4 	movhi	r2,3
   1c8a4:	10a80704 	addi	r2,r2,-24548
   1c8a8:	10800017 	ldw	r2,0(r2)
   1c8ac:	10800c83 	ldbu	r2,50(r2)
   1c8b0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1c8b4:	00800044 	movi	r2,1
   1c8b8:	e0bff705 	stb	r2,-36(fp)
   1c8bc:	00000b06 	br	1c8ec <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1c8c0:	008000f4 	movhi	r2,3
   1c8c4:	10a80704 	addi	r2,r2,-24548
   1c8c8:	10800017 	ldw	r2,0(r2)
   1c8cc:	10800c83 	ldbu	r2,50(r2)
   1c8d0:	10c03fcc 	andi	r3,r2,255
   1c8d4:	e0bfff03 	ldbu	r2,-4(fp)
   1c8d8:	1880031e 	bne	r3,r2,1c8e8 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1c8dc:	00800044 	movi	r2,1
   1c8e0:	e0bff705 	stb	r2,-36(fp)
   1c8e4:	00000106 	br	1c8ec <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1c8e8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1c8ec:	e0ffff03 	ldbu	r3,-4(fp)
   1c8f0:	00800174 	movhi	r2,5
   1c8f4:	10bccf04 	addi	r2,r2,-3268
   1c8f8:	18c7883a 	add	r3,r3,r3
   1c8fc:	18c7883a 	add	r3,r3,r3
   1c900:	10c5883a 	add	r2,r2,r3
   1c904:	10800017 	ldw	r2,0(r2)
   1c908:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1c90c:	e0bff917 	ldw	r2,-28(fp)
   1c910:	1000061e 	bne	r2,zero,1c92c <OSTaskSuspend+0x108>
   1c914:	e0bff817 	ldw	r2,-32(fp)
   1c918:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c91c:	e0bffc17 	ldw	r2,-16(fp)
   1c920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1c924:	00801204 	movi	r2,72
   1c928:	00003e06 	br	1ca24 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1c92c:	e0bff917 	ldw	r2,-28(fp)
   1c930:	10800058 	cmpnei	r2,r2,1
   1c934:	1000061e 	bne	r2,zero,1c950 <OSTaskSuspend+0x12c>
   1c938:	e0bff817 	ldw	r2,-32(fp)
   1c93c:	e0bffd15 	stw	r2,-12(fp)
   1c940:	e0bffd17 	ldw	r2,-12(fp)
   1c944:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1c948:	008010c4 	movi	r2,67
   1c94c:	00003506 	br	1ca24 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1c950:	e0bff917 	ldw	r2,-28(fp)
   1c954:	10800d03 	ldbu	r2,52(r2)
   1c958:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1c95c:	e0fffa03 	ldbu	r3,-24(fp)
   1c960:	e13ffa03 	ldbu	r4,-24(fp)
   1c964:	008000f4 	movhi	r2,3
   1c968:	10a80444 	addi	r2,r2,-24559
   1c96c:	1105883a 	add	r2,r2,r4
   1c970:	10800003 	ldbu	r2,0(r2)
   1c974:	1009883a 	mov	r4,r2
   1c978:	e0bff917 	ldw	r2,-28(fp)
   1c97c:	10800d43 	ldbu	r2,53(r2)
   1c980:	0084303a 	nor	r2,zero,r2
   1c984:	2084703a 	and	r2,r4,r2
   1c988:	1009883a 	mov	r4,r2
   1c98c:	008000f4 	movhi	r2,3
   1c990:	10a80444 	addi	r2,r2,-24559
   1c994:	10c5883a 	add	r2,r2,r3
   1c998:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c99c:	e0fffa03 	ldbu	r3,-24(fp)
   1c9a0:	008000f4 	movhi	r2,3
   1c9a4:	10a80444 	addi	r2,r2,-24559
   1c9a8:	10c5883a 	add	r2,r2,r3
   1c9ac:	10800003 	ldbu	r2,0(r2)
   1c9b0:	10803fcc 	andi	r2,r2,255
   1c9b4:	10000c1e 	bne	r2,zero,1c9e8 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1c9b8:	e0bff917 	ldw	r2,-28(fp)
   1c9bc:	10800d83 	ldbu	r2,54(r2)
   1c9c0:	0084303a 	nor	r2,zero,r2
   1c9c4:	1007883a 	mov	r3,r2
   1c9c8:	008000f4 	movhi	r2,3
   1c9cc:	10a80404 	addi	r2,r2,-24560
   1c9d0:	10800003 	ldbu	r2,0(r2)
   1c9d4:	1884703a 	and	r2,r3,r2
   1c9d8:	1007883a 	mov	r3,r2
   1c9dc:	008000f4 	movhi	r2,3
   1c9e0:	10a80404 	addi	r2,r2,-24560
   1c9e4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1c9e8:	e0bff917 	ldw	r2,-28(fp)
   1c9ec:	10800c03 	ldbu	r2,48(r2)
   1c9f0:	10800214 	ori	r2,r2,8
   1c9f4:	1007883a 	mov	r3,r2
   1c9f8:	e0bff917 	ldw	r2,-28(fp)
   1c9fc:	10c00c05 	stb	r3,48(r2)
   1ca00:	e0bff817 	ldw	r2,-32(fp)
   1ca04:	e0bffe15 	stw	r2,-8(fp)
   1ca08:	e0bffe17 	ldw	r2,-8(fp)
   1ca0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1ca10:	e0bff703 	ldbu	r2,-36(fp)
   1ca14:	10800058 	cmpnei	r2,r2,1
   1ca18:	1000011e 	bne	r2,zero,1ca20 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1ca1c:	00162380 	call	16238 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ca20:	0005883a 	mov	r2,zero
}
   1ca24:	e037883a 	mov	sp,fp
   1ca28:	dfc00117 	ldw	ra,4(sp)
   1ca2c:	df000017 	ldw	fp,0(sp)
   1ca30:	dec00204 	addi	sp,sp,8
   1ca34:	f800283a 	ret

0001ca38 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1ca38:	defff604 	addi	sp,sp,-40
   1ca3c:	dfc00915 	stw	ra,36(sp)
   1ca40:	df000815 	stw	fp,32(sp)
   1ca44:	df000804 	addi	fp,sp,32
   1ca48:	2005883a 	mov	r2,r4
   1ca4c:	e17fff15 	stw	r5,-4(fp)
   1ca50:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ca54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1ca58:	e0bffe03 	ldbu	r2,-8(fp)
   1ca5c:	10800570 	cmpltui	r2,r2,21
   1ca60:	1000051e 	bne	r2,zero,1ca78 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1ca64:	e0bffe03 	ldbu	r2,-8(fp)
   1ca68:	10803fe0 	cmpeqi	r2,r2,255
   1ca6c:	1000021e 	bne	r2,zero,1ca78 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1ca70:	00800a84 	movi	r2,42
   1ca74:	00003606 	br	1cb50 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1ca78:	e0bfff17 	ldw	r2,-4(fp)
   1ca7c:	1000021e 	bne	r2,zero,1ca88 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1ca80:	00800244 	movi	r2,9
   1ca84:	00003206 	br	1cb50 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ca88:	0005303a 	rdctl	r2,status
   1ca8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ca90:	e0fffa17 	ldw	r3,-24(fp)
   1ca94:	00bfff84 	movi	r2,-2
   1ca98:	1884703a 	and	r2,r3,r2
   1ca9c:	1001703a 	wrctl	status,r2
  
  return context;
   1caa0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1caa4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1caa8:	e0bffe03 	ldbu	r2,-8(fp)
   1caac:	10803fd8 	cmpnei	r2,r2,255
   1cab0:	1000051e 	bne	r2,zero,1cac8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1cab4:	008000f4 	movhi	r2,3
   1cab8:	10a80704 	addi	r2,r2,-24548
   1cabc:	10800017 	ldw	r2,0(r2)
   1cac0:	10800c83 	ldbu	r2,50(r2)
   1cac4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1cac8:	e0fffe03 	ldbu	r3,-8(fp)
   1cacc:	00800174 	movhi	r2,5
   1cad0:	10bccf04 	addi	r2,r2,-3268
   1cad4:	18c7883a 	add	r3,r3,r3
   1cad8:	18c7883a 	add	r3,r3,r3
   1cadc:	10c5883a 	add	r2,r2,r3
   1cae0:	10800017 	ldw	r2,0(r2)
   1cae4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1cae8:	e0bff917 	ldw	r2,-28(fp)
   1caec:	1000061e 	bne	r2,zero,1cb08 <OSTaskQuery+0xd0>
   1caf0:	e0bff817 	ldw	r2,-32(fp)
   1caf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1caf8:	e0bffb17 	ldw	r2,-20(fp)
   1cafc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1cb00:	00800a44 	movi	r2,41
   1cb04:	00001206 	br	1cb50 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1cb08:	e0bff917 	ldw	r2,-28(fp)
   1cb0c:	10800058 	cmpnei	r2,r2,1
   1cb10:	1000061e 	bne	r2,zero,1cb2c <OSTaskQuery+0xf4>
   1cb14:	e0bff817 	ldw	r2,-32(fp)
   1cb18:	e0bffc15 	stw	r2,-16(fp)
   1cb1c:	e0bffc17 	ldw	r2,-16(fp)
   1cb20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1cb24:	008010c4 	movi	r2,67
   1cb28:	00000906 	br	1cb50 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1cb2c:	e13fff17 	ldw	r4,-4(fp)
   1cb30:	e17ff917 	ldw	r5,-28(fp)
   1cb34:	01801b04 	movi	r6,108
   1cb38:	00161d40 	call	161d4 <OS_MemCopy>
   1cb3c:	e0bff817 	ldw	r2,-32(fp)
   1cb40:	e0bffd15 	stw	r2,-12(fp)
   1cb44:	e0bffd17 	ldw	r2,-12(fp)
   1cb48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1cb4c:	0005883a 	mov	r2,zero
}
   1cb50:	e037883a 	mov	sp,fp
   1cb54:	dfc00117 	ldw	ra,4(sp)
   1cb58:	df000017 	ldw	fp,0(sp)
   1cb5c:	dec00204 	addi	sp,sp,8
   1cb60:	f800283a 	ret

0001cb64 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1cb64:	defffc04 	addi	sp,sp,-16
   1cb68:	df000315 	stw	fp,12(sp)
   1cb6c:	df000304 	addi	fp,sp,12
   1cb70:	e13ffd15 	stw	r4,-12(fp)
   1cb74:	e17ffe15 	stw	r5,-8(fp)
   1cb78:	3005883a 	mov	r2,r6
   1cb7c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1cb80:	e0bfff0b 	ldhu	r2,-4(fp)
   1cb84:	1080004c 	andi	r2,r2,1
   1cb88:	10000d26 	beq	r2,zero,1cbc0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1cb8c:	e0bfff0b 	ldhu	r2,-4(fp)
   1cb90:	1080008c 	andi	r2,r2,2
   1cb94:	10000a26 	beq	r2,zero,1cbc0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1cb98:	00000706 	br	1cbb8 <OS_TaskStkClr+0x54>
                size--;
   1cb9c:	e0bffe17 	ldw	r2,-8(fp)
   1cba0:	10bfffc4 	addi	r2,r2,-1
   1cba4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1cba8:	e0bffd17 	ldw	r2,-12(fp)
   1cbac:	10c00104 	addi	r3,r2,4
   1cbb0:	e0fffd15 	stw	r3,-12(fp)
   1cbb4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1cbb8:	e0bffe17 	ldw	r2,-8(fp)
   1cbbc:	103ff71e 	bne	r2,zero,1cb9c <__alt_mem_Flash_flash_data+0xf401cb9c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1cbc0:	e037883a 	mov	sp,fp
   1cbc4:	df000017 	ldw	fp,0(sp)
   1cbc8:	dec00104 	addi	sp,sp,4
   1cbcc:	f800283a 	ret

0001cbd0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1cbd0:	defff904 	addi	sp,sp,-28
   1cbd4:	dfc00615 	stw	ra,24(sp)
   1cbd8:	df000515 	stw	fp,20(sp)
   1cbdc:	df000504 	addi	fp,sp,20
   1cbe0:	2005883a 	mov	r2,r4
   1cbe4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1cbe8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1cbec:	008000f4 	movhi	r2,3
   1cbf0:	10a80604 	addi	r2,r2,-24552
   1cbf4:	10800003 	ldbu	r2,0(r2)
   1cbf8:	10803fcc 	andi	r2,r2,255
   1cbfc:	10000126 	beq	r2,zero,1cc04 <OSTimeDly+0x34>
        return;
   1cc00:	00004006 	br	1cd04 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1cc04:	e0bfff0b 	ldhu	r2,-4(fp)
   1cc08:	10003e26 	beq	r2,zero,1cd04 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cc0c:	0005303a 	rdctl	r2,status
   1cc10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cc14:	e0fffd17 	ldw	r3,-12(fp)
   1cc18:	00bfff84 	movi	r2,-2
   1cc1c:	1884703a 	and	r2,r3,r2
   1cc20:	1001703a 	wrctl	status,r2
  
  return context;
   1cc24:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1cc28:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1cc2c:	008000f4 	movhi	r2,3
   1cc30:	10a80704 	addi	r2,r2,-24548
   1cc34:	10800017 	ldw	r2,0(r2)
   1cc38:	10800d03 	ldbu	r2,52(r2)
   1cc3c:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1cc40:	e0fffc03 	ldbu	r3,-16(fp)
   1cc44:	e13ffc03 	ldbu	r4,-16(fp)
   1cc48:	008000f4 	movhi	r2,3
   1cc4c:	10a80444 	addi	r2,r2,-24559
   1cc50:	1105883a 	add	r2,r2,r4
   1cc54:	10800003 	ldbu	r2,0(r2)
   1cc58:	1009883a 	mov	r4,r2
   1cc5c:	008000f4 	movhi	r2,3
   1cc60:	10a80704 	addi	r2,r2,-24548
   1cc64:	10800017 	ldw	r2,0(r2)
   1cc68:	10800d43 	ldbu	r2,53(r2)
   1cc6c:	0084303a 	nor	r2,zero,r2
   1cc70:	2084703a 	and	r2,r4,r2
   1cc74:	1009883a 	mov	r4,r2
   1cc78:	008000f4 	movhi	r2,3
   1cc7c:	10a80444 	addi	r2,r2,-24559
   1cc80:	10c5883a 	add	r2,r2,r3
   1cc84:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1cc88:	e0fffc03 	ldbu	r3,-16(fp)
   1cc8c:	008000f4 	movhi	r2,3
   1cc90:	10a80444 	addi	r2,r2,-24559
   1cc94:	10c5883a 	add	r2,r2,r3
   1cc98:	10800003 	ldbu	r2,0(r2)
   1cc9c:	10803fcc 	andi	r2,r2,255
   1cca0:	10000e1e 	bne	r2,zero,1ccdc <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1cca4:	008000f4 	movhi	r2,3
   1cca8:	10a80704 	addi	r2,r2,-24548
   1ccac:	10800017 	ldw	r2,0(r2)
   1ccb0:	10800d83 	ldbu	r2,54(r2)
   1ccb4:	0084303a 	nor	r2,zero,r2
   1ccb8:	1007883a 	mov	r3,r2
   1ccbc:	008000f4 	movhi	r2,3
   1ccc0:	10a80404 	addi	r2,r2,-24560
   1ccc4:	10800003 	ldbu	r2,0(r2)
   1ccc8:	1884703a 	and	r2,r3,r2
   1cccc:	1007883a 	mov	r3,r2
   1ccd0:	008000f4 	movhi	r2,3
   1ccd4:	10a80404 	addi	r2,r2,-24560
   1ccd8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1ccdc:	008000f4 	movhi	r2,3
   1cce0:	10a80704 	addi	r2,r2,-24548
   1cce4:	10800017 	ldw	r2,0(r2)
   1cce8:	e0ffff0b 	ldhu	r3,-4(fp)
   1ccec:	10c00b8d 	sth	r3,46(r2)
   1ccf0:	e0bffb17 	ldw	r2,-20(fp)
   1ccf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ccf8:	e0bffe17 	ldw	r2,-8(fp)
   1ccfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1cd00:	00162380 	call	16238 <OS_Sched>
    }
}
   1cd04:	e037883a 	mov	sp,fp
   1cd08:	dfc00117 	ldw	ra,4(sp)
   1cd0c:	df000017 	ldw	fp,0(sp)
   1cd10:	dec00204 	addi	sp,sp,8
   1cd14:	f800283a 	ret

0001cd18 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1cd18:	defff804 	addi	sp,sp,-32
   1cd1c:	dfc00715 	stw	ra,28(sp)
   1cd20:	df000615 	stw	fp,24(sp)
   1cd24:	df000604 	addi	fp,sp,24
   1cd28:	2015883a 	mov	r10,r4
   1cd2c:	2809883a 	mov	r4,r5
   1cd30:	3007883a 	mov	r3,r6
   1cd34:	3805883a 	mov	r2,r7
   1cd38:	e2bffc05 	stb	r10,-16(fp)
   1cd3c:	e13ffd05 	stb	r4,-12(fp)
   1cd40:	e0fffe05 	stb	r3,-8(fp)
   1cd44:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1cd48:	008000f4 	movhi	r2,3
   1cd4c:	10a80604 	addi	r2,r2,-24552
   1cd50:	10800003 	ldbu	r2,0(r2)
   1cd54:	10803fcc 	andi	r2,r2,255
   1cd58:	10000226 	beq	r2,zero,1cd64 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1cd5c:	00801544 	movi	r2,85
   1cd60:	00004206 	br	1ce6c <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1cd64:	e0bffc03 	ldbu	r2,-16(fp)
   1cd68:	1000081e 	bne	r2,zero,1cd8c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1cd6c:	e0bffd03 	ldbu	r2,-12(fp)
   1cd70:	1000061e 	bne	r2,zero,1cd8c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1cd74:	e0bffe03 	ldbu	r2,-8(fp)
   1cd78:	1000041e 	bne	r2,zero,1cd8c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1cd7c:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd80:	1000021e 	bne	r2,zero,1cd8c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1cd84:	00801504 	movi	r2,84
   1cd88:	00003806 	br	1ce6c <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1cd8c:	e0bffd03 	ldbu	r2,-12(fp)
   1cd90:	10800f30 	cmpltui	r2,r2,60
   1cd94:	1000021e 	bne	r2,zero,1cda0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1cd98:	00801444 	movi	r2,81
   1cd9c:	00003306 	br	1ce6c <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1cda0:	e0bffe03 	ldbu	r2,-8(fp)
   1cda4:	10800f30 	cmpltui	r2,r2,60
   1cda8:	1000021e 	bne	r2,zero,1cdb4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1cdac:	00801484 	movi	r2,82
   1cdb0:	00002e06 	br	1ce6c <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1cdb4:	e0bfff0b 	ldhu	r2,-4(fp)
   1cdb8:	1080fa30 	cmpltui	r2,r2,1000
   1cdbc:	1000021e 	bne	r2,zero,1cdc8 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1cdc0:	008014c4 	movi	r2,83
   1cdc4:	00002906 	br	1ce6c <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1cdc8:	e0bffc03 	ldbu	r2,-16(fp)
   1cdcc:	10c38424 	muli	r3,r2,3600
   1cdd0:	e0bffd03 	ldbu	r2,-12(fp)
   1cdd4:	10800f24 	muli	r2,r2,60
   1cdd8:	1887883a 	add	r3,r3,r2
   1cddc:	e0bffe03 	ldbu	r2,-8(fp)
   1cde0:	1885883a 	add	r2,r3,r2
   1cde4:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1cde8:	e0bfff0b 	ldhu	r2,-4(fp)
   1cdec:	10800f84 	addi	r2,r2,62
   1cdf0:	100690fa 	slli	r3,r2,3
   1cdf4:	008418b4 	movhi	r2,4194
   1cdf8:	109374c4 	addi	r2,r2,19923
   1cdfc:	188a383a 	mulxuu	r5,r3,r2
   1ce00:	1885383a 	mul	r2,r3,r2
   1ce04:	1011883a 	mov	r8,r2
   1ce08:	2813883a 	mov	r9,r5
   1ce0c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1ce10:	2085883a 	add	r2,r4,r2
   1ce14:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1ce18:	e0bffb17 	ldw	r2,-20(fp)
   1ce1c:	1004d43a 	srli	r2,r2,16
   1ce20:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1ce24:	e0bffb17 	ldw	r2,-20(fp)
   1ce28:	10bfffcc 	andi	r2,r2,65535
   1ce2c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1ce30:	e0bffb17 	ldw	r2,-20(fp)
   1ce34:	10bfffcc 	andi	r2,r2,65535
   1ce38:	1009883a 	mov	r4,r2
   1ce3c:	001cbd00 	call	1cbd0 <OSTimeDly>
    while (loops > 0) {
   1ce40:	00000706 	br	1ce60 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1ce44:	01200014 	movui	r4,32768
   1ce48:	001cbd00 	call	1cbd0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1ce4c:	01200014 	movui	r4,32768
   1ce50:	001cbd00 	call	1cbd0 <OSTimeDly>
        loops--;
   1ce54:	e0bffa0b 	ldhu	r2,-24(fp)
   1ce58:	10bfffc4 	addi	r2,r2,-1
   1ce5c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1ce60:	e0bffa0b 	ldhu	r2,-24(fp)
   1ce64:	103ff71e 	bne	r2,zero,1ce44 <__alt_mem_Flash_flash_data+0xf401ce44>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1ce68:	0005883a 	mov	r2,zero
}
   1ce6c:	e037883a 	mov	sp,fp
   1ce70:	dfc00117 	ldw	ra,4(sp)
   1ce74:	df000017 	ldw	fp,0(sp)
   1ce78:	dec00204 	addi	sp,sp,8
   1ce7c:	f800283a 	ret

0001ce80 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1ce80:	defff504 	addi	sp,sp,-44
   1ce84:	dfc00a15 	stw	ra,40(sp)
   1ce88:	df000915 	stw	fp,36(sp)
   1ce8c:	df000904 	addi	fp,sp,36
   1ce90:	2005883a 	mov	r2,r4
   1ce94:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ce98:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1ce9c:	e0bfff03 	ldbu	r2,-4(fp)
   1cea0:	10800530 	cmpltui	r2,r2,20
   1cea4:	1000021e 	bne	r2,zero,1ceb0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1cea8:	00800a84 	movi	r2,42
   1ceac:	00006b06 	br	1d05c <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ceb0:	0005303a 	rdctl	r2,status
   1ceb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ceb8:	e0fff917 	ldw	r3,-28(fp)
   1cebc:	00bfff84 	movi	r2,-2
   1cec0:	1884703a 	and	r2,r3,r2
   1cec4:	1001703a 	wrctl	status,r2
  
  return context;
   1cec8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1cecc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1ced0:	e0ffff03 	ldbu	r3,-4(fp)
   1ced4:	00800174 	movhi	r2,5
   1ced8:	10bccf04 	addi	r2,r2,-3268
   1cedc:	18c7883a 	add	r3,r3,r3
   1cee0:	18c7883a 	add	r3,r3,r3
   1cee4:	10c5883a 	add	r2,r2,r3
   1cee8:	10800017 	ldw	r2,0(r2)
   1ceec:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1cef0:	e0bff817 	ldw	r2,-32(fp)
   1cef4:	1000061e 	bne	r2,zero,1cf10 <OSTimeDlyResume+0x90>
   1cef8:	e0bff717 	ldw	r2,-36(fp)
   1cefc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cf00:	e0bffa17 	ldw	r2,-24(fp)
   1cf04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1cf08:	008010c4 	movi	r2,67
   1cf0c:	00005306 	br	1d05c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1cf10:	e0bff817 	ldw	r2,-32(fp)
   1cf14:	10800058 	cmpnei	r2,r2,1
   1cf18:	1000061e 	bne	r2,zero,1cf34 <OSTimeDlyResume+0xb4>
   1cf1c:	e0bff717 	ldw	r2,-36(fp)
   1cf20:	e0bffb15 	stw	r2,-20(fp)
   1cf24:	e0bffb17 	ldw	r2,-20(fp)
   1cf28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1cf2c:	008010c4 	movi	r2,67
   1cf30:	00004a06 	br	1d05c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1cf34:	e0bff817 	ldw	r2,-32(fp)
   1cf38:	10800b8b 	ldhu	r2,46(r2)
   1cf3c:	10bfffcc 	andi	r2,r2,65535
   1cf40:	1000061e 	bne	r2,zero,1cf5c <OSTimeDlyResume+0xdc>
   1cf44:	e0bff717 	ldw	r2,-36(fp)
   1cf48:	e0bffc15 	stw	r2,-16(fp)
   1cf4c:	e0bffc17 	ldw	r2,-16(fp)
   1cf50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1cf54:	00801404 	movi	r2,80
   1cf58:	00004006 	br	1d05c <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1cf5c:	e0bff817 	ldw	r2,-32(fp)
   1cf60:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1cf64:	e0bff817 	ldw	r2,-32(fp)
   1cf68:	10800c03 	ldbu	r2,48(r2)
   1cf6c:	10803fcc 	andi	r2,r2,255
   1cf70:	10800dcc 	andi	r2,r2,55
   1cf74:	10000b26 	beq	r2,zero,1cfa4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1cf78:	e0bff817 	ldw	r2,-32(fp)
   1cf7c:	10c00c03 	ldbu	r3,48(r2)
   1cf80:	00bff204 	movi	r2,-56
   1cf84:	1884703a 	and	r2,r3,r2
   1cf88:	1007883a 	mov	r3,r2
   1cf8c:	e0bff817 	ldw	r2,-32(fp)
   1cf90:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1cf94:	e0bff817 	ldw	r2,-32(fp)
   1cf98:	00c00044 	movi	r3,1
   1cf9c:	10c00c45 	stb	r3,49(r2)
   1cfa0:	00000206 	br	1cfac <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1cfa4:	e0bff817 	ldw	r2,-32(fp)
   1cfa8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1cfac:	e0bff817 	ldw	r2,-32(fp)
   1cfb0:	10800c03 	ldbu	r2,48(r2)
   1cfb4:	10803fcc 	andi	r2,r2,255
   1cfb8:	1080020c 	andi	r2,r2,8
   1cfbc:	1000221e 	bne	r2,zero,1d048 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1cfc0:	e0bff817 	ldw	r2,-32(fp)
   1cfc4:	10c00d83 	ldbu	r3,54(r2)
   1cfc8:	008000f4 	movhi	r2,3
   1cfcc:	10a80404 	addi	r2,r2,-24560
   1cfd0:	10800003 	ldbu	r2,0(r2)
   1cfd4:	1884b03a 	or	r2,r3,r2
   1cfd8:	1007883a 	mov	r3,r2
   1cfdc:	008000f4 	movhi	r2,3
   1cfe0:	10a80404 	addi	r2,r2,-24560
   1cfe4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1cfe8:	e0bff817 	ldw	r2,-32(fp)
   1cfec:	10800d03 	ldbu	r2,52(r2)
   1cff0:	10c03fcc 	andi	r3,r2,255
   1cff4:	e0bff817 	ldw	r2,-32(fp)
   1cff8:	10800d03 	ldbu	r2,52(r2)
   1cffc:	11003fcc 	andi	r4,r2,255
   1d000:	008000f4 	movhi	r2,3
   1d004:	10a80444 	addi	r2,r2,-24559
   1d008:	1105883a 	add	r2,r2,r4
   1d00c:	11000003 	ldbu	r4,0(r2)
   1d010:	e0bff817 	ldw	r2,-32(fp)
   1d014:	10800d43 	ldbu	r2,53(r2)
   1d018:	2084b03a 	or	r2,r4,r2
   1d01c:	1009883a 	mov	r4,r2
   1d020:	008000f4 	movhi	r2,3
   1d024:	10a80444 	addi	r2,r2,-24559
   1d028:	10c5883a 	add	r2,r2,r3
   1d02c:	11000005 	stb	r4,0(r2)
   1d030:	e0bff717 	ldw	r2,-36(fp)
   1d034:	e0bffd15 	stw	r2,-12(fp)
   1d038:	e0bffd17 	ldw	r2,-12(fp)
   1d03c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1d040:	00162380 	call	16238 <OS_Sched>
   1d044:	00000406 	br	1d058 <OSTimeDlyResume+0x1d8>
   1d048:	e0bff717 	ldw	r2,-36(fp)
   1d04c:	e0bffe15 	stw	r2,-8(fp)
   1d050:	e0bffe17 	ldw	r2,-8(fp)
   1d054:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1d058:	0005883a 	mov	r2,zero
}
   1d05c:	e037883a 	mov	sp,fp
   1d060:	dfc00117 	ldw	ra,4(sp)
   1d064:	df000017 	ldw	fp,0(sp)
   1d068:	dec00204 	addi	sp,sp,8
   1d06c:	f800283a 	ret

0001d070 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1d070:	defffb04 	addi	sp,sp,-20
   1d074:	df000415 	stw	fp,16(sp)
   1d078:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d07c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d080:	0005303a 	rdctl	r2,status
   1d084:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d088:	e0fffe17 	ldw	r3,-8(fp)
   1d08c:	00bfff84 	movi	r2,-2
   1d090:	1884703a 	and	r2,r3,r2
   1d094:	1001703a 	wrctl	status,r2
  
  return context;
   1d098:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1d09c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1d0a0:	008000f4 	movhi	r2,3
   1d0a4:	10a80804 	addi	r2,r2,-24544
   1d0a8:	10800017 	ldw	r2,0(r2)
   1d0ac:	e0bffd15 	stw	r2,-12(fp)
   1d0b0:	e0bffc17 	ldw	r2,-16(fp)
   1d0b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d0b8:	e0bfff17 	ldw	r2,-4(fp)
   1d0bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1d0c0:	e0bffd17 	ldw	r2,-12(fp)
}
   1d0c4:	e037883a 	mov	sp,fp
   1d0c8:	df000017 	ldw	fp,0(sp)
   1d0cc:	dec00104 	addi	sp,sp,4
   1d0d0:	f800283a 	ret

0001d0d4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1d0d4:	defffb04 	addi	sp,sp,-20
   1d0d8:	df000415 	stw	fp,16(sp)
   1d0dc:	df000404 	addi	fp,sp,16
   1d0e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d0e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d0e8:	0005303a 	rdctl	r2,status
   1d0ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d0f0:	e0fffd17 	ldw	r3,-12(fp)
   1d0f4:	00bfff84 	movi	r2,-2
   1d0f8:	1884703a 	and	r2,r3,r2
   1d0fc:	1001703a 	wrctl	status,r2
  
  return context;
   1d100:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1d104:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1d108:	008000f4 	movhi	r2,3
   1d10c:	10a80804 	addi	r2,r2,-24544
   1d110:	e0ffff17 	ldw	r3,-4(fp)
   1d114:	10c00015 	stw	r3,0(r2)
   1d118:	e0bffc17 	ldw	r2,-16(fp)
   1d11c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d120:	e0bffe17 	ldw	r2,-8(fp)
   1d124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1d128:	e037883a 	mov	sp,fp
   1d12c:	df000017 	ldw	fp,0(sp)
   1d130:	dec00104 	addi	sp,sp,4
   1d134:	f800283a 	ret

0001d138 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1d138:	defffd04 	addi	sp,sp,-12
   1d13c:	dfc00215 	stw	ra,8(sp)
   1d140:	df000115 	stw	fp,4(sp)
   1d144:	df000104 	addi	fp,sp,4
   1d148:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1d14c:	e13fff17 	ldw	r4,-4(fp)
   1d150:	014000b4 	movhi	r5,2
   1d154:	295fd004 	addi	r5,r5,32576
   1d158:	0023eb00 	call	23eb0 <alt_dev_llist_insert>
}
   1d15c:	e037883a 	mov	sp,fp
   1d160:	dfc00117 	ldw	ra,4(sp)
   1d164:	df000017 	ldw	fp,0(sp)
   1d168:	dec00204 	addi	sp,sp,8
   1d16c:	f800283a 	ret

0001d170 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1d170:	defffd04 	addi	sp,sp,-12
   1d174:	dfc00215 	stw	ra,8(sp)
   1d178:	df000115 	stw	fp,4(sp)
   1d17c:	df000104 	addi	fp,sp,4
   1d180:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1d184:	00247c40 	call	247c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1d188:	00800044 	movi	r2,1
   1d18c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1d190:	e037883a 	mov	sp,fp
   1d194:	dfc00117 	ldw	ra,4(sp)
   1d198:	df000017 	ldw	fp,0(sp)
   1d19c:	dec00204 	addi	sp,sp,8
   1d1a0:	f800283a 	ret

0001d1a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1d1a4:	defffd04 	addi	sp,sp,-12
   1d1a8:	dfc00215 	stw	ra,8(sp)
   1d1ac:	df000115 	stw	fp,4(sp)
   1d1b0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1d1b4:	01040034 	movhi	r4,4096
   1d1b8:	21080004 	addi	r4,r4,8192
   1d1bc:	000b883a 	mov	r5,zero
   1d1c0:	000d883a 	mov	r6,zero
   1d1c4:	01c00204 	movi	r7,8
   1d1c8:	00226bc0 	call	226bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1d1cc:	010000b4 	movhi	r4,2
   1d1d0:	211ac804 	addi	r4,r4,27424
   1d1d4:	000b883a 	mov	r5,zero
   1d1d8:	01800204 	movi	r6,8
   1d1dc:	0021a840 	call	21a84 <altera_avalon_jtag_uart_init>
   1d1e0:	010000b4 	movhi	r4,2
   1d1e4:	211abe04 	addi	r4,r4,27384
   1d1e8:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1d1ec:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1d1f0:	010000b4 	movhi	r4,2
   1d1f4:	211ed904 	addi	r4,r4,31588
   1d1f8:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1d1fc:	010000b4 	movhi	r4,2
   1d200:	211ee504 	addi	r4,r4,31636
   1d204:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1d208:	010000b4 	movhi	r4,2
   1d20c:	211ef104 	addi	r4,r4,31684
   1d210:	00227ec0 	call	227ec <alt_up_character_lcd_init>
   1d214:	010000b4 	movhi	r4,2
   1d218:	211ef104 	addi	r4,r4,31684
   1d21c:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1d220:	010000b4 	movhi	r4,2
   1d224:	211efc04 	addi	r4,r4,31728
   1d228:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1d22c:	010000b4 	movhi	r4,2
   1d230:	211f0704 	addi	r4,r4,31772
   1d234:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1d238:	010000b4 	movhi	r4,2
   1d23c:	211f1204 	addi	r4,r4,31816
   1d240:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1d244:	010000b4 	movhi	r4,2
   1d248:	211f1d04 	addi	r4,r4,31860
   1d24c:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1d250:	010000b4 	movhi	r4,2
   1d254:	211f2804 	addi	r4,r4,31904
   1d258:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1d25c:	010000b4 	movhi	r4,2
   1d260:	211f3304 	addi	r4,r4,31948
   1d264:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1d268:	010000b4 	movhi	r4,2
   1d26c:	211f3e04 	addi	r4,r4,31992
   1d270:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1d274:	010000b4 	movhi	r4,2
   1d278:	211f4904 	addi	r4,r4,32036
   1d27c:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1d280:	010000b4 	movhi	r4,2
   1d284:	211f5404 	addi	r4,r4,32080
   1d288:	00231040 	call	23104 <alt_up_ps2_init>
   1d28c:	010000b4 	movhi	r4,2
   1d290:	211f5404 	addi	r4,r4,32080
   1d294:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1d298:	010000b4 	movhi	r4,2
   1d29c:	211f6204 	addi	r4,r4,32136
   1d2a0:	00231040 	call	23104 <alt_up_ps2_init>
   1d2a4:	010000b4 	movhi	r4,2
   1d2a8:	211f6204 	addi	r4,r4,32136
   1d2ac:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1d2b0:	010000b4 	movhi	r4,2
   1d2b4:	211f7004 	addi	r4,r4,32192
   1d2b8:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1d2bc:	010000b4 	movhi	r4,2
   1d2c0:	211f7b04 	addi	r4,r4,32236
   1d2c4:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1d2c8:	008000b4 	movhi	r2,2
   1d2cc:	109f8804 	addi	r2,r2,32288
   1d2d0:	10800a17 	ldw	r2,40(r2)
   1d2d4:	10800104 	addi	r2,r2,4
   1d2d8:	10800017 	ldw	r2,0(r2)
   1d2dc:	10ffffcc 	andi	r3,r2,65535
   1d2e0:	008000b4 	movhi	r2,2
   1d2e4:	109f8804 	addi	r2,r2,32288
   1d2e8:	10c00c15 	stw	r3,48(r2)
   1d2ec:	008000b4 	movhi	r2,2
   1d2f0:	109f8804 	addi	r2,r2,32288
   1d2f4:	10800a17 	ldw	r2,40(r2)
   1d2f8:	10800104 	addi	r2,r2,4
   1d2fc:	10800017 	ldw	r2,0(r2)
   1d300:	1006d43a 	srli	r3,r2,16
   1d304:	008000b4 	movhi	r2,2
   1d308:	109f8804 	addi	r2,r2,32288
   1d30c:	10c00d15 	stw	r3,52(r2)
   1d310:	008000b4 	movhi	r2,2
   1d314:	109f8804 	addi	r2,r2,32288
   1d318:	10800c17 	ldw	r2,48(r2)
   1d31c:	10801068 	cmpgeui	r2,r2,65
   1d320:	1000081e 	bne	r2,zero,1d344 <alt_sys_init+0x1a0>
   1d324:	008000b4 	movhi	r2,2
   1d328:	109f8804 	addi	r2,r2,32288
   1d32c:	00c00fc4 	movi	r3,63
   1d330:	10c00f15 	stw	r3,60(r2)
   1d334:	008000b4 	movhi	r2,2
   1d338:	109f8804 	addi	r2,r2,32288
   1d33c:	00c00184 	movi	r3,6
   1d340:	10c01015 	stw	r3,64(r2)
   1d344:	008000b4 	movhi	r2,2
   1d348:	109f8804 	addi	r2,r2,32288
   1d34c:	10800d17 	ldw	r2,52(r2)
   1d350:	10800868 	cmpgeui	r2,r2,33
   1d354:	1000041e 	bne	r2,zero,1d368 <alt_sys_init+0x1c4>
   1d358:	008000b4 	movhi	r2,2
   1d35c:	109f8804 	addi	r2,r2,32288
   1d360:	00c007c4 	movi	r3,31
   1d364:	10c01115 	stw	r3,68(r2)
   1d368:	010000b4 	movhi	r4,2
   1d36c:	211f8804 	addi	r4,r4,32288
   1d370:	0023a1c0 	call	23a1c <alt_up_char_buffer_init>
   1d374:	010000b4 	movhi	r4,2
   1d378:	211f8804 	addi	r4,r4,32288
   1d37c:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1d380:	008000b4 	movhi	r2,2
   1d384:	109f9a04 	addi	r2,r2,32360
   1d388:	10800a17 	ldw	r2,40(r2)
   1d38c:	10800017 	ldw	r2,0(r2)
   1d390:	1007883a 	mov	r3,r2
   1d394:	008000b4 	movhi	r2,2
   1d398:	109f9a04 	addi	r2,r2,32360
   1d39c:	10c00b15 	stw	r3,44(r2)
   1d3a0:	008000b4 	movhi	r2,2
   1d3a4:	109f9a04 	addi	r2,r2,32360
   1d3a8:	10800a17 	ldw	r2,40(r2)
   1d3ac:	10800104 	addi	r2,r2,4
   1d3b0:	10800017 	ldw	r2,0(r2)
   1d3b4:	1007883a 	mov	r3,r2
   1d3b8:	008000b4 	movhi	r2,2
   1d3bc:	109f9a04 	addi	r2,r2,32360
   1d3c0:	10c00c15 	stw	r3,48(r2)
   1d3c4:	008000b4 	movhi	r2,2
   1d3c8:	109f9a04 	addi	r2,r2,32360
   1d3cc:	10800a17 	ldw	r2,40(r2)
   1d3d0:	10800204 	addi	r2,r2,8
   1d3d4:	10800017 	ldw	r2,0(r2)
   1d3d8:	10ffffcc 	andi	r3,r2,65535
   1d3dc:	008000b4 	movhi	r2,2
   1d3e0:	109f9a04 	addi	r2,r2,32360
   1d3e4:	10c00f15 	stw	r3,60(r2)
   1d3e8:	008000b4 	movhi	r2,2
   1d3ec:	109f9a04 	addi	r2,r2,32360
   1d3f0:	10800a17 	ldw	r2,40(r2)
   1d3f4:	10800204 	addi	r2,r2,8
   1d3f8:	10800017 	ldw	r2,0(r2)
   1d3fc:	1006d43a 	srli	r3,r2,16
   1d400:	008000b4 	movhi	r2,2
   1d404:	109f9a04 	addi	r2,r2,32360
   1d408:	10c01015 	stw	r3,64(r2)
   1d40c:	008000b4 	movhi	r2,2
   1d410:	109f9a04 	addi	r2,r2,32360
   1d414:	10800a17 	ldw	r2,40(r2)
   1d418:	10800304 	addi	r2,r2,12
   1d41c:	10800017 	ldw	r2,0(r2)
   1d420:	1005d07a 	srai	r2,r2,1
   1d424:	10c0004c 	andi	r3,r2,1
   1d428:	008000b4 	movhi	r2,2
   1d42c:	109f9a04 	addi	r2,r2,32360
   1d430:	10c00d15 	stw	r3,52(r2)
   1d434:	008000b4 	movhi	r2,2
   1d438:	109f9a04 	addi	r2,r2,32360
   1d43c:	10800a17 	ldw	r2,40(r2)
   1d440:	10800304 	addi	r2,r2,12
   1d444:	10800017 	ldw	r2,0(r2)
   1d448:	1005d13a 	srai	r2,r2,4
   1d44c:	10c003cc 	andi	r3,r2,15
   1d450:	008000b4 	movhi	r2,2
   1d454:	109f9a04 	addi	r2,r2,32360
   1d458:	10c00e15 	stw	r3,56(r2)
   1d45c:	008000b4 	movhi	r2,2
   1d460:	109f9a04 	addi	r2,r2,32360
   1d464:	10800a17 	ldw	r2,40(r2)
   1d468:	10800304 	addi	r2,r2,12
   1d46c:	10800017 	ldw	r2,0(r2)
   1d470:	1005d43a 	srai	r2,r2,16
   1d474:	e0bfff05 	stb	r2,-4(fp)
   1d478:	008000b4 	movhi	r2,2
   1d47c:	109f9a04 	addi	r2,r2,32360
   1d480:	10800a17 	ldw	r2,40(r2)
   1d484:	10800304 	addi	r2,r2,12
   1d488:	10800017 	ldw	r2,0(r2)
   1d48c:	1004d63a 	srli	r2,r2,24
   1d490:	e0bfff45 	stb	r2,-3(fp)
   1d494:	008000b4 	movhi	r2,2
   1d498:	109f9a04 	addi	r2,r2,32360
   1d49c:	10800e17 	ldw	r2,56(r2)
   1d4a0:	10800058 	cmpnei	r2,r2,1
   1d4a4:	1000041e 	bne	r2,zero,1d4b8 <alt_sys_init+0x314>
   1d4a8:	008000b4 	movhi	r2,2
   1d4ac:	109f9a04 	addi	r2,r2,32360
   1d4b0:	10001115 	stw	zero,68(r2)
   1d4b4:	00000e06 	br	1d4f0 <alt_sys_init+0x34c>
   1d4b8:	008000b4 	movhi	r2,2
   1d4bc:	109f9a04 	addi	r2,r2,32360
   1d4c0:	10800e17 	ldw	r2,56(r2)
   1d4c4:	10800098 	cmpnei	r2,r2,2
   1d4c8:	1000051e 	bne	r2,zero,1d4e0 <alt_sys_init+0x33c>
   1d4cc:	008000b4 	movhi	r2,2
   1d4d0:	109f9a04 	addi	r2,r2,32360
   1d4d4:	00c00044 	movi	r3,1
   1d4d8:	10c01115 	stw	r3,68(r2)
   1d4dc:	00000406 	br	1d4f0 <alt_sys_init+0x34c>
   1d4e0:	008000b4 	movhi	r2,2
   1d4e4:	109f9a04 	addi	r2,r2,32360
   1d4e8:	00c00084 	movi	r3,2
   1d4ec:	10c01115 	stw	r3,68(r2)
   1d4f0:	e0bfff03 	ldbu	r2,-4(fp)
   1d4f4:	00c00804 	movi	r3,32
   1d4f8:	1885c83a 	sub	r2,r3,r2
   1d4fc:	00ffffc4 	movi	r3,-1
   1d500:	1886d83a 	srl	r3,r3,r2
   1d504:	008000b4 	movhi	r2,2
   1d508:	109f9a04 	addi	r2,r2,32360
   1d50c:	10c01215 	stw	r3,72(r2)
   1d510:	e0ffff03 	ldbu	r3,-4(fp)
   1d514:	008000b4 	movhi	r2,2
   1d518:	109f9a04 	addi	r2,r2,32360
   1d51c:	10801117 	ldw	r2,68(r2)
   1d520:	1887883a 	add	r3,r3,r2
   1d524:	008000b4 	movhi	r2,2
   1d528:	109f9a04 	addi	r2,r2,32360
   1d52c:	10c01315 	stw	r3,76(r2)
   1d530:	e0bfff43 	ldbu	r2,-3(fp)
   1d534:	00c00804 	movi	r3,32
   1d538:	1885c83a 	sub	r2,r3,r2
   1d53c:	00ffffc4 	movi	r3,-1
   1d540:	1886d83a 	srl	r3,r3,r2
   1d544:	008000b4 	movhi	r2,2
   1d548:	109f9a04 	addi	r2,r2,32360
   1d54c:	10c01415 	stw	r3,80(r2)
   1d550:	010000b4 	movhi	r4,2
   1d554:	211f9a04 	addi	r4,r4,32360
   1d558:	001d1380 	call	1d138 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1d55c:	010000b4 	movhi	r4,2
   1d560:	211faf04 	addi	r4,r4,32444
   1d564:	001d1380 	call	1d138 <alt_dev_reg>
}
   1d568:	e037883a 	mov	sp,fp
   1d56c:	dfc00117 	ldw	ra,4(sp)
   1d570:	df000017 	ldw	fp,0(sp)
   1d574:	dec00204 	addi	sp,sp,8
   1d578:	f800283a 	ret

0001d57c <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   1d57c:	defffa04 	addi	sp,sp,-24
   1d580:	dfc00515 	stw	ra,20(sp)
   1d584:	df000415 	stw	fp,16(sp)
   1d588:	df000404 	addi	fp,sp,16
   1d58c:	e13ffe15 	stw	r4,-8(fp)
   1d590:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1d594:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   1d598:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   1d59c:	10001e26 	beq	r2,zero,1d618 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   1d5a0:	00803fc4 	movi	r2,255
   1d5a4:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1d5a8:	d0a85817 	ldw	r2,-24224(gp)
   1d5ac:	e13ffe17 	ldw	r4,-8(fp)
   1d5b0:	e0ffff17 	ldw	r3,-4(fp)
   1d5b4:	20c7883a 	add	r3,r4,r3
   1d5b8:	1806927a 	slli	r3,r3,9
   1d5bc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   1d5c0:	d0a85717 	ldw	r2,-24228(gp)
   1d5c4:	00c00604 	movi	r3,24
   1d5c8:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1d5cc:	d0a85417 	ldw	r2,-24240(gp)
   1d5d0:	1080002b 	ldhuio	r2,0(r2)
   1d5d4:	10bfffcc 	andi	r2,r2,65535
   1d5d8:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   1d5dc:	e0bffd0b 	ldhu	r2,-12(fp)
   1d5e0:	10bfffcc 	andi	r2,r2,65535
   1d5e4:	1080010c 	andi	r2,r2,4
   1d5e8:	103ff81e 	bne	r2,zero,1d5cc <__alt_mem_Flash_flash_data+0xf401d5cc>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   1d5ec:	e0bffd0b 	ldhu	r2,-12(fp)
   1d5f0:	10bfffcc 	andi	r2,r2,65535
   1d5f4:	1080040c 	andi	r2,r2,16
   1d5f8:	1000071e 	bne	r2,zero,1d618 <Write_Sector_Data+0x9c>
        {
            result = true;
   1d5fc:	00800044 	movi	r2,1
   1d600:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1d604:	d0285d15 	stw	zero,-24204(gp)
            current_sector_index = sector_index+partition_offset;
   1d608:	e0fffe17 	ldw	r3,-8(fp)
   1d60c:	e0bfff17 	ldw	r2,-4(fp)
   1d610:	1885883a 	add	r2,r3,r2
   1d614:	d0a85e15 	stw	r2,-24200(gp)
        }
    }
    return result;
   1d618:	e0bffc17 	ldw	r2,-16(fp)
}
   1d61c:	e037883a 	mov	sp,fp
   1d620:	dfc00117 	ldw	ra,4(sp)
   1d624:	df000017 	ldw	fp,0(sp)
   1d628:	dec00204 	addi	sp,sp,8
   1d62c:	f800283a 	ret

0001d630 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   1d630:	defffd04 	addi	sp,sp,-12
   1d634:	dfc00215 	stw	ra,8(sp)
   1d638:	df000115 	stw	fp,4(sp)
   1d63c:	df000104 	addi	fp,sp,4
    bool result = true;
   1d640:	00800044 	movi	r2,1
   1d644:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1d648:	d0a85d17 	ldw	r2,-24204(gp)
   1d64c:	10000526 	beq	r2,zero,1d664 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   1d650:	d0a85e17 	ldw	r2,-24200(gp)
   1d654:	1009883a 	mov	r4,r2
   1d658:	000b883a 	mov	r5,zero
   1d65c:	001d57c0 	call	1d57c <Write_Sector_Data>
   1d660:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1d664:	e0bfff17 	ldw	r2,-4(fp)
}
   1d668:	e037883a 	mov	sp,fp
   1d66c:	dfc00117 	ldw	ra,4(sp)
   1d670:	df000017 	ldw	fp,0(sp)
   1d674:	dec00204 	addi	sp,sp,8
   1d678:	f800283a 	ret

0001d67c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   1d67c:	defffa04 	addi	sp,sp,-24
   1d680:	dfc00515 	stw	ra,20(sp)
   1d684:	df000415 	stw	fp,16(sp)
   1d688:	df000404 	addi	fp,sp,16
   1d68c:	e13ffe15 	stw	r4,-8(fp)
   1d690:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   1d694:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   1d698:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   1d69c:	10002726 	beq	r2,zero,1d73c <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   1d6a0:	00803fc4 	movi	r2,255
   1d6a4:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1d6a8:	d0a85d17 	ldw	r2,-24204(gp)
   1d6ac:	10000726 	beq	r2,zero,1d6cc <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   1d6b0:	d0a85e17 	ldw	r2,-24200(gp)
   1d6b4:	1009883a 	mov	r4,r2
   1d6b8:	000b883a 	mov	r5,zero
   1d6bc:	001d57c0 	call	1d57c <Write_Sector_Data>
   1d6c0:	1000021e 	bne	r2,zero,1d6cc <Read_Sector_Data+0x50>
            {
                return false;
   1d6c4:	0005883a 	mov	r2,zero
   1d6c8:	00001d06 	br	1d740 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1d6cc:	d0a85817 	ldw	r2,-24224(gp)
   1d6d0:	e13ffe17 	ldw	r4,-8(fp)
   1d6d4:	e0ffff17 	ldw	r3,-4(fp)
   1d6d8:	20c7883a 	add	r3,r4,r3
   1d6dc:	1806927a 	slli	r3,r3,9
   1d6e0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   1d6e4:	d0a85717 	ldw	r2,-24228(gp)
   1d6e8:	00c00444 	movi	r3,17
   1d6ec:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1d6f0:	d0a85417 	ldw	r2,-24240(gp)
   1d6f4:	1080002b 	ldhuio	r2,0(r2)
   1d6f8:	10bfffcc 	andi	r2,r2,65535
   1d6fc:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   1d700:	e0bffd0b 	ldhu	r2,-12(fp)
   1d704:	10bfffcc 	andi	r2,r2,65535
   1d708:	1080010c 	andi	r2,r2,4
   1d70c:	103ff81e 	bne	r2,zero,1d6f0 <__alt_mem_Flash_flash_data+0xf401d6f0>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   1d710:	e0bffd0b 	ldhu	r2,-12(fp)
   1d714:	10bfffcc 	andi	r2,r2,65535
   1d718:	1080040c 	andi	r2,r2,16
   1d71c:	1000071e 	bne	r2,zero,1d73c <Read_Sector_Data+0xc0>
		{
			result = true;
   1d720:	00800044 	movi	r2,1
   1d724:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1d728:	d0285d15 	stw	zero,-24204(gp)
            current_sector_index = sector_index+partition_offset;
   1d72c:	e0fffe17 	ldw	r3,-8(fp)
   1d730:	e0bfff17 	ldw	r2,-4(fp)
   1d734:	1885883a 	add	r2,r3,r2
   1d738:	d0a85e15 	stw	r2,-24200(gp)
		}
	}
	return result;
   1d73c:	e0bffc17 	ldw	r2,-16(fp)
}
   1d740:	e037883a 	mov	sp,fp
   1d744:	dfc00117 	ldw	ra,4(sp)
   1d748:	df000017 	ldw	fp,0(sp)
   1d74c:	dec00204 	addi	sp,sp,8
   1d750:	f800283a 	ret

0001d754 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   1d754:	defffb04 	addi	sp,sp,-20
   1d758:	dfc00415 	stw	ra,16(sp)
   1d75c:	df000315 	stw	fp,12(sp)
   1d760:	df000304 	addi	fp,sp,12
   1d764:	e13ffe15 	stw	r4,-8(fp)
   1d768:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   1d76c:	e0bffe17 	ldw	r2,-8(fp)
   1d770:	1004d23a 	srli	r2,r2,8
   1d774:	d0e85a17 	ldw	r3,-24216(gp)
   1d778:	10c5883a 	add	r2,r2,r3
   1d77c:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1d780:	00800174 	movhi	r2,5
   1d784:	10bce904 	addi	r2,r2,-3164
   1d788:	10801117 	ldw	r2,68(r2)
   1d78c:	e0fffd17 	ldw	r3,-12(fp)
   1d790:	1885883a 	add	r2,r3,r2
   1d794:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   1d798:	d0a85e17 	ldw	r2,-24200(gp)
   1d79c:	e0fffd17 	ldw	r3,-12(fp)
   1d7a0:	18800726 	beq	r3,r2,1d7c0 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1d7a4:	e0bffd17 	ldw	r2,-12(fp)
   1d7a8:	1009883a 	mov	r4,r2
   1d7ac:	000b883a 	mov	r5,zero
   1d7b0:	001d67c0 	call	1d67c <Read_Sector_Data>
   1d7b4:	1000021e 	bne	r2,zero,1d7c0 <get_cluster_flag+0x6c>
        {
            return false;
   1d7b8:	0005883a 	mov	r2,zero
   1d7bc:	00000d06 	br	1d7f4 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   1d7c0:	e0bffe17 	ldw	r2,-8(fp)
   1d7c4:	10803fcc 	andi	r2,r2,255
   1d7c8:	1085883a 	add	r2,r2,r2
   1d7cc:	1007883a 	mov	r3,r2
   1d7d0:	d0a85c17 	ldw	r2,-24208(gp)
   1d7d4:	10800a17 	ldw	r2,40(r2)
   1d7d8:	1885883a 	add	r2,r3,r2
   1d7dc:	1080002b 	ldhuio	r2,0(r2)
   1d7e0:	10bfffcc 	andi	r2,r2,65535
   1d7e4:	1007883a 	mov	r3,r2
   1d7e8:	e0bfff17 	ldw	r2,-4(fp)
   1d7ec:	10c0000d 	sth	r3,0(r2)
    return true;
   1d7f0:	00800044 	movi	r2,1
}
   1d7f4:	e037883a 	mov	sp,fp
   1d7f8:	dfc00117 	ldw	ra,4(sp)
   1d7fc:	df000017 	ldw	fp,0(sp)
   1d800:	dec00204 	addi	sp,sp,8
   1d804:	f800283a 	ret

0001d808 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   1d808:	defffa04 	addi	sp,sp,-24
   1d80c:	dfc00515 	stw	ra,20(sp)
   1d810:	df000415 	stw	fp,16(sp)
   1d814:	df000404 	addi	fp,sp,16
   1d818:	e13ffd15 	stw	r4,-12(fp)
   1d81c:	2805883a 	mov	r2,r5
   1d820:	e1bfff15 	stw	r6,-4(fp)
   1d824:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1d828:	e0bffd17 	ldw	r2,-12(fp)
   1d82c:	1004d23a 	srli	r2,r2,8
   1d830:	d0e85a17 	ldw	r3,-24216(gp)
   1d834:	10c5883a 	add	r2,r2,r3
   1d838:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   1d83c:	e0bfff17 	ldw	r2,-4(fp)
   1d840:	10000726 	beq	r2,zero,1d860 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1d844:	00800174 	movhi	r2,5
   1d848:	10bce904 	addi	r2,r2,-3164
   1d84c:	10801117 	ldw	r2,68(r2)
   1d850:	e0fffc17 	ldw	r3,-16(fp)
   1d854:	1885883a 	add	r2,r3,r2
   1d858:	e0bffc15 	stw	r2,-16(fp)
   1d85c:	00000606 	br	1d878 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   1d860:	00800174 	movhi	r2,5
   1d864:	10bce904 	addi	r2,r2,-3164
   1d868:	10801217 	ldw	r2,72(r2)
   1d86c:	e0fffc17 	ldw	r3,-16(fp)
   1d870:	1885883a 	add	r2,r3,r2
   1d874:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   1d878:	d0a85e17 	ldw	r2,-24200(gp)
   1d87c:	e0fffc17 	ldw	r3,-16(fp)
   1d880:	18800726 	beq	r3,r2,1d8a0 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1d884:	e0bffc17 	ldw	r2,-16(fp)
   1d888:	1009883a 	mov	r4,r2
   1d88c:	000b883a 	mov	r5,zero
   1d890:	001d67c0 	call	1d67c <Read_Sector_Data>
   1d894:	1000021e 	bne	r2,zero,1d8a0 <mark_cluster+0x98>
        {
            return false;
   1d898:	0005883a 	mov	r2,zero
   1d89c:	00000d06 	br	1d8d4 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   1d8a0:	e0bffd17 	ldw	r2,-12(fp)
   1d8a4:	10803fcc 	andi	r2,r2,255
   1d8a8:	1085883a 	add	r2,r2,r2
   1d8ac:	1007883a 	mov	r3,r2
   1d8b0:	d0a85c17 	ldw	r2,-24208(gp)
   1d8b4:	10800a17 	ldw	r2,40(r2)
   1d8b8:	1885883a 	add	r2,r3,r2
   1d8bc:	1007883a 	mov	r3,r2
   1d8c0:	e0bffe0f 	ldh	r2,-8(fp)
   1d8c4:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   1d8c8:	00800044 	movi	r2,1
   1d8cc:	d0a85d15 	stw	r2,-24204(gp)
    return true;
   1d8d0:	00800044 	movi	r2,1
}
   1d8d4:	e037883a 	mov	sp,fp
   1d8d8:	dfc00117 	ldw	ra,4(sp)
   1d8dc:	df000017 	ldw	fp,0(sp)
   1d8e0:	dec00204 	addi	sp,sp,8
   1d8e4:	f800283a 	ret

0001d8e8 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   1d8e8:	defff704 	addi	sp,sp,-36
   1d8ec:	dfc00815 	stw	ra,32(sp)
   1d8f0:	df000715 	stw	fp,28(sp)
   1d8f4:	df000704 	addi	fp,sp,28
	bool result = false;
   1d8f8:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   1d8fc:	0009883a 	mov	r4,zero
   1d900:	000b883a 	mov	r5,zero
   1d904:	001d67c0 	call	1d67c <Read_Sector_Data>
   1d908:	10005c26 	beq	r2,zero,1da7c <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   1d90c:	d0a85c17 	ldw	r2,-24208(gp)
   1d910:	10800a17 	ldw	r2,40(r2)
   1d914:	10807f84 	addi	r2,r2,510
   1d918:	1080002b 	ldhuio	r2,0(r2)
   1d91c:	10bfffcc 	andi	r2,r2,65535
   1d920:	10bfffcc 	andi	r2,r2,65535
   1d924:	10a0001c 	xori	r2,r2,32768
   1d928:	10a00004 	addi	r2,r2,-32768
   1d92c:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   1d930:	e0bffb17 	ldw	r2,-20(fp)
   1d934:	10ffffcc 	andi	r3,r2,65535
   1d938:	00aa9554 	movui	r2,43605
   1d93c:	18804f1e 	bne	r3,r2,1da7c <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1d940:	e03ffa15 	stw	zero,-24(fp)
   1d944:	00004a06 	br	1da70 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1d948:	e0bffa17 	ldw	r2,-24(fp)
   1d94c:	1004913a 	slli	r2,r2,4
   1d950:	10806f84 	addi	r2,r2,446
   1d954:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1d958:	d0a85c17 	ldw	r2,-24208(gp)
   1d95c:	10c00a17 	ldw	r3,40(r2)
   1d960:	e0bffc17 	ldw	r2,-16(fp)
   1d964:	1885883a 	add	r2,r3,r2
   1d968:	10800104 	addi	r2,r2,4
   1d96c:	10800023 	ldbuio	r2,0(r2)
   1d970:	10803fcc 	andi	r2,r2,255
   1d974:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1d978:	e0bffd07 	ldb	r2,-12(fp)
   1d97c:	10800060 	cmpeqi	r2,r2,1
   1d980:	1000091e 	bne	r2,zero,1d9a8 <Check_for_Master_Boot_Record+0xc0>
   1d984:	e0bffd07 	ldb	r2,-12(fp)
   1d988:	10800120 	cmpeqi	r2,r2,4
   1d98c:	1000061e 	bne	r2,zero,1d9a8 <Check_for_Master_Boot_Record+0xc0>
   1d990:	e0bffd07 	ldb	r2,-12(fp)
   1d994:	108001a0 	cmpeqi	r2,r2,6
   1d998:	1000031e 	bne	r2,zero,1d9a8 <Check_for_Master_Boot_Record+0xc0>
   1d99c:	e0bffd07 	ldb	r2,-12(fp)
   1d9a0:	10800398 	cmpnei	r2,r2,14
   1d9a4:	10002f1e 	bne	r2,zero,1da64 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1d9a8:	d0a85c17 	ldw	r2,-24208(gp)
   1d9ac:	10c00a17 	ldw	r3,40(r2)
   1d9b0:	e0bffc17 	ldw	r2,-16(fp)
   1d9b4:	1885883a 	add	r2,r3,r2
   1d9b8:	10800284 	addi	r2,r2,10
   1d9bc:	1080002b 	ldhuio	r2,0(r2)
   1d9c0:	10bfffcc 	andi	r2,r2,65535
   1d9c4:	10bfffcc 	andi	r2,r2,65535
   1d9c8:	1006943a 	slli	r3,r2,16
   1d9cc:	d0a85c17 	ldw	r2,-24208(gp)
   1d9d0:	11000a17 	ldw	r4,40(r2)
   1d9d4:	e0bffc17 	ldw	r2,-16(fp)
   1d9d8:	2085883a 	add	r2,r4,r2
   1d9dc:	10800204 	addi	r2,r2,8
   1d9e0:	1080002b 	ldhuio	r2,0(r2)
   1d9e4:	10bfffcc 	andi	r2,r2,65535
   1d9e8:	10bfffcc 	andi	r2,r2,65535
   1d9ec:	1884b03a 	or	r2,r3,r2
   1d9f0:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   1d9f4:	d0a85c17 	ldw	r2,-24208(gp)
   1d9f8:	10c00a17 	ldw	r3,40(r2)
   1d9fc:	e0bffc17 	ldw	r2,-16(fp)
   1da00:	1885883a 	add	r2,r3,r2
   1da04:	10800384 	addi	r2,r2,14
   1da08:	1080002b 	ldhuio	r2,0(r2)
   1da0c:	10bfffcc 	andi	r2,r2,65535
   1da10:	10bfffcc 	andi	r2,r2,65535
   1da14:	1006943a 	slli	r3,r2,16
   1da18:	d0a85c17 	ldw	r2,-24208(gp)
   1da1c:	11000a17 	ldw	r4,40(r2)
   1da20:	e0bffc17 	ldw	r2,-16(fp)
   1da24:	2085883a 	add	r2,r4,r2
   1da28:	10800304 	addi	r2,r2,12
   1da2c:	1080002b 	ldhuio	r2,0(r2)
   1da30:	10bfffcc 	andi	r2,r2,65535
   1da34:	10bfffcc 	andi	r2,r2,65535
   1da38:	1884b03a 	or	r2,r3,r2
   1da3c:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   1da40:	e0bfff17 	ldw	r2,-4(fp)
   1da44:	0080070e 	bge	zero,r2,1da64 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   1da48:	00800044 	movi	r2,1
   1da4c:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   1da50:	e0bfff17 	ldw	r2,-4(fp)
   1da54:	d0a85b15 	stw	r2,-24212(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1da58:	e0bffe17 	ldw	r2,-8(fp)
   1da5c:	d0a85a15 	stw	r2,-24216(gp)
						break;
   1da60:	00000606 	br	1da7c <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1da64:	e0bffa17 	ldw	r2,-24(fp)
   1da68:	10800044 	addi	r2,r2,1
   1da6c:	e0bffa15 	stw	r2,-24(fp)
   1da70:	e0bffa17 	ldw	r2,-24(fp)
   1da74:	10800110 	cmplti	r2,r2,4
   1da78:	103fb31e 	bne	r2,zero,1d948 <__alt_mem_Flash_flash_data+0xf401d948>
				}
			}
		}
	}

	return result;
   1da7c:	e0bff917 	ldw	r2,-28(fp)
}
   1da80:	e037883a 	mov	sp,fp
   1da84:	dfc00117 	ldw	ra,4(sp)
   1da88:	df000017 	ldw	fp,0(sp)
   1da8c:	dec00204 	addi	sp,sp,8
   1da90:	f800283a 	ret

0001da94 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   1da94:	defff804 	addi	sp,sp,-32
   1da98:	dfc00715 	stw	ra,28(sp)
   1da9c:	df000615 	stw	fp,24(sp)
   1daa0:	df000604 	addi	fp,sp,24
   1daa4:	e13ffc15 	stw	r4,-16(fp)
   1daa8:	e17ffd15 	stw	r5,-12(fp)
   1daac:	e1bffe15 	stw	r6,-8(fp)
   1dab0:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   1dab4:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1dab8:	e0bffc17 	ldw	r2,-16(fp)
   1dabc:	108007cc 	andi	r2,r2,31
   1dac0:	10008d1e 	bne	r2,zero,1dcf8 <Read_File_Record_At_Offset+0x264>
   1dac4:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   1dac8:	10008b26 	beq	r2,zero,1dcf8 <Read_File_Record_At_Offset+0x264>
   1dacc:	d0a85317 	ldw	r2,-24244(gp)
   1dad0:	10008926 	beq	r2,zero,1dcf8 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1dad4:	e03ffb15 	stw	zero,-20(fp)
   1dad8:	00001106 	br	1db20 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   1dadc:	e0fffc17 	ldw	r3,-16(fp)
   1dae0:	e0bffb17 	ldw	r2,-20(fp)
   1dae4:	1885883a 	add	r2,r3,r2
   1dae8:	1007883a 	mov	r3,r2
   1daec:	d0a85c17 	ldw	r2,-24208(gp)
   1daf0:	10800a17 	ldw	r2,40(r2)
   1daf4:	1885883a 	add	r2,r3,r2
   1daf8:	10800023 	ldbuio	r2,0(r2)
   1dafc:	10803fcc 	andi	r2,r2,255
   1db00:	1009883a 	mov	r4,r2
   1db04:	e0fffd17 	ldw	r3,-12(fp)
   1db08:	e0bffb17 	ldw	r2,-20(fp)
   1db0c:	1885883a 	add	r2,r3,r2
   1db10:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1db14:	e0bffb17 	ldw	r2,-20(fp)
   1db18:	10800044 	addi	r2,r2,1
   1db1c:	e0bffb15 	stw	r2,-20(fp)
   1db20:	e0bffb17 	ldw	r2,-20(fp)
   1db24:	10800210 	cmplti	r2,r2,8
   1db28:	103fec1e 	bne	r2,zero,1dadc <__alt_mem_Flash_flash_data+0xf401dadc>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1db2c:	e03ffb15 	stw	zero,-20(fp)
   1db30:	00001306 	br	1db80 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   1db34:	e0fffc17 	ldw	r3,-16(fp)
   1db38:	e0bffb17 	ldw	r2,-20(fp)
   1db3c:	1885883a 	add	r2,r3,r2
   1db40:	1007883a 	mov	r3,r2
   1db44:	d0a85c17 	ldw	r2,-24208(gp)
   1db48:	10800a17 	ldw	r2,40(r2)
   1db4c:	1885883a 	add	r2,r3,r2
   1db50:	10800204 	addi	r2,r2,8
   1db54:	10800023 	ldbuio	r2,0(r2)
   1db58:	10803fcc 	andi	r2,r2,255
   1db5c:	1009883a 	mov	r4,r2
   1db60:	e0fffd17 	ldw	r3,-12(fp)
   1db64:	e0bffb17 	ldw	r2,-20(fp)
   1db68:	1885883a 	add	r2,r3,r2
   1db6c:	10800204 	addi	r2,r2,8
   1db70:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   1db74:	e0bffb17 	ldw	r2,-20(fp)
   1db78:	10800044 	addi	r2,r2,1
   1db7c:	e0bffb15 	stw	r2,-20(fp)
   1db80:	e0bffb17 	ldw	r2,-20(fp)
   1db84:	108000d0 	cmplti	r2,r2,3
   1db88:	103fea1e 	bne	r2,zero,1db34 <__alt_mem_Flash_flash_data+0xf401db34>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   1db8c:	d0a85c17 	ldw	r2,-24208(gp)
   1db90:	10c00a17 	ldw	r3,40(r2)
   1db94:	e0bffc17 	ldw	r2,-16(fp)
   1db98:	1885883a 	add	r2,r3,r2
   1db9c:	108002c4 	addi	r2,r2,11
   1dba0:	10800023 	ldbuio	r2,0(r2)
   1dba4:	10803fcc 	andi	r2,r2,255
   1dba8:	1007883a 	mov	r3,r2
   1dbac:	e0bffd17 	ldw	r2,-12(fp)
   1dbb0:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   1dbb4:	d0a85c17 	ldw	r2,-24208(gp)
   1dbb8:	10c00a17 	ldw	r3,40(r2)
   1dbbc:	e0bffc17 	ldw	r2,-16(fp)
   1dbc0:	1885883a 	add	r2,r3,r2
   1dbc4:	10800384 	addi	r2,r2,14
   1dbc8:	1080002b 	ldhuio	r2,0(r2)
   1dbcc:	10bfffcc 	andi	r2,r2,65535
   1dbd0:	1007883a 	mov	r3,r2
   1dbd4:	e0bffd17 	ldw	r2,-12(fp)
   1dbd8:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   1dbdc:	d0a85c17 	ldw	r2,-24208(gp)
   1dbe0:	10c00a17 	ldw	r3,40(r2)
   1dbe4:	e0bffc17 	ldw	r2,-16(fp)
   1dbe8:	1885883a 	add	r2,r3,r2
   1dbec:	10800404 	addi	r2,r2,16
   1dbf0:	1080002b 	ldhuio	r2,0(r2)
   1dbf4:	10bfffcc 	andi	r2,r2,65535
   1dbf8:	1007883a 	mov	r3,r2
   1dbfc:	e0bffd17 	ldw	r2,-12(fp)
   1dc00:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   1dc04:	d0a85c17 	ldw	r2,-24208(gp)
   1dc08:	10c00a17 	ldw	r3,40(r2)
   1dc0c:	e0bffc17 	ldw	r2,-16(fp)
   1dc10:	1885883a 	add	r2,r3,r2
   1dc14:	10800484 	addi	r2,r2,18
   1dc18:	1080002b 	ldhuio	r2,0(r2)
   1dc1c:	10bfffcc 	andi	r2,r2,65535
   1dc20:	1007883a 	mov	r3,r2
   1dc24:	e0bffd17 	ldw	r2,-12(fp)
   1dc28:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   1dc2c:	d0a85c17 	ldw	r2,-24208(gp)
   1dc30:	10c00a17 	ldw	r3,40(r2)
   1dc34:	e0bffc17 	ldw	r2,-16(fp)
   1dc38:	1885883a 	add	r2,r3,r2
   1dc3c:	10800584 	addi	r2,r2,22
   1dc40:	1080002b 	ldhuio	r2,0(r2)
   1dc44:	10bfffcc 	andi	r2,r2,65535
   1dc48:	1007883a 	mov	r3,r2
   1dc4c:	e0bffd17 	ldw	r2,-12(fp)
   1dc50:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   1dc54:	d0a85c17 	ldw	r2,-24208(gp)
   1dc58:	10c00a17 	ldw	r3,40(r2)
   1dc5c:	e0bffc17 	ldw	r2,-16(fp)
   1dc60:	1885883a 	add	r2,r3,r2
   1dc64:	10800604 	addi	r2,r2,24
   1dc68:	1080002b 	ldhuio	r2,0(r2)
   1dc6c:	10bfffcc 	andi	r2,r2,65535
   1dc70:	1007883a 	mov	r3,r2
   1dc74:	e0bffd17 	ldw	r2,-12(fp)
   1dc78:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   1dc7c:	d0a85c17 	ldw	r2,-24208(gp)
   1dc80:	10c00a17 	ldw	r3,40(r2)
   1dc84:	e0bffc17 	ldw	r2,-16(fp)
   1dc88:	1885883a 	add	r2,r3,r2
   1dc8c:	10800684 	addi	r2,r2,26
   1dc90:	1080002b 	ldhuio	r2,0(r2)
   1dc94:	10bfffcc 	andi	r2,r2,65535
   1dc98:	1007883a 	mov	r3,r2
   1dc9c:	e0bffd17 	ldw	r2,-12(fp)
   1dca0:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   1dca4:	d0a85c17 	ldw	r2,-24208(gp)
   1dca8:	10c00a17 	ldw	r3,40(r2)
   1dcac:	e0bffc17 	ldw	r2,-16(fp)
   1dcb0:	1885883a 	add	r2,r3,r2
   1dcb4:	10800704 	addi	r2,r2,28
   1dcb8:	10800037 	ldwio	r2,0(r2)
   1dcbc:	1007883a 	mov	r3,r2
   1dcc0:	e0bffd17 	ldw	r2,-12(fp)
   1dcc4:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   1dcc8:	e0bffd17 	ldw	r2,-12(fp)
   1dccc:	e0fffe17 	ldw	r3,-8(fp)
   1dcd0:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   1dcd4:	e0bffd17 	ldw	r2,-12(fp)
   1dcd8:	e0ffff17 	ldw	r3,-4(fp)
   1dcdc:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1dce0:	e0bffc17 	ldw	r2,-16(fp)
   1dce4:	1007883a 	mov	r3,r2
   1dce8:	e0bffd17 	ldw	r2,-12(fp)
   1dcec:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1dcf0:	00800044 	movi	r2,1
   1dcf4:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   1dcf8:	e0bffa17 	ldw	r2,-24(fp)
}
   1dcfc:	e037883a 	mov	sp,fp
   1dd00:	dfc00117 	ldw	ra,4(sp)
   1dd04:	df000017 	ldw	fp,0(sp)
   1dd08:	dec00204 	addi	sp,sp,8
   1dd0c:	f800283a 	ret

0001dd10 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1dd10:	defff904 	addi	sp,sp,-28
   1dd14:	dfc00615 	stw	ra,24(sp)
   1dd18:	df000515 	stw	fp,20(sp)
   1dd1c:	df000504 	addi	fp,sp,20
   1dd20:	e13ffe15 	stw	r4,-8(fp)
   1dd24:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1dd28:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1dd2c:	e0bffe17 	ldw	r2,-8(fp)
   1dd30:	108007cc 	andi	r2,r2,31
   1dd34:	1000931e 	bne	r2,zero,1df84 <Write_File_Record_At_Offset+0x274>
   1dd38:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   1dd3c:	10009126 	beq	r2,zero,1df84 <Write_File_Record_At_Offset+0x274>
   1dd40:	d0a85317 	ldw	r2,-24244(gp)
   1dd44:	10008f26 	beq	r2,zero,1df84 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1dd48:	e03ffc15 	stw	zero,-16(fp)
   1dd4c:	00001f06 	br	1ddcc <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   1dd50:	e0bffc17 	ldw	r2,-16(fp)
   1dd54:	10800044 	addi	r2,r2,1
   1dd58:	e0ffff17 	ldw	r3,-4(fp)
   1dd5c:	1885883a 	add	r2,r3,r2
   1dd60:	10800003 	ldbu	r2,0(r2)
   1dd64:	10803fcc 	andi	r2,r2,255
   1dd68:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   1dd6c:	e0bffd0f 	ldh	r2,-12(fp)
   1dd70:	1004923a 	slli	r2,r2,8
   1dd74:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   1dd78:	e0ffff17 	ldw	r3,-4(fp)
   1dd7c:	e0bffc17 	ldw	r2,-16(fp)
   1dd80:	1885883a 	add	r2,r3,r2
   1dd84:	10800003 	ldbu	r2,0(r2)
   1dd88:	10c03fcc 	andi	r3,r2,255
   1dd8c:	e0bffd0b 	ldhu	r2,-12(fp)
   1dd90:	1884b03a 	or	r2,r3,r2
   1dd94:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1dd98:	e0fffe17 	ldw	r3,-8(fp)
   1dd9c:	e0bffc17 	ldw	r2,-16(fp)
   1dda0:	1885883a 	add	r2,r3,r2
   1dda4:	1007883a 	mov	r3,r2
   1dda8:	d0a85c17 	ldw	r2,-24208(gp)
   1ddac:	10800a17 	ldw	r2,40(r2)
   1ddb0:	1885883a 	add	r2,r3,r2
   1ddb4:	1007883a 	mov	r3,r2
   1ddb8:	e0bffd0f 	ldh	r2,-12(fp)
   1ddbc:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1ddc0:	e0bffc17 	ldw	r2,-16(fp)
   1ddc4:	10800084 	addi	r2,r2,2
   1ddc8:	e0bffc15 	stw	r2,-16(fp)
   1ddcc:	e0bffc17 	ldw	r2,-16(fp)
   1ddd0:	10800210 	cmplti	r2,r2,8
   1ddd4:	103fde1e 	bne	r2,zero,1dd50 <__alt_mem_Flash_flash_data+0xf401dd50>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1ddd8:	e03ffc15 	stw	zero,-16(fp)
   1dddc:	00001306 	br	1de2c <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1dde0:	e0fffe17 	ldw	r3,-8(fp)
   1dde4:	e0bffc17 	ldw	r2,-16(fp)
   1dde8:	1885883a 	add	r2,r3,r2
   1ddec:	1007883a 	mov	r3,r2
   1ddf0:	d0a85c17 	ldw	r2,-24208(gp)
   1ddf4:	10800a17 	ldw	r2,40(r2)
   1ddf8:	1885883a 	add	r2,r3,r2
   1ddfc:	10800204 	addi	r2,r2,8
   1de00:	1009883a 	mov	r4,r2
   1de04:	e0ffff17 	ldw	r3,-4(fp)
   1de08:	e0bffc17 	ldw	r2,-16(fp)
   1de0c:	1885883a 	add	r2,r3,r2
   1de10:	10800204 	addi	r2,r2,8
   1de14:	10800003 	ldbu	r2,0(r2)
   1de18:	10803fcc 	andi	r2,r2,255
   1de1c:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1de20:	e0bffc17 	ldw	r2,-16(fp)
   1de24:	10800044 	addi	r2,r2,1
   1de28:	e0bffc15 	stw	r2,-16(fp)
   1de2c:	e0bffc17 	ldw	r2,-16(fp)
   1de30:	108000d0 	cmplti	r2,r2,3
   1de34:	103fea1e 	bne	r2,zero,1dde0 <__alt_mem_Flash_flash_data+0xf401dde0>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1de38:	d0a85c17 	ldw	r2,-24208(gp)
   1de3c:	10c00a17 	ldw	r3,40(r2)
   1de40:	e0bffe17 	ldw	r2,-8(fp)
   1de44:	1885883a 	add	r2,r3,r2
   1de48:	108002c4 	addi	r2,r2,11
   1de4c:	1007883a 	mov	r3,r2
   1de50:	e0bfff17 	ldw	r2,-4(fp)
   1de54:	108002c3 	ldbu	r2,11(r2)
   1de58:	10803fcc 	andi	r2,r2,255
   1de5c:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   1de60:	d0a85c17 	ldw	r2,-24208(gp)
   1de64:	10c00a17 	ldw	r3,40(r2)
   1de68:	e0bffe17 	ldw	r2,-8(fp)
   1de6c:	1885883a 	add	r2,r3,r2
   1de70:	10800384 	addi	r2,r2,14
   1de74:	1007883a 	mov	r3,r2
   1de78:	e0bfff17 	ldw	r2,-4(fp)
   1de7c:	1080030b 	ldhu	r2,12(r2)
   1de80:	10bfffcc 	andi	r2,r2,65535
   1de84:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1de88:	d0a85c17 	ldw	r2,-24208(gp)
   1de8c:	10c00a17 	ldw	r3,40(r2)
   1de90:	e0bffe17 	ldw	r2,-8(fp)
   1de94:	1885883a 	add	r2,r3,r2
   1de98:	10800404 	addi	r2,r2,16
   1de9c:	1007883a 	mov	r3,r2
   1dea0:	e0bfff17 	ldw	r2,-4(fp)
   1dea4:	1080038b 	ldhu	r2,14(r2)
   1dea8:	10bfffcc 	andi	r2,r2,65535
   1deac:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1deb0:	d0a85c17 	ldw	r2,-24208(gp)
   1deb4:	10c00a17 	ldw	r3,40(r2)
   1deb8:	e0bffe17 	ldw	r2,-8(fp)
   1debc:	1885883a 	add	r2,r3,r2
   1dec0:	10800484 	addi	r2,r2,18
   1dec4:	1007883a 	mov	r3,r2
   1dec8:	e0bfff17 	ldw	r2,-4(fp)
   1decc:	1080040b 	ldhu	r2,16(r2)
   1ded0:	10bfffcc 	andi	r2,r2,65535
   1ded4:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   1ded8:	d0a85c17 	ldw	r2,-24208(gp)
   1dedc:	10c00a17 	ldw	r3,40(r2)
   1dee0:	e0bffe17 	ldw	r2,-8(fp)
   1dee4:	1885883a 	add	r2,r3,r2
   1dee8:	10800584 	addi	r2,r2,22
   1deec:	1007883a 	mov	r3,r2
   1def0:	e0bfff17 	ldw	r2,-4(fp)
   1def4:	1080048b 	ldhu	r2,18(r2)
   1def8:	10bfffcc 	andi	r2,r2,65535
   1defc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1df00:	d0a85c17 	ldw	r2,-24208(gp)
   1df04:	10c00a17 	ldw	r3,40(r2)
   1df08:	e0bffe17 	ldw	r2,-8(fp)
   1df0c:	1885883a 	add	r2,r3,r2
   1df10:	10800604 	addi	r2,r2,24
   1df14:	1007883a 	mov	r3,r2
   1df18:	e0bfff17 	ldw	r2,-4(fp)
   1df1c:	1080050b 	ldhu	r2,20(r2)
   1df20:	10bfffcc 	andi	r2,r2,65535
   1df24:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   1df28:	d0a85c17 	ldw	r2,-24208(gp)
   1df2c:	10c00a17 	ldw	r3,40(r2)
   1df30:	e0bffe17 	ldw	r2,-8(fp)
   1df34:	1885883a 	add	r2,r3,r2
   1df38:	10800684 	addi	r2,r2,26
   1df3c:	1007883a 	mov	r3,r2
   1df40:	e0bfff17 	ldw	r2,-4(fp)
   1df44:	1080058b 	ldhu	r2,22(r2)
   1df48:	10bfffcc 	andi	r2,r2,65535
   1df4c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   1df50:	d0a85c17 	ldw	r2,-24208(gp)
   1df54:	10c00a17 	ldw	r3,40(r2)
   1df58:	e0bffe17 	ldw	r2,-8(fp)
   1df5c:	1885883a 	add	r2,r3,r2
   1df60:	10800704 	addi	r2,r2,28
   1df64:	1007883a 	mov	r3,r2
   1df68:	e0bfff17 	ldw	r2,-4(fp)
   1df6c:	10800617 	ldw	r2,24(r2)
   1df70:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   1df74:	00800044 	movi	r2,1
   1df78:	d0a85d15 	stw	r2,-24204(gp)
        result = true;
   1df7c:	00800044 	movi	r2,1
   1df80:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   1df84:	e0bffb17 	ldw	r2,-20(fp)
}
   1df88:	e037883a 	mov	sp,fp
   1df8c:	dfc00117 	ldw	ra,4(sp)
   1df90:	df000017 	ldw	fp,0(sp)
   1df94:	dec00204 	addi	sp,sp,8
   1df98:	f800283a 	ret

0001df9c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   1df9c:	defff904 	addi	sp,sp,-28
   1dfa0:	dfc00615 	stw	ra,24(sp)
   1dfa4:	df000515 	stw	fp,20(sp)
   1dfa8:	df000504 	addi	fp,sp,20
   1dfac:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   1dfb0:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
   1dfb4:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   1dfb8:	0009883a 	mov	r4,zero
   1dfbc:	e17fff17 	ldw	r5,-4(fp)
   1dfc0:	001d67c0 	call	1d67c <Read_Sector_Data>
   1dfc4:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   1dfc8:	d0a85c17 	ldw	r2,-24208(gp)
   1dfcc:	10800a17 	ldw	r2,40(r2)
   1dfd0:	10807f84 	addi	r2,r2,510
   1dfd4:	1080002b 	ldhuio	r2,0(r2)
   1dfd8:	10bfffcc 	andi	r2,r2,65535
   1dfdc:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1dfe0:	e0bffe0f 	ldh	r2,-8(fp)
   1dfe4:	10ffffcc 	andi	r3,r2,65535
   1dfe8:	00aa9554 	movui	r2,43605
   1dfec:	1881861e 	bne	r3,r2,1e608 <Check_for_DOS_FAT+0x66c>
   1dff0:	e0bffb17 	ldw	r2,-20(fp)
   1dff4:	10018426 	beq	r2,zero,1e608 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
   1dff8:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   1dffc:	d0a85c17 	ldw	r2,-24208(gp)
   1e000:	10800a17 	ldw	r2,40(r2)
   1e004:	10800023 	ldbuio	r2,0(r2)
   1e008:	10803fcc 	andi	r2,r2,255
   1e00c:	1007883a 	mov	r3,r2
   1e010:	00800174 	movhi	r2,5
   1e014:	10bce904 	addi	r2,r2,-3164
   1e018:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   1e01c:	d0a85c17 	ldw	r2,-24208(gp)
   1e020:	10800a17 	ldw	r2,40(r2)
   1e024:	10800044 	addi	r2,r2,1
   1e028:	10800023 	ldbuio	r2,0(r2)
   1e02c:	10803fcc 	andi	r2,r2,255
   1e030:	1007883a 	mov	r3,r2
   1e034:	00800174 	movhi	r2,5
   1e038:	10bce904 	addi	r2,r2,-3164
   1e03c:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   1e040:	d0a85c17 	ldw	r2,-24208(gp)
   1e044:	10800a17 	ldw	r2,40(r2)
   1e048:	10800084 	addi	r2,r2,2
   1e04c:	10800023 	ldbuio	r2,0(r2)
   1e050:	10803fcc 	andi	r2,r2,255
   1e054:	1007883a 	mov	r3,r2
   1e058:	00800174 	movhi	r2,5
   1e05c:	10bce904 	addi	r2,r2,-3164
   1e060:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   1e064:	e03ffc15 	stw	zero,-16(fp)
   1e068:	00001006 	br	1e0ac <Check_for_DOS_FAT+0x110>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   1e06c:	d0a85c17 	ldw	r2,-24208(gp)
   1e070:	10c00a17 	ldw	r3,40(r2)
   1e074:	e0bffc17 	ldw	r2,-16(fp)
   1e078:	1885883a 	add	r2,r3,r2
   1e07c:	108000c4 	addi	r2,r2,3
   1e080:	10800023 	ldbuio	r2,0(r2)
   1e084:	10803fcc 	andi	r2,r2,255
   1e088:	1009883a 	mov	r4,r2
   1e08c:	00800174 	movhi	r2,5
   1e090:	10bce904 	addi	r2,r2,-3164
   1e094:	e0fffc17 	ldw	r3,-16(fp)
   1e098:	10c5883a 	add	r2,r2,r3
   1e09c:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   1e0a0:	e0bffc17 	ldw	r2,-16(fp)
   1e0a4:	10800044 	addi	r2,r2,1
   1e0a8:	e0bffc15 	stw	r2,-16(fp)
   1e0ac:	e0bffc17 	ldw	r2,-16(fp)
   1e0b0:	10800210 	cmplti	r2,r2,8
   1e0b4:	103fed1e 	bne	r2,zero,1e06c <__alt_mem_Flash_flash_data+0xf401e06c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   1e0b8:	d0a85c17 	ldw	r2,-24208(gp)
   1e0bc:	10800a17 	ldw	r2,40(r2)
   1e0c0:	10800304 	addi	r2,r2,12
   1e0c4:	10800023 	ldbuio	r2,0(r2)
   1e0c8:	10803fcc 	andi	r2,r2,255
   1e0cc:	10803fcc 	andi	r2,r2,255
   1e0d0:	1004923a 	slli	r2,r2,8
   1e0d4:	1007883a 	mov	r3,r2
   1e0d8:	d0a85c17 	ldw	r2,-24208(gp)
   1e0dc:	10800a17 	ldw	r2,40(r2)
   1e0e0:	108002c4 	addi	r2,r2,11
   1e0e4:	10800023 	ldbuio	r2,0(r2)
   1e0e8:	10803fcc 	andi	r2,r2,255
   1e0ec:	10803fcc 	andi	r2,r2,255
   1e0f0:	1080201c 	xori	r2,r2,128
   1e0f4:	10bfe004 	addi	r2,r2,-128
   1e0f8:	1884b03a 	or	r2,r3,r2
   1e0fc:	1007883a 	mov	r3,r2
   1e100:	00800174 	movhi	r2,5
   1e104:	10bce904 	addi	r2,r2,-3164
   1e108:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   1e10c:	d0a85c17 	ldw	r2,-24208(gp)
   1e110:	10800a17 	ldw	r2,40(r2)
   1e114:	10800344 	addi	r2,r2,13
   1e118:	10800023 	ldbuio	r2,0(r2)
   1e11c:	10803fcc 	andi	r2,r2,255
   1e120:	1007883a 	mov	r3,r2
   1e124:	00800174 	movhi	r2,5
   1e128:	10bce904 	addi	r2,r2,-3164
   1e12c:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   1e130:	d0a85c17 	ldw	r2,-24208(gp)
   1e134:	10800a17 	ldw	r2,40(r2)
   1e138:	10800384 	addi	r2,r2,14
   1e13c:	1080002b 	ldhuio	r2,0(r2)
   1e140:	10bfffcc 	andi	r2,r2,65535
   1e144:	1007883a 	mov	r3,r2
   1e148:	00800174 	movhi	r2,5
   1e14c:	10bce904 	addi	r2,r2,-3164
   1e150:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   1e154:	d0a85c17 	ldw	r2,-24208(gp)
   1e158:	10800a17 	ldw	r2,40(r2)
   1e15c:	10800404 	addi	r2,r2,16
   1e160:	10800023 	ldbuio	r2,0(r2)
   1e164:	10803fcc 	andi	r2,r2,255
   1e168:	1007883a 	mov	r3,r2
   1e16c:	00800174 	movhi	r2,5
   1e170:	10bce904 	addi	r2,r2,-3164
   1e174:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   1e178:	d0a85c17 	ldw	r2,-24208(gp)
   1e17c:	10800a17 	ldw	r2,40(r2)
   1e180:	10800484 	addi	r2,r2,18
   1e184:	10800023 	ldbuio	r2,0(r2)
   1e188:	10803fcc 	andi	r2,r2,255
   1e18c:	10803fcc 	andi	r2,r2,255
   1e190:	1004923a 	slli	r2,r2,8
   1e194:	1007883a 	mov	r3,r2
   1e198:	d0a85c17 	ldw	r2,-24208(gp)
   1e19c:	10800a17 	ldw	r2,40(r2)
   1e1a0:	10800444 	addi	r2,r2,17
   1e1a4:	10800023 	ldbuio	r2,0(r2)
   1e1a8:	10803fcc 	andi	r2,r2,255
   1e1ac:	10803fcc 	andi	r2,r2,255
   1e1b0:	1884b03a 	or	r2,r3,r2
   1e1b4:	1007883a 	mov	r3,r2
   1e1b8:	00800174 	movhi	r2,5
   1e1bc:	10bce904 	addi	r2,r2,-3164
   1e1c0:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   1e1c4:	d0a85c17 	ldw	r2,-24208(gp)
   1e1c8:	10800a17 	ldw	r2,40(r2)
   1e1cc:	10800504 	addi	r2,r2,20
   1e1d0:	10800023 	ldbuio	r2,0(r2)
   1e1d4:	10803fcc 	andi	r2,r2,255
   1e1d8:	10803fcc 	andi	r2,r2,255
   1e1dc:	1004923a 	slli	r2,r2,8
   1e1e0:	1007883a 	mov	r3,r2
   1e1e4:	d0a85c17 	ldw	r2,-24208(gp)
   1e1e8:	10800a17 	ldw	r2,40(r2)
   1e1ec:	108004c4 	addi	r2,r2,19
   1e1f0:	10800023 	ldbuio	r2,0(r2)
   1e1f4:	10803fcc 	andi	r2,r2,255
   1e1f8:	10803fcc 	andi	r2,r2,255
   1e1fc:	1884b03a 	or	r2,r3,r2
   1e200:	1007883a 	mov	r3,r2
   1e204:	00800174 	movhi	r2,5
   1e208:	10bce904 	addi	r2,r2,-3164
   1e20c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1e210:	d0a85c17 	ldw	r2,-24208(gp)
   1e214:	10800a17 	ldw	r2,40(r2)
   1e218:	10800544 	addi	r2,r2,21
   1e21c:	10800023 	ldbuio	r2,0(r2)
   1e220:	10803fcc 	andi	r2,r2,255
   1e224:	1007883a 	mov	r3,r2
   1e228:	00800174 	movhi	r2,5
   1e22c:	10bce904 	addi	r2,r2,-3164
   1e230:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   1e234:	d0a85c17 	ldw	r2,-24208(gp)
   1e238:	10800a17 	ldw	r2,40(r2)
   1e23c:	10800584 	addi	r2,r2,22
   1e240:	1080002b 	ldhuio	r2,0(r2)
   1e244:	10bfffcc 	andi	r2,r2,65535
   1e248:	1007883a 	mov	r3,r2
   1e24c:	00800174 	movhi	r2,5
   1e250:	10bce904 	addi	r2,r2,-3164
   1e254:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   1e258:	d0a85c17 	ldw	r2,-24208(gp)
   1e25c:	10800a17 	ldw	r2,40(r2)
   1e260:	10800604 	addi	r2,r2,24
   1e264:	1080002b 	ldhuio	r2,0(r2)
   1e268:	10bfffcc 	andi	r2,r2,65535
   1e26c:	1007883a 	mov	r3,r2
   1e270:	00800174 	movhi	r2,5
   1e274:	10bce904 	addi	r2,r2,-3164
   1e278:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   1e27c:	d0a85c17 	ldw	r2,-24208(gp)
   1e280:	10800a17 	ldw	r2,40(r2)
   1e284:	10800684 	addi	r2,r2,26
   1e288:	1080002b 	ldhuio	r2,0(r2)
   1e28c:	10bfffcc 	andi	r2,r2,65535
   1e290:	1007883a 	mov	r3,r2
   1e294:	00800174 	movhi	r2,5
   1e298:	10bce904 	addi	r2,r2,-3164
   1e29c:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1e2a0:	d0a85c17 	ldw	r2,-24208(gp)
   1e2a4:	10800a17 	ldw	r2,40(r2)
   1e2a8:	10800704 	addi	r2,r2,28
   1e2ac:	10800037 	ldwio	r2,0(r2)
   1e2b0:	1007883a 	mov	r3,r2
   1e2b4:	00800174 	movhi	r2,5
   1e2b8:	10bce904 	addi	r2,r2,-3164
   1e2bc:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1e2c0:	d0a85c17 	ldw	r2,-24208(gp)
   1e2c4:	10800a17 	ldw	r2,40(r2)
   1e2c8:	10800804 	addi	r2,r2,32
   1e2cc:	10800037 	ldwio	r2,0(r2)
   1e2d0:	1007883a 	mov	r3,r2
   1e2d4:	00800174 	movhi	r2,5
   1e2d8:	10bce904 	addi	r2,r2,-3164
   1e2dc:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1e2e0:	d0a85c17 	ldw	r2,-24208(gp)
   1e2e4:	10800a17 	ldw	r2,40(r2)
   1e2e8:	10800904 	addi	r2,r2,36
   1e2ec:	10800023 	ldbuio	r2,0(r2)
   1e2f0:	10803fcc 	andi	r2,r2,255
   1e2f4:	1007883a 	mov	r3,r2
   1e2f8:	00800174 	movhi	r2,5
   1e2fc:	10bce904 	addi	r2,r2,-3164
   1e300:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   1e304:	d0a85c17 	ldw	r2,-24208(gp)
   1e308:	10800a17 	ldw	r2,40(r2)
   1e30c:	10800944 	addi	r2,r2,37
   1e310:	10800023 	ldbuio	r2,0(r2)
   1e314:	10803fcc 	andi	r2,r2,255
   1e318:	1007883a 	mov	r3,r2
   1e31c:	00800174 	movhi	r2,5
   1e320:	10bce904 	addi	r2,r2,-3164
   1e324:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   1e328:	d0a85c17 	ldw	r2,-24208(gp)
   1e32c:	10800a17 	ldw	r2,40(r2)
   1e330:	10800984 	addi	r2,r2,38
   1e334:	10800023 	ldbuio	r2,0(r2)
   1e338:	10803fcc 	andi	r2,r2,255
   1e33c:	1007883a 	mov	r3,r2
   1e340:	00800174 	movhi	r2,5
   1e344:	10bce904 	addi	r2,r2,-3164
   1e348:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   1e34c:	00800174 	movhi	r2,5
   1e350:	10bce904 	addi	r2,r2,-3164
   1e354:	1080040b 	ldhu	r2,16(r2)
   1e358:	10ffffcc 	andi	r3,r2,65535
   1e35c:	00800174 	movhi	r2,5
   1e360:	10bce904 	addi	r2,r2,-3164
   1e364:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   1e368:	00800174 	movhi	r2,5
   1e36c:	10bce904 	addi	r2,r2,-3164
   1e370:	10c01117 	ldw	r3,68(r2)
   1e374:	00800174 	movhi	r2,5
   1e378:	10bce904 	addi	r2,r2,-3164
   1e37c:	1080068b 	ldhu	r2,26(r2)
   1e380:	10bfffcc 	andi	r2,r2,65535
   1e384:	1887883a 	add	r3,r3,r2
   1e388:	00800174 	movhi	r2,5
   1e38c:	10bce904 	addi	r2,r2,-3164
   1e390:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   1e394:	00800174 	movhi	r2,5
   1e398:	10bce904 	addi	r2,r2,-3164
   1e39c:	10c01217 	ldw	r3,72(r2)
   1e3a0:	00800174 	movhi	r2,5
   1e3a4:	10bce904 	addi	r2,r2,-3164
   1e3a8:	1080068b 	ldhu	r2,26(r2)
   1e3ac:	10bfffcc 	andi	r2,r2,65535
   1e3b0:	1887883a 	add	r3,r3,r2
   1e3b4:	00800174 	movhi	r2,5
   1e3b8:	10bce904 	addi	r2,r2,-3164
   1e3bc:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   1e3c0:	00800174 	movhi	r2,5
   1e3c4:	10bce904 	addi	r2,r2,-3164
   1e3c8:	10c01317 	ldw	r3,76(r2)
   1e3cc:	00800174 	movhi	r2,5
   1e3d0:	10bce904 	addi	r2,r2,-3164
   1e3d4:	1080050b 	ldhu	r2,20(r2)
   1e3d8:	10bfffcc 	andi	r2,r2,65535
   1e3dc:	1008917a 	slli	r4,r2,5
   1e3e0:	00800174 	movhi	r2,5
   1e3e4:	10bce904 	addi	r2,r2,-3164
   1e3e8:	1080030b 	ldhu	r2,12(r2)
   1e3ec:	10bfffcc 	andi	r2,r2,65535
   1e3f0:	2085283a 	div	r2,r4,r2
   1e3f4:	1887883a 	add	r3,r3,r2
   1e3f8:	00800174 	movhi	r2,5
   1e3fc:	10bce904 	addi	r2,r2,-3164
   1e400:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   1e404:	00800174 	movhi	r2,5
   1e408:	10bce904 	addi	r2,r2,-3164
   1e40c:	1080058b 	ldhu	r2,22(r2)
   1e410:	10bfffcc 	andi	r2,r2,65535
   1e414:	10000b26 	beq	r2,zero,1e444 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   1e418:	00800174 	movhi	r2,5
   1e41c:	10bce904 	addi	r2,r2,-3164
   1e420:	1080058b 	ldhu	r2,22(r2)
   1e424:	10ffffcc 	andi	r3,r2,65535
   1e428:	00800174 	movhi	r2,5
   1e42c:	10bce904 	addi	r2,r2,-3164
   1e430:	10800383 	ldbu	r2,14(r2)
   1e434:	10803fcc 	andi	r2,r2,255
   1e438:	1885283a 	div	r2,r3,r2
   1e43c:	e0bffd15 	stw	r2,-12(fp)
   1e440:	00000906 	br	1e468 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   1e444:	00800174 	movhi	r2,5
   1e448:	10bce904 	addi	r2,r2,-3164
   1e44c:	10c00917 	ldw	r3,36(r2)
   1e450:	00800174 	movhi	r2,5
   1e454:	10bce904 	addi	r2,r2,-3164
   1e458:	10800383 	ldbu	r2,14(r2)
   1e45c:	10803fcc 	andi	r2,r2,255
   1e460:	1885203a 	divu	r2,r3,r2
   1e464:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   1e468:	e0bffd17 	ldw	r2,-12(fp)
   1e46c:	1083fdc8 	cmpgei	r2,r2,4087
   1e470:	1000051e 	bne	r2,zero,1e488 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   1e474:	00800174 	movhi	r2,5
   1e478:	10bce904 	addi	r2,r2,-3164
   1e47c:	00c00304 	movi	r3,12
   1e480:	10c01085 	stb	r3,66(r2)
   1e484:	00000c06 	br	1e4b8 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
   1e488:	e0bffd17 	ldw	r2,-12(fp)
   1e48c:	00fffb54 	movui	r3,65517
   1e490:	18800516 	blt	r3,r2,1e4a8 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   1e494:	00800174 	movhi	r2,5
   1e498:	10bce904 	addi	r2,r2,-3164
   1e49c:	00c00404 	movi	r3,16
   1e4a0:	10c01085 	stb	r3,66(r2)
   1e4a4:	00000406 	br	1e4b8 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   1e4a8:	00800174 	movhi	r2,5
   1e4ac:	10bce904 	addi	r2,r2,-3164
   1e4b0:	00c00804 	movi	r3,32
   1e4b4:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   1e4b8:	e03ffc15 	stw	zero,-16(fp)
   1e4bc:	00001106 	br	1e504 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   1e4c0:	d0a85c17 	ldw	r2,-24208(gp)
   1e4c4:	10c00a17 	ldw	r3,40(r2)
   1e4c8:	e0bffc17 	ldw	r2,-16(fp)
   1e4cc:	1885883a 	add	r2,r3,r2
   1e4d0:	108009c4 	addi	r2,r2,39
   1e4d4:	10800023 	ldbuio	r2,0(r2)
   1e4d8:	10803fcc 	andi	r2,r2,255
   1e4dc:	1009883a 	mov	r4,r2
   1e4e0:	00800174 	movhi	r2,5
   1e4e4:	10bce904 	addi	r2,r2,-3164
   1e4e8:	e0fffc17 	ldw	r3,-16(fp)
   1e4ec:	10c5883a 	add	r2,r2,r3
   1e4f0:	10800a04 	addi	r2,r2,40
   1e4f4:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   1e4f8:	e0bffc17 	ldw	r2,-16(fp)
   1e4fc:	10800044 	addi	r2,r2,1
   1e500:	e0bffc15 	stw	r2,-16(fp)
   1e504:	e0bffc17 	ldw	r2,-16(fp)
   1e508:	10800110 	cmplti	r2,r2,4
   1e50c:	103fec1e 	bne	r2,zero,1e4c0 <__alt_mem_Flash_flash_data+0xf401e4c0>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1e510:	e03ffc15 	stw	zero,-16(fp)
   1e514:	00001106 	br	1e55c <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1e518:	d0a85c17 	ldw	r2,-24208(gp)
   1e51c:	10c00a17 	ldw	r3,40(r2)
   1e520:	e0bffc17 	ldw	r2,-16(fp)
   1e524:	1885883a 	add	r2,r3,r2
   1e528:	10800ac4 	addi	r2,r2,43
   1e52c:	10800023 	ldbuio	r2,0(r2)
   1e530:	10803fcc 	andi	r2,r2,255
   1e534:	1009883a 	mov	r4,r2
   1e538:	00800174 	movhi	r2,5
   1e53c:	10bce904 	addi	r2,r2,-3164
   1e540:	e0fffc17 	ldw	r3,-16(fp)
   1e544:	10c5883a 	add	r2,r2,r3
   1e548:	10800b04 	addi	r2,r2,44
   1e54c:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1e550:	e0bffc17 	ldw	r2,-16(fp)
   1e554:	10800044 	addi	r2,r2,1
   1e558:	e0bffc15 	stw	r2,-16(fp)
   1e55c:	e0bffc17 	ldw	r2,-16(fp)
   1e560:	108002d0 	cmplti	r2,r2,11
   1e564:	103fec1e 	bne	r2,zero,1e518 <__alt_mem_Flash_flash_data+0xf401e518>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1e568:	e03ffc15 	stw	zero,-16(fp)
   1e56c:	00001106 	br	1e5b4 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1e570:	d0a85c17 	ldw	r2,-24208(gp)
   1e574:	10c00a17 	ldw	r3,40(r2)
   1e578:	e0bffc17 	ldw	r2,-16(fp)
   1e57c:	1885883a 	add	r2,r3,r2
   1e580:	10800d84 	addi	r2,r2,54
   1e584:	10800023 	ldbuio	r2,0(r2)
   1e588:	10803fcc 	andi	r2,r2,255
   1e58c:	1009883a 	mov	r4,r2
   1e590:	00800174 	movhi	r2,5
   1e594:	10bce904 	addi	r2,r2,-3164
   1e598:	e0fffc17 	ldw	r3,-16(fp)
   1e59c:	10c5883a 	add	r2,r2,r3
   1e5a0:	10800e04 	addi	r2,r2,56
   1e5a4:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1e5a8:	e0bffc17 	ldw	r2,-16(fp)
   1e5ac:	10800044 	addi	r2,r2,1
   1e5b0:	e0bffc15 	stw	r2,-16(fp)
   1e5b4:	e0bffc17 	ldw	r2,-16(fp)
   1e5b8:	10800210 	cmplti	r2,r2,8
   1e5bc:	103fec1e 	bne	r2,zero,1e570 <__alt_mem_Flash_flash_data+0xf401e570>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1e5c0:	e03ffc15 	stw	zero,-16(fp)
   1e5c4:	00000a06 	br	1e5f0 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
   1e5c8:	00800174 	movhi	r2,5
   1e5cc:	10bcfe04 	addi	r2,r2,-3080
   1e5d0:	e0fffc17 	ldw	r3,-16(fp)
   1e5d4:	180691ba 	slli	r3,r3,6
   1e5d8:	18c00f04 	addi	r3,r3,60
   1e5dc:	10c5883a 	add	r2,r2,r3
   1e5e0:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1e5e4:	e0bffc17 	ldw	r2,-16(fp)
   1e5e8:	10800044 	addi	r2,r2,1
   1e5ec:	e0bffc15 	stw	r2,-16(fp)
   1e5f0:	e0bffc17 	ldw	r2,-16(fp)
   1e5f4:	10800510 	cmplti	r2,r2,20
   1e5f8:	103ff31e 	bne	r2,zero,1e5c8 <__alt_mem_Flash_flash_data+0xf401e5c8>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   1e5fc:	00800044 	movi	r2,1
   1e600:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   1e604:	00000106 	br	1e60c <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
   1e608:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
   1e60c:	e0bffb17 	ldw	r2,-20(fp)
}
   1e610:	e037883a 	mov	sp,fp
   1e614:	dfc00117 	ldw	ra,4(sp)
   1e618:	df000017 	ldw	fp,0(sp)
   1e61c:	dec00204 	addi	sp,sp,8
   1e620:	f800283a 	ret

0001e624 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1e624:	defffc04 	addi	sp,sp,-16
   1e628:	dfc00315 	stw	ra,12(sp)
   1e62c:	df000215 	stw	fp,8(sp)
   1e630:	df000204 	addi	fp,sp,8
	bool result = false;
   1e634:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   1e638:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   1e63c:	10002e26 	beq	r2,zero,1e6f8 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   1e640:	d0a85617 	ldw	r2,-24232(gp)
   1e644:	1080000b 	ldhu	r2,0(r2)
   1e648:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1e64c:	d0285a15 	stw	zero,-24216(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1e650:	d0285b15 	stw	zero,-24212(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1e654:	e0bfff0f 	ldh	r2,-4(fp)
   1e658:	10002716 	blt	r2,zero,1e6f8 <Look_for_FAT16+0xd4>
   1e65c:	e0bfff0b 	ldhu	r2,-4(fp)
   1e660:	10bfffcc 	andi	r2,r2,65535
   1e664:	1083000c 	andi	r2,r2,3072
   1e668:	10830020 	cmpeqi	r2,r2,3072
   1e66c:	1000221e 	bne	r2,zero,1e6f8 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1e670:	e0bfff0b 	ldhu	r2,-4(fp)
   1e674:	10bfffcc 	andi	r2,r2,65535
   1e678:	1083000c 	andi	r2,r2,3072
   1e67c:	10810018 	cmpnei	r2,r2,1024
   1e680:	1000031e 	bne	r2,zero,1e690 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1e684:	0009883a 	mov	r4,zero
   1e688:	001df9c0 	call	1df9c <Check_for_DOS_FAT>
   1e68c:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1e690:	e0bfff0b 	ldhu	r2,-4(fp)
   1e694:	10bfffcc 	andi	r2,r2,65535
   1e698:	1083000c 	andi	r2,r2,3072
   1e69c:	1000061e 	bne	r2,zero,1e6b8 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1e6a0:	001d8e80 	call	1d8e8 <Check_for_Master_Boot_Record>
   1e6a4:	10000426 	beq	r2,zero,1e6b8 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1e6a8:	d0a85a17 	ldw	r2,-24216(gp)
   1e6ac:	1009883a 	mov	r4,r2
   1e6b0:	001df9c0 	call	1df9c <Check_for_DOS_FAT>
   1e6b4:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   1e6b8:	e0bffe17 	ldw	r2,-8(fp)
   1e6bc:	10800058 	cmpnei	r2,r2,1
   1e6c0:	10000d1e 	bne	r2,zero,1e6f8 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1e6c4:	00800174 	movhi	r2,5
   1e6c8:	10bce904 	addi	r2,r2,-3164
   1e6cc:	10801083 	ldbu	r2,66(r2)
   1e6d0:	10803fcc 	andi	r2,r2,255
   1e6d4:	10800420 	cmpeqi	r2,r2,16
   1e6d8:	1000021e 	bne	r2,zero,1e6e4 <Look_for_FAT16+0xc0>
				{
					result = false;
   1e6dc:	e03ffe15 	stw	zero,-8(fp)
   1e6e0:	00000506 	br	1e6f8 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1e6e4:	00800174 	movhi	r2,5
   1e6e8:	10bce904 	addi	r2,r2,-3164
   1e6ec:	1080058b 	ldhu	r2,22(r2)
   1e6f0:	10bfffcc 	andi	r2,r2,65535
   1e6f4:	d0a85b15 	stw	r2,-24212(gp)
				}
			}
		}
	}
	return result;
   1e6f8:	e0bffe17 	ldw	r2,-8(fp)
}
   1e6fc:	e037883a 	mov	sp,fp
   1e700:	dfc00117 	ldw	ra,4(sp)
   1e704:	df000017 	ldw	fp,0(sp)
   1e708:	dec00204 	addi	sp,sp,8
   1e70c:	f800283a 	ret

0001e710 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1e710:	defffb04 	addi	sp,sp,-20
   1e714:	dfc00415 	stw	ra,16(sp)
   1e718:	df000315 	stw	fp,12(sp)
   1e71c:	df000304 	addi	fp,sp,12
   1e720:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   1e724:	e13fff17 	ldw	r4,-4(fp)
   1e728:	00047dc0 	call	47dc <strlen>
   1e72c:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1e730:	e03ffd15 	stw	zero,-12(fp)
   1e734:	00001e06 	br	1e7b0 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1e738:	e0bffd17 	ldw	r2,-12(fp)
   1e73c:	e0ffff17 	ldw	r3,-4(fp)
   1e740:	1885883a 	add	r2,r3,r2
   1e744:	10800003 	ldbu	r2,0(r2)
   1e748:	10803fcc 	andi	r2,r2,255
   1e74c:	1080201c 	xori	r2,r2,128
   1e750:	10bfe004 	addi	r2,r2,-128
   1e754:	10801850 	cmplti	r2,r2,97
   1e758:	1000121e 	bne	r2,zero,1e7a4 <filename_to_upper_case+0x94>
   1e75c:	e0bffd17 	ldw	r2,-12(fp)
   1e760:	e0ffff17 	ldw	r3,-4(fp)
   1e764:	1885883a 	add	r2,r3,r2
   1e768:	10800003 	ldbu	r2,0(r2)
   1e76c:	10803fcc 	andi	r2,r2,255
   1e770:	1080201c 	xori	r2,r2,128
   1e774:	10bfe004 	addi	r2,r2,-128
   1e778:	10801ec8 	cmpgei	r2,r2,123
   1e77c:	1000091e 	bne	r2,zero,1e7a4 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1e780:	e0bffd17 	ldw	r2,-12(fp)
   1e784:	e0ffff17 	ldw	r3,-4(fp)
   1e788:	1885883a 	add	r2,r3,r2
   1e78c:	e0fffd17 	ldw	r3,-12(fp)
   1e790:	e13fff17 	ldw	r4,-4(fp)
   1e794:	20c7883a 	add	r3,r4,r3
   1e798:	18c00003 	ldbu	r3,0(r3)
   1e79c:	18fff804 	addi	r3,r3,-32
   1e7a0:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   1e7a4:	e0bffd17 	ldw	r2,-12(fp)
   1e7a8:	10800044 	addi	r2,r2,1
   1e7ac:	e0bffd15 	stw	r2,-12(fp)
   1e7b0:	e0fffd17 	ldw	r3,-12(fp)
   1e7b4:	e0bffe17 	ldw	r2,-8(fp)
   1e7b8:	18bfdf16 	blt	r3,r2,1e738 <__alt_mem_Flash_flash_data+0xf401e738>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   1e7bc:	e037883a 	mov	sp,fp
   1e7c0:	dfc00117 	ldw	ra,4(sp)
   1e7c4:	df000017 	ldw	fp,0(sp)
   1e7c8:	dec00204 	addi	sp,sp,8
   1e7cc:	f800283a 	ret

0001e7d0 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1e7d0:	defff804 	addi	sp,sp,-32
   1e7d4:	dfc00715 	stw	ra,28(sp)
   1e7d8:	df000615 	stw	fp,24(sp)
   1e7dc:	df000604 	addi	fp,sp,24
   1e7e0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   1e7e4:	e13fff17 	ldw	r4,-4(fp)
   1e7e8:	00047dc0 	call	47dc <strlen>
   1e7ec:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   1e7f0:	00bfffc4 	movi	r2,-1
   1e7f4:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   1e7f8:	00bfffc4 	movi	r2,-1
   1e7fc:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   1e800:	00800044 	movi	r2,1
   1e804:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   1e808:	e03ffa15 	stw	zero,-24(fp)
   1e80c:	00006d06 	br	1e9c4 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1e810:	e0bffa17 	ldw	r2,-24(fp)
   1e814:	e0ffff17 	ldw	r3,-4(fp)
   1e818:	1885883a 	add	r2,r3,r2
   1e81c:	10800003 	ldbu	r2,0(r2)
   1e820:	10803fcc 	andi	r2,r2,255
   1e824:	1080201c 	xori	r2,r2,128
   1e828:	10bfe004 	addi	r2,r2,-128
   1e82c:	10800820 	cmpeqi	r2,r2,32
   1e830:	10003e1e 	bne	r2,zero,1e92c <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e834:	e0bffa17 	ldw	r2,-24(fp)
   1e838:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   1e83c:	e0bffb17 	ldw	r2,-20(fp)
   1e840:	1880121e 	bne	r3,r2,1e88c <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e844:	e0bffa17 	ldw	r2,-24(fp)
   1e848:	e0ffff17 	ldw	r3,-4(fp)
   1e84c:	1885883a 	add	r2,r3,r2
   1e850:	10800003 	ldbu	r2,0(r2)
   1e854:	10803fcc 	andi	r2,r2,255
   1e858:	1080201c 	xori	r2,r2,128
   1e85c:	10bfe004 	addi	r2,r2,-128
   1e860:	10801720 	cmpeqi	r2,r2,92
   1e864:	1000311e 	bne	r2,zero,1e92c <check_file_name_for_FAT16_compliance+0x15c>
   1e868:	e0bffa17 	ldw	r2,-24(fp)
   1e86c:	e0ffff17 	ldw	r3,-4(fp)
   1e870:	1885883a 	add	r2,r3,r2
   1e874:	10800003 	ldbu	r2,0(r2)
   1e878:	10803fcc 	andi	r2,r2,255
   1e87c:	1080201c 	xori	r2,r2,128
   1e880:	10bfe004 	addi	r2,r2,-128
   1e884:	10800be0 	cmpeqi	r2,r2,47
   1e888:	1000281e 	bne	r2,zero,1e92c <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1e88c:	e0fffa17 	ldw	r3,-24(fp)
   1e890:	e0bffc17 	ldw	r2,-16(fp)
   1e894:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1e898:	10800258 	cmpnei	r2,r2,9
   1e89c:	1000091e 	bne	r2,zero,1e8c4 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1e8a0:	e0bffa17 	ldw	r2,-24(fp)
   1e8a4:	e0ffff17 	ldw	r3,-4(fp)
   1e8a8:	1885883a 	add	r2,r3,r2
   1e8ac:	10800003 	ldbu	r2,0(r2)
   1e8b0:	10803fcc 	andi	r2,r2,255
   1e8b4:	1080201c 	xori	r2,r2,128
   1e8b8:	10bfe004 	addi	r2,r2,-128
   1e8bc:	10800b98 	cmpnei	r2,r2,46
   1e8c0:	10001a1e 	bne	r2,zero,1e92c <check_file_name_for_FAT16_compliance+0x15c>
   1e8c4:	e0fffb17 	ldw	r3,-20(fp)
   1e8c8:	e0bffc17 	ldw	r2,-16(fp)
   1e8cc:	18801926 	beq	r3,r2,1e934 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1e8d0:	e0fffa17 	ldw	r3,-24(fp)
   1e8d4:	e0bffc17 	ldw	r2,-16(fp)
   1e8d8:	1885c83a 	sub	r2,r3,r2
   1e8dc:	10800110 	cmplti	r2,r2,4
   1e8e0:	1000141e 	bne	r2,zero,1e934 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1e8e4:	e0bffa17 	ldw	r2,-24(fp)
   1e8e8:	e0ffff17 	ldw	r3,-4(fp)
   1e8ec:	1885883a 	add	r2,r3,r2
   1e8f0:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1e8f4:	10803fcc 	andi	r2,r2,255
   1e8f8:	1080201c 	xori	r2,r2,128
   1e8fc:	10bfe004 	addi	r2,r2,-128
   1e900:	10801720 	cmpeqi	r2,r2,92
   1e904:	10000b1e 	bne	r2,zero,1e934 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1e908:	e0bffa17 	ldw	r2,-24(fp)
   1e90c:	e0ffff17 	ldw	r3,-4(fp)
   1e910:	1885883a 	add	r2,r3,r2
   1e914:	10800003 	ldbu	r2,0(r2)
   1e918:	10803fcc 	andi	r2,r2,255
   1e91c:	1080201c 	xori	r2,r2,128
   1e920:	10bfe004 	addi	r2,r2,-128
   1e924:	10800be0 	cmpeqi	r2,r2,47
   1e928:	1000021e 	bne	r2,zero,1e934 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1e92c:	e03ffd15 	stw	zero,-12(fp)
            break;
   1e930:	00002706 	br	1e9d0 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1e934:	e0bffa17 	ldw	r2,-24(fp)
   1e938:	e0ffff17 	ldw	r3,-4(fp)
   1e93c:	1885883a 	add	r2,r3,r2
   1e940:	10800003 	ldbu	r2,0(r2)
   1e944:	10803fcc 	andi	r2,r2,255
   1e948:	1080201c 	xori	r2,r2,128
   1e94c:	10bfe004 	addi	r2,r2,-128
   1e950:	10801720 	cmpeqi	r2,r2,92
   1e954:	1000091e 	bne	r2,zero,1e97c <check_file_name_for_FAT16_compliance+0x1ac>
   1e958:	e0bffa17 	ldw	r2,-24(fp)
   1e95c:	e0ffff17 	ldw	r3,-4(fp)
   1e960:	1885883a 	add	r2,r3,r2
   1e964:	10800003 	ldbu	r2,0(r2)
   1e968:	10803fcc 	andi	r2,r2,255
   1e96c:	1080201c 	xori	r2,r2,128
   1e970:	10bfe004 	addi	r2,r2,-128
   1e974:	10800bd8 	cmpnei	r2,r2,47
   1e978:	1000041e 	bne	r2,zero,1e98c <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1e97c:	e0bffa17 	ldw	r2,-24(fp)
   1e980:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1e984:	e0bffa17 	ldw	r2,-24(fp)
   1e988:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   1e98c:	e0bffa17 	ldw	r2,-24(fp)
   1e990:	e0ffff17 	ldw	r3,-4(fp)
   1e994:	1885883a 	add	r2,r3,r2
   1e998:	10800003 	ldbu	r2,0(r2)
   1e99c:	10803fcc 	andi	r2,r2,255
   1e9a0:	1080201c 	xori	r2,r2,128
   1e9a4:	10bfe004 	addi	r2,r2,-128
   1e9a8:	10800b98 	cmpnei	r2,r2,46
   1e9ac:	1000021e 	bne	r2,zero,1e9b8 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1e9b0:	e0bffa17 	ldw	r2,-24(fp)
   1e9b4:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   1e9b8:	e0bffa17 	ldw	r2,-24(fp)
   1e9bc:	10800044 	addi	r2,r2,1
   1e9c0:	e0bffa15 	stw	r2,-24(fp)
   1e9c4:	e0fffa17 	ldw	r3,-24(fp)
   1e9c8:	e0bffe17 	ldw	r2,-8(fp)
   1e9cc:	18bf9016 	blt	r3,r2,1e810 <__alt_mem_Flash_flash_data+0xf401e810>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1e9d0:	e0bffe17 	ldw	r2,-8(fp)
   1e9d4:	10bfffc4 	addi	r2,r2,-1
   1e9d8:	e0ffff17 	ldw	r3,-4(fp)
   1e9dc:	1885883a 	add	r2,r3,r2
   1e9e0:	10800003 	ldbu	r2,0(r2)
   1e9e4:	10803fcc 	andi	r2,r2,255
   1e9e8:	1080201c 	xori	r2,r2,128
   1e9ec:	10bfe004 	addi	r2,r2,-128
   1e9f0:	10801720 	cmpeqi	r2,r2,92
   1e9f4:	10000a1e 	bne	r2,zero,1ea20 <check_file_name_for_FAT16_compliance+0x250>
   1e9f8:	e0bffe17 	ldw	r2,-8(fp)
   1e9fc:	10bfffc4 	addi	r2,r2,-1
   1ea00:	e0ffff17 	ldw	r3,-4(fp)
   1ea04:	1885883a 	add	r2,r3,r2
   1ea08:	10800003 	ldbu	r2,0(r2)
   1ea0c:	10803fcc 	andi	r2,r2,255
   1ea10:	1080201c 	xori	r2,r2,128
   1ea14:	10bfe004 	addi	r2,r2,-128
   1ea18:	10800bd8 	cmpnei	r2,r2,47
   1ea1c:	1000011e 	bne	r2,zero,1ea24 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1ea20:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   1ea24:	e0bffd17 	ldw	r2,-12(fp)
}
   1ea28:	e037883a 	mov	sp,fp
   1ea2c:	dfc00117 	ldw	ra,4(sp)
   1ea30:	df000017 	ldw	fp,0(sp)
   1ea34:	dec00204 	addi	sp,sp,8
   1ea38:	f800283a 	ret

0001ea3c <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1ea3c:	defffb04 	addi	sp,sp,-20
   1ea40:	dfc00415 	stw	ra,16(sp)
   1ea44:	df000315 	stw	fp,12(sp)
   1ea48:	df000304 	addi	fp,sp,12
   1ea4c:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   1ea50:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1ea54:	e13fff17 	ldw	r4,-4(fp)
   1ea58:	00047dc0 	call	47dc <strlen>
   1ea5c:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1ea60:	e03ffd15 	stw	zero,-12(fp)
   1ea64:	00001506 	br	1eabc <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1ea68:	e0bffd17 	ldw	r2,-12(fp)
   1ea6c:	e0ffff17 	ldw	r3,-4(fp)
   1ea70:	1885883a 	add	r2,r3,r2
   1ea74:	10800003 	ldbu	r2,0(r2)
   1ea78:	10803fcc 	andi	r2,r2,255
   1ea7c:	1080201c 	xori	r2,r2,128
   1ea80:	10bfe004 	addi	r2,r2,-128
   1ea84:	10801720 	cmpeqi	r2,r2,92
   1ea88:	10000f1e 	bne	r2,zero,1eac8 <get_dir_divider_location+0x8c>
   1ea8c:	e0bffd17 	ldw	r2,-12(fp)
   1ea90:	e0ffff17 	ldw	r3,-4(fp)
   1ea94:	1885883a 	add	r2,r3,r2
   1ea98:	10800003 	ldbu	r2,0(r2)
   1ea9c:	10803fcc 	andi	r2,r2,255
   1eaa0:	1080201c 	xori	r2,r2,128
   1eaa4:	10bfe004 	addi	r2,r2,-128
   1eaa8:	10800be0 	cmpeqi	r2,r2,47
   1eaac:	1000061e 	bne	r2,zero,1eac8 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   1eab0:	e0bffd17 	ldw	r2,-12(fp)
   1eab4:	10800044 	addi	r2,r2,1
   1eab8:	e0bffd15 	stw	r2,-12(fp)
   1eabc:	e0fffd17 	ldw	r3,-12(fp)
   1eac0:	e0bffe17 	ldw	r2,-8(fp)
   1eac4:	18bfe816 	blt	r3,r2,1ea68 <__alt_mem_Flash_flash_data+0xf401ea68>
        {
            break;
        }
    }
    
    if (index == length)
   1eac8:	e0fffd17 	ldw	r3,-12(fp)
   1eacc:	e0bffe17 	ldw	r2,-8(fp)
   1ead0:	1880021e 	bne	r3,r2,1eadc <get_dir_divider_location+0xa0>
    {
        index = -1;
   1ead4:	00bfffc4 	movi	r2,-1
   1ead8:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   1eadc:	e0bffd17 	ldw	r2,-12(fp)
}
   1eae0:	e037883a 	mov	sp,fp
   1eae4:	dfc00117 	ldw	ra,4(sp)
   1eae8:	df000017 	ldw	fp,0(sp)
   1eaec:	dec00204 	addi	sp,sp,8
   1eaf0:	f800283a 	ret

0001eaf4 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1eaf4:	defffa04 	addi	sp,sp,-24
   1eaf8:	df000515 	stw	fp,20(sp)
   1eafc:	df000504 	addi	fp,sp,20
   1eb00:	e13ffd15 	stw	r4,-12(fp)
   1eb04:	e17ffe15 	stw	r5,-8(fp)
   1eb08:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   1eb0c:	00800044 	movi	r2,1
   1eb10:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   1eb14:	e03ffc15 	stw	zero,-16(fp)
   1eb18:	00004606 	br	1ec34 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1eb1c:	e0fffd17 	ldw	r3,-12(fp)
   1eb20:	e0bffc17 	ldw	r2,-16(fp)
   1eb24:	1885883a 	add	r2,r3,r2
   1eb28:	10800003 	ldbu	r2,0(r2)
   1eb2c:	10803fcc 	andi	r2,r2,255
   1eb30:	10801870 	cmpltui	r2,r2,97
   1eb34:	1000101e 	bne	r2,zero,1eb78 <match_file_record_to_name_ext+0x84>
   1eb38:	e0fffd17 	ldw	r3,-12(fp)
   1eb3c:	e0bffc17 	ldw	r2,-16(fp)
   1eb40:	1885883a 	add	r2,r3,r2
   1eb44:	10800003 	ldbu	r2,0(r2)
   1eb48:	10803fcc 	andi	r2,r2,255
   1eb4c:	10801ee8 	cmpgeui	r2,r2,123
   1eb50:	1000091e 	bne	r2,zero,1eb78 <match_file_record_to_name_ext+0x84>
   1eb54:	e0fffd17 	ldw	r3,-12(fp)
   1eb58:	e0bffc17 	ldw	r2,-16(fp)
   1eb5c:	1885883a 	add	r2,r3,r2
   1eb60:	10800003 	ldbu	r2,0(r2)
   1eb64:	10bff804 	addi	r2,r2,-32
   1eb68:	10c03fcc 	andi	r3,r2,255
   1eb6c:	18c0201c 	xori	r3,r3,128
   1eb70:	18ffe004 	addi	r3,r3,-128
   1eb74:	00000706 	br	1eb94 <match_file_record_to_name_ext+0xa0>
   1eb78:	e0fffd17 	ldw	r3,-12(fp)
   1eb7c:	e0bffc17 	ldw	r2,-16(fp)
   1eb80:	1885883a 	add	r2,r3,r2
   1eb84:	10800003 	ldbu	r2,0(r2)
   1eb88:	10c03fcc 	andi	r3,r2,255
   1eb8c:	18c0201c 	xori	r3,r3,128
   1eb90:	18ffe004 	addi	r3,r3,-128
   1eb94:	e0bffc17 	ldw	r2,-16(fp)
   1eb98:	e13ffe17 	ldw	r4,-8(fp)
   1eb9c:	2085883a 	add	r2,r4,r2
   1eba0:	10800003 	ldbu	r2,0(r2)
   1eba4:	10803fcc 	andi	r2,r2,255
   1eba8:	1080201c 	xori	r2,r2,128
   1ebac:	10bfe004 	addi	r2,r2,-128
   1ebb0:	10801850 	cmplti	r2,r2,97
   1ebb4:	1000121e 	bne	r2,zero,1ec00 <match_file_record_to_name_ext+0x10c>
   1ebb8:	e0bffc17 	ldw	r2,-16(fp)
   1ebbc:	e13ffe17 	ldw	r4,-8(fp)
   1ebc0:	2085883a 	add	r2,r4,r2
   1ebc4:	10800003 	ldbu	r2,0(r2)
   1ebc8:	10803fcc 	andi	r2,r2,255
   1ebcc:	1080201c 	xori	r2,r2,128
   1ebd0:	10bfe004 	addi	r2,r2,-128
   1ebd4:	10801ec8 	cmpgei	r2,r2,123
   1ebd8:	1000091e 	bne	r2,zero,1ec00 <match_file_record_to_name_ext+0x10c>
   1ebdc:	e0bffc17 	ldw	r2,-16(fp)
   1ebe0:	e13ffe17 	ldw	r4,-8(fp)
   1ebe4:	2085883a 	add	r2,r4,r2
   1ebe8:	10800003 	ldbu	r2,0(r2)
   1ebec:	10bff804 	addi	r2,r2,-32
   1ebf0:	10803fcc 	andi	r2,r2,255
   1ebf4:	1080201c 	xori	r2,r2,128
   1ebf8:	10bfe004 	addi	r2,r2,-128
   1ebfc:	00000706 	br	1ec1c <match_file_record_to_name_ext+0x128>
   1ec00:	e0bffc17 	ldw	r2,-16(fp)
   1ec04:	e13ffe17 	ldw	r4,-8(fp)
   1ec08:	2085883a 	add	r2,r4,r2
   1ec0c:	10800003 	ldbu	r2,0(r2)
   1ec10:	10803fcc 	andi	r2,r2,255
   1ec14:	1080201c 	xori	r2,r2,128
   1ec18:	10bfe004 	addi	r2,r2,-128
   1ec1c:	18800226 	beq	r3,r2,1ec28 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1ec20:	e03ffb15 	stw	zero,-20(fp)
			break;
   1ec24:	00000606 	br	1ec40 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   1ec28:	e0bffc17 	ldw	r2,-16(fp)
   1ec2c:	10800044 	addi	r2,r2,1
   1ec30:	e0bffc15 	stw	r2,-16(fp)
   1ec34:	e0bffc17 	ldw	r2,-16(fp)
   1ec38:	10800210 	cmplti	r2,r2,8
   1ec3c:	103fb71e 	bne	r2,zero,1eb1c <__alt_mem_Flash_flash_data+0xf401eb1c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1ec40:	e03ffc15 	stw	zero,-16(fp)
   1ec44:	00004a06 	br	1ed70 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1ec48:	e0fffd17 	ldw	r3,-12(fp)
   1ec4c:	e0bffc17 	ldw	r2,-16(fp)
   1ec50:	1885883a 	add	r2,r3,r2
   1ec54:	10800204 	addi	r2,r2,8
   1ec58:	10800003 	ldbu	r2,0(r2)
   1ec5c:	10803fcc 	andi	r2,r2,255
   1ec60:	10801870 	cmpltui	r2,r2,97
   1ec64:	1000121e 	bne	r2,zero,1ecb0 <match_file_record_to_name_ext+0x1bc>
   1ec68:	e0fffd17 	ldw	r3,-12(fp)
   1ec6c:	e0bffc17 	ldw	r2,-16(fp)
   1ec70:	1885883a 	add	r2,r3,r2
   1ec74:	10800204 	addi	r2,r2,8
   1ec78:	10800003 	ldbu	r2,0(r2)
   1ec7c:	10803fcc 	andi	r2,r2,255
   1ec80:	10801ee8 	cmpgeui	r2,r2,123
   1ec84:	10000a1e 	bne	r2,zero,1ecb0 <match_file_record_to_name_ext+0x1bc>
   1ec88:	e0fffd17 	ldw	r3,-12(fp)
   1ec8c:	e0bffc17 	ldw	r2,-16(fp)
   1ec90:	1885883a 	add	r2,r3,r2
   1ec94:	10800204 	addi	r2,r2,8
   1ec98:	10800003 	ldbu	r2,0(r2)
   1ec9c:	10bff804 	addi	r2,r2,-32
   1eca0:	10c03fcc 	andi	r3,r2,255
   1eca4:	18c0201c 	xori	r3,r3,128
   1eca8:	18ffe004 	addi	r3,r3,-128
   1ecac:	00000806 	br	1ecd0 <match_file_record_to_name_ext+0x1dc>
   1ecb0:	e0fffd17 	ldw	r3,-12(fp)
   1ecb4:	e0bffc17 	ldw	r2,-16(fp)
   1ecb8:	1885883a 	add	r2,r3,r2
   1ecbc:	10800204 	addi	r2,r2,8
   1ecc0:	10800003 	ldbu	r2,0(r2)
   1ecc4:	10c03fcc 	andi	r3,r2,255
   1ecc8:	18c0201c 	xori	r3,r3,128
   1eccc:	18ffe004 	addi	r3,r3,-128
   1ecd0:	e0bffc17 	ldw	r2,-16(fp)
   1ecd4:	e13fff17 	ldw	r4,-4(fp)
   1ecd8:	2085883a 	add	r2,r4,r2
   1ecdc:	10800003 	ldbu	r2,0(r2)
   1ece0:	10803fcc 	andi	r2,r2,255
   1ece4:	1080201c 	xori	r2,r2,128
   1ece8:	10bfe004 	addi	r2,r2,-128
   1ecec:	10801850 	cmplti	r2,r2,97
   1ecf0:	1000121e 	bne	r2,zero,1ed3c <match_file_record_to_name_ext+0x248>
   1ecf4:	e0bffc17 	ldw	r2,-16(fp)
   1ecf8:	e13fff17 	ldw	r4,-4(fp)
   1ecfc:	2085883a 	add	r2,r4,r2
   1ed00:	10800003 	ldbu	r2,0(r2)
   1ed04:	10803fcc 	andi	r2,r2,255
   1ed08:	1080201c 	xori	r2,r2,128
   1ed0c:	10bfe004 	addi	r2,r2,-128
   1ed10:	10801ec8 	cmpgei	r2,r2,123
   1ed14:	1000091e 	bne	r2,zero,1ed3c <match_file_record_to_name_ext+0x248>
   1ed18:	e0bffc17 	ldw	r2,-16(fp)
   1ed1c:	e13fff17 	ldw	r4,-4(fp)
   1ed20:	2085883a 	add	r2,r4,r2
   1ed24:	10800003 	ldbu	r2,0(r2)
   1ed28:	10bff804 	addi	r2,r2,-32
   1ed2c:	10803fcc 	andi	r2,r2,255
   1ed30:	1080201c 	xori	r2,r2,128
   1ed34:	10bfe004 	addi	r2,r2,-128
   1ed38:	00000706 	br	1ed58 <match_file_record_to_name_ext+0x264>
   1ed3c:	e0bffc17 	ldw	r2,-16(fp)
   1ed40:	e13fff17 	ldw	r4,-4(fp)
   1ed44:	2085883a 	add	r2,r4,r2
   1ed48:	10800003 	ldbu	r2,0(r2)
   1ed4c:	10803fcc 	andi	r2,r2,255
   1ed50:	1080201c 	xori	r2,r2,128
   1ed54:	10bfe004 	addi	r2,r2,-128
   1ed58:	18800226 	beq	r3,r2,1ed64 <match_file_record_to_name_ext+0x270>
        {
            match = false;
   1ed5c:	e03ffb15 	stw	zero,-20(fp)
			break;
   1ed60:	00000606 	br	1ed7c <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1ed64:	e0bffc17 	ldw	r2,-16(fp)
   1ed68:	10800044 	addi	r2,r2,1
   1ed6c:	e0bffc15 	stw	r2,-16(fp)
   1ed70:	e0bffc17 	ldw	r2,-16(fp)
   1ed74:	108000d0 	cmplti	r2,r2,3
   1ed78:	103fb31e 	bne	r2,zero,1ec48 <__alt_mem_Flash_flash_data+0xf401ec48>
        {
            match = false;
			break;
        }
    }
	return match;
   1ed7c:	e0bffb17 	ldw	r2,-20(fp)
}
   1ed80:	e037883a 	mov	sp,fp
   1ed84:	df000017 	ldw	fp,0(sp)
   1ed88:	dec00104 	addi	sp,sp,4
   1ed8c:	f800283a 	ret

0001ed90 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1ed90:	deffe704 	addi	sp,sp,-100
   1ed94:	dfc01815 	stw	ra,96(sp)
   1ed98:	df001715 	stw	fp,92(sp)
   1ed9c:	df001704 	addi	fp,sp,92
   1eda0:	e13ffd15 	stw	r4,-12(fp)
   1eda4:	e17ffe15 	stw	r5,-8(fp)
   1eda8:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   1edac:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   1edb0:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1edb4:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1edb8:	e13ffd17 	ldw	r4,-12(fp)
   1edbc:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1edc0:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1edc4:	00012c06 	br	1f278 <get_home_directory_cluster_for_file+0x4e8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1edc8:	00800804 	movi	r2,32
   1edcc:	e0bff905 	stb	r2,-28(fp)
   1edd0:	00800804 	movi	r2,32
   1edd4:	e0bff945 	stb	r2,-27(fp)
   1edd8:	00800804 	movi	r2,32
   1eddc:	e0bff985 	stb	r2,-26(fp)
   1ede0:	00800804 	movi	r2,32
   1ede4:	e0bff9c5 	stb	r2,-25(fp)
   1ede8:	00800804 	movi	r2,32
   1edec:	e0bffa05 	stb	r2,-24(fp)
   1edf0:	00800804 	movi	r2,32
   1edf4:	e0bffa45 	stb	r2,-23(fp)
   1edf8:	00800804 	movi	r2,32
   1edfc:	e0bffa85 	stb	r2,-22(fp)
   1ee00:	00800804 	movi	r2,32
   1ee04:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1ee08:	00800804 	movi	r2,32
   1ee0c:	e0bffb05 	stb	r2,-20(fp)
   1ee10:	00800804 	movi	r2,32
   1ee14:	e0bffb45 	stb	r2,-19(fp)
   1ee18:	00800804 	movi	r2,32
   1ee1c:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   1ee20:	00bfffc4 	movi	r2,-1
   1ee24:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   1ee28:	e0bfea17 	ldw	r2,-88(fp)
   1ee2c:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1ee30:	e03fec15 	stw	zero,-80(fp)
   1ee34:	00002d06 	br	1eeec <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   1ee38:	e0ffec17 	ldw	r3,-80(fp)
   1ee3c:	e0bfed17 	ldw	r2,-76(fp)
   1ee40:	1885883a 	add	r2,r3,r2
   1ee44:	1007883a 	mov	r3,r2
   1ee48:	e0bffd17 	ldw	r2,-12(fp)
   1ee4c:	10c5883a 	add	r2,r2,r3
   1ee50:	10800003 	ldbu	r2,0(r2)
   1ee54:	10803fcc 	andi	r2,r2,255
   1ee58:	1080201c 	xori	r2,r2,128
   1ee5c:	10bfe004 	addi	r2,r2,-128
   1ee60:	10800b98 	cmpnei	r2,r2,46
   1ee64:	1000031e 	bne	r2,zero,1ee74 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   1ee68:	e0bfec17 	ldw	r2,-80(fp)
   1ee6c:	e0bfee15 	stw	r2,-72(fp)
   1ee70:	00001b06 	br	1eee0 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1ee74:	e0bfee17 	ldw	r2,-72(fp)
   1ee78:	10000c0e 	bge	r2,zero,1eeac <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   1ee7c:	e0ffec17 	ldw	r3,-80(fp)
   1ee80:	e0bfed17 	ldw	r2,-76(fp)
   1ee84:	1885883a 	add	r2,r3,r2
   1ee88:	1007883a 	mov	r3,r2
   1ee8c:	e0bffd17 	ldw	r2,-12(fp)
   1ee90:	10c5883a 	add	r2,r2,r3
   1ee94:	10c00003 	ldbu	r3,0(r2)
   1ee98:	e13ff904 	addi	r4,fp,-28
   1ee9c:	e0bfec17 	ldw	r2,-80(fp)
   1eea0:	2085883a 	add	r2,r4,r2
   1eea4:	10c00005 	stb	r3,0(r2)
   1eea8:	00000d06 	br	1eee0 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1eeac:	e0ffec17 	ldw	r3,-80(fp)
   1eeb0:	e0bfee17 	ldw	r2,-72(fp)
   1eeb4:	1885c83a 	sub	r2,r3,r2
   1eeb8:	e13fec17 	ldw	r4,-80(fp)
   1eebc:	e0ffed17 	ldw	r3,-76(fp)
   1eec0:	20c7883a 	add	r3,r4,r3
   1eec4:	1809883a 	mov	r4,r3
   1eec8:	e0fffd17 	ldw	r3,-12(fp)
   1eecc:	1907883a 	add	r3,r3,r4
   1eed0:	18c00003 	ldbu	r3,0(r3)
   1eed4:	e13ffb04 	addi	r4,fp,-20
   1eed8:	2085883a 	add	r2,r4,r2
   1eedc:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1eee0:	e0bfec17 	ldw	r2,-80(fp)
   1eee4:	10800044 	addi	r2,r2,1
   1eee8:	e0bfec15 	stw	r2,-80(fp)
   1eeec:	e0ffec17 	ldw	r3,-80(fp)
   1eef0:	e0bfeb17 	ldw	r2,-84(fp)
   1eef4:	18bfd016 	blt	r3,r2,1ee38 <__alt_mem_Flash_flash_data+0xf401ee38>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   1eef8:	e0bfea17 	ldw	r2,-88(fp)
   1eefc:	10005b1e 	bne	r2,zero,1f06c <get_home_directory_cluster_for_file+0x2dc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1ef00:	00800174 	movhi	r2,5
   1ef04:	10bce904 	addi	r2,r2,-3164
   1ef08:	1080050b 	ldhu	r2,20(r2)
   1ef0c:	10bfffcc 	andi	r2,r2,65535
   1ef10:	1006917a 	slli	r3,r2,5
   1ef14:	00800174 	movhi	r2,5
   1ef18:	10bce904 	addi	r2,r2,-3164
   1ef1c:	1080030b 	ldhu	r2,12(r2)
   1ef20:	10bfffcc 	andi	r2,r2,65535
   1ef24:	1885283a 	div	r2,r3,r2
   1ef28:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1ef2c:	e03ff015 	stw	zero,-64(fp)
   1ef30:	00003e06 	br	1f02c <get_home_directory_cluster_for_file+0x29c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1ef34:	00800174 	movhi	r2,5
   1ef38:	10bce904 	addi	r2,r2,-3164
   1ef3c:	10c01317 	ldw	r3,76(r2)
   1ef40:	e0bff017 	ldw	r2,-64(fp)
   1ef44:	1885883a 	add	r2,r3,r2
   1ef48:	1007883a 	mov	r3,r2
   1ef4c:	d0a85a17 	ldw	r2,-24216(gp)
   1ef50:	1809883a 	mov	r4,r3
   1ef54:	100b883a 	mov	r5,r2
   1ef58:	001d67c0 	call	1d67c <Read_Sector_Data>
   1ef5c:	10002e26 	beq	r2,zero,1f018 <get_home_directory_cluster_for_file+0x288>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1ef60:	e03ff115 	stw	zero,-60(fp)
   1ef64:	00002506 	br	1effc <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1ef68:	e0bff117 	ldw	r2,-60(fp)
   1ef6c:	1006917a 	slli	r3,r2,5
   1ef70:	e0bff017 	ldw	r2,-64(fp)
   1ef74:	1809883a 	mov	r4,r3
   1ef78:	e17fff17 	ldw	r5,-4(fp)
   1ef7c:	000d883a 	mov	r6,zero
   1ef80:	100f883a 	mov	r7,r2
   1ef84:	001da940 	call	1da94 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1ef88:	e0bfff17 	ldw	r2,-4(fp)
   1ef8c:	10800003 	ldbu	r2,0(r2)
   1ef90:	10803fcc 	andi	r2,r2,255
   1ef94:	10803960 	cmpeqi	r2,r2,229
   1ef98:	1000151e 	bne	r2,zero,1eff0 <get_home_directory_cluster_for_file+0x260>
   1ef9c:	e0bfff17 	ldw	r2,-4(fp)
   1efa0:	10800003 	ldbu	r2,0(r2)
   1efa4:	10803fcc 	andi	r2,r2,255
   1efa8:	10001126 	beq	r2,zero,1eff0 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1efac:	e0fff904 	addi	r3,fp,-28
   1efb0:	e0bffb04 	addi	r2,fp,-20
   1efb4:	e13fff17 	ldw	r4,-4(fp)
   1efb8:	180b883a 	mov	r5,r3
   1efbc:	100d883a 	mov	r6,r2
   1efc0:	001eaf40 	call	1eaf4 <match_file_record_to_name_ext>
   1efc4:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   1efc8:	e0bff817 	ldw	r2,-32(fp)
   1efcc:	10000826 	beq	r2,zero,1eff0 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   1efd0:	e0bfff17 	ldw	r2,-4(fp)
   1efd4:	1080058b 	ldhu	r2,22(r2)
   1efd8:	10bfffcc 	andi	r2,r2,65535
   1efdc:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1efe0:	e0bfff17 	ldw	r2,-4(fp)
   1efe4:	00c00044 	movi	r3,1
   1efe8:	10c00a15 	stw	r3,40(r2)
                                break;
   1efec:	00000606 	br	1f008 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1eff0:	e0bff117 	ldw	r2,-60(fp)
   1eff4:	10800044 	addi	r2,r2,1
   1eff8:	e0bff115 	stw	r2,-60(fp)
   1effc:	e0bff117 	ldw	r2,-60(fp)
   1f000:	10800410 	cmplti	r2,r2,16
   1f004:	103fd81e 	bne	r2,zero,1ef68 <__alt_mem_Flash_flash_data+0xf401ef68>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1f008:	e0ffef17 	ldw	r3,-68(fp)
   1f00c:	e0bfea17 	ldw	r2,-88(fp)
   1f010:	18800326 	beq	r3,r2,1f020 <get_home_directory_cluster_for_file+0x290>
   1f014:	00000106 	br	1f01c <get_home_directory_cluster_for_file+0x28c>
                        }
                    }
                }
                else
                {
                    break;
   1f018:	00000706 	br	1f038 <get_home_directory_cluster_for_file+0x2a8>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   1f01c:	00000606 	br	1f038 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1f020:	e0bff017 	ldw	r2,-64(fp)
   1f024:	10800044 	addi	r2,r2,1
   1f028:	e0bff015 	stw	r2,-64(fp)
   1f02c:	e0fff017 	ldw	r3,-64(fp)
   1f030:	e0bff717 	ldw	r2,-36(fp)
   1f034:	18bfbf16 	blt	r3,r2,1ef34 <__alt_mem_Flash_flash_data+0xf401ef34>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   1f038:	e0ffef17 	ldw	r3,-68(fp)
   1f03c:	e0bfea17 	ldw	r2,-88(fp)
   1f040:	18800826 	beq	r3,r2,1f064 <get_home_directory_cluster_for_file+0x2d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1f044:	e0bfef17 	ldw	r2,-68(fp)
   1f048:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1f04c:	e0ffed17 	ldw	r3,-76(fp)
   1f050:	e0bfeb17 	ldw	r2,-84(fp)
   1f054:	1885883a 	add	r2,r3,r2
   1f058:	10800044 	addi	r2,r2,1
   1f05c:	e0bfed15 	stw	r2,-76(fp)
   1f060:	00007b06 	br	1f250 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1f064:	0005883a 	mov	r2,zero
   1f068:	00008f06 	br	1f2a8 <get_home_directory_cluster_for_file+0x518>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1f06c:	e0bfea17 	ldw	r2,-88(fp)
   1f070:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f074:	e0bff417 	ldw	r2,-48(fp)
   1f078:	10ffff84 	addi	r3,r2,-2
   1f07c:	00800174 	movhi	r2,5
   1f080:	10bce904 	addi	r2,r2,-3164
   1f084:	10800383 	ldbu	r2,14(r2)
   1f088:	10803fcc 	andi	r2,r2,255
   1f08c:	1885383a 	mul	r2,r3,r2
   1f090:	1007883a 	mov	r3,r2
   1f094:	00800174 	movhi	r2,5
   1f098:	10bce904 	addi	r2,r2,-3164
   1f09c:	10801417 	ldw	r2,80(r2)
   1f0a0:	1885883a 	add	r2,r3,r2
   1f0a4:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f0a8:	e03ff215 	stw	zero,-56(fp)
   1f0ac:	00003806 	br	1f190 <get_home_directory_cluster_for_file+0x400>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f0b0:	e0fff217 	ldw	r3,-56(fp)
   1f0b4:	e0bff517 	ldw	r2,-44(fp)
   1f0b8:	1887883a 	add	r3,r3,r2
   1f0bc:	d0a85a17 	ldw	r2,-24216(gp)
   1f0c0:	1809883a 	mov	r4,r3
   1f0c4:	100b883a 	mov	r5,r2
   1f0c8:	001d67c0 	call	1d67c <Read_Sector_Data>
   1f0cc:	10002b26 	beq	r2,zero,1f17c <get_home_directory_cluster_for_file+0x3ec>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1f0d0:	e03ff315 	stw	zero,-52(fp)
   1f0d4:	00002206 	br	1f160 <get_home_directory_cluster_for_file+0x3d0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1f0d8:	e0bff317 	ldw	r2,-52(fp)
   1f0dc:	1008917a 	slli	r4,r2,5
   1f0e0:	e0fff417 	ldw	r3,-48(fp)
   1f0e4:	e0bff217 	ldw	r2,-56(fp)
   1f0e8:	e17fff17 	ldw	r5,-4(fp)
   1f0ec:	180d883a 	mov	r6,r3
   1f0f0:	100f883a 	mov	r7,r2
   1f0f4:	001da940 	call	1da94 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f0f8:	e0bfff17 	ldw	r2,-4(fp)
   1f0fc:	10800003 	ldbu	r2,0(r2)
   1f100:	10803fcc 	andi	r2,r2,255
   1f104:	10803960 	cmpeqi	r2,r2,229
   1f108:	1000121e 	bne	r2,zero,1f154 <get_home_directory_cluster_for_file+0x3c4>
   1f10c:	e0bfff17 	ldw	r2,-4(fp)
   1f110:	10800003 	ldbu	r2,0(r2)
   1f114:	10803fcc 	andi	r2,r2,255
   1f118:	10000e26 	beq	r2,zero,1f154 <get_home_directory_cluster_for_file+0x3c4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f11c:	e0fff904 	addi	r3,fp,-28
   1f120:	e0bffb04 	addi	r2,fp,-20
   1f124:	e13fff17 	ldw	r4,-4(fp)
   1f128:	180b883a 	mov	r5,r3
   1f12c:	100d883a 	mov	r6,r2
   1f130:	001eaf40 	call	1eaf4 <match_file_record_to_name_ext>
   1f134:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   1f138:	e0bff617 	ldw	r2,-40(fp)
   1f13c:	10000526 	beq	r2,zero,1f154 <get_home_directory_cluster_for_file+0x3c4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1f140:	e0bfff17 	ldw	r2,-4(fp)
   1f144:	1080058b 	ldhu	r2,22(r2)
   1f148:	10bfffcc 	andi	r2,r2,65535
   1f14c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   1f150:	00000606 	br	1f16c <get_home_directory_cluster_for_file+0x3dc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1f154:	e0bff317 	ldw	r2,-52(fp)
   1f158:	10800044 	addi	r2,r2,1
   1f15c:	e0bff315 	stw	r2,-52(fp)
   1f160:	e0bff317 	ldw	r2,-52(fp)
   1f164:	10800410 	cmplti	r2,r2,16
   1f168:	103fdb1e 	bne	r2,zero,1f0d8 <__alt_mem_Flash_flash_data+0xf401f0d8>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1f16c:	e0ffef17 	ldw	r3,-68(fp)
   1f170:	e0bfea17 	ldw	r2,-88(fp)
   1f174:	18800326 	beq	r3,r2,1f184 <get_home_directory_cluster_for_file+0x3f4>
   1f178:	00000106 	br	1f180 <get_home_directory_cluster_for_file+0x3f0>
                            }
                        }
                    }
                    else
                    {
                        break;
   1f17c:	00000a06 	br	1f1a8 <get_home_directory_cluster_for_file+0x418>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   1f180:	00000906 	br	1f1a8 <get_home_directory_cluster_for_file+0x418>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f184:	e0bff217 	ldw	r2,-56(fp)
   1f188:	10800044 	addi	r2,r2,1
   1f18c:	e0bff215 	stw	r2,-56(fp)
   1f190:	00800174 	movhi	r2,5
   1f194:	10bce904 	addi	r2,r2,-3164
   1f198:	10800383 	ldbu	r2,14(r2)
   1f19c:	10803fcc 	andi	r2,r2,255
   1f1a0:	e0fff217 	ldw	r3,-56(fp)
   1f1a4:	18bfc216 	blt	r3,r2,1f0b0 <__alt_mem_Flash_flash_data+0xf401f0b0>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1f1a8:	e0ffef17 	ldw	r3,-68(fp)
   1f1ac:	e0bfea17 	ldw	r2,-88(fp)
   1f1b0:	1880141e 	bne	r3,r2,1f204 <get_home_directory_cluster_for_file+0x474>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1f1b4:	e0ffef17 	ldw	r3,-68(fp)
   1f1b8:	e0bffc04 	addi	r2,fp,-16
   1f1bc:	1809883a 	mov	r4,r3
   1f1c0:	100b883a 	mov	r5,r2
   1f1c4:	001d7540 	call	1d754 <get_cluster_flag>
   1f1c8:	10000c26 	beq	r2,zero,1f1fc <get_home_directory_cluster_for_file+0x46c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1f1cc:	e0bffc0b 	ldhu	r2,-16(fp)
   1f1d0:	10bfffcc 	andi	r2,r2,65535
   1f1d4:	10fffe0c 	andi	r3,r2,65528
   1f1d8:	00bffe14 	movui	r2,65528
   1f1dc:	1880021e 	bne	r3,r2,1f1e8 <get_home_directory_cluster_for_file+0x458>
						{
							return false;
   1f1e0:	0005883a 	mov	r2,zero
   1f1e4:	00003006 	br	1f2a8 <get_home_directory_cluster_for_file+0x518>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1f1e8:	e0bffc0b 	ldhu	r2,-16(fp)
   1f1ec:	10bfffcc 	andi	r2,r2,65535
   1f1f0:	10bffe0c 	andi	r2,r2,65528
   1f1f4:	e0bfef15 	stw	r2,-68(fp)
   1f1f8:	00000206 	br	1f204 <get_home_directory_cluster_for_file+0x474>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1f1fc:	0005883a 	mov	r2,zero
   1f200:	00002906 	br	1f2a8 <get_home_directory_cluster_for_file+0x518>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1f204:	e0bff417 	ldw	r2,-48(fp)
   1f208:	00fffdd4 	movui	r3,65527
   1f20c:	18800316 	blt	r3,r2,1f21c <get_home_directory_cluster_for_file+0x48c>
   1f210:	e0ffef17 	ldw	r3,-68(fp)
   1f214:	e0bfea17 	ldw	r2,-88(fp)
   1f218:	18bf9626 	beq	r3,r2,1f074 <__alt_mem_Flash_flash_data+0xf401f074>
            if (new_cluster != home_dir_cluster)
   1f21c:	e0ffef17 	ldw	r3,-68(fp)
   1f220:	e0bfea17 	ldw	r2,-88(fp)
   1f224:	18800826 	beq	r3,r2,1f248 <get_home_directory_cluster_for_file+0x4b8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1f228:	e0bfef17 	ldw	r2,-68(fp)
   1f22c:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1f230:	e0ffed17 	ldw	r3,-76(fp)
   1f234:	e0bfeb17 	ldw	r2,-84(fp)
   1f238:	1885883a 	add	r2,r3,r2
   1f23c:	10800044 	addi	r2,r2,1
   1f240:	e0bfed15 	stw	r2,-76(fp)
   1f244:	00000206 	br	1f250 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1f248:	0005883a 	mov	r2,zero
   1f24c:	00001606 	br	1f2a8 <get_home_directory_cluster_for_file+0x518>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1f250:	e0bfed17 	ldw	r2,-76(fp)
   1f254:	e0fffd17 	ldw	r3,-12(fp)
   1f258:	1885883a 	add	r2,r3,r2
   1f25c:	1009883a 	mov	r4,r2
   1f260:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1f264:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   1f268:	e0bfeb17 	ldw	r2,-84(fp)
   1f26c:	1000020e 	bge	r2,zero,1f278 <get_home_directory_cluster_for_file+0x4e8>
        {
            // Directory has been located.
            result = true;
   1f270:	00800044 	movi	r2,1
   1f274:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   1f278:	e0bfeb17 	ldw	r2,-84(fp)
   1f27c:	00bed216 	blt	zero,r2,1edc8 <__alt_mem_Flash_flash_data+0xf401edc8>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1f280:	e0bffe17 	ldw	r2,-8(fp)
   1f284:	e0ffea17 	ldw	r3,-88(fp)
   1f288:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1f28c:	e0bfea17 	ldw	r2,-88(fp)
   1f290:	1000041e 	bne	r2,zero,1f2a4 <get_home_directory_cluster_for_file+0x514>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1f294:	e0bfff17 	ldw	r2,-4(fp)
   1f298:	10000a15 	stw	zero,40(r2)
		result = true;
   1f29c:	00800044 	movi	r2,1
   1f2a0:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   1f2a4:	e0bfe917 	ldw	r2,-92(fp)
}
   1f2a8:	e037883a 	mov	sp,fp
   1f2ac:	dfc00117 	ldw	ra,4(sp)
   1f2b0:	df000017 	ldw	fp,0(sp)
   1f2b4:	dec00204 	addi	sp,sp,8
   1f2b8:	f800283a 	ret

0001f2bc <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1f2bc:	deffe804 	addi	sp,sp,-96
   1f2c0:	dfc01715 	stw	ra,92(sp)
   1f2c4:	df001615 	stw	fp,88(sp)
   1f2c8:	df001604 	addi	fp,sp,88
   1f2cc:	e13ffd15 	stw	r4,-12(fp)
   1f2d0:	e17ffe15 	stw	r5,-8(fp)
   1f2d4:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   1f2d8:	e13ffe17 	ldw	r4,-8(fp)
   1f2dc:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1f2e0:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   1f2e4:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1f2e8:	00800804 	movi	r2,32
   1f2ec:	e0bff905 	stb	r2,-28(fp)
   1f2f0:	00800804 	movi	r2,32
   1f2f4:	e0bff945 	stb	r2,-27(fp)
   1f2f8:	00800804 	movi	r2,32
   1f2fc:	e0bff985 	stb	r2,-26(fp)
   1f300:	00800804 	movi	r2,32
   1f304:	e0bff9c5 	stb	r2,-25(fp)
   1f308:	00800804 	movi	r2,32
   1f30c:	e0bffa05 	stb	r2,-24(fp)
   1f310:	00800804 	movi	r2,32
   1f314:	e0bffa45 	stb	r2,-23(fp)
   1f318:	00800804 	movi	r2,32
   1f31c:	e0bffa85 	stb	r2,-22(fp)
   1f320:	00800804 	movi	r2,32
   1f324:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1f328:	00800804 	movi	r2,32
   1f32c:	e0bffb05 	stb	r2,-20(fp)
   1f330:	00800804 	movi	r2,32
   1f334:	e0bffb45 	stb	r2,-19(fp)
   1f338:	00800804 	movi	r2,32
   1f33c:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   1f340:	00bfffc4 	movi	r2,-1
   1f344:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   1f348:	e0bffd17 	ldw	r2,-12(fp)
   1f34c:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   1f350:	e13ffe17 	ldw	r4,-8(fp)
   1f354:	00047dc0 	call	47dc <strlen>
   1f358:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   1f35c:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1f360:	00000b06 	br	1f390 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   1f364:	e0ffeb17 	ldw	r3,-84(fp)
   1f368:	e0bfea17 	ldw	r2,-88(fp)
   1f36c:	1885883a 	add	r2,r3,r2
   1f370:	10800044 	addi	r2,r2,1
   1f374:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1f378:	e0bfeb17 	ldw	r2,-84(fp)
   1f37c:	e0fffe17 	ldw	r3,-8(fp)
   1f380:	1885883a 	add	r2,r3,r2
   1f384:	1009883a 	mov	r4,r2
   1f388:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1f38c:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   1f390:	e0bfea17 	ldw	r2,-88(fp)
   1f394:	00bff316 	blt	zero,r2,1f364 <__alt_mem_Flash_flash_data+0xf401f364>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1f398:	e0bfeb17 	ldw	r2,-84(fp)
   1f39c:	e0bfee15 	stw	r2,-72(fp)
   1f3a0:	00002706 	br	1f440 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   1f3a4:	e0bfee17 	ldw	r2,-72(fp)
   1f3a8:	e0fffe17 	ldw	r3,-8(fp)
   1f3ac:	1885883a 	add	r2,r3,r2
   1f3b0:	10800003 	ldbu	r2,0(r2)
   1f3b4:	10803fcc 	andi	r2,r2,255
   1f3b8:	1080201c 	xori	r2,r2,128
   1f3bc:	10bfe004 	addi	r2,r2,-128
   1f3c0:	10800b98 	cmpnei	r2,r2,46
   1f3c4:	1000031e 	bne	r2,zero,1f3d4 <find_file_in_directory+0x118>
        {
            ext_index = index;
   1f3c8:	e0bfee17 	ldw	r2,-72(fp)
   1f3cc:	e0bfec15 	stw	r2,-80(fp)
   1f3d0:	00001806 	br	1f434 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   1f3d4:	e0bfec17 	ldw	r2,-80(fp)
   1f3d8:	10000b0e 	bge	r2,zero,1f408 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   1f3dc:	e0ffee17 	ldw	r3,-72(fp)
   1f3e0:	e0bfeb17 	ldw	r2,-84(fp)
   1f3e4:	1885c83a 	sub	r2,r3,r2
   1f3e8:	e0ffee17 	ldw	r3,-72(fp)
   1f3ec:	e13ffe17 	ldw	r4,-8(fp)
   1f3f0:	20c7883a 	add	r3,r4,r3
   1f3f4:	18c00003 	ldbu	r3,0(r3)
   1f3f8:	e13ff904 	addi	r4,fp,-28
   1f3fc:	2085883a 	add	r2,r4,r2
   1f400:	10c00005 	stb	r3,0(r2)
   1f404:	00000b06 	br	1f434 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1f408:	e0ffee17 	ldw	r3,-72(fp)
   1f40c:	e0bfec17 	ldw	r2,-80(fp)
   1f410:	1885c83a 	sub	r2,r3,r2
   1f414:	10bfffc4 	addi	r2,r2,-1
   1f418:	e0ffee17 	ldw	r3,-72(fp)
   1f41c:	e13ffe17 	ldw	r4,-8(fp)
   1f420:	20c7883a 	add	r3,r4,r3
   1f424:	18c00003 	ldbu	r3,0(r3)
   1f428:	e13ffb04 	addi	r4,fp,-20
   1f42c:	2085883a 	add	r2,r4,r2
   1f430:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1f434:	e0bfee17 	ldw	r2,-72(fp)
   1f438:	10800044 	addi	r2,r2,1
   1f43c:	e0bfee15 	stw	r2,-72(fp)
   1f440:	e0ffee17 	ldw	r3,-72(fp)
   1f444:	e0bff417 	ldw	r2,-48(fp)
   1f448:	18bfd616 	blt	r3,r2,1f3a4 <__alt_mem_Flash_flash_data+0xf401f3a4>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1f44c:	e0bffd17 	ldw	r2,-12(fp)
   1f450:	1000491e 	bne	r2,zero,1f578 <find_file_in_directory+0x2bc>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1f454:	00800174 	movhi	r2,5
   1f458:	10bce904 	addi	r2,r2,-3164
   1f45c:	1080050b 	ldhu	r2,20(r2)
   1f460:	10bfffcc 	andi	r2,r2,65535
   1f464:	1006917a 	slli	r3,r2,5
   1f468:	00800174 	movhi	r2,5
   1f46c:	10bce904 	addi	r2,r2,-3164
   1f470:	1080030b 	ldhu	r2,12(r2)
   1f474:	10bfffcc 	andi	r2,r2,65535
   1f478:	1885283a 	div	r2,r3,r2
   1f47c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1f480:	e03ff015 	stw	zero,-64(fp)
   1f484:	00003806 	br	1f568 <find_file_in_directory+0x2ac>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1f488:	00800174 	movhi	r2,5
   1f48c:	10bce904 	addi	r2,r2,-3164
   1f490:	10c01317 	ldw	r3,76(r2)
   1f494:	e0bff017 	ldw	r2,-64(fp)
   1f498:	1885883a 	add	r2,r3,r2
   1f49c:	1007883a 	mov	r3,r2
   1f4a0:	d0a85a17 	ldw	r2,-24216(gp)
   1f4a4:	1809883a 	mov	r4,r3
   1f4a8:	100b883a 	mov	r5,r2
   1f4ac:	001d67c0 	call	1d67c <Read_Sector_Data>
   1f4b0:	10002826 	beq	r2,zero,1f554 <find_file_in_directory+0x298>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f4b4:	e03ff115 	stw	zero,-60(fp)
   1f4b8:	00002006 	br	1f53c <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1f4bc:	e0bff117 	ldw	r2,-60(fp)
   1f4c0:	1006917a 	slli	r3,r2,5
   1f4c4:	e0bff017 	ldw	r2,-64(fp)
   1f4c8:	1809883a 	mov	r4,r3
   1f4cc:	e17fff17 	ldw	r5,-4(fp)
   1f4d0:	000d883a 	mov	r6,zero
   1f4d4:	100f883a 	mov	r7,r2
   1f4d8:	001da940 	call	1da94 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f4dc:	e0bfff17 	ldw	r2,-4(fp)
   1f4e0:	10800003 	ldbu	r2,0(r2)
   1f4e4:	10803fcc 	andi	r2,r2,255
   1f4e8:	10803960 	cmpeqi	r2,r2,229
   1f4ec:	1000101e 	bne	r2,zero,1f530 <find_file_in_directory+0x274>
   1f4f0:	e0bfff17 	ldw	r2,-4(fp)
   1f4f4:	10800003 	ldbu	r2,0(r2)
   1f4f8:	10803fcc 	andi	r2,r2,255
   1f4fc:	10000c26 	beq	r2,zero,1f530 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f500:	e0fff904 	addi	r3,fp,-28
   1f504:	e0bffb04 	addi	r2,fp,-20
   1f508:	e13fff17 	ldw	r4,-4(fp)
   1f50c:	180b883a 	mov	r5,r3
   1f510:	100d883a 	mov	r6,r2
   1f514:	001eaf40 	call	1eaf4 <match_file_record_to_name_ext>
   1f518:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   1f51c:	e0bff817 	ldw	r2,-32(fp)
   1f520:	10000326 	beq	r2,zero,1f530 <find_file_in_directory+0x274>
                        {
                            result = true;
   1f524:	00800044 	movi	r2,1
   1f528:	e0bfef15 	stw	r2,-68(fp)
                            break;
   1f52c:	00000606 	br	1f548 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f530:	e0bff117 	ldw	r2,-60(fp)
   1f534:	10800044 	addi	r2,r2,1
   1f538:	e0bff115 	stw	r2,-60(fp)
   1f53c:	e0bff117 	ldw	r2,-60(fp)
   1f540:	10800410 	cmplti	r2,r2,16
   1f544:	103fdd1e 	bne	r2,zero,1f4bc <__alt_mem_Flash_flash_data+0xf401f4bc>
            }
            else
            {
                break;
            }
            if (result)
   1f548:	e0bfef17 	ldw	r2,-68(fp)
   1f54c:	10000326 	beq	r2,zero,1f55c <find_file_in_directory+0x2a0>
   1f550:	00000106 	br	1f558 <find_file_in_directory+0x29c>
                    }
                }
            }
            else
            {
                break;
   1f554:	00000706 	br	1f574 <find_file_in_directory+0x2b8>
            }
            if (result)
            {
                break;
   1f558:	00000606 	br	1f574 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1f55c:	e0bff017 	ldw	r2,-64(fp)
   1f560:	10800044 	addi	r2,r2,1
   1f564:	e0bff015 	stw	r2,-64(fp)
   1f568:	e0fff017 	ldw	r3,-64(fp)
   1f56c:	e0bff717 	ldw	r2,-36(fp)
   1f570:	18bfc516 	blt	r3,r2,1f488 <__alt_mem_Flash_flash_data+0xf401f488>
   1f574:	00006506 	br	1f70c <find_file_in_directory+0x450>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f578:	e0bfed17 	ldw	r2,-76(fp)
   1f57c:	10ffff84 	addi	r3,r2,-2
   1f580:	00800174 	movhi	r2,5
   1f584:	10bce904 	addi	r2,r2,-3164
   1f588:	10800383 	ldbu	r2,14(r2)
   1f58c:	10803fcc 	andi	r2,r2,255
   1f590:	1885383a 	mul	r2,r3,r2
   1f594:	1007883a 	mov	r3,r2
   1f598:	00800174 	movhi	r2,5
   1f59c:	10bce904 	addi	r2,r2,-3164
   1f5a0:	10801417 	ldw	r2,80(r2)
   1f5a4:	1885883a 	add	r2,r3,r2
   1f5a8:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f5ac:	e03ff215 	stw	zero,-56(fp)
   1f5b0:	00003506 	br	1f688 <find_file_in_directory+0x3cc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f5b4:	e0fff217 	ldw	r3,-56(fp)
   1f5b8:	e0bff517 	ldw	r2,-44(fp)
   1f5bc:	1887883a 	add	r3,r3,r2
   1f5c0:	d0a85a17 	ldw	r2,-24216(gp)
   1f5c4:	1809883a 	mov	r4,r3
   1f5c8:	100b883a 	mov	r5,r2
   1f5cc:	001d67c0 	call	1d67c <Read_Sector_Data>
   1f5d0:	10002826 	beq	r2,zero,1f674 <find_file_in_directory+0x3b8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1f5d4:	e03ff315 	stw	zero,-52(fp)
   1f5d8:	00002006 	br	1f65c <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1f5dc:	e0bff317 	ldw	r2,-52(fp)
   1f5e0:	1008917a 	slli	r4,r2,5
   1f5e4:	e0ffed17 	ldw	r3,-76(fp)
   1f5e8:	e0bff217 	ldw	r2,-56(fp)
   1f5ec:	e17fff17 	ldw	r5,-4(fp)
   1f5f0:	180d883a 	mov	r6,r3
   1f5f4:	100f883a 	mov	r7,r2
   1f5f8:	001da940 	call	1da94 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1f5fc:	e0bfff17 	ldw	r2,-4(fp)
   1f600:	10800003 	ldbu	r2,0(r2)
   1f604:	10803fcc 	andi	r2,r2,255
   1f608:	10803960 	cmpeqi	r2,r2,229
   1f60c:	1000101e 	bne	r2,zero,1f650 <find_file_in_directory+0x394>
   1f610:	e0bfff17 	ldw	r2,-4(fp)
   1f614:	10800003 	ldbu	r2,0(r2)
   1f618:	10803fcc 	andi	r2,r2,255
   1f61c:	10000c26 	beq	r2,zero,1f650 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1f620:	e0fff904 	addi	r3,fp,-28
   1f624:	e0bffb04 	addi	r2,fp,-20
   1f628:	e13fff17 	ldw	r4,-4(fp)
   1f62c:	180b883a 	mov	r5,r3
   1f630:	100d883a 	mov	r6,r2
   1f634:	001eaf40 	call	1eaf4 <match_file_record_to_name_ext>
   1f638:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   1f63c:	e0bff617 	ldw	r2,-40(fp)
   1f640:	10000326 	beq	r2,zero,1f650 <find_file_in_directory+0x394>
                            {                               
                                result = true;
   1f644:	00800044 	movi	r2,1
   1f648:	e0bfef15 	stw	r2,-68(fp)
                                break;
   1f64c:	00000606 	br	1f668 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1f650:	e0bff317 	ldw	r2,-52(fp)
   1f654:	10800044 	addi	r2,r2,1
   1f658:	e0bff315 	stw	r2,-52(fp)
   1f65c:	e0bff317 	ldw	r2,-52(fp)
   1f660:	10800410 	cmplti	r2,r2,16
   1f664:	103fdd1e 	bne	r2,zero,1f5dc <__alt_mem_Flash_flash_data+0xf401f5dc>
                }
                else
                {
                    break;
                }
                if (result)
   1f668:	e0bfef17 	ldw	r2,-68(fp)
   1f66c:	10000326 	beq	r2,zero,1f67c <find_file_in_directory+0x3c0>
   1f670:	00000106 	br	1f678 <find_file_in_directory+0x3bc>
                        }
                    }
                }
                else
                {
                    break;
   1f674:	00000a06 	br	1f6a0 <find_file_in_directory+0x3e4>
                }
                if (result)
                {
                    break;
   1f678:	00000906 	br	1f6a0 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f67c:	e0bff217 	ldw	r2,-56(fp)
   1f680:	10800044 	addi	r2,r2,1
   1f684:	e0bff215 	stw	r2,-56(fp)
   1f688:	00800174 	movhi	r2,5
   1f68c:	10bce904 	addi	r2,r2,-3164
   1f690:	10800383 	ldbu	r2,14(r2)
   1f694:	10803fcc 	andi	r2,r2,255
   1f698:	e0fff217 	ldw	r3,-56(fp)
   1f69c:	18bfc516 	blt	r3,r2,1f5b4 <__alt_mem_Flash_flash_data+0xf401f5b4>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1f6a0:	e0bfef17 	ldw	r2,-68(fp)
   1f6a4:	1000141e 	bne	r2,zero,1f6f8 <find_file_in_directory+0x43c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1f6a8:	e0ffed17 	ldw	r3,-76(fp)
   1f6ac:	e0bffc04 	addi	r2,fp,-16
   1f6b0:	1809883a 	mov	r4,r3
   1f6b4:	100b883a 	mov	r5,r2
   1f6b8:	001d7540 	call	1d754 <get_cluster_flag>
   1f6bc:	10000c26 	beq	r2,zero,1f6f0 <find_file_in_directory+0x434>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1f6c0:	e0bffc0b 	ldhu	r2,-16(fp)
   1f6c4:	10bfffcc 	andi	r2,r2,65535
   1f6c8:	10fffe0c 	andi	r3,r2,65528
   1f6cc:	00bffe14 	movui	r2,65528
   1f6d0:	1880021e 	bne	r3,r2,1f6dc <find_file_in_directory+0x420>
					{
						return false;
   1f6d4:	0005883a 	mov	r2,zero
   1f6d8:	00000d06 	br	1f710 <find_file_in_directory+0x454>
					}
					cluster = (new_cluster & 0x0000fff8);
   1f6dc:	e0bffc0b 	ldhu	r2,-16(fp)
   1f6e0:	10bfffcc 	andi	r2,r2,65535
   1f6e4:	10bffe0c 	andi	r2,r2,65528
   1f6e8:	e0bfed15 	stw	r2,-76(fp)
   1f6ec:	00000206 	br	1f6f8 <find_file_in_directory+0x43c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1f6f0:	0005883a 	mov	r2,zero
   1f6f4:	00000606 	br	1f710 <find_file_in_directory+0x454>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1f6f8:	e0bfed17 	ldw	r2,-76(fp)
   1f6fc:	00fffdd4 	movui	r3,65527
   1f700:	18800216 	blt	r3,r2,1f70c <find_file_in_directory+0x450>
   1f704:	e0bfef17 	ldw	r2,-68(fp)
   1f708:	103f9b26 	beq	r2,zero,1f578 <__alt_mem_Flash_flash_data+0xf401f578>
    }
    
    return result;   
   1f70c:	e0bfef17 	ldw	r2,-68(fp)
}
   1f710:	e037883a 	mov	sp,fp
   1f714:	dfc00117 	ldw	ra,4(sp)
   1f718:	df000017 	ldw	fp,0(sp)
   1f71c:	dec00204 	addi	sp,sp,8
   1f720:	f800283a 	ret

0001f724 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1f724:	defff504 	addi	sp,sp,-44
   1f728:	dfc00a15 	stw	ra,40(sp)
   1f72c:	df000915 	stw	fp,36(sp)
   1f730:	df000904 	addi	fp,sp,36
   1f734:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1f738:	00800174 	movhi	r2,5
   1f73c:	10bce904 	addi	r2,r2,-3164
   1f740:	10801117 	ldw	r2,68(r2)
   1f744:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   1f748:	00800084 	movi	r2,2
   1f74c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   1f750:	00bfffc4 	movi	r2,-1
   1f754:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   1f758:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1f75c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1f760:	00800174 	movhi	r2,5
   1f764:	10bce904 	addi	r2,r2,-3164
   1f768:	10801417 	ldw	r2,80(r2)
   1f76c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1f770:	00800174 	movhi	r2,5
   1f774:	10bce904 	addi	r2,r2,-3164
   1f778:	1080058b 	ldhu	r2,22(r2)
   1f77c:	10bfffcc 	andi	r2,r2,65535
   1f780:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1f784:	00800174 	movhi	r2,5
   1f788:	10bce904 	addi	r2,r2,-3164
   1f78c:	10800917 	ldw	r2,36(r2)
   1f790:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   1f794:	e0bffd17 	ldw	r2,-12(fp)
   1f798:	e0fffe17 	ldw	r3,-8(fp)
   1f79c:	18800b2e 	bgeu	r3,r2,1f7cc <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1f7a0:	e0fffd17 	ldw	r3,-12(fp)
   1f7a4:	e0bffc17 	ldw	r2,-16(fp)
   1f7a8:	1887c83a 	sub	r3,r3,r2
   1f7ac:	00800174 	movhi	r2,5
   1f7b0:	10bce904 	addi	r2,r2,-3164
   1f7b4:	10800383 	ldbu	r2,14(r2)
   1f7b8:	10803fcc 	andi	r2,r2,255
   1f7bc:	1885203a 	divu	r2,r3,r2
   1f7c0:	10800044 	addi	r2,r2,1
   1f7c4:	e0bffb15 	stw	r2,-20(fp)
   1f7c8:	00000a06 	br	1f7f4 <find_first_empty_cluster+0xd0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1f7cc:	e0fffe17 	ldw	r3,-8(fp)
   1f7d0:	e0bffc17 	ldw	r2,-16(fp)
   1f7d4:	1887c83a 	sub	r3,r3,r2
   1f7d8:	00800174 	movhi	r2,5
   1f7dc:	10bce904 	addi	r2,r2,-3164
   1f7e0:	10800383 	ldbu	r2,14(r2)
   1f7e4:	10803fcc 	andi	r2,r2,255
   1f7e8:	1885203a 	divu	r2,r3,r2
   1f7ec:	10800044 	addi	r2,r2,1
   1f7f0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1f7f4:	00001f06 	br	1f874 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1f7f8:	e0fff717 	ldw	r3,-36(fp)
   1f7fc:	d0a85a17 	ldw	r2,-24216(gp)
   1f800:	1809883a 	mov	r4,r3
   1f804:	100b883a 	mov	r5,r2
   1f808:	001d67c0 	call	1d67c <Read_Sector_Data>
   1f80c:	10001326 	beq	r2,zero,1f85c <find_first_empty_cluster+0x138>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1f810:	e0bff817 	ldw	r2,-32(fp)
   1f814:	10803fcc 	andi	r2,r2,255
   1f818:	1085883a 	add	r2,r2,r2
   1f81c:	1007883a 	mov	r3,r2
   1f820:	d0a85c17 	ldw	r2,-24208(gp)
   1f824:	10800a17 	ldw	r2,40(r2)
   1f828:	1885883a 	add	r2,r3,r2
   1f82c:	1080002b 	ldhuio	r2,0(r2)
   1f830:	10bfffcc 	andi	r2,r2,65535
   1f834:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   1f838:	e0bff90f 	ldh	r2,-28(fp)
   1f83c:	1000011e 	bne	r2,zero,1f844 <find_first_empty_cluster+0x120>
                {
                    // Free cluster found.
                    break;
   1f840:	00000606 	br	1f85c <find_first_empty_cluster+0x138>
                }
                else
                {
                    cluster_index++;
   1f844:	e0bff817 	ldw	r2,-32(fp)
   1f848:	10800044 	addi	r2,r2,1
   1f84c:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1f850:	e0bff817 	ldw	r2,-32(fp)
   1f854:	10803fcc 	andi	r2,r2,255
   1f858:	103fed1e 	bne	r2,zero,1f810 <__alt_mem_Flash_flash_data+0xf401f810>
        }
        if (cluster == 0)
   1f85c:	e0bff90f 	ldh	r2,-28(fp)
   1f860:	1000011e 	bne	r2,zero,1f868 <find_first_empty_cluster+0x144>
        {
            break;
   1f864:	00000806 	br	1f888 <find_first_empty_cluster+0x164>
        }
        sector++;
   1f868:	e0bff717 	ldw	r2,-36(fp)
   1f86c:	10800044 	addi	r2,r2,1
   1f870:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1f874:	00800174 	movhi	r2,5
   1f878:	10bce904 	addi	r2,r2,-3164
   1f87c:	10c01217 	ldw	r3,72(r2)
   1f880:	e0bff717 	ldw	r2,-36(fp)
   1f884:	18bfdc1e 	bne	r3,r2,1f7f8 <__alt_mem_Flash_flash_data+0xf401f7f8>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1f888:	e0bff90f 	ldh	r2,-28(fp)
   1f88c:	1000081e 	bne	r2,zero,1f8b0 <find_first_empty_cluster+0x18c>
   1f890:	e0bff90f 	ldh	r2,-28(fp)
   1f894:	e0fffb17 	ldw	r3,-20(fp)
   1f898:	18800536 	bltu	r3,r2,1f8b0 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
   1f89c:	e0bfff17 	ldw	r2,-4(fp)
   1f8a0:	e0fff817 	ldw	r3,-32(fp)
   1f8a4:	10c00015 	stw	r3,0(r2)
		result = true;
   1f8a8:	00800044 	movi	r2,1
   1f8ac:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   1f8b0:	e0bffa17 	ldw	r2,-24(fp)
}
   1f8b4:	e037883a 	mov	sp,fp
   1f8b8:	dfc00117 	ldw	ra,4(sp)
   1f8bc:	df000017 	ldw	fp,0(sp)
   1f8c0:	dec00204 	addi	sp,sp,8
   1f8c4:	f800283a 	ret

0001f8c8 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1f8c8:	defff604 	addi	sp,sp,-40
   1f8cc:	dfc00915 	stw	ra,36(sp)
   1f8d0:	df000815 	stw	fp,32(sp)
   1f8d4:	df000804 	addi	fp,sp,32
   1f8d8:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   1f8dc:	00bfffc4 	movi	r2,-1
   1f8e0:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   1f8e4:	e0bfff17 	ldw	r2,-4(fp)
   1f8e8:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1f8ec:	e0bff917 	ldw	r2,-28(fp)
   1f8f0:	10ffff84 	addi	r3,r2,-2
   1f8f4:	00800174 	movhi	r2,5
   1f8f8:	10bce904 	addi	r2,r2,-3164
   1f8fc:	10800383 	ldbu	r2,14(r2)
   1f900:	10803fcc 	andi	r2,r2,255
   1f904:	1885383a 	mul	r2,r3,r2
   1f908:	1007883a 	mov	r3,r2
   1f90c:	00800174 	movhi	r2,5
   1f910:	10bce904 	addi	r2,r2,-3164
   1f914:	10801417 	ldw	r2,80(r2)
   1f918:	1885883a 	add	r2,r3,r2
   1f91c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f920:	e03ffa15 	stw	zero,-24(fp)
   1f924:	00002e06 	br	1f9e0 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1f928:	e0fffa17 	ldw	r3,-24(fp)
   1f92c:	e0bffc17 	ldw	r2,-16(fp)
   1f930:	1887883a 	add	r3,r3,r2
   1f934:	d0a85a17 	ldw	r2,-24216(gp)
   1f938:	1809883a 	mov	r4,r3
   1f93c:	100b883a 	mov	r5,r2
   1f940:	001d67c0 	call	1d67c <Read_Sector_Data>
   1f944:	10002226 	beq	r2,zero,1f9d0 <find_first_empty_record_in_a_subdirectory+0x108>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f948:	e03ffb15 	stw	zero,-20(fp)
   1f94c:	00001c06 	br	1f9c0 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1f950:	e0bffb17 	ldw	r2,-20(fp)
   1f954:	1004917a 	slli	r2,r2,5
   1f958:	1007883a 	mov	r3,r2
   1f95c:	d0a85c17 	ldw	r2,-24208(gp)
   1f960:	10800a17 	ldw	r2,40(r2)
   1f964:	1885883a 	add	r2,r3,r2
   1f968:	10800023 	ldbuio	r2,0(r2)
   1f96c:	10803fcc 	andi	r2,r2,255
   1f970:	10803fcc 	andi	r2,r2,255
   1f974:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1f978:	e0bffd0b 	ldhu	r2,-12(fp)
   1f97c:	10803960 	cmpeqi	r2,r2,229
   1f980:	1000021e 	bne	r2,zero,1f98c <find_first_empty_record_in_a_subdirectory+0xc4>
   1f984:	e0bffd0b 	ldhu	r2,-12(fp)
   1f988:	10000a1e 	bne	r2,zero,1f9b4 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1f98c:	e0bffa17 	ldw	r2,-24(fp)
   1f990:	1006913a 	slli	r3,r2,4
   1f994:	e0bffb17 	ldw	r2,-20(fp)
   1f998:	1885883a 	add	r2,r3,r2
   1f99c:	1006943a 	slli	r3,r2,16
   1f9a0:	e0bff917 	ldw	r2,-28(fp)
   1f9a4:	1884b03a 	or	r2,r3,r2
   1f9a8:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1f9ac:	e0bff817 	ldw	r2,-32(fp)
   1f9b0:	00005306 	br	1fb00 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1f9b4:	e0bffb17 	ldw	r2,-20(fp)
   1f9b8:	10800044 	addi	r2,r2,1
   1f9bc:	e0bffb15 	stw	r2,-20(fp)
   1f9c0:	e0bffb17 	ldw	r2,-20(fp)
   1f9c4:	10800410 	cmplti	r2,r2,16
   1f9c8:	103fe11e 	bne	r2,zero,1f950 <__alt_mem_Flash_flash_data+0xf401f950>
   1f9cc:	00000106 	br	1f9d4 <find_first_empty_record_in_a_subdirectory+0x10c>
                    }
                }
            }
            else
            {
                break;
   1f9d0:	00000906 	br	1f9f8 <find_first_empty_record_in_a_subdirectory+0x130>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1f9d4:	e0bffa17 	ldw	r2,-24(fp)
   1f9d8:	10800044 	addi	r2,r2,1
   1f9dc:	e0bffa15 	stw	r2,-24(fp)
   1f9e0:	00800174 	movhi	r2,5
   1f9e4:	10bce904 	addi	r2,r2,-3164
   1f9e8:	10800383 	ldbu	r2,14(r2)
   1f9ec:	10803fcc 	andi	r2,r2,255
   1f9f0:	e0fffa17 	ldw	r3,-24(fp)
   1f9f4:	18bfcc16 	blt	r3,r2,1f928 <__alt_mem_Flash_flash_data+0xf401f928>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1f9f8:	e0bff817 	ldw	r2,-32(fp)
   1f9fc:	1000390e 	bge	r2,zero,1fae4 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1fa00:	e0fff917 	ldw	r3,-28(fp)
   1fa04:	e0bffd84 	addi	r2,fp,-10
   1fa08:	1809883a 	mov	r4,r3
   1fa0c:	100b883a 	mov	r5,r2
   1fa10:	001d7540 	call	1d754 <get_cluster_flag>
   1fa14:	10003126 	beq	r2,zero,1fadc <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1fa18:	e0bffd8b 	ldhu	r2,-10(fp)
   1fa1c:	10bfffcc 	andi	r2,r2,65535
   1fa20:	10fffe0c 	andi	r3,r2,65528
   1fa24:	00bffe14 	movui	r2,65528
   1fa28:	18802e1e 	bne	r3,r2,1fae4 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1fa2c:	e0bffe04 	addi	r2,fp,-8
   1fa30:	1009883a 	mov	r4,r2
   1fa34:	001f7240 	call	1f724 <find_first_empty_cluster>
   1fa38:	10002326 	beq	r2,zero,1fac8 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1fa3c:	e0fff917 	ldw	r3,-28(fp)
   1fa40:	e0bffe17 	ldw	r2,-8(fp)
   1fa44:	10bfffcc 	andi	r2,r2,65535
   1fa48:	10a0001c 	xori	r2,r2,32768
   1fa4c:	10a00004 	addi	r2,r2,-32768
   1fa50:	1809883a 	mov	r4,r3
   1fa54:	100b883a 	mov	r5,r2
   1fa58:	01800044 	movi	r6,1
   1fa5c:	001d8080 	call	1d808 <mark_cluster>
   1fa60:	10001926 	beq	r2,zero,1fac8 <find_first_empty_record_in_a_subdirectory+0x200>
   1fa64:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1fa68:	1009883a 	mov	r4,r2
   1fa6c:	017fffc4 	movi	r5,-1
   1fa70:	01800044 	movi	r6,1
   1fa74:	001d8080 	call	1d808 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1fa78:	10001326 	beq	r2,zero,1fac8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1fa7c:	e0fff917 	ldw	r3,-28(fp)
   1fa80:	e0bffe17 	ldw	r2,-8(fp)
   1fa84:	10bfffcc 	andi	r2,r2,65535
   1fa88:	10a0001c 	xori	r2,r2,32768
   1fa8c:	10a00004 	addi	r2,r2,-32768
   1fa90:	1809883a 	mov	r4,r3
   1fa94:	100b883a 	mov	r5,r2
   1fa98:	000d883a 	mov	r6,zero
   1fa9c:	001d8080 	call	1d808 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1faa0:	10000926 	beq	r2,zero,1fac8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1faa4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1faa8:	1009883a 	mov	r4,r2
   1faac:	017fffc4 	movi	r5,-1
   1fab0:	000d883a 	mov	r6,zero
   1fab4:	001d8080 	call	1d808 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1fab8:	10000326 	beq	r2,zero,1fac8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   1fabc:	001d6300 	call	1d630 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1fac0:	e0bffe17 	ldw	r2,-8(fp)
   1fac4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1fac8:	e0bffd8b 	ldhu	r2,-10(fp)
   1facc:	10bfffcc 	andi	r2,r2,65535
   1fad0:	10bffe0c 	andi	r2,r2,65528
   1fad4:	e0bff915 	stw	r2,-28(fp)
   1fad8:	00000206 	br	1fae4 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1fadc:	00bfffc4 	movi	r2,-1
   1fae0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1fae4:	e0bff917 	ldw	r2,-28(fp)
   1fae8:	00fffdd4 	movui	r3,65527
   1faec:	18800316 	blt	r3,r2,1fafc <find_first_empty_record_in_a_subdirectory+0x234>
   1faf0:	e0bff817 	ldw	r2,-32(fp)
   1faf4:	10bfffe0 	cmpeqi	r2,r2,-1
   1faf8:	103f7c1e 	bne	r2,zero,1f8ec <__alt_mem_Flash_flash_data+0xf401f8ec>
    return result; 
   1fafc:	e0bff817 	ldw	r2,-32(fp)
}
   1fb00:	e037883a 	mov	sp,fp
   1fb04:	dfc00117 	ldw	ra,4(sp)
   1fb08:	df000017 	ldw	fp,0(sp)
   1fb0c:	dec00204 	addi	sp,sp,8
   1fb10:	f800283a 	ret

0001fb14 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1fb14:	defff904 	addi	sp,sp,-28
   1fb18:	dfc00615 	stw	ra,24(sp)
   1fb1c:	df000515 	stw	fp,20(sp)
   1fb20:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1fb24:	00800174 	movhi	r2,5
   1fb28:	10bce904 	addi	r2,r2,-3164
   1fb2c:	1080050b 	ldhu	r2,20(r2)
   1fb30:	10bfffcc 	andi	r2,r2,65535
   1fb34:	1006917a 	slli	r3,r2,5
   1fb38:	00800174 	movhi	r2,5
   1fb3c:	10bce904 	addi	r2,r2,-3164
   1fb40:	1080030b 	ldhu	r2,12(r2)
   1fb44:	10bfffcc 	andi	r2,r2,65535
   1fb48:	1885283a 	div	r2,r3,r2
   1fb4c:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1fb50:	00bfffc4 	movi	r2,-1
   1fb54:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1fb58:	e03ffb15 	stw	zero,-20(fp)
   1fb5c:	00002f06 	br	1fc1c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1fb60:	00800174 	movhi	r2,5
   1fb64:	10bce904 	addi	r2,r2,-3164
   1fb68:	10c01317 	ldw	r3,76(r2)
   1fb6c:	e0bffb17 	ldw	r2,-20(fp)
   1fb70:	1885883a 	add	r2,r3,r2
   1fb74:	1007883a 	mov	r3,r2
   1fb78:	d0a85a17 	ldw	r2,-24216(gp)
   1fb7c:	1809883a 	mov	r4,r3
   1fb80:	100b883a 	mov	r5,r2
   1fb84:	001d67c0 	call	1d67c <Read_Sector_Data>
   1fb88:	10002026 	beq	r2,zero,1fc0c <find_first_empty_record_in_root_directory+0xf8>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1fb8c:	e03ffc15 	stw	zero,-16(fp)
   1fb90:	00001a06 	br	1fbfc <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1fb94:	e0bffc17 	ldw	r2,-16(fp)
   1fb98:	1004917a 	slli	r2,r2,5
   1fb9c:	1007883a 	mov	r3,r2
   1fba0:	d0a85c17 	ldw	r2,-24208(gp)
   1fba4:	10800a17 	ldw	r2,40(r2)
   1fba8:	1885883a 	add	r2,r3,r2
   1fbac:	10800023 	ldbuio	r2,0(r2)
   1fbb0:	10803fcc 	andi	r2,r2,255
   1fbb4:	10803fcc 	andi	r2,r2,255
   1fbb8:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1fbbc:	e0bfff0b 	ldhu	r2,-4(fp)
   1fbc0:	10803960 	cmpeqi	r2,r2,229
   1fbc4:	1000021e 	bne	r2,zero,1fbd0 <find_first_empty_record_in_root_directory+0xbc>
   1fbc8:	e0bfff0b 	ldhu	r2,-4(fp)
   1fbcc:	1000081e 	bne	r2,zero,1fbf0 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1fbd0:	e0bffb17 	ldw	r2,-20(fp)
   1fbd4:	1006913a 	slli	r3,r2,4
   1fbd8:	e0bffc17 	ldw	r2,-16(fp)
   1fbdc:	1885883a 	add	r2,r3,r2
   1fbe0:	1004943a 	slli	r2,r2,16
   1fbe4:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   1fbe8:	e0bffe17 	ldw	r2,-8(fp)
   1fbec:	00000f06 	br	1fc2c <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1fbf0:	e0bffc17 	ldw	r2,-16(fp)
   1fbf4:	10800044 	addi	r2,r2,1
   1fbf8:	e0bffc15 	stw	r2,-16(fp)
   1fbfc:	e0bffc17 	ldw	r2,-16(fp)
   1fc00:	10800410 	cmplti	r2,r2,16
   1fc04:	103fe31e 	bne	r2,zero,1fb94 <__alt_mem_Flash_flash_data+0xf401fb94>
   1fc08:	00000106 	br	1fc10 <find_first_empty_record_in_root_directory+0xfc>
                }
            }
        }
        else
        {
            break;
   1fc0c:	00000606 	br	1fc28 <find_first_empty_record_in_root_directory+0x114>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1fc10:	e0bffb17 	ldw	r2,-20(fp)
   1fc14:	10800044 	addi	r2,r2,1
   1fc18:	e0bffb15 	stw	r2,-20(fp)
   1fc1c:	e0fffb17 	ldw	r3,-20(fp)
   1fc20:	e0bffd17 	ldw	r2,-12(fp)
   1fc24:	18bfce16 	blt	r3,r2,1fb60 <__alt_mem_Flash_flash_data+0xf401fb60>
        else
        {
            break;
        }
    }
    return result;
   1fc28:	e0bffe17 	ldw	r2,-8(fp)
}
   1fc2c:	e037883a 	mov	sp,fp
   1fc30:	dfc00117 	ldw	ra,4(sp)
   1fc34:	df000017 	ldw	fp,0(sp)
   1fc38:	dec00204 	addi	sp,sp,8
   1fc3c:	f800283a 	ret

0001fc40 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1fc40:	defffa04 	addi	sp,sp,-24
   1fc44:	df000515 	stw	fp,20(sp)
   1fc48:	df000504 	addi	fp,sp,20
   1fc4c:	e13ffd15 	stw	r4,-12(fp)
   1fc50:	e17ffe15 	stw	r5,-8(fp)
   1fc54:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   1fc58:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1fc5c:	e03ffb15 	stw	zero,-20(fp)
   1fc60:	00002506 	br	1fcf8 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1fc64:	e0bffc17 	ldw	r2,-16(fp)
   1fc68:	e0fffd17 	ldw	r3,-12(fp)
   1fc6c:	1885883a 	add	r2,r3,r2
   1fc70:	10800003 	ldbu	r2,0(r2)
   1fc74:	10803fcc 	andi	r2,r2,255
   1fc78:	1080201c 	xori	r2,r2,128
   1fc7c:	10bfe004 	addi	r2,r2,-128
   1fc80:	10800ba0 	cmpeqi	r2,r2,46
   1fc84:	1000141e 	bne	r2,zero,1fcd8 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1fc88:	e0bffb17 	ldw	r2,-20(fp)
   1fc8c:	e0fffe17 	ldw	r3,-8(fp)
   1fc90:	1885883a 	add	r2,r3,r2
   1fc94:	e0fffc17 	ldw	r3,-16(fp)
   1fc98:	e13ffd17 	ldw	r4,-12(fp)
   1fc9c:	20c7883a 	add	r3,r4,r3
   1fca0:	18c00003 	ldbu	r3,0(r3)
   1fca4:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1fca8:	e0bffc17 	ldw	r2,-16(fp)
   1fcac:	e0fffd17 	ldw	r3,-12(fp)
   1fcb0:	1885883a 	add	r2,r3,r2
   1fcb4:	10800003 	ldbu	r2,0(r2)
   1fcb8:	10803fcc 	andi	r2,r2,255
   1fcbc:	1080201c 	xori	r2,r2,128
   1fcc0:	10bfe004 	addi	r2,r2,-128
   1fcc4:	10000926 	beq	r2,zero,1fcec <convert_filename_to_name_extension+0xac>
   1fcc8:	e0bffc17 	ldw	r2,-16(fp)
   1fccc:	10800044 	addi	r2,r2,1
   1fcd0:	e0bffc15 	stw	r2,-16(fp)
   1fcd4:	00000506 	br	1fcec <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1fcd8:	e0bffb17 	ldw	r2,-20(fp)
   1fcdc:	e0fffe17 	ldw	r3,-8(fp)
   1fce0:	1885883a 	add	r2,r3,r2
   1fce4:	00c00804 	movi	r3,32
   1fce8:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1fcec:	e0bffb17 	ldw	r2,-20(fp)
   1fcf0:	10800044 	addi	r2,r2,1
   1fcf4:	e0bffb15 	stw	r2,-20(fp)
   1fcf8:	e0bffb17 	ldw	r2,-20(fp)
   1fcfc:	10800210 	cmplti	r2,r2,8
   1fd00:	103fd81e 	bne	r2,zero,1fc64 <__alt_mem_Flash_flash_data+0xf401fc64>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   1fd04:	e0bffc17 	ldw	r2,-16(fp)
   1fd08:	e0fffd17 	ldw	r3,-12(fp)
   1fd0c:	1885883a 	add	r2,r3,r2
   1fd10:	10800003 	ldbu	r2,0(r2)
   1fd14:	10803fcc 	andi	r2,r2,255
   1fd18:	1080201c 	xori	r2,r2,128
   1fd1c:	10bfe004 	addi	r2,r2,-128
   1fd20:	10800b98 	cmpnei	r2,r2,46
   1fd24:	1000031e 	bne	r2,zero,1fd34 <convert_filename_to_name_extension+0xf4>
   1fd28:	e0bffc17 	ldw	r2,-16(fp)
   1fd2c:	10800044 	addi	r2,r2,1
   1fd30:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1fd34:	e03ffb15 	stw	zero,-20(fp)
   1fd38:	00001c06 	br	1fdac <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1fd3c:	e0bffc17 	ldw	r2,-16(fp)
   1fd40:	e0fffd17 	ldw	r3,-12(fp)
   1fd44:	1885883a 	add	r2,r3,r2
   1fd48:	10800003 	ldbu	r2,0(r2)
   1fd4c:	10803fcc 	andi	r2,r2,255
   1fd50:	1080201c 	xori	r2,r2,128
   1fd54:	10bfe004 	addi	r2,r2,-128
   1fd58:	10000c26 	beq	r2,zero,1fd8c <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1fd5c:	e0bffb17 	ldw	r2,-20(fp)
   1fd60:	e0ffff17 	ldw	r3,-4(fp)
   1fd64:	1885883a 	add	r2,r3,r2
   1fd68:	e0fffc17 	ldw	r3,-16(fp)
   1fd6c:	e13ffd17 	ldw	r4,-12(fp)
   1fd70:	20c7883a 	add	r3,r4,r3
   1fd74:	18c00003 	ldbu	r3,0(r3)
   1fd78:	10c00005 	stb	r3,0(r2)
            local++;
   1fd7c:	e0bffc17 	ldw	r2,-16(fp)
   1fd80:	10800044 	addi	r2,r2,1
   1fd84:	e0bffc15 	stw	r2,-16(fp)
   1fd88:	00000506 	br	1fda0 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1fd8c:	e0bffb17 	ldw	r2,-20(fp)
   1fd90:	e0ffff17 	ldw	r3,-4(fp)
   1fd94:	1885883a 	add	r2,r3,r2
   1fd98:	00c00804 	movi	r3,32
   1fd9c:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   1fda0:	e0bffb17 	ldw	r2,-20(fp)
   1fda4:	10800044 	addi	r2,r2,1
   1fda8:	e0bffb15 	stw	r2,-20(fp)
   1fdac:	e0bffb17 	ldw	r2,-20(fp)
   1fdb0:	108000d0 	cmplti	r2,r2,3
   1fdb4:	103fe11e 	bne	r2,zero,1fd3c <__alt_mem_Flash_flash_data+0xf401fd3c>
        {
            extension[counter] = ' ';
        }
    }

}
   1fdb8:	e037883a 	mov	sp,fp
   1fdbc:	df000017 	ldw	fp,0(sp)
   1fdc0:	dec00104 	addi	sp,sp,4
   1fdc4:	f800283a 	ret

0001fdc8 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1fdc8:	defff504 	addi	sp,sp,-44
   1fdcc:	dfc00a15 	stw	ra,40(sp)
   1fdd0:	df000915 	stw	fp,36(sp)
   1fdd4:	df000904 	addi	fp,sp,36
   1fdd8:	e13ffd15 	stw	r4,-12(fp)
   1fddc:	e17ffe15 	stw	r5,-8(fp)
   1fde0:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   1fde4:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1fde8:	e0bffc04 	addi	r2,fp,-16
   1fdec:	1009883a 	mov	r4,r2
   1fdf0:	001f7240 	call	1f724 <find_first_empty_cluster>
   1fdf4:	10009f26 	beq	r2,zero,20074 <create_file+0x2ac>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1fdf8:	e0bfff17 	ldw	r2,-4(fp)
   1fdfc:	10800a17 	ldw	r2,40(r2)
   1fe00:	1000031e 	bne	r2,zero,1fe10 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1fe04:	001fb140 	call	1fb14 <find_first_empty_record_in_root_directory>
   1fe08:	e0bff815 	stw	r2,-32(fp)
   1fe0c:	00000606 	br	1fe28 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1fe10:	e0bfff17 	ldw	r2,-4(fp)
   1fe14:	1080058b 	ldhu	r2,22(r2)
   1fe18:	10bfffcc 	andi	r2,r2,65535
   1fe1c:	1009883a 	mov	r4,r2
   1fe20:	001f8c80 	call	1f8c8 <find_first_empty_record_in_a_subdirectory>
   1fe24:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1fe28:	e0bff817 	ldw	r2,-32(fp)
   1fe2c:	10009116 	blt	r2,zero,20074 <create_file+0x2ac>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1fe30:	e13ffd17 	ldw	r4,-12(fp)
   1fe34:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1fe38:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   1fe3c:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1fe40:	00000b06 	br	1fe70 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1fe44:	e0fffa17 	ldw	r3,-24(fp)
   1fe48:	e0bff917 	ldw	r2,-28(fp)
   1fe4c:	1885883a 	add	r2,r3,r2
   1fe50:	10800044 	addi	r2,r2,1
   1fe54:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1fe58:	e0bffa17 	ldw	r2,-24(fp)
   1fe5c:	e0fffd17 	ldw	r3,-12(fp)
   1fe60:	1885883a 	add	r2,r3,r2
   1fe64:	1009883a 	mov	r4,r2
   1fe68:	001ea3c0 	call	1ea3c <get_dir_divider_location>
   1fe6c:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1fe70:	e0bff917 	ldw	r2,-28(fp)
   1fe74:	00bff316 	blt	zero,r2,1fe44 <__alt_mem_Flash_flash_data+0xf401fe44>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1fe78:	e0bffa17 	ldw	r2,-24(fp)
   1fe7c:	e0fffd17 	ldw	r3,-12(fp)
   1fe80:	1889883a 	add	r4,r3,r2
   1fe84:	e0fffe17 	ldw	r3,-8(fp)
   1fe88:	e0bffe17 	ldw	r2,-8(fp)
   1fe8c:	10800204 	addi	r2,r2,8
   1fe90:	180b883a 	mov	r5,r3
   1fe94:	100d883a 	mov	r6,r2
   1fe98:	001fc400 	call	1fc40 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1fe9c:	e0bffe17 	ldw	r2,-8(fp)
   1fea0:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1fea4:	e0bffe17 	ldw	r2,-8(fp)
   1fea8:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1feac:	e0bffe17 	ldw	r2,-8(fp)
   1feb0:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1feb4:	e0bffe17 	ldw	r2,-8(fp)
   1feb8:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1febc:	e0bffe17 	ldw	r2,-8(fp)
   1fec0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1fec4:	e0bffe17 	ldw	r2,-8(fp)
   1fec8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1fecc:	e0bffc17 	ldw	r2,-16(fp)
   1fed0:	1007883a 	mov	r3,r2
   1fed4:	e0bffe17 	ldw	r2,-8(fp)
   1fed8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1fedc:	e0bffe17 	ldw	r2,-8(fp)
   1fee0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1fee4:	e0fffc17 	ldw	r3,-16(fp)
   1fee8:	e0bffe17 	ldw	r2,-8(fp)
   1feec:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1fef0:	e0bffe17 	ldw	r2,-8(fp)
   1fef4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1fef8:	e0bffe17 	ldw	r2,-8(fp)
   1fefc:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1ff00:	e0bff817 	ldw	r2,-32(fp)
   1ff04:	10ffffcc 	andi	r3,r2,65535
   1ff08:	e0bffe17 	ldw	r2,-8(fp)
   1ff0c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1ff10:	e0bff817 	ldw	r2,-32(fp)
   1ff14:	1004d43a 	srli	r2,r2,16
   1ff18:	1000010e 	bge	r2,zero,1ff20 <create_file+0x158>
   1ff1c:	108003c4 	addi	r2,r2,15
   1ff20:	1005d13a 	srai	r2,r2,4
   1ff24:	1007883a 	mov	r3,r2
   1ff28:	e0bffe17 	ldw	r2,-8(fp)
   1ff2c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1ff30:	e0bff817 	ldw	r2,-32(fp)
   1ff34:	1004d43a 	srli	r2,r2,16
   1ff38:	1007883a 	mov	r3,r2
   1ff3c:	00a00034 	movhi	r2,32768
   1ff40:	108003c4 	addi	r2,r2,15
   1ff44:	1884703a 	and	r2,r3,r2
   1ff48:	1000040e 	bge	r2,zero,1ff5c <create_file+0x194>
   1ff4c:	10bfffc4 	addi	r2,r2,-1
   1ff50:	00fffc04 	movi	r3,-16
   1ff54:	10c4b03a 	or	r2,r2,r3
   1ff58:	10800044 	addi	r2,r2,1
   1ff5c:	1004917a 	slli	r2,r2,5
   1ff60:	1007883a 	mov	r3,r2
   1ff64:	e0bffe17 	ldw	r2,-8(fp)
   1ff68:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1ff6c:	e0bfff17 	ldw	r2,-4(fp)
   1ff70:	1080058b 	ldhu	r2,22(r2)
   1ff74:	10ffffcc 	andi	r3,r2,65535
   1ff78:	e0bffe17 	ldw	r2,-8(fp)
   1ff7c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1ff80:	e0bffe17 	ldw	r2,-8(fp)
   1ff84:	00c00044 	movi	r3,1
   1ff88:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1ff8c:	e0bffe17 	ldw	r2,-8(fp)
   1ff90:	00c00044 	movi	r3,1
   1ff94:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1ff98:	e0bffe17 	ldw	r2,-8(fp)
   1ff9c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1ffa0:	1000071e 	bne	r2,zero,1ffc0 <create_file+0x1f8>
   1ffa4:	00800174 	movhi	r2,5
   1ffa8:	10bce904 	addi	r2,r2,-3164
   1ffac:	10c01317 	ldw	r3,76(r2)
   1ffb0:	e0bffe17 	ldw	r2,-8(fp)
   1ffb4:	10800b17 	ldw	r2,44(r2)
   1ffb8:	1885883a 	add	r2,r3,r2
   1ffbc:	00000f06 	br	1fffc <create_file+0x234>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1ffc0:	00800174 	movhi	r2,5
   1ffc4:	10bce904 	addi	r2,r2,-3164
   1ffc8:	10c01417 	ldw	r3,80(r2)
   1ffcc:	e0bffe17 	ldw	r2,-8(fp)
   1ffd0:	10800a17 	ldw	r2,40(r2)
   1ffd4:	113fff84 	addi	r4,r2,-2
   1ffd8:	00800174 	movhi	r2,5
   1ffdc:	10bce904 	addi	r2,r2,-3164
   1ffe0:	10800383 	ldbu	r2,14(r2)
   1ffe4:	10803fcc 	andi	r2,r2,255
   1ffe8:	2085383a 	mul	r2,r4,r2
   1ffec:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1fff0:	e0bffe17 	ldw	r2,-8(fp)
   1fff4:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1fff8:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1fffc:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   20000:	e0fffb17 	ldw	r3,-20(fp)
   20004:	d0a85a17 	ldw	r2,-24216(gp)
   20008:	1809883a 	mov	r4,r3
   2000c:	100b883a 	mov	r5,r2
   20010:	001d67c0 	call	1d67c <Read_Sector_Data>
   20014:	10001726 	beq	r2,zero,20074 <create_file+0x2ac>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   20018:	e0bffe17 	ldw	r2,-8(fp)
   2001c:	10800c0b 	ldhu	r2,48(r2)
   20020:	10bfffcc 	andi	r2,r2,65535
   20024:	10a0001c 	xori	r2,r2,32768
   20028:	10a00004 	addi	r2,r2,-32768
   2002c:	1009883a 	mov	r4,r2
   20030:	e17ffe17 	ldw	r5,-8(fp)
   20034:	001dd100 	call	1dd10 <Write_File_Record_At_Offset>
   20038:	10000e26 	beq	r2,zero,20074 <create_file+0x2ac>
                {
                    Save_Modified_Sector();
   2003c:	001d6300 	call	1d630 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   20040:	e0bffc17 	ldw	r2,-16(fp)
   20044:	1009883a 	mov	r4,r2
   20048:	017fffc4 	movi	r5,-1
   2004c:	01800044 	movi	r6,1
   20050:	001d8080 	call	1d808 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   20054:	e0bffc17 	ldw	r2,-16(fp)
   20058:	1009883a 	mov	r4,r2
   2005c:	017fffc4 	movi	r5,-1
   20060:	000d883a 	mov	r6,zero
   20064:	001d8080 	call	1d808 <mark_cluster>
   20068:	10000226 	beq	r2,zero,20074 <create_file+0x2ac>
                    {
                        result = true;
   2006c:	00800044 	movi	r2,1
   20070:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   20074:	e0bff717 	ldw	r2,-36(fp)
}
   20078:	e037883a 	mov	sp,fp
   2007c:	dfc00117 	ldw	ra,4(sp)
   20080:	df000017 	ldw	fp,0(sp)
   20084:	dec00204 	addi	sp,sp,8
   20088:	f800283a 	ret

0002008c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   2008c:	defffb04 	addi	sp,sp,-20
   20090:	df000415 	stw	fp,16(sp)
   20094:	df000404 	addi	fp,sp,16
   20098:	e13ffe15 	stw	r4,-8(fp)
   2009c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   200a0:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   200a4:	e03ffc15 	stw	zero,-16(fp)
   200a8:	00001506 	br	20100 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   200ac:	e0fffe17 	ldw	r3,-8(fp)
   200b0:	e0bffc17 	ldw	r2,-16(fp)
   200b4:	1885883a 	add	r2,r3,r2
   200b8:	10800003 	ldbu	r2,0(r2)
   200bc:	10803fcc 	andi	r2,r2,255
   200c0:	10800820 	cmpeqi	r2,r2,32
   200c4:	10000b1e 	bne	r2,zero,200f4 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   200c8:	e0bffd17 	ldw	r2,-12(fp)
   200cc:	e0ffff17 	ldw	r3,-4(fp)
   200d0:	1885883a 	add	r2,r3,r2
   200d4:	e13ffe17 	ldw	r4,-8(fp)
   200d8:	e0fffc17 	ldw	r3,-16(fp)
   200dc:	20c7883a 	add	r3,r4,r3
   200e0:	18c00003 	ldbu	r3,0(r3)
   200e4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   200e8:	e0bffd17 	ldw	r2,-12(fp)
   200ec:	10800044 	addi	r2,r2,1
   200f0:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   200f4:	e0bffc17 	ldw	r2,-16(fp)
   200f8:	10800044 	addi	r2,r2,1
   200fc:	e0bffc15 	stw	r2,-16(fp)
   20100:	e0bffc17 	ldw	r2,-16(fp)
   20104:	10800210 	cmplti	r2,r2,8
   20108:	103fe81e 	bne	r2,zero,200ac <__alt_mem_Flash_flash_data+0xf40200ac>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   2010c:	e0bffe17 	ldw	r2,-8(fp)
   20110:	10800203 	ldbu	r2,8(r2)
   20114:	10803fcc 	andi	r2,r2,255
   20118:	10800820 	cmpeqi	r2,r2,32
   2011c:	1000241e 	bne	r2,zero,201b0 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   20120:	e0bffd17 	ldw	r2,-12(fp)
   20124:	e0ffff17 	ldw	r3,-4(fp)
   20128:	1885883a 	add	r2,r3,r2
   2012c:	00c00b84 	movi	r3,46
   20130:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   20134:	e0bffd17 	ldw	r2,-12(fp)
   20138:	10800044 	addi	r2,r2,1
   2013c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   20140:	e03ffc15 	stw	zero,-16(fp)
   20144:	00001706 	br	201a4 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   20148:	e0fffe17 	ldw	r3,-8(fp)
   2014c:	e0bffc17 	ldw	r2,-16(fp)
   20150:	1885883a 	add	r2,r3,r2
   20154:	10800204 	addi	r2,r2,8
   20158:	10800003 	ldbu	r2,0(r2)
   2015c:	10803fcc 	andi	r2,r2,255
   20160:	10800820 	cmpeqi	r2,r2,32
   20164:	10000c1e 	bne	r2,zero,20198 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   20168:	e0bffd17 	ldw	r2,-12(fp)
   2016c:	e0ffff17 	ldw	r3,-4(fp)
   20170:	1885883a 	add	r2,r3,r2
   20174:	e13ffe17 	ldw	r4,-8(fp)
   20178:	e0fffc17 	ldw	r3,-16(fp)
   2017c:	20c7883a 	add	r3,r4,r3
   20180:	18c00204 	addi	r3,r3,8
   20184:	18c00003 	ldbu	r3,0(r3)
   20188:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   20198:	e0bffc17 	ldw	r2,-16(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffc15 	stw	r2,-16(fp)
   201a4:	e0bffc17 	ldw	r2,-16(fp)
   201a8:	108000d0 	cmplti	r2,r2,3
   201ac:	103fe61e 	bne	r2,zero,20148 <__alt_mem_Flash_flash_data+0xf4020148>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   201b0:	e0bffd17 	ldw	r2,-12(fp)
   201b4:	e0ffff17 	ldw	r3,-4(fp)
   201b8:	1885883a 	add	r2,r3,r2
   201bc:	10000005 	stb	zero,0(r2)
}
   201c0:	e037883a 	mov	sp,fp
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00104 	addi	sp,sp,4
   201cc:	f800283a 	ret

000201d0 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   201d0:	defffc04 	addi	sp,sp,-16
   201d4:	dfc00315 	stw	ra,12(sp)
   201d8:	df000215 	stw	fp,8(sp)
   201dc:	df000204 	addi	fp,sp,8
   201e0:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   201e4:	e13fff17 	ldw	r4,-4(fp)
   201e8:	014000b4 	movhi	r5,2
   201ec:	295fd004 	addi	r5,r5,32576
   201f0:	002400c0 	call	2400c <alt_find_dev>
   201f4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   201f8:	e0bffe17 	ldw	r2,-8(fp)
   201fc:	10001e26 	beq	r2,zero,20278 <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   20200:	e0bffe17 	ldw	r2,-8(fp)
   20204:	10800a17 	ldw	r2,40(r2)
   20208:	10808d04 	addi	r2,r2,564
   2020c:	d0a85415 	stw	r2,-24240(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   20210:	e0bffe17 	ldw	r2,-8(fp)
   20214:	10800a17 	ldw	r2,40(r2)
   20218:	10808904 	addi	r2,r2,548
   2021c:	d0a85515 	stw	r2,-24236(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   20220:	e0bffe17 	ldw	r2,-8(fp)
   20224:	10800a17 	ldw	r2,40(r2)
   20228:	10808404 	addi	r2,r2,528
   2022c:	d0a85615 	stw	r2,-24232(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   20230:	e0bffe17 	ldw	r2,-8(fp)
   20234:	10800a17 	ldw	r2,40(r2)
   20238:	10808c04 	addi	r2,r2,560
   2023c:	d0a85715 	stw	r2,-24228(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   20240:	e0bffe17 	ldw	r2,-8(fp)
   20244:	10800a17 	ldw	r2,40(r2)
   20248:	10808b04 	addi	r2,r2,556
   2024c:	d0a85815 	stw	r2,-24224(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   20250:	e0bffe17 	ldw	r2,-8(fp)
   20254:	10800a17 	ldw	r2,40(r2)
   20258:	d0a85915 	stw	r2,-24220(gp)
		device_pointer = dev;
   2025c:	e0bffe17 	ldw	r2,-8(fp)
   20260:	d0a85c15 	stw	r2,-24208(gp)
		initialized = false;
   20264:	d0285215 	stw	zero,-24248(gp)
		is_sd_card_formated_as_FAT16 = false;
   20268:	d0285315 	stw	zero,-24244(gp)
		search_data.valid = false;
   2026c:	00800174 	movhi	r2,5
   20270:	10bce404 	addi	r2,r2,-3184
   20274:	10000415 	stw	zero,16(r2)
	}
	return dev;
   20278:	e0bffe17 	ldw	r2,-8(fp)
}
   2027c:	e037883a 	mov	sp,fp
   20280:	dfc00117 	ldw	ra,4(sp)
   20284:	df000017 	ldw	fp,0(sp)
   20288:	dec00204 	addi	sp,sp,8
   2028c:	f800283a 	ret

00020290 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   20290:	defffd04 	addi	sp,sp,-12
   20294:	df000215 	stw	fp,8(sp)
   20298:	df000204 	addi	fp,sp,8
    bool result = false;
   2029c:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   202a0:	d0a85c17 	ldw	r2,-24208(gp)
   202a4:	10000826 	beq	r2,zero,202c8 <alt_up_sd_card_is_Present+0x38>
   202a8:	d0a85417 	ldw	r2,-24240(gp)
   202ac:	1080002b 	ldhuio	r2,0(r2)
   202b0:	10bfffcc 	andi	r2,r2,65535
   202b4:	1080008c 	andi	r2,r2,2
   202b8:	10000326 	beq	r2,zero,202c8 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   202bc:	00800044 	movi	r2,1
   202c0:	e0bffe15 	stw	r2,-8(fp)
   202c4:	00001e06 	br	20340 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   202c8:	d0a85217 	ldw	r2,-24248(gp)
   202cc:	10800058 	cmpnei	r2,r2,1
   202d0:	10001b1e 	bne	r2,zero,20340 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   202d4:	d0285215 	stw	zero,-24248(gp)
		search_data.valid = false;
   202d8:	00800174 	movhi	r2,5
   202dc:	10bce404 	addi	r2,r2,-3184
   202e0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   202e4:	d0285315 	stw	zero,-24244(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   202e8:	e03fff15 	stw	zero,-4(fp)
   202ec:	00001106 	br	20334 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   202f0:	00800174 	movhi	r2,5
   202f4:	10bcfe04 	addi	r2,r2,-3080
   202f8:	e0ffff17 	ldw	r3,-4(fp)
   202fc:	180691ba 	slli	r3,r3,6
   20300:	18c00f04 	addi	r3,r3,60
   20304:	10c5883a 	add	r2,r2,r3
   20308:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   2030c:	00800174 	movhi	r2,5
   20310:	10bcfe04 	addi	r2,r2,-3080
   20314:	e0ffff17 	ldw	r3,-4(fp)
   20318:	180691ba 	slli	r3,r3,6
   2031c:	18c00e04 	addi	r3,r3,56
   20320:	10c5883a 	add	r2,r2,r3
   20324:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   20328:	e0bfff17 	ldw	r2,-4(fp)
   2032c:	10800044 	addi	r2,r2,1
   20330:	e0bfff15 	stw	r2,-4(fp)
   20334:	e0bfff17 	ldw	r2,-4(fp)
   20338:	10800510 	cmplti	r2,r2,20
   2033c:	103fec1e 	bne	r2,zero,202f0 <__alt_mem_Flash_flash_data+0xf40202f0>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   20340:	e0bffe17 	ldw	r2,-8(fp)
}
   20344:	e037883a 	mov	sp,fp
   20348:	df000017 	ldw	fp,0(sp)
   2034c:	dec00104 	addi	sp,sp,4
   20350:	f800283a 	ret

00020354 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   20354:	defffd04 	addi	sp,sp,-12
   20358:	dfc00215 	stw	ra,8(sp)
   2035c:	df000115 	stw	fp,4(sp)
   20360:	df000104 	addi	fp,sp,4
	bool result = false;
   20364:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   20368:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   2036c:	10000c26 	beq	r2,zero,203a0 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   20370:	d0a85217 	ldw	r2,-24248(gp)
   20374:	1000071e 	bne	r2,zero,20394 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   20378:	001e6240 	call	1e624 <Look_for_FAT16>
   2037c:	d0a85315 	stw	r2,-24244(gp)
			initialized = is_sd_card_formated_as_FAT16;
   20380:	d0a85317 	ldw	r2,-24244(gp)
   20384:	d0a85215 	stw	r2,-24248(gp)
			search_data.valid = false;
   20388:	00800174 	movhi	r2,5
   2038c:	10bce404 	addi	r2,r2,-3184
   20390:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   20394:	d0a85317 	ldw	r2,-24244(gp)
   20398:	e0bfff15 	stw	r2,-4(fp)
   2039c:	00000206 	br	203a8 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   203a0:	d0285215 	stw	zero,-24248(gp)
		is_sd_card_formated_as_FAT16 = false;
   203a4:	d0285315 	stw	zero,-24244(gp)
	}

	return result;
   203a8:	e0bfff17 	ldw	r2,-4(fp)
}
   203ac:	e037883a 	mov	sp,fp
   203b0:	dfc00117 	ldw	ra,4(sp)
   203b4:	df000017 	ldw	fp,0(sp)
   203b8:	dec00204 	addi	sp,sp,8
   203bc:	f800283a 	ret

000203c0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   203c0:	deffea04 	addi	sp,sp,-88
   203c4:	dfc01515 	stw	ra,84(sp)
   203c8:	df001415 	stw	fp,80(sp)
   203cc:	df001404 	addi	fp,sp,80
   203d0:	e13ffe15 	stw	r4,-8(fp)
   203d4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   203d8:	00800084 	movi	r2,2
   203dc:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   203e0:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   203e4:	10002426 	beq	r2,zero,20478 <alt_up_sd_card_find_first+0xb8>
   203e8:	d0a85317 	ldw	r2,-24244(gp)
   203ec:	10002226 	beq	r2,zero,20478 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   203f0:	e0ffed04 	addi	r3,fp,-76
   203f4:	e0bfee04 	addi	r2,fp,-72
   203f8:	e13ffe17 	ldw	r4,-8(fp)
   203fc:	180b883a 	mov	r5,r3
   20400:	100d883a 	mov	r6,r2
   20404:	001ed900 	call	1ed90 <get_home_directory_cluster_for_file>
   20408:	10001926 	beq	r2,zero,20470 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   2040c:	e0bfed17 	ldw	r2,-76(fp)
   20410:	1007883a 	mov	r3,r2
   20414:	00800174 	movhi	r2,5
   20418:	10bce404 	addi	r2,r2,-3184
   2041c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   20420:	e0bfed17 	ldw	r2,-76(fp)
   20424:	1007883a 	mov	r3,r2
   20428:	00800174 	movhi	r2,5
   2042c:	10bce404 	addi	r2,r2,-3184
   20430:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   20434:	00800174 	movhi	r2,5
   20438:	10bce404 	addi	r2,r2,-3184
   2043c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   20440:	00800174 	movhi	r2,5
   20444:	10bce404 	addi	r2,r2,-3184
   20448:	00ffffc4 	movi	r3,-1
   2044c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   20450:	00800174 	movhi	r2,5
   20454:	10bce404 	addi	r2,r2,-3184
   20458:	00c00044 	movi	r3,1
   2045c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   20460:	e13fff17 	ldw	r4,-4(fp)
   20464:	00204900 	call	20490 <alt_up_sd_card_find_next>
   20468:	e0bfec0d 	sth	r2,-80(fp)
   2046c:	00000206 	br	20478 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   20470:	00800044 	movi	r2,1
   20474:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   20478:	e0bfec0b 	ldhu	r2,-80(fp)
}
   2047c:	e037883a 	mov	sp,fp
   20480:	dfc00117 	ldw	ra,4(sp)
   20484:	df000017 	ldw	fp,0(sp)
   20488:	dec00204 	addi	sp,sp,8
   2048c:	f800283a 	ret

00020490 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   20490:	deffe404 	addi	sp,sp,-112
   20494:	dfc01b15 	stw	ra,108(sp)
   20498:	df001a15 	stw	fp,104(sp)
   2049c:	df001a04 	addi	fp,sp,104
   204a0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   204a4:	00800084 	movi	r2,2
   204a8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   204ac:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   204b0:	1000dc26 	beq	r2,zero,20824 <alt_up_sd_card_find_next+0x394>
   204b4:	d0a85317 	ldw	r2,-24244(gp)
   204b8:	1000da26 	beq	r2,zero,20824 <alt_up_sd_card_find_next+0x394>
	{
		if (search_data.valid)
   204bc:	00800174 	movhi	r2,5
   204c0:	10bce404 	addi	r2,r2,-3184
   204c4:	10800417 	ldw	r2,16(r2)
   204c8:	1000d426 	beq	r2,zero,2081c <alt_up_sd_card_find_next+0x38c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   204cc:	00800174 	movhi	r2,5
   204d0:	10bce404 	addi	r2,r2,-3184
   204d4:	10800117 	ldw	r2,4(r2)
   204d8:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   204dc:	e0bfe717 	ldw	r2,-100(fp)
   204e0:	1000551e 	bne	r2,zero,20638 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   204e4:	00800174 	movhi	r2,5
   204e8:	10bce904 	addi	r2,r2,-3164
   204ec:	1080050b 	ldhu	r2,20(r2)
   204f0:	10bfffcc 	andi	r2,r2,65535
   204f4:	1006917a 	slli	r3,r2,5
   204f8:	00800174 	movhi	r2,5
   204fc:	10bce904 	addi	r2,r2,-3164
   20500:	1080030b 	ldhu	r2,12(r2)
   20504:	10bfffcc 	andi	r2,r2,65535
   20508:	1885283a 	div	r2,r3,r2
   2050c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   20510:	00800174 	movhi	r2,5
   20514:	10bce404 	addi	r2,r2,-3184
   20518:	10800217 	ldw	r2,8(r2)
   2051c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   20520:	00800174 	movhi	r2,5
   20524:	10bce404 	addi	r2,r2,-3184
   20528:	1080030b 	ldhu	r2,12(r2)
   2052c:	10bfffcc 	andi	r2,r2,65535
   20530:	10a0001c 	xori	r2,r2,32768
   20534:	10a00004 	addi	r2,r2,-32768
   20538:	10800044 	addi	r2,r2,1
   2053c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   20540:	00003706 	br	20620 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   20544:	00800174 	movhi	r2,5
   20548:	10bce904 	addi	r2,r2,-3164
   2054c:	10c01317 	ldw	r3,76(r2)
   20550:	e0bfe817 	ldw	r2,-96(fp)
   20554:	1885883a 	add	r2,r3,r2
   20558:	1007883a 	mov	r3,r2
   2055c:	d0a85a17 	ldw	r2,-24216(gp)
   20560:	1809883a 	mov	r4,r3
   20564:	100b883a 	mov	r5,r2
   20568:	001d67c0 	call	1d67c <Read_Sector_Data>
   2056c:	10002826 	beq	r2,zero,20610 <alt_up_sd_card_find_next+0x180>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   20570:	00002206 	br	205fc <alt_up_sd_card_find_next+0x16c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   20574:	e0bfe917 	ldw	r2,-92(fp)
   20578:	1008917a 	slli	r4,r2,5
   2057c:	e0bfe817 	ldw	r2,-96(fp)
   20580:	e0ffef04 	addi	r3,fp,-68
   20584:	180b883a 	mov	r5,r3
   20588:	000d883a 	mov	r6,zero
   2058c:	100f883a 	mov	r7,r2
   20590:	001da940 	call	1da94 <Read_File_Record_At_Offset>
   20594:	10001626 	beq	r2,zero,205f0 <alt_up_sd_card_find_next+0x160>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   20598:	e0bfef03 	ldbu	r2,-68(fp)
   2059c:	10803fcc 	andi	r2,r2,255
   205a0:	10001326 	beq	r2,zero,205f0 <alt_up_sd_card_find_next+0x160>
   205a4:	e0bfef03 	ldbu	r2,-68(fp)
   205a8:	10803fcc 	andi	r2,r2,255
   205ac:	10803960 	cmpeqi	r2,r2,229
   205b0:	10000f1e 	bne	r2,zero,205f0 <alt_up_sd_card_find_next+0x160>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   205b4:	e0bfe917 	ldw	r2,-92(fp)
   205b8:	1007883a 	mov	r3,r2
   205bc:	00800174 	movhi	r2,5
   205c0:	10bce404 	addi	r2,r2,-3184
   205c4:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   205c8:	e0ffe817 	ldw	r3,-96(fp)
   205cc:	00800174 	movhi	r2,5
   205d0:	10bce404 	addi	r2,r2,-3184
   205d4:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   205d8:	e0bfef04 	addi	r2,fp,-68
   205dc:	1009883a 	mov	r4,r2
   205e0:	e17fff17 	ldw	r5,-4(fp)
   205e4:	002008c0 	call	2008c <copy_file_record_name_to_string>
									return 0;
   205e8:	0005883a 	mov	r2,zero
   205ec:	00008e06 	br	20828 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   205f0:	e0bfe917 	ldw	r2,-92(fp)
   205f4:	10800044 	addi	r2,r2,1
   205f8:	e0bfe915 	stw	r2,-92(fp)
   205fc:	e0bfe917 	ldw	r2,-92(fp)
   20600:	10800410 	cmplti	r2,r2,16
   20604:	103fdb1e 	bne	r2,zero,20574 <__alt_mem_Flash_flash_data+0xf4020574>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   20608:	e03fe915 	stw	zero,-92(fp)
   2060c:	00000106 	br	20614 <alt_up_sd_card_find_next+0x184>
					}
					else
					{
						break;
   20610:	00000606 	br	2062c <alt_up_sd_card_find_next+0x19c>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   20614:	e0bfe817 	ldw	r2,-96(fp)
   20618:	10800044 	addi	r2,r2,1
   2061c:	e0bfe815 	stw	r2,-96(fp)
   20620:	e0ffe817 	ldw	r3,-96(fp)
   20624:	e0bfec17 	ldw	r2,-80(fp)
   20628:	18bfc616 	blt	r3,r2,20544 <__alt_mem_Flash_flash_data+0xf4020544>
					else
					{
						break;
					}
				}
				result = -1;
   2062c:	00bfffc4 	movi	r2,-1
   20630:	e0bfe60d 	sth	r2,-104(fp)
   20634:	00007806 	br	20818 <alt_up_sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   20638:	00800174 	movhi	r2,5
   2063c:	10bce404 	addi	r2,r2,-3184
   20640:	1080030b 	ldhu	r2,12(r2)
   20644:	10bfffcc 	andi	r2,r2,65535
   20648:	10a0001c 	xori	r2,r2,32768
   2064c:	10a00004 	addi	r2,r2,-32768
   20650:	10800044 	addi	r2,r2,1
   20654:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   20658:	e0bfe717 	ldw	r2,-100(fp)
   2065c:	10ffff84 	addi	r3,r2,-2
   20660:	00800174 	movhi	r2,5
   20664:	10bce904 	addi	r2,r2,-3164
   20668:	10800383 	ldbu	r2,14(r2)
   2066c:	10803fcc 	andi	r2,r2,255
   20670:	1885383a 	mul	r2,r3,r2
   20674:	1007883a 	mov	r3,r2
   20678:	00800174 	movhi	r2,5
   2067c:	10bce904 	addi	r2,r2,-3164
   20680:	10801417 	ldw	r2,80(r2)
   20684:	1885883a 	add	r2,r3,r2
   20688:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   2068c:	00800174 	movhi	r2,5
   20690:	10bce404 	addi	r2,r2,-3184
   20694:	10800217 	ldw	r2,8(r2)
   20698:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   2069c:	00003806 	br	20780 <alt_up_sd_card_find_next+0x2f0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   206a0:	e0ffeb17 	ldw	r3,-84(fp)
   206a4:	e0bfed17 	ldw	r2,-76(fp)
   206a8:	1887883a 	add	r3,r3,r2
   206ac:	d0a85a17 	ldw	r2,-24216(gp)
   206b0:	1809883a 	mov	r4,r3
   206b4:	100b883a 	mov	r5,r2
   206b8:	001d67c0 	call	1d67c <Read_Sector_Data>
   206bc:	10002c26 	beq	r2,zero,20770 <alt_up_sd_card_find_next+0x2e0>
						{        
							for (; file_counter < 16; file_counter++)
   206c0:	00002606 	br	2075c <alt_up_sd_card_find_next+0x2cc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   206c4:	e0bfea17 	ldw	r2,-88(fp)
   206c8:	1008917a 	slli	r4,r2,5
   206cc:	e0ffe717 	ldw	r3,-100(fp)
   206d0:	e0bfeb17 	ldw	r2,-84(fp)
   206d4:	e17fef04 	addi	r5,fp,-68
   206d8:	180d883a 	mov	r6,r3
   206dc:	100f883a 	mov	r7,r2
   206e0:	001da940 	call	1da94 <Read_File_Record_At_Offset>
   206e4:	10001a26 	beq	r2,zero,20750 <alt_up_sd_card_find_next+0x2c0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   206e8:	e0bfef03 	ldbu	r2,-68(fp)
   206ec:	10803fcc 	andi	r2,r2,255
   206f0:	10001726 	beq	r2,zero,20750 <alt_up_sd_card_find_next+0x2c0>
   206f4:	e0bfef03 	ldbu	r2,-68(fp)
   206f8:	10803fcc 	andi	r2,r2,255
   206fc:	10803960 	cmpeqi	r2,r2,229
   20700:	1000131e 	bne	r2,zero,20750 <alt_up_sd_card_find_next+0x2c0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   20704:	e0ffe717 	ldw	r3,-100(fp)
   20708:	00800174 	movhi	r2,5
   2070c:	10bce404 	addi	r2,r2,-3184
   20710:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   20714:	e0bfea17 	ldw	r2,-88(fp)
   20718:	1007883a 	mov	r3,r2
   2071c:	00800174 	movhi	r2,5
   20720:	10bce404 	addi	r2,r2,-3184
   20724:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   20728:	e0ffeb17 	ldw	r3,-84(fp)
   2072c:	00800174 	movhi	r2,5
   20730:	10bce404 	addi	r2,r2,-3184
   20734:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   20738:	e0bfef04 	addi	r2,fp,-68
   2073c:	1009883a 	mov	r4,r2
   20740:	e17fff17 	ldw	r5,-4(fp)
   20744:	002008c0 	call	2008c <copy_file_record_name_to_string>
										return 0;
   20748:	0005883a 	mov	r2,zero
   2074c:	00003606 	br	20828 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   20750:	e0bfea17 	ldw	r2,-88(fp)
   20754:	10800044 	addi	r2,r2,1
   20758:	e0bfea15 	stw	r2,-88(fp)
   2075c:	e0bfea17 	ldw	r2,-88(fp)
   20760:	10800410 	cmplti	r2,r2,16
   20764:	103fd71e 	bne	r2,zero,206c4 <__alt_mem_Flash_flash_data+0xf40206c4>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   20768:	e03fea15 	stw	zero,-88(fp)
   2076c:	00000106 	br	20774 <alt_up_sd_card_find_next+0x2e4>
						}
						else
						{
							break;
   20770:	00000906 	br	20798 <alt_up_sd_card_find_next+0x308>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   20774:	e0bfeb17 	ldw	r2,-84(fp)
   20778:	10800044 	addi	r2,r2,1
   2077c:	e0bfeb15 	stw	r2,-84(fp)
   20780:	00800174 	movhi	r2,5
   20784:	10bce904 	addi	r2,r2,-3164
   20788:	10800383 	ldbu	r2,14(r2)
   2078c:	10803fcc 	andi	r2,r2,255
   20790:	e0ffeb17 	ldw	r3,-84(fp)
   20794:	18bfc216 	blt	r3,r2,206a0 <__alt_mem_Flash_flash_data+0xf40206a0>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   20798:	00800174 	movhi	r2,5
   2079c:	10bce904 	addi	r2,r2,-3164
   207a0:	10800383 	ldbu	r2,14(r2)
   207a4:	10803fcc 	andi	r2,r2,255
   207a8:	e0ffeb17 	ldw	r3,-84(fp)
   207ac:	18801716 	blt	r3,r2,2080c <alt_up_sd_card_find_next+0x37c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   207b0:	e0ffe717 	ldw	r3,-100(fp)
   207b4:	e0bfee04 	addi	r2,fp,-72
   207b8:	1809883a 	mov	r4,r3
   207bc:	100b883a 	mov	r5,r2
   207c0:	001d7540 	call	1d754 <get_cluster_flag>
   207c4:	10000f26 	beq	r2,zero,20804 <alt_up_sd_card_find_next+0x374>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   207c8:	e0bfee0b 	ldhu	r2,-72(fp)
   207cc:	10bfffcc 	andi	r2,r2,65535
   207d0:	10fffe0c 	andi	r3,r2,65528
   207d4:	00bffe14 	movui	r2,65528
   207d8:	1880051e 	bne	r3,r2,207f0 <alt_up_sd_card_find_next+0x360>
							{
								result = -1;
   207dc:	00bfffc4 	movi	r2,-1
   207e0:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   207e4:	00800174 	movhi	r2,5
   207e8:	10bce404 	addi	r2,r2,-3184
   207ec:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   207f0:	e0bfee0b 	ldhu	r2,-72(fp)
   207f4:	10bfffcc 	andi	r2,r2,65535
   207f8:	10bffe0c 	andi	r2,r2,65528
   207fc:	e0bfe715 	stw	r2,-100(fp)
   20800:	00000206 	br	2080c <alt_up_sd_card_find_next+0x37c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   20804:	00bfffc4 	movi	r2,-1
   20808:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   2080c:	e0bfe717 	ldw	r2,-100(fp)
   20810:	00fffdd4 	movui	r3,65527
   20814:	18bf900e 	bge	r3,r2,20658 <__alt_mem_Flash_flash_data+0xf4020658>
   20818:	00000206 	br	20824 <alt_up_sd_card_find_next+0x394>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   2081c:	008000c4 	movi	r2,3
   20820:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   20824:	e0bfe60b 	ldhu	r2,-104(fp)
}
   20828:	e037883a 	mov	sp,fp
   2082c:	dfc00117 	ldw	ra,4(sp)
   20830:	df000017 	ldw	fp,0(sp)
   20834:	dec00204 	addi	sp,sp,8
   20838:	f800283a 	ret

0002083c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   2083c:	deffe904 	addi	sp,sp,-92
   20840:	dfc01615 	stw	ra,88(sp)
   20844:	df001515 	stw	fp,84(sp)
   20848:	df001504 	addi	fp,sp,84
   2084c:	e13ffe15 	stw	r4,-8(fp)
   20850:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   20854:	00bfffc4 	movi	r2,-1
   20858:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   2085c:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   20860:	1000d126 	beq	r2,zero,20ba8 <alt_up_sd_card_fopen+0x36c>
   20864:	d0a85317 	ldw	r2,-24244(gp)
   20868:	1000cf26 	beq	r2,zero,20ba8 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
   2086c:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   20870:	e13ffe17 	ldw	r4,-8(fp)
   20874:	001e7100 	call	1e710 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   20878:	e13ffe17 	ldw	r4,-8(fp)
   2087c:	001e7d00 	call	1e7d0 <check_file_name_for_FAT16_compliance>
   20880:	1000c926 	beq	r2,zero,20ba8 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   20884:	e0ffed04 	addi	r3,fp,-76
   20888:	e0bfee04 	addi	r2,fp,-72
   2088c:	e13ffe17 	ldw	r4,-8(fp)
   20890:	180b883a 	mov	r5,r3
   20894:	100d883a 	mov	r6,r2
   20898:	001ed900 	call	1ed90 <get_home_directory_cluster_for_file>
   2089c:	1000021e 	bne	r2,zero,208a8 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   208a0:	e0bfeb0b 	ldhu	r2,-84(fp)
   208a4:	0000c106 	br	20bac <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   208a8:	e03fec15 	stw	zero,-80(fp)
   208ac:	00000e06 	br	208e8 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   208b0:	00800174 	movhi	r2,5
   208b4:	10bcfe04 	addi	r2,r2,-3080
   208b8:	e0ffec17 	ldw	r3,-80(fp)
   208bc:	180691ba 	slli	r3,r3,6
   208c0:	18c00f04 	addi	r3,r3,60
   208c4:	10c5883a 	add	r2,r2,r3
   208c8:	10800017 	ldw	r2,0(r2)
   208cc:	1000031e 	bne	r2,zero,208dc <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   208d0:	e0bfec17 	ldw	r2,-80(fp)
   208d4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   208d8:	00000606 	br	208f4 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   208dc:	e0bfec17 	ldw	r2,-80(fp)
   208e0:	10800044 	addi	r2,r2,1
   208e4:	e0bfec15 	stw	r2,-80(fp)
   208e8:	e0bfec17 	ldw	r2,-80(fp)
   208ec:	10800510 	cmplti	r2,r2,20
   208f0:	103fef1e 	bne	r2,zero,208b0 <__alt_mem_Flash_flash_data+0xf40208b0>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   208f4:	e0bfeb0f 	ldh	r2,-84(fp)
   208f8:	1000ab16 	blt	r2,zero,20ba8 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   208fc:	e0bfed17 	ldw	r2,-76(fp)
   20900:	1009883a 	mov	r4,r2
   20904:	e0bfeb0f 	ldh	r2,-84(fp)
   20908:	100691ba 	slli	r3,r2,6
   2090c:	00800174 	movhi	r2,5
   20910:	10bcfe04 	addi	r2,r2,-3080
   20914:	1885883a 	add	r2,r3,r2
   20918:	e17ffe17 	ldw	r5,-8(fp)
   2091c:	100d883a 	mov	r6,r2
   20920:	001f2bc0 	call	1f2bc <find_file_in_directory>
   20924:	10007c26 	beq	r2,zero,20b18 <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
   20928:	e0bfff17 	ldw	r2,-4(fp)
   2092c:	10000226 	beq	r2,zero,20938 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   20930:	00bfffc4 	movi	r2,-1
   20934:	00009d06 	br	20bac <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   20938:	e13feb0f 	ldh	r4,-84(fp)
   2093c:	e0ffeb0f 	ldh	r3,-84(fp)
   20940:	00800174 	movhi	r2,5
   20944:	10bcfe04 	addi	r2,r2,-3080
   20948:	180691ba 	slli	r3,r3,6
   2094c:	18c00504 	addi	r3,r3,20
   20950:	10c5883a 	add	r2,r2,r3
   20954:	1080008b 	ldhu	r2,2(r2)
   20958:	10ffffcc 	andi	r3,r2,65535
   2095c:	00800174 	movhi	r2,5
   20960:	10bcfe04 	addi	r2,r2,-3080
   20964:	200891ba 	slli	r4,r4,6
   20968:	21000704 	addi	r4,r4,28
   2096c:	1105883a 	add	r2,r2,r4
   20970:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   20974:	e0ffeb0f 	ldh	r3,-84(fp)
   20978:	00800174 	movhi	r2,5
   2097c:	10bcfe04 	addi	r2,r2,-3080
   20980:	180691ba 	slli	r3,r3,6
   20984:	18c00804 	addi	r3,r3,32
   20988:	10c5883a 	add	r2,r2,r3
   2098c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   20990:	e0ffeb0f 	ldh	r3,-84(fp)
   20994:	00800174 	movhi	r2,5
   20998:	10bcfe04 	addi	r2,r2,-3080
   2099c:	180691ba 	slli	r3,r3,6
   209a0:	18c00904 	addi	r3,r3,36
   209a4:	10c5883a 	add	r2,r2,r3
   209a8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   209ac:	e0ffeb0f 	ldh	r3,-84(fp)
   209b0:	00800174 	movhi	r2,5
   209b4:	10bcfe04 	addi	r2,r2,-3080
   209b8:	180691ba 	slli	r3,r3,6
   209bc:	18c00f04 	addi	r3,r3,60
   209c0:	10c5883a 	add	r2,r2,r3
   209c4:	00c00044 	movi	r3,1
   209c8:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   209cc:	e0ffeb0f 	ldh	r3,-84(fp)
   209d0:	00800174 	movhi	r2,5
   209d4:	10bcfe04 	addi	r2,r2,-3080
   209d8:	180691ba 	slli	r3,r3,6
   209dc:	18c00e04 	addi	r3,r3,56
   209e0:	10c5883a 	add	r2,r2,r3
   209e4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   209e8:	e03fec15 	stw	zero,-80(fp)
   209ec:	00004606 	br	20b08 <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   209f0:	e0ffeb0f 	ldh	r3,-84(fp)
   209f4:	e0bfec17 	ldw	r2,-80(fp)
   209f8:	18804026 	beq	r3,r2,20afc <alt_up_sd_card_fopen+0x2c0>
   209fc:	00800174 	movhi	r2,5
   20a00:	10bcfe04 	addi	r2,r2,-3080
   20a04:	e0ffec17 	ldw	r3,-80(fp)
   20a08:	180691ba 	slli	r3,r3,6
   20a0c:	18c00f04 	addi	r3,r3,60
   20a10:	10c5883a 	add	r2,r2,r3
   20a14:	10800017 	ldw	r2,0(r2)
   20a18:	10800058 	cmpnei	r2,r2,1
   20a1c:	1000371e 	bne	r2,zero,20afc <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   20a20:	e0ffeb0f 	ldh	r3,-84(fp)
   20a24:	00800174 	movhi	r2,5
   20a28:	10bcfe04 	addi	r2,r2,-3080
   20a2c:	180691ba 	slli	r3,r3,6
   20a30:	18c00a04 	addi	r3,r3,40
   20a34:	10c5883a 	add	r2,r2,r3
   20a38:	10c00017 	ldw	r3,0(r2)
   20a3c:	00800174 	movhi	r2,5
   20a40:	10bcfe04 	addi	r2,r2,-3080
   20a44:	e13fec17 	ldw	r4,-80(fp)
   20a48:	200891ba 	slli	r4,r4,6
   20a4c:	21000a04 	addi	r4,r4,40
   20a50:	1105883a 	add	r2,r2,r4
   20a54:	10800017 	ldw	r2,0(r2)
   20a58:	1880281e 	bne	r3,r2,20afc <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   20a5c:	e0ffeb0f 	ldh	r3,-84(fp)
   20a60:	00800174 	movhi	r2,5
   20a64:	10bcfe04 	addi	r2,r2,-3080
   20a68:	180691ba 	slli	r3,r3,6
   20a6c:	18c00b04 	addi	r3,r3,44
   20a70:	10c5883a 	add	r2,r2,r3
   20a74:	10c00017 	ldw	r3,0(r2)
   20a78:	00800174 	movhi	r2,5
   20a7c:	10bcfe04 	addi	r2,r2,-3080
   20a80:	e13fec17 	ldw	r4,-80(fp)
   20a84:	200891ba 	slli	r4,r4,6
   20a88:	21000b04 	addi	r4,r4,44
   20a8c:	1105883a 	add	r2,r2,r4
   20a90:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   20a94:	1880191e 	bne	r3,r2,20afc <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   20a98:	e0ffeb0f 	ldh	r3,-84(fp)
   20a9c:	00800174 	movhi	r2,5
   20aa0:	10bcfe04 	addi	r2,r2,-3080
   20aa4:	180691ba 	slli	r3,r3,6
   20aa8:	18c00c04 	addi	r3,r3,48
   20aac:	10c5883a 	add	r2,r2,r3
   20ab0:	1100000b 	ldhu	r4,0(r2)
   20ab4:	00800174 	movhi	r2,5
   20ab8:	10bcfe04 	addi	r2,r2,-3080
   20abc:	e0ffec17 	ldw	r3,-80(fp)
   20ac0:	180691ba 	slli	r3,r3,6
   20ac4:	18c00c04 	addi	r3,r3,48
   20ac8:	10c5883a 	add	r2,r2,r3
   20acc:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   20ad0:	20ffffcc 	andi	r3,r4,65535
   20ad4:	18e0001c 	xori	r3,r3,32768
   20ad8:	18e00004 	addi	r3,r3,-32768
   20adc:	10bfffcc 	andi	r2,r2,65535
   20ae0:	10a0001c 	xori	r2,r2,32768
   20ae4:	10a00004 	addi	r2,r2,-32768
   20ae8:	1880041e 	bne	r3,r2,20afc <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   20aec:	00bfff84 	movi	r2,-2
   20af0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   20af4:	0001883a 	nop
   20af8:	00002b06 	br	20ba8 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   20afc:	e0bfec17 	ldw	r2,-80(fp)
   20b00:	10800044 	addi	r2,r2,1
   20b04:	e0bfec15 	stw	r2,-80(fp)
   20b08:	e0bfec17 	ldw	r2,-80(fp)
   20b0c:	10800510 	cmplti	r2,r2,20
   20b10:	103fb71e 	bne	r2,zero,209f0 <__alt_mem_Flash_flash_data+0xf40209f0>
   20b14:	00002406 	br	20ba8 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
   20b18:	e0bfff17 	ldw	r2,-4(fp)
   20b1c:	10001f26 	beq	r2,zero,20b9c <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   20b20:	e0bfeb0f 	ldh	r2,-84(fp)
   20b24:	100691ba 	slli	r3,r2,6
   20b28:	00800174 	movhi	r2,5
   20b2c:	10bcfe04 	addi	r2,r2,-3080
   20b30:	1887883a 	add	r3,r3,r2
   20b34:	e0bfee04 	addi	r2,fp,-72
   20b38:	e13ffe17 	ldw	r4,-8(fp)
   20b3c:	180b883a 	mov	r5,r3
   20b40:	100d883a 	mov	r6,r2
   20b44:	001fdc80 	call	1fdc8 <create_file>
   20b48:	10001126 	beq	r2,zero,20b90 <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
   20b4c:	e0ffeb0f 	ldh	r3,-84(fp)
   20b50:	00800174 	movhi	r2,5
   20b54:	10bcfe04 	addi	r2,r2,-3080
   20b58:	180691ba 	slli	r3,r3,6
   20b5c:	18c00f04 	addi	r3,r3,60
   20b60:	10c5883a 	add	r2,r2,r3
   20b64:	00c00044 	movi	r3,1
   20b68:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   20b6c:	e0ffeb0f 	ldh	r3,-84(fp)
   20b70:	00800174 	movhi	r2,5
   20b74:	10bcfe04 	addi	r2,r2,-3080
   20b78:	180691ba 	slli	r3,r3,6
   20b7c:	18c00e04 	addi	r3,r3,56
   20b80:	10c5883a 	add	r2,r2,r3
   20b84:	00c00044 	movi	r3,1
   20b88:	10c00015 	stw	r3,0(r2)
   20b8c:	00000606 	br	20ba8 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   20b90:	00bfffc4 	movi	r2,-1
   20b94:	e0bfeb0d 	sth	r2,-84(fp)
   20b98:	00000306 	br	20ba8 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   20b9c:	00bfffc4 	movi	r2,-1
   20ba0:	e0bfeb0d 	sth	r2,-84(fp)
   20ba4:	00000006 	br	20ba8 <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
   20ba8:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   20bac:	e037883a 	mov	sp,fp
   20bb0:	dfc00117 	ldw	ra,4(sp)
   20bb4:	df000017 	ldw	fp,0(sp)
   20bb8:	dec00204 	addi	sp,sp,8
   20bbc:	f800283a 	ret

00020bc0 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   20bc0:	defffd04 	addi	sp,sp,-12
   20bc4:	df000215 	stw	fp,8(sp)
   20bc8:	df000204 	addi	fp,sp,8
   20bcc:	2007883a 	mov	r3,r4
   20bd0:	2805883a 	mov	r2,r5
   20bd4:	e0fffe0d 	sth	r3,-8(fp)
   20bd8:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20bdc:	e0bffe0f 	ldh	r2,-8(fp)
   20be0:	10001416 	blt	r2,zero,20c34 <alt_up_sd_card_set_attributes+0x74>
   20be4:	e0bffe0f 	ldh	r2,-8(fp)
   20be8:	10800508 	cmpgei	r2,r2,20
   20bec:	1000111e 	bne	r2,zero,20c34 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   20bf0:	e0fffe0f 	ldh	r3,-8(fp)
   20bf4:	00800174 	movhi	r2,5
   20bf8:	10bcfe04 	addi	r2,r2,-3080
   20bfc:	180691ba 	slli	r3,r3,6
   20c00:	18c00f04 	addi	r3,r3,60
   20c04:	10c5883a 	add	r2,r2,r3
   20c08:	10800017 	ldw	r2,0(r2)
   20c0c:	10000926 	beq	r2,zero,20c34 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   20c10:	e0fffe0f 	ldh	r3,-8(fp)
   20c14:	e0bfff0b 	ldhu	r2,-4(fp)
   20c18:	1009883a 	mov	r4,r2
   20c1c:	00800174 	movhi	r2,5
   20c20:	10bcfe04 	addi	r2,r2,-3080
   20c24:	180691ba 	slli	r3,r3,6
   20c28:	18c00204 	addi	r3,r3,8
   20c2c:	10c5883a 	add	r2,r2,r3
   20c30:	110000c5 	stb	r4,3(r2)
        }
    }
}
   20c34:	e037883a 	mov	sp,fp
   20c38:	df000017 	ldw	fp,0(sp)
   20c3c:	dec00104 	addi	sp,sp,4
   20c40:	f800283a 	ret

00020c44 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   20c44:	defffd04 	addi	sp,sp,-12
   20c48:	df000215 	stw	fp,8(sp)
   20c4c:	df000204 	addi	fp,sp,8
   20c50:	2005883a 	mov	r2,r4
   20c54:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   20c58:	00bfffc4 	movi	r2,-1
   20c5c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20c60:	e0bfff0f 	ldh	r2,-4(fp)
   20c64:	10001416 	blt	r2,zero,20cb8 <alt_up_sd_card_get_attributes+0x74>
   20c68:	e0bfff0f 	ldh	r2,-4(fp)
   20c6c:	10800508 	cmpgei	r2,r2,20
   20c70:	1000111e 	bne	r2,zero,20cb8 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   20c74:	e0ffff0f 	ldh	r3,-4(fp)
   20c78:	00800174 	movhi	r2,5
   20c7c:	10bcfe04 	addi	r2,r2,-3080
   20c80:	180691ba 	slli	r3,r3,6
   20c84:	18c00f04 	addi	r3,r3,60
   20c88:	10c5883a 	add	r2,r2,r3
   20c8c:	10800017 	ldw	r2,0(r2)
   20c90:	10000926 	beq	r2,zero,20cb8 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   20c94:	e0ffff0f 	ldh	r3,-4(fp)
   20c98:	00800174 	movhi	r2,5
   20c9c:	10bcfe04 	addi	r2,r2,-3080
   20ca0:	180691ba 	slli	r3,r3,6
   20ca4:	18c00204 	addi	r3,r3,8
   20ca8:	10c5883a 	add	r2,r2,r3
   20cac:	108000c3 	ldbu	r2,3(r2)
   20cb0:	10803fcc 	andi	r2,r2,255
   20cb4:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   20cb8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   20cbc:	e037883a 	mov	sp,fp
   20cc0:	df000017 	ldw	fp,0(sp)
   20cc4:	dec00104 	addi	sp,sp,4
   20cc8:	f800283a 	ret

00020ccc <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   20ccc:	defffa04 	addi	sp,sp,-24
   20cd0:	dfc00515 	stw	ra,20(sp)
   20cd4:	df000415 	stw	fp,16(sp)
   20cd8:	df000404 	addi	fp,sp,16
   20cdc:	2005883a 	mov	r2,r4
   20ce0:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   20ce4:	00bfffc4 	movi	r2,-1
   20ce8:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   20cec:	e0bfff0f 	ldh	r2,-4(fp)
   20cf0:	1000ce16 	blt	r2,zero,2102c <alt_up_sd_card_read+0x360>
   20cf4:	e0bfff0f 	ldh	r2,-4(fp)
   20cf8:	10800508 	cmpgei	r2,r2,20
   20cfc:	1000cb1e 	bne	r2,zero,2102c <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   20d00:	e0ffff0f 	ldh	r3,-4(fp)
   20d04:	00800174 	movhi	r2,5
   20d08:	10bcfe04 	addi	r2,r2,-3080
   20d0c:	180691ba 	slli	r3,r3,6
   20d10:	18c00f04 	addi	r3,r3,60
   20d14:	10c5883a 	add	r2,r2,r3
   20d18:	10800017 	ldw	r2,0(r2)
   20d1c:	1000c326 	beq	r2,zero,2102c <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   20d20:	e0ffff0f 	ldh	r3,-4(fp)
   20d24:	00800174 	movhi	r2,5
   20d28:	10bcfe04 	addi	r2,r2,-3080
   20d2c:	180691ba 	slli	r3,r3,6
   20d30:	18c00904 	addi	r3,r3,36
   20d34:	10c5883a 	add	r2,r2,r3
   20d38:	10c00017 	ldw	r3,0(r2)
   20d3c:	e13fff0f 	ldh	r4,-4(fp)
   20d40:	00800174 	movhi	r2,5
   20d44:	10bcfe04 	addi	r2,r2,-3080
   20d48:	200891ba 	slli	r4,r4,6
   20d4c:	21000604 	addi	r4,r4,24
   20d50:	1105883a 	add	r2,r2,r4
   20d54:	10800017 	ldw	r2,0(r2)
   20d58:	1880b42e 	bgeu	r3,r2,2102c <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20d5c:	00800174 	movhi	r2,5
   20d60:	10bce904 	addi	r2,r2,-3164
   20d64:	10c01417 	ldw	r3,80(r2)
   20d68:	e13fff0f 	ldh	r4,-4(fp)
   20d6c:	00800174 	movhi	r2,5
   20d70:	10bcfe04 	addi	r2,r2,-3080
   20d74:	200891ba 	slli	r4,r4,6
   20d78:	21000704 	addi	r4,r4,28
   20d7c:	1105883a 	add	r2,r2,r4
   20d80:	10800017 	ldw	r2,0(r2)
   20d84:	113fff84 	addi	r4,r2,-2
   20d88:	00800174 	movhi	r2,5
   20d8c:	10bce904 	addi	r2,r2,-3164
   20d90:	10800383 	ldbu	r2,14(r2)
   20d94:	10803fcc 	andi	r2,r2,255
   20d98:	2085383a 	mul	r2,r4,r2
   20d9c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   20da0:	e13fff0f 	ldh	r4,-4(fp)
   20da4:	00800174 	movhi	r2,5
   20da8:	10bcfe04 	addi	r2,r2,-3080
   20dac:	200891ba 	slli	r4,r4,6
   20db0:	21000804 	addi	r4,r4,32
   20db4:	1105883a 	add	r2,r2,r4
   20db8:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20dbc:	1885883a 	add	r2,r3,r2
   20dc0:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   20dc4:	e0ffff0f 	ldh	r3,-4(fp)
   20dc8:	00800174 	movhi	r2,5
   20dcc:	10bcfe04 	addi	r2,r2,-3080
   20dd0:	180691ba 	slli	r3,r3,6
   20dd4:	18c00904 	addi	r3,r3,36
   20dd8:	10c5883a 	add	r2,r2,r3
   20ddc:	10800017 	ldw	r2,0(r2)
   20de0:	10006826 	beq	r2,zero,20f84 <alt_up_sd_card_read+0x2b8>
   20de4:	e0ffff0f 	ldh	r3,-4(fp)
   20de8:	00800174 	movhi	r2,5
   20dec:	10bcfe04 	addi	r2,r2,-3080
   20df0:	180691ba 	slli	r3,r3,6
   20df4:	18c00904 	addi	r3,r3,36
   20df8:	10c5883a 	add	r2,r2,r3
   20dfc:	10800017 	ldw	r2,0(r2)
   20e00:	10807fcc 	andi	r2,r2,511
   20e04:	10005f1e 	bne	r2,zero,20f84 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   20e08:	e0ffff0f 	ldh	r3,-4(fp)
   20e0c:	00800174 	movhi	r2,5
   20e10:	10bcfe04 	addi	r2,r2,-3080
   20e14:	180691ba 	slli	r3,r3,6
   20e18:	18c00804 	addi	r3,r3,32
   20e1c:	10c5883a 	add	r2,r2,r3
   20e20:	10c00017 	ldw	r3,0(r2)
   20e24:	00800174 	movhi	r2,5
   20e28:	10bce904 	addi	r2,r2,-3164
   20e2c:	10800383 	ldbu	r2,14(r2)
   20e30:	10803fcc 	andi	r2,r2,255
   20e34:	10bfffc4 	addi	r2,r2,-1
   20e38:	1880401e 	bne	r3,r2,20f3c <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   20e3c:	e0ffff0f 	ldh	r3,-4(fp)
   20e40:	00800174 	movhi	r2,5
   20e44:	10bcfe04 	addi	r2,r2,-3080
   20e48:	180691ba 	slli	r3,r3,6
   20e4c:	18c00704 	addi	r3,r3,28
   20e50:	10c5883a 	add	r2,r2,r3
   20e54:	10c00017 	ldw	r3,0(r2)
   20e58:	e0bffe04 	addi	r2,fp,-8
   20e5c:	1809883a 	mov	r4,r3
   20e60:	100b883a 	mov	r5,r2
   20e64:	001d7540 	call	1d754 <get_cluster_flag>
   20e68:	10003226 	beq	r2,zero,20f34 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   20e6c:	e0bffe0b 	ldhu	r2,-8(fp)
   20e70:	10bfffcc 	andi	r2,r2,65535
   20e74:	10fffe0c 	andi	r3,r2,65528
   20e78:	00bffe14 	movui	r2,65528
   20e7c:	1880021e 	bne	r3,r2,20e88 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   20e80:	00bfffc4 	movi	r2,-1
   20e84:	00006a06 	br	21030 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   20e88:	e13fff0f 	ldh	r4,-4(fp)
   20e8c:	e0bffe0b 	ldhu	r2,-8(fp)
   20e90:	10ffffcc 	andi	r3,r2,65535
   20e94:	00800174 	movhi	r2,5
   20e98:	10bcfe04 	addi	r2,r2,-3080
   20e9c:	200891ba 	slli	r4,r4,6
   20ea0:	21000704 	addi	r4,r4,28
   20ea4:	1105883a 	add	r2,r2,r4
   20ea8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   20eac:	e0ffff0f 	ldh	r3,-4(fp)
   20eb0:	00800174 	movhi	r2,5
   20eb4:	10bcfe04 	addi	r2,r2,-3080
   20eb8:	180691ba 	slli	r3,r3,6
   20ebc:	18c00804 	addi	r3,r3,32
   20ec0:	10c5883a 	add	r2,r2,r3
   20ec4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20ec8:	00800174 	movhi	r2,5
   20ecc:	10bce904 	addi	r2,r2,-3164
   20ed0:	10c01417 	ldw	r3,80(r2)
   20ed4:	e13fff0f 	ldh	r4,-4(fp)
   20ed8:	00800174 	movhi	r2,5
   20edc:	10bcfe04 	addi	r2,r2,-3080
   20ee0:	200891ba 	slli	r4,r4,6
   20ee4:	21000704 	addi	r4,r4,28
   20ee8:	1105883a 	add	r2,r2,r4
   20eec:	10800017 	ldw	r2,0(r2)
   20ef0:	113fff84 	addi	r4,r2,-2
   20ef4:	00800174 	movhi	r2,5
   20ef8:	10bce904 	addi	r2,r2,-3164
   20efc:	10800383 	ldbu	r2,14(r2)
   20f00:	10803fcc 	andi	r2,r2,255
   20f04:	2085383a 	mul	r2,r4,r2
   20f08:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   20f0c:	e13fff0f 	ldh	r4,-4(fp)
   20f10:	00800174 	movhi	r2,5
   20f14:	10bcfe04 	addi	r2,r2,-3080
   20f18:	200891ba 	slli	r4,r4,6
   20f1c:	21000804 	addi	r4,r4,32
   20f20:	1105883a 	add	r2,r2,r4
   20f24:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   20f28:	1885883a 	add	r2,r3,r2
   20f2c:	e0bffd15 	stw	r2,-12(fp)
   20f30:	00001406 	br	20f84 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   20f34:	00bfff84 	movi	r2,-2
   20f38:	00003d06 	br	21030 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   20f3c:	e13fff0f 	ldh	r4,-4(fp)
   20f40:	e0ffff0f 	ldh	r3,-4(fp)
   20f44:	00800174 	movhi	r2,5
   20f48:	10bcfe04 	addi	r2,r2,-3080
   20f4c:	180691ba 	slli	r3,r3,6
   20f50:	18c00804 	addi	r3,r3,32
   20f54:	10c5883a 	add	r2,r2,r3
   20f58:	10800017 	ldw	r2,0(r2)
   20f5c:	10c00044 	addi	r3,r2,1
   20f60:	00800174 	movhi	r2,5
   20f64:	10bcfe04 	addi	r2,r2,-3080
   20f68:	200891ba 	slli	r4,r4,6
   20f6c:	21000804 	addi	r4,r4,32
   20f70:	1105883a 	add	r2,r2,r4
   20f74:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   20f78:	e0bffd17 	ldw	r2,-12(fp)
   20f7c:	10800044 	addi	r2,r2,1
   20f80:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   20f84:	d0e85a17 	ldw	r3,-24216(gp)
   20f88:	e0bffd17 	ldw	r2,-12(fp)
   20f8c:	1885883a 	add	r2,r3,r2
   20f90:	1007883a 	mov	r3,r2
   20f94:	d0a85e17 	ldw	r2,-24200(gp)
   20f98:	18800726 	beq	r3,r2,20fb8 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   20f9c:	d0a85a17 	ldw	r2,-24216(gp)
   20fa0:	e13ffd17 	ldw	r4,-12(fp)
   20fa4:	100b883a 	mov	r5,r2
   20fa8:	001d67c0 	call	1d67c <Read_Sector_Data>
   20fac:	1000021e 	bne	r2,zero,20fb8 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   20fb0:	00bfff84 	movi	r2,-2
   20fb4:	00001e06 	br	21030 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   20fb8:	d0e85917 	ldw	r3,-24220(gp)
   20fbc:	e13fff0f 	ldh	r4,-4(fp)
   20fc0:	00800174 	movhi	r2,5
   20fc4:	10bcfe04 	addi	r2,r2,-3080
   20fc8:	200891ba 	slli	r4,r4,6
   20fcc:	21000904 	addi	r4,r4,36
   20fd0:	1105883a 	add	r2,r2,r4
   20fd4:	10800017 	ldw	r2,0(r2)
   20fd8:	10807fcc 	andi	r2,r2,511
   20fdc:	1885883a 	add	r2,r3,r2
   20fe0:	10800023 	ldbuio	r2,0(r2)
   20fe4:	10803fcc 	andi	r2,r2,255
   20fe8:	10803fcc 	andi	r2,r2,255
   20fec:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   20ff0:	e13fff0f 	ldh	r4,-4(fp)
   20ff4:	e0ffff0f 	ldh	r3,-4(fp)
   20ff8:	00800174 	movhi	r2,5
   20ffc:	10bcfe04 	addi	r2,r2,-3080
   21000:	180691ba 	slli	r3,r3,6
   21004:	18c00904 	addi	r3,r3,36
   21008:	10c5883a 	add	r2,r2,r3
   2100c:	10800017 	ldw	r2,0(r2)
   21010:	10c00044 	addi	r3,r2,1
   21014:	00800174 	movhi	r2,5
   21018:	10bcfe04 	addi	r2,r2,-3080
   2101c:	200891ba 	slli	r4,r4,6
   21020:	21000904 	addi	r4,r4,36
   21024:	1105883a 	add	r2,r2,r4
   21028:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   2102c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   21030:	e037883a 	mov	sp,fp
   21034:	dfc00117 	ldw	ra,4(sp)
   21038:	df000017 	ldw	fp,0(sp)
   2103c:	dec00204 	addi	sp,sp,8
   21040:	f800283a 	ret

00021044 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   21044:	defff704 	addi	sp,sp,-36
   21048:	dfc00815 	stw	ra,32(sp)
   2104c:	df000715 	stw	fp,28(sp)
   21050:	df000704 	addi	fp,sp,28
   21054:	2007883a 	mov	r3,r4
   21058:	2805883a 	mov	r2,r5
   2105c:	e0fffe0d 	sth	r3,-8(fp)
   21060:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   21064:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   21068:	e0bffe0f 	ldh	r2,-8(fp)
   2106c:	1001b716 	blt	r2,zero,2174c <alt_up_sd_card_write+0x708>
   21070:	e0bffe0f 	ldh	r2,-8(fp)
   21074:	10800508 	cmpgei	r2,r2,20
   21078:	1001b41e 	bne	r2,zero,2174c <alt_up_sd_card_write+0x708>
    {
        if (active_files[file_handle].in_use)
   2107c:	e0fffe0f 	ldh	r3,-8(fp)
   21080:	00800174 	movhi	r2,5
   21084:	10bcfe04 	addi	r2,r2,-3080
   21088:	180691ba 	slli	r3,r3,6
   2108c:	18c00f04 	addi	r3,r3,60
   21090:	10c5883a 	add	r2,r2,r3
   21094:	10800017 	ldw	r2,0(r2)
   21098:	1001ac26 	beq	r2,zero,2174c <alt_up_sd_card_write+0x708>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   2109c:	00800174 	movhi	r2,5
   210a0:	10bce904 	addi	r2,r2,-3164
   210a4:	10c01417 	ldw	r3,80(r2)
   210a8:	e13ffe0f 	ldh	r4,-8(fp)
   210ac:	00800174 	movhi	r2,5
   210b0:	10bcfe04 	addi	r2,r2,-3080
   210b4:	200891ba 	slli	r4,r4,6
   210b8:	21000704 	addi	r4,r4,28
   210bc:	1105883a 	add	r2,r2,r4
   210c0:	10800017 	ldw	r2,0(r2)
   210c4:	113fff84 	addi	r4,r2,-2
   210c8:	00800174 	movhi	r2,5
   210cc:	10bce904 	addi	r2,r2,-3164
   210d0:	10800383 	ldbu	r2,14(r2)
   210d4:	10803fcc 	andi	r2,r2,255
   210d8:	2085383a 	mul	r2,r4,r2
   210dc:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   210e0:	e13ffe0f 	ldh	r4,-8(fp)
   210e4:	00800174 	movhi	r2,5
   210e8:	10bcfe04 	addi	r2,r2,-3080
   210ec:	200891ba 	slli	r4,r4,6
   210f0:	21000804 	addi	r4,r4,32
   210f4:	1105883a 	add	r2,r2,r4
   210f8:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   210fc:	1885883a 	add	r2,r3,r2
   21100:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   21104:	e0fffe0f 	ldh	r3,-8(fp)
   21108:	00800174 	movhi	r2,5
   2110c:	10bcfe04 	addi	r2,r2,-3080
   21110:	180691ba 	slli	r3,r3,6
   21114:	18c00904 	addi	r3,r3,36
   21118:	10c5883a 	add	r2,r2,r3
   2111c:	10c00017 	ldw	r3,0(r2)
   21120:	00800174 	movhi	r2,5
   21124:	10bce904 	addi	r2,r2,-3164
   21128:	1080030b 	ldhu	r2,12(r2)
   2112c:	10bfffcc 	andi	r2,r2,65535
   21130:	1889203a 	divu	r4,r3,r2
   21134:	2085383a 	mul	r2,r4,r2
   21138:	1885c83a 	sub	r2,r3,r2
   2113c:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   21140:	e0fffe0f 	ldh	r3,-8(fp)
   21144:	00800174 	movhi	r2,5
   21148:	10bcfe04 	addi	r2,r2,-3080
   2114c:	180691ba 	slli	r3,r3,6
   21150:	18c00904 	addi	r3,r3,36
   21154:	10c5883a 	add	r2,r2,r3
   21158:	10c00017 	ldw	r3,0(r2)
   2115c:	e13ffe0f 	ldh	r4,-8(fp)
   21160:	00800174 	movhi	r2,5
   21164:	10bcfe04 	addi	r2,r2,-3080
   21168:	200891ba 	slli	r4,r4,6
   2116c:	21000604 	addi	r4,r4,24
   21170:	1105883a 	add	r2,r2,r4
   21174:	10800017 	ldw	r2,0(r2)
   21178:	1880a72e 	bgeu	r3,r2,21418 <alt_up_sd_card_write+0x3d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   2117c:	e0fffe0f 	ldh	r3,-8(fp)
   21180:	00800174 	movhi	r2,5
   21184:	10bcfe04 	addi	r2,r2,-3080
   21188:	180691ba 	slli	r3,r3,6
   2118c:	18c00904 	addi	r3,r3,36
   21190:	10c5883a 	add	r2,r2,r3
   21194:	10800017 	ldw	r2,0(r2)
   21198:	10006126 	beq	r2,zero,21320 <alt_up_sd_card_write+0x2dc>
   2119c:	e0bffb0f 	ldh	r2,-20(fp)
   211a0:	10005f1e 	bne	r2,zero,21320 <alt_up_sd_card_write+0x2dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   211a4:	e0fffe0f 	ldh	r3,-8(fp)
   211a8:	00800174 	movhi	r2,5
   211ac:	10bcfe04 	addi	r2,r2,-3080
   211b0:	180691ba 	slli	r3,r3,6
   211b4:	18c00804 	addi	r3,r3,32
   211b8:	10c5883a 	add	r2,r2,r3
   211bc:	10c00017 	ldw	r3,0(r2)
   211c0:	00800174 	movhi	r2,5
   211c4:	10bce904 	addi	r2,r2,-3164
   211c8:	10800383 	ldbu	r2,14(r2)
   211cc:	10803fcc 	andi	r2,r2,255
   211d0:	10bfffc4 	addi	r2,r2,-1
   211d4:	18803e1e 	bne	r3,r2,212d0 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   211d8:	e0fffe0f 	ldh	r3,-8(fp)
   211dc:	00800174 	movhi	r2,5
   211e0:	10bcfe04 	addi	r2,r2,-3080
   211e4:	180691ba 	slli	r3,r3,6
   211e8:	18c00704 	addi	r3,r3,28
   211ec:	10c5883a 	add	r2,r2,r3
   211f0:	10c00017 	ldw	r3,0(r2)
   211f4:	e0bffb84 	addi	r2,fp,-18
   211f8:	1809883a 	mov	r4,r3
   211fc:	100b883a 	mov	r5,r2
   21200:	001d7540 	call	1d754 <get_cluster_flag>
   21204:	10003026 	beq	r2,zero,212c8 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
   21208:	e0bffb8b 	ldhu	r2,-18(fp)
   2120c:	10bfffcc 	andi	r2,r2,65535
   21210:	10bffe28 	cmpgeui	r2,r2,65528
   21214:	10002b1e 	bne	r2,zero,212c4 <alt_up_sd_card_write+0x280>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   21218:	e13ffe0f 	ldh	r4,-8(fp)
   2121c:	e0bffb8b 	ldhu	r2,-18(fp)
   21220:	10ffffcc 	andi	r3,r2,65535
   21224:	00800174 	movhi	r2,5
   21228:	10bcfe04 	addi	r2,r2,-3080
   2122c:	200891ba 	slli	r4,r4,6
   21230:	21000704 	addi	r4,r4,28
   21234:	1105883a 	add	r2,r2,r4
   21238:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   2123c:	e0fffe0f 	ldh	r3,-8(fp)
   21240:	00800174 	movhi	r2,5
   21244:	10bcfe04 	addi	r2,r2,-3080
   21248:	180691ba 	slli	r3,r3,6
   2124c:	18c00804 	addi	r3,r3,32
   21250:	10c5883a 	add	r2,r2,r3
   21254:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   21258:	00800174 	movhi	r2,5
   2125c:	10bce904 	addi	r2,r2,-3164
   21260:	10c01417 	ldw	r3,80(r2)
   21264:	e13ffe0f 	ldh	r4,-8(fp)
   21268:	00800174 	movhi	r2,5
   2126c:	10bcfe04 	addi	r2,r2,-3080
   21270:	200891ba 	slli	r4,r4,6
   21274:	21000704 	addi	r4,r4,28
   21278:	1105883a 	add	r2,r2,r4
   2127c:	10800017 	ldw	r2,0(r2)
   21280:	113fff84 	addi	r4,r2,-2
   21284:	00800174 	movhi	r2,5
   21288:	10bce904 	addi	r2,r2,-3164
   2128c:	10800383 	ldbu	r2,14(r2)
   21290:	10803fcc 	andi	r2,r2,255
   21294:	2085383a 	mul	r2,r4,r2
   21298:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   2129c:	e13ffe0f 	ldh	r4,-8(fp)
   212a0:	00800174 	movhi	r2,5
   212a4:	10bcfe04 	addi	r2,r2,-3080
   212a8:	200891ba 	slli	r4,r4,6
   212ac:	21000804 	addi	r4,r4,32
   212b0:	1105883a 	add	r2,r2,r4
   212b4:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   212b8:	1885883a 	add	r2,r3,r2
   212bc:	e0bffa15 	stw	r2,-24(fp)
   212c0:	00001606 	br	2131c <alt_up_sd_card_write+0x2d8>
   212c4:	00001506 	br	2131c <alt_up_sd_card_write+0x2d8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   212c8:	0005883a 	mov	r2,zero
   212cc:	00012006 	br	21750 <alt_up_sd_card_write+0x70c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   212d0:	e13ffe0f 	ldh	r4,-8(fp)
   212d4:	e0fffe0f 	ldh	r3,-8(fp)
   212d8:	00800174 	movhi	r2,5
   212dc:	10bcfe04 	addi	r2,r2,-3080
   212e0:	180691ba 	slli	r3,r3,6
   212e4:	18c00804 	addi	r3,r3,32
   212e8:	10c5883a 	add	r2,r2,r3
   212ec:	10800017 	ldw	r2,0(r2)
   212f0:	10c00044 	addi	r3,r2,1
   212f4:	00800174 	movhi	r2,5
   212f8:	10bcfe04 	addi	r2,r2,-3080
   212fc:	200891ba 	slli	r4,r4,6
   21300:	21000804 	addi	r4,r4,32
   21304:	1105883a 	add	r2,r2,r4
   21308:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   2130c:	e0bffa17 	ldw	r2,-24(fp)
   21310:	10800044 	addi	r2,r2,1
   21314:	e0bffa15 	stw	r2,-24(fp)
			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   21318:	00003e06 	br	21414 <alt_up_sd_card_write+0x3d0>
   2131c:	00003d06 	br	21414 <alt_up_sd_card_write+0x3d0>
                        data_sector = data_sector + 1;
                    }
                }else{
                	// Go to the next cluster.
					unsigned short int next_cluster;
					if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   21320:	e0fffe0f 	ldh	r3,-8(fp)
   21324:	00800174 	movhi	r2,5
   21328:	10bcfe04 	addi	r2,r2,-3080
   2132c:	180691ba 	slli	r3,r3,6
   21330:	18c00704 	addi	r3,r3,28
   21334:	10c5883a 	add	r2,r2,r3
   21338:	10c00017 	ldw	r3,0(r2)
   2133c:	e0bffc04 	addi	r2,fp,-16
   21340:	1809883a 	mov	r4,r3
   21344:	100b883a 	mov	r5,r2
   21348:	001d7540 	call	1d754 <get_cluster_flag>
   2134c:	10002f26 	beq	r2,zero,2140c <alt_up_sd_card_write+0x3c8>
					{
						if (next_cluster < 0x0000fff8)
   21350:	e0bffc0b 	ldhu	r2,-16(fp)
   21354:	10bfffcc 	andi	r2,r2,65535
   21358:	10bffe28 	cmpgeui	r2,r2,65528
   2135c:	10002d1e 	bne	r2,zero,21414 <alt_up_sd_card_write+0x3d0>
						{
							active_files[file_handle].current_cluster_index = next_cluster;
   21360:	e13ffe0f 	ldh	r4,-8(fp)
   21364:	e0bffc0b 	ldhu	r2,-16(fp)
   21368:	10ffffcc 	andi	r3,r2,65535
   2136c:	00800174 	movhi	r2,5
   21370:	10bcfe04 	addi	r2,r2,-3080
   21374:	200891ba 	slli	r4,r4,6
   21378:	21000704 	addi	r4,r4,28
   2137c:	1105883a 	add	r2,r2,r4
   21380:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   21384:	e0fffe0f 	ldh	r3,-8(fp)
   21388:	00800174 	movhi	r2,5
   2138c:	10bcfe04 	addi	r2,r2,-3080
   21390:	180691ba 	slli	r3,r3,6
   21394:	18c00804 	addi	r3,r3,32
   21398:	10c5883a 	add	r2,r2,r3
   2139c:	10000015 	stw	zero,0(r2)
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   213a0:	00800174 	movhi	r2,5
   213a4:	10bce904 	addi	r2,r2,-3164
   213a8:	10c01417 	ldw	r3,80(r2)
   213ac:	e13ffe0f 	ldh	r4,-8(fp)
   213b0:	00800174 	movhi	r2,5
   213b4:	10bcfe04 	addi	r2,r2,-3080
   213b8:	200891ba 	slli	r4,r4,6
   213bc:	21000704 	addi	r4,r4,28
   213c0:	1105883a 	add	r2,r2,r4
   213c4:	10800017 	ldw	r2,0(r2)
   213c8:	113fff84 	addi	r4,r2,-2
   213cc:	00800174 	movhi	r2,5
   213d0:	10bce904 	addi	r2,r2,-3164
   213d4:	10800383 	ldbu	r2,14(r2)
   213d8:	10803fcc 	andi	r2,r2,255
   213dc:	2085383a 	mul	r2,r4,r2
   213e0:	1887883a 	add	r3,r3,r2
									active_files[file_handle].current_sector_in_cluster;
   213e4:	e13ffe0f 	ldh	r4,-8(fp)
   213e8:	00800174 	movhi	r2,5
   213ec:	10bcfe04 	addi	r2,r2,-3080
   213f0:	200891ba 	slli	r4,r4,6
   213f4:	21000804 	addi	r4,r4,32
   213f8:	1105883a 	add	r2,r2,r4
   213fc:	10800017 	ldw	r2,0(r2)
					{
						if (next_cluster < 0x0000fff8)
						{
							active_files[file_handle].current_cluster_index = next_cluster;
							active_files[file_handle].current_sector_in_cluster = 0;
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   21400:	1885883a 	add	r2,r3,r2
   21404:	e0bffa15 	stw	r2,-24(fp)
   21408:	00008506 	br	21620 <alt_up_sd_card_write+0x5dc>
									active_files[file_handle].current_sector_in_cluster;
						}
					}
					else
					{
						return false;
   2140c:	0005883a 	mov	r2,zero
   21410:	0000cf06 	br	21750 <alt_up_sd_card_write+0x70c>
   21414:	00008206 	br	21620 <alt_up_sd_card_write+0x5dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   21418:	e0fffe0f 	ldh	r3,-8(fp)
   2141c:	00800174 	movhi	r2,5
   21420:	10bcfe04 	addi	r2,r2,-3080
   21424:	180691ba 	slli	r3,r3,6
   21428:	18c00904 	addi	r3,r3,36
   2142c:	10c5883a 	add	r2,r2,r3
   21430:	10800017 	ldw	r2,0(r2)
   21434:	10007a26 	beq	r2,zero,21620 <alt_up_sd_card_write+0x5dc>
   21438:	e0bffb0f 	ldh	r2,-20(fp)
   2143c:	1000781e 	bne	r2,zero,21620 <alt_up_sd_card_write+0x5dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   21440:	e0fffe0f 	ldh	r3,-8(fp)
   21444:	00800174 	movhi	r2,5
   21448:	10bcfe04 	addi	r2,r2,-3080
   2144c:	180691ba 	slli	r3,r3,6
   21450:	18c00804 	addi	r3,r3,32
   21454:	10c5883a 	add	r2,r2,r3
   21458:	10c00017 	ldw	r3,0(r2)
   2145c:	00800174 	movhi	r2,5
   21460:	10bce904 	addi	r2,r2,-3164
   21464:	10800383 	ldbu	r2,14(r2)
   21468:	10803fcc 	andi	r2,r2,255
   2146c:	10bfffc4 	addi	r2,r2,-1
   21470:	18803e1e 	bne	r3,r2,2156c <alt_up_sd_card_write+0x528>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   21474:	e0bffd04 	addi	r2,fp,-12
   21478:	1009883a 	mov	r4,r2
   2147c:	001f7240 	call	1f724 <find_first_empty_cluster>
   21480:	10003826 	beq	r2,zero,21564 <alt_up_sd_card_write+0x520>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   21484:	e0fffe0f 	ldh	r3,-8(fp)
   21488:	00800174 	movhi	r2,5
   2148c:	10bcfe04 	addi	r2,r2,-3080
   21490:	180691ba 	slli	r3,r3,6
   21494:	18c00704 	addi	r3,r3,28
   21498:	10c5883a 	add	r2,r2,r3
   2149c:	10c00017 	ldw	r3,0(r2)
   214a0:	e0bffd17 	ldw	r2,-12(fp)
   214a4:	10bfffcc 	andi	r2,r2,65535
   214a8:	10a0001c 	xori	r2,r2,32768
   214ac:	10a00004 	addi	r2,r2,-32768
   214b0:	1809883a 	mov	r4,r3
   214b4:	100b883a 	mov	r5,r2
   214b8:	01800044 	movi	r6,1
   214bc:	001d8080 	call	1d808 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   214c0:	e0bffd17 	ldw	r2,-12(fp)
   214c4:	1009883a 	mov	r4,r2
   214c8:	017fffc4 	movi	r5,-1
   214cc:	01800044 	movi	r6,1
   214d0:	001d8080 	call	1d808 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   214d4:	e0fffe0f 	ldh	r3,-8(fp)
   214d8:	00800174 	movhi	r2,5
   214dc:	10bcfe04 	addi	r2,r2,-3080
   214e0:	180691ba 	slli	r3,r3,6
   214e4:	18c00704 	addi	r3,r3,28
   214e8:	10c5883a 	add	r2,r2,r3
   214ec:	10c00017 	ldw	r3,0(r2)
   214f0:	e0bffd17 	ldw	r2,-12(fp)
   214f4:	10bfffcc 	andi	r2,r2,65535
   214f8:	10a0001c 	xori	r2,r2,32768
   214fc:	10a00004 	addi	r2,r2,-32768
   21500:	1809883a 	mov	r4,r3
   21504:	100b883a 	mov	r5,r2
   21508:	000d883a 	mov	r6,zero
   2150c:	001d8080 	call	1d808 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   21510:	e0bffd17 	ldw	r2,-12(fp)
   21514:	1009883a 	mov	r4,r2
   21518:	017fffc4 	movi	r5,-1
   2151c:	000d883a 	mov	r6,zero
   21520:	001d8080 	call	1d808 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   21524:	e13ffe0f 	ldh	r4,-8(fp)
   21528:	e0fffd17 	ldw	r3,-12(fp)
   2152c:	00800174 	movhi	r2,5
   21530:	10bcfe04 	addi	r2,r2,-3080
   21534:	200891ba 	slli	r4,r4,6
   21538:	21000704 	addi	r4,r4,28
   2153c:	1105883a 	add	r2,r2,r4
   21540:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   21544:	e0fffe0f 	ldh	r3,-8(fp)
   21548:	00800174 	movhi	r2,5
   2154c:	10bcfe04 	addi	r2,r2,-3080
   21550:	180691ba 	slli	r3,r3,6
   21554:	18c00804 	addi	r3,r3,32
   21558:	10c5883a 	add	r2,r2,r3
   2155c:	10000015 	stw	zero,0(r2)
   21560:	00001506 	br	215b8 <alt_up_sd_card_write+0x574>
						}
						else
						{
							return false;
   21564:	0005883a 	mov	r2,zero
   21568:	00007906 	br	21750 <alt_up_sd_card_write+0x70c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   2156c:	e13ffe0f 	ldh	r4,-8(fp)
   21570:	e0fffe0f 	ldh	r3,-8(fp)
   21574:	00800174 	movhi	r2,5
   21578:	10bcfe04 	addi	r2,r2,-3080
   2157c:	180691ba 	slli	r3,r3,6
   21580:	18c00904 	addi	r3,r3,36
   21584:	10c5883a 	add	r2,r2,r3
   21588:	10c00017 	ldw	r3,0(r2)
   2158c:	00800174 	movhi	r2,5
   21590:	10bce904 	addi	r2,r2,-3164
   21594:	1080030b 	ldhu	r2,12(r2)
   21598:	10bfffcc 	andi	r2,r2,65535
   2159c:	1887203a 	divu	r3,r3,r2
   215a0:	00800174 	movhi	r2,5
   215a4:	10bcfe04 	addi	r2,r2,-3080
   215a8:	200891ba 	slli	r4,r4,6
   215ac:	21000804 	addi	r4,r4,32
   215b0:	1105883a 	add	r2,r2,r4
   215b4:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   215b8:	00800174 	movhi	r2,5
   215bc:	10bce904 	addi	r2,r2,-3164
   215c0:	10c01417 	ldw	r3,80(r2)
   215c4:	e13ffe0f 	ldh	r4,-8(fp)
   215c8:	00800174 	movhi	r2,5
   215cc:	10bcfe04 	addi	r2,r2,-3080
   215d0:	200891ba 	slli	r4,r4,6
   215d4:	21000704 	addi	r4,r4,28
   215d8:	1105883a 	add	r2,r2,r4
   215dc:	10800017 	ldw	r2,0(r2)
   215e0:	113fff84 	addi	r4,r2,-2
   215e4:	00800174 	movhi	r2,5
   215e8:	10bce904 	addi	r2,r2,-3164
   215ec:	10800383 	ldbu	r2,14(r2)
   215f0:	10803fcc 	andi	r2,r2,255
   215f4:	2085383a 	mul	r2,r4,r2
   215f8:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   215fc:	e13ffe0f 	ldh	r4,-8(fp)
   21600:	00800174 	movhi	r2,5
   21604:	10bcfe04 	addi	r2,r2,-3080
   21608:	200891ba 	slli	r4,r4,6
   2160c:	21000804 	addi	r4,r4,32
   21610:	1105883a 	add	r2,r2,r4
   21614:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   21618:	1885883a 	add	r2,r3,r2
   2161c:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   21620:	d0e85a17 	ldw	r3,-24216(gp)
   21624:	e0bffa17 	ldw	r2,-24(fp)
   21628:	1885883a 	add	r2,r3,r2
   2162c:	1007883a 	mov	r3,r2
   21630:	d0a85e17 	ldw	r2,-24200(gp)
   21634:	18800726 	beq	r3,r2,21654 <alt_up_sd_card_write+0x610>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   21638:	d0a85a17 	ldw	r2,-24216(gp)
   2163c:	e13ffa17 	ldw	r4,-24(fp)
   21640:	100b883a 	mov	r5,r2
   21644:	001d67c0 	call	1d67c <Read_Sector_Data>
   21648:	1000021e 	bne	r2,zero,21654 <alt_up_sd_card_write+0x610>
                {
					return false;
   2164c:	0005883a 	mov	r2,zero
   21650:	00003f06 	br	21750 <alt_up_sd_card_write+0x70c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   21654:	d0e85917 	ldw	r3,-24220(gp)
   21658:	e0bffb0f 	ldh	r2,-20(fp)
   2165c:	1885883a 	add	r2,r3,r2
   21660:	e0ffff07 	ldb	r3,-4(fp)
   21664:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   21668:	e13ffe0f 	ldh	r4,-8(fp)
   2166c:	e0fffe0f 	ldh	r3,-8(fp)
   21670:	00800174 	movhi	r2,5
   21674:	10bcfe04 	addi	r2,r2,-3080
   21678:	180691ba 	slli	r3,r3,6
   2167c:	18c00904 	addi	r3,r3,36
   21680:	10c5883a 	add	r2,r2,r3
   21684:	10800017 	ldw	r2,0(r2)
   21688:	10c00044 	addi	r3,r2,1
   2168c:	00800174 	movhi	r2,5
   21690:	10bcfe04 	addi	r2,r2,-3080
   21694:	200891ba 	slli	r4,r4,6
   21698:	21000904 	addi	r4,r4,36
   2169c:	1105883a 	add	r2,r2,r4
   216a0:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   216a4:	e0fffe0f 	ldh	r3,-8(fp)
   216a8:	00800174 	movhi	r2,5
   216ac:	10bcfe04 	addi	r2,r2,-3080
   216b0:	180691ba 	slli	r3,r3,6
   216b4:	18c00904 	addi	r3,r3,36
   216b8:	10c5883a 	add	r2,r2,r3
   216bc:	10c00017 	ldw	r3,0(r2)
   216c0:	e13ffe0f 	ldh	r4,-8(fp)
   216c4:	00800174 	movhi	r2,5
   216c8:	10bcfe04 	addi	r2,r2,-3080
   216cc:	200891ba 	slli	r4,r4,6
   216d0:	21000604 	addi	r4,r4,24
   216d4:	1105883a 	add	r2,r2,r4
   216d8:	10800017 	ldw	r2,0(r2)
   216dc:	18801736 	bltu	r3,r2,2173c <alt_up_sd_card_write+0x6f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   216e0:	e13ffe0f 	ldh	r4,-8(fp)
   216e4:	e0fffe0f 	ldh	r3,-8(fp)
   216e8:	00800174 	movhi	r2,5
   216ec:	10bcfe04 	addi	r2,r2,-3080
   216f0:	180691ba 	slli	r3,r3,6
   216f4:	18c00604 	addi	r3,r3,24
   216f8:	10c5883a 	add	r2,r2,r3
   216fc:	10800017 	ldw	r2,0(r2)
   21700:	10c00044 	addi	r3,r2,1
   21704:	00800174 	movhi	r2,5
   21708:	10bcfe04 	addi	r2,r2,-3080
   2170c:	200891ba 	slli	r4,r4,6
   21710:	21000604 	addi	r4,r4,24
   21714:	1105883a 	add	r2,r2,r4
   21718:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   2171c:	e0fffe0f 	ldh	r3,-8(fp)
   21720:	00800174 	movhi	r2,5
   21724:	10bcfe04 	addi	r2,r2,-3080
   21728:	180691ba 	slli	r3,r3,6
   2172c:	18c00e04 	addi	r3,r3,56
   21730:	10c5883a 	add	r2,r2,r3
   21734:	00c00044 	movi	r3,1
   21738:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   2173c:	00800044 	movi	r2,1
   21740:	d0a85d15 	stw	r2,-24204(gp)
			result = true;
   21744:	00800044 	movi	r2,1
   21748:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
   2174c:	e0bff917 	ldw	r2,-28(fp)
}
   21750:	e037883a 	mov	sp,fp
   21754:	dfc00117 	ldw	ra,4(sp)
   21758:	df000017 	ldw	fp,0(sp)
   2175c:	dec00204 	addi	sp,sp,8
   21760:	f800283a 	ret

00021764 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   21764:	defffb04 	addi	sp,sp,-20
   21768:	dfc00415 	stw	ra,16(sp)
   2176c:	df000315 	stw	fp,12(sp)
   21770:	df000304 	addi	fp,sp,12
   21774:	2005883a 	mov	r2,r4
   21778:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   2177c:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   21780:	00202900 	call	20290 <alt_up_sd_card_is_Present>
   21784:	10006026 	beq	r2,zero,21908 <alt_up_sd_card_fclose+0x1a4>
   21788:	d0a85317 	ldw	r2,-24244(gp)
   2178c:	10005e26 	beq	r2,zero,21908 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   21790:	e0ffff0f 	ldh	r3,-4(fp)
   21794:	00800174 	movhi	r2,5
   21798:	10bcfe04 	addi	r2,r2,-3080
   2179c:	180691ba 	slli	r3,r3,6
   217a0:	18c00f04 	addi	r3,r3,60
   217a4:	10c5883a 	add	r2,r2,r3
   217a8:	10800017 	ldw	r2,0(r2)
   217ac:	10005626 	beq	r2,zero,21908 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   217b0:	e0ffff0f 	ldh	r3,-4(fp)
   217b4:	00800174 	movhi	r2,5
   217b8:	10bcfe04 	addi	r2,r2,-3080
   217bc:	180691ba 	slli	r3,r3,6
   217c0:	18c00e04 	addi	r3,r3,56
   217c4:	10c5883a 	add	r2,r2,r3
   217c8:	10800017 	ldw	r2,0(r2)
   217cc:	10004526 	beq	r2,zero,218e4 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   217d0:	e0ffff0f 	ldh	r3,-4(fp)
   217d4:	00800174 	movhi	r2,5
   217d8:	10bcfe04 	addi	r2,r2,-3080
   217dc:	180691ba 	slli	r3,r3,6
   217e0:	18c00b04 	addi	r3,r3,44
   217e4:	10c5883a 	add	r2,r2,r3
   217e8:	10800017 	ldw	r2,0(r2)
   217ec:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   217f0:	e0ffff0f 	ldh	r3,-4(fp)
   217f4:	00800174 	movhi	r2,5
   217f8:	10bcfe04 	addi	r2,r2,-3080
   217fc:	180691ba 	slli	r3,r3,6
   21800:	18c00a04 	addi	r3,r3,40
   21804:	10c5883a 	add	r2,r2,r3
   21808:	10800017 	ldw	r2,0(r2)
   2180c:	1000071e 	bne	r2,zero,2182c <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   21810:	00800174 	movhi	r2,5
   21814:	10bce904 	addi	r2,r2,-3164
   21818:	10801317 	ldw	r2,76(r2)
   2181c:	e0fffe17 	ldw	r3,-8(fp)
   21820:	1885883a 	add	r2,r3,r2
   21824:	e0bffe15 	stw	r2,-8(fp)
   21828:	00001406 	br	2187c <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   2182c:	00800174 	movhi	r2,5
   21830:	10bce904 	addi	r2,r2,-3164
   21834:	10c01417 	ldw	r3,80(r2)
   21838:	e0bffe17 	ldw	r2,-8(fp)
   2183c:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   21840:	e13fff0f 	ldh	r4,-4(fp)
   21844:	00800174 	movhi	r2,5
   21848:	10bcfe04 	addi	r2,r2,-3080
   2184c:	200891ba 	slli	r4,r4,6
   21850:	21000a04 	addi	r4,r4,40
   21854:	1105883a 	add	r2,r2,r4
   21858:	10800017 	ldw	r2,0(r2)
   2185c:	113fff84 	addi	r4,r2,-2
   21860:	00800174 	movhi	r2,5
   21864:	10bce904 	addi	r2,r2,-3164
   21868:	10800383 	ldbu	r2,14(r2)
   2186c:	10803fcc 	andi	r2,r2,255
   21870:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   21874:	1885883a 	add	r2,r3,r2
   21878:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   2187c:	e0fffe17 	ldw	r3,-8(fp)
   21880:	d0a85a17 	ldw	r2,-24216(gp)
   21884:	1809883a 	mov	r4,r3
   21888:	100b883a 	mov	r5,r2
   2188c:	001d67c0 	call	1d67c <Read_Sector_Data>
   21890:	10001426 	beq	r2,zero,218e4 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   21894:	e0ffff0f 	ldh	r3,-4(fp)
   21898:	00800174 	movhi	r2,5
   2189c:	10bcfe04 	addi	r2,r2,-3080
   218a0:	180691ba 	slli	r3,r3,6
   218a4:	18c00c04 	addi	r3,r3,48
   218a8:	10c5883a 	add	r2,r2,r3
   218ac:	1080000b 	ldhu	r2,0(r2)
   218b0:	113fffcc 	andi	r4,r2,65535
   218b4:	2120001c 	xori	r4,r4,32768
   218b8:	21200004 	addi	r4,r4,-32768
   218bc:	e0bfff0f 	ldh	r2,-4(fp)
   218c0:	100691ba 	slli	r3,r2,6
   218c4:	00800174 	movhi	r2,5
   218c8:	10bcfe04 	addi	r2,r2,-3080
   218cc:	1885883a 	add	r2,r3,r2
   218d0:	100b883a 	mov	r5,r2
   218d4:	001dd100 	call	1dd10 <Write_File_Record_At_Offset>
   218d8:	10000226 	beq	r2,zero,218e4 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   218dc:	001d6300 	call	1d630 <Save_Modified_Sector>
   218e0:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   218e4:	e0ffff0f 	ldh	r3,-4(fp)
   218e8:	00800174 	movhi	r2,5
   218ec:	10bcfe04 	addi	r2,r2,-3080
   218f0:	180691ba 	slli	r3,r3,6
   218f4:	18c00f04 	addi	r3,r3,60
   218f8:	10c5883a 	add	r2,r2,r3
   218fc:	10000015 	stw	zero,0(r2)
			result = true;
   21900:	00800044 	movi	r2,1
   21904:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   21908:	e0bffd17 	ldw	r2,-12(fp)
}
   2190c:	e037883a 	mov	sp,fp
   21910:	dfc00117 	ldw	ra,4(sp)
   21914:	df000017 	ldw	fp,0(sp)
   21918:	dec00204 	addi	sp,sp,8
   2191c:	f800283a 	ret

00021920 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21920:	defffa04 	addi	sp,sp,-24
   21924:	dfc00515 	stw	ra,20(sp)
   21928:	df000415 	stw	fp,16(sp)
   2192c:	df000404 	addi	fp,sp,16
   21930:	e13ffd15 	stw	r4,-12(fp)
   21934:	e17ffe15 	stw	r5,-8(fp)
   21938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2193c:	e0bffd17 	ldw	r2,-12(fp)
   21940:	10800017 	ldw	r2,0(r2)
   21944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21948:	e0bffc17 	ldw	r2,-16(fp)
   2194c:	10c00a04 	addi	r3,r2,40
   21950:	e0bffd17 	ldw	r2,-12(fp)
   21954:	10800217 	ldw	r2,8(r2)
   21958:	1809883a 	mov	r4,r3
   2195c:	e17ffe17 	ldw	r5,-8(fp)
   21960:	e1bfff17 	ldw	r6,-4(fp)
   21964:	100f883a 	mov	r7,r2
   21968:	00220d00 	call	220d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2196c:	e037883a 	mov	sp,fp
   21970:	dfc00117 	ldw	ra,4(sp)
   21974:	df000017 	ldw	fp,0(sp)
   21978:	dec00204 	addi	sp,sp,8
   2197c:	f800283a 	ret

00021980 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21980:	defffa04 	addi	sp,sp,-24
   21984:	dfc00515 	stw	ra,20(sp)
   21988:	df000415 	stw	fp,16(sp)
   2198c:	df000404 	addi	fp,sp,16
   21990:	e13ffd15 	stw	r4,-12(fp)
   21994:	e17ffe15 	stw	r5,-8(fp)
   21998:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2199c:	e0bffd17 	ldw	r2,-12(fp)
   219a0:	10800017 	ldw	r2,0(r2)
   219a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   219a8:	e0bffc17 	ldw	r2,-16(fp)
   219ac:	10c00a04 	addi	r3,r2,40
   219b0:	e0bffd17 	ldw	r2,-12(fp)
   219b4:	10800217 	ldw	r2,8(r2)
   219b8:	1809883a 	mov	r4,r3
   219bc:	e17ffe17 	ldw	r5,-8(fp)
   219c0:	e1bfff17 	ldw	r6,-4(fp)
   219c4:	100f883a 	mov	r7,r2
   219c8:	00223840 	call	22384 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   219cc:	e037883a 	mov	sp,fp
   219d0:	dfc00117 	ldw	ra,4(sp)
   219d4:	df000017 	ldw	fp,0(sp)
   219d8:	dec00204 	addi	sp,sp,8
   219dc:	f800283a 	ret

000219e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   219e0:	defffc04 	addi	sp,sp,-16
   219e4:	dfc00315 	stw	ra,12(sp)
   219e8:	df000215 	stw	fp,8(sp)
   219ec:	df000204 	addi	fp,sp,8
   219f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   219f4:	e0bfff17 	ldw	r2,-4(fp)
   219f8:	10800017 	ldw	r2,0(r2)
   219fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21a00:	e0bffe17 	ldw	r2,-8(fp)
   21a04:	10c00a04 	addi	r3,r2,40
   21a08:	e0bfff17 	ldw	r2,-4(fp)
   21a0c:	10800217 	ldw	r2,8(r2)
   21a10:	1809883a 	mov	r4,r3
   21a14:	100b883a 	mov	r5,r2
   21a18:	0021f7c0 	call	21f7c <altera_avalon_jtag_uart_close>
}
   21a1c:	e037883a 	mov	sp,fp
   21a20:	dfc00117 	ldw	ra,4(sp)
   21a24:	df000017 	ldw	fp,0(sp)
   21a28:	dec00204 	addi	sp,sp,8
   21a2c:	f800283a 	ret

00021a30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21a30:	defffa04 	addi	sp,sp,-24
   21a34:	dfc00515 	stw	ra,20(sp)
   21a38:	df000415 	stw	fp,16(sp)
   21a3c:	df000404 	addi	fp,sp,16
   21a40:	e13ffd15 	stw	r4,-12(fp)
   21a44:	e17ffe15 	stw	r5,-8(fp)
   21a48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21a4c:	e0bffd17 	ldw	r2,-12(fp)
   21a50:	10800017 	ldw	r2,0(r2)
   21a54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21a58:	e0bffc17 	ldw	r2,-16(fp)
   21a5c:	10800a04 	addi	r2,r2,40
   21a60:	1009883a 	mov	r4,r2
   21a64:	e17ffe17 	ldw	r5,-8(fp)
   21a68:	e1bfff17 	ldw	r6,-4(fp)
   21a6c:	0021fe40 	call	21fe4 <altera_avalon_jtag_uart_ioctl>
}
   21a70:	e037883a 	mov	sp,fp
   21a74:	dfc00117 	ldw	ra,4(sp)
   21a78:	df000017 	ldw	fp,0(sp)
   21a7c:	dec00204 	addi	sp,sp,8
   21a80:	f800283a 	ret

00021a84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21a84:	defff104 	addi	sp,sp,-60
   21a88:	dfc00e15 	stw	ra,56(sp)
   21a8c:	df000d15 	stw	fp,52(sp)
   21a90:	df000d04 	addi	fp,sp,52
   21a94:	e13ff915 	stw	r4,-28(fp)
   21a98:	e17ffa15 	stw	r5,-24(fp)
   21a9c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   21aa0:	e0bff917 	ldw	r2,-28(fp)
   21aa4:	10800c04 	addi	r2,r2,48
   21aa8:	e0bff315 	stw	r2,-52(fp)
   21aac:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   21ab0:	e0fff40b 	ldhu	r3,-48(fp)
   21ab4:	e0bff884 	addi	r2,fp,-30
   21ab8:	1809883a 	mov	r4,r3
   21abc:	100b883a 	mov	r5,r2
   21ac0:	0016da40 	call	16da4 <OSFlagCreate>
   21ac4:	1007883a 	mov	r3,r2
   21ac8:	e0bff317 	ldw	r2,-52(fp)
   21acc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   21ad0:	e0bff917 	ldw	r2,-28(fp)
   21ad4:	10800a04 	addi	r2,r2,40
   21ad8:	e0bff515 	stw	r2,-44(fp)
   21adc:	00800044 	movi	r2,1
   21ae0:	e0bff60d 	sth	r2,-40(fp)
   21ae4:	e0bff60b 	ldhu	r2,-40(fp)
   21ae8:	1009883a 	mov	r4,r2
   21aec:	001a8840 	call	1a884 <OSSemCreate>
   21af0:	1007883a 	mov	r3,r2
   21af4:	e0bff517 	ldw	r2,-44(fp)
   21af8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   21afc:	e0bff917 	ldw	r2,-28(fp)
   21b00:	10800b04 	addi	r2,r2,44
   21b04:	e0bff715 	stw	r2,-36(fp)
   21b08:	00800044 	movi	r2,1
   21b0c:	e0bff80d 	sth	r2,-32(fp)
   21b10:	e0bff80b 	ldhu	r2,-32(fp)
   21b14:	1009883a 	mov	r4,r2
   21b18:	001a8840 	call	1a884 <OSSemCreate>
   21b1c:	1007883a 	mov	r3,r2
   21b20:	e0bff717 	ldw	r2,-36(fp)
   21b24:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21b28:	e0bff917 	ldw	r2,-28(fp)
   21b2c:	00c00044 	movi	r3,1
   21b30:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21b34:	e0bff917 	ldw	r2,-28(fp)
   21b38:	10800017 	ldw	r2,0(r2)
   21b3c:	10800104 	addi	r2,r2,4
   21b40:	1007883a 	mov	r3,r2
   21b44:	e0bff917 	ldw	r2,-28(fp)
   21b48:	10800817 	ldw	r2,32(r2)
   21b4c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   21b50:	e0bffb17 	ldw	r2,-20(fp)
   21b54:	1009883a 	mov	r4,r2
   21b58:	e17ff917 	ldw	r5,-28(fp)
   21b5c:	018000b4 	movhi	r6,2
   21b60:	3186f104 	addi	r6,r6,7108
   21b64:	00242040 	call	24204 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21b68:	e0bff917 	ldw	r2,-28(fp)
   21b6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21b70:	e0bff917 	ldw	r2,-28(fp)
   21b74:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21b78:	008000f4 	movhi	r2,3
   21b7c:	10a81a04 	addi	r2,r2,-24472
   21b80:	10800017 	ldw	r2,0(r2)
   21b84:	1809883a 	mov	r4,r3
   21b88:	100b883a 	mov	r5,r2
   21b8c:	018000b4 	movhi	r6,2
   21b90:	31879b04 	addi	r6,r6,7788
   21b94:	e1fff917 	ldw	r7,-28(fp)
   21b98:	0023d040 	call	23d04 <alt_alarm_start>
   21b9c:	1000040e 	bge	r2,zero,21bb0 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21ba0:	e0fff917 	ldw	r3,-28(fp)
   21ba4:	00a00034 	movhi	r2,32768
   21ba8:	10bfffc4 	addi	r2,r2,-1
   21bac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21bb0:	e037883a 	mov	sp,fp
   21bb4:	dfc00117 	ldw	ra,4(sp)
   21bb8:	df000017 	ldw	fp,0(sp)
   21bbc:	dec00204 	addi	sp,sp,8
   21bc0:	f800283a 	ret

00021bc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21bc4:	defff104 	addi	sp,sp,-60
   21bc8:	dfc00e15 	stw	ra,56(sp)
   21bcc:	df000d15 	stw	fp,52(sp)
   21bd0:	df000d04 	addi	fp,sp,52
   21bd4:	e13ffe15 	stw	r4,-8(fp)
   21bd8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21bdc:	e0bffe17 	ldw	r2,-8(fp)
   21be0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   21be4:	e0bff517 	ldw	r2,-44(fp)
   21be8:	10800017 	ldw	r2,0(r2)
   21bec:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21bf0:	e0bff617 	ldw	r2,-40(fp)
   21bf4:	10800104 	addi	r2,r2,4
   21bf8:	10800037 	ldwio	r2,0(r2)
   21bfc:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21c00:	e0bff717 	ldw	r2,-36(fp)
   21c04:	1080c00c 	andi	r2,r2,768
   21c08:	1000011e 	bne	r2,zero,21c10 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   21c0c:	00009206 	br	21e58 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21c10:	e0bff717 	ldw	r2,-36(fp)
   21c14:	1080400c 	andi	r2,r2,256
   21c18:	10004726 	beq	r2,zero,21d38 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21c1c:	00800074 	movhi	r2,1
   21c20:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21c24:	e0bff517 	ldw	r2,-44(fp)
   21c28:	10800d17 	ldw	r2,52(r2)
   21c2c:	10800044 	addi	r2,r2,1
   21c30:	1081ffcc 	andi	r2,r2,2047
   21c34:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   21c38:	e0bff517 	ldw	r2,-44(fp)
   21c3c:	10c00e17 	ldw	r3,56(r2)
   21c40:	e0bff817 	ldw	r2,-32(fp)
   21c44:	1880011e 	bne	r3,r2,21c4c <altera_avalon_jtag_uart_irq+0x88>
          break;
   21c48:	00002906 	br	21cf0 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21c4c:	e0bff617 	ldw	r2,-40(fp)
   21c50:	10800037 	ldwio	r2,0(r2)
   21c54:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21c58:	e0bff317 	ldw	r2,-52(fp)
   21c5c:	10a0000c 	andi	r2,r2,32768
   21c60:	1000011e 	bne	r2,zero,21c68 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   21c64:	00002206 	br	21cf0 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21c68:	e0bff517 	ldw	r2,-44(fp)
   21c6c:	10800d17 	ldw	r2,52(r2)
   21c70:	e0fff317 	ldw	r3,-52(fp)
   21c74:	1809883a 	mov	r4,r3
   21c78:	e0fff517 	ldw	r3,-44(fp)
   21c7c:	1885883a 	add	r2,r3,r2
   21c80:	10801104 	addi	r2,r2,68
   21c84:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21c88:	e0bff517 	ldw	r2,-44(fp)
   21c8c:	10800d17 	ldw	r2,52(r2)
   21c90:	10800044 	addi	r2,r2,1
   21c94:	10c1ffcc 	andi	r3,r2,2047
   21c98:	e0bff517 	ldw	r2,-44(fp)
   21c9c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   21ca0:	e0bff517 	ldw	r2,-44(fp)
   21ca4:	10800c17 	ldw	r2,48(r2)
   21ca8:	e0bff915 	stw	r2,-28(fp)
   21cac:	00800044 	movi	r2,1
   21cb0:	e0bffa0d 	sth	r2,-24(fp)
   21cb4:	00800044 	movi	r2,1
   21cb8:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21cbc:	008000f4 	movhi	r2,3
   21cc0:	10a7f844 	addi	r2,r2,-24607
   21cc4:	10800003 	ldbu	r2,0(r2)
   21cc8:	10803fcc 	andi	r2,r2,255
   21ccc:	103fd526 	beq	r2,zero,21c24 <__alt_mem_Flash_flash_data+0xf4021c24>
  {
    OSFlagPost (group, flags, opt, &err);
   21cd0:	e17ffa0b 	ldhu	r5,-24(fp)
   21cd4:	e0fffa83 	ldbu	r3,-22(fp)
   21cd8:	e0bffcc4 	addi	r2,fp,-13
   21cdc:	e13ff917 	ldw	r4,-28(fp)
   21ce0:	180d883a 	mov	r6,r3
   21ce4:	100f883a 	mov	r7,r2
   21ce8:	0017a140 	call	17a14 <OSFlagPost>
      }
   21cec:	003fcd06 	br	21c24 <__alt_mem_Flash_flash_data+0xf4021c24>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21cf0:	e0bff317 	ldw	r2,-52(fp)
   21cf4:	10bfffec 	andhi	r2,r2,65535
   21cf8:	10000f26 	beq	r2,zero,21d38 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21cfc:	e0bff517 	ldw	r2,-44(fp)
   21d00:	10c00817 	ldw	r3,32(r2)
   21d04:	00bfff84 	movi	r2,-2
   21d08:	1886703a 	and	r3,r3,r2
   21d0c:	e0bff517 	ldw	r2,-44(fp)
   21d10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21d14:	e0bff617 	ldw	r2,-40(fp)
   21d18:	10800104 	addi	r2,r2,4
   21d1c:	1007883a 	mov	r3,r2
   21d20:	e0bff517 	ldw	r2,-44(fp)
   21d24:	10800817 	ldw	r2,32(r2)
   21d28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21d2c:	e0bff617 	ldw	r2,-40(fp)
   21d30:	10800104 	addi	r2,r2,4
   21d34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21d38:	e0bff717 	ldw	r2,-36(fp)
   21d3c:	1080800c 	andi	r2,r2,512
   21d40:	10004426 	beq	r2,zero,21e54 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21d44:	e0bff717 	ldw	r2,-36(fp)
   21d48:	1004d43a 	srli	r2,r2,16
   21d4c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21d50:	00002706 	br	21df0 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21d54:	e0bff617 	ldw	r2,-40(fp)
   21d58:	e0fff517 	ldw	r3,-44(fp)
   21d5c:	18c01017 	ldw	r3,64(r3)
   21d60:	e13ff517 	ldw	r4,-44(fp)
   21d64:	20c7883a 	add	r3,r4,r3
   21d68:	18c21104 	addi	r3,r3,2116
   21d6c:	18c00003 	ldbu	r3,0(r3)
   21d70:	18c03fcc 	andi	r3,r3,255
   21d74:	18c0201c 	xori	r3,r3,128
   21d78:	18ffe004 	addi	r3,r3,-128
   21d7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d80:	e0bff517 	ldw	r2,-44(fp)
   21d84:	10801017 	ldw	r2,64(r2)
   21d88:	10800044 	addi	r2,r2,1
   21d8c:	10c1ffcc 	andi	r3,r2,2047
   21d90:	e0bff517 	ldw	r2,-44(fp)
   21d94:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   21d98:	e0bff517 	ldw	r2,-44(fp)
   21d9c:	10800c17 	ldw	r2,48(r2)
   21da0:	e0bffb15 	stw	r2,-20(fp)
   21da4:	00800084 	movi	r2,2
   21da8:	e0bffc0d 	sth	r2,-16(fp)
   21dac:	00800044 	movi	r2,1
   21db0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21db4:	008000f4 	movhi	r2,3
   21db8:	10a7f844 	addi	r2,r2,-24607
   21dbc:	10800003 	ldbu	r2,0(r2)
   21dc0:	10803fcc 	andi	r2,r2,255
   21dc4:	10000726 	beq	r2,zero,21de4 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   21dc8:	e17ffc0b 	ldhu	r5,-16(fp)
   21dcc:	e0fffc83 	ldbu	r3,-14(fp)
   21dd0:	e0bffd04 	addi	r2,fp,-12
   21dd4:	e13ffb17 	ldw	r4,-20(fp)
   21dd8:	180d883a 	mov	r6,r3
   21ddc:	100f883a 	mov	r7,r2
   21de0:	0017a140 	call	17a14 <OSFlagPost>

        space--;
   21de4:	e0bff417 	ldw	r2,-48(fp)
   21de8:	10bfffc4 	addi	r2,r2,-1
   21dec:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21df0:	e0bff417 	ldw	r2,-48(fp)
   21df4:	10000526 	beq	r2,zero,21e0c <altera_avalon_jtag_uart_irq+0x248>
   21df8:	e0bff517 	ldw	r2,-44(fp)
   21dfc:	10c01017 	ldw	r3,64(r2)
   21e00:	e0bff517 	ldw	r2,-44(fp)
   21e04:	10800f17 	ldw	r2,60(r2)
   21e08:	18bfd21e 	bne	r3,r2,21d54 <__alt_mem_Flash_flash_data+0xf4021d54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21e0c:	e0bff417 	ldw	r2,-48(fp)
   21e10:	10001026 	beq	r2,zero,21e54 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21e14:	e0bff517 	ldw	r2,-44(fp)
   21e18:	10c00817 	ldw	r3,32(r2)
   21e1c:	00bfff44 	movi	r2,-3
   21e20:	1886703a 	and	r3,r3,r2
   21e24:	e0bff517 	ldw	r2,-44(fp)
   21e28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21e2c:	e0bff517 	ldw	r2,-44(fp)
   21e30:	10800017 	ldw	r2,0(r2)
   21e34:	10800104 	addi	r2,r2,4
   21e38:	1007883a 	mov	r3,r2
   21e3c:	e0bff517 	ldw	r2,-44(fp)
   21e40:	10800817 	ldw	r2,32(r2)
   21e44:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21e48:	e0bff617 	ldw	r2,-40(fp)
   21e4c:	10800104 	addi	r2,r2,4
   21e50:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21e54:	003f6606 	br	21bf0 <__alt_mem_Flash_flash_data+0xf4021bf0>
}
   21e58:	e037883a 	mov	sp,fp
   21e5c:	dfc00117 	ldw	ra,4(sp)
   21e60:	df000017 	ldw	fp,0(sp)
   21e64:	dec00204 	addi	sp,sp,8
   21e68:	f800283a 	ret

00021e6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21e6c:	defff904 	addi	sp,sp,-28
   21e70:	dfc00615 	stw	ra,24(sp)
   21e74:	df000515 	stw	fp,20(sp)
   21e78:	df000504 	addi	fp,sp,20
   21e7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21e80:	e0bfff17 	ldw	r2,-4(fp)
   21e84:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21e88:	e0bffb17 	ldw	r2,-20(fp)
   21e8c:	10800017 	ldw	r2,0(r2)
   21e90:	10800104 	addi	r2,r2,4
   21e94:	10800037 	ldwio	r2,0(r2)
   21e98:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21e9c:	e0bffc17 	ldw	r2,-16(fp)
   21ea0:	1081000c 	andi	r2,r2,1024
   21ea4:	10000b26 	beq	r2,zero,21ed4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21ea8:	e0bffb17 	ldw	r2,-20(fp)
   21eac:	10800017 	ldw	r2,0(r2)
   21eb0:	10800104 	addi	r2,r2,4
   21eb4:	1007883a 	mov	r3,r2
   21eb8:	e0bffb17 	ldw	r2,-20(fp)
   21ebc:	10800817 	ldw	r2,32(r2)
   21ec0:	10810014 	ori	r2,r2,1024
   21ec4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21ec8:	e0bffb17 	ldw	r2,-20(fp)
   21ecc:	10000915 	stw	zero,36(r2)
   21ed0:	00002206 	br	21f5c <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21ed4:	e0bffb17 	ldw	r2,-20(fp)
   21ed8:	10c00917 	ldw	r3,36(r2)
   21edc:	00a00034 	movhi	r2,32768
   21ee0:	10bfff04 	addi	r2,r2,-4
   21ee4:	10c01d36 	bltu	r2,r3,21f5c <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   21ee8:	e0bffb17 	ldw	r2,-20(fp)
   21eec:	10800917 	ldw	r2,36(r2)
   21ef0:	10c00044 	addi	r3,r2,1
   21ef4:	e0bffb17 	ldw	r2,-20(fp)
   21ef8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   21efc:	e0bffb17 	ldw	r2,-20(fp)
   21f00:	10c00917 	ldw	r3,36(r2)
   21f04:	e0bffb17 	ldw	r2,-20(fp)
   21f08:	10800117 	ldw	r2,4(r2)
   21f0c:	18801336 	bltu	r3,r2,21f5c <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   21f10:	e0bffb17 	ldw	r2,-20(fp)
   21f14:	10800c17 	ldw	r2,48(r2)
   21f18:	e0bffd15 	stw	r2,-12(fp)
   21f1c:	00800104 	movi	r2,4
   21f20:	e0bffe0d 	sth	r2,-8(fp)
   21f24:	00800044 	movi	r2,1
   21f28:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   21f2c:	008000f4 	movhi	r2,3
   21f30:	10a7f844 	addi	r2,r2,-24607
   21f34:	10800003 	ldbu	r2,0(r2)
   21f38:	10803fcc 	andi	r2,r2,255
   21f3c:	10000726 	beq	r2,zero,21f5c <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   21f40:	e17ffe0b 	ldhu	r5,-8(fp)
   21f44:	e0fffe83 	ldbu	r3,-6(fp)
   21f48:	e0bffec4 	addi	r2,fp,-5
   21f4c:	e13ffd17 	ldw	r4,-12(fp)
   21f50:	180d883a 	mov	r6,r3
   21f54:	100f883a 	mov	r7,r2
   21f58:	0017a140 	call	17a14 <OSFlagPost>
   21f5c:	008000f4 	movhi	r2,3
   21f60:	10a81a04 	addi	r2,r2,-24472
   21f64:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   21f68:	e037883a 	mov	sp,fp
   21f6c:	dfc00117 	ldw	ra,4(sp)
   21f70:	df000017 	ldw	fp,0(sp)
   21f74:	dec00204 	addi	sp,sp,8
   21f78:	f800283a 	ret

00021f7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21f7c:	defffd04 	addi	sp,sp,-12
   21f80:	df000215 	stw	fp,8(sp)
   21f84:	df000204 	addi	fp,sp,8
   21f88:	e13ffe15 	stw	r4,-8(fp)
   21f8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21f90:	00000506 	br	21fa8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21f94:	e0bfff17 	ldw	r2,-4(fp)
   21f98:	1090000c 	andi	r2,r2,16384
   21f9c:	10000226 	beq	r2,zero,21fa8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21fa0:	00bffd44 	movi	r2,-11
   21fa4:	00000b06 	br	21fd4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21fa8:	e0bffe17 	ldw	r2,-8(fp)
   21fac:	10c01017 	ldw	r3,64(r2)
   21fb0:	e0bffe17 	ldw	r2,-8(fp)
   21fb4:	10800f17 	ldw	r2,60(r2)
   21fb8:	18800526 	beq	r3,r2,21fd0 <altera_avalon_jtag_uart_close+0x54>
   21fbc:	e0bffe17 	ldw	r2,-8(fp)
   21fc0:	10c00917 	ldw	r3,36(r2)
   21fc4:	e0bffe17 	ldw	r2,-8(fp)
   21fc8:	10800117 	ldw	r2,4(r2)
   21fcc:	18bff136 	bltu	r3,r2,21f94 <__alt_mem_Flash_flash_data+0xf4021f94>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21fd0:	0005883a 	mov	r2,zero
}
   21fd4:	e037883a 	mov	sp,fp
   21fd8:	df000017 	ldw	fp,0(sp)
   21fdc:	dec00104 	addi	sp,sp,4
   21fe0:	f800283a 	ret

00021fe4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21fe4:	defffa04 	addi	sp,sp,-24
   21fe8:	df000515 	stw	fp,20(sp)
   21fec:	df000504 	addi	fp,sp,20
   21ff0:	e13ffd15 	stw	r4,-12(fp)
   21ff4:	e17ffe15 	stw	r5,-8(fp)
   21ff8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   21ffc:	00bff9c4 	movi	r2,-25
   22000:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22004:	e0bffe17 	ldw	r2,-8(fp)
   22008:	10da8060 	cmpeqi	r3,r2,27137
   2200c:	1800031e 	bne	r3,zero,2201c <altera_avalon_jtag_uart_ioctl+0x38>
   22010:	109a80a0 	cmpeqi	r2,r2,27138
   22014:	1000191e 	bne	r2,zero,2207c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   22018:	00002806 	br	220bc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2201c:	e0bffd17 	ldw	r2,-12(fp)
   22020:	10c00117 	ldw	r3,4(r2)
   22024:	00a00034 	movhi	r2,32768
   22028:	10bfffc4 	addi	r2,r2,-1
   2202c:	18801226 	beq	r3,r2,22078 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   22030:	e0bfff17 	ldw	r2,-4(fp)
   22034:	10800017 	ldw	r2,0(r2)
   22038:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2203c:	e0bffc17 	ldw	r2,-16(fp)
   22040:	10800090 	cmplti	r2,r2,2
   22044:	1000061e 	bne	r2,zero,22060 <altera_avalon_jtag_uart_ioctl+0x7c>
   22048:	e0fffc17 	ldw	r3,-16(fp)
   2204c:	00a00034 	movhi	r2,32768
   22050:	10bfffc4 	addi	r2,r2,-1
   22054:	18800226 	beq	r3,r2,22060 <altera_avalon_jtag_uart_ioctl+0x7c>
   22058:	e0bffc17 	ldw	r2,-16(fp)
   2205c:	00000206 	br	22068 <altera_avalon_jtag_uart_ioctl+0x84>
   22060:	00a00034 	movhi	r2,32768
   22064:	10bfff84 	addi	r2,r2,-2
   22068:	e0fffd17 	ldw	r3,-12(fp)
   2206c:	18800115 	stw	r2,4(r3)
      rc = 0;
   22070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22074:	00001106 	br	220bc <altera_avalon_jtag_uart_ioctl+0xd8>
   22078:	00001006 	br	220bc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2207c:	e0bffd17 	ldw	r2,-12(fp)
   22080:	10c00117 	ldw	r3,4(r2)
   22084:	00a00034 	movhi	r2,32768
   22088:	10bfffc4 	addi	r2,r2,-1
   2208c:	18800a26 	beq	r3,r2,220b8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   22090:	e0bffd17 	ldw	r2,-12(fp)
   22094:	10c00917 	ldw	r3,36(r2)
   22098:	e0bffd17 	ldw	r2,-12(fp)
   2209c:	10800117 	ldw	r2,4(r2)
   220a0:	1885803a 	cmpltu	r2,r3,r2
   220a4:	10c03fcc 	andi	r3,r2,255
   220a8:	e0bfff17 	ldw	r2,-4(fp)
   220ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   220b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   220b4:	00000006 	br	220b8 <altera_avalon_jtag_uart_ioctl+0xd4>
   220b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   220bc:	e0bffb17 	ldw	r2,-20(fp)
}
   220c0:	e037883a 	mov	sp,fp
   220c4:	df000017 	ldw	fp,0(sp)
   220c8:	dec00104 	addi	sp,sp,4
   220cc:	f800283a 	ret

000220d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   220d0:	deffec04 	addi	sp,sp,-80
   220d4:	dfc01315 	stw	ra,76(sp)
   220d8:	df001215 	stw	fp,72(sp)
   220dc:	df001204 	addi	fp,sp,72
   220e0:	e13ffc15 	stw	r4,-16(fp)
   220e4:	e17ffd15 	stw	r5,-12(fp)
   220e8:	e1bffe15 	stw	r6,-8(fp)
   220ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   220f0:	e0bffd17 	ldw	r2,-12(fp)
   220f4:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   220f8:	e0bffc17 	ldw	r2,-16(fp)
   220fc:	10800a17 	ldw	r2,40(r2)
   22100:	e0bff415 	stw	r2,-48(fp)
   22104:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   22108:	e0fff50b 	ldhu	r3,-44(fp)
   2210c:	e0bffb04 	addi	r2,fp,-20
   22110:	e13ff417 	ldw	r4,-48(fp)
   22114:	180b883a 	mov	r5,r3
   22118:	100d883a 	mov	r6,r2
   2211c:	001abec0 	call	1abec <OSSemPend>

  while (space > 0)
   22120:	00006506 	br	222b8 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22124:	e0bffc17 	ldw	r2,-16(fp)
   22128:	10800d17 	ldw	r2,52(r2)
   2212c:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   22130:	e0bffc17 	ldw	r2,-16(fp)
   22134:	10800e17 	ldw	r2,56(r2)
   22138:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   2213c:	e0fff117 	ldw	r3,-60(fp)
   22140:	e0bff217 	ldw	r2,-56(fp)
   22144:	18800536 	bltu	r3,r2,2215c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   22148:	e0fff117 	ldw	r3,-60(fp)
   2214c:	e0bff217 	ldw	r2,-56(fp)
   22150:	1885c83a 	sub	r2,r3,r2
   22154:	e0bff015 	stw	r2,-64(fp)
   22158:	00000406 	br	2216c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2215c:	00c20004 	movi	r3,2048
   22160:	e0bff217 	ldw	r2,-56(fp)
   22164:	1885c83a 	sub	r2,r3,r2
   22168:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   2216c:	e0bff017 	ldw	r2,-64(fp)
   22170:	1000011e 	bne	r2,zero,22178 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   22174:	00001d06 	br	221ec <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   22178:	e0fffe17 	ldw	r3,-8(fp)
   2217c:	e0bff017 	ldw	r2,-64(fp)
   22180:	1880022e 	bgeu	r3,r2,2218c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   22184:	e0bffe17 	ldw	r2,-8(fp)
   22188:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2218c:	e0bff217 	ldw	r2,-56(fp)
   22190:	10801104 	addi	r2,r2,68
   22194:	e0fffc17 	ldw	r3,-16(fp)
   22198:	1885883a 	add	r2,r3,r2
   2219c:	e13fef17 	ldw	r4,-68(fp)
   221a0:	100b883a 	mov	r5,r2
   221a4:	e1bff017 	ldw	r6,-64(fp)
   221a8:	000be680 	call	be68 <memcpy>
      ptr   += n;
   221ac:	e0ffef17 	ldw	r3,-68(fp)
   221b0:	e0bff017 	ldw	r2,-64(fp)
   221b4:	1885883a 	add	r2,r3,r2
   221b8:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   221bc:	e0fffe17 	ldw	r3,-8(fp)
   221c0:	e0bff017 	ldw	r2,-64(fp)
   221c4:	1885c83a 	sub	r2,r3,r2
   221c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   221cc:	e0fff217 	ldw	r3,-56(fp)
   221d0:	e0bff017 	ldw	r2,-64(fp)
   221d4:	1885883a 	add	r2,r3,r2
   221d8:	10c1ffcc 	andi	r3,r2,2047
   221dc:	e0bffc17 	ldw	r2,-16(fp)
   221e0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   221e4:	e0bffe17 	ldw	r2,-8(fp)
   221e8:	00bfce16 	blt	zero,r2,22124 <__alt_mem_Flash_flash_data+0xf4022124>

    /* If we read any data then return it */
    if (ptr != buffer)
   221ec:	e0ffef17 	ldw	r3,-68(fp)
   221f0:	e0bffd17 	ldw	r2,-12(fp)
   221f4:	18800126 	beq	r3,r2,221fc <altera_avalon_jtag_uart_read+0x12c>
      break;
   221f8:	00003106 	br	222c0 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   221fc:	e0bfff17 	ldw	r2,-4(fp)
   22200:	1090000c 	andi	r2,r2,16384
   22204:	10000126 	beq	r2,zero,2220c <altera_avalon_jtag_uart_read+0x13c>
      break;
   22208:	00002d06 	br	222c0 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   2220c:	008000f4 	movhi	r2,3
   22210:	10a7f844 	addi	r2,r2,-24607
   22214:	10800003 	ldbu	r2,0(r2)
   22218:	10803fcc 	andi	r2,r2,255
   2221c:	10800058 	cmpnei	r2,r2,1
   22220:	1000161e 	bne	r2,zero,2227c <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   22224:	e0bffc17 	ldw	r2,-16(fp)
   22228:	10800c17 	ldw	r2,48(r2)
   2222c:	e0bff615 	stw	r2,-40(fp)
   22230:	00800144 	movi	r2,5
   22234:	e0bff70d 	sth	r2,-36(fp)
   22238:	00bfe0c4 	movi	r2,-125
   2223c:	e0bff785 	stb	r2,-34(fp)
   22240:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   22244:	008000f4 	movhi	r2,3
   22248:	10a7f844 	addi	r2,r2,-24607
   2224c:	10800003 	ldbu	r2,0(r2)
   22250:	10803fcc 	andi	r2,r2,255
   22254:	10001326 	beq	r2,zero,222a4 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   22258:	e17ff70b 	ldhu	r5,-36(fp)
   2225c:	e1bff783 	ldbu	r6,-34(fp)
   22260:	e0fff80b 	ldhu	r3,-32(fp)
   22264:	e0bffb44 	addi	r2,fp,-19
   22268:	d8800015 	stw	r2,0(sp)
   2226c:	e13ff617 	ldw	r4,-40(fp)
   22270:	180f883a 	mov	r7,r3
   22274:	00173bc0 	call	173bc <OSFlagPend>
   22278:	00000a06 	br	222a4 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2227c:	0001883a 	nop
   22280:	e0bffc17 	ldw	r2,-16(fp)
   22284:	10c00d17 	ldw	r3,52(r2)
   22288:	e0bff117 	ldw	r2,-60(fp)
   2228c:	1880051e 	bne	r3,r2,222a4 <altera_avalon_jtag_uart_read+0x1d4>
   22290:	e0bffc17 	ldw	r2,-16(fp)
   22294:	10c00917 	ldw	r3,36(r2)
   22298:	e0bffc17 	ldw	r2,-16(fp)
   2229c:	10800117 	ldw	r2,4(r2)
   222a0:	18bff736 	bltu	r3,r2,22280 <__alt_mem_Flash_flash_data+0xf4022280>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   222a4:	e0bffc17 	ldw	r2,-16(fp)
   222a8:	10c00d17 	ldw	r3,52(r2)
   222ac:	e0bff117 	ldw	r2,-60(fp)
   222b0:	1880011e 	bne	r3,r2,222b8 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   222b4:	00000206 	br	222c0 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   222b8:	e0bffe17 	ldw	r2,-8(fp)
   222bc:	00bf9916 	blt	zero,r2,22124 <__alt_mem_Flash_flash_data+0xf4022124>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   222c0:	e0bffc17 	ldw	r2,-16(fp)
   222c4:	10800a17 	ldw	r2,40(r2)
   222c8:	1009883a 	mov	r4,r2
   222cc:	001afc00 	call	1afc0 <OSSemPost>

  if (ptr != buffer)
   222d0:	e0ffef17 	ldw	r3,-68(fp)
   222d4:	e0bffd17 	ldw	r2,-12(fp)
   222d8:	18801826 	beq	r3,r2,2233c <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   222dc:	0005303a 	rdctl	r2,status
   222e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   222e4:	e0fff917 	ldw	r3,-28(fp)
   222e8:	00bfff84 	movi	r2,-2
   222ec:	1884703a 	and	r2,r3,r2
   222f0:	1001703a 	wrctl	status,r2
  
  return context;
   222f4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   222f8:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   222fc:	e0bffc17 	ldw	r2,-16(fp)
   22300:	10800817 	ldw	r2,32(r2)
   22304:	10c00054 	ori	r3,r2,1
   22308:	e0bffc17 	ldw	r2,-16(fp)
   2230c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22310:	e0bffc17 	ldw	r2,-16(fp)
   22314:	10800017 	ldw	r2,0(r2)
   22318:	10800104 	addi	r2,r2,4
   2231c:	1007883a 	mov	r3,r2
   22320:	e0bffc17 	ldw	r2,-16(fp)
   22324:	10800817 	ldw	r2,32(r2)
   22328:	18800035 	stwio	r2,0(r3)
   2232c:	e0bff317 	ldw	r2,-52(fp)
   22330:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22334:	e0bffa17 	ldw	r2,-24(fp)
   22338:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2233c:	e0ffef17 	ldw	r3,-68(fp)
   22340:	e0bffd17 	ldw	r2,-12(fp)
   22344:	18800426 	beq	r3,r2,22358 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   22348:	e0ffef17 	ldw	r3,-68(fp)
   2234c:	e0bffd17 	ldw	r2,-12(fp)
   22350:	1885c83a 	sub	r2,r3,r2
   22354:	00000606 	br	22370 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   22358:	e0bfff17 	ldw	r2,-4(fp)
   2235c:	1090000c 	andi	r2,r2,16384
   22360:	10000226 	beq	r2,zero,2236c <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   22364:	00bffd44 	movi	r2,-11
   22368:	00000106 	br	22370 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   2236c:	00bffec4 	movi	r2,-5
}
   22370:	e037883a 	mov	sp,fp
   22374:	dfc00117 	ldw	ra,4(sp)
   22378:	df000017 	ldw	fp,0(sp)
   2237c:	dec00204 	addi	sp,sp,8
   22380:	f800283a 	ret

00022384 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22384:	deffed04 	addi	sp,sp,-76
   22388:	dfc01215 	stw	ra,72(sp)
   2238c:	df001115 	stw	fp,68(sp)
   22390:	df001104 	addi	fp,sp,68
   22394:	e13ffc15 	stw	r4,-16(fp)
   22398:	e17ffd15 	stw	r5,-12(fp)
   2239c:	e1bffe15 	stw	r6,-8(fp)
   223a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   223a4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   223a8:	e0bffd17 	ldw	r2,-12(fp)
   223ac:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   223b0:	e0bffc17 	ldw	r2,-16(fp)
   223b4:	10800b17 	ldw	r2,44(r2)
   223b8:	e0bff515 	stw	r2,-44(fp)
   223bc:	e03ff60d 	sth	zero,-40(fp)
   223c0:	e0fff60b 	ldhu	r3,-40(fp)
   223c4:	e0bffbc4 	addi	r2,fp,-17
   223c8:	e13ff517 	ldw	r4,-44(fp)
   223cc:	180b883a 	mov	r5,r3
   223d0:	100d883a 	mov	r6,r2
   223d4:	001abec0 	call	1abec <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   223d8:	00003806 	br	224bc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   223dc:	e0bffc17 	ldw	r2,-16(fp)
   223e0:	10800f17 	ldw	r2,60(r2)
   223e4:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   223e8:	e0bffc17 	ldw	r2,-16(fp)
   223ec:	10801017 	ldw	r2,64(r2)
   223f0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   223f4:	e0fff317 	ldw	r3,-52(fp)
   223f8:	e0bff017 	ldw	r2,-64(fp)
   223fc:	1880062e 	bgeu	r3,r2,22418 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   22400:	e0fff017 	ldw	r3,-64(fp)
   22404:	e0bff317 	ldw	r2,-52(fp)
   22408:	1885c83a 	sub	r2,r3,r2
   2240c:	10bfffc4 	addi	r2,r2,-1
   22410:	e0bff115 	stw	r2,-60(fp)
   22414:	00000b06 	br	22444 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   22418:	e0bff017 	ldw	r2,-64(fp)
   2241c:	10000526 	beq	r2,zero,22434 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   22420:	00c20004 	movi	r3,2048
   22424:	e0bff317 	ldw	r2,-52(fp)
   22428:	1885c83a 	sub	r2,r3,r2
   2242c:	e0bff115 	stw	r2,-60(fp)
   22430:	00000406 	br	22444 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   22434:	00c1ffc4 	movi	r3,2047
   22438:	e0bff317 	ldw	r2,-52(fp)
   2243c:	1885c83a 	sub	r2,r3,r2
   22440:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   22444:	e0bff117 	ldw	r2,-60(fp)
   22448:	1000011e 	bne	r2,zero,22450 <altera_avalon_jtag_uart_write+0xcc>
        break;
   2244c:	00001d06 	br	224c4 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   22450:	e0fffe17 	ldw	r3,-8(fp)
   22454:	e0bff117 	ldw	r2,-60(fp)
   22458:	1880022e 	bgeu	r3,r2,22464 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   2245c:	e0bffe17 	ldw	r2,-8(fp)
   22460:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   22464:	e0bff317 	ldw	r2,-52(fp)
   22468:	10821104 	addi	r2,r2,2116
   2246c:	e0fffc17 	ldw	r3,-16(fp)
   22470:	1885883a 	add	r2,r3,r2
   22474:	1009883a 	mov	r4,r2
   22478:	e17ffd17 	ldw	r5,-12(fp)
   2247c:	e1bff117 	ldw	r6,-60(fp)
   22480:	000be680 	call	be68 <memcpy>
      ptr   += n;
   22484:	e0fffd17 	ldw	r3,-12(fp)
   22488:	e0bff117 	ldw	r2,-60(fp)
   2248c:	1885883a 	add	r2,r3,r2
   22490:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   22494:	e0fffe17 	ldw	r3,-8(fp)
   22498:	e0bff117 	ldw	r2,-60(fp)
   2249c:	1885c83a 	sub	r2,r3,r2
   224a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   224a4:	e0fff317 	ldw	r3,-52(fp)
   224a8:	e0bff117 	ldw	r2,-60(fp)
   224ac:	1885883a 	add	r2,r3,r2
   224b0:	10c1ffcc 	andi	r3,r2,2047
   224b4:	e0bffc17 	ldw	r2,-16(fp)
   224b8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   224bc:	e0bffe17 	ldw	r2,-8(fp)
   224c0:	00bfc616 	blt	zero,r2,223dc <__alt_mem_Flash_flash_data+0xf40223dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224c4:	0005303a 	rdctl	r2,status
   224c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224cc:	e0fff717 	ldw	r3,-36(fp)
   224d0:	00bfff84 	movi	r2,-2
   224d4:	1884703a 	and	r2,r3,r2
   224d8:	1001703a 	wrctl	status,r2
  
  return context;
   224dc:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   224e0:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   224e4:	e0bffc17 	ldw	r2,-16(fp)
   224e8:	10800817 	ldw	r2,32(r2)
   224ec:	10c00094 	ori	r3,r2,2
   224f0:	e0bffc17 	ldw	r2,-16(fp)
   224f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   224f8:	e0bffc17 	ldw	r2,-16(fp)
   224fc:	10800017 	ldw	r2,0(r2)
   22500:	10800104 	addi	r2,r2,4
   22504:	1007883a 	mov	r3,r2
   22508:	e0bffc17 	ldw	r2,-16(fp)
   2250c:	10800817 	ldw	r2,32(r2)
   22510:	18800035 	stwio	r2,0(r3)
   22514:	e0bff417 	ldw	r2,-48(fp)
   22518:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2251c:	e0bff817 	ldw	r2,-32(fp)
   22520:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   22524:	e0bffe17 	ldw	r2,-8(fp)
   22528:	00802e0e 	bge	zero,r2,225e4 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   2252c:	e0bfff17 	ldw	r2,-4(fp)
   22530:	1090000c 	andi	r2,r2,16384
   22534:	10000126 	beq	r2,zero,2253c <altera_avalon_jtag_uart_write+0x1b8>
        break;
   22538:	00002c06 	br	225ec <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   2253c:	008000f4 	movhi	r2,3
   22540:	10a7f844 	addi	r2,r2,-24607
   22544:	10800003 	ldbu	r2,0(r2)
   22548:	10803fcc 	andi	r2,r2,255
   2254c:	10800058 	cmpnei	r2,r2,1
   22550:	1000161e 	bne	r2,zero,225ac <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   22554:	e0bffc17 	ldw	r2,-16(fp)
   22558:	10800c17 	ldw	r2,48(r2)
   2255c:	e0bff915 	stw	r2,-28(fp)
   22560:	00800184 	movi	r2,6
   22564:	e0bffa0d 	sth	r2,-24(fp)
   22568:	00bfe0c4 	movi	r2,-125
   2256c:	e0bffa85 	stb	r2,-22(fp)
   22570:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   22574:	008000f4 	movhi	r2,3
   22578:	10a7f844 	addi	r2,r2,-24607
   2257c:	10800003 	ldbu	r2,0(r2)
   22580:	10803fcc 	andi	r2,r2,255
   22584:	10001326 	beq	r2,zero,225d4 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   22588:	e17ffa0b 	ldhu	r5,-24(fp)
   2258c:	e1bffa83 	ldbu	r6,-22(fp)
   22590:	e0fffb0b 	ldhu	r3,-20(fp)
   22594:	e0bffb84 	addi	r2,fp,-18
   22598:	d8800015 	stw	r2,0(sp)
   2259c:	e13ff917 	ldw	r4,-28(fp)
   225a0:	180f883a 	mov	r7,r3
   225a4:	00173bc0 	call	173bc <OSFlagPend>
   225a8:	00000a06 	br	225d4 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   225ac:	0001883a 	nop
   225b0:	e0bffc17 	ldw	r2,-16(fp)
   225b4:	10c01017 	ldw	r3,64(r2)
   225b8:	e0bff017 	ldw	r2,-64(fp)
   225bc:	1880051e 	bne	r3,r2,225d4 <altera_avalon_jtag_uart_write+0x250>
   225c0:	e0bffc17 	ldw	r2,-16(fp)
   225c4:	10c00917 	ldw	r3,36(r2)
   225c8:	e0bffc17 	ldw	r2,-16(fp)
   225cc:	10800117 	ldw	r2,4(r2)
   225d0:	18bff736 	bltu	r3,r2,225b0 <__alt_mem_Flash_flash_data+0xf40225b0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   225d4:	e0bffc17 	ldw	r2,-16(fp)
   225d8:	10800917 	ldw	r2,36(r2)
   225dc:	10000126 	beq	r2,zero,225e4 <altera_avalon_jtag_uart_write+0x260>
         break;
   225e0:	00000206 	br	225ec <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   225e4:	e0bffe17 	ldw	r2,-8(fp)
   225e8:	00bf7b16 	blt	zero,r2,223d8 <__alt_mem_Flash_flash_data+0xf40223d8>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   225ec:	e0bffc17 	ldw	r2,-16(fp)
   225f0:	10800b17 	ldw	r2,44(r2)
   225f4:	1009883a 	mov	r4,r2
   225f8:	001afc00 	call	1afc0 <OSSemPost>

  if (ptr != start)
   225fc:	e0fffd17 	ldw	r3,-12(fp)
   22600:	e0bff217 	ldw	r2,-56(fp)
   22604:	18800426 	beq	r3,r2,22618 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   22608:	e0fffd17 	ldw	r3,-12(fp)
   2260c:	e0bff217 	ldw	r2,-56(fp)
   22610:	1885c83a 	sub	r2,r3,r2
   22614:	00000606 	br	22630 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   22618:	e0bfff17 	ldw	r2,-4(fp)
   2261c:	1090000c 	andi	r2,r2,16384
   22620:	10000226 	beq	r2,zero,2262c <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   22624:	00bffd44 	movi	r2,-11
   22628:	00000106 	br	22630 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2262c:	00bffec4 	movi	r2,-5
}
   22630:	e037883a 	mov	sp,fp
   22634:	dfc00117 	ldw	ra,4(sp)
   22638:	df000017 	ldw	fp,0(sp)
   2263c:	dec00204 	addi	sp,sp,8
   22640:	f800283a 	ret

00022644 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22644:	defff904 	addi	sp,sp,-28
   22648:	dfc00615 	stw	ra,24(sp)
   2264c:	df000515 	stw	fp,20(sp)
   22650:	df000504 	addi	fp,sp,20
   22654:	e13ffe15 	stw	r4,-8(fp)
   22658:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2265c:	0007883a 	mov	r3,zero
   22660:	e0bffe17 	ldw	r2,-8(fp)
   22664:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22668:	e0bffe17 	ldw	r2,-8(fp)
   2266c:	10800104 	addi	r2,r2,4
   22670:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22674:	0005303a 	rdctl	r2,status
   22678:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2267c:	e0fffc17 	ldw	r3,-16(fp)
   22680:	00bfff84 	movi	r2,-2
   22684:	1884703a 	and	r2,r3,r2
   22688:	1001703a 	wrctl	status,r2
  
  return context;
   2268c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22690:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   22694:	00246c00 	call	246c0 <alt_tick>
   22698:	e0bffb17 	ldw	r2,-20(fp)
   2269c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226a0:	e0bffd17 	ldw	r2,-12(fp)
   226a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   226a8:	e037883a 	mov	sp,fp
   226ac:	dfc00117 	ldw	ra,4(sp)
   226b0:	df000017 	ldw	fp,0(sp)
   226b4:	dec00204 	addi	sp,sp,8
   226b8:	f800283a 	ret

000226bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   226bc:	defff904 	addi	sp,sp,-28
   226c0:	dfc00615 	stw	ra,24(sp)
   226c4:	df000515 	stw	fp,20(sp)
   226c8:	df000504 	addi	fp,sp,20
   226cc:	e13ffc15 	stw	r4,-16(fp)
   226d0:	e17ffd15 	stw	r5,-12(fp)
   226d4:	e1bffe15 	stw	r6,-8(fp)
   226d8:	e1ffff15 	stw	r7,-4(fp)
   226dc:	e0bfff17 	ldw	r2,-4(fp)
   226e0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   226e4:	008000f4 	movhi	r2,3
   226e8:	10a81a04 	addi	r2,r2,-24472
   226ec:	10800017 	ldw	r2,0(r2)
   226f0:	1000041e 	bne	r2,zero,22704 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   226f4:	008000f4 	movhi	r2,3
   226f8:	10a81a04 	addi	r2,r2,-24472
   226fc:	e0fffb17 	ldw	r3,-20(fp)
   22700:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22704:	e0bffc17 	ldw	r2,-16(fp)
   22708:	10800104 	addi	r2,r2,4
   2270c:	00c001c4 	movi	r3,7
   22710:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   22714:	e13ffe17 	ldw	r4,-8(fp)
   22718:	e17ffc17 	ldw	r5,-16(fp)
   2271c:	018000b4 	movhi	r6,2
   22720:	31899104 	addi	r6,r6,9796
   22724:	00242040 	call	24204 <alt_irq_register>
#endif  
}
   22728:	e037883a 	mov	sp,fp
   2272c:	dfc00117 	ldw	ra,4(sp)
   22730:	df000017 	ldw	fp,0(sp)
   22734:	dec00204 	addi	sp,sp,8
   22738:	f800283a 	ret

0002273c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   2273c:	defffc04 	addi	sp,sp,-16
   22740:	df000315 	stw	fp,12(sp)
   22744:	df000304 	addi	fp,sp,12
   22748:	e13ffe15 	stw	r4,-8(fp)
   2274c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   22750:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   22754:	e0bfff17 	ldw	r2,-4(fp)
   22758:	1000061e 	bne	r2,zero,22774 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   2275c:	e0bffe17 	ldw	r2,-8(fp)
   22760:	1007883a 	mov	r3,r2
   22764:	e0bffd03 	ldbu	r2,-12(fp)
   22768:	1884b03a 	or	r2,r3,r2
   2276c:	e0bffd05 	stb	r2,-12(fp)
   22770:	00000806 	br	22794 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   22774:	e0bffe17 	ldw	r2,-8(fp)
   22778:	1007883a 	mov	r3,r2
   2277c:	e0bffd03 	ldbu	r2,-12(fp)
   22780:	1884b03a 	or	r2,r3,r2
   22784:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   22788:	e0bffd03 	ldbu	r2,-12(fp)
   2278c:	10801014 	ori	r2,r2,64
   22790:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   22794:	e0fffd03 	ldbu	r3,-12(fp)
   22798:	00bfe004 	movi	r2,-128
   2279c:	1884b03a 	or	r2,r3,r2
}
   227a0:	e037883a 	mov	sp,fp
   227a4:	df000017 	ldw	fp,0(sp)
   227a8:	dec00104 	addi	sp,sp,4
   227ac:	f800283a 	ret

000227b0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   227b0:	defffd04 	addi	sp,sp,-12
   227b4:	df000215 	stw	fp,8(sp)
   227b8:	df000204 	addi	fp,sp,8
   227bc:	e13ffe15 	stw	r4,-8(fp)
   227c0:	2805883a 	mov	r2,r5
   227c4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   227c8:	e0bffe17 	ldw	r2,-8(fp)
   227cc:	10800a17 	ldw	r2,40(r2)
   227d0:	1007883a 	mov	r3,r2
   227d4:	e0bfff03 	ldbu	r2,-4(fp)
   227d8:	18800025 	stbio	r2,0(r3)
}
   227dc:	e037883a 	mov	sp,fp
   227e0:	df000017 	ldw	fp,0(sp)
   227e4:	dec00104 	addi	sp,sp,4
   227e8:	f800283a 	ret

000227ec <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   227ec:	defffe04 	addi	sp,sp,-8
   227f0:	df000115 	stw	fp,4(sp)
   227f4:	df000104 	addi	fp,sp,4
   227f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   227fc:	e0bfff17 	ldw	r2,-4(fp)
   22800:	10800a17 	ldw	r2,40(r2)
   22804:	1007883a 	mov	r3,r2
   22808:	00800044 	movi	r2,1
   2280c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   22810:	e037883a 	mov	sp,fp
   22814:	df000017 	ldw	fp,0(sp)
   22818:	dec00104 	addi	sp,sp,4
   2281c:	f800283a 	ret

00022820 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   22820:	defffc04 	addi	sp,sp,-16
   22824:	dfc00315 	stw	ra,12(sp)
   22828:	df000215 	stw	fp,8(sp)
   2282c:	df000204 	addi	fp,sp,8
   22830:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   22834:	e13fff17 	ldw	r4,-4(fp)
   22838:	014000b4 	movhi	r5,2
   2283c:	295fd004 	addi	r5,r5,32576
   22840:	002400c0 	call	2400c <alt_find_dev>
   22844:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22848:	e0bffe17 	ldw	r2,-8(fp)
}
   2284c:	e037883a 	mov	sp,fp
   22850:	dfc00117 	ldw	ra,4(sp)
   22854:	df000017 	ldw	fp,0(sp)
   22858:	dec00204 	addi	sp,sp,8
   2285c:	f800283a 	ret

00022860 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   22860:	defffb04 	addi	sp,sp,-20
   22864:	df000415 	stw	fp,16(sp)
   22868:	df000404 	addi	fp,sp,16
   2286c:	e13ffd15 	stw	r4,-12(fp)
   22870:	e17ffe15 	stw	r5,-8(fp)
   22874:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   22878:	e03ffc15 	stw	zero,-16(fp)
   2287c:	00000f06 	br	228bc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   22880:	e0bffd17 	ldw	r2,-12(fp)
   22884:	10800a17 	ldw	r2,40(r2)
   22888:	10800044 	addi	r2,r2,1
   2288c:	1009883a 	mov	r4,r2
   22890:	e0fffe17 	ldw	r3,-8(fp)
   22894:	e0bffc17 	ldw	r2,-16(fp)
   22898:	1885883a 	add	r2,r3,r2
   2289c:	10800003 	ldbu	r2,0(r2)
   228a0:	10803fcc 	andi	r2,r2,255
   228a4:	1080201c 	xori	r2,r2,128
   228a8:	10bfe004 	addi	r2,r2,-128
   228ac:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   228b0:	e0bffc17 	ldw	r2,-16(fp)
   228b4:	10800044 	addi	r2,r2,1
   228b8:	e0bffc15 	stw	r2,-16(fp)
   228bc:	e0fffc17 	ldw	r3,-16(fp)
   228c0:	e0bfff17 	ldw	r2,-4(fp)
   228c4:	18bfee36 	bltu	r3,r2,22880 <__alt_mem_Flash_flash_data+0xf4022880>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   228c8:	e037883a 	mov	sp,fp
   228cc:	df000017 	ldw	fp,0(sp)
   228d0:	dec00104 	addi	sp,sp,4
   228d4:	f800283a 	ret

000228d8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   228d8:	defffd04 	addi	sp,sp,-12
   228dc:	df000215 	stw	fp,8(sp)
   228e0:	df000204 	addi	fp,sp,8
   228e4:	e13ffe15 	stw	r4,-8(fp)
   228e8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   228ec:	00000d06 	br	22924 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   228f0:	e0bffe17 	ldw	r2,-8(fp)
   228f4:	10800a17 	ldw	r2,40(r2)
   228f8:	10800044 	addi	r2,r2,1
   228fc:	1007883a 	mov	r3,r2
   22900:	e0bfff17 	ldw	r2,-4(fp)
   22904:	10800003 	ldbu	r2,0(r2)
   22908:	10803fcc 	andi	r2,r2,255
   2290c:	1080201c 	xori	r2,r2,128
   22910:	10bfe004 	addi	r2,r2,-128
   22914:	18800025 	stbio	r2,0(r3)
		++ptr;
   22918:	e0bfff17 	ldw	r2,-4(fp)
   2291c:	10800044 	addi	r2,r2,1
   22920:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   22924:	e0bfff17 	ldw	r2,-4(fp)
   22928:	10800003 	ldbu	r2,0(r2)
   2292c:	10803fcc 	andi	r2,r2,255
   22930:	1080201c 	xori	r2,r2,128
   22934:	10bfe004 	addi	r2,r2,-128
   22938:	103fed1e 	bne	r2,zero,228f0 <__alt_mem_Flash_flash_data+0xf40228f0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   2293c:	e037883a 	mov	sp,fp
   22940:	df000017 	ldw	fp,0(sp)
   22944:	dec00104 	addi	sp,sp,4
   22948:	f800283a 	ret

0002294c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   2294c:	defffb04 	addi	sp,sp,-20
   22950:	dfc00415 	stw	ra,16(sp)
   22954:	df000315 	stw	fp,12(sp)
   22958:	df000304 	addi	fp,sp,12
   2295c:	e13ffd15 	stw	r4,-12(fp)
   22960:	e17ffe15 	stw	r5,-8(fp)
   22964:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   22968:	e0bffd17 	ldw	r2,-12(fp)
   2296c:	10c00017 	ldw	r3,0(r2)
   22970:	e0bfff17 	ldw	r2,-4(fp)
   22974:	1809883a 	mov	r4,r3
   22978:	e17ffe17 	ldw	r5,-8(fp)
   2297c:	100d883a 	mov	r6,r2
   22980:	00228600 	call	22860 <alt_up_character_lcd_write>
	return 0;
   22984:	0005883a 	mov	r2,zero
}
   22988:	e037883a 	mov	sp,fp
   2298c:	dfc00117 	ldw	ra,4(sp)
   22990:	df000017 	ldw	fp,0(sp)
   22994:	dec00204 	addi	sp,sp,8
   22998:	f800283a 	ret

0002299c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   2299c:	defffa04 	addi	sp,sp,-24
   229a0:	dfc00515 	stw	ra,20(sp)
   229a4:	df000415 	stw	fp,16(sp)
   229a8:	df000404 	addi	fp,sp,16
   229ac:	e13ffd15 	stw	r4,-12(fp)
   229b0:	e17ffe15 	stw	r5,-8(fp)
   229b4:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   229b8:	e0bffe17 	ldw	r2,-8(fp)
   229bc:	10800a28 	cmpgeui	r2,r2,40
   229c0:	1000031e 	bne	r2,zero,229d0 <alt_up_character_lcd_set_cursor_pos+0x34>
   229c4:	e0bfff17 	ldw	r2,-4(fp)
   229c8:	108000b0 	cmpltui	r2,r2,2
   229cc:	1000021e 	bne	r2,zero,229d8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   229d0:	00bfffc4 	movi	r2,-1
   229d4:	00000906 	br	229fc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   229d8:	e13ffe17 	ldw	r4,-8(fp)
   229dc:	e17fff17 	ldw	r5,-4(fp)
   229e0:	002273c0 	call	2273c <get_DDRAM_addr>
   229e4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   229e8:	e0bffc03 	ldbu	r2,-16(fp)
   229ec:	e13ffd17 	ldw	r4,-12(fp)
   229f0:	100b883a 	mov	r5,r2
   229f4:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
	return 0;
   229f8:	0005883a 	mov	r2,zero
}
   229fc:	e037883a 	mov	sp,fp
   22a00:	dfc00117 	ldw	ra,4(sp)
   22a04:	df000017 	ldw	fp,0(sp)
   22a08:	dec00204 	addi	sp,sp,8
   22a0c:	f800283a 	ret

00022a10 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   22a10:	defffb04 	addi	sp,sp,-20
   22a14:	dfc00415 	stw	ra,16(sp)
   22a18:	df000315 	stw	fp,12(sp)
   22a1c:	df000304 	addi	fp,sp,12
   22a20:	e13ffe15 	stw	r4,-8(fp)
   22a24:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   22a28:	e0bfff17 	ldw	r2,-4(fp)
   22a2c:	1000011e 	bne	r2,zero,22a34 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   22a30:	00001406 	br	22a84 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   22a34:	e0bfff17 	ldw	r2,-4(fp)
   22a38:	0080020e 	bge	zero,r2,22a44 <alt_up_character_lcd_shift_cursor+0x34>
   22a3c:	00800504 	movi	r2,20
   22a40:	00000106 	br	22a48 <alt_up_character_lcd_shift_cursor+0x38>
   22a44:	00800404 	movi	r2,16
   22a48:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   22a4c:	e0bfff17 	ldw	r2,-4(fp)
   22a50:	1000010e 	bge	r2,zero,22a58 <alt_up_character_lcd_shift_cursor+0x48>
   22a54:	0085c83a 	sub	r2,zero,r2
   22a58:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a5c:	00000406 	br	22a70 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   22a60:	e0bffd43 	ldbu	r2,-11(fp)
   22a64:	e13ffe17 	ldw	r4,-8(fp)
   22a68:	100b883a 	mov	r5,r2
   22a6c:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22a70:	e0bffd03 	ldbu	r2,-12(fp)
   22a74:	10ffffc4 	addi	r3,r2,-1
   22a78:	e0fffd05 	stb	r3,-12(fp)
   22a7c:	10803fcc 	andi	r2,r2,255
   22a80:	103ff71e 	bne	r2,zero,22a60 <__alt_mem_Flash_flash_data+0xf4022a60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   22a84:	e037883a 	mov	sp,fp
   22a88:	dfc00117 	ldw	ra,4(sp)
   22a8c:	df000017 	ldw	fp,0(sp)
   22a90:	dec00204 	addi	sp,sp,8
   22a94:	f800283a 	ret

00022a98 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   22a98:	defffb04 	addi	sp,sp,-20
   22a9c:	dfc00415 	stw	ra,16(sp)
   22aa0:	df000315 	stw	fp,12(sp)
   22aa4:	df000304 	addi	fp,sp,12
   22aa8:	e13ffe15 	stw	r4,-8(fp)
   22aac:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   22ab0:	e0bfff17 	ldw	r2,-4(fp)
   22ab4:	1000011e 	bne	r2,zero,22abc <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   22ab8:	00001406 	br	22b0c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   22abc:	e0bfff17 	ldw	r2,-4(fp)
   22ac0:	0080020e 	bge	zero,r2,22acc <alt_up_character_lcd_shift_display+0x34>
   22ac4:	00800704 	movi	r2,28
   22ac8:	00000106 	br	22ad0 <alt_up_character_lcd_shift_display+0x38>
   22acc:	00800604 	movi	r2,24
   22ad0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   22ad4:	e0bfff17 	ldw	r2,-4(fp)
   22ad8:	1000010e 	bge	r2,zero,22ae0 <alt_up_character_lcd_shift_display+0x48>
   22adc:	0085c83a 	sub	r2,zero,r2
   22ae0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22ae4:	00000406 	br	22af8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   22ae8:	e0bffd43 	ldbu	r2,-11(fp)
   22aec:	e13ffe17 	ldw	r4,-8(fp)
   22af0:	100b883a 	mov	r5,r2
   22af4:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   22af8:	e0bffd03 	ldbu	r2,-12(fp)
   22afc:	10ffffc4 	addi	r3,r2,-1
   22b00:	e0fffd05 	stb	r3,-12(fp)
   22b04:	10803fcc 	andi	r2,r2,255
   22b08:	103ff71e 	bne	r2,zero,22ae8 <__alt_mem_Flash_flash_data+0xf4022ae8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   22b0c:	e037883a 	mov	sp,fp
   22b10:	dfc00117 	ldw	ra,4(sp)
   22b14:	df000017 	ldw	fp,0(sp)
   22b18:	dec00204 	addi	sp,sp,8
   22b1c:	f800283a 	ret

00022b20 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   22b20:	defffa04 	addi	sp,sp,-24
   22b24:	dfc00515 	stw	ra,20(sp)
   22b28:	df000415 	stw	fp,16(sp)
   22b2c:	df000404 	addi	fp,sp,16
   22b30:	e13ffd15 	stw	r4,-12(fp)
   22b34:	e17ffe15 	stw	r5,-8(fp)
   22b38:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   22b3c:	e0bffe17 	ldw	r2,-8(fp)
   22b40:	10800a28 	cmpgeui	r2,r2,40
   22b44:	1000031e 	bne	r2,zero,22b54 <alt_up_character_lcd_erase_pos+0x34>
   22b48:	e0bfff17 	ldw	r2,-4(fp)
   22b4c:	108000b0 	cmpltui	r2,r2,2
   22b50:	1000021e 	bne	r2,zero,22b5c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   22b54:	00bfffc4 	movi	r2,-1
   22b58:	00000f06 	br	22b98 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   22b5c:	e13ffe17 	ldw	r4,-8(fp)
   22b60:	e17fff17 	ldw	r5,-4(fp)
   22b64:	002273c0 	call	2273c <get_DDRAM_addr>
   22b68:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   22b6c:	e0bffc03 	ldbu	r2,-16(fp)
   22b70:	e13ffd17 	ldw	r4,-12(fp)
   22b74:	100b883a 	mov	r5,r2
   22b78:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   22b7c:	e0bffd17 	ldw	r2,-12(fp)
   22b80:	10800a17 	ldw	r2,40(r2)
   22b84:	10800044 	addi	r2,r2,1
   22b88:	1007883a 	mov	r3,r2
   22b8c:	00800084 	movi	r2,2
   22b90:	18800025 	stbio	r2,0(r3)
	return 0;
   22b94:	0005883a 	mov	r2,zero
}
   22b98:	e037883a 	mov	sp,fp
   22b9c:	dfc00117 	ldw	ra,4(sp)
   22ba0:	df000017 	ldw	fp,0(sp)
   22ba4:	dec00204 	addi	sp,sp,8
   22ba8:	f800283a 	ret

00022bac <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   22bac:	defffd04 	addi	sp,sp,-12
   22bb0:	dfc00215 	stw	ra,8(sp)
   22bb4:	df000115 	stw	fp,4(sp)
   22bb8:	df000104 	addi	fp,sp,4
   22bbc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   22bc0:	e13fff17 	ldw	r4,-4(fp)
   22bc4:	01400304 	movi	r5,12
   22bc8:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
}
   22bcc:	e037883a 	mov	sp,fp
   22bd0:	dfc00117 	ldw	ra,4(sp)
   22bd4:	df000017 	ldw	fp,0(sp)
   22bd8:	dec00204 	addi	sp,sp,8
   22bdc:	f800283a 	ret

00022be0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   22be0:	defffd04 	addi	sp,sp,-12
   22be4:	dfc00215 	stw	ra,8(sp)
   22be8:	df000115 	stw	fp,4(sp)
   22bec:	df000104 	addi	fp,sp,4
   22bf0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   22bf4:	e13fff17 	ldw	r4,-4(fp)
   22bf8:	014003c4 	movi	r5,15
   22bfc:	00227b00 	call	227b0 <alt_up_character_lcd_send_cmd>
}
   22c00:	e037883a 	mov	sp,fp
   22c04:	dfc00117 	ldw	ra,4(sp)
   22c08:	df000017 	ldw	fp,0(sp)
   22c0c:	dec00204 	addi	sp,sp,8
   22c10:	f800283a 	ret

00022c14 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   22c14:	defffd04 	addi	sp,sp,-12
   22c18:	df000215 	stw	fp,8(sp)
   22c1c:	df000204 	addi	fp,sp,8
   22c20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22c24:	e0bfff17 	ldw	r2,-4(fp)
   22c28:	10800a17 	ldw	r2,40(r2)
   22c2c:	10800104 	addi	r2,r2,4
   22c30:	10800037 	ldwio	r2,0(r2)
   22c34:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   22c38:	e0bffe17 	ldw	r2,-8(fp)
   22c3c:	10800054 	ori	r2,r2,1
   22c40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   22c44:	e0bfff17 	ldw	r2,-4(fp)
   22c48:	10800a17 	ldw	r2,40(r2)
   22c4c:	10800104 	addi	r2,r2,4
   22c50:	1007883a 	mov	r3,r2
   22c54:	e0bffe17 	ldw	r2,-8(fp)
   22c58:	18800035 	stwio	r2,0(r3)
}
   22c5c:	e037883a 	mov	sp,fp
   22c60:	df000017 	ldw	fp,0(sp)
   22c64:	dec00104 	addi	sp,sp,4
   22c68:	f800283a 	ret

00022c6c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   22c6c:	defffd04 	addi	sp,sp,-12
   22c70:	df000215 	stw	fp,8(sp)
   22c74:	df000204 	addi	fp,sp,8
   22c78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22c7c:	e0bfff17 	ldw	r2,-4(fp)
   22c80:	10800a17 	ldw	r2,40(r2)
   22c84:	10800104 	addi	r2,r2,4
   22c88:	10800037 	ldwio	r2,0(r2)
   22c8c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   22c90:	e0fffe17 	ldw	r3,-8(fp)
   22c94:	00bfff84 	movi	r2,-2
   22c98:	1884703a 	and	r2,r3,r2
   22c9c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   22ca0:	e0bfff17 	ldw	r2,-4(fp)
   22ca4:	10800a17 	ldw	r2,40(r2)
   22ca8:	10800104 	addi	r2,r2,4
   22cac:	1007883a 	mov	r3,r2
   22cb0:	e0bffe17 	ldw	r2,-8(fp)
   22cb4:	18800035 	stwio	r2,0(r3)
}
   22cb8:	e037883a 	mov	sp,fp
   22cbc:	df000017 	ldw	fp,0(sp)
   22cc0:	dec00104 	addi	sp,sp,4
   22cc4:	f800283a 	ret

00022cc8 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   22cc8:	defffd04 	addi	sp,sp,-12
   22ccc:	df000215 	stw	fp,8(sp)
   22cd0:	df000204 	addi	fp,sp,8
   22cd4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   22cd8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   22cdc:	e0bfff17 	ldw	r2,-4(fp)
   22ce0:	10800a17 	ldw	r2,40(r2)
   22ce4:	10800084 	addi	r2,r2,2
   22ce8:	1080002b 	ldhuio	r2,0(r2)
   22cec:	10bfffcc 	andi	r2,r2,65535
   22cf0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   22cf4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   22cf8:	e037883a 	mov	sp,fp
   22cfc:	df000017 	ldw	fp,0(sp)
   22d00:	dec00104 	addi	sp,sp,4
   22d04:	f800283a 	ret

00022d08 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   22d08:	defffd04 	addi	sp,sp,-12
   22d0c:	df000215 	stw	fp,8(sp)
   22d10:	df000204 	addi	fp,sp,8
   22d14:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   22d18:	e0bfff17 	ldw	r2,-4(fp)
   22d1c:	10800a17 	ldw	r2,40(r2)
   22d20:	10800104 	addi	r2,r2,4
   22d24:	10800037 	ldwio	r2,0(r2)
   22d28:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   22d2c:	e0bffe17 	ldw	r2,-8(fp)
   22d30:	1004d43a 	srli	r2,r2,16
}
   22d34:	e037883a 	mov	sp,fp
   22d38:	df000017 	ldw	fp,0(sp)
   22d3c:	dec00104 	addi	sp,sp,4
   22d40:	f800283a 	ret

00022d44 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   22d44:	defffd04 	addi	sp,sp,-12
   22d48:	df000215 	stw	fp,8(sp)
   22d4c:	df000204 	addi	fp,sp,8
   22d50:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   22d54:	e0bfff17 	ldw	r2,-4(fp)
   22d58:	1080800c 	andi	r2,r2,512
   22d5c:	1004d27a 	srli	r2,r2,9
   22d60:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   22d64:	e0bffe17 	ldw	r2,-8(fp)
   22d68:	10000226 	beq	r2,zero,22d74 <alt_up_irda_check_parity+0x30>
   22d6c:	00bfffc4 	movi	r2,-1
   22d70:	00000106 	br	22d78 <alt_up_irda_check_parity+0x34>
   22d74:	0005883a 	mov	r2,zero
}
   22d78:	e037883a 	mov	sp,fp
   22d7c:	df000017 	ldw	fp,0(sp)
   22d80:	dec00104 	addi	sp,sp,4
   22d84:	f800283a 	ret

00022d88 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   22d88:	defffd04 	addi	sp,sp,-12
   22d8c:	df000215 	stw	fp,8(sp)
   22d90:	df000204 	addi	fp,sp,8
   22d94:	e13ffe15 	stw	r4,-8(fp)
   22d98:	2805883a 	mov	r2,r5
   22d9c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   22da0:	e0bffe17 	ldw	r2,-8(fp)
   22da4:	10800a17 	ldw	r2,40(r2)
   22da8:	1007883a 	mov	r3,r2
   22dac:	e0bfff03 	ldbu	r2,-4(fp)
   22db0:	18800035 	stwio	r2,0(r3)
	return 0;
   22db4:	0005883a 	mov	r2,zero
}
   22db8:	e037883a 	mov	sp,fp
   22dbc:	df000017 	ldw	fp,0(sp)
   22dc0:	dec00104 	addi	sp,sp,4
   22dc4:	f800283a 	ret

00022dc8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   22dc8:	defffa04 	addi	sp,sp,-24
   22dcc:	dfc00515 	stw	ra,20(sp)
   22dd0:	df000415 	stw	fp,16(sp)
   22dd4:	df000404 	addi	fp,sp,16
   22dd8:	e13ffd15 	stw	r4,-12(fp)
   22ddc:	e17ffe15 	stw	r5,-8(fp)
   22de0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   22de4:	e0bffd17 	ldw	r2,-12(fp)
   22de8:	10800a17 	ldw	r2,40(r2)
   22dec:	10800037 	ldwio	r2,0(r2)
   22df0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   22df4:	e0bffc17 	ldw	r2,-16(fp)
   22df8:	1007883a 	mov	r3,r2
   22dfc:	e0bffe17 	ldw	r2,-8(fp)
   22e00:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   22e04:	e13ffc17 	ldw	r4,-16(fp)
   22e08:	0022d440 	call	22d44 <alt_up_irda_check_parity>
   22e0c:	1007883a 	mov	r3,r2
   22e10:	e0bfff17 	ldw	r2,-4(fp)
   22e14:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   22e18:	e0bffc17 	ldw	r2,-16(fp)
   22e1c:	10a0000c 	andi	r2,r2,32768
   22e20:	1004d3fa 	srli	r2,r2,15
   22e24:	10bfffc4 	addi	r2,r2,-1
}
   22e28:	e037883a 	mov	sp,fp
   22e2c:	dfc00117 	ldw	ra,4(sp)
   22e30:	df000017 	ldw	fp,0(sp)
   22e34:	dec00204 	addi	sp,sp,8
   22e38:	f800283a 	ret

00022e3c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   22e3c:	defff804 	addi	sp,sp,-32
   22e40:	dfc00715 	stw	ra,28(sp)
   22e44:	df000615 	stw	fp,24(sp)
   22e48:	df000604 	addi	fp,sp,24
   22e4c:	e13ffd15 	stw	r4,-12(fp)
   22e50:	e17ffe15 	stw	r5,-8(fp)
   22e54:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   22e58:	e0bffd17 	ldw	r2,-12(fp)
   22e5c:	10800017 	ldw	r2,0(r2)
   22e60:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   22e64:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   22e68:	00000e06 	br	22ea4 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   22e6c:	e0bffe17 	ldw	r2,-8(fp)
   22e70:	10c00044 	addi	r3,r2,1
   22e74:	e0fffe15 	stw	r3,-8(fp)
   22e78:	e0fffc04 	addi	r3,fp,-16
   22e7c:	e13ffb17 	ldw	r4,-20(fp)
   22e80:	100b883a 	mov	r5,r2
   22e84:	180d883a 	mov	r6,r3
   22e88:	0022dc80 	call	22dc8 <alt_up_irda_read_data>
   22e8c:	1000041e 	bne	r2,zero,22ea0 <alt_up_irda_read_fd+0x64>
			count++;
   22e90:	e0bffa17 	ldw	r2,-24(fp)
   22e94:	10800044 	addi	r2,r2,1
   22e98:	e0bffa15 	stw	r2,-24(fp)
   22e9c:	00000106 	br	22ea4 <alt_up_irda_read_fd+0x68>
		else
			break;
   22ea0:	00000406 	br	22eb4 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   22ea4:	e0bfff17 	ldw	r2,-4(fp)
   22ea8:	10ffffc4 	addi	r3,r2,-1
   22eac:	e0ffff15 	stw	r3,-4(fp)
   22eb0:	103fee1e 	bne	r2,zero,22e6c <__alt_mem_Flash_flash_data+0xf4022e6c>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   22eb4:	e0bffa17 	ldw	r2,-24(fp)
}
   22eb8:	e037883a 	mov	sp,fp
   22ebc:	dfc00117 	ldw	ra,4(sp)
   22ec0:	df000017 	ldw	fp,0(sp)
   22ec4:	dec00204 	addi	sp,sp,8
   22ec8:	f800283a 	ret

00022ecc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   22ecc:	defff904 	addi	sp,sp,-28
   22ed0:	dfc00615 	stw	ra,24(sp)
   22ed4:	df000515 	stw	fp,20(sp)
   22ed8:	df000504 	addi	fp,sp,20
   22edc:	e13ffd15 	stw	r4,-12(fp)
   22ee0:	e17ffe15 	stw	r5,-8(fp)
   22ee4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   22ee8:	e0bffd17 	ldw	r2,-12(fp)
   22eec:	10800017 	ldw	r2,0(r2)
   22ef0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   22ef4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   22ef8:	00000e06 	br	22f34 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   22efc:	e0bffe17 	ldw	r2,-8(fp)
   22f00:	10c00044 	addi	r3,r2,1
   22f04:	e0fffe15 	stw	r3,-8(fp)
   22f08:	10800003 	ldbu	r2,0(r2)
   22f0c:	10803fcc 	andi	r2,r2,255
   22f10:	e13ffc17 	ldw	r4,-16(fp)
   22f14:	100b883a 	mov	r5,r2
   22f18:	0022d880 	call	22d88 <alt_up_irda_write_data>
   22f1c:	1000041e 	bne	r2,zero,22f30 <alt_up_irda_write_fd+0x64>
			count++;
   22f20:	e0bffb17 	ldw	r2,-20(fp)
   22f24:	10800044 	addi	r2,r2,1
   22f28:	e0bffb15 	stw	r2,-20(fp)
   22f2c:	00000106 	br	22f34 <alt_up_irda_write_fd+0x68>
		else
			break;
   22f30:	00000406 	br	22f44 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   22f34:	e0bfff17 	ldw	r2,-4(fp)
   22f38:	10ffffc4 	addi	r3,r2,-1
   22f3c:	e0ffff15 	stw	r3,-4(fp)
   22f40:	103fee1e 	bne	r2,zero,22efc <__alt_mem_Flash_flash_data+0xf4022efc>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   22f44:	e0bffb17 	ldw	r2,-20(fp)
}
   22f48:	e037883a 	mov	sp,fp
   22f4c:	dfc00117 	ldw	ra,4(sp)
   22f50:	df000017 	ldw	fp,0(sp)
   22f54:	dec00204 	addi	sp,sp,8
   22f58:	f800283a 	ret

00022f5c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   22f5c:	defffc04 	addi	sp,sp,-16
   22f60:	dfc00315 	stw	ra,12(sp)
   22f64:	df000215 	stw	fp,8(sp)
   22f68:	df000204 	addi	fp,sp,8
   22f6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   22f70:	e13fff17 	ldw	r4,-4(fp)
   22f74:	014000b4 	movhi	r5,2
   22f78:	295fd004 	addi	r5,r5,32576
   22f7c:	002400c0 	call	2400c <alt_find_dev>
   22f80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22f84:	e0bffe17 	ldw	r2,-8(fp)
}
   22f88:	e037883a 	mov	sp,fp
   22f8c:	dfc00117 	ldw	ra,4(sp)
   22f90:	df000017 	ldw	fp,0(sp)
   22f94:	dec00204 	addi	sp,sp,8
   22f98:	f800283a 	ret

00022f9c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   22f9c:	defffc04 	addi	sp,sp,-16
   22fa0:	dfc00315 	stw	ra,12(sp)
   22fa4:	df000215 	stw	fp,8(sp)
   22fa8:	df000204 	addi	fp,sp,8
   22fac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   22fb0:	e13fff17 	ldw	r4,-4(fp)
   22fb4:	014000b4 	movhi	r5,2
   22fb8:	295fd004 	addi	r5,r5,32576
   22fbc:	002400c0 	call	2400c <alt_find_dev>
   22fc0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22fc4:	e0bffe17 	ldw	r2,-8(fp)
}
   22fc8:	e037883a 	mov	sp,fp
   22fcc:	dfc00117 	ldw	ra,4(sp)
   22fd0:	df000017 	ldw	fp,0(sp)
   22fd4:	dec00204 	addi	sp,sp,8
   22fd8:	f800283a 	ret

00022fdc <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   22fdc:	defffd04 	addi	sp,sp,-12
   22fe0:	df000215 	stw	fp,8(sp)
   22fe4:	df000204 	addi	fp,sp,8
   22fe8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   22fec:	e0bfff17 	ldw	r2,-4(fp)
   22ff0:	1080400c 	andi	r2,r2,256
   22ff4:	1004d23a 	srli	r2,r2,8
   22ff8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   22ffc:	e0bffe03 	ldbu	r2,-8(fp)
}
   23000:	e037883a 	mov	sp,fp
   23004:	df000017 	ldw	fp,0(sp)
   23008:	dec00104 	addi	sp,sp,4
   2300c:	f800283a 	ret

00023010 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   23010:	defffd04 	addi	sp,sp,-12
   23014:	df000215 	stw	fp,8(sp)
   23018:	df000204 	addi	fp,sp,8
   2301c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   23020:	e0bfff17 	ldw	r2,-4(fp)
   23024:	1080004c 	andi	r2,r2,1
   23028:	e0bffe05 	stb	r2,-8(fp)
	return re;
   2302c:	e0bffe03 	ldbu	r2,-8(fp)
}
   23030:	e037883a 	mov	sp,fp
   23034:	df000017 	ldw	fp,0(sp)
   23038:	dec00104 	addi	sp,sp,4
   2303c:	f800283a 	ret

00023040 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   23040:	defffd04 	addi	sp,sp,-12
   23044:	df000215 	stw	fp,8(sp)
   23048:	df000204 	addi	fp,sp,8
   2304c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   23050:	e0bfff17 	ldw	r2,-4(fp)
   23054:	1081000c 	andi	r2,r2,1024
   23058:	1004d2ba 	srli	r2,r2,10
   2305c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   23060:	e0bffe03 	ldbu	r2,-8(fp)
}
   23064:	e037883a 	mov	sp,fp
   23068:	df000017 	ldw	fp,0(sp)
   2306c:	dec00104 	addi	sp,sp,4
   23070:	f800283a 	ret

00023074 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   23074:	defffd04 	addi	sp,sp,-12
   23078:	df000215 	stw	fp,8(sp)
   2307c:	df000204 	addi	fp,sp,8
   23080:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   23084:	e0bfff17 	ldw	r2,-4(fp)
   23088:	1004d43a 	srli	r2,r2,16
   2308c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   23090:	e0bffe0b 	ldhu	r2,-8(fp)
}
   23094:	e037883a 	mov	sp,fp
   23098:	df000017 	ldw	fp,0(sp)
   2309c:	dec00104 	addi	sp,sp,4
   230a0:	f800283a 	ret

000230a4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   230a4:	defffd04 	addi	sp,sp,-12
   230a8:	df000215 	stw	fp,8(sp)
   230ac:	df000204 	addi	fp,sp,8
   230b0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   230b4:	e0bfff17 	ldw	r2,-4(fp)
   230b8:	10a0000c 	andi	r2,r2,32768
   230bc:	1004d3fa 	srli	r2,r2,15
   230c0:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   230c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   230c8:	e037883a 	mov	sp,fp
   230cc:	df000017 	ldw	fp,0(sp)
   230d0:	dec00104 	addi	sp,sp,4
   230d4:	f800283a 	ret

000230d8 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   230d8:	defffd04 	addi	sp,sp,-12
   230dc:	df000215 	stw	fp,8(sp)
   230e0:	df000204 	addi	fp,sp,8
   230e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   230e8:	e0bfff17 	ldw	r2,-4(fp)
   230ec:	e0bffe05 	stb	r2,-8(fp)
	return data;
   230f0:	e0bffe03 	ldbu	r2,-8(fp)
}
   230f4:	e037883a 	mov	sp,fp
   230f8:	df000017 	ldw	fp,0(sp)
   230fc:	dec00104 	addi	sp,sp,4
   23100:	f800283a 	ret

00023104 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   23104:	defffb04 	addi	sp,sp,-20
   23108:	dfc00415 	stw	ra,16(sp)
   2310c:	df000315 	stw	fp,12(sp)
   23110:	df000304 	addi	fp,sp,12
   23114:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   23118:	e13fff17 	ldw	r4,-4(fp)
   2311c:	01403fc4 	movi	r5,255
   23120:	00233600 	call	23360 <alt_up_ps2_write_data_byte_with_ack>
   23124:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   23128:	e0bffd17 	ldw	r2,-12(fp)
   2312c:	1000211e 	bne	r2,zero,231b4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   23130:	e0bffe04 	addi	r2,fp,-8
   23134:	e13fff17 	ldw	r4,-4(fp)
   23138:	100b883a 	mov	r5,r2
   2313c:	00233c40 	call	233c4 <alt_up_ps2_read_data_byte_timeout>
   23140:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   23144:	e0bffd17 	ldw	r2,-12(fp)
   23148:	10001a1e 	bne	r2,zero,231b4 <alt_up_ps2_init+0xb0>
   2314c:	e0bffe03 	ldbu	r2,-8(fp)
   23150:	10803fcc 	andi	r2,r2,255
   23154:	10802a98 	cmpnei	r2,r2,170
   23158:	1000161e 	bne	r2,zero,231b4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   2315c:	e0bffe04 	addi	r2,fp,-8
   23160:	e13fff17 	ldw	r4,-4(fp)
   23164:	100b883a 	mov	r5,r2
   23168:	00233c40 	call	233c4 <alt_up_ps2_read_data_byte_timeout>
   2316c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   23170:	e0bffd17 	ldw	r2,-12(fp)
   23174:	10bfe318 	cmpnei	r2,r2,-116
   23178:	1000041e 	bne	r2,zero,2318c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   2317c:	e0bfff17 	ldw	r2,-4(fp)
   23180:	00c00044 	movi	r3,1
   23184:	10c00d15 	stw	r3,52(r2)
   23188:	00000a06 	br	231b4 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   2318c:	e0bffd17 	ldw	r2,-12(fp)
   23190:	1000081e 	bne	r2,zero,231b4 <alt_up_ps2_init+0xb0>
   23194:	e0bffe03 	ldbu	r2,-8(fp)
   23198:	10803fcc 	andi	r2,r2,255
   2319c:	1000051e 	bne	r2,zero,231b4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   231a0:	e0bfff17 	ldw	r2,-4(fp)
   231a4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   231a8:	e13fff17 	ldw	r4,-4(fp)
   231ac:	01403d04 	movi	r5,244
   231b0:	002327c0 	call	2327c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   231b4:	e037883a 	mov	sp,fp
   231b8:	dfc00117 	ldw	ra,4(sp)
   231bc:	df000017 	ldw	fp,0(sp)
   231c0:	dec00204 	addi	sp,sp,8
   231c4:	f800283a 	ret

000231c8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   231c8:	defffd04 	addi	sp,sp,-12
   231cc:	df000215 	stw	fp,8(sp)
   231d0:	df000204 	addi	fp,sp,8
   231d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   231d8:	e0bfff17 	ldw	r2,-4(fp)
   231dc:	10800a17 	ldw	r2,40(r2)
   231e0:	10800104 	addi	r2,r2,4
   231e4:	10800037 	ldwio	r2,0(r2)
   231e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   231ec:	e0bffe17 	ldw	r2,-8(fp)
   231f0:	10800054 	ori	r2,r2,1
   231f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   231f8:	e0bfff17 	ldw	r2,-4(fp)
   231fc:	10800a17 	ldw	r2,40(r2)
   23200:	10800104 	addi	r2,r2,4
   23204:	1007883a 	mov	r3,r2
   23208:	e0bffe17 	ldw	r2,-8(fp)
   2320c:	18800035 	stwio	r2,0(r3)
}
   23210:	e037883a 	mov	sp,fp
   23214:	df000017 	ldw	fp,0(sp)
   23218:	dec00104 	addi	sp,sp,4
   2321c:	f800283a 	ret

00023220 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   23220:	defffd04 	addi	sp,sp,-12
   23224:	df000215 	stw	fp,8(sp)
   23228:	df000204 	addi	fp,sp,8
   2322c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   23230:	e0bfff17 	ldw	r2,-4(fp)
   23234:	10800a17 	ldw	r2,40(r2)
   23238:	10800104 	addi	r2,r2,4
   2323c:	10800037 	ldwio	r2,0(r2)
   23240:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   23244:	e0fffe17 	ldw	r3,-8(fp)
   23248:	00bfff84 	movi	r2,-2
   2324c:	1884703a 	and	r2,r3,r2
   23250:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   23254:	e0bfff17 	ldw	r2,-4(fp)
   23258:	10800a17 	ldw	r2,40(r2)
   2325c:	10800104 	addi	r2,r2,4
   23260:	1007883a 	mov	r3,r2
   23264:	e0bffe17 	ldw	r2,-8(fp)
   23268:	18800035 	stwio	r2,0(r3)
}
   2326c:	e037883a 	mov	sp,fp
   23270:	df000017 	ldw	fp,0(sp)
   23274:	dec00104 	addi	sp,sp,4
   23278:	f800283a 	ret

0002327c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   2327c:	defffb04 	addi	sp,sp,-20
   23280:	dfc00415 	stw	ra,16(sp)
   23284:	df000315 	stw	fp,12(sp)
   23288:	df000304 	addi	fp,sp,12
   2328c:	e13ffe15 	stw	r4,-8(fp)
   23290:	2805883a 	mov	r2,r5
   23294:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   23298:	e0bffe17 	ldw	r2,-8(fp)
   2329c:	10800a17 	ldw	r2,40(r2)
   232a0:	1007883a 	mov	r3,r2
   232a4:	e0bfff03 	ldbu	r2,-4(fp)
   232a8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   232ac:	e0bffe17 	ldw	r2,-8(fp)
   232b0:	10800a17 	ldw	r2,40(r2)
   232b4:	10800104 	addi	r2,r2,4
   232b8:	10800037 	ldwio	r2,0(r2)
   232bc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   232c0:	e13ffd17 	ldw	r4,-12(fp)
   232c4:	00230400 	call	23040 <read_CE_bit>
   232c8:	10803fcc 	andi	r2,r2,255
   232cc:	10000226 	beq	r2,zero,232d8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   232d0:	00bffec4 	movi	r2,-5
   232d4:	00000106 	br	232dc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   232d8:	0005883a 	mov	r2,zero
}
   232dc:	e037883a 	mov	sp,fp
   232e0:	dfc00117 	ldw	ra,4(sp)
   232e4:	df000017 	ldw	fp,0(sp)
   232e8:	dec00204 	addi	sp,sp,8
   232ec:	f800283a 	ret

000232f0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   232f0:	defffc04 	addi	sp,sp,-16
   232f4:	dfc00315 	stw	ra,12(sp)
   232f8:	df000215 	stw	fp,8(sp)
   232fc:	df000204 	addi	fp,sp,8
   23300:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   23304:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   23308:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   2330c:	e0bffe44 	addi	r2,fp,-7
   23310:	e13fff17 	ldw	r4,-4(fp)
   23314:	100b883a 	mov	r5,r2
   23318:	00233c40 	call	233c4 <alt_up_ps2_read_data_byte_timeout>
   2331c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   23320:	e0bffe03 	ldbu	r2,-8(fp)
   23324:	1000061e 	bne	r2,zero,23340 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   23328:	e0bffe43 	ldbu	r2,-7(fp)
   2332c:	10803fcc 	andi	r2,r2,255
   23330:	10803e98 	cmpnei	r2,r2,250
   23334:	1000041e 	bne	r2,zero,23348 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   23338:	0005883a 	mov	r2,zero
   2333c:	00000306 	br	2334c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   23340:	e0bffe03 	ldbu	r2,-8(fp)
   23344:	00000106 	br	2334c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   23348:	003ff006 	br	2330c <__alt_mem_Flash_flash_data+0xf402330c>
	return -ETIMEDOUT;
}
   2334c:	e037883a 	mov	sp,fp
   23350:	dfc00117 	ldw	ra,4(sp)
   23354:	df000017 	ldw	fp,0(sp)
   23358:	dec00204 	addi	sp,sp,8
   2335c:	f800283a 	ret

00023360 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   23360:	defffa04 	addi	sp,sp,-24
   23364:	dfc00515 	stw	ra,20(sp)
   23368:	df000415 	stw	fp,16(sp)
   2336c:	df000404 	addi	fp,sp,16
   23370:	e13ffe15 	stw	r4,-8(fp)
   23374:	2805883a 	mov	r2,r5
   23378:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   2337c:	e0bfff03 	ldbu	r2,-4(fp)
   23380:	e13ffe17 	ldw	r4,-8(fp)
   23384:	100b883a 	mov	r5,r2
   23388:	002327c0 	call	2327c <alt_up_ps2_write_data_byte>
   2338c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   23390:	e0bffc17 	ldw	r2,-16(fp)
   23394:	10000226 	beq	r2,zero,233a0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   23398:	e0bffc17 	ldw	r2,-16(fp)
   2339c:	00000406 	br	233b0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   233a0:	e13ffe17 	ldw	r4,-8(fp)
   233a4:	00232f00 	call	232f0 <alt_up_ps2_wait_for_ack>
   233a8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   233ac:	e0bffd17 	ldw	r2,-12(fp)
}
   233b0:	e037883a 	mov	sp,fp
   233b4:	dfc00117 	ldw	ra,4(sp)
   233b8:	df000017 	ldw	fp,0(sp)
   233bc:	dec00204 	addi	sp,sp,8
   233c0:	f800283a 	ret

000233c4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   233c4:	defffa04 	addi	sp,sp,-24
   233c8:	dfc00515 	stw	ra,20(sp)
   233cc:	df000415 	stw	fp,16(sp)
   233d0:	df000404 	addi	fp,sp,16
   233d4:	e13ffe15 	stw	r4,-8(fp)
   233d8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   233dc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   233e0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   233e4:	e0bffc17 	ldw	r2,-16(fp)
   233e8:	10800044 	addi	r2,r2,1
   233ec:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   233f0:	e0bffe17 	ldw	r2,-8(fp)
   233f4:	10800a17 	ldw	r2,40(r2)
   233f8:	10800037 	ldwio	r2,0(r2)
   233fc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   23400:	e13ffd17 	ldw	r4,-12(fp)
   23404:	00230a40 	call	230a4 <read_data_valid>
   23408:	10803fcc 	andi	r2,r2,255
   2340c:	10000726 	beq	r2,zero,2342c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   23410:	e13ffd17 	ldw	r4,-12(fp)
   23414:	00230d80 	call	230d8 <read_data_byte>
   23418:	1007883a 	mov	r3,r2
   2341c:	e0bfff17 	ldw	r2,-4(fp)
   23420:	10c00005 	stb	r3,0(r2)
			return 0;
   23424:	0005883a 	mov	r2,zero
   23428:	00000a06 	br	23454 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   2342c:	e0bffe17 	ldw	r2,-8(fp)
   23430:	10800c17 	ldw	r2,48(r2)
   23434:	10000626 	beq	r2,zero,23450 <alt_up_ps2_read_data_byte_timeout+0x8c>
   23438:	e0bffe17 	ldw	r2,-8(fp)
   2343c:	10c00c17 	ldw	r3,48(r2)
   23440:	e0bffc17 	ldw	r2,-16(fp)
   23444:	1880022e 	bgeu	r3,r2,23450 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   23448:	00bfe304 	movi	r2,-116
   2344c:	00000106 	br	23454 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   23450:	003fe406 	br	233e4 <__alt_mem_Flash_flash_data+0xf40233e4>
}
   23454:	e037883a 	mov	sp,fp
   23458:	dfc00117 	ldw	ra,4(sp)
   2345c:	df000017 	ldw	fp,0(sp)
   23460:	dec00204 	addi	sp,sp,8
   23464:	f800283a 	ret

00023468 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   23468:	defffb04 	addi	sp,sp,-20
   2346c:	dfc00415 	stw	ra,16(sp)
   23470:	df000315 	stw	fp,12(sp)
   23474:	df000304 	addi	fp,sp,12
   23478:	e13ffe15 	stw	r4,-8(fp)
   2347c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   23480:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   23484:	e0bffe17 	ldw	r2,-8(fp)
   23488:	10800a17 	ldw	r2,40(r2)
   2348c:	10800037 	ldwio	r2,0(r2)
   23490:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   23494:	e13ffd17 	ldw	r4,-12(fp)
   23498:	00230a40 	call	230a4 <read_data_valid>
   2349c:	10803fcc 	andi	r2,r2,255
   234a0:	10000726 	beq	r2,zero,234c0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   234a4:	e13ffd17 	ldw	r4,-12(fp)
   234a8:	00230d80 	call	230d8 <read_data_byte>
   234ac:	1007883a 	mov	r3,r2
   234b0:	e0bfff17 	ldw	r2,-4(fp)
   234b4:	10c00005 	stb	r3,0(r2)
		return 0;
   234b8:	0005883a 	mov	r2,zero
   234bc:	00000106 	br	234c4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   234c0:	00bfffc4 	movi	r2,-1
}
   234c4:	e037883a 	mov	sp,fp
   234c8:	dfc00117 	ldw	ra,4(sp)
   234cc:	df000017 	ldw	fp,0(sp)
   234d0:	dec00204 	addi	sp,sp,8
   234d4:	f800283a 	ret

000234d8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   234d8:	defffb04 	addi	sp,sp,-20
   234dc:	dfc00415 	stw	ra,16(sp)
   234e0:	df000315 	stw	fp,12(sp)
   234e4:	df000304 	addi	fp,sp,12
   234e8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   234ec:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   234f0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   234f4:	e0bfff17 	ldw	r2,-4(fp)
   234f8:	10800a17 	ldw	r2,40(r2)
   234fc:	10800037 	ldwio	r2,0(r2)
   23500:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   23504:	e13ffe17 	ldw	r4,-8(fp)
   23508:	00230740 	call	23074 <read_num_bytes_available>
   2350c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   23510:	e0bffd0b 	ldhu	r2,-12(fp)
   23514:	103ff71e 	bne	r2,zero,234f4 <__alt_mem_Flash_flash_data+0xf40234f4>
}
   23518:	e037883a 	mov	sp,fp
   2351c:	dfc00117 	ldw	ra,4(sp)
   23520:	df000017 	ldw	fp,0(sp)
   23524:	dec00204 	addi	sp,sp,8
   23528:	f800283a 	ret

0002352c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   2352c:	defff804 	addi	sp,sp,-32
   23530:	dfc00715 	stw	ra,28(sp)
   23534:	df000615 	stw	fp,24(sp)
   23538:	df000604 	addi	fp,sp,24
   2353c:	e13ffd15 	stw	r4,-12(fp)
   23540:	e17ffe15 	stw	r5,-8(fp)
   23544:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   23548:	e0bffd17 	ldw	r2,-12(fp)
   2354c:	10800017 	ldw	r2,0(r2)
   23550:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   23554:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   23558:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   2355c:	e0fffc17 	ldw	r3,-16(fp)
   23560:	e0bfff17 	ldw	r2,-4(fp)
   23564:	18bffd16 	blt	r3,r2,2355c <__alt_mem_Flash_flash_data+0xf402355c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   23568:	e0bffe17 	ldw	r2,-8(fp)
   2356c:	10c00044 	addi	r3,r2,1
   23570:	e0fffe15 	stw	r3,-8(fp)
   23574:	e13ffa17 	ldw	r4,-24(fp)
   23578:	100b883a 	mov	r5,r2
   2357c:	00233c40 	call	233c4 <alt_up_ps2_read_data_byte_timeout>
   23580:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   23584:	e0bffb17 	ldw	r2,-20(fp)
   23588:	10000226 	beq	r2,zero,23594 <alt_up_ps2_read_fd+0x68>
			return count;
   2358c:	e0bffc17 	ldw	r2,-16(fp)
   23590:	00000406 	br	235a4 <alt_up_ps2_read_fd+0x78>
		count++;
   23594:	e0bffc17 	ldw	r2,-16(fp)
   23598:	10800044 	addi	r2,r2,1
   2359c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   235a0:	e0bffc17 	ldw	r2,-16(fp)
}
   235a4:	e037883a 	mov	sp,fp
   235a8:	dfc00117 	ldw	ra,4(sp)
   235ac:	df000017 	ldw	fp,0(sp)
   235b0:	dec00204 	addi	sp,sp,8
   235b4:	f800283a 	ret

000235b8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   235b8:	defff804 	addi	sp,sp,-32
   235bc:	dfc00715 	stw	ra,28(sp)
   235c0:	df000615 	stw	fp,24(sp)
   235c4:	df000604 	addi	fp,sp,24
   235c8:	e13ffd15 	stw	r4,-12(fp)
   235cc:	e17ffe15 	stw	r5,-8(fp)
   235d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   235d4:	e0bffd17 	ldw	r2,-12(fp)
   235d8:	10800017 	ldw	r2,0(r2)
   235dc:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   235e0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   235e4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   235e8:	00001006 	br	2362c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   235ec:	e0bffe17 	ldw	r2,-8(fp)
   235f0:	10c00044 	addi	r3,r2,1
   235f4:	e0fffe15 	stw	r3,-8(fp)
   235f8:	10800003 	ldbu	r2,0(r2)
   235fc:	10803fcc 	andi	r2,r2,255
   23600:	e13ffb17 	ldw	r4,-20(fp)
   23604:	100b883a 	mov	r5,r2
   23608:	002327c0 	call	2327c <alt_up_ps2_write_data_byte>
   2360c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   23610:	e0bffc17 	ldw	r2,-16(fp)
   23614:	10000226 	beq	r2,zero,23620 <alt_up_ps2_write_fd+0x68>
			return count;
   23618:	e0bffa17 	ldw	r2,-24(fp)
   2361c:	00000706 	br	2363c <alt_up_ps2_write_fd+0x84>
		count++;
   23620:	e0bffa17 	ldw	r2,-24(fp)
   23624:	10800044 	addi	r2,r2,1
   23628:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   2362c:	e0fffa17 	ldw	r3,-24(fp)
   23630:	e0bfff17 	ldw	r2,-4(fp)
   23634:	18bfed16 	blt	r3,r2,235ec <__alt_mem_Flash_flash_data+0xf40235ec>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   23638:	e0bffa17 	ldw	r2,-24(fp)
}
   2363c:	e037883a 	mov	sp,fp
   23640:	dfc00117 	ldw	ra,4(sp)
   23644:	df000017 	ldw	fp,0(sp)
   23648:	dec00204 	addi	sp,sp,8
   2364c:	f800283a 	ret

00023650 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   23650:	defffc04 	addi	sp,sp,-16
   23654:	dfc00315 	stw	ra,12(sp)
   23658:	df000215 	stw	fp,8(sp)
   2365c:	df000204 	addi	fp,sp,8
   23660:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   23664:	e13fff17 	ldw	r4,-4(fp)
   23668:	014000b4 	movhi	r5,2
   2366c:	295fd004 	addi	r5,r5,32576
   23670:	002400c0 	call	2400c <alt_find_dev>
   23674:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   23678:	e0bffe17 	ldw	r2,-8(fp)
}
   2367c:	e037883a 	mov	sp,fp
   23680:	dfc00117 	ldw	ra,4(sp)
   23684:	df000017 	ldw	fp,0(sp)
   23688:	dec00204 	addi	sp,sp,8
   2368c:	f800283a 	ret

00023690 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   23690:	defffd04 	addi	sp,sp,-12
   23694:	df000215 	stw	fp,8(sp)
   23698:	df000204 	addi	fp,sp,8
   2369c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   236a0:	e0bfff17 	ldw	r2,-4(fp)
   236a4:	10800a17 	ldw	r2,40(r2)
   236a8:	10800104 	addi	r2,r2,4
   236ac:	10800037 	ldwio	r2,0(r2)
   236b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   236b4:	e0bffe17 	ldw	r2,-8(fp)
   236b8:	10800054 	ori	r2,r2,1
   236bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   236c0:	e0bfff17 	ldw	r2,-4(fp)
   236c4:	10800a17 	ldw	r2,40(r2)
   236c8:	10800104 	addi	r2,r2,4
   236cc:	1007883a 	mov	r3,r2
   236d0:	e0bffe17 	ldw	r2,-8(fp)
   236d4:	18800035 	stwio	r2,0(r3)
}
   236d8:	e037883a 	mov	sp,fp
   236dc:	df000017 	ldw	fp,0(sp)
   236e0:	dec00104 	addi	sp,sp,4
   236e4:	f800283a 	ret

000236e8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   236e8:	defffd04 	addi	sp,sp,-12
   236ec:	df000215 	stw	fp,8(sp)
   236f0:	df000204 	addi	fp,sp,8
   236f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   236f8:	e0bfff17 	ldw	r2,-4(fp)
   236fc:	10800a17 	ldw	r2,40(r2)
   23700:	10800104 	addi	r2,r2,4
   23704:	10800037 	ldwio	r2,0(r2)
   23708:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   2370c:	e0fffe17 	ldw	r3,-8(fp)
   23710:	00bfff84 	movi	r2,-2
   23714:	1884703a 	and	r2,r3,r2
   23718:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   2371c:	e0bfff17 	ldw	r2,-4(fp)
   23720:	10800a17 	ldw	r2,40(r2)
   23724:	10800104 	addi	r2,r2,4
   23728:	1007883a 	mov	r3,r2
   2372c:	e0bffe17 	ldw	r2,-8(fp)
   23730:	18800035 	stwio	r2,0(r3)
}
   23734:	e037883a 	mov	sp,fp
   23738:	df000017 	ldw	fp,0(sp)
   2373c:	dec00104 	addi	sp,sp,4
   23740:	f800283a 	ret

00023744 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   23744:	defffd04 	addi	sp,sp,-12
   23748:	df000215 	stw	fp,8(sp)
   2374c:	df000204 	addi	fp,sp,8
   23750:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   23754:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   23758:	e0bfff17 	ldw	r2,-4(fp)
   2375c:	10800a17 	ldw	r2,40(r2)
   23760:	10800084 	addi	r2,r2,2
   23764:	1080002b 	ldhuio	r2,0(r2)
   23768:	10bfffcc 	andi	r2,r2,65535
   2376c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   23770:	e0bffe0b 	ldhu	r2,-8(fp)
}
   23774:	e037883a 	mov	sp,fp
   23778:	df000017 	ldw	fp,0(sp)
   2377c:	dec00104 	addi	sp,sp,4
   23780:	f800283a 	ret

00023784 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   23784:	defffd04 	addi	sp,sp,-12
   23788:	df000215 	stw	fp,8(sp)
   2378c:	df000204 	addi	fp,sp,8
   23790:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   23794:	e0bfff17 	ldw	r2,-4(fp)
   23798:	10800a17 	ldw	r2,40(r2)
   2379c:	10800104 	addi	r2,r2,4
   237a0:	10800037 	ldwio	r2,0(r2)
   237a4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   237a8:	e0bffe17 	ldw	r2,-8(fp)
   237ac:	1004d43a 	srli	r2,r2,16
}
   237b0:	e037883a 	mov	sp,fp
   237b4:	df000017 	ldw	fp,0(sp)
   237b8:	dec00104 	addi	sp,sp,4
   237bc:	f800283a 	ret

000237c0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   237c0:	defffd04 	addi	sp,sp,-12
   237c4:	df000215 	stw	fp,8(sp)
   237c8:	df000204 	addi	fp,sp,8
   237cc:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   237d0:	e0bfff17 	ldw	r2,-4(fp)
   237d4:	1080800c 	andi	r2,r2,512
   237d8:	1004d27a 	srli	r2,r2,9
   237dc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   237e0:	e0bffe17 	ldw	r2,-8(fp)
   237e4:	10000226 	beq	r2,zero,237f0 <alt_up_rs232_check_parity+0x30>
   237e8:	00bfffc4 	movi	r2,-1
   237ec:	00000106 	br	237f4 <alt_up_rs232_check_parity+0x34>
   237f0:	0005883a 	mov	r2,zero
}
   237f4:	e037883a 	mov	sp,fp
   237f8:	df000017 	ldw	fp,0(sp)
   237fc:	dec00104 	addi	sp,sp,4
   23800:	f800283a 	ret

00023804 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   23804:	defffd04 	addi	sp,sp,-12
   23808:	df000215 	stw	fp,8(sp)
   2380c:	df000204 	addi	fp,sp,8
   23810:	e13ffe15 	stw	r4,-8(fp)
   23814:	2805883a 	mov	r2,r5
   23818:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   2381c:	e0bffe17 	ldw	r2,-8(fp)
   23820:	10800a17 	ldw	r2,40(r2)
   23824:	1007883a 	mov	r3,r2
   23828:	e0bfff03 	ldbu	r2,-4(fp)
   2382c:	18800035 	stwio	r2,0(r3)
	return 0;
   23830:	0005883a 	mov	r2,zero
}
   23834:	e037883a 	mov	sp,fp
   23838:	df000017 	ldw	fp,0(sp)
   2383c:	dec00104 	addi	sp,sp,4
   23840:	f800283a 	ret

00023844 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   23844:	defffa04 	addi	sp,sp,-24
   23848:	dfc00515 	stw	ra,20(sp)
   2384c:	df000415 	stw	fp,16(sp)
   23850:	df000404 	addi	fp,sp,16
   23854:	e13ffd15 	stw	r4,-12(fp)
   23858:	e17ffe15 	stw	r5,-8(fp)
   2385c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   23860:	e0bffd17 	ldw	r2,-12(fp)
   23864:	10800a17 	ldw	r2,40(r2)
   23868:	10800037 	ldwio	r2,0(r2)
   2386c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   23870:	e0bffc17 	ldw	r2,-16(fp)
   23874:	1007883a 	mov	r3,r2
   23878:	e0bffe17 	ldw	r2,-8(fp)
   2387c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   23880:	e13ffc17 	ldw	r4,-16(fp)
   23884:	00237c00 	call	237c0 <alt_up_rs232_check_parity>
   23888:	1007883a 	mov	r3,r2
   2388c:	e0bfff17 	ldw	r2,-4(fp)
   23890:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   23894:	e0bffc17 	ldw	r2,-16(fp)
   23898:	10a0000c 	andi	r2,r2,32768
   2389c:	1004d3fa 	srli	r2,r2,15
   238a0:	10bfffc4 	addi	r2,r2,-1
}
   238a4:	e037883a 	mov	sp,fp
   238a8:	dfc00117 	ldw	ra,4(sp)
   238ac:	df000017 	ldw	fp,0(sp)
   238b0:	dec00204 	addi	sp,sp,8
   238b4:	f800283a 	ret

000238b8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   238b8:	defff804 	addi	sp,sp,-32
   238bc:	dfc00715 	stw	ra,28(sp)
   238c0:	df000615 	stw	fp,24(sp)
   238c4:	df000604 	addi	fp,sp,24
   238c8:	e13ffd15 	stw	r4,-12(fp)
   238cc:	e17ffe15 	stw	r5,-8(fp)
   238d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   238d4:	e0bffd17 	ldw	r2,-12(fp)
   238d8:	10800017 	ldw	r2,0(r2)
   238dc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   238e0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   238e4:	00000e06 	br	23920 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   238e8:	e0bffe17 	ldw	r2,-8(fp)
   238ec:	10c00044 	addi	r3,r2,1
   238f0:	e0fffe15 	stw	r3,-8(fp)
   238f4:	e0fffc04 	addi	r3,fp,-16
   238f8:	e13ffb17 	ldw	r4,-20(fp)
   238fc:	100b883a 	mov	r5,r2
   23900:	180d883a 	mov	r6,r3
   23904:	00238440 	call	23844 <alt_up_rs232_read_data>
   23908:	1000041e 	bne	r2,zero,2391c <alt_up_rs232_read_fd+0x64>
			count++;
   2390c:	e0bffa17 	ldw	r2,-24(fp)
   23910:	10800044 	addi	r2,r2,1
   23914:	e0bffa15 	stw	r2,-24(fp)
   23918:	00000106 	br	23920 <alt_up_rs232_read_fd+0x68>
		else
			break;
   2391c:	00000406 	br	23930 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   23920:	e0bfff17 	ldw	r2,-4(fp)
   23924:	10ffffc4 	addi	r3,r2,-1
   23928:	e0ffff15 	stw	r3,-4(fp)
   2392c:	103fee1e 	bne	r2,zero,238e8 <__alt_mem_Flash_flash_data+0xf40238e8>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   23930:	e0bffa17 	ldw	r2,-24(fp)
}
   23934:	e037883a 	mov	sp,fp
   23938:	dfc00117 	ldw	ra,4(sp)
   2393c:	df000017 	ldw	fp,0(sp)
   23940:	dec00204 	addi	sp,sp,8
   23944:	f800283a 	ret

00023948 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   23948:	defff904 	addi	sp,sp,-28
   2394c:	dfc00615 	stw	ra,24(sp)
   23950:	df000515 	stw	fp,20(sp)
   23954:	df000504 	addi	fp,sp,20
   23958:	e13ffd15 	stw	r4,-12(fp)
   2395c:	e17ffe15 	stw	r5,-8(fp)
   23960:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   23964:	e0bffd17 	ldw	r2,-12(fp)
   23968:	10800017 	ldw	r2,0(r2)
   2396c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   23970:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   23974:	00000f06 	br	239b4 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   23978:	e0bffe17 	ldw	r2,-8(fp)
   2397c:	10800003 	ldbu	r2,0(r2)
   23980:	10803fcc 	andi	r2,r2,255
   23984:	e13ffc17 	ldw	r4,-16(fp)
   23988:	100b883a 	mov	r5,r2
   2398c:	00238040 	call	23804 <alt_up_rs232_write_data>
   23990:	1000071e 	bne	r2,zero,239b0 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   23994:	e0bffb17 	ldw	r2,-20(fp)
   23998:	10800044 	addi	r2,r2,1
   2399c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   239a0:	e0bffe17 	ldw	r2,-8(fp)
   239a4:	10800044 	addi	r2,r2,1
   239a8:	e0bffe15 	stw	r2,-8(fp)
   239ac:	00000106 	br	239b4 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   239b0:	00000406 	br	239c4 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   239b4:	e0bfff17 	ldw	r2,-4(fp)
   239b8:	10ffffc4 	addi	r3,r2,-1
   239bc:	e0ffff15 	stw	r3,-4(fp)
   239c0:	103fed1e 	bne	r2,zero,23978 <__alt_mem_Flash_flash_data+0xf4023978>
			ptr++;
		}
		else
			break;
	}
	return count;
   239c4:	e0bffb17 	ldw	r2,-20(fp)
}
   239c8:	e037883a 	mov	sp,fp
   239cc:	dfc00117 	ldw	ra,4(sp)
   239d0:	df000017 	ldw	fp,0(sp)
   239d4:	dec00204 	addi	sp,sp,8
   239d8:	f800283a 	ret

000239dc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   239dc:	defffc04 	addi	sp,sp,-16
   239e0:	dfc00315 	stw	ra,12(sp)
   239e4:	df000215 	stw	fp,8(sp)
   239e8:	df000204 	addi	fp,sp,8
   239ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   239f0:	e13fff17 	ldw	r4,-4(fp)
   239f4:	014000b4 	movhi	r5,2
   239f8:	295fd004 	addi	r5,r5,32576
   239fc:	002400c0 	call	2400c <alt_find_dev>
   23a00:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   23a04:	e0bffe17 	ldw	r2,-8(fp)
}
   23a08:	e037883a 	mov	sp,fp
   23a0c:	dfc00117 	ldw	ra,4(sp)
   23a10:	df000017 	ldw	fp,0(sp)
   23a14:	dec00204 	addi	sp,sp,8
   23a18:	f800283a 	ret

00023a1c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   23a1c:	defffc04 	addi	sp,sp,-16
   23a20:	dfc00315 	stw	ra,12(sp)
   23a24:	df000215 	stw	fp,8(sp)
   23a28:	df000204 	addi	fp,sp,8
   23a2c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   23a30:	e0bfff17 	ldw	r2,-4(fp)
   23a34:	10800217 	ldw	r2,8(r2)
   23a38:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   23a3c:	00000b06 	br	23a6c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   23a40:	e13ffe17 	ldw	r4,-8(fp)
   23a44:	014000b4 	movhi	r5,2
   23a48:	29582304 	addi	r5,r5,24716
   23a4c:	000d9740 	call	d974 <strcmp>
   23a50:	1000031e 	bne	r2,zero,23a60 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   23a54:	e0bffe17 	ldw	r2,-8(fp)
   23a58:	10000005 	stb	zero,0(r2)
			break;
   23a5c:	00000906 	br	23a84 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   23a60:	e0bffe17 	ldw	r2,-8(fp)
   23a64:	10800044 	addi	r2,r2,1
   23a68:	e0bffe15 	stw	r2,-8(fp)
   23a6c:	e0bffe17 	ldw	r2,-8(fp)
   23a70:	10800003 	ldbu	r2,0(r2)
   23a74:	10803fcc 	andi	r2,r2,255
   23a78:	1080201c 	xori	r2,r2,128
   23a7c:	10bfe004 	addi	r2,r2,-128
   23a80:	103fef1e 	bne	r2,zero,23a40 <__alt_mem_Flash_flash_data+0xf4023a40>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   23a84:	0001883a 	nop
}
   23a88:	e037883a 	mov	sp,fp
   23a8c:	dfc00117 	ldw	ra,4(sp)
   23a90:	df000017 	ldw	fp,0(sp)
   23a94:	dec00204 	addi	sp,sp,8
   23a98:	f800283a 	ret

00023a9c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   23a9c:	defffc04 	addi	sp,sp,-16
   23aa0:	dfc00315 	stw	ra,12(sp)
   23aa4:	df000215 	stw	fp,8(sp)
   23aa8:	df000204 	addi	fp,sp,8
   23aac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   23ab0:	e13fff17 	ldw	r4,-4(fp)
   23ab4:	014000b4 	movhi	r5,2
   23ab8:	295fd004 	addi	r5,r5,32576
   23abc:	002400c0 	call	2400c <alt_find_dev>
   23ac0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   23ac4:	e0bffe17 	ldw	r2,-8(fp)
}
   23ac8:	e037883a 	mov	sp,fp
   23acc:	dfc00117 	ldw	ra,4(sp)
   23ad0:	df000017 	ldw	fp,0(sp)
   23ad4:	dec00204 	addi	sp,sp,8
   23ad8:	f800283a 	ret

00023adc <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   23adc:	defffa04 	addi	sp,sp,-24
   23ae0:	df000515 	stw	fp,20(sp)
   23ae4:	df000504 	addi	fp,sp,20
   23ae8:	e13ffc15 	stw	r4,-16(fp)
   23aec:	2805883a 	mov	r2,r5
   23af0:	e1bffe15 	stw	r6,-8(fp)
   23af4:	e1ffff15 	stw	r7,-4(fp)
   23af8:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   23afc:	e0bffc17 	ldw	r2,-16(fp)
   23b00:	10800c17 	ldw	r2,48(r2)
   23b04:	e0fffe17 	ldw	r3,-8(fp)
   23b08:	1880042e 	bgeu	r3,r2,23b1c <alt_up_char_buffer_draw+0x40>
   23b0c:	e0bffc17 	ldw	r2,-16(fp)
   23b10:	10800d17 	ldw	r2,52(r2)
   23b14:	e0ffff17 	ldw	r3,-4(fp)
   23b18:	18800236 	bltu	r3,r2,23b24 <alt_up_char_buffer_draw+0x48>
		return -1;
   23b1c:	00bfffc4 	movi	r2,-1
   23b20:	00001d06 	br	23b98 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   23b24:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   23b28:	e0bffc17 	ldw	r2,-16(fp)
   23b2c:	10c00f17 	ldw	r3,60(r2)
   23b30:	e0bffe17 	ldw	r2,-8(fp)
   23b34:	1884703a 	and	r2,r3,r2
   23b38:	e0fffc17 	ldw	r3,-16(fp)
   23b3c:	18c00e17 	ldw	r3,56(r3)
   23b40:	10c4983a 	sll	r2,r2,r3
   23b44:	e0fffb17 	ldw	r3,-20(fp)
   23b48:	1884b03a 	or	r2,r3,r2
   23b4c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   23b50:	e0bffc17 	ldw	r2,-16(fp)
   23b54:	10c01117 	ldw	r3,68(r2)
   23b58:	e0bfff17 	ldw	r2,-4(fp)
   23b5c:	1884703a 	and	r2,r3,r2
   23b60:	e0fffc17 	ldw	r3,-16(fp)
   23b64:	18c01017 	ldw	r3,64(r3)
   23b68:	10c4983a 	sll	r2,r2,r3
   23b6c:	e0fffb17 	ldw	r3,-20(fp)
   23b70:	1884b03a 	or	r2,r3,r2
   23b74:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   23b78:	e0bffc17 	ldw	r2,-16(fp)
   23b7c:	10c00b17 	ldw	r3,44(r2)
   23b80:	e0bffb17 	ldw	r2,-20(fp)
   23b84:	1885883a 	add	r2,r3,r2
   23b88:	1007883a 	mov	r3,r2
   23b8c:	e0bffd03 	ldbu	r2,-12(fp)
   23b90:	18800025 	stbio	r2,0(r3)

	return 0;
   23b94:	0005883a 	mov	r2,zero
}
   23b98:	e037883a 	mov	sp,fp
   23b9c:	df000017 	ldw	fp,0(sp)
   23ba0:	dec00104 	addi	sp,sp,4
   23ba4:	f800283a 	ret

00023ba8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   23ba8:	defffa04 	addi	sp,sp,-24
   23bac:	df000515 	stw	fp,20(sp)
   23bb0:	df000504 	addi	fp,sp,20
   23bb4:	e13ffc15 	stw	r4,-16(fp)
   23bb8:	e17ffd15 	stw	r5,-12(fp)
   23bbc:	e1bffe15 	stw	r6,-8(fp)
   23bc0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   23bc4:	e0bffc17 	ldw	r2,-16(fp)
   23bc8:	10800c17 	ldw	r2,48(r2)
   23bcc:	e0fffe17 	ldw	r3,-8(fp)
   23bd0:	1880042e 	bgeu	r3,r2,23be4 <alt_up_char_buffer_string+0x3c>
   23bd4:	e0bffc17 	ldw	r2,-16(fp)
   23bd8:	10800d17 	ldw	r2,52(r2)
   23bdc:	e0ffff17 	ldw	r3,-4(fp)
   23be0:	18800236 	bltu	r3,r2,23bec <alt_up_char_buffer_string+0x44>
		return -1;
   23be4:	00bfffc4 	movi	r2,-1
   23be8:	00002b06 	br	23c98 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   23bec:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   23bf0:	e0bffc17 	ldw	r2,-16(fp)
   23bf4:	10801017 	ldw	r2,64(r2)
   23bf8:	1007883a 	mov	r3,r2
   23bfc:	e0bfff17 	ldw	r2,-4(fp)
   23c00:	10c6983a 	sll	r3,r2,r3
   23c04:	e0bffe17 	ldw	r2,-8(fp)
   23c08:	1885883a 	add	r2,r3,r2
   23c0c:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   23c10:	00001a06 	br	23c7c <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   23c14:	e0bffc17 	ldw	r2,-16(fp)
   23c18:	10c00b17 	ldw	r3,44(r2)
   23c1c:	e0bffb17 	ldw	r2,-20(fp)
   23c20:	1885883a 	add	r2,r3,r2
   23c24:	1007883a 	mov	r3,r2
   23c28:	e0bffd17 	ldw	r2,-12(fp)
   23c2c:	10800003 	ldbu	r2,0(r2)
   23c30:	10803fcc 	andi	r2,r2,255
   23c34:	1080201c 	xori	r2,r2,128
   23c38:	10bfe004 	addi	r2,r2,-128
   23c3c:	18800025 	stbio	r2,0(r3)
		++ptr;
   23c40:	e0bffd17 	ldw	r2,-12(fp)
   23c44:	10800044 	addi	r2,r2,1
   23c48:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   23c4c:	e0bffe17 	ldw	r2,-8(fp)
   23c50:	10800044 	addi	r2,r2,1
   23c54:	e0bffe15 	stw	r2,-8(fp)
   23c58:	e0bffc17 	ldw	r2,-16(fp)
   23c5c:	10800c17 	ldw	r2,48(r2)
   23c60:	e0fffe17 	ldw	r3,-8(fp)
   23c64:	18800236 	bltu	r3,r2,23c70 <alt_up_char_buffer_string+0xc8>
			return -1;
   23c68:	00bfffc4 	movi	r2,-1
   23c6c:	00000a06 	br	23c98 <alt_up_char_buffer_string+0xf0>
		++offset;
   23c70:	e0bffb17 	ldw	r2,-20(fp)
   23c74:	10800044 	addi	r2,r2,1
   23c78:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   23c7c:	e0bffd17 	ldw	r2,-12(fp)
   23c80:	10800003 	ldbu	r2,0(r2)
   23c84:	10803fcc 	andi	r2,r2,255
   23c88:	1080201c 	xori	r2,r2,128
   23c8c:	10bfe004 	addi	r2,r2,-128
   23c90:	103fe01e 	bne	r2,zero,23c14 <__alt_mem_Flash_flash_data+0xf4023c14>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   23c94:	0005883a 	mov	r2,zero
}
   23c98:	e037883a 	mov	sp,fp
   23c9c:	df000017 	ldw	fp,0(sp)
   23ca0:	dec00104 	addi	sp,sp,4
   23ca4:	f800283a 	ret

00023ca8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   23ca8:	defffe04 	addi	sp,sp,-8
   23cac:	df000115 	stw	fp,4(sp)
   23cb0:	df000104 	addi	fp,sp,4
   23cb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   23cb8:	e0bfff17 	ldw	r2,-4(fp)
   23cbc:	10800a17 	ldw	r2,40(r2)
   23cc0:	10800084 	addi	r2,r2,2
   23cc4:	1007883a 	mov	r3,r2
   23cc8:	00800044 	movi	r2,1
   23ccc:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   23cd0:	0001883a 	nop
   23cd4:	e0bfff17 	ldw	r2,-4(fp)
   23cd8:	10800a17 	ldw	r2,40(r2)
   23cdc:	10800084 	addi	r2,r2,2
   23ce0:	10800023 	ldbuio	r2,0(r2)
   23ce4:	10803fcc 	andi	r2,r2,255
   23ce8:	1080004c 	andi	r2,r2,1
   23cec:	103ff91e 	bne	r2,zero,23cd4 <__alt_mem_Flash_flash_data+0xf4023cd4>
	return 0;
   23cf0:	0005883a 	mov	r2,zero
}
   23cf4:	e037883a 	mov	sp,fp
   23cf8:	df000017 	ldw	fp,0(sp)
   23cfc:	dec00104 	addi	sp,sp,4
   23d00:	f800283a 	ret

00023d04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   23d04:	defff504 	addi	sp,sp,-44
   23d08:	df000a15 	stw	fp,40(sp)
   23d0c:	df000a04 	addi	fp,sp,40
   23d10:	e13ffc15 	stw	r4,-16(fp)
   23d14:	e17ffd15 	stw	r5,-12(fp)
   23d18:	e1bffe15 	stw	r6,-8(fp)
   23d1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   23d20:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23d24:	008000f4 	movhi	r2,3
   23d28:	10a81a04 	addi	r2,r2,-24472
   23d2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   23d30:	10003f26 	beq	r2,zero,23e30 <alt_alarm_start+0x12c>
  {
    if (alarm)
   23d34:	e0bffc17 	ldw	r2,-16(fp)
   23d38:	10003b26 	beq	r2,zero,23e28 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   23d3c:	e0bffc17 	ldw	r2,-16(fp)
   23d40:	e0fffe17 	ldw	r3,-8(fp)
   23d44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   23d48:	e0bffc17 	ldw	r2,-16(fp)
   23d4c:	e0ffff17 	ldw	r3,-4(fp)
   23d50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23d54:	0005303a 	rdctl	r2,status
   23d58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23d5c:	e0fff817 	ldw	r3,-32(fp)
   23d60:	00bfff84 	movi	r2,-2
   23d64:	1884703a 	and	r2,r3,r2
   23d68:	1001703a 	wrctl	status,r2
  
  return context;
   23d6c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   23d70:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23d74:	008000f4 	movhi	r2,3
   23d78:	10a81b04 	addi	r2,r2,-24468
   23d7c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   23d80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   23d84:	e0fffd17 	ldw	r3,-12(fp)
   23d88:	e0bff617 	ldw	r2,-40(fp)
   23d8c:	1885883a 	add	r2,r3,r2
   23d90:	10c00044 	addi	r3,r2,1
   23d94:	e0bffc17 	ldw	r2,-16(fp)
   23d98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   23d9c:	e0bffc17 	ldw	r2,-16(fp)
   23da0:	10c00217 	ldw	r3,8(r2)
   23da4:	e0bff617 	ldw	r2,-40(fp)
   23da8:	1880042e 	bgeu	r3,r2,23dbc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   23dac:	e0bffc17 	ldw	r2,-16(fp)
   23db0:	00c00044 	movi	r3,1
   23db4:	10c00405 	stb	r3,16(r2)
   23db8:	00000206 	br	23dc4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   23dbc:	e0bffc17 	ldw	r2,-16(fp)
   23dc0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   23dc4:	e0fffc17 	ldw	r3,-16(fp)
   23dc8:	008000b4 	movhi	r2,2
   23dcc:	109ff504 	addi	r2,r2,32724
   23dd0:	e0bff915 	stw	r2,-28(fp)
   23dd4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23dd8:	e0bffa17 	ldw	r2,-24(fp)
   23ddc:	e0fff917 	ldw	r3,-28(fp)
   23de0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23de4:	e0bff917 	ldw	r2,-28(fp)
   23de8:	10c00017 	ldw	r3,0(r2)
   23dec:	e0bffa17 	ldw	r2,-24(fp)
   23df0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23df4:	e0bff917 	ldw	r2,-28(fp)
   23df8:	10800017 	ldw	r2,0(r2)
   23dfc:	e0fffa17 	ldw	r3,-24(fp)
   23e00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23e04:	e0bff917 	ldw	r2,-28(fp)
   23e08:	e0fffa17 	ldw	r3,-24(fp)
   23e0c:	10c00015 	stw	r3,0(r2)
   23e10:	e0bff717 	ldw	r2,-36(fp)
   23e14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23e18:	e0bffb17 	ldw	r2,-20(fp)
   23e1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   23e20:	0005883a 	mov	r2,zero
   23e24:	00000306 	br	23e34 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   23e28:	00bffa84 	movi	r2,-22
   23e2c:	00000106 	br	23e34 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   23e30:	00bfde84 	movi	r2,-134
  }
}
   23e34:	e037883a 	mov	sp,fp
   23e38:	df000017 	ldw	fp,0(sp)
   23e3c:	dec00104 	addi	sp,sp,4
   23e40:	f800283a 	ret

00023e44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23e44:	deffff04 	addi	sp,sp,-4
   23e48:	df000015 	stw	fp,0(sp)
   23e4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   23e50:	e037883a 	mov	sp,fp
   23e54:	df000017 	ldw	fp,0(sp)
   23e58:	dec00104 	addi	sp,sp,4
   23e5c:	f800283a 	ret

00023e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23e60:	defffe04 	addi	sp,sp,-8
   23e64:	dfc00115 	stw	ra,4(sp)
   23e68:	df000015 	stw	fp,0(sp)
   23e6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23e70:	008000b4 	movhi	r2,2
   23e74:	109fd304 	addi	r2,r2,32588
   23e78:	10800017 	ldw	r2,0(r2)
   23e7c:	10000526 	beq	r2,zero,23e94 <alt_get_errno+0x34>
   23e80:	008000b4 	movhi	r2,2
   23e84:	109fd304 	addi	r2,r2,32588
   23e88:	10800017 	ldw	r2,0(r2)
   23e8c:	103ee83a 	callr	r2
   23e90:	00000206 	br	23e9c <alt_get_errno+0x3c>
   23e94:	008000f4 	movhi	r2,3
   23e98:	10a7ef04 	addi	r2,r2,-24644
}
   23e9c:	e037883a 	mov	sp,fp
   23ea0:	dfc00117 	ldw	ra,4(sp)
   23ea4:	df000017 	ldw	fp,0(sp)
   23ea8:	dec00204 	addi	sp,sp,8
   23eac:	f800283a 	ret

00023eb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   23eb0:	defffa04 	addi	sp,sp,-24
   23eb4:	dfc00515 	stw	ra,20(sp)
   23eb8:	df000415 	stw	fp,16(sp)
   23ebc:	df000404 	addi	fp,sp,16
   23ec0:	e13ffe15 	stw	r4,-8(fp)
   23ec4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   23ec8:	e0bffe17 	ldw	r2,-8(fp)
   23ecc:	10000326 	beq	r2,zero,23edc <alt_dev_llist_insert+0x2c>
   23ed0:	e0bffe17 	ldw	r2,-8(fp)
   23ed4:	10800217 	ldw	r2,8(r2)
   23ed8:	1000061e 	bne	r2,zero,23ef4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   23edc:	0023e600 	call	23e60 <alt_get_errno>
   23ee0:	1007883a 	mov	r3,r2
   23ee4:	00800584 	movi	r2,22
   23ee8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   23eec:	00bffa84 	movi	r2,-22
   23ef0:	00001306 	br	23f40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   23ef4:	e0bffe17 	ldw	r2,-8(fp)
   23ef8:	e0ffff17 	ldw	r3,-4(fp)
   23efc:	e0fffc15 	stw	r3,-16(fp)
   23f00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   23f04:	e0bffd17 	ldw	r2,-12(fp)
   23f08:	e0fffc17 	ldw	r3,-16(fp)
   23f0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   23f10:	e0bffc17 	ldw	r2,-16(fp)
   23f14:	10c00017 	ldw	r3,0(r2)
   23f18:	e0bffd17 	ldw	r2,-12(fp)
   23f1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   23f20:	e0bffc17 	ldw	r2,-16(fp)
   23f24:	10800017 	ldw	r2,0(r2)
   23f28:	e0fffd17 	ldw	r3,-12(fp)
   23f2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   23f30:	e0bffc17 	ldw	r2,-16(fp)
   23f34:	e0fffd17 	ldw	r3,-12(fp)
   23f38:	10c00015 	stw	r3,0(r2)

  return 0;  
   23f3c:	0005883a 	mov	r2,zero
}
   23f40:	e037883a 	mov	sp,fp
   23f44:	dfc00117 	ldw	ra,4(sp)
   23f48:	df000017 	ldw	fp,0(sp)
   23f4c:	dec00204 	addi	sp,sp,8
   23f50:	f800283a 	ret

00023f54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   23f54:	defffd04 	addi	sp,sp,-12
   23f58:	dfc00215 	stw	ra,8(sp)
   23f5c:	df000115 	stw	fp,4(sp)
   23f60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23f64:	008000b4 	movhi	r2,2
   23f68:	10947e04 	addi	r2,r2,20984
   23f6c:	e0bfff15 	stw	r2,-4(fp)
   23f70:	00000606 	br	23f8c <_do_ctors+0x38>
        (*ctor) (); 
   23f74:	e0bfff17 	ldw	r2,-4(fp)
   23f78:	10800017 	ldw	r2,0(r2)
   23f7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   23f80:	e0bfff17 	ldw	r2,-4(fp)
   23f84:	10bfff04 	addi	r2,r2,-4
   23f88:	e0bfff15 	stw	r2,-4(fp)
   23f8c:	e0ffff17 	ldw	r3,-4(fp)
   23f90:	008000b4 	movhi	r2,2
   23f94:	10947f04 	addi	r2,r2,20988
   23f98:	18bff62e 	bgeu	r3,r2,23f74 <__alt_mem_Flash_flash_data+0xf4023f74>
        (*ctor) (); 
}
   23f9c:	e037883a 	mov	sp,fp
   23fa0:	dfc00117 	ldw	ra,4(sp)
   23fa4:	df000017 	ldw	fp,0(sp)
   23fa8:	dec00204 	addi	sp,sp,8
   23fac:	f800283a 	ret

00023fb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   23fb0:	defffd04 	addi	sp,sp,-12
   23fb4:	dfc00215 	stw	ra,8(sp)
   23fb8:	df000115 	stw	fp,4(sp)
   23fbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23fc0:	008000b4 	movhi	r2,2
   23fc4:	10947e04 	addi	r2,r2,20984
   23fc8:	e0bfff15 	stw	r2,-4(fp)
   23fcc:	00000606 	br	23fe8 <_do_dtors+0x38>
        (*dtor) (); 
   23fd0:	e0bfff17 	ldw	r2,-4(fp)
   23fd4:	10800017 	ldw	r2,0(r2)
   23fd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   23fdc:	e0bfff17 	ldw	r2,-4(fp)
   23fe0:	10bfff04 	addi	r2,r2,-4
   23fe4:	e0bfff15 	stw	r2,-4(fp)
   23fe8:	e0ffff17 	ldw	r3,-4(fp)
   23fec:	008000b4 	movhi	r2,2
   23ff0:	10947f04 	addi	r2,r2,20988
   23ff4:	18bff62e 	bgeu	r3,r2,23fd0 <__alt_mem_Flash_flash_data+0xf4023fd0>
        (*dtor) (); 
}
   23ff8:	e037883a 	mov	sp,fp
   23ffc:	dfc00117 	ldw	ra,4(sp)
   24000:	df000017 	ldw	fp,0(sp)
   24004:	dec00204 	addi	sp,sp,8
   24008:	f800283a 	ret

0002400c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2400c:	defffa04 	addi	sp,sp,-24
   24010:	dfc00515 	stw	ra,20(sp)
   24014:	df000415 	stw	fp,16(sp)
   24018:	df000404 	addi	fp,sp,16
   2401c:	e13ffe15 	stw	r4,-8(fp)
   24020:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24024:	e0bfff17 	ldw	r2,-4(fp)
   24028:	10800017 	ldw	r2,0(r2)
   2402c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24030:	e13ffe17 	ldw	r4,-8(fp)
   24034:	00047dc0 	call	47dc <strlen>
   24038:	10800044 	addi	r2,r2,1
   2403c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24040:	00000d06 	br	24078 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24044:	e0bffc17 	ldw	r2,-16(fp)
   24048:	10c00217 	ldw	r3,8(r2)
   2404c:	e0bffd17 	ldw	r2,-12(fp)
   24050:	1809883a 	mov	r4,r3
   24054:	e17ffe17 	ldw	r5,-8(fp)
   24058:	100d883a 	mov	r6,r2
   2405c:	0024e9c0 	call	24e9c <memcmp>
   24060:	1000021e 	bne	r2,zero,2406c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24064:	e0bffc17 	ldw	r2,-16(fp)
   24068:	00000706 	br	24088 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2406c:	e0bffc17 	ldw	r2,-16(fp)
   24070:	10800017 	ldw	r2,0(r2)
   24074:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24078:	e0fffc17 	ldw	r3,-16(fp)
   2407c:	e0bfff17 	ldw	r2,-4(fp)
   24080:	18bff01e 	bne	r3,r2,24044 <__alt_mem_Flash_flash_data+0xf4024044>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24084:	0005883a 	mov	r2,zero
}
   24088:	e037883a 	mov	sp,fp
   2408c:	dfc00117 	ldw	ra,4(sp)
   24090:	df000017 	ldw	fp,0(sp)
   24094:	dec00204 	addi	sp,sp,8
   24098:	f800283a 	ret

0002409c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2409c:	defffe04 	addi	sp,sp,-8
   240a0:	dfc00115 	stw	ra,4(sp)
   240a4:	df000015 	stw	fp,0(sp)
   240a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   240ac:	0009883a 	mov	r4,zero
   240b0:	01440004 	movi	r5,4096
   240b4:	0024d280 	call	24d28 <alt_icache_flush>
#endif
}
   240b8:	e037883a 	mov	sp,fp
   240bc:	dfc00117 	ldw	ra,4(sp)
   240c0:	df000017 	ldw	fp,0(sp)
   240c4:	dec00204 	addi	sp,sp,8
   240c8:	f800283a 	ret

000240cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   240cc:	defff904 	addi	sp,sp,-28
   240d0:	dfc00615 	stw	ra,24(sp)
   240d4:	df000515 	stw	fp,20(sp)
   240d8:	df000504 	addi	fp,sp,20
   240dc:	e13ffc15 	stw	r4,-16(fp)
   240e0:	e17ffd15 	stw	r5,-12(fp)
   240e4:	e1bffe15 	stw	r6,-8(fp)
   240e8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   240ec:	e13ffd17 	ldw	r4,-12(fp)
   240f0:	e17ffe17 	ldw	r5,-8(fp)
   240f4:	e1bfff17 	ldw	r6,-4(fp)
   240f8:	00244d00 	call	244d0 <open>
   240fc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   24100:	e0bffb17 	ldw	r2,-20(fp)
   24104:	10001c16 	blt	r2,zero,24178 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   24108:	008000b4 	movhi	r2,2
   2410c:	109a5e04 	addi	r2,r2,27000
   24110:	e0fffb17 	ldw	r3,-20(fp)
   24114:	18c00324 	muli	r3,r3,12
   24118:	10c5883a 	add	r2,r2,r3
   2411c:	10c00017 	ldw	r3,0(r2)
   24120:	e0bffc17 	ldw	r2,-16(fp)
   24124:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24128:	008000b4 	movhi	r2,2
   2412c:	109a5e04 	addi	r2,r2,27000
   24130:	e0fffb17 	ldw	r3,-20(fp)
   24134:	18c00324 	muli	r3,r3,12
   24138:	18c00104 	addi	r3,r3,4
   2413c:	10c5883a 	add	r2,r2,r3
   24140:	10c00017 	ldw	r3,0(r2)
   24144:	e0bffc17 	ldw	r2,-16(fp)
   24148:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2414c:	008000b4 	movhi	r2,2
   24150:	109a5e04 	addi	r2,r2,27000
   24154:	e0fffb17 	ldw	r3,-20(fp)
   24158:	18c00324 	muli	r3,r3,12
   2415c:	18c00204 	addi	r3,r3,8
   24160:	10c5883a 	add	r2,r2,r3
   24164:	10c00017 	ldw	r3,0(r2)
   24168:	e0bffc17 	ldw	r2,-16(fp)
   2416c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24170:	e13ffb17 	ldw	r4,-20(fp)
   24174:	00143bc0 	call	143bc <alt_release_fd>
  }
} 
   24178:	e037883a 	mov	sp,fp
   2417c:	dfc00117 	ldw	ra,4(sp)
   24180:	df000017 	ldw	fp,0(sp)
   24184:	dec00204 	addi	sp,sp,8
   24188:	f800283a 	ret

0002418c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2418c:	defffb04 	addi	sp,sp,-20
   24190:	dfc00415 	stw	ra,16(sp)
   24194:	df000315 	stw	fp,12(sp)
   24198:	df000304 	addi	fp,sp,12
   2419c:	e13ffd15 	stw	r4,-12(fp)
   241a0:	e17ffe15 	stw	r5,-8(fp)
   241a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   241a8:	010000b4 	movhi	r4,2
   241ac:	211a6104 	addi	r4,r4,27012
   241b0:	e17ffd17 	ldw	r5,-12(fp)
   241b4:	01800044 	movi	r6,1
   241b8:	01c07fc4 	movi	r7,511
   241bc:	00240cc0 	call	240cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   241c0:	010000b4 	movhi	r4,2
   241c4:	211a5e04 	addi	r4,r4,27000
   241c8:	e17ffe17 	ldw	r5,-8(fp)
   241cc:	000d883a 	mov	r6,zero
   241d0:	01c07fc4 	movi	r7,511
   241d4:	00240cc0 	call	240cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   241d8:	010000b4 	movhi	r4,2
   241dc:	211a6404 	addi	r4,r4,27024
   241e0:	e17fff17 	ldw	r5,-4(fp)
   241e4:	01800044 	movi	r6,1
   241e8:	01c07fc4 	movi	r7,511
   241ec:	00240cc0 	call	240cc <alt_open_fd>
}  
   241f0:	e037883a 	mov	sp,fp
   241f4:	dfc00117 	ldw	ra,4(sp)
   241f8:	df000017 	ldw	fp,0(sp)
   241fc:	dec00204 	addi	sp,sp,8
   24200:	f800283a 	ret

00024204 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   24204:	defff004 	addi	sp,sp,-64
   24208:	df000f15 	stw	fp,60(sp)
   2420c:	df000f04 	addi	fp,sp,60
   24210:	e13ffd15 	stw	r4,-12(fp)
   24214:	e17ffe15 	stw	r5,-8(fp)
   24218:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   2421c:	00bffa84 	movi	r2,-22
   24220:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24224:	e0bffd17 	ldw	r2,-12(fp)
   24228:	10800828 	cmpgeui	r2,r2,32
   2422c:	10005c1e 	bne	r2,zero,243a0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24230:	0005303a 	rdctl	r2,status
   24234:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24238:	e0fff317 	ldw	r3,-52(fp)
   2423c:	00bfff84 	movi	r2,-2
   24240:	1884703a 	and	r2,r3,r2
   24244:	1001703a 	wrctl	status,r2
  
  return context;
   24248:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   2424c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   24250:	00800174 	movhi	r2,5
   24254:	10be3e04 	addi	r2,r2,-1800
   24258:	e0fffd17 	ldw	r3,-12(fp)
   2425c:	180690fa 	slli	r3,r3,3
   24260:	10c5883a 	add	r2,r2,r3
   24264:	e0ffff17 	ldw	r3,-4(fp)
   24268:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   2426c:	00800174 	movhi	r2,5
   24270:	10be3e04 	addi	r2,r2,-1800
   24274:	e0fffd17 	ldw	r3,-12(fp)
   24278:	180690fa 	slli	r3,r3,3
   2427c:	18c00104 	addi	r3,r3,4
   24280:	10c5883a 	add	r2,r2,r3
   24284:	e0fffe17 	ldw	r3,-8(fp)
   24288:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   2428c:	e0bfff17 	ldw	r2,-4(fp)
   24290:	10001f26 	beq	r2,zero,24310 <alt_irq_register+0x10c>
   24294:	e0bffd17 	ldw	r2,-12(fp)
   24298:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2429c:	0005303a 	rdctl	r2,status
   242a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   242a4:	e0fff517 	ldw	r3,-44(fp)
   242a8:	00bfff84 	movi	r2,-2
   242ac:	1884703a 	and	r2,r3,r2
   242b0:	1001703a 	wrctl	status,r2
  
  return context;
   242b4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   242b8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   242bc:	e0bff417 	ldw	r2,-48(fp)
   242c0:	00c00044 	movi	r3,1
   242c4:	1884983a 	sll	r2,r3,r2
   242c8:	1007883a 	mov	r3,r2
   242cc:	008000f4 	movhi	r2,3
   242d0:	10a81904 	addi	r2,r2,-24476
   242d4:	10800017 	ldw	r2,0(r2)
   242d8:	1886b03a 	or	r3,r3,r2
   242dc:	008000f4 	movhi	r2,3
   242e0:	10a81904 	addi	r2,r2,-24476
   242e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   242e8:	008000f4 	movhi	r2,3
   242ec:	10a81904 	addi	r2,r2,-24476
   242f0:	10800017 	ldw	r2,0(r2)
   242f4:	100170fa 	wrctl	ienable,r2
   242f8:	e0bff617 	ldw	r2,-40(fp)
   242fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24300:	e0bff717 	ldw	r2,-36(fp)
   24304:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24308:	0005883a 	mov	r2,zero
   2430c:	00001f06 	br	2438c <alt_irq_register+0x188>
   24310:	e0bffd17 	ldw	r2,-12(fp)
   24314:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24318:	0005303a 	rdctl	r2,status
   2431c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24320:	e0fff917 	ldw	r3,-28(fp)
   24324:	00bfff84 	movi	r2,-2
   24328:	1884703a 	and	r2,r3,r2
   2432c:	1001703a 	wrctl	status,r2
  
  return context;
   24330:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24334:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   24338:	e0bff817 	ldw	r2,-32(fp)
   2433c:	00c00044 	movi	r3,1
   24340:	1884983a 	sll	r2,r3,r2
   24344:	0084303a 	nor	r2,zero,r2
   24348:	1007883a 	mov	r3,r2
   2434c:	008000f4 	movhi	r2,3
   24350:	10a81904 	addi	r2,r2,-24476
   24354:	10800017 	ldw	r2,0(r2)
   24358:	1886703a 	and	r3,r3,r2
   2435c:	008000f4 	movhi	r2,3
   24360:	10a81904 	addi	r2,r2,-24476
   24364:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24368:	008000f4 	movhi	r2,3
   2436c:	10a81904 	addi	r2,r2,-24476
   24370:	10800017 	ldw	r2,0(r2)
   24374:	100170fa 	wrctl	ienable,r2
   24378:	e0bffa17 	ldw	r2,-24(fp)
   2437c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24380:	e0bffb17 	ldw	r2,-20(fp)
   24384:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24388:	0005883a 	mov	r2,zero
   2438c:	e0bff115 	stw	r2,-60(fp)
   24390:	e0bff217 	ldw	r2,-56(fp)
   24394:	e0bffc15 	stw	r2,-16(fp)
   24398:	e0bffc17 	ldw	r2,-16(fp)
   2439c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   243a0:	e0bff117 	ldw	r2,-60(fp)
}
   243a4:	e037883a 	mov	sp,fp
   243a8:	df000017 	ldw	fp,0(sp)
   243ac:	dec00104 	addi	sp,sp,4
   243b0:	f800283a 	ret

000243b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   243b4:	defffe04 	addi	sp,sp,-8
   243b8:	dfc00115 	stw	ra,4(sp)
   243bc:	df000015 	stw	fp,0(sp)
   243c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243c4:	008000b4 	movhi	r2,2
   243c8:	109fd304 	addi	r2,r2,32588
   243cc:	10800017 	ldw	r2,0(r2)
   243d0:	10000526 	beq	r2,zero,243e8 <alt_get_errno+0x34>
   243d4:	008000b4 	movhi	r2,2
   243d8:	109fd304 	addi	r2,r2,32588
   243dc:	10800017 	ldw	r2,0(r2)
   243e0:	103ee83a 	callr	r2
   243e4:	00000206 	br	243f0 <alt_get_errno+0x3c>
   243e8:	008000f4 	movhi	r2,3
   243ec:	10a7ef04 	addi	r2,r2,-24644
}
   243f0:	e037883a 	mov	sp,fp
   243f4:	dfc00117 	ldw	ra,4(sp)
   243f8:	df000017 	ldw	fp,0(sp)
   243fc:	dec00204 	addi	sp,sp,8
   24400:	f800283a 	ret

00024404 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24404:	defffd04 	addi	sp,sp,-12
   24408:	df000215 	stw	fp,8(sp)
   2440c:	df000204 	addi	fp,sp,8
   24410:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24414:	e0bfff17 	ldw	r2,-4(fp)
   24418:	10800217 	ldw	r2,8(r2)
   2441c:	10d00034 	orhi	r3,r2,16384
   24420:	e0bfff17 	ldw	r2,-4(fp)
   24424:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24428:	e03ffe15 	stw	zero,-8(fp)
   2442c:	00001d06 	br	244a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24430:	008000b4 	movhi	r2,2
   24434:	109a5e04 	addi	r2,r2,27000
   24438:	e0fffe17 	ldw	r3,-8(fp)
   2443c:	18c00324 	muli	r3,r3,12
   24440:	10c5883a 	add	r2,r2,r3
   24444:	10c00017 	ldw	r3,0(r2)
   24448:	e0bfff17 	ldw	r2,-4(fp)
   2444c:	10800017 	ldw	r2,0(r2)
   24450:	1880111e 	bne	r3,r2,24498 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24454:	008000b4 	movhi	r2,2
   24458:	109a5e04 	addi	r2,r2,27000
   2445c:	e0fffe17 	ldw	r3,-8(fp)
   24460:	18c00324 	muli	r3,r3,12
   24464:	18c00204 	addi	r3,r3,8
   24468:	10c5883a 	add	r2,r2,r3
   2446c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24470:	1000090e 	bge	r2,zero,24498 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24474:	e0bffe17 	ldw	r2,-8(fp)
   24478:	10c00324 	muli	r3,r2,12
   2447c:	008000b4 	movhi	r2,2
   24480:	109a5e04 	addi	r2,r2,27000
   24484:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24488:	e0bfff17 	ldw	r2,-4(fp)
   2448c:	18800226 	beq	r3,r2,24498 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24490:	00bffcc4 	movi	r2,-13
   24494:	00000a06 	br	244c0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24498:	e0bffe17 	ldw	r2,-8(fp)
   2449c:	10800044 	addi	r2,r2,1
   244a0:	e0bffe15 	stw	r2,-8(fp)
   244a4:	008000b4 	movhi	r2,2
   244a8:	109fd204 	addi	r2,r2,32584
   244ac:	10800017 	ldw	r2,0(r2)
   244b0:	1007883a 	mov	r3,r2
   244b4:	e0bffe17 	ldw	r2,-8(fp)
   244b8:	18bfdd2e 	bgeu	r3,r2,24430 <__alt_mem_Flash_flash_data+0xf4024430>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   244bc:	0005883a 	mov	r2,zero
}
   244c0:	e037883a 	mov	sp,fp
   244c4:	df000017 	ldw	fp,0(sp)
   244c8:	dec00104 	addi	sp,sp,4
   244cc:	f800283a 	ret

000244d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   244d0:	defff604 	addi	sp,sp,-40
   244d4:	dfc00915 	stw	ra,36(sp)
   244d8:	df000815 	stw	fp,32(sp)
   244dc:	df000804 	addi	fp,sp,32
   244e0:	e13ffd15 	stw	r4,-12(fp)
   244e4:	e17ffe15 	stw	r5,-8(fp)
   244e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   244ec:	00bfffc4 	movi	r2,-1
   244f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   244f4:	00bffb44 	movi	r2,-19
   244f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   244fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24500:	e13ffd17 	ldw	r4,-12(fp)
   24504:	014000b4 	movhi	r5,2
   24508:	295fd004 	addi	r5,r5,32576
   2450c:	002400c0 	call	2400c <alt_find_dev>
   24510:	e0bff815 	stw	r2,-32(fp)
   24514:	e0bff817 	ldw	r2,-32(fp)
   24518:	1000051e 	bne	r2,zero,24530 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2451c:	e13ffd17 	ldw	r4,-12(fp)
   24520:	0024b180 	call	24b18 <alt_find_file>
   24524:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24528:	00800044 	movi	r2,1
   2452c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24530:	e0bff817 	ldw	r2,-32(fp)
   24534:	10002926 	beq	r2,zero,245dc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24538:	e13ff817 	ldw	r4,-32(fp)
   2453c:	0024c2c0 	call	24c2c <alt_get_fd>
   24540:	e0bff915 	stw	r2,-28(fp)
   24544:	e0bff917 	ldw	r2,-28(fp)
   24548:	1000030e 	bge	r2,zero,24558 <open+0x88>
    {
      status = index;
   2454c:	e0bff917 	ldw	r2,-28(fp)
   24550:	e0bffa15 	stw	r2,-24(fp)
   24554:	00002306 	br	245e4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   24558:	e0bff917 	ldw	r2,-28(fp)
   2455c:	10c00324 	muli	r3,r2,12
   24560:	008000b4 	movhi	r2,2
   24564:	109a5e04 	addi	r2,r2,27000
   24568:	1885883a 	add	r2,r3,r2
   2456c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24570:	e0fffe17 	ldw	r3,-8(fp)
   24574:	00900034 	movhi	r2,16384
   24578:	10bfffc4 	addi	r2,r2,-1
   2457c:	1886703a 	and	r3,r3,r2
   24580:	e0bffc17 	ldw	r2,-16(fp)
   24584:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24588:	e0bffb17 	ldw	r2,-20(fp)
   2458c:	1000051e 	bne	r2,zero,245a4 <open+0xd4>
   24590:	e13ffc17 	ldw	r4,-16(fp)
   24594:	00244040 	call	24404 <alt_file_locked>
   24598:	e0bffa15 	stw	r2,-24(fp)
   2459c:	e0bffa17 	ldw	r2,-24(fp)
   245a0:	10001016 	blt	r2,zero,245e4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   245a4:	e0bff817 	ldw	r2,-32(fp)
   245a8:	10800317 	ldw	r2,12(r2)
   245ac:	10000826 	beq	r2,zero,245d0 <open+0x100>
   245b0:	e0bff817 	ldw	r2,-32(fp)
   245b4:	10800317 	ldw	r2,12(r2)
   245b8:	e13ffc17 	ldw	r4,-16(fp)
   245bc:	e17ffd17 	ldw	r5,-12(fp)
   245c0:	e1bffe17 	ldw	r6,-8(fp)
   245c4:	e1ffff17 	ldw	r7,-4(fp)
   245c8:	103ee83a 	callr	r2
   245cc:	00000106 	br	245d4 <open+0x104>
   245d0:	0005883a 	mov	r2,zero
   245d4:	e0bffa15 	stw	r2,-24(fp)
   245d8:	00000206 	br	245e4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   245dc:	00bffb44 	movi	r2,-19
   245e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   245e4:	e0bffa17 	ldw	r2,-24(fp)
   245e8:	1000090e 	bge	r2,zero,24610 <open+0x140>
  {
    alt_release_fd (index);  
   245ec:	e13ff917 	ldw	r4,-28(fp)
   245f0:	00143bc0 	call	143bc <alt_release_fd>
    ALT_ERRNO = -status;
   245f4:	00243b40 	call	243b4 <alt_get_errno>
   245f8:	1007883a 	mov	r3,r2
   245fc:	e0bffa17 	ldw	r2,-24(fp)
   24600:	0085c83a 	sub	r2,zero,r2
   24604:	18800015 	stw	r2,0(r3)
    return -1;
   24608:	00bfffc4 	movi	r2,-1
   2460c:	00000106 	br	24614 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   24610:	e0bff917 	ldw	r2,-28(fp)
}
   24614:	e037883a 	mov	sp,fp
   24618:	dfc00117 	ldw	ra,4(sp)
   2461c:	df000017 	ldw	fp,0(sp)
   24620:	dec00204 	addi	sp,sp,8
   24624:	f800283a 	ret

00024628 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24628:	defffa04 	addi	sp,sp,-24
   2462c:	df000515 	stw	fp,20(sp)
   24630:	df000504 	addi	fp,sp,20
   24634:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24638:	0005303a 	rdctl	r2,status
   2463c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24640:	e0fffc17 	ldw	r3,-16(fp)
   24644:	00bfff84 	movi	r2,-2
   24648:	1884703a 	and	r2,r3,r2
   2464c:	1001703a 	wrctl	status,r2
  
  return context;
   24650:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24654:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24658:	e0bfff17 	ldw	r2,-4(fp)
   2465c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24660:	e0bffd17 	ldw	r2,-12(fp)
   24664:	10800017 	ldw	r2,0(r2)
   24668:	e0fffd17 	ldw	r3,-12(fp)
   2466c:	18c00117 	ldw	r3,4(r3)
   24670:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24674:	e0bffd17 	ldw	r2,-12(fp)
   24678:	10800117 	ldw	r2,4(r2)
   2467c:	e0fffd17 	ldw	r3,-12(fp)
   24680:	18c00017 	ldw	r3,0(r3)
   24684:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24688:	e0bffd17 	ldw	r2,-12(fp)
   2468c:	e0fffd17 	ldw	r3,-12(fp)
   24690:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24694:	e0bffd17 	ldw	r2,-12(fp)
   24698:	e0fffd17 	ldw	r3,-12(fp)
   2469c:	10c00015 	stw	r3,0(r2)
   246a0:	e0bffb17 	ldw	r2,-20(fp)
   246a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246a8:	e0bffe17 	ldw	r2,-8(fp)
   246ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   246b0:	e037883a 	mov	sp,fp
   246b4:	df000017 	ldw	fp,0(sp)
   246b8:	dec00104 	addi	sp,sp,4
   246bc:	f800283a 	ret

000246c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   246c0:	defffb04 	addi	sp,sp,-20
   246c4:	dfc00415 	stw	ra,16(sp)
   246c8:	df000315 	stw	fp,12(sp)
   246cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   246d0:	d0a03b17 	ldw	r2,-32532(gp)
   246d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   246d8:	d0a86117 	ldw	r2,-24188(gp)
   246dc:	10800044 	addi	r2,r2,1
   246e0:	d0a86115 	stw	r2,-24188(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   246e4:	00002e06 	br	247a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   246e8:	e0bffd17 	ldw	r2,-12(fp)
   246ec:	10800017 	ldw	r2,0(r2)
   246f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   246f4:	e0bffd17 	ldw	r2,-12(fp)
   246f8:	10800403 	ldbu	r2,16(r2)
   246fc:	10803fcc 	andi	r2,r2,255
   24700:	10000426 	beq	r2,zero,24714 <alt_tick+0x54>
   24704:	d0a86117 	ldw	r2,-24188(gp)
   24708:	1000021e 	bne	r2,zero,24714 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2470c:	e0bffd17 	ldw	r2,-12(fp)
   24710:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24714:	e0bffd17 	ldw	r2,-12(fp)
   24718:	10800217 	ldw	r2,8(r2)
   2471c:	d0e86117 	ldw	r3,-24188(gp)
   24720:	18801d36 	bltu	r3,r2,24798 <alt_tick+0xd8>
   24724:	e0bffd17 	ldw	r2,-12(fp)
   24728:	10800403 	ldbu	r2,16(r2)
   2472c:	10803fcc 	andi	r2,r2,255
   24730:	1000191e 	bne	r2,zero,24798 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24734:	e0bffd17 	ldw	r2,-12(fp)
   24738:	10800317 	ldw	r2,12(r2)
   2473c:	e0fffd17 	ldw	r3,-12(fp)
   24740:	18c00517 	ldw	r3,20(r3)
   24744:	1809883a 	mov	r4,r3
   24748:	103ee83a 	callr	r2
   2474c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24750:	e0bfff17 	ldw	r2,-4(fp)
   24754:	1000031e 	bne	r2,zero,24764 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24758:	e13ffd17 	ldw	r4,-12(fp)
   2475c:	00246280 	call	24628 <alt_alarm_stop>
   24760:	00000d06 	br	24798 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24764:	e0bffd17 	ldw	r2,-12(fp)
   24768:	10c00217 	ldw	r3,8(r2)
   2476c:	e0bfff17 	ldw	r2,-4(fp)
   24770:	1887883a 	add	r3,r3,r2
   24774:	e0bffd17 	ldw	r2,-12(fp)
   24778:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2477c:	e0bffd17 	ldw	r2,-12(fp)
   24780:	10c00217 	ldw	r3,8(r2)
   24784:	d0a86117 	ldw	r2,-24188(gp)
   24788:	1880032e 	bgeu	r3,r2,24798 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2478c:	e0bffd17 	ldw	r2,-12(fp)
   24790:	00c00044 	movi	r3,1
   24794:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24798:	e0bffe17 	ldw	r2,-8(fp)
   2479c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   247a0:	e0fffd17 	ldw	r3,-12(fp)
   247a4:	d0a03b04 	addi	r2,gp,-32532
   247a8:	18bfcf1e 	bne	r3,r2,246e8 <__alt_mem_Flash_flash_data+0xf40246e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   247ac:	00155c80 	call	155c8 <OSTimeTick>
}
   247b0:	e037883a 	mov	sp,fp
   247b4:	dfc00117 	ldw	ra,4(sp)
   247b8:	df000017 	ldw	fp,0(sp)
   247bc:	dec00204 	addi	sp,sp,8
   247c0:	f800283a 	ret

000247c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   247c4:	deffff04 	addi	sp,sp,-4
   247c8:	df000015 	stw	fp,0(sp)
   247cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   247d0:	000170fa 	wrctl	ienable,zero
}
   247d4:	e037883a 	mov	sp,fp
   247d8:	df000017 	ldw	fp,0(sp)
   247dc:	dec00104 	addi	sp,sp,4
   247e0:	f800283a 	ret

000247e4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   247e4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   247e8:	d0e00f17 	ldw	r3,-32708(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   247ec:	d1284d17 	ldw	r4,-24268(gp)

      stw ra,  0(sp)
   247f0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   247f4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   247f8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   247fc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   24800:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   24804:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   24808:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   2480c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   24810:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   24814:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   24818:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   2481c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   24820:	0024a500 	call	24a50 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   24824:	d1284817 	ldw	r4,-24288(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   24828:	d1684007 	ldb	r5,-24320(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   2482c:	d1284d15 	stw	r4,-24268(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   24830:	d1684045 	stb	r5,-24319(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   24834:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   24838:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   2483c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   24840:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   24844:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   24848:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   2484c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   24850:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   24854:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   24858:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   2485c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   24860:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   24864:	d0e00f15 	stw	r3,-32708(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   24868:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   2486c:	f800283a 	ret

00024870 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   24870:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   24874:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   24878:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   2487c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   24880:	0024a500 	call	24a50 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   24884:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   24888:	d4a83e45 	stb	r18,-24327(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   2488c:	003fe506 	br	24824 <__alt_mem_Flash_flash_data+0xf4024824>

00024890 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   24890:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   24894:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   24898:	10800054 	ori	r2,r2,1
      wrctl status, r2
   2489c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   248a0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   248a4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   248a8:	dec00204 	addi	sp,sp,8

      callr r2
   248ac:	103ee83a 	callr	r2

      nop
   248b0:	0001883a 	nop

000248b4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   248b4:	defff704 	addi	sp,sp,-36
   248b8:	dfc00815 	stw	ra,32(sp)
   248bc:	df000715 	stw	fp,28(sp)
   248c0:	df000704 	addi	fp,sp,28
   248c4:	e13ffc15 	stw	r4,-16(fp)
   248c8:	e17ffd15 	stw	r5,-12(fp)
   248cc:	e1bffe15 	stw	r6,-8(fp)
   248d0:	3805883a 	mov	r2,r7
   248d4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   248d8:	e0fffe17 	ldw	r3,-8(fp)
   248dc:	00bfff04 	movi	r2,-4
   248e0:	1884703a 	and	r2,r3,r2
   248e4:	10bef704 	addi	r2,r2,-1060
   248e8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   248ec:	e13ff917 	ldw	r4,-28(fp)
   248f0:	000b883a 	mov	r5,zero
   248f4:	01810904 	movi	r6,1060
   248f8:	00043980 	call	4398 <memset>
   248fc:	e0bff917 	ldw	r2,-28(fp)
   24900:	10c0bb04 	addi	r3,r2,748
   24904:	e0bff917 	ldw	r2,-28(fp)
   24908:	10c00115 	stw	r3,4(r2)
   2490c:	e0bff917 	ldw	r2,-28(fp)
   24910:	10c0d504 	addi	r3,r2,852
   24914:	e0bff917 	ldw	r2,-28(fp)
   24918:	10c00215 	stw	r3,8(r2)
   2491c:	e0bff917 	ldw	r2,-28(fp)
   24920:	10c0ef04 	addi	r3,r2,956
   24924:	e0bff917 	ldw	r2,-28(fp)
   24928:	10c00315 	stw	r3,12(r2)
   2492c:	e0fff917 	ldw	r3,-28(fp)
   24930:	008000b4 	movhi	r2,2
   24934:	10982a04 	addi	r2,r2,24744
   24938:	18800d15 	stw	r2,52(r3)
   2493c:	e0bff917 	ldw	r2,-28(fp)
   24940:	00c00044 	movi	r3,1
   24944:	10c02915 	stw	r3,164(r2)
   24948:	10002a15 	stw	zero,168(r2)
   2494c:	e0bff917 	ldw	r2,-28(fp)
   24950:	00ccc384 	movi	r3,13070
   24954:	10c02b0d 	sth	r3,172(r2)
   24958:	e0bff917 	ldw	r2,-28(fp)
   2495c:	00eaf344 	movi	r3,-21555
   24960:	10c02b8d 	sth	r3,174(r2)
   24964:	e0bff917 	ldw	r2,-28(fp)
   24968:	00c48d04 	movi	r3,4660
   2496c:	10c02c0d 	sth	r3,176(r2)
   24970:	e0bff917 	ldw	r2,-28(fp)
   24974:	00f99b44 	movi	r3,-6547
   24978:	10c02c8d 	sth	r3,178(r2)
   2497c:	e0bff917 	ldw	r2,-28(fp)
   24980:	00f7bb04 	movi	r3,-8468
   24984:	10c02d0d 	sth	r3,180(r2)
   24988:	e0bff917 	ldw	r2,-28(fp)
   2498c:	00c00144 	movi	r3,5
   24990:	10c02d8d 	sth	r3,182(r2)
   24994:	e0bff917 	ldw	r2,-28(fp)
   24998:	00c002c4 	movi	r3,11
   2499c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   249a0:	e0bff917 	ldw	r2,-28(fp)
   249a4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   249a8:	e0bffa17 	ldw	r2,-24(fp)
   249ac:	10bff304 	addi	r2,r2,-52
   249b0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   249b4:	e0bffb17 	ldw	r2,-20(fp)
   249b8:	10800c04 	addi	r2,r2,48
   249bc:	e0fffc17 	ldw	r3,-16(fp)
   249c0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   249c4:	e0bffb17 	ldw	r2,-20(fp)
   249c8:	10800b04 	addi	r2,r2,44
   249cc:	e0fffd17 	ldw	r3,-12(fp)
   249d0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   249d4:	e0bffb17 	ldw	r2,-20(fp)
   249d8:	10800a04 	addi	r2,r2,40
   249dc:	e0fff917 	ldw	r3,-28(fp)
   249e0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   249e4:	008000b4 	movhi	r2,2
   249e8:	10922404 	addi	r2,r2,18576
   249ec:	10c00104 	addi	r3,r2,4
   249f0:	e0bffb17 	ldw	r2,-20(fp)
   249f4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   249f8:	e0bffb17 	ldw	r2,-20(fp)
}
   249fc:	e037883a 	mov	sp,fp
   24a00:	dfc00117 	ldw	ra,4(sp)
   24a04:	df000017 	ldw	fp,0(sp)
   24a08:	dec00204 	addi	sp,sp,8
   24a0c:	f800283a 	ret

00024a10 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   24a10:	defffe04 	addi	sp,sp,-8
   24a14:	df000115 	stw	fp,4(sp)
   24a18:	df000104 	addi	fp,sp,4
   24a1c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   24a20:	e037883a 	mov	sp,fp
   24a24:	df000017 	ldw	fp,0(sp)
   24a28:	dec00104 	addi	sp,sp,4
   24a2c:	f800283a 	ret

00024a30 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   24a30:	defffe04 	addi	sp,sp,-8
   24a34:	df000115 	stw	fp,4(sp)
   24a38:	df000104 	addi	fp,sp,4
   24a3c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   24a40:	e037883a 	mov	sp,fp
   24a44:	df000017 	ldw	fp,0(sp)
   24a48:	dec00104 	addi	sp,sp,4
   24a4c:	f800283a 	ret

00024a50 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   24a50:	deffff04 	addi	sp,sp,-4
   24a54:	df000015 	stw	fp,0(sp)
   24a58:	d839883a 	mov	fp,sp
}
   24a5c:	e037883a 	mov	sp,fp
   24a60:	df000017 	ldw	fp,0(sp)
   24a64:	dec00104 	addi	sp,sp,4
   24a68:	f800283a 	ret

00024a6c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   24a6c:	deffff04 	addi	sp,sp,-4
   24a70:	df000015 	stw	fp,0(sp)
   24a74:	d839883a 	mov	fp,sp
}
   24a78:	e037883a 	mov	sp,fp
   24a7c:	df000017 	ldw	fp,0(sp)
   24a80:	dec00104 	addi	sp,sp,4
   24a84:	f800283a 	ret

00024a88 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   24a88:	deffff04 	addi	sp,sp,-4
   24a8c:	df000015 	stw	fp,0(sp)
   24a90:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   24a94:	e037883a 	mov	sp,fp
   24a98:	df000017 	ldw	fp,0(sp)
   24a9c:	dec00104 	addi	sp,sp,4
   24aa0:	f800283a 	ret

00024aa4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   24aa4:	deffff04 	addi	sp,sp,-4
   24aa8:	df000015 	stw	fp,0(sp)
   24aac:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   24ab0:	e037883a 	mov	sp,fp
   24ab4:	df000017 	ldw	fp,0(sp)
   24ab8:	dec00104 	addi	sp,sp,4
   24abc:	f800283a 	ret

00024ac0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   24ac0:	deffff04 	addi	sp,sp,-4
   24ac4:	df000015 	stw	fp,0(sp)
   24ac8:	d839883a 	mov	fp,sp
}
   24acc:	e037883a 	mov	sp,fp
   24ad0:	df000017 	ldw	fp,0(sp)
   24ad4:	dec00104 	addi	sp,sp,4
   24ad8:	f800283a 	ret

00024adc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   24adc:	deffff04 	addi	sp,sp,-4
   24ae0:	df000015 	stw	fp,0(sp)
   24ae4:	d839883a 	mov	fp,sp
}
   24ae8:	e037883a 	mov	sp,fp
   24aec:	df000017 	ldw	fp,0(sp)
   24af0:	dec00104 	addi	sp,sp,4
   24af4:	f800283a 	ret

00024af8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   24af8:	defffe04 	addi	sp,sp,-8
   24afc:	df000115 	stw	fp,4(sp)
   24b00:	df000104 	addi	fp,sp,4
   24b04:	e13fff15 	stw	r4,-4(fp)
}
   24b08:	e037883a 	mov	sp,fp
   24b0c:	df000017 	ldw	fp,0(sp)
   24b10:	dec00104 	addi	sp,sp,4
   24b14:	f800283a 	ret

00024b18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24b18:	defffb04 	addi	sp,sp,-20
   24b1c:	dfc00415 	stw	ra,16(sp)
   24b20:	df000315 	stw	fp,12(sp)
   24b24:	df000304 	addi	fp,sp,12
   24b28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24b2c:	008000b4 	movhi	r2,2
   24b30:	109fce04 	addi	r2,r2,32568
   24b34:	10800017 	ldw	r2,0(r2)
   24b38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24b3c:	00003106 	br	24c04 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   24b40:	e0bffd17 	ldw	r2,-12(fp)
   24b44:	10800217 	ldw	r2,8(r2)
   24b48:	1009883a 	mov	r4,r2
   24b4c:	00047dc0 	call	47dc <strlen>
   24b50:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24b54:	e0bffd17 	ldw	r2,-12(fp)
   24b58:	10c00217 	ldw	r3,8(r2)
   24b5c:	e0bffe17 	ldw	r2,-8(fp)
   24b60:	10bfffc4 	addi	r2,r2,-1
   24b64:	1885883a 	add	r2,r3,r2
   24b68:	10800003 	ldbu	r2,0(r2)
   24b6c:	10803fcc 	andi	r2,r2,255
   24b70:	1080201c 	xori	r2,r2,128
   24b74:	10bfe004 	addi	r2,r2,-128
   24b78:	10800bd8 	cmpnei	r2,r2,47
   24b7c:	1000031e 	bne	r2,zero,24b8c <alt_find_file+0x74>
    {
      len -= 1;
   24b80:	e0bffe17 	ldw	r2,-8(fp)
   24b84:	10bfffc4 	addi	r2,r2,-1
   24b88:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24b8c:	e0bffe17 	ldw	r2,-8(fp)
   24b90:	e0ffff17 	ldw	r3,-4(fp)
   24b94:	1885883a 	add	r2,r3,r2
   24b98:	10800003 	ldbu	r2,0(r2)
   24b9c:	10803fcc 	andi	r2,r2,255
   24ba0:	1080201c 	xori	r2,r2,128
   24ba4:	10bfe004 	addi	r2,r2,-128
   24ba8:	10800be0 	cmpeqi	r2,r2,47
   24bac:	1000081e 	bne	r2,zero,24bd0 <alt_find_file+0xb8>
   24bb0:	e0bffe17 	ldw	r2,-8(fp)
   24bb4:	e0ffff17 	ldw	r3,-4(fp)
   24bb8:	1885883a 	add	r2,r3,r2
   24bbc:	10800003 	ldbu	r2,0(r2)
   24bc0:	10803fcc 	andi	r2,r2,255
   24bc4:	1080201c 	xori	r2,r2,128
   24bc8:	10bfe004 	addi	r2,r2,-128
   24bcc:	10000a1e 	bne	r2,zero,24bf8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   24bd0:	e0bffd17 	ldw	r2,-12(fp)
   24bd4:	10c00217 	ldw	r3,8(r2)
   24bd8:	e0bffe17 	ldw	r2,-8(fp)
   24bdc:	1809883a 	mov	r4,r3
   24be0:	e17fff17 	ldw	r5,-4(fp)
   24be4:	100d883a 	mov	r6,r2
   24be8:	0024e9c0 	call	24e9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24bec:	1000021e 	bne	r2,zero,24bf8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24bf0:	e0bffd17 	ldw	r2,-12(fp)
   24bf4:	00000806 	br	24c18 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   24bf8:	e0bffd17 	ldw	r2,-12(fp)
   24bfc:	10800017 	ldw	r2,0(r2)
   24c00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24c04:	e0fffd17 	ldw	r3,-12(fp)
   24c08:	008000b4 	movhi	r2,2
   24c0c:	109fce04 	addi	r2,r2,32568
   24c10:	18bfcb1e 	bne	r3,r2,24b40 <__alt_mem_Flash_flash_data+0xf4024b40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24c14:	0005883a 	mov	r2,zero
}
   24c18:	e037883a 	mov	sp,fp
   24c1c:	dfc00117 	ldw	ra,4(sp)
   24c20:	df000017 	ldw	fp,0(sp)
   24c24:	dec00204 	addi	sp,sp,8
   24c28:	f800283a 	ret

00024c2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24c2c:	defff904 	addi	sp,sp,-28
   24c30:	dfc00615 	stw	ra,24(sp)
   24c34:	df000515 	stw	fp,20(sp)
   24c38:	df000504 	addi	fp,sp,20
   24c3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24c40:	00bffa04 	movi	r2,-24
   24c44:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   24c48:	008000f4 	movhi	r2,3
   24c4c:	10a7f004 	addi	r2,r2,-24640
   24c50:	10800017 	ldw	r2,0(r2)
   24c54:	e0bffd15 	stw	r2,-12(fp)
   24c58:	e03ffe0d 	sth	zero,-8(fp)
   24c5c:	e0fffe0b 	ldhu	r3,-8(fp)
   24c60:	e0bffe84 	addi	r2,fp,-6
   24c64:	e13ffd17 	ldw	r4,-12(fp)
   24c68:	180b883a 	mov	r5,r3
   24c6c:	100d883a 	mov	r6,r2
   24c70:	001abec0 	call	1abec <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24c74:	e03ffb15 	stw	zero,-20(fp)
   24c78:	00001d06 	br	24cf0 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   24c7c:	008000b4 	movhi	r2,2
   24c80:	109a5e04 	addi	r2,r2,27000
   24c84:	e0fffb17 	ldw	r3,-20(fp)
   24c88:	18c00324 	muli	r3,r3,12
   24c8c:	10c5883a 	add	r2,r2,r3
   24c90:	10800017 	ldw	r2,0(r2)
   24c94:	1000131e 	bne	r2,zero,24ce4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   24c98:	008000b4 	movhi	r2,2
   24c9c:	109a5e04 	addi	r2,r2,27000
   24ca0:	e0fffb17 	ldw	r3,-20(fp)
   24ca4:	18c00324 	muli	r3,r3,12
   24ca8:	10c5883a 	add	r2,r2,r3
   24cac:	e0ffff17 	ldw	r3,-4(fp)
   24cb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24cb4:	008000b4 	movhi	r2,2
   24cb8:	109fd204 	addi	r2,r2,32584
   24cbc:	10c00017 	ldw	r3,0(r2)
   24cc0:	e0bffb17 	ldw	r2,-20(fp)
   24cc4:	1880040e 	bge	r3,r2,24cd8 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   24cc8:	008000b4 	movhi	r2,2
   24ccc:	109fd204 	addi	r2,r2,32584
   24cd0:	e0fffb17 	ldw	r3,-20(fp)
   24cd4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   24cd8:	e0bffb17 	ldw	r2,-20(fp)
   24cdc:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   24ce0:	00000606 	br	24cfc <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24ce4:	e0bffb17 	ldw	r2,-20(fp)
   24ce8:	10800044 	addi	r2,r2,1
   24cec:	e0bffb15 	stw	r2,-20(fp)
   24cf0:	e0bffb17 	ldw	r2,-20(fp)
   24cf4:	10800810 	cmplti	r2,r2,32
   24cf8:	103fe01e 	bne	r2,zero,24c7c <__alt_mem_Flash_flash_data+0xf4024c7c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   24cfc:	008000f4 	movhi	r2,3
   24d00:	10a7f004 	addi	r2,r2,-24640
   24d04:	10800017 	ldw	r2,0(r2)
   24d08:	1009883a 	mov	r4,r2
   24d0c:	001afc00 	call	1afc0 <OSSemPost>

  return rc;
   24d10:	e0bffc17 	ldw	r2,-16(fp)
}
   24d14:	e037883a 	mov	sp,fp
   24d18:	dfc00117 	ldw	ra,4(sp)
   24d1c:	df000017 	ldw	fp,0(sp)
   24d20:	dec00204 	addi	sp,sp,8
   24d24:	f800283a 	ret

00024d28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   24d28:	defffb04 	addi	sp,sp,-20
   24d2c:	df000415 	stw	fp,16(sp)
   24d30:	df000404 	addi	fp,sp,16
   24d34:	e13ffe15 	stw	r4,-8(fp)
   24d38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24d3c:	e0bfff17 	ldw	r2,-4(fp)
   24d40:	10840070 	cmpltui	r2,r2,4097
   24d44:	1000021e 	bne	r2,zero,24d50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24d48:	00840004 	movi	r2,4096
   24d4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   24d50:	e0fffe17 	ldw	r3,-8(fp)
   24d54:	e0bfff17 	ldw	r2,-4(fp)
   24d58:	1885883a 	add	r2,r3,r2
   24d5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24d60:	e0bffe17 	ldw	r2,-8(fp)
   24d64:	e0bffc15 	stw	r2,-16(fp)
   24d68:	00000506 	br	24d80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24d6c:	e0bffc17 	ldw	r2,-16(fp)
   24d70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24d74:	e0bffc17 	ldw	r2,-16(fp)
   24d78:	10800804 	addi	r2,r2,32
   24d7c:	e0bffc15 	stw	r2,-16(fp)
   24d80:	e0fffc17 	ldw	r3,-16(fp)
   24d84:	e0bffd17 	ldw	r2,-12(fp)
   24d88:	18bff836 	bltu	r3,r2,24d6c <__alt_mem_Flash_flash_data+0xf4024d6c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24d8c:	e0bffe17 	ldw	r2,-8(fp)
   24d90:	108007cc 	andi	r2,r2,31
   24d94:	10000226 	beq	r2,zero,24da0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24d98:	e0bffc17 	ldw	r2,-16(fp)
   24d9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24da0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24da4:	e037883a 	mov	sp,fp
   24da8:	df000017 	ldw	fp,0(sp)
   24dac:	dec00104 	addi	sp,sp,4
   24db0:	f800283a 	ret

00024db4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24db4:	defffe04 	addi	sp,sp,-8
   24db8:	df000115 	stw	fp,4(sp)
   24dbc:	df000104 	addi	fp,sp,4
   24dc0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24dc4:	e0bfff17 	ldw	r2,-4(fp)
   24dc8:	10bffe84 	addi	r2,r2,-6
   24dcc:	10c00428 	cmpgeui	r3,r2,16
   24dd0:	18001a1e 	bne	r3,zero,24e3c <alt_exception_cause_generated_bad_addr+0x88>
   24dd4:	100690ba 	slli	r3,r2,2
   24dd8:	008000b4 	movhi	r2,2
   24ddc:	10937b04 	addi	r2,r2,19948
   24de0:	1885883a 	add	r2,r3,r2
   24de4:	10800017 	ldw	r2,0(r2)
   24de8:	1000683a 	jmp	r2
   24dec:	00024e2c 	andhi	zero,zero,2360
   24df0:	00024e2c 	andhi	zero,zero,2360
   24df4:	00024e3c 	xorhi	zero,zero,2360
   24df8:	00024e3c 	xorhi	zero,zero,2360
   24dfc:	00024e3c 	xorhi	zero,zero,2360
   24e00:	00024e2c 	andhi	zero,zero,2360
   24e04:	00024e34 	movhi	zero,2360
   24e08:	00024e3c 	xorhi	zero,zero,2360
   24e0c:	00024e2c 	andhi	zero,zero,2360
   24e10:	00024e2c 	andhi	zero,zero,2360
   24e14:	00024e3c 	xorhi	zero,zero,2360
   24e18:	00024e2c 	andhi	zero,zero,2360
   24e1c:	00024e34 	movhi	zero,2360
   24e20:	00024e3c 	xorhi	zero,zero,2360
   24e24:	00024e3c 	xorhi	zero,zero,2360
   24e28:	00024e2c 	andhi	zero,zero,2360
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24e2c:	00800044 	movi	r2,1
   24e30:	00000306 	br	24e40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24e34:	0005883a 	mov	r2,zero
   24e38:	00000106 	br	24e40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24e3c:	0005883a 	mov	r2,zero
  }
}
   24e40:	e037883a 	mov	sp,fp
   24e44:	df000017 	ldw	fp,0(sp)
   24e48:	dec00104 	addi	sp,sp,4
   24e4c:	f800283a 	ret

00024e50 <atexit>:
   24e50:	200b883a 	mov	r5,r4
   24e54:	000d883a 	mov	r6,zero
   24e58:	0009883a 	mov	r4,zero
   24e5c:	000f883a 	mov	r7,zero
   24e60:	0024f181 	jmpi	24f18 <__register_exitproc>

00024e64 <exit>:
   24e64:	defffe04 	addi	sp,sp,-8
   24e68:	000b883a 	mov	r5,zero
   24e6c:	dc000015 	stw	r16,0(sp)
   24e70:	dfc00115 	stw	ra,4(sp)
   24e74:	2021883a 	mov	r16,r4
   24e78:	002502c0 	call	2502c <__call_exitprocs>
   24e7c:	008000b4 	movhi	r2,2
   24e80:	109fc804 	addi	r2,r2,32544
   24e84:	11000017 	ldw	r4,0(r2)
   24e88:	20800f17 	ldw	r2,60(r4)
   24e8c:	10000126 	beq	r2,zero,24e94 <exit+0x30>
   24e90:	103ee83a 	callr	r2
   24e94:	8009883a 	mov	r4,r16
   24e98:	00251c00 	call	251c0 <_exit>

00024e9c <memcmp>:
   24e9c:	01c000c4 	movi	r7,3
   24ea0:	3980192e 	bgeu	r7,r6,24f08 <memcmp+0x6c>
   24ea4:	2144b03a 	or	r2,r4,r5
   24ea8:	11c4703a 	and	r2,r2,r7
   24eac:	10000f26 	beq	r2,zero,24eec <memcmp+0x50>
   24eb0:	20800003 	ldbu	r2,0(r4)
   24eb4:	28c00003 	ldbu	r3,0(r5)
   24eb8:	10c0151e 	bne	r2,r3,24f10 <memcmp+0x74>
   24ebc:	31bfff84 	addi	r6,r6,-2
   24ec0:	01ffffc4 	movi	r7,-1
   24ec4:	00000406 	br	24ed8 <memcmp+0x3c>
   24ec8:	20800003 	ldbu	r2,0(r4)
   24ecc:	28c00003 	ldbu	r3,0(r5)
   24ed0:	31bfffc4 	addi	r6,r6,-1
   24ed4:	10c00e1e 	bne	r2,r3,24f10 <memcmp+0x74>
   24ed8:	21000044 	addi	r4,r4,1
   24edc:	29400044 	addi	r5,r5,1
   24ee0:	31fff91e 	bne	r6,r7,24ec8 <__alt_mem_Flash_flash_data+0xf4024ec8>
   24ee4:	0005883a 	mov	r2,zero
   24ee8:	f800283a 	ret
   24eec:	20c00017 	ldw	r3,0(r4)
   24ef0:	28800017 	ldw	r2,0(r5)
   24ef4:	1880041e 	bne	r3,r2,24f08 <memcmp+0x6c>
   24ef8:	31bfff04 	addi	r6,r6,-4
   24efc:	21000104 	addi	r4,r4,4
   24f00:	29400104 	addi	r5,r5,4
   24f04:	39bff936 	bltu	r7,r6,24eec <__alt_mem_Flash_flash_data+0xf4024eec>
   24f08:	303fe91e 	bne	r6,zero,24eb0 <__alt_mem_Flash_flash_data+0xf4024eb0>
   24f0c:	003ff506 	br	24ee4 <__alt_mem_Flash_flash_data+0xf4024ee4>
   24f10:	10c5c83a 	sub	r2,r2,r3
   24f14:	f800283a 	ret

00024f18 <__register_exitproc>:
   24f18:	008000b4 	movhi	r2,2
   24f1c:	defffa04 	addi	sp,sp,-24
   24f20:	109fc804 	addi	r2,r2,32544
   24f24:	dc000315 	stw	r16,12(sp)
   24f28:	14000017 	ldw	r16,0(r2)
   24f2c:	dc400415 	stw	r17,16(sp)
   24f30:	dfc00515 	stw	ra,20(sp)
   24f34:	80805217 	ldw	r2,328(r16)
   24f38:	2023883a 	mov	r17,r4
   24f3c:	10003626 	beq	r2,zero,25018 <__register_exitproc+0x100>
   24f40:	10c00117 	ldw	r3,4(r2)
   24f44:	010007c4 	movi	r4,31
   24f48:	20c00e16 	blt	r4,r3,24f84 <__register_exitproc+0x6c>
   24f4c:	1a400044 	addi	r9,r3,1
   24f50:	8800211e 	bne	r17,zero,24fd8 <__register_exitproc+0xc0>
   24f54:	18c00084 	addi	r3,r3,2
   24f58:	18c7883a 	add	r3,r3,r3
   24f5c:	18c7883a 	add	r3,r3,r3
   24f60:	12400115 	stw	r9,4(r2)
   24f64:	10c7883a 	add	r3,r2,r3
   24f68:	19400015 	stw	r5,0(r3)
   24f6c:	0005883a 	mov	r2,zero
   24f70:	dfc00517 	ldw	ra,20(sp)
   24f74:	dc400417 	ldw	r17,16(sp)
   24f78:	dc000317 	ldw	r16,12(sp)
   24f7c:	dec00604 	addi	sp,sp,24
   24f80:	f800283a 	ret
   24f84:	00800034 	movhi	r2,0
   24f88:	10800004 	addi	r2,r2,0
   24f8c:	10002526 	beq	r2,zero,25024 <__register_exitproc+0x10c>
   24f90:	01006404 	movi	r4,400
   24f94:	d9400015 	stw	r5,0(sp)
   24f98:	d9800115 	stw	r6,4(sp)
   24f9c:	d9c00215 	stw	r7,8(sp)
   24fa0:	00000000 	call	0 <__reset>
   24fa4:	d9400017 	ldw	r5,0(sp)
   24fa8:	d9800117 	ldw	r6,4(sp)
   24fac:	d9c00217 	ldw	r7,8(sp)
   24fb0:	10001c26 	beq	r2,zero,25024 <__register_exitproc+0x10c>
   24fb4:	80c05217 	ldw	r3,328(r16)
   24fb8:	10000115 	stw	zero,4(r2)
   24fbc:	02400044 	movi	r9,1
   24fc0:	10c00015 	stw	r3,0(r2)
   24fc4:	80805215 	stw	r2,328(r16)
   24fc8:	10006215 	stw	zero,392(r2)
   24fcc:	10006315 	stw	zero,396(r2)
   24fd0:	0007883a 	mov	r3,zero
   24fd4:	883fdf26 	beq	r17,zero,24f54 <__alt_mem_Flash_flash_data+0xf4024f54>
   24fd8:	18d1883a 	add	r8,r3,r3
   24fdc:	4211883a 	add	r8,r8,r8
   24fe0:	1211883a 	add	r8,r2,r8
   24fe4:	41802215 	stw	r6,136(r8)
   24fe8:	01000044 	movi	r4,1
   24fec:	11806217 	ldw	r6,392(r2)
   24ff0:	20c8983a 	sll	r4,r4,r3
   24ff4:	310cb03a 	or	r6,r6,r4
   24ff8:	11806215 	stw	r6,392(r2)
   24ffc:	41c04215 	stw	r7,264(r8)
   25000:	01800084 	movi	r6,2
   25004:	89bfd31e 	bne	r17,r6,24f54 <__alt_mem_Flash_flash_data+0xf4024f54>
   25008:	11806317 	ldw	r6,396(r2)
   2500c:	3108b03a 	or	r4,r6,r4
   25010:	11006315 	stw	r4,396(r2)
   25014:	003fcf06 	br	24f54 <__alt_mem_Flash_flash_data+0xf4024f54>
   25018:	80805304 	addi	r2,r16,332
   2501c:	80805215 	stw	r2,328(r16)
   25020:	003fc706 	br	24f40 <__alt_mem_Flash_flash_data+0xf4024f40>
   25024:	00bfffc4 	movi	r2,-1
   25028:	003fd106 	br	24f70 <__alt_mem_Flash_flash_data+0xf4024f70>

0002502c <__call_exitprocs>:
   2502c:	008000b4 	movhi	r2,2
   25030:	109fc804 	addi	r2,r2,32544
   25034:	10800017 	ldw	r2,0(r2)
   25038:	defff404 	addi	sp,sp,-48
   2503c:	dd800815 	stw	r22,32(sp)
   25040:	d8800015 	stw	r2,0(sp)
   25044:	10805204 	addi	r2,r2,328
   25048:	dd000615 	stw	r20,24(sp)
   2504c:	dc800415 	stw	r18,16(sp)
   25050:	dfc00b15 	stw	ra,44(sp)
   25054:	df000a15 	stw	fp,40(sp)
   25058:	ddc00915 	stw	r23,36(sp)
   2505c:	dd400715 	stw	r21,28(sp)
   25060:	dcc00515 	stw	r19,20(sp)
   25064:	dc400315 	stw	r17,12(sp)
   25068:	dc000215 	stw	r16,8(sp)
   2506c:	2025883a 	mov	r18,r4
   25070:	2829883a 	mov	r20,r5
   25074:	d8800115 	stw	r2,4(sp)
   25078:	05bfffc4 	movi	r22,-1
   2507c:	d8800017 	ldw	r2,0(sp)
   25080:	14c05217 	ldw	r19,328(r2)
   25084:	98001d26 	beq	r19,zero,250fc <__call_exitprocs+0xd0>
   25088:	dd400117 	ldw	r21,4(sp)
   2508c:	98800117 	ldw	r2,4(r19)
   25090:	173fffc4 	addi	fp,r2,-1
   25094:	e0000d16 	blt	fp,zero,250cc <__call_exitprocs+0xa0>
   25098:	14000044 	addi	r16,r2,1
   2509c:	8421883a 	add	r16,r16,r16
   250a0:	8421883a 	add	r16,r16,r16
   250a4:	84402004 	addi	r17,r16,128
   250a8:	9c63883a 	add	r17,r19,r17
   250ac:	9c21883a 	add	r16,r19,r16
   250b0:	a0001e26 	beq	r20,zero,2512c <__call_exitprocs+0x100>
   250b4:	80804017 	ldw	r2,256(r16)
   250b8:	15001c26 	beq	r2,r20,2512c <__call_exitprocs+0x100>
   250bc:	e73fffc4 	addi	fp,fp,-1
   250c0:	843fff04 	addi	r16,r16,-4
   250c4:	8c7fff04 	addi	r17,r17,-4
   250c8:	e5bff91e 	bne	fp,r22,250b0 <__alt_mem_Flash_flash_data+0xf40250b0>
   250cc:	00800034 	movhi	r2,0
   250d0:	10800004 	addi	r2,r2,0
   250d4:	10000926 	beq	r2,zero,250fc <__call_exitprocs+0xd0>
   250d8:	98800117 	ldw	r2,4(r19)
   250dc:	1000311e 	bne	r2,zero,251a4 <__call_exitprocs+0x178>
   250e0:	98800017 	ldw	r2,0(r19)
   250e4:	10003426 	beq	r2,zero,251b8 <__call_exitprocs+0x18c>
   250e8:	9809883a 	mov	r4,r19
   250ec:	a8800015 	stw	r2,0(r21)
   250f0:	00000000 	call	0 <__reset>
   250f4:	acc00017 	ldw	r19,0(r21)
   250f8:	983fe41e 	bne	r19,zero,2508c <__alt_mem_Flash_flash_data+0xf402508c>
   250fc:	dfc00b17 	ldw	ra,44(sp)
   25100:	df000a17 	ldw	fp,40(sp)
   25104:	ddc00917 	ldw	r23,36(sp)
   25108:	dd800817 	ldw	r22,32(sp)
   2510c:	dd400717 	ldw	r21,28(sp)
   25110:	dd000617 	ldw	r20,24(sp)
   25114:	dcc00517 	ldw	r19,20(sp)
   25118:	dc800417 	ldw	r18,16(sp)
   2511c:	dc400317 	ldw	r17,12(sp)
   25120:	dc000217 	ldw	r16,8(sp)
   25124:	dec00c04 	addi	sp,sp,48
   25128:	f800283a 	ret
   2512c:	98800117 	ldw	r2,4(r19)
   25130:	80c00017 	ldw	r3,0(r16)
   25134:	10bfffc4 	addi	r2,r2,-1
   25138:	17001526 	beq	r2,fp,25190 <__call_exitprocs+0x164>
   2513c:	80000015 	stw	zero,0(r16)
   25140:	183fde26 	beq	r3,zero,250bc <__alt_mem_Flash_flash_data+0xf40250bc>
   25144:	00800044 	movi	r2,1
   25148:	1708983a 	sll	r4,r2,fp
   2514c:	98806217 	ldw	r2,392(r19)
   25150:	9dc00117 	ldw	r23,4(r19)
   25154:	2084703a 	and	r2,r4,r2
   25158:	1000061e 	bne	r2,zero,25174 <__call_exitprocs+0x148>
   2515c:	183ee83a 	callr	r3
   25160:	98800117 	ldw	r2,4(r19)
   25164:	15ffc51e 	bne	r2,r23,2507c <__alt_mem_Flash_flash_data+0xf402507c>
   25168:	a8800017 	ldw	r2,0(r21)
   2516c:	14ffd326 	beq	r2,r19,250bc <__alt_mem_Flash_flash_data+0xf40250bc>
   25170:	003fc206 	br	2507c <__alt_mem_Flash_flash_data+0xf402507c>
   25174:	98806317 	ldw	r2,396(r19)
   25178:	2084703a 	and	r2,r4,r2
   2517c:	1000061e 	bne	r2,zero,25198 <__call_exitprocs+0x16c>
   25180:	89400017 	ldw	r5,0(r17)
   25184:	9009883a 	mov	r4,r18
   25188:	183ee83a 	callr	r3
   2518c:	003ff406 	br	25160 <__alt_mem_Flash_flash_data+0xf4025160>
   25190:	9f000115 	stw	fp,4(r19)
   25194:	003fea06 	br	25140 <__alt_mem_Flash_flash_data+0xf4025140>
   25198:	89000017 	ldw	r4,0(r17)
   2519c:	183ee83a 	callr	r3
   251a0:	003fef06 	br	25160 <__alt_mem_Flash_flash_data+0xf4025160>
   251a4:	98800017 	ldw	r2,0(r19)
   251a8:	982b883a 	mov	r21,r19
   251ac:	1027883a 	mov	r19,r2
   251b0:	983fb61e 	bne	r19,zero,2508c <__alt_mem_Flash_flash_data+0xf402508c>
   251b4:	003fd106 	br	250fc <__alt_mem_Flash_flash_data+0xf40250fc>
   251b8:	0005883a 	mov	r2,zero
   251bc:	003ffa06 	br	251a8 <__alt_mem_Flash_flash_data+0xf40251a8>

000251c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   251c0:	defffd04 	addi	sp,sp,-12
   251c4:	df000215 	stw	fp,8(sp)
   251c8:	df000204 	addi	fp,sp,8
   251cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   251d0:	008000f4 	movhi	r2,3
   251d4:	10a7f844 	addi	r2,r2,-24607
   251d8:	10000005 	stb	zero,0(r2)
   251dc:	e0bfff17 	ldw	r2,-4(fp)
   251e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   251e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   251e8:	10000226 	beq	r2,zero,251f4 <_exit+0x34>
    ALT_SIM_FAIL();
   251ec:	002af070 	cmpltui	zero,zero,43969
   251f0:	00000106 	br	251f8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   251f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   251f8:	003fff06 	br	251f8 <__alt_mem_Flash_flash_data+0xf40251f8>
