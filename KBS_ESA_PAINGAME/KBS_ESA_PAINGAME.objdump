
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001164c memsz 0x0001164c flags r-x
    LOAD off    0x0001266c vaddr 0x0001166c paddr 0x00013524 align 2**12
         filesz 0x00001eb8 memsz 0x00001eb8 flags rw-
    LOAD off    0x000153dc vaddr 0x000153dc paddr 0x000153dc align 2**12
         filesz 0x00000000 memsz 0x0000d448 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010fe4  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000444  00011228  00011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb8  0001166c  00013524  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d448  000153dc  000153dc  000153dc  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00022824  00022824  00014524  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00014524  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014524  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  00014548  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023ad8  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000087b1  00000000  00000000  00038cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a69e  00000000  00000000  000414a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003180  00000000  00000000  0004bb40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004669  00000000  00000000  0004ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047e0  00000000  00000000  00053329  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00057b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  00057b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005d394  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005d39a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005d39f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005d3a0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005d3a1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005d3a5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005d3a9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005d3ad  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005d3b6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005d3bf  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005d3c8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0005d3d3  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0005d431  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  00067ff6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011228 l    d  .rodata	00000000 .rodata
0001166c l    d  .rwdata	00000000 .rwdata
000153dc l    d  .bss	00000000 .bss
00022824 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0001166c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003970 l     F .text	00000008 __fp_lock
00003978 l     F .text	00000008 __fp_unlock
0000398c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000049dc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00004b08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00004c28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004c54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004d54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00004e48 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00004f2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00005124 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013498 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005380 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001349c l     O .rwdata	00000004 lockid
00015468 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000134a0 l     O .rwdata	00000004 lockid
00015470 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00006db4 l     F .text	00000044 OS_InitMisc
00006df8 l     F .text	00000068 OS_InitRdyList
00006f58 l     F .text	000000e0 OS_InitTCBList
00006cd8 l     F .text	000000dc OS_InitEventList
00006e60 l     F .text	0000007c OS_InitTaskIdle
00006edc l     F .text	0000007c OS_InitTaskStat
000071b8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00008fbc l     F .text	00000110 OS_FlagTaskRdy
00008d14 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d464 l     F .text	00000038 alt_dev_reg
00012040 l     O .rwdata	0000106c JTAG_UART
000130ac l     O .rwdata	00000030 AV_Config
000130dc l     O .rwdata	00000030 Audio_Subsystem_Audio
0001310c l     O .rwdata	0000002c Char_LCD_16x2
00013138 l     O .rwdata	0000002c IrDA
00013164 l     O .rwdata	0000002c Expansion_JP5
00013190 l     O .rwdata	0000002c Green_LEDs
000131bc l     O .rwdata	0000002c HEX3_HEX0
000131e8 l     O .rwdata	0000002c HEX7_HEX4
00013214 l     O .rwdata	0000002c Pushbuttons
00013240 l     O .rwdata	0000002c Red_LEDs
0001326c l     O .rwdata	0000002c Slider_Switches
00013298 l     O .rwdata	00000038 PS2_Port
000132d0 l     O .rwdata	00000038 PS2_Port_Dual
00013308 l     O .rwdata	0000002c Serial_Port
00013334 l     O .rwdata	00000034 USB
00013368 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000133b0 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00013404 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000db4c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000ddf4 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e5cc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fde8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010054 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001033c l     F .text	00000050 alt_get_errno
0001038c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000154d4 g     O .bss	00000004 alt_instruction_exception_handler
000134ee g     O .rwdata	00000002 OSTaskNameSize
000048d0 g     F .text	00000054 _isatty_r
00005050 g     F .text	000000d4 alt_main
00001e94 g     F .text	000000a8 _puts_r
00022724 g     O .bss	00000100 alt_irq
0000f1a8 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00004924 g     F .text	0000005c _lseek_r
00009820 g     F .text	000000d0 OS_MemInit
00013524 g       *ABS*	00000000 __flash_rwdata_start
0000d400 g     F .text	00000064 OSTimeSet
0000e738 g     F .text	0000003c alt_up_character_lcd_send_cmd
00005a30 g     F .text	00000610 OSEventPendMulti
00022824 g       *ABS*	00000000 __alt_heap_start
00010998 g     F .text	00000020 OSTaskCreateHook
000134c6 g     O .rwdata	00000002 OSMboxEn
00006094 g     F .text	0000007c OSIntEnter
00004660 g     F .text	0000005c __sseek
00003cc0 g     F .text	00000010 __sinit
0000fb30 g     F .text	00000100 alt_up_char_buffer_string
0000efc8 g     F .text	00000034 read_CE_bit
000134d6 g     O .rwdata	00000002 OSQEn
00003b28 g     F .text	00000068 __sfmoreglue
00005704 g     F .text	000000d0 __malloc_unlock
000109f4 g     F .text	0000001c OSTaskStatHook
0000f34c g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000f840 g     F .text	00000090 alt_up_rs232_read_fd
00015478 g     O .bss	00000001 OSLockNesting
00000ad0 g     F .text	000000ec menu
00013514 g     O .rwdata	00000002 OSDataSize
00015479 g     O .bss	00000001 OSRunning
0000fa64 g     F .text	000000cc alt_up_char_buffer_draw
000153dc g     O .bss	00000004 counter3
00002e70 g     F .text	0000015c memmove
00010a2c g     F .text	0000001c OSInitHookBegin
0001350c g     O .rwdata	00000002 OSTmrSize
00003ca8 g     F .text	00000018 _cleanup
00013440 g     O .rwdata	00000004 gameModeMenu
0001547c g     O .bss	00000004 OSIdleCtr
00013448 g     O .rwdata	00000004 xRechts
0001074c g     F .text	00000020 altera_nios2_gen2_irq_init
00010818 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000e6c4 g     F .text	00000074 get_DDRAM_addr
000074f0 g     F .text	000002d4 OS_TCBInit
00013458 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
00013512 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
000134b2 g     O .rwdata	00000002 OSEventSize
00015480 g     O .bss	00000001 OSPrioHighRdy
00004878 g     F .text	00000058 _fstat_r
000109b8 g     F .text	00000020 OSTaskDelHook
00015454 g     O .bss	00000004 errno
000045dc g     F .text	00000008 __seofread
000107f8 g       .text	00000000 OSStartHighRdy
000153fc g     O .bss	00000004 pixel_buffer_y
0000bd04 g     F .text	000001ec OSTaskCreateExt
00008860 g     F .text	00000068 OSFlagPendGetFlagsRdy
000134f2 g     O .rwdata	00000002 OSTaskStatStkSize
00007950 g     F .text	00000308 OSFlagAccept
00009ef4 g     F .text	000000b8 OSQFlush
000098f0 g     F .text	00000140 OSQAccept
00015460 g     O .bss	00000004 alt_argv
00015400 g     O .bss	00000004 score1
0001b430 g       *ABS*	00000000 _gp
0000bb48 g     F .text	000001bc OSTaskCreate
0000b608 g     F .text	00000540 OSTaskChangePrio
00015474 g     O .bss	00000004 alt_heapsem
00001554 g     F .text	0000003c del_middenlijn
000077c4 g     F .text	0000018c OSDebugInit
0000bef0 g     F .text	000003e0 OSTaskDel
0001344c g     O .rwdata	00000004 xBoven
00011ec0 g     O .rwdata	00000180 alt_fd_list
00013464 g     O .rwdata	00000004 onePress
0001f500 g     O .bss	00000370 OSFlagTbl
00006ac4 g     F .text	000000b4 OS_EventTaskRemove
0000ff94 g     F .text	00000090 alt_find_dev
00002d38 g     F .text	00000138 memcpy
000134dc g     O .rwdata	00000002 OSRdyTblSize
0000e8d4 g     F .text	00000050 alt_up_character_lcd_write_fd
0000fc30 g     F .text	0000005c alt_up_char_buffer_clear
00003980 g     F .text	0000000c _cleanup_r
00010114 g     F .text	00000078 alt_io_redirect
00011228 g       *ABS*	00000000 __DTOR_END__
0000ee54 g     F .text	00000090 alt_up_irda_write_fd
0000f7cc g     F .text	00000074 alt_up_rs232_read_data
00001f3c g     F .text	00000014 puts
00010d3c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000057d4 g     F .text	00000120 OSEventNameGet
000134c0 g     O .rwdata	00000002 OSFlagMax
00015438 g     O .bss	00000004 last
00006110 g     F .text	000000f4 OSIntExit
000134fa g     O .rwdata	00000002 OSTCBSize
00015481 g     O .bss	00000001 OSPrioCur
0000ec50 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000e058 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00004af8 g     F .text	00000008 .hidden __udivsi3
00004da4 g     F .text	000000a4 isatty
000134e0 g     O .rwdata	00000002 OSStkWidth
000134d4 g     O .rwdata	00000002 OSPtrSize
000134b4 g     O .rwdata	00000002 OSEventTblSize
0000ebf4 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00013454 g     O .rwdata	00000004 xMenu
0001076c g       .text	00000000 OSCtxSw
00010cb0 g     F .text	0000008c alt_icache_flush
00015450 g     O .bss	00000004 __malloc_top_pad
000005ec g     F .text	0000011c moveDown
00015484 g     O .bss	00000004 OSTCBList
000153e0 g     O .bss	00000004 gpio_dev
00015458 g     O .bss	00000004 alt_fd_list_lock
00001fe8 g     F .text	000004c0 __sfvwrite_r
0001f870 g     O .bss	00000c30 OSMemTbl
00015488 g     O .bss	00000001 OSTickStepState
00003534 g     F .text	00000054 _sbrk_r
00015500 g     O .bss	00002000 menu_stk
000134d8 g     O .rwdata	00000002 OSQMax
000204a0 g     O .bss	00000800 OSTaskStatStk
00009450 g     F .text	000000f8 OSMemNameGet
000134b8 g     O .rwdata	00000002 OSFlagEn
00004980 g     F .text	0000005c _read_r
000134fe g     O .rwdata	00000002 OSTimeTickHookEn
0000a414 g     F .text	00000168 OSQPost
000090cc g     F .text	000000a0 OS_FlagUnlink
00015404 g     O .bss	00000004 blue_y2
00013490 g     O .rwdata	00000004 alt_max_fd
0000f748 g     F .text	00000044 alt_up_rs232_check_parity
00007088 g     F .text	00000064 OS_MemCopy
000070ec g     F .text	000000cc OS_Sched
00004774 g     F .text	000000f0 _fclose_r
00009360 g     F .text	000000f0 OSMemGet
0000c5d0 g     F .text	000001c0 OSTaskNameSet
0000effc g     F .text	00000030 read_num_bytes_available
00003940 g     F .text	00000030 fflush
0001544c g     O .bss	00000004 __malloc_max_sbrked_mem
0001548c g     O .bss	00000004 OSCtxSwCtr
00010a10 g     F .text	0000001c OSTimeTickHook
0001018c g     F .text	000001b0 alt_irq_register
000134c2 g     O .rwdata	00000002 OSFlagNameSize
0000ef64 g     F .text	00000034 read_RI_bit
00006b78 g     F .text	000000fc OS_EventTaskRemoveMulti
000153e4 g     O .bss	00000004 controllerSem
00006978 g     F .text	0000014c OS_EventTaskWaitMulti
000134da g     O .rwdata	00000002 OSQSize
00004f7c g     F .text	000000d4 lseek
0000af18 g     F .text	00000268 OSSemPend
00013470 g     O .rwdata	00000004 _global_impure_ptr
00002fcc g     F .text	00000568 _realloc_r
00015430 g     O .bss	00000004 vorige
000134c4 g     O .rwdata	00000002 OSLowestPrio
00022824 g       *ABS*	00000000 __bss_end
00010a80 g     F .text	00000020 OSTCBInitHook
0001350a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00010648 g     F .text	00000104 alt_tick
000153e8 g     O .bss	00000004 counter1
000134ac g     O .rwdata	00000002 OSEventEn
00013506 g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000f060 g     F .text	0000002c read_data_byte
00003ce0 g     F .text	00000018 __fp_lock_all
00008ed8 g     F .text	000000e4 OS_FlagInit
000105b0 g     F .text	00000098 alt_alarm_stop
0000ef98 g     F .text	00000030 read_RE_bit
000134e8 g     O .rwdata	00000002 OSTaskIdleStkSize
000154c8 g     O .bss	00000004 alt_irq_active
0000ab00 g     F .text	000000b0 OSSemAccept
00001450 g     F .text	00000090 VGA_text
00009660 g     F .text	000000d8 OSMemPut
00015408 g     O .bss	00000004 pixel_buffer_x
0000916c g     F .text	000001f4 OSMemCreate
00015490 g     O .bss	00000004 OSIdleCtrMax
00017500 g     O .bss	00002000 controller1_stk
0000ec90 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011e98 g     O .rwdata	00000028 alt_dev_null
000134fc g     O .rwdata	00000002 OSTicksPerSec
0000eb68 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000ef24 g     F .text	00000040 alt_up_parallel_port_open_dev
0001076c g       .text	00000000 OSIntCtxSw
0000f204 g     F .text	00000074 alt_up_ps2_write_data_byte
000009c4 g     F .text	0000010c endGame
0000fdcc g     F .text	0000001c alt_dcache_flush_all
0001345c g     O .rwdata	00000002 geel
00015494 g     O .bss	00000004 OSTCBFreeList
00013524 g       *ABS*	00000000 __ram_rwdata_end
0000b180 g     F .text	0000016c OSSemPendAbort
00013488 g     O .rwdata	00000008 alt_dev_list
000053d0 g     F .text	000000f8 write
00013500 g     O .rwdata	00000002 OSVersionNbr
0001166c g       *ABS*	00000000 __ram_rodata_end
00004ca4 g     F .text	000000b0 fstat
0000f8d0 g     F .text	00000094 alt_up_rs232_write_fd
00000bbc g     F .text	00000354 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000134a8 g     O .rwdata	00000004 OSEndiannessTest
00004b00 g     F .text	00000008 .hidden __umodsi3
0001540c g     O .bss	00000004 blue_x1
000134ba g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	00000090 controllers
00022824 g       *ABS*	00000000 end
0000f540 g     F .text	00000098 alt_up_ps2_write_fd
0000eccc g     F .text	00000044 alt_up_irda_check_parity
0000f9a4 g     F .text	00000080 alt_up_char_buffer_init
000010d0 g     F .text	00000104 teken_menu
0000da0c g     F .text	00000140 altera_avalon_jtag_uart_init
0000734c g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000708 g     F .text	000002bc Game
0001343c g     O .rwdata	00000004 check
00015434 g     O .bss	00000002 zwart
00011228 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e644 g     F .text	00000080 alt_avalon_timer_sc_init
0000e30c g     F .text	000002c0 altera_avalon_jtag_uart_write
00003cd0 g     F .text	00000004 __sfp_lock_acquire
00002c50 g     F .text	000000e8 memchr
00007038 g     F .text	00000050 OS_MemClr
0000e7e8 g     F .text	00000078 alt_up_character_lcd_write
0001083c g     F .text	0000015c OSTaskStkInit
00003e34 g     F .text	000002f0 _free_r
000066d4 g     F .text	00000198 OS_EventTaskRdy
00011058 g     F .text	00000194 __call_exitprocs
00015498 g     O .bss	00000001 OSCPUUsage
00013478 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000154cc g     O .bss	00000004 _alt_tick_rate
00009fac g     F .text	000002fc OSQPend
0001346e g     O .rwdata	00000002 groen
0000cefc g     F .text	00000148 OSTimeDly
00019500 g     O .bss	00002000 controller2_stk
000154d0 g     O .bss	00000004 _alt_nticks
00005174 g     F .text	000000fc read
0000d4d0 g     F .text	000003d8 alt_sys_init
0000ea20 g     F .text	00000088 alt_up_character_lcd_shift_display
00010f44 g     F .text	00000114 __register_exitproc
00015499 g     O .bss	00000001 OSTaskCtr
0001345e g     O .rwdata	00000002 rood
0000f460 g     F .text	00000054 alt_up_ps2_clear_fifo
0000f70c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000153f8 g     O .bss	00000004 score2
0000139c g     F .text	000000b4 VGA_box
0000d044 g     F .text	00000168 OSTimeDlyHMSM
0000eaa8 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000df04 g     F .text	00000068 altera_avalon_jtag_uart_close
0001166c g       *ABS*	00000000 __ram_rwdata_start
00011228 g       *ABS*	00000000 __ram_rodata_start
000154d8 g     O .bss	00000028 __malloc_current_mallinfo
000134ae g     O .rwdata	00000002 OSEventMax
0000b2ec g     F .text	00000110 OSSemPost
00015410 g     O .bss	00000004 blue_y1
0000628c g     F .text	000000d8 OSSchedUnlock
000014e0 g     F .text	00000074 draw_middenlijn
0000d8a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00010bb4 g     F .text	000000fc alt_get_fd
0001549c g     O .bss	00000004 OSMemFreeList
000063d0 g     F .text	000000ac OSStatInit
00008c50 g     F .text	000000c4 OSFlagQuery
000134e4 g     O .rwdata	00000002 OSTaskCreateExtEn
00004720 g     F .text	00000054 _close_r
00010e24 g     F .text	0000007c memcmp
000066b8 g     F .text	0000001c OS_Dummy
0000d968 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00022824 g       *ABS*	00000000 __alt_stack_base
0000d9b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001543c g     O .bss	00000004 changed
0000eb9c g     F .text	00000058 alt_up_irda_enable_read_interrupt
00003588 g     F .text	00000154 __swsetup_r
00020ca0 g     O .bss	000001e0 OSQTbl
00000310 g     F .text	00000178 controller
0001346c g     O .rwdata	00000002 wit
00003b90 g     F .text	00000118 __sfp
00011a90 g     O .rwdata	00000408 __malloc_av_
00015414 g     O .bss	00000004 ALT_y
00003cdc g     F .text	00000004 __sinit_lock_release
000154a0 g     O .bss	00000004 OSTCBHighRdy
00004588 g     F .text	00000054 __sread
000154a4 g     O .bss	00000004 OSQFreeList
0000f670 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00010aa0 g     F .text	00000114 alt_find_file
0000fe38 g     F .text	000000a4 alt_dev_llist_insert
000055e4 g     F .text	00000120 __malloc_lock
000052d0 g     F .text	000000b0 sbrk
00015418 g     O .bss	00000004 ALT_inc_y
000058f4 g     F .text	0000013c OSEventNameSet
000038e4 g     F .text	0000005c _fflush_r
000154a8 g     O .bss	00000001 OSRdyGrp
000153dc g       *ABS*	00000000 __bss_start
00004464 g     F .text	00000124 memset
000011d4 g     F .text	000001c8 main
00015464 g     O .bss	00000004 alt_envp
00015448 g     O .bss	00000004 __malloc_max_total_mem
0000fa24 g     F .text	00000040 alt_up_char_buffer_open_dev
0000d908 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001139c g     O .rodata	00000100 OSUnMapTbl
000134de g     O .rwdata	00000002 OSSemEn
0000e998 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000088c8 g     F .text	00000388 OSFlagPost
000046bc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00004864 g     F .text	00000014 fclose
0000686c g     F .text	0000010c OS_EventTaskWait
0000f3f0 g     F .text	00000070 alt_up_ps2_read_data_byte
00015444 g     O .bss	00000004 timeout
00007428 g     F .text	000000c8 OS_TaskStatStkChk
0000c2d0 g     F .text	00000158 OSTaskDelReq
000024a8 g     F .text	000007a8 _malloc_r
00013494 g     O .rwdata	00000004 alt_errno
00006364 g     F .text	0000006c OSStart
00005588 g     F .text	0000005c __env_unlock
00004124 g     F .text	000000c4 _fwalk
0000c790 g     F .text	000001f8 OSTaskResume
00009738 g     F .text	000000e8 OSMemQuery
000134f0 g     O .rwdata	00000002 OSTaskStatEn
0001b500 g     O .bss	00002000 Game_stk
0000ed10 g     F .text	00000040 alt_up_irda_write_data
000134ca g     O .rwdata	00000002 OSMemMax
0000a57c g     F .text	00000170 OSQPostFront
0000f5d8 g     F .text	00000040 alt_up_ps2_open_dev
00004a48 g     F .text	00000054 .hidden __divsi3
000154a9 g     O .bss	00000003 OSRdyTbl
000134a4 g     O .rwdata	00000002 OSDebugEn
0000e7a8 g     F .text	00000040 alt_up_character_lcd_open_dev
00003d10 g     F .text	00000124 _malloc_trim_r
0000f150 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00011228 g       *ABS*	00000000 __CTOR_END__
00013434 g     O .rwdata	00000002 balWit
000134bc g     O .rwdata	00000002 OSFlagNodeSize
00013504 g     O .rwdata	00000002 OSTmrCfgMax
0000e774 g     F .text	00000034 alt_up_character_lcd_init
00010ea0 g     F .text	000000a4 strcmp
00009a30 g     F .text	000001fc OSQCreate
0000c428 g     F .text	000001a8 OSTaskNameGet
00011228 g       *ABS*	00000000 __flash_rodata_start
0000a6ec g     F .text	0000020c OSQPostOpt
0000647c g     F .text	0000021c OSTimeTick
000134ec g     O .rwdata	00000002 OSTaskMax
00011228 g       *ABS*	00000000 __DTOR_LIST__
0000abb0 g     F .text	00000100 OSSemCreate
00013510 g     O .rwdata	00000002 OSTmrWheelSize
0000f964 g     F .text	00000040 alt_up_rs232_open_dev
0001541c g     O .bss	00000004 gameSem
000134e6 g     O .rwdata	00000002 OSTaskDelEn
0000b3fc g     F .text	00000110 OSSemQuery
00009c2c g     F .text	000002c8 OSQDel
0000a2a8 g     F .text	0000016c OSQPendAbort
0000d49c g     F .text	00000034 alt_irq_init
00005270 g     F .text	00000060 alt_release_fd
00000488 g     F .text	0000004c checkID
0000f02c g     F .text	00000034 read_data_valid
0000eb34 g     F .text	00000034 alt_up_character_lcd_cursor_off
0000f2e8 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00010dd8 g     F .text	00000014 atexit
00001590 g     F .text	00000070 del_number
000046c4 g     F .text	0000005c _write_r
00006204 g     F .text	00000088 OSSchedLock
00007c58 g     F .text	00000128 OSFlagCreate
00013474 g     O .rwdata	00000004 _impure_ptr
0001545c g     O .bss	00000004 alt_argc
000036dc g     F .text	00000208 __sflush_r
0000ff38 g     F .text	0000005c _do_dtors
000134b6 g     O .rwdata	00000002 OSEventMultiEn
00007d80 g     F .text	00000270 OSFlagDel
000154ac g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00013502 g     O .rwdata	00000002 OSTmrEn
00008270 g     F .text	000005f0 OSFlagPend
00003cf8 g     F .text	00000018 __fp_unlock_all
00013480 g     O .rwdata	00000008 alt_fs_list
00007228 g     F .text	00000074 OS_StrCopy
0000f618 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000f78c g     F .text	00000040 alt_up_rs232_write_data
000004d4 g     F .text	00000118 moveUp
000134cc g     O .rwdata	00000002 OSMemNameSize
00015420 g     O .bss	00000004 ALT_x1
00010a48 g     F .text	0000001c OSInitHookEnd
00001600 g     F .text	00000848 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
000134f8 g     O .rwdata	00000002 OSTCBPrioTblMax
000134f4 g     O .rwdata	00000002 OSTaskStatStkChkEn
000134c8 g     O .rwdata	00000002 OSMemEn
00013438 g     O .rwdata	00000004 first
000134d2 g     O .rwdata	00000002 OSMutexEn
00013524 g       *ABS*	00000000 _edata
00013468 g     O .rwdata	00000004 interval_timer_ptr
00022824 g       *ABS*	00000000 _end
000154b0 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000df6c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000d1ac g     F .text	000001f0 OSTimeDlyResume
00008120 g     F .text	00000150 OSFlagNameSet
00000f50 g     F .text	000000a0 clearText
0000c988 g     F .text	000001c8 OSTaskStkChk
000134ce g     O .rwdata	00000002 OSMemSize
000045e4 g     F .text	0000007c __swrite
0001347c g     O .rwdata	00000004 __malloc_trim_threshold
000154b4 g     O .bss	00000004 OSTCBCur
00010dec g     F .text	00000038 exit
00001e48 g     F .text	0000004c checkIDScore
0000ed50 g     F .text	00000074 alt_up_irda_read_data
000134d0 g     O .rwdata	00000002 OSMemTblSize
000041e8 g     F .text	000000c4 _fwalk_reent
0000f08c g     F .text	000000c4 alt_up_ps2_init
00004a9c g     F .text	0000005c .hidden __modsi3
0001d500 g     O .bss	00002000 menu_stk2
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003cd4 g     F .text	00000004 __sfp_lock_release
00006040 g     F .text	00000054 OSInit
0000cd64 g     F .text	0000012c OSTaskQuery
0000e860 g     F .text	00000074 alt_up_character_lcd_string
0000aa54 g     F .text	000000ac OS_QInit
0000729c g     F .text	00000054 OS_StrLen
0000eee4 g     F .text	00000040 alt_up_irda_open_dev
00009548 g     F .text	00000118 OSMemNameSet
000134ea g     O .rwdata	00000002 OSTaskProfileEn
000154b8 g     O .bss	00000004 OSTime
000153ec g     O .bss	00000004 Flags
00000ff0 g     F .text	00000058 tekenBox
00020e80 g     O .bss	00000800 OSTaskIdleStk
000111ec g     F .text	0000003c _exit
00015424 g     O .bss	00000004 ALT_inc_x
0000fc8c g     F .text	00000140 alt_alarm_start
00007ff0 g     F .text	00000130 OSFlagNameGet
0000d39c g     F .text	00000064 OSTimeGet
000042ac g     F .text	000001b8 __smakebuf_r
0000f278 g     F .text	00000070 alt_up_ps2_wait_for_ack
00001f50 g     F .text	00000098 strlen
000109d8 g     F .text	0000001c OSTaskSwHook
00010458 g     F .text	00000158 open
00021680 g     O .bss	00000b40 OSEventTbl
000221c0 g     O .bss	00000510 OSTCBTbl
0000b50c g     F .text	000000fc OSSemSet
00013460 g     O .rwdata	00000004 eenkeer
00000f10 g     F .text	00000040 clearScreen
00015428 g     O .bss	00000004 ALT_x2
00010024 g     F .text	00000030 alt_icache_flush_all
0000e924 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00013518 g     O .rwdata	00000004 alt_priority_mask
0000acb0 g     F .text	00000268 OSSemDel
000154bc g     O .bss	00000004 OSFlagFreeList
000134b0 g     O .rwdata	00000002 OSEventNameSize
000154c0 g     O .bss	00000001 OSStatRdy
000226d0 g     O .bss	00000054 OSTCBPrioTbl
000054c8 g     F .text	000000c0 __env_lock
0000f4b4 g     F .text	0000008c alt_up_ps2_read_fd
000134f6 g     O .rwdata	00000002 OSTaskSwHookEn
00013444 g     O .rwdata	00000004 xLinks
0000edc4 g     F .text	00000090 alt_up_irda_read_fd
0001351c g     O .rwdata	00000008 alt_alarm_list
000134be g     O .rwdata	00000002 OSFlagWidth
0000fedc g     F .text	0000005c _do_ctors
00013430 g     O .rwdata	00000002 kleur
0000f6cc g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000153f4 g     O .bss	00000002 balZwart
00004b58 g     F .text	000000d0 close
0001542c g     O .bss	00000004 blue_x2
0001546c g     O .bss	00000004 alt_envsem
000154c4 g     O .bss	00000004 OSIdleCtrRun
00013450 g     O .rwdata	00000004 xOnder
00006698 g     F .text	00000020 OSVersion
00013508 g     O .rwdata	00000002 OSTmrCfgWheelSize
00004eac g     F .text	00000080 alt_load
0000ce90 g     F .text	0000006c OS_TaskStkClr
00001048 g     F .text	00000088 tekenBox2
000134e2 g     O .rwdata	00000002 OSTaskCreateEn
00015440 g     O .bss	00000004 menuSem
00006c74 g     F .text	00000064 OS_EventWaitListInit
00010a64 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00003cd8 g     F .text	00000004 __sinit_lock_acquire
0000cb50 g     F .text	00000214 OSTaskSuspend
000153f0 g     O .bss	00000004 counter2
000072f0 g     F .text	0000005c OS_TaskIdle
0001350e g     O .rwdata	00000002 OSTmrTblSize
0000a8f8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00060940 	call	6094 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	1089c904 	addi	r2,r2,10020
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1089c904 	addi	r2,r2,10020
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00061100 	call	6110 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82917 	ldw	r2,-24412(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82917 	ldw	r2,-24412(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6ad0c14 	ori	gp,gp,46128
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1094f714 	ori	r2,r2,21468

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18ca0914 	ori	r3,r3,10276

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0004eac0 	call	4eac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00050500 	call	5050 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
int counter1, counter2, counter3 = 0;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff904 	addi	sp,sp,-28
     284:	dfc00615 	stw	ra,24(sp)
     288:	df000515 	stw	fp,20(sp)
     28c:	df000504 	addi	fp,sp,20
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffd15 	stw	r2,-12(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffc15 	stw	r2,-16(fp)

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e7ef17 	ldw	r3,-24644(gp)
     2a8:	e0bffe04 	addi	r2,fp,-8
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00082700 	call	8270 <OSFlagPend>

		if (controller(ID) == 1) {
     2c4:	e13ffd17 	ldw	r4,-12(fp)
     2c8:	00003100 	call	310 <controller>
     2cc:	10800058 	cmpnei	r2,r2,1
     2d0:	1000051e 	bne	r2,zero,2e8 <controllers+0x68>
			hoogte = moveDown(ID, hoogte);
     2d4:	e13ffd17 	ldw	r4,-12(fp)
     2d8:	e17ffc17 	ldw	r5,-16(fp)
     2dc:	00005ec0 	call	5ec <moveDown>
     2e0:	e0bffc15 	stw	r2,-16(fp)
     2e4:	00000706 	br	304 <controllers+0x84>
		} else if (controller(ID) == 0) {
     2e8:	e13ffd17 	ldw	r4,-12(fp)
     2ec:	00003100 	call	310 <controller>
     2f0:	1000041e 	bne	r2,zero,304 <controllers+0x84>
			hoogte = moveUp(ID, hoogte);
     2f4:	e13ffd17 	ldw	r4,-12(fp)
     2f8:	e17ffc17 	ldw	r5,-16(fp)
     2fc:	00004d40 	call	4d4 <moveUp>
     300:	e0bffc15 	stw	r2,-16(fp)
		}

		OSTimeDly(1);
     304:	01000044 	movi	r4,1
     308:	000cefc0 	call	cefc <OSTimeDly>
	}
     30c:	003fe506 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

00000310 <controller>:

}

int controller(int ID) {
     310:	defff804 	addi	sp,sp,-32
     314:	dfc00715 	stw	ra,28(sp)
     318:	df000615 	stw	fp,24(sp)
     31c:	df000604 	addi	fp,sp,24
     320:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     324:	01000074 	movhi	r4,1
     328:	21048a04 	addi	r4,r4,4648
     32c:	000ef240 	call	ef24 <alt_up_parallel_port_open_dev>
     330:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     334:	01000074 	movhi	r4,1
     338:	21048f04 	addi	r4,r4,4668
     33c:	000ef240 	call	ef24 <alt_up_parallel_port_open_dev>
     340:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     344:	01000074 	movhi	r4,1
     348:	21049504 	addi	r4,r4,4692
     34c:	000ef240 	call	ef24 <alt_up_parallel_port_open_dev>
     350:	d0a7ec15 	stw	r2,-24656(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     354:	d0a7ec17 	ldw	r2,-24656(gp)
     358:	10800a17 	ldw	r2,40(r2)
     35c:	10800104 	addi	r2,r2,4
     360:	1007883a 	mov	r3,r2
     364:	00800044 	movi	r2,1
     368:	18800035 	stwio	r2,0(r3)
	int KEY_value, SW_value, gpio_values;
	INT8U err;



	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     36c:	e0bffb17 	ldw	r2,-20(fp)
     370:	10800a17 	ldw	r2,40(r2)
     374:	10800037 	ldwio	r2,0(r2)
     378:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     37c:	e0bffa17 	ldw	r2,-24(fp)
     380:	10800a17 	ldw	r2,40(r2)
     384:	10800037 	ldwio	r2,0(r2)
     388:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     38c:	d0a7ec17 	ldw	r2,-24656(gp)
     390:	10800a17 	ldw	r2,40(r2)
     394:	10800037 	ldwio	r2,0(r2)
     398:	e0bffe15 	stw	r2,-8(fp)

	if (ID == 2) {
     39c:	e0bfff17 	ldw	r2,-4(fp)
     3a0:	10800098 	cmpnei	r2,r2,2
     3a4:	1000131e 	bne	r2,zero,3f4 <controller+0xe4>
		if (KEY_value != 0) {
     3a8:	e0bffd17 	ldw	r2,-12(fp)
     3ac:	10000f26 	beq	r2,zero,3ec <controller+0xdc>
			if (KEY_value == 8) {
     3b0:	e0bffd17 	ldw	r2,-12(fp)
     3b4:	10800218 	cmpnei	r2,r2,8
     3b8:	1000021e 	bne	r2,zero,3c4 <controller+0xb4>
				return 1;
     3bc:	00800044 	movi	r2,1
     3c0:	00002c06 	br	474 <controller+0x164>
			}
			if (KEY_value == 4) {
     3c4:	e0bffd17 	ldw	r2,-12(fp)
     3c8:	10800118 	cmpnei	r2,r2,4
     3cc:	1000021e 	bne	r2,zero,3d8 <controller+0xc8>
				return 0;
     3d0:	0005883a 	mov	r2,zero
     3d4:	00002706 	br	474 <controller+0x164>
			}
			if (KEY_value == 2) {
     3d8:	e0bffd17 	ldw	r2,-12(fp)
     3dc:	10800098 	cmpnei	r2,r2,2
     3e0:	1000211e 	bne	r2,zero,468 <controller+0x158>
				return 2;
     3e4:	00800084 	movi	r2,2
     3e8:	00002206 	br	474 <controller+0x164>
			}
		} else {
			return 3;
     3ec:	008000c4 	movi	r2,3
     3f0:	00002006 	br	474 <controller+0x164>
		}

	} else if (ID == 1) {
     3f4:	e0bfff17 	ldw	r2,-4(fp)
     3f8:	10800058 	cmpnei	r2,r2,1
     3fc:	10000e1e 	bne	r2,zero,438 <controller+0x128>
		if (SW_value != 0) {
     400:	e0bffc17 	ldw	r2,-16(fp)
     404:	10000a26 	beq	r2,zero,430 <controller+0x120>
			if (SW_value == 1) {
     408:	e0bffc17 	ldw	r2,-16(fp)
     40c:	10800058 	cmpnei	r2,r2,1
     410:	1000021e 	bne	r2,zero,41c <controller+0x10c>
				return 0;
     414:	0005883a 	mov	r2,zero
     418:	00001606 	br	474 <controller+0x164>
			}else if(SW_value == 4){
     41c:	e0bffc17 	ldw	r2,-16(fp)
     420:	10800118 	cmpnei	r2,r2,4
     424:	1000101e 	bne	r2,zero,468 <controller+0x158>
				return 4;
     428:	00800104 	movi	r2,4
     42c:	00001106 	br	474 <controller+0x164>
			}
		} else {
			return 1;
     430:	00800044 	movi	r2,1
     434:	00000f06 	br	474 <controller+0x164>
		}
	} else if(ID == 3){
     438:	e0bfff17 	ldw	r2,-4(fp)
     43c:	108000d8 	cmpnei	r2,r2,3
     440:	1000091e 	bne	r2,zero,468 <controller+0x158>
		if(gpio_values != 0){
     444:	e0bffe17 	ldw	r2,-8(fp)
     448:	10000526 	beq	r2,zero,460 <controller+0x150>
			if(gpio_values == 0xffffffff){
     44c:	e0bffe17 	ldw	r2,-8(fp)
     450:	10bfffd8 	cmpnei	r2,r2,-1
     454:	1000041e 	bne	r2,zero,468 <controller+0x158>
				return 1;
     458:	00800044 	movi	r2,1
     45c:	00000506 	br	474 <controller+0x164>
			}
		}else{
			return 0;
     460:	0005883a 	mov	r2,zero
     464:	00000306 	br	474 <controller+0x164>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     468:	e0bffe17 	ldw	r2,-8(fp)
     46c:	10a0002c 	andhi	r2,r2,32768
     470:	e0bffe15 	stw	r2,-8(fp)

}
     474:	e037883a 	mov	sp,fp
     478:	dfc00117 	ldw	ra,4(sp)
     47c:	df000017 	ldw	fp,0(sp)
     480:	dec00204 	addi	sp,sp,8
     484:	f800283a 	ret

00000488 <checkID>:

int checkID(int ID) {
     488:	defffe04 	addi	sp,sp,-8
     48c:	df000115 	stw	fp,4(sp)
     490:	df000104 	addi	fp,sp,4
     494:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     498:	e0bfff17 	ldw	r2,-4(fp)
     49c:	10800058 	cmpnei	r2,r2,1
     4a0:	1000021e 	bne	r2,zero,4ac <checkID+0x24>
		return 15;
     4a4:	008003c4 	movi	r2,15
     4a8:	00000606 	br	4c4 <checkID+0x3c>
	} else if (ID == 2) {
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	10800098 	cmpnei	r2,r2,2
     4b4:	1000021e 	bne	r2,zero,4c0 <checkID+0x38>
		return 300;
     4b8:	00804b04 	movi	r2,300
     4bc:	00000106 	br	4c4 <checkID+0x3c>

	}
	return 0;
     4c0:	0005883a 	mov	r2,zero
}
     4c4:	e037883a 	mov	sp,fp
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00104 	addi	sp,sp,4
     4d0:	f800283a 	ret

000004d4 <moveUp>:

int moveUp(int ID, int current) {
     4d4:	defff904 	addi	sp,sp,-28
     4d8:	dfc00615 	stw	ra,24(sp)
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20
     4e4:	e13ffe15 	stw	r4,-8(fp)
     4e8:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     4ec:	e0bfff17 	ldw	r2,-4(fp)
     4f0:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     4f4:	e13ffe17 	ldw	r4,-8(fp)
     4f8:	00004880 	call	488 <checkID>
     4fc:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     500:	e0bffc17 	ldw	r2,-16(fp)
     504:	10800110 	cmplti	r2,r2,4
     508:	10001f1e 	bne	r2,zero,588 <moveUp+0xb4>
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	10802e48 	cmpgei	r2,r2,185
     514:	10001c1e 	bne	r2,zero,588 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     518:	e0bffd17 	ldw	r2,-12(fp)
     51c:	11800144 	addi	r6,r2,5
     520:	e0bffc17 	ldw	r2,-16(fp)
     524:	10c00044 	addi	r3,r2,1
     528:	d0a0000b 	ldhu	r2,-32768(gp)
     52c:	10bfffcc 	andi	r2,r2,65535
     530:	10a0001c 	xori	r2,r2,32768
     534:	10a00004 	addi	r2,r2,-32768
     538:	d8800015 	stw	r2,0(sp)
     53c:	e13ffd17 	ldw	r4,-12(fp)
     540:	e17ffc17 	ldw	r5,-16(fp)
     544:	180f883a 	mov	r7,r3
     548:	000139c0 	call	139c <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	11400c84 	addi	r5,r2,50
     554:	e0bffd17 	ldw	r2,-12(fp)
     558:	10c00144 	addi	r3,r2,5
     55c:	e0bffc17 	ldw	r2,-16(fp)
     560:	10800cc4 	addi	r2,r2,51
     564:	d8000015 	stw	zero,0(sp)
     568:	e13ffd17 	ldw	r4,-12(fp)
     56c:	180d883a 	mov	r6,r3
     570:	100f883a 	mov	r7,r2
     574:	000139c0 	call	139c <VGA_box>
		boven--;
     578:	e0bffc17 	ldw	r2,-16(fp)
     57c:	10bfffc4 	addi	r2,r2,-1
     580:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     584:	00001306 	br	5d4 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	10802e50 	cmplti	r2,r2,185
     590:	1000101e 	bne	r2,zero,5d4 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     594:	e0bffd17 	ldw	r2,-12(fp)
     598:	11800144 	addi	r6,r2,5
     59c:	e0bffc17 	ldw	r2,-16(fp)
     5a0:	10c00044 	addi	r3,r2,1
     5a4:	d0a0000b 	ldhu	r2,-32768(gp)
     5a8:	10bfffcc 	andi	r2,r2,65535
     5ac:	10a0001c 	xori	r2,r2,32768
     5b0:	10a00004 	addi	r2,r2,-32768
     5b4:	d8800015 	stw	r2,0(sp)
     5b8:	e13ffd17 	ldw	r4,-12(fp)
     5bc:	e17ffc17 	ldw	r5,-16(fp)
     5c0:	180f883a 	mov	r7,r3
     5c4:	000139c0 	call	139c <VGA_box>
		boven--;
     5c8:	e0bffc17 	ldw	r2,-16(fp)
     5cc:	10bfffc4 	addi	r2,r2,-1
     5d0:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     5d4:	e0bffc17 	ldw	r2,-16(fp)

}
     5d8:	e037883a 	mov	sp,fp
     5dc:	dfc00117 	ldw	ra,4(sp)
     5e0:	df000017 	ldw	fp,0(sp)
     5e4:	dec00204 	addi	sp,sp,8
     5e8:	f800283a 	ret

000005ec <moveDown>:
int moveDown(int ID, int current) {
     5ec:	defff904 	addi	sp,sp,-28
     5f0:	dfc00615 	stw	ra,24(sp)
     5f4:	df000515 	stw	fp,20(sp)
     5f8:	df000504 	addi	fp,sp,20
     5fc:	e13ffe15 	stw	r4,-8(fp)
     600:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     60c:	e13ffe17 	ldw	r4,-8(fp)
     610:	00004880 	call	488 <checkID>
     614:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     618:	e0bffc17 	ldw	r2,-16(fp)
     61c:	10802e48 	cmpgei	r2,r2,185
     620:	10001f1e 	bne	r2,zero,6a0 <moveDown+0xb4>
     624:	e0bffc17 	ldw	r2,-16(fp)
     628:	10800110 	cmplti	r2,r2,4
     62c:	10001c1e 	bne	r2,zero,6a0 <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	11400c84 	addi	r5,r2,50
     638:	e0bffd17 	ldw	r2,-12(fp)
     63c:	11800144 	addi	r6,r2,5
     640:	e0bffc17 	ldw	r2,-16(fp)
     644:	10c00cc4 	addi	r3,r2,51
     648:	d0a0000b 	ldhu	r2,-32768(gp)
     64c:	10bfffcc 	andi	r2,r2,65535
     650:	10a0001c 	xori	r2,r2,32768
     654:	10a00004 	addi	r2,r2,-32768
     658:	d8800015 	stw	r2,0(sp)
     65c:	e13ffd17 	ldw	r4,-12(fp)
     660:	180f883a 	mov	r7,r3
     664:	000139c0 	call	139c <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     668:	e0bffd17 	ldw	r2,-12(fp)
     66c:	10c00144 	addi	r3,r2,5
     670:	e0bffc17 	ldw	r2,-16(fp)
     674:	10800044 	addi	r2,r2,1
     678:	d8000015 	stw	zero,0(sp)
     67c:	e13ffd17 	ldw	r4,-12(fp)
     680:	e17ffc17 	ldw	r5,-16(fp)
     684:	180d883a 	mov	r6,r3
     688:	100f883a 	mov	r7,r2
     68c:	000139c0 	call	139c <VGA_box>
		boven++;
     690:	e0bffc17 	ldw	r2,-16(fp)
     694:	10800044 	addi	r2,r2,1
     698:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     69c:	00001406 	br	6f0 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     6a0:	e0bffc17 	ldw	r2,-16(fp)
     6a4:	10800108 	cmpgei	r2,r2,4
     6a8:	1000111e 	bne	r2,zero,6f0 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     6ac:	e0bffc17 	ldw	r2,-16(fp)
     6b0:	11400c84 	addi	r5,r2,50
     6b4:	e0bffd17 	ldw	r2,-12(fp)
     6b8:	11800144 	addi	r6,r2,5
     6bc:	e0bffc17 	ldw	r2,-16(fp)
     6c0:	10c00cc4 	addi	r3,r2,51
     6c4:	d0a0000b 	ldhu	r2,-32768(gp)
     6c8:	10bfffcc 	andi	r2,r2,65535
     6cc:	10a0001c 	xori	r2,r2,32768
     6d0:	10a00004 	addi	r2,r2,-32768
     6d4:	d8800015 	stw	r2,0(sp)
     6d8:	e13ffd17 	ldw	r4,-12(fp)
     6dc:	180f883a 	mov	r7,r3
     6e0:	000139c0 	call	139c <VGA_box>
		boven++;
     6e4:	e0bffc17 	ldw	r2,-16(fp)
     6e8:	10800044 	addi	r2,r2,1
     6ec:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     6f0:	e0bffc17 	ldw	r2,-16(fp)

}
     6f4:	e037883a 	mov	sp,fp
     6f8:	dfc00117 	ldw	ra,4(sp)
     6fc:	df000017 	ldw	fp,0(sp)
     700:	dec00204 	addi	sp,sp,8
     704:	f800283a 	ret

00000708 <Game>:

int score1, score2 = 0;
int first = 1;
int check = 1;

void Game(void* pdata){
     708:	defffa04 	addi	sp,sp,-24
     70c:	dfc00515 	stw	ra,20(sp)
     710:	df000415 	stw	fp,16(sp)
     714:	df000404 	addi	fp,sp,16
     718:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0; ALT_x2 = 165; ALT_y = 100; ALT_inc_x = 1; ALT_inc_y = 1;
     71c:	d027fc15 	stw	zero,-24592(gp)
     720:	00802944 	movi	r2,165
     724:	d0a7fe15 	stw	r2,-24584(gp)
     728:	00801904 	movi	r2,100
     72c:	d0a7f915 	stw	r2,-24604(gp)
     730:	00800044 	movi	r2,1
     734:	d0a7fd15 	stw	r2,-24588(gp)
     738:	00800044 	movi	r2,1
     73c:	d0a7fa15 	stw	r2,-24600(gp)

	pixel_buffer_x = 319; pixel_buffer_y = 230;
     740:	00804fc4 	movi	r2,319
     744:	d0a7f615 	stw	r2,-24616(gp)
     748:	00803984 	movi	r2,230
     74c:	d0a7f315 	stw	r2,-24628(gp)
	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;



	while(1){
		OSFlagPend(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     750:	d0e7ef17 	ldw	r3,-24644(gp)
     754:	e0bffe04 	addi	r2,fp,-8
     758:	d8800015 	stw	r2,0(sp)
     75c:	1809883a 	mov	r4,r3
     760:	01400384 	movi	r5,14
     764:	01800044 	movi	r6,1
     768:	000f883a 	mov	r7,zero
     76c:	00082700 	call	8270 <OSFlagPend>


		for(i = 0; i <= 9; i++){
     770:	e03ffd15 	stw	zero,-12(fp)
     774:	00000f06 	br	7b4 <Game+0xac>
			if(score1 == i){
     778:	d0e7f417 	ldw	r3,-24624(gp)
     77c:	e0bffd17 	ldw	r2,-12(fp)
     780:	1880031e 	bne	r3,r2,790 <Game+0x88>
				draw_number(i, 1);
     784:	e13ffd17 	ldw	r4,-12(fp)
     788:	01400044 	movi	r5,1
     78c:	00016000 	call	1600 <draw_number>
			}
			if(score2 == i){
     790:	d0e7f217 	ldw	r3,-24632(gp)
     794:	e0bffd17 	ldw	r2,-12(fp)
     798:	1880031e 	bne	r3,r2,7a8 <Game+0xa0>
				draw_number(i, 2);
     79c:	e13ffd17 	ldw	r4,-12(fp)
     7a0:	01400084 	movi	r5,2
     7a4:	00016000 	call	1600 <draw_number>

	while(1){
		OSFlagPend(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);


		for(i = 0; i <= 9; i++){
     7a8:	e0bffd17 	ldw	r2,-12(fp)
     7ac:	10800044 	addi	r2,r2,1
     7b0:	e0bffd15 	stw	r2,-12(fp)
     7b4:	e0bffd17 	ldw	r2,-12(fp)
     7b8:	10800290 	cmplti	r2,r2,10
     7bc:	103fee1e 	bne	r2,zero,778 <__alt_mem_Flash_flash_data+0xf4000778>
			}
			if(score2 == i){
				draw_number(i, 2);
			}
		}
		draw_middenlijn();
     7c0:	00014e00 	call	14e0 <draw_middenlijn>
		if( check == 1){
     7c4:	d0a00317 	ldw	r2,-32756(gp)
     7c8:	10800058 	cmpnei	r2,r2,1
     7cc:	1000181e 	bne	r2,zero,830 <Game+0x128>
			del_middenlijn();
     7d0:	00015540 	call	1554 <del_middenlijn>
			VGA_text(20,20, "Houdt de knop ingedrukt om te spelen");
     7d4:	01000504 	movi	r4,20
     7d8:	01400504 	movi	r5,20
     7dc:	01800074 	movhi	r6,1
     7e0:	31849a04 	addi	r6,r6,4712
     7e4:	00014500 	call	1450 <VGA_text>
			OSTimeDlyHMSM(0,1,0,0);
     7e8:	0009883a 	mov	r4,zero
     7ec:	01400044 	movi	r5,1
     7f0:	000d883a 	mov	r6,zero
     7f4:	000f883a 	mov	r7,zero
     7f8:	000d0440 	call	d044 <OSTimeDlyHMSM>
			VGA_text(20,20, "                                    ");
     7fc:	01000504 	movi	r4,20
     800:	01400504 	movi	r5,20
     804:	01800074 	movhi	r6,1
     808:	3184a404 	addi	r6,r6,4752
     80c:	00014500 	call	1450 <VGA_text>

			del_number(1);
     810:	01000044 	movi	r4,1
     814:	00015900 	call	1590 <del_number>
			del_number(2);
     818:	01000084 	movi	r4,2
     81c:	00015900 	call	1590 <del_number>

			score1= 0;
     820:	d027f415 	stw	zero,-24624(gp)
			score2= 0;
     824:	d027f215 	stw	zero,-24632(gp)

			i=0;
     828:	e03ffd15 	stw	zero,-12(fp)

			check = 0;
     82c:	d0200315 	stw	zero,-32756(gp)
		}

		if(controller(3) == 1){
     830:	010000c4 	movi	r4,3
     834:	00003100 	call	310 <controller>
     838:	10800058 	cmpnei	r2,r2,1
     83c:	10005b1e 	bne	r2,zero,9ac <Game+0x2a4>

			VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balZwart); // erase
     840:	d127fc17 	ldw	r4,-24592(gp)
     844:	d167f917 	ldw	r5,-24604(gp)
     848:	d0a7fc17 	ldw	r2,-24592(gp)
     84c:	11800144 	addi	r6,r2,5
     850:	d0a7f917 	ldw	r2,-24604(gp)
     854:	10c00144 	addi	r3,r2,5
     858:	d0a7f10b 	ldhu	r2,-24636(gp)
     85c:	10bfffcc 	andi	r2,r2,65535
     860:	10a0001c 	xori	r2,r2,32768
     864:	10a00004 	addi	r2,r2,-32768
     868:	d8800015 	stw	r2,0(sp)
     86c:	180f883a 	mov	r7,r3
     870:	000139c0 	call	139c <VGA_box>
			if(first == 1){
     874:	d0a00217 	ldw	r2,-32760(gp)
     878:	10800058 	cmpnei	r2,r2,1
     87c:	10000f1e 	bne	r2,zero,8bc <Game+0x1b4>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     880:	d0a7fc17 	ldw	r2,-24592(gp)
     884:	10c02804 	addi	r3,r2,160
     888:	d0a7fd17 	ldw	r2,-24588(gp)
     88c:	1885883a 	add	r2,r3,r2
     890:	d0a7fc15 	stw	r2,-24592(gp)
				ALT_x2 += ALT_inc_x;
     894:	d0e7fe17 	ldw	r3,-24584(gp)
     898:	d0a7fd17 	ldw	r2,-24588(gp)
     89c:	1885883a 	add	r2,r3,r2
     8a0:	d0a7fe15 	stw	r2,-24584(gp)
				ALT_y += ALT_inc_y;
     8a4:	d0e7f917 	ldw	r3,-24604(gp)
     8a8:	d0a7fa17 	ldw	r2,-24600(gp)
     8ac:	1885883a 	add	r2,r3,r2
     8b0:	d0a7f915 	stw	r2,-24604(gp)
				first = 0;
     8b4:	d0200215 	stw	zero,-32760(gp)
     8b8:	00000c06 	br	8ec <Game+0x1e4>
			}else{
				ALT_x1 += ALT_inc_x;
     8bc:	d0e7fc17 	ldw	r3,-24592(gp)
     8c0:	d0a7fd17 	ldw	r2,-24588(gp)
     8c4:	1885883a 	add	r2,r3,r2
     8c8:	d0a7fc15 	stw	r2,-24592(gp)
				ALT_x2 += ALT_inc_x;
     8cc:	d0e7fe17 	ldw	r3,-24584(gp)
     8d0:	d0a7fd17 	ldw	r2,-24588(gp)
     8d4:	1885883a 	add	r2,r3,r2
     8d8:	d0a7fe15 	stw	r2,-24584(gp)
				ALT_y += ALT_inc_y;
     8dc:	d0e7f917 	ldw	r3,-24604(gp)
     8e0:	d0a7fa17 	ldw	r2,-24600(gp)
     8e4:	1885883a 	add	r2,r3,r2
     8e8:	d0a7f915 	stw	r2,-24604(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balWit); // ball
     8ec:	d127fc17 	ldw	r4,-24592(gp)
     8f0:	d167f917 	ldw	r5,-24604(gp)
     8f4:	d0a7fc17 	ldw	r2,-24592(gp)
     8f8:	11800144 	addi	r6,r2,5
     8fc:	d0a7f917 	ldw	r2,-24604(gp)
     900:	10c00144 	addi	r3,r2,5
     904:	d0a0010b 	ldhu	r2,-32764(gp)
     908:	10bfffcc 	andi	r2,r2,65535
     90c:	10a0001c 	xori	r2,r2,32768
     910:	10a00004 	addi	r2,r2,-32768
     914:	d8800015 	stw	r2,0(sp)
     918:	180f883a 	mov	r7,r3
     91c:	000139c0 	call	139c <VGA_box>
			if ( (ALT_y == pixel_buffer_y) || (ALT_y == 4) ){
     920:	d0e7f917 	ldw	r3,-24604(gp)
     924:	d0a7f317 	ldw	r2,-24628(gp)
     928:	18800326 	beq	r3,r2,938 <Game+0x230>
     92c:	d0a7f917 	ldw	r2,-24604(gp)
     930:	10800118 	cmpnei	r2,r2,4
     934:	1000031e 	bne	r2,zero,944 <Game+0x23c>
				ALT_inc_y = -(ALT_inc_y);
     938:	d0a7fa17 	ldw	r2,-24600(gp)
     93c:	0085c83a 	sub	r2,zero,r2
     940:	d0a7fa15 	stw	r2,-24600(gp)
			}
			if ( (ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0) ){
     944:	d0e7fe17 	ldw	r3,-24584(gp)
     948:	d0a7f617 	ldw	r2,-24616(gp)
     94c:	18800226 	beq	r3,r2,958 <Game+0x250>
     950:	d0a7fc17 	ldw	r2,-24592(gp)
     954:	1000031e 	bne	r2,zero,964 <Game+0x25c>
				ALT_inc_x = -(ALT_inc_x);
     958:	d0a7fd17 	ldw	r2,-24588(gp)
     95c:	0085c83a 	sub	r2,zero,r2
     960:	d0a7fd15 	stw	r2,-24588(gp)
			}

			//links dood
			if(ALT_x1 == 0){
     964:	d0a7fc17 	ldw	r2,-24592(gp)
     968:	1000051e 	bne	r2,zero,980 <Game+0x278>
				score1++;
     96c:	d0a7f417 	ldw	r2,-24624(gp)
     970:	10800044 	addi	r2,r2,1
     974:	d0a7f415 	stw	r2,-24624(gp)
				del_number(1);
     978:	01000044 	movi	r4,1
     97c:	00015900 	call	1590 <del_number>
			}

			//rechts dood
			if(ALT_x2 == pixel_buffer_x){
     980:	d0e7fe17 	ldw	r3,-24584(gp)
     984:	d0a7f617 	ldw	r2,-24616(gp)
     988:	1880051e 	bne	r3,r2,9a0 <Game+0x298>
				score2++;
     98c:	d0a7f217 	ldw	r2,-24632(gp)
     990:	10800044 	addi	r2,r2,1
     994:	d0a7f215 	stw	r2,-24632(gp)
				del_number(2);
     998:	01000084 	movi	r4,2
     99c:	00015900 	call	1590 <del_number>


			VGA_text (ALT_x1, ALT_y, "HALLOOO");
			*/

			OSTimeDly(1);
     9a0:	01000044 	movi	r4,1
     9a4:	000cefc0 	call	cefc <OSTimeDly>
     9a8:	00000506 	br	9c0 <Game+0x2b8>
		}else if(controller(2) != 2){
     9ac:	01000084 	movi	r4,2
     9b0:	00003100 	call	310 <controller>
     9b4:	108000a0 	cmpeqi	r2,r2,2
     9b8:	1000011e 	bne	r2,zero,9c0 <Game+0x2b8>
			endGame();
     9bc:	00009c40 	call	9c4 <endGame>
		}
	}
     9c0:	003f6306 	br	750 <__alt_mem_Flash_flash_data+0xf4000750>

000009c4 <endGame>:
}

void endGame(){
     9c4:	defffc04 	addi	sp,sp,-16
     9c8:	dfc00315 	stw	ra,12(sp)
     9cc:	df000215 	stw	fp,8(sp)
     9d0:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end game\n");
     9d4:	01000074 	movhi	r4,1
     9d8:	2104ae04 	addi	r4,r4,4792
     9dc:	0001f3c0 	call	1f3c <puts>

	clearScreen();
     9e0:	0000f100 	call	f10 <clearScreen>

	OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     9e4:	d0a7ef17 	ldw	r2,-24644(gp)
     9e8:	1009883a 	mov	r4,r2
     9ec:	01400384 	movi	r5,14
     9f0:	01800044 	movi	r6,1
     9f4:	e1ffff04 	addi	r7,fp,-4
     9f8:	00088c80 	call	88c8 <OSFlagPost>

	VGA_text(35,25, "GAME OVER");
     9fc:	010008c4 	movi	r4,35
     a00:	01400644 	movi	r5,25
     a04:	01800074 	movhi	r6,1
     a08:	3184b104 	addi	r6,r6,4804
     a0c:	00014500 	call	1450 <VGA_text>
	OSTimeDlyHMSM(0,0,40,0);
     a10:	0009883a 	mov	r4,zero
     a14:	000b883a 	mov	r5,zero
     a18:	01800a04 	movi	r6,40
     a1c:	000f883a 	mov	r7,zero
     a20:	000d0440 	call	d044 <OSTimeDlyHMSM>
	VGA_text(35,25, "         ");
     a24:	010008c4 	movi	r4,35
     a28:	01400644 	movi	r5,25
     a2c:	01800074 	movhi	r6,1
     a30:	3184b404 	addi	r6,r6,4816
     a34:	00014500 	call	1450 <VGA_text>

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     a38:	d0a7ef17 	ldw	r2,-24644(gp)
     a3c:	1009883a 	mov	r4,r2
     a40:	01400444 	movi	r5,17
     a44:	000d883a 	mov	r6,zero
     a48:	e1ffff04 	addi	r7,fp,-4
     a4c:	00088c80 	call	88c8 <OSFlagPost>

	teken_menu();
     a50:	00010d00 	call	10d0 <teken_menu>
	VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balZwart); // erase
     a54:	d127fc17 	ldw	r4,-24592(gp)
     a58:	d167f917 	ldw	r5,-24604(gp)
     a5c:	d0a7fc17 	ldw	r2,-24592(gp)
     a60:	11800144 	addi	r6,r2,5
     a64:	d0a7f917 	ldw	r2,-24604(gp)
     a68:	10c00144 	addi	r3,r2,5
     a6c:	d0a7f10b 	ldhu	r2,-24636(gp)
     a70:	10bfffcc 	andi	r2,r2,65535
     a74:	10a0001c 	xori	r2,r2,32768
     a78:	10a00004 	addi	r2,r2,-32768
     a7c:	d8800015 	stw	r2,0(sp)
     a80:	180f883a 	mov	r7,r3
     a84:	000139c0 	call	139c <VGA_box>

	ALT_x1 = 0; ALT_x2 = 165; ALT_y = 100; ALT_inc_x = 1; ALT_inc_y = 1;
     a88:	d027fc15 	stw	zero,-24592(gp)
     a8c:	00802944 	movi	r2,165
     a90:	d0a7fe15 	stw	r2,-24584(gp)
     a94:	00801904 	movi	r2,100
     a98:	d0a7f915 	stw	r2,-24604(gp)
     a9c:	00800044 	movi	r2,1
     aa0:	d0a7fd15 	stw	r2,-24588(gp)
     aa4:	00800044 	movi	r2,1
     aa8:	d0a7fa15 	stw	r2,-24600(gp)



	check = 1;
     aac:	00800044 	movi	r2,1
     ab0:	d0a00315 	stw	r2,-32756(gp)
	first = 1;
     ab4:	00800044 	movi	r2,1
     ab8:	d0a00215 	stw	r2,-32760(gp)


}
     abc:	e037883a 	mov	sp,fp
     ac0:	dfc00117 	ldw	ra,4(sp)
     ac4:	df000017 	ldw	fp,0(sp)
     ac8:	dec00204 	addi	sp,sp,8
     acc:	f800283a 	ret

00000ad0 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
     ad0:	defffa04 	addi	sp,sp,-24
     ad4:	dfc00515 	stw	ra,20(sp)
     ad8:	df000415 	stw	fp,16(sp)
     adc:	df000404 	addi	fp,sp,16
     ae0:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     ae4:	e0bfff17 	ldw	r2,-4(fp)
     ae8:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
     aec:	00010d00 	call	10d0 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
     af0:	d0e7ef17 	ldw	r3,-24644(gp)
     af4:	e0bffe04 	addi	r2,fp,-8
     af8:	d8800015 	stw	r2,0(sp)
     afc:	1809883a 	mov	r4,r3
     b00:	01400044 	movi	r5,1
     b04:	000d883a 	mov	r6,zero
     b08:	000f883a 	mov	r7,zero
     b0c:	00082700 	call	8270 <OSFlagPend>

		if (controller(ID) == 1){
     b10:	e13ffd17 	ldw	r4,-12(fp)
     b14:	00003100 	call	310 <controller>
     b18:	10800058 	cmpnei	r2,r2,1
     b1c:	1000111e 	bne	r2,zero,b64 <menu+0x94>
			if(changed != 0){
     b20:	d0a80317 	ldw	r2,-24564(gp)
     b24:	10000926 	beq	r2,zero,b4c <menu+0x7c>
				gameModeMenu++;
     b28:	d0a00417 	ldw	r2,-32752(gp)
     b2c:	10800044 	addi	r2,r2,1
     b30:	d0a00415 	stw	r2,-32752(gp)
				eenkeer = 1;
     b34:	00800044 	movi	r2,1
     b38:	d0a00c15 	stw	r2,-32720(gp)
				changed=0;
     b3c:	d0280315 	stw	zero,-24564(gp)
				printf("heeft 1 gereturned \n");
     b40:	01000074 	movhi	r4,1
     b44:	2104b704 	addi	r4,r4,4828
     b48:	0001f3c0 	call	1f3c <puts>
			}
			if (gameModeMenu >= 5){
     b4c:	d0a00417 	ldw	r2,-32752(gp)
     b50:	10800150 	cmplti	r2,r2,5
     b54:	1000161e 	bne	r2,zero,bb0 <menu+0xe0>
				gameModeMenu = 1;
     b58:	00800044 	movi	r2,1
     b5c:	d0a00415 	stw	r2,-32752(gp)
     b60:	00001306 	br	bb0 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
     b64:	e13ffd17 	ldw	r4,-12(fp)
     b68:	00003100 	call	310 <controller>
     b6c:	1000101e 	bne	r2,zero,bb0 <menu+0xe0>
			if(changed !=0){
     b70:	d0a80317 	ldw	r2,-24564(gp)
     b74:	10000a26 	beq	r2,zero,ba0 <menu+0xd0>
				gameModeMenu--;
     b78:	d0a00417 	ldw	r2,-32752(gp)
     b7c:	10bfffc4 	addi	r2,r2,-1
     b80:	d0a00415 	stw	r2,-32752(gp)
				last=0;
     b84:	d0280215 	stw	zero,-24568(gp)
				changed=0;
     b88:	d0280315 	stw	zero,-24564(gp)
				eenkeer = 1;
     b8c:	00800044 	movi	r2,1
     b90:	d0a00c15 	stw	r2,-32720(gp)
				printf("heeft 0 gereturned \n");
     b94:	01000074 	movhi	r4,1
     b98:	2104bc04 	addi	r4,r4,4848
     b9c:	0001f3c0 	call	1f3c <puts>
			}
			if (gameModeMenu <= 0){
     ba0:	d0a00417 	ldw	r2,-32752(gp)
     ba4:	00800216 	blt	zero,r2,bb0 <menu+0xe0>
				gameModeMenu = 4;
     ba8:	00800104 	movi	r2,4
     bac:	d0a00415 	stw	r2,-32752(gp)
			}
		}
		OSTimeDly(10);
     bb0:	01000284 	movi	r4,10
     bb4:	000cefc0 	call	cefc <OSTimeDly>
	}
     bb8:	003fcd06 	br	af0 <__alt_mem_Flash_flash_data+0xf4000af0>

00000bbc <selecteerMenu>:

}

void selecteerMenu(void *pdata){
     bbc:	defffa04 	addi	sp,sp,-24
     bc0:	dfc00515 	stw	ra,20(sp)
     bc4:	df000415 	stw	fp,16(sp)
     bc8:	df000404 	addi	fp,sp,16
     bcc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
     bd0:	e0bfff17 	ldw	r2,-4(fp)
     bd4:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
     bd8:	d0e7ef17 	ldw	r3,-24644(gp)
     bdc:	e0bffe04 	addi	r2,fp,-8
     be0:	d8800015 	stw	r2,0(sp)
     be4:	1809883a 	mov	r4,r3
     be8:	01400404 	movi	r5,16
     bec:	000d883a 	mov	r6,zero
     bf0:	000f883a 	mov	r7,zero
     bf4:	00082700 	call	8270 <OSFlagPend>

		if (gameModeMenu == 1){
     bf8:	d0a00417 	ldw	r2,-32752(gp)
     bfc:	10800058 	cmpnei	r2,r2,1
     c00:	1000261e 	bne	r2,zero,c9c <selecteerMenu+0xe0>
			if(eenkeer == 1){
     c04:	d0a00c17 	ldw	r2,-32720(gp)
     c08:	10800058 	cmpnei	r2,r2,1
     c0c:	1000bd1e 	bne	r2,zero,f04 <selecteerMenu+0x348>
				clearScreen();
     c10:	0000f100 	call	f10 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
     c14:	d0a00517 	ldw	r2,-32748(gp)
     c18:	1085883a 	add	r2,r2,r2
     c1c:	1085883a 	add	r2,r2,r2
     c20:	1009883a 	mov	r4,r2
     c24:	d0a00717 	ldw	r2,-32740(gp)
     c28:	1085883a 	add	r2,r2,r2
     c2c:	1085883a 	add	r2,r2,r2
     c30:	100b883a 	mov	r5,r2
     c34:	d0a00617 	ldw	r2,-32744(gp)
     c38:	1085883a 	add	r2,r2,r2
     c3c:	1085883a 	add	r2,r2,r2
     c40:	100d883a 	mov	r6,r2
     c44:	d0a00817 	ldw	r2,-32736(gp)
     c48:	1085883a 	add	r2,r2,r2
     c4c:	1085883a 	add	r2,r2,r2
     c50:	1007883a 	mov	r3,r2
     c54:	d0a00b8b 	ldhu	r2,-32722(gp)
     c58:	10bfffcc 	andi	r2,r2,65535
     c5c:	10a0001c 	xori	r2,r2,32768
     c60:	10a00004 	addi	r2,r2,-32768
     c64:	d8800015 	stw	r2,0(sp)
     c68:	180f883a 	mov	r7,r3
     c6c:	000139c0 	call	139c <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
     c70:	d0e00917 	ldw	r3,-32732(gp)
     c74:	d0a00a17 	ldw	r2,-32728(gp)
     c78:	1809883a 	mov	r4,r3
     c7c:	100b883a 	mov	r5,r2
     c80:	01800074 	movhi	r6,1
     c84:	3184c104 	addi	r6,r6,4868
     c88:	00014500 	call	1450 <VGA_text>
				eenkeer = 0;
     c8c:	d0200c15 	stw	zero,-32720(gp)
				changed = 1;
     c90:	00800044 	movi	r2,1
     c94:	d0a80315 	stw	r2,-24564(gp)
     c98:	00009a06 	br	f04 <selecteerMenu+0x348>
			}
		} else if (gameModeMenu == 2){
     c9c:	d0a00417 	ldw	r2,-32752(gp)
     ca0:	10800098 	cmpnei	r2,r2,2
     ca4:	1000401e 	bne	r2,zero,da8 <selecteerMenu+0x1ec>
			if(eenkeer == 1){
     ca8:	d0a00c17 	ldw	r2,-32720(gp)
     cac:	10800058 	cmpnei	r2,r2,1
     cb0:	1000251e 	bne	r2,zero,d48 <selecteerMenu+0x18c>
				clearScreen();
     cb4:	0000f100 	call	f10 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
     cb8:	d0a00517 	ldw	r2,-32748(gp)
     cbc:	1085883a 	add	r2,r2,r2
     cc0:	1085883a 	add	r2,r2,r2
     cc4:	1009883a 	mov	r4,r2
     cc8:	d0a00717 	ldw	r2,-32740(gp)
     ccc:	10800104 	addi	r2,r2,4
     cd0:	1085883a 	add	r2,r2,r2
     cd4:	1085883a 	add	r2,r2,r2
     cd8:	100b883a 	mov	r5,r2
     cdc:	d0a00617 	ldw	r2,-32744(gp)
     ce0:	1085883a 	add	r2,r2,r2
     ce4:	1085883a 	add	r2,r2,r2
     ce8:	100d883a 	mov	r6,r2
     cec:	d0a00817 	ldw	r2,-32736(gp)
     cf0:	10800104 	addi	r2,r2,4
     cf4:	1085883a 	add	r2,r2,r2
     cf8:	1085883a 	add	r2,r2,r2
     cfc:	1007883a 	mov	r3,r2
     d00:	d0a00b8b 	ldhu	r2,-32722(gp)
     d04:	10bfffcc 	andi	r2,r2,65535
     d08:	10a0001c 	xori	r2,r2,32768
     d0c:	10a00004 	addi	r2,r2,-32768
     d10:	d8800015 	stw	r2,0(sp)
     d14:	180f883a 	mov	r7,r3
     d18:	000139c0 	call	139c <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
     d1c:	d0e00917 	ldw	r3,-32732(gp)
     d20:	d0a00a17 	ldw	r2,-32728(gp)
     d24:	10800104 	addi	r2,r2,4
     d28:	1809883a 	mov	r4,r3
     d2c:	100b883a 	mov	r5,r2
     d30:	01800074 	movhi	r6,1
     d34:	3184c504 	addi	r6,r6,4884
     d38:	00014500 	call	1450 <VGA_text>
				eenkeer = 0;
     d3c:	d0200c15 	stw	zero,-32720(gp)
				changed = 1;
     d40:	00800044 	movi	r2,1
     d44:	d0a80315 	stw	r2,-24564(gp)
			}
			if(controller(ID) == 1){
     d48:	e13ffd17 	ldw	r4,-12(fp)
     d4c:	00003100 	call	310 <controller>
     d50:	10800058 	cmpnei	r2,r2,1
     d54:	10006b1e 	bne	r2,zero,f04 <selecteerMenu+0x348>
				clearScreen();
     d58:	0000f100 	call	f10 <clearScreen>
				clearText();
     d5c:	0000f500 	call	f50 <clearText>
				printf("start game\n");
     d60:	01000074 	movhi	r4,1
     d64:	2104c804 	addi	r4,r4,4896
     d68:	0001f3c0 	call	1f3c <puts>
				OSFlagPost(Flags, Game_Flag + C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
     d6c:	d0e7ef17 	ldw	r3,-24644(gp)
     d70:	e0bffe04 	addi	r2,fp,-8
     d74:	1809883a 	mov	r4,r3
     d78:	01400384 	movi	r5,14
     d7c:	000d883a 	mov	r6,zero
     d80:	100f883a 	mov	r7,r2
     d84:	00088c80 	call	88c8 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
     d88:	d0e7ef17 	ldw	r3,-24644(gp)
     d8c:	e0bffe04 	addi	r2,fp,-8
     d90:	1809883a 	mov	r4,r3
     d94:	01400444 	movi	r5,17
     d98:	01800044 	movi	r6,1
     d9c:	100f883a 	mov	r7,r2
     da0:	00088c80 	call	88c8 <OSFlagPost>
     da4:	00005706 	br	f04 <selecteerMenu+0x348>
			}

		} else if (gameModeMenu == 3){
     da8:	d0a00417 	ldw	r2,-32752(gp)
     dac:	108000d8 	cmpnei	r2,r2,3
     db0:	1000291e 	bne	r2,zero,e58 <selecteerMenu+0x29c>
			if(eenkeer == 1){
     db4:	d0a00c17 	ldw	r2,-32720(gp)
     db8:	10800058 	cmpnei	r2,r2,1
     dbc:	1000511e 	bne	r2,zero,f04 <selecteerMenu+0x348>
				clearScreen();
     dc0:	0000f100 	call	f10 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
     dc4:	d0a00517 	ldw	r2,-32748(gp)
     dc8:	1085883a 	add	r2,r2,r2
     dcc:	1085883a 	add	r2,r2,r2
     dd0:	1009883a 	mov	r4,r2
     dd4:	d0a00717 	ldw	r2,-32740(gp)
     dd8:	10800204 	addi	r2,r2,8
     ddc:	1085883a 	add	r2,r2,r2
     de0:	1085883a 	add	r2,r2,r2
     de4:	100b883a 	mov	r5,r2
     de8:	d0a00617 	ldw	r2,-32744(gp)
     dec:	1085883a 	add	r2,r2,r2
     df0:	1085883a 	add	r2,r2,r2
     df4:	100d883a 	mov	r6,r2
     df8:	d0a00817 	ldw	r2,-32736(gp)
     dfc:	10800204 	addi	r2,r2,8
     e00:	1085883a 	add	r2,r2,r2
     e04:	1085883a 	add	r2,r2,r2
     e08:	1007883a 	mov	r3,r2
     e0c:	d0a00b8b 	ldhu	r2,-32722(gp)
     e10:	10bfffcc 	andi	r2,r2,65535
     e14:	10a0001c 	xori	r2,r2,32768
     e18:	10a00004 	addi	r2,r2,-32768
     e1c:	d8800015 	stw	r2,0(sp)
     e20:	180f883a 	mov	r7,r3
     e24:	000139c0 	call	139c <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
     e28:	d0e00917 	ldw	r3,-32732(gp)
     e2c:	d0a00a17 	ldw	r2,-32728(gp)
     e30:	10800204 	addi	r2,r2,8
     e34:	1809883a 	mov	r4,r3
     e38:	100b883a 	mov	r5,r2
     e3c:	01800074 	movhi	r6,1
     e40:	3184cb04 	addi	r6,r6,4908
     e44:	00014500 	call	1450 <VGA_text>
				eenkeer = 0;
     e48:	d0200c15 	stw	zero,-32720(gp)
				changed = 1;
     e4c:	00800044 	movi	r2,1
     e50:	d0a80315 	stw	r2,-24564(gp)
     e54:	00002b06 	br	f04 <selecteerMenu+0x348>

			}
		} else if (gameModeMenu == 4){
     e58:	d0a00417 	ldw	r2,-32752(gp)
     e5c:	10800118 	cmpnei	r2,r2,4
     e60:	1000281e 	bne	r2,zero,f04 <selecteerMenu+0x348>
			if(eenkeer == 1){
     e64:	d0a00c17 	ldw	r2,-32720(gp)
     e68:	10800058 	cmpnei	r2,r2,1
     e6c:	1000251e 	bne	r2,zero,f04 <selecteerMenu+0x348>
				clearScreen();
     e70:	0000f100 	call	f10 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
     e74:	d0a00517 	ldw	r2,-32748(gp)
     e78:	1085883a 	add	r2,r2,r2
     e7c:	1085883a 	add	r2,r2,r2
     e80:	1009883a 	mov	r4,r2
     e84:	d0a00717 	ldw	r2,-32740(gp)
     e88:	10800304 	addi	r2,r2,12
     e8c:	1085883a 	add	r2,r2,r2
     e90:	1085883a 	add	r2,r2,r2
     e94:	100b883a 	mov	r5,r2
     e98:	d0a00617 	ldw	r2,-32744(gp)
     e9c:	1085883a 	add	r2,r2,r2
     ea0:	1085883a 	add	r2,r2,r2
     ea4:	100d883a 	mov	r6,r2
     ea8:	d0a00817 	ldw	r2,-32736(gp)
     eac:	10800304 	addi	r2,r2,12
     eb0:	1085883a 	add	r2,r2,r2
     eb4:	1085883a 	add	r2,r2,r2
     eb8:	1007883a 	mov	r3,r2
     ebc:	d0a00b8b 	ldhu	r2,-32722(gp)
     ec0:	10bfffcc 	andi	r2,r2,65535
     ec4:	10a0001c 	xori	r2,r2,32768
     ec8:	10a00004 	addi	r2,r2,-32768
     ecc:	d8800015 	stw	r2,0(sp)
     ed0:	180f883a 	mov	r7,r3
     ed4:	000139c0 	call	139c <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
     ed8:	d0e00917 	ldw	r3,-32732(gp)
     edc:	d0a00a17 	ldw	r2,-32728(gp)
     ee0:	10800304 	addi	r2,r2,12
     ee4:	1809883a 	mov	r4,r3
     ee8:	100b883a 	mov	r5,r2
     eec:	01800074 	movhi	r6,1
     ef0:	3184ce04 	addi	r6,r6,4920
     ef4:	00014500 	call	1450 <VGA_text>
				eenkeer = 0;
     ef8:	d0200c15 	stw	zero,-32720(gp)
				changed = 1;
     efc:	00800044 	movi	r2,1
     f00:	d0a80315 	stw	r2,-24564(gp)

			}
		}

		OSTimeDly(10);
     f04:	01000284 	movi	r4,10
     f08:	000cefc0 	call	cefc <OSTimeDly>
	}
     f0c:	003f3206 	br	bd8 <__alt_mem_Flash_flash_data+0xf4000bd8>

00000f10 <clearScreen>:
}

void clearScreen(){
     f10:	defffd04 	addi	sp,sp,-12
     f14:	dfc00215 	stw	ra,8(sp)
     f18:	df000115 	stw	fp,4(sp)
     f1c:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
     f20:	d8000015 	stw	zero,0(sp)
     f24:	01000644 	movi	r4,25
     f28:	01401184 	movi	r5,70
     f2c:	01803204 	movi	r6,200
     f30:	01c021c4 	movi	r7,135
     f34:	000139c0 	call	139c <VGA_box>
	del_middenlijn();
     f38:	00015540 	call	1554 <del_middenlijn>
}
     f3c:	e037883a 	mov	sp,fp
     f40:	dfc00117 	ldw	ra,4(sp)
     f44:	df000017 	ldw	fp,0(sp)
     f48:	dec00204 	addi	sp,sp,8
     f4c:	f800283a 	ret

00000f50 <clearText>:

void clearText(){
     f50:	defffe04 	addi	sp,sp,-8
     f54:	dfc00115 	stw	ra,4(sp)
     f58:	df000015 	stw	fp,0(sp)
     f5c:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
     f60:	d0e00917 	ldw	r3,-32732(gp)
     f64:	d0a00a17 	ldw	r2,-32728(gp)
     f68:	1809883a 	mov	r4,r3
     f6c:	100b883a 	mov	r5,r2
     f70:	01800074 	movhi	r6,1
     f74:	3184d104 	addi	r6,r6,4932
     f78:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
     f7c:	d0e00917 	ldw	r3,-32732(gp)
     f80:	d0a00a17 	ldw	r2,-32728(gp)
     f84:	10800104 	addi	r2,r2,4
     f88:	1809883a 	mov	r4,r3
     f8c:	100b883a 	mov	r5,r2
     f90:	01800074 	movhi	r6,1
     f94:	3184d504 	addi	r6,r6,4948
     f98:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
     f9c:	d0e00917 	ldw	r3,-32732(gp)
     fa0:	d0a00a17 	ldw	r2,-32728(gp)
     fa4:	10800204 	addi	r2,r2,8
     fa8:	1809883a 	mov	r4,r3
     fac:	100b883a 	mov	r5,r2
     fb0:	01800074 	movhi	r6,1
     fb4:	3184d804 	addi	r6,r6,4960
     fb8:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
     fbc:	d0e00917 	ldw	r3,-32732(gp)
     fc0:	d0a00a17 	ldw	r2,-32728(gp)
     fc4:	10800304 	addi	r2,r2,12
     fc8:	1809883a 	mov	r4,r3
     fcc:	100b883a 	mov	r5,r2
     fd0:	01800074 	movhi	r6,1
     fd4:	3184db04 	addi	r6,r6,4972
     fd8:	00014500 	call	1450 <VGA_text>
}
     fdc:	e037883a 	mov	sp,fp
     fe0:	dfc00117 	ldw	ra,4(sp)
     fe4:	df000017 	ldw	fp,0(sp)
     fe8:	dec00204 	addi	sp,sp,8
     fec:	f800283a 	ret

00000ff0 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
     ff0:	defff804 	addi	sp,sp,-32
     ff4:	dfc00715 	stw	ra,28(sp)
     ff8:	df000615 	stw	fp,24(sp)
     ffc:	df000604 	addi	fp,sp,24
    1000:	e13ffb15 	stw	r4,-20(fp)
    1004:	e17ffc15 	stw	r5,-16(fp)
    1008:	e1bffd15 	stw	r6,-12(fp)
    100c:	e1fffe15 	stw	r7,-8(fp)
    1010:	e0800217 	ldw	r2,8(fp)
    1014:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    1018:	e0bfff0f 	ldh	r2,-4(fp)
    101c:	d8800015 	stw	r2,0(sp)
    1020:	e13ffb17 	ldw	r4,-20(fp)
    1024:	e17ffc17 	ldw	r5,-16(fp)
    1028:	e1bffd17 	ldw	r6,-12(fp)
    102c:	e1fffe17 	ldw	r7,-8(fp)
    1030:	000139c0 	call	139c <VGA_box>
}
    1034:	e037883a 	mov	sp,fp
    1038:	dfc00117 	ldw	ra,4(sp)
    103c:	df000017 	ldw	fp,0(sp)
    1040:	dec00204 	addi	sp,sp,8
    1044:	f800283a 	ret

00001048 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    1048:	defff804 	addi	sp,sp,-32
    104c:	dfc00715 	stw	ra,28(sp)
    1050:	df000615 	stw	fp,24(sp)
    1054:	df000604 	addi	fp,sp,24
    1058:	e13ffb15 	stw	r4,-20(fp)
    105c:	e17ffc15 	stw	r5,-16(fp)
    1060:	e1bffd15 	stw	r6,-12(fp)
    1064:	e1fffe15 	stw	r7,-8(fp)
    1068:	e0800217 	ldw	r2,8(fp)
    106c:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    1070:	e0bffb17 	ldw	r2,-20(fp)
    1074:	10800044 	addi	r2,r2,1
    1078:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    107c:	e0bffc17 	ldw	r2,-16(fp)
    1080:	10800044 	addi	r2,r2,1
    1084:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    1088:	e0bffd17 	ldw	r2,-12(fp)
    108c:	10bfffc4 	addi	r2,r2,-1
    1090:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    1094:	e0bffe17 	ldw	r2,-8(fp)
    1098:	10bfffc4 	addi	r2,r2,-1
    109c:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    10a0:	e0bfff0f 	ldh	r2,-4(fp)
    10a4:	d8800015 	stw	r2,0(sp)
    10a8:	e13ffb17 	ldw	r4,-20(fp)
    10ac:	e17ffc17 	ldw	r5,-16(fp)
    10b0:	e1bffd17 	ldw	r6,-12(fp)
    10b4:	e1fffe17 	ldw	r7,-8(fp)
    10b8:	000139c0 	call	139c <VGA_box>
}
    10bc:	e037883a 	mov	sp,fp
    10c0:	dfc00117 	ldw	ra,4(sp)
    10c4:	df000017 	ldw	fp,0(sp)
    10c8:	dec00204 	addi	sp,sp,8
    10cc:	f800283a 	ret

000010d0 <teken_menu>:

void teken_menu(){
    10d0:	defffd04 	addi	sp,sp,-12
    10d4:	dfc00215 	stw	ra,8(sp)
    10d8:	df000115 	stw	fp,4(sp)
    10dc:	df000104 	addi	fp,sp,4
	VGA_text (xMenu, yMenu, "Singleplayer");
    10e0:	d0e00917 	ldw	r3,-32732(gp)
    10e4:	d0a00a17 	ldw	r2,-32728(gp)
    10e8:	1809883a 	mov	r4,r3
    10ec:	100b883a 	mov	r5,r2
    10f0:	01800074 	movhi	r6,1
    10f4:	3184c104 	addi	r6,r6,4868
    10f8:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    10fc:	d0e00917 	ldw	r3,-32732(gp)
    1100:	d0a00a17 	ldw	r2,-32728(gp)
    1104:	10800104 	addi	r2,r2,4
    1108:	1809883a 	mov	r4,r3
    110c:	100b883a 	mov	r5,r2
    1110:	01800074 	movhi	r6,1
    1114:	3184c504 	addi	r6,r6,4884
    1118:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    111c:	d0e00917 	ldw	r3,-32732(gp)
    1120:	d0a00a17 	ldw	r2,-32728(gp)
    1124:	10800204 	addi	r2,r2,8
    1128:	1809883a 	mov	r4,r3
    112c:	100b883a 	mov	r5,r2
    1130:	01800074 	movhi	r6,1
    1134:	3184cb04 	addi	r6,r6,4908
    1138:	00014500 	call	1450 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    113c:	d0e00917 	ldw	r3,-32732(gp)
    1140:	d0a00a17 	ldw	r2,-32728(gp)
    1144:	10800304 	addi	r2,r2,12
    1148:	1809883a 	mov	r4,r3
    114c:	100b883a 	mov	r5,r2
    1150:	01800074 	movhi	r6,1
    1154:	3184ce04 	addi	r6,r6,4920
    1158:	00014500 	call	1450 <VGA_text>
	VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    115c:	d0a00517 	ldw	r2,-32748(gp)
    1160:	1085883a 	add	r2,r2,r2
    1164:	1085883a 	add	r2,r2,r2
    1168:	1009883a 	mov	r4,r2
    116c:	d0a00717 	ldw	r2,-32740(gp)
    1170:	10800104 	addi	r2,r2,4
    1174:	1085883a 	add	r2,r2,r2
    1178:	1085883a 	add	r2,r2,r2
    117c:	100b883a 	mov	r5,r2
    1180:	d0a00617 	ldw	r2,-32744(gp)
    1184:	1085883a 	add	r2,r2,r2
    1188:	1085883a 	add	r2,r2,r2
    118c:	100d883a 	mov	r6,r2
    1190:	d0a00817 	ldw	r2,-32736(gp)
    1194:	10800104 	addi	r2,r2,4
    1198:	1085883a 	add	r2,r2,r2
    119c:	1085883a 	add	r2,r2,r2
    11a0:	1007883a 	mov	r3,r2
    11a4:	d0a00b8b 	ldhu	r2,-32722(gp)
    11a8:	10bfffcc 	andi	r2,r2,65535
    11ac:	10a0001c 	xori	r2,r2,32768
    11b0:	10a00004 	addi	r2,r2,-32768
    11b4:	d8800015 	stw	r2,0(sp)
    11b8:	180f883a 	mov	r7,r3
    11bc:	000139c0 	call	139c <VGA_box>

}
    11c0:	e037883a 	mov	sp,fp
    11c4:	dfc00117 	ldw	ra,4(sp)
    11c8:	df000017 	ldw	fp,0(sp)
    11cc:	dec00204 	addi	sp,sp,8
    11d0:	f800283a 	ret

000011d4 <main>:
void selecteerMenu(void *pdata);
void Game(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
    11d4:	defffb04 	addi	sp,sp,-20
    11d8:	dfc00415 	stw	ra,16(sp)
    11dc:	df000315 	stw	fp,12(sp)
    11e0:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    11e4:	00060400 	call	6040 <OSInit>
	int counter = 0x50000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    11e8:	00800174 	movhi	r2,5
    11ec:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    11f0:	d0a00e17 	ldw	r2,-32712(gp)
    11f4:	10800204 	addi	r2,r2,8
    11f8:	e0fffe17 	ldw	r3,-8(fp)
    11fc:	18ffffcc 	andi	r3,r3,65535
    1200:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    1204:	d0a00e17 	ldw	r2,-32712(gp)
    1208:	10800304 	addi	r2,r2,12
    120c:	e0fffe17 	ldw	r3,-8(fp)
    1210:	1806d43a 	srli	r3,r3,16
    1214:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    1218:	d0a00e17 	ldw	r2,-32712(gp)
    121c:	10800104 	addi	r2,r2,4
    1220:	00c001c4 	movi	r3,7
    1224:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(Game_Flag + C1_Flag + C2_Flag, &err);
    1228:	e0bfff04 	addi	r2,fp,-4
    122c:	01000384 	movi	r4,14
    1230:	100b883a 	mov	r5,r2
    1234:	0007c580 	call	7c58 <OSFlagCreate>
    1238:	d0a7ef15 	stw	r2,-24644(gp)

	gameSem = OSSemCreate(0);
    123c:	0009883a 	mov	r4,zero
    1240:	000abb00 	call	abb0 <OSSemCreate>
    1244:	d0a7fb15 	stw	r2,-24596(gp)
	controllerSem = OSSemCreate(0);
    1248:	0009883a 	mov	r4,zero
    124c:	000abb00 	call	abb0 <OSSemCreate>
    1250:	d0a7ed15 	stw	r2,-24652(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
    1254:	d8000015 	stw	zero,0(sp)
    1258:	0009883a 	mov	r4,zero
    125c:	000b883a 	mov	r5,zero
    1260:	01804fc4 	movi	r6,319
    1264:	01c03bc4 	movi	r7,239
    1268:	000139c0 	call	139c <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    126c:	00803fc4 	movi	r2,255
    1270:	d8800015 	stw	r2,0(sp)
    1274:	010003c4 	movi	r4,15
    1278:	01400c84 	movi	r5,50
    127c:	01800504 	movi	r6,20
    1280:	01c01904 	movi	r7,100
    1284:	000139c0 	call	139c <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    1288:	00803fc4 	movi	r2,255
    128c:	d8800015 	stw	r2,0(sp)
    1290:	01004b04 	movi	r4,300
    1294:	01400c84 	movi	r5,50
    1298:	01804c44 	movi	r6,305
    129c:	01c01904 	movi	r7,100
    12a0:	000139c0 	call	139c <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    12a4:	d0a00f8b 	ldhu	r2,-32706(gp)
    12a8:	10bfffcc 	andi	r2,r2,65535
    12ac:	10a0001c 	xori	r2,r2,32768
    12b0:	10a00004 	addi	r2,r2,-32768
    12b4:	d8800015 	stw	r2,0(sp)
    12b8:	0009883a 	mov	r4,zero
    12bc:	000b883a 	mov	r5,zero
    12c0:	01804fc4 	movi	r6,319
    12c4:	01c000c4 	movi	r7,3
    12c8:	000139c0 	call	139c <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    12cc:	d0a00f8b 	ldhu	r2,-32706(gp)
    12d0:	10bfffcc 	andi	r2,r2,65535
    12d4:	10a0001c 	xori	r2,r2,32768
    12d8:	10a00004 	addi	r2,r2,-32768
    12dc:	d8800015 	stw	r2,0(sp)
    12e0:	0009883a 	mov	r4,zero
    12e4:	01403b04 	movi	r5,236
    12e8:	01804fc4 	movi	r6,319
    12ec:	01c03bc4 	movi	r7,239
    12f0:	000139c0 	call	139c <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    12f4:	01000034 	movhi	r4,0
    12f8:	2100a004 	addi	r4,r4,640
    12fc:	01400044 	movi	r5,1
    1300:	018000b4 	movhi	r6,2
    1304:	31a53f04 	addi	r6,r6,-27396
    1308:	01c001c4 	movi	r7,7
    130c:	000bb480 	call	bb48 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    1310:	01000034 	movhi	r4,0
    1314:	2100a004 	addi	r4,r4,640
    1318:	01400084 	movi	r5,2
    131c:	018000b4 	movhi	r6,2
    1320:	31ad3f04 	addi	r6,r6,-19204
    1324:	01c00204 	movi	r7,8
    1328:	000bb480 	call	bb48 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    132c:	01000034 	movhi	r4,0
    1330:	2101c204 	addi	r4,r4,1800
    1334:	000b883a 	mov	r5,zero
    1338:	018000b4 	movhi	r6,2
    133c:	31b53f04 	addi	r6,r6,-11012
    1340:	01c00184 	movi	r7,6
    1344:	000bb480 	call	bb48 <OSTaskCreate>

	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    1348:	01000034 	movhi	r4,0
    134c:	2102b404 	addi	r4,r4,2768
    1350:	01400084 	movi	r5,2
    1354:	01800074 	movhi	r6,1
    1358:	319d3f04 	addi	r6,r6,29948
    135c:	01c00244 	movi	r7,9
    1360:	000bb480 	call	bb48 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    1364:	01000034 	movhi	r4,0
    1368:	2102ef04 	addi	r4,r4,3004
    136c:	014000c4 	movi	r5,3
    1370:	018000b4 	movhi	r6,2
    1374:	31bd3f04 	addi	r6,r6,-2820
    1378:	01c00284 	movi	r7,10
    137c:	000bb480 	call	bb48 <OSTaskCreate>
	OSStart();
    1380:	00063640 	call	6364 <OSStart>
	return 0;
    1384:	0005883a 	mov	r2,zero
}
    1388:	e037883a 	mov	sp,fp
    138c:	dfc00117 	ldw	ra,4(sp)
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00204 	addi	sp,sp,8
    1398:	f800283a 	ret

0000139c <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    139c:	defff604 	addi	sp,sp,-40
    13a0:	df000915 	stw	fp,36(sp)
    13a4:	df000904 	addi	fp,sp,36
    13a8:	e13ffb15 	stw	r4,-20(fp)
    13ac:	e17ffc15 	stw	r5,-16(fp)
    13b0:	e1bffd15 	stw	r6,-12(fp)
    13b4:	e1fffe15 	stw	r7,-8(fp)
    13b8:	e0800117 	ldw	r2,4(fp)
    13bc:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    13c0:	00820034 	movhi	r2,2048
    13c4:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    13c8:	e0bffc17 	ldw	r2,-16(fp)
    13cc:	e0bff715 	stw	r2,-36(fp)
    13d0:	00001806 	br	1434 <VGA_box+0x98>
	{
		col = x1;
    13d4:	e0bffb17 	ldw	r2,-20(fp)
    13d8:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    13dc:	00000f06 	br	141c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    13e0:	e0bff717 	ldw	r2,-36(fp)
    13e4:	1006927a 	slli	r3,r2,9
    13e8:	e0bff817 	ldw	r2,-32(fp)
    13ec:	1885883a 	add	r2,r3,r2
    13f0:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    13f4:	e0bffa17 	ldw	r2,-24(fp)
    13f8:	1085883a 	add	r2,r2,r2
    13fc:	1007883a 	mov	r3,r2
    1400:	e0bff917 	ldw	r2,-28(fp)
    1404:	10c5883a 	add	r2,r2,r3
    1408:	e0ffff0b 	ldhu	r3,-4(fp)
    140c:	10c0000d 	sth	r3,0(r2)
			++col;
    1410:	e0bff817 	ldw	r2,-32(fp)
    1414:	10800044 	addi	r2,r2,1
    1418:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    141c:	e0bff817 	ldw	r2,-32(fp)
    1420:	e0fffd17 	ldw	r3,-12(fp)
    1424:	18bfee0e 	bge	r3,r2,13e0 <__alt_mem_Flash_flash_data+0xf40013e0>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1428:	e0bff717 	ldw	r2,-36(fp)
    142c:	10800044 	addi	r2,r2,1
    1430:	e0bff715 	stw	r2,-36(fp)
    1434:	e0bff717 	ldw	r2,-36(fp)
    1438:	e0fffe17 	ldw	r3,-8(fp)
    143c:	18bfe50e 	bge	r3,r2,13d4 <__alt_mem_Flash_flash_data+0xf40013d4>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    1440:	e037883a 	mov	sp,fp
    1444:	df000017 	ldw	fp,0(sp)
    1448:	dec00104 	addi	sp,sp,4
    144c:	f800283a 	ret

00001450 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    1450:	defffa04 	addi	sp,sp,-24
    1454:	df000515 	stw	fp,20(sp)
    1458:	df000504 	addi	fp,sp,20
    145c:	e13ffd15 	stw	r4,-12(fp)
    1460:	e17ffe15 	stw	r5,-8(fp)
    1464:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    1468:	00824034 	movhi	r2,2304
    146c:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    1470:	e0bffe17 	ldw	r2,-8(fp)
    1474:	100691fa 	slli	r3,r2,7
    1478:	e0bffd17 	ldw	r2,-12(fp)
    147c:	1885883a 	add	r2,r3,r2
    1480:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    1484:	00000c06 	br	14b8 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	e0fffc17 	ldw	r3,-16(fp)
    1490:	1885883a 	add	r2,r3,r2
    1494:	e0ffff17 	ldw	r3,-4(fp)
    1498:	18c00003 	ldbu	r3,0(r3)
    149c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    14a0:	e0bfff17 	ldw	r2,-4(fp)
    14a4:	10800044 	addi	r2,r2,1
    14a8:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    14ac:	e0bffb17 	ldw	r2,-20(fp)
    14b0:	10800044 	addi	r2,r2,1
    14b4:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    14b8:	e0bfff17 	ldw	r2,-4(fp)
    14bc:	10800003 	ldbu	r2,0(r2)
    14c0:	10803fcc 	andi	r2,r2,255
    14c4:	1080201c 	xori	r2,r2,128
    14c8:	10bfe004 	addi	r2,r2,-128
    14cc:	103fee1e 	bne	r2,zero,1488 <__alt_mem_Flash_flash_data+0xf4001488>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    14d0:	e037883a 	mov	sp,fp
    14d4:	df000017 	ldw	fp,0(sp)
    14d8:	dec00104 	addi	sp,sp,4
    14dc:	f800283a 	ret

000014e0 <draw_middenlijn>:

void draw_middenlijn(){
    14e0:	defffc04 	addi	sp,sp,-16
    14e4:	dfc00315 	stw	ra,12(sp)
    14e8:	df000215 	stw	fp,8(sp)
    14ec:	df000204 	addi	fp,sp,8
	int i = 0;
    14f0:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    14f4:	00000f06 	br	1534 <draw_middenlijn+0x54>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    14f8:	e0bfff17 	ldw	r2,-4(fp)
    14fc:	10c001c4 	addi	r3,r2,7
    1500:	d0a00f8b 	ldhu	r2,-32706(gp)
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	10a0001c 	xori	r2,r2,32768
    150c:	10a00004 	addi	r2,r2,-32768
    1510:	d8800015 	stw	r2,0(sp)
    1514:	010027c4 	movi	r4,159
    1518:	e17fff17 	ldw	r5,-4(fp)
    151c:	01802804 	movi	r6,160
    1520:	180f883a 	mov	r7,r3
    1524:	000139c0 	call	139c <VGA_box>
		i = i + 11;
    1528:	e0bfff17 	ldw	r2,-4(fp)
    152c:	108002c4 	addi	r2,r2,11
    1530:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	10803c10 	cmplti	r2,r2,240
    153c:	103fee1e 	bne	r2,zero,14f8 <__alt_mem_Flash_flash_data+0xf40014f8>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    1540:	e037883a 	mov	sp,fp
    1544:	dfc00117 	ldw	ra,4(sp)
    1548:	df000017 	ldw	fp,0(sp)
    154c:	dec00204 	addi	sp,sp,8
    1550:	f800283a 	ret

00001554 <del_middenlijn>:

void del_middenlijn(){
    1554:	defffd04 	addi	sp,sp,-12
    1558:	dfc00215 	stw	ra,8(sp)
    155c:	df000115 	stw	fp,4(sp)
    1560:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    1564:	d8000015 	stw	zero,0(sp)
    1568:	010027c4 	movi	r4,159
    156c:	01400104 	movi	r5,4
    1570:	01802804 	movi	r6,160
    1574:	01c03ac4 	movi	r7,235
    1578:	000139c0 	call	139c <VGA_box>
}
    157c:	e037883a 	mov	sp,fp
    1580:	dfc00117 	ldw	ra,4(sp)
    1584:	df000017 	ldw	fp,0(sp)
    1588:	dec00204 	addi	sp,sp,8
    158c:	f800283a 	ret

00001590 <del_number>:

void del_number(int side){
    1590:	defffc04 	addi	sp,sp,-16
    1594:	dfc00315 	stw	ra,12(sp)
    1598:	df000215 	stw	fp,8(sp)
    159c:	df000204 	addi	fp,sp,8
    15a0:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    15a4:	e0bfff17 	ldw	r2,-4(fp)
    15a8:	10800058 	cmpnei	r2,r2,1
    15ac:	1000061e 	bne	r2,zero,15c8 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    15b0:	d8000015 	stw	zero,0(sp)
    15b4:	01001e04 	movi	r4,120
    15b8:	01400504 	movi	r5,20
    15bc:	01802304 	movi	r6,140
    15c0:	01c00f04 	movi	r7,60
    15c4:	000139c0 	call	139c <VGA_box>
	}
	if(side == 2){
    15c8:	e0bfff17 	ldw	r2,-4(fp)
    15cc:	10800098 	cmpnei	r2,r2,2
    15d0:	1000061e 	bne	r2,zero,15ec <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    15d4:	d8000015 	stw	zero,0(sp)
    15d8:	01002d04 	movi	r4,180
    15dc:	01400504 	movi	r5,20
    15e0:	01803204 	movi	r6,200
    15e4:	01c00f04 	movi	r7,60
    15e8:	000139c0 	call	139c <VGA_box>
	}
}
    15ec:	e037883a 	mov	sp,fp
    15f0:	dfc00117 	ldw	ra,4(sp)
    15f4:	df000017 	ldw	fp,0(sp)
    15f8:	dec00204 	addi	sp,sp,8
    15fc:	f800283a 	ret

00001600 <draw_number>:

void draw_number(int nummer, int ID){
    1600:	defffa04 	addi	sp,sp,-24
    1604:	dfc00515 	stw	ra,20(sp)
    1608:	df000415 	stw	fp,16(sp)
    160c:	df000404 	addi	fp,sp,16
    1610:	e13ffe15 	stw	r4,-8(fp)
    1614:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    1618:	e13fff17 	ldw	r4,-4(fp)
    161c:	0001e480 	call	1e48 <checkIDScore>
    1620:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    1624:	e0bffe17 	ldw	r2,-8(fp)
    1628:	10800058 	cmpnei	r2,r2,1
    162c:	10000e1e 	bne	r2,zero,1668 <draw_number+0x68>
		VGA_box(X + 5, 20, X+7, 60, wit);
    1630:	e0bffd17 	ldw	r2,-12(fp)
    1634:	11000144 	addi	r4,r2,5
    1638:	e0bffd17 	ldw	r2,-12(fp)
    163c:	10c001c4 	addi	r3,r2,7
    1640:	d0a00f0b 	ldhu	r2,-32708(gp)
    1644:	10bfffcc 	andi	r2,r2,65535
    1648:	10a0001c 	xori	r2,r2,32768
    164c:	10a00004 	addi	r2,r2,-32768
    1650:	d8800015 	stw	r2,0(sp)
    1654:	01400504 	movi	r5,20
    1658:	180d883a 	mov	r6,r3
    165c:	01c00f04 	movi	r7,60
    1660:	000139c0 	call	139c <VGA_box>
    1664:	0001f306 	br	1e34 <draw_number+0x834>
	}else if(nummer == 2){
    1668:	e0bffe17 	ldw	r2,-8(fp)
    166c:	10800098 	cmpnei	r2,r2,2
    1670:	10003e1e 	bne	r2,zero,176c <draw_number+0x16c>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1674:	e0bffd17 	ldw	r2,-12(fp)
    1678:	10c00504 	addi	r3,r2,20
    167c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1680:	10bfffcc 	andi	r2,r2,65535
    1684:	10a0001c 	xori	r2,r2,32768
    1688:	10a00004 	addi	r2,r2,-32768
    168c:	d8800015 	stw	r2,0(sp)
    1690:	e13ffd17 	ldw	r4,-12(fp)
    1694:	01400504 	movi	r5,20
    1698:	180d883a 	mov	r6,r3
    169c:	01c00584 	movi	r7,22
    16a0:	000139c0 	call	139c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    16a4:	e0bffd17 	ldw	r2,-12(fp)
    16a8:	11000484 	addi	r4,r2,18
    16ac:	e0bffd17 	ldw	r2,-12(fp)
    16b0:	10c00504 	addi	r3,r2,20
    16b4:	d0a00f0b 	ldhu	r2,-32708(gp)
    16b8:	10bfffcc 	andi	r2,r2,65535
    16bc:	10a0001c 	xori	r2,r2,32768
    16c0:	10a00004 	addi	r2,r2,-32768
    16c4:	d8800015 	stw	r2,0(sp)
    16c8:	01400584 	movi	r5,22
    16cc:	180d883a 	mov	r6,r3
    16d0:	01c00984 	movi	r7,38
    16d4:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    16d8:	e0bffd17 	ldw	r2,-12(fp)
    16dc:	10c00504 	addi	r3,r2,20
    16e0:	d0a00f0b 	ldhu	r2,-32708(gp)
    16e4:	10bfffcc 	andi	r2,r2,65535
    16e8:	10a0001c 	xori	r2,r2,32768
    16ec:	10a00004 	addi	r2,r2,-32768
    16f0:	d8800015 	stw	r2,0(sp)
    16f4:	e13ffd17 	ldw	r4,-12(fp)
    16f8:	01400984 	movi	r5,38
    16fc:	180d883a 	mov	r6,r3
    1700:	01c00a04 	movi	r7,40
    1704:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    1708:	e0bffd17 	ldw	r2,-12(fp)
    170c:	10c00084 	addi	r3,r2,2
    1710:	d0a00f0b 	ldhu	r2,-32708(gp)
    1714:	10bfffcc 	andi	r2,r2,65535
    1718:	10a0001c 	xori	r2,r2,32768
    171c:	10a00004 	addi	r2,r2,-32768
    1720:	d8800015 	stw	r2,0(sp)
    1724:	e13ffd17 	ldw	r4,-12(fp)
    1728:	01400a04 	movi	r5,40
    172c:	180d883a 	mov	r6,r3
    1730:	01c00e84 	movi	r7,58
    1734:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1738:	e0bffd17 	ldw	r2,-12(fp)
    173c:	10c00504 	addi	r3,r2,20
    1740:	d0a00f0b 	ldhu	r2,-32708(gp)
    1744:	10bfffcc 	andi	r2,r2,65535
    1748:	10a0001c 	xori	r2,r2,32768
    174c:	10a00004 	addi	r2,r2,-32768
    1750:	d8800015 	stw	r2,0(sp)
    1754:	e13ffd17 	ldw	r4,-12(fp)
    1758:	01400e84 	movi	r5,58
    175c:	180d883a 	mov	r6,r3
    1760:	01c00f04 	movi	r7,60
    1764:	000139c0 	call	139c <VGA_box>
    1768:	0001b206 	br	1e34 <draw_number+0x834>
	}else if(nummer == 3){
    176c:	e0bffe17 	ldw	r2,-8(fp)
    1770:	108000d8 	cmpnei	r2,r2,3
    1774:	1000321e 	bne	r2,zero,1840 <draw_number+0x240>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1778:	e0bffd17 	ldw	r2,-12(fp)
    177c:	10c00504 	addi	r3,r2,20
    1780:	d0a00f0b 	ldhu	r2,-32708(gp)
    1784:	10bfffcc 	andi	r2,r2,65535
    1788:	10a0001c 	xori	r2,r2,32768
    178c:	10a00004 	addi	r2,r2,-32768
    1790:	d8800015 	stw	r2,0(sp)
    1794:	e13ffd17 	ldw	r4,-12(fp)
    1798:	01400504 	movi	r5,20
    179c:	180d883a 	mov	r6,r3
    17a0:	01c00584 	movi	r7,22
    17a4:	000139c0 	call	139c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	11000484 	addi	r4,r2,18
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c00504 	addi	r3,r2,20
    17b8:	d0a00f0b 	ldhu	r2,-32708(gp)
    17bc:	10bfffcc 	andi	r2,r2,65535
    17c0:	10a0001c 	xori	r2,r2,32768
    17c4:	10a00004 	addi	r2,r2,-32768
    17c8:	d8800015 	stw	r2,0(sp)
    17cc:	01400584 	movi	r5,22
    17d0:	180d883a 	mov	r6,r3
    17d4:	01c00f04 	movi	r7,60
    17d8:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    17dc:	e0bffd17 	ldw	r2,-12(fp)
    17e0:	10c00504 	addi	r3,r2,20
    17e4:	d0a00f0b 	ldhu	r2,-32708(gp)
    17e8:	10bfffcc 	andi	r2,r2,65535
    17ec:	10a0001c 	xori	r2,r2,32768
    17f0:	10a00004 	addi	r2,r2,-32768
    17f4:	d8800015 	stw	r2,0(sp)
    17f8:	e13ffd17 	ldw	r4,-12(fp)
    17fc:	014009c4 	movi	r5,39
    1800:	180d883a 	mov	r6,r3
    1804:	01c00a44 	movi	r7,41
    1808:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    180c:	e0bffd17 	ldw	r2,-12(fp)
    1810:	10c00504 	addi	r3,r2,20
    1814:	d0a00f0b 	ldhu	r2,-32708(gp)
    1818:	10bfffcc 	andi	r2,r2,65535
    181c:	10a0001c 	xori	r2,r2,32768
    1820:	10a00004 	addi	r2,r2,-32768
    1824:	d8800015 	stw	r2,0(sp)
    1828:	e13ffd17 	ldw	r4,-12(fp)
    182c:	01400e84 	movi	r5,58
    1830:	180d883a 	mov	r6,r3
    1834:	01c00f04 	movi	r7,60
    1838:	000139c0 	call	139c <VGA_box>
    183c:	00017d06 	br	1e34 <draw_number+0x834>
	}else if(nummer == 4){
    1840:	e0bffe17 	ldw	r2,-8(fp)
    1844:	10800118 	cmpnei	r2,r2,4
    1848:	1000261e 	bne	r2,zero,18e4 <draw_number+0x2e4>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    184c:	e0bffd17 	ldw	r2,-12(fp)
    1850:	10c00084 	addi	r3,r2,2
    1854:	d0a00f0b 	ldhu	r2,-32708(gp)
    1858:	10bfffcc 	andi	r2,r2,65535
    185c:	10a0001c 	xori	r2,r2,32768
    1860:	10a00004 	addi	r2,r2,-32768
    1864:	d8800015 	stw	r2,0(sp)
    1868:	e13ffd17 	ldw	r4,-12(fp)
    186c:	01400504 	movi	r5,20
    1870:	180d883a 	mov	r6,r3
    1874:	01c00a04 	movi	r7,40
    1878:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    187c:	e0bffd17 	ldw	r2,-12(fp)
    1880:	10c00504 	addi	r3,r2,20
    1884:	d0a00f0b 	ldhu	r2,-32708(gp)
    1888:	10bfffcc 	andi	r2,r2,65535
    188c:	10a0001c 	xori	r2,r2,32768
    1890:	10a00004 	addi	r2,r2,-32768
    1894:	d8800015 	stw	r2,0(sp)
    1898:	e13ffd17 	ldw	r4,-12(fp)
    189c:	014009c4 	movi	r5,39
    18a0:	180d883a 	mov	r6,r3
    18a4:	01c00a44 	movi	r7,41
    18a8:	000139c0 	call	139c <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    18ac:	e0bffd17 	ldw	r2,-12(fp)
    18b0:	11000484 	addi	r4,r2,18
    18b4:	e0bffd17 	ldw	r2,-12(fp)
    18b8:	10c00504 	addi	r3,r2,20
    18bc:	d0a00f0b 	ldhu	r2,-32708(gp)
    18c0:	10bfffcc 	andi	r2,r2,65535
    18c4:	10a0001c 	xori	r2,r2,32768
    18c8:	10a00004 	addi	r2,r2,-32768
    18cc:	d8800015 	stw	r2,0(sp)
    18d0:	01400504 	movi	r5,20
    18d4:	180d883a 	mov	r6,r3
    18d8:	01c00f04 	movi	r7,60
    18dc:	000139c0 	call	139c <VGA_box>
    18e0:	00015406 	br	1e34 <draw_number+0x834>
	}else if(nummer == 5){
    18e4:	e0bffe17 	ldw	r2,-8(fp)
    18e8:	10800158 	cmpnei	r2,r2,5
    18ec:	10003e1e 	bne	r2,zero,19e8 <draw_number+0x3e8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    18f0:	e0bffd17 	ldw	r2,-12(fp)
    18f4:	10c00504 	addi	r3,r2,20
    18f8:	d0a00f0b 	ldhu	r2,-32708(gp)
    18fc:	10bfffcc 	andi	r2,r2,65535
    1900:	10a0001c 	xori	r2,r2,32768
    1904:	10a00004 	addi	r2,r2,-32768
    1908:	d8800015 	stw	r2,0(sp)
    190c:	e13ffd17 	ldw	r4,-12(fp)
    1910:	01400504 	movi	r5,20
    1914:	180d883a 	mov	r6,r3
    1918:	01c00584 	movi	r7,22
    191c:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    1920:	e0bffd17 	ldw	r2,-12(fp)
    1924:	10c00084 	addi	r3,r2,2
    1928:	d0a00f0b 	ldhu	r2,-32708(gp)
    192c:	10bfffcc 	andi	r2,r2,65535
    1930:	10a0001c 	xori	r2,r2,32768
    1934:	10a00004 	addi	r2,r2,-32768
    1938:	d8800015 	stw	r2,0(sp)
    193c:	e13ffd17 	ldw	r4,-12(fp)
    1940:	01400584 	movi	r5,22
    1944:	180d883a 	mov	r6,r3
    1948:	01c00984 	movi	r7,38
    194c:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1950:	e0bffd17 	ldw	r2,-12(fp)
    1954:	10c00504 	addi	r3,r2,20
    1958:	d0a00f0b 	ldhu	r2,-32708(gp)
    195c:	10bfffcc 	andi	r2,r2,65535
    1960:	10a0001c 	xori	r2,r2,32768
    1964:	10a00004 	addi	r2,r2,-32768
    1968:	d8800015 	stw	r2,0(sp)
    196c:	e13ffd17 	ldw	r4,-12(fp)
    1970:	01400984 	movi	r5,38
    1974:	180d883a 	mov	r6,r3
    1978:	01c00a04 	movi	r7,40
    197c:	000139c0 	call	139c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    1980:	e0bffd17 	ldw	r2,-12(fp)
    1984:	11000484 	addi	r4,r2,18
    1988:	e0bffd17 	ldw	r2,-12(fp)
    198c:	10c00504 	addi	r3,r2,20
    1990:	d0a00f0b 	ldhu	r2,-32708(gp)
    1994:	10bfffcc 	andi	r2,r2,65535
    1998:	10a0001c 	xori	r2,r2,32768
    199c:	10a00004 	addi	r2,r2,-32768
    19a0:	d8800015 	stw	r2,0(sp)
    19a4:	01400a04 	movi	r5,40
    19a8:	180d883a 	mov	r6,r3
    19ac:	01c00e84 	movi	r7,58
    19b0:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    19b4:	e0bffd17 	ldw	r2,-12(fp)
    19b8:	10c00504 	addi	r3,r2,20
    19bc:	d0a00f0b 	ldhu	r2,-32708(gp)
    19c0:	10bfffcc 	andi	r2,r2,65535
    19c4:	10a0001c 	xori	r2,r2,32768
    19c8:	10a00004 	addi	r2,r2,-32768
    19cc:	d8800015 	stw	r2,0(sp)
    19d0:	e13ffd17 	ldw	r4,-12(fp)
    19d4:	01400e84 	movi	r5,58
    19d8:	180d883a 	mov	r6,r3
    19dc:	01c00f04 	movi	r7,60
    19e0:	000139c0 	call	139c <VGA_box>
    19e4:	00011306 	br	1e34 <draw_number+0x834>
	}else if(nummer == 6){
    19e8:	e0bffe17 	ldw	r2,-8(fp)
    19ec:	10800198 	cmpnei	r2,r2,6
    19f0:	10003e1e 	bne	r2,zero,1aec <draw_number+0x4ec>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    19f4:	e0bffd17 	ldw	r2,-12(fp)
    19f8:	10c00084 	addi	r3,r2,2
    19fc:	d0a00f0b 	ldhu	r2,-32708(gp)
    1a00:	10bfffcc 	andi	r2,r2,65535
    1a04:	10a0001c 	xori	r2,r2,32768
    1a08:	10a00004 	addi	r2,r2,-32768
    1a0c:	d8800015 	stw	r2,0(sp)
    1a10:	e13ffd17 	ldw	r4,-12(fp)
    1a14:	01400504 	movi	r5,20
    1a18:	180d883a 	mov	r6,r3
    1a1c:	01c00f04 	movi	r7,60
    1a20:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1a24:	e0bffd17 	ldw	r2,-12(fp)
    1a28:	10c00504 	addi	r3,r2,20
    1a2c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1a30:	10bfffcc 	andi	r2,r2,65535
    1a34:	10a0001c 	xori	r2,r2,32768
    1a38:	10a00004 	addi	r2,r2,-32768
    1a3c:	d8800015 	stw	r2,0(sp)
    1a40:	e13ffd17 	ldw	r4,-12(fp)
    1a44:	01400504 	movi	r5,20
    1a48:	180d883a 	mov	r6,r3
    1a4c:	01c00584 	movi	r7,22
    1a50:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1a54:	e0bffd17 	ldw	r2,-12(fp)
    1a58:	10c00504 	addi	r3,r2,20
    1a5c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1a60:	10bfffcc 	andi	r2,r2,65535
    1a64:	10a0001c 	xori	r2,r2,32768
    1a68:	10a00004 	addi	r2,r2,-32768
    1a6c:	d8800015 	stw	r2,0(sp)
    1a70:	e13ffd17 	ldw	r4,-12(fp)
    1a74:	01400e84 	movi	r5,58
    1a78:	180d883a 	mov	r6,r3
    1a7c:	01c00f04 	movi	r7,60
    1a80:	000139c0 	call	139c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    1a84:	e0bffd17 	ldw	r2,-12(fp)
    1a88:	11000484 	addi	r4,r2,18
    1a8c:	e0bffd17 	ldw	r2,-12(fp)
    1a90:	10c00504 	addi	r3,r2,20
    1a94:	d0a00f0b 	ldhu	r2,-32708(gp)
    1a98:	10bfffcc 	andi	r2,r2,65535
    1a9c:	10a0001c 	xori	r2,r2,32768
    1aa0:	10a00004 	addi	r2,r2,-32768
    1aa4:	d8800015 	stw	r2,0(sp)
    1aa8:	01400a04 	movi	r5,40
    1aac:	180d883a 	mov	r6,r3
    1ab0:	01c00e84 	movi	r7,58
    1ab4:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1ab8:	e0bffd17 	ldw	r2,-12(fp)
    1abc:	10c00504 	addi	r3,r2,20
    1ac0:	d0a00f0b 	ldhu	r2,-32708(gp)
    1ac4:	10bfffcc 	andi	r2,r2,65535
    1ac8:	10a0001c 	xori	r2,r2,32768
    1acc:	10a00004 	addi	r2,r2,-32768
    1ad0:	d8800015 	stw	r2,0(sp)
    1ad4:	e13ffd17 	ldw	r4,-12(fp)
    1ad8:	014009c4 	movi	r5,39
    1adc:	180d883a 	mov	r6,r3
    1ae0:	01c00a44 	movi	r7,41
    1ae4:	000139c0 	call	139c <VGA_box>
    1ae8:	0000d206 	br	1e34 <draw_number+0x834>
	}else if(nummer == 7){
    1aec:	e0bffe17 	ldw	r2,-8(fp)
    1af0:	108001d8 	cmpnei	r2,r2,7
    1af4:	10001a1e 	bne	r2,zero,1b60 <draw_number+0x560>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	11000484 	addi	r4,r2,18
    1b00:	e0bffd17 	ldw	r2,-12(fp)
    1b04:	10c00504 	addi	r3,r2,20
    1b08:	d0a00f0b 	ldhu	r2,-32708(gp)
    1b0c:	10bfffcc 	andi	r2,r2,65535
    1b10:	10a0001c 	xori	r2,r2,32768
    1b14:	10a00004 	addi	r2,r2,-32768
    1b18:	d8800015 	stw	r2,0(sp)
    1b1c:	01400504 	movi	r5,20
    1b20:	180d883a 	mov	r6,r3
    1b24:	01c00f04 	movi	r7,60
    1b28:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	10c00504 	addi	r3,r2,20
    1b34:	d0a00f0b 	ldhu	r2,-32708(gp)
    1b38:	10bfffcc 	andi	r2,r2,65535
    1b3c:	10a0001c 	xori	r2,r2,32768
    1b40:	10a00004 	addi	r2,r2,-32768
    1b44:	d8800015 	stw	r2,0(sp)
    1b48:	e13ffd17 	ldw	r4,-12(fp)
    1b4c:	01400504 	movi	r5,20
    1b50:	180d883a 	mov	r6,r3
    1b54:	01c00584 	movi	r7,22
    1b58:	000139c0 	call	139c <VGA_box>
    1b5c:	0000b506 	br	1e34 <draw_number+0x834>
	}else if(nummer == 8){
    1b60:	e0bffe17 	ldw	r2,-8(fp)
    1b64:	10800218 	cmpnei	r2,r2,8
    1b68:	10003e1e 	bne	r2,zero,1c64 <draw_number+0x664>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1b6c:	e0bffd17 	ldw	r2,-12(fp)
    1b70:	11000484 	addi	r4,r2,18
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	10c00504 	addi	r3,r2,20
    1b7c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1b80:	10bfffcc 	andi	r2,r2,65535
    1b84:	10a0001c 	xori	r2,r2,32768
    1b88:	10a00004 	addi	r2,r2,-32768
    1b8c:	d8800015 	stw	r2,0(sp)
    1b90:	01400504 	movi	r5,20
    1b94:	180d883a 	mov	r6,r3
    1b98:	01c00f04 	movi	r7,60
    1b9c:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1ba0:	e0bffd17 	ldw	r2,-12(fp)
    1ba4:	10c00084 	addi	r3,r2,2
    1ba8:	d0a00f0b 	ldhu	r2,-32708(gp)
    1bac:	10bfffcc 	andi	r2,r2,65535
    1bb0:	10a0001c 	xori	r2,r2,32768
    1bb4:	10a00004 	addi	r2,r2,-32768
    1bb8:	d8800015 	stw	r2,0(sp)
    1bbc:	e13ffd17 	ldw	r4,-12(fp)
    1bc0:	01400504 	movi	r5,20
    1bc4:	180d883a 	mov	r6,r3
    1bc8:	01c00f04 	movi	r7,60
    1bcc:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1bd0:	e0bffd17 	ldw	r2,-12(fp)
    1bd4:	10c00504 	addi	r3,r2,20
    1bd8:	d0a00f0b 	ldhu	r2,-32708(gp)
    1bdc:	10bfffcc 	andi	r2,r2,65535
    1be0:	10a0001c 	xori	r2,r2,32768
    1be4:	10a00004 	addi	r2,r2,-32768
    1be8:	d8800015 	stw	r2,0(sp)
    1bec:	e13ffd17 	ldw	r4,-12(fp)
    1bf0:	01400504 	movi	r5,20
    1bf4:	180d883a 	mov	r6,r3
    1bf8:	01c00584 	movi	r7,22
    1bfc:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1c00:	e0bffd17 	ldw	r2,-12(fp)
    1c04:	10c00504 	addi	r3,r2,20
    1c08:	d0a00f0b 	ldhu	r2,-32708(gp)
    1c0c:	10bfffcc 	andi	r2,r2,65535
    1c10:	10a0001c 	xori	r2,r2,32768
    1c14:	10a00004 	addi	r2,r2,-32768
    1c18:	d8800015 	stw	r2,0(sp)
    1c1c:	e13ffd17 	ldw	r4,-12(fp)
    1c20:	014009c4 	movi	r5,39
    1c24:	180d883a 	mov	r6,r3
    1c28:	01c00a44 	movi	r7,41
    1c2c:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1c30:	e0bffd17 	ldw	r2,-12(fp)
    1c34:	10c00504 	addi	r3,r2,20
    1c38:	d0a00f0b 	ldhu	r2,-32708(gp)
    1c3c:	10bfffcc 	andi	r2,r2,65535
    1c40:	10a0001c 	xori	r2,r2,32768
    1c44:	10a00004 	addi	r2,r2,-32768
    1c48:	d8800015 	stw	r2,0(sp)
    1c4c:	e13ffd17 	ldw	r4,-12(fp)
    1c50:	01400e84 	movi	r5,58
    1c54:	180d883a 	mov	r6,r3
    1c58:	01c00f04 	movi	r7,60
    1c5c:	000139c0 	call	139c <VGA_box>
    1c60:	00007406 	br	1e34 <draw_number+0x834>
	}else if(nummer == 9){
    1c64:	e0bffe17 	ldw	r2,-8(fp)
    1c68:	10800258 	cmpnei	r2,r2,9
    1c6c:	10003e1e 	bne	r2,zero,1d68 <draw_number+0x768>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1c70:	e0bffd17 	ldw	r2,-12(fp)
    1c74:	11000484 	addi	r4,r2,18
    1c78:	e0bffd17 	ldw	r2,-12(fp)
    1c7c:	10c00504 	addi	r3,r2,20
    1c80:	d0a00f0b 	ldhu	r2,-32708(gp)
    1c84:	10bfffcc 	andi	r2,r2,65535
    1c88:	10a0001c 	xori	r2,r2,32768
    1c8c:	10a00004 	addi	r2,r2,-32768
    1c90:	d8800015 	stw	r2,0(sp)
    1c94:	01400504 	movi	r5,20
    1c98:	180d883a 	mov	r6,r3
    1c9c:	01c00f04 	movi	r7,60
    1ca0:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1ca4:	e0bffd17 	ldw	r2,-12(fp)
    1ca8:	10c00084 	addi	r3,r2,2
    1cac:	d0a00f0b 	ldhu	r2,-32708(gp)
    1cb0:	10bfffcc 	andi	r2,r2,65535
    1cb4:	10a0001c 	xori	r2,r2,32768
    1cb8:	10a00004 	addi	r2,r2,-32768
    1cbc:	d8800015 	stw	r2,0(sp)
    1cc0:	e13ffd17 	ldw	r4,-12(fp)
    1cc4:	01400504 	movi	r5,20
    1cc8:	180d883a 	mov	r6,r3
    1ccc:	01c00a04 	movi	r7,40
    1cd0:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1cd4:	e0bffd17 	ldw	r2,-12(fp)
    1cd8:	10c00504 	addi	r3,r2,20
    1cdc:	d0a00f0b 	ldhu	r2,-32708(gp)
    1ce0:	10bfffcc 	andi	r2,r2,65535
    1ce4:	10a0001c 	xori	r2,r2,32768
    1ce8:	10a00004 	addi	r2,r2,-32768
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	e13ffd17 	ldw	r4,-12(fp)
    1cf4:	01400504 	movi	r5,20
    1cf8:	180d883a 	mov	r6,r3
    1cfc:	01c00584 	movi	r7,22
    1d00:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1d04:	e0bffd17 	ldw	r2,-12(fp)
    1d08:	10c00504 	addi	r3,r2,20
    1d0c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1d10:	10bfffcc 	andi	r2,r2,65535
    1d14:	10a0001c 	xori	r2,r2,32768
    1d18:	10a00004 	addi	r2,r2,-32768
    1d1c:	d8800015 	stw	r2,0(sp)
    1d20:	e13ffd17 	ldw	r4,-12(fp)
    1d24:	014009c4 	movi	r5,39
    1d28:	180d883a 	mov	r6,r3
    1d2c:	01c00a44 	movi	r7,41
    1d30:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1d34:	e0bffd17 	ldw	r2,-12(fp)
    1d38:	10c00504 	addi	r3,r2,20
    1d3c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1d40:	10bfffcc 	andi	r2,r2,65535
    1d44:	10a0001c 	xori	r2,r2,32768
    1d48:	10a00004 	addi	r2,r2,-32768
    1d4c:	d8800015 	stw	r2,0(sp)
    1d50:	e13ffd17 	ldw	r4,-12(fp)
    1d54:	01400e84 	movi	r5,58
    1d58:	180d883a 	mov	r6,r3
    1d5c:	01c00f04 	movi	r7,60
    1d60:	000139c0 	call	139c <VGA_box>
    1d64:	00003306 	br	1e34 <draw_number+0x834>
	}else if(nummer == 0){
    1d68:	e0bffe17 	ldw	r2,-8(fp)
    1d6c:	1000311e 	bne	r2,zero,1e34 <draw_number+0x834>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1d70:	e0bffd17 	ldw	r2,-12(fp)
    1d74:	11000484 	addi	r4,r2,18
    1d78:	e0bffd17 	ldw	r2,-12(fp)
    1d7c:	10c00504 	addi	r3,r2,20
    1d80:	d0a00f0b 	ldhu	r2,-32708(gp)
    1d84:	10bfffcc 	andi	r2,r2,65535
    1d88:	10a0001c 	xori	r2,r2,32768
    1d8c:	10a00004 	addi	r2,r2,-32768
    1d90:	d8800015 	stw	r2,0(sp)
    1d94:	01400504 	movi	r5,20
    1d98:	180d883a 	mov	r6,r3
    1d9c:	01c00f04 	movi	r7,60
    1da0:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1da4:	e0bffd17 	ldw	r2,-12(fp)
    1da8:	10c00084 	addi	r3,r2,2
    1dac:	d0a00f0b 	ldhu	r2,-32708(gp)
    1db0:	10bfffcc 	andi	r2,r2,65535
    1db4:	10a0001c 	xori	r2,r2,32768
    1db8:	10a00004 	addi	r2,r2,-32768
    1dbc:	d8800015 	stw	r2,0(sp)
    1dc0:	e13ffd17 	ldw	r4,-12(fp)
    1dc4:	01400504 	movi	r5,20
    1dc8:	180d883a 	mov	r6,r3
    1dcc:	01c00f04 	movi	r7,60
    1dd0:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1dd4:	e0bffd17 	ldw	r2,-12(fp)
    1dd8:	10c00504 	addi	r3,r2,20
    1ddc:	d0a00f0b 	ldhu	r2,-32708(gp)
    1de0:	10bfffcc 	andi	r2,r2,65535
    1de4:	10a0001c 	xori	r2,r2,32768
    1de8:	10a00004 	addi	r2,r2,-32768
    1dec:	d8800015 	stw	r2,0(sp)
    1df0:	e13ffd17 	ldw	r4,-12(fp)
    1df4:	01400504 	movi	r5,20
    1df8:	180d883a 	mov	r6,r3
    1dfc:	01c00584 	movi	r7,22
    1e00:	000139c0 	call	139c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1e04:	e0bffd17 	ldw	r2,-12(fp)
    1e08:	10c00504 	addi	r3,r2,20
    1e0c:	d0a00f0b 	ldhu	r2,-32708(gp)
    1e10:	10bfffcc 	andi	r2,r2,65535
    1e14:	10a0001c 	xori	r2,r2,32768
    1e18:	10a00004 	addi	r2,r2,-32768
    1e1c:	d8800015 	stw	r2,0(sp)
    1e20:	e13ffd17 	ldw	r4,-12(fp)
    1e24:	01400e84 	movi	r5,58
    1e28:	180d883a 	mov	r6,r3
    1e2c:	01c00f04 	movi	r7,60
    1e30:	000139c0 	call	139c <VGA_box>
	}
}
    1e34:	e037883a 	mov	sp,fp
    1e38:	dfc00117 	ldw	ra,4(sp)
    1e3c:	df000017 	ldw	fp,0(sp)
    1e40:	dec00204 	addi	sp,sp,8
    1e44:	f800283a 	ret

00001e48 <checkIDScore>:

int checkIDScore(int ID){
    1e48:	defffe04 	addi	sp,sp,-8
    1e4c:	df000115 	stw	fp,4(sp)
    1e50:	df000104 	addi	fp,sp,4
    1e54:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    1e58:	e0bfff17 	ldw	r2,-4(fp)
    1e5c:	10800058 	cmpnei	r2,r2,1
    1e60:	1000021e 	bne	r2,zero,1e6c <checkIDScore+0x24>
		return 120;
    1e64:	00801e04 	movi	r2,120
    1e68:	00000606 	br	1e84 <checkIDScore+0x3c>
	}else if(ID == 2){
    1e6c:	e0bfff17 	ldw	r2,-4(fp)
    1e70:	10800098 	cmpnei	r2,r2,2
    1e74:	1000021e 	bne	r2,zero,1e80 <checkIDScore+0x38>
		return 180;
    1e78:	00802d04 	movi	r2,180
    1e7c:	00000106 	br	1e84 <checkIDScore+0x3c>

	}
	return 0;
    1e80:	0005883a 	mov	r2,zero
}
    1e84:	e037883a 	mov	sp,fp
    1e88:	df000017 	ldw	fp,0(sp)
    1e8c:	dec00104 	addi	sp,sp,4
    1e90:	f800283a 	ret

00001e94 <_puts_r>:
    1e94:	defff604 	addi	sp,sp,-40
    1e98:	dc000715 	stw	r16,28(sp)
    1e9c:	2021883a 	mov	r16,r4
    1ea0:	2809883a 	mov	r4,r5
    1ea4:	dc400815 	stw	r17,32(sp)
    1ea8:	dfc00915 	stw	ra,36(sp)
    1eac:	2823883a 	mov	r17,r5
    1eb0:	0001f500 	call	1f50 <strlen>
    1eb4:	81400217 	ldw	r5,8(r16)
    1eb8:	11000044 	addi	r4,r2,1
    1ebc:	d8800115 	stw	r2,4(sp)
    1ec0:	00800074 	movhi	r2,1
    1ec4:	2980030b 	ldhu	r6,12(r5)
    1ec8:	1084de04 	addi	r2,r2,4984
    1ecc:	d8800215 	stw	r2,8(sp)
    1ed0:	00800044 	movi	r2,1
    1ed4:	d8800315 	stw	r2,12(sp)
    1ed8:	00800084 	movi	r2,2
    1edc:	d8800515 	stw	r2,20(sp)
    1ee0:	dc400015 	stw	r17,0(sp)
    1ee4:	d9000615 	stw	r4,24(sp)
    1ee8:	dec00415 	stw	sp,16(sp)
    1eec:	3088000c 	andi	r2,r6,8192
    1ef0:	1000061e 	bne	r2,zero,1f0c <_puts_r+0x78>
    1ef4:	29001917 	ldw	r4,100(r5)
    1ef8:	00b7ffc4 	movi	r2,-8193
    1efc:	31880014 	ori	r6,r6,8192
    1f00:	2084703a 	and	r2,r4,r2
    1f04:	2980030d 	sth	r6,12(r5)
    1f08:	28801915 	stw	r2,100(r5)
    1f0c:	8009883a 	mov	r4,r16
    1f10:	d9800404 	addi	r6,sp,16
    1f14:	0001fe80 	call	1fe8 <__sfvwrite_r>
    1f18:	1000061e 	bne	r2,zero,1f34 <_puts_r+0xa0>
    1f1c:	00800284 	movi	r2,10
    1f20:	dfc00917 	ldw	ra,36(sp)
    1f24:	dc400817 	ldw	r17,32(sp)
    1f28:	dc000717 	ldw	r16,28(sp)
    1f2c:	dec00a04 	addi	sp,sp,40
    1f30:	f800283a 	ret
    1f34:	00bfffc4 	movi	r2,-1
    1f38:	003ff906 	br	1f20 <__alt_mem_Flash_flash_data+0xf4001f20>

00001f3c <puts>:
    1f3c:	00800074 	movhi	r2,1
    1f40:	108d1d04 	addi	r2,r2,13428
    1f44:	200b883a 	mov	r5,r4
    1f48:	11000017 	ldw	r4,0(r2)
    1f4c:	0001e941 	jmpi	1e94 <_puts_r>

00001f50 <strlen>:
    1f50:	208000cc 	andi	r2,r4,3
    1f54:	10002026 	beq	r2,zero,1fd8 <strlen+0x88>
    1f58:	20800007 	ldb	r2,0(r4)
    1f5c:	10002026 	beq	r2,zero,1fe0 <strlen+0x90>
    1f60:	2005883a 	mov	r2,r4
    1f64:	00000206 	br	1f70 <strlen+0x20>
    1f68:	10c00007 	ldb	r3,0(r2)
    1f6c:	18001826 	beq	r3,zero,1fd0 <strlen+0x80>
    1f70:	10800044 	addi	r2,r2,1
    1f74:	10c000cc 	andi	r3,r2,3
    1f78:	183ffb1e 	bne	r3,zero,1f68 <__alt_mem_Flash_flash_data+0xf4001f68>
    1f7c:	10c00017 	ldw	r3,0(r2)
    1f80:	01ffbff4 	movhi	r7,65279
    1f84:	39ffbfc4 	addi	r7,r7,-257
    1f88:	00ca303a 	nor	r5,zero,r3
    1f8c:	01a02074 	movhi	r6,32897
    1f90:	19c7883a 	add	r3,r3,r7
    1f94:	31a02004 	addi	r6,r6,-32640
    1f98:	1946703a 	and	r3,r3,r5
    1f9c:	1986703a 	and	r3,r3,r6
    1fa0:	1800091e 	bne	r3,zero,1fc8 <strlen+0x78>
    1fa4:	10800104 	addi	r2,r2,4
    1fa8:	10c00017 	ldw	r3,0(r2)
    1fac:	19cb883a 	add	r5,r3,r7
    1fb0:	00c6303a 	nor	r3,zero,r3
    1fb4:	28c6703a 	and	r3,r5,r3
    1fb8:	1986703a 	and	r3,r3,r6
    1fbc:	183ff926 	beq	r3,zero,1fa4 <__alt_mem_Flash_flash_data+0xf4001fa4>
    1fc0:	00000106 	br	1fc8 <strlen+0x78>
    1fc4:	10800044 	addi	r2,r2,1
    1fc8:	10c00007 	ldb	r3,0(r2)
    1fcc:	183ffd1e 	bne	r3,zero,1fc4 <__alt_mem_Flash_flash_data+0xf4001fc4>
    1fd0:	1105c83a 	sub	r2,r2,r4
    1fd4:	f800283a 	ret
    1fd8:	2005883a 	mov	r2,r4
    1fdc:	003fe706 	br	1f7c <__alt_mem_Flash_flash_data+0xf4001f7c>
    1fe0:	0005883a 	mov	r2,zero
    1fe4:	f800283a 	ret

00001fe8 <__sfvwrite_r>:
    1fe8:	30800217 	ldw	r2,8(r6)
    1fec:	10006726 	beq	r2,zero,218c <__sfvwrite_r+0x1a4>
    1ff0:	defff404 	addi	sp,sp,-48
    1ff4:	dd000615 	stw	r20,24(sp)
    1ff8:	2029883a 	mov	r20,r4
    1ffc:	2900030b 	ldhu	r4,12(r5)
    2000:	ddc00915 	stw	r23,36(sp)
    2004:	dc000215 	stw	r16,8(sp)
    2008:	dfc00b15 	stw	ra,44(sp)
    200c:	df000a15 	stw	fp,40(sp)
    2010:	dd800815 	stw	r22,32(sp)
    2014:	dd400715 	stw	r21,28(sp)
    2018:	dcc00515 	stw	r19,20(sp)
    201c:	dc800415 	stw	r18,16(sp)
    2020:	dc400315 	stw	r17,12(sp)
    2024:	2080020c 	andi	r2,r4,8
    2028:	2821883a 	mov	r16,r5
    202c:	302f883a 	mov	r23,r6
    2030:	10002726 	beq	r2,zero,20d0 <__sfvwrite_r+0xe8>
    2034:	28800417 	ldw	r2,16(r5)
    2038:	10002526 	beq	r2,zero,20d0 <__sfvwrite_r+0xe8>
    203c:	2080008c 	andi	r2,r4,2
    2040:	bc400017 	ldw	r17,0(r23)
    2044:	10002a26 	beq	r2,zero,20f0 <__sfvwrite_r+0x108>
    2048:	05600034 	movhi	r21,32768
    204c:	0027883a 	mov	r19,zero
    2050:	0025883a 	mov	r18,zero
    2054:	ad7f0004 	addi	r21,r21,-1024
    2058:	980d883a 	mov	r6,r19
    205c:	a009883a 	mov	r4,r20
    2060:	90004626 	beq	r18,zero,217c <__sfvwrite_r+0x194>
    2064:	900f883a 	mov	r7,r18
    2068:	81400717 	ldw	r5,28(r16)
    206c:	ac80022e 	bgeu	r21,r18,2078 <__sfvwrite_r+0x90>
    2070:	01e00034 	movhi	r7,32768
    2074:	39ff0004 	addi	r7,r7,-1024
    2078:	80800917 	ldw	r2,36(r16)
    207c:	103ee83a 	callr	r2
    2080:	0080520e 	bge	zero,r2,21cc <__sfvwrite_r+0x1e4>
    2084:	b8c00217 	ldw	r3,8(r23)
    2088:	98a7883a 	add	r19,r19,r2
    208c:	90a5c83a 	sub	r18,r18,r2
    2090:	1885c83a 	sub	r2,r3,r2
    2094:	b8800215 	stw	r2,8(r23)
    2098:	103fef1e 	bne	r2,zero,2058 <__alt_mem_Flash_flash_data+0xf4002058>
    209c:	0005883a 	mov	r2,zero
    20a0:	dfc00b17 	ldw	ra,44(sp)
    20a4:	df000a17 	ldw	fp,40(sp)
    20a8:	ddc00917 	ldw	r23,36(sp)
    20ac:	dd800817 	ldw	r22,32(sp)
    20b0:	dd400717 	ldw	r21,28(sp)
    20b4:	dd000617 	ldw	r20,24(sp)
    20b8:	dcc00517 	ldw	r19,20(sp)
    20bc:	dc800417 	ldw	r18,16(sp)
    20c0:	dc400317 	ldw	r17,12(sp)
    20c4:	dc000217 	ldw	r16,8(sp)
    20c8:	dec00c04 	addi	sp,sp,48
    20cc:	f800283a 	ret
    20d0:	a009883a 	mov	r4,r20
    20d4:	800b883a 	mov	r5,r16
    20d8:	00035880 	call	3588 <__swsetup_r>
    20dc:	1000ec1e 	bne	r2,zero,2490 <__sfvwrite_r+0x4a8>
    20e0:	8100030b 	ldhu	r4,12(r16)
    20e4:	bc400017 	ldw	r17,0(r23)
    20e8:	2080008c 	andi	r2,r4,2
    20ec:	103fd61e 	bne	r2,zero,2048 <__alt_mem_Flash_flash_data+0xf4002048>
    20f0:	2080004c 	andi	r2,r4,1
    20f4:	10003a1e 	bne	r2,zero,21e0 <__sfvwrite_r+0x1f8>
    20f8:	0039883a 	mov	fp,zero
    20fc:	0025883a 	mov	r18,zero
    2100:	90001a26 	beq	r18,zero,216c <__sfvwrite_r+0x184>
    2104:	2080800c 	andi	r2,r4,512
    2108:	85800217 	ldw	r22,8(r16)
    210c:	10007626 	beq	r2,zero,22e8 <__sfvwrite_r+0x300>
    2110:	b027883a 	mov	r19,r22
    2114:	95809436 	bltu	r18,r22,2368 <__sfvwrite_r+0x380>
    2118:	2081200c 	andi	r2,r4,1152
    211c:	10009f1e 	bne	r2,zero,239c <__sfvwrite_r+0x3b4>
    2120:	81000017 	ldw	r4,0(r16)
    2124:	e00b883a 	mov	r5,fp
    2128:	980d883a 	mov	r6,r19
    212c:	0002e700 	call	2e70 <memmove>
    2130:	81000217 	ldw	r4,8(r16)
    2134:	81400017 	ldw	r5,0(r16)
    2138:	9005883a 	mov	r2,r18
    213c:	2587c83a 	sub	r3,r4,r22
    2140:	2ce7883a 	add	r19,r5,r19
    2144:	80c00215 	stw	r3,8(r16)
    2148:	84c00015 	stw	r19,0(r16)
    214c:	b8c00217 	ldw	r3,8(r23)
    2150:	e0b9883a 	add	fp,fp,r2
    2154:	90a5c83a 	sub	r18,r18,r2
    2158:	1885c83a 	sub	r2,r3,r2
    215c:	b8800215 	stw	r2,8(r23)
    2160:	103fce26 	beq	r2,zero,209c <__alt_mem_Flash_flash_data+0xf400209c>
    2164:	8100030b 	ldhu	r4,12(r16)
    2168:	903fe61e 	bne	r18,zero,2104 <__alt_mem_Flash_flash_data+0xf4002104>
    216c:	8f000017 	ldw	fp,0(r17)
    2170:	8c800117 	ldw	r18,4(r17)
    2174:	8c400204 	addi	r17,r17,8
    2178:	003fe106 	br	2100 <__alt_mem_Flash_flash_data+0xf4002100>
    217c:	8cc00017 	ldw	r19,0(r17)
    2180:	8c800117 	ldw	r18,4(r17)
    2184:	8c400204 	addi	r17,r17,8
    2188:	003fb306 	br	2058 <__alt_mem_Flash_flash_data+0xf4002058>
    218c:	0005883a 	mov	r2,zero
    2190:	f800283a 	ret
    2194:	00a00034 	movhi	r2,32768
    2198:	10bfffc4 	addi	r2,r2,-1
    219c:	9009883a 	mov	r4,r18
    21a0:	1480012e 	bgeu	r2,r18,21a8 <__sfvwrite_r+0x1c0>
    21a4:	1009883a 	mov	r4,r2
    21a8:	980b883a 	mov	r5,r19
    21ac:	0004a480 	call	4a48 <__divsi3>
    21b0:	81400717 	ldw	r5,28(r16)
    21b4:	80c00917 	ldw	r3,36(r16)
    21b8:	988f383a 	mul	r7,r19,r2
    21bc:	a009883a 	mov	r4,r20
    21c0:	e00d883a 	mov	r6,fp
    21c4:	183ee83a 	callr	r3
    21c8:	00bfe016 	blt	zero,r2,214c <__alt_mem_Flash_flash_data+0xf400214c>
    21cc:	8080030b 	ldhu	r2,12(r16)
    21d0:	10801014 	ori	r2,r2,64
    21d4:	8080030d 	sth	r2,12(r16)
    21d8:	00bfffc4 	movi	r2,-1
    21dc:	003fb006 	br	20a0 <__alt_mem_Flash_flash_data+0xf40020a0>
    21e0:	0027883a 	mov	r19,zero
    21e4:	0011883a 	mov	r8,zero
    21e8:	0039883a 	mov	fp,zero
    21ec:	0025883a 	mov	r18,zero
    21f0:	90001f26 	beq	r18,zero,2270 <__sfvwrite_r+0x288>
    21f4:	40006026 	beq	r8,zero,2378 <__sfvwrite_r+0x390>
    21f8:	982b883a 	mov	r21,r19
    21fc:	94c0012e 	bgeu	r18,r19,2204 <__sfvwrite_r+0x21c>
    2200:	902b883a 	mov	r21,r18
    2204:	81000017 	ldw	r4,0(r16)
    2208:	80800417 	ldw	r2,16(r16)
    220c:	a82d883a 	mov	r22,r21
    2210:	81800217 	ldw	r6,8(r16)
    2214:	81c00517 	ldw	r7,20(r16)
    2218:	1100022e 	bgeu	r2,r4,2224 <__sfvwrite_r+0x23c>
    221c:	31c7883a 	add	r3,r6,r7
    2220:	1d401816 	blt	r3,r21,2284 <__sfvwrite_r+0x29c>
    2224:	a9c04416 	blt	r21,r7,2338 <__sfvwrite_r+0x350>
    2228:	80800917 	ldw	r2,36(r16)
    222c:	81400717 	ldw	r5,28(r16)
    2230:	a009883a 	mov	r4,r20
    2234:	da000115 	stw	r8,4(sp)
    2238:	e00d883a 	mov	r6,fp
    223c:	103ee83a 	callr	r2
    2240:	102d883a 	mov	r22,r2
    2244:	da000117 	ldw	r8,4(sp)
    2248:	00bfe00e 	bge	zero,r2,21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    224c:	9da7c83a 	sub	r19,r19,r22
    2250:	98001f26 	beq	r19,zero,22d0 <__sfvwrite_r+0x2e8>
    2254:	b8800217 	ldw	r2,8(r23)
    2258:	e5b9883a 	add	fp,fp,r22
    225c:	95a5c83a 	sub	r18,r18,r22
    2260:	15adc83a 	sub	r22,r2,r22
    2264:	bd800215 	stw	r22,8(r23)
    2268:	b03f8c26 	beq	r22,zero,209c <__alt_mem_Flash_flash_data+0xf400209c>
    226c:	903fe11e 	bne	r18,zero,21f4 <__alt_mem_Flash_flash_data+0xf40021f4>
    2270:	8f000017 	ldw	fp,0(r17)
    2274:	8c800117 	ldw	r18,4(r17)
    2278:	0011883a 	mov	r8,zero
    227c:	8c400204 	addi	r17,r17,8
    2280:	003fdb06 	br	21f0 <__alt_mem_Flash_flash_data+0xf40021f0>
    2284:	180d883a 	mov	r6,r3
    2288:	e00b883a 	mov	r5,fp
    228c:	da000115 	stw	r8,4(sp)
    2290:	d8c00015 	stw	r3,0(sp)
    2294:	0002e700 	call	2e70 <memmove>
    2298:	d8c00017 	ldw	r3,0(sp)
    229c:	80800017 	ldw	r2,0(r16)
    22a0:	a009883a 	mov	r4,r20
    22a4:	800b883a 	mov	r5,r16
    22a8:	10c5883a 	add	r2,r2,r3
    22ac:	80800015 	stw	r2,0(r16)
    22b0:	d8c00015 	stw	r3,0(sp)
    22b4:	00038e40 	call	38e4 <_fflush_r>
    22b8:	d8c00017 	ldw	r3,0(sp)
    22bc:	da000117 	ldw	r8,4(sp)
    22c0:	103fc21e 	bne	r2,zero,21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    22c4:	182d883a 	mov	r22,r3
    22c8:	9da7c83a 	sub	r19,r19,r22
    22cc:	983fe11e 	bne	r19,zero,2254 <__alt_mem_Flash_flash_data+0xf4002254>
    22d0:	a009883a 	mov	r4,r20
    22d4:	800b883a 	mov	r5,r16
    22d8:	00038e40 	call	38e4 <_fflush_r>
    22dc:	103fbb1e 	bne	r2,zero,21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    22e0:	0011883a 	mov	r8,zero
    22e4:	003fdb06 	br	2254 <__alt_mem_Flash_flash_data+0xf4002254>
    22e8:	81000017 	ldw	r4,0(r16)
    22ec:	80800417 	ldw	r2,16(r16)
    22f0:	11000236 	bltu	r2,r4,22fc <__sfvwrite_r+0x314>
    22f4:	84c00517 	ldw	r19,20(r16)
    22f8:	94ffa62e 	bgeu	r18,r19,2194 <__alt_mem_Flash_flash_data+0xf4002194>
    22fc:	9027883a 	mov	r19,r18
    2300:	b480012e 	bgeu	r22,r18,2308 <__sfvwrite_r+0x320>
    2304:	b027883a 	mov	r19,r22
    2308:	e00b883a 	mov	r5,fp
    230c:	980d883a 	mov	r6,r19
    2310:	0002e700 	call	2e70 <memmove>
    2314:	80800217 	ldw	r2,8(r16)
    2318:	80c00017 	ldw	r3,0(r16)
    231c:	14c5c83a 	sub	r2,r2,r19
    2320:	1cc7883a 	add	r3,r3,r19
    2324:	80800215 	stw	r2,8(r16)
    2328:	80c00015 	stw	r3,0(r16)
    232c:	10004326 	beq	r2,zero,243c <__sfvwrite_r+0x454>
    2330:	9805883a 	mov	r2,r19
    2334:	003f8506 	br	214c <__alt_mem_Flash_flash_data+0xf400214c>
    2338:	a80d883a 	mov	r6,r21
    233c:	e00b883a 	mov	r5,fp
    2340:	da000115 	stw	r8,4(sp)
    2344:	0002e700 	call	2e70 <memmove>
    2348:	80800217 	ldw	r2,8(r16)
    234c:	80c00017 	ldw	r3,0(r16)
    2350:	da000117 	ldw	r8,4(sp)
    2354:	1545c83a 	sub	r2,r2,r21
    2358:	1d6b883a 	add	r21,r3,r21
    235c:	80800215 	stw	r2,8(r16)
    2360:	85400015 	stw	r21,0(r16)
    2364:	003fb906 	br	224c <__alt_mem_Flash_flash_data+0xf400224c>
    2368:	81000017 	ldw	r4,0(r16)
    236c:	902d883a 	mov	r22,r18
    2370:	9027883a 	mov	r19,r18
    2374:	003f6b06 	br	2124 <__alt_mem_Flash_flash_data+0xf4002124>
    2378:	e009883a 	mov	r4,fp
    237c:	01400284 	movi	r5,10
    2380:	900d883a 	mov	r6,r18
    2384:	0002c500 	call	2c50 <memchr>
    2388:	10003e26 	beq	r2,zero,2484 <__sfvwrite_r+0x49c>
    238c:	10800044 	addi	r2,r2,1
    2390:	1727c83a 	sub	r19,r2,fp
    2394:	02000044 	movi	r8,1
    2398:	003f9706 	br	21f8 <__alt_mem_Flash_flash_data+0xf40021f8>
    239c:	80800517 	ldw	r2,20(r16)
    23a0:	81400417 	ldw	r5,16(r16)
    23a4:	80c00017 	ldw	r3,0(r16)
    23a8:	10a7883a 	add	r19,r2,r2
    23ac:	9885883a 	add	r2,r19,r2
    23b0:	1026d7fa 	srli	r19,r2,31
    23b4:	196bc83a 	sub	r21,r3,r5
    23b8:	a9800044 	addi	r6,r21,1
    23bc:	9885883a 	add	r2,r19,r2
    23c0:	1027d07a 	srai	r19,r2,1
    23c4:	3485883a 	add	r2,r6,r18
    23c8:	980d883a 	mov	r6,r19
    23cc:	9880022e 	bgeu	r19,r2,23d8 <__sfvwrite_r+0x3f0>
    23d0:	1027883a 	mov	r19,r2
    23d4:	100d883a 	mov	r6,r2
    23d8:	2101000c 	andi	r4,r4,1024
    23dc:	20001c26 	beq	r4,zero,2450 <__sfvwrite_r+0x468>
    23e0:	a009883a 	mov	r4,r20
    23e4:	300b883a 	mov	r5,r6
    23e8:	00024a80 	call	24a8 <_malloc_r>
    23ec:	102d883a 	mov	r22,r2
    23f0:	10002926 	beq	r2,zero,2498 <__sfvwrite_r+0x4b0>
    23f4:	81400417 	ldw	r5,16(r16)
    23f8:	1009883a 	mov	r4,r2
    23fc:	a80d883a 	mov	r6,r21
    2400:	0002d380 	call	2d38 <memcpy>
    2404:	8080030b 	ldhu	r2,12(r16)
    2408:	00fedfc4 	movi	r3,-1153
    240c:	10c4703a 	and	r2,r2,r3
    2410:	10802014 	ori	r2,r2,128
    2414:	8080030d 	sth	r2,12(r16)
    2418:	b549883a 	add	r4,r22,r21
    241c:	9d4bc83a 	sub	r5,r19,r21
    2420:	85800415 	stw	r22,16(r16)
    2424:	84c00515 	stw	r19,20(r16)
    2428:	81000015 	stw	r4,0(r16)
    242c:	902d883a 	mov	r22,r18
    2430:	81400215 	stw	r5,8(r16)
    2434:	9027883a 	mov	r19,r18
    2438:	003f3a06 	br	2124 <__alt_mem_Flash_flash_data+0xf4002124>
    243c:	a009883a 	mov	r4,r20
    2440:	800b883a 	mov	r5,r16
    2444:	00038e40 	call	38e4 <_fflush_r>
    2448:	103fb926 	beq	r2,zero,2330 <__alt_mem_Flash_flash_data+0xf4002330>
    244c:	003f5f06 	br	21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    2450:	a009883a 	mov	r4,r20
    2454:	0002fcc0 	call	2fcc <_realloc_r>
    2458:	102d883a 	mov	r22,r2
    245c:	103fee1e 	bne	r2,zero,2418 <__alt_mem_Flash_flash_data+0xf4002418>
    2460:	81400417 	ldw	r5,16(r16)
    2464:	a009883a 	mov	r4,r20
    2468:	0003e340 	call	3e34 <_free_r>
    246c:	8080030b 	ldhu	r2,12(r16)
    2470:	00ffdfc4 	movi	r3,-129
    2474:	1884703a 	and	r2,r3,r2
    2478:	00c00304 	movi	r3,12
    247c:	a0c00015 	stw	r3,0(r20)
    2480:	003f5306 	br	21d0 <__alt_mem_Flash_flash_data+0xf40021d0>
    2484:	94c00044 	addi	r19,r18,1
    2488:	02000044 	movi	r8,1
    248c:	003f5a06 	br	21f8 <__alt_mem_Flash_flash_data+0xf40021f8>
    2490:	00bfffc4 	movi	r2,-1
    2494:	003f0206 	br	20a0 <__alt_mem_Flash_flash_data+0xf40020a0>
    2498:	00800304 	movi	r2,12
    249c:	a0800015 	stw	r2,0(r20)
    24a0:	8080030b 	ldhu	r2,12(r16)
    24a4:	003f4a06 	br	21d0 <__alt_mem_Flash_flash_data+0xf40021d0>

000024a8 <_malloc_r>:
    24a8:	defff504 	addi	sp,sp,-44
    24ac:	dc800315 	stw	r18,12(sp)
    24b0:	dfc00a15 	stw	ra,40(sp)
    24b4:	df000915 	stw	fp,36(sp)
    24b8:	ddc00815 	stw	r23,32(sp)
    24bc:	dd800715 	stw	r22,28(sp)
    24c0:	dd400615 	stw	r21,24(sp)
    24c4:	dd000515 	stw	r20,20(sp)
    24c8:	dcc00415 	stw	r19,16(sp)
    24cc:	dc400215 	stw	r17,8(sp)
    24d0:	dc000115 	stw	r16,4(sp)
    24d4:	288002c4 	addi	r2,r5,11
    24d8:	00c00584 	movi	r3,22
    24dc:	2025883a 	mov	r18,r4
    24e0:	18802a2e 	bgeu	r3,r2,258c <_malloc_r+0xe4>
    24e4:	047ffe04 	movi	r17,-8
    24e8:	1462703a 	and	r17,r2,r17
    24ec:	88009e16 	blt	r17,zero,2768 <_malloc_r+0x2c0>
    24f0:	89409d36 	bltu	r17,r5,2768 <_malloc_r+0x2c0>
    24f4:	00055e40 	call	55e4 <__malloc_lock>
    24f8:	00807dc4 	movi	r2,503
    24fc:	14402736 	bltu	r2,r17,259c <_malloc_r+0xf4>
    2500:	8806d0fa 	srli	r3,r17,3
    2504:	04c00074 	movhi	r19,1
    2508:	9cc6a404 	addi	r19,r19,6800
    250c:	18c5883a 	add	r2,r3,r3
    2510:	1085883a 	add	r2,r2,r2
    2514:	1085883a 	add	r2,r2,r2
    2518:	9885883a 	add	r2,r19,r2
    251c:	14000317 	ldw	r16,12(r2)
    2520:	80814a26 	beq	r16,r2,2a4c <_malloc_r+0x5a4>
    2524:	80c00117 	ldw	r3,4(r16)
    2528:	81000317 	ldw	r4,12(r16)
    252c:	00bfff04 	movi	r2,-4
    2530:	1884703a 	and	r2,r3,r2
    2534:	81400217 	ldw	r5,8(r16)
    2538:	8085883a 	add	r2,r16,r2
    253c:	10c00117 	ldw	r3,4(r2)
    2540:	29000315 	stw	r4,12(r5)
    2544:	21400215 	stw	r5,8(r4)
    2548:	18c00054 	ori	r3,r3,1
    254c:	10c00115 	stw	r3,4(r2)
    2550:	9009883a 	mov	r4,r18
    2554:	00057040 	call	5704 <__malloc_unlock>
    2558:	80800204 	addi	r2,r16,8
    255c:	dfc00a17 	ldw	ra,40(sp)
    2560:	df000917 	ldw	fp,36(sp)
    2564:	ddc00817 	ldw	r23,32(sp)
    2568:	dd800717 	ldw	r22,28(sp)
    256c:	dd400617 	ldw	r21,24(sp)
    2570:	dd000517 	ldw	r20,20(sp)
    2574:	dcc00417 	ldw	r19,16(sp)
    2578:	dc800317 	ldw	r18,12(sp)
    257c:	dc400217 	ldw	r17,8(sp)
    2580:	dc000117 	ldw	r16,4(sp)
    2584:	dec00b04 	addi	sp,sp,44
    2588:	f800283a 	ret
    258c:	04400404 	movi	r17,16
    2590:	89407536 	bltu	r17,r5,2768 <_malloc_r+0x2c0>
    2594:	00055e40 	call	55e4 <__malloc_lock>
    2598:	003fd906 	br	2500 <__alt_mem_Flash_flash_data+0xf4002500>
    259c:	8806d27a 	srli	r3,r17,9
    25a0:	18007526 	beq	r3,zero,2778 <_malloc_r+0x2d0>
    25a4:	00800104 	movi	r2,4
    25a8:	10c0ef36 	bltu	r2,r3,2968 <_malloc_r+0x4c0>
    25ac:	8806d1ba 	srli	r3,r17,6
    25b0:	19c00e04 	addi	r7,r3,56
    25b4:	39cb883a 	add	r5,r7,r7
    25b8:	04c00074 	movhi	r19,1
    25bc:	294b883a 	add	r5,r5,r5
    25c0:	9cc6a404 	addi	r19,r19,6800
    25c4:	294b883a 	add	r5,r5,r5
    25c8:	994b883a 	add	r5,r19,r5
    25cc:	2c000317 	ldw	r16,12(r5)
    25d0:	2c000e26 	beq	r5,r16,260c <_malloc_r+0x164>
    25d4:	80800117 	ldw	r2,4(r16)
    25d8:	01bfff04 	movi	r6,-4
    25dc:	010003c4 	movi	r4,15
    25e0:	1184703a 	and	r2,r2,r6
    25e4:	1447c83a 	sub	r3,r2,r17
    25e8:	20c00716 	blt	r4,r3,2608 <_malloc_r+0x160>
    25ec:	1800650e 	bge	r3,zero,2784 <_malloc_r+0x2dc>
    25f0:	84000317 	ldw	r16,12(r16)
    25f4:	2c000526 	beq	r5,r16,260c <_malloc_r+0x164>
    25f8:	80800117 	ldw	r2,4(r16)
    25fc:	1184703a 	and	r2,r2,r6
    2600:	1447c83a 	sub	r3,r2,r17
    2604:	20fff90e 	bge	r4,r3,25ec <__alt_mem_Flash_flash_data+0xf40025ec>
    2608:	39ffffc4 	addi	r7,r7,-1
    260c:	38c00044 	addi	r3,r7,1
    2610:	01800074 	movhi	r6,1
    2614:	9c000417 	ldw	r16,16(r19)
    2618:	3186a404 	addi	r6,r6,6800
    261c:	32400204 	addi	r9,r6,8
    2620:	82410326 	beq	r16,r9,2a30 <_malloc_r+0x588>
    2624:	81000117 	ldw	r4,4(r16)
    2628:	00bfff04 	movi	r2,-4
    262c:	208e703a 	and	r7,r4,r2
    2630:	3c45c83a 	sub	r2,r7,r17
    2634:	010003c4 	movi	r4,15
    2638:	2080ee16 	blt	r4,r2,29f4 <_malloc_r+0x54c>
    263c:	32400515 	stw	r9,20(r6)
    2640:	32400415 	stw	r9,16(r6)
    2644:	1000510e 	bge	r2,zero,278c <_malloc_r+0x2e4>
    2648:	00807fc4 	movi	r2,511
    264c:	11c0ce36 	bltu	r2,r7,2988 <_malloc_r+0x4e0>
    2650:	3808d0fa 	srli	r4,r7,3
    2654:	01c00044 	movi	r7,1
    2658:	30800117 	ldw	r2,4(r6)
    265c:	210b883a 	add	r5,r4,r4
    2660:	294b883a 	add	r5,r5,r5
    2664:	2009d0ba 	srai	r4,r4,2
    2668:	294b883a 	add	r5,r5,r5
    266c:	298b883a 	add	r5,r5,r6
    2670:	2a000217 	ldw	r8,8(r5)
    2674:	3908983a 	sll	r4,r7,r4
    2678:	81400315 	stw	r5,12(r16)
    267c:	82000215 	stw	r8,8(r16)
    2680:	2088b03a 	or	r4,r4,r2
    2684:	2c000215 	stw	r16,8(r5)
    2688:	31000115 	stw	r4,4(r6)
    268c:	44000315 	stw	r16,12(r8)
    2690:	1805d0ba 	srai	r2,r3,2
    2694:	01400044 	movi	r5,1
    2698:	288a983a 	sll	r5,r5,r2
    269c:	21404336 	bltu	r4,r5,27ac <_malloc_r+0x304>
    26a0:	2144703a 	and	r2,r4,r5
    26a4:	10000a1e 	bne	r2,zero,26d0 <_malloc_r+0x228>
    26a8:	00bfff04 	movi	r2,-4
    26ac:	294b883a 	add	r5,r5,r5
    26b0:	1886703a 	and	r3,r3,r2
    26b4:	2144703a 	and	r2,r4,r5
    26b8:	18c00104 	addi	r3,r3,4
    26bc:	1000041e 	bne	r2,zero,26d0 <_malloc_r+0x228>
    26c0:	294b883a 	add	r5,r5,r5
    26c4:	2144703a 	and	r2,r4,r5
    26c8:	18c00104 	addi	r3,r3,4
    26cc:	103ffc26 	beq	r2,zero,26c0 <__alt_mem_Flash_flash_data+0xf40026c0>
    26d0:	023fff04 	movi	r8,-4
    26d4:	01c003c4 	movi	r7,15
    26d8:	18c5883a 	add	r2,r3,r3
    26dc:	1085883a 	add	r2,r2,r2
    26e0:	1085883a 	add	r2,r2,r2
    26e4:	9895883a 	add	r10,r19,r2
    26e8:	52c00304 	addi	r11,r10,12
    26ec:	1819883a 	mov	r12,r3
    26f0:	5c000017 	ldw	r16,0(r11)
    26f4:	59bffd04 	addi	r6,r11,-12
    26f8:	8180041e 	bne	r16,r6,270c <_malloc_r+0x264>
    26fc:	0000ce06 	br	2a38 <_malloc_r+0x590>
    2700:	2000d70e 	bge	r4,zero,2a60 <_malloc_r+0x5b8>
    2704:	84000317 	ldw	r16,12(r16)
    2708:	8180cb26 	beq	r16,r6,2a38 <_malloc_r+0x590>
    270c:	80800117 	ldw	r2,4(r16)
    2710:	1204703a 	and	r2,r2,r8
    2714:	1449c83a 	sub	r4,r2,r17
    2718:	393ff90e 	bge	r7,r4,2700 <__alt_mem_Flash_flash_data+0xf4002700>
    271c:	80800317 	ldw	r2,12(r16)
    2720:	80c00217 	ldw	r3,8(r16)
    2724:	89400054 	ori	r5,r17,1
    2728:	81400115 	stw	r5,4(r16)
    272c:	18800315 	stw	r2,12(r3)
    2730:	10c00215 	stw	r3,8(r2)
    2734:	8463883a 	add	r17,r16,r17
    2738:	9c400515 	stw	r17,20(r19)
    273c:	9c400415 	stw	r17,16(r19)
    2740:	20800054 	ori	r2,r4,1
    2744:	88800115 	stw	r2,4(r17)
    2748:	8a400315 	stw	r9,12(r17)
    274c:	8a400215 	stw	r9,8(r17)
    2750:	8923883a 	add	r17,r17,r4
    2754:	89000015 	stw	r4,0(r17)
    2758:	9009883a 	mov	r4,r18
    275c:	00057040 	call	5704 <__malloc_unlock>
    2760:	80800204 	addi	r2,r16,8
    2764:	003f7d06 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2768:	00800304 	movi	r2,12
    276c:	90800015 	stw	r2,0(r18)
    2770:	0005883a 	mov	r2,zero
    2774:	003f7906 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2778:	01401f84 	movi	r5,126
    277c:	01c00fc4 	movi	r7,63
    2780:	003f8d06 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2784:	81000317 	ldw	r4,12(r16)
    2788:	003f6a06 	br	2534 <__alt_mem_Flash_flash_data+0xf4002534>
    278c:	81c5883a 	add	r2,r16,r7
    2790:	10c00117 	ldw	r3,4(r2)
    2794:	9009883a 	mov	r4,r18
    2798:	18c00054 	ori	r3,r3,1
    279c:	10c00115 	stw	r3,4(r2)
    27a0:	00057040 	call	5704 <__malloc_unlock>
    27a4:	80800204 	addi	r2,r16,8
    27a8:	003f6c06 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    27ac:	9c000217 	ldw	r16,8(r19)
    27b0:	00bfff04 	movi	r2,-4
    27b4:	85800117 	ldw	r22,4(r16)
    27b8:	b0ac703a 	and	r22,r22,r2
    27bc:	b4400336 	bltu	r22,r17,27cc <_malloc_r+0x324>
    27c0:	b445c83a 	sub	r2,r22,r17
    27c4:	00c003c4 	movi	r3,15
    27c8:	18805d16 	blt	r3,r2,2940 <_malloc_r+0x498>
    27cc:	05c00074 	movhi	r23,1
    27d0:	00800074 	movhi	r2,1
    27d4:	bdcd1e04 	addi	r23,r23,13432
    27d8:	10951404 	addi	r2,r2,21584
    27dc:	15400017 	ldw	r21,0(r2)
    27e0:	b9000017 	ldw	r4,0(r23)
    27e4:	00ffffc4 	movi	r3,-1
    27e8:	858d883a 	add	r6,r16,r22
    27ec:	8d6b883a 	add	r21,r17,r21
    27f0:	20c0e426 	beq	r4,r3,2b84 <_malloc_r+0x6dc>
    27f4:	ad4403c4 	addi	r21,r21,4111
    27f8:	00fc0004 	movi	r3,-4096
    27fc:	a8ea703a 	and	r21,r21,r3
    2800:	9009883a 	mov	r4,r18
    2804:	a80b883a 	mov	r5,r21
    2808:	d9800015 	stw	r6,0(sp)
    280c:	00035340 	call	3534 <_sbrk_r>
    2810:	00ffffc4 	movi	r3,-1
    2814:	1029883a 	mov	r20,r2
    2818:	d9800017 	ldw	r6,0(sp)
    281c:	10c0a426 	beq	r2,r3,2ab0 <_malloc_r+0x608>
    2820:	1180a236 	bltu	r2,r6,2aac <_malloc_r+0x604>
    2824:	07000074 	movhi	fp,1
    2828:	e7153604 	addi	fp,fp,21720
    282c:	e0c00017 	ldw	r3,0(fp)
    2830:	a8c7883a 	add	r3,r21,r3
    2834:	e0c00015 	stw	r3,0(fp)
    2838:	3500da26 	beq	r6,r20,2ba4 <_malloc_r+0x6fc>
    283c:	b9000017 	ldw	r4,0(r23)
    2840:	00bfffc4 	movi	r2,-1
    2844:	2080e426 	beq	r4,r2,2bd8 <_malloc_r+0x730>
    2848:	a185c83a 	sub	r2,r20,r6
    284c:	1885883a 	add	r2,r3,r2
    2850:	e0800015 	stw	r2,0(fp)
    2854:	a0c001cc 	andi	r3,r20,7
    2858:	1800b526 	beq	r3,zero,2b30 <_malloc_r+0x688>
    285c:	a0e9c83a 	sub	r20,r20,r3
    2860:	00840204 	movi	r2,4104
    2864:	a5000204 	addi	r20,r20,8
    2868:	10c7c83a 	sub	r3,r2,r3
    286c:	a545883a 	add	r2,r20,r21
    2870:	1083ffcc 	andi	r2,r2,4095
    2874:	18abc83a 	sub	r21,r3,r2
    2878:	9009883a 	mov	r4,r18
    287c:	a80b883a 	mov	r5,r21
    2880:	00035340 	call	3534 <_sbrk_r>
    2884:	00ffffc4 	movi	r3,-1
    2888:	10c0d026 	beq	r2,r3,2bcc <_malloc_r+0x724>
    288c:	1507c83a 	sub	r3,r2,r20
    2890:	a8c7883a 	add	r3,r21,r3
    2894:	18c00054 	ori	r3,r3,1
    2898:	e0800017 	ldw	r2,0(fp)
    289c:	9d000215 	stw	r20,8(r19)
    28a0:	a0c00115 	stw	r3,4(r20)
    28a4:	a887883a 	add	r3,r21,r2
    28a8:	e0c00015 	stw	r3,0(fp)
    28ac:	84c00e26 	beq	r16,r19,28e8 <_malloc_r+0x440>
    28b0:	018003c4 	movi	r6,15
    28b4:	3580a02e 	bgeu	r6,r22,2b38 <_malloc_r+0x690>
    28b8:	81400117 	ldw	r5,4(r16)
    28bc:	013ffe04 	movi	r4,-8
    28c0:	b0bffd04 	addi	r2,r22,-12
    28c4:	1104703a 	and	r2,r2,r4
    28c8:	2900004c 	andi	r4,r5,1
    28cc:	1108b03a 	or	r4,r2,r4
    28d0:	81000115 	stw	r4,4(r16)
    28d4:	01400144 	movi	r5,5
    28d8:	8089883a 	add	r4,r16,r2
    28dc:	21400115 	stw	r5,4(r4)
    28e0:	21400215 	stw	r5,8(r4)
    28e4:	3080c036 	bltu	r6,r2,2be8 <_malloc_r+0x740>
    28e8:	00800074 	movhi	r2,1
    28ec:	10951304 	addi	r2,r2,21580
    28f0:	11000017 	ldw	r4,0(r2)
    28f4:	20c0012e 	bgeu	r4,r3,28fc <_malloc_r+0x454>
    28f8:	10c00015 	stw	r3,0(r2)
    28fc:	00800074 	movhi	r2,1
    2900:	10951204 	addi	r2,r2,21576
    2904:	11000017 	ldw	r4,0(r2)
    2908:	9c000217 	ldw	r16,8(r19)
    290c:	20c0012e 	bgeu	r4,r3,2914 <_malloc_r+0x46c>
    2910:	10c00015 	stw	r3,0(r2)
    2914:	80c00117 	ldw	r3,4(r16)
    2918:	00bfff04 	movi	r2,-4
    291c:	1886703a 	and	r3,r3,r2
    2920:	1c45c83a 	sub	r2,r3,r17
    2924:	1c400236 	bltu	r3,r17,2930 <_malloc_r+0x488>
    2928:	00c003c4 	movi	r3,15
    292c:	18800416 	blt	r3,r2,2940 <_malloc_r+0x498>
    2930:	9009883a 	mov	r4,r18
    2934:	00057040 	call	5704 <__malloc_unlock>
    2938:	0005883a 	mov	r2,zero
    293c:	003f0706 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2940:	88c00054 	ori	r3,r17,1
    2944:	80c00115 	stw	r3,4(r16)
    2948:	8463883a 	add	r17,r16,r17
    294c:	10800054 	ori	r2,r2,1
    2950:	9c400215 	stw	r17,8(r19)
    2954:	88800115 	stw	r2,4(r17)
    2958:	9009883a 	mov	r4,r18
    295c:	00057040 	call	5704 <__malloc_unlock>
    2960:	80800204 	addi	r2,r16,8
    2964:	003efd06 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2968:	00800504 	movi	r2,20
    296c:	10c0482e 	bgeu	r2,r3,2a90 <_malloc_r+0x5e8>
    2970:	00801504 	movi	r2,84
    2974:	10c06836 	bltu	r2,r3,2b18 <_malloc_r+0x670>
    2978:	8806d33a 	srli	r3,r17,12
    297c:	19c01b84 	addi	r7,r3,110
    2980:	39cb883a 	add	r5,r7,r7
    2984:	003f0c06 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2988:	3804d27a 	srli	r2,r7,9
    298c:	01000104 	movi	r4,4
    2990:	2080422e 	bgeu	r4,r2,2a9c <_malloc_r+0x5f4>
    2994:	01000504 	movi	r4,20
    2998:	20807c36 	bltu	r4,r2,2b8c <_malloc_r+0x6e4>
    299c:	110016c4 	addi	r4,r2,91
    29a0:	210b883a 	add	r5,r4,r4
    29a4:	294b883a 	add	r5,r5,r5
    29a8:	294b883a 	add	r5,r5,r5
    29ac:	994b883a 	add	r5,r19,r5
    29b0:	28800217 	ldw	r2,8(r5)
    29b4:	02000074 	movhi	r8,1
    29b8:	4206a404 	addi	r8,r8,6800
    29bc:	11406326 	beq	r2,r5,2b4c <_malloc_r+0x6a4>
    29c0:	01bfff04 	movi	r6,-4
    29c4:	11000117 	ldw	r4,4(r2)
    29c8:	2188703a 	and	r4,r4,r6
    29cc:	3900022e 	bgeu	r7,r4,29d8 <_malloc_r+0x530>
    29d0:	10800217 	ldw	r2,8(r2)
    29d4:	28bffb1e 	bne	r5,r2,29c4 <__alt_mem_Flash_flash_data+0xf40029c4>
    29d8:	11800317 	ldw	r6,12(r2)
    29dc:	99000117 	ldw	r4,4(r19)
    29e0:	81800315 	stw	r6,12(r16)
    29e4:	80800215 	stw	r2,8(r16)
    29e8:	34000215 	stw	r16,8(r6)
    29ec:	14000315 	stw	r16,12(r2)
    29f0:	003f2706 	br	2690 <__alt_mem_Flash_flash_data+0xf4002690>
    29f4:	88c00054 	ori	r3,r17,1
    29f8:	80c00115 	stw	r3,4(r16)
    29fc:	8463883a 	add	r17,r16,r17
    2a00:	34400515 	stw	r17,20(r6)
    2a04:	34400415 	stw	r17,16(r6)
    2a08:	10c00054 	ori	r3,r2,1
    2a0c:	8a400315 	stw	r9,12(r17)
    2a10:	8a400215 	stw	r9,8(r17)
    2a14:	88c00115 	stw	r3,4(r17)
    2a18:	88a3883a 	add	r17,r17,r2
    2a1c:	88800015 	stw	r2,0(r17)
    2a20:	9009883a 	mov	r4,r18
    2a24:	00057040 	call	5704 <__malloc_unlock>
    2a28:	80800204 	addi	r2,r16,8
    2a2c:	003ecb06 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2a30:	31000117 	ldw	r4,4(r6)
    2a34:	003f1606 	br	2690 <__alt_mem_Flash_flash_data+0xf4002690>
    2a38:	63000044 	addi	r12,r12,1
    2a3c:	608000cc 	andi	r2,r12,3
    2a40:	5ac00204 	addi	r11,r11,8
    2a44:	103f2a1e 	bne	r2,zero,26f0 <__alt_mem_Flash_flash_data+0xf40026f0>
    2a48:	00002106 	br	2ad0 <_malloc_r+0x628>
    2a4c:	80800204 	addi	r2,r16,8
    2a50:	84000517 	ldw	r16,20(r16)
    2a54:	143eb31e 	bne	r2,r16,2524 <__alt_mem_Flash_flash_data+0xf4002524>
    2a58:	18c00084 	addi	r3,r3,2
    2a5c:	003eec06 	br	2610 <__alt_mem_Flash_flash_data+0xf4002610>
    2a60:	8085883a 	add	r2,r16,r2
    2a64:	10c00117 	ldw	r3,4(r2)
    2a68:	81000317 	ldw	r4,12(r16)
    2a6c:	81400217 	ldw	r5,8(r16)
    2a70:	18c00054 	ori	r3,r3,1
    2a74:	10c00115 	stw	r3,4(r2)
    2a78:	29000315 	stw	r4,12(r5)
    2a7c:	21400215 	stw	r5,8(r4)
    2a80:	9009883a 	mov	r4,r18
    2a84:	00057040 	call	5704 <__malloc_unlock>
    2a88:	80800204 	addi	r2,r16,8
    2a8c:	003eb306 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2a90:	19c016c4 	addi	r7,r3,91
    2a94:	39cb883a 	add	r5,r7,r7
    2a98:	003ec706 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2a9c:	3804d1ba 	srli	r2,r7,6
    2aa0:	11000e04 	addi	r4,r2,56
    2aa4:	210b883a 	add	r5,r4,r4
    2aa8:	003fbe06 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2aac:	84ff5d26 	beq	r16,r19,2824 <__alt_mem_Flash_flash_data+0xf4002824>
    2ab0:	9c000217 	ldw	r16,8(r19)
    2ab4:	00bfff04 	movi	r2,-4
    2ab8:	80c00117 	ldw	r3,4(r16)
    2abc:	1886703a 	and	r3,r3,r2
    2ac0:	003f9706 	br	2920 <__alt_mem_Flash_flash_data+0xf4002920>
    2ac4:	52800017 	ldw	r10,0(r10)
    2ac8:	18ffffc4 	addi	r3,r3,-1
    2acc:	50805c1e 	bne	r10,r2,2c40 <_malloc_r+0x798>
    2ad0:	190000cc 	andi	r4,r3,3
    2ad4:	50bffe04 	addi	r2,r10,-8
    2ad8:	203ffa1e 	bne	r4,zero,2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2adc:	98800117 	ldw	r2,4(r19)
    2ae0:	0146303a 	nor	r3,zero,r5
    2ae4:	1884703a 	and	r2,r3,r2
    2ae8:	98800115 	stw	r2,4(r19)
    2aec:	294b883a 	add	r5,r5,r5
    2af0:	117f2e36 	bltu	r2,r5,27ac <__alt_mem_Flash_flash_data+0xf40027ac>
    2af4:	283f2d26 	beq	r5,zero,27ac <__alt_mem_Flash_flash_data+0xf40027ac>
    2af8:	1146703a 	and	r3,r2,r5
    2afc:	1800521e 	bne	r3,zero,2c48 <_malloc_r+0x7a0>
    2b00:	6007883a 	mov	r3,r12
    2b04:	294b883a 	add	r5,r5,r5
    2b08:	1148703a 	and	r4,r2,r5
    2b0c:	18c00104 	addi	r3,r3,4
    2b10:	203ffc26 	beq	r4,zero,2b04 <__alt_mem_Flash_flash_data+0xf4002b04>
    2b14:	003ef006 	br	26d8 <__alt_mem_Flash_flash_data+0xf40026d8>
    2b18:	00805504 	movi	r2,340
    2b1c:	10c01336 	bltu	r2,r3,2b6c <_malloc_r+0x6c4>
    2b20:	8806d3fa 	srli	r3,r17,15
    2b24:	19c01dc4 	addi	r7,r3,119
    2b28:	39cb883a 	add	r5,r7,r7
    2b2c:	003ea206 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2b30:	00c40004 	movi	r3,4096
    2b34:	003f4d06 	br	286c <__alt_mem_Flash_flash_data+0xf400286c>
    2b38:	00800044 	movi	r2,1
    2b3c:	a0800115 	stw	r2,4(r20)
    2b40:	a021883a 	mov	r16,r20
    2b44:	0007883a 	mov	r3,zero
    2b48:	003f7506 	br	2920 <__alt_mem_Flash_flash_data+0xf4002920>
    2b4c:	200bd0ba 	srai	r5,r4,2
    2b50:	01800044 	movi	r6,1
    2b54:	41000117 	ldw	r4,4(r8)
    2b58:	314a983a 	sll	r5,r6,r5
    2b5c:	100d883a 	mov	r6,r2
    2b60:	2908b03a 	or	r4,r5,r4
    2b64:	41000115 	stw	r4,4(r8)
    2b68:	003f9d06 	br	29e0 <__alt_mem_Flash_flash_data+0xf40029e0>
    2b6c:	00815504 	movi	r2,1364
    2b70:	10c01336 	bltu	r2,r3,2bc0 <_malloc_r+0x718>
    2b74:	8806d4ba 	srli	r3,r17,18
    2b78:	19c01f04 	addi	r7,r3,124
    2b7c:	39cb883a 	add	r5,r7,r7
    2b80:	003e8d06 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2b84:	ad400404 	addi	r21,r21,16
    2b88:	003f1d06 	br	2800 <__alt_mem_Flash_flash_data+0xf4002800>
    2b8c:	01001504 	movi	r4,84
    2b90:	20801c36 	bltu	r4,r2,2c04 <_malloc_r+0x75c>
    2b94:	3804d33a 	srli	r2,r7,12
    2b98:	11001b84 	addi	r4,r2,110
    2b9c:	210b883a 	add	r5,r4,r4
    2ba0:	003f8006 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2ba4:	3083ffcc 	andi	r2,r6,4095
    2ba8:	103f241e 	bne	r2,zero,283c <__alt_mem_Flash_flash_data+0xf400283c>
    2bac:	99000217 	ldw	r4,8(r19)
    2bb0:	ad85883a 	add	r2,r21,r22
    2bb4:	10800054 	ori	r2,r2,1
    2bb8:	20800115 	stw	r2,4(r4)
    2bbc:	003f4a06 	br	28e8 <__alt_mem_Flash_flash_data+0xf40028e8>
    2bc0:	01403f04 	movi	r5,252
    2bc4:	01c01f84 	movi	r7,126
    2bc8:	003e7b06 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2bcc:	00c00044 	movi	r3,1
    2bd0:	002b883a 	mov	r21,zero
    2bd4:	003f3006 	br	2898 <__alt_mem_Flash_flash_data+0xf4002898>
    2bd8:	00800074 	movhi	r2,1
    2bdc:	108d1e04 	addi	r2,r2,13432
    2be0:	15000015 	stw	r20,0(r2)
    2be4:	003f1b06 	br	2854 <__alt_mem_Flash_flash_data+0xf4002854>
    2be8:	9009883a 	mov	r4,r18
    2bec:	81400204 	addi	r5,r16,8
    2bf0:	0003e340 	call	3e34 <_free_r>
    2bf4:	00800074 	movhi	r2,1
    2bf8:	10953604 	addi	r2,r2,21720
    2bfc:	10c00017 	ldw	r3,0(r2)
    2c00:	003f3906 	br	28e8 <__alt_mem_Flash_flash_data+0xf40028e8>
    2c04:	01005504 	movi	r4,340
    2c08:	20800436 	bltu	r4,r2,2c1c <_malloc_r+0x774>
    2c0c:	3804d3fa 	srli	r2,r7,15
    2c10:	11001dc4 	addi	r4,r2,119
    2c14:	210b883a 	add	r5,r4,r4
    2c18:	003f6206 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2c1c:	01015504 	movi	r4,1364
    2c20:	20800436 	bltu	r4,r2,2c34 <_malloc_r+0x78c>
    2c24:	3804d4ba 	srli	r2,r7,18
    2c28:	11001f04 	addi	r4,r2,124
    2c2c:	210b883a 	add	r5,r4,r4
    2c30:	003f5c06 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2c34:	01403f04 	movi	r5,252
    2c38:	01001f84 	movi	r4,126
    2c3c:	003f5906 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2c40:	98800117 	ldw	r2,4(r19)
    2c44:	003fa906 	br	2aec <__alt_mem_Flash_flash_data+0xf4002aec>
    2c48:	6007883a 	mov	r3,r12
    2c4c:	003ea206 	br	26d8 <__alt_mem_Flash_flash_data+0xf40026d8>

00002c50 <memchr>:
    2c50:	208000cc 	andi	r2,r4,3
    2c54:	280f883a 	mov	r7,r5
    2c58:	10003526 	beq	r2,zero,2d30 <memchr+0xe0>
    2c5c:	30bfffc4 	addi	r2,r6,-1
    2c60:	30001b26 	beq	r6,zero,2cd0 <memchr+0x80>
    2c64:	21800003 	ldbu	r6,0(r4)
    2c68:	28c03fcc 	andi	r3,r5,255
    2c6c:	30c01a26 	beq	r6,r3,2cd8 <memchr+0x88>
    2c70:	180d883a 	mov	r6,r3
    2c74:	00000406 	br	2c88 <memchr+0x38>
    2c78:	10001526 	beq	r2,zero,2cd0 <memchr+0x80>
    2c7c:	20c00003 	ldbu	r3,0(r4)
    2c80:	10bfffc4 	addi	r2,r2,-1
    2c84:	19801426 	beq	r3,r6,2cd8 <memchr+0x88>
    2c88:	21000044 	addi	r4,r4,1
    2c8c:	20c000cc 	andi	r3,r4,3
    2c90:	183ff91e 	bne	r3,zero,2c78 <__alt_mem_Flash_flash_data+0xf4002c78>
    2c94:	024000c4 	movi	r9,3
    2c98:	48801136 	bltu	r9,r2,2ce0 <memchr+0x90>
    2c9c:	10000c26 	beq	r2,zero,2cd0 <memchr+0x80>
    2ca0:	20c00003 	ldbu	r3,0(r4)
    2ca4:	29403fcc 	andi	r5,r5,255
    2ca8:	19400b26 	beq	r3,r5,2cd8 <memchr+0x88>
    2cac:	20c00044 	addi	r3,r4,1
    2cb0:	2085883a 	add	r2,r4,r2
    2cb4:	39803fcc 	andi	r6,r7,255
    2cb8:	00000306 	br	2cc8 <memchr+0x78>
    2cbc:	18c00044 	addi	r3,r3,1
    2cc0:	197fffc3 	ldbu	r5,-1(r3)
    2cc4:	29800426 	beq	r5,r6,2cd8 <memchr+0x88>
    2cc8:	1809883a 	mov	r4,r3
    2ccc:	18bffb1e 	bne	r3,r2,2cbc <__alt_mem_Flash_flash_data+0xf4002cbc>
    2cd0:	0005883a 	mov	r2,zero
    2cd4:	f800283a 	ret
    2cd8:	2005883a 	mov	r2,r4
    2cdc:	f800283a 	ret
    2ce0:	28c03fcc 	andi	r3,r5,255
    2ce4:	1810923a 	slli	r8,r3,8
    2ce8:	02ffbff4 	movhi	r11,65279
    2cec:	02a02074 	movhi	r10,32897
    2cf0:	40c6b03a 	or	r3,r8,r3
    2cf4:	1810943a 	slli	r8,r3,16
    2cf8:	5affbfc4 	addi	r11,r11,-257
    2cfc:	52a02004 	addi	r10,r10,-32640
    2d00:	40d0b03a 	or	r8,r8,r3
    2d04:	20c00017 	ldw	r3,0(r4)
    2d08:	40c6f03a 	xor	r3,r8,r3
    2d0c:	1acd883a 	add	r6,r3,r11
    2d10:	00c6303a 	nor	r3,zero,r3
    2d14:	30c6703a 	and	r3,r6,r3
    2d18:	1a86703a 	and	r3,r3,r10
    2d1c:	183fdf1e 	bne	r3,zero,2c9c <__alt_mem_Flash_flash_data+0xf4002c9c>
    2d20:	10bfff04 	addi	r2,r2,-4
    2d24:	21000104 	addi	r4,r4,4
    2d28:	48bff636 	bltu	r9,r2,2d04 <__alt_mem_Flash_flash_data+0xf4002d04>
    2d2c:	003fdb06 	br	2c9c <__alt_mem_Flash_flash_data+0xf4002c9c>
    2d30:	3005883a 	mov	r2,r6
    2d34:	003fd706 	br	2c94 <__alt_mem_Flash_flash_data+0xf4002c94>

00002d38 <memcpy>:
    2d38:	deffff04 	addi	sp,sp,-4
    2d3c:	dc000015 	stw	r16,0(sp)
    2d40:	00c003c4 	movi	r3,15
    2d44:	2005883a 	mov	r2,r4
    2d48:	1980432e 	bgeu	r3,r6,2e58 <memcpy+0x120>
    2d4c:	2146b03a 	or	r3,r4,r5
    2d50:	18c000cc 	andi	r3,r3,3
    2d54:	1800421e 	bne	r3,zero,2e60 <memcpy+0x128>
    2d58:	343ffc04 	addi	r16,r6,-16
    2d5c:	8020d13a 	srli	r16,r16,4
    2d60:	28c00104 	addi	r3,r5,4
    2d64:	23400104 	addi	r13,r4,4
    2d68:	801e913a 	slli	r15,r16,4
    2d6c:	2b000204 	addi	r12,r5,8
    2d70:	22c00204 	addi	r11,r4,8
    2d74:	7bc00504 	addi	r15,r15,20
    2d78:	2a800304 	addi	r10,r5,12
    2d7c:	22400304 	addi	r9,r4,12
    2d80:	2bdf883a 	add	r15,r5,r15
    2d84:	2811883a 	mov	r8,r5
    2d88:	200f883a 	mov	r7,r4
    2d8c:	41000017 	ldw	r4,0(r8)
    2d90:	39c00404 	addi	r7,r7,16
    2d94:	18c00404 	addi	r3,r3,16
    2d98:	393ffc15 	stw	r4,-16(r7)
    2d9c:	1bbffc17 	ldw	r14,-16(r3)
    2da0:	6b400404 	addi	r13,r13,16
    2da4:	5ac00404 	addi	r11,r11,16
    2da8:	6bbffc15 	stw	r14,-16(r13)
    2dac:	63800017 	ldw	r14,0(r12)
    2db0:	4a400404 	addi	r9,r9,16
    2db4:	42000404 	addi	r8,r8,16
    2db8:	5bbffc15 	stw	r14,-16(r11)
    2dbc:	53800017 	ldw	r14,0(r10)
    2dc0:	63000404 	addi	r12,r12,16
    2dc4:	52800404 	addi	r10,r10,16
    2dc8:	4bbffc15 	stw	r14,-16(r9)
    2dcc:	1bffef1e 	bne	r3,r15,2d8c <__alt_mem_Flash_flash_data+0xf4002d8c>
    2dd0:	81c00044 	addi	r7,r16,1
    2dd4:	380e913a 	slli	r7,r7,4
    2dd8:	310003cc 	andi	r4,r6,15
    2ddc:	02c000c4 	movi	r11,3
    2de0:	11c7883a 	add	r3,r2,r7
    2de4:	29cb883a 	add	r5,r5,r7
    2de8:	59001f2e 	bgeu	r11,r4,2e68 <memcpy+0x130>
    2dec:	1813883a 	mov	r9,r3
    2df0:	2811883a 	mov	r8,r5
    2df4:	200f883a 	mov	r7,r4
    2df8:	42800017 	ldw	r10,0(r8)
    2dfc:	4a400104 	addi	r9,r9,4
    2e00:	39ffff04 	addi	r7,r7,-4
    2e04:	4abfff15 	stw	r10,-4(r9)
    2e08:	42000104 	addi	r8,r8,4
    2e0c:	59fffa36 	bltu	r11,r7,2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    2e10:	213fff04 	addi	r4,r4,-4
    2e14:	2008d0ba 	srli	r4,r4,2
    2e18:	318000cc 	andi	r6,r6,3
    2e1c:	21000044 	addi	r4,r4,1
    2e20:	2109883a 	add	r4,r4,r4
    2e24:	2109883a 	add	r4,r4,r4
    2e28:	1907883a 	add	r3,r3,r4
    2e2c:	290b883a 	add	r5,r5,r4
    2e30:	30000626 	beq	r6,zero,2e4c <memcpy+0x114>
    2e34:	198d883a 	add	r6,r3,r6
    2e38:	29c00003 	ldbu	r7,0(r5)
    2e3c:	18c00044 	addi	r3,r3,1
    2e40:	29400044 	addi	r5,r5,1
    2e44:	19ffffc5 	stb	r7,-1(r3)
    2e48:	19bffb1e 	bne	r3,r6,2e38 <__alt_mem_Flash_flash_data+0xf4002e38>
    2e4c:	dc000017 	ldw	r16,0(sp)
    2e50:	dec00104 	addi	sp,sp,4
    2e54:	f800283a 	ret
    2e58:	2007883a 	mov	r3,r4
    2e5c:	003ff406 	br	2e30 <__alt_mem_Flash_flash_data+0xf4002e30>
    2e60:	2007883a 	mov	r3,r4
    2e64:	003ff306 	br	2e34 <__alt_mem_Flash_flash_data+0xf4002e34>
    2e68:	200d883a 	mov	r6,r4
    2e6c:	003ff006 	br	2e30 <__alt_mem_Flash_flash_data+0xf4002e30>

00002e70 <memmove>:
    2e70:	2005883a 	mov	r2,r4
    2e74:	29000b2e 	bgeu	r5,r4,2ea4 <memmove+0x34>
    2e78:	298f883a 	add	r7,r5,r6
    2e7c:	21c0092e 	bgeu	r4,r7,2ea4 <memmove+0x34>
    2e80:	2187883a 	add	r3,r4,r6
    2e84:	198bc83a 	sub	r5,r3,r6
    2e88:	30004b26 	beq	r6,zero,2fb8 <memmove+0x148>
    2e8c:	39ffffc4 	addi	r7,r7,-1
    2e90:	39000003 	ldbu	r4,0(r7)
    2e94:	18ffffc4 	addi	r3,r3,-1
    2e98:	19000005 	stb	r4,0(r3)
    2e9c:	197ffb1e 	bne	r3,r5,2e8c <__alt_mem_Flash_flash_data+0xf4002e8c>
    2ea0:	f800283a 	ret
    2ea4:	00c003c4 	movi	r3,15
    2ea8:	1980412e 	bgeu	r3,r6,2fb0 <memmove+0x140>
    2eac:	1146b03a 	or	r3,r2,r5
    2eb0:	18c000cc 	andi	r3,r3,3
    2eb4:	1800411e 	bne	r3,zero,2fbc <memmove+0x14c>
    2eb8:	33fffc04 	addi	r15,r6,-16
    2ebc:	781ed13a 	srli	r15,r15,4
    2ec0:	28c00104 	addi	r3,r5,4
    2ec4:	13400104 	addi	r13,r2,4
    2ec8:	781c913a 	slli	r14,r15,4
    2ecc:	2b000204 	addi	r12,r5,8
    2ed0:	12c00204 	addi	r11,r2,8
    2ed4:	73800504 	addi	r14,r14,20
    2ed8:	2a800304 	addi	r10,r5,12
    2edc:	12400304 	addi	r9,r2,12
    2ee0:	2b9d883a 	add	r14,r5,r14
    2ee4:	2811883a 	mov	r8,r5
    2ee8:	100f883a 	mov	r7,r2
    2eec:	41000017 	ldw	r4,0(r8)
    2ef0:	39c00404 	addi	r7,r7,16
    2ef4:	18c00404 	addi	r3,r3,16
    2ef8:	393ffc15 	stw	r4,-16(r7)
    2efc:	193ffc17 	ldw	r4,-16(r3)
    2f00:	6b400404 	addi	r13,r13,16
    2f04:	5ac00404 	addi	r11,r11,16
    2f08:	693ffc15 	stw	r4,-16(r13)
    2f0c:	61000017 	ldw	r4,0(r12)
    2f10:	4a400404 	addi	r9,r9,16
    2f14:	42000404 	addi	r8,r8,16
    2f18:	593ffc15 	stw	r4,-16(r11)
    2f1c:	51000017 	ldw	r4,0(r10)
    2f20:	63000404 	addi	r12,r12,16
    2f24:	52800404 	addi	r10,r10,16
    2f28:	493ffc15 	stw	r4,-16(r9)
    2f2c:	1bbfef1e 	bne	r3,r14,2eec <__alt_mem_Flash_flash_data+0xf4002eec>
    2f30:	79000044 	addi	r4,r15,1
    2f34:	2008913a 	slli	r4,r4,4
    2f38:	328003cc 	andi	r10,r6,15
    2f3c:	02c000c4 	movi	r11,3
    2f40:	1107883a 	add	r3,r2,r4
    2f44:	290b883a 	add	r5,r5,r4
    2f48:	5a801e2e 	bgeu	r11,r10,2fc4 <memmove+0x154>
    2f4c:	1813883a 	mov	r9,r3
    2f50:	2811883a 	mov	r8,r5
    2f54:	500f883a 	mov	r7,r10
    2f58:	41000017 	ldw	r4,0(r8)
    2f5c:	4a400104 	addi	r9,r9,4
    2f60:	39ffff04 	addi	r7,r7,-4
    2f64:	493fff15 	stw	r4,-4(r9)
    2f68:	42000104 	addi	r8,r8,4
    2f6c:	59fffa36 	bltu	r11,r7,2f58 <__alt_mem_Flash_flash_data+0xf4002f58>
    2f70:	513fff04 	addi	r4,r10,-4
    2f74:	2008d0ba 	srli	r4,r4,2
    2f78:	318000cc 	andi	r6,r6,3
    2f7c:	21000044 	addi	r4,r4,1
    2f80:	2109883a 	add	r4,r4,r4
    2f84:	2109883a 	add	r4,r4,r4
    2f88:	1907883a 	add	r3,r3,r4
    2f8c:	290b883a 	add	r5,r5,r4
    2f90:	30000926 	beq	r6,zero,2fb8 <memmove+0x148>
    2f94:	198d883a 	add	r6,r3,r6
    2f98:	29c00003 	ldbu	r7,0(r5)
    2f9c:	18c00044 	addi	r3,r3,1
    2fa0:	29400044 	addi	r5,r5,1
    2fa4:	19ffffc5 	stb	r7,-1(r3)
    2fa8:	19bffb1e 	bne	r3,r6,2f98 <__alt_mem_Flash_flash_data+0xf4002f98>
    2fac:	f800283a 	ret
    2fb0:	1007883a 	mov	r3,r2
    2fb4:	003ff606 	br	2f90 <__alt_mem_Flash_flash_data+0xf4002f90>
    2fb8:	f800283a 	ret
    2fbc:	1007883a 	mov	r3,r2
    2fc0:	003ff406 	br	2f94 <__alt_mem_Flash_flash_data+0xf4002f94>
    2fc4:	500d883a 	mov	r6,r10
    2fc8:	003ff106 	br	2f90 <__alt_mem_Flash_flash_data+0xf4002f90>

00002fcc <_realloc_r>:
    2fcc:	defff604 	addi	sp,sp,-40
    2fd0:	dd000415 	stw	r20,16(sp)
    2fd4:	dc400115 	stw	r17,4(sp)
    2fd8:	dfc00915 	stw	ra,36(sp)
    2fdc:	df000815 	stw	fp,32(sp)
    2fe0:	ddc00715 	stw	r23,28(sp)
    2fe4:	dd800615 	stw	r22,24(sp)
    2fe8:	dd400515 	stw	r21,20(sp)
    2fec:	dcc00315 	stw	r19,12(sp)
    2ff0:	dc800215 	stw	r18,8(sp)
    2ff4:	dc000015 	stw	r16,0(sp)
    2ff8:	2829883a 	mov	r20,r5
    2ffc:	3023883a 	mov	r17,r6
    3000:	2800ad26 	beq	r5,zero,32b8 <_realloc_r+0x2ec>
    3004:	2025883a 	mov	r18,r4
    3008:	00055e40 	call	55e4 <__malloc_lock>
    300c:	a0ffff17 	ldw	r3,-4(r20)
    3010:	043fff04 	movi	r16,-4
    3014:	890002c4 	addi	r4,r17,11
    3018:	01c00584 	movi	r7,22
    301c:	a57ffe04 	addi	r21,r20,-8
    3020:	1c20703a 	and	r16,r3,r16
    3024:	39001d2e 	bgeu	r7,r4,309c <_realloc_r+0xd0>
    3028:	05bffe04 	movi	r22,-8
    302c:	25ac703a 	and	r22,r4,r22
    3030:	b00f883a 	mov	r7,r22
    3034:	b0006516 	blt	r22,zero,31cc <_realloc_r+0x200>
    3038:	b4406436 	bltu	r22,r17,31cc <_realloc_r+0x200>
    303c:	81c01a0e 	bge	r16,r7,30a8 <_realloc_r+0xdc>
    3040:	07000074 	movhi	fp,1
    3044:	e706a404 	addi	fp,fp,6800
    3048:	e1400217 	ldw	r5,8(fp)
    304c:	ac11883a 	add	r8,r21,r16
    3050:	2a006226 	beq	r5,r8,31dc <_realloc_r+0x210>
    3054:	41800117 	ldw	r6,4(r8)
    3058:	027fff84 	movi	r9,-2
    305c:	3252703a 	and	r9,r6,r9
    3060:	4253883a 	add	r9,r8,r9
    3064:	49000117 	ldw	r4,4(r9)
    3068:	2100004c 	andi	r4,r4,1
    306c:	2000281e 	bne	r4,zero,3110 <_realloc_r+0x144>
    3070:	00bfff04 	movi	r2,-4
    3074:	3084703a 	and	r2,r6,r2
    3078:	1409883a 	add	r4,r2,r16
    307c:	21c05e16 	blt	r4,r7,31f8 <_realloc_r+0x22c>
    3080:	40800317 	ldw	r2,12(r8)
    3084:	41400217 	ldw	r5,8(r8)
    3088:	a023883a 	mov	r17,r20
    308c:	2021883a 	mov	r16,r4
    3090:	28800315 	stw	r2,12(r5)
    3094:	11400215 	stw	r5,8(r2)
    3098:	00000406 	br	30ac <_realloc_r+0xe0>
    309c:	01c00404 	movi	r7,16
    30a0:	382d883a 	mov	r22,r7
    30a4:	003fe406 	br	3038 <__alt_mem_Flash_flash_data+0xf4003038>
    30a8:	a023883a 	mov	r17,r20
    30ac:	858fc83a 	sub	r7,r16,r22
    30b0:	008003c4 	movi	r2,15
    30b4:	18c0004c 	andi	r3,r3,1
    30b8:	11c07236 	bltu	r2,r7,3284 <_realloc_r+0x2b8>
    30bc:	1c06b03a 	or	r3,r3,r16
    30c0:	a8c00115 	stw	r3,4(r21)
    30c4:	ac21883a 	add	r16,r21,r16
    30c8:	80800117 	ldw	r2,4(r16)
    30cc:	10800054 	ori	r2,r2,1
    30d0:	80800115 	stw	r2,4(r16)
    30d4:	9009883a 	mov	r4,r18
    30d8:	00057040 	call	5704 <__malloc_unlock>
    30dc:	8805883a 	mov	r2,r17
    30e0:	dfc00917 	ldw	ra,36(sp)
    30e4:	df000817 	ldw	fp,32(sp)
    30e8:	ddc00717 	ldw	r23,28(sp)
    30ec:	dd800617 	ldw	r22,24(sp)
    30f0:	dd400517 	ldw	r21,20(sp)
    30f4:	dd000417 	ldw	r20,16(sp)
    30f8:	dcc00317 	ldw	r19,12(sp)
    30fc:	dc800217 	ldw	r18,8(sp)
    3100:	dc400117 	ldw	r17,4(sp)
    3104:	dc000017 	ldw	r16,0(sp)
    3108:	dec00a04 	addi	sp,sp,40
    310c:	f800283a 	ret
    3110:	18c0004c 	andi	r3,r3,1
    3114:	1800081e 	bne	r3,zero,3138 <_realloc_r+0x16c>
    3118:	a4fffe17 	ldw	r19,-8(r20)
    311c:	00bfff04 	movi	r2,-4
    3120:	ace7c83a 	sub	r19,r21,r19
    3124:	98c00117 	ldw	r3,4(r19)
    3128:	1886703a 	and	r3,r3,r2
    312c:	98000226 	beq	r19,zero,3138 <_realloc_r+0x16c>
    3130:	1c2f883a 	add	r23,r3,r16
    3134:	b9c06d0e 	bge	r23,r7,32ec <_realloc_r+0x320>
    3138:	880b883a 	mov	r5,r17
    313c:	9009883a 	mov	r4,r18
    3140:	00024a80 	call	24a8 <_malloc_r>
    3144:	1023883a 	mov	r17,r2
    3148:	1000ef26 	beq	r2,zero,3508 <_realloc_r+0x53c>
    314c:	a0ffff17 	ldw	r3,-4(r20)
    3150:	113ffe04 	addi	r4,r2,-8
    3154:	00bfff84 	movi	r2,-2
    3158:	1884703a 	and	r2,r3,r2
    315c:	a885883a 	add	r2,r21,r2
    3160:	2080bf26 	beq	r4,r2,3460 <_realloc_r+0x494>
    3164:	81bfff04 	addi	r6,r16,-4
    3168:	00800904 	movi	r2,36
    316c:	11808936 	bltu	r2,r6,3394 <_realloc_r+0x3c8>
    3170:	00c004c4 	movi	r3,19
    3174:	19806c2e 	bgeu	r3,r6,3328 <_realloc_r+0x35c>
    3178:	a0c00017 	ldw	r3,0(r20)
    317c:	88c00015 	stw	r3,0(r17)
    3180:	a0c00117 	ldw	r3,4(r20)
    3184:	88c00115 	stw	r3,4(r17)
    3188:	00c006c4 	movi	r3,27
    318c:	1980ac36 	bltu	r3,r6,3440 <_realloc_r+0x474>
    3190:	88800204 	addi	r2,r17,8
    3194:	a0c00204 	addi	r3,r20,8
    3198:	19000017 	ldw	r4,0(r3)
    319c:	11000015 	stw	r4,0(r2)
    31a0:	19000117 	ldw	r4,4(r3)
    31a4:	11000115 	stw	r4,4(r2)
    31a8:	18c00217 	ldw	r3,8(r3)
    31ac:	10c00215 	stw	r3,8(r2)
    31b0:	a00b883a 	mov	r5,r20
    31b4:	9009883a 	mov	r4,r18
    31b8:	0003e340 	call	3e34 <_free_r>
    31bc:	9009883a 	mov	r4,r18
    31c0:	00057040 	call	5704 <__malloc_unlock>
    31c4:	8805883a 	mov	r2,r17
    31c8:	003fc506 	br	30e0 <__alt_mem_Flash_flash_data+0xf40030e0>
    31cc:	00800304 	movi	r2,12
    31d0:	90800015 	stw	r2,0(r18)
    31d4:	0005883a 	mov	r2,zero
    31d8:	003fc106 	br	30e0 <__alt_mem_Flash_flash_data+0xf40030e0>
    31dc:	29800117 	ldw	r6,4(r5)
    31e0:	00bfff04 	movi	r2,-4
    31e4:	b1000404 	addi	r4,r22,16
    31e8:	3084703a 	and	r2,r6,r2
    31ec:	140d883a 	add	r6,r2,r16
    31f0:	31005b0e 	bge	r6,r4,3360 <_realloc_r+0x394>
    31f4:	2811883a 	mov	r8,r5
    31f8:	18c0004c 	andi	r3,r3,1
    31fc:	183fce1e 	bne	r3,zero,3138 <__alt_mem_Flash_flash_data+0xf4003138>
    3200:	a4fffe17 	ldw	r19,-8(r20)
    3204:	00ffff04 	movi	r3,-4
    3208:	ace7c83a 	sub	r19,r21,r19
    320c:	99000117 	ldw	r4,4(r19)
    3210:	20c6703a 	and	r3,r4,r3
    3214:	403fc526 	beq	r8,zero,312c <__alt_mem_Flash_flash_data+0xf400312c>
    3218:	1c2f883a 	add	r23,r3,r16
    321c:	b8af883a 	add	r23,r23,r2
    3220:	41406026 	beq	r8,r5,33a4 <_realloc_r+0x3d8>
    3224:	b9ffc116 	blt	r23,r7,312c <__alt_mem_Flash_flash_data+0xf400312c>
    3228:	40c00217 	ldw	r3,8(r8)
    322c:	40800317 	ldw	r2,12(r8)
    3230:	81bfff04 	addi	r6,r16,-4
    3234:	01000904 	movi	r4,36
    3238:	18800315 	stw	r2,12(r3)
    323c:	10c00215 	stw	r3,8(r2)
    3240:	99400217 	ldw	r5,8(r19)
    3244:	98c00317 	ldw	r3,12(r19)
    3248:	9c400204 	addi	r17,r19,8
    324c:	28c00315 	stw	r3,12(r5)
    3250:	19400215 	stw	r5,8(r3)
    3254:	21802d36 	bltu	r4,r6,330c <_realloc_r+0x340>
    3258:	008004c4 	movi	r2,19
    325c:	1180352e 	bgeu	r2,r6,3334 <_realloc_r+0x368>
    3260:	a0800017 	ldw	r2,0(r20)
    3264:	98800215 	stw	r2,8(r19)
    3268:	a0800117 	ldw	r2,4(r20)
    326c:	98800315 	stw	r2,12(r19)
    3270:	008006c4 	movi	r2,27
    3274:	11808036 	bltu	r2,r6,3478 <_realloc_r+0x4ac>
    3278:	98c00404 	addi	r3,r19,16
    327c:	a5000204 	addi	r20,r20,8
    3280:	00002d06 	br	3338 <_realloc_r+0x36c>
    3284:	1d86b03a 	or	r3,r3,r22
    3288:	ad8b883a 	add	r5,r21,r22
    328c:	a8c00115 	stw	r3,4(r21)
    3290:	38800054 	ori	r2,r7,1
    3294:	28800115 	stw	r2,4(r5)
    3298:	29cf883a 	add	r7,r5,r7
    329c:	38800117 	ldw	r2,4(r7)
    32a0:	9009883a 	mov	r4,r18
    32a4:	29400204 	addi	r5,r5,8
    32a8:	10800054 	ori	r2,r2,1
    32ac:	38800115 	stw	r2,4(r7)
    32b0:	0003e340 	call	3e34 <_free_r>
    32b4:	003f8706 	br	30d4 <__alt_mem_Flash_flash_data+0xf40030d4>
    32b8:	300b883a 	mov	r5,r6
    32bc:	dfc00917 	ldw	ra,36(sp)
    32c0:	df000817 	ldw	fp,32(sp)
    32c4:	ddc00717 	ldw	r23,28(sp)
    32c8:	dd800617 	ldw	r22,24(sp)
    32cc:	dd400517 	ldw	r21,20(sp)
    32d0:	dd000417 	ldw	r20,16(sp)
    32d4:	dcc00317 	ldw	r19,12(sp)
    32d8:	dc800217 	ldw	r18,8(sp)
    32dc:	dc400117 	ldw	r17,4(sp)
    32e0:	dc000017 	ldw	r16,0(sp)
    32e4:	dec00a04 	addi	sp,sp,40
    32e8:	00024a81 	jmpi	24a8 <_malloc_r>
    32ec:	98800317 	ldw	r2,12(r19)
    32f0:	98c00217 	ldw	r3,8(r19)
    32f4:	81bfff04 	addi	r6,r16,-4
    32f8:	01000904 	movi	r4,36
    32fc:	18800315 	stw	r2,12(r3)
    3300:	10c00215 	stw	r3,8(r2)
    3304:	9c400204 	addi	r17,r19,8
    3308:	21bfd32e 	bgeu	r4,r6,3258 <__alt_mem_Flash_flash_data+0xf4003258>
    330c:	8809883a 	mov	r4,r17
    3310:	a00b883a 	mov	r5,r20
    3314:	0002e700 	call	2e70 <memmove>
    3318:	98c00117 	ldw	r3,4(r19)
    331c:	b821883a 	mov	r16,r23
    3320:	982b883a 	mov	r21,r19
    3324:	003f6106 	br	30ac <__alt_mem_Flash_flash_data+0xf40030ac>
    3328:	8805883a 	mov	r2,r17
    332c:	a007883a 	mov	r3,r20
    3330:	003f9906 	br	3198 <__alt_mem_Flash_flash_data+0xf4003198>
    3334:	8807883a 	mov	r3,r17
    3338:	a0800017 	ldw	r2,0(r20)
    333c:	b821883a 	mov	r16,r23
    3340:	982b883a 	mov	r21,r19
    3344:	18800015 	stw	r2,0(r3)
    3348:	a0800117 	ldw	r2,4(r20)
    334c:	18800115 	stw	r2,4(r3)
    3350:	a0800217 	ldw	r2,8(r20)
    3354:	18800215 	stw	r2,8(r3)
    3358:	98c00117 	ldw	r3,4(r19)
    335c:	003f5306 	br	30ac <__alt_mem_Flash_flash_data+0xf40030ac>
    3360:	adab883a 	add	r21,r21,r22
    3364:	3585c83a 	sub	r2,r6,r22
    3368:	e5400215 	stw	r21,8(fp)
    336c:	10800054 	ori	r2,r2,1
    3370:	a8800115 	stw	r2,4(r21)
    3374:	a0bfff17 	ldw	r2,-4(r20)
    3378:	9009883a 	mov	r4,r18
    337c:	1080004c 	andi	r2,r2,1
    3380:	b0acb03a 	or	r22,r22,r2
    3384:	a5bfff15 	stw	r22,-4(r20)
    3388:	00057040 	call	5704 <__malloc_unlock>
    338c:	a005883a 	mov	r2,r20
    3390:	003f5306 	br	30e0 <__alt_mem_Flash_flash_data+0xf40030e0>
    3394:	8809883a 	mov	r4,r17
    3398:	a00b883a 	mov	r5,r20
    339c:	0002e700 	call	2e70 <memmove>
    33a0:	003f8306 	br	31b0 <__alt_mem_Flash_flash_data+0xf40031b0>
    33a4:	b0800404 	addi	r2,r22,16
    33a8:	b8bf6016 	blt	r23,r2,312c <__alt_mem_Flash_flash_data+0xf400312c>
    33ac:	98800317 	ldw	r2,12(r19)
    33b0:	98c00217 	ldw	r3,8(r19)
    33b4:	81bfff04 	addi	r6,r16,-4
    33b8:	01000904 	movi	r4,36
    33bc:	18800315 	stw	r2,12(r3)
    33c0:	10c00215 	stw	r3,8(r2)
    33c4:	9c400204 	addi	r17,r19,8
    33c8:	21804336 	bltu	r4,r6,34d8 <_realloc_r+0x50c>
    33cc:	008004c4 	movi	r2,19
    33d0:	11803f2e 	bgeu	r2,r6,34d0 <_realloc_r+0x504>
    33d4:	a0800017 	ldw	r2,0(r20)
    33d8:	98800215 	stw	r2,8(r19)
    33dc:	a0800117 	ldw	r2,4(r20)
    33e0:	98800315 	stw	r2,12(r19)
    33e4:	008006c4 	movi	r2,27
    33e8:	11803f36 	bltu	r2,r6,34e8 <_realloc_r+0x51c>
    33ec:	98800404 	addi	r2,r19,16
    33f0:	a5000204 	addi	r20,r20,8
    33f4:	a0c00017 	ldw	r3,0(r20)
    33f8:	10c00015 	stw	r3,0(r2)
    33fc:	a0c00117 	ldw	r3,4(r20)
    3400:	10c00115 	stw	r3,4(r2)
    3404:	a0c00217 	ldw	r3,8(r20)
    3408:	10c00215 	stw	r3,8(r2)
    340c:	9d87883a 	add	r3,r19,r22
    3410:	bd85c83a 	sub	r2,r23,r22
    3414:	e0c00215 	stw	r3,8(fp)
    3418:	10800054 	ori	r2,r2,1
    341c:	18800115 	stw	r2,4(r3)
    3420:	98800117 	ldw	r2,4(r19)
    3424:	9009883a 	mov	r4,r18
    3428:	1080004c 	andi	r2,r2,1
    342c:	b0acb03a 	or	r22,r22,r2
    3430:	9d800115 	stw	r22,4(r19)
    3434:	00057040 	call	5704 <__malloc_unlock>
    3438:	8805883a 	mov	r2,r17
    343c:	003f2806 	br	30e0 <__alt_mem_Flash_flash_data+0xf40030e0>
    3440:	a0c00217 	ldw	r3,8(r20)
    3444:	88c00215 	stw	r3,8(r17)
    3448:	a0c00317 	ldw	r3,12(r20)
    344c:	88c00315 	stw	r3,12(r17)
    3450:	30801126 	beq	r6,r2,3498 <_realloc_r+0x4cc>
    3454:	88800404 	addi	r2,r17,16
    3458:	a0c00404 	addi	r3,r20,16
    345c:	003f4e06 	br	3198 <__alt_mem_Flash_flash_data+0xf4003198>
    3460:	893fff17 	ldw	r4,-4(r17)
    3464:	00bfff04 	movi	r2,-4
    3468:	a023883a 	mov	r17,r20
    346c:	2084703a 	and	r2,r4,r2
    3470:	80a1883a 	add	r16,r16,r2
    3474:	003f0d06 	br	30ac <__alt_mem_Flash_flash_data+0xf40030ac>
    3478:	a0800217 	ldw	r2,8(r20)
    347c:	98800415 	stw	r2,16(r19)
    3480:	a0800317 	ldw	r2,12(r20)
    3484:	98800515 	stw	r2,20(r19)
    3488:	31000a26 	beq	r6,r4,34b4 <_realloc_r+0x4e8>
    348c:	98c00604 	addi	r3,r19,24
    3490:	a5000404 	addi	r20,r20,16
    3494:	003fa806 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    3498:	a1000417 	ldw	r4,16(r20)
    349c:	88800604 	addi	r2,r17,24
    34a0:	a0c00604 	addi	r3,r20,24
    34a4:	89000415 	stw	r4,16(r17)
    34a8:	a1000517 	ldw	r4,20(r20)
    34ac:	89000515 	stw	r4,20(r17)
    34b0:	003f3906 	br	3198 <__alt_mem_Flash_flash_data+0xf4003198>
    34b4:	a0800417 	ldw	r2,16(r20)
    34b8:	a5000604 	addi	r20,r20,24
    34bc:	98c00804 	addi	r3,r19,32
    34c0:	98800615 	stw	r2,24(r19)
    34c4:	a0bfff17 	ldw	r2,-4(r20)
    34c8:	98800715 	stw	r2,28(r19)
    34cc:	003f9a06 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    34d0:	8805883a 	mov	r2,r17
    34d4:	003fc706 	br	33f4 <__alt_mem_Flash_flash_data+0xf40033f4>
    34d8:	8809883a 	mov	r4,r17
    34dc:	a00b883a 	mov	r5,r20
    34e0:	0002e700 	call	2e70 <memmove>
    34e4:	003fc906 	br	340c <__alt_mem_Flash_flash_data+0xf400340c>
    34e8:	a0800217 	ldw	r2,8(r20)
    34ec:	98800415 	stw	r2,16(r19)
    34f0:	a0800317 	ldw	r2,12(r20)
    34f4:	98800515 	stw	r2,20(r19)
    34f8:	31000726 	beq	r6,r4,3518 <_realloc_r+0x54c>
    34fc:	98800604 	addi	r2,r19,24
    3500:	a5000404 	addi	r20,r20,16
    3504:	003fbb06 	br	33f4 <__alt_mem_Flash_flash_data+0xf40033f4>
    3508:	9009883a 	mov	r4,r18
    350c:	00057040 	call	5704 <__malloc_unlock>
    3510:	0005883a 	mov	r2,zero
    3514:	003ef206 	br	30e0 <__alt_mem_Flash_flash_data+0xf40030e0>
    3518:	a0c00417 	ldw	r3,16(r20)
    351c:	a5000604 	addi	r20,r20,24
    3520:	98800804 	addi	r2,r19,32
    3524:	98c00615 	stw	r3,24(r19)
    3528:	a0ffff17 	ldw	r3,-4(r20)
    352c:	98c00715 	stw	r3,28(r19)
    3530:	003fb006 	br	33f4 <__alt_mem_Flash_flash_data+0xf40033f4>

00003534 <_sbrk_r>:
    3534:	defffd04 	addi	sp,sp,-12
    3538:	dc000015 	stw	r16,0(sp)
    353c:	04000074 	movhi	r16,1
    3540:	dc400115 	stw	r17,4(sp)
    3544:	84151504 	addi	r16,r16,21588
    3548:	2023883a 	mov	r17,r4
    354c:	2809883a 	mov	r4,r5
    3550:	dfc00215 	stw	ra,8(sp)
    3554:	80000015 	stw	zero,0(r16)
    3558:	00052d00 	call	52d0 <sbrk>
    355c:	00ffffc4 	movi	r3,-1
    3560:	10c00526 	beq	r2,r3,3578 <_sbrk_r+0x44>
    3564:	dfc00217 	ldw	ra,8(sp)
    3568:	dc400117 	ldw	r17,4(sp)
    356c:	dc000017 	ldw	r16,0(sp)
    3570:	dec00304 	addi	sp,sp,12
    3574:	f800283a 	ret
    3578:	80c00017 	ldw	r3,0(r16)
    357c:	183ff926 	beq	r3,zero,3564 <__alt_mem_Flash_flash_data+0xf4003564>
    3580:	88c00015 	stw	r3,0(r17)
    3584:	003ff706 	br	3564 <__alt_mem_Flash_flash_data+0xf4003564>

00003588 <__swsetup_r>:
    3588:	00800074 	movhi	r2,1
    358c:	defffd04 	addi	sp,sp,-12
    3590:	108d1d04 	addi	r2,r2,13428
    3594:	dc400115 	stw	r17,4(sp)
    3598:	2023883a 	mov	r17,r4
    359c:	11000017 	ldw	r4,0(r2)
    35a0:	dc000015 	stw	r16,0(sp)
    35a4:	dfc00215 	stw	ra,8(sp)
    35a8:	2821883a 	mov	r16,r5
    35ac:	20000226 	beq	r4,zero,35b8 <__swsetup_r+0x30>
    35b0:	20c00e17 	ldw	r3,56(r4)
    35b4:	18003126 	beq	r3,zero,367c <__swsetup_r+0xf4>
    35b8:	8080030b 	ldhu	r2,12(r16)
    35bc:	10c0020c 	andi	r3,r2,8
    35c0:	100d883a 	mov	r6,r2
    35c4:	18000f26 	beq	r3,zero,3604 <__swsetup_r+0x7c>
    35c8:	80c00417 	ldw	r3,16(r16)
    35cc:	18001526 	beq	r3,zero,3624 <__swsetup_r+0x9c>
    35d0:	1100004c 	andi	r4,r2,1
    35d4:	20001c1e 	bne	r4,zero,3648 <__swsetup_r+0xc0>
    35d8:	1080008c 	andi	r2,r2,2
    35dc:	1000291e 	bne	r2,zero,3684 <__swsetup_r+0xfc>
    35e0:	80800517 	ldw	r2,20(r16)
    35e4:	80800215 	stw	r2,8(r16)
    35e8:	18001c26 	beq	r3,zero,365c <__swsetup_r+0xd4>
    35ec:	0005883a 	mov	r2,zero
    35f0:	dfc00217 	ldw	ra,8(sp)
    35f4:	dc400117 	ldw	r17,4(sp)
    35f8:	dc000017 	ldw	r16,0(sp)
    35fc:	dec00304 	addi	sp,sp,12
    3600:	f800283a 	ret
    3604:	3080040c 	andi	r2,r6,16
    3608:	10002e26 	beq	r2,zero,36c4 <__swsetup_r+0x13c>
    360c:	3080010c 	andi	r2,r6,4
    3610:	10001e1e 	bne	r2,zero,368c <__swsetup_r+0x104>
    3614:	80c00417 	ldw	r3,16(r16)
    3618:	30800214 	ori	r2,r6,8
    361c:	8080030d 	sth	r2,12(r16)
    3620:	183feb1e 	bne	r3,zero,35d0 <__alt_mem_Flash_flash_data+0xf40035d0>
    3624:	1140a00c 	andi	r5,r2,640
    3628:	01008004 	movi	r4,512
    362c:	293fe826 	beq	r5,r4,35d0 <__alt_mem_Flash_flash_data+0xf40035d0>
    3630:	8809883a 	mov	r4,r17
    3634:	800b883a 	mov	r5,r16
    3638:	00042ac0 	call	42ac <__smakebuf_r>
    363c:	8080030b 	ldhu	r2,12(r16)
    3640:	80c00417 	ldw	r3,16(r16)
    3644:	003fe206 	br	35d0 <__alt_mem_Flash_flash_data+0xf40035d0>
    3648:	80800517 	ldw	r2,20(r16)
    364c:	80000215 	stw	zero,8(r16)
    3650:	0085c83a 	sub	r2,zero,r2
    3654:	80800615 	stw	r2,24(r16)
    3658:	183fe41e 	bne	r3,zero,35ec <__alt_mem_Flash_flash_data+0xf40035ec>
    365c:	80c0030b 	ldhu	r3,12(r16)
    3660:	0005883a 	mov	r2,zero
    3664:	1900200c 	andi	r4,r3,128
    3668:	203fe126 	beq	r4,zero,35f0 <__alt_mem_Flash_flash_data+0xf40035f0>
    366c:	18c01014 	ori	r3,r3,64
    3670:	80c0030d 	sth	r3,12(r16)
    3674:	00bfffc4 	movi	r2,-1
    3678:	003fdd06 	br	35f0 <__alt_mem_Flash_flash_data+0xf40035f0>
    367c:	0003cc00 	call	3cc0 <__sinit>
    3680:	003fcd06 	br	35b8 <__alt_mem_Flash_flash_data+0xf40035b8>
    3684:	0005883a 	mov	r2,zero
    3688:	003fd606 	br	35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    368c:	81400c17 	ldw	r5,48(r16)
    3690:	28000626 	beq	r5,zero,36ac <__swsetup_r+0x124>
    3694:	80801004 	addi	r2,r16,64
    3698:	28800326 	beq	r5,r2,36a8 <__swsetup_r+0x120>
    369c:	8809883a 	mov	r4,r17
    36a0:	0003e340 	call	3e34 <_free_r>
    36a4:	8180030b 	ldhu	r6,12(r16)
    36a8:	80000c15 	stw	zero,48(r16)
    36ac:	80c00417 	ldw	r3,16(r16)
    36b0:	00bff6c4 	movi	r2,-37
    36b4:	118c703a 	and	r6,r2,r6
    36b8:	80000115 	stw	zero,4(r16)
    36bc:	80c00015 	stw	r3,0(r16)
    36c0:	003fd506 	br	3618 <__alt_mem_Flash_flash_data+0xf4003618>
    36c4:	00800244 	movi	r2,9
    36c8:	88800015 	stw	r2,0(r17)
    36cc:	30801014 	ori	r2,r6,64
    36d0:	8080030d 	sth	r2,12(r16)
    36d4:	00bfffc4 	movi	r2,-1
    36d8:	003fc506 	br	35f0 <__alt_mem_Flash_flash_data+0xf40035f0>

000036dc <__sflush_r>:
    36dc:	2880030b 	ldhu	r2,12(r5)
    36e0:	defffb04 	addi	sp,sp,-20
    36e4:	dcc00315 	stw	r19,12(sp)
    36e8:	dc400115 	stw	r17,4(sp)
    36ec:	dfc00415 	stw	ra,16(sp)
    36f0:	dc800215 	stw	r18,8(sp)
    36f4:	dc000015 	stw	r16,0(sp)
    36f8:	10c0020c 	andi	r3,r2,8
    36fc:	2823883a 	mov	r17,r5
    3700:	2027883a 	mov	r19,r4
    3704:	1800311e 	bne	r3,zero,37cc <__sflush_r+0xf0>
    3708:	28c00117 	ldw	r3,4(r5)
    370c:	10820014 	ori	r2,r2,2048
    3710:	2880030d 	sth	r2,12(r5)
    3714:	00c04b0e 	bge	zero,r3,3844 <__sflush_r+0x168>
    3718:	8a000a17 	ldw	r8,40(r17)
    371c:	40002326 	beq	r8,zero,37ac <__sflush_r+0xd0>
    3720:	9c000017 	ldw	r16,0(r19)
    3724:	10c4000c 	andi	r3,r2,4096
    3728:	98000015 	stw	zero,0(r19)
    372c:	18004826 	beq	r3,zero,3850 <__sflush_r+0x174>
    3730:	89801417 	ldw	r6,80(r17)
    3734:	10c0010c 	andi	r3,r2,4
    3738:	18000626 	beq	r3,zero,3754 <__sflush_r+0x78>
    373c:	88c00117 	ldw	r3,4(r17)
    3740:	88800c17 	ldw	r2,48(r17)
    3744:	30cdc83a 	sub	r6,r6,r3
    3748:	10000226 	beq	r2,zero,3754 <__sflush_r+0x78>
    374c:	88800f17 	ldw	r2,60(r17)
    3750:	308dc83a 	sub	r6,r6,r2
    3754:	89400717 	ldw	r5,28(r17)
    3758:	9809883a 	mov	r4,r19
    375c:	000f883a 	mov	r7,zero
    3760:	403ee83a 	callr	r8
    3764:	00ffffc4 	movi	r3,-1
    3768:	10c04426 	beq	r2,r3,387c <__sflush_r+0x1a0>
    376c:	88c0030b 	ldhu	r3,12(r17)
    3770:	89000417 	ldw	r4,16(r17)
    3774:	88000115 	stw	zero,4(r17)
    3778:	197dffcc 	andi	r5,r3,63487
    377c:	8940030d 	sth	r5,12(r17)
    3780:	89000015 	stw	r4,0(r17)
    3784:	18c4000c 	andi	r3,r3,4096
    3788:	18002c1e 	bne	r3,zero,383c <__sflush_r+0x160>
    378c:	89400c17 	ldw	r5,48(r17)
    3790:	9c000015 	stw	r16,0(r19)
    3794:	28000526 	beq	r5,zero,37ac <__sflush_r+0xd0>
    3798:	88801004 	addi	r2,r17,64
    379c:	28800226 	beq	r5,r2,37a8 <__sflush_r+0xcc>
    37a0:	9809883a 	mov	r4,r19
    37a4:	0003e340 	call	3e34 <_free_r>
    37a8:	88000c15 	stw	zero,48(r17)
    37ac:	0005883a 	mov	r2,zero
    37b0:	dfc00417 	ldw	ra,16(sp)
    37b4:	dcc00317 	ldw	r19,12(sp)
    37b8:	dc800217 	ldw	r18,8(sp)
    37bc:	dc400117 	ldw	r17,4(sp)
    37c0:	dc000017 	ldw	r16,0(sp)
    37c4:	dec00504 	addi	sp,sp,20
    37c8:	f800283a 	ret
    37cc:	2c800417 	ldw	r18,16(r5)
    37d0:	903ff626 	beq	r18,zero,37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    37d4:	2c000017 	ldw	r16,0(r5)
    37d8:	108000cc 	andi	r2,r2,3
    37dc:	2c800015 	stw	r18,0(r5)
    37e0:	84a1c83a 	sub	r16,r16,r18
    37e4:	1000131e 	bne	r2,zero,3834 <__sflush_r+0x158>
    37e8:	28800517 	ldw	r2,20(r5)
    37ec:	88800215 	stw	r2,8(r17)
    37f0:	04000316 	blt	zero,r16,3800 <__sflush_r+0x124>
    37f4:	003fed06 	br	37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    37f8:	90a5883a 	add	r18,r18,r2
    37fc:	043feb0e 	bge	zero,r16,37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    3800:	88800917 	ldw	r2,36(r17)
    3804:	89400717 	ldw	r5,28(r17)
    3808:	800f883a 	mov	r7,r16
    380c:	900d883a 	mov	r6,r18
    3810:	9809883a 	mov	r4,r19
    3814:	103ee83a 	callr	r2
    3818:	80a1c83a 	sub	r16,r16,r2
    381c:	00bff616 	blt	zero,r2,37f8 <__alt_mem_Flash_flash_data+0xf40037f8>
    3820:	88c0030b 	ldhu	r3,12(r17)
    3824:	00bfffc4 	movi	r2,-1
    3828:	18c01014 	ori	r3,r3,64
    382c:	88c0030d 	sth	r3,12(r17)
    3830:	003fdf06 	br	37b0 <__alt_mem_Flash_flash_data+0xf40037b0>
    3834:	0005883a 	mov	r2,zero
    3838:	003fec06 	br	37ec <__alt_mem_Flash_flash_data+0xf40037ec>
    383c:	88801415 	stw	r2,80(r17)
    3840:	003fd206 	br	378c <__alt_mem_Flash_flash_data+0xf400378c>
    3844:	28c00f17 	ldw	r3,60(r5)
    3848:	00ffb316 	blt	zero,r3,3718 <__alt_mem_Flash_flash_data+0xf4003718>
    384c:	003fd706 	br	37ac <__alt_mem_Flash_flash_data+0xf40037ac>
    3850:	89400717 	ldw	r5,28(r17)
    3854:	000d883a 	mov	r6,zero
    3858:	9809883a 	mov	r4,r19
    385c:	01c00044 	movi	r7,1
    3860:	403ee83a 	callr	r8
    3864:	100d883a 	mov	r6,r2
    3868:	00bfffc4 	movi	r2,-1
    386c:	30801426 	beq	r6,r2,38c0 <__sflush_r+0x1e4>
    3870:	8880030b 	ldhu	r2,12(r17)
    3874:	8a000a17 	ldw	r8,40(r17)
    3878:	003fae06 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    387c:	98c00017 	ldw	r3,0(r19)
    3880:	183fba26 	beq	r3,zero,376c <__alt_mem_Flash_flash_data+0xf400376c>
    3884:	01000744 	movi	r4,29
    3888:	19000626 	beq	r3,r4,38a4 <__sflush_r+0x1c8>
    388c:	01000584 	movi	r4,22
    3890:	19000426 	beq	r3,r4,38a4 <__sflush_r+0x1c8>
    3894:	88c0030b 	ldhu	r3,12(r17)
    3898:	18c01014 	ori	r3,r3,64
    389c:	88c0030d 	sth	r3,12(r17)
    38a0:	003fc306 	br	37b0 <__alt_mem_Flash_flash_data+0xf40037b0>
    38a4:	8880030b 	ldhu	r2,12(r17)
    38a8:	88c00417 	ldw	r3,16(r17)
    38ac:	88000115 	stw	zero,4(r17)
    38b0:	10bdffcc 	andi	r2,r2,63487
    38b4:	8880030d 	sth	r2,12(r17)
    38b8:	88c00015 	stw	r3,0(r17)
    38bc:	003fb306 	br	378c <__alt_mem_Flash_flash_data+0xf400378c>
    38c0:	98800017 	ldw	r2,0(r19)
    38c4:	103fea26 	beq	r2,zero,3870 <__alt_mem_Flash_flash_data+0xf4003870>
    38c8:	00c00744 	movi	r3,29
    38cc:	10c00226 	beq	r2,r3,38d8 <__sflush_r+0x1fc>
    38d0:	00c00584 	movi	r3,22
    38d4:	10ffd21e 	bne	r2,r3,3820 <__alt_mem_Flash_flash_data+0xf4003820>
    38d8:	9c000015 	stw	r16,0(r19)
    38dc:	0005883a 	mov	r2,zero
    38e0:	003fb306 	br	37b0 <__alt_mem_Flash_flash_data+0xf40037b0>

000038e4 <_fflush_r>:
    38e4:	defffd04 	addi	sp,sp,-12
    38e8:	dc000115 	stw	r16,4(sp)
    38ec:	dfc00215 	stw	ra,8(sp)
    38f0:	2021883a 	mov	r16,r4
    38f4:	20000226 	beq	r4,zero,3900 <_fflush_r+0x1c>
    38f8:	20800e17 	ldw	r2,56(r4)
    38fc:	10000c26 	beq	r2,zero,3930 <_fflush_r+0x4c>
    3900:	2880030f 	ldh	r2,12(r5)
    3904:	1000051e 	bne	r2,zero,391c <_fflush_r+0x38>
    3908:	0005883a 	mov	r2,zero
    390c:	dfc00217 	ldw	ra,8(sp)
    3910:	dc000117 	ldw	r16,4(sp)
    3914:	dec00304 	addi	sp,sp,12
    3918:	f800283a 	ret
    391c:	8009883a 	mov	r4,r16
    3920:	dfc00217 	ldw	ra,8(sp)
    3924:	dc000117 	ldw	r16,4(sp)
    3928:	dec00304 	addi	sp,sp,12
    392c:	00036dc1 	jmpi	36dc <__sflush_r>
    3930:	d9400015 	stw	r5,0(sp)
    3934:	0003cc00 	call	3cc0 <__sinit>
    3938:	d9400017 	ldw	r5,0(sp)
    393c:	003ff006 	br	3900 <__alt_mem_Flash_flash_data+0xf4003900>

00003940 <fflush>:
    3940:	20000526 	beq	r4,zero,3958 <fflush+0x18>
    3944:	00800074 	movhi	r2,1
    3948:	108d1d04 	addi	r2,r2,13428
    394c:	200b883a 	mov	r5,r4
    3950:	11000017 	ldw	r4,0(r2)
    3954:	00038e41 	jmpi	38e4 <_fflush_r>
    3958:	00800074 	movhi	r2,1
    395c:	108d1c04 	addi	r2,r2,13424
    3960:	11000017 	ldw	r4,0(r2)
    3964:	01400034 	movhi	r5,0
    3968:	294e3904 	addi	r5,r5,14564
    396c:	00041e81 	jmpi	41e8 <_fwalk_reent>

00003970 <__fp_lock>:
    3970:	0005883a 	mov	r2,zero
    3974:	f800283a 	ret

00003978 <__fp_unlock>:
    3978:	0005883a 	mov	r2,zero
    397c:	f800283a 	ret

00003980 <_cleanup_r>:
    3980:	01400034 	movhi	r5,0
    3984:	2951dd04 	addi	r5,r5,18292
    3988:	00041e81 	jmpi	41e8 <_fwalk_reent>

0000398c <__sinit.part.1>:
    398c:	defff704 	addi	sp,sp,-36
    3990:	00c00034 	movhi	r3,0
    3994:	dfc00815 	stw	ra,32(sp)
    3998:	ddc00715 	stw	r23,28(sp)
    399c:	dd800615 	stw	r22,24(sp)
    39a0:	dd400515 	stw	r21,20(sp)
    39a4:	dd000415 	stw	r20,16(sp)
    39a8:	dcc00315 	stw	r19,12(sp)
    39ac:	dc800215 	stw	r18,8(sp)
    39b0:	dc400115 	stw	r17,4(sp)
    39b4:	dc000015 	stw	r16,0(sp)
    39b8:	18ce6004 	addi	r3,r3,14720
    39bc:	24000117 	ldw	r16,4(r4)
    39c0:	20c00f15 	stw	r3,60(r4)
    39c4:	2080bb04 	addi	r2,r4,748
    39c8:	00c000c4 	movi	r3,3
    39cc:	20c0b915 	stw	r3,740(r4)
    39d0:	2080ba15 	stw	r2,744(r4)
    39d4:	2000b815 	stw	zero,736(r4)
    39d8:	05c00204 	movi	r23,8
    39dc:	00800104 	movi	r2,4
    39e0:	2025883a 	mov	r18,r4
    39e4:	b80d883a 	mov	r6,r23
    39e8:	81001704 	addi	r4,r16,92
    39ec:	000b883a 	mov	r5,zero
    39f0:	80000015 	stw	zero,0(r16)
    39f4:	80000115 	stw	zero,4(r16)
    39f8:	80000215 	stw	zero,8(r16)
    39fc:	8080030d 	sth	r2,12(r16)
    3a00:	80001915 	stw	zero,100(r16)
    3a04:	8000038d 	sth	zero,14(r16)
    3a08:	80000415 	stw	zero,16(r16)
    3a0c:	80000515 	stw	zero,20(r16)
    3a10:	80000615 	stw	zero,24(r16)
    3a14:	00044640 	call	4464 <memset>
    3a18:	05800034 	movhi	r22,0
    3a1c:	94400217 	ldw	r17,8(r18)
    3a20:	05400034 	movhi	r21,0
    3a24:	05000034 	movhi	r20,0
    3a28:	04c00034 	movhi	r19,0
    3a2c:	b5916204 	addi	r22,r22,17800
    3a30:	ad517904 	addi	r21,r21,17892
    3a34:	a5119804 	addi	r20,r20,18016
    3a38:	9cd1af04 	addi	r19,r19,18108
    3a3c:	85800815 	stw	r22,32(r16)
    3a40:	85400915 	stw	r21,36(r16)
    3a44:	85000a15 	stw	r20,40(r16)
    3a48:	84c00b15 	stw	r19,44(r16)
    3a4c:	84000715 	stw	r16,28(r16)
    3a50:	00800284 	movi	r2,10
    3a54:	8880030d 	sth	r2,12(r17)
    3a58:	00800044 	movi	r2,1
    3a5c:	89001704 	addi	r4,r17,92
    3a60:	b80d883a 	mov	r6,r23
    3a64:	000b883a 	mov	r5,zero
    3a68:	88000015 	stw	zero,0(r17)
    3a6c:	88000115 	stw	zero,4(r17)
    3a70:	88000215 	stw	zero,8(r17)
    3a74:	88001915 	stw	zero,100(r17)
    3a78:	8880038d 	sth	r2,14(r17)
    3a7c:	88000415 	stw	zero,16(r17)
    3a80:	88000515 	stw	zero,20(r17)
    3a84:	88000615 	stw	zero,24(r17)
    3a88:	00044640 	call	4464 <memset>
    3a8c:	94000317 	ldw	r16,12(r18)
    3a90:	00800484 	movi	r2,18
    3a94:	8c400715 	stw	r17,28(r17)
    3a98:	8d800815 	stw	r22,32(r17)
    3a9c:	8d400915 	stw	r21,36(r17)
    3aa0:	8d000a15 	stw	r20,40(r17)
    3aa4:	8cc00b15 	stw	r19,44(r17)
    3aa8:	8080030d 	sth	r2,12(r16)
    3aac:	00800084 	movi	r2,2
    3ab0:	80000015 	stw	zero,0(r16)
    3ab4:	80000115 	stw	zero,4(r16)
    3ab8:	80000215 	stw	zero,8(r16)
    3abc:	80001915 	stw	zero,100(r16)
    3ac0:	8080038d 	sth	r2,14(r16)
    3ac4:	80000415 	stw	zero,16(r16)
    3ac8:	80000515 	stw	zero,20(r16)
    3acc:	80000615 	stw	zero,24(r16)
    3ad0:	81001704 	addi	r4,r16,92
    3ad4:	000b883a 	mov	r5,zero
    3ad8:	b80d883a 	mov	r6,r23
    3adc:	00044640 	call	4464 <memset>
    3ae0:	00800044 	movi	r2,1
    3ae4:	84000715 	stw	r16,28(r16)
    3ae8:	85800815 	stw	r22,32(r16)
    3aec:	85400915 	stw	r21,36(r16)
    3af0:	85000a15 	stw	r20,40(r16)
    3af4:	84c00b15 	stw	r19,44(r16)
    3af8:	90800e15 	stw	r2,56(r18)
    3afc:	dfc00817 	ldw	ra,32(sp)
    3b00:	ddc00717 	ldw	r23,28(sp)
    3b04:	dd800617 	ldw	r22,24(sp)
    3b08:	dd400517 	ldw	r21,20(sp)
    3b0c:	dd000417 	ldw	r20,16(sp)
    3b10:	dcc00317 	ldw	r19,12(sp)
    3b14:	dc800217 	ldw	r18,8(sp)
    3b18:	dc400117 	ldw	r17,4(sp)
    3b1c:	dc000017 	ldw	r16,0(sp)
    3b20:	dec00904 	addi	sp,sp,36
    3b24:	f800283a 	ret

00003b28 <__sfmoreglue>:
    3b28:	defffc04 	addi	sp,sp,-16
    3b2c:	dc400115 	stw	r17,4(sp)
    3b30:	2c7fffc4 	addi	r17,r5,-1
    3b34:	8c401a24 	muli	r17,r17,104
    3b38:	dc800215 	stw	r18,8(sp)
    3b3c:	2825883a 	mov	r18,r5
    3b40:	89401d04 	addi	r5,r17,116
    3b44:	dc000015 	stw	r16,0(sp)
    3b48:	dfc00315 	stw	ra,12(sp)
    3b4c:	00024a80 	call	24a8 <_malloc_r>
    3b50:	1021883a 	mov	r16,r2
    3b54:	10000726 	beq	r2,zero,3b74 <__sfmoreglue+0x4c>
    3b58:	11000304 	addi	r4,r2,12
    3b5c:	10000015 	stw	zero,0(r2)
    3b60:	14800115 	stw	r18,4(r2)
    3b64:	11000215 	stw	r4,8(r2)
    3b68:	000b883a 	mov	r5,zero
    3b6c:	89801a04 	addi	r6,r17,104
    3b70:	00044640 	call	4464 <memset>
    3b74:	8005883a 	mov	r2,r16
    3b78:	dfc00317 	ldw	ra,12(sp)
    3b7c:	dc800217 	ldw	r18,8(sp)
    3b80:	dc400117 	ldw	r17,4(sp)
    3b84:	dc000017 	ldw	r16,0(sp)
    3b88:	dec00404 	addi	sp,sp,16
    3b8c:	f800283a 	ret

00003b90 <__sfp>:
    3b90:	00800074 	movhi	r2,1
    3b94:	defffb04 	addi	sp,sp,-20
    3b98:	108d1c04 	addi	r2,r2,13424
    3b9c:	dc800215 	stw	r18,8(sp)
    3ba0:	14800017 	ldw	r18,0(r2)
    3ba4:	dcc00315 	stw	r19,12(sp)
    3ba8:	dfc00415 	stw	ra,16(sp)
    3bac:	90800e17 	ldw	r2,56(r18)
    3bb0:	dc400115 	stw	r17,4(sp)
    3bb4:	dc000015 	stw	r16,0(sp)
    3bb8:	2027883a 	mov	r19,r4
    3bbc:	1000021e 	bne	r2,zero,3bc8 <__sfp+0x38>
    3bc0:	9009883a 	mov	r4,r18
    3bc4:	000398c0 	call	398c <__sinit.part.1>
    3bc8:	9480b804 	addi	r18,r18,736
    3bcc:	047fffc4 	movi	r17,-1
    3bd0:	91400117 	ldw	r5,4(r18)
    3bd4:	94000217 	ldw	r16,8(r18)
    3bd8:	297fffc4 	addi	r5,r5,-1
    3bdc:	28000a16 	blt	r5,zero,3c08 <__sfp+0x78>
    3be0:	8080030f 	ldh	r2,12(r16)
    3be4:	10000c26 	beq	r2,zero,3c18 <__sfp+0x88>
    3be8:	80c01d04 	addi	r3,r16,116
    3bec:	00000206 	br	3bf8 <__sfp+0x68>
    3bf0:	18bfe60f 	ldh	r2,-104(r3)
    3bf4:	10000826 	beq	r2,zero,3c18 <__sfp+0x88>
    3bf8:	297fffc4 	addi	r5,r5,-1
    3bfc:	1c3ffd04 	addi	r16,r3,-12
    3c00:	18c01a04 	addi	r3,r3,104
    3c04:	2c7ffa1e 	bne	r5,r17,3bf0 <__alt_mem_Flash_flash_data+0xf4003bf0>
    3c08:	90800017 	ldw	r2,0(r18)
    3c0c:	10001d26 	beq	r2,zero,3c84 <__sfp+0xf4>
    3c10:	1025883a 	mov	r18,r2
    3c14:	003fee06 	br	3bd0 <__alt_mem_Flash_flash_data+0xf4003bd0>
    3c18:	00bfffc4 	movi	r2,-1
    3c1c:	8080038d 	sth	r2,14(r16)
    3c20:	00800044 	movi	r2,1
    3c24:	8080030d 	sth	r2,12(r16)
    3c28:	80001915 	stw	zero,100(r16)
    3c2c:	80000015 	stw	zero,0(r16)
    3c30:	80000215 	stw	zero,8(r16)
    3c34:	80000115 	stw	zero,4(r16)
    3c38:	80000415 	stw	zero,16(r16)
    3c3c:	80000515 	stw	zero,20(r16)
    3c40:	80000615 	stw	zero,24(r16)
    3c44:	81001704 	addi	r4,r16,92
    3c48:	000b883a 	mov	r5,zero
    3c4c:	01800204 	movi	r6,8
    3c50:	00044640 	call	4464 <memset>
    3c54:	8005883a 	mov	r2,r16
    3c58:	80000c15 	stw	zero,48(r16)
    3c5c:	80000d15 	stw	zero,52(r16)
    3c60:	80001115 	stw	zero,68(r16)
    3c64:	80001215 	stw	zero,72(r16)
    3c68:	dfc00417 	ldw	ra,16(sp)
    3c6c:	dcc00317 	ldw	r19,12(sp)
    3c70:	dc800217 	ldw	r18,8(sp)
    3c74:	dc400117 	ldw	r17,4(sp)
    3c78:	dc000017 	ldw	r16,0(sp)
    3c7c:	dec00504 	addi	sp,sp,20
    3c80:	f800283a 	ret
    3c84:	9809883a 	mov	r4,r19
    3c88:	01400104 	movi	r5,4
    3c8c:	0003b280 	call	3b28 <__sfmoreglue>
    3c90:	90800015 	stw	r2,0(r18)
    3c94:	103fde1e 	bne	r2,zero,3c10 <__alt_mem_Flash_flash_data+0xf4003c10>
    3c98:	00800304 	movi	r2,12
    3c9c:	98800015 	stw	r2,0(r19)
    3ca0:	0005883a 	mov	r2,zero
    3ca4:	003ff006 	br	3c68 <__alt_mem_Flash_flash_data+0xf4003c68>

00003ca8 <_cleanup>:
    3ca8:	00800074 	movhi	r2,1
    3cac:	108d1c04 	addi	r2,r2,13424
    3cb0:	11000017 	ldw	r4,0(r2)
    3cb4:	01400034 	movhi	r5,0
    3cb8:	2951dd04 	addi	r5,r5,18292
    3cbc:	00041e81 	jmpi	41e8 <_fwalk_reent>

00003cc0 <__sinit>:
    3cc0:	20800e17 	ldw	r2,56(r4)
    3cc4:	10000126 	beq	r2,zero,3ccc <__sinit+0xc>
    3cc8:	f800283a 	ret
    3ccc:	000398c1 	jmpi	398c <__sinit.part.1>

00003cd0 <__sfp_lock_acquire>:
    3cd0:	f800283a 	ret

00003cd4 <__sfp_lock_release>:
    3cd4:	f800283a 	ret

00003cd8 <__sinit_lock_acquire>:
    3cd8:	f800283a 	ret

00003cdc <__sinit_lock_release>:
    3cdc:	f800283a 	ret

00003ce0 <__fp_lock_all>:
    3ce0:	00800074 	movhi	r2,1
    3ce4:	108d1d04 	addi	r2,r2,13428
    3ce8:	11000017 	ldw	r4,0(r2)
    3cec:	01400034 	movhi	r5,0
    3cf0:	294e5c04 	addi	r5,r5,14704
    3cf4:	00041241 	jmpi	4124 <_fwalk>

00003cf8 <__fp_unlock_all>:
    3cf8:	00800074 	movhi	r2,1
    3cfc:	108d1d04 	addi	r2,r2,13428
    3d00:	11000017 	ldw	r4,0(r2)
    3d04:	01400034 	movhi	r5,0
    3d08:	294e5e04 	addi	r5,r5,14712
    3d0c:	00041241 	jmpi	4124 <_fwalk>

00003d10 <_malloc_trim_r>:
    3d10:	defffb04 	addi	sp,sp,-20
    3d14:	dcc00315 	stw	r19,12(sp)
    3d18:	04c00074 	movhi	r19,1
    3d1c:	dc800215 	stw	r18,8(sp)
    3d20:	dc400115 	stw	r17,4(sp)
    3d24:	dc000015 	stw	r16,0(sp)
    3d28:	dfc00415 	stw	ra,16(sp)
    3d2c:	2821883a 	mov	r16,r5
    3d30:	9cc6a404 	addi	r19,r19,6800
    3d34:	2025883a 	mov	r18,r4
    3d38:	00055e40 	call	55e4 <__malloc_lock>
    3d3c:	98800217 	ldw	r2,8(r19)
    3d40:	14400117 	ldw	r17,4(r2)
    3d44:	00bfff04 	movi	r2,-4
    3d48:	88a2703a 	and	r17,r17,r2
    3d4c:	8c21c83a 	sub	r16,r17,r16
    3d50:	8403fbc4 	addi	r16,r16,4079
    3d54:	8020d33a 	srli	r16,r16,12
    3d58:	0083ffc4 	movi	r2,4095
    3d5c:	843fffc4 	addi	r16,r16,-1
    3d60:	8020933a 	slli	r16,r16,12
    3d64:	1400060e 	bge	r2,r16,3d80 <_malloc_trim_r+0x70>
    3d68:	9009883a 	mov	r4,r18
    3d6c:	000b883a 	mov	r5,zero
    3d70:	00035340 	call	3534 <_sbrk_r>
    3d74:	98c00217 	ldw	r3,8(r19)
    3d78:	1c47883a 	add	r3,r3,r17
    3d7c:	10c00a26 	beq	r2,r3,3da8 <_malloc_trim_r+0x98>
    3d80:	9009883a 	mov	r4,r18
    3d84:	00057040 	call	5704 <__malloc_unlock>
    3d88:	0005883a 	mov	r2,zero
    3d8c:	dfc00417 	ldw	ra,16(sp)
    3d90:	dcc00317 	ldw	r19,12(sp)
    3d94:	dc800217 	ldw	r18,8(sp)
    3d98:	dc400117 	ldw	r17,4(sp)
    3d9c:	dc000017 	ldw	r16,0(sp)
    3da0:	dec00504 	addi	sp,sp,20
    3da4:	f800283a 	ret
    3da8:	9009883a 	mov	r4,r18
    3dac:	040bc83a 	sub	r5,zero,r16
    3db0:	00035340 	call	3534 <_sbrk_r>
    3db4:	00ffffc4 	movi	r3,-1
    3db8:	10c00d26 	beq	r2,r3,3df0 <_malloc_trim_r+0xe0>
    3dbc:	00c00074 	movhi	r3,1
    3dc0:	18d53604 	addi	r3,r3,21720
    3dc4:	18800017 	ldw	r2,0(r3)
    3dc8:	99000217 	ldw	r4,8(r19)
    3dcc:	8c23c83a 	sub	r17,r17,r16
    3dd0:	8c400054 	ori	r17,r17,1
    3dd4:	1421c83a 	sub	r16,r2,r16
    3dd8:	24400115 	stw	r17,4(r4)
    3ddc:	9009883a 	mov	r4,r18
    3de0:	1c000015 	stw	r16,0(r3)
    3de4:	00057040 	call	5704 <__malloc_unlock>
    3de8:	00800044 	movi	r2,1
    3dec:	003fe706 	br	3d8c <__alt_mem_Flash_flash_data+0xf4003d8c>
    3df0:	9009883a 	mov	r4,r18
    3df4:	000b883a 	mov	r5,zero
    3df8:	00035340 	call	3534 <_sbrk_r>
    3dfc:	99000217 	ldw	r4,8(r19)
    3e00:	014003c4 	movi	r5,15
    3e04:	1107c83a 	sub	r3,r2,r4
    3e08:	28ffdd0e 	bge	r5,r3,3d80 <__alt_mem_Flash_flash_data+0xf4003d80>
    3e0c:	01400074 	movhi	r5,1
    3e10:	294d1e04 	addi	r5,r5,13432
    3e14:	29400017 	ldw	r5,0(r5)
    3e18:	18c00054 	ori	r3,r3,1
    3e1c:	20c00115 	stw	r3,4(r4)
    3e20:	00c00074 	movhi	r3,1
    3e24:	1145c83a 	sub	r2,r2,r5
    3e28:	18d53604 	addi	r3,r3,21720
    3e2c:	18800015 	stw	r2,0(r3)
    3e30:	003fd306 	br	3d80 <__alt_mem_Flash_flash_data+0xf4003d80>

00003e34 <_free_r>:
    3e34:	28004c26 	beq	r5,zero,3f68 <_free_r+0x134>
    3e38:	defffd04 	addi	sp,sp,-12
    3e3c:	dc400115 	stw	r17,4(sp)
    3e40:	dc000015 	stw	r16,0(sp)
    3e44:	2023883a 	mov	r17,r4
    3e48:	2821883a 	mov	r16,r5
    3e4c:	dfc00215 	stw	ra,8(sp)
    3e50:	00055e40 	call	55e4 <__malloc_lock>
    3e54:	813fff17 	ldw	r4,-4(r16)
    3e58:	00bfff84 	movi	r2,-2
    3e5c:	02400074 	movhi	r9,1
    3e60:	81bffe04 	addi	r6,r16,-8
    3e64:	2084703a 	and	r2,r4,r2
    3e68:	4a46a404 	addi	r9,r9,6800
    3e6c:	308b883a 	add	r5,r6,r2
    3e70:	2a000117 	ldw	r8,4(r5)
    3e74:	49c00217 	ldw	r7,8(r9)
    3e78:	00ffff04 	movi	r3,-4
    3e7c:	40c6703a 	and	r3,r8,r3
    3e80:	39405326 	beq	r7,r5,3fd0 <_free_r+0x19c>
    3e84:	28c00115 	stw	r3,4(r5)
    3e88:	2100004c 	andi	r4,r4,1
    3e8c:	2000091e 	bne	r4,zero,3eb4 <_free_r+0x80>
    3e90:	81fffe17 	ldw	r7,-8(r16)
    3e94:	4a000204 	addi	r8,r9,8
    3e98:	31cdc83a 	sub	r6,r6,r7
    3e9c:	31000217 	ldw	r4,8(r6)
    3ea0:	11c5883a 	add	r2,r2,r7
    3ea4:	22006126 	beq	r4,r8,402c <_free_r+0x1f8>
    3ea8:	31c00317 	ldw	r7,12(r6)
    3eac:	21c00315 	stw	r7,12(r4)
    3eb0:	39000215 	stw	r4,8(r7)
    3eb4:	28c9883a 	add	r4,r5,r3
    3eb8:	21c00117 	ldw	r7,4(r4)
    3ebc:	39c0004c 	andi	r7,r7,1
    3ec0:	38000d1e 	bne	r7,zero,3ef8 <_free_r+0xc4>
    3ec4:	29000217 	ldw	r4,8(r5)
    3ec8:	10c5883a 	add	r2,r2,r3
    3ecc:	00c00074 	movhi	r3,1
    3ed0:	18c6a604 	addi	r3,r3,6808
    3ed4:	20c07526 	beq	r4,r3,40ac <_free_r+0x278>
    3ed8:	29c00317 	ldw	r7,12(r5)
    3edc:	11400054 	ori	r5,r2,1
    3ee0:	3087883a 	add	r3,r6,r2
    3ee4:	21c00315 	stw	r7,12(r4)
    3ee8:	39000215 	stw	r4,8(r7)
    3eec:	31400115 	stw	r5,4(r6)
    3ef0:	18800015 	stw	r2,0(r3)
    3ef4:	00000406 	br	3f08 <_free_r+0xd4>
    3ef8:	10c00054 	ori	r3,r2,1
    3efc:	30c00115 	stw	r3,4(r6)
    3f00:	3087883a 	add	r3,r6,r2
    3f04:	18800015 	stw	r2,0(r3)
    3f08:	00c07fc4 	movi	r3,511
    3f0c:	18801736 	bltu	r3,r2,3f6c <_free_r+0x138>
    3f10:	1004d0fa 	srli	r2,r2,3
    3f14:	01400044 	movi	r5,1
    3f18:	49000117 	ldw	r4,4(r9)
    3f1c:	1087883a 	add	r3,r2,r2
    3f20:	18c7883a 	add	r3,r3,r3
    3f24:	1005d0ba 	srai	r2,r2,2
    3f28:	18c7883a 	add	r3,r3,r3
    3f2c:	1a47883a 	add	r3,r3,r9
    3f30:	19c00217 	ldw	r7,8(r3)
    3f34:	2884983a 	sll	r2,r5,r2
    3f38:	30c00315 	stw	r3,12(r6)
    3f3c:	31c00215 	stw	r7,8(r6)
    3f40:	1104b03a 	or	r2,r2,r4
    3f44:	19800215 	stw	r6,8(r3)
    3f48:	48800115 	stw	r2,4(r9)
    3f4c:	39800315 	stw	r6,12(r7)
    3f50:	8809883a 	mov	r4,r17
    3f54:	dfc00217 	ldw	ra,8(sp)
    3f58:	dc400117 	ldw	r17,4(sp)
    3f5c:	dc000017 	ldw	r16,0(sp)
    3f60:	dec00304 	addi	sp,sp,12
    3f64:	00057041 	jmpi	5704 <__malloc_unlock>
    3f68:	f800283a 	ret
    3f6c:	1006d27a 	srli	r3,r2,9
    3f70:	01000104 	movi	r4,4
    3f74:	20c04036 	bltu	r4,r3,4078 <_free_r+0x244>
    3f78:	1006d1ba 	srli	r3,r2,6
    3f7c:	19400e04 	addi	r5,r3,56
    3f80:	2947883a 	add	r3,r5,r5
    3f84:	18c7883a 	add	r3,r3,r3
    3f88:	18c7883a 	add	r3,r3,r3
    3f8c:	1a49883a 	add	r4,r3,r9
    3f90:	20c00217 	ldw	r3,8(r4)
    3f94:	01c00074 	movhi	r7,1
    3f98:	39c6a404 	addi	r7,r7,6800
    3f9c:	19003b26 	beq	r3,r4,408c <_free_r+0x258>
    3fa0:	01ffff04 	movi	r7,-4
    3fa4:	19400117 	ldw	r5,4(r3)
    3fa8:	29ca703a 	and	r5,r5,r7
    3fac:	1140022e 	bgeu	r2,r5,3fb8 <_free_r+0x184>
    3fb0:	18c00217 	ldw	r3,8(r3)
    3fb4:	20fffb1e 	bne	r4,r3,3fa4 <__alt_mem_Flash_flash_data+0xf4003fa4>
    3fb8:	18800317 	ldw	r2,12(r3)
    3fbc:	30800315 	stw	r2,12(r6)
    3fc0:	30c00215 	stw	r3,8(r6)
    3fc4:	11800215 	stw	r6,8(r2)
    3fc8:	19800315 	stw	r6,12(r3)
    3fcc:	003fe006 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    3fd0:	2100004c 	andi	r4,r4,1
    3fd4:	1885883a 	add	r2,r3,r2
    3fd8:	2000071e 	bne	r4,zero,3ff8 <_free_r+0x1c4>
    3fdc:	817ffe17 	ldw	r5,-8(r16)
    3fe0:	314dc83a 	sub	r6,r6,r5
    3fe4:	30c00317 	ldw	r3,12(r6)
    3fe8:	31000217 	ldw	r4,8(r6)
    3fec:	1145883a 	add	r2,r2,r5
    3ff0:	20c00315 	stw	r3,12(r4)
    3ff4:	19000215 	stw	r4,8(r3)
    3ff8:	10c00054 	ori	r3,r2,1
    3ffc:	30c00115 	stw	r3,4(r6)
    4000:	00c00074 	movhi	r3,1
    4004:	18cd1f04 	addi	r3,r3,13436
    4008:	18c00017 	ldw	r3,0(r3)
    400c:	49800215 	stw	r6,8(r9)
    4010:	10ffcf36 	bltu	r2,r3,3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    4014:	00800074 	movhi	r2,1
    4018:	10951404 	addi	r2,r2,21584
    401c:	11400017 	ldw	r5,0(r2)
    4020:	8809883a 	mov	r4,r17
    4024:	0003d100 	call	3d10 <_malloc_trim_r>
    4028:	003fc906 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    402c:	28c9883a 	add	r4,r5,r3
    4030:	21000117 	ldw	r4,4(r4)
    4034:	2100004c 	andi	r4,r4,1
    4038:	20000a1e 	bne	r4,zero,4064 <_free_r+0x230>
    403c:	29000317 	ldw	r4,12(r5)
    4040:	29400217 	ldw	r5,8(r5)
    4044:	10c5883a 	add	r2,r2,r3
    4048:	10c00054 	ori	r3,r2,1
    404c:	29000315 	stw	r4,12(r5)
    4050:	21400215 	stw	r5,8(r4)
    4054:	30c00115 	stw	r3,4(r6)
    4058:	308d883a 	add	r6,r6,r2
    405c:	30800015 	stw	r2,0(r6)
    4060:	003fbb06 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    4064:	10c00054 	ori	r3,r2,1
    4068:	30c00115 	stw	r3,4(r6)
    406c:	308d883a 	add	r6,r6,r2
    4070:	30800015 	stw	r2,0(r6)
    4074:	003fb606 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    4078:	01000504 	movi	r4,20
    407c:	20c01436 	bltu	r4,r3,40d0 <_free_r+0x29c>
    4080:	194016c4 	addi	r5,r3,91
    4084:	2947883a 	add	r3,r5,r5
    4088:	003fbe06 	br	3f84 <__alt_mem_Flash_flash_data+0xf4003f84>
    408c:	280bd0ba 	srai	r5,r5,2
    4090:	00800044 	movi	r2,1
    4094:	39000117 	ldw	r4,4(r7)
    4098:	114a983a 	sll	r5,r2,r5
    409c:	1805883a 	mov	r2,r3
    40a0:	2908b03a 	or	r4,r5,r4
    40a4:	39000115 	stw	r4,4(r7)
    40a8:	003fc406 	br	3fbc <__alt_mem_Flash_flash_data+0xf4003fbc>
    40ac:	49800515 	stw	r6,20(r9)
    40b0:	49800415 	stw	r6,16(r9)
    40b4:	10c00054 	ori	r3,r2,1
    40b8:	31000315 	stw	r4,12(r6)
    40bc:	31000215 	stw	r4,8(r6)
    40c0:	30c00115 	stw	r3,4(r6)
    40c4:	308d883a 	add	r6,r6,r2
    40c8:	30800015 	stw	r2,0(r6)
    40cc:	003fa006 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    40d0:	01001504 	movi	r4,84
    40d4:	20c00436 	bltu	r4,r3,40e8 <_free_r+0x2b4>
    40d8:	1006d33a 	srli	r3,r2,12
    40dc:	19401b84 	addi	r5,r3,110
    40e0:	2947883a 	add	r3,r5,r5
    40e4:	003fa706 	br	3f84 <__alt_mem_Flash_flash_data+0xf4003f84>
    40e8:	01005504 	movi	r4,340
    40ec:	20c00436 	bltu	r4,r3,4100 <_free_r+0x2cc>
    40f0:	1006d3fa 	srli	r3,r2,15
    40f4:	19401dc4 	addi	r5,r3,119
    40f8:	2947883a 	add	r3,r5,r5
    40fc:	003fa106 	br	3f84 <__alt_mem_Flash_flash_data+0xf4003f84>
    4100:	01015504 	movi	r4,1364
    4104:	20c00436 	bltu	r4,r3,4118 <_free_r+0x2e4>
    4108:	1006d4ba 	srli	r3,r2,18
    410c:	19401f04 	addi	r5,r3,124
    4110:	2947883a 	add	r3,r5,r5
    4114:	003f9b06 	br	3f84 <__alt_mem_Flash_flash_data+0xf4003f84>
    4118:	00c03f04 	movi	r3,252
    411c:	01401f84 	movi	r5,126
    4120:	003f9806 	br	3f84 <__alt_mem_Flash_flash_data+0xf4003f84>

00004124 <_fwalk>:
    4124:	defff704 	addi	sp,sp,-36
    4128:	dd000415 	stw	r20,16(sp)
    412c:	dfc00815 	stw	ra,32(sp)
    4130:	ddc00715 	stw	r23,28(sp)
    4134:	dd800615 	stw	r22,24(sp)
    4138:	dd400515 	stw	r21,20(sp)
    413c:	dcc00315 	stw	r19,12(sp)
    4140:	dc800215 	stw	r18,8(sp)
    4144:	dc400115 	stw	r17,4(sp)
    4148:	dc000015 	stw	r16,0(sp)
    414c:	2500b804 	addi	r20,r4,736
    4150:	a0002326 	beq	r20,zero,41e0 <_fwalk+0xbc>
    4154:	282b883a 	mov	r21,r5
    4158:	002f883a 	mov	r23,zero
    415c:	05800044 	movi	r22,1
    4160:	04ffffc4 	movi	r19,-1
    4164:	a4400117 	ldw	r17,4(r20)
    4168:	a4800217 	ldw	r18,8(r20)
    416c:	8c7fffc4 	addi	r17,r17,-1
    4170:	88000d16 	blt	r17,zero,41a8 <_fwalk+0x84>
    4174:	94000304 	addi	r16,r18,12
    4178:	94800384 	addi	r18,r18,14
    417c:	80c0000b 	ldhu	r3,0(r16)
    4180:	8c7fffc4 	addi	r17,r17,-1
    4184:	813ffd04 	addi	r4,r16,-12
    4188:	b0c0042e 	bgeu	r22,r3,419c <_fwalk+0x78>
    418c:	90c0000f 	ldh	r3,0(r18)
    4190:	1cc00226 	beq	r3,r19,419c <_fwalk+0x78>
    4194:	a83ee83a 	callr	r21
    4198:	b8aeb03a 	or	r23,r23,r2
    419c:	84001a04 	addi	r16,r16,104
    41a0:	94801a04 	addi	r18,r18,104
    41a4:	8cfff51e 	bne	r17,r19,417c <__alt_mem_Flash_flash_data+0xf400417c>
    41a8:	a5000017 	ldw	r20,0(r20)
    41ac:	a03fed1e 	bne	r20,zero,4164 <__alt_mem_Flash_flash_data+0xf4004164>
    41b0:	b805883a 	mov	r2,r23
    41b4:	dfc00817 	ldw	ra,32(sp)
    41b8:	ddc00717 	ldw	r23,28(sp)
    41bc:	dd800617 	ldw	r22,24(sp)
    41c0:	dd400517 	ldw	r21,20(sp)
    41c4:	dd000417 	ldw	r20,16(sp)
    41c8:	dcc00317 	ldw	r19,12(sp)
    41cc:	dc800217 	ldw	r18,8(sp)
    41d0:	dc400117 	ldw	r17,4(sp)
    41d4:	dc000017 	ldw	r16,0(sp)
    41d8:	dec00904 	addi	sp,sp,36
    41dc:	f800283a 	ret
    41e0:	002f883a 	mov	r23,zero
    41e4:	003ff206 	br	41b0 <__alt_mem_Flash_flash_data+0xf40041b0>

000041e8 <_fwalk_reent>:
    41e8:	defff704 	addi	sp,sp,-36
    41ec:	dd400515 	stw	r21,20(sp)
    41f0:	dfc00815 	stw	ra,32(sp)
    41f4:	ddc00715 	stw	r23,28(sp)
    41f8:	dd800615 	stw	r22,24(sp)
    41fc:	dd000415 	stw	r20,16(sp)
    4200:	dcc00315 	stw	r19,12(sp)
    4204:	dc800215 	stw	r18,8(sp)
    4208:	dc400115 	stw	r17,4(sp)
    420c:	dc000015 	stw	r16,0(sp)
    4210:	2540b804 	addi	r21,r4,736
    4214:	a8002326 	beq	r21,zero,42a4 <_fwalk_reent+0xbc>
    4218:	2829883a 	mov	r20,r5
    421c:	202d883a 	mov	r22,r4
    4220:	002f883a 	mov	r23,zero
    4224:	04c00044 	movi	r19,1
    4228:	04bfffc4 	movi	r18,-1
    422c:	ac400117 	ldw	r17,4(r21)
    4230:	ac000217 	ldw	r16,8(r21)
    4234:	8c7fffc4 	addi	r17,r17,-1
    4238:	88000c16 	blt	r17,zero,426c <_fwalk_reent+0x84>
    423c:	84000304 	addi	r16,r16,12
    4240:	80c0000b 	ldhu	r3,0(r16)
    4244:	8c7fffc4 	addi	r17,r17,-1
    4248:	817ffd04 	addi	r5,r16,-12
    424c:	98c0052e 	bgeu	r19,r3,4264 <_fwalk_reent+0x7c>
    4250:	80c0008f 	ldh	r3,2(r16)
    4254:	b009883a 	mov	r4,r22
    4258:	1c800226 	beq	r3,r18,4264 <_fwalk_reent+0x7c>
    425c:	a03ee83a 	callr	r20
    4260:	b8aeb03a 	or	r23,r23,r2
    4264:	84001a04 	addi	r16,r16,104
    4268:	8cbff51e 	bne	r17,r18,4240 <__alt_mem_Flash_flash_data+0xf4004240>
    426c:	ad400017 	ldw	r21,0(r21)
    4270:	a83fee1e 	bne	r21,zero,422c <__alt_mem_Flash_flash_data+0xf400422c>
    4274:	b805883a 	mov	r2,r23
    4278:	dfc00817 	ldw	ra,32(sp)
    427c:	ddc00717 	ldw	r23,28(sp)
    4280:	dd800617 	ldw	r22,24(sp)
    4284:	dd400517 	ldw	r21,20(sp)
    4288:	dd000417 	ldw	r20,16(sp)
    428c:	dcc00317 	ldw	r19,12(sp)
    4290:	dc800217 	ldw	r18,8(sp)
    4294:	dc400117 	ldw	r17,4(sp)
    4298:	dc000017 	ldw	r16,0(sp)
    429c:	dec00904 	addi	sp,sp,36
    42a0:	f800283a 	ret
    42a4:	002f883a 	mov	r23,zero
    42a8:	003ff206 	br	4274 <__alt_mem_Flash_flash_data+0xf4004274>

000042ac <__smakebuf_r>:
    42ac:	2880030b 	ldhu	r2,12(r5)
    42b0:	10c0008c 	andi	r3,r2,2
    42b4:	1800401e 	bne	r3,zero,43b8 <__smakebuf_r+0x10c>
    42b8:	deffec04 	addi	sp,sp,-80
    42bc:	dc000f15 	stw	r16,60(sp)
    42c0:	2821883a 	mov	r16,r5
    42c4:	2940038f 	ldh	r5,14(r5)
    42c8:	dc401015 	stw	r17,64(sp)
    42cc:	dfc01315 	stw	ra,76(sp)
    42d0:	dcc01215 	stw	r19,72(sp)
    42d4:	dc801115 	stw	r18,68(sp)
    42d8:	2023883a 	mov	r17,r4
    42dc:	28001b16 	blt	r5,zero,434c <__smakebuf_r+0xa0>
    42e0:	d80d883a 	mov	r6,sp
    42e4:	00048780 	call	4878 <_fstat_r>
    42e8:	10001716 	blt	r2,zero,4348 <__smakebuf_r+0x9c>
    42ec:	d8800117 	ldw	r2,4(sp)
    42f0:	00e00014 	movui	r3,32768
    42f4:	10bc000c 	andi	r2,r2,61440
    42f8:	10c03726 	beq	r2,r3,43d8 <__smakebuf_r+0x12c>
    42fc:	80c0030b 	ldhu	r3,12(r16)
    4300:	18c20014 	ori	r3,r3,2048
    4304:	80c0030d 	sth	r3,12(r16)
    4308:	00c80004 	movi	r3,8192
    430c:	10c03c1e 	bne	r2,r3,4400 <__smakebuf_r+0x154>
    4310:	8140038f 	ldh	r5,14(r16)
    4314:	8809883a 	mov	r4,r17
    4318:	00048d00 	call	48d0 <_isatty_r>
    431c:	10004e26 	beq	r2,zero,4458 <__smakebuf_r+0x1ac>
    4320:	8080030b 	ldhu	r2,12(r16)
    4324:	04c00044 	movi	r19,1
    4328:	80c010c4 	addi	r3,r16,67
    432c:	14c4b03a 	or	r2,r2,r19
    4330:	8080030d 	sth	r2,12(r16)
    4334:	80c00015 	stw	r3,0(r16)
    4338:	80c00415 	stw	r3,16(r16)
    433c:	84c00515 	stw	r19,20(r16)
    4340:	04810004 	movi	r18,1024
    4344:	00000706 	br	4364 <__smakebuf_r+0xb8>
    4348:	8080030b 	ldhu	r2,12(r16)
    434c:	10c0200c 	andi	r3,r2,128
    4350:	18001f1e 	bne	r3,zero,43d0 <__smakebuf_r+0x124>
    4354:	04810004 	movi	r18,1024
    4358:	10820014 	ori	r2,r2,2048
    435c:	8080030d 	sth	r2,12(r16)
    4360:	0027883a 	mov	r19,zero
    4364:	8809883a 	mov	r4,r17
    4368:	900b883a 	mov	r5,r18
    436c:	00024a80 	call	24a8 <_malloc_r>
    4370:	10002e26 	beq	r2,zero,442c <__smakebuf_r+0x180>
    4374:	80c0030b 	ldhu	r3,12(r16)
    4378:	01000034 	movhi	r4,0
    437c:	210e6004 	addi	r4,r4,14720
    4380:	89000f15 	stw	r4,60(r17)
    4384:	18c02014 	ori	r3,r3,128
    4388:	80c0030d 	sth	r3,12(r16)
    438c:	80800015 	stw	r2,0(r16)
    4390:	80800415 	stw	r2,16(r16)
    4394:	84800515 	stw	r18,20(r16)
    4398:	98001c1e 	bne	r19,zero,440c <__smakebuf_r+0x160>
    439c:	dfc01317 	ldw	ra,76(sp)
    43a0:	dcc01217 	ldw	r19,72(sp)
    43a4:	dc801117 	ldw	r18,68(sp)
    43a8:	dc401017 	ldw	r17,64(sp)
    43ac:	dc000f17 	ldw	r16,60(sp)
    43b0:	dec01404 	addi	sp,sp,80
    43b4:	f800283a 	ret
    43b8:	288010c4 	addi	r2,r5,67
    43bc:	28800015 	stw	r2,0(r5)
    43c0:	28800415 	stw	r2,16(r5)
    43c4:	00800044 	movi	r2,1
    43c8:	28800515 	stw	r2,20(r5)
    43cc:	f800283a 	ret
    43d0:	04801004 	movi	r18,64
    43d4:	003fe006 	br	4358 <__alt_mem_Flash_flash_data+0xf4004358>
    43d8:	81000a17 	ldw	r4,40(r16)
    43dc:	00c00034 	movhi	r3,0
    43e0:	18d19804 	addi	r3,r3,18016
    43e4:	20ffc51e 	bne	r4,r3,42fc <__alt_mem_Flash_flash_data+0xf40042fc>
    43e8:	80c0030b 	ldhu	r3,12(r16)
    43ec:	01010004 	movi	r4,1024
    43f0:	81001315 	stw	r4,76(r16)
    43f4:	1906b03a 	or	r3,r3,r4
    43f8:	80c0030d 	sth	r3,12(r16)
    43fc:	003fc206 	br	4308 <__alt_mem_Flash_flash_data+0xf4004308>
    4400:	0027883a 	mov	r19,zero
    4404:	04810004 	movi	r18,1024
    4408:	003fd606 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>
    440c:	8140038f 	ldh	r5,14(r16)
    4410:	8809883a 	mov	r4,r17
    4414:	00048d00 	call	48d0 <_isatty_r>
    4418:	103fe026 	beq	r2,zero,439c <__alt_mem_Flash_flash_data+0xf400439c>
    441c:	8080030b 	ldhu	r2,12(r16)
    4420:	10800054 	ori	r2,r2,1
    4424:	8080030d 	sth	r2,12(r16)
    4428:	003fdc06 	br	439c <__alt_mem_Flash_flash_data+0xf400439c>
    442c:	8080030b 	ldhu	r2,12(r16)
    4430:	10c0800c 	andi	r3,r2,512
    4434:	183fd91e 	bne	r3,zero,439c <__alt_mem_Flash_flash_data+0xf400439c>
    4438:	10800094 	ori	r2,r2,2
    443c:	80c010c4 	addi	r3,r16,67
    4440:	8080030d 	sth	r2,12(r16)
    4444:	00800044 	movi	r2,1
    4448:	80c00015 	stw	r3,0(r16)
    444c:	80c00415 	stw	r3,16(r16)
    4450:	80800515 	stw	r2,20(r16)
    4454:	003fd106 	br	439c <__alt_mem_Flash_flash_data+0xf400439c>
    4458:	04c00044 	movi	r19,1
    445c:	04810004 	movi	r18,1024
    4460:	003fc006 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>

00004464 <memset>:
    4464:	20c000cc 	andi	r3,r4,3
    4468:	2005883a 	mov	r2,r4
    446c:	18004326 	beq	r3,zero,457c <memset+0x118>
    4470:	31ffffc4 	addi	r7,r6,-1
    4474:	30004026 	beq	r6,zero,4578 <memset+0x114>
    4478:	2813883a 	mov	r9,r5
    447c:	200d883a 	mov	r6,r4
    4480:	2007883a 	mov	r3,r4
    4484:	00000406 	br	4498 <memset+0x34>
    4488:	3a3fffc4 	addi	r8,r7,-1
    448c:	31800044 	addi	r6,r6,1
    4490:	38003926 	beq	r7,zero,4578 <memset+0x114>
    4494:	400f883a 	mov	r7,r8
    4498:	18c00044 	addi	r3,r3,1
    449c:	32400005 	stb	r9,0(r6)
    44a0:	1a0000cc 	andi	r8,r3,3
    44a4:	403ff81e 	bne	r8,zero,4488 <__alt_mem_Flash_flash_data+0xf4004488>
    44a8:	010000c4 	movi	r4,3
    44ac:	21c02d2e 	bgeu	r4,r7,4564 <memset+0x100>
    44b0:	29803fcc 	andi	r6,r5,255
    44b4:	3008923a 	slli	r4,r6,8
    44b8:	218cb03a 	or	r6,r4,r6
    44bc:	3008943a 	slli	r4,r6,16
    44c0:	218cb03a 	or	r6,r4,r6
    44c4:	010003c4 	movi	r4,15
    44c8:	21c0182e 	bgeu	r4,r7,452c <memset+0xc8>
    44cc:	3b3ffc04 	addi	r12,r7,-16
    44d0:	6018d13a 	srli	r12,r12,4
    44d4:	1a000104 	addi	r8,r3,4
    44d8:	1ac00204 	addi	r11,r3,8
    44dc:	6008913a 	slli	r4,r12,4
    44e0:	1a800304 	addi	r10,r3,12
    44e4:	1813883a 	mov	r9,r3
    44e8:	21000504 	addi	r4,r4,20
    44ec:	1909883a 	add	r4,r3,r4
    44f0:	49800015 	stw	r6,0(r9)
    44f4:	41800015 	stw	r6,0(r8)
    44f8:	59800015 	stw	r6,0(r11)
    44fc:	51800015 	stw	r6,0(r10)
    4500:	42000404 	addi	r8,r8,16
    4504:	4a400404 	addi	r9,r9,16
    4508:	5ac00404 	addi	r11,r11,16
    450c:	52800404 	addi	r10,r10,16
    4510:	413ff71e 	bne	r8,r4,44f0 <__alt_mem_Flash_flash_data+0xf40044f0>
    4514:	63000044 	addi	r12,r12,1
    4518:	6018913a 	slli	r12,r12,4
    451c:	39c003cc 	andi	r7,r7,15
    4520:	010000c4 	movi	r4,3
    4524:	1b07883a 	add	r3,r3,r12
    4528:	21c00e2e 	bgeu	r4,r7,4564 <memset+0x100>
    452c:	1813883a 	mov	r9,r3
    4530:	3811883a 	mov	r8,r7
    4534:	010000c4 	movi	r4,3
    4538:	49800015 	stw	r6,0(r9)
    453c:	423fff04 	addi	r8,r8,-4
    4540:	4a400104 	addi	r9,r9,4
    4544:	223ffc36 	bltu	r4,r8,4538 <__alt_mem_Flash_flash_data+0xf4004538>
    4548:	393fff04 	addi	r4,r7,-4
    454c:	2008d0ba 	srli	r4,r4,2
    4550:	39c000cc 	andi	r7,r7,3
    4554:	21000044 	addi	r4,r4,1
    4558:	2109883a 	add	r4,r4,r4
    455c:	2109883a 	add	r4,r4,r4
    4560:	1907883a 	add	r3,r3,r4
    4564:	38000426 	beq	r7,zero,4578 <memset+0x114>
    4568:	19cf883a 	add	r7,r3,r7
    456c:	19400005 	stb	r5,0(r3)
    4570:	18c00044 	addi	r3,r3,1
    4574:	19fffd1e 	bne	r3,r7,456c <__alt_mem_Flash_flash_data+0xf400456c>
    4578:	f800283a 	ret
    457c:	2007883a 	mov	r3,r4
    4580:	300f883a 	mov	r7,r6
    4584:	003fc806 	br	44a8 <__alt_mem_Flash_flash_data+0xf40044a8>

00004588 <__sread>:
    4588:	defffe04 	addi	sp,sp,-8
    458c:	dc000015 	stw	r16,0(sp)
    4590:	2821883a 	mov	r16,r5
    4594:	2940038f 	ldh	r5,14(r5)
    4598:	dfc00115 	stw	ra,4(sp)
    459c:	00049800 	call	4980 <_read_r>
    45a0:	10000716 	blt	r2,zero,45c0 <__sread+0x38>
    45a4:	80c01417 	ldw	r3,80(r16)
    45a8:	1887883a 	add	r3,r3,r2
    45ac:	80c01415 	stw	r3,80(r16)
    45b0:	dfc00117 	ldw	ra,4(sp)
    45b4:	dc000017 	ldw	r16,0(sp)
    45b8:	dec00204 	addi	sp,sp,8
    45bc:	f800283a 	ret
    45c0:	80c0030b 	ldhu	r3,12(r16)
    45c4:	18fbffcc 	andi	r3,r3,61439
    45c8:	80c0030d 	sth	r3,12(r16)
    45cc:	dfc00117 	ldw	ra,4(sp)
    45d0:	dc000017 	ldw	r16,0(sp)
    45d4:	dec00204 	addi	sp,sp,8
    45d8:	f800283a 	ret

000045dc <__seofread>:
    45dc:	0005883a 	mov	r2,zero
    45e0:	f800283a 	ret

000045e4 <__swrite>:
    45e4:	2880030b 	ldhu	r2,12(r5)
    45e8:	defffb04 	addi	sp,sp,-20
    45ec:	dcc00315 	stw	r19,12(sp)
    45f0:	dc800215 	stw	r18,8(sp)
    45f4:	dc400115 	stw	r17,4(sp)
    45f8:	dc000015 	stw	r16,0(sp)
    45fc:	dfc00415 	stw	ra,16(sp)
    4600:	10c0400c 	andi	r3,r2,256
    4604:	2821883a 	mov	r16,r5
    4608:	2027883a 	mov	r19,r4
    460c:	3025883a 	mov	r18,r6
    4610:	3823883a 	mov	r17,r7
    4614:	18000526 	beq	r3,zero,462c <__swrite+0x48>
    4618:	2940038f 	ldh	r5,14(r5)
    461c:	000d883a 	mov	r6,zero
    4620:	01c00084 	movi	r7,2
    4624:	00049240 	call	4924 <_lseek_r>
    4628:	8080030b 	ldhu	r2,12(r16)
    462c:	8140038f 	ldh	r5,14(r16)
    4630:	10bbffcc 	andi	r2,r2,61439
    4634:	9809883a 	mov	r4,r19
    4638:	900d883a 	mov	r6,r18
    463c:	880f883a 	mov	r7,r17
    4640:	8080030d 	sth	r2,12(r16)
    4644:	dfc00417 	ldw	ra,16(sp)
    4648:	dcc00317 	ldw	r19,12(sp)
    464c:	dc800217 	ldw	r18,8(sp)
    4650:	dc400117 	ldw	r17,4(sp)
    4654:	dc000017 	ldw	r16,0(sp)
    4658:	dec00504 	addi	sp,sp,20
    465c:	00046c41 	jmpi	46c4 <_write_r>

00004660 <__sseek>:
    4660:	defffe04 	addi	sp,sp,-8
    4664:	dc000015 	stw	r16,0(sp)
    4668:	2821883a 	mov	r16,r5
    466c:	2940038f 	ldh	r5,14(r5)
    4670:	dfc00115 	stw	ra,4(sp)
    4674:	00049240 	call	4924 <_lseek_r>
    4678:	00ffffc4 	movi	r3,-1
    467c:	10c00826 	beq	r2,r3,46a0 <__sseek+0x40>
    4680:	80c0030b 	ldhu	r3,12(r16)
    4684:	80801415 	stw	r2,80(r16)
    4688:	18c40014 	ori	r3,r3,4096
    468c:	80c0030d 	sth	r3,12(r16)
    4690:	dfc00117 	ldw	ra,4(sp)
    4694:	dc000017 	ldw	r16,0(sp)
    4698:	dec00204 	addi	sp,sp,8
    469c:	f800283a 	ret
    46a0:	80c0030b 	ldhu	r3,12(r16)
    46a4:	18fbffcc 	andi	r3,r3,61439
    46a8:	80c0030d 	sth	r3,12(r16)
    46ac:	dfc00117 	ldw	ra,4(sp)
    46b0:	dc000017 	ldw	r16,0(sp)
    46b4:	dec00204 	addi	sp,sp,8
    46b8:	f800283a 	ret

000046bc <__sclose>:
    46bc:	2940038f 	ldh	r5,14(r5)
    46c0:	00047201 	jmpi	4720 <_close_r>

000046c4 <_write_r>:
    46c4:	defffd04 	addi	sp,sp,-12
    46c8:	dc000015 	stw	r16,0(sp)
    46cc:	04000074 	movhi	r16,1
    46d0:	dc400115 	stw	r17,4(sp)
    46d4:	84151504 	addi	r16,r16,21588
    46d8:	2023883a 	mov	r17,r4
    46dc:	2809883a 	mov	r4,r5
    46e0:	300b883a 	mov	r5,r6
    46e4:	380d883a 	mov	r6,r7
    46e8:	dfc00215 	stw	ra,8(sp)
    46ec:	80000015 	stw	zero,0(r16)
    46f0:	00053d00 	call	53d0 <write>
    46f4:	00ffffc4 	movi	r3,-1
    46f8:	10c00526 	beq	r2,r3,4710 <_write_r+0x4c>
    46fc:	dfc00217 	ldw	ra,8(sp)
    4700:	dc400117 	ldw	r17,4(sp)
    4704:	dc000017 	ldw	r16,0(sp)
    4708:	dec00304 	addi	sp,sp,12
    470c:	f800283a 	ret
    4710:	80c00017 	ldw	r3,0(r16)
    4714:	183ff926 	beq	r3,zero,46fc <__alt_mem_Flash_flash_data+0xf40046fc>
    4718:	88c00015 	stw	r3,0(r17)
    471c:	003ff706 	br	46fc <__alt_mem_Flash_flash_data+0xf40046fc>

00004720 <_close_r>:
    4720:	defffd04 	addi	sp,sp,-12
    4724:	dc000015 	stw	r16,0(sp)
    4728:	04000074 	movhi	r16,1
    472c:	dc400115 	stw	r17,4(sp)
    4730:	84151504 	addi	r16,r16,21588
    4734:	2023883a 	mov	r17,r4
    4738:	2809883a 	mov	r4,r5
    473c:	dfc00215 	stw	ra,8(sp)
    4740:	80000015 	stw	zero,0(r16)
    4744:	0004b580 	call	4b58 <close>
    4748:	00ffffc4 	movi	r3,-1
    474c:	10c00526 	beq	r2,r3,4764 <_close_r+0x44>
    4750:	dfc00217 	ldw	ra,8(sp)
    4754:	dc400117 	ldw	r17,4(sp)
    4758:	dc000017 	ldw	r16,0(sp)
    475c:	dec00304 	addi	sp,sp,12
    4760:	f800283a 	ret
    4764:	80c00017 	ldw	r3,0(r16)
    4768:	183ff926 	beq	r3,zero,4750 <__alt_mem_Flash_flash_data+0xf4004750>
    476c:	88c00015 	stw	r3,0(r17)
    4770:	003ff706 	br	4750 <__alt_mem_Flash_flash_data+0xf4004750>

00004774 <_fclose_r>:
    4774:	28003926 	beq	r5,zero,485c <_fclose_r+0xe8>
    4778:	defffc04 	addi	sp,sp,-16
    477c:	dc400115 	stw	r17,4(sp)
    4780:	dc000015 	stw	r16,0(sp)
    4784:	dfc00315 	stw	ra,12(sp)
    4788:	dc800215 	stw	r18,8(sp)
    478c:	2023883a 	mov	r17,r4
    4790:	2821883a 	mov	r16,r5
    4794:	20000226 	beq	r4,zero,47a0 <_fclose_r+0x2c>
    4798:	20800e17 	ldw	r2,56(r4)
    479c:	10002726 	beq	r2,zero,483c <_fclose_r+0xc8>
    47a0:	8080030f 	ldh	r2,12(r16)
    47a4:	1000071e 	bne	r2,zero,47c4 <_fclose_r+0x50>
    47a8:	0005883a 	mov	r2,zero
    47ac:	dfc00317 	ldw	ra,12(sp)
    47b0:	dc800217 	ldw	r18,8(sp)
    47b4:	dc400117 	ldw	r17,4(sp)
    47b8:	dc000017 	ldw	r16,0(sp)
    47bc:	dec00404 	addi	sp,sp,16
    47c0:	f800283a 	ret
    47c4:	8809883a 	mov	r4,r17
    47c8:	800b883a 	mov	r5,r16
    47cc:	00036dc0 	call	36dc <__sflush_r>
    47d0:	1025883a 	mov	r18,r2
    47d4:	80800b17 	ldw	r2,44(r16)
    47d8:	10000426 	beq	r2,zero,47ec <_fclose_r+0x78>
    47dc:	81400717 	ldw	r5,28(r16)
    47e0:	8809883a 	mov	r4,r17
    47e4:	103ee83a 	callr	r2
    47e8:	10001616 	blt	r2,zero,4844 <_fclose_r+0xd0>
    47ec:	8080030b 	ldhu	r2,12(r16)
    47f0:	1080200c 	andi	r2,r2,128
    47f4:	1000151e 	bne	r2,zero,484c <_fclose_r+0xd8>
    47f8:	81400c17 	ldw	r5,48(r16)
    47fc:	28000526 	beq	r5,zero,4814 <_fclose_r+0xa0>
    4800:	80801004 	addi	r2,r16,64
    4804:	28800226 	beq	r5,r2,4810 <_fclose_r+0x9c>
    4808:	8809883a 	mov	r4,r17
    480c:	0003e340 	call	3e34 <_free_r>
    4810:	80000c15 	stw	zero,48(r16)
    4814:	81401117 	ldw	r5,68(r16)
    4818:	28000326 	beq	r5,zero,4828 <_fclose_r+0xb4>
    481c:	8809883a 	mov	r4,r17
    4820:	0003e340 	call	3e34 <_free_r>
    4824:	80001115 	stw	zero,68(r16)
    4828:	0003cd00 	call	3cd0 <__sfp_lock_acquire>
    482c:	8000030d 	sth	zero,12(r16)
    4830:	0003cd40 	call	3cd4 <__sfp_lock_release>
    4834:	9005883a 	mov	r2,r18
    4838:	003fdc06 	br	47ac <__alt_mem_Flash_flash_data+0xf40047ac>
    483c:	0003cc00 	call	3cc0 <__sinit>
    4840:	003fd706 	br	47a0 <__alt_mem_Flash_flash_data+0xf40047a0>
    4844:	04bfffc4 	movi	r18,-1
    4848:	003fe806 	br	47ec <__alt_mem_Flash_flash_data+0xf40047ec>
    484c:	81400417 	ldw	r5,16(r16)
    4850:	8809883a 	mov	r4,r17
    4854:	0003e340 	call	3e34 <_free_r>
    4858:	003fe706 	br	47f8 <__alt_mem_Flash_flash_data+0xf40047f8>
    485c:	0005883a 	mov	r2,zero
    4860:	f800283a 	ret

00004864 <fclose>:
    4864:	00800074 	movhi	r2,1
    4868:	108d1d04 	addi	r2,r2,13428
    486c:	200b883a 	mov	r5,r4
    4870:	11000017 	ldw	r4,0(r2)
    4874:	00047741 	jmpi	4774 <_fclose_r>

00004878 <_fstat_r>:
    4878:	defffd04 	addi	sp,sp,-12
    487c:	dc000015 	stw	r16,0(sp)
    4880:	04000074 	movhi	r16,1
    4884:	dc400115 	stw	r17,4(sp)
    4888:	84151504 	addi	r16,r16,21588
    488c:	2023883a 	mov	r17,r4
    4890:	2809883a 	mov	r4,r5
    4894:	300b883a 	mov	r5,r6
    4898:	dfc00215 	stw	ra,8(sp)
    489c:	80000015 	stw	zero,0(r16)
    48a0:	0004ca40 	call	4ca4 <fstat>
    48a4:	00ffffc4 	movi	r3,-1
    48a8:	10c00526 	beq	r2,r3,48c0 <_fstat_r+0x48>
    48ac:	dfc00217 	ldw	ra,8(sp)
    48b0:	dc400117 	ldw	r17,4(sp)
    48b4:	dc000017 	ldw	r16,0(sp)
    48b8:	dec00304 	addi	sp,sp,12
    48bc:	f800283a 	ret
    48c0:	80c00017 	ldw	r3,0(r16)
    48c4:	183ff926 	beq	r3,zero,48ac <__alt_mem_Flash_flash_data+0xf40048ac>
    48c8:	88c00015 	stw	r3,0(r17)
    48cc:	003ff706 	br	48ac <__alt_mem_Flash_flash_data+0xf40048ac>

000048d0 <_isatty_r>:
    48d0:	defffd04 	addi	sp,sp,-12
    48d4:	dc000015 	stw	r16,0(sp)
    48d8:	04000074 	movhi	r16,1
    48dc:	dc400115 	stw	r17,4(sp)
    48e0:	84151504 	addi	r16,r16,21588
    48e4:	2023883a 	mov	r17,r4
    48e8:	2809883a 	mov	r4,r5
    48ec:	dfc00215 	stw	ra,8(sp)
    48f0:	80000015 	stw	zero,0(r16)
    48f4:	0004da40 	call	4da4 <isatty>
    48f8:	00ffffc4 	movi	r3,-1
    48fc:	10c00526 	beq	r2,r3,4914 <_isatty_r+0x44>
    4900:	dfc00217 	ldw	ra,8(sp)
    4904:	dc400117 	ldw	r17,4(sp)
    4908:	dc000017 	ldw	r16,0(sp)
    490c:	dec00304 	addi	sp,sp,12
    4910:	f800283a 	ret
    4914:	80c00017 	ldw	r3,0(r16)
    4918:	183ff926 	beq	r3,zero,4900 <__alt_mem_Flash_flash_data+0xf4004900>
    491c:	88c00015 	stw	r3,0(r17)
    4920:	003ff706 	br	4900 <__alt_mem_Flash_flash_data+0xf4004900>

00004924 <_lseek_r>:
    4924:	defffd04 	addi	sp,sp,-12
    4928:	dc000015 	stw	r16,0(sp)
    492c:	04000074 	movhi	r16,1
    4930:	dc400115 	stw	r17,4(sp)
    4934:	84151504 	addi	r16,r16,21588
    4938:	2023883a 	mov	r17,r4
    493c:	2809883a 	mov	r4,r5
    4940:	300b883a 	mov	r5,r6
    4944:	380d883a 	mov	r6,r7
    4948:	dfc00215 	stw	ra,8(sp)
    494c:	80000015 	stw	zero,0(r16)
    4950:	0004f7c0 	call	4f7c <lseek>
    4954:	00ffffc4 	movi	r3,-1
    4958:	10c00526 	beq	r2,r3,4970 <_lseek_r+0x4c>
    495c:	dfc00217 	ldw	ra,8(sp)
    4960:	dc400117 	ldw	r17,4(sp)
    4964:	dc000017 	ldw	r16,0(sp)
    4968:	dec00304 	addi	sp,sp,12
    496c:	f800283a 	ret
    4970:	80c00017 	ldw	r3,0(r16)
    4974:	183ff926 	beq	r3,zero,495c <__alt_mem_Flash_flash_data+0xf400495c>
    4978:	88c00015 	stw	r3,0(r17)
    497c:	003ff706 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>

00004980 <_read_r>:
    4980:	defffd04 	addi	sp,sp,-12
    4984:	dc000015 	stw	r16,0(sp)
    4988:	04000074 	movhi	r16,1
    498c:	dc400115 	stw	r17,4(sp)
    4990:	84151504 	addi	r16,r16,21588
    4994:	2023883a 	mov	r17,r4
    4998:	2809883a 	mov	r4,r5
    499c:	300b883a 	mov	r5,r6
    49a0:	380d883a 	mov	r6,r7
    49a4:	dfc00215 	stw	ra,8(sp)
    49a8:	80000015 	stw	zero,0(r16)
    49ac:	00051740 	call	5174 <read>
    49b0:	00ffffc4 	movi	r3,-1
    49b4:	10c00526 	beq	r2,r3,49cc <_read_r+0x4c>
    49b8:	dfc00217 	ldw	ra,8(sp)
    49bc:	dc400117 	ldw	r17,4(sp)
    49c0:	dc000017 	ldw	r16,0(sp)
    49c4:	dec00304 	addi	sp,sp,12
    49c8:	f800283a 	ret
    49cc:	80c00017 	ldw	r3,0(r16)
    49d0:	183ff926 	beq	r3,zero,49b8 <__alt_mem_Flash_flash_data+0xf40049b8>
    49d4:	88c00015 	stw	r3,0(r17)
    49d8:	003ff706 	br	49b8 <__alt_mem_Flash_flash_data+0xf40049b8>

000049dc <udivmodsi4>:
    49dc:	2900182e 	bgeu	r5,r4,4a40 <udivmodsi4+0x64>
    49e0:	28001716 	blt	r5,zero,4a40 <udivmodsi4+0x64>
    49e4:	00800804 	movi	r2,32
    49e8:	00c00044 	movi	r3,1
    49ec:	00000206 	br	49f8 <udivmodsi4+0x1c>
    49f0:	10001126 	beq	r2,zero,4a38 <udivmodsi4+0x5c>
    49f4:	28000516 	blt	r5,zero,4a0c <udivmodsi4+0x30>
    49f8:	294b883a 	add	r5,r5,r5
    49fc:	10bfffc4 	addi	r2,r2,-1
    4a00:	18c7883a 	add	r3,r3,r3
    4a04:	293ffa36 	bltu	r5,r4,49f0 <__alt_mem_Flash_flash_data+0xf40049f0>
    4a08:	18000b26 	beq	r3,zero,4a38 <udivmodsi4+0x5c>
    4a0c:	0005883a 	mov	r2,zero
    4a10:	21400236 	bltu	r4,r5,4a1c <udivmodsi4+0x40>
    4a14:	2149c83a 	sub	r4,r4,r5
    4a18:	10c4b03a 	or	r2,r2,r3
    4a1c:	1806d07a 	srli	r3,r3,1
    4a20:	280ad07a 	srli	r5,r5,1
    4a24:	183ffa1e 	bne	r3,zero,4a10 <__alt_mem_Flash_flash_data+0xf4004a10>
    4a28:	3000011e 	bne	r6,zero,4a30 <udivmodsi4+0x54>
    4a2c:	f800283a 	ret
    4a30:	2005883a 	mov	r2,r4
    4a34:	f800283a 	ret
    4a38:	0005883a 	mov	r2,zero
    4a3c:	003ffa06 	br	4a28 <__alt_mem_Flash_flash_data+0xf4004a28>
    4a40:	00c00044 	movi	r3,1
    4a44:	003ff106 	br	4a0c <__alt_mem_Flash_flash_data+0xf4004a0c>

00004a48 <__divsi3>:
    4a48:	defffe04 	addi	sp,sp,-8
    4a4c:	dfc00115 	stw	ra,4(sp)
    4a50:	dc000015 	stw	r16,0(sp)
    4a54:	20000b16 	blt	r4,zero,4a84 <__divsi3+0x3c>
    4a58:	0021883a 	mov	r16,zero
    4a5c:	28000c16 	blt	r5,zero,4a90 <__divsi3+0x48>
    4a60:	000d883a 	mov	r6,zero
    4a64:	00049dc0 	call	49dc <udivmodsi4>
    4a68:	0407c83a 	sub	r3,zero,r16
    4a6c:	1884f03a 	xor	r2,r3,r2
    4a70:	1405883a 	add	r2,r2,r16
    4a74:	dfc00117 	ldw	ra,4(sp)
    4a78:	dc000017 	ldw	r16,0(sp)
    4a7c:	dec00204 	addi	sp,sp,8
    4a80:	f800283a 	ret
    4a84:	0109c83a 	sub	r4,zero,r4
    4a88:	04000044 	movi	r16,1
    4a8c:	283ff40e 	bge	r5,zero,4a60 <__alt_mem_Flash_flash_data+0xf4004a60>
    4a90:	014bc83a 	sub	r5,zero,r5
    4a94:	8400005c 	xori	r16,r16,1
    4a98:	003ff106 	br	4a60 <__alt_mem_Flash_flash_data+0xf4004a60>

00004a9c <__modsi3>:
    4a9c:	defffd04 	addi	sp,sp,-12
    4aa0:	dfc00215 	stw	ra,8(sp)
    4aa4:	dc400115 	stw	r17,4(sp)
    4aa8:	dc000015 	stw	r16,0(sp)
    4aac:	20000c16 	blt	r4,zero,4ae0 <__modsi3+0x44>
    4ab0:	0023883a 	mov	r17,zero
    4ab4:	0021883a 	mov	r16,zero
    4ab8:	28000d16 	blt	r5,zero,4af0 <__modsi3+0x54>
    4abc:	01800044 	movi	r6,1
    4ac0:	00049dc0 	call	49dc <udivmodsi4>
    4ac4:	1404f03a 	xor	r2,r2,r16
    4ac8:	8885883a 	add	r2,r17,r2
    4acc:	dfc00217 	ldw	ra,8(sp)
    4ad0:	dc400117 	ldw	r17,4(sp)
    4ad4:	dc000017 	ldw	r16,0(sp)
    4ad8:	dec00304 	addi	sp,sp,12
    4adc:	f800283a 	ret
    4ae0:	0109c83a 	sub	r4,zero,r4
    4ae4:	04400044 	movi	r17,1
    4ae8:	043fffc4 	movi	r16,-1
    4aec:	283ff30e 	bge	r5,zero,4abc <__alt_mem_Flash_flash_data+0xf4004abc>
    4af0:	014bc83a 	sub	r5,zero,r5
    4af4:	003ff106 	br	4abc <__alt_mem_Flash_flash_data+0xf4004abc>

00004af8 <__udivsi3>:
    4af8:	000d883a 	mov	r6,zero
    4afc:	00049dc1 	jmpi	49dc <udivmodsi4>

00004b00 <__umodsi3>:
    4b00:	01800044 	movi	r6,1
    4b04:	00049dc1 	jmpi	49dc <udivmodsi4>

00004b08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4b08:	defffe04 	addi	sp,sp,-8
    4b0c:	dfc00115 	stw	ra,4(sp)
    4b10:	df000015 	stw	fp,0(sp)
    4b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4b18:	00800074 	movhi	r2,1
    4b1c:	108d2504 	addi	r2,r2,13460
    4b20:	10800017 	ldw	r2,0(r2)
    4b24:	10000526 	beq	r2,zero,4b3c <alt_get_errno+0x34>
    4b28:	00800074 	movhi	r2,1
    4b2c:	108d2504 	addi	r2,r2,13460
    4b30:	10800017 	ldw	r2,0(r2)
    4b34:	103ee83a 	callr	r2
    4b38:	00000206 	br	4b44 <alt_get_errno+0x3c>
    4b3c:	00800074 	movhi	r2,1
    4b40:	10951504 	addi	r2,r2,21588
}
    4b44:	e037883a 	mov	sp,fp
    4b48:	dfc00117 	ldw	ra,4(sp)
    4b4c:	df000017 	ldw	fp,0(sp)
    4b50:	dec00204 	addi	sp,sp,8
    4b54:	f800283a 	ret

00004b58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4b58:	defffb04 	addi	sp,sp,-20
    4b5c:	dfc00415 	stw	ra,16(sp)
    4b60:	df000315 	stw	fp,12(sp)
    4b64:	df000304 	addi	fp,sp,12
    4b68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4b6c:	e0bfff17 	ldw	r2,-4(fp)
    4b70:	10000616 	blt	r2,zero,4b8c <close+0x34>
    4b74:	e0bfff17 	ldw	r2,-4(fp)
    4b78:	10c00324 	muli	r3,r2,12
    4b7c:	00800074 	movhi	r2,1
    4b80:	1087b004 	addi	r2,r2,7872
    4b84:	1885883a 	add	r2,r3,r2
    4b88:	00000106 	br	4b90 <close+0x38>
    4b8c:	0005883a 	mov	r2,zero
    4b90:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    4b94:	e0bffd17 	ldw	r2,-12(fp)
    4b98:	10001926 	beq	r2,zero,4c00 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4b9c:	e0bffd17 	ldw	r2,-12(fp)
    4ba0:	10800017 	ldw	r2,0(r2)
    4ba4:	10800417 	ldw	r2,16(r2)
    4ba8:	10000626 	beq	r2,zero,4bc4 <close+0x6c>
    4bac:	e0bffd17 	ldw	r2,-12(fp)
    4bb0:	10800017 	ldw	r2,0(r2)
    4bb4:	10800417 	ldw	r2,16(r2)
    4bb8:	e13ffd17 	ldw	r4,-12(fp)
    4bbc:	103ee83a 	callr	r2
    4bc0:	00000106 	br	4bc8 <close+0x70>
    4bc4:	0005883a 	mov	r2,zero
    4bc8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    4bcc:	e13fff17 	ldw	r4,-4(fp)
    4bd0:	00052700 	call	5270 <alt_release_fd>
    if (rval < 0)
    4bd4:	e0bffe17 	ldw	r2,-8(fp)
    4bd8:	1000070e 	bge	r2,zero,4bf8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    4bdc:	0004b080 	call	4b08 <alt_get_errno>
    4be0:	1007883a 	mov	r3,r2
    4be4:	e0bffe17 	ldw	r2,-8(fp)
    4be8:	0085c83a 	sub	r2,zero,r2
    4bec:	18800015 	stw	r2,0(r3)
      return -1;
    4bf0:	00bfffc4 	movi	r2,-1
    4bf4:	00000706 	br	4c14 <close+0xbc>
    }
    return 0;
    4bf8:	0005883a 	mov	r2,zero
    4bfc:	00000506 	br	4c14 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4c00:	0004b080 	call	4b08 <alt_get_errno>
    4c04:	1007883a 	mov	r3,r2
    4c08:	00801444 	movi	r2,81
    4c0c:	18800015 	stw	r2,0(r3)
    return -1;
    4c10:	00bfffc4 	movi	r2,-1
  }
}
    4c14:	e037883a 	mov	sp,fp
    4c18:	dfc00117 	ldw	ra,4(sp)
    4c1c:	df000017 	ldw	fp,0(sp)
    4c20:	dec00204 	addi	sp,sp,8
    4c24:	f800283a 	ret

00004c28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4c28:	defffc04 	addi	sp,sp,-16
    4c2c:	df000315 	stw	fp,12(sp)
    4c30:	df000304 	addi	fp,sp,12
    4c34:	e13ffd15 	stw	r4,-12(fp)
    4c38:	e17ffe15 	stw	r5,-8(fp)
    4c3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4c40:	e0bfff17 	ldw	r2,-4(fp)
}
    4c44:	e037883a 	mov	sp,fp
    4c48:	df000017 	ldw	fp,0(sp)
    4c4c:	dec00104 	addi	sp,sp,4
    4c50:	f800283a 	ret

00004c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4c54:	defffe04 	addi	sp,sp,-8
    4c58:	dfc00115 	stw	ra,4(sp)
    4c5c:	df000015 	stw	fp,0(sp)
    4c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4c64:	00800074 	movhi	r2,1
    4c68:	108d2504 	addi	r2,r2,13460
    4c6c:	10800017 	ldw	r2,0(r2)
    4c70:	10000526 	beq	r2,zero,4c88 <alt_get_errno+0x34>
    4c74:	00800074 	movhi	r2,1
    4c78:	108d2504 	addi	r2,r2,13460
    4c7c:	10800017 	ldw	r2,0(r2)
    4c80:	103ee83a 	callr	r2
    4c84:	00000206 	br	4c90 <alt_get_errno+0x3c>
    4c88:	00800074 	movhi	r2,1
    4c8c:	10951504 	addi	r2,r2,21588
}
    4c90:	e037883a 	mov	sp,fp
    4c94:	dfc00117 	ldw	ra,4(sp)
    4c98:	df000017 	ldw	fp,0(sp)
    4c9c:	dec00204 	addi	sp,sp,8
    4ca0:	f800283a 	ret

00004ca4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4ca4:	defffb04 	addi	sp,sp,-20
    4ca8:	dfc00415 	stw	ra,16(sp)
    4cac:	df000315 	stw	fp,12(sp)
    4cb0:	df000304 	addi	fp,sp,12
    4cb4:	e13ffe15 	stw	r4,-8(fp)
    4cb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4cbc:	e0bffe17 	ldw	r2,-8(fp)
    4cc0:	10000616 	blt	r2,zero,4cdc <fstat+0x38>
    4cc4:	e0bffe17 	ldw	r2,-8(fp)
    4cc8:	10c00324 	muli	r3,r2,12
    4ccc:	00800074 	movhi	r2,1
    4cd0:	1087b004 	addi	r2,r2,7872
    4cd4:	1885883a 	add	r2,r3,r2
    4cd8:	00000106 	br	4ce0 <fstat+0x3c>
    4cdc:	0005883a 	mov	r2,zero
    4ce0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4ce4:	e0bffd17 	ldw	r2,-12(fp)
    4ce8:	10001026 	beq	r2,zero,4d2c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4cec:	e0bffd17 	ldw	r2,-12(fp)
    4cf0:	10800017 	ldw	r2,0(r2)
    4cf4:	10800817 	ldw	r2,32(r2)
    4cf8:	10000726 	beq	r2,zero,4d18 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    4cfc:	e0bffd17 	ldw	r2,-12(fp)
    4d00:	10800017 	ldw	r2,0(r2)
    4d04:	10800817 	ldw	r2,32(r2)
    4d08:	e13ffd17 	ldw	r4,-12(fp)
    4d0c:	e17fff17 	ldw	r5,-4(fp)
    4d10:	103ee83a 	callr	r2
    4d14:	00000a06 	br	4d40 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    4d18:	e0bfff17 	ldw	r2,-4(fp)
    4d1c:	00c80004 	movi	r3,8192
    4d20:	10c00115 	stw	r3,4(r2)
      return 0;
    4d24:	0005883a 	mov	r2,zero
    4d28:	00000506 	br	4d40 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4d2c:	0004c540 	call	4c54 <alt_get_errno>
    4d30:	1007883a 	mov	r3,r2
    4d34:	00801444 	movi	r2,81
    4d38:	18800015 	stw	r2,0(r3)
    return -1;
    4d3c:	00bfffc4 	movi	r2,-1
  }
}
    4d40:	e037883a 	mov	sp,fp
    4d44:	dfc00117 	ldw	ra,4(sp)
    4d48:	df000017 	ldw	fp,0(sp)
    4d4c:	dec00204 	addi	sp,sp,8
    4d50:	f800283a 	ret

00004d54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4d54:	defffe04 	addi	sp,sp,-8
    4d58:	dfc00115 	stw	ra,4(sp)
    4d5c:	df000015 	stw	fp,0(sp)
    4d60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4d64:	00800074 	movhi	r2,1
    4d68:	108d2504 	addi	r2,r2,13460
    4d6c:	10800017 	ldw	r2,0(r2)
    4d70:	10000526 	beq	r2,zero,4d88 <alt_get_errno+0x34>
    4d74:	00800074 	movhi	r2,1
    4d78:	108d2504 	addi	r2,r2,13460
    4d7c:	10800017 	ldw	r2,0(r2)
    4d80:	103ee83a 	callr	r2
    4d84:	00000206 	br	4d90 <alt_get_errno+0x3c>
    4d88:	00800074 	movhi	r2,1
    4d8c:	10951504 	addi	r2,r2,21588
}
    4d90:	e037883a 	mov	sp,fp
    4d94:	dfc00117 	ldw	ra,4(sp)
    4d98:	df000017 	ldw	fp,0(sp)
    4d9c:	dec00204 	addi	sp,sp,8
    4da0:	f800283a 	ret

00004da4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4da4:	deffed04 	addi	sp,sp,-76
    4da8:	dfc01215 	stw	ra,72(sp)
    4dac:	df001115 	stw	fp,68(sp)
    4db0:	df001104 	addi	fp,sp,68
    4db4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4db8:	e0bfff17 	ldw	r2,-4(fp)
    4dbc:	10000616 	blt	r2,zero,4dd8 <isatty+0x34>
    4dc0:	e0bfff17 	ldw	r2,-4(fp)
    4dc4:	10c00324 	muli	r3,r2,12
    4dc8:	00800074 	movhi	r2,1
    4dcc:	1087b004 	addi	r2,r2,7872
    4dd0:	1885883a 	add	r2,r3,r2
    4dd4:	00000106 	br	4ddc <isatty+0x38>
    4dd8:	0005883a 	mov	r2,zero
    4ddc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    4de0:	e0bfef17 	ldw	r2,-68(fp)
    4de4:	10000e26 	beq	r2,zero,4e20 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4de8:	e0bfef17 	ldw	r2,-68(fp)
    4dec:	10800017 	ldw	r2,0(r2)
    4df0:	10800817 	ldw	r2,32(r2)
    4df4:	1000021e 	bne	r2,zero,4e00 <isatty+0x5c>
    {
      return 1;
    4df8:	00800044 	movi	r2,1
    4dfc:	00000d06 	br	4e34 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    4e00:	e0bff004 	addi	r2,fp,-64
    4e04:	e13fff17 	ldw	r4,-4(fp)
    4e08:	100b883a 	mov	r5,r2
    4e0c:	0004ca40 	call	4ca4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    4e10:	e0bff117 	ldw	r2,-60(fp)
    4e14:	10880020 	cmpeqi	r2,r2,8192
    4e18:	10803fcc 	andi	r2,r2,255
    4e1c:	00000506 	br	4e34 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4e20:	0004d540 	call	4d54 <alt_get_errno>
    4e24:	1007883a 	mov	r3,r2
    4e28:	00801444 	movi	r2,81
    4e2c:	18800015 	stw	r2,0(r3)
    return 0;
    4e30:	0005883a 	mov	r2,zero
  }
}
    4e34:	e037883a 	mov	sp,fp
    4e38:	dfc00117 	ldw	ra,4(sp)
    4e3c:	df000017 	ldw	fp,0(sp)
    4e40:	dec00204 	addi	sp,sp,8
    4e44:	f800283a 	ret

00004e48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4e48:	defffc04 	addi	sp,sp,-16
    4e4c:	df000315 	stw	fp,12(sp)
    4e50:	df000304 	addi	fp,sp,12
    4e54:	e13ffd15 	stw	r4,-12(fp)
    4e58:	e17ffe15 	stw	r5,-8(fp)
    4e5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4e60:	e0fffe17 	ldw	r3,-8(fp)
    4e64:	e0bffd17 	ldw	r2,-12(fp)
    4e68:	18800c26 	beq	r3,r2,4e9c <alt_load_section+0x54>
  {
    while( to != end )
    4e6c:	00000806 	br	4e90 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4e70:	e0bffe17 	ldw	r2,-8(fp)
    4e74:	10c00104 	addi	r3,r2,4
    4e78:	e0fffe15 	stw	r3,-8(fp)
    4e7c:	e0fffd17 	ldw	r3,-12(fp)
    4e80:	19000104 	addi	r4,r3,4
    4e84:	e13ffd15 	stw	r4,-12(fp)
    4e88:	18c00017 	ldw	r3,0(r3)
    4e8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4e90:	e0fffe17 	ldw	r3,-8(fp)
    4e94:	e0bfff17 	ldw	r2,-4(fp)
    4e98:	18bff51e 	bne	r3,r2,4e70 <__alt_mem_Flash_flash_data+0xf4004e70>
    {
      *to++ = *from++;
    }
  }
}
    4e9c:	e037883a 	mov	sp,fp
    4ea0:	df000017 	ldw	fp,0(sp)
    4ea4:	dec00104 	addi	sp,sp,4
    4ea8:	f800283a 	ret

00004eac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4eac:	defffe04 	addi	sp,sp,-8
    4eb0:	dfc00115 	stw	ra,4(sp)
    4eb4:	df000015 	stw	fp,0(sp)
    4eb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4ebc:	01000074 	movhi	r4,1
    4ec0:	210d4904 	addi	r4,r4,13604
    4ec4:	01400074 	movhi	r5,1
    4ec8:	29459b04 	addi	r5,r5,5740
    4ecc:	01800074 	movhi	r6,1
    4ed0:	318d4904 	addi	r6,r6,13604
    4ed4:	0004e480 	call	4e48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4ed8:	01000034 	movhi	r4,0
    4edc:	21000804 	addi	r4,r4,32
    4ee0:	01400034 	movhi	r5,0
    4ee4:	29400804 	addi	r5,r5,32
    4ee8:	01800034 	movhi	r6,0
    4eec:	31809104 	addi	r6,r6,580
    4ef0:	0004e480 	call	4e48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4ef4:	01000074 	movhi	r4,1
    4ef8:	21048a04 	addi	r4,r4,4648
    4efc:	01400074 	movhi	r5,1
    4f00:	29448a04 	addi	r5,r5,4648
    4f04:	01800074 	movhi	r6,1
    4f08:	31859b04 	addi	r6,r6,5740
    4f0c:	0004e480 	call	4e48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4f10:	000fdcc0 	call	fdcc <alt_dcache_flush_all>
  alt_icache_flush_all();
    4f14:	00100240 	call	10024 <alt_icache_flush_all>
}
    4f18:	e037883a 	mov	sp,fp
    4f1c:	dfc00117 	ldw	ra,4(sp)
    4f20:	df000017 	ldw	fp,0(sp)
    4f24:	dec00204 	addi	sp,sp,8
    4f28:	f800283a 	ret

00004f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f2c:	defffe04 	addi	sp,sp,-8
    4f30:	dfc00115 	stw	ra,4(sp)
    4f34:	df000015 	stw	fp,0(sp)
    4f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f3c:	00800074 	movhi	r2,1
    4f40:	108d2504 	addi	r2,r2,13460
    4f44:	10800017 	ldw	r2,0(r2)
    4f48:	10000526 	beq	r2,zero,4f60 <alt_get_errno+0x34>
    4f4c:	00800074 	movhi	r2,1
    4f50:	108d2504 	addi	r2,r2,13460
    4f54:	10800017 	ldw	r2,0(r2)
    4f58:	103ee83a 	callr	r2
    4f5c:	00000206 	br	4f68 <alt_get_errno+0x3c>
    4f60:	00800074 	movhi	r2,1
    4f64:	10951504 	addi	r2,r2,21588
}
    4f68:	e037883a 	mov	sp,fp
    4f6c:	dfc00117 	ldw	ra,4(sp)
    4f70:	df000017 	ldw	fp,0(sp)
    4f74:	dec00204 	addi	sp,sp,8
    4f78:	f800283a 	ret

00004f7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4f7c:	defff904 	addi	sp,sp,-28
    4f80:	dfc00615 	stw	ra,24(sp)
    4f84:	df000515 	stw	fp,20(sp)
    4f88:	df000504 	addi	fp,sp,20
    4f8c:	e13ffd15 	stw	r4,-12(fp)
    4f90:	e17ffe15 	stw	r5,-8(fp)
    4f94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4f98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4f9c:	e0bffd17 	ldw	r2,-12(fp)
    4fa0:	10000616 	blt	r2,zero,4fbc <lseek+0x40>
    4fa4:	e0bffd17 	ldw	r2,-12(fp)
    4fa8:	10c00324 	muli	r3,r2,12
    4fac:	00800074 	movhi	r2,1
    4fb0:	1087b004 	addi	r2,r2,7872
    4fb4:	1885883a 	add	r2,r3,r2
    4fb8:	00000106 	br	4fc0 <lseek+0x44>
    4fbc:	0005883a 	mov	r2,zero
    4fc0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4fc4:	e0bffc17 	ldw	r2,-16(fp)
    4fc8:	10001026 	beq	r2,zero,500c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4fcc:	e0bffc17 	ldw	r2,-16(fp)
    4fd0:	10800017 	ldw	r2,0(r2)
    4fd4:	10800717 	ldw	r2,28(r2)
    4fd8:	10000926 	beq	r2,zero,5000 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	10800017 	ldw	r2,0(r2)
    4fe4:	10800717 	ldw	r2,28(r2)
    4fe8:	e13ffc17 	ldw	r4,-16(fp)
    4fec:	e17ffe17 	ldw	r5,-8(fp)
    4ff0:	e1bfff17 	ldw	r6,-4(fp)
    4ff4:	103ee83a 	callr	r2
    4ff8:	e0bffb15 	stw	r2,-20(fp)
    4ffc:	00000506 	br	5014 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    5000:	00bfde84 	movi	r2,-134
    5004:	e0bffb15 	stw	r2,-20(fp)
    5008:	00000206 	br	5014 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    500c:	00bfebc4 	movi	r2,-81
    5010:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    5014:	e0bffb17 	ldw	r2,-20(fp)
    5018:	1000070e 	bge	r2,zero,5038 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    501c:	0004f2c0 	call	4f2c <alt_get_errno>
    5020:	1007883a 	mov	r3,r2
    5024:	e0bffb17 	ldw	r2,-20(fp)
    5028:	0085c83a 	sub	r2,zero,r2
    502c:	18800015 	stw	r2,0(r3)
    rc = -1;
    5030:	00bfffc4 	movi	r2,-1
    5034:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    5038:	e0bffb17 	ldw	r2,-20(fp)
}
    503c:	e037883a 	mov	sp,fp
    5040:	dfc00117 	ldw	ra,4(sp)
    5044:	df000017 	ldw	fp,0(sp)
    5048:	dec00204 	addi	sp,sp,8
    504c:	f800283a 	ret

00005050 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5050:	defff904 	addi	sp,sp,-28
    5054:	dfc00615 	stw	ra,24(sp)
    5058:	df000515 	stw	fp,20(sp)
    505c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5060:	0009883a 	mov	r4,zero
    5064:	000d49c0 	call	d49c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    5068:	00060400 	call	6040 <OSInit>
    506c:	01000044 	movi	r4,1
    5070:	000abb00 	call	abb0 <OSSemCreate>
    5074:	1007883a 	mov	r3,r2
    5078:	00800074 	movhi	r2,1
    507c:	10951b04 	addi	r2,r2,21612
    5080:	10c00015 	stw	r3,0(r2)
    5084:	01000044 	movi	r4,1
    5088:	000abb00 	call	abb0 <OSSemCreate>
    508c:	1007883a 	mov	r3,r2
    5090:	00800074 	movhi	r2,1
    5094:	10951d04 	addi	r2,r2,21620
    5098:	10c00015 	stw	r3,0(r2)
    509c:	00800074 	movhi	r2,1
    50a0:	10951604 	addi	r2,r2,21592
    50a4:	e0bffc15 	stw	r2,-16(fp)
    50a8:	00800044 	movi	r2,1
    50ac:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    50b0:	e0bffd0b 	ldhu	r2,-12(fp)
    50b4:	1009883a 	mov	r4,r2
    50b8:	000abb00 	call	abb0 <OSSemCreate>
    50bc:	1007883a 	mov	r3,r2
    50c0:	e0bffc17 	ldw	r2,-16(fp)
    50c4:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    50c8:	000d4d00 	call	d4d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    50cc:	01000074 	movhi	r4,1
    50d0:	2104e304 	addi	r4,r4,5004
    50d4:	01400074 	movhi	r5,1
    50d8:	2944e304 	addi	r5,r5,5004
    50dc:	01800074 	movhi	r6,1
    50e0:	3184e304 	addi	r6,r6,5004
    50e4:	00101140 	call	10114 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    50e8:	000fedc0 	call	fedc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    50ec:	01000074 	movhi	r4,1
    50f0:	213fce04 	addi	r4,r4,-200
    50f4:	0010dd80 	call	10dd8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    50f8:	d1280b17 	ldw	r4,-24532(gp)
    50fc:	d0e80c17 	ldw	r3,-24528(gp)
    5100:	d0a80d17 	ldw	r2,-24524(gp)
    5104:	180b883a 	mov	r5,r3
    5108:	100d883a 	mov	r6,r2
    510c:	00011d40 	call	11d4 <main>
    5110:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    5114:	01000044 	movi	r4,1
    5118:	0004b580 	call	4b58 <close>
  exit (result);
    511c:	e13ffb17 	ldw	r4,-20(fp)
    5120:	0010dec0 	call	10dec <exit>

00005124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5124:	defffe04 	addi	sp,sp,-8
    5128:	dfc00115 	stw	ra,4(sp)
    512c:	df000015 	stw	fp,0(sp)
    5130:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5134:	00800074 	movhi	r2,1
    5138:	108d2504 	addi	r2,r2,13460
    513c:	10800017 	ldw	r2,0(r2)
    5140:	10000526 	beq	r2,zero,5158 <alt_get_errno+0x34>
    5144:	00800074 	movhi	r2,1
    5148:	108d2504 	addi	r2,r2,13460
    514c:	10800017 	ldw	r2,0(r2)
    5150:	103ee83a 	callr	r2
    5154:	00000206 	br	5160 <alt_get_errno+0x3c>
    5158:	00800074 	movhi	r2,1
    515c:	10951504 	addi	r2,r2,21588
}
    5160:	e037883a 	mov	sp,fp
    5164:	dfc00117 	ldw	ra,4(sp)
    5168:	df000017 	ldw	fp,0(sp)
    516c:	dec00204 	addi	sp,sp,8
    5170:	f800283a 	ret

00005174 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5174:	defff904 	addi	sp,sp,-28
    5178:	dfc00615 	stw	ra,24(sp)
    517c:	df000515 	stw	fp,20(sp)
    5180:	df000504 	addi	fp,sp,20
    5184:	e13ffd15 	stw	r4,-12(fp)
    5188:	e17ffe15 	stw	r5,-8(fp)
    518c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5190:	e0bffd17 	ldw	r2,-12(fp)
    5194:	10000616 	blt	r2,zero,51b0 <read+0x3c>
    5198:	e0bffd17 	ldw	r2,-12(fp)
    519c:	10c00324 	muli	r3,r2,12
    51a0:	00800074 	movhi	r2,1
    51a4:	1087b004 	addi	r2,r2,7872
    51a8:	1885883a 	add	r2,r3,r2
    51ac:	00000106 	br	51b4 <read+0x40>
    51b0:	0005883a 	mov	r2,zero
    51b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    51b8:	e0bffb17 	ldw	r2,-20(fp)
    51bc:	10002226 	beq	r2,zero,5248 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    51c0:	e0bffb17 	ldw	r2,-20(fp)
    51c4:	10800217 	ldw	r2,8(r2)
    51c8:	108000cc 	andi	r2,r2,3
    51cc:	10800060 	cmpeqi	r2,r2,1
    51d0:	1000181e 	bne	r2,zero,5234 <read+0xc0>
        (fd->dev->read))
    51d4:	e0bffb17 	ldw	r2,-20(fp)
    51d8:	10800017 	ldw	r2,0(r2)
    51dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    51e0:	10001426 	beq	r2,zero,5234 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    51e4:	e0bffb17 	ldw	r2,-20(fp)
    51e8:	10800017 	ldw	r2,0(r2)
    51ec:	10800517 	ldw	r2,20(r2)
    51f0:	e0ffff17 	ldw	r3,-4(fp)
    51f4:	e13ffb17 	ldw	r4,-20(fp)
    51f8:	e17ffe17 	ldw	r5,-8(fp)
    51fc:	180d883a 	mov	r6,r3
    5200:	103ee83a 	callr	r2
    5204:	e0bffc15 	stw	r2,-16(fp)
    5208:	e0bffc17 	ldw	r2,-16(fp)
    520c:	1000070e 	bge	r2,zero,522c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    5210:	00051240 	call	5124 <alt_get_errno>
    5214:	1007883a 	mov	r3,r2
    5218:	e0bffc17 	ldw	r2,-16(fp)
    521c:	0085c83a 	sub	r2,zero,r2
    5220:	18800015 	stw	r2,0(r3)
          return -1;
    5224:	00bfffc4 	movi	r2,-1
    5228:	00000c06 	br	525c <read+0xe8>
        }
        return rval;
    522c:	e0bffc17 	ldw	r2,-16(fp)
    5230:	00000a06 	br	525c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5234:	00051240 	call	5124 <alt_get_errno>
    5238:	1007883a 	mov	r3,r2
    523c:	00800344 	movi	r2,13
    5240:	18800015 	stw	r2,0(r3)
    5244:	00000406 	br	5258 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5248:	00051240 	call	5124 <alt_get_errno>
    524c:	1007883a 	mov	r3,r2
    5250:	00801444 	movi	r2,81
    5254:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5258:	00bfffc4 	movi	r2,-1
}
    525c:	e037883a 	mov	sp,fp
    5260:	dfc00117 	ldw	ra,4(sp)
    5264:	df000017 	ldw	fp,0(sp)
    5268:	dec00204 	addi	sp,sp,8
    526c:	f800283a 	ret

00005270 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5270:	defffe04 	addi	sp,sp,-8
    5274:	df000115 	stw	fp,4(sp)
    5278:	df000104 	addi	fp,sp,4
    527c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    5280:	e0bfff17 	ldw	r2,-4(fp)
    5284:	108000d0 	cmplti	r2,r2,3
    5288:	10000d1e 	bne	r2,zero,52c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    528c:	00800074 	movhi	r2,1
    5290:	1087b004 	addi	r2,r2,7872
    5294:	e0ffff17 	ldw	r3,-4(fp)
    5298:	18c00324 	muli	r3,r3,12
    529c:	18c00204 	addi	r3,r3,8
    52a0:	10c5883a 	add	r2,r2,r3
    52a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    52a8:	00800074 	movhi	r2,1
    52ac:	1087b004 	addi	r2,r2,7872
    52b0:	e0ffff17 	ldw	r3,-4(fp)
    52b4:	18c00324 	muli	r3,r3,12
    52b8:	10c5883a 	add	r2,r2,r3
    52bc:	10000015 	stw	zero,0(r2)
  }
}
    52c0:	e037883a 	mov	sp,fp
    52c4:	df000017 	ldw	fp,0(sp)
    52c8:	dec00104 	addi	sp,sp,4
    52cc:	f800283a 	ret

000052d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    52d0:	defff904 	addi	sp,sp,-28
    52d4:	df000615 	stw	fp,24(sp)
    52d8:	df000604 	addi	fp,sp,24
    52dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    52e0:	0005303a 	rdctl	r2,status
    52e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    52e8:	e0fffc17 	ldw	r3,-16(fp)
    52ec:	00bfff84 	movi	r2,-2
    52f0:	1884703a 	and	r2,r3,r2
    52f4:	1001703a 	wrctl	status,r2
  
  return context;
    52f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    52fc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5300:	d0a01a17 	ldw	r2,-32664(gp)
    5304:	10c000c4 	addi	r3,r2,3
    5308:	00bfff04 	movi	r2,-4
    530c:	1884703a 	and	r2,r3,r2
    5310:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5314:	d0e01a17 	ldw	r3,-32664(gp)
    5318:	e0bfff17 	ldw	r2,-4(fp)
    531c:	1887883a 	add	r3,r3,r2
    5320:	00810034 	movhi	r2,1024
    5324:	10800004 	addi	r2,r2,0
    5328:	10c0062e 	bgeu	r2,r3,5344 <sbrk+0x74>
    532c:	e0bffa17 	ldw	r2,-24(fp)
    5330:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5334:	e0bffd17 	ldw	r2,-12(fp)
    5338:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    533c:	00bfffc4 	movi	r2,-1
    5340:	00000b06 	br	5370 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    5344:	d0a01a17 	ldw	r2,-32664(gp)
    5348:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    534c:	d0e01a17 	ldw	r3,-32664(gp)
    5350:	e0bfff17 	ldw	r2,-4(fp)
    5354:	1885883a 	add	r2,r3,r2
    5358:	d0a01a15 	stw	r2,-32664(gp)
    535c:	e0bffa17 	ldw	r2,-24(fp)
    5360:	e0bffe15 	stw	r2,-8(fp)
    5364:	e0bffe17 	ldw	r2,-8(fp)
    5368:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    536c:	e0bffb17 	ldw	r2,-20(fp)
} 
    5370:	e037883a 	mov	sp,fp
    5374:	df000017 	ldw	fp,0(sp)
    5378:	dec00104 	addi	sp,sp,4
    537c:	f800283a 	ret

00005380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5380:	defffe04 	addi	sp,sp,-8
    5384:	dfc00115 	stw	ra,4(sp)
    5388:	df000015 	stw	fp,0(sp)
    538c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5390:	00800074 	movhi	r2,1
    5394:	108d2504 	addi	r2,r2,13460
    5398:	10800017 	ldw	r2,0(r2)
    539c:	10000526 	beq	r2,zero,53b4 <alt_get_errno+0x34>
    53a0:	00800074 	movhi	r2,1
    53a4:	108d2504 	addi	r2,r2,13460
    53a8:	10800017 	ldw	r2,0(r2)
    53ac:	103ee83a 	callr	r2
    53b0:	00000206 	br	53bc <alt_get_errno+0x3c>
    53b4:	00800074 	movhi	r2,1
    53b8:	10951504 	addi	r2,r2,21588
}
    53bc:	e037883a 	mov	sp,fp
    53c0:	dfc00117 	ldw	ra,4(sp)
    53c4:	df000017 	ldw	fp,0(sp)
    53c8:	dec00204 	addi	sp,sp,8
    53cc:	f800283a 	ret

000053d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    53d0:	defff904 	addi	sp,sp,-28
    53d4:	dfc00615 	stw	ra,24(sp)
    53d8:	df000515 	stw	fp,20(sp)
    53dc:	df000504 	addi	fp,sp,20
    53e0:	e13ffd15 	stw	r4,-12(fp)
    53e4:	e17ffe15 	stw	r5,-8(fp)
    53e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    53ec:	e0bffd17 	ldw	r2,-12(fp)
    53f0:	10000616 	blt	r2,zero,540c <write+0x3c>
    53f4:	e0bffd17 	ldw	r2,-12(fp)
    53f8:	10c00324 	muli	r3,r2,12
    53fc:	00800074 	movhi	r2,1
    5400:	1087b004 	addi	r2,r2,7872
    5404:	1885883a 	add	r2,r3,r2
    5408:	00000106 	br	5410 <write+0x40>
    540c:	0005883a 	mov	r2,zero
    5410:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5414:	e0bffb17 	ldw	r2,-20(fp)
    5418:	10002126 	beq	r2,zero,54a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    541c:	e0bffb17 	ldw	r2,-20(fp)
    5420:	10800217 	ldw	r2,8(r2)
    5424:	108000cc 	andi	r2,r2,3
    5428:	10001826 	beq	r2,zero,548c <write+0xbc>
    542c:	e0bffb17 	ldw	r2,-20(fp)
    5430:	10800017 	ldw	r2,0(r2)
    5434:	10800617 	ldw	r2,24(r2)
    5438:	10001426 	beq	r2,zero,548c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    543c:	e0bffb17 	ldw	r2,-20(fp)
    5440:	10800017 	ldw	r2,0(r2)
    5444:	10800617 	ldw	r2,24(r2)
    5448:	e0ffff17 	ldw	r3,-4(fp)
    544c:	e13ffb17 	ldw	r4,-20(fp)
    5450:	e17ffe17 	ldw	r5,-8(fp)
    5454:	180d883a 	mov	r6,r3
    5458:	103ee83a 	callr	r2
    545c:	e0bffc15 	stw	r2,-16(fp)
    5460:	e0bffc17 	ldw	r2,-16(fp)
    5464:	1000070e 	bge	r2,zero,5484 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    5468:	00053800 	call	5380 <alt_get_errno>
    546c:	1007883a 	mov	r3,r2
    5470:	e0bffc17 	ldw	r2,-16(fp)
    5474:	0085c83a 	sub	r2,zero,r2
    5478:	18800015 	stw	r2,0(r3)
        return -1;
    547c:	00bfffc4 	movi	r2,-1
    5480:	00000c06 	br	54b4 <write+0xe4>
      }
      return rval;
    5484:	e0bffc17 	ldw	r2,-16(fp)
    5488:	00000a06 	br	54b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    548c:	00053800 	call	5380 <alt_get_errno>
    5490:	1007883a 	mov	r3,r2
    5494:	00800344 	movi	r2,13
    5498:	18800015 	stw	r2,0(r3)
    549c:	00000406 	br	54b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    54a0:	00053800 	call	5380 <alt_get_errno>
    54a4:	1007883a 	mov	r3,r2
    54a8:	00801444 	movi	r2,81
    54ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
    54b0:	00bfffc4 	movi	r2,-1
}
    54b4:	e037883a 	mov	sp,fp
    54b8:	dfc00117 	ldw	ra,4(sp)
    54bc:	df000017 	ldw	fp,0(sp)
    54c0:	dec00204 	addi	sp,sp,8
    54c4:	f800283a 	ret

000054c8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    54c8:	deffdf04 	addi	sp,sp,-132
    54cc:	dfc02015 	stw	ra,128(sp)
    54d0:	df001f15 	stw	fp,124(sp)
    54d4:	df001f04 	addi	fp,sp,124
    54d8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    54dc:	e0bfe204 	addi	r2,fp,-120
    54e0:	01003fc4 	movi	r4,255
    54e4:	100b883a 	mov	r5,r2
    54e8:	000cd640 	call	cd64 <OSTaskQuery>
    54ec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    54f0:	e0bffe83 	ldbu	r2,-6(fp)
    54f4:	10803fcc 	andi	r2,r2,255
    54f8:	10000126 	beq	r2,zero,5500 <__env_lock+0x38>
    return;
    54fc:	00001d06 	br	5574 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    5500:	e0bfee83 	ldbu	r2,-70(fp)
    5504:	10803fcc 	andi	r2,r2,255
    5508:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    550c:	d0e80f17 	ldw	r3,-24516(gp)
    5510:	e0bffd04 	addi	r2,fp,-12
    5514:	1809883a 	mov	r4,r3
    5518:	100b883a 	mov	r5,r2
    551c:	000b3fc0 	call	b3fc <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    5520:	e0bffe43 	ldbu	r2,-7(fp)
    5524:	10803fcc 	andi	r2,r2,255
    5528:	10000726 	beq	r2,zero,5548 <__env_lock+0x80>
    552c:	d0a01b17 	ldw	r2,-32660(gp)
    5530:	e0ffe117 	ldw	r3,-124(fp)
    5534:	1880041e 	bne	r3,r2,5548 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    5538:	d0a80e17 	ldw	r2,-24520(gp)
    553c:	10800044 	addi	r2,r2,1
    5540:	d0a80e15 	stw	r2,-24520(gp)
    5544:	00000a06 	br	5570 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    5548:	d0e80f17 	ldw	r3,-24516(gp)
    554c:	e0bffe84 	addi	r2,fp,-6
    5550:	1809883a 	mov	r4,r3
    5554:	000b883a 	mov	r5,zero
    5558:	100d883a 	mov	r6,r2
    555c:	000af180 	call	af18 <OSSemPend>
    locks  = 1;
    5560:	00800044 	movi	r2,1
    5564:	d0a80e15 	stw	r2,-24520(gp)
    lockid = id;
    5568:	e0bfe117 	ldw	r2,-124(fp)
    556c:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    5570:	0001883a 	nop
}
    5574:	e037883a 	mov	sp,fp
    5578:	dfc00117 	ldw	ra,4(sp)
    557c:	df000017 	ldw	fp,0(sp)
    5580:	dec00204 	addi	sp,sp,8
    5584:	f800283a 	ret

00005588 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    5588:	defffd04 	addi	sp,sp,-12
    558c:	dfc00215 	stw	ra,8(sp)
    5590:	df000115 	stw	fp,4(sp)
    5594:	df000104 	addi	fp,sp,4
    5598:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    559c:	d0a80e17 	ldw	r2,-24520(gp)
    55a0:	1000011e 	bne	r2,zero,55a8 <__env_unlock+0x20>
    return;
    55a4:	00000a06 	br	55d0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    55a8:	d0a80e17 	ldw	r2,-24520(gp)
    55ac:	10bfffc4 	addi	r2,r2,-1
    55b0:	d0a80e15 	stw	r2,-24520(gp)
    55b4:	d0a80e17 	ldw	r2,-24520(gp)
    55b8:	1000051e 	bne	r2,zero,55d0 <__env_unlock+0x48>
  {
    lockid = -1;
    55bc:	00bfffc4 	movi	r2,-1
    55c0:	d0a01b15 	stw	r2,-32660(gp)
    OSSemPost( alt_envsem );
    55c4:	d0a80f17 	ldw	r2,-24516(gp)
    55c8:	1009883a 	mov	r4,r2
    55cc:	000b2ec0 	call	b2ec <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    55d0:	e037883a 	mov	sp,fp
    55d4:	dfc00117 	ldw	ra,4(sp)
    55d8:	df000017 	ldw	fp,0(sp)
    55dc:	dec00204 	addi	sp,sp,8
    55e0:	f800283a 	ret

000055e4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    55e4:	deffdb04 	addi	sp,sp,-148
    55e8:	dfc02415 	stw	ra,144(sp)
    55ec:	df002315 	stw	fp,140(sp)
    55f0:	df002304 	addi	fp,sp,140
    55f4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55f8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    55fc:	00800074 	movhi	r2,1
    5600:	10951e44 	addi	r2,r2,21625
    5604:	10800003 	ldbu	r2,0(r2)
    5608:	10803fcc 	andi	r2,r2,255
    560c:	10800060 	cmpeqi	r2,r2,1
    5610:	1000011e 	bne	r2,zero,5618 <__malloc_lock+0x34>
      return;
    5614:	00003606 	br	56f0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    5618:	e0bfe204 	addi	r2,fp,-120
    561c:	01003fc4 	movi	r4,255
    5620:	100b883a 	mov	r5,r2
    5624:	000cd640 	call	cd64 <OSTaskQuery>
    5628:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    562c:	e0bffe83 	ldbu	r2,-6(fp)
    5630:	10803fcc 	andi	r2,r2,255
    5634:	10000126 	beq	r2,zero,563c <__malloc_lock+0x58>
    return;
    5638:	00002d06 	br	56f0 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    563c:	e0bfee83 	ldbu	r2,-70(fp)
    5640:	10803fcc 	andi	r2,r2,255
    5644:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    5648:	d0e81117 	ldw	r3,-24508(gp)
    564c:	e0bffd04 	addi	r2,fp,-12
    5650:	1809883a 	mov	r4,r3
    5654:	100b883a 	mov	r5,r2
    5658:	000b3fc0 	call	b3fc <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    565c:	0005303a 	rdctl	r2,status
    5660:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5664:	e0ffdf17 	ldw	r3,-132(fp)
    5668:	00bfff84 	movi	r2,-2
    566c:	1884703a 	and	r2,r3,r2
    5670:	1001703a 	wrctl	status,r2
  
  return context;
    5674:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    5678:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    567c:	e0bffd0b 	ldhu	r2,-12(fp)
    5680:	10bfffcc 	andi	r2,r2,65535
    5684:	10000b1e 	bne	r2,zero,56b4 <__malloc_lock+0xd0>
    5688:	d0a01c17 	ldw	r2,-32656(gp)
    568c:	e0ffde17 	ldw	r3,-136(fp)
    5690:	1880081e 	bne	r3,r2,56b4 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    5694:	d0a81017 	ldw	r2,-24512(gp)
    5698:	10800044 	addi	r2,r2,1
    569c:	d0a81015 	stw	r2,-24512(gp)
    56a0:	e0bfdd17 	ldw	r2,-140(fp)
    56a4:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56a8:	e0bfe017 	ldw	r2,-128(fp)
    56ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    56b0:	00000e06 	br	56ec <__malloc_lock+0x108>
    56b4:	e0bfdd17 	ldw	r2,-140(fp)
    56b8:	e0bfe115 	stw	r2,-124(fp)
    56bc:	e0bfe117 	ldw	r2,-124(fp)
    56c0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    56c4:	d0e81117 	ldw	r3,-24508(gp)
    56c8:	e0bffe84 	addi	r2,fp,-6
    56cc:	1809883a 	mov	r4,r3
    56d0:	000b883a 	mov	r5,zero
    56d4:	100d883a 	mov	r6,r2
    56d8:	000af180 	call	af18 <OSSemPend>
    locks  = 1;
    56dc:	00800044 	movi	r2,1
    56e0:	d0a81015 	stw	r2,-24512(gp)
    lockid = id;
    56e4:	e0bfde17 	ldw	r2,-136(fp)
    56e8:	d0a01c15 	stw	r2,-32656(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    56ec:	0001883a 	nop
}
    56f0:	e037883a 	mov	sp,fp
    56f4:	dfc00117 	ldw	ra,4(sp)
    56f8:	df000017 	ldw	fp,0(sp)
    56fc:	dec00204 	addi	sp,sp,8
    5700:	f800283a 	ret

00005704 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    5704:	defff804 	addi	sp,sp,-32
    5708:	dfc00715 	stw	ra,28(sp)
    570c:	df000615 	stw	fp,24(sp)
    5710:	df000604 	addi	fp,sp,24
    5714:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5718:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    571c:	00800074 	movhi	r2,1
    5720:	10951e44 	addi	r2,r2,21625
    5724:	10800003 	ldbu	r2,0(r2)
    5728:	10803fcc 	andi	r2,r2,255
    572c:	10800060 	cmpeqi	r2,r2,1
    5730:	1000011e 	bne	r2,zero,5738 <__malloc_unlock+0x34>
      return;
    5734:	00002206 	br	57c0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5738:	0005303a 	rdctl	r2,status
    573c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5740:	e0fffb17 	ldw	r3,-20(fp)
    5744:	00bfff84 	movi	r2,-2
    5748:	1884703a 	and	r2,r3,r2
    574c:	1001703a 	wrctl	status,r2
  
  return context;
    5750:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    5754:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    5758:	d0a81017 	ldw	r2,-24512(gp)
    575c:	1000051e 	bne	r2,zero,5774 <__malloc_unlock+0x70>
    5760:	e0bffa17 	ldw	r2,-24(fp)
    5764:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5768:	e0bffc17 	ldw	r2,-16(fp)
    576c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    5770:	00001306 	br	57c0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    5774:	d0a81017 	ldw	r2,-24512(gp)
    5778:	10bfffc4 	addi	r2,r2,-1
    577c:	d0a81015 	stw	r2,-24512(gp)
    5780:	d0a81017 	ldw	r2,-24512(gp)
    5784:	10000a1e 	bne	r2,zero,57b0 <__malloc_unlock+0xac>
  {
    lockid = -1;
    5788:	00bfffc4 	movi	r2,-1
    578c:	d0a01c15 	stw	r2,-32656(gp)
    5790:	e0bffa17 	ldw	r2,-24(fp)
    5794:	e0bffd15 	stw	r2,-12(fp)
    5798:	e0bffd17 	ldw	r2,-12(fp)
    579c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    57a0:	d0a81117 	ldw	r2,-24508(gp)
    57a4:	1009883a 	mov	r4,r2
    57a8:	000b2ec0 	call	b2ec <OSSemPost>
    57ac:	00000406 	br	57c0 <__malloc_unlock+0xbc>
    57b0:	e0bffa17 	ldw	r2,-24(fp)
    57b4:	e0bffe15 	stw	r2,-8(fp)
    57b8:	e0bffe17 	ldw	r2,-8(fp)
    57bc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    57c0:	e037883a 	mov	sp,fp
    57c4:	dfc00117 	ldw	ra,4(sp)
    57c8:	df000017 	ldw	fp,0(sp)
    57cc:	dec00204 	addi	sp,sp,8
    57d0:	f800283a 	ret

000057d4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    57d4:	defff704 	addi	sp,sp,-36
    57d8:	dfc00815 	stw	ra,32(sp)
    57dc:	df000715 	stw	fp,28(sp)
    57e0:	df000704 	addi	fp,sp,28
    57e4:	e13ffd15 	stw	r4,-12(fp)
    57e8:	e17ffe15 	stw	r5,-8(fp)
    57ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    57f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    57f4:	e0bfff17 	ldw	r2,-4(fp)
    57f8:	1000021e 	bne	r2,zero,5804 <OSEventNameGet+0x30>
        return (0);
    57fc:	0005883a 	mov	r2,zero
    5800:	00003706 	br	58e0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    5804:	e0bffd17 	ldw	r2,-12(fp)
    5808:	1000051e 	bne	r2,zero,5820 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    580c:	e0bfff17 	ldw	r2,-4(fp)
    5810:	00c00104 	movi	r3,4
    5814:	10c00005 	stb	r3,0(r2)
        return (0);
    5818:	0005883a 	mov	r2,zero
    581c:	00003006 	br	58e0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5820:	e0bffe17 	ldw	r2,-8(fp)
    5824:	1000051e 	bne	r2,zero,583c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    5828:	e0bfff17 	ldw	r2,-4(fp)
    582c:	00c00304 	movi	r3,12
    5830:	10c00005 	stb	r3,0(r2)
        return (0);
    5834:	0005883a 	mov	r2,zero
    5838:	00002906 	br	58e0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    583c:	d0a82003 	ldbu	r2,-24448(gp)
    5840:	10803fcc 	andi	r2,r2,255
    5844:	10000526 	beq	r2,zero,585c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    5848:	e0bfff17 	ldw	r2,-4(fp)
    584c:	00c00444 	movi	r3,17
    5850:	10c00005 	stb	r3,0(r2)
        return (0);
    5854:	0005883a 	mov	r2,zero
    5858:	00002106 	br	58e0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    585c:	e0bffd17 	ldw	r2,-12(fp)
    5860:	10800003 	ldbu	r2,0(r2)
    5864:	10803fcc 	andi	r2,r2,255
    5868:	10bfffc4 	addi	r2,r2,-1
    586c:	10800128 	cmpgeui	r2,r2,4
    5870:	10000526 	beq	r2,zero,5888 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    5874:	e0bfff17 	ldw	r2,-4(fp)
    5878:	00c00044 	movi	r3,1
    587c:	10c00005 	stb	r3,0(r2)
             return (0);
    5880:	0005883a 	mov	r2,zero
    5884:	00001606 	br	58e0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    5888:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    588c:	0005303a 	rdctl	r2,status
    5890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5894:	e0fffb17 	ldw	r3,-20(fp)
    5898:	00bfff84 	movi	r2,-2
    589c:	1884703a 	and	r2,r3,r2
    58a0:	1001703a 	wrctl	status,r2
  
  return context;
    58a4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    58a8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    58ac:	e0bffd17 	ldw	r2,-12(fp)
    58b0:	10800384 	addi	r2,r2,14
    58b4:	e13ffe17 	ldw	r4,-8(fp)
    58b8:	100b883a 	mov	r5,r2
    58bc:	00072280 	call	7228 <OS_StrCopy>
    58c0:	e0bffa05 	stb	r2,-24(fp)
    58c4:	e0bff917 	ldw	r2,-28(fp)
    58c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    58cc:	e0bffc17 	ldw	r2,-16(fp)
    58d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    58d4:	e0bfff17 	ldw	r2,-4(fp)
    58d8:	10000005 	stb	zero,0(r2)
    return (len);
    58dc:	e0bffa03 	ldbu	r2,-24(fp)
}
    58e0:	e037883a 	mov	sp,fp
    58e4:	dfc00117 	ldw	ra,4(sp)
    58e8:	df000017 	ldw	fp,0(sp)
    58ec:	dec00204 	addi	sp,sp,8
    58f0:	f800283a 	ret

000058f4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    58f4:	defff604 	addi	sp,sp,-40
    58f8:	dfc00915 	stw	ra,36(sp)
    58fc:	df000815 	stw	fp,32(sp)
    5900:	df000804 	addi	fp,sp,32
    5904:	e13ffd15 	stw	r4,-12(fp)
    5908:	e17ffe15 	stw	r5,-8(fp)
    590c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5910:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5914:	e0bfff17 	ldw	r2,-4(fp)
    5918:	1000011e 	bne	r2,zero,5920 <OSEventNameSet+0x2c>
        return;
    591c:	00003f06 	br	5a1c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    5920:	e0bffd17 	ldw	r2,-12(fp)
    5924:	1000041e 	bne	r2,zero,5938 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    5928:	e0bfff17 	ldw	r2,-4(fp)
    592c:	00c00104 	movi	r3,4
    5930:	10c00005 	stb	r3,0(r2)
        return;
    5934:	00003906 	br	5a1c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5938:	e0bffe17 	ldw	r2,-8(fp)
    593c:	1000041e 	bne	r2,zero,5950 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    5940:	e0bfff17 	ldw	r2,-4(fp)
    5944:	00c00304 	movi	r3,12
    5948:	10c00005 	stb	r3,0(r2)
        return;
    594c:	00003306 	br	5a1c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5950:	d0a82003 	ldbu	r2,-24448(gp)
    5954:	10803fcc 	andi	r2,r2,255
    5958:	10000426 	beq	r2,zero,596c <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    595c:	e0bfff17 	ldw	r2,-4(fp)
    5960:	00c00484 	movi	r3,18
    5964:	10c00005 	stb	r3,0(r2)
        return;
    5968:	00002c06 	br	5a1c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    596c:	e0bffd17 	ldw	r2,-12(fp)
    5970:	10800003 	ldbu	r2,0(r2)
    5974:	10803fcc 	andi	r2,r2,255
    5978:	10bfffc4 	addi	r2,r2,-1
    597c:	10800128 	cmpgeui	r2,r2,4
    5980:	10000426 	beq	r2,zero,5994 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    5984:	e0bfff17 	ldw	r2,-4(fp)
    5988:	00c00044 	movi	r3,1
    598c:	10c00005 	stb	r3,0(r2)
             return;
    5990:	00002206 	br	5a1c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    5994:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5998:	0005303a 	rdctl	r2,status
    599c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    59a0:	e0fffa17 	ldw	r3,-24(fp)
    59a4:	00bfff84 	movi	r2,-2
    59a8:	1884703a 	and	r2,r3,r2
    59ac:	1001703a 	wrctl	status,r2
  
  return context;
    59b0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    59b4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    59b8:	e13ffe17 	ldw	r4,-8(fp)
    59bc:	000729c0 	call	729c <OS_StrLen>
    59c0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    59c4:	e0bff903 	ldbu	r2,-28(fp)
    59c8:	10800830 	cmpltui	r2,r2,32
    59cc:	1000081e 	bne	r2,zero,59f0 <OSEventNameSet+0xfc>
    59d0:	e0bff817 	ldw	r2,-32(fp)
    59d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59d8:	e0bffb17 	ldw	r2,-20(fp)
    59dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    59e0:	e0bfff17 	ldw	r2,-4(fp)
    59e4:	00c002c4 	movi	r3,11
    59e8:	10c00005 	stb	r3,0(r2)
        return;
    59ec:	00000b06 	br	5a1c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    59f0:	e0bffd17 	ldw	r2,-12(fp)
    59f4:	10800384 	addi	r2,r2,14
    59f8:	1009883a 	mov	r4,r2
    59fc:	e17ffe17 	ldw	r5,-8(fp)
    5a00:	00072280 	call	7228 <OS_StrCopy>
    5a04:	e0bff817 	ldw	r2,-32(fp)
    5a08:	e0bffc15 	stw	r2,-16(fp)
    5a0c:	e0bffc17 	ldw	r2,-16(fp)
    5a10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5a14:	e0bfff17 	ldw	r2,-4(fp)
    5a18:	10000005 	stb	zero,0(r2)
}
    5a1c:	e037883a 	mov	sp,fp
    5a20:	dfc00117 	ldw	ra,4(sp)
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00204 	addi	sp,sp,8
    5a2c:	f800283a 	ret

00005a30 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    5a30:	deffed04 	addi	sp,sp,-76
    5a34:	dfc01215 	stw	ra,72(sp)
    5a38:	df001115 	stw	fp,68(sp)
    5a3c:	df001104 	addi	fp,sp,68
    5a40:	e13ffc15 	stw	r4,-16(fp)
    5a44:	e17ffd15 	stw	r5,-12(fp)
    5a48:	e1bffe15 	stw	r6,-8(fp)
    5a4c:	3805883a 	mov	r2,r7
    5a50:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    5a54:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    5a58:	e0800217 	ldw	r2,8(fp)
    5a5c:	1000021e 	bne	r2,zero,5a68 <OSEventPendMulti+0x38>
        return (0);
    5a60:	0005883a 	mov	r2,zero
    5a64:	00017106 	br	602c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    5a68:	e0bffc17 	ldw	r2,-16(fp)
    5a6c:	1000051e 	bne	r2,zero,5a84 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    5a70:	e0800217 	ldw	r2,8(fp)
    5a74:	00c00104 	movi	r3,4
    5a78:	10c00005 	stb	r3,0(r2)
        return (0);
    5a7c:	0005883a 	mov	r2,zero
    5a80:	00016a06 	br	602c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    5a84:	e0bffd17 	ldw	r2,-12(fp)
    5a88:	1000051e 	bne	r2,zero,5aa0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    5a8c:	e0800217 	ldw	r2,8(fp)
    5a90:	00c00104 	movi	r3,4
    5a94:	10c00005 	stb	r3,0(r2)
        return (0);
    5a98:	0005883a 	mov	r2,zero
    5a9c:	00016306 	br	602c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    5aa0:	e0bffe17 	ldw	r2,-8(fp)
    5aa4:	1000051e 	bne	r2,zero,5abc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    5aa8:	e0800217 	ldw	r2,8(fp)
    5aac:	00c00104 	movi	r3,4
    5ab0:	10c00005 	stb	r3,0(r2)
        return (0);
    5ab4:	0005883a 	mov	r2,zero
    5ab8:	00015c06 	br	602c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    5abc:	e0bffd17 	ldw	r2,-12(fp)
    5ac0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    5ac4:	e0bffc17 	ldw	r2,-16(fp)
    5ac8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    5acc:	e0bfef17 	ldw	r2,-68(fp)
    5ad0:	10800017 	ldw	r2,0(r2)
    5ad4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    5ad8:	00001906 	br	5b40 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    5adc:	e0bff017 	ldw	r2,-64(fp)
    5ae0:	10800003 	ldbu	r2,0(r2)
    5ae4:	10803fcc 	andi	r2,r2,255
    5ae8:	10c000a0 	cmpeqi	r3,r2,2
    5aec:	1800091e 	bne	r3,zero,5b14 <OSEventPendMulti+0xe4>
    5af0:	10c000e0 	cmpeqi	r3,r2,3
    5af4:	1800091e 	bne	r3,zero,5b1c <OSEventPendMulti+0xec>
    5af8:	10800060 	cmpeqi	r2,r2,1
    5afc:	1000091e 	bne	r2,zero,5b24 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    5b00:	e0800217 	ldw	r2,8(fp)
    5b04:	00c00044 	movi	r3,1
    5b08:	10c00005 	stb	r3,0(r2)
                 return (0);
    5b0c:	0005883a 	mov	r2,zero
    5b10:	00014606 	br	602c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    5b14:	0001883a 	nop
    5b18:	00000306 	br	5b28 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    5b1c:	0001883a 	nop
    5b20:	00000106 	br	5b28 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    5b24:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    5b28:	e0bfef17 	ldw	r2,-68(fp)
    5b2c:	10800104 	addi	r2,r2,4
    5b30:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    5b34:	e0bfef17 	ldw	r2,-68(fp)
    5b38:	10800017 	ldw	r2,0(r2)
    5b3c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    5b40:	e0bff017 	ldw	r2,-64(fp)
    5b44:	103fe51e 	bne	r2,zero,5adc <__alt_mem_Flash_flash_data+0xf4005adc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    5b48:	d0a82003 	ldbu	r2,-24448(gp)
    5b4c:	10803fcc 	andi	r2,r2,255
    5b50:	10000526 	beq	r2,zero,5b68 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    5b54:	e0800217 	ldw	r2,8(fp)
    5b58:	00c00084 	movi	r3,2
    5b5c:	10c00005 	stb	r3,0(r2)
        return (0);
    5b60:	0005883a 	mov	r2,zero
    5b64:	00013106 	br	602c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    5b68:	d0a81203 	ldbu	r2,-24504(gp)
    5b6c:	10803fcc 	andi	r2,r2,255
    5b70:	10000526 	beq	r2,zero,5b88 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    5b74:	e0800217 	ldw	r2,8(fp)
    5b78:	00c00344 	movi	r3,13
    5b7c:	10c00005 	stb	r3,0(r2)
        return (0);
    5b80:	0005883a 	mov	r2,zero
    5b84:	00012906 	br	602c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b88:	0005303a 	rdctl	r2,status
    5b8c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b90:	e0fff517 	ldw	r3,-44(fp)
    5b94:	00bfff84 	movi	r2,-2
    5b98:	1884703a 	and	r2,r3,r2
    5b9c:	1001703a 	wrctl	status,r2
  
  return context;
    5ba0:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    5ba4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    5ba8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    5bac:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    5bb0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    5bb4:	e0bffc17 	ldw	r2,-16(fp)
    5bb8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    5bbc:	e0bfef17 	ldw	r2,-68(fp)
    5bc0:	10800017 	ldw	r2,0(r2)
    5bc4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    5bc8:	00008106 	br	5dd0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    5bcc:	e0bff017 	ldw	r2,-64(fp)
    5bd0:	10800003 	ldbu	r2,0(r2)
    5bd4:	10803fcc 	andi	r2,r2,255
    5bd8:	10c000a0 	cmpeqi	r3,r2,2
    5bdc:	18003c1e 	bne	r3,zero,5cd0 <OSEventPendMulti+0x2a0>
    5be0:	10c000e0 	cmpeqi	r3,r2,3
    5be4:	1800031e 	bne	r3,zero,5bf4 <OSEventPendMulti+0x1c4>
    5be8:	10800060 	cmpeqi	r2,r2,1
    5bec:	10001e1e 	bne	r2,zero,5c68 <OSEventPendMulti+0x238>
    5bf0:	00006606 	br	5d8c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    5bf4:	e0bff017 	ldw	r2,-64(fp)
    5bf8:	1080020b 	ldhu	r2,8(r2)
    5bfc:	10bfffcc 	andi	r2,r2,65535
    5c00:	10001526 	beq	r2,zero,5c58 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    5c04:	e0bff017 	ldw	r2,-64(fp)
    5c08:	1080020b 	ldhu	r2,8(r2)
    5c0c:	10bfffc4 	addi	r2,r2,-1
    5c10:	1007883a 	mov	r3,r2
    5c14:	e0bff017 	ldw	r2,-64(fp)
    5c18:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    5c1c:	e0bffd17 	ldw	r2,-12(fp)
    5c20:	10c00104 	addi	r3,r2,4
    5c24:	e0fffd15 	stw	r3,-12(fp)
    5c28:	e0fff017 	ldw	r3,-64(fp)
    5c2c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    5c30:	00800044 	movi	r2,1
    5c34:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    5c38:	e0bffe17 	ldw	r2,-8(fp)
    5c3c:	10c00104 	addi	r3,r2,4
    5c40:	e0fffe15 	stw	r3,-8(fp)
    5c44:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    5c48:	e0bff18b 	ldhu	r2,-58(fp)
    5c4c:	10800044 	addi	r2,r2,1
    5c50:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    5c54:	00005806 	br	5db8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    5c58:	e0bff203 	ldbu	r2,-56(fp)
    5c5c:	10800054 	ori	r2,r2,1
    5c60:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5c64:	00005406 	br	5db8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    5c68:	e0bff017 	ldw	r2,-64(fp)
    5c6c:	10800117 	ldw	r2,4(r2)
    5c70:	10001326 	beq	r2,zero,5cc0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	10c00104 	addi	r3,r2,4
    5c7c:	e0fffe15 	stw	r3,-8(fp)
    5c80:	e0fff017 	ldw	r3,-64(fp)
    5c84:	18c00117 	ldw	r3,4(r3)
    5c88:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    5c8c:	e0bff017 	ldw	r2,-64(fp)
    5c90:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    5c94:	e0bffd17 	ldw	r2,-12(fp)
    5c98:	10c00104 	addi	r3,r2,4
    5c9c:	e0fffd15 	stw	r3,-12(fp)
    5ca0:	e0fff017 	ldw	r3,-64(fp)
    5ca4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    5ca8:	00800044 	movi	r2,1
    5cac:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    5cb0:	e0bff18b 	ldhu	r2,-58(fp)
    5cb4:	10800044 	addi	r2,r2,1
    5cb8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    5cbc:	00003e06 	br	5db8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    5cc0:	e0bff203 	ldbu	r2,-56(fp)
    5cc4:	10800094 	ori	r2,r2,2
    5cc8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5ccc:	00003a06 	br	5db8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    5cd0:	e0bff017 	ldw	r2,-64(fp)
    5cd4:	10800117 	ldw	r2,4(r2)
    5cd8:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    5cdc:	e0bff417 	ldw	r2,-48(fp)
    5ce0:	1080058b 	ldhu	r2,22(r2)
    5ce4:	10bfffcc 	andi	r2,r2,65535
    5ce8:	10002426 	beq	r2,zero,5d7c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    5cec:	e0bffe17 	ldw	r2,-8(fp)
    5cf0:	10c00104 	addi	r3,r2,4
    5cf4:	e0fffe15 	stw	r3,-8(fp)
    5cf8:	e0fff417 	ldw	r3,-48(fp)
    5cfc:	18c00417 	ldw	r3,16(r3)
    5d00:	19400104 	addi	r5,r3,4
    5d04:	e13ff417 	ldw	r4,-48(fp)
    5d08:	21400415 	stw	r5,16(r4)
    5d0c:	18c00017 	ldw	r3,0(r3)
    5d10:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    5d14:	e0bff417 	ldw	r2,-48(fp)
    5d18:	10c00417 	ldw	r3,16(r2)
    5d1c:	e0bff417 	ldw	r2,-48(fp)
    5d20:	10800217 	ldw	r2,8(r2)
    5d24:	1880041e 	bne	r3,r2,5d38 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    5d28:	e0bff417 	ldw	r2,-48(fp)
    5d2c:	10c00117 	ldw	r3,4(r2)
    5d30:	e0bff417 	ldw	r2,-48(fp)
    5d34:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    5d38:	e0bff417 	ldw	r2,-48(fp)
    5d3c:	1080058b 	ldhu	r2,22(r2)
    5d40:	10bfffc4 	addi	r2,r2,-1
    5d44:	1007883a 	mov	r3,r2
    5d48:	e0bff417 	ldw	r2,-48(fp)
    5d4c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    5d50:	e0bffd17 	ldw	r2,-12(fp)
    5d54:	10c00104 	addi	r3,r2,4
    5d58:	e0fffd15 	stw	r3,-12(fp)
    5d5c:	e0fff017 	ldw	r3,-64(fp)
    5d60:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    5d64:	00800044 	movi	r2,1
    5d68:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    5d6c:	e0bff18b 	ldhu	r2,-58(fp)
    5d70:	10800044 	addi	r2,r2,1
    5d74:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    5d78:	00000f06 	br	5db8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    5d7c:	e0bff203 	ldbu	r2,-56(fp)
    5d80:	10800114 	ori	r2,r2,4
    5d84:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5d88:	00000b06 	br	5db8 <OSEventPendMulti+0x388>
    5d8c:	e0bff317 	ldw	r2,-52(fp)
    5d90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d94:	e0bff617 	ldw	r2,-40(fp)
    5d98:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    5d9c:	e0bffd17 	ldw	r2,-12(fp)
    5da0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    5da4:	e0800217 	ldw	r2,8(fp)
    5da8:	00c00044 	movi	r3,1
    5dac:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    5db0:	e0bff18b 	ldhu	r2,-58(fp)
    5db4:	00009d06 	br	602c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    5db8:	e0bfef17 	ldw	r2,-68(fp)
    5dbc:	10800104 	addi	r2,r2,4
    5dc0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    5dc4:	e0bfef17 	ldw	r2,-68(fp)
    5dc8:	10800017 	ldw	r2,0(r2)
    5dcc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    5dd0:	e0bff017 	ldw	r2,-64(fp)
    5dd4:	103f7d1e 	bne	r2,zero,5bcc <__alt_mem_Flash_flash_data+0xf4005bcc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    5dd8:	e0bff103 	ldbu	r2,-60(fp)
    5ddc:	10800058 	cmpnei	r2,r2,1
    5de0:	10000a1e 	bne	r2,zero,5e0c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    5de4:	e0bffd17 	ldw	r2,-12(fp)
    5de8:	10000015 	stw	zero,0(r2)
    5dec:	e0bff317 	ldw	r2,-52(fp)
    5df0:	e0bff715 	stw	r2,-36(fp)
    5df4:	e0bff717 	ldw	r2,-36(fp)
    5df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    5dfc:	e0800217 	ldw	r2,8(fp)
    5e00:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    5e04:	e0bff18b 	ldhu	r2,-58(fp)
    5e08:	00008806 	br	602c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    5e0c:	d0a82117 	ldw	r2,-24444(gp)
    5e10:	d0e82117 	ldw	r3,-24444(gp)
    5e14:	19000c03 	ldbu	r4,48(r3)
    5e18:	e0fff203 	ldbu	r3,-56(fp)
    5e1c:	20c6b03a 	or	r3,r4,r3
    5e20:	1809883a 	mov	r4,r3
    5e24:	00ffe004 	movi	r3,-128
    5e28:	20c6b03a 	or	r3,r4,r3
    5e2c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5e30:	d0a82117 	ldw	r2,-24444(gp)
    5e34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    5e38:	d0a82117 	ldw	r2,-24444(gp)
    5e3c:	e0ffff0b 	ldhu	r3,-4(fp)
    5e40:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    5e44:	e13ffc17 	ldw	r4,-16(fp)
    5e48:	00069780 	call	6978 <OS_EventTaskWaitMulti>
    5e4c:	e0bff317 	ldw	r2,-52(fp)
    5e50:	e0bff815 	stw	r2,-32(fp)
    5e54:	e0bff817 	ldw	r2,-32(fp)
    5e58:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    5e5c:	00070ec0 	call	70ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e60:	0005303a 	rdctl	r2,status
    5e64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e68:	e0fff917 	ldw	r3,-28(fp)
    5e6c:	00bfff84 	movi	r2,-2
    5e70:	1884703a 	and	r2,r3,r2
    5e74:	1001703a 	wrctl	status,r2
  
  return context;
    5e78:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    5e7c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    5e80:	d0a82117 	ldw	r2,-24444(gp)
    5e84:	10800c43 	ldbu	r2,49(r2)
    5e88:	10803fcc 	andi	r2,r2,255
    5e8c:	10000226 	beq	r2,zero,5e98 <OSEventPendMulti+0x468>
    5e90:	108000a0 	cmpeqi	r2,r2,2
    5e94:	10001826 	beq	r2,zero,5ef8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    5e98:	d0a82117 	ldw	r2,-24444(gp)
    5e9c:	10800717 	ldw	r2,28(r2)
    5ea0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    5ea4:	e0bff017 	ldw	r2,-64(fp)
    5ea8:	10000b26 	beq	r2,zero,5ed8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    5eac:	e0bffd17 	ldw	r2,-12(fp)
    5eb0:	10c00104 	addi	r3,r2,4
    5eb4:	e0fffd15 	stw	r3,-12(fp)
    5eb8:	e0fff017 	ldw	r3,-64(fp)
    5ebc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    5ec0:	e0bffd17 	ldw	r2,-12(fp)
    5ec4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    5ec8:	e0bff18b 	ldhu	r2,-58(fp)
    5ecc:	10800044 	addi	r2,r2,1
    5ed0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    5ed4:	00000d06 	br	5f0c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    5ed8:	d0a82117 	ldw	r2,-24444(gp)
    5edc:	00c00044 	movi	r3,1
    5ee0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5ee4:	d0a82117 	ldw	r2,-24444(gp)
    5ee8:	1009883a 	mov	r4,r2
    5eec:	e17ffc17 	ldw	r5,-16(fp)
    5ef0:	0006b780 	call	6b78 <OS_EventTaskRemoveMulti>
             }
			 break;
    5ef4:	00000506 	br	5f0c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5ef8:	d0a82117 	ldw	r2,-24444(gp)
    5efc:	1009883a 	mov	r4,r2
    5f00:	e17ffc17 	ldw	r5,-16(fp)
    5f04:	0006b780 	call	6b78 <OS_EventTaskRemoveMulti>
             break;
    5f08:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    5f0c:	d0a82117 	ldw	r2,-24444(gp)
    5f10:	10800c43 	ldbu	r2,49(r2)
    5f14:	10803fcc 	andi	r2,r2,255
    5f18:	10000326 	beq	r2,zero,5f28 <OSEventPendMulti+0x4f8>
    5f1c:	108000a0 	cmpeqi	r2,r2,2
    5f20:	1000231e 	bne	r2,zero,5fb0 <OSEventPendMulti+0x580>
    5f24:	00002a06 	br	5fd0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    5f28:	e0bff017 	ldw	r2,-64(fp)
    5f2c:	10800003 	ldbu	r2,0(r2)
    5f30:	10803fcc 	andi	r2,r2,255
    5f34:	0080100e 	bge	zero,r2,5f78 <OSEventPendMulti+0x548>
    5f38:	10c000d0 	cmplti	r3,r2,3
    5f3c:	1800071e 	bne	r3,zero,5f5c <OSEventPendMulti+0x52c>
    5f40:	108000e0 	cmpeqi	r2,r2,3
    5f44:	10000c26 	beq	r2,zero,5f78 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    5f48:	e0bffe17 	ldw	r2,-8(fp)
    5f4c:	10c00104 	addi	r3,r2,4
    5f50:	e0fffe15 	stw	r3,-8(fp)
    5f54:	10000015 	stw	zero,0(r2)
                      break;
    5f58:	00001206 	br	5fa4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    5f5c:	e0bffe17 	ldw	r2,-8(fp)
    5f60:	10c00104 	addi	r3,r2,4
    5f64:	e0fffe15 	stw	r3,-8(fp)
    5f68:	d0e82117 	ldw	r3,-24444(gp)
    5f6c:	18c00917 	ldw	r3,36(r3)
    5f70:	10c00015 	stw	r3,0(r2)
                      break;
    5f74:	00000b06 	br	5fa4 <OSEventPendMulti+0x574>
    5f78:	e0bff317 	ldw	r2,-52(fp)
    5f7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f80:	e0bffa17 	ldw	r2,-24(fp)
    5f84:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    5f88:	e0bffd17 	ldw	r2,-12(fp)
    5f8c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    5f90:	e0800217 	ldw	r2,8(fp)
    5f94:	00c00044 	movi	r3,1
    5f98:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    5f9c:	e0bff18b 	ldhu	r2,-58(fp)
    5fa0:	00002206 	br	602c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    5fa4:	e0800217 	ldw	r2,8(fp)
    5fa8:	10000005 	stb	zero,0(r2)
             break;
    5fac:	00001006 	br	5ff0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    5fb0:	e0bffe17 	ldw	r2,-8(fp)
    5fb4:	10c00104 	addi	r3,r2,4
    5fb8:	e0fffe15 	stw	r3,-8(fp)
    5fbc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    5fc0:	e0800217 	ldw	r2,8(fp)
    5fc4:	00c00384 	movi	r3,14
    5fc8:	10c00005 	stb	r3,0(r2)
             break;
    5fcc:	00000806 	br	5ff0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    5fd0:	e0bffe17 	ldw	r2,-8(fp)
    5fd4:	10c00104 	addi	r3,r2,4
    5fd8:	e0fffe15 	stw	r3,-8(fp)
    5fdc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    5fe0:	e0800217 	ldw	r2,8(fp)
    5fe4:	00c00284 	movi	r3,10
    5fe8:	10c00005 	stb	r3,0(r2)
             break;
    5fec:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    5ff0:	d0a82117 	ldw	r2,-24444(gp)
    5ff4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    5ff8:	d0a82117 	ldw	r2,-24444(gp)
    5ffc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    6000:	d0a82117 	ldw	r2,-24444(gp)
    6004:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6008:	d0a82117 	ldw	r2,-24444(gp)
    600c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    6010:	d0a82117 	ldw	r2,-24444(gp)
    6014:	10000915 	stw	zero,36(r2)
    6018:	e0bff317 	ldw	r2,-52(fp)
    601c:	e0bffb15 	stw	r2,-20(fp)
    6020:	e0bffb17 	ldw	r2,-20(fp)
    6024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    6028:	e0bff18b 	ldhu	r2,-58(fp)
}
    602c:	e037883a 	mov	sp,fp
    6030:	dfc00117 	ldw	ra,4(sp)
    6034:	df000017 	ldw	fp,0(sp)
    6038:	dec00204 	addi	sp,sp,8
    603c:	f800283a 	ret

00006040 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    6040:	defffe04 	addi	sp,sp,-8
    6044:	dfc00115 	stw	ra,4(sp)
    6048:	df000015 	stw	fp,0(sp)
    604c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    6050:	0010a2c0 	call	10a2c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    6054:	0006db40 	call	6db4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    6058:	0006df80 	call	6df8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    605c:	0006f580 	call	6f58 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    6060:	0006cd80 	call	6cd8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    6064:	0008ed80 	call	8ed8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    6068:	00098200 	call	9820 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    606c:	000aa540 	call	aa54 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    6070:	0006e600 	call	6e60 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    6074:	0006edc0 	call	6edc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    6078:	0010a480 	call	10a48 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    607c:	00077c40 	call	77c4 <OSDebugInit>
#endif
}
    6080:	e037883a 	mov	sp,fp
    6084:	dfc00117 	ldw	ra,4(sp)
    6088:	df000017 	ldw	fp,0(sp)
    608c:	dec00204 	addi	sp,sp,8
    6090:	f800283a 	ret

00006094 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    6094:	defffc04 	addi	sp,sp,-16
    6098:	df000315 	stw	fp,12(sp)
    609c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    60a0:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    60a4:	d0a81243 	ldbu	r2,-24503(gp)
    60a8:	10803fcc 	andi	r2,r2,255
    60ac:	10800058 	cmpnei	r2,r2,1
    60b0:	1000131e 	bne	r2,zero,6100 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60b4:	0005303a 	rdctl	r2,status
    60b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60bc:	e0fffe17 	ldw	r3,-8(fp)
    60c0:	00bfff84 	movi	r2,-2
    60c4:	1884703a 	and	r2,r3,r2
    60c8:	1001703a 	wrctl	status,r2
  
  return context;
    60cc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    60d0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    60d4:	d0a82003 	ldbu	r2,-24448(gp)
    60d8:	10803fcc 	andi	r2,r2,255
    60dc:	10803fe0 	cmpeqi	r2,r2,255
    60e0:	1000031e 	bne	r2,zero,60f0 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    60e4:	d0a82003 	ldbu	r2,-24448(gp)
    60e8:	10800044 	addi	r2,r2,1
    60ec:	d0a82005 	stb	r2,-24448(gp)
    60f0:	e0bffd17 	ldw	r2,-12(fp)
    60f4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60f8:	e0bfff17 	ldw	r2,-4(fp)
    60fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    6100:	e037883a 	mov	sp,fp
    6104:	df000017 	ldw	fp,0(sp)
    6108:	dec00104 	addi	sp,sp,4
    610c:	f800283a 	ret

00006110 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    6110:	defffb04 	addi	sp,sp,-20
    6114:	dfc00415 	stw	ra,16(sp)
    6118:	df000315 	stw	fp,12(sp)
    611c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6120:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    6124:	d0a81243 	ldbu	r2,-24503(gp)
    6128:	10803fcc 	andi	r2,r2,255
    612c:	10800058 	cmpnei	r2,r2,1
    6130:	10002f1e 	bne	r2,zero,61f0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6134:	0005303a 	rdctl	r2,status
    6138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    613c:	e0fffe17 	ldw	r3,-8(fp)
    6140:	00bfff84 	movi	r2,-2
    6144:	1884703a 	and	r2,r3,r2
    6148:	1001703a 	wrctl	status,r2
  
  return context;
    614c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    6150:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    6154:	d0a82003 	ldbu	r2,-24448(gp)
    6158:	10803fcc 	andi	r2,r2,255
    615c:	10000326 	beq	r2,zero,616c <OSIntExit+0x5c>
            OSIntNesting--;
    6160:	d0a82003 	ldbu	r2,-24448(gp)
    6164:	10bfffc4 	addi	r2,r2,-1
    6168:	d0a82005 	stb	r2,-24448(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    616c:	d0a82003 	ldbu	r2,-24448(gp)
    6170:	10803fcc 	andi	r2,r2,255
    6174:	10001a1e 	bne	r2,zero,61e0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    6178:	d0a81203 	ldbu	r2,-24504(gp)
    617c:	10803fcc 	andi	r2,r2,255
    6180:	1000171e 	bne	r2,zero,61e0 <OSIntExit+0xd0>
                OS_SchedNew();
    6184:	00071b80 	call	71b8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    6188:	d0e81403 	ldbu	r3,-24496(gp)
    618c:	d0a81443 	ldbu	r2,-24495(gp)
    6190:	18c03fcc 	andi	r3,r3,255
    6194:	10803fcc 	andi	r2,r2,255
    6198:	18801126 	beq	r3,r2,61e0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    619c:	d0a81403 	ldbu	r2,-24496(gp)
    61a0:	10c03fcc 	andi	r3,r2,255
    61a4:	008000b4 	movhi	r2,2
    61a8:	1089b404 	addi	r2,r2,9936
    61ac:	18c7883a 	add	r3,r3,r3
    61b0:	18c7883a 	add	r3,r3,r3
    61b4:	10c5883a 	add	r2,r2,r3
    61b8:	10800017 	ldw	r2,0(r2)
    61bc:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    61c0:	d0a81c17 	ldw	r2,-24464(gp)
    61c4:	10c00e17 	ldw	r3,56(r2)
    61c8:	18c00044 	addi	r3,r3,1
    61cc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    61d0:	d0a81717 	ldw	r2,-24484(gp)
    61d4:	10800044 	addi	r2,r2,1
    61d8:	d0a81715 	stw	r2,-24484(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    61dc:	001076c0 	call	1076c <OSCtxSw>
    61e0:	e0bffd17 	ldw	r2,-12(fp)
    61e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    61e8:	e0bfff17 	ldw	r2,-4(fp)
    61ec:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    61f0:	e037883a 	mov	sp,fp
    61f4:	dfc00117 	ldw	ra,4(sp)
    61f8:	df000017 	ldw	fp,0(sp)
    61fc:	dec00204 	addi	sp,sp,8
    6200:	f800283a 	ret

00006204 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    6204:	defffc04 	addi	sp,sp,-16
    6208:	df000315 	stw	fp,12(sp)
    620c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6210:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    6214:	d0a81243 	ldbu	r2,-24503(gp)
    6218:	10803fcc 	andi	r2,r2,255
    621c:	10800058 	cmpnei	r2,r2,1
    6220:	1000161e 	bne	r2,zero,627c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6224:	0005303a 	rdctl	r2,status
    6228:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    622c:	e0fffe17 	ldw	r3,-8(fp)
    6230:	00bfff84 	movi	r2,-2
    6234:	1884703a 	and	r2,r3,r2
    6238:	1001703a 	wrctl	status,r2
  
  return context;
    623c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    6240:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    6244:	d0a82003 	ldbu	r2,-24448(gp)
    6248:	10803fcc 	andi	r2,r2,255
    624c:	1000071e 	bne	r2,zero,626c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    6250:	d0a81203 	ldbu	r2,-24504(gp)
    6254:	10803fcc 	andi	r2,r2,255
    6258:	10803fe0 	cmpeqi	r2,r2,255
    625c:	1000031e 	bne	r2,zero,626c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    6260:	d0a81203 	ldbu	r2,-24504(gp)
    6264:	10800044 	addi	r2,r2,1
    6268:	d0a81205 	stb	r2,-24504(gp)
    626c:	e0bffd17 	ldw	r2,-12(fp)
    6270:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6274:	e0bfff17 	ldw	r2,-4(fp)
    6278:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    627c:	e037883a 	mov	sp,fp
    6280:	df000017 	ldw	fp,0(sp)
    6284:	dec00104 	addi	sp,sp,4
    6288:	f800283a 	ret

0000628c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    628c:	defff804 	addi	sp,sp,-32
    6290:	dfc00715 	stw	ra,28(sp)
    6294:	df000615 	stw	fp,24(sp)
    6298:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    629c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    62a0:	d0a81243 	ldbu	r2,-24503(gp)
    62a4:	10803fcc 	andi	r2,r2,255
    62a8:	10800058 	cmpnei	r2,r2,1
    62ac:	1000281e 	bne	r2,zero,6350 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    62b0:	0005303a 	rdctl	r2,status
    62b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62b8:	e0fffb17 	ldw	r3,-20(fp)
    62bc:	00bfff84 	movi	r2,-2
    62c0:	1884703a 	and	r2,r3,r2
    62c4:	1001703a 	wrctl	status,r2
  
  return context;
    62c8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    62cc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    62d0:	d0a81203 	ldbu	r2,-24504(gp)
    62d4:	10803fcc 	andi	r2,r2,255
    62d8:	10001926 	beq	r2,zero,6340 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    62dc:	d0a81203 	ldbu	r2,-24504(gp)
    62e0:	10bfffc4 	addi	r2,r2,-1
    62e4:	d0a81205 	stb	r2,-24504(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    62e8:	d0a81203 	ldbu	r2,-24504(gp)
    62ec:	10803fcc 	andi	r2,r2,255
    62f0:	10000e1e 	bne	r2,zero,632c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    62f4:	d0a82003 	ldbu	r2,-24448(gp)
    62f8:	10803fcc 	andi	r2,r2,255
    62fc:	1000061e 	bne	r2,zero,6318 <OSSchedUnlock+0x8c>
    6300:	e0bffa17 	ldw	r2,-24(fp)
    6304:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6308:	e0bffc17 	ldw	r2,-16(fp)
    630c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    6310:	00070ec0 	call	70ec <OS_Sched>
    6314:	00000e06 	br	6350 <OSSchedUnlock+0xc4>
    6318:	e0bffa17 	ldw	r2,-24(fp)
    631c:	e0bffd15 	stw	r2,-12(fp)
    6320:	e0bffd17 	ldw	r2,-12(fp)
    6324:	1001703a 	wrctl	status,r2
    6328:	00000906 	br	6350 <OSSchedUnlock+0xc4>
    632c:	e0bffa17 	ldw	r2,-24(fp)
    6330:	e0bffe15 	stw	r2,-8(fp)
    6334:	e0bffe17 	ldw	r2,-8(fp)
    6338:	1001703a 	wrctl	status,r2
    633c:	00000406 	br	6350 <OSSchedUnlock+0xc4>
    6340:	e0bffa17 	ldw	r2,-24(fp)
    6344:	e0bfff15 	stw	r2,-4(fp)
    6348:	e0bfff17 	ldw	r2,-4(fp)
    634c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    6350:	e037883a 	mov	sp,fp
    6354:	dfc00117 	ldw	ra,4(sp)
    6358:	df000017 	ldw	fp,0(sp)
    635c:	dec00204 	addi	sp,sp,8
    6360:	f800283a 	ret

00006364 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    6364:	defffe04 	addi	sp,sp,-8
    6368:	dfc00115 	stw	ra,4(sp)
    636c:	df000015 	stw	fp,0(sp)
    6370:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    6374:	d0a81243 	ldbu	r2,-24503(gp)
    6378:	10803fcc 	andi	r2,r2,255
    637c:	10000f1e 	bne	r2,zero,63bc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    6380:	00071b80 	call	71b8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    6384:	d0a81403 	ldbu	r2,-24496(gp)
    6388:	d0a81445 	stb	r2,-24495(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    638c:	d0a81403 	ldbu	r2,-24496(gp)
    6390:	10c03fcc 	andi	r3,r2,255
    6394:	008000b4 	movhi	r2,2
    6398:	1089b404 	addi	r2,r2,9936
    639c:	18c7883a 	add	r3,r3,r3
    63a0:	18c7883a 	add	r3,r3,r3
    63a4:	10c5883a 	add	r2,r2,r3
    63a8:	10800017 	ldw	r2,0(r2)
    63ac:	d0a81c15 	stw	r2,-24464(gp)
        OSTCBCur      = OSTCBHighRdy;
    63b0:	d0a81c17 	ldw	r2,-24464(gp)
    63b4:	d0a82115 	stw	r2,-24444(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    63b8:	00107f80 	call	107f8 <OSStartHighRdy>
    }
}
    63bc:	e037883a 	mov	sp,fp
    63c0:	dfc00117 	ldw	ra,4(sp)
    63c4:	df000017 	ldw	fp,0(sp)
    63c8:	dec00204 	addi	sp,sp,8
    63cc:	f800283a 	ret

000063d0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    63d0:	defff904 	addi	sp,sp,-28
    63d4:	dfc00615 	stw	ra,24(sp)
    63d8:	df000515 	stw	fp,20(sp)
    63dc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    63e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    63e4:	01000084 	movi	r4,2
    63e8:	000cefc0 	call	cefc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63ec:	0005303a 	rdctl	r2,status
    63f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63f4:	e0fffc17 	ldw	r3,-16(fp)
    63f8:	00bfff84 	movi	r2,-2
    63fc:	1884703a 	and	r2,r3,r2
    6400:	1001703a 	wrctl	status,r2
  
  return context;
    6404:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    6408:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    640c:	d0281315 	stw	zero,-24500(gp)
    6410:	e0bffb17 	ldw	r2,-20(fp)
    6414:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6418:	e0bffd17 	ldw	r2,-12(fp)
    641c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    6420:	0009883a 	mov	r4,zero
    6424:	000cefc0 	call	cefc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6428:	0005303a 	rdctl	r2,status
    642c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6430:	e0fffe17 	ldw	r3,-8(fp)
    6434:	00bfff84 	movi	r2,-2
    6438:	1884703a 	and	r2,r3,r2
    643c:	1001703a 	wrctl	status,r2
  
  return context;
    6440:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    6444:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    6448:	d0a81317 	ldw	r2,-24500(gp)
    644c:	d0a81815 	stw	r2,-24480(gp)
    OSStatRdy    = OS_TRUE;
    6450:	00800044 	movi	r2,1
    6454:	d0a82405 	stb	r2,-24432(gp)
    6458:	e0bffb17 	ldw	r2,-20(fp)
    645c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6460:	e0bfff17 	ldw	r2,-4(fp)
    6464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    6468:	e037883a 	mov	sp,fp
    646c:	dfc00117 	ldw	ra,4(sp)
    6470:	df000017 	ldw	fp,0(sp)
    6474:	dec00204 	addi	sp,sp,8
    6478:	f800283a 	ret

0000647c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    647c:	defff704 	addi	sp,sp,-36
    6480:	dfc00815 	stw	ra,32(sp)
    6484:	df000715 	stw	fp,28(sp)
    6488:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    648c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    6490:	0010a100 	call	10a10 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6494:	0005303a 	rdctl	r2,status
    6498:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    649c:	e0fffc17 	ldw	r3,-16(fp)
    64a0:	00bfff84 	movi	r2,-2
    64a4:	1884703a 	and	r2,r3,r2
    64a8:	1001703a 	wrctl	status,r2
  
  return context;
    64ac:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    64b0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    64b4:	d0a82217 	ldw	r2,-24440(gp)
    64b8:	10800044 	addi	r2,r2,1
    64bc:	d0a82215 	stw	r2,-24440(gp)
    64c0:	e0bffb17 	ldw	r2,-20(fp)
    64c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64c8:	e0bffd17 	ldw	r2,-12(fp)
    64cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    64d0:	d0a81243 	ldbu	r2,-24503(gp)
    64d4:	10803fcc 	andi	r2,r2,255
    64d8:	10800058 	cmpnei	r2,r2,1
    64dc:	1000691e 	bne	r2,zero,6684 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    64e0:	d0a81603 	ldbu	r2,-24488(gp)
    64e4:	10803fcc 	andi	r2,r2,255
    64e8:	10c00060 	cmpeqi	r3,r2,1
    64ec:	1800061e 	bne	r3,zero,6508 <OSTimeTick+0x8c>
    64f0:	10c000a0 	cmpeqi	r3,r2,2
    64f4:	1800061e 	bne	r3,zero,6510 <OSTimeTick+0x94>
    64f8:	10000a1e 	bne	r2,zero,6524 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    64fc:	00800044 	movi	r2,1
    6500:	e0bffa05 	stb	r2,-24(fp)
                 break;
    6504:	00000b06 	br	6534 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    6508:	e03ffa05 	stb	zero,-24(fp)
                 break;
    650c:	00000906 	br	6534 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    6510:	00800044 	movi	r2,1
    6514:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    6518:	00800044 	movi	r2,1
    651c:	d0a81605 	stb	r2,-24488(gp)
                 break;
    6520:	00000406 	br	6534 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    6524:	00800044 	movi	r2,1
    6528:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    652c:	d0281605 	stb	zero,-24488(gp)
                 break;
    6530:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    6534:	e0bffa03 	ldbu	r2,-24(fp)
    6538:	1000011e 	bne	r2,zero,6540 <OSTimeTick+0xc4>
            return;
    653c:	00005106 	br	6684 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    6540:	d0a81517 	ldw	r2,-24492(gp)
    6544:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    6548:	00004906 	br	6670 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    654c:	0005303a 	rdctl	r2,status
    6550:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6554:	e0fffe17 	ldw	r3,-8(fp)
    6558:	00bfff84 	movi	r2,-2
    655c:	1884703a 	and	r2,r3,r2
    6560:	1001703a 	wrctl	status,r2
  
  return context;
    6564:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    6568:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    656c:	e0bff917 	ldw	r2,-28(fp)
    6570:	10800b8b 	ldhu	r2,46(r2)
    6574:	10bfffcc 	andi	r2,r2,65535
    6578:	10003626 	beq	r2,zero,6654 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    657c:	e0bff917 	ldw	r2,-28(fp)
    6580:	10800b8b 	ldhu	r2,46(r2)
    6584:	10bfffc4 	addi	r2,r2,-1
    6588:	1007883a 	mov	r3,r2
    658c:	e0bff917 	ldw	r2,-28(fp)
    6590:	10c00b8d 	sth	r3,46(r2)
    6594:	e0bff917 	ldw	r2,-28(fp)
    6598:	10800b8b 	ldhu	r2,46(r2)
    659c:	10bfffcc 	andi	r2,r2,65535
    65a0:	10002c1e 	bne	r2,zero,6654 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    65a4:	e0bff917 	ldw	r2,-28(fp)
    65a8:	10800c03 	ldbu	r2,48(r2)
    65ac:	10803fcc 	andi	r2,r2,255
    65b0:	10800dcc 	andi	r2,r2,55
    65b4:	10000b26 	beq	r2,zero,65e4 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    65b8:	e0bff917 	ldw	r2,-28(fp)
    65bc:	10c00c03 	ldbu	r3,48(r2)
    65c0:	00bff204 	movi	r2,-56
    65c4:	1884703a 	and	r2,r3,r2
    65c8:	1007883a 	mov	r3,r2
    65cc:	e0bff917 	ldw	r2,-28(fp)
    65d0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    65d4:	e0bff917 	ldw	r2,-28(fp)
    65d8:	00c00044 	movi	r3,1
    65dc:	10c00c45 	stb	r3,49(r2)
    65e0:	00000206 	br	65ec <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    65e4:	e0bff917 	ldw	r2,-28(fp)
    65e8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    65ec:	e0bff917 	ldw	r2,-28(fp)
    65f0:	10800c03 	ldbu	r2,48(r2)
    65f4:	10803fcc 	andi	r2,r2,255
    65f8:	1080020c 	andi	r2,r2,8
    65fc:	1000151e 	bne	r2,zero,6654 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    6600:	e0bff917 	ldw	r2,-28(fp)
    6604:	10c00d83 	ldbu	r3,54(r2)
    6608:	d0a81e03 	ldbu	r2,-24456(gp)
    660c:	1884b03a 	or	r2,r3,r2
    6610:	d0a81e05 	stb	r2,-24456(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6614:	e0bff917 	ldw	r2,-28(fp)
    6618:	10800d03 	ldbu	r2,52(r2)
    661c:	10c03fcc 	andi	r3,r2,255
    6620:	e0bff917 	ldw	r2,-28(fp)
    6624:	10800d03 	ldbu	r2,52(r2)
    6628:	11003fcc 	andi	r4,r2,255
    662c:	d0a81e44 	addi	r2,gp,-24455
    6630:	2085883a 	add	r2,r4,r2
    6634:	11000003 	ldbu	r4,0(r2)
    6638:	e0bff917 	ldw	r2,-28(fp)
    663c:	10800d43 	ldbu	r2,53(r2)
    6640:	2084b03a 	or	r2,r4,r2
    6644:	1009883a 	mov	r4,r2
    6648:	d0a81e44 	addi	r2,gp,-24455
    664c:	1885883a 	add	r2,r3,r2
    6650:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    6654:	e0bff917 	ldw	r2,-28(fp)
    6658:	10800517 	ldw	r2,20(r2)
    665c:	e0bff915 	stw	r2,-28(fp)
    6660:	e0bffb17 	ldw	r2,-20(fp)
    6664:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6668:	e0bfff17 	ldw	r2,-4(fp)
    666c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    6670:	e0bff917 	ldw	r2,-28(fp)
    6674:	10800c83 	ldbu	r2,50(r2)
    6678:	10803fcc 	andi	r2,r2,255
    667c:	10800518 	cmpnei	r2,r2,20
    6680:	103fb21e 	bne	r2,zero,654c <__alt_mem_Flash_flash_data+0xf400654c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    6684:	e037883a 	mov	sp,fp
    6688:	dfc00117 	ldw	ra,4(sp)
    668c:	df000017 	ldw	fp,0(sp)
    6690:	dec00204 	addi	sp,sp,8
    6694:	f800283a 	ret

00006698 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    6698:	deffff04 	addi	sp,sp,-4
    669c:	df000015 	stw	fp,0(sp)
    66a0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    66a4:	00804784 	movi	r2,286
}
    66a8:	e037883a 	mov	sp,fp
    66ac:	df000017 	ldw	fp,0(sp)
    66b0:	dec00104 	addi	sp,sp,4
    66b4:	f800283a 	ret

000066b8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    66b8:	deffff04 	addi	sp,sp,-4
    66bc:	df000015 	stw	fp,0(sp)
    66c0:	d839883a 	mov	fp,sp
}
    66c4:	e037883a 	mov	sp,fp
    66c8:	df000017 	ldw	fp,0(sp)
    66cc:	dec00104 	addi	sp,sp,4
    66d0:	f800283a 	ret

000066d4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    66d4:	defff804 	addi	sp,sp,-32
    66d8:	dfc00715 	stw	ra,28(sp)
    66dc:	df000615 	stw	fp,24(sp)
    66e0:	df000604 	addi	fp,sp,24
    66e4:	e13ffc15 	stw	r4,-16(fp)
    66e8:	e17ffd15 	stw	r5,-12(fp)
    66ec:	3007883a 	mov	r3,r6
    66f0:	3805883a 	mov	r2,r7
    66f4:	e0fffe05 	stb	r3,-8(fp)
    66f8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    66fc:	e0bffc17 	ldw	r2,-16(fp)
    6700:	10800283 	ldbu	r2,10(r2)
    6704:	10c03fcc 	andi	r3,r2,255
    6708:	00800074 	movhi	r2,1
    670c:	1084e704 	addi	r2,r2,5020
    6710:	10c5883a 	add	r2,r2,r3
    6714:	10800003 	ldbu	r2,0(r2)
    6718:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    671c:	e0bffa03 	ldbu	r2,-24(fp)
    6720:	e0fffc17 	ldw	r3,-16(fp)
    6724:	1885883a 	add	r2,r3,r2
    6728:	10800204 	addi	r2,r2,8
    672c:	108000c3 	ldbu	r2,3(r2)
    6730:	10c03fcc 	andi	r3,r2,255
    6734:	00800074 	movhi	r2,1
    6738:	1084e704 	addi	r2,r2,5020
    673c:	10c5883a 	add	r2,r2,r3
    6740:	10800003 	ldbu	r2,0(r2)
    6744:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    6748:	e0bffa03 	ldbu	r2,-24(fp)
    674c:	100490fa 	slli	r2,r2,3
    6750:	1007883a 	mov	r3,r2
    6754:	e0bffa43 	ldbu	r2,-23(fp)
    6758:	1885883a 	add	r2,r3,r2
    675c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    6760:	e0fffa83 	ldbu	r3,-22(fp)
    6764:	008000b4 	movhi	r2,2
    6768:	1089b404 	addi	r2,r2,9936
    676c:	18c7883a 	add	r3,r3,r3
    6770:	18c7883a 	add	r3,r3,r3
    6774:	10c5883a 	add	r2,r2,r3
    6778:	10800017 	ldw	r2,0(r2)
    677c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    6780:	e0bffb17 	ldw	r2,-20(fp)
    6784:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    6788:	e0bffb17 	ldw	r2,-20(fp)
    678c:	e0fffd17 	ldw	r3,-12(fp)
    6790:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    6794:	e0bffb17 	ldw	r2,-20(fp)
    6798:	10800c03 	ldbu	r2,48(r2)
    679c:	1007883a 	mov	r3,r2
    67a0:	e0bffe03 	ldbu	r2,-8(fp)
    67a4:	0084303a 	nor	r2,zero,r2
    67a8:	1884703a 	and	r2,r3,r2
    67ac:	1007883a 	mov	r3,r2
    67b0:	e0bffb17 	ldw	r2,-20(fp)
    67b4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    67b8:	e0bffb17 	ldw	r2,-20(fp)
    67bc:	e0ffff03 	ldbu	r3,-4(fp)
    67c0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    67c4:	e0bffb17 	ldw	r2,-20(fp)
    67c8:	10800c03 	ldbu	r2,48(r2)
    67cc:	10803fcc 	andi	r2,r2,255
    67d0:	1080020c 	andi	r2,r2,8
    67d4:	1000111e 	bne	r2,zero,681c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    67d8:	e0bffb17 	ldw	r2,-20(fp)
    67dc:	10c00d83 	ldbu	r3,54(r2)
    67e0:	d0a81e03 	ldbu	r2,-24456(gp)
    67e4:	1884b03a 	or	r2,r3,r2
    67e8:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    67ec:	e0fffa03 	ldbu	r3,-24(fp)
    67f0:	e13ffa03 	ldbu	r4,-24(fp)
    67f4:	d0a81e44 	addi	r2,gp,-24455
    67f8:	2085883a 	add	r2,r4,r2
    67fc:	11000003 	ldbu	r4,0(r2)
    6800:	e0bffb17 	ldw	r2,-20(fp)
    6804:	10800d43 	ldbu	r2,53(r2)
    6808:	2084b03a 	or	r2,r4,r2
    680c:	1009883a 	mov	r4,r2
    6810:	d0a81e44 	addi	r2,gp,-24455
    6814:	1885883a 	add	r2,r3,r2
    6818:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    681c:	e13ffb17 	ldw	r4,-20(fp)
    6820:	e17ffc17 	ldw	r5,-16(fp)
    6824:	0006ac40 	call	6ac4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    6828:	e0bffb17 	ldw	r2,-20(fp)
    682c:	10800817 	ldw	r2,32(r2)
    6830:	10000826 	beq	r2,zero,6854 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    6834:	e0bffb17 	ldw	r2,-20(fp)
    6838:	10800817 	ldw	r2,32(r2)
    683c:	e13ffb17 	ldw	r4,-20(fp)
    6840:	100b883a 	mov	r5,r2
    6844:	0006b780 	call	6b78 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    6848:	e0bffb17 	ldw	r2,-20(fp)
    684c:	e0fffc17 	ldw	r3,-16(fp)
    6850:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    6854:	e0bffa83 	ldbu	r2,-22(fp)
}
    6858:	e037883a 	mov	sp,fp
    685c:	dfc00117 	ldw	ra,4(sp)
    6860:	df000017 	ldw	fp,0(sp)
    6864:	dec00204 	addi	sp,sp,8
    6868:	f800283a 	ret

0000686c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    686c:	defffd04 	addi	sp,sp,-12
    6870:	df000215 	stw	fp,8(sp)
    6874:	df000204 	addi	fp,sp,8
    6878:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    687c:	d0a82117 	ldw	r2,-24444(gp)
    6880:	e0ffff17 	ldw	r3,-4(fp)
    6884:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    6888:	d0a82117 	ldw	r2,-24444(gp)
    688c:	10800d03 	ldbu	r2,52(r2)
    6890:	10803fcc 	andi	r2,r2,255
    6894:	d0e82117 	ldw	r3,-24444(gp)
    6898:	18c00d03 	ldbu	r3,52(r3)
    689c:	18c03fcc 	andi	r3,r3,255
    68a0:	e13fff17 	ldw	r4,-4(fp)
    68a4:	20c7883a 	add	r3,r4,r3
    68a8:	18c00204 	addi	r3,r3,8
    68ac:	190000c3 	ldbu	r4,3(r3)
    68b0:	d0e82117 	ldw	r3,-24444(gp)
    68b4:	18c00d43 	ldbu	r3,53(r3)
    68b8:	20c6b03a 	or	r3,r4,r3
    68bc:	1809883a 	mov	r4,r3
    68c0:	e0ffff17 	ldw	r3,-4(fp)
    68c4:	1885883a 	add	r2,r3,r2
    68c8:	10800204 	addi	r2,r2,8
    68cc:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    68d0:	e0bfff17 	ldw	r2,-4(fp)
    68d4:	10c00283 	ldbu	r3,10(r2)
    68d8:	d0a82117 	ldw	r2,-24444(gp)
    68dc:	10800d83 	ldbu	r2,54(r2)
    68e0:	1884b03a 	or	r2,r3,r2
    68e4:	1007883a 	mov	r3,r2
    68e8:	e0bfff17 	ldw	r2,-4(fp)
    68ec:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    68f0:	d0a82117 	ldw	r2,-24444(gp)
    68f4:	10800d03 	ldbu	r2,52(r2)
    68f8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    68fc:	e0fffe03 	ldbu	r3,-8(fp)
    6900:	e13ffe03 	ldbu	r4,-8(fp)
    6904:	d0a81e44 	addi	r2,gp,-24455
    6908:	2085883a 	add	r2,r4,r2
    690c:	10800003 	ldbu	r2,0(r2)
    6910:	1009883a 	mov	r4,r2
    6914:	d0a82117 	ldw	r2,-24444(gp)
    6918:	10800d43 	ldbu	r2,53(r2)
    691c:	0084303a 	nor	r2,zero,r2
    6920:	2084703a 	and	r2,r4,r2
    6924:	1009883a 	mov	r4,r2
    6928:	d0a81e44 	addi	r2,gp,-24455
    692c:	1885883a 	add	r2,r3,r2
    6930:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    6934:	e0fffe03 	ldbu	r3,-8(fp)
    6938:	d0a81e44 	addi	r2,gp,-24455
    693c:	1885883a 	add	r2,r3,r2
    6940:	10800003 	ldbu	r2,0(r2)
    6944:	10803fcc 	andi	r2,r2,255
    6948:	1000071e 	bne	r2,zero,6968 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    694c:	d0a82117 	ldw	r2,-24444(gp)
    6950:	10800d83 	ldbu	r2,54(r2)
    6954:	0084303a 	nor	r2,zero,r2
    6958:	1007883a 	mov	r3,r2
    695c:	d0a81e03 	ldbu	r2,-24456(gp)
    6960:	1884703a 	and	r2,r3,r2
    6964:	d0a81e05 	stb	r2,-24456(gp)
    }
}
    6968:	e037883a 	mov	sp,fp
    696c:	df000017 	ldw	fp,0(sp)
    6970:	dec00104 	addi	sp,sp,4
    6974:	f800283a 	ret

00006978 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    6978:	defffb04 	addi	sp,sp,-20
    697c:	df000415 	stw	fp,16(sp)
    6980:	df000404 	addi	fp,sp,16
    6984:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    6988:	d0a82117 	ldw	r2,-24444(gp)
    698c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    6990:	d0a82117 	ldw	r2,-24444(gp)
    6994:	e0ffff17 	ldw	r3,-4(fp)
    6998:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    699c:	e0bfff17 	ldw	r2,-4(fp)
    69a0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    69a4:	e0bffc17 	ldw	r2,-16(fp)
    69a8:	10800017 	ldw	r2,0(r2)
    69ac:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    69b0:	00002006 	br	6a34 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    69b4:	d0a82117 	ldw	r2,-24444(gp)
    69b8:	10800d03 	ldbu	r2,52(r2)
    69bc:	10803fcc 	andi	r2,r2,255
    69c0:	d0e82117 	ldw	r3,-24444(gp)
    69c4:	18c00d03 	ldbu	r3,52(r3)
    69c8:	18c03fcc 	andi	r3,r3,255
    69cc:	e13ffd17 	ldw	r4,-12(fp)
    69d0:	20c7883a 	add	r3,r4,r3
    69d4:	18c00204 	addi	r3,r3,8
    69d8:	190000c3 	ldbu	r4,3(r3)
    69dc:	d0e82117 	ldw	r3,-24444(gp)
    69e0:	18c00d43 	ldbu	r3,53(r3)
    69e4:	20c6b03a 	or	r3,r4,r3
    69e8:	1809883a 	mov	r4,r3
    69ec:	e0fffd17 	ldw	r3,-12(fp)
    69f0:	1885883a 	add	r2,r3,r2
    69f4:	10800204 	addi	r2,r2,8
    69f8:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    69fc:	e0bffd17 	ldw	r2,-12(fp)
    6a00:	10c00283 	ldbu	r3,10(r2)
    6a04:	d0a82117 	ldw	r2,-24444(gp)
    6a08:	10800d83 	ldbu	r2,54(r2)
    6a0c:	1884b03a 	or	r2,r3,r2
    6a10:	1007883a 	mov	r3,r2
    6a14:	e0bffd17 	ldw	r2,-12(fp)
    6a18:	10c00285 	stb	r3,10(r2)
        pevents++;
    6a1c:	e0bffc17 	ldw	r2,-16(fp)
    6a20:	10800104 	addi	r2,r2,4
    6a24:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    6a28:	e0bffc17 	ldw	r2,-16(fp)
    6a2c:	10800017 	ldw	r2,0(r2)
    6a30:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    6a34:	e0bffd17 	ldw	r2,-12(fp)
    6a38:	103fde1e 	bne	r2,zero,69b4 <__alt_mem_Flash_flash_data+0xf40069b4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    6a3c:	d0a82117 	ldw	r2,-24444(gp)
    6a40:	10800d03 	ldbu	r2,52(r2)
    6a44:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    6a48:	e0fffe03 	ldbu	r3,-8(fp)
    6a4c:	e13ffe03 	ldbu	r4,-8(fp)
    6a50:	d0a81e44 	addi	r2,gp,-24455
    6a54:	2085883a 	add	r2,r4,r2
    6a58:	10800003 	ldbu	r2,0(r2)
    6a5c:	1009883a 	mov	r4,r2
    6a60:	d0a82117 	ldw	r2,-24444(gp)
    6a64:	10800d43 	ldbu	r2,53(r2)
    6a68:	0084303a 	nor	r2,zero,r2
    6a6c:	2084703a 	and	r2,r4,r2
    6a70:	1009883a 	mov	r4,r2
    6a74:	d0a81e44 	addi	r2,gp,-24455
    6a78:	1885883a 	add	r2,r3,r2
    6a7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    6a80:	e0fffe03 	ldbu	r3,-8(fp)
    6a84:	d0a81e44 	addi	r2,gp,-24455
    6a88:	1885883a 	add	r2,r3,r2
    6a8c:	10800003 	ldbu	r2,0(r2)
    6a90:	10803fcc 	andi	r2,r2,255
    6a94:	1000071e 	bne	r2,zero,6ab4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    6a98:	d0a82117 	ldw	r2,-24444(gp)
    6a9c:	10800d83 	ldbu	r2,54(r2)
    6aa0:	0084303a 	nor	r2,zero,r2
    6aa4:	1007883a 	mov	r3,r2
    6aa8:	d0a81e03 	ldbu	r2,-24456(gp)
    6aac:	1884703a 	and	r2,r3,r2
    6ab0:	d0a81e05 	stb	r2,-24456(gp)
    }
}
    6ab4:	e037883a 	mov	sp,fp
    6ab8:	df000017 	ldw	fp,0(sp)
    6abc:	dec00104 	addi	sp,sp,4
    6ac0:	f800283a 	ret

00006ac4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    6ac4:	defffc04 	addi	sp,sp,-16
    6ac8:	df000315 	stw	fp,12(sp)
    6acc:	df000304 	addi	fp,sp,12
    6ad0:	e13ffe15 	stw	r4,-8(fp)
    6ad4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    6ad8:	e0bffe17 	ldw	r2,-8(fp)
    6adc:	10800d03 	ldbu	r2,52(r2)
    6ae0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    6ae4:	e0bffd03 	ldbu	r2,-12(fp)
    6ae8:	e0fffd03 	ldbu	r3,-12(fp)
    6aec:	e13fff17 	ldw	r4,-4(fp)
    6af0:	20c7883a 	add	r3,r4,r3
    6af4:	18c00204 	addi	r3,r3,8
    6af8:	18c000c3 	ldbu	r3,3(r3)
    6afc:	1809883a 	mov	r4,r3
    6b00:	e0fffe17 	ldw	r3,-8(fp)
    6b04:	18c00d43 	ldbu	r3,53(r3)
    6b08:	00c6303a 	nor	r3,zero,r3
    6b0c:	20c6703a 	and	r3,r4,r3
    6b10:	1809883a 	mov	r4,r3
    6b14:	e0ffff17 	ldw	r3,-4(fp)
    6b18:	1885883a 	add	r2,r3,r2
    6b1c:	10800204 	addi	r2,r2,8
    6b20:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    6b24:	e0bffd03 	ldbu	r2,-12(fp)
    6b28:	e0ffff17 	ldw	r3,-4(fp)
    6b2c:	1885883a 	add	r2,r3,r2
    6b30:	10800204 	addi	r2,r2,8
    6b34:	108000c3 	ldbu	r2,3(r2)
    6b38:	10803fcc 	andi	r2,r2,255
    6b3c:	10000a1e 	bne	r2,zero,6b68 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    6b40:	e0bfff17 	ldw	r2,-4(fp)
    6b44:	10800283 	ldbu	r2,10(r2)
    6b48:	1007883a 	mov	r3,r2
    6b4c:	e0bffe17 	ldw	r2,-8(fp)
    6b50:	10800d83 	ldbu	r2,54(r2)
    6b54:	0084303a 	nor	r2,zero,r2
    6b58:	1884703a 	and	r2,r3,r2
    6b5c:	1007883a 	mov	r3,r2
    6b60:	e0bfff17 	ldw	r2,-4(fp)
    6b64:	10c00285 	stb	r3,10(r2)
    }
}
    6b68:	e037883a 	mov	sp,fp
    6b6c:	df000017 	ldw	fp,0(sp)
    6b70:	dec00104 	addi	sp,sp,4
    6b74:	f800283a 	ret

00006b78 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    6b78:	defffa04 	addi	sp,sp,-24
    6b7c:	df000515 	stw	fp,20(sp)
    6b80:	df000504 	addi	fp,sp,20
    6b84:	e13ffe15 	stw	r4,-8(fp)
    6b88:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    6b8c:	e0bffe17 	ldw	r2,-8(fp)
    6b90:	10800d03 	ldbu	r2,52(r2)
    6b94:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    6b98:	e0bffe17 	ldw	r2,-8(fp)
    6b9c:	10800d83 	ldbu	r2,54(r2)
    6ba0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    6ba4:	e0bffe17 	ldw	r2,-8(fp)
    6ba8:	10800d43 	ldbu	r2,53(r2)
    6bac:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    6bb0:	e0bfff17 	ldw	r2,-4(fp)
    6bb4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    6bb8:	e0bffb17 	ldw	r2,-20(fp)
    6bbc:	10800017 	ldw	r2,0(r2)
    6bc0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    6bc4:	00002506 	br	6c5c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    6bc8:	e0bffd03 	ldbu	r2,-12(fp)
    6bcc:	e0fffd03 	ldbu	r3,-12(fp)
    6bd0:	e13ffc17 	ldw	r4,-16(fp)
    6bd4:	20c7883a 	add	r3,r4,r3
    6bd8:	18c00204 	addi	r3,r3,8
    6bdc:	18c000c3 	ldbu	r3,3(r3)
    6be0:	1809883a 	mov	r4,r3
    6be4:	e0fffd83 	ldbu	r3,-10(fp)
    6be8:	00c6303a 	nor	r3,zero,r3
    6bec:	20c6703a 	and	r3,r4,r3
    6bf0:	1809883a 	mov	r4,r3
    6bf4:	e0fffc17 	ldw	r3,-16(fp)
    6bf8:	1885883a 	add	r2,r3,r2
    6bfc:	10800204 	addi	r2,r2,8
    6c00:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    6c04:	e0bffd03 	ldbu	r2,-12(fp)
    6c08:	e0fffc17 	ldw	r3,-16(fp)
    6c0c:	1885883a 	add	r2,r3,r2
    6c10:	10800204 	addi	r2,r2,8
    6c14:	108000c3 	ldbu	r2,3(r2)
    6c18:	10803fcc 	andi	r2,r2,255
    6c1c:	1000091e 	bne	r2,zero,6c44 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    6c20:	e0bffc17 	ldw	r2,-16(fp)
    6c24:	10800283 	ldbu	r2,10(r2)
    6c28:	1007883a 	mov	r3,r2
    6c2c:	e0bffd43 	ldbu	r2,-11(fp)
    6c30:	0084303a 	nor	r2,zero,r2
    6c34:	1884703a 	and	r2,r3,r2
    6c38:	1007883a 	mov	r3,r2
    6c3c:	e0bffc17 	ldw	r2,-16(fp)
    6c40:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    6c44:	e0bffb17 	ldw	r2,-20(fp)
    6c48:	10800104 	addi	r2,r2,4
    6c4c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    6c50:	e0bffb17 	ldw	r2,-20(fp)
    6c54:	10800017 	ldw	r2,0(r2)
    6c58:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    6c5c:	e0bffc17 	ldw	r2,-16(fp)
    6c60:	103fd91e 	bne	r2,zero,6bc8 <__alt_mem_Flash_flash_data+0xf4006bc8>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    6c64:	e037883a 	mov	sp,fp
    6c68:	df000017 	ldw	fp,0(sp)
    6c6c:	dec00104 	addi	sp,sp,4
    6c70:	f800283a 	ret

00006c74 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    6c74:	defffc04 	addi	sp,sp,-16
    6c78:	df000315 	stw	fp,12(sp)
    6c7c:	df000304 	addi	fp,sp,12
    6c80:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    6c84:	e0bfff17 	ldw	r2,-4(fp)
    6c88:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    6c8c:	e0bfff17 	ldw	r2,-4(fp)
    6c90:	108002c4 	addi	r2,r2,11
    6c94:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6c98:	e03ffe05 	stb	zero,-8(fp)
    6c9c:	00000706 	br	6cbc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    6ca0:	e0bffd17 	ldw	r2,-12(fp)
    6ca4:	10c00044 	addi	r3,r2,1
    6ca8:	e0fffd15 	stw	r3,-12(fp)
    6cac:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6cb0:	e0bffe03 	ldbu	r2,-8(fp)
    6cb4:	10800044 	addi	r2,r2,1
    6cb8:	e0bffe05 	stb	r2,-8(fp)
    6cbc:	e0bffe03 	ldbu	r2,-8(fp)
    6cc0:	108000f0 	cmpltui	r2,r2,3
    6cc4:	103ff61e 	bne	r2,zero,6ca0 <__alt_mem_Flash_flash_data+0xf4006ca0>
        *ptbl++ = 0;
    }
}
    6cc8:	e037883a 	mov	sp,fp
    6ccc:	df000017 	ldw	fp,0(sp)
    6cd0:	dec00104 	addi	sp,sp,4
    6cd4:	f800283a 	ret

00006cd8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    6cd8:	defffb04 	addi	sp,sp,-20
    6cdc:	dfc00415 	stw	ra,16(sp)
    6ce0:	df000315 	stw	fp,12(sp)
    6ce4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    6ce8:	010000b4 	movhi	r4,2
    6cec:	2105a004 	addi	r4,r4,5760
    6cf0:	0142d004 	movi	r5,2880
    6cf4:	00070380 	call	7038 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    6cf8:	008000b4 	movhi	r2,2
    6cfc:	1085a004 	addi	r2,r2,5760
    6d00:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    6d04:	008000b4 	movhi	r2,2
    6d08:	1085ac04 	addi	r2,r2,5808
    6d0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    6d10:	e03ffd0d 	sth	zero,-12(fp)
    6d14:	00001306 	br	6d64 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6d18:	e0bffe17 	ldw	r2,-8(fp)
    6d1c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    6d20:	e0bffe17 	ldw	r2,-8(fp)
    6d24:	e0ffff17 	ldw	r3,-4(fp)
    6d28:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    6d2c:	e0bffe17 	ldw	r2,-8(fp)
    6d30:	00c00fc4 	movi	r3,63
    6d34:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    6d38:	e0bffe17 	ldw	r2,-8(fp)
    6d3c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    6d40:	e0bffe17 	ldw	r2,-8(fp)
    6d44:	10800c04 	addi	r2,r2,48
    6d48:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    6d4c:	e0bfff17 	ldw	r2,-4(fp)
    6d50:	10800c04 	addi	r2,r2,48
    6d54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    6d58:	e0bffd0b 	ldhu	r2,-12(fp)
    6d5c:	10800044 	addi	r2,r2,1
    6d60:	e0bffd0d 	sth	r2,-12(fp)
    6d64:	e0bffd0b 	ldhu	r2,-12(fp)
    6d68:	10800ef0 	cmpltui	r2,r2,59
    6d6c:	103fea1e 	bne	r2,zero,6d18 <__alt_mem_Flash_flash_data+0xf4006d18>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    6d70:	e0bffe17 	ldw	r2,-8(fp)
    6d74:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    6d78:	e0bffe17 	ldw	r2,-8(fp)
    6d7c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    6d80:	e0bffe17 	ldw	r2,-8(fp)
    6d84:	00c00fc4 	movi	r3,63
    6d88:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    6d8c:	e0bffe17 	ldw	r2,-8(fp)
    6d90:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    6d94:	008000b4 	movhi	r2,2
    6d98:	1085a004 	addi	r2,r2,5760
    6d9c:	d0a81f15 	stw	r2,-24452(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    6da0:	e037883a 	mov	sp,fp
    6da4:	dfc00117 	ldw	ra,4(sp)
    6da8:	df000017 	ldw	fp,0(sp)
    6dac:	dec00204 	addi	sp,sp,8
    6db0:	f800283a 	ret

00006db4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    6db4:	deffff04 	addi	sp,sp,-4
    6db8:	df000015 	stw	fp,0(sp)
    6dbc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    6dc0:	d0282215 	stw	zero,-24440(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    6dc4:	d0282005 	stb	zero,-24448(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    6dc8:	d0281205 	stb	zero,-24504(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    6dcc:	d0281a45 	stb	zero,-24471(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    6dd0:	d0281245 	stb	zero,-24503(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    6dd4:	d0281715 	stw	zero,-24484(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    6dd8:	d0281315 	stw	zero,-24500(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    6ddc:	d0282515 	stw	zero,-24428(gp)
    OSIdleCtrMax  = 0L;
    6de0:	d0281815 	stw	zero,-24480(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    6de4:	d0282405 	stb	zero,-24432(gp)
#endif
}
    6de8:	e037883a 	mov	sp,fp
    6dec:	df000017 	ldw	fp,0(sp)
    6df0:	dec00104 	addi	sp,sp,4
    6df4:	f800283a 	ret

00006df8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    6df8:	defffd04 	addi	sp,sp,-12
    6dfc:	df000215 	stw	fp,8(sp)
    6e00:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    6e04:	d0281e05 	stb	zero,-24456(gp)
    prdytbl       = &OSRdyTbl[0];
    6e08:	d0a81e44 	addi	r2,gp,-24455
    6e0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    6e10:	e03ffe05 	stb	zero,-8(fp)
    6e14:	00000706 	br	6e34 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    6e18:	e0bfff17 	ldw	r2,-4(fp)
    6e1c:	10c00044 	addi	r3,r2,1
    6e20:	e0ffff15 	stw	r3,-4(fp)
    6e24:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    6e28:	e0bffe03 	ldbu	r2,-8(fp)
    6e2c:	10800044 	addi	r2,r2,1
    6e30:	e0bffe05 	stb	r2,-8(fp)
    6e34:	e0bffe03 	ldbu	r2,-8(fp)
    6e38:	108000f0 	cmpltui	r2,r2,3
    6e3c:	103ff61e 	bne	r2,zero,6e18 <__alt_mem_Flash_flash_data+0xf4006e18>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    6e40:	d0281445 	stb	zero,-24495(gp)
    OSPrioHighRdy = 0;
    6e44:	d0281405 	stb	zero,-24496(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    6e48:	d0281c15 	stw	zero,-24464(gp)
    OSTCBCur      = (OS_TCB *)0;
    6e4c:	d0282115 	stw	zero,-24444(gp)
}
    6e50:	e037883a 	mov	sp,fp
    6e54:	df000017 	ldw	fp,0(sp)
    6e58:	dec00104 	addi	sp,sp,4
    6e5c:	f800283a 	ret

00006e60 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    6e60:	defff804 	addi	sp,sp,-32
    6e64:	dfc00715 	stw	ra,28(sp)
    6e68:	df000615 	stw	fp,24(sp)
    6e6c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    6e70:	00bfffd4 	movui	r2,65535
    6e74:	d8800015 	stw	r2,0(sp)
    6e78:	008000b4 	movhi	r2,2
    6e7c:	1083a004 	addi	r2,r2,3712
    6e80:	d8800115 	stw	r2,4(sp)
    6e84:	00808004 	movi	r2,512
    6e88:	d8800215 	stw	r2,8(sp)
    6e8c:	d8000315 	stw	zero,12(sp)
    6e90:	008000c4 	movi	r2,3
    6e94:	d8800415 	stw	r2,16(sp)
    6e98:	01000034 	movhi	r4,0
    6e9c:	211cbc04 	addi	r4,r4,29424
    6ea0:	000b883a 	mov	r5,zero
    6ea4:	018000b4 	movhi	r6,2
    6ea8:	31859f04 	addi	r6,r6,5756
    6eac:	01c00504 	movi	r7,20
    6eb0:	000bd040 	call	bd04 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    6eb4:	01000504 	movi	r4,20
    6eb8:	01400074 	movhi	r5,1
    6ebc:	29452704 	addi	r5,r5,5276
    6ec0:	e1bfff04 	addi	r6,fp,-4
    6ec4:	000c5d00 	call	c5d0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    6ec8:	e037883a 	mov	sp,fp
    6ecc:	dfc00117 	ldw	ra,4(sp)
    6ed0:	df000017 	ldw	fp,0(sp)
    6ed4:	dec00204 	addi	sp,sp,8
    6ed8:	f800283a 	ret

00006edc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    6edc:	defff804 	addi	sp,sp,-32
    6ee0:	dfc00715 	stw	ra,28(sp)
    6ee4:	df000615 	stw	fp,24(sp)
    6ee8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    6eec:	00bfff94 	movui	r2,65534
    6ef0:	d8800015 	stw	r2,0(sp)
    6ef4:	008000b4 	movhi	r2,2
    6ef8:	10812804 	addi	r2,r2,1184
    6efc:	d8800115 	stw	r2,4(sp)
    6f00:	00808004 	movi	r2,512
    6f04:	d8800215 	stw	r2,8(sp)
    6f08:	d8000315 	stw	zero,12(sp)
    6f0c:	008000c4 	movi	r2,3
    6f10:	d8800415 	stw	r2,16(sp)
    6f14:	01000034 	movhi	r4,0
    6f18:	211cd304 	addi	r4,r4,29516
    6f1c:	000b883a 	mov	r5,zero
    6f20:	018000b4 	movhi	r6,2
    6f24:	31832704 	addi	r6,r6,3228
    6f28:	01c004c4 	movi	r7,19
    6f2c:	000bd040 	call	bd04 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    6f30:	010004c4 	movi	r4,19
    6f34:	01400074 	movhi	r5,1
    6f38:	29452b04 	addi	r5,r5,5292
    6f3c:	e1bfff04 	addi	r6,fp,-4
    6f40:	000c5d00 	call	c5d0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    6f44:	e037883a 	mov	sp,fp
    6f48:	dfc00117 	ldw	ra,4(sp)
    6f4c:	df000017 	ldw	fp,0(sp)
    6f50:	dec00204 	addi	sp,sp,8
    6f54:	f800283a 	ret

00006f58 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    6f58:	defffb04 	addi	sp,sp,-20
    6f5c:	dfc00415 	stw	ra,16(sp)
    6f60:	df000315 	stw	fp,12(sp)
    6f64:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    6f68:	010000b4 	movhi	r4,2
    6f6c:	21087004 	addi	r4,r4,8640
    6f70:	01414404 	movi	r5,1296
    6f74:	00070380 	call	7038 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    6f78:	010000b4 	movhi	r4,2
    6f7c:	2109b404 	addi	r4,r4,9936
    6f80:	01401504 	movi	r5,84
    6f84:	00070380 	call	7038 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    6f88:	008000b4 	movhi	r2,2
    6f8c:	10887004 	addi	r2,r2,8640
    6f90:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    6f94:	008000b4 	movhi	r2,2
    6f98:	10888b04 	addi	r2,r2,8748
    6f9c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6fa0:	e03ffd05 	stb	zero,-12(fp)
    6fa4:	00001106 	br	6fec <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    6fa8:	e0bffe17 	ldw	r2,-8(fp)
    6fac:	e0ffff17 	ldw	r3,-4(fp)
    6fb0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    6fb4:	e0bffe17 	ldw	r2,-8(fp)
    6fb8:	00c00fc4 	movi	r3,63
    6fbc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    6fc0:	e0bffe17 	ldw	r2,-8(fp)
    6fc4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    6fc8:	e0bffe17 	ldw	r2,-8(fp)
    6fcc:	10801b04 	addi	r2,r2,108
    6fd0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    6fd4:	e0bfff17 	ldw	r2,-4(fp)
    6fd8:	10801b04 	addi	r2,r2,108
    6fdc:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6fe0:	e0bffd03 	ldbu	r2,-12(fp)
    6fe4:	10800044 	addi	r2,r2,1
    6fe8:	e0bffd05 	stb	r2,-12(fp)
    6fec:	e0bffd03 	ldbu	r2,-12(fp)
    6ff0:	108002f0 	cmpltui	r2,r2,11
    6ff4:	103fec1e 	bne	r2,zero,6fa8 <__alt_mem_Flash_flash_data+0xf4006fa8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    6ff8:	e0bffe17 	ldw	r2,-8(fp)
    6ffc:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    7000:	e0bffe17 	ldw	r2,-8(fp)
    7004:	00c00fc4 	movi	r3,63
    7008:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    700c:	e0bffe17 	ldw	r2,-8(fp)
    7010:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    7014:	d0281515 	stw	zero,-24492(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    7018:	008000b4 	movhi	r2,2
    701c:	10887004 	addi	r2,r2,8640
    7020:	d0a81915 	stw	r2,-24476(gp)
}
    7024:	e037883a 	mov	sp,fp
    7028:	dfc00117 	ldw	ra,4(sp)
    702c:	df000017 	ldw	fp,0(sp)
    7030:	dec00204 	addi	sp,sp,8
    7034:	f800283a 	ret

00007038 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    7038:	defffd04 	addi	sp,sp,-12
    703c:	df000215 	stw	fp,8(sp)
    7040:	df000204 	addi	fp,sp,8
    7044:	e13ffe15 	stw	r4,-8(fp)
    7048:	2805883a 	mov	r2,r5
    704c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    7050:	00000706 	br	7070 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    7054:	e0bffe17 	ldw	r2,-8(fp)
    7058:	10c00044 	addi	r3,r2,1
    705c:	e0fffe15 	stw	r3,-8(fp)
    7060:	10000005 	stb	zero,0(r2)
        size--;
    7064:	e0bfff0b 	ldhu	r2,-4(fp)
    7068:	10bfffc4 	addi	r2,r2,-1
    706c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    7070:	e0bfff0b 	ldhu	r2,-4(fp)
    7074:	103ff71e 	bne	r2,zero,7054 <__alt_mem_Flash_flash_data+0xf4007054>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    7078:	e037883a 	mov	sp,fp
    707c:	df000017 	ldw	fp,0(sp)
    7080:	dec00104 	addi	sp,sp,4
    7084:	f800283a 	ret

00007088 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    7088:	defffc04 	addi	sp,sp,-16
    708c:	df000315 	stw	fp,12(sp)
    7090:	df000304 	addi	fp,sp,12
    7094:	e13ffd15 	stw	r4,-12(fp)
    7098:	e17ffe15 	stw	r5,-8(fp)
    709c:	3005883a 	mov	r2,r6
    70a0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    70a4:	00000b06 	br	70d4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    70a8:	e0bffd17 	ldw	r2,-12(fp)
    70ac:	10c00044 	addi	r3,r2,1
    70b0:	e0fffd15 	stw	r3,-12(fp)
    70b4:	e0fffe17 	ldw	r3,-8(fp)
    70b8:	19000044 	addi	r4,r3,1
    70bc:	e13ffe15 	stw	r4,-8(fp)
    70c0:	18c00003 	ldbu	r3,0(r3)
    70c4:	10c00005 	stb	r3,0(r2)
        size--;
    70c8:	e0bfff0b 	ldhu	r2,-4(fp)
    70cc:	10bfffc4 	addi	r2,r2,-1
    70d0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    70d4:	e0bfff0b 	ldhu	r2,-4(fp)
    70d8:	103ff31e 	bne	r2,zero,70a8 <__alt_mem_Flash_flash_data+0xf40070a8>
        *pdest++ = *psrc++;
        size--;
    }
}
    70dc:	e037883a 	mov	sp,fp
    70e0:	df000017 	ldw	fp,0(sp)
    70e4:	dec00104 	addi	sp,sp,4
    70e8:	f800283a 	ret

000070ec <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    70ec:	defffb04 	addi	sp,sp,-20
    70f0:	dfc00415 	stw	ra,16(sp)
    70f4:	df000315 	stw	fp,12(sp)
    70f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    70fc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7100:	0005303a 	rdctl	r2,status
    7104:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7108:	e0fffe17 	ldw	r3,-8(fp)
    710c:	00bfff84 	movi	r2,-2
    7110:	1884703a 	and	r2,r3,r2
    7114:	1001703a 	wrctl	status,r2
  
  return context;
    7118:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    711c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    7120:	d0a82003 	ldbu	r2,-24448(gp)
    7124:	10803fcc 	andi	r2,r2,255
    7128:	10001a1e 	bne	r2,zero,7194 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    712c:	d0a81203 	ldbu	r2,-24504(gp)
    7130:	10803fcc 	andi	r2,r2,255
    7134:	1000171e 	bne	r2,zero,7194 <OS_Sched+0xa8>
            OS_SchedNew();
    7138:	00071b80 	call	71b8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    713c:	d0e81403 	ldbu	r3,-24496(gp)
    7140:	d0a81443 	ldbu	r2,-24495(gp)
    7144:	18c03fcc 	andi	r3,r3,255
    7148:	10803fcc 	andi	r2,r2,255
    714c:	18801126 	beq	r3,r2,7194 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    7150:	d0a81403 	ldbu	r2,-24496(gp)
    7154:	10c03fcc 	andi	r3,r2,255
    7158:	008000b4 	movhi	r2,2
    715c:	1089b404 	addi	r2,r2,9936
    7160:	18c7883a 	add	r3,r3,r3
    7164:	18c7883a 	add	r3,r3,r3
    7168:	10c5883a 	add	r2,r2,r3
    716c:	10800017 	ldw	r2,0(r2)
    7170:	d0a81c15 	stw	r2,-24464(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    7174:	d0a81c17 	ldw	r2,-24464(gp)
    7178:	10c00e17 	ldw	r3,56(r2)
    717c:	18c00044 	addi	r3,r3,1
    7180:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    7184:	d0a81717 	ldw	r2,-24484(gp)
    7188:	10800044 	addi	r2,r2,1
    718c:	d0a81715 	stw	r2,-24484(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    7190:	001076c0 	call	1076c <OSCtxSw>
    7194:	e0bffd17 	ldw	r2,-12(fp)
    7198:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    719c:	e0bfff17 	ldw	r2,-4(fp)
    71a0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    71a4:	e037883a 	mov	sp,fp
    71a8:	dfc00117 	ldw	ra,4(sp)
    71ac:	df000017 	ldw	fp,0(sp)
    71b0:	dec00204 	addi	sp,sp,8
    71b4:	f800283a 	ret

000071b8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    71b8:	defffe04 	addi	sp,sp,-8
    71bc:	df000115 	stw	fp,4(sp)
    71c0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    71c4:	d0a81e03 	ldbu	r2,-24456(gp)
    71c8:	10c03fcc 	andi	r3,r2,255
    71cc:	00800074 	movhi	r2,1
    71d0:	1084e704 	addi	r2,r2,5020
    71d4:	10c5883a 	add	r2,r2,r3
    71d8:	10800003 	ldbu	r2,0(r2)
    71dc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    71e0:	e0bfff03 	ldbu	r2,-4(fp)
    71e4:	100490fa 	slli	r2,r2,3
    71e8:	1009883a 	mov	r4,r2
    71ec:	e0ffff03 	ldbu	r3,-4(fp)
    71f0:	d0a81e44 	addi	r2,gp,-24455
    71f4:	1885883a 	add	r2,r3,r2
    71f8:	10800003 	ldbu	r2,0(r2)
    71fc:	10c03fcc 	andi	r3,r2,255
    7200:	00800074 	movhi	r2,1
    7204:	1084e704 	addi	r2,r2,5020
    7208:	10c5883a 	add	r2,r2,r3
    720c:	10800003 	ldbu	r2,0(r2)
    7210:	2085883a 	add	r2,r4,r2
    7214:	d0a81405 	stb	r2,-24496(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    7218:	e037883a 	mov	sp,fp
    721c:	df000017 	ldw	fp,0(sp)
    7220:	dec00104 	addi	sp,sp,4
    7224:	f800283a 	ret

00007228 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    7228:	defffc04 	addi	sp,sp,-16
    722c:	df000315 	stw	fp,12(sp)
    7230:	df000304 	addi	fp,sp,12
    7234:	e13ffe15 	stw	r4,-8(fp)
    7238:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    723c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    7240:	00000b06 	br	7270 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    7244:	e0bffe17 	ldw	r2,-8(fp)
    7248:	10c00044 	addi	r3,r2,1
    724c:	e0fffe15 	stw	r3,-8(fp)
    7250:	e0ffff17 	ldw	r3,-4(fp)
    7254:	19000044 	addi	r4,r3,1
    7258:	e13fff15 	stw	r4,-4(fp)
    725c:	18c00003 	ldbu	r3,0(r3)
    7260:	10c00005 	stb	r3,0(r2)
        len++;
    7264:	e0bffd03 	ldbu	r2,-12(fp)
    7268:	10800044 	addi	r2,r2,1
    726c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    7270:	e0bfff17 	ldw	r2,-4(fp)
    7274:	10800003 	ldbu	r2,0(r2)
    7278:	10803fcc 	andi	r2,r2,255
    727c:	103ff11e 	bne	r2,zero,7244 <__alt_mem_Flash_flash_data+0xf4007244>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    7280:	e0bffe17 	ldw	r2,-8(fp)
    7284:	10000005 	stb	zero,0(r2)
    return (len);
    7288:	e0bffd03 	ldbu	r2,-12(fp)
}
    728c:	e037883a 	mov	sp,fp
    7290:	df000017 	ldw	fp,0(sp)
    7294:	dec00104 	addi	sp,sp,4
    7298:	f800283a 	ret

0000729c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    729c:	defffd04 	addi	sp,sp,-12
    72a0:	df000215 	stw	fp,8(sp)
    72a4:	df000204 	addi	fp,sp,8
    72a8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    72ac:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    72b0:	00000606 	br	72cc <OS_StrLen+0x30>
        psrc++;
    72b4:	e0bfff17 	ldw	r2,-4(fp)
    72b8:	10800044 	addi	r2,r2,1
    72bc:	e0bfff15 	stw	r2,-4(fp)
        len++;
    72c0:	e0bffe03 	ldbu	r2,-8(fp)
    72c4:	10800044 	addi	r2,r2,1
    72c8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    72cc:	e0bfff17 	ldw	r2,-4(fp)
    72d0:	10800003 	ldbu	r2,0(r2)
    72d4:	10803fcc 	andi	r2,r2,255
    72d8:	103ff61e 	bne	r2,zero,72b4 <__alt_mem_Flash_flash_data+0xf40072b4>
        psrc++;
        len++;
    }
    return (len);
    72dc:	e0bffe03 	ldbu	r2,-8(fp)
}
    72e0:	e037883a 	mov	sp,fp
    72e4:	df000017 	ldw	fp,0(sp)
    72e8:	dec00104 	addi	sp,sp,4
    72ec:	f800283a 	ret

000072f0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    72f0:	defffa04 	addi	sp,sp,-24
    72f4:	dfc00515 	stw	ra,20(sp)
    72f8:	df000415 	stw	fp,16(sp)
    72fc:	df000404 	addi	fp,sp,16
    7300:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7304:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7308:	0005303a 	rdctl	r2,status
    730c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7310:	e0fffd17 	ldw	r3,-12(fp)
    7314:	00bfff84 	movi	r2,-2
    7318:	1884703a 	and	r2,r3,r2
    731c:	1001703a 	wrctl	status,r2
  
  return context;
    7320:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    7324:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    7328:	d0a81317 	ldw	r2,-24500(gp)
    732c:	10800044 	addi	r2,r2,1
    7330:	d0a81315 	stw	r2,-24500(gp)
    7334:	e0bffc17 	ldw	r2,-16(fp)
    7338:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    733c:	e0bffe17 	ldw	r2,-8(fp)
    7340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    7344:	0010a640 	call	10a64 <OSTaskIdleHook>
    }
    7348:	003fef06 	br	7308 <__alt_mem_Flash_flash_data+0xf4007308>

0000734c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    734c:	defff804 	addi	sp,sp,-32
    7350:	dfc00715 	stw	ra,28(sp)
    7354:	df000615 	stw	fp,24(sp)
    7358:	dc400515 	stw	r17,20(sp)
    735c:	dc000415 	stw	r16,16(sp)
    7360:	df000604 	addi	fp,sp,24
    7364:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7368:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    736c:	00000206 	br	7378 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    7370:	01000044 	movi	r4,1
    7374:	000cefc0 	call	cefc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    7378:	d0a82403 	ldbu	r2,-24432(gp)
    737c:	10803fcc 	andi	r2,r2,255
    7380:	103ffb26 	beq	r2,zero,7370 <__alt_mem_Flash_flash_data+0xf4007370>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    7384:	d0e81817 	ldw	r3,-24480(gp)
    7388:	00947b34 	movhi	r2,20972
    738c:	10a147c4 	addi	r2,r2,-31457
    7390:	1888383a 	mulxuu	r4,r3,r2
    7394:	1885383a 	mul	r2,r3,r2
    7398:	1021883a 	mov	r16,r2
    739c:	2023883a 	mov	r17,r4
    73a0:	8804d17a 	srli	r2,r17,5
    73a4:	d0a81815 	stw	r2,-24480(gp)
    if (OSIdleCtrMax == 0L) {
    73a8:	d0a81817 	ldw	r2,-24480(gp)
    73ac:	1000031e 	bne	r2,zero,73bc <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    73b0:	d0281a05 	stb	zero,-24472(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    73b4:	01003fc4 	movi	r4,255
    73b8:	000cb500 	call	cb50 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    73bc:	0005303a 	rdctl	r2,status
    73c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    73c4:	e0fffb17 	ldw	r3,-20(fp)
    73c8:	00bfff84 	movi	r2,-2
    73cc:	1884703a 	and	r2,r3,r2
    73d0:	1001703a 	wrctl	status,r2
  
  return context;
    73d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    73d8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    73dc:	d0a81317 	ldw	r2,-24500(gp)
    73e0:	d0a82515 	stw	r2,-24428(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    73e4:	d0281315 	stw	zero,-24500(gp)
    73e8:	e0bffa17 	ldw	r2,-24(fp)
    73ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    73f0:	e0bffc17 	ldw	r2,-16(fp)
    73f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    73f8:	d0e82517 	ldw	r3,-24428(gp)
    73fc:	d0a81817 	ldw	r2,-24480(gp)
    7400:	1885203a 	divu	r2,r3,r2
    7404:	1007883a 	mov	r3,r2
    7408:	00801904 	movi	r2,100
    740c:	10c5c83a 	sub	r2,r2,r3
    7410:	d0a81a05 	stb	r2,-24472(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    7414:	00109f40 	call	109f4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    7418:	00074280 	call	7428 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    741c:	0009883a 	mov	r4,zero
    7420:	000cefc0 	call	cefc <OSTimeDly>
    }
    7424:	003fe506 	br	73bc <__alt_mem_Flash_flash_data+0xf40073bc>

00007428 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    7428:	defffa04 	addi	sp,sp,-24
    742c:	dfc00515 	stw	ra,20(sp)
    7430:	df000415 	stw	fp,16(sp)
    7434:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    7438:	e03ffc05 	stb	zero,-16(fp)
    743c:	00002406 	br	74d0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    7440:	e0fffc03 	ldbu	r3,-16(fp)
    7444:	e0bffe04 	addi	r2,fp,-8
    7448:	1809883a 	mov	r4,r3
    744c:	100b883a 	mov	r5,r2
    7450:	000c9880 	call	c988 <OSTaskStkChk>
    7454:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    7458:	e0bffc43 	ldbu	r2,-15(fp)
    745c:	1000191e 	bne	r2,zero,74c4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    7460:	e0fffc03 	ldbu	r3,-16(fp)
    7464:	008000b4 	movhi	r2,2
    7468:	1089b404 	addi	r2,r2,9936
    746c:	18c7883a 	add	r3,r3,r3
    7470:	18c7883a 	add	r3,r3,r3
    7474:	10c5883a 	add	r2,r2,r3
    7478:	10800017 	ldw	r2,0(r2)
    747c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    7480:	e0bffd17 	ldw	r2,-12(fp)
    7484:	10000f26 	beq	r2,zero,74c4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    7488:	e0bffd17 	ldw	r2,-12(fp)
    748c:	10800060 	cmpeqi	r2,r2,1
    7490:	10000c1e 	bne	r2,zero,74c4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    7494:	e0bffd17 	ldw	r2,-12(fp)
    7498:	10c00217 	ldw	r3,8(r2)
    749c:	e0bffd17 	ldw	r2,-12(fp)
    74a0:	10800317 	ldw	r2,12(r2)
    74a4:	1085883a 	add	r2,r2,r2
    74a8:	1085883a 	add	r2,r2,r2
    74ac:	1887883a 	add	r3,r3,r2
    74b0:	e0bffd17 	ldw	r2,-12(fp)
    74b4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    74b8:	e0ffff17 	ldw	r3,-4(fp)
    74bc:	e0bffd17 	ldw	r2,-12(fp)
    74c0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    74c4:	e0bffc03 	ldbu	r2,-16(fp)
    74c8:	10800044 	addi	r2,r2,1
    74cc:	e0bffc05 	stb	r2,-16(fp)
    74d0:	e0bffc03 	ldbu	r2,-16(fp)
    74d4:	10800570 	cmpltui	r2,r2,21
    74d8:	103fd91e 	bne	r2,zero,7440 <__alt_mem_Flash_flash_data+0xf4007440>
#endif
                }
            }
        }
    }
}
    74dc:	e037883a 	mov	sp,fp
    74e0:	dfc00117 	ldw	ra,4(sp)
    74e4:	df000017 	ldw	fp,0(sp)
    74e8:	dec00204 	addi	sp,sp,8
    74ec:	f800283a 	ret

000074f0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    74f0:	defff204 	addi	sp,sp,-56
    74f4:	dfc00d15 	stw	ra,52(sp)
    74f8:	df000c15 	stw	fp,48(sp)
    74fc:	df000c04 	addi	fp,sp,48
    7500:	e17ffc15 	stw	r5,-16(fp)
    7504:	e1bffd15 	stw	r6,-12(fp)
    7508:	3807883a 	mov	r3,r7
    750c:	e0800417 	ldw	r2,16(fp)
    7510:	e13ffb05 	stb	r4,-20(fp)
    7514:	e0fffe0d 	sth	r3,-8(fp)
    7518:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    751c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7520:	0005303a 	rdctl	r2,status
    7524:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7528:	e0fff617 	ldw	r3,-40(fp)
    752c:	00bfff84 	movi	r2,-2
    7530:	1884703a 	and	r2,r3,r2
    7534:	1001703a 	wrctl	status,r2
  
  return context;
    7538:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    753c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    7540:	d0a81917 	ldw	r2,-24476(gp)
    7544:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    7548:	e0bff517 	ldw	r2,-44(fp)
    754c:	10009326 	beq	r2,zero,779c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    7550:	e0bff517 	ldw	r2,-44(fp)
    7554:	10800517 	ldw	r2,20(r2)
    7558:	d0a81915 	stw	r2,-24476(gp)
    755c:	e0bff417 	ldw	r2,-48(fp)
    7560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7564:	e0bff717 	ldw	r2,-36(fp)
    7568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    756c:	e0bff517 	ldw	r2,-44(fp)
    7570:	e0fffc17 	ldw	r3,-16(fp)
    7574:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    7578:	e0bff517 	ldw	r2,-44(fp)
    757c:	e0fffb03 	ldbu	r3,-20(fp)
    7580:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    7584:	e0bff517 	ldw	r2,-44(fp)
    7588:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    758c:	e0bff517 	ldw	r2,-44(fp)
    7590:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    7594:	e0bff517 	ldw	r2,-44(fp)
    7598:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    759c:	e0bff517 	ldw	r2,-44(fp)
    75a0:	e0c00317 	ldw	r3,12(fp)
    75a4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    75a8:	e0bff517 	ldw	r2,-44(fp)
    75ac:	e0c00217 	ldw	r3,8(fp)
    75b0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    75b4:	e0bff517 	ldw	r2,-44(fp)
    75b8:	e0fffd17 	ldw	r3,-12(fp)
    75bc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    75c0:	e0bff517 	ldw	r2,-44(fp)
    75c4:	e0ffff0b 	ldhu	r3,-4(fp)
    75c8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    75cc:	e0bff517 	ldw	r2,-44(fp)
    75d0:	e0fffe0b 	ldhu	r3,-8(fp)
    75d4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    75d8:	e0bff517 	ldw	r2,-44(fp)
    75dc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    75e0:	e0bffb03 	ldbu	r2,-20(fp)
    75e4:	1004d0fa 	srli	r2,r2,3
    75e8:	1007883a 	mov	r3,r2
    75ec:	e0bff517 	ldw	r2,-44(fp)
    75f0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    75f4:	e0bffb03 	ldbu	r2,-20(fp)
    75f8:	108001cc 	andi	r2,r2,7
    75fc:	1007883a 	mov	r3,r2
    7600:	e0bff517 	ldw	r2,-44(fp)
    7604:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    7608:	e0bff517 	ldw	r2,-44(fp)
    760c:	10800d03 	ldbu	r2,52(r2)
    7610:	10803fcc 	andi	r2,r2,255
    7614:	00c00044 	movi	r3,1
    7618:	1884983a 	sll	r2,r3,r2
    761c:	1007883a 	mov	r3,r2
    7620:	e0bff517 	ldw	r2,-44(fp)
    7624:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    7628:	e0bff517 	ldw	r2,-44(fp)
    762c:	10800cc3 	ldbu	r2,51(r2)
    7630:	10803fcc 	andi	r2,r2,255
    7634:	00c00044 	movi	r3,1
    7638:	1884983a 	sll	r2,r3,r2
    763c:	1007883a 	mov	r3,r2
    7640:	e0bff517 	ldw	r2,-44(fp)
    7644:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    7648:	e0bff517 	ldw	r2,-44(fp)
    764c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    7650:	e0bff517 	ldw	r2,-44(fp)
    7654:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    7658:	e0bff517 	ldw	r2,-44(fp)
    765c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    7660:	e0bff517 	ldw	r2,-44(fp)
    7664:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    7668:	e0bff517 	ldw	r2,-44(fp)
    766c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    7670:	e0bff517 	ldw	r2,-44(fp)
    7674:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    7678:	e0bff517 	ldw	r2,-44(fp)
    767c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    7680:	e0bff517 	ldw	r2,-44(fp)
    7684:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    7688:	e0bff517 	ldw	r2,-44(fp)
    768c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    7690:	e0bff517 	ldw	r2,-44(fp)
    7694:	00c00fc4 	movi	r3,63
    7698:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    769c:	e0bff517 	ldw	r2,-44(fp)
    76a0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    76a4:	e13ff517 	ldw	r4,-44(fp)
    76a8:	0010a800 	call	10a80 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    76ac:	e13ff517 	ldw	r4,-44(fp)
    76b0:	00109980 	call	10998 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    76b4:	0005303a 	rdctl	r2,status
    76b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    76bc:	e0fff817 	ldw	r3,-32(fp)
    76c0:	00bfff84 	movi	r2,-2
    76c4:	1884703a 	and	r2,r3,r2
    76c8:	1001703a 	wrctl	status,r2
  
  return context;
    76cc:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    76d0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    76d4:	e0fffb03 	ldbu	r3,-20(fp)
    76d8:	008000b4 	movhi	r2,2
    76dc:	1089b404 	addi	r2,r2,9936
    76e0:	18c7883a 	add	r3,r3,r3
    76e4:	18c7883a 	add	r3,r3,r3
    76e8:	10c5883a 	add	r2,r2,r3
    76ec:	e0fff517 	ldw	r3,-44(fp)
    76f0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    76f4:	d0e81517 	ldw	r3,-24492(gp)
    76f8:	e0bff517 	ldw	r2,-44(fp)
    76fc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    7700:	e0bff517 	ldw	r2,-44(fp)
    7704:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    7708:	d0a81517 	ldw	r2,-24492(gp)
    770c:	10000326 	beq	r2,zero,771c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    7710:	d0a81517 	ldw	r2,-24492(gp)
    7714:	e0fff517 	ldw	r3,-44(fp)
    7718:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    771c:	e0bff517 	ldw	r2,-44(fp)
    7720:	d0a81515 	stw	r2,-24492(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    7724:	e0bff517 	ldw	r2,-44(fp)
    7728:	10c00d83 	ldbu	r3,54(r2)
    772c:	d0a81e03 	ldbu	r2,-24456(gp)
    7730:	1884b03a 	or	r2,r3,r2
    7734:	d0a81e05 	stb	r2,-24456(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7738:	e0bff517 	ldw	r2,-44(fp)
    773c:	10800d03 	ldbu	r2,52(r2)
    7740:	10c03fcc 	andi	r3,r2,255
    7744:	e0bff517 	ldw	r2,-44(fp)
    7748:	10800d03 	ldbu	r2,52(r2)
    774c:	11003fcc 	andi	r4,r2,255
    7750:	d0a81e44 	addi	r2,gp,-24455
    7754:	2085883a 	add	r2,r4,r2
    7758:	11000003 	ldbu	r4,0(r2)
    775c:	e0bff517 	ldw	r2,-44(fp)
    7760:	10800d43 	ldbu	r2,53(r2)
    7764:	2084b03a 	or	r2,r4,r2
    7768:	1009883a 	mov	r4,r2
    776c:	d0a81e44 	addi	r2,gp,-24455
    7770:	1885883a 	add	r2,r3,r2
    7774:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    7778:	d0a81a43 	ldbu	r2,-24471(gp)
    777c:	10800044 	addi	r2,r2,1
    7780:	d0a81a45 	stb	r2,-24471(gp)
    7784:	e0bff417 	ldw	r2,-48(fp)
    7788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    778c:	e0bff917 	ldw	r2,-28(fp)
    7790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    7794:	0005883a 	mov	r2,zero
    7798:	00000506 	br	77b0 <OS_TCBInit+0x2c0>
    779c:	e0bff417 	ldw	r2,-48(fp)
    77a0:	e0bffa15 	stw	r2,-24(fp)
    77a4:	e0bffa17 	ldw	r2,-24(fp)
    77a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    77ac:	00801084 	movi	r2,66
}
    77b0:	e037883a 	mov	sp,fp
    77b4:	dfc00117 	ldw	ra,4(sp)
    77b8:	df000017 	ldw	fp,0(sp)
    77bc:	dec00204 	addi	sp,sp,8
    77c0:	f800283a 	ret

000077c4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    77c4:	defffe04 	addi	sp,sp,-8
    77c8:	df000115 	stw	fp,4(sp)
    77cc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    77d0:	d0a01d04 	addi	r2,gp,-32652
    77d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    77d8:	d0a01e04 	addi	r2,gp,-32648
    77dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    77e0:	d0a01f84 	addi	r2,gp,-32642
    77e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    77e8:	d0a02004 	addi	r2,gp,-32640
    77ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    77f0:	d0a01f04 	addi	r2,gp,-32644
    77f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    77f8:	d0a02084 	addi	r2,gp,-32638
    77fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    7800:	d0a02104 	addi	r2,gp,-32636
    7804:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    7808:	d0a02184 	addi	r2,gp,-32634
    780c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    7810:	d0a02204 	addi	r2,gp,-32632
    7814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    7818:	d0a02284 	addi	r2,gp,-32630
    781c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    7820:	d0a02304 	addi	r2,gp,-32628
    7824:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    7828:	d0a02384 	addi	r2,gp,-32626
    782c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    7830:	d0a02404 	addi	r2,gp,-32624
    7834:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    7838:	d0a02484 	addi	r2,gp,-32622
    783c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    7840:	d0a02504 	addi	r2,gp,-32620
    7844:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    7848:	d0a02584 	addi	r2,gp,-32618
    784c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    7850:	d0a02604 	addi	r2,gp,-32616
    7854:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    7858:	d0a02684 	addi	r2,gp,-32614
    785c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    7860:	d0a02704 	addi	r2,gp,-32612
    7864:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    7868:	d0a02784 	addi	r2,gp,-32610
    786c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    7870:	d0a02804 	addi	r2,gp,-32608
    7874:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    7878:	d0a02884 	addi	r2,gp,-32606
    787c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    7880:	d0a02904 	addi	r2,gp,-32604
    7884:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    7888:	d0a02984 	addi	r2,gp,-32602
    788c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    7890:	d0a02a04 	addi	r2,gp,-32600
    7894:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    7898:	d0a02a84 	addi	r2,gp,-32598
    789c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    78a0:	d0a02b04 	addi	r2,gp,-32596
    78a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    78a8:	d0a02b84 	addi	r2,gp,-32594
    78ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    78b0:	d0a02c04 	addi	r2,gp,-32592
    78b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    78b8:	d0a02c84 	addi	r2,gp,-32590
    78bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    78c0:	d0a02d04 	addi	r2,gp,-32588
    78c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    78c8:	d0a02d84 	addi	r2,gp,-32586
    78cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    78d0:	d0a02e04 	addi	r2,gp,-32584
    78d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    78d8:	d0a02e84 	addi	r2,gp,-32582
    78dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    78e0:	d0a02f04 	addi	r2,gp,-32580
    78e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    78e8:	d0a02f84 	addi	r2,gp,-32578
    78ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    78f0:	d0a03004 	addi	r2,gp,-32576
    78f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    78f8:	d0a03084 	addi	r2,gp,-32574
    78fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    7900:	d0a03104 	addi	r2,gp,-32572
    7904:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    7908:	d0a03184 	addi	r2,gp,-32570
    790c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    7910:	d0a03204 	addi	r2,gp,-32568
    7914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    7918:	d0a03284 	addi	r2,gp,-32566
    791c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    7920:	d0a03304 	addi	r2,gp,-32564
    7924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    7928:	d0a03384 	addi	r2,gp,-32562
    792c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    7930:	d0a03404 	addi	r2,gp,-32560
    7934:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    7938:	d0a03904 	addi	r2,gp,-32540
    793c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    7940:	e037883a 	mov	sp,fp
    7944:	df000017 	ldw	fp,0(sp)
    7948:	dec00104 	addi	sp,sp,4
    794c:	f800283a 	ret

00007950 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    7950:	defff204 	addi	sp,sp,-56
    7954:	df000d15 	stw	fp,52(sp)
    7958:	df000d04 	addi	fp,sp,52
    795c:	e13ffc15 	stw	r4,-16(fp)
    7960:	2807883a 	mov	r3,r5
    7964:	3005883a 	mov	r2,r6
    7968:	e1ffff15 	stw	r7,-4(fp)
    796c:	e0fffd0d 	sth	r3,-12(fp)
    7970:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7974:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7978:	e0bfff17 	ldw	r2,-4(fp)
    797c:	1000021e 	bne	r2,zero,7988 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    7980:	0005883a 	mov	r2,zero
    7984:	0000b006 	br	7c48 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7988:	e0bffc17 	ldw	r2,-16(fp)
    798c:	1000051e 	bne	r2,zero,79a4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7990:	e0bfff17 	ldw	r2,-4(fp)
    7994:	00c01b84 	movi	r3,110
    7998:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    799c:	0005883a 	mov	r2,zero
    79a0:	0000a906 	br	7c48 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    79a4:	e0bffc17 	ldw	r2,-16(fp)
    79a8:	10800003 	ldbu	r2,0(r2)
    79ac:	10803fcc 	andi	r2,r2,255
    79b0:	10800160 	cmpeqi	r2,r2,5
    79b4:	1000051e 	bne	r2,zero,79cc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    79b8:	e0bfff17 	ldw	r2,-4(fp)
    79bc:	00c00044 	movi	r3,1
    79c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    79c4:	0005883a 	mov	r2,zero
    79c8:	00009f06 	br	7c48 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    79cc:	e0fffe03 	ldbu	r3,-8(fp)
    79d0:	00bfe004 	movi	r2,-128
    79d4:	1884703a 	and	r2,r3,r2
    79d8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    79dc:	e0bff503 	ldbu	r2,-44(fp)
    79e0:	10000626 	beq	r2,zero,79fc <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    79e4:	e0bffe03 	ldbu	r2,-8(fp)
    79e8:	10801fcc 	andi	r2,r2,127
    79ec:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    79f0:	00800044 	movi	r2,1
    79f4:	e0bff385 	stb	r2,-50(fp)
    79f8:	00000106 	br	7a00 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    79fc:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    7a00:	e0bfff17 	ldw	r2,-4(fp)
    7a04:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a08:	0005303a 	rdctl	r2,status
    7a0c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a10:	e0fff617 	ldw	r3,-40(fp)
    7a14:	00bfff84 	movi	r2,-2
    7a18:	1884703a 	and	r2,r3,r2
    7a1c:	1001703a 	wrctl	status,r2
  
  return context;
    7a20:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    7a24:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    7a28:	e0bffe03 	ldbu	r2,-8(fp)
    7a2c:	10c00060 	cmpeqi	r3,r2,1
    7a30:	18005f1e 	bne	r3,zero,7bb0 <OSFlagAccept+0x260>
    7a34:	10c00088 	cmpgei	r3,r2,2
    7a38:	1800021e 	bne	r3,zero,7a44 <OSFlagAccept+0xf4>
    7a3c:	10003f26 	beq	r2,zero,7b3c <OSFlagAccept+0x1ec>
    7a40:	00007706 	br	7c20 <OSFlagAccept+0x2d0>
    7a44:	10c000a0 	cmpeqi	r3,r2,2
    7a48:	1800031e 	bne	r3,zero,7a58 <OSFlagAccept+0x108>
    7a4c:	108000e0 	cmpeqi	r2,r2,3
    7a50:	10001e1e 	bne	r2,zero,7acc <OSFlagAccept+0x17c>
    7a54:	00007206 	br	7c20 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    7a58:	e0bffc17 	ldw	r2,-16(fp)
    7a5c:	10c0020b 	ldhu	r3,8(r2)
    7a60:	e0bffd0b 	ldhu	r2,-12(fp)
    7a64:	1884703a 	and	r2,r3,r2
    7a68:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7a6c:	e0fff30b 	ldhu	r3,-52(fp)
    7a70:	e0bffd0b 	ldhu	r2,-12(fp)
    7a74:	18800d1e 	bne	r3,r2,7aac <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7a78:	e0bff383 	ldbu	r2,-50(fp)
    7a7c:	10800058 	cmpnei	r2,r2,1
    7a80:	10000d1e 	bne	r2,zero,7ab8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    7a84:	e0bffc17 	ldw	r2,-16(fp)
    7a88:	1080020b 	ldhu	r2,8(r2)
    7a8c:	1007883a 	mov	r3,r2
    7a90:	e0bff30b 	ldhu	r2,-52(fp)
    7a94:	0084303a 	nor	r2,zero,r2
    7a98:	1884703a 	and	r2,r3,r2
    7a9c:	1007883a 	mov	r3,r2
    7aa0:	e0bffc17 	ldw	r2,-16(fp)
    7aa4:	10c0020d 	sth	r3,8(r2)
    7aa8:	00000306 	br	7ab8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7aac:	e0bfff17 	ldw	r2,-4(fp)
    7ab0:	00c01c04 	movi	r3,112
    7ab4:	10c00005 	stb	r3,0(r2)
    7ab8:	e0bff417 	ldw	r2,-48(fp)
    7abc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ac0:	e0bff717 	ldw	r2,-36(fp)
    7ac4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7ac8:	00005e06 	br	7c44 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    7acc:	e0bffc17 	ldw	r2,-16(fp)
    7ad0:	10c0020b 	ldhu	r3,8(r2)
    7ad4:	e0bffd0b 	ldhu	r2,-12(fp)
    7ad8:	1884703a 	and	r2,r3,r2
    7adc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    7ae0:	e0bff30b 	ldhu	r2,-52(fp)
    7ae4:	10000d26 	beq	r2,zero,7b1c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7ae8:	e0bff383 	ldbu	r2,-50(fp)
    7aec:	10800058 	cmpnei	r2,r2,1
    7af0:	10000d1e 	bne	r2,zero,7b28 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    7af4:	e0bffc17 	ldw	r2,-16(fp)
    7af8:	1080020b 	ldhu	r2,8(r2)
    7afc:	1007883a 	mov	r3,r2
    7b00:	e0bff30b 	ldhu	r2,-52(fp)
    7b04:	0084303a 	nor	r2,zero,r2
    7b08:	1884703a 	and	r2,r3,r2
    7b0c:	1007883a 	mov	r3,r2
    7b10:	e0bffc17 	ldw	r2,-16(fp)
    7b14:	10c0020d 	sth	r3,8(r2)
    7b18:	00000306 	br	7b28 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7b1c:	e0bfff17 	ldw	r2,-4(fp)
    7b20:	00c01c04 	movi	r3,112
    7b24:	10c00005 	stb	r3,0(r2)
    7b28:	e0bff417 	ldw	r2,-48(fp)
    7b2c:	e0bff815 	stw	r2,-32(fp)
    7b30:	e0bff817 	ldw	r2,-32(fp)
    7b34:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7b38:	00004206 	br	7c44 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    7b3c:	e0bffc17 	ldw	r2,-16(fp)
    7b40:	1080020b 	ldhu	r2,8(r2)
    7b44:	0084303a 	nor	r2,zero,r2
    7b48:	1007883a 	mov	r3,r2
    7b4c:	e0bffd0b 	ldhu	r2,-12(fp)
    7b50:	1884703a 	and	r2,r3,r2
    7b54:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7b58:	e0fff30b 	ldhu	r3,-52(fp)
    7b5c:	e0bffd0b 	ldhu	r2,-12(fp)
    7b60:	18800b1e 	bne	r3,r2,7b90 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7b64:	e0bff383 	ldbu	r2,-50(fp)
    7b68:	10800058 	cmpnei	r2,r2,1
    7b6c:	10000b1e 	bne	r2,zero,7b9c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7b70:	e0bffc17 	ldw	r2,-16(fp)
    7b74:	10c0020b 	ldhu	r3,8(r2)
    7b78:	e0bff30b 	ldhu	r2,-52(fp)
    7b7c:	1884b03a 	or	r2,r3,r2
    7b80:	1007883a 	mov	r3,r2
    7b84:	e0bffc17 	ldw	r2,-16(fp)
    7b88:	10c0020d 	sth	r3,8(r2)
    7b8c:	00000306 	br	7b9c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7b90:	e0bfff17 	ldw	r2,-4(fp)
    7b94:	00c01c04 	movi	r3,112
    7b98:	10c00005 	stb	r3,0(r2)
    7b9c:	e0bff417 	ldw	r2,-48(fp)
    7ba0:	e0bff915 	stw	r2,-28(fp)
    7ba4:	e0bff917 	ldw	r2,-28(fp)
    7ba8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7bac:	00002506 	br	7c44 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7bb0:	e0bffc17 	ldw	r2,-16(fp)
    7bb4:	1080020b 	ldhu	r2,8(r2)
    7bb8:	0084303a 	nor	r2,zero,r2
    7bbc:	1007883a 	mov	r3,r2
    7bc0:	e0bffd0b 	ldhu	r2,-12(fp)
    7bc4:	1884703a 	and	r2,r3,r2
    7bc8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    7bcc:	e0bff30b 	ldhu	r2,-52(fp)
    7bd0:	10000b26 	beq	r2,zero,7c00 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7bd4:	e0bff383 	ldbu	r2,-50(fp)
    7bd8:	10800058 	cmpnei	r2,r2,1
    7bdc:	10000b1e 	bne	r2,zero,7c0c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    7be0:	e0bffc17 	ldw	r2,-16(fp)
    7be4:	10c0020b 	ldhu	r3,8(r2)
    7be8:	e0bff30b 	ldhu	r2,-52(fp)
    7bec:	1884b03a 	or	r2,r3,r2
    7bf0:	1007883a 	mov	r3,r2
    7bf4:	e0bffc17 	ldw	r2,-16(fp)
    7bf8:	10c0020d 	sth	r3,8(r2)
    7bfc:	00000306 	br	7c0c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7c00:	e0bfff17 	ldw	r2,-4(fp)
    7c04:	00c01c04 	movi	r3,112
    7c08:	10c00005 	stb	r3,0(r2)
    7c0c:	e0bff417 	ldw	r2,-48(fp)
    7c10:	e0bffa15 	stw	r2,-24(fp)
    7c14:	e0bffa17 	ldw	r2,-24(fp)
    7c18:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7c1c:	00000906 	br	7c44 <OSFlagAccept+0x2f4>
    7c20:	e0bff417 	ldw	r2,-48(fp)
    7c24:	e0bffb15 	stw	r2,-20(fp)
    7c28:	e0bffb17 	ldw	r2,-20(fp)
    7c2c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    7c30:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    7c34:	e0bfff17 	ldw	r2,-4(fp)
    7c38:	00c01bc4 	movi	r3,111
    7c3c:	10c00005 	stb	r3,0(r2)
             break;
    7c40:	0001883a 	nop
    }
    return (flags_rdy);
    7c44:	e0bff30b 	ldhu	r2,-52(fp)
}
    7c48:	e037883a 	mov	sp,fp
    7c4c:	df000017 	ldw	fp,0(sp)
    7c50:	dec00104 	addi	sp,sp,4
    7c54:	f800283a 	ret

00007c58 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    7c58:	defff804 	addi	sp,sp,-32
    7c5c:	df000715 	stw	fp,28(sp)
    7c60:	df000704 	addi	fp,sp,28
    7c64:	2005883a 	mov	r2,r4
    7c68:	e17fff15 	stw	r5,-4(fp)
    7c6c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    7c70:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    7c74:	e0bfff17 	ldw	r2,-4(fp)
    7c78:	1000021e 	bne	r2,zero,7c84 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    7c7c:	0005883a 	mov	r2,zero
    7c80:	00003b06 	br	7d70 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    7c84:	00800074 	movhi	r2,1
    7c88:	10952c04 	addi	r2,r2,21680
    7c8c:	10800003 	ldbu	r2,0(r2)
    7c90:	10803fcc 	andi	r2,r2,255
    7c94:	10000526 	beq	r2,zero,7cac <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    7c98:	e0bfff17 	ldw	r2,-4(fp)
    7c9c:	00c00404 	movi	r3,16
    7ca0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    7ca4:	0005883a 	mov	r2,zero
    7ca8:	00003106 	br	7d70 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7cac:	0005303a 	rdctl	r2,status
    7cb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7cb4:	e0fffb17 	ldw	r3,-20(fp)
    7cb8:	00bfff84 	movi	r2,-2
    7cbc:	1884703a 	and	r2,r3,r2
    7cc0:	1001703a 	wrctl	status,r2
  
  return context;
    7cc4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    7cc8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    7ccc:	00800074 	movhi	r2,1
    7cd0:	10952f04 	addi	r2,r2,21692
    7cd4:	10800017 	ldw	r2,0(r2)
    7cd8:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    7cdc:	e0bffa17 	ldw	r2,-24(fp)
    7ce0:	10001b26 	beq	r2,zero,7d50 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    7ce4:	00800074 	movhi	r2,1
    7ce8:	10952f04 	addi	r2,r2,21692
    7cec:	10800017 	ldw	r2,0(r2)
    7cf0:	10c00117 	ldw	r3,4(r2)
    7cf4:	00800074 	movhi	r2,1
    7cf8:	10952f04 	addi	r2,r2,21692
    7cfc:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    7d00:	e0bffa17 	ldw	r2,-24(fp)
    7d04:	00c00144 	movi	r3,5
    7d08:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    7d0c:	e0bffa17 	ldw	r2,-24(fp)
    7d10:	e0fffe0b 	ldhu	r3,-8(fp)
    7d14:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    7d18:	e0bffa17 	ldw	r2,-24(fp)
    7d1c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    7d20:	e0bffa17 	ldw	r2,-24(fp)
    7d24:	00c00fc4 	movi	r3,63
    7d28:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7d2c:	e0bffa17 	ldw	r2,-24(fp)
    7d30:	100002c5 	stb	zero,11(r2)
    7d34:	e0bff917 	ldw	r2,-28(fp)
    7d38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d3c:	e0bffc17 	ldw	r2,-16(fp)
    7d40:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    7d44:	e0bfff17 	ldw	r2,-4(fp)
    7d48:	10000005 	stb	zero,0(r2)
    7d4c:	00000706 	br	7d6c <OSFlagCreate+0x114>
    7d50:	e0bff917 	ldw	r2,-28(fp)
    7d54:	e0bffd15 	stw	r2,-12(fp)
    7d58:	e0bffd17 	ldw	r2,-12(fp)
    7d5c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    7d60:	e0bfff17 	ldw	r2,-4(fp)
    7d64:	00c01c84 	movi	r3,114
    7d68:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    7d6c:	e0bffa17 	ldw	r2,-24(fp)
}
    7d70:	e037883a 	mov	sp,fp
    7d74:	df000017 	ldw	fp,0(sp)
    7d78:	dec00104 	addi	sp,sp,4
    7d7c:	f800283a 	ret

00007d80 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    7d80:	defff204 	addi	sp,sp,-56
    7d84:	dfc00d15 	stw	ra,52(sp)
    7d88:	df000c15 	stw	fp,48(sp)
    7d8c:	df000c04 	addi	fp,sp,48
    7d90:	e13ffd15 	stw	r4,-12(fp)
    7d94:	2805883a 	mov	r2,r5
    7d98:	e1bfff15 	stw	r6,-4(fp)
    7d9c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7da0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7da4:	e0bfff17 	ldw	r2,-4(fp)
    7da8:	1000021e 	bne	r2,zero,7db4 <OSFlagDel+0x34>
        return (pgrp);
    7dac:	e0bffd17 	ldw	r2,-12(fp)
    7db0:	00008a06 	br	7fdc <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7db4:	e0bffd17 	ldw	r2,-12(fp)
    7db8:	1000051e 	bne	r2,zero,7dd0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7dbc:	e0bfff17 	ldw	r2,-4(fp)
    7dc0:	00c01b84 	movi	r3,110
    7dc4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7dc8:	e0bffd17 	ldw	r2,-12(fp)
    7dcc:	00008306 	br	7fdc <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7dd0:	00800074 	movhi	r2,1
    7dd4:	10952c04 	addi	r2,r2,21680
    7dd8:	10800003 	ldbu	r2,0(r2)
    7ddc:	10803fcc 	andi	r2,r2,255
    7de0:	10000526 	beq	r2,zero,7df8 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7de4:	e0bfff17 	ldw	r2,-4(fp)
    7de8:	00c003c4 	movi	r3,15
    7dec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7df0:	e0bffd17 	ldw	r2,-12(fp)
    7df4:	00007906 	br	7fdc <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    7df8:	e0bffd17 	ldw	r2,-12(fp)
    7dfc:	10800003 	ldbu	r2,0(r2)
    7e00:	10803fcc 	andi	r2,r2,255
    7e04:	10800160 	cmpeqi	r2,r2,5
    7e08:	1000051e 	bne	r2,zero,7e20 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    7e0c:	e0bfff17 	ldw	r2,-4(fp)
    7e10:	00c00044 	movi	r3,1
    7e14:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7e18:	e0bffd17 	ldw	r2,-12(fp)
    7e1c:	00006f06 	br	7fdc <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e20:	0005303a 	rdctl	r2,status
    7e24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e28:	e0fff817 	ldw	r3,-32(fp)
    7e2c:	00bfff84 	movi	r2,-2
    7e30:	1884703a 	and	r2,r3,r2
    7e34:	1001703a 	wrctl	status,r2
  
  return context;
    7e38:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7e3c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    7e40:	e0bffd17 	ldw	r2,-12(fp)
    7e44:	10800117 	ldw	r2,4(r2)
    7e48:	10000326 	beq	r2,zero,7e58 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7e4c:	00800044 	movi	r2,1
    7e50:	e0bff405 	stb	r2,-48(fp)
    7e54:	00000106 	br	7e5c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7e58:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    7e5c:	e0bffe03 	ldbu	r2,-8(fp)
    7e60:	10000326 	beq	r2,zero,7e70 <OSFlagDel+0xf0>
    7e64:	10800060 	cmpeqi	r2,r2,1
    7e68:	1000271e 	bne	r2,zero,7f08 <OSFlagDel+0x188>
    7e6c:	00005006 	br	7fb0 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    7e70:	e0bff403 	ldbu	r2,-48(fp)
    7e74:	10001a1e 	bne	r2,zero,7ee0 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    7e78:	e0bffd17 	ldw	r2,-12(fp)
    7e7c:	00c00fc4 	movi	r3,63
    7e80:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7e84:	e0bffd17 	ldw	r2,-12(fp)
    7e88:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7e8c:	e0bffd17 	ldw	r2,-12(fp)
    7e90:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    7e94:	00800074 	movhi	r2,1
    7e98:	10952f04 	addi	r2,r2,21692
    7e9c:	10c00017 	ldw	r3,0(r2)
    7ea0:	e0bffd17 	ldw	r2,-12(fp)
    7ea4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7ea8:	e0bffd17 	ldw	r2,-12(fp)
    7eac:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    7eb0:	00800074 	movhi	r2,1
    7eb4:	10952f04 	addi	r2,r2,21692
    7eb8:	e0fffd17 	ldw	r3,-12(fp)
    7ebc:	10c00015 	stw	r3,0(r2)
    7ec0:	e0bff717 	ldw	r2,-36(fp)
    7ec4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ec8:	e0bff917 	ldw	r2,-28(fp)
    7ecc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    7ed0:	e0bfff17 	ldw	r2,-4(fp)
    7ed4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    7ed8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    7edc:	00003e06 	br	7fd8 <OSFlagDel+0x258>
    7ee0:	e0bff717 	ldw	r2,-36(fp)
    7ee4:	e0bffa15 	stw	r2,-24(fp)
    7ee8:	e0bffa17 	ldw	r2,-24(fp)
    7eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    7ef0:	e0bfff17 	ldw	r2,-4(fp)
    7ef4:	00c01244 	movi	r3,73
    7ef8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    7efc:	e0bffd17 	ldw	r2,-12(fp)
    7f00:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    7f04:	00003406 	br	7fd8 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7f08:	e0bffd17 	ldw	r2,-12(fp)
    7f0c:	10800117 	ldw	r2,4(r2)
    7f10:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    7f14:	00000606 	br	7f30 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    7f18:	e13ff517 	ldw	r4,-44(fp)
    7f1c:	000b883a 	mov	r5,zero
    7f20:	0008fbc0 	call	8fbc <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7f24:	e0bff517 	ldw	r2,-44(fp)
    7f28:	10800017 	ldw	r2,0(r2)
    7f2c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    7f30:	e0bff517 	ldw	r2,-44(fp)
    7f34:	103ff81e 	bne	r2,zero,7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    7f38:	e0bffd17 	ldw	r2,-12(fp)
    7f3c:	00c00fc4 	movi	r3,63
    7f40:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7f44:	e0bffd17 	ldw	r2,-12(fp)
    7f48:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7f4c:	e0bffd17 	ldw	r2,-12(fp)
    7f50:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    7f54:	00800074 	movhi	r2,1
    7f58:	10952f04 	addi	r2,r2,21692
    7f5c:	10c00017 	ldw	r3,0(r2)
    7f60:	e0bffd17 	ldw	r2,-12(fp)
    7f64:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7f68:	e0bffd17 	ldw	r2,-12(fp)
    7f6c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    7f70:	00800074 	movhi	r2,1
    7f74:	10952f04 	addi	r2,r2,21692
    7f78:	e0fffd17 	ldw	r3,-12(fp)
    7f7c:	10c00015 	stw	r3,0(r2)
    7f80:	e0bff717 	ldw	r2,-36(fp)
    7f84:	e0bffb15 	stw	r2,-20(fp)
    7f88:	e0bffb17 	ldw	r2,-20(fp)
    7f8c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7f90:	e0bff403 	ldbu	r2,-48(fp)
    7f94:	10800058 	cmpnei	r2,r2,1
    7f98:	1000011e 	bne	r2,zero,7fa0 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7f9c:	00070ec0 	call	70ec <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    7fa0:	e0bfff17 	ldw	r2,-4(fp)
    7fa4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    7fa8:	e03ff615 	stw	zero,-40(fp)
             break;
    7fac:	00000a06 	br	7fd8 <OSFlagDel+0x258>
    7fb0:	e0bff717 	ldw	r2,-36(fp)
    7fb4:	e0bffc15 	stw	r2,-16(fp)
    7fb8:	e0bffc17 	ldw	r2,-16(fp)
    7fbc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    7fc0:	e0bfff17 	ldw	r2,-4(fp)
    7fc4:	00c001c4 	movi	r3,7
    7fc8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    7fcc:	e0bffd17 	ldw	r2,-12(fp)
    7fd0:	e0bff615 	stw	r2,-40(fp)
             break;
    7fd4:	0001883a 	nop
    }
    return (pgrp_return);
    7fd8:	e0bff617 	ldw	r2,-40(fp)
}
    7fdc:	e037883a 	mov	sp,fp
    7fe0:	dfc00117 	ldw	ra,4(sp)
    7fe4:	df000017 	ldw	fp,0(sp)
    7fe8:	dec00204 	addi	sp,sp,8
    7fec:	f800283a 	ret

00007ff0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7ff0:	defff604 	addi	sp,sp,-40
    7ff4:	dfc00915 	stw	ra,36(sp)
    7ff8:	df000815 	stw	fp,32(sp)
    7ffc:	df000804 	addi	fp,sp,32
    8000:	e13ffd15 	stw	r4,-12(fp)
    8004:	e17ffe15 	stw	r5,-8(fp)
    8008:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    800c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8010:	e0bfff17 	ldw	r2,-4(fp)
    8014:	1000021e 	bne	r2,zero,8020 <OSFlagNameGet+0x30>
        return (0);
    8018:	0005883a 	mov	r2,zero
    801c:	00003b06 	br	810c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    8020:	e0bffd17 	ldw	r2,-12(fp)
    8024:	1000051e 	bne	r2,zero,803c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8028:	e0bfff17 	ldw	r2,-4(fp)
    802c:	00c01b84 	movi	r3,110
    8030:	10c00005 	stb	r3,0(r2)
        return (0);
    8034:	0005883a 	mov	r2,zero
    8038:	00003406 	br	810c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    803c:	e0bffe17 	ldw	r2,-8(fp)
    8040:	1000051e 	bne	r2,zero,8058 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    8044:	e0bfff17 	ldw	r2,-4(fp)
    8048:	00c00304 	movi	r3,12
    804c:	10c00005 	stb	r3,0(r2)
        return (0);
    8050:	0005883a 	mov	r2,zero
    8054:	00002d06 	br	810c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8058:	00800074 	movhi	r2,1
    805c:	10952c04 	addi	r2,r2,21680
    8060:	10800003 	ldbu	r2,0(r2)
    8064:	10803fcc 	andi	r2,r2,255
    8068:	10000526 	beq	r2,zero,8080 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    806c:	e0bfff17 	ldw	r2,-4(fp)
    8070:	00c00444 	movi	r3,17
    8074:	10c00005 	stb	r3,0(r2)
        return (0);
    8078:	0005883a 	mov	r2,zero
    807c:	00002306 	br	810c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8080:	0005303a 	rdctl	r2,status
    8084:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8088:	e0fffa17 	ldw	r3,-24(fp)
    808c:	00bfff84 	movi	r2,-2
    8090:	1884703a 	and	r2,r3,r2
    8094:	1001703a 	wrctl	status,r2
  
  return context;
    8098:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    809c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    80a0:	e0bffd17 	ldw	r2,-12(fp)
    80a4:	10800003 	ldbu	r2,0(r2)
    80a8:	10803fcc 	andi	r2,r2,255
    80ac:	10800160 	cmpeqi	r2,r2,5
    80b0:	1000091e 	bne	r2,zero,80d8 <OSFlagNameGet+0xe8>
    80b4:	e0bff817 	ldw	r2,-32(fp)
    80b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    80bc:	e0bffb17 	ldw	r2,-20(fp)
    80c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    80c4:	e0bfff17 	ldw	r2,-4(fp)
    80c8:	00c00044 	movi	r3,1
    80cc:	10c00005 	stb	r3,0(r2)
        return (0);
    80d0:	0005883a 	mov	r2,zero
    80d4:	00000d06 	br	810c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    80d8:	e0bffd17 	ldw	r2,-12(fp)
    80dc:	10800284 	addi	r2,r2,10
    80e0:	e13ffe17 	ldw	r4,-8(fp)
    80e4:	100b883a 	mov	r5,r2
    80e8:	00072280 	call	7228 <OS_StrCopy>
    80ec:	e0bff905 	stb	r2,-28(fp)
    80f0:	e0bff817 	ldw	r2,-32(fp)
    80f4:	e0bffc15 	stw	r2,-16(fp)
    80f8:	e0bffc17 	ldw	r2,-16(fp)
    80fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8100:	e0bfff17 	ldw	r2,-4(fp)
    8104:	10000005 	stb	zero,0(r2)
    return (len);
    8108:	e0bff903 	ldbu	r2,-28(fp)
}
    810c:	e037883a 	mov	sp,fp
    8110:	dfc00117 	ldw	ra,4(sp)
    8114:	df000017 	ldw	fp,0(sp)
    8118:	dec00204 	addi	sp,sp,8
    811c:	f800283a 	ret

00008120 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    8120:	defff504 	addi	sp,sp,-44
    8124:	dfc00a15 	stw	ra,40(sp)
    8128:	df000915 	stw	fp,36(sp)
    812c:	df000904 	addi	fp,sp,36
    8130:	e13ffd15 	stw	r4,-12(fp)
    8134:	e17ffe15 	stw	r5,-8(fp)
    8138:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    813c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8140:	e0bfff17 	ldw	r2,-4(fp)
    8144:	1000011e 	bne	r2,zero,814c <OSFlagNameSet+0x2c>
        return;
    8148:	00004406 	br	825c <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	1000041e 	bne	r2,zero,8164 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8154:	e0bfff17 	ldw	r2,-4(fp)
    8158:	00c01b84 	movi	r3,110
    815c:	10c00005 	stb	r3,0(r2)
        return;
    8160:	00003e06 	br	825c <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    8164:	e0bffe17 	ldw	r2,-8(fp)
    8168:	1000041e 	bne	r2,zero,817c <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    816c:	e0bfff17 	ldw	r2,-4(fp)
    8170:	00c00304 	movi	r3,12
    8174:	10c00005 	stb	r3,0(r2)
        return;
    8178:	00003806 	br	825c <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    817c:	00800074 	movhi	r2,1
    8180:	10952c04 	addi	r2,r2,21680
    8184:	10800003 	ldbu	r2,0(r2)
    8188:	10803fcc 	andi	r2,r2,255
    818c:	10000426 	beq	r2,zero,81a0 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    8190:	e0bfff17 	ldw	r2,-4(fp)
    8194:	00c00484 	movi	r3,18
    8198:	10c00005 	stb	r3,0(r2)
        return;
    819c:	00002f06 	br	825c <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    81a0:	0005303a 	rdctl	r2,status
    81a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    81a8:	e0fff917 	ldw	r3,-28(fp)
    81ac:	00bfff84 	movi	r2,-2
    81b0:	1884703a 	and	r2,r3,r2
    81b4:	1001703a 	wrctl	status,r2
  
  return context;
    81b8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    81bc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    81c0:	e0bffd17 	ldw	r2,-12(fp)
    81c4:	10800003 	ldbu	r2,0(r2)
    81c8:	10803fcc 	andi	r2,r2,255
    81cc:	10800160 	cmpeqi	r2,r2,5
    81d0:	1000081e 	bne	r2,zero,81f4 <OSFlagNameSet+0xd4>
    81d4:	e0bff717 	ldw	r2,-36(fp)
    81d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    81dc:	e0bffa17 	ldw	r2,-24(fp)
    81e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    81e4:	e0bfff17 	ldw	r2,-4(fp)
    81e8:	00c00044 	movi	r3,1
    81ec:	10c00005 	stb	r3,0(r2)
        return;
    81f0:	00001a06 	br	825c <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    81f4:	e13ffe17 	ldw	r4,-8(fp)
    81f8:	000729c0 	call	729c <OS_StrLen>
    81fc:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    8200:	e0bff803 	ldbu	r2,-32(fp)
    8204:	10800830 	cmpltui	r2,r2,32
    8208:	1000081e 	bne	r2,zero,822c <OSFlagNameSet+0x10c>
    820c:	e0bff717 	ldw	r2,-36(fp)
    8210:	e0bffb15 	stw	r2,-20(fp)
    8214:	e0bffb17 	ldw	r2,-20(fp)
    8218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    821c:	e0bfff17 	ldw	r2,-4(fp)
    8220:	00c01cc4 	movi	r3,115
    8224:	10c00005 	stb	r3,0(r2)
        return;
    8228:	00000c06 	br	825c <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    822c:	e0bffd17 	ldw	r2,-12(fp)
    8230:	10800284 	addi	r2,r2,10
    8234:	1009883a 	mov	r4,r2
    8238:	e17ffe17 	ldw	r5,-8(fp)
    823c:	00072280 	call	7228 <OS_StrCopy>
    8240:	e0bff717 	ldw	r2,-36(fp)
    8244:	e0bffc15 	stw	r2,-16(fp)
    8248:	e0bffc17 	ldw	r2,-16(fp)
    824c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8250:	e0bfff17 	ldw	r2,-4(fp)
    8254:	10000005 	stb	zero,0(r2)
    return;
    8258:	0001883a 	nop
}
    825c:	e037883a 	mov	sp,fp
    8260:	dfc00117 	ldw	ra,4(sp)
    8264:	df000017 	ldw	fp,0(sp)
    8268:	dec00204 	addi	sp,sp,8
    826c:	f800283a 	ret

00008270 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    8270:	deffe204 	addi	sp,sp,-120
    8274:	dfc01d15 	stw	ra,116(sp)
    8278:	df001c15 	stw	fp,112(sp)
    827c:	df001c04 	addi	fp,sp,112
    8280:	e13ffc15 	stw	r4,-16(fp)
    8284:	2809883a 	mov	r4,r5
    8288:	3007883a 	mov	r3,r6
    828c:	3805883a 	mov	r2,r7
    8290:	e13ffd0d 	sth	r4,-12(fp)
    8294:	e0fffe05 	stb	r3,-8(fp)
    8298:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    829c:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    82a0:	e0800217 	ldw	r2,8(fp)
    82a4:	1000021e 	bne	r2,zero,82b0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    82a8:	0005883a 	mov	r2,zero
    82ac:	00016706 	br	884c <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    82b0:	e0bffc17 	ldw	r2,-16(fp)
    82b4:	1000051e 	bne	r2,zero,82cc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    82b8:	e0800217 	ldw	r2,8(fp)
    82bc:	00c01b84 	movi	r3,110
    82c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    82c4:	0005883a 	mov	r2,zero
    82c8:	00016006 	br	884c <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    82cc:	00800074 	movhi	r2,1
    82d0:	10952c04 	addi	r2,r2,21680
    82d4:	10800003 	ldbu	r2,0(r2)
    82d8:	10803fcc 	andi	r2,r2,255
    82dc:	10000526 	beq	r2,zero,82f4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    82e0:	e0800217 	ldw	r2,8(fp)
    82e4:	00c00084 	movi	r3,2
    82e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    82ec:	0005883a 	mov	r2,zero
    82f0:	00015606 	br	884c <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    82f4:	00800074 	movhi	r2,1
    82f8:	10951e04 	addi	r2,r2,21624
    82fc:	10800003 	ldbu	r2,0(r2)
    8300:	10803fcc 	andi	r2,r2,255
    8304:	10000526 	beq	r2,zero,831c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    8308:	e0800217 	ldw	r2,8(fp)
    830c:	00c00344 	movi	r3,13
    8310:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8314:	0005883a 	mov	r2,zero
    8318:	00014c06 	br	884c <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    831c:	e0bffc17 	ldw	r2,-16(fp)
    8320:	10800003 	ldbu	r2,0(r2)
    8324:	10803fcc 	andi	r2,r2,255
    8328:	10800160 	cmpeqi	r2,r2,5
    832c:	1000051e 	bne	r2,zero,8344 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    8330:	e0800217 	ldw	r2,8(fp)
    8334:	00c00044 	movi	r3,1
    8338:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    833c:	0005883a 	mov	r2,zero
    8340:	00014206 	br	884c <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    8344:	e0fffe03 	ldbu	r3,-8(fp)
    8348:	00bfe004 	movi	r2,-128
    834c:	1884703a 	and	r2,r3,r2
    8350:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    8354:	e0bfe703 	ldbu	r2,-100(fp)
    8358:	10000626 	beq	r2,zero,8374 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    835c:	e0bffe03 	ldbu	r2,-8(fp)
    8360:	10801fcc 	andi	r2,r2,127
    8364:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    8368:	00800044 	movi	r2,1
    836c:	e0bfe505 	stb	r2,-108(fp)
    8370:	00000106 	br	8378 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    8374:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8378:	0005303a 	rdctl	r2,status
    837c:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8380:	e0ffe917 	ldw	r3,-92(fp)
    8384:	00bfff84 	movi	r2,-2
    8388:	1884703a 	and	r2,r3,r2
    838c:	1001703a 	wrctl	status,r2
  
  return context;
    8390:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    8394:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    8398:	e0bffe03 	ldbu	r2,-8(fp)
    839c:	10c00060 	cmpeqi	r3,r2,1
    83a0:	1800921e 	bne	r3,zero,85ec <OSFlagPend+0x37c>
    83a4:	10c00088 	cmpgei	r3,r2,2
    83a8:	1800021e 	bne	r3,zero,83b4 <OSFlagPend+0x144>
    83ac:	10006126 	beq	r2,zero,8534 <OSFlagPend+0x2c4>
    83b0:	0000bb06 	br	86a0 <OSFlagPend+0x430>
    83b4:	10c000a0 	cmpeqi	r3,r2,2
    83b8:	1800031e 	bne	r3,zero,83c8 <OSFlagPend+0x158>
    83bc:	108000e0 	cmpeqi	r2,r2,3
    83c0:	10002f1e 	bne	r2,zero,8480 <OSFlagPend+0x210>
    83c4:	0000b606 	br	86a0 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    83c8:	e0bffc17 	ldw	r2,-16(fp)
    83cc:	10c0020b 	ldhu	r3,8(r2)
    83d0:	e0bffd0b 	ldhu	r2,-12(fp)
    83d4:	1884703a 	and	r2,r3,r2
    83d8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    83dc:	e0ffe78b 	ldhu	r3,-98(fp)
    83e0:	e0bffd0b 	ldhu	r2,-12(fp)
    83e4:	1880191e 	bne	r3,r2,844c <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    83e8:	e0bfe503 	ldbu	r2,-108(fp)
    83ec:	10800058 	cmpnei	r2,r2,1
    83f0:	1000091e 	bne	r2,zero,8418 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    83f4:	e0bffc17 	ldw	r2,-16(fp)
    83f8:	1080020b 	ldhu	r2,8(r2)
    83fc:	1007883a 	mov	r3,r2
    8400:	e0bfe78b 	ldhu	r2,-98(fp)
    8404:	0084303a 	nor	r2,zero,r2
    8408:	1884703a 	and	r2,r3,r2
    840c:	1007883a 	mov	r3,r2
    8410:	e0bffc17 	ldw	r2,-16(fp)
    8414:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    8418:	00800074 	movhi	r2,1
    841c:	10952d04 	addi	r2,r2,21684
    8420:	10800017 	ldw	r2,0(r2)
    8424:	e0ffe78b 	ldhu	r3,-98(fp)
    8428:	10c00b0d 	sth	r3,44(r2)
    842c:	e0bfe617 	ldw	r2,-104(fp)
    8430:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8434:	e0bfea17 	ldw	r2,-88(fp)
    8438:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    843c:	e0800217 	ldw	r2,8(fp)
    8440:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    8444:	e0bfe78b 	ldhu	r2,-98(fp)
    8448:	00010006 	br	884c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    844c:	e1bffd0b 	ldhu	r6,-12(fp)
    8450:	e0fffe03 	ldbu	r3,-8(fp)
    8454:	e0bfff0b 	ldhu	r2,-4(fp)
    8458:	e17ff704 	addi	r5,fp,-36
    845c:	d8800015 	stw	r2,0(sp)
    8460:	e13ffc17 	ldw	r4,-16(fp)
    8464:	180f883a 	mov	r7,r3
    8468:	0008d140 	call	8d14 <OS_FlagBlock>
    846c:	e0bfe617 	ldw	r2,-104(fp)
    8470:	e0bfeb15 	stw	r2,-84(fp)
    8474:	e0bfeb17 	ldw	r2,-84(fp)
    8478:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    847c:	00009206 	br	86c8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    8480:	e0bffc17 	ldw	r2,-16(fp)
    8484:	10c0020b 	ldhu	r3,8(r2)
    8488:	e0bffd0b 	ldhu	r2,-12(fp)
    848c:	1884703a 	and	r2,r3,r2
    8490:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    8494:	e0bfe78b 	ldhu	r2,-98(fp)
    8498:	10001926 	beq	r2,zero,8500 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    849c:	e0bfe503 	ldbu	r2,-108(fp)
    84a0:	10800058 	cmpnei	r2,r2,1
    84a4:	1000091e 	bne	r2,zero,84cc <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    84a8:	e0bffc17 	ldw	r2,-16(fp)
    84ac:	1080020b 	ldhu	r2,8(r2)
    84b0:	1007883a 	mov	r3,r2
    84b4:	e0bfe78b 	ldhu	r2,-98(fp)
    84b8:	0084303a 	nor	r2,zero,r2
    84bc:	1884703a 	and	r2,r3,r2
    84c0:	1007883a 	mov	r3,r2
    84c4:	e0bffc17 	ldw	r2,-16(fp)
    84c8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    84cc:	00800074 	movhi	r2,1
    84d0:	10952d04 	addi	r2,r2,21684
    84d4:	10800017 	ldw	r2,0(r2)
    84d8:	e0ffe78b 	ldhu	r3,-98(fp)
    84dc:	10c00b0d 	sth	r3,44(r2)
    84e0:	e0bfe617 	ldw	r2,-104(fp)
    84e4:	e0bfec15 	stw	r2,-80(fp)
    84e8:	e0bfec17 	ldw	r2,-80(fp)
    84ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    84f0:	e0800217 	ldw	r2,8(fp)
    84f4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    84f8:	e0bfe78b 	ldhu	r2,-98(fp)
    84fc:	0000d306 	br	884c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    8500:	e1bffd0b 	ldhu	r6,-12(fp)
    8504:	e0fffe03 	ldbu	r3,-8(fp)
    8508:	e0bfff0b 	ldhu	r2,-4(fp)
    850c:	e17ff704 	addi	r5,fp,-36
    8510:	d8800015 	stw	r2,0(sp)
    8514:	e13ffc17 	ldw	r4,-16(fp)
    8518:	180f883a 	mov	r7,r3
    851c:	0008d140 	call	8d14 <OS_FlagBlock>
    8520:	e0bfe617 	ldw	r2,-104(fp)
    8524:	e0bfed15 	stw	r2,-76(fp)
    8528:	e0bfed17 	ldw	r2,-76(fp)
    852c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    8530:	00006506 	br	86c8 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    8534:	e0bffc17 	ldw	r2,-16(fp)
    8538:	1080020b 	ldhu	r2,8(r2)
    853c:	0084303a 	nor	r2,zero,r2
    8540:	1007883a 	mov	r3,r2
    8544:	e0bffd0b 	ldhu	r2,-12(fp)
    8548:	1884703a 	and	r2,r3,r2
    854c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    8550:	e0ffe78b 	ldhu	r3,-98(fp)
    8554:	e0bffd0b 	ldhu	r2,-12(fp)
    8558:	1880171e 	bne	r3,r2,85b8 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    855c:	e0bfe503 	ldbu	r2,-108(fp)
    8560:	10800058 	cmpnei	r2,r2,1
    8564:	1000071e 	bne	r2,zero,8584 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    8568:	e0bffc17 	ldw	r2,-16(fp)
    856c:	10c0020b 	ldhu	r3,8(r2)
    8570:	e0bfe78b 	ldhu	r2,-98(fp)
    8574:	1884b03a 	or	r2,r3,r2
    8578:	1007883a 	mov	r3,r2
    857c:	e0bffc17 	ldw	r2,-16(fp)
    8580:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    8584:	00800074 	movhi	r2,1
    8588:	10952d04 	addi	r2,r2,21684
    858c:	10800017 	ldw	r2,0(r2)
    8590:	e0ffe78b 	ldhu	r3,-98(fp)
    8594:	10c00b0d 	sth	r3,44(r2)
    8598:	e0bfe617 	ldw	r2,-104(fp)
    859c:	e0bfee15 	stw	r2,-72(fp)
    85a0:	e0bfee17 	ldw	r2,-72(fp)
    85a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    85a8:	e0800217 	ldw	r2,8(fp)
    85ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    85b0:	e0bfe78b 	ldhu	r2,-98(fp)
    85b4:	0000a506 	br	884c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    85b8:	e1bffd0b 	ldhu	r6,-12(fp)
    85bc:	e0fffe03 	ldbu	r3,-8(fp)
    85c0:	e0bfff0b 	ldhu	r2,-4(fp)
    85c4:	e17ff704 	addi	r5,fp,-36
    85c8:	d8800015 	stw	r2,0(sp)
    85cc:	e13ffc17 	ldw	r4,-16(fp)
    85d0:	180f883a 	mov	r7,r3
    85d4:	0008d140 	call	8d14 <OS_FlagBlock>
    85d8:	e0bfe617 	ldw	r2,-104(fp)
    85dc:	e0bfef15 	stw	r2,-68(fp)
    85e0:	e0bfef17 	ldw	r2,-68(fp)
    85e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    85e8:	00003706 	br	86c8 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    85ec:	e0bffc17 	ldw	r2,-16(fp)
    85f0:	1080020b 	ldhu	r2,8(r2)
    85f4:	0084303a 	nor	r2,zero,r2
    85f8:	1007883a 	mov	r3,r2
    85fc:	e0bffd0b 	ldhu	r2,-12(fp)
    8600:	1884703a 	and	r2,r3,r2
    8604:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    8608:	e0bfe78b 	ldhu	r2,-98(fp)
    860c:	10001726 	beq	r2,zero,866c <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    8610:	e0bfe503 	ldbu	r2,-108(fp)
    8614:	10800058 	cmpnei	r2,r2,1
    8618:	1000071e 	bne	r2,zero,8638 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    861c:	e0bffc17 	ldw	r2,-16(fp)
    8620:	10c0020b 	ldhu	r3,8(r2)
    8624:	e0bfe78b 	ldhu	r2,-98(fp)
    8628:	1884b03a 	or	r2,r3,r2
    862c:	1007883a 	mov	r3,r2
    8630:	e0bffc17 	ldw	r2,-16(fp)
    8634:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    8638:	00800074 	movhi	r2,1
    863c:	10952d04 	addi	r2,r2,21684
    8640:	10800017 	ldw	r2,0(r2)
    8644:	e0ffe78b 	ldhu	r3,-98(fp)
    8648:	10c00b0d 	sth	r3,44(r2)
    864c:	e0bfe617 	ldw	r2,-104(fp)
    8650:	e0bff015 	stw	r2,-64(fp)
    8654:	e0bff017 	ldw	r2,-64(fp)
    8658:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    865c:	e0800217 	ldw	r2,8(fp)
    8660:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    8664:	e0bfe78b 	ldhu	r2,-98(fp)
    8668:	00007806 	br	884c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    866c:	e1bffd0b 	ldhu	r6,-12(fp)
    8670:	e0fffe03 	ldbu	r3,-8(fp)
    8674:	e0bfff0b 	ldhu	r2,-4(fp)
    8678:	e17ff704 	addi	r5,fp,-36
    867c:	d8800015 	stw	r2,0(sp)
    8680:	e13ffc17 	ldw	r4,-16(fp)
    8684:	180f883a 	mov	r7,r3
    8688:	0008d140 	call	8d14 <OS_FlagBlock>
    868c:	e0bfe617 	ldw	r2,-104(fp)
    8690:	e0bff115 	stw	r2,-60(fp)
    8694:	e0bff117 	ldw	r2,-60(fp)
    8698:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    869c:	00000a06 	br	86c8 <OSFlagPend+0x458>
    86a0:	e0bfe617 	ldw	r2,-104(fp)
    86a4:	e0bff215 	stw	r2,-56(fp)
    86a8:	e0bff217 	ldw	r2,-56(fp)
    86ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    86b0:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    86b4:	e0800217 	ldw	r2,8(fp)
    86b8:	00c01bc4 	movi	r3,111
    86bc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    86c0:	e0bfe78b 	ldhu	r2,-98(fp)
    86c4:	00006106 	br	884c <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    86c8:	00070ec0 	call	70ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    86cc:	0005303a 	rdctl	r2,status
    86d0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    86d4:	e0fff317 	ldw	r3,-52(fp)
    86d8:	00bfff84 	movi	r2,-2
    86dc:	1884703a 	and	r2,r3,r2
    86e0:	1001703a 	wrctl	status,r2
  
  return context;
    86e4:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    86e8:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    86ec:	00800074 	movhi	r2,1
    86f0:	10952d04 	addi	r2,r2,21684
    86f4:	10800017 	ldw	r2,0(r2)
    86f8:	10800c43 	ldbu	r2,49(r2)
    86fc:	10803fcc 	andi	r2,r2,255
    8700:	10002226 	beq	r2,zero,878c <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    8704:	00800074 	movhi	r2,1
    8708:	10952d04 	addi	r2,r2,21684
    870c:	10800017 	ldw	r2,0(r2)
    8710:	10800c43 	ldbu	r2,49(r2)
    8714:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8718:	00800074 	movhi	r2,1
    871c:	10952d04 	addi	r2,r2,21684
    8720:	10800017 	ldw	r2,0(r2)
    8724:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    8728:	e0bff704 	addi	r2,fp,-36
    872c:	1009883a 	mov	r4,r2
    8730:	00090cc0 	call	90cc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    8734:	00800074 	movhi	r2,1
    8738:	10952d04 	addi	r2,r2,21684
    873c:	10800017 	ldw	r2,0(r2)
    8740:	10000c05 	stb	zero,48(r2)
    8744:	e0bfe617 	ldw	r2,-104(fp)
    8748:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    874c:	e0bff417 	ldw	r2,-48(fp)
    8750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    8754:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    8758:	e0bfe803 	ldbu	r2,-96(fp)
    875c:	108000a0 	cmpeqi	r2,r2,2
    8760:	10000426 	beq	r2,zero,8774 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    8764:	e0800217 	ldw	r2,8(fp)
    8768:	00c00384 	movi	r3,14
    876c:	10c00005 	stb	r3,0(r2)
                 break;
    8770:	00000406 	br	8784 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    8774:	e0800217 	ldw	r2,8(fp)
    8778:	00c00284 	movi	r3,10
    877c:	10c00005 	stb	r3,0(r2)
                 break;
    8780:	0001883a 	nop
        }
        return (flags_rdy);
    8784:	e0bfe78b 	ldhu	r2,-98(fp)
    8788:	00003006 	br	884c <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    878c:	00800074 	movhi	r2,1
    8790:	10952d04 	addi	r2,r2,21684
    8794:	10800017 	ldw	r2,0(r2)
    8798:	10800b0b 	ldhu	r2,44(r2)
    879c:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    87a0:	e0bfe503 	ldbu	r2,-108(fp)
    87a4:	10800058 	cmpnei	r2,r2,1
    87a8:	1000211e 	bne	r2,zero,8830 <OSFlagPend+0x5c0>
        switch (wait_type) {
    87ac:	e0bffe03 	ldbu	r2,-8(fp)
    87b0:	10001616 	blt	r2,zero,880c <OSFlagPend+0x59c>
    87b4:	10c00090 	cmplti	r3,r2,2
    87b8:	18000c1e 	bne	r3,zero,87ec <OSFlagPend+0x57c>
    87bc:	10800108 	cmpgei	r2,r2,4
    87c0:	1000121e 	bne	r2,zero,880c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    87c4:	e0bffc17 	ldw	r2,-16(fp)
    87c8:	1080020b 	ldhu	r2,8(r2)
    87cc:	1007883a 	mov	r3,r2
    87d0:	e0bfe78b 	ldhu	r2,-98(fp)
    87d4:	0084303a 	nor	r2,zero,r2
    87d8:	1884703a 	and	r2,r3,r2
    87dc:	1007883a 	mov	r3,r2
    87e0:	e0bffc17 	ldw	r2,-16(fp)
    87e4:	10c0020d 	sth	r3,8(r2)
                 break;
    87e8:	00001106 	br	8830 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    87ec:	e0bffc17 	ldw	r2,-16(fp)
    87f0:	10c0020b 	ldhu	r3,8(r2)
    87f4:	e0bfe78b 	ldhu	r2,-98(fp)
    87f8:	1884b03a 	or	r2,r3,r2
    87fc:	1007883a 	mov	r3,r2
    8800:	e0bffc17 	ldw	r2,-16(fp)
    8804:	10c0020d 	sth	r3,8(r2)
                 break;
    8808:	00000906 	br	8830 <OSFlagPend+0x5c0>
    880c:	e0bfe617 	ldw	r2,-104(fp)
    8810:	e0bff515 	stw	r2,-44(fp)
    8814:	e0bff517 	ldw	r2,-44(fp)
    8818:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    881c:	e0800217 	ldw	r2,8(fp)
    8820:	00c01bc4 	movi	r3,111
    8824:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    8828:	0005883a 	mov	r2,zero
    882c:	00000706 	br	884c <OSFlagPend+0x5dc>
    8830:	e0bfe617 	ldw	r2,-104(fp)
    8834:	e0bff615 	stw	r2,-40(fp)
    8838:	e0bff617 	ldw	r2,-40(fp)
    883c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    8840:	e0800217 	ldw	r2,8(fp)
    8844:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    8848:	e0bfe78b 	ldhu	r2,-98(fp)
}
    884c:	e037883a 	mov	sp,fp
    8850:	dfc00117 	ldw	ra,4(sp)
    8854:	df000017 	ldw	fp,0(sp)
    8858:	dec00204 	addi	sp,sp,8
    885c:	f800283a 	ret

00008860 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    8860:	defffb04 	addi	sp,sp,-20
    8864:	df000415 	stw	fp,16(sp)
    8868:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    886c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8870:	0005303a 	rdctl	r2,status
    8874:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8878:	e0fffe17 	ldw	r3,-8(fp)
    887c:	00bfff84 	movi	r2,-2
    8880:	1884703a 	and	r2,r3,r2
    8884:	1001703a 	wrctl	status,r2
  
  return context;
    8888:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    888c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    8890:	00800074 	movhi	r2,1
    8894:	10952d04 	addi	r2,r2,21684
    8898:	10800017 	ldw	r2,0(r2)
    889c:	10800b0b 	ldhu	r2,44(r2)
    88a0:	e0bffd0d 	sth	r2,-12(fp)
    88a4:	e0bffc17 	ldw	r2,-16(fp)
    88a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88ac:	e0bfff17 	ldw	r2,-4(fp)
    88b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    88b4:	e0bffd0b 	ldhu	r2,-12(fp)
}
    88b8:	e037883a 	mov	sp,fp
    88bc:	df000017 	ldw	fp,0(sp)
    88c0:	dec00104 	addi	sp,sp,4
    88c4:	f800283a 	ret

000088c8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    88c8:	deffef04 	addi	sp,sp,-68
    88cc:	dfc01015 	stw	ra,64(sp)
    88d0:	df000f15 	stw	fp,60(sp)
    88d4:	df000f04 	addi	fp,sp,60
    88d8:	e13ffc15 	stw	r4,-16(fp)
    88dc:	2807883a 	mov	r3,r5
    88e0:	3005883a 	mov	r2,r6
    88e4:	e1ffff15 	stw	r7,-4(fp)
    88e8:	e0fffd0d 	sth	r3,-12(fp)
    88ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    88f0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    88f4:	e0bfff17 	ldw	r2,-4(fp)
    88f8:	1000021e 	bne	r2,zero,8904 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    88fc:	0005883a 	mov	r2,zero
    8900:	0000ce06 	br	8c3c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    8904:	e0bffc17 	ldw	r2,-16(fp)
    8908:	1000051e 	bne	r2,zero,8920 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    890c:	e0bfff17 	ldw	r2,-4(fp)
    8910:	00c01b84 	movi	r3,110
    8914:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8918:	0005883a 	mov	r2,zero
    891c:	0000c706 	br	8c3c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    8920:	e0bffc17 	ldw	r2,-16(fp)
    8924:	10800003 	ldbu	r2,0(r2)
    8928:	10803fcc 	andi	r2,r2,255
    892c:	10800160 	cmpeqi	r2,r2,5
    8930:	1000051e 	bne	r2,zero,8948 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    8934:	e0bfff17 	ldw	r2,-4(fp)
    8938:	00c00044 	movi	r3,1
    893c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8940:	0005883a 	mov	r2,zero
    8944:	0000bd06 	br	8c3c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8948:	0005303a 	rdctl	r2,status
    894c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8950:	e0fff617 	ldw	r3,-40(fp)
    8954:	00bfff84 	movi	r2,-2
    8958:	1884703a 	and	r2,r3,r2
    895c:	1001703a 	wrctl	status,r2
  
  return context;
    8960:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    8964:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    8968:	e0bffe03 	ldbu	r2,-8(fp)
    896c:	10000326 	beq	r2,zero,897c <OSFlagPost+0xb4>
    8970:	10800060 	cmpeqi	r2,r2,1
    8974:	10000b1e 	bne	r2,zero,89a4 <OSFlagPost+0xdc>
    8978:	00001206 	br	89c4 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    897c:	e0bffc17 	ldw	r2,-16(fp)
    8980:	1080020b 	ldhu	r2,8(r2)
    8984:	1007883a 	mov	r3,r2
    8988:	e0bffd0b 	ldhu	r2,-12(fp)
    898c:	0084303a 	nor	r2,zero,r2
    8990:	1884703a 	and	r2,r3,r2
    8994:	1007883a 	mov	r3,r2
    8998:	e0bffc17 	ldw	r2,-16(fp)
    899c:	10c0020d 	sth	r3,8(r2)
             break;
    89a0:	00001106 	br	89e8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    89a4:	e0bffc17 	ldw	r2,-16(fp)
    89a8:	10c0020b 	ldhu	r3,8(r2)
    89ac:	e0bffd0b 	ldhu	r2,-12(fp)
    89b0:	1884b03a 	or	r2,r3,r2
    89b4:	1007883a 	mov	r3,r2
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	10c0020d 	sth	r3,8(r2)
             break;
    89c0:	00000906 	br	89e8 <OSFlagPost+0x120>
    89c4:	e0bff317 	ldw	r2,-52(fp)
    89c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89cc:	e0bff717 	ldw	r2,-36(fp)
    89d0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    89d4:	e0bfff17 	ldw	r2,-4(fp)
    89d8:	00c01c44 	movi	r3,113
    89dc:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    89e0:	0005883a 	mov	r2,zero
    89e4:	00009506 	br	8c3c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    89e8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    89ec:	e0bffc17 	ldw	r2,-16(fp)
    89f0:	10800117 	ldw	r2,4(r2)
    89f4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    89f8:	00007406 	br	8bcc <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    89fc:	e0bff117 	ldw	r2,-60(fp)
    8a00:	10800483 	ldbu	r2,18(r2)
    8a04:	10803fcc 	andi	r2,r2,255
    8a08:	10c00060 	cmpeqi	r3,r2,1
    8a0c:	18004d1e 	bne	r3,zero,8b44 <OSFlagPost+0x27c>
    8a10:	10c00088 	cmpgei	r3,r2,2
    8a14:	1800021e 	bne	r3,zero,8a20 <OSFlagPost+0x158>
    8a18:	10003126 	beq	r2,zero,8ae0 <OSFlagPost+0x218>
    8a1c:	00005f06 	br	8b9c <OSFlagPost+0x2d4>
    8a20:	10c000a0 	cmpeqi	r3,r2,2
    8a24:	1800031e 	bne	r3,zero,8a34 <OSFlagPost+0x16c>
    8a28:	108000e0 	cmpeqi	r2,r2,3
    8a2c:	1000181e 	bne	r2,zero,8a90 <OSFlagPost+0x1c8>
    8a30:	00005a06 	br	8b9c <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	10c0020b 	ldhu	r3,8(r2)
    8a3c:	e0bff117 	ldw	r2,-60(fp)
    8a40:	1080040b 	ldhu	r2,16(r2)
    8a44:	1884703a 	and	r2,r3,r2
    8a48:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    8a4c:	e0bff117 	ldw	r2,-60(fp)
    8a50:	1080040b 	ldhu	r2,16(r2)
    8a54:	10ffffcc 	andi	r3,r2,65535
    8a58:	e0bff40b 	ldhu	r2,-48(fp)
    8a5c:	18800b1e 	bne	r3,r2,8a8c <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8a60:	e0bff40b 	ldhu	r2,-48(fp)
    8a64:	e13ff117 	ldw	r4,-60(fp)
    8a68:	100b883a 	mov	r5,r2
    8a6c:	0008fbc0 	call	8fbc <OS_FlagTaskRdy>
    8a70:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8a74:	e0bff483 	ldbu	r2,-46(fp)
    8a78:	10800058 	cmpnei	r2,r2,1
    8a7c:	1000031e 	bne	r2,zero,8a8c <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8a80:	00800044 	movi	r2,1
    8a84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8a88:	00004d06 	br	8bc0 <OSFlagPost+0x2f8>
    8a8c:	00004c06 	br	8bc0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8a90:	e0bffc17 	ldw	r2,-16(fp)
    8a94:	10c0020b 	ldhu	r3,8(r2)
    8a98:	e0bff117 	ldw	r2,-60(fp)
    8a9c:	1080040b 	ldhu	r2,16(r2)
    8aa0:	1884703a 	and	r2,r3,r2
    8aa4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    8aa8:	e0bff40b 	ldhu	r2,-48(fp)
    8aac:	10000b26 	beq	r2,zero,8adc <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8ab0:	e0bff40b 	ldhu	r2,-48(fp)
    8ab4:	e13ff117 	ldw	r4,-60(fp)
    8ab8:	100b883a 	mov	r5,r2
    8abc:	0008fbc0 	call	8fbc <OS_FlagTaskRdy>
    8ac0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8ac4:	e0bff483 	ldbu	r2,-46(fp)
    8ac8:	10800058 	cmpnei	r2,r2,1
    8acc:	1000031e 	bne	r2,zero,8adc <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8ad0:	00800044 	movi	r2,1
    8ad4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8ad8:	00003906 	br	8bc0 <OSFlagPost+0x2f8>
    8adc:	00003806 	br	8bc0 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8ae0:	e0bffc17 	ldw	r2,-16(fp)
    8ae4:	1080020b 	ldhu	r2,8(r2)
    8ae8:	0084303a 	nor	r2,zero,r2
    8aec:	1007883a 	mov	r3,r2
    8af0:	e0bff117 	ldw	r2,-60(fp)
    8af4:	1080040b 	ldhu	r2,16(r2)
    8af8:	1884703a 	and	r2,r3,r2
    8afc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    8b00:	e0bff117 	ldw	r2,-60(fp)
    8b04:	1080040b 	ldhu	r2,16(r2)
    8b08:	10ffffcc 	andi	r3,r2,65535
    8b0c:	e0bff40b 	ldhu	r2,-48(fp)
    8b10:	18800b1e 	bne	r3,r2,8b40 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8b14:	e0bff40b 	ldhu	r2,-48(fp)
    8b18:	e13ff117 	ldw	r4,-60(fp)
    8b1c:	100b883a 	mov	r5,r2
    8b20:	0008fbc0 	call	8fbc <OS_FlagTaskRdy>
    8b24:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8b28:	e0bff483 	ldbu	r2,-46(fp)
    8b2c:	10800058 	cmpnei	r2,r2,1
    8b30:	1000031e 	bne	r2,zero,8b40 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8b34:	00800044 	movi	r2,1
    8b38:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8b3c:	00002006 	br	8bc0 <OSFlagPost+0x2f8>
    8b40:	00001f06 	br	8bc0 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8b44:	e0bffc17 	ldw	r2,-16(fp)
    8b48:	1080020b 	ldhu	r2,8(r2)
    8b4c:	0084303a 	nor	r2,zero,r2
    8b50:	1007883a 	mov	r3,r2
    8b54:	e0bff117 	ldw	r2,-60(fp)
    8b58:	1080040b 	ldhu	r2,16(r2)
    8b5c:	1884703a 	and	r2,r3,r2
    8b60:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    8b64:	e0bff40b 	ldhu	r2,-48(fp)
    8b68:	10000b26 	beq	r2,zero,8b98 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8b6c:	e0bff40b 	ldhu	r2,-48(fp)
    8b70:	e13ff117 	ldw	r4,-60(fp)
    8b74:	100b883a 	mov	r5,r2
    8b78:	0008fbc0 	call	8fbc <OS_FlagTaskRdy>
    8b7c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8b80:	e0bff483 	ldbu	r2,-46(fp)
    8b84:	10800058 	cmpnei	r2,r2,1
    8b88:	1000031e 	bne	r2,zero,8b98 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8b8c:	00800044 	movi	r2,1
    8b90:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8b94:	00000a06 	br	8bc0 <OSFlagPost+0x2f8>
    8b98:	00000906 	br	8bc0 <OSFlagPost+0x2f8>
    8b9c:	e0bff317 	ldw	r2,-52(fp)
    8ba0:	e0bff815 	stw	r2,-32(fp)
    8ba4:	e0bff817 	ldw	r2,-32(fp)
    8ba8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    8bac:	e0bfff17 	ldw	r2,-4(fp)
    8bb0:	00c01bc4 	movi	r3,111
    8bb4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    8bb8:	0005883a 	mov	r2,zero
    8bbc:	00001f06 	br	8c3c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    8bc0:	e0bff117 	ldw	r2,-60(fp)
    8bc4:	10800017 	ldw	r2,0(r2)
    8bc8:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    8bcc:	e0bff117 	ldw	r2,-60(fp)
    8bd0:	103f8a1e 	bne	r2,zero,89fc <__alt_mem_Flash_flash_data+0xf40089fc>
    8bd4:	e0bff317 	ldw	r2,-52(fp)
    8bd8:	e0bff915 	stw	r2,-28(fp)
    8bdc:	e0bff917 	ldw	r2,-28(fp)
    8be0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    8be4:	e0bff203 	ldbu	r2,-56(fp)
    8be8:	10800058 	cmpnei	r2,r2,1
    8bec:	1000011e 	bne	r2,zero,8bf4 <OSFlagPost+0x32c>
        OS_Sched();
    8bf0:	00070ec0 	call	70ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8bf4:	0005303a 	rdctl	r2,status
    8bf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bfc:	e0fffa17 	ldw	r3,-24(fp)
    8c00:	00bfff84 	movi	r2,-2
    8c04:	1884703a 	and	r2,r3,r2
    8c08:	1001703a 	wrctl	status,r2
  
  return context;
    8c0c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8c10:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    8c14:	e0bffc17 	ldw	r2,-16(fp)
    8c18:	1080020b 	ldhu	r2,8(r2)
    8c1c:	e0bff50d 	sth	r2,-44(fp)
    8c20:	e0bff317 	ldw	r2,-52(fp)
    8c24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c28:	e0bffb17 	ldw	r2,-20(fp)
    8c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    8c30:	e0bfff17 	ldw	r2,-4(fp)
    8c34:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    8c38:	e0bff50b 	ldhu	r2,-44(fp)
}
    8c3c:	e037883a 	mov	sp,fp
    8c40:	dfc00117 	ldw	ra,4(sp)
    8c44:	df000017 	ldw	fp,0(sp)
    8c48:	dec00204 	addi	sp,sp,8
    8c4c:	f800283a 	ret

00008c50 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    8c50:	defff904 	addi	sp,sp,-28
    8c54:	df000615 	stw	fp,24(sp)
    8c58:	df000604 	addi	fp,sp,24
    8c5c:	e13ffe15 	stw	r4,-8(fp)
    8c60:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    8c64:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    8c68:	e0bfff17 	ldw	r2,-4(fp)
    8c6c:	1000021e 	bne	r2,zero,8c78 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    8c70:	0005883a 	mov	r2,zero
    8c74:	00002306 	br	8d04 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    8c78:	e0bffe17 	ldw	r2,-8(fp)
    8c7c:	1000051e 	bne	r2,zero,8c94 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8c80:	e0bfff17 	ldw	r2,-4(fp)
    8c84:	00c01b84 	movi	r3,110
    8c88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8c8c:	0005883a 	mov	r2,zero
    8c90:	00001c06 	br	8d04 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    8c94:	e0bffe17 	ldw	r2,-8(fp)
    8c98:	10800003 	ldbu	r2,0(r2)
    8c9c:	10803fcc 	andi	r2,r2,255
    8ca0:	10800160 	cmpeqi	r2,r2,5
    8ca4:	1000051e 	bne	r2,zero,8cbc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8ca8:	e0bfff17 	ldw	r2,-4(fp)
    8cac:	00c00044 	movi	r3,1
    8cb0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8cb4:	0005883a 	mov	r2,zero
    8cb8:	00001206 	br	8d04 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8cbc:	0005303a 	rdctl	r2,status
    8cc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8cc4:	e0fffc17 	ldw	r3,-16(fp)
    8cc8:	00bfff84 	movi	r2,-2
    8ccc:	1884703a 	and	r2,r3,r2
    8cd0:	1001703a 	wrctl	status,r2
  
  return context;
    8cd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8cd8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    8cdc:	e0bffe17 	ldw	r2,-8(fp)
    8ce0:	1080020b 	ldhu	r2,8(r2)
    8ce4:	e0bffb0d 	sth	r2,-20(fp)
    8ce8:	e0bffa17 	ldw	r2,-24(fp)
    8cec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cf0:	e0bffd17 	ldw	r2,-12(fp)
    8cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8cf8:	e0bfff17 	ldw	r2,-4(fp)
    8cfc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    8d00:	e0bffb0b 	ldhu	r2,-20(fp)
}
    8d04:	e037883a 	mov	sp,fp
    8d08:	df000017 	ldw	fp,0(sp)
    8d0c:	dec00104 	addi	sp,sp,4
    8d10:	f800283a 	ret

00008d14 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    8d14:	defff804 	addi	sp,sp,-32
    8d18:	df000715 	stw	fp,28(sp)
    8d1c:	df000704 	addi	fp,sp,28
    8d20:	e13ffb15 	stw	r4,-20(fp)
    8d24:	e17ffc15 	stw	r5,-16(fp)
    8d28:	3009883a 	mov	r4,r6
    8d2c:	3807883a 	mov	r3,r7
    8d30:	e0800117 	ldw	r2,4(fp)
    8d34:	e13ffd0d 	sth	r4,-12(fp)
    8d38:	e0fffe05 	stb	r3,-8(fp)
    8d3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    8d40:	00800074 	movhi	r2,1
    8d44:	10952d04 	addi	r2,r2,21684
    8d48:	10c00017 	ldw	r3,0(r2)
    8d4c:	00800074 	movhi	r2,1
    8d50:	10952d04 	addi	r2,r2,21684
    8d54:	10800017 	ldw	r2,0(r2)
    8d58:	10800c03 	ldbu	r2,48(r2)
    8d5c:	10800814 	ori	r2,r2,32
    8d60:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    8d64:	00800074 	movhi	r2,1
    8d68:	10952d04 	addi	r2,r2,21684
    8d6c:	10800017 	ldw	r2,0(r2)
    8d70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    8d74:	00800074 	movhi	r2,1
    8d78:	10952d04 	addi	r2,r2,21684
    8d7c:	10800017 	ldw	r2,0(r2)
    8d80:	e0ffff0b 	ldhu	r3,-4(fp)
    8d84:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    8d88:	00800074 	movhi	r2,1
    8d8c:	10952d04 	addi	r2,r2,21684
    8d90:	10800017 	ldw	r2,0(r2)
    8d94:	e0fffc17 	ldw	r3,-16(fp)
    8d98:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    8d9c:	e0bffc17 	ldw	r2,-16(fp)
    8da0:	e0fffd0b 	ldhu	r3,-12(fp)
    8da4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    8da8:	e0bffc17 	ldw	r2,-16(fp)
    8dac:	e0fffe03 	ldbu	r3,-8(fp)
    8db0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    8db4:	00800074 	movhi	r2,1
    8db8:	10952d04 	addi	r2,r2,21684
    8dbc:	10c00017 	ldw	r3,0(r2)
    8dc0:	e0bffc17 	ldw	r2,-16(fp)
    8dc4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    8dc8:	e0bffb17 	ldw	r2,-20(fp)
    8dcc:	10c00117 	ldw	r3,4(r2)
    8dd0:	e0bffc17 	ldw	r2,-16(fp)
    8dd4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    8dd8:	e0bffc17 	ldw	r2,-16(fp)
    8ddc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    8de0:	e0bffc17 	ldw	r2,-16(fp)
    8de4:	e0fffb17 	ldw	r3,-20(fp)
    8de8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    8dec:	e0bffb17 	ldw	r2,-20(fp)
    8df0:	10800117 	ldw	r2,4(r2)
    8df4:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    8df8:	e0bff917 	ldw	r2,-28(fp)
    8dfc:	10000326 	beq	r2,zero,8e0c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    8e00:	e0bff917 	ldw	r2,-28(fp)
    8e04:	e0fffc17 	ldw	r3,-16(fp)
    8e08:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    8e0c:	e0bffb17 	ldw	r2,-20(fp)
    8e10:	e0fffc17 	ldw	r3,-16(fp)
    8e14:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    8e18:	00800074 	movhi	r2,1
    8e1c:	10952d04 	addi	r2,r2,21684
    8e20:	10800017 	ldw	r2,0(r2)
    8e24:	10800d03 	ldbu	r2,52(r2)
    8e28:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    8e2c:	e0fffa03 	ldbu	r3,-24(fp)
    8e30:	e13ffa03 	ldbu	r4,-24(fp)
    8e34:	00800074 	movhi	r2,1
    8e38:	10952a44 	addi	r2,r2,21673
    8e3c:	1105883a 	add	r2,r2,r4
    8e40:	10800003 	ldbu	r2,0(r2)
    8e44:	1009883a 	mov	r4,r2
    8e48:	00800074 	movhi	r2,1
    8e4c:	10952d04 	addi	r2,r2,21684
    8e50:	10800017 	ldw	r2,0(r2)
    8e54:	10800d43 	ldbu	r2,53(r2)
    8e58:	0084303a 	nor	r2,zero,r2
    8e5c:	2084703a 	and	r2,r4,r2
    8e60:	1009883a 	mov	r4,r2
    8e64:	00800074 	movhi	r2,1
    8e68:	10952a44 	addi	r2,r2,21673
    8e6c:	10c5883a 	add	r2,r2,r3
    8e70:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    8e74:	e0fffa03 	ldbu	r3,-24(fp)
    8e78:	00800074 	movhi	r2,1
    8e7c:	10952a44 	addi	r2,r2,21673
    8e80:	10c5883a 	add	r2,r2,r3
    8e84:	10800003 	ldbu	r2,0(r2)
    8e88:	10803fcc 	andi	r2,r2,255
    8e8c:	10000e1e 	bne	r2,zero,8ec8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    8e90:	00800074 	movhi	r2,1
    8e94:	10952d04 	addi	r2,r2,21684
    8e98:	10800017 	ldw	r2,0(r2)
    8e9c:	10800d83 	ldbu	r2,54(r2)
    8ea0:	0084303a 	nor	r2,zero,r2
    8ea4:	1007883a 	mov	r3,r2
    8ea8:	00800074 	movhi	r2,1
    8eac:	10952a04 	addi	r2,r2,21672
    8eb0:	10800003 	ldbu	r2,0(r2)
    8eb4:	1884703a 	and	r2,r3,r2
    8eb8:	1007883a 	mov	r3,r2
    8ebc:	00800074 	movhi	r2,1
    8ec0:	10952a04 	addi	r2,r2,21672
    8ec4:	10c00005 	stb	r3,0(r2)
    }
}
    8ec8:	e037883a 	mov	sp,fp
    8ecc:	df000017 	ldw	fp,0(sp)
    8ed0:	dec00104 	addi	sp,sp,4
    8ed4:	f800283a 	ret

00008ed8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    8ed8:	defffb04 	addi	sp,sp,-20
    8edc:	dfc00415 	stw	ra,16(sp)
    8ee0:	df000315 	stw	fp,12(sp)
    8ee4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    8ee8:	010000b4 	movhi	r4,2
    8eec:	213d4004 	addi	r4,r4,-2816
    8ef0:	0140dc04 	movi	r5,880
    8ef4:	00070380 	call	7038 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    8ef8:	008000b4 	movhi	r2,2
    8efc:	10bd4004 	addi	r2,r2,-2816
    8f00:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    8f04:	008000b4 	movhi	r2,2
    8f08:	10bd4b04 	addi	r2,r2,-2772
    8f0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8f10:	e03ffd0d 	sth	zero,-12(fp)
    8f14:	00001306 	br	8f64 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8f18:	e0bffe17 	ldw	r2,-8(fp)
    8f1c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    8f20:	e0bffe17 	ldw	r2,-8(fp)
    8f24:	e0ffff17 	ldw	r3,-4(fp)
    8f28:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    8f2c:	e0bffe17 	ldw	r2,-8(fp)
    8f30:	00c00fc4 	movi	r3,63
    8f34:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8f38:	e0bffe17 	ldw	r2,-8(fp)
    8f3c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    8f40:	e0bffe17 	ldw	r2,-8(fp)
    8f44:	10800b04 	addi	r2,r2,44
    8f48:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    8f4c:	e0bfff17 	ldw	r2,-4(fp)
    8f50:	10800b04 	addi	r2,r2,44
    8f54:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8f58:	e0bffd0b 	ldhu	r2,-12(fp)
    8f5c:	10800044 	addi	r2,r2,1
    8f60:	e0bffd0d 	sth	r2,-12(fp)
    8f64:	e0bffd0b 	ldhu	r2,-12(fp)
    8f68:	108004f0 	cmpltui	r2,r2,19
    8f6c:	103fea1e 	bne	r2,zero,8f18 <__alt_mem_Flash_flash_data+0xf4008f18>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8f70:	e0bffe17 	ldw	r2,-8(fp)
    8f74:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    8f78:	e0bffe17 	ldw	r2,-8(fp)
    8f7c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    8f80:	e0bffe17 	ldw	r2,-8(fp)
    8f84:	00c00fc4 	movi	r3,63
    8f88:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8f8c:	e0bffe17 	ldw	r2,-8(fp)
    8f90:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    8f94:	00800074 	movhi	r2,1
    8f98:	10952f04 	addi	r2,r2,21692
    8f9c:	00c000b4 	movhi	r3,2
    8fa0:	18fd4004 	addi	r3,r3,-2816
    8fa4:	10c00015 	stw	r3,0(r2)
#endif
}
    8fa8:	e037883a 	mov	sp,fp
    8fac:	dfc00117 	ldw	ra,4(sp)
    8fb0:	df000017 	ldw	fp,0(sp)
    8fb4:	dec00204 	addi	sp,sp,8
    8fb8:	f800283a 	ret

00008fbc <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    8fbc:	defffa04 	addi	sp,sp,-24
    8fc0:	dfc00515 	stw	ra,20(sp)
    8fc4:	df000415 	stw	fp,16(sp)
    8fc8:	df000404 	addi	fp,sp,16
    8fcc:	e13ffe15 	stw	r4,-8(fp)
    8fd0:	2805883a 	mov	r2,r5
    8fd4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    8fd8:	e0bffe17 	ldw	r2,-8(fp)
    8fdc:	10800217 	ldw	r2,8(r2)
    8fe0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    8fe4:	e0bffd17 	ldw	r2,-12(fp)
    8fe8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    8fec:	e0bffd17 	ldw	r2,-12(fp)
    8ff0:	e0ffff0b 	ldhu	r3,-4(fp)
    8ff4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    8ff8:	e0bffd17 	ldw	r2,-12(fp)
    8ffc:	10c00c03 	ldbu	r3,48(r2)
    9000:	00bff7c4 	movi	r2,-33
    9004:	1884703a 	and	r2,r3,r2
    9008:	1007883a 	mov	r3,r2
    900c:	e0bffd17 	ldw	r2,-12(fp)
    9010:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    9014:	e0bffd17 	ldw	r2,-12(fp)
    9018:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    901c:	e0bffd17 	ldw	r2,-12(fp)
    9020:	10800c03 	ldbu	r2,48(r2)
    9024:	10803fcc 	andi	r2,r2,255
    9028:	10001f1e 	bne	r2,zero,90a8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    902c:	e0bffd17 	ldw	r2,-12(fp)
    9030:	10c00d83 	ldbu	r3,54(r2)
    9034:	00800074 	movhi	r2,1
    9038:	10952a04 	addi	r2,r2,21672
    903c:	10800003 	ldbu	r2,0(r2)
    9040:	1884b03a 	or	r2,r3,r2
    9044:	1007883a 	mov	r3,r2
    9048:	00800074 	movhi	r2,1
    904c:	10952a04 	addi	r2,r2,21672
    9050:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9054:	e0bffd17 	ldw	r2,-12(fp)
    9058:	10800d03 	ldbu	r2,52(r2)
    905c:	10c03fcc 	andi	r3,r2,255
    9060:	e0bffd17 	ldw	r2,-12(fp)
    9064:	10800d03 	ldbu	r2,52(r2)
    9068:	11003fcc 	andi	r4,r2,255
    906c:	00800074 	movhi	r2,1
    9070:	10952a44 	addi	r2,r2,21673
    9074:	1105883a 	add	r2,r2,r4
    9078:	11000003 	ldbu	r4,0(r2)
    907c:	e0bffd17 	ldw	r2,-12(fp)
    9080:	10800d43 	ldbu	r2,53(r2)
    9084:	2084b03a 	or	r2,r4,r2
    9088:	1009883a 	mov	r4,r2
    908c:	00800074 	movhi	r2,1
    9090:	10952a44 	addi	r2,r2,21673
    9094:	10c5883a 	add	r2,r2,r3
    9098:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    909c:	00800044 	movi	r2,1
    90a0:	e0bffc05 	stb	r2,-16(fp)
    90a4:	00000106 	br	90ac <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    90a8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    90ac:	e13ffe17 	ldw	r4,-8(fp)
    90b0:	00090cc0 	call	90cc <OS_FlagUnlink>
    return (sched);
    90b4:	e0bffc03 	ldbu	r2,-16(fp)
}
    90b8:	e037883a 	mov	sp,fp
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	df000017 	ldw	fp,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret

000090cc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    90cc:	defffa04 	addi	sp,sp,-24
    90d0:	df000515 	stw	fp,20(sp)
    90d4:	df000504 	addi	fp,sp,20
    90d8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    90dc:	e0bfff17 	ldw	r2,-4(fp)
    90e0:	10800117 	ldw	r2,4(r2)
    90e4:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    90e8:	e0bfff17 	ldw	r2,-4(fp)
    90ec:	10800017 	ldw	r2,0(r2)
    90f0:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    90f4:	e0bffb17 	ldw	r2,-20(fp)
    90f8:	10000b1e 	bne	r2,zero,9128 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    90fc:	e0bfff17 	ldw	r2,-4(fp)
    9100:	10800317 	ldw	r2,12(r2)
    9104:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    9108:	e0bffd17 	ldw	r2,-12(fp)
    910c:	e0fffc17 	ldw	r3,-16(fp)
    9110:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    9114:	e0bffc17 	ldw	r2,-16(fp)
    9118:	10000b26 	beq	r2,zero,9148 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    911c:	e0bffc17 	ldw	r2,-16(fp)
    9120:	10000115 	stw	zero,4(r2)
    9124:	00000806 	br	9148 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    9128:	e0bffb17 	ldw	r2,-20(fp)
    912c:	e0fffc17 	ldw	r3,-16(fp)
    9130:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    9134:	e0bffc17 	ldw	r2,-16(fp)
    9138:	10000326 	beq	r2,zero,9148 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    913c:	e0bffc17 	ldw	r2,-16(fp)
    9140:	e0fffb17 	ldw	r3,-20(fp)
    9144:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    9148:	e0bfff17 	ldw	r2,-4(fp)
    914c:	10800217 	ldw	r2,8(r2)
    9150:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    9154:	e0bffe17 	ldw	r2,-8(fp)
    9158:	10000a15 	stw	zero,40(r2)
#endif
}
    915c:	e037883a 	mov	sp,fp
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00104 	addi	sp,sp,4
    9168:	f800283a 	ret

0000916c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    916c:	defff404 	addi	sp,sp,-48
    9170:	df000b15 	stw	fp,44(sp)
    9174:	df000b04 	addi	fp,sp,44
    9178:	e13ffc15 	stw	r4,-16(fp)
    917c:	e17ffd15 	stw	r5,-12(fp)
    9180:	e1bffe15 	stw	r6,-8(fp)
    9184:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9188:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    918c:	e0bfff17 	ldw	r2,-4(fp)
    9190:	1000021e 	bne	r2,zero,919c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    9194:	0005883a 	mov	r2,zero
    9198:	00006d06 	br	9350 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    919c:	e0bffc17 	ldw	r2,-16(fp)
    91a0:	1000051e 	bne	r2,zero,91b8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    91a4:	e0bfff17 	ldw	r2,-4(fp)
    91a8:	00c01884 	movi	r3,98
    91ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    91b0:	0005883a 	mov	r2,zero
    91b4:	00006606 	br	9350 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    91b8:	e0bffc17 	ldw	r2,-16(fp)
    91bc:	108000cc 	andi	r2,r2,3
    91c0:	10000526 	beq	r2,zero,91d8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    91c4:	e0bfff17 	ldw	r2,-4(fp)
    91c8:	00c01884 	movi	r3,98
    91cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    91d0:	0005883a 	mov	r2,zero
    91d4:	00005e06 	br	9350 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    91d8:	e0bffd17 	ldw	r2,-12(fp)
    91dc:	108000a8 	cmpgeui	r2,r2,2
    91e0:	1000051e 	bne	r2,zero,91f8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    91e4:	e0bfff17 	ldw	r2,-4(fp)
    91e8:	00c016c4 	movi	r3,91
    91ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    91f0:	0005883a 	mov	r2,zero
    91f4:	00005606 	br	9350 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    91f8:	e0bffe17 	ldw	r2,-8(fp)
    91fc:	10800128 	cmpgeui	r2,r2,4
    9200:	1000051e 	bne	r2,zero,9218 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    9204:	e0bfff17 	ldw	r2,-4(fp)
    9208:	00c01704 	movi	r3,92
    920c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9210:	0005883a 	mov	r2,zero
    9214:	00004e06 	br	9350 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9218:	0005303a 	rdctl	r2,status
    921c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9220:	e0fffa17 	ldw	r3,-24(fp)
    9224:	00bfff84 	movi	r2,-2
    9228:	1884703a 	and	r2,r3,r2
    922c:	1001703a 	wrctl	status,r2
  
  return context;
    9230:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9234:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    9238:	00800074 	movhi	r2,1
    923c:	10952704 	addi	r2,r2,21660
    9240:	10800017 	ldw	r2,0(r2)
    9244:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    9248:	00800074 	movhi	r2,1
    924c:	10952704 	addi	r2,r2,21660
    9250:	10800017 	ldw	r2,0(r2)
    9254:	10000726 	beq	r2,zero,9274 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    9258:	00800074 	movhi	r2,1
    925c:	10952704 	addi	r2,r2,21660
    9260:	10800017 	ldw	r2,0(r2)
    9264:	10c00117 	ldw	r3,4(r2)
    9268:	00800074 	movhi	r2,1
    926c:	10952704 	addi	r2,r2,21660
    9270:	10c00015 	stw	r3,0(r2)
    9274:	e0bff817 	ldw	r2,-32(fp)
    9278:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    927c:	e0bffb17 	ldw	r2,-20(fp)
    9280:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    9284:	e0bff917 	ldw	r2,-28(fp)
    9288:	1000051e 	bne	r2,zero,92a0 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    928c:	e0bfff17 	ldw	r2,-4(fp)
    9290:	00c01684 	movi	r3,90
    9294:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    9298:	0005883a 	mov	r2,zero
    929c:	00002c06 	br	9350 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    92a0:	e0bffc17 	ldw	r2,-16(fp)
    92a4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    92a8:	e0fffc17 	ldw	r3,-16(fp)
    92ac:	e0bffe17 	ldw	r2,-8(fp)
    92b0:	1885883a 	add	r2,r3,r2
    92b4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    92b8:	e03ff715 	stw	zero,-36(fp)
    92bc:	00000c06 	br	92f0 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    92c0:	e0bff617 	ldw	r2,-40(fp)
    92c4:	e0fff517 	ldw	r3,-44(fp)
    92c8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    92cc:	e0bff517 	ldw	r2,-44(fp)
    92d0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    92d4:	e0fff517 	ldw	r3,-44(fp)
    92d8:	e0bffe17 	ldw	r2,-8(fp)
    92dc:	1885883a 	add	r2,r3,r2
    92e0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    92e4:	e0bff717 	ldw	r2,-36(fp)
    92e8:	10800044 	addi	r2,r2,1
    92ec:	e0bff715 	stw	r2,-36(fp)
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10bfffc4 	addi	r2,r2,-1
    92f8:	e0fff717 	ldw	r3,-36(fp)
    92fc:	18bff036 	bltu	r3,r2,92c0 <__alt_mem_Flash_flash_data+0xf40092c0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    9300:	e0bff617 	ldw	r2,-40(fp)
    9304:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    9308:	e0bff917 	ldw	r2,-28(fp)
    930c:	e0fffc17 	ldw	r3,-16(fp)
    9310:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    9314:	e0bff917 	ldw	r2,-28(fp)
    9318:	e0fffc17 	ldw	r3,-16(fp)
    931c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    9320:	e0bff917 	ldw	r2,-28(fp)
    9324:	e0fffd17 	ldw	r3,-12(fp)
    9328:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    932c:	e0bff917 	ldw	r2,-28(fp)
    9330:	e0fffd17 	ldw	r3,-12(fp)
    9334:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    9338:	e0bff917 	ldw	r2,-28(fp)
    933c:	e0fffe17 	ldw	r3,-8(fp)
    9340:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    9344:	e0bfff17 	ldw	r2,-4(fp)
    9348:	10000005 	stb	zero,0(r2)
    return (pmem);
    934c:	e0bff917 	ldw	r2,-28(fp)
}
    9350:	e037883a 	mov	sp,fp
    9354:	df000017 	ldw	fp,0(sp)
    9358:	dec00104 	addi	sp,sp,4
    935c:	f800283a 	ret

00009360 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    9360:	defff804 	addi	sp,sp,-32
    9364:	df000715 	stw	fp,28(sp)
    9368:	df000704 	addi	fp,sp,28
    936c:	e13ffe15 	stw	r4,-8(fp)
    9370:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9374:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    9378:	e0bfff17 	ldw	r2,-4(fp)
    937c:	1000021e 	bne	r2,zero,9388 <OSMemGet+0x28>
        return ((void *)0);
    9380:	0005883a 	mov	r2,zero
    9384:	00002e06 	br	9440 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    9388:	e0bffe17 	ldw	r2,-8(fp)
    938c:	1000051e 	bne	r2,zero,93a4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    9390:	e0bfff17 	ldw	r2,-4(fp)
    9394:	00c01804 	movi	r3,96
    9398:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    939c:	0005883a 	mov	r2,zero
    93a0:	00002706 	br	9440 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93a4:	0005303a 	rdctl	r2,status
    93a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93ac:	e0fffb17 	ldw	r3,-20(fp)
    93b0:	00bfff84 	movi	r2,-2
    93b4:	1884703a 	and	r2,r3,r2
    93b8:	1001703a 	wrctl	status,r2
  
  return context;
    93bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    93c0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    93c4:	e0bffe17 	ldw	r2,-8(fp)
    93c8:	10800417 	ldw	r2,16(r2)
    93cc:	10001426 	beq	r2,zero,9420 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    93d0:	e0bffe17 	ldw	r2,-8(fp)
    93d4:	10800117 	ldw	r2,4(r2)
    93d8:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    93dc:	e0bffa17 	ldw	r2,-24(fp)
    93e0:	10c00017 	ldw	r3,0(r2)
    93e4:	e0bffe17 	ldw	r2,-8(fp)
    93e8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    93ec:	e0bffe17 	ldw	r2,-8(fp)
    93f0:	10800417 	ldw	r2,16(r2)
    93f4:	10ffffc4 	addi	r3,r2,-1
    93f8:	e0bffe17 	ldw	r2,-8(fp)
    93fc:	10c00415 	stw	r3,16(r2)
    9400:	e0bff917 	ldw	r2,-28(fp)
    9404:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9408:	e0bffc17 	ldw	r2,-16(fp)
    940c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    9410:	e0bfff17 	ldw	r2,-4(fp)
    9414:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    9418:	e0bffa17 	ldw	r2,-24(fp)
    941c:	00000806 	br	9440 <OSMemGet+0xe0>
    9420:	e0bff917 	ldw	r2,-28(fp)
    9424:	e0bffd15 	stw	r2,-12(fp)
    9428:	e0bffd17 	ldw	r2,-12(fp)
    942c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    9430:	e0bfff17 	ldw	r2,-4(fp)
    9434:	00c01744 	movi	r3,93
    9438:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    943c:	0005883a 	mov	r2,zero
}
    9440:	e037883a 	mov	sp,fp
    9444:	df000017 	ldw	fp,0(sp)
    9448:	dec00104 	addi	sp,sp,4
    944c:	f800283a 	ret

00009450 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    9450:	defff704 	addi	sp,sp,-36
    9454:	dfc00815 	stw	ra,32(sp)
    9458:	df000715 	stw	fp,28(sp)
    945c:	df000704 	addi	fp,sp,28
    9460:	e13ffd15 	stw	r4,-12(fp)
    9464:	e17ffe15 	stw	r5,-8(fp)
    9468:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    946c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9470:	e0bfff17 	ldw	r2,-4(fp)
    9474:	1000021e 	bne	r2,zero,9480 <OSMemNameGet+0x30>
        return (0);
    9478:	0005883a 	mov	r2,zero
    947c:	00002d06 	br	9534 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    9480:	e0bffd17 	ldw	r2,-12(fp)
    9484:	1000051e 	bne	r2,zero,949c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    9488:	e0bfff17 	ldw	r2,-4(fp)
    948c:	00c01804 	movi	r3,96
    9490:	10c00005 	stb	r3,0(r2)
        return (0);
    9494:	0005883a 	mov	r2,zero
    9498:	00002606 	br	9534 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    949c:	e0bffe17 	ldw	r2,-8(fp)
    94a0:	1000051e 	bne	r2,zero,94b8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    94a4:	e0bfff17 	ldw	r2,-4(fp)
    94a8:	00c00304 	movi	r3,12
    94ac:	10c00005 	stb	r3,0(r2)
        return (0);
    94b0:	0005883a 	mov	r2,zero
    94b4:	00001f06 	br	9534 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    94b8:	00800074 	movhi	r2,1
    94bc:	10952c04 	addi	r2,r2,21680
    94c0:	10800003 	ldbu	r2,0(r2)
    94c4:	10803fcc 	andi	r2,r2,255
    94c8:	10000526 	beq	r2,zero,94e0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    94cc:	e0bfff17 	ldw	r2,-4(fp)
    94d0:	00c00444 	movi	r3,17
    94d4:	10c00005 	stb	r3,0(r2)
        return (0);
    94d8:	0005883a 	mov	r2,zero
    94dc:	00001506 	br	9534 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94e0:	0005303a 	rdctl	r2,status
    94e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94e8:	e0fffb17 	ldw	r3,-20(fp)
    94ec:	00bfff84 	movi	r2,-2
    94f0:	1884703a 	and	r2,r3,r2
    94f4:	1001703a 	wrctl	status,r2
  
  return context;
    94f8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    94fc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    9500:	e0bffd17 	ldw	r2,-12(fp)
    9504:	10800504 	addi	r2,r2,20
    9508:	e13ffe17 	ldw	r4,-8(fp)
    950c:	100b883a 	mov	r5,r2
    9510:	00072280 	call	7228 <OS_StrCopy>
    9514:	e0bffa05 	stb	r2,-24(fp)
    9518:	e0bff917 	ldw	r2,-28(fp)
    951c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9520:	e0bffc17 	ldw	r2,-16(fp)
    9524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9528:	e0bfff17 	ldw	r2,-4(fp)
    952c:	10000005 	stb	zero,0(r2)
    return (len);
    9530:	e0bffa03 	ldbu	r2,-24(fp)
}
    9534:	e037883a 	mov	sp,fp
    9538:	dfc00117 	ldw	ra,4(sp)
    953c:	df000017 	ldw	fp,0(sp)
    9540:	dec00204 	addi	sp,sp,8
    9544:	f800283a 	ret

00009548 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    9548:	defff604 	addi	sp,sp,-40
    954c:	dfc00915 	stw	ra,36(sp)
    9550:	df000815 	stw	fp,32(sp)
    9554:	df000804 	addi	fp,sp,32
    9558:	e13ffd15 	stw	r4,-12(fp)
    955c:	e17ffe15 	stw	r5,-8(fp)
    9560:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9564:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9568:	e0bfff17 	ldw	r2,-4(fp)
    956c:	1000011e 	bne	r2,zero,9574 <OSMemNameSet+0x2c>
        return;
    9570:	00003606 	br	964c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    9574:	e0bffd17 	ldw	r2,-12(fp)
    9578:	1000041e 	bne	r2,zero,958c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    957c:	e0bfff17 	ldw	r2,-4(fp)
    9580:	00c01804 	movi	r3,96
    9584:	10c00005 	stb	r3,0(r2)
        return;
    9588:	00003006 	br	964c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    958c:	e0bffe17 	ldw	r2,-8(fp)
    9590:	1000041e 	bne	r2,zero,95a4 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    9594:	e0bfff17 	ldw	r2,-4(fp)
    9598:	00c00304 	movi	r3,12
    959c:	10c00005 	stb	r3,0(r2)
        return;
    95a0:	00002a06 	br	964c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    95a4:	00800074 	movhi	r2,1
    95a8:	10952c04 	addi	r2,r2,21680
    95ac:	10800003 	ldbu	r2,0(r2)
    95b0:	10803fcc 	andi	r2,r2,255
    95b4:	10000426 	beq	r2,zero,95c8 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    95b8:	e0bfff17 	ldw	r2,-4(fp)
    95bc:	00c00484 	movi	r3,18
    95c0:	10c00005 	stb	r3,0(r2)
        return;
    95c4:	00002106 	br	964c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95c8:	0005303a 	rdctl	r2,status
    95cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95d0:	e0fffa17 	ldw	r3,-24(fp)
    95d4:	00bfff84 	movi	r2,-2
    95d8:	1884703a 	and	r2,r3,r2
    95dc:	1001703a 	wrctl	status,r2
  
  return context;
    95e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    95e4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    95e8:	e13ffe17 	ldw	r4,-8(fp)
    95ec:	000729c0 	call	729c <OS_StrLen>
    95f0:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    95f4:	e0bff903 	ldbu	r2,-28(fp)
    95f8:	10800830 	cmpltui	r2,r2,32
    95fc:	1000081e 	bne	r2,zero,9620 <OSMemNameSet+0xd8>
    9600:	e0bff817 	ldw	r2,-32(fp)
    9604:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9608:	e0bffb17 	ldw	r2,-20(fp)
    960c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	00c018c4 	movi	r3,99
    9618:	10c00005 	stb	r3,0(r2)
        return;
    961c:	00000b06 	br	964c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    9620:	e0bffd17 	ldw	r2,-12(fp)
    9624:	10800504 	addi	r2,r2,20
    9628:	1009883a 	mov	r4,r2
    962c:	e17ffe17 	ldw	r5,-8(fp)
    9630:	00072280 	call	7228 <OS_StrCopy>
    9634:	e0bff817 	ldw	r2,-32(fp)
    9638:	e0bffc15 	stw	r2,-16(fp)
    963c:	e0bffc17 	ldw	r2,-16(fp)
    9640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9644:	e0bfff17 	ldw	r2,-4(fp)
    9648:	10000005 	stb	zero,0(r2)
}
    964c:	e037883a 	mov	sp,fp
    9650:	dfc00117 	ldw	ra,4(sp)
    9654:	df000017 	ldw	fp,0(sp)
    9658:	dec00204 	addi	sp,sp,8
    965c:	f800283a 	ret

00009660 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    9660:	defff904 	addi	sp,sp,-28
    9664:	df000615 	stw	fp,24(sp)
    9668:	df000604 	addi	fp,sp,24
    966c:	e13ffe15 	stw	r4,-8(fp)
    9670:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9674:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    9678:	e0bffe17 	ldw	r2,-8(fp)
    967c:	1000021e 	bne	r2,zero,9688 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    9680:	00801804 	movi	r2,96
    9684:	00002806 	br	9728 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    9688:	e0bfff17 	ldw	r2,-4(fp)
    968c:	1000021e 	bne	r2,zero,9698 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    9690:	008017c4 	movi	r2,95
    9694:	00002406 	br	9728 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9698:	0005303a 	rdctl	r2,status
    969c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96a0:	e0fffb17 	ldw	r3,-20(fp)
    96a4:	00bfff84 	movi	r2,-2
    96a8:	1884703a 	and	r2,r3,r2
    96ac:	1001703a 	wrctl	status,r2
  
  return context;
    96b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    96b4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    96b8:	e0bffe17 	ldw	r2,-8(fp)
    96bc:	10c00417 	ldw	r3,16(r2)
    96c0:	e0bffe17 	ldw	r2,-8(fp)
    96c4:	10800317 	ldw	r2,12(r2)
    96c8:	18800636 	bltu	r3,r2,96e4 <OSMemPut+0x84>
    96cc:	e0bffa17 	ldw	r2,-24(fp)
    96d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96d4:	e0bffc17 	ldw	r2,-16(fp)
    96d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    96dc:	00801784 	movi	r2,94
    96e0:	00001106 	br	9728 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    96e4:	e0bffe17 	ldw	r2,-8(fp)
    96e8:	10c00117 	ldw	r3,4(r2)
    96ec:	e0bfff17 	ldw	r2,-4(fp)
    96f0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    96f4:	e0bffe17 	ldw	r2,-8(fp)
    96f8:	e0ffff17 	ldw	r3,-4(fp)
    96fc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    9700:	e0bffe17 	ldw	r2,-8(fp)
    9704:	10800417 	ldw	r2,16(r2)
    9708:	10c00044 	addi	r3,r2,1
    970c:	e0bffe17 	ldw	r2,-8(fp)
    9710:	10c00415 	stw	r3,16(r2)
    9714:	e0bffa17 	ldw	r2,-24(fp)
    9718:	e0bffd15 	stw	r2,-12(fp)
    971c:	e0bffd17 	ldw	r2,-12(fp)
    9720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    9724:	0005883a 	mov	r2,zero
}
    9728:	e037883a 	mov	sp,fp
    972c:	df000017 	ldw	fp,0(sp)
    9730:	dec00104 	addi	sp,sp,4
    9734:	f800283a 	ret

00009738 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    9738:	defffa04 	addi	sp,sp,-24
    973c:	df000515 	stw	fp,20(sp)
    9740:	df000504 	addi	fp,sp,20
    9744:	e13ffe15 	stw	r4,-8(fp)
    9748:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    974c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    9750:	e0bffe17 	ldw	r2,-8(fp)
    9754:	1000021e 	bne	r2,zero,9760 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    9758:	00801804 	movi	r2,96
    975c:	00002c06 	br	9810 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    9760:	e0bfff17 	ldw	r2,-4(fp)
    9764:	1000021e 	bne	r2,zero,9770 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    9768:	00801844 	movi	r2,97
    976c:	00002806 	br	9810 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9770:	0005303a 	rdctl	r2,status
    9774:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9778:	e0fffc17 	ldw	r3,-16(fp)
    977c:	00bfff84 	movi	r2,-2
    9780:	1884703a 	and	r2,r3,r2
    9784:	1001703a 	wrctl	status,r2
  
  return context;
    9788:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    978c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    9790:	e0bffe17 	ldw	r2,-8(fp)
    9794:	10c00017 	ldw	r3,0(r2)
    9798:	e0bfff17 	ldw	r2,-4(fp)
    979c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    97a0:	e0bffe17 	ldw	r2,-8(fp)
    97a4:	10c00117 	ldw	r3,4(r2)
    97a8:	e0bfff17 	ldw	r2,-4(fp)
    97ac:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    97b0:	e0bffe17 	ldw	r2,-8(fp)
    97b4:	10c00217 	ldw	r3,8(r2)
    97b8:	e0bfff17 	ldw	r2,-4(fp)
    97bc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    97c0:	e0bffe17 	ldw	r2,-8(fp)
    97c4:	10c00317 	ldw	r3,12(r2)
    97c8:	e0bfff17 	ldw	r2,-4(fp)
    97cc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    97d0:	e0bffe17 	ldw	r2,-8(fp)
    97d4:	10c00417 	ldw	r3,16(r2)
    97d8:	e0bfff17 	ldw	r2,-4(fp)
    97dc:	10c00415 	stw	r3,16(r2)
    97e0:	e0bffb17 	ldw	r2,-20(fp)
    97e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97e8:	e0bffd17 	ldw	r2,-12(fp)
    97ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    97f0:	e0bfff17 	ldw	r2,-4(fp)
    97f4:	10c00317 	ldw	r3,12(r2)
    97f8:	e0bfff17 	ldw	r2,-4(fp)
    97fc:	10800417 	ldw	r2,16(r2)
    9800:	1887c83a 	sub	r3,r3,r2
    9804:	e0bfff17 	ldw	r2,-4(fp)
    9808:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    980c:	0005883a 	mov	r2,zero
}
    9810:	e037883a 	mov	sp,fp
    9814:	df000017 	ldw	fp,0(sp)
    9818:	dec00104 	addi	sp,sp,4
    981c:	f800283a 	ret

00009820 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    9820:	defffc04 	addi	sp,sp,-16
    9824:	dfc00315 	stw	ra,12(sp)
    9828:	df000215 	stw	fp,8(sp)
    982c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    9830:	010000b4 	movhi	r4,2
    9834:	213e1c04 	addi	r4,r4,-1936
    9838:	01430c04 	movi	r5,3120
    983c:	00070380 	call	7038 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    9840:	008000b4 	movhi	r2,2
    9844:	10be1c04 	addi	r2,r2,-1936
    9848:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    984c:	e03fff0d 	sth	zero,-4(fp)
    9850:	00001306 	br	98a0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    9854:	e0bfff0b 	ldhu	r2,-4(fp)
    9858:	10800044 	addi	r2,r2,1
    985c:	10c00d24 	muli	r3,r2,52
    9860:	008000b4 	movhi	r2,2
    9864:	10be1c04 	addi	r2,r2,-1936
    9868:	1887883a 	add	r3,r3,r2
    986c:	e0bffe17 	ldw	r2,-8(fp)
    9870:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    9874:	e0bffe17 	ldw	r2,-8(fp)
    9878:	00c00fc4 	movi	r3,63
    987c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    9880:	e0bffe17 	ldw	r2,-8(fp)
    9884:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    9888:	e0bffe17 	ldw	r2,-8(fp)
    988c:	10800d04 	addi	r2,r2,52
    9890:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    9894:	e0bfff0b 	ldhu	r2,-4(fp)
    9898:	10800044 	addi	r2,r2,1
    989c:	e0bfff0d 	sth	r2,-4(fp)
    98a0:	e0bfff0b 	ldhu	r2,-4(fp)
    98a4:	10800ef0 	cmpltui	r2,r2,59
    98a8:	103fea1e 	bne	r2,zero,9854 <__alt_mem_Flash_flash_data+0xf4009854>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    98ac:	e0bffe17 	ldw	r2,-8(fp)
    98b0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    98b4:	e0bffe17 	ldw	r2,-8(fp)
    98b8:	00c00fc4 	movi	r3,63
    98bc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    98c0:	e0bffe17 	ldw	r2,-8(fp)
    98c4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    98c8:	00800074 	movhi	r2,1
    98cc:	10952704 	addi	r2,r2,21660
    98d0:	00c000b4 	movhi	r3,2
    98d4:	18fe1c04 	addi	r3,r3,-1936
    98d8:	10c00015 	stw	r3,0(r2)
#endif
}
    98dc:	e037883a 	mov	sp,fp
    98e0:	dfc00117 	ldw	ra,4(sp)
    98e4:	df000017 	ldw	fp,0(sp)
    98e8:	dec00204 	addi	sp,sp,8
    98ec:	f800283a 	ret

000098f0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    98f0:	defff804 	addi	sp,sp,-32
    98f4:	df000715 	stw	fp,28(sp)
    98f8:	df000704 	addi	fp,sp,28
    98fc:	e13ffe15 	stw	r4,-8(fp)
    9900:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9904:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9908:	e0bfff17 	ldw	r2,-4(fp)
    990c:	1000021e 	bne	r2,zero,9918 <OSQAccept+0x28>
        return ((void *)0);
    9910:	0005883a 	mov	r2,zero
    9914:	00004206 	br	9a20 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9918:	e0bffe17 	ldw	r2,-8(fp)
    991c:	1000051e 	bne	r2,zero,9934 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    9920:	e0bfff17 	ldw	r2,-4(fp)
    9924:	00c00104 	movi	r3,4
    9928:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    992c:	0005883a 	mov	r2,zero
    9930:	00003b06 	br	9a20 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9934:	e0bffe17 	ldw	r2,-8(fp)
    9938:	10800003 	ldbu	r2,0(r2)
    993c:	10803fcc 	andi	r2,r2,255
    9940:	108000a0 	cmpeqi	r2,r2,2
    9944:	1000051e 	bne	r2,zero,995c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    9948:	e0bfff17 	ldw	r2,-4(fp)
    994c:	00c00044 	movi	r3,1
    9950:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9954:	0005883a 	mov	r2,zero
    9958:	00003106 	br	9a20 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    995c:	0005303a 	rdctl	r2,status
    9960:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9964:	e0fffc17 	ldw	r3,-16(fp)
    9968:	00bfff84 	movi	r2,-2
    996c:	1884703a 	and	r2,r3,r2
    9970:	1001703a 	wrctl	status,r2
  
  return context;
    9974:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9978:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    997c:	e0bffe17 	ldw	r2,-8(fp)
    9980:	10800117 	ldw	r2,4(r2)
    9984:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    9988:	e0bffb17 	ldw	r2,-20(fp)
    998c:	1080058b 	ldhu	r2,22(r2)
    9990:	10bfffcc 	andi	r2,r2,65535
    9994:	10001926 	beq	r2,zero,99fc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    9998:	e0bffb17 	ldw	r2,-20(fp)
    999c:	10800417 	ldw	r2,16(r2)
    99a0:	11000104 	addi	r4,r2,4
    99a4:	e0fffb17 	ldw	r3,-20(fp)
    99a8:	19000415 	stw	r4,16(r3)
    99ac:	10800017 	ldw	r2,0(r2)
    99b0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    99b4:	e0bffb17 	ldw	r2,-20(fp)
    99b8:	1080058b 	ldhu	r2,22(r2)
    99bc:	10bfffc4 	addi	r2,r2,-1
    99c0:	1007883a 	mov	r3,r2
    99c4:	e0bffb17 	ldw	r2,-20(fp)
    99c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    99cc:	e0bffb17 	ldw	r2,-20(fp)
    99d0:	10c00417 	ldw	r3,16(r2)
    99d4:	e0bffb17 	ldw	r2,-20(fp)
    99d8:	10800217 	ldw	r2,8(r2)
    99dc:	1880041e 	bne	r3,r2,99f0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    99e0:	e0bffb17 	ldw	r2,-20(fp)
    99e4:	10c00117 	ldw	r3,4(r2)
    99e8:	e0bffb17 	ldw	r2,-20(fp)
    99ec:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    99f0:	e0bfff17 	ldw	r2,-4(fp)
    99f4:	10000005 	stb	zero,0(r2)
    99f8:	00000406 	br	9a0c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    99fc:	e0bfff17 	ldw	r2,-4(fp)
    9a00:	00c007c4 	movi	r3,31
    9a04:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    9a08:	e03ff915 	stw	zero,-28(fp)
    9a0c:	e0bffa17 	ldw	r2,-24(fp)
    9a10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a14:	e0bffd17 	ldw	r2,-12(fp)
    9a18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    9a1c:	e0bff917 	ldw	r2,-28(fp)
}
    9a20:	e037883a 	mov	sp,fp
    9a24:	df000017 	ldw	fp,0(sp)
    9a28:	dec00104 	addi	sp,sp,4
    9a2c:	f800283a 	ret

00009a30 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    9a30:	defff404 	addi	sp,sp,-48
    9a34:	dfc00b15 	stw	ra,44(sp)
    9a38:	df000a15 	stw	fp,40(sp)
    9a3c:	df000a04 	addi	fp,sp,40
    9a40:	e13ffe15 	stw	r4,-8(fp)
    9a44:	2805883a 	mov	r2,r5
    9a48:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9a4c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    9a50:	00800074 	movhi	r2,1
    9a54:	10952c04 	addi	r2,r2,21680
    9a58:	10800003 	ldbu	r2,0(r2)
    9a5c:	10803fcc 	andi	r2,r2,255
    9a60:	10000226 	beq	r2,zero,9a6c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    9a64:	0005883a 	mov	r2,zero
    9a68:	00006b06 	br	9c18 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a6c:	0005303a 	rdctl	r2,status
    9a70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a74:	e0fff917 	ldw	r3,-28(fp)
    9a78:	00bfff84 	movi	r2,-2
    9a7c:	1884703a 	and	r2,r3,r2
    9a80:	1001703a 	wrctl	status,r2
  
  return context;
    9a84:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    9a88:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    9a8c:	00800074 	movhi	r2,1
    9a90:	10952b04 	addi	r2,r2,21676
    9a94:	10800017 	ldw	r2,0(r2)
    9a98:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    9a9c:	00800074 	movhi	r2,1
    9aa0:	10952b04 	addi	r2,r2,21676
    9aa4:	10800017 	ldw	r2,0(r2)
    9aa8:	10000726 	beq	r2,zero,9ac8 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9aac:	00800074 	movhi	r2,1
    9ab0:	10952b04 	addi	r2,r2,21676
    9ab4:	10800017 	ldw	r2,0(r2)
    9ab8:	10c00117 	ldw	r3,4(r2)
    9abc:	00800074 	movhi	r2,1
    9ac0:	10952b04 	addi	r2,r2,21676
    9ac4:	10c00015 	stw	r3,0(r2)
    9ac8:	e0bff717 	ldw	r2,-36(fp)
    9acc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ad0:	e0bffa17 	ldw	r2,-24(fp)
    9ad4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    9ad8:	e0bff617 	ldw	r2,-40(fp)
    9adc:	10004d26 	beq	r2,zero,9c14 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ae0:	0005303a 	rdctl	r2,status
    9ae4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ae8:	e0fffb17 	ldw	r3,-20(fp)
    9aec:	00bfff84 	movi	r2,-2
    9af0:	1884703a 	and	r2,r3,r2
    9af4:	1001703a 	wrctl	status,r2
  
  return context;
    9af8:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    9afc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    9b00:	00800074 	movhi	r2,1
    9b04:	10952904 	addi	r2,r2,21668
    9b08:	10800017 	ldw	r2,0(r2)
    9b0c:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    9b10:	e0bff817 	ldw	r2,-32(fp)
    9b14:	10003126 	beq	r2,zero,9bdc <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    9b18:	00800074 	movhi	r2,1
    9b1c:	10952904 	addi	r2,r2,21668
    9b20:	10800017 	ldw	r2,0(r2)
    9b24:	10c00017 	ldw	r3,0(r2)
    9b28:	00800074 	movhi	r2,1
    9b2c:	10952904 	addi	r2,r2,21668
    9b30:	10c00015 	stw	r3,0(r2)
    9b34:	e0bff717 	ldw	r2,-36(fp)
    9b38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b3c:	e0bffc17 	ldw	r2,-16(fp)
    9b40:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    9b44:	e0bff817 	ldw	r2,-32(fp)
    9b48:	e0fffe17 	ldw	r3,-8(fp)
    9b4c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    9b50:	e0bfff0b 	ldhu	r2,-4(fp)
    9b54:	1085883a 	add	r2,r2,r2
    9b58:	1085883a 	add	r2,r2,r2
    9b5c:	1007883a 	mov	r3,r2
    9b60:	e0bffe17 	ldw	r2,-8(fp)
    9b64:	10c7883a 	add	r3,r2,r3
    9b68:	e0bff817 	ldw	r2,-32(fp)
    9b6c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    9b70:	e0bff817 	ldw	r2,-32(fp)
    9b74:	e0fffe17 	ldw	r3,-8(fp)
    9b78:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    9b7c:	e0bff817 	ldw	r2,-32(fp)
    9b80:	e0fffe17 	ldw	r3,-8(fp)
    9b84:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    9b88:	e0bff817 	ldw	r2,-32(fp)
    9b8c:	e0ffff0b 	ldhu	r3,-4(fp)
    9b90:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    9b94:	e0bff817 	ldw	r2,-32(fp)
    9b98:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    9b9c:	e0bff617 	ldw	r2,-40(fp)
    9ba0:	00c00084 	movi	r3,2
    9ba4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    9ba8:	e0bff617 	ldw	r2,-40(fp)
    9bac:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    9bb0:	e0bff617 	ldw	r2,-40(fp)
    9bb4:	e0fff817 	ldw	r3,-32(fp)
    9bb8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    9bbc:	e0bff617 	ldw	r2,-40(fp)
    9bc0:	00c00fc4 	movi	r3,63
    9bc4:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    9bc8:	e0bff617 	ldw	r2,-40(fp)
    9bcc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    9bd0:	e13ff617 	ldw	r4,-40(fp)
    9bd4:	0006c740 	call	6c74 <OS_EventWaitListInit>
    9bd8:	00000e06 	br	9c14 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    9bdc:	00800074 	movhi	r2,1
    9be0:	10952b04 	addi	r2,r2,21676
    9be4:	10c00017 	ldw	r3,0(r2)
    9be8:	e0bff617 	ldw	r2,-40(fp)
    9bec:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    9bf0:	00800074 	movhi	r2,1
    9bf4:	10952b04 	addi	r2,r2,21676
    9bf8:	e0fff617 	ldw	r3,-40(fp)
    9bfc:	10c00015 	stw	r3,0(r2)
    9c00:	e0bff717 	ldw	r2,-36(fp)
    9c04:	e0bffd15 	stw	r2,-12(fp)
    9c08:	e0bffd17 	ldw	r2,-12(fp)
    9c0c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    9c10:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    9c14:	e0bff617 	ldw	r2,-40(fp)
}
    9c18:	e037883a 	mov	sp,fp
    9c1c:	dfc00117 	ldw	ra,4(sp)
    9c20:	df000017 	ldw	fp,0(sp)
    9c24:	dec00204 	addi	sp,sp,8
    9c28:	f800283a 	ret

00009c2c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9c2c:	defff204 	addi	sp,sp,-56
    9c30:	dfc00d15 	stw	ra,52(sp)
    9c34:	df000c15 	stw	fp,48(sp)
    9c38:	df000c04 	addi	fp,sp,48
    9c3c:	e13ffd15 	stw	r4,-12(fp)
    9c40:	2805883a 	mov	r2,r5
    9c44:	e1bfff15 	stw	r6,-4(fp)
    9c48:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9c4c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9c50:	e0bfff17 	ldw	r2,-4(fp)
    9c54:	1000021e 	bne	r2,zero,9c60 <OSQDel+0x34>
        return (pevent);
    9c58:	e0bffd17 	ldw	r2,-12(fp)
    9c5c:	0000a006 	br	9ee0 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9c60:	e0bffd17 	ldw	r2,-12(fp)
    9c64:	1000051e 	bne	r2,zero,9c7c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9c68:	e0bfff17 	ldw	r2,-4(fp)
    9c6c:	00c00104 	movi	r3,4
    9c70:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9c74:	e0bffd17 	ldw	r2,-12(fp)
    9c78:	00009906 	br	9ee0 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	10800003 	ldbu	r2,0(r2)
    9c84:	10803fcc 	andi	r2,r2,255
    9c88:	108000a0 	cmpeqi	r2,r2,2
    9c8c:	1000051e 	bne	r2,zero,9ca4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9c90:	e0bfff17 	ldw	r2,-4(fp)
    9c94:	00c00044 	movi	r3,1
    9c98:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9c9c:	e0bffd17 	ldw	r2,-12(fp)
    9ca0:	00008f06 	br	9ee0 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9ca4:	00800074 	movhi	r2,1
    9ca8:	10952c04 	addi	r2,r2,21680
    9cac:	10800003 	ldbu	r2,0(r2)
    9cb0:	10803fcc 	andi	r2,r2,255
    9cb4:	10000526 	beq	r2,zero,9ccc <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    9cb8:	e0bfff17 	ldw	r2,-4(fp)
    9cbc:	00c003c4 	movi	r3,15
    9cc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9cc4:	e0bffd17 	ldw	r2,-12(fp)
    9cc8:	00008506 	br	9ee0 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ccc:	0005303a 	rdctl	r2,status
    9cd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9cd4:	e0fff817 	ldw	r3,-32(fp)
    9cd8:	00bfff84 	movi	r2,-2
    9cdc:	1884703a 	and	r2,r3,r2
    9ce0:	1001703a 	wrctl	status,r2
  
  return context;
    9ce4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9ce8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    9cec:	e0bffd17 	ldw	r2,-12(fp)
    9cf0:	10800283 	ldbu	r2,10(r2)
    9cf4:	10803fcc 	andi	r2,r2,255
    9cf8:	10000326 	beq	r2,zero,9d08 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    9cfc:	00800044 	movi	r2,1
    9d00:	e0bff405 	stb	r2,-48(fp)
    9d04:	00000106 	br	9d0c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    9d08:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    9d0c:	e0bffe03 	ldbu	r2,-8(fp)
    9d10:	10000326 	beq	r2,zero,9d20 <OSQDel+0xf4>
    9d14:	10800060 	cmpeqi	r2,r2,1
    9d18:	1000381e 	bne	r2,zero,9dfc <OSQDel+0x1d0>
    9d1c:	00006506 	br	9eb4 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    9d20:	e0bff403 	ldbu	r2,-48(fp)
    9d24:	1000261e 	bne	r2,zero,9dc0 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9d28:	e0bffd17 	ldw	r2,-12(fp)
    9d2c:	00c00fc4 	movi	r3,63
    9d30:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    9d34:	e0bffd17 	ldw	r2,-12(fp)
    9d38:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    9d3c:	e0bffd17 	ldw	r2,-12(fp)
    9d40:	10800117 	ldw	r2,4(r2)
    9d44:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    9d48:	00800074 	movhi	r2,1
    9d4c:	10952904 	addi	r2,r2,21668
    9d50:	10c00017 	ldw	r3,0(r2)
    9d54:	e0bff717 	ldw	r2,-36(fp)
    9d58:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    9d5c:	00800074 	movhi	r2,1
    9d60:	10952904 	addi	r2,r2,21668
    9d64:	e0fff717 	ldw	r3,-36(fp)
    9d68:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9d6c:	e0bffd17 	ldw	r2,-12(fp)
    9d70:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9d74:	00800074 	movhi	r2,1
    9d78:	10952b04 	addi	r2,r2,21676
    9d7c:	10c00017 	ldw	r3,0(r2)
    9d80:	e0bffd17 	ldw	r2,-12(fp)
    9d84:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9d88:	e0bffd17 	ldw	r2,-12(fp)
    9d8c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9d90:	00800074 	movhi	r2,1
    9d94:	10952b04 	addi	r2,r2,21676
    9d98:	e0fffd17 	ldw	r3,-12(fp)
    9d9c:	10c00015 	stw	r3,0(r2)
    9da0:	e0bff617 	ldw	r2,-40(fp)
    9da4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9da8:	e0bff917 	ldw	r2,-28(fp)
    9dac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9db0:	e0bfff17 	ldw	r2,-4(fp)
    9db4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    9db8:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9dbc:	00004706 	br	9edc <OSQDel+0x2b0>
    9dc0:	e0bff617 	ldw	r2,-40(fp)
    9dc4:	e0bffa15 	stw	r2,-24(fp)
    9dc8:	e0bffa17 	ldw	r2,-24(fp)
    9dcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    9dd0:	e0bfff17 	ldw	r2,-4(fp)
    9dd4:	00c01244 	movi	r3,73
    9dd8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9ddc:	e0bffd17 	ldw	r2,-12(fp)
    9de0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    9de4:	00003d06 	br	9edc <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    9de8:	e13ffd17 	ldw	r4,-12(fp)
    9dec:	000b883a 	mov	r5,zero
    9df0:	01800104 	movi	r6,4
    9df4:	000f883a 	mov	r7,zero
    9df8:	00066d40 	call	66d4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    9dfc:	e0bffd17 	ldw	r2,-12(fp)
    9e00:	10800283 	ldbu	r2,10(r2)
    9e04:	10803fcc 	andi	r2,r2,255
    9e08:	103ff71e 	bne	r2,zero,9de8 <__alt_mem_Flash_flash_data+0xf4009de8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    9e0c:	e0bffd17 	ldw	r2,-12(fp)
    9e10:	00c00fc4 	movi	r3,63
    9e14:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    9e18:	e0bffd17 	ldw	r2,-12(fp)
    9e1c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    9e20:	e0bffd17 	ldw	r2,-12(fp)
    9e24:	10800117 	ldw	r2,4(r2)
    9e28:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    9e2c:	00800074 	movhi	r2,1
    9e30:	10952904 	addi	r2,r2,21668
    9e34:	10c00017 	ldw	r3,0(r2)
    9e38:	e0bff717 	ldw	r2,-36(fp)
    9e3c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    9e40:	00800074 	movhi	r2,1
    9e44:	10952904 	addi	r2,r2,21668
    9e48:	e0fff717 	ldw	r3,-36(fp)
    9e4c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9e50:	e0bffd17 	ldw	r2,-12(fp)
    9e54:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9e58:	00800074 	movhi	r2,1
    9e5c:	10952b04 	addi	r2,r2,21676
    9e60:	10c00017 	ldw	r3,0(r2)
    9e64:	e0bffd17 	ldw	r2,-12(fp)
    9e68:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9e6c:	e0bffd17 	ldw	r2,-12(fp)
    9e70:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9e74:	00800074 	movhi	r2,1
    9e78:	10952b04 	addi	r2,r2,21676
    9e7c:	e0fffd17 	ldw	r3,-12(fp)
    9e80:	10c00015 	stw	r3,0(r2)
    9e84:	e0bff617 	ldw	r2,-40(fp)
    9e88:	e0bffb15 	stw	r2,-20(fp)
    9e8c:	e0bffb17 	ldw	r2,-20(fp)
    9e90:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9e94:	e0bff403 	ldbu	r2,-48(fp)
    9e98:	10800058 	cmpnei	r2,r2,1
    9e9c:	1000011e 	bne	r2,zero,9ea4 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9ea0:	00070ec0 	call	70ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9ea4:	e0bfff17 	ldw	r2,-4(fp)
    9ea8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    9eac:	e03ff515 	stw	zero,-44(fp)
             break;
    9eb0:	00000a06 	br	9edc <OSQDel+0x2b0>
    9eb4:	e0bff617 	ldw	r2,-40(fp)
    9eb8:	e0bffc15 	stw	r2,-16(fp)
    9ebc:	e0bffc17 	ldw	r2,-16(fp)
    9ec0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9ec4:	e0bfff17 	ldw	r2,-4(fp)
    9ec8:	00c001c4 	movi	r3,7
    9ecc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9ed0:	e0bffd17 	ldw	r2,-12(fp)
    9ed4:	e0bff515 	stw	r2,-44(fp)
             break;
    9ed8:	0001883a 	nop
    }
    return (pevent_return);
    9edc:	e0bff517 	ldw	r2,-44(fp)
}
    9ee0:	e037883a 	mov	sp,fp
    9ee4:	dfc00117 	ldw	ra,4(sp)
    9ee8:	df000017 	ldw	fp,0(sp)
    9eec:	dec00204 	addi	sp,sp,8
    9ef0:	f800283a 	ret

00009ef4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    9ef4:	defffa04 	addi	sp,sp,-24
    9ef8:	df000515 	stw	fp,20(sp)
    9efc:	df000504 	addi	fp,sp,20
    9f00:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9f04:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9f08:	e0bfff17 	ldw	r2,-4(fp)
    9f0c:	1000021e 	bne	r2,zero,9f18 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    9f10:	00800104 	movi	r2,4
    9f14:	00002106 	br	9f9c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9f18:	e0bfff17 	ldw	r2,-4(fp)
    9f1c:	10800003 	ldbu	r2,0(r2)
    9f20:	10803fcc 	andi	r2,r2,255
    9f24:	108000a0 	cmpeqi	r2,r2,2
    9f28:	1000021e 	bne	r2,zero,9f34 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    9f2c:	00800044 	movi	r2,1
    9f30:	00001a06 	br	9f9c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f34:	0005303a 	rdctl	r2,status
    9f38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f3c:	e0fffd17 	ldw	r3,-12(fp)
    9f40:	00bfff84 	movi	r2,-2
    9f44:	1884703a 	and	r2,r3,r2
    9f48:	1001703a 	wrctl	status,r2
  
  return context;
    9f4c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9f50:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    9f54:	e0bfff17 	ldw	r2,-4(fp)
    9f58:	10800117 	ldw	r2,4(r2)
    9f5c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    9f60:	e0bffc17 	ldw	r2,-16(fp)
    9f64:	10c00117 	ldw	r3,4(r2)
    9f68:	e0bffc17 	ldw	r2,-16(fp)
    9f6c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    9f70:	e0bffc17 	ldw	r2,-16(fp)
    9f74:	10c00117 	ldw	r3,4(r2)
    9f78:	e0bffc17 	ldw	r2,-16(fp)
    9f7c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    9f80:	e0bffc17 	ldw	r2,-16(fp)
    9f84:	1000058d 	sth	zero,22(r2)
    9f88:	e0bffb17 	ldw	r2,-20(fp)
    9f8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f90:	e0bffe17 	ldw	r2,-8(fp)
    9f94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9f98:	0005883a 	mov	r2,zero
}
    9f9c:	e037883a 	mov	sp,fp
    9fa0:	df000017 	ldw	fp,0(sp)
    9fa4:	dec00104 	addi	sp,sp,4
    9fa8:	f800283a 	ret

00009fac <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9fac:	defff304 	addi	sp,sp,-52
    9fb0:	dfc00c15 	stw	ra,48(sp)
    9fb4:	df000b15 	stw	fp,44(sp)
    9fb8:	df000b04 	addi	fp,sp,44
    9fbc:	e13ffd15 	stw	r4,-12(fp)
    9fc0:	2805883a 	mov	r2,r5
    9fc4:	e1bfff15 	stw	r6,-4(fp)
    9fc8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9fcc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9fd0:	e0bfff17 	ldw	r2,-4(fp)
    9fd4:	1000021e 	bne	r2,zero,9fe0 <OSQPend+0x34>
        return ((void *)0);
    9fd8:	0005883a 	mov	r2,zero
    9fdc:	0000ad06 	br	a294 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9fe0:	e0bffd17 	ldw	r2,-12(fp)
    9fe4:	1000051e 	bne	r2,zero,9ffc <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9fe8:	e0bfff17 	ldw	r2,-4(fp)
    9fec:	00c00104 	movi	r3,4
    9ff0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9ff4:	0005883a 	mov	r2,zero
    9ff8:	0000a606 	br	a294 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9ffc:	e0bffd17 	ldw	r2,-12(fp)
    a000:	10800003 	ldbu	r2,0(r2)
    a004:	10803fcc 	andi	r2,r2,255
    a008:	108000a0 	cmpeqi	r2,r2,2
    a00c:	1000051e 	bne	r2,zero,a024 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a010:	e0bfff17 	ldw	r2,-4(fp)
    a014:	00c00044 	movi	r3,1
    a018:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a01c:	0005883a 	mov	r2,zero
    a020:	00009c06 	br	a294 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    a024:	00800074 	movhi	r2,1
    a028:	10952c04 	addi	r2,r2,21680
    a02c:	10800003 	ldbu	r2,0(r2)
    a030:	10803fcc 	andi	r2,r2,255
    a034:	10000526 	beq	r2,zero,a04c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    a038:	e0bfff17 	ldw	r2,-4(fp)
    a03c:	00c00084 	movi	r3,2
    a040:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a044:	0005883a 	mov	r2,zero
    a048:	00009206 	br	a294 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    a04c:	00800074 	movhi	r2,1
    a050:	10951e04 	addi	r2,r2,21624
    a054:	10800003 	ldbu	r2,0(r2)
    a058:	10803fcc 	andi	r2,r2,255
    a05c:	10000526 	beq	r2,zero,a074 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    a060:	e0bfff17 	ldw	r2,-4(fp)
    a064:	00c00344 	movi	r3,13
    a068:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    a06c:	0005883a 	mov	r2,zero
    a070:	00008806 	br	a294 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a074:	0005303a 	rdctl	r2,status
    a078:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a07c:	e0fff817 	ldw	r3,-32(fp)
    a080:	00bfff84 	movi	r2,-2
    a084:	1884703a 	and	r2,r3,r2
    a088:	1001703a 	wrctl	status,r2
  
  return context;
    a08c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a090:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    a094:	e0bffd17 	ldw	r2,-12(fp)
    a098:	10800117 	ldw	r2,4(r2)
    a09c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    a0a0:	e0bff717 	ldw	r2,-36(fp)
    a0a4:	1080058b 	ldhu	r2,22(r2)
    a0a8:	10bfffcc 	andi	r2,r2,65535
    a0ac:	10001e26 	beq	r2,zero,a128 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    a0b0:	e0bff717 	ldw	r2,-36(fp)
    a0b4:	10800417 	ldw	r2,16(r2)
    a0b8:	11000104 	addi	r4,r2,4
    a0bc:	e0fff717 	ldw	r3,-36(fp)
    a0c0:	19000415 	stw	r4,16(r3)
    a0c4:	10800017 	ldw	r2,0(r2)
    a0c8:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    a0cc:	e0bff717 	ldw	r2,-36(fp)
    a0d0:	1080058b 	ldhu	r2,22(r2)
    a0d4:	10bfffc4 	addi	r2,r2,-1
    a0d8:	1007883a 	mov	r3,r2
    a0dc:	e0bff717 	ldw	r2,-36(fp)
    a0e0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    a0e4:	e0bff717 	ldw	r2,-36(fp)
    a0e8:	10c00417 	ldw	r3,16(r2)
    a0ec:	e0bff717 	ldw	r2,-36(fp)
    a0f0:	10800217 	ldw	r2,8(r2)
    a0f4:	1880041e 	bne	r3,r2,a108 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    a0f8:	e0bff717 	ldw	r2,-36(fp)
    a0fc:	10c00117 	ldw	r3,4(r2)
    a100:	e0bff717 	ldw	r2,-36(fp)
    a104:	10c00415 	stw	r3,16(r2)
    a108:	e0bff617 	ldw	r2,-40(fp)
    a10c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a110:	e0bff917 	ldw	r2,-28(fp)
    a114:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    a118:	e0bfff17 	ldw	r2,-4(fp)
    a11c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    a120:	e0bff517 	ldw	r2,-44(fp)
    a124:	00005b06 	br	a294 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    a128:	00800074 	movhi	r2,1
    a12c:	10952d04 	addi	r2,r2,21684
    a130:	10c00017 	ldw	r3,0(r2)
    a134:	00800074 	movhi	r2,1
    a138:	10952d04 	addi	r2,r2,21684
    a13c:	10800017 	ldw	r2,0(r2)
    a140:	10800c03 	ldbu	r2,48(r2)
    a144:	10800114 	ori	r2,r2,4
    a148:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    a14c:	00800074 	movhi	r2,1
    a150:	10952d04 	addi	r2,r2,21684
    a154:	10800017 	ldw	r2,0(r2)
    a158:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    a15c:	00800074 	movhi	r2,1
    a160:	10952d04 	addi	r2,r2,21684
    a164:	10800017 	ldw	r2,0(r2)
    a168:	e0fffe0b 	ldhu	r3,-8(fp)
    a16c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    a170:	e13ffd17 	ldw	r4,-12(fp)
    a174:	000686c0 	call	686c <OS_EventTaskWait>
    a178:	e0bff617 	ldw	r2,-40(fp)
    a17c:	e0bffa15 	stw	r2,-24(fp)
    a180:	e0bffa17 	ldw	r2,-24(fp)
    a184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    a188:	00070ec0 	call	70ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a18c:	0005303a 	rdctl	r2,status
    a190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a194:	e0fffb17 	ldw	r3,-20(fp)
    a198:	00bfff84 	movi	r2,-2
    a19c:	1884703a 	and	r2,r3,r2
    a1a0:	1001703a 	wrctl	status,r2
  
  return context;
    a1a4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    a1a8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    a1ac:	00800074 	movhi	r2,1
    a1b0:	10952d04 	addi	r2,r2,21684
    a1b4:	10800017 	ldw	r2,0(r2)
    a1b8:	10800c43 	ldbu	r2,49(r2)
    a1bc:	10803fcc 	andi	r2,r2,255
    a1c0:	10000326 	beq	r2,zero,a1d0 <OSQPend+0x224>
    a1c4:	108000a0 	cmpeqi	r2,r2,2
    a1c8:	1000091e 	bne	r2,zero,a1f0 <OSQPend+0x244>
    a1cc:	00000d06 	br	a204 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    a1d0:	00800074 	movhi	r2,1
    a1d4:	10952d04 	addi	r2,r2,21684
    a1d8:	10800017 	ldw	r2,0(r2)
    a1dc:	10800917 	ldw	r2,36(r2)
    a1e0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    a1e4:	e0bfff17 	ldw	r2,-4(fp)
    a1e8:	10000005 	stb	zero,0(r2)
             break;
    a1ec:	00001006 	br	a230 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    a1f0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    a1f4:	e0bfff17 	ldw	r2,-4(fp)
    a1f8:	00c00384 	movi	r3,14
    a1fc:	10c00005 	stb	r3,0(r2)
             break;
    a200:	00000b06 	br	a230 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    a204:	00800074 	movhi	r2,1
    a208:	10952d04 	addi	r2,r2,21684
    a20c:	10800017 	ldw	r2,0(r2)
    a210:	1009883a 	mov	r4,r2
    a214:	e17ffd17 	ldw	r5,-12(fp)
    a218:	0006ac40 	call	6ac4 <OS_EventTaskRemove>
             pmsg = (void *)0;
    a21c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    a220:	e0bfff17 	ldw	r2,-4(fp)
    a224:	00c00284 	movi	r3,10
    a228:	10c00005 	stb	r3,0(r2)
             break;
    a22c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    a230:	00800074 	movhi	r2,1
    a234:	10952d04 	addi	r2,r2,21684
    a238:	10800017 	ldw	r2,0(r2)
    a23c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    a240:	00800074 	movhi	r2,1
    a244:	10952d04 	addi	r2,r2,21684
    a248:	10800017 	ldw	r2,0(r2)
    a24c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    a250:	00800074 	movhi	r2,1
    a254:	10952d04 	addi	r2,r2,21684
    a258:	10800017 	ldw	r2,0(r2)
    a25c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    a260:	00800074 	movhi	r2,1
    a264:	10952d04 	addi	r2,r2,21684
    a268:	10800017 	ldw	r2,0(r2)
    a26c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    a270:	00800074 	movhi	r2,1
    a274:	10952d04 	addi	r2,r2,21684
    a278:	10800017 	ldw	r2,0(r2)
    a27c:	10000915 	stw	zero,36(r2)
    a280:	e0bff617 	ldw	r2,-40(fp)
    a284:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a288:	e0bffc17 	ldw	r2,-16(fp)
    a28c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    a290:	e0bff517 	ldw	r2,-44(fp)
}
    a294:	e037883a 	mov	sp,fp
    a298:	dfc00117 	ldw	ra,4(sp)
    a29c:	df000017 	ldw	fp,0(sp)
    a2a0:	dec00204 	addi	sp,sp,8
    a2a4:	f800283a 	ret

0000a2a8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a2a8:	defff604 	addi	sp,sp,-40
    a2ac:	dfc00915 	stw	ra,36(sp)
    a2b0:	df000815 	stw	fp,32(sp)
    a2b4:	df000804 	addi	fp,sp,32
    a2b8:	e13ffd15 	stw	r4,-12(fp)
    a2bc:	2805883a 	mov	r2,r5
    a2c0:	e1bfff15 	stw	r6,-4(fp)
    a2c4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a2c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a2cc:	e0bfff17 	ldw	r2,-4(fp)
    a2d0:	1000021e 	bne	r2,zero,a2dc <OSQPendAbort+0x34>
        return (0);
    a2d4:	0005883a 	mov	r2,zero
    a2d8:	00004906 	br	a400 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a2dc:	e0bffd17 	ldw	r2,-12(fp)
    a2e0:	1000051e 	bne	r2,zero,a2f8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a2e4:	e0bfff17 	ldw	r2,-4(fp)
    a2e8:	00c00104 	movi	r3,4
    a2ec:	10c00005 	stb	r3,0(r2)
        return (0);
    a2f0:	0005883a 	mov	r2,zero
    a2f4:	00004206 	br	a400 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    a2f8:	e0bffd17 	ldw	r2,-12(fp)
    a2fc:	10800003 	ldbu	r2,0(r2)
    a300:	10803fcc 	andi	r2,r2,255
    a304:	108000a0 	cmpeqi	r2,r2,2
    a308:	1000051e 	bne	r2,zero,a320 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a30c:	e0bfff17 	ldw	r2,-4(fp)
    a310:	00c00044 	movi	r3,1
    a314:	10c00005 	stb	r3,0(r2)
        return (0);
    a318:	0005883a 	mov	r2,zero
    a31c:	00003806 	br	a400 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a320:	0005303a 	rdctl	r2,status
    a324:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a328:	e0fffa17 	ldw	r3,-24(fp)
    a32c:	00bfff84 	movi	r2,-2
    a330:	1884703a 	and	r2,r3,r2
    a334:	1001703a 	wrctl	status,r2
  
  return context;
    a338:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a33c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    a340:	e0bffd17 	ldw	r2,-12(fp)
    a344:	10800283 	ldbu	r2,10(r2)
    a348:	10803fcc 	andi	r2,r2,255
    a34c:	10002526 	beq	r2,zero,a3e4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    a350:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    a354:	e0bffe03 	ldbu	r2,-8(fp)
    a358:	10800060 	cmpeqi	r2,r2,1
    a35c:	10000e26 	beq	r2,zero,a398 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    a360:	00000806 	br	a384 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    a364:	e13ffd17 	ldw	r4,-12(fp)
    a368:	000b883a 	mov	r5,zero
    a36c:	01800104 	movi	r6,4
    a370:	01c00084 	movi	r7,2
    a374:	00066d40 	call	66d4 <OS_EventTaskRdy>
                     nbr_tasks++;
    a378:	e0bff803 	ldbu	r2,-32(fp)
    a37c:	10800044 	addi	r2,r2,1
    a380:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    a384:	e0bffd17 	ldw	r2,-12(fp)
    a388:	10800283 	ldbu	r2,10(r2)
    a38c:	10803fcc 	andi	r2,r2,255
    a390:	103ff41e 	bne	r2,zero,a364 <__alt_mem_Flash_flash_data+0xf400a364>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    a394:	00000906 	br	a3bc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    a398:	e13ffd17 	ldw	r4,-12(fp)
    a39c:	000b883a 	mov	r5,zero
    a3a0:	01800104 	movi	r6,4
    a3a4:	01c00084 	movi	r7,2
    a3a8:	00066d40 	call	66d4 <OS_EventTaskRdy>
                 nbr_tasks++;
    a3ac:	e0bff803 	ldbu	r2,-32(fp)
    a3b0:	10800044 	addi	r2,r2,1
    a3b4:	e0bff805 	stb	r2,-32(fp)
                 break;
    a3b8:	0001883a 	nop
    a3bc:	e0bff917 	ldw	r2,-28(fp)
    a3c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3c4:	e0bffb17 	ldw	r2,-20(fp)
    a3c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    a3cc:	00070ec0 	call	70ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    a3d0:	e0bfff17 	ldw	r2,-4(fp)
    a3d4:	00c00384 	movi	r3,14
    a3d8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    a3dc:	e0bff803 	ldbu	r2,-32(fp)
    a3e0:	00000706 	br	a400 <OSQPendAbort+0x158>
    a3e4:	e0bff917 	ldw	r2,-28(fp)
    a3e8:	e0bffc15 	stw	r2,-16(fp)
    a3ec:	e0bffc17 	ldw	r2,-16(fp)
    a3f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a3f4:	e0bfff17 	ldw	r2,-4(fp)
    a3f8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    a3fc:	0005883a 	mov	r2,zero
}
    a400:	e037883a 	mov	sp,fp
    a404:	dfc00117 	ldw	ra,4(sp)
    a408:	df000017 	ldw	fp,0(sp)
    a40c:	dec00204 	addi	sp,sp,8
    a410:	f800283a 	ret

0000a414 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    a414:	defff604 	addi	sp,sp,-40
    a418:	dfc00915 	stw	ra,36(sp)
    a41c:	df000815 	stw	fp,32(sp)
    a420:	df000804 	addi	fp,sp,32
    a424:	e13ffe15 	stw	r4,-8(fp)
    a428:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a42c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a430:	e0bffe17 	ldw	r2,-8(fp)
    a434:	1000021e 	bne	r2,zero,a440 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a438:	00800104 	movi	r2,4
    a43c:	00004a06 	br	a568 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a440:	e0bffe17 	ldw	r2,-8(fp)
    a444:	10800003 	ldbu	r2,0(r2)
    a448:	10803fcc 	andi	r2,r2,255
    a44c:	108000a0 	cmpeqi	r2,r2,2
    a450:	1000021e 	bne	r2,zero,a45c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    a454:	00800044 	movi	r2,1
    a458:	00004306 	br	a568 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a45c:	0005303a 	rdctl	r2,status
    a460:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a464:	e0fffa17 	ldw	r3,-24(fp)
    a468:	00bfff84 	movi	r2,-2
    a46c:	1884703a 	and	r2,r3,r2
    a470:	1001703a 	wrctl	status,r2
  
  return context;
    a474:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a478:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    a47c:	e0bffe17 	ldw	r2,-8(fp)
    a480:	10800283 	ldbu	r2,10(r2)
    a484:	10803fcc 	andi	r2,r2,255
    a488:	10000c26 	beq	r2,zero,a4bc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a48c:	e13ffe17 	ldw	r4,-8(fp)
    a490:	e17fff17 	ldw	r5,-4(fp)
    a494:	01800104 	movi	r6,4
    a498:	000f883a 	mov	r7,zero
    a49c:	00066d40 	call	66d4 <OS_EventTaskRdy>
    a4a0:	e0bff817 	ldw	r2,-32(fp)
    a4a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4a8:	e0bffb17 	ldw	r2,-20(fp)
    a4ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    a4b0:	00070ec0 	call	70ec <OS_Sched>
        return (OS_ERR_NONE);
    a4b4:	0005883a 	mov	r2,zero
    a4b8:	00002b06 	br	a568 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    a4bc:	e0bffe17 	ldw	r2,-8(fp)
    a4c0:	10800117 	ldw	r2,4(r2)
    a4c4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    a4c8:	e0bff917 	ldw	r2,-28(fp)
    a4cc:	10c0058b 	ldhu	r3,22(r2)
    a4d0:	e0bff917 	ldw	r2,-28(fp)
    a4d4:	1080050b 	ldhu	r2,20(r2)
    a4d8:	18ffffcc 	andi	r3,r3,65535
    a4dc:	10bfffcc 	andi	r2,r2,65535
    a4e0:	18800636 	bltu	r3,r2,a4fc <OSQPost+0xe8>
    a4e4:	e0bff817 	ldw	r2,-32(fp)
    a4e8:	e0bffc15 	stw	r2,-16(fp)
    a4ec:	e0bffc17 	ldw	r2,-16(fp)
    a4f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a4f4:	00800784 	movi	r2,30
    a4f8:	00001b06 	br	a568 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    a4fc:	e0bff917 	ldw	r2,-28(fp)
    a500:	10800317 	ldw	r2,12(r2)
    a504:	11000104 	addi	r4,r2,4
    a508:	e0fff917 	ldw	r3,-28(fp)
    a50c:	19000315 	stw	r4,12(r3)
    a510:	e0ffff17 	ldw	r3,-4(fp)
    a514:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    a518:	e0bff917 	ldw	r2,-28(fp)
    a51c:	1080058b 	ldhu	r2,22(r2)
    a520:	10800044 	addi	r2,r2,1
    a524:	1007883a 	mov	r3,r2
    a528:	e0bff917 	ldw	r2,-28(fp)
    a52c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    a530:	e0bff917 	ldw	r2,-28(fp)
    a534:	10c00317 	ldw	r3,12(r2)
    a538:	e0bff917 	ldw	r2,-28(fp)
    a53c:	10800217 	ldw	r2,8(r2)
    a540:	1880041e 	bne	r3,r2,a554 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    a544:	e0bff917 	ldw	r2,-28(fp)
    a548:	10c00117 	ldw	r3,4(r2)
    a54c:	e0bff917 	ldw	r2,-28(fp)
    a550:	10c00315 	stw	r3,12(r2)
    a554:	e0bff817 	ldw	r2,-32(fp)
    a558:	e0bffd15 	stw	r2,-12(fp)
    a55c:	e0bffd17 	ldw	r2,-12(fp)
    a560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a564:	0005883a 	mov	r2,zero
}
    a568:	e037883a 	mov	sp,fp
    a56c:	dfc00117 	ldw	ra,4(sp)
    a570:	df000017 	ldw	fp,0(sp)
    a574:	dec00204 	addi	sp,sp,8
    a578:	f800283a 	ret

0000a57c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    a57c:	defff604 	addi	sp,sp,-40
    a580:	dfc00915 	stw	ra,36(sp)
    a584:	df000815 	stw	fp,32(sp)
    a588:	df000804 	addi	fp,sp,32
    a58c:	e13ffe15 	stw	r4,-8(fp)
    a590:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a594:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a598:	e0bffe17 	ldw	r2,-8(fp)
    a59c:	1000021e 	bne	r2,zero,a5a8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a5a0:	00800104 	movi	r2,4
    a5a4:	00004c06 	br	a6d8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a5a8:	e0bffe17 	ldw	r2,-8(fp)
    a5ac:	10800003 	ldbu	r2,0(r2)
    a5b0:	10803fcc 	andi	r2,r2,255
    a5b4:	108000a0 	cmpeqi	r2,r2,2
    a5b8:	1000021e 	bne	r2,zero,a5c4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    a5bc:	00800044 	movi	r2,1
    a5c0:	00004506 	br	a6d8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a5c4:	0005303a 	rdctl	r2,status
    a5c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5cc:	e0fffa17 	ldw	r3,-24(fp)
    a5d0:	00bfff84 	movi	r2,-2
    a5d4:	1884703a 	and	r2,r3,r2
    a5d8:	1001703a 	wrctl	status,r2
  
  return context;
    a5dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a5e0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    a5e4:	e0bffe17 	ldw	r2,-8(fp)
    a5e8:	10800283 	ldbu	r2,10(r2)
    a5ec:	10803fcc 	andi	r2,r2,255
    a5f0:	10000c26 	beq	r2,zero,a624 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a5f4:	e13ffe17 	ldw	r4,-8(fp)
    a5f8:	e17fff17 	ldw	r5,-4(fp)
    a5fc:	01800104 	movi	r6,4
    a600:	000f883a 	mov	r7,zero
    a604:	00066d40 	call	66d4 <OS_EventTaskRdy>
    a608:	e0bff817 	ldw	r2,-32(fp)
    a60c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a610:	e0bffb17 	ldw	r2,-20(fp)
    a614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    a618:	00070ec0 	call	70ec <OS_Sched>
        return (OS_ERR_NONE);
    a61c:	0005883a 	mov	r2,zero
    a620:	00002d06 	br	a6d8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a624:	e0bffe17 	ldw	r2,-8(fp)
    a628:	10800117 	ldw	r2,4(r2)
    a62c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a630:	e0bff917 	ldw	r2,-28(fp)
    a634:	10c0058b 	ldhu	r3,22(r2)
    a638:	e0bff917 	ldw	r2,-28(fp)
    a63c:	1080050b 	ldhu	r2,20(r2)
    a640:	18ffffcc 	andi	r3,r3,65535
    a644:	10bfffcc 	andi	r2,r2,65535
    a648:	18800636 	bltu	r3,r2,a664 <OSQPostFront+0xe8>
    a64c:	e0bff817 	ldw	r2,-32(fp)
    a650:	e0bffc15 	stw	r2,-16(fp)
    a654:	e0bffc17 	ldw	r2,-16(fp)
    a658:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a65c:	00800784 	movi	r2,30
    a660:	00001d06 	br	a6d8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    a664:	e0bff917 	ldw	r2,-28(fp)
    a668:	10c00417 	ldw	r3,16(r2)
    a66c:	e0bff917 	ldw	r2,-28(fp)
    a670:	10800117 	ldw	r2,4(r2)
    a674:	1880041e 	bne	r3,r2,a688 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    a678:	e0bff917 	ldw	r2,-28(fp)
    a67c:	10c00217 	ldw	r3,8(r2)
    a680:	e0bff917 	ldw	r2,-28(fp)
    a684:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    a688:	e0bff917 	ldw	r2,-28(fp)
    a68c:	10800417 	ldw	r2,16(r2)
    a690:	10ffff04 	addi	r3,r2,-4
    a694:	e0bff917 	ldw	r2,-28(fp)
    a698:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    a69c:	e0bff917 	ldw	r2,-28(fp)
    a6a0:	10800417 	ldw	r2,16(r2)
    a6a4:	e0ffff17 	ldw	r3,-4(fp)
    a6a8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a6ac:	e0bff917 	ldw	r2,-28(fp)
    a6b0:	1080058b 	ldhu	r2,22(r2)
    a6b4:	10800044 	addi	r2,r2,1
    a6b8:	1007883a 	mov	r3,r2
    a6bc:	e0bff917 	ldw	r2,-28(fp)
    a6c0:	10c0058d 	sth	r3,22(r2)
    a6c4:	e0bff817 	ldw	r2,-32(fp)
    a6c8:	e0bffd15 	stw	r2,-12(fp)
    a6cc:	e0bffd17 	ldw	r2,-12(fp)
    a6d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a6d4:	0005883a 	mov	r2,zero
}
    a6d8:	e037883a 	mov	sp,fp
    a6dc:	dfc00117 	ldw	ra,4(sp)
    a6e0:	df000017 	ldw	fp,0(sp)
    a6e4:	dec00204 	addi	sp,sp,8
    a6e8:	f800283a 	ret

0000a6ec <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    a6ec:	defff504 	addi	sp,sp,-44
    a6f0:	dfc00a15 	stw	ra,40(sp)
    a6f4:	df000915 	stw	fp,36(sp)
    a6f8:	df000904 	addi	fp,sp,36
    a6fc:	e13ffd15 	stw	r4,-12(fp)
    a700:	e17ffe15 	stw	r5,-8(fp)
    a704:	3005883a 	mov	r2,r6
    a708:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a70c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a710:	e0bffd17 	ldw	r2,-12(fp)
    a714:	1000021e 	bne	r2,zero,a720 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    a718:	00800104 	movi	r2,4
    a71c:	00007106 	br	a8e4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a720:	e0bffd17 	ldw	r2,-12(fp)
    a724:	10800003 	ldbu	r2,0(r2)
    a728:	10803fcc 	andi	r2,r2,255
    a72c:	108000a0 	cmpeqi	r2,r2,2
    a730:	1000021e 	bne	r2,zero,a73c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    a734:	00800044 	movi	r2,1
    a738:	00006a06 	br	a8e4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a73c:	0005303a 	rdctl	r2,status
    a740:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a744:	e0fff917 	ldw	r3,-28(fp)
    a748:	00bfff84 	movi	r2,-2
    a74c:	1884703a 	and	r2,r3,r2
    a750:	1001703a 	wrctl	status,r2
  
  return context;
    a754:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    a758:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    a75c:	e0bffd17 	ldw	r2,-12(fp)
    a760:	10800283 	ldbu	r2,10(r2)
    a764:	10803fcc 	andi	r2,r2,255
    a768:	10001d26 	beq	r2,zero,a7e0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    a76c:	e0bfff03 	ldbu	r2,-4(fp)
    a770:	1080004c 	andi	r2,r2,1
    a774:	10000b26 	beq	r2,zero,a7a4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a778:	00000506 	br	a790 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a77c:	e13ffd17 	ldw	r4,-12(fp)
    a780:	e17ffe17 	ldw	r5,-8(fp)
    a784:	01800104 	movi	r6,4
    a788:	000f883a 	mov	r7,zero
    a78c:	00066d40 	call	66d4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a790:	e0bffd17 	ldw	r2,-12(fp)
    a794:	10800283 	ldbu	r2,10(r2)
    a798:	10803fcc 	andi	r2,r2,255
    a79c:	103ff71e 	bne	r2,zero,a77c <__alt_mem_Flash_flash_data+0xf400a77c>
    a7a0:	00000506 	br	a7b8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a7a4:	e13ffd17 	ldw	r4,-12(fp)
    a7a8:	e17ffe17 	ldw	r5,-8(fp)
    a7ac:	01800104 	movi	r6,4
    a7b0:	000f883a 	mov	r7,zero
    a7b4:	00066d40 	call	66d4 <OS_EventTaskRdy>
    a7b8:	e0bff717 	ldw	r2,-36(fp)
    a7bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7c0:	e0bffa17 	ldw	r2,-24(fp)
    a7c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    a7c8:	e0bfff03 	ldbu	r2,-4(fp)
    a7cc:	1080010c 	andi	r2,r2,4
    a7d0:	1000011e 	bne	r2,zero,a7d8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    a7d4:	00070ec0 	call	70ec <OS_Sched>
        }
        return (OS_ERR_NONE);
    a7d8:	0005883a 	mov	r2,zero
    a7dc:	00004106 	br	a8e4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a7e0:	e0bffd17 	ldw	r2,-12(fp)
    a7e4:	10800117 	ldw	r2,4(r2)
    a7e8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a7ec:	e0bff817 	ldw	r2,-32(fp)
    a7f0:	10c0058b 	ldhu	r3,22(r2)
    a7f4:	e0bff817 	ldw	r2,-32(fp)
    a7f8:	1080050b 	ldhu	r2,20(r2)
    a7fc:	18ffffcc 	andi	r3,r3,65535
    a800:	10bfffcc 	andi	r2,r2,65535
    a804:	18800636 	bltu	r3,r2,a820 <OSQPostOpt+0x134>
    a808:	e0bff717 	ldw	r2,-36(fp)
    a80c:	e0bffb15 	stw	r2,-20(fp)
    a810:	e0bffb17 	ldw	r2,-20(fp)
    a814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a818:	00800784 	movi	r2,30
    a81c:	00003106 	br	a8e4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    a820:	e0bfff03 	ldbu	r2,-4(fp)
    a824:	1080008c 	andi	r2,r2,2
    a828:	10001326 	beq	r2,zero,a878 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    a82c:	e0bff817 	ldw	r2,-32(fp)
    a830:	10c00417 	ldw	r3,16(r2)
    a834:	e0bff817 	ldw	r2,-32(fp)
    a838:	10800117 	ldw	r2,4(r2)
    a83c:	1880041e 	bne	r3,r2,a850 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    a840:	e0bff817 	ldw	r2,-32(fp)
    a844:	10c00217 	ldw	r3,8(r2)
    a848:	e0bff817 	ldw	r2,-32(fp)
    a84c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    a850:	e0bff817 	ldw	r2,-32(fp)
    a854:	10800417 	ldw	r2,16(r2)
    a858:	10ffff04 	addi	r3,r2,-4
    a85c:	e0bff817 	ldw	r2,-32(fp)
    a860:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    a864:	e0bff817 	ldw	r2,-32(fp)
    a868:	10800417 	ldw	r2,16(r2)
    a86c:	e0fffe17 	ldw	r3,-8(fp)
    a870:	10c00015 	stw	r3,0(r2)
    a874:	00001006 	br	a8b8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    a878:	e0bff817 	ldw	r2,-32(fp)
    a87c:	10800317 	ldw	r2,12(r2)
    a880:	11000104 	addi	r4,r2,4
    a884:	e0fff817 	ldw	r3,-32(fp)
    a888:	19000315 	stw	r4,12(r3)
    a88c:	e0fffe17 	ldw	r3,-8(fp)
    a890:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    a894:	e0bff817 	ldw	r2,-32(fp)
    a898:	10c00317 	ldw	r3,12(r2)
    a89c:	e0bff817 	ldw	r2,-32(fp)
    a8a0:	10800217 	ldw	r2,8(r2)
    a8a4:	1880041e 	bne	r3,r2,a8b8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    a8a8:	e0bff817 	ldw	r2,-32(fp)
    a8ac:	10c00117 	ldw	r3,4(r2)
    a8b0:	e0bff817 	ldw	r2,-32(fp)
    a8b4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a8b8:	e0bff817 	ldw	r2,-32(fp)
    a8bc:	1080058b 	ldhu	r2,22(r2)
    a8c0:	10800044 	addi	r2,r2,1
    a8c4:	1007883a 	mov	r3,r2
    a8c8:	e0bff817 	ldw	r2,-32(fp)
    a8cc:	10c0058d 	sth	r3,22(r2)
    a8d0:	e0bff717 	ldw	r2,-36(fp)
    a8d4:	e0bffc15 	stw	r2,-16(fp)
    a8d8:	e0bffc17 	ldw	r2,-16(fp)
    a8dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a8e0:	0005883a 	mov	r2,zero
}
    a8e4:	e037883a 	mov	sp,fp
    a8e8:	dfc00117 	ldw	ra,4(sp)
    a8ec:	df000017 	ldw	fp,0(sp)
    a8f0:	dec00204 	addi	sp,sp,8
    a8f4:	f800283a 	ret

0000a8f8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    a8f8:	defff604 	addi	sp,sp,-40
    a8fc:	df000915 	stw	fp,36(sp)
    a900:	df000904 	addi	fp,sp,36
    a904:	e13ffe15 	stw	r4,-8(fp)
    a908:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a90c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a910:	e0bffe17 	ldw	r2,-8(fp)
    a914:	1000021e 	bne	r2,zero,a920 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a918:	00800104 	movi	r2,4
    a91c:	00004906 	br	aa44 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    a920:	e0bfff17 	ldw	r2,-4(fp)
    a924:	1000021e 	bne	r2,zero,a930 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a928:	00800244 	movi	r2,9
    a92c:	00004506 	br	aa44 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a930:	e0bffe17 	ldw	r2,-8(fp)
    a934:	10800003 	ldbu	r2,0(r2)
    a938:	10803fcc 	andi	r2,r2,255
    a93c:	108000a0 	cmpeqi	r2,r2,2
    a940:	1000021e 	bne	r2,zero,a94c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a944:	00800044 	movi	r2,1
    a948:	00003e06 	br	aa44 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a94c:	0005303a 	rdctl	r2,status
    a950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a954:	e0fffc17 	ldw	r3,-16(fp)
    a958:	00bfff84 	movi	r2,-2
    a95c:	1884703a 	and	r2,r3,r2
    a960:	1001703a 	wrctl	status,r2
  
  return context;
    a964:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a968:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    a96c:	e0bffe17 	ldw	r2,-8(fp)
    a970:	10c00283 	ldbu	r3,10(r2)
    a974:	e0bfff17 	ldw	r2,-4(fp)
    a978:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    a97c:	e0bffe17 	ldw	r2,-8(fp)
    a980:	108002c4 	addi	r2,r2,11
    a984:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    a988:	e0bfff17 	ldw	r2,-4(fp)
    a98c:	10800204 	addi	r2,r2,8
    a990:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a994:	e03ff705 	stb	zero,-36(fp)
    a998:	00000b06 	br	a9c8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    a99c:	e0bff917 	ldw	r2,-28(fp)
    a9a0:	10c00044 	addi	r3,r2,1
    a9a4:	e0fff915 	stw	r3,-28(fp)
    a9a8:	e0fff817 	ldw	r3,-32(fp)
    a9ac:	19000044 	addi	r4,r3,1
    a9b0:	e13ff815 	stw	r4,-32(fp)
    a9b4:	18c00003 	ldbu	r3,0(r3)
    a9b8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a9bc:	e0bff703 	ldbu	r2,-36(fp)
    a9c0:	10800044 	addi	r2,r2,1
    a9c4:	e0bff705 	stb	r2,-36(fp)
    a9c8:	e0bff703 	ldbu	r2,-36(fp)
    a9cc:	108000f0 	cmpltui	r2,r2,3
    a9d0:	103ff21e 	bne	r2,zero,a99c <__alt_mem_Flash_flash_data+0xf400a99c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    a9d4:	e0bffe17 	ldw	r2,-8(fp)
    a9d8:	10800117 	ldw	r2,4(r2)
    a9dc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    a9e0:	e0bffb17 	ldw	r2,-20(fp)
    a9e4:	1080058b 	ldhu	r2,22(r2)
    a9e8:	10bfffcc 	andi	r2,r2,65535
    a9ec:	10000626 	beq	r2,zero,aa08 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    a9f0:	e0bffb17 	ldw	r2,-20(fp)
    a9f4:	10800417 	ldw	r2,16(r2)
    a9f8:	10c00017 	ldw	r3,0(r2)
    a9fc:	e0bfff17 	ldw	r2,-4(fp)
    aa00:	10c00015 	stw	r3,0(r2)
    aa04:	00000206 	br	aa10 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    aa08:	e0bfff17 	ldw	r2,-4(fp)
    aa0c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    aa10:	e0bffb17 	ldw	r2,-20(fp)
    aa14:	10c0058b 	ldhu	r3,22(r2)
    aa18:	e0bfff17 	ldw	r2,-4(fp)
    aa1c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    aa20:	e0bffb17 	ldw	r2,-20(fp)
    aa24:	10c0050b 	ldhu	r3,20(r2)
    aa28:	e0bfff17 	ldw	r2,-4(fp)
    aa2c:	10c0018d 	sth	r3,6(r2)
    aa30:	e0bffa17 	ldw	r2,-24(fp)
    aa34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aa38:	e0bffd17 	ldw	r2,-12(fp)
    aa3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    aa40:	0005883a 	mov	r2,zero
}
    aa44:	e037883a 	mov	sp,fp
    aa48:	df000017 	ldw	fp,0(sp)
    aa4c:	dec00104 	addi	sp,sp,4
    aa50:	f800283a 	ret

0000aa54 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    aa54:	defffb04 	addi	sp,sp,-20
    aa58:	dfc00415 	stw	ra,16(sp)
    aa5c:	df000315 	stw	fp,12(sp)
    aa60:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    aa64:	010000b4 	movhi	r4,2
    aa68:	21032804 	addi	r4,r4,3232
    aa6c:	01407804 	movi	r5,480
    aa70:	00070380 	call	7038 <OS_MemClr>
    pq1 = &OSQTbl[0];
    aa74:	008000b4 	movhi	r2,2
    aa78:	10832804 	addi	r2,r2,3232
    aa7c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    aa80:	008000b4 	movhi	r2,2
    aa84:	10832e04 	addi	r2,r2,3256
    aa88:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    aa8c:	e03ffd0d 	sth	zero,-12(fp)
    aa90:	00000c06 	br	aac4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    aa94:	e0bffe17 	ldw	r2,-8(fp)
    aa98:	e0ffff17 	ldw	r3,-4(fp)
    aa9c:	10c00015 	stw	r3,0(r2)
        pq1++;
    aaa0:	e0bffe17 	ldw	r2,-8(fp)
    aaa4:	10800604 	addi	r2,r2,24
    aaa8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    aaac:	e0bfff17 	ldw	r2,-4(fp)
    aab0:	10800604 	addi	r2,r2,24
    aab4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    aab8:	e0bffd0b 	ldhu	r2,-12(fp)
    aabc:	10800044 	addi	r2,r2,1
    aac0:	e0bffd0d 	sth	r2,-12(fp)
    aac4:	e0bffd0b 	ldhu	r2,-12(fp)
    aac8:	108004f0 	cmpltui	r2,r2,19
    aacc:	103ff11e 	bne	r2,zero,aa94 <__alt_mem_Flash_flash_data+0xf400aa94>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    aad0:	e0bffe17 	ldw	r2,-8(fp)
    aad4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    aad8:	00800074 	movhi	r2,1
    aadc:	10952904 	addi	r2,r2,21668
    aae0:	00c000b4 	movhi	r3,2
    aae4:	18c32804 	addi	r3,r3,3232
    aae8:	10c00015 	stw	r3,0(r2)
#endif
}
    aaec:	e037883a 	mov	sp,fp
    aaf0:	dfc00117 	ldw	ra,4(sp)
    aaf4:	df000017 	ldw	fp,0(sp)
    aaf8:	dec00204 	addi	sp,sp,8
    aafc:	f800283a 	ret

0000ab00 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    ab00:	defffa04 	addi	sp,sp,-24
    ab04:	df000515 	stw	fp,20(sp)
    ab08:	df000504 	addi	fp,sp,20
    ab0c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ab10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    ab14:	e0bfff17 	ldw	r2,-4(fp)
    ab18:	1000021e 	bne	r2,zero,ab24 <OSSemAccept+0x24>
        return (0);
    ab1c:	0005883a 	mov	r2,zero
    ab20:	00001f06 	br	aba0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    ab24:	e0bfff17 	ldw	r2,-4(fp)
    ab28:	10800003 	ldbu	r2,0(r2)
    ab2c:	10803fcc 	andi	r2,r2,255
    ab30:	108000e0 	cmpeqi	r2,r2,3
    ab34:	1000021e 	bne	r2,zero,ab40 <OSSemAccept+0x40>
        return (0);
    ab38:	0005883a 	mov	r2,zero
    ab3c:	00001806 	br	aba0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ab40:	0005303a 	rdctl	r2,status
    ab44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ab48:	e0fffd17 	ldw	r3,-12(fp)
    ab4c:	00bfff84 	movi	r2,-2
    ab50:	1884703a 	and	r2,r3,r2
    ab54:	1001703a 	wrctl	status,r2
  
  return context;
    ab58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    ab5c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    ab60:	e0bfff17 	ldw	r2,-4(fp)
    ab64:	1080020b 	ldhu	r2,8(r2)
    ab68:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    ab6c:	e0bffc0b 	ldhu	r2,-16(fp)
    ab70:	10000626 	beq	r2,zero,ab8c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    ab74:	e0bfff17 	ldw	r2,-4(fp)
    ab78:	1080020b 	ldhu	r2,8(r2)
    ab7c:	10bfffc4 	addi	r2,r2,-1
    ab80:	1007883a 	mov	r3,r2
    ab84:	e0bfff17 	ldw	r2,-4(fp)
    ab88:	10c0020d 	sth	r3,8(r2)
    ab8c:	e0bffb17 	ldw	r2,-20(fp)
    ab90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    ab9c:	e0bffc0b 	ldhu	r2,-16(fp)
}
    aba0:	e037883a 	mov	sp,fp
    aba4:	df000017 	ldw	fp,0(sp)
    aba8:	dec00104 	addi	sp,sp,4
    abac:	f800283a 	ret

0000abb0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    abb0:	defff904 	addi	sp,sp,-28
    abb4:	dfc00615 	stw	ra,24(sp)
    abb8:	df000515 	stw	fp,20(sp)
    abbc:	df000504 	addi	fp,sp,20
    abc0:	2005883a 	mov	r2,r4
    abc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    abc8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    abcc:	00800074 	movhi	r2,1
    abd0:	10952c04 	addi	r2,r2,21680
    abd4:	10800003 	ldbu	r2,0(r2)
    abd8:	10803fcc 	andi	r2,r2,255
    abdc:	10000226 	beq	r2,zero,abe8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    abe0:	0005883a 	mov	r2,zero
    abe4:	00002d06 	br	ac9c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    abe8:	0005303a 	rdctl	r2,status
    abec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abf0:	e0fffd17 	ldw	r3,-12(fp)
    abf4:	00bfff84 	movi	r2,-2
    abf8:	1884703a 	and	r2,r3,r2
    abfc:	1001703a 	wrctl	status,r2
  
  return context;
    ac00:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    ac04:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    ac08:	00800074 	movhi	r2,1
    ac0c:	10952b04 	addi	r2,r2,21676
    ac10:	10800017 	ldw	r2,0(r2)
    ac14:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    ac18:	00800074 	movhi	r2,1
    ac1c:	10952b04 	addi	r2,r2,21676
    ac20:	10800017 	ldw	r2,0(r2)
    ac24:	10000726 	beq	r2,zero,ac44 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    ac28:	00800074 	movhi	r2,1
    ac2c:	10952b04 	addi	r2,r2,21676
    ac30:	10800017 	ldw	r2,0(r2)
    ac34:	10c00117 	ldw	r3,4(r2)
    ac38:	00800074 	movhi	r2,1
    ac3c:	10952b04 	addi	r2,r2,21676
    ac40:	10c00015 	stw	r3,0(r2)
    ac44:	e0bffb17 	ldw	r2,-20(fp)
    ac48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ac4c:	e0bffe17 	ldw	r2,-8(fp)
    ac50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    ac54:	e0bffc17 	ldw	r2,-16(fp)
    ac58:	10000f26 	beq	r2,zero,ac98 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    ac5c:	e0bffc17 	ldw	r2,-16(fp)
    ac60:	00c000c4 	movi	r3,3
    ac64:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    ac68:	e0bffc17 	ldw	r2,-16(fp)
    ac6c:	e0ffff0b 	ldhu	r3,-4(fp)
    ac70:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    ac74:	e0bffc17 	ldw	r2,-16(fp)
    ac78:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    ac7c:	e0bffc17 	ldw	r2,-16(fp)
    ac80:	00c00fc4 	movi	r3,63
    ac84:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    ac88:	e0bffc17 	ldw	r2,-16(fp)
    ac8c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    ac90:	e13ffc17 	ldw	r4,-16(fp)
    ac94:	0006c740 	call	6c74 <OS_EventWaitListInit>
    }
    return (pevent);
    ac98:	e0bffc17 	ldw	r2,-16(fp)
}
    ac9c:	e037883a 	mov	sp,fp
    aca0:	dfc00117 	ldw	ra,4(sp)
    aca4:	df000017 	ldw	fp,0(sp)
    aca8:	dec00204 	addi	sp,sp,8
    acac:	f800283a 	ret

0000acb0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    acb0:	defff304 	addi	sp,sp,-52
    acb4:	dfc00c15 	stw	ra,48(sp)
    acb8:	df000b15 	stw	fp,44(sp)
    acbc:	df000b04 	addi	fp,sp,44
    acc0:	e13ffd15 	stw	r4,-12(fp)
    acc4:	2805883a 	mov	r2,r5
    acc8:	e1bfff15 	stw	r6,-4(fp)
    accc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    acd0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    acd4:	e0bfff17 	ldw	r2,-4(fp)
    acd8:	1000021e 	bne	r2,zero,ace4 <OSSemDel+0x34>
        return (pevent);
    acdc:	e0bffd17 	ldw	r2,-12(fp)
    ace0:	00008806 	br	af04 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    ace4:	e0bffd17 	ldw	r2,-12(fp)
    ace8:	1000051e 	bne	r2,zero,ad00 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    acec:	e0bfff17 	ldw	r2,-4(fp)
    acf0:	00c00104 	movi	r3,4
    acf4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    acf8:	e0bffd17 	ldw	r2,-12(fp)
    acfc:	00008106 	br	af04 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    ad00:	e0bffd17 	ldw	r2,-12(fp)
    ad04:	10800003 	ldbu	r2,0(r2)
    ad08:	10803fcc 	andi	r2,r2,255
    ad0c:	108000e0 	cmpeqi	r2,r2,3
    ad10:	1000051e 	bne	r2,zero,ad28 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    ad14:	e0bfff17 	ldw	r2,-4(fp)
    ad18:	00c00044 	movi	r3,1
    ad1c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    ad20:	e0bffd17 	ldw	r2,-12(fp)
    ad24:	00007706 	br	af04 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    ad28:	00800074 	movhi	r2,1
    ad2c:	10952c04 	addi	r2,r2,21680
    ad30:	10800003 	ldbu	r2,0(r2)
    ad34:	10803fcc 	andi	r2,r2,255
    ad38:	10000526 	beq	r2,zero,ad50 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    ad3c:	e0bfff17 	ldw	r2,-4(fp)
    ad40:	00c003c4 	movi	r3,15
    ad44:	10c00005 	stb	r3,0(r2)
        return (pevent);
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	00006d06 	br	af04 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ad50:	0005303a 	rdctl	r2,status
    ad54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ad58:	e0fff817 	ldw	r3,-32(fp)
    ad5c:	00bfff84 	movi	r2,-2
    ad60:	1884703a 	and	r2,r3,r2
    ad64:	1001703a 	wrctl	status,r2
  
  return context;
    ad68:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    ad6c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    ad70:	e0bffd17 	ldw	r2,-12(fp)
    ad74:	10800283 	ldbu	r2,10(r2)
    ad78:	10803fcc 	andi	r2,r2,255
    ad7c:	10000326 	beq	r2,zero,ad8c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    ad80:	00800044 	movi	r2,1
    ad84:	e0bff505 	stb	r2,-44(fp)
    ad88:	00000106 	br	ad90 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    ad8c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    ad90:	e0bffe03 	ldbu	r2,-8(fp)
    ad94:	10000326 	beq	r2,zero,ada4 <OSSemDel+0xf4>
    ad98:	10800060 	cmpeqi	r2,r2,1
    ad9c:	10002c1e 	bne	r2,zero,ae50 <OSSemDel+0x1a0>
    ada0:	00004d06 	br	aed8 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    ada4:	e0bff503 	ldbu	r2,-44(fp)
    ada8:	10001a1e 	bne	r2,zero,ae14 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    adac:	e0bffd17 	ldw	r2,-12(fp)
    adb0:	00c00fc4 	movi	r3,63
    adb4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    adb8:	e0bffd17 	ldw	r2,-12(fp)
    adbc:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    adc0:	e0bffd17 	ldw	r2,-12(fp)
    adc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    adc8:	00800074 	movhi	r2,1
    adcc:	10952b04 	addi	r2,r2,21676
    add0:	10c00017 	ldw	r3,0(r2)
    add4:	e0bffd17 	ldw	r2,-12(fp)
    add8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    addc:	e0bffd17 	ldw	r2,-12(fp)
    ade0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    ade4:	00800074 	movhi	r2,1
    ade8:	10952b04 	addi	r2,r2,21676
    adec:	e0fffd17 	ldw	r3,-12(fp)
    adf0:	10c00015 	stw	r3,0(r2)
    adf4:	e0bff717 	ldw	r2,-36(fp)
    adf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    adfc:	e0bff917 	ldw	r2,-28(fp)
    ae00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    ae04:	e0bfff17 	ldw	r2,-4(fp)
    ae08:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    ae0c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    ae10:	00003b06 	br	af00 <OSSemDel+0x250>
    ae14:	e0bff717 	ldw	r2,-36(fp)
    ae18:	e0bffa15 	stw	r2,-24(fp)
    ae1c:	e0bffa17 	ldw	r2,-24(fp)
    ae20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    ae24:	e0bfff17 	ldw	r2,-4(fp)
    ae28:	00c01244 	movi	r3,73
    ae2c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    ae30:	e0bffd17 	ldw	r2,-12(fp)
    ae34:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    ae38:	00003106 	br	af00 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    ae3c:	e13ffd17 	ldw	r4,-12(fp)
    ae40:	000b883a 	mov	r5,zero
    ae44:	01800044 	movi	r6,1
    ae48:	000f883a 	mov	r7,zero
    ae4c:	00066d40 	call	66d4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    ae50:	e0bffd17 	ldw	r2,-12(fp)
    ae54:	10800283 	ldbu	r2,10(r2)
    ae58:	10803fcc 	andi	r2,r2,255
    ae5c:	103ff71e 	bne	r2,zero,ae3c <__alt_mem_Flash_flash_data+0xf400ae3c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    ae60:	e0bffd17 	ldw	r2,-12(fp)
    ae64:	00c00fc4 	movi	r3,63
    ae68:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    ae6c:	e0bffd17 	ldw	r2,-12(fp)
    ae70:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    ae74:	e0bffd17 	ldw	r2,-12(fp)
    ae78:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    ae7c:	00800074 	movhi	r2,1
    ae80:	10952b04 	addi	r2,r2,21676
    ae84:	10c00017 	ldw	r3,0(r2)
    ae88:	e0bffd17 	ldw	r2,-12(fp)
    ae8c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    ae90:	e0bffd17 	ldw	r2,-12(fp)
    ae94:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    ae98:	00800074 	movhi	r2,1
    ae9c:	10952b04 	addi	r2,r2,21676
    aea0:	e0fffd17 	ldw	r3,-12(fp)
    aea4:	10c00015 	stw	r3,0(r2)
    aea8:	e0bff717 	ldw	r2,-36(fp)
    aeac:	e0bffb15 	stw	r2,-20(fp)
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    aeb8:	e0bff503 	ldbu	r2,-44(fp)
    aebc:	10800058 	cmpnei	r2,r2,1
    aec0:	1000011e 	bne	r2,zero,aec8 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    aec4:	00070ec0 	call	70ec <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    aec8:	e0bfff17 	ldw	r2,-4(fp)
    aecc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    aed0:	e03ff615 	stw	zero,-40(fp)
             break;
    aed4:	00000a06 	br	af00 <OSSemDel+0x250>
    aed8:	e0bff717 	ldw	r2,-36(fp)
    aedc:	e0bffc15 	stw	r2,-16(fp)
    aee0:	e0bffc17 	ldw	r2,-16(fp)
    aee4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    aee8:	e0bfff17 	ldw	r2,-4(fp)
    aeec:	00c001c4 	movi	r3,7
    aef0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    aef4:	e0bffd17 	ldw	r2,-12(fp)
    aef8:	e0bff615 	stw	r2,-40(fp)
             break;
    aefc:	0001883a 	nop
    }
    return (pevent_return);
    af00:	e0bff617 	ldw	r2,-40(fp)
}
    af04:	e037883a 	mov	sp,fp
    af08:	dfc00117 	ldw	ra,4(sp)
    af0c:	df000017 	ldw	fp,0(sp)
    af10:	dec00204 	addi	sp,sp,8
    af14:	f800283a 	ret

0000af18 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    af18:	defff504 	addi	sp,sp,-44
    af1c:	dfc00a15 	stw	ra,40(sp)
    af20:	df000915 	stw	fp,36(sp)
    af24:	df000904 	addi	fp,sp,36
    af28:	e13ffd15 	stw	r4,-12(fp)
    af2c:	2805883a 	mov	r2,r5
    af30:	e1bfff15 	stw	r6,-4(fp)
    af34:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    af38:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    af3c:	e0bfff17 	ldw	r2,-4(fp)
    af40:	1000011e 	bne	r2,zero,af48 <OSSemPend+0x30>
        return;
    af44:	00008906 	br	b16c <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    af48:	e0bffd17 	ldw	r2,-12(fp)
    af4c:	1000041e 	bne	r2,zero,af60 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    af50:	e0bfff17 	ldw	r2,-4(fp)
    af54:	00c00104 	movi	r3,4
    af58:	10c00005 	stb	r3,0(r2)
        return;
    af5c:	00008306 	br	b16c <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    af60:	e0bffd17 	ldw	r2,-12(fp)
    af64:	10800003 	ldbu	r2,0(r2)
    af68:	10803fcc 	andi	r2,r2,255
    af6c:	108000e0 	cmpeqi	r2,r2,3
    af70:	1000041e 	bne	r2,zero,af84 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    af74:	e0bfff17 	ldw	r2,-4(fp)
    af78:	00c00044 	movi	r3,1
    af7c:	10c00005 	stb	r3,0(r2)
        return;
    af80:	00007a06 	br	b16c <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    af84:	00800074 	movhi	r2,1
    af88:	10952c04 	addi	r2,r2,21680
    af8c:	10800003 	ldbu	r2,0(r2)
    af90:	10803fcc 	andi	r2,r2,255
    af94:	10000426 	beq	r2,zero,afa8 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    af98:	e0bfff17 	ldw	r2,-4(fp)
    af9c:	00c00084 	movi	r3,2
    afa0:	10c00005 	stb	r3,0(r2)
        return;
    afa4:	00007106 	br	b16c <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    afa8:	00800074 	movhi	r2,1
    afac:	10951e04 	addi	r2,r2,21624
    afb0:	10800003 	ldbu	r2,0(r2)
    afb4:	10803fcc 	andi	r2,r2,255
    afb8:	10000426 	beq	r2,zero,afcc <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    afbc:	e0bfff17 	ldw	r2,-4(fp)
    afc0:	00c00344 	movi	r3,13
    afc4:	10c00005 	stb	r3,0(r2)
        return;
    afc8:	00006806 	br	b16c <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    afcc:	0005303a 	rdctl	r2,status
    afd0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    afd4:	e0fff817 	ldw	r3,-32(fp)
    afd8:	00bfff84 	movi	r2,-2
    afdc:	1884703a 	and	r2,r3,r2
    afe0:	1001703a 	wrctl	status,r2
  
  return context;
    afe4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    afe8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    afec:	e0bffd17 	ldw	r2,-12(fp)
    aff0:	1080020b 	ldhu	r2,8(r2)
    aff4:	10bfffcc 	andi	r2,r2,65535
    aff8:	10000d26 	beq	r2,zero,b030 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    affc:	e0bffd17 	ldw	r2,-12(fp)
    b000:	1080020b 	ldhu	r2,8(r2)
    b004:	10bfffc4 	addi	r2,r2,-1
    b008:	1007883a 	mov	r3,r2
    b00c:	e0bffd17 	ldw	r2,-12(fp)
    b010:	10c0020d 	sth	r3,8(r2)
    b014:	e0bff717 	ldw	r2,-36(fp)
    b018:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b01c:	e0bff917 	ldw	r2,-28(fp)
    b020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    b024:	e0bfff17 	ldw	r2,-4(fp)
    b028:	10000005 	stb	zero,0(r2)
        return;
    b02c:	00004f06 	br	b16c <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    b030:	00800074 	movhi	r2,1
    b034:	10952d04 	addi	r2,r2,21684
    b038:	10c00017 	ldw	r3,0(r2)
    b03c:	00800074 	movhi	r2,1
    b040:	10952d04 	addi	r2,r2,21684
    b044:	10800017 	ldw	r2,0(r2)
    b048:	10800c03 	ldbu	r2,48(r2)
    b04c:	10800054 	ori	r2,r2,1
    b050:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    b054:	00800074 	movhi	r2,1
    b058:	10952d04 	addi	r2,r2,21684
    b05c:	10800017 	ldw	r2,0(r2)
    b060:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    b064:	00800074 	movhi	r2,1
    b068:	10952d04 	addi	r2,r2,21684
    b06c:	10800017 	ldw	r2,0(r2)
    b070:	e0fffe0b 	ldhu	r3,-8(fp)
    b074:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    b078:	e13ffd17 	ldw	r4,-12(fp)
    b07c:	000686c0 	call	686c <OS_EventTaskWait>
    b080:	e0bff717 	ldw	r2,-36(fp)
    b084:	e0bffa15 	stw	r2,-24(fp)
    b088:	e0bffa17 	ldw	r2,-24(fp)
    b08c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    b090:	00070ec0 	call	70ec <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b094:	0005303a 	rdctl	r2,status
    b098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b09c:	e0fffb17 	ldw	r3,-20(fp)
    b0a0:	00bfff84 	movi	r2,-2
    b0a4:	1884703a 	and	r2,r3,r2
    b0a8:	1001703a 	wrctl	status,r2
  
  return context;
    b0ac:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    b0b0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    b0b4:	00800074 	movhi	r2,1
    b0b8:	10952d04 	addi	r2,r2,21684
    b0bc:	10800017 	ldw	r2,0(r2)
    b0c0:	10800c43 	ldbu	r2,49(r2)
    b0c4:	10803fcc 	andi	r2,r2,255
    b0c8:	10000326 	beq	r2,zero,b0d8 <OSSemPend+0x1c0>
    b0cc:	108000a0 	cmpeqi	r2,r2,2
    b0d0:	1000041e 	bne	r2,zero,b0e4 <OSSemPend+0x1cc>
    b0d4:	00000706 	br	b0f4 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    b0d8:	e0bfff17 	ldw	r2,-4(fp)
    b0dc:	10000005 	stb	zero,0(r2)
             break;
    b0e0:	00000e06 	br	b11c <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    b0e4:	e0bfff17 	ldw	r2,-4(fp)
    b0e8:	00c00384 	movi	r3,14
    b0ec:	10c00005 	stb	r3,0(r2)
             break;
    b0f0:	00000a06 	br	b11c <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    b0f4:	00800074 	movhi	r2,1
    b0f8:	10952d04 	addi	r2,r2,21684
    b0fc:	10800017 	ldw	r2,0(r2)
    b100:	1009883a 	mov	r4,r2
    b104:	e17ffd17 	ldw	r5,-12(fp)
    b108:	0006ac40 	call	6ac4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    b10c:	e0bfff17 	ldw	r2,-4(fp)
    b110:	00c00284 	movi	r3,10
    b114:	10c00005 	stb	r3,0(r2)
             break;
    b118:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    b11c:	00800074 	movhi	r2,1
    b120:	10952d04 	addi	r2,r2,21684
    b124:	10800017 	ldw	r2,0(r2)
    b128:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    b12c:	00800074 	movhi	r2,1
    b130:	10952d04 	addi	r2,r2,21684
    b134:	10800017 	ldw	r2,0(r2)
    b138:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    b13c:	00800074 	movhi	r2,1
    b140:	10952d04 	addi	r2,r2,21684
    b144:	10800017 	ldw	r2,0(r2)
    b148:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    b14c:	00800074 	movhi	r2,1
    b150:	10952d04 	addi	r2,r2,21684
    b154:	10800017 	ldw	r2,0(r2)
    b158:	10000815 	stw	zero,32(r2)
    b15c:	e0bff717 	ldw	r2,-36(fp)
    b160:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b164:	e0bffc17 	ldw	r2,-16(fp)
    b168:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    b16c:	e037883a 	mov	sp,fp
    b170:	dfc00117 	ldw	ra,4(sp)
    b174:	df000017 	ldw	fp,0(sp)
    b178:	dec00204 	addi	sp,sp,8
    b17c:	f800283a 	ret

0000b180 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    b180:	defff604 	addi	sp,sp,-40
    b184:	dfc00915 	stw	ra,36(sp)
    b188:	df000815 	stw	fp,32(sp)
    b18c:	df000804 	addi	fp,sp,32
    b190:	e13ffd15 	stw	r4,-12(fp)
    b194:	2805883a 	mov	r2,r5
    b198:	e1bfff15 	stw	r6,-4(fp)
    b19c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b1a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    b1a4:	e0bfff17 	ldw	r2,-4(fp)
    b1a8:	1000021e 	bne	r2,zero,b1b4 <OSSemPendAbort+0x34>
        return (0);
    b1ac:	0005883a 	mov	r2,zero
    b1b0:	00004906 	br	b2d8 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b1b4:	e0bffd17 	ldw	r2,-12(fp)
    b1b8:	1000051e 	bne	r2,zero,b1d0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    b1bc:	e0bfff17 	ldw	r2,-4(fp)
    b1c0:	00c00104 	movi	r3,4
    b1c4:	10c00005 	stb	r3,0(r2)
        return (0);
    b1c8:	0005883a 	mov	r2,zero
    b1cc:	00004206 	br	b2d8 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b1d0:	e0bffd17 	ldw	r2,-12(fp)
    b1d4:	10800003 	ldbu	r2,0(r2)
    b1d8:	10803fcc 	andi	r2,r2,255
    b1dc:	108000e0 	cmpeqi	r2,r2,3
    b1e0:	1000051e 	bne	r2,zero,b1f8 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    b1e4:	e0bfff17 	ldw	r2,-4(fp)
    b1e8:	00c00044 	movi	r3,1
    b1ec:	10c00005 	stb	r3,0(r2)
        return (0);
    b1f0:	0005883a 	mov	r2,zero
    b1f4:	00003806 	br	b2d8 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b1f8:	0005303a 	rdctl	r2,status
    b1fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b200:	e0fffa17 	ldw	r3,-24(fp)
    b204:	00bfff84 	movi	r2,-2
    b208:	1884703a 	and	r2,r3,r2
    b20c:	1001703a 	wrctl	status,r2
  
  return context;
    b210:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    b214:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    b218:	e0bffd17 	ldw	r2,-12(fp)
    b21c:	10800283 	ldbu	r2,10(r2)
    b220:	10803fcc 	andi	r2,r2,255
    b224:	10002526 	beq	r2,zero,b2bc <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    b228:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    b22c:	e0bffe03 	ldbu	r2,-8(fp)
    b230:	10800060 	cmpeqi	r2,r2,1
    b234:	10000e26 	beq	r2,zero,b270 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    b238:	00000806 	br	b25c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    b23c:	e13ffd17 	ldw	r4,-12(fp)
    b240:	000b883a 	mov	r5,zero
    b244:	01800044 	movi	r6,1
    b248:	01c00084 	movi	r7,2
    b24c:	00066d40 	call	66d4 <OS_EventTaskRdy>
                     nbr_tasks++;
    b250:	e0bff803 	ldbu	r2,-32(fp)
    b254:	10800044 	addi	r2,r2,1
    b258:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    b25c:	e0bffd17 	ldw	r2,-12(fp)
    b260:	10800283 	ldbu	r2,10(r2)
    b264:	10803fcc 	andi	r2,r2,255
    b268:	103ff41e 	bne	r2,zero,b23c <__alt_mem_Flash_flash_data+0xf400b23c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    b26c:	00000906 	br	b294 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    b270:	e13ffd17 	ldw	r4,-12(fp)
    b274:	000b883a 	mov	r5,zero
    b278:	01800044 	movi	r6,1
    b27c:	01c00084 	movi	r7,2
    b280:	00066d40 	call	66d4 <OS_EventTaskRdy>
                 nbr_tasks++;
    b284:	e0bff803 	ldbu	r2,-32(fp)
    b288:	10800044 	addi	r2,r2,1
    b28c:	e0bff805 	stb	r2,-32(fp)
                 break;
    b290:	0001883a 	nop
    b294:	e0bff917 	ldw	r2,-28(fp)
    b298:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b29c:	e0bffb17 	ldw	r2,-20(fp)
    b2a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    b2a4:	00070ec0 	call	70ec <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    b2a8:	e0bfff17 	ldw	r2,-4(fp)
    b2ac:	00c00384 	movi	r3,14
    b2b0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    b2b4:	e0bff803 	ldbu	r2,-32(fp)
    b2b8:	00000706 	br	b2d8 <OSSemPendAbort+0x158>
    b2bc:	e0bff917 	ldw	r2,-28(fp)
    b2c0:	e0bffc15 	stw	r2,-16(fp)
    b2c4:	e0bffc17 	ldw	r2,-16(fp)
    b2c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b2cc:	e0bfff17 	ldw	r2,-4(fp)
    b2d0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    b2d4:	0005883a 	mov	r2,zero
}
    b2d8:	e037883a 	mov	sp,fp
    b2dc:	dfc00117 	ldw	ra,4(sp)
    b2e0:	df000017 	ldw	fp,0(sp)
    b2e4:	dec00204 	addi	sp,sp,8
    b2e8:	f800283a 	ret

0000b2ec <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    b2ec:	defff804 	addi	sp,sp,-32
    b2f0:	dfc00715 	stw	ra,28(sp)
    b2f4:	df000615 	stw	fp,24(sp)
    b2f8:	df000604 	addi	fp,sp,24
    b2fc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b304:	e0bfff17 	ldw	r2,-4(fp)
    b308:	1000021e 	bne	r2,zero,b314 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    b30c:	00800104 	movi	r2,4
    b310:	00003506 	br	b3e8 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b314:	e0bfff17 	ldw	r2,-4(fp)
    b318:	10800003 	ldbu	r2,0(r2)
    b31c:	10803fcc 	andi	r2,r2,255
    b320:	108000e0 	cmpeqi	r2,r2,3
    b324:	1000021e 	bne	r2,zero,b330 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    b328:	00800044 	movi	r2,1
    b32c:	00002e06 	br	b3e8 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b330:	0005303a 	rdctl	r2,status
    b334:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b338:	e0fffb17 	ldw	r3,-20(fp)
    b33c:	00bfff84 	movi	r2,-2
    b340:	1884703a 	and	r2,r3,r2
    b344:	1001703a 	wrctl	status,r2
  
  return context;
    b348:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    b34c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    b350:	e0bfff17 	ldw	r2,-4(fp)
    b354:	10800283 	ldbu	r2,10(r2)
    b358:	10803fcc 	andi	r2,r2,255
    b35c:	10000c26 	beq	r2,zero,b390 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    b360:	e13fff17 	ldw	r4,-4(fp)
    b364:	000b883a 	mov	r5,zero
    b368:	01800044 	movi	r6,1
    b36c:	000f883a 	mov	r7,zero
    b370:	00066d40 	call	66d4 <OS_EventTaskRdy>
    b374:	e0bffa17 	ldw	r2,-24(fp)
    b378:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b37c:	e0bffc17 	ldw	r2,-16(fp)
    b380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    b384:	00070ec0 	call	70ec <OS_Sched>
        return (OS_ERR_NONE);
    b388:	0005883a 	mov	r2,zero
    b38c:	00001606 	br	b3e8 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    b390:	e0bfff17 	ldw	r2,-4(fp)
    b394:	1080020b 	ldhu	r2,8(r2)
    b398:	10ffffcc 	andi	r3,r2,65535
    b39c:	00bfffd4 	movui	r2,65535
    b3a0:	18800c26 	beq	r3,r2,b3d4 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    b3a4:	e0bfff17 	ldw	r2,-4(fp)
    b3a8:	1080020b 	ldhu	r2,8(r2)
    b3ac:	10800044 	addi	r2,r2,1
    b3b0:	1007883a 	mov	r3,r2
    b3b4:	e0bfff17 	ldw	r2,-4(fp)
    b3b8:	10c0020d 	sth	r3,8(r2)
    b3bc:	e0bffa17 	ldw	r2,-24(fp)
    b3c0:	e0bffd15 	stw	r2,-12(fp)
    b3c4:	e0bffd17 	ldw	r2,-12(fp)
    b3c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    b3cc:	0005883a 	mov	r2,zero
    b3d0:	00000506 	br	b3e8 <OSSemPost+0xfc>
    b3d4:	e0bffa17 	ldw	r2,-24(fp)
    b3d8:	e0bffe15 	stw	r2,-8(fp)
    b3dc:	e0bffe17 	ldw	r2,-8(fp)
    b3e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    b3e4:	00800c84 	movi	r2,50
}
    b3e8:	e037883a 	mov	sp,fp
    b3ec:	dfc00117 	ldw	ra,4(sp)
    b3f0:	df000017 	ldw	fp,0(sp)
    b3f4:	dec00204 	addi	sp,sp,8
    b3f8:	f800283a 	ret

0000b3fc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    b3fc:	defff704 	addi	sp,sp,-36
    b400:	df000815 	stw	fp,32(sp)
    b404:	df000804 	addi	fp,sp,32
    b408:	e13ffe15 	stw	r4,-8(fp)
    b40c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    b410:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    b414:	e0bffe17 	ldw	r2,-8(fp)
    b418:	1000021e 	bne	r2,zero,b424 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    b41c:	00800104 	movi	r2,4
    b420:	00003606 	br	b4fc <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    b424:	e0bfff17 	ldw	r2,-4(fp)
    b428:	1000021e 	bne	r2,zero,b434 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    b42c:	00800244 	movi	r2,9
    b430:	00003206 	br	b4fc <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    b434:	e0bffe17 	ldw	r2,-8(fp)
    b438:	10800003 	ldbu	r2,0(r2)
    b43c:	10803fcc 	andi	r2,r2,255
    b440:	108000e0 	cmpeqi	r2,r2,3
    b444:	1000021e 	bne	r2,zero,b450 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    b448:	00800044 	movi	r2,1
    b44c:	00002b06 	br	b4fc <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b450:	0005303a 	rdctl	r2,status
    b454:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b458:	e0fffc17 	ldw	r3,-16(fp)
    b45c:	00bfff84 	movi	r2,-2
    b460:	1884703a 	and	r2,r3,r2
    b464:	1001703a 	wrctl	status,r2
  
  return context;
    b468:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b46c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    b470:	e0bffe17 	ldw	r2,-8(fp)
    b474:	10c00283 	ldbu	r3,10(r2)
    b478:	e0bfff17 	ldw	r2,-4(fp)
    b47c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    b480:	e0bffe17 	ldw	r2,-8(fp)
    b484:	108002c4 	addi	r2,r2,11
    b488:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    b48c:	e0bfff17 	ldw	r2,-4(fp)
    b490:	10800084 	addi	r2,r2,2
    b494:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b498:	e03ffa05 	stb	zero,-24(fp)
    b49c:	00000b06 	br	b4cc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    b4a0:	e0bff917 	ldw	r2,-28(fp)
    b4a4:	10c00044 	addi	r3,r2,1
    b4a8:	e0fff915 	stw	r3,-28(fp)
    b4ac:	e0fff817 	ldw	r3,-32(fp)
    b4b0:	19000044 	addi	r4,r3,1
    b4b4:	e13ff815 	stw	r4,-32(fp)
    b4b8:	18c00003 	ldbu	r3,0(r3)
    b4bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b4c0:	e0bffa03 	ldbu	r2,-24(fp)
    b4c4:	10800044 	addi	r2,r2,1
    b4c8:	e0bffa05 	stb	r2,-24(fp)
    b4cc:	e0bffa03 	ldbu	r2,-24(fp)
    b4d0:	108000f0 	cmpltui	r2,r2,3
    b4d4:	103ff21e 	bne	r2,zero,b4a0 <__alt_mem_Flash_flash_data+0xf400b4a0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    b4d8:	e0bffe17 	ldw	r2,-8(fp)
    b4dc:	10c0020b 	ldhu	r3,8(r2)
    b4e0:	e0bfff17 	ldw	r2,-4(fp)
    b4e4:	10c0000d 	sth	r3,0(r2)
    b4e8:	e0bffb17 	ldw	r2,-20(fp)
    b4ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4f0:	e0bffd17 	ldw	r2,-12(fp)
    b4f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b4f8:	0005883a 	mov	r2,zero
}
    b4fc:	e037883a 	mov	sp,fp
    b500:	df000017 	ldw	fp,0(sp)
    b504:	dec00104 	addi	sp,sp,4
    b508:	f800283a 	ret

0000b50c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    b50c:	defff904 	addi	sp,sp,-28
    b510:	df000615 	stw	fp,24(sp)
    b514:	df000604 	addi	fp,sp,24
    b518:	e13ffd15 	stw	r4,-12(fp)
    b51c:	2805883a 	mov	r2,r5
    b520:	e1bfff15 	stw	r6,-4(fp)
    b524:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b528:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    b52c:	e0bfff17 	ldw	r2,-4(fp)
    b530:	1000011e 	bne	r2,zero,b538 <OSSemSet+0x2c>
        return;
    b534:	00003006 	br	b5f8 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b538:	e0bffd17 	ldw	r2,-12(fp)
    b53c:	1000041e 	bne	r2,zero,b550 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    b540:	e0bfff17 	ldw	r2,-4(fp)
    b544:	00c00104 	movi	r3,4
    b548:	10c00005 	stb	r3,0(r2)
        return;
    b54c:	00002a06 	br	b5f8 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b550:	e0bffd17 	ldw	r2,-12(fp)
    b554:	10800003 	ldbu	r2,0(r2)
    b558:	10803fcc 	andi	r2,r2,255
    b55c:	108000e0 	cmpeqi	r2,r2,3
    b560:	1000041e 	bne	r2,zero,b574 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    b564:	e0bfff17 	ldw	r2,-4(fp)
    b568:	00c00044 	movi	r3,1
    b56c:	10c00005 	stb	r3,0(r2)
        return;
    b570:	00002106 	br	b5f8 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b574:	0005303a 	rdctl	r2,status
    b578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b57c:	e0fffb17 	ldw	r3,-20(fp)
    b580:	00bfff84 	movi	r2,-2
    b584:	1884703a 	and	r2,r3,r2
    b588:	1001703a 	wrctl	status,r2
  
  return context;
    b58c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    b590:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    b594:	e0bfff17 	ldw	r2,-4(fp)
    b598:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    b59c:	e0bffd17 	ldw	r2,-12(fp)
    b5a0:	1080020b 	ldhu	r2,8(r2)
    b5a4:	10bfffcc 	andi	r2,r2,65535
    b5a8:	10000426 	beq	r2,zero,b5bc <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    b5ac:	e0bffd17 	ldw	r2,-12(fp)
    b5b0:	e0fffe0b 	ldhu	r3,-8(fp)
    b5b4:	10c0020d 	sth	r3,8(r2)
    b5b8:	00000b06 	br	b5e8 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    b5bc:	e0bffd17 	ldw	r2,-12(fp)
    b5c0:	10800283 	ldbu	r2,10(r2)
    b5c4:	10803fcc 	andi	r2,r2,255
    b5c8:	1000041e 	bne	r2,zero,b5dc <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    b5cc:	e0bffd17 	ldw	r2,-12(fp)
    b5d0:	e0fffe0b 	ldhu	r3,-8(fp)
    b5d4:	10c0020d 	sth	r3,8(r2)
    b5d8:	00000306 	br	b5e8 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    b5dc:	e0bfff17 	ldw	r2,-4(fp)
    b5e0:	00c01244 	movi	r3,73
    b5e4:	10c00005 	stb	r3,0(r2)
    b5e8:	e0bffa17 	ldw	r2,-24(fp)
    b5ec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5f0:	e0bffc17 	ldw	r2,-16(fp)
    b5f4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    b5f8:	e037883a 	mov	sp,fp
    b5fc:	df000017 	ldw	fp,0(sp)
    b600:	dec00104 	addi	sp,sp,4
    b604:	f800283a 	ret

0000b608 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    b608:	defff104 	addi	sp,sp,-60
    b60c:	dfc00e15 	stw	ra,56(sp)
    b610:	df000d15 	stw	fp,52(sp)
    b614:	df000d04 	addi	fp,sp,52
    b618:	2007883a 	mov	r3,r4
    b61c:	2805883a 	mov	r2,r5
    b620:	e0fffe05 	stb	r3,-8(fp)
    b624:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    b628:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    b62c:	e0bffe03 	ldbu	r2,-8(fp)
    b630:	10800530 	cmpltui	r2,r2,20
    b634:	1000051e 	bne	r2,zero,b64c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    b638:	e0bffe03 	ldbu	r2,-8(fp)
    b63c:	10803fe0 	cmpeqi	r2,r2,255
    b640:	1000021e 	bne	r2,zero,b64c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    b644:	00800a84 	movi	r2,42
    b648:	00013a06 	br	bb34 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    b64c:	e0bfff03 	ldbu	r2,-4(fp)
    b650:	10800530 	cmpltui	r2,r2,20
    b654:	1000021e 	bne	r2,zero,b660 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    b658:	00800a84 	movi	r2,42
    b65c:	00013506 	br	bb34 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b660:	0005303a 	rdctl	r2,status
    b664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b668:	e0fff917 	ldw	r3,-28(fp)
    b66c:	00bfff84 	movi	r2,-2
    b670:	1884703a 	and	r2,r3,r2
    b674:	1001703a 	wrctl	status,r2
  
  return context;
    b678:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b67c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    b680:	e0ffff03 	ldbu	r3,-4(fp)
    b684:	008000b4 	movhi	r2,2
    b688:	1089b404 	addi	r2,r2,9936
    b68c:	18c7883a 	add	r3,r3,r3
    b690:	18c7883a 	add	r3,r3,r3
    b694:	10c5883a 	add	r2,r2,r3
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	10000626 	beq	r2,zero,b6b8 <OSTaskChangePrio+0xb0>
    b6a0:	e0bff517 	ldw	r2,-44(fp)
    b6a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6a8:	e0bffa17 	ldw	r2,-24(fp)
    b6ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    b6b0:	00800a04 	movi	r2,40
    b6b4:	00011f06 	br	bb34 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    b6b8:	e0bffe03 	ldbu	r2,-8(fp)
    b6bc:	10803fd8 	cmpnei	r2,r2,255
    b6c0:	1000051e 	bne	r2,zero,b6d8 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    b6c4:	00800074 	movhi	r2,1
    b6c8:	10952d04 	addi	r2,r2,21684
    b6cc:	10800017 	ldw	r2,0(r2)
    b6d0:	10800c83 	ldbu	r2,50(r2)
    b6d4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    b6d8:	e0fffe03 	ldbu	r3,-8(fp)
    b6dc:	008000b4 	movhi	r2,2
    b6e0:	1089b404 	addi	r2,r2,9936
    b6e4:	18c7883a 	add	r3,r3,r3
    b6e8:	18c7883a 	add	r3,r3,r3
    b6ec:	10c5883a 	add	r2,r2,r3
    b6f0:	10800017 	ldw	r2,0(r2)
    b6f4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    b6f8:	e0bff617 	ldw	r2,-40(fp)
    b6fc:	1000061e 	bne	r2,zero,b718 <OSTaskChangePrio+0x110>
    b700:	e0bff517 	ldw	r2,-44(fp)
    b704:	e0bffb15 	stw	r2,-20(fp)
    b708:	e0bffb17 	ldw	r2,-20(fp)
    b70c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    b710:	00800a44 	movi	r2,41
    b714:	00010706 	br	bb34 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    b718:	e0bff617 	ldw	r2,-40(fp)
    b71c:	10800058 	cmpnei	r2,r2,1
    b720:	1000061e 	bne	r2,zero,b73c <OSTaskChangePrio+0x134>
    b724:	e0bff517 	ldw	r2,-44(fp)
    b728:	e0bffc15 	stw	r2,-16(fp)
    b72c:	e0bffc17 	ldw	r2,-16(fp)
    b730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    b734:	008010c4 	movi	r2,67
    b738:	0000fe06 	br	bb34 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    b73c:	e0bfff03 	ldbu	r2,-4(fp)
    b740:	1004d0fa 	srli	r2,r2,3
    b744:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    b748:	e0bfff03 	ldbu	r2,-4(fp)
    b74c:	108001cc 	andi	r2,r2,7
    b750:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    b754:	e0bff703 	ldbu	r2,-36(fp)
    b758:	00c00044 	movi	r3,1
    b75c:	1884983a 	sll	r2,r3,r2
    b760:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    b764:	e0bff743 	ldbu	r2,-35(fp)
    b768:	00c00044 	movi	r3,1
    b76c:	1884983a 	sll	r2,r3,r2
    b770:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    b774:	e0fffe03 	ldbu	r3,-8(fp)
    b778:	008000b4 	movhi	r2,2
    b77c:	1089b404 	addi	r2,r2,9936
    b780:	18c7883a 	add	r3,r3,r3
    b784:	18c7883a 	add	r3,r3,r3
    b788:	10c5883a 	add	r2,r2,r3
    b78c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    b790:	e0ffff03 	ldbu	r3,-4(fp)
    b794:	008000b4 	movhi	r2,2
    b798:	1089b404 	addi	r2,r2,9936
    b79c:	18c7883a 	add	r3,r3,r3
    b7a0:	18c7883a 	add	r3,r3,r3
    b7a4:	10c5883a 	add	r2,r2,r3
    b7a8:	e0fff617 	ldw	r3,-40(fp)
    b7ac:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    b7b0:	e0bff617 	ldw	r2,-40(fp)
    b7b4:	10800d03 	ldbu	r2,52(r2)
    b7b8:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    b7bc:	e0bff617 	ldw	r2,-40(fp)
    b7c0:	10800d83 	ldbu	r2,54(r2)
    b7c4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    b7c8:	e0bff617 	ldw	r2,-40(fp)
    b7cc:	10800d43 	ldbu	r2,53(r2)
    b7d0:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    b7d4:	e0fff803 	ldbu	r3,-32(fp)
    b7d8:	00800074 	movhi	r2,1
    b7dc:	10952a44 	addi	r2,r2,21673
    b7e0:	10c5883a 	add	r2,r2,r3
    b7e4:	10c00003 	ldbu	r3,0(r2)
    b7e8:	e0bff883 	ldbu	r2,-30(fp)
    b7ec:	1884703a 	and	r2,r3,r2
    b7f0:	10803fcc 	andi	r2,r2,255
    b7f4:	10003726 	beq	r2,zero,b8d4 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    b7f8:	e0fff803 	ldbu	r3,-32(fp)
    b7fc:	e13ff803 	ldbu	r4,-32(fp)
    b800:	00800074 	movhi	r2,1
    b804:	10952a44 	addi	r2,r2,21673
    b808:	1105883a 	add	r2,r2,r4
    b80c:	10800003 	ldbu	r2,0(r2)
    b810:	1009883a 	mov	r4,r2
    b814:	e0bff883 	ldbu	r2,-30(fp)
    b818:	0084303a 	nor	r2,zero,r2
    b81c:	2084703a 	and	r2,r4,r2
    b820:	1009883a 	mov	r4,r2
    b824:	00800074 	movhi	r2,1
    b828:	10952a44 	addi	r2,r2,21673
    b82c:	10c5883a 	add	r2,r2,r3
    b830:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    b834:	e0fff803 	ldbu	r3,-32(fp)
    b838:	00800074 	movhi	r2,1
    b83c:	10952a44 	addi	r2,r2,21673
    b840:	10c5883a 	add	r2,r2,r3
    b844:	10800003 	ldbu	r2,0(r2)
    b848:	10803fcc 	andi	r2,r2,255
    b84c:	10000b1e 	bne	r2,zero,b87c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    b850:	e0bff843 	ldbu	r2,-31(fp)
    b854:	0084303a 	nor	r2,zero,r2
    b858:	1007883a 	mov	r3,r2
    b85c:	00800074 	movhi	r2,1
    b860:	10952a04 	addi	r2,r2,21672
    b864:	10800003 	ldbu	r2,0(r2)
    b868:	1884703a 	and	r2,r3,r2
    b86c:	1007883a 	mov	r3,r2
    b870:	00800074 	movhi	r2,1
    b874:	10952a04 	addi	r2,r2,21672
    b878:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    b87c:	00800074 	movhi	r2,1
    b880:	10952a04 	addi	r2,r2,21672
    b884:	10c00003 	ldbu	r3,0(r2)
    b888:	e0bff783 	ldbu	r2,-34(fp)
    b88c:	1884b03a 	or	r2,r3,r2
    b890:	1007883a 	mov	r3,r2
    b894:	00800074 	movhi	r2,1
    b898:	10952a04 	addi	r2,r2,21672
    b89c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    b8a0:	e0fff703 	ldbu	r3,-36(fp)
    b8a4:	e13ff703 	ldbu	r4,-36(fp)
    b8a8:	00800074 	movhi	r2,1
    b8ac:	10952a44 	addi	r2,r2,21673
    b8b0:	1105883a 	add	r2,r2,r4
    b8b4:	11000003 	ldbu	r4,0(r2)
    b8b8:	e0bff7c3 	ldbu	r2,-33(fp)
    b8bc:	2084b03a 	or	r2,r4,r2
    b8c0:	1009883a 	mov	r4,r2
    b8c4:	00800074 	movhi	r2,1
    b8c8:	10952a44 	addi	r2,r2,21673
    b8cc:	10c5883a 	add	r2,r2,r3
    b8d0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    b8d4:	e0bff617 	ldw	r2,-40(fp)
    b8d8:	10800717 	ldw	r2,28(r2)
    b8dc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    b8e0:	e0bff317 	ldw	r2,-52(fp)
    b8e4:	10003326 	beq	r2,zero,b9b4 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    b8e8:	e0bff803 	ldbu	r2,-32(fp)
    b8ec:	e0fff803 	ldbu	r3,-32(fp)
    b8f0:	e13ff317 	ldw	r4,-52(fp)
    b8f4:	20c7883a 	add	r3,r4,r3
    b8f8:	18c00204 	addi	r3,r3,8
    b8fc:	18c000c3 	ldbu	r3,3(r3)
    b900:	1809883a 	mov	r4,r3
    b904:	e0fff883 	ldbu	r3,-30(fp)
    b908:	00c6303a 	nor	r3,zero,r3
    b90c:	20c6703a 	and	r3,r4,r3
    b910:	1809883a 	mov	r4,r3
    b914:	e0fff317 	ldw	r3,-52(fp)
    b918:	1885883a 	add	r2,r3,r2
    b91c:	10800204 	addi	r2,r2,8
    b920:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    b924:	e0bff803 	ldbu	r2,-32(fp)
    b928:	e0fff317 	ldw	r3,-52(fp)
    b92c:	1885883a 	add	r2,r3,r2
    b930:	10800204 	addi	r2,r2,8
    b934:	108000c3 	ldbu	r2,3(r2)
    b938:	10803fcc 	andi	r2,r2,255
    b93c:	1000091e 	bne	r2,zero,b964 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    b940:	e0bff317 	ldw	r2,-52(fp)
    b944:	10800283 	ldbu	r2,10(r2)
    b948:	1007883a 	mov	r3,r2
    b94c:	e0bff843 	ldbu	r2,-31(fp)
    b950:	0084303a 	nor	r2,zero,r2
    b954:	1884703a 	and	r2,r3,r2
    b958:	1007883a 	mov	r3,r2
    b95c:	e0bff317 	ldw	r2,-52(fp)
    b960:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    b964:	e0bff317 	ldw	r2,-52(fp)
    b968:	10c00283 	ldbu	r3,10(r2)
    b96c:	e0bff783 	ldbu	r2,-34(fp)
    b970:	1884b03a 	or	r2,r3,r2
    b974:	1007883a 	mov	r3,r2
    b978:	e0bff317 	ldw	r2,-52(fp)
    b97c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    b980:	e0bff703 	ldbu	r2,-36(fp)
    b984:	e0fff703 	ldbu	r3,-36(fp)
    b988:	e13ff317 	ldw	r4,-52(fp)
    b98c:	20c7883a 	add	r3,r4,r3
    b990:	18c00204 	addi	r3,r3,8
    b994:	190000c3 	ldbu	r4,3(r3)
    b998:	e0fff7c3 	ldbu	r3,-33(fp)
    b99c:	20c6b03a 	or	r3,r4,r3
    b9a0:	1809883a 	mov	r4,r3
    b9a4:	e0fff317 	ldw	r3,-52(fp)
    b9a8:	1885883a 	add	r2,r3,r2
    b9ac:	10800204 	addi	r2,r2,8
    b9b0:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    b9b4:	e0bff617 	ldw	r2,-40(fp)
    b9b8:	10800817 	ldw	r2,32(r2)
    b9bc:	10004226 	beq	r2,zero,bac8 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    b9c0:	e0bff617 	ldw	r2,-40(fp)
    b9c4:	10800817 	ldw	r2,32(r2)
    b9c8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    b9cc:	e0bff417 	ldw	r2,-48(fp)
    b9d0:	10800017 	ldw	r2,0(r2)
    b9d4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    b9d8:	00003906 	br	bac0 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    b9dc:	e0bff803 	ldbu	r2,-32(fp)
    b9e0:	e0fff803 	ldbu	r3,-32(fp)
    b9e4:	e13ff317 	ldw	r4,-52(fp)
    b9e8:	20c7883a 	add	r3,r4,r3
    b9ec:	18c00204 	addi	r3,r3,8
    b9f0:	18c000c3 	ldbu	r3,3(r3)
    b9f4:	1809883a 	mov	r4,r3
    b9f8:	e0fff883 	ldbu	r3,-30(fp)
    b9fc:	00c6303a 	nor	r3,zero,r3
    ba00:	20c6703a 	and	r3,r4,r3
    ba04:	1809883a 	mov	r4,r3
    ba08:	e0fff317 	ldw	r3,-52(fp)
    ba0c:	1885883a 	add	r2,r3,r2
    ba10:	10800204 	addi	r2,r2,8
    ba14:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    ba18:	e0bff803 	ldbu	r2,-32(fp)
    ba1c:	e0fff317 	ldw	r3,-52(fp)
    ba20:	1885883a 	add	r2,r3,r2
    ba24:	10800204 	addi	r2,r2,8
    ba28:	108000c3 	ldbu	r2,3(r2)
    ba2c:	10803fcc 	andi	r2,r2,255
    ba30:	1000091e 	bne	r2,zero,ba58 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    ba34:	e0bff317 	ldw	r2,-52(fp)
    ba38:	10800283 	ldbu	r2,10(r2)
    ba3c:	1007883a 	mov	r3,r2
    ba40:	e0bff843 	ldbu	r2,-31(fp)
    ba44:	0084303a 	nor	r2,zero,r2
    ba48:	1884703a 	and	r2,r3,r2
    ba4c:	1007883a 	mov	r3,r2
    ba50:	e0bff317 	ldw	r2,-52(fp)
    ba54:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    ba58:	e0bff317 	ldw	r2,-52(fp)
    ba5c:	10c00283 	ldbu	r3,10(r2)
    ba60:	e0bff783 	ldbu	r2,-34(fp)
    ba64:	1884b03a 	or	r2,r3,r2
    ba68:	1007883a 	mov	r3,r2
    ba6c:	e0bff317 	ldw	r2,-52(fp)
    ba70:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    ba74:	e0bff703 	ldbu	r2,-36(fp)
    ba78:	e0fff703 	ldbu	r3,-36(fp)
    ba7c:	e13ff317 	ldw	r4,-52(fp)
    ba80:	20c7883a 	add	r3,r4,r3
    ba84:	18c00204 	addi	r3,r3,8
    ba88:	190000c3 	ldbu	r4,3(r3)
    ba8c:	e0fff7c3 	ldbu	r3,-33(fp)
    ba90:	20c6b03a 	or	r3,r4,r3
    ba94:	1809883a 	mov	r4,r3
    ba98:	e0fff317 	ldw	r3,-52(fp)
    ba9c:	1885883a 	add	r2,r3,r2
    baa0:	10800204 	addi	r2,r2,8
    baa4:	110000c5 	stb	r4,3(r2)
            pevents++;
    baa8:	e0bff417 	ldw	r2,-48(fp)
    baac:	10800104 	addi	r2,r2,4
    bab0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    bab4:	e0bff417 	ldw	r2,-48(fp)
    bab8:	10800017 	ldw	r2,0(r2)
    babc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    bac0:	e0bff317 	ldw	r2,-52(fp)
    bac4:	103fc51e 	bne	r2,zero,b9dc <__alt_mem_Flash_flash_data+0xf400b9dc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    bac8:	e0bff617 	ldw	r2,-40(fp)
    bacc:	e0ffff03 	ldbu	r3,-4(fp)
    bad0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    bad4:	e0bff617 	ldw	r2,-40(fp)
    bad8:	e0fff703 	ldbu	r3,-36(fp)
    badc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    bae0:	e0bff617 	ldw	r2,-40(fp)
    bae4:	e0fff743 	ldbu	r3,-35(fp)
    bae8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    baec:	e0bff617 	ldw	r2,-40(fp)
    baf0:	e0fff783 	ldbu	r3,-34(fp)
    baf4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    baf8:	e0bff617 	ldw	r2,-40(fp)
    bafc:	e0fff7c3 	ldbu	r3,-33(fp)
    bb00:	10c00d45 	stb	r3,53(r2)
    bb04:	e0bff517 	ldw	r2,-44(fp)
    bb08:	e0bffd15 	stw	r2,-12(fp)
    bb0c:	e0bffd17 	ldw	r2,-12(fp)
    bb10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    bb14:	00800074 	movhi	r2,1
    bb18:	10951e44 	addi	r2,r2,21625
    bb1c:	10800003 	ldbu	r2,0(r2)
    bb20:	10803fcc 	andi	r2,r2,255
    bb24:	10800058 	cmpnei	r2,r2,1
    bb28:	1000011e 	bne	r2,zero,bb30 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    bb2c:	00070ec0 	call	70ec <OS_Sched>
    }
    return (OS_ERR_NONE);
    bb30:	0005883a 	mov	r2,zero
}
    bb34:	e037883a 	mov	sp,fp
    bb38:	dfc00117 	ldw	ra,4(sp)
    bb3c:	df000017 	ldw	fp,0(sp)
    bb40:	dec00204 	addi	sp,sp,8
    bb44:	f800283a 	ret

0000bb48 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    bb48:	deffee04 	addi	sp,sp,-72
    bb4c:	dfc01115 	stw	ra,68(sp)
    bb50:	df001015 	stw	fp,64(sp)
    bb54:	df001004 	addi	fp,sp,64
    bb58:	e13ffc15 	stw	r4,-16(fp)
    bb5c:	e17ffd15 	stw	r5,-12(fp)
    bb60:	e1bffe15 	stw	r6,-8(fp)
    bb64:	3805883a 	mov	r2,r7
    bb68:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    bb6c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    bb70:	e0bfff03 	ldbu	r2,-4(fp)
    bb74:	10800570 	cmpltui	r2,r2,21
    bb78:	1000021e 	bne	r2,zero,bb84 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    bb7c:	00800a84 	movi	r2,42
    bb80:	00005b06 	br	bcf0 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb84:	0005303a 	rdctl	r2,status
    bb88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb8c:	e0fff617 	ldw	r3,-40(fp)
    bb90:	00bfff84 	movi	r2,-2
    bb94:	1884703a 	and	r2,r3,r2
    bb98:	1001703a 	wrctl	status,r2
  
  return context;
    bb9c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    bba0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    bba4:	00800074 	movhi	r2,1
    bba8:	10952c04 	addi	r2,r2,21680
    bbac:	10800003 	ldbu	r2,0(r2)
    bbb0:	10803fcc 	andi	r2,r2,255
    bbb4:	10000626 	beq	r2,zero,bbd0 <OSTaskCreate+0x88>
    bbb8:	e0bff317 	ldw	r2,-52(fp)
    bbbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbc0:	e0bff717 	ldw	r2,-36(fp)
    bbc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    bbc8:	00800f04 	movi	r2,60
    bbcc:	00004806 	br	bcf0 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    bbd0:	e0ffff03 	ldbu	r3,-4(fp)
    bbd4:	008000b4 	movhi	r2,2
    bbd8:	1089b404 	addi	r2,r2,9936
    bbdc:	18c7883a 	add	r3,r3,r3
    bbe0:	18c7883a 	add	r3,r3,r3
    bbe4:	10c5883a 	add	r2,r2,r3
    bbe8:	10800017 	ldw	r2,0(r2)
    bbec:	10003b1e 	bne	r2,zero,bcdc <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    bbf0:	e0ffff03 	ldbu	r3,-4(fp)
    bbf4:	008000b4 	movhi	r2,2
    bbf8:	1089b404 	addi	r2,r2,9936
    bbfc:	18c7883a 	add	r3,r3,r3
    bc00:	18c7883a 	add	r3,r3,r3
    bc04:	10c5883a 	add	r2,r2,r3
    bc08:	00c00044 	movi	r3,1
    bc0c:	10c00015 	stw	r3,0(r2)
    bc10:	e0bff317 	ldw	r2,-52(fp)
    bc14:	e0bff815 	stw	r2,-32(fp)
    bc18:	e0bff817 	ldw	r2,-32(fp)
    bc1c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    bc20:	e13ffc17 	ldw	r4,-16(fp)
    bc24:	e17ffd17 	ldw	r5,-12(fp)
    bc28:	e1bffe17 	ldw	r6,-8(fp)
    bc2c:	000f883a 	mov	r7,zero
    bc30:	001083c0 	call	1083c <OSTaskStkInit>
    bc34:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    bc38:	e0bfff03 	ldbu	r2,-4(fp)
    bc3c:	d8000015 	stw	zero,0(sp)
    bc40:	d8000115 	stw	zero,4(sp)
    bc44:	d8000215 	stw	zero,8(sp)
    bc48:	1009883a 	mov	r4,r2
    bc4c:	e17ff417 	ldw	r5,-48(fp)
    bc50:	000d883a 	mov	r6,zero
    bc54:	000f883a 	mov	r7,zero
    bc58:	00074f00 	call	74f0 <OS_TCBInit>
    bc5c:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    bc60:	e0bff503 	ldbu	r2,-44(fp)
    bc64:	1000081e 	bne	r2,zero,bc88 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    bc68:	00800074 	movhi	r2,1
    bc6c:	10951e44 	addi	r2,r2,21625
    bc70:	10800003 	ldbu	r2,0(r2)
    bc74:	10803fcc 	andi	r2,r2,255
    bc78:	10800058 	cmpnei	r2,r2,1
    bc7c:	1000151e 	bne	r2,zero,bcd4 <OSTaskCreate+0x18c>
                OS_Sched();
    bc80:	00070ec0 	call	70ec <OS_Sched>
    bc84:	00001306 	br	bcd4 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc88:	0005303a 	rdctl	r2,status
    bc8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc90:	e0fff917 	ldw	r3,-28(fp)
    bc94:	00bfff84 	movi	r2,-2
    bc98:	1884703a 	and	r2,r3,r2
    bc9c:	1001703a 	wrctl	status,r2
  
  return context;
    bca0:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    bca4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    bca8:	e0ffff03 	ldbu	r3,-4(fp)
    bcac:	008000b4 	movhi	r2,2
    bcb0:	1089b404 	addi	r2,r2,9936
    bcb4:	18c7883a 	add	r3,r3,r3
    bcb8:	18c7883a 	add	r3,r3,r3
    bcbc:	10c5883a 	add	r2,r2,r3
    bcc0:	10000015 	stw	zero,0(r2)
    bcc4:	e0bff317 	ldw	r2,-52(fp)
    bcc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bccc:	e0bffa17 	ldw	r2,-24(fp)
    bcd0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    bcd4:	e0bff503 	ldbu	r2,-44(fp)
    bcd8:	00000506 	br	bcf0 <OSTaskCreate+0x1a8>
    bcdc:	e0bff317 	ldw	r2,-52(fp)
    bce0:	e0bffb15 	stw	r2,-20(fp)
    bce4:	e0bffb17 	ldw	r2,-20(fp)
    bce8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    bcec:	00800a04 	movi	r2,40
}
    bcf0:	e037883a 	mov	sp,fp
    bcf4:	dfc00117 	ldw	ra,4(sp)
    bcf8:	df000017 	ldw	fp,0(sp)
    bcfc:	dec00204 	addi	sp,sp,8
    bd00:	f800283a 	ret

0000bd04 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    bd04:	deffec04 	addi	sp,sp,-80
    bd08:	dfc01315 	stw	ra,76(sp)
    bd0c:	df001215 	stw	fp,72(sp)
    bd10:	df001204 	addi	fp,sp,72
    bd14:	e13ffa15 	stw	r4,-24(fp)
    bd18:	e17ffb15 	stw	r5,-20(fp)
    bd1c:	e1bffc15 	stw	r6,-16(fp)
    bd20:	3809883a 	mov	r4,r7
    bd24:	e0c00217 	ldw	r3,8(fp)
    bd28:	e0800617 	ldw	r2,24(fp)
    bd2c:	e13ffd05 	stb	r4,-12(fp)
    bd30:	e0fffe0d 	sth	r3,-8(fp)
    bd34:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    bd38:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    bd3c:	e0bffd03 	ldbu	r2,-12(fp)
    bd40:	10800570 	cmpltui	r2,r2,21
    bd44:	1000021e 	bne	r2,zero,bd50 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    bd48:	00800a84 	movi	r2,42
    bd4c:	00006306 	br	bedc <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd50:	0005303a 	rdctl	r2,status
    bd54:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd58:	e0fff417 	ldw	r3,-48(fp)
    bd5c:	00bfff84 	movi	r2,-2
    bd60:	1884703a 	and	r2,r3,r2
    bd64:	1001703a 	wrctl	status,r2
  
  return context;
    bd68:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    bd6c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    bd70:	00800074 	movhi	r2,1
    bd74:	10952c04 	addi	r2,r2,21680
    bd78:	10800003 	ldbu	r2,0(r2)
    bd7c:	10803fcc 	andi	r2,r2,255
    bd80:	10000626 	beq	r2,zero,bd9c <OSTaskCreateExt+0x98>
    bd84:	e0bff117 	ldw	r2,-60(fp)
    bd88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd8c:	e0bff517 	ldw	r2,-44(fp)
    bd90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    bd94:	00800f04 	movi	r2,60
    bd98:	00005006 	br	bedc <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    bd9c:	e0fffd03 	ldbu	r3,-12(fp)
    bda0:	008000b4 	movhi	r2,2
    bda4:	1089b404 	addi	r2,r2,9936
    bda8:	18c7883a 	add	r3,r3,r3
    bdac:	18c7883a 	add	r3,r3,r3
    bdb0:	10c5883a 	add	r2,r2,r3
    bdb4:	10800017 	ldw	r2,0(r2)
    bdb8:	1000431e 	bne	r2,zero,bec8 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    bdbc:	e0fffd03 	ldbu	r3,-12(fp)
    bdc0:	008000b4 	movhi	r2,2
    bdc4:	1089b404 	addi	r2,r2,9936
    bdc8:	18c7883a 	add	r3,r3,r3
    bdcc:	18c7883a 	add	r3,r3,r3
    bdd0:	10c5883a 	add	r2,r2,r3
    bdd4:	00c00044 	movi	r3,1
    bdd8:	10c00015 	stw	r3,0(r2)
    bddc:	e0bff117 	ldw	r2,-60(fp)
    bde0:	e0bff615 	stw	r2,-40(fp)
    bde4:	e0bff617 	ldw	r2,-40(fp)
    bde8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    bdec:	e0bfff0b 	ldhu	r2,-4(fp)
    bdf0:	e1000317 	ldw	r4,12(fp)
    bdf4:	e1400417 	ldw	r5,16(fp)
    bdf8:	100d883a 	mov	r6,r2
    bdfc:	000ce900 	call	ce90 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    be00:	e0bfff0b 	ldhu	r2,-4(fp)
    be04:	e13ffa17 	ldw	r4,-24(fp)
    be08:	e17ffb17 	ldw	r5,-20(fp)
    be0c:	e1bffc17 	ldw	r6,-16(fp)
    be10:	100f883a 	mov	r7,r2
    be14:	001083c0 	call	1083c <OSTaskStkInit>
    be18:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    be1c:	e13ffd03 	ldbu	r4,-12(fp)
    be20:	e1fffe0b 	ldhu	r7,-8(fp)
    be24:	e0bfff0b 	ldhu	r2,-4(fp)
    be28:	e0c00417 	ldw	r3,16(fp)
    be2c:	d8c00015 	stw	r3,0(sp)
    be30:	e0c00517 	ldw	r3,20(fp)
    be34:	d8c00115 	stw	r3,4(sp)
    be38:	d8800215 	stw	r2,8(sp)
    be3c:	e17ff217 	ldw	r5,-56(fp)
    be40:	e1800317 	ldw	r6,12(fp)
    be44:	00074f00 	call	74f0 <OS_TCBInit>
    be48:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    be4c:	e0bff303 	ldbu	r2,-52(fp)
    be50:	1000081e 	bne	r2,zero,be74 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    be54:	00800074 	movhi	r2,1
    be58:	10951e44 	addi	r2,r2,21625
    be5c:	10800003 	ldbu	r2,0(r2)
    be60:	10803fcc 	andi	r2,r2,255
    be64:	10800058 	cmpnei	r2,r2,1
    be68:	1000151e 	bne	r2,zero,bec0 <OSTaskCreateExt+0x1bc>
                OS_Sched();
    be6c:	00070ec0 	call	70ec <OS_Sched>
    be70:	00001306 	br	bec0 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be74:	0005303a 	rdctl	r2,status
    be78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be7c:	e0fff717 	ldw	r3,-36(fp)
    be80:	00bfff84 	movi	r2,-2
    be84:	1884703a 	and	r2,r3,r2
    be88:	1001703a 	wrctl	status,r2
  
  return context;
    be8c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    be90:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    be94:	e0fffd03 	ldbu	r3,-12(fp)
    be98:	008000b4 	movhi	r2,2
    be9c:	1089b404 	addi	r2,r2,9936
    bea0:	18c7883a 	add	r3,r3,r3
    bea4:	18c7883a 	add	r3,r3,r3
    bea8:	10c5883a 	add	r2,r2,r3
    beac:	10000015 	stw	zero,0(r2)
    beb0:	e0bff117 	ldw	r2,-60(fp)
    beb4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    beb8:	e0bff817 	ldw	r2,-32(fp)
    bebc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    bec0:	e0bff303 	ldbu	r2,-52(fp)
    bec4:	00000506 	br	bedc <OSTaskCreateExt+0x1d8>
    bec8:	e0bff117 	ldw	r2,-60(fp)
    becc:	e0bff915 	stw	r2,-28(fp)
    bed0:	e0bff917 	ldw	r2,-28(fp)
    bed4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    bed8:	00800a04 	movi	r2,40
}
    bedc:	e037883a 	mov	sp,fp
    bee0:	dfc00117 	ldw	ra,4(sp)
    bee4:	df000017 	ldw	fp,0(sp)
    bee8:	dec00204 	addi	sp,sp,8
    beec:	f800283a 	ret

0000bef0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    bef0:	defff404 	addi	sp,sp,-48
    bef4:	dfc00b15 	stw	ra,44(sp)
    bef8:	df000a15 	stw	fp,40(sp)
    befc:	df000a04 	addi	fp,sp,40
    bf00:	2005883a 	mov	r2,r4
    bf04:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    bf08:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    bf0c:	00800074 	movhi	r2,1
    bf10:	10952c04 	addi	r2,r2,21680
    bf14:	10800003 	ldbu	r2,0(r2)
    bf18:	10803fcc 	andi	r2,r2,255
    bf1c:	10000226 	beq	r2,zero,bf28 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    bf20:	00801004 	movi	r2,64
    bf24:	0000e506 	br	c2bc <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    bf28:	e0bfff03 	ldbu	r2,-4(fp)
    bf2c:	10800518 	cmpnei	r2,r2,20
    bf30:	1000021e 	bne	r2,zero,bf3c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    bf34:	00800f84 	movi	r2,62
    bf38:	0000e006 	br	c2bc <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    bf3c:	e0bfff03 	ldbu	r2,-4(fp)
    bf40:	10800530 	cmpltui	r2,r2,20
    bf44:	1000051e 	bne	r2,zero,bf5c <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    bf48:	e0bfff03 	ldbu	r2,-4(fp)
    bf4c:	10803fe0 	cmpeqi	r2,r2,255
    bf50:	1000021e 	bne	r2,zero,bf5c <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    bf54:	00800a84 	movi	r2,42
    bf58:	0000d806 	br	c2bc <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf5c:	0005303a 	rdctl	r2,status
    bf60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf64:	e0fff917 	ldw	r3,-28(fp)
    bf68:	00bfff84 	movi	r2,-2
    bf6c:	1884703a 	and	r2,r3,r2
    bf70:	1001703a 	wrctl	status,r2
  
  return context;
    bf74:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    bf78:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    bf7c:	e0bfff03 	ldbu	r2,-4(fp)
    bf80:	10803fd8 	cmpnei	r2,r2,255
    bf84:	1000051e 	bne	r2,zero,bf9c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    bf88:	00800074 	movhi	r2,1
    bf8c:	10952d04 	addi	r2,r2,21684
    bf90:	10800017 	ldw	r2,0(r2)
    bf94:	10800c83 	ldbu	r2,50(r2)
    bf98:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bf9c:	e0ffff03 	ldbu	r3,-4(fp)
    bfa0:	008000b4 	movhi	r2,2
    bfa4:	1089b404 	addi	r2,r2,9936
    bfa8:	18c7883a 	add	r3,r3,r3
    bfac:	18c7883a 	add	r3,r3,r3
    bfb0:	10c5883a 	add	r2,r2,r3
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    bfbc:	e0bff717 	ldw	r2,-36(fp)
    bfc0:	1000061e 	bne	r2,zero,bfdc <OSTaskDel+0xec>
    bfc4:	e0bff617 	ldw	r2,-40(fp)
    bfc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfcc:	e0bffa17 	ldw	r2,-24(fp)
    bfd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bfd4:	008010c4 	movi	r2,67
    bfd8:	0000b806 	br	c2bc <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    bfdc:	e0bff717 	ldw	r2,-36(fp)
    bfe0:	10800058 	cmpnei	r2,r2,1
    bfe4:	1000061e 	bne	r2,zero,c000 <OSTaskDel+0x110>
    bfe8:	e0bff617 	ldw	r2,-40(fp)
    bfec:	e0bffb15 	stw	r2,-20(fp)
    bff0:	e0bffb17 	ldw	r2,-20(fp)
    bff4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    bff8:	00800f44 	movi	r2,61
    bffc:	0000af06 	br	c2bc <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    c000:	e0bff717 	ldw	r2,-36(fp)
    c004:	10800d03 	ldbu	r2,52(r2)
    c008:	10c03fcc 	andi	r3,r2,255
    c00c:	e0bff717 	ldw	r2,-36(fp)
    c010:	10800d03 	ldbu	r2,52(r2)
    c014:	11003fcc 	andi	r4,r2,255
    c018:	00800074 	movhi	r2,1
    c01c:	10952a44 	addi	r2,r2,21673
    c020:	1105883a 	add	r2,r2,r4
    c024:	10800003 	ldbu	r2,0(r2)
    c028:	1009883a 	mov	r4,r2
    c02c:	e0bff717 	ldw	r2,-36(fp)
    c030:	10800d43 	ldbu	r2,53(r2)
    c034:	0084303a 	nor	r2,zero,r2
    c038:	2084703a 	and	r2,r4,r2
    c03c:	1009883a 	mov	r4,r2
    c040:	00800074 	movhi	r2,1
    c044:	10952a44 	addi	r2,r2,21673
    c048:	10c5883a 	add	r2,r2,r3
    c04c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    c050:	e0bff717 	ldw	r2,-36(fp)
    c054:	10800d03 	ldbu	r2,52(r2)
    c058:	10c03fcc 	andi	r3,r2,255
    c05c:	00800074 	movhi	r2,1
    c060:	10952a44 	addi	r2,r2,21673
    c064:	10c5883a 	add	r2,r2,r3
    c068:	10800003 	ldbu	r2,0(r2)
    c06c:	10803fcc 	andi	r2,r2,255
    c070:	10000c1e 	bne	r2,zero,c0a4 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    c074:	e0bff717 	ldw	r2,-36(fp)
    c078:	10800d83 	ldbu	r2,54(r2)
    c07c:	0084303a 	nor	r2,zero,r2
    c080:	1007883a 	mov	r3,r2
    c084:	00800074 	movhi	r2,1
    c088:	10952a04 	addi	r2,r2,21672
    c08c:	10800003 	ldbu	r2,0(r2)
    c090:	1884703a 	and	r2,r3,r2
    c094:	1007883a 	mov	r3,r2
    c098:	00800074 	movhi	r2,1
    c09c:	10952a04 	addi	r2,r2,21672
    c0a0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    c0a4:	e0bff717 	ldw	r2,-36(fp)
    c0a8:	10800717 	ldw	r2,28(r2)
    c0ac:	10000526 	beq	r2,zero,c0c4 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    c0b0:	e0bff717 	ldw	r2,-36(fp)
    c0b4:	10800717 	ldw	r2,28(r2)
    c0b8:	e13ff717 	ldw	r4,-36(fp)
    c0bc:	100b883a 	mov	r5,r2
    c0c0:	0006ac40 	call	6ac4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    c0c4:	e0bff717 	ldw	r2,-36(fp)
    c0c8:	10800817 	ldw	r2,32(r2)
    c0cc:	10000526 	beq	r2,zero,c0e4 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    c0d0:	e0bff717 	ldw	r2,-36(fp)
    c0d4:	10800817 	ldw	r2,32(r2)
    c0d8:	e13ff717 	ldw	r4,-36(fp)
    c0dc:	100b883a 	mov	r5,r2
    c0e0:	0006b780 	call	6b78 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    c0e4:	e0bff717 	ldw	r2,-36(fp)
    c0e8:	10800a17 	ldw	r2,40(r2)
    c0ec:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    c0f0:	e0bff817 	ldw	r2,-32(fp)
    c0f4:	10000226 	beq	r2,zero,c100 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    c0f8:	e13ff817 	ldw	r4,-32(fp)
    c0fc:	00090cc0 	call	90cc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    c100:	e0bff717 	ldw	r2,-36(fp)
    c104:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    c108:	e0bff717 	ldw	r2,-36(fp)
    c10c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    c110:	e0bff717 	ldw	r2,-36(fp)
    c114:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    c118:	00800074 	movhi	r2,1
    c11c:	10951e04 	addi	r2,r2,21624
    c120:	10800003 	ldbu	r2,0(r2)
    c124:	10803fcc 	andi	r2,r2,255
    c128:	10803fe0 	cmpeqi	r2,r2,255
    c12c:	1000081e 	bne	r2,zero,c150 <OSTaskDel+0x260>
        OSLockNesting++;
    c130:	00800074 	movhi	r2,1
    c134:	10951e04 	addi	r2,r2,21624
    c138:	10800003 	ldbu	r2,0(r2)
    c13c:	10800044 	addi	r2,r2,1
    c140:	1007883a 	mov	r3,r2
    c144:	00800074 	movhi	r2,1
    c148:	10951e04 	addi	r2,r2,21624
    c14c:	10c00005 	stb	r3,0(r2)
    c150:	e0bff617 	ldw	r2,-40(fp)
    c154:	e0bffc15 	stw	r2,-16(fp)
    c158:	e0bffc17 	ldw	r2,-16(fp)
    c15c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    c160:	00066b80 	call	66b8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c164:	0005303a 	rdctl	r2,status
    c168:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c16c:	e0fffd17 	ldw	r3,-12(fp)
    c170:	00bfff84 	movi	r2,-2
    c174:	1884703a 	and	r2,r3,r2
    c178:	1001703a 	wrctl	status,r2
  
  return context;
    c17c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    c180:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    c184:	00800074 	movhi	r2,1
    c188:	10951e04 	addi	r2,r2,21624
    c18c:	10800003 	ldbu	r2,0(r2)
    c190:	10803fcc 	andi	r2,r2,255
    c194:	10000826 	beq	r2,zero,c1b8 <OSTaskDel+0x2c8>
        OSLockNesting--;
    c198:	00800074 	movhi	r2,1
    c19c:	10951e04 	addi	r2,r2,21624
    c1a0:	10800003 	ldbu	r2,0(r2)
    c1a4:	10bfffc4 	addi	r2,r2,-1
    c1a8:	1007883a 	mov	r3,r2
    c1ac:	00800074 	movhi	r2,1
    c1b0:	10951e04 	addi	r2,r2,21624
    c1b4:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    c1b8:	e13ff717 	ldw	r4,-36(fp)
    c1bc:	00109b80 	call	109b8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    c1c0:	00800074 	movhi	r2,1
    c1c4:	10952644 	addi	r2,r2,21657
    c1c8:	10800003 	ldbu	r2,0(r2)
    c1cc:	10bfffc4 	addi	r2,r2,-1
    c1d0:	1007883a 	mov	r3,r2
    c1d4:	00800074 	movhi	r2,1
    c1d8:	10952644 	addi	r2,r2,21657
    c1dc:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    c1e0:	e0ffff03 	ldbu	r3,-4(fp)
    c1e4:	008000b4 	movhi	r2,2
    c1e8:	1089b404 	addi	r2,r2,9936
    c1ec:	18c7883a 	add	r3,r3,r3
    c1f0:	18c7883a 	add	r3,r3,r3
    c1f4:	10c5883a 	add	r2,r2,r3
    c1f8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    c1fc:	e0bff717 	ldw	r2,-36(fp)
    c200:	10800617 	ldw	r2,24(r2)
    c204:	1000091e 	bne	r2,zero,c22c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    c208:	e0bff717 	ldw	r2,-36(fp)
    c20c:	10800517 	ldw	r2,20(r2)
    c210:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    c214:	e0bff717 	ldw	r2,-36(fp)
    c218:	10c00517 	ldw	r3,20(r2)
    c21c:	00800074 	movhi	r2,1
    c220:	10952104 	addi	r2,r2,21636
    c224:	10c00015 	stw	r3,0(r2)
    c228:	00000a06 	br	c254 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    c22c:	e0bff717 	ldw	r2,-36(fp)
    c230:	10800617 	ldw	r2,24(r2)
    c234:	e0fff717 	ldw	r3,-36(fp)
    c238:	18c00517 	ldw	r3,20(r3)
    c23c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    c240:	e0bff717 	ldw	r2,-36(fp)
    c244:	10800517 	ldw	r2,20(r2)
    c248:	e0fff717 	ldw	r3,-36(fp)
    c24c:	18c00617 	ldw	r3,24(r3)
    c250:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    c254:	00800074 	movhi	r2,1
    c258:	10952504 	addi	r2,r2,21652
    c25c:	10c00017 	ldw	r3,0(r2)
    c260:	e0bff717 	ldw	r2,-36(fp)
    c264:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    c268:	00800074 	movhi	r2,1
    c26c:	10952504 	addi	r2,r2,21652
    c270:	e0fff717 	ldw	r3,-36(fp)
    c274:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    c278:	e0bff717 	ldw	r2,-36(fp)
    c27c:	00c00fc4 	movi	r3,63
    c280:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    c284:	e0bff717 	ldw	r2,-36(fp)
    c288:	10001345 	stb	zero,77(r2)
    c28c:	e0bff617 	ldw	r2,-40(fp)
    c290:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c294:	e0bffe17 	ldw	r2,-8(fp)
    c298:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    c29c:	00800074 	movhi	r2,1
    c2a0:	10951e44 	addi	r2,r2,21625
    c2a4:	10800003 	ldbu	r2,0(r2)
    c2a8:	10803fcc 	andi	r2,r2,255
    c2ac:	10800058 	cmpnei	r2,r2,1
    c2b0:	1000011e 	bne	r2,zero,c2b8 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    c2b4:	00070ec0 	call	70ec <OS_Sched>
    }
    return (OS_ERR_NONE);
    c2b8:	0005883a 	mov	r2,zero
}
    c2bc:	e037883a 	mov	sp,fp
    c2c0:	dfc00117 	ldw	ra,4(sp)
    c2c4:	df000017 	ldw	fp,0(sp)
    c2c8:	dec00204 	addi	sp,sp,8
    c2cc:	f800283a 	ret

0000c2d0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    c2d0:	defff504 	addi	sp,sp,-44
    c2d4:	df000a15 	stw	fp,40(sp)
    c2d8:	df000a04 	addi	fp,sp,40
    c2dc:	2005883a 	mov	r2,r4
    c2e0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c2e4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    c2e8:	e0bfff03 	ldbu	r2,-4(fp)
    c2ec:	10800518 	cmpnei	r2,r2,20
    c2f0:	1000021e 	bne	r2,zero,c2fc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    c2f4:	00800f84 	movi	r2,62
    c2f8:	00004706 	br	c418 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    c2fc:	e0bfff03 	ldbu	r2,-4(fp)
    c300:	10800530 	cmpltui	r2,r2,20
    c304:	1000051e 	bne	r2,zero,c31c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    c308:	e0bfff03 	ldbu	r2,-4(fp)
    c30c:	10803fe0 	cmpeqi	r2,r2,255
    c310:	1000021e 	bne	r2,zero,c31c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    c314:	00800a84 	movi	r2,42
    c318:	00003f06 	br	c418 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    c31c:	e0bfff03 	ldbu	r2,-4(fp)
    c320:	10803fd8 	cmpnei	r2,r2,255
    c324:	1000131e 	bne	r2,zero,c374 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c328:	0005303a 	rdctl	r2,status
    c32c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c330:	e0fff917 	ldw	r3,-28(fp)
    c334:	00bfff84 	movi	r2,-2
    c338:	1884703a 	and	r2,r3,r2
    c33c:	1001703a 	wrctl	status,r2
  
  return context;
    c340:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    c344:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    c348:	00800074 	movhi	r2,1
    c34c:	10952d04 	addi	r2,r2,21684
    c350:	10800017 	ldw	r2,0(r2)
    c354:	10800dc3 	ldbu	r2,55(r2)
    c358:	e0bff705 	stb	r2,-36(fp)
    c35c:	e0bff617 	ldw	r2,-40(fp)
    c360:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c364:	e0bffa17 	ldw	r2,-24(fp)
    c368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    c36c:	e0bff703 	ldbu	r2,-36(fp)
    c370:	00002906 	br	c418 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c374:	0005303a 	rdctl	r2,status
    c378:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c37c:	e0fffb17 	ldw	r3,-20(fp)
    c380:	00bfff84 	movi	r2,-2
    c384:	1884703a 	and	r2,r3,r2
    c388:	1001703a 	wrctl	status,r2
  
  return context;
    c38c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    c390:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    c394:	e0ffff03 	ldbu	r3,-4(fp)
    c398:	008000b4 	movhi	r2,2
    c39c:	1089b404 	addi	r2,r2,9936
    c3a0:	18c7883a 	add	r3,r3,r3
    c3a4:	18c7883a 	add	r3,r3,r3
    c3a8:	10c5883a 	add	r2,r2,r3
    c3ac:	10800017 	ldw	r2,0(r2)
    c3b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    c3b4:	e0bff817 	ldw	r2,-32(fp)
    c3b8:	1000061e 	bne	r2,zero,c3d4 <OSTaskDelReq+0x104>
    c3bc:	e0bff617 	ldw	r2,-40(fp)
    c3c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3c4:	e0bffc17 	ldw	r2,-16(fp)
    c3c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    c3cc:	008010c4 	movi	r2,67
    c3d0:	00001106 	br	c418 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    c3d4:	e0bff817 	ldw	r2,-32(fp)
    c3d8:	10800058 	cmpnei	r2,r2,1
    c3dc:	1000061e 	bne	r2,zero,c3f8 <OSTaskDelReq+0x128>
    c3e0:	e0bff617 	ldw	r2,-40(fp)
    c3e4:	e0bffd15 	stw	r2,-12(fp)
    c3e8:	e0bffd17 	ldw	r2,-12(fp)
    c3ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    c3f0:	00800f44 	movi	r2,61
    c3f4:	00000806 	br	c418 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    c3f8:	e0bff817 	ldw	r2,-32(fp)
    c3fc:	00c00fc4 	movi	r3,63
    c400:	10c00dc5 	stb	r3,55(r2)
    c404:	e0bff617 	ldw	r2,-40(fp)
    c408:	e0bffe15 	stw	r2,-8(fp)
    c40c:	e0bffe17 	ldw	r2,-8(fp)
    c410:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c414:	0005883a 	mov	r2,zero
}
    c418:	e037883a 	mov	sp,fp
    c41c:	df000017 	ldw	fp,0(sp)
    c420:	dec00104 	addi	sp,sp,4
    c424:	f800283a 	ret

0000c428 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c428:	defff404 	addi	sp,sp,-48
    c42c:	dfc00b15 	stw	ra,44(sp)
    c430:	df000a15 	stw	fp,40(sp)
    c434:	df000a04 	addi	fp,sp,40
    c438:	2005883a 	mov	r2,r4
    c43c:	e17ffe15 	stw	r5,-8(fp)
    c440:	e1bfff15 	stw	r6,-4(fp)
    c444:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    c448:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    c44c:	e0bfff17 	ldw	r2,-4(fp)
    c450:	1000021e 	bne	r2,zero,c45c <OSTaskNameGet+0x34>
        return (0);
    c454:	0005883a 	mov	r2,zero
    c458:	00005806 	br	c5bc <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    c45c:	e0bffd03 	ldbu	r2,-12(fp)
    c460:	10800570 	cmpltui	r2,r2,21
    c464:	1000081e 	bne	r2,zero,c488 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    c468:	e0bffd03 	ldbu	r2,-12(fp)
    c46c:	10803fe0 	cmpeqi	r2,r2,255
    c470:	1000051e 	bne	r2,zero,c488 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    c474:	e0bfff17 	ldw	r2,-4(fp)
    c478:	00c00a84 	movi	r3,42
    c47c:	10c00005 	stb	r3,0(r2)
            return (0);
    c480:	0005883a 	mov	r2,zero
    c484:	00004d06 	br	c5bc <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    c488:	e0bffe17 	ldw	r2,-8(fp)
    c48c:	1000051e 	bne	r2,zero,c4a4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    c490:	e0bfff17 	ldw	r2,-4(fp)
    c494:	00c00304 	movi	r3,12
    c498:	10c00005 	stb	r3,0(r2)
        return (0);
    c49c:	0005883a 	mov	r2,zero
    c4a0:	00004606 	br	c5bc <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    c4a4:	00800074 	movhi	r2,1
    c4a8:	10952c04 	addi	r2,r2,21680
    c4ac:	10800003 	ldbu	r2,0(r2)
    c4b0:	10803fcc 	andi	r2,r2,255
    c4b4:	10000526 	beq	r2,zero,c4cc <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    c4b8:	e0bfff17 	ldw	r2,-4(fp)
    c4bc:	00c00444 	movi	r3,17
    c4c0:	10c00005 	stb	r3,0(r2)
        return (0);
    c4c4:	0005883a 	mov	r2,zero
    c4c8:	00003c06 	br	c5bc <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4cc:	0005303a 	rdctl	r2,status
    c4d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4d4:	e0fff917 	ldw	r3,-28(fp)
    c4d8:	00bfff84 	movi	r2,-2
    c4dc:	1884703a 	and	r2,r3,r2
    c4e0:	1001703a 	wrctl	status,r2
  
  return context;
    c4e4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    c4e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    c4ec:	e0bffd03 	ldbu	r2,-12(fp)
    c4f0:	10803fd8 	cmpnei	r2,r2,255
    c4f4:	1000051e 	bne	r2,zero,c50c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    c4f8:	00800074 	movhi	r2,1
    c4fc:	10952d04 	addi	r2,r2,21684
    c500:	10800017 	ldw	r2,0(r2)
    c504:	10800c83 	ldbu	r2,50(r2)
    c508:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c50c:	e0fffd03 	ldbu	r3,-12(fp)
    c510:	008000b4 	movhi	r2,2
    c514:	1089b404 	addi	r2,r2,9936
    c518:	18c7883a 	add	r3,r3,r3
    c51c:	18c7883a 	add	r3,r3,r3
    c520:	10c5883a 	add	r2,r2,r3
    c524:	10800017 	ldw	r2,0(r2)
    c528:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    c52c:	e0bff717 	ldw	r2,-36(fp)
    c530:	1000091e 	bne	r2,zero,c558 <OSTaskNameGet+0x130>
    c534:	e0bff617 	ldw	r2,-40(fp)
    c538:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c53c:	e0bffa17 	ldw	r2,-24(fp)
    c540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c544:	e0bfff17 	ldw	r2,-4(fp)
    c548:	00c010c4 	movi	r3,67
    c54c:	10c00005 	stb	r3,0(r2)
        return (0);
    c550:	0005883a 	mov	r2,zero
    c554:	00001906 	br	c5bc <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    c558:	e0bff717 	ldw	r2,-36(fp)
    c55c:	10800058 	cmpnei	r2,r2,1
    c560:	1000091e 	bne	r2,zero,c588 <OSTaskNameGet+0x160>
    c564:	e0bff617 	ldw	r2,-40(fp)
    c568:	e0bffb15 	stw	r2,-20(fp)
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c574:	e0bfff17 	ldw	r2,-4(fp)
    c578:	00c010c4 	movi	r3,67
    c57c:	10c00005 	stb	r3,0(r2)
        return (0);
    c580:	0005883a 	mov	r2,zero
    c584:	00000d06 	br	c5bc <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    c588:	e0bff717 	ldw	r2,-36(fp)
    c58c:	10801304 	addi	r2,r2,76
    c590:	e13ffe17 	ldw	r4,-8(fp)
    c594:	100b883a 	mov	r5,r2
    c598:	00072280 	call	7228 <OS_StrCopy>
    c59c:	e0bff805 	stb	r2,-32(fp)
    c5a0:	e0bff617 	ldw	r2,-40(fp)
    c5a4:	e0bffc15 	stw	r2,-16(fp)
    c5a8:	e0bffc17 	ldw	r2,-16(fp)
    c5ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c5b0:	e0bfff17 	ldw	r2,-4(fp)
    c5b4:	10000005 	stb	zero,0(r2)
    return (len);
    c5b8:	e0bff803 	ldbu	r2,-32(fp)
}
    c5bc:	e037883a 	mov	sp,fp
    c5c0:	dfc00117 	ldw	ra,4(sp)
    c5c4:	df000017 	ldw	fp,0(sp)
    c5c8:	dec00204 	addi	sp,sp,8
    c5cc:	f800283a 	ret

0000c5d0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c5d0:	defff304 	addi	sp,sp,-52
    c5d4:	dfc00c15 	stw	ra,48(sp)
    c5d8:	df000b15 	stw	fp,44(sp)
    c5dc:	df000b04 	addi	fp,sp,44
    c5e0:	2005883a 	mov	r2,r4
    c5e4:	e17ffe15 	stw	r5,-8(fp)
    c5e8:	e1bfff15 	stw	r6,-4(fp)
    c5ec:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c5f0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    c5f4:	e0bfff17 	ldw	r2,-4(fp)
    c5f8:	1000011e 	bne	r2,zero,c600 <OSTaskNameSet+0x30>
        return;
    c5fc:	00005f06 	br	c77c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    c600:	e0bffd03 	ldbu	r2,-12(fp)
    c604:	10800570 	cmpltui	r2,r2,21
    c608:	1000071e 	bne	r2,zero,c628 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    c60c:	e0bffd03 	ldbu	r2,-12(fp)
    c610:	10803fe0 	cmpeqi	r2,r2,255
    c614:	1000041e 	bne	r2,zero,c628 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    c618:	e0bfff17 	ldw	r2,-4(fp)
    c61c:	00c00a84 	movi	r3,42
    c620:	10c00005 	stb	r3,0(r2)
            return;
    c624:	00005506 	br	c77c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    c628:	e0bffe17 	ldw	r2,-8(fp)
    c62c:	1000041e 	bne	r2,zero,c640 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	00c00304 	movi	r3,12
    c638:	10c00005 	stb	r3,0(r2)
        return;
    c63c:	00004f06 	br	c77c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    c640:	00800074 	movhi	r2,1
    c644:	10952c04 	addi	r2,r2,21680
    c648:	10800003 	ldbu	r2,0(r2)
    c64c:	10803fcc 	andi	r2,r2,255
    c650:	10000426 	beq	r2,zero,c664 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    c654:	e0bfff17 	ldw	r2,-4(fp)
    c658:	00c00484 	movi	r3,18
    c65c:	10c00005 	stb	r3,0(r2)
        return;
    c660:	00004606 	br	c77c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c664:	0005303a 	rdctl	r2,status
    c668:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c66c:	e0fff817 	ldw	r3,-32(fp)
    c670:	00bfff84 	movi	r2,-2
    c674:	1884703a 	and	r2,r3,r2
    c678:	1001703a 	wrctl	status,r2
  
  return context;
    c67c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    c680:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    c684:	e0bffd03 	ldbu	r2,-12(fp)
    c688:	10803fd8 	cmpnei	r2,r2,255
    c68c:	1000051e 	bne	r2,zero,c6a4 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    c690:	00800074 	movhi	r2,1
    c694:	10952d04 	addi	r2,r2,21684
    c698:	10800017 	ldw	r2,0(r2)
    c69c:	10800c83 	ldbu	r2,50(r2)
    c6a0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c6a4:	e0fffd03 	ldbu	r3,-12(fp)
    c6a8:	008000b4 	movhi	r2,2
    c6ac:	1089b404 	addi	r2,r2,9936
    c6b0:	18c7883a 	add	r3,r3,r3
    c6b4:	18c7883a 	add	r3,r3,r3
    c6b8:	10c5883a 	add	r2,r2,r3
    c6bc:	10800017 	ldw	r2,0(r2)
    c6c0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    c6c4:	e0bff617 	ldw	r2,-40(fp)
    c6c8:	1000081e 	bne	r2,zero,c6ec <OSTaskNameSet+0x11c>
    c6cc:	e0bff517 	ldw	r2,-44(fp)
    c6d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6d4:	e0bff917 	ldw	r2,-28(fp)
    c6d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c6dc:	e0bfff17 	ldw	r2,-4(fp)
    c6e0:	00c010c4 	movi	r3,67
    c6e4:	10c00005 	stb	r3,0(r2)
        return;
    c6e8:	00002406 	br	c77c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    c6ec:	e0bff617 	ldw	r2,-40(fp)
    c6f0:	10800058 	cmpnei	r2,r2,1
    c6f4:	1000081e 	bne	r2,zero,c718 <OSTaskNameSet+0x148>
    c6f8:	e0bff517 	ldw	r2,-44(fp)
    c6fc:	e0bffa15 	stw	r2,-24(fp)
    c700:	e0bffa17 	ldw	r2,-24(fp)
    c704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c708:	e0bfff17 	ldw	r2,-4(fp)
    c70c:	00c010c4 	movi	r3,67
    c710:	10c00005 	stb	r3,0(r2)
        return;
    c714:	00001906 	br	c77c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    c718:	e13ffe17 	ldw	r4,-8(fp)
    c71c:	000729c0 	call	729c <OS_StrLen>
    c720:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    c724:	e0bff703 	ldbu	r2,-36(fp)
    c728:	10800830 	cmpltui	r2,r2,32
    c72c:	1000081e 	bne	r2,zero,c750 <OSTaskNameSet+0x180>
    c730:	e0bff517 	ldw	r2,-44(fp)
    c734:	e0bffb15 	stw	r2,-20(fp)
    c738:	e0bffb17 	ldw	r2,-20(fp)
    c73c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    c740:	e0bfff17 	ldw	r2,-4(fp)
    c744:	00c01044 	movi	r3,65
    c748:	10c00005 	stb	r3,0(r2)
        return;
    c74c:	00000b06 	br	c77c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    c750:	e0bff617 	ldw	r2,-40(fp)
    c754:	10801304 	addi	r2,r2,76
    c758:	1009883a 	mov	r4,r2
    c75c:	e17ffe17 	ldw	r5,-8(fp)
    c760:	00072280 	call	7228 <OS_StrCopy>
    c764:	e0bff517 	ldw	r2,-44(fp)
    c768:	e0bffc15 	stw	r2,-16(fp)
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c774:	e0bfff17 	ldw	r2,-4(fp)
    c778:	10000005 	stb	zero,0(r2)
}
    c77c:	e037883a 	mov	sp,fp
    c780:	dfc00117 	ldw	ra,4(sp)
    c784:	df000017 	ldw	fp,0(sp)
    c788:	dec00204 	addi	sp,sp,8
    c78c:	f800283a 	ret

0000c790 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    c790:	defff404 	addi	sp,sp,-48
    c794:	dfc00b15 	stw	ra,44(sp)
    c798:	df000a15 	stw	fp,40(sp)
    c79c:	df000a04 	addi	fp,sp,40
    c7a0:	2005883a 	mov	r2,r4
    c7a4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c7a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    c7ac:	e0bfff03 	ldbu	r2,-4(fp)
    c7b0:	10800530 	cmpltui	r2,r2,20
    c7b4:	1000021e 	bne	r2,zero,c7c0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    c7b8:	00800a84 	movi	r2,42
    c7bc:	00006d06 	br	c974 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c7c0:	0005303a 	rdctl	r2,status
    c7c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c7c8:	e0fff817 	ldw	r3,-32(fp)
    c7cc:	00bfff84 	movi	r2,-2
    c7d0:	1884703a 	and	r2,r3,r2
    c7d4:	1001703a 	wrctl	status,r2
  
  return context;
    c7d8:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    c7dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    c7e0:	e0ffff03 	ldbu	r3,-4(fp)
    c7e4:	008000b4 	movhi	r2,2
    c7e8:	1089b404 	addi	r2,r2,9936
    c7ec:	18c7883a 	add	r3,r3,r3
    c7f0:	18c7883a 	add	r3,r3,r3
    c7f4:	10c5883a 	add	r2,r2,r3
    c7f8:	10800017 	ldw	r2,0(r2)
    c7fc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    c800:	e0bff717 	ldw	r2,-36(fp)
    c804:	1000061e 	bne	r2,zero,c820 <OSTaskResume+0x90>
    c808:	e0bff617 	ldw	r2,-40(fp)
    c80c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c810:	e0bff917 	ldw	r2,-28(fp)
    c814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    c818:	00801184 	movi	r2,70
    c81c:	00005506 	br	c974 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    c820:	e0bff717 	ldw	r2,-36(fp)
    c824:	10800058 	cmpnei	r2,r2,1
    c828:	1000061e 	bne	r2,zero,c844 <OSTaskResume+0xb4>
    c82c:	e0bff617 	ldw	r2,-40(fp)
    c830:	e0bffa15 	stw	r2,-24(fp)
    c834:	e0bffa17 	ldw	r2,-24(fp)
    c838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c83c:	008010c4 	movi	r2,67
    c840:	00004c06 	br	c974 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    c844:	e0bff717 	ldw	r2,-36(fp)
    c848:	10800c03 	ldbu	r2,48(r2)
    c84c:	10803fcc 	andi	r2,r2,255
    c850:	1080020c 	andi	r2,r2,8
    c854:	10004226 	beq	r2,zero,c960 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    c858:	e0bff717 	ldw	r2,-36(fp)
    c85c:	10c00c03 	ldbu	r3,48(r2)
    c860:	00bffdc4 	movi	r2,-9
    c864:	1884703a 	and	r2,r3,r2
    c868:	1007883a 	mov	r3,r2
    c86c:	e0bff717 	ldw	r2,-36(fp)
    c870:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    c874:	e0bff717 	ldw	r2,-36(fp)
    c878:	10800c03 	ldbu	r2,48(r2)
    c87c:	10803fcc 	andi	r2,r2,255
    c880:	1000311e 	bne	r2,zero,c948 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    c884:	e0bff717 	ldw	r2,-36(fp)
    c888:	10800b8b 	ldhu	r2,46(r2)
    c88c:	10bfffcc 	andi	r2,r2,65535
    c890:	1000281e 	bne	r2,zero,c934 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    c894:	e0bff717 	ldw	r2,-36(fp)
    c898:	10c00d83 	ldbu	r3,54(r2)
    c89c:	00800074 	movhi	r2,1
    c8a0:	10952a04 	addi	r2,r2,21672
    c8a4:	10800003 	ldbu	r2,0(r2)
    c8a8:	1884b03a 	or	r2,r3,r2
    c8ac:	1007883a 	mov	r3,r2
    c8b0:	00800074 	movhi	r2,1
    c8b4:	10952a04 	addi	r2,r2,21672
    c8b8:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    c8bc:	e0bff717 	ldw	r2,-36(fp)
    c8c0:	10800d03 	ldbu	r2,52(r2)
    c8c4:	10c03fcc 	andi	r3,r2,255
    c8c8:	e0bff717 	ldw	r2,-36(fp)
    c8cc:	10800d03 	ldbu	r2,52(r2)
    c8d0:	11003fcc 	andi	r4,r2,255
    c8d4:	00800074 	movhi	r2,1
    c8d8:	10952a44 	addi	r2,r2,21673
    c8dc:	1105883a 	add	r2,r2,r4
    c8e0:	11000003 	ldbu	r4,0(r2)
    c8e4:	e0bff717 	ldw	r2,-36(fp)
    c8e8:	10800d43 	ldbu	r2,53(r2)
    c8ec:	2084b03a 	or	r2,r4,r2
    c8f0:	1009883a 	mov	r4,r2
    c8f4:	00800074 	movhi	r2,1
    c8f8:	10952a44 	addi	r2,r2,21673
    c8fc:	10c5883a 	add	r2,r2,r3
    c900:	11000005 	stb	r4,0(r2)
    c904:	e0bff617 	ldw	r2,-40(fp)
    c908:	e0bffb15 	stw	r2,-20(fp)
    c90c:	e0bffb17 	ldw	r2,-20(fp)
    c910:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    c914:	00800074 	movhi	r2,1
    c918:	10951e44 	addi	r2,r2,21625
    c91c:	10800003 	ldbu	r2,0(r2)
    c920:	10803fcc 	andi	r2,r2,255
    c924:	10800058 	cmpnei	r2,r2,1
    c928:	10000b1e 	bne	r2,zero,c958 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    c92c:	00070ec0 	call	70ec <OS_Sched>
    c930:	00000906 	br	c958 <OSTaskResume+0x1c8>
    c934:	e0bff617 	ldw	r2,-40(fp)
    c938:	e0bffc15 	stw	r2,-16(fp)
    c93c:	e0bffc17 	ldw	r2,-16(fp)
    c940:	1001703a 	wrctl	status,r2
    c944:	00000406 	br	c958 <OSTaskResume+0x1c8>
    c948:	e0bff617 	ldw	r2,-40(fp)
    c94c:	e0bffd15 	stw	r2,-12(fp)
    c950:	e0bffd17 	ldw	r2,-12(fp)
    c954:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    c958:	0005883a 	mov	r2,zero
    c95c:	00000506 	br	c974 <OSTaskResume+0x1e4>
    c960:	e0bff617 	ldw	r2,-40(fp)
    c964:	e0bffe15 	stw	r2,-8(fp)
    c968:	e0bffe17 	ldw	r2,-8(fp)
    c96c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    c970:	00801104 	movi	r2,68
}
    c974:	e037883a 	mov	sp,fp
    c978:	dfc00117 	ldw	ra,4(sp)
    c97c:	df000017 	ldw	fp,0(sp)
    c980:	dec00204 	addi	sp,sp,8
    c984:	f800283a 	ret

0000c988 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    c988:	defff304 	addi	sp,sp,-52
    c98c:	df000c15 	stw	fp,48(sp)
    c990:	df000c04 	addi	fp,sp,48
    c994:	2005883a 	mov	r2,r4
    c998:	e17fff15 	stw	r5,-4(fp)
    c99c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    c9a0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    c9a4:	e0bffe03 	ldbu	r2,-8(fp)
    c9a8:	10800570 	cmpltui	r2,r2,21
    c9ac:	1000051e 	bne	r2,zero,c9c4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    c9b0:	e0bffe03 	ldbu	r2,-8(fp)
    c9b4:	10803fe0 	cmpeqi	r2,r2,255
    c9b8:	1000021e 	bne	r2,zero,c9c4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    c9bc:	00800a84 	movi	r2,42
    c9c0:	00005f06 	br	cb40 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    c9c4:	e0bfff17 	ldw	r2,-4(fp)
    c9c8:	1000021e 	bne	r2,zero,c9d4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    c9cc:	00800244 	movi	r2,9
    c9d0:	00005b06 	br	cb40 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    c9d4:	e0bfff17 	ldw	r2,-4(fp)
    c9d8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    c9dc:	e0bfff17 	ldw	r2,-4(fp)
    c9e0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c9e4:	0005303a 	rdctl	r2,status
    c9e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c9ec:	e0fff917 	ldw	r3,-28(fp)
    c9f0:	00bfff84 	movi	r2,-2
    c9f4:	1884703a 	and	r2,r3,r2
    c9f8:	1001703a 	wrctl	status,r2
  
  return context;
    c9fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    ca00:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    ca04:	e0bffe03 	ldbu	r2,-8(fp)
    ca08:	10803fd8 	cmpnei	r2,r2,255
    ca0c:	1000051e 	bne	r2,zero,ca24 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    ca10:	00800074 	movhi	r2,1
    ca14:	10952d04 	addi	r2,r2,21684
    ca18:	10800017 	ldw	r2,0(r2)
    ca1c:	10800c83 	ldbu	r2,50(r2)
    ca20:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ca24:	e0fffe03 	ldbu	r3,-8(fp)
    ca28:	008000b4 	movhi	r2,2
    ca2c:	1089b404 	addi	r2,r2,9936
    ca30:	18c7883a 	add	r3,r3,r3
    ca34:	18c7883a 	add	r3,r3,r3
    ca38:	10c5883a 	add	r2,r2,r3
    ca3c:	10800017 	ldw	r2,0(r2)
    ca40:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    ca44:	e0bff717 	ldw	r2,-36(fp)
    ca48:	1000061e 	bne	r2,zero,ca64 <OSTaskStkChk+0xdc>
    ca4c:	e0bff617 	ldw	r2,-40(fp)
    ca50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca54:	e0bffa17 	ldw	r2,-24(fp)
    ca58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ca5c:	008010c4 	movi	r2,67
    ca60:	00003706 	br	cb40 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ca64:	e0bff717 	ldw	r2,-36(fp)
    ca68:	10800058 	cmpnei	r2,r2,1
    ca6c:	1000061e 	bne	r2,zero,ca88 <OSTaskStkChk+0x100>
    ca70:	e0bff617 	ldw	r2,-40(fp)
    ca74:	e0bffb15 	stw	r2,-20(fp)
    ca78:	e0bffb17 	ldw	r2,-20(fp)
    ca7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ca80:	008010c4 	movi	r2,67
    ca84:	00002e06 	br	cb40 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    ca88:	e0bff717 	ldw	r2,-36(fp)
    ca8c:	1080040b 	ldhu	r2,16(r2)
    ca90:	10bfffcc 	andi	r2,r2,65535
    ca94:	1080004c 	andi	r2,r2,1
    ca98:	1000061e 	bne	r2,zero,cab4 <OSTaskStkChk+0x12c>
    ca9c:	e0bff617 	ldw	r2,-40(fp)
    caa0:	e0bffc15 	stw	r2,-16(fp)
    caa4:	e0bffc17 	ldw	r2,-16(fp)
    caa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    caac:	00801144 	movi	r2,69
    cab0:	00002306 	br	cb40 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    cab4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    cab8:	e0bff717 	ldw	r2,-36(fp)
    cabc:	10800317 	ldw	r2,12(r2)
    cac0:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    cac4:	e0bff717 	ldw	r2,-36(fp)
    cac8:	10800217 	ldw	r2,8(r2)
    cacc:	e0bff415 	stw	r2,-48(fp)
    cad0:	e0bff617 	ldw	r2,-40(fp)
    cad4:	e0bffd15 	stw	r2,-12(fp)
    cad8:	e0bffd17 	ldw	r2,-12(fp)
    cadc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    cae0:	00000306 	br	caf0 <OSTaskStkChk+0x168>
        nfree++;
    cae4:	e0bff517 	ldw	r2,-44(fp)
    cae8:	10800044 	addi	r2,r2,1
    caec:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    caf0:	e0bff417 	ldw	r2,-48(fp)
    caf4:	10c00104 	addi	r3,r2,4
    caf8:	e0fff415 	stw	r3,-48(fp)
    cafc:	10800017 	ldw	r2,0(r2)
    cb00:	103ff826 	beq	r2,zero,cae4 <__alt_mem_Flash_flash_data+0xf400cae4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    cb04:	e0bff517 	ldw	r2,-44(fp)
    cb08:	1085883a 	add	r2,r2,r2
    cb0c:	1085883a 	add	r2,r2,r2
    cb10:	1007883a 	mov	r3,r2
    cb14:	e0bfff17 	ldw	r2,-4(fp)
    cb18:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    cb1c:	e0fff817 	ldw	r3,-32(fp)
    cb20:	e0bff517 	ldw	r2,-44(fp)
    cb24:	1885c83a 	sub	r2,r3,r2
    cb28:	1085883a 	add	r2,r2,r2
    cb2c:	1085883a 	add	r2,r2,r2
    cb30:	1007883a 	mov	r3,r2
    cb34:	e0bfff17 	ldw	r2,-4(fp)
    cb38:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    cb3c:	0005883a 	mov	r2,zero
}
    cb40:	e037883a 	mov	sp,fp
    cb44:	df000017 	ldw	fp,0(sp)
    cb48:	dec00104 	addi	sp,sp,4
    cb4c:	f800283a 	ret

0000cb50 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    cb50:	defff504 	addi	sp,sp,-44
    cb54:	dfc00a15 	stw	ra,40(sp)
    cb58:	df000915 	stw	fp,36(sp)
    cb5c:	df000904 	addi	fp,sp,36
    cb60:	2005883a 	mov	r2,r4
    cb64:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cb68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    cb6c:	e0bfff03 	ldbu	r2,-4(fp)
    cb70:	10800518 	cmpnei	r2,r2,20
    cb74:	1000021e 	bne	r2,zero,cb80 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    cb78:	008011c4 	movi	r2,71
    cb7c:	00007406 	br	cd50 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    cb80:	e0bfff03 	ldbu	r2,-4(fp)
    cb84:	10800530 	cmpltui	r2,r2,20
    cb88:	1000051e 	bne	r2,zero,cba0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    cb8c:	e0bfff03 	ldbu	r2,-4(fp)
    cb90:	10803fe0 	cmpeqi	r2,r2,255
    cb94:	1000021e 	bne	r2,zero,cba0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    cb98:	00800a84 	movi	r2,42
    cb9c:	00006c06 	br	cd50 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cba0:	0005303a 	rdctl	r2,status
    cba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cba8:	e0fffb17 	ldw	r3,-20(fp)
    cbac:	00bfff84 	movi	r2,-2
    cbb0:	1884703a 	and	r2,r3,r2
    cbb4:	1001703a 	wrctl	status,r2
  
  return context;
    cbb8:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    cbbc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    cbc0:	e0bfff03 	ldbu	r2,-4(fp)
    cbc4:	10803fd8 	cmpnei	r2,r2,255
    cbc8:	1000081e 	bne	r2,zero,cbec <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    cbcc:	00800074 	movhi	r2,1
    cbd0:	10952d04 	addi	r2,r2,21684
    cbd4:	10800017 	ldw	r2,0(r2)
    cbd8:	10800c83 	ldbu	r2,50(r2)
    cbdc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    cbe0:	00800044 	movi	r2,1
    cbe4:	e0bff705 	stb	r2,-36(fp)
    cbe8:	00000b06 	br	cc18 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    cbec:	00800074 	movhi	r2,1
    cbf0:	10952d04 	addi	r2,r2,21684
    cbf4:	10800017 	ldw	r2,0(r2)
    cbf8:	10800c83 	ldbu	r2,50(r2)
    cbfc:	10c03fcc 	andi	r3,r2,255
    cc00:	e0bfff03 	ldbu	r2,-4(fp)
    cc04:	1880031e 	bne	r3,r2,cc14 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    cc08:	00800044 	movi	r2,1
    cc0c:	e0bff705 	stb	r2,-36(fp)
    cc10:	00000106 	br	cc18 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    cc14:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    cc18:	e0ffff03 	ldbu	r3,-4(fp)
    cc1c:	008000b4 	movhi	r2,2
    cc20:	1089b404 	addi	r2,r2,9936
    cc24:	18c7883a 	add	r3,r3,r3
    cc28:	18c7883a 	add	r3,r3,r3
    cc2c:	10c5883a 	add	r2,r2,r3
    cc30:	10800017 	ldw	r2,0(r2)
    cc34:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    cc38:	e0bff917 	ldw	r2,-28(fp)
    cc3c:	1000061e 	bne	r2,zero,cc58 <OSTaskSuspend+0x108>
    cc40:	e0bff817 	ldw	r2,-32(fp)
    cc44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc48:	e0bffc17 	ldw	r2,-16(fp)
    cc4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    cc50:	00801204 	movi	r2,72
    cc54:	00003e06 	br	cd50 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    cc58:	e0bff917 	ldw	r2,-28(fp)
    cc5c:	10800058 	cmpnei	r2,r2,1
    cc60:	1000061e 	bne	r2,zero,cc7c <OSTaskSuspend+0x12c>
    cc64:	e0bff817 	ldw	r2,-32(fp)
    cc68:	e0bffd15 	stw	r2,-12(fp)
    cc6c:	e0bffd17 	ldw	r2,-12(fp)
    cc70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    cc74:	008010c4 	movi	r2,67
    cc78:	00003506 	br	cd50 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    cc7c:	e0bff917 	ldw	r2,-28(fp)
    cc80:	10800d03 	ldbu	r2,52(r2)
    cc84:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    cc88:	e0fffa03 	ldbu	r3,-24(fp)
    cc8c:	e13ffa03 	ldbu	r4,-24(fp)
    cc90:	00800074 	movhi	r2,1
    cc94:	10952a44 	addi	r2,r2,21673
    cc98:	1105883a 	add	r2,r2,r4
    cc9c:	10800003 	ldbu	r2,0(r2)
    cca0:	1009883a 	mov	r4,r2
    cca4:	e0bff917 	ldw	r2,-28(fp)
    cca8:	10800d43 	ldbu	r2,53(r2)
    ccac:	0084303a 	nor	r2,zero,r2
    ccb0:	2084703a 	and	r2,r4,r2
    ccb4:	1009883a 	mov	r4,r2
    ccb8:	00800074 	movhi	r2,1
    ccbc:	10952a44 	addi	r2,r2,21673
    ccc0:	10c5883a 	add	r2,r2,r3
    ccc4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ccc8:	e0fffa03 	ldbu	r3,-24(fp)
    cccc:	00800074 	movhi	r2,1
    ccd0:	10952a44 	addi	r2,r2,21673
    ccd4:	10c5883a 	add	r2,r2,r3
    ccd8:	10800003 	ldbu	r2,0(r2)
    ccdc:	10803fcc 	andi	r2,r2,255
    cce0:	10000c1e 	bne	r2,zero,cd14 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    cce4:	e0bff917 	ldw	r2,-28(fp)
    cce8:	10800d83 	ldbu	r2,54(r2)
    ccec:	0084303a 	nor	r2,zero,r2
    ccf0:	1007883a 	mov	r3,r2
    ccf4:	00800074 	movhi	r2,1
    ccf8:	10952a04 	addi	r2,r2,21672
    ccfc:	10800003 	ldbu	r2,0(r2)
    cd00:	1884703a 	and	r2,r3,r2
    cd04:	1007883a 	mov	r3,r2
    cd08:	00800074 	movhi	r2,1
    cd0c:	10952a04 	addi	r2,r2,21672
    cd10:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    cd14:	e0bff917 	ldw	r2,-28(fp)
    cd18:	10800c03 	ldbu	r2,48(r2)
    cd1c:	10800214 	ori	r2,r2,8
    cd20:	1007883a 	mov	r3,r2
    cd24:	e0bff917 	ldw	r2,-28(fp)
    cd28:	10c00c05 	stb	r3,48(r2)
    cd2c:	e0bff817 	ldw	r2,-32(fp)
    cd30:	e0bffe15 	stw	r2,-8(fp)
    cd34:	e0bffe17 	ldw	r2,-8(fp)
    cd38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    cd3c:	e0bff703 	ldbu	r2,-36(fp)
    cd40:	10800058 	cmpnei	r2,r2,1
    cd44:	1000011e 	bne	r2,zero,cd4c <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    cd48:	00070ec0 	call	70ec <OS_Sched>
    }
    return (OS_ERR_NONE);
    cd4c:	0005883a 	mov	r2,zero
}
    cd50:	e037883a 	mov	sp,fp
    cd54:	dfc00117 	ldw	ra,4(sp)
    cd58:	df000017 	ldw	fp,0(sp)
    cd5c:	dec00204 	addi	sp,sp,8
    cd60:	f800283a 	ret

0000cd64 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    cd64:	defff604 	addi	sp,sp,-40
    cd68:	dfc00915 	stw	ra,36(sp)
    cd6c:	df000815 	stw	fp,32(sp)
    cd70:	df000804 	addi	fp,sp,32
    cd74:	2005883a 	mov	r2,r4
    cd78:	e17fff15 	stw	r5,-4(fp)
    cd7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cd80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    cd84:	e0bffe03 	ldbu	r2,-8(fp)
    cd88:	10800570 	cmpltui	r2,r2,21
    cd8c:	1000051e 	bne	r2,zero,cda4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    cd90:	e0bffe03 	ldbu	r2,-8(fp)
    cd94:	10803fe0 	cmpeqi	r2,r2,255
    cd98:	1000021e 	bne	r2,zero,cda4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    cd9c:	00800a84 	movi	r2,42
    cda0:	00003606 	br	ce7c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    cda4:	e0bfff17 	ldw	r2,-4(fp)
    cda8:	1000021e 	bne	r2,zero,cdb4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    cdac:	00800244 	movi	r2,9
    cdb0:	00003206 	br	ce7c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdb4:	0005303a 	rdctl	r2,status
    cdb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdbc:	e0fffa17 	ldw	r3,-24(fp)
    cdc0:	00bfff84 	movi	r2,-2
    cdc4:	1884703a 	and	r2,r3,r2
    cdc8:	1001703a 	wrctl	status,r2
  
  return context;
    cdcc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    cdd0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    cdd4:	e0bffe03 	ldbu	r2,-8(fp)
    cdd8:	10803fd8 	cmpnei	r2,r2,255
    cddc:	1000051e 	bne	r2,zero,cdf4 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    cde0:	00800074 	movhi	r2,1
    cde4:	10952d04 	addi	r2,r2,21684
    cde8:	10800017 	ldw	r2,0(r2)
    cdec:	10800c83 	ldbu	r2,50(r2)
    cdf0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    cdf4:	e0fffe03 	ldbu	r3,-8(fp)
    cdf8:	008000b4 	movhi	r2,2
    cdfc:	1089b404 	addi	r2,r2,9936
    ce00:	18c7883a 	add	r3,r3,r3
    ce04:	18c7883a 	add	r3,r3,r3
    ce08:	10c5883a 	add	r2,r2,r3
    ce0c:	10800017 	ldw	r2,0(r2)
    ce10:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    ce14:	e0bff917 	ldw	r2,-28(fp)
    ce18:	1000061e 	bne	r2,zero,ce34 <OSTaskQuery+0xd0>
    ce1c:	e0bff817 	ldw	r2,-32(fp)
    ce20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce24:	e0bffb17 	ldw	r2,-20(fp)
    ce28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    ce2c:	00800a44 	movi	r2,41
    ce30:	00001206 	br	ce7c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    ce34:	e0bff917 	ldw	r2,-28(fp)
    ce38:	10800058 	cmpnei	r2,r2,1
    ce3c:	1000061e 	bne	r2,zero,ce58 <OSTaskQuery+0xf4>
    ce40:	e0bff817 	ldw	r2,-32(fp)
    ce44:	e0bffc15 	stw	r2,-16(fp)
    ce48:	e0bffc17 	ldw	r2,-16(fp)
    ce4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ce50:	008010c4 	movi	r2,67
    ce54:	00000906 	br	ce7c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    ce58:	e13fff17 	ldw	r4,-4(fp)
    ce5c:	e17ff917 	ldw	r5,-28(fp)
    ce60:	01801b04 	movi	r6,108
    ce64:	00070880 	call	7088 <OS_MemCopy>
    ce68:	e0bff817 	ldw	r2,-32(fp)
    ce6c:	e0bffd15 	stw	r2,-12(fp)
    ce70:	e0bffd17 	ldw	r2,-12(fp)
    ce74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    ce78:	0005883a 	mov	r2,zero
}
    ce7c:	e037883a 	mov	sp,fp
    ce80:	dfc00117 	ldw	ra,4(sp)
    ce84:	df000017 	ldw	fp,0(sp)
    ce88:	dec00204 	addi	sp,sp,8
    ce8c:	f800283a 	ret

0000ce90 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    ce90:	defffc04 	addi	sp,sp,-16
    ce94:	df000315 	stw	fp,12(sp)
    ce98:	df000304 	addi	fp,sp,12
    ce9c:	e13ffd15 	stw	r4,-12(fp)
    cea0:	e17ffe15 	stw	r5,-8(fp)
    cea4:	3005883a 	mov	r2,r6
    cea8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    ceac:	e0bfff0b 	ldhu	r2,-4(fp)
    ceb0:	1080004c 	andi	r2,r2,1
    ceb4:	10000d26 	beq	r2,zero,ceec <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    ceb8:	e0bfff0b 	ldhu	r2,-4(fp)
    cebc:	1080008c 	andi	r2,r2,2
    cec0:	10000a26 	beq	r2,zero,ceec <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    cec4:	00000706 	br	cee4 <OS_TaskStkClr+0x54>
                size--;
    cec8:	e0bffe17 	ldw	r2,-8(fp)
    cecc:	10bfffc4 	addi	r2,r2,-1
    ced0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    ced4:	e0bffd17 	ldw	r2,-12(fp)
    ced8:	10c00104 	addi	r3,r2,4
    cedc:	e0fffd15 	stw	r3,-12(fp)
    cee0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    cee4:	e0bffe17 	ldw	r2,-8(fp)
    cee8:	103ff71e 	bne	r2,zero,cec8 <__alt_mem_Flash_flash_data+0xf400cec8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    ceec:	e037883a 	mov	sp,fp
    cef0:	df000017 	ldw	fp,0(sp)
    cef4:	dec00104 	addi	sp,sp,4
    cef8:	f800283a 	ret

0000cefc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    cefc:	defff904 	addi	sp,sp,-28
    cf00:	dfc00615 	stw	ra,24(sp)
    cf04:	df000515 	stw	fp,20(sp)
    cf08:	df000504 	addi	fp,sp,20
    cf0c:	2005883a 	mov	r2,r4
    cf10:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cf14:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cf18:	00800074 	movhi	r2,1
    cf1c:	10952c04 	addi	r2,r2,21680
    cf20:	10800003 	ldbu	r2,0(r2)
    cf24:	10803fcc 	andi	r2,r2,255
    cf28:	10000126 	beq	r2,zero,cf30 <OSTimeDly+0x34>
        return;
    cf2c:	00004006 	br	d030 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    cf30:	e0bfff0b 	ldhu	r2,-4(fp)
    cf34:	10003e26 	beq	r2,zero,d030 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf38:	0005303a 	rdctl	r2,status
    cf3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf40:	e0fffd17 	ldw	r3,-12(fp)
    cf44:	00bfff84 	movi	r2,-2
    cf48:	1884703a 	and	r2,r3,r2
    cf4c:	1001703a 	wrctl	status,r2
  
  return context;
    cf50:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    cf54:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    cf58:	00800074 	movhi	r2,1
    cf5c:	10952d04 	addi	r2,r2,21684
    cf60:	10800017 	ldw	r2,0(r2)
    cf64:	10800d03 	ldbu	r2,52(r2)
    cf68:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    cf6c:	e0fffc03 	ldbu	r3,-16(fp)
    cf70:	e13ffc03 	ldbu	r4,-16(fp)
    cf74:	00800074 	movhi	r2,1
    cf78:	10952a44 	addi	r2,r2,21673
    cf7c:	1105883a 	add	r2,r2,r4
    cf80:	10800003 	ldbu	r2,0(r2)
    cf84:	1009883a 	mov	r4,r2
    cf88:	00800074 	movhi	r2,1
    cf8c:	10952d04 	addi	r2,r2,21684
    cf90:	10800017 	ldw	r2,0(r2)
    cf94:	10800d43 	ldbu	r2,53(r2)
    cf98:	0084303a 	nor	r2,zero,r2
    cf9c:	2084703a 	and	r2,r4,r2
    cfa0:	1009883a 	mov	r4,r2
    cfa4:	00800074 	movhi	r2,1
    cfa8:	10952a44 	addi	r2,r2,21673
    cfac:	10c5883a 	add	r2,r2,r3
    cfb0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    cfb4:	e0fffc03 	ldbu	r3,-16(fp)
    cfb8:	00800074 	movhi	r2,1
    cfbc:	10952a44 	addi	r2,r2,21673
    cfc0:	10c5883a 	add	r2,r2,r3
    cfc4:	10800003 	ldbu	r2,0(r2)
    cfc8:	10803fcc 	andi	r2,r2,255
    cfcc:	10000e1e 	bne	r2,zero,d008 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    cfd0:	00800074 	movhi	r2,1
    cfd4:	10952d04 	addi	r2,r2,21684
    cfd8:	10800017 	ldw	r2,0(r2)
    cfdc:	10800d83 	ldbu	r2,54(r2)
    cfe0:	0084303a 	nor	r2,zero,r2
    cfe4:	1007883a 	mov	r3,r2
    cfe8:	00800074 	movhi	r2,1
    cfec:	10952a04 	addi	r2,r2,21672
    cff0:	10800003 	ldbu	r2,0(r2)
    cff4:	1884703a 	and	r2,r3,r2
    cff8:	1007883a 	mov	r3,r2
    cffc:	00800074 	movhi	r2,1
    d000:	10952a04 	addi	r2,r2,21672
    d004:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    d008:	00800074 	movhi	r2,1
    d00c:	10952d04 	addi	r2,r2,21684
    d010:	10800017 	ldw	r2,0(r2)
    d014:	e0ffff0b 	ldhu	r3,-4(fp)
    d018:	10c00b8d 	sth	r3,46(r2)
    d01c:	e0bffb17 	ldw	r2,-20(fp)
    d020:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d024:	e0bffe17 	ldw	r2,-8(fp)
    d028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    d02c:	00070ec0 	call	70ec <OS_Sched>
    }
}
    d030:	e037883a 	mov	sp,fp
    d034:	dfc00117 	ldw	ra,4(sp)
    d038:	df000017 	ldw	fp,0(sp)
    d03c:	dec00204 	addi	sp,sp,8
    d040:	f800283a 	ret

0000d044 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    d044:	defff804 	addi	sp,sp,-32
    d048:	dfc00715 	stw	ra,28(sp)
    d04c:	df000615 	stw	fp,24(sp)
    d050:	df000604 	addi	fp,sp,24
    d054:	2015883a 	mov	r10,r4
    d058:	2809883a 	mov	r4,r5
    d05c:	3007883a 	mov	r3,r6
    d060:	3805883a 	mov	r2,r7
    d064:	e2bffc05 	stb	r10,-16(fp)
    d068:	e13ffd05 	stb	r4,-12(fp)
    d06c:	e0fffe05 	stb	r3,-8(fp)
    d070:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    d074:	00800074 	movhi	r2,1
    d078:	10952c04 	addi	r2,r2,21680
    d07c:	10800003 	ldbu	r2,0(r2)
    d080:	10803fcc 	andi	r2,r2,255
    d084:	10000226 	beq	r2,zero,d090 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    d088:	00801544 	movi	r2,85
    d08c:	00004206 	br	d198 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    d090:	e0bffc03 	ldbu	r2,-16(fp)
    d094:	1000081e 	bne	r2,zero,d0b8 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    d098:	e0bffd03 	ldbu	r2,-12(fp)
    d09c:	1000061e 	bne	r2,zero,d0b8 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    d0a0:	e0bffe03 	ldbu	r2,-8(fp)
    d0a4:	1000041e 	bne	r2,zero,d0b8 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    d0a8:	e0bfff0b 	ldhu	r2,-4(fp)
    d0ac:	1000021e 	bne	r2,zero,d0b8 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    d0b0:	00801504 	movi	r2,84
    d0b4:	00003806 	br	d198 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    d0b8:	e0bffd03 	ldbu	r2,-12(fp)
    d0bc:	10800f30 	cmpltui	r2,r2,60
    d0c0:	1000021e 	bne	r2,zero,d0cc <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    d0c4:	00801444 	movi	r2,81
    d0c8:	00003306 	br	d198 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    d0cc:	e0bffe03 	ldbu	r2,-8(fp)
    d0d0:	10800f30 	cmpltui	r2,r2,60
    d0d4:	1000021e 	bne	r2,zero,d0e0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    d0d8:	00801484 	movi	r2,82
    d0dc:	00002e06 	br	d198 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    d0e0:	e0bfff0b 	ldhu	r2,-4(fp)
    d0e4:	1080fa30 	cmpltui	r2,r2,1000
    d0e8:	1000021e 	bne	r2,zero,d0f4 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    d0ec:	008014c4 	movi	r2,83
    d0f0:	00002906 	br	d198 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    d0f4:	e0bffc03 	ldbu	r2,-16(fp)
    d0f8:	10c38424 	muli	r3,r2,3600
    d0fc:	e0bffd03 	ldbu	r2,-12(fp)
    d100:	10800f24 	muli	r2,r2,60
    d104:	1887883a 	add	r3,r3,r2
    d108:	e0bffe03 	ldbu	r2,-8(fp)
    d10c:	1885883a 	add	r2,r3,r2
    d110:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    d114:	e0bfff0b 	ldhu	r2,-4(fp)
    d118:	10800f84 	addi	r2,r2,62
    d11c:	100690fa 	slli	r3,r2,3
    d120:	008418b4 	movhi	r2,4194
    d124:	109374c4 	addi	r2,r2,19923
    d128:	188a383a 	mulxuu	r5,r3,r2
    d12c:	1885383a 	mul	r2,r3,r2
    d130:	1011883a 	mov	r8,r2
    d134:	2813883a 	mov	r9,r5
    d138:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    d13c:	2085883a 	add	r2,r4,r2
    d140:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    d144:	e0bffb17 	ldw	r2,-20(fp)
    d148:	1004d43a 	srli	r2,r2,16
    d14c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    d150:	e0bffb17 	ldw	r2,-20(fp)
    d154:	10bfffcc 	andi	r2,r2,65535
    d158:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    d15c:	e0bffb17 	ldw	r2,-20(fp)
    d160:	10bfffcc 	andi	r2,r2,65535
    d164:	1009883a 	mov	r4,r2
    d168:	000cefc0 	call	cefc <OSTimeDly>
    while (loops > 0) {
    d16c:	00000706 	br	d18c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    d170:	01200014 	movui	r4,32768
    d174:	000cefc0 	call	cefc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    d178:	01200014 	movui	r4,32768
    d17c:	000cefc0 	call	cefc <OSTimeDly>
        loops--;
    d180:	e0bffa0b 	ldhu	r2,-24(fp)
    d184:	10bfffc4 	addi	r2,r2,-1
    d188:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    d18c:	e0bffa0b 	ldhu	r2,-24(fp)
    d190:	103ff71e 	bne	r2,zero,d170 <__alt_mem_Flash_flash_data+0xf400d170>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    d194:	0005883a 	mov	r2,zero
}
    d198:	e037883a 	mov	sp,fp
    d19c:	dfc00117 	ldw	ra,4(sp)
    d1a0:	df000017 	ldw	fp,0(sp)
    d1a4:	dec00204 	addi	sp,sp,8
    d1a8:	f800283a 	ret

0000d1ac <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    d1ac:	defff504 	addi	sp,sp,-44
    d1b0:	dfc00a15 	stw	ra,40(sp)
    d1b4:	df000915 	stw	fp,36(sp)
    d1b8:	df000904 	addi	fp,sp,36
    d1bc:	2005883a 	mov	r2,r4
    d1c0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    d1c4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    d1c8:	e0bfff03 	ldbu	r2,-4(fp)
    d1cc:	10800530 	cmpltui	r2,r2,20
    d1d0:	1000021e 	bne	r2,zero,d1dc <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    d1d4:	00800a84 	movi	r2,42
    d1d8:	00006b06 	br	d388 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d1dc:	0005303a 	rdctl	r2,status
    d1e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d1e4:	e0fff917 	ldw	r3,-28(fp)
    d1e8:	00bfff84 	movi	r2,-2
    d1ec:	1884703a 	and	r2,r3,r2
    d1f0:	1001703a 	wrctl	status,r2
  
  return context;
    d1f4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    d1f8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    d1fc:	e0ffff03 	ldbu	r3,-4(fp)
    d200:	008000b4 	movhi	r2,2
    d204:	1089b404 	addi	r2,r2,9936
    d208:	18c7883a 	add	r3,r3,r3
    d20c:	18c7883a 	add	r3,r3,r3
    d210:	10c5883a 	add	r2,r2,r3
    d214:	10800017 	ldw	r2,0(r2)
    d218:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    d21c:	e0bff817 	ldw	r2,-32(fp)
    d220:	1000061e 	bne	r2,zero,d23c <OSTimeDlyResume+0x90>
    d224:	e0bff717 	ldw	r2,-36(fp)
    d228:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d22c:	e0bffa17 	ldw	r2,-24(fp)
    d230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    d234:	008010c4 	movi	r2,67
    d238:	00005306 	br	d388 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    d23c:	e0bff817 	ldw	r2,-32(fp)
    d240:	10800058 	cmpnei	r2,r2,1
    d244:	1000061e 	bne	r2,zero,d260 <OSTimeDlyResume+0xb4>
    d248:	e0bff717 	ldw	r2,-36(fp)
    d24c:	e0bffb15 	stw	r2,-20(fp)
    d250:	e0bffb17 	ldw	r2,-20(fp)
    d254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    d258:	008010c4 	movi	r2,67
    d25c:	00004a06 	br	d388 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    d260:	e0bff817 	ldw	r2,-32(fp)
    d264:	10800b8b 	ldhu	r2,46(r2)
    d268:	10bfffcc 	andi	r2,r2,65535
    d26c:	1000061e 	bne	r2,zero,d288 <OSTimeDlyResume+0xdc>
    d270:	e0bff717 	ldw	r2,-36(fp)
    d274:	e0bffc15 	stw	r2,-16(fp)
    d278:	e0bffc17 	ldw	r2,-16(fp)
    d27c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    d280:	00801404 	movi	r2,80
    d284:	00004006 	br	d388 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    d288:	e0bff817 	ldw	r2,-32(fp)
    d28c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    d290:	e0bff817 	ldw	r2,-32(fp)
    d294:	10800c03 	ldbu	r2,48(r2)
    d298:	10803fcc 	andi	r2,r2,255
    d29c:	10800dcc 	andi	r2,r2,55
    d2a0:	10000b26 	beq	r2,zero,d2d0 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    d2a4:	e0bff817 	ldw	r2,-32(fp)
    d2a8:	10c00c03 	ldbu	r3,48(r2)
    d2ac:	00bff204 	movi	r2,-56
    d2b0:	1884703a 	and	r2,r3,r2
    d2b4:	1007883a 	mov	r3,r2
    d2b8:	e0bff817 	ldw	r2,-32(fp)
    d2bc:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    d2c0:	e0bff817 	ldw	r2,-32(fp)
    d2c4:	00c00044 	movi	r3,1
    d2c8:	10c00c45 	stb	r3,49(r2)
    d2cc:	00000206 	br	d2d8 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    d2d0:	e0bff817 	ldw	r2,-32(fp)
    d2d4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    d2d8:	e0bff817 	ldw	r2,-32(fp)
    d2dc:	10800c03 	ldbu	r2,48(r2)
    d2e0:	10803fcc 	andi	r2,r2,255
    d2e4:	1080020c 	andi	r2,r2,8
    d2e8:	1000221e 	bne	r2,zero,d374 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    d2ec:	e0bff817 	ldw	r2,-32(fp)
    d2f0:	10c00d83 	ldbu	r3,54(r2)
    d2f4:	00800074 	movhi	r2,1
    d2f8:	10952a04 	addi	r2,r2,21672
    d2fc:	10800003 	ldbu	r2,0(r2)
    d300:	1884b03a 	or	r2,r3,r2
    d304:	1007883a 	mov	r3,r2
    d308:	00800074 	movhi	r2,1
    d30c:	10952a04 	addi	r2,r2,21672
    d310:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    d314:	e0bff817 	ldw	r2,-32(fp)
    d318:	10800d03 	ldbu	r2,52(r2)
    d31c:	10c03fcc 	andi	r3,r2,255
    d320:	e0bff817 	ldw	r2,-32(fp)
    d324:	10800d03 	ldbu	r2,52(r2)
    d328:	11003fcc 	andi	r4,r2,255
    d32c:	00800074 	movhi	r2,1
    d330:	10952a44 	addi	r2,r2,21673
    d334:	1105883a 	add	r2,r2,r4
    d338:	11000003 	ldbu	r4,0(r2)
    d33c:	e0bff817 	ldw	r2,-32(fp)
    d340:	10800d43 	ldbu	r2,53(r2)
    d344:	2084b03a 	or	r2,r4,r2
    d348:	1009883a 	mov	r4,r2
    d34c:	00800074 	movhi	r2,1
    d350:	10952a44 	addi	r2,r2,21673
    d354:	10c5883a 	add	r2,r2,r3
    d358:	11000005 	stb	r4,0(r2)
    d35c:	e0bff717 	ldw	r2,-36(fp)
    d360:	e0bffd15 	stw	r2,-12(fp)
    d364:	e0bffd17 	ldw	r2,-12(fp)
    d368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    d36c:	00070ec0 	call	70ec <OS_Sched>
    d370:	00000406 	br	d384 <OSTimeDlyResume+0x1d8>
    d374:	e0bff717 	ldw	r2,-36(fp)
    d378:	e0bffe15 	stw	r2,-8(fp)
    d37c:	e0bffe17 	ldw	r2,-8(fp)
    d380:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    d384:	0005883a 	mov	r2,zero
}
    d388:	e037883a 	mov	sp,fp
    d38c:	dfc00117 	ldw	ra,4(sp)
    d390:	df000017 	ldw	fp,0(sp)
    d394:	dec00204 	addi	sp,sp,8
    d398:	f800283a 	ret

0000d39c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    d39c:	defffb04 	addi	sp,sp,-20
    d3a0:	df000415 	stw	fp,16(sp)
    d3a4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d3a8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3ac:	0005303a 	rdctl	r2,status
    d3b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3b4:	e0fffe17 	ldw	r3,-8(fp)
    d3b8:	00bfff84 	movi	r2,-2
    d3bc:	1884703a 	and	r2,r3,r2
    d3c0:	1001703a 	wrctl	status,r2
  
  return context;
    d3c4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    d3c8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    d3cc:	00800074 	movhi	r2,1
    d3d0:	10952e04 	addi	r2,r2,21688
    d3d4:	10800017 	ldw	r2,0(r2)
    d3d8:	e0bffd15 	stw	r2,-12(fp)
    d3dc:	e0bffc17 	ldw	r2,-16(fp)
    d3e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3e4:	e0bfff17 	ldw	r2,-4(fp)
    d3e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    d3ec:	e0bffd17 	ldw	r2,-12(fp)
}
    d3f0:	e037883a 	mov	sp,fp
    d3f4:	df000017 	ldw	fp,0(sp)
    d3f8:	dec00104 	addi	sp,sp,4
    d3fc:	f800283a 	ret

0000d400 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    d400:	defffb04 	addi	sp,sp,-20
    d404:	df000415 	stw	fp,16(sp)
    d408:	df000404 	addi	fp,sp,16
    d40c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d410:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d414:	0005303a 	rdctl	r2,status
    d418:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d41c:	e0fffd17 	ldw	r3,-12(fp)
    d420:	00bfff84 	movi	r2,-2
    d424:	1884703a 	and	r2,r3,r2
    d428:	1001703a 	wrctl	status,r2
  
  return context;
    d42c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    d430:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    d434:	00800074 	movhi	r2,1
    d438:	10952e04 	addi	r2,r2,21688
    d43c:	e0ffff17 	ldw	r3,-4(fp)
    d440:	10c00015 	stw	r3,0(r2)
    d444:	e0bffc17 	ldw	r2,-16(fp)
    d448:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d44c:	e0bffe17 	ldw	r2,-8(fp)
    d450:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    d454:	e037883a 	mov	sp,fp
    d458:	df000017 	ldw	fp,0(sp)
    d45c:	dec00104 	addi	sp,sp,4
    d460:	f800283a 	ret

0000d464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d464:	defffd04 	addi	sp,sp,-12
    d468:	dfc00215 	stw	ra,8(sp)
    d46c:	df000115 	stw	fp,4(sp)
    d470:	df000104 	addi	fp,sp,4
    d474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d478:	e13fff17 	ldw	r4,-4(fp)
    d47c:	01400074 	movhi	r5,1
    d480:	294d2204 	addi	r5,r5,13448
    d484:	000fe380 	call	fe38 <alt_dev_llist_insert>
}
    d488:	e037883a 	mov	sp,fp
    d48c:	dfc00117 	ldw	ra,4(sp)
    d490:	df000017 	ldw	fp,0(sp)
    d494:	dec00204 	addi	sp,sp,8
    d498:	f800283a 	ret

0000d49c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d49c:	defffd04 	addi	sp,sp,-12
    d4a0:	dfc00215 	stw	ra,8(sp)
    d4a4:	df000115 	stw	fp,4(sp)
    d4a8:	df000104 	addi	fp,sp,4
    d4ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    d4b0:	001074c0 	call	1074c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d4b4:	00800044 	movi	r2,1
    d4b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	dfc00117 	ldw	ra,4(sp)
    d4c4:	df000017 	ldw	fp,0(sp)
    d4c8:	dec00204 	addi	sp,sp,8
    d4cc:	f800283a 	ret

0000d4d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d4d0:	defffd04 	addi	sp,sp,-12
    d4d4:	dfc00215 	stw	ra,8(sp)
    d4d8:	df000115 	stw	fp,4(sp)
    d4dc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d4e0:	01040034 	movhi	r4,4096
    d4e4:	21080004 	addi	r4,r4,8192
    d4e8:	000b883a 	mov	r5,zero
    d4ec:	000d883a 	mov	r6,zero
    d4f0:	01c00204 	movi	r7,8
    d4f4:	000e6440 	call	e644 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d4f8:	01000074 	movhi	r4,1
    d4fc:	21081a04 	addi	r4,r4,8296
    d500:	000b883a 	mov	r5,zero
    d504:	01800204 	movi	r6,8
    d508:	000da0c0 	call	da0c <altera_avalon_jtag_uart_init>
    d50c:	01000074 	movhi	r4,1
    d510:	21081004 	addi	r4,r4,8256
    d514:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    d518:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    d51c:	01000074 	movhi	r4,1
    d520:	210c2b04 	addi	r4,r4,12460
    d524:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    d528:	01000074 	movhi	r4,1
    d52c:	210c3704 	addi	r4,r4,12508
    d530:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d534:	01000074 	movhi	r4,1
    d538:	210c4304 	addi	r4,r4,12556
    d53c:	000e7740 	call	e774 <alt_up_character_lcd_init>
    d540:	01000074 	movhi	r4,1
    d544:	210c4304 	addi	r4,r4,12556
    d548:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    d54c:	01000074 	movhi	r4,1
    d550:	210c4e04 	addi	r4,r4,12600
    d554:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    d558:	01000074 	movhi	r4,1
    d55c:	210c5904 	addi	r4,r4,12644
    d560:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    d564:	01000074 	movhi	r4,1
    d568:	210c6404 	addi	r4,r4,12688
    d56c:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    d570:	01000074 	movhi	r4,1
    d574:	210c6f04 	addi	r4,r4,12732
    d578:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    d57c:	01000074 	movhi	r4,1
    d580:	210c7a04 	addi	r4,r4,12776
    d584:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    d588:	01000074 	movhi	r4,1
    d58c:	210c8504 	addi	r4,r4,12820
    d590:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    d594:	01000074 	movhi	r4,1
    d598:	210c9004 	addi	r4,r4,12864
    d59c:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    d5a0:	01000074 	movhi	r4,1
    d5a4:	210c9b04 	addi	r4,r4,12908
    d5a8:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    d5ac:	01000074 	movhi	r4,1
    d5b0:	210ca604 	addi	r4,r4,12952
    d5b4:	000f08c0 	call	f08c <alt_up_ps2_init>
    d5b8:	01000074 	movhi	r4,1
    d5bc:	210ca604 	addi	r4,r4,12952
    d5c0:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    d5c4:	01000074 	movhi	r4,1
    d5c8:	210cb404 	addi	r4,r4,13008
    d5cc:	000f08c0 	call	f08c <alt_up_ps2_init>
    d5d0:	01000074 	movhi	r4,1
    d5d4:	210cb404 	addi	r4,r4,13008
    d5d8:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    d5dc:	01000074 	movhi	r4,1
    d5e0:	210cc204 	addi	r4,r4,13064
    d5e4:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    d5e8:	01000074 	movhi	r4,1
    d5ec:	210ccd04 	addi	r4,r4,13108
    d5f0:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    d5f4:	00800074 	movhi	r2,1
    d5f8:	108cda04 	addi	r2,r2,13160
    d5fc:	10800a17 	ldw	r2,40(r2)
    d600:	10800104 	addi	r2,r2,4
    d604:	10800017 	ldw	r2,0(r2)
    d608:	10ffffcc 	andi	r3,r2,65535
    d60c:	00800074 	movhi	r2,1
    d610:	108cda04 	addi	r2,r2,13160
    d614:	10c00c15 	stw	r3,48(r2)
    d618:	00800074 	movhi	r2,1
    d61c:	108cda04 	addi	r2,r2,13160
    d620:	10800a17 	ldw	r2,40(r2)
    d624:	10800104 	addi	r2,r2,4
    d628:	10800017 	ldw	r2,0(r2)
    d62c:	1006d43a 	srli	r3,r2,16
    d630:	00800074 	movhi	r2,1
    d634:	108cda04 	addi	r2,r2,13160
    d638:	10c00d15 	stw	r3,52(r2)
    d63c:	00800074 	movhi	r2,1
    d640:	108cda04 	addi	r2,r2,13160
    d644:	10800c17 	ldw	r2,48(r2)
    d648:	10801068 	cmpgeui	r2,r2,65
    d64c:	1000081e 	bne	r2,zero,d670 <alt_sys_init+0x1a0>
    d650:	00800074 	movhi	r2,1
    d654:	108cda04 	addi	r2,r2,13160
    d658:	00c00fc4 	movi	r3,63
    d65c:	10c00f15 	stw	r3,60(r2)
    d660:	00800074 	movhi	r2,1
    d664:	108cda04 	addi	r2,r2,13160
    d668:	00c00184 	movi	r3,6
    d66c:	10c01015 	stw	r3,64(r2)
    d670:	00800074 	movhi	r2,1
    d674:	108cda04 	addi	r2,r2,13160
    d678:	10800d17 	ldw	r2,52(r2)
    d67c:	10800868 	cmpgeui	r2,r2,33
    d680:	1000041e 	bne	r2,zero,d694 <alt_sys_init+0x1c4>
    d684:	00800074 	movhi	r2,1
    d688:	108cda04 	addi	r2,r2,13160
    d68c:	00c007c4 	movi	r3,31
    d690:	10c01115 	stw	r3,68(r2)
    d694:	01000074 	movhi	r4,1
    d698:	210cda04 	addi	r4,r4,13160
    d69c:	000f9a40 	call	f9a4 <alt_up_char_buffer_init>
    d6a0:	01000074 	movhi	r4,1
    d6a4:	210cda04 	addi	r4,r4,13160
    d6a8:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    d6ac:	00800074 	movhi	r2,1
    d6b0:	108cec04 	addi	r2,r2,13232
    d6b4:	10800a17 	ldw	r2,40(r2)
    d6b8:	10800017 	ldw	r2,0(r2)
    d6bc:	1007883a 	mov	r3,r2
    d6c0:	00800074 	movhi	r2,1
    d6c4:	108cec04 	addi	r2,r2,13232
    d6c8:	10c00b15 	stw	r3,44(r2)
    d6cc:	00800074 	movhi	r2,1
    d6d0:	108cec04 	addi	r2,r2,13232
    d6d4:	10800a17 	ldw	r2,40(r2)
    d6d8:	10800104 	addi	r2,r2,4
    d6dc:	10800017 	ldw	r2,0(r2)
    d6e0:	1007883a 	mov	r3,r2
    d6e4:	00800074 	movhi	r2,1
    d6e8:	108cec04 	addi	r2,r2,13232
    d6ec:	10c00c15 	stw	r3,48(r2)
    d6f0:	00800074 	movhi	r2,1
    d6f4:	108cec04 	addi	r2,r2,13232
    d6f8:	10800a17 	ldw	r2,40(r2)
    d6fc:	10800204 	addi	r2,r2,8
    d700:	10800017 	ldw	r2,0(r2)
    d704:	10ffffcc 	andi	r3,r2,65535
    d708:	00800074 	movhi	r2,1
    d70c:	108cec04 	addi	r2,r2,13232
    d710:	10c00f15 	stw	r3,60(r2)
    d714:	00800074 	movhi	r2,1
    d718:	108cec04 	addi	r2,r2,13232
    d71c:	10800a17 	ldw	r2,40(r2)
    d720:	10800204 	addi	r2,r2,8
    d724:	10800017 	ldw	r2,0(r2)
    d728:	1006d43a 	srli	r3,r2,16
    d72c:	00800074 	movhi	r2,1
    d730:	108cec04 	addi	r2,r2,13232
    d734:	10c01015 	stw	r3,64(r2)
    d738:	00800074 	movhi	r2,1
    d73c:	108cec04 	addi	r2,r2,13232
    d740:	10800a17 	ldw	r2,40(r2)
    d744:	10800304 	addi	r2,r2,12
    d748:	10800017 	ldw	r2,0(r2)
    d74c:	1005d07a 	srai	r2,r2,1
    d750:	10c0004c 	andi	r3,r2,1
    d754:	00800074 	movhi	r2,1
    d758:	108cec04 	addi	r2,r2,13232
    d75c:	10c00d15 	stw	r3,52(r2)
    d760:	00800074 	movhi	r2,1
    d764:	108cec04 	addi	r2,r2,13232
    d768:	10800a17 	ldw	r2,40(r2)
    d76c:	10800304 	addi	r2,r2,12
    d770:	10800017 	ldw	r2,0(r2)
    d774:	1005d13a 	srai	r2,r2,4
    d778:	10c003cc 	andi	r3,r2,15
    d77c:	00800074 	movhi	r2,1
    d780:	108cec04 	addi	r2,r2,13232
    d784:	10c00e15 	stw	r3,56(r2)
    d788:	00800074 	movhi	r2,1
    d78c:	108cec04 	addi	r2,r2,13232
    d790:	10800a17 	ldw	r2,40(r2)
    d794:	10800304 	addi	r2,r2,12
    d798:	10800017 	ldw	r2,0(r2)
    d79c:	1005d43a 	srai	r2,r2,16
    d7a0:	e0bfff05 	stb	r2,-4(fp)
    d7a4:	00800074 	movhi	r2,1
    d7a8:	108cec04 	addi	r2,r2,13232
    d7ac:	10800a17 	ldw	r2,40(r2)
    d7b0:	10800304 	addi	r2,r2,12
    d7b4:	10800017 	ldw	r2,0(r2)
    d7b8:	1004d63a 	srli	r2,r2,24
    d7bc:	e0bfff45 	stb	r2,-3(fp)
    d7c0:	00800074 	movhi	r2,1
    d7c4:	108cec04 	addi	r2,r2,13232
    d7c8:	10800e17 	ldw	r2,56(r2)
    d7cc:	10800058 	cmpnei	r2,r2,1
    d7d0:	1000041e 	bne	r2,zero,d7e4 <alt_sys_init+0x314>
    d7d4:	00800074 	movhi	r2,1
    d7d8:	108cec04 	addi	r2,r2,13232
    d7dc:	10001115 	stw	zero,68(r2)
    d7e0:	00000e06 	br	d81c <alt_sys_init+0x34c>
    d7e4:	00800074 	movhi	r2,1
    d7e8:	108cec04 	addi	r2,r2,13232
    d7ec:	10800e17 	ldw	r2,56(r2)
    d7f0:	10800098 	cmpnei	r2,r2,2
    d7f4:	1000051e 	bne	r2,zero,d80c <alt_sys_init+0x33c>
    d7f8:	00800074 	movhi	r2,1
    d7fc:	108cec04 	addi	r2,r2,13232
    d800:	00c00044 	movi	r3,1
    d804:	10c01115 	stw	r3,68(r2)
    d808:	00000406 	br	d81c <alt_sys_init+0x34c>
    d80c:	00800074 	movhi	r2,1
    d810:	108cec04 	addi	r2,r2,13232
    d814:	00c00084 	movi	r3,2
    d818:	10c01115 	stw	r3,68(r2)
    d81c:	e0bfff03 	ldbu	r2,-4(fp)
    d820:	00c00804 	movi	r3,32
    d824:	1885c83a 	sub	r2,r3,r2
    d828:	00ffffc4 	movi	r3,-1
    d82c:	1886d83a 	srl	r3,r3,r2
    d830:	00800074 	movhi	r2,1
    d834:	108cec04 	addi	r2,r2,13232
    d838:	10c01215 	stw	r3,72(r2)
    d83c:	e0ffff03 	ldbu	r3,-4(fp)
    d840:	00800074 	movhi	r2,1
    d844:	108cec04 	addi	r2,r2,13232
    d848:	10801117 	ldw	r2,68(r2)
    d84c:	1887883a 	add	r3,r3,r2
    d850:	00800074 	movhi	r2,1
    d854:	108cec04 	addi	r2,r2,13232
    d858:	10c01315 	stw	r3,76(r2)
    d85c:	e0bfff43 	ldbu	r2,-3(fp)
    d860:	00c00804 	movi	r3,32
    d864:	1885c83a 	sub	r2,r3,r2
    d868:	00ffffc4 	movi	r3,-1
    d86c:	1886d83a 	srl	r3,r3,r2
    d870:	00800074 	movhi	r2,1
    d874:	108cec04 	addi	r2,r2,13232
    d878:	10c01415 	stw	r3,80(r2)
    d87c:	01000074 	movhi	r4,1
    d880:	210cec04 	addi	r4,r4,13232
    d884:	000d4640 	call	d464 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    d888:	01000074 	movhi	r4,1
    d88c:	210d0104 	addi	r4,r4,13316
    d890:	000d4640 	call	d464 <alt_dev_reg>
}
    d894:	e037883a 	mov	sp,fp
    d898:	dfc00117 	ldw	ra,4(sp)
    d89c:	df000017 	ldw	fp,0(sp)
    d8a0:	dec00204 	addi	sp,sp,8
    d8a4:	f800283a 	ret

0000d8a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d8a8:	defffa04 	addi	sp,sp,-24
    d8ac:	dfc00515 	stw	ra,20(sp)
    d8b0:	df000415 	stw	fp,16(sp)
    d8b4:	df000404 	addi	fp,sp,16
    d8b8:	e13ffd15 	stw	r4,-12(fp)
    d8bc:	e17ffe15 	stw	r5,-8(fp)
    d8c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d8c4:	e0bffd17 	ldw	r2,-12(fp)
    d8c8:	10800017 	ldw	r2,0(r2)
    d8cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d8d0:	e0bffc17 	ldw	r2,-16(fp)
    d8d4:	10c00a04 	addi	r3,r2,40
    d8d8:	e0bffd17 	ldw	r2,-12(fp)
    d8dc:	10800217 	ldw	r2,8(r2)
    d8e0:	1809883a 	mov	r4,r3
    d8e4:	e17ffe17 	ldw	r5,-8(fp)
    d8e8:	e1bfff17 	ldw	r6,-4(fp)
    d8ec:	100f883a 	mov	r7,r2
    d8f0:	000e0580 	call	e058 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d8f4:	e037883a 	mov	sp,fp
    d8f8:	dfc00117 	ldw	ra,4(sp)
    d8fc:	df000017 	ldw	fp,0(sp)
    d900:	dec00204 	addi	sp,sp,8
    d904:	f800283a 	ret

0000d908 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d908:	defffa04 	addi	sp,sp,-24
    d90c:	dfc00515 	stw	ra,20(sp)
    d910:	df000415 	stw	fp,16(sp)
    d914:	df000404 	addi	fp,sp,16
    d918:	e13ffd15 	stw	r4,-12(fp)
    d91c:	e17ffe15 	stw	r5,-8(fp)
    d920:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d924:	e0bffd17 	ldw	r2,-12(fp)
    d928:	10800017 	ldw	r2,0(r2)
    d92c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d930:	e0bffc17 	ldw	r2,-16(fp)
    d934:	10c00a04 	addi	r3,r2,40
    d938:	e0bffd17 	ldw	r2,-12(fp)
    d93c:	10800217 	ldw	r2,8(r2)
    d940:	1809883a 	mov	r4,r3
    d944:	e17ffe17 	ldw	r5,-8(fp)
    d948:	e1bfff17 	ldw	r6,-4(fp)
    d94c:	100f883a 	mov	r7,r2
    d950:	000e30c0 	call	e30c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d954:	e037883a 	mov	sp,fp
    d958:	dfc00117 	ldw	ra,4(sp)
    d95c:	df000017 	ldw	fp,0(sp)
    d960:	dec00204 	addi	sp,sp,8
    d964:	f800283a 	ret

0000d968 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d968:	defffc04 	addi	sp,sp,-16
    d96c:	dfc00315 	stw	ra,12(sp)
    d970:	df000215 	stw	fp,8(sp)
    d974:	df000204 	addi	fp,sp,8
    d978:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d97c:	e0bfff17 	ldw	r2,-4(fp)
    d980:	10800017 	ldw	r2,0(r2)
    d984:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d988:	e0bffe17 	ldw	r2,-8(fp)
    d98c:	10c00a04 	addi	r3,r2,40
    d990:	e0bfff17 	ldw	r2,-4(fp)
    d994:	10800217 	ldw	r2,8(r2)
    d998:	1809883a 	mov	r4,r3
    d99c:	100b883a 	mov	r5,r2
    d9a0:	000df040 	call	df04 <altera_avalon_jtag_uart_close>
}
    d9a4:	e037883a 	mov	sp,fp
    d9a8:	dfc00117 	ldw	ra,4(sp)
    d9ac:	df000017 	ldw	fp,0(sp)
    d9b0:	dec00204 	addi	sp,sp,8
    d9b4:	f800283a 	ret

0000d9b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d9b8:	defffa04 	addi	sp,sp,-24
    d9bc:	dfc00515 	stw	ra,20(sp)
    d9c0:	df000415 	stw	fp,16(sp)
    d9c4:	df000404 	addi	fp,sp,16
    d9c8:	e13ffd15 	stw	r4,-12(fp)
    d9cc:	e17ffe15 	stw	r5,-8(fp)
    d9d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d9d4:	e0bffd17 	ldw	r2,-12(fp)
    d9d8:	10800017 	ldw	r2,0(r2)
    d9dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d9e0:	e0bffc17 	ldw	r2,-16(fp)
    d9e4:	10800a04 	addi	r2,r2,40
    d9e8:	1009883a 	mov	r4,r2
    d9ec:	e17ffe17 	ldw	r5,-8(fp)
    d9f0:	e1bfff17 	ldw	r6,-4(fp)
    d9f4:	000df6c0 	call	df6c <altera_avalon_jtag_uart_ioctl>
}
    d9f8:	e037883a 	mov	sp,fp
    d9fc:	dfc00117 	ldw	ra,4(sp)
    da00:	df000017 	ldw	fp,0(sp)
    da04:	dec00204 	addi	sp,sp,8
    da08:	f800283a 	ret

0000da0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    da0c:	defff104 	addi	sp,sp,-60
    da10:	dfc00e15 	stw	ra,56(sp)
    da14:	df000d15 	stw	fp,52(sp)
    da18:	df000d04 	addi	fp,sp,52
    da1c:	e13ff915 	stw	r4,-28(fp)
    da20:	e17ffa15 	stw	r5,-24(fp)
    da24:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    da28:	e0bff917 	ldw	r2,-28(fp)
    da2c:	10800c04 	addi	r2,r2,48
    da30:	e0bff315 	stw	r2,-52(fp)
    da34:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    da38:	e0fff40b 	ldhu	r3,-48(fp)
    da3c:	e0bff884 	addi	r2,fp,-30
    da40:	1809883a 	mov	r4,r3
    da44:	100b883a 	mov	r5,r2
    da48:	0007c580 	call	7c58 <OSFlagCreate>
    da4c:	1007883a 	mov	r3,r2
    da50:	e0bff317 	ldw	r2,-52(fp)
    da54:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    da58:	e0bff917 	ldw	r2,-28(fp)
    da5c:	10800a04 	addi	r2,r2,40
    da60:	e0bff515 	stw	r2,-44(fp)
    da64:	00800044 	movi	r2,1
    da68:	e0bff60d 	sth	r2,-40(fp)
    da6c:	e0bff60b 	ldhu	r2,-40(fp)
    da70:	1009883a 	mov	r4,r2
    da74:	000abb00 	call	abb0 <OSSemCreate>
    da78:	1007883a 	mov	r3,r2
    da7c:	e0bff517 	ldw	r2,-44(fp)
    da80:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    da84:	e0bff917 	ldw	r2,-28(fp)
    da88:	10800b04 	addi	r2,r2,44
    da8c:	e0bff715 	stw	r2,-36(fp)
    da90:	00800044 	movi	r2,1
    da94:	e0bff80d 	sth	r2,-32(fp)
    da98:	e0bff80b 	ldhu	r2,-32(fp)
    da9c:	1009883a 	mov	r4,r2
    daa0:	000abb00 	call	abb0 <OSSemCreate>
    daa4:	1007883a 	mov	r3,r2
    daa8:	e0bff717 	ldw	r2,-36(fp)
    daac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dab0:	e0bff917 	ldw	r2,-28(fp)
    dab4:	00c00044 	movi	r3,1
    dab8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    dabc:	e0bff917 	ldw	r2,-28(fp)
    dac0:	10800017 	ldw	r2,0(r2)
    dac4:	10800104 	addi	r2,r2,4
    dac8:	1007883a 	mov	r3,r2
    dacc:	e0bff917 	ldw	r2,-28(fp)
    dad0:	10800817 	ldw	r2,32(r2)
    dad4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    dad8:	e0bffb17 	ldw	r2,-20(fp)
    dadc:	1009883a 	mov	r4,r2
    dae0:	e17ff917 	ldw	r5,-28(fp)
    dae4:	01800074 	movhi	r6,1
    dae8:	31b6d304 	addi	r6,r6,-9396
    daec:	001018c0 	call	1018c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    daf0:	e0bff917 	ldw	r2,-28(fp)
    daf4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    daf8:	e0bff917 	ldw	r2,-28(fp)
    dafc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    db00:	00800074 	movhi	r2,1
    db04:	10953304 	addi	r2,r2,21708
    db08:	10800017 	ldw	r2,0(r2)
    db0c:	1809883a 	mov	r4,r3
    db10:	100b883a 	mov	r5,r2
    db14:	01800074 	movhi	r6,1
    db18:	31b77d04 	addi	r6,r6,-8716
    db1c:	e1fff917 	ldw	r7,-28(fp)
    db20:	000fc8c0 	call	fc8c <alt_alarm_start>
    db24:	1000040e 	bge	r2,zero,db38 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    db28:	e0fff917 	ldw	r3,-28(fp)
    db2c:	00a00034 	movhi	r2,32768
    db30:	10bfffc4 	addi	r2,r2,-1
    db34:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    db38:	e037883a 	mov	sp,fp
    db3c:	dfc00117 	ldw	ra,4(sp)
    db40:	df000017 	ldw	fp,0(sp)
    db44:	dec00204 	addi	sp,sp,8
    db48:	f800283a 	ret

0000db4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    db4c:	defff104 	addi	sp,sp,-60
    db50:	dfc00e15 	stw	ra,56(sp)
    db54:	df000d15 	stw	fp,52(sp)
    db58:	df000d04 	addi	fp,sp,52
    db5c:	e13ffe15 	stw	r4,-8(fp)
    db60:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    db64:	e0bffe17 	ldw	r2,-8(fp)
    db68:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    db6c:	e0bff517 	ldw	r2,-44(fp)
    db70:	10800017 	ldw	r2,0(r2)
    db74:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db78:	e0bff617 	ldw	r2,-40(fp)
    db7c:	10800104 	addi	r2,r2,4
    db80:	10800037 	ldwio	r2,0(r2)
    db84:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    db88:	e0bff717 	ldw	r2,-36(fp)
    db8c:	1080c00c 	andi	r2,r2,768
    db90:	1000011e 	bne	r2,zero,db98 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    db94:	00009206 	br	dde0 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    db98:	e0bff717 	ldw	r2,-36(fp)
    db9c:	1080400c 	andi	r2,r2,256
    dba0:	10004726 	beq	r2,zero,dcc0 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dba4:	00800074 	movhi	r2,1
    dba8:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dbac:	e0bff517 	ldw	r2,-44(fp)
    dbb0:	10800d17 	ldw	r2,52(r2)
    dbb4:	10800044 	addi	r2,r2,1
    dbb8:	1081ffcc 	andi	r2,r2,2047
    dbbc:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    dbc0:	e0bff517 	ldw	r2,-44(fp)
    dbc4:	10c00e17 	ldw	r3,56(r2)
    dbc8:	e0bff817 	ldw	r2,-32(fp)
    dbcc:	1880011e 	bne	r3,r2,dbd4 <altera_avalon_jtag_uart_irq+0x88>
          break;
    dbd0:	00002906 	br	dc78 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    dbd4:	e0bff617 	ldw	r2,-40(fp)
    dbd8:	10800037 	ldwio	r2,0(r2)
    dbdc:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    dbe0:	e0bff317 	ldw	r2,-52(fp)
    dbe4:	10a0000c 	andi	r2,r2,32768
    dbe8:	1000011e 	bne	r2,zero,dbf0 <altera_avalon_jtag_uart_irq+0xa4>
          break;
    dbec:	00002206 	br	dc78 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    dbf0:	e0bff517 	ldw	r2,-44(fp)
    dbf4:	10800d17 	ldw	r2,52(r2)
    dbf8:	e0fff317 	ldw	r3,-52(fp)
    dbfc:	1809883a 	mov	r4,r3
    dc00:	e0fff517 	ldw	r3,-44(fp)
    dc04:	1885883a 	add	r2,r3,r2
    dc08:	10801104 	addi	r2,r2,68
    dc0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dc10:	e0bff517 	ldw	r2,-44(fp)
    dc14:	10800d17 	ldw	r2,52(r2)
    dc18:	10800044 	addi	r2,r2,1
    dc1c:	10c1ffcc 	andi	r3,r2,2047
    dc20:	e0bff517 	ldw	r2,-44(fp)
    dc24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    dc28:	e0bff517 	ldw	r2,-44(fp)
    dc2c:	10800c17 	ldw	r2,48(r2)
    dc30:	e0bff915 	stw	r2,-28(fp)
    dc34:	00800044 	movi	r2,1
    dc38:	e0bffa0d 	sth	r2,-24(fp)
    dc3c:	00800044 	movi	r2,1
    dc40:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    dc44:	00800074 	movhi	r2,1
    dc48:	10951e44 	addi	r2,r2,21625
    dc4c:	10800003 	ldbu	r2,0(r2)
    dc50:	10803fcc 	andi	r2,r2,255
    dc54:	103fd526 	beq	r2,zero,dbac <__alt_mem_Flash_flash_data+0xf400dbac>
  {
    OSFlagPost (group, flags, opt, &err);
    dc58:	e17ffa0b 	ldhu	r5,-24(fp)
    dc5c:	e0fffa83 	ldbu	r3,-22(fp)
    dc60:	e0bffcc4 	addi	r2,fp,-13
    dc64:	e13ff917 	ldw	r4,-28(fp)
    dc68:	180d883a 	mov	r6,r3
    dc6c:	100f883a 	mov	r7,r2
    dc70:	00088c80 	call	88c8 <OSFlagPost>
      }
    dc74:	003fcd06 	br	dbac <__alt_mem_Flash_flash_data+0xf400dbac>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    dc78:	e0bff317 	ldw	r2,-52(fp)
    dc7c:	10bfffec 	andhi	r2,r2,65535
    dc80:	10000f26 	beq	r2,zero,dcc0 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dc84:	e0bff517 	ldw	r2,-44(fp)
    dc88:	10c00817 	ldw	r3,32(r2)
    dc8c:	00bfff84 	movi	r2,-2
    dc90:	1886703a 	and	r3,r3,r2
    dc94:	e0bff517 	ldw	r2,-44(fp)
    dc98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dc9c:	e0bff617 	ldw	r2,-40(fp)
    dca0:	10800104 	addi	r2,r2,4
    dca4:	1007883a 	mov	r3,r2
    dca8:	e0bff517 	ldw	r2,-44(fp)
    dcac:	10800817 	ldw	r2,32(r2)
    dcb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dcb4:	e0bff617 	ldw	r2,-40(fp)
    dcb8:	10800104 	addi	r2,r2,4
    dcbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dcc0:	e0bff717 	ldw	r2,-36(fp)
    dcc4:	1080800c 	andi	r2,r2,512
    dcc8:	10004426 	beq	r2,zero,dddc <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dccc:	e0bff717 	ldw	r2,-36(fp)
    dcd0:	1004d43a 	srli	r2,r2,16
    dcd4:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dcd8:	00002706 	br	dd78 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dcdc:	e0bff617 	ldw	r2,-40(fp)
    dce0:	e0fff517 	ldw	r3,-44(fp)
    dce4:	18c01017 	ldw	r3,64(r3)
    dce8:	e13ff517 	ldw	r4,-44(fp)
    dcec:	20c7883a 	add	r3,r4,r3
    dcf0:	18c21104 	addi	r3,r3,2116
    dcf4:	18c00003 	ldbu	r3,0(r3)
    dcf8:	18c03fcc 	andi	r3,r3,255
    dcfc:	18c0201c 	xori	r3,r3,128
    dd00:	18ffe004 	addi	r3,r3,-128
    dd04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd08:	e0bff517 	ldw	r2,-44(fp)
    dd0c:	10801017 	ldw	r2,64(r2)
    dd10:	10800044 	addi	r2,r2,1
    dd14:	10c1ffcc 	andi	r3,r2,2047
    dd18:	e0bff517 	ldw	r2,-44(fp)
    dd1c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    dd20:	e0bff517 	ldw	r2,-44(fp)
    dd24:	10800c17 	ldw	r2,48(r2)
    dd28:	e0bffb15 	stw	r2,-20(fp)
    dd2c:	00800084 	movi	r2,2
    dd30:	e0bffc0d 	sth	r2,-16(fp)
    dd34:	00800044 	movi	r2,1
    dd38:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    dd3c:	00800074 	movhi	r2,1
    dd40:	10951e44 	addi	r2,r2,21625
    dd44:	10800003 	ldbu	r2,0(r2)
    dd48:	10803fcc 	andi	r2,r2,255
    dd4c:	10000726 	beq	r2,zero,dd6c <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    dd50:	e17ffc0b 	ldhu	r5,-16(fp)
    dd54:	e0fffc83 	ldbu	r3,-14(fp)
    dd58:	e0bffd04 	addi	r2,fp,-12
    dd5c:	e13ffb17 	ldw	r4,-20(fp)
    dd60:	180d883a 	mov	r6,r3
    dd64:	100f883a 	mov	r7,r2
    dd68:	00088c80 	call	88c8 <OSFlagPost>

        space--;
    dd6c:	e0bff417 	ldw	r2,-48(fp)
    dd70:	10bfffc4 	addi	r2,r2,-1
    dd74:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    dd78:	e0bff417 	ldw	r2,-48(fp)
    dd7c:	10000526 	beq	r2,zero,dd94 <altera_avalon_jtag_uart_irq+0x248>
    dd80:	e0bff517 	ldw	r2,-44(fp)
    dd84:	10c01017 	ldw	r3,64(r2)
    dd88:	e0bff517 	ldw	r2,-44(fp)
    dd8c:	10800f17 	ldw	r2,60(r2)
    dd90:	18bfd21e 	bne	r3,r2,dcdc <__alt_mem_Flash_flash_data+0xf400dcdc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    dd94:	e0bff417 	ldw	r2,-48(fp)
    dd98:	10001026 	beq	r2,zero,dddc <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dd9c:	e0bff517 	ldw	r2,-44(fp)
    dda0:	10c00817 	ldw	r3,32(r2)
    dda4:	00bfff44 	movi	r2,-3
    dda8:	1886703a 	and	r3,r3,r2
    ddac:	e0bff517 	ldw	r2,-44(fp)
    ddb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ddb4:	e0bff517 	ldw	r2,-44(fp)
    ddb8:	10800017 	ldw	r2,0(r2)
    ddbc:	10800104 	addi	r2,r2,4
    ddc0:	1007883a 	mov	r3,r2
    ddc4:	e0bff517 	ldw	r2,-44(fp)
    ddc8:	10800817 	ldw	r2,32(r2)
    ddcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ddd0:	e0bff617 	ldw	r2,-40(fp)
    ddd4:	10800104 	addi	r2,r2,4
    ddd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    dddc:	003f6606 	br	db78 <__alt_mem_Flash_flash_data+0xf400db78>
}
    dde0:	e037883a 	mov	sp,fp
    dde4:	dfc00117 	ldw	ra,4(sp)
    dde8:	df000017 	ldw	fp,0(sp)
    ddec:	dec00204 	addi	sp,sp,8
    ddf0:	f800283a 	ret

0000ddf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ddf4:	defff904 	addi	sp,sp,-28
    ddf8:	dfc00615 	stw	ra,24(sp)
    ddfc:	df000515 	stw	fp,20(sp)
    de00:	df000504 	addi	fp,sp,20
    de04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    de08:	e0bfff17 	ldw	r2,-4(fp)
    de0c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    de10:	e0bffb17 	ldw	r2,-20(fp)
    de14:	10800017 	ldw	r2,0(r2)
    de18:	10800104 	addi	r2,r2,4
    de1c:	10800037 	ldwio	r2,0(r2)
    de20:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    de24:	e0bffc17 	ldw	r2,-16(fp)
    de28:	1081000c 	andi	r2,r2,1024
    de2c:	10000b26 	beq	r2,zero,de5c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    de30:	e0bffb17 	ldw	r2,-20(fp)
    de34:	10800017 	ldw	r2,0(r2)
    de38:	10800104 	addi	r2,r2,4
    de3c:	1007883a 	mov	r3,r2
    de40:	e0bffb17 	ldw	r2,-20(fp)
    de44:	10800817 	ldw	r2,32(r2)
    de48:	10810014 	ori	r2,r2,1024
    de4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    de50:	e0bffb17 	ldw	r2,-20(fp)
    de54:	10000915 	stw	zero,36(r2)
    de58:	00002206 	br	dee4 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    de5c:	e0bffb17 	ldw	r2,-20(fp)
    de60:	10c00917 	ldw	r3,36(r2)
    de64:	00a00034 	movhi	r2,32768
    de68:	10bfff04 	addi	r2,r2,-4
    de6c:	10c01d36 	bltu	r2,r3,dee4 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    de70:	e0bffb17 	ldw	r2,-20(fp)
    de74:	10800917 	ldw	r2,36(r2)
    de78:	10c00044 	addi	r3,r2,1
    de7c:	e0bffb17 	ldw	r2,-20(fp)
    de80:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    de84:	e0bffb17 	ldw	r2,-20(fp)
    de88:	10c00917 	ldw	r3,36(r2)
    de8c:	e0bffb17 	ldw	r2,-20(fp)
    de90:	10800117 	ldw	r2,4(r2)
    de94:	18801336 	bltu	r3,r2,dee4 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    de98:	e0bffb17 	ldw	r2,-20(fp)
    de9c:	10800c17 	ldw	r2,48(r2)
    dea0:	e0bffd15 	stw	r2,-12(fp)
    dea4:	00800104 	movi	r2,4
    dea8:	e0bffe0d 	sth	r2,-8(fp)
    deac:	00800044 	movi	r2,1
    deb0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    deb4:	00800074 	movhi	r2,1
    deb8:	10951e44 	addi	r2,r2,21625
    debc:	10800003 	ldbu	r2,0(r2)
    dec0:	10803fcc 	andi	r2,r2,255
    dec4:	10000726 	beq	r2,zero,dee4 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    dec8:	e17ffe0b 	ldhu	r5,-8(fp)
    decc:	e0fffe83 	ldbu	r3,-6(fp)
    ded0:	e0bffec4 	addi	r2,fp,-5
    ded4:	e13ffd17 	ldw	r4,-12(fp)
    ded8:	180d883a 	mov	r6,r3
    dedc:	100f883a 	mov	r7,r2
    dee0:	00088c80 	call	88c8 <OSFlagPost>
    dee4:	00800074 	movhi	r2,1
    dee8:	10953304 	addi	r2,r2,21708
    deec:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    def0:	e037883a 	mov	sp,fp
    def4:	dfc00117 	ldw	ra,4(sp)
    def8:	df000017 	ldw	fp,0(sp)
    defc:	dec00204 	addi	sp,sp,8
    df00:	f800283a 	ret

0000df04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    df04:	defffd04 	addi	sp,sp,-12
    df08:	df000215 	stw	fp,8(sp)
    df0c:	df000204 	addi	fp,sp,8
    df10:	e13ffe15 	stw	r4,-8(fp)
    df14:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df18:	00000506 	br	df30 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    df1c:	e0bfff17 	ldw	r2,-4(fp)
    df20:	1090000c 	andi	r2,r2,16384
    df24:	10000226 	beq	r2,zero,df30 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    df28:	00bffd44 	movi	r2,-11
    df2c:	00000b06 	br	df5c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    df30:	e0bffe17 	ldw	r2,-8(fp)
    df34:	10c01017 	ldw	r3,64(r2)
    df38:	e0bffe17 	ldw	r2,-8(fp)
    df3c:	10800f17 	ldw	r2,60(r2)
    df40:	18800526 	beq	r3,r2,df58 <altera_avalon_jtag_uart_close+0x54>
    df44:	e0bffe17 	ldw	r2,-8(fp)
    df48:	10c00917 	ldw	r3,36(r2)
    df4c:	e0bffe17 	ldw	r2,-8(fp)
    df50:	10800117 	ldw	r2,4(r2)
    df54:	18bff136 	bltu	r3,r2,df1c <__alt_mem_Flash_flash_data+0xf400df1c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    df58:	0005883a 	mov	r2,zero
}
    df5c:	e037883a 	mov	sp,fp
    df60:	df000017 	ldw	fp,0(sp)
    df64:	dec00104 	addi	sp,sp,4
    df68:	f800283a 	ret

0000df6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    df6c:	defffa04 	addi	sp,sp,-24
    df70:	df000515 	stw	fp,20(sp)
    df74:	df000504 	addi	fp,sp,20
    df78:	e13ffd15 	stw	r4,-12(fp)
    df7c:	e17ffe15 	stw	r5,-8(fp)
    df80:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    df84:	00bff9c4 	movi	r2,-25
    df88:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    df8c:	e0bffe17 	ldw	r2,-8(fp)
    df90:	10da8060 	cmpeqi	r3,r2,27137
    df94:	1800031e 	bne	r3,zero,dfa4 <altera_avalon_jtag_uart_ioctl+0x38>
    df98:	109a80a0 	cmpeqi	r2,r2,27138
    df9c:	1000191e 	bne	r2,zero,e004 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    dfa0:	00002806 	br	e044 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dfa4:	e0bffd17 	ldw	r2,-12(fp)
    dfa8:	10c00117 	ldw	r3,4(r2)
    dfac:	00a00034 	movhi	r2,32768
    dfb0:	10bfffc4 	addi	r2,r2,-1
    dfb4:	18801226 	beq	r3,r2,e000 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    dfb8:	e0bfff17 	ldw	r2,-4(fp)
    dfbc:	10800017 	ldw	r2,0(r2)
    dfc0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dfc4:	e0bffc17 	ldw	r2,-16(fp)
    dfc8:	10800090 	cmplti	r2,r2,2
    dfcc:	1000061e 	bne	r2,zero,dfe8 <altera_avalon_jtag_uart_ioctl+0x7c>
    dfd0:	e0fffc17 	ldw	r3,-16(fp)
    dfd4:	00a00034 	movhi	r2,32768
    dfd8:	10bfffc4 	addi	r2,r2,-1
    dfdc:	18800226 	beq	r3,r2,dfe8 <altera_avalon_jtag_uart_ioctl+0x7c>
    dfe0:	e0bffc17 	ldw	r2,-16(fp)
    dfe4:	00000206 	br	dff0 <altera_avalon_jtag_uart_ioctl+0x84>
    dfe8:	00a00034 	movhi	r2,32768
    dfec:	10bfff84 	addi	r2,r2,-2
    dff0:	e0fffd17 	ldw	r3,-12(fp)
    dff4:	18800115 	stw	r2,4(r3)
      rc = 0;
    dff8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dffc:	00001106 	br	e044 <altera_avalon_jtag_uart_ioctl+0xd8>
    e000:	00001006 	br	e044 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e004:	e0bffd17 	ldw	r2,-12(fp)
    e008:	10c00117 	ldw	r3,4(r2)
    e00c:	00a00034 	movhi	r2,32768
    e010:	10bfffc4 	addi	r2,r2,-1
    e014:	18800a26 	beq	r3,r2,e040 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e018:	e0bffd17 	ldw	r2,-12(fp)
    e01c:	10c00917 	ldw	r3,36(r2)
    e020:	e0bffd17 	ldw	r2,-12(fp)
    e024:	10800117 	ldw	r2,4(r2)
    e028:	1885803a 	cmpltu	r2,r3,r2
    e02c:	10c03fcc 	andi	r3,r2,255
    e030:	e0bfff17 	ldw	r2,-4(fp)
    e034:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e038:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e03c:	00000006 	br	e040 <altera_avalon_jtag_uart_ioctl+0xd4>
    e040:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e044:	e0bffb17 	ldw	r2,-20(fp)
}
    e048:	e037883a 	mov	sp,fp
    e04c:	df000017 	ldw	fp,0(sp)
    e050:	dec00104 	addi	sp,sp,4
    e054:	f800283a 	ret

0000e058 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e058:	deffec04 	addi	sp,sp,-80
    e05c:	dfc01315 	stw	ra,76(sp)
    e060:	df001215 	stw	fp,72(sp)
    e064:	df001204 	addi	fp,sp,72
    e068:	e13ffc15 	stw	r4,-16(fp)
    e06c:	e17ffd15 	stw	r5,-12(fp)
    e070:	e1bffe15 	stw	r6,-8(fp)
    e074:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e078:	e0bffd17 	ldw	r2,-12(fp)
    e07c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	10800a17 	ldw	r2,40(r2)
    e088:	e0bff415 	stw	r2,-48(fp)
    e08c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    e090:	e0fff50b 	ldhu	r3,-44(fp)
    e094:	e0bffb04 	addi	r2,fp,-20
    e098:	e13ff417 	ldw	r4,-48(fp)
    e09c:	180b883a 	mov	r5,r3
    e0a0:	100d883a 	mov	r6,r2
    e0a4:	000af180 	call	af18 <OSSemPend>

  while (space > 0)
    e0a8:	00006506 	br	e240 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e0ac:	e0bffc17 	ldw	r2,-16(fp)
    e0b0:	10800d17 	ldw	r2,52(r2)
    e0b4:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    e0b8:	e0bffc17 	ldw	r2,-16(fp)
    e0bc:	10800e17 	ldw	r2,56(r2)
    e0c0:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    e0c4:	e0fff117 	ldw	r3,-60(fp)
    e0c8:	e0bff217 	ldw	r2,-56(fp)
    e0cc:	18800536 	bltu	r3,r2,e0e4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    e0d0:	e0fff117 	ldw	r3,-60(fp)
    e0d4:	e0bff217 	ldw	r2,-56(fp)
    e0d8:	1885c83a 	sub	r2,r3,r2
    e0dc:	e0bff015 	stw	r2,-64(fp)
    e0e0:	00000406 	br	e0f4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e0e4:	00c20004 	movi	r3,2048
    e0e8:	e0bff217 	ldw	r2,-56(fp)
    e0ec:	1885c83a 	sub	r2,r3,r2
    e0f0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    e0f4:	e0bff017 	ldw	r2,-64(fp)
    e0f8:	1000011e 	bne	r2,zero,e100 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    e0fc:	00001d06 	br	e174 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    e100:	e0fffe17 	ldw	r3,-8(fp)
    e104:	e0bff017 	ldw	r2,-64(fp)
    e108:	1880022e 	bgeu	r3,r2,e114 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    e10c:	e0bffe17 	ldw	r2,-8(fp)
    e110:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e114:	e0bff217 	ldw	r2,-56(fp)
    e118:	10801104 	addi	r2,r2,68
    e11c:	e0fffc17 	ldw	r3,-16(fp)
    e120:	1885883a 	add	r2,r3,r2
    e124:	e13fef17 	ldw	r4,-68(fp)
    e128:	100b883a 	mov	r5,r2
    e12c:	e1bff017 	ldw	r6,-64(fp)
    e130:	0002d380 	call	2d38 <memcpy>
      ptr   += n;
    e134:	e0ffef17 	ldw	r3,-68(fp)
    e138:	e0bff017 	ldw	r2,-64(fp)
    e13c:	1885883a 	add	r2,r3,r2
    e140:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    e144:	e0fffe17 	ldw	r3,-8(fp)
    e148:	e0bff017 	ldw	r2,-64(fp)
    e14c:	1885c83a 	sub	r2,r3,r2
    e150:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e154:	e0fff217 	ldw	r3,-56(fp)
    e158:	e0bff017 	ldw	r2,-64(fp)
    e15c:	1885883a 	add	r2,r3,r2
    e160:	10c1ffcc 	andi	r3,r2,2047
    e164:	e0bffc17 	ldw	r2,-16(fp)
    e168:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    e16c:	e0bffe17 	ldw	r2,-8(fp)
    e170:	00bfce16 	blt	zero,r2,e0ac <__alt_mem_Flash_flash_data+0xf400e0ac>

    /* If we read any data then return it */
    if (ptr != buffer)
    e174:	e0ffef17 	ldw	r3,-68(fp)
    e178:	e0bffd17 	ldw	r2,-12(fp)
    e17c:	18800126 	beq	r3,r2,e184 <altera_avalon_jtag_uart_read+0x12c>
      break;
    e180:	00003106 	br	e248 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e184:	e0bfff17 	ldw	r2,-4(fp)
    e188:	1090000c 	andi	r2,r2,16384
    e18c:	10000126 	beq	r2,zero,e194 <altera_avalon_jtag_uart_read+0x13c>
      break;
    e190:	00002d06 	br	e248 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    e194:	00800074 	movhi	r2,1
    e198:	10951e44 	addi	r2,r2,21625
    e19c:	10800003 	ldbu	r2,0(r2)
    e1a0:	10803fcc 	andi	r2,r2,255
    e1a4:	10800058 	cmpnei	r2,r2,1
    e1a8:	1000161e 	bne	r2,zero,e204 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    e1ac:	e0bffc17 	ldw	r2,-16(fp)
    e1b0:	10800c17 	ldw	r2,48(r2)
    e1b4:	e0bff615 	stw	r2,-40(fp)
    e1b8:	00800144 	movi	r2,5
    e1bc:	e0bff70d 	sth	r2,-36(fp)
    e1c0:	00bfe0c4 	movi	r2,-125
    e1c4:	e0bff785 	stb	r2,-34(fp)
    e1c8:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    e1cc:	00800074 	movhi	r2,1
    e1d0:	10951e44 	addi	r2,r2,21625
    e1d4:	10800003 	ldbu	r2,0(r2)
    e1d8:	10803fcc 	andi	r2,r2,255
    e1dc:	10001326 	beq	r2,zero,e22c <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    e1e0:	e17ff70b 	ldhu	r5,-36(fp)
    e1e4:	e1bff783 	ldbu	r6,-34(fp)
    e1e8:	e0fff80b 	ldhu	r3,-32(fp)
    e1ec:	e0bffb44 	addi	r2,fp,-19
    e1f0:	d8800015 	stw	r2,0(sp)
    e1f4:	e13ff617 	ldw	r4,-40(fp)
    e1f8:	180f883a 	mov	r7,r3
    e1fc:	00082700 	call	8270 <OSFlagPend>
    e200:	00000a06 	br	e22c <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e204:	0001883a 	nop
    e208:	e0bffc17 	ldw	r2,-16(fp)
    e20c:	10c00d17 	ldw	r3,52(r2)
    e210:	e0bff117 	ldw	r2,-60(fp)
    e214:	1880051e 	bne	r3,r2,e22c <altera_avalon_jtag_uart_read+0x1d4>
    e218:	e0bffc17 	ldw	r2,-16(fp)
    e21c:	10c00917 	ldw	r3,36(r2)
    e220:	e0bffc17 	ldw	r2,-16(fp)
    e224:	10800117 	ldw	r2,4(r2)
    e228:	18bff736 	bltu	r3,r2,e208 <__alt_mem_Flash_flash_data+0xf400e208>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e22c:	e0bffc17 	ldw	r2,-16(fp)
    e230:	10c00d17 	ldw	r3,52(r2)
    e234:	e0bff117 	ldw	r2,-60(fp)
    e238:	1880011e 	bne	r3,r2,e240 <altera_avalon_jtag_uart_read+0x1e8>
      break;
    e23c:	00000206 	br	e248 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e240:	e0bffe17 	ldw	r2,-8(fp)
    e244:	00bf9916 	blt	zero,r2,e0ac <__alt_mem_Flash_flash_data+0xf400e0ac>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    e248:	e0bffc17 	ldw	r2,-16(fp)
    e24c:	10800a17 	ldw	r2,40(r2)
    e250:	1009883a 	mov	r4,r2
    e254:	000b2ec0 	call	b2ec <OSSemPost>

  if (ptr != buffer)
    e258:	e0ffef17 	ldw	r3,-68(fp)
    e25c:	e0bffd17 	ldw	r2,-12(fp)
    e260:	18801826 	beq	r3,r2,e2c4 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e264:	0005303a 	rdctl	r2,status
    e268:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e26c:	e0fff917 	ldw	r3,-28(fp)
    e270:	00bfff84 	movi	r2,-2
    e274:	1884703a 	and	r2,r3,r2
    e278:	1001703a 	wrctl	status,r2
  
  return context;
    e27c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e280:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e284:	e0bffc17 	ldw	r2,-16(fp)
    e288:	10800817 	ldw	r2,32(r2)
    e28c:	10c00054 	ori	r3,r2,1
    e290:	e0bffc17 	ldw	r2,-16(fp)
    e294:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e298:	e0bffc17 	ldw	r2,-16(fp)
    e29c:	10800017 	ldw	r2,0(r2)
    e2a0:	10800104 	addi	r2,r2,4
    e2a4:	1007883a 	mov	r3,r2
    e2a8:	e0bffc17 	ldw	r2,-16(fp)
    e2ac:	10800817 	ldw	r2,32(r2)
    e2b0:	18800035 	stwio	r2,0(r3)
    e2b4:	e0bff317 	ldw	r2,-52(fp)
    e2b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2bc:	e0bffa17 	ldw	r2,-24(fp)
    e2c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e2c4:	e0ffef17 	ldw	r3,-68(fp)
    e2c8:	e0bffd17 	ldw	r2,-12(fp)
    e2cc:	18800426 	beq	r3,r2,e2e0 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    e2d0:	e0ffef17 	ldw	r3,-68(fp)
    e2d4:	e0bffd17 	ldw	r2,-12(fp)
    e2d8:	1885c83a 	sub	r2,r3,r2
    e2dc:	00000606 	br	e2f8 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    e2e0:	e0bfff17 	ldw	r2,-4(fp)
    e2e4:	1090000c 	andi	r2,r2,16384
    e2e8:	10000226 	beq	r2,zero,e2f4 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    e2ec:	00bffd44 	movi	r2,-11
    e2f0:	00000106 	br	e2f8 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    e2f4:	00bffec4 	movi	r2,-5
}
    e2f8:	e037883a 	mov	sp,fp
    e2fc:	dfc00117 	ldw	ra,4(sp)
    e300:	df000017 	ldw	fp,0(sp)
    e304:	dec00204 	addi	sp,sp,8
    e308:	f800283a 	ret

0000e30c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e30c:	deffed04 	addi	sp,sp,-76
    e310:	dfc01215 	stw	ra,72(sp)
    e314:	df001115 	stw	fp,68(sp)
    e318:	df001104 	addi	fp,sp,68
    e31c:	e13ffc15 	stw	r4,-16(fp)
    e320:	e17ffd15 	stw	r5,-12(fp)
    e324:	e1bffe15 	stw	r6,-8(fp)
    e328:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e32c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e330:	e0bffd17 	ldw	r2,-12(fp)
    e334:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    e338:	e0bffc17 	ldw	r2,-16(fp)
    e33c:	10800b17 	ldw	r2,44(r2)
    e340:	e0bff515 	stw	r2,-44(fp)
    e344:	e03ff60d 	sth	zero,-40(fp)
    e348:	e0fff60b 	ldhu	r3,-40(fp)
    e34c:	e0bffbc4 	addi	r2,fp,-17
    e350:	e13ff517 	ldw	r4,-44(fp)
    e354:	180b883a 	mov	r5,r3
    e358:	100d883a 	mov	r6,r2
    e35c:	000af180 	call	af18 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e360:	00003806 	br	e444 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e364:	e0bffc17 	ldw	r2,-16(fp)
    e368:	10800f17 	ldw	r2,60(r2)
    e36c:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    e370:	e0bffc17 	ldw	r2,-16(fp)
    e374:	10801017 	ldw	r2,64(r2)
    e378:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    e37c:	e0fff317 	ldw	r3,-52(fp)
    e380:	e0bff017 	ldw	r2,-64(fp)
    e384:	1880062e 	bgeu	r3,r2,e3a0 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    e388:	e0fff017 	ldw	r3,-64(fp)
    e38c:	e0bff317 	ldw	r2,-52(fp)
    e390:	1885c83a 	sub	r2,r3,r2
    e394:	10bfffc4 	addi	r2,r2,-1
    e398:	e0bff115 	stw	r2,-60(fp)
    e39c:	00000b06 	br	e3cc <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    e3a0:	e0bff017 	ldw	r2,-64(fp)
    e3a4:	10000526 	beq	r2,zero,e3bc <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e3a8:	00c20004 	movi	r3,2048
    e3ac:	e0bff317 	ldw	r2,-52(fp)
    e3b0:	1885c83a 	sub	r2,r3,r2
    e3b4:	e0bff115 	stw	r2,-60(fp)
    e3b8:	00000406 	br	e3cc <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e3bc:	00c1ffc4 	movi	r3,2047
    e3c0:	e0bff317 	ldw	r2,-52(fp)
    e3c4:	1885c83a 	sub	r2,r3,r2
    e3c8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    e3cc:	e0bff117 	ldw	r2,-60(fp)
    e3d0:	1000011e 	bne	r2,zero,e3d8 <altera_avalon_jtag_uart_write+0xcc>
        break;
    e3d4:	00001d06 	br	e44c <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    e3d8:	e0fffe17 	ldw	r3,-8(fp)
    e3dc:	e0bff117 	ldw	r2,-60(fp)
    e3e0:	1880022e 	bgeu	r3,r2,e3ec <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    e3e4:	e0bffe17 	ldw	r2,-8(fp)
    e3e8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e3ec:	e0bff317 	ldw	r2,-52(fp)
    e3f0:	10821104 	addi	r2,r2,2116
    e3f4:	e0fffc17 	ldw	r3,-16(fp)
    e3f8:	1885883a 	add	r2,r3,r2
    e3fc:	1009883a 	mov	r4,r2
    e400:	e17ffd17 	ldw	r5,-12(fp)
    e404:	e1bff117 	ldw	r6,-60(fp)
    e408:	0002d380 	call	2d38 <memcpy>
      ptr   += n;
    e40c:	e0fffd17 	ldw	r3,-12(fp)
    e410:	e0bff117 	ldw	r2,-60(fp)
    e414:	1885883a 	add	r2,r3,r2
    e418:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e41c:	e0fffe17 	ldw	r3,-8(fp)
    e420:	e0bff117 	ldw	r2,-60(fp)
    e424:	1885c83a 	sub	r2,r3,r2
    e428:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e42c:	e0fff317 	ldw	r3,-52(fp)
    e430:	e0bff117 	ldw	r2,-60(fp)
    e434:	1885883a 	add	r2,r3,r2
    e438:	10c1ffcc 	andi	r3,r2,2047
    e43c:	e0bffc17 	ldw	r2,-16(fp)
    e440:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e444:	e0bffe17 	ldw	r2,-8(fp)
    e448:	00bfc616 	blt	zero,r2,e364 <__alt_mem_Flash_flash_data+0xf400e364>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e44c:	0005303a 	rdctl	r2,status
    e450:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e454:	e0fff717 	ldw	r3,-36(fp)
    e458:	00bfff84 	movi	r2,-2
    e45c:	1884703a 	and	r2,r3,r2
    e460:	1001703a 	wrctl	status,r2
  
  return context;
    e464:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e468:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e46c:	e0bffc17 	ldw	r2,-16(fp)
    e470:	10800817 	ldw	r2,32(r2)
    e474:	10c00094 	ori	r3,r2,2
    e478:	e0bffc17 	ldw	r2,-16(fp)
    e47c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e480:	e0bffc17 	ldw	r2,-16(fp)
    e484:	10800017 	ldw	r2,0(r2)
    e488:	10800104 	addi	r2,r2,4
    e48c:	1007883a 	mov	r3,r2
    e490:	e0bffc17 	ldw	r2,-16(fp)
    e494:	10800817 	ldw	r2,32(r2)
    e498:	18800035 	stwio	r2,0(r3)
    e49c:	e0bff417 	ldw	r2,-48(fp)
    e4a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4a4:	e0bff817 	ldw	r2,-32(fp)
    e4a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e4ac:	e0bffe17 	ldw	r2,-8(fp)
    e4b0:	00802e0e 	bge	zero,r2,e56c <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    e4b4:	e0bfff17 	ldw	r2,-4(fp)
    e4b8:	1090000c 	andi	r2,r2,16384
    e4bc:	10000126 	beq	r2,zero,e4c4 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    e4c0:	00002c06 	br	e574 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    e4c4:	00800074 	movhi	r2,1
    e4c8:	10951e44 	addi	r2,r2,21625
    e4cc:	10800003 	ldbu	r2,0(r2)
    e4d0:	10803fcc 	andi	r2,r2,255
    e4d4:	10800058 	cmpnei	r2,r2,1
    e4d8:	1000161e 	bne	r2,zero,e534 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    e4dc:	e0bffc17 	ldw	r2,-16(fp)
    e4e0:	10800c17 	ldw	r2,48(r2)
    e4e4:	e0bff915 	stw	r2,-28(fp)
    e4e8:	00800184 	movi	r2,6
    e4ec:	e0bffa0d 	sth	r2,-24(fp)
    e4f0:	00bfe0c4 	movi	r2,-125
    e4f4:	e0bffa85 	stb	r2,-22(fp)
    e4f8:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    e4fc:	00800074 	movhi	r2,1
    e500:	10951e44 	addi	r2,r2,21625
    e504:	10800003 	ldbu	r2,0(r2)
    e508:	10803fcc 	andi	r2,r2,255
    e50c:	10001326 	beq	r2,zero,e55c <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    e510:	e17ffa0b 	ldhu	r5,-24(fp)
    e514:	e1bffa83 	ldbu	r6,-22(fp)
    e518:	e0fffb0b 	ldhu	r3,-20(fp)
    e51c:	e0bffb84 	addi	r2,fp,-18
    e520:	d8800015 	stw	r2,0(sp)
    e524:	e13ff917 	ldw	r4,-28(fp)
    e528:	180f883a 	mov	r7,r3
    e52c:	00082700 	call	8270 <OSFlagPend>
    e530:	00000a06 	br	e55c <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e534:	0001883a 	nop
    e538:	e0bffc17 	ldw	r2,-16(fp)
    e53c:	10c01017 	ldw	r3,64(r2)
    e540:	e0bff017 	ldw	r2,-64(fp)
    e544:	1880051e 	bne	r3,r2,e55c <altera_avalon_jtag_uart_write+0x250>
    e548:	e0bffc17 	ldw	r2,-16(fp)
    e54c:	10c00917 	ldw	r3,36(r2)
    e550:	e0bffc17 	ldw	r2,-16(fp)
    e554:	10800117 	ldw	r2,4(r2)
    e558:	18bff736 	bltu	r3,r2,e538 <__alt_mem_Flash_flash_data+0xf400e538>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e55c:	e0bffc17 	ldw	r2,-16(fp)
    e560:	10800917 	ldw	r2,36(r2)
    e564:	10000126 	beq	r2,zero,e56c <altera_avalon_jtag_uart_write+0x260>
         break;
    e568:	00000206 	br	e574 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    e56c:	e0bffe17 	ldw	r2,-8(fp)
    e570:	00bf7b16 	blt	zero,r2,e360 <__alt_mem_Flash_flash_data+0xf400e360>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    e574:	e0bffc17 	ldw	r2,-16(fp)
    e578:	10800b17 	ldw	r2,44(r2)
    e57c:	1009883a 	mov	r4,r2
    e580:	000b2ec0 	call	b2ec <OSSemPost>

  if (ptr != start)
    e584:	e0fffd17 	ldw	r3,-12(fp)
    e588:	e0bff217 	ldw	r2,-56(fp)
    e58c:	18800426 	beq	r3,r2,e5a0 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    e590:	e0fffd17 	ldw	r3,-12(fp)
    e594:	e0bff217 	ldw	r2,-56(fp)
    e598:	1885c83a 	sub	r2,r3,r2
    e59c:	00000606 	br	e5b8 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    e5a0:	e0bfff17 	ldw	r2,-4(fp)
    e5a4:	1090000c 	andi	r2,r2,16384
    e5a8:	10000226 	beq	r2,zero,e5b4 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    e5ac:	00bffd44 	movi	r2,-11
    e5b0:	00000106 	br	e5b8 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e5b4:	00bffec4 	movi	r2,-5
}
    e5b8:	e037883a 	mov	sp,fp
    e5bc:	dfc00117 	ldw	ra,4(sp)
    e5c0:	df000017 	ldw	fp,0(sp)
    e5c4:	dec00204 	addi	sp,sp,8
    e5c8:	f800283a 	ret

0000e5cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e5cc:	defff904 	addi	sp,sp,-28
    e5d0:	dfc00615 	stw	ra,24(sp)
    e5d4:	df000515 	stw	fp,20(sp)
    e5d8:	df000504 	addi	fp,sp,20
    e5dc:	e13ffe15 	stw	r4,-8(fp)
    e5e0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e5e4:	0007883a 	mov	r3,zero
    e5e8:	e0bffe17 	ldw	r2,-8(fp)
    e5ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e5f0:	e0bffe17 	ldw	r2,-8(fp)
    e5f4:	10800104 	addi	r2,r2,4
    e5f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5fc:	0005303a 	rdctl	r2,status
    e600:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e604:	e0fffc17 	ldw	r3,-16(fp)
    e608:	00bfff84 	movi	r2,-2
    e60c:	1884703a 	and	r2,r3,r2
    e610:	1001703a 	wrctl	status,r2
  
  return context;
    e614:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e618:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e61c:	00106480 	call	10648 <alt_tick>
    e620:	e0bffb17 	ldw	r2,-20(fp)
    e624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e628:	e0bffd17 	ldw	r2,-12(fp)
    e62c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e630:	e037883a 	mov	sp,fp
    e634:	dfc00117 	ldw	ra,4(sp)
    e638:	df000017 	ldw	fp,0(sp)
    e63c:	dec00204 	addi	sp,sp,8
    e640:	f800283a 	ret

0000e644 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e644:	defff904 	addi	sp,sp,-28
    e648:	dfc00615 	stw	ra,24(sp)
    e64c:	df000515 	stw	fp,20(sp)
    e650:	df000504 	addi	fp,sp,20
    e654:	e13ffc15 	stw	r4,-16(fp)
    e658:	e17ffd15 	stw	r5,-12(fp)
    e65c:	e1bffe15 	stw	r6,-8(fp)
    e660:	e1ffff15 	stw	r7,-4(fp)
    e664:	e0bfff17 	ldw	r2,-4(fp)
    e668:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e66c:	00800074 	movhi	r2,1
    e670:	10953304 	addi	r2,r2,21708
    e674:	10800017 	ldw	r2,0(r2)
    e678:	1000041e 	bne	r2,zero,e68c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e67c:	00800074 	movhi	r2,1
    e680:	10953304 	addi	r2,r2,21708
    e684:	e0fffb17 	ldw	r3,-20(fp)
    e688:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e68c:	e0bffc17 	ldw	r2,-16(fp)
    e690:	10800104 	addi	r2,r2,4
    e694:	00c001c4 	movi	r3,7
    e698:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e69c:	e13ffe17 	ldw	r4,-8(fp)
    e6a0:	e17ffc17 	ldw	r5,-16(fp)
    e6a4:	01800074 	movhi	r6,1
    e6a8:	31b97304 	addi	r6,r6,-6708
    e6ac:	001018c0 	call	1018c <alt_irq_register>
#endif  
}
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	dfc00117 	ldw	ra,4(sp)
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00204 	addi	sp,sp,8
    e6c0:	f800283a 	ret

0000e6c4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e6c4:	defffc04 	addi	sp,sp,-16
    e6c8:	df000315 	stw	fp,12(sp)
    e6cc:	df000304 	addi	fp,sp,12
    e6d0:	e13ffe15 	stw	r4,-8(fp)
    e6d4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e6d8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    e6dc:	e0bfff17 	ldw	r2,-4(fp)
    e6e0:	1000061e 	bne	r2,zero,e6fc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    e6e4:	e0bffe17 	ldw	r2,-8(fp)
    e6e8:	1007883a 	mov	r3,r2
    e6ec:	e0bffd03 	ldbu	r2,-12(fp)
    e6f0:	1884b03a 	or	r2,r3,r2
    e6f4:	e0bffd05 	stb	r2,-12(fp)
    e6f8:	00000806 	br	e71c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    e6fc:	e0bffe17 	ldw	r2,-8(fp)
    e700:	1007883a 	mov	r3,r2
    e704:	e0bffd03 	ldbu	r2,-12(fp)
    e708:	1884b03a 	or	r2,r3,r2
    e70c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    e710:	e0bffd03 	ldbu	r2,-12(fp)
    e714:	10801014 	ori	r2,r2,64
    e718:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e71c:	e0fffd03 	ldbu	r3,-12(fp)
    e720:	00bfe004 	movi	r2,-128
    e724:	1884b03a 	or	r2,r3,r2
}
    e728:	e037883a 	mov	sp,fp
    e72c:	df000017 	ldw	fp,0(sp)
    e730:	dec00104 	addi	sp,sp,4
    e734:	f800283a 	ret

0000e738 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e738:	defffd04 	addi	sp,sp,-12
    e73c:	df000215 	stw	fp,8(sp)
    e740:	df000204 	addi	fp,sp,8
    e744:	e13ffe15 	stw	r4,-8(fp)
    e748:	2805883a 	mov	r2,r5
    e74c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e750:	e0bffe17 	ldw	r2,-8(fp)
    e754:	10800a17 	ldw	r2,40(r2)
    e758:	1007883a 	mov	r3,r2
    e75c:	e0bfff03 	ldbu	r2,-4(fp)
    e760:	18800025 	stbio	r2,0(r3)
}
    e764:	e037883a 	mov	sp,fp
    e768:	df000017 	ldw	fp,0(sp)
    e76c:	dec00104 	addi	sp,sp,4
    e770:	f800283a 	ret

0000e774 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e774:	defffe04 	addi	sp,sp,-8
    e778:	df000115 	stw	fp,4(sp)
    e77c:	df000104 	addi	fp,sp,4
    e780:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e784:	e0bfff17 	ldw	r2,-4(fp)
    e788:	10800a17 	ldw	r2,40(r2)
    e78c:	1007883a 	mov	r3,r2
    e790:	00800044 	movi	r2,1
    e794:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e798:	e037883a 	mov	sp,fp
    e79c:	df000017 	ldw	fp,0(sp)
    e7a0:	dec00104 	addi	sp,sp,4
    e7a4:	f800283a 	ret

0000e7a8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e7a8:	defffc04 	addi	sp,sp,-16
    e7ac:	dfc00315 	stw	ra,12(sp)
    e7b0:	df000215 	stw	fp,8(sp)
    e7b4:	df000204 	addi	fp,sp,8
    e7b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e7bc:	e13fff17 	ldw	r4,-4(fp)
    e7c0:	01400074 	movhi	r5,1
    e7c4:	294d2204 	addi	r5,r5,13448
    e7c8:	000ff940 	call	ff94 <alt_find_dev>
    e7cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e7d0:	e0bffe17 	ldw	r2,-8(fp)
}
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    e7e8:	defffb04 	addi	sp,sp,-20
    e7ec:	df000415 	stw	fp,16(sp)
    e7f0:	df000404 	addi	fp,sp,16
    e7f4:	e13ffd15 	stw	r4,-12(fp)
    e7f8:	e17ffe15 	stw	r5,-8(fp)
    e7fc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    e800:	e03ffc15 	stw	zero,-16(fp)
    e804:	00000f06 	br	e844 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e808:	e0bffd17 	ldw	r2,-12(fp)
    e80c:	10800a17 	ldw	r2,40(r2)
    e810:	10800044 	addi	r2,r2,1
    e814:	1009883a 	mov	r4,r2
    e818:	e0fffe17 	ldw	r3,-8(fp)
    e81c:	e0bffc17 	ldw	r2,-16(fp)
    e820:	1885883a 	add	r2,r3,r2
    e824:	10800003 	ldbu	r2,0(r2)
    e828:	10803fcc 	andi	r2,r2,255
    e82c:	1080201c 	xori	r2,r2,128
    e830:	10bfe004 	addi	r2,r2,-128
    e834:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e838:	e0bffc17 	ldw	r2,-16(fp)
    e83c:	10800044 	addi	r2,r2,1
    e840:	e0bffc15 	stw	r2,-16(fp)
    e844:	e0fffc17 	ldw	r3,-16(fp)
    e848:	e0bfff17 	ldw	r2,-4(fp)
    e84c:	18bfee36 	bltu	r3,r2,e808 <__alt_mem_Flash_flash_data+0xf400e808>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    e850:	e037883a 	mov	sp,fp
    e854:	df000017 	ldw	fp,0(sp)
    e858:	dec00104 	addi	sp,sp,4
    e85c:	f800283a 	ret

0000e860 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    e860:	defffd04 	addi	sp,sp,-12
    e864:	df000215 	stw	fp,8(sp)
    e868:	df000204 	addi	fp,sp,8
    e86c:	e13ffe15 	stw	r4,-8(fp)
    e870:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    e874:	00000d06 	br	e8ac <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e878:	e0bffe17 	ldw	r2,-8(fp)
    e87c:	10800a17 	ldw	r2,40(r2)
    e880:	10800044 	addi	r2,r2,1
    e884:	1007883a 	mov	r3,r2
    e888:	e0bfff17 	ldw	r2,-4(fp)
    e88c:	10800003 	ldbu	r2,0(r2)
    e890:	10803fcc 	andi	r2,r2,255
    e894:	1080201c 	xori	r2,r2,128
    e898:	10bfe004 	addi	r2,r2,-128
    e89c:	18800025 	stbio	r2,0(r3)
		++ptr;
    e8a0:	e0bfff17 	ldw	r2,-4(fp)
    e8a4:	10800044 	addi	r2,r2,1
    e8a8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e8ac:	e0bfff17 	ldw	r2,-4(fp)
    e8b0:	10800003 	ldbu	r2,0(r2)
    e8b4:	10803fcc 	andi	r2,r2,255
    e8b8:	1080201c 	xori	r2,r2,128
    e8bc:	10bfe004 	addi	r2,r2,-128
    e8c0:	103fed1e 	bne	r2,zero,e878 <__alt_mem_Flash_flash_data+0xf400e878>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    e8c4:	e037883a 	mov	sp,fp
    e8c8:	df000017 	ldw	fp,0(sp)
    e8cc:	dec00104 	addi	sp,sp,4
    e8d0:	f800283a 	ret

0000e8d4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e8d4:	defffb04 	addi	sp,sp,-20
    e8d8:	dfc00415 	stw	ra,16(sp)
    e8dc:	df000315 	stw	fp,12(sp)
    e8e0:	df000304 	addi	fp,sp,12
    e8e4:	e13ffd15 	stw	r4,-12(fp)
    e8e8:	e17ffe15 	stw	r5,-8(fp)
    e8ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e8f0:	e0bffd17 	ldw	r2,-12(fp)
    e8f4:	10c00017 	ldw	r3,0(r2)
    e8f8:	e0bfff17 	ldw	r2,-4(fp)
    e8fc:	1809883a 	mov	r4,r3
    e900:	e17ffe17 	ldw	r5,-8(fp)
    e904:	100d883a 	mov	r6,r2
    e908:	000e7e80 	call	e7e8 <alt_up_character_lcd_write>
	return 0;
    e90c:	0005883a 	mov	r2,zero
}
    e910:	e037883a 	mov	sp,fp
    e914:	dfc00117 	ldw	ra,4(sp)
    e918:	df000017 	ldw	fp,0(sp)
    e91c:	dec00204 	addi	sp,sp,8
    e920:	f800283a 	ret

0000e924 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e924:	defffa04 	addi	sp,sp,-24
    e928:	dfc00515 	stw	ra,20(sp)
    e92c:	df000415 	stw	fp,16(sp)
    e930:	df000404 	addi	fp,sp,16
    e934:	e13ffd15 	stw	r4,-12(fp)
    e938:	e17ffe15 	stw	r5,-8(fp)
    e93c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e940:	e0bffe17 	ldw	r2,-8(fp)
    e944:	10800a28 	cmpgeui	r2,r2,40
    e948:	1000031e 	bne	r2,zero,e958 <alt_up_character_lcd_set_cursor_pos+0x34>
    e94c:	e0bfff17 	ldw	r2,-4(fp)
    e950:	108000b0 	cmpltui	r2,r2,2
    e954:	1000021e 	bne	r2,zero,e960 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    e958:	00bfffc4 	movi	r2,-1
    e95c:	00000906 	br	e984 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e960:	e13ffe17 	ldw	r4,-8(fp)
    e964:	e17fff17 	ldw	r5,-4(fp)
    e968:	000e6c40 	call	e6c4 <get_DDRAM_addr>
    e96c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    e970:	e0bffc03 	ldbu	r2,-16(fp)
    e974:	e13ffd17 	ldw	r4,-12(fp)
    e978:	100b883a 	mov	r5,r2
    e97c:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
	return 0;
    e980:	0005883a 	mov	r2,zero
}
    e984:	e037883a 	mov	sp,fp
    e988:	dfc00117 	ldw	ra,4(sp)
    e98c:	df000017 	ldw	fp,0(sp)
    e990:	dec00204 	addi	sp,sp,8
    e994:	f800283a 	ret

0000e998 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e998:	defffb04 	addi	sp,sp,-20
    e99c:	dfc00415 	stw	ra,16(sp)
    e9a0:	df000315 	stw	fp,12(sp)
    e9a4:	df000304 	addi	fp,sp,12
    e9a8:	e13ffe15 	stw	r4,-8(fp)
    e9ac:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    e9b0:	e0bfff17 	ldw	r2,-4(fp)
    e9b4:	1000011e 	bne	r2,zero,e9bc <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    e9b8:	00001406 	br	ea0c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    e9bc:	e0bfff17 	ldw	r2,-4(fp)
    e9c0:	0080020e 	bge	zero,r2,e9cc <alt_up_character_lcd_shift_cursor+0x34>
    e9c4:	00800504 	movi	r2,20
    e9c8:	00000106 	br	e9d0 <alt_up_character_lcd_shift_cursor+0x38>
    e9cc:	00800404 	movi	r2,16
    e9d0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    e9d4:	e0bfff17 	ldw	r2,-4(fp)
    e9d8:	1000010e 	bge	r2,zero,e9e0 <alt_up_character_lcd_shift_cursor+0x48>
    e9dc:	0085c83a 	sub	r2,zero,r2
    e9e0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e9e4:	00000406 	br	e9f8 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e9e8:	e0bffd43 	ldbu	r2,-11(fp)
    e9ec:	e13ffe17 	ldw	r4,-8(fp)
    e9f0:	100b883a 	mov	r5,r2
    e9f4:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e9f8:	e0bffd03 	ldbu	r2,-12(fp)
    e9fc:	10ffffc4 	addi	r3,r2,-1
    ea00:	e0fffd05 	stb	r3,-12(fp)
    ea04:	10803fcc 	andi	r2,r2,255
    ea08:	103ff71e 	bne	r2,zero,e9e8 <__alt_mem_Flash_flash_data+0xf400e9e8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	dfc00117 	ldw	ra,4(sp)
    ea14:	df000017 	ldw	fp,0(sp)
    ea18:	dec00204 	addi	sp,sp,8
    ea1c:	f800283a 	ret

0000ea20 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ea20:	defffb04 	addi	sp,sp,-20
    ea24:	dfc00415 	stw	ra,16(sp)
    ea28:	df000315 	stw	fp,12(sp)
    ea2c:	df000304 	addi	fp,sp,12
    ea30:	e13ffe15 	stw	r4,-8(fp)
    ea34:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    ea38:	e0bfff17 	ldw	r2,-4(fp)
    ea3c:	1000011e 	bne	r2,zero,ea44 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    ea40:	00001406 	br	ea94 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ea44:	e0bfff17 	ldw	r2,-4(fp)
    ea48:	0080020e 	bge	zero,r2,ea54 <alt_up_character_lcd_shift_display+0x34>
    ea4c:	00800704 	movi	r2,28
    ea50:	00000106 	br	ea58 <alt_up_character_lcd_shift_display+0x38>
    ea54:	00800604 	movi	r2,24
    ea58:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    ea5c:	e0bfff17 	ldw	r2,-4(fp)
    ea60:	1000010e 	bge	r2,zero,ea68 <alt_up_character_lcd_shift_display+0x48>
    ea64:	0085c83a 	sub	r2,zero,r2
    ea68:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ea6c:	00000406 	br	ea80 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ea70:	e0bffd43 	ldbu	r2,-11(fp)
    ea74:	e13ffe17 	ldw	r4,-8(fp)
    ea78:	100b883a 	mov	r5,r2
    ea7c:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ea80:	e0bffd03 	ldbu	r2,-12(fp)
    ea84:	10ffffc4 	addi	r3,r2,-1
    ea88:	e0fffd05 	stb	r3,-12(fp)
    ea8c:	10803fcc 	andi	r2,r2,255
    ea90:	103ff71e 	bne	r2,zero,ea70 <__alt_mem_Flash_flash_data+0xf400ea70>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ea94:	e037883a 	mov	sp,fp
    ea98:	dfc00117 	ldw	ra,4(sp)
    ea9c:	df000017 	ldw	fp,0(sp)
    eaa0:	dec00204 	addi	sp,sp,8
    eaa4:	f800283a 	ret

0000eaa8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    eaa8:	defffa04 	addi	sp,sp,-24
    eaac:	dfc00515 	stw	ra,20(sp)
    eab0:	df000415 	stw	fp,16(sp)
    eab4:	df000404 	addi	fp,sp,16
    eab8:	e13ffd15 	stw	r4,-12(fp)
    eabc:	e17ffe15 	stw	r5,-8(fp)
    eac0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    eac4:	e0bffe17 	ldw	r2,-8(fp)
    eac8:	10800a28 	cmpgeui	r2,r2,40
    eacc:	1000031e 	bne	r2,zero,eadc <alt_up_character_lcd_erase_pos+0x34>
    ead0:	e0bfff17 	ldw	r2,-4(fp)
    ead4:	108000b0 	cmpltui	r2,r2,2
    ead8:	1000021e 	bne	r2,zero,eae4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    eadc:	00bfffc4 	movi	r2,-1
    eae0:	00000f06 	br	eb20 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    eae4:	e13ffe17 	ldw	r4,-8(fp)
    eae8:	e17fff17 	ldw	r5,-4(fp)
    eaec:	000e6c40 	call	e6c4 <get_DDRAM_addr>
    eaf0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    eaf4:	e0bffc03 	ldbu	r2,-16(fp)
    eaf8:	e13ffd17 	ldw	r4,-12(fp)
    eafc:	100b883a 	mov	r5,r2
    eb00:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    eb04:	e0bffd17 	ldw	r2,-12(fp)
    eb08:	10800a17 	ldw	r2,40(r2)
    eb0c:	10800044 	addi	r2,r2,1
    eb10:	1007883a 	mov	r3,r2
    eb14:	00800084 	movi	r2,2
    eb18:	18800025 	stbio	r2,0(r3)
	return 0;
    eb1c:	0005883a 	mov	r2,zero
}
    eb20:	e037883a 	mov	sp,fp
    eb24:	dfc00117 	ldw	ra,4(sp)
    eb28:	df000017 	ldw	fp,0(sp)
    eb2c:	dec00204 	addi	sp,sp,8
    eb30:	f800283a 	ret

0000eb34 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    eb34:	defffd04 	addi	sp,sp,-12
    eb38:	dfc00215 	stw	ra,8(sp)
    eb3c:	df000115 	stw	fp,4(sp)
    eb40:	df000104 	addi	fp,sp,4
    eb44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    eb48:	e13fff17 	ldw	r4,-4(fp)
    eb4c:	01400304 	movi	r5,12
    eb50:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
}
    eb54:	e037883a 	mov	sp,fp
    eb58:	dfc00117 	ldw	ra,4(sp)
    eb5c:	df000017 	ldw	fp,0(sp)
    eb60:	dec00204 	addi	sp,sp,8
    eb64:	f800283a 	ret

0000eb68 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    eb68:	defffd04 	addi	sp,sp,-12
    eb6c:	dfc00215 	stw	ra,8(sp)
    eb70:	df000115 	stw	fp,4(sp)
    eb74:	df000104 	addi	fp,sp,4
    eb78:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    eb7c:	e13fff17 	ldw	r4,-4(fp)
    eb80:	014003c4 	movi	r5,15
    eb84:	000e7380 	call	e738 <alt_up_character_lcd_send_cmd>
}
    eb88:	e037883a 	mov	sp,fp
    eb8c:	dfc00117 	ldw	ra,4(sp)
    eb90:	df000017 	ldw	fp,0(sp)
    eb94:	dec00204 	addi	sp,sp,8
    eb98:	f800283a 	ret

0000eb9c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    eb9c:	defffd04 	addi	sp,sp,-12
    eba0:	df000215 	stw	fp,8(sp)
    eba4:	df000204 	addi	fp,sp,8
    eba8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ebac:	e0bfff17 	ldw	r2,-4(fp)
    ebb0:	10800a17 	ldw	r2,40(r2)
    ebb4:	10800104 	addi	r2,r2,4
    ebb8:	10800037 	ldwio	r2,0(r2)
    ebbc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    ebc0:	e0bffe17 	ldw	r2,-8(fp)
    ebc4:	10800054 	ori	r2,r2,1
    ebc8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ebcc:	e0bfff17 	ldw	r2,-4(fp)
    ebd0:	10800a17 	ldw	r2,40(r2)
    ebd4:	10800104 	addi	r2,r2,4
    ebd8:	1007883a 	mov	r3,r2
    ebdc:	e0bffe17 	ldw	r2,-8(fp)
    ebe0:	18800035 	stwio	r2,0(r3)
}
    ebe4:	e037883a 	mov	sp,fp
    ebe8:	df000017 	ldw	fp,0(sp)
    ebec:	dec00104 	addi	sp,sp,4
    ebf0:	f800283a 	ret

0000ebf4 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    ebf4:	defffd04 	addi	sp,sp,-12
    ebf8:	df000215 	stw	fp,8(sp)
    ebfc:	df000204 	addi	fp,sp,8
    ec00:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    ec04:	e0bfff17 	ldw	r2,-4(fp)
    ec08:	10800a17 	ldw	r2,40(r2)
    ec0c:	10800104 	addi	r2,r2,4
    ec10:	10800037 	ldwio	r2,0(r2)
    ec14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    ec18:	e0fffe17 	ldw	r3,-8(fp)
    ec1c:	00bfff84 	movi	r2,-2
    ec20:	1884703a 	and	r2,r3,r2
    ec24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    ec28:	e0bfff17 	ldw	r2,-4(fp)
    ec2c:	10800a17 	ldw	r2,40(r2)
    ec30:	10800104 	addi	r2,r2,4
    ec34:	1007883a 	mov	r3,r2
    ec38:	e0bffe17 	ldw	r2,-8(fp)
    ec3c:	18800035 	stwio	r2,0(r3)
}
    ec40:	e037883a 	mov	sp,fp
    ec44:	df000017 	ldw	fp,0(sp)
    ec48:	dec00104 	addi	sp,sp,4
    ec4c:	f800283a 	ret

0000ec50 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    ec50:	defffd04 	addi	sp,sp,-12
    ec54:	df000215 	stw	fp,8(sp)
    ec58:	df000204 	addi	fp,sp,8
    ec5c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    ec60:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    ec64:	e0bfff17 	ldw	r2,-4(fp)
    ec68:	10800a17 	ldw	r2,40(r2)
    ec6c:	10800084 	addi	r2,r2,2
    ec70:	1080002b 	ldhuio	r2,0(r2)
    ec74:	10bfffcc 	andi	r2,r2,65535
    ec78:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    ec7c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ec80:	e037883a 	mov	sp,fp
    ec84:	df000017 	ldw	fp,0(sp)
    ec88:	dec00104 	addi	sp,sp,4
    ec8c:	f800283a 	ret

0000ec90 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    ec90:	defffd04 	addi	sp,sp,-12
    ec94:	df000215 	stw	fp,8(sp)
    ec98:	df000204 	addi	fp,sp,8
    ec9c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	10800a17 	ldw	r2,40(r2)
    eca8:	10800104 	addi	r2,r2,4
    ecac:	10800037 	ldwio	r2,0(r2)
    ecb0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    ecb4:	e0bffe17 	ldw	r2,-8(fp)
    ecb8:	1004d43a 	srli	r2,r2,16
}
    ecbc:	e037883a 	mov	sp,fp
    ecc0:	df000017 	ldw	fp,0(sp)
    ecc4:	dec00104 	addi	sp,sp,4
    ecc8:	f800283a 	ret

0000eccc <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    eccc:	defffd04 	addi	sp,sp,-12
    ecd0:	df000215 	stw	fp,8(sp)
    ecd4:	df000204 	addi	fp,sp,8
    ecd8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    ecdc:	e0bfff17 	ldw	r2,-4(fp)
    ece0:	1080800c 	andi	r2,r2,512
    ece4:	1004d27a 	srli	r2,r2,9
    ece8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    ecec:	e0bffe17 	ldw	r2,-8(fp)
    ecf0:	10000226 	beq	r2,zero,ecfc <alt_up_irda_check_parity+0x30>
    ecf4:	00bfffc4 	movi	r2,-1
    ecf8:	00000106 	br	ed00 <alt_up_irda_check_parity+0x34>
    ecfc:	0005883a 	mov	r2,zero
}
    ed00:	e037883a 	mov	sp,fp
    ed04:	df000017 	ldw	fp,0(sp)
    ed08:	dec00104 	addi	sp,sp,4
    ed0c:	f800283a 	ret

0000ed10 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    ed10:	defffd04 	addi	sp,sp,-12
    ed14:	df000215 	stw	fp,8(sp)
    ed18:	df000204 	addi	fp,sp,8
    ed1c:	e13ffe15 	stw	r4,-8(fp)
    ed20:	2805883a 	mov	r2,r5
    ed24:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    ed28:	e0bffe17 	ldw	r2,-8(fp)
    ed2c:	10800a17 	ldw	r2,40(r2)
    ed30:	1007883a 	mov	r3,r2
    ed34:	e0bfff03 	ldbu	r2,-4(fp)
    ed38:	18800035 	stwio	r2,0(r3)
	return 0;
    ed3c:	0005883a 	mov	r2,zero
}
    ed40:	e037883a 	mov	sp,fp
    ed44:	df000017 	ldw	fp,0(sp)
    ed48:	dec00104 	addi	sp,sp,4
    ed4c:	f800283a 	ret

0000ed50 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    ed50:	defffa04 	addi	sp,sp,-24
    ed54:	dfc00515 	stw	ra,20(sp)
    ed58:	df000415 	stw	fp,16(sp)
    ed5c:	df000404 	addi	fp,sp,16
    ed60:	e13ffd15 	stw	r4,-12(fp)
    ed64:	e17ffe15 	stw	r5,-8(fp)
    ed68:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    ed6c:	e0bffd17 	ldw	r2,-12(fp)
    ed70:	10800a17 	ldw	r2,40(r2)
    ed74:	10800037 	ldwio	r2,0(r2)
    ed78:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    ed7c:	e0bffc17 	ldw	r2,-16(fp)
    ed80:	1007883a 	mov	r3,r2
    ed84:	e0bffe17 	ldw	r2,-8(fp)
    ed88:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    ed8c:	e13ffc17 	ldw	r4,-16(fp)
    ed90:	000eccc0 	call	eccc <alt_up_irda_check_parity>
    ed94:	1007883a 	mov	r3,r2
    ed98:	e0bfff17 	ldw	r2,-4(fp)
    ed9c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    eda0:	e0bffc17 	ldw	r2,-16(fp)
    eda4:	10a0000c 	andi	r2,r2,32768
    eda8:	1004d3fa 	srli	r2,r2,15
    edac:	10bfffc4 	addi	r2,r2,-1
}
    edb0:	e037883a 	mov	sp,fp
    edb4:	dfc00117 	ldw	ra,4(sp)
    edb8:	df000017 	ldw	fp,0(sp)
    edbc:	dec00204 	addi	sp,sp,8
    edc0:	f800283a 	ret

0000edc4 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    edc4:	defff804 	addi	sp,sp,-32
    edc8:	dfc00715 	stw	ra,28(sp)
    edcc:	df000615 	stw	fp,24(sp)
    edd0:	df000604 	addi	fp,sp,24
    edd4:	e13ffd15 	stw	r4,-12(fp)
    edd8:	e17ffe15 	stw	r5,-8(fp)
    eddc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    ede0:	e0bffd17 	ldw	r2,-12(fp)
    ede4:	10800017 	ldw	r2,0(r2)
    ede8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    edec:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    edf0:	00000e06 	br	ee2c <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    edf4:	e0bffe17 	ldw	r2,-8(fp)
    edf8:	10c00044 	addi	r3,r2,1
    edfc:	e0fffe15 	stw	r3,-8(fp)
    ee00:	e0fffc04 	addi	r3,fp,-16
    ee04:	e13ffb17 	ldw	r4,-20(fp)
    ee08:	100b883a 	mov	r5,r2
    ee0c:	180d883a 	mov	r6,r3
    ee10:	000ed500 	call	ed50 <alt_up_irda_read_data>
    ee14:	1000041e 	bne	r2,zero,ee28 <alt_up_irda_read_fd+0x64>
			count++;
    ee18:	e0bffa17 	ldw	r2,-24(fp)
    ee1c:	10800044 	addi	r2,r2,1
    ee20:	e0bffa15 	stw	r2,-24(fp)
    ee24:	00000106 	br	ee2c <alt_up_irda_read_fd+0x68>
		else
			break;
    ee28:	00000406 	br	ee3c <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    ee2c:	e0bfff17 	ldw	r2,-4(fp)
    ee30:	10ffffc4 	addi	r3,r2,-1
    ee34:	e0ffff15 	stw	r3,-4(fp)
    ee38:	103fee1e 	bne	r2,zero,edf4 <__alt_mem_Flash_flash_data+0xf400edf4>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    ee3c:	e0bffa17 	ldw	r2,-24(fp)
}
    ee40:	e037883a 	mov	sp,fp
    ee44:	dfc00117 	ldw	ra,4(sp)
    ee48:	df000017 	ldw	fp,0(sp)
    ee4c:	dec00204 	addi	sp,sp,8
    ee50:	f800283a 	ret

0000ee54 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ee54:	defff904 	addi	sp,sp,-28
    ee58:	dfc00615 	stw	ra,24(sp)
    ee5c:	df000515 	stw	fp,20(sp)
    ee60:	df000504 	addi	fp,sp,20
    ee64:	e13ffd15 	stw	r4,-12(fp)
    ee68:	e17ffe15 	stw	r5,-8(fp)
    ee6c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    ee70:	e0bffd17 	ldw	r2,-12(fp)
    ee74:	10800017 	ldw	r2,0(r2)
    ee78:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ee7c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ee80:	00000e06 	br	eebc <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    ee84:	e0bffe17 	ldw	r2,-8(fp)
    ee88:	10c00044 	addi	r3,r2,1
    ee8c:	e0fffe15 	stw	r3,-8(fp)
    ee90:	10800003 	ldbu	r2,0(r2)
    ee94:	10803fcc 	andi	r2,r2,255
    ee98:	e13ffc17 	ldw	r4,-16(fp)
    ee9c:	100b883a 	mov	r5,r2
    eea0:	000ed100 	call	ed10 <alt_up_irda_write_data>
    eea4:	1000041e 	bne	r2,zero,eeb8 <alt_up_irda_write_fd+0x64>
			count++;
    eea8:	e0bffb17 	ldw	r2,-20(fp)
    eeac:	10800044 	addi	r2,r2,1
    eeb0:	e0bffb15 	stw	r2,-20(fp)
    eeb4:	00000106 	br	eebc <alt_up_irda_write_fd+0x68>
		else
			break;
    eeb8:	00000406 	br	eecc <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    eebc:	e0bfff17 	ldw	r2,-4(fp)
    eec0:	10ffffc4 	addi	r3,r2,-1
    eec4:	e0ffff15 	stw	r3,-4(fp)
    eec8:	103fee1e 	bne	r2,zero,ee84 <__alt_mem_Flash_flash_data+0xf400ee84>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    eecc:	e0bffb17 	ldw	r2,-20(fp)
}
    eed0:	e037883a 	mov	sp,fp
    eed4:	dfc00117 	ldw	ra,4(sp)
    eed8:	df000017 	ldw	fp,0(sp)
    eedc:	dec00204 	addi	sp,sp,8
    eee0:	f800283a 	ret

0000eee4 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    eee4:	defffc04 	addi	sp,sp,-16
    eee8:	dfc00315 	stw	ra,12(sp)
    eeec:	df000215 	stw	fp,8(sp)
    eef0:	df000204 	addi	fp,sp,8
    eef4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    eef8:	e13fff17 	ldw	r4,-4(fp)
    eefc:	01400074 	movhi	r5,1
    ef00:	294d2204 	addi	r5,r5,13448
    ef04:	000ff940 	call	ff94 <alt_find_dev>
    ef08:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ef0c:	e0bffe17 	ldw	r2,-8(fp)
}
    ef10:	e037883a 	mov	sp,fp
    ef14:	dfc00117 	ldw	ra,4(sp)
    ef18:	df000017 	ldw	fp,0(sp)
    ef1c:	dec00204 	addi	sp,sp,8
    ef20:	f800283a 	ret

0000ef24 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    ef24:	defffc04 	addi	sp,sp,-16
    ef28:	dfc00315 	stw	ra,12(sp)
    ef2c:	df000215 	stw	fp,8(sp)
    ef30:	df000204 	addi	fp,sp,8
    ef34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    ef38:	e13fff17 	ldw	r4,-4(fp)
    ef3c:	01400074 	movhi	r5,1
    ef40:	294d2204 	addi	r5,r5,13448
    ef44:	000ff940 	call	ff94 <alt_find_dev>
    ef48:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ef4c:	e0bffe17 	ldw	r2,-8(fp)
}
    ef50:	e037883a 	mov	sp,fp
    ef54:	dfc00117 	ldw	ra,4(sp)
    ef58:	df000017 	ldw	fp,0(sp)
    ef5c:	dec00204 	addi	sp,sp,8
    ef60:	f800283a 	ret

0000ef64 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    ef64:	defffd04 	addi	sp,sp,-12
    ef68:	df000215 	stw	fp,8(sp)
    ef6c:	df000204 	addi	fp,sp,8
    ef70:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    ef74:	e0bfff17 	ldw	r2,-4(fp)
    ef78:	1080400c 	andi	r2,r2,256
    ef7c:	1004d23a 	srli	r2,r2,8
    ef80:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    ef84:	e0bffe03 	ldbu	r2,-8(fp)
}
    ef88:	e037883a 	mov	sp,fp
    ef8c:	df000017 	ldw	fp,0(sp)
    ef90:	dec00104 	addi	sp,sp,4
    ef94:	f800283a 	ret

0000ef98 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    ef98:	defffd04 	addi	sp,sp,-12
    ef9c:	df000215 	stw	fp,8(sp)
    efa0:	df000204 	addi	fp,sp,8
    efa4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    efa8:	e0bfff17 	ldw	r2,-4(fp)
    efac:	1080004c 	andi	r2,r2,1
    efb0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    efb4:	e0bffe03 	ldbu	r2,-8(fp)
}
    efb8:	e037883a 	mov	sp,fp
    efbc:	df000017 	ldw	fp,0(sp)
    efc0:	dec00104 	addi	sp,sp,4
    efc4:	f800283a 	ret

0000efc8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    efc8:	defffd04 	addi	sp,sp,-12
    efcc:	df000215 	stw	fp,8(sp)
    efd0:	df000204 	addi	fp,sp,8
    efd4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    efd8:	e0bfff17 	ldw	r2,-4(fp)
    efdc:	1081000c 	andi	r2,r2,1024
    efe0:	1004d2ba 	srli	r2,r2,10
    efe4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    efe8:	e0bffe03 	ldbu	r2,-8(fp)
}
    efec:	e037883a 	mov	sp,fp
    eff0:	df000017 	ldw	fp,0(sp)
    eff4:	dec00104 	addi	sp,sp,4
    eff8:	f800283a 	ret

0000effc <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    effc:	defffd04 	addi	sp,sp,-12
    f000:	df000215 	stw	fp,8(sp)
    f004:	df000204 	addi	fp,sp,8
    f008:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    f00c:	e0bfff17 	ldw	r2,-4(fp)
    f010:	1004d43a 	srli	r2,r2,16
    f014:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    f018:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f01c:	e037883a 	mov	sp,fp
    f020:	df000017 	ldw	fp,0(sp)
    f024:	dec00104 	addi	sp,sp,4
    f028:	f800283a 	ret

0000f02c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    f02c:	defffd04 	addi	sp,sp,-12
    f030:	df000215 	stw	fp,8(sp)
    f034:	df000204 	addi	fp,sp,8
    f038:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    f03c:	e0bfff17 	ldw	r2,-4(fp)
    f040:	10a0000c 	andi	r2,r2,32768
    f044:	1004d3fa 	srli	r2,r2,15
    f048:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    f04c:	e0bffe03 	ldbu	r2,-8(fp)
}
    f050:	e037883a 	mov	sp,fp
    f054:	df000017 	ldw	fp,0(sp)
    f058:	dec00104 	addi	sp,sp,4
    f05c:	f800283a 	ret

0000f060 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    f060:	defffd04 	addi	sp,sp,-12
    f064:	df000215 	stw	fp,8(sp)
    f068:	df000204 	addi	fp,sp,8
    f06c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    f070:	e0bfff17 	ldw	r2,-4(fp)
    f074:	e0bffe05 	stb	r2,-8(fp)
	return data;
    f078:	e0bffe03 	ldbu	r2,-8(fp)
}
    f07c:	e037883a 	mov	sp,fp
    f080:	df000017 	ldw	fp,0(sp)
    f084:	dec00104 	addi	sp,sp,4
    f088:	f800283a 	ret

0000f08c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    f08c:	defffb04 	addi	sp,sp,-20
    f090:	dfc00415 	stw	ra,16(sp)
    f094:	df000315 	stw	fp,12(sp)
    f098:	df000304 	addi	fp,sp,12
    f09c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    f0a0:	e13fff17 	ldw	r4,-4(fp)
    f0a4:	01403fc4 	movi	r5,255
    f0a8:	000f2e80 	call	f2e8 <alt_up_ps2_write_data_byte_with_ack>
    f0ac:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    f0b0:	e0bffd17 	ldw	r2,-12(fp)
    f0b4:	1000211e 	bne	r2,zero,f13c <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f0b8:	e0bffe04 	addi	r2,fp,-8
    f0bc:	e13fff17 	ldw	r4,-4(fp)
    f0c0:	100b883a 	mov	r5,r2
    f0c4:	000f34c0 	call	f34c <alt_up_ps2_read_data_byte_timeout>
    f0c8:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    f0cc:	e0bffd17 	ldw	r2,-12(fp)
    f0d0:	10001a1e 	bne	r2,zero,f13c <alt_up_ps2_init+0xb0>
    f0d4:	e0bffe03 	ldbu	r2,-8(fp)
    f0d8:	10803fcc 	andi	r2,r2,255
    f0dc:	10802a98 	cmpnei	r2,r2,170
    f0e0:	1000161e 	bne	r2,zero,f13c <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    f0e4:	e0bffe04 	addi	r2,fp,-8
    f0e8:	e13fff17 	ldw	r4,-4(fp)
    f0ec:	100b883a 	mov	r5,r2
    f0f0:	000f34c0 	call	f34c <alt_up_ps2_read_data_byte_timeout>
    f0f4:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    f0f8:	e0bffd17 	ldw	r2,-12(fp)
    f0fc:	10bfe318 	cmpnei	r2,r2,-116
    f100:	1000041e 	bne	r2,zero,f114 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    f104:	e0bfff17 	ldw	r2,-4(fp)
    f108:	00c00044 	movi	r3,1
    f10c:	10c00d15 	stw	r3,52(r2)
    f110:	00000a06 	br	f13c <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    f114:	e0bffd17 	ldw	r2,-12(fp)
    f118:	1000081e 	bne	r2,zero,f13c <alt_up_ps2_init+0xb0>
    f11c:	e0bffe03 	ldbu	r2,-8(fp)
    f120:	10803fcc 	andi	r2,r2,255
    f124:	1000051e 	bne	r2,zero,f13c <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    f128:	e0bfff17 	ldw	r2,-4(fp)
    f12c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    f130:	e13fff17 	ldw	r4,-4(fp)
    f134:	01403d04 	movi	r5,244
    f138:	000f2040 	call	f204 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    f13c:	e037883a 	mov	sp,fp
    f140:	dfc00117 	ldw	ra,4(sp)
    f144:	df000017 	ldw	fp,0(sp)
    f148:	dec00204 	addi	sp,sp,8
    f14c:	f800283a 	ret

0000f150 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    f150:	defffd04 	addi	sp,sp,-12
    f154:	df000215 	stw	fp,8(sp)
    f158:	df000204 	addi	fp,sp,8
    f15c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f160:	e0bfff17 	ldw	r2,-4(fp)
    f164:	10800a17 	ldw	r2,40(r2)
    f168:	10800104 	addi	r2,r2,4
    f16c:	10800037 	ldwio	r2,0(r2)
    f170:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    f174:	e0bffe17 	ldw	r2,-8(fp)
    f178:	10800054 	ori	r2,r2,1
    f17c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f180:	e0bfff17 	ldw	r2,-4(fp)
    f184:	10800a17 	ldw	r2,40(r2)
    f188:	10800104 	addi	r2,r2,4
    f18c:	1007883a 	mov	r3,r2
    f190:	e0bffe17 	ldw	r2,-8(fp)
    f194:	18800035 	stwio	r2,0(r3)
}
    f198:	e037883a 	mov	sp,fp
    f19c:	df000017 	ldw	fp,0(sp)
    f1a0:	dec00104 	addi	sp,sp,4
    f1a4:	f800283a 	ret

0000f1a8 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    f1a8:	defffd04 	addi	sp,sp,-12
    f1ac:	df000215 	stw	fp,8(sp)
    f1b0:	df000204 	addi	fp,sp,8
    f1b4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    f1b8:	e0bfff17 	ldw	r2,-4(fp)
    f1bc:	10800a17 	ldw	r2,40(r2)
    f1c0:	10800104 	addi	r2,r2,4
    f1c4:	10800037 	ldwio	r2,0(r2)
    f1c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    f1cc:	e0fffe17 	ldw	r3,-8(fp)
    f1d0:	00bfff84 	movi	r2,-2
    f1d4:	1884703a 	and	r2,r3,r2
    f1d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    f1dc:	e0bfff17 	ldw	r2,-4(fp)
    f1e0:	10800a17 	ldw	r2,40(r2)
    f1e4:	10800104 	addi	r2,r2,4
    f1e8:	1007883a 	mov	r3,r2
    f1ec:	e0bffe17 	ldw	r2,-8(fp)
    f1f0:	18800035 	stwio	r2,0(r3)
}
    f1f4:	e037883a 	mov	sp,fp
    f1f8:	df000017 	ldw	fp,0(sp)
    f1fc:	dec00104 	addi	sp,sp,4
    f200:	f800283a 	ret

0000f204 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f204:	defffb04 	addi	sp,sp,-20
    f208:	dfc00415 	stw	ra,16(sp)
    f20c:	df000315 	stw	fp,12(sp)
    f210:	df000304 	addi	fp,sp,12
    f214:	e13ffe15 	stw	r4,-8(fp)
    f218:	2805883a 	mov	r2,r5
    f21c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    f220:	e0bffe17 	ldw	r2,-8(fp)
    f224:	10800a17 	ldw	r2,40(r2)
    f228:	1007883a 	mov	r3,r2
    f22c:	e0bfff03 	ldbu	r2,-4(fp)
    f230:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    f234:	e0bffe17 	ldw	r2,-8(fp)
    f238:	10800a17 	ldw	r2,40(r2)
    f23c:	10800104 	addi	r2,r2,4
    f240:	10800037 	ldwio	r2,0(r2)
    f244:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    f248:	e13ffd17 	ldw	r4,-12(fp)
    f24c:	000efc80 	call	efc8 <read_CE_bit>
    f250:	10803fcc 	andi	r2,r2,255
    f254:	10000226 	beq	r2,zero,f260 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    f258:	00bffec4 	movi	r2,-5
    f25c:	00000106 	br	f264 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    f260:	0005883a 	mov	r2,zero
}
    f264:	e037883a 	mov	sp,fp
    f268:	dfc00117 	ldw	ra,4(sp)
    f26c:	df000017 	ldw	fp,0(sp)
    f270:	dec00204 	addi	sp,sp,8
    f274:	f800283a 	ret

0000f278 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    f278:	defffc04 	addi	sp,sp,-16
    f27c:	dfc00315 	stw	ra,12(sp)
    f280:	df000215 	stw	fp,8(sp)
    f284:	df000204 	addi	fp,sp,8
    f288:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    f28c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    f290:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    f294:	e0bffe44 	addi	r2,fp,-7
    f298:	e13fff17 	ldw	r4,-4(fp)
    f29c:	100b883a 	mov	r5,r2
    f2a0:	000f34c0 	call	f34c <alt_up_ps2_read_data_byte_timeout>
    f2a4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    f2a8:	e0bffe03 	ldbu	r2,-8(fp)
    f2ac:	1000061e 	bne	r2,zero,f2c8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    f2b0:	e0bffe43 	ldbu	r2,-7(fp)
    f2b4:	10803fcc 	andi	r2,r2,255
    f2b8:	10803e98 	cmpnei	r2,r2,250
    f2bc:	1000041e 	bne	r2,zero,f2d0 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    f2c0:	0005883a 	mov	r2,zero
    f2c4:	00000306 	br	f2d4 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    f2c8:	e0bffe03 	ldbu	r2,-8(fp)
    f2cc:	00000106 	br	f2d4 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    f2d0:	003ff006 	br	f294 <__alt_mem_Flash_flash_data+0xf400f294>
	return -ETIMEDOUT;
}
    f2d4:	e037883a 	mov	sp,fp
    f2d8:	dfc00117 	ldw	ra,4(sp)
    f2dc:	df000017 	ldw	fp,0(sp)
    f2e0:	dec00204 	addi	sp,sp,8
    f2e4:	f800283a 	ret

0000f2e8 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    f2e8:	defffa04 	addi	sp,sp,-24
    f2ec:	dfc00515 	stw	ra,20(sp)
    f2f0:	df000415 	stw	fp,16(sp)
    f2f4:	df000404 	addi	fp,sp,16
    f2f8:	e13ffe15 	stw	r4,-8(fp)
    f2fc:	2805883a 	mov	r2,r5
    f300:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    f304:	e0bfff03 	ldbu	r2,-4(fp)
    f308:	e13ffe17 	ldw	r4,-8(fp)
    f30c:	100b883a 	mov	r5,r2
    f310:	000f2040 	call	f204 <alt_up_ps2_write_data_byte>
    f314:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    f318:	e0bffc17 	ldw	r2,-16(fp)
    f31c:	10000226 	beq	r2,zero,f328 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    f320:	e0bffc17 	ldw	r2,-16(fp)
    f324:	00000406 	br	f338 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    f328:	e13ffe17 	ldw	r4,-8(fp)
    f32c:	000f2780 	call	f278 <alt_up_ps2_wait_for_ack>
    f330:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    f334:	e0bffd17 	ldw	r2,-12(fp)
}
    f338:	e037883a 	mov	sp,fp
    f33c:	dfc00117 	ldw	ra,4(sp)
    f340:	df000017 	ldw	fp,0(sp)
    f344:	dec00204 	addi	sp,sp,8
    f348:	f800283a 	ret

0000f34c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f34c:	defffa04 	addi	sp,sp,-24
    f350:	dfc00515 	stw	ra,20(sp)
    f354:	df000415 	stw	fp,16(sp)
    f358:	df000404 	addi	fp,sp,16
    f35c:	e13ffe15 	stw	r4,-8(fp)
    f360:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    f364:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    f368:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    f36c:	e0bffc17 	ldw	r2,-16(fp)
    f370:	10800044 	addi	r2,r2,1
    f374:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f378:	e0bffe17 	ldw	r2,-8(fp)
    f37c:	10800a17 	ldw	r2,40(r2)
    f380:	10800037 	ldwio	r2,0(r2)
    f384:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    f388:	e13ffd17 	ldw	r4,-12(fp)
    f38c:	000f02c0 	call	f02c <read_data_valid>
    f390:	10803fcc 	andi	r2,r2,255
    f394:	10000726 	beq	r2,zero,f3b4 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    f398:	e13ffd17 	ldw	r4,-12(fp)
    f39c:	000f0600 	call	f060 <read_data_byte>
    f3a0:	1007883a 	mov	r3,r2
    f3a4:	e0bfff17 	ldw	r2,-4(fp)
    f3a8:	10c00005 	stb	r3,0(r2)
			return 0;
    f3ac:	0005883a 	mov	r2,zero
    f3b0:	00000a06 	br	f3dc <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    f3b4:	e0bffe17 	ldw	r2,-8(fp)
    f3b8:	10800c17 	ldw	r2,48(r2)
    f3bc:	10000626 	beq	r2,zero,f3d8 <alt_up_ps2_read_data_byte_timeout+0x8c>
    f3c0:	e0bffe17 	ldw	r2,-8(fp)
    f3c4:	10c00c17 	ldw	r3,48(r2)
    f3c8:	e0bffc17 	ldw	r2,-16(fp)
    f3cc:	1880022e 	bgeu	r3,r2,f3d8 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    f3d0:	00bfe304 	movi	r2,-116
    f3d4:	00000106 	br	f3dc <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    f3d8:	003fe406 	br	f36c <__alt_mem_Flash_flash_data+0xf400f36c>
}
    f3dc:	e037883a 	mov	sp,fp
    f3e0:	dfc00117 	ldw	ra,4(sp)
    f3e4:	df000017 	ldw	fp,0(sp)
    f3e8:	dec00204 	addi	sp,sp,8
    f3ec:	f800283a 	ret

0000f3f0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    f3f0:	defffb04 	addi	sp,sp,-20
    f3f4:	dfc00415 	stw	ra,16(sp)
    f3f8:	df000315 	stw	fp,12(sp)
    f3fc:	df000304 	addi	fp,sp,12
    f400:	e13ffe15 	stw	r4,-8(fp)
    f404:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    f408:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f40c:	e0bffe17 	ldw	r2,-8(fp)
    f410:	10800a17 	ldw	r2,40(r2)
    f414:	10800037 	ldwio	r2,0(r2)
    f418:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    f41c:	e13ffd17 	ldw	r4,-12(fp)
    f420:	000f02c0 	call	f02c <read_data_valid>
    f424:	10803fcc 	andi	r2,r2,255
    f428:	10000726 	beq	r2,zero,f448 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    f42c:	e13ffd17 	ldw	r4,-12(fp)
    f430:	000f0600 	call	f060 <read_data_byte>
    f434:	1007883a 	mov	r3,r2
    f438:	e0bfff17 	ldw	r2,-4(fp)
    f43c:	10c00005 	stb	r3,0(r2)
		return 0;
    f440:	0005883a 	mov	r2,zero
    f444:	00000106 	br	f44c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    f448:	00bfffc4 	movi	r2,-1
}
    f44c:	e037883a 	mov	sp,fp
    f450:	dfc00117 	ldw	ra,4(sp)
    f454:	df000017 	ldw	fp,0(sp)
    f458:	dec00204 	addi	sp,sp,8
    f45c:	f800283a 	ret

0000f460 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    f460:	defffb04 	addi	sp,sp,-20
    f464:	dfc00415 	stw	ra,16(sp)
    f468:	df000315 	stw	fp,12(sp)
    f46c:	df000304 	addi	fp,sp,12
    f470:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    f474:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    f478:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f47c:	e0bfff17 	ldw	r2,-4(fp)
    f480:	10800a17 	ldw	r2,40(r2)
    f484:	10800037 	ldwio	r2,0(r2)
    f488:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    f48c:	e13ffe17 	ldw	r4,-8(fp)
    f490:	000effc0 	call	effc <read_num_bytes_available>
    f494:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    f498:	e0bffd0b 	ldhu	r2,-12(fp)
    f49c:	103ff71e 	bne	r2,zero,f47c <__alt_mem_Flash_flash_data+0xf400f47c>
}
    f4a0:	e037883a 	mov	sp,fp
    f4a4:	dfc00117 	ldw	ra,4(sp)
    f4a8:	df000017 	ldw	fp,0(sp)
    f4ac:	dec00204 	addi	sp,sp,8
    f4b0:	f800283a 	ret

0000f4b4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    f4b4:	defff804 	addi	sp,sp,-32
    f4b8:	dfc00715 	stw	ra,28(sp)
    f4bc:	df000615 	stw	fp,24(sp)
    f4c0:	df000604 	addi	fp,sp,24
    f4c4:	e13ffd15 	stw	r4,-12(fp)
    f4c8:	e17ffe15 	stw	r5,-8(fp)
    f4cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f4d0:	e0bffd17 	ldw	r2,-12(fp)
    f4d4:	10800017 	ldw	r2,0(r2)
    f4d8:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    f4dc:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    f4e0:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    f4e4:	e0fffc17 	ldw	r3,-16(fp)
    f4e8:	e0bfff17 	ldw	r2,-4(fp)
    f4ec:	18bffd16 	blt	r3,r2,f4e4 <__alt_mem_Flash_flash_data+0xf400f4e4>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    f4f0:	e0bffe17 	ldw	r2,-8(fp)
    f4f4:	10c00044 	addi	r3,r2,1
    f4f8:	e0fffe15 	stw	r3,-8(fp)
    f4fc:	e13ffa17 	ldw	r4,-24(fp)
    f500:	100b883a 	mov	r5,r2
    f504:	000f34c0 	call	f34c <alt_up_ps2_read_data_byte_timeout>
    f508:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    f50c:	e0bffb17 	ldw	r2,-20(fp)
    f510:	10000226 	beq	r2,zero,f51c <alt_up_ps2_read_fd+0x68>
			return count;
    f514:	e0bffc17 	ldw	r2,-16(fp)
    f518:	00000406 	br	f52c <alt_up_ps2_read_fd+0x78>
		count++;
    f51c:	e0bffc17 	ldw	r2,-16(fp)
    f520:	10800044 	addi	r2,r2,1
    f524:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    f528:	e0bffc17 	ldw	r2,-16(fp)
}
    f52c:	e037883a 	mov	sp,fp
    f530:	dfc00117 	ldw	ra,4(sp)
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00204 	addi	sp,sp,8
    f53c:	f800283a 	ret

0000f540 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f540:	defff804 	addi	sp,sp,-32
    f544:	dfc00715 	stw	ra,28(sp)
    f548:	df000615 	stw	fp,24(sp)
    f54c:	df000604 	addi	fp,sp,24
    f550:	e13ffd15 	stw	r4,-12(fp)
    f554:	e17ffe15 	stw	r5,-8(fp)
    f558:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f55c:	e0bffd17 	ldw	r2,-12(fp)
    f560:	10800017 	ldw	r2,0(r2)
    f564:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    f568:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    f56c:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    f570:	00001006 	br	f5b4 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    f574:	e0bffe17 	ldw	r2,-8(fp)
    f578:	10c00044 	addi	r3,r2,1
    f57c:	e0fffe15 	stw	r3,-8(fp)
    f580:	10800003 	ldbu	r2,0(r2)
    f584:	10803fcc 	andi	r2,r2,255
    f588:	e13ffb17 	ldw	r4,-20(fp)
    f58c:	100b883a 	mov	r5,r2
    f590:	000f2040 	call	f204 <alt_up_ps2_write_data_byte>
    f594:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    f598:	e0bffc17 	ldw	r2,-16(fp)
    f59c:	10000226 	beq	r2,zero,f5a8 <alt_up_ps2_write_fd+0x68>
			return count;
    f5a0:	e0bffa17 	ldw	r2,-24(fp)
    f5a4:	00000706 	br	f5c4 <alt_up_ps2_write_fd+0x84>
		count++;
    f5a8:	e0bffa17 	ldw	r2,-24(fp)
    f5ac:	10800044 	addi	r2,r2,1
    f5b0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    f5b4:	e0fffa17 	ldw	r3,-24(fp)
    f5b8:	e0bfff17 	ldw	r2,-4(fp)
    f5bc:	18bfed16 	blt	r3,r2,f574 <__alt_mem_Flash_flash_data+0xf400f574>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    f5c0:	e0bffa17 	ldw	r2,-24(fp)
}
    f5c4:	e037883a 	mov	sp,fp
    f5c8:	dfc00117 	ldw	ra,4(sp)
    f5cc:	df000017 	ldw	fp,0(sp)
    f5d0:	dec00204 	addi	sp,sp,8
    f5d4:	f800283a 	ret

0000f5d8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    f5d8:	defffc04 	addi	sp,sp,-16
    f5dc:	dfc00315 	stw	ra,12(sp)
    f5e0:	df000215 	stw	fp,8(sp)
    f5e4:	df000204 	addi	fp,sp,8
    f5e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    f5ec:	e13fff17 	ldw	r4,-4(fp)
    f5f0:	01400074 	movhi	r5,1
    f5f4:	294d2204 	addi	r5,r5,13448
    f5f8:	000ff940 	call	ff94 <alt_find_dev>
    f5fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f600:	e0bffe17 	ldw	r2,-8(fp)
}
    f604:	e037883a 	mov	sp,fp
    f608:	dfc00117 	ldw	ra,4(sp)
    f60c:	df000017 	ldw	fp,0(sp)
    f610:	dec00204 	addi	sp,sp,8
    f614:	f800283a 	ret

0000f618 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f618:	defffd04 	addi	sp,sp,-12
    f61c:	df000215 	stw	fp,8(sp)
    f620:	df000204 	addi	fp,sp,8
    f624:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f628:	e0bfff17 	ldw	r2,-4(fp)
    f62c:	10800a17 	ldw	r2,40(r2)
    f630:	10800104 	addi	r2,r2,4
    f634:	10800037 	ldwio	r2,0(r2)
    f638:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f63c:	e0bffe17 	ldw	r2,-8(fp)
    f640:	10800054 	ori	r2,r2,1
    f644:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f648:	e0bfff17 	ldw	r2,-4(fp)
    f64c:	10800a17 	ldw	r2,40(r2)
    f650:	10800104 	addi	r2,r2,4
    f654:	1007883a 	mov	r3,r2
    f658:	e0bffe17 	ldw	r2,-8(fp)
    f65c:	18800035 	stwio	r2,0(r3)
}
    f660:	e037883a 	mov	sp,fp
    f664:	df000017 	ldw	fp,0(sp)
    f668:	dec00104 	addi	sp,sp,4
    f66c:	f800283a 	ret

0000f670 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f670:	defffd04 	addi	sp,sp,-12
    f674:	df000215 	stw	fp,8(sp)
    f678:	df000204 	addi	fp,sp,8
    f67c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f680:	e0bfff17 	ldw	r2,-4(fp)
    f684:	10800a17 	ldw	r2,40(r2)
    f688:	10800104 	addi	r2,r2,4
    f68c:	10800037 	ldwio	r2,0(r2)
    f690:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f694:	e0fffe17 	ldw	r3,-8(fp)
    f698:	00bfff84 	movi	r2,-2
    f69c:	1884703a 	and	r2,r3,r2
    f6a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f6a4:	e0bfff17 	ldw	r2,-4(fp)
    f6a8:	10800a17 	ldw	r2,40(r2)
    f6ac:	10800104 	addi	r2,r2,4
    f6b0:	1007883a 	mov	r3,r2
    f6b4:	e0bffe17 	ldw	r2,-8(fp)
    f6b8:	18800035 	stwio	r2,0(r3)
}
    f6bc:	e037883a 	mov	sp,fp
    f6c0:	df000017 	ldw	fp,0(sp)
    f6c4:	dec00104 	addi	sp,sp,4
    f6c8:	f800283a 	ret

0000f6cc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f6cc:	defffd04 	addi	sp,sp,-12
    f6d0:	df000215 	stw	fp,8(sp)
    f6d4:	df000204 	addi	fp,sp,8
    f6d8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f6dc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f6e0:	e0bfff17 	ldw	r2,-4(fp)
    f6e4:	10800a17 	ldw	r2,40(r2)
    f6e8:	10800084 	addi	r2,r2,2
    f6ec:	1080002b 	ldhuio	r2,0(r2)
    f6f0:	10bfffcc 	andi	r2,r2,65535
    f6f4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f6f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f6fc:	e037883a 	mov	sp,fp
    f700:	df000017 	ldw	fp,0(sp)
    f704:	dec00104 	addi	sp,sp,4
    f708:	f800283a 	ret

0000f70c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f70c:	defffd04 	addi	sp,sp,-12
    f710:	df000215 	stw	fp,8(sp)
    f714:	df000204 	addi	fp,sp,8
    f718:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f71c:	e0bfff17 	ldw	r2,-4(fp)
    f720:	10800a17 	ldw	r2,40(r2)
    f724:	10800104 	addi	r2,r2,4
    f728:	10800037 	ldwio	r2,0(r2)
    f72c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f730:	e0bffe17 	ldw	r2,-8(fp)
    f734:	1004d43a 	srli	r2,r2,16
}
    f738:	e037883a 	mov	sp,fp
    f73c:	df000017 	ldw	fp,0(sp)
    f740:	dec00104 	addi	sp,sp,4
    f744:	f800283a 	ret

0000f748 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f748:	defffd04 	addi	sp,sp,-12
    f74c:	df000215 	stw	fp,8(sp)
    f750:	df000204 	addi	fp,sp,8
    f754:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f758:	e0bfff17 	ldw	r2,-4(fp)
    f75c:	1080800c 	andi	r2,r2,512
    f760:	1004d27a 	srli	r2,r2,9
    f764:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    f768:	e0bffe17 	ldw	r2,-8(fp)
    f76c:	10000226 	beq	r2,zero,f778 <alt_up_rs232_check_parity+0x30>
    f770:	00bfffc4 	movi	r2,-1
    f774:	00000106 	br	f77c <alt_up_rs232_check_parity+0x34>
    f778:	0005883a 	mov	r2,zero
}
    f77c:	e037883a 	mov	sp,fp
    f780:	df000017 	ldw	fp,0(sp)
    f784:	dec00104 	addi	sp,sp,4
    f788:	f800283a 	ret

0000f78c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f78c:	defffd04 	addi	sp,sp,-12
    f790:	df000215 	stw	fp,8(sp)
    f794:	df000204 	addi	fp,sp,8
    f798:	e13ffe15 	stw	r4,-8(fp)
    f79c:	2805883a 	mov	r2,r5
    f7a0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f7a4:	e0bffe17 	ldw	r2,-8(fp)
    f7a8:	10800a17 	ldw	r2,40(r2)
    f7ac:	1007883a 	mov	r3,r2
    f7b0:	e0bfff03 	ldbu	r2,-4(fp)
    f7b4:	18800035 	stwio	r2,0(r3)
	return 0;
    f7b8:	0005883a 	mov	r2,zero
}
    f7bc:	e037883a 	mov	sp,fp
    f7c0:	df000017 	ldw	fp,0(sp)
    f7c4:	dec00104 	addi	sp,sp,4
    f7c8:	f800283a 	ret

0000f7cc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f7cc:	defffa04 	addi	sp,sp,-24
    f7d0:	dfc00515 	stw	ra,20(sp)
    f7d4:	df000415 	stw	fp,16(sp)
    f7d8:	df000404 	addi	fp,sp,16
    f7dc:	e13ffd15 	stw	r4,-12(fp)
    f7e0:	e17ffe15 	stw	r5,-8(fp)
    f7e4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f7e8:	e0bffd17 	ldw	r2,-12(fp)
    f7ec:	10800a17 	ldw	r2,40(r2)
    f7f0:	10800037 	ldwio	r2,0(r2)
    f7f4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f7f8:	e0bffc17 	ldw	r2,-16(fp)
    f7fc:	1007883a 	mov	r3,r2
    f800:	e0bffe17 	ldw	r2,-8(fp)
    f804:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f808:	e13ffc17 	ldw	r4,-16(fp)
    f80c:	000f7480 	call	f748 <alt_up_rs232_check_parity>
    f810:	1007883a 	mov	r3,r2
    f814:	e0bfff17 	ldw	r2,-4(fp)
    f818:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    f81c:	e0bffc17 	ldw	r2,-16(fp)
    f820:	10a0000c 	andi	r2,r2,32768
    f824:	1004d3fa 	srli	r2,r2,15
    f828:	10bfffc4 	addi	r2,r2,-1
}
    f82c:	e037883a 	mov	sp,fp
    f830:	dfc00117 	ldw	ra,4(sp)
    f834:	df000017 	ldw	fp,0(sp)
    f838:	dec00204 	addi	sp,sp,8
    f83c:	f800283a 	ret

0000f840 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f840:	defff804 	addi	sp,sp,-32
    f844:	dfc00715 	stw	ra,28(sp)
    f848:	df000615 	stw	fp,24(sp)
    f84c:	df000604 	addi	fp,sp,24
    f850:	e13ffd15 	stw	r4,-12(fp)
    f854:	e17ffe15 	stw	r5,-8(fp)
    f858:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	10800017 	ldw	r2,0(r2)
    f864:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f868:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f86c:	00000e06 	br	f8a8 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    f870:	e0bffe17 	ldw	r2,-8(fp)
    f874:	10c00044 	addi	r3,r2,1
    f878:	e0fffe15 	stw	r3,-8(fp)
    f87c:	e0fffc04 	addi	r3,fp,-16
    f880:	e13ffb17 	ldw	r4,-20(fp)
    f884:	100b883a 	mov	r5,r2
    f888:	180d883a 	mov	r6,r3
    f88c:	000f7cc0 	call	f7cc <alt_up_rs232_read_data>
    f890:	1000041e 	bne	r2,zero,f8a4 <alt_up_rs232_read_fd+0x64>
			count++;
    f894:	e0bffa17 	ldw	r2,-24(fp)
    f898:	10800044 	addi	r2,r2,1
    f89c:	e0bffa15 	stw	r2,-24(fp)
    f8a0:	00000106 	br	f8a8 <alt_up_rs232_read_fd+0x68>
		else
			break;
    f8a4:	00000406 	br	f8b8 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f8a8:	e0bfff17 	ldw	r2,-4(fp)
    f8ac:	10ffffc4 	addi	r3,r2,-1
    f8b0:	e0ffff15 	stw	r3,-4(fp)
    f8b4:	103fee1e 	bne	r2,zero,f870 <__alt_mem_Flash_flash_data+0xf400f870>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f8b8:	e0bffa17 	ldw	r2,-24(fp)
}
    f8bc:	e037883a 	mov	sp,fp
    f8c0:	dfc00117 	ldw	ra,4(sp)
    f8c4:	df000017 	ldw	fp,0(sp)
    f8c8:	dec00204 	addi	sp,sp,8
    f8cc:	f800283a 	ret

0000f8d0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f8d0:	defff904 	addi	sp,sp,-28
    f8d4:	dfc00615 	stw	ra,24(sp)
    f8d8:	df000515 	stw	fp,20(sp)
    f8dc:	df000504 	addi	fp,sp,20
    f8e0:	e13ffd15 	stw	r4,-12(fp)
    f8e4:	e17ffe15 	stw	r5,-8(fp)
    f8e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f8ec:	e0bffd17 	ldw	r2,-12(fp)
    f8f0:	10800017 	ldw	r2,0(r2)
    f8f4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f8f8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f8fc:	00000f06 	br	f93c <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	10800003 	ldbu	r2,0(r2)
    f908:	10803fcc 	andi	r2,r2,255
    f90c:	e13ffc17 	ldw	r4,-16(fp)
    f910:	100b883a 	mov	r5,r2
    f914:	000f78c0 	call	f78c <alt_up_rs232_write_data>
    f918:	1000071e 	bne	r2,zero,f938 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    f91c:	e0bffb17 	ldw	r2,-20(fp)
    f920:	10800044 	addi	r2,r2,1
    f924:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f928:	e0bffe17 	ldw	r2,-8(fp)
    f92c:	10800044 	addi	r2,r2,1
    f930:	e0bffe15 	stw	r2,-8(fp)
    f934:	00000106 	br	f93c <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    f938:	00000406 	br	f94c <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f93c:	e0bfff17 	ldw	r2,-4(fp)
    f940:	10ffffc4 	addi	r3,r2,-1
    f944:	e0ffff15 	stw	r3,-4(fp)
    f948:	103fed1e 	bne	r2,zero,f900 <__alt_mem_Flash_flash_data+0xf400f900>
			ptr++;
		}
		else
			break;
	}
	return count;
    f94c:	e0bffb17 	ldw	r2,-20(fp)
}
    f950:	e037883a 	mov	sp,fp
    f954:	dfc00117 	ldw	ra,4(sp)
    f958:	df000017 	ldw	fp,0(sp)
    f95c:	dec00204 	addi	sp,sp,8
    f960:	f800283a 	ret

0000f964 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f964:	defffc04 	addi	sp,sp,-16
    f968:	dfc00315 	stw	ra,12(sp)
    f96c:	df000215 	stw	fp,8(sp)
    f970:	df000204 	addi	fp,sp,8
    f974:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f978:	e13fff17 	ldw	r4,-4(fp)
    f97c:	01400074 	movhi	r5,1
    f980:	294d2204 	addi	r5,r5,13448
    f984:	000ff940 	call	ff94 <alt_find_dev>
    f988:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f98c:	e0bffe17 	ldw	r2,-8(fp)
}
    f990:	e037883a 	mov	sp,fp
    f994:	dfc00117 	ldw	ra,4(sp)
    f998:	df000017 	ldw	fp,0(sp)
    f99c:	dec00204 	addi	sp,sp,8
    f9a0:	f800283a 	ret

0000f9a4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f9a4:	defffc04 	addi	sp,sp,-16
    f9a8:	dfc00315 	stw	ra,12(sp)
    f9ac:	df000215 	stw	fp,8(sp)
    f9b0:	df000204 	addi	fp,sp,8
    f9b4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f9b8:	e0bfff17 	ldw	r2,-4(fp)
    f9bc:	10800217 	ldw	r2,8(r2)
    f9c0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    f9c4:	00000b06 	br	f9f4 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f9c8:	e13ffe17 	ldw	r4,-8(fp)
    f9cc:	01400074 	movhi	r5,1
    f9d0:	29459304 	addi	r5,r5,5708
    f9d4:	0010ea00 	call	10ea0 <strcmp>
    f9d8:	1000031e 	bne	r2,zero,f9e8 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    f9dc:	e0bffe17 	ldw	r2,-8(fp)
    f9e0:	10000005 	stb	zero,0(r2)
			break;
    f9e4:	00000906 	br	fa0c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f9e8:	e0bffe17 	ldw	r2,-8(fp)
    f9ec:	10800044 	addi	r2,r2,1
    f9f0:	e0bffe15 	stw	r2,-8(fp)
    f9f4:	e0bffe17 	ldw	r2,-8(fp)
    f9f8:	10800003 	ldbu	r2,0(r2)
    f9fc:	10803fcc 	andi	r2,r2,255
    fa00:	1080201c 	xori	r2,r2,128
    fa04:	10bfe004 	addi	r2,r2,-128
    fa08:	103fef1e 	bne	r2,zero,f9c8 <__alt_mem_Flash_flash_data+0xf400f9c8>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    fa0c:	0001883a 	nop
}
    fa10:	e037883a 	mov	sp,fp
    fa14:	dfc00117 	ldw	ra,4(sp)
    fa18:	df000017 	ldw	fp,0(sp)
    fa1c:	dec00204 	addi	sp,sp,8
    fa20:	f800283a 	ret

0000fa24 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    fa24:	defffc04 	addi	sp,sp,-16
    fa28:	dfc00315 	stw	ra,12(sp)
    fa2c:	df000215 	stw	fp,8(sp)
    fa30:	df000204 	addi	fp,sp,8
    fa34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    fa38:	e13fff17 	ldw	r4,-4(fp)
    fa3c:	01400074 	movhi	r5,1
    fa40:	294d2204 	addi	r5,r5,13448
    fa44:	000ff940 	call	ff94 <alt_find_dev>
    fa48:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    fa4c:	e0bffe17 	ldw	r2,-8(fp)
}
    fa50:	e037883a 	mov	sp,fp
    fa54:	dfc00117 	ldw	ra,4(sp)
    fa58:	df000017 	ldw	fp,0(sp)
    fa5c:	dec00204 	addi	sp,sp,8
    fa60:	f800283a 	ret

0000fa64 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    fa64:	defffa04 	addi	sp,sp,-24
    fa68:	df000515 	stw	fp,20(sp)
    fa6c:	df000504 	addi	fp,sp,20
    fa70:	e13ffc15 	stw	r4,-16(fp)
    fa74:	2805883a 	mov	r2,r5
    fa78:	e1bffe15 	stw	r6,-8(fp)
    fa7c:	e1ffff15 	stw	r7,-4(fp)
    fa80:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    fa84:	e0bffc17 	ldw	r2,-16(fp)
    fa88:	10800c17 	ldw	r2,48(r2)
    fa8c:	e0fffe17 	ldw	r3,-8(fp)
    fa90:	1880042e 	bgeu	r3,r2,faa4 <alt_up_char_buffer_draw+0x40>
    fa94:	e0bffc17 	ldw	r2,-16(fp)
    fa98:	10800d17 	ldw	r2,52(r2)
    fa9c:	e0ffff17 	ldw	r3,-4(fp)
    faa0:	18800236 	bltu	r3,r2,faac <alt_up_char_buffer_draw+0x48>
		return -1;
    faa4:	00bfffc4 	movi	r2,-1
    faa8:	00001d06 	br	fb20 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    faac:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	10c00f17 	ldw	r3,60(r2)
    fab8:	e0bffe17 	ldw	r2,-8(fp)
    fabc:	1884703a 	and	r2,r3,r2
    fac0:	e0fffc17 	ldw	r3,-16(fp)
    fac4:	18c00e17 	ldw	r3,56(r3)
    fac8:	10c4983a 	sll	r2,r2,r3
    facc:	e0fffb17 	ldw	r3,-20(fp)
    fad0:	1884b03a 	or	r2,r3,r2
    fad4:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    fad8:	e0bffc17 	ldw	r2,-16(fp)
    fadc:	10c01117 	ldw	r3,68(r2)
    fae0:	e0bfff17 	ldw	r2,-4(fp)
    fae4:	1884703a 	and	r2,r3,r2
    fae8:	e0fffc17 	ldw	r3,-16(fp)
    faec:	18c01017 	ldw	r3,64(r3)
    faf0:	10c4983a 	sll	r2,r2,r3
    faf4:	e0fffb17 	ldw	r3,-20(fp)
    faf8:	1884b03a 	or	r2,r3,r2
    fafc:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    fb00:	e0bffc17 	ldw	r2,-16(fp)
    fb04:	10c00b17 	ldw	r3,44(r2)
    fb08:	e0bffb17 	ldw	r2,-20(fp)
    fb0c:	1885883a 	add	r2,r3,r2
    fb10:	1007883a 	mov	r3,r2
    fb14:	e0bffd03 	ldbu	r2,-12(fp)
    fb18:	18800025 	stbio	r2,0(r3)

	return 0;
    fb1c:	0005883a 	mov	r2,zero
}
    fb20:	e037883a 	mov	sp,fp
    fb24:	df000017 	ldw	fp,0(sp)
    fb28:	dec00104 	addi	sp,sp,4
    fb2c:	f800283a 	ret

0000fb30 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    fb30:	defffa04 	addi	sp,sp,-24
    fb34:	df000515 	stw	fp,20(sp)
    fb38:	df000504 	addi	fp,sp,20
    fb3c:	e13ffc15 	stw	r4,-16(fp)
    fb40:	e17ffd15 	stw	r5,-12(fp)
    fb44:	e1bffe15 	stw	r6,-8(fp)
    fb48:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    fb4c:	e0bffc17 	ldw	r2,-16(fp)
    fb50:	10800c17 	ldw	r2,48(r2)
    fb54:	e0fffe17 	ldw	r3,-8(fp)
    fb58:	1880042e 	bgeu	r3,r2,fb6c <alt_up_char_buffer_string+0x3c>
    fb5c:	e0bffc17 	ldw	r2,-16(fp)
    fb60:	10800d17 	ldw	r2,52(r2)
    fb64:	e0ffff17 	ldw	r3,-4(fp)
    fb68:	18800236 	bltu	r3,r2,fb74 <alt_up_char_buffer_string+0x44>
		return -1;
    fb6c:	00bfffc4 	movi	r2,-1
    fb70:	00002b06 	br	fc20 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    fb74:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    fb78:	e0bffc17 	ldw	r2,-16(fp)
    fb7c:	10801017 	ldw	r2,64(r2)
    fb80:	1007883a 	mov	r3,r2
    fb84:	e0bfff17 	ldw	r2,-4(fp)
    fb88:	10c6983a 	sll	r3,r2,r3
    fb8c:	e0bffe17 	ldw	r2,-8(fp)
    fb90:	1885883a 	add	r2,r3,r2
    fb94:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    fb98:	00001a06 	br	fc04 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    fb9c:	e0bffc17 	ldw	r2,-16(fp)
    fba0:	10c00b17 	ldw	r3,44(r2)
    fba4:	e0bffb17 	ldw	r2,-20(fp)
    fba8:	1885883a 	add	r2,r3,r2
    fbac:	1007883a 	mov	r3,r2
    fbb0:	e0bffd17 	ldw	r2,-12(fp)
    fbb4:	10800003 	ldbu	r2,0(r2)
    fbb8:	10803fcc 	andi	r2,r2,255
    fbbc:	1080201c 	xori	r2,r2,128
    fbc0:	10bfe004 	addi	r2,r2,-128
    fbc4:	18800025 	stbio	r2,0(r3)
		++ptr;
    fbc8:	e0bffd17 	ldw	r2,-12(fp)
    fbcc:	10800044 	addi	r2,r2,1
    fbd0:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    fbd4:	e0bffe17 	ldw	r2,-8(fp)
    fbd8:	10800044 	addi	r2,r2,1
    fbdc:	e0bffe15 	stw	r2,-8(fp)
    fbe0:	e0bffc17 	ldw	r2,-16(fp)
    fbe4:	10800c17 	ldw	r2,48(r2)
    fbe8:	e0fffe17 	ldw	r3,-8(fp)
    fbec:	18800236 	bltu	r3,r2,fbf8 <alt_up_char_buffer_string+0xc8>
			return -1;
    fbf0:	00bfffc4 	movi	r2,-1
    fbf4:	00000a06 	br	fc20 <alt_up_char_buffer_string+0xf0>
		++offset;
    fbf8:	e0bffb17 	ldw	r2,-20(fp)
    fbfc:	10800044 	addi	r2,r2,1
    fc00:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    fc04:	e0bffd17 	ldw	r2,-12(fp)
    fc08:	10800003 	ldbu	r2,0(r2)
    fc0c:	10803fcc 	andi	r2,r2,255
    fc10:	1080201c 	xori	r2,r2,128
    fc14:	10bfe004 	addi	r2,r2,-128
    fc18:	103fe01e 	bne	r2,zero,fb9c <__alt_mem_Flash_flash_data+0xf400fb9c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    fc1c:	0005883a 	mov	r2,zero
}
    fc20:	e037883a 	mov	sp,fp
    fc24:	df000017 	ldw	fp,0(sp)
    fc28:	dec00104 	addi	sp,sp,4
    fc2c:	f800283a 	ret

0000fc30 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    fc30:	defffe04 	addi	sp,sp,-8
    fc34:	df000115 	stw	fp,4(sp)
    fc38:	df000104 	addi	fp,sp,4
    fc3c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    fc40:	e0bfff17 	ldw	r2,-4(fp)
    fc44:	10800a17 	ldw	r2,40(r2)
    fc48:	10800084 	addi	r2,r2,2
    fc4c:	1007883a 	mov	r3,r2
    fc50:	00800044 	movi	r2,1
    fc54:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    fc58:	0001883a 	nop
    fc5c:	e0bfff17 	ldw	r2,-4(fp)
    fc60:	10800a17 	ldw	r2,40(r2)
    fc64:	10800084 	addi	r2,r2,2
    fc68:	10800023 	ldbuio	r2,0(r2)
    fc6c:	10803fcc 	andi	r2,r2,255
    fc70:	1080004c 	andi	r2,r2,1
    fc74:	103ff91e 	bne	r2,zero,fc5c <__alt_mem_Flash_flash_data+0xf400fc5c>
	return 0;
    fc78:	0005883a 	mov	r2,zero
}
    fc7c:	e037883a 	mov	sp,fp
    fc80:	df000017 	ldw	fp,0(sp)
    fc84:	dec00104 	addi	sp,sp,4
    fc88:	f800283a 	ret

0000fc8c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fc8c:	defff504 	addi	sp,sp,-44
    fc90:	df000a15 	stw	fp,40(sp)
    fc94:	df000a04 	addi	fp,sp,40
    fc98:	e13ffc15 	stw	r4,-16(fp)
    fc9c:	e17ffd15 	stw	r5,-12(fp)
    fca0:	e1bffe15 	stw	r6,-8(fp)
    fca4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fca8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fcac:	00800074 	movhi	r2,1
    fcb0:	10953304 	addi	r2,r2,21708
    fcb4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    fcb8:	10003f26 	beq	r2,zero,fdb8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    fcbc:	e0bffc17 	ldw	r2,-16(fp)
    fcc0:	10003b26 	beq	r2,zero,fdb0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    fcc4:	e0bffc17 	ldw	r2,-16(fp)
    fcc8:	e0fffe17 	ldw	r3,-8(fp)
    fccc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fcd0:	e0bffc17 	ldw	r2,-16(fp)
    fcd4:	e0ffff17 	ldw	r3,-4(fp)
    fcd8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcdc:	0005303a 	rdctl	r2,status
    fce0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fce4:	e0fff817 	ldw	r3,-32(fp)
    fce8:	00bfff84 	movi	r2,-2
    fcec:	1884703a 	and	r2,r3,r2
    fcf0:	1001703a 	wrctl	status,r2
  
  return context;
    fcf4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    fcf8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fcfc:	00800074 	movhi	r2,1
    fd00:	10953404 	addi	r2,r2,21712
    fd04:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    fd08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fd0c:	e0fffd17 	ldw	r3,-12(fp)
    fd10:	e0bff617 	ldw	r2,-40(fp)
    fd14:	1885883a 	add	r2,r3,r2
    fd18:	10c00044 	addi	r3,r2,1
    fd1c:	e0bffc17 	ldw	r2,-16(fp)
    fd20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10c00217 	ldw	r3,8(r2)
    fd2c:	e0bff617 	ldw	r2,-40(fp)
    fd30:	1880042e 	bgeu	r3,r2,fd44 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    fd34:	e0bffc17 	ldw	r2,-16(fp)
    fd38:	00c00044 	movi	r3,1
    fd3c:	10c00405 	stb	r3,16(r2)
    fd40:	00000206 	br	fd4c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fd4c:	e0fffc17 	ldw	r3,-16(fp)
    fd50:	00800074 	movhi	r2,1
    fd54:	108d4704 	addi	r2,r2,13596
    fd58:	e0bff915 	stw	r2,-28(fp)
    fd5c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fd60:	e0bffa17 	ldw	r2,-24(fp)
    fd64:	e0fff917 	ldw	r3,-28(fp)
    fd68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fd6c:	e0bff917 	ldw	r2,-28(fp)
    fd70:	10c00017 	ldw	r3,0(r2)
    fd74:	e0bffa17 	ldw	r2,-24(fp)
    fd78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fd7c:	e0bff917 	ldw	r2,-28(fp)
    fd80:	10800017 	ldw	r2,0(r2)
    fd84:	e0fffa17 	ldw	r3,-24(fp)
    fd88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fd8c:	e0bff917 	ldw	r2,-28(fp)
    fd90:	e0fffa17 	ldw	r3,-24(fp)
    fd94:	10c00015 	stw	r3,0(r2)
    fd98:	e0bff717 	ldw	r2,-36(fp)
    fd9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fda0:	e0bffb17 	ldw	r2,-20(fp)
    fda4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    fda8:	0005883a 	mov	r2,zero
    fdac:	00000306 	br	fdbc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    fdb0:	00bffa84 	movi	r2,-22
    fdb4:	00000106 	br	fdbc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    fdb8:	00bfde84 	movi	r2,-134
  }
}
    fdbc:	e037883a 	mov	sp,fp
    fdc0:	df000017 	ldw	fp,0(sp)
    fdc4:	dec00104 	addi	sp,sp,4
    fdc8:	f800283a 	ret

0000fdcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fdcc:	deffff04 	addi	sp,sp,-4
    fdd0:	df000015 	stw	fp,0(sp)
    fdd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fdd8:	e037883a 	mov	sp,fp
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00104 	addi	sp,sp,4
    fde4:	f800283a 	ret

0000fde8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fde8:	defffe04 	addi	sp,sp,-8
    fdec:	dfc00115 	stw	ra,4(sp)
    fdf0:	df000015 	stw	fp,0(sp)
    fdf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fdf8:	00800074 	movhi	r2,1
    fdfc:	108d2504 	addi	r2,r2,13460
    fe00:	10800017 	ldw	r2,0(r2)
    fe04:	10000526 	beq	r2,zero,fe1c <alt_get_errno+0x34>
    fe08:	00800074 	movhi	r2,1
    fe0c:	108d2504 	addi	r2,r2,13460
    fe10:	10800017 	ldw	r2,0(r2)
    fe14:	103ee83a 	callr	r2
    fe18:	00000206 	br	fe24 <alt_get_errno+0x3c>
    fe1c:	00800074 	movhi	r2,1
    fe20:	10951504 	addi	r2,r2,21588
}
    fe24:	e037883a 	mov	sp,fp
    fe28:	dfc00117 	ldw	ra,4(sp)
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00204 	addi	sp,sp,8
    fe34:	f800283a 	ret

0000fe38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fe38:	defffa04 	addi	sp,sp,-24
    fe3c:	dfc00515 	stw	ra,20(sp)
    fe40:	df000415 	stw	fp,16(sp)
    fe44:	df000404 	addi	fp,sp,16
    fe48:	e13ffe15 	stw	r4,-8(fp)
    fe4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fe50:	e0bffe17 	ldw	r2,-8(fp)
    fe54:	10000326 	beq	r2,zero,fe64 <alt_dev_llist_insert+0x2c>
    fe58:	e0bffe17 	ldw	r2,-8(fp)
    fe5c:	10800217 	ldw	r2,8(r2)
    fe60:	1000061e 	bne	r2,zero,fe7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fe64:	000fde80 	call	fde8 <alt_get_errno>
    fe68:	1007883a 	mov	r3,r2
    fe6c:	00800584 	movi	r2,22
    fe70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fe74:	00bffa84 	movi	r2,-22
    fe78:	00001306 	br	fec8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fe7c:	e0bffe17 	ldw	r2,-8(fp)
    fe80:	e0ffff17 	ldw	r3,-4(fp)
    fe84:	e0fffc15 	stw	r3,-16(fp)
    fe88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fe8c:	e0bffd17 	ldw	r2,-12(fp)
    fe90:	e0fffc17 	ldw	r3,-16(fp)
    fe94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fe98:	e0bffc17 	ldw	r2,-16(fp)
    fe9c:	10c00017 	ldw	r3,0(r2)
    fea0:	e0bffd17 	ldw	r2,-12(fp)
    fea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fea8:	e0bffc17 	ldw	r2,-16(fp)
    feac:	10800017 	ldw	r2,0(r2)
    feb0:	e0fffd17 	ldw	r3,-12(fp)
    feb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    feb8:	e0bffc17 	ldw	r2,-16(fp)
    febc:	e0fffd17 	ldw	r3,-12(fp)
    fec0:	10c00015 	stw	r3,0(r2)

  return 0;  
    fec4:	0005883a 	mov	r2,zero
}
    fec8:	e037883a 	mov	sp,fp
    fecc:	dfc00117 	ldw	ra,4(sp)
    fed0:	df000017 	ldw	fp,0(sp)
    fed4:	dec00204 	addi	sp,sp,8
    fed8:	f800283a 	ret

0000fedc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fedc:	defffd04 	addi	sp,sp,-12
    fee0:	dfc00215 	stw	ra,8(sp)
    fee4:	df000115 	stw	fp,4(sp)
    fee8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    feec:	00800074 	movhi	r2,1
    fef0:	10848904 	addi	r2,r2,4644
    fef4:	e0bfff15 	stw	r2,-4(fp)
    fef8:	00000606 	br	ff14 <_do_ctors+0x38>
        (*ctor) (); 
    fefc:	e0bfff17 	ldw	r2,-4(fp)
    ff00:	10800017 	ldw	r2,0(r2)
    ff04:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ff08:	e0bfff17 	ldw	r2,-4(fp)
    ff0c:	10bfff04 	addi	r2,r2,-4
    ff10:	e0bfff15 	stw	r2,-4(fp)
    ff14:	e0ffff17 	ldw	r3,-4(fp)
    ff18:	00800074 	movhi	r2,1
    ff1c:	10848a04 	addi	r2,r2,4648
    ff20:	18bff62e 	bgeu	r3,r2,fefc <__alt_mem_Flash_flash_data+0xf400fefc>
        (*ctor) (); 
}
    ff24:	e037883a 	mov	sp,fp
    ff28:	dfc00117 	ldw	ra,4(sp)
    ff2c:	df000017 	ldw	fp,0(sp)
    ff30:	dec00204 	addi	sp,sp,8
    ff34:	f800283a 	ret

0000ff38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ff38:	defffd04 	addi	sp,sp,-12
    ff3c:	dfc00215 	stw	ra,8(sp)
    ff40:	df000115 	stw	fp,4(sp)
    ff44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ff48:	00800074 	movhi	r2,1
    ff4c:	10848904 	addi	r2,r2,4644
    ff50:	e0bfff15 	stw	r2,-4(fp)
    ff54:	00000606 	br	ff70 <_do_dtors+0x38>
        (*dtor) (); 
    ff58:	e0bfff17 	ldw	r2,-4(fp)
    ff5c:	10800017 	ldw	r2,0(r2)
    ff60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ff64:	e0bfff17 	ldw	r2,-4(fp)
    ff68:	10bfff04 	addi	r2,r2,-4
    ff6c:	e0bfff15 	stw	r2,-4(fp)
    ff70:	e0ffff17 	ldw	r3,-4(fp)
    ff74:	00800074 	movhi	r2,1
    ff78:	10848a04 	addi	r2,r2,4648
    ff7c:	18bff62e 	bgeu	r3,r2,ff58 <__alt_mem_Flash_flash_data+0xf400ff58>
        (*dtor) (); 
}
    ff80:	e037883a 	mov	sp,fp
    ff84:	dfc00117 	ldw	ra,4(sp)
    ff88:	df000017 	ldw	fp,0(sp)
    ff8c:	dec00204 	addi	sp,sp,8
    ff90:	f800283a 	ret

0000ff94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ff94:	defffa04 	addi	sp,sp,-24
    ff98:	dfc00515 	stw	ra,20(sp)
    ff9c:	df000415 	stw	fp,16(sp)
    ffa0:	df000404 	addi	fp,sp,16
    ffa4:	e13ffe15 	stw	r4,-8(fp)
    ffa8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ffac:	e0bfff17 	ldw	r2,-4(fp)
    ffb0:	10800017 	ldw	r2,0(r2)
    ffb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ffb8:	e13ffe17 	ldw	r4,-8(fp)
    ffbc:	0001f500 	call	1f50 <strlen>
    ffc0:	10800044 	addi	r2,r2,1
    ffc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ffc8:	00000d06 	br	10000 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ffcc:	e0bffc17 	ldw	r2,-16(fp)
    ffd0:	10c00217 	ldw	r3,8(r2)
    ffd4:	e0bffd17 	ldw	r2,-12(fp)
    ffd8:	1809883a 	mov	r4,r3
    ffdc:	e17ffe17 	ldw	r5,-8(fp)
    ffe0:	100d883a 	mov	r6,r2
    ffe4:	0010e240 	call	10e24 <memcmp>
    ffe8:	1000021e 	bne	r2,zero,fff4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ffec:	e0bffc17 	ldw	r2,-16(fp)
    fff0:	00000706 	br	10010 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fff4:	e0bffc17 	ldw	r2,-16(fp)
    fff8:	10800017 	ldw	r2,0(r2)
    fffc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10000:	e0fffc17 	ldw	r3,-16(fp)
   10004:	e0bfff17 	ldw	r2,-4(fp)
   10008:	18bff01e 	bne	r3,r2,ffcc <__alt_mem_Flash_flash_data+0xf400ffcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1000c:	0005883a 	mov	r2,zero
}
   10010:	e037883a 	mov	sp,fp
   10014:	dfc00117 	ldw	ra,4(sp)
   10018:	df000017 	ldw	fp,0(sp)
   1001c:	dec00204 	addi	sp,sp,8
   10020:	f800283a 	ret

00010024 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10024:	defffe04 	addi	sp,sp,-8
   10028:	dfc00115 	stw	ra,4(sp)
   1002c:	df000015 	stw	fp,0(sp)
   10030:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10034:	0009883a 	mov	r4,zero
   10038:	01440004 	movi	r5,4096
   1003c:	0010cb00 	call	10cb0 <alt_icache_flush>
#endif
}
   10040:	e037883a 	mov	sp,fp
   10044:	dfc00117 	ldw	ra,4(sp)
   10048:	df000017 	ldw	fp,0(sp)
   1004c:	dec00204 	addi	sp,sp,8
   10050:	f800283a 	ret

00010054 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10054:	defff904 	addi	sp,sp,-28
   10058:	dfc00615 	stw	ra,24(sp)
   1005c:	df000515 	stw	fp,20(sp)
   10060:	df000504 	addi	fp,sp,20
   10064:	e13ffc15 	stw	r4,-16(fp)
   10068:	e17ffd15 	stw	r5,-12(fp)
   1006c:	e1bffe15 	stw	r6,-8(fp)
   10070:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10074:	e13ffd17 	ldw	r4,-12(fp)
   10078:	e17ffe17 	ldw	r5,-8(fp)
   1007c:	e1bfff17 	ldw	r6,-4(fp)
   10080:	00104580 	call	10458 <open>
   10084:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10088:	e0bffb17 	ldw	r2,-20(fp)
   1008c:	10001c16 	blt	r2,zero,10100 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10090:	00800074 	movhi	r2,1
   10094:	1087b004 	addi	r2,r2,7872
   10098:	e0fffb17 	ldw	r3,-20(fp)
   1009c:	18c00324 	muli	r3,r3,12
   100a0:	10c5883a 	add	r2,r2,r3
   100a4:	10c00017 	ldw	r3,0(r2)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   100b0:	00800074 	movhi	r2,1
   100b4:	1087b004 	addi	r2,r2,7872
   100b8:	e0fffb17 	ldw	r3,-20(fp)
   100bc:	18c00324 	muli	r3,r3,12
   100c0:	18c00104 	addi	r3,r3,4
   100c4:	10c5883a 	add	r2,r2,r3
   100c8:	10c00017 	ldw	r3,0(r2)
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   100d4:	00800074 	movhi	r2,1
   100d8:	1087b004 	addi	r2,r2,7872
   100dc:	e0fffb17 	ldw	r3,-20(fp)
   100e0:	18c00324 	muli	r3,r3,12
   100e4:	18c00204 	addi	r3,r3,8
   100e8:	10c5883a 	add	r2,r2,r3
   100ec:	10c00017 	ldw	r3,0(r2)
   100f0:	e0bffc17 	ldw	r2,-16(fp)
   100f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   100f8:	e13ffb17 	ldw	r4,-20(fp)
   100fc:	00052700 	call	5270 <alt_release_fd>
  }
} 
   10100:	e037883a 	mov	sp,fp
   10104:	dfc00117 	ldw	ra,4(sp)
   10108:	df000017 	ldw	fp,0(sp)
   1010c:	dec00204 	addi	sp,sp,8
   10110:	f800283a 	ret

00010114 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10114:	defffb04 	addi	sp,sp,-20
   10118:	dfc00415 	stw	ra,16(sp)
   1011c:	df000315 	stw	fp,12(sp)
   10120:	df000304 	addi	fp,sp,12
   10124:	e13ffd15 	stw	r4,-12(fp)
   10128:	e17ffe15 	stw	r5,-8(fp)
   1012c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10130:	01000074 	movhi	r4,1
   10134:	2107b304 	addi	r4,r4,7884
   10138:	e17ffd17 	ldw	r5,-12(fp)
   1013c:	01800044 	movi	r6,1
   10140:	01c07fc4 	movi	r7,511
   10144:	00100540 	call	10054 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10148:	01000074 	movhi	r4,1
   1014c:	2107b004 	addi	r4,r4,7872
   10150:	e17ffe17 	ldw	r5,-8(fp)
   10154:	000d883a 	mov	r6,zero
   10158:	01c07fc4 	movi	r7,511
   1015c:	00100540 	call	10054 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10160:	01000074 	movhi	r4,1
   10164:	2107b604 	addi	r4,r4,7896
   10168:	e17fff17 	ldw	r5,-4(fp)
   1016c:	01800044 	movi	r6,1
   10170:	01c07fc4 	movi	r7,511
   10174:	00100540 	call	10054 <alt_open_fd>
}  
   10178:	e037883a 	mov	sp,fp
   1017c:	dfc00117 	ldw	ra,4(sp)
   10180:	df000017 	ldw	fp,0(sp)
   10184:	dec00204 	addi	sp,sp,8
   10188:	f800283a 	ret

0001018c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1018c:	defff004 	addi	sp,sp,-64
   10190:	df000f15 	stw	fp,60(sp)
   10194:	df000f04 	addi	fp,sp,60
   10198:	e13ffd15 	stw	r4,-12(fp)
   1019c:	e17ffe15 	stw	r5,-8(fp)
   101a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   101a4:	00bffa84 	movi	r2,-22
   101a8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   101ac:	e0bffd17 	ldw	r2,-12(fp)
   101b0:	10800828 	cmpgeui	r2,r2,32
   101b4:	10005c1e 	bne	r2,zero,10328 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101b8:	0005303a 	rdctl	r2,status
   101bc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101c0:	e0fff317 	ldw	r3,-52(fp)
   101c4:	00bfff84 	movi	r2,-2
   101c8:	1884703a 	and	r2,r3,r2
   101cc:	1001703a 	wrctl	status,r2
  
  return context;
   101d0:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   101d4:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   101d8:	008000b4 	movhi	r2,2
   101dc:	1089c904 	addi	r2,r2,10020
   101e0:	e0fffd17 	ldw	r3,-12(fp)
   101e4:	180690fa 	slli	r3,r3,3
   101e8:	10c5883a 	add	r2,r2,r3
   101ec:	e0ffff17 	ldw	r3,-4(fp)
   101f0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   101f4:	008000b4 	movhi	r2,2
   101f8:	1089c904 	addi	r2,r2,10020
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	180690fa 	slli	r3,r3,3
   10204:	18c00104 	addi	r3,r3,4
   10208:	10c5883a 	add	r2,r2,r3
   1020c:	e0fffe17 	ldw	r3,-8(fp)
   10210:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	10001f26 	beq	r2,zero,10298 <alt_irq_register+0x10c>
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10224:	0005303a 	rdctl	r2,status
   10228:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1022c:	e0fff517 	ldw	r3,-44(fp)
   10230:	00bfff84 	movi	r2,-2
   10234:	1884703a 	and	r2,r3,r2
   10238:	1001703a 	wrctl	status,r2
  
  return context;
   1023c:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10240:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   10244:	e0bff417 	ldw	r2,-48(fp)
   10248:	00c00044 	movi	r3,1
   1024c:	1884983a 	sll	r2,r3,r2
   10250:	1007883a 	mov	r3,r2
   10254:	00800074 	movhi	r2,1
   10258:	10953204 	addi	r2,r2,21704
   1025c:	10800017 	ldw	r2,0(r2)
   10260:	1886b03a 	or	r3,r3,r2
   10264:	00800074 	movhi	r2,1
   10268:	10953204 	addi	r2,r2,21704
   1026c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10270:	00800074 	movhi	r2,1
   10274:	10953204 	addi	r2,r2,21704
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	100170fa 	wrctl	ienable,r2
   10280:	e0bff617 	ldw	r2,-40(fp)
   10284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10288:	e0bff717 	ldw	r2,-36(fp)
   1028c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10290:	0005883a 	mov	r2,zero
   10294:	00001f06 	br	10314 <alt_irq_register+0x188>
   10298:	e0bffd17 	ldw	r2,-12(fp)
   1029c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102a0:	0005303a 	rdctl	r2,status
   102a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102a8:	e0fff917 	ldw	r3,-28(fp)
   102ac:	00bfff84 	movi	r2,-2
   102b0:	1884703a 	and	r2,r3,r2
   102b4:	1001703a 	wrctl	status,r2
  
  return context;
   102b8:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   102bc:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   102c0:	e0bff817 	ldw	r2,-32(fp)
   102c4:	00c00044 	movi	r3,1
   102c8:	1884983a 	sll	r2,r3,r2
   102cc:	0084303a 	nor	r2,zero,r2
   102d0:	1007883a 	mov	r3,r2
   102d4:	00800074 	movhi	r2,1
   102d8:	10953204 	addi	r2,r2,21704
   102dc:	10800017 	ldw	r2,0(r2)
   102e0:	1886703a 	and	r3,r3,r2
   102e4:	00800074 	movhi	r2,1
   102e8:	10953204 	addi	r2,r2,21704
   102ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   102f0:	00800074 	movhi	r2,1
   102f4:	10953204 	addi	r2,r2,21704
   102f8:	10800017 	ldw	r2,0(r2)
   102fc:	100170fa 	wrctl	ienable,r2
   10300:	e0bffa17 	ldw	r2,-24(fp)
   10304:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10308:	e0bffb17 	ldw	r2,-20(fp)
   1030c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10310:	0005883a 	mov	r2,zero
   10314:	e0bff115 	stw	r2,-60(fp)
   10318:	e0bff217 	ldw	r2,-56(fp)
   1031c:	e0bffc15 	stw	r2,-16(fp)
   10320:	e0bffc17 	ldw	r2,-16(fp)
   10324:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   10328:	e0bff117 	ldw	r2,-60(fp)
}
   1032c:	e037883a 	mov	sp,fp
   10330:	df000017 	ldw	fp,0(sp)
   10334:	dec00104 	addi	sp,sp,4
   10338:	f800283a 	ret

0001033c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1033c:	defffe04 	addi	sp,sp,-8
   10340:	dfc00115 	stw	ra,4(sp)
   10344:	df000015 	stw	fp,0(sp)
   10348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1034c:	00800074 	movhi	r2,1
   10350:	108d2504 	addi	r2,r2,13460
   10354:	10800017 	ldw	r2,0(r2)
   10358:	10000526 	beq	r2,zero,10370 <alt_get_errno+0x34>
   1035c:	00800074 	movhi	r2,1
   10360:	108d2504 	addi	r2,r2,13460
   10364:	10800017 	ldw	r2,0(r2)
   10368:	103ee83a 	callr	r2
   1036c:	00000206 	br	10378 <alt_get_errno+0x3c>
   10370:	00800074 	movhi	r2,1
   10374:	10951504 	addi	r2,r2,21588
}
   10378:	e037883a 	mov	sp,fp
   1037c:	dfc00117 	ldw	ra,4(sp)
   10380:	df000017 	ldw	fp,0(sp)
   10384:	dec00204 	addi	sp,sp,8
   10388:	f800283a 	ret

0001038c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1038c:	defffd04 	addi	sp,sp,-12
   10390:	df000215 	stw	fp,8(sp)
   10394:	df000204 	addi	fp,sp,8
   10398:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1039c:	e0bfff17 	ldw	r2,-4(fp)
   103a0:	10800217 	ldw	r2,8(r2)
   103a4:	10d00034 	orhi	r3,r2,16384
   103a8:	e0bfff17 	ldw	r2,-4(fp)
   103ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   103b0:	e03ffe15 	stw	zero,-8(fp)
   103b4:	00001d06 	br	1042c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   103b8:	00800074 	movhi	r2,1
   103bc:	1087b004 	addi	r2,r2,7872
   103c0:	e0fffe17 	ldw	r3,-8(fp)
   103c4:	18c00324 	muli	r3,r3,12
   103c8:	10c5883a 	add	r2,r2,r3
   103cc:	10c00017 	ldw	r3,0(r2)
   103d0:	e0bfff17 	ldw	r2,-4(fp)
   103d4:	10800017 	ldw	r2,0(r2)
   103d8:	1880111e 	bne	r3,r2,10420 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   103dc:	00800074 	movhi	r2,1
   103e0:	1087b004 	addi	r2,r2,7872
   103e4:	e0fffe17 	ldw	r3,-8(fp)
   103e8:	18c00324 	muli	r3,r3,12
   103ec:	18c00204 	addi	r3,r3,8
   103f0:	10c5883a 	add	r2,r2,r3
   103f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   103f8:	1000090e 	bge	r2,zero,10420 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   103fc:	e0bffe17 	ldw	r2,-8(fp)
   10400:	10c00324 	muli	r3,r2,12
   10404:	00800074 	movhi	r2,1
   10408:	1087b004 	addi	r2,r2,7872
   1040c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10410:	e0bfff17 	ldw	r2,-4(fp)
   10414:	18800226 	beq	r3,r2,10420 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10418:	00bffcc4 	movi	r2,-13
   1041c:	00000a06 	br	10448 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10420:	e0bffe17 	ldw	r2,-8(fp)
   10424:	10800044 	addi	r2,r2,1
   10428:	e0bffe15 	stw	r2,-8(fp)
   1042c:	00800074 	movhi	r2,1
   10430:	108d2404 	addi	r2,r2,13456
   10434:	10800017 	ldw	r2,0(r2)
   10438:	1007883a 	mov	r3,r2
   1043c:	e0bffe17 	ldw	r2,-8(fp)
   10440:	18bfdd2e 	bgeu	r3,r2,103b8 <__alt_mem_Flash_flash_data+0xf40103b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10444:	0005883a 	mov	r2,zero
}
   10448:	e037883a 	mov	sp,fp
   1044c:	df000017 	ldw	fp,0(sp)
   10450:	dec00104 	addi	sp,sp,4
   10454:	f800283a 	ret

00010458 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10458:	defff604 	addi	sp,sp,-40
   1045c:	dfc00915 	stw	ra,36(sp)
   10460:	df000815 	stw	fp,32(sp)
   10464:	df000804 	addi	fp,sp,32
   10468:	e13ffd15 	stw	r4,-12(fp)
   1046c:	e17ffe15 	stw	r5,-8(fp)
   10470:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10474:	00bfffc4 	movi	r2,-1
   10478:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1047c:	00bffb44 	movi	r2,-19
   10480:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10484:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10488:	e13ffd17 	ldw	r4,-12(fp)
   1048c:	01400074 	movhi	r5,1
   10490:	294d2204 	addi	r5,r5,13448
   10494:	000ff940 	call	ff94 <alt_find_dev>
   10498:	e0bff815 	stw	r2,-32(fp)
   1049c:	e0bff817 	ldw	r2,-32(fp)
   104a0:	1000051e 	bne	r2,zero,104b8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   104a4:	e13ffd17 	ldw	r4,-12(fp)
   104a8:	0010aa00 	call	10aa0 <alt_find_file>
   104ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   104b0:	00800044 	movi	r2,1
   104b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   104b8:	e0bff817 	ldw	r2,-32(fp)
   104bc:	10002926 	beq	r2,zero,10564 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   104c0:	e13ff817 	ldw	r4,-32(fp)
   104c4:	0010bb40 	call	10bb4 <alt_get_fd>
   104c8:	e0bff915 	stw	r2,-28(fp)
   104cc:	e0bff917 	ldw	r2,-28(fp)
   104d0:	1000030e 	bge	r2,zero,104e0 <open+0x88>
    {
      status = index;
   104d4:	e0bff917 	ldw	r2,-28(fp)
   104d8:	e0bffa15 	stw	r2,-24(fp)
   104dc:	00002306 	br	1056c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   104e0:	e0bff917 	ldw	r2,-28(fp)
   104e4:	10c00324 	muli	r3,r2,12
   104e8:	00800074 	movhi	r2,1
   104ec:	1087b004 	addi	r2,r2,7872
   104f0:	1885883a 	add	r2,r3,r2
   104f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   104f8:	e0fffe17 	ldw	r3,-8(fp)
   104fc:	00900034 	movhi	r2,16384
   10500:	10bfffc4 	addi	r2,r2,-1
   10504:	1886703a 	and	r3,r3,r2
   10508:	e0bffc17 	ldw	r2,-16(fp)
   1050c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10510:	e0bffb17 	ldw	r2,-20(fp)
   10514:	1000051e 	bne	r2,zero,1052c <open+0xd4>
   10518:	e13ffc17 	ldw	r4,-16(fp)
   1051c:	001038c0 	call	1038c <alt_file_locked>
   10520:	e0bffa15 	stw	r2,-24(fp)
   10524:	e0bffa17 	ldw	r2,-24(fp)
   10528:	10001016 	blt	r2,zero,1056c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1052c:	e0bff817 	ldw	r2,-32(fp)
   10530:	10800317 	ldw	r2,12(r2)
   10534:	10000826 	beq	r2,zero,10558 <open+0x100>
   10538:	e0bff817 	ldw	r2,-32(fp)
   1053c:	10800317 	ldw	r2,12(r2)
   10540:	e13ffc17 	ldw	r4,-16(fp)
   10544:	e17ffd17 	ldw	r5,-12(fp)
   10548:	e1bffe17 	ldw	r6,-8(fp)
   1054c:	e1ffff17 	ldw	r7,-4(fp)
   10550:	103ee83a 	callr	r2
   10554:	00000106 	br	1055c <open+0x104>
   10558:	0005883a 	mov	r2,zero
   1055c:	e0bffa15 	stw	r2,-24(fp)
   10560:	00000206 	br	1056c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10564:	00bffb44 	movi	r2,-19
   10568:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1056c:	e0bffa17 	ldw	r2,-24(fp)
   10570:	1000090e 	bge	r2,zero,10598 <open+0x140>
  {
    alt_release_fd (index);  
   10574:	e13ff917 	ldw	r4,-28(fp)
   10578:	00052700 	call	5270 <alt_release_fd>
    ALT_ERRNO = -status;
   1057c:	001033c0 	call	1033c <alt_get_errno>
   10580:	1007883a 	mov	r3,r2
   10584:	e0bffa17 	ldw	r2,-24(fp)
   10588:	0085c83a 	sub	r2,zero,r2
   1058c:	18800015 	stw	r2,0(r3)
    return -1;
   10590:	00bfffc4 	movi	r2,-1
   10594:	00000106 	br	1059c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   10598:	e0bff917 	ldw	r2,-28(fp)
}
   1059c:	e037883a 	mov	sp,fp
   105a0:	dfc00117 	ldw	ra,4(sp)
   105a4:	df000017 	ldw	fp,0(sp)
   105a8:	dec00204 	addi	sp,sp,8
   105ac:	f800283a 	ret

000105b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   105b0:	defffa04 	addi	sp,sp,-24
   105b4:	df000515 	stw	fp,20(sp)
   105b8:	df000504 	addi	fp,sp,20
   105bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105c0:	0005303a 	rdctl	r2,status
   105c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105c8:	e0fffc17 	ldw	r3,-16(fp)
   105cc:	00bfff84 	movi	r2,-2
   105d0:	1884703a 	and	r2,r3,r2
   105d4:	1001703a 	wrctl	status,r2
  
  return context;
   105d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   105dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   105e0:	e0bfff17 	ldw	r2,-4(fp)
   105e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   105e8:	e0bffd17 	ldw	r2,-12(fp)
   105ec:	10800017 	ldw	r2,0(r2)
   105f0:	e0fffd17 	ldw	r3,-12(fp)
   105f4:	18c00117 	ldw	r3,4(r3)
   105f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   105fc:	e0bffd17 	ldw	r2,-12(fp)
   10600:	10800117 	ldw	r2,4(r2)
   10604:	e0fffd17 	ldw	r3,-12(fp)
   10608:	18c00017 	ldw	r3,0(r3)
   1060c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10610:	e0bffd17 	ldw	r2,-12(fp)
   10614:	e0fffd17 	ldw	r3,-12(fp)
   10618:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1061c:	e0bffd17 	ldw	r2,-12(fp)
   10620:	e0fffd17 	ldw	r3,-12(fp)
   10624:	10c00015 	stw	r3,0(r2)
   10628:	e0bffb17 	ldw	r2,-20(fp)
   1062c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10630:	e0bffe17 	ldw	r2,-8(fp)
   10634:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10638:	e037883a 	mov	sp,fp
   1063c:	df000017 	ldw	fp,0(sp)
   10640:	dec00104 	addi	sp,sp,4
   10644:	f800283a 	ret

00010648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10648:	defffb04 	addi	sp,sp,-20
   1064c:	dfc00415 	stw	ra,16(sp)
   10650:	df000315 	stw	fp,12(sp)
   10654:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10658:	d0a03b17 	ldw	r2,-32532(gp)
   1065c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10660:	d0a82817 	ldw	r2,-24416(gp)
   10664:	10800044 	addi	r2,r2,1
   10668:	d0a82815 	stw	r2,-24416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1066c:	00002e06 	br	10728 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10670:	e0bffd17 	ldw	r2,-12(fp)
   10674:	10800017 	ldw	r2,0(r2)
   10678:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1067c:	e0bffd17 	ldw	r2,-12(fp)
   10680:	10800403 	ldbu	r2,16(r2)
   10684:	10803fcc 	andi	r2,r2,255
   10688:	10000426 	beq	r2,zero,1069c <alt_tick+0x54>
   1068c:	d0a82817 	ldw	r2,-24416(gp)
   10690:	1000021e 	bne	r2,zero,1069c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10694:	e0bffd17 	ldw	r2,-12(fp)
   10698:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1069c:	e0bffd17 	ldw	r2,-12(fp)
   106a0:	10800217 	ldw	r2,8(r2)
   106a4:	d0e82817 	ldw	r3,-24416(gp)
   106a8:	18801d36 	bltu	r3,r2,10720 <alt_tick+0xd8>
   106ac:	e0bffd17 	ldw	r2,-12(fp)
   106b0:	10800403 	ldbu	r2,16(r2)
   106b4:	10803fcc 	andi	r2,r2,255
   106b8:	1000191e 	bne	r2,zero,10720 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   106bc:	e0bffd17 	ldw	r2,-12(fp)
   106c0:	10800317 	ldw	r2,12(r2)
   106c4:	e0fffd17 	ldw	r3,-12(fp)
   106c8:	18c00517 	ldw	r3,20(r3)
   106cc:	1809883a 	mov	r4,r3
   106d0:	103ee83a 	callr	r2
   106d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   106d8:	e0bfff17 	ldw	r2,-4(fp)
   106dc:	1000031e 	bne	r2,zero,106ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   106e0:	e13ffd17 	ldw	r4,-12(fp)
   106e4:	00105b00 	call	105b0 <alt_alarm_stop>
   106e8:	00000d06 	br	10720 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10c00217 	ldw	r3,8(r2)
   106f4:	e0bfff17 	ldw	r2,-4(fp)
   106f8:	1887883a 	add	r3,r3,r2
   106fc:	e0bffd17 	ldw	r2,-12(fp)
   10700:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	10c00217 	ldw	r3,8(r2)
   1070c:	d0a82817 	ldw	r2,-24416(gp)
   10710:	1880032e 	bgeu	r3,r2,10720 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	00c00044 	movi	r3,1
   1071c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10720:	e0bffe17 	ldw	r2,-8(fp)
   10724:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10728:	e0fffd17 	ldw	r3,-12(fp)
   1072c:	d0a03b04 	addi	r2,gp,-32532
   10730:	18bfcf1e 	bne	r3,r2,10670 <__alt_mem_Flash_flash_data+0xf4010670>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10734:	000647c0 	call	647c <OSTimeTick>
}
   10738:	e037883a 	mov	sp,fp
   1073c:	dfc00117 	ldw	ra,4(sp)
   10740:	df000017 	ldw	fp,0(sp)
   10744:	dec00204 	addi	sp,sp,8
   10748:	f800283a 	ret

0001074c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1074c:	deffff04 	addi	sp,sp,-4
   10750:	df000015 	stw	fp,0(sp)
   10754:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10758:	000170fa 	wrctl	ienable,zero
}
   1075c:	e037883a 	mov	sp,fp
   10760:	df000017 	ldw	fp,0(sp)
   10764:	dec00104 	addi	sp,sp,4
   10768:	f800283a 	ret

0001076c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1076c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   10770:	d0e01117 	ldw	r3,-32700(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   10774:	d1282117 	ldw	r4,-24444(gp)

      stw ra,  0(sp)
   10778:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1077c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   10780:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   10784:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   10788:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1078c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   10790:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   10794:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   10798:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1079c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   107a0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   107a4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   107a8:	00109d80 	call	109d8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   107ac:	d1281c17 	ldw	r4,-24464(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   107b0:	d1681407 	ldb	r5,-24496(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   107b4:	d1282115 	stw	r4,-24444(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   107b8:	d1681445 	stb	r5,-24495(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   107bc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   107c0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   107c4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   107c8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   107cc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   107d0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   107d4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   107d8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   107dc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   107e0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   107e4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   107e8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   107ec:	d0e01115 	stw	r3,-32700(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   107f0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   107f4:	f800283a 	ret

000107f8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   107f8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   107fc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   10800:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   10804:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   10808:	00109d80 	call	109d8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1080c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   10810:	d4a81245 	stb	r18,-24503(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   10814:	003fe506 	br	107ac <__alt_mem_Flash_flash_data+0xf40107ac>

00010818 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   10818:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1081c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   10820:	10800054 	ori	r2,r2,1
      wrctl status, r2
   10824:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   10828:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1082c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   10830:	dec00204 	addi	sp,sp,8

      callr r2
   10834:	103ee83a 	callr	r2

      nop
   10838:	0001883a 	nop

0001083c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1083c:	defff704 	addi	sp,sp,-36
   10840:	dfc00815 	stw	ra,32(sp)
   10844:	df000715 	stw	fp,28(sp)
   10848:	df000704 	addi	fp,sp,28
   1084c:	e13ffc15 	stw	r4,-16(fp)
   10850:	e17ffd15 	stw	r5,-12(fp)
   10854:	e1bffe15 	stw	r6,-8(fp)
   10858:	3805883a 	mov	r2,r7
   1085c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   10860:	e0fffe17 	ldw	r3,-8(fp)
   10864:	00bfff04 	movi	r2,-4
   10868:	1884703a 	and	r2,r3,r2
   1086c:	10bef704 	addi	r2,r2,-1060
   10870:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   10874:	e13ff917 	ldw	r4,-28(fp)
   10878:	000b883a 	mov	r5,zero
   1087c:	01810904 	movi	r6,1060
   10880:	00044640 	call	4464 <memset>
   10884:	e0bff917 	ldw	r2,-28(fp)
   10888:	10c0bb04 	addi	r3,r2,748
   1088c:	e0bff917 	ldw	r2,-28(fp)
   10890:	10c00115 	stw	r3,4(r2)
   10894:	e0bff917 	ldw	r2,-28(fp)
   10898:	10c0d504 	addi	r3,r2,852
   1089c:	e0bff917 	ldw	r2,-28(fp)
   108a0:	10c00215 	stw	r3,8(r2)
   108a4:	e0bff917 	ldw	r2,-28(fp)
   108a8:	10c0ef04 	addi	r3,r2,956
   108ac:	e0bff917 	ldw	r2,-28(fp)
   108b0:	10c00315 	stw	r3,12(r2)
   108b4:	e0fff917 	ldw	r3,-28(fp)
   108b8:	00800074 	movhi	r2,1
   108bc:	10859a04 	addi	r2,r2,5736
   108c0:	18800d15 	stw	r2,52(r3)
   108c4:	e0bff917 	ldw	r2,-28(fp)
   108c8:	00c00044 	movi	r3,1
   108cc:	10c02915 	stw	r3,164(r2)
   108d0:	10002a15 	stw	zero,168(r2)
   108d4:	e0bff917 	ldw	r2,-28(fp)
   108d8:	00ccc384 	movi	r3,13070
   108dc:	10c02b0d 	sth	r3,172(r2)
   108e0:	e0bff917 	ldw	r2,-28(fp)
   108e4:	00eaf344 	movi	r3,-21555
   108e8:	10c02b8d 	sth	r3,174(r2)
   108ec:	e0bff917 	ldw	r2,-28(fp)
   108f0:	00c48d04 	movi	r3,4660
   108f4:	10c02c0d 	sth	r3,176(r2)
   108f8:	e0bff917 	ldw	r2,-28(fp)
   108fc:	00f99b44 	movi	r3,-6547
   10900:	10c02c8d 	sth	r3,178(r2)
   10904:	e0bff917 	ldw	r2,-28(fp)
   10908:	00f7bb04 	movi	r3,-8468
   1090c:	10c02d0d 	sth	r3,180(r2)
   10910:	e0bff917 	ldw	r2,-28(fp)
   10914:	00c00144 	movi	r3,5
   10918:	10c02d8d 	sth	r3,182(r2)
   1091c:	e0bff917 	ldw	r2,-28(fp)
   10920:	00c002c4 	movi	r3,11
   10924:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   10928:	e0bff917 	ldw	r2,-28(fp)
   1092c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   10930:	e0bffa17 	ldw	r2,-24(fp)
   10934:	10bff304 	addi	r2,r2,-52
   10938:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1093c:	e0bffb17 	ldw	r2,-20(fp)
   10940:	10800c04 	addi	r2,r2,48
   10944:	e0fffc17 	ldw	r3,-16(fp)
   10948:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1094c:	e0bffb17 	ldw	r2,-20(fp)
   10950:	10800b04 	addi	r2,r2,44
   10954:	e0fffd17 	ldw	r3,-12(fp)
   10958:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1095c:	e0bffb17 	ldw	r2,-20(fp)
   10960:	10800a04 	addi	r2,r2,40
   10964:	e0fff917 	ldw	r3,-28(fp)
   10968:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1096c:	00800074 	movhi	r2,1
   10970:	10820604 	addi	r2,r2,2072
   10974:	10c00104 	addi	r3,r2,4
   10978:	e0bffb17 	ldw	r2,-20(fp)
   1097c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   10980:	e0bffb17 	ldw	r2,-20(fp)
}
   10984:	e037883a 	mov	sp,fp
   10988:	dfc00117 	ldw	ra,4(sp)
   1098c:	df000017 	ldw	fp,0(sp)
   10990:	dec00204 	addi	sp,sp,8
   10994:	f800283a 	ret

00010998 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   10998:	defffe04 	addi	sp,sp,-8
   1099c:	df000115 	stw	fp,4(sp)
   109a0:	df000104 	addi	fp,sp,4
   109a4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   109a8:	e037883a 	mov	sp,fp
   109ac:	df000017 	ldw	fp,0(sp)
   109b0:	dec00104 	addi	sp,sp,4
   109b4:	f800283a 	ret

000109b8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   109b8:	defffe04 	addi	sp,sp,-8
   109bc:	df000115 	stw	fp,4(sp)
   109c0:	df000104 	addi	fp,sp,4
   109c4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   109c8:	e037883a 	mov	sp,fp
   109cc:	df000017 	ldw	fp,0(sp)
   109d0:	dec00104 	addi	sp,sp,4
   109d4:	f800283a 	ret

000109d8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   109d8:	deffff04 	addi	sp,sp,-4
   109dc:	df000015 	stw	fp,0(sp)
   109e0:	d839883a 	mov	fp,sp
}
   109e4:	e037883a 	mov	sp,fp
   109e8:	df000017 	ldw	fp,0(sp)
   109ec:	dec00104 	addi	sp,sp,4
   109f0:	f800283a 	ret

000109f4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   109f4:	deffff04 	addi	sp,sp,-4
   109f8:	df000015 	stw	fp,0(sp)
   109fc:	d839883a 	mov	fp,sp
}
   10a00:	e037883a 	mov	sp,fp
   10a04:	df000017 	ldw	fp,0(sp)
   10a08:	dec00104 	addi	sp,sp,4
   10a0c:	f800283a 	ret

00010a10 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   10a10:	deffff04 	addi	sp,sp,-4
   10a14:	df000015 	stw	fp,0(sp)
   10a18:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   10a1c:	e037883a 	mov	sp,fp
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00104 	addi	sp,sp,4
   10a28:	f800283a 	ret

00010a2c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   10a2c:	deffff04 	addi	sp,sp,-4
   10a30:	df000015 	stw	fp,0(sp)
   10a34:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   10a38:	e037883a 	mov	sp,fp
   10a3c:	df000017 	ldw	fp,0(sp)
   10a40:	dec00104 	addi	sp,sp,4
   10a44:	f800283a 	ret

00010a48 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   10a48:	deffff04 	addi	sp,sp,-4
   10a4c:	df000015 	stw	fp,0(sp)
   10a50:	d839883a 	mov	fp,sp
}
   10a54:	e037883a 	mov	sp,fp
   10a58:	df000017 	ldw	fp,0(sp)
   10a5c:	dec00104 	addi	sp,sp,4
   10a60:	f800283a 	ret

00010a64 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   10a64:	deffff04 	addi	sp,sp,-4
   10a68:	df000015 	stw	fp,0(sp)
   10a6c:	d839883a 	mov	fp,sp
}
   10a70:	e037883a 	mov	sp,fp
   10a74:	df000017 	ldw	fp,0(sp)
   10a78:	dec00104 	addi	sp,sp,4
   10a7c:	f800283a 	ret

00010a80 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   10a80:	defffe04 	addi	sp,sp,-8
   10a84:	df000115 	stw	fp,4(sp)
   10a88:	df000104 	addi	fp,sp,4
   10a8c:	e13fff15 	stw	r4,-4(fp)
}
   10a90:	e037883a 	mov	sp,fp
   10a94:	df000017 	ldw	fp,0(sp)
   10a98:	dec00104 	addi	sp,sp,4
   10a9c:	f800283a 	ret

00010aa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10aa0:	defffb04 	addi	sp,sp,-20
   10aa4:	dfc00415 	stw	ra,16(sp)
   10aa8:	df000315 	stw	fp,12(sp)
   10aac:	df000304 	addi	fp,sp,12
   10ab0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10ab4:	00800074 	movhi	r2,1
   10ab8:	108d2004 	addi	r2,r2,13440
   10abc:	10800017 	ldw	r2,0(r2)
   10ac0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10ac4:	00003106 	br	10b8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   10ac8:	e0bffd17 	ldw	r2,-12(fp)
   10acc:	10800217 	ldw	r2,8(r2)
   10ad0:	1009883a 	mov	r4,r2
   10ad4:	0001f500 	call	1f50 <strlen>
   10ad8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10adc:	e0bffd17 	ldw	r2,-12(fp)
   10ae0:	10c00217 	ldw	r3,8(r2)
   10ae4:	e0bffe17 	ldw	r2,-8(fp)
   10ae8:	10bfffc4 	addi	r2,r2,-1
   10aec:	1885883a 	add	r2,r3,r2
   10af0:	10800003 	ldbu	r2,0(r2)
   10af4:	10803fcc 	andi	r2,r2,255
   10af8:	1080201c 	xori	r2,r2,128
   10afc:	10bfe004 	addi	r2,r2,-128
   10b00:	10800bd8 	cmpnei	r2,r2,47
   10b04:	1000031e 	bne	r2,zero,10b14 <alt_find_file+0x74>
    {
      len -= 1;
   10b08:	e0bffe17 	ldw	r2,-8(fp)
   10b0c:	10bfffc4 	addi	r2,r2,-1
   10b10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10b14:	e0bffe17 	ldw	r2,-8(fp)
   10b18:	e0ffff17 	ldw	r3,-4(fp)
   10b1c:	1885883a 	add	r2,r3,r2
   10b20:	10800003 	ldbu	r2,0(r2)
   10b24:	10803fcc 	andi	r2,r2,255
   10b28:	1080201c 	xori	r2,r2,128
   10b2c:	10bfe004 	addi	r2,r2,-128
   10b30:	10800be0 	cmpeqi	r2,r2,47
   10b34:	1000081e 	bne	r2,zero,10b58 <alt_find_file+0xb8>
   10b38:	e0bffe17 	ldw	r2,-8(fp)
   10b3c:	e0ffff17 	ldw	r3,-4(fp)
   10b40:	1885883a 	add	r2,r3,r2
   10b44:	10800003 	ldbu	r2,0(r2)
   10b48:	10803fcc 	andi	r2,r2,255
   10b4c:	1080201c 	xori	r2,r2,128
   10b50:	10bfe004 	addi	r2,r2,-128
   10b54:	10000a1e 	bne	r2,zero,10b80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   10b58:	e0bffd17 	ldw	r2,-12(fp)
   10b5c:	10c00217 	ldw	r3,8(r2)
   10b60:	e0bffe17 	ldw	r2,-8(fp)
   10b64:	1809883a 	mov	r4,r3
   10b68:	e17fff17 	ldw	r5,-4(fp)
   10b6c:	100d883a 	mov	r6,r2
   10b70:	0010e240 	call	10e24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10b74:	1000021e 	bne	r2,zero,10b80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10b78:	e0bffd17 	ldw	r2,-12(fp)
   10b7c:	00000806 	br	10ba0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	10800017 	ldw	r2,0(r2)
   10b88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10b8c:	e0fffd17 	ldw	r3,-12(fp)
   10b90:	00800074 	movhi	r2,1
   10b94:	108d2004 	addi	r2,r2,13440
   10b98:	18bfcb1e 	bne	r3,r2,10ac8 <__alt_mem_Flash_flash_data+0xf4010ac8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10b9c:	0005883a 	mov	r2,zero
}
   10ba0:	e037883a 	mov	sp,fp
   10ba4:	dfc00117 	ldw	ra,4(sp)
   10ba8:	df000017 	ldw	fp,0(sp)
   10bac:	dec00204 	addi	sp,sp,8
   10bb0:	f800283a 	ret

00010bb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10bb4:	defff904 	addi	sp,sp,-28
   10bb8:	dfc00615 	stw	ra,24(sp)
   10bbc:	df000515 	stw	fp,20(sp)
   10bc0:	df000504 	addi	fp,sp,20
   10bc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10bc8:	00bffa04 	movi	r2,-24
   10bcc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   10bd0:	00800074 	movhi	r2,1
   10bd4:	10951604 	addi	r2,r2,21592
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	e0bffd15 	stw	r2,-12(fp)
   10be0:	e03ffe0d 	sth	zero,-8(fp)
   10be4:	e0fffe0b 	ldhu	r3,-8(fp)
   10be8:	e0bffe84 	addi	r2,fp,-6
   10bec:	e13ffd17 	ldw	r4,-12(fp)
   10bf0:	180b883a 	mov	r5,r3
   10bf4:	100d883a 	mov	r6,r2
   10bf8:	000af180 	call	af18 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10bfc:	e03ffb15 	stw	zero,-20(fp)
   10c00:	00001d06 	br	10c78 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   10c04:	00800074 	movhi	r2,1
   10c08:	1087b004 	addi	r2,r2,7872
   10c0c:	e0fffb17 	ldw	r3,-20(fp)
   10c10:	18c00324 	muli	r3,r3,12
   10c14:	10c5883a 	add	r2,r2,r3
   10c18:	10800017 	ldw	r2,0(r2)
   10c1c:	1000131e 	bne	r2,zero,10c6c <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   10c20:	00800074 	movhi	r2,1
   10c24:	1087b004 	addi	r2,r2,7872
   10c28:	e0fffb17 	ldw	r3,-20(fp)
   10c2c:	18c00324 	muli	r3,r3,12
   10c30:	10c5883a 	add	r2,r2,r3
   10c34:	e0ffff17 	ldw	r3,-4(fp)
   10c38:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10c3c:	00800074 	movhi	r2,1
   10c40:	108d2404 	addi	r2,r2,13456
   10c44:	10c00017 	ldw	r3,0(r2)
   10c48:	e0bffb17 	ldw	r2,-20(fp)
   10c4c:	1880040e 	bge	r3,r2,10c60 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   10c50:	00800074 	movhi	r2,1
   10c54:	108d2404 	addi	r2,r2,13456
   10c58:	e0fffb17 	ldw	r3,-20(fp)
   10c5c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   10c60:	e0bffb17 	ldw	r2,-20(fp)
   10c64:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   10c68:	00000606 	br	10c84 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10c6c:	e0bffb17 	ldw	r2,-20(fp)
   10c70:	10800044 	addi	r2,r2,1
   10c74:	e0bffb15 	stw	r2,-20(fp)
   10c78:	e0bffb17 	ldw	r2,-20(fp)
   10c7c:	10800810 	cmplti	r2,r2,32
   10c80:	103fe01e 	bne	r2,zero,10c04 <__alt_mem_Flash_flash_data+0xf4010c04>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   10c84:	00800074 	movhi	r2,1
   10c88:	10951604 	addi	r2,r2,21592
   10c8c:	10800017 	ldw	r2,0(r2)
   10c90:	1009883a 	mov	r4,r2
   10c94:	000b2ec0 	call	b2ec <OSSemPost>

  return rc;
   10c98:	e0bffc17 	ldw	r2,-16(fp)
}
   10c9c:	e037883a 	mov	sp,fp
   10ca0:	dfc00117 	ldw	ra,4(sp)
   10ca4:	df000017 	ldw	fp,0(sp)
   10ca8:	dec00204 	addi	sp,sp,8
   10cac:	f800283a 	ret

00010cb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10cb0:	defffb04 	addi	sp,sp,-20
   10cb4:	df000415 	stw	fp,16(sp)
   10cb8:	df000404 	addi	fp,sp,16
   10cbc:	e13ffe15 	stw	r4,-8(fp)
   10cc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10cc4:	e0bfff17 	ldw	r2,-4(fp)
   10cc8:	10840070 	cmpltui	r2,r2,4097
   10ccc:	1000021e 	bne	r2,zero,10cd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10cd0:	00840004 	movi	r2,4096
   10cd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10cd8:	e0fffe17 	ldw	r3,-8(fp)
   10cdc:	e0bfff17 	ldw	r2,-4(fp)
   10ce0:	1885883a 	add	r2,r3,r2
   10ce4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10ce8:	e0bffe17 	ldw	r2,-8(fp)
   10cec:	e0bffc15 	stw	r2,-16(fp)
   10cf0:	00000506 	br	10d08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10cf4:	e0bffc17 	ldw	r2,-16(fp)
   10cf8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10cfc:	e0bffc17 	ldw	r2,-16(fp)
   10d00:	10800804 	addi	r2,r2,32
   10d04:	e0bffc15 	stw	r2,-16(fp)
   10d08:	e0fffc17 	ldw	r3,-16(fp)
   10d0c:	e0bffd17 	ldw	r2,-12(fp)
   10d10:	18bff836 	bltu	r3,r2,10cf4 <__alt_mem_Flash_flash_data+0xf4010cf4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10d14:	e0bffe17 	ldw	r2,-8(fp)
   10d18:	108007cc 	andi	r2,r2,31
   10d1c:	10000226 	beq	r2,zero,10d28 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10d20:	e0bffc17 	ldw	r2,-16(fp)
   10d24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10d28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10d2c:	e037883a 	mov	sp,fp
   10d30:	df000017 	ldw	fp,0(sp)
   10d34:	dec00104 	addi	sp,sp,4
   10d38:	f800283a 	ret

00010d3c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10d3c:	defffe04 	addi	sp,sp,-8
   10d40:	df000115 	stw	fp,4(sp)
   10d44:	df000104 	addi	fp,sp,4
   10d48:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10d4c:	e0bfff17 	ldw	r2,-4(fp)
   10d50:	10bffe84 	addi	r2,r2,-6
   10d54:	10c00428 	cmpgeui	r3,r2,16
   10d58:	18001a1e 	bne	r3,zero,10dc4 <alt_exception_cause_generated_bad_addr+0x88>
   10d5c:	100690ba 	slli	r3,r2,2
   10d60:	00800074 	movhi	r2,1
   10d64:	10835d04 	addi	r2,r2,3444
   10d68:	1885883a 	add	r2,r3,r2
   10d6c:	10800017 	ldw	r2,0(r2)
   10d70:	1000683a 	jmp	r2
   10d74:	00010db4 	movhi	zero,1078
   10d78:	00010db4 	movhi	zero,1078
   10d7c:	00010dc4 	movi	zero,1079
   10d80:	00010dc4 	movi	zero,1079
   10d84:	00010dc4 	movi	zero,1079
   10d88:	00010db4 	movhi	zero,1078
   10d8c:	00010dbc 	xorhi	zero,zero,1078
   10d90:	00010dc4 	movi	zero,1079
   10d94:	00010db4 	movhi	zero,1078
   10d98:	00010db4 	movhi	zero,1078
   10d9c:	00010dc4 	movi	zero,1079
   10da0:	00010db4 	movhi	zero,1078
   10da4:	00010dbc 	xorhi	zero,zero,1078
   10da8:	00010dc4 	movi	zero,1079
   10dac:	00010dc4 	movi	zero,1079
   10db0:	00010db4 	movhi	zero,1078
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10db4:	00800044 	movi	r2,1
   10db8:	00000306 	br	10dc8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10dbc:	0005883a 	mov	r2,zero
   10dc0:	00000106 	br	10dc8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10dc4:	0005883a 	mov	r2,zero
  }
}
   10dc8:	e037883a 	mov	sp,fp
   10dcc:	df000017 	ldw	fp,0(sp)
   10dd0:	dec00104 	addi	sp,sp,4
   10dd4:	f800283a 	ret

00010dd8 <atexit>:
   10dd8:	200b883a 	mov	r5,r4
   10ddc:	000d883a 	mov	r6,zero
   10de0:	0009883a 	mov	r4,zero
   10de4:	000f883a 	mov	r7,zero
   10de8:	0010f441 	jmpi	10f44 <__register_exitproc>

00010dec <exit>:
   10dec:	defffe04 	addi	sp,sp,-8
   10df0:	000b883a 	mov	r5,zero
   10df4:	dc000015 	stw	r16,0(sp)
   10df8:	dfc00115 	stw	ra,4(sp)
   10dfc:	2021883a 	mov	r16,r4
   10e00:	00110580 	call	11058 <__call_exitprocs>
   10e04:	00800074 	movhi	r2,1
   10e08:	108d1c04 	addi	r2,r2,13424
   10e0c:	11000017 	ldw	r4,0(r2)
   10e10:	20800f17 	ldw	r2,60(r4)
   10e14:	10000126 	beq	r2,zero,10e1c <exit+0x30>
   10e18:	103ee83a 	callr	r2
   10e1c:	8009883a 	mov	r4,r16
   10e20:	00111ec0 	call	111ec <_exit>

00010e24 <memcmp>:
   10e24:	01c000c4 	movi	r7,3
   10e28:	3980192e 	bgeu	r7,r6,10e90 <memcmp+0x6c>
   10e2c:	2144b03a 	or	r2,r4,r5
   10e30:	11c4703a 	and	r2,r2,r7
   10e34:	10000f26 	beq	r2,zero,10e74 <memcmp+0x50>
   10e38:	20800003 	ldbu	r2,0(r4)
   10e3c:	28c00003 	ldbu	r3,0(r5)
   10e40:	10c0151e 	bne	r2,r3,10e98 <memcmp+0x74>
   10e44:	31bfff84 	addi	r6,r6,-2
   10e48:	01ffffc4 	movi	r7,-1
   10e4c:	00000406 	br	10e60 <memcmp+0x3c>
   10e50:	20800003 	ldbu	r2,0(r4)
   10e54:	28c00003 	ldbu	r3,0(r5)
   10e58:	31bfffc4 	addi	r6,r6,-1
   10e5c:	10c00e1e 	bne	r2,r3,10e98 <memcmp+0x74>
   10e60:	21000044 	addi	r4,r4,1
   10e64:	29400044 	addi	r5,r5,1
   10e68:	31fff91e 	bne	r6,r7,10e50 <__alt_mem_Flash_flash_data+0xf4010e50>
   10e6c:	0005883a 	mov	r2,zero
   10e70:	f800283a 	ret
   10e74:	20c00017 	ldw	r3,0(r4)
   10e78:	28800017 	ldw	r2,0(r5)
   10e7c:	1880041e 	bne	r3,r2,10e90 <memcmp+0x6c>
   10e80:	31bfff04 	addi	r6,r6,-4
   10e84:	21000104 	addi	r4,r4,4
   10e88:	29400104 	addi	r5,r5,4
   10e8c:	39bff936 	bltu	r7,r6,10e74 <__alt_mem_Flash_flash_data+0xf4010e74>
   10e90:	303fe91e 	bne	r6,zero,10e38 <__alt_mem_Flash_flash_data+0xf4010e38>
   10e94:	003ff506 	br	10e6c <__alt_mem_Flash_flash_data+0xf4010e6c>
   10e98:	10c5c83a 	sub	r2,r2,r3
   10e9c:	f800283a 	ret

00010ea0 <strcmp>:
   10ea0:	2144b03a 	or	r2,r4,r5
   10ea4:	108000cc 	andi	r2,r2,3
   10ea8:	1000171e 	bne	r2,zero,10f08 <strcmp+0x68>
   10eac:	20800017 	ldw	r2,0(r4)
   10eb0:	28c00017 	ldw	r3,0(r5)
   10eb4:	10c0141e 	bne	r2,r3,10f08 <strcmp+0x68>
   10eb8:	027fbff4 	movhi	r9,65279
   10ebc:	4a7fbfc4 	addi	r9,r9,-257
   10ec0:	0086303a 	nor	r3,zero,r2
   10ec4:	02202074 	movhi	r8,32897
   10ec8:	1245883a 	add	r2,r2,r9
   10ecc:	42202004 	addi	r8,r8,-32640
   10ed0:	10c4703a 	and	r2,r2,r3
   10ed4:	1204703a 	and	r2,r2,r8
   10ed8:	10000226 	beq	r2,zero,10ee4 <strcmp+0x44>
   10edc:	00001706 	br	10f3c <strcmp+0x9c>
   10ee0:	1000161e 	bne	r2,zero,10f3c <strcmp+0x9c>
   10ee4:	21000104 	addi	r4,r4,4
   10ee8:	20c00017 	ldw	r3,0(r4)
   10eec:	29400104 	addi	r5,r5,4
   10ef0:	29800017 	ldw	r6,0(r5)
   10ef4:	1a4f883a 	add	r7,r3,r9
   10ef8:	00c4303a 	nor	r2,zero,r3
   10efc:	3884703a 	and	r2,r7,r2
   10f00:	1204703a 	and	r2,r2,r8
   10f04:	19bff626 	beq	r3,r6,10ee0 <__alt_mem_Flash_flash_data+0xf4010ee0>
   10f08:	20800007 	ldb	r2,0(r4)
   10f0c:	1000051e 	bne	r2,zero,10f24 <strcmp+0x84>
   10f10:	00000606 	br	10f2c <strcmp+0x8c>
   10f14:	21000044 	addi	r4,r4,1
   10f18:	20800007 	ldb	r2,0(r4)
   10f1c:	29400044 	addi	r5,r5,1
   10f20:	10000226 	beq	r2,zero,10f2c <strcmp+0x8c>
   10f24:	28c00007 	ldb	r3,0(r5)
   10f28:	10fffa26 	beq	r2,r3,10f14 <__alt_mem_Flash_flash_data+0xf4010f14>
   10f2c:	20800003 	ldbu	r2,0(r4)
   10f30:	28c00003 	ldbu	r3,0(r5)
   10f34:	10c5c83a 	sub	r2,r2,r3
   10f38:	f800283a 	ret
   10f3c:	0005883a 	mov	r2,zero
   10f40:	f800283a 	ret

00010f44 <__register_exitproc>:
   10f44:	00800074 	movhi	r2,1
   10f48:	defffa04 	addi	sp,sp,-24
   10f4c:	108d1c04 	addi	r2,r2,13424
   10f50:	dc000315 	stw	r16,12(sp)
   10f54:	14000017 	ldw	r16,0(r2)
   10f58:	dc400415 	stw	r17,16(sp)
   10f5c:	dfc00515 	stw	ra,20(sp)
   10f60:	80805217 	ldw	r2,328(r16)
   10f64:	2023883a 	mov	r17,r4
   10f68:	10003626 	beq	r2,zero,11044 <__register_exitproc+0x100>
   10f6c:	10c00117 	ldw	r3,4(r2)
   10f70:	010007c4 	movi	r4,31
   10f74:	20c00e16 	blt	r4,r3,10fb0 <__register_exitproc+0x6c>
   10f78:	1a400044 	addi	r9,r3,1
   10f7c:	8800211e 	bne	r17,zero,11004 <__register_exitproc+0xc0>
   10f80:	18c00084 	addi	r3,r3,2
   10f84:	18c7883a 	add	r3,r3,r3
   10f88:	18c7883a 	add	r3,r3,r3
   10f8c:	12400115 	stw	r9,4(r2)
   10f90:	10c7883a 	add	r3,r2,r3
   10f94:	19400015 	stw	r5,0(r3)
   10f98:	0005883a 	mov	r2,zero
   10f9c:	dfc00517 	ldw	ra,20(sp)
   10fa0:	dc400417 	ldw	r17,16(sp)
   10fa4:	dc000317 	ldw	r16,12(sp)
   10fa8:	dec00604 	addi	sp,sp,24
   10fac:	f800283a 	ret
   10fb0:	00800034 	movhi	r2,0
   10fb4:	10800004 	addi	r2,r2,0
   10fb8:	10002526 	beq	r2,zero,11050 <__register_exitproc+0x10c>
   10fbc:	01006404 	movi	r4,400
   10fc0:	d9400015 	stw	r5,0(sp)
   10fc4:	d9800115 	stw	r6,4(sp)
   10fc8:	d9c00215 	stw	r7,8(sp)
   10fcc:	00000000 	call	0 <__alt_mem_SDRAM>
   10fd0:	d9400017 	ldw	r5,0(sp)
   10fd4:	d9800117 	ldw	r6,4(sp)
   10fd8:	d9c00217 	ldw	r7,8(sp)
   10fdc:	10001c26 	beq	r2,zero,11050 <__register_exitproc+0x10c>
   10fe0:	80c05217 	ldw	r3,328(r16)
   10fe4:	10000115 	stw	zero,4(r2)
   10fe8:	02400044 	movi	r9,1
   10fec:	10c00015 	stw	r3,0(r2)
   10ff0:	80805215 	stw	r2,328(r16)
   10ff4:	10006215 	stw	zero,392(r2)
   10ff8:	10006315 	stw	zero,396(r2)
   10ffc:	0007883a 	mov	r3,zero
   11000:	883fdf26 	beq	r17,zero,10f80 <__alt_mem_Flash_flash_data+0xf4010f80>
   11004:	18d1883a 	add	r8,r3,r3
   11008:	4211883a 	add	r8,r8,r8
   1100c:	1211883a 	add	r8,r2,r8
   11010:	41802215 	stw	r6,136(r8)
   11014:	01000044 	movi	r4,1
   11018:	11806217 	ldw	r6,392(r2)
   1101c:	20c8983a 	sll	r4,r4,r3
   11020:	310cb03a 	or	r6,r6,r4
   11024:	11806215 	stw	r6,392(r2)
   11028:	41c04215 	stw	r7,264(r8)
   1102c:	01800084 	movi	r6,2
   11030:	89bfd31e 	bne	r17,r6,10f80 <__alt_mem_Flash_flash_data+0xf4010f80>
   11034:	11806317 	ldw	r6,396(r2)
   11038:	3108b03a 	or	r4,r6,r4
   1103c:	11006315 	stw	r4,396(r2)
   11040:	003fcf06 	br	10f80 <__alt_mem_Flash_flash_data+0xf4010f80>
   11044:	80805304 	addi	r2,r16,332
   11048:	80805215 	stw	r2,328(r16)
   1104c:	003fc706 	br	10f6c <__alt_mem_Flash_flash_data+0xf4010f6c>
   11050:	00bfffc4 	movi	r2,-1
   11054:	003fd106 	br	10f9c <__alt_mem_Flash_flash_data+0xf4010f9c>

00011058 <__call_exitprocs>:
   11058:	00800074 	movhi	r2,1
   1105c:	108d1c04 	addi	r2,r2,13424
   11060:	10800017 	ldw	r2,0(r2)
   11064:	defff404 	addi	sp,sp,-48
   11068:	dd800815 	stw	r22,32(sp)
   1106c:	d8800015 	stw	r2,0(sp)
   11070:	10805204 	addi	r2,r2,328
   11074:	dd000615 	stw	r20,24(sp)
   11078:	dc800415 	stw	r18,16(sp)
   1107c:	dfc00b15 	stw	ra,44(sp)
   11080:	df000a15 	stw	fp,40(sp)
   11084:	ddc00915 	stw	r23,36(sp)
   11088:	dd400715 	stw	r21,28(sp)
   1108c:	dcc00515 	stw	r19,20(sp)
   11090:	dc400315 	stw	r17,12(sp)
   11094:	dc000215 	stw	r16,8(sp)
   11098:	2025883a 	mov	r18,r4
   1109c:	2829883a 	mov	r20,r5
   110a0:	d8800115 	stw	r2,4(sp)
   110a4:	05bfffc4 	movi	r22,-1
   110a8:	d8800017 	ldw	r2,0(sp)
   110ac:	14c05217 	ldw	r19,328(r2)
   110b0:	98001d26 	beq	r19,zero,11128 <__call_exitprocs+0xd0>
   110b4:	dd400117 	ldw	r21,4(sp)
   110b8:	98800117 	ldw	r2,4(r19)
   110bc:	173fffc4 	addi	fp,r2,-1
   110c0:	e0000d16 	blt	fp,zero,110f8 <__call_exitprocs+0xa0>
   110c4:	14000044 	addi	r16,r2,1
   110c8:	8421883a 	add	r16,r16,r16
   110cc:	8421883a 	add	r16,r16,r16
   110d0:	84402004 	addi	r17,r16,128
   110d4:	9c63883a 	add	r17,r19,r17
   110d8:	9c21883a 	add	r16,r19,r16
   110dc:	a0001e26 	beq	r20,zero,11158 <__call_exitprocs+0x100>
   110e0:	80804017 	ldw	r2,256(r16)
   110e4:	15001c26 	beq	r2,r20,11158 <__call_exitprocs+0x100>
   110e8:	e73fffc4 	addi	fp,fp,-1
   110ec:	843fff04 	addi	r16,r16,-4
   110f0:	8c7fff04 	addi	r17,r17,-4
   110f4:	e5bff91e 	bne	fp,r22,110dc <__alt_mem_Flash_flash_data+0xf40110dc>
   110f8:	00800034 	movhi	r2,0
   110fc:	10800004 	addi	r2,r2,0
   11100:	10000926 	beq	r2,zero,11128 <__call_exitprocs+0xd0>
   11104:	98800117 	ldw	r2,4(r19)
   11108:	1000311e 	bne	r2,zero,111d0 <__call_exitprocs+0x178>
   1110c:	98800017 	ldw	r2,0(r19)
   11110:	10003426 	beq	r2,zero,111e4 <__call_exitprocs+0x18c>
   11114:	9809883a 	mov	r4,r19
   11118:	a8800015 	stw	r2,0(r21)
   1111c:	00000000 	call	0 <__alt_mem_SDRAM>
   11120:	acc00017 	ldw	r19,0(r21)
   11124:	983fe41e 	bne	r19,zero,110b8 <__alt_mem_Flash_flash_data+0xf40110b8>
   11128:	dfc00b17 	ldw	ra,44(sp)
   1112c:	df000a17 	ldw	fp,40(sp)
   11130:	ddc00917 	ldw	r23,36(sp)
   11134:	dd800817 	ldw	r22,32(sp)
   11138:	dd400717 	ldw	r21,28(sp)
   1113c:	dd000617 	ldw	r20,24(sp)
   11140:	dcc00517 	ldw	r19,20(sp)
   11144:	dc800417 	ldw	r18,16(sp)
   11148:	dc400317 	ldw	r17,12(sp)
   1114c:	dc000217 	ldw	r16,8(sp)
   11150:	dec00c04 	addi	sp,sp,48
   11154:	f800283a 	ret
   11158:	98800117 	ldw	r2,4(r19)
   1115c:	80c00017 	ldw	r3,0(r16)
   11160:	10bfffc4 	addi	r2,r2,-1
   11164:	17001526 	beq	r2,fp,111bc <__call_exitprocs+0x164>
   11168:	80000015 	stw	zero,0(r16)
   1116c:	183fde26 	beq	r3,zero,110e8 <__alt_mem_Flash_flash_data+0xf40110e8>
   11170:	00800044 	movi	r2,1
   11174:	1708983a 	sll	r4,r2,fp
   11178:	98806217 	ldw	r2,392(r19)
   1117c:	9dc00117 	ldw	r23,4(r19)
   11180:	2084703a 	and	r2,r4,r2
   11184:	1000061e 	bne	r2,zero,111a0 <__call_exitprocs+0x148>
   11188:	183ee83a 	callr	r3
   1118c:	98800117 	ldw	r2,4(r19)
   11190:	15ffc51e 	bne	r2,r23,110a8 <__alt_mem_Flash_flash_data+0xf40110a8>
   11194:	a8800017 	ldw	r2,0(r21)
   11198:	14ffd326 	beq	r2,r19,110e8 <__alt_mem_Flash_flash_data+0xf40110e8>
   1119c:	003fc206 	br	110a8 <__alt_mem_Flash_flash_data+0xf40110a8>
   111a0:	98806317 	ldw	r2,396(r19)
   111a4:	2084703a 	and	r2,r4,r2
   111a8:	1000061e 	bne	r2,zero,111c4 <__call_exitprocs+0x16c>
   111ac:	89400017 	ldw	r5,0(r17)
   111b0:	9009883a 	mov	r4,r18
   111b4:	183ee83a 	callr	r3
   111b8:	003ff406 	br	1118c <__alt_mem_Flash_flash_data+0xf401118c>
   111bc:	9f000115 	stw	fp,4(r19)
   111c0:	003fea06 	br	1116c <__alt_mem_Flash_flash_data+0xf401116c>
   111c4:	89000017 	ldw	r4,0(r17)
   111c8:	183ee83a 	callr	r3
   111cc:	003fef06 	br	1118c <__alt_mem_Flash_flash_data+0xf401118c>
   111d0:	98800017 	ldw	r2,0(r19)
   111d4:	982b883a 	mov	r21,r19
   111d8:	1027883a 	mov	r19,r2
   111dc:	983fb61e 	bne	r19,zero,110b8 <__alt_mem_Flash_flash_data+0xf40110b8>
   111e0:	003fd106 	br	11128 <__alt_mem_Flash_flash_data+0xf4011128>
   111e4:	0005883a 	mov	r2,zero
   111e8:	003ffa06 	br	111d4 <__alt_mem_Flash_flash_data+0xf40111d4>

000111ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   111ec:	defffd04 	addi	sp,sp,-12
   111f0:	df000215 	stw	fp,8(sp)
   111f4:	df000204 	addi	fp,sp,8
   111f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   111fc:	00800074 	movhi	r2,1
   11200:	10951e44 	addi	r2,r2,21625
   11204:	10000005 	stb	zero,0(r2)
   11208:	e0bfff17 	ldw	r2,-4(fp)
   1120c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11210:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11214:	10000226 	beq	r2,zero,11220 <_exit+0x34>
    ALT_SIM_FAIL();
   11218:	002af070 	cmpltui	zero,zero,43969
   1121c:	00000106 	br	11224 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   11220:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11224:	003fff06 	br	11224 <__alt_mem_Flash_flash_data+0xf4011224>
