
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000200a0 memsz 0x000200a0 flags r-x
    LOAD off    0x000210c0 vaddr 0x000200c0 paddr 0x00021fec align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x00023f18 vaddr 0x00023f18 paddr 0x00023f18 align 2**12
         filesz 0x00000000 memsz 0x000254c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f434  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a48  0001f678  0001f678  00020678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  000200c0  00021fec  000210c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000254c4  00023f18  00023f18  00023f18  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000493dc  000493dc  00022fec  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00022fec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022fec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00023010  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034c79  00000000  00000000  000241d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c25f  00000000  00000000  00058e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010799  00000000  00000000  000650a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003fac  00000000  00000000  00075844  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000056ea  00000000  00000000  000797f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  0007eeda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009a048  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  0009a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a1aea  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a1af0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a1af5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a1af6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a1af7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a1afb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a1aff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a1b03  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a1b0c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a1b15  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a1b1e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a1b29  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a1b87  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ac74c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001f678 l    d  .rodata	00000000 .rodata
000200c0 l    d  .rwdata	00000000 .rwdata
00023f18 l    d  .bss	00000000 .bss
000493dc l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001fb0e l     O .rodata	00000010 zeroes.4240
0001fb1e l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001fb2e l     O .rodata	00000010 zeroes.4255
00006fe0 l     F .text	000000bc __sbprintf
0001fb3e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000071f0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008dac l     F .text	00000008 __fp_lock
00008db4 l     F .text	00000008 __fp_unlock
00008dc8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000200c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00020504 l     O .rwdata	00000020 lc_ctype_charset
000204e4 l     O .rwdata	00000020 lc_message_charset
00020524 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001fb70 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001fc94 l     O .rodata	00000010 zeroes.4184
0001fca4 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000d43c l     F .text	000000fc __sprint_r.part.0
0001fcc4 l     O .rodata	00000010 blanks.4199
0001fcb4 l     O .rodata	00000010 zeroes.4200
0000e844 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000fd48 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012474 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012594 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000125c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000126c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000127b4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012898 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012a90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021f60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012cec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00021f64 l     O .rwdata	00000004 lockid
00023fb4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00021f68 l     O .rwdata	00000004 lockid
00023fbc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00014720 l     F .text	00000044 OS_InitMisc
00014764 l     F .text	00000068 OS_InitRdyList
000148c4 l     F .text	000000e0 OS_InitTCBList
00014644 l     F .text	000000dc OS_InitEventList
000147cc l     F .text	0000007c OS_InitTaskIdle
00014848 l     F .text	0000007c OS_InitTaskStat
00014b24 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00016928 l     F .text	00000110 OS_FlagTaskRdy
00016680 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001b958 l     F .text	00000038 alt_dev_reg
00020b0c l     O .rwdata	0000106c JTAG_UART
00021b78 l     O .rwdata	00000030 AV_Config
00021ba8 l     O .rwdata	00000030 Audio_Subsystem_Audio
00021bd8 l     O .rwdata	0000002c Char_LCD_16x2
00021c04 l     O .rwdata	0000002c IrDA
00021c30 l     O .rwdata	0000002c Expansion_JP5
00021c5c l     O .rwdata	0000002c Green_LEDs
00021c88 l     O .rwdata	0000002c HEX3_HEX0
00021cb4 l     O .rwdata	0000002c HEX7_HEX4
00021ce0 l     O .rwdata	0000002c Pushbuttons
00021d0c l     O .rwdata	0000002c Red_LEDs
00021d38 l     O .rwdata	0000002c Slider_Switches
00021d64 l     O .rwdata	00000038 PS2_Port
00021d9c l     O .rwdata	00000038 PS2_Port_Dual
00021dd4 l     O .rwdata	0000002c Serial_Port
00021e00 l     O .rwdata	00000034 USB
00021e34 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00021e7c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00021ed0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c040 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001c2e8 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001cac0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001e2dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001e548 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001e830 l     F .text	00000050 alt_get_errno
0001e880 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024020 g     O .bss	00000004 alt_instruction_exception_handler
0000b8b0 g     F .text	00000074 _mprec_log10
00021fb6 g     O .rwdata	00000002 OSTaskNameSize
0000b99c g     F .text	0000008c __any_on
0000edb0 g     F .text	00000054 _isatty_r
0001fb7c g     O .rodata	00000028 __mprec_tinytens
000129bc g     F .text	000000d4 alt_main
00002ec4 g     F .text	000000a8 _puts_r
000492dc g     O .bss	00000100 alt_irq
0001d69c g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000ee04 g     F .text	0000005c _lseek_r
00017d14 g     F .text	000000d0 OS_MemInit
00021fec g       *ABS*	00000000 __flash_rwdata_start
0001b8f4 g     F .text	00000064 OSTimeSet
0001cc2c g     F .text	0000003c alt_up_character_lcd_send_cmd
00010fdc g     F .text	00000084 .hidden __eqdf2
0001339c g     F .text	00000610 OSEventPendMulti
000493dc g       *ABS*	00000000 __alt_heap_start
0001ee8c g     F .text	00000020 OSTaskCreateHook
00002e88 g     F .text	0000003c printf
00021f8e g     O .rwdata	00000002 OSMboxEn
00023f44 g     O .bss	00000004 random
00013a00 g     F .text	0000007c OSIntEnter
0000f010 g     F .text	0000009c _wcrtomb_r
0000c130 g     F .text	0000005c __sseek
000090fc g     F .text	00000010 __sinit
0001e024 g     F .text	00000100 alt_up_char_buffer_string
0000eebc g     F .text	00000138 __swbuf_r
0001d4bc g     F .text	00000034 read_CE_bit
00021f9e g     O .rwdata	00000002 OSQEn
00001764 g     F .text	000002b8 Tutorial
00009ba8 g     F .text	0000007c _setlocale_r
00008f64 g     F .text	00000068 __sfmoreglue
00013070 g     F .text	000000d0 __malloc_unlock
0001eee8 g     F .text	0000001c OSTaskStatHook
0001d840 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001dd34 g     F .text	00000090 alt_up_rs232_read_fd
00023fc4 g     O .bss	00000001 OSLockNesting
00001a1c g     F .text	000000ec menu
00021fdc g     O .rwdata	00000002 OSDataSize
00023fc5 g     O .bss	00000001 OSRunning
0001df58 g     F .text	000000cc alt_up_char_buffer_draw
0002404c g     O .bss	0000bc44 Singleplayer_stk
00023f18 g     O .bss	00000004 counter3
0000a808 g     F .text	0000015c memmove
0001ef20 g     F .text	0000001c OSInitHookBegin
00021fd4 g     O .rwdata	00000002 OSTmrSize
000090e4 g     F .text	00000018 _cleanup
0000aa88 g     F .text	000000a8 _Balloc
00021f08 g     O .rwdata	00000004 gameModeMenu
00023fc8 g     O .bss	00000004 OSIdleCtr
00011060 g     F .text	000000e0 .hidden __gtdf2
00021f10 g     O .rwdata	00000004 xRechts
0001ec40 g     F .text	00000020 altera_nios2_gen2_irq_init
0001ed0c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001cbb8 g     F .text	00000074 get_DDRAM_addr
00014e5c g     F .text	000002d4 OS_TCBInit
00021f20 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
00021fda g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00021f7a g     O .rwdata	00000002 OSEventSize
00023fcc g     O .bss	00000001 OSPrioHighRdy
0000ed58 g     F .text	00000058 _fstat_r
0001eeac g     F .text	00000020 OSTaskDelHook
00023fa0 g     O .bss	00000004 errno
0000c0ac g     F .text	00000008 __seofread
0001ecec g       .text	00000000 OSStartHighRdy
00023f48 g     O .bss	00000004 pixel_buffer_y
0001a1f8 g     F .text	000001ec OSTaskCreateExt
0000c404 g     F .text	00001038 ___svfiprintf_internal_r
000161cc g     F .text	00000068 OSFlagPendGetFlagsRdy
00021fba g     O .rwdata	00000002 OSTaskStatStkSize
000152bc g     F .text	00000308 OSFlagAccept
000183e8 g     F .text	000000b8 OSQFlush
00017de4 g     F .text	00000140 OSQAccept
00023fac g     O .bss	00000004 alt_argv
000015d8 g     F .text	0000018c endTutorial
00023f4c g     O .bss	00000004 score1
00029efc g       *ABS*	00000000 _gp
0001a03c g     F .text	000001bc OSTaskCreate
00019afc g     F .text	00000540 OSTaskChangePrio
00023fc0 g     O .bss	00000004 alt_heapsem
000026a0 g     F .text	0000003c del_middenlijn
00015130 g     F .text	0000018c OSDebugInit
0001a3e4 g     F .text	000003e0 OSTaskDel
00021f14 g     O .rwdata	00000004 xBoven
0002098c g     O .rwdata	00000180 alt_fd_list
00021f28 g     O .rwdata	00000004 onePress
000460b8 g     O .bss	00000370 OSFlagTbl
00014430 g     F .text	000000b4 OS_EventTaskRemove
0001e488 g     F .text	00000090 alt_find_dev
0000a6d0 g     F .text	00000138 memcpy
00021fa4 g     O .rwdata	00000002 OSRdyTblSize
0001cdc8 g     F .text	00000050 alt_up_character_lcd_write_fd
0001e124 g     F .text	0000005c alt_up_char_buffer_clear
00008dbc g     F .text	0000000c _cleanup_r
0001229c g     F .text	000000d0 .hidden __floatsidf
0001e608 g     F .text	00000078 alt_io_redirect
00011140 g     F .text	000000e0 .hidden __ltdf2
0001f678 g       *ABS*	00000000 __DTOR_END__
0001d348 g     F .text	00000090 alt_up_irda_write_fd
0001dcc0 g     F .text	00000074 alt_up_rs232_read_data
00002f6c g     F .text	00000014 puts
0001f230 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013140 g     F .text	00000120 OSEventNameGet
00021f88 g     O .rwdata	00000002 OSFlagMax
0000bf90 g     F .text	00000074 __fpclassifyd
00023f78 g     O .bss	00000004 last
0000b80c g     F .text	000000a4 __ratio
00013a7c g     F .text	000000f4 OSIntExit
0000e820 g     F .text	00000024 __vfiprintf_internal
00021fc2 g     O .rwdata	00000002 OSTCBSize
00023fcd g     O .bss	00000001 OSPrioCur
0001d144 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001c54c g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002e5c g     F .text	0000002c _printf_r
0000fe64 g     F .text	00000008 .hidden __udivsi3
00012710 g     F .text	000000a4 isatty
00021fa8 g     O .rwdata	00000002 OSStkWidth
0001fbcc g     O .rodata	000000c8 __mprec_tens
00021f9c g     O .rwdata	00000002 OSPtrSize
00009c24 g     F .text	0000000c __locale_charset
00021f7c g     O .rwdata	00000002 OSEventTblSize
0001d0e8 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00021f1c g     O .rwdata	00000004 xMenu
0001ec60 g       .text	00000000 OSCtxSw
0001f1a4 g     F .text	0000008c alt_icache_flush
00023f9c g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00023fd0 g     O .bss	00000004 OSTCBList
00023f1c g     O .bss	00000004 gpio_dev
00021f04 g     O .rwdata	00000004 leven
00023fa4 g     O .bss	00000004 alt_fd_list_lock
00021f38 g     O .rwdata	00000004 __mb_cur_max
00009c54 g     F .text	0000000c _localeconv_r
0000ae94 g     F .text	0000003c __i2b
00009560 g     F .text	000004c0 __sfvwrite_r
00046428 g     O .bss	00000c30 OSMemTbl
00023fd4 g     O .bss	00000001 OSTickStepState
0000c004 g     F .text	00000054 _sbrk_r
0002fc90 g     O .bss	00002004 menu_stk
00021fa0 g     O .rwdata	00000002 OSQMax
00047058 g     O .bss	00000800 OSTaskStatStk
00017944 g     F .text	000000f8 OSMemNameGet
00021f80 g     O .rwdata	00000002 OSFlagEn
0000ee60 g     F .text	0000005c _read_r
00021fc6 g     O .rwdata	00000002 OSTimeTickHookEn
00018908 g     F .text	00000168 OSQPost
00016a38 g     F .text	000000a0 OS_FlagUnlink
00021f58 g     O .rwdata	00000004 alt_max_fd
0001dc3c g     F .text	00000044 alt_up_rs232_check_parity
000149f4 g     F .text	00000064 OS_MemCopy
00014a58 g     F .text	000000cc OS_Sched
0000ea74 g     F .text	000000f0 _fclose_r
00017854 g     F .text	000000f0 OSMemGet
00017550 g     F .text	00000110 OSMboxQuery
0001aac4 g     F .text	000001c0 OSTaskNameSet
0001d4f0 g     F .text	00000030 read_num_bytes_available
00008d7c g     F .text	00000030 fflush
00023f98 g     O .bss	00000004 __malloc_max_sbrked_mem
00023fd8 g     O .bss	00000004 OSCtxSwCtr
0001ef04 g     F .text	0000001c OSTimeTickHook
0001e680 g     F .text	000001b0 alt_irq_register
00021f8a g     O .rwdata	00000002 OSFlagNameSize
0001d458 g     F .text	00000034 read_RI_bit
000144e4 g     F .text	000000fc OS_EventTaskRemoveMulti
00023f20 g     O .bss	00000004 controllerSem
0000fe74 g     F .text	0000089c .hidden __adddf3
000142e4 g     F .text	0000014c OS_EventTaskWaitMulti
0000b5b4 g     F .text	0000011c __b2d
00021fa2 g     O .rwdata	00000002 OSQSize
0000f7b8 g     F .text	00000590 .hidden __umoddi3
000128e8 g     F .text	000000d4 lseek
0001940c g     F .text	00000268 OSSemPend
00021f30 g     O .rwdata	00000004 _global_impure_ptr
0000ba28 g     F .text	00000568 _realloc_r
00023f74 g     O .bss	00000004 vorige
00021f8c g     O .rwdata	00000002 OSLowestPrio
000493dc g       *ABS*	00000000 __bss_end
0001ef74 g     F .text	00000020 OSTCBInitHook
00021fd2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001eb3c g     F .text	00000104 alt_tick
000172e4 g     F .text	00000110 OSMboxPost
00023f24 g     O .bss	00000004 counter1
0000f1f8 g     F .text	000005c0 .hidden __udivdi3
0000eb78 g     F .text	00000184 _fputwc_r
00021f74 g     O .rwdata	00000002 OSEventEn
0001fba4 g     O .rodata	00000028 __mprec_bigtens
0000ac78 g     F .text	00000104 __s2b
00021fce g     O .rwdata	00000002 OSTmrCfgNameSize
0001236c g     F .text	000000a4 .hidden __floatunsidf
0000b35c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001d554 g     F .text	0000002c read_data_byte
0000911c g     F .text	00000018 __fp_lock_all
00016844 g     F .text	000000e4 OS_FlagInit
0001eaa4 g     F .text	00000098 alt_alarm_stop
00023f28 g     O .bss	00000004 Flags_Games
0001d48c g     F .text	00000030 read_RE_bit
00021fb0 g     O .rwdata	00000002 OSTaskIdleStkSize
00024014 g     O .bss	00000004 alt_irq_active
00018ff4 g     F .text	000000b0 OSSemAccept
000025a8 g     F .text	00000090 VGA_text
00017b54 g     F .text	000000d8 OSMemPut
00023f50 g     O .bss	00000004 pixel_buffer_x
00017660 g     F .text	000001f4 OSMemCreate
00023fdc g     O .bss	00000004 OSIdleCtrMax
00031c94 g     O .bss	00002004 controller1_stk
0001d184 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00020964 g     O .rwdata	00000028 alt_dev_null
00021fc4 g     O .rwdata	00000002 OSTicksPerSec
0001d05c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001d418 g     F .text	00000040 alt_up_parallel_port_open_dev
0001ec60 g       .text	00000000 OSIntCtxSw
0001d6f8 g     F .text	00000074 alt_up_ps2_write_data_byte
00000e68 g     F .text	0000017c endGame
0001e2c0 g     F .text	0000001c alt_dcache_flush_all
0000ad7c g     F .text	00000068 __hi0bits
00012214 g     F .text	00000088 .hidden __fixdfsi
00023fe0 g     O .bss	00000004 OSTCBFreeList
00021fec g       *ABS*	00000000 __ram_rwdata_end
00019674 g     F .text	0000016c OSSemPendAbort
00021f50 g     O .rwdata	00000008 alt_dev_list
00012d3c g     F .text	000000f8 write
00033c98 g     O .bss	00002004 Tutorial_stk
00021fc8 g     O .rwdata	00000002 OSVersionNbr
000200c0 g       *ABS*	00000000 __ram_rodata_end
00012610 g     F .text	000000b0 fstat
0001ddc4 g     F .text	00000094 alt_up_rs232_write_fd
00001b08 g     F .text	00000430 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011140 g     F .text	000000e0 .hidden __ledf2
00021f70 g     O .rwdata	00000004 OSEndiannessTest
0000b0cc g     F .text	00000140 __pow5mult
0000d550 g     F .text	000012d0 ___vfiprintf_internal_r
00023f90 g     O .bss	00000004 __nlocale_changed
0000fe6c g     F .text	00000008 .hidden __umodsi3
00021f82 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
000493dc g       *ABS*	00000000 end
0001da34 g     F .text	00000098 alt_up_ps2_write_fd
0001d1c0 g     F .text	00000044 alt_up_irda_check_parity
0001de98 g     F .text	00000080 alt_up_char_buffer_init
000020f8 g     F .text	000001d0 teken_menu
0001bf00 g     F .text	00000140 altera_avalon_jtag_uart_init
00014cb8 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	000004b8 Game
00021f00 g     O .rwdata	00000004 check
0001f678 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001cb38 g     F .text	00000080 alt_avalon_timer_sc_init
00012410 g     F .text	00000064 .hidden __clzsi2
0001c800 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000910c g     F .text	00000004 __sfp_lock_acquire
0000a5e8 g     F .text	000000e8 memchr
000149a4 g     F .text	00000050 OS_MemClr
0001ccdc g     F .text	00000078 alt_up_character_lcd_write
0000506c g     F .text	00001f50 ___vfprintf_internal_r
0001ed30 g     F .text	0000015c OSTaskStkInit
00002f80 g     F .text	00000058 _sprintf_r
00009270 g     F .text	000002f0 _free_r
00009c30 g     F .text	00000010 __locale_mb_cur_max
00014040 g     F .text	00000198 OS_EventTaskRdy
0001f4a8 g     F .text	00000194 __call_exitprocs
00023fe4 g     O .bss	00000001 OSCPUUsage
00023f8c g     O .bss	00000004 __mlocale_changed
00021f3c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0000274c g     F .text	0000003c deleteNummer
00024018 g     O .bss	00000004 _alt_tick_rate
000184a0 g     F .text	000002fc OSQPend
0001b3f0 g     F .text	00000148 OSTimeDly
00035c9c g     O .bss	00002004 controller2_stk
0000b20c g     F .text	00000150 __lshift
0002401c g     O .bss	00000004 _alt_nticks
00012ae0 g     F .text	000000fc read
0001b9c4 g     F .text	000003d8 alt_sys_init
0001cf14 g     F .text	00000088 alt_up_character_lcd_shift_display
0000c238 g     F .text	000001cc __ssprint_r
0001f394 g     F .text	00000114 __register_exitproc
00023fe5 g     O .bss	00000001 OSTaskCtr
0001d954 g     F .text	00000054 alt_up_ps2_clear_fifo
0001dc00 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00023f54 g     O .bss	00000004 score2
00023f2c g     O .bss	00000004 MailBox2
000024f4 g     F .text	000000b4 VGA_box
0001b538 g     F .text	00000168 OSTimeDlyHMSM
00001130 g     F .text	00000420 Singleplayer
0000aed0 g     F .text	000001fc __multiply
0001cf9c g     F .text	0000008c alt_up_character_lcd_erase_pos
0001c3f8 g     F .text	00000068 altera_avalon_jtag_uart_close
000200c0 g       *ABS*	00000000 __ram_rwdata_start
0001f678 g       *ABS*	00000000 __ram_rodata_start
00024024 g     O .bss	00000028 __malloc_current_mallinfo
00021f76 g     O .rwdata	00000002 OSEventMax
0000b6d0 g     F .text	0000013c __d2b
000197e0 g     F .text	00000110 OSSemPost
00013bf8 g     F .text	000000d8 OSSchedUnlock
00002638 g     F .text	00000068 draw_middenlijn
0001bd9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001f0a8 g     F .text	000000fc alt_get_fd
00023fe8 g     O .bss	00000004 OSMemFreeList
00013d3c g     F .text	000000ac OSStatInit
000165bc g     F .text	000000c4 OSFlagQuery
00021fac g     O .rwdata	00000002 OSTaskCreateExtEn
0000e95c g     F .text	00000054 _close_r
0001f318 g     F .text	0000007c memcmp
00014024 g     F .text	0000001c OS_Dummy
0001be5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000493dc g       *ABS*	00000000 __alt_stack_base
0001beac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023f7c g     O .bss	00000004 changed
0001d090 g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000709c g     F .text	00000154 __swsetup_r
00047858 g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00010710 g     F .text	000008cc .hidden __divdf3
00008fcc g     F .text	00000118 __sfp
0000b924 g     F .text	00000078 __copybits
0002055c g     O .rwdata	00000408 __malloc_av_
00023f58 g     O .bss	00000004 ALT_y
00009118 g     F .text	00000004 __sinit_lock_release
00023fec g     O .bss	00000004 OSTCBHighRdy
00011220 g     F .text	00000724 .hidden __muldf3
0000c058 g     F .text	00000054 __sread
00023ff0 g     O .bss	00000004 OSQFreeList
0001db64 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001ef94 g     F .text	00000114 alt_find_file
0001e32c g     F .text	000000a4 alt_dev_llist_insert
00012f50 g     F .text	00000120 __malloc_lock
00012c3c g     F .text	000000b0 sbrk
000030dc g     F .text	00001f90 ___svfprintf_internal_r
00023f5c g     O .bss	00000004 ALT_inc_y
00013260 g     F .text	0000013c OSEventNameSet
00008d20 g     F .text	0000005c _fflush_r
0000e9b0 g     F .text	000000c4 _calloc_r
00023ff4 g     O .bss	00000001 OSRdyGrp
00023f18 g       *ABS*	00000000 __bss_start
0000a964 g     F .text	00000124 memset
000022c8 g     F .text	0000022c main
00023fb0 g     O .bss	00000004 alt_envp
00023f94 g     O .bss	00000004 __malloc_max_total_mem
0001df18 g     F .text	00000040 alt_up_char_buffer_open_dev
0001bdfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000eff4 g     F .text	0000001c __swbuf
0001fdf0 g     O .rodata	00000100 OSUnMapTbl
00021fa6 g     O .rwdata	00000002 OSSemEn
0001ce8c g     F .text	00000088 alt_up_character_lcd_shift_cursor
00016234 g     F .text	00000388 OSFlagPost
0000c18c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000eb64 g     F .text	00000014 fclose
000141d8 g     F .text	0000010c OS_EventTaskWait
0001d8e4 g     F .text	00000070 alt_up_ps2_read_data_byte
00023f84 g     O .bss	00000004 timeout
00014d94 g     F .text	000000c8 OS_TaskStatStkChk
0001a7c4 g     F .text	00000158 OSTaskDelReq
000073f0 g     F .text	00001728 _dtoa_r
00009e40 g     F .text	000007a8 _malloc_r
0000f16c g     F .text	00000030 __ascii_wctomb
00021f5c g     O .rwdata	00000004 alt_errno
00013cd0 g     F .text	0000006c OSStart
00012ef4 g     F .text	0000005c __env_unlock
00009a20 g     F .text	000000c4 _fwalk
0001ac84 g     F .text	000001f8 OSTaskResume
00017c2c g     F .text	000000e8 OSMemQuery
00021fb8 g     O .rwdata	00000002 OSTaskStatEn
00037ca0 g     O .bss	0000bc44 Game_stk
0001d204 g     F .text	00000040 alt_up_irda_write_data
00021f92 g     O .rwdata	00000002 OSMemMax
00018a70 g     F .text	00000170 OSQPostFront
0001dacc g     F .text	00000040 alt_up_ps2_open_dev
0000fdb4 g     F .text	00000054 .hidden __divsi3
00023ff5 g     O .bss	00000003 OSRdyTbl
00021f6c g     O .rwdata	00000002 OSDebugEn
0001cc9c g     F .text	00000040 alt_up_character_lcd_open_dev
0000914c g     F .text	00000124 _malloc_trim_r
0001d644 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001f678 g       *ABS*	00000000 __CTOR_END__
00021f84 g     O .rwdata	00000002 OSFlagNodeSize
00021fcc g     O .rwdata	00000002 OSTmrCfgMax
0001cc68 g     F .text	00000034 alt_up_character_lcd_init
0000c194 g     F .text	000000a4 strcmp
00017f24 g     F .text	000001fc OSQCreate
0001a91c g     F .text	000001a8 OSTaskNameGet
0001f678 g       *ABS*	00000000 __flash_rodata_start
00018be0 g     F .text	0000020c OSQPostOpt
00013de8 g     F .text	0000021c OSTimeTick
00021fb4 g     O .rwdata	00000002 OSTaskMax
0001f678 g       *ABS*	00000000 __DTOR_LIST__
000190a4 g     F .text	00000100 OSSemCreate
00021fd8 g     O .rwdata	00000002 OSTmrWheelSize
0001de58 g     F .text	00000040 alt_up_rs232_open_dev
00023f60 g     O .bss	00000004 gameSem
00010fdc g     F .text	00000084 .hidden __nedf2
00021fae g     O .rwdata	00000002 OSTaskDelEn
000198f0 g     F .text	00000110 OSSemQuery
00018120 g     F .text	000002c8 OSQDel
0001879c g     F .text	0000016c OSQPendAbort
0001b990 g     F .text	00000034 alt_irq_init
00012bdc g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001d520 g     F .text	00000034 read_data_valid
00002fd8 g     F .text	0000006c sprintf
0001d028 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001fcd4 g     O .rodata	00000100 .hidden __clz_tab
00023f88 g     O .bss	00000004 _PathLocale
0001d7dc g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001f2cc g     F .text	00000014 atexit
000026dc g     F .text	00000070 del_number
0000e900 g     F .text	0000005c _write_r
00013b70 g     F .text	00000088 OSSchedLock
00009c60 g     F .text	0000001c setlocale
000155c4 g     F .text	00000128 OSFlagCreate
00021f34 g     O .rwdata	00000004 _impure_ptr
00023fa8 g     O .bss	00000004 alt_argc
00008b18 g     F .text	00000208 __sflush_r
0001e42c g     F .text	0000005c _do_dtors
00009c4c g     F .text	00000008 __locale_cjk_lang
00021f7e g     O .rwdata	00000002 OSEventMultiEn
000156ec g     F .text	00000270 OSFlagDel
00023ff8 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00017178 g     F .text	0000016c OSMboxPendAbort
0000b554 g     F .text	00000060 __ulp
00021fca g     O .rwdata	00000002 OSTmrEn
00015bdc g     F .text	000005f0 OSFlagPend
00009134 g     F .text	00000018 __fp_unlock_all
00021f48 g     O .rwdata	00000008 alt_fs_list
00014b94 g     F .text	00000074 OS_StrCopy
0001db0c g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001dc80 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
00021f94 g     O .rwdata	00000002 OSMemNameSize
00023f64 g     O .bss	00000004 ALT_x1
0001ef3c g     F .text	0000001c OSInitHookEnd
000438e4 g     O .bss	000007d0 Messages
00002788 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00021fc0 g     O .rwdata	00000002 OSTCBPrioTblMax
00009c7c g     F .text	0000000c localeconv
00021fbc g     O .rwdata	00000002 OSTaskStatStkChkEn
00016b70 g     F .text	000000fc OSMboxCreate
00021f90 g     O .rwdata	00000002 OSMemEn
00021efc g     O .rwdata	00000004 first
00021f9a g     O .rwdata	00000002 OSMutexEn
00023f40 g     O .bss	00000004 score3
00021fec g       *ABS*	00000000 _edata
00021f2c g     O .rwdata	00000004 interval_timer_ptr
000493dc g       *ABS*	00000000 _end
00023ffc g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001c460 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001b6a0 g     F .text	000001f0 OSTimeDlyResume
00015a8c g     F .text	00000150 OSFlagNameSet
00001f78 g     F .text	000000a0 clearText
00016ed4 g     F .text	000002a4 OSMboxPend
0001ae7c g     F .text	000001c8 OSTaskStkChk
00021f96 g     O .rwdata	00000002 OSMemSize
0000c0b4 g     F .text	0000007c __swrite
00021f40 g     O .rwdata	00000004 __malloc_trim_threshold
00009c40 g     F .text	0000000c __locale_msgcharset
00024000 g     O .bss	00000004 OSTCBCur
0001f2e0 g     F .text	00000038 exit
00002dfc g     F .text	00000060 checkIDScore
0001d244 g     F .text	00000074 alt_up_irda_read_data
00021f98 g     O .rwdata	00000002 OSMemTblSize
00009ae4 g     F .text	000000c4 _fwalk_reent
0001d580 g     F .text	000000c4 alt_up_ps2_init
0000b3bc g     F .text	00000198 __mdiff
0000fe08 g     F .text	0000005c .hidden __modsi3
000440b4 g     O .bss	00002004 menu_stk2
00016ad8 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009110 g     F .text	00000004 __sfp_lock_release
000139ac g     F .text	00000054 OSInit
0001b258 g     F .text	0000012c OSTaskQuery
0001cd54 g     F .text	00000074 alt_up_character_lcd_string
00018f48 g     F .text	000000ac OS_QInit
00014c08 g     F .text	00000054 OS_StrLen
0001d3d8 g     F .text	00000040 alt_up_irda_open_dev
00017a3c g     F .text	00000118 OSMemNameSet
00000c44 g     F .text	00000224 gescoord
00021fb2 g     O .rwdata	00000002 OSTaskProfileEn
00001550 g     F .text	00000088 tutorialUitleg
00024004 g     O .bss	00000004 OSTime
00023f30 g     O .bss	00000004 Flags
00002018 g     F .text	00000058 tekenBox
00047a38 g     O .bss	00000800 OSTaskIdleStk
0001f63c g     F .text	0000003c _exit
00023f68 g     O .bss	00000004 ALT_inc_x
000173f4 g     F .text	0000015c OSMboxPostOpt
0001e180 g     F .text	00000140 alt_alarm_start
0001595c g     F .text	00000130 OSFlagNameGet
0001b890 g     F .text	00000064 OSTimeGet
00009c88 g     F .text	000001b8 __smakebuf_r
0001d76c g     F .text	00000070 alt_up_ps2_wait_for_ack
00003044 g     F .text	00000098 strlen
0001eecc g     F .text	0000001c OSTaskSwHook
0001e94c g     F .text	00000158 open
00048238 g     O .bss	00000b40 OSEventTbl
00011060 g     F .text	000000e0 .hidden __gedf2
00048d78 g     O .bss	00000510 OSTCBTbl
00019a00 g     F .text	000000fc OSSemSet
00021f24 g     O .rwdata	00000004 eenkeer
00001f38 g     F .text	00000040 clearScreen
00021f44 g     O .rwdata	00000004 __wctomb
0000d538 g     F .text	00000018 __sprint_r
00023f6c g     O .bss	00000004 ALT_x2
0001e518 g     F .text	00000030 alt_icache_flush_all
0001ce18 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00021fe0 g     O .rwdata	00000004 alt_priority_mask
000191a4 g     F .text	00000268 OSSemDel
00024008 g     O .bss	00000004 OSFlagFreeList
00021f78 g     O .rwdata	00000002 OSEventNameSize
00016c6c g     F .text	00000268 OSMboxDel
00006fbc g     F .text	00000024 __vfprintf_internal
0002400c g     O .bss	00000001 OSStatRdy
00023f34 g     O .bss	00000004 MailBox
00049288 g     O .bss	00000054 OSTCBPrioTbl
0000f19c g     F .text	0000005c _wctomb_r
00012e34 g     F .text	000000c0 __env_lock
0001d9a8 g     F .text	0000008c alt_up_ps2_read_fd
00021fbe g     O .rwdata	00000002 OSTaskSwHookEn
00021f0c g     O .rwdata	00000004 xLinks
00011944 g     F .text	000008d0 .hidden __subdf3
0001d2b8 g     F .text	00000090 alt_up_irda_read_fd
0000ade4 g     F .text	000000b0 __lo0bits
00021fe4 g     O .rwdata	00000008 alt_alarm_list
00021f86 g     O .rwdata	00000002 OSFlagWidth
0001e3d0 g     F .text	0000005c _do_ctors
0001dbc0 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f0ac g     F .text	000000c0 wcrtomb
000124c4 g     F .text	000000d0 close
00023fb8 g     O .bss	00000004 alt_envsem
00024010 g     O .bss	00000004 OSIdleCtrRun
00021f18 g     O .rwdata	00000004 xOnder
00014004 g     F .text	00000020 OSVersion
00021fd0 g     O .rwdata	00000002 OSTmrCfgWheelSize
00012818 g     F .text	00000080 alt_load
0001b384 g     F .text	0000006c OS_TaskStkClr
00002070 g     F .text	00000088 tekenBox2
00021faa g     O .rwdata	00000002 OSTaskCreateEn
00023f80 g     O .bss	00000004 menuSem
000145e0 g     F .text	00000064 OS_EventWaitListInit
0000ecfc g     F .text	0000005c fputwc
0001ef58 g     F .text	0000001c OSTaskIdleHook
00023f70 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
00009114 g     F .text	00000004 __sinit_lock_acquire
0000ab58 g     F .text	00000120 __multadd
00000fe4 g     F .text	0000014c endSingleplayer
0001b044 g     F .text	00000214 OSTaskSuspend
0000ab30 g     F .text	00000028 _Bfree
00023f38 g     O .bss	00000004 counter2
00023f3c g     O .bss	00000004 Flags_Tutorial
00014c5c g     F .text	0000005c OS_TaskIdle
00021fd6 g     O .rwdata	00000002 OSTmrTblSize
00018dec g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013a000 	call	13a00 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	10a4b704 	addi	r2,r2,-27940
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	10a4b704 	addi	r2,r2,-27940
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013a7c0 	call	13a7c <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a84917 	ldw	r2,-24284(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a84917 	ldw	r2,-24284(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a7bf14 	ori	gp,gp,40700
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	108fc614 	ori	r2,r2,16152

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18e4f714 	ori	r3,r3,37852

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00128180 	call	12818 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00129bc0 	call	129bc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80d17 	ldw	r3,-24524(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	0015bdc0 	call	15bdc <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80d17 	ldw	r3,-24524(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	0015bdc0 	call	15bdc <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e80e17 	ldw	r3,-24520(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	00172e40 	call	172e4 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80d17 	ldw	r3,-24524(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	0015bdc0 	call	15bdc <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80c17 	ldw	r3,-24528(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	00172e40 	call	172e4 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001b3f00 	call	1b3f0 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	213d9e04 	addi	r4,r4,-2440
     3b8:	001d4180 	call	1d418 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	213da304 	addi	r4,r4,-2420
     3c8:	001d4180 	call	1d418 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	213da904 	addi	r4,r4,-2396
     3d8:	001d4180 	call	1d418 <alt_up_parallel_port_open_dev>
     3dc:	d0a80815 	stw	r2,-24544(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80817 	ldw	r2,-24544(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80817 	ldw	r2,-24544(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	00024f40 	call	24f4 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	00024f40 	call	24f4 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	00024f40 	call	24f4 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	00024f40 	call	24f4 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81315 	stw	r2,-24500(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	00024f40 	call	24f4 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e80b17 	ldw	r3,-24532(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	0015bdc0 	call	15bdc <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e80e17 	ldw	r3,-24520(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	0016ed40 	call	16ed4 <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e80c17 	ldw	r3,-24528(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	0016ed40 	call	16ed4 <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81417 	ldw	r3,-24496(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	00027880 	call	2788 <draw_number>
			}
			if (score2 == i) {
     864:	d0e81617 	ldw	r3,-24488(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	00027880 	call	2788 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81417 	ldw	r2,-24496(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81617 	ldw	r2,-24488(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281415 	stw	zero,-24496(gp)
				score2 =0;
     898:	d0281615 	stw	zero,-24488(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	00026380 	call	2638 <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000231e 	bne	r2,zero,950 <Game+0x1c4>
			del_middenlijn();
     8c4:	00026a00 	call	26a0 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
     8c8:	e0bffb17 	ldw	r2,-20(fp)
     8cc:	11400017 	ldw	r5,0(r2)
     8d0:	e0bffb17 	ldw	r2,-20(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	10c00c84 	addi	r3,r2,50
     8dc:	00803fc4 	movi	r2,255
     8e0:	d8800015 	stw	r2,0(sp)
     8e4:	01004b04 	movi	r4,300
     8e8:	01804c44 	movi	r6,305
     8ec:	180f883a 	mov	r7,r3
     8f0:	00024f40 	call	24f4 <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8f4:	01000504 	movi	r4,20
     8f8:	01400504 	movi	r5,20
     8fc:	018000b4 	movhi	r6,2
     900:	31bdae04 	addi	r6,r6,-2376
     904:	00025a80 	call	25a8 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     908:	0009883a 	mov	r4,zero
     90c:	01400044 	movi	r5,1
     910:	000d883a 	mov	r6,zero
     914:	000f883a 	mov	r7,zero
     918:	001b5380 	call	1b538 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     91c:	01000504 	movi	r4,20
     920:	01400504 	movi	r5,20
     924:	018000b4 	movhi	r6,2
     928:	31bdb804 	addi	r6,r6,-2336
     92c:	00025a80 	call	25a8 <VGA_text>



			del_number(1);
     930:	01000044 	movi	r4,1
     934:	00026dc0 	call	26dc <del_number>
			del_number(2);
     938:	01000084 	movi	r4,2
     93c:	00026dc0 	call	26dc <del_number>

			score1 = 0;
     940:	d0281415 	stw	zero,-24496(gp)
			score2 = 0;
     944:	d0281615 	stw	zero,-24488(gp)

			i = 0;
     948:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     94c:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     950:	010000c4 	movi	r4,3
     954:	000039c0 	call	39c <controller>
     958:	10800058 	cmpnei	r2,r2,1
     95c:	1000a41e 	bne	r2,zero,bf0 <Game+0x464>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     960:	d1281a17 	ldw	r4,-24472(gp)
     964:	d1681717 	ldw	r5,-24484(gp)
     968:	d0a81a17 	ldw	r2,-24472(gp)
     96c:	10c00144 	addi	r3,r2,5
     970:	d0a81717 	ldw	r2,-24484(gp)
     974:	10800144 	addi	r2,r2,5
     978:	d8000015 	stw	zero,0(sp)
     97c:	180d883a 	mov	r6,r3
     980:	100f883a 	mov	r7,r2
     984:	00024f40 	call	24f4 <VGA_box>
			if (first == 1) {
     988:	d0a00017 	ldw	r2,-32768(gp)
     98c:	10800058 	cmpnei	r2,r2,1
     990:	10000f1e 	bne	r2,zero,9d0 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     994:	d0a81a17 	ldw	r2,-24472(gp)
     998:	10c02804 	addi	r3,r2,160
     99c:	d0a81b17 	ldw	r2,-24468(gp)
     9a0:	1885883a 	add	r2,r3,r2
     9a4:	d0a81a15 	stw	r2,-24472(gp)
				ALT_x2 += ALT_inc_x;
     9a8:	d0e81c17 	ldw	r3,-24464(gp)
     9ac:	d0a81b17 	ldw	r2,-24468(gp)
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	d0a81c15 	stw	r2,-24464(gp)
				ALT_y += ALT_inc_y;
     9b8:	d0e81717 	ldw	r3,-24484(gp)
     9bc:	d0a81817 	ldw	r2,-24480(gp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	d0a81715 	stw	r2,-24484(gp)
				first = 0;
     9c8:	d0200015 	stw	zero,-32768(gp)
     9cc:	00000c06 	br	a00 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
     9d0:	d0e81a17 	ldw	r3,-24472(gp)
     9d4:	d0a81b17 	ldw	r2,-24468(gp)
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	d0a81a15 	stw	r2,-24472(gp)
				ALT_x2 += ALT_inc_x;
     9e0:	d0e81c17 	ldw	r3,-24464(gp)
     9e4:	d0a81b17 	ldw	r2,-24468(gp)
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	d0a81c15 	stw	r2,-24464(gp)
				ALT_y += ALT_inc_y;
     9f0:	d0e81717 	ldw	r3,-24484(gp)
     9f4:	d0a81817 	ldw	r2,-24480(gp)
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	d0a81715 	stw	r2,-24484(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     a00:	d1281a17 	ldw	r4,-24472(gp)
     a04:	d1681717 	ldw	r5,-24484(gp)
     a08:	d0a81a17 	ldw	r2,-24472(gp)
     a0c:	11800144 	addi	r6,r2,5
     a10:	d0a81717 	ldw	r2,-24484(gp)
     a14:	10c00144 	addi	r3,r2,5
     a18:	00804034 	movhi	r2,256
     a1c:	10bfffc4 	addi	r2,r2,-1
     a20:	d8800015 	stw	r2,0(sp)
     a24:	180f883a 	mov	r7,r3
     a28:	00024f40 	call	24f4 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a2c:	d0e81717 	ldw	r3,-24484(gp)
     a30:	d0a81317 	ldw	r2,-24500(gp)
     a34:	18800326 	beq	r3,r2,a44 <Game+0x2b8>
     a38:	d0a81717 	ldw	r2,-24484(gp)
     a3c:	10800118 	cmpnei	r2,r2,4
     a40:	1000031e 	bne	r2,zero,a50 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
     a44:	d0a81817 	ldw	r2,-24480(gp)
     a48:	0085c83a 	sub	r2,zero,r2
     a4c:	d0a81815 	stw	r2,-24480(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a50:	d0a81a17 	ldw	r2,-24472(gp)
     a54:	1000071e 	bne	r2,zero,a74 <Game+0x2e8>
				score2++;
     a58:	d0a81617 	ldw	r2,-24488(gp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	d0a81615 	stw	r2,-24488(gp)
				gescoord(2);
     a64:	01000084 	movi	r4,2
     a68:	0000c440 	call	c44 <gescoord>
				del_number(2);
     a6c:	01000084 	movi	r4,2
     a70:	00026dc0 	call	26dc <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a74:	d0e81c17 	ldw	r3,-24464(gp)
     a78:	d0a81517 	ldw	r2,-24492(gp)
     a7c:	1880071e 	bne	r3,r2,a9c <Game+0x310>
				score1++;
     a80:	d0a81417 	ldw	r2,-24496(gp)
     a84:	10800044 	addi	r2,r2,1
     a88:	d0a81415 	stw	r2,-24496(gp)
				gescoord(1);
     a8c:	01000044 	movi	r4,1
     a90:	0000c440 	call	c44 <gescoord>
				del_number(1);
     a94:	01000044 	movi	r4,1
     a98:	00026dc0 	call	26dc <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a9c:	d0a81a17 	ldw	r2,-24472(gp)
     aa0:	10800558 	cmpnei	r2,r2,21
     aa4:	10000d1e 	bne	r2,zero,adc <Game+0x350>
     aa8:	e0bffa17 	ldw	r2,-24(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	10fffe84 	addi	r3,r2,-6
     ab4:	d0a81717 	ldw	r2,-24484(gp)
     ab8:	1880080e 	bge	r3,r2,adc <Game+0x350>
     abc:	e0bffa17 	ldw	r2,-24(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	10800c84 	addi	r2,r2,50
     ac8:	d0e81717 	ldw	r3,-24484(gp)
     acc:	1880030e 	bge	r3,r2,adc <Game+0x350>
				ALT_inc_x = -(ALT_inc_x);
     ad0:	d0a81b17 	ldw	r2,-24468(gp)
     ad4:	0085c83a 	sub	r2,zero,r2
     ad8:	d0a81b15 	stw	r2,-24468(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     adc:	d0a81a17 	ldw	r2,-24472(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	1000081e 	bne	r2,zero,b08 <Game+0x37c>
     ae8:	d0a81a17 	ldw	r2,-24472(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000051e 	bne	r2,zero,b08 <Game+0x37c>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10fffe84 	addi	r3,r2,-6
     b00:	d0a81717 	ldw	r2,-24484(gp)
     b04:	18800b26 	beq	r3,r2,b34 <Game+0x3a8>
     b08:	d0a81a17 	ldw	r2,-24472(gp)
     b0c:	10800548 	cmpgei	r2,r2,21
     b10:	10000b1e 	bne	r2,zero,b40 <Game+0x3b4>
     b14:	d0a81a17 	ldw	r2,-24472(gp)
     b18:	108003d0 	cmplti	r2,r2,15
     b1c:	1000081e 	bne	r2,zero,b40 <Game+0x3b4>
     b20:	e0bffa17 	ldw	r2,-24(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10c00c84 	addi	r3,r2,50
     b2c:	d0a81717 	ldw	r2,-24484(gp)
     b30:	1880031e 	bne	r3,r2,b40 <Game+0x3b4>
				ALT_inc_y = -(ALT_inc_y);
     b34:	d0a81817 	ldw	r2,-24480(gp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	d0a81815 	stw	r2,-24480(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b40:	d0a81c17 	ldw	r2,-24464(gp)
     b44:	10804ad8 	cmpnei	r2,r2,299
     b48:	10000d1e 	bne	r2,zero,b80 <Game+0x3f4>
     b4c:	e0bffb17 	ldw	r2,-20(fp)
     b50:	10800017 	ldw	r2,0(r2)
     b54:	10fffe84 	addi	r3,r2,-6
     b58:	d0a81717 	ldw	r2,-24484(gp)
     b5c:	1880080e 	bge	r3,r2,b80 <Game+0x3f4>
     b60:	e0bffb17 	ldw	r2,-20(fp)
     b64:	10800017 	ldw	r2,0(r2)
     b68:	10800c84 	addi	r2,r2,50
     b6c:	d0e81717 	ldw	r3,-24484(gp)
     b70:	1880030e 	bge	r3,r2,b80 <Game+0x3f4>
				ALT_inc_x = -(ALT_inc_x);
     b74:	d0a81b17 	ldw	r2,-24468(gp)
     b78:	0085c83a 	sub	r2,zero,r2
     b7c:	d0a81b15 	stw	r2,-24468(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b80:	d0a81c17 	ldw	r2,-24464(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	1000081e 	bne	r2,zero,bac <Game+0x420>
     b8c:	d0a81c17 	ldw	r2,-24464(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000051e 	bne	r2,zero,bac <Game+0x420>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10fffe84 	addi	r3,r2,-6
     ba4:	d0a81717 	ldw	r2,-24484(gp)
     ba8:	18800b26 	beq	r3,r2,bd8 <Game+0x44c>
     bac:	d0a81c17 	ldw	r2,-24464(gp)
     bb0:	10804c88 	cmpgei	r2,r2,306
     bb4:	10000b1e 	bne	r2,zero,be4 <Game+0x458>
     bb8:	d0a81c17 	ldw	r2,-24464(gp)
     bbc:	10804b10 	cmplti	r2,r2,300
     bc0:	1000081e 	bne	r2,zero,be4 <Game+0x458>
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	10c00c84 	addi	r3,r2,50
     bd0:	d0a81717 	ldw	r2,-24484(gp)
     bd4:	1880031e 	bne	r3,r2,be4 <Game+0x458>
				ALT_inc_y = -(ALT_inc_y);
     bd8:	d0a81817 	ldw	r2,-24480(gp)
     bdc:	0085c83a 	sub	r2,zero,r2
     be0:	d0a81815 	stw	r2,-24480(gp)
			}



			OSTimeDly(1);
     be4:	01000044 	movi	r4,1
     be8:	001b3f00 	call	1b3f0 <OSTimeDly>
     bec:	00001406 	br	c40 <Game+0x4b4>

		} else if (controller(3) == 2) {
     bf0:	010000c4 	movi	r4,3
     bf4:	000039c0 	call	39c <controller>
     bf8:	10800098 	cmpnei	r2,r2,2
     bfc:	1000031e 	bne	r2,zero,c0c <Game+0x480>
			//links
			endGame(2);
     c00:	01000084 	movi	r4,2
     c04:	0000e680 	call	e68 <endGame>
     c08:	00000d06 	br	c40 <Game+0x4b4>
		}else if(controller(3) == 3){
     c0c:	010000c4 	movi	r4,3
     c10:	000039c0 	call	39c <controller>
     c14:	108000d8 	cmpnei	r2,r2,3
     c18:	1000031e 	bne	r2,zero,c28 <Game+0x49c>
			//rechts
			endGame(1);
     c1c:	01000044 	movi	r4,1
     c20:	0000e680 	call	e68 <endGame>
     c24:	00000606 	br	c40 <Game+0x4b4>
		} else if(controller(2) != 2){
     c28:	01000084 	movi	r4,2
     c2c:	000039c0 	call	39c <controller>
     c30:	108000a0 	cmpeqi	r2,r2,2
     c34:	1000021e 	bne	r2,zero,c40 <Game+0x4b4>
			endGame(1);
     c38:	01000044 	movi	r4,1
     c3c:	0000e680 	call	e68 <endGame>
		}

	}
     c40:	003eea06 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c44 <gescoord>:
}

void gescoord(int ID){
     c44:	defffc04 	addi	sp,sp,-16
     c48:	dfc00315 	stw	ra,12(sp)
     c4c:	df000215 	stw	fp,8(sp)
     c50:	df000204 	addi	fp,sp,8
     c54:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c58:	d1281a17 	ldw	r4,-24472(gp)
     c5c:	d1681717 	ldw	r5,-24484(gp)
     c60:	d0a81a17 	ldw	r2,-24472(gp)
     c64:	10c00144 	addi	r3,r2,5
     c68:	d0a81717 	ldw	r2,-24484(gp)
     c6c:	10800144 	addi	r2,r2,5
     c70:	d8000015 	stw	zero,0(sp)
     c74:	180d883a 	mov	r6,r3
     c78:	100f883a 	mov	r7,r2
     c7c:	00024f40 	call	24f4 <VGA_box>

	first = 1;
     c80:	00800044 	movi	r2,1
     c84:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	10800058 	cmpnei	r2,r2,1
     c90:	1000221e 	bne	r2,zero,d1c <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c94:	01000784 	movi	r4,30
     c98:	01400644 	movi	r5,25
     c9c:	018000b4 	movhi	r6,2
     ca0:	31bdc204 	addi	r6,r6,-2296
     ca4:	00025a80 	call	25a8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ca8:	0009883a 	mov	r4,zero
     cac:	000b883a 	mov	r5,zero
     cb0:	018008c4 	movi	r6,35
     cb4:	000f883a 	mov	r7,zero
     cb8:	001b5380 	call	1b538 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     cbc:	01000784 	movi	r4,30
     cc0:	01400644 	movi	r5,25
     cc4:	018000b4 	movhi	r6,2
     cc8:	31bdc904 	addi	r6,r6,-2268
     ccc:	00025a80 	call	25a8 <VGA_text>
		ALT_x1 = 0;
     cd0:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     cd4:	00802944 	movi	r2,165
     cd8:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     cdc:	00801904 	movi	r2,100
     ce0:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = -1;
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     cec:	d0a81217 	ldw	r2,-24504(gp)
     cf0:	10800058 	cmpnei	r2,r2,1
     cf4:	1000031e 	bne	r2,zero,d04 <gescoord+0xc0>
			ALT_inc_y = -1;
     cf8:	00bfffc4 	movi	r2,-1
     cfc:	d0a81815 	stw	r2,-24480(gp)
     d00:	00000506 	br	d18 <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     d04:	d0a81217 	ldw	r2,-24504(gp)
     d08:	1000031e 	bne	r2,zero,d18 <gescoord+0xd4>
			ALT_inc_y = 1;
     d0c:	00800044 	movi	r2,1
     d10:	d0a81815 	stw	r2,-24480(gp)
     d14:	00004f06 	br	e54 <gescoord+0x210>
     d18:	00004e06 	br	e54 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     d1c:	e0bfff17 	ldw	r2,-4(fp)
     d20:	10800098 	cmpnei	r2,r2,2
     d24:	1000251e 	bne	r2,zero,dbc <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     d28:	01000784 	movi	r4,30
     d2c:	01400644 	movi	r5,25
     d30:	018000b4 	movhi	r6,2
     d34:	31bdd004 	addi	r6,r6,-2240
     d38:	00025a80 	call	25a8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d3c:	0009883a 	mov	r4,zero
     d40:	000b883a 	mov	r5,zero
     d44:	018008c4 	movi	r6,35
     d48:	000f883a 	mov	r7,zero
     d4c:	001b5380 	call	1b538 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d50:	01000784 	movi	r4,30
     d54:	01400644 	movi	r5,25
     d58:	018000b4 	movhi	r6,2
     d5c:	31bdc904 	addi	r6,r6,-2268
     d60:	00025a80 	call	25a8 <VGA_text>
		ALT_x1 = 0;
     d64:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     d68:	00802944 	movi	r2,165
     d6c:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     d70:	00801904 	movi	r2,100
     d74:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = 1;
     d78:	00800044 	movi	r2,1
     d7c:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     d80:	d0a81217 	ldw	r2,-24504(gp)
     d84:	10800058 	cmpnei	r2,r2,1
     d88:	1000041e 	bne	r2,zero,d9c <gescoord+0x158>
			ALT_inc_y = 1;
     d8c:	00800044 	movi	r2,1
     d90:	d0a81815 	stw	r2,-24480(gp)
			random = 0;
     d94:	d0281215 	stw	zero,-24504(gp)
     d98:	00000706 	br	db8 <gescoord+0x174>
		}else if(random == 0){
     d9c:	d0a81217 	ldw	r2,-24504(gp)
     da0:	1000051e 	bne	r2,zero,db8 <gescoord+0x174>
			ALT_inc_y = -1;
     da4:	00bfffc4 	movi	r2,-1
     da8:	d0a81815 	stw	r2,-24480(gp)
			random = 1;
     dac:	00800044 	movi	r2,1
     db0:	d0a81215 	stw	r2,-24504(gp)
     db4:	00002706 	br	e54 <gescoord+0x210>
     db8:	00002606 	br	e54 <gescoord+0x210>
		}
	}else if(ID == 3){
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	108000d8 	cmpnei	r2,r2,3
     dc4:	1000231e 	bne	r2,zero,e54 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     dc8:	01000784 	movi	r4,30
     dcc:	01400644 	movi	r5,25
     dd0:	018000b4 	movhi	r6,2
     dd4:	31bdd704 	addi	r6,r6,-2212
     dd8:	00025a80 	call	25a8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ddc:	0009883a 	mov	r4,zero
     de0:	000b883a 	mov	r5,zero
     de4:	018008c4 	movi	r6,35
     de8:	000f883a 	mov	r7,zero
     dec:	001b5380 	call	1b538 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     df0:	01000784 	movi	r4,30
     df4:	01400644 	movi	r5,25
     df8:	018000b4 	movhi	r6,2
     dfc:	31bdde04 	addi	r6,r6,-2184
     e00:	00025a80 	call	25a8 <VGA_text>
		ALT_x1 = 0;
     e04:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     e08:	00802944 	movi	r2,165
     e0c:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     e10:	00801904 	movi	r2,100
     e14:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = -1;
     e18:	00bfffc4 	movi	r2,-1
     e1c:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     e20:	d0a81217 	ldw	r2,-24504(gp)
     e24:	10800058 	cmpnei	r2,r2,1
     e28:	1000041e 	bne	r2,zero,e3c <gescoord+0x1f8>
			ALT_inc_y = 1;
     e2c:	00800044 	movi	r2,1
     e30:	d0a81815 	stw	r2,-24480(gp)
			random = 0;
     e34:	d0281215 	stw	zero,-24504(gp)
     e38:	00000606 	br	e54 <gescoord+0x210>
		}else if(random == 0){
     e3c:	d0a81217 	ldw	r2,-24504(gp)
     e40:	1000041e 	bne	r2,zero,e54 <gescoord+0x210>
			ALT_inc_y = -1;
     e44:	00bfffc4 	movi	r2,-1
     e48:	d0a81815 	stw	r2,-24480(gp)
			random = 1;
     e4c:	00800044 	movi	r2,1
     e50:	d0a81215 	stw	r2,-24504(gp)
		}
	}

}
     e54:	e037883a 	mov	sp,fp
     e58:	dfc00117 	ldw	ra,4(sp)
     e5c:	df000017 	ldw	fp,0(sp)
     e60:	dec00204 	addi	sp,sp,8
     e64:	f800283a 	ret

00000e68 <endGame>:

void endGame(int ID) {
     e68:	defffb04 	addi	sp,sp,-20
     e6c:	dfc00415 	stw	ra,16(sp)
     e70:	df000315 	stw	fp,12(sp)
     e74:	df000304 	addi	fp,sp,12
     e78:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e7c:	010000b4 	movhi	r4,2
     e80:	213de504 	addi	r4,r4,-2156
     e84:	0002f6c0 	call	2f6c <puts>

	clearScreen();
     e88:	0001f380 	call	1f38 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e8c:	d0a80d17 	ldw	r2,-24524(gp)
     e90:	1009883a 	mov	r4,r2
     e94:	01400304 	movi	r5,12
     e98:	01800044 	movi	r6,1
     e9c:	e1fffe04 	addi	r7,fp,-8
     ea0:	00162340 	call	16234 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     ea4:	d0a80b17 	ldw	r2,-24532(gp)
     ea8:	1009883a 	mov	r4,r2
     eac:	01400084 	movi	r5,2
     eb0:	01800044 	movi	r6,1
     eb4:	e1fffe04 	addi	r7,fp,-8
     eb8:	00162340 	call	16234 <OSFlagPost>


	if(ID == 1){
     ebc:	e0bfff17 	ldw	r2,-4(fp)
     ec0:	10800058 	cmpnei	r2,r2,1
     ec4:	1000101e 	bne	r2,zero,f08 <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     ec8:	010008c4 	movi	r4,35
     ecc:	01400644 	movi	r5,25
     ed0:	018000b4 	movhi	r6,2
     ed4:	31bde804 	addi	r6,r6,-2144
     ed8:	00025a80 	call	25a8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     edc:	0009883a 	mov	r4,zero
     ee0:	000b883a 	mov	r5,zero
     ee4:	01800a04 	movi	r6,40
     ee8:	000f883a 	mov	r7,zero
     eec:	001b5380 	call	1b538 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     ef0:	010008c4 	movi	r4,35
     ef4:	01400644 	movi	r5,25
     ef8:	018000b4 	movhi	r6,2
     efc:	31bdec04 	addi	r6,r6,-2128
     f00:	00025a80 	call	25a8 <VGA_text>
     f04:	00001206 	br	f50 <endGame+0xe8>
	} else if(ID == 2){
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	10800098 	cmpnei	r2,r2,2
     f10:	10000f1e 	bne	r2,zero,f50 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     f14:	010008c4 	movi	r4,35
     f18:	01400644 	movi	r5,25
     f1c:	018000b4 	movhi	r6,2
     f20:	31bdf004 	addi	r6,r6,-2112
     f24:	00025a80 	call	25a8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     f28:	0009883a 	mov	r4,zero
     f2c:	000b883a 	mov	r5,zero
     f30:	01800a04 	movi	r6,40
     f34:	000f883a 	mov	r7,zero
     f38:	001b5380 	call	1b538 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f3c:	010008c4 	movi	r4,35
     f40:	01400644 	movi	r5,25
     f44:	018000b4 	movhi	r6,2
     f48:	31bdec04 	addi	r6,r6,-2128
     f4c:	00025a80 	call	25a8 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f50:	d0a80d17 	ldw	r2,-24524(gp)
     f54:	1009883a 	mov	r4,r2
     f58:	01400444 	movi	r5,17
     f5c:	000d883a 	mov	r6,zero
     f60:	e1fffe04 	addi	r7,fp,-8
     f64:	00162340 	call	16234 <OSFlagPost>

	teken_menu(2);
     f68:	01000084 	movi	r4,2
     f6c:	00020f80 	call	20f8 <teken_menu>
	deleteNummer();
     f70:	000274c0 	call	274c <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f74:	d1281a17 	ldw	r4,-24472(gp)
     f78:	d1681717 	ldw	r5,-24484(gp)
     f7c:	d0a81a17 	ldw	r2,-24472(gp)
     f80:	10c00144 	addi	r3,r2,5
     f84:	d0a81717 	ldw	r2,-24484(gp)
     f88:	10800144 	addi	r2,r2,5
     f8c:	d8000015 	stw	zero,0(sp)
     f90:	180d883a 	mov	r6,r3
     f94:	100f883a 	mov	r7,r2
     f98:	00024f40 	call	24f4 <VGA_box>

	ALT_x1 = 0;
     f9c:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
     fa0:	00802944 	movi	r2,165
     fa4:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
     fa8:	00801904 	movi	r2,100
     fac:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
     fb0:	00800044 	movi	r2,1
     fb4:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
     fb8:	00800044 	movi	r2,1
     fbc:	d0a81815 	stw	r2,-24480(gp)

	check = 1;
     fc0:	00800044 	movi	r2,1
     fc4:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     fc8:	00800044 	movi	r2,1
     fcc:	d0a00015 	stw	r2,-32768(gp)

}
     fd0:	e037883a 	mov	sp,fp
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	df000017 	ldw	fp,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret

00000fe4 <endSingleplayer>:

void endSingleplayer(){
     fe4:	defffc04 	addi	sp,sp,-16
     fe8:	dfc00315 	stw	ra,12(sp)
     fec:	df000215 	stw	fp,8(sp)
     ff0:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
     ff4:	010000b4 	movhi	r4,2
     ff8:	213df404 	addi	r4,r4,-2096
     ffc:	0002f6c0 	call	2f6c <puts>

	//clearScreen();

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1000:	d0a80d17 	ldw	r2,-24524(gp)
    1004:	1009883a 	mov	r4,r2
    1008:	01400104 	movi	r5,4
    100c:	01800044 	movi	r6,1
    1010:	e1ffff04 	addi	r7,fp,-4
    1014:	00162340 	call	16234 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    1018:	010008c4 	movi	r4,35
    101c:	01400644 	movi	r5,25
    1020:	018000b4 	movhi	r6,2
    1024:	31bdf904 	addi	r6,r6,-2076
    1028:	00025a80 	call	25a8 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    102c:	0009883a 	mov	r4,zero
    1030:	000b883a 	mov	r5,zero
    1034:	01800a04 	movi	r6,40
    1038:	000f883a 	mov	r7,zero
    103c:	001b5380 	call	1b538 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1040:	010008c4 	movi	r4,35
    1044:	01400644 	movi	r5,25
    1048:	018000b4 	movhi	r6,2
    104c:	31bdfc04 	addi	r6,r6,-2064
    1050:	00025a80 	call	25a8 <VGA_text>


	VGA_text(6,5, "           ");
    1054:	01000184 	movi	r4,6
    1058:	01400144 	movi	r5,5
    105c:	018000b4 	movhi	r6,2
    1060:	31bdff04 	addi	r6,r6,-2052
    1064:	00025a80 	call	25a8 <VGA_text>


	teken_menu(1);
    1068:	01000044 	movi	r4,1
    106c:	00020f80 	call	20f8 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1070:	d8000015 	stw	zero,0(sp)
    1074:	01004f04 	movi	r4,316
    1078:	01400104 	movi	r5,4
    107c:	01804fc4 	movi	r6,319
    1080:	01c03ac4 	movi	r7,235
    1084:	00024f40 	call	24f4 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1088:	d1281a17 	ldw	r4,-24472(gp)
    108c:	d1681717 	ldw	r5,-24484(gp)
    1090:	d0a81a17 	ldw	r2,-24472(gp)
    1094:	10c00144 	addi	r3,r2,5
    1098:	d0a81717 	ldw	r2,-24484(gp)
    109c:	10800144 	addi	r2,r2,5
    10a0:	d8000015 	stw	zero,0(sp)
    10a4:	180d883a 	mov	r6,r3
    10a8:	100f883a 	mov	r7,r2
    10ac:	00024f40 	call	24f4 <VGA_box>
	deleteNummer();
    10b0:	000274c0 	call	274c <deleteNummer>


	ALT_x1 = 0;
    10b4:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    10b8:	00802944 	movi	r2,165
    10bc:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    10c0:	00801904 	movi	r2,100
    10c4:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    10c8:	00bfffc4 	movi	r2,-1
    10cc:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    10d0:	00800044 	movi	r2,1
    10d4:	d0a81815 	stw	r2,-24480(gp)

	leven = beginLevens;
    10d8:	008000c4 	movi	r2,3
    10dc:	d0a00215 	stw	r2,-32760(gp)
	score3 = 0;
    10e0:	d0281115 	stw	zero,-24508(gp)
	first = 1;
    10e4:	00800044 	movi	r2,1
    10e8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    10ec:	d0a80d17 	ldw	r2,-24524(gp)
    10f0:	1009883a 	mov	r4,r2
    10f4:	01400444 	movi	r5,17
    10f8:	000d883a 	mov	r6,zero
    10fc:	e1ffff04 	addi	r7,fp,-4
    1100:	00162340 	call	16234 <OSFlagPost>

	OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1104:	d0a80b17 	ldw	r2,-24532(gp)
    1108:	1009883a 	mov	r4,r2
    110c:	01400804 	movi	r5,32
    1110:	01800044 	movi	r6,1
    1114:	e1ffff04 	addi	r7,fp,-4
    1118:	00162340 	call	16234 <OSFlagPost>

}
    111c:	e037883a 	mov	sp,fp
    1120:	dfc00117 	ldw	ra,4(sp)
    1124:	df000017 	ldw	fp,0(sp)
    1128:	dec00204 	addi	sp,sp,8
    112c:	f800283a 	ret

00001130 <Singleplayer>:

void Singleplayer(void* pdata){
    1130:	defff704 	addi	sp,sp,-36
    1134:	dfc00815 	stw	ra,32(sp)
    1138:	df000715 	stw	fp,28(sp)
    113c:	df000704 	addi	fp,sp,28
    1140:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1144:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    1148:	00802944 	movi	r2,165
    114c:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    1150:	00801904 	movi	r2,100
    1154:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    1158:	00bfffc4 	movi	r2,-1
    115c:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    1160:	00800044 	movi	r2,1
    1164:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 315;
    1168:	00804ec4 	movi	r2,315
    116c:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    1170:	00803984 	movi	r2,230
    1174:	d0a81315 	stw	r2,-24500(gp)
	int q;
	Balk * balkje;
	
	char levens[10];

	score3 = 0;
    1178:	d0281115 	stw	zero,-24508(gp)
	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    117c:	d0e80b17 	ldw	r3,-24532(gp)
    1180:	e0bffc04 	addi	r2,fp,-16
    1184:	d8800015 	stw	r2,0(sp)
    1188:	1809883a 	mov	r4,r3
    118c:	01400804 	movi	r5,32
    1190:	000d883a 	mov	r6,zero
    1194:	000f883a 	mov	r7,zero
    1198:	0015bdc0 	call	15bdc <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    119c:	d0e80e17 	ldw	r3,-24520(gp)
    11a0:	e0bffc04 	addi	r2,fp,-16
    11a4:	1809883a 	mov	r4,r3
    11a8:	000b883a 	mov	r5,zero
    11ac:	100d883a 	mov	r6,r2
    11b0:	0016ed40 	call	16ed4 <OSMboxPend>
    11b4:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    11b8:	d1281a17 	ldw	r4,-24472(gp)
    11bc:	d1681717 	ldw	r5,-24484(gp)
    11c0:	d0a81a17 	ldw	r2,-24472(gp)
    11c4:	10c00144 	addi	r3,r2,5
    11c8:	d0a81717 	ldw	r2,-24484(gp)
    11cc:	10800144 	addi	r2,r2,5
    11d0:	d8000015 	stw	zero,0(sp)
    11d4:	180d883a 	mov	r6,r3
    11d8:	100f883a 	mov	r7,r2
    11dc:	00024f40 	call	24f4 <VGA_box>

		if (first == 1) {
    11e0:	d0a00017 	ldw	r2,-32768(gp)
    11e4:	10800058 	cmpnei	r2,r2,1
    11e8:	1000201e 	bne	r2,zero,126c <Singleplayer+0x13c>
			printf("FIRST");
    11ec:	010000b4 	movhi	r4,2
    11f0:	213e0204 	addi	r4,r4,-2040
    11f4:	0002e880 	call	2e88 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    11f8:	d0a81a17 	ldw	r2,-24472(gp)
    11fc:	10c02804 	addi	r3,r2,160
    1200:	d0a81b17 	ldw	r2,-24468(gp)
    1204:	1885883a 	add	r2,r3,r2
    1208:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    120c:	d0e81c17 	ldw	r3,-24464(gp)
    1210:	d0a81b17 	ldw	r2,-24468(gp)
    1214:	1885883a 	add	r2,r3,r2
    1218:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    121c:	d0e81717 	ldw	r3,-24484(gp)
    1220:	d0a81817 	ldw	r2,-24480(gp)
    1224:	1885883a 	add	r2,r3,r2
    1228:	d0a81715 	stw	r2,-24484(gp)

			del_middenlijn();
    122c:	00026a00 	call	26a0 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1230:	0081a5c4 	movi	r2,1687
    1234:	d8800015 	stw	r2,0(sp)
    1238:	01004f04 	movi	r4,316
    123c:	000b883a 	mov	r5,zero
    1240:	01804fc4 	movi	r6,319
    1244:	01c03bc4 	movi	r7,239
    1248:	00024f40 	call	24f4 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    124c:	d8000015 	stw	zero,0(sp)
    1250:	01004b04 	movi	r4,300
    1254:	01400104 	movi	r5,4
    1258:	01804c44 	movi	r6,305
    125c:	01c03ac4 	movi	r7,235
    1260:	00024f40 	call	24f4 <VGA_box>

			first = 0;
    1264:	d0200015 	stw	zero,-32768(gp)
    1268:	00000c06 	br	129c <Singleplayer+0x16c>
		} else {
			ALT_x1 += ALT_inc_x;
    126c:	d0e81a17 	ldw	r3,-24472(gp)
    1270:	d0a81b17 	ldw	r2,-24468(gp)
    1274:	1885883a 	add	r2,r3,r2
    1278:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    127c:	d0e81c17 	ldw	r3,-24464(gp)
    1280:	d0a81b17 	ldw	r2,-24468(gp)
    1284:	1885883a 	add	r2,r3,r2
    1288:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    128c:	d0e81717 	ldw	r3,-24484(gp)
    1290:	d0a81817 	ldw	r2,-24480(gp)
    1294:	1885883a 	add	r2,r3,r2
    1298:	d0a81715 	stw	r2,-24484(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    129c:	d0e81717 	ldw	r3,-24484(gp)
    12a0:	d0a81317 	ldw	r2,-24500(gp)
    12a4:	18800326 	beq	r3,r2,12b4 <Singleplayer+0x184>
    12a8:	d0a81717 	ldw	r2,-24484(gp)
    12ac:	10800118 	cmpnei	r2,r2,4
    12b0:	1000031e 	bne	r2,zero,12c0 <Singleplayer+0x190>
			ALT_inc_y = -(ALT_inc_y);
    12b4:	d0a81817 	ldw	r2,-24480(gp)
    12b8:	0085c83a 	sub	r2,zero,r2
    12bc:	d0a81815 	stw	r2,-24480(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    12c0:	d0e81c17 	ldw	r3,-24464(gp)
    12c4:	d0a81517 	ldw	r2,-24492(gp)
    12c8:	1880071e 	bne	r3,r2,12e8 <Singleplayer+0x1b8>
			ALT_inc_x = -(ALT_inc_x);
    12cc:	d0a81b17 	ldw	r2,-24468(gp)
    12d0:	0085c83a 	sub	r2,zero,r2
    12d4:	d0a81b15 	stw	r2,-24468(gp)
			deleteNummer();
    12d8:	000274c0 	call	274c <deleteNummer>
			score3++;
    12dc:	d0a81117 	ldw	r2,-24508(gp)
    12e0:	10800044 	addi	r2,r2,1
    12e4:	d0a81115 	stw	r2,-24508(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    12e8:	d1281a17 	ldw	r4,-24472(gp)
    12ec:	d1681717 	ldw	r5,-24484(gp)
    12f0:	d0a81a17 	ldw	r2,-24472(gp)
    12f4:	11800144 	addi	r6,r2,5
    12f8:	d0a81717 	ldw	r2,-24484(gp)
    12fc:	10c00144 	addi	r3,r2,5
    1300:	00804034 	movhi	r2,256
    1304:	10bfffc4 	addi	r2,r2,-1
    1308:	d8800015 	stw	r2,0(sp)
    130c:	180f883a 	mov	r7,r3
    1310:	00024f40 	call	24f4 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    1314:	d0a81a17 	ldw	r2,-24472(gp)
    1318:	1000051e 	bne	r2,zero,1330 <Singleplayer+0x200>
			leven--;
    131c:	d0a00217 	ldw	r2,-32760(gp)
    1320:	10bfffc4 	addi	r2,r2,-1
    1324:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    1328:	010000c4 	movi	r4,3
    132c:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1330:	d0a81a17 	ldw	r2,-24472(gp)
    1334:	10800558 	cmpnei	r2,r2,21
    1338:	10000c1e 	bne	r2,zero,136c <Singleplayer+0x23c>
    133c:	e0bffb17 	ldw	r2,-20(fp)
    1340:	10c00017 	ldw	r3,0(r2)
    1344:	d0a81717 	ldw	r2,-24484(gp)
    1348:	1880080e 	bge	r3,r2,136c <Singleplayer+0x23c>
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	10800017 	ldw	r2,0(r2)
    1354:	10800c84 	addi	r2,r2,50
    1358:	d0e81717 	ldw	r3,-24484(gp)
    135c:	1880030e 	bge	r3,r2,136c <Singleplayer+0x23c>
			ALT_inc_x = -(ALT_inc_x);
    1360:	d0a81b17 	ldw	r2,-24468(gp)
    1364:	0085c83a 	sub	r2,zero,r2
    1368:	d0a81b15 	stw	r2,-24468(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    136c:	d0a81a17 	ldw	r2,-24472(gp)
    1370:	10800608 	cmpgei	r2,r2,24
    1374:	10000a1e 	bne	r2,zero,13a0 <Singleplayer+0x270>
    1378:	d0a81a17 	ldw	r2,-24472(gp)
    137c:	10800590 	cmplti	r2,r2,22
    1380:	1000071e 	bne	r2,zero,13a0 <Singleplayer+0x270>
    1384:	e0bffb17 	ldw	r2,-20(fp)
    1388:	10c00017 	ldw	r3,0(r2)
    138c:	d0a81717 	ldw	r2,-24484(gp)
    1390:	1880031e 	bne	r3,r2,13a0 <Singleplayer+0x270>
			ALT_inc_y = -(ALT_inc_y);
    1394:	d0a81817 	ldw	r2,-24480(gp)
    1398:	0085c83a 	sub	r2,zero,r2
    139c:	d0a81815 	stw	r2,-24480(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    13a0:	d0a81a17 	ldw	r2,-24472(gp)
    13a4:	10800608 	cmpgei	r2,r2,24
    13a8:	10000b1e 	bne	r2,zero,13d8 <Singleplayer+0x2a8>
    13ac:	d0a81a17 	ldw	r2,-24472(gp)
    13b0:	10800590 	cmplti	r2,r2,22
    13b4:	1000081e 	bne	r2,zero,13d8 <Singleplayer+0x2a8>
    13b8:	e0bffb17 	ldw	r2,-20(fp)
    13bc:	10800017 	ldw	r2,0(r2)
    13c0:	10c00c84 	addi	r3,r2,50
    13c4:	d0a81717 	ldw	r2,-24484(gp)
    13c8:	1880031e 	bne	r3,r2,13d8 <Singleplayer+0x2a8>
			ALT_inc_y = -(ALT_inc_y);
    13cc:	d0a81817 	ldw	r2,-24480(gp)
    13d0:	0085c83a 	sub	r2,zero,r2
    13d4:	d0a81815 	stw	r2,-24480(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    13d8:	d0a00217 	ldw	r2,-32760(gp)
    13dc:	e0fffc44 	addi	r3,fp,-15
    13e0:	1809883a 	mov	r4,r3
    13e4:	014000b4 	movhi	r5,2
    13e8:	297e0404 	addi	r5,r5,-2032
    13ec:	100d883a 	mov	r6,r2
    13f0:	0002fd80 	call	2fd8 <sprintf>
		VGA_text(6,5, levens);
    13f4:	e0bffc44 	addi	r2,fp,-15
    13f8:	01000184 	movi	r4,6
    13fc:	01400144 	movi	r5,5
    1400:	100d883a 	mov	r6,r2
    1404:	00025a80 	call	25a8 <VGA_text>
		OSTimeDly(1);
    1408:	01000044 	movi	r4,1
    140c:	001b3f00 	call	1b3f0 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    1410:	e03ffa15 	stw	zero,-24(fp)
    1414:	00004a06 	br	1540 <Singleplayer+0x410>

			if(score3 == i){
    1418:	d0e81117 	ldw	r3,-24508(gp)
    141c:	e0bffa17 	ldw	r2,-24(fp)
    1420:	18803c1e 	bne	r3,r2,1514 <Singleplayer+0x3e4>

				if (score3 >= 0 && score3 <= 9){
    1424:	d0a81117 	ldw	r2,-24508(gp)
    1428:	10000716 	blt	r2,zero,1448 <Singleplayer+0x318>
    142c:	d0a81117 	ldw	r2,-24508(gp)
    1430:	10800288 	cmpgei	r2,r2,10
    1434:	1000041e 	bne	r2,zero,1448 <Singleplayer+0x318>
					draw_number(i, 3);
    1438:	e13ffa17 	ldw	r4,-24(fp)
    143c:	014000c4 	movi	r5,3
    1440:	00027880 	call	2788 <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    1444:	00003306 	br	1514 <Singleplayer+0x3e4>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1448:	d0a81117 	ldw	r2,-24508(gp)
    144c:	10800290 	cmplti	r2,r2,10
    1450:	1000121e 	bne	r2,zero,149c <Singleplayer+0x36c>
    1454:	d0a81117 	ldw	r2,-24508(gp)
    1458:	10801908 	cmpgei	r2,r2,100
    145c:	10000f1e 	bne	r2,zero,149c <Singleplayer+0x36c>
					draw_number(i /10 , 2);
    1460:	e0fffa17 	ldw	r3,-24(fp)
    1464:	00800284 	movi	r2,10
    1468:	1885283a 	div	r2,r3,r2
    146c:	1009883a 	mov	r4,r2
    1470:	01400084 	movi	r5,2
    1474:	00027880 	call	2788 <draw_number>
					draw_number(i %10, 3);
    1478:	e0bffa17 	ldw	r2,-24(fp)
    147c:	00c00284 	movi	r3,10
    1480:	10c7283a 	div	r3,r2,r3
    1484:	18c002a4 	muli	r3,r3,10
    1488:	10c5c83a 	sub	r2,r2,r3
    148c:	1009883a 	mov	r4,r2
    1490:	014000c4 	movi	r5,3
    1494:	00027880 	call	2788 <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1498:	00001e06 	br	1514 <Singleplayer+0x3e4>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    149c:	d0a81117 	ldw	r2,-24508(gp)
    14a0:	10801910 	cmplti	r2,r2,100
    14a4:	10001b1e 	bne	r2,zero,1514 <Singleplayer+0x3e4>
    14a8:	d0a81117 	ldw	r2,-24508(gp)
    14ac:	1080fa08 	cmpgei	r2,r2,1000
    14b0:	1000181e 	bne	r2,zero,1514 <Singleplayer+0x3e4>
					draw_number(i /100 , 1);
    14b4:	e0fffa17 	ldw	r3,-24(fp)
    14b8:	00801904 	movi	r2,100
    14bc:	1885283a 	div	r2,r3,r2
    14c0:	1009883a 	mov	r4,r2
    14c4:	01400044 	movi	r5,1
    14c8:	00027880 	call	2788 <draw_number>
					draw_number(i /10 %10, 2);
    14cc:	e0fffa17 	ldw	r3,-24(fp)
    14d0:	00800284 	movi	r2,10
    14d4:	1885283a 	div	r2,r3,r2
    14d8:	00c00284 	movi	r3,10
    14dc:	10c7283a 	div	r3,r2,r3
    14e0:	18c002a4 	muli	r3,r3,10
    14e4:	10c5c83a 	sub	r2,r2,r3
    14e8:	1009883a 	mov	r4,r2
    14ec:	01400084 	movi	r5,2
    14f0:	00027880 	call	2788 <draw_number>
					draw_number(i %10, 3);
    14f4:	e0bffa17 	ldw	r2,-24(fp)
    14f8:	00c00284 	movi	r3,10
    14fc:	10c7283a 	div	r3,r2,r3
    1500:	18c002a4 	muli	r3,r3,10
    1504:	10c5c83a 	sub	r2,r2,r3
    1508:	1009883a 	mov	r4,r2
    150c:	014000c4 	movi	r5,3
    1510:	00027880 	call	2788 <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    1514:	d0a81117 	ldw	r2,-24508(gp)
    1518:	1080f9e0 	cmpeqi	r2,r2,999
    151c:	1000021e 	bne	r2,zero,1528 <Singleplayer+0x3f8>
    1520:	d0a00217 	ldw	r2,-32760(gp)
    1524:	1000031e 	bne	r2,zero,1534 <Singleplayer+0x404>
				leven = 0;
    1528:	d0200215 	stw	zero,-32760(gp)
				score3 =0;
    152c:	d0281115 	stw	zero,-24508(gp)

				endSingleplayer();
    1530:	0000fe40 	call	fe4 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    1534:	e0bffa17 	ldw	r2,-24(fp)
    1538:	10800044 	addi	r2,r2,1
    153c:	e0bffa15 	stw	r2,-24(fp)
    1540:	e0bffa17 	ldw	r2,-24(fp)
    1544:	1080fa10 	cmplti	r2,r2,1000
    1548:	103fb31e 	bne	r2,zero,1418 <__alt_mem_Flash_flash_data+0xf4001418>





	}
    154c:	003f0b06 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>

00001550 <tutorialUitleg>:
	
}

void tutorialUitleg(){
    1550:	defffe04 	addi	sp,sp,-8
    1554:	dfc00115 	stw	ra,4(sp)
    1558:	df000015 	stw	fp,0(sp)
    155c:	d839883a 	mov	fp,sp
	INT8U err;
	
	VGA_text(10, 5, "Er zijn twee soorten spellen: Singleplayer en Multiplayer.");
    1560:	01000284 	movi	r4,10
    1564:	01400144 	movi	r5,5
    1568:	018000b4 	movhi	r6,2
    156c:	31be0704 	addi	r6,r6,-2020
    1570:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 6, "In Singleplayer speel je tegen de computer, waarbij je zoveel mogelijk");
    1574:	01000284 	movi	r4,10
    1578:	01400184 	movi	r5,6
    157c:	018000b4 	movhi	r6,2
    1580:	31be1604 	addi	r6,r6,-1960
    1584:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 7, "aantal punten moet bereiken door de bal tegen de muur te kaatsen.");
    1588:	01000284 	movi	r4,10
    158c:	014001c4 	movi	r5,7
    1590:	018000b4 	movhi	r6,2
    1594:	31be2804 	addi	r6,r6,-1888
    1598:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 8, "In Multiplayer gaat het er om dat je de bal in het doel van de tegenstander");
    159c:	01000284 	movi	r4,10
    15a0:	01400204 	movi	r5,8
    15a4:	018000b4 	movhi	r6,2
    15a8:	31be3904 	addi	r6,r6,-1820
    15ac:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 9, "krijgt. Het doel bevindt zich achter het balkje van de tegenstander.");
    15b0:	01000284 	movi	r4,10
    15b4:	01400244 	movi	r5,9
    15b8:	018000b4 	movhi	r6,2
    15bc:	31be4c04 	addi	r6,r6,-1744
    15c0:	00025a80 	call	25a8 <VGA_text>
}
    15c4:	e037883a 	mov	sp,fp
    15c8:	dfc00117 	ldw	ra,4(sp)
    15cc:	df000017 	ldw	fp,0(sp)
    15d0:	dec00204 	addi	sp,sp,8
    15d4:	f800283a 	ret

000015d8 <endTutorial>:

void endTutorial(){
    15d8:	defffc04 	addi	sp,sp,-16
    15dc:	dfc00315 	stw	ra,12(sp)
    15e0:	df000215 	stw	fp,8(sp)
    15e4:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    15e8:	010000b4 	movhi	r4,2
    15ec:	213e5e04 	addi	r4,r4,-1672
    15f0:	0002f6c0 	call	2f6c <puts>

	//clearScreen();
	VGA_text(10, 5, "                                                                              ");
    15f4:	01000284 	movi	r4,10
    15f8:	01400144 	movi	r5,5
    15fc:	018000b4 	movhi	r6,2
    1600:	31be6204 	addi	r6,r6,-1656
    1604:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 6, "                                                                              ");
    1608:	01000284 	movi	r4,10
    160c:	01400184 	movi	r5,6
    1610:	018000b4 	movhi	r6,2
    1614:	31be6204 	addi	r6,r6,-1656
    1618:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 7, "                                                                              ");
    161c:	01000284 	movi	r4,10
    1620:	014001c4 	movi	r5,7
    1624:	018000b4 	movhi	r6,2
    1628:	31be6204 	addi	r6,r6,-1656
    162c:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 8, "                                                                              ");
    1630:	01000284 	movi	r4,10
    1634:	01400204 	movi	r5,8
    1638:	018000b4 	movhi	r6,2
    163c:	31be6204 	addi	r6,r6,-1656
    1640:	00025a80 	call	25a8 <VGA_text>
	VGA_text(10, 9, "                                                                              ");
    1644:	01000284 	movi	r4,10
    1648:	01400244 	movi	r5,9
    164c:	018000b4 	movhi	r6,2
    1650:	31be6204 	addi	r6,r6,-1656
    1654:	00025a80 	call	25a8 <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1658:	d0a80d17 	ldw	r2,-24524(gp)
    165c:	1009883a 	mov	r4,r2
    1660:	01400104 	movi	r5,4
    1664:	01800044 	movi	r6,1
    1668:	e1ffff04 	addi	r7,fp,-4
    166c:	00162340 	call	16234 <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    1670:	010008c4 	movi	r4,35
    1674:	01400644 	movi	r5,25
    1678:	018000b4 	movhi	r6,2
    167c:	31be7604 	addi	r6,r6,-1576
    1680:	00025a80 	call	25a8 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1684:	0009883a 	mov	r4,zero
    1688:	000b883a 	mov	r5,zero
    168c:	01800a04 	movi	r6,40
    1690:	000f883a 	mov	r7,zero
    1694:	001b5380 	call	1b538 <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    1698:	010008c4 	movi	r4,35
    169c:	01400644 	movi	r5,25
    16a0:	018000b4 	movhi	r6,2
    16a4:	31be7a04 	addi	r6,r6,-1560
    16a8:	00025a80 	call	25a8 <VGA_text>




	teken_menu(4);
    16ac:	01000104 	movi	r4,4
    16b0:	00020f80 	call	20f8 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    16b4:	d8000015 	stw	zero,0(sp)
    16b8:	01004f04 	movi	r4,316
    16bc:	01400104 	movi	r5,4
    16c0:	01804fc4 	movi	r6,319
    16c4:	01c03ac4 	movi	r7,235
    16c8:	00024f40 	call	24f4 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    16cc:	d1281a17 	ldw	r4,-24472(gp)
    16d0:	d1681717 	ldw	r5,-24484(gp)
    16d4:	d0a81a17 	ldw	r2,-24472(gp)
    16d8:	10c00144 	addi	r3,r2,5
    16dc:	d0a81717 	ldw	r2,-24484(gp)
    16e0:	10800144 	addi	r2,r2,5
    16e4:	d8000015 	stw	zero,0(sp)
    16e8:	180d883a 	mov	r6,r3
    16ec:	100f883a 	mov	r7,r2
    16f0:	00024f40 	call	24f4 <VGA_box>


	ALT_x1 = 0;
    16f4:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    16f8:	00802944 	movi	r2,165
    16fc:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    1700:	00801904 	movi	r2,100
    1704:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    1708:	00bfffc4 	movi	r2,-1
    170c:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    1710:	00800044 	movi	r2,1
    1714:	d0a81815 	stw	r2,-24480(gp)

	first = 1;
    1718:	00800044 	movi	r2,1
    171c:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    1720:	d0a80d17 	ldw	r2,-24524(gp)
    1724:	1009883a 	mov	r4,r2
    1728:	01400444 	movi	r5,17
    172c:	000d883a 	mov	r6,zero
    1730:	e1ffff04 	addi	r7,fp,-4
    1734:	00162340 	call	16234 <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    1738:	d0a81017 	ldw	r2,-24512(gp)
    173c:	1009883a 	mov	r4,r2
    1740:	01401004 	movi	r5,64
    1744:	01800044 	movi	r6,1
    1748:	e1ffff04 	addi	r7,fp,-4
    174c:	00162340 	call	16234 <OSFlagPost>

}
    1750:	e037883a 	mov	sp,fp
    1754:	dfc00117 	ldw	ra,4(sp)
    1758:	df000017 	ldw	fp,0(sp)
    175c:	dec00204 	addi	sp,sp,8
    1760:	f800283a 	ret

00001764 <Tutorial>:

void Tutorial(void* pdata){
    1764:	defffa04 	addi	sp,sp,-24
    1768:	dfc00515 	stw	ra,20(sp)
    176c:	df000415 	stw	fp,16(sp)
    1770:	df000404 	addi	fp,sp,16
    1774:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1778:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    177c:	00802944 	movi	r2,165
    1780:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    1784:	00801904 	movi	r2,100
    1788:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
    178c:	00800044 	movi	r2,1
    1790:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    1794:	00800044 	movi	r2,1
    1798:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 315;
    179c:	00804ec4 	movi	r2,315
    17a0:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    17a4:	00803984 	movi	r2,230
    17a8:	d0a81315 	stw	r2,-24500(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    17ac:	d0e81017 	ldw	r3,-24512(gp)
    17b0:	e0bffe04 	addi	r2,fp,-8
    17b4:	d8800015 	stw	r2,0(sp)
    17b8:	1809883a 	mov	r4,r3
    17bc:	01401004 	movi	r5,64
    17c0:	01800044 	movi	r6,1
    17c4:	000f883a 	mov	r7,zero
    17c8:	0015bdc0 	call	15bdc <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    17cc:	d0e80e17 	ldw	r3,-24520(gp)
    17d0:	e0bffe04 	addi	r2,fp,-8
    17d4:	1809883a 	mov	r4,r3
    17d8:	000b883a 	mov	r5,zero
    17dc:	100d883a 	mov	r6,r2
    17e0:	0016ed40 	call	16ed4 <OSMboxPend>
    17e4:	e0bffd15 	stw	r2,-12(fp)

		printf("TUTORIAL SET\n");
    17e8:	010000b4 	movhi	r4,2
    17ec:	213e7e04 	addi	r4,r4,-1544
    17f0:	0002f6c0 	call	2f6c <puts>

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    17f4:	00015500 	call	1550 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    17f8:	d1281a17 	ldw	r4,-24472(gp)
    17fc:	d1681717 	ldw	r5,-24484(gp)
    1800:	d0a81a17 	ldw	r2,-24472(gp)
    1804:	10c00144 	addi	r3,r2,5
    1808:	d0a81717 	ldw	r2,-24484(gp)
    180c:	10800144 	addi	r2,r2,5
    1810:	d8000015 	stw	zero,0(sp)
    1814:	180d883a 	mov	r6,r3
    1818:	100f883a 	mov	r7,r2
    181c:	00024f40 	call	24f4 <VGA_box>


		if (first == 1) {
    1820:	d0a00017 	ldw	r2,-32768(gp)
    1824:	10800058 	cmpnei	r2,r2,1
    1828:	1000201e 	bne	r2,zero,18ac <Tutorial+0x148>
			printf("FIRST");
    182c:	010000b4 	movhi	r4,2
    1830:	213e0204 	addi	r4,r4,-2040
    1834:	0002e880 	call	2e88 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    1838:	d0a81a17 	ldw	r2,-24472(gp)
    183c:	10c02804 	addi	r3,r2,160
    1840:	d0a81b17 	ldw	r2,-24468(gp)
    1844:	1885883a 	add	r2,r3,r2
    1848:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    184c:	d0e81c17 	ldw	r3,-24464(gp)
    1850:	d0a81b17 	ldw	r2,-24468(gp)
    1854:	1885883a 	add	r2,r3,r2
    1858:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    185c:	d0e81717 	ldw	r3,-24484(gp)
    1860:	d0a81817 	ldw	r2,-24480(gp)
    1864:	1885883a 	add	r2,r3,r2
    1868:	d0a81715 	stw	r2,-24484(gp)

			del_middenlijn();
    186c:	00026a00 	call	26a0 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1870:	0081a5c4 	movi	r2,1687
    1874:	d8800015 	stw	r2,0(sp)
    1878:	01004f04 	movi	r4,316
    187c:	000b883a 	mov	r5,zero
    1880:	01804fc4 	movi	r6,319
    1884:	01c03bc4 	movi	r7,239
    1888:	00024f40 	call	24f4 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    188c:	d8000015 	stw	zero,0(sp)
    1890:	01004b04 	movi	r4,300
    1894:	01400104 	movi	r5,4
    1898:	01804c44 	movi	r6,305
    189c:	01c03ac4 	movi	r7,235
    18a0:	00024f40 	call	24f4 <VGA_box>

			first = 0;
    18a4:	d0200015 	stw	zero,-32768(gp)
    18a8:	00000c06 	br	18dc <Tutorial+0x178>
		} else {
			ALT_x1 += ALT_inc_x;
    18ac:	d0e81a17 	ldw	r3,-24472(gp)
    18b0:	d0a81b17 	ldw	r2,-24468(gp)
    18b4:	1885883a 	add	r2,r3,r2
    18b8:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    18bc:	d0e81c17 	ldw	r3,-24464(gp)
    18c0:	d0a81b17 	ldw	r2,-24468(gp)
    18c4:	1885883a 	add	r2,r3,r2
    18c8:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    18cc:	d0e81717 	ldw	r3,-24484(gp)
    18d0:	d0a81817 	ldw	r2,-24480(gp)
    18d4:	1885883a 	add	r2,r3,r2
    18d8:	d0a81715 	stw	r2,-24484(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    18dc:	d0e81717 	ldw	r3,-24484(gp)
    18e0:	d0a81317 	ldw	r2,-24500(gp)
    18e4:	18800326 	beq	r3,r2,18f4 <Tutorial+0x190>
    18e8:	d0a81717 	ldw	r2,-24484(gp)
    18ec:	10800118 	cmpnei	r2,r2,4
    18f0:	1000031e 	bne	r2,zero,1900 <Tutorial+0x19c>
			ALT_inc_y = -(ALT_inc_y);
    18f4:	d0a81817 	ldw	r2,-24480(gp)
    18f8:	0085c83a 	sub	r2,zero,r2
    18fc:	d0a81815 	stw	r2,-24480(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1900:	d0e81c17 	ldw	r3,-24464(gp)
    1904:	d0a81517 	ldw	r2,-24492(gp)
    1908:	1880031e 	bne	r3,r2,1918 <Tutorial+0x1b4>
			ALT_inc_x = -(ALT_inc_x);
    190c:	d0a81b17 	ldw	r2,-24468(gp)
    1910:	0085c83a 	sub	r2,zero,r2
    1914:	d0a81b15 	stw	r2,-24468(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1918:	d1281a17 	ldw	r4,-24472(gp)
    191c:	d1681717 	ldw	r5,-24484(gp)
    1920:	d0a81a17 	ldw	r2,-24472(gp)
    1924:	11800144 	addi	r6,r2,5
    1928:	d0a81717 	ldw	r2,-24484(gp)
    192c:	10c00144 	addi	r3,r2,5
    1930:	00804034 	movhi	r2,256
    1934:	10bfffc4 	addi	r2,r2,-1
    1938:	d8800015 	stw	r2,0(sp)
    193c:	180f883a 	mov	r7,r3
    1940:	00024f40 	call	24f4 <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    1944:	d0a81a17 	ldw	r2,-24472(gp)
    1948:	1000021e 	bne	r2,zero,1954 <Tutorial+0x1f0>
			gescoord(3);
    194c:	010000c4 	movi	r4,3
    1950:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1954:	d0a81a17 	ldw	r2,-24472(gp)
    1958:	10800558 	cmpnei	r2,r2,21
    195c:	10000c1e 	bne	r2,zero,1990 <Tutorial+0x22c>
    1960:	e0bffd17 	ldw	r2,-12(fp)
    1964:	10c00017 	ldw	r3,0(r2)
    1968:	d0a81717 	ldw	r2,-24484(gp)
    196c:	1880080e 	bge	r3,r2,1990 <Tutorial+0x22c>
    1970:	e0bffd17 	ldw	r2,-12(fp)
    1974:	10800017 	ldw	r2,0(r2)
    1978:	10800c84 	addi	r2,r2,50
    197c:	d0e81717 	ldw	r3,-24484(gp)
    1980:	1880030e 	bge	r3,r2,1990 <Tutorial+0x22c>
			ALT_inc_x = -(ALT_inc_x);
    1984:	d0a81b17 	ldw	r2,-24468(gp)
    1988:	0085c83a 	sub	r2,zero,r2
    198c:	d0a81b15 	stw	r2,-24468(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1990:	d0a81a17 	ldw	r2,-24472(gp)
    1994:	10800608 	cmpgei	r2,r2,24
    1998:	10000a1e 	bne	r2,zero,19c4 <Tutorial+0x260>
    199c:	d0a81a17 	ldw	r2,-24472(gp)
    19a0:	10800590 	cmplti	r2,r2,22
    19a4:	1000071e 	bne	r2,zero,19c4 <Tutorial+0x260>
    19a8:	e0bffd17 	ldw	r2,-12(fp)
    19ac:	10c00017 	ldw	r3,0(r2)
    19b0:	d0a81717 	ldw	r2,-24484(gp)
    19b4:	1880031e 	bne	r3,r2,19c4 <Tutorial+0x260>
			ALT_inc_y = -(ALT_inc_y);
    19b8:	d0a81817 	ldw	r2,-24480(gp)
    19bc:	0085c83a 	sub	r2,zero,r2
    19c0:	d0a81815 	stw	r2,-24480(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    19c4:	d0a81a17 	ldw	r2,-24472(gp)
    19c8:	10800608 	cmpgei	r2,r2,24
    19cc:	10000b1e 	bne	r2,zero,19fc <Tutorial+0x298>
    19d0:	d0a81a17 	ldw	r2,-24472(gp)
    19d4:	10800590 	cmplti	r2,r2,22
    19d8:	1000081e 	bne	r2,zero,19fc <Tutorial+0x298>
    19dc:	e0bffd17 	ldw	r2,-12(fp)
    19e0:	10800017 	ldw	r2,0(r2)
    19e4:	10c00c84 	addi	r3,r2,50
    19e8:	d0a81717 	ldw	r2,-24484(gp)
    19ec:	1880031e 	bne	r3,r2,19fc <Tutorial+0x298>
			ALT_inc_y = -(ALT_inc_y);
    19f0:	d0a81817 	ldw	r2,-24480(gp)
    19f4:	0085c83a 	sub	r2,zero,r2
    19f8:	d0a81815 	stw	r2,-24480(gp)
		}

		
		if (controller(3) == 3) {
    19fc:	010000c4 	movi	r4,3
    1a00:	000039c0 	call	39c <controller>
    1a04:	108000d8 	cmpnei	r2,r2,3
    1a08:	1000011e 	bne	r2,zero,1a10 <Tutorial+0x2ac>
			endTutorial();
    1a0c:	00015d80 	call	15d8 <endTutorial>
		}

		OSTimeDly(1);
    1a10:	01000044 	movi	r4,1
    1a14:	001b3f00 	call	1b3f0 <OSTimeDly>


	}
    1a18:	003f6406 	br	17ac <__alt_mem_Flash_flash_data+0xf40017ac>

00001a1c <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    1a1c:	defffa04 	addi	sp,sp,-24
    1a20:	dfc00515 	stw	ra,20(sp)
    1a24:	df000415 	stw	fp,16(sp)
    1a28:	df000404 	addi	fp,sp,16
    1a2c:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    1a30:	e0bfff17 	ldw	r2,-4(fp)
    1a34:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    1a38:	00020f80 	call	20f8 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1a3c:	d0e80d17 	ldw	r3,-24524(gp)
    1a40:	e0bffe04 	addi	r2,fp,-8
    1a44:	d8800015 	stw	r2,0(sp)
    1a48:	1809883a 	mov	r4,r3
    1a4c:	01400044 	movi	r5,1
    1a50:	000d883a 	mov	r6,zero
    1a54:	000f883a 	mov	r7,zero
    1a58:	0015bdc0 	call	15bdc <OSFlagPend>

		if (controller(ID) == 1){
    1a5c:	e13ffd17 	ldw	r4,-12(fp)
    1a60:	000039c0 	call	39c <controller>
    1a64:	10800058 	cmpnei	r2,r2,1
    1a68:	1000111e 	bne	r2,zero,1ab0 <menu+0x94>
			if(changed != 0){
    1a6c:	d0a82017 	ldw	r2,-24448(gp)
    1a70:	10000926 	beq	r2,zero,1a98 <menu+0x7c>
				gameModeMenu++;
    1a74:	d0a00317 	ldw	r2,-32756(gp)
    1a78:	10800044 	addi	r2,r2,1
    1a7c:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    1a80:	00800044 	movi	r2,1
    1a84:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    1a88:	d0282015 	stw	zero,-24448(gp)
				printf("heeft 1 gereturned \n");
    1a8c:	010000b4 	movhi	r4,2
    1a90:	213e8204 	addi	r4,r4,-1528
    1a94:	0002f6c0 	call	2f6c <puts>
			}
			if (gameModeMenu >= 5){
    1a98:	d0a00317 	ldw	r2,-32756(gp)
    1a9c:	10800150 	cmplti	r2,r2,5
    1aa0:	1000161e 	bne	r2,zero,1afc <menu+0xe0>
				gameModeMenu = 1;
    1aa4:	00800044 	movi	r2,1
    1aa8:	d0a00315 	stw	r2,-32756(gp)
    1aac:	00001306 	br	1afc <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    1ab0:	e13ffd17 	ldw	r4,-12(fp)
    1ab4:	000039c0 	call	39c <controller>
    1ab8:	1000101e 	bne	r2,zero,1afc <menu+0xe0>
			if(changed !=0){
    1abc:	d0a82017 	ldw	r2,-24448(gp)
    1ac0:	10000a26 	beq	r2,zero,1aec <menu+0xd0>
				gameModeMenu--;
    1ac4:	d0a00317 	ldw	r2,-32756(gp)
    1ac8:	10bfffc4 	addi	r2,r2,-1
    1acc:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    1ad0:	d0281f15 	stw	zero,-24452(gp)
				changed=0;
    1ad4:	d0282015 	stw	zero,-24448(gp)
				eenkeer = 1;
    1ad8:	00800044 	movi	r2,1
    1adc:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    1ae0:	010000b4 	movhi	r4,2
    1ae4:	213e8704 	addi	r4,r4,-1508
    1ae8:	0002f6c0 	call	2f6c <puts>
			}
			if (gameModeMenu <= 0){
    1aec:	d0a00317 	ldw	r2,-32756(gp)
    1af0:	00800216 	blt	zero,r2,1afc <menu+0xe0>
				gameModeMenu = 4;
    1af4:	00800104 	movi	r2,4
    1af8:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    1afc:	01000504 	movi	r4,20
    1b00:	001b3f00 	call	1b3f0 <OSTimeDly>
	}
    1b04:	003fcd06 	br	1a3c <__alt_mem_Flash_flash_data+0xf4001a3c>

00001b08 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    1b08:	defffa04 	addi	sp,sp,-24
    1b0c:	dfc00515 	stw	ra,20(sp)
    1b10:	df000415 	stw	fp,16(sp)
    1b14:	df000404 	addi	fp,sp,16
    1b18:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    1b1c:	e0bfff17 	ldw	r2,-4(fp)
    1b20:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1b24:	d0e80d17 	ldw	r3,-24524(gp)
    1b28:	e0bffe04 	addi	r2,fp,-8
    1b2c:	d8800015 	stw	r2,0(sp)
    1b30:	1809883a 	mov	r4,r3
    1b34:	01400404 	movi	r5,16
    1b38:	000d883a 	mov	r6,zero
    1b3c:	000f883a 	mov	r7,zero
    1b40:	0015bdc0 	call	15bdc <OSFlagPend>

		if (gameModeMenu == 1){
    1b44:	d0a00317 	ldw	r2,-32756(gp)
    1b48:	10800058 	cmpnei	r2,r2,1
    1b4c:	1000411e 	bne	r2,zero,1c54 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    1b50:	d0a00a17 	ldw	r2,-32728(gp)
    1b54:	10800058 	cmpnei	r2,r2,1
    1b58:	10001f1e 	bne	r2,zero,1bd8 <selecteerMenu+0xd0>
				clearScreen();
    1b5c:	0001f380 	call	1f38 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    1b60:	d0a00417 	ldw	r2,-32752(gp)
    1b64:	1085883a 	add	r2,r2,r2
    1b68:	1085883a 	add	r2,r2,r2
    1b6c:	1009883a 	mov	r4,r2
    1b70:	d0a00617 	ldw	r2,-32744(gp)
    1b74:	1085883a 	add	r2,r2,r2
    1b78:	1085883a 	add	r2,r2,r2
    1b7c:	100b883a 	mov	r5,r2
    1b80:	d0a00517 	ldw	r2,-32748(gp)
    1b84:	1085883a 	add	r2,r2,r2
    1b88:	1085883a 	add	r2,r2,r2
    1b8c:	100d883a 	mov	r6,r2
    1b90:	d0a00717 	ldw	r2,-32740(gp)
    1b94:	1085883a 	add	r2,r2,r2
    1b98:	1085883a 	add	r2,r2,r2
    1b9c:	1007883a 	mov	r3,r2
    1ba0:	00be0014 	movui	r2,63488
    1ba4:	d8800015 	stw	r2,0(sp)
    1ba8:	180f883a 	mov	r7,r3
    1bac:	00024f40 	call	24f4 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    1bb0:	d0e00817 	ldw	r3,-32736(gp)
    1bb4:	d0a00917 	ldw	r2,-32732(gp)
    1bb8:	1809883a 	mov	r4,r3
    1bbc:	100b883a 	mov	r5,r2
    1bc0:	018000b4 	movhi	r6,2
    1bc4:	31be8c04 	addi	r6,r6,-1488
    1bc8:	00025a80 	call	25a8 <VGA_text>
				eenkeer = 0;
    1bcc:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1bd0:	00800044 	movi	r2,1
    1bd4:	d0a82015 	stw	r2,-24448(gp)
			}
			if(controller(ID) == 2){
    1bd8:	e13ffd17 	ldw	r4,-12(fp)
    1bdc:	000039c0 	call	39c <controller>
    1be0:	10800098 	cmpnei	r2,r2,2
    1be4:	1000d11e 	bne	r2,zero,1f2c <selecteerMenu+0x424>
				clearScreen();
    1be8:	0001f380 	call	1f38 <clearScreen>
				clearText();
    1bec:	0001f780 	call	1f78 <clearText>
				printf("start Singleplayer\n");
    1bf0:	010000b4 	movhi	r4,2
    1bf4:	213e9004 	addi	r4,r4,-1472
    1bf8:	0002f6c0 	call	2f6c <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    1bfc:	d0e80d17 	ldw	r3,-24524(gp)
    1c00:	e0bffe04 	addi	r2,fp,-8
    1c04:	1809883a 	mov	r4,r3
    1c08:	01400104 	movi	r5,4
    1c0c:	000d883a 	mov	r6,zero
    1c10:	100f883a 	mov	r7,r2
    1c14:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    1c18:	d0e80b17 	ldw	r3,-24532(gp)
    1c1c:	e0bffe04 	addi	r2,fp,-8
    1c20:	1809883a 	mov	r4,r3
    1c24:	01400804 	movi	r5,32
    1c28:	000d883a 	mov	r6,zero
    1c2c:	100f883a 	mov	r7,r2
    1c30:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1c34:	d0e80d17 	ldw	r3,-24524(gp)
    1c38:	e0bffe04 	addi	r2,fp,-8
    1c3c:	1809883a 	mov	r4,r3
    1c40:	01400444 	movi	r5,17
    1c44:	01800044 	movi	r6,1
    1c48:	100f883a 	mov	r7,r2
    1c4c:	00162340 	call	16234 <OSFlagPost>
    1c50:	0000b606 	br	1f2c <selecteerMenu+0x424>
			}
		} else if (gameModeMenu == 2){
    1c54:	d0a00317 	ldw	r2,-32756(gp)
    1c58:	10800098 	cmpnei	r2,r2,2
    1c5c:	1000441e 	bne	r2,zero,1d70 <selecteerMenu+0x268>
			if(eenkeer == 1){
    1c60:	d0a00a17 	ldw	r2,-32728(gp)
    1c64:	10800058 	cmpnei	r2,r2,1
    1c68:	1000221e 	bne	r2,zero,1cf4 <selecteerMenu+0x1ec>
				clearScreen();
    1c6c:	0001f380 	call	1f38 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1c70:	d0a00417 	ldw	r2,-32752(gp)
    1c74:	1085883a 	add	r2,r2,r2
    1c78:	1085883a 	add	r2,r2,r2
    1c7c:	1009883a 	mov	r4,r2
    1c80:	d0a00617 	ldw	r2,-32744(gp)
    1c84:	10800104 	addi	r2,r2,4
    1c88:	1085883a 	add	r2,r2,r2
    1c8c:	1085883a 	add	r2,r2,r2
    1c90:	100b883a 	mov	r5,r2
    1c94:	d0a00517 	ldw	r2,-32748(gp)
    1c98:	1085883a 	add	r2,r2,r2
    1c9c:	1085883a 	add	r2,r2,r2
    1ca0:	100d883a 	mov	r6,r2
    1ca4:	d0a00717 	ldw	r2,-32740(gp)
    1ca8:	10800104 	addi	r2,r2,4
    1cac:	1085883a 	add	r2,r2,r2
    1cb0:	1085883a 	add	r2,r2,r2
    1cb4:	1007883a 	mov	r3,r2
    1cb8:	00be0014 	movui	r2,63488
    1cbc:	d8800015 	stw	r2,0(sp)
    1cc0:	180f883a 	mov	r7,r3
    1cc4:	00024f40 	call	24f4 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    1cc8:	d0e00817 	ldw	r3,-32736(gp)
    1ccc:	d0a00917 	ldw	r2,-32732(gp)
    1cd0:	10800104 	addi	r2,r2,4
    1cd4:	1809883a 	mov	r4,r3
    1cd8:	100b883a 	mov	r5,r2
    1cdc:	018000b4 	movhi	r6,2
    1ce0:	31be9504 	addi	r6,r6,-1452
    1ce4:	00025a80 	call	25a8 <VGA_text>
				eenkeer = 0;
    1ce8:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1cec:	00800044 	movi	r2,1
    1cf0:	d0a82015 	stw	r2,-24448(gp)
			}
			if(controller(ID) == 2){
    1cf4:	e13ffd17 	ldw	r4,-12(fp)
    1cf8:	000039c0 	call	39c <controller>
    1cfc:	10800098 	cmpnei	r2,r2,2
    1d00:	10008a1e 	bne	r2,zero,1f2c <selecteerMenu+0x424>
				clearScreen();
    1d04:	0001f380 	call	1f38 <clearScreen>
				clearText();
    1d08:	0001f780 	call	1f78 <clearText>
				printf("start game\n");
    1d0c:	010000b4 	movhi	r4,2
    1d10:	213e9804 	addi	r4,r4,-1440
    1d14:	0002f6c0 	call	2f6c <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    1d18:	d0e80d17 	ldw	r3,-24524(gp)
    1d1c:	e0bffe04 	addi	r2,fp,-8
    1d20:	1809883a 	mov	r4,r3
    1d24:	01400304 	movi	r5,12
    1d28:	000d883a 	mov	r6,zero
    1d2c:	100f883a 	mov	r7,r2
    1d30:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    1d34:	d0e80b17 	ldw	r3,-24532(gp)
    1d38:	e0bffe04 	addi	r2,fp,-8
    1d3c:	1809883a 	mov	r4,r3
    1d40:	01400084 	movi	r5,2
    1d44:	000d883a 	mov	r6,zero
    1d48:	100f883a 	mov	r7,r2
    1d4c:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1d50:	d0e80d17 	ldw	r3,-24524(gp)
    1d54:	e0bffe04 	addi	r2,fp,-8
    1d58:	1809883a 	mov	r4,r3
    1d5c:	01400444 	movi	r5,17
    1d60:	01800044 	movi	r6,1
    1d64:	100f883a 	mov	r7,r2
    1d68:	00162340 	call	16234 <OSFlagPost>
    1d6c:	00006f06 	br	1f2c <selecteerMenu+0x424>
			}

		} else if (gameModeMenu == 3){
    1d70:	d0a00317 	ldw	r2,-32756(gp)
    1d74:	108000d8 	cmpnei	r2,r2,3
    1d78:	1000261e 	bne	r2,zero,1e14 <selecteerMenu+0x30c>
			if(eenkeer == 1){
    1d7c:	d0a00a17 	ldw	r2,-32728(gp)
    1d80:	10800058 	cmpnei	r2,r2,1
    1d84:	1000691e 	bne	r2,zero,1f2c <selecteerMenu+0x424>
				clearScreen();
    1d88:	0001f380 	call	1f38 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    1d8c:	d0a00417 	ldw	r2,-32752(gp)
    1d90:	1085883a 	add	r2,r2,r2
    1d94:	1085883a 	add	r2,r2,r2
    1d98:	1009883a 	mov	r4,r2
    1d9c:	d0a00617 	ldw	r2,-32744(gp)
    1da0:	10800204 	addi	r2,r2,8
    1da4:	1085883a 	add	r2,r2,r2
    1da8:	1085883a 	add	r2,r2,r2
    1dac:	100b883a 	mov	r5,r2
    1db0:	d0a00517 	ldw	r2,-32748(gp)
    1db4:	1085883a 	add	r2,r2,r2
    1db8:	1085883a 	add	r2,r2,r2
    1dbc:	100d883a 	mov	r6,r2
    1dc0:	d0a00717 	ldw	r2,-32740(gp)
    1dc4:	10800204 	addi	r2,r2,8
    1dc8:	1085883a 	add	r2,r2,r2
    1dcc:	1085883a 	add	r2,r2,r2
    1dd0:	1007883a 	mov	r3,r2
    1dd4:	00be0014 	movui	r2,63488
    1dd8:	d8800015 	stw	r2,0(sp)
    1ddc:	180f883a 	mov	r7,r3
    1de0:	00024f40 	call	24f4 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    1de4:	d0e00817 	ldw	r3,-32736(gp)
    1de8:	d0a00917 	ldw	r2,-32732(gp)
    1dec:	10800204 	addi	r2,r2,8
    1df0:	1809883a 	mov	r4,r3
    1df4:	100b883a 	mov	r5,r2
    1df8:	018000b4 	movhi	r6,2
    1dfc:	31be9b04 	addi	r6,r6,-1428
    1e00:	00025a80 	call	25a8 <VGA_text>
				eenkeer = 0;
    1e04:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1e08:	00800044 	movi	r2,1
    1e0c:	d0a82015 	stw	r2,-24448(gp)
    1e10:	00004606 	br	1f2c <selecteerMenu+0x424>

			}
		} else if (gameModeMenu == 4){
    1e14:	d0a00317 	ldw	r2,-32756(gp)
    1e18:	10800118 	cmpnei	r2,r2,4
    1e1c:	1000431e 	bne	r2,zero,1f2c <selecteerMenu+0x424>
			if(eenkeer == 1){
    1e20:	d0a00a17 	ldw	r2,-32728(gp)
    1e24:	10800058 	cmpnei	r2,r2,1
    1e28:	1000221e 	bne	r2,zero,1eb4 <selecteerMenu+0x3ac>
				clearScreen();
    1e2c:	0001f380 	call	1f38 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    1e30:	d0a00417 	ldw	r2,-32752(gp)
    1e34:	1085883a 	add	r2,r2,r2
    1e38:	1085883a 	add	r2,r2,r2
    1e3c:	1009883a 	mov	r4,r2
    1e40:	d0a00617 	ldw	r2,-32744(gp)
    1e44:	10800304 	addi	r2,r2,12
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1085883a 	add	r2,r2,r2
    1e50:	100b883a 	mov	r5,r2
    1e54:	d0a00517 	ldw	r2,-32748(gp)
    1e58:	1085883a 	add	r2,r2,r2
    1e5c:	1085883a 	add	r2,r2,r2
    1e60:	100d883a 	mov	r6,r2
    1e64:	d0a00717 	ldw	r2,-32740(gp)
    1e68:	10800304 	addi	r2,r2,12
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	1007883a 	mov	r3,r2
    1e78:	00be0014 	movui	r2,63488
    1e7c:	d8800015 	stw	r2,0(sp)
    1e80:	180f883a 	mov	r7,r3
    1e84:	00024f40 	call	24f4 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    1e88:	d0e00817 	ldw	r3,-32736(gp)
    1e8c:	d0a00917 	ldw	r2,-32732(gp)
    1e90:	10800304 	addi	r2,r2,12
    1e94:	1809883a 	mov	r4,r3
    1e98:	100b883a 	mov	r5,r2
    1e9c:	018000b4 	movhi	r6,2
    1ea0:	31be9e04 	addi	r6,r6,-1416
    1ea4:	00025a80 	call	25a8 <VGA_text>
				eenkeer = 0;
    1ea8:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1eac:	00800044 	movi	r2,1
    1eb0:	d0a82015 	stw	r2,-24448(gp)

			}
			
			if(controller(ID) == 2){
    1eb4:	e13ffd17 	ldw	r4,-12(fp)
    1eb8:	000039c0 	call	39c <controller>
    1ebc:	10800098 	cmpnei	r2,r2,2
    1ec0:	10001a1e 	bne	r2,zero,1f2c <selecteerMenu+0x424>
				clearScreen();
    1ec4:	0001f380 	call	1f38 <clearScreen>
				clearText();
    1ec8:	0001f780 	call	1f78 <clearText>
				printf("Start Tutorial\n");
    1ecc:	010000b4 	movhi	r4,2
    1ed0:	213ea104 	addi	r4,r4,-1404
    1ed4:	0002f6c0 	call	2f6c <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    1ed8:	d0e80d17 	ldw	r3,-24524(gp)
    1edc:	e0bffe04 	addi	r2,fp,-8
    1ee0:	1809883a 	mov	r4,r3
    1ee4:	01400104 	movi	r5,4
    1ee8:	000d883a 	mov	r6,zero
    1eec:	100f883a 	mov	r7,r2
    1ef0:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    1ef4:	d0e81017 	ldw	r3,-24512(gp)
    1ef8:	e0bffe04 	addi	r2,fp,-8
    1efc:	1809883a 	mov	r4,r3
    1f00:	01401004 	movi	r5,64
    1f04:	000d883a 	mov	r6,zero
    1f08:	100f883a 	mov	r7,r2
    1f0c:	00162340 	call	16234 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1f10:	d0e80d17 	ldw	r3,-24524(gp)
    1f14:	e0bffe04 	addi	r2,fp,-8
    1f18:	1809883a 	mov	r4,r3
    1f1c:	01400444 	movi	r5,17
    1f20:	01800044 	movi	r6,1
    1f24:	100f883a 	mov	r7,r2
    1f28:	00162340 	call	16234 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    1f2c:	01000504 	movi	r4,20
    1f30:	001b3f00 	call	1b3f0 <OSTimeDly>
	}
    1f34:	003efb06 	br	1b24 <__alt_mem_Flash_flash_data+0xf4001b24>

00001f38 <clearScreen>:
}

void clearScreen(){
    1f38:	defffd04 	addi	sp,sp,-12
    1f3c:	dfc00215 	stw	ra,8(sp)
    1f40:	df000115 	stw	fp,4(sp)
    1f44:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    1f48:	d8000015 	stw	zero,0(sp)
    1f4c:	01000644 	movi	r4,25
    1f50:	01401184 	movi	r5,70
    1f54:	01803204 	movi	r6,200
    1f58:	01c021c4 	movi	r7,135
    1f5c:	00024f40 	call	24f4 <VGA_box>
	del_middenlijn();
    1f60:	00026a00 	call	26a0 <del_middenlijn>
}
    1f64:	e037883a 	mov	sp,fp
    1f68:	dfc00117 	ldw	ra,4(sp)
    1f6c:	df000017 	ldw	fp,0(sp)
    1f70:	dec00204 	addi	sp,sp,8
    1f74:	f800283a 	ret

00001f78 <clearText>:

void clearText(){
    1f78:	defffe04 	addi	sp,sp,-8
    1f7c:	dfc00115 	stw	ra,4(sp)
    1f80:	df000015 	stw	fp,0(sp)
    1f84:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    1f88:	d0e00817 	ldw	r3,-32736(gp)
    1f8c:	d0a00917 	ldw	r2,-32732(gp)
    1f90:	1809883a 	mov	r4,r3
    1f94:	100b883a 	mov	r5,r2
    1f98:	018000b4 	movhi	r6,2
    1f9c:	31bea504 	addi	r6,r6,-1388
    1fa0:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    1fa4:	d0e00817 	ldw	r3,-32736(gp)
    1fa8:	d0a00917 	ldw	r2,-32732(gp)
    1fac:	10800104 	addi	r2,r2,4
    1fb0:	1809883a 	mov	r4,r3
    1fb4:	100b883a 	mov	r5,r2
    1fb8:	018000b4 	movhi	r6,2
    1fbc:	31bea904 	addi	r6,r6,-1372
    1fc0:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    1fc4:	d0e00817 	ldw	r3,-32736(gp)
    1fc8:	d0a00917 	ldw	r2,-32732(gp)
    1fcc:	10800204 	addi	r2,r2,8
    1fd0:	1809883a 	mov	r4,r3
    1fd4:	100b883a 	mov	r5,r2
    1fd8:	018000b4 	movhi	r6,2
    1fdc:	31beac04 	addi	r6,r6,-1360
    1fe0:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    1fe4:	d0e00817 	ldw	r3,-32736(gp)
    1fe8:	d0a00917 	ldw	r2,-32732(gp)
    1fec:	10800304 	addi	r2,r2,12
    1ff0:	1809883a 	mov	r4,r3
    1ff4:	100b883a 	mov	r5,r2
    1ff8:	018000b4 	movhi	r6,2
    1ffc:	31beaf04 	addi	r6,r6,-1348
    2000:	00025a80 	call	25a8 <VGA_text>
}
    2004:	e037883a 	mov	sp,fp
    2008:	dfc00117 	ldw	ra,4(sp)
    200c:	df000017 	ldw	fp,0(sp)
    2010:	dec00204 	addi	sp,sp,8
    2014:	f800283a 	ret

00002018 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2018:	defff804 	addi	sp,sp,-32
    201c:	dfc00715 	stw	ra,28(sp)
    2020:	df000615 	stw	fp,24(sp)
    2024:	df000604 	addi	fp,sp,24
    2028:	e13ffb15 	stw	r4,-20(fp)
    202c:	e17ffc15 	stw	r5,-16(fp)
    2030:	e1bffd15 	stw	r6,-12(fp)
    2034:	e1fffe15 	stw	r7,-8(fp)
    2038:	e0800217 	ldw	r2,8(fp)
    203c:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2040:	e0bfff0f 	ldh	r2,-4(fp)
    2044:	d8800015 	stw	r2,0(sp)
    2048:	e13ffb17 	ldw	r4,-20(fp)
    204c:	e17ffc17 	ldw	r5,-16(fp)
    2050:	e1bffd17 	ldw	r6,-12(fp)
    2054:	e1fffe17 	ldw	r7,-8(fp)
    2058:	00024f40 	call	24f4 <VGA_box>
}
    205c:	e037883a 	mov	sp,fp
    2060:	dfc00117 	ldw	ra,4(sp)
    2064:	df000017 	ldw	fp,0(sp)
    2068:	dec00204 	addi	sp,sp,8
    206c:	f800283a 	ret

00002070 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2070:	defff804 	addi	sp,sp,-32
    2074:	dfc00715 	stw	ra,28(sp)
    2078:	df000615 	stw	fp,24(sp)
    207c:	df000604 	addi	fp,sp,24
    2080:	e13ffb15 	stw	r4,-20(fp)
    2084:	e17ffc15 	stw	r5,-16(fp)
    2088:	e1bffd15 	stw	r6,-12(fp)
    208c:	e1fffe15 	stw	r7,-8(fp)
    2090:	e0800217 	ldw	r2,8(fp)
    2094:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2098:	e0bffb17 	ldw	r2,-20(fp)
    209c:	10800044 	addi	r2,r2,1
    20a0:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    20a4:	e0bffc17 	ldw	r2,-16(fp)
    20a8:	10800044 	addi	r2,r2,1
    20ac:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    20b0:	e0bffd17 	ldw	r2,-12(fp)
    20b4:	10bfffc4 	addi	r2,r2,-1
    20b8:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	10bfffc4 	addi	r2,r2,-1
    20c4:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    20c8:	e0bfff0f 	ldh	r2,-4(fp)
    20cc:	d8800015 	stw	r2,0(sp)
    20d0:	e13ffb17 	ldw	r4,-20(fp)
    20d4:	e17ffc17 	ldw	r5,-16(fp)
    20d8:	e1bffd17 	ldw	r6,-12(fp)
    20dc:	e1fffe17 	ldw	r7,-8(fp)
    20e0:	00024f40 	call	24f4 <VGA_box>
}
    20e4:	e037883a 	mov	sp,fp
    20e8:	dfc00117 	ldw	ra,4(sp)
    20ec:	df000017 	ldw	fp,0(sp)
    20f0:	dec00204 	addi	sp,sp,8
    20f4:	f800283a 	ret

000020f8 <teken_menu>:

void teken_menu(int ID){
    20f8:	defffc04 	addi	sp,sp,-16
    20fc:	dfc00315 	stw	ra,12(sp)
    2100:	df000215 	stw	fp,8(sp)
    2104:	df000204 	addi	fp,sp,8
    2108:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    210c:	d0e00817 	ldw	r3,-32736(gp)
    2110:	d0a00917 	ldw	r2,-32732(gp)
    2114:	1809883a 	mov	r4,r3
    2118:	100b883a 	mov	r5,r2
    211c:	018000b4 	movhi	r6,2
    2120:	31be8c04 	addi	r6,r6,-1488
    2124:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2128:	d0e00817 	ldw	r3,-32736(gp)
    212c:	d0a00917 	ldw	r2,-32732(gp)
    2130:	10800104 	addi	r2,r2,4
    2134:	1809883a 	mov	r4,r3
    2138:	100b883a 	mov	r5,r2
    213c:	018000b4 	movhi	r6,2
    2140:	31be9504 	addi	r6,r6,-1452
    2144:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    2148:	d0e00817 	ldw	r3,-32736(gp)
    214c:	d0a00917 	ldw	r2,-32732(gp)
    2150:	10800204 	addi	r2,r2,8
    2154:	1809883a 	mov	r4,r3
    2158:	100b883a 	mov	r5,r2
    215c:	018000b4 	movhi	r6,2
    2160:	31be9b04 	addi	r6,r6,-1428
    2164:	00025a80 	call	25a8 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    2168:	d0e00817 	ldw	r3,-32736(gp)
    216c:	d0a00917 	ldw	r2,-32732(gp)
    2170:	10800304 	addi	r2,r2,12
    2174:	1809883a 	mov	r4,r3
    2178:	100b883a 	mov	r5,r2
    217c:	018000b4 	movhi	r6,2
    2180:	31be9e04 	addi	r6,r6,-1416
    2184:	00025a80 	call	25a8 <VGA_text>
	if(ID == 1){
    2188:	e0bfff17 	ldw	r2,-4(fp)
    218c:	10800058 	cmpnei	r2,r2,1
    2190:	1000151e 	bne	r2,zero,21e8 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2194:	d0a00417 	ldw	r2,-32752(gp)
    2198:	1085883a 	add	r2,r2,r2
    219c:	1085883a 	add	r2,r2,r2
    21a0:	1009883a 	mov	r4,r2
    21a4:	d0a00617 	ldw	r2,-32744(gp)
    21a8:	1085883a 	add	r2,r2,r2
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	100b883a 	mov	r5,r2
    21b4:	d0a00517 	ldw	r2,-32748(gp)
    21b8:	1085883a 	add	r2,r2,r2
    21bc:	1085883a 	add	r2,r2,r2
    21c0:	100d883a 	mov	r6,r2
    21c4:	d0a00717 	ldw	r2,-32740(gp)
    21c8:	1085883a 	add	r2,r2,r2
    21cc:	1085883a 	add	r2,r2,r2
    21d0:	1007883a 	mov	r3,r2
    21d4:	00be0014 	movui	r2,63488
    21d8:	d8800015 	stw	r2,0(sp)
    21dc:	180f883a 	mov	r7,r3
    21e0:	00024f40 	call	24f4 <VGA_box>
    21e4:	00003306 	br	22b4 <teken_menu+0x1bc>
	}else if(ID == 2){
    21e8:	e0bfff17 	ldw	r2,-4(fp)
    21ec:	10800098 	cmpnei	r2,r2,2
    21f0:	1000171e 	bne	r2,zero,2250 <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    21f4:	d0a00417 	ldw	r2,-32752(gp)
    21f8:	1085883a 	add	r2,r2,r2
    21fc:	1085883a 	add	r2,r2,r2
    2200:	1009883a 	mov	r4,r2
    2204:	d0a00617 	ldw	r2,-32744(gp)
    2208:	10800104 	addi	r2,r2,4
    220c:	1085883a 	add	r2,r2,r2
    2210:	1085883a 	add	r2,r2,r2
    2214:	100b883a 	mov	r5,r2
    2218:	d0a00517 	ldw	r2,-32748(gp)
    221c:	1085883a 	add	r2,r2,r2
    2220:	1085883a 	add	r2,r2,r2
    2224:	100d883a 	mov	r6,r2
    2228:	d0a00717 	ldw	r2,-32740(gp)
    222c:	10800104 	addi	r2,r2,4
    2230:	1085883a 	add	r2,r2,r2
    2234:	1085883a 	add	r2,r2,r2
    2238:	1007883a 	mov	r3,r2
    223c:	00be0014 	movui	r2,63488
    2240:	d8800015 	stw	r2,0(sp)
    2244:	180f883a 	mov	r7,r3
    2248:	00024f40 	call	24f4 <VGA_box>
    224c:	00001906 	br	22b4 <teken_menu+0x1bc>
	}else if(ID == 4){
    2250:	e0bfff17 	ldw	r2,-4(fp)
    2254:	10800118 	cmpnei	r2,r2,4
    2258:	1000161e 	bne	r2,zero,22b4 <teken_menu+0x1bc>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    225c:	d0a00417 	ldw	r2,-32752(gp)
    2260:	1085883a 	add	r2,r2,r2
    2264:	1085883a 	add	r2,r2,r2
    2268:	1009883a 	mov	r4,r2
    226c:	d0a00617 	ldw	r2,-32744(gp)
    2270:	10800304 	addi	r2,r2,12
    2274:	1085883a 	add	r2,r2,r2
    2278:	1085883a 	add	r2,r2,r2
    227c:	100b883a 	mov	r5,r2
    2280:	d0a00517 	ldw	r2,-32748(gp)
    2284:	1085883a 	add	r2,r2,r2
    2288:	1085883a 	add	r2,r2,r2
    228c:	100d883a 	mov	r6,r2
    2290:	d0a00717 	ldw	r2,-32740(gp)
    2294:	10800304 	addi	r2,r2,12
    2298:	1085883a 	add	r2,r2,r2
    229c:	1085883a 	add	r2,r2,r2
    22a0:	1007883a 	mov	r3,r2
    22a4:	00be0014 	movui	r2,63488
    22a8:	d8800015 	stw	r2,0(sp)
    22ac:	180f883a 	mov	r7,r3
    22b0:	00024f40 	call	24f4 <VGA_box>
	}

}
    22b4:	e037883a 	mov	sp,fp
    22b8:	dfc00117 	ldw	ra,4(sp)
    22bc:	df000017 	ldw	fp,0(sp)
    22c0:	dec00204 	addi	sp,sp,8
    22c4:	f800283a 	ret

000022c8 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    22c8:	defffb04 	addi	sp,sp,-20
    22cc:	dfc00415 	stw	ra,16(sp)
    22d0:	df000315 	stw	fp,12(sp)
    22d4:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    22d8:	00139ac0 	call	139ac <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    22dc:	00800174 	movhi	r2,5
    22e0:	10814004 	addi	r2,r2,1280
    22e4:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    22e8:	d0a00c17 	ldw	r2,-32720(gp)
    22ec:	10800204 	addi	r2,r2,8
    22f0:	e0fffe17 	ldw	r3,-8(fp)
    22f4:	18ffffcc 	andi	r3,r3,65535
    22f8:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    22fc:	d0a00c17 	ldw	r2,-32720(gp)
    2300:	10800304 	addi	r2,r2,12
    2304:	e0fffe17 	ldw	r3,-8(fp)
    2308:	1806d43a 	srli	r3,r3,16
    230c:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    2310:	d0a00c17 	ldw	r2,-32720(gp)
    2314:	10800104 	addi	r2,r2,4
    2318:	00c001c4 	movi	r3,7
    231c:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    2320:	e0bfff04 	addi	r2,fp,-4
    2324:	01000304 	movi	r4,12
    2328:	100b883a 	mov	r5,r2
    232c:	00155c40 	call	155c4 <OSFlagCreate>
    2330:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    2334:	e0bfff04 	addi	r2,fp,-4
    2338:	01000884 	movi	r4,34
    233c:	100b883a 	mov	r5,r2
    2340:	00155c40 	call	155c4 <OSFlagCreate>
    2344:	d0a80b15 	stw	r2,-24532(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    2348:	e0bfff04 	addi	r2,fp,-4
    234c:	01001004 	movi	r4,64
    2350:	100b883a 	mov	r5,r2
    2354:	00155c40 	call	155c4 <OSFlagCreate>
    2358:	d0a81015 	stw	r2,-24512(gp)


	gameSem = OSSemCreate(0);
    235c:	0009883a 	mov	r4,zero
    2360:	00190a40 	call	190a4 <OSSemCreate>
    2364:	d0a81915 	stw	r2,-24476(gp)
	controllerSem = OSSemCreate(0);
    2368:	0009883a 	mov	r4,zero
    236c:	00190a40 	call	190a4 <OSSemCreate>
    2370:	d0a80915 	stw	r2,-24540(gp)

	MailBox = OSMboxCreate((void *)0);
    2374:	0009883a 	mov	r4,zero
    2378:	0016b700 	call	16b70 <OSMboxCreate>
    237c:	d0a80e15 	stw	r2,-24520(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2380:	0009883a 	mov	r4,zero
    2384:	0016b700 	call	16b70 <OSMboxCreate>
    2388:	d0a80c15 	stw	r2,-24528(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    238c:	d8000015 	stw	zero,0(sp)
    2390:	0009883a 	mov	r4,zero
    2394:	000b883a 	mov	r5,zero
    2398:	01804fc4 	movi	r6,319
    239c:	01c03bc4 	movi	r7,239
    23a0:	00024f40 	call	24f4 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    23a4:	00803fc4 	movi	r2,255
    23a8:	d8800015 	stw	r2,0(sp)
    23ac:	010003c4 	movi	r4,15
    23b0:	01400c84 	movi	r5,50
    23b4:	01800504 	movi	r6,20
    23b8:	01c01904 	movi	r7,100
    23bc:	00024f40 	call	24f4 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    23c0:	00803fc4 	movi	r2,255
    23c4:	d8800015 	stw	r2,0(sp)
    23c8:	01004b04 	movi	r4,300
    23cc:	01400c84 	movi	r5,50
    23d0:	01804c44 	movi	r6,305
    23d4:	01c01904 	movi	r7,100
    23d8:	00024f40 	call	24f4 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    23dc:	0081a5c4 	movi	r2,1687
    23e0:	d8800015 	stw	r2,0(sp)
    23e4:	0009883a 	mov	r4,zero
    23e8:	000b883a 	mov	r5,zero
    23ec:	01804fc4 	movi	r6,319
    23f0:	01c000c4 	movi	r7,3
    23f4:	00024f40 	call	24f4 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    23f8:	0081a5c4 	movi	r2,1687
    23fc:	d8800015 	stw	r2,0(sp)
    2400:	0009883a 	mov	r4,zero
    2404:	01403b04 	movi	r5,236
    2408:	01804fc4 	movi	r6,319
    240c:	01c03bc4 	movi	r7,239
    2410:	00024f40 	call	24f4 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    2414:	01000034 	movhi	r4,0
    2418:	2100a004 	addi	r4,r4,640
    241c:	01400044 	movi	r5,1
    2420:	018000f4 	movhi	r6,3
    2424:	318f2504 	addi	r6,r6,15508
    2428:	01c002c4 	movi	r7,11
    242c:	001a03c0 	call	1a03c <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    2430:	01000034 	movhi	r4,0
    2434:	2100a004 	addi	r4,r4,640
    2438:	01400084 	movi	r5,2
    243c:	018000f4 	movhi	r6,3
    2440:	319f2704 	addi	r6,r6,31900
    2444:	01c00304 	movi	r7,12
    2448:	001a03c0 	call	1a03c <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    244c:	01000034 	movhi	r4,0
    2450:	2101e304 	addi	r4,r4,1932
    2454:	000b883a 	mov	r5,zero
    2458:	01800134 	movhi	r6,4
    245c:	31a72804 	addi	r6,r6,-25440
    2460:	01c00184 	movi	r7,6
    2464:	001a03c0 	call	1a03c <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2468:	01000034 	movhi	r4,0
    246c:	21044c04 	addi	r4,r4,4400
    2470:	000b883a 	mov	r5,zero
    2474:	018000b4 	movhi	r6,2
    2478:	31981304 	addi	r6,r6,24652
    247c:	01c001c4 	movi	r7,7
    2480:	001a03c0 	call	1a03c <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    2484:	01000034 	movhi	r4,0
    2488:	2105d904 	addi	r4,r4,5988
    248c:	000b883a 	mov	r5,zero
    2490:	018000f4 	movhi	r6,3
    2494:	31972604 	addi	r6,r6,23704
    2498:	01c00204 	movi	r7,8
    249c:	001a03c0 	call	1a03c <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    24a0:	01000034 	movhi	r4,0
    24a4:	21068704 	addi	r4,r4,6684
    24a8:	01400084 	movi	r5,2
    24ac:	018000f4 	movhi	r6,3
    24b0:	31872404 	addi	r6,r6,7312
    24b4:	01c00244 	movi	r7,9
    24b8:	001a03c0 	call	1a03c <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    24bc:	01000034 	movhi	r4,0
    24c0:	2106c204 	addi	r4,r4,6920
    24c4:	014000c4 	movi	r5,3
    24c8:	01800134 	movhi	r6,4
    24cc:	31982d04 	addi	r6,r6,24756
    24d0:	01c00284 	movi	r7,10
    24d4:	001a03c0 	call	1a03c <OSTaskCreate>
	OSStart();
    24d8:	0013cd00 	call	13cd0 <OSStart>
	return 0;
    24dc:	0005883a 	mov	r2,zero
}
    24e0:	e037883a 	mov	sp,fp
    24e4:	dfc00117 	ldw	ra,4(sp)
    24e8:	df000017 	ldw	fp,0(sp)
    24ec:	dec00204 	addi	sp,sp,8
    24f0:	f800283a 	ret

000024f4 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    24f4:	defff604 	addi	sp,sp,-40
    24f8:	df000915 	stw	fp,36(sp)
    24fc:	df000904 	addi	fp,sp,36
    2500:	e13ffb15 	stw	r4,-20(fp)
    2504:	e17ffc15 	stw	r5,-16(fp)
    2508:	e1bffd15 	stw	r6,-12(fp)
    250c:	e1fffe15 	stw	r7,-8(fp)
    2510:	e0800117 	ldw	r2,4(fp)
    2514:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    2518:	00820034 	movhi	r2,2048
    251c:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2520:	e0bffc17 	ldw	r2,-16(fp)
    2524:	e0bff715 	stw	r2,-36(fp)
    2528:	00001806 	br	258c <VGA_box+0x98>
	{
		col = x1;
    252c:	e0bffb17 	ldw	r2,-20(fp)
    2530:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    2534:	00000f06 	br	2574 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    2538:	e0bff717 	ldw	r2,-36(fp)
    253c:	1006927a 	slli	r3,r2,9
    2540:	e0bff817 	ldw	r2,-32(fp)
    2544:	1885883a 	add	r2,r3,r2
    2548:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    254c:	e0bffa17 	ldw	r2,-24(fp)
    2550:	1085883a 	add	r2,r2,r2
    2554:	1007883a 	mov	r3,r2
    2558:	e0bff917 	ldw	r2,-28(fp)
    255c:	10c5883a 	add	r2,r2,r3
    2560:	e0ffff0b 	ldhu	r3,-4(fp)
    2564:	10c0000d 	sth	r3,0(r2)
			++col;
    2568:	e0bff817 	ldw	r2,-32(fp)
    256c:	10800044 	addi	r2,r2,1
    2570:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    2574:	e0bff817 	ldw	r2,-32(fp)
    2578:	e0fffd17 	ldw	r3,-12(fp)
    257c:	18bfee0e 	bge	r3,r2,2538 <__alt_mem_Flash_flash_data+0xf4002538>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2580:	e0bff717 	ldw	r2,-36(fp)
    2584:	10800044 	addi	r2,r2,1
    2588:	e0bff715 	stw	r2,-36(fp)
    258c:	e0bff717 	ldw	r2,-36(fp)
    2590:	e0fffe17 	ldw	r3,-8(fp)
    2594:	18bfe50e 	bge	r3,r2,252c <__alt_mem_Flash_flash_data+0xf400252c>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2598:	e037883a 	mov	sp,fp
    259c:	df000017 	ldw	fp,0(sp)
    25a0:	dec00104 	addi	sp,sp,4
    25a4:	f800283a 	ret

000025a8 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    25a8:	defffa04 	addi	sp,sp,-24
    25ac:	df000515 	stw	fp,20(sp)
    25b0:	df000504 	addi	fp,sp,20
    25b4:	e13ffd15 	stw	r4,-12(fp)
    25b8:	e17ffe15 	stw	r5,-8(fp)
    25bc:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    25c0:	00824034 	movhi	r2,2304
    25c4:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    25c8:	e0bffe17 	ldw	r2,-8(fp)
    25cc:	100691fa 	slli	r3,r2,7
    25d0:	e0bffd17 	ldw	r2,-12(fp)
    25d4:	1885883a 	add	r2,r3,r2
    25d8:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    25dc:	00000c06 	br	2610 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    25e0:	e0bffb17 	ldw	r2,-20(fp)
    25e4:	e0fffc17 	ldw	r3,-16(fp)
    25e8:	1885883a 	add	r2,r3,r2
    25ec:	e0ffff17 	ldw	r3,-4(fp)
    25f0:	18c00003 	ldbu	r3,0(r3)
    25f4:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    25f8:	e0bfff17 	ldw	r2,-4(fp)
    25fc:	10800044 	addi	r2,r2,1
    2600:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    2604:	e0bffb17 	ldw	r2,-20(fp)
    2608:	10800044 	addi	r2,r2,1
    260c:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2610:	e0bfff17 	ldw	r2,-4(fp)
    2614:	10800003 	ldbu	r2,0(r2)
    2618:	10803fcc 	andi	r2,r2,255
    261c:	1080201c 	xori	r2,r2,128
    2620:	10bfe004 	addi	r2,r2,-128
    2624:	103fee1e 	bne	r2,zero,25e0 <__alt_mem_Flash_flash_data+0xf40025e0>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    2628:	e037883a 	mov	sp,fp
    262c:	df000017 	ldw	fp,0(sp)
    2630:	dec00104 	addi	sp,sp,4
    2634:	f800283a 	ret

00002638 <draw_middenlijn>:

void draw_middenlijn(){
    2638:	defffc04 	addi	sp,sp,-16
    263c:	dfc00315 	stw	ra,12(sp)
    2640:	df000215 	stw	fp,8(sp)
    2644:	df000204 	addi	fp,sp,8
	int i = 0;
    2648:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    264c:	00000c06 	br	2680 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    2650:	e0bfff17 	ldw	r2,-4(fp)
    2654:	10c001c4 	addi	r3,r2,7
    2658:	0081a5c4 	movi	r2,1687
    265c:	d8800015 	stw	r2,0(sp)
    2660:	010027c4 	movi	r4,159
    2664:	e17fff17 	ldw	r5,-4(fp)
    2668:	01802804 	movi	r6,160
    266c:	180f883a 	mov	r7,r3
    2670:	00024f40 	call	24f4 <VGA_box>
		i = i + 11;
    2674:	e0bfff17 	ldw	r2,-4(fp)
    2678:	108002c4 	addi	r2,r2,11
    267c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    2680:	e0bfff17 	ldw	r2,-4(fp)
    2684:	10803c10 	cmplti	r2,r2,240
    2688:	103ff11e 	bne	r2,zero,2650 <__alt_mem_Flash_flash_data+0xf4002650>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    268c:	e037883a 	mov	sp,fp
    2690:	dfc00117 	ldw	ra,4(sp)
    2694:	df000017 	ldw	fp,0(sp)
    2698:	dec00204 	addi	sp,sp,8
    269c:	f800283a 	ret

000026a0 <del_middenlijn>:

void del_middenlijn(){
    26a0:	defffd04 	addi	sp,sp,-12
    26a4:	dfc00215 	stw	ra,8(sp)
    26a8:	df000115 	stw	fp,4(sp)
    26ac:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    26b0:	d8000015 	stw	zero,0(sp)
    26b4:	010027c4 	movi	r4,159
    26b8:	01400104 	movi	r5,4
    26bc:	01802804 	movi	r6,160
    26c0:	01c03ac4 	movi	r7,235
    26c4:	00024f40 	call	24f4 <VGA_box>
}
    26c8:	e037883a 	mov	sp,fp
    26cc:	dfc00117 	ldw	ra,4(sp)
    26d0:	df000017 	ldw	fp,0(sp)
    26d4:	dec00204 	addi	sp,sp,8
    26d8:	f800283a 	ret

000026dc <del_number>:

void del_number(int side){
    26dc:	defffc04 	addi	sp,sp,-16
    26e0:	dfc00315 	stw	ra,12(sp)
    26e4:	df000215 	stw	fp,8(sp)
    26e8:	df000204 	addi	fp,sp,8
    26ec:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    26f0:	e0bfff17 	ldw	r2,-4(fp)
    26f4:	10800058 	cmpnei	r2,r2,1
    26f8:	1000061e 	bne	r2,zero,2714 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    26fc:	d8000015 	stw	zero,0(sp)
    2700:	01001e04 	movi	r4,120
    2704:	01400504 	movi	r5,20
    2708:	01802304 	movi	r6,140
    270c:	01c00f04 	movi	r7,60
    2710:	00024f40 	call	24f4 <VGA_box>
	}
	if(side == 2){
    2714:	e0bfff17 	ldw	r2,-4(fp)
    2718:	10800098 	cmpnei	r2,r2,2
    271c:	1000061e 	bne	r2,zero,2738 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    2720:	d8000015 	stw	zero,0(sp)
    2724:	01002d04 	movi	r4,180
    2728:	01400504 	movi	r5,20
    272c:	01803204 	movi	r6,200
    2730:	01c00f04 	movi	r7,60
    2734:	00024f40 	call	24f4 <VGA_box>
	}
}
    2738:	e037883a 	mov	sp,fp
    273c:	dfc00117 	ldw	ra,4(sp)
    2740:	df000017 	ldw	fp,0(sp)
    2744:	dec00204 	addi	sp,sp,8
    2748:	f800283a 	ret

0000274c <deleteNummer>:

void deleteNummer(){
    274c:	defffd04 	addi	sp,sp,-12
    2750:	dfc00215 	stw	ra,8(sp)
    2754:	df000115 	stw	fp,4(sp)
    2758:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    275c:	d8000015 	stw	zero,0(sp)
    2760:	01001e04 	movi	r4,120
    2764:	01400504 	movi	r5,20
    2768:	01803204 	movi	r6,200
    276c:	01c00f04 	movi	r7,60
    2770:	00024f40 	call	24f4 <VGA_box>
}
    2774:	e037883a 	mov	sp,fp
    2778:	dfc00117 	ldw	ra,4(sp)
    277c:	df000017 	ldw	fp,0(sp)
    2780:	dec00204 	addi	sp,sp,8
    2784:	f800283a 	ret

00002788 <draw_number>:

void draw_number(int nummer, int ID){
    2788:	defffa04 	addi	sp,sp,-24
    278c:	dfc00515 	stw	ra,20(sp)
    2790:	df000415 	stw	fp,16(sp)
    2794:	df000404 	addi	fp,sp,16
    2798:	e13ffe15 	stw	r4,-8(fp)
    279c:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    27a0:	e13fff17 	ldw	r4,-4(fp)
    27a4:	0002dfc0 	call	2dfc <checkIDScore>
    27a8:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    27ac:	e0bffe17 	ldw	r2,-8(fp)
    27b0:	10800058 	cmpnei	r2,r2,1
    27b4:	10000b1e 	bne	r2,zero,27e4 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    27b8:	e0bffd17 	ldw	r2,-12(fp)
    27bc:	11000244 	addi	r4,r2,9
    27c0:	e0bffd17 	ldw	r2,-12(fp)
    27c4:	10c00304 	addi	r3,r2,12
    27c8:	00bfffc4 	movi	r2,-1
    27cc:	d8800015 	stw	r2,0(sp)
    27d0:	01400504 	movi	r5,20
    27d4:	180d883a 	mov	r6,r3
    27d8:	01c00f04 	movi	r7,60
    27dc:	00024f40 	call	24f4 <VGA_box>
    27e0:	00018106 	br	2de8 <draw_number+0x660>
	}else if(nummer == 2){
    27e4:	e0bffe17 	ldw	r2,-8(fp)
    27e8:	10800098 	cmpnei	r2,r2,2
    27ec:	10002f1e 	bne	r2,zero,28ac <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    27f0:	e0bffd17 	ldw	r2,-12(fp)
    27f4:	10c00504 	addi	r3,r2,20
    27f8:	00bfffc4 	movi	r2,-1
    27fc:	d8800015 	stw	r2,0(sp)
    2800:	e13ffd17 	ldw	r4,-12(fp)
    2804:	01400504 	movi	r5,20
    2808:	180d883a 	mov	r6,r3
    280c:	01c00584 	movi	r7,22
    2810:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    2814:	e0bffd17 	ldw	r2,-12(fp)
    2818:	11000484 	addi	r4,r2,18
    281c:	e0bffd17 	ldw	r2,-12(fp)
    2820:	10c00504 	addi	r3,r2,20
    2824:	00bfffc4 	movi	r2,-1
    2828:	d8800015 	stw	r2,0(sp)
    282c:	01400584 	movi	r5,22
    2830:	180d883a 	mov	r6,r3
    2834:	01c00984 	movi	r7,38
    2838:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    283c:	e0bffd17 	ldw	r2,-12(fp)
    2840:	10c00504 	addi	r3,r2,20
    2844:	00bfffc4 	movi	r2,-1
    2848:	d8800015 	stw	r2,0(sp)
    284c:	e13ffd17 	ldw	r4,-12(fp)
    2850:	01400984 	movi	r5,38
    2854:	180d883a 	mov	r6,r3
    2858:	01c00a04 	movi	r7,40
    285c:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10c00084 	addi	r3,r2,2
    2868:	00bfffc4 	movi	r2,-1
    286c:	d8800015 	stw	r2,0(sp)
    2870:	e13ffd17 	ldw	r4,-12(fp)
    2874:	01400a04 	movi	r5,40
    2878:	180d883a 	mov	r6,r3
    287c:	01c00e84 	movi	r7,58
    2880:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2884:	e0bffd17 	ldw	r2,-12(fp)
    2888:	10c00504 	addi	r3,r2,20
    288c:	00bfffc4 	movi	r2,-1
    2890:	d8800015 	stw	r2,0(sp)
    2894:	e13ffd17 	ldw	r4,-12(fp)
    2898:	01400e84 	movi	r5,58
    289c:	180d883a 	mov	r6,r3
    28a0:	01c00f04 	movi	r7,60
    28a4:	00024f40 	call	24f4 <VGA_box>
    28a8:	00014f06 	br	2de8 <draw_number+0x660>
	}else if(nummer == 3){
    28ac:	e0bffe17 	ldw	r2,-8(fp)
    28b0:	108000d8 	cmpnei	r2,r2,3
    28b4:	1000261e 	bne	r2,zero,2950 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    28b8:	e0bffd17 	ldw	r2,-12(fp)
    28bc:	10c00504 	addi	r3,r2,20
    28c0:	00bfffc4 	movi	r2,-1
    28c4:	d8800015 	stw	r2,0(sp)
    28c8:	e13ffd17 	ldw	r4,-12(fp)
    28cc:	01400504 	movi	r5,20
    28d0:	180d883a 	mov	r6,r3
    28d4:	01c00584 	movi	r7,22
    28d8:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    28dc:	e0bffd17 	ldw	r2,-12(fp)
    28e0:	11000484 	addi	r4,r2,18
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	10c00504 	addi	r3,r2,20
    28ec:	00bfffc4 	movi	r2,-1
    28f0:	d8800015 	stw	r2,0(sp)
    28f4:	01400584 	movi	r5,22
    28f8:	180d883a 	mov	r6,r3
    28fc:	01c00f04 	movi	r7,60
    2900:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    2904:	e0bffd17 	ldw	r2,-12(fp)
    2908:	10c00504 	addi	r3,r2,20
    290c:	00bfffc4 	movi	r2,-1
    2910:	d8800015 	stw	r2,0(sp)
    2914:	e13ffd17 	ldw	r4,-12(fp)
    2918:	014009c4 	movi	r5,39
    291c:	180d883a 	mov	r6,r3
    2920:	01c00a44 	movi	r7,41
    2924:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2928:	e0bffd17 	ldw	r2,-12(fp)
    292c:	10c00504 	addi	r3,r2,20
    2930:	00bfffc4 	movi	r2,-1
    2934:	d8800015 	stw	r2,0(sp)
    2938:	e13ffd17 	ldw	r4,-12(fp)
    293c:	01400e84 	movi	r5,58
    2940:	180d883a 	mov	r6,r3
    2944:	01c00f04 	movi	r7,60
    2948:	00024f40 	call	24f4 <VGA_box>
    294c:	00012606 	br	2de8 <draw_number+0x660>
	}else if(nummer == 4){
    2950:	e0bffe17 	ldw	r2,-8(fp)
    2954:	10800118 	cmpnei	r2,r2,4
    2958:	10001d1e 	bne	r2,zero,29d0 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    295c:	e0bffd17 	ldw	r2,-12(fp)
    2960:	10c00084 	addi	r3,r2,2
    2964:	00bfffc4 	movi	r2,-1
    2968:	d8800015 	stw	r2,0(sp)
    296c:	e13ffd17 	ldw	r4,-12(fp)
    2970:	01400504 	movi	r5,20
    2974:	180d883a 	mov	r6,r3
    2978:	01c00a04 	movi	r7,40
    297c:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	10c00504 	addi	r3,r2,20
    2988:	00bfffc4 	movi	r2,-1
    298c:	d8800015 	stw	r2,0(sp)
    2990:	e13ffd17 	ldw	r4,-12(fp)
    2994:	014009c4 	movi	r5,39
    2998:	180d883a 	mov	r6,r3
    299c:	01c00a44 	movi	r7,41
    29a0:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    29a4:	e0bffd17 	ldw	r2,-12(fp)
    29a8:	11000484 	addi	r4,r2,18
    29ac:	e0bffd17 	ldw	r2,-12(fp)
    29b0:	10c00504 	addi	r3,r2,20
    29b4:	00bfffc4 	movi	r2,-1
    29b8:	d8800015 	stw	r2,0(sp)
    29bc:	01400504 	movi	r5,20
    29c0:	180d883a 	mov	r6,r3
    29c4:	01c00f04 	movi	r7,60
    29c8:	00024f40 	call	24f4 <VGA_box>
    29cc:	00010606 	br	2de8 <draw_number+0x660>
	}else if(nummer == 5){
    29d0:	e0bffe17 	ldw	r2,-8(fp)
    29d4:	10800158 	cmpnei	r2,r2,5
    29d8:	10002f1e 	bne	r2,zero,2a98 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    29dc:	e0bffd17 	ldw	r2,-12(fp)
    29e0:	10c00504 	addi	r3,r2,20
    29e4:	00bfffc4 	movi	r2,-1
    29e8:	d8800015 	stw	r2,0(sp)
    29ec:	e13ffd17 	ldw	r4,-12(fp)
    29f0:	01400504 	movi	r5,20
    29f4:	180d883a 	mov	r6,r3
    29f8:	01c00584 	movi	r7,22
    29fc:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    2a00:	e0bffd17 	ldw	r2,-12(fp)
    2a04:	10c00084 	addi	r3,r2,2
    2a08:	00bfffc4 	movi	r2,-1
    2a0c:	d8800015 	stw	r2,0(sp)
    2a10:	e13ffd17 	ldw	r4,-12(fp)
    2a14:	01400584 	movi	r5,22
    2a18:	180d883a 	mov	r6,r3
    2a1c:	01c00984 	movi	r7,38
    2a20:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2a24:	e0bffd17 	ldw	r2,-12(fp)
    2a28:	10c00504 	addi	r3,r2,20
    2a2c:	00bfffc4 	movi	r2,-1
    2a30:	d8800015 	stw	r2,0(sp)
    2a34:	e13ffd17 	ldw	r4,-12(fp)
    2a38:	01400984 	movi	r5,38
    2a3c:	180d883a 	mov	r6,r3
    2a40:	01c00a04 	movi	r7,40
    2a44:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    2a48:	e0bffd17 	ldw	r2,-12(fp)
    2a4c:	11000484 	addi	r4,r2,18
    2a50:	e0bffd17 	ldw	r2,-12(fp)
    2a54:	10c00504 	addi	r3,r2,20
    2a58:	00bfffc4 	movi	r2,-1
    2a5c:	d8800015 	stw	r2,0(sp)
    2a60:	01400a04 	movi	r5,40
    2a64:	180d883a 	mov	r6,r3
    2a68:	01c00e84 	movi	r7,58
    2a6c:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2a70:	e0bffd17 	ldw	r2,-12(fp)
    2a74:	10c00504 	addi	r3,r2,20
    2a78:	00bfffc4 	movi	r2,-1
    2a7c:	d8800015 	stw	r2,0(sp)
    2a80:	e13ffd17 	ldw	r4,-12(fp)
    2a84:	01400e84 	movi	r5,58
    2a88:	180d883a 	mov	r6,r3
    2a8c:	01c00f04 	movi	r7,60
    2a90:	00024f40 	call	24f4 <VGA_box>
    2a94:	0000d406 	br	2de8 <draw_number+0x660>
	}else if(nummer == 6){
    2a98:	e0bffe17 	ldw	r2,-8(fp)
    2a9c:	10800198 	cmpnei	r2,r2,6
    2aa0:	10002f1e 	bne	r2,zero,2b60 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2aa4:	e0bffd17 	ldw	r2,-12(fp)
    2aa8:	10c00084 	addi	r3,r2,2
    2aac:	00bfffc4 	movi	r2,-1
    2ab0:	d8800015 	stw	r2,0(sp)
    2ab4:	e13ffd17 	ldw	r4,-12(fp)
    2ab8:	01400504 	movi	r5,20
    2abc:	180d883a 	mov	r6,r3
    2ac0:	01c00f04 	movi	r7,60
    2ac4:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2ac8:	e0bffd17 	ldw	r2,-12(fp)
    2acc:	10c00504 	addi	r3,r2,20
    2ad0:	00bfffc4 	movi	r2,-1
    2ad4:	d8800015 	stw	r2,0(sp)
    2ad8:	e13ffd17 	ldw	r4,-12(fp)
    2adc:	01400504 	movi	r5,20
    2ae0:	180d883a 	mov	r6,r3
    2ae4:	01c00584 	movi	r7,22
    2ae8:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2aec:	e0bffd17 	ldw	r2,-12(fp)
    2af0:	10c00504 	addi	r3,r2,20
    2af4:	00bfffc4 	movi	r2,-1
    2af8:	d8800015 	stw	r2,0(sp)
    2afc:	e13ffd17 	ldw	r4,-12(fp)
    2b00:	01400e84 	movi	r5,58
    2b04:	180d883a 	mov	r6,r3
    2b08:	01c00f04 	movi	r7,60
    2b0c:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    2b10:	e0bffd17 	ldw	r2,-12(fp)
    2b14:	11000484 	addi	r4,r2,18
    2b18:	e0bffd17 	ldw	r2,-12(fp)
    2b1c:	10c00504 	addi	r3,r2,20
    2b20:	00bfffc4 	movi	r2,-1
    2b24:	d8800015 	stw	r2,0(sp)
    2b28:	01400a04 	movi	r5,40
    2b2c:	180d883a 	mov	r6,r3
    2b30:	01c00e84 	movi	r7,58
    2b34:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2b38:	e0bffd17 	ldw	r2,-12(fp)
    2b3c:	10c00504 	addi	r3,r2,20
    2b40:	00bfffc4 	movi	r2,-1
    2b44:	d8800015 	stw	r2,0(sp)
    2b48:	e13ffd17 	ldw	r4,-12(fp)
    2b4c:	014009c4 	movi	r5,39
    2b50:	180d883a 	mov	r6,r3
    2b54:	01c00a44 	movi	r7,41
    2b58:	00024f40 	call	24f4 <VGA_box>
    2b5c:	0000a206 	br	2de8 <draw_number+0x660>
	}else if(nummer == 7){
    2b60:	e0bffe17 	ldw	r2,-8(fp)
    2b64:	108001d8 	cmpnei	r2,r2,7
    2b68:	1000141e 	bne	r2,zero,2bbc <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2b6c:	e0bffd17 	ldw	r2,-12(fp)
    2b70:	11000484 	addi	r4,r2,18
    2b74:	e0bffd17 	ldw	r2,-12(fp)
    2b78:	10c00504 	addi	r3,r2,20
    2b7c:	00bfffc4 	movi	r2,-1
    2b80:	d8800015 	stw	r2,0(sp)
    2b84:	01400504 	movi	r5,20
    2b88:	180d883a 	mov	r6,r3
    2b8c:	01c00f04 	movi	r7,60
    2b90:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2b94:	e0bffd17 	ldw	r2,-12(fp)
    2b98:	10c00504 	addi	r3,r2,20
    2b9c:	00bfffc4 	movi	r2,-1
    2ba0:	d8800015 	stw	r2,0(sp)
    2ba4:	e13ffd17 	ldw	r4,-12(fp)
    2ba8:	01400504 	movi	r5,20
    2bac:	180d883a 	mov	r6,r3
    2bb0:	01c00584 	movi	r7,22
    2bb4:	00024f40 	call	24f4 <VGA_box>
    2bb8:	00008b06 	br	2de8 <draw_number+0x660>
	}else if(nummer == 8){
    2bbc:	e0bffe17 	ldw	r2,-8(fp)
    2bc0:	10800218 	cmpnei	r2,r2,8
    2bc4:	10002f1e 	bne	r2,zero,2c84 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2bc8:	e0bffd17 	ldw	r2,-12(fp)
    2bcc:	11000484 	addi	r4,r2,18
    2bd0:	e0bffd17 	ldw	r2,-12(fp)
    2bd4:	10c00504 	addi	r3,r2,20
    2bd8:	00bfffc4 	movi	r2,-1
    2bdc:	d8800015 	stw	r2,0(sp)
    2be0:	01400504 	movi	r5,20
    2be4:	180d883a 	mov	r6,r3
    2be8:	01c00f04 	movi	r7,60
    2bec:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2bf0:	e0bffd17 	ldw	r2,-12(fp)
    2bf4:	10c00084 	addi	r3,r2,2
    2bf8:	00bfffc4 	movi	r2,-1
    2bfc:	d8800015 	stw	r2,0(sp)
    2c00:	e13ffd17 	ldw	r4,-12(fp)
    2c04:	01400504 	movi	r5,20
    2c08:	180d883a 	mov	r6,r3
    2c0c:	01c00f04 	movi	r7,60
    2c10:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2c14:	e0bffd17 	ldw	r2,-12(fp)
    2c18:	10c00504 	addi	r3,r2,20
    2c1c:	00bfffc4 	movi	r2,-1
    2c20:	d8800015 	stw	r2,0(sp)
    2c24:	e13ffd17 	ldw	r4,-12(fp)
    2c28:	01400504 	movi	r5,20
    2c2c:	180d883a 	mov	r6,r3
    2c30:	01c00584 	movi	r7,22
    2c34:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2c38:	e0bffd17 	ldw	r2,-12(fp)
    2c3c:	10c00504 	addi	r3,r2,20
    2c40:	00bfffc4 	movi	r2,-1
    2c44:	d8800015 	stw	r2,0(sp)
    2c48:	e13ffd17 	ldw	r4,-12(fp)
    2c4c:	014009c4 	movi	r5,39
    2c50:	180d883a 	mov	r6,r3
    2c54:	01c00a44 	movi	r7,41
    2c58:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2c5c:	e0bffd17 	ldw	r2,-12(fp)
    2c60:	10c00504 	addi	r3,r2,20
    2c64:	00bfffc4 	movi	r2,-1
    2c68:	d8800015 	stw	r2,0(sp)
    2c6c:	e13ffd17 	ldw	r4,-12(fp)
    2c70:	01400e84 	movi	r5,58
    2c74:	180d883a 	mov	r6,r3
    2c78:	01c00f04 	movi	r7,60
    2c7c:	00024f40 	call	24f4 <VGA_box>
    2c80:	00005906 	br	2de8 <draw_number+0x660>
	}else if(nummer == 9){
    2c84:	e0bffe17 	ldw	r2,-8(fp)
    2c88:	10800258 	cmpnei	r2,r2,9
    2c8c:	10002f1e 	bne	r2,zero,2d4c <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2c90:	e0bffd17 	ldw	r2,-12(fp)
    2c94:	11000484 	addi	r4,r2,18
    2c98:	e0bffd17 	ldw	r2,-12(fp)
    2c9c:	10c00504 	addi	r3,r2,20
    2ca0:	00bfffc4 	movi	r2,-1
    2ca4:	d8800015 	stw	r2,0(sp)
    2ca8:	01400504 	movi	r5,20
    2cac:	180d883a 	mov	r6,r3
    2cb0:	01c00f04 	movi	r7,60
    2cb4:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2cb8:	e0bffd17 	ldw	r2,-12(fp)
    2cbc:	10c00084 	addi	r3,r2,2
    2cc0:	00bfffc4 	movi	r2,-1
    2cc4:	d8800015 	stw	r2,0(sp)
    2cc8:	e13ffd17 	ldw	r4,-12(fp)
    2ccc:	01400504 	movi	r5,20
    2cd0:	180d883a 	mov	r6,r3
    2cd4:	01c00a04 	movi	r7,40
    2cd8:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2cdc:	e0bffd17 	ldw	r2,-12(fp)
    2ce0:	10c00504 	addi	r3,r2,20
    2ce4:	00bfffc4 	movi	r2,-1
    2ce8:	d8800015 	stw	r2,0(sp)
    2cec:	e13ffd17 	ldw	r4,-12(fp)
    2cf0:	01400504 	movi	r5,20
    2cf4:	180d883a 	mov	r6,r3
    2cf8:	01c00584 	movi	r7,22
    2cfc:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2d00:	e0bffd17 	ldw	r2,-12(fp)
    2d04:	10c00504 	addi	r3,r2,20
    2d08:	00bfffc4 	movi	r2,-1
    2d0c:	d8800015 	stw	r2,0(sp)
    2d10:	e13ffd17 	ldw	r4,-12(fp)
    2d14:	014009c4 	movi	r5,39
    2d18:	180d883a 	mov	r6,r3
    2d1c:	01c00a44 	movi	r7,41
    2d20:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2d24:	e0bffd17 	ldw	r2,-12(fp)
    2d28:	10c00504 	addi	r3,r2,20
    2d2c:	00bfffc4 	movi	r2,-1
    2d30:	d8800015 	stw	r2,0(sp)
    2d34:	e13ffd17 	ldw	r4,-12(fp)
    2d38:	01400e84 	movi	r5,58
    2d3c:	180d883a 	mov	r6,r3
    2d40:	01c00f04 	movi	r7,60
    2d44:	00024f40 	call	24f4 <VGA_box>
    2d48:	00002706 	br	2de8 <draw_number+0x660>
	}else if(nummer == 0){
    2d4c:	e0bffe17 	ldw	r2,-8(fp)
    2d50:	1000251e 	bne	r2,zero,2de8 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2d54:	e0bffd17 	ldw	r2,-12(fp)
    2d58:	11000484 	addi	r4,r2,18
    2d5c:	e0bffd17 	ldw	r2,-12(fp)
    2d60:	10c00504 	addi	r3,r2,20
    2d64:	00bfffc4 	movi	r2,-1
    2d68:	d8800015 	stw	r2,0(sp)
    2d6c:	01400504 	movi	r5,20
    2d70:	180d883a 	mov	r6,r3
    2d74:	01c00f04 	movi	r7,60
    2d78:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2d7c:	e0bffd17 	ldw	r2,-12(fp)
    2d80:	10c00084 	addi	r3,r2,2
    2d84:	00bfffc4 	movi	r2,-1
    2d88:	d8800015 	stw	r2,0(sp)
    2d8c:	e13ffd17 	ldw	r4,-12(fp)
    2d90:	01400504 	movi	r5,20
    2d94:	180d883a 	mov	r6,r3
    2d98:	01c00f04 	movi	r7,60
    2d9c:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2da0:	e0bffd17 	ldw	r2,-12(fp)
    2da4:	10c00504 	addi	r3,r2,20
    2da8:	00bfffc4 	movi	r2,-1
    2dac:	d8800015 	stw	r2,0(sp)
    2db0:	e13ffd17 	ldw	r4,-12(fp)
    2db4:	01400504 	movi	r5,20
    2db8:	180d883a 	mov	r6,r3
    2dbc:	01c00584 	movi	r7,22
    2dc0:	00024f40 	call	24f4 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2dc4:	e0bffd17 	ldw	r2,-12(fp)
    2dc8:	10c00504 	addi	r3,r2,20
    2dcc:	00bfffc4 	movi	r2,-1
    2dd0:	d8800015 	stw	r2,0(sp)
    2dd4:	e13ffd17 	ldw	r4,-12(fp)
    2dd8:	01400e84 	movi	r5,58
    2ddc:	180d883a 	mov	r6,r3
    2de0:	01c00f04 	movi	r7,60
    2de4:	00024f40 	call	24f4 <VGA_box>
	}
}
    2de8:	e037883a 	mov	sp,fp
    2dec:	dfc00117 	ldw	ra,4(sp)
    2df0:	df000017 	ldw	fp,0(sp)
    2df4:	dec00204 	addi	sp,sp,8
    2df8:	f800283a 	ret

00002dfc <checkIDScore>:

int checkIDScore(int ID){
    2dfc:	defffe04 	addi	sp,sp,-8
    2e00:	df000115 	stw	fp,4(sp)
    2e04:	df000104 	addi	fp,sp,4
    2e08:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    2e0c:	e0bfff17 	ldw	r2,-4(fp)
    2e10:	10800058 	cmpnei	r2,r2,1
    2e14:	1000021e 	bne	r2,zero,2e20 <checkIDScore+0x24>
		return 120;
    2e18:	00801e04 	movi	r2,120
    2e1c:	00000b06 	br	2e4c <checkIDScore+0x50>
	}else if(ID == 2){
    2e20:	e0bfff17 	ldw	r2,-4(fp)
    2e24:	10800098 	cmpnei	r2,r2,2
    2e28:	1000021e 	bne	r2,zero,2e34 <checkIDScore+0x38>
		return 150;
    2e2c:	00802584 	movi	r2,150
    2e30:	00000606 	br	2e4c <checkIDScore+0x50>
	}else if(ID == 3){
    2e34:	e0bfff17 	ldw	r2,-4(fp)
    2e38:	108000d8 	cmpnei	r2,r2,3
    2e3c:	1000021e 	bne	r2,zero,2e48 <checkIDScore+0x4c>
		return 180;
    2e40:	00802d04 	movi	r2,180
    2e44:	00000106 	br	2e4c <checkIDScore+0x50>
	}
	
	return 0;
    2e48:	0005883a 	mov	r2,zero
}
    2e4c:	e037883a 	mov	sp,fp
    2e50:	df000017 	ldw	fp,0(sp)
    2e54:	dec00104 	addi	sp,sp,4
    2e58:	f800283a 	ret

00002e5c <_printf_r>:
    2e5c:	defffd04 	addi	sp,sp,-12
    2e60:	dfc00015 	stw	ra,0(sp)
    2e64:	d9800115 	stw	r6,4(sp)
    2e68:	d9c00215 	stw	r7,8(sp)
    2e6c:	280d883a 	mov	r6,r5
    2e70:	21400217 	ldw	r5,8(r4)
    2e74:	d9c00104 	addi	r7,sp,4
    2e78:	000506c0 	call	506c <___vfprintf_internal_r>
    2e7c:	dfc00017 	ldw	ra,0(sp)
    2e80:	dec00304 	addi	sp,sp,12
    2e84:	f800283a 	ret

00002e88 <printf>:
    2e88:	defffc04 	addi	sp,sp,-16
    2e8c:	dfc00015 	stw	ra,0(sp)
    2e90:	d9400115 	stw	r5,4(sp)
    2e94:	d9800215 	stw	r6,8(sp)
    2e98:	d9c00315 	stw	r7,12(sp)
    2e9c:	008000b4 	movhi	r2,2
    2ea0:	1087cd04 	addi	r2,r2,7988
    2ea4:	10800017 	ldw	r2,0(r2)
    2ea8:	200b883a 	mov	r5,r4
    2eac:	d9800104 	addi	r6,sp,4
    2eb0:	11000217 	ldw	r4,8(r2)
    2eb4:	0006fbc0 	call	6fbc <__vfprintf_internal>
    2eb8:	dfc00017 	ldw	ra,0(sp)
    2ebc:	dec00404 	addi	sp,sp,16
    2ec0:	f800283a 	ret

00002ec4 <_puts_r>:
    2ec4:	defff604 	addi	sp,sp,-40
    2ec8:	dc000715 	stw	r16,28(sp)
    2ecc:	2021883a 	mov	r16,r4
    2ed0:	2809883a 	mov	r4,r5
    2ed4:	dc400815 	stw	r17,32(sp)
    2ed8:	dfc00915 	stw	ra,36(sp)
    2edc:	2823883a 	mov	r17,r5
    2ee0:	00030440 	call	3044 <strlen>
    2ee4:	81400217 	ldw	r5,8(r16)
    2ee8:	11000044 	addi	r4,r2,1
    2eec:	d8800115 	stw	r2,4(sp)
    2ef0:	008000b4 	movhi	r2,2
    2ef4:	2980030b 	ldhu	r6,12(r5)
    2ef8:	10beb204 	addi	r2,r2,-1336
    2efc:	d8800215 	stw	r2,8(sp)
    2f00:	00800044 	movi	r2,1
    2f04:	d8800315 	stw	r2,12(sp)
    2f08:	00800084 	movi	r2,2
    2f0c:	d8800515 	stw	r2,20(sp)
    2f10:	dc400015 	stw	r17,0(sp)
    2f14:	d9000615 	stw	r4,24(sp)
    2f18:	dec00415 	stw	sp,16(sp)
    2f1c:	3088000c 	andi	r2,r6,8192
    2f20:	1000061e 	bne	r2,zero,2f3c <_puts_r+0x78>
    2f24:	29001917 	ldw	r4,100(r5)
    2f28:	00b7ffc4 	movi	r2,-8193
    2f2c:	31880014 	ori	r6,r6,8192
    2f30:	2084703a 	and	r2,r4,r2
    2f34:	2980030d 	sth	r6,12(r5)
    2f38:	28801915 	stw	r2,100(r5)
    2f3c:	8009883a 	mov	r4,r16
    2f40:	d9800404 	addi	r6,sp,16
    2f44:	00095600 	call	9560 <__sfvwrite_r>
    2f48:	1000061e 	bne	r2,zero,2f64 <_puts_r+0xa0>
    2f4c:	00800284 	movi	r2,10
    2f50:	dfc00917 	ldw	ra,36(sp)
    2f54:	dc400817 	ldw	r17,32(sp)
    2f58:	dc000717 	ldw	r16,28(sp)
    2f5c:	dec00a04 	addi	sp,sp,40
    2f60:	f800283a 	ret
    2f64:	00bfffc4 	movi	r2,-1
    2f68:	003ff906 	br	2f50 <__alt_mem_Flash_flash_data+0xf4002f50>

00002f6c <puts>:
    2f6c:	008000b4 	movhi	r2,2
    2f70:	1087cd04 	addi	r2,r2,7988
    2f74:	200b883a 	mov	r5,r4
    2f78:	11000017 	ldw	r4,0(r2)
    2f7c:	0002ec41 	jmpi	2ec4 <_puts_r>

00002f80 <_sprintf_r>:
    2f80:	deffe404 	addi	sp,sp,-112
    2f84:	2807883a 	mov	r3,r5
    2f88:	dfc01a15 	stw	ra,104(sp)
    2f8c:	d9c01b15 	stw	r7,108(sp)
    2f90:	00a00034 	movhi	r2,32768
    2f94:	10bfffc4 	addi	r2,r2,-1
    2f98:	02008204 	movi	r8,520
    2f9c:	d8800215 	stw	r2,8(sp)
    2fa0:	d8800515 	stw	r2,20(sp)
    2fa4:	d80b883a 	mov	r5,sp
    2fa8:	d9c01b04 	addi	r7,sp,108
    2fac:	00bfffc4 	movi	r2,-1
    2fb0:	d8c00015 	stw	r3,0(sp)
    2fb4:	d8c00415 	stw	r3,16(sp)
    2fb8:	da00030d 	sth	r8,12(sp)
    2fbc:	d880038d 	sth	r2,14(sp)
    2fc0:	00030dc0 	call	30dc <___svfprintf_internal_r>
    2fc4:	d8c00017 	ldw	r3,0(sp)
    2fc8:	18000005 	stb	zero,0(r3)
    2fcc:	dfc01a17 	ldw	ra,104(sp)
    2fd0:	dec01c04 	addi	sp,sp,112
    2fd4:	f800283a 	ret

00002fd8 <sprintf>:
    2fd8:	deffe304 	addi	sp,sp,-116
    2fdc:	2007883a 	mov	r3,r4
    2fe0:	dfc01a15 	stw	ra,104(sp)
    2fe4:	d9801b15 	stw	r6,108(sp)
    2fe8:	d9c01c15 	stw	r7,112(sp)
    2fec:	010000b4 	movhi	r4,2
    2ff0:	2107cd04 	addi	r4,r4,7988
    2ff4:	21000017 	ldw	r4,0(r4)
    2ff8:	00a00034 	movhi	r2,32768
    2ffc:	10bfffc4 	addi	r2,r2,-1
    3000:	280d883a 	mov	r6,r5
    3004:	02008204 	movi	r8,520
    3008:	d8800215 	stw	r2,8(sp)
    300c:	d8800515 	stw	r2,20(sp)
    3010:	d80b883a 	mov	r5,sp
    3014:	d9c01b04 	addi	r7,sp,108
    3018:	00bfffc4 	movi	r2,-1
    301c:	d8c00015 	stw	r3,0(sp)
    3020:	d8c00415 	stw	r3,16(sp)
    3024:	da00030d 	sth	r8,12(sp)
    3028:	d880038d 	sth	r2,14(sp)
    302c:	00030dc0 	call	30dc <___svfprintf_internal_r>
    3030:	d8c00017 	ldw	r3,0(sp)
    3034:	18000005 	stb	zero,0(r3)
    3038:	dfc01a17 	ldw	ra,104(sp)
    303c:	dec01d04 	addi	sp,sp,116
    3040:	f800283a 	ret

00003044 <strlen>:
    3044:	208000cc 	andi	r2,r4,3
    3048:	10002026 	beq	r2,zero,30cc <strlen+0x88>
    304c:	20800007 	ldb	r2,0(r4)
    3050:	10002026 	beq	r2,zero,30d4 <strlen+0x90>
    3054:	2005883a 	mov	r2,r4
    3058:	00000206 	br	3064 <strlen+0x20>
    305c:	10c00007 	ldb	r3,0(r2)
    3060:	18001826 	beq	r3,zero,30c4 <strlen+0x80>
    3064:	10800044 	addi	r2,r2,1
    3068:	10c000cc 	andi	r3,r2,3
    306c:	183ffb1e 	bne	r3,zero,305c <__alt_mem_Flash_flash_data+0xf400305c>
    3070:	10c00017 	ldw	r3,0(r2)
    3074:	01ffbff4 	movhi	r7,65279
    3078:	39ffbfc4 	addi	r7,r7,-257
    307c:	00ca303a 	nor	r5,zero,r3
    3080:	01a02074 	movhi	r6,32897
    3084:	19c7883a 	add	r3,r3,r7
    3088:	31a02004 	addi	r6,r6,-32640
    308c:	1946703a 	and	r3,r3,r5
    3090:	1986703a 	and	r3,r3,r6
    3094:	1800091e 	bne	r3,zero,30bc <strlen+0x78>
    3098:	10800104 	addi	r2,r2,4
    309c:	10c00017 	ldw	r3,0(r2)
    30a0:	19cb883a 	add	r5,r3,r7
    30a4:	00c6303a 	nor	r3,zero,r3
    30a8:	28c6703a 	and	r3,r5,r3
    30ac:	1986703a 	and	r3,r3,r6
    30b0:	183ff926 	beq	r3,zero,3098 <__alt_mem_Flash_flash_data+0xf4003098>
    30b4:	00000106 	br	30bc <strlen+0x78>
    30b8:	10800044 	addi	r2,r2,1
    30bc:	10c00007 	ldb	r3,0(r2)
    30c0:	183ffd1e 	bne	r3,zero,30b8 <__alt_mem_Flash_flash_data+0xf40030b8>
    30c4:	1105c83a 	sub	r2,r2,r4
    30c8:	f800283a 	ret
    30cc:	2005883a 	mov	r2,r4
    30d0:	003fe706 	br	3070 <__alt_mem_Flash_flash_data+0xf4003070>
    30d4:	0005883a 	mov	r2,zero
    30d8:	f800283a 	ret

000030dc <___svfprintf_internal_r>:
    30dc:	deffb504 	addi	sp,sp,-300
    30e0:	dfc04a15 	stw	ra,296(sp)
    30e4:	ddc04815 	stw	r23,288(sp)
    30e8:	d9002f15 	stw	r4,188(sp)
    30ec:	282f883a 	mov	r23,r5
    30f0:	d9802915 	stw	r6,164(sp)
    30f4:	d9c02d15 	stw	r7,180(sp)
    30f8:	df004915 	stw	fp,292(sp)
    30fc:	dd804715 	stw	r22,284(sp)
    3100:	dd404615 	stw	r21,280(sp)
    3104:	dd004515 	stw	r20,276(sp)
    3108:	dcc04415 	stw	r19,272(sp)
    310c:	dc804315 	stw	r18,268(sp)
    3110:	dc404215 	stw	r17,264(sp)
    3114:	dc004115 	stw	r16,260(sp)
    3118:	0009c540 	call	9c54 <_localeconv_r>
    311c:	10800017 	ldw	r2,0(r2)
    3120:	1009883a 	mov	r4,r2
    3124:	d8803515 	stw	r2,212(sp)
    3128:	00030440 	call	3044 <strlen>
    312c:	d8803915 	stw	r2,228(sp)
    3130:	b880030b 	ldhu	r2,12(r23)
    3134:	1080200c 	andi	r2,r2,128
    3138:	10000226 	beq	r2,zero,3144 <___svfprintf_internal_r+0x68>
    313c:	b8800417 	ldw	r2,16(r23)
    3140:	10065f26 	beq	r2,zero,4ac0 <___svfprintf_internal_r+0x19e4>
    3144:	db001dc4 	addi	r12,sp,119
    3148:	dd801e04 	addi	r22,sp,120
    314c:	d8800404 	addi	r2,sp,16
    3150:	050000b4 	movhi	r20,2
    3154:	b317c83a 	sub	r11,r22,r12
    3158:	a53ec384 	addi	r20,r20,-1266
    315c:	db002815 	stw	r12,160(sp)
    3160:	d8801e15 	stw	r2,120(sp)
    3164:	d8002015 	stw	zero,128(sp)
    3168:	d8001f15 	stw	zero,124(sp)
    316c:	d8003315 	stw	zero,204(sp)
    3170:	d8003715 	stw	zero,220(sp)
    3174:	d8003815 	stw	zero,224(sp)
    3178:	1011883a 	mov	r8,r2
    317c:	d8003b15 	stw	zero,236(sp)
    3180:	d8003a15 	stw	zero,232(sp)
    3184:	d8003015 	stw	zero,192(sp)
    3188:	dac03d15 	stw	r11,244(sp)
    318c:	db002917 	ldw	r12,164(sp)
    3190:	60800007 	ldb	r2,0(r12)
    3194:	1000ab26 	beq	r2,zero,3444 <___svfprintf_internal_r+0x368>
    3198:	00c00944 	movi	r3,37
    319c:	10c0a926 	beq	r2,r3,3444 <___svfprintf_internal_r+0x368>
    31a0:	6021883a 	mov	r16,r12
    31a4:	00000106 	br	31ac <___svfprintf_internal_r+0xd0>
    31a8:	10c08426 	beq	r2,r3,33bc <___svfprintf_internal_r+0x2e0>
    31ac:	84000044 	addi	r16,r16,1
    31b0:	80800007 	ldb	r2,0(r16)
    31b4:	103ffc1e 	bne	r2,zero,31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    31b8:	dac02917 	ldw	r11,164(sp)
    31bc:	82e3c83a 	sub	r17,r16,r11
    31c0:	88000f26 	beq	r17,zero,3200 <___svfprintf_internal_r+0x124>
    31c4:	d8c02017 	ldw	r3,128(sp)
    31c8:	d8801f17 	ldw	r2,124(sp)
    31cc:	dac02917 	ldw	r11,164(sp)
    31d0:	1c47883a 	add	r3,r3,r17
    31d4:	10800044 	addi	r2,r2,1
    31d8:	d8c02015 	stw	r3,128(sp)
    31dc:	42c00015 	stw	r11,0(r8)
    31e0:	44400115 	stw	r17,4(r8)
    31e4:	d8801f15 	stw	r2,124(sp)
    31e8:	00c001c4 	movi	r3,7
    31ec:	18807616 	blt	r3,r2,33c8 <___svfprintf_internal_r+0x2ec>
    31f0:	42000204 	addi	r8,r8,8
    31f4:	db003017 	ldw	r12,192(sp)
    31f8:	6459883a 	add	r12,r12,r17
    31fc:	db003015 	stw	r12,192(sp)
    3200:	80800007 	ldb	r2,0(r16)
    3204:	10007726 	beq	r2,zero,33e4 <___svfprintf_internal_r+0x308>
    3208:	80800044 	addi	r2,r16,1
    320c:	84000047 	ldb	r16,1(r16)
    3210:	d8002785 	stb	zero,158(sp)
    3214:	000d883a 	mov	r6,zero
    3218:	027fffc4 	movi	r9,-1
    321c:	d8002e15 	stw	zero,184(sp)
    3220:	0023883a 	mov	r17,zero
    3224:	01001604 	movi	r4,88
    3228:	01400244 	movi	r5,9
    322c:	02800a84 	movi	r10,42
    3230:	01c01b04 	movi	r7,108
    3234:	10c00044 	addi	r3,r2,1
    3238:	80bff804 	addi	r2,r16,-32
    323c:	2082e636 	bltu	r4,r2,3dd8 <___svfprintf_internal_r+0xcfc>
    3240:	100490ba 	slli	r2,r2,2
    3244:	02c00034 	movhi	r11,0
    3248:	5acc9604 	addi	r11,r11,12888
    324c:	12c5883a 	add	r2,r2,r11
    3250:	10800017 	ldw	r2,0(r2)
    3254:	1000683a 	jmp	r2
    3258:	00003bb8 	rdprs	zero,zero,238
    325c:	00003dd8 	cmpnei	zero,zero,247
    3260:	00003dd8 	cmpnei	zero,zero,247
    3264:	00003bd8 	cmpnei	zero,zero,239
    3268:	00003dd8 	cmpnei	zero,zero,247
    326c:	00003dd8 	cmpnei	zero,zero,247
    3270:	00003dd8 	cmpnei	zero,zero,247
    3274:	00003dd8 	cmpnei	zero,zero,247
    3278:	00003dd8 	cmpnei	zero,zero,247
    327c:	00003dd8 	cmpnei	zero,zero,247
    3280:	00003be8 	cmpgeui	zero,zero,239
    3284:	00003c14 	movui	zero,240
    3288:	00003dd8 	cmpnei	zero,zero,247
    328c:	0000344c 	andi	zero,zero,209
    3290:	0000345c 	xori	zero,zero,209
    3294:	00003dd8 	cmpnei	zero,zero,247
    3298:	0000349c 	xori	zero,zero,210
    329c:	00003a7c 	xorhi	zero,zero,233
    32a0:	00003a7c 	xorhi	zero,zero,233
    32a4:	00003a7c 	xorhi	zero,zero,233
    32a8:	00003a7c 	xorhi	zero,zero,233
    32ac:	00003a7c 	xorhi	zero,zero,233
    32b0:	00003a7c 	xorhi	zero,zero,233
    32b4:	00003a7c 	xorhi	zero,zero,233
    32b8:	00003a7c 	xorhi	zero,zero,233
    32bc:	00003a7c 	xorhi	zero,zero,233
    32c0:	00003dd8 	cmpnei	zero,zero,247
    32c4:	00003dd8 	cmpnei	zero,zero,247
    32c8:	00003dd8 	cmpnei	zero,zero,247
    32cc:	00003dd8 	cmpnei	zero,zero,247
    32d0:	00003dd8 	cmpnei	zero,zero,247
    32d4:	00003dd8 	cmpnei	zero,zero,247
    32d8:	00003dd8 	cmpnei	zero,zero,247
    32dc:	00003dd8 	cmpnei	zero,zero,247
    32e0:	00003dd8 	cmpnei	zero,zero,247
    32e4:	00003dd8 	cmpnei	zero,zero,247
    32e8:	000034ac 	andhi	zero,zero,210
    32ec:	0000392c 	andhi	zero,zero,228
    32f0:	00003dd8 	cmpnei	zero,zero,247
    32f4:	0000392c 	andhi	zero,zero,228
    32f8:	00003dd8 	cmpnei	zero,zero,247
    32fc:	00003dd8 	cmpnei	zero,zero,247
    3300:	00003dd8 	cmpnei	zero,zero,247
    3304:	00003dd8 	cmpnei	zero,zero,247
    3308:	000039d0 	cmplti	zero,zero,231
    330c:	00003dd8 	cmpnei	zero,zero,247
    3310:	00003dd8 	cmpnei	zero,zero,247
    3314:	00003d6c 	andhi	zero,zero,245
    3318:	00003dd8 	cmpnei	zero,zero,247
    331c:	00003dd8 	cmpnei	zero,zero,247
    3320:	00003dd8 	cmpnei	zero,zero,247
    3324:	00003dd8 	cmpnei	zero,zero,247
    3328:	00003dd8 	cmpnei	zero,zero,247
    332c:	000039e0 	cmpeqi	zero,zero,231
    3330:	00003dd8 	cmpnei	zero,zero,247
    3334:	00003dd8 	cmpnei	zero,zero,247
    3338:	00003a20 	cmpeqi	zero,zero,232
    333c:	00003dd8 	cmpnei	zero,zero,247
    3340:	00003dd8 	cmpnei	zero,zero,247
    3344:	00003dd8 	cmpnei	zero,zero,247
    3348:	00003dd8 	cmpnei	zero,zero,247
    334c:	00003dd8 	cmpnei	zero,zero,247
    3350:	00003dd8 	cmpnei	zero,zero,247
    3354:	00003dd8 	cmpnei	zero,zero,247
    3358:	00003dd8 	cmpnei	zero,zero,247
    335c:	00003dd8 	cmpnei	zero,zero,247
    3360:	00003dd8 	cmpnei	zero,zero,247
    3364:	00003cc4 	movi	zero,243
    3368:	00003d04 	movi	zero,244
    336c:	0000392c 	andhi	zero,zero,228
    3370:	0000392c 	andhi	zero,zero,228
    3374:	0000392c 	andhi	zero,zero,228
    3378:	00003c24 	muli	zero,zero,240
    337c:	00003d04 	movi	zero,244
    3380:	00003dd8 	cmpnei	zero,zero,247
    3384:	00003dd8 	cmpnei	zero,zero,247
    3388:	00003c34 	movhi	zero,240
    338c:	00003dd8 	cmpnei	zero,zero,247
    3390:	00003c48 	cmpgei	zero,zero,241
    3394:	00003d9c 	xori	zero,zero,246
    3398:	00003c7c 	xorhi	zero,zero,241
    339c:	00003ab0 	cmpltui	zero,zero,234
    33a0:	00003dd8 	cmpnei	zero,zero,247
    33a4:	00003ac0 	call	3ac <controller+0x10>
    33a8:	00003dd8 	cmpnei	zero,zero,247
    33ac:	00003b38 	rdprs	zero,zero,236
    33b0:	00003dd8 	cmpnei	zero,zero,247
    33b4:	00003dd8 	cmpnei	zero,zero,247
    33b8:	00003b78 	rdprs	zero,zero,237
    33bc:	db002917 	ldw	r12,164(sp)
    33c0:	8323c83a 	sub	r17,r16,r12
    33c4:	003f7e06 	br	31c0 <__alt_mem_Flash_flash_data+0xf40031c0>
    33c8:	d9002f17 	ldw	r4,188(sp)
    33cc:	b80b883a 	mov	r5,r23
    33d0:	b00d883a 	mov	r6,r22
    33d4:	000c2380 	call	c238 <__ssprint_r>
    33d8:	1000081e 	bne	r2,zero,33fc <___svfprintf_internal_r+0x320>
    33dc:	da000404 	addi	r8,sp,16
    33e0:	003f8406 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    33e4:	d8802017 	ldw	r2,128(sp)
    33e8:	10000426 	beq	r2,zero,33fc <___svfprintf_internal_r+0x320>
    33ec:	d9002f17 	ldw	r4,188(sp)
    33f0:	b80b883a 	mov	r5,r23
    33f4:	d9801e04 	addi	r6,sp,120
    33f8:	000c2380 	call	c238 <__ssprint_r>
    33fc:	b880030b 	ldhu	r2,12(r23)
    3400:	1080100c 	andi	r2,r2,64
    3404:	10000d1e 	bne	r2,zero,343c <___svfprintf_internal_r+0x360>
    3408:	d8803017 	ldw	r2,192(sp)
    340c:	dfc04a17 	ldw	ra,296(sp)
    3410:	df004917 	ldw	fp,292(sp)
    3414:	ddc04817 	ldw	r23,288(sp)
    3418:	dd804717 	ldw	r22,284(sp)
    341c:	dd404617 	ldw	r21,280(sp)
    3420:	dd004517 	ldw	r20,276(sp)
    3424:	dcc04417 	ldw	r19,272(sp)
    3428:	dc804317 	ldw	r18,268(sp)
    342c:	dc404217 	ldw	r17,264(sp)
    3430:	dc004117 	ldw	r16,260(sp)
    3434:	dec04b04 	addi	sp,sp,300
    3438:	f800283a 	ret
    343c:	00bfffc4 	movi	r2,-1
    3440:	003ff206 	br	340c <__alt_mem_Flash_flash_data+0xf400340c>
    3444:	dc002917 	ldw	r16,164(sp)
    3448:	003f6d06 	br	3200 <__alt_mem_Flash_flash_data+0xf4003200>
    344c:	1805883a 	mov	r2,r3
    3450:	8c400114 	ori	r17,r17,4
    3454:	1c000007 	ldb	r16,0(r3)
    3458:	003f7606 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    345c:	1c000007 	ldb	r16,0(r3)
    3460:	18800044 	addi	r2,r3,1
    3464:	8286e726 	beq	r16,r10,5004 <___svfprintf_internal_r+0x1f28>
    3468:	82fff404 	addi	r11,r16,-48
    346c:	1007883a 	mov	r3,r2
    3470:	0013883a 	mov	r9,zero
    3474:	2aff7036 	bltu	r5,r11,3238 <__alt_mem_Flash_flash_data+0xf4003238>
    3478:	1c000007 	ldb	r16,0(r3)
    347c:	4a4002a4 	muli	r9,r9,10
    3480:	18c00044 	addi	r3,r3,1
    3484:	5a53883a 	add	r9,r11,r9
    3488:	82fff404 	addi	r11,r16,-48
    348c:	2afffa2e 	bgeu	r5,r11,3478 <__alt_mem_Flash_flash_data+0xf4003478>
    3490:	483f690e 	bge	r9,zero,3238 <__alt_mem_Flash_flash_data+0xf4003238>
    3494:	027fffc4 	movi	r9,-1
    3498:	003f6706 	br	3238 <__alt_mem_Flash_flash_data+0xf4003238>
    349c:	8c402014 	ori	r17,r17,128
    34a0:	1805883a 	mov	r2,r3
    34a4:	1c000007 	ldb	r16,0(r3)
    34a8:	003f6206 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    34ac:	8c400414 	ori	r17,r17,16
    34b0:	d8c02915 	stw	r3,164(sp)
    34b4:	d9802785 	stb	r6,158(sp)
    34b8:	8880080c 	andi	r2,r17,32
    34bc:	d8c02d17 	ldw	r3,180(sp)
    34c0:	10021526 	beq	r2,zero,3d18 <___svfprintf_internal_r+0xc3c>
    34c4:	db002d17 	ldw	r12,180(sp)
    34c8:	18800117 	ldw	r2,4(r3)
    34cc:	1cc00017 	ldw	r19,0(r3)
    34d0:	63000204 	addi	r12,r12,8
    34d4:	db002d15 	stw	r12,180(sp)
    34d8:	1039883a 	mov	fp,r2
    34dc:	10021916 	blt	r2,zero,3d44 <___svfprintf_internal_r+0xc68>
    34e0:	dd402783 	ldbu	r21,158(sp)
    34e4:	da403215 	stw	r9,200(sp)
    34e8:	00800044 	movi	r2,1
    34ec:	9f06b03a 	or	r3,r19,fp
    34f0:	48000216 	blt	r9,zero,34fc <___svfprintf_internal_r+0x420>
    34f4:	013fdfc4 	movi	r4,-129
    34f8:	8922703a 	and	r17,r17,r4
    34fc:	1802461e 	bne	r3,zero,3e18 <___svfprintf_internal_r+0xd3c>
    3500:	48035426 	beq	r9,zero,4254 <___svfprintf_internal_r+0x1178>
    3504:	10803fcc 	andi	r2,r2,255
    3508:	00c00044 	movi	r3,1
    350c:	10c26726 	beq	r2,r3,3eac <___svfprintf_internal_r+0xdd0>
    3510:	00c00084 	movi	r3,2
    3514:	10c2ea26 	beq	r2,r3,40c0 <___svfprintf_internal_r+0xfe4>
    3518:	b007883a 	mov	r3,r22
    351c:	9808d0fa 	srli	r4,r19,3
    3520:	e00a977a 	slli	r5,fp,29
    3524:	e038d0fa 	srli	fp,fp,3
    3528:	9cc001cc 	andi	r19,r19,7
    352c:	98800c04 	addi	r2,r19,48
    3530:	18ffffc4 	addi	r3,r3,-1
    3534:	2926b03a 	or	r19,r5,r4
    3538:	18800005 	stb	r2,0(r3)
    353c:	9f08b03a 	or	r4,r19,fp
    3540:	203ff61e 	bne	r4,zero,351c <__alt_mem_Flash_flash_data+0xf400351c>
    3544:	8900004c 	andi	r4,r17,1
    3548:	d8c03115 	stw	r3,196(sp)
    354c:	2002ea26 	beq	r4,zero,40f8 <___svfprintf_internal_r+0x101c>
    3550:	10803fcc 	andi	r2,r2,255
    3554:	1080201c 	xori	r2,r2,128
    3558:	10bfe004 	addi	r2,r2,-128
    355c:	01000c04 	movi	r4,48
    3560:	11057526 	beq	r2,r4,4b38 <___svfprintf_internal_r+0x1a5c>
    3564:	dac03117 	ldw	r11,196(sp)
    3568:	193fffc5 	stb	r4,-1(r3)
    356c:	5affffc4 	addi	r11,r11,-1
    3570:	dac03115 	stw	r11,196(sp)
    3574:	b2e5c83a 	sub	r18,r22,r11
    3578:	9005883a 	mov	r2,r18
    357c:	9240010e 	bge	r18,r9,3584 <___svfprintf_internal_r+0x4a8>
    3580:	4805883a 	mov	r2,r9
    3584:	d8802a15 	stw	r2,168(sp)
    3588:	d8003415 	stw	zero,208(sp)
    358c:	a8803fcc 	andi	r2,r21,255
    3590:	1080201c 	xori	r2,r2,128
    3594:	10bfe004 	addi	r2,r2,-128
    3598:	10000326 	beq	r2,zero,35a8 <___svfprintf_internal_r+0x4cc>
    359c:	d8c02a17 	ldw	r3,168(sp)
    35a0:	18c00044 	addi	r3,r3,1
    35a4:	d8c02a15 	stw	r3,168(sp)
    35a8:	8ac0008c 	andi	r11,r17,2
    35ac:	dac02b15 	stw	r11,172(sp)
    35b0:	58000326 	beq	r11,zero,35c0 <___svfprintf_internal_r+0x4e4>
    35b4:	db002a17 	ldw	r12,168(sp)
    35b8:	63000084 	addi	r12,r12,2
    35bc:	db002a15 	stw	r12,168(sp)
    35c0:	88c0210c 	andi	r3,r17,132
    35c4:	d8c02c15 	stw	r3,176(sp)
    35c8:	1802111e 	bne	r3,zero,3e10 <___svfprintf_internal_r+0xd34>
    35cc:	dac02e17 	ldw	r11,184(sp)
    35d0:	db002a17 	ldw	r12,168(sp)
    35d4:	5b39c83a 	sub	fp,r11,r12
    35d8:	07020d0e 	bge	zero,fp,3e10 <___svfprintf_internal_r+0xd34>
    35dc:	02400404 	movi	r9,16
    35e0:	d8c02017 	ldw	r3,128(sp)
    35e4:	d8801f17 	ldw	r2,124(sp)
    35e8:	4f058c0e 	bge	r9,fp,4c1c <___svfprintf_internal_r+0x1b40>
    35ec:	014000b4 	movhi	r5,2
    35f0:	e009883a 	mov	r4,fp
    35f4:	297ec784 	addi	r5,r5,-1250
    35f8:	dc003c15 	stw	r16,240(sp)
    35fc:	9039883a 	mov	fp,r18
    3600:	d9403615 	stw	r5,216(sp)
    3604:	8825883a 	mov	r18,r17
    3608:	482b883a 	mov	r21,r9
    360c:	04c001c4 	movi	r19,7
    3610:	dc002f17 	ldw	r16,188(sp)
    3614:	2023883a 	mov	r17,r4
    3618:	00000306 	br	3628 <___svfprintf_internal_r+0x54c>
    361c:	8c7ffc04 	addi	r17,r17,-16
    3620:	42000204 	addi	r8,r8,8
    3624:	ac40130e 	bge	r21,r17,3674 <___svfprintf_internal_r+0x598>
    3628:	02c000b4 	movhi	r11,2
    362c:	18c00404 	addi	r3,r3,16
    3630:	10800044 	addi	r2,r2,1
    3634:	5afec784 	addi	r11,r11,-1250
    3638:	42c00015 	stw	r11,0(r8)
    363c:	45400115 	stw	r21,4(r8)
    3640:	d8c02015 	stw	r3,128(sp)
    3644:	d8801f15 	stw	r2,124(sp)
    3648:	98bff40e 	bge	r19,r2,361c <__alt_mem_Flash_flash_data+0xf400361c>
    364c:	8009883a 	mov	r4,r16
    3650:	b80b883a 	mov	r5,r23
    3654:	b00d883a 	mov	r6,r22
    3658:	000c2380 	call	c238 <__ssprint_r>
    365c:	103f671e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    3660:	8c7ffc04 	addi	r17,r17,-16
    3664:	d8c02017 	ldw	r3,128(sp)
    3668:	d8801f17 	ldw	r2,124(sp)
    366c:	da000404 	addi	r8,sp,16
    3670:	ac7fed16 	blt	r21,r17,3628 <__alt_mem_Flash_flash_data+0xf4003628>
    3674:	dc003c17 	ldw	r16,240(sp)
    3678:	8809883a 	mov	r4,r17
    367c:	9023883a 	mov	r17,r18
    3680:	e025883a 	mov	r18,fp
    3684:	2039883a 	mov	fp,r4
    3688:	db003617 	ldw	r12,216(sp)
    368c:	e0c7883a 	add	r3,fp,r3
    3690:	10800044 	addi	r2,r2,1
    3694:	43000015 	stw	r12,0(r8)
    3698:	47000115 	stw	fp,4(r8)
    369c:	d8c02015 	stw	r3,128(sp)
    36a0:	d8801f15 	stw	r2,124(sp)
    36a4:	010001c4 	movi	r4,7
    36a8:	20834416 	blt	r4,r2,43bc <___svfprintf_internal_r+0x12e0>
    36ac:	d8802787 	ldb	r2,158(sp)
    36b0:	42000204 	addi	r8,r8,8
    36b4:	10000c26 	beq	r2,zero,36e8 <___svfprintf_internal_r+0x60c>
    36b8:	d8801f17 	ldw	r2,124(sp)
    36bc:	d9002784 	addi	r4,sp,158
    36c0:	18c00044 	addi	r3,r3,1
    36c4:	10800044 	addi	r2,r2,1
    36c8:	41000015 	stw	r4,0(r8)
    36cc:	01000044 	movi	r4,1
    36d0:	41000115 	stw	r4,4(r8)
    36d4:	d8c02015 	stw	r3,128(sp)
    36d8:	d8801f15 	stw	r2,124(sp)
    36dc:	010001c4 	movi	r4,7
    36e0:	2082f616 	blt	r4,r2,42bc <___svfprintf_internal_r+0x11e0>
    36e4:	42000204 	addi	r8,r8,8
    36e8:	dac02b17 	ldw	r11,172(sp)
    36ec:	58000c26 	beq	r11,zero,3720 <___svfprintf_internal_r+0x644>
    36f0:	d8801f17 	ldw	r2,124(sp)
    36f4:	d9002704 	addi	r4,sp,156
    36f8:	18c00084 	addi	r3,r3,2
    36fc:	10800044 	addi	r2,r2,1
    3700:	41000015 	stw	r4,0(r8)
    3704:	01000084 	movi	r4,2
    3708:	41000115 	stw	r4,4(r8)
    370c:	d8c02015 	stw	r3,128(sp)
    3710:	d8801f15 	stw	r2,124(sp)
    3714:	010001c4 	movi	r4,7
    3718:	2082e016 	blt	r4,r2,429c <___svfprintf_internal_r+0x11c0>
    371c:	42000204 	addi	r8,r8,8
    3720:	db002c17 	ldw	r12,176(sp)
    3724:	00802004 	movi	r2,128
    3728:	60822f26 	beq	r12,r2,3fe8 <___svfprintf_internal_r+0xf0c>
    372c:	db003217 	ldw	r12,200(sp)
    3730:	64abc83a 	sub	r21,r12,r18
    3734:	0540310e 	bge	zero,r21,37fc <___svfprintf_internal_r+0x720>
    3738:	07000404 	movi	fp,16
    373c:	d8801f17 	ldw	r2,124(sp)
    3740:	e544270e 	bge	fp,r21,47e0 <___svfprintf_internal_r+0x1704>
    3744:	014000b4 	movhi	r5,2
    3748:	a809883a 	mov	r4,r21
    374c:	297ec384 	addi	r5,r5,-1266
    3750:	dc002c15 	stw	r16,176(sp)
    3754:	902b883a 	mov	r21,r18
    3758:	d9402b15 	stw	r5,172(sp)
    375c:	8825883a 	mov	r18,r17
    3760:	04c001c4 	movi	r19,7
    3764:	dc002f17 	ldw	r16,188(sp)
    3768:	2023883a 	mov	r17,r4
    376c:	00000306 	br	377c <___svfprintf_internal_r+0x6a0>
    3770:	8c7ffc04 	addi	r17,r17,-16
    3774:	42000204 	addi	r8,r8,8
    3778:	e440110e 	bge	fp,r17,37c0 <___svfprintf_internal_r+0x6e4>
    377c:	18c00404 	addi	r3,r3,16
    3780:	10800044 	addi	r2,r2,1
    3784:	45000015 	stw	r20,0(r8)
    3788:	47000115 	stw	fp,4(r8)
    378c:	d8c02015 	stw	r3,128(sp)
    3790:	d8801f15 	stw	r2,124(sp)
    3794:	98bff60e 	bge	r19,r2,3770 <__alt_mem_Flash_flash_data+0xf4003770>
    3798:	8009883a 	mov	r4,r16
    379c:	b80b883a 	mov	r5,r23
    37a0:	b00d883a 	mov	r6,r22
    37a4:	000c2380 	call	c238 <__ssprint_r>
    37a8:	103f141e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    37ac:	8c7ffc04 	addi	r17,r17,-16
    37b0:	d8c02017 	ldw	r3,128(sp)
    37b4:	d8801f17 	ldw	r2,124(sp)
    37b8:	da000404 	addi	r8,sp,16
    37bc:	e47fef16 	blt	fp,r17,377c <__alt_mem_Flash_flash_data+0xf400377c>
    37c0:	dc002c17 	ldw	r16,176(sp)
    37c4:	8809883a 	mov	r4,r17
    37c8:	9023883a 	mov	r17,r18
    37cc:	a825883a 	mov	r18,r21
    37d0:	202b883a 	mov	r21,r4
    37d4:	dac02b17 	ldw	r11,172(sp)
    37d8:	1d47883a 	add	r3,r3,r21
    37dc:	10800044 	addi	r2,r2,1
    37e0:	42c00015 	stw	r11,0(r8)
    37e4:	45400115 	stw	r21,4(r8)
    37e8:	d8c02015 	stw	r3,128(sp)
    37ec:	d8801f15 	stw	r2,124(sp)
    37f0:	010001c4 	movi	r4,7
    37f4:	2082a116 	blt	r4,r2,427c <___svfprintf_internal_r+0x11a0>
    37f8:	42000204 	addi	r8,r8,8
    37fc:	8880400c 	andi	r2,r17,256
    3800:	1001b01e 	bne	r2,zero,3ec4 <___svfprintf_internal_r+0xde8>
    3804:	d8801f17 	ldw	r2,124(sp)
    3808:	db003117 	ldw	r12,196(sp)
    380c:	1c87883a 	add	r3,r3,r18
    3810:	10800044 	addi	r2,r2,1
    3814:	43000015 	stw	r12,0(r8)
    3818:	44800115 	stw	r18,4(r8)
    381c:	d8c02015 	stw	r3,128(sp)
    3820:	d8801f15 	stw	r2,124(sp)
    3824:	010001c4 	movi	r4,7
    3828:	20828216 	blt	r4,r2,4234 <___svfprintf_internal_r+0x1158>
    382c:	42000204 	addi	r8,r8,8
    3830:	8c40010c 	andi	r17,r17,4
    3834:	88003226 	beq	r17,zero,3900 <___svfprintf_internal_r+0x824>
    3838:	db002e17 	ldw	r12,184(sp)
    383c:	dac02a17 	ldw	r11,168(sp)
    3840:	62e1c83a 	sub	r16,r12,r11
    3844:	04002e0e 	bge	zero,r16,3900 <___svfprintf_internal_r+0x824>
    3848:	04400404 	movi	r17,16
    384c:	d8801f17 	ldw	r2,124(sp)
    3850:	8c05330e 	bge	r17,r16,4d20 <___svfprintf_internal_r+0x1c44>
    3854:	010000b4 	movhi	r4,2
    3858:	213ec784 	addi	r4,r4,-1250
    385c:	d9003615 	stw	r4,216(sp)
    3860:	048001c4 	movi	r18,7
    3864:	dcc02f17 	ldw	r19,188(sp)
    3868:	00000306 	br	3878 <___svfprintf_internal_r+0x79c>
    386c:	843ffc04 	addi	r16,r16,-16
    3870:	42000204 	addi	r8,r8,8
    3874:	8c00130e 	bge	r17,r16,38c4 <___svfprintf_internal_r+0x7e8>
    3878:	014000b4 	movhi	r5,2
    387c:	18c00404 	addi	r3,r3,16
    3880:	10800044 	addi	r2,r2,1
    3884:	297ec784 	addi	r5,r5,-1250
    3888:	41400015 	stw	r5,0(r8)
    388c:	44400115 	stw	r17,4(r8)
    3890:	d8c02015 	stw	r3,128(sp)
    3894:	d8801f15 	stw	r2,124(sp)
    3898:	90bff40e 	bge	r18,r2,386c <__alt_mem_Flash_flash_data+0xf400386c>
    389c:	9809883a 	mov	r4,r19
    38a0:	b80b883a 	mov	r5,r23
    38a4:	b00d883a 	mov	r6,r22
    38a8:	000c2380 	call	c238 <__ssprint_r>
    38ac:	103ed31e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    38b0:	843ffc04 	addi	r16,r16,-16
    38b4:	d8c02017 	ldw	r3,128(sp)
    38b8:	d8801f17 	ldw	r2,124(sp)
    38bc:	da000404 	addi	r8,sp,16
    38c0:	8c3fed16 	blt	r17,r16,3878 <__alt_mem_Flash_flash_data+0xf4003878>
    38c4:	dac03617 	ldw	r11,216(sp)
    38c8:	1c07883a 	add	r3,r3,r16
    38cc:	10800044 	addi	r2,r2,1
    38d0:	42c00015 	stw	r11,0(r8)
    38d4:	44000115 	stw	r16,4(r8)
    38d8:	d8c02015 	stw	r3,128(sp)
    38dc:	d8801f15 	stw	r2,124(sp)
    38e0:	010001c4 	movi	r4,7
    38e4:	2080060e 	bge	r4,r2,3900 <___svfprintf_internal_r+0x824>
    38e8:	d9002f17 	ldw	r4,188(sp)
    38ec:	b80b883a 	mov	r5,r23
    38f0:	b00d883a 	mov	r6,r22
    38f4:	000c2380 	call	c238 <__ssprint_r>
    38f8:	103ec01e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    38fc:	d8c02017 	ldw	r3,128(sp)
    3900:	d8802a17 	ldw	r2,168(sp)
    3904:	db002e17 	ldw	r12,184(sp)
    3908:	1300010e 	bge	r2,r12,3910 <___svfprintf_internal_r+0x834>
    390c:	6005883a 	mov	r2,r12
    3910:	dac03017 	ldw	r11,192(sp)
    3914:	5897883a 	add	r11,r11,r2
    3918:	dac03015 	stw	r11,192(sp)
    391c:	1802331e 	bne	r3,zero,41ec <___svfprintf_internal_r+0x1110>
    3920:	d8001f15 	stw	zero,124(sp)
    3924:	da000404 	addi	r8,sp,16
    3928:	003e1806 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    392c:	db002d17 	ldw	r12,180(sp)
    3930:	dac02d17 	ldw	r11,180(sp)
    3934:	d8c02915 	stw	r3,164(sp)
    3938:	63000017 	ldw	r12,0(r12)
    393c:	5ac00117 	ldw	r11,4(r11)
    3940:	d9802785 	stb	r6,158(sp)
    3944:	6009883a 	mov	r4,r12
    3948:	580b883a 	mov	r5,r11
    394c:	db003715 	stw	r12,220(sp)
    3950:	da004015 	stw	r8,256(sp)
    3954:	da403f15 	stw	r9,252(sp)
    3958:	dac03815 	stw	r11,224(sp)
    395c:	000bf900 	call	bf90 <__fpclassifyd>
    3960:	db002d17 	ldw	r12,180(sp)
    3964:	04800044 	movi	r18,1
    3968:	da004017 	ldw	r8,256(sp)
    396c:	64c00204 	addi	r19,r12,8
    3970:	da403f17 	ldw	r9,252(sp)
    3974:	d9003717 	ldw	r4,220(sp)
    3978:	d9403817 	ldw	r5,224(sp)
    397c:	1483561e 	bne	r2,r18,46d8 <___svfprintf_internal_r+0x15fc>
    3980:	000d883a 	mov	r6,zero
    3984:	000f883a 	mov	r7,zero
    3988:	00111400 	call	11140 <__ledf2>
    398c:	da004017 	ldw	r8,256(sp)
    3990:	1004ee16 	blt	r2,zero,4d4c <___svfprintf_internal_r+0x1c70>
    3994:	dd402783 	ldbu	r21,158(sp)
    3998:	008011c4 	movi	r2,71
    399c:	1404440e 	bge	r2,r16,4ab0 <___svfprintf_internal_r+0x19d4>
    39a0:	00c000b4 	movhi	r3,2
    39a4:	18feb404 	addi	r3,r3,-1328
    39a8:	d8c03115 	stw	r3,196(sp)
    39ac:	02c000c4 	movi	r11,3
    39b0:	00bfdfc4 	movi	r2,-129
    39b4:	dac02a15 	stw	r11,168(sp)
    39b8:	88a2703a 	and	r17,r17,r2
    39bc:	dcc02d15 	stw	r19,180(sp)
    39c0:	5825883a 	mov	r18,r11
    39c4:	d8003215 	stw	zero,200(sp)
    39c8:	d8003415 	stw	zero,208(sp)
    39cc:	003eef06 	br	358c <__alt_mem_Flash_flash_data+0xf400358c>
    39d0:	8c400214 	ori	r17,r17,8
    39d4:	1805883a 	mov	r2,r3
    39d8:	1c000007 	ldb	r16,0(r3)
    39dc:	003e1506 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    39e0:	8c400414 	ori	r17,r17,16
    39e4:	d8c02915 	stw	r3,164(sp)
    39e8:	88c0080c 	andi	r3,r17,32
    39ec:	d8802d17 	ldw	r2,180(sp)
    39f0:	18005526 	beq	r3,zero,3b48 <___svfprintf_internal_r+0xa6c>
    39f4:	dac02d17 	ldw	r11,180(sp)
    39f8:	14c00017 	ldw	r19,0(r2)
    39fc:	17000117 	ldw	fp,4(r2)
    3a00:	5ac00204 	addi	r11,r11,8
    3a04:	dac02d15 	stw	r11,180(sp)
    3a08:	00800044 	movi	r2,1
    3a0c:	9f06b03a 	or	r3,r19,fp
    3a10:	d8002785 	stb	zero,158(sp)
    3a14:	da403215 	stw	r9,200(sp)
    3a18:	002b883a 	mov	r21,zero
    3a1c:	003eb406 	br	34f0 <__alt_mem_Flash_flash_data+0xf40034f0>
    3a20:	030000b4 	movhi	r12,2
    3a24:	633eb704 	addi	r12,r12,-1316
    3a28:	d8c02915 	stw	r3,164(sp)
    3a2c:	d9802785 	stb	r6,158(sp)
    3a30:	db003b15 	stw	r12,236(sp)
    3a34:	88c0080c 	andi	r3,r17,32
    3a38:	d8802d17 	ldw	r2,180(sp)
    3a3c:	18005626 	beq	r3,zero,3b98 <___svfprintf_internal_r+0xabc>
    3a40:	dac02d17 	ldw	r11,180(sp)
    3a44:	14c00017 	ldw	r19,0(r2)
    3a48:	17000117 	ldw	fp,4(r2)
    3a4c:	5ac00204 	addi	r11,r11,8
    3a50:	dac02d15 	stw	r11,180(sp)
    3a54:	8880004c 	andi	r2,r17,1
    3a58:	10029326 	beq	r2,zero,44a8 <___svfprintf_internal_r+0x13cc>
    3a5c:	9f06b03a 	or	r3,r19,fp
    3a60:	18033526 	beq	r3,zero,4738 <___svfprintf_internal_r+0x165c>
    3a64:	00800c04 	movi	r2,48
    3a68:	d8802705 	stb	r2,156(sp)
    3a6c:	dc002745 	stb	r16,157(sp)
    3a70:	8c400094 	ori	r17,r17,2
    3a74:	00800084 	movi	r2,2
    3a78:	003fe506 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    3a7c:	1805883a 	mov	r2,r3
    3a80:	d8002e15 	stw	zero,184(sp)
    3a84:	82fff404 	addi	r11,r16,-48
    3a88:	0019883a 	mov	r12,zero
    3a8c:	14000007 	ldb	r16,0(r2)
    3a90:	630002a4 	muli	r12,r12,10
    3a94:	18c00044 	addi	r3,r3,1
    3a98:	1805883a 	mov	r2,r3
    3a9c:	62d9883a 	add	r12,r12,r11
    3aa0:	82fff404 	addi	r11,r16,-48
    3aa4:	2afff92e 	bgeu	r5,r11,3a8c <__alt_mem_Flash_flash_data+0xf4003a8c>
    3aa8:	db002e15 	stw	r12,184(sp)
    3aac:	003de206 	br	3238 <__alt_mem_Flash_flash_data+0xf4003238>
    3ab0:	8c400814 	ori	r17,r17,32
    3ab4:	1805883a 	mov	r2,r3
    3ab8:	1c000007 	ldb	r16,0(r3)
    3abc:	003ddd06 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3ac0:	dac02d17 	ldw	r11,180(sp)
    3ac4:	db002d17 	ldw	r12,180(sp)
    3ac8:	d8c02915 	stw	r3,164(sp)
    3acc:	5ac00017 	ldw	r11,0(r11)
    3ad0:	d8002785 	stb	zero,158(sp)
    3ad4:	64c00104 	addi	r19,r12,4
    3ad8:	dac03115 	stw	r11,196(sp)
    3adc:	58048126 	beq	r11,zero,4ce4 <___svfprintf_internal_r+0x1c08>
    3ae0:	d9003117 	ldw	r4,196(sp)
    3ae4:	48041716 	blt	r9,zero,4b44 <___svfprintf_internal_r+0x1a68>
    3ae8:	480d883a 	mov	r6,r9
    3aec:	000b883a 	mov	r5,zero
    3af0:	da004015 	stw	r8,256(sp)
    3af4:	da403f15 	stw	r9,252(sp)
    3af8:	000a5e80 	call	a5e8 <memchr>
    3afc:	da004017 	ldw	r8,256(sp)
    3b00:	da403f17 	ldw	r9,252(sp)
    3b04:	1004db26 	beq	r2,zero,4e74 <___svfprintf_internal_r+0x1d98>
    3b08:	d8c03117 	ldw	r3,196(sp)
    3b0c:	10e5c83a 	sub	r18,r2,r3
    3b10:	4c80010e 	bge	r9,r18,3b18 <___svfprintf_internal_r+0xa3c>
    3b14:	4825883a 	mov	r18,r9
    3b18:	9005883a 	mov	r2,r18
    3b1c:	90040e16 	blt	r18,zero,4b58 <___svfprintf_internal_r+0x1a7c>
    3b20:	dd402783 	ldbu	r21,158(sp)
    3b24:	d8802a15 	stw	r2,168(sp)
    3b28:	dcc02d15 	stw	r19,180(sp)
    3b2c:	d8003215 	stw	zero,200(sp)
    3b30:	d8003415 	stw	zero,208(sp)
    3b34:	003e9506 	br	358c <__alt_mem_Flash_flash_data+0xf400358c>
    3b38:	d8c02915 	stw	r3,164(sp)
    3b3c:	88c0080c 	andi	r3,r17,32
    3b40:	d8802d17 	ldw	r2,180(sp)
    3b44:	183fab1e 	bne	r3,zero,39f4 <__alt_mem_Flash_flash_data+0xf40039f4>
    3b48:	88c0040c 	andi	r3,r17,16
    3b4c:	1802681e 	bne	r3,zero,44f0 <___svfprintf_internal_r+0x1414>
    3b50:	88c0100c 	andi	r3,r17,64
    3b54:	18026626 	beq	r3,zero,44f0 <___svfprintf_internal_r+0x1414>
    3b58:	dac02d17 	ldw	r11,180(sp)
    3b5c:	14c0000b 	ldhu	r19,0(r2)
    3b60:	0039883a 	mov	fp,zero
    3b64:	5ac00104 	addi	r11,r11,4
    3b68:	dac02d15 	stw	r11,180(sp)
    3b6c:	00800044 	movi	r2,1
    3b70:	9807883a 	mov	r3,r19
    3b74:	003fa606 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    3b78:	008000b4 	movhi	r2,2
    3b7c:	10bebc04 	addi	r2,r2,-1296
    3b80:	d8c02915 	stw	r3,164(sp)
    3b84:	d8803b15 	stw	r2,236(sp)
    3b88:	d9802785 	stb	r6,158(sp)
    3b8c:	88c0080c 	andi	r3,r17,32
    3b90:	d8802d17 	ldw	r2,180(sp)
    3b94:	183faa1e 	bne	r3,zero,3a40 <__alt_mem_Flash_flash_data+0xf4003a40>
    3b98:	88c0040c 	andi	r3,r17,16
    3b9c:	1802e826 	beq	r3,zero,4740 <___svfprintf_internal_r+0x1664>
    3ba0:	db002d17 	ldw	r12,180(sp)
    3ba4:	14c00017 	ldw	r19,0(r2)
    3ba8:	0039883a 	mov	fp,zero
    3bac:	63000104 	addi	r12,r12,4
    3bb0:	db002d15 	stw	r12,180(sp)
    3bb4:	003fa706 	br	3a54 <__alt_mem_Flash_flash_data+0xf4003a54>
    3bb8:	30803fcc 	andi	r2,r6,255
    3bbc:	1080201c 	xori	r2,r2,128
    3bc0:	10bfe004 	addi	r2,r2,-128
    3bc4:	1002d91e 	bne	r2,zero,472c <___svfprintf_internal_r+0x1650>
    3bc8:	1805883a 	mov	r2,r3
    3bcc:	01800804 	movi	r6,32
    3bd0:	1c000007 	ldb	r16,0(r3)
    3bd4:	003d9706 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3bd8:	8c400054 	ori	r17,r17,1
    3bdc:	1805883a 	mov	r2,r3
    3be0:	1c000007 	ldb	r16,0(r3)
    3be4:	003d9306 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3be8:	dac02d17 	ldw	r11,180(sp)
    3bec:	db002d17 	ldw	r12,180(sp)
    3bf0:	5ac00017 	ldw	r11,0(r11)
    3bf4:	dac02e15 	stw	r11,184(sp)
    3bf8:	62c00104 	addi	r11,r12,4
    3bfc:	db002e17 	ldw	r12,184(sp)
    3c00:	60033e16 	blt	r12,zero,48fc <___svfprintf_internal_r+0x1820>
    3c04:	dac02d15 	stw	r11,180(sp)
    3c08:	1805883a 	mov	r2,r3
    3c0c:	1c000007 	ldb	r16,0(r3)
    3c10:	003d8806 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3c14:	1805883a 	mov	r2,r3
    3c18:	01800ac4 	movi	r6,43
    3c1c:	1c000007 	ldb	r16,0(r3)
    3c20:	003d8406 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3c24:	8c401014 	ori	r17,r17,64
    3c28:	1805883a 	mov	r2,r3
    3c2c:	1c000007 	ldb	r16,0(r3)
    3c30:	003d8006 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3c34:	1c000007 	ldb	r16,0(r3)
    3c38:	81c33626 	beq	r16,r7,4914 <___svfprintf_internal_r+0x1838>
    3c3c:	8c400414 	ori	r17,r17,16
    3c40:	1805883a 	mov	r2,r3
    3c44:	003d7b06 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    3c48:	d8c02915 	stw	r3,164(sp)
    3c4c:	d9802785 	stb	r6,158(sp)
    3c50:	8880080c 	andi	r2,r17,32
    3c54:	1002c226 	beq	r2,zero,4760 <___svfprintf_internal_r+0x1684>
    3c58:	db002d17 	ldw	r12,180(sp)
    3c5c:	dac03017 	ldw	r11,192(sp)
    3c60:	60800017 	ldw	r2,0(r12)
    3c64:	5807d7fa 	srai	r3,r11,31
    3c68:	63000104 	addi	r12,r12,4
    3c6c:	db002d15 	stw	r12,180(sp)
    3c70:	12c00015 	stw	r11,0(r2)
    3c74:	10c00115 	stw	r3,4(r2)
    3c78:	003d4406 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    3c7c:	db002d17 	ldw	r12,180(sp)
    3c80:	00800c04 	movi	r2,48
    3c84:	d8802705 	stb	r2,156(sp)
    3c88:	64c00017 	ldw	r19,0(r12)
    3c8c:	00801e04 	movi	r2,120
    3c90:	d8802745 	stb	r2,157(sp)
    3c94:	008000b4 	movhi	r2,2
    3c98:	10bebc04 	addi	r2,r2,-1296
    3c9c:	63000104 	addi	r12,r12,4
    3ca0:	d8c02915 	stw	r3,164(sp)
    3ca4:	d8803b15 	stw	r2,236(sp)
    3ca8:	0039883a 	mov	fp,zero
    3cac:	8c400094 	ori	r17,r17,2
    3cb0:	db002d15 	stw	r12,180(sp)
    3cb4:	00800084 	movi	r2,2
    3cb8:	04001e04 	movi	r16,120
    3cbc:	9807883a 	mov	r3,r19
    3cc0:	003f5306 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    3cc4:	db002d17 	ldw	r12,180(sp)
    3cc8:	d8c02915 	stw	r3,164(sp)
    3ccc:	dac01404 	addi	r11,sp,80
    3cd0:	60800017 	ldw	r2,0(r12)
    3cd4:	00c00044 	movi	r3,1
    3cd8:	63000104 	addi	r12,r12,4
    3cdc:	d8801405 	stb	r2,80(sp)
    3ce0:	d8c02a15 	stw	r3,168(sp)
    3ce4:	d8002785 	stb	zero,158(sp)
    3ce8:	db002d15 	stw	r12,180(sp)
    3cec:	1825883a 	mov	r18,r3
    3cf0:	d8003215 	stw	zero,200(sp)
    3cf4:	d8003415 	stw	zero,208(sp)
    3cf8:	dac03115 	stw	r11,196(sp)
    3cfc:	0005883a 	mov	r2,zero
    3d00:	003e2906 	br	35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    3d04:	d8c02915 	stw	r3,164(sp)
    3d08:	d9802785 	stb	r6,158(sp)
    3d0c:	8880080c 	andi	r2,r17,32
    3d10:	d8c02d17 	ldw	r3,180(sp)
    3d14:	103deb1e 	bne	r2,zero,34c4 <__alt_mem_Flash_flash_data+0xf40034c4>
    3d18:	8880040c 	andi	r2,r17,16
    3d1c:	1001e51e 	bne	r2,zero,44b4 <___svfprintf_internal_r+0x13d8>
    3d20:	8880100c 	andi	r2,r17,64
    3d24:	1001e326 	beq	r2,zero,44b4 <___svfprintf_internal_r+0x13d8>
    3d28:	1cc0000f 	ldh	r19,0(r3)
    3d2c:	db002d17 	ldw	r12,180(sp)
    3d30:	9839d7fa 	srai	fp,r19,31
    3d34:	63000104 	addi	r12,r12,4
    3d38:	db002d15 	stw	r12,180(sp)
    3d3c:	e005883a 	mov	r2,fp
    3d40:	103de70e 	bge	r2,zero,34e0 <__alt_mem_Flash_flash_data+0xf40034e0>
    3d44:	04e7c83a 	sub	r19,zero,r19
    3d48:	9804c03a 	cmpne	r2,r19,zero
    3d4c:	0739c83a 	sub	fp,zero,fp
    3d50:	e0b9c83a 	sub	fp,fp,r2
    3d54:	05400b44 	movi	r21,45
    3d58:	dd402785 	stb	r21,158(sp)
    3d5c:	da403215 	stw	r9,200(sp)
    3d60:	00800044 	movi	r2,1
    3d64:	9f06b03a 	or	r3,r19,fp
    3d68:	003de106 	br	34f0 <__alt_mem_Flash_flash_data+0xf40034f0>
    3d6c:	8c400414 	ori	r17,r17,16
    3d70:	d8c02915 	stw	r3,164(sp)
    3d74:	8880080c 	andi	r2,r17,32
    3d78:	10000b26 	beq	r2,zero,3da8 <___svfprintf_internal_r+0xccc>
    3d7c:	db002d17 	ldw	r12,180(sp)
    3d80:	0005883a 	mov	r2,zero
    3d84:	64c00017 	ldw	r19,0(r12)
    3d88:	67000117 	ldw	fp,4(r12)
    3d8c:	63000204 	addi	r12,r12,8
    3d90:	db002d15 	stw	r12,180(sp)
    3d94:	9f06b03a 	or	r3,r19,fp
    3d98:	003f1d06 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    3d9c:	d8c02915 	stw	r3,164(sp)
    3da0:	8880080c 	andi	r2,r17,32
    3da4:	103ff51e 	bne	r2,zero,3d7c <__alt_mem_Flash_flash_data+0xf4003d7c>
    3da8:	8880040c 	andi	r2,r17,16
    3dac:	1001c81e 	bne	r2,zero,44d0 <___svfprintf_internal_r+0x13f4>
    3db0:	8880100c 	andi	r2,r17,64
    3db4:	1001c626 	beq	r2,zero,44d0 <___svfprintf_internal_r+0x13f4>
    3db8:	db002d17 	ldw	r12,180(sp)
    3dbc:	0039883a 	mov	fp,zero
    3dc0:	0005883a 	mov	r2,zero
    3dc4:	64c0000b 	ldhu	r19,0(r12)
    3dc8:	63000104 	addi	r12,r12,4
    3dcc:	db002d15 	stw	r12,180(sp)
    3dd0:	9807883a 	mov	r3,r19
    3dd4:	003f0e06 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    3dd8:	d8c02915 	stw	r3,164(sp)
    3ddc:	d9802785 	stb	r6,158(sp)
    3de0:	803d8026 	beq	r16,zero,33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    3de4:	02c00044 	movi	r11,1
    3de8:	db001404 	addi	r12,sp,80
    3dec:	dac02a15 	stw	r11,168(sp)
    3df0:	dc001405 	stb	r16,80(sp)
    3df4:	d8002785 	stb	zero,158(sp)
    3df8:	5825883a 	mov	r18,r11
    3dfc:	d8003215 	stw	zero,200(sp)
    3e00:	d8003415 	stw	zero,208(sp)
    3e04:	db003115 	stw	r12,196(sp)
    3e08:	0005883a 	mov	r2,zero
    3e0c:	003de606 	br	35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    3e10:	d8c02017 	ldw	r3,128(sp)
    3e14:	003e2706 	br	36b4 <__alt_mem_Flash_flash_data+0xf40036b4>
    3e18:	10803fcc 	andi	r2,r2,255
    3e1c:	00c00044 	movi	r3,1
    3e20:	10fdbb1e 	bne	r2,r3,3510 <__alt_mem_Flash_flash_data+0xf4003510>
    3e24:	e000021e 	bne	fp,zero,3e30 <___svfprintf_internal_r+0xd54>
    3e28:	00800244 	movi	r2,9
    3e2c:	14c01f2e 	bgeu	r2,r19,3eac <___svfprintf_internal_r+0xdd0>
    3e30:	dc002a15 	stw	r16,168(sp)
    3e34:	dc402b15 	stw	r17,172(sp)
    3e38:	9821883a 	mov	r16,r19
    3e3c:	e023883a 	mov	r17,fp
    3e40:	b025883a 	mov	r18,r22
    3e44:	4827883a 	mov	r19,r9
    3e48:	4039883a 	mov	fp,r8
    3e4c:	8009883a 	mov	r4,r16
    3e50:	880b883a 	mov	r5,r17
    3e54:	01800284 	movi	r6,10
    3e58:	000f883a 	mov	r7,zero
    3e5c:	000f7b80 	call	f7b8 <__umoddi3>
    3e60:	10800c04 	addi	r2,r2,48
    3e64:	94bfffc4 	addi	r18,r18,-1
    3e68:	8009883a 	mov	r4,r16
    3e6c:	880b883a 	mov	r5,r17
    3e70:	01800284 	movi	r6,10
    3e74:	000f883a 	mov	r7,zero
    3e78:	90800005 	stb	r2,0(r18)
    3e7c:	000f1f80 	call	f1f8 <__udivdi3>
    3e80:	1021883a 	mov	r16,r2
    3e84:	10c4b03a 	or	r2,r2,r3
    3e88:	1823883a 	mov	r17,r3
    3e8c:	103fef1e 	bne	r2,zero,3e4c <__alt_mem_Flash_flash_data+0xf4003e4c>
    3e90:	dc803115 	stw	r18,196(sp)
    3e94:	dc002a17 	ldw	r16,168(sp)
    3e98:	dc402b17 	ldw	r17,172(sp)
    3e9c:	9813883a 	mov	r9,r19
    3ea0:	e011883a 	mov	r8,fp
    3ea4:	b4a5c83a 	sub	r18,r22,r18
    3ea8:	003db306 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    3eac:	9cc00c04 	addi	r19,r19,48
    3eb0:	db001dc4 	addi	r12,sp,119
    3eb4:	dcc01dc5 	stb	r19,119(sp)
    3eb8:	dc803d17 	ldw	r18,244(sp)
    3ebc:	db003115 	stw	r12,196(sp)
    3ec0:	003dad06 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    3ec4:	00801944 	movi	r2,101
    3ec8:	14008d0e 	bge	r2,r16,4100 <___svfprintf_internal_r+0x1024>
    3ecc:	d9003717 	ldw	r4,220(sp)
    3ed0:	d9403817 	ldw	r5,224(sp)
    3ed4:	000d883a 	mov	r6,zero
    3ed8:	000f883a 	mov	r7,zero
    3edc:	d8c03e15 	stw	r3,248(sp)
    3ee0:	da004015 	stw	r8,256(sp)
    3ee4:	0010fdc0 	call	10fdc <__eqdf2>
    3ee8:	d8c03e17 	ldw	r3,248(sp)
    3eec:	da004017 	ldw	r8,256(sp)
    3ef0:	1000fd1e 	bne	r2,zero,42e8 <___svfprintf_internal_r+0x120c>
    3ef4:	d8801f17 	ldw	r2,124(sp)
    3ef8:	010000b4 	movhi	r4,2
    3efc:	213ec304 	addi	r4,r4,-1268
    3f00:	18c00044 	addi	r3,r3,1
    3f04:	10800044 	addi	r2,r2,1
    3f08:	41000015 	stw	r4,0(r8)
    3f0c:	01000044 	movi	r4,1
    3f10:	41000115 	stw	r4,4(r8)
    3f14:	d8c02015 	stw	r3,128(sp)
    3f18:	d8801f15 	stw	r2,124(sp)
    3f1c:	010001c4 	movi	r4,7
    3f20:	20823316 	blt	r4,r2,47f0 <___svfprintf_internal_r+0x1714>
    3f24:	42000204 	addi	r8,r8,8
    3f28:	d8802617 	ldw	r2,152(sp)
    3f2c:	dac03317 	ldw	r11,204(sp)
    3f30:	12c00216 	blt	r2,r11,3f3c <___svfprintf_internal_r+0xe60>
    3f34:	8880004c 	andi	r2,r17,1
    3f38:	103e3d26 	beq	r2,zero,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    3f3c:	db003917 	ldw	r12,228(sp)
    3f40:	d8801f17 	ldw	r2,124(sp)
    3f44:	dac03517 	ldw	r11,212(sp)
    3f48:	1b07883a 	add	r3,r3,r12
    3f4c:	10800044 	addi	r2,r2,1
    3f50:	42c00015 	stw	r11,0(r8)
    3f54:	43000115 	stw	r12,4(r8)
    3f58:	d8c02015 	stw	r3,128(sp)
    3f5c:	d8801f15 	stw	r2,124(sp)
    3f60:	010001c4 	movi	r4,7
    3f64:	20826f16 	blt	r4,r2,4924 <___svfprintf_internal_r+0x1848>
    3f68:	42000204 	addi	r8,r8,8
    3f6c:	db003317 	ldw	r12,204(sp)
    3f70:	643fffc4 	addi	r16,r12,-1
    3f74:	043e2e0e 	bge	zero,r16,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    3f78:	04800404 	movi	r18,16
    3f7c:	d8801f17 	ldw	r2,124(sp)
    3f80:	9400a00e 	bge	r18,r16,4204 <___svfprintf_internal_r+0x1128>
    3f84:	014000b4 	movhi	r5,2
    3f88:	297ec384 	addi	r5,r5,-1266
    3f8c:	d9402b15 	stw	r5,172(sp)
    3f90:	054001c4 	movi	r21,7
    3f94:	dcc02f17 	ldw	r19,188(sp)
    3f98:	00000306 	br	3fa8 <___svfprintf_internal_r+0xecc>
    3f9c:	42000204 	addi	r8,r8,8
    3fa0:	843ffc04 	addi	r16,r16,-16
    3fa4:	94009a0e 	bge	r18,r16,4210 <___svfprintf_internal_r+0x1134>
    3fa8:	18c00404 	addi	r3,r3,16
    3fac:	10800044 	addi	r2,r2,1
    3fb0:	45000015 	stw	r20,0(r8)
    3fb4:	44800115 	stw	r18,4(r8)
    3fb8:	d8c02015 	stw	r3,128(sp)
    3fbc:	d8801f15 	stw	r2,124(sp)
    3fc0:	a8bff60e 	bge	r21,r2,3f9c <__alt_mem_Flash_flash_data+0xf4003f9c>
    3fc4:	9809883a 	mov	r4,r19
    3fc8:	b80b883a 	mov	r5,r23
    3fcc:	b00d883a 	mov	r6,r22
    3fd0:	000c2380 	call	c238 <__ssprint_r>
    3fd4:	103d091e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    3fd8:	d8c02017 	ldw	r3,128(sp)
    3fdc:	d8801f17 	ldw	r2,124(sp)
    3fe0:	da000404 	addi	r8,sp,16
    3fe4:	003fee06 	br	3fa0 <__alt_mem_Flash_flash_data+0xf4003fa0>
    3fe8:	dac02e17 	ldw	r11,184(sp)
    3fec:	db002a17 	ldw	r12,168(sp)
    3ff0:	5b2bc83a 	sub	r21,r11,r12
    3ff4:	057dcd0e 	bge	zero,r21,372c <__alt_mem_Flash_flash_data+0xf400372c>
    3ff8:	07000404 	movi	fp,16
    3ffc:	d8801f17 	ldw	r2,124(sp)
    4000:	e5435d0e 	bge	fp,r21,4d78 <___svfprintf_internal_r+0x1c9c>
    4004:	014000b4 	movhi	r5,2
    4008:	a809883a 	mov	r4,r21
    400c:	297ec384 	addi	r5,r5,-1266
    4010:	dc002c15 	stw	r16,176(sp)
    4014:	902b883a 	mov	r21,r18
    4018:	d9402b15 	stw	r5,172(sp)
    401c:	8825883a 	mov	r18,r17
    4020:	04c001c4 	movi	r19,7
    4024:	dc002f17 	ldw	r16,188(sp)
    4028:	2023883a 	mov	r17,r4
    402c:	00000306 	br	403c <___svfprintf_internal_r+0xf60>
    4030:	8c7ffc04 	addi	r17,r17,-16
    4034:	42000204 	addi	r8,r8,8
    4038:	e440110e 	bge	fp,r17,4080 <___svfprintf_internal_r+0xfa4>
    403c:	18c00404 	addi	r3,r3,16
    4040:	10800044 	addi	r2,r2,1
    4044:	45000015 	stw	r20,0(r8)
    4048:	47000115 	stw	fp,4(r8)
    404c:	d8c02015 	stw	r3,128(sp)
    4050:	d8801f15 	stw	r2,124(sp)
    4054:	98bff60e 	bge	r19,r2,4030 <__alt_mem_Flash_flash_data+0xf4004030>
    4058:	8009883a 	mov	r4,r16
    405c:	b80b883a 	mov	r5,r23
    4060:	b00d883a 	mov	r6,r22
    4064:	000c2380 	call	c238 <__ssprint_r>
    4068:	103ce41e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    406c:	8c7ffc04 	addi	r17,r17,-16
    4070:	d8c02017 	ldw	r3,128(sp)
    4074:	d8801f17 	ldw	r2,124(sp)
    4078:	da000404 	addi	r8,sp,16
    407c:	e47fef16 	blt	fp,r17,403c <__alt_mem_Flash_flash_data+0xf400403c>
    4080:	dc002c17 	ldw	r16,176(sp)
    4084:	8809883a 	mov	r4,r17
    4088:	9023883a 	mov	r17,r18
    408c:	a825883a 	mov	r18,r21
    4090:	202b883a 	mov	r21,r4
    4094:	dac02b17 	ldw	r11,172(sp)
    4098:	1d47883a 	add	r3,r3,r21
    409c:	10800044 	addi	r2,r2,1
    40a0:	42c00015 	stw	r11,0(r8)
    40a4:	45400115 	stw	r21,4(r8)
    40a8:	d8c02015 	stw	r3,128(sp)
    40ac:	d8801f15 	stw	r2,124(sp)
    40b0:	010001c4 	movi	r4,7
    40b4:	20818016 	blt	r4,r2,46b8 <___svfprintf_internal_r+0x15dc>
    40b8:	42000204 	addi	r8,r8,8
    40bc:	003d9b06 	br	372c <__alt_mem_Flash_flash_data+0xf400372c>
    40c0:	d9403b17 	ldw	r5,236(sp)
    40c4:	b007883a 	mov	r3,r22
    40c8:	988003cc 	andi	r2,r19,15
    40cc:	e008973a 	slli	r4,fp,28
    40d0:	2885883a 	add	r2,r5,r2
    40d4:	9826d13a 	srli	r19,r19,4
    40d8:	10800003 	ldbu	r2,0(r2)
    40dc:	e038d13a 	srli	fp,fp,4
    40e0:	18ffffc4 	addi	r3,r3,-1
    40e4:	24e6b03a 	or	r19,r4,r19
    40e8:	18800005 	stb	r2,0(r3)
    40ec:	9f04b03a 	or	r2,r19,fp
    40f0:	103ff51e 	bne	r2,zero,40c8 <__alt_mem_Flash_flash_data+0xf40040c8>
    40f4:	d8c03115 	stw	r3,196(sp)
    40f8:	b0e5c83a 	sub	r18,r22,r3
    40fc:	003d1e06 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    4100:	db003317 	ldw	r12,204(sp)
    4104:	00800044 	movi	r2,1
    4108:	18c00044 	addi	r3,r3,1
    410c:	13014b0e 	bge	r2,r12,463c <___svfprintf_internal_r+0x1560>
    4110:	dc001f17 	ldw	r16,124(sp)
    4114:	dac03117 	ldw	r11,196(sp)
    4118:	00800044 	movi	r2,1
    411c:	84000044 	addi	r16,r16,1
    4120:	40800115 	stw	r2,4(r8)
    4124:	42c00015 	stw	r11,0(r8)
    4128:	d8c02015 	stw	r3,128(sp)
    412c:	dc001f15 	stw	r16,124(sp)
    4130:	008001c4 	movi	r2,7
    4134:	14014e16 	blt	r2,r16,4670 <___svfprintf_internal_r+0x1594>
    4138:	42000204 	addi	r8,r8,8
    413c:	db003917 	ldw	r12,228(sp)
    4140:	dac03517 	ldw	r11,212(sp)
    4144:	84000044 	addi	r16,r16,1
    4148:	1b07883a 	add	r3,r3,r12
    414c:	42c00015 	stw	r11,0(r8)
    4150:	43000115 	stw	r12,4(r8)
    4154:	d8c02015 	stw	r3,128(sp)
    4158:	dc001f15 	stw	r16,124(sp)
    415c:	008001c4 	movi	r2,7
    4160:	14014c16 	blt	r2,r16,4694 <___svfprintf_internal_r+0x15b8>
    4164:	44800204 	addi	r18,r8,8
    4168:	d9003717 	ldw	r4,220(sp)
    416c:	d9403817 	ldw	r5,224(sp)
    4170:	000d883a 	mov	r6,zero
    4174:	000f883a 	mov	r7,zero
    4178:	d8c03e15 	stw	r3,248(sp)
    417c:	0010fdc0 	call	10fdc <__eqdf2>
    4180:	d8c03e17 	ldw	r3,248(sp)
    4184:	db003317 	ldw	r12,204(sp)
    4188:	10009526 	beq	r2,zero,43e0 <___svfprintf_internal_r+0x1304>
    418c:	dac03117 	ldw	r11,196(sp)
    4190:	60bfffc4 	addi	r2,r12,-1
    4194:	1887883a 	add	r3,r3,r2
    4198:	59000044 	addi	r4,r11,1
    419c:	84000044 	addi	r16,r16,1
    41a0:	90800115 	stw	r2,4(r18)
    41a4:	91000015 	stw	r4,0(r18)
    41a8:	d8c02015 	stw	r3,128(sp)
    41ac:	dc001f15 	stw	r16,124(sp)
    41b0:	008001c4 	movi	r2,7
    41b4:	1400b316 	blt	r2,r16,4484 <___svfprintf_internal_r+0x13a8>
    41b8:	94800204 	addi	r18,r18,8
    41bc:	dac03a17 	ldw	r11,232(sp)
    41c0:	dd4022c4 	addi	r21,sp,139
    41c4:	84000044 	addi	r16,r16,1
    41c8:	1ac7883a 	add	r3,r3,r11
    41cc:	95400015 	stw	r21,0(r18)
    41d0:	92c00115 	stw	r11,4(r18)
    41d4:	d8c02015 	stw	r3,128(sp)
    41d8:	dc001f15 	stw	r16,124(sp)
    41dc:	008001c4 	movi	r2,7
    41e0:	14001416 	blt	r2,r16,4234 <___svfprintf_internal_r+0x1158>
    41e4:	92000204 	addi	r8,r18,8
    41e8:	003d9106 	br	3830 <__alt_mem_Flash_flash_data+0xf4003830>
    41ec:	d9002f17 	ldw	r4,188(sp)
    41f0:	b80b883a 	mov	r5,r23
    41f4:	b00d883a 	mov	r6,r22
    41f8:	000c2380 	call	c238 <__ssprint_r>
    41fc:	103dc826 	beq	r2,zero,3920 <__alt_mem_Flash_flash_data+0xf4003920>
    4200:	003c7e06 	br	33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4204:	010000b4 	movhi	r4,2
    4208:	213ec384 	addi	r4,r4,-1266
    420c:	d9002b15 	stw	r4,172(sp)
    4210:	dac02b17 	ldw	r11,172(sp)
    4214:	1c07883a 	add	r3,r3,r16
    4218:	44000115 	stw	r16,4(r8)
    421c:	42c00015 	stw	r11,0(r8)
    4220:	10800044 	addi	r2,r2,1
    4224:	d8c02015 	stw	r3,128(sp)
    4228:	d8801f15 	stw	r2,124(sp)
    422c:	010001c4 	movi	r4,7
    4230:	20bd7e0e 	bge	r4,r2,382c <__alt_mem_Flash_flash_data+0xf400382c>
    4234:	d9002f17 	ldw	r4,188(sp)
    4238:	b80b883a 	mov	r5,r23
    423c:	b00d883a 	mov	r6,r22
    4240:	000c2380 	call	c238 <__ssprint_r>
    4244:	103c6d1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4248:	d8c02017 	ldw	r3,128(sp)
    424c:	da000404 	addi	r8,sp,16
    4250:	003d7706 	br	3830 <__alt_mem_Flash_flash_data+0xf4003830>
    4254:	10803fcc 	andi	r2,r2,255
    4258:	1000201e 	bne	r2,zero,42dc <___svfprintf_internal_r+0x1200>
    425c:	8880004c 	andi	r2,r17,1
    4260:	10001e26 	beq	r2,zero,42dc <___svfprintf_internal_r+0x1200>
    4264:	00800c04 	movi	r2,48
    4268:	d8c01dc4 	addi	r3,sp,119
    426c:	d8801dc5 	stb	r2,119(sp)
    4270:	dc803d17 	ldw	r18,244(sp)
    4274:	d8c03115 	stw	r3,196(sp)
    4278:	003cbf06 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    427c:	d9002f17 	ldw	r4,188(sp)
    4280:	b80b883a 	mov	r5,r23
    4284:	b00d883a 	mov	r6,r22
    4288:	000c2380 	call	c238 <__ssprint_r>
    428c:	103c5b1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4290:	d8c02017 	ldw	r3,128(sp)
    4294:	da000404 	addi	r8,sp,16
    4298:	003d5806 	br	37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    429c:	d9002f17 	ldw	r4,188(sp)
    42a0:	b80b883a 	mov	r5,r23
    42a4:	b00d883a 	mov	r6,r22
    42a8:	000c2380 	call	c238 <__ssprint_r>
    42ac:	103c531e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    42b0:	d8c02017 	ldw	r3,128(sp)
    42b4:	da000404 	addi	r8,sp,16
    42b8:	003d1906 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    42bc:	d9002f17 	ldw	r4,188(sp)
    42c0:	b80b883a 	mov	r5,r23
    42c4:	b00d883a 	mov	r6,r22
    42c8:	000c2380 	call	c238 <__ssprint_r>
    42cc:	103c4b1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    42d0:	d8c02017 	ldw	r3,128(sp)
    42d4:	da000404 	addi	r8,sp,16
    42d8:	003d0306 	br	36e8 <__alt_mem_Flash_flash_data+0xf40036e8>
    42dc:	0025883a 	mov	r18,zero
    42e0:	dd803115 	stw	r22,196(sp)
    42e4:	003ca406 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    42e8:	dc002617 	ldw	r16,152(sp)
    42ec:	0401480e 	bge	zero,r16,4810 <___svfprintf_internal_r+0x1734>
    42f0:	db003117 	ldw	r12,196(sp)
    42f4:	dac03317 	ldw	r11,204(sp)
    42f8:	62e1883a 	add	r16,r12,r11
    42fc:	db003417 	ldw	r12,208(sp)
    4300:	5825883a 	mov	r18,r11
    4304:	62c0010e 	bge	r12,r11,430c <___svfprintf_internal_r+0x1230>
    4308:	6025883a 	mov	r18,r12
    430c:	04800b0e 	bge	zero,r18,433c <___svfprintf_internal_r+0x1260>
    4310:	d8801f17 	ldw	r2,124(sp)
    4314:	dac03117 	ldw	r11,196(sp)
    4318:	1c87883a 	add	r3,r3,r18
    431c:	10800044 	addi	r2,r2,1
    4320:	42c00015 	stw	r11,0(r8)
    4324:	44800115 	stw	r18,4(r8)
    4328:	d8c02015 	stw	r3,128(sp)
    432c:	d8801f15 	stw	r2,124(sp)
    4330:	010001c4 	movi	r4,7
    4334:	20823f16 	blt	r4,r2,4c34 <___svfprintf_internal_r+0x1b58>
    4338:	42000204 	addi	r8,r8,8
    433c:	90023b16 	blt	r18,zero,4c2c <___svfprintf_internal_r+0x1b50>
    4340:	db003417 	ldw	r12,208(sp)
    4344:	64a5c83a 	sub	r18,r12,r18
    4348:	0480780e 	bge	zero,r18,452c <___svfprintf_internal_r+0x1450>
    434c:	05400404 	movi	r21,16
    4350:	d8801f17 	ldw	r2,124(sp)
    4354:	ac81140e 	bge	r21,r18,47a8 <___svfprintf_internal_r+0x16cc>
    4358:	014000b4 	movhi	r5,2
    435c:	297ec384 	addi	r5,r5,-1266
    4360:	d9402b15 	stw	r5,172(sp)
    4364:	070001c4 	movi	fp,7
    4368:	dcc02f17 	ldw	r19,188(sp)
    436c:	00000306 	br	437c <___svfprintf_internal_r+0x12a0>
    4370:	42000204 	addi	r8,r8,8
    4374:	94bffc04 	addi	r18,r18,-16
    4378:	ac810e0e 	bge	r21,r18,47b4 <___svfprintf_internal_r+0x16d8>
    437c:	18c00404 	addi	r3,r3,16
    4380:	10800044 	addi	r2,r2,1
    4384:	45000015 	stw	r20,0(r8)
    4388:	45400115 	stw	r21,4(r8)
    438c:	d8c02015 	stw	r3,128(sp)
    4390:	d8801f15 	stw	r2,124(sp)
    4394:	e0bff60e 	bge	fp,r2,4370 <__alt_mem_Flash_flash_data+0xf4004370>
    4398:	9809883a 	mov	r4,r19
    439c:	b80b883a 	mov	r5,r23
    43a0:	b00d883a 	mov	r6,r22
    43a4:	000c2380 	call	c238 <__ssprint_r>
    43a8:	103c141e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    43ac:	d8c02017 	ldw	r3,128(sp)
    43b0:	d8801f17 	ldw	r2,124(sp)
    43b4:	da000404 	addi	r8,sp,16
    43b8:	003fee06 	br	4374 <__alt_mem_Flash_flash_data+0xf4004374>
    43bc:	d9002f17 	ldw	r4,188(sp)
    43c0:	b80b883a 	mov	r5,r23
    43c4:	b00d883a 	mov	r6,r22
    43c8:	000c2380 	call	c238 <__ssprint_r>
    43cc:	103c0b1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    43d0:	d8c02017 	ldw	r3,128(sp)
    43d4:	d8802787 	ldb	r2,158(sp)
    43d8:	da000404 	addi	r8,sp,16
    43dc:	003cb506 	br	36b4 <__alt_mem_Flash_flash_data+0xf40036b4>
    43e0:	657fffc4 	addi	r21,r12,-1
    43e4:	057f750e 	bge	zero,r21,41bc <__alt_mem_Flash_flash_data+0xf40041bc>
    43e8:	07000404 	movi	fp,16
    43ec:	e542ed0e 	bge	fp,r21,4fa4 <___svfprintf_internal_r+0x1ec8>
    43f0:	010000b4 	movhi	r4,2
    43f4:	213ec384 	addi	r4,r4,-1266
    43f8:	d9002b15 	stw	r4,172(sp)
    43fc:	01c001c4 	movi	r7,7
    4400:	dcc02f17 	ldw	r19,188(sp)
    4404:	00000306 	br	4414 <___svfprintf_internal_r+0x1338>
    4408:	ad7ffc04 	addi	r21,r21,-16
    440c:	94800204 	addi	r18,r18,8
    4410:	e540130e 	bge	fp,r21,4460 <___svfprintf_internal_r+0x1384>
    4414:	18c00404 	addi	r3,r3,16
    4418:	84000044 	addi	r16,r16,1
    441c:	95000015 	stw	r20,0(r18)
    4420:	97000115 	stw	fp,4(r18)
    4424:	d8c02015 	stw	r3,128(sp)
    4428:	dc001f15 	stw	r16,124(sp)
    442c:	3c3ff60e 	bge	r7,r16,4408 <__alt_mem_Flash_flash_data+0xf4004408>
    4430:	9809883a 	mov	r4,r19
    4434:	b80b883a 	mov	r5,r23
    4438:	b00d883a 	mov	r6,r22
    443c:	d9c03e15 	stw	r7,248(sp)
    4440:	000c2380 	call	c238 <__ssprint_r>
    4444:	d9c03e17 	ldw	r7,248(sp)
    4448:	103bec1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    444c:	ad7ffc04 	addi	r21,r21,-16
    4450:	d8c02017 	ldw	r3,128(sp)
    4454:	dc001f17 	ldw	r16,124(sp)
    4458:	dc800404 	addi	r18,sp,16
    445c:	e57fed16 	blt	fp,r21,4414 <__alt_mem_Flash_flash_data+0xf4004414>
    4460:	dac02b17 	ldw	r11,172(sp)
    4464:	1d47883a 	add	r3,r3,r21
    4468:	84000044 	addi	r16,r16,1
    446c:	92c00015 	stw	r11,0(r18)
    4470:	95400115 	stw	r21,4(r18)
    4474:	d8c02015 	stw	r3,128(sp)
    4478:	dc001f15 	stw	r16,124(sp)
    447c:	008001c4 	movi	r2,7
    4480:	143f4d0e 	bge	r2,r16,41b8 <__alt_mem_Flash_flash_data+0xf40041b8>
    4484:	d9002f17 	ldw	r4,188(sp)
    4488:	b80b883a 	mov	r5,r23
    448c:	b00d883a 	mov	r6,r22
    4490:	000c2380 	call	c238 <__ssprint_r>
    4494:	103bd91e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4498:	d8c02017 	ldw	r3,128(sp)
    449c:	dc001f17 	ldw	r16,124(sp)
    44a0:	dc800404 	addi	r18,sp,16
    44a4:	003f4506 	br	41bc <__alt_mem_Flash_flash_data+0xf40041bc>
    44a8:	00800084 	movi	r2,2
    44ac:	9f06b03a 	or	r3,r19,fp
    44b0:	003d5706 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    44b4:	1cc00017 	ldw	r19,0(r3)
    44b8:	dac02d17 	ldw	r11,180(sp)
    44bc:	9839d7fa 	srai	fp,r19,31
    44c0:	5ac00104 	addi	r11,r11,4
    44c4:	dac02d15 	stw	r11,180(sp)
    44c8:	e005883a 	mov	r2,fp
    44cc:	003c0306 	br	34dc <__alt_mem_Flash_flash_data+0xf40034dc>
    44d0:	dac02d17 	ldw	r11,180(sp)
    44d4:	0039883a 	mov	fp,zero
    44d8:	0005883a 	mov	r2,zero
    44dc:	5cc00017 	ldw	r19,0(r11)
    44e0:	5ac00104 	addi	r11,r11,4
    44e4:	dac02d15 	stw	r11,180(sp)
    44e8:	9807883a 	mov	r3,r19
    44ec:	003d4806 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    44f0:	db002d17 	ldw	r12,180(sp)
    44f4:	14c00017 	ldw	r19,0(r2)
    44f8:	0039883a 	mov	fp,zero
    44fc:	63000104 	addi	r12,r12,4
    4500:	db002d15 	stw	r12,180(sp)
    4504:	00800044 	movi	r2,1
    4508:	9807883a 	mov	r3,r19
    450c:	003d4006 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    4510:	d9002f17 	ldw	r4,188(sp)
    4514:	b80b883a 	mov	r5,r23
    4518:	b00d883a 	mov	r6,r22
    451c:	000c2380 	call	c238 <__ssprint_r>
    4520:	103bb61e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4524:	d8c02017 	ldw	r3,128(sp)
    4528:	da000404 	addi	r8,sp,16
    452c:	db003117 	ldw	r12,196(sp)
    4530:	dac03417 	ldw	r11,208(sp)
    4534:	d8802617 	ldw	r2,152(sp)
    4538:	62e5883a 	add	r18,r12,r11
    453c:	db003317 	ldw	r12,204(sp)
    4540:	13000216 	blt	r2,r12,454c <___svfprintf_internal_r+0x1470>
    4544:	8900004c 	andi	r4,r17,1
    4548:	20000c26 	beq	r4,zero,457c <___svfprintf_internal_r+0x14a0>
    454c:	dac03917 	ldw	r11,228(sp)
    4550:	d9001f17 	ldw	r4,124(sp)
    4554:	db003517 	ldw	r12,212(sp)
    4558:	1ac7883a 	add	r3,r3,r11
    455c:	21000044 	addi	r4,r4,1
    4560:	43000015 	stw	r12,0(r8)
    4564:	42c00115 	stw	r11,4(r8)
    4568:	d8c02015 	stw	r3,128(sp)
    456c:	d9001f15 	stw	r4,124(sp)
    4570:	014001c4 	movi	r5,7
    4574:	2901b716 	blt	r5,r4,4c54 <___svfprintf_internal_r+0x1b78>
    4578:	42000204 	addi	r8,r8,8
    457c:	dac03317 	ldw	r11,204(sp)
    4580:	8489c83a 	sub	r4,r16,r18
    4584:	5885c83a 	sub	r2,r11,r2
    4588:	1021883a 	mov	r16,r2
    458c:	2080010e 	bge	r4,r2,4594 <___svfprintf_internal_r+0x14b8>
    4590:	2021883a 	mov	r16,r4
    4594:	04000a0e 	bge	zero,r16,45c0 <___svfprintf_internal_r+0x14e4>
    4598:	d9001f17 	ldw	r4,124(sp)
    459c:	1c07883a 	add	r3,r3,r16
    45a0:	44800015 	stw	r18,0(r8)
    45a4:	21000044 	addi	r4,r4,1
    45a8:	44000115 	stw	r16,4(r8)
    45ac:	d8c02015 	stw	r3,128(sp)
    45b0:	d9001f15 	stw	r4,124(sp)
    45b4:	014001c4 	movi	r5,7
    45b8:	2901bf16 	blt	r5,r4,4cb8 <___svfprintf_internal_r+0x1bdc>
    45bc:	42000204 	addi	r8,r8,8
    45c0:	8001bb16 	blt	r16,zero,4cb0 <___svfprintf_internal_r+0x1bd4>
    45c4:	1421c83a 	sub	r16,r2,r16
    45c8:	043c990e 	bge	zero,r16,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    45cc:	04800404 	movi	r18,16
    45d0:	d8801f17 	ldw	r2,124(sp)
    45d4:	943f0b0e 	bge	r18,r16,4204 <__alt_mem_Flash_flash_data+0xf4004204>
    45d8:	014000b4 	movhi	r5,2
    45dc:	297ec384 	addi	r5,r5,-1266
    45e0:	d9402b15 	stw	r5,172(sp)
    45e4:	054001c4 	movi	r21,7
    45e8:	dcc02f17 	ldw	r19,188(sp)
    45ec:	00000306 	br	45fc <___svfprintf_internal_r+0x1520>
    45f0:	42000204 	addi	r8,r8,8
    45f4:	843ffc04 	addi	r16,r16,-16
    45f8:	943f050e 	bge	r18,r16,4210 <__alt_mem_Flash_flash_data+0xf4004210>
    45fc:	18c00404 	addi	r3,r3,16
    4600:	10800044 	addi	r2,r2,1
    4604:	45000015 	stw	r20,0(r8)
    4608:	44800115 	stw	r18,4(r8)
    460c:	d8c02015 	stw	r3,128(sp)
    4610:	d8801f15 	stw	r2,124(sp)
    4614:	a8bff60e 	bge	r21,r2,45f0 <__alt_mem_Flash_flash_data+0xf40045f0>
    4618:	9809883a 	mov	r4,r19
    461c:	b80b883a 	mov	r5,r23
    4620:	b00d883a 	mov	r6,r22
    4624:	000c2380 	call	c238 <__ssprint_r>
    4628:	103b741e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    462c:	d8c02017 	ldw	r3,128(sp)
    4630:	d8801f17 	ldw	r2,124(sp)
    4634:	da000404 	addi	r8,sp,16
    4638:	003fee06 	br	45f4 <__alt_mem_Flash_flash_data+0xf40045f4>
    463c:	8888703a 	and	r4,r17,r2
    4640:	203eb31e 	bne	r4,zero,4110 <__alt_mem_Flash_flash_data+0xf4004110>
    4644:	dc001f17 	ldw	r16,124(sp)
    4648:	db003117 	ldw	r12,196(sp)
    464c:	40800115 	stw	r2,4(r8)
    4650:	84000044 	addi	r16,r16,1
    4654:	43000015 	stw	r12,0(r8)
    4658:	d8c02015 	stw	r3,128(sp)
    465c:	dc001f15 	stw	r16,124(sp)
    4660:	008001c4 	movi	r2,7
    4664:	143f8716 	blt	r2,r16,4484 <__alt_mem_Flash_flash_data+0xf4004484>
    4668:	44800204 	addi	r18,r8,8
    466c:	003ed306 	br	41bc <__alt_mem_Flash_flash_data+0xf40041bc>
    4670:	d9002f17 	ldw	r4,188(sp)
    4674:	b80b883a 	mov	r5,r23
    4678:	b00d883a 	mov	r6,r22
    467c:	000c2380 	call	c238 <__ssprint_r>
    4680:	103b5e1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4684:	d8c02017 	ldw	r3,128(sp)
    4688:	dc001f17 	ldw	r16,124(sp)
    468c:	da000404 	addi	r8,sp,16
    4690:	003eaa06 	br	413c <__alt_mem_Flash_flash_data+0xf400413c>
    4694:	d9002f17 	ldw	r4,188(sp)
    4698:	b80b883a 	mov	r5,r23
    469c:	b00d883a 	mov	r6,r22
    46a0:	000c2380 	call	c238 <__ssprint_r>
    46a4:	103b551e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    46a8:	d8c02017 	ldw	r3,128(sp)
    46ac:	dc001f17 	ldw	r16,124(sp)
    46b0:	dc800404 	addi	r18,sp,16
    46b4:	003eac06 	br	4168 <__alt_mem_Flash_flash_data+0xf4004168>
    46b8:	d9002f17 	ldw	r4,188(sp)
    46bc:	b80b883a 	mov	r5,r23
    46c0:	b00d883a 	mov	r6,r22
    46c4:	000c2380 	call	c238 <__ssprint_r>
    46c8:	103b4c1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    46cc:	d8c02017 	ldw	r3,128(sp)
    46d0:	da000404 	addi	r8,sp,16
    46d4:	003c1506 	br	372c <__alt_mem_Flash_flash_data+0xf400372c>
    46d8:	da004015 	stw	r8,256(sp)
    46dc:	da403f15 	stw	r9,252(sp)
    46e0:	000bf900 	call	bf90 <__fpclassifyd>
    46e4:	da004017 	ldw	r8,256(sp)
    46e8:	da403f17 	ldw	r9,252(sp)
    46ec:	1000951e 	bne	r2,zero,4944 <___svfprintf_internal_r+0x1868>
    46f0:	008011c4 	movi	r2,71
    46f4:	1400fb16 	blt	r2,r16,4ae4 <___svfprintf_internal_r+0x1a08>
    46f8:	030000b4 	movhi	r12,2
    46fc:	633eb504 	addi	r12,r12,-1324
    4700:	db003115 	stw	r12,196(sp)
    4704:	00c000c4 	movi	r3,3
    4708:	00bfdfc4 	movi	r2,-129
    470c:	d8c02a15 	stw	r3,168(sp)
    4710:	88a2703a 	and	r17,r17,r2
    4714:	dd402783 	ldbu	r21,158(sp)
    4718:	dcc02d15 	stw	r19,180(sp)
    471c:	1825883a 	mov	r18,r3
    4720:	d8003215 	stw	zero,200(sp)
    4724:	d8003415 	stw	zero,208(sp)
    4728:	003b9806 	br	358c <__alt_mem_Flash_flash_data+0xf400358c>
    472c:	1c000007 	ldb	r16,0(r3)
    4730:	1805883a 	mov	r2,r3
    4734:	003abf06 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    4738:	00800084 	movi	r2,2
    473c:	003cb406 	br	3a10 <__alt_mem_Flash_flash_data+0xf4003a10>
    4740:	88c0100c 	andi	r3,r17,64
    4744:	1800f626 	beq	r3,zero,4b20 <___svfprintf_internal_r+0x1a44>
    4748:	dac02d17 	ldw	r11,180(sp)
    474c:	14c0000b 	ldhu	r19,0(r2)
    4750:	0039883a 	mov	fp,zero
    4754:	5ac00104 	addi	r11,r11,4
    4758:	dac02d15 	stw	r11,180(sp)
    475c:	003cbd06 	br	3a54 <__alt_mem_Flash_flash_data+0xf4003a54>
    4760:	8880040c 	andi	r2,r17,16
    4764:	1000091e 	bne	r2,zero,478c <___svfprintf_internal_r+0x16b0>
    4768:	8c40100c 	andi	r17,r17,64
    476c:	88000726 	beq	r17,zero,478c <___svfprintf_internal_r+0x16b0>
    4770:	db002d17 	ldw	r12,180(sp)
    4774:	dac03017 	ldw	r11,192(sp)
    4778:	60800017 	ldw	r2,0(r12)
    477c:	63000104 	addi	r12,r12,4
    4780:	db002d15 	stw	r12,180(sp)
    4784:	12c0000d 	sth	r11,0(r2)
    4788:	003a8006 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    478c:	db002d17 	ldw	r12,180(sp)
    4790:	dac03017 	ldw	r11,192(sp)
    4794:	60800017 	ldw	r2,0(r12)
    4798:	63000104 	addi	r12,r12,4
    479c:	db002d15 	stw	r12,180(sp)
    47a0:	12c00015 	stw	r11,0(r2)
    47a4:	003a7906 	br	318c <__alt_mem_Flash_flash_data+0xf400318c>
    47a8:	010000b4 	movhi	r4,2
    47ac:	213ec384 	addi	r4,r4,-1266
    47b0:	d9002b15 	stw	r4,172(sp)
    47b4:	dac02b17 	ldw	r11,172(sp)
    47b8:	1c87883a 	add	r3,r3,r18
    47bc:	10800044 	addi	r2,r2,1
    47c0:	42c00015 	stw	r11,0(r8)
    47c4:	44800115 	stw	r18,4(r8)
    47c8:	d8c02015 	stw	r3,128(sp)
    47cc:	d8801f15 	stw	r2,124(sp)
    47d0:	010001c4 	movi	r4,7
    47d4:	20bf4e16 	blt	r4,r2,4510 <__alt_mem_Flash_flash_data+0xf4004510>
    47d8:	42000204 	addi	r8,r8,8
    47dc:	003f5306 	br	452c <__alt_mem_Flash_flash_data+0xf400452c>
    47e0:	010000b4 	movhi	r4,2
    47e4:	213ec384 	addi	r4,r4,-1266
    47e8:	d9002b15 	stw	r4,172(sp)
    47ec:	003bf906 	br	37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    47f0:	d9002f17 	ldw	r4,188(sp)
    47f4:	b80b883a 	mov	r5,r23
    47f8:	b00d883a 	mov	r6,r22
    47fc:	000c2380 	call	c238 <__ssprint_r>
    4800:	103afe1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4804:	d8c02017 	ldw	r3,128(sp)
    4808:	da000404 	addi	r8,sp,16
    480c:	003dc606 	br	3f28 <__alt_mem_Flash_flash_data+0xf4003f28>
    4810:	d8801f17 	ldw	r2,124(sp)
    4814:	030000b4 	movhi	r12,2
    4818:	01000044 	movi	r4,1
    481c:	18c00044 	addi	r3,r3,1
    4820:	10800044 	addi	r2,r2,1
    4824:	633ec304 	addi	r12,r12,-1268
    4828:	41000115 	stw	r4,4(r8)
    482c:	43000015 	stw	r12,0(r8)
    4830:	d8c02015 	stw	r3,128(sp)
    4834:	d8801f15 	stw	r2,124(sp)
    4838:	010001c4 	movi	r4,7
    483c:	2080ad16 	blt	r4,r2,4af4 <___svfprintf_internal_r+0x1a18>
    4840:	42000204 	addi	r8,r8,8
    4844:	8000041e 	bne	r16,zero,4858 <___svfprintf_internal_r+0x177c>
    4848:	dac03317 	ldw	r11,204(sp)
    484c:	5800021e 	bne	r11,zero,4858 <___svfprintf_internal_r+0x177c>
    4850:	8880004c 	andi	r2,r17,1
    4854:	103bf626 	beq	r2,zero,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    4858:	db003917 	ldw	r12,228(sp)
    485c:	d8801f17 	ldw	r2,124(sp)
    4860:	dac03517 	ldw	r11,212(sp)
    4864:	1b07883a 	add	r3,r3,r12
    4868:	10800044 	addi	r2,r2,1
    486c:	42c00015 	stw	r11,0(r8)
    4870:	43000115 	stw	r12,4(r8)
    4874:	d8c02015 	stw	r3,128(sp)
    4878:	d8801f15 	stw	r2,124(sp)
    487c:	010001c4 	movi	r4,7
    4880:	20818616 	blt	r4,r2,4e9c <___svfprintf_internal_r+0x1dc0>
    4884:	42000204 	addi	r8,r8,8
    4888:	0421c83a 	sub	r16,zero,r16
    488c:	0400bc0e 	bge	zero,r16,4b80 <___svfprintf_internal_r+0x1aa4>
    4890:	04800404 	movi	r18,16
    4894:	9400f80e 	bge	r18,r16,4c78 <___svfprintf_internal_r+0x1b9c>
    4898:	010000b4 	movhi	r4,2
    489c:	213ec384 	addi	r4,r4,-1266
    48a0:	d9002b15 	stw	r4,172(sp)
    48a4:	054001c4 	movi	r21,7
    48a8:	dcc02f17 	ldw	r19,188(sp)
    48ac:	00000306 	br	48bc <___svfprintf_internal_r+0x17e0>
    48b0:	42000204 	addi	r8,r8,8
    48b4:	843ffc04 	addi	r16,r16,-16
    48b8:	9400f20e 	bge	r18,r16,4c84 <___svfprintf_internal_r+0x1ba8>
    48bc:	18c00404 	addi	r3,r3,16
    48c0:	10800044 	addi	r2,r2,1
    48c4:	45000015 	stw	r20,0(r8)
    48c8:	44800115 	stw	r18,4(r8)
    48cc:	d8c02015 	stw	r3,128(sp)
    48d0:	d8801f15 	stw	r2,124(sp)
    48d4:	a8bff60e 	bge	r21,r2,48b0 <__alt_mem_Flash_flash_data+0xf40048b0>
    48d8:	9809883a 	mov	r4,r19
    48dc:	b80b883a 	mov	r5,r23
    48e0:	b00d883a 	mov	r6,r22
    48e4:	000c2380 	call	c238 <__ssprint_r>
    48e8:	103ac41e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    48ec:	d8c02017 	ldw	r3,128(sp)
    48f0:	d8801f17 	ldw	r2,124(sp)
    48f4:	da000404 	addi	r8,sp,16
    48f8:	003fee06 	br	48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    48fc:	db002e17 	ldw	r12,184(sp)
    4900:	1805883a 	mov	r2,r3
    4904:	dac02d15 	stw	r11,180(sp)
    4908:	0319c83a 	sub	r12,zero,r12
    490c:	db002e15 	stw	r12,184(sp)
    4910:	003acf06 	br	3450 <__alt_mem_Flash_flash_data+0xf4003450>
    4914:	18800044 	addi	r2,r3,1
    4918:	8c400814 	ori	r17,r17,32
    491c:	1c000047 	ldb	r16,1(r3)
    4920:	003a4406 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    4924:	d9002f17 	ldw	r4,188(sp)
    4928:	b80b883a 	mov	r5,r23
    492c:	b00d883a 	mov	r6,r22
    4930:	000c2380 	call	c238 <__ssprint_r>
    4934:	103ab11e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4938:	d8c02017 	ldw	r3,128(sp)
    493c:	da000404 	addi	r8,sp,16
    4940:	003d8a06 	br	3f6c <__alt_mem_Flash_flash_data+0xf4003f6c>
    4944:	057ff7c4 	movi	r21,-33
    4948:	00bfffc4 	movi	r2,-1
    494c:	856a703a 	and	r21,r16,r21
    4950:	48807126 	beq	r9,r2,4b18 <___svfprintf_internal_r+0x1a3c>
    4954:	008011c4 	movi	r2,71
    4958:	a8814d26 	beq	r21,r2,4e90 <___svfprintf_internal_r+0x1db4>
    495c:	db003817 	ldw	r12,224(sp)
    4960:	8ac04014 	ori	r11,r17,256
    4964:	dac02d15 	stw	r11,180(sp)
    4968:	60015616 	blt	r12,zero,4ec4 <___svfprintf_internal_r+0x1de8>
    496c:	dc803817 	ldw	r18,224(sp)
    4970:	d8002a05 	stb	zero,168(sp)
    4974:	00801984 	movi	r2,102
    4978:	80808c26 	beq	r16,r2,4bac <___svfprintf_internal_r+0x1ad0>
    497c:	00801184 	movi	r2,70
    4980:	80808a26 	beq	r16,r2,4bac <___svfprintf_internal_r+0x1ad0>
    4984:	00801144 	movi	r2,69
    4988:	a8815226 	beq	r21,r2,4ed4 <___svfprintf_internal_r+0x1df8>
    498c:	4839883a 	mov	fp,r9
    4990:	d8802604 	addi	r2,sp,152
    4994:	d8800115 	stw	r2,4(sp)
    4998:	d9002f17 	ldw	r4,188(sp)
    499c:	d8802504 	addi	r2,sp,148
    49a0:	d9403717 	ldw	r5,220(sp)
    49a4:	d8800215 	stw	r2,8(sp)
    49a8:	d8802104 	addi	r2,sp,132
    49ac:	df000015 	stw	fp,0(sp)
    49b0:	d8800315 	stw	r2,12(sp)
    49b4:	900d883a 	mov	r6,r18
    49b8:	01c00084 	movi	r7,2
    49bc:	da004015 	stw	r8,256(sp)
    49c0:	da403f15 	stw	r9,252(sp)
    49c4:	00073f00 	call	73f0 <_dtoa_r>
    49c8:	d8803115 	stw	r2,196(sp)
    49cc:	008019c4 	movi	r2,103
    49d0:	da004017 	ldw	r8,256(sp)
    49d4:	da403f17 	ldw	r9,252(sp)
    49d8:	80800226 	beq	r16,r2,49e4 <___svfprintf_internal_r+0x1908>
    49dc:	008011c4 	movi	r2,71
    49e0:	8080841e 	bne	r16,r2,4bf4 <___svfprintf_internal_r+0x1b18>
    49e4:	8880004c 	andi	r2,r17,1
    49e8:	10014f26 	beq	r2,zero,4f28 <___svfprintf_internal_r+0x1e4c>
    49ec:	db003117 	ldw	r12,196(sp)
    49f0:	6715883a 	add	r10,r12,fp
    49f4:	d9003717 	ldw	r4,220(sp)
    49f8:	900b883a 	mov	r5,r18
    49fc:	000d883a 	mov	r6,zero
    4a00:	000f883a 	mov	r7,zero
    4a04:	da004015 	stw	r8,256(sp)
    4a08:	da403f15 	stw	r9,252(sp)
    4a0c:	da803e15 	stw	r10,248(sp)
    4a10:	0010fdc0 	call	10fdc <__eqdf2>
    4a14:	da004017 	ldw	r8,256(sp)
    4a18:	da403f17 	ldw	r9,252(sp)
    4a1c:	da803e17 	ldw	r10,248(sp)
    4a20:	1000d926 	beq	r2,zero,4d88 <___svfprintf_internal_r+0x1cac>
    4a24:	d8802117 	ldw	r2,132(sp)
    4a28:	1280062e 	bgeu	r2,r10,4a44 <___svfprintf_internal_r+0x1968>
    4a2c:	01000c04 	movi	r4,48
    4a30:	10c00044 	addi	r3,r2,1
    4a34:	d8c02115 	stw	r3,132(sp)
    4a38:	11000005 	stb	r4,0(r2)
    4a3c:	d8802117 	ldw	r2,132(sp)
    4a40:	12bffb36 	bltu	r2,r10,4a30 <__alt_mem_Flash_flash_data+0xf4004a30>
    4a44:	db003117 	ldw	r12,196(sp)
    4a48:	1305c83a 	sub	r2,r2,r12
    4a4c:	d8803315 	stw	r2,204(sp)
    4a50:	008011c4 	movi	r2,71
    4a54:	a880b626 	beq	r21,r2,4d30 <___svfprintf_internal_r+0x1c54>
    4a58:	00801944 	movi	r2,101
    4a5c:	14017c0e 	bge	r2,r16,5050 <___svfprintf_internal_r+0x1f74>
    4a60:	00801984 	movi	r2,102
    4a64:	80812626 	beq	r16,r2,4f00 <___svfprintf_internal_r+0x1e24>
    4a68:	db002617 	ldw	r12,152(sp)
    4a6c:	db003415 	stw	r12,208(sp)
    4a70:	db003417 	ldw	r12,208(sp)
    4a74:	dac03317 	ldw	r11,204(sp)
    4a78:	62c11816 	blt	r12,r11,4edc <___svfprintf_internal_r+0x1e00>
    4a7c:	8c40004c 	andi	r17,r17,1
    4a80:	88013b1e 	bne	r17,zero,4f70 <___svfprintf_internal_r+0x1e94>
    4a84:	6005883a 	mov	r2,r12
    4a88:	60012516 	blt	r12,zero,4f20 <___svfprintf_internal_r+0x1e44>
    4a8c:	dc803417 	ldw	r18,208(sp)
    4a90:	df002a07 	ldb	fp,168(sp)
    4a94:	e000b01e 	bne	fp,zero,4d58 <___svfprintf_internal_r+0x1c7c>
    4a98:	dc402d17 	ldw	r17,180(sp)
    4a9c:	dd402783 	ldbu	r21,158(sp)
    4aa0:	d8802a15 	stw	r2,168(sp)
    4aa4:	dcc02d15 	stw	r19,180(sp)
    4aa8:	d8003215 	stw	zero,200(sp)
    4aac:	003ab706 	br	358c <__alt_mem_Flash_flash_data+0xf400358c>
    4ab0:	008000b4 	movhi	r2,2
    4ab4:	10beb304 	addi	r2,r2,-1332
    4ab8:	d8803115 	stw	r2,196(sp)
    4abc:	003bbb06 	br	39ac <__alt_mem_Flash_flash_data+0xf40039ac>
    4ac0:	d9002f17 	ldw	r4,188(sp)
    4ac4:	04001004 	movi	r16,64
    4ac8:	800b883a 	mov	r5,r16
    4acc:	0009e400 	call	9e40 <_malloc_r>
    4ad0:	b8800015 	stw	r2,0(r23)
    4ad4:	b8800415 	stw	r2,16(r23)
    4ad8:	10015f26 	beq	r2,zero,5058 <___svfprintf_internal_r+0x1f7c>
    4adc:	bc000515 	stw	r16,20(r23)
    4ae0:	00399806 	br	3144 <__alt_mem_Flash_flash_data+0xf4003144>
    4ae4:	008000b4 	movhi	r2,2
    4ae8:	10beb604 	addi	r2,r2,-1320
    4aec:	d8803115 	stw	r2,196(sp)
    4af0:	003f0406 	br	4704 <__alt_mem_Flash_flash_data+0xf4004704>
    4af4:	d9002f17 	ldw	r4,188(sp)
    4af8:	b80b883a 	mov	r5,r23
    4afc:	b00d883a 	mov	r6,r22
    4b00:	000c2380 	call	c238 <__ssprint_r>
    4b04:	103a3d1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4b08:	dc002617 	ldw	r16,152(sp)
    4b0c:	d8c02017 	ldw	r3,128(sp)
    4b10:	da000404 	addi	r8,sp,16
    4b14:	003f4b06 	br	4844 <__alt_mem_Flash_flash_data+0xf4004844>
    4b18:	02400184 	movi	r9,6
    4b1c:	003f8f06 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    4b20:	db002d17 	ldw	r12,180(sp)
    4b24:	14c00017 	ldw	r19,0(r2)
    4b28:	0039883a 	mov	fp,zero
    4b2c:	63000104 	addi	r12,r12,4
    4b30:	db002d15 	stw	r12,180(sp)
    4b34:	003bc706 	br	3a54 <__alt_mem_Flash_flash_data+0xf4003a54>
    4b38:	d8c03117 	ldw	r3,196(sp)
    4b3c:	b0e5c83a 	sub	r18,r22,r3
    4b40:	003a8d06 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    4b44:	da004015 	stw	r8,256(sp)
    4b48:	00030440 	call	3044 <strlen>
    4b4c:	1025883a 	mov	r18,r2
    4b50:	da004017 	ldw	r8,256(sp)
    4b54:	903bf20e 	bge	r18,zero,3b20 <__alt_mem_Flash_flash_data+0xf4003b20>
    4b58:	0005883a 	mov	r2,zero
    4b5c:	003bf006 	br	3b20 <__alt_mem_Flash_flash_data+0xf4003b20>
    4b60:	d9002f17 	ldw	r4,188(sp)
    4b64:	b80b883a 	mov	r5,r23
    4b68:	b00d883a 	mov	r6,r22
    4b6c:	000c2380 	call	c238 <__ssprint_r>
    4b70:	103a221e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4b74:	d8c02017 	ldw	r3,128(sp)
    4b78:	d8801f17 	ldw	r2,124(sp)
    4b7c:	da000404 	addi	r8,sp,16
    4b80:	db003317 	ldw	r12,204(sp)
    4b84:	dac03117 	ldw	r11,196(sp)
    4b88:	10800044 	addi	r2,r2,1
    4b8c:	1b07883a 	add	r3,r3,r12
    4b90:	42c00015 	stw	r11,0(r8)
    4b94:	43000115 	stw	r12,4(r8)
    4b98:	d8c02015 	stw	r3,128(sp)
    4b9c:	d8801f15 	stw	r2,124(sp)
    4ba0:	010001c4 	movi	r4,7
    4ba4:	20bb210e 	bge	r4,r2,382c <__alt_mem_Flash_flash_data+0xf400382c>
    4ba8:	003da206 	br	4234 <__alt_mem_Flash_flash_data+0xf4004234>
    4bac:	d8802604 	addi	r2,sp,152
    4bb0:	d8800115 	stw	r2,4(sp)
    4bb4:	d9002f17 	ldw	r4,188(sp)
    4bb8:	d8802504 	addi	r2,sp,148
    4bbc:	d9403717 	ldw	r5,220(sp)
    4bc0:	d8800215 	stw	r2,8(sp)
    4bc4:	d8802104 	addi	r2,sp,132
    4bc8:	da400015 	stw	r9,0(sp)
    4bcc:	d8800315 	stw	r2,12(sp)
    4bd0:	900d883a 	mov	r6,r18
    4bd4:	01c000c4 	movi	r7,3
    4bd8:	da004015 	stw	r8,256(sp)
    4bdc:	da403f15 	stw	r9,252(sp)
    4be0:	00073f00 	call	73f0 <_dtoa_r>
    4be4:	da403f17 	ldw	r9,252(sp)
    4be8:	da004017 	ldw	r8,256(sp)
    4bec:	d8803115 	stw	r2,196(sp)
    4bf0:	4839883a 	mov	fp,r9
    4bf4:	dac03117 	ldw	r11,196(sp)
    4bf8:	00801184 	movi	r2,70
    4bfc:	5f15883a 	add	r10,r11,fp
    4c00:	a8bf7c1e 	bne	r21,r2,49f4 <__alt_mem_Flash_flash_data+0xf40049f4>
    4c04:	59000007 	ldb	r4,0(r11)
    4c08:	00800c04 	movi	r2,48
    4c0c:	2080c826 	beq	r4,r2,4f30 <___svfprintf_internal_r+0x1e54>
    4c10:	d8c02617 	ldw	r3,152(sp)
    4c14:	50d5883a 	add	r10,r10,r3
    4c18:	003f7606 	br	49f4 <__alt_mem_Flash_flash_data+0xf40049f4>
    4c1c:	010000b4 	movhi	r4,2
    4c20:	213ec784 	addi	r4,r4,-1250
    4c24:	d9003615 	stw	r4,216(sp)
    4c28:	003a9706 	br	3688 <__alt_mem_Flash_flash_data+0xf4003688>
    4c2c:	0025883a 	mov	r18,zero
    4c30:	003dc306 	br	4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4c34:	d9002f17 	ldw	r4,188(sp)
    4c38:	b80b883a 	mov	r5,r23
    4c3c:	b00d883a 	mov	r6,r22
    4c40:	000c2380 	call	c238 <__ssprint_r>
    4c44:	1039ed1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4c48:	d8c02017 	ldw	r3,128(sp)
    4c4c:	da000404 	addi	r8,sp,16
    4c50:	003dba06 	br	433c <__alt_mem_Flash_flash_data+0xf400433c>
    4c54:	d9002f17 	ldw	r4,188(sp)
    4c58:	b80b883a 	mov	r5,r23
    4c5c:	b00d883a 	mov	r6,r22
    4c60:	000c2380 	call	c238 <__ssprint_r>
    4c64:	1039e51e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4c68:	d8802617 	ldw	r2,152(sp)
    4c6c:	d8c02017 	ldw	r3,128(sp)
    4c70:	da000404 	addi	r8,sp,16
    4c74:	003e4106 	br	457c <__alt_mem_Flash_flash_data+0xf400457c>
    4c78:	030000b4 	movhi	r12,2
    4c7c:	633ec384 	addi	r12,r12,-1266
    4c80:	db002b15 	stw	r12,172(sp)
    4c84:	dac02b17 	ldw	r11,172(sp)
    4c88:	1c07883a 	add	r3,r3,r16
    4c8c:	10800044 	addi	r2,r2,1
    4c90:	42c00015 	stw	r11,0(r8)
    4c94:	44000115 	stw	r16,4(r8)
    4c98:	d8c02015 	stw	r3,128(sp)
    4c9c:	d8801f15 	stw	r2,124(sp)
    4ca0:	010001c4 	movi	r4,7
    4ca4:	20bfae16 	blt	r4,r2,4b60 <__alt_mem_Flash_flash_data+0xf4004b60>
    4ca8:	42000204 	addi	r8,r8,8
    4cac:	003fb406 	br	4b80 <__alt_mem_Flash_flash_data+0xf4004b80>
    4cb0:	0021883a 	mov	r16,zero
    4cb4:	003e4306 	br	45c4 <__alt_mem_Flash_flash_data+0xf40045c4>
    4cb8:	d9002f17 	ldw	r4,188(sp)
    4cbc:	b80b883a 	mov	r5,r23
    4cc0:	b00d883a 	mov	r6,r22
    4cc4:	000c2380 	call	c238 <__ssprint_r>
    4cc8:	1039cc1e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4ccc:	d8802617 	ldw	r2,152(sp)
    4cd0:	db003317 	ldw	r12,204(sp)
    4cd4:	d8c02017 	ldw	r3,128(sp)
    4cd8:	da000404 	addi	r8,sp,16
    4cdc:	6085c83a 	sub	r2,r12,r2
    4ce0:	003e3706 	br	45c0 <__alt_mem_Flash_flash_data+0xf40045c0>
    4ce4:	00800184 	movi	r2,6
    4ce8:	1240012e 	bgeu	r2,r9,4cf0 <___svfprintf_internal_r+0x1c14>
    4cec:	1013883a 	mov	r9,r2
    4cf0:	4825883a 	mov	r18,r9
    4cf4:	4805883a 	mov	r2,r9
    4cf8:	4800a216 	blt	r9,zero,4f84 <___svfprintf_internal_r+0x1ea8>
    4cfc:	d8802a15 	stw	r2,168(sp)
    4d00:	008000b4 	movhi	r2,2
    4d04:	10bec104 	addi	r2,r2,-1276
    4d08:	d8803115 	stw	r2,196(sp)
    4d0c:	dcc02d15 	stw	r19,180(sp)
    4d10:	d8003215 	stw	zero,200(sp)
    4d14:	d8003415 	stw	zero,208(sp)
    4d18:	0005883a 	mov	r2,zero
    4d1c:	003a2206 	br	35a8 <__alt_mem_Flash_flash_data+0xf40035a8>
    4d20:	030000b4 	movhi	r12,2
    4d24:	633ec784 	addi	r12,r12,-1250
    4d28:	db003615 	stw	r12,216(sp)
    4d2c:	003ae506 	br	38c4 <__alt_mem_Flash_flash_data+0xf40038c4>
    4d30:	d8c02617 	ldw	r3,152(sp)
    4d34:	00bfff44 	movi	r2,-3
    4d38:	18801516 	blt	r3,r2,4d90 <___svfprintf_internal_r+0x1cb4>
    4d3c:	48c01416 	blt	r9,r3,4d90 <___svfprintf_internal_r+0x1cb4>
    4d40:	d8c03415 	stw	r3,208(sp)
    4d44:	040019c4 	movi	r16,103
    4d48:	003f4906 	br	4a70 <__alt_mem_Flash_flash_data+0xf4004a70>
    4d4c:	05400b44 	movi	r21,45
    4d50:	dd402785 	stb	r21,158(sp)
    4d54:	003b1006 	br	3998 <__alt_mem_Flash_flash_data+0xf4003998>
    4d58:	00c00b44 	movi	r3,45
    4d5c:	d8802a15 	stw	r2,168(sp)
    4d60:	dc402d17 	ldw	r17,180(sp)
    4d64:	d8c02785 	stb	r3,158(sp)
    4d68:	dcc02d15 	stw	r19,180(sp)
    4d6c:	d8003215 	stw	zero,200(sp)
    4d70:	00800b44 	movi	r2,45
    4d74:	003a0906 	br	359c <__alt_mem_Flash_flash_data+0xf400359c>
    4d78:	010000b4 	movhi	r4,2
    4d7c:	213ec384 	addi	r4,r4,-1266
    4d80:	d9002b15 	stw	r4,172(sp)
    4d84:	003cc306 	br	4094 <__alt_mem_Flash_flash_data+0xf4004094>
    4d88:	5005883a 	mov	r2,r10
    4d8c:	003f2d06 	br	4a44 <__alt_mem_Flash_flash_data+0xf4004a44>
    4d90:	843fff84 	addi	r16,r16,-2
    4d94:	1f3fffc4 	addi	fp,r3,-1
    4d98:	df002615 	stw	fp,152(sp)
    4d9c:	dc0022c5 	stb	r16,139(sp)
    4da0:	e000a016 	blt	fp,zero,5024 <___svfprintf_internal_r+0x1f48>
    4da4:	00800ac4 	movi	r2,43
    4da8:	d8802305 	stb	r2,140(sp)
    4dac:	00800244 	movi	r2,9
    4db0:	1700800e 	bge	r2,fp,4fb4 <___svfprintf_internal_r+0x1ed8>
    4db4:	dd4022c4 	addi	r21,sp,139
    4db8:	dc002b15 	stw	r16,172(sp)
    4dbc:	4025883a 	mov	r18,r8
    4dc0:	a821883a 	mov	r16,r21
    4dc4:	e009883a 	mov	r4,fp
    4dc8:	01400284 	movi	r5,10
    4dcc:	000fe080 	call	fe08 <__modsi3>
    4dd0:	10800c04 	addi	r2,r2,48
    4dd4:	843fffc4 	addi	r16,r16,-1
    4dd8:	e009883a 	mov	r4,fp
    4ddc:	01400284 	movi	r5,10
    4de0:	80800005 	stb	r2,0(r16)
    4de4:	000fdb40 	call	fdb4 <__divsi3>
    4de8:	1039883a 	mov	fp,r2
    4dec:	00800244 	movi	r2,9
    4df0:	173ff416 	blt	r2,fp,4dc4 <__alt_mem_Flash_flash_data+0xf4004dc4>
    4df4:	9011883a 	mov	r8,r18
    4df8:	e0800c04 	addi	r2,fp,48
    4dfc:	8025883a 	mov	r18,r16
    4e00:	913fffc4 	addi	r4,r18,-1
    4e04:	90bfffc5 	stb	r2,-1(r18)
    4e08:	dc002b17 	ldw	r16,172(sp)
    4e0c:	25408e2e 	bgeu	r4,r21,5048 <___svfprintf_internal_r+0x1f6c>
    4e10:	d9402384 	addi	r5,sp,142
    4e14:	2c8bc83a 	sub	r5,r5,r18
    4e18:	d8c02344 	addi	r3,sp,141
    4e1c:	a94b883a 	add	r5,r21,r5
    4e20:	00000106 	br	4e28 <___svfprintf_internal_r+0x1d4c>
    4e24:	20800003 	ldbu	r2,0(r4)
    4e28:	18800005 	stb	r2,0(r3)
    4e2c:	18c00044 	addi	r3,r3,1
    4e30:	21000044 	addi	r4,r4,1
    4e34:	197ffb1e 	bne	r3,r5,4e24 <__alt_mem_Flash_flash_data+0xf4004e24>
    4e38:	d8802304 	addi	r2,sp,140
    4e3c:	1485c83a 	sub	r2,r2,r18
    4e40:	d8c02344 	addi	r3,sp,141
    4e44:	1885883a 	add	r2,r3,r2
    4e48:	dac03317 	ldw	r11,204(sp)
    4e4c:	156bc83a 	sub	r21,r2,r21
    4e50:	dd403a15 	stw	r21,232(sp)
    4e54:	00800044 	movi	r2,1
    4e58:	5d65883a 	add	r18,r11,r21
    4e5c:	12c0770e 	bge	r2,r11,503c <___svfprintf_internal_r+0x1f60>
    4e60:	94800044 	addi	r18,r18,1
    4e64:	9005883a 	mov	r2,r18
    4e68:	90007216 	blt	r18,zero,5034 <___svfprintf_internal_r+0x1f58>
    4e6c:	d8003415 	stw	zero,208(sp)
    4e70:	003f0706 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4e74:	da402a15 	stw	r9,168(sp)
    4e78:	dd402783 	ldbu	r21,158(sp)
    4e7c:	4825883a 	mov	r18,r9
    4e80:	dcc02d15 	stw	r19,180(sp)
    4e84:	d8003215 	stw	zero,200(sp)
    4e88:	d8003415 	stw	zero,208(sp)
    4e8c:	0039bf06 	br	358c <__alt_mem_Flash_flash_data+0xf400358c>
    4e90:	483eb21e 	bne	r9,zero,495c <__alt_mem_Flash_flash_data+0xf400495c>
    4e94:	9013883a 	mov	r9,r18
    4e98:	003eb006 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    4e9c:	d9002f17 	ldw	r4,188(sp)
    4ea0:	b80b883a 	mov	r5,r23
    4ea4:	b00d883a 	mov	r6,r22
    4ea8:	000c2380 	call	c238 <__ssprint_r>
    4eac:	1039531e 	bne	r2,zero,33fc <__alt_mem_Flash_flash_data+0xf40033fc>
    4eb0:	dc002617 	ldw	r16,152(sp)
    4eb4:	d8c02017 	ldw	r3,128(sp)
    4eb8:	d8801f17 	ldw	r2,124(sp)
    4ebc:	da000404 	addi	r8,sp,16
    4ec0:	003e7106 	br	4888 <__alt_mem_Flash_flash_data+0xf4004888>
    4ec4:	00c00b44 	movi	r3,45
    4ec8:	64a0003c 	xorhi	r18,r12,32768
    4ecc:	d8c02a05 	stb	r3,168(sp)
    4ed0:	003ea806 	br	4974 <__alt_mem_Flash_flash_data+0xf4004974>
    4ed4:	4f000044 	addi	fp,r9,1
    4ed8:	003ead06 	br	4990 <__alt_mem_Flash_flash_data+0xf4004990>
    4edc:	d8c03417 	ldw	r3,208(sp)
    4ee0:	00c0410e 	bge	zero,r3,4fe8 <___svfprintf_internal_r+0x1f0c>
    4ee4:	04800044 	movi	r18,1
    4ee8:	dac03317 	ldw	r11,204(sp)
    4eec:	92e5883a 	add	r18,r18,r11
    4ef0:	9005883a 	mov	r2,r18
    4ef4:	903ee60e 	bge	r18,zero,4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4ef8:	0005883a 	mov	r2,zero
    4efc:	003ee406 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4f00:	d8c02617 	ldw	r3,152(sp)
    4f04:	d8c03415 	stw	r3,208(sp)
    4f08:	00c0310e 	bge	zero,r3,4fd0 <___svfprintf_internal_r+0x1ef4>
    4f0c:	48001f1e 	bne	r9,zero,4f8c <___svfprintf_internal_r+0x1eb0>
    4f10:	8c40004c 	andi	r17,r17,1
    4f14:	88001d1e 	bne	r17,zero,4f8c <___svfprintf_internal_r+0x1eb0>
    4f18:	1805883a 	mov	r2,r3
    4f1c:	183edb0e 	bge	r3,zero,4a8c <__alt_mem_Flash_flash_data+0xf4004a8c>
    4f20:	0005883a 	mov	r2,zero
    4f24:	003ed906 	br	4a8c <__alt_mem_Flash_flash_data+0xf4004a8c>
    4f28:	d8802117 	ldw	r2,132(sp)
    4f2c:	003ec506 	br	4a44 <__alt_mem_Flash_flash_data+0xf4004a44>
    4f30:	d9003717 	ldw	r4,220(sp)
    4f34:	900b883a 	mov	r5,r18
    4f38:	000d883a 	mov	r6,zero
    4f3c:	000f883a 	mov	r7,zero
    4f40:	da004015 	stw	r8,256(sp)
    4f44:	da403f15 	stw	r9,252(sp)
    4f48:	da803e15 	stw	r10,248(sp)
    4f4c:	0010fdc0 	call	10fdc <__eqdf2>
    4f50:	da004017 	ldw	r8,256(sp)
    4f54:	da403f17 	ldw	r9,252(sp)
    4f58:	da803e17 	ldw	r10,248(sp)
    4f5c:	103f2c26 	beq	r2,zero,4c10 <__alt_mem_Flash_flash_data+0xf4004c10>
    4f60:	00800044 	movi	r2,1
    4f64:	1707c83a 	sub	r3,r2,fp
    4f68:	d8c02615 	stw	r3,152(sp)
    4f6c:	003f2906 	br	4c14 <__alt_mem_Flash_flash_data+0xf4004c14>
    4f70:	db003417 	ldw	r12,208(sp)
    4f74:	64800044 	addi	r18,r12,1
    4f78:	9005883a 	mov	r2,r18
    4f7c:	903ec40e 	bge	r18,zero,4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4f80:	003fdd06 	br	4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    4f84:	0005883a 	mov	r2,zero
    4f88:	003f5c06 	br	4cfc <__alt_mem_Flash_flash_data+0xf4004cfc>
    4f8c:	dac03417 	ldw	r11,208(sp)
    4f90:	4a400044 	addi	r9,r9,1
    4f94:	5a65883a 	add	r18,r11,r9
    4f98:	9005883a 	mov	r2,r18
    4f9c:	903ebc0e 	bge	r18,zero,4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4fa0:	003fd506 	br	4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    4fa4:	008000b4 	movhi	r2,2
    4fa8:	10bec384 	addi	r2,r2,-1266
    4fac:	d8802b15 	stw	r2,172(sp)
    4fb0:	003d2b06 	br	4460 <__alt_mem_Flash_flash_data+0xf4004460>
    4fb4:	00800c04 	movi	r2,48
    4fb8:	e0c00c04 	addi	r3,fp,48
    4fbc:	d8802345 	stb	r2,141(sp)
    4fc0:	d8c02385 	stb	r3,142(sp)
    4fc4:	d88023c4 	addi	r2,sp,143
    4fc8:	dd4022c4 	addi	r21,sp,139
    4fcc:	003f9e06 	br	4e48 <__alt_mem_Flash_flash_data+0xf4004e48>
    4fd0:	4800081e 	bne	r9,zero,4ff4 <___svfprintf_internal_r+0x1f18>
    4fd4:	8c40004c 	andi	r17,r17,1
    4fd8:	8800061e 	bne	r17,zero,4ff4 <___svfprintf_internal_r+0x1f18>
    4fdc:	00800044 	movi	r2,1
    4fe0:	1025883a 	mov	r18,r2
    4fe4:	003eaa06 	br	4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    4fe8:	04800084 	movi	r18,2
    4fec:	90e5c83a 	sub	r18,r18,r3
    4ff0:	003fbd06 	br	4ee8 <__alt_mem_Flash_flash_data+0xf4004ee8>
    4ff4:	4c800084 	addi	r18,r9,2
    4ff8:	9005883a 	mov	r2,r18
    4ffc:	903ea40e 	bge	r18,zero,4a90 <__alt_mem_Flash_flash_data+0xf4004a90>
    5000:	003fbd06 	br	4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    5004:	dac02d17 	ldw	r11,180(sp)
    5008:	5a400017 	ldw	r9,0(r11)
    500c:	5ac00104 	addi	r11,r11,4
    5010:	dac02d15 	stw	r11,180(sp)
    5014:	483e410e 	bge	r9,zero,491c <__alt_mem_Flash_flash_data+0xf400491c>
    5018:	027fffc4 	movi	r9,-1
    501c:	1c000047 	ldb	r16,1(r3)
    5020:	00388406 	br	3234 <__alt_mem_Flash_flash_data+0xf4003234>
    5024:	00800b44 	movi	r2,45
    5028:	0739c83a 	sub	fp,zero,fp
    502c:	d8802305 	stb	r2,140(sp)
    5030:	003f5e06 	br	4dac <__alt_mem_Flash_flash_data+0xf4004dac>
    5034:	0005883a 	mov	r2,zero
    5038:	003f8c06 	br	4e6c <__alt_mem_Flash_flash_data+0xf4004e6c>
    503c:	88a2703a 	and	r17,r17,r2
    5040:	883f8826 	beq	r17,zero,4e64 <__alt_mem_Flash_flash_data+0xf4004e64>
    5044:	003f8606 	br	4e60 <__alt_mem_Flash_flash_data+0xf4004e60>
    5048:	d8802344 	addi	r2,sp,141
    504c:	003f7e06 	br	4e48 <__alt_mem_Flash_flash_data+0xf4004e48>
    5050:	d8c02617 	ldw	r3,152(sp)
    5054:	003f4f06 	br	4d94 <__alt_mem_Flash_flash_data+0xf4004d94>
    5058:	dac02f17 	ldw	r11,188(sp)
    505c:	00800304 	movi	r2,12
    5060:	58800015 	stw	r2,0(r11)
    5064:	00bfffc4 	movi	r2,-1
    5068:	0038e806 	br	340c <__alt_mem_Flash_flash_data+0xf400340c>

0000506c <___vfprintf_internal_r>:
    506c:	deffb604 	addi	sp,sp,-296
    5070:	dfc04915 	stw	ra,292(sp)
    5074:	ddc04715 	stw	r23,284(sp)
    5078:	dd804615 	stw	r22,280(sp)
    507c:	282f883a 	mov	r23,r5
    5080:	202d883a 	mov	r22,r4
    5084:	d9802a15 	stw	r6,168(sp)
    5088:	d9c02d15 	stw	r7,180(sp)
    508c:	df004815 	stw	fp,288(sp)
    5090:	dd404515 	stw	r21,276(sp)
    5094:	dd004415 	stw	r20,272(sp)
    5098:	dcc04315 	stw	r19,268(sp)
    509c:	dc804215 	stw	r18,264(sp)
    50a0:	dc404115 	stw	r17,260(sp)
    50a4:	dc004015 	stw	r16,256(sp)
    50a8:	0009c540 	call	9c54 <_localeconv_r>
    50ac:	10800017 	ldw	r2,0(r2)
    50b0:	1009883a 	mov	r4,r2
    50b4:	d8803515 	stw	r2,212(sp)
    50b8:	00030440 	call	3044 <strlen>
    50bc:	d8803815 	stw	r2,224(sp)
    50c0:	b0000226 	beq	r22,zero,50cc <___vfprintf_internal_r+0x60>
    50c4:	b0800e17 	ldw	r2,56(r22)
    50c8:	1000e126 	beq	r2,zero,5450 <___vfprintf_internal_r+0x3e4>
    50cc:	b880030b 	ldhu	r2,12(r23)
    50d0:	10c8000c 	andi	r3,r2,8192
    50d4:	1800061e 	bne	r3,zero,50f0 <___vfprintf_internal_r+0x84>
    50d8:	b9001917 	ldw	r4,100(r23)
    50dc:	00f7ffc4 	movi	r3,-8193
    50e0:	10880014 	ori	r2,r2,8192
    50e4:	20c6703a 	and	r3,r4,r3
    50e8:	b880030d 	sth	r2,12(r23)
    50ec:	b8c01915 	stw	r3,100(r23)
    50f0:	10c0020c 	andi	r3,r2,8
    50f4:	1800a726 	beq	r3,zero,5394 <___vfprintf_internal_r+0x328>
    50f8:	b8c00417 	ldw	r3,16(r23)
    50fc:	1800a526 	beq	r3,zero,5394 <___vfprintf_internal_r+0x328>
    5100:	1080068c 	andi	r2,r2,26
    5104:	00c00284 	movi	r3,10
    5108:	10c0aa26 	beq	r2,r3,53b4 <___vfprintf_internal_r+0x348>
    510c:	dac01e04 	addi	r11,sp,120
    5110:	db001dc4 	addi	r12,sp,119
    5114:	d8800404 	addi	r2,sp,16
    5118:	050000b4 	movhi	r20,2
    511c:	dac02815 	stw	r11,160(sp)
    5120:	5b17c83a 	sub	r11,r11,r12
    5124:	a53ecb84 	addi	r20,r20,-1234
    5128:	db002915 	stw	r12,164(sp)
    512c:	d8801e15 	stw	r2,120(sp)
    5130:	d8002015 	stw	zero,128(sp)
    5134:	d8001f15 	stw	zero,124(sp)
    5138:	d8003315 	stw	zero,204(sp)
    513c:	d8003715 	stw	zero,220(sp)
    5140:	d8003915 	stw	zero,228(sp)
    5144:	1011883a 	mov	r8,r2
    5148:	d8003b15 	stw	zero,236(sp)
    514c:	d8003a15 	stw	zero,232(sp)
    5150:	d8002f15 	stw	zero,188(sp)
    5154:	dac03c15 	stw	r11,240(sp)
    5158:	db002a17 	ldw	r12,168(sp)
    515c:	60800007 	ldb	r2,0(r12)
    5160:	1000be26 	beq	r2,zero,545c <___vfprintf_internal_r+0x3f0>
    5164:	00c00944 	movi	r3,37
    5168:	10c0bc26 	beq	r2,r3,545c <___vfprintf_internal_r+0x3f0>
    516c:	6021883a 	mov	r16,r12
    5170:	00000106 	br	5178 <___vfprintf_internal_r+0x10c>
    5174:	10c08426 	beq	r2,r3,5388 <___vfprintf_internal_r+0x31c>
    5178:	84000044 	addi	r16,r16,1
    517c:	80800007 	ldb	r2,0(r16)
    5180:	103ffc1e 	bne	r2,zero,5174 <__alt_mem_Flash_flash_data+0xf4005174>
    5184:	dac02a17 	ldw	r11,168(sp)
    5188:	82e3c83a 	sub	r17,r16,r11
    518c:	88000f26 	beq	r17,zero,51cc <___vfprintf_internal_r+0x160>
    5190:	d8c02017 	ldw	r3,128(sp)
    5194:	d8801f17 	ldw	r2,124(sp)
    5198:	dac02a17 	ldw	r11,168(sp)
    519c:	1c47883a 	add	r3,r3,r17
    51a0:	10800044 	addi	r2,r2,1
    51a4:	d8c02015 	stw	r3,128(sp)
    51a8:	42c00015 	stw	r11,0(r8)
    51ac:	44400115 	stw	r17,4(r8)
    51b0:	d8801f15 	stw	r2,124(sp)
    51b4:	00c001c4 	movi	r3,7
    51b8:	18809316 	blt	r3,r2,5408 <___vfprintf_internal_r+0x39c>
    51bc:	42000204 	addi	r8,r8,8
    51c0:	db002f17 	ldw	r12,188(sp)
    51c4:	6459883a 	add	r12,r12,r17
    51c8:	db002f15 	stw	r12,188(sp)
    51cc:	80800007 	ldb	r2,0(r16)
    51d0:	10009426 	beq	r2,zero,5424 <___vfprintf_internal_r+0x3b8>
    51d4:	80800044 	addi	r2,r16,1
    51d8:	84000047 	ldb	r16,1(r16)
    51dc:	d8002785 	stb	zero,158(sp)
    51e0:	000d883a 	mov	r6,zero
    51e4:	027fffc4 	movi	r9,-1
    51e8:	d8002e15 	stw	zero,184(sp)
    51ec:	0023883a 	mov	r17,zero
    51f0:	01001604 	movi	r4,88
    51f4:	01400244 	movi	r5,9
    51f8:	02800a84 	movi	r10,42
    51fc:	01c01b04 	movi	r7,108
    5200:	10c00044 	addi	r3,r2,1
    5204:	80bff804 	addi	r2,r16,-32
    5208:	2082cd36 	bltu	r4,r2,5d40 <___vfprintf_internal_r+0xcd4>
    520c:	100490ba 	slli	r2,r2,2
    5210:	02c00034 	movhi	r11,0
    5214:	5ad48904 	addi	r11,r11,21028
    5218:	12c5883a 	add	r2,r2,r11
    521c:	10800017 	ldw	r2,0(r2)
    5220:	1000683a 	jmp	r2
    5224:	00005b58 	cmpnei	zero,zero,365
    5228:	00005d40 	call	5d4 <moveUp+0x4c>
    522c:	00005d40 	call	5d4 <moveUp+0x4c>
    5230:	00005ca8 	cmpgeui	zero,zero,370
    5234:	00005d40 	call	5d4 <moveUp+0x4c>
    5238:	00005d40 	call	5d4 <moveUp+0x4c>
    523c:	00005d40 	call	5d4 <moveUp+0x4c>
    5240:	00005d40 	call	5d4 <moveUp+0x4c>
    5244:	00005d40 	call	5d4 <moveUp+0x4c>
    5248:	00005d40 	call	5d4 <moveUp+0x4c>
    524c:	00005b78 	rdprs	zero,zero,365
    5250:	00005ba4 	muli	zero,zero,366
    5254:	00005d40 	call	5d4 <moveUp+0x4c>
    5258:	00005464 	muli	zero,zero,337
    525c:	00005474 	movhi	zero,337
    5260:	00005d40 	call	5d4 <moveUp+0x4c>
    5264:	000054b4 	movhi	zero,338
    5268:	000054c4 	movi	zero,339
    526c:	000054c4 	movi	zero,339
    5270:	000054c4 	movi	zero,339
    5274:	000054c4 	movi	zero,339
    5278:	000054c4 	movi	zero,339
    527c:	000054c4 	movi	zero,339
    5280:	000054c4 	movi	zero,339
    5284:	000054c4 	movi	zero,339
    5288:	000054c4 	movi	zero,339
    528c:	00005d40 	call	5d4 <moveUp+0x4c>
    5290:	00005d40 	call	5d4 <moveUp+0x4c>
    5294:	00005d40 	call	5d4 <moveUp+0x4c>
    5298:	00005d40 	call	5d4 <moveUp+0x4c>
    529c:	00005d40 	call	5d4 <moveUp+0x4c>
    52a0:	00005d40 	call	5d4 <moveUp+0x4c>
    52a4:	00005d40 	call	5d4 <moveUp+0x4c>
    52a8:	00005d40 	call	5d4 <moveUp+0x4c>
    52ac:	00005d40 	call	5d4 <moveUp+0x4c>
    52b0:	00005d40 	call	5d4 <moveUp+0x4c>
    52b4:	000054f8 	rdprs	zero,zero,339
    52b8:	00005968 	cmpgeui	zero,zero,357
    52bc:	00005d40 	call	5d4 <moveUp+0x4c>
    52c0:	00005968 	cmpgeui	zero,zero,357
    52c4:	00005d40 	call	5d4 <moveUp+0x4c>
    52c8:	00005d40 	call	5d4 <moveUp+0x4c>
    52cc:	00005d40 	call	5d4 <moveUp+0x4c>
    52d0:	00005d40 	call	5d4 <moveUp+0x4c>
    52d4:	00005a54 	movui	zero,361
    52d8:	00005d40 	call	5d4 <moveUp+0x4c>
    52dc:	00005d40 	call	5d4 <moveUp+0x4c>
    52e0:	000058fc 	xorhi	zero,zero,355
    52e4:	00005d40 	call	5d4 <moveUp+0x4c>
    52e8:	00005d40 	call	5d4 <moveUp+0x4c>
    52ec:	00005d40 	call	5d4 <moveUp+0x4c>
    52f0:	00005d40 	call	5d4 <moveUp+0x4c>
    52f4:	00005d40 	call	5d4 <moveUp+0x4c>
    52f8:	00005938 	rdprs	zero,zero,356
    52fc:	00005d40 	call	5d4 <moveUp+0x4c>
    5300:	00005d40 	call	5d4 <moveUp+0x4c>
    5304:	00005afc 	xorhi	zero,zero,363
    5308:	00005d40 	call	5d4 <moveUp+0x4c>
    530c:	00005d40 	call	5d4 <moveUp+0x4c>
    5310:	00005d40 	call	5d4 <moveUp+0x4c>
    5314:	00005d40 	call	5d4 <moveUp+0x4c>
    5318:	00005d40 	call	5d4 <moveUp+0x4c>
    531c:	00005d40 	call	5d4 <moveUp+0x4c>
    5320:	00005d40 	call	5d4 <moveUp+0x4c>
    5324:	00005d40 	call	5d4 <moveUp+0x4c>
    5328:	00005d40 	call	5d4 <moveUp+0x4c>
    532c:	00005d40 	call	5d4 <moveUp+0x4c>
    5330:	00005bb4 	movhi	zero,366
    5334:	00005a64 	muli	zero,zero,361
    5338:	00005968 	cmpgeui	zero,zero,357
    533c:	00005968 	cmpgeui	zero,zero,357
    5340:	00005968 	cmpgeui	zero,zero,357
    5344:	00005aa4 	muli	zero,zero,362
    5348:	00005a64 	muli	zero,zero,361
    534c:	00005d40 	call	5d4 <moveUp+0x4c>
    5350:	00005d40 	call	5d4 <moveUp+0x4c>
    5354:	00005ab4 	movhi	zero,362
    5358:	00005d40 	call	5d4 <moveUp+0x4c>
    535c:	00005ac8 	cmpgei	zero,zero,363
    5360:	00005d04 	movi	zero,372
    5364:	00005a0c 	andi	zero,zero,360
    5368:	00005cb8 	rdprs	zero,zero,370
    536c:	00005d40 	call	5d4 <moveUp+0x4c>
    5370:	00005bf4 	movhi	zero,367
    5374:	00005d40 	call	5d4 <moveUp+0x4c>
    5378:	00005cc8 	cmpgei	zero,zero,371
    537c:	00005d40 	call	5d4 <moveUp+0x4c>
    5380:	00005d40 	call	5d4 <moveUp+0x4c>
    5384:	00005c68 	cmpgeui	zero,zero,369
    5388:	db002a17 	ldw	r12,168(sp)
    538c:	8323c83a 	sub	r17,r16,r12
    5390:	003f7e06 	br	518c <__alt_mem_Flash_flash_data+0xf400518c>
    5394:	b009883a 	mov	r4,r22
    5398:	b80b883a 	mov	r5,r23
    539c:	000709c0 	call	709c <__swsetup_r>
    53a0:	10000c1e 	bne	r2,zero,53d4 <___vfprintf_internal_r+0x368>
    53a4:	b880030b 	ldhu	r2,12(r23)
    53a8:	00c00284 	movi	r3,10
    53ac:	1080068c 	andi	r2,r2,26
    53b0:	10ff561e 	bne	r2,r3,510c <__alt_mem_Flash_flash_data+0xf400510c>
    53b4:	b880038f 	ldh	r2,14(r23)
    53b8:	103f5416 	blt	r2,zero,510c <__alt_mem_Flash_flash_data+0xf400510c>
    53bc:	d9802a17 	ldw	r6,168(sp)
    53c0:	d9c02d17 	ldw	r7,180(sp)
    53c4:	b009883a 	mov	r4,r22
    53c8:	b80b883a 	mov	r5,r23
    53cc:	0006fe00 	call	6fe0 <__sbprintf>
    53d0:	00000106 	br	53d8 <___vfprintf_internal_r+0x36c>
    53d4:	00bfffc4 	movi	r2,-1
    53d8:	dfc04917 	ldw	ra,292(sp)
    53dc:	df004817 	ldw	fp,288(sp)
    53e0:	ddc04717 	ldw	r23,284(sp)
    53e4:	dd804617 	ldw	r22,280(sp)
    53e8:	dd404517 	ldw	r21,276(sp)
    53ec:	dd004417 	ldw	r20,272(sp)
    53f0:	dcc04317 	ldw	r19,268(sp)
    53f4:	dc804217 	ldw	r18,264(sp)
    53f8:	dc404117 	ldw	r17,260(sp)
    53fc:	dc004017 	ldw	r16,256(sp)
    5400:	dec04a04 	addi	sp,sp,296
    5404:	f800283a 	ret
    5408:	b009883a 	mov	r4,r22
    540c:	b80b883a 	mov	r5,r23
    5410:	d9801e04 	addi	r6,sp,120
    5414:	000d5380 	call	d538 <__sprint_r>
    5418:	1000081e 	bne	r2,zero,543c <___vfprintf_internal_r+0x3d0>
    541c:	da000404 	addi	r8,sp,16
    5420:	003f6706 	br	51c0 <__alt_mem_Flash_flash_data+0xf40051c0>
    5424:	d8802017 	ldw	r2,128(sp)
    5428:	10000426 	beq	r2,zero,543c <___vfprintf_internal_r+0x3d0>
    542c:	b009883a 	mov	r4,r22
    5430:	b80b883a 	mov	r5,r23
    5434:	d9801e04 	addi	r6,sp,120
    5438:	000d5380 	call	d538 <__sprint_r>
    543c:	b880030b 	ldhu	r2,12(r23)
    5440:	1080100c 	andi	r2,r2,64
    5444:	103fe31e 	bne	r2,zero,53d4 <__alt_mem_Flash_flash_data+0xf40053d4>
    5448:	d8802f17 	ldw	r2,188(sp)
    544c:	003fe206 	br	53d8 <__alt_mem_Flash_flash_data+0xf40053d8>
    5450:	b009883a 	mov	r4,r22
    5454:	00090fc0 	call	90fc <__sinit>
    5458:	003f1c06 	br	50cc <__alt_mem_Flash_flash_data+0xf40050cc>
    545c:	dc002a17 	ldw	r16,168(sp)
    5460:	003f5a06 	br	51cc <__alt_mem_Flash_flash_data+0xf40051cc>
    5464:	1805883a 	mov	r2,r3
    5468:	8c400114 	ori	r17,r17,4
    546c:	1c000007 	ldb	r16,0(r3)
    5470:	003f6306 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5474:	1c000007 	ldb	r16,0(r3)
    5478:	18800044 	addi	r2,r3,1
    547c:	8286ad26 	beq	r16,r10,6f34 <___vfprintf_internal_r+0x1ec8>
    5480:	82fff404 	addi	r11,r16,-48
    5484:	1007883a 	mov	r3,r2
    5488:	0013883a 	mov	r9,zero
    548c:	2aff5d36 	bltu	r5,r11,5204 <__alt_mem_Flash_flash_data+0xf4005204>
    5490:	1c000007 	ldb	r16,0(r3)
    5494:	4a4002a4 	muli	r9,r9,10
    5498:	18c00044 	addi	r3,r3,1
    549c:	5a53883a 	add	r9,r11,r9
    54a0:	82fff404 	addi	r11,r16,-48
    54a4:	2afffa2e 	bgeu	r5,r11,5490 <__alt_mem_Flash_flash_data+0xf4005490>
    54a8:	483f560e 	bge	r9,zero,5204 <__alt_mem_Flash_flash_data+0xf4005204>
    54ac:	027fffc4 	movi	r9,-1
    54b0:	003f5406 	br	5204 <__alt_mem_Flash_flash_data+0xf4005204>
    54b4:	8c402014 	ori	r17,r17,128
    54b8:	1805883a 	mov	r2,r3
    54bc:	1c000007 	ldb	r16,0(r3)
    54c0:	003f4f06 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    54c4:	1805883a 	mov	r2,r3
    54c8:	d8002e15 	stw	zero,184(sp)
    54cc:	82fff404 	addi	r11,r16,-48
    54d0:	0019883a 	mov	r12,zero
    54d4:	14000007 	ldb	r16,0(r2)
    54d8:	630002a4 	muli	r12,r12,10
    54dc:	18c00044 	addi	r3,r3,1
    54e0:	1805883a 	mov	r2,r3
    54e4:	62d9883a 	add	r12,r12,r11
    54e8:	82fff404 	addi	r11,r16,-48
    54ec:	2afff92e 	bgeu	r5,r11,54d4 <__alt_mem_Flash_flash_data+0xf40054d4>
    54f0:	db002e15 	stw	r12,184(sp)
    54f4:	003f4306 	br	5204 <__alt_mem_Flash_flash_data+0xf4005204>
    54f8:	8c400414 	ori	r17,r17,16
    54fc:	d8c02a15 	stw	r3,168(sp)
    5500:	d9802785 	stb	r6,158(sp)
    5504:	8880080c 	andi	r2,r17,32
    5508:	d8c02d17 	ldw	r3,180(sp)
    550c:	10015a26 	beq	r2,zero,5a78 <___vfprintf_internal_r+0xa0c>
    5510:	db002d17 	ldw	r12,180(sp)
    5514:	18800117 	ldw	r2,4(r3)
    5518:	1cc00017 	ldw	r19,0(r3)
    551c:	63000204 	addi	r12,r12,8
    5520:	db002d15 	stw	r12,180(sp)
    5524:	1039883a 	mov	fp,r2
    5528:	10044516 	blt	r2,zero,6640 <___vfprintf_internal_r+0x15d4>
    552c:	dd402783 	ldbu	r21,158(sp)
    5530:	da403215 	stw	r9,200(sp)
    5534:	00800044 	movi	r2,1
    5538:	9f06b03a 	or	r3,r19,fp
    553c:	48000216 	blt	r9,zero,5548 <___vfprintf_internal_r+0x4dc>
    5540:	013fdfc4 	movi	r4,-129
    5544:	8922703a 	and	r17,r17,r4
    5548:	1802071e 	bne	r3,zero,5d68 <___vfprintf_internal_r+0xcfc>
    554c:	4802fa26 	beq	r9,zero,6138 <___vfprintf_internal_r+0x10cc>
    5550:	10803fcc 	andi	r2,r2,255
    5554:	00c00044 	movi	r3,1
    5558:	10c22926 	beq	r2,r3,5e00 <___vfprintf_internal_r+0xd94>
    555c:	00c00084 	movi	r3,2
    5560:	10c31726 	beq	r2,r3,61c0 <___vfprintf_internal_r+0x1154>
    5564:	d8c01e04 	addi	r3,sp,120
    5568:	9808d0fa 	srli	r4,r19,3
    556c:	e00a977a 	slli	r5,fp,29
    5570:	e038d0fa 	srli	fp,fp,3
    5574:	9cc001cc 	andi	r19,r19,7
    5578:	98800c04 	addi	r2,r19,48
    557c:	18ffffc4 	addi	r3,r3,-1
    5580:	2926b03a 	or	r19,r5,r4
    5584:	18800005 	stb	r2,0(r3)
    5588:	9f08b03a 	or	r4,r19,fp
    558c:	203ff61e 	bne	r4,zero,5568 <__alt_mem_Flash_flash_data+0xf4005568>
    5590:	8900004c 	andi	r4,r17,1
    5594:	d8c03115 	stw	r3,196(sp)
    5598:	2003931e 	bne	r4,zero,63e8 <___vfprintf_internal_r+0x137c>
    559c:	dac02817 	ldw	r11,160(sp)
    55a0:	58e5c83a 	sub	r18,r11,r3
    55a4:	9005883a 	mov	r2,r18
    55a8:	9240010e 	bge	r18,r9,55b0 <___vfprintf_internal_r+0x544>
    55ac:	4805883a 	mov	r2,r9
    55b0:	d8802b15 	stw	r2,172(sp)
    55b4:	d8003415 	stw	zero,208(sp)
    55b8:	a8803fcc 	andi	r2,r21,255
    55bc:	1080201c 	xori	r2,r2,128
    55c0:	10bfe004 	addi	r2,r2,-128
    55c4:	10000326 	beq	r2,zero,55d4 <___vfprintf_internal_r+0x568>
    55c8:	db002b17 	ldw	r12,172(sp)
    55cc:	63000044 	addi	r12,r12,1
    55d0:	db002b15 	stw	r12,172(sp)
    55d4:	88c0008c 	andi	r3,r17,2
    55d8:	d8c02c15 	stw	r3,176(sp)
    55dc:	18000326 	beq	r3,zero,55ec <___vfprintf_internal_r+0x580>
    55e0:	dac02b17 	ldw	r11,172(sp)
    55e4:	5ac00084 	addi	r11,r11,2
    55e8:	dac02b15 	stw	r11,172(sp)
    55ec:	8b00210c 	andi	r12,r17,132
    55f0:	db003015 	stw	r12,192(sp)
    55f4:	6001da1e 	bne	r12,zero,5d60 <___vfprintf_internal_r+0xcf4>
    55f8:	dac02e17 	ldw	r11,184(sp)
    55fc:	db002b17 	ldw	r12,172(sp)
    5600:	5b39c83a 	sub	fp,r11,r12
    5604:	0701d60e 	bge	zero,fp,5d60 <___vfprintf_internal_r+0xcf4>
    5608:	02400404 	movi	r9,16
    560c:	d8c02017 	ldw	r3,128(sp)
    5610:	d8801f17 	ldw	r2,124(sp)
    5614:	4f053c0e 	bge	r9,fp,6b08 <___vfprintf_internal_r+0x1a9c>
    5618:	014000b4 	movhi	r5,2
    561c:	297ecf84 	addi	r5,r5,-1218
    5620:	d9403615 	stw	r5,216(sp)
    5624:	482b883a 	mov	r21,r9
    5628:	04c001c4 	movi	r19,7
    562c:	00000306 	br	563c <___vfprintf_internal_r+0x5d0>
    5630:	e73ffc04 	addi	fp,fp,-16
    5634:	42000204 	addi	r8,r8,8
    5638:	af00130e 	bge	r21,fp,5688 <___vfprintf_internal_r+0x61c>
    563c:	02c000b4 	movhi	r11,2
    5640:	18c00404 	addi	r3,r3,16
    5644:	10800044 	addi	r2,r2,1
    5648:	5afecf84 	addi	r11,r11,-1218
    564c:	42c00015 	stw	r11,0(r8)
    5650:	45400115 	stw	r21,4(r8)
    5654:	d8c02015 	stw	r3,128(sp)
    5658:	d8801f15 	stw	r2,124(sp)
    565c:	98bff40e 	bge	r19,r2,5630 <__alt_mem_Flash_flash_data+0xf4005630>
    5660:	b009883a 	mov	r4,r22
    5664:	b80b883a 	mov	r5,r23
    5668:	d9801e04 	addi	r6,sp,120
    566c:	000d5380 	call	d538 <__sprint_r>
    5670:	103f721e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    5674:	e73ffc04 	addi	fp,fp,-16
    5678:	d8c02017 	ldw	r3,128(sp)
    567c:	d8801f17 	ldw	r2,124(sp)
    5680:	da000404 	addi	r8,sp,16
    5684:	af3fed16 	blt	r21,fp,563c <__alt_mem_Flash_flash_data+0xf400563c>
    5688:	db003617 	ldw	r12,216(sp)
    568c:	e0c7883a 	add	r3,fp,r3
    5690:	10800044 	addi	r2,r2,1
    5694:	43000015 	stw	r12,0(r8)
    5698:	47000115 	stw	fp,4(r8)
    569c:	d8c02015 	stw	r3,128(sp)
    56a0:	d8801f15 	stw	r2,124(sp)
    56a4:	010001c4 	movi	r4,7
    56a8:	20830e16 	blt	r4,r2,62e4 <___vfprintf_internal_r+0x1278>
    56ac:	d8802787 	ldb	r2,158(sp)
    56b0:	42000204 	addi	r8,r8,8
    56b4:	10000c26 	beq	r2,zero,56e8 <___vfprintf_internal_r+0x67c>
    56b8:	d8801f17 	ldw	r2,124(sp)
    56bc:	d9002784 	addi	r4,sp,158
    56c0:	18c00044 	addi	r3,r3,1
    56c4:	10800044 	addi	r2,r2,1
    56c8:	41000015 	stw	r4,0(r8)
    56cc:	01000044 	movi	r4,1
    56d0:	41000115 	stw	r4,4(r8)
    56d4:	d8c02015 	stw	r3,128(sp)
    56d8:	d8801f15 	stw	r2,124(sp)
    56dc:	010001c4 	movi	r4,7
    56e0:	2082a716 	blt	r4,r2,6180 <___vfprintf_internal_r+0x1114>
    56e4:	42000204 	addi	r8,r8,8
    56e8:	dac02c17 	ldw	r11,176(sp)
    56ec:	58000c26 	beq	r11,zero,5720 <___vfprintf_internal_r+0x6b4>
    56f0:	d8801f17 	ldw	r2,124(sp)
    56f4:	d9002704 	addi	r4,sp,156
    56f8:	18c00084 	addi	r3,r3,2
    56fc:	10800044 	addi	r2,r2,1
    5700:	41000015 	stw	r4,0(r8)
    5704:	01000084 	movi	r4,2
    5708:	41000115 	stw	r4,4(r8)
    570c:	d8c02015 	stw	r3,128(sp)
    5710:	d8801f15 	stw	r2,124(sp)
    5714:	010001c4 	movi	r4,7
    5718:	2082a116 	blt	r4,r2,61a0 <___vfprintf_internal_r+0x1134>
    571c:	42000204 	addi	r8,r8,8
    5720:	db003017 	ldw	r12,192(sp)
    5724:	00802004 	movi	r2,128
    5728:	60820326 	beq	r12,r2,5f38 <___vfprintf_internal_r+0xecc>
    572c:	db003217 	ldw	r12,200(sp)
    5730:	64abc83a 	sub	r21,r12,r18
    5734:	0540260e 	bge	zero,r21,57d0 <___vfprintf_internal_r+0x764>
    5738:	07000404 	movi	fp,16
    573c:	d8801f17 	ldw	r2,124(sp)
    5740:	e544570e 	bge	fp,r21,68a0 <___vfprintf_internal_r+0x1834>
    5744:	014000b4 	movhi	r5,2
    5748:	297ecb84 	addi	r5,r5,-1234
    574c:	d9402c15 	stw	r5,176(sp)
    5750:	04c001c4 	movi	r19,7
    5754:	00000306 	br	5764 <___vfprintf_internal_r+0x6f8>
    5758:	ad7ffc04 	addi	r21,r21,-16
    575c:	42000204 	addi	r8,r8,8
    5760:	e540110e 	bge	fp,r21,57a8 <___vfprintf_internal_r+0x73c>
    5764:	18c00404 	addi	r3,r3,16
    5768:	10800044 	addi	r2,r2,1
    576c:	45000015 	stw	r20,0(r8)
    5770:	47000115 	stw	fp,4(r8)
    5774:	d8c02015 	stw	r3,128(sp)
    5778:	d8801f15 	stw	r2,124(sp)
    577c:	98bff60e 	bge	r19,r2,5758 <__alt_mem_Flash_flash_data+0xf4005758>
    5780:	b009883a 	mov	r4,r22
    5784:	b80b883a 	mov	r5,r23
    5788:	d9801e04 	addi	r6,sp,120
    578c:	000d5380 	call	d538 <__sprint_r>
    5790:	103f2a1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    5794:	ad7ffc04 	addi	r21,r21,-16
    5798:	d8c02017 	ldw	r3,128(sp)
    579c:	d8801f17 	ldw	r2,124(sp)
    57a0:	da000404 	addi	r8,sp,16
    57a4:	e57fef16 	blt	fp,r21,5764 <__alt_mem_Flash_flash_data+0xf4005764>
    57a8:	dac02c17 	ldw	r11,176(sp)
    57ac:	1d47883a 	add	r3,r3,r21
    57b0:	10800044 	addi	r2,r2,1
    57b4:	42c00015 	stw	r11,0(r8)
    57b8:	45400115 	stw	r21,4(r8)
    57bc:	d8c02015 	stw	r3,128(sp)
    57c0:	d8801f15 	stw	r2,124(sp)
    57c4:	010001c4 	movi	r4,7
    57c8:	20826516 	blt	r4,r2,6160 <___vfprintf_internal_r+0x10f4>
    57cc:	42000204 	addi	r8,r8,8
    57d0:	8880400c 	andi	r2,r17,256
    57d4:	1001901e 	bne	r2,zero,5e18 <___vfprintf_internal_r+0xdac>
    57d8:	d8801f17 	ldw	r2,124(sp)
    57dc:	db003117 	ldw	r12,196(sp)
    57e0:	1c87883a 	add	r3,r3,r18
    57e4:	10800044 	addi	r2,r2,1
    57e8:	43000015 	stw	r12,0(r8)
    57ec:	44800115 	stw	r18,4(r8)
    57f0:	d8c02015 	stw	r3,128(sp)
    57f4:	d8801f15 	stw	r2,124(sp)
    57f8:	010001c4 	movi	r4,7
    57fc:	20824016 	blt	r4,r2,6100 <___vfprintf_internal_r+0x1094>
    5800:	42000204 	addi	r8,r8,8
    5804:	8c40010c 	andi	r17,r17,4
    5808:	88003126 	beq	r17,zero,58d0 <___vfprintf_internal_r+0x864>
    580c:	db002e17 	ldw	r12,184(sp)
    5810:	dac02b17 	ldw	r11,172(sp)
    5814:	62e1c83a 	sub	r16,r12,r11
    5818:	04002d0e 	bge	zero,r16,58d0 <___vfprintf_internal_r+0x864>
    581c:	04400404 	movi	r17,16
    5820:	d8801f17 	ldw	r2,124(sp)
    5824:	8c05150e 	bge	r17,r16,6c7c <___vfprintf_internal_r+0x1c10>
    5828:	010000b4 	movhi	r4,2
    582c:	213ecf84 	addi	r4,r4,-1218
    5830:	d9003615 	stw	r4,216(sp)
    5834:	048001c4 	movi	r18,7
    5838:	00000306 	br	5848 <___vfprintf_internal_r+0x7dc>
    583c:	843ffc04 	addi	r16,r16,-16
    5840:	42000204 	addi	r8,r8,8
    5844:	8c00130e 	bge	r17,r16,5894 <___vfprintf_internal_r+0x828>
    5848:	014000b4 	movhi	r5,2
    584c:	18c00404 	addi	r3,r3,16
    5850:	10800044 	addi	r2,r2,1
    5854:	297ecf84 	addi	r5,r5,-1218
    5858:	41400015 	stw	r5,0(r8)
    585c:	44400115 	stw	r17,4(r8)
    5860:	d8c02015 	stw	r3,128(sp)
    5864:	d8801f15 	stw	r2,124(sp)
    5868:	90bff40e 	bge	r18,r2,583c <__alt_mem_Flash_flash_data+0xf400583c>
    586c:	b009883a 	mov	r4,r22
    5870:	b80b883a 	mov	r5,r23
    5874:	d9801e04 	addi	r6,sp,120
    5878:	000d5380 	call	d538 <__sprint_r>
    587c:	103eef1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    5880:	843ffc04 	addi	r16,r16,-16
    5884:	d8c02017 	ldw	r3,128(sp)
    5888:	d8801f17 	ldw	r2,124(sp)
    588c:	da000404 	addi	r8,sp,16
    5890:	8c3fed16 	blt	r17,r16,5848 <__alt_mem_Flash_flash_data+0xf4005848>
    5894:	dac03617 	ldw	r11,216(sp)
    5898:	1c07883a 	add	r3,r3,r16
    589c:	10800044 	addi	r2,r2,1
    58a0:	42c00015 	stw	r11,0(r8)
    58a4:	44000115 	stw	r16,4(r8)
    58a8:	d8c02015 	stw	r3,128(sp)
    58ac:	d8801f15 	stw	r2,124(sp)
    58b0:	010001c4 	movi	r4,7
    58b4:	2080060e 	bge	r4,r2,58d0 <___vfprintf_internal_r+0x864>
    58b8:	b009883a 	mov	r4,r22
    58bc:	b80b883a 	mov	r5,r23
    58c0:	d9801e04 	addi	r6,sp,120
    58c4:	000d5380 	call	d538 <__sprint_r>
    58c8:	103edc1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    58cc:	d8c02017 	ldw	r3,128(sp)
    58d0:	d8802b17 	ldw	r2,172(sp)
    58d4:	db002e17 	ldw	r12,184(sp)
    58d8:	1300010e 	bge	r2,r12,58e0 <___vfprintf_internal_r+0x874>
    58dc:	6005883a 	mov	r2,r12
    58e0:	dac02f17 	ldw	r11,188(sp)
    58e4:	5897883a 	add	r11,r11,r2
    58e8:	dac02f15 	stw	r11,188(sp)
    58ec:	18020c1e 	bne	r3,zero,6120 <___vfprintf_internal_r+0x10b4>
    58f0:	d8001f15 	stw	zero,124(sp)
    58f4:	da000404 	addi	r8,sp,16
    58f8:	003e1706 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    58fc:	8c400414 	ori	r17,r17,16
    5900:	d8c02a15 	stw	r3,168(sp)
    5904:	8880080c 	andi	r2,r17,32
    5908:	10010126 	beq	r2,zero,5d10 <___vfprintf_internal_r+0xca4>
    590c:	db002d17 	ldw	r12,180(sp)
    5910:	0005883a 	mov	r2,zero
    5914:	64c00017 	ldw	r19,0(r12)
    5918:	67000117 	ldw	fp,4(r12)
    591c:	63000204 	addi	r12,r12,8
    5920:	db002d15 	stw	r12,180(sp)
    5924:	9f06b03a 	or	r3,r19,fp
    5928:	d8002785 	stb	zero,158(sp)
    592c:	da403215 	stw	r9,200(sp)
    5930:	002b883a 	mov	r21,zero
    5934:	003f0106 	br	553c <__alt_mem_Flash_flash_data+0xf400553c>
    5938:	8c400414 	ori	r17,r17,16
    593c:	d8c02a15 	stw	r3,168(sp)
    5940:	8880080c 	andi	r2,r17,32
    5944:	1000e326 	beq	r2,zero,5cd4 <___vfprintf_internal_r+0xc68>
    5948:	dac02d17 	ldw	r11,180(sp)
    594c:	00800044 	movi	r2,1
    5950:	5cc00017 	ldw	r19,0(r11)
    5954:	5f000117 	ldw	fp,4(r11)
    5958:	5ac00204 	addi	r11,r11,8
    595c:	dac02d15 	stw	r11,180(sp)
    5960:	9f06b03a 	or	r3,r19,fp
    5964:	003ff006 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    5968:	db002d17 	ldw	r12,180(sp)
    596c:	dac02d17 	ldw	r11,180(sp)
    5970:	d8c02a15 	stw	r3,168(sp)
    5974:	63000017 	ldw	r12,0(r12)
    5978:	5ac00117 	ldw	r11,4(r11)
    597c:	d9802785 	stb	r6,158(sp)
    5980:	6009883a 	mov	r4,r12
    5984:	580b883a 	mov	r5,r11
    5988:	db003715 	stw	r12,220(sp)
    598c:	da003f15 	stw	r8,252(sp)
    5990:	da403e15 	stw	r9,248(sp)
    5994:	dac03915 	stw	r11,228(sp)
    5998:	000bf900 	call	bf90 <__fpclassifyd>
    599c:	db002d17 	ldw	r12,180(sp)
    59a0:	04800044 	movi	r18,1
    59a4:	da003f17 	ldw	r8,252(sp)
    59a8:	64c00204 	addi	r19,r12,8
    59ac:	da403e17 	ldw	r9,248(sp)
    59b0:	d9003717 	ldw	r4,220(sp)
    59b4:	d9403917 	ldw	r5,228(sp)
    59b8:	14832b1e 	bne	r2,r18,6668 <___vfprintf_internal_r+0x15fc>
    59bc:	000d883a 	mov	r6,zero
    59c0:	000f883a 	mov	r7,zero
    59c4:	00111400 	call	11140 <__ledf2>
    59c8:	da003f17 	ldw	r8,252(sp)
    59cc:	1004b716 	blt	r2,zero,6cac <___vfprintf_internal_r+0x1c40>
    59d0:	dd402783 	ldbu	r21,158(sp)
    59d4:	008011c4 	movi	r2,71
    59d8:	14040e0e 	bge	r2,r16,6a14 <___vfprintf_internal_r+0x19a8>
    59dc:	00c000b4 	movhi	r3,2
    59e0:	18feb404 	addi	r3,r3,-1328
    59e4:	d8c03115 	stw	r3,196(sp)
    59e8:	02c000c4 	movi	r11,3
    59ec:	00bfdfc4 	movi	r2,-129
    59f0:	dac02b15 	stw	r11,172(sp)
    59f4:	88a2703a 	and	r17,r17,r2
    59f8:	dcc02d15 	stw	r19,180(sp)
    59fc:	5825883a 	mov	r18,r11
    5a00:	d8003215 	stw	zero,200(sp)
    5a04:	d8003415 	stw	zero,208(sp)
    5a08:	003eeb06 	br	55b8 <__alt_mem_Flash_flash_data+0xf40055b8>
    5a0c:	db002d17 	ldw	r12,180(sp)
    5a10:	00800c04 	movi	r2,48
    5a14:	d8802705 	stb	r2,156(sp)
    5a18:	64c00017 	ldw	r19,0(r12)
    5a1c:	00801e04 	movi	r2,120
    5a20:	d8802745 	stb	r2,157(sp)
    5a24:	008000b4 	movhi	r2,2
    5a28:	10bebc04 	addi	r2,r2,-1296
    5a2c:	63000104 	addi	r12,r12,4
    5a30:	d8c02a15 	stw	r3,168(sp)
    5a34:	d8803b15 	stw	r2,236(sp)
    5a38:	0039883a 	mov	fp,zero
    5a3c:	8c400094 	ori	r17,r17,2
    5a40:	db002d15 	stw	r12,180(sp)
    5a44:	00800084 	movi	r2,2
    5a48:	04001e04 	movi	r16,120
    5a4c:	9807883a 	mov	r3,r19
    5a50:	003fb506 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    5a54:	8c400214 	ori	r17,r17,8
    5a58:	1805883a 	mov	r2,r3
    5a5c:	1c000007 	ldb	r16,0(r3)
    5a60:	003de706 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5a64:	d8c02a15 	stw	r3,168(sp)
    5a68:	d9802785 	stb	r6,158(sp)
    5a6c:	8880080c 	andi	r2,r17,32
    5a70:	d8c02d17 	ldw	r3,180(sp)
    5a74:	103ea61e 	bne	r2,zero,5510 <__alt_mem_Flash_flash_data+0xf4005510>
    5a78:	8880040c 	andi	r2,r17,16
    5a7c:	1002221e 	bne	r2,zero,6308 <___vfprintf_internal_r+0x129c>
    5a80:	8880100c 	andi	r2,r17,64
    5a84:	10022026 	beq	r2,zero,6308 <___vfprintf_internal_r+0x129c>
    5a88:	1cc0000f 	ldh	r19,0(r3)
    5a8c:	db002d17 	ldw	r12,180(sp)
    5a90:	9839d7fa 	srai	fp,r19,31
    5a94:	63000104 	addi	r12,r12,4
    5a98:	db002d15 	stw	r12,180(sp)
    5a9c:	e005883a 	mov	r2,fp
    5aa0:	003ea106 	br	5528 <__alt_mem_Flash_flash_data+0xf4005528>
    5aa4:	8c401014 	ori	r17,r17,64
    5aa8:	1805883a 	mov	r2,r3
    5aac:	1c000007 	ldb	r16,0(r3)
    5ab0:	003dd306 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5ab4:	1c000007 	ldb	r16,0(r3)
    5ab8:	81c3e926 	beq	r16,r7,6a60 <___vfprintf_internal_r+0x19f4>
    5abc:	8c400414 	ori	r17,r17,16
    5ac0:	1805883a 	mov	r2,r3
    5ac4:	003dce06 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5ac8:	d8c02a15 	stw	r3,168(sp)
    5acc:	d9802785 	stb	r6,158(sp)
    5ad0:	8880080c 	andi	r2,r17,32
    5ad4:	10034726 	beq	r2,zero,67f4 <___vfprintf_internal_r+0x1788>
    5ad8:	db002d17 	ldw	r12,180(sp)
    5adc:	dac02f17 	ldw	r11,188(sp)
    5ae0:	60800017 	ldw	r2,0(r12)
    5ae4:	5807d7fa 	srai	r3,r11,31
    5ae8:	63000104 	addi	r12,r12,4
    5aec:	db002d15 	stw	r12,180(sp)
    5af0:	12c00015 	stw	r11,0(r2)
    5af4:	10c00115 	stw	r3,4(r2)
    5af8:	003d9706 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    5afc:	030000b4 	movhi	r12,2
    5b00:	633eb704 	addi	r12,r12,-1316
    5b04:	d8c02a15 	stw	r3,168(sp)
    5b08:	d9802785 	stb	r6,158(sp)
    5b0c:	db003b15 	stw	r12,236(sp)
    5b10:	88c0080c 	andi	r3,r17,32
    5b14:	d8802d17 	ldw	r2,180(sp)
    5b18:	18005b26 	beq	r3,zero,5c88 <___vfprintf_internal_r+0xc1c>
    5b1c:	dac02d17 	ldw	r11,180(sp)
    5b20:	14c00017 	ldw	r19,0(r2)
    5b24:	17000117 	ldw	fp,4(r2)
    5b28:	5ac00204 	addi	r11,r11,8
    5b2c:	dac02d15 	stw	r11,180(sp)
    5b30:	8880004c 	andi	r2,r17,1
    5b34:	10022926 	beq	r2,zero,63dc <___vfprintf_internal_r+0x1370>
    5b38:	9f06b03a 	or	r3,r19,fp
    5b3c:	18032b26 	beq	r3,zero,67ec <___vfprintf_internal_r+0x1780>
    5b40:	00800c04 	movi	r2,48
    5b44:	d8802705 	stb	r2,156(sp)
    5b48:	dc002745 	stb	r16,157(sp)
    5b4c:	8c400094 	ori	r17,r17,2
    5b50:	00800084 	movi	r2,2
    5b54:	003f7406 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    5b58:	30803fcc 	andi	r2,r6,255
    5b5c:	1080201c 	xori	r2,r2,128
    5b60:	10bfe004 	addi	r2,r2,-128
    5b64:	1003351e 	bne	r2,zero,683c <___vfprintf_internal_r+0x17d0>
    5b68:	1805883a 	mov	r2,r3
    5b6c:	01800804 	movi	r6,32
    5b70:	1c000007 	ldb	r16,0(r3)
    5b74:	003da206 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5b78:	dac02d17 	ldw	r11,180(sp)
    5b7c:	db002d17 	ldw	r12,180(sp)
    5b80:	5ac00017 	ldw	r11,0(r11)
    5b84:	dac02e15 	stw	r11,184(sp)
    5b88:	62c00104 	addi	r11,r12,4
    5b8c:	db002e17 	ldw	r12,184(sp)
    5b90:	6003ad16 	blt	r12,zero,6a48 <___vfprintf_internal_r+0x19dc>
    5b94:	dac02d15 	stw	r11,180(sp)
    5b98:	1805883a 	mov	r2,r3
    5b9c:	1c000007 	ldb	r16,0(r3)
    5ba0:	003d9706 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5ba4:	1805883a 	mov	r2,r3
    5ba8:	01800ac4 	movi	r6,43
    5bac:	1c000007 	ldb	r16,0(r3)
    5bb0:	003d9306 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5bb4:	db002d17 	ldw	r12,180(sp)
    5bb8:	d8c02a15 	stw	r3,168(sp)
    5bbc:	00c00044 	movi	r3,1
    5bc0:	60800017 	ldw	r2,0(r12)
    5bc4:	63000104 	addi	r12,r12,4
    5bc8:	d8c02b15 	stw	r3,172(sp)
    5bcc:	d8002785 	stb	zero,158(sp)
    5bd0:	d8801405 	stb	r2,80(sp)
    5bd4:	db002d15 	stw	r12,180(sp)
    5bd8:	dac01404 	addi	r11,sp,80
    5bdc:	1825883a 	mov	r18,r3
    5be0:	d8003215 	stw	zero,200(sp)
    5be4:	d8003415 	stw	zero,208(sp)
    5be8:	dac03115 	stw	r11,196(sp)
    5bec:	0005883a 	mov	r2,zero
    5bf0:	003e7806 	br	55d4 <__alt_mem_Flash_flash_data+0xf40055d4>
    5bf4:	dac02d17 	ldw	r11,180(sp)
    5bf8:	db002d17 	ldw	r12,180(sp)
    5bfc:	d8c02a15 	stw	r3,168(sp)
    5c00:	5ac00017 	ldw	r11,0(r11)
    5c04:	d8002785 	stb	zero,158(sp)
    5c08:	64c00104 	addi	r19,r12,4
    5c0c:	dac03115 	stw	r11,196(sp)
    5c10:	5803fe26 	beq	r11,zero,6c0c <___vfprintf_internal_r+0x1ba0>
    5c14:	d9003117 	ldw	r4,196(sp)
    5c18:	4803b416 	blt	r9,zero,6aec <___vfprintf_internal_r+0x1a80>
    5c1c:	480d883a 	mov	r6,r9
    5c20:	000b883a 	mov	r5,zero
    5c24:	da003f15 	stw	r8,252(sp)
    5c28:	da403e15 	stw	r9,248(sp)
    5c2c:	000a5e80 	call	a5e8 <memchr>
    5c30:	da003f17 	ldw	r8,252(sp)
    5c34:	da403e17 	ldw	r9,248(sp)
    5c38:	10043026 	beq	r2,zero,6cfc <___vfprintf_internal_r+0x1c90>
    5c3c:	d8c03117 	ldw	r3,196(sp)
    5c40:	10e5c83a 	sub	r18,r2,r3
    5c44:	4c836b16 	blt	r9,r18,69f4 <___vfprintf_internal_r+0x1988>
    5c48:	9005883a 	mov	r2,r18
    5c4c:	9003ac16 	blt	r18,zero,6b00 <___vfprintf_internal_r+0x1a94>
    5c50:	dd402783 	ldbu	r21,158(sp)
    5c54:	d8802b15 	stw	r2,172(sp)
    5c58:	dcc02d15 	stw	r19,180(sp)
    5c5c:	d8003215 	stw	zero,200(sp)
    5c60:	d8003415 	stw	zero,208(sp)
    5c64:	003e5406 	br	55b8 <__alt_mem_Flash_flash_data+0xf40055b8>
    5c68:	008000b4 	movhi	r2,2
    5c6c:	10bebc04 	addi	r2,r2,-1296
    5c70:	d8c02a15 	stw	r3,168(sp)
    5c74:	d8803b15 	stw	r2,236(sp)
    5c78:	d9802785 	stb	r6,158(sp)
    5c7c:	88c0080c 	andi	r3,r17,32
    5c80:	d8802d17 	ldw	r2,180(sp)
    5c84:	183fa51e 	bne	r3,zero,5b1c <__alt_mem_Flash_flash_data+0xf4005b1c>
    5c88:	88c0040c 	andi	r3,r17,16
    5c8c:	1802ee26 	beq	r3,zero,6848 <___vfprintf_internal_r+0x17dc>
    5c90:	db002d17 	ldw	r12,180(sp)
    5c94:	14c00017 	ldw	r19,0(r2)
    5c98:	0039883a 	mov	fp,zero
    5c9c:	63000104 	addi	r12,r12,4
    5ca0:	db002d15 	stw	r12,180(sp)
    5ca4:	003fa206 	br	5b30 <__alt_mem_Flash_flash_data+0xf4005b30>
    5ca8:	8c400054 	ori	r17,r17,1
    5cac:	1805883a 	mov	r2,r3
    5cb0:	1c000007 	ldb	r16,0(r3)
    5cb4:	003d5206 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5cb8:	8c400814 	ori	r17,r17,32
    5cbc:	1805883a 	mov	r2,r3
    5cc0:	1c000007 	ldb	r16,0(r3)
    5cc4:	003d4e06 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    5cc8:	d8c02a15 	stw	r3,168(sp)
    5ccc:	8880080c 	andi	r2,r17,32
    5cd0:	103f1d1e 	bne	r2,zero,5948 <__alt_mem_Flash_flash_data+0xf4005948>
    5cd4:	8880040c 	andi	r2,r17,16
    5cd8:	1001b81e 	bne	r2,zero,63bc <___vfprintf_internal_r+0x1350>
    5cdc:	8880100c 	andi	r2,r17,64
    5ce0:	1001b626 	beq	r2,zero,63bc <___vfprintf_internal_r+0x1350>
    5ce4:	dac02d17 	ldw	r11,180(sp)
    5ce8:	0039883a 	mov	fp,zero
    5cec:	00800044 	movi	r2,1
    5cf0:	5cc0000b 	ldhu	r19,0(r11)
    5cf4:	5ac00104 	addi	r11,r11,4
    5cf8:	dac02d15 	stw	r11,180(sp)
    5cfc:	9807883a 	mov	r3,r19
    5d00:	003f0906 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    5d04:	d8c02a15 	stw	r3,168(sp)
    5d08:	8880080c 	andi	r2,r17,32
    5d0c:	103eff1e 	bne	r2,zero,590c <__alt_mem_Flash_flash_data+0xf400590c>
    5d10:	8880040c 	andi	r2,r17,16
    5d14:	1001a11e 	bne	r2,zero,639c <___vfprintf_internal_r+0x1330>
    5d18:	8880100c 	andi	r2,r17,64
    5d1c:	10019f26 	beq	r2,zero,639c <___vfprintf_internal_r+0x1330>
    5d20:	db002d17 	ldw	r12,180(sp)
    5d24:	0039883a 	mov	fp,zero
    5d28:	0005883a 	mov	r2,zero
    5d2c:	64c0000b 	ldhu	r19,0(r12)
    5d30:	63000104 	addi	r12,r12,4
    5d34:	db002d15 	stw	r12,180(sp)
    5d38:	9807883a 	mov	r3,r19
    5d3c:	003efa06 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    5d40:	d8c02a15 	stw	r3,168(sp)
    5d44:	d9802785 	stb	r6,158(sp)
    5d48:	803db626 	beq	r16,zero,5424 <__alt_mem_Flash_flash_data+0xf4005424>
    5d4c:	00c00044 	movi	r3,1
    5d50:	d8c02b15 	stw	r3,172(sp)
    5d54:	dc001405 	stb	r16,80(sp)
    5d58:	d8002785 	stb	zero,158(sp)
    5d5c:	003f9e06 	br	5bd8 <__alt_mem_Flash_flash_data+0xf4005bd8>
    5d60:	d8c02017 	ldw	r3,128(sp)
    5d64:	003e5306 	br	56b4 <__alt_mem_Flash_flash_data+0xf40056b4>
    5d68:	10803fcc 	andi	r2,r2,255
    5d6c:	00c00044 	movi	r3,1
    5d70:	10fdfa1e 	bne	r2,r3,555c <__alt_mem_Flash_flash_data+0xf400555c>
    5d74:	e000021e 	bne	fp,zero,5d80 <___vfprintf_internal_r+0xd14>
    5d78:	00800244 	movi	r2,9
    5d7c:	14c0202e 	bgeu	r2,r19,5e00 <___vfprintf_internal_r+0xd94>
    5d80:	dc002b15 	stw	r16,172(sp)
    5d84:	dc402c15 	stw	r17,176(sp)
    5d88:	9821883a 	mov	r16,r19
    5d8c:	e023883a 	mov	r17,fp
    5d90:	dc801e04 	addi	r18,sp,120
    5d94:	4827883a 	mov	r19,r9
    5d98:	4039883a 	mov	fp,r8
    5d9c:	8009883a 	mov	r4,r16
    5da0:	880b883a 	mov	r5,r17
    5da4:	01800284 	movi	r6,10
    5da8:	000f883a 	mov	r7,zero
    5dac:	000f7b80 	call	f7b8 <__umoddi3>
    5db0:	10800c04 	addi	r2,r2,48
    5db4:	94bfffc4 	addi	r18,r18,-1
    5db8:	8009883a 	mov	r4,r16
    5dbc:	880b883a 	mov	r5,r17
    5dc0:	01800284 	movi	r6,10
    5dc4:	000f883a 	mov	r7,zero
    5dc8:	90800005 	stb	r2,0(r18)
    5dcc:	000f1f80 	call	f1f8 <__udivdi3>
    5dd0:	1021883a 	mov	r16,r2
    5dd4:	10c4b03a 	or	r2,r2,r3
    5dd8:	1823883a 	mov	r17,r3
    5ddc:	103fef1e 	bne	r2,zero,5d9c <__alt_mem_Flash_flash_data+0xf4005d9c>
    5de0:	dac02817 	ldw	r11,160(sp)
    5de4:	dc803115 	stw	r18,196(sp)
    5de8:	dc002b17 	ldw	r16,172(sp)
    5dec:	dc402c17 	ldw	r17,176(sp)
    5df0:	9813883a 	mov	r9,r19
    5df4:	e011883a 	mov	r8,fp
    5df8:	5ca5c83a 	sub	r18,r11,r18
    5dfc:	003de906 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    5e00:	9cc00c04 	addi	r19,r19,48
    5e04:	d8c01dc4 	addi	r3,sp,119
    5e08:	dcc01dc5 	stb	r19,119(sp)
    5e0c:	dc803c17 	ldw	r18,240(sp)
    5e10:	d8c03115 	stw	r3,196(sp)
    5e14:	003de306 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    5e18:	00801944 	movi	r2,101
    5e1c:	1400710e 	bge	r2,r16,5fe4 <___vfprintf_internal_r+0xf78>
    5e20:	d9003717 	ldw	r4,220(sp)
    5e24:	d9403917 	ldw	r5,228(sp)
    5e28:	000d883a 	mov	r6,zero
    5e2c:	000f883a 	mov	r7,zero
    5e30:	d8c03d15 	stw	r3,244(sp)
    5e34:	da003f15 	stw	r8,252(sp)
    5e38:	0010fdc0 	call	10fdc <__eqdf2>
    5e3c:	d8c03d17 	ldw	r3,244(sp)
    5e40:	da003f17 	ldw	r8,252(sp)
    5e44:	1000ef1e 	bne	r2,zero,6204 <___vfprintf_internal_r+0x1198>
    5e48:	d8801f17 	ldw	r2,124(sp)
    5e4c:	010000b4 	movhi	r4,2
    5e50:	213ec304 	addi	r4,r4,-1268
    5e54:	18c00044 	addi	r3,r3,1
    5e58:	10800044 	addi	r2,r2,1
    5e5c:	41000015 	stw	r4,0(r8)
    5e60:	01000044 	movi	r4,1
    5e64:	41000115 	stw	r4,4(r8)
    5e68:	d8c02015 	stw	r3,128(sp)
    5e6c:	d8801f15 	stw	r2,124(sp)
    5e70:	010001c4 	movi	r4,7
    5e74:	20828e16 	blt	r4,r2,68b0 <___vfprintf_internal_r+0x1844>
    5e78:	42000204 	addi	r8,r8,8
    5e7c:	d8802617 	ldw	r2,152(sp)
    5e80:	dac03317 	ldw	r11,204(sp)
    5e84:	12c00216 	blt	r2,r11,5e90 <___vfprintf_internal_r+0xe24>
    5e88:	8880004c 	andi	r2,r17,1
    5e8c:	103e5d26 	beq	r2,zero,5804 <__alt_mem_Flash_flash_data+0xf4005804>
    5e90:	db003817 	ldw	r12,224(sp)
    5e94:	d8801f17 	ldw	r2,124(sp)
    5e98:	dac03517 	ldw	r11,212(sp)
    5e9c:	1b07883a 	add	r3,r3,r12
    5ea0:	10800044 	addi	r2,r2,1
    5ea4:	42c00015 	stw	r11,0(r8)
    5ea8:	43000115 	stw	r12,4(r8)
    5eac:	d8c02015 	stw	r3,128(sp)
    5eb0:	d8801f15 	stw	r2,124(sp)
    5eb4:	010001c4 	movi	r4,7
    5eb8:	2082ed16 	blt	r4,r2,6a70 <___vfprintf_internal_r+0x1a04>
    5ebc:	42000204 	addi	r8,r8,8
    5ec0:	db003317 	ldw	r12,204(sp)
    5ec4:	643fffc4 	addi	r16,r12,-1
    5ec8:	043e4e0e 	bge	zero,r16,5804 <__alt_mem_Flash_flash_data+0xf4005804>
    5ecc:	04800404 	movi	r18,16
    5ed0:	d8801f17 	ldw	r2,124(sp)
    5ed4:	94007e0e 	bge	r18,r16,60d0 <___vfprintf_internal_r+0x1064>
    5ed8:	014000b4 	movhi	r5,2
    5edc:	297ecb84 	addi	r5,r5,-1234
    5ee0:	d9402c15 	stw	r5,176(sp)
    5ee4:	054001c4 	movi	r21,7
    5ee8:	00000306 	br	5ef8 <___vfprintf_internal_r+0xe8c>
    5eec:	42000204 	addi	r8,r8,8
    5ef0:	843ffc04 	addi	r16,r16,-16
    5ef4:	9400790e 	bge	r18,r16,60dc <___vfprintf_internal_r+0x1070>
    5ef8:	18c00404 	addi	r3,r3,16
    5efc:	10800044 	addi	r2,r2,1
    5f00:	45000015 	stw	r20,0(r8)
    5f04:	44800115 	stw	r18,4(r8)
    5f08:	d8c02015 	stw	r3,128(sp)
    5f0c:	d8801f15 	stw	r2,124(sp)
    5f10:	a8bff60e 	bge	r21,r2,5eec <__alt_mem_Flash_flash_data+0xf4005eec>
    5f14:	b009883a 	mov	r4,r22
    5f18:	b80b883a 	mov	r5,r23
    5f1c:	d9801e04 	addi	r6,sp,120
    5f20:	000d5380 	call	d538 <__sprint_r>
    5f24:	103d451e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    5f28:	d8c02017 	ldw	r3,128(sp)
    5f2c:	d8801f17 	ldw	r2,124(sp)
    5f30:	da000404 	addi	r8,sp,16
    5f34:	003fee06 	br	5ef0 <__alt_mem_Flash_flash_data+0xf4005ef0>
    5f38:	dac02e17 	ldw	r11,184(sp)
    5f3c:	db002b17 	ldw	r12,172(sp)
    5f40:	5b2bc83a 	sub	r21,r11,r12
    5f44:	057df90e 	bge	zero,r21,572c <__alt_mem_Flash_flash_data+0xf400572c>
    5f48:	07000404 	movi	fp,16
    5f4c:	d8801f17 	ldw	r2,124(sp)
    5f50:	e543640e 	bge	fp,r21,6ce4 <___vfprintf_internal_r+0x1c78>
    5f54:	014000b4 	movhi	r5,2
    5f58:	297ecb84 	addi	r5,r5,-1234
    5f5c:	d9402c15 	stw	r5,176(sp)
    5f60:	04c001c4 	movi	r19,7
    5f64:	00000306 	br	5f74 <___vfprintf_internal_r+0xf08>
    5f68:	ad7ffc04 	addi	r21,r21,-16
    5f6c:	42000204 	addi	r8,r8,8
    5f70:	e540110e 	bge	fp,r21,5fb8 <___vfprintf_internal_r+0xf4c>
    5f74:	18c00404 	addi	r3,r3,16
    5f78:	10800044 	addi	r2,r2,1
    5f7c:	45000015 	stw	r20,0(r8)
    5f80:	47000115 	stw	fp,4(r8)
    5f84:	d8c02015 	stw	r3,128(sp)
    5f88:	d8801f15 	stw	r2,124(sp)
    5f8c:	98bff60e 	bge	r19,r2,5f68 <__alt_mem_Flash_flash_data+0xf4005f68>
    5f90:	b009883a 	mov	r4,r22
    5f94:	b80b883a 	mov	r5,r23
    5f98:	d9801e04 	addi	r6,sp,120
    5f9c:	000d5380 	call	d538 <__sprint_r>
    5fa0:	103d261e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    5fa4:	ad7ffc04 	addi	r21,r21,-16
    5fa8:	d8c02017 	ldw	r3,128(sp)
    5fac:	d8801f17 	ldw	r2,124(sp)
    5fb0:	da000404 	addi	r8,sp,16
    5fb4:	e57fef16 	blt	fp,r21,5f74 <__alt_mem_Flash_flash_data+0xf4005f74>
    5fb8:	dac02c17 	ldw	r11,176(sp)
    5fbc:	1d47883a 	add	r3,r3,r21
    5fc0:	10800044 	addi	r2,r2,1
    5fc4:	42c00015 	stw	r11,0(r8)
    5fc8:	45400115 	stw	r21,4(r8)
    5fcc:	d8c02015 	stw	r3,128(sp)
    5fd0:	d8801f15 	stw	r2,124(sp)
    5fd4:	010001c4 	movi	r4,7
    5fd8:	20819116 	blt	r4,r2,6620 <___vfprintf_internal_r+0x15b4>
    5fdc:	42000204 	addi	r8,r8,8
    5fe0:	003dd206 	br	572c <__alt_mem_Flash_flash_data+0xf400572c>
    5fe4:	db003317 	ldw	r12,204(sp)
    5fe8:	00800044 	movi	r2,1
    5fec:	18c00044 	addi	r3,r3,1
    5ff0:	1301530e 	bge	r2,r12,6540 <___vfprintf_internal_r+0x14d4>
    5ff4:	dc001f17 	ldw	r16,124(sp)
    5ff8:	dac03117 	ldw	r11,196(sp)
    5ffc:	00800044 	movi	r2,1
    6000:	84000044 	addi	r16,r16,1
    6004:	40800115 	stw	r2,4(r8)
    6008:	42c00015 	stw	r11,0(r8)
    600c:	d8c02015 	stw	r3,128(sp)
    6010:	dc001f15 	stw	r16,124(sp)
    6014:	008001c4 	movi	r2,7
    6018:	14016b16 	blt	r2,r16,65c8 <___vfprintf_internal_r+0x155c>
    601c:	42000204 	addi	r8,r8,8
    6020:	db003817 	ldw	r12,224(sp)
    6024:	dac03517 	ldw	r11,212(sp)
    6028:	84000044 	addi	r16,r16,1
    602c:	1b07883a 	add	r3,r3,r12
    6030:	42c00015 	stw	r11,0(r8)
    6034:	43000115 	stw	r12,4(r8)
    6038:	d8c02015 	stw	r3,128(sp)
    603c:	dc001f15 	stw	r16,124(sp)
    6040:	008001c4 	movi	r2,7
    6044:	14016916 	blt	r2,r16,65ec <___vfprintf_internal_r+0x1580>
    6048:	44800204 	addi	r18,r8,8
    604c:	d9003717 	ldw	r4,220(sp)
    6050:	d9403917 	ldw	r5,228(sp)
    6054:	000d883a 	mov	r6,zero
    6058:	000f883a 	mov	r7,zero
    605c:	d8c03d15 	stw	r3,244(sp)
    6060:	0010fdc0 	call	10fdc <__eqdf2>
    6064:	d8c03d17 	ldw	r3,244(sp)
    6068:	db003317 	ldw	r12,204(sp)
    606c:	1000ad26 	beq	r2,zero,6324 <___vfprintf_internal_r+0x12b8>
    6070:	dac03117 	ldw	r11,196(sp)
    6074:	60bfffc4 	addi	r2,r12,-1
    6078:	1887883a 	add	r3,r3,r2
    607c:	59000044 	addi	r4,r11,1
    6080:	84000044 	addi	r16,r16,1
    6084:	90800115 	stw	r2,4(r18)
    6088:	91000015 	stw	r4,0(r18)
    608c:	d8c02015 	stw	r3,128(sp)
    6090:	dc001f15 	stw	r16,124(sp)
    6094:	008001c4 	movi	r2,7
    6098:	14014216 	blt	r2,r16,65a4 <___vfprintf_internal_r+0x1538>
    609c:	94800204 	addi	r18,r18,8
    60a0:	dac03a17 	ldw	r11,232(sp)
    60a4:	dd4022c4 	addi	r21,sp,139
    60a8:	84000044 	addi	r16,r16,1
    60ac:	1ac7883a 	add	r3,r3,r11
    60b0:	95400015 	stw	r21,0(r18)
    60b4:	92c00115 	stw	r11,4(r18)
    60b8:	d8c02015 	stw	r3,128(sp)
    60bc:	dc001f15 	stw	r16,124(sp)
    60c0:	008001c4 	movi	r2,7
    60c4:	14000e16 	blt	r2,r16,6100 <___vfprintf_internal_r+0x1094>
    60c8:	92000204 	addi	r8,r18,8
    60cc:	003dcd06 	br	5804 <__alt_mem_Flash_flash_data+0xf4005804>
    60d0:	010000b4 	movhi	r4,2
    60d4:	213ecb84 	addi	r4,r4,-1234
    60d8:	d9002c15 	stw	r4,176(sp)
    60dc:	dac02c17 	ldw	r11,176(sp)
    60e0:	1c07883a 	add	r3,r3,r16
    60e4:	44000115 	stw	r16,4(r8)
    60e8:	42c00015 	stw	r11,0(r8)
    60ec:	10800044 	addi	r2,r2,1
    60f0:	d8c02015 	stw	r3,128(sp)
    60f4:	d8801f15 	stw	r2,124(sp)
    60f8:	010001c4 	movi	r4,7
    60fc:	20bdc00e 	bge	r4,r2,5800 <__alt_mem_Flash_flash_data+0xf4005800>
    6100:	b009883a 	mov	r4,r22
    6104:	b80b883a 	mov	r5,r23
    6108:	d9801e04 	addi	r6,sp,120
    610c:	000d5380 	call	d538 <__sprint_r>
    6110:	103cca1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6114:	d8c02017 	ldw	r3,128(sp)
    6118:	da000404 	addi	r8,sp,16
    611c:	003db906 	br	5804 <__alt_mem_Flash_flash_data+0xf4005804>
    6120:	b009883a 	mov	r4,r22
    6124:	b80b883a 	mov	r5,r23
    6128:	d9801e04 	addi	r6,sp,120
    612c:	000d5380 	call	d538 <__sprint_r>
    6130:	103def26 	beq	r2,zero,58f0 <__alt_mem_Flash_flash_data+0xf40058f0>
    6134:	003cc106 	br	543c <__alt_mem_Flash_flash_data+0xf400543c>
    6138:	10803fcc 	andi	r2,r2,255
    613c:	1000651e 	bne	r2,zero,62d4 <___vfprintf_internal_r+0x1268>
    6140:	8880004c 	andi	r2,r17,1
    6144:	10013226 	beq	r2,zero,6610 <___vfprintf_internal_r+0x15a4>
    6148:	00800c04 	movi	r2,48
    614c:	d8c01dc4 	addi	r3,sp,119
    6150:	d8801dc5 	stb	r2,119(sp)
    6154:	dc803c17 	ldw	r18,240(sp)
    6158:	d8c03115 	stw	r3,196(sp)
    615c:	003d1106 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    6160:	b009883a 	mov	r4,r22
    6164:	b80b883a 	mov	r5,r23
    6168:	d9801e04 	addi	r6,sp,120
    616c:	000d5380 	call	d538 <__sprint_r>
    6170:	103cb21e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6174:	d8c02017 	ldw	r3,128(sp)
    6178:	da000404 	addi	r8,sp,16
    617c:	003d9406 	br	57d0 <__alt_mem_Flash_flash_data+0xf40057d0>
    6180:	b009883a 	mov	r4,r22
    6184:	b80b883a 	mov	r5,r23
    6188:	d9801e04 	addi	r6,sp,120
    618c:	000d5380 	call	d538 <__sprint_r>
    6190:	103caa1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6194:	d8c02017 	ldw	r3,128(sp)
    6198:	da000404 	addi	r8,sp,16
    619c:	003d5206 	br	56e8 <__alt_mem_Flash_flash_data+0xf40056e8>
    61a0:	b009883a 	mov	r4,r22
    61a4:	b80b883a 	mov	r5,r23
    61a8:	d9801e04 	addi	r6,sp,120
    61ac:	000d5380 	call	d538 <__sprint_r>
    61b0:	103ca21e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    61b4:	d8c02017 	ldw	r3,128(sp)
    61b8:	da000404 	addi	r8,sp,16
    61bc:	003d5806 	br	5720 <__alt_mem_Flash_flash_data+0xf4005720>
    61c0:	d9403b17 	ldw	r5,236(sp)
    61c4:	d8c01e04 	addi	r3,sp,120
    61c8:	988003cc 	andi	r2,r19,15
    61cc:	e008973a 	slli	r4,fp,28
    61d0:	2885883a 	add	r2,r5,r2
    61d4:	9826d13a 	srli	r19,r19,4
    61d8:	10800003 	ldbu	r2,0(r2)
    61dc:	e038d13a 	srli	fp,fp,4
    61e0:	18ffffc4 	addi	r3,r3,-1
    61e4:	24e6b03a 	or	r19,r4,r19
    61e8:	18800005 	stb	r2,0(r3)
    61ec:	9f04b03a 	or	r2,r19,fp
    61f0:	103ff51e 	bne	r2,zero,61c8 <__alt_mem_Flash_flash_data+0xf40061c8>
    61f4:	db002817 	ldw	r12,160(sp)
    61f8:	d8c03115 	stw	r3,196(sp)
    61fc:	60e5c83a 	sub	r18,r12,r3
    6200:	003ce806 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    6204:	dc002617 	ldw	r16,152(sp)
    6208:	0401b10e 	bge	zero,r16,68d0 <___vfprintf_internal_r+0x1864>
    620c:	db003117 	ldw	r12,196(sp)
    6210:	dac03317 	ldw	r11,204(sp)
    6214:	62e1883a 	add	r16,r12,r11
    6218:	db003417 	ldw	r12,208(sp)
    621c:	5825883a 	mov	r18,r11
    6220:	62c0010e 	bge	r12,r11,6228 <___vfprintf_internal_r+0x11bc>
    6224:	6025883a 	mov	r18,r12
    6228:	04800b0e 	bge	zero,r18,6258 <___vfprintf_internal_r+0x11ec>
    622c:	d8801f17 	ldw	r2,124(sp)
    6230:	dac03117 	ldw	r11,196(sp)
    6234:	1c87883a 	add	r3,r3,r18
    6238:	10800044 	addi	r2,r2,1
    623c:	42c00015 	stw	r11,0(r8)
    6240:	44800115 	stw	r18,4(r8)
    6244:	d8c02015 	stw	r3,128(sp)
    6248:	d8801f15 	stw	r2,124(sp)
    624c:	010001c4 	movi	r4,7
    6250:	20824f16 	blt	r4,r2,6b90 <___vfprintf_internal_r+0x1b24>
    6254:	42000204 	addi	r8,r8,8
    6258:	90024b16 	blt	r18,zero,6b88 <___vfprintf_internal_r+0x1b1c>
    625c:	db003417 	ldw	r12,208(sp)
    6260:	64a5c83a 	sub	r18,r12,r18
    6264:	0480730e 	bge	zero,r18,6434 <___vfprintf_internal_r+0x13c8>
    6268:	05400404 	movi	r21,16
    626c:	d8801f17 	ldw	r2,124(sp)
    6270:	ac817d0e 	bge	r21,r18,6868 <___vfprintf_internal_r+0x17fc>
    6274:	014000b4 	movhi	r5,2
    6278:	297ecb84 	addi	r5,r5,-1234
    627c:	d9402c15 	stw	r5,176(sp)
    6280:	070001c4 	movi	fp,7
    6284:	00000306 	br	6294 <___vfprintf_internal_r+0x1228>
    6288:	42000204 	addi	r8,r8,8
    628c:	94bffc04 	addi	r18,r18,-16
    6290:	ac81780e 	bge	r21,r18,6874 <___vfprintf_internal_r+0x1808>
    6294:	18c00404 	addi	r3,r3,16
    6298:	10800044 	addi	r2,r2,1
    629c:	45000015 	stw	r20,0(r8)
    62a0:	45400115 	stw	r21,4(r8)
    62a4:	d8c02015 	stw	r3,128(sp)
    62a8:	d8801f15 	stw	r2,124(sp)
    62ac:	e0bff60e 	bge	fp,r2,6288 <__alt_mem_Flash_flash_data+0xf4006288>
    62b0:	b009883a 	mov	r4,r22
    62b4:	b80b883a 	mov	r5,r23
    62b8:	d9801e04 	addi	r6,sp,120
    62bc:	000d5380 	call	d538 <__sprint_r>
    62c0:	103c5e1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    62c4:	d8c02017 	ldw	r3,128(sp)
    62c8:	d8801f17 	ldw	r2,124(sp)
    62cc:	da000404 	addi	r8,sp,16
    62d0:	003fee06 	br	628c <__alt_mem_Flash_flash_data+0xf400628c>
    62d4:	dac01e04 	addi	r11,sp,120
    62d8:	0025883a 	mov	r18,zero
    62dc:	dac03115 	stw	r11,196(sp)
    62e0:	003cb006 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    62e4:	b009883a 	mov	r4,r22
    62e8:	b80b883a 	mov	r5,r23
    62ec:	d9801e04 	addi	r6,sp,120
    62f0:	000d5380 	call	d538 <__sprint_r>
    62f4:	103c511e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    62f8:	d8c02017 	ldw	r3,128(sp)
    62fc:	d8802787 	ldb	r2,158(sp)
    6300:	da000404 	addi	r8,sp,16
    6304:	003ceb06 	br	56b4 <__alt_mem_Flash_flash_data+0xf40056b4>
    6308:	1cc00017 	ldw	r19,0(r3)
    630c:	dac02d17 	ldw	r11,180(sp)
    6310:	9839d7fa 	srai	fp,r19,31
    6314:	5ac00104 	addi	r11,r11,4
    6318:	dac02d15 	stw	r11,180(sp)
    631c:	e005883a 	mov	r2,fp
    6320:	003c8106 	br	5528 <__alt_mem_Flash_flash_data+0xf4005528>
    6324:	657fffc4 	addi	r21,r12,-1
    6328:	057f5d0e 	bge	zero,r21,60a0 <__alt_mem_Flash_flash_data+0xf40060a0>
    632c:	07000404 	movi	fp,16
    6330:	e540900e 	bge	fp,r21,6574 <___vfprintf_internal_r+0x1508>
    6334:	010000b4 	movhi	r4,2
    6338:	213ecb84 	addi	r4,r4,-1234
    633c:	d9002c15 	stw	r4,176(sp)
    6340:	01c001c4 	movi	r7,7
    6344:	00000306 	br	6354 <___vfprintf_internal_r+0x12e8>
    6348:	94800204 	addi	r18,r18,8
    634c:	ad7ffc04 	addi	r21,r21,-16
    6350:	e5408b0e 	bge	fp,r21,6580 <___vfprintf_internal_r+0x1514>
    6354:	18c00404 	addi	r3,r3,16
    6358:	84000044 	addi	r16,r16,1
    635c:	95000015 	stw	r20,0(r18)
    6360:	97000115 	stw	fp,4(r18)
    6364:	d8c02015 	stw	r3,128(sp)
    6368:	dc001f15 	stw	r16,124(sp)
    636c:	3c3ff60e 	bge	r7,r16,6348 <__alt_mem_Flash_flash_data+0xf4006348>
    6370:	b009883a 	mov	r4,r22
    6374:	b80b883a 	mov	r5,r23
    6378:	d9801e04 	addi	r6,sp,120
    637c:	d9c03d15 	stw	r7,244(sp)
    6380:	000d5380 	call	d538 <__sprint_r>
    6384:	d9c03d17 	ldw	r7,244(sp)
    6388:	103c2c1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    638c:	d8c02017 	ldw	r3,128(sp)
    6390:	dc001f17 	ldw	r16,124(sp)
    6394:	dc800404 	addi	r18,sp,16
    6398:	003fec06 	br	634c <__alt_mem_Flash_flash_data+0xf400634c>
    639c:	dac02d17 	ldw	r11,180(sp)
    63a0:	0039883a 	mov	fp,zero
    63a4:	0005883a 	mov	r2,zero
    63a8:	5cc00017 	ldw	r19,0(r11)
    63ac:	5ac00104 	addi	r11,r11,4
    63b0:	dac02d15 	stw	r11,180(sp)
    63b4:	9807883a 	mov	r3,r19
    63b8:	003d5b06 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    63bc:	db002d17 	ldw	r12,180(sp)
    63c0:	0039883a 	mov	fp,zero
    63c4:	00800044 	movi	r2,1
    63c8:	64c00017 	ldw	r19,0(r12)
    63cc:	63000104 	addi	r12,r12,4
    63d0:	db002d15 	stw	r12,180(sp)
    63d4:	9807883a 	mov	r3,r19
    63d8:	003d5306 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    63dc:	00800084 	movi	r2,2
    63e0:	9f06b03a 	or	r3,r19,fp
    63e4:	003d5006 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    63e8:	10803fcc 	andi	r2,r2,255
    63ec:	1080201c 	xori	r2,r2,128
    63f0:	10bfe004 	addi	r2,r2,-128
    63f4:	01000c04 	movi	r4,48
    63f8:	1101a526 	beq	r2,r4,6a90 <___vfprintf_internal_r+0x1a24>
    63fc:	dac03117 	ldw	r11,196(sp)
    6400:	db002817 	ldw	r12,160(sp)
    6404:	193fffc5 	stb	r4,-1(r3)
    6408:	5affffc4 	addi	r11,r11,-1
    640c:	dac03115 	stw	r11,196(sp)
    6410:	62e5c83a 	sub	r18,r12,r11
    6414:	003c6306 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    6418:	b009883a 	mov	r4,r22
    641c:	b80b883a 	mov	r5,r23
    6420:	d9801e04 	addi	r6,sp,120
    6424:	000d5380 	call	d538 <__sprint_r>
    6428:	103c041e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    642c:	d8c02017 	ldw	r3,128(sp)
    6430:	da000404 	addi	r8,sp,16
    6434:	db003117 	ldw	r12,196(sp)
    6438:	dac03417 	ldw	r11,208(sp)
    643c:	d8802617 	ldw	r2,152(sp)
    6440:	62e5883a 	add	r18,r12,r11
    6444:	db003317 	ldw	r12,204(sp)
    6448:	13000216 	blt	r2,r12,6454 <___vfprintf_internal_r+0x13e8>
    644c:	8900004c 	andi	r4,r17,1
    6450:	20000c26 	beq	r4,zero,6484 <___vfprintf_internal_r+0x1418>
    6454:	dac03817 	ldw	r11,224(sp)
    6458:	d9001f17 	ldw	r4,124(sp)
    645c:	db003517 	ldw	r12,212(sp)
    6460:	1ac7883a 	add	r3,r3,r11
    6464:	21000044 	addi	r4,r4,1
    6468:	43000015 	stw	r12,0(r8)
    646c:	42c00115 	stw	r11,4(r8)
    6470:	d8c02015 	stw	r3,128(sp)
    6474:	d9001f15 	stw	r4,124(sp)
    6478:	014001c4 	movi	r5,7
    647c:	2901cc16 	blt	r5,r4,6bb0 <___vfprintf_internal_r+0x1b44>
    6480:	42000204 	addi	r8,r8,8
    6484:	dac03317 	ldw	r11,204(sp)
    6488:	8489c83a 	sub	r4,r16,r18
    648c:	5885c83a 	sub	r2,r11,r2
    6490:	1021883a 	mov	r16,r2
    6494:	2080010e 	bge	r4,r2,649c <___vfprintf_internal_r+0x1430>
    6498:	2021883a 	mov	r16,r4
    649c:	04000a0e 	bge	zero,r16,64c8 <___vfprintf_internal_r+0x145c>
    64a0:	d9001f17 	ldw	r4,124(sp)
    64a4:	1c07883a 	add	r3,r3,r16
    64a8:	44800015 	stw	r18,0(r8)
    64ac:	21000044 	addi	r4,r4,1
    64b0:	44000115 	stw	r16,4(r8)
    64b4:	d8c02015 	stw	r3,128(sp)
    64b8:	d9001f15 	stw	r4,124(sp)
    64bc:	014001c4 	movi	r5,7
    64c0:	2901e316 	blt	r5,r4,6c50 <___vfprintf_internal_r+0x1be4>
    64c4:	42000204 	addi	r8,r8,8
    64c8:	8001df16 	blt	r16,zero,6c48 <___vfprintf_internal_r+0x1bdc>
    64cc:	1421c83a 	sub	r16,r2,r16
    64d0:	043ccc0e 	bge	zero,r16,5804 <__alt_mem_Flash_flash_data+0xf4005804>
    64d4:	04800404 	movi	r18,16
    64d8:	d8801f17 	ldw	r2,124(sp)
    64dc:	943efc0e 	bge	r18,r16,60d0 <__alt_mem_Flash_flash_data+0xf40060d0>
    64e0:	014000b4 	movhi	r5,2
    64e4:	297ecb84 	addi	r5,r5,-1234
    64e8:	d9402c15 	stw	r5,176(sp)
    64ec:	054001c4 	movi	r21,7
    64f0:	00000306 	br	6500 <___vfprintf_internal_r+0x1494>
    64f4:	42000204 	addi	r8,r8,8
    64f8:	843ffc04 	addi	r16,r16,-16
    64fc:	943ef70e 	bge	r18,r16,60dc <__alt_mem_Flash_flash_data+0xf40060dc>
    6500:	18c00404 	addi	r3,r3,16
    6504:	10800044 	addi	r2,r2,1
    6508:	45000015 	stw	r20,0(r8)
    650c:	44800115 	stw	r18,4(r8)
    6510:	d8c02015 	stw	r3,128(sp)
    6514:	d8801f15 	stw	r2,124(sp)
    6518:	a8bff60e 	bge	r21,r2,64f4 <__alt_mem_Flash_flash_data+0xf40064f4>
    651c:	b009883a 	mov	r4,r22
    6520:	b80b883a 	mov	r5,r23
    6524:	d9801e04 	addi	r6,sp,120
    6528:	000d5380 	call	d538 <__sprint_r>
    652c:	103bc31e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6530:	d8c02017 	ldw	r3,128(sp)
    6534:	d8801f17 	ldw	r2,124(sp)
    6538:	da000404 	addi	r8,sp,16
    653c:	003fee06 	br	64f8 <__alt_mem_Flash_flash_data+0xf40064f8>
    6540:	8888703a 	and	r4,r17,r2
    6544:	203eab1e 	bne	r4,zero,5ff4 <__alt_mem_Flash_flash_data+0xf4005ff4>
    6548:	dc001f17 	ldw	r16,124(sp)
    654c:	db003117 	ldw	r12,196(sp)
    6550:	40800115 	stw	r2,4(r8)
    6554:	84000044 	addi	r16,r16,1
    6558:	43000015 	stw	r12,0(r8)
    655c:	d8c02015 	stw	r3,128(sp)
    6560:	dc001f15 	stw	r16,124(sp)
    6564:	008001c4 	movi	r2,7
    6568:	14000e16 	blt	r2,r16,65a4 <___vfprintf_internal_r+0x1538>
    656c:	44800204 	addi	r18,r8,8
    6570:	003ecb06 	br	60a0 <__alt_mem_Flash_flash_data+0xf40060a0>
    6574:	008000b4 	movhi	r2,2
    6578:	10becb84 	addi	r2,r2,-1234
    657c:	d8802c15 	stw	r2,176(sp)
    6580:	dac02c17 	ldw	r11,176(sp)
    6584:	1d47883a 	add	r3,r3,r21
    6588:	84000044 	addi	r16,r16,1
    658c:	92c00015 	stw	r11,0(r18)
    6590:	95400115 	stw	r21,4(r18)
    6594:	d8c02015 	stw	r3,128(sp)
    6598:	dc001f15 	stw	r16,124(sp)
    659c:	008001c4 	movi	r2,7
    65a0:	143ebe0e 	bge	r2,r16,609c <__alt_mem_Flash_flash_data+0xf400609c>
    65a4:	b009883a 	mov	r4,r22
    65a8:	b80b883a 	mov	r5,r23
    65ac:	d9801e04 	addi	r6,sp,120
    65b0:	000d5380 	call	d538 <__sprint_r>
    65b4:	103ba11e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    65b8:	d8c02017 	ldw	r3,128(sp)
    65bc:	dc001f17 	ldw	r16,124(sp)
    65c0:	dc800404 	addi	r18,sp,16
    65c4:	003eb606 	br	60a0 <__alt_mem_Flash_flash_data+0xf40060a0>
    65c8:	b009883a 	mov	r4,r22
    65cc:	b80b883a 	mov	r5,r23
    65d0:	d9801e04 	addi	r6,sp,120
    65d4:	000d5380 	call	d538 <__sprint_r>
    65d8:	103b981e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    65dc:	d8c02017 	ldw	r3,128(sp)
    65e0:	dc001f17 	ldw	r16,124(sp)
    65e4:	da000404 	addi	r8,sp,16
    65e8:	003e8d06 	br	6020 <__alt_mem_Flash_flash_data+0xf4006020>
    65ec:	b009883a 	mov	r4,r22
    65f0:	b80b883a 	mov	r5,r23
    65f4:	d9801e04 	addi	r6,sp,120
    65f8:	000d5380 	call	d538 <__sprint_r>
    65fc:	103b8f1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6600:	d8c02017 	ldw	r3,128(sp)
    6604:	dc001f17 	ldw	r16,124(sp)
    6608:	dc800404 	addi	r18,sp,16
    660c:	003e8f06 	br	604c <__alt_mem_Flash_flash_data+0xf400604c>
    6610:	db001e04 	addi	r12,sp,120
    6614:	0025883a 	mov	r18,zero
    6618:	db003115 	stw	r12,196(sp)
    661c:	003be106 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    6620:	b009883a 	mov	r4,r22
    6624:	b80b883a 	mov	r5,r23
    6628:	d9801e04 	addi	r6,sp,120
    662c:	000d5380 	call	d538 <__sprint_r>
    6630:	103b821e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6634:	d8c02017 	ldw	r3,128(sp)
    6638:	da000404 	addi	r8,sp,16
    663c:	003c3b06 	br	572c <__alt_mem_Flash_flash_data+0xf400572c>
    6640:	04e7c83a 	sub	r19,zero,r19
    6644:	9804c03a 	cmpne	r2,r19,zero
    6648:	0739c83a 	sub	fp,zero,fp
    664c:	e0b9c83a 	sub	fp,fp,r2
    6650:	05400b44 	movi	r21,45
    6654:	dd402785 	stb	r21,158(sp)
    6658:	da403215 	stw	r9,200(sp)
    665c:	00800044 	movi	r2,1
    6660:	9f06b03a 	or	r3,r19,fp
    6664:	003bb506 	br	553c <__alt_mem_Flash_flash_data+0xf400553c>
    6668:	da003f15 	stw	r8,252(sp)
    666c:	da403e15 	stw	r9,248(sp)
    6670:	000bf900 	call	bf90 <__fpclassifyd>
    6674:	da003f17 	ldw	r8,252(sp)
    6678:	da403e17 	ldw	r9,248(sp)
    667c:	1000ce26 	beq	r2,zero,69b8 <___vfprintf_internal_r+0x194c>
    6680:	057ff7c4 	movi	r21,-33
    6684:	00bfffc4 	movi	r2,-1
    6688:	856a703a 	and	r21,r16,r21
    668c:	4881e826 	beq	r9,r2,6e30 <___vfprintf_internal_r+0x1dc4>
    6690:	008011c4 	movi	r2,71
    6694:	a881e326 	beq	r21,r2,6e24 <___vfprintf_internal_r+0x1db8>
    6698:	db003917 	ldw	r12,228(sp)
    669c:	8ac04014 	ori	r11,r17,256
    66a0:	dac02d15 	stw	r11,180(sp)
    66a4:	6001ed16 	blt	r12,zero,6e5c <___vfprintf_internal_r+0x1df0>
    66a8:	dc803917 	ldw	r18,228(sp)
    66ac:	d8002b05 	stb	zero,172(sp)
    66b0:	00801984 	movi	r2,102
    66b4:	80811826 	beq	r16,r2,6b18 <___vfprintf_internal_r+0x1aac>
    66b8:	00801184 	movi	r2,70
    66bc:	80811626 	beq	r16,r2,6b18 <___vfprintf_internal_r+0x1aac>
    66c0:	00801144 	movi	r2,69
    66c4:	a881e926 	beq	r21,r2,6e6c <___vfprintf_internal_r+0x1e00>
    66c8:	4839883a 	mov	fp,r9
    66cc:	d8802604 	addi	r2,sp,152
    66d0:	d8800115 	stw	r2,4(sp)
    66d4:	d9403717 	ldw	r5,220(sp)
    66d8:	d8802504 	addi	r2,sp,148
    66dc:	d8800215 	stw	r2,8(sp)
    66e0:	d8802104 	addi	r2,sp,132
    66e4:	df000015 	stw	fp,0(sp)
    66e8:	d8800315 	stw	r2,12(sp)
    66ec:	b009883a 	mov	r4,r22
    66f0:	900d883a 	mov	r6,r18
    66f4:	01c00084 	movi	r7,2
    66f8:	da003f15 	stw	r8,252(sp)
    66fc:	da403e15 	stw	r9,248(sp)
    6700:	00073f00 	call	73f0 <_dtoa_r>
    6704:	d8803115 	stw	r2,196(sp)
    6708:	008019c4 	movi	r2,103
    670c:	da003f17 	ldw	r8,252(sp)
    6710:	da403e17 	ldw	r9,248(sp)
    6714:	80800226 	beq	r16,r2,6720 <___vfprintf_internal_r+0x16b4>
    6718:	008011c4 	movi	r2,71
    671c:	8081101e 	bne	r16,r2,6b60 <___vfprintf_internal_r+0x1af4>
    6720:	8880004c 	andi	r2,r17,1
    6724:	1001dd26 	beq	r2,zero,6e9c <___vfprintf_internal_r+0x1e30>
    6728:	db003117 	ldw	r12,196(sp)
    672c:	6715883a 	add	r10,r12,fp
    6730:	d9003717 	ldw	r4,220(sp)
    6734:	900b883a 	mov	r5,r18
    6738:	000d883a 	mov	r6,zero
    673c:	000f883a 	mov	r7,zero
    6740:	da003f15 	stw	r8,252(sp)
    6744:	da403e15 	stw	r9,248(sp)
    6748:	da803d15 	stw	r10,244(sp)
    674c:	0010fdc0 	call	10fdc <__eqdf2>
    6750:	da003f17 	ldw	r8,252(sp)
    6754:	da403e17 	ldw	r9,248(sp)
    6758:	da803d17 	ldw	r10,244(sp)
    675c:	10016526 	beq	r2,zero,6cf4 <___vfprintf_internal_r+0x1c88>
    6760:	d8802117 	ldw	r2,132(sp)
    6764:	1280062e 	bgeu	r2,r10,6780 <___vfprintf_internal_r+0x1714>
    6768:	01000c04 	movi	r4,48
    676c:	10c00044 	addi	r3,r2,1
    6770:	d8c02115 	stw	r3,132(sp)
    6774:	11000005 	stb	r4,0(r2)
    6778:	d8802117 	ldw	r2,132(sp)
    677c:	12bffb36 	bltu	r2,r10,676c <__alt_mem_Flash_flash_data+0xf400676c>
    6780:	db003117 	ldw	r12,196(sp)
    6784:	1305c83a 	sub	r2,r2,r12
    6788:	d8803315 	stw	r2,204(sp)
    678c:	008011c4 	movi	r2,71
    6790:	a8814d26 	beq	r21,r2,6cc8 <___vfprintf_internal_r+0x1c5c>
    6794:	00801944 	movi	r2,101
    6798:	1402060e 	bge	r2,r16,6fb4 <___vfprintf_internal_r+0x1f48>
    679c:	00801984 	movi	r2,102
    67a0:	8081b426 	beq	r16,r2,6e74 <___vfprintf_internal_r+0x1e08>
    67a4:	db002617 	ldw	r12,152(sp)
    67a8:	db003415 	stw	r12,208(sp)
    67ac:	db003417 	ldw	r12,208(sp)
    67b0:	dac03317 	ldw	r11,204(sp)
    67b4:	62c1a016 	blt	r12,r11,6e38 <___vfprintf_internal_r+0x1dcc>
    67b8:	8c40004c 	andi	r17,r17,1
    67bc:	8801bf1e 	bne	r17,zero,6ebc <___vfprintf_internal_r+0x1e50>
    67c0:	6005883a 	mov	r2,r12
    67c4:	6001b316 	blt	r12,zero,6e94 <___vfprintf_internal_r+0x1e28>
    67c8:	dc803417 	ldw	r18,208(sp)
    67cc:	df002b07 	ldb	fp,172(sp)
    67d0:	e0012e1e 	bne	fp,zero,6c8c <___vfprintf_internal_r+0x1c20>
    67d4:	dc402d17 	ldw	r17,180(sp)
    67d8:	dd402783 	ldbu	r21,158(sp)
    67dc:	d8802b15 	stw	r2,172(sp)
    67e0:	dcc02d15 	stw	r19,180(sp)
    67e4:	d8003215 	stw	zero,200(sp)
    67e8:	003b7306 	br	55b8 <__alt_mem_Flash_flash_data+0xf40055b8>
    67ec:	00800084 	movi	r2,2
    67f0:	003c4d06 	br	5928 <__alt_mem_Flash_flash_data+0xf4005928>
    67f4:	8880040c 	andi	r2,r17,16
    67f8:	1000091e 	bne	r2,zero,6820 <___vfprintf_internal_r+0x17b4>
    67fc:	8c40100c 	andi	r17,r17,64
    6800:	88000726 	beq	r17,zero,6820 <___vfprintf_internal_r+0x17b4>
    6804:	db002d17 	ldw	r12,180(sp)
    6808:	dac02f17 	ldw	r11,188(sp)
    680c:	60800017 	ldw	r2,0(r12)
    6810:	63000104 	addi	r12,r12,4
    6814:	db002d15 	stw	r12,180(sp)
    6818:	12c0000d 	sth	r11,0(r2)
    681c:	003a4e06 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    6820:	db002d17 	ldw	r12,180(sp)
    6824:	dac02f17 	ldw	r11,188(sp)
    6828:	60800017 	ldw	r2,0(r12)
    682c:	63000104 	addi	r12,r12,4
    6830:	db002d15 	stw	r12,180(sp)
    6834:	12c00015 	stw	r11,0(r2)
    6838:	003a4706 	br	5158 <__alt_mem_Flash_flash_data+0xf4005158>
    683c:	1c000007 	ldb	r16,0(r3)
    6840:	1805883a 	mov	r2,r3
    6844:	003a6e06 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    6848:	88c0100c 	andi	r3,r17,64
    684c:	18006b26 	beq	r3,zero,69fc <___vfprintf_internal_r+0x1990>
    6850:	dac02d17 	ldw	r11,180(sp)
    6854:	14c0000b 	ldhu	r19,0(r2)
    6858:	0039883a 	mov	fp,zero
    685c:	5ac00104 	addi	r11,r11,4
    6860:	dac02d15 	stw	r11,180(sp)
    6864:	003cb206 	br	5b30 <__alt_mem_Flash_flash_data+0xf4005b30>
    6868:	010000b4 	movhi	r4,2
    686c:	213ecb84 	addi	r4,r4,-1234
    6870:	d9002c15 	stw	r4,176(sp)
    6874:	dac02c17 	ldw	r11,176(sp)
    6878:	1c87883a 	add	r3,r3,r18
    687c:	10800044 	addi	r2,r2,1
    6880:	42c00015 	stw	r11,0(r8)
    6884:	44800115 	stw	r18,4(r8)
    6888:	d8c02015 	stw	r3,128(sp)
    688c:	d8801f15 	stw	r2,124(sp)
    6890:	010001c4 	movi	r4,7
    6894:	20bee016 	blt	r4,r2,6418 <__alt_mem_Flash_flash_data+0xf4006418>
    6898:	42000204 	addi	r8,r8,8
    689c:	003ee506 	br	6434 <__alt_mem_Flash_flash_data+0xf4006434>
    68a0:	010000b4 	movhi	r4,2
    68a4:	213ecb84 	addi	r4,r4,-1234
    68a8:	d9002c15 	stw	r4,176(sp)
    68ac:	003bbe06 	br	57a8 <__alt_mem_Flash_flash_data+0xf40057a8>
    68b0:	b009883a 	mov	r4,r22
    68b4:	b80b883a 	mov	r5,r23
    68b8:	d9801e04 	addi	r6,sp,120
    68bc:	000d5380 	call	d538 <__sprint_r>
    68c0:	103ade1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    68c4:	d8c02017 	ldw	r3,128(sp)
    68c8:	da000404 	addi	r8,sp,16
    68cc:	003d6b06 	br	5e7c <__alt_mem_Flash_flash_data+0xf4005e7c>
    68d0:	d8801f17 	ldw	r2,124(sp)
    68d4:	030000b4 	movhi	r12,2
    68d8:	01000044 	movi	r4,1
    68dc:	18c00044 	addi	r3,r3,1
    68e0:	10800044 	addi	r2,r2,1
    68e4:	633ec304 	addi	r12,r12,-1268
    68e8:	41000115 	stw	r4,4(r8)
    68ec:	43000015 	stw	r12,0(r8)
    68f0:	d8c02015 	stw	r3,128(sp)
    68f4:	d8801f15 	stw	r2,124(sp)
    68f8:	010001c4 	movi	r4,7
    68fc:	20804916 	blt	r4,r2,6a24 <___vfprintf_internal_r+0x19b8>
    6900:	42000204 	addi	r8,r8,8
    6904:	8000041e 	bne	r16,zero,6918 <___vfprintf_internal_r+0x18ac>
    6908:	dac03317 	ldw	r11,204(sp)
    690c:	5800021e 	bne	r11,zero,6918 <___vfprintf_internal_r+0x18ac>
    6910:	8880004c 	andi	r2,r17,1
    6914:	103bbb26 	beq	r2,zero,5804 <__alt_mem_Flash_flash_data+0xf4005804>
    6918:	db003817 	ldw	r12,224(sp)
    691c:	d8801f17 	ldw	r2,124(sp)
    6920:	dac03517 	ldw	r11,212(sp)
    6924:	1b07883a 	add	r3,r3,r12
    6928:	10800044 	addi	r2,r2,1
    692c:	42c00015 	stw	r11,0(r8)
    6930:	43000115 	stw	r12,4(r8)
    6934:	d8c02015 	stw	r3,128(sp)
    6938:	d8801f15 	stw	r2,124(sp)
    693c:	010001c4 	movi	r4,7
    6940:	20812e16 	blt	r4,r2,6dfc <___vfprintf_internal_r+0x1d90>
    6944:	42000204 	addi	r8,r8,8
    6948:	0421c83a 	sub	r16,zero,r16
    694c:	04005c0e 	bge	zero,r16,6ac0 <___vfprintf_internal_r+0x1a54>
    6950:	04800404 	movi	r18,16
    6954:	94009f0e 	bge	r18,r16,6bd4 <___vfprintf_internal_r+0x1b68>
    6958:	010000b4 	movhi	r4,2
    695c:	213ecb84 	addi	r4,r4,-1234
    6960:	d9002c15 	stw	r4,176(sp)
    6964:	054001c4 	movi	r21,7
    6968:	00000306 	br	6978 <___vfprintf_internal_r+0x190c>
    696c:	42000204 	addi	r8,r8,8
    6970:	843ffc04 	addi	r16,r16,-16
    6974:	94009a0e 	bge	r18,r16,6be0 <___vfprintf_internal_r+0x1b74>
    6978:	18c00404 	addi	r3,r3,16
    697c:	10800044 	addi	r2,r2,1
    6980:	45000015 	stw	r20,0(r8)
    6984:	44800115 	stw	r18,4(r8)
    6988:	d8c02015 	stw	r3,128(sp)
    698c:	d8801f15 	stw	r2,124(sp)
    6990:	a8bff60e 	bge	r21,r2,696c <__alt_mem_Flash_flash_data+0xf400696c>
    6994:	b009883a 	mov	r4,r22
    6998:	b80b883a 	mov	r5,r23
    699c:	d9801e04 	addi	r6,sp,120
    69a0:	000d5380 	call	d538 <__sprint_r>
    69a4:	103aa51e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    69a8:	d8c02017 	ldw	r3,128(sp)
    69ac:	d8801f17 	ldw	r2,124(sp)
    69b0:	da000404 	addi	r8,sp,16
    69b4:	003fee06 	br	6970 <__alt_mem_Flash_flash_data+0xf4006970>
    69b8:	008011c4 	movi	r2,71
    69bc:	1400be16 	blt	r2,r16,6cb8 <___vfprintf_internal_r+0x1c4c>
    69c0:	030000b4 	movhi	r12,2
    69c4:	633eb504 	addi	r12,r12,-1324
    69c8:	db003115 	stw	r12,196(sp)
    69cc:	00c000c4 	movi	r3,3
    69d0:	00bfdfc4 	movi	r2,-129
    69d4:	d8c02b15 	stw	r3,172(sp)
    69d8:	88a2703a 	and	r17,r17,r2
    69dc:	dd402783 	ldbu	r21,158(sp)
    69e0:	dcc02d15 	stw	r19,180(sp)
    69e4:	1825883a 	mov	r18,r3
    69e8:	d8003215 	stw	zero,200(sp)
    69ec:	d8003415 	stw	zero,208(sp)
    69f0:	003af106 	br	55b8 <__alt_mem_Flash_flash_data+0xf40055b8>
    69f4:	4825883a 	mov	r18,r9
    69f8:	003c9306 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    69fc:	db002d17 	ldw	r12,180(sp)
    6a00:	14c00017 	ldw	r19,0(r2)
    6a04:	0039883a 	mov	fp,zero
    6a08:	63000104 	addi	r12,r12,4
    6a0c:	db002d15 	stw	r12,180(sp)
    6a10:	003c4706 	br	5b30 <__alt_mem_Flash_flash_data+0xf4005b30>
    6a14:	008000b4 	movhi	r2,2
    6a18:	10beb304 	addi	r2,r2,-1332
    6a1c:	d8803115 	stw	r2,196(sp)
    6a20:	003bf106 	br	59e8 <__alt_mem_Flash_flash_data+0xf40059e8>
    6a24:	b009883a 	mov	r4,r22
    6a28:	b80b883a 	mov	r5,r23
    6a2c:	d9801e04 	addi	r6,sp,120
    6a30:	000d5380 	call	d538 <__sprint_r>
    6a34:	103a811e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6a38:	dc002617 	ldw	r16,152(sp)
    6a3c:	d8c02017 	ldw	r3,128(sp)
    6a40:	da000404 	addi	r8,sp,16
    6a44:	003faf06 	br	6904 <__alt_mem_Flash_flash_data+0xf4006904>
    6a48:	db002e17 	ldw	r12,184(sp)
    6a4c:	1805883a 	mov	r2,r3
    6a50:	dac02d15 	stw	r11,180(sp)
    6a54:	0319c83a 	sub	r12,zero,r12
    6a58:	db002e15 	stw	r12,184(sp)
    6a5c:	003a8206 	br	5468 <__alt_mem_Flash_flash_data+0xf4005468>
    6a60:	18800044 	addi	r2,r3,1
    6a64:	8c400814 	ori	r17,r17,32
    6a68:	1c000047 	ldb	r16,1(r3)
    6a6c:	0039e406 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    6a70:	b009883a 	mov	r4,r22
    6a74:	b80b883a 	mov	r5,r23
    6a78:	d9801e04 	addi	r6,sp,120
    6a7c:	000d5380 	call	d538 <__sprint_r>
    6a80:	103a6e1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6a84:	d8c02017 	ldw	r3,128(sp)
    6a88:	da000404 	addi	r8,sp,16
    6a8c:	003d0c06 	br	5ec0 <__alt_mem_Flash_flash_data+0xf4005ec0>
    6a90:	db002817 	ldw	r12,160(sp)
    6a94:	d8c03117 	ldw	r3,196(sp)
    6a98:	60e5c83a 	sub	r18,r12,r3
    6a9c:	003ac106 	br	55a4 <__alt_mem_Flash_flash_data+0xf40055a4>
    6aa0:	b009883a 	mov	r4,r22
    6aa4:	b80b883a 	mov	r5,r23
    6aa8:	d9801e04 	addi	r6,sp,120
    6aac:	000d5380 	call	d538 <__sprint_r>
    6ab0:	103a621e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6ab4:	d8c02017 	ldw	r3,128(sp)
    6ab8:	d8801f17 	ldw	r2,124(sp)
    6abc:	da000404 	addi	r8,sp,16
    6ac0:	db003317 	ldw	r12,204(sp)
    6ac4:	dac03117 	ldw	r11,196(sp)
    6ac8:	10800044 	addi	r2,r2,1
    6acc:	1b07883a 	add	r3,r3,r12
    6ad0:	42c00015 	stw	r11,0(r8)
    6ad4:	43000115 	stw	r12,4(r8)
    6ad8:	d8c02015 	stw	r3,128(sp)
    6adc:	d8801f15 	stw	r2,124(sp)
    6ae0:	010001c4 	movi	r4,7
    6ae4:	20bb460e 	bge	r4,r2,5800 <__alt_mem_Flash_flash_data+0xf4005800>
    6ae8:	003d8506 	br	6100 <__alt_mem_Flash_flash_data+0xf4006100>
    6aec:	da003f15 	stw	r8,252(sp)
    6af0:	00030440 	call	3044 <strlen>
    6af4:	1025883a 	mov	r18,r2
    6af8:	da003f17 	ldw	r8,252(sp)
    6afc:	903c540e 	bge	r18,zero,5c50 <__alt_mem_Flash_flash_data+0xf4005c50>
    6b00:	0005883a 	mov	r2,zero
    6b04:	003c5206 	br	5c50 <__alt_mem_Flash_flash_data+0xf4005c50>
    6b08:	010000b4 	movhi	r4,2
    6b0c:	213ecf84 	addi	r4,r4,-1218
    6b10:	d9003615 	stw	r4,216(sp)
    6b14:	003adc06 	br	5688 <__alt_mem_Flash_flash_data+0xf4005688>
    6b18:	d8802604 	addi	r2,sp,152
    6b1c:	d8800115 	stw	r2,4(sp)
    6b20:	d9403717 	ldw	r5,220(sp)
    6b24:	d8802504 	addi	r2,sp,148
    6b28:	d8800215 	stw	r2,8(sp)
    6b2c:	d8802104 	addi	r2,sp,132
    6b30:	da400015 	stw	r9,0(sp)
    6b34:	d8800315 	stw	r2,12(sp)
    6b38:	b009883a 	mov	r4,r22
    6b3c:	900d883a 	mov	r6,r18
    6b40:	01c000c4 	movi	r7,3
    6b44:	da003f15 	stw	r8,252(sp)
    6b48:	da403e15 	stw	r9,248(sp)
    6b4c:	00073f00 	call	73f0 <_dtoa_r>
    6b50:	da403e17 	ldw	r9,248(sp)
    6b54:	da003f17 	ldw	r8,252(sp)
    6b58:	d8803115 	stw	r2,196(sp)
    6b5c:	4839883a 	mov	fp,r9
    6b60:	dac03117 	ldw	r11,196(sp)
    6b64:	00801184 	movi	r2,70
    6b68:	5f15883a 	add	r10,r11,fp
    6b6c:	a8bef01e 	bne	r21,r2,6730 <__alt_mem_Flash_flash_data+0xf4006730>
    6b70:	59000007 	ldb	r4,0(r11)
    6b74:	00800c04 	movi	r2,48
    6b78:	2080d526 	beq	r4,r2,6ed0 <___vfprintf_internal_r+0x1e64>
    6b7c:	d8c02617 	ldw	r3,152(sp)
    6b80:	50d5883a 	add	r10,r10,r3
    6b84:	003eea06 	br	6730 <__alt_mem_Flash_flash_data+0xf4006730>
    6b88:	0025883a 	mov	r18,zero
    6b8c:	003db306 	br	625c <__alt_mem_Flash_flash_data+0xf400625c>
    6b90:	b009883a 	mov	r4,r22
    6b94:	b80b883a 	mov	r5,r23
    6b98:	d9801e04 	addi	r6,sp,120
    6b9c:	000d5380 	call	d538 <__sprint_r>
    6ba0:	103a261e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6ba4:	d8c02017 	ldw	r3,128(sp)
    6ba8:	da000404 	addi	r8,sp,16
    6bac:	003daa06 	br	6258 <__alt_mem_Flash_flash_data+0xf4006258>
    6bb0:	b009883a 	mov	r4,r22
    6bb4:	b80b883a 	mov	r5,r23
    6bb8:	d9801e04 	addi	r6,sp,120
    6bbc:	000d5380 	call	d538 <__sprint_r>
    6bc0:	103a1e1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6bc4:	d8802617 	ldw	r2,152(sp)
    6bc8:	d8c02017 	ldw	r3,128(sp)
    6bcc:	da000404 	addi	r8,sp,16
    6bd0:	003e2c06 	br	6484 <__alt_mem_Flash_flash_data+0xf4006484>
    6bd4:	030000b4 	movhi	r12,2
    6bd8:	633ecb84 	addi	r12,r12,-1234
    6bdc:	db002c15 	stw	r12,176(sp)
    6be0:	dac02c17 	ldw	r11,176(sp)
    6be4:	1c07883a 	add	r3,r3,r16
    6be8:	10800044 	addi	r2,r2,1
    6bec:	42c00015 	stw	r11,0(r8)
    6bf0:	44000115 	stw	r16,4(r8)
    6bf4:	d8c02015 	stw	r3,128(sp)
    6bf8:	d8801f15 	stw	r2,124(sp)
    6bfc:	010001c4 	movi	r4,7
    6c00:	20bfa716 	blt	r4,r2,6aa0 <__alt_mem_Flash_flash_data+0xf4006aa0>
    6c04:	42000204 	addi	r8,r8,8
    6c08:	003fad06 	br	6ac0 <__alt_mem_Flash_flash_data+0xf4006ac0>
    6c0c:	00800184 	movi	r2,6
    6c10:	1240012e 	bgeu	r2,r9,6c18 <___vfprintf_internal_r+0x1bac>
    6c14:	1013883a 	mov	r9,r2
    6c18:	4825883a 	mov	r18,r9
    6c1c:	4805883a 	mov	r2,r9
    6c20:	4800c216 	blt	r9,zero,6f2c <___vfprintf_internal_r+0x1ec0>
    6c24:	d8802b15 	stw	r2,172(sp)
    6c28:	008000b4 	movhi	r2,2
    6c2c:	10bec104 	addi	r2,r2,-1276
    6c30:	d8803115 	stw	r2,196(sp)
    6c34:	dcc02d15 	stw	r19,180(sp)
    6c38:	d8003215 	stw	zero,200(sp)
    6c3c:	d8003415 	stw	zero,208(sp)
    6c40:	0005883a 	mov	r2,zero
    6c44:	003a6306 	br	55d4 <__alt_mem_Flash_flash_data+0xf40055d4>
    6c48:	0021883a 	mov	r16,zero
    6c4c:	003e1f06 	br	64cc <__alt_mem_Flash_flash_data+0xf40064cc>
    6c50:	b009883a 	mov	r4,r22
    6c54:	b80b883a 	mov	r5,r23
    6c58:	d9801e04 	addi	r6,sp,120
    6c5c:	000d5380 	call	d538 <__sprint_r>
    6c60:	1039f61e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6c64:	d8802617 	ldw	r2,152(sp)
    6c68:	db003317 	ldw	r12,204(sp)
    6c6c:	d8c02017 	ldw	r3,128(sp)
    6c70:	da000404 	addi	r8,sp,16
    6c74:	6085c83a 	sub	r2,r12,r2
    6c78:	003e1306 	br	64c8 <__alt_mem_Flash_flash_data+0xf40064c8>
    6c7c:	030000b4 	movhi	r12,2
    6c80:	633ecf84 	addi	r12,r12,-1218
    6c84:	db003615 	stw	r12,216(sp)
    6c88:	003b0206 	br	5894 <__alt_mem_Flash_flash_data+0xf4005894>
    6c8c:	00c00b44 	movi	r3,45
    6c90:	d8802b15 	stw	r2,172(sp)
    6c94:	dc402d17 	ldw	r17,180(sp)
    6c98:	d8c02785 	stb	r3,158(sp)
    6c9c:	dcc02d15 	stw	r19,180(sp)
    6ca0:	d8003215 	stw	zero,200(sp)
    6ca4:	00800b44 	movi	r2,45
    6ca8:	003a4706 	br	55c8 <__alt_mem_Flash_flash_data+0xf40055c8>
    6cac:	05400b44 	movi	r21,45
    6cb0:	dd402785 	stb	r21,158(sp)
    6cb4:	003b4706 	br	59d4 <__alt_mem_Flash_flash_data+0xf40059d4>
    6cb8:	008000b4 	movhi	r2,2
    6cbc:	10beb604 	addi	r2,r2,-1320
    6cc0:	d8803115 	stw	r2,196(sp)
    6cc4:	003f4106 	br	69cc <__alt_mem_Flash_flash_data+0xf40069cc>
    6cc8:	d8c02617 	ldw	r3,152(sp)
    6ccc:	00bfff44 	movi	r2,-3
    6cd0:	18801116 	blt	r3,r2,6d18 <___vfprintf_internal_r+0x1cac>
    6cd4:	48c01016 	blt	r9,r3,6d18 <___vfprintf_internal_r+0x1cac>
    6cd8:	d8c03415 	stw	r3,208(sp)
    6cdc:	040019c4 	movi	r16,103
    6ce0:	003eb206 	br	67ac <__alt_mem_Flash_flash_data+0xf40067ac>
    6ce4:	010000b4 	movhi	r4,2
    6ce8:	213ecb84 	addi	r4,r4,-1234
    6cec:	d9002c15 	stw	r4,176(sp)
    6cf0:	003cb106 	br	5fb8 <__alt_mem_Flash_flash_data+0xf4005fb8>
    6cf4:	5005883a 	mov	r2,r10
    6cf8:	003ea106 	br	6780 <__alt_mem_Flash_flash_data+0xf4006780>
    6cfc:	da402b15 	stw	r9,172(sp)
    6d00:	dd402783 	ldbu	r21,158(sp)
    6d04:	4825883a 	mov	r18,r9
    6d08:	dcc02d15 	stw	r19,180(sp)
    6d0c:	d8003215 	stw	zero,200(sp)
    6d10:	d8003415 	stw	zero,208(sp)
    6d14:	003a2806 	br	55b8 <__alt_mem_Flash_flash_data+0xf40055b8>
    6d18:	843fff84 	addi	r16,r16,-2
    6d1c:	1f3fffc4 	addi	fp,r3,-1
    6d20:	df002615 	stw	fp,152(sp)
    6d24:	dc0022c5 	stb	r16,139(sp)
    6d28:	e0009816 	blt	fp,zero,6f8c <___vfprintf_internal_r+0x1f20>
    6d2c:	00800ac4 	movi	r2,43
    6d30:	d8802305 	stb	r2,140(sp)
    6d34:	00800244 	movi	r2,9
    6d38:	1700750e 	bge	r2,fp,6f10 <___vfprintf_internal_r+0x1ea4>
    6d3c:	dd4022c4 	addi	r21,sp,139
    6d40:	dc002c15 	stw	r16,176(sp)
    6d44:	4025883a 	mov	r18,r8
    6d48:	a821883a 	mov	r16,r21
    6d4c:	e009883a 	mov	r4,fp
    6d50:	01400284 	movi	r5,10
    6d54:	000fe080 	call	fe08 <__modsi3>
    6d58:	10800c04 	addi	r2,r2,48
    6d5c:	843fffc4 	addi	r16,r16,-1
    6d60:	e009883a 	mov	r4,fp
    6d64:	01400284 	movi	r5,10
    6d68:	80800005 	stb	r2,0(r16)
    6d6c:	000fdb40 	call	fdb4 <__divsi3>
    6d70:	1039883a 	mov	fp,r2
    6d74:	00800244 	movi	r2,9
    6d78:	173ff416 	blt	r2,fp,6d4c <__alt_mem_Flash_flash_data+0xf4006d4c>
    6d7c:	9011883a 	mov	r8,r18
    6d80:	e0800c04 	addi	r2,fp,48
    6d84:	8025883a 	mov	r18,r16
    6d88:	913fffc4 	addi	r4,r18,-1
    6d8c:	90bfffc5 	stb	r2,-1(r18)
    6d90:	dc002c17 	ldw	r16,176(sp)
    6d94:	2540852e 	bgeu	r4,r21,6fac <___vfprintf_internal_r+0x1f40>
    6d98:	d9402384 	addi	r5,sp,142
    6d9c:	2c8bc83a 	sub	r5,r5,r18
    6da0:	d8c02344 	addi	r3,sp,141
    6da4:	a94b883a 	add	r5,r21,r5
    6da8:	00000106 	br	6db0 <___vfprintf_internal_r+0x1d44>
    6dac:	20800003 	ldbu	r2,0(r4)
    6db0:	18800005 	stb	r2,0(r3)
    6db4:	18c00044 	addi	r3,r3,1
    6db8:	21000044 	addi	r4,r4,1
    6dbc:	197ffb1e 	bne	r3,r5,6dac <__alt_mem_Flash_flash_data+0xf4006dac>
    6dc0:	d8802304 	addi	r2,sp,140
    6dc4:	1485c83a 	sub	r2,r2,r18
    6dc8:	d8c02344 	addi	r3,sp,141
    6dcc:	1885883a 	add	r2,r3,r2
    6dd0:	dac03317 	ldw	r11,204(sp)
    6dd4:	156bc83a 	sub	r21,r2,r21
    6dd8:	dd403a15 	stw	r21,232(sp)
    6ddc:	00800044 	movi	r2,1
    6de0:	5d65883a 	add	r18,r11,r21
    6de4:	12c0660e 	bge	r2,r11,6f80 <___vfprintf_internal_r+0x1f14>
    6de8:	94800044 	addi	r18,r18,1
    6dec:	9005883a 	mov	r2,r18
    6df0:	90006116 	blt	r18,zero,6f78 <___vfprintf_internal_r+0x1f0c>
    6df4:	d8003415 	stw	zero,208(sp)
    6df8:	003e7406 	br	67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6dfc:	b009883a 	mov	r4,r22
    6e00:	b80b883a 	mov	r5,r23
    6e04:	d9801e04 	addi	r6,sp,120
    6e08:	000d5380 	call	d538 <__sprint_r>
    6e0c:	10398b1e 	bne	r2,zero,543c <__alt_mem_Flash_flash_data+0xf400543c>
    6e10:	dc002617 	ldw	r16,152(sp)
    6e14:	d8c02017 	ldw	r3,128(sp)
    6e18:	d8801f17 	ldw	r2,124(sp)
    6e1c:	da000404 	addi	r8,sp,16
    6e20:	003ec906 	br	6948 <__alt_mem_Flash_flash_data+0xf4006948>
    6e24:	483e1c1e 	bne	r9,zero,6698 <__alt_mem_Flash_flash_data+0xf4006698>
    6e28:	9013883a 	mov	r9,r18
    6e2c:	003e1a06 	br	6698 <__alt_mem_Flash_flash_data+0xf4006698>
    6e30:	02400184 	movi	r9,6
    6e34:	003e1806 	br	6698 <__alt_mem_Flash_flash_data+0xf4006698>
    6e38:	d8c03417 	ldw	r3,208(sp)
    6e3c:	00c04b0e 	bge	zero,r3,6f6c <___vfprintf_internal_r+0x1f00>
    6e40:	04800044 	movi	r18,1
    6e44:	dac03317 	ldw	r11,204(sp)
    6e48:	92e5883a 	add	r18,r18,r11
    6e4c:	9005883a 	mov	r2,r18
    6e50:	903e5e0e 	bge	r18,zero,67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6e54:	0005883a 	mov	r2,zero
    6e58:	003e5c06 	br	67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6e5c:	00c00b44 	movi	r3,45
    6e60:	64a0003c 	xorhi	r18,r12,32768
    6e64:	d8c02b05 	stb	r3,172(sp)
    6e68:	003e1106 	br	66b0 <__alt_mem_Flash_flash_data+0xf40066b0>
    6e6c:	4f000044 	addi	fp,r9,1
    6e70:	003e1606 	br	66cc <__alt_mem_Flash_flash_data+0xf40066cc>
    6e74:	d8c02617 	ldw	r3,152(sp)
    6e78:	d8c03415 	stw	r3,208(sp)
    6e7c:	00c0350e 	bge	zero,r3,6f54 <___vfprintf_internal_r+0x1ee8>
    6e80:	4800081e 	bne	r9,zero,6ea4 <___vfprintf_internal_r+0x1e38>
    6e84:	8c40004c 	andi	r17,r17,1
    6e88:	8800061e 	bne	r17,zero,6ea4 <___vfprintf_internal_r+0x1e38>
    6e8c:	1805883a 	mov	r2,r3
    6e90:	183e4d0e 	bge	r3,zero,67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    6e94:	0005883a 	mov	r2,zero
    6e98:	003e4b06 	br	67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    6e9c:	d8802117 	ldw	r2,132(sp)
    6ea0:	003e3706 	br	6780 <__alt_mem_Flash_flash_data+0xf4006780>
    6ea4:	dac03417 	ldw	r11,208(sp)
    6ea8:	4a400044 	addi	r9,r9,1
    6eac:	5a65883a 	add	r18,r11,r9
    6eb0:	9005883a 	mov	r2,r18
    6eb4:	903e450e 	bge	r18,zero,67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6eb8:	003fe606 	br	6e54 <__alt_mem_Flash_flash_data+0xf4006e54>
    6ebc:	db003417 	ldw	r12,208(sp)
    6ec0:	64800044 	addi	r18,r12,1
    6ec4:	9005883a 	mov	r2,r18
    6ec8:	903e400e 	bge	r18,zero,67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6ecc:	003fe106 	br	6e54 <__alt_mem_Flash_flash_data+0xf4006e54>
    6ed0:	d9003717 	ldw	r4,220(sp)
    6ed4:	900b883a 	mov	r5,r18
    6ed8:	000d883a 	mov	r6,zero
    6edc:	000f883a 	mov	r7,zero
    6ee0:	da003f15 	stw	r8,252(sp)
    6ee4:	da403e15 	stw	r9,248(sp)
    6ee8:	da803d15 	stw	r10,244(sp)
    6eec:	0010fdc0 	call	10fdc <__eqdf2>
    6ef0:	da003f17 	ldw	r8,252(sp)
    6ef4:	da403e17 	ldw	r9,248(sp)
    6ef8:	da803d17 	ldw	r10,244(sp)
    6efc:	103f1f26 	beq	r2,zero,6b7c <__alt_mem_Flash_flash_data+0xf4006b7c>
    6f00:	00800044 	movi	r2,1
    6f04:	1707c83a 	sub	r3,r2,fp
    6f08:	d8c02615 	stw	r3,152(sp)
    6f0c:	003f1c06 	br	6b80 <__alt_mem_Flash_flash_data+0xf4006b80>
    6f10:	00800c04 	movi	r2,48
    6f14:	e0c00c04 	addi	r3,fp,48
    6f18:	d8802345 	stb	r2,141(sp)
    6f1c:	d8c02385 	stb	r3,142(sp)
    6f20:	d88023c4 	addi	r2,sp,143
    6f24:	dd4022c4 	addi	r21,sp,139
    6f28:	003fa906 	br	6dd0 <__alt_mem_Flash_flash_data+0xf4006dd0>
    6f2c:	0005883a 	mov	r2,zero
    6f30:	003f3c06 	br	6c24 <__alt_mem_Flash_flash_data+0xf4006c24>
    6f34:	dac02d17 	ldw	r11,180(sp)
    6f38:	5a400017 	ldw	r9,0(r11)
    6f3c:	5ac00104 	addi	r11,r11,4
    6f40:	dac02d15 	stw	r11,180(sp)
    6f44:	483ec80e 	bge	r9,zero,6a68 <__alt_mem_Flash_flash_data+0xf4006a68>
    6f48:	027fffc4 	movi	r9,-1
    6f4c:	1c000047 	ldb	r16,1(r3)
    6f50:	0038ab06 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>
    6f54:	4800111e 	bne	r9,zero,6f9c <___vfprintf_internal_r+0x1f30>
    6f58:	8c40004c 	andi	r17,r17,1
    6f5c:	88000f1e 	bne	r17,zero,6f9c <___vfprintf_internal_r+0x1f30>
    6f60:	00800044 	movi	r2,1
    6f64:	1025883a 	mov	r18,r2
    6f68:	003e1806 	br	67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6f6c:	04800084 	movi	r18,2
    6f70:	90e5c83a 	sub	r18,r18,r3
    6f74:	003fb306 	br	6e44 <__alt_mem_Flash_flash_data+0xf4006e44>
    6f78:	0005883a 	mov	r2,zero
    6f7c:	003f9d06 	br	6df4 <__alt_mem_Flash_flash_data+0xf4006df4>
    6f80:	88a2703a 	and	r17,r17,r2
    6f84:	883f9926 	beq	r17,zero,6dec <__alt_mem_Flash_flash_data+0xf4006dec>
    6f88:	003f9706 	br	6de8 <__alt_mem_Flash_flash_data+0xf4006de8>
    6f8c:	00800b44 	movi	r2,45
    6f90:	0739c83a 	sub	fp,zero,fp
    6f94:	d8802305 	stb	r2,140(sp)
    6f98:	003f6606 	br	6d34 <__alt_mem_Flash_flash_data+0xf4006d34>
    6f9c:	4c800084 	addi	r18,r9,2
    6fa0:	9005883a 	mov	r2,r18
    6fa4:	903e090e 	bge	r18,zero,67cc <__alt_mem_Flash_flash_data+0xf40067cc>
    6fa8:	003faa06 	br	6e54 <__alt_mem_Flash_flash_data+0xf4006e54>
    6fac:	d8802344 	addi	r2,sp,141
    6fb0:	003f8706 	br	6dd0 <__alt_mem_Flash_flash_data+0xf4006dd0>
    6fb4:	d8c02617 	ldw	r3,152(sp)
    6fb8:	003f5806 	br	6d1c <__alt_mem_Flash_flash_data+0xf4006d1c>

00006fbc <__vfprintf_internal>:
    6fbc:	2007883a 	mov	r3,r4
    6fc0:	010000b4 	movhi	r4,2
    6fc4:	2107cd04 	addi	r4,r4,7988
    6fc8:	21000017 	ldw	r4,0(r4)
    6fcc:	2805883a 	mov	r2,r5
    6fd0:	300f883a 	mov	r7,r6
    6fd4:	180b883a 	mov	r5,r3
    6fd8:	100d883a 	mov	r6,r2
    6fdc:	000506c1 	jmpi	506c <___vfprintf_internal_r>

00006fe0 <__sbprintf>:
    6fe0:	2880030b 	ldhu	r2,12(r5)
    6fe4:	2ac01917 	ldw	r11,100(r5)
    6fe8:	2a80038b 	ldhu	r10,14(r5)
    6fec:	2a400717 	ldw	r9,28(r5)
    6ff0:	2a000917 	ldw	r8,36(r5)
    6ff4:	defee204 	addi	sp,sp,-1144
    6ff8:	00c10004 	movi	r3,1024
    6ffc:	dc011a15 	stw	r16,1128(sp)
    7000:	10bfff4c 	andi	r2,r2,65533
    7004:	2821883a 	mov	r16,r5
    7008:	d8cb883a 	add	r5,sp,r3
    700c:	dc811c15 	stw	r18,1136(sp)
    7010:	dc411b15 	stw	r17,1132(sp)
    7014:	dfc11d15 	stw	ra,1140(sp)
    7018:	2025883a 	mov	r18,r4
    701c:	d881030d 	sth	r2,1036(sp)
    7020:	dac11915 	stw	r11,1124(sp)
    7024:	da81038d 	sth	r10,1038(sp)
    7028:	da410715 	stw	r9,1052(sp)
    702c:	da010915 	stw	r8,1060(sp)
    7030:	dec10015 	stw	sp,1024(sp)
    7034:	dec10415 	stw	sp,1040(sp)
    7038:	d8c10215 	stw	r3,1032(sp)
    703c:	d8c10515 	stw	r3,1044(sp)
    7040:	d8010615 	stw	zero,1048(sp)
    7044:	000506c0 	call	506c <___vfprintf_internal_r>
    7048:	1023883a 	mov	r17,r2
    704c:	10000416 	blt	r2,zero,7060 <__sbprintf+0x80>
    7050:	9009883a 	mov	r4,r18
    7054:	d9410004 	addi	r5,sp,1024
    7058:	0008d200 	call	8d20 <_fflush_r>
    705c:	10000d1e 	bne	r2,zero,7094 <__sbprintf+0xb4>
    7060:	d8c1030b 	ldhu	r3,1036(sp)
    7064:	18c0100c 	andi	r3,r3,64
    7068:	18000326 	beq	r3,zero,7078 <__sbprintf+0x98>
    706c:	8080030b 	ldhu	r2,12(r16)
    7070:	10801014 	ori	r2,r2,64
    7074:	8080030d 	sth	r2,12(r16)
    7078:	8805883a 	mov	r2,r17
    707c:	dfc11d17 	ldw	ra,1140(sp)
    7080:	dc811c17 	ldw	r18,1136(sp)
    7084:	dc411b17 	ldw	r17,1132(sp)
    7088:	dc011a17 	ldw	r16,1128(sp)
    708c:	dec11e04 	addi	sp,sp,1144
    7090:	f800283a 	ret
    7094:	047fffc4 	movi	r17,-1
    7098:	003ff106 	br	7060 <__alt_mem_Flash_flash_data+0xf4007060>

0000709c <__swsetup_r>:
    709c:	008000b4 	movhi	r2,2
    70a0:	defffd04 	addi	sp,sp,-12
    70a4:	1087cd04 	addi	r2,r2,7988
    70a8:	dc400115 	stw	r17,4(sp)
    70ac:	2023883a 	mov	r17,r4
    70b0:	11000017 	ldw	r4,0(r2)
    70b4:	dc000015 	stw	r16,0(sp)
    70b8:	dfc00215 	stw	ra,8(sp)
    70bc:	2821883a 	mov	r16,r5
    70c0:	20000226 	beq	r4,zero,70cc <__swsetup_r+0x30>
    70c4:	20c00e17 	ldw	r3,56(r4)
    70c8:	18003126 	beq	r3,zero,7190 <__swsetup_r+0xf4>
    70cc:	8080030b 	ldhu	r2,12(r16)
    70d0:	10c0020c 	andi	r3,r2,8
    70d4:	100d883a 	mov	r6,r2
    70d8:	18000f26 	beq	r3,zero,7118 <__swsetup_r+0x7c>
    70dc:	80c00417 	ldw	r3,16(r16)
    70e0:	18001526 	beq	r3,zero,7138 <__swsetup_r+0x9c>
    70e4:	1100004c 	andi	r4,r2,1
    70e8:	20001c1e 	bne	r4,zero,715c <__swsetup_r+0xc0>
    70ec:	1080008c 	andi	r2,r2,2
    70f0:	1000291e 	bne	r2,zero,7198 <__swsetup_r+0xfc>
    70f4:	80800517 	ldw	r2,20(r16)
    70f8:	80800215 	stw	r2,8(r16)
    70fc:	18001c26 	beq	r3,zero,7170 <__swsetup_r+0xd4>
    7100:	0005883a 	mov	r2,zero
    7104:	dfc00217 	ldw	ra,8(sp)
    7108:	dc400117 	ldw	r17,4(sp)
    710c:	dc000017 	ldw	r16,0(sp)
    7110:	dec00304 	addi	sp,sp,12
    7114:	f800283a 	ret
    7118:	3080040c 	andi	r2,r6,16
    711c:	10002e26 	beq	r2,zero,71d8 <__swsetup_r+0x13c>
    7120:	3080010c 	andi	r2,r6,4
    7124:	10001e1e 	bne	r2,zero,71a0 <__swsetup_r+0x104>
    7128:	80c00417 	ldw	r3,16(r16)
    712c:	30800214 	ori	r2,r6,8
    7130:	8080030d 	sth	r2,12(r16)
    7134:	183feb1e 	bne	r3,zero,70e4 <__alt_mem_Flash_flash_data+0xf40070e4>
    7138:	1140a00c 	andi	r5,r2,640
    713c:	01008004 	movi	r4,512
    7140:	293fe826 	beq	r5,r4,70e4 <__alt_mem_Flash_flash_data+0xf40070e4>
    7144:	8809883a 	mov	r4,r17
    7148:	800b883a 	mov	r5,r16
    714c:	0009c880 	call	9c88 <__smakebuf_r>
    7150:	8080030b 	ldhu	r2,12(r16)
    7154:	80c00417 	ldw	r3,16(r16)
    7158:	003fe206 	br	70e4 <__alt_mem_Flash_flash_data+0xf40070e4>
    715c:	80800517 	ldw	r2,20(r16)
    7160:	80000215 	stw	zero,8(r16)
    7164:	0085c83a 	sub	r2,zero,r2
    7168:	80800615 	stw	r2,24(r16)
    716c:	183fe41e 	bne	r3,zero,7100 <__alt_mem_Flash_flash_data+0xf4007100>
    7170:	80c0030b 	ldhu	r3,12(r16)
    7174:	0005883a 	mov	r2,zero
    7178:	1900200c 	andi	r4,r3,128
    717c:	203fe126 	beq	r4,zero,7104 <__alt_mem_Flash_flash_data+0xf4007104>
    7180:	18c01014 	ori	r3,r3,64
    7184:	80c0030d 	sth	r3,12(r16)
    7188:	00bfffc4 	movi	r2,-1
    718c:	003fdd06 	br	7104 <__alt_mem_Flash_flash_data+0xf4007104>
    7190:	00090fc0 	call	90fc <__sinit>
    7194:	003fcd06 	br	70cc <__alt_mem_Flash_flash_data+0xf40070cc>
    7198:	0005883a 	mov	r2,zero
    719c:	003fd606 	br	70f8 <__alt_mem_Flash_flash_data+0xf40070f8>
    71a0:	81400c17 	ldw	r5,48(r16)
    71a4:	28000626 	beq	r5,zero,71c0 <__swsetup_r+0x124>
    71a8:	80801004 	addi	r2,r16,64
    71ac:	28800326 	beq	r5,r2,71bc <__swsetup_r+0x120>
    71b0:	8809883a 	mov	r4,r17
    71b4:	00092700 	call	9270 <_free_r>
    71b8:	8180030b 	ldhu	r6,12(r16)
    71bc:	80000c15 	stw	zero,48(r16)
    71c0:	80c00417 	ldw	r3,16(r16)
    71c4:	00bff6c4 	movi	r2,-37
    71c8:	118c703a 	and	r6,r2,r6
    71cc:	80000115 	stw	zero,4(r16)
    71d0:	80c00015 	stw	r3,0(r16)
    71d4:	003fd506 	br	712c <__alt_mem_Flash_flash_data+0xf400712c>
    71d8:	00800244 	movi	r2,9
    71dc:	88800015 	stw	r2,0(r17)
    71e0:	30801014 	ori	r2,r6,64
    71e4:	8080030d 	sth	r2,12(r16)
    71e8:	00bfffc4 	movi	r2,-1
    71ec:	003fc506 	br	7104 <__alt_mem_Flash_flash_data+0xf4007104>

000071f0 <quorem>:
    71f0:	defff704 	addi	sp,sp,-36
    71f4:	dc800215 	stw	r18,8(sp)
    71f8:	20800417 	ldw	r2,16(r4)
    71fc:	2c800417 	ldw	r18,16(r5)
    7200:	dfc00815 	stw	ra,32(sp)
    7204:	ddc00715 	stw	r23,28(sp)
    7208:	dd800615 	stw	r22,24(sp)
    720c:	dd400515 	stw	r21,20(sp)
    7210:	dd000415 	stw	r20,16(sp)
    7214:	dcc00315 	stw	r19,12(sp)
    7218:	dc400115 	stw	r17,4(sp)
    721c:	dc000015 	stw	r16,0(sp)
    7220:	14807116 	blt	r2,r18,73e8 <quorem+0x1f8>
    7224:	94bfffc4 	addi	r18,r18,-1
    7228:	94ad883a 	add	r22,r18,r18
    722c:	b5ad883a 	add	r22,r22,r22
    7230:	2c400504 	addi	r17,r5,20
    7234:	8da9883a 	add	r20,r17,r22
    7238:	25400504 	addi	r21,r4,20
    723c:	282f883a 	mov	r23,r5
    7240:	adad883a 	add	r22,r21,r22
    7244:	a1400017 	ldw	r5,0(r20)
    7248:	2021883a 	mov	r16,r4
    724c:	b1000017 	ldw	r4,0(r22)
    7250:	29400044 	addi	r5,r5,1
    7254:	000fe640 	call	fe64 <__udivsi3>
    7258:	1027883a 	mov	r19,r2
    725c:	10002c26 	beq	r2,zero,7310 <quorem+0x120>
    7260:	a813883a 	mov	r9,r21
    7264:	8811883a 	mov	r8,r17
    7268:	0009883a 	mov	r4,zero
    726c:	000d883a 	mov	r6,zero
    7270:	41c00017 	ldw	r7,0(r8)
    7274:	49400017 	ldw	r5,0(r9)
    7278:	42000104 	addi	r8,r8,4
    727c:	38bfffcc 	andi	r2,r7,65535
    7280:	14c5383a 	mul	r2,r2,r19
    7284:	380ed43a 	srli	r7,r7,16
    7288:	28ffffcc 	andi	r3,r5,65535
    728c:	2085883a 	add	r2,r4,r2
    7290:	1008d43a 	srli	r4,r2,16
    7294:	3ccf383a 	mul	r7,r7,r19
    7298:	198d883a 	add	r6,r3,r6
    729c:	10ffffcc 	andi	r3,r2,65535
    72a0:	30c7c83a 	sub	r3,r6,r3
    72a4:	280ad43a 	srli	r5,r5,16
    72a8:	21c9883a 	add	r4,r4,r7
    72ac:	180dd43a 	srai	r6,r3,16
    72b0:	20bfffcc 	andi	r2,r4,65535
    72b4:	288bc83a 	sub	r5,r5,r2
    72b8:	298b883a 	add	r5,r5,r6
    72bc:	280e943a 	slli	r7,r5,16
    72c0:	18ffffcc 	andi	r3,r3,65535
    72c4:	2008d43a 	srli	r4,r4,16
    72c8:	38ceb03a 	or	r7,r7,r3
    72cc:	49c00015 	stw	r7,0(r9)
    72d0:	280dd43a 	srai	r6,r5,16
    72d4:	4a400104 	addi	r9,r9,4
    72d8:	a23fe52e 	bgeu	r20,r8,7270 <__alt_mem_Flash_flash_data+0xf4007270>
    72dc:	b0800017 	ldw	r2,0(r22)
    72e0:	10000b1e 	bne	r2,zero,7310 <quorem+0x120>
    72e4:	b0bfff04 	addi	r2,r22,-4
    72e8:	a880082e 	bgeu	r21,r2,730c <quorem+0x11c>
    72ec:	b0ffff17 	ldw	r3,-4(r22)
    72f0:	18000326 	beq	r3,zero,7300 <quorem+0x110>
    72f4:	00000506 	br	730c <quorem+0x11c>
    72f8:	10c00017 	ldw	r3,0(r2)
    72fc:	1800031e 	bne	r3,zero,730c <quorem+0x11c>
    7300:	10bfff04 	addi	r2,r2,-4
    7304:	94bfffc4 	addi	r18,r18,-1
    7308:	a8bffb36 	bltu	r21,r2,72f8 <__alt_mem_Flash_flash_data+0xf40072f8>
    730c:	84800415 	stw	r18,16(r16)
    7310:	8009883a 	mov	r4,r16
    7314:	b80b883a 	mov	r5,r23
    7318:	000b35c0 	call	b35c <__mcmp>
    731c:	10002616 	blt	r2,zero,73b8 <quorem+0x1c8>
    7320:	9cc00044 	addi	r19,r19,1
    7324:	a80d883a 	mov	r6,r21
    7328:	000b883a 	mov	r5,zero
    732c:	31000017 	ldw	r4,0(r6)
    7330:	88800017 	ldw	r2,0(r17)
    7334:	31800104 	addi	r6,r6,4
    7338:	20ffffcc 	andi	r3,r4,65535
    733c:	194b883a 	add	r5,r3,r5
    7340:	10ffffcc 	andi	r3,r2,65535
    7344:	28c7c83a 	sub	r3,r5,r3
    7348:	1004d43a 	srli	r2,r2,16
    734c:	2008d43a 	srli	r4,r4,16
    7350:	180bd43a 	srai	r5,r3,16
    7354:	18ffffcc 	andi	r3,r3,65535
    7358:	2089c83a 	sub	r4,r4,r2
    735c:	2149883a 	add	r4,r4,r5
    7360:	2004943a 	slli	r2,r4,16
    7364:	8c400104 	addi	r17,r17,4
    7368:	200bd43a 	srai	r5,r4,16
    736c:	10c6b03a 	or	r3,r2,r3
    7370:	30ffff15 	stw	r3,-4(r6)
    7374:	a47fed2e 	bgeu	r20,r17,732c <__alt_mem_Flash_flash_data+0xf400732c>
    7378:	9485883a 	add	r2,r18,r18
    737c:	1085883a 	add	r2,r2,r2
    7380:	a887883a 	add	r3,r21,r2
    7384:	18800017 	ldw	r2,0(r3)
    7388:	10000b1e 	bne	r2,zero,73b8 <quorem+0x1c8>
    738c:	18bfff04 	addi	r2,r3,-4
    7390:	a880082e 	bgeu	r21,r2,73b4 <quorem+0x1c4>
    7394:	18ffff17 	ldw	r3,-4(r3)
    7398:	18000326 	beq	r3,zero,73a8 <quorem+0x1b8>
    739c:	00000506 	br	73b4 <quorem+0x1c4>
    73a0:	10c00017 	ldw	r3,0(r2)
    73a4:	1800031e 	bne	r3,zero,73b4 <quorem+0x1c4>
    73a8:	10bfff04 	addi	r2,r2,-4
    73ac:	94bfffc4 	addi	r18,r18,-1
    73b0:	a8bffb36 	bltu	r21,r2,73a0 <__alt_mem_Flash_flash_data+0xf40073a0>
    73b4:	84800415 	stw	r18,16(r16)
    73b8:	9805883a 	mov	r2,r19
    73bc:	dfc00817 	ldw	ra,32(sp)
    73c0:	ddc00717 	ldw	r23,28(sp)
    73c4:	dd800617 	ldw	r22,24(sp)
    73c8:	dd400517 	ldw	r21,20(sp)
    73cc:	dd000417 	ldw	r20,16(sp)
    73d0:	dcc00317 	ldw	r19,12(sp)
    73d4:	dc800217 	ldw	r18,8(sp)
    73d8:	dc400117 	ldw	r17,4(sp)
    73dc:	dc000017 	ldw	r16,0(sp)
    73e0:	dec00904 	addi	sp,sp,36
    73e4:	f800283a 	ret
    73e8:	0005883a 	mov	r2,zero
    73ec:	003ff306 	br	73bc <__alt_mem_Flash_flash_data+0xf40073bc>

000073f0 <_dtoa_r>:
    73f0:	20801017 	ldw	r2,64(r4)
    73f4:	deffde04 	addi	sp,sp,-136
    73f8:	dd401d15 	stw	r21,116(sp)
    73fc:	dcc01b15 	stw	r19,108(sp)
    7400:	dc801a15 	stw	r18,104(sp)
    7404:	dc401915 	stw	r17,100(sp)
    7408:	dc001815 	stw	r16,96(sp)
    740c:	dfc02115 	stw	ra,132(sp)
    7410:	df002015 	stw	fp,128(sp)
    7414:	ddc01f15 	stw	r23,124(sp)
    7418:	dd801e15 	stw	r22,120(sp)
    741c:	dd001c15 	stw	r20,112(sp)
    7420:	d9c00315 	stw	r7,12(sp)
    7424:	2021883a 	mov	r16,r4
    7428:	302b883a 	mov	r21,r6
    742c:	2825883a 	mov	r18,r5
    7430:	dc402417 	ldw	r17,144(sp)
    7434:	3027883a 	mov	r19,r6
    7438:	10000826 	beq	r2,zero,745c <_dtoa_r+0x6c>
    743c:	21801117 	ldw	r6,68(r4)
    7440:	00c00044 	movi	r3,1
    7444:	100b883a 	mov	r5,r2
    7448:	1986983a 	sll	r3,r3,r6
    744c:	11800115 	stw	r6,4(r2)
    7450:	10c00215 	stw	r3,8(r2)
    7454:	000ab300 	call	ab30 <_Bfree>
    7458:	80001015 	stw	zero,64(r16)
    745c:	a8002d16 	blt	r21,zero,7514 <_dtoa_r+0x124>
    7460:	88000015 	stw	zero,0(r17)
    7464:	a8dffc2c 	andhi	r3,r21,32752
    7468:	009ffc34 	movhi	r2,32752
    746c:	18801b26 	beq	r3,r2,74dc <_dtoa_r+0xec>
    7470:	9009883a 	mov	r4,r18
    7474:	980b883a 	mov	r5,r19
    7478:	000d883a 	mov	r6,zero
    747c:	000f883a 	mov	r7,zero
    7480:	0010fdc0 	call	10fdc <__eqdf2>
    7484:	10002a1e 	bne	r2,zero,7530 <_dtoa_r+0x140>
    7488:	d8c02317 	ldw	r3,140(sp)
    748c:	d9002517 	ldw	r4,148(sp)
    7490:	00800044 	movi	r2,1
    7494:	18800015 	stw	r2,0(r3)
    7498:	2001a226 	beq	r4,zero,7b24 <_dtoa_r+0x734>
    749c:	008000b4 	movhi	r2,2
    74a0:	10bec344 	addi	r2,r2,-1267
    74a4:	20800015 	stw	r2,0(r4)
    74a8:	10bfffc4 	addi	r2,r2,-1
    74ac:	dfc02117 	ldw	ra,132(sp)
    74b0:	df002017 	ldw	fp,128(sp)
    74b4:	ddc01f17 	ldw	r23,124(sp)
    74b8:	dd801e17 	ldw	r22,120(sp)
    74bc:	dd401d17 	ldw	r21,116(sp)
    74c0:	dd001c17 	ldw	r20,112(sp)
    74c4:	dcc01b17 	ldw	r19,108(sp)
    74c8:	dc801a17 	ldw	r18,104(sp)
    74cc:	dc401917 	ldw	r17,100(sp)
    74d0:	dc001817 	ldw	r16,96(sp)
    74d4:	dec02204 	addi	sp,sp,136
    74d8:	f800283a 	ret
    74dc:	d8c02317 	ldw	r3,140(sp)
    74e0:	0089c3c4 	movi	r2,9999
    74e4:	18800015 	stw	r2,0(r3)
    74e8:	90017c26 	beq	r18,zero,7adc <_dtoa_r+0x6ec>
    74ec:	008000b4 	movhi	r2,2
    74f0:	10bed704 	addi	r2,r2,-1188
    74f4:	d9002517 	ldw	r4,148(sp)
    74f8:	203fec26 	beq	r4,zero,74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    74fc:	10c000c7 	ldb	r3,3(r2)
    7500:	18017d1e 	bne	r3,zero,7af8 <_dtoa_r+0x708>
    7504:	10c000c4 	addi	r3,r2,3
    7508:	d9802517 	ldw	r6,148(sp)
    750c:	30c00015 	stw	r3,0(r6)
    7510:	003fe606 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    7514:	04e00034 	movhi	r19,32768
    7518:	9cffffc4 	addi	r19,r19,-1
    751c:	00800044 	movi	r2,1
    7520:	ace6703a 	and	r19,r21,r19
    7524:	88800015 	stw	r2,0(r17)
    7528:	982b883a 	mov	r21,r19
    752c:	003fcd06 	br	7464 <__alt_mem_Flash_flash_data+0xf4007464>
    7530:	d8800204 	addi	r2,sp,8
    7534:	a822d53a 	srli	r17,r21,20
    7538:	d8800015 	stw	r2,0(sp)
    753c:	8009883a 	mov	r4,r16
    7540:	900b883a 	mov	r5,r18
    7544:	980d883a 	mov	r6,r19
    7548:	d9c00104 	addi	r7,sp,4
    754c:	000b6d00 	call	b6d0 <__d2b>
    7550:	1039883a 	mov	fp,r2
    7554:	88016a1e 	bne	r17,zero,7b00 <_dtoa_r+0x710>
    7558:	dd000217 	ldw	r20,8(sp)
    755c:	dc400117 	ldw	r17,4(sp)
    7560:	00befbc4 	movi	r2,-1041
    7564:	a463883a 	add	r17,r20,r17
    7568:	8882ea16 	blt	r17,r2,8114 <_dtoa_r+0xd24>
    756c:	00bf0384 	movi	r2,-1010
    7570:	1445c83a 	sub	r2,r2,r17
    7574:	89010484 	addi	r4,r17,1042
    7578:	a8aa983a 	sll	r21,r21,r2
    757c:	9108d83a 	srl	r4,r18,r4
    7580:	a908b03a 	or	r4,r21,r4
    7584:	001236c0 	call	1236c <__floatunsidf>
    7588:	017f8434 	movhi	r5,65040
    758c:	01800044 	movi	r6,1
    7590:	1009883a 	mov	r4,r2
    7594:	194b883a 	add	r5,r3,r5
    7598:	8c7fffc4 	addi	r17,r17,-1
    759c:	d9800f15 	stw	r6,60(sp)
    75a0:	000d883a 	mov	r6,zero
    75a4:	01cffe34 	movhi	r7,16376
    75a8:	00119440 	call	11944 <__subdf3>
    75ac:	0198dbf4 	movhi	r6,25455
    75b0:	01cff4f4 	movhi	r7,16339
    75b4:	1009883a 	mov	r4,r2
    75b8:	180b883a 	mov	r5,r3
    75bc:	3190d844 	addi	r6,r6,17249
    75c0:	39e1e9c4 	addi	r7,r7,-30809
    75c4:	00112200 	call	11220 <__muldf3>
    75c8:	01a2d874 	movhi	r6,35681
    75cc:	01cff1f4 	movhi	r7,16327
    75d0:	180b883a 	mov	r5,r3
    75d4:	31b22cc4 	addi	r6,r6,-14157
    75d8:	39e28a04 	addi	r7,r7,-30168
    75dc:	1009883a 	mov	r4,r2
    75e0:	000fe740 	call	fe74 <__adddf3>
    75e4:	8809883a 	mov	r4,r17
    75e8:	102d883a 	mov	r22,r2
    75ec:	182b883a 	mov	r21,r3
    75f0:	001229c0 	call	1229c <__floatsidf>
    75f4:	019427f4 	movhi	r6,20639
    75f8:	01cff4f4 	movhi	r7,16339
    75fc:	1009883a 	mov	r4,r2
    7600:	180b883a 	mov	r5,r3
    7604:	319e7ec4 	addi	r6,r6,31227
    7608:	39d104c4 	addi	r7,r7,17427
    760c:	00112200 	call	11220 <__muldf3>
    7610:	b009883a 	mov	r4,r22
    7614:	a80b883a 	mov	r5,r21
    7618:	100d883a 	mov	r6,r2
    761c:	180f883a 	mov	r7,r3
    7620:	000fe740 	call	fe74 <__adddf3>
    7624:	1009883a 	mov	r4,r2
    7628:	180b883a 	mov	r5,r3
    762c:	102d883a 	mov	r22,r2
    7630:	182b883a 	mov	r21,r3
    7634:	00122140 	call	12214 <__fixdfsi>
    7638:	b009883a 	mov	r4,r22
    763c:	a80b883a 	mov	r5,r21
    7640:	000d883a 	mov	r6,zero
    7644:	000f883a 	mov	r7,zero
    7648:	d8800515 	stw	r2,20(sp)
    764c:	00111400 	call	11140 <__ledf2>
    7650:	10023116 	blt	r2,zero,7f18 <_dtoa_r+0xb28>
    7654:	d8c00517 	ldw	r3,20(sp)
    7658:	00800584 	movi	r2,22
    765c:	10c21f36 	bltu	r2,r3,7edc <_dtoa_r+0xaec>
    7660:	180490fa 	slli	r2,r3,3
    7664:	00c000b4 	movhi	r3,2
    7668:	18fef304 	addi	r3,r3,-1076
    766c:	1885883a 	add	r2,r3,r2
    7670:	11000017 	ldw	r4,0(r2)
    7674:	11400117 	ldw	r5,4(r2)
    7678:	900d883a 	mov	r6,r18
    767c:	980f883a 	mov	r7,r19
    7680:	00110600 	call	11060 <__gedf2>
    7684:	0082a70e 	bge	zero,r2,8124 <_dtoa_r+0xd34>
    7688:	d9000517 	ldw	r4,20(sp)
    768c:	d8000d15 	stw	zero,52(sp)
    7690:	213fffc4 	addi	r4,r4,-1
    7694:	d9000515 	stw	r4,20(sp)
    7698:	a463c83a 	sub	r17,r20,r17
    769c:	8dbfffc4 	addi	r22,r17,-1
    76a0:	b0021916 	blt	r22,zero,7f08 <_dtoa_r+0xb18>
    76a4:	d8000815 	stw	zero,32(sp)
    76a8:	d8800517 	ldw	r2,20(sp)
    76ac:	10020e16 	blt	r2,zero,7ee8 <_dtoa_r+0xaf8>
    76b0:	b0ad883a 	add	r22,r22,r2
    76b4:	d8800a15 	stw	r2,40(sp)
    76b8:	d8000915 	stw	zero,36(sp)
    76bc:	d8c00317 	ldw	r3,12(sp)
    76c0:	00800244 	movi	r2,9
    76c4:	10c11a36 	bltu	r2,r3,7b30 <_dtoa_r+0x740>
    76c8:	00800144 	movi	r2,5
    76cc:	10c4fc0e 	bge	r2,r3,8ac0 <_dtoa_r+0x16d0>
    76d0:	18ffff04 	addi	r3,r3,-4
    76d4:	d8c00315 	stw	r3,12(sp)
    76d8:	0029883a 	mov	r20,zero
    76dc:	d9800317 	ldw	r6,12(sp)
    76e0:	008000c4 	movi	r2,3
    76e4:	3083bd26 	beq	r6,r2,85dc <_dtoa_r+0x11ec>
    76e8:	1183670e 	bge	r2,r6,8488 <_dtoa_r+0x1098>
    76ec:	d8c00317 	ldw	r3,12(sp)
    76f0:	00800104 	movi	r2,4
    76f4:	1882e726 	beq	r3,r2,8294 <_dtoa_r+0xea4>
    76f8:	00800144 	movi	r2,5
    76fc:	1884f21e 	bne	r3,r2,8ac8 <_dtoa_r+0x16d8>
    7700:	00800044 	movi	r2,1
    7704:	d8800b15 	stw	r2,44(sp)
    7708:	d8c02217 	ldw	r3,136(sp)
    770c:	d9000517 	ldw	r4,20(sp)
    7710:	1907883a 	add	r3,r3,r4
    7714:	19800044 	addi	r6,r3,1
    7718:	d8c00c15 	stw	r3,48(sp)
    771c:	d9800615 	stw	r6,24(sp)
    7720:	0183c30e 	bge	zero,r6,8630 <_dtoa_r+0x1240>
    7724:	d9800617 	ldw	r6,24(sp)
    7728:	3023883a 	mov	r17,r6
    772c:	80001115 	stw	zero,68(r16)
    7730:	008005c4 	movi	r2,23
    7734:	1184f62e 	bgeu	r2,r6,8b10 <_dtoa_r+0x1720>
    7738:	00c00044 	movi	r3,1
    773c:	00800104 	movi	r2,4
    7740:	1085883a 	add	r2,r2,r2
    7744:	11000504 	addi	r4,r2,20
    7748:	180b883a 	mov	r5,r3
    774c:	18c00044 	addi	r3,r3,1
    7750:	313ffb2e 	bgeu	r6,r4,7740 <__alt_mem_Flash_flash_data+0xf4007740>
    7754:	81401115 	stw	r5,68(r16)
    7758:	8009883a 	mov	r4,r16
    775c:	000aa880 	call	aa88 <_Balloc>
    7760:	d8800715 	stw	r2,28(sp)
    7764:	80801015 	stw	r2,64(r16)
    7768:	00800384 	movi	r2,14
    776c:	1440fd36 	bltu	r2,r17,7b64 <_dtoa_r+0x774>
    7770:	a000fc26 	beq	r20,zero,7b64 <_dtoa_r+0x774>
    7774:	d8800517 	ldw	r2,20(sp)
    7778:	0083b90e 	bge	zero,r2,8660 <_dtoa_r+0x1270>
    777c:	d8c00517 	ldw	r3,20(sp)
    7780:	108003cc 	andi	r2,r2,15
    7784:	100490fa 	slli	r2,r2,3
    7788:	182fd13a 	srai	r23,r3,4
    778c:	00c000b4 	movhi	r3,2
    7790:	18fef304 	addi	r3,r3,-1076
    7794:	1885883a 	add	r2,r3,r2
    7798:	b8c0040c 	andi	r3,r23,16
    779c:	12c00017 	ldw	r11,0(r2)
    77a0:	12800117 	ldw	r10,4(r2)
    77a4:	18039726 	beq	r3,zero,8604 <_dtoa_r+0x1214>
    77a8:	008000b4 	movhi	r2,2
    77ac:	10bee904 	addi	r2,r2,-1116
    77b0:	11800817 	ldw	r6,32(r2)
    77b4:	11c00917 	ldw	r7,36(r2)
    77b8:	9009883a 	mov	r4,r18
    77bc:	980b883a 	mov	r5,r19
    77c0:	da801615 	stw	r10,88(sp)
    77c4:	dac01515 	stw	r11,84(sp)
    77c8:	00107100 	call	10710 <__divdf3>
    77cc:	da801617 	ldw	r10,88(sp)
    77d0:	dac01517 	ldw	r11,84(sp)
    77d4:	bdc003cc 	andi	r23,r23,15
    77d8:	044000c4 	movi	r17,3
    77dc:	d8800e15 	stw	r2,56(sp)
    77e0:	182b883a 	mov	r21,r3
    77e4:	b8001126 	beq	r23,zero,782c <_dtoa_r+0x43c>
    77e8:	050000b4 	movhi	r20,2
    77ec:	a53ee904 	addi	r20,r20,-1116
    77f0:	5805883a 	mov	r2,r11
    77f4:	5007883a 	mov	r3,r10
    77f8:	b980004c 	andi	r6,r23,1
    77fc:	1009883a 	mov	r4,r2
    7800:	b82fd07a 	srai	r23,r23,1
    7804:	180b883a 	mov	r5,r3
    7808:	30000426 	beq	r6,zero,781c <_dtoa_r+0x42c>
    780c:	a1800017 	ldw	r6,0(r20)
    7810:	a1c00117 	ldw	r7,4(r20)
    7814:	8c400044 	addi	r17,r17,1
    7818:	00112200 	call	11220 <__muldf3>
    781c:	a5000204 	addi	r20,r20,8
    7820:	b83ff51e 	bne	r23,zero,77f8 <__alt_mem_Flash_flash_data+0xf40077f8>
    7824:	1017883a 	mov	r11,r2
    7828:	1815883a 	mov	r10,r3
    782c:	d9000e17 	ldw	r4,56(sp)
    7830:	a80b883a 	mov	r5,r21
    7834:	580d883a 	mov	r6,r11
    7838:	500f883a 	mov	r7,r10
    783c:	00107100 	call	10710 <__divdf3>
    7840:	1029883a 	mov	r20,r2
    7844:	182b883a 	mov	r21,r3
    7848:	d9800d17 	ldw	r6,52(sp)
    784c:	30000626 	beq	r6,zero,7868 <_dtoa_r+0x478>
    7850:	a009883a 	mov	r4,r20
    7854:	a80b883a 	mov	r5,r21
    7858:	000d883a 	mov	r6,zero
    785c:	01cffc34 	movhi	r7,16368
    7860:	00111400 	call	11140 <__ledf2>
    7864:	10043216 	blt	r2,zero,8930 <_dtoa_r+0x1540>
    7868:	8809883a 	mov	r4,r17
    786c:	001229c0 	call	1229c <__floatsidf>
    7870:	1009883a 	mov	r4,r2
    7874:	180b883a 	mov	r5,r3
    7878:	a00d883a 	mov	r6,r20
    787c:	a80f883a 	mov	r7,r21
    7880:	00112200 	call	11220 <__muldf3>
    7884:	000d883a 	mov	r6,zero
    7888:	1009883a 	mov	r4,r2
    788c:	180b883a 	mov	r5,r3
    7890:	01d00734 	movhi	r7,16412
    7894:	000fe740 	call	fe74 <__adddf3>
    7898:	1023883a 	mov	r17,r2
    789c:	d9800617 	ldw	r6,24(sp)
    78a0:	00bf3034 	movhi	r2,64704
    78a4:	1885883a 	add	r2,r3,r2
    78a8:	d8800e15 	stw	r2,56(sp)
    78ac:	30032e26 	beq	r6,zero,8568 <_dtoa_r+0x1178>
    78b0:	d8c00517 	ldw	r3,20(sp)
    78b4:	da800617 	ldw	r10,24(sp)
    78b8:	d8c01215 	stw	r3,72(sp)
    78bc:	d9000b17 	ldw	r4,44(sp)
    78c0:	2003b026 	beq	r4,zero,8784 <_dtoa_r+0x1394>
    78c4:	50bfffc4 	addi	r2,r10,-1
    78c8:	100490fa 	slli	r2,r2,3
    78cc:	00c000b4 	movhi	r3,2
    78d0:	18fef304 	addi	r3,r3,-1076
    78d4:	1885883a 	add	r2,r3,r2
    78d8:	11800017 	ldw	r6,0(r2)
    78dc:	11c00117 	ldw	r7,4(r2)
    78e0:	d8800717 	ldw	r2,28(sp)
    78e4:	0009883a 	mov	r4,zero
    78e8:	014ff834 	movhi	r5,16352
    78ec:	da801615 	stw	r10,88(sp)
    78f0:	15c00044 	addi	r23,r2,1
    78f4:	00107100 	call	10710 <__divdf3>
    78f8:	d9c00e17 	ldw	r7,56(sp)
    78fc:	880d883a 	mov	r6,r17
    7900:	1009883a 	mov	r4,r2
    7904:	180b883a 	mov	r5,r3
    7908:	00119440 	call	11944 <__subdf3>
    790c:	a80b883a 	mov	r5,r21
    7910:	a009883a 	mov	r4,r20
    7914:	d8c01015 	stw	r3,64(sp)
    7918:	d8800e15 	stw	r2,56(sp)
    791c:	00122140 	call	12214 <__fixdfsi>
    7920:	1009883a 	mov	r4,r2
    7924:	d8801715 	stw	r2,92(sp)
    7928:	001229c0 	call	1229c <__floatsidf>
    792c:	a009883a 	mov	r4,r20
    7930:	a80b883a 	mov	r5,r21
    7934:	100d883a 	mov	r6,r2
    7938:	180f883a 	mov	r7,r3
    793c:	00119440 	call	11944 <__subdf3>
    7940:	da001717 	ldw	r8,92(sp)
    7944:	1829883a 	mov	r20,r3
    7948:	d8c00717 	ldw	r3,28(sp)
    794c:	d9000e17 	ldw	r4,56(sp)
    7950:	d9401017 	ldw	r5,64(sp)
    7954:	42000c04 	addi	r8,r8,48
    7958:	1023883a 	mov	r17,r2
    795c:	1a000005 	stb	r8,0(r3)
    7960:	880d883a 	mov	r6,r17
    7964:	a00f883a 	mov	r7,r20
    7968:	402b883a 	mov	r21,r8
    796c:	00110600 	call	11060 <__gedf2>
    7970:	00844516 	blt	zero,r2,8a88 <_dtoa_r+0x1698>
    7974:	0009883a 	mov	r4,zero
    7978:	014ffc34 	movhi	r5,16368
    797c:	880d883a 	mov	r6,r17
    7980:	a00f883a 	mov	r7,r20
    7984:	00119440 	call	11944 <__subdf3>
    7988:	d9000e17 	ldw	r4,56(sp)
    798c:	d9401017 	ldw	r5,64(sp)
    7990:	100d883a 	mov	r6,r2
    7994:	180f883a 	mov	r7,r3
    7998:	00110600 	call	11060 <__gedf2>
    799c:	da801617 	ldw	r10,88(sp)
    79a0:	00843616 	blt	zero,r2,8a7c <_dtoa_r+0x168c>
    79a4:	00800044 	movi	r2,1
    79a8:	12806e0e 	bge	r2,r10,7b64 <_dtoa_r+0x774>
    79ac:	d9000717 	ldw	r4,28(sp)
    79b0:	dd801315 	stw	r22,76(sp)
    79b4:	dc001115 	stw	r16,68(sp)
    79b8:	2295883a 	add	r10,r4,r10
    79bc:	dcc01415 	stw	r19,80(sp)
    79c0:	502d883a 	mov	r22,r10
    79c4:	dcc01017 	ldw	r19,64(sp)
    79c8:	b821883a 	mov	r16,r23
    79cc:	dc801015 	stw	r18,64(sp)
    79d0:	dc800e17 	ldw	r18,56(sp)
    79d4:	00000906 	br	79fc <_dtoa_r+0x60c>
    79d8:	00119440 	call	11944 <__subdf3>
    79dc:	1009883a 	mov	r4,r2
    79e0:	180b883a 	mov	r5,r3
    79e4:	900d883a 	mov	r6,r18
    79e8:	980f883a 	mov	r7,r19
    79ec:	00111400 	call	11140 <__ledf2>
    79f0:	10040e16 	blt	r2,zero,8a2c <_dtoa_r+0x163c>
    79f4:	b821883a 	mov	r16,r23
    79f8:	bd841026 	beq	r23,r22,8a3c <_dtoa_r+0x164c>
    79fc:	9009883a 	mov	r4,r18
    7a00:	980b883a 	mov	r5,r19
    7a04:	000d883a 	mov	r6,zero
    7a08:	01d00934 	movhi	r7,16420
    7a0c:	00112200 	call	11220 <__muldf3>
    7a10:	000d883a 	mov	r6,zero
    7a14:	01d00934 	movhi	r7,16420
    7a18:	8809883a 	mov	r4,r17
    7a1c:	a00b883a 	mov	r5,r20
    7a20:	1025883a 	mov	r18,r2
    7a24:	1827883a 	mov	r19,r3
    7a28:	00112200 	call	11220 <__muldf3>
    7a2c:	180b883a 	mov	r5,r3
    7a30:	1009883a 	mov	r4,r2
    7a34:	1823883a 	mov	r17,r3
    7a38:	1029883a 	mov	r20,r2
    7a3c:	00122140 	call	12214 <__fixdfsi>
    7a40:	1009883a 	mov	r4,r2
    7a44:	102b883a 	mov	r21,r2
    7a48:	001229c0 	call	1229c <__floatsidf>
    7a4c:	a009883a 	mov	r4,r20
    7a50:	880b883a 	mov	r5,r17
    7a54:	100d883a 	mov	r6,r2
    7a58:	180f883a 	mov	r7,r3
    7a5c:	00119440 	call	11944 <__subdf3>
    7a60:	ad400c04 	addi	r21,r21,48
    7a64:	1009883a 	mov	r4,r2
    7a68:	180b883a 	mov	r5,r3
    7a6c:	900d883a 	mov	r6,r18
    7a70:	980f883a 	mov	r7,r19
    7a74:	85400005 	stb	r21,0(r16)
    7a78:	1023883a 	mov	r17,r2
    7a7c:	1829883a 	mov	r20,r3
    7a80:	00111400 	call	11140 <__ledf2>
    7a84:	bdc00044 	addi	r23,r23,1
    7a88:	0009883a 	mov	r4,zero
    7a8c:	014ffc34 	movhi	r5,16368
    7a90:	880d883a 	mov	r6,r17
    7a94:	a00f883a 	mov	r7,r20
    7a98:	103fcf0e 	bge	r2,zero,79d8 <__alt_mem_Flash_flash_data+0xf40079d8>
    7a9c:	d9801217 	ldw	r6,72(sp)
    7aa0:	dc001117 	ldw	r16,68(sp)
    7aa4:	d9800515 	stw	r6,20(sp)
    7aa8:	8009883a 	mov	r4,r16
    7aac:	e00b883a 	mov	r5,fp
    7ab0:	000ab300 	call	ab30 <_Bfree>
    7ab4:	d8c00517 	ldw	r3,20(sp)
    7ab8:	d9002317 	ldw	r4,140(sp)
    7abc:	d9802517 	ldw	r6,148(sp)
    7ac0:	b8000005 	stb	zero,0(r23)
    7ac4:	18800044 	addi	r2,r3,1
    7ac8:	20800015 	stw	r2,0(r4)
    7acc:	30027226 	beq	r6,zero,8498 <_dtoa_r+0x10a8>
    7ad0:	35c00015 	stw	r23,0(r6)
    7ad4:	d8800717 	ldw	r2,28(sp)
    7ad8:	003e7406 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    7adc:	00800434 	movhi	r2,16
    7ae0:	10bfffc4 	addi	r2,r2,-1
    7ae4:	a8aa703a 	and	r21,r21,r2
    7ae8:	a83e801e 	bne	r21,zero,74ec <__alt_mem_Flash_flash_data+0xf40074ec>
    7aec:	008000b4 	movhi	r2,2
    7af0:	10bed404 	addi	r2,r2,-1200
    7af4:	003e7f06 	br	74f4 <__alt_mem_Flash_flash_data+0xf40074f4>
    7af8:	10c00204 	addi	r3,r2,8
    7afc:	003e8206 	br	7508 <__alt_mem_Flash_flash_data+0xf4007508>
    7b00:	01400434 	movhi	r5,16
    7b04:	297fffc4 	addi	r5,r5,-1
    7b08:	994a703a 	and	r5,r19,r5
    7b0c:	9009883a 	mov	r4,r18
    7b10:	8c7f0044 	addi	r17,r17,-1023
    7b14:	294ffc34 	orhi	r5,r5,16368
    7b18:	dd000217 	ldw	r20,8(sp)
    7b1c:	d8000f15 	stw	zero,60(sp)
    7b20:	003e9f06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    7b24:	008000b4 	movhi	r2,2
    7b28:	10bec304 	addi	r2,r2,-1268
    7b2c:	003e5f06 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    7b30:	80001115 	stw	zero,68(r16)
    7b34:	8009883a 	mov	r4,r16
    7b38:	000b883a 	mov	r5,zero
    7b3c:	000aa880 	call	aa88 <_Balloc>
    7b40:	01bfffc4 	movi	r6,-1
    7b44:	d8800715 	stw	r2,28(sp)
    7b48:	80801015 	stw	r2,64(r16)
    7b4c:	00800044 	movi	r2,1
    7b50:	d9800c15 	stw	r6,48(sp)
    7b54:	d8800b15 	stw	r2,44(sp)
    7b58:	d9800615 	stw	r6,24(sp)
    7b5c:	d8002215 	stw	zero,136(sp)
    7b60:	d8000315 	stw	zero,12(sp)
    7b64:	d8800117 	ldw	r2,4(sp)
    7b68:	10008e16 	blt	r2,zero,7da4 <_dtoa_r+0x9b4>
    7b6c:	d9000517 	ldw	r4,20(sp)
    7b70:	00c00384 	movi	r3,14
    7b74:	19008b16 	blt	r3,r4,7da4 <_dtoa_r+0x9b4>
    7b78:	200490fa 	slli	r2,r4,3
    7b7c:	00c000b4 	movhi	r3,2
    7b80:	d9802217 	ldw	r6,136(sp)
    7b84:	18fef304 	addi	r3,r3,-1076
    7b88:	1885883a 	add	r2,r3,r2
    7b8c:	14400017 	ldw	r17,0(r2)
    7b90:	15000117 	ldw	r20,4(r2)
    7b94:	3001c716 	blt	r6,zero,82b4 <_dtoa_r+0xec4>
    7b98:	880d883a 	mov	r6,r17
    7b9c:	a00f883a 	mov	r7,r20
    7ba0:	9009883a 	mov	r4,r18
    7ba4:	980b883a 	mov	r5,r19
    7ba8:	00107100 	call	10710 <__divdf3>
    7bac:	180b883a 	mov	r5,r3
    7bb0:	1009883a 	mov	r4,r2
    7bb4:	00122140 	call	12214 <__fixdfsi>
    7bb8:	1009883a 	mov	r4,r2
    7bbc:	102d883a 	mov	r22,r2
    7bc0:	001229c0 	call	1229c <__floatsidf>
    7bc4:	1009883a 	mov	r4,r2
    7bc8:	180b883a 	mov	r5,r3
    7bcc:	880d883a 	mov	r6,r17
    7bd0:	a00f883a 	mov	r7,r20
    7bd4:	00112200 	call	11220 <__muldf3>
    7bd8:	9009883a 	mov	r4,r18
    7bdc:	980b883a 	mov	r5,r19
    7be0:	100d883a 	mov	r6,r2
    7be4:	180f883a 	mov	r7,r3
    7be8:	00119440 	call	11944 <__subdf3>
    7bec:	d9000717 	ldw	r4,28(sp)
    7bf0:	d9800617 	ldw	r6,24(sp)
    7bf4:	180b883a 	mov	r5,r3
    7bf8:	b0c00c04 	addi	r3,r22,48
    7bfc:	20c00005 	stb	r3,0(r4)
    7c00:	25c00044 	addi	r23,r4,1
    7c04:	01000044 	movi	r4,1
    7c08:	1011883a 	mov	r8,r2
    7c0c:	2807883a 	mov	r3,r5
    7c10:	31003d26 	beq	r6,r4,7d08 <_dtoa_r+0x918>
    7c14:	000d883a 	mov	r6,zero
    7c18:	01d00934 	movhi	r7,16420
    7c1c:	1009883a 	mov	r4,r2
    7c20:	00112200 	call	11220 <__muldf3>
    7c24:	1009883a 	mov	r4,r2
    7c28:	180b883a 	mov	r5,r3
    7c2c:	000d883a 	mov	r6,zero
    7c30:	000f883a 	mov	r7,zero
    7c34:	1027883a 	mov	r19,r2
    7c38:	182b883a 	mov	r21,r3
    7c3c:	0010fdc0 	call	10fdc <__eqdf2>
    7c40:	103f9926 	beq	r2,zero,7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7c44:	d8c00617 	ldw	r3,24(sp)
    7c48:	d9000717 	ldw	r4,28(sp)
    7c4c:	b825883a 	mov	r18,r23
    7c50:	18bfffc4 	addi	r2,r3,-1
    7c54:	20ad883a 	add	r22,r4,r2
    7c58:	dc000315 	stw	r16,12(sp)
    7c5c:	00000a06 	br	7c88 <_dtoa_r+0x898>
    7c60:	00112200 	call	11220 <__muldf3>
    7c64:	1009883a 	mov	r4,r2
    7c68:	180b883a 	mov	r5,r3
    7c6c:	000d883a 	mov	r6,zero
    7c70:	000f883a 	mov	r7,zero
    7c74:	1027883a 	mov	r19,r2
    7c78:	182b883a 	mov	r21,r3
    7c7c:	b825883a 	mov	r18,r23
    7c80:	0010fdc0 	call	10fdc <__eqdf2>
    7c84:	10022626 	beq	r2,zero,8520 <_dtoa_r+0x1130>
    7c88:	880d883a 	mov	r6,r17
    7c8c:	a00f883a 	mov	r7,r20
    7c90:	9809883a 	mov	r4,r19
    7c94:	a80b883a 	mov	r5,r21
    7c98:	00107100 	call	10710 <__divdf3>
    7c9c:	180b883a 	mov	r5,r3
    7ca0:	1009883a 	mov	r4,r2
    7ca4:	00122140 	call	12214 <__fixdfsi>
    7ca8:	1009883a 	mov	r4,r2
    7cac:	1021883a 	mov	r16,r2
    7cb0:	001229c0 	call	1229c <__floatsidf>
    7cb4:	1009883a 	mov	r4,r2
    7cb8:	180b883a 	mov	r5,r3
    7cbc:	880d883a 	mov	r6,r17
    7cc0:	a00f883a 	mov	r7,r20
    7cc4:	00112200 	call	11220 <__muldf3>
    7cc8:	9809883a 	mov	r4,r19
    7ccc:	a80b883a 	mov	r5,r21
    7cd0:	100d883a 	mov	r6,r2
    7cd4:	180f883a 	mov	r7,r3
    7cd8:	00119440 	call	11944 <__subdf3>
    7cdc:	82000c04 	addi	r8,r16,48
    7ce0:	92000005 	stb	r8,0(r18)
    7ce4:	1009883a 	mov	r4,r2
    7ce8:	180b883a 	mov	r5,r3
    7cec:	000d883a 	mov	r6,zero
    7cf0:	01d00934 	movhi	r7,16420
    7cf4:	1011883a 	mov	r8,r2
    7cf8:	bdc00044 	addi	r23,r23,1
    7cfc:	95bfd81e 	bne	r18,r22,7c60 <__alt_mem_Flash_flash_data+0xf4007c60>
    7d00:	802d883a 	mov	r22,r16
    7d04:	dc000317 	ldw	r16,12(sp)
    7d08:	4009883a 	mov	r4,r8
    7d0c:	180b883a 	mov	r5,r3
    7d10:	400d883a 	mov	r6,r8
    7d14:	180f883a 	mov	r7,r3
    7d18:	000fe740 	call	fe74 <__adddf3>
    7d1c:	8809883a 	mov	r4,r17
    7d20:	a00b883a 	mov	r5,r20
    7d24:	100d883a 	mov	r6,r2
    7d28:	180f883a 	mov	r7,r3
    7d2c:	1027883a 	mov	r19,r2
    7d30:	1825883a 	mov	r18,r3
    7d34:	00111400 	call	11140 <__ledf2>
    7d38:	10000816 	blt	r2,zero,7d5c <_dtoa_r+0x96c>
    7d3c:	8809883a 	mov	r4,r17
    7d40:	a00b883a 	mov	r5,r20
    7d44:	980d883a 	mov	r6,r19
    7d48:	900f883a 	mov	r7,r18
    7d4c:	0010fdc0 	call	10fdc <__eqdf2>
    7d50:	103f551e 	bne	r2,zero,7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7d54:	b580004c 	andi	r22,r22,1
    7d58:	b03f5326 	beq	r22,zero,7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7d5c:	bd7fffc3 	ldbu	r21,-1(r23)
    7d60:	b8bfffc4 	addi	r2,r23,-1
    7d64:	1007883a 	mov	r3,r2
    7d68:	01400e44 	movi	r5,57
    7d6c:	d9800717 	ldw	r6,28(sp)
    7d70:	00000506 	br	7d88 <_dtoa_r+0x998>
    7d74:	18ffffc4 	addi	r3,r3,-1
    7d78:	30825e26 	beq	r6,r2,86f4 <_dtoa_r+0x1304>
    7d7c:	1d400003 	ldbu	r21,0(r3)
    7d80:	102f883a 	mov	r23,r2
    7d84:	10bfffc4 	addi	r2,r2,-1
    7d88:	a9003fcc 	andi	r4,r21,255
    7d8c:	2100201c 	xori	r4,r4,128
    7d90:	213fe004 	addi	r4,r4,-128
    7d94:	217ff726 	beq	r4,r5,7d74 <__alt_mem_Flash_flash_data+0xf4007d74>
    7d98:	aa000044 	addi	r8,r21,1
    7d9c:	12000005 	stb	r8,0(r2)
    7da0:	003f4106 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    7da4:	d8c00b17 	ldw	r3,44(sp)
    7da8:	18006726 	beq	r3,zero,7f48 <_dtoa_r+0xb58>
    7dac:	d9000317 	ldw	r4,12(sp)
    7db0:	00c00044 	movi	r3,1
    7db4:	19016a0e 	bge	r3,r4,8360 <_dtoa_r+0xf70>
    7db8:	d8800617 	ldw	r2,24(sp)
    7dbc:	d8c00917 	ldw	r3,36(sp)
    7dc0:	157fffc4 	addi	r21,r2,-1
    7dc4:	1d420716 	blt	r3,r21,85e4 <_dtoa_r+0x11f4>
    7dc8:	1d6bc83a 	sub	r21,r3,r21
    7dcc:	d8800617 	ldw	r2,24(sp)
    7dd0:	1002c716 	blt	r2,zero,88f0 <_dtoa_r+0x1500>
    7dd4:	dd000817 	ldw	r20,32(sp)
    7dd8:	d8800617 	ldw	r2,24(sp)
    7ddc:	d9800817 	ldw	r6,32(sp)
    7de0:	8009883a 	mov	r4,r16
    7de4:	01400044 	movi	r5,1
    7de8:	308d883a 	add	r6,r6,r2
    7dec:	d9800815 	stw	r6,32(sp)
    7df0:	b0ad883a 	add	r22,r22,r2
    7df4:	000ae940 	call	ae94 <__i2b>
    7df8:	1023883a 	mov	r17,r2
    7dfc:	a0000826 	beq	r20,zero,7e20 <_dtoa_r+0xa30>
    7e00:	0580070e 	bge	zero,r22,7e20 <_dtoa_r+0xa30>
    7e04:	b005883a 	mov	r2,r22
    7e08:	a5812016 	blt	r20,r22,828c <_dtoa_r+0xe9c>
    7e0c:	d8c00817 	ldw	r3,32(sp)
    7e10:	a0a9c83a 	sub	r20,r20,r2
    7e14:	b0adc83a 	sub	r22,r22,r2
    7e18:	1887c83a 	sub	r3,r3,r2
    7e1c:	d8c00815 	stw	r3,32(sp)
    7e20:	d9000917 	ldw	r4,36(sp)
    7e24:	0100140e 	bge	zero,r4,7e78 <_dtoa_r+0xa88>
    7e28:	d9800b17 	ldw	r6,44(sp)
    7e2c:	3001e526 	beq	r6,zero,85c4 <_dtoa_r+0x11d4>
    7e30:	05400e0e 	bge	zero,r21,7e6c <_dtoa_r+0xa7c>
    7e34:	880b883a 	mov	r5,r17
    7e38:	8009883a 	mov	r4,r16
    7e3c:	a80d883a 	mov	r6,r21
    7e40:	000b0cc0 	call	b0cc <__pow5mult>
    7e44:	e00d883a 	mov	r6,fp
    7e48:	8009883a 	mov	r4,r16
    7e4c:	100b883a 	mov	r5,r2
    7e50:	1023883a 	mov	r17,r2
    7e54:	000aed00 	call	aed0 <__multiply>
    7e58:	102f883a 	mov	r23,r2
    7e5c:	e00b883a 	mov	r5,fp
    7e60:	8009883a 	mov	r4,r16
    7e64:	000ab300 	call	ab30 <_Bfree>
    7e68:	b839883a 	mov	fp,r23
    7e6c:	d8800917 	ldw	r2,36(sp)
    7e70:	154dc83a 	sub	r6,r2,r21
    7e74:	3001281e 	bne	r6,zero,8318 <_dtoa_r+0xf28>
    7e78:	05c00044 	movi	r23,1
    7e7c:	8009883a 	mov	r4,r16
    7e80:	b80b883a 	mov	r5,r23
    7e84:	000ae940 	call	ae94 <__i2b>
    7e88:	d8c00a17 	ldw	r3,40(sp)
    7e8c:	102b883a 	mov	r21,r2
    7e90:	00c0310e 	bge	zero,r3,7f58 <_dtoa_r+0xb68>
    7e94:	8009883a 	mov	r4,r16
    7e98:	100b883a 	mov	r5,r2
    7e9c:	180d883a 	mov	r6,r3
    7ea0:	000b0cc0 	call	b0cc <__pow5mult>
    7ea4:	d9000317 	ldw	r4,12(sp)
    7ea8:	102b883a 	mov	r21,r2
    7eac:	b9011f0e 	bge	r23,r4,832c <_dtoa_r+0xf3c>
    7eb0:	0027883a 	mov	r19,zero
    7eb4:	a8800417 	ldw	r2,16(r21)
    7eb8:	10800104 	addi	r2,r2,4
    7ebc:	1085883a 	add	r2,r2,r2
    7ec0:	1085883a 	add	r2,r2,r2
    7ec4:	a885883a 	add	r2,r21,r2
    7ec8:	11000017 	ldw	r4,0(r2)
    7ecc:	000ad7c0 	call	ad7c <__hi0bits>
    7ed0:	00c00804 	movi	r3,32
    7ed4:	1885c83a 	sub	r2,r3,r2
    7ed8:	00002506 	br	7f70 <_dtoa_r+0xb80>
    7edc:	01800044 	movi	r6,1
    7ee0:	d9800d15 	stw	r6,52(sp)
    7ee4:	003dec06 	br	7698 <__alt_mem_Flash_flash_data+0xf4007698>
    7ee8:	d8c00817 	ldw	r3,32(sp)
    7eec:	d9000517 	ldw	r4,20(sp)
    7ef0:	d8000a15 	stw	zero,40(sp)
    7ef4:	1907c83a 	sub	r3,r3,r4
    7ef8:	010dc83a 	sub	r6,zero,r4
    7efc:	d8c00815 	stw	r3,32(sp)
    7f00:	d9800915 	stw	r6,36(sp)
    7f04:	003ded06 	br	76bc <__alt_mem_Flash_flash_data+0xf40076bc>
    7f08:	05adc83a 	sub	r22,zero,r22
    7f0c:	dd800815 	stw	r22,32(sp)
    7f10:	002d883a 	mov	r22,zero
    7f14:	003de406 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7f18:	d9000517 	ldw	r4,20(sp)
    7f1c:	001229c0 	call	1229c <__floatsidf>
    7f20:	1009883a 	mov	r4,r2
    7f24:	180b883a 	mov	r5,r3
    7f28:	b00d883a 	mov	r6,r22
    7f2c:	a80f883a 	mov	r7,r21
    7f30:	0010fdc0 	call	10fdc <__eqdf2>
    7f34:	103dc726 	beq	r2,zero,7654 <__alt_mem_Flash_flash_data+0xf4007654>
    7f38:	d8800517 	ldw	r2,20(sp)
    7f3c:	10bfffc4 	addi	r2,r2,-1
    7f40:	d8800515 	stw	r2,20(sp)
    7f44:	003dc306 	br	7654 <__alt_mem_Flash_flash_data+0xf4007654>
    7f48:	dd400917 	ldw	r21,36(sp)
    7f4c:	dd000817 	ldw	r20,32(sp)
    7f50:	0023883a 	mov	r17,zero
    7f54:	003fa906 	br	7dfc <__alt_mem_Flash_flash_data+0xf4007dfc>
    7f58:	d9800317 	ldw	r6,12(sp)
    7f5c:	b981670e 	bge	r23,r6,84fc <_dtoa_r+0x110c>
    7f60:	0027883a 	mov	r19,zero
    7f64:	d8c00a17 	ldw	r3,40(sp)
    7f68:	183fd21e 	bne	r3,zero,7eb4 <__alt_mem_Flash_flash_data+0xf4007eb4>
    7f6c:	00800044 	movi	r2,1
    7f70:	1585883a 	add	r2,r2,r22
    7f74:	108007cc 	andi	r2,r2,31
    7f78:	10005f26 	beq	r2,zero,80f8 <_dtoa_r+0xd08>
    7f7c:	00c00804 	movi	r3,32
    7f80:	1887c83a 	sub	r3,r3,r2
    7f84:	01000104 	movi	r4,4
    7f88:	20c2dd0e 	bge	r4,r3,8b00 <_dtoa_r+0x1710>
    7f8c:	d9000817 	ldw	r4,32(sp)
    7f90:	00c00704 	movi	r3,28
    7f94:	1885c83a 	sub	r2,r3,r2
    7f98:	2089883a 	add	r4,r4,r2
    7f9c:	d9000815 	stw	r4,32(sp)
    7fa0:	a0a9883a 	add	r20,r20,r2
    7fa4:	b0ad883a 	add	r22,r22,r2
    7fa8:	d8800817 	ldw	r2,32(sp)
    7fac:	0080050e 	bge	zero,r2,7fc4 <_dtoa_r+0xbd4>
    7fb0:	e00b883a 	mov	r5,fp
    7fb4:	8009883a 	mov	r4,r16
    7fb8:	100d883a 	mov	r6,r2
    7fbc:	000b20c0 	call	b20c <__lshift>
    7fc0:	1039883a 	mov	fp,r2
    7fc4:	0580050e 	bge	zero,r22,7fdc <_dtoa_r+0xbec>
    7fc8:	a80b883a 	mov	r5,r21
    7fcc:	8009883a 	mov	r4,r16
    7fd0:	b00d883a 	mov	r6,r22
    7fd4:	000b20c0 	call	b20c <__lshift>
    7fd8:	102b883a 	mov	r21,r2
    7fdc:	d8c00d17 	ldw	r3,52(sp)
    7fe0:	1801161e 	bne	r3,zero,843c <_dtoa_r+0x104c>
    7fe4:	d8c00617 	ldw	r3,24(sp)
    7fe8:	00c12d0e 	bge	zero,r3,84a0 <_dtoa_r+0x10b0>
    7fec:	d8c00b17 	ldw	r3,44(sp)
    7ff0:	1800571e 	bne	r3,zero,8150 <_dtoa_r+0xd60>
    7ff4:	dc800717 	ldw	r18,28(sp)
    7ff8:	dcc00617 	ldw	r19,24(sp)
    7ffc:	9029883a 	mov	r20,r18
    8000:	00000206 	br	800c <_dtoa_r+0xc1c>
    8004:	000ab580 	call	ab58 <__multadd>
    8008:	1039883a 	mov	fp,r2
    800c:	e009883a 	mov	r4,fp
    8010:	a80b883a 	mov	r5,r21
    8014:	00071f00 	call	71f0 <quorem>
    8018:	10800c04 	addi	r2,r2,48
    801c:	90800005 	stb	r2,0(r18)
    8020:	94800044 	addi	r18,r18,1
    8024:	9507c83a 	sub	r3,r18,r20
    8028:	8009883a 	mov	r4,r16
    802c:	e00b883a 	mov	r5,fp
    8030:	01800284 	movi	r6,10
    8034:	000f883a 	mov	r7,zero
    8038:	1cfff216 	blt	r3,r19,8004 <__alt_mem_Flash_flash_data+0xf4008004>
    803c:	1011883a 	mov	r8,r2
    8040:	d8800617 	ldw	r2,24(sp)
    8044:	00822e0e 	bge	zero,r2,8900 <_dtoa_r+0x1510>
    8048:	d9000717 	ldw	r4,28(sp)
    804c:	0025883a 	mov	r18,zero
    8050:	20af883a 	add	r23,r4,r2
    8054:	e00b883a 	mov	r5,fp
    8058:	01800044 	movi	r6,1
    805c:	8009883a 	mov	r4,r16
    8060:	da001715 	stw	r8,92(sp)
    8064:	000b20c0 	call	b20c <__lshift>
    8068:	1009883a 	mov	r4,r2
    806c:	a80b883a 	mov	r5,r21
    8070:	1039883a 	mov	fp,r2
    8074:	000b35c0 	call	b35c <__mcmp>
    8078:	da001717 	ldw	r8,92(sp)
    807c:	00816e0e 	bge	zero,r2,8638 <_dtoa_r+0x1248>
    8080:	b93fffc3 	ldbu	r4,-1(r23)
    8084:	b8bfffc4 	addi	r2,r23,-1
    8088:	1007883a 	mov	r3,r2
    808c:	01800e44 	movi	r6,57
    8090:	d9c00717 	ldw	r7,28(sp)
    8094:	00000506 	br	80ac <_dtoa_r+0xcbc>
    8098:	18ffffc4 	addi	r3,r3,-1
    809c:	38811926 	beq	r7,r2,8504 <_dtoa_r+0x1114>
    80a0:	19000003 	ldbu	r4,0(r3)
    80a4:	102f883a 	mov	r23,r2
    80a8:	10bfffc4 	addi	r2,r2,-1
    80ac:	21403fcc 	andi	r5,r4,255
    80b0:	2940201c 	xori	r5,r5,128
    80b4:	297fe004 	addi	r5,r5,-128
    80b8:	29bff726 	beq	r5,r6,8098 <__alt_mem_Flash_flash_data+0xf4008098>
    80bc:	21000044 	addi	r4,r4,1
    80c0:	11000005 	stb	r4,0(r2)
    80c4:	8009883a 	mov	r4,r16
    80c8:	a80b883a 	mov	r5,r21
    80cc:	000ab300 	call	ab30 <_Bfree>
    80d0:	883e7526 	beq	r17,zero,7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    80d4:	90000426 	beq	r18,zero,80e8 <_dtoa_r+0xcf8>
    80d8:	94400326 	beq	r18,r17,80e8 <_dtoa_r+0xcf8>
    80dc:	8009883a 	mov	r4,r16
    80e0:	900b883a 	mov	r5,r18
    80e4:	000ab300 	call	ab30 <_Bfree>
    80e8:	8009883a 	mov	r4,r16
    80ec:	880b883a 	mov	r5,r17
    80f0:	000ab300 	call	ab30 <_Bfree>
    80f4:	003e6c06 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    80f8:	00800704 	movi	r2,28
    80fc:	d9800817 	ldw	r6,32(sp)
    8100:	a0a9883a 	add	r20,r20,r2
    8104:	b0ad883a 	add	r22,r22,r2
    8108:	308d883a 	add	r6,r6,r2
    810c:	d9800815 	stw	r6,32(sp)
    8110:	003fa506 	br	7fa8 <__alt_mem_Flash_flash_data+0xf4007fa8>
    8114:	013efb84 	movi	r4,-1042
    8118:	246bc83a 	sub	r21,r4,r17
    811c:	9548983a 	sll	r4,r18,r21
    8120:	003d1806 	br	7584 <__alt_mem_Flash_flash_data+0xf4007584>
    8124:	d8000d15 	stw	zero,52(sp)
    8128:	003d5b06 	br	7698 <__alt_mem_Flash_flash_data+0xf4007698>
    812c:	880b883a 	mov	r5,r17
    8130:	8009883a 	mov	r4,r16
    8134:	01800284 	movi	r6,10
    8138:	000f883a 	mov	r7,zero
    813c:	000ab580 	call	ab58 <__multadd>
    8140:	1023883a 	mov	r17,r2
    8144:	d8800c17 	ldw	r2,48(sp)
    8148:	0082550e 	bge	zero,r2,8aa0 <_dtoa_r+0x16b0>
    814c:	d8800615 	stw	r2,24(sp)
    8150:	0500050e 	bge	zero,r20,8168 <_dtoa_r+0xd78>
    8154:	880b883a 	mov	r5,r17
    8158:	8009883a 	mov	r4,r16
    815c:	a00d883a 	mov	r6,r20
    8160:	000b20c0 	call	b20c <__lshift>
    8164:	1023883a 	mov	r17,r2
    8168:	98016a1e 	bne	r19,zero,8714 <_dtoa_r+0x1324>
    816c:	8829883a 	mov	r20,r17
    8170:	d9000617 	ldw	r4,24(sp)
    8174:	dcc00717 	ldw	r19,28(sp)
    8178:	9480004c 	andi	r18,r18,1
    817c:	20bfffc4 	addi	r2,r4,-1
    8180:	9885883a 	add	r2,r19,r2
    8184:	d8800415 	stw	r2,16(sp)
    8188:	dc800615 	stw	r18,24(sp)
    818c:	e009883a 	mov	r4,fp
    8190:	a80b883a 	mov	r5,r21
    8194:	00071f00 	call	71f0 <quorem>
    8198:	e009883a 	mov	r4,fp
    819c:	880b883a 	mov	r5,r17
    81a0:	102f883a 	mov	r23,r2
    81a4:	000b35c0 	call	b35c <__mcmp>
    81a8:	8009883a 	mov	r4,r16
    81ac:	a80b883a 	mov	r5,r21
    81b0:	a00d883a 	mov	r6,r20
    81b4:	102d883a 	mov	r22,r2
    81b8:	000b3bc0 	call	b3bc <__mdiff>
    81bc:	1007883a 	mov	r3,r2
    81c0:	10800317 	ldw	r2,12(r2)
    81c4:	bc800c04 	addi	r18,r23,48
    81c8:	1000971e 	bne	r2,zero,8428 <_dtoa_r+0x1038>
    81cc:	180b883a 	mov	r5,r3
    81d0:	e009883a 	mov	r4,fp
    81d4:	d8c01515 	stw	r3,84(sp)
    81d8:	000b35c0 	call	b35c <__mcmp>
    81dc:	d8c01517 	ldw	r3,84(sp)
    81e0:	8009883a 	mov	r4,r16
    81e4:	d8801515 	stw	r2,84(sp)
    81e8:	180b883a 	mov	r5,r3
    81ec:	000ab300 	call	ab30 <_Bfree>
    81f0:	d8801517 	ldw	r2,84(sp)
    81f4:	1000041e 	bne	r2,zero,8208 <_dtoa_r+0xe18>
    81f8:	d9800317 	ldw	r6,12(sp)
    81fc:	3000021e 	bne	r6,zero,8208 <_dtoa_r+0xe18>
    8200:	d8c00617 	ldw	r3,24(sp)
    8204:	18007626 	beq	r3,zero,83e0 <_dtoa_r+0xff0>
    8208:	b0005b16 	blt	r22,zero,8378 <_dtoa_r+0xf88>
    820c:	b000041e 	bne	r22,zero,8220 <_dtoa_r+0xe30>
    8210:	d9000317 	ldw	r4,12(sp)
    8214:	2000021e 	bne	r4,zero,8220 <_dtoa_r+0xe30>
    8218:	d8c00617 	ldw	r3,24(sp)
    821c:	18005626 	beq	r3,zero,8378 <_dtoa_r+0xf88>
    8220:	00814d16 	blt	zero,r2,8758 <_dtoa_r+0x1368>
    8224:	d8c00417 	ldw	r3,16(sp)
    8228:	9d800044 	addi	r22,r19,1
    822c:	9c800005 	stb	r18,0(r19)
    8230:	b02f883a 	mov	r23,r22
    8234:	98c14c26 	beq	r19,r3,8768 <_dtoa_r+0x1378>
    8238:	e00b883a 	mov	r5,fp
    823c:	8009883a 	mov	r4,r16
    8240:	01800284 	movi	r6,10
    8244:	000f883a 	mov	r7,zero
    8248:	000ab580 	call	ab58 <__multadd>
    824c:	1039883a 	mov	fp,r2
    8250:	8d006d26 	beq	r17,r20,8408 <_dtoa_r+0x1018>
    8254:	880b883a 	mov	r5,r17
    8258:	01800284 	movi	r6,10
    825c:	000f883a 	mov	r7,zero
    8260:	8009883a 	mov	r4,r16
    8264:	000ab580 	call	ab58 <__multadd>
    8268:	a00b883a 	mov	r5,r20
    826c:	8009883a 	mov	r4,r16
    8270:	01800284 	movi	r6,10
    8274:	000f883a 	mov	r7,zero
    8278:	1023883a 	mov	r17,r2
    827c:	000ab580 	call	ab58 <__multadd>
    8280:	1029883a 	mov	r20,r2
    8284:	b027883a 	mov	r19,r22
    8288:	003fc006 	br	818c <__alt_mem_Flash_flash_data+0xf400818c>
    828c:	a005883a 	mov	r2,r20
    8290:	003ede06 	br	7e0c <__alt_mem_Flash_flash_data+0xf4007e0c>
    8294:	01000044 	movi	r4,1
    8298:	d9000b15 	stw	r4,44(sp)
    829c:	d9802217 	ldw	r6,136(sp)
    82a0:	0180dc0e 	bge	zero,r6,8614 <_dtoa_r+0x1224>
    82a4:	3023883a 	mov	r17,r6
    82a8:	d9800c15 	stw	r6,48(sp)
    82ac:	d9800615 	stw	r6,24(sp)
    82b0:	003d1e06 	br	772c <__alt_mem_Flash_flash_data+0xf400772c>
    82b4:	d8800617 	ldw	r2,24(sp)
    82b8:	00be3716 	blt	zero,r2,7b98 <__alt_mem_Flash_flash_data+0xf4007b98>
    82bc:	1000be1e 	bne	r2,zero,85b8 <_dtoa_r+0x11c8>
    82c0:	8809883a 	mov	r4,r17
    82c4:	a00b883a 	mov	r5,r20
    82c8:	000d883a 	mov	r6,zero
    82cc:	01d00534 	movhi	r7,16404
    82d0:	00112200 	call	11220 <__muldf3>
    82d4:	1009883a 	mov	r4,r2
    82d8:	180b883a 	mov	r5,r3
    82dc:	900d883a 	mov	r6,r18
    82e0:	980f883a 	mov	r7,r19
    82e4:	00110600 	call	11060 <__gedf2>
    82e8:	002b883a 	mov	r21,zero
    82ec:	0023883a 	mov	r17,zero
    82f0:	10007a16 	blt	r2,zero,84dc <_dtoa_r+0x10ec>
    82f4:	d9002217 	ldw	r4,136(sp)
    82f8:	ddc00717 	ldw	r23,28(sp)
    82fc:	0108303a 	nor	r4,zero,r4
    8300:	d9000515 	stw	r4,20(sp)
    8304:	8009883a 	mov	r4,r16
    8308:	a80b883a 	mov	r5,r21
    830c:	000ab300 	call	ab30 <_Bfree>
    8310:	883f751e 	bne	r17,zero,80e8 <__alt_mem_Flash_flash_data+0xf40080e8>
    8314:	003de406 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    8318:	e00b883a 	mov	r5,fp
    831c:	8009883a 	mov	r4,r16
    8320:	000b0cc0 	call	b0cc <__pow5mult>
    8324:	1039883a 	mov	fp,r2
    8328:	003ed306 	br	7e78 <__alt_mem_Flash_flash_data+0xf4007e78>
    832c:	903ee01e 	bne	r18,zero,7eb0 <__alt_mem_Flash_flash_data+0xf4007eb0>
    8330:	00800434 	movhi	r2,16
    8334:	10bfffc4 	addi	r2,r2,-1
    8338:	9884703a 	and	r2,r19,r2
    833c:	103f081e 	bne	r2,zero,7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    8340:	9cdffc2c 	andhi	r19,r19,32752
    8344:	983f0626 	beq	r19,zero,7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    8348:	d8800817 	ldw	r2,32(sp)
    834c:	b5800044 	addi	r22,r22,1
    8350:	04c00044 	movi	r19,1
    8354:	10800044 	addi	r2,r2,1
    8358:	d8800815 	stw	r2,32(sp)
    835c:	003f0106 	br	7f64 <__alt_mem_Flash_flash_data+0xf4007f64>
    8360:	d9800f17 	ldw	r6,60(sp)
    8364:	30016826 	beq	r6,zero,8908 <_dtoa_r+0x1518>
    8368:	10810cc4 	addi	r2,r2,1075
    836c:	dd400917 	ldw	r21,36(sp)
    8370:	dd000817 	ldw	r20,32(sp)
    8374:	003e9906 	br	7ddc <__alt_mem_Flash_flash_data+0xf4007ddc>
    8378:	9011883a 	mov	r8,r18
    837c:	4007883a 	mov	r3,r8
    8380:	e02d883a 	mov	r22,fp
    8384:	0080100e 	bge	zero,r2,83c8 <_dtoa_r+0xfd8>
    8388:	01800044 	movi	r6,1
    838c:	8009883a 	mov	r4,r16
    8390:	e00b883a 	mov	r5,fp
    8394:	da001515 	stw	r8,84(sp)
    8398:	da001715 	stw	r8,92(sp)
    839c:	000b20c0 	call	b20c <__lshift>
    83a0:	1009883a 	mov	r4,r2
    83a4:	a80b883a 	mov	r5,r21
    83a8:	102d883a 	mov	r22,r2
    83ac:	000b35c0 	call	b35c <__mcmp>
    83b0:	d8c01517 	ldw	r3,84(sp)
    83b4:	da001717 	ldw	r8,92(sp)
    83b8:	0081a50e 	bge	zero,r2,8a50 <_dtoa_r+0x1660>
    83bc:	00800e44 	movi	r2,57
    83c0:	40817b26 	beq	r8,r2,89b0 <_dtoa_r+0x15c0>
    83c4:	40c00044 	addi	r3,r8,1
    83c8:	8825883a 	mov	r18,r17
    83cc:	9dc00044 	addi	r23,r19,1
    83d0:	98c00005 	stb	r3,0(r19)
    83d4:	a023883a 	mov	r17,r20
    83d8:	b039883a 	mov	fp,r22
    83dc:	003f3906 	br	80c4 <__alt_mem_Flash_flash_data+0xf40080c4>
    83e0:	00800e44 	movi	r2,57
    83e4:	9011883a 	mov	r8,r18
    83e8:	90817226 	beq	r18,r2,89b4 <_dtoa_r+0x15c4>
    83ec:	0580010e 	bge	zero,r22,83f4 <_dtoa_r+0x1004>
    83f0:	ba000c44 	addi	r8,r23,49
    83f4:	8825883a 	mov	r18,r17
    83f8:	9dc00044 	addi	r23,r19,1
    83fc:	9a000005 	stb	r8,0(r19)
    8400:	a023883a 	mov	r17,r20
    8404:	003f2f06 	br	80c4 <__alt_mem_Flash_flash_data+0xf40080c4>
    8408:	880b883a 	mov	r5,r17
    840c:	8009883a 	mov	r4,r16
    8410:	01800284 	movi	r6,10
    8414:	000f883a 	mov	r7,zero
    8418:	000ab580 	call	ab58 <__multadd>
    841c:	1023883a 	mov	r17,r2
    8420:	1029883a 	mov	r20,r2
    8424:	003f9706 	br	8284 <__alt_mem_Flash_flash_data+0xf4008284>
    8428:	8009883a 	mov	r4,r16
    842c:	180b883a 	mov	r5,r3
    8430:	000ab300 	call	ab30 <_Bfree>
    8434:	00800044 	movi	r2,1
    8438:	003f7306 	br	8208 <__alt_mem_Flash_flash_data+0xf4008208>
    843c:	e009883a 	mov	r4,fp
    8440:	a80b883a 	mov	r5,r21
    8444:	000b35c0 	call	b35c <__mcmp>
    8448:	103ee60e 	bge	r2,zero,7fe4 <__alt_mem_Flash_flash_data+0xf4007fe4>
    844c:	8009883a 	mov	r4,r16
    8450:	e00b883a 	mov	r5,fp
    8454:	01800284 	movi	r6,10
    8458:	000f883a 	mov	r7,zero
    845c:	000ab580 	call	ab58 <__multadd>
    8460:	d9000517 	ldw	r4,20(sp)
    8464:	d9800b17 	ldw	r6,44(sp)
    8468:	1039883a 	mov	fp,r2
    846c:	213fffc4 	addi	r4,r4,-1
    8470:	d9000515 	stw	r4,20(sp)
    8474:	303f2d1e 	bne	r6,zero,812c <__alt_mem_Flash_flash_data+0xf400812c>
    8478:	d9000c17 	ldw	r4,48(sp)
    847c:	0101780e 	bge	zero,r4,8a60 <_dtoa_r+0x1670>
    8480:	d9000615 	stw	r4,24(sp)
    8484:	003edb06 	br	7ff4 <__alt_mem_Flash_flash_data+0xf4007ff4>
    8488:	00800084 	movi	r2,2
    848c:	30818e1e 	bne	r6,r2,8ac8 <_dtoa_r+0x16d8>
    8490:	d8000b15 	stw	zero,44(sp)
    8494:	003f8106 	br	829c <__alt_mem_Flash_flash_data+0xf400829c>
    8498:	d8800717 	ldw	r2,28(sp)
    849c:	003c0306 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    84a0:	d9000317 	ldw	r4,12(sp)
    84a4:	00800084 	movi	r2,2
    84a8:	113ed00e 	bge	r2,r4,7fec <__alt_mem_Flash_flash_data+0xf4007fec>
    84ac:	d8c00617 	ldw	r3,24(sp)
    84b0:	183f901e 	bne	r3,zero,82f4 <__alt_mem_Flash_flash_data+0xf40082f4>
    84b4:	a80b883a 	mov	r5,r21
    84b8:	8009883a 	mov	r4,r16
    84bc:	01800144 	movi	r6,5
    84c0:	000f883a 	mov	r7,zero
    84c4:	000ab580 	call	ab58 <__multadd>
    84c8:	e009883a 	mov	r4,fp
    84cc:	100b883a 	mov	r5,r2
    84d0:	102b883a 	mov	r21,r2
    84d4:	000b35c0 	call	b35c <__mcmp>
    84d8:	00bf860e 	bge	zero,r2,82f4 <__alt_mem_Flash_flash_data+0xf40082f4>
    84dc:	d9800717 	ldw	r6,28(sp)
    84e0:	00800c44 	movi	r2,49
    84e4:	30800005 	stb	r2,0(r6)
    84e8:	d8800517 	ldw	r2,20(sp)
    84ec:	35c00044 	addi	r23,r6,1
    84f0:	10800044 	addi	r2,r2,1
    84f4:	d8800515 	stw	r2,20(sp)
    84f8:	003f8206 	br	8304 <__alt_mem_Flash_flash_data+0xf4008304>
    84fc:	903e981e 	bne	r18,zero,7f60 <__alt_mem_Flash_flash_data+0xf4007f60>
    8500:	003f8b06 	br	8330 <__alt_mem_Flash_flash_data+0xf4008330>
    8504:	d9800517 	ldw	r6,20(sp)
    8508:	d8c00717 	ldw	r3,28(sp)
    850c:	00800c44 	movi	r2,49
    8510:	31800044 	addi	r6,r6,1
    8514:	d9800515 	stw	r6,20(sp)
    8518:	18800005 	stb	r2,0(r3)
    851c:	003ee906 	br	80c4 <__alt_mem_Flash_flash_data+0xf40080c4>
    8520:	dc000317 	ldw	r16,12(sp)
    8524:	003d6006 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    8528:	8809883a 	mov	r4,r17
    852c:	001229c0 	call	1229c <__floatsidf>
    8530:	a009883a 	mov	r4,r20
    8534:	a80b883a 	mov	r5,r21
    8538:	100d883a 	mov	r6,r2
    853c:	180f883a 	mov	r7,r3
    8540:	00112200 	call	11220 <__muldf3>
    8544:	1009883a 	mov	r4,r2
    8548:	180b883a 	mov	r5,r3
    854c:	000d883a 	mov	r6,zero
    8550:	01d00734 	movhi	r7,16412
    8554:	000fe740 	call	fe74 <__adddf3>
    8558:	1023883a 	mov	r17,r2
    855c:	00bf3034 	movhi	r2,64704
    8560:	1885883a 	add	r2,r3,r2
    8564:	d8800e15 	stw	r2,56(sp)
    8568:	a009883a 	mov	r4,r20
    856c:	a80b883a 	mov	r5,r21
    8570:	000d883a 	mov	r6,zero
    8574:	01d00534 	movhi	r7,16404
    8578:	00119440 	call	11944 <__subdf3>
    857c:	d9c00e17 	ldw	r7,56(sp)
    8580:	1009883a 	mov	r4,r2
    8584:	180b883a 	mov	r5,r3
    8588:	880d883a 	mov	r6,r17
    858c:	102b883a 	mov	r21,r2
    8590:	1829883a 	mov	r20,r3
    8594:	00110600 	call	11060 <__gedf2>
    8598:	00807716 	blt	zero,r2,8778 <_dtoa_r+0x1388>
    859c:	d8800e17 	ldw	r2,56(sp)
    85a0:	a809883a 	mov	r4,r21
    85a4:	a00b883a 	mov	r5,r20
    85a8:	11e0003c 	xorhi	r7,r2,32768
    85ac:	880d883a 	mov	r6,r17
    85b0:	00111400 	call	11140 <__ledf2>
    85b4:	103d6b0e 	bge	r2,zero,7b64 <__alt_mem_Flash_flash_data+0xf4007b64>
    85b8:	002b883a 	mov	r21,zero
    85bc:	0023883a 	mov	r17,zero
    85c0:	003f4c06 	br	82f4 <__alt_mem_Flash_flash_data+0xf40082f4>
    85c4:	d9800917 	ldw	r6,36(sp)
    85c8:	e00b883a 	mov	r5,fp
    85cc:	8009883a 	mov	r4,r16
    85d0:	000b0cc0 	call	b0cc <__pow5mult>
    85d4:	1039883a 	mov	fp,r2
    85d8:	003e2706 	br	7e78 <__alt_mem_Flash_flash_data+0xf4007e78>
    85dc:	d8000b15 	stw	zero,44(sp)
    85e0:	003c4906 	br	7708 <__alt_mem_Flash_flash_data+0xf4007708>
    85e4:	d9000917 	ldw	r4,36(sp)
    85e8:	d9800a17 	ldw	r6,40(sp)
    85ec:	dd400915 	stw	r21,36(sp)
    85f0:	a905c83a 	sub	r2,r21,r4
    85f4:	308d883a 	add	r6,r6,r2
    85f8:	d9800a15 	stw	r6,40(sp)
    85fc:	002b883a 	mov	r21,zero
    8600:	003df206 	br	7dcc <__alt_mem_Flash_flash_data+0xf4007dcc>
    8604:	dc800e15 	stw	r18,56(sp)
    8608:	982b883a 	mov	r21,r19
    860c:	04400084 	movi	r17,2
    8610:	003c7406 	br	77e4 <__alt_mem_Flash_flash_data+0xf40077e4>
    8614:	04400044 	movi	r17,1
    8618:	dc400c15 	stw	r17,48(sp)
    861c:	dc400615 	stw	r17,24(sp)
    8620:	dc402215 	stw	r17,136(sp)
    8624:	80001115 	stw	zero,68(r16)
    8628:	000b883a 	mov	r5,zero
    862c:	003c4a06 	br	7758 <__alt_mem_Flash_flash_data+0xf4007758>
    8630:	3023883a 	mov	r17,r6
    8634:	003ffb06 	br	8624 <__alt_mem_Flash_flash_data+0xf4008624>
    8638:	1000021e 	bne	r2,zero,8644 <_dtoa_r+0x1254>
    863c:	4200004c 	andi	r8,r8,1
    8640:	403e8f1e 	bne	r8,zero,8080 <__alt_mem_Flash_flash_data+0xf4008080>
    8644:	01000c04 	movi	r4,48
    8648:	00000106 	br	8650 <_dtoa_r+0x1260>
    864c:	102f883a 	mov	r23,r2
    8650:	b8bfffc4 	addi	r2,r23,-1
    8654:	10c00007 	ldb	r3,0(r2)
    8658:	193ffc26 	beq	r3,r4,864c <__alt_mem_Flash_flash_data+0xf400864c>
    865c:	003e9906 	br	80c4 <__alt_mem_Flash_flash_data+0xf40080c4>
    8660:	d9000517 	ldw	r4,20(sp)
    8664:	012fc83a 	sub	r23,zero,r4
    8668:	b800ad26 	beq	r23,zero,8920 <_dtoa_r+0x1530>
    866c:	b88003cc 	andi	r2,r23,15
    8670:	100490fa 	slli	r2,r2,3
    8674:	00c000b4 	movhi	r3,2
    8678:	18fef304 	addi	r3,r3,-1076
    867c:	1885883a 	add	r2,r3,r2
    8680:	11800017 	ldw	r6,0(r2)
    8684:	11c00117 	ldw	r7,4(r2)
    8688:	b82fd13a 	srai	r23,r23,4
    868c:	9009883a 	mov	r4,r18
    8690:	980b883a 	mov	r5,r19
    8694:	00112200 	call	11220 <__muldf3>
    8698:	1029883a 	mov	r20,r2
    869c:	182b883a 	mov	r21,r3
    86a0:	b800f426 	beq	r23,zero,8a74 <_dtoa_r+0x1684>
    86a4:	020000b4 	movhi	r8,2
    86a8:	423ee904 	addi	r8,r8,-1116
    86ac:	8029883a 	mov	r20,r16
    86b0:	04400084 	movi	r17,2
    86b4:	4021883a 	mov	r16,r8
    86b8:	b980004c 	andi	r6,r23,1
    86bc:	1009883a 	mov	r4,r2
    86c0:	b82fd07a 	srai	r23,r23,1
    86c4:	180b883a 	mov	r5,r3
    86c8:	30000426 	beq	r6,zero,86dc <_dtoa_r+0x12ec>
    86cc:	81800017 	ldw	r6,0(r16)
    86d0:	81c00117 	ldw	r7,4(r16)
    86d4:	8c400044 	addi	r17,r17,1
    86d8:	00112200 	call	11220 <__muldf3>
    86dc:	84000204 	addi	r16,r16,8
    86e0:	b83ff51e 	bne	r23,zero,86b8 <__alt_mem_Flash_flash_data+0xf40086b8>
    86e4:	a021883a 	mov	r16,r20
    86e8:	182b883a 	mov	r21,r3
    86ec:	1029883a 	mov	r20,r2
    86f0:	003c5506 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    86f4:	d9800517 	ldw	r6,20(sp)
    86f8:	d9000717 	ldw	r4,28(sp)
    86fc:	00c00c04 	movi	r3,48
    8700:	31800044 	addi	r6,r6,1
    8704:	d9800515 	stw	r6,20(sp)
    8708:	20c00005 	stb	r3,0(r4)
    870c:	02000c44 	movi	r8,49
    8710:	003da206 	br	7d9c <__alt_mem_Flash_flash_data+0xf4007d9c>
    8714:	89400117 	ldw	r5,4(r17)
    8718:	8009883a 	mov	r4,r16
    871c:	000aa880 	call	aa88 <_Balloc>
    8720:	89800417 	ldw	r6,16(r17)
    8724:	11000304 	addi	r4,r2,12
    8728:	89400304 	addi	r5,r17,12
    872c:	31800084 	addi	r6,r6,2
    8730:	318d883a 	add	r6,r6,r6
    8734:	318d883a 	add	r6,r6,r6
    8738:	1027883a 	mov	r19,r2
    873c:	000a6d00 	call	a6d0 <memcpy>
    8740:	8009883a 	mov	r4,r16
    8744:	980b883a 	mov	r5,r19
    8748:	01800044 	movi	r6,1
    874c:	000b20c0 	call	b20c <__lshift>
    8750:	1029883a 	mov	r20,r2
    8754:	003e8606 	br	8170 <__alt_mem_Flash_flash_data+0xf4008170>
    8758:	00800e44 	movi	r2,57
    875c:	90809526 	beq	r18,r2,89b4 <_dtoa_r+0x15c4>
    8760:	92000044 	addi	r8,r18,1
    8764:	003f2306 	br	83f4 <__alt_mem_Flash_flash_data+0xf40083f4>
    8768:	9011883a 	mov	r8,r18
    876c:	8825883a 	mov	r18,r17
    8770:	a023883a 	mov	r17,r20
    8774:	003e3706 	br	8054 <__alt_mem_Flash_flash_data+0xf4008054>
    8778:	002b883a 	mov	r21,zero
    877c:	0023883a 	mov	r17,zero
    8780:	003f5606 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    8784:	51bfffc4 	addi	r6,r10,-1
    8788:	300490fa 	slli	r2,r6,3
    878c:	00c000b4 	movhi	r3,2
    8790:	18fef304 	addi	r3,r3,-1076
    8794:	1885883a 	add	r2,r3,r2
    8798:	d9c00e17 	ldw	r7,56(sp)
    879c:	11000017 	ldw	r4,0(r2)
    87a0:	11400117 	ldw	r5,4(r2)
    87a4:	d8800717 	ldw	r2,28(sp)
    87a8:	d9801015 	stw	r6,64(sp)
    87ac:	880d883a 	mov	r6,r17
    87b0:	da801615 	stw	r10,88(sp)
    87b4:	15c00044 	addi	r23,r2,1
    87b8:	00112200 	call	11220 <__muldf3>
    87bc:	a80b883a 	mov	r5,r21
    87c0:	a009883a 	mov	r4,r20
    87c4:	d8c01115 	stw	r3,68(sp)
    87c8:	d8800e15 	stw	r2,56(sp)
    87cc:	00122140 	call	12214 <__fixdfsi>
    87d0:	1009883a 	mov	r4,r2
    87d4:	1023883a 	mov	r17,r2
    87d8:	001229c0 	call	1229c <__floatsidf>
    87dc:	a009883a 	mov	r4,r20
    87e0:	a80b883a 	mov	r5,r21
    87e4:	100d883a 	mov	r6,r2
    87e8:	180f883a 	mov	r7,r3
    87ec:	00119440 	call	11944 <__subdf3>
    87f0:	1813883a 	mov	r9,r3
    87f4:	d8c00717 	ldw	r3,28(sp)
    87f8:	8c400c04 	addi	r17,r17,48
    87fc:	1011883a 	mov	r8,r2
    8800:	1c400005 	stb	r17,0(r3)
    8804:	da801617 	ldw	r10,88(sp)
    8808:	00800044 	movi	r2,1
    880c:	50802326 	beq	r10,r2,889c <_dtoa_r+0x14ac>
    8810:	d8800717 	ldw	r2,28(sp)
    8814:	b82b883a 	mov	r21,r23
    8818:	dc001315 	stw	r16,76(sp)
    881c:	12a9883a 	add	r20,r2,r10
    8820:	4807883a 	mov	r3,r9
    8824:	4005883a 	mov	r2,r8
    8828:	dc801415 	stw	r18,80(sp)
    882c:	000d883a 	mov	r6,zero
    8830:	01d00934 	movhi	r7,16420
    8834:	1009883a 	mov	r4,r2
    8838:	180b883a 	mov	r5,r3
    883c:	00112200 	call	11220 <__muldf3>
    8840:	180b883a 	mov	r5,r3
    8844:	1009883a 	mov	r4,r2
    8848:	1821883a 	mov	r16,r3
    884c:	1025883a 	mov	r18,r2
    8850:	00122140 	call	12214 <__fixdfsi>
    8854:	1009883a 	mov	r4,r2
    8858:	1023883a 	mov	r17,r2
    885c:	001229c0 	call	1229c <__floatsidf>
    8860:	9009883a 	mov	r4,r18
    8864:	800b883a 	mov	r5,r16
    8868:	100d883a 	mov	r6,r2
    886c:	180f883a 	mov	r7,r3
    8870:	8c400c04 	addi	r17,r17,48
    8874:	00119440 	call	11944 <__subdf3>
    8878:	ad400044 	addi	r21,r21,1
    887c:	ac7fffc5 	stb	r17,-1(r21)
    8880:	ad3fea1e 	bne	r21,r20,882c <__alt_mem_Flash_flash_data+0xf400882c>
    8884:	1813883a 	mov	r9,r3
    8888:	d8c01017 	ldw	r3,64(sp)
    888c:	dc001317 	ldw	r16,76(sp)
    8890:	dc801417 	ldw	r18,80(sp)
    8894:	1011883a 	mov	r8,r2
    8898:	b8ef883a 	add	r23,r23,r3
    889c:	d9000e17 	ldw	r4,56(sp)
    88a0:	d9401117 	ldw	r5,68(sp)
    88a4:	000d883a 	mov	r6,zero
    88a8:	01cff834 	movhi	r7,16352
    88ac:	da001715 	stw	r8,92(sp)
    88b0:	da401515 	stw	r9,84(sp)
    88b4:	000fe740 	call	fe74 <__adddf3>
    88b8:	da001717 	ldw	r8,92(sp)
    88bc:	da401517 	ldw	r9,84(sp)
    88c0:	1009883a 	mov	r4,r2
    88c4:	400d883a 	mov	r6,r8
    88c8:	480f883a 	mov	r7,r9
    88cc:	180b883a 	mov	r5,r3
    88d0:	00111400 	call	11140 <__ledf2>
    88d4:	da001717 	ldw	r8,92(sp)
    88d8:	da401517 	ldw	r9,84(sp)
    88dc:	10003b0e 	bge	r2,zero,89cc <_dtoa_r+0x15dc>
    88e0:	d9001217 	ldw	r4,72(sp)
    88e4:	bd7fffc3 	ldbu	r21,-1(r23)
    88e8:	d9000515 	stw	r4,20(sp)
    88ec:	003d1c06 	br	7d60 <__alt_mem_Flash_flash_data+0xf4007d60>
    88f0:	d8c00817 	ldw	r3,32(sp)
    88f4:	18a9c83a 	sub	r20,r3,r2
    88f8:	0005883a 	mov	r2,zero
    88fc:	003d3706 	br	7ddc <__alt_mem_Flash_flash_data+0xf4007ddc>
    8900:	00800044 	movi	r2,1
    8904:	003dd006 	br	8048 <__alt_mem_Flash_flash_data+0xf4008048>
    8908:	d8c00217 	ldw	r3,8(sp)
    890c:	00800d84 	movi	r2,54
    8910:	dd400917 	ldw	r21,36(sp)
    8914:	10c5c83a 	sub	r2,r2,r3
    8918:	dd000817 	ldw	r20,32(sp)
    891c:	003d2f06 	br	7ddc <__alt_mem_Flash_flash_data+0xf4007ddc>
    8920:	9029883a 	mov	r20,r18
    8924:	982b883a 	mov	r21,r19
    8928:	04400084 	movi	r17,2
    892c:	003bc606 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    8930:	d8800617 	ldw	r2,24(sp)
    8934:	103efc26 	beq	r2,zero,8528 <__alt_mem_Flash_flash_data+0xf4008528>
    8938:	d8c00c17 	ldw	r3,48(sp)
    893c:	00fc890e 	bge	zero,r3,7b64 <__alt_mem_Flash_flash_data+0xf4007b64>
    8940:	a80b883a 	mov	r5,r21
    8944:	a009883a 	mov	r4,r20
    8948:	000d883a 	mov	r6,zero
    894c:	01d00934 	movhi	r7,16420
    8950:	00112200 	call	11220 <__muldf3>
    8954:	89000044 	addi	r4,r17,1
    8958:	1029883a 	mov	r20,r2
    895c:	182b883a 	mov	r21,r3
    8960:	001229c0 	call	1229c <__floatsidf>
    8964:	a009883a 	mov	r4,r20
    8968:	a80b883a 	mov	r5,r21
    896c:	100d883a 	mov	r6,r2
    8970:	180f883a 	mov	r7,r3
    8974:	00112200 	call	11220 <__muldf3>
    8978:	1009883a 	mov	r4,r2
    897c:	180b883a 	mov	r5,r3
    8980:	000d883a 	mov	r6,zero
    8984:	01d00734 	movhi	r7,16412
    8988:	000fe740 	call	fe74 <__adddf3>
    898c:	d9000517 	ldw	r4,20(sp)
    8990:	1023883a 	mov	r17,r2
    8994:	00bf3034 	movhi	r2,64704
    8998:	213fffc4 	addi	r4,r4,-1
    899c:	1885883a 	add	r2,r3,r2
    89a0:	d9001215 	stw	r4,72(sp)
    89a4:	d8800e15 	stw	r2,56(sp)
    89a8:	da800c17 	ldw	r10,48(sp)
    89ac:	003bc306 	br	78bc <__alt_mem_Flash_flash_data+0xf40078bc>
    89b0:	b039883a 	mov	fp,r22
    89b4:	01000e44 	movi	r4,57
    89b8:	8825883a 	mov	r18,r17
    89bc:	9dc00044 	addi	r23,r19,1
    89c0:	99000005 	stb	r4,0(r19)
    89c4:	a023883a 	mov	r17,r20
    89c8:	003dae06 	br	8084 <__alt_mem_Flash_flash_data+0xf4008084>
    89cc:	d9800e17 	ldw	r6,56(sp)
    89d0:	d9c01117 	ldw	r7,68(sp)
    89d4:	0009883a 	mov	r4,zero
    89d8:	014ff834 	movhi	r5,16352
    89dc:	da001715 	stw	r8,92(sp)
    89e0:	da401515 	stw	r9,84(sp)
    89e4:	00119440 	call	11944 <__subdf3>
    89e8:	da001717 	ldw	r8,92(sp)
    89ec:	da401517 	ldw	r9,84(sp)
    89f0:	1009883a 	mov	r4,r2
    89f4:	180b883a 	mov	r5,r3
    89f8:	400d883a 	mov	r6,r8
    89fc:	480f883a 	mov	r7,r9
    8a00:	00110600 	call	11060 <__gedf2>
    8a04:	00bc570e 	bge	zero,r2,7b64 <__alt_mem_Flash_flash_data+0xf4007b64>
    8a08:	01000c04 	movi	r4,48
    8a0c:	00000106 	br	8a14 <_dtoa_r+0x1624>
    8a10:	102f883a 	mov	r23,r2
    8a14:	b8bfffc4 	addi	r2,r23,-1
    8a18:	10c00007 	ldb	r3,0(r2)
    8a1c:	193ffc26 	beq	r3,r4,8a10 <__alt_mem_Flash_flash_data+0xf4008a10>
    8a20:	d9801217 	ldw	r6,72(sp)
    8a24:	d9800515 	stw	r6,20(sp)
    8a28:	003c1f06 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    8a2c:	d8801217 	ldw	r2,72(sp)
    8a30:	dc001117 	ldw	r16,68(sp)
    8a34:	d8800515 	stw	r2,20(sp)
    8a38:	003cc906 	br	7d60 <__alt_mem_Flash_flash_data+0xf4007d60>
    8a3c:	dd801317 	ldw	r22,76(sp)
    8a40:	dc001117 	ldw	r16,68(sp)
    8a44:	dcc01417 	ldw	r19,80(sp)
    8a48:	dc801017 	ldw	r18,64(sp)
    8a4c:	003c4506 	br	7b64 <__alt_mem_Flash_flash_data+0xf4007b64>
    8a50:	103e5d1e 	bne	r2,zero,83c8 <__alt_mem_Flash_flash_data+0xf40083c8>
    8a54:	4080004c 	andi	r2,r8,1
    8a58:	103e5b26 	beq	r2,zero,83c8 <__alt_mem_Flash_flash_data+0xf40083c8>
    8a5c:	003e5706 	br	83bc <__alt_mem_Flash_flash_data+0xf40083bc>
    8a60:	d8c00317 	ldw	r3,12(sp)
    8a64:	00800084 	movi	r2,2
    8a68:	10c00a16 	blt	r2,r3,8a94 <_dtoa_r+0x16a4>
    8a6c:	d9000c17 	ldw	r4,48(sp)
    8a70:	003e8306 	br	8480 <__alt_mem_Flash_flash_data+0xf4008480>
    8a74:	04400084 	movi	r17,2
    8a78:	003b7306 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    8a7c:	d9801217 	ldw	r6,72(sp)
    8a80:	d9800515 	stw	r6,20(sp)
    8a84:	003cb606 	br	7d60 <__alt_mem_Flash_flash_data+0xf4007d60>
    8a88:	d9001217 	ldw	r4,72(sp)
    8a8c:	d9000515 	stw	r4,20(sp)
    8a90:	003c0506 	br	7aa8 <__alt_mem_Flash_flash_data+0xf4007aa8>
    8a94:	d9800c17 	ldw	r6,48(sp)
    8a98:	d9800615 	stw	r6,24(sp)
    8a9c:	003e8306 	br	84ac <__alt_mem_Flash_flash_data+0xf40084ac>
    8aa0:	d9800317 	ldw	r6,12(sp)
    8aa4:	00800084 	movi	r2,2
    8aa8:	11800216 	blt	r2,r6,8ab4 <_dtoa_r+0x16c4>
    8aac:	d8800c17 	ldw	r2,48(sp)
    8ab0:	003da606 	br	814c <__alt_mem_Flash_flash_data+0xf400814c>
    8ab4:	d8800c17 	ldw	r2,48(sp)
    8ab8:	d8800615 	stw	r2,24(sp)
    8abc:	003e7b06 	br	84ac <__alt_mem_Flash_flash_data+0xf40084ac>
    8ac0:	05000044 	movi	r20,1
    8ac4:	003b0506 	br	76dc <__alt_mem_Flash_flash_data+0xf40076dc>
    8ac8:	8009883a 	mov	r4,r16
    8acc:	80001115 	stw	zero,68(r16)
    8ad0:	000b883a 	mov	r5,zero
    8ad4:	000aa880 	call	aa88 <_Balloc>
    8ad8:	d8800715 	stw	r2,28(sp)
    8adc:	d8c00717 	ldw	r3,28(sp)
    8ae0:	00bfffc4 	movi	r2,-1
    8ae4:	01000044 	movi	r4,1
    8ae8:	d8800c15 	stw	r2,48(sp)
    8aec:	80c01015 	stw	r3,64(r16)
    8af0:	d9000b15 	stw	r4,44(sp)
    8af4:	d8800615 	stw	r2,24(sp)
    8af8:	d8002215 	stw	zero,136(sp)
    8afc:	003c1906 	br	7b64 <__alt_mem_Flash_flash_data+0xf4007b64>
    8b00:	193d2926 	beq	r3,r4,7fa8 <__alt_mem_Flash_flash_data+0xf4007fa8>
    8b04:	00c00f04 	movi	r3,60
    8b08:	1885c83a 	sub	r2,r3,r2
    8b0c:	003d7b06 	br	80fc <__alt_mem_Flash_flash_data+0xf40080fc>
    8b10:	000b883a 	mov	r5,zero
    8b14:	003b1006 	br	7758 <__alt_mem_Flash_flash_data+0xf4007758>

00008b18 <__sflush_r>:
    8b18:	2880030b 	ldhu	r2,12(r5)
    8b1c:	defffb04 	addi	sp,sp,-20
    8b20:	dcc00315 	stw	r19,12(sp)
    8b24:	dc400115 	stw	r17,4(sp)
    8b28:	dfc00415 	stw	ra,16(sp)
    8b2c:	dc800215 	stw	r18,8(sp)
    8b30:	dc000015 	stw	r16,0(sp)
    8b34:	10c0020c 	andi	r3,r2,8
    8b38:	2823883a 	mov	r17,r5
    8b3c:	2027883a 	mov	r19,r4
    8b40:	1800311e 	bne	r3,zero,8c08 <__sflush_r+0xf0>
    8b44:	28c00117 	ldw	r3,4(r5)
    8b48:	10820014 	ori	r2,r2,2048
    8b4c:	2880030d 	sth	r2,12(r5)
    8b50:	00c04b0e 	bge	zero,r3,8c80 <__sflush_r+0x168>
    8b54:	8a000a17 	ldw	r8,40(r17)
    8b58:	40002326 	beq	r8,zero,8be8 <__sflush_r+0xd0>
    8b5c:	9c000017 	ldw	r16,0(r19)
    8b60:	10c4000c 	andi	r3,r2,4096
    8b64:	98000015 	stw	zero,0(r19)
    8b68:	18004826 	beq	r3,zero,8c8c <__sflush_r+0x174>
    8b6c:	89801417 	ldw	r6,80(r17)
    8b70:	10c0010c 	andi	r3,r2,4
    8b74:	18000626 	beq	r3,zero,8b90 <__sflush_r+0x78>
    8b78:	88c00117 	ldw	r3,4(r17)
    8b7c:	88800c17 	ldw	r2,48(r17)
    8b80:	30cdc83a 	sub	r6,r6,r3
    8b84:	10000226 	beq	r2,zero,8b90 <__sflush_r+0x78>
    8b88:	88800f17 	ldw	r2,60(r17)
    8b8c:	308dc83a 	sub	r6,r6,r2
    8b90:	89400717 	ldw	r5,28(r17)
    8b94:	9809883a 	mov	r4,r19
    8b98:	000f883a 	mov	r7,zero
    8b9c:	403ee83a 	callr	r8
    8ba0:	00ffffc4 	movi	r3,-1
    8ba4:	10c04426 	beq	r2,r3,8cb8 <__sflush_r+0x1a0>
    8ba8:	88c0030b 	ldhu	r3,12(r17)
    8bac:	89000417 	ldw	r4,16(r17)
    8bb0:	88000115 	stw	zero,4(r17)
    8bb4:	197dffcc 	andi	r5,r3,63487
    8bb8:	8940030d 	sth	r5,12(r17)
    8bbc:	89000015 	stw	r4,0(r17)
    8bc0:	18c4000c 	andi	r3,r3,4096
    8bc4:	18002c1e 	bne	r3,zero,8c78 <__sflush_r+0x160>
    8bc8:	89400c17 	ldw	r5,48(r17)
    8bcc:	9c000015 	stw	r16,0(r19)
    8bd0:	28000526 	beq	r5,zero,8be8 <__sflush_r+0xd0>
    8bd4:	88801004 	addi	r2,r17,64
    8bd8:	28800226 	beq	r5,r2,8be4 <__sflush_r+0xcc>
    8bdc:	9809883a 	mov	r4,r19
    8be0:	00092700 	call	9270 <_free_r>
    8be4:	88000c15 	stw	zero,48(r17)
    8be8:	0005883a 	mov	r2,zero
    8bec:	dfc00417 	ldw	ra,16(sp)
    8bf0:	dcc00317 	ldw	r19,12(sp)
    8bf4:	dc800217 	ldw	r18,8(sp)
    8bf8:	dc400117 	ldw	r17,4(sp)
    8bfc:	dc000017 	ldw	r16,0(sp)
    8c00:	dec00504 	addi	sp,sp,20
    8c04:	f800283a 	ret
    8c08:	2c800417 	ldw	r18,16(r5)
    8c0c:	903ff626 	beq	r18,zero,8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c10:	2c000017 	ldw	r16,0(r5)
    8c14:	108000cc 	andi	r2,r2,3
    8c18:	2c800015 	stw	r18,0(r5)
    8c1c:	84a1c83a 	sub	r16,r16,r18
    8c20:	1000131e 	bne	r2,zero,8c70 <__sflush_r+0x158>
    8c24:	28800517 	ldw	r2,20(r5)
    8c28:	88800215 	stw	r2,8(r17)
    8c2c:	04000316 	blt	zero,r16,8c3c <__sflush_r+0x124>
    8c30:	003fed06 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c34:	90a5883a 	add	r18,r18,r2
    8c38:	043feb0e 	bge	zero,r16,8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c3c:	88800917 	ldw	r2,36(r17)
    8c40:	89400717 	ldw	r5,28(r17)
    8c44:	800f883a 	mov	r7,r16
    8c48:	900d883a 	mov	r6,r18
    8c4c:	9809883a 	mov	r4,r19
    8c50:	103ee83a 	callr	r2
    8c54:	80a1c83a 	sub	r16,r16,r2
    8c58:	00bff616 	blt	zero,r2,8c34 <__alt_mem_Flash_flash_data+0xf4008c34>
    8c5c:	88c0030b 	ldhu	r3,12(r17)
    8c60:	00bfffc4 	movi	r2,-1
    8c64:	18c01014 	ori	r3,r3,64
    8c68:	88c0030d 	sth	r3,12(r17)
    8c6c:	003fdf06 	br	8bec <__alt_mem_Flash_flash_data+0xf4008bec>
    8c70:	0005883a 	mov	r2,zero
    8c74:	003fec06 	br	8c28 <__alt_mem_Flash_flash_data+0xf4008c28>
    8c78:	88801415 	stw	r2,80(r17)
    8c7c:	003fd206 	br	8bc8 <__alt_mem_Flash_flash_data+0xf4008bc8>
    8c80:	28c00f17 	ldw	r3,60(r5)
    8c84:	00ffb316 	blt	zero,r3,8b54 <__alt_mem_Flash_flash_data+0xf4008b54>
    8c88:	003fd706 	br	8be8 <__alt_mem_Flash_flash_data+0xf4008be8>
    8c8c:	89400717 	ldw	r5,28(r17)
    8c90:	000d883a 	mov	r6,zero
    8c94:	9809883a 	mov	r4,r19
    8c98:	01c00044 	movi	r7,1
    8c9c:	403ee83a 	callr	r8
    8ca0:	100d883a 	mov	r6,r2
    8ca4:	00bfffc4 	movi	r2,-1
    8ca8:	30801426 	beq	r6,r2,8cfc <__sflush_r+0x1e4>
    8cac:	8880030b 	ldhu	r2,12(r17)
    8cb0:	8a000a17 	ldw	r8,40(r17)
    8cb4:	003fae06 	br	8b70 <__alt_mem_Flash_flash_data+0xf4008b70>
    8cb8:	98c00017 	ldw	r3,0(r19)
    8cbc:	183fba26 	beq	r3,zero,8ba8 <__alt_mem_Flash_flash_data+0xf4008ba8>
    8cc0:	01000744 	movi	r4,29
    8cc4:	19000626 	beq	r3,r4,8ce0 <__sflush_r+0x1c8>
    8cc8:	01000584 	movi	r4,22
    8ccc:	19000426 	beq	r3,r4,8ce0 <__sflush_r+0x1c8>
    8cd0:	88c0030b 	ldhu	r3,12(r17)
    8cd4:	18c01014 	ori	r3,r3,64
    8cd8:	88c0030d 	sth	r3,12(r17)
    8cdc:	003fc306 	br	8bec <__alt_mem_Flash_flash_data+0xf4008bec>
    8ce0:	8880030b 	ldhu	r2,12(r17)
    8ce4:	88c00417 	ldw	r3,16(r17)
    8ce8:	88000115 	stw	zero,4(r17)
    8cec:	10bdffcc 	andi	r2,r2,63487
    8cf0:	8880030d 	sth	r2,12(r17)
    8cf4:	88c00015 	stw	r3,0(r17)
    8cf8:	003fb306 	br	8bc8 <__alt_mem_Flash_flash_data+0xf4008bc8>
    8cfc:	98800017 	ldw	r2,0(r19)
    8d00:	103fea26 	beq	r2,zero,8cac <__alt_mem_Flash_flash_data+0xf4008cac>
    8d04:	00c00744 	movi	r3,29
    8d08:	10c00226 	beq	r2,r3,8d14 <__sflush_r+0x1fc>
    8d0c:	00c00584 	movi	r3,22
    8d10:	10ffd21e 	bne	r2,r3,8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    8d14:	9c000015 	stw	r16,0(r19)
    8d18:	0005883a 	mov	r2,zero
    8d1c:	003fb306 	br	8bec <__alt_mem_Flash_flash_data+0xf4008bec>

00008d20 <_fflush_r>:
    8d20:	defffd04 	addi	sp,sp,-12
    8d24:	dc000115 	stw	r16,4(sp)
    8d28:	dfc00215 	stw	ra,8(sp)
    8d2c:	2021883a 	mov	r16,r4
    8d30:	20000226 	beq	r4,zero,8d3c <_fflush_r+0x1c>
    8d34:	20800e17 	ldw	r2,56(r4)
    8d38:	10000c26 	beq	r2,zero,8d6c <_fflush_r+0x4c>
    8d3c:	2880030f 	ldh	r2,12(r5)
    8d40:	1000051e 	bne	r2,zero,8d58 <_fflush_r+0x38>
    8d44:	0005883a 	mov	r2,zero
    8d48:	dfc00217 	ldw	ra,8(sp)
    8d4c:	dc000117 	ldw	r16,4(sp)
    8d50:	dec00304 	addi	sp,sp,12
    8d54:	f800283a 	ret
    8d58:	8009883a 	mov	r4,r16
    8d5c:	dfc00217 	ldw	ra,8(sp)
    8d60:	dc000117 	ldw	r16,4(sp)
    8d64:	dec00304 	addi	sp,sp,12
    8d68:	0008b181 	jmpi	8b18 <__sflush_r>
    8d6c:	d9400015 	stw	r5,0(sp)
    8d70:	00090fc0 	call	90fc <__sinit>
    8d74:	d9400017 	ldw	r5,0(sp)
    8d78:	003ff006 	br	8d3c <__alt_mem_Flash_flash_data+0xf4008d3c>

00008d7c <fflush>:
    8d7c:	20000526 	beq	r4,zero,8d94 <fflush+0x18>
    8d80:	008000b4 	movhi	r2,2
    8d84:	1087cd04 	addi	r2,r2,7988
    8d88:	200b883a 	mov	r5,r4
    8d8c:	11000017 	ldw	r4,0(r2)
    8d90:	0008d201 	jmpi	8d20 <_fflush_r>
    8d94:	008000b4 	movhi	r2,2
    8d98:	1087cc04 	addi	r2,r2,7984
    8d9c:	11000017 	ldw	r4,0(r2)
    8da0:	01400074 	movhi	r5,1
    8da4:	29634804 	addi	r5,r5,-29408
    8da8:	0009ae41 	jmpi	9ae4 <_fwalk_reent>

00008dac <__fp_lock>:
    8dac:	0005883a 	mov	r2,zero
    8db0:	f800283a 	ret

00008db4 <__fp_unlock>:
    8db4:	0005883a 	mov	r2,zero
    8db8:	f800283a 	ret

00008dbc <_cleanup_r>:
    8dbc:	01400074 	movhi	r5,1
    8dc0:	297a9d04 	addi	r5,r5,-5516
    8dc4:	0009ae41 	jmpi	9ae4 <_fwalk_reent>

00008dc8 <__sinit.part.1>:
    8dc8:	defff704 	addi	sp,sp,-36
    8dcc:	00c00074 	movhi	r3,1
    8dd0:	dfc00815 	stw	ra,32(sp)
    8dd4:	ddc00715 	stw	r23,28(sp)
    8dd8:	dd800615 	stw	r22,24(sp)
    8ddc:	dd400515 	stw	r21,20(sp)
    8de0:	dd000415 	stw	r20,16(sp)
    8de4:	dcc00315 	stw	r19,12(sp)
    8de8:	dc800215 	stw	r18,8(sp)
    8dec:	dc400115 	stw	r17,4(sp)
    8df0:	dc000015 	stw	r16,0(sp)
    8df4:	18e36f04 	addi	r3,r3,-29252
    8df8:	24000117 	ldw	r16,4(r4)
    8dfc:	20c00f15 	stw	r3,60(r4)
    8e00:	2080bb04 	addi	r2,r4,748
    8e04:	00c000c4 	movi	r3,3
    8e08:	20c0b915 	stw	r3,740(r4)
    8e0c:	2080ba15 	stw	r2,744(r4)
    8e10:	2000b815 	stw	zero,736(r4)
    8e14:	05c00204 	movi	r23,8
    8e18:	00800104 	movi	r2,4
    8e1c:	2025883a 	mov	r18,r4
    8e20:	b80d883a 	mov	r6,r23
    8e24:	81001704 	addi	r4,r16,92
    8e28:	000b883a 	mov	r5,zero
    8e2c:	80000015 	stw	zero,0(r16)
    8e30:	80000115 	stw	zero,4(r16)
    8e34:	80000215 	stw	zero,8(r16)
    8e38:	8080030d 	sth	r2,12(r16)
    8e3c:	80001915 	stw	zero,100(r16)
    8e40:	8000038d 	sth	zero,14(r16)
    8e44:	80000415 	stw	zero,16(r16)
    8e48:	80000515 	stw	zero,20(r16)
    8e4c:	80000615 	stw	zero,24(r16)
    8e50:	000a9640 	call	a964 <memset>
    8e54:	05800074 	movhi	r22,1
    8e58:	94400217 	ldw	r17,8(r18)
    8e5c:	05400074 	movhi	r21,1
    8e60:	05000074 	movhi	r20,1
    8e64:	04c00074 	movhi	r19,1
    8e68:	b5b01604 	addi	r22,r22,-16296
    8e6c:	ad702d04 	addi	r21,r21,-16204
    8e70:	a5304c04 	addi	r20,r20,-16080
    8e74:	9cf06304 	addi	r19,r19,-15988
    8e78:	85800815 	stw	r22,32(r16)
    8e7c:	85400915 	stw	r21,36(r16)
    8e80:	85000a15 	stw	r20,40(r16)
    8e84:	84c00b15 	stw	r19,44(r16)
    8e88:	84000715 	stw	r16,28(r16)
    8e8c:	00800284 	movi	r2,10
    8e90:	8880030d 	sth	r2,12(r17)
    8e94:	00800044 	movi	r2,1
    8e98:	89001704 	addi	r4,r17,92
    8e9c:	b80d883a 	mov	r6,r23
    8ea0:	000b883a 	mov	r5,zero
    8ea4:	88000015 	stw	zero,0(r17)
    8ea8:	88000115 	stw	zero,4(r17)
    8eac:	88000215 	stw	zero,8(r17)
    8eb0:	88001915 	stw	zero,100(r17)
    8eb4:	8880038d 	sth	r2,14(r17)
    8eb8:	88000415 	stw	zero,16(r17)
    8ebc:	88000515 	stw	zero,20(r17)
    8ec0:	88000615 	stw	zero,24(r17)
    8ec4:	000a9640 	call	a964 <memset>
    8ec8:	94000317 	ldw	r16,12(r18)
    8ecc:	00800484 	movi	r2,18
    8ed0:	8c400715 	stw	r17,28(r17)
    8ed4:	8d800815 	stw	r22,32(r17)
    8ed8:	8d400915 	stw	r21,36(r17)
    8edc:	8d000a15 	stw	r20,40(r17)
    8ee0:	8cc00b15 	stw	r19,44(r17)
    8ee4:	8080030d 	sth	r2,12(r16)
    8ee8:	00800084 	movi	r2,2
    8eec:	80000015 	stw	zero,0(r16)
    8ef0:	80000115 	stw	zero,4(r16)
    8ef4:	80000215 	stw	zero,8(r16)
    8ef8:	80001915 	stw	zero,100(r16)
    8efc:	8080038d 	sth	r2,14(r16)
    8f00:	80000415 	stw	zero,16(r16)
    8f04:	80000515 	stw	zero,20(r16)
    8f08:	80000615 	stw	zero,24(r16)
    8f0c:	81001704 	addi	r4,r16,92
    8f10:	000b883a 	mov	r5,zero
    8f14:	b80d883a 	mov	r6,r23
    8f18:	000a9640 	call	a964 <memset>
    8f1c:	00800044 	movi	r2,1
    8f20:	84000715 	stw	r16,28(r16)
    8f24:	85800815 	stw	r22,32(r16)
    8f28:	85400915 	stw	r21,36(r16)
    8f2c:	85000a15 	stw	r20,40(r16)
    8f30:	84c00b15 	stw	r19,44(r16)
    8f34:	90800e15 	stw	r2,56(r18)
    8f38:	dfc00817 	ldw	ra,32(sp)
    8f3c:	ddc00717 	ldw	r23,28(sp)
    8f40:	dd800617 	ldw	r22,24(sp)
    8f44:	dd400517 	ldw	r21,20(sp)
    8f48:	dd000417 	ldw	r20,16(sp)
    8f4c:	dcc00317 	ldw	r19,12(sp)
    8f50:	dc800217 	ldw	r18,8(sp)
    8f54:	dc400117 	ldw	r17,4(sp)
    8f58:	dc000017 	ldw	r16,0(sp)
    8f5c:	dec00904 	addi	sp,sp,36
    8f60:	f800283a 	ret

00008f64 <__sfmoreglue>:
    8f64:	defffc04 	addi	sp,sp,-16
    8f68:	dc400115 	stw	r17,4(sp)
    8f6c:	2c7fffc4 	addi	r17,r5,-1
    8f70:	8c401a24 	muli	r17,r17,104
    8f74:	dc800215 	stw	r18,8(sp)
    8f78:	2825883a 	mov	r18,r5
    8f7c:	89401d04 	addi	r5,r17,116
    8f80:	dc000015 	stw	r16,0(sp)
    8f84:	dfc00315 	stw	ra,12(sp)
    8f88:	0009e400 	call	9e40 <_malloc_r>
    8f8c:	1021883a 	mov	r16,r2
    8f90:	10000726 	beq	r2,zero,8fb0 <__sfmoreglue+0x4c>
    8f94:	11000304 	addi	r4,r2,12
    8f98:	10000015 	stw	zero,0(r2)
    8f9c:	14800115 	stw	r18,4(r2)
    8fa0:	11000215 	stw	r4,8(r2)
    8fa4:	000b883a 	mov	r5,zero
    8fa8:	89801a04 	addi	r6,r17,104
    8fac:	000a9640 	call	a964 <memset>
    8fb0:	8005883a 	mov	r2,r16
    8fb4:	dfc00317 	ldw	ra,12(sp)
    8fb8:	dc800217 	ldw	r18,8(sp)
    8fbc:	dc400117 	ldw	r17,4(sp)
    8fc0:	dc000017 	ldw	r16,0(sp)
    8fc4:	dec00404 	addi	sp,sp,16
    8fc8:	f800283a 	ret

00008fcc <__sfp>:
    8fcc:	008000b4 	movhi	r2,2
    8fd0:	defffb04 	addi	sp,sp,-20
    8fd4:	1087cc04 	addi	r2,r2,7984
    8fd8:	dc800215 	stw	r18,8(sp)
    8fdc:	14800017 	ldw	r18,0(r2)
    8fe0:	dcc00315 	stw	r19,12(sp)
    8fe4:	dfc00415 	stw	ra,16(sp)
    8fe8:	90800e17 	ldw	r2,56(r18)
    8fec:	dc400115 	stw	r17,4(sp)
    8ff0:	dc000015 	stw	r16,0(sp)
    8ff4:	2027883a 	mov	r19,r4
    8ff8:	1000021e 	bne	r2,zero,9004 <__sfp+0x38>
    8ffc:	9009883a 	mov	r4,r18
    9000:	0008dc80 	call	8dc8 <__sinit.part.1>
    9004:	9480b804 	addi	r18,r18,736
    9008:	047fffc4 	movi	r17,-1
    900c:	91400117 	ldw	r5,4(r18)
    9010:	94000217 	ldw	r16,8(r18)
    9014:	297fffc4 	addi	r5,r5,-1
    9018:	28000a16 	blt	r5,zero,9044 <__sfp+0x78>
    901c:	8080030f 	ldh	r2,12(r16)
    9020:	10000c26 	beq	r2,zero,9054 <__sfp+0x88>
    9024:	80c01d04 	addi	r3,r16,116
    9028:	00000206 	br	9034 <__sfp+0x68>
    902c:	18bfe60f 	ldh	r2,-104(r3)
    9030:	10000826 	beq	r2,zero,9054 <__sfp+0x88>
    9034:	297fffc4 	addi	r5,r5,-1
    9038:	1c3ffd04 	addi	r16,r3,-12
    903c:	18c01a04 	addi	r3,r3,104
    9040:	2c7ffa1e 	bne	r5,r17,902c <__alt_mem_Flash_flash_data+0xf400902c>
    9044:	90800017 	ldw	r2,0(r18)
    9048:	10001d26 	beq	r2,zero,90c0 <__sfp+0xf4>
    904c:	1025883a 	mov	r18,r2
    9050:	003fee06 	br	900c <__alt_mem_Flash_flash_data+0xf400900c>
    9054:	00bfffc4 	movi	r2,-1
    9058:	8080038d 	sth	r2,14(r16)
    905c:	00800044 	movi	r2,1
    9060:	8080030d 	sth	r2,12(r16)
    9064:	80001915 	stw	zero,100(r16)
    9068:	80000015 	stw	zero,0(r16)
    906c:	80000215 	stw	zero,8(r16)
    9070:	80000115 	stw	zero,4(r16)
    9074:	80000415 	stw	zero,16(r16)
    9078:	80000515 	stw	zero,20(r16)
    907c:	80000615 	stw	zero,24(r16)
    9080:	81001704 	addi	r4,r16,92
    9084:	000b883a 	mov	r5,zero
    9088:	01800204 	movi	r6,8
    908c:	000a9640 	call	a964 <memset>
    9090:	8005883a 	mov	r2,r16
    9094:	80000c15 	stw	zero,48(r16)
    9098:	80000d15 	stw	zero,52(r16)
    909c:	80001115 	stw	zero,68(r16)
    90a0:	80001215 	stw	zero,72(r16)
    90a4:	dfc00417 	ldw	ra,16(sp)
    90a8:	dcc00317 	ldw	r19,12(sp)
    90ac:	dc800217 	ldw	r18,8(sp)
    90b0:	dc400117 	ldw	r17,4(sp)
    90b4:	dc000017 	ldw	r16,0(sp)
    90b8:	dec00504 	addi	sp,sp,20
    90bc:	f800283a 	ret
    90c0:	9809883a 	mov	r4,r19
    90c4:	01400104 	movi	r5,4
    90c8:	0008f640 	call	8f64 <__sfmoreglue>
    90cc:	90800015 	stw	r2,0(r18)
    90d0:	103fde1e 	bne	r2,zero,904c <__alt_mem_Flash_flash_data+0xf400904c>
    90d4:	00800304 	movi	r2,12
    90d8:	98800015 	stw	r2,0(r19)
    90dc:	0005883a 	mov	r2,zero
    90e0:	003ff006 	br	90a4 <__alt_mem_Flash_flash_data+0xf40090a4>

000090e4 <_cleanup>:
    90e4:	008000b4 	movhi	r2,2
    90e8:	1087cc04 	addi	r2,r2,7984
    90ec:	11000017 	ldw	r4,0(r2)
    90f0:	01400074 	movhi	r5,1
    90f4:	297a9d04 	addi	r5,r5,-5516
    90f8:	0009ae41 	jmpi	9ae4 <_fwalk_reent>

000090fc <__sinit>:
    90fc:	20800e17 	ldw	r2,56(r4)
    9100:	10000126 	beq	r2,zero,9108 <__sinit+0xc>
    9104:	f800283a 	ret
    9108:	0008dc81 	jmpi	8dc8 <__sinit.part.1>

0000910c <__sfp_lock_acquire>:
    910c:	f800283a 	ret

00009110 <__sfp_lock_release>:
    9110:	f800283a 	ret

00009114 <__sinit_lock_acquire>:
    9114:	f800283a 	ret

00009118 <__sinit_lock_release>:
    9118:	f800283a 	ret

0000911c <__fp_lock_all>:
    911c:	008000b4 	movhi	r2,2
    9120:	1087cd04 	addi	r2,r2,7988
    9124:	11000017 	ldw	r4,0(r2)
    9128:	01400074 	movhi	r5,1
    912c:	29636b04 	addi	r5,r5,-29268
    9130:	0009a201 	jmpi	9a20 <_fwalk>

00009134 <__fp_unlock_all>:
    9134:	008000b4 	movhi	r2,2
    9138:	1087cd04 	addi	r2,r2,7988
    913c:	11000017 	ldw	r4,0(r2)
    9140:	01400074 	movhi	r5,1
    9144:	29636d04 	addi	r5,r5,-29260
    9148:	0009a201 	jmpi	9a20 <_fwalk>

0000914c <_malloc_trim_r>:
    914c:	defffb04 	addi	sp,sp,-20
    9150:	dcc00315 	stw	r19,12(sp)
    9154:	04c000b4 	movhi	r19,2
    9158:	dc800215 	stw	r18,8(sp)
    915c:	dc400115 	stw	r17,4(sp)
    9160:	dc000015 	stw	r16,0(sp)
    9164:	dfc00415 	stw	ra,16(sp)
    9168:	2821883a 	mov	r16,r5
    916c:	9cc15704 	addi	r19,r19,1372
    9170:	2025883a 	mov	r18,r4
    9174:	0012f500 	call	12f50 <__malloc_lock>
    9178:	98800217 	ldw	r2,8(r19)
    917c:	14400117 	ldw	r17,4(r2)
    9180:	00bfff04 	movi	r2,-4
    9184:	88a2703a 	and	r17,r17,r2
    9188:	8c21c83a 	sub	r16,r17,r16
    918c:	8403fbc4 	addi	r16,r16,4079
    9190:	8020d33a 	srli	r16,r16,12
    9194:	0083ffc4 	movi	r2,4095
    9198:	843fffc4 	addi	r16,r16,-1
    919c:	8020933a 	slli	r16,r16,12
    91a0:	1400060e 	bge	r2,r16,91bc <_malloc_trim_r+0x70>
    91a4:	9009883a 	mov	r4,r18
    91a8:	000b883a 	mov	r5,zero
    91ac:	000c0040 	call	c004 <_sbrk_r>
    91b0:	98c00217 	ldw	r3,8(r19)
    91b4:	1c47883a 	add	r3,r3,r17
    91b8:	10c00a26 	beq	r2,r3,91e4 <_malloc_trim_r+0x98>
    91bc:	9009883a 	mov	r4,r18
    91c0:	00130700 	call	13070 <__malloc_unlock>
    91c4:	0005883a 	mov	r2,zero
    91c8:	dfc00417 	ldw	ra,16(sp)
    91cc:	dcc00317 	ldw	r19,12(sp)
    91d0:	dc800217 	ldw	r18,8(sp)
    91d4:	dc400117 	ldw	r17,4(sp)
    91d8:	dc000017 	ldw	r16,0(sp)
    91dc:	dec00504 	addi	sp,sp,20
    91e0:	f800283a 	ret
    91e4:	9009883a 	mov	r4,r18
    91e8:	040bc83a 	sub	r5,zero,r16
    91ec:	000c0040 	call	c004 <_sbrk_r>
    91f0:	00ffffc4 	movi	r3,-1
    91f4:	10c00d26 	beq	r2,r3,922c <_malloc_trim_r+0xe0>
    91f8:	00c000b4 	movhi	r3,2
    91fc:	18d00904 	addi	r3,r3,16420
    9200:	18800017 	ldw	r2,0(r3)
    9204:	99000217 	ldw	r4,8(r19)
    9208:	8c23c83a 	sub	r17,r17,r16
    920c:	8c400054 	ori	r17,r17,1
    9210:	1421c83a 	sub	r16,r2,r16
    9214:	24400115 	stw	r17,4(r4)
    9218:	9009883a 	mov	r4,r18
    921c:	1c000015 	stw	r16,0(r3)
    9220:	00130700 	call	13070 <__malloc_unlock>
    9224:	00800044 	movi	r2,1
    9228:	003fe706 	br	91c8 <__alt_mem_Flash_flash_data+0xf40091c8>
    922c:	9009883a 	mov	r4,r18
    9230:	000b883a 	mov	r5,zero
    9234:	000c0040 	call	c004 <_sbrk_r>
    9238:	99000217 	ldw	r4,8(r19)
    923c:	014003c4 	movi	r5,15
    9240:	1107c83a 	sub	r3,r2,r4
    9244:	28ffdd0e 	bge	r5,r3,91bc <__alt_mem_Flash_flash_data+0xf40091bc>
    9248:	014000b4 	movhi	r5,2
    924c:	2947cf04 	addi	r5,r5,7996
    9250:	29400017 	ldw	r5,0(r5)
    9254:	18c00054 	ori	r3,r3,1
    9258:	20c00115 	stw	r3,4(r4)
    925c:	00c000b4 	movhi	r3,2
    9260:	1145c83a 	sub	r2,r2,r5
    9264:	18d00904 	addi	r3,r3,16420
    9268:	18800015 	stw	r2,0(r3)
    926c:	003fd306 	br	91bc <__alt_mem_Flash_flash_data+0xf40091bc>

00009270 <_free_r>:
    9270:	28004c26 	beq	r5,zero,93a4 <_free_r+0x134>
    9274:	defffd04 	addi	sp,sp,-12
    9278:	dc400115 	stw	r17,4(sp)
    927c:	dc000015 	stw	r16,0(sp)
    9280:	2023883a 	mov	r17,r4
    9284:	2821883a 	mov	r16,r5
    9288:	dfc00215 	stw	ra,8(sp)
    928c:	0012f500 	call	12f50 <__malloc_lock>
    9290:	813fff17 	ldw	r4,-4(r16)
    9294:	00bfff84 	movi	r2,-2
    9298:	024000b4 	movhi	r9,2
    929c:	81bffe04 	addi	r6,r16,-8
    92a0:	2084703a 	and	r2,r4,r2
    92a4:	4a415704 	addi	r9,r9,1372
    92a8:	308b883a 	add	r5,r6,r2
    92ac:	2a000117 	ldw	r8,4(r5)
    92b0:	49c00217 	ldw	r7,8(r9)
    92b4:	00ffff04 	movi	r3,-4
    92b8:	40c6703a 	and	r3,r8,r3
    92bc:	39405326 	beq	r7,r5,940c <_free_r+0x19c>
    92c0:	28c00115 	stw	r3,4(r5)
    92c4:	2100004c 	andi	r4,r4,1
    92c8:	2000091e 	bne	r4,zero,92f0 <_free_r+0x80>
    92cc:	81fffe17 	ldw	r7,-8(r16)
    92d0:	4a000204 	addi	r8,r9,8
    92d4:	31cdc83a 	sub	r6,r6,r7
    92d8:	31000217 	ldw	r4,8(r6)
    92dc:	11c5883a 	add	r2,r2,r7
    92e0:	22006126 	beq	r4,r8,9468 <_free_r+0x1f8>
    92e4:	31c00317 	ldw	r7,12(r6)
    92e8:	21c00315 	stw	r7,12(r4)
    92ec:	39000215 	stw	r4,8(r7)
    92f0:	28c9883a 	add	r4,r5,r3
    92f4:	21c00117 	ldw	r7,4(r4)
    92f8:	39c0004c 	andi	r7,r7,1
    92fc:	38000d1e 	bne	r7,zero,9334 <_free_r+0xc4>
    9300:	29000217 	ldw	r4,8(r5)
    9304:	10c5883a 	add	r2,r2,r3
    9308:	00c000b4 	movhi	r3,2
    930c:	18c15904 	addi	r3,r3,1380
    9310:	20c07526 	beq	r4,r3,94e8 <_free_r+0x278>
    9314:	29c00317 	ldw	r7,12(r5)
    9318:	11400054 	ori	r5,r2,1
    931c:	3087883a 	add	r3,r6,r2
    9320:	21c00315 	stw	r7,12(r4)
    9324:	39000215 	stw	r4,8(r7)
    9328:	31400115 	stw	r5,4(r6)
    932c:	18800015 	stw	r2,0(r3)
    9330:	00000406 	br	9344 <_free_r+0xd4>
    9334:	10c00054 	ori	r3,r2,1
    9338:	30c00115 	stw	r3,4(r6)
    933c:	3087883a 	add	r3,r6,r2
    9340:	18800015 	stw	r2,0(r3)
    9344:	00c07fc4 	movi	r3,511
    9348:	18801736 	bltu	r3,r2,93a8 <_free_r+0x138>
    934c:	1004d0fa 	srli	r2,r2,3
    9350:	01400044 	movi	r5,1
    9354:	49000117 	ldw	r4,4(r9)
    9358:	1087883a 	add	r3,r2,r2
    935c:	18c7883a 	add	r3,r3,r3
    9360:	1005d0ba 	srai	r2,r2,2
    9364:	18c7883a 	add	r3,r3,r3
    9368:	1a47883a 	add	r3,r3,r9
    936c:	19c00217 	ldw	r7,8(r3)
    9370:	2884983a 	sll	r2,r5,r2
    9374:	30c00315 	stw	r3,12(r6)
    9378:	31c00215 	stw	r7,8(r6)
    937c:	1104b03a 	or	r2,r2,r4
    9380:	19800215 	stw	r6,8(r3)
    9384:	48800115 	stw	r2,4(r9)
    9388:	39800315 	stw	r6,12(r7)
    938c:	8809883a 	mov	r4,r17
    9390:	dfc00217 	ldw	ra,8(sp)
    9394:	dc400117 	ldw	r17,4(sp)
    9398:	dc000017 	ldw	r16,0(sp)
    939c:	dec00304 	addi	sp,sp,12
    93a0:	00130701 	jmpi	13070 <__malloc_unlock>
    93a4:	f800283a 	ret
    93a8:	1006d27a 	srli	r3,r2,9
    93ac:	01000104 	movi	r4,4
    93b0:	20c04036 	bltu	r4,r3,94b4 <_free_r+0x244>
    93b4:	1006d1ba 	srli	r3,r2,6
    93b8:	19400e04 	addi	r5,r3,56
    93bc:	2947883a 	add	r3,r5,r5
    93c0:	18c7883a 	add	r3,r3,r3
    93c4:	18c7883a 	add	r3,r3,r3
    93c8:	1a49883a 	add	r4,r3,r9
    93cc:	20c00217 	ldw	r3,8(r4)
    93d0:	01c000b4 	movhi	r7,2
    93d4:	39c15704 	addi	r7,r7,1372
    93d8:	19003b26 	beq	r3,r4,94c8 <_free_r+0x258>
    93dc:	01ffff04 	movi	r7,-4
    93e0:	19400117 	ldw	r5,4(r3)
    93e4:	29ca703a 	and	r5,r5,r7
    93e8:	1140022e 	bgeu	r2,r5,93f4 <_free_r+0x184>
    93ec:	18c00217 	ldw	r3,8(r3)
    93f0:	20fffb1e 	bne	r4,r3,93e0 <__alt_mem_Flash_flash_data+0xf40093e0>
    93f4:	18800317 	ldw	r2,12(r3)
    93f8:	30800315 	stw	r2,12(r6)
    93fc:	30c00215 	stw	r3,8(r6)
    9400:	11800215 	stw	r6,8(r2)
    9404:	19800315 	stw	r6,12(r3)
    9408:	003fe006 	br	938c <__alt_mem_Flash_flash_data+0xf400938c>
    940c:	2100004c 	andi	r4,r4,1
    9410:	1885883a 	add	r2,r3,r2
    9414:	2000071e 	bne	r4,zero,9434 <_free_r+0x1c4>
    9418:	817ffe17 	ldw	r5,-8(r16)
    941c:	314dc83a 	sub	r6,r6,r5
    9420:	30c00317 	ldw	r3,12(r6)
    9424:	31000217 	ldw	r4,8(r6)
    9428:	1145883a 	add	r2,r2,r5
    942c:	20c00315 	stw	r3,12(r4)
    9430:	19000215 	stw	r4,8(r3)
    9434:	10c00054 	ori	r3,r2,1
    9438:	30c00115 	stw	r3,4(r6)
    943c:	00c000b4 	movhi	r3,2
    9440:	18c7d004 	addi	r3,r3,8000
    9444:	18c00017 	ldw	r3,0(r3)
    9448:	49800215 	stw	r6,8(r9)
    944c:	10ffcf36 	bltu	r2,r3,938c <__alt_mem_Flash_flash_data+0xf400938c>
    9450:	008000b4 	movhi	r2,2
    9454:	108fe704 	addi	r2,r2,16284
    9458:	11400017 	ldw	r5,0(r2)
    945c:	8809883a 	mov	r4,r17
    9460:	000914c0 	call	914c <_malloc_trim_r>
    9464:	003fc906 	br	938c <__alt_mem_Flash_flash_data+0xf400938c>
    9468:	28c9883a 	add	r4,r5,r3
    946c:	21000117 	ldw	r4,4(r4)
    9470:	2100004c 	andi	r4,r4,1
    9474:	20000a1e 	bne	r4,zero,94a0 <_free_r+0x230>
    9478:	29000317 	ldw	r4,12(r5)
    947c:	29400217 	ldw	r5,8(r5)
    9480:	10c5883a 	add	r2,r2,r3
    9484:	10c00054 	ori	r3,r2,1
    9488:	29000315 	stw	r4,12(r5)
    948c:	21400215 	stw	r5,8(r4)
    9490:	30c00115 	stw	r3,4(r6)
    9494:	308d883a 	add	r6,r6,r2
    9498:	30800015 	stw	r2,0(r6)
    949c:	003fbb06 	br	938c <__alt_mem_Flash_flash_data+0xf400938c>
    94a0:	10c00054 	ori	r3,r2,1
    94a4:	30c00115 	stw	r3,4(r6)
    94a8:	308d883a 	add	r6,r6,r2
    94ac:	30800015 	stw	r2,0(r6)
    94b0:	003fb606 	br	938c <__alt_mem_Flash_flash_data+0xf400938c>
    94b4:	01000504 	movi	r4,20
    94b8:	20c01436 	bltu	r4,r3,950c <_free_r+0x29c>
    94bc:	194016c4 	addi	r5,r3,91
    94c0:	2947883a 	add	r3,r5,r5
    94c4:	003fbe06 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>
    94c8:	280bd0ba 	srai	r5,r5,2
    94cc:	00800044 	movi	r2,1
    94d0:	39000117 	ldw	r4,4(r7)
    94d4:	114a983a 	sll	r5,r2,r5
    94d8:	1805883a 	mov	r2,r3
    94dc:	2908b03a 	or	r4,r5,r4
    94e0:	39000115 	stw	r4,4(r7)
    94e4:	003fc406 	br	93f8 <__alt_mem_Flash_flash_data+0xf40093f8>
    94e8:	49800515 	stw	r6,20(r9)
    94ec:	49800415 	stw	r6,16(r9)
    94f0:	10c00054 	ori	r3,r2,1
    94f4:	31000315 	stw	r4,12(r6)
    94f8:	31000215 	stw	r4,8(r6)
    94fc:	30c00115 	stw	r3,4(r6)
    9500:	308d883a 	add	r6,r6,r2
    9504:	30800015 	stw	r2,0(r6)
    9508:	003fa006 	br	938c <__alt_mem_Flash_flash_data+0xf400938c>
    950c:	01001504 	movi	r4,84
    9510:	20c00436 	bltu	r4,r3,9524 <_free_r+0x2b4>
    9514:	1006d33a 	srli	r3,r2,12
    9518:	19401b84 	addi	r5,r3,110
    951c:	2947883a 	add	r3,r5,r5
    9520:	003fa706 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>
    9524:	01005504 	movi	r4,340
    9528:	20c00436 	bltu	r4,r3,953c <_free_r+0x2cc>
    952c:	1006d3fa 	srli	r3,r2,15
    9530:	19401dc4 	addi	r5,r3,119
    9534:	2947883a 	add	r3,r5,r5
    9538:	003fa106 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>
    953c:	01015504 	movi	r4,1364
    9540:	20c00436 	bltu	r4,r3,9554 <_free_r+0x2e4>
    9544:	1006d4ba 	srli	r3,r2,18
    9548:	19401f04 	addi	r5,r3,124
    954c:	2947883a 	add	r3,r5,r5
    9550:	003f9b06 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>
    9554:	00c03f04 	movi	r3,252
    9558:	01401f84 	movi	r5,126
    955c:	003f9806 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>

00009560 <__sfvwrite_r>:
    9560:	30800217 	ldw	r2,8(r6)
    9564:	10006726 	beq	r2,zero,9704 <__sfvwrite_r+0x1a4>
    9568:	defff404 	addi	sp,sp,-48
    956c:	dd000615 	stw	r20,24(sp)
    9570:	2029883a 	mov	r20,r4
    9574:	2900030b 	ldhu	r4,12(r5)
    9578:	ddc00915 	stw	r23,36(sp)
    957c:	dc000215 	stw	r16,8(sp)
    9580:	dfc00b15 	stw	ra,44(sp)
    9584:	df000a15 	stw	fp,40(sp)
    9588:	dd800815 	stw	r22,32(sp)
    958c:	dd400715 	stw	r21,28(sp)
    9590:	dcc00515 	stw	r19,20(sp)
    9594:	dc800415 	stw	r18,16(sp)
    9598:	dc400315 	stw	r17,12(sp)
    959c:	2080020c 	andi	r2,r4,8
    95a0:	2821883a 	mov	r16,r5
    95a4:	302f883a 	mov	r23,r6
    95a8:	10002726 	beq	r2,zero,9648 <__sfvwrite_r+0xe8>
    95ac:	28800417 	ldw	r2,16(r5)
    95b0:	10002526 	beq	r2,zero,9648 <__sfvwrite_r+0xe8>
    95b4:	2080008c 	andi	r2,r4,2
    95b8:	bc400017 	ldw	r17,0(r23)
    95bc:	10002a26 	beq	r2,zero,9668 <__sfvwrite_r+0x108>
    95c0:	05600034 	movhi	r21,32768
    95c4:	0027883a 	mov	r19,zero
    95c8:	0025883a 	mov	r18,zero
    95cc:	ad7f0004 	addi	r21,r21,-1024
    95d0:	980d883a 	mov	r6,r19
    95d4:	a009883a 	mov	r4,r20
    95d8:	90004626 	beq	r18,zero,96f4 <__sfvwrite_r+0x194>
    95dc:	900f883a 	mov	r7,r18
    95e0:	81400717 	ldw	r5,28(r16)
    95e4:	ac80022e 	bgeu	r21,r18,95f0 <__sfvwrite_r+0x90>
    95e8:	01e00034 	movhi	r7,32768
    95ec:	39ff0004 	addi	r7,r7,-1024
    95f0:	80800917 	ldw	r2,36(r16)
    95f4:	103ee83a 	callr	r2
    95f8:	0080520e 	bge	zero,r2,9744 <__sfvwrite_r+0x1e4>
    95fc:	b8c00217 	ldw	r3,8(r23)
    9600:	98a7883a 	add	r19,r19,r2
    9604:	90a5c83a 	sub	r18,r18,r2
    9608:	1885c83a 	sub	r2,r3,r2
    960c:	b8800215 	stw	r2,8(r23)
    9610:	103fef1e 	bne	r2,zero,95d0 <__alt_mem_Flash_flash_data+0xf40095d0>
    9614:	0005883a 	mov	r2,zero
    9618:	dfc00b17 	ldw	ra,44(sp)
    961c:	df000a17 	ldw	fp,40(sp)
    9620:	ddc00917 	ldw	r23,36(sp)
    9624:	dd800817 	ldw	r22,32(sp)
    9628:	dd400717 	ldw	r21,28(sp)
    962c:	dd000617 	ldw	r20,24(sp)
    9630:	dcc00517 	ldw	r19,20(sp)
    9634:	dc800417 	ldw	r18,16(sp)
    9638:	dc400317 	ldw	r17,12(sp)
    963c:	dc000217 	ldw	r16,8(sp)
    9640:	dec00c04 	addi	sp,sp,48
    9644:	f800283a 	ret
    9648:	a009883a 	mov	r4,r20
    964c:	800b883a 	mov	r5,r16
    9650:	000709c0 	call	709c <__swsetup_r>
    9654:	1000ec1e 	bne	r2,zero,9a08 <__sfvwrite_r+0x4a8>
    9658:	8100030b 	ldhu	r4,12(r16)
    965c:	bc400017 	ldw	r17,0(r23)
    9660:	2080008c 	andi	r2,r4,2
    9664:	103fd61e 	bne	r2,zero,95c0 <__alt_mem_Flash_flash_data+0xf40095c0>
    9668:	2080004c 	andi	r2,r4,1
    966c:	10003a1e 	bne	r2,zero,9758 <__sfvwrite_r+0x1f8>
    9670:	0039883a 	mov	fp,zero
    9674:	0025883a 	mov	r18,zero
    9678:	90001a26 	beq	r18,zero,96e4 <__sfvwrite_r+0x184>
    967c:	2080800c 	andi	r2,r4,512
    9680:	85800217 	ldw	r22,8(r16)
    9684:	10007626 	beq	r2,zero,9860 <__sfvwrite_r+0x300>
    9688:	b027883a 	mov	r19,r22
    968c:	95809436 	bltu	r18,r22,98e0 <__sfvwrite_r+0x380>
    9690:	2081200c 	andi	r2,r4,1152
    9694:	10009f1e 	bne	r2,zero,9914 <__sfvwrite_r+0x3b4>
    9698:	81000017 	ldw	r4,0(r16)
    969c:	e00b883a 	mov	r5,fp
    96a0:	980d883a 	mov	r6,r19
    96a4:	000a8080 	call	a808 <memmove>
    96a8:	81000217 	ldw	r4,8(r16)
    96ac:	81400017 	ldw	r5,0(r16)
    96b0:	9005883a 	mov	r2,r18
    96b4:	2587c83a 	sub	r3,r4,r22
    96b8:	2ce7883a 	add	r19,r5,r19
    96bc:	80c00215 	stw	r3,8(r16)
    96c0:	84c00015 	stw	r19,0(r16)
    96c4:	b8c00217 	ldw	r3,8(r23)
    96c8:	e0b9883a 	add	fp,fp,r2
    96cc:	90a5c83a 	sub	r18,r18,r2
    96d0:	1885c83a 	sub	r2,r3,r2
    96d4:	b8800215 	stw	r2,8(r23)
    96d8:	103fce26 	beq	r2,zero,9614 <__alt_mem_Flash_flash_data+0xf4009614>
    96dc:	8100030b 	ldhu	r4,12(r16)
    96e0:	903fe61e 	bne	r18,zero,967c <__alt_mem_Flash_flash_data+0xf400967c>
    96e4:	8f000017 	ldw	fp,0(r17)
    96e8:	8c800117 	ldw	r18,4(r17)
    96ec:	8c400204 	addi	r17,r17,8
    96f0:	003fe106 	br	9678 <__alt_mem_Flash_flash_data+0xf4009678>
    96f4:	8cc00017 	ldw	r19,0(r17)
    96f8:	8c800117 	ldw	r18,4(r17)
    96fc:	8c400204 	addi	r17,r17,8
    9700:	003fb306 	br	95d0 <__alt_mem_Flash_flash_data+0xf40095d0>
    9704:	0005883a 	mov	r2,zero
    9708:	f800283a 	ret
    970c:	00a00034 	movhi	r2,32768
    9710:	10bfffc4 	addi	r2,r2,-1
    9714:	9009883a 	mov	r4,r18
    9718:	1480012e 	bgeu	r2,r18,9720 <__sfvwrite_r+0x1c0>
    971c:	1009883a 	mov	r4,r2
    9720:	980b883a 	mov	r5,r19
    9724:	000fdb40 	call	fdb4 <__divsi3>
    9728:	81400717 	ldw	r5,28(r16)
    972c:	80c00917 	ldw	r3,36(r16)
    9730:	988f383a 	mul	r7,r19,r2
    9734:	a009883a 	mov	r4,r20
    9738:	e00d883a 	mov	r6,fp
    973c:	183ee83a 	callr	r3
    9740:	00bfe016 	blt	zero,r2,96c4 <__alt_mem_Flash_flash_data+0xf40096c4>
    9744:	8080030b 	ldhu	r2,12(r16)
    9748:	10801014 	ori	r2,r2,64
    974c:	8080030d 	sth	r2,12(r16)
    9750:	00bfffc4 	movi	r2,-1
    9754:	003fb006 	br	9618 <__alt_mem_Flash_flash_data+0xf4009618>
    9758:	0027883a 	mov	r19,zero
    975c:	0011883a 	mov	r8,zero
    9760:	0039883a 	mov	fp,zero
    9764:	0025883a 	mov	r18,zero
    9768:	90001f26 	beq	r18,zero,97e8 <__sfvwrite_r+0x288>
    976c:	40006026 	beq	r8,zero,98f0 <__sfvwrite_r+0x390>
    9770:	982b883a 	mov	r21,r19
    9774:	94c0012e 	bgeu	r18,r19,977c <__sfvwrite_r+0x21c>
    9778:	902b883a 	mov	r21,r18
    977c:	81000017 	ldw	r4,0(r16)
    9780:	80800417 	ldw	r2,16(r16)
    9784:	a82d883a 	mov	r22,r21
    9788:	81800217 	ldw	r6,8(r16)
    978c:	81c00517 	ldw	r7,20(r16)
    9790:	1100022e 	bgeu	r2,r4,979c <__sfvwrite_r+0x23c>
    9794:	31c7883a 	add	r3,r6,r7
    9798:	1d401816 	blt	r3,r21,97fc <__sfvwrite_r+0x29c>
    979c:	a9c04416 	blt	r21,r7,98b0 <__sfvwrite_r+0x350>
    97a0:	80800917 	ldw	r2,36(r16)
    97a4:	81400717 	ldw	r5,28(r16)
    97a8:	a009883a 	mov	r4,r20
    97ac:	da000115 	stw	r8,4(sp)
    97b0:	e00d883a 	mov	r6,fp
    97b4:	103ee83a 	callr	r2
    97b8:	102d883a 	mov	r22,r2
    97bc:	da000117 	ldw	r8,4(sp)
    97c0:	00bfe00e 	bge	zero,r2,9744 <__alt_mem_Flash_flash_data+0xf4009744>
    97c4:	9da7c83a 	sub	r19,r19,r22
    97c8:	98001f26 	beq	r19,zero,9848 <__sfvwrite_r+0x2e8>
    97cc:	b8800217 	ldw	r2,8(r23)
    97d0:	e5b9883a 	add	fp,fp,r22
    97d4:	95a5c83a 	sub	r18,r18,r22
    97d8:	15adc83a 	sub	r22,r2,r22
    97dc:	bd800215 	stw	r22,8(r23)
    97e0:	b03f8c26 	beq	r22,zero,9614 <__alt_mem_Flash_flash_data+0xf4009614>
    97e4:	903fe11e 	bne	r18,zero,976c <__alt_mem_Flash_flash_data+0xf400976c>
    97e8:	8f000017 	ldw	fp,0(r17)
    97ec:	8c800117 	ldw	r18,4(r17)
    97f0:	0011883a 	mov	r8,zero
    97f4:	8c400204 	addi	r17,r17,8
    97f8:	003fdb06 	br	9768 <__alt_mem_Flash_flash_data+0xf4009768>
    97fc:	180d883a 	mov	r6,r3
    9800:	e00b883a 	mov	r5,fp
    9804:	da000115 	stw	r8,4(sp)
    9808:	d8c00015 	stw	r3,0(sp)
    980c:	000a8080 	call	a808 <memmove>
    9810:	d8c00017 	ldw	r3,0(sp)
    9814:	80800017 	ldw	r2,0(r16)
    9818:	a009883a 	mov	r4,r20
    981c:	800b883a 	mov	r5,r16
    9820:	10c5883a 	add	r2,r2,r3
    9824:	80800015 	stw	r2,0(r16)
    9828:	d8c00015 	stw	r3,0(sp)
    982c:	0008d200 	call	8d20 <_fflush_r>
    9830:	d8c00017 	ldw	r3,0(sp)
    9834:	da000117 	ldw	r8,4(sp)
    9838:	103fc21e 	bne	r2,zero,9744 <__alt_mem_Flash_flash_data+0xf4009744>
    983c:	182d883a 	mov	r22,r3
    9840:	9da7c83a 	sub	r19,r19,r22
    9844:	983fe11e 	bne	r19,zero,97cc <__alt_mem_Flash_flash_data+0xf40097cc>
    9848:	a009883a 	mov	r4,r20
    984c:	800b883a 	mov	r5,r16
    9850:	0008d200 	call	8d20 <_fflush_r>
    9854:	103fbb1e 	bne	r2,zero,9744 <__alt_mem_Flash_flash_data+0xf4009744>
    9858:	0011883a 	mov	r8,zero
    985c:	003fdb06 	br	97cc <__alt_mem_Flash_flash_data+0xf40097cc>
    9860:	81000017 	ldw	r4,0(r16)
    9864:	80800417 	ldw	r2,16(r16)
    9868:	11000236 	bltu	r2,r4,9874 <__sfvwrite_r+0x314>
    986c:	84c00517 	ldw	r19,20(r16)
    9870:	94ffa62e 	bgeu	r18,r19,970c <__alt_mem_Flash_flash_data+0xf400970c>
    9874:	9027883a 	mov	r19,r18
    9878:	b480012e 	bgeu	r22,r18,9880 <__sfvwrite_r+0x320>
    987c:	b027883a 	mov	r19,r22
    9880:	e00b883a 	mov	r5,fp
    9884:	980d883a 	mov	r6,r19
    9888:	000a8080 	call	a808 <memmove>
    988c:	80800217 	ldw	r2,8(r16)
    9890:	80c00017 	ldw	r3,0(r16)
    9894:	14c5c83a 	sub	r2,r2,r19
    9898:	1cc7883a 	add	r3,r3,r19
    989c:	80800215 	stw	r2,8(r16)
    98a0:	80c00015 	stw	r3,0(r16)
    98a4:	10004326 	beq	r2,zero,99b4 <__sfvwrite_r+0x454>
    98a8:	9805883a 	mov	r2,r19
    98ac:	003f8506 	br	96c4 <__alt_mem_Flash_flash_data+0xf40096c4>
    98b0:	a80d883a 	mov	r6,r21
    98b4:	e00b883a 	mov	r5,fp
    98b8:	da000115 	stw	r8,4(sp)
    98bc:	000a8080 	call	a808 <memmove>
    98c0:	80800217 	ldw	r2,8(r16)
    98c4:	80c00017 	ldw	r3,0(r16)
    98c8:	da000117 	ldw	r8,4(sp)
    98cc:	1545c83a 	sub	r2,r2,r21
    98d0:	1d6b883a 	add	r21,r3,r21
    98d4:	80800215 	stw	r2,8(r16)
    98d8:	85400015 	stw	r21,0(r16)
    98dc:	003fb906 	br	97c4 <__alt_mem_Flash_flash_data+0xf40097c4>
    98e0:	81000017 	ldw	r4,0(r16)
    98e4:	902d883a 	mov	r22,r18
    98e8:	9027883a 	mov	r19,r18
    98ec:	003f6b06 	br	969c <__alt_mem_Flash_flash_data+0xf400969c>
    98f0:	e009883a 	mov	r4,fp
    98f4:	01400284 	movi	r5,10
    98f8:	900d883a 	mov	r6,r18
    98fc:	000a5e80 	call	a5e8 <memchr>
    9900:	10003e26 	beq	r2,zero,99fc <__sfvwrite_r+0x49c>
    9904:	10800044 	addi	r2,r2,1
    9908:	1727c83a 	sub	r19,r2,fp
    990c:	02000044 	movi	r8,1
    9910:	003f9706 	br	9770 <__alt_mem_Flash_flash_data+0xf4009770>
    9914:	80800517 	ldw	r2,20(r16)
    9918:	81400417 	ldw	r5,16(r16)
    991c:	80c00017 	ldw	r3,0(r16)
    9920:	10a7883a 	add	r19,r2,r2
    9924:	9885883a 	add	r2,r19,r2
    9928:	1026d7fa 	srli	r19,r2,31
    992c:	196bc83a 	sub	r21,r3,r5
    9930:	a9800044 	addi	r6,r21,1
    9934:	9885883a 	add	r2,r19,r2
    9938:	1027d07a 	srai	r19,r2,1
    993c:	3485883a 	add	r2,r6,r18
    9940:	980d883a 	mov	r6,r19
    9944:	9880022e 	bgeu	r19,r2,9950 <__sfvwrite_r+0x3f0>
    9948:	1027883a 	mov	r19,r2
    994c:	100d883a 	mov	r6,r2
    9950:	2101000c 	andi	r4,r4,1024
    9954:	20001c26 	beq	r4,zero,99c8 <__sfvwrite_r+0x468>
    9958:	a009883a 	mov	r4,r20
    995c:	300b883a 	mov	r5,r6
    9960:	0009e400 	call	9e40 <_malloc_r>
    9964:	102d883a 	mov	r22,r2
    9968:	10002926 	beq	r2,zero,9a10 <__sfvwrite_r+0x4b0>
    996c:	81400417 	ldw	r5,16(r16)
    9970:	1009883a 	mov	r4,r2
    9974:	a80d883a 	mov	r6,r21
    9978:	000a6d00 	call	a6d0 <memcpy>
    997c:	8080030b 	ldhu	r2,12(r16)
    9980:	00fedfc4 	movi	r3,-1153
    9984:	10c4703a 	and	r2,r2,r3
    9988:	10802014 	ori	r2,r2,128
    998c:	8080030d 	sth	r2,12(r16)
    9990:	b549883a 	add	r4,r22,r21
    9994:	9d4bc83a 	sub	r5,r19,r21
    9998:	85800415 	stw	r22,16(r16)
    999c:	84c00515 	stw	r19,20(r16)
    99a0:	81000015 	stw	r4,0(r16)
    99a4:	902d883a 	mov	r22,r18
    99a8:	81400215 	stw	r5,8(r16)
    99ac:	9027883a 	mov	r19,r18
    99b0:	003f3a06 	br	969c <__alt_mem_Flash_flash_data+0xf400969c>
    99b4:	a009883a 	mov	r4,r20
    99b8:	800b883a 	mov	r5,r16
    99bc:	0008d200 	call	8d20 <_fflush_r>
    99c0:	103fb926 	beq	r2,zero,98a8 <__alt_mem_Flash_flash_data+0xf40098a8>
    99c4:	003f5f06 	br	9744 <__alt_mem_Flash_flash_data+0xf4009744>
    99c8:	a009883a 	mov	r4,r20
    99cc:	000ba280 	call	ba28 <_realloc_r>
    99d0:	102d883a 	mov	r22,r2
    99d4:	103fee1e 	bne	r2,zero,9990 <__alt_mem_Flash_flash_data+0xf4009990>
    99d8:	81400417 	ldw	r5,16(r16)
    99dc:	a009883a 	mov	r4,r20
    99e0:	00092700 	call	9270 <_free_r>
    99e4:	8080030b 	ldhu	r2,12(r16)
    99e8:	00ffdfc4 	movi	r3,-129
    99ec:	1884703a 	and	r2,r3,r2
    99f0:	00c00304 	movi	r3,12
    99f4:	a0c00015 	stw	r3,0(r20)
    99f8:	003f5306 	br	9748 <__alt_mem_Flash_flash_data+0xf4009748>
    99fc:	94c00044 	addi	r19,r18,1
    9a00:	02000044 	movi	r8,1
    9a04:	003f5a06 	br	9770 <__alt_mem_Flash_flash_data+0xf4009770>
    9a08:	00bfffc4 	movi	r2,-1
    9a0c:	003f0206 	br	9618 <__alt_mem_Flash_flash_data+0xf4009618>
    9a10:	00800304 	movi	r2,12
    9a14:	a0800015 	stw	r2,0(r20)
    9a18:	8080030b 	ldhu	r2,12(r16)
    9a1c:	003f4a06 	br	9748 <__alt_mem_Flash_flash_data+0xf4009748>

00009a20 <_fwalk>:
    9a20:	defff704 	addi	sp,sp,-36
    9a24:	dd000415 	stw	r20,16(sp)
    9a28:	dfc00815 	stw	ra,32(sp)
    9a2c:	ddc00715 	stw	r23,28(sp)
    9a30:	dd800615 	stw	r22,24(sp)
    9a34:	dd400515 	stw	r21,20(sp)
    9a38:	dcc00315 	stw	r19,12(sp)
    9a3c:	dc800215 	stw	r18,8(sp)
    9a40:	dc400115 	stw	r17,4(sp)
    9a44:	dc000015 	stw	r16,0(sp)
    9a48:	2500b804 	addi	r20,r4,736
    9a4c:	a0002326 	beq	r20,zero,9adc <_fwalk+0xbc>
    9a50:	282b883a 	mov	r21,r5
    9a54:	002f883a 	mov	r23,zero
    9a58:	05800044 	movi	r22,1
    9a5c:	04ffffc4 	movi	r19,-1
    9a60:	a4400117 	ldw	r17,4(r20)
    9a64:	a4800217 	ldw	r18,8(r20)
    9a68:	8c7fffc4 	addi	r17,r17,-1
    9a6c:	88000d16 	blt	r17,zero,9aa4 <_fwalk+0x84>
    9a70:	94000304 	addi	r16,r18,12
    9a74:	94800384 	addi	r18,r18,14
    9a78:	80c0000b 	ldhu	r3,0(r16)
    9a7c:	8c7fffc4 	addi	r17,r17,-1
    9a80:	813ffd04 	addi	r4,r16,-12
    9a84:	b0c0042e 	bgeu	r22,r3,9a98 <_fwalk+0x78>
    9a88:	90c0000f 	ldh	r3,0(r18)
    9a8c:	1cc00226 	beq	r3,r19,9a98 <_fwalk+0x78>
    9a90:	a83ee83a 	callr	r21
    9a94:	b8aeb03a 	or	r23,r23,r2
    9a98:	84001a04 	addi	r16,r16,104
    9a9c:	94801a04 	addi	r18,r18,104
    9aa0:	8cfff51e 	bne	r17,r19,9a78 <__alt_mem_Flash_flash_data+0xf4009a78>
    9aa4:	a5000017 	ldw	r20,0(r20)
    9aa8:	a03fed1e 	bne	r20,zero,9a60 <__alt_mem_Flash_flash_data+0xf4009a60>
    9aac:	b805883a 	mov	r2,r23
    9ab0:	dfc00817 	ldw	ra,32(sp)
    9ab4:	ddc00717 	ldw	r23,28(sp)
    9ab8:	dd800617 	ldw	r22,24(sp)
    9abc:	dd400517 	ldw	r21,20(sp)
    9ac0:	dd000417 	ldw	r20,16(sp)
    9ac4:	dcc00317 	ldw	r19,12(sp)
    9ac8:	dc800217 	ldw	r18,8(sp)
    9acc:	dc400117 	ldw	r17,4(sp)
    9ad0:	dc000017 	ldw	r16,0(sp)
    9ad4:	dec00904 	addi	sp,sp,36
    9ad8:	f800283a 	ret
    9adc:	002f883a 	mov	r23,zero
    9ae0:	003ff206 	br	9aac <__alt_mem_Flash_flash_data+0xf4009aac>

00009ae4 <_fwalk_reent>:
    9ae4:	defff704 	addi	sp,sp,-36
    9ae8:	dd400515 	stw	r21,20(sp)
    9aec:	dfc00815 	stw	ra,32(sp)
    9af0:	ddc00715 	stw	r23,28(sp)
    9af4:	dd800615 	stw	r22,24(sp)
    9af8:	dd000415 	stw	r20,16(sp)
    9afc:	dcc00315 	stw	r19,12(sp)
    9b00:	dc800215 	stw	r18,8(sp)
    9b04:	dc400115 	stw	r17,4(sp)
    9b08:	dc000015 	stw	r16,0(sp)
    9b0c:	2540b804 	addi	r21,r4,736
    9b10:	a8002326 	beq	r21,zero,9ba0 <_fwalk_reent+0xbc>
    9b14:	2829883a 	mov	r20,r5
    9b18:	202d883a 	mov	r22,r4
    9b1c:	002f883a 	mov	r23,zero
    9b20:	04c00044 	movi	r19,1
    9b24:	04bfffc4 	movi	r18,-1
    9b28:	ac400117 	ldw	r17,4(r21)
    9b2c:	ac000217 	ldw	r16,8(r21)
    9b30:	8c7fffc4 	addi	r17,r17,-1
    9b34:	88000c16 	blt	r17,zero,9b68 <_fwalk_reent+0x84>
    9b38:	84000304 	addi	r16,r16,12
    9b3c:	80c0000b 	ldhu	r3,0(r16)
    9b40:	8c7fffc4 	addi	r17,r17,-1
    9b44:	817ffd04 	addi	r5,r16,-12
    9b48:	98c0052e 	bgeu	r19,r3,9b60 <_fwalk_reent+0x7c>
    9b4c:	80c0008f 	ldh	r3,2(r16)
    9b50:	b009883a 	mov	r4,r22
    9b54:	1c800226 	beq	r3,r18,9b60 <_fwalk_reent+0x7c>
    9b58:	a03ee83a 	callr	r20
    9b5c:	b8aeb03a 	or	r23,r23,r2
    9b60:	84001a04 	addi	r16,r16,104
    9b64:	8cbff51e 	bne	r17,r18,9b3c <__alt_mem_Flash_flash_data+0xf4009b3c>
    9b68:	ad400017 	ldw	r21,0(r21)
    9b6c:	a83fee1e 	bne	r21,zero,9b28 <__alt_mem_Flash_flash_data+0xf4009b28>
    9b70:	b805883a 	mov	r2,r23
    9b74:	dfc00817 	ldw	ra,32(sp)
    9b78:	ddc00717 	ldw	r23,28(sp)
    9b7c:	dd800617 	ldw	r22,24(sp)
    9b80:	dd400517 	ldw	r21,20(sp)
    9b84:	dd000417 	ldw	r20,16(sp)
    9b88:	dcc00317 	ldw	r19,12(sp)
    9b8c:	dc800217 	ldw	r18,8(sp)
    9b90:	dc400117 	ldw	r17,4(sp)
    9b94:	dc000017 	ldw	r16,0(sp)
    9b98:	dec00904 	addi	sp,sp,36
    9b9c:	f800283a 	ret
    9ba0:	002f883a 	mov	r23,zero
    9ba4:	003ff206 	br	9b70 <__alt_mem_Flash_flash_data+0xf4009b70>

00009ba8 <_setlocale_r>:
    9ba8:	30001b26 	beq	r6,zero,9c18 <_setlocale_r+0x70>
    9bac:	014000b4 	movhi	r5,2
    9bb0:	defffe04 	addi	sp,sp,-8
    9bb4:	297ed904 	addi	r5,r5,-1180
    9bb8:	3009883a 	mov	r4,r6
    9bbc:	dc000015 	stw	r16,0(sp)
    9bc0:	dfc00115 	stw	ra,4(sp)
    9bc4:	3021883a 	mov	r16,r6
    9bc8:	000c1940 	call	c194 <strcmp>
    9bcc:	1000061e 	bne	r2,zero,9be8 <_setlocale_r+0x40>
    9bd0:	008000b4 	movhi	r2,2
    9bd4:	10bed804 	addi	r2,r2,-1184
    9bd8:	dfc00117 	ldw	ra,4(sp)
    9bdc:	dc000017 	ldw	r16,0(sp)
    9be0:	dec00204 	addi	sp,sp,8
    9be4:	f800283a 	ret
    9be8:	014000b4 	movhi	r5,2
    9bec:	297ed804 	addi	r5,r5,-1184
    9bf0:	8009883a 	mov	r4,r16
    9bf4:	000c1940 	call	c194 <strcmp>
    9bf8:	103ff526 	beq	r2,zero,9bd0 <__alt_mem_Flash_flash_data+0xf4009bd0>
    9bfc:	014000b4 	movhi	r5,2
    9c00:	297ebb04 	addi	r5,r5,-1300
    9c04:	8009883a 	mov	r4,r16
    9c08:	000c1940 	call	c194 <strcmp>
    9c0c:	103ff026 	beq	r2,zero,9bd0 <__alt_mem_Flash_flash_data+0xf4009bd0>
    9c10:	0005883a 	mov	r2,zero
    9c14:	003ff006 	br	9bd8 <__alt_mem_Flash_flash_data+0xf4009bd8>
    9c18:	008000b4 	movhi	r2,2
    9c1c:	10bed804 	addi	r2,r2,-1184
    9c20:	f800283a 	ret

00009c24 <__locale_charset>:
    9c24:	008000b4 	movhi	r2,2
    9c28:	10814104 	addi	r2,r2,1284
    9c2c:	f800283a 	ret

00009c30 <__locale_mb_cur_max>:
    9c30:	008000b4 	movhi	r2,2
    9c34:	1087ce04 	addi	r2,r2,7992
    9c38:	10800017 	ldw	r2,0(r2)
    9c3c:	f800283a 	ret

00009c40 <__locale_msgcharset>:
    9c40:	008000b4 	movhi	r2,2
    9c44:	10813904 	addi	r2,r2,1252
    9c48:	f800283a 	ret

00009c4c <__locale_cjk_lang>:
    9c4c:	0005883a 	mov	r2,zero
    9c50:	f800283a 	ret

00009c54 <_localeconv_r>:
    9c54:	008000b4 	movhi	r2,2
    9c58:	10814904 	addi	r2,r2,1316
    9c5c:	f800283a 	ret

00009c60 <setlocale>:
    9c60:	00c000b4 	movhi	r3,2
    9c64:	18c7cd04 	addi	r3,r3,7988
    9c68:	2005883a 	mov	r2,r4
    9c6c:	19000017 	ldw	r4,0(r3)
    9c70:	280d883a 	mov	r6,r5
    9c74:	100b883a 	mov	r5,r2
    9c78:	0009ba81 	jmpi	9ba8 <_setlocale_r>

00009c7c <localeconv>:
    9c7c:	008000b4 	movhi	r2,2
    9c80:	10814904 	addi	r2,r2,1316
    9c84:	f800283a 	ret

00009c88 <__smakebuf_r>:
    9c88:	2880030b 	ldhu	r2,12(r5)
    9c8c:	10c0008c 	andi	r3,r2,2
    9c90:	1800401e 	bne	r3,zero,9d94 <__smakebuf_r+0x10c>
    9c94:	deffec04 	addi	sp,sp,-80
    9c98:	dc000f15 	stw	r16,60(sp)
    9c9c:	2821883a 	mov	r16,r5
    9ca0:	2940038f 	ldh	r5,14(r5)
    9ca4:	dc401015 	stw	r17,64(sp)
    9ca8:	dfc01315 	stw	ra,76(sp)
    9cac:	dcc01215 	stw	r19,72(sp)
    9cb0:	dc801115 	stw	r18,68(sp)
    9cb4:	2023883a 	mov	r17,r4
    9cb8:	28001b16 	blt	r5,zero,9d28 <__smakebuf_r+0xa0>
    9cbc:	d80d883a 	mov	r6,sp
    9cc0:	000ed580 	call	ed58 <_fstat_r>
    9cc4:	10001716 	blt	r2,zero,9d24 <__smakebuf_r+0x9c>
    9cc8:	d8800117 	ldw	r2,4(sp)
    9ccc:	00e00014 	movui	r3,32768
    9cd0:	10bc000c 	andi	r2,r2,61440
    9cd4:	10c03726 	beq	r2,r3,9db4 <__smakebuf_r+0x12c>
    9cd8:	80c0030b 	ldhu	r3,12(r16)
    9cdc:	18c20014 	ori	r3,r3,2048
    9ce0:	80c0030d 	sth	r3,12(r16)
    9ce4:	00c80004 	movi	r3,8192
    9ce8:	10c03c1e 	bne	r2,r3,9ddc <__smakebuf_r+0x154>
    9cec:	8140038f 	ldh	r5,14(r16)
    9cf0:	8809883a 	mov	r4,r17
    9cf4:	000edb00 	call	edb0 <_isatty_r>
    9cf8:	10004e26 	beq	r2,zero,9e34 <__smakebuf_r+0x1ac>
    9cfc:	8080030b 	ldhu	r2,12(r16)
    9d00:	04c00044 	movi	r19,1
    9d04:	80c010c4 	addi	r3,r16,67
    9d08:	14c4b03a 	or	r2,r2,r19
    9d0c:	8080030d 	sth	r2,12(r16)
    9d10:	80c00015 	stw	r3,0(r16)
    9d14:	80c00415 	stw	r3,16(r16)
    9d18:	84c00515 	stw	r19,20(r16)
    9d1c:	04810004 	movi	r18,1024
    9d20:	00000706 	br	9d40 <__smakebuf_r+0xb8>
    9d24:	8080030b 	ldhu	r2,12(r16)
    9d28:	10c0200c 	andi	r3,r2,128
    9d2c:	18001f1e 	bne	r3,zero,9dac <__smakebuf_r+0x124>
    9d30:	04810004 	movi	r18,1024
    9d34:	10820014 	ori	r2,r2,2048
    9d38:	8080030d 	sth	r2,12(r16)
    9d3c:	0027883a 	mov	r19,zero
    9d40:	8809883a 	mov	r4,r17
    9d44:	900b883a 	mov	r5,r18
    9d48:	0009e400 	call	9e40 <_malloc_r>
    9d4c:	10002e26 	beq	r2,zero,9e08 <__smakebuf_r+0x180>
    9d50:	80c0030b 	ldhu	r3,12(r16)
    9d54:	01000074 	movhi	r4,1
    9d58:	21236f04 	addi	r4,r4,-29252
    9d5c:	89000f15 	stw	r4,60(r17)
    9d60:	18c02014 	ori	r3,r3,128
    9d64:	80c0030d 	sth	r3,12(r16)
    9d68:	80800015 	stw	r2,0(r16)
    9d6c:	80800415 	stw	r2,16(r16)
    9d70:	84800515 	stw	r18,20(r16)
    9d74:	98001c1e 	bne	r19,zero,9de8 <__smakebuf_r+0x160>
    9d78:	dfc01317 	ldw	ra,76(sp)
    9d7c:	dcc01217 	ldw	r19,72(sp)
    9d80:	dc801117 	ldw	r18,68(sp)
    9d84:	dc401017 	ldw	r17,64(sp)
    9d88:	dc000f17 	ldw	r16,60(sp)
    9d8c:	dec01404 	addi	sp,sp,80
    9d90:	f800283a 	ret
    9d94:	288010c4 	addi	r2,r5,67
    9d98:	28800015 	stw	r2,0(r5)
    9d9c:	28800415 	stw	r2,16(r5)
    9da0:	00800044 	movi	r2,1
    9da4:	28800515 	stw	r2,20(r5)
    9da8:	f800283a 	ret
    9dac:	04801004 	movi	r18,64
    9db0:	003fe006 	br	9d34 <__alt_mem_Flash_flash_data+0xf4009d34>
    9db4:	81000a17 	ldw	r4,40(r16)
    9db8:	00c00074 	movhi	r3,1
    9dbc:	18f04c04 	addi	r3,r3,-16080
    9dc0:	20ffc51e 	bne	r4,r3,9cd8 <__alt_mem_Flash_flash_data+0xf4009cd8>
    9dc4:	80c0030b 	ldhu	r3,12(r16)
    9dc8:	01010004 	movi	r4,1024
    9dcc:	81001315 	stw	r4,76(r16)
    9dd0:	1906b03a 	or	r3,r3,r4
    9dd4:	80c0030d 	sth	r3,12(r16)
    9dd8:	003fc206 	br	9ce4 <__alt_mem_Flash_flash_data+0xf4009ce4>
    9ddc:	0027883a 	mov	r19,zero
    9de0:	04810004 	movi	r18,1024
    9de4:	003fd606 	br	9d40 <__alt_mem_Flash_flash_data+0xf4009d40>
    9de8:	8140038f 	ldh	r5,14(r16)
    9dec:	8809883a 	mov	r4,r17
    9df0:	000edb00 	call	edb0 <_isatty_r>
    9df4:	103fe026 	beq	r2,zero,9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9df8:	8080030b 	ldhu	r2,12(r16)
    9dfc:	10800054 	ori	r2,r2,1
    9e00:	8080030d 	sth	r2,12(r16)
    9e04:	003fdc06 	br	9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9e08:	8080030b 	ldhu	r2,12(r16)
    9e0c:	10c0800c 	andi	r3,r2,512
    9e10:	183fd91e 	bne	r3,zero,9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9e14:	10800094 	ori	r2,r2,2
    9e18:	80c010c4 	addi	r3,r16,67
    9e1c:	8080030d 	sth	r2,12(r16)
    9e20:	00800044 	movi	r2,1
    9e24:	80c00015 	stw	r3,0(r16)
    9e28:	80c00415 	stw	r3,16(r16)
    9e2c:	80800515 	stw	r2,20(r16)
    9e30:	003fd106 	br	9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9e34:	04c00044 	movi	r19,1
    9e38:	04810004 	movi	r18,1024
    9e3c:	003fc006 	br	9d40 <__alt_mem_Flash_flash_data+0xf4009d40>

00009e40 <_malloc_r>:
    9e40:	defff504 	addi	sp,sp,-44
    9e44:	dc800315 	stw	r18,12(sp)
    9e48:	dfc00a15 	stw	ra,40(sp)
    9e4c:	df000915 	stw	fp,36(sp)
    9e50:	ddc00815 	stw	r23,32(sp)
    9e54:	dd800715 	stw	r22,28(sp)
    9e58:	dd400615 	stw	r21,24(sp)
    9e5c:	dd000515 	stw	r20,20(sp)
    9e60:	dcc00415 	stw	r19,16(sp)
    9e64:	dc400215 	stw	r17,8(sp)
    9e68:	dc000115 	stw	r16,4(sp)
    9e6c:	288002c4 	addi	r2,r5,11
    9e70:	00c00584 	movi	r3,22
    9e74:	2025883a 	mov	r18,r4
    9e78:	18802a2e 	bgeu	r3,r2,9f24 <_malloc_r+0xe4>
    9e7c:	047ffe04 	movi	r17,-8
    9e80:	1462703a 	and	r17,r2,r17
    9e84:	88009e16 	blt	r17,zero,a100 <_malloc_r+0x2c0>
    9e88:	89409d36 	bltu	r17,r5,a100 <_malloc_r+0x2c0>
    9e8c:	0012f500 	call	12f50 <__malloc_lock>
    9e90:	00807dc4 	movi	r2,503
    9e94:	14402736 	bltu	r2,r17,9f34 <_malloc_r+0xf4>
    9e98:	8806d0fa 	srli	r3,r17,3
    9e9c:	04c000b4 	movhi	r19,2
    9ea0:	9cc15704 	addi	r19,r19,1372
    9ea4:	18c5883a 	add	r2,r3,r3
    9ea8:	1085883a 	add	r2,r2,r2
    9eac:	1085883a 	add	r2,r2,r2
    9eb0:	9885883a 	add	r2,r19,r2
    9eb4:	14000317 	ldw	r16,12(r2)
    9eb8:	80814a26 	beq	r16,r2,a3e4 <_malloc_r+0x5a4>
    9ebc:	80c00117 	ldw	r3,4(r16)
    9ec0:	81000317 	ldw	r4,12(r16)
    9ec4:	00bfff04 	movi	r2,-4
    9ec8:	1884703a 	and	r2,r3,r2
    9ecc:	81400217 	ldw	r5,8(r16)
    9ed0:	8085883a 	add	r2,r16,r2
    9ed4:	10c00117 	ldw	r3,4(r2)
    9ed8:	29000315 	stw	r4,12(r5)
    9edc:	21400215 	stw	r5,8(r4)
    9ee0:	18c00054 	ori	r3,r3,1
    9ee4:	10c00115 	stw	r3,4(r2)
    9ee8:	9009883a 	mov	r4,r18
    9eec:	00130700 	call	13070 <__malloc_unlock>
    9ef0:	80800204 	addi	r2,r16,8
    9ef4:	dfc00a17 	ldw	ra,40(sp)
    9ef8:	df000917 	ldw	fp,36(sp)
    9efc:	ddc00817 	ldw	r23,32(sp)
    9f00:	dd800717 	ldw	r22,28(sp)
    9f04:	dd400617 	ldw	r21,24(sp)
    9f08:	dd000517 	ldw	r20,20(sp)
    9f0c:	dcc00417 	ldw	r19,16(sp)
    9f10:	dc800317 	ldw	r18,12(sp)
    9f14:	dc400217 	ldw	r17,8(sp)
    9f18:	dc000117 	ldw	r16,4(sp)
    9f1c:	dec00b04 	addi	sp,sp,44
    9f20:	f800283a 	ret
    9f24:	04400404 	movi	r17,16
    9f28:	89407536 	bltu	r17,r5,a100 <_malloc_r+0x2c0>
    9f2c:	0012f500 	call	12f50 <__malloc_lock>
    9f30:	003fd906 	br	9e98 <__alt_mem_Flash_flash_data+0xf4009e98>
    9f34:	8806d27a 	srli	r3,r17,9
    9f38:	18007526 	beq	r3,zero,a110 <_malloc_r+0x2d0>
    9f3c:	00800104 	movi	r2,4
    9f40:	10c0ef36 	bltu	r2,r3,a300 <_malloc_r+0x4c0>
    9f44:	8806d1ba 	srli	r3,r17,6
    9f48:	19c00e04 	addi	r7,r3,56
    9f4c:	39cb883a 	add	r5,r7,r7
    9f50:	04c000b4 	movhi	r19,2
    9f54:	294b883a 	add	r5,r5,r5
    9f58:	9cc15704 	addi	r19,r19,1372
    9f5c:	294b883a 	add	r5,r5,r5
    9f60:	994b883a 	add	r5,r19,r5
    9f64:	2c000317 	ldw	r16,12(r5)
    9f68:	2c000e26 	beq	r5,r16,9fa4 <_malloc_r+0x164>
    9f6c:	80800117 	ldw	r2,4(r16)
    9f70:	01bfff04 	movi	r6,-4
    9f74:	010003c4 	movi	r4,15
    9f78:	1184703a 	and	r2,r2,r6
    9f7c:	1447c83a 	sub	r3,r2,r17
    9f80:	20c00716 	blt	r4,r3,9fa0 <_malloc_r+0x160>
    9f84:	1800650e 	bge	r3,zero,a11c <_malloc_r+0x2dc>
    9f88:	84000317 	ldw	r16,12(r16)
    9f8c:	2c000526 	beq	r5,r16,9fa4 <_malloc_r+0x164>
    9f90:	80800117 	ldw	r2,4(r16)
    9f94:	1184703a 	and	r2,r2,r6
    9f98:	1447c83a 	sub	r3,r2,r17
    9f9c:	20fff90e 	bge	r4,r3,9f84 <__alt_mem_Flash_flash_data+0xf4009f84>
    9fa0:	39ffffc4 	addi	r7,r7,-1
    9fa4:	38c00044 	addi	r3,r7,1
    9fa8:	018000b4 	movhi	r6,2
    9fac:	9c000417 	ldw	r16,16(r19)
    9fb0:	31815704 	addi	r6,r6,1372
    9fb4:	32400204 	addi	r9,r6,8
    9fb8:	82410326 	beq	r16,r9,a3c8 <_malloc_r+0x588>
    9fbc:	81000117 	ldw	r4,4(r16)
    9fc0:	00bfff04 	movi	r2,-4
    9fc4:	208e703a 	and	r7,r4,r2
    9fc8:	3c45c83a 	sub	r2,r7,r17
    9fcc:	010003c4 	movi	r4,15
    9fd0:	2080ee16 	blt	r4,r2,a38c <_malloc_r+0x54c>
    9fd4:	32400515 	stw	r9,20(r6)
    9fd8:	32400415 	stw	r9,16(r6)
    9fdc:	1000510e 	bge	r2,zero,a124 <_malloc_r+0x2e4>
    9fe0:	00807fc4 	movi	r2,511
    9fe4:	11c0ce36 	bltu	r2,r7,a320 <_malloc_r+0x4e0>
    9fe8:	3808d0fa 	srli	r4,r7,3
    9fec:	01c00044 	movi	r7,1
    9ff0:	30800117 	ldw	r2,4(r6)
    9ff4:	210b883a 	add	r5,r4,r4
    9ff8:	294b883a 	add	r5,r5,r5
    9ffc:	2009d0ba 	srai	r4,r4,2
    a000:	294b883a 	add	r5,r5,r5
    a004:	298b883a 	add	r5,r5,r6
    a008:	2a000217 	ldw	r8,8(r5)
    a00c:	3908983a 	sll	r4,r7,r4
    a010:	81400315 	stw	r5,12(r16)
    a014:	82000215 	stw	r8,8(r16)
    a018:	2088b03a 	or	r4,r4,r2
    a01c:	2c000215 	stw	r16,8(r5)
    a020:	31000115 	stw	r4,4(r6)
    a024:	44000315 	stw	r16,12(r8)
    a028:	1805d0ba 	srai	r2,r3,2
    a02c:	01400044 	movi	r5,1
    a030:	288a983a 	sll	r5,r5,r2
    a034:	21404336 	bltu	r4,r5,a144 <_malloc_r+0x304>
    a038:	2144703a 	and	r2,r4,r5
    a03c:	10000a1e 	bne	r2,zero,a068 <_malloc_r+0x228>
    a040:	00bfff04 	movi	r2,-4
    a044:	294b883a 	add	r5,r5,r5
    a048:	1886703a 	and	r3,r3,r2
    a04c:	2144703a 	and	r2,r4,r5
    a050:	18c00104 	addi	r3,r3,4
    a054:	1000041e 	bne	r2,zero,a068 <_malloc_r+0x228>
    a058:	294b883a 	add	r5,r5,r5
    a05c:	2144703a 	and	r2,r4,r5
    a060:	18c00104 	addi	r3,r3,4
    a064:	103ffc26 	beq	r2,zero,a058 <__alt_mem_Flash_flash_data+0xf400a058>
    a068:	023fff04 	movi	r8,-4
    a06c:	01c003c4 	movi	r7,15
    a070:	18c5883a 	add	r2,r3,r3
    a074:	1085883a 	add	r2,r2,r2
    a078:	1085883a 	add	r2,r2,r2
    a07c:	9895883a 	add	r10,r19,r2
    a080:	52c00304 	addi	r11,r10,12
    a084:	1819883a 	mov	r12,r3
    a088:	5c000017 	ldw	r16,0(r11)
    a08c:	59bffd04 	addi	r6,r11,-12
    a090:	8180041e 	bne	r16,r6,a0a4 <_malloc_r+0x264>
    a094:	0000ce06 	br	a3d0 <_malloc_r+0x590>
    a098:	2000d70e 	bge	r4,zero,a3f8 <_malloc_r+0x5b8>
    a09c:	84000317 	ldw	r16,12(r16)
    a0a0:	8180cb26 	beq	r16,r6,a3d0 <_malloc_r+0x590>
    a0a4:	80800117 	ldw	r2,4(r16)
    a0a8:	1204703a 	and	r2,r2,r8
    a0ac:	1449c83a 	sub	r4,r2,r17
    a0b0:	393ff90e 	bge	r7,r4,a098 <__alt_mem_Flash_flash_data+0xf400a098>
    a0b4:	80800317 	ldw	r2,12(r16)
    a0b8:	80c00217 	ldw	r3,8(r16)
    a0bc:	89400054 	ori	r5,r17,1
    a0c0:	81400115 	stw	r5,4(r16)
    a0c4:	18800315 	stw	r2,12(r3)
    a0c8:	10c00215 	stw	r3,8(r2)
    a0cc:	8463883a 	add	r17,r16,r17
    a0d0:	9c400515 	stw	r17,20(r19)
    a0d4:	9c400415 	stw	r17,16(r19)
    a0d8:	20800054 	ori	r2,r4,1
    a0dc:	88800115 	stw	r2,4(r17)
    a0e0:	8a400315 	stw	r9,12(r17)
    a0e4:	8a400215 	stw	r9,8(r17)
    a0e8:	8923883a 	add	r17,r17,r4
    a0ec:	89000015 	stw	r4,0(r17)
    a0f0:	9009883a 	mov	r4,r18
    a0f4:	00130700 	call	13070 <__malloc_unlock>
    a0f8:	80800204 	addi	r2,r16,8
    a0fc:	003f7d06 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a100:	00800304 	movi	r2,12
    a104:	90800015 	stw	r2,0(r18)
    a108:	0005883a 	mov	r2,zero
    a10c:	003f7906 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a110:	01401f84 	movi	r5,126
    a114:	01c00fc4 	movi	r7,63
    a118:	003f8d06 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a11c:	81000317 	ldw	r4,12(r16)
    a120:	003f6a06 	br	9ecc <__alt_mem_Flash_flash_data+0xf4009ecc>
    a124:	81c5883a 	add	r2,r16,r7
    a128:	10c00117 	ldw	r3,4(r2)
    a12c:	9009883a 	mov	r4,r18
    a130:	18c00054 	ori	r3,r3,1
    a134:	10c00115 	stw	r3,4(r2)
    a138:	00130700 	call	13070 <__malloc_unlock>
    a13c:	80800204 	addi	r2,r16,8
    a140:	003f6c06 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a144:	9c000217 	ldw	r16,8(r19)
    a148:	00bfff04 	movi	r2,-4
    a14c:	85800117 	ldw	r22,4(r16)
    a150:	b0ac703a 	and	r22,r22,r2
    a154:	b4400336 	bltu	r22,r17,a164 <_malloc_r+0x324>
    a158:	b445c83a 	sub	r2,r22,r17
    a15c:	00c003c4 	movi	r3,15
    a160:	18805d16 	blt	r3,r2,a2d8 <_malloc_r+0x498>
    a164:	05c000b4 	movhi	r23,2
    a168:	008000b4 	movhi	r2,2
    a16c:	bdc7cf04 	addi	r23,r23,7996
    a170:	108fe704 	addi	r2,r2,16284
    a174:	15400017 	ldw	r21,0(r2)
    a178:	b9000017 	ldw	r4,0(r23)
    a17c:	00ffffc4 	movi	r3,-1
    a180:	858d883a 	add	r6,r16,r22
    a184:	8d6b883a 	add	r21,r17,r21
    a188:	20c0e426 	beq	r4,r3,a51c <_malloc_r+0x6dc>
    a18c:	ad4403c4 	addi	r21,r21,4111
    a190:	00fc0004 	movi	r3,-4096
    a194:	a8ea703a 	and	r21,r21,r3
    a198:	9009883a 	mov	r4,r18
    a19c:	a80b883a 	mov	r5,r21
    a1a0:	d9800015 	stw	r6,0(sp)
    a1a4:	000c0040 	call	c004 <_sbrk_r>
    a1a8:	00ffffc4 	movi	r3,-1
    a1ac:	1029883a 	mov	r20,r2
    a1b0:	d9800017 	ldw	r6,0(sp)
    a1b4:	10c0a426 	beq	r2,r3,a448 <_malloc_r+0x608>
    a1b8:	1180a236 	bltu	r2,r6,a444 <_malloc_r+0x604>
    a1bc:	070000b4 	movhi	fp,2
    a1c0:	e7100904 	addi	fp,fp,16420
    a1c4:	e0c00017 	ldw	r3,0(fp)
    a1c8:	a8c7883a 	add	r3,r21,r3
    a1cc:	e0c00015 	stw	r3,0(fp)
    a1d0:	3500da26 	beq	r6,r20,a53c <_malloc_r+0x6fc>
    a1d4:	b9000017 	ldw	r4,0(r23)
    a1d8:	00bfffc4 	movi	r2,-1
    a1dc:	2080e426 	beq	r4,r2,a570 <_malloc_r+0x730>
    a1e0:	a185c83a 	sub	r2,r20,r6
    a1e4:	1885883a 	add	r2,r3,r2
    a1e8:	e0800015 	stw	r2,0(fp)
    a1ec:	a0c001cc 	andi	r3,r20,7
    a1f0:	1800b526 	beq	r3,zero,a4c8 <_malloc_r+0x688>
    a1f4:	a0e9c83a 	sub	r20,r20,r3
    a1f8:	00840204 	movi	r2,4104
    a1fc:	a5000204 	addi	r20,r20,8
    a200:	10c7c83a 	sub	r3,r2,r3
    a204:	a545883a 	add	r2,r20,r21
    a208:	1083ffcc 	andi	r2,r2,4095
    a20c:	18abc83a 	sub	r21,r3,r2
    a210:	9009883a 	mov	r4,r18
    a214:	a80b883a 	mov	r5,r21
    a218:	000c0040 	call	c004 <_sbrk_r>
    a21c:	00ffffc4 	movi	r3,-1
    a220:	10c0d026 	beq	r2,r3,a564 <_malloc_r+0x724>
    a224:	1507c83a 	sub	r3,r2,r20
    a228:	a8c7883a 	add	r3,r21,r3
    a22c:	18c00054 	ori	r3,r3,1
    a230:	e0800017 	ldw	r2,0(fp)
    a234:	9d000215 	stw	r20,8(r19)
    a238:	a0c00115 	stw	r3,4(r20)
    a23c:	a887883a 	add	r3,r21,r2
    a240:	e0c00015 	stw	r3,0(fp)
    a244:	84c00e26 	beq	r16,r19,a280 <_malloc_r+0x440>
    a248:	018003c4 	movi	r6,15
    a24c:	3580a02e 	bgeu	r6,r22,a4d0 <_malloc_r+0x690>
    a250:	81400117 	ldw	r5,4(r16)
    a254:	013ffe04 	movi	r4,-8
    a258:	b0bffd04 	addi	r2,r22,-12
    a25c:	1104703a 	and	r2,r2,r4
    a260:	2900004c 	andi	r4,r5,1
    a264:	1108b03a 	or	r4,r2,r4
    a268:	81000115 	stw	r4,4(r16)
    a26c:	01400144 	movi	r5,5
    a270:	8089883a 	add	r4,r16,r2
    a274:	21400115 	stw	r5,4(r4)
    a278:	21400215 	stw	r5,8(r4)
    a27c:	3080c036 	bltu	r6,r2,a580 <_malloc_r+0x740>
    a280:	008000b4 	movhi	r2,2
    a284:	108fe604 	addi	r2,r2,16280
    a288:	11000017 	ldw	r4,0(r2)
    a28c:	20c0012e 	bgeu	r4,r3,a294 <_malloc_r+0x454>
    a290:	10c00015 	stw	r3,0(r2)
    a294:	008000b4 	movhi	r2,2
    a298:	108fe504 	addi	r2,r2,16276
    a29c:	11000017 	ldw	r4,0(r2)
    a2a0:	9c000217 	ldw	r16,8(r19)
    a2a4:	20c0012e 	bgeu	r4,r3,a2ac <_malloc_r+0x46c>
    a2a8:	10c00015 	stw	r3,0(r2)
    a2ac:	80c00117 	ldw	r3,4(r16)
    a2b0:	00bfff04 	movi	r2,-4
    a2b4:	1886703a 	and	r3,r3,r2
    a2b8:	1c45c83a 	sub	r2,r3,r17
    a2bc:	1c400236 	bltu	r3,r17,a2c8 <_malloc_r+0x488>
    a2c0:	00c003c4 	movi	r3,15
    a2c4:	18800416 	blt	r3,r2,a2d8 <_malloc_r+0x498>
    a2c8:	9009883a 	mov	r4,r18
    a2cc:	00130700 	call	13070 <__malloc_unlock>
    a2d0:	0005883a 	mov	r2,zero
    a2d4:	003f0706 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a2d8:	88c00054 	ori	r3,r17,1
    a2dc:	80c00115 	stw	r3,4(r16)
    a2e0:	8463883a 	add	r17,r16,r17
    a2e4:	10800054 	ori	r2,r2,1
    a2e8:	9c400215 	stw	r17,8(r19)
    a2ec:	88800115 	stw	r2,4(r17)
    a2f0:	9009883a 	mov	r4,r18
    a2f4:	00130700 	call	13070 <__malloc_unlock>
    a2f8:	80800204 	addi	r2,r16,8
    a2fc:	003efd06 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a300:	00800504 	movi	r2,20
    a304:	10c0482e 	bgeu	r2,r3,a428 <_malloc_r+0x5e8>
    a308:	00801504 	movi	r2,84
    a30c:	10c06836 	bltu	r2,r3,a4b0 <_malloc_r+0x670>
    a310:	8806d33a 	srli	r3,r17,12
    a314:	19c01b84 	addi	r7,r3,110
    a318:	39cb883a 	add	r5,r7,r7
    a31c:	003f0c06 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a320:	3804d27a 	srli	r2,r7,9
    a324:	01000104 	movi	r4,4
    a328:	2080422e 	bgeu	r4,r2,a434 <_malloc_r+0x5f4>
    a32c:	01000504 	movi	r4,20
    a330:	20807c36 	bltu	r4,r2,a524 <_malloc_r+0x6e4>
    a334:	110016c4 	addi	r4,r2,91
    a338:	210b883a 	add	r5,r4,r4
    a33c:	294b883a 	add	r5,r5,r5
    a340:	294b883a 	add	r5,r5,r5
    a344:	994b883a 	add	r5,r19,r5
    a348:	28800217 	ldw	r2,8(r5)
    a34c:	020000b4 	movhi	r8,2
    a350:	42015704 	addi	r8,r8,1372
    a354:	11406326 	beq	r2,r5,a4e4 <_malloc_r+0x6a4>
    a358:	01bfff04 	movi	r6,-4
    a35c:	11000117 	ldw	r4,4(r2)
    a360:	2188703a 	and	r4,r4,r6
    a364:	3900022e 	bgeu	r7,r4,a370 <_malloc_r+0x530>
    a368:	10800217 	ldw	r2,8(r2)
    a36c:	28bffb1e 	bne	r5,r2,a35c <__alt_mem_Flash_flash_data+0xf400a35c>
    a370:	11800317 	ldw	r6,12(r2)
    a374:	99000117 	ldw	r4,4(r19)
    a378:	81800315 	stw	r6,12(r16)
    a37c:	80800215 	stw	r2,8(r16)
    a380:	34000215 	stw	r16,8(r6)
    a384:	14000315 	stw	r16,12(r2)
    a388:	003f2706 	br	a028 <__alt_mem_Flash_flash_data+0xf400a028>
    a38c:	88c00054 	ori	r3,r17,1
    a390:	80c00115 	stw	r3,4(r16)
    a394:	8463883a 	add	r17,r16,r17
    a398:	34400515 	stw	r17,20(r6)
    a39c:	34400415 	stw	r17,16(r6)
    a3a0:	10c00054 	ori	r3,r2,1
    a3a4:	8a400315 	stw	r9,12(r17)
    a3a8:	8a400215 	stw	r9,8(r17)
    a3ac:	88c00115 	stw	r3,4(r17)
    a3b0:	88a3883a 	add	r17,r17,r2
    a3b4:	88800015 	stw	r2,0(r17)
    a3b8:	9009883a 	mov	r4,r18
    a3bc:	00130700 	call	13070 <__malloc_unlock>
    a3c0:	80800204 	addi	r2,r16,8
    a3c4:	003ecb06 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a3c8:	31000117 	ldw	r4,4(r6)
    a3cc:	003f1606 	br	a028 <__alt_mem_Flash_flash_data+0xf400a028>
    a3d0:	63000044 	addi	r12,r12,1
    a3d4:	608000cc 	andi	r2,r12,3
    a3d8:	5ac00204 	addi	r11,r11,8
    a3dc:	103f2a1e 	bne	r2,zero,a088 <__alt_mem_Flash_flash_data+0xf400a088>
    a3e0:	00002106 	br	a468 <_malloc_r+0x628>
    a3e4:	80800204 	addi	r2,r16,8
    a3e8:	84000517 	ldw	r16,20(r16)
    a3ec:	143eb31e 	bne	r2,r16,9ebc <__alt_mem_Flash_flash_data+0xf4009ebc>
    a3f0:	18c00084 	addi	r3,r3,2
    a3f4:	003eec06 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a3f8:	8085883a 	add	r2,r16,r2
    a3fc:	10c00117 	ldw	r3,4(r2)
    a400:	81000317 	ldw	r4,12(r16)
    a404:	81400217 	ldw	r5,8(r16)
    a408:	18c00054 	ori	r3,r3,1
    a40c:	10c00115 	stw	r3,4(r2)
    a410:	29000315 	stw	r4,12(r5)
    a414:	21400215 	stw	r5,8(r4)
    a418:	9009883a 	mov	r4,r18
    a41c:	00130700 	call	13070 <__malloc_unlock>
    a420:	80800204 	addi	r2,r16,8
    a424:	003eb306 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a428:	19c016c4 	addi	r7,r3,91
    a42c:	39cb883a 	add	r5,r7,r7
    a430:	003ec706 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a434:	3804d1ba 	srli	r2,r7,6
    a438:	11000e04 	addi	r4,r2,56
    a43c:	210b883a 	add	r5,r4,r4
    a440:	003fbe06 	br	a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a444:	84ff5d26 	beq	r16,r19,a1bc <__alt_mem_Flash_flash_data+0xf400a1bc>
    a448:	9c000217 	ldw	r16,8(r19)
    a44c:	00bfff04 	movi	r2,-4
    a450:	80c00117 	ldw	r3,4(r16)
    a454:	1886703a 	and	r3,r3,r2
    a458:	003f9706 	br	a2b8 <__alt_mem_Flash_flash_data+0xf400a2b8>
    a45c:	52800017 	ldw	r10,0(r10)
    a460:	18ffffc4 	addi	r3,r3,-1
    a464:	50805c1e 	bne	r10,r2,a5d8 <_malloc_r+0x798>
    a468:	190000cc 	andi	r4,r3,3
    a46c:	50bffe04 	addi	r2,r10,-8
    a470:	203ffa1e 	bne	r4,zero,a45c <__alt_mem_Flash_flash_data+0xf400a45c>
    a474:	98800117 	ldw	r2,4(r19)
    a478:	0146303a 	nor	r3,zero,r5
    a47c:	1884703a 	and	r2,r3,r2
    a480:	98800115 	stw	r2,4(r19)
    a484:	294b883a 	add	r5,r5,r5
    a488:	117f2e36 	bltu	r2,r5,a144 <__alt_mem_Flash_flash_data+0xf400a144>
    a48c:	283f2d26 	beq	r5,zero,a144 <__alt_mem_Flash_flash_data+0xf400a144>
    a490:	1146703a 	and	r3,r2,r5
    a494:	1800521e 	bne	r3,zero,a5e0 <_malloc_r+0x7a0>
    a498:	6007883a 	mov	r3,r12
    a49c:	294b883a 	add	r5,r5,r5
    a4a0:	1148703a 	and	r4,r2,r5
    a4a4:	18c00104 	addi	r3,r3,4
    a4a8:	203ffc26 	beq	r4,zero,a49c <__alt_mem_Flash_flash_data+0xf400a49c>
    a4ac:	003ef006 	br	a070 <__alt_mem_Flash_flash_data+0xf400a070>
    a4b0:	00805504 	movi	r2,340
    a4b4:	10c01336 	bltu	r2,r3,a504 <_malloc_r+0x6c4>
    a4b8:	8806d3fa 	srli	r3,r17,15
    a4bc:	19c01dc4 	addi	r7,r3,119
    a4c0:	39cb883a 	add	r5,r7,r7
    a4c4:	003ea206 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a4c8:	00c40004 	movi	r3,4096
    a4cc:	003f4d06 	br	a204 <__alt_mem_Flash_flash_data+0xf400a204>
    a4d0:	00800044 	movi	r2,1
    a4d4:	a0800115 	stw	r2,4(r20)
    a4d8:	a021883a 	mov	r16,r20
    a4dc:	0007883a 	mov	r3,zero
    a4e0:	003f7506 	br	a2b8 <__alt_mem_Flash_flash_data+0xf400a2b8>
    a4e4:	200bd0ba 	srai	r5,r4,2
    a4e8:	01800044 	movi	r6,1
    a4ec:	41000117 	ldw	r4,4(r8)
    a4f0:	314a983a 	sll	r5,r6,r5
    a4f4:	100d883a 	mov	r6,r2
    a4f8:	2908b03a 	or	r4,r5,r4
    a4fc:	41000115 	stw	r4,4(r8)
    a500:	003f9d06 	br	a378 <__alt_mem_Flash_flash_data+0xf400a378>
    a504:	00815504 	movi	r2,1364
    a508:	10c01336 	bltu	r2,r3,a558 <_malloc_r+0x718>
    a50c:	8806d4ba 	srli	r3,r17,18
    a510:	19c01f04 	addi	r7,r3,124
    a514:	39cb883a 	add	r5,r7,r7
    a518:	003e8d06 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a51c:	ad400404 	addi	r21,r21,16
    a520:	003f1d06 	br	a198 <__alt_mem_Flash_flash_data+0xf400a198>
    a524:	01001504 	movi	r4,84
    a528:	20801c36 	bltu	r4,r2,a59c <_malloc_r+0x75c>
    a52c:	3804d33a 	srli	r2,r7,12
    a530:	11001b84 	addi	r4,r2,110
    a534:	210b883a 	add	r5,r4,r4
    a538:	003f8006 	br	a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a53c:	3083ffcc 	andi	r2,r6,4095
    a540:	103f241e 	bne	r2,zero,a1d4 <__alt_mem_Flash_flash_data+0xf400a1d4>
    a544:	99000217 	ldw	r4,8(r19)
    a548:	ad85883a 	add	r2,r21,r22
    a54c:	10800054 	ori	r2,r2,1
    a550:	20800115 	stw	r2,4(r4)
    a554:	003f4a06 	br	a280 <__alt_mem_Flash_flash_data+0xf400a280>
    a558:	01403f04 	movi	r5,252
    a55c:	01c01f84 	movi	r7,126
    a560:	003e7b06 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a564:	00c00044 	movi	r3,1
    a568:	002b883a 	mov	r21,zero
    a56c:	003f3006 	br	a230 <__alt_mem_Flash_flash_data+0xf400a230>
    a570:	008000b4 	movhi	r2,2
    a574:	1087cf04 	addi	r2,r2,7996
    a578:	15000015 	stw	r20,0(r2)
    a57c:	003f1b06 	br	a1ec <__alt_mem_Flash_flash_data+0xf400a1ec>
    a580:	9009883a 	mov	r4,r18
    a584:	81400204 	addi	r5,r16,8
    a588:	00092700 	call	9270 <_free_r>
    a58c:	008000b4 	movhi	r2,2
    a590:	10900904 	addi	r2,r2,16420
    a594:	10c00017 	ldw	r3,0(r2)
    a598:	003f3906 	br	a280 <__alt_mem_Flash_flash_data+0xf400a280>
    a59c:	01005504 	movi	r4,340
    a5a0:	20800436 	bltu	r4,r2,a5b4 <_malloc_r+0x774>
    a5a4:	3804d3fa 	srli	r2,r7,15
    a5a8:	11001dc4 	addi	r4,r2,119
    a5ac:	210b883a 	add	r5,r4,r4
    a5b0:	003f6206 	br	a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a5b4:	01015504 	movi	r4,1364
    a5b8:	20800436 	bltu	r4,r2,a5cc <_malloc_r+0x78c>
    a5bc:	3804d4ba 	srli	r2,r7,18
    a5c0:	11001f04 	addi	r4,r2,124
    a5c4:	210b883a 	add	r5,r4,r4
    a5c8:	003f5c06 	br	a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a5cc:	01403f04 	movi	r5,252
    a5d0:	01001f84 	movi	r4,126
    a5d4:	003f5906 	br	a33c <__alt_mem_Flash_flash_data+0xf400a33c>
    a5d8:	98800117 	ldw	r2,4(r19)
    a5dc:	003fa906 	br	a484 <__alt_mem_Flash_flash_data+0xf400a484>
    a5e0:	6007883a 	mov	r3,r12
    a5e4:	003ea206 	br	a070 <__alt_mem_Flash_flash_data+0xf400a070>

0000a5e8 <memchr>:
    a5e8:	208000cc 	andi	r2,r4,3
    a5ec:	280f883a 	mov	r7,r5
    a5f0:	10003526 	beq	r2,zero,a6c8 <memchr+0xe0>
    a5f4:	30bfffc4 	addi	r2,r6,-1
    a5f8:	30001b26 	beq	r6,zero,a668 <memchr+0x80>
    a5fc:	21800003 	ldbu	r6,0(r4)
    a600:	28c03fcc 	andi	r3,r5,255
    a604:	30c01a26 	beq	r6,r3,a670 <memchr+0x88>
    a608:	180d883a 	mov	r6,r3
    a60c:	00000406 	br	a620 <memchr+0x38>
    a610:	10001526 	beq	r2,zero,a668 <memchr+0x80>
    a614:	20c00003 	ldbu	r3,0(r4)
    a618:	10bfffc4 	addi	r2,r2,-1
    a61c:	19801426 	beq	r3,r6,a670 <memchr+0x88>
    a620:	21000044 	addi	r4,r4,1
    a624:	20c000cc 	andi	r3,r4,3
    a628:	183ff91e 	bne	r3,zero,a610 <__alt_mem_Flash_flash_data+0xf400a610>
    a62c:	024000c4 	movi	r9,3
    a630:	48801136 	bltu	r9,r2,a678 <memchr+0x90>
    a634:	10000c26 	beq	r2,zero,a668 <memchr+0x80>
    a638:	20c00003 	ldbu	r3,0(r4)
    a63c:	29403fcc 	andi	r5,r5,255
    a640:	19400b26 	beq	r3,r5,a670 <memchr+0x88>
    a644:	20c00044 	addi	r3,r4,1
    a648:	2085883a 	add	r2,r4,r2
    a64c:	39803fcc 	andi	r6,r7,255
    a650:	00000306 	br	a660 <memchr+0x78>
    a654:	18c00044 	addi	r3,r3,1
    a658:	197fffc3 	ldbu	r5,-1(r3)
    a65c:	29800426 	beq	r5,r6,a670 <memchr+0x88>
    a660:	1809883a 	mov	r4,r3
    a664:	18bffb1e 	bne	r3,r2,a654 <__alt_mem_Flash_flash_data+0xf400a654>
    a668:	0005883a 	mov	r2,zero
    a66c:	f800283a 	ret
    a670:	2005883a 	mov	r2,r4
    a674:	f800283a 	ret
    a678:	28c03fcc 	andi	r3,r5,255
    a67c:	1810923a 	slli	r8,r3,8
    a680:	02ffbff4 	movhi	r11,65279
    a684:	02a02074 	movhi	r10,32897
    a688:	40c6b03a 	or	r3,r8,r3
    a68c:	1810943a 	slli	r8,r3,16
    a690:	5affbfc4 	addi	r11,r11,-257
    a694:	52a02004 	addi	r10,r10,-32640
    a698:	40d0b03a 	or	r8,r8,r3
    a69c:	20c00017 	ldw	r3,0(r4)
    a6a0:	40c6f03a 	xor	r3,r8,r3
    a6a4:	1acd883a 	add	r6,r3,r11
    a6a8:	00c6303a 	nor	r3,zero,r3
    a6ac:	30c6703a 	and	r3,r6,r3
    a6b0:	1a86703a 	and	r3,r3,r10
    a6b4:	183fdf1e 	bne	r3,zero,a634 <__alt_mem_Flash_flash_data+0xf400a634>
    a6b8:	10bfff04 	addi	r2,r2,-4
    a6bc:	21000104 	addi	r4,r4,4
    a6c0:	48bff636 	bltu	r9,r2,a69c <__alt_mem_Flash_flash_data+0xf400a69c>
    a6c4:	003fdb06 	br	a634 <__alt_mem_Flash_flash_data+0xf400a634>
    a6c8:	3005883a 	mov	r2,r6
    a6cc:	003fd706 	br	a62c <__alt_mem_Flash_flash_data+0xf400a62c>

0000a6d0 <memcpy>:
    a6d0:	deffff04 	addi	sp,sp,-4
    a6d4:	dc000015 	stw	r16,0(sp)
    a6d8:	00c003c4 	movi	r3,15
    a6dc:	2005883a 	mov	r2,r4
    a6e0:	1980432e 	bgeu	r3,r6,a7f0 <memcpy+0x120>
    a6e4:	2146b03a 	or	r3,r4,r5
    a6e8:	18c000cc 	andi	r3,r3,3
    a6ec:	1800421e 	bne	r3,zero,a7f8 <memcpy+0x128>
    a6f0:	343ffc04 	addi	r16,r6,-16
    a6f4:	8020d13a 	srli	r16,r16,4
    a6f8:	28c00104 	addi	r3,r5,4
    a6fc:	23400104 	addi	r13,r4,4
    a700:	801e913a 	slli	r15,r16,4
    a704:	2b000204 	addi	r12,r5,8
    a708:	22c00204 	addi	r11,r4,8
    a70c:	7bc00504 	addi	r15,r15,20
    a710:	2a800304 	addi	r10,r5,12
    a714:	22400304 	addi	r9,r4,12
    a718:	2bdf883a 	add	r15,r5,r15
    a71c:	2811883a 	mov	r8,r5
    a720:	200f883a 	mov	r7,r4
    a724:	41000017 	ldw	r4,0(r8)
    a728:	39c00404 	addi	r7,r7,16
    a72c:	18c00404 	addi	r3,r3,16
    a730:	393ffc15 	stw	r4,-16(r7)
    a734:	1bbffc17 	ldw	r14,-16(r3)
    a738:	6b400404 	addi	r13,r13,16
    a73c:	5ac00404 	addi	r11,r11,16
    a740:	6bbffc15 	stw	r14,-16(r13)
    a744:	63800017 	ldw	r14,0(r12)
    a748:	4a400404 	addi	r9,r9,16
    a74c:	42000404 	addi	r8,r8,16
    a750:	5bbffc15 	stw	r14,-16(r11)
    a754:	53800017 	ldw	r14,0(r10)
    a758:	63000404 	addi	r12,r12,16
    a75c:	52800404 	addi	r10,r10,16
    a760:	4bbffc15 	stw	r14,-16(r9)
    a764:	1bffef1e 	bne	r3,r15,a724 <__alt_mem_Flash_flash_data+0xf400a724>
    a768:	81c00044 	addi	r7,r16,1
    a76c:	380e913a 	slli	r7,r7,4
    a770:	310003cc 	andi	r4,r6,15
    a774:	02c000c4 	movi	r11,3
    a778:	11c7883a 	add	r3,r2,r7
    a77c:	29cb883a 	add	r5,r5,r7
    a780:	59001f2e 	bgeu	r11,r4,a800 <memcpy+0x130>
    a784:	1813883a 	mov	r9,r3
    a788:	2811883a 	mov	r8,r5
    a78c:	200f883a 	mov	r7,r4
    a790:	42800017 	ldw	r10,0(r8)
    a794:	4a400104 	addi	r9,r9,4
    a798:	39ffff04 	addi	r7,r7,-4
    a79c:	4abfff15 	stw	r10,-4(r9)
    a7a0:	42000104 	addi	r8,r8,4
    a7a4:	59fffa36 	bltu	r11,r7,a790 <__alt_mem_Flash_flash_data+0xf400a790>
    a7a8:	213fff04 	addi	r4,r4,-4
    a7ac:	2008d0ba 	srli	r4,r4,2
    a7b0:	318000cc 	andi	r6,r6,3
    a7b4:	21000044 	addi	r4,r4,1
    a7b8:	2109883a 	add	r4,r4,r4
    a7bc:	2109883a 	add	r4,r4,r4
    a7c0:	1907883a 	add	r3,r3,r4
    a7c4:	290b883a 	add	r5,r5,r4
    a7c8:	30000626 	beq	r6,zero,a7e4 <memcpy+0x114>
    a7cc:	198d883a 	add	r6,r3,r6
    a7d0:	29c00003 	ldbu	r7,0(r5)
    a7d4:	18c00044 	addi	r3,r3,1
    a7d8:	29400044 	addi	r5,r5,1
    a7dc:	19ffffc5 	stb	r7,-1(r3)
    a7e0:	19bffb1e 	bne	r3,r6,a7d0 <__alt_mem_Flash_flash_data+0xf400a7d0>
    a7e4:	dc000017 	ldw	r16,0(sp)
    a7e8:	dec00104 	addi	sp,sp,4
    a7ec:	f800283a 	ret
    a7f0:	2007883a 	mov	r3,r4
    a7f4:	003ff406 	br	a7c8 <__alt_mem_Flash_flash_data+0xf400a7c8>
    a7f8:	2007883a 	mov	r3,r4
    a7fc:	003ff306 	br	a7cc <__alt_mem_Flash_flash_data+0xf400a7cc>
    a800:	200d883a 	mov	r6,r4
    a804:	003ff006 	br	a7c8 <__alt_mem_Flash_flash_data+0xf400a7c8>

0000a808 <memmove>:
    a808:	2005883a 	mov	r2,r4
    a80c:	29000b2e 	bgeu	r5,r4,a83c <memmove+0x34>
    a810:	298f883a 	add	r7,r5,r6
    a814:	21c0092e 	bgeu	r4,r7,a83c <memmove+0x34>
    a818:	2187883a 	add	r3,r4,r6
    a81c:	198bc83a 	sub	r5,r3,r6
    a820:	30004b26 	beq	r6,zero,a950 <memmove+0x148>
    a824:	39ffffc4 	addi	r7,r7,-1
    a828:	39000003 	ldbu	r4,0(r7)
    a82c:	18ffffc4 	addi	r3,r3,-1
    a830:	19000005 	stb	r4,0(r3)
    a834:	197ffb1e 	bne	r3,r5,a824 <__alt_mem_Flash_flash_data+0xf400a824>
    a838:	f800283a 	ret
    a83c:	00c003c4 	movi	r3,15
    a840:	1980412e 	bgeu	r3,r6,a948 <memmove+0x140>
    a844:	1146b03a 	or	r3,r2,r5
    a848:	18c000cc 	andi	r3,r3,3
    a84c:	1800411e 	bne	r3,zero,a954 <memmove+0x14c>
    a850:	33fffc04 	addi	r15,r6,-16
    a854:	781ed13a 	srli	r15,r15,4
    a858:	28c00104 	addi	r3,r5,4
    a85c:	13400104 	addi	r13,r2,4
    a860:	781c913a 	slli	r14,r15,4
    a864:	2b000204 	addi	r12,r5,8
    a868:	12c00204 	addi	r11,r2,8
    a86c:	73800504 	addi	r14,r14,20
    a870:	2a800304 	addi	r10,r5,12
    a874:	12400304 	addi	r9,r2,12
    a878:	2b9d883a 	add	r14,r5,r14
    a87c:	2811883a 	mov	r8,r5
    a880:	100f883a 	mov	r7,r2
    a884:	41000017 	ldw	r4,0(r8)
    a888:	39c00404 	addi	r7,r7,16
    a88c:	18c00404 	addi	r3,r3,16
    a890:	393ffc15 	stw	r4,-16(r7)
    a894:	193ffc17 	ldw	r4,-16(r3)
    a898:	6b400404 	addi	r13,r13,16
    a89c:	5ac00404 	addi	r11,r11,16
    a8a0:	693ffc15 	stw	r4,-16(r13)
    a8a4:	61000017 	ldw	r4,0(r12)
    a8a8:	4a400404 	addi	r9,r9,16
    a8ac:	42000404 	addi	r8,r8,16
    a8b0:	593ffc15 	stw	r4,-16(r11)
    a8b4:	51000017 	ldw	r4,0(r10)
    a8b8:	63000404 	addi	r12,r12,16
    a8bc:	52800404 	addi	r10,r10,16
    a8c0:	493ffc15 	stw	r4,-16(r9)
    a8c4:	1bbfef1e 	bne	r3,r14,a884 <__alt_mem_Flash_flash_data+0xf400a884>
    a8c8:	79000044 	addi	r4,r15,1
    a8cc:	2008913a 	slli	r4,r4,4
    a8d0:	328003cc 	andi	r10,r6,15
    a8d4:	02c000c4 	movi	r11,3
    a8d8:	1107883a 	add	r3,r2,r4
    a8dc:	290b883a 	add	r5,r5,r4
    a8e0:	5a801e2e 	bgeu	r11,r10,a95c <memmove+0x154>
    a8e4:	1813883a 	mov	r9,r3
    a8e8:	2811883a 	mov	r8,r5
    a8ec:	500f883a 	mov	r7,r10
    a8f0:	41000017 	ldw	r4,0(r8)
    a8f4:	4a400104 	addi	r9,r9,4
    a8f8:	39ffff04 	addi	r7,r7,-4
    a8fc:	493fff15 	stw	r4,-4(r9)
    a900:	42000104 	addi	r8,r8,4
    a904:	59fffa36 	bltu	r11,r7,a8f0 <__alt_mem_Flash_flash_data+0xf400a8f0>
    a908:	513fff04 	addi	r4,r10,-4
    a90c:	2008d0ba 	srli	r4,r4,2
    a910:	318000cc 	andi	r6,r6,3
    a914:	21000044 	addi	r4,r4,1
    a918:	2109883a 	add	r4,r4,r4
    a91c:	2109883a 	add	r4,r4,r4
    a920:	1907883a 	add	r3,r3,r4
    a924:	290b883a 	add	r5,r5,r4
    a928:	30000926 	beq	r6,zero,a950 <memmove+0x148>
    a92c:	198d883a 	add	r6,r3,r6
    a930:	29c00003 	ldbu	r7,0(r5)
    a934:	18c00044 	addi	r3,r3,1
    a938:	29400044 	addi	r5,r5,1
    a93c:	19ffffc5 	stb	r7,-1(r3)
    a940:	19bffb1e 	bne	r3,r6,a930 <__alt_mem_Flash_flash_data+0xf400a930>
    a944:	f800283a 	ret
    a948:	1007883a 	mov	r3,r2
    a94c:	003ff606 	br	a928 <__alt_mem_Flash_flash_data+0xf400a928>
    a950:	f800283a 	ret
    a954:	1007883a 	mov	r3,r2
    a958:	003ff406 	br	a92c <__alt_mem_Flash_flash_data+0xf400a92c>
    a95c:	500d883a 	mov	r6,r10
    a960:	003ff106 	br	a928 <__alt_mem_Flash_flash_data+0xf400a928>

0000a964 <memset>:
    a964:	20c000cc 	andi	r3,r4,3
    a968:	2005883a 	mov	r2,r4
    a96c:	18004326 	beq	r3,zero,aa7c <memset+0x118>
    a970:	31ffffc4 	addi	r7,r6,-1
    a974:	30004026 	beq	r6,zero,aa78 <memset+0x114>
    a978:	2813883a 	mov	r9,r5
    a97c:	200d883a 	mov	r6,r4
    a980:	2007883a 	mov	r3,r4
    a984:	00000406 	br	a998 <memset+0x34>
    a988:	3a3fffc4 	addi	r8,r7,-1
    a98c:	31800044 	addi	r6,r6,1
    a990:	38003926 	beq	r7,zero,aa78 <memset+0x114>
    a994:	400f883a 	mov	r7,r8
    a998:	18c00044 	addi	r3,r3,1
    a99c:	32400005 	stb	r9,0(r6)
    a9a0:	1a0000cc 	andi	r8,r3,3
    a9a4:	403ff81e 	bne	r8,zero,a988 <__alt_mem_Flash_flash_data+0xf400a988>
    a9a8:	010000c4 	movi	r4,3
    a9ac:	21c02d2e 	bgeu	r4,r7,aa64 <memset+0x100>
    a9b0:	29803fcc 	andi	r6,r5,255
    a9b4:	3008923a 	slli	r4,r6,8
    a9b8:	218cb03a 	or	r6,r4,r6
    a9bc:	3008943a 	slli	r4,r6,16
    a9c0:	218cb03a 	or	r6,r4,r6
    a9c4:	010003c4 	movi	r4,15
    a9c8:	21c0182e 	bgeu	r4,r7,aa2c <memset+0xc8>
    a9cc:	3b3ffc04 	addi	r12,r7,-16
    a9d0:	6018d13a 	srli	r12,r12,4
    a9d4:	1a000104 	addi	r8,r3,4
    a9d8:	1ac00204 	addi	r11,r3,8
    a9dc:	6008913a 	slli	r4,r12,4
    a9e0:	1a800304 	addi	r10,r3,12
    a9e4:	1813883a 	mov	r9,r3
    a9e8:	21000504 	addi	r4,r4,20
    a9ec:	1909883a 	add	r4,r3,r4
    a9f0:	49800015 	stw	r6,0(r9)
    a9f4:	41800015 	stw	r6,0(r8)
    a9f8:	59800015 	stw	r6,0(r11)
    a9fc:	51800015 	stw	r6,0(r10)
    aa00:	42000404 	addi	r8,r8,16
    aa04:	4a400404 	addi	r9,r9,16
    aa08:	5ac00404 	addi	r11,r11,16
    aa0c:	52800404 	addi	r10,r10,16
    aa10:	413ff71e 	bne	r8,r4,a9f0 <__alt_mem_Flash_flash_data+0xf400a9f0>
    aa14:	63000044 	addi	r12,r12,1
    aa18:	6018913a 	slli	r12,r12,4
    aa1c:	39c003cc 	andi	r7,r7,15
    aa20:	010000c4 	movi	r4,3
    aa24:	1b07883a 	add	r3,r3,r12
    aa28:	21c00e2e 	bgeu	r4,r7,aa64 <memset+0x100>
    aa2c:	1813883a 	mov	r9,r3
    aa30:	3811883a 	mov	r8,r7
    aa34:	010000c4 	movi	r4,3
    aa38:	49800015 	stw	r6,0(r9)
    aa3c:	423fff04 	addi	r8,r8,-4
    aa40:	4a400104 	addi	r9,r9,4
    aa44:	223ffc36 	bltu	r4,r8,aa38 <__alt_mem_Flash_flash_data+0xf400aa38>
    aa48:	393fff04 	addi	r4,r7,-4
    aa4c:	2008d0ba 	srli	r4,r4,2
    aa50:	39c000cc 	andi	r7,r7,3
    aa54:	21000044 	addi	r4,r4,1
    aa58:	2109883a 	add	r4,r4,r4
    aa5c:	2109883a 	add	r4,r4,r4
    aa60:	1907883a 	add	r3,r3,r4
    aa64:	38000426 	beq	r7,zero,aa78 <memset+0x114>
    aa68:	19cf883a 	add	r7,r3,r7
    aa6c:	19400005 	stb	r5,0(r3)
    aa70:	18c00044 	addi	r3,r3,1
    aa74:	19fffd1e 	bne	r3,r7,aa6c <__alt_mem_Flash_flash_data+0xf400aa6c>
    aa78:	f800283a 	ret
    aa7c:	2007883a 	mov	r3,r4
    aa80:	300f883a 	mov	r7,r6
    aa84:	003fc806 	br	a9a8 <__alt_mem_Flash_flash_data+0xf400a9a8>

0000aa88 <_Balloc>:
    aa88:	20801317 	ldw	r2,76(r4)
    aa8c:	defffc04 	addi	sp,sp,-16
    aa90:	dc400115 	stw	r17,4(sp)
    aa94:	dc000015 	stw	r16,0(sp)
    aa98:	dfc00315 	stw	ra,12(sp)
    aa9c:	dc800215 	stw	r18,8(sp)
    aaa0:	2023883a 	mov	r17,r4
    aaa4:	2821883a 	mov	r16,r5
    aaa8:	10000f26 	beq	r2,zero,aae8 <_Balloc+0x60>
    aaac:	8407883a 	add	r3,r16,r16
    aab0:	18c7883a 	add	r3,r3,r3
    aab4:	10c7883a 	add	r3,r2,r3
    aab8:	18800017 	ldw	r2,0(r3)
    aabc:	10001126 	beq	r2,zero,ab04 <_Balloc+0x7c>
    aac0:	11000017 	ldw	r4,0(r2)
    aac4:	19000015 	stw	r4,0(r3)
    aac8:	10000415 	stw	zero,16(r2)
    aacc:	10000315 	stw	zero,12(r2)
    aad0:	dfc00317 	ldw	ra,12(sp)
    aad4:	dc800217 	ldw	r18,8(sp)
    aad8:	dc400117 	ldw	r17,4(sp)
    aadc:	dc000017 	ldw	r16,0(sp)
    aae0:	dec00404 	addi	sp,sp,16
    aae4:	f800283a 	ret
    aae8:	01400104 	movi	r5,4
    aaec:	01800844 	movi	r6,33
    aaf0:	000e9b00 	call	e9b0 <_calloc_r>
    aaf4:	88801315 	stw	r2,76(r17)
    aaf8:	103fec1e 	bne	r2,zero,aaac <__alt_mem_Flash_flash_data+0xf400aaac>
    aafc:	0005883a 	mov	r2,zero
    ab00:	003ff306 	br	aad0 <__alt_mem_Flash_flash_data+0xf400aad0>
    ab04:	01400044 	movi	r5,1
    ab08:	2c24983a 	sll	r18,r5,r16
    ab0c:	8809883a 	mov	r4,r17
    ab10:	91800144 	addi	r6,r18,5
    ab14:	318d883a 	add	r6,r6,r6
    ab18:	318d883a 	add	r6,r6,r6
    ab1c:	000e9b00 	call	e9b0 <_calloc_r>
    ab20:	103ff626 	beq	r2,zero,aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ab24:	14000115 	stw	r16,4(r2)
    ab28:	14800215 	stw	r18,8(r2)
    ab2c:	003fe606 	br	aac8 <__alt_mem_Flash_flash_data+0xf400aac8>

0000ab30 <_Bfree>:
    ab30:	28000826 	beq	r5,zero,ab54 <_Bfree+0x24>
    ab34:	28c00117 	ldw	r3,4(r5)
    ab38:	20801317 	ldw	r2,76(r4)
    ab3c:	18c7883a 	add	r3,r3,r3
    ab40:	18c7883a 	add	r3,r3,r3
    ab44:	10c5883a 	add	r2,r2,r3
    ab48:	10c00017 	ldw	r3,0(r2)
    ab4c:	28c00015 	stw	r3,0(r5)
    ab50:	11400015 	stw	r5,0(r2)
    ab54:	f800283a 	ret

0000ab58 <__multadd>:
    ab58:	defffa04 	addi	sp,sp,-24
    ab5c:	dc000115 	stw	r16,4(sp)
    ab60:	2c000417 	ldw	r16,16(r5)
    ab64:	dc800315 	stw	r18,12(sp)
    ab68:	dc400215 	stw	r17,8(sp)
    ab6c:	dfc00515 	stw	ra,20(sp)
    ab70:	dcc00415 	stw	r19,16(sp)
    ab74:	2823883a 	mov	r17,r5
    ab78:	2025883a 	mov	r18,r4
    ab7c:	2a400504 	addi	r9,r5,20
    ab80:	0015883a 	mov	r10,zero
    ab84:	4a000017 	ldw	r8,0(r9)
    ab88:	4a400104 	addi	r9,r9,4
    ab8c:	52800044 	addi	r10,r10,1
    ab90:	40ffffcc 	andi	r3,r8,65535
    ab94:	1987383a 	mul	r3,r3,r6
    ab98:	4010d43a 	srli	r8,r8,16
    ab9c:	19cf883a 	add	r7,r3,r7
    aba0:	4191383a 	mul	r8,r8,r6
    aba4:	3816d43a 	srli	r11,r7,16
    aba8:	38ffffcc 	andi	r3,r7,65535
    abac:	5a0f883a 	add	r7,r11,r8
    abb0:	3810943a 	slli	r8,r7,16
    abb4:	380ed43a 	srli	r7,r7,16
    abb8:	40c7883a 	add	r3,r8,r3
    abbc:	48ffff15 	stw	r3,-4(r9)
    abc0:	543ff016 	blt	r10,r16,ab84 <__alt_mem_Flash_flash_data+0xf400ab84>
    abc4:	38000926 	beq	r7,zero,abec <__multadd+0x94>
    abc8:	88800217 	ldw	r2,8(r17)
    abcc:	80800f0e 	bge	r16,r2,ac0c <__multadd+0xb4>
    abd0:	80800144 	addi	r2,r16,5
    abd4:	1085883a 	add	r2,r2,r2
    abd8:	1085883a 	add	r2,r2,r2
    abdc:	8885883a 	add	r2,r17,r2
    abe0:	11c00015 	stw	r7,0(r2)
    abe4:	84000044 	addi	r16,r16,1
    abe8:	8c000415 	stw	r16,16(r17)
    abec:	8805883a 	mov	r2,r17
    abf0:	dfc00517 	ldw	ra,20(sp)
    abf4:	dcc00417 	ldw	r19,16(sp)
    abf8:	dc800317 	ldw	r18,12(sp)
    abfc:	dc400217 	ldw	r17,8(sp)
    ac00:	dc000117 	ldw	r16,4(sp)
    ac04:	dec00604 	addi	sp,sp,24
    ac08:	f800283a 	ret
    ac0c:	89400117 	ldw	r5,4(r17)
    ac10:	9009883a 	mov	r4,r18
    ac14:	d9c00015 	stw	r7,0(sp)
    ac18:	29400044 	addi	r5,r5,1
    ac1c:	000aa880 	call	aa88 <_Balloc>
    ac20:	89800417 	ldw	r6,16(r17)
    ac24:	11000304 	addi	r4,r2,12
    ac28:	89400304 	addi	r5,r17,12
    ac2c:	31800084 	addi	r6,r6,2
    ac30:	318d883a 	add	r6,r6,r6
    ac34:	318d883a 	add	r6,r6,r6
    ac38:	1027883a 	mov	r19,r2
    ac3c:	000a6d00 	call	a6d0 <memcpy>
    ac40:	d9c00017 	ldw	r7,0(sp)
    ac44:	88000a26 	beq	r17,zero,ac70 <__multadd+0x118>
    ac48:	89000117 	ldw	r4,4(r17)
    ac4c:	90c01317 	ldw	r3,76(r18)
    ac50:	2109883a 	add	r4,r4,r4
    ac54:	2109883a 	add	r4,r4,r4
    ac58:	1907883a 	add	r3,r3,r4
    ac5c:	18800017 	ldw	r2,0(r3)
    ac60:	88800015 	stw	r2,0(r17)
    ac64:	1c400015 	stw	r17,0(r3)
    ac68:	9823883a 	mov	r17,r19
    ac6c:	003fd806 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    ac70:	9823883a 	mov	r17,r19
    ac74:	003fd606 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>

0000ac78 <__s2b>:
    ac78:	defff904 	addi	sp,sp,-28
    ac7c:	dc400115 	stw	r17,4(sp)
    ac80:	dc000015 	stw	r16,0(sp)
    ac84:	2023883a 	mov	r17,r4
    ac88:	2821883a 	mov	r16,r5
    ac8c:	39000204 	addi	r4,r7,8
    ac90:	01400244 	movi	r5,9
    ac94:	dcc00315 	stw	r19,12(sp)
    ac98:	dc800215 	stw	r18,8(sp)
    ac9c:	dfc00615 	stw	ra,24(sp)
    aca0:	dd400515 	stw	r21,20(sp)
    aca4:	dd000415 	stw	r20,16(sp)
    aca8:	3825883a 	mov	r18,r7
    acac:	3027883a 	mov	r19,r6
    acb0:	000fdb40 	call	fdb4 <__divsi3>
    acb4:	00c00044 	movi	r3,1
    acb8:	000b883a 	mov	r5,zero
    acbc:	1880030e 	bge	r3,r2,accc <__s2b+0x54>
    acc0:	18c7883a 	add	r3,r3,r3
    acc4:	29400044 	addi	r5,r5,1
    acc8:	18bffd16 	blt	r3,r2,acc0 <__alt_mem_Flash_flash_data+0xf400acc0>
    accc:	8809883a 	mov	r4,r17
    acd0:	000aa880 	call	aa88 <_Balloc>
    acd4:	d8c00717 	ldw	r3,28(sp)
    acd8:	10c00515 	stw	r3,20(r2)
    acdc:	00c00044 	movi	r3,1
    ace0:	10c00415 	stw	r3,16(r2)
    ace4:	00c00244 	movi	r3,9
    ace8:	1cc0210e 	bge	r3,r19,ad70 <__s2b+0xf8>
    acec:	80eb883a 	add	r21,r16,r3
    acf0:	a829883a 	mov	r20,r21
    acf4:	84e1883a 	add	r16,r16,r19
    acf8:	a1c00007 	ldb	r7,0(r20)
    acfc:	8809883a 	mov	r4,r17
    ad00:	a5000044 	addi	r20,r20,1
    ad04:	100b883a 	mov	r5,r2
    ad08:	01800284 	movi	r6,10
    ad0c:	39fff404 	addi	r7,r7,-48
    ad10:	000ab580 	call	ab58 <__multadd>
    ad14:	a43ff81e 	bne	r20,r16,acf8 <__alt_mem_Flash_flash_data+0xf400acf8>
    ad18:	ace1883a 	add	r16,r21,r19
    ad1c:	843ffe04 	addi	r16,r16,-8
    ad20:	9c800a0e 	bge	r19,r18,ad4c <__s2b+0xd4>
    ad24:	94e5c83a 	sub	r18,r18,r19
    ad28:	84a5883a 	add	r18,r16,r18
    ad2c:	81c00007 	ldb	r7,0(r16)
    ad30:	8809883a 	mov	r4,r17
    ad34:	84000044 	addi	r16,r16,1
    ad38:	100b883a 	mov	r5,r2
    ad3c:	01800284 	movi	r6,10
    ad40:	39fff404 	addi	r7,r7,-48
    ad44:	000ab580 	call	ab58 <__multadd>
    ad48:	84bff81e 	bne	r16,r18,ad2c <__alt_mem_Flash_flash_data+0xf400ad2c>
    ad4c:	dfc00617 	ldw	ra,24(sp)
    ad50:	dd400517 	ldw	r21,20(sp)
    ad54:	dd000417 	ldw	r20,16(sp)
    ad58:	dcc00317 	ldw	r19,12(sp)
    ad5c:	dc800217 	ldw	r18,8(sp)
    ad60:	dc400117 	ldw	r17,4(sp)
    ad64:	dc000017 	ldw	r16,0(sp)
    ad68:	dec00704 	addi	sp,sp,28
    ad6c:	f800283a 	ret
    ad70:	84000284 	addi	r16,r16,10
    ad74:	1827883a 	mov	r19,r3
    ad78:	003fe906 	br	ad20 <__alt_mem_Flash_flash_data+0xf400ad20>

0000ad7c <__hi0bits>:
    ad7c:	20bfffec 	andhi	r2,r4,65535
    ad80:	1000141e 	bne	r2,zero,add4 <__hi0bits+0x58>
    ad84:	2008943a 	slli	r4,r4,16
    ad88:	00800404 	movi	r2,16
    ad8c:	20ffc02c 	andhi	r3,r4,65280
    ad90:	1800021e 	bne	r3,zero,ad9c <__hi0bits+0x20>
    ad94:	2008923a 	slli	r4,r4,8
    ad98:	10800204 	addi	r2,r2,8
    ad9c:	20fc002c 	andhi	r3,r4,61440
    ada0:	1800021e 	bne	r3,zero,adac <__hi0bits+0x30>
    ada4:	2008913a 	slli	r4,r4,4
    ada8:	10800104 	addi	r2,r2,4
    adac:	20f0002c 	andhi	r3,r4,49152
    adb0:	1800031e 	bne	r3,zero,adc0 <__hi0bits+0x44>
    adb4:	2109883a 	add	r4,r4,r4
    adb8:	10800084 	addi	r2,r2,2
    adbc:	2109883a 	add	r4,r4,r4
    adc0:	20000316 	blt	r4,zero,add0 <__hi0bits+0x54>
    adc4:	2110002c 	andhi	r4,r4,16384
    adc8:	2000041e 	bne	r4,zero,addc <__hi0bits+0x60>
    adcc:	00800804 	movi	r2,32
    add0:	f800283a 	ret
    add4:	0005883a 	mov	r2,zero
    add8:	003fec06 	br	ad8c <__alt_mem_Flash_flash_data+0xf400ad8c>
    addc:	10800044 	addi	r2,r2,1
    ade0:	f800283a 	ret

0000ade4 <__lo0bits>:
    ade4:	20c00017 	ldw	r3,0(r4)
    ade8:	188001cc 	andi	r2,r3,7
    adec:	10000826 	beq	r2,zero,ae10 <__lo0bits+0x2c>
    adf0:	1880004c 	andi	r2,r3,1
    adf4:	1000211e 	bne	r2,zero,ae7c <__lo0bits+0x98>
    adf8:	1880008c 	andi	r2,r3,2
    adfc:	1000211e 	bne	r2,zero,ae84 <__lo0bits+0xa0>
    ae00:	1806d0ba 	srli	r3,r3,2
    ae04:	00800084 	movi	r2,2
    ae08:	20c00015 	stw	r3,0(r4)
    ae0c:	f800283a 	ret
    ae10:	18bfffcc 	andi	r2,r3,65535
    ae14:	10001326 	beq	r2,zero,ae64 <__lo0bits+0x80>
    ae18:	0005883a 	mov	r2,zero
    ae1c:	19403fcc 	andi	r5,r3,255
    ae20:	2800021e 	bne	r5,zero,ae2c <__lo0bits+0x48>
    ae24:	1806d23a 	srli	r3,r3,8
    ae28:	10800204 	addi	r2,r2,8
    ae2c:	194003cc 	andi	r5,r3,15
    ae30:	2800021e 	bne	r5,zero,ae3c <__lo0bits+0x58>
    ae34:	1806d13a 	srli	r3,r3,4
    ae38:	10800104 	addi	r2,r2,4
    ae3c:	194000cc 	andi	r5,r3,3
    ae40:	2800021e 	bne	r5,zero,ae4c <__lo0bits+0x68>
    ae44:	1806d0ba 	srli	r3,r3,2
    ae48:	10800084 	addi	r2,r2,2
    ae4c:	1940004c 	andi	r5,r3,1
    ae50:	2800081e 	bne	r5,zero,ae74 <__lo0bits+0x90>
    ae54:	1806d07a 	srli	r3,r3,1
    ae58:	1800051e 	bne	r3,zero,ae70 <__lo0bits+0x8c>
    ae5c:	00800804 	movi	r2,32
    ae60:	f800283a 	ret
    ae64:	1806d43a 	srli	r3,r3,16
    ae68:	00800404 	movi	r2,16
    ae6c:	003feb06 	br	ae1c <__alt_mem_Flash_flash_data+0xf400ae1c>
    ae70:	10800044 	addi	r2,r2,1
    ae74:	20c00015 	stw	r3,0(r4)
    ae78:	f800283a 	ret
    ae7c:	0005883a 	mov	r2,zero
    ae80:	f800283a 	ret
    ae84:	1806d07a 	srli	r3,r3,1
    ae88:	00800044 	movi	r2,1
    ae8c:	20c00015 	stw	r3,0(r4)
    ae90:	f800283a 	ret

0000ae94 <__i2b>:
    ae94:	defffd04 	addi	sp,sp,-12
    ae98:	dc000015 	stw	r16,0(sp)
    ae9c:	04000044 	movi	r16,1
    aea0:	dc400115 	stw	r17,4(sp)
    aea4:	2823883a 	mov	r17,r5
    aea8:	800b883a 	mov	r5,r16
    aeac:	dfc00215 	stw	ra,8(sp)
    aeb0:	000aa880 	call	aa88 <_Balloc>
    aeb4:	14400515 	stw	r17,20(r2)
    aeb8:	14000415 	stw	r16,16(r2)
    aebc:	dfc00217 	ldw	ra,8(sp)
    aec0:	dc400117 	ldw	r17,4(sp)
    aec4:	dc000017 	ldw	r16,0(sp)
    aec8:	dec00304 	addi	sp,sp,12
    aecc:	f800283a 	ret

0000aed0 <__multiply>:
    aed0:	defffa04 	addi	sp,sp,-24
    aed4:	dcc00315 	stw	r19,12(sp)
    aed8:	dc800215 	stw	r18,8(sp)
    aedc:	2cc00417 	ldw	r19,16(r5)
    aee0:	34800417 	ldw	r18,16(r6)
    aee4:	dd000415 	stw	r20,16(sp)
    aee8:	dc400115 	stw	r17,4(sp)
    aeec:	dfc00515 	stw	ra,20(sp)
    aef0:	dc000015 	stw	r16,0(sp)
    aef4:	2829883a 	mov	r20,r5
    aef8:	3023883a 	mov	r17,r6
    aefc:	9c807016 	blt	r19,r18,b0c0 <__multiply+0x1f0>
    af00:	9005883a 	mov	r2,r18
    af04:	9825883a 	mov	r18,r19
    af08:	1027883a 	mov	r19,r2
    af0c:	a0800217 	ldw	r2,8(r20)
    af10:	94e1883a 	add	r16,r18,r19
    af14:	a1400117 	ldw	r5,4(r20)
    af18:	1400010e 	bge	r2,r16,af20 <__multiply+0x50>
    af1c:	29400044 	addi	r5,r5,1
    af20:	000aa880 	call	aa88 <_Balloc>
    af24:	8417883a 	add	r11,r16,r16
    af28:	13000504 	addi	r12,r2,20
    af2c:	5ad7883a 	add	r11,r11,r11
    af30:	62d7883a 	add	r11,r12,r11
    af34:	6007883a 	mov	r3,r12
    af38:	62c0032e 	bgeu	r12,r11,af48 <__multiply+0x78>
    af3c:	18000015 	stw	zero,0(r3)
    af40:	18c00104 	addi	r3,r3,4
    af44:	1afffd36 	bltu	r3,r11,af3c <__alt_mem_Flash_flash_data+0xf400af3c>
    af48:	9ce7883a 	add	r19,r19,r19
    af4c:	94a5883a 	add	r18,r18,r18
    af50:	89800504 	addi	r6,r17,20
    af54:	9ce7883a 	add	r19,r19,r19
    af58:	a3800504 	addi	r14,r20,20
    af5c:	94a5883a 	add	r18,r18,r18
    af60:	34db883a 	add	r13,r6,r19
    af64:	7495883a 	add	r10,r14,r18
    af68:	3340422e 	bgeu	r6,r13,b074 <__multiply+0x1a4>
    af6c:	34400017 	ldw	r17,0(r6)
    af70:	8cbfffcc 	andi	r18,r17,65535
    af74:	90001b26 	beq	r18,zero,afe4 <__multiply+0x114>
    af78:	6013883a 	mov	r9,r12
    af7c:	7023883a 	mov	r17,r14
    af80:	0011883a 	mov	r8,zero
    af84:	88c00017 	ldw	r3,0(r17)
    af88:	4bc00017 	ldw	r15,0(r9)
    af8c:	8c400104 	addi	r17,r17,4
    af90:	19ffffcc 	andi	r7,r3,65535
    af94:	3c8f383a 	mul	r7,r7,r18
    af98:	1808d43a 	srli	r4,r3,16
    af9c:	797fffcc 	andi	r5,r15,65535
    afa0:	29cb883a 	add	r5,r5,r7
    afa4:	2a0b883a 	add	r5,r5,r8
    afa8:	2489383a 	mul	r4,r4,r18
    afac:	7806d43a 	srli	r3,r15,16
    afb0:	2810d43a 	srli	r8,r5,16
    afb4:	297fffcc 	andi	r5,r5,65535
    afb8:	1907883a 	add	r3,r3,r4
    afbc:	1a07883a 	add	r3,r3,r8
    afc0:	1808943a 	slli	r4,r3,16
    afc4:	480f883a 	mov	r7,r9
    afc8:	1810d43a 	srli	r8,r3,16
    afcc:	214ab03a 	or	r5,r4,r5
    afd0:	49400015 	stw	r5,0(r9)
    afd4:	4a400104 	addi	r9,r9,4
    afd8:	8abfea36 	bltu	r17,r10,af84 <__alt_mem_Flash_flash_data+0xf400af84>
    afdc:	3a000115 	stw	r8,4(r7)
    afe0:	34400017 	ldw	r17,0(r6)
    afe4:	8822d43a 	srli	r17,r17,16
    afe8:	88001f26 	beq	r17,zero,b068 <__multiply+0x198>
    afec:	60c00017 	ldw	r3,0(r12)
    aff0:	7013883a 	mov	r9,r14
    aff4:	601f883a 	mov	r15,r12
    aff8:	1811883a 	mov	r8,r3
    affc:	6027883a 	mov	r19,r12
    b000:	000f883a 	mov	r7,zero
    b004:	00000106 	br	b00c <__multiply+0x13c>
    b008:	9027883a 	mov	r19,r18
    b00c:	4940000b 	ldhu	r5,0(r9)
    b010:	4010d43a 	srli	r8,r8,16
    b014:	193fffcc 	andi	r4,r3,65535
    b018:	2c4b383a 	mul	r5,r5,r17
    b01c:	7bc00104 	addi	r15,r15,4
    b020:	4a400104 	addi	r9,r9,4
    b024:	2a0b883a 	add	r5,r5,r8
    b028:	29cb883a 	add	r5,r5,r7
    b02c:	2806943a 	slli	r3,r5,16
    b030:	9c800104 	addi	r18,r19,4
    b034:	280ad43a 	srli	r5,r5,16
    b038:	1908b03a 	or	r4,r3,r4
    b03c:	793fff15 	stw	r4,-4(r15)
    b040:	48ffff17 	ldw	r3,-4(r9)
    b044:	92000017 	ldw	r8,0(r18)
    b048:	1806d43a 	srli	r3,r3,16
    b04c:	413fffcc 	andi	r4,r8,65535
    b050:	1c47383a 	mul	r3,r3,r17
    b054:	1907883a 	add	r3,r3,r4
    b058:	1947883a 	add	r3,r3,r5
    b05c:	180ed43a 	srli	r7,r3,16
    b060:	4abfe936 	bltu	r9,r10,b008 <__alt_mem_Flash_flash_data+0xf400b008>
    b064:	98c00115 	stw	r3,4(r19)
    b068:	31800104 	addi	r6,r6,4
    b06c:	63000104 	addi	r12,r12,4
    b070:	337fbe36 	bltu	r6,r13,af6c <__alt_mem_Flash_flash_data+0xf400af6c>
    b074:	0400090e 	bge	zero,r16,b09c <__multiply+0x1cc>
    b078:	58ffff17 	ldw	r3,-4(r11)
    b07c:	5affff04 	addi	r11,r11,-4
    b080:	18000326 	beq	r3,zero,b090 <__multiply+0x1c0>
    b084:	00000506 	br	b09c <__multiply+0x1cc>
    b088:	58c00017 	ldw	r3,0(r11)
    b08c:	1800031e 	bne	r3,zero,b09c <__multiply+0x1cc>
    b090:	843fffc4 	addi	r16,r16,-1
    b094:	5affff04 	addi	r11,r11,-4
    b098:	803ffb1e 	bne	r16,zero,b088 <__alt_mem_Flash_flash_data+0xf400b088>
    b09c:	14000415 	stw	r16,16(r2)
    b0a0:	dfc00517 	ldw	ra,20(sp)
    b0a4:	dd000417 	ldw	r20,16(sp)
    b0a8:	dcc00317 	ldw	r19,12(sp)
    b0ac:	dc800217 	ldw	r18,8(sp)
    b0b0:	dc400117 	ldw	r17,4(sp)
    b0b4:	dc000017 	ldw	r16,0(sp)
    b0b8:	dec00604 	addi	sp,sp,24
    b0bc:	f800283a 	ret
    b0c0:	3029883a 	mov	r20,r6
    b0c4:	2823883a 	mov	r17,r5
    b0c8:	003f9006 	br	af0c <__alt_mem_Flash_flash_data+0xf400af0c>

0000b0cc <__pow5mult>:
    b0cc:	defffa04 	addi	sp,sp,-24
    b0d0:	dcc00315 	stw	r19,12(sp)
    b0d4:	dc800215 	stw	r18,8(sp)
    b0d8:	dc000015 	stw	r16,0(sp)
    b0dc:	dfc00515 	stw	ra,20(sp)
    b0e0:	dd000415 	stw	r20,16(sp)
    b0e4:	dc400115 	stw	r17,4(sp)
    b0e8:	308000cc 	andi	r2,r6,3
    b0ec:	3021883a 	mov	r16,r6
    b0f0:	2027883a 	mov	r19,r4
    b0f4:	2825883a 	mov	r18,r5
    b0f8:	10002e1e 	bne	r2,zero,b1b4 <__pow5mult+0xe8>
    b0fc:	8021d0ba 	srai	r16,r16,2
    b100:	80001a26 	beq	r16,zero,b16c <__pow5mult+0xa0>
    b104:	9c401217 	ldw	r17,72(r19)
    b108:	8800061e 	bne	r17,zero,b124 <__pow5mult+0x58>
    b10c:	00003406 	br	b1e0 <__pow5mult+0x114>
    b110:	8021d07a 	srai	r16,r16,1
    b114:	80001526 	beq	r16,zero,b16c <__pow5mult+0xa0>
    b118:	88800017 	ldw	r2,0(r17)
    b11c:	10001c26 	beq	r2,zero,b190 <__pow5mult+0xc4>
    b120:	1023883a 	mov	r17,r2
    b124:	80c0004c 	andi	r3,r16,1
    b128:	183ff926 	beq	r3,zero,b110 <__alt_mem_Flash_flash_data+0xf400b110>
    b12c:	900b883a 	mov	r5,r18
    b130:	880d883a 	mov	r6,r17
    b134:	9809883a 	mov	r4,r19
    b138:	000aed00 	call	aed0 <__multiply>
    b13c:	90001b26 	beq	r18,zero,b1ac <__pow5mult+0xe0>
    b140:	91c00117 	ldw	r7,4(r18)
    b144:	98c01317 	ldw	r3,76(r19)
    b148:	8021d07a 	srai	r16,r16,1
    b14c:	39cf883a 	add	r7,r7,r7
    b150:	39cf883a 	add	r7,r7,r7
    b154:	19c7883a 	add	r3,r3,r7
    b158:	19000017 	ldw	r4,0(r3)
    b15c:	91000015 	stw	r4,0(r18)
    b160:	1c800015 	stw	r18,0(r3)
    b164:	1025883a 	mov	r18,r2
    b168:	803feb1e 	bne	r16,zero,b118 <__alt_mem_Flash_flash_data+0xf400b118>
    b16c:	9005883a 	mov	r2,r18
    b170:	dfc00517 	ldw	ra,20(sp)
    b174:	dd000417 	ldw	r20,16(sp)
    b178:	dcc00317 	ldw	r19,12(sp)
    b17c:	dc800217 	ldw	r18,8(sp)
    b180:	dc400117 	ldw	r17,4(sp)
    b184:	dc000017 	ldw	r16,0(sp)
    b188:	dec00604 	addi	sp,sp,24
    b18c:	f800283a 	ret
    b190:	9809883a 	mov	r4,r19
    b194:	880b883a 	mov	r5,r17
    b198:	880d883a 	mov	r6,r17
    b19c:	000aed00 	call	aed0 <__multiply>
    b1a0:	88800015 	stw	r2,0(r17)
    b1a4:	10000015 	stw	zero,0(r2)
    b1a8:	003fdd06 	br	b120 <__alt_mem_Flash_flash_data+0xf400b120>
    b1ac:	1025883a 	mov	r18,r2
    b1b0:	003fd706 	br	b110 <__alt_mem_Flash_flash_data+0xf400b110>
    b1b4:	10bfffc4 	addi	r2,r2,-1
    b1b8:	1085883a 	add	r2,r2,r2
    b1bc:	00c000b4 	movhi	r3,2
    b1c0:	18fedc04 	addi	r3,r3,-1168
    b1c4:	1085883a 	add	r2,r2,r2
    b1c8:	1885883a 	add	r2,r3,r2
    b1cc:	11800017 	ldw	r6,0(r2)
    b1d0:	000f883a 	mov	r7,zero
    b1d4:	000ab580 	call	ab58 <__multadd>
    b1d8:	1025883a 	mov	r18,r2
    b1dc:	003fc706 	br	b0fc <__alt_mem_Flash_flash_data+0xf400b0fc>
    b1e0:	05000044 	movi	r20,1
    b1e4:	9809883a 	mov	r4,r19
    b1e8:	a00b883a 	mov	r5,r20
    b1ec:	000aa880 	call	aa88 <_Balloc>
    b1f0:	1023883a 	mov	r17,r2
    b1f4:	00809c44 	movi	r2,625
    b1f8:	88800515 	stw	r2,20(r17)
    b1fc:	8d000415 	stw	r20,16(r17)
    b200:	9c401215 	stw	r17,72(r19)
    b204:	88000015 	stw	zero,0(r17)
    b208:	003fc606 	br	b124 <__alt_mem_Flash_flash_data+0xf400b124>

0000b20c <__lshift>:
    b20c:	defff904 	addi	sp,sp,-28
    b210:	dd000415 	stw	r20,16(sp)
    b214:	dcc00315 	stw	r19,12(sp)
    b218:	3029d17a 	srai	r20,r6,5
    b21c:	2cc00417 	ldw	r19,16(r5)
    b220:	28800217 	ldw	r2,8(r5)
    b224:	dd400515 	stw	r21,20(sp)
    b228:	a4e7883a 	add	r19,r20,r19
    b22c:	dc800215 	stw	r18,8(sp)
    b230:	dc400115 	stw	r17,4(sp)
    b234:	dc000015 	stw	r16,0(sp)
    b238:	dfc00615 	stw	ra,24(sp)
    b23c:	9c000044 	addi	r16,r19,1
    b240:	2823883a 	mov	r17,r5
    b244:	302b883a 	mov	r21,r6
    b248:	2025883a 	mov	r18,r4
    b24c:	29400117 	ldw	r5,4(r5)
    b250:	1400030e 	bge	r2,r16,b260 <__lshift+0x54>
    b254:	1085883a 	add	r2,r2,r2
    b258:	29400044 	addi	r5,r5,1
    b25c:	143ffd16 	blt	r2,r16,b254 <__alt_mem_Flash_flash_data+0xf400b254>
    b260:	9009883a 	mov	r4,r18
    b264:	000aa880 	call	aa88 <_Balloc>
    b268:	11c00504 	addi	r7,r2,20
    b26c:	0500090e 	bge	zero,r20,b294 <__lshift+0x88>
    b270:	3811883a 	mov	r8,r7
    b274:	0007883a 	mov	r3,zero
    b278:	40000015 	stw	zero,0(r8)
    b27c:	18c00044 	addi	r3,r3,1
    b280:	42000104 	addi	r8,r8,4
    b284:	1d3ffc1e 	bne	r3,r20,b278 <__alt_mem_Flash_flash_data+0xf400b278>
    b288:	18c7883a 	add	r3,r3,r3
    b28c:	18c7883a 	add	r3,r3,r3
    b290:	38cf883a 	add	r7,r7,r3
    b294:	89000417 	ldw	r4,16(r17)
    b298:	88c00504 	addi	r3,r17,20
    b29c:	a98007cc 	andi	r6,r21,31
    b2a0:	2109883a 	add	r4,r4,r4
    b2a4:	2109883a 	add	r4,r4,r4
    b2a8:	1909883a 	add	r4,r3,r4
    b2ac:	30002326 	beq	r6,zero,b33c <__lshift+0x130>
    b2b0:	01400804 	movi	r5,32
    b2b4:	298bc83a 	sub	r5,r5,r6
    b2b8:	0013883a 	mov	r9,zero
    b2bc:	1a000017 	ldw	r8,0(r3)
    b2c0:	3815883a 	mov	r10,r7
    b2c4:	39c00104 	addi	r7,r7,4
    b2c8:	4190983a 	sll	r8,r8,r6
    b2cc:	18c00104 	addi	r3,r3,4
    b2d0:	4a10b03a 	or	r8,r9,r8
    b2d4:	3a3fff15 	stw	r8,-4(r7)
    b2d8:	1a3fff17 	ldw	r8,-4(r3)
    b2dc:	4152d83a 	srl	r9,r8,r5
    b2e0:	193ff636 	bltu	r3,r4,b2bc <__alt_mem_Flash_flash_data+0xf400b2bc>
    b2e4:	52400115 	stw	r9,4(r10)
    b2e8:	48001a1e 	bne	r9,zero,b354 <__lshift+0x148>
    b2ec:	843fffc4 	addi	r16,r16,-1
    b2f0:	14000415 	stw	r16,16(r2)
    b2f4:	88000826 	beq	r17,zero,b318 <__lshift+0x10c>
    b2f8:	89000117 	ldw	r4,4(r17)
    b2fc:	90c01317 	ldw	r3,76(r18)
    b300:	2109883a 	add	r4,r4,r4
    b304:	2109883a 	add	r4,r4,r4
    b308:	1907883a 	add	r3,r3,r4
    b30c:	19000017 	ldw	r4,0(r3)
    b310:	89000015 	stw	r4,0(r17)
    b314:	1c400015 	stw	r17,0(r3)
    b318:	dfc00617 	ldw	ra,24(sp)
    b31c:	dd400517 	ldw	r21,20(sp)
    b320:	dd000417 	ldw	r20,16(sp)
    b324:	dcc00317 	ldw	r19,12(sp)
    b328:	dc800217 	ldw	r18,8(sp)
    b32c:	dc400117 	ldw	r17,4(sp)
    b330:	dc000017 	ldw	r16,0(sp)
    b334:	dec00704 	addi	sp,sp,28
    b338:	f800283a 	ret
    b33c:	19400017 	ldw	r5,0(r3)
    b340:	39c00104 	addi	r7,r7,4
    b344:	18c00104 	addi	r3,r3,4
    b348:	397fff15 	stw	r5,-4(r7)
    b34c:	193ffb36 	bltu	r3,r4,b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b350:	003fe606 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>
    b354:	9c000084 	addi	r16,r19,2
    b358:	003fe406 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>

0000b35c <__mcmp>:
    b35c:	20800417 	ldw	r2,16(r4)
    b360:	28c00417 	ldw	r3,16(r5)
    b364:	10c5c83a 	sub	r2,r2,r3
    b368:	1000111e 	bne	r2,zero,b3b0 <__mcmp+0x54>
    b36c:	18c7883a 	add	r3,r3,r3
    b370:	18c7883a 	add	r3,r3,r3
    b374:	21000504 	addi	r4,r4,20
    b378:	29400504 	addi	r5,r5,20
    b37c:	20c5883a 	add	r2,r4,r3
    b380:	28cb883a 	add	r5,r5,r3
    b384:	00000106 	br	b38c <__mcmp+0x30>
    b388:	20800a2e 	bgeu	r4,r2,b3b4 <__mcmp+0x58>
    b38c:	10bfff04 	addi	r2,r2,-4
    b390:	297fff04 	addi	r5,r5,-4
    b394:	11800017 	ldw	r6,0(r2)
    b398:	28c00017 	ldw	r3,0(r5)
    b39c:	30fffa26 	beq	r6,r3,b388 <__alt_mem_Flash_flash_data+0xf400b388>
    b3a0:	30c00236 	bltu	r6,r3,b3ac <__mcmp+0x50>
    b3a4:	00800044 	movi	r2,1
    b3a8:	f800283a 	ret
    b3ac:	00bfffc4 	movi	r2,-1
    b3b0:	f800283a 	ret
    b3b4:	0005883a 	mov	r2,zero
    b3b8:	f800283a 	ret

0000b3bc <__mdiff>:
    b3bc:	defffb04 	addi	sp,sp,-20
    b3c0:	dc000015 	stw	r16,0(sp)
    b3c4:	2821883a 	mov	r16,r5
    b3c8:	dcc00315 	stw	r19,12(sp)
    b3cc:	300b883a 	mov	r5,r6
    b3d0:	2027883a 	mov	r19,r4
    b3d4:	8009883a 	mov	r4,r16
    b3d8:	dc800215 	stw	r18,8(sp)
    b3dc:	dfc00415 	stw	ra,16(sp)
    b3e0:	dc400115 	stw	r17,4(sp)
    b3e4:	3025883a 	mov	r18,r6
    b3e8:	000b35c0 	call	b35c <__mcmp>
    b3ec:	10005226 	beq	r2,zero,b538 <__mdiff+0x17c>
    b3f0:	10004c16 	blt	r2,zero,b524 <__mdiff+0x168>
    b3f4:	0023883a 	mov	r17,zero
    b3f8:	81400117 	ldw	r5,4(r16)
    b3fc:	9809883a 	mov	r4,r19
    b400:	000aa880 	call	aa88 <_Balloc>
    b404:	83400417 	ldw	r13,16(r16)
    b408:	93800417 	ldw	r14,16(r18)
    b40c:	81000504 	addi	r4,r16,20
    b410:	6b59883a 	add	r12,r13,r13
    b414:	739d883a 	add	r14,r14,r14
    b418:	6319883a 	add	r12,r12,r12
    b41c:	91800504 	addi	r6,r18,20
    b420:	739d883a 	add	r14,r14,r14
    b424:	14400315 	stw	r17,12(r2)
    b428:	2319883a 	add	r12,r4,r12
    b42c:	339d883a 	add	r14,r6,r14
    b430:	12400504 	addi	r9,r2,20
    b434:	0007883a 	mov	r3,zero
    b438:	22000017 	ldw	r8,0(r4)
    b43c:	32800017 	ldw	r10,0(r6)
    b440:	4ac00104 	addi	r11,r9,4
    b444:	41ffffcc 	andi	r7,r8,65535
    b448:	38c7883a 	add	r3,r7,r3
    b44c:	51ffffcc 	andi	r7,r10,65535
    b450:	19cfc83a 	sub	r7,r3,r7
    b454:	4010d43a 	srli	r8,r8,16
    b458:	5014d43a 	srli	r10,r10,16
    b45c:	3807d43a 	srai	r3,r7,16
    b460:	39ffffcc 	andi	r7,r7,65535
    b464:	4291c83a 	sub	r8,r8,r10
    b468:	40c7883a 	add	r3,r8,r3
    b46c:	1810943a 	slli	r8,r3,16
    b470:	31800104 	addi	r6,r6,4
    b474:	21000104 	addi	r4,r4,4
    b478:	41ceb03a 	or	r7,r8,r7
    b47c:	49c00015 	stw	r7,0(r9)
    b480:	1807d43a 	srai	r3,r3,16
    b484:	580b883a 	mov	r5,r11
    b488:	5813883a 	mov	r9,r11
    b48c:	33bfea36 	bltu	r6,r14,b438 <__alt_mem_Flash_flash_data+0xf400b438>
    b490:	2011883a 	mov	r8,r4
    b494:	2300152e 	bgeu	r4,r12,b4ec <__mdiff+0x130>
    b498:	21400017 	ldw	r5,0(r4)
    b49c:	4a400104 	addi	r9,r9,4
    b4a0:	21000104 	addi	r4,r4,4
    b4a4:	29ffffcc 	andi	r7,r5,65535
    b4a8:	38c7883a 	add	r3,r7,r3
    b4ac:	280ad43a 	srli	r5,r5,16
    b4b0:	180dd43a 	srai	r6,r3,16
    b4b4:	19ffffcc 	andi	r7,r3,65535
    b4b8:	3147883a 	add	r3,r6,r5
    b4bc:	180a943a 	slli	r5,r3,16
    b4c0:	1807d43a 	srai	r3,r3,16
    b4c4:	29ceb03a 	or	r7,r5,r7
    b4c8:	49ffff15 	stw	r7,-4(r9)
    b4cc:	233ff236 	bltu	r4,r12,b498 <__alt_mem_Flash_flash_data+0xf400b498>
    b4d0:	0206303a 	nor	r3,zero,r8
    b4d4:	1b07883a 	add	r3,r3,r12
    b4d8:	1806d0ba 	srli	r3,r3,2
    b4dc:	18c00044 	addi	r3,r3,1
    b4e0:	18c7883a 	add	r3,r3,r3
    b4e4:	18c7883a 	add	r3,r3,r3
    b4e8:	58cb883a 	add	r5,r11,r3
    b4ec:	28ffff04 	addi	r3,r5,-4
    b4f0:	3800041e 	bne	r7,zero,b504 <__mdiff+0x148>
    b4f4:	18ffff04 	addi	r3,r3,-4
    b4f8:	19000017 	ldw	r4,0(r3)
    b4fc:	6b7fffc4 	addi	r13,r13,-1
    b500:	203ffc26 	beq	r4,zero,b4f4 <__alt_mem_Flash_flash_data+0xf400b4f4>
    b504:	13400415 	stw	r13,16(r2)
    b508:	dfc00417 	ldw	ra,16(sp)
    b50c:	dcc00317 	ldw	r19,12(sp)
    b510:	dc800217 	ldw	r18,8(sp)
    b514:	dc400117 	ldw	r17,4(sp)
    b518:	dc000017 	ldw	r16,0(sp)
    b51c:	dec00504 	addi	sp,sp,20
    b520:	f800283a 	ret
    b524:	8005883a 	mov	r2,r16
    b528:	04400044 	movi	r17,1
    b52c:	9021883a 	mov	r16,r18
    b530:	1025883a 	mov	r18,r2
    b534:	003fb006 	br	b3f8 <__alt_mem_Flash_flash_data+0xf400b3f8>
    b538:	9809883a 	mov	r4,r19
    b53c:	000b883a 	mov	r5,zero
    b540:	000aa880 	call	aa88 <_Balloc>
    b544:	00c00044 	movi	r3,1
    b548:	10c00415 	stw	r3,16(r2)
    b54c:	10000515 	stw	zero,20(r2)
    b550:	003fed06 	br	b508 <__alt_mem_Flash_flash_data+0xf400b508>

0000b554 <__ulp>:
    b554:	295ffc2c 	andhi	r5,r5,32752
    b558:	00bf3034 	movhi	r2,64704
    b55c:	2887883a 	add	r3,r5,r2
    b560:	00c0020e 	bge	zero,r3,b56c <__ulp+0x18>
    b564:	0005883a 	mov	r2,zero
    b568:	f800283a 	ret
    b56c:	00c7c83a 	sub	r3,zero,r3
    b570:	180bd53a 	srai	r5,r3,20
    b574:	008004c4 	movi	r2,19
    b578:	11400a0e 	bge	r2,r5,b5a4 <__ulp+0x50>
    b57c:	00800c84 	movi	r2,50
    b580:	0007883a 	mov	r3,zero
    b584:	11400516 	blt	r2,r5,b59c <__ulp+0x48>
    b588:	00800cc4 	movi	r2,51
    b58c:	114bc83a 	sub	r5,r2,r5
    b590:	00800044 	movi	r2,1
    b594:	1144983a 	sll	r2,r2,r5
    b598:	f800283a 	ret
    b59c:	00800044 	movi	r2,1
    b5a0:	f800283a 	ret
    b5a4:	00800234 	movhi	r2,8
    b5a8:	1147d83a 	sra	r3,r2,r5
    b5ac:	0005883a 	mov	r2,zero
    b5b0:	f800283a 	ret

0000b5b4 <__b2d>:
    b5b4:	defffa04 	addi	sp,sp,-24
    b5b8:	dc000015 	stw	r16,0(sp)
    b5bc:	24000417 	ldw	r16,16(r4)
    b5c0:	dc400115 	stw	r17,4(sp)
    b5c4:	24400504 	addi	r17,r4,20
    b5c8:	8421883a 	add	r16,r16,r16
    b5cc:	8421883a 	add	r16,r16,r16
    b5d0:	8c21883a 	add	r16,r17,r16
    b5d4:	dc800215 	stw	r18,8(sp)
    b5d8:	84bfff17 	ldw	r18,-4(r16)
    b5dc:	dd000415 	stw	r20,16(sp)
    b5e0:	dcc00315 	stw	r19,12(sp)
    b5e4:	9009883a 	mov	r4,r18
    b5e8:	2829883a 	mov	r20,r5
    b5ec:	dfc00515 	stw	ra,20(sp)
    b5f0:	000ad7c0 	call	ad7c <__hi0bits>
    b5f4:	00c00804 	movi	r3,32
    b5f8:	1887c83a 	sub	r3,r3,r2
    b5fc:	a0c00015 	stw	r3,0(r20)
    b600:	00c00284 	movi	r3,10
    b604:	84ffff04 	addi	r19,r16,-4
    b608:	18801216 	blt	r3,r2,b654 <__b2d+0xa0>
    b60c:	014002c4 	movi	r5,11
    b610:	2889c83a 	sub	r4,r5,r2
    b614:	9106d83a 	srl	r3,r18,r4
    b618:	18cffc34 	orhi	r3,r3,16368
    b61c:	8cc0282e 	bgeu	r17,r19,b6c0 <__b2d+0x10c>
    b620:	817ffe17 	ldw	r5,-8(r16)
    b624:	290ad83a 	srl	r5,r5,r4
    b628:	10800544 	addi	r2,r2,21
    b62c:	9084983a 	sll	r2,r18,r2
    b630:	2884b03a 	or	r2,r5,r2
    b634:	dfc00517 	ldw	ra,20(sp)
    b638:	dd000417 	ldw	r20,16(sp)
    b63c:	dcc00317 	ldw	r19,12(sp)
    b640:	dc800217 	ldw	r18,8(sp)
    b644:	dc400117 	ldw	r17,4(sp)
    b648:	dc000017 	ldw	r16,0(sp)
    b64c:	dec00604 	addi	sp,sp,24
    b650:	f800283a 	ret
    b654:	113ffd44 	addi	r4,r2,-11
    b658:	8cc00f2e 	bgeu	r17,r19,b698 <__b2d+0xe4>
    b65c:	81bffe04 	addi	r6,r16,-8
    b660:	817ffe17 	ldw	r5,-8(r16)
    b664:	20001326 	beq	r4,zero,b6b4 <__b2d+0x100>
    b668:	00c00ac4 	movi	r3,43
    b66c:	1885c83a 	sub	r2,r3,r2
    b670:	2886d83a 	srl	r3,r5,r2
    b674:	9124983a 	sll	r18,r18,r4
    b678:	90e4b03a 	or	r18,r18,r3
    b67c:	90cffc34 	orhi	r3,r18,16368
    b680:	8980112e 	bgeu	r17,r6,b6c8 <__b2d+0x114>
    b684:	81bffd17 	ldw	r6,-12(r16)
    b688:	308cd83a 	srl	r6,r6,r2
    b68c:	2904983a 	sll	r2,r5,r4
    b690:	1184b03a 	or	r2,r2,r6
    b694:	003fe706 	br	b634 <__alt_mem_Flash_flash_data+0xf400b634>
    b698:	20000526 	beq	r4,zero,b6b0 <__b2d+0xfc>
    b69c:	9124983a 	sll	r18,r18,r4
    b6a0:	000d883a 	mov	r6,zero
    b6a4:	000b883a 	mov	r5,zero
    b6a8:	90cffc34 	orhi	r3,r18,16368
    b6ac:	003ff706 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>
    b6b0:	000b883a 	mov	r5,zero
    b6b4:	90cffc34 	orhi	r3,r18,16368
    b6b8:	2805883a 	mov	r2,r5
    b6bc:	003fdd06 	br	b634 <__alt_mem_Flash_flash_data+0xf400b634>
    b6c0:	000b883a 	mov	r5,zero
    b6c4:	003fd806 	br	b628 <__alt_mem_Flash_flash_data+0xf400b628>
    b6c8:	000d883a 	mov	r6,zero
    b6cc:	003fef06 	br	b68c <__alt_mem_Flash_flash_data+0xf400b68c>

0000b6d0 <__d2b>:
    b6d0:	defff704 	addi	sp,sp,-36
    b6d4:	dc000215 	stw	r16,8(sp)
    b6d8:	3021883a 	mov	r16,r6
    b6dc:	dc400315 	stw	r17,12(sp)
    b6e0:	8022907a 	slli	r17,r16,1
    b6e4:	dd400715 	stw	r21,28(sp)
    b6e8:	282b883a 	mov	r21,r5
    b6ec:	01400044 	movi	r5,1
    b6f0:	dd000615 	stw	r20,24(sp)
    b6f4:	dcc00515 	stw	r19,20(sp)
    b6f8:	dc800415 	stw	r18,16(sp)
    b6fc:	dfc00815 	stw	ra,32(sp)
    b700:	3829883a 	mov	r20,r7
    b704:	dc800917 	ldw	r18,36(sp)
    b708:	8822d57a 	srli	r17,r17,21
    b70c:	000aa880 	call	aa88 <_Balloc>
    b710:	1027883a 	mov	r19,r2
    b714:	00800434 	movhi	r2,16
    b718:	10bfffc4 	addi	r2,r2,-1
    b71c:	808c703a 	and	r6,r16,r2
    b720:	88000126 	beq	r17,zero,b728 <__d2b+0x58>
    b724:	31800434 	orhi	r6,r6,16
    b728:	d9800015 	stw	r6,0(sp)
    b72c:	a8001f26 	beq	r21,zero,b7ac <__d2b+0xdc>
    b730:	d9000104 	addi	r4,sp,4
    b734:	dd400115 	stw	r21,4(sp)
    b738:	000ade40 	call	ade4 <__lo0bits>
    b73c:	d8c00017 	ldw	r3,0(sp)
    b740:	1000291e 	bne	r2,zero,b7e8 <__d2b+0x118>
    b744:	d9000117 	ldw	r4,4(sp)
    b748:	99000515 	stw	r4,20(r19)
    b74c:	1820c03a 	cmpne	r16,r3,zero
    b750:	84000044 	addi	r16,r16,1
    b754:	98c00615 	stw	r3,24(r19)
    b758:	9c000415 	stw	r16,16(r19)
    b75c:	88001b1e 	bne	r17,zero,b7cc <__d2b+0xfc>
    b760:	800690ba 	slli	r3,r16,2
    b764:	10bef384 	addi	r2,r2,-1074
    b768:	a0800015 	stw	r2,0(r20)
    b76c:	98c5883a 	add	r2,r19,r3
    b770:	11000417 	ldw	r4,16(r2)
    b774:	8020917a 	slli	r16,r16,5
    b778:	000ad7c0 	call	ad7c <__hi0bits>
    b77c:	8085c83a 	sub	r2,r16,r2
    b780:	90800015 	stw	r2,0(r18)
    b784:	9805883a 	mov	r2,r19
    b788:	dfc00817 	ldw	ra,32(sp)
    b78c:	dd400717 	ldw	r21,28(sp)
    b790:	dd000617 	ldw	r20,24(sp)
    b794:	dcc00517 	ldw	r19,20(sp)
    b798:	dc800417 	ldw	r18,16(sp)
    b79c:	dc400317 	ldw	r17,12(sp)
    b7a0:	dc000217 	ldw	r16,8(sp)
    b7a4:	dec00904 	addi	sp,sp,36
    b7a8:	f800283a 	ret
    b7ac:	d809883a 	mov	r4,sp
    b7b0:	000ade40 	call	ade4 <__lo0bits>
    b7b4:	d8c00017 	ldw	r3,0(sp)
    b7b8:	04000044 	movi	r16,1
    b7bc:	9c000415 	stw	r16,16(r19)
    b7c0:	98c00515 	stw	r3,20(r19)
    b7c4:	10800804 	addi	r2,r2,32
    b7c8:	883fe526 	beq	r17,zero,b760 <__alt_mem_Flash_flash_data+0xf400b760>
    b7cc:	8c7ef344 	addi	r17,r17,-1075
    b7d0:	88a3883a 	add	r17,r17,r2
    b7d4:	00c00d44 	movi	r3,53
    b7d8:	a4400015 	stw	r17,0(r20)
    b7dc:	1885c83a 	sub	r2,r3,r2
    b7e0:	90800015 	stw	r2,0(r18)
    b7e4:	003fe706 	br	b784 <__alt_mem_Flash_flash_data+0xf400b784>
    b7e8:	01000804 	movi	r4,32
    b7ec:	2089c83a 	sub	r4,r4,r2
    b7f0:	1908983a 	sll	r4,r3,r4
    b7f4:	d9400117 	ldw	r5,4(sp)
    b7f8:	1886d83a 	srl	r3,r3,r2
    b7fc:	2148b03a 	or	r4,r4,r5
    b800:	99000515 	stw	r4,20(r19)
    b804:	d8c00015 	stw	r3,0(sp)
    b808:	003fd006 	br	b74c <__alt_mem_Flash_flash_data+0xf400b74c>

0000b80c <__ratio>:
    b80c:	defff904 	addi	sp,sp,-28
    b810:	dc400315 	stw	r17,12(sp)
    b814:	2823883a 	mov	r17,r5
    b818:	d9400104 	addi	r5,sp,4
    b81c:	dfc00615 	stw	ra,24(sp)
    b820:	dcc00515 	stw	r19,20(sp)
    b824:	dc800415 	stw	r18,16(sp)
    b828:	2027883a 	mov	r19,r4
    b82c:	dc000215 	stw	r16,8(sp)
    b830:	000b5b40 	call	b5b4 <__b2d>
    b834:	8809883a 	mov	r4,r17
    b838:	d80b883a 	mov	r5,sp
    b83c:	1025883a 	mov	r18,r2
    b840:	1821883a 	mov	r16,r3
    b844:	000b5b40 	call	b5b4 <__b2d>
    b848:	8a400417 	ldw	r9,16(r17)
    b84c:	9a000417 	ldw	r8,16(r19)
    b850:	100d883a 	mov	r6,r2
    b854:	d8800017 	ldw	r2,0(sp)
    b858:	4251c83a 	sub	r8,r8,r9
    b85c:	4012917a 	slli	r9,r8,5
    b860:	da000117 	ldw	r8,4(sp)
    b864:	4091c83a 	sub	r8,r8,r2
    b868:	4251883a 	add	r8,r8,r9
    b86c:	02000d0e 	bge	zero,r8,b8a4 <__ratio+0x98>
    b870:	4010953a 	slli	r8,r8,20
    b874:	4421883a 	add	r16,r8,r16
    b878:	9009883a 	mov	r4,r18
    b87c:	800b883a 	mov	r5,r16
    b880:	180f883a 	mov	r7,r3
    b884:	00107100 	call	10710 <__divdf3>
    b888:	dfc00617 	ldw	ra,24(sp)
    b88c:	dcc00517 	ldw	r19,20(sp)
    b890:	dc800417 	ldw	r18,16(sp)
    b894:	dc400317 	ldw	r17,12(sp)
    b898:	dc000217 	ldw	r16,8(sp)
    b89c:	dec00704 	addi	sp,sp,28
    b8a0:	f800283a 	ret
    b8a4:	4010953a 	slli	r8,r8,20
    b8a8:	1a07c83a 	sub	r3,r3,r8
    b8ac:	003ff206 	br	b878 <__alt_mem_Flash_flash_data+0xf400b878>

0000b8b0 <_mprec_log10>:
    b8b0:	defffe04 	addi	sp,sp,-8
    b8b4:	dc000015 	stw	r16,0(sp)
    b8b8:	dfc00115 	stw	ra,4(sp)
    b8bc:	008005c4 	movi	r2,23
    b8c0:	2021883a 	mov	r16,r4
    b8c4:	11000d0e 	bge	r2,r4,b8fc <_mprec_log10+0x4c>
    b8c8:	0005883a 	mov	r2,zero
    b8cc:	00cffc34 	movhi	r3,16368
    b8d0:	843fffc4 	addi	r16,r16,-1
    b8d4:	1009883a 	mov	r4,r2
    b8d8:	180b883a 	mov	r5,r3
    b8dc:	000d883a 	mov	r6,zero
    b8e0:	01d00934 	movhi	r7,16420
    b8e4:	00112200 	call	11220 <__muldf3>
    b8e8:	803ff91e 	bne	r16,zero,b8d0 <__alt_mem_Flash_flash_data+0xf400b8d0>
    b8ec:	dfc00117 	ldw	ra,4(sp)
    b8f0:	dc000017 	ldw	r16,0(sp)
    b8f4:	dec00204 	addi	sp,sp,8
    b8f8:	f800283a 	ret
    b8fc:	202090fa 	slli	r16,r4,3
    b900:	008000b4 	movhi	r2,2
    b904:	10bef304 	addi	r2,r2,-1076
    b908:	1421883a 	add	r16,r2,r16
    b90c:	80800017 	ldw	r2,0(r16)
    b910:	80c00117 	ldw	r3,4(r16)
    b914:	dfc00117 	ldw	ra,4(sp)
    b918:	dc000017 	ldw	r16,0(sp)
    b91c:	dec00204 	addi	sp,sp,8
    b920:	f800283a 	ret

0000b924 <__copybits>:
    b924:	297fffc4 	addi	r5,r5,-1
    b928:	280fd17a 	srai	r7,r5,5
    b92c:	30c00417 	ldw	r3,16(r6)
    b930:	30800504 	addi	r2,r6,20
    b934:	39c00044 	addi	r7,r7,1
    b938:	18c7883a 	add	r3,r3,r3
    b93c:	39cf883a 	add	r7,r7,r7
    b940:	18c7883a 	add	r3,r3,r3
    b944:	39cf883a 	add	r7,r7,r7
    b948:	10c7883a 	add	r3,r2,r3
    b94c:	21cf883a 	add	r7,r4,r7
    b950:	10c00d2e 	bgeu	r2,r3,b988 <__copybits+0x64>
    b954:	200b883a 	mov	r5,r4
    b958:	12000017 	ldw	r8,0(r2)
    b95c:	29400104 	addi	r5,r5,4
    b960:	10800104 	addi	r2,r2,4
    b964:	2a3fff15 	stw	r8,-4(r5)
    b968:	10fffb36 	bltu	r2,r3,b958 <__alt_mem_Flash_flash_data+0xf400b958>
    b96c:	1985c83a 	sub	r2,r3,r6
    b970:	10bffac4 	addi	r2,r2,-21
    b974:	1004d0ba 	srli	r2,r2,2
    b978:	10800044 	addi	r2,r2,1
    b97c:	1085883a 	add	r2,r2,r2
    b980:	1085883a 	add	r2,r2,r2
    b984:	2089883a 	add	r4,r4,r2
    b988:	21c0032e 	bgeu	r4,r7,b998 <__copybits+0x74>
    b98c:	20000015 	stw	zero,0(r4)
    b990:	21000104 	addi	r4,r4,4
    b994:	21fffd36 	bltu	r4,r7,b98c <__alt_mem_Flash_flash_data+0xf400b98c>
    b998:	f800283a 	ret

0000b99c <__any_on>:
    b99c:	20c00417 	ldw	r3,16(r4)
    b9a0:	2805d17a 	srai	r2,r5,5
    b9a4:	21000504 	addi	r4,r4,20
    b9a8:	18800d0e 	bge	r3,r2,b9e0 <__any_on+0x44>
    b9ac:	18c7883a 	add	r3,r3,r3
    b9b0:	18c7883a 	add	r3,r3,r3
    b9b4:	20c7883a 	add	r3,r4,r3
    b9b8:	20c0192e 	bgeu	r4,r3,ba20 <__any_on+0x84>
    b9bc:	18bfff17 	ldw	r2,-4(r3)
    b9c0:	18ffff04 	addi	r3,r3,-4
    b9c4:	1000041e 	bne	r2,zero,b9d8 <__any_on+0x3c>
    b9c8:	20c0142e 	bgeu	r4,r3,ba1c <__any_on+0x80>
    b9cc:	18ffff04 	addi	r3,r3,-4
    b9d0:	19400017 	ldw	r5,0(r3)
    b9d4:	283ffc26 	beq	r5,zero,b9c8 <__alt_mem_Flash_flash_data+0xf400b9c8>
    b9d8:	00800044 	movi	r2,1
    b9dc:	f800283a 	ret
    b9e0:	10c00a0e 	bge	r2,r3,ba0c <__any_on+0x70>
    b9e4:	1085883a 	add	r2,r2,r2
    b9e8:	1085883a 	add	r2,r2,r2
    b9ec:	294007cc 	andi	r5,r5,31
    b9f0:	2087883a 	add	r3,r4,r2
    b9f4:	283ff026 	beq	r5,zero,b9b8 <__alt_mem_Flash_flash_data+0xf400b9b8>
    b9f8:	19800017 	ldw	r6,0(r3)
    b9fc:	3144d83a 	srl	r2,r6,r5
    ba00:	114a983a 	sll	r5,r2,r5
    ba04:	29bff41e 	bne	r5,r6,b9d8 <__alt_mem_Flash_flash_data+0xf400b9d8>
    ba08:	003feb06 	br	b9b8 <__alt_mem_Flash_flash_data+0xf400b9b8>
    ba0c:	1085883a 	add	r2,r2,r2
    ba10:	1085883a 	add	r2,r2,r2
    ba14:	2087883a 	add	r3,r4,r2
    ba18:	003fe706 	br	b9b8 <__alt_mem_Flash_flash_data+0xf400b9b8>
    ba1c:	f800283a 	ret
    ba20:	0005883a 	mov	r2,zero
    ba24:	f800283a 	ret

0000ba28 <_realloc_r>:
    ba28:	defff604 	addi	sp,sp,-40
    ba2c:	dd000415 	stw	r20,16(sp)
    ba30:	dc400115 	stw	r17,4(sp)
    ba34:	dfc00915 	stw	ra,36(sp)
    ba38:	df000815 	stw	fp,32(sp)
    ba3c:	ddc00715 	stw	r23,28(sp)
    ba40:	dd800615 	stw	r22,24(sp)
    ba44:	dd400515 	stw	r21,20(sp)
    ba48:	dcc00315 	stw	r19,12(sp)
    ba4c:	dc800215 	stw	r18,8(sp)
    ba50:	dc000015 	stw	r16,0(sp)
    ba54:	2829883a 	mov	r20,r5
    ba58:	3023883a 	mov	r17,r6
    ba5c:	2800ad26 	beq	r5,zero,bd14 <_realloc_r+0x2ec>
    ba60:	2025883a 	mov	r18,r4
    ba64:	0012f500 	call	12f50 <__malloc_lock>
    ba68:	a0ffff17 	ldw	r3,-4(r20)
    ba6c:	043fff04 	movi	r16,-4
    ba70:	890002c4 	addi	r4,r17,11
    ba74:	01c00584 	movi	r7,22
    ba78:	a57ffe04 	addi	r21,r20,-8
    ba7c:	1c20703a 	and	r16,r3,r16
    ba80:	39001d2e 	bgeu	r7,r4,baf8 <_realloc_r+0xd0>
    ba84:	05bffe04 	movi	r22,-8
    ba88:	25ac703a 	and	r22,r4,r22
    ba8c:	b00f883a 	mov	r7,r22
    ba90:	b0006516 	blt	r22,zero,bc28 <_realloc_r+0x200>
    ba94:	b4406436 	bltu	r22,r17,bc28 <_realloc_r+0x200>
    ba98:	81c01a0e 	bge	r16,r7,bb04 <_realloc_r+0xdc>
    ba9c:	070000b4 	movhi	fp,2
    baa0:	e7015704 	addi	fp,fp,1372
    baa4:	e1400217 	ldw	r5,8(fp)
    baa8:	ac11883a 	add	r8,r21,r16
    baac:	2a006226 	beq	r5,r8,bc38 <_realloc_r+0x210>
    bab0:	41800117 	ldw	r6,4(r8)
    bab4:	027fff84 	movi	r9,-2
    bab8:	3252703a 	and	r9,r6,r9
    babc:	4253883a 	add	r9,r8,r9
    bac0:	49000117 	ldw	r4,4(r9)
    bac4:	2100004c 	andi	r4,r4,1
    bac8:	2000281e 	bne	r4,zero,bb6c <_realloc_r+0x144>
    bacc:	00bfff04 	movi	r2,-4
    bad0:	3084703a 	and	r2,r6,r2
    bad4:	1409883a 	add	r4,r2,r16
    bad8:	21c05e16 	blt	r4,r7,bc54 <_realloc_r+0x22c>
    badc:	40800317 	ldw	r2,12(r8)
    bae0:	41400217 	ldw	r5,8(r8)
    bae4:	a023883a 	mov	r17,r20
    bae8:	2021883a 	mov	r16,r4
    baec:	28800315 	stw	r2,12(r5)
    baf0:	11400215 	stw	r5,8(r2)
    baf4:	00000406 	br	bb08 <_realloc_r+0xe0>
    baf8:	01c00404 	movi	r7,16
    bafc:	382d883a 	mov	r22,r7
    bb00:	003fe406 	br	ba94 <__alt_mem_Flash_flash_data+0xf400ba94>
    bb04:	a023883a 	mov	r17,r20
    bb08:	858fc83a 	sub	r7,r16,r22
    bb0c:	008003c4 	movi	r2,15
    bb10:	18c0004c 	andi	r3,r3,1
    bb14:	11c07236 	bltu	r2,r7,bce0 <_realloc_r+0x2b8>
    bb18:	1c06b03a 	or	r3,r3,r16
    bb1c:	a8c00115 	stw	r3,4(r21)
    bb20:	ac21883a 	add	r16,r21,r16
    bb24:	80800117 	ldw	r2,4(r16)
    bb28:	10800054 	ori	r2,r2,1
    bb2c:	80800115 	stw	r2,4(r16)
    bb30:	9009883a 	mov	r4,r18
    bb34:	00130700 	call	13070 <__malloc_unlock>
    bb38:	8805883a 	mov	r2,r17
    bb3c:	dfc00917 	ldw	ra,36(sp)
    bb40:	df000817 	ldw	fp,32(sp)
    bb44:	ddc00717 	ldw	r23,28(sp)
    bb48:	dd800617 	ldw	r22,24(sp)
    bb4c:	dd400517 	ldw	r21,20(sp)
    bb50:	dd000417 	ldw	r20,16(sp)
    bb54:	dcc00317 	ldw	r19,12(sp)
    bb58:	dc800217 	ldw	r18,8(sp)
    bb5c:	dc400117 	ldw	r17,4(sp)
    bb60:	dc000017 	ldw	r16,0(sp)
    bb64:	dec00a04 	addi	sp,sp,40
    bb68:	f800283a 	ret
    bb6c:	18c0004c 	andi	r3,r3,1
    bb70:	1800081e 	bne	r3,zero,bb94 <_realloc_r+0x16c>
    bb74:	a4fffe17 	ldw	r19,-8(r20)
    bb78:	00bfff04 	movi	r2,-4
    bb7c:	ace7c83a 	sub	r19,r21,r19
    bb80:	98c00117 	ldw	r3,4(r19)
    bb84:	1886703a 	and	r3,r3,r2
    bb88:	98000226 	beq	r19,zero,bb94 <_realloc_r+0x16c>
    bb8c:	1c2f883a 	add	r23,r3,r16
    bb90:	b9c06d0e 	bge	r23,r7,bd48 <_realloc_r+0x320>
    bb94:	880b883a 	mov	r5,r17
    bb98:	9009883a 	mov	r4,r18
    bb9c:	0009e400 	call	9e40 <_malloc_r>
    bba0:	1023883a 	mov	r17,r2
    bba4:	1000ef26 	beq	r2,zero,bf64 <_realloc_r+0x53c>
    bba8:	a0ffff17 	ldw	r3,-4(r20)
    bbac:	113ffe04 	addi	r4,r2,-8
    bbb0:	00bfff84 	movi	r2,-2
    bbb4:	1884703a 	and	r2,r3,r2
    bbb8:	a885883a 	add	r2,r21,r2
    bbbc:	2080bf26 	beq	r4,r2,bebc <_realloc_r+0x494>
    bbc0:	81bfff04 	addi	r6,r16,-4
    bbc4:	00800904 	movi	r2,36
    bbc8:	11808936 	bltu	r2,r6,bdf0 <_realloc_r+0x3c8>
    bbcc:	00c004c4 	movi	r3,19
    bbd0:	19806c2e 	bgeu	r3,r6,bd84 <_realloc_r+0x35c>
    bbd4:	a0c00017 	ldw	r3,0(r20)
    bbd8:	88c00015 	stw	r3,0(r17)
    bbdc:	a0c00117 	ldw	r3,4(r20)
    bbe0:	88c00115 	stw	r3,4(r17)
    bbe4:	00c006c4 	movi	r3,27
    bbe8:	1980ac36 	bltu	r3,r6,be9c <_realloc_r+0x474>
    bbec:	88800204 	addi	r2,r17,8
    bbf0:	a0c00204 	addi	r3,r20,8
    bbf4:	19000017 	ldw	r4,0(r3)
    bbf8:	11000015 	stw	r4,0(r2)
    bbfc:	19000117 	ldw	r4,4(r3)
    bc00:	11000115 	stw	r4,4(r2)
    bc04:	18c00217 	ldw	r3,8(r3)
    bc08:	10c00215 	stw	r3,8(r2)
    bc0c:	a00b883a 	mov	r5,r20
    bc10:	9009883a 	mov	r4,r18
    bc14:	00092700 	call	9270 <_free_r>
    bc18:	9009883a 	mov	r4,r18
    bc1c:	00130700 	call	13070 <__malloc_unlock>
    bc20:	8805883a 	mov	r2,r17
    bc24:	003fc506 	br	bb3c <__alt_mem_Flash_flash_data+0xf400bb3c>
    bc28:	00800304 	movi	r2,12
    bc2c:	90800015 	stw	r2,0(r18)
    bc30:	0005883a 	mov	r2,zero
    bc34:	003fc106 	br	bb3c <__alt_mem_Flash_flash_data+0xf400bb3c>
    bc38:	29800117 	ldw	r6,4(r5)
    bc3c:	00bfff04 	movi	r2,-4
    bc40:	b1000404 	addi	r4,r22,16
    bc44:	3084703a 	and	r2,r6,r2
    bc48:	140d883a 	add	r6,r2,r16
    bc4c:	31005b0e 	bge	r6,r4,bdbc <_realloc_r+0x394>
    bc50:	2811883a 	mov	r8,r5
    bc54:	18c0004c 	andi	r3,r3,1
    bc58:	183fce1e 	bne	r3,zero,bb94 <__alt_mem_Flash_flash_data+0xf400bb94>
    bc5c:	a4fffe17 	ldw	r19,-8(r20)
    bc60:	00ffff04 	movi	r3,-4
    bc64:	ace7c83a 	sub	r19,r21,r19
    bc68:	99000117 	ldw	r4,4(r19)
    bc6c:	20c6703a 	and	r3,r4,r3
    bc70:	403fc526 	beq	r8,zero,bb88 <__alt_mem_Flash_flash_data+0xf400bb88>
    bc74:	1c2f883a 	add	r23,r3,r16
    bc78:	b8af883a 	add	r23,r23,r2
    bc7c:	41406026 	beq	r8,r5,be00 <_realloc_r+0x3d8>
    bc80:	b9ffc116 	blt	r23,r7,bb88 <__alt_mem_Flash_flash_data+0xf400bb88>
    bc84:	40c00217 	ldw	r3,8(r8)
    bc88:	40800317 	ldw	r2,12(r8)
    bc8c:	81bfff04 	addi	r6,r16,-4
    bc90:	01000904 	movi	r4,36
    bc94:	18800315 	stw	r2,12(r3)
    bc98:	10c00215 	stw	r3,8(r2)
    bc9c:	99400217 	ldw	r5,8(r19)
    bca0:	98c00317 	ldw	r3,12(r19)
    bca4:	9c400204 	addi	r17,r19,8
    bca8:	28c00315 	stw	r3,12(r5)
    bcac:	19400215 	stw	r5,8(r3)
    bcb0:	21802d36 	bltu	r4,r6,bd68 <_realloc_r+0x340>
    bcb4:	008004c4 	movi	r2,19
    bcb8:	1180352e 	bgeu	r2,r6,bd90 <_realloc_r+0x368>
    bcbc:	a0800017 	ldw	r2,0(r20)
    bcc0:	98800215 	stw	r2,8(r19)
    bcc4:	a0800117 	ldw	r2,4(r20)
    bcc8:	98800315 	stw	r2,12(r19)
    bccc:	008006c4 	movi	r2,27
    bcd0:	11808036 	bltu	r2,r6,bed4 <_realloc_r+0x4ac>
    bcd4:	98c00404 	addi	r3,r19,16
    bcd8:	a5000204 	addi	r20,r20,8
    bcdc:	00002d06 	br	bd94 <_realloc_r+0x36c>
    bce0:	1d86b03a 	or	r3,r3,r22
    bce4:	ad8b883a 	add	r5,r21,r22
    bce8:	a8c00115 	stw	r3,4(r21)
    bcec:	38800054 	ori	r2,r7,1
    bcf0:	28800115 	stw	r2,4(r5)
    bcf4:	29cf883a 	add	r7,r5,r7
    bcf8:	38800117 	ldw	r2,4(r7)
    bcfc:	9009883a 	mov	r4,r18
    bd00:	29400204 	addi	r5,r5,8
    bd04:	10800054 	ori	r2,r2,1
    bd08:	38800115 	stw	r2,4(r7)
    bd0c:	00092700 	call	9270 <_free_r>
    bd10:	003f8706 	br	bb30 <__alt_mem_Flash_flash_data+0xf400bb30>
    bd14:	300b883a 	mov	r5,r6
    bd18:	dfc00917 	ldw	ra,36(sp)
    bd1c:	df000817 	ldw	fp,32(sp)
    bd20:	ddc00717 	ldw	r23,28(sp)
    bd24:	dd800617 	ldw	r22,24(sp)
    bd28:	dd400517 	ldw	r21,20(sp)
    bd2c:	dd000417 	ldw	r20,16(sp)
    bd30:	dcc00317 	ldw	r19,12(sp)
    bd34:	dc800217 	ldw	r18,8(sp)
    bd38:	dc400117 	ldw	r17,4(sp)
    bd3c:	dc000017 	ldw	r16,0(sp)
    bd40:	dec00a04 	addi	sp,sp,40
    bd44:	0009e401 	jmpi	9e40 <_malloc_r>
    bd48:	98800317 	ldw	r2,12(r19)
    bd4c:	98c00217 	ldw	r3,8(r19)
    bd50:	81bfff04 	addi	r6,r16,-4
    bd54:	01000904 	movi	r4,36
    bd58:	18800315 	stw	r2,12(r3)
    bd5c:	10c00215 	stw	r3,8(r2)
    bd60:	9c400204 	addi	r17,r19,8
    bd64:	21bfd32e 	bgeu	r4,r6,bcb4 <__alt_mem_Flash_flash_data+0xf400bcb4>
    bd68:	8809883a 	mov	r4,r17
    bd6c:	a00b883a 	mov	r5,r20
    bd70:	000a8080 	call	a808 <memmove>
    bd74:	98c00117 	ldw	r3,4(r19)
    bd78:	b821883a 	mov	r16,r23
    bd7c:	982b883a 	mov	r21,r19
    bd80:	003f6106 	br	bb08 <__alt_mem_Flash_flash_data+0xf400bb08>
    bd84:	8805883a 	mov	r2,r17
    bd88:	a007883a 	mov	r3,r20
    bd8c:	003f9906 	br	bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    bd90:	8807883a 	mov	r3,r17
    bd94:	a0800017 	ldw	r2,0(r20)
    bd98:	b821883a 	mov	r16,r23
    bd9c:	982b883a 	mov	r21,r19
    bda0:	18800015 	stw	r2,0(r3)
    bda4:	a0800117 	ldw	r2,4(r20)
    bda8:	18800115 	stw	r2,4(r3)
    bdac:	a0800217 	ldw	r2,8(r20)
    bdb0:	18800215 	stw	r2,8(r3)
    bdb4:	98c00117 	ldw	r3,4(r19)
    bdb8:	003f5306 	br	bb08 <__alt_mem_Flash_flash_data+0xf400bb08>
    bdbc:	adab883a 	add	r21,r21,r22
    bdc0:	3585c83a 	sub	r2,r6,r22
    bdc4:	e5400215 	stw	r21,8(fp)
    bdc8:	10800054 	ori	r2,r2,1
    bdcc:	a8800115 	stw	r2,4(r21)
    bdd0:	a0bfff17 	ldw	r2,-4(r20)
    bdd4:	9009883a 	mov	r4,r18
    bdd8:	1080004c 	andi	r2,r2,1
    bddc:	b0acb03a 	or	r22,r22,r2
    bde0:	a5bfff15 	stw	r22,-4(r20)
    bde4:	00130700 	call	13070 <__malloc_unlock>
    bde8:	a005883a 	mov	r2,r20
    bdec:	003f5306 	br	bb3c <__alt_mem_Flash_flash_data+0xf400bb3c>
    bdf0:	8809883a 	mov	r4,r17
    bdf4:	a00b883a 	mov	r5,r20
    bdf8:	000a8080 	call	a808 <memmove>
    bdfc:	003f8306 	br	bc0c <__alt_mem_Flash_flash_data+0xf400bc0c>
    be00:	b0800404 	addi	r2,r22,16
    be04:	b8bf6016 	blt	r23,r2,bb88 <__alt_mem_Flash_flash_data+0xf400bb88>
    be08:	98800317 	ldw	r2,12(r19)
    be0c:	98c00217 	ldw	r3,8(r19)
    be10:	81bfff04 	addi	r6,r16,-4
    be14:	01000904 	movi	r4,36
    be18:	18800315 	stw	r2,12(r3)
    be1c:	10c00215 	stw	r3,8(r2)
    be20:	9c400204 	addi	r17,r19,8
    be24:	21804336 	bltu	r4,r6,bf34 <_realloc_r+0x50c>
    be28:	008004c4 	movi	r2,19
    be2c:	11803f2e 	bgeu	r2,r6,bf2c <_realloc_r+0x504>
    be30:	a0800017 	ldw	r2,0(r20)
    be34:	98800215 	stw	r2,8(r19)
    be38:	a0800117 	ldw	r2,4(r20)
    be3c:	98800315 	stw	r2,12(r19)
    be40:	008006c4 	movi	r2,27
    be44:	11803f36 	bltu	r2,r6,bf44 <_realloc_r+0x51c>
    be48:	98800404 	addi	r2,r19,16
    be4c:	a5000204 	addi	r20,r20,8
    be50:	a0c00017 	ldw	r3,0(r20)
    be54:	10c00015 	stw	r3,0(r2)
    be58:	a0c00117 	ldw	r3,4(r20)
    be5c:	10c00115 	stw	r3,4(r2)
    be60:	a0c00217 	ldw	r3,8(r20)
    be64:	10c00215 	stw	r3,8(r2)
    be68:	9d87883a 	add	r3,r19,r22
    be6c:	bd85c83a 	sub	r2,r23,r22
    be70:	e0c00215 	stw	r3,8(fp)
    be74:	10800054 	ori	r2,r2,1
    be78:	18800115 	stw	r2,4(r3)
    be7c:	98800117 	ldw	r2,4(r19)
    be80:	9009883a 	mov	r4,r18
    be84:	1080004c 	andi	r2,r2,1
    be88:	b0acb03a 	or	r22,r22,r2
    be8c:	9d800115 	stw	r22,4(r19)
    be90:	00130700 	call	13070 <__malloc_unlock>
    be94:	8805883a 	mov	r2,r17
    be98:	003f2806 	br	bb3c <__alt_mem_Flash_flash_data+0xf400bb3c>
    be9c:	a0c00217 	ldw	r3,8(r20)
    bea0:	88c00215 	stw	r3,8(r17)
    bea4:	a0c00317 	ldw	r3,12(r20)
    bea8:	88c00315 	stw	r3,12(r17)
    beac:	30801126 	beq	r6,r2,bef4 <_realloc_r+0x4cc>
    beb0:	88800404 	addi	r2,r17,16
    beb4:	a0c00404 	addi	r3,r20,16
    beb8:	003f4e06 	br	bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    bebc:	893fff17 	ldw	r4,-4(r17)
    bec0:	00bfff04 	movi	r2,-4
    bec4:	a023883a 	mov	r17,r20
    bec8:	2084703a 	and	r2,r4,r2
    becc:	80a1883a 	add	r16,r16,r2
    bed0:	003f0d06 	br	bb08 <__alt_mem_Flash_flash_data+0xf400bb08>
    bed4:	a0800217 	ldw	r2,8(r20)
    bed8:	98800415 	stw	r2,16(r19)
    bedc:	a0800317 	ldw	r2,12(r20)
    bee0:	98800515 	stw	r2,20(r19)
    bee4:	31000a26 	beq	r6,r4,bf10 <_realloc_r+0x4e8>
    bee8:	98c00604 	addi	r3,r19,24
    beec:	a5000404 	addi	r20,r20,16
    bef0:	003fa806 	br	bd94 <__alt_mem_Flash_flash_data+0xf400bd94>
    bef4:	a1000417 	ldw	r4,16(r20)
    bef8:	88800604 	addi	r2,r17,24
    befc:	a0c00604 	addi	r3,r20,24
    bf00:	89000415 	stw	r4,16(r17)
    bf04:	a1000517 	ldw	r4,20(r20)
    bf08:	89000515 	stw	r4,20(r17)
    bf0c:	003f3906 	br	bbf4 <__alt_mem_Flash_flash_data+0xf400bbf4>
    bf10:	a0800417 	ldw	r2,16(r20)
    bf14:	a5000604 	addi	r20,r20,24
    bf18:	98c00804 	addi	r3,r19,32
    bf1c:	98800615 	stw	r2,24(r19)
    bf20:	a0bfff17 	ldw	r2,-4(r20)
    bf24:	98800715 	stw	r2,28(r19)
    bf28:	003f9a06 	br	bd94 <__alt_mem_Flash_flash_data+0xf400bd94>
    bf2c:	8805883a 	mov	r2,r17
    bf30:	003fc706 	br	be50 <__alt_mem_Flash_flash_data+0xf400be50>
    bf34:	8809883a 	mov	r4,r17
    bf38:	a00b883a 	mov	r5,r20
    bf3c:	000a8080 	call	a808 <memmove>
    bf40:	003fc906 	br	be68 <__alt_mem_Flash_flash_data+0xf400be68>
    bf44:	a0800217 	ldw	r2,8(r20)
    bf48:	98800415 	stw	r2,16(r19)
    bf4c:	a0800317 	ldw	r2,12(r20)
    bf50:	98800515 	stw	r2,20(r19)
    bf54:	31000726 	beq	r6,r4,bf74 <_realloc_r+0x54c>
    bf58:	98800604 	addi	r2,r19,24
    bf5c:	a5000404 	addi	r20,r20,16
    bf60:	003fbb06 	br	be50 <__alt_mem_Flash_flash_data+0xf400be50>
    bf64:	9009883a 	mov	r4,r18
    bf68:	00130700 	call	13070 <__malloc_unlock>
    bf6c:	0005883a 	mov	r2,zero
    bf70:	003ef206 	br	bb3c <__alt_mem_Flash_flash_data+0xf400bb3c>
    bf74:	a0c00417 	ldw	r3,16(r20)
    bf78:	a5000604 	addi	r20,r20,24
    bf7c:	98800804 	addi	r2,r19,32
    bf80:	98c00615 	stw	r3,24(r19)
    bf84:	a0ffff17 	ldw	r3,-4(r20)
    bf88:	98c00715 	stw	r3,28(r19)
    bf8c:	003fb006 	br	be50 <__alt_mem_Flash_flash_data+0xf400be50>

0000bf90 <__fpclassifyd>:
    bf90:	00a00034 	movhi	r2,32768
    bf94:	10bfffc4 	addi	r2,r2,-1
    bf98:	2884703a 	and	r2,r5,r2
    bf9c:	10000726 	beq	r2,zero,bfbc <__fpclassifyd+0x2c>
    bfa0:	00fffc34 	movhi	r3,65520
    bfa4:	019ff834 	movhi	r6,32736
    bfa8:	28c7883a 	add	r3,r5,r3
    bfac:	31bfffc4 	addi	r6,r6,-1
    bfb0:	30c00536 	bltu	r6,r3,bfc8 <__fpclassifyd+0x38>
    bfb4:	00800104 	movi	r2,4
    bfb8:	f800283a 	ret
    bfbc:	2000021e 	bne	r4,zero,bfc8 <__fpclassifyd+0x38>
    bfc0:	00800084 	movi	r2,2
    bfc4:	f800283a 	ret
    bfc8:	00dffc34 	movhi	r3,32752
    bfcc:	019ff834 	movhi	r6,32736
    bfd0:	28cb883a 	add	r5,r5,r3
    bfd4:	31bfffc4 	addi	r6,r6,-1
    bfd8:	317ff62e 	bgeu	r6,r5,bfb4 <__alt_mem_Flash_flash_data+0xf400bfb4>
    bfdc:	01400434 	movhi	r5,16
    bfe0:	297fffc4 	addi	r5,r5,-1
    bfe4:	28800236 	bltu	r5,r2,bff0 <__fpclassifyd+0x60>
    bfe8:	008000c4 	movi	r2,3
    bfec:	f800283a 	ret
    bff0:	10c00226 	beq	r2,r3,bffc <__fpclassifyd+0x6c>
    bff4:	0005883a 	mov	r2,zero
    bff8:	f800283a 	ret
    bffc:	2005003a 	cmpeq	r2,r4,zero
    c000:	f800283a 	ret

0000c004 <_sbrk_r>:
    c004:	defffd04 	addi	sp,sp,-12
    c008:	dc000015 	stw	r16,0(sp)
    c00c:	040000b4 	movhi	r16,2
    c010:	dc400115 	stw	r17,4(sp)
    c014:	840fe804 	addi	r16,r16,16288
    c018:	2023883a 	mov	r17,r4
    c01c:	2809883a 	mov	r4,r5
    c020:	dfc00215 	stw	ra,8(sp)
    c024:	80000015 	stw	zero,0(r16)
    c028:	0012c3c0 	call	12c3c <sbrk>
    c02c:	00ffffc4 	movi	r3,-1
    c030:	10c00526 	beq	r2,r3,c048 <_sbrk_r+0x44>
    c034:	dfc00217 	ldw	ra,8(sp)
    c038:	dc400117 	ldw	r17,4(sp)
    c03c:	dc000017 	ldw	r16,0(sp)
    c040:	dec00304 	addi	sp,sp,12
    c044:	f800283a 	ret
    c048:	80c00017 	ldw	r3,0(r16)
    c04c:	183ff926 	beq	r3,zero,c034 <__alt_mem_Flash_flash_data+0xf400c034>
    c050:	88c00015 	stw	r3,0(r17)
    c054:	003ff706 	br	c034 <__alt_mem_Flash_flash_data+0xf400c034>

0000c058 <__sread>:
    c058:	defffe04 	addi	sp,sp,-8
    c05c:	dc000015 	stw	r16,0(sp)
    c060:	2821883a 	mov	r16,r5
    c064:	2940038f 	ldh	r5,14(r5)
    c068:	dfc00115 	stw	ra,4(sp)
    c06c:	000ee600 	call	ee60 <_read_r>
    c070:	10000716 	blt	r2,zero,c090 <__sread+0x38>
    c074:	80c01417 	ldw	r3,80(r16)
    c078:	1887883a 	add	r3,r3,r2
    c07c:	80c01415 	stw	r3,80(r16)
    c080:	dfc00117 	ldw	ra,4(sp)
    c084:	dc000017 	ldw	r16,0(sp)
    c088:	dec00204 	addi	sp,sp,8
    c08c:	f800283a 	ret
    c090:	80c0030b 	ldhu	r3,12(r16)
    c094:	18fbffcc 	andi	r3,r3,61439
    c098:	80c0030d 	sth	r3,12(r16)
    c09c:	dfc00117 	ldw	ra,4(sp)
    c0a0:	dc000017 	ldw	r16,0(sp)
    c0a4:	dec00204 	addi	sp,sp,8
    c0a8:	f800283a 	ret

0000c0ac <__seofread>:
    c0ac:	0005883a 	mov	r2,zero
    c0b0:	f800283a 	ret

0000c0b4 <__swrite>:
    c0b4:	2880030b 	ldhu	r2,12(r5)
    c0b8:	defffb04 	addi	sp,sp,-20
    c0bc:	dcc00315 	stw	r19,12(sp)
    c0c0:	dc800215 	stw	r18,8(sp)
    c0c4:	dc400115 	stw	r17,4(sp)
    c0c8:	dc000015 	stw	r16,0(sp)
    c0cc:	dfc00415 	stw	ra,16(sp)
    c0d0:	10c0400c 	andi	r3,r2,256
    c0d4:	2821883a 	mov	r16,r5
    c0d8:	2027883a 	mov	r19,r4
    c0dc:	3025883a 	mov	r18,r6
    c0e0:	3823883a 	mov	r17,r7
    c0e4:	18000526 	beq	r3,zero,c0fc <__swrite+0x48>
    c0e8:	2940038f 	ldh	r5,14(r5)
    c0ec:	000d883a 	mov	r6,zero
    c0f0:	01c00084 	movi	r7,2
    c0f4:	000ee040 	call	ee04 <_lseek_r>
    c0f8:	8080030b 	ldhu	r2,12(r16)
    c0fc:	8140038f 	ldh	r5,14(r16)
    c100:	10bbffcc 	andi	r2,r2,61439
    c104:	9809883a 	mov	r4,r19
    c108:	900d883a 	mov	r6,r18
    c10c:	880f883a 	mov	r7,r17
    c110:	8080030d 	sth	r2,12(r16)
    c114:	dfc00417 	ldw	ra,16(sp)
    c118:	dcc00317 	ldw	r19,12(sp)
    c11c:	dc800217 	ldw	r18,8(sp)
    c120:	dc400117 	ldw	r17,4(sp)
    c124:	dc000017 	ldw	r16,0(sp)
    c128:	dec00504 	addi	sp,sp,20
    c12c:	000e9001 	jmpi	e900 <_write_r>

0000c130 <__sseek>:
    c130:	defffe04 	addi	sp,sp,-8
    c134:	dc000015 	stw	r16,0(sp)
    c138:	2821883a 	mov	r16,r5
    c13c:	2940038f 	ldh	r5,14(r5)
    c140:	dfc00115 	stw	ra,4(sp)
    c144:	000ee040 	call	ee04 <_lseek_r>
    c148:	00ffffc4 	movi	r3,-1
    c14c:	10c00826 	beq	r2,r3,c170 <__sseek+0x40>
    c150:	80c0030b 	ldhu	r3,12(r16)
    c154:	80801415 	stw	r2,80(r16)
    c158:	18c40014 	ori	r3,r3,4096
    c15c:	80c0030d 	sth	r3,12(r16)
    c160:	dfc00117 	ldw	ra,4(sp)
    c164:	dc000017 	ldw	r16,0(sp)
    c168:	dec00204 	addi	sp,sp,8
    c16c:	f800283a 	ret
    c170:	80c0030b 	ldhu	r3,12(r16)
    c174:	18fbffcc 	andi	r3,r3,61439
    c178:	80c0030d 	sth	r3,12(r16)
    c17c:	dfc00117 	ldw	ra,4(sp)
    c180:	dc000017 	ldw	r16,0(sp)
    c184:	dec00204 	addi	sp,sp,8
    c188:	f800283a 	ret

0000c18c <__sclose>:
    c18c:	2940038f 	ldh	r5,14(r5)
    c190:	000e95c1 	jmpi	e95c <_close_r>

0000c194 <strcmp>:
    c194:	2144b03a 	or	r2,r4,r5
    c198:	108000cc 	andi	r2,r2,3
    c19c:	1000171e 	bne	r2,zero,c1fc <strcmp+0x68>
    c1a0:	20800017 	ldw	r2,0(r4)
    c1a4:	28c00017 	ldw	r3,0(r5)
    c1a8:	10c0141e 	bne	r2,r3,c1fc <strcmp+0x68>
    c1ac:	027fbff4 	movhi	r9,65279
    c1b0:	4a7fbfc4 	addi	r9,r9,-257
    c1b4:	0086303a 	nor	r3,zero,r2
    c1b8:	02202074 	movhi	r8,32897
    c1bc:	1245883a 	add	r2,r2,r9
    c1c0:	42202004 	addi	r8,r8,-32640
    c1c4:	10c4703a 	and	r2,r2,r3
    c1c8:	1204703a 	and	r2,r2,r8
    c1cc:	10000226 	beq	r2,zero,c1d8 <strcmp+0x44>
    c1d0:	00001706 	br	c230 <strcmp+0x9c>
    c1d4:	1000161e 	bne	r2,zero,c230 <strcmp+0x9c>
    c1d8:	21000104 	addi	r4,r4,4
    c1dc:	20c00017 	ldw	r3,0(r4)
    c1e0:	29400104 	addi	r5,r5,4
    c1e4:	29800017 	ldw	r6,0(r5)
    c1e8:	1a4f883a 	add	r7,r3,r9
    c1ec:	00c4303a 	nor	r2,zero,r3
    c1f0:	3884703a 	and	r2,r7,r2
    c1f4:	1204703a 	and	r2,r2,r8
    c1f8:	19bff626 	beq	r3,r6,c1d4 <__alt_mem_Flash_flash_data+0xf400c1d4>
    c1fc:	20800007 	ldb	r2,0(r4)
    c200:	1000051e 	bne	r2,zero,c218 <strcmp+0x84>
    c204:	00000606 	br	c220 <strcmp+0x8c>
    c208:	21000044 	addi	r4,r4,1
    c20c:	20800007 	ldb	r2,0(r4)
    c210:	29400044 	addi	r5,r5,1
    c214:	10000226 	beq	r2,zero,c220 <strcmp+0x8c>
    c218:	28c00007 	ldb	r3,0(r5)
    c21c:	10fffa26 	beq	r2,r3,c208 <__alt_mem_Flash_flash_data+0xf400c208>
    c220:	20800003 	ldbu	r2,0(r4)
    c224:	28c00003 	ldbu	r3,0(r5)
    c228:	10c5c83a 	sub	r2,r2,r3
    c22c:	f800283a 	ret
    c230:	0005883a 	mov	r2,zero
    c234:	f800283a 	ret

0000c238 <__ssprint_r>:
    c238:	30800217 	ldw	r2,8(r6)
    c23c:	defff604 	addi	sp,sp,-40
    c240:	ddc00715 	stw	r23,28(sp)
    c244:	dc800215 	stw	r18,8(sp)
    c248:	dfc00915 	stw	ra,36(sp)
    c24c:	df000815 	stw	fp,32(sp)
    c250:	dd800615 	stw	r22,24(sp)
    c254:	dd400515 	stw	r21,20(sp)
    c258:	dd000415 	stw	r20,16(sp)
    c25c:	dcc00315 	stw	r19,12(sp)
    c260:	dc400115 	stw	r17,4(sp)
    c264:	dc000015 	stw	r16,0(sp)
    c268:	3025883a 	mov	r18,r6
    c26c:	35c00017 	ldw	r23,0(r6)
    c270:	10005626 	beq	r2,zero,c3cc <__ssprint_r+0x194>
    c274:	2027883a 	mov	r19,r4
    c278:	28800217 	ldw	r2,8(r5)
    c27c:	29000017 	ldw	r4,0(r5)
    c280:	2823883a 	mov	r17,r5
    c284:	0039883a 	mov	fp,zero
    c288:	0021883a 	mov	r16,zero
    c28c:	80003926 	beq	r16,zero,c374 <__ssprint_r+0x13c>
    c290:	102b883a 	mov	r21,r2
    c294:	102d883a 	mov	r22,r2
    c298:	80803a36 	bltu	r16,r2,c384 <__ssprint_r+0x14c>
    c29c:	88c0030b 	ldhu	r3,12(r17)
    c2a0:	1881200c 	andi	r2,r3,1152
    c2a4:	10002626 	beq	r2,zero,c340 <__ssprint_r+0x108>
    c2a8:	88800517 	ldw	r2,20(r17)
    c2ac:	89400417 	ldw	r5,16(r17)
    c2b0:	81c00044 	addi	r7,r16,1
    c2b4:	108d883a 	add	r6,r2,r2
    c2b8:	3085883a 	add	r2,r6,r2
    c2bc:	100cd7fa 	srli	r6,r2,31
    c2c0:	216dc83a 	sub	r22,r4,r5
    c2c4:	3d89883a 	add	r4,r7,r22
    c2c8:	3085883a 	add	r2,r6,r2
    c2cc:	102bd07a 	srai	r21,r2,1
    c2d0:	a80d883a 	mov	r6,r21
    c2d4:	a900022e 	bgeu	r21,r4,c2e0 <__ssprint_r+0xa8>
    c2d8:	202b883a 	mov	r21,r4
    c2dc:	200d883a 	mov	r6,r4
    c2e0:	18c1000c 	andi	r3,r3,1024
    c2e4:	9809883a 	mov	r4,r19
    c2e8:	18002926 	beq	r3,zero,c390 <__ssprint_r+0x158>
    c2ec:	300b883a 	mov	r5,r6
    c2f0:	0009e400 	call	9e40 <_malloc_r>
    c2f4:	1029883a 	mov	r20,r2
    c2f8:	10002b26 	beq	r2,zero,c3a8 <__ssprint_r+0x170>
    c2fc:	89400417 	ldw	r5,16(r17)
    c300:	1009883a 	mov	r4,r2
    c304:	b00d883a 	mov	r6,r22
    c308:	000a6d00 	call	a6d0 <memcpy>
    c30c:	8880030b 	ldhu	r2,12(r17)
    c310:	00fedfc4 	movi	r3,-1153
    c314:	10c4703a 	and	r2,r2,r3
    c318:	10802014 	ori	r2,r2,128
    c31c:	8880030d 	sth	r2,12(r17)
    c320:	a589883a 	add	r4,r20,r22
    c324:	adadc83a 	sub	r22,r21,r22
    c328:	8d400515 	stw	r21,20(r17)
    c32c:	8d800215 	stw	r22,8(r17)
    c330:	8d000415 	stw	r20,16(r17)
    c334:	89000015 	stw	r4,0(r17)
    c338:	802b883a 	mov	r21,r16
    c33c:	802d883a 	mov	r22,r16
    c340:	e00b883a 	mov	r5,fp
    c344:	b00d883a 	mov	r6,r22
    c348:	000a8080 	call	a808 <memmove>
    c34c:	88800217 	ldw	r2,8(r17)
    c350:	89000017 	ldw	r4,0(r17)
    c354:	90c00217 	ldw	r3,8(r18)
    c358:	1545c83a 	sub	r2,r2,r21
    c35c:	2589883a 	add	r4,r4,r22
    c360:	88800215 	stw	r2,8(r17)
    c364:	89000015 	stw	r4,0(r17)
    c368:	1c21c83a 	sub	r16,r3,r16
    c36c:	94000215 	stw	r16,8(r18)
    c370:	80001626 	beq	r16,zero,c3cc <__ssprint_r+0x194>
    c374:	bf000017 	ldw	fp,0(r23)
    c378:	bc000117 	ldw	r16,4(r23)
    c37c:	bdc00204 	addi	r23,r23,8
    c380:	003fc206 	br	c28c <__alt_mem_Flash_flash_data+0xf400c28c>
    c384:	802b883a 	mov	r21,r16
    c388:	802d883a 	mov	r22,r16
    c38c:	003fec06 	br	c340 <__alt_mem_Flash_flash_data+0xf400c340>
    c390:	000ba280 	call	ba28 <_realloc_r>
    c394:	1029883a 	mov	r20,r2
    c398:	103fe11e 	bne	r2,zero,c320 <__alt_mem_Flash_flash_data+0xf400c320>
    c39c:	89400417 	ldw	r5,16(r17)
    c3a0:	9809883a 	mov	r4,r19
    c3a4:	00092700 	call	9270 <_free_r>
    c3a8:	88c0030b 	ldhu	r3,12(r17)
    c3ac:	00800304 	movi	r2,12
    c3b0:	98800015 	stw	r2,0(r19)
    c3b4:	18c01014 	ori	r3,r3,64
    c3b8:	88c0030d 	sth	r3,12(r17)
    c3bc:	00bfffc4 	movi	r2,-1
    c3c0:	90000215 	stw	zero,8(r18)
    c3c4:	90000115 	stw	zero,4(r18)
    c3c8:	00000206 	br	c3d4 <__ssprint_r+0x19c>
    c3cc:	90000115 	stw	zero,4(r18)
    c3d0:	0005883a 	mov	r2,zero
    c3d4:	dfc00917 	ldw	ra,36(sp)
    c3d8:	df000817 	ldw	fp,32(sp)
    c3dc:	ddc00717 	ldw	r23,28(sp)
    c3e0:	dd800617 	ldw	r22,24(sp)
    c3e4:	dd400517 	ldw	r21,20(sp)
    c3e8:	dd000417 	ldw	r20,16(sp)
    c3ec:	dcc00317 	ldw	r19,12(sp)
    c3f0:	dc800217 	ldw	r18,8(sp)
    c3f4:	dc400117 	ldw	r17,4(sp)
    c3f8:	dc000017 	ldw	r16,0(sp)
    c3fc:	dec00a04 	addi	sp,sp,40
    c400:	f800283a 	ret

0000c404 <___svfiprintf_internal_r>:
    c404:	2880030b 	ldhu	r2,12(r5)
    c408:	deffc904 	addi	sp,sp,-220
    c40c:	dd403215 	stw	r21,200(sp)
    c410:	dfc03615 	stw	ra,216(sp)
    c414:	df003515 	stw	fp,212(sp)
    c418:	ddc03415 	stw	r23,208(sp)
    c41c:	dd803315 	stw	r22,204(sp)
    c420:	dd003115 	stw	r20,196(sp)
    c424:	dcc03015 	stw	r19,192(sp)
    c428:	dc802f15 	stw	r18,188(sp)
    c42c:	dc402e15 	stw	r17,184(sp)
    c430:	dc002d15 	stw	r16,180(sp)
    c434:	d9402715 	stw	r5,156(sp)
    c438:	d9002915 	stw	r4,164(sp)
    c43c:	1080200c 	andi	r2,r2,128
    c440:	d9c02315 	stw	r7,140(sp)
    c444:	302b883a 	mov	r21,r6
    c448:	10000226 	beq	r2,zero,c454 <___svfiprintf_internal_r+0x50>
    c44c:	28800417 	ldw	r2,16(r5)
    c450:	1003ce26 	beq	r2,zero,d38c <___svfiprintf_internal_r+0xf88>
    c454:	dac01a04 	addi	r11,sp,104
    c458:	da8019c4 	addi	r10,sp,103
    c45c:	dc802917 	ldw	r18,164(sp)
    c460:	dd002717 	ldw	r20,156(sp)
    c464:	04c000b4 	movhi	r19,2
    c468:	dac01e15 	stw	r11,120(sp)
    c46c:	5a97c83a 	sub	r11,r11,r10
    c470:	9cff2504 	addi	r19,r19,-876
    c474:	da801f15 	stw	r10,124(sp)
    c478:	dec01a15 	stw	sp,104(sp)
    c47c:	d8001c15 	stw	zero,112(sp)
    c480:	d8001b15 	stw	zero,108(sp)
    c484:	d811883a 	mov	r8,sp
    c488:	d8002a15 	stw	zero,168(sp)
    c48c:	d8002415 	stw	zero,144(sp)
    c490:	dac02b15 	stw	r11,172(sp)
    c494:	a8800007 	ldb	r2,0(r21)
    c498:	10026a26 	beq	r2,zero,ce44 <___svfiprintf_internal_r+0xa40>
    c49c:	01000944 	movi	r4,37
    c4a0:	11026826 	beq	r2,r4,ce44 <___svfiprintf_internal_r+0xa40>
    c4a4:	a805883a 	mov	r2,r21
    c4a8:	00000106 	br	c4b0 <___svfiprintf_internal_r+0xac>
    c4ac:	19000326 	beq	r3,r4,c4bc <___svfiprintf_internal_r+0xb8>
    c4b0:	10800044 	addi	r2,r2,1
    c4b4:	10c00007 	ldb	r3,0(r2)
    c4b8:	183ffc1e 	bne	r3,zero,c4ac <__alt_mem_Flash_flash_data+0xf400c4ac>
    c4bc:	1561c83a 	sub	r16,r2,r21
    c4c0:	102d883a 	mov	r22,r2
    c4c4:	80000e26 	beq	r16,zero,c500 <___svfiprintf_internal_r+0xfc>
    c4c8:	d8c01c17 	ldw	r3,112(sp)
    c4cc:	d8801b17 	ldw	r2,108(sp)
    c4d0:	45400015 	stw	r21,0(r8)
    c4d4:	1c07883a 	add	r3,r3,r16
    c4d8:	10800044 	addi	r2,r2,1
    c4dc:	d8c01c15 	stw	r3,112(sp)
    c4e0:	44000115 	stw	r16,4(r8)
    c4e4:	d8801b15 	stw	r2,108(sp)
    c4e8:	00c001c4 	movi	r3,7
    c4ec:	1882d816 	blt	r3,r2,d050 <___svfiprintf_internal_r+0xc4c>
    c4f0:	42000204 	addi	r8,r8,8
    c4f4:	da802417 	ldw	r10,144(sp)
    c4f8:	5415883a 	add	r10,r10,r16
    c4fc:	da802415 	stw	r10,144(sp)
    c500:	b0800007 	ldb	r2,0(r22)
    c504:	10027526 	beq	r2,zero,cedc <___svfiprintf_internal_r+0xad8>
    c508:	b1000047 	ldb	r4,1(r22)
    c50c:	b5400044 	addi	r21,r22,1
    c510:	d8001d85 	stb	zero,118(sp)
    c514:	000d883a 	mov	r6,zero
    c518:	043fffc4 	movi	r16,-1
    c51c:	d8002115 	stw	zero,132(sp)
    c520:	0023883a 	mov	r17,zero
    c524:	00c01604 	movi	r3,88
    c528:	01400244 	movi	r5,9
    c52c:	02400a84 	movi	r9,42
    c530:	01c01b04 	movi	r7,108
    c534:	ad400044 	addi	r21,r21,1
    c538:	20bff804 	addi	r2,r4,-32
    c53c:	18819736 	bltu	r3,r2,cb9c <___svfiprintf_internal_r+0x798>
    c540:	100490ba 	slli	r2,r2,2
    c544:	02c00074 	movhi	r11,1
    c548:	5af15604 	addi	r11,r11,-15016
    c54c:	12c5883a 	add	r2,r2,r11
    c550:	10800017 	ldw	r2,0(r2)
    c554:	1000683a 	jmp	r2
    c558:	0000ca94 	movui	zero,810
    c55c:	0000cb9c 	xori	zero,zero,814
    c560:	0000cb9c 	xori	zero,zero,814
    c564:	0000ca88 	cmpgei	zero,zero,810
    c568:	0000cb9c 	xori	zero,zero,814
    c56c:	0000cb9c 	xori	zero,zero,814
    c570:	0000cb9c 	xori	zero,zero,814
    c574:	0000cb9c 	xori	zero,zero,814
    c578:	0000cb9c 	xori	zero,zero,814
    c57c:	0000cb9c 	xori	zero,zero,814
    c580:	0000c7b4 	movhi	zero,798
    c584:	0000cbd0 	cmplti	zero,zero,815
    c588:	0000cb9c 	xori	zero,zero,814
    c58c:	0000c7dc 	xori	zero,zero,799
    c590:	0000cbdc 	xori	zero,zero,815
    c594:	0000cb9c 	xori	zero,zero,814
    c598:	0000cbc4 	movi	zero,815
    c59c:	0000cb64 	muli	zero,zero,813
    c5a0:	0000cb64 	muli	zero,zero,813
    c5a4:	0000cb64 	muli	zero,zero,813
    c5a8:	0000cb64 	muli	zero,zero,813
    c5ac:	0000cb64 	muli	zero,zero,813
    c5b0:	0000cb64 	muli	zero,zero,813
    c5b4:	0000cb64 	muli	zero,zero,813
    c5b8:	0000cb64 	muli	zero,zero,813
    c5bc:	0000cb64 	muli	zero,zero,813
    c5c0:	0000cb9c 	xori	zero,zero,814
    c5c4:	0000cb9c 	xori	zero,zero,814
    c5c8:	0000cb9c 	xori	zero,zero,814
    c5cc:	0000cb9c 	xori	zero,zero,814
    c5d0:	0000cb9c 	xori	zero,zero,814
    c5d4:	0000cb9c 	xori	zero,zero,814
    c5d8:	0000cb9c 	xori	zero,zero,814
    c5dc:	0000cb9c 	xori	zero,zero,814
    c5e0:	0000cb9c 	xori	zero,zero,814
    c5e4:	0000cb9c 	xori	zero,zero,814
    c5e8:	0000cafc 	xorhi	zero,zero,811
    c5ec:	0000cb9c 	xori	zero,zero,814
    c5f0:	0000cb9c 	xori	zero,zero,814
    c5f4:	0000cb9c 	xori	zero,zero,814
    c5f8:	0000cb9c 	xori	zero,zero,814
    c5fc:	0000cb9c 	xori	zero,zero,814
    c600:	0000cb9c 	xori	zero,zero,814
    c604:	0000cb9c 	xori	zero,zero,814
    c608:	0000cb9c 	xori	zero,zero,814
    c60c:	0000cb9c 	xori	zero,zero,814
    c610:	0000cb9c 	xori	zero,zero,814
    c614:	0000c788 	cmpgei	zero,zero,798
    c618:	0000cb9c 	xori	zero,zero,814
    c61c:	0000cb9c 	xori	zero,zero,814
    c620:	0000cb9c 	xori	zero,zero,814
    c624:	0000cb9c 	xori	zero,zero,814
    c628:	0000cb9c 	xori	zero,zero,814
    c62c:	0000c6bc 	xorhi	zero,zero,794
    c630:	0000cb9c 	xori	zero,zero,814
    c634:	0000cb9c 	xori	zero,zero,814
    c638:	0000c9e8 	cmpgeui	zero,zero,807
    c63c:	0000cb9c 	xori	zero,zero,814
    c640:	0000cb9c 	xori	zero,zero,814
    c644:	0000cb9c 	xori	zero,zero,814
    c648:	0000cb9c 	xori	zero,zero,814
    c64c:	0000cb9c 	xori	zero,zero,814
    c650:	0000cb9c 	xori	zero,zero,814
    c654:	0000cb9c 	xori	zero,zero,814
    c658:	0000cb9c 	xori	zero,zero,814
    c65c:	0000cb9c 	xori	zero,zero,814
    c660:	0000cb9c 	xori	zero,zero,814
    c664:	0000c8d4 	movui	zero,803
    c668:	0000c894 	movui	zero,802
    c66c:	0000cb9c 	xori	zero,zero,814
    c670:	0000cb9c 	xori	zero,zero,814
    c674:	0000cb9c 	xori	zero,zero,814
    c678:	0000ca44 	movi	zero,809
    c67c:	0000c894 	movui	zero,802
    c680:	0000cb9c 	xori	zero,zero,814
    c684:	0000cb9c 	xori	zero,zero,814
    c688:	0000ca30 	cmpltui	zero,zero,808
    c68c:	0000cb9c 	xori	zero,zero,814
    c690:	0000ca50 	cmplti	zero,zero,809
    c694:	0000c78c 	andi	zero,zero,798
    c698:	0000c850 	cmplti	zero,zero,801
    c69c:	0000c844 	movi	zero,801
    c6a0:	0000cb9c 	xori	zero,zero,814
    c6a4:	0000c7e8 	cmpgeui	zero,zero,799
    c6a8:	0000cb9c 	xori	zero,zero,814
    c6ac:	0000c6c0 	call	c6c <gescoord+0x28>
    c6b0:	0000cb9c 	xori	zero,zero,814
    c6b4:	0000cb9c 	xori	zero,zero,814
    c6b8:	0000cab0 	cmpltui	zero,zero,810
    c6bc:	8c400414 	ori	r17,r17,16
    c6c0:	8880080c 	andi	r2,r17,32
    c6c4:	10029626 	beq	r2,zero,d120 <___svfiprintf_internal_r+0xd1c>
    c6c8:	da802317 	ldw	r10,140(sp)
    c6cc:	dac02317 	ldw	r11,140(sp)
    c6d0:	00800044 	movi	r2,1
    c6d4:	52400017 	ldw	r9,0(r10)
    c6d8:	52800117 	ldw	r10,4(r10)
    c6dc:	5ac00204 	addi	r11,r11,8
    c6e0:	dac02315 	stw	r11,140(sp)
    c6e4:	4a86b03a 	or	r3,r9,r10
    c6e8:	d8001d85 	stb	zero,118(sp)
    c6ec:	8039883a 	mov	fp,r16
    c6f0:	0017883a 	mov	r11,zero
    c6f4:	80000216 	blt	r16,zero,c700 <___svfiprintf_internal_r+0x2fc>
    c6f8:	013fdfc4 	movi	r4,-129
    c6fc:	8922703a 	and	r17,r17,r4
    c700:	1801d21e 	bne	r3,zero,ce4c <___svfiprintf_internal_r+0xa48>
    c704:	80024626 	beq	r16,zero,d020 <___svfiprintf_internal_r+0xc1c>
    c708:	10803fcc 	andi	r2,r2,255
    c70c:	00c00044 	movi	r3,1
    c710:	10c2b426 	beq	r2,r3,d1e4 <___svfiprintf_internal_r+0xde0>
    c714:	00c00084 	movi	r3,2
    c718:	10c25d26 	beq	r2,r3,d090 <___svfiprintf_internal_r+0xc8c>
    c71c:	d8c01a04 	addi	r3,sp,104
    c720:	4808d0fa 	srli	r4,r9,3
    c724:	500a977a 	slli	r5,r10,29
    c728:	5014d0fa 	srli	r10,r10,3
    c72c:	4a4001cc 	andi	r9,r9,7
    c730:	48800c04 	addi	r2,r9,48
    c734:	18ffffc4 	addi	r3,r3,-1
    c738:	2912b03a 	or	r9,r5,r4
    c73c:	18800005 	stb	r2,0(r3)
    c740:	4a88b03a 	or	r4,r9,r10
    c744:	203ff61e 	bne	r4,zero,c720 <__alt_mem_Flash_flash_data+0xf400c720>
    c748:	8900004c 	andi	r4,r17,1
    c74c:	d8c02615 	stw	r3,152(sp)
    c750:	2002961e 	bne	r4,zero,d1ac <___svfiprintf_internal_r+0xda8>
    c754:	da801e17 	ldw	r10,120(sp)
    c758:	50f9c83a 	sub	fp,r10,r3
    c75c:	df002015 	stw	fp,128(sp)
    c760:	e400010e 	bge	fp,r16,c768 <___svfiprintf_internal_r+0x364>
    c764:	dc002015 	stw	r16,128(sp)
    c768:	5ac03fcc 	andi	r11,r11,255
    c76c:	5ac0201c 	xori	r11,r11,128
    c770:	5affe004 	addi	r11,r11,-128
    c774:	58006326 	beq	r11,zero,c904 <___svfiprintf_internal_r+0x500>
    c778:	d8c02017 	ldw	r3,128(sp)
    c77c:	18c00044 	addi	r3,r3,1
    c780:	d8c02015 	stw	r3,128(sp)
    c784:	00005f06 	br	c904 <___svfiprintf_internal_r+0x500>
    c788:	8c400414 	ori	r17,r17,16
    c78c:	8880080c 	andi	r2,r17,32
    c790:	10027926 	beq	r2,zero,d178 <___svfiprintf_internal_r+0xd74>
    c794:	dac02317 	ldw	r11,140(sp)
    c798:	0005883a 	mov	r2,zero
    c79c:	5a400017 	ldw	r9,0(r11)
    c7a0:	5a800117 	ldw	r10,4(r11)
    c7a4:	5ac00204 	addi	r11,r11,8
    c7a8:	dac02315 	stw	r11,140(sp)
    c7ac:	4a86b03a 	or	r3,r9,r10
    c7b0:	003fcd06 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    c7b4:	da802317 	ldw	r10,140(sp)
    c7b8:	dac02317 	ldw	r11,140(sp)
    c7bc:	52800017 	ldw	r10,0(r10)
    c7c0:	58800104 	addi	r2,r11,4
    c7c4:	da802115 	stw	r10,132(sp)
    c7c8:	50028c0e 	bge	r10,zero,d1fc <___svfiprintf_internal_r+0xdf8>
    c7cc:	da802117 	ldw	r10,132(sp)
    c7d0:	d8802315 	stw	r2,140(sp)
    c7d4:	0295c83a 	sub	r10,zero,r10
    c7d8:	da802115 	stw	r10,132(sp)
    c7dc:	8c400114 	ori	r17,r17,4
    c7e0:	a9000007 	ldb	r4,0(r21)
    c7e4:	003f5306 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    c7e8:	da802317 	ldw	r10,140(sp)
    c7ec:	dac02317 	ldw	r11,140(sp)
    c7f0:	d8001d85 	stb	zero,118(sp)
    c7f4:	52800017 	ldw	r10,0(r10)
    c7f8:	5dc00104 	addi	r23,r11,4
    c7fc:	da802615 	stw	r10,152(sp)
    c800:	5002d626 	beq	r10,zero,d35c <___svfiprintf_internal_r+0xf58>
    c804:	d9002617 	ldw	r4,152(sp)
    c808:	8002cc16 	blt	r16,zero,d33c <___svfiprintf_internal_r+0xf38>
    c80c:	000b883a 	mov	r5,zero
    c810:	800d883a 	mov	r6,r16
    c814:	da002c15 	stw	r8,176(sp)
    c818:	000a5e80 	call	a5e8 <memchr>
    c81c:	da002c17 	ldw	r8,176(sp)
    c820:	1002f026 	beq	r2,zero,d3e4 <___svfiprintf_internal_r+0xfe0>
    c824:	d8c02617 	ldw	r3,152(sp)
    c828:	10f9c83a 	sub	fp,r2,r3
    c82c:	8700010e 	bge	r16,fp,c834 <___svfiprintf_internal_r+0x430>
    c830:	8039883a 	mov	fp,r16
    c834:	dac01d83 	ldbu	r11,118(sp)
    c838:	ddc02315 	stw	r23,140(sp)
    c83c:	0021883a 	mov	r16,zero
    c840:	003fc606 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    c844:	8c400814 	ori	r17,r17,32
    c848:	a9000007 	ldb	r4,0(r21)
    c84c:	003f3906 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    c850:	da802317 	ldw	r10,140(sp)
    c854:	00800c04 	movi	r2,48
    c858:	dac02317 	ldw	r11,140(sp)
    c85c:	52400017 	ldw	r9,0(r10)
    c860:	d8801d05 	stb	r2,116(sp)
    c864:	00801e04 	movi	r2,120
    c868:	d8801d45 	stb	r2,117(sp)
    c86c:	008000b4 	movhi	r2,2
    c870:	10bebc04 	addi	r2,r2,-1296
    c874:	5ac00104 	addi	r11,r11,4
    c878:	d8802a15 	stw	r2,168(sp)
    c87c:	0015883a 	mov	r10,zero
    c880:	8c400094 	ori	r17,r17,2
    c884:	dac02315 	stw	r11,140(sp)
    c888:	00800084 	movi	r2,2
    c88c:	4807883a 	mov	r3,r9
    c890:	003f9506 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    c894:	d9801d85 	stb	r6,118(sp)
    c898:	8880080c 	andi	r2,r17,32
    c89c:	d8c02317 	ldw	r3,140(sp)
    c8a0:	10009b26 	beq	r2,zero,cb10 <___svfiprintf_internal_r+0x70c>
    c8a4:	dac02317 	ldw	r11,140(sp)
    c8a8:	18800117 	ldw	r2,4(r3)
    c8ac:	1a400017 	ldw	r9,0(r3)
    c8b0:	5ac00204 	addi	r11,r11,8
    c8b4:	dac02315 	stw	r11,140(sp)
    c8b8:	1015883a 	mov	r10,r2
    c8bc:	10009f16 	blt	r2,zero,cb3c <___svfiprintf_internal_r+0x738>
    c8c0:	dac01d83 	ldbu	r11,118(sp)
    c8c4:	8039883a 	mov	fp,r16
    c8c8:	00800044 	movi	r2,1
    c8cc:	4a86b03a 	or	r3,r9,r10
    c8d0:	003f8806 	br	c6f4 <__alt_mem_Flash_flash_data+0xf400c6f4>
    c8d4:	dac02317 	ldw	r11,140(sp)
    c8d8:	00c00044 	movi	r3,1
    c8dc:	da801004 	addi	r10,sp,64
    c8e0:	58800017 	ldw	r2,0(r11)
    c8e4:	5ac00104 	addi	r11,r11,4
    c8e8:	d8c02015 	stw	r3,128(sp)
    c8ec:	d8001d85 	stb	zero,118(sp)
    c8f0:	d8801005 	stb	r2,64(sp)
    c8f4:	dac02315 	stw	r11,140(sp)
    c8f8:	1839883a 	mov	fp,r3
    c8fc:	da802615 	stw	r10,152(sp)
    c900:	0021883a 	mov	r16,zero
    c904:	8a80008c 	andi	r10,r17,2
    c908:	da802215 	stw	r10,136(sp)
    c90c:	50000326 	beq	r10,zero,c91c <___svfiprintf_internal_r+0x518>
    c910:	dac02017 	ldw	r11,128(sp)
    c914:	5ac00084 	addi	r11,r11,2
    c918:	dac02015 	stw	r11,128(sp)
    c91c:	88c0210c 	andi	r3,r17,132
    c920:	d8c02515 	stw	r3,148(sp)
    c924:	1800bd1e 	bne	r3,zero,cc1c <___svfiprintf_internal_r+0x818>
    c928:	da802117 	ldw	r10,132(sp)
    c92c:	dac02017 	ldw	r11,128(sp)
    c930:	52edc83a 	sub	r22,r10,r11
    c934:	0580b90e 	bge	zero,r22,cc1c <___svfiprintf_internal_r+0x818>
    c938:	02400404 	movi	r9,16
    c93c:	d8c01c17 	ldw	r3,112(sp)
    c940:	d8801b17 	ldw	r2,108(sp)
    c944:	4d829b0e 	bge	r9,r22,d3b4 <___svfiprintf_internal_r+0xfb0>
    c948:	014000b4 	movhi	r5,2
    c94c:	297f2904 	addi	r5,r5,-860
    c950:	d9402815 	stw	r5,160(sp)
    c954:	05c001c4 	movi	r23,7
    c958:	00000306 	br	c968 <___svfiprintf_internal_r+0x564>
    c95c:	b5bffc04 	addi	r22,r22,-16
    c960:	42000204 	addi	r8,r8,8
    c964:	4d80150e 	bge	r9,r22,c9bc <___svfiprintf_internal_r+0x5b8>
    c968:	028000b4 	movhi	r10,2
    c96c:	18c00404 	addi	r3,r3,16
    c970:	10800044 	addi	r2,r2,1
    c974:	52bf2904 	addi	r10,r10,-860
    c978:	42800015 	stw	r10,0(r8)
    c97c:	42400115 	stw	r9,4(r8)
    c980:	d8c01c15 	stw	r3,112(sp)
    c984:	d8801b15 	stw	r2,108(sp)
    c988:	b8bff40e 	bge	r23,r2,c95c <__alt_mem_Flash_flash_data+0xf400c95c>
    c98c:	9009883a 	mov	r4,r18
    c990:	a00b883a 	mov	r5,r20
    c994:	d9801a04 	addi	r6,sp,104
    c998:	da402c15 	stw	r9,176(sp)
    c99c:	000c2380 	call	c238 <__ssprint_r>
    c9a0:	da402c17 	ldw	r9,176(sp)
    c9a4:	1001531e 	bne	r2,zero,cef4 <___svfiprintf_internal_r+0xaf0>
    c9a8:	b5bffc04 	addi	r22,r22,-16
    c9ac:	d8c01c17 	ldw	r3,112(sp)
    c9b0:	d8801b17 	ldw	r2,108(sp)
    c9b4:	d811883a 	mov	r8,sp
    c9b8:	4dbfeb16 	blt	r9,r22,c968 <__alt_mem_Flash_flash_data+0xf400c968>
    c9bc:	dac02817 	ldw	r11,160(sp)
    c9c0:	b0c7883a 	add	r3,r22,r3
    c9c4:	10800044 	addi	r2,r2,1
    c9c8:	42c00015 	stw	r11,0(r8)
    c9cc:	45800115 	stw	r22,4(r8)
    c9d0:	d8c01c15 	stw	r3,112(sp)
    c9d4:	d8801b15 	stw	r2,108(sp)
    c9d8:	010001c4 	movi	r4,7
    c9dc:	2081dd16 	blt	r4,r2,d154 <___svfiprintf_internal_r+0xd50>
    c9e0:	42000204 	addi	r8,r8,8
    c9e4:	00008f06 	br	cc24 <___svfiprintf_internal_r+0x820>
    c9e8:	008000b4 	movhi	r2,2
    c9ec:	10beb704 	addi	r2,r2,-1316
    c9f0:	d8802a15 	stw	r2,168(sp)
    c9f4:	d9801d85 	stb	r6,118(sp)
    c9f8:	8880080c 	andi	r2,r17,32
    c9fc:	10003226 	beq	r2,zero,cac8 <___svfiprintf_internal_r+0x6c4>
    ca00:	da802317 	ldw	r10,140(sp)
    ca04:	dac02317 	ldw	r11,140(sp)
    ca08:	52400017 	ldw	r9,0(r10)
    ca0c:	52800117 	ldw	r10,4(r10)
    ca10:	5ac00204 	addi	r11,r11,8
    ca14:	dac02315 	stw	r11,140(sp)
    ca18:	8880004c 	andi	r2,r17,1
    ca1c:	10003426 	beq	r2,zero,caf0 <___svfiprintf_internal_r+0x6ec>
    ca20:	4a86b03a 	or	r3,r9,r10
    ca24:	1802231e 	bne	r3,zero,d2b4 <___svfiprintf_internal_r+0xeb0>
    ca28:	00800084 	movi	r2,2
    ca2c:	003f2e06 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    ca30:	a9000007 	ldb	r4,0(r21)
    ca34:	a805883a 	mov	r2,r21
    ca38:	21c22426 	beq	r4,r7,d2cc <___svfiprintf_internal_r+0xec8>
    ca3c:	8c400414 	ori	r17,r17,16
    ca40:	003ebc06 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    ca44:	8c401014 	ori	r17,r17,64
    ca48:	a9000007 	ldb	r4,0(r21)
    ca4c:	003eb906 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    ca50:	d9801d85 	stb	r6,118(sp)
    ca54:	8880080c 	andi	r2,r17,32
    ca58:	10020d1e 	bne	r2,zero,d290 <___svfiprintf_internal_r+0xe8c>
    ca5c:	8880040c 	andi	r2,r17,16
    ca60:	10021e1e 	bne	r2,zero,d2dc <___svfiprintf_internal_r+0xed8>
    ca64:	8c40100c 	andi	r17,r17,64
    ca68:	88021c26 	beq	r17,zero,d2dc <___svfiprintf_internal_r+0xed8>
    ca6c:	dac02317 	ldw	r11,140(sp)
    ca70:	da802417 	ldw	r10,144(sp)
    ca74:	58800017 	ldw	r2,0(r11)
    ca78:	5ac00104 	addi	r11,r11,4
    ca7c:	dac02315 	stw	r11,140(sp)
    ca80:	1280000d 	sth	r10,0(r2)
    ca84:	003e8306 	br	c494 <__alt_mem_Flash_flash_data+0xf400c494>
    ca88:	8c400054 	ori	r17,r17,1
    ca8c:	a9000007 	ldb	r4,0(r21)
    ca90:	003ea806 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    ca94:	30803fcc 	andi	r2,r6,255
    ca98:	1080201c 	xori	r2,r2,128
    ca9c:	10bfe004 	addi	r2,r2,-128
    caa0:	1001f91e 	bne	r2,zero,d288 <___svfiprintf_internal_r+0xe84>
    caa4:	01800804 	movi	r6,32
    caa8:	a9000007 	ldb	r4,0(r21)
    caac:	003ea106 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    cab0:	008000b4 	movhi	r2,2
    cab4:	10bebc04 	addi	r2,r2,-1296
    cab8:	d8802a15 	stw	r2,168(sp)
    cabc:	d9801d85 	stb	r6,118(sp)
    cac0:	8880080c 	andi	r2,r17,32
    cac4:	103fce1e 	bne	r2,zero,ca00 <__alt_mem_Flash_flash_data+0xf400ca00>
    cac8:	8880040c 	andi	r2,r17,16
    cacc:	1001e526 	beq	r2,zero,d264 <___svfiprintf_internal_r+0xe60>
    cad0:	da802317 	ldw	r10,140(sp)
    cad4:	dac02317 	ldw	r11,140(sp)
    cad8:	52400017 	ldw	r9,0(r10)
    cadc:	8880004c 	andi	r2,r17,1
    cae0:	5ac00104 	addi	r11,r11,4
    cae4:	dac02315 	stw	r11,140(sp)
    cae8:	0015883a 	mov	r10,zero
    caec:	103fcc1e 	bne	r2,zero,ca20 <__alt_mem_Flash_flash_data+0xf400ca20>
    caf0:	00800084 	movi	r2,2
    caf4:	4a86b03a 	or	r3,r9,r10
    caf8:	003efb06 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    cafc:	8c400414 	ori	r17,r17,16
    cb00:	d9801d85 	stb	r6,118(sp)
    cb04:	8880080c 	andi	r2,r17,32
    cb08:	d8c02317 	ldw	r3,140(sp)
    cb0c:	103f651e 	bne	r2,zero,c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    cb10:	8880040c 	andi	r2,r17,16
    cb14:	1001c61e 	bne	r2,zero,d230 <___svfiprintf_internal_r+0xe2c>
    cb18:	8880100c 	andi	r2,r17,64
    cb1c:	1001c426 	beq	r2,zero,d230 <___svfiprintf_internal_r+0xe2c>
    cb20:	1a40000f 	ldh	r9,0(r3)
    cb24:	dac02317 	ldw	r11,140(sp)
    cb28:	4815d7fa 	srai	r10,r9,31
    cb2c:	5ac00104 	addi	r11,r11,4
    cb30:	dac02315 	stw	r11,140(sp)
    cb34:	5005883a 	mov	r2,r10
    cb38:	103f610e 	bge	r2,zero,c8c0 <__alt_mem_Flash_flash_data+0xf400c8c0>
    cb3c:	0253c83a 	sub	r9,zero,r9
    cb40:	4804c03a 	cmpne	r2,r9,zero
    cb44:	0295c83a 	sub	r10,zero,r10
    cb48:	5095c83a 	sub	r10,r10,r2
    cb4c:	02c00b44 	movi	r11,45
    cb50:	dac01d85 	stb	r11,118(sp)
    cb54:	8039883a 	mov	fp,r16
    cb58:	00800044 	movi	r2,1
    cb5c:	4a86b03a 	or	r3,r9,r10
    cb60:	003ee406 	br	c6f4 <__alt_mem_Flash_flash_data+0xf400c6f4>
    cb64:	a815883a 	mov	r10,r21
    cb68:	d8002115 	stw	zero,132(sp)
    cb6c:	20bff404 	addi	r2,r4,-48
    cb70:	51000007 	ldb	r4,0(r10)
    cb74:	da802117 	ldw	r10,132(sp)
    cb78:	ad400044 	addi	r21,r21,1
    cb7c:	52c002a4 	muli	r11,r10,10
    cb80:	a815883a 	mov	r10,r21
    cb84:	5885883a 	add	r2,r11,r2
    cb88:	d8802115 	stw	r2,132(sp)
    cb8c:	20bff404 	addi	r2,r4,-48
    cb90:	28bff72e 	bgeu	r5,r2,cb70 <__alt_mem_Flash_flash_data+0xf400cb70>
    cb94:	20bff804 	addi	r2,r4,-32
    cb98:	18be692e 	bgeu	r3,r2,c540 <__alt_mem_Flash_flash_data+0xf400c540>
    cb9c:	d9801d85 	stb	r6,118(sp)
    cba0:	2000ce26 	beq	r4,zero,cedc <___svfiprintf_internal_r+0xad8>
    cba4:	02800044 	movi	r10,1
    cba8:	dac01004 	addi	r11,sp,64
    cbac:	da802015 	stw	r10,128(sp)
    cbb0:	d9001005 	stb	r4,64(sp)
    cbb4:	d8001d85 	stb	zero,118(sp)
    cbb8:	5039883a 	mov	fp,r10
    cbbc:	dac02615 	stw	r11,152(sp)
    cbc0:	003f4f06 	br	c900 <__alt_mem_Flash_flash_data+0xf400c900>
    cbc4:	8c402014 	ori	r17,r17,128
    cbc8:	a9000007 	ldb	r4,0(r21)
    cbcc:	003e5906 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    cbd0:	01800ac4 	movi	r6,43
    cbd4:	a9000007 	ldb	r4,0(r21)
    cbd8:	003e5606 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    cbdc:	a9000007 	ldb	r4,0(r21)
    cbe0:	aa800044 	addi	r10,r21,1
    cbe4:	22420626 	beq	r4,r9,d400 <___svfiprintf_internal_r+0xffc>
    cbe8:	20bff404 	addi	r2,r4,-48
    cbec:	502b883a 	mov	r21,r10
    cbf0:	0021883a 	mov	r16,zero
    cbf4:	28be5036 	bltu	r5,r2,c538 <__alt_mem_Flash_flash_data+0xf400c538>
    cbf8:	a9000007 	ldb	r4,0(r21)
    cbfc:	840002a4 	muli	r16,r16,10
    cc00:	ad400044 	addi	r21,r21,1
    cc04:	1421883a 	add	r16,r2,r16
    cc08:	20bff404 	addi	r2,r4,-48
    cc0c:	28bffa2e 	bgeu	r5,r2,cbf8 <__alt_mem_Flash_flash_data+0xf400cbf8>
    cc10:	803e490e 	bge	r16,zero,c538 <__alt_mem_Flash_flash_data+0xf400c538>
    cc14:	043fffc4 	movi	r16,-1
    cc18:	003e4706 	br	c538 <__alt_mem_Flash_flash_data+0xf400c538>
    cc1c:	d8c01c17 	ldw	r3,112(sp)
    cc20:	d8801b17 	ldw	r2,108(sp)
    cc24:	d9001d87 	ldb	r4,118(sp)
    cc28:	20000b26 	beq	r4,zero,cc58 <___svfiprintf_internal_r+0x854>
    cc2c:	d9001d84 	addi	r4,sp,118
    cc30:	18c00044 	addi	r3,r3,1
    cc34:	10800044 	addi	r2,r2,1
    cc38:	41000015 	stw	r4,0(r8)
    cc3c:	01000044 	movi	r4,1
    cc40:	41000115 	stw	r4,4(r8)
    cc44:	d8c01c15 	stw	r3,112(sp)
    cc48:	d8801b15 	stw	r2,108(sp)
    cc4c:	010001c4 	movi	r4,7
    cc50:	20811e16 	blt	r4,r2,d0cc <___svfiprintf_internal_r+0xcc8>
    cc54:	42000204 	addi	r8,r8,8
    cc58:	da802217 	ldw	r10,136(sp)
    cc5c:	50000b26 	beq	r10,zero,cc8c <___svfiprintf_internal_r+0x888>
    cc60:	d9001d04 	addi	r4,sp,116
    cc64:	18c00084 	addi	r3,r3,2
    cc68:	10800044 	addi	r2,r2,1
    cc6c:	41000015 	stw	r4,0(r8)
    cc70:	01000084 	movi	r4,2
    cc74:	41000115 	stw	r4,4(r8)
    cc78:	d8c01c15 	stw	r3,112(sp)
    cc7c:	d8801b15 	stw	r2,108(sp)
    cc80:	010001c4 	movi	r4,7
    cc84:	20811a16 	blt	r4,r2,d0f0 <___svfiprintf_internal_r+0xcec>
    cc88:	42000204 	addi	r8,r8,8
    cc8c:	dac02517 	ldw	r11,148(sp)
    cc90:	01002004 	movi	r4,128
    cc94:	5900a826 	beq	r11,r4,cf38 <___svfiprintf_internal_r+0xb34>
    cc98:	8721c83a 	sub	r16,r16,fp
    cc9c:	0400260e 	bge	zero,r16,cd38 <___svfiprintf_internal_r+0x934>
    cca0:	01c00404 	movi	r7,16
    cca4:	3c019d0e 	bge	r7,r16,d31c <___svfiprintf_internal_r+0xf18>
    cca8:	010000b4 	movhi	r4,2
    ccac:	213f2504 	addi	r4,r4,-876
    ccb0:	d9002215 	stw	r4,136(sp)
    ccb4:	382f883a 	mov	r23,r7
    ccb8:	058001c4 	movi	r22,7
    ccbc:	00000306 	br	cccc <___svfiprintf_internal_r+0x8c8>
    ccc0:	843ffc04 	addi	r16,r16,-16
    ccc4:	42000204 	addi	r8,r8,8
    ccc8:	bc00110e 	bge	r23,r16,cd10 <___svfiprintf_internal_r+0x90c>
    cccc:	18c00404 	addi	r3,r3,16
    ccd0:	10800044 	addi	r2,r2,1
    ccd4:	44c00015 	stw	r19,0(r8)
    ccd8:	45c00115 	stw	r23,4(r8)
    ccdc:	d8c01c15 	stw	r3,112(sp)
    cce0:	d8801b15 	stw	r2,108(sp)
    cce4:	b0bff60e 	bge	r22,r2,ccc0 <__alt_mem_Flash_flash_data+0xf400ccc0>
    cce8:	9009883a 	mov	r4,r18
    ccec:	a00b883a 	mov	r5,r20
    ccf0:	d9801a04 	addi	r6,sp,104
    ccf4:	000c2380 	call	c238 <__ssprint_r>
    ccf8:	10007e1e 	bne	r2,zero,cef4 <___svfiprintf_internal_r+0xaf0>
    ccfc:	843ffc04 	addi	r16,r16,-16
    cd00:	d8c01c17 	ldw	r3,112(sp)
    cd04:	d8801b17 	ldw	r2,108(sp)
    cd08:	d811883a 	mov	r8,sp
    cd0c:	bc3fef16 	blt	r23,r16,cccc <__alt_mem_Flash_flash_data+0xf400cccc>
    cd10:	da802217 	ldw	r10,136(sp)
    cd14:	1c07883a 	add	r3,r3,r16
    cd18:	10800044 	addi	r2,r2,1
    cd1c:	42800015 	stw	r10,0(r8)
    cd20:	44000115 	stw	r16,4(r8)
    cd24:	d8c01c15 	stw	r3,112(sp)
    cd28:	d8801b15 	stw	r2,108(sp)
    cd2c:	010001c4 	movi	r4,7
    cd30:	2080ce16 	blt	r4,r2,d06c <___svfiprintf_internal_r+0xc68>
    cd34:	42000204 	addi	r8,r8,8
    cd38:	dac02617 	ldw	r11,152(sp)
    cd3c:	1f07883a 	add	r3,r3,fp
    cd40:	10800044 	addi	r2,r2,1
    cd44:	42c00015 	stw	r11,0(r8)
    cd48:	47000115 	stw	fp,4(r8)
    cd4c:	d8c01c15 	stw	r3,112(sp)
    cd50:	d8801b15 	stw	r2,108(sp)
    cd54:	010001c4 	movi	r4,7
    cd58:	2080a316 	blt	r4,r2,cfe8 <___svfiprintf_internal_r+0xbe4>
    cd5c:	42000204 	addi	r8,r8,8
    cd60:	8c40010c 	andi	r17,r17,4
    cd64:	88002b26 	beq	r17,zero,ce14 <___svfiprintf_internal_r+0xa10>
    cd68:	da802117 	ldw	r10,132(sp)
    cd6c:	dac02017 	ldw	r11,128(sp)
    cd70:	52e1c83a 	sub	r16,r10,r11
    cd74:	0400270e 	bge	zero,r16,ce14 <___svfiprintf_internal_r+0xa10>
    cd78:	04400404 	movi	r17,16
    cd7c:	d8801b17 	ldw	r2,108(sp)
    cd80:	8c01900e 	bge	r17,r16,d3c4 <___svfiprintf_internal_r+0xfc0>
    cd84:	014000b4 	movhi	r5,2
    cd88:	297f2904 	addi	r5,r5,-860
    cd8c:	d9402815 	stw	r5,160(sp)
    cd90:	070001c4 	movi	fp,7
    cd94:	00000306 	br	cda4 <___svfiprintf_internal_r+0x9a0>
    cd98:	843ffc04 	addi	r16,r16,-16
    cd9c:	42000204 	addi	r8,r8,8
    cda0:	8c00130e 	bge	r17,r16,cdf0 <___svfiprintf_internal_r+0x9ec>
    cda4:	028000b4 	movhi	r10,2
    cda8:	18c00404 	addi	r3,r3,16
    cdac:	10800044 	addi	r2,r2,1
    cdb0:	52bf2904 	addi	r10,r10,-860
    cdb4:	42800015 	stw	r10,0(r8)
    cdb8:	44400115 	stw	r17,4(r8)
    cdbc:	d8c01c15 	stw	r3,112(sp)
    cdc0:	d8801b15 	stw	r2,108(sp)
    cdc4:	e0bff40e 	bge	fp,r2,cd98 <__alt_mem_Flash_flash_data+0xf400cd98>
    cdc8:	9009883a 	mov	r4,r18
    cdcc:	a00b883a 	mov	r5,r20
    cdd0:	d9801a04 	addi	r6,sp,104
    cdd4:	000c2380 	call	c238 <__ssprint_r>
    cdd8:	1000461e 	bne	r2,zero,cef4 <___svfiprintf_internal_r+0xaf0>
    cddc:	843ffc04 	addi	r16,r16,-16
    cde0:	d8c01c17 	ldw	r3,112(sp)
    cde4:	d8801b17 	ldw	r2,108(sp)
    cde8:	d811883a 	mov	r8,sp
    cdec:	8c3fed16 	blt	r17,r16,cda4 <__alt_mem_Flash_flash_data+0xf400cda4>
    cdf0:	dac02817 	ldw	r11,160(sp)
    cdf4:	1c07883a 	add	r3,r3,r16
    cdf8:	10800044 	addi	r2,r2,1
    cdfc:	42c00015 	stw	r11,0(r8)
    ce00:	44000115 	stw	r16,4(r8)
    ce04:	d8c01c15 	stw	r3,112(sp)
    ce08:	d8801b15 	stw	r2,108(sp)
    ce0c:	010001c4 	movi	r4,7
    ce10:	2080fd16 	blt	r4,r2,d208 <___svfiprintf_internal_r+0xe04>
    ce14:	dd802017 	ldw	r22,128(sp)
    ce18:	da802117 	ldw	r10,132(sp)
    ce1c:	b280010e 	bge	r22,r10,ce24 <___svfiprintf_internal_r+0xa20>
    ce20:	502d883a 	mov	r22,r10
    ce24:	dac02417 	ldw	r11,144(sp)
    ce28:	5d97883a 	add	r11,r11,r22
    ce2c:	dac02415 	stw	r11,144(sp)
    ce30:	1800751e 	bne	r3,zero,d008 <___svfiprintf_internal_r+0xc04>
    ce34:	a8800007 	ldb	r2,0(r21)
    ce38:	d8001b15 	stw	zero,108(sp)
    ce3c:	d811883a 	mov	r8,sp
    ce40:	103d961e 	bne	r2,zero,c49c <__alt_mem_Flash_flash_data+0xf400c49c>
    ce44:	a82d883a 	mov	r22,r21
    ce48:	003dad06 	br	c500 <__alt_mem_Flash_flash_data+0xf400c500>
    ce4c:	10803fcc 	andi	r2,r2,255
    ce50:	00c00044 	movi	r3,1
    ce54:	10fe2f1e 	bne	r2,r3,c714 <__alt_mem_Flash_flash_data+0xf400c714>
    ce58:	5000e026 	beq	r10,zero,d1dc <___svfiprintf_internal_r+0xdd8>
    ce5c:	dc002015 	stw	r16,128(sp)
    ce60:	dc402215 	stw	r17,136(sp)
    ce64:	dd801a04 	addi	r22,sp,104
    ce68:	402f883a 	mov	r23,r8
    ce6c:	5839883a 	mov	fp,r11
    ce70:	4821883a 	mov	r16,r9
    ce74:	5023883a 	mov	r17,r10
    ce78:	8009883a 	mov	r4,r16
    ce7c:	880b883a 	mov	r5,r17
    ce80:	01800284 	movi	r6,10
    ce84:	000f883a 	mov	r7,zero
    ce88:	000f7b80 	call	f7b8 <__umoddi3>
    ce8c:	10800c04 	addi	r2,r2,48
    ce90:	b5bfffc4 	addi	r22,r22,-1
    ce94:	8009883a 	mov	r4,r16
    ce98:	880b883a 	mov	r5,r17
    ce9c:	01800284 	movi	r6,10
    cea0:	000f883a 	mov	r7,zero
    cea4:	b0800005 	stb	r2,0(r22)
    cea8:	000f1f80 	call	f1f8 <__udivdi3>
    ceac:	1021883a 	mov	r16,r2
    ceb0:	10c4b03a 	or	r2,r2,r3
    ceb4:	1823883a 	mov	r17,r3
    ceb8:	103fef1e 	bne	r2,zero,ce78 <__alt_mem_Flash_flash_data+0xf400ce78>
    cebc:	da801e17 	ldw	r10,120(sp)
    cec0:	e017883a 	mov	r11,fp
    cec4:	dc002017 	ldw	r16,128(sp)
    cec8:	dc402217 	ldw	r17,136(sp)
    cecc:	b811883a 	mov	r8,r23
    ced0:	dd802615 	stw	r22,152(sp)
    ced4:	55b9c83a 	sub	fp,r10,r22
    ced8:	003e2006 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    cedc:	d8801c17 	ldw	r2,112(sp)
    cee0:	10000426 	beq	r2,zero,cef4 <___svfiprintf_internal_r+0xaf0>
    cee4:	d9002917 	ldw	r4,164(sp)
    cee8:	d9402717 	ldw	r5,156(sp)
    ceec:	d9801a04 	addi	r6,sp,104
    cef0:	000c2380 	call	c238 <__ssprint_r>
    cef4:	da802717 	ldw	r10,156(sp)
    cef8:	5080030b 	ldhu	r2,12(r10)
    cefc:	1080100c 	andi	r2,r2,64
    cf00:	1000511e 	bne	r2,zero,d048 <___svfiprintf_internal_r+0xc44>
    cf04:	d8802417 	ldw	r2,144(sp)
    cf08:	dfc03617 	ldw	ra,216(sp)
    cf0c:	df003517 	ldw	fp,212(sp)
    cf10:	ddc03417 	ldw	r23,208(sp)
    cf14:	dd803317 	ldw	r22,204(sp)
    cf18:	dd403217 	ldw	r21,200(sp)
    cf1c:	dd003117 	ldw	r20,196(sp)
    cf20:	dcc03017 	ldw	r19,192(sp)
    cf24:	dc802f17 	ldw	r18,188(sp)
    cf28:	dc402e17 	ldw	r17,184(sp)
    cf2c:	dc002d17 	ldw	r16,180(sp)
    cf30:	dec03704 	addi	sp,sp,220
    cf34:	f800283a 	ret
    cf38:	da802117 	ldw	r10,132(sp)
    cf3c:	dac02017 	ldw	r11,128(sp)
    cf40:	52edc83a 	sub	r22,r10,r11
    cf44:	05bf540e 	bge	zero,r22,cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    cf48:	02400404 	movi	r9,16
    cf4c:	4d81210e 	bge	r9,r22,d3d4 <___svfiprintf_internal_r+0xfd0>
    cf50:	014000b4 	movhi	r5,2
    cf54:	297f2504 	addi	r5,r5,-876
    cf58:	d9402215 	stw	r5,136(sp)
    cf5c:	05c001c4 	movi	r23,7
    cf60:	00000306 	br	cf70 <___svfiprintf_internal_r+0xb6c>
    cf64:	b5bffc04 	addi	r22,r22,-16
    cf68:	42000204 	addi	r8,r8,8
    cf6c:	4d80130e 	bge	r9,r22,cfbc <___svfiprintf_internal_r+0xbb8>
    cf70:	18c00404 	addi	r3,r3,16
    cf74:	10800044 	addi	r2,r2,1
    cf78:	44c00015 	stw	r19,0(r8)
    cf7c:	42400115 	stw	r9,4(r8)
    cf80:	d8c01c15 	stw	r3,112(sp)
    cf84:	d8801b15 	stw	r2,108(sp)
    cf88:	b8bff60e 	bge	r23,r2,cf64 <__alt_mem_Flash_flash_data+0xf400cf64>
    cf8c:	9009883a 	mov	r4,r18
    cf90:	a00b883a 	mov	r5,r20
    cf94:	d9801a04 	addi	r6,sp,104
    cf98:	da402c15 	stw	r9,176(sp)
    cf9c:	000c2380 	call	c238 <__ssprint_r>
    cfa0:	da402c17 	ldw	r9,176(sp)
    cfa4:	103fd31e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    cfa8:	b5bffc04 	addi	r22,r22,-16
    cfac:	d8c01c17 	ldw	r3,112(sp)
    cfb0:	d8801b17 	ldw	r2,108(sp)
    cfb4:	d811883a 	mov	r8,sp
    cfb8:	4dbfed16 	blt	r9,r22,cf70 <__alt_mem_Flash_flash_data+0xf400cf70>
    cfbc:	da802217 	ldw	r10,136(sp)
    cfc0:	1d87883a 	add	r3,r3,r22
    cfc4:	10800044 	addi	r2,r2,1
    cfc8:	42800015 	stw	r10,0(r8)
    cfcc:	45800115 	stw	r22,4(r8)
    cfd0:	d8c01c15 	stw	r3,112(sp)
    cfd4:	d8801b15 	stw	r2,108(sp)
    cfd8:	010001c4 	movi	r4,7
    cfdc:	2080c616 	blt	r4,r2,d2f8 <___svfiprintf_internal_r+0xef4>
    cfe0:	42000204 	addi	r8,r8,8
    cfe4:	003f2c06 	br	cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    cfe8:	9009883a 	mov	r4,r18
    cfec:	a00b883a 	mov	r5,r20
    cff0:	d9801a04 	addi	r6,sp,104
    cff4:	000c2380 	call	c238 <__ssprint_r>
    cff8:	103fbe1e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    cffc:	d8c01c17 	ldw	r3,112(sp)
    d000:	d811883a 	mov	r8,sp
    d004:	003f5606 	br	cd60 <__alt_mem_Flash_flash_data+0xf400cd60>
    d008:	9009883a 	mov	r4,r18
    d00c:	a00b883a 	mov	r5,r20
    d010:	d9801a04 	addi	r6,sp,104
    d014:	000c2380 	call	c238 <__ssprint_r>
    d018:	103f8626 	beq	r2,zero,ce34 <__alt_mem_Flash_flash_data+0xf400ce34>
    d01c:	003fb506 	br	cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d020:	10803fcc 	andi	r2,r2,255
    d024:	10003b1e 	bne	r2,zero,d114 <___svfiprintf_internal_r+0xd10>
    d028:	8880004c 	andi	r2,r17,1
    d02c:	10007d26 	beq	r2,zero,d224 <___svfiprintf_internal_r+0xe20>
    d030:	00800c04 	movi	r2,48
    d034:	d8c019c4 	addi	r3,sp,103
    d038:	d88019c5 	stb	r2,103(sp)
    d03c:	df002b17 	ldw	fp,172(sp)
    d040:	d8c02615 	stw	r3,152(sp)
    d044:	003dc506 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d048:	00bfffc4 	movi	r2,-1
    d04c:	003fae06 	br	cf08 <__alt_mem_Flash_flash_data+0xf400cf08>
    d050:	9009883a 	mov	r4,r18
    d054:	a00b883a 	mov	r5,r20
    d058:	d9801a04 	addi	r6,sp,104
    d05c:	000c2380 	call	c238 <__ssprint_r>
    d060:	103fa41e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d064:	d811883a 	mov	r8,sp
    d068:	003d2206 	br	c4f4 <__alt_mem_Flash_flash_data+0xf400c4f4>
    d06c:	9009883a 	mov	r4,r18
    d070:	a00b883a 	mov	r5,r20
    d074:	d9801a04 	addi	r6,sp,104
    d078:	000c2380 	call	c238 <__ssprint_r>
    d07c:	103f9d1e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d080:	d8c01c17 	ldw	r3,112(sp)
    d084:	d8801b17 	ldw	r2,108(sp)
    d088:	d811883a 	mov	r8,sp
    d08c:	003f2a06 	br	cd38 <__alt_mem_Flash_flash_data+0xf400cd38>
    d090:	d9402a17 	ldw	r5,168(sp)
    d094:	d8c01a04 	addi	r3,sp,104
    d098:	488003cc 	andi	r2,r9,15
    d09c:	5008973a 	slli	r4,r10,28
    d0a0:	2885883a 	add	r2,r5,r2
    d0a4:	4812d13a 	srli	r9,r9,4
    d0a8:	10800003 	ldbu	r2,0(r2)
    d0ac:	5014d13a 	srli	r10,r10,4
    d0b0:	18ffffc4 	addi	r3,r3,-1
    d0b4:	2252b03a 	or	r9,r4,r9
    d0b8:	18800005 	stb	r2,0(r3)
    d0bc:	4a84b03a 	or	r2,r9,r10
    d0c0:	103ff51e 	bne	r2,zero,d098 <__alt_mem_Flash_flash_data+0xf400d098>
    d0c4:	d8c02615 	stw	r3,152(sp)
    d0c8:	003da206 	br	c754 <__alt_mem_Flash_flash_data+0xf400c754>
    d0cc:	9009883a 	mov	r4,r18
    d0d0:	a00b883a 	mov	r5,r20
    d0d4:	d9801a04 	addi	r6,sp,104
    d0d8:	000c2380 	call	c238 <__ssprint_r>
    d0dc:	103f851e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d0e0:	d8c01c17 	ldw	r3,112(sp)
    d0e4:	d8801b17 	ldw	r2,108(sp)
    d0e8:	d811883a 	mov	r8,sp
    d0ec:	003eda06 	br	cc58 <__alt_mem_Flash_flash_data+0xf400cc58>
    d0f0:	9009883a 	mov	r4,r18
    d0f4:	a00b883a 	mov	r5,r20
    d0f8:	d9801a04 	addi	r6,sp,104
    d0fc:	000c2380 	call	c238 <__ssprint_r>
    d100:	103f7c1e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d104:	d8c01c17 	ldw	r3,112(sp)
    d108:	d8801b17 	ldw	r2,108(sp)
    d10c:	d811883a 	mov	r8,sp
    d110:	003ede06 	br	cc8c <__alt_mem_Flash_flash_data+0xf400cc8c>
    d114:	da801a04 	addi	r10,sp,104
    d118:	da802615 	stw	r10,152(sp)
    d11c:	003d8f06 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d120:	8880040c 	andi	r2,r17,16
    d124:	10004c1e 	bne	r2,zero,d258 <___svfiprintf_internal_r+0xe54>
    d128:	8880100c 	andi	r2,r17,64
    d12c:	da802317 	ldw	r10,140(sp)
    d130:	10004a26 	beq	r2,zero,d25c <___svfiprintf_internal_r+0xe58>
    d134:	5240000b 	ldhu	r9,0(r10)
    d138:	dac02317 	ldw	r11,140(sp)
    d13c:	0015883a 	mov	r10,zero
    d140:	00800044 	movi	r2,1
    d144:	5ac00104 	addi	r11,r11,4
    d148:	dac02315 	stw	r11,140(sp)
    d14c:	4807883a 	mov	r3,r9
    d150:	003d6506 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    d154:	9009883a 	mov	r4,r18
    d158:	a00b883a 	mov	r5,r20
    d15c:	d9801a04 	addi	r6,sp,104
    d160:	000c2380 	call	c238 <__ssprint_r>
    d164:	103f631e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d168:	d8c01c17 	ldw	r3,112(sp)
    d16c:	d8801b17 	ldw	r2,108(sp)
    d170:	d811883a 	mov	r8,sp
    d174:	003eab06 	br	cc24 <__alt_mem_Flash_flash_data+0xf400cc24>
    d178:	8880040c 	andi	r2,r17,16
    d17c:	1000331e 	bne	r2,zero,d24c <___svfiprintf_internal_r+0xe48>
    d180:	8880100c 	andi	r2,r17,64
    d184:	da802317 	ldw	r10,140(sp)
    d188:	10003126 	beq	r2,zero,d250 <___svfiprintf_internal_r+0xe4c>
    d18c:	5240000b 	ldhu	r9,0(r10)
    d190:	dac02317 	ldw	r11,140(sp)
    d194:	0015883a 	mov	r10,zero
    d198:	0005883a 	mov	r2,zero
    d19c:	5ac00104 	addi	r11,r11,4
    d1a0:	dac02315 	stw	r11,140(sp)
    d1a4:	4807883a 	mov	r3,r9
    d1a8:	003d4f06 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    d1ac:	10803fcc 	andi	r2,r2,255
    d1b0:	1080201c 	xori	r2,r2,128
    d1b4:	10bfe004 	addi	r2,r2,-128
    d1b8:	01000c04 	movi	r4,48
    d1bc:	11005b26 	beq	r2,r4,d32c <___svfiprintf_internal_r+0xf28>
    d1c0:	da802617 	ldw	r10,152(sp)
    d1c4:	d8801e17 	ldw	r2,120(sp)
    d1c8:	193fffc5 	stb	r4,-1(r3)
    d1cc:	52bfffc4 	addi	r10,r10,-1
    d1d0:	da802615 	stw	r10,152(sp)
    d1d4:	12b9c83a 	sub	fp,r2,r10
    d1d8:	003d6006 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d1dc:	00800244 	movi	r2,9
    d1e0:	127f1e36 	bltu	r2,r9,ce5c <__alt_mem_Flash_flash_data+0xf400ce5c>
    d1e4:	4a400c04 	addi	r9,r9,48
    d1e8:	d8c019c4 	addi	r3,sp,103
    d1ec:	da4019c5 	stb	r9,103(sp)
    d1f0:	df002b17 	ldw	fp,172(sp)
    d1f4:	d8c02615 	stw	r3,152(sp)
    d1f8:	003d5806 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d1fc:	d8802315 	stw	r2,140(sp)
    d200:	a9000007 	ldb	r4,0(r21)
    d204:	003ccb06 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    d208:	9009883a 	mov	r4,r18
    d20c:	a00b883a 	mov	r5,r20
    d210:	d9801a04 	addi	r6,sp,104
    d214:	000c2380 	call	c238 <__ssprint_r>
    d218:	103f361e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d21c:	d8c01c17 	ldw	r3,112(sp)
    d220:	003efc06 	br	ce14 <__alt_mem_Flash_flash_data+0xf400ce14>
    d224:	d8c01a04 	addi	r3,sp,104
    d228:	d8c02615 	stw	r3,152(sp)
    d22c:	003d4b06 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d230:	da802317 	ldw	r10,140(sp)
    d234:	1a400017 	ldw	r9,0(r3)
    d238:	52800104 	addi	r10,r10,4
    d23c:	da802315 	stw	r10,140(sp)
    d240:	4815d7fa 	srai	r10,r9,31
    d244:	5005883a 	mov	r2,r10
    d248:	003d9c06 	br	c8bc <__alt_mem_Flash_flash_data+0xf400c8bc>
    d24c:	da802317 	ldw	r10,140(sp)
    d250:	52400017 	ldw	r9,0(r10)
    d254:	003fce06 	br	d190 <__alt_mem_Flash_flash_data+0xf400d190>
    d258:	da802317 	ldw	r10,140(sp)
    d25c:	52400017 	ldw	r9,0(r10)
    d260:	003fb506 	br	d138 <__alt_mem_Flash_flash_data+0xf400d138>
    d264:	8880100c 	andi	r2,r17,64
    d268:	da802317 	ldw	r10,140(sp)
    d26c:	103e1926 	beq	r2,zero,cad4 <__alt_mem_Flash_flash_data+0xf400cad4>
    d270:	dac02317 	ldw	r11,140(sp)
    d274:	5240000b 	ldhu	r9,0(r10)
    d278:	0015883a 	mov	r10,zero
    d27c:	5ac00104 	addi	r11,r11,4
    d280:	dac02315 	stw	r11,140(sp)
    d284:	003de406 	br	ca18 <__alt_mem_Flash_flash_data+0xf400ca18>
    d288:	a9000007 	ldb	r4,0(r21)
    d28c:	003ca906 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    d290:	dac02317 	ldw	r11,140(sp)
    d294:	da802417 	ldw	r10,144(sp)
    d298:	58800017 	ldw	r2,0(r11)
    d29c:	5007d7fa 	srai	r3,r10,31
    d2a0:	5ac00104 	addi	r11,r11,4
    d2a4:	dac02315 	stw	r11,140(sp)
    d2a8:	12800015 	stw	r10,0(r2)
    d2ac:	10c00115 	stw	r3,4(r2)
    d2b0:	003c7806 	br	c494 <__alt_mem_Flash_flash_data+0xf400c494>
    d2b4:	00800c04 	movi	r2,48
    d2b8:	d8801d05 	stb	r2,116(sp)
    d2bc:	d9001d45 	stb	r4,117(sp)
    d2c0:	8c400094 	ori	r17,r17,2
    d2c4:	00800084 	movi	r2,2
    d2c8:	003d0706 	br	c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    d2cc:	ad400044 	addi	r21,r21,1
    d2d0:	8c400814 	ori	r17,r17,32
    d2d4:	11000047 	ldb	r4,1(r2)
    d2d8:	003c9606 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    d2dc:	dac02317 	ldw	r11,140(sp)
    d2e0:	da802417 	ldw	r10,144(sp)
    d2e4:	58800017 	ldw	r2,0(r11)
    d2e8:	5ac00104 	addi	r11,r11,4
    d2ec:	dac02315 	stw	r11,140(sp)
    d2f0:	12800015 	stw	r10,0(r2)
    d2f4:	003c6706 	br	c494 <__alt_mem_Flash_flash_data+0xf400c494>
    d2f8:	9009883a 	mov	r4,r18
    d2fc:	a00b883a 	mov	r5,r20
    d300:	d9801a04 	addi	r6,sp,104
    d304:	000c2380 	call	c238 <__ssprint_r>
    d308:	103efa1e 	bne	r2,zero,cef4 <__alt_mem_Flash_flash_data+0xf400cef4>
    d30c:	d8c01c17 	ldw	r3,112(sp)
    d310:	d8801b17 	ldw	r2,108(sp)
    d314:	d811883a 	mov	r8,sp
    d318:	003e5f06 	br	cc98 <__alt_mem_Flash_flash_data+0xf400cc98>
    d31c:	02c000b4 	movhi	r11,2
    d320:	5aff2504 	addi	r11,r11,-876
    d324:	dac02215 	stw	r11,136(sp)
    d328:	003e7906 	br	cd10 <__alt_mem_Flash_flash_data+0xf400cd10>
    d32c:	da801e17 	ldw	r10,120(sp)
    d330:	d8c02617 	ldw	r3,152(sp)
    d334:	50f9c83a 	sub	fp,r10,r3
    d338:	003d0806 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d33c:	da002c15 	stw	r8,176(sp)
    d340:	00030440 	call	3044 <strlen>
    d344:	1039883a 	mov	fp,r2
    d348:	dac01d83 	ldbu	r11,118(sp)
    d34c:	ddc02315 	stw	r23,140(sp)
    d350:	0021883a 	mov	r16,zero
    d354:	da002c17 	ldw	r8,176(sp)
    d358:	003d0006 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d35c:	00800184 	movi	r2,6
    d360:	1400012e 	bgeu	r2,r16,d368 <___svfiprintf_internal_r+0xf64>
    d364:	1021883a 	mov	r16,r2
    d368:	8039883a 	mov	fp,r16
    d36c:	802d883a 	mov	r22,r16
    d370:	80002116 	blt	r16,zero,d3f8 <___svfiprintf_internal_r+0xff4>
    d374:	008000b4 	movhi	r2,2
    d378:	10bec104 	addi	r2,r2,-1276
    d37c:	dd802015 	stw	r22,128(sp)
    d380:	ddc02315 	stw	r23,140(sp)
    d384:	d8802615 	stw	r2,152(sp)
    d388:	003d5d06 	br	c900 <__alt_mem_Flash_flash_data+0xf400c900>
    d38c:	04001004 	movi	r16,64
    d390:	800b883a 	mov	r5,r16
    d394:	0009e400 	call	9e40 <_malloc_r>
    d398:	da802717 	ldw	r10,156(sp)
    d39c:	50800015 	stw	r2,0(r10)
    d3a0:	50800415 	stw	r2,16(r10)
    d3a4:	10002026 	beq	r2,zero,d428 <___svfiprintf_internal_r+0x1024>
    d3a8:	da802717 	ldw	r10,156(sp)
    d3ac:	54000515 	stw	r16,20(r10)
    d3b0:	003c2806 	br	c454 <__alt_mem_Flash_flash_data+0xf400c454>
    d3b4:	010000b4 	movhi	r4,2
    d3b8:	213f2904 	addi	r4,r4,-860
    d3bc:	d9002815 	stw	r4,160(sp)
    d3c0:	003d7e06 	br	c9bc <__alt_mem_Flash_flash_data+0xf400c9bc>
    d3c4:	010000b4 	movhi	r4,2
    d3c8:	213f2904 	addi	r4,r4,-860
    d3cc:	d9002815 	stw	r4,160(sp)
    d3d0:	003e8706 	br	cdf0 <__alt_mem_Flash_flash_data+0xf400cdf0>
    d3d4:	010000b4 	movhi	r4,2
    d3d8:	213f2504 	addi	r4,r4,-876
    d3dc:	d9002215 	stw	r4,136(sp)
    d3e0:	003ef606 	br	cfbc <__alt_mem_Flash_flash_data+0xf400cfbc>
    d3e4:	8039883a 	mov	fp,r16
    d3e8:	dac01d83 	ldbu	r11,118(sp)
    d3ec:	ddc02315 	stw	r23,140(sp)
    d3f0:	0021883a 	mov	r16,zero
    d3f4:	003cd906 	br	c75c <__alt_mem_Flash_flash_data+0xf400c75c>
    d3f8:	002d883a 	mov	r22,zero
    d3fc:	003fdd06 	br	d374 <__alt_mem_Flash_flash_data+0xf400d374>
    d400:	dac02317 	ldw	r11,140(sp)
    d404:	a805883a 	mov	r2,r21
    d408:	502b883a 	mov	r21,r10
    d40c:	5c000017 	ldw	r16,0(r11)
    d410:	59000104 	addi	r4,r11,4
    d414:	d9002315 	stw	r4,140(sp)
    d418:	803fae0e 	bge	r16,zero,d2d4 <__alt_mem_Flash_flash_data+0xf400d2d4>
    d41c:	043fffc4 	movi	r16,-1
    d420:	11000047 	ldb	r4,1(r2)
    d424:	003c4306 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    d428:	dac02917 	ldw	r11,164(sp)
    d42c:	00800304 	movi	r2,12
    d430:	58800015 	stw	r2,0(r11)
    d434:	00bfffc4 	movi	r2,-1
    d438:	003eb306 	br	cf08 <__alt_mem_Flash_flash_data+0xf400cf08>

0000d43c <__sprint_r.part.0>:
    d43c:	28801917 	ldw	r2,100(r5)
    d440:	defff604 	addi	sp,sp,-40
    d444:	dd400515 	stw	r21,20(sp)
    d448:	dcc00315 	stw	r19,12(sp)
    d44c:	dfc00915 	stw	ra,36(sp)
    d450:	df000815 	stw	fp,32(sp)
    d454:	ddc00715 	stw	r23,28(sp)
    d458:	dd800615 	stw	r22,24(sp)
    d45c:	dd000415 	stw	r20,16(sp)
    d460:	dc800215 	stw	r18,8(sp)
    d464:	dc400115 	stw	r17,4(sp)
    d468:	dc000015 	stw	r16,0(sp)
    d46c:	1088000c 	andi	r2,r2,8192
    d470:	2827883a 	mov	r19,r5
    d474:	302b883a 	mov	r21,r6
    d478:	10002d26 	beq	r2,zero,d530 <__sprint_r.part.0+0xf4>
    d47c:	30800217 	ldw	r2,8(r6)
    d480:	35800017 	ldw	r22,0(r6)
    d484:	10002826 	beq	r2,zero,d528 <__sprint_r.part.0+0xec>
    d488:	2029883a 	mov	r20,r4
    d48c:	b5c00104 	addi	r23,r22,4
    d490:	04bfffc4 	movi	r18,-1
    d494:	bc400017 	ldw	r17,0(r23)
    d498:	b4000017 	ldw	r16,0(r22)
    d49c:	0039883a 	mov	fp,zero
    d4a0:	8822d0ba 	srli	r17,r17,2
    d4a4:	04400316 	blt	zero,r17,d4b4 <__sprint_r.part.0+0x78>
    d4a8:	00001806 	br	d50c <__sprint_r.part.0+0xd0>
    d4ac:	84000104 	addi	r16,r16,4
    d4b0:	8f001526 	beq	r17,fp,d508 <__sprint_r.part.0+0xcc>
    d4b4:	81400017 	ldw	r5,0(r16)
    d4b8:	a009883a 	mov	r4,r20
    d4bc:	980d883a 	mov	r6,r19
    d4c0:	000eb780 	call	eb78 <_fputwc_r>
    d4c4:	e7000044 	addi	fp,fp,1
    d4c8:	14bff81e 	bne	r2,r18,d4ac <__alt_mem_Flash_flash_data+0xf400d4ac>
    d4cc:	9005883a 	mov	r2,r18
    d4d0:	a8000215 	stw	zero,8(r21)
    d4d4:	a8000115 	stw	zero,4(r21)
    d4d8:	dfc00917 	ldw	ra,36(sp)
    d4dc:	df000817 	ldw	fp,32(sp)
    d4e0:	ddc00717 	ldw	r23,28(sp)
    d4e4:	dd800617 	ldw	r22,24(sp)
    d4e8:	dd400517 	ldw	r21,20(sp)
    d4ec:	dd000417 	ldw	r20,16(sp)
    d4f0:	dcc00317 	ldw	r19,12(sp)
    d4f4:	dc800217 	ldw	r18,8(sp)
    d4f8:	dc400117 	ldw	r17,4(sp)
    d4fc:	dc000017 	ldw	r16,0(sp)
    d500:	dec00a04 	addi	sp,sp,40
    d504:	f800283a 	ret
    d508:	a8800217 	ldw	r2,8(r21)
    d50c:	8c63883a 	add	r17,r17,r17
    d510:	8c63883a 	add	r17,r17,r17
    d514:	1445c83a 	sub	r2,r2,r17
    d518:	a8800215 	stw	r2,8(r21)
    d51c:	b5800204 	addi	r22,r22,8
    d520:	bdc00204 	addi	r23,r23,8
    d524:	103fdb1e 	bne	r2,zero,d494 <__alt_mem_Flash_flash_data+0xf400d494>
    d528:	0005883a 	mov	r2,zero
    d52c:	003fe806 	br	d4d0 <__alt_mem_Flash_flash_data+0xf400d4d0>
    d530:	00095600 	call	9560 <__sfvwrite_r>
    d534:	003fe606 	br	d4d0 <__alt_mem_Flash_flash_data+0xf400d4d0>

0000d538 <__sprint_r>:
    d538:	30c00217 	ldw	r3,8(r6)
    d53c:	18000126 	beq	r3,zero,d544 <__sprint_r+0xc>
    d540:	000d43c1 	jmpi	d43c <__sprint_r.part.0>
    d544:	30000115 	stw	zero,4(r6)
    d548:	0005883a 	mov	r2,zero
    d54c:	f800283a 	ret

0000d550 <___vfiprintf_internal_r>:
    d550:	deffca04 	addi	sp,sp,-216
    d554:	dd803215 	stw	r22,200(sp)
    d558:	dd403115 	stw	r21,196(sp)
    d55c:	dfc03515 	stw	ra,212(sp)
    d560:	df003415 	stw	fp,208(sp)
    d564:	ddc03315 	stw	r23,204(sp)
    d568:	dd003015 	stw	r20,192(sp)
    d56c:	dcc02f15 	stw	r19,188(sp)
    d570:	dc802e15 	stw	r18,184(sp)
    d574:	dc402d15 	stw	r17,180(sp)
    d578:	dc002c15 	stw	r16,176(sp)
    d57c:	d9002015 	stw	r4,128(sp)
    d580:	d9c02215 	stw	r7,136(sp)
    d584:	282b883a 	mov	r21,r5
    d588:	302d883a 	mov	r22,r6
    d58c:	20000226 	beq	r4,zero,d598 <___vfiprintf_internal_r+0x48>
    d590:	20800e17 	ldw	r2,56(r4)
    d594:	1001b126 	beq	r2,zero,dc5c <___vfiprintf_internal_r+0x70c>
    d598:	a880030b 	ldhu	r2,12(r21)
    d59c:	10c8000c 	andi	r3,r2,8192
    d5a0:	1800061e 	bne	r3,zero,d5bc <___vfiprintf_internal_r+0x6c>
    d5a4:	a9001917 	ldw	r4,100(r21)
    d5a8:	00f7ffc4 	movi	r3,-8193
    d5ac:	10880014 	ori	r2,r2,8192
    d5b0:	20c6703a 	and	r3,r4,r3
    d5b4:	a880030d 	sth	r2,12(r21)
    d5b8:	a8c01915 	stw	r3,100(r21)
    d5bc:	10c0020c 	andi	r3,r2,8
    d5c0:	18018926 	beq	r3,zero,dbe8 <___vfiprintf_internal_r+0x698>
    d5c4:	a8c00417 	ldw	r3,16(r21)
    d5c8:	18018726 	beq	r3,zero,dbe8 <___vfiprintf_internal_r+0x698>
    d5cc:	1080068c 	andi	r2,r2,26
    d5d0:	00c00284 	movi	r3,10
    d5d4:	10c18c26 	beq	r2,r3,dc08 <___vfiprintf_internal_r+0x6b8>
    d5d8:	d8801a04 	addi	r2,sp,104
    d5dc:	d8c019c4 	addi	r3,sp,103
    d5e0:	070000b4 	movhi	fp,2
    d5e4:	05c000b4 	movhi	r23,2
    d5e8:	10c9c83a 	sub	r4,r2,r3
    d5ec:	e73f3104 	addi	fp,fp,-828
    d5f0:	bdff2d04 	addi	r23,r23,-844
    d5f4:	d8801e15 	stw	r2,120(sp)
    d5f8:	d8c01f15 	stw	r3,124(sp)
    d5fc:	dec01a15 	stw	sp,104(sp)
    d600:	d8001c15 	stw	zero,112(sp)
    d604:	d8001b15 	stw	zero,108(sp)
    d608:	d8002615 	stw	zero,152(sp)
    d60c:	d8002315 	stw	zero,140(sp)
    d610:	d9002715 	stw	r4,156(sp)
    d614:	d811883a 	mov	r8,sp
    d618:	dd402115 	stw	r21,132(sp)
    d61c:	b021883a 	mov	r16,r22
    d620:	80800007 	ldb	r2,0(r16)
    d624:	10037226 	beq	r2,zero,e3f0 <___vfiprintf_internal_r+0xea0>
    d628:	01000944 	movi	r4,37
    d62c:	11037026 	beq	r2,r4,e3f0 <___vfiprintf_internal_r+0xea0>
    d630:	8005883a 	mov	r2,r16
    d634:	00000106 	br	d63c <___vfiprintf_internal_r+0xec>
    d638:	19000326 	beq	r3,r4,d648 <___vfiprintf_internal_r+0xf8>
    d63c:	10800044 	addi	r2,r2,1
    d640:	10c00007 	ldb	r3,0(r2)
    d644:	183ffc1e 	bne	r3,zero,d638 <__alt_mem_Flash_flash_data+0xf400d638>
    d648:	1425c83a 	sub	r18,r2,r16
    d64c:	1023883a 	mov	r17,r2
    d650:	90001026 	beq	r18,zero,d694 <___vfiprintf_internal_r+0x144>
    d654:	d8c01c17 	ldw	r3,112(sp)
    d658:	d8801b17 	ldw	r2,108(sp)
    d65c:	44000015 	stw	r16,0(r8)
    d660:	90c7883a 	add	r3,r18,r3
    d664:	10800044 	addi	r2,r2,1
    d668:	44800115 	stw	r18,4(r8)
    d66c:	d8c01c15 	stw	r3,112(sp)
    d670:	d8801b15 	stw	r2,108(sp)
    d674:	010001c4 	movi	r4,7
    d678:	2080750e 	bge	r4,r2,d850 <___vfiprintf_internal_r+0x300>
    d67c:	18036f1e 	bne	r3,zero,e43c <___vfiprintf_internal_r+0xeec>
    d680:	d8802317 	ldw	r2,140(sp)
    d684:	d8001b15 	stw	zero,108(sp)
    d688:	d811883a 	mov	r8,sp
    d68c:	1485883a 	add	r2,r2,r18
    d690:	d8802315 	stw	r2,140(sp)
    d694:	88800007 	ldb	r2,0(r17)
    d698:	10041026 	beq	r2,zero,e6dc <___vfiprintf_internal_r+0x118c>
    d69c:	88c00047 	ldb	r3,1(r17)
    d6a0:	88800044 	addi	r2,r17,1
    d6a4:	d8001d85 	stb	zero,118(sp)
    d6a8:	000f883a 	mov	r7,zero
    d6ac:	027fffc4 	movi	r9,-1
    d6b0:	0025883a 	mov	r18,zero
    d6b4:	002b883a 	mov	r21,zero
    d6b8:	01401604 	movi	r5,88
    d6bc:	01800244 	movi	r6,9
    d6c0:	03400a84 	movi	r13,42
    d6c4:	03001b04 	movi	r12,108
    d6c8:	14000044 	addi	r16,r2,1
    d6cc:	18bff804 	addi	r2,r3,-32
    d6d0:	28825536 	bltu	r5,r2,e028 <___vfiprintf_internal_r+0xad8>
    d6d4:	100490ba 	slli	r2,r2,2
    d6d8:	01000074 	movhi	r4,1
    d6dc:	2135bb04 	addi	r4,r4,-10516
    d6e0:	1105883a 	add	r2,r2,r4
    d6e4:	10800017 	ldw	r2,0(r2)
    d6e8:	1000683a 	jmp	r2
    d6ec:	0000ddec 	andhi	zero,zero,887
    d6f0:	0000e028 	cmpgeui	zero,zero,896
    d6f4:	0000e028 	cmpgeui	zero,zero,896
    d6f8:	0000de0c 	andi	zero,zero,888
    d6fc:	0000e028 	cmpgeui	zero,zero,896
    d700:	0000e028 	cmpgeui	zero,zero,896
    d704:	0000e028 	cmpgeui	zero,zero,896
    d708:	0000e028 	cmpgeui	zero,zero,896
    d70c:	0000e028 	cmpgeui	zero,zero,896
    d710:	0000e028 	cmpgeui	zero,zero,896
    d714:	0000de1c 	xori	zero,zero,888
    d718:	0000de3c 	xorhi	zero,zero,888
    d71c:	0000e028 	cmpgeui	zero,zero,896
    d720:	0000dc64 	muli	zero,zero,881
    d724:	0000dd50 	cmplti	zero,zero,885
    d728:	0000e028 	cmpgeui	zero,zero,896
    d72c:	0000dcd0 	cmplti	zero,zero,883
    d730:	0000dce0 	cmpeqi	zero,zero,883
    d734:	0000dce0 	cmpeqi	zero,zero,883
    d738:	0000dce0 	cmpeqi	zero,zero,883
    d73c:	0000dce0 	cmpeqi	zero,zero,883
    d740:	0000dce0 	cmpeqi	zero,zero,883
    d744:	0000dce0 	cmpeqi	zero,zero,883
    d748:	0000dce0 	cmpeqi	zero,zero,883
    d74c:	0000dce0 	cmpeqi	zero,zero,883
    d750:	0000dce0 	cmpeqi	zero,zero,883
    d754:	0000e028 	cmpgeui	zero,zero,896
    d758:	0000e028 	cmpgeui	zero,zero,896
    d75c:	0000e028 	cmpgeui	zero,zero,896
    d760:	0000e028 	cmpgeui	zero,zero,896
    d764:	0000e028 	cmpgeui	zero,zero,896
    d768:	0000e028 	cmpgeui	zero,zero,896
    d76c:	0000e028 	cmpgeui	zero,zero,896
    d770:	0000e028 	cmpgeui	zero,zero,896
    d774:	0000e028 	cmpgeui	zero,zero,896
    d778:	0000e028 	cmpgeui	zero,zero,896
    d77c:	0000dd0c 	andi	zero,zero,884
    d780:	0000e028 	cmpgeui	zero,zero,896
    d784:	0000e028 	cmpgeui	zero,zero,896
    d788:	0000e028 	cmpgeui	zero,zero,896
    d78c:	0000e028 	cmpgeui	zero,zero,896
    d790:	0000e028 	cmpgeui	zero,zero,896
    d794:	0000e028 	cmpgeui	zero,zero,896
    d798:	0000e028 	cmpgeui	zero,zero,896
    d79c:	0000e028 	cmpgeui	zero,zero,896
    d7a0:	0000e028 	cmpgeui	zero,zero,896
    d7a4:	0000e028 	cmpgeui	zero,zero,896
    d7a8:	0000d898 	cmpnei	zero,zero,866
    d7ac:	0000e028 	cmpgeui	zero,zero,896
    d7b0:	0000e028 	cmpgeui	zero,zero,896
    d7b4:	0000e028 	cmpgeui	zero,zero,896
    d7b8:	0000e028 	cmpgeui	zero,zero,896
    d7bc:	0000e028 	cmpgeui	zero,zero,896
    d7c0:	0000d864 	muli	zero,zero,865
    d7c4:	0000e028 	cmpgeui	zero,zero,896
    d7c8:	0000e028 	cmpgeui	zero,zero,896
    d7cc:	0000deac 	andhi	zero,zero,890
    d7d0:	0000e028 	cmpgeui	zero,zero,896
    d7d4:	0000e028 	cmpgeui	zero,zero,896
    d7d8:	0000e028 	cmpgeui	zero,zero,896
    d7dc:	0000e028 	cmpgeui	zero,zero,896
    d7e0:	0000e028 	cmpgeui	zero,zero,896
    d7e4:	0000e028 	cmpgeui	zero,zero,896
    d7e8:	0000e028 	cmpgeui	zero,zero,896
    d7ec:	0000e028 	cmpgeui	zero,zero,896
    d7f0:	0000e028 	cmpgeui	zero,zero,896
    d7f4:	0000e028 	cmpgeui	zero,zero,896
    d7f8:	0000de4c 	andi	zero,zero,889
    d7fc:	0000de78 	rdprs	zero,zero,889
    d800:	0000e028 	cmpgeui	zero,zero,896
    d804:	0000e028 	cmpgeui	zero,zero,896
    d808:	0000e028 	cmpgeui	zero,zero,896
    d80c:	0000df54 	movui	zero,893
    d810:	0000de78 	rdprs	zero,zero,889
    d814:	0000e028 	cmpgeui	zero,zero,896
    d818:	0000e028 	cmpgeui	zero,zero,896
    d81c:	0000df64 	muli	zero,zero,893
    d820:	0000e028 	cmpgeui	zero,zero,896
    d824:	0000dd90 	cmplti	zero,zero,886
    d828:	0000d89c 	xori	zero,zero,866
    d82c:	0000df78 	rdprs	zero,zero,893
    d830:	0000dfb8 	rdprs	zero,zero,894
    d834:	0000e028 	cmpgeui	zero,zero,896
    d838:	0000df00 	call	df0 <gescoord+0x1ac>
    d83c:	0000e028 	cmpgeui	zero,zero,896
    d840:	0000d868 	cmpgeui	zero,zero,865
    d844:	0000e028 	cmpgeui	zero,zero,896
    d848:	0000e028 	cmpgeui	zero,zero,896
    d84c:	0000dfc8 	cmpgei	zero,zero,895
    d850:	42000204 	addi	r8,r8,8
    d854:	d8802317 	ldw	r2,140(sp)
    d858:	1485883a 	add	r2,r2,r18
    d85c:	d8802315 	stw	r2,140(sp)
    d860:	003f8c06 	br	d694 <__alt_mem_Flash_flash_data+0xf400d694>
    d864:	ad400414 	ori	r21,r21,16
    d868:	a880080c 	andi	r2,r21,32
    d86c:	1001e61e 	bne	r2,zero,e008 <___vfiprintf_internal_r+0xab8>
    d870:	a880040c 	andi	r2,r21,16
    d874:	10034726 	beq	r2,zero,e594 <___vfiprintf_internal_r+0x1044>
    d878:	d8802217 	ldw	r2,136(sp)
    d87c:	001b883a 	mov	r13,zero
    d880:	15800017 	ldw	r22,0(r2)
    d884:	10800104 	addi	r2,r2,4
    d888:	d8802215 	stw	r2,136(sp)
    d88c:	b009883a 	mov	r4,r22
    d890:	00800044 	movi	r2,1
    d894:	00000c06 	br	d8c8 <___vfiprintf_internal_r+0x378>
    d898:	ad400414 	ori	r21,r21,16
    d89c:	a880080c 	andi	r2,r21,32
    d8a0:	1001491e 	bne	r2,zero,ddc8 <___vfiprintf_internal_r+0x878>
    d8a4:	a880040c 	andi	r2,r21,16
    d8a8:	10032d26 	beq	r2,zero,e560 <___vfiprintf_internal_r+0x1010>
    d8ac:	d9002217 	ldw	r4,136(sp)
    d8b0:	001b883a 	mov	r13,zero
    d8b4:	0005883a 	mov	r2,zero
    d8b8:	25800017 	ldw	r22,0(r4)
    d8bc:	21000104 	addi	r4,r4,4
    d8c0:	d9002215 	stw	r4,136(sp)
    d8c4:	b009883a 	mov	r4,r22
    d8c8:	d8001d85 	stb	zero,118(sp)
    d8cc:	4827883a 	mov	r19,r9
    d8d0:	001d883a 	mov	r14,zero
    d8d4:	48000216 	blt	r9,zero,d8e0 <___vfiprintf_internal_r+0x390>
    d8d8:	00ffdfc4 	movi	r3,-129
    d8dc:	a8ea703a 	and	r21,r21,r3
    d8e0:	2002071e 	bne	r4,zero,e100 <___vfiprintf_internal_r+0xbb0>
    d8e4:	4802ad26 	beq	r9,zero,e39c <___vfiprintf_internal_r+0xe4c>
    d8e8:	10803fcc 	andi	r2,r2,255
    d8ec:	00c00044 	movi	r3,1
    d8f0:	10c22b26 	beq	r2,r3,e1a0 <___vfiprintf_internal_r+0xc50>
    d8f4:	00c00084 	movi	r3,2
    d8f8:	dd001a04 	addi	r20,sp,104
    d8fc:	10c0dd1e 	bne	r2,r3,dc74 <___vfiprintf_internal_r+0x724>
    d900:	d9002617 	ldw	r4,152(sp)
    d904:	b08003cc 	andi	r2,r22,15
    d908:	6806973a 	slli	r3,r13,28
    d90c:	2085883a 	add	r2,r4,r2
    d910:	b02cd13a 	srli	r22,r22,4
    d914:	10800003 	ldbu	r2,0(r2)
    d918:	681ad13a 	srli	r13,r13,4
    d91c:	a53fffc4 	addi	r20,r20,-1
    d920:	1dacb03a 	or	r22,r3,r22
    d924:	a0800005 	stb	r2,0(r20)
    d928:	b344b03a 	or	r2,r22,r13
    d92c:	103ff51e 	bne	r2,zero,d904 <__alt_mem_Flash_flash_data+0xf400d904>
    d930:	d9001e17 	ldw	r4,120(sp)
    d934:	2527c83a 	sub	r19,r4,r20
    d938:	9823883a 	mov	r17,r19
    d93c:	9a40010e 	bge	r19,r9,d944 <___vfiprintf_internal_r+0x3f4>
    d940:	4823883a 	mov	r17,r9
    d944:	73803fcc 	andi	r14,r14,255
    d948:	7380201c 	xori	r14,r14,128
    d94c:	73bfe004 	addi	r14,r14,-128
    d950:	70000126 	beq	r14,zero,d958 <___vfiprintf_internal_r+0x408>
    d954:	8c400044 	addi	r17,r17,1
    d958:	ab40008c 	andi	r13,r21,2
    d95c:	68000126 	beq	r13,zero,d964 <___vfiprintf_internal_r+0x414>
    d960:	8c400084 	addi	r17,r17,2
    d964:	ad80210c 	andi	r22,r21,132
    d968:	b001c51e 	bne	r22,zero,e080 <___vfiprintf_internal_r+0xb30>
    d96c:	9447c83a 	sub	r3,r18,r17
    d970:	00c1c30e 	bge	zero,r3,e080 <___vfiprintf_internal_r+0xb30>
    d974:	01c00404 	movi	r7,16
    d978:	d8801c17 	ldw	r2,112(sp)
    d97c:	38c37b0e 	bge	r7,r3,e76c <___vfiprintf_internal_r+0x121c>
    d980:	010000b4 	movhi	r4,2
    d984:	213f3104 	addi	r4,r4,-828
    d988:	dc002915 	stw	r16,164(sp)
    d98c:	d9801b17 	ldw	r6,108(sp)
    d990:	d9002415 	stw	r4,144(sp)
    d994:	03c001c4 	movi	r15,7
    d998:	da402515 	stw	r9,148(sp)
    d99c:	db402815 	stw	r13,160(sp)
    d9a0:	1821883a 	mov	r16,r3
    d9a4:	00000506 	br	d9bc <___vfiprintf_internal_r+0x46c>
    d9a8:	31400084 	addi	r5,r6,2
    d9ac:	42000204 	addi	r8,r8,8
    d9b0:	200d883a 	mov	r6,r4
    d9b4:	843ffc04 	addi	r16,r16,-16
    d9b8:	3c000d0e 	bge	r7,r16,d9f0 <___vfiprintf_internal_r+0x4a0>
    d9bc:	10800404 	addi	r2,r2,16
    d9c0:	31000044 	addi	r4,r6,1
    d9c4:	47000015 	stw	fp,0(r8)
    d9c8:	41c00115 	stw	r7,4(r8)
    d9cc:	d8801c15 	stw	r2,112(sp)
    d9d0:	d9001b15 	stw	r4,108(sp)
    d9d4:	793ff40e 	bge	r15,r4,d9a8 <__alt_mem_Flash_flash_data+0xf400d9a8>
    d9d8:	10019b1e 	bne	r2,zero,e048 <___vfiprintf_internal_r+0xaf8>
    d9dc:	843ffc04 	addi	r16,r16,-16
    d9e0:	000d883a 	mov	r6,zero
    d9e4:	01400044 	movi	r5,1
    d9e8:	d811883a 	mov	r8,sp
    d9ec:	3c3ff316 	blt	r7,r16,d9bc <__alt_mem_Flash_flash_data+0xf400d9bc>
    d9f0:	8007883a 	mov	r3,r16
    d9f4:	da402517 	ldw	r9,148(sp)
    d9f8:	db402817 	ldw	r13,160(sp)
    d9fc:	dc002917 	ldw	r16,164(sp)
    da00:	d9002417 	ldw	r4,144(sp)
    da04:	1885883a 	add	r2,r3,r2
    da08:	40c00115 	stw	r3,4(r8)
    da0c:	41000015 	stw	r4,0(r8)
    da10:	d8801c15 	stw	r2,112(sp)
    da14:	d9401b15 	stw	r5,108(sp)
    da18:	00c001c4 	movi	r3,7
    da1c:	19426a16 	blt	r3,r5,e3c8 <___vfiprintf_internal_r+0xe78>
    da20:	d8c01d87 	ldb	r3,118(sp)
    da24:	42000204 	addi	r8,r8,8
    da28:	29000044 	addi	r4,r5,1
    da2c:	1801991e 	bne	r3,zero,e094 <___vfiprintf_internal_r+0xb44>
    da30:	68000c26 	beq	r13,zero,da64 <___vfiprintf_internal_r+0x514>
    da34:	d8c01d04 	addi	r3,sp,116
    da38:	10800084 	addi	r2,r2,2
    da3c:	40c00015 	stw	r3,0(r8)
    da40:	00c00084 	movi	r3,2
    da44:	40c00115 	stw	r3,4(r8)
    da48:	d8801c15 	stw	r2,112(sp)
    da4c:	d9001b15 	stw	r4,108(sp)
    da50:	00c001c4 	movi	r3,7
    da54:	19024c16 	blt	r3,r4,e388 <___vfiprintf_internal_r+0xe38>
    da58:	200b883a 	mov	r5,r4
    da5c:	42000204 	addi	r8,r8,8
    da60:	21000044 	addi	r4,r4,1
    da64:	00c02004 	movi	r3,128
    da68:	b0c20126 	beq	r22,r3,e270 <___vfiprintf_internal_r+0xd20>
    da6c:	4cedc83a 	sub	r22,r9,r19
    da70:	0580230e 	bge	zero,r22,db00 <___vfiprintf_internal_r+0x5b0>
    da74:	01c00404 	movi	r7,16
    da78:	3d83140e 	bge	r7,r22,e6cc <___vfiprintf_internal_r+0x117c>
    da7c:	010000b4 	movhi	r4,2
    da80:	213f2d04 	addi	r4,r4,-844
    da84:	d9002415 	stw	r4,144(sp)
    da88:	034001c4 	movi	r13,7
    da8c:	00000506 	br	daa4 <___vfiprintf_internal_r+0x554>
    da90:	29000084 	addi	r4,r5,2
    da94:	42000204 	addi	r8,r8,8
    da98:	180b883a 	mov	r5,r3
    da9c:	b5bffc04 	addi	r22,r22,-16
    daa0:	3d800d0e 	bge	r7,r22,dad8 <___vfiprintf_internal_r+0x588>
    daa4:	10800404 	addi	r2,r2,16
    daa8:	28c00044 	addi	r3,r5,1
    daac:	45c00015 	stw	r23,0(r8)
    dab0:	41c00115 	stw	r7,4(r8)
    dab4:	d8801c15 	stw	r2,112(sp)
    dab8:	d8c01b15 	stw	r3,108(sp)
    dabc:	68fff40e 	bge	r13,r3,da90 <__alt_mem_Flash_flash_data+0xf400da90>
    dac0:	1001811e 	bne	r2,zero,e0c8 <___vfiprintf_internal_r+0xb78>
    dac4:	b5bffc04 	addi	r22,r22,-16
    dac8:	01000044 	movi	r4,1
    dacc:	000b883a 	mov	r5,zero
    dad0:	d811883a 	mov	r8,sp
    dad4:	3dbff316 	blt	r7,r22,daa4 <__alt_mem_Flash_flash_data+0xf400daa4>
    dad8:	d8c02417 	ldw	r3,144(sp)
    dadc:	1585883a 	add	r2,r2,r22
    dae0:	45800115 	stw	r22,4(r8)
    dae4:	40c00015 	stw	r3,0(r8)
    dae8:	d8801c15 	stw	r2,112(sp)
    daec:	d9001b15 	stw	r4,108(sp)
    daf0:	00c001c4 	movi	r3,7
    daf4:	1901d016 	blt	r3,r4,e238 <___vfiprintf_internal_r+0xce8>
    daf8:	42000204 	addi	r8,r8,8
    dafc:	21000044 	addi	r4,r4,1
    db00:	14c5883a 	add	r2,r2,r19
    db04:	45000015 	stw	r20,0(r8)
    db08:	44c00115 	stw	r19,4(r8)
    db0c:	d8801c15 	stw	r2,112(sp)
    db10:	d9001b15 	stw	r4,108(sp)
    db14:	00c001c4 	movi	r3,7
    db18:	1901cf0e 	bge	r3,r4,e258 <___vfiprintf_internal_r+0xd08>
    db1c:	1002361e 	bne	r2,zero,e3f8 <___vfiprintf_internal_r+0xea8>
    db20:	d8001b15 	stw	zero,108(sp)
    db24:	aac0010c 	andi	r11,r21,4
    db28:	58002826 	beq	r11,zero,dbcc <___vfiprintf_internal_r+0x67c>
    db2c:	9467c83a 	sub	r19,r18,r17
    db30:	d811883a 	mov	r8,sp
    db34:	04c3340e 	bge	zero,r19,e808 <___vfiprintf_internal_r+0x12b8>
    db38:	01c00404 	movi	r7,16
    db3c:	3cc31b0e 	bge	r7,r19,e7ac <___vfiprintf_internal_r+0x125c>
    db40:	00c000b4 	movhi	r3,2
    db44:	18ff3104 	addi	r3,r3,-828
    db48:	d9001b17 	ldw	r4,108(sp)
    db4c:	d8c02415 	stw	r3,144(sp)
    db50:	382b883a 	mov	r21,r7
    db54:	050001c4 	movi	r20,7
    db58:	dd802017 	ldw	r22,128(sp)
    db5c:	00000506 	br	db74 <___vfiprintf_internal_r+0x624>
    db60:	21400084 	addi	r5,r4,2
    db64:	42000204 	addi	r8,r8,8
    db68:	1809883a 	mov	r4,r3
    db6c:	9cfffc04 	addi	r19,r19,-16
    db70:	acc00d0e 	bge	r21,r19,dba8 <___vfiprintf_internal_r+0x658>
    db74:	10800404 	addi	r2,r2,16
    db78:	20c00044 	addi	r3,r4,1
    db7c:	47000015 	stw	fp,0(r8)
    db80:	45400115 	stw	r21,4(r8)
    db84:	d8801c15 	stw	r2,112(sp)
    db88:	d8c01b15 	stw	r3,108(sp)
    db8c:	a0fff40e 	bge	r20,r3,db60 <__alt_mem_Flash_flash_data+0xf400db60>
    db90:	10019f1e 	bne	r2,zero,e210 <___vfiprintf_internal_r+0xcc0>
    db94:	9cfffc04 	addi	r19,r19,-16
    db98:	01400044 	movi	r5,1
    db9c:	0009883a 	mov	r4,zero
    dba0:	d811883a 	mov	r8,sp
    dba4:	acfff316 	blt	r21,r19,db74 <__alt_mem_Flash_flash_data+0xf400db74>
    dba8:	d8c02417 	ldw	r3,144(sp)
    dbac:	14c5883a 	add	r2,r2,r19
    dbb0:	44c00115 	stw	r19,4(r8)
    dbb4:	40c00015 	stw	r3,0(r8)
    dbb8:	d8801c15 	stw	r2,112(sp)
    dbbc:	d9401b15 	stw	r5,108(sp)
    dbc0:	00c001c4 	movi	r3,7
    dbc4:	1941810e 	bge	r3,r5,e1cc <___vfiprintf_internal_r+0xc7c>
    dbc8:	10017a1e 	bne	r2,zero,e1b4 <___vfiprintf_internal_r+0xc64>
    dbcc:	8c82a416 	blt	r17,r18,e660 <___vfiprintf_internal_r+0x1110>
    dbd0:	d9002317 	ldw	r4,140(sp)
    dbd4:	2449883a 	add	r4,r4,r17
    dbd8:	d9002315 	stw	r4,140(sp)
    dbdc:	d8001b15 	stw	zero,108(sp)
    dbe0:	d811883a 	mov	r8,sp
    dbe4:	003e8e06 	br	d620 <__alt_mem_Flash_flash_data+0xf400d620>
    dbe8:	d9002017 	ldw	r4,128(sp)
    dbec:	a80b883a 	mov	r5,r21
    dbf0:	000709c0 	call	709c <__swsetup_r>
    dbf4:	10000c1e 	bne	r2,zero,dc28 <___vfiprintf_internal_r+0x6d8>
    dbf8:	a880030b 	ldhu	r2,12(r21)
    dbfc:	00c00284 	movi	r3,10
    dc00:	1080068c 	andi	r2,r2,26
    dc04:	10fe741e 	bne	r2,r3,d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    dc08:	a880038f 	ldh	r2,14(r21)
    dc0c:	103e7216 	blt	r2,zero,d5d8 <__alt_mem_Flash_flash_data+0xf400d5d8>
    dc10:	d9002017 	ldw	r4,128(sp)
    dc14:	d9c02217 	ldw	r7,136(sp)
    dc18:	a80b883a 	mov	r5,r21
    dc1c:	b00d883a 	mov	r6,r22
    dc20:	000e8440 	call	e844 <__sbprintf>
    dc24:	00000106 	br	dc2c <___vfiprintf_internal_r+0x6dc>
    dc28:	00bfffc4 	movi	r2,-1
    dc2c:	dfc03517 	ldw	ra,212(sp)
    dc30:	df003417 	ldw	fp,208(sp)
    dc34:	ddc03317 	ldw	r23,204(sp)
    dc38:	dd803217 	ldw	r22,200(sp)
    dc3c:	dd403117 	ldw	r21,196(sp)
    dc40:	dd003017 	ldw	r20,192(sp)
    dc44:	dcc02f17 	ldw	r19,188(sp)
    dc48:	dc802e17 	ldw	r18,184(sp)
    dc4c:	dc402d17 	ldw	r17,180(sp)
    dc50:	dc002c17 	ldw	r16,176(sp)
    dc54:	dec03604 	addi	sp,sp,216
    dc58:	f800283a 	ret
    dc5c:	00090fc0 	call	90fc <__sinit>
    dc60:	003e4d06 	br	d598 <__alt_mem_Flash_flash_data+0xf400d598>
    dc64:	8005883a 	mov	r2,r16
    dc68:	ad400114 	ori	r21,r21,4
    dc6c:	80c00007 	ldb	r3,0(r16)
    dc70:	003e9506 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    dc74:	b006d0fa 	srli	r3,r22,3
    dc78:	6808977a 	slli	r4,r13,29
    dc7c:	681ad0fa 	srli	r13,r13,3
    dc80:	b58001cc 	andi	r22,r22,7
    dc84:	b0800c04 	addi	r2,r22,48
    dc88:	a53fffc4 	addi	r20,r20,-1
    dc8c:	20ecb03a 	or	r22,r4,r3
    dc90:	a0800005 	stb	r2,0(r20)
    dc94:	b346b03a 	or	r3,r22,r13
    dc98:	183ff61e 	bne	r3,zero,dc74 <__alt_mem_Flash_flash_data+0xf400dc74>
    dc9c:	a8c0004c 	andi	r3,r21,1
    dca0:	a009883a 	mov	r4,r20
    dca4:	18013b26 	beq	r3,zero,e194 <___vfiprintf_internal_r+0xc44>
    dca8:	10803fcc 	andi	r2,r2,255
    dcac:	1080201c 	xori	r2,r2,128
    dcb0:	10bfe004 	addi	r2,r2,-128
    dcb4:	00c00c04 	movi	r3,48
    dcb8:	10ff1d26 	beq	r2,r3,d930 <__alt_mem_Flash_flash_data+0xf400d930>
    dcbc:	d8801e17 	ldw	r2,120(sp)
    dcc0:	a53fffc4 	addi	r20,r20,-1
    dcc4:	20ffffc5 	stb	r3,-1(r4)
    dcc8:	1527c83a 	sub	r19,r2,r20
    dccc:	003f1a06 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    dcd0:	ad402014 	ori	r21,r21,128
    dcd4:	8005883a 	mov	r2,r16
    dcd8:	80c00007 	ldb	r3,0(r16)
    dcdc:	003e7a06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    dce0:	8005883a 	mov	r2,r16
    dce4:	0025883a 	mov	r18,zero
    dce8:	193ff404 	addi	r4,r3,-48
    dcec:	10c00007 	ldb	r3,0(r2)
    dcf0:	948002a4 	muli	r18,r18,10
    dcf4:	84000044 	addi	r16,r16,1
    dcf8:	8005883a 	mov	r2,r16
    dcfc:	9125883a 	add	r18,r18,r4
    dd00:	193ff404 	addi	r4,r3,-48
    dd04:	313ff92e 	bgeu	r6,r4,dcec <__alt_mem_Flash_flash_data+0xf400dcec>
    dd08:	003e7006 	br	d6cc <__alt_mem_Flash_flash_data+0xf400d6cc>
    dd0c:	ad400414 	ori	r21,r21,16
    dd10:	d9c01d85 	stb	r7,118(sp)
    dd14:	a880080c 	andi	r2,r21,32
    dd18:	d8c02217 	ldw	r3,136(sp)
    dd1c:	10005a26 	beq	r2,zero,de88 <___vfiprintf_internal_r+0x938>
    dd20:	d9002217 	ldw	r4,136(sp)
    dd24:	18800117 	ldw	r2,4(r3)
    dd28:	1d800017 	ldw	r22,0(r3)
    dd2c:	21000204 	addi	r4,r4,8
    dd30:	d9002215 	stw	r4,136(sp)
    dd34:	101b883a 	mov	r13,r2
    dd38:	1001f416 	blt	r2,zero,e50c <___vfiprintf_internal_r+0xfbc>
    dd3c:	db801d83 	ldbu	r14,118(sp)
    dd40:	4827883a 	mov	r19,r9
    dd44:	00800044 	movi	r2,1
    dd48:	b348b03a 	or	r4,r22,r13
    dd4c:	003ee106 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dd50:	80c00007 	ldb	r3,0(r16)
    dd54:	80800044 	addi	r2,r16,1
    dd58:	1b42a326 	beq	r3,r13,e7e8 <___vfiprintf_internal_r+0x1298>
    dd5c:	193ff404 	addi	r4,r3,-48
    dd60:	1021883a 	mov	r16,r2
    dd64:	0013883a 	mov	r9,zero
    dd68:	313e5836 	bltu	r6,r4,d6cc <__alt_mem_Flash_flash_data+0xf400d6cc>
    dd6c:	80c00007 	ldb	r3,0(r16)
    dd70:	4a4002a4 	muli	r9,r9,10
    dd74:	84000044 	addi	r16,r16,1
    dd78:	2253883a 	add	r9,r4,r9
    dd7c:	193ff404 	addi	r4,r3,-48
    dd80:	313ffa2e 	bgeu	r6,r4,dd6c <__alt_mem_Flash_flash_data+0xf400dd6c>
    dd84:	483e510e 	bge	r9,zero,d6cc <__alt_mem_Flash_flash_data+0xf400d6cc>
    dd88:	027fffc4 	movi	r9,-1
    dd8c:	003e4f06 	br	d6cc <__alt_mem_Flash_flash_data+0xf400d6cc>
    dd90:	d9c01d85 	stb	r7,118(sp)
    dd94:	a880080c 	andi	r2,r21,32
    dd98:	10020826 	beq	r2,zero,e5bc <___vfiprintf_internal_r+0x106c>
    dd9c:	d8c02217 	ldw	r3,136(sp)
    dda0:	d9002317 	ldw	r4,140(sp)
    dda4:	18800017 	ldw	r2,0(r3)
    dda8:	2007d7fa 	srai	r3,r4,31
    ddac:	d9002217 	ldw	r4,136(sp)
    ddb0:	10c00115 	stw	r3,4(r2)
    ddb4:	21000104 	addi	r4,r4,4
    ddb8:	d9002215 	stw	r4,136(sp)
    ddbc:	d9002317 	ldw	r4,140(sp)
    ddc0:	11000015 	stw	r4,0(r2)
    ddc4:	003e1606 	br	d620 <__alt_mem_Flash_flash_data+0xf400d620>
    ddc8:	d8802217 	ldw	r2,136(sp)
    ddcc:	d8c02217 	ldw	r3,136(sp)
    ddd0:	15800017 	ldw	r22,0(r2)
    ddd4:	13400117 	ldw	r13,4(r2)
    ddd8:	18c00204 	addi	r3,r3,8
    dddc:	0005883a 	mov	r2,zero
    dde0:	d8c02215 	stw	r3,136(sp)
    dde4:	b348b03a 	or	r4,r22,r13
    dde8:	003eb706 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    ddec:	38803fcc 	andi	r2,r7,255
    ddf0:	1080201c 	xori	r2,r2,128
    ddf4:	10bfe004 	addi	r2,r2,-128
    ddf8:	1001e31e 	bne	r2,zero,e588 <___vfiprintf_internal_r+0x1038>
    ddfc:	8005883a 	mov	r2,r16
    de00:	01c00804 	movi	r7,32
    de04:	80c00007 	ldb	r3,0(r16)
    de08:	003e2f06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    de0c:	ad400054 	ori	r21,r21,1
    de10:	8005883a 	mov	r2,r16
    de14:	80c00007 	ldb	r3,0(r16)
    de18:	003e2b06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    de1c:	d8c02217 	ldw	r3,136(sp)
    de20:	1c800017 	ldw	r18,0(r3)
    de24:	18c00104 	addi	r3,r3,4
    de28:	90023816 	blt	r18,zero,e70c <___vfiprintf_internal_r+0x11bc>
    de2c:	d8c02215 	stw	r3,136(sp)
    de30:	8005883a 	mov	r2,r16
    de34:	80c00007 	ldb	r3,0(r16)
    de38:	003e2306 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    de3c:	8005883a 	mov	r2,r16
    de40:	01c00ac4 	movi	r7,43
    de44:	80c00007 	ldb	r3,0(r16)
    de48:	003e1f06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    de4c:	d8c02217 	ldw	r3,136(sp)
    de50:	04400044 	movi	r17,1
    de54:	d8001d85 	stb	zero,118(sp)
    de58:	18800017 	ldw	r2,0(r3)
    de5c:	18c00104 	addi	r3,r3,4
    de60:	d8c02215 	stw	r3,136(sp)
    de64:	d8801005 	stb	r2,64(sp)
    de68:	8827883a 	mov	r19,r17
    de6c:	dd001004 	addi	r20,sp,64
    de70:	0013883a 	mov	r9,zero
    de74:	003eb806 	br	d958 <__alt_mem_Flash_flash_data+0xf400d958>
    de78:	d9c01d85 	stb	r7,118(sp)
    de7c:	a880080c 	andi	r2,r21,32
    de80:	d8c02217 	ldw	r3,136(sp)
    de84:	103fa61e 	bne	r2,zero,dd20 <__alt_mem_Flash_flash_data+0xf400dd20>
    de88:	a880040c 	andi	r2,r21,16
    de8c:	1001dd26 	beq	r2,zero,e604 <___vfiprintf_internal_r+0x10b4>
    de90:	1d800017 	ldw	r22,0(r3)
    de94:	d8802217 	ldw	r2,136(sp)
    de98:	b01bd7fa 	srai	r13,r22,31
    de9c:	10800104 	addi	r2,r2,4
    dea0:	d8802215 	stw	r2,136(sp)
    dea4:	6805883a 	mov	r2,r13
    dea8:	003fa306 	br	dd38 <__alt_mem_Flash_flash_data+0xf400dd38>
    deac:	008000b4 	movhi	r2,2
    deb0:	10beb704 	addi	r2,r2,-1316
    deb4:	d8802615 	stw	r2,152(sp)
    deb8:	d9c01d85 	stb	r7,118(sp)
    debc:	a880080c 	andi	r2,r21,32
    dec0:	10004726 	beq	r2,zero,dfe0 <___vfiprintf_internal_r+0xa90>
    dec4:	d9002217 	ldw	r4,136(sp)
    dec8:	25800017 	ldw	r22,0(r4)
    decc:	23400117 	ldw	r13,4(r4)
    ded0:	21000204 	addi	r4,r4,8
    ded4:	d9002215 	stw	r4,136(sp)
    ded8:	a880004c 	andi	r2,r21,1
    dedc:	10014e26 	beq	r2,zero,e418 <___vfiprintf_internal_r+0xec8>
    dee0:	b348b03a 	or	r4,r22,r13
    dee4:	20019c26 	beq	r4,zero,e558 <___vfiprintf_internal_r+0x1008>
    dee8:	00800c04 	movi	r2,48
    deec:	d8801d05 	stb	r2,116(sp)
    def0:	d8c01d45 	stb	r3,117(sp)
    def4:	ad400094 	ori	r21,r21,2
    def8:	00800084 	movi	r2,2
    defc:	003e7206 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    df00:	d8c02217 	ldw	r3,136(sp)
    df04:	d8001d85 	stb	zero,118(sp)
    df08:	1d000017 	ldw	r20,0(r3)
    df0c:	1d800104 	addi	r22,r3,4
    df10:	a0021c26 	beq	r20,zero,e784 <___vfiprintf_internal_r+0x1234>
    df14:	a009883a 	mov	r4,r20
    df18:	48020016 	blt	r9,zero,e71c <___vfiprintf_internal_r+0x11cc>
    df1c:	480d883a 	mov	r6,r9
    df20:	000b883a 	mov	r5,zero
    df24:	da002a15 	stw	r8,168(sp)
    df28:	da402b15 	stw	r9,172(sp)
    df2c:	000a5e80 	call	a5e8 <memchr>
    df30:	da002a17 	ldw	r8,168(sp)
    df34:	da402b17 	ldw	r9,172(sp)
    df38:	10022226 	beq	r2,zero,e7c4 <___vfiprintf_internal_r+0x1274>
    df3c:	1527c83a 	sub	r19,r2,r20
    df40:	4cc1c916 	blt	r9,r19,e668 <___vfiprintf_internal_r+0x1118>
    df44:	db801d83 	ldbu	r14,118(sp)
    df48:	dd802215 	stw	r22,136(sp)
    df4c:	0013883a 	mov	r9,zero
    df50:	003e7906 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    df54:	ad401014 	ori	r21,r21,64
    df58:	8005883a 	mov	r2,r16
    df5c:	80c00007 	ldb	r3,0(r16)
    df60:	003dd906 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    df64:	80c00007 	ldb	r3,0(r16)
    df68:	8005883a 	mov	r2,r16
    df6c:	1b01e326 	beq	r3,r12,e6fc <___vfiprintf_internal_r+0x11ac>
    df70:	ad400414 	ori	r21,r21,16
    df74:	003dd406 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    df78:	d9002217 	ldw	r4,136(sp)
    df7c:	00800c04 	movi	r2,48
    df80:	d8801d05 	stb	r2,116(sp)
    df84:	25800017 	ldw	r22,0(r4)
    df88:	00801e04 	movi	r2,120
    df8c:	d8801d45 	stb	r2,117(sp)
    df90:	008000b4 	movhi	r2,2
    df94:	21000104 	addi	r4,r4,4
    df98:	10bebc04 	addi	r2,r2,-1296
    df9c:	d9002215 	stw	r4,136(sp)
    dfa0:	d8802615 	stw	r2,152(sp)
    dfa4:	001b883a 	mov	r13,zero
    dfa8:	ad400094 	ori	r21,r21,2
    dfac:	00800084 	movi	r2,2
    dfb0:	b009883a 	mov	r4,r22
    dfb4:	003e4406 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    dfb8:	ad400814 	ori	r21,r21,32
    dfbc:	8005883a 	mov	r2,r16
    dfc0:	80c00007 	ldb	r3,0(r16)
    dfc4:	003dc006 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    dfc8:	008000b4 	movhi	r2,2
    dfcc:	10bebc04 	addi	r2,r2,-1296
    dfd0:	d8802615 	stw	r2,152(sp)
    dfd4:	d9c01d85 	stb	r7,118(sp)
    dfd8:	a880080c 	andi	r2,r21,32
    dfdc:	103fb91e 	bne	r2,zero,dec4 <__alt_mem_Flash_flash_data+0xf400dec4>
    dfe0:	a880040c 	andi	r2,r21,16
    dfe4:	10010f1e 	bne	r2,zero,e424 <___vfiprintf_internal_r+0xed4>
    dfe8:	a880100c 	andi	r2,r21,64
    dfec:	10010d26 	beq	r2,zero,e424 <___vfiprintf_internal_r+0xed4>
    dff0:	d9002217 	ldw	r4,136(sp)
    dff4:	001b883a 	mov	r13,zero
    dff8:	2580000b 	ldhu	r22,0(r4)
    dffc:	21000104 	addi	r4,r4,4
    e000:	d9002215 	stw	r4,136(sp)
    e004:	003fb406 	br	ded8 <__alt_mem_Flash_flash_data+0xf400ded8>
    e008:	d9002217 	ldw	r4,136(sp)
    e00c:	00800044 	movi	r2,1
    e010:	25800017 	ldw	r22,0(r4)
    e014:	23400117 	ldw	r13,4(r4)
    e018:	21000204 	addi	r4,r4,8
    e01c:	d9002215 	stw	r4,136(sp)
    e020:	b348b03a 	or	r4,r22,r13
    e024:	003e2806 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e028:	d9c01d85 	stb	r7,118(sp)
    e02c:	1801ab26 	beq	r3,zero,e6dc <___vfiprintf_internal_r+0x118c>
    e030:	04400044 	movi	r17,1
    e034:	d8c01005 	stb	r3,64(sp)
    e038:	d8001d85 	stb	zero,118(sp)
    e03c:	8827883a 	mov	r19,r17
    e040:	dd001004 	addi	r20,sp,64
    e044:	003f8a06 	br	de70 <__alt_mem_Flash_flash_data+0xf400de70>
    e048:	d9002017 	ldw	r4,128(sp)
    e04c:	d9402117 	ldw	r5,132(sp)
    e050:	d9801a04 	addi	r6,sp,104
    e054:	d9c02b15 	stw	r7,172(sp)
    e058:	dbc02a15 	stw	r15,168(sp)
    e05c:	000d43c0 	call	d43c <__sprint_r.part.0>
    e060:	d9c02b17 	ldw	r7,172(sp)
    e064:	dbc02a17 	ldw	r15,168(sp)
    e068:	1000631e 	bne	r2,zero,e1f8 <___vfiprintf_internal_r+0xca8>
    e06c:	d9801b17 	ldw	r6,108(sp)
    e070:	d8801c17 	ldw	r2,112(sp)
    e074:	d811883a 	mov	r8,sp
    e078:	31400044 	addi	r5,r6,1
    e07c:	003e4d06 	br	d9b4 <__alt_mem_Flash_flash_data+0xf400d9b4>
    e080:	d9401b17 	ldw	r5,108(sp)
    e084:	d8801c17 	ldw	r2,112(sp)
    e088:	29000044 	addi	r4,r5,1
    e08c:	d8c01d87 	ldb	r3,118(sp)
    e090:	183e6726 	beq	r3,zero,da30 <__alt_mem_Flash_flash_data+0xf400da30>
    e094:	00c00044 	movi	r3,1
    e098:	d9401d84 	addi	r5,sp,118
    e09c:	10c5883a 	add	r2,r2,r3
    e0a0:	41400015 	stw	r5,0(r8)
    e0a4:	40c00115 	stw	r3,4(r8)
    e0a8:	d8801c15 	stw	r2,112(sp)
    e0ac:	d9001b15 	stw	r4,108(sp)
    e0b0:	014001c4 	movi	r5,7
    e0b4:	2900ab16 	blt	r5,r4,e364 <___vfiprintf_internal_r+0xe14>
    e0b8:	200b883a 	mov	r5,r4
    e0bc:	42000204 	addi	r8,r8,8
    e0c0:	21000044 	addi	r4,r4,1
    e0c4:	003e5a06 	br	da30 <__alt_mem_Flash_flash_data+0xf400da30>
    e0c8:	d9002017 	ldw	r4,128(sp)
    e0cc:	d9402117 	ldw	r5,132(sp)
    e0d0:	d9801a04 	addi	r6,sp,104
    e0d4:	d9c02b15 	stw	r7,172(sp)
    e0d8:	db402a15 	stw	r13,168(sp)
    e0dc:	000d43c0 	call	d43c <__sprint_r.part.0>
    e0e0:	d9c02b17 	ldw	r7,172(sp)
    e0e4:	db402a17 	ldw	r13,168(sp)
    e0e8:	1000431e 	bne	r2,zero,e1f8 <___vfiprintf_internal_r+0xca8>
    e0ec:	d9401b17 	ldw	r5,108(sp)
    e0f0:	d8801c17 	ldw	r2,112(sp)
    e0f4:	d811883a 	mov	r8,sp
    e0f8:	29000044 	addi	r4,r5,1
    e0fc:	003e6706 	br	da9c <__alt_mem_Flash_flash_data+0xf400da9c>
    e100:	10803fcc 	andi	r2,r2,255
    e104:	00c00044 	movi	r3,1
    e108:	10fdfa1e 	bne	r2,r3,d8f4 <__alt_mem_Flash_flash_data+0xf400d8f4>
    e10c:	6800021e 	bne	r13,zero,e118 <___vfiprintf_internal_r+0xbc8>
    e110:	00800244 	movi	r2,9
    e114:	1580222e 	bgeu	r2,r22,e1a0 <___vfiprintf_internal_r+0xc50>
    e118:	dc802415 	stw	r18,144(sp)
    e11c:	dc002515 	stw	r16,148(sp)
    e120:	dc401a04 	addi	r17,sp,104
    e124:	b021883a 	mov	r16,r22
    e128:	4827883a 	mov	r19,r9
    e12c:	4029883a 	mov	r20,r8
    e130:	702d883a 	mov	r22,r14
    e134:	6825883a 	mov	r18,r13
    e138:	8009883a 	mov	r4,r16
    e13c:	900b883a 	mov	r5,r18
    e140:	01800284 	movi	r6,10
    e144:	000f883a 	mov	r7,zero
    e148:	000f7b80 	call	f7b8 <__umoddi3>
    e14c:	10800c04 	addi	r2,r2,48
    e150:	8c7fffc4 	addi	r17,r17,-1
    e154:	8009883a 	mov	r4,r16
    e158:	900b883a 	mov	r5,r18
    e15c:	01800284 	movi	r6,10
    e160:	000f883a 	mov	r7,zero
    e164:	88800005 	stb	r2,0(r17)
    e168:	000f1f80 	call	f1f8 <__udivdi3>
    e16c:	1021883a 	mov	r16,r2
    e170:	10c4b03a 	or	r2,r2,r3
    e174:	1825883a 	mov	r18,r3
    e178:	103fef1e 	bne	r2,zero,e138 <__alt_mem_Flash_flash_data+0xf400e138>
    e17c:	dc802417 	ldw	r18,144(sp)
    e180:	dc002517 	ldw	r16,148(sp)
    e184:	a011883a 	mov	r8,r20
    e188:	9813883a 	mov	r9,r19
    e18c:	b01d883a 	mov	r14,r22
    e190:	8829883a 	mov	r20,r17
    e194:	d8c01e17 	ldw	r3,120(sp)
    e198:	1d27c83a 	sub	r19,r3,r20
    e19c:	003de606 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e1a0:	b5800c04 	addi	r22,r22,48
    e1a4:	dd8019c5 	stb	r22,103(sp)
    e1a8:	dcc02717 	ldw	r19,156(sp)
    e1ac:	dd0019c4 	addi	r20,sp,103
    e1b0:	003de106 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e1b4:	d9002017 	ldw	r4,128(sp)
    e1b8:	d9402117 	ldw	r5,132(sp)
    e1bc:	d9801a04 	addi	r6,sp,104
    e1c0:	000d43c0 	call	d43c <__sprint_r.part.0>
    e1c4:	10000c1e 	bne	r2,zero,e1f8 <___vfiprintf_internal_r+0xca8>
    e1c8:	d8801c17 	ldw	r2,112(sp)
    e1cc:	8c80010e 	bge	r17,r18,e1d4 <___vfiprintf_internal_r+0xc84>
    e1d0:	9023883a 	mov	r17,r18
    e1d4:	d8c02317 	ldw	r3,140(sp)
    e1d8:	1c47883a 	add	r3,r3,r17
    e1dc:	d8c02315 	stw	r3,140(sp)
    e1e0:	103e7e26 	beq	r2,zero,dbdc <__alt_mem_Flash_flash_data+0xf400dbdc>
    e1e4:	d9002017 	ldw	r4,128(sp)
    e1e8:	d9402117 	ldw	r5,132(sp)
    e1ec:	d9801a04 	addi	r6,sp,104
    e1f0:	000d43c0 	call	d43c <__sprint_r.part.0>
    e1f4:	103e7926 	beq	r2,zero,dbdc <__alt_mem_Flash_flash_data+0xf400dbdc>
    e1f8:	dd402117 	ldw	r21,132(sp)
    e1fc:	a880030b 	ldhu	r2,12(r21)
    e200:	1080100c 	andi	r2,r2,64
    e204:	103e881e 	bne	r2,zero,dc28 <__alt_mem_Flash_flash_data+0xf400dc28>
    e208:	d8802317 	ldw	r2,140(sp)
    e20c:	003e8706 	br	dc2c <__alt_mem_Flash_flash_data+0xf400dc2c>
    e210:	d9402117 	ldw	r5,132(sp)
    e214:	b009883a 	mov	r4,r22
    e218:	d9801a04 	addi	r6,sp,104
    e21c:	000d43c0 	call	d43c <__sprint_r.part.0>
    e220:	103ff51e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e224:	d9001b17 	ldw	r4,108(sp)
    e228:	d8801c17 	ldw	r2,112(sp)
    e22c:	d811883a 	mov	r8,sp
    e230:	21400044 	addi	r5,r4,1
    e234:	003e4d06 	br	db6c <__alt_mem_Flash_flash_data+0xf400db6c>
    e238:	1000aa1e 	bne	r2,zero,e4e4 <___vfiprintf_internal_r+0xf94>
    e23c:	00c00044 	movi	r3,1
    e240:	9805883a 	mov	r2,r19
    e244:	dd000015 	stw	r20,0(sp)
    e248:	dcc00115 	stw	r19,4(sp)
    e24c:	dcc01c15 	stw	r19,112(sp)
    e250:	d8c01b15 	stw	r3,108(sp)
    e254:	d811883a 	mov	r8,sp
    e258:	42000204 	addi	r8,r8,8
    e25c:	aac0010c 	andi	r11,r21,4
    e260:	583fda26 	beq	r11,zero,e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    e264:	9467c83a 	sub	r19,r18,r17
    e268:	04fe3316 	blt	zero,r19,db38 <__alt_mem_Flash_flash_data+0xf400db38>
    e26c:	003fd706 	br	e1cc <__alt_mem_Flash_flash_data+0xf400e1cc>
    e270:	946dc83a 	sub	r22,r18,r17
    e274:	05bdfd0e 	bge	zero,r22,da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    e278:	00c000b4 	movhi	r3,2
    e27c:	18ff2d04 	addi	r3,r3,-844
    e280:	01c00404 	movi	r7,16
    e284:	d8c02415 	stw	r3,144(sp)
    e288:	3d81530e 	bge	r7,r22,e7d8 <___vfiprintf_internal_r+0x1288>
    e28c:	8007883a 	mov	r3,r16
    e290:	034001c4 	movi	r13,7
    e294:	b021883a 	mov	r16,r22
    e298:	da402515 	stw	r9,148(sp)
    e29c:	182d883a 	mov	r22,r3
    e2a0:	00000506 	br	e2b8 <___vfiprintf_internal_r+0xd68>
    e2a4:	29800084 	addi	r6,r5,2
    e2a8:	42000204 	addi	r8,r8,8
    e2ac:	180b883a 	mov	r5,r3
    e2b0:	843ffc04 	addi	r16,r16,-16
    e2b4:	3c000d0e 	bge	r7,r16,e2ec <___vfiprintf_internal_r+0xd9c>
    e2b8:	10800404 	addi	r2,r2,16
    e2bc:	28c00044 	addi	r3,r5,1
    e2c0:	45c00015 	stw	r23,0(r8)
    e2c4:	41c00115 	stw	r7,4(r8)
    e2c8:	d8801c15 	stw	r2,112(sp)
    e2cc:	d8c01b15 	stw	r3,108(sp)
    e2d0:	68fff40e 	bge	r13,r3,e2a4 <__alt_mem_Flash_flash_data+0xf400e2a4>
    e2d4:	1000151e 	bne	r2,zero,e32c <___vfiprintf_internal_r+0xddc>
    e2d8:	843ffc04 	addi	r16,r16,-16
    e2dc:	01800044 	movi	r6,1
    e2e0:	000b883a 	mov	r5,zero
    e2e4:	d811883a 	mov	r8,sp
    e2e8:	3c3ff316 	blt	r7,r16,e2b8 <__alt_mem_Flash_flash_data+0xf400e2b8>
    e2ec:	da402517 	ldw	r9,148(sp)
    e2f0:	b007883a 	mov	r3,r22
    e2f4:	802d883a 	mov	r22,r16
    e2f8:	1821883a 	mov	r16,r3
    e2fc:	d8c02417 	ldw	r3,144(sp)
    e300:	1585883a 	add	r2,r2,r22
    e304:	45800115 	stw	r22,4(r8)
    e308:	40c00015 	stw	r3,0(r8)
    e30c:	d8801c15 	stw	r2,112(sp)
    e310:	d9801b15 	stw	r6,108(sp)
    e314:	00c001c4 	movi	r3,7
    e318:	19806d16 	blt	r3,r6,e4d0 <___vfiprintf_internal_r+0xf80>
    e31c:	42000204 	addi	r8,r8,8
    e320:	31000044 	addi	r4,r6,1
    e324:	300b883a 	mov	r5,r6
    e328:	003dd006 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    e32c:	d9002017 	ldw	r4,128(sp)
    e330:	d9402117 	ldw	r5,132(sp)
    e334:	d9801a04 	addi	r6,sp,104
    e338:	d9c02b15 	stw	r7,172(sp)
    e33c:	db402a15 	stw	r13,168(sp)
    e340:	000d43c0 	call	d43c <__sprint_r.part.0>
    e344:	d9c02b17 	ldw	r7,172(sp)
    e348:	db402a17 	ldw	r13,168(sp)
    e34c:	103faa1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e350:	d9401b17 	ldw	r5,108(sp)
    e354:	d8801c17 	ldw	r2,112(sp)
    e358:	d811883a 	mov	r8,sp
    e35c:	29800044 	addi	r6,r5,1
    e360:	003fd306 	br	e2b0 <__alt_mem_Flash_flash_data+0xf400e2b0>
    e364:	1000401e 	bne	r2,zero,e468 <___vfiprintf_internal_r+0xf18>
    e368:	68003b26 	beq	r13,zero,e458 <___vfiprintf_internal_r+0xf08>
    e36c:	d9001d04 	addi	r4,sp,116
    e370:	00800084 	movi	r2,2
    e374:	d9000015 	stw	r4,0(sp)
    e378:	d8800115 	stw	r2,4(sp)
    e37c:	1809883a 	mov	r4,r3
    e380:	d811883a 	mov	r8,sp
    e384:	003db406 	br	da58 <__alt_mem_Flash_flash_data+0xf400da58>
    e388:	1000451e 	bne	r2,zero,e4a0 <___vfiprintf_internal_r+0xf50>
    e38c:	01000044 	movi	r4,1
    e390:	000b883a 	mov	r5,zero
    e394:	d811883a 	mov	r8,sp
    e398:	003db206 	br	da64 <__alt_mem_Flash_flash_data+0xf400da64>
    e39c:	10803fcc 	andi	r2,r2,255
    e3a0:	1000071e 	bne	r2,zero,e3c0 <___vfiprintf_internal_r+0xe70>
    e3a4:	a880004c 	andi	r2,r21,1
    e3a8:	10000526 	beq	r2,zero,e3c0 <___vfiprintf_internal_r+0xe70>
    e3ac:	00800c04 	movi	r2,48
    e3b0:	d88019c5 	stb	r2,103(sp)
    e3b4:	dcc02717 	ldw	r19,156(sp)
    e3b8:	dd0019c4 	addi	r20,sp,103
    e3bc:	003d5e06 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e3c0:	dd001a04 	addi	r20,sp,104
    e3c4:	003d5c06 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e3c8:	1000971e 	bne	r2,zero,e628 <___vfiprintf_internal_r+0x10d8>
    e3cc:	d8c01d87 	ldb	r3,118(sp)
    e3d0:	18005826 	beq	r3,zero,e534 <___vfiprintf_internal_r+0xfe4>
    e3d4:	00800044 	movi	r2,1
    e3d8:	d8c01d84 	addi	r3,sp,118
    e3dc:	1009883a 	mov	r4,r2
    e3e0:	d8c00015 	stw	r3,0(sp)
    e3e4:	d8800115 	stw	r2,4(sp)
    e3e8:	d811883a 	mov	r8,sp
    e3ec:	003f3206 	br	e0b8 <__alt_mem_Flash_flash_data+0xf400e0b8>
    e3f0:	8023883a 	mov	r17,r16
    e3f4:	003ca706 	br	d694 <__alt_mem_Flash_flash_data+0xf400d694>
    e3f8:	d9002017 	ldw	r4,128(sp)
    e3fc:	d9402117 	ldw	r5,132(sp)
    e400:	d9801a04 	addi	r6,sp,104
    e404:	000d43c0 	call	d43c <__sprint_r.part.0>
    e408:	103f7b1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e40c:	d8801c17 	ldw	r2,112(sp)
    e410:	d811883a 	mov	r8,sp
    e414:	003f9106 	br	e25c <__alt_mem_Flash_flash_data+0xf400e25c>
    e418:	00800084 	movi	r2,2
    e41c:	b348b03a 	or	r4,r22,r13
    e420:	003d2906 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e424:	d8802217 	ldw	r2,136(sp)
    e428:	001b883a 	mov	r13,zero
    e42c:	15800017 	ldw	r22,0(r2)
    e430:	10800104 	addi	r2,r2,4
    e434:	d8802215 	stw	r2,136(sp)
    e438:	003ea706 	br	ded8 <__alt_mem_Flash_flash_data+0xf400ded8>
    e43c:	d9002017 	ldw	r4,128(sp)
    e440:	d9402117 	ldw	r5,132(sp)
    e444:	d9801a04 	addi	r6,sp,104
    e448:	000d43c0 	call	d43c <__sprint_r.part.0>
    e44c:	103f6a1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e450:	d811883a 	mov	r8,sp
    e454:	003cff06 	br	d854 <__alt_mem_Flash_flash_data+0xf400d854>
    e458:	000b883a 	mov	r5,zero
    e45c:	1809883a 	mov	r4,r3
    e460:	d811883a 	mov	r8,sp
    e464:	003d7f06 	br	da64 <__alt_mem_Flash_flash_data+0xf400da64>
    e468:	d9002017 	ldw	r4,128(sp)
    e46c:	d9402117 	ldw	r5,132(sp)
    e470:	d9801a04 	addi	r6,sp,104
    e474:	da402b15 	stw	r9,172(sp)
    e478:	db402a15 	stw	r13,168(sp)
    e47c:	000d43c0 	call	d43c <__sprint_r.part.0>
    e480:	da402b17 	ldw	r9,172(sp)
    e484:	db402a17 	ldw	r13,168(sp)
    e488:	103f5b1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e48c:	d9401b17 	ldw	r5,108(sp)
    e490:	d8801c17 	ldw	r2,112(sp)
    e494:	d811883a 	mov	r8,sp
    e498:	29000044 	addi	r4,r5,1
    e49c:	003d6406 	br	da30 <__alt_mem_Flash_flash_data+0xf400da30>
    e4a0:	d9002017 	ldw	r4,128(sp)
    e4a4:	d9402117 	ldw	r5,132(sp)
    e4a8:	d9801a04 	addi	r6,sp,104
    e4ac:	da402b15 	stw	r9,172(sp)
    e4b0:	000d43c0 	call	d43c <__sprint_r.part.0>
    e4b4:	da402b17 	ldw	r9,172(sp)
    e4b8:	103f4f1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e4bc:	d9401b17 	ldw	r5,108(sp)
    e4c0:	d8801c17 	ldw	r2,112(sp)
    e4c4:	d811883a 	mov	r8,sp
    e4c8:	29000044 	addi	r4,r5,1
    e4cc:	003d6506 	br	da64 <__alt_mem_Flash_flash_data+0xf400da64>
    e4d0:	10009a1e 	bne	r2,zero,e73c <___vfiprintf_internal_r+0x11ec>
    e4d4:	01000044 	movi	r4,1
    e4d8:	000b883a 	mov	r5,zero
    e4dc:	d811883a 	mov	r8,sp
    e4e0:	003d6206 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    e4e4:	d9002017 	ldw	r4,128(sp)
    e4e8:	d9402117 	ldw	r5,132(sp)
    e4ec:	d9801a04 	addi	r6,sp,104
    e4f0:	000d43c0 	call	d43c <__sprint_r.part.0>
    e4f4:	103f401e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e4f8:	d9001b17 	ldw	r4,108(sp)
    e4fc:	d8801c17 	ldw	r2,112(sp)
    e500:	d811883a 	mov	r8,sp
    e504:	21000044 	addi	r4,r4,1
    e508:	003d7d06 	br	db00 <__alt_mem_Flash_flash_data+0xf400db00>
    e50c:	05adc83a 	sub	r22,zero,r22
    e510:	b004c03a 	cmpne	r2,r22,zero
    e514:	035bc83a 	sub	r13,zero,r13
    e518:	689bc83a 	sub	r13,r13,r2
    e51c:	03800b44 	movi	r14,45
    e520:	db801d85 	stb	r14,118(sp)
    e524:	4827883a 	mov	r19,r9
    e528:	00800044 	movi	r2,1
    e52c:	b348b03a 	or	r4,r22,r13
    e530:	003ce806 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    e534:	000b883a 	mov	r5,zero
    e538:	01000044 	movi	r4,1
    e53c:	d811883a 	mov	r8,sp
    e540:	683d4826 	beq	r13,zero,da64 <__alt_mem_Flash_flash_data+0xf400da64>
    e544:	00800084 	movi	r2,2
    e548:	d8c01d04 	addi	r3,sp,116
    e54c:	d8c00015 	stw	r3,0(sp)
    e550:	d8800115 	stw	r2,4(sp)
    e554:	003d4006 	br	da58 <__alt_mem_Flash_flash_data+0xf400da58>
    e558:	00800084 	movi	r2,2
    e55c:	003cda06 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e560:	a880100c 	andi	r2,r21,64
    e564:	10004226 	beq	r2,zero,e670 <___vfiprintf_internal_r+0x1120>
    e568:	d8802217 	ldw	r2,136(sp)
    e56c:	001b883a 	mov	r13,zero
    e570:	1580000b 	ldhu	r22,0(r2)
    e574:	10800104 	addi	r2,r2,4
    e578:	d8802215 	stw	r2,136(sp)
    e57c:	b009883a 	mov	r4,r22
    e580:	0005883a 	mov	r2,zero
    e584:	003cd006 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e588:	80c00007 	ldb	r3,0(r16)
    e58c:	8005883a 	mov	r2,r16
    e590:	003c4d06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    e594:	a880100c 	andi	r2,r21,64
    e598:	10004426 	beq	r2,zero,e6ac <___vfiprintf_internal_r+0x115c>
    e59c:	d8c02217 	ldw	r3,136(sp)
    e5a0:	001b883a 	mov	r13,zero
    e5a4:	00800044 	movi	r2,1
    e5a8:	1d80000b 	ldhu	r22,0(r3)
    e5ac:	18c00104 	addi	r3,r3,4
    e5b0:	d8c02215 	stw	r3,136(sp)
    e5b4:	b009883a 	mov	r4,r22
    e5b8:	003cc306 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e5bc:	a880040c 	andi	r2,r21,16
    e5c0:	1000091e 	bne	r2,zero,e5e8 <___vfiprintf_internal_r+0x1098>
    e5c4:	aac0100c 	andi	r11,r21,64
    e5c8:	58000726 	beq	r11,zero,e5e8 <___vfiprintf_internal_r+0x1098>
    e5cc:	d8c02217 	ldw	r3,136(sp)
    e5d0:	d9002317 	ldw	r4,140(sp)
    e5d4:	18800017 	ldw	r2,0(r3)
    e5d8:	18c00104 	addi	r3,r3,4
    e5dc:	d8c02215 	stw	r3,136(sp)
    e5e0:	1100000d 	sth	r4,0(r2)
    e5e4:	003c0e06 	br	d620 <__alt_mem_Flash_flash_data+0xf400d620>
    e5e8:	d8c02217 	ldw	r3,136(sp)
    e5ec:	d9002317 	ldw	r4,140(sp)
    e5f0:	18800017 	ldw	r2,0(r3)
    e5f4:	18c00104 	addi	r3,r3,4
    e5f8:	d8c02215 	stw	r3,136(sp)
    e5fc:	11000015 	stw	r4,0(r2)
    e600:	003c0706 	br	d620 <__alt_mem_Flash_flash_data+0xf400d620>
    e604:	a880100c 	andi	r2,r21,64
    e608:	10002126 	beq	r2,zero,e690 <___vfiprintf_internal_r+0x1140>
    e60c:	1d80000f 	ldh	r22,0(r3)
    e610:	d8c02217 	ldw	r3,136(sp)
    e614:	b01bd7fa 	srai	r13,r22,31
    e618:	18c00104 	addi	r3,r3,4
    e61c:	d8c02215 	stw	r3,136(sp)
    e620:	6805883a 	mov	r2,r13
    e624:	003dc406 	br	dd38 <__alt_mem_Flash_flash_data+0xf400dd38>
    e628:	d9002017 	ldw	r4,128(sp)
    e62c:	d9402117 	ldw	r5,132(sp)
    e630:	d9801a04 	addi	r6,sp,104
    e634:	da402b15 	stw	r9,172(sp)
    e638:	db402a15 	stw	r13,168(sp)
    e63c:	000d43c0 	call	d43c <__sprint_r.part.0>
    e640:	da402b17 	ldw	r9,172(sp)
    e644:	db402a17 	ldw	r13,168(sp)
    e648:	103eeb1e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e64c:	d9401b17 	ldw	r5,108(sp)
    e650:	d8801c17 	ldw	r2,112(sp)
    e654:	d811883a 	mov	r8,sp
    e658:	29000044 	addi	r4,r5,1
    e65c:	003e8b06 	br	e08c <__alt_mem_Flash_flash_data+0xf400e08c>
    e660:	9023883a 	mov	r17,r18
    e664:	003d5a06 	br	dbd0 <__alt_mem_Flash_flash_data+0xf400dbd0>
    e668:	4827883a 	mov	r19,r9
    e66c:	003e3506 	br	df44 <__alt_mem_Flash_flash_data+0xf400df44>
    e670:	d8c02217 	ldw	r3,136(sp)
    e674:	001b883a 	mov	r13,zero
    e678:	0005883a 	mov	r2,zero
    e67c:	1d800017 	ldw	r22,0(r3)
    e680:	18c00104 	addi	r3,r3,4
    e684:	d8c02215 	stw	r3,136(sp)
    e688:	b009883a 	mov	r4,r22
    e68c:	003c8e06 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e690:	1d800017 	ldw	r22,0(r3)
    e694:	d9002217 	ldw	r4,136(sp)
    e698:	b01bd7fa 	srai	r13,r22,31
    e69c:	21000104 	addi	r4,r4,4
    e6a0:	d9002215 	stw	r4,136(sp)
    e6a4:	6805883a 	mov	r2,r13
    e6a8:	003da306 	br	dd38 <__alt_mem_Flash_flash_data+0xf400dd38>
    e6ac:	d9002217 	ldw	r4,136(sp)
    e6b0:	001b883a 	mov	r13,zero
    e6b4:	00800044 	movi	r2,1
    e6b8:	25800017 	ldw	r22,0(r4)
    e6bc:	21000104 	addi	r4,r4,4
    e6c0:	d9002215 	stw	r4,136(sp)
    e6c4:	b009883a 	mov	r4,r22
    e6c8:	003c7f06 	br	d8c8 <__alt_mem_Flash_flash_data+0xf400d8c8>
    e6cc:	00c000b4 	movhi	r3,2
    e6d0:	18ff2d04 	addi	r3,r3,-844
    e6d4:	d8c02415 	stw	r3,144(sp)
    e6d8:	003cff06 	br	dad8 <__alt_mem_Flash_flash_data+0xf400dad8>
    e6dc:	d8801c17 	ldw	r2,112(sp)
    e6e0:	dd402117 	ldw	r21,132(sp)
    e6e4:	103ec526 	beq	r2,zero,e1fc <__alt_mem_Flash_flash_data+0xf400e1fc>
    e6e8:	d9002017 	ldw	r4,128(sp)
    e6ec:	a80b883a 	mov	r5,r21
    e6f0:	d9801a04 	addi	r6,sp,104
    e6f4:	000d43c0 	call	d43c <__sprint_r.part.0>
    e6f8:	003ec006 	br	e1fc <__alt_mem_Flash_flash_data+0xf400e1fc>
    e6fc:	80800044 	addi	r2,r16,1
    e700:	ad400814 	ori	r21,r21,32
    e704:	80c00047 	ldb	r3,1(r16)
    e708:	003bef06 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    e70c:	04a5c83a 	sub	r18,zero,r18
    e710:	8005883a 	mov	r2,r16
    e714:	d8c02215 	stw	r3,136(sp)
    e718:	003d5306 	br	dc68 <__alt_mem_Flash_flash_data+0xf400dc68>
    e71c:	da002a15 	stw	r8,168(sp)
    e720:	00030440 	call	3044 <strlen>
    e724:	1027883a 	mov	r19,r2
    e728:	db801d83 	ldbu	r14,118(sp)
    e72c:	dd802215 	stw	r22,136(sp)
    e730:	0013883a 	mov	r9,zero
    e734:	da002a17 	ldw	r8,168(sp)
    e738:	003c7f06 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e73c:	d9002017 	ldw	r4,128(sp)
    e740:	d9402117 	ldw	r5,132(sp)
    e744:	d9801a04 	addi	r6,sp,104
    e748:	da402b15 	stw	r9,172(sp)
    e74c:	000d43c0 	call	d43c <__sprint_r.part.0>
    e750:	da402b17 	ldw	r9,172(sp)
    e754:	103ea81e 	bne	r2,zero,e1f8 <__alt_mem_Flash_flash_data+0xf400e1f8>
    e758:	d9401b17 	ldw	r5,108(sp)
    e75c:	d8801c17 	ldw	r2,112(sp)
    e760:	d811883a 	mov	r8,sp
    e764:	29000044 	addi	r4,r5,1
    e768:	003cc006 	br	da6c <__alt_mem_Flash_flash_data+0xf400da6c>
    e76c:	d9401b17 	ldw	r5,108(sp)
    e770:	010000b4 	movhi	r4,2
    e774:	213f3104 	addi	r4,r4,-828
    e778:	d9002415 	stw	r4,144(sp)
    e77c:	29400044 	addi	r5,r5,1
    e780:	003c9f06 	br	da00 <__alt_mem_Flash_flash_data+0xf400da00>
    e784:	00800184 	movi	r2,6
    e788:	1240012e 	bgeu	r2,r9,e790 <___vfiprintf_internal_r+0x1240>
    e78c:	1013883a 	mov	r9,r2
    e790:	4827883a 	mov	r19,r9
    e794:	4823883a 	mov	r17,r9
    e798:	48001116 	blt	r9,zero,e7e0 <___vfiprintf_internal_r+0x1290>
    e79c:	050000b4 	movhi	r20,2
    e7a0:	dd802215 	stw	r22,136(sp)
    e7a4:	a53ec104 	addi	r20,r20,-1276
    e7a8:	003db106 	br	de70 <__alt_mem_Flash_flash_data+0xf400de70>
    e7ac:	d9401b17 	ldw	r5,108(sp)
    e7b0:	010000b4 	movhi	r4,2
    e7b4:	213f3104 	addi	r4,r4,-828
    e7b8:	d9002415 	stw	r4,144(sp)
    e7bc:	29400044 	addi	r5,r5,1
    e7c0:	003cf906 	br	dba8 <__alt_mem_Flash_flash_data+0xf400dba8>
    e7c4:	4827883a 	mov	r19,r9
    e7c8:	db801d83 	ldbu	r14,118(sp)
    e7cc:	dd802215 	stw	r22,136(sp)
    e7d0:	0013883a 	mov	r9,zero
    e7d4:	003c5806 	br	d938 <__alt_mem_Flash_flash_data+0xf400d938>
    e7d8:	200d883a 	mov	r6,r4
    e7dc:	003ec706 	br	e2fc <__alt_mem_Flash_flash_data+0xf400e2fc>
    e7e0:	0023883a 	mov	r17,zero
    e7e4:	003fed06 	br	e79c <__alt_mem_Flash_flash_data+0xf400e79c>
    e7e8:	d9002217 	ldw	r4,136(sp)
    e7ec:	22400017 	ldw	r9,0(r4)
    e7f0:	20c00104 	addi	r3,r4,4
    e7f4:	d8c02215 	stw	r3,136(sp)
    e7f8:	483fc20e 	bge	r9,zero,e704 <__alt_mem_Flash_flash_data+0xf400e704>
    e7fc:	027fffc4 	movi	r9,-1
    e800:	80c00047 	ldb	r3,1(r16)
    e804:	003bb006 	br	d6c8 <__alt_mem_Flash_flash_data+0xf400d6c8>
    e808:	8c80010e 	bge	r17,r18,e810 <___vfiprintf_internal_r+0x12c0>
    e80c:	9023883a 	mov	r17,r18
    e810:	d8802317 	ldw	r2,140(sp)
    e814:	1445883a 	add	r2,r2,r17
    e818:	d8802315 	stw	r2,140(sp)
    e81c:	003cef06 	br	dbdc <__alt_mem_Flash_flash_data+0xf400dbdc>

0000e820 <__vfiprintf_internal>:
    e820:	2007883a 	mov	r3,r4
    e824:	010000b4 	movhi	r4,2
    e828:	2107cd04 	addi	r4,r4,7988
    e82c:	21000017 	ldw	r4,0(r4)
    e830:	2805883a 	mov	r2,r5
    e834:	300f883a 	mov	r7,r6
    e838:	180b883a 	mov	r5,r3
    e83c:	100d883a 	mov	r6,r2
    e840:	000d5501 	jmpi	d550 <___vfiprintf_internal_r>

0000e844 <__sbprintf>:
    e844:	2880030b 	ldhu	r2,12(r5)
    e848:	2ac01917 	ldw	r11,100(r5)
    e84c:	2a80038b 	ldhu	r10,14(r5)
    e850:	2a400717 	ldw	r9,28(r5)
    e854:	2a000917 	ldw	r8,36(r5)
    e858:	defee204 	addi	sp,sp,-1144
    e85c:	00c10004 	movi	r3,1024
    e860:	dc011a15 	stw	r16,1128(sp)
    e864:	10bfff4c 	andi	r2,r2,65533
    e868:	2821883a 	mov	r16,r5
    e86c:	d8cb883a 	add	r5,sp,r3
    e870:	dc811c15 	stw	r18,1136(sp)
    e874:	dc411b15 	stw	r17,1132(sp)
    e878:	dfc11d15 	stw	ra,1140(sp)
    e87c:	2025883a 	mov	r18,r4
    e880:	d881030d 	sth	r2,1036(sp)
    e884:	dac11915 	stw	r11,1124(sp)
    e888:	da81038d 	sth	r10,1038(sp)
    e88c:	da410715 	stw	r9,1052(sp)
    e890:	da010915 	stw	r8,1060(sp)
    e894:	dec10015 	stw	sp,1024(sp)
    e898:	dec10415 	stw	sp,1040(sp)
    e89c:	d8c10215 	stw	r3,1032(sp)
    e8a0:	d8c10515 	stw	r3,1044(sp)
    e8a4:	d8010615 	stw	zero,1048(sp)
    e8a8:	000d5500 	call	d550 <___vfiprintf_internal_r>
    e8ac:	1023883a 	mov	r17,r2
    e8b0:	10000416 	blt	r2,zero,e8c4 <__sbprintf+0x80>
    e8b4:	9009883a 	mov	r4,r18
    e8b8:	d9410004 	addi	r5,sp,1024
    e8bc:	0008d200 	call	8d20 <_fflush_r>
    e8c0:	10000d1e 	bne	r2,zero,e8f8 <__sbprintf+0xb4>
    e8c4:	d8c1030b 	ldhu	r3,1036(sp)
    e8c8:	18c0100c 	andi	r3,r3,64
    e8cc:	18000326 	beq	r3,zero,e8dc <__sbprintf+0x98>
    e8d0:	8080030b 	ldhu	r2,12(r16)
    e8d4:	10801014 	ori	r2,r2,64
    e8d8:	8080030d 	sth	r2,12(r16)
    e8dc:	8805883a 	mov	r2,r17
    e8e0:	dfc11d17 	ldw	ra,1140(sp)
    e8e4:	dc811c17 	ldw	r18,1136(sp)
    e8e8:	dc411b17 	ldw	r17,1132(sp)
    e8ec:	dc011a17 	ldw	r16,1128(sp)
    e8f0:	dec11e04 	addi	sp,sp,1144
    e8f4:	f800283a 	ret
    e8f8:	047fffc4 	movi	r17,-1
    e8fc:	003ff106 	br	e8c4 <__alt_mem_Flash_flash_data+0xf400e8c4>

0000e900 <_write_r>:
    e900:	defffd04 	addi	sp,sp,-12
    e904:	dc000015 	stw	r16,0(sp)
    e908:	040000b4 	movhi	r16,2
    e90c:	dc400115 	stw	r17,4(sp)
    e910:	840fe804 	addi	r16,r16,16288
    e914:	2023883a 	mov	r17,r4
    e918:	2809883a 	mov	r4,r5
    e91c:	300b883a 	mov	r5,r6
    e920:	380d883a 	mov	r6,r7
    e924:	dfc00215 	stw	ra,8(sp)
    e928:	80000015 	stw	zero,0(r16)
    e92c:	0012d3c0 	call	12d3c <write>
    e930:	00ffffc4 	movi	r3,-1
    e934:	10c00526 	beq	r2,r3,e94c <_write_r+0x4c>
    e938:	dfc00217 	ldw	ra,8(sp)
    e93c:	dc400117 	ldw	r17,4(sp)
    e940:	dc000017 	ldw	r16,0(sp)
    e944:	dec00304 	addi	sp,sp,12
    e948:	f800283a 	ret
    e94c:	80c00017 	ldw	r3,0(r16)
    e950:	183ff926 	beq	r3,zero,e938 <__alt_mem_Flash_flash_data+0xf400e938>
    e954:	88c00015 	stw	r3,0(r17)
    e958:	003ff706 	br	e938 <__alt_mem_Flash_flash_data+0xf400e938>

0000e95c <_close_r>:
    e95c:	defffd04 	addi	sp,sp,-12
    e960:	dc000015 	stw	r16,0(sp)
    e964:	040000b4 	movhi	r16,2
    e968:	dc400115 	stw	r17,4(sp)
    e96c:	840fe804 	addi	r16,r16,16288
    e970:	2023883a 	mov	r17,r4
    e974:	2809883a 	mov	r4,r5
    e978:	dfc00215 	stw	ra,8(sp)
    e97c:	80000015 	stw	zero,0(r16)
    e980:	00124c40 	call	124c4 <close>
    e984:	00ffffc4 	movi	r3,-1
    e988:	10c00526 	beq	r2,r3,e9a0 <_close_r+0x44>
    e98c:	dfc00217 	ldw	ra,8(sp)
    e990:	dc400117 	ldw	r17,4(sp)
    e994:	dc000017 	ldw	r16,0(sp)
    e998:	dec00304 	addi	sp,sp,12
    e99c:	f800283a 	ret
    e9a0:	80c00017 	ldw	r3,0(r16)
    e9a4:	183ff926 	beq	r3,zero,e98c <__alt_mem_Flash_flash_data+0xf400e98c>
    e9a8:	88c00015 	stw	r3,0(r17)
    e9ac:	003ff706 	br	e98c <__alt_mem_Flash_flash_data+0xf400e98c>

0000e9b0 <_calloc_r>:
    e9b0:	298b383a 	mul	r5,r5,r6
    e9b4:	defffe04 	addi	sp,sp,-8
    e9b8:	dc000015 	stw	r16,0(sp)
    e9bc:	dfc00115 	stw	ra,4(sp)
    e9c0:	0009e400 	call	9e40 <_malloc_r>
    e9c4:	1021883a 	mov	r16,r2
    e9c8:	10002826 	beq	r2,zero,ea6c <_calloc_r+0xbc>
    e9cc:	11bfff17 	ldw	r6,-4(r2)
    e9d0:	00bfff04 	movi	r2,-4
    e9d4:	00c00904 	movi	r3,36
    e9d8:	308c703a 	and	r6,r6,r2
    e9dc:	308d883a 	add	r6,r6,r2
    e9e0:	19801436 	bltu	r3,r6,ea34 <_calloc_r+0x84>
    e9e4:	008004c4 	movi	r2,19
    e9e8:	11800936 	bltu	r2,r6,ea10 <_calloc_r+0x60>
    e9ec:	8005883a 	mov	r2,r16
    e9f0:	10000015 	stw	zero,0(r2)
    e9f4:	10000115 	stw	zero,4(r2)
    e9f8:	10000215 	stw	zero,8(r2)
    e9fc:	8005883a 	mov	r2,r16
    ea00:	dfc00117 	ldw	ra,4(sp)
    ea04:	dc000017 	ldw	r16,0(sp)
    ea08:	dec00204 	addi	sp,sp,8
    ea0c:	f800283a 	ret
    ea10:	80000015 	stw	zero,0(r16)
    ea14:	80000115 	stw	zero,4(r16)
    ea18:	008006c4 	movi	r2,27
    ea1c:	11800d2e 	bgeu	r2,r6,ea54 <_calloc_r+0xa4>
    ea20:	80000215 	stw	zero,8(r16)
    ea24:	80000315 	stw	zero,12(r16)
    ea28:	30c00c26 	beq	r6,r3,ea5c <_calloc_r+0xac>
    ea2c:	80800404 	addi	r2,r16,16
    ea30:	003fef06 	br	e9f0 <__alt_mem_Flash_flash_data+0xf400e9f0>
    ea34:	8009883a 	mov	r4,r16
    ea38:	000b883a 	mov	r5,zero
    ea3c:	000a9640 	call	a964 <memset>
    ea40:	8005883a 	mov	r2,r16
    ea44:	dfc00117 	ldw	ra,4(sp)
    ea48:	dc000017 	ldw	r16,0(sp)
    ea4c:	dec00204 	addi	sp,sp,8
    ea50:	f800283a 	ret
    ea54:	80800204 	addi	r2,r16,8
    ea58:	003fe506 	br	e9f0 <__alt_mem_Flash_flash_data+0xf400e9f0>
    ea5c:	80000415 	stw	zero,16(r16)
    ea60:	80800604 	addi	r2,r16,24
    ea64:	80000515 	stw	zero,20(r16)
    ea68:	003fe106 	br	e9f0 <__alt_mem_Flash_flash_data+0xf400e9f0>
    ea6c:	0005883a 	mov	r2,zero
    ea70:	003fe306 	br	ea00 <__alt_mem_Flash_flash_data+0xf400ea00>

0000ea74 <_fclose_r>:
    ea74:	28003926 	beq	r5,zero,eb5c <_fclose_r+0xe8>
    ea78:	defffc04 	addi	sp,sp,-16
    ea7c:	dc400115 	stw	r17,4(sp)
    ea80:	dc000015 	stw	r16,0(sp)
    ea84:	dfc00315 	stw	ra,12(sp)
    ea88:	dc800215 	stw	r18,8(sp)
    ea8c:	2023883a 	mov	r17,r4
    ea90:	2821883a 	mov	r16,r5
    ea94:	20000226 	beq	r4,zero,eaa0 <_fclose_r+0x2c>
    ea98:	20800e17 	ldw	r2,56(r4)
    ea9c:	10002726 	beq	r2,zero,eb3c <_fclose_r+0xc8>
    eaa0:	8080030f 	ldh	r2,12(r16)
    eaa4:	1000071e 	bne	r2,zero,eac4 <_fclose_r+0x50>
    eaa8:	0005883a 	mov	r2,zero
    eaac:	dfc00317 	ldw	ra,12(sp)
    eab0:	dc800217 	ldw	r18,8(sp)
    eab4:	dc400117 	ldw	r17,4(sp)
    eab8:	dc000017 	ldw	r16,0(sp)
    eabc:	dec00404 	addi	sp,sp,16
    eac0:	f800283a 	ret
    eac4:	8809883a 	mov	r4,r17
    eac8:	800b883a 	mov	r5,r16
    eacc:	0008b180 	call	8b18 <__sflush_r>
    ead0:	1025883a 	mov	r18,r2
    ead4:	80800b17 	ldw	r2,44(r16)
    ead8:	10000426 	beq	r2,zero,eaec <_fclose_r+0x78>
    eadc:	81400717 	ldw	r5,28(r16)
    eae0:	8809883a 	mov	r4,r17
    eae4:	103ee83a 	callr	r2
    eae8:	10001616 	blt	r2,zero,eb44 <_fclose_r+0xd0>
    eaec:	8080030b 	ldhu	r2,12(r16)
    eaf0:	1080200c 	andi	r2,r2,128
    eaf4:	1000151e 	bne	r2,zero,eb4c <_fclose_r+0xd8>
    eaf8:	81400c17 	ldw	r5,48(r16)
    eafc:	28000526 	beq	r5,zero,eb14 <_fclose_r+0xa0>
    eb00:	80801004 	addi	r2,r16,64
    eb04:	28800226 	beq	r5,r2,eb10 <_fclose_r+0x9c>
    eb08:	8809883a 	mov	r4,r17
    eb0c:	00092700 	call	9270 <_free_r>
    eb10:	80000c15 	stw	zero,48(r16)
    eb14:	81401117 	ldw	r5,68(r16)
    eb18:	28000326 	beq	r5,zero,eb28 <_fclose_r+0xb4>
    eb1c:	8809883a 	mov	r4,r17
    eb20:	00092700 	call	9270 <_free_r>
    eb24:	80001115 	stw	zero,68(r16)
    eb28:	000910c0 	call	910c <__sfp_lock_acquire>
    eb2c:	8000030d 	sth	zero,12(r16)
    eb30:	00091100 	call	9110 <__sfp_lock_release>
    eb34:	9005883a 	mov	r2,r18
    eb38:	003fdc06 	br	eaac <__alt_mem_Flash_flash_data+0xf400eaac>
    eb3c:	00090fc0 	call	90fc <__sinit>
    eb40:	003fd706 	br	eaa0 <__alt_mem_Flash_flash_data+0xf400eaa0>
    eb44:	04bfffc4 	movi	r18,-1
    eb48:	003fe806 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    eb4c:	81400417 	ldw	r5,16(r16)
    eb50:	8809883a 	mov	r4,r17
    eb54:	00092700 	call	9270 <_free_r>
    eb58:	003fe706 	br	eaf8 <__alt_mem_Flash_flash_data+0xf400eaf8>
    eb5c:	0005883a 	mov	r2,zero
    eb60:	f800283a 	ret

0000eb64 <fclose>:
    eb64:	008000b4 	movhi	r2,2
    eb68:	1087cd04 	addi	r2,r2,7988
    eb6c:	200b883a 	mov	r5,r4
    eb70:	11000017 	ldw	r4,0(r2)
    eb74:	000ea741 	jmpi	ea74 <_fclose_r>

0000eb78 <_fputwc_r>:
    eb78:	3080030b 	ldhu	r2,12(r6)
    eb7c:	defff804 	addi	sp,sp,-32
    eb80:	dcc00415 	stw	r19,16(sp)
    eb84:	dc800315 	stw	r18,12(sp)
    eb88:	dc000115 	stw	r16,4(sp)
    eb8c:	dfc00715 	stw	ra,28(sp)
    eb90:	dd400615 	stw	r21,24(sp)
    eb94:	dd000515 	stw	r20,20(sp)
    eb98:	dc400215 	stw	r17,8(sp)
    eb9c:	10c8000c 	andi	r3,r2,8192
    eba0:	3021883a 	mov	r16,r6
    eba4:	2027883a 	mov	r19,r4
    eba8:	2825883a 	mov	r18,r5
    ebac:	1800051e 	bne	r3,zero,ebc4 <_fputwc_r+0x4c>
    ebb0:	30c01917 	ldw	r3,100(r6)
    ebb4:	10880014 	ori	r2,r2,8192
    ebb8:	3080030d 	sth	r2,12(r6)
    ebbc:	18880014 	ori	r2,r3,8192
    ebc0:	30801915 	stw	r2,100(r6)
    ebc4:	0009c300 	call	9c30 <__locale_mb_cur_max>
    ebc8:	00c00044 	movi	r3,1
    ebcc:	10c03e26 	beq	r2,r3,ecc8 <_fputwc_r+0x150>
    ebd0:	9809883a 	mov	r4,r19
    ebd4:	d80b883a 	mov	r5,sp
    ebd8:	900d883a 	mov	r6,r18
    ebdc:	81c01704 	addi	r7,r16,92
    ebe0:	000f0100 	call	f010 <_wcrtomb_r>
    ebe4:	1029883a 	mov	r20,r2
    ebe8:	00bfffc4 	movi	r2,-1
    ebec:	a0802026 	beq	r20,r2,ec70 <_fputwc_r+0xf8>
    ebf0:	d9400003 	ldbu	r5,0(sp)
    ebf4:	a0001c26 	beq	r20,zero,ec68 <_fputwc_r+0xf0>
    ebf8:	0023883a 	mov	r17,zero
    ebfc:	05400284 	movi	r21,10
    ec00:	00000906 	br	ec28 <_fputwc_r+0xb0>
    ec04:	80800017 	ldw	r2,0(r16)
    ec08:	11400005 	stb	r5,0(r2)
    ec0c:	80c00017 	ldw	r3,0(r16)
    ec10:	18c00044 	addi	r3,r3,1
    ec14:	80c00015 	stw	r3,0(r16)
    ec18:	8c400044 	addi	r17,r17,1
    ec1c:	dc45883a 	add	r2,sp,r17
    ec20:	8d00112e 	bgeu	r17,r20,ec68 <_fputwc_r+0xf0>
    ec24:	11400003 	ldbu	r5,0(r2)
    ec28:	80c00217 	ldw	r3,8(r16)
    ec2c:	18ffffc4 	addi	r3,r3,-1
    ec30:	80c00215 	stw	r3,8(r16)
    ec34:	183ff30e 	bge	r3,zero,ec04 <__alt_mem_Flash_flash_data+0xf400ec04>
    ec38:	80800617 	ldw	r2,24(r16)
    ec3c:	18801916 	blt	r3,r2,eca4 <_fputwc_r+0x12c>
    ec40:	80800017 	ldw	r2,0(r16)
    ec44:	11400005 	stb	r5,0(r2)
    ec48:	80800017 	ldw	r2,0(r16)
    ec4c:	10c00003 	ldbu	r3,0(r2)
    ec50:	10800044 	addi	r2,r2,1
    ec54:	1d402326 	beq	r3,r21,ece4 <_fputwc_r+0x16c>
    ec58:	80800015 	stw	r2,0(r16)
    ec5c:	8c400044 	addi	r17,r17,1
    ec60:	dc45883a 	add	r2,sp,r17
    ec64:	8d3fef36 	bltu	r17,r20,ec24 <__alt_mem_Flash_flash_data+0xf400ec24>
    ec68:	9005883a 	mov	r2,r18
    ec6c:	00000406 	br	ec80 <_fputwc_r+0x108>
    ec70:	80c0030b 	ldhu	r3,12(r16)
    ec74:	a005883a 	mov	r2,r20
    ec78:	18c01014 	ori	r3,r3,64
    ec7c:	80c0030d 	sth	r3,12(r16)
    ec80:	dfc00717 	ldw	ra,28(sp)
    ec84:	dd400617 	ldw	r21,24(sp)
    ec88:	dd000517 	ldw	r20,20(sp)
    ec8c:	dcc00417 	ldw	r19,16(sp)
    ec90:	dc800317 	ldw	r18,12(sp)
    ec94:	dc400217 	ldw	r17,8(sp)
    ec98:	dc000117 	ldw	r16,4(sp)
    ec9c:	dec00804 	addi	sp,sp,32
    eca0:	f800283a 	ret
    eca4:	9809883a 	mov	r4,r19
    eca8:	29403fcc 	andi	r5,r5,255
    ecac:	800d883a 	mov	r6,r16
    ecb0:	000eebc0 	call	eebc <__swbuf_r>
    ecb4:	10bfffe0 	cmpeqi	r2,r2,-1
    ecb8:	10803fcc 	andi	r2,r2,255
    ecbc:	103fd626 	beq	r2,zero,ec18 <__alt_mem_Flash_flash_data+0xf400ec18>
    ecc0:	00bfffc4 	movi	r2,-1
    ecc4:	003fee06 	br	ec80 <__alt_mem_Flash_flash_data+0xf400ec80>
    ecc8:	90ffffc4 	addi	r3,r18,-1
    eccc:	01003f84 	movi	r4,254
    ecd0:	20ffbf36 	bltu	r4,r3,ebd0 <__alt_mem_Flash_flash_data+0xf400ebd0>
    ecd4:	900b883a 	mov	r5,r18
    ecd8:	dc800005 	stb	r18,0(sp)
    ecdc:	1029883a 	mov	r20,r2
    ece0:	003fc506 	br	ebf8 <__alt_mem_Flash_flash_data+0xf400ebf8>
    ece4:	9809883a 	mov	r4,r19
    ece8:	a80b883a 	mov	r5,r21
    ecec:	800d883a 	mov	r6,r16
    ecf0:	000eebc0 	call	eebc <__swbuf_r>
    ecf4:	10bfffe0 	cmpeqi	r2,r2,-1
    ecf8:	003fef06 	br	ecb8 <__alt_mem_Flash_flash_data+0xf400ecb8>

0000ecfc <fputwc>:
    ecfc:	008000b4 	movhi	r2,2
    ed00:	defffc04 	addi	sp,sp,-16
    ed04:	1087cd04 	addi	r2,r2,7988
    ed08:	dc000115 	stw	r16,4(sp)
    ed0c:	14000017 	ldw	r16,0(r2)
    ed10:	dc400215 	stw	r17,8(sp)
    ed14:	dfc00315 	stw	ra,12(sp)
    ed18:	2023883a 	mov	r17,r4
    ed1c:	280d883a 	mov	r6,r5
    ed20:	80000626 	beq	r16,zero,ed3c <fputwc+0x40>
    ed24:	80800e17 	ldw	r2,56(r16)
    ed28:	1000041e 	bne	r2,zero,ed3c <fputwc+0x40>
    ed2c:	8009883a 	mov	r4,r16
    ed30:	d9400015 	stw	r5,0(sp)
    ed34:	00090fc0 	call	90fc <__sinit>
    ed38:	d9800017 	ldw	r6,0(sp)
    ed3c:	8009883a 	mov	r4,r16
    ed40:	880b883a 	mov	r5,r17
    ed44:	dfc00317 	ldw	ra,12(sp)
    ed48:	dc400217 	ldw	r17,8(sp)
    ed4c:	dc000117 	ldw	r16,4(sp)
    ed50:	dec00404 	addi	sp,sp,16
    ed54:	000eb781 	jmpi	eb78 <_fputwc_r>

0000ed58 <_fstat_r>:
    ed58:	defffd04 	addi	sp,sp,-12
    ed5c:	dc000015 	stw	r16,0(sp)
    ed60:	040000b4 	movhi	r16,2
    ed64:	dc400115 	stw	r17,4(sp)
    ed68:	840fe804 	addi	r16,r16,16288
    ed6c:	2023883a 	mov	r17,r4
    ed70:	2809883a 	mov	r4,r5
    ed74:	300b883a 	mov	r5,r6
    ed78:	dfc00215 	stw	ra,8(sp)
    ed7c:	80000015 	stw	zero,0(r16)
    ed80:	00126100 	call	12610 <fstat>
    ed84:	00ffffc4 	movi	r3,-1
    ed88:	10c00526 	beq	r2,r3,eda0 <_fstat_r+0x48>
    ed8c:	dfc00217 	ldw	ra,8(sp)
    ed90:	dc400117 	ldw	r17,4(sp)
    ed94:	dc000017 	ldw	r16,0(sp)
    ed98:	dec00304 	addi	sp,sp,12
    ed9c:	f800283a 	ret
    eda0:	80c00017 	ldw	r3,0(r16)
    eda4:	183ff926 	beq	r3,zero,ed8c <__alt_mem_Flash_flash_data+0xf400ed8c>
    eda8:	88c00015 	stw	r3,0(r17)
    edac:	003ff706 	br	ed8c <__alt_mem_Flash_flash_data+0xf400ed8c>

0000edb0 <_isatty_r>:
    edb0:	defffd04 	addi	sp,sp,-12
    edb4:	dc000015 	stw	r16,0(sp)
    edb8:	040000b4 	movhi	r16,2
    edbc:	dc400115 	stw	r17,4(sp)
    edc0:	840fe804 	addi	r16,r16,16288
    edc4:	2023883a 	mov	r17,r4
    edc8:	2809883a 	mov	r4,r5
    edcc:	dfc00215 	stw	ra,8(sp)
    edd0:	80000015 	stw	zero,0(r16)
    edd4:	00127100 	call	12710 <isatty>
    edd8:	00ffffc4 	movi	r3,-1
    eddc:	10c00526 	beq	r2,r3,edf4 <_isatty_r+0x44>
    ede0:	dfc00217 	ldw	ra,8(sp)
    ede4:	dc400117 	ldw	r17,4(sp)
    ede8:	dc000017 	ldw	r16,0(sp)
    edec:	dec00304 	addi	sp,sp,12
    edf0:	f800283a 	ret
    edf4:	80c00017 	ldw	r3,0(r16)
    edf8:	183ff926 	beq	r3,zero,ede0 <__alt_mem_Flash_flash_data+0xf400ede0>
    edfc:	88c00015 	stw	r3,0(r17)
    ee00:	003ff706 	br	ede0 <__alt_mem_Flash_flash_data+0xf400ede0>

0000ee04 <_lseek_r>:
    ee04:	defffd04 	addi	sp,sp,-12
    ee08:	dc000015 	stw	r16,0(sp)
    ee0c:	040000b4 	movhi	r16,2
    ee10:	dc400115 	stw	r17,4(sp)
    ee14:	840fe804 	addi	r16,r16,16288
    ee18:	2023883a 	mov	r17,r4
    ee1c:	2809883a 	mov	r4,r5
    ee20:	300b883a 	mov	r5,r6
    ee24:	380d883a 	mov	r6,r7
    ee28:	dfc00215 	stw	ra,8(sp)
    ee2c:	80000015 	stw	zero,0(r16)
    ee30:	00128e80 	call	128e8 <lseek>
    ee34:	00ffffc4 	movi	r3,-1
    ee38:	10c00526 	beq	r2,r3,ee50 <_lseek_r+0x4c>
    ee3c:	dfc00217 	ldw	ra,8(sp)
    ee40:	dc400117 	ldw	r17,4(sp)
    ee44:	dc000017 	ldw	r16,0(sp)
    ee48:	dec00304 	addi	sp,sp,12
    ee4c:	f800283a 	ret
    ee50:	80c00017 	ldw	r3,0(r16)
    ee54:	183ff926 	beq	r3,zero,ee3c <__alt_mem_Flash_flash_data+0xf400ee3c>
    ee58:	88c00015 	stw	r3,0(r17)
    ee5c:	003ff706 	br	ee3c <__alt_mem_Flash_flash_data+0xf400ee3c>

0000ee60 <_read_r>:
    ee60:	defffd04 	addi	sp,sp,-12
    ee64:	dc000015 	stw	r16,0(sp)
    ee68:	040000b4 	movhi	r16,2
    ee6c:	dc400115 	stw	r17,4(sp)
    ee70:	840fe804 	addi	r16,r16,16288
    ee74:	2023883a 	mov	r17,r4
    ee78:	2809883a 	mov	r4,r5
    ee7c:	300b883a 	mov	r5,r6
    ee80:	380d883a 	mov	r6,r7
    ee84:	dfc00215 	stw	ra,8(sp)
    ee88:	80000015 	stw	zero,0(r16)
    ee8c:	0012ae00 	call	12ae0 <read>
    ee90:	00ffffc4 	movi	r3,-1
    ee94:	10c00526 	beq	r2,r3,eeac <_read_r+0x4c>
    ee98:	dfc00217 	ldw	ra,8(sp)
    ee9c:	dc400117 	ldw	r17,4(sp)
    eea0:	dc000017 	ldw	r16,0(sp)
    eea4:	dec00304 	addi	sp,sp,12
    eea8:	f800283a 	ret
    eeac:	80c00017 	ldw	r3,0(r16)
    eeb0:	183ff926 	beq	r3,zero,ee98 <__alt_mem_Flash_flash_data+0xf400ee98>
    eeb4:	88c00015 	stw	r3,0(r17)
    eeb8:	003ff706 	br	ee98 <__alt_mem_Flash_flash_data+0xf400ee98>

0000eebc <__swbuf_r>:
    eebc:	defffc04 	addi	sp,sp,-16
    eec0:	dc800215 	stw	r18,8(sp)
    eec4:	dc400115 	stw	r17,4(sp)
    eec8:	dc000015 	stw	r16,0(sp)
    eecc:	dfc00315 	stw	ra,12(sp)
    eed0:	2025883a 	mov	r18,r4
    eed4:	2823883a 	mov	r17,r5
    eed8:	3021883a 	mov	r16,r6
    eedc:	20000226 	beq	r4,zero,eee8 <__swbuf_r+0x2c>
    eee0:	20800e17 	ldw	r2,56(r4)
    eee4:	10004126 	beq	r2,zero,efec <__swbuf_r+0x130>
    eee8:	80c00617 	ldw	r3,24(r16)
    eeec:	8180030b 	ldhu	r6,12(r16)
    eef0:	80c00215 	stw	r3,8(r16)
    eef4:	30c0020c 	andi	r3,r6,8
    eef8:	18003526 	beq	r3,zero,efd0 <__swbuf_r+0x114>
    eefc:	80c00417 	ldw	r3,16(r16)
    ef00:	18003326 	beq	r3,zero,efd0 <__swbuf_r+0x114>
    ef04:	3088000c 	andi	r2,r6,8192
    ef08:	8c403fcc 	andi	r17,r17,255
    ef0c:	10001726 	beq	r2,zero,ef6c <__swbuf_r+0xb0>
    ef10:	80800017 	ldw	r2,0(r16)
    ef14:	81000517 	ldw	r4,20(r16)
    ef18:	10c7c83a 	sub	r3,r2,r3
    ef1c:	19001d0e 	bge	r3,r4,ef94 <__swbuf_r+0xd8>
    ef20:	18c00044 	addi	r3,r3,1
    ef24:	81400217 	ldw	r5,8(r16)
    ef28:	11000044 	addi	r4,r2,1
    ef2c:	81000015 	stw	r4,0(r16)
    ef30:	297fffc4 	addi	r5,r5,-1
    ef34:	81400215 	stw	r5,8(r16)
    ef38:	14400005 	stb	r17,0(r2)
    ef3c:	80800517 	ldw	r2,20(r16)
    ef40:	10c01d26 	beq	r2,r3,efb8 <__swbuf_r+0xfc>
    ef44:	8080030b 	ldhu	r2,12(r16)
    ef48:	1080004c 	andi	r2,r2,1
    ef4c:	1000181e 	bne	r2,zero,efb0 <__swbuf_r+0xf4>
    ef50:	8805883a 	mov	r2,r17
    ef54:	dfc00317 	ldw	ra,12(sp)
    ef58:	dc800217 	ldw	r18,8(sp)
    ef5c:	dc400117 	ldw	r17,4(sp)
    ef60:	dc000017 	ldw	r16,0(sp)
    ef64:	dec00404 	addi	sp,sp,16
    ef68:	f800283a 	ret
    ef6c:	81001917 	ldw	r4,100(r16)
    ef70:	00b7ffc4 	movi	r2,-8193
    ef74:	31880014 	ori	r6,r6,8192
    ef78:	2084703a 	and	r2,r4,r2
    ef7c:	80801915 	stw	r2,100(r16)
    ef80:	80800017 	ldw	r2,0(r16)
    ef84:	81000517 	ldw	r4,20(r16)
    ef88:	8180030d 	sth	r6,12(r16)
    ef8c:	10c7c83a 	sub	r3,r2,r3
    ef90:	193fe316 	blt	r3,r4,ef20 <__alt_mem_Flash_flash_data+0xf400ef20>
    ef94:	9009883a 	mov	r4,r18
    ef98:	800b883a 	mov	r5,r16
    ef9c:	0008d200 	call	8d20 <_fflush_r>
    efa0:	1000091e 	bne	r2,zero,efc8 <__swbuf_r+0x10c>
    efa4:	80800017 	ldw	r2,0(r16)
    efa8:	00c00044 	movi	r3,1
    efac:	003fdd06 	br	ef24 <__alt_mem_Flash_flash_data+0xf400ef24>
    efb0:	00800284 	movi	r2,10
    efb4:	88bfe61e 	bne	r17,r2,ef50 <__alt_mem_Flash_flash_data+0xf400ef50>
    efb8:	9009883a 	mov	r4,r18
    efbc:	800b883a 	mov	r5,r16
    efc0:	0008d200 	call	8d20 <_fflush_r>
    efc4:	103fe226 	beq	r2,zero,ef50 <__alt_mem_Flash_flash_data+0xf400ef50>
    efc8:	00bfffc4 	movi	r2,-1
    efcc:	003fe106 	br	ef54 <__alt_mem_Flash_flash_data+0xf400ef54>
    efd0:	9009883a 	mov	r4,r18
    efd4:	800b883a 	mov	r5,r16
    efd8:	000709c0 	call	709c <__swsetup_r>
    efdc:	103ffa1e 	bne	r2,zero,efc8 <__alt_mem_Flash_flash_data+0xf400efc8>
    efe0:	8180030b 	ldhu	r6,12(r16)
    efe4:	80c00417 	ldw	r3,16(r16)
    efe8:	003fc606 	br	ef04 <__alt_mem_Flash_flash_data+0xf400ef04>
    efec:	00090fc0 	call	90fc <__sinit>
    eff0:	003fbd06 	br	eee8 <__alt_mem_Flash_flash_data+0xf400eee8>

0000eff4 <__swbuf>:
    eff4:	00c000b4 	movhi	r3,2
    eff8:	18c7cd04 	addi	r3,r3,7988
    effc:	2005883a 	mov	r2,r4
    f000:	19000017 	ldw	r4,0(r3)
    f004:	280d883a 	mov	r6,r5
    f008:	100b883a 	mov	r5,r2
    f00c:	000eebc1 	jmpi	eebc <__swbuf_r>

0000f010 <_wcrtomb_r>:
    f010:	defff604 	addi	sp,sp,-40
    f014:	008000b4 	movhi	r2,2
    f018:	dc800815 	stw	r18,32(sp)
    f01c:	dc400715 	stw	r17,28(sp)
    f020:	dc000615 	stw	r16,24(sp)
    f024:	1087d104 	addi	r2,r2,8004
    f028:	dfc00915 	stw	ra,36(sp)
    f02c:	2021883a 	mov	r16,r4
    f030:	3823883a 	mov	r17,r7
    f034:	14800017 	ldw	r18,0(r2)
    f038:	28001426 	beq	r5,zero,f08c <_wcrtomb_r+0x7c>
    f03c:	d9400415 	stw	r5,16(sp)
    f040:	d9800515 	stw	r6,20(sp)
    f044:	0009c240 	call	9c24 <__locale_charset>
    f048:	d9400417 	ldw	r5,16(sp)
    f04c:	d9800517 	ldw	r6,20(sp)
    f050:	8009883a 	mov	r4,r16
    f054:	dc400015 	stw	r17,0(sp)
    f058:	100f883a 	mov	r7,r2
    f05c:	903ee83a 	callr	r18
    f060:	00ffffc4 	movi	r3,-1
    f064:	10c0031e 	bne	r2,r3,f074 <_wcrtomb_r+0x64>
    f068:	88000015 	stw	zero,0(r17)
    f06c:	00c02284 	movi	r3,138
    f070:	80c00015 	stw	r3,0(r16)
    f074:	dfc00917 	ldw	ra,36(sp)
    f078:	dc800817 	ldw	r18,32(sp)
    f07c:	dc400717 	ldw	r17,28(sp)
    f080:	dc000617 	ldw	r16,24(sp)
    f084:	dec00a04 	addi	sp,sp,40
    f088:	f800283a 	ret
    f08c:	0009c240 	call	9c24 <__locale_charset>
    f090:	8009883a 	mov	r4,r16
    f094:	dc400015 	stw	r17,0(sp)
    f098:	d9400104 	addi	r5,sp,4
    f09c:	000d883a 	mov	r6,zero
    f0a0:	100f883a 	mov	r7,r2
    f0a4:	903ee83a 	callr	r18
    f0a8:	003fed06 	br	f060 <__alt_mem_Flash_flash_data+0xf400f060>

0000f0ac <wcrtomb>:
    f0ac:	defff604 	addi	sp,sp,-40
    f0b0:	008000b4 	movhi	r2,2
    f0b4:	dc800615 	stw	r18,24(sp)
    f0b8:	dc400515 	stw	r17,20(sp)
    f0bc:	dc000415 	stw	r16,16(sp)
    f0c0:	1087cd04 	addi	r2,r2,7988
    f0c4:	dfc00915 	stw	ra,36(sp)
    f0c8:	dd000815 	stw	r20,32(sp)
    f0cc:	dcc00715 	stw	r19,28(sp)
    f0d0:	2021883a 	mov	r16,r4
    f0d4:	3025883a 	mov	r18,r6
    f0d8:	14400017 	ldw	r17,0(r2)
    f0dc:	20001826 	beq	r4,zero,f140 <wcrtomb+0x94>
    f0e0:	008000b4 	movhi	r2,2
    f0e4:	1087d104 	addi	r2,r2,8004
    f0e8:	15000017 	ldw	r20,0(r2)
    f0ec:	2827883a 	mov	r19,r5
    f0f0:	0009c240 	call	9c24 <__locale_charset>
    f0f4:	8809883a 	mov	r4,r17
    f0f8:	dc800015 	stw	r18,0(sp)
    f0fc:	800b883a 	mov	r5,r16
    f100:	980d883a 	mov	r6,r19
    f104:	100f883a 	mov	r7,r2
    f108:	a03ee83a 	callr	r20
    f10c:	00ffffc4 	movi	r3,-1
    f110:	10c0031e 	bne	r2,r3,f120 <wcrtomb+0x74>
    f114:	90000015 	stw	zero,0(r18)
    f118:	00c02284 	movi	r3,138
    f11c:	88c00015 	stw	r3,0(r17)
    f120:	dfc00917 	ldw	ra,36(sp)
    f124:	dd000817 	ldw	r20,32(sp)
    f128:	dcc00717 	ldw	r19,28(sp)
    f12c:	dc800617 	ldw	r18,24(sp)
    f130:	dc400517 	ldw	r17,20(sp)
    f134:	dc000417 	ldw	r16,16(sp)
    f138:	dec00a04 	addi	sp,sp,40
    f13c:	f800283a 	ret
    f140:	008000b4 	movhi	r2,2
    f144:	1087d104 	addi	r2,r2,8004
    f148:	14000017 	ldw	r16,0(r2)
    f14c:	0009c240 	call	9c24 <__locale_charset>
    f150:	8809883a 	mov	r4,r17
    f154:	dc800015 	stw	r18,0(sp)
    f158:	d9400104 	addi	r5,sp,4
    f15c:	000d883a 	mov	r6,zero
    f160:	100f883a 	mov	r7,r2
    f164:	803ee83a 	callr	r16
    f168:	003fe806 	br	f10c <__alt_mem_Flash_flash_data+0xf400f10c>

0000f16c <__ascii_wctomb>:
    f16c:	28000526 	beq	r5,zero,f184 <__ascii_wctomb+0x18>
    f170:	00803fc4 	movi	r2,255
    f174:	11800536 	bltu	r2,r6,f18c <__ascii_wctomb+0x20>
    f178:	29800005 	stb	r6,0(r5)
    f17c:	00800044 	movi	r2,1
    f180:	f800283a 	ret
    f184:	0005883a 	mov	r2,zero
    f188:	f800283a 	ret
    f18c:	00802284 	movi	r2,138
    f190:	20800015 	stw	r2,0(r4)
    f194:	00bfffc4 	movi	r2,-1
    f198:	f800283a 	ret

0000f19c <_wctomb_r>:
    f19c:	008000b4 	movhi	r2,2
    f1a0:	defff904 	addi	sp,sp,-28
    f1a4:	1087d104 	addi	r2,r2,8004
    f1a8:	dfc00615 	stw	ra,24(sp)
    f1ac:	dc400515 	stw	r17,20(sp)
    f1b0:	dc000415 	stw	r16,16(sp)
    f1b4:	3823883a 	mov	r17,r7
    f1b8:	14000017 	ldw	r16,0(r2)
    f1bc:	d9000115 	stw	r4,4(sp)
    f1c0:	d9400215 	stw	r5,8(sp)
    f1c4:	d9800315 	stw	r6,12(sp)
    f1c8:	0009c240 	call	9c24 <__locale_charset>
    f1cc:	d9000117 	ldw	r4,4(sp)
    f1d0:	d9400217 	ldw	r5,8(sp)
    f1d4:	d9800317 	ldw	r6,12(sp)
    f1d8:	dc400015 	stw	r17,0(sp)
    f1dc:	100f883a 	mov	r7,r2
    f1e0:	803ee83a 	callr	r16
    f1e4:	dfc00617 	ldw	ra,24(sp)
    f1e8:	dc400517 	ldw	r17,20(sp)
    f1ec:	dc000417 	ldw	r16,16(sp)
    f1f0:	dec00704 	addi	sp,sp,28
    f1f4:	f800283a 	ret

0000f1f8 <__udivdi3>:
    f1f8:	defff504 	addi	sp,sp,-44
    f1fc:	dcc00415 	stw	r19,16(sp)
    f200:	dc000115 	stw	r16,4(sp)
    f204:	dfc00a15 	stw	ra,40(sp)
    f208:	df000915 	stw	fp,36(sp)
    f20c:	ddc00815 	stw	r23,32(sp)
    f210:	dd800715 	stw	r22,28(sp)
    f214:	dd400615 	stw	r21,24(sp)
    f218:	dd000515 	stw	r20,20(sp)
    f21c:	dc800315 	stw	r18,12(sp)
    f220:	dc400215 	stw	r17,8(sp)
    f224:	2027883a 	mov	r19,r4
    f228:	2821883a 	mov	r16,r5
    f22c:	3800421e 	bne	r7,zero,f338 <__udivdi3+0x140>
    f230:	3025883a 	mov	r18,r6
    f234:	2023883a 	mov	r17,r4
    f238:	2980542e 	bgeu	r5,r6,f38c <__udivdi3+0x194>
    f23c:	00bfffd4 	movui	r2,65535
    f240:	282d883a 	mov	r22,r5
    f244:	1180a836 	bltu	r2,r6,f4e8 <__udivdi3+0x2f0>
    f248:	00803fc4 	movi	r2,255
    f24c:	1181422e 	bgeu	r2,r6,f758 <__udivdi3+0x560>
    f250:	00800204 	movi	r2,8
    f254:	1007883a 	mov	r3,r2
    f258:	3084d83a 	srl	r2,r6,r2
    f25c:	010000b4 	movhi	r4,2
    f260:	213f3504 	addi	r4,r4,-812
    f264:	2085883a 	add	r2,r4,r2
    f268:	10800003 	ldbu	r2,0(r2)
    f26c:	10c7883a 	add	r3,r2,r3
    f270:	00800804 	movi	r2,32
    f274:	10c5c83a 	sub	r2,r2,r3
    f278:	10000526 	beq	r2,zero,f290 <__udivdi3+0x98>
    f27c:	80a0983a 	sll	r16,r16,r2
    f280:	98c6d83a 	srl	r3,r19,r3
    f284:	30a4983a 	sll	r18,r6,r2
    f288:	98a2983a 	sll	r17,r19,r2
    f28c:	80ecb03a 	or	r22,r16,r3
    f290:	902ad43a 	srli	r21,r18,16
    f294:	b009883a 	mov	r4,r22
    f298:	953fffcc 	andi	r20,r18,65535
    f29c:	a80b883a 	mov	r5,r21
    f2a0:	000fe6c0 	call	fe6c <__umodsi3>
    f2a4:	b009883a 	mov	r4,r22
    f2a8:	a80b883a 	mov	r5,r21
    f2ac:	1027883a 	mov	r19,r2
    f2b0:	000fe640 	call	fe64 <__udivsi3>
    f2b4:	1021883a 	mov	r16,r2
    f2b8:	8806d43a 	srli	r3,r17,16
    f2bc:	9804943a 	slli	r2,r19,16
    f2c0:	8527383a 	mul	r19,r16,r20
    f2c4:	10c4b03a 	or	r2,r2,r3
    f2c8:	14c0052e 	bgeu	r2,r19,f2e0 <__udivdi3+0xe8>
    f2cc:	1485883a 	add	r2,r2,r18
    f2d0:	80ffffc4 	addi	r3,r16,-1
    f2d4:	14800136 	bltu	r2,r18,f2dc <__udivdi3+0xe4>
    f2d8:	14c13436 	bltu	r2,r19,f7ac <__udivdi3+0x5b4>
    f2dc:	1821883a 	mov	r16,r3
    f2e0:	14e7c83a 	sub	r19,r2,r19
    f2e4:	9809883a 	mov	r4,r19
    f2e8:	a80b883a 	mov	r5,r21
    f2ec:	000fe6c0 	call	fe6c <__umodsi3>
    f2f0:	102d883a 	mov	r22,r2
    f2f4:	9809883a 	mov	r4,r19
    f2f8:	a80b883a 	mov	r5,r21
    f2fc:	000fe640 	call	fe64 <__udivsi3>
    f300:	b02c943a 	slli	r22,r22,16
    f304:	1529383a 	mul	r20,r2,r20
    f308:	8c7fffcc 	andi	r17,r17,65535
    f30c:	b462b03a 	or	r17,r22,r17
    f310:	8d00052e 	bgeu	r17,r20,f328 <__udivdi3+0x130>
    f314:	8ca3883a 	add	r17,r17,r18
    f318:	10ffffc4 	addi	r3,r2,-1
    f31c:	8c80f636 	bltu	r17,r18,f6f8 <__udivdi3+0x500>
    f320:	8d00f52e 	bgeu	r17,r20,f6f8 <__udivdi3+0x500>
    f324:	10bfff84 	addi	r2,r2,-2
    f328:	8020943a 	slli	r16,r16,16
    f32c:	0007883a 	mov	r3,zero
    f330:	1404b03a 	or	r2,r2,r16
    f334:	00005b06 	br	f4a4 <__udivdi3+0x2ac>
    f338:	29c05836 	bltu	r5,r7,f49c <__udivdi3+0x2a4>
    f33c:	00bfffd4 	movui	r2,65535
    f340:	11c0642e 	bgeu	r2,r7,f4d4 <__udivdi3+0x2dc>
    f344:	00804034 	movhi	r2,256
    f348:	10bfffc4 	addi	r2,r2,-1
    f34c:	11c0f32e 	bgeu	r2,r7,f71c <__udivdi3+0x524>
    f350:	00c00604 	movi	r3,24
    f354:	180b883a 	mov	r5,r3
    f358:	38c6d83a 	srl	r3,r7,r3
    f35c:	008000b4 	movhi	r2,2
    f360:	10bf3504 	addi	r2,r2,-812
    f364:	10c7883a 	add	r3,r2,r3
    f368:	18c00003 	ldbu	r3,0(r3)
    f36c:	01000804 	movi	r4,32
    f370:	1947883a 	add	r3,r3,r5
    f374:	20e5c83a 	sub	r18,r4,r3
    f378:	9000661e 	bne	r18,zero,f514 <__udivdi3+0x31c>
    f37c:	3c00f936 	bltu	r7,r16,f764 <__udivdi3+0x56c>
    f380:	9985403a 	cmpgeu	r2,r19,r6
    f384:	0007883a 	mov	r3,zero
    f388:	00004606 	br	f4a4 <__udivdi3+0x2ac>
    f38c:	3000041e 	bne	r6,zero,f3a0 <__udivdi3+0x1a8>
    f390:	01000044 	movi	r4,1
    f394:	000b883a 	mov	r5,zero
    f398:	000fe640 	call	fe64 <__udivsi3>
    f39c:	1025883a 	mov	r18,r2
    f3a0:	00bfffd4 	movui	r2,65535
    f3a4:	1480562e 	bgeu	r2,r18,f500 <__udivdi3+0x308>
    f3a8:	00804034 	movhi	r2,256
    f3ac:	10bfffc4 	addi	r2,r2,-1
    f3b0:	1480e32e 	bgeu	r2,r18,f740 <__udivdi3+0x548>
    f3b4:	00800604 	movi	r2,24
    f3b8:	1007883a 	mov	r3,r2
    f3bc:	9084d83a 	srl	r2,r18,r2
    f3c0:	010000b4 	movhi	r4,2
    f3c4:	213f3504 	addi	r4,r4,-812
    f3c8:	2085883a 	add	r2,r4,r2
    f3cc:	10800003 	ldbu	r2,0(r2)
    f3d0:	10c5883a 	add	r2,r2,r3
    f3d4:	00c00804 	movi	r3,32
    f3d8:	1887c83a 	sub	r3,r3,r2
    f3dc:	1800911e 	bne	r3,zero,f624 <__udivdi3+0x42c>
    f3e0:	9028d43a 	srli	r20,r18,16
    f3e4:	84a1c83a 	sub	r16,r16,r18
    f3e8:	957fffcc 	andi	r21,r18,65535
    f3ec:	00c00044 	movi	r3,1
    f3f0:	8009883a 	mov	r4,r16
    f3f4:	a00b883a 	mov	r5,r20
    f3f8:	d8c00015 	stw	r3,0(sp)
    f3fc:	000fe6c0 	call	fe6c <__umodsi3>
    f400:	8009883a 	mov	r4,r16
    f404:	a00b883a 	mov	r5,r20
    f408:	1027883a 	mov	r19,r2
    f40c:	000fe640 	call	fe64 <__udivsi3>
    f410:	1021883a 	mov	r16,r2
    f414:	880cd43a 	srli	r6,r17,16
    f418:	9804943a 	slli	r2,r19,16
    f41c:	8567383a 	mul	r19,r16,r21
    f420:	d8c00017 	ldw	r3,0(sp)
    f424:	1188b03a 	or	r4,r2,r6
    f428:	24c0052e 	bgeu	r4,r19,f440 <__udivdi3+0x248>
    f42c:	2489883a 	add	r4,r4,r18
    f430:	80bfffc4 	addi	r2,r16,-1
    f434:	24800136 	bltu	r4,r18,f43c <__udivdi3+0x244>
    f438:	24c0d936 	bltu	r4,r19,f7a0 <__udivdi3+0x5a8>
    f43c:	1021883a 	mov	r16,r2
    f440:	24e7c83a 	sub	r19,r4,r19
    f444:	9809883a 	mov	r4,r19
    f448:	a00b883a 	mov	r5,r20
    f44c:	d8c00015 	stw	r3,0(sp)
    f450:	000fe6c0 	call	fe6c <__umodsi3>
    f454:	102d883a 	mov	r22,r2
    f458:	9809883a 	mov	r4,r19
    f45c:	a00b883a 	mov	r5,r20
    f460:	000fe640 	call	fe64 <__udivsi3>
    f464:	b02c943a 	slli	r22,r22,16
    f468:	156b383a 	mul	r21,r2,r21
    f46c:	8c7fffcc 	andi	r17,r17,65535
    f470:	b462b03a 	or	r17,r22,r17
    f474:	d8c00017 	ldw	r3,0(sp)
    f478:	8d40052e 	bgeu	r17,r21,f490 <__udivdi3+0x298>
    f47c:	8ca3883a 	add	r17,r17,r18
    f480:	113fffc4 	addi	r4,r2,-1
    f484:	8c809a36 	bltu	r17,r18,f6f0 <__udivdi3+0x4f8>
    f488:	8d40992e 	bgeu	r17,r21,f6f0 <__udivdi3+0x4f8>
    f48c:	10bfff84 	addi	r2,r2,-2
    f490:	8020943a 	slli	r16,r16,16
    f494:	1404b03a 	or	r2,r2,r16
    f498:	00000206 	br	f4a4 <__udivdi3+0x2ac>
    f49c:	0007883a 	mov	r3,zero
    f4a0:	0005883a 	mov	r2,zero
    f4a4:	dfc00a17 	ldw	ra,40(sp)
    f4a8:	df000917 	ldw	fp,36(sp)
    f4ac:	ddc00817 	ldw	r23,32(sp)
    f4b0:	dd800717 	ldw	r22,28(sp)
    f4b4:	dd400617 	ldw	r21,24(sp)
    f4b8:	dd000517 	ldw	r20,20(sp)
    f4bc:	dcc00417 	ldw	r19,16(sp)
    f4c0:	dc800317 	ldw	r18,12(sp)
    f4c4:	dc400217 	ldw	r17,8(sp)
    f4c8:	dc000117 	ldw	r16,4(sp)
    f4cc:	dec00b04 	addi	sp,sp,44
    f4d0:	f800283a 	ret
    f4d4:	00803fc4 	movi	r2,255
    f4d8:	11c0932e 	bgeu	r2,r7,f728 <__udivdi3+0x530>
    f4dc:	00c00204 	movi	r3,8
    f4e0:	180b883a 	mov	r5,r3
    f4e4:	003f9c06 	br	f358 <__alt_mem_Flash_flash_data+0xf400f358>
    f4e8:	00804034 	movhi	r2,256
    f4ec:	10bfffc4 	addi	r2,r2,-1
    f4f0:	1180902e 	bgeu	r2,r6,f734 <__udivdi3+0x53c>
    f4f4:	00800604 	movi	r2,24
    f4f8:	1007883a 	mov	r3,r2
    f4fc:	003f5606 	br	f258 <__alt_mem_Flash_flash_data+0xf400f258>
    f500:	00803fc4 	movi	r2,255
    f504:	1480912e 	bgeu	r2,r18,f74c <__udivdi3+0x554>
    f508:	00800204 	movi	r2,8
    f50c:	1007883a 	mov	r3,r2
    f510:	003faa06 	br	f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f514:	30eed83a 	srl	r23,r6,r3
    f518:	3c8e983a 	sll	r7,r7,r18
    f51c:	80f8d83a 	srl	fp,r16,r3
    f520:	98c6d83a 	srl	r3,r19,r3
    f524:	3deeb03a 	or	r23,r7,r23
    f528:	b828d43a 	srli	r20,r23,16
    f52c:	84a0983a 	sll	r16,r16,r18
    f530:	e009883a 	mov	r4,fp
    f534:	a00b883a 	mov	r5,r20
    f538:	80e2b03a 	or	r17,r16,r3
    f53c:	34aa983a 	sll	r21,r6,r18
    f540:	000fe6c0 	call	fe6c <__umodsi3>
    f544:	e009883a 	mov	r4,fp
    f548:	a00b883a 	mov	r5,r20
    f54c:	102d883a 	mov	r22,r2
    f550:	000fe640 	call	fe64 <__udivsi3>
    f554:	1021883a 	mov	r16,r2
    f558:	bf3fffcc 	andi	fp,r23,65535
    f55c:	b004943a 	slli	r2,r22,16
    f560:	8808d43a 	srli	r4,r17,16
    f564:	872d383a 	mul	r22,r16,fp
    f568:	1104b03a 	or	r2,r2,r4
    f56c:	1580042e 	bgeu	r2,r22,f580 <__udivdi3+0x388>
    f570:	15c5883a 	add	r2,r2,r23
    f574:	80ffffc4 	addi	r3,r16,-1
    f578:	15c0812e 	bgeu	r2,r23,f780 <__udivdi3+0x588>
    f57c:	1821883a 	mov	r16,r3
    f580:	15adc83a 	sub	r22,r2,r22
    f584:	b009883a 	mov	r4,r22
    f588:	a00b883a 	mov	r5,r20
    f58c:	000fe6c0 	call	fe6c <__umodsi3>
    f590:	a00b883a 	mov	r5,r20
    f594:	b009883a 	mov	r4,r22
    f598:	d8800015 	stw	r2,0(sp)
    f59c:	000fe640 	call	fe64 <__udivsi3>
    f5a0:	d8c00017 	ldw	r3,0(sp)
    f5a4:	170b383a 	mul	r5,r2,fp
    f5a8:	8c7fffcc 	andi	r17,r17,65535
    f5ac:	1806943a 	slli	r3,r3,16
    f5b0:	1c46b03a 	or	r3,r3,r17
    f5b4:	1940042e 	bgeu	r3,r5,f5c8 <__udivdi3+0x3d0>
    f5b8:	1dc7883a 	add	r3,r3,r23
    f5bc:	113fffc4 	addi	r4,r2,-1
    f5c0:	1dc06b2e 	bgeu	r3,r23,f770 <__udivdi3+0x578>
    f5c4:	2005883a 	mov	r2,r4
    f5c8:	8020943a 	slli	r16,r16,16
    f5cc:	a9ffffcc 	andi	r7,r21,65535
    f5d0:	a82ad43a 	srli	r21,r21,16
    f5d4:	1404b03a 	or	r2,r2,r16
    f5d8:	113fffcc 	andi	r4,r2,65535
    f5dc:	100cd43a 	srli	r6,r2,16
    f5e0:	21d3383a 	mul	r9,r4,r7
    f5e4:	2549383a 	mul	r4,r4,r21
    f5e8:	31cf383a 	mul	r7,r6,r7
    f5ec:	4810d43a 	srli	r8,r9,16
    f5f0:	1947c83a 	sub	r3,r3,r5
    f5f4:	3909883a 	add	r4,r7,r4
    f5f8:	2209883a 	add	r4,r4,r8
    f5fc:	354d383a 	mul	r6,r6,r21
    f600:	21c0022e 	bgeu	r4,r7,f60c <__udivdi3+0x414>
    f604:	01400074 	movhi	r5,1
    f608:	314d883a 	add	r6,r6,r5
    f60c:	202ad43a 	srli	r21,r4,16
    f610:	354d883a 	add	r6,r6,r21
    f614:	19803f36 	bltu	r3,r6,f714 <__udivdi3+0x51c>
    f618:	19803926 	beq	r3,r6,f700 <__udivdi3+0x508>
    f61c:	0007883a 	mov	r3,zero
    f620:	003fa006 	br	f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f624:	90e4983a 	sll	r18,r18,r3
    f628:	80aad83a 	srl	r21,r16,r2
    f62c:	80e0983a 	sll	r16,r16,r3
    f630:	9028d43a 	srli	r20,r18,16
    f634:	9884d83a 	srl	r2,r19,r2
    f638:	a809883a 	mov	r4,r21
    f63c:	a00b883a 	mov	r5,r20
    f640:	80acb03a 	or	r22,r16,r2
    f644:	98e2983a 	sll	r17,r19,r3
    f648:	000fe6c0 	call	fe6c <__umodsi3>
    f64c:	a809883a 	mov	r4,r21
    f650:	a00b883a 	mov	r5,r20
    f654:	1021883a 	mov	r16,r2
    f658:	000fe640 	call	fe64 <__udivsi3>
    f65c:	957fffcc 	andi	r21,r18,65535
    f660:	8020943a 	slli	r16,r16,16
    f664:	b00ad43a 	srli	r5,r22,16
    f668:	1567383a 	mul	r19,r2,r21
    f66c:	102f883a 	mov	r23,r2
    f670:	8148b03a 	or	r4,r16,r5
    f674:	24c0062e 	bgeu	r4,r19,f690 <__udivdi3+0x498>
    f678:	2489883a 	add	r4,r4,r18
    f67c:	10bfffc4 	addi	r2,r2,-1
    f680:	24804536 	bltu	r4,r18,f798 <__udivdi3+0x5a0>
    f684:	24c0442e 	bgeu	r4,r19,f798 <__udivdi3+0x5a0>
    f688:	bdffff84 	addi	r23,r23,-2
    f68c:	2489883a 	add	r4,r4,r18
    f690:	24e7c83a 	sub	r19,r4,r19
    f694:	9809883a 	mov	r4,r19
    f698:	a00b883a 	mov	r5,r20
    f69c:	000fe6c0 	call	fe6c <__umodsi3>
    f6a0:	1021883a 	mov	r16,r2
    f6a4:	9809883a 	mov	r4,r19
    f6a8:	a00b883a 	mov	r5,r20
    f6ac:	000fe640 	call	fe64 <__udivsi3>
    f6b0:	8020943a 	slli	r16,r16,16
    f6b4:	1007883a 	mov	r3,r2
    f6b8:	1545383a 	mul	r2,r2,r21
    f6bc:	b13fffcc 	andi	r4,r22,65535
    f6c0:	8108b03a 	or	r4,r16,r4
    f6c4:	2080062e 	bgeu	r4,r2,f6e0 <__udivdi3+0x4e8>
    f6c8:	2489883a 	add	r4,r4,r18
    f6cc:	197fffc4 	addi	r5,r3,-1
    f6d0:	24802f36 	bltu	r4,r18,f790 <__udivdi3+0x598>
    f6d4:	20802e2e 	bgeu	r4,r2,f790 <__udivdi3+0x598>
    f6d8:	18ffff84 	addi	r3,r3,-2
    f6dc:	2489883a 	add	r4,r4,r18
    f6e0:	b82e943a 	slli	r23,r23,16
    f6e4:	20a1c83a 	sub	r16,r4,r2
    f6e8:	1dc6b03a 	or	r3,r3,r23
    f6ec:	003f4006 	br	f3f0 <__alt_mem_Flash_flash_data+0xf400f3f0>
    f6f0:	2005883a 	mov	r2,r4
    f6f4:	003f6606 	br	f490 <__alt_mem_Flash_flash_data+0xf400f490>
    f6f8:	1805883a 	mov	r2,r3
    f6fc:	003f0a06 	br	f328 <__alt_mem_Flash_flash_data+0xf400f328>
    f700:	2006943a 	slli	r3,r4,16
    f704:	9c88983a 	sll	r4,r19,r18
    f708:	4a7fffcc 	andi	r9,r9,65535
    f70c:	1a47883a 	add	r3,r3,r9
    f710:	20ffc22e 	bgeu	r4,r3,f61c <__alt_mem_Flash_flash_data+0xf400f61c>
    f714:	10bfffc4 	addi	r2,r2,-1
    f718:	003fc006 	br	f61c <__alt_mem_Flash_flash_data+0xf400f61c>
    f71c:	00c00404 	movi	r3,16
    f720:	180b883a 	mov	r5,r3
    f724:	003f0c06 	br	f358 <__alt_mem_Flash_flash_data+0xf400f358>
    f728:	0007883a 	mov	r3,zero
    f72c:	000b883a 	mov	r5,zero
    f730:	003f0906 	br	f358 <__alt_mem_Flash_flash_data+0xf400f358>
    f734:	00800404 	movi	r2,16
    f738:	1007883a 	mov	r3,r2
    f73c:	003ec606 	br	f258 <__alt_mem_Flash_flash_data+0xf400f258>
    f740:	00800404 	movi	r2,16
    f744:	1007883a 	mov	r3,r2
    f748:	003f1c06 	br	f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f74c:	0005883a 	mov	r2,zero
    f750:	0007883a 	mov	r3,zero
    f754:	003f1906 	br	f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f758:	0005883a 	mov	r2,zero
    f75c:	0007883a 	mov	r3,zero
    f760:	003ebd06 	br	f258 <__alt_mem_Flash_flash_data+0xf400f258>
    f764:	0007883a 	mov	r3,zero
    f768:	00800044 	movi	r2,1
    f76c:	003f4d06 	br	f4a4 <__alt_mem_Flash_flash_data+0xf400f4a4>
    f770:	197f942e 	bgeu	r3,r5,f5c4 <__alt_mem_Flash_flash_data+0xf400f5c4>
    f774:	10bfff84 	addi	r2,r2,-2
    f778:	1dc7883a 	add	r3,r3,r23
    f77c:	003f9206 	br	f5c8 <__alt_mem_Flash_flash_data+0xf400f5c8>
    f780:	15bf7e2e 	bgeu	r2,r22,f57c <__alt_mem_Flash_flash_data+0xf400f57c>
    f784:	843fff84 	addi	r16,r16,-2
    f788:	15c5883a 	add	r2,r2,r23
    f78c:	003f7c06 	br	f580 <__alt_mem_Flash_flash_data+0xf400f580>
    f790:	2807883a 	mov	r3,r5
    f794:	003fd206 	br	f6e0 <__alt_mem_Flash_flash_data+0xf400f6e0>
    f798:	102f883a 	mov	r23,r2
    f79c:	003fbc06 	br	f690 <__alt_mem_Flash_flash_data+0xf400f690>
    f7a0:	843fff84 	addi	r16,r16,-2
    f7a4:	2489883a 	add	r4,r4,r18
    f7a8:	003f2506 	br	f440 <__alt_mem_Flash_flash_data+0xf400f440>
    f7ac:	843fff84 	addi	r16,r16,-2
    f7b0:	1485883a 	add	r2,r2,r18
    f7b4:	003eca06 	br	f2e0 <__alt_mem_Flash_flash_data+0xf400f2e0>

0000f7b8 <__umoddi3>:
    f7b8:	defff404 	addi	sp,sp,-48
    f7bc:	ddc00915 	stw	r23,36(sp)
    f7c0:	dc400315 	stw	r17,12(sp)
    f7c4:	dc000215 	stw	r16,8(sp)
    f7c8:	dfc00b15 	stw	ra,44(sp)
    f7cc:	df000a15 	stw	fp,40(sp)
    f7d0:	dd800815 	stw	r22,32(sp)
    f7d4:	dd400715 	stw	r21,28(sp)
    f7d8:	dd000615 	stw	r20,24(sp)
    f7dc:	dcc00515 	stw	r19,20(sp)
    f7e0:	dc800415 	stw	r18,16(sp)
    f7e4:	2021883a 	mov	r16,r4
    f7e8:	2823883a 	mov	r17,r5
    f7ec:	282f883a 	mov	r23,r5
    f7f0:	3800381e 	bne	r7,zero,f8d4 <__umoddi3+0x11c>
    f7f4:	3027883a 	mov	r19,r6
    f7f8:	2029883a 	mov	r20,r4
    f7fc:	29804e2e 	bgeu	r5,r6,f938 <__umoddi3+0x180>
    f800:	00bfffd4 	movui	r2,65535
    f804:	11809c36 	bltu	r2,r6,fa78 <__umoddi3+0x2c0>
    f808:	00803fc4 	movi	r2,255
    f80c:	11813b2e 	bgeu	r2,r6,fcfc <__umoddi3+0x544>
    f810:	01400204 	movi	r5,8
    f814:	2805883a 	mov	r2,r5
    f818:	314ad83a 	srl	r5,r6,r5
    f81c:	00c000b4 	movhi	r3,2
    f820:	18ff3504 	addi	r3,r3,-812
    f824:	194b883a 	add	r5,r3,r5
    f828:	29000003 	ldbu	r4,0(r5)
    f82c:	2089883a 	add	r4,r4,r2
    f830:	00800804 	movi	r2,32
    f834:	1105c83a 	sub	r2,r2,r4
    f838:	1000ec26 	beq	r2,zero,fbec <__umoddi3+0x434>
    f83c:	88a2983a 	sll	r17,r17,r2
    f840:	8108d83a 	srl	r4,r16,r4
    f844:	30a6983a 	sll	r19,r6,r2
    f848:	80a8983a 	sll	r20,r16,r2
    f84c:	1025883a 	mov	r18,r2
    f850:	892eb03a 	or	r23,r17,r4
    f854:	982cd43a 	srli	r22,r19,16
    f858:	b809883a 	mov	r4,r23
    f85c:	9d7fffcc 	andi	r21,r19,65535
    f860:	b00b883a 	mov	r5,r22
    f864:	000fe6c0 	call	fe6c <__umodsi3>
    f868:	b809883a 	mov	r4,r23
    f86c:	b00b883a 	mov	r5,r22
    f870:	1021883a 	mov	r16,r2
    f874:	000fe640 	call	fe64 <__udivsi3>
    f878:	8020943a 	slli	r16,r16,16
    f87c:	a00cd43a 	srli	r6,r20,16
    f880:	1545383a 	mul	r2,r2,r21
    f884:	8188b03a 	or	r4,r16,r6
    f888:	2080042e 	bgeu	r4,r2,f89c <__umoddi3+0xe4>
    f88c:	24c9883a 	add	r4,r4,r19
    f890:	24c00236 	bltu	r4,r19,f89c <__umoddi3+0xe4>
    f894:	2080012e 	bgeu	r4,r2,f89c <__umoddi3+0xe4>
    f898:	24c9883a 	add	r4,r4,r19
    f89c:	20a3c83a 	sub	r17,r4,r2
    f8a0:	8809883a 	mov	r4,r17
    f8a4:	b00b883a 	mov	r5,r22
    f8a8:	000fe6c0 	call	fe6c <__umodsi3>
    f8ac:	8809883a 	mov	r4,r17
    f8b0:	b00b883a 	mov	r5,r22
    f8b4:	1021883a 	mov	r16,r2
    f8b8:	000fe640 	call	fe64 <__udivsi3>
    f8bc:	8006943a 	slli	r3,r16,16
    f8c0:	1545383a 	mul	r2,r2,r21
    f8c4:	a13fffcc 	andi	r4,r20,65535
    f8c8:	1906b03a 	or	r3,r3,r4
    f8cc:	1880532e 	bgeu	r3,r2,fa1c <__umoddi3+0x264>
    f8d0:	00004e06 	br	fa0c <__umoddi3+0x254>
    f8d4:	29c05536 	bltu	r5,r7,fa2c <__umoddi3+0x274>
    f8d8:	00bfffd4 	movui	r2,65535
    f8dc:	11c0612e 	bgeu	r2,r7,fa64 <__umoddi3+0x2ac>
    f8e0:	00804034 	movhi	r2,256
    f8e4:	10bfffc4 	addi	r2,r2,-1
    f8e8:	11c0f82e 	bgeu	r2,r7,fccc <__umoddi3+0x514>
    f8ec:	01400604 	movi	r5,24
    f8f0:	282b883a 	mov	r21,r5
    f8f4:	394ad83a 	srl	r5,r7,r5
    f8f8:	00c000b4 	movhi	r3,2
    f8fc:	18ff3504 	addi	r3,r3,-812
    f900:	194b883a 	add	r5,r3,r5
    f904:	28800003 	ldbu	r2,0(r5)
    f908:	00c00804 	movi	r3,32
    f90c:	156b883a 	add	r21,r2,r21
    f910:	1d69c83a 	sub	r20,r3,r21
    f914:	a000631e 	bne	r20,zero,faa4 <__umoddi3+0x2ec>
    f918:	3c400136 	bltu	r7,r17,f920 <__umoddi3+0x168>
    f91c:	81810436 	bltu	r16,r6,fd30 <__umoddi3+0x578>
    f920:	8185c83a 	sub	r2,r16,r6
    f924:	89e3c83a 	sub	r17,r17,r7
    f928:	8087803a 	cmpltu	r3,r16,r2
    f92c:	88efc83a 	sub	r23,r17,r3
    f930:	b807883a 	mov	r3,r23
    f934:	00003f06 	br	fa34 <__umoddi3+0x27c>
    f938:	3000041e 	bne	r6,zero,f94c <__umoddi3+0x194>
    f93c:	01000044 	movi	r4,1
    f940:	000b883a 	mov	r5,zero
    f944:	000fe640 	call	fe64 <__udivsi3>
    f948:	1027883a 	mov	r19,r2
    f94c:	00bfffd4 	movui	r2,65535
    f950:	14c04f2e 	bgeu	r2,r19,fa90 <__umoddi3+0x2d8>
    f954:	00804034 	movhi	r2,256
    f958:	10bfffc4 	addi	r2,r2,-1
    f95c:	14c0e42e 	bgeu	r2,r19,fcf0 <__umoddi3+0x538>
    f960:	00800604 	movi	r2,24
    f964:	1007883a 	mov	r3,r2
    f968:	9884d83a 	srl	r2,r19,r2
    f96c:	010000b4 	movhi	r4,2
    f970:	213f3504 	addi	r4,r4,-812
    f974:	2085883a 	add	r2,r4,r2
    f978:	11000003 	ldbu	r4,0(r2)
    f97c:	00800804 	movi	r2,32
    f980:	20c7883a 	add	r3,r4,r3
    f984:	10c5c83a 	sub	r2,r2,r3
    f988:	10009a1e 	bne	r2,zero,fbf4 <__umoddi3+0x43c>
    f98c:	982cd43a 	srli	r22,r19,16
    f990:	8ce3c83a 	sub	r17,r17,r19
    f994:	9c3fffcc 	andi	r16,r19,65535
    f998:	0025883a 	mov	r18,zero
    f99c:	8809883a 	mov	r4,r17
    f9a0:	b00b883a 	mov	r5,r22
    f9a4:	000fe6c0 	call	fe6c <__umodsi3>
    f9a8:	8809883a 	mov	r4,r17
    f9ac:	b00b883a 	mov	r5,r22
    f9b0:	102b883a 	mov	r21,r2
    f9b4:	000fe640 	call	fe64 <__udivsi3>
    f9b8:	a806943a 	slli	r3,r21,16
    f9bc:	a008d43a 	srli	r4,r20,16
    f9c0:	1405383a 	mul	r2,r2,r16
    f9c4:	190cb03a 	or	r6,r3,r4
    f9c8:	3080032e 	bgeu	r6,r2,f9d8 <__umoddi3+0x220>
    f9cc:	34cd883a 	add	r6,r6,r19
    f9d0:	34c00136 	bltu	r6,r19,f9d8 <__umoddi3+0x220>
    f9d4:	3080d436 	bltu	r6,r2,fd28 <__umoddi3+0x570>
    f9d8:	30abc83a 	sub	r21,r6,r2
    f9dc:	a809883a 	mov	r4,r21
    f9e0:	b00b883a 	mov	r5,r22
    f9e4:	000fe6c0 	call	fe6c <__umodsi3>
    f9e8:	1023883a 	mov	r17,r2
    f9ec:	a809883a 	mov	r4,r21
    f9f0:	b00b883a 	mov	r5,r22
    f9f4:	000fe640 	call	fe64 <__udivsi3>
    f9f8:	8822943a 	slli	r17,r17,16
    f9fc:	1405383a 	mul	r2,r2,r16
    fa00:	a13fffcc 	andi	r4,r20,65535
    fa04:	8906b03a 	or	r3,r17,r4
    fa08:	1880042e 	bgeu	r3,r2,fa1c <__umoddi3+0x264>
    fa0c:	1cc7883a 	add	r3,r3,r19
    fa10:	1cc00236 	bltu	r3,r19,fa1c <__umoddi3+0x264>
    fa14:	1880012e 	bgeu	r3,r2,fa1c <__umoddi3+0x264>
    fa18:	1cc7883a 	add	r3,r3,r19
    fa1c:	1887c83a 	sub	r3,r3,r2
    fa20:	1c84d83a 	srl	r2,r3,r18
    fa24:	0007883a 	mov	r3,zero
    fa28:	00000206 	br	fa34 <__umoddi3+0x27c>
    fa2c:	2005883a 	mov	r2,r4
    fa30:	2807883a 	mov	r3,r5
    fa34:	dfc00b17 	ldw	ra,44(sp)
    fa38:	df000a17 	ldw	fp,40(sp)
    fa3c:	ddc00917 	ldw	r23,36(sp)
    fa40:	dd800817 	ldw	r22,32(sp)
    fa44:	dd400717 	ldw	r21,28(sp)
    fa48:	dd000617 	ldw	r20,24(sp)
    fa4c:	dcc00517 	ldw	r19,20(sp)
    fa50:	dc800417 	ldw	r18,16(sp)
    fa54:	dc400317 	ldw	r17,12(sp)
    fa58:	dc000217 	ldw	r16,8(sp)
    fa5c:	dec00c04 	addi	sp,sp,48
    fa60:	f800283a 	ret
    fa64:	00803fc4 	movi	r2,255
    fa68:	11c0952e 	bgeu	r2,r7,fcc0 <__umoddi3+0x508>
    fa6c:	01400204 	movi	r5,8
    fa70:	282b883a 	mov	r21,r5
    fa74:	003f9f06 	br	f8f4 <__alt_mem_Flash_flash_data+0xf400f8f4>
    fa78:	00804034 	movhi	r2,256
    fa7c:	10bfffc4 	addi	r2,r2,-1
    fa80:	1180952e 	bgeu	r2,r6,fcd8 <__umoddi3+0x520>
    fa84:	01400604 	movi	r5,24
    fa88:	2805883a 	mov	r2,r5
    fa8c:	003f6206 	br	f818 <__alt_mem_Flash_flash_data+0xf400f818>
    fa90:	00803fc4 	movi	r2,255
    fa94:	14c0932e 	bgeu	r2,r19,fce4 <__umoddi3+0x52c>
    fa98:	00800204 	movi	r2,8
    fa9c:	1007883a 	mov	r3,r2
    faa0:	003fb106 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    faa4:	3548d83a 	srl	r4,r6,r21
    faa8:	3d0e983a 	sll	r7,r7,r20
    faac:	8d10983a 	sll	r8,r17,r20
    fab0:	8d6cd83a 	srl	r22,r17,r21
    fab4:	3922b03a 	or	r17,r7,r4
    fab8:	882ed43a 	srli	r23,r17,16
    fabc:	8564d83a 	srl	r18,r16,r21
    fac0:	b009883a 	mov	r4,r22
    fac4:	b80b883a 	mov	r5,r23
    fac8:	44a4b03a 	or	r18,r8,r18
    facc:	3526983a 	sll	r19,r6,r20
    fad0:	000fe6c0 	call	fe6c <__umodsi3>
    fad4:	b009883a 	mov	r4,r22
    fad8:	b80b883a 	mov	r5,r23
    fadc:	1039883a 	mov	fp,r2
    fae0:	000fe640 	call	fe64 <__udivsi3>
    fae4:	102d883a 	mov	r22,r2
    fae8:	8a3fffcc 	andi	r8,r17,65535
    faec:	e004943a 	slli	r2,fp,16
    faf0:	900cd43a 	srli	r6,r18,16
    faf4:	b239383a 	mul	fp,r22,r8
    faf8:	8520983a 	sll	r16,r16,r20
    fafc:	118ab03a 	or	r5,r2,r6
    fb00:	2f00042e 	bgeu	r5,fp,fb14 <__umoddi3+0x35c>
    fb04:	2c4b883a 	add	r5,r5,r17
    fb08:	b0bfffc4 	addi	r2,r22,-1
    fb0c:	2c40822e 	bgeu	r5,r17,fd18 <__umoddi3+0x560>
    fb10:	102d883a 	mov	r22,r2
    fb14:	2f39c83a 	sub	fp,r5,fp
    fb18:	e009883a 	mov	r4,fp
    fb1c:	b80b883a 	mov	r5,r23
    fb20:	da000115 	stw	r8,4(sp)
    fb24:	000fe6c0 	call	fe6c <__umodsi3>
    fb28:	e009883a 	mov	r4,fp
    fb2c:	b80b883a 	mov	r5,r23
    fb30:	d8800015 	stw	r2,0(sp)
    fb34:	000fe640 	call	fe64 <__udivsi3>
    fb38:	d9800017 	ldw	r6,0(sp)
    fb3c:	da000117 	ldw	r8,4(sp)
    fb40:	94bfffcc 	andi	r18,r18,65535
    fb44:	300c943a 	slli	r6,r6,16
    fb48:	1209383a 	mul	r4,r2,r8
    fb4c:	3490b03a 	or	r8,r6,r18
    fb50:	4100042e 	bgeu	r8,r4,fb64 <__umoddi3+0x3ac>
    fb54:	4451883a 	add	r8,r8,r17
    fb58:	10ffffc4 	addi	r3,r2,-1
    fb5c:	44406a2e 	bgeu	r8,r17,fd08 <__umoddi3+0x550>
    fb60:	1805883a 	mov	r2,r3
    fb64:	b012943a 	slli	r9,r22,16
    fb68:	9abfffcc 	andi	r10,r19,65535
    fb6c:	980ed43a 	srli	r7,r19,16
    fb70:	124ab03a 	or	r5,r2,r9
    fb74:	2a7fffcc 	andi	r9,r5,65535
    fb78:	280ad43a 	srli	r5,r5,16
    fb7c:	4a8d383a 	mul	r6,r9,r10
    fb80:	49d3383a 	mul	r9,r9,r7
    fb84:	2a95383a 	mul	r10,r5,r10
    fb88:	3004d43a 	srli	r2,r6,16
    fb8c:	4111c83a 	sub	r8,r8,r4
    fb90:	5253883a 	add	r9,r10,r9
    fb94:	4893883a 	add	r9,r9,r2
    fb98:	29cb383a 	mul	r5,r5,r7
    fb9c:	4a80022e 	bgeu	r9,r10,fba8 <__umoddi3+0x3f0>
    fba0:	00800074 	movhi	r2,1
    fba4:	288b883a 	add	r5,r5,r2
    fba8:	4808d43a 	srli	r4,r9,16
    fbac:	4812943a 	slli	r9,r9,16
    fbb0:	31bfffcc 	andi	r6,r6,65535
    fbb4:	290b883a 	add	r5,r5,r4
    fbb8:	498d883a 	add	r6,r9,r6
    fbbc:	41403a36 	bltu	r8,r5,fca8 <__umoddi3+0x4f0>
    fbc0:	41405d26 	beq	r8,r5,fd38 <__umoddi3+0x580>
    fbc4:	4149c83a 	sub	r4,r8,r5
    fbc8:	300f883a 	mov	r7,r6
    fbcc:	81cfc83a 	sub	r7,r16,r7
    fbd0:	81c7803a 	cmpltu	r3,r16,r7
    fbd4:	20c7c83a 	sub	r3,r4,r3
    fbd8:	1d44983a 	sll	r2,r3,r21
    fbdc:	3d0ed83a 	srl	r7,r7,r20
    fbe0:	1d06d83a 	srl	r3,r3,r20
    fbe4:	11c4b03a 	or	r2,r2,r7
    fbe8:	003f9206 	br	fa34 <__alt_mem_Flash_flash_data+0xf400fa34>
    fbec:	0025883a 	mov	r18,zero
    fbf0:	003f1806 	br	f854 <__alt_mem_Flash_flash_data+0xf400f854>
    fbf4:	98a6983a 	sll	r19,r19,r2
    fbf8:	88e8d83a 	srl	r20,r17,r3
    fbfc:	80c6d83a 	srl	r3,r16,r3
    fc00:	982cd43a 	srli	r22,r19,16
    fc04:	88a2983a 	sll	r17,r17,r2
    fc08:	a009883a 	mov	r4,r20
    fc0c:	b00b883a 	mov	r5,r22
    fc10:	88eab03a 	or	r21,r17,r3
    fc14:	1025883a 	mov	r18,r2
    fc18:	000fe6c0 	call	fe6c <__umodsi3>
    fc1c:	a009883a 	mov	r4,r20
    fc20:	b00b883a 	mov	r5,r22
    fc24:	1023883a 	mov	r17,r2
    fc28:	000fe640 	call	fe64 <__udivsi3>
    fc2c:	9f3fffcc 	andi	fp,r19,65535
    fc30:	8822943a 	slli	r17,r17,16
    fc34:	a80ad43a 	srli	r5,r21,16
    fc38:	1705383a 	mul	r2,r2,fp
    fc3c:	84a8983a 	sll	r20,r16,r18
    fc40:	8948b03a 	or	r4,r17,r5
    fc44:	2080042e 	bgeu	r4,r2,fc58 <__umoddi3+0x4a0>
    fc48:	24c9883a 	add	r4,r4,r19
    fc4c:	24c00236 	bltu	r4,r19,fc58 <__umoddi3+0x4a0>
    fc50:	2080012e 	bgeu	r4,r2,fc58 <__umoddi3+0x4a0>
    fc54:	24c9883a 	add	r4,r4,r19
    fc58:	20afc83a 	sub	r23,r4,r2
    fc5c:	b809883a 	mov	r4,r23
    fc60:	b00b883a 	mov	r5,r22
    fc64:	000fe6c0 	call	fe6c <__umodsi3>
    fc68:	1023883a 	mov	r17,r2
    fc6c:	b809883a 	mov	r4,r23
    fc70:	b00b883a 	mov	r5,r22
    fc74:	000fe640 	call	fe64 <__udivsi3>
    fc78:	8822943a 	slli	r17,r17,16
    fc7c:	1705383a 	mul	r2,r2,fp
    fc80:	a93fffcc 	andi	r4,r21,65535
    fc84:	8908b03a 	or	r4,r17,r4
    fc88:	2080042e 	bgeu	r4,r2,fc9c <__umoddi3+0x4e4>
    fc8c:	24c9883a 	add	r4,r4,r19
    fc90:	24c00236 	bltu	r4,r19,fc9c <__umoddi3+0x4e4>
    fc94:	2080012e 	bgeu	r4,r2,fc9c <__umoddi3+0x4e4>
    fc98:	24c9883a 	add	r4,r4,r19
    fc9c:	20a3c83a 	sub	r17,r4,r2
    fca0:	e021883a 	mov	r16,fp
    fca4:	003f3d06 	br	f99c <__alt_mem_Flash_flash_data+0xf400f99c>
    fca8:	34cfc83a 	sub	r7,r6,r19
    fcac:	2c4bc83a 	sub	r5,r5,r17
    fcb0:	31cd803a 	cmpltu	r6,r6,r7
    fcb4:	298dc83a 	sub	r6,r5,r6
    fcb8:	4189c83a 	sub	r4,r8,r6
    fcbc:	003fc306 	br	fbcc <__alt_mem_Flash_flash_data+0xf400fbcc>
    fcc0:	000b883a 	mov	r5,zero
    fcc4:	002b883a 	mov	r21,zero
    fcc8:	003f0a06 	br	f8f4 <__alt_mem_Flash_flash_data+0xf400f8f4>
    fccc:	01400404 	movi	r5,16
    fcd0:	282b883a 	mov	r21,r5
    fcd4:	003f0706 	br	f8f4 <__alt_mem_Flash_flash_data+0xf400f8f4>
    fcd8:	01400404 	movi	r5,16
    fcdc:	2805883a 	mov	r2,r5
    fce0:	003ecd06 	br	f818 <__alt_mem_Flash_flash_data+0xf400f818>
    fce4:	0005883a 	mov	r2,zero
    fce8:	0007883a 	mov	r3,zero
    fcec:	003f1e06 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fcf0:	00800404 	movi	r2,16
    fcf4:	1007883a 	mov	r3,r2
    fcf8:	003f1b06 	br	f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fcfc:	000b883a 	mov	r5,zero
    fd00:	0005883a 	mov	r2,zero
    fd04:	003ec406 	br	f818 <__alt_mem_Flash_flash_data+0xf400f818>
    fd08:	413f952e 	bgeu	r8,r4,fb60 <__alt_mem_Flash_flash_data+0xf400fb60>
    fd0c:	10bfff84 	addi	r2,r2,-2
    fd10:	4451883a 	add	r8,r8,r17
    fd14:	003f9306 	br	fb64 <__alt_mem_Flash_flash_data+0xf400fb64>
    fd18:	2f3f7d2e 	bgeu	r5,fp,fb10 <__alt_mem_Flash_flash_data+0xf400fb10>
    fd1c:	b5bfff84 	addi	r22,r22,-2
    fd20:	2c4b883a 	add	r5,r5,r17
    fd24:	003f7b06 	br	fb14 <__alt_mem_Flash_flash_data+0xf400fb14>
    fd28:	34cd883a 	add	r6,r6,r19
    fd2c:	003f2a06 	br	f9d8 <__alt_mem_Flash_flash_data+0xf400f9d8>
    fd30:	8005883a 	mov	r2,r16
    fd34:	003efe06 	br	f930 <__alt_mem_Flash_flash_data+0xf400f930>
    fd38:	81bfdb36 	bltu	r16,r6,fca8 <__alt_mem_Flash_flash_data+0xf400fca8>
    fd3c:	300f883a 	mov	r7,r6
    fd40:	0009883a 	mov	r4,zero
    fd44:	003fa106 	br	fbcc <__alt_mem_Flash_flash_data+0xf400fbcc>

0000fd48 <udivmodsi4>:
    fd48:	2900182e 	bgeu	r5,r4,fdac <udivmodsi4+0x64>
    fd4c:	28001716 	blt	r5,zero,fdac <udivmodsi4+0x64>
    fd50:	00800804 	movi	r2,32
    fd54:	00c00044 	movi	r3,1
    fd58:	00000206 	br	fd64 <udivmodsi4+0x1c>
    fd5c:	10001126 	beq	r2,zero,fda4 <udivmodsi4+0x5c>
    fd60:	28000516 	blt	r5,zero,fd78 <udivmodsi4+0x30>
    fd64:	294b883a 	add	r5,r5,r5
    fd68:	10bfffc4 	addi	r2,r2,-1
    fd6c:	18c7883a 	add	r3,r3,r3
    fd70:	293ffa36 	bltu	r5,r4,fd5c <__alt_mem_Flash_flash_data+0xf400fd5c>
    fd74:	18000b26 	beq	r3,zero,fda4 <udivmodsi4+0x5c>
    fd78:	0005883a 	mov	r2,zero
    fd7c:	21400236 	bltu	r4,r5,fd88 <udivmodsi4+0x40>
    fd80:	2149c83a 	sub	r4,r4,r5
    fd84:	10c4b03a 	or	r2,r2,r3
    fd88:	1806d07a 	srli	r3,r3,1
    fd8c:	280ad07a 	srli	r5,r5,1
    fd90:	183ffa1e 	bne	r3,zero,fd7c <__alt_mem_Flash_flash_data+0xf400fd7c>
    fd94:	3000011e 	bne	r6,zero,fd9c <udivmodsi4+0x54>
    fd98:	f800283a 	ret
    fd9c:	2005883a 	mov	r2,r4
    fda0:	f800283a 	ret
    fda4:	0005883a 	mov	r2,zero
    fda8:	003ffa06 	br	fd94 <__alt_mem_Flash_flash_data+0xf400fd94>
    fdac:	00c00044 	movi	r3,1
    fdb0:	003ff106 	br	fd78 <__alt_mem_Flash_flash_data+0xf400fd78>

0000fdb4 <__divsi3>:
    fdb4:	defffe04 	addi	sp,sp,-8
    fdb8:	dfc00115 	stw	ra,4(sp)
    fdbc:	dc000015 	stw	r16,0(sp)
    fdc0:	20000b16 	blt	r4,zero,fdf0 <__divsi3+0x3c>
    fdc4:	0021883a 	mov	r16,zero
    fdc8:	28000c16 	blt	r5,zero,fdfc <__divsi3+0x48>
    fdcc:	000d883a 	mov	r6,zero
    fdd0:	000fd480 	call	fd48 <udivmodsi4>
    fdd4:	0407c83a 	sub	r3,zero,r16
    fdd8:	1884f03a 	xor	r2,r3,r2
    fddc:	1405883a 	add	r2,r2,r16
    fde0:	dfc00117 	ldw	ra,4(sp)
    fde4:	dc000017 	ldw	r16,0(sp)
    fde8:	dec00204 	addi	sp,sp,8
    fdec:	f800283a 	ret
    fdf0:	0109c83a 	sub	r4,zero,r4
    fdf4:	04000044 	movi	r16,1
    fdf8:	283ff40e 	bge	r5,zero,fdcc <__alt_mem_Flash_flash_data+0xf400fdcc>
    fdfc:	014bc83a 	sub	r5,zero,r5
    fe00:	8400005c 	xori	r16,r16,1
    fe04:	003ff106 	br	fdcc <__alt_mem_Flash_flash_data+0xf400fdcc>

0000fe08 <__modsi3>:
    fe08:	defffd04 	addi	sp,sp,-12
    fe0c:	dfc00215 	stw	ra,8(sp)
    fe10:	dc400115 	stw	r17,4(sp)
    fe14:	dc000015 	stw	r16,0(sp)
    fe18:	20000c16 	blt	r4,zero,fe4c <__modsi3+0x44>
    fe1c:	0023883a 	mov	r17,zero
    fe20:	0021883a 	mov	r16,zero
    fe24:	28000d16 	blt	r5,zero,fe5c <__modsi3+0x54>
    fe28:	01800044 	movi	r6,1
    fe2c:	000fd480 	call	fd48 <udivmodsi4>
    fe30:	1404f03a 	xor	r2,r2,r16
    fe34:	8885883a 	add	r2,r17,r2
    fe38:	dfc00217 	ldw	ra,8(sp)
    fe3c:	dc400117 	ldw	r17,4(sp)
    fe40:	dc000017 	ldw	r16,0(sp)
    fe44:	dec00304 	addi	sp,sp,12
    fe48:	f800283a 	ret
    fe4c:	0109c83a 	sub	r4,zero,r4
    fe50:	04400044 	movi	r17,1
    fe54:	043fffc4 	movi	r16,-1
    fe58:	283ff30e 	bge	r5,zero,fe28 <__alt_mem_Flash_flash_data+0xf400fe28>
    fe5c:	014bc83a 	sub	r5,zero,r5
    fe60:	003ff106 	br	fe28 <__alt_mem_Flash_flash_data+0xf400fe28>

0000fe64 <__udivsi3>:
    fe64:	000d883a 	mov	r6,zero
    fe68:	000fd481 	jmpi	fd48 <udivmodsi4>

0000fe6c <__umodsi3>:
    fe6c:	01800044 	movi	r6,1
    fe70:	000fd481 	jmpi	fd48 <udivmodsi4>

0000fe74 <__adddf3>:
    fe74:	02000434 	movhi	r8,16
    fe78:	423fffc4 	addi	r8,r8,-1
    fe7c:	defffb04 	addi	sp,sp,-20
    fe80:	2a12703a 	and	r9,r5,r8
    fe84:	2806d7fa 	srli	r3,r5,31
    fe88:	3a10703a 	and	r8,r7,r8
    fe8c:	3804d53a 	srli	r2,r7,20
    fe90:	3014d77a 	srli	r10,r6,29
    fe94:	dc000015 	stw	r16,0(sp)
    fe98:	481290fa 	slli	r9,r9,3
    fe9c:	2820d53a 	srli	r16,r5,20
    fea0:	401090fa 	slli	r8,r8,3
    fea4:	200ad77a 	srli	r5,r4,29
    fea8:	380ed7fa 	srli	r7,r7,31
    feac:	dc800215 	stw	r18,8(sp)
    feb0:	dc400115 	stw	r17,4(sp)
    feb4:	dfc00415 	stw	ra,16(sp)
    feb8:	dcc00315 	stw	r19,12(sp)
    febc:	1c803fcc 	andi	r18,r3,255
    fec0:	8401ffcc 	andi	r16,r16,2047
    fec4:	494ab03a 	or	r5,r9,r5
    fec8:	202290fa 	slli	r17,r4,3
    fecc:	1081ffcc 	andi	r2,r2,2047
    fed0:	4290b03a 	or	r8,r8,r10
    fed4:	300c90fa 	slli	r6,r6,3
    fed8:	91c07026 	beq	r18,r7,1009c <__adddf3+0x228>
    fedc:	8087c83a 	sub	r3,r16,r2
    fee0:	00c0b30e 	bge	zero,r3,101b0 <__adddf3+0x33c>
    fee4:	10002a1e 	bne	r2,zero,ff90 <__adddf3+0x11c>
    fee8:	4184b03a 	or	r2,r8,r6
    feec:	1000991e 	bne	r2,zero,10154 <__adddf3+0x2e0>
    fef0:	888001cc 	andi	r2,r17,7
    fef4:	10005b26 	beq	r2,zero,10064 <__adddf3+0x1f0>
    fef8:	88c003cc 	andi	r3,r17,15
    fefc:	00800104 	movi	r2,4
    ff00:	18805826 	beq	r3,r2,10064 <__adddf3+0x1f0>
    ff04:	89800104 	addi	r6,r17,4
    ff08:	3463803a 	cmpltu	r17,r6,r17
    ff0c:	2c4b883a 	add	r5,r5,r17
    ff10:	2880202c 	andhi	r2,r5,128
    ff14:	9007883a 	mov	r3,r18
    ff18:	3023883a 	mov	r17,r6
    ff1c:	10005426 	beq	r2,zero,10070 <__adddf3+0x1fc>
    ff20:	84000044 	addi	r16,r16,1
    ff24:	0081ffc4 	movi	r2,2047
    ff28:	8080c126 	beq	r16,r2,10230 <__adddf3+0x3bc>
    ff2c:	013fe034 	movhi	r4,65408
    ff30:	213fffc4 	addi	r4,r4,-1
    ff34:	290a703a 	and	r5,r5,r4
    ff38:	2804977a 	slli	r2,r5,29
    ff3c:	280a927a 	slli	r5,r5,9
    ff40:	8822d0fa 	srli	r17,r17,3
    ff44:	8401ffcc 	andi	r16,r16,2047
    ff48:	2808d33a 	srli	r4,r5,12
    ff4c:	1444b03a 	or	r2,r2,r17
    ff50:	8401ffcc 	andi	r16,r16,2047
    ff54:	800a953a 	slli	r5,r16,20
    ff58:	18c03fcc 	andi	r3,r3,255
    ff5c:	04000434 	movhi	r16,16
    ff60:	180697fa 	slli	r3,r3,31
    ff64:	843fffc4 	addi	r16,r16,-1
    ff68:	2420703a 	and	r16,r4,r16
    ff6c:	8160b03a 	or	r16,r16,r5
    ff70:	80c6b03a 	or	r3,r16,r3
    ff74:	dfc00417 	ldw	ra,16(sp)
    ff78:	dcc00317 	ldw	r19,12(sp)
    ff7c:	dc800217 	ldw	r18,8(sp)
    ff80:	dc400117 	ldw	r17,4(sp)
    ff84:	dc000017 	ldw	r16,0(sp)
    ff88:	dec00504 	addi	sp,sp,20
    ff8c:	f800283a 	ret
    ff90:	0081ffc4 	movi	r2,2047
    ff94:	80bfd626 	beq	r16,r2,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
    ff98:	42002034 	orhi	r8,r8,128
    ff9c:	00800e04 	movi	r2,56
    ffa0:	10c0a616 	blt	r2,r3,1023c <__adddf3+0x3c8>
    ffa4:	008007c4 	movi	r2,31
    ffa8:	10c0c916 	blt	r2,r3,102d0 <__adddf3+0x45c>
    ffac:	00800804 	movi	r2,32
    ffb0:	10c5c83a 	sub	r2,r2,r3
    ffb4:	408e983a 	sll	r7,r8,r2
    ffb8:	30c8d83a 	srl	r4,r6,r3
    ffbc:	3084983a 	sll	r2,r6,r2
    ffc0:	40c6d83a 	srl	r3,r8,r3
    ffc4:	390cb03a 	or	r6,r7,r4
    ffc8:	1004c03a 	cmpne	r2,r2,zero
    ffcc:	308cb03a 	or	r6,r6,r2
    ffd0:	898dc83a 	sub	r6,r17,r6
    ffd4:	89a3803a 	cmpltu	r17,r17,r6
    ffd8:	28cbc83a 	sub	r5,r5,r3
    ffdc:	2c4bc83a 	sub	r5,r5,r17
    ffe0:	3023883a 	mov	r17,r6
    ffe4:	2880202c 	andhi	r2,r5,128
    ffe8:	10006d26 	beq	r2,zero,101a0 <__adddf3+0x32c>
    ffec:	04c02034 	movhi	r19,128
    fff0:	9cffffc4 	addi	r19,r19,-1
    fff4:	2ce6703a 	and	r19,r5,r19
    fff8:	98007e26 	beq	r19,zero,101f4 <__adddf3+0x380>
    fffc:	9809883a 	mov	r4,r19
   10000:	00124100 	call	12410 <__clzsi2>
   10004:	10fffe04 	addi	r3,r2,-8
   10008:	010007c4 	movi	r4,31
   1000c:	20c07f16 	blt	r4,r3,1020c <__adddf3+0x398>
   10010:	01400a04 	movi	r5,40
   10014:	2885c83a 	sub	r2,r5,r2
   10018:	888ad83a 	srl	r5,r17,r2
   1001c:	98e6983a 	sll	r19,r19,r3
   10020:	88e2983a 	sll	r17,r17,r3
   10024:	2ce6b03a 	or	r19,r5,r19
   10028:	1c007c16 	blt	r3,r16,1021c <__adddf3+0x3a8>
   1002c:	1c21c83a 	sub	r16,r3,r16
   10030:	81400044 	addi	r5,r16,1
   10034:	00c007c4 	movi	r3,31
   10038:	19409816 	blt	r3,r5,1029c <__adddf3+0x428>
   1003c:	1c21c83a 	sub	r16,r3,r16
   10040:	8c08983a 	sll	r4,r17,r16
   10044:	8946d83a 	srl	r3,r17,r5
   10048:	9c20983a 	sll	r16,r19,r16
   1004c:	2008c03a 	cmpne	r4,r4,zero
   10050:	994ad83a 	srl	r5,r19,r5
   10054:	1c06b03a 	or	r3,r3,r16
   10058:	1922b03a 	or	r17,r3,r4
   1005c:	0021883a 	mov	r16,zero
   10060:	003fa306 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10064:	2880202c 	andhi	r2,r5,128
   10068:	9007883a 	mov	r3,r18
   1006c:	103fac1e 	bne	r2,zero,ff20 <__alt_mem_Flash_flash_data+0xf400ff20>
   10070:	2804977a 	slli	r2,r5,29
   10074:	8822d0fa 	srli	r17,r17,3
   10078:	0101ffc4 	movi	r4,2047
   1007c:	280ad0fa 	srli	r5,r5,3
   10080:	1444b03a 	or	r2,r2,r17
   10084:	81002c26 	beq	r16,r4,10138 <__adddf3+0x2c4>
   10088:	8120703a 	and	r16,r16,r4
   1008c:	01000434 	movhi	r4,16
   10090:	213fffc4 	addi	r4,r4,-1
   10094:	2908703a 	and	r4,r5,r4
   10098:	003fad06 	br	ff50 <__alt_mem_Flash_flash_data+0xf400ff50>
   1009c:	8089c83a 	sub	r4,r16,r2
   100a0:	01006a0e 	bge	zero,r4,1024c <__adddf3+0x3d8>
   100a4:	10003326 	beq	r2,zero,10174 <__adddf3+0x300>
   100a8:	0081ffc4 	movi	r2,2047
   100ac:	80bf9026 	beq	r16,r2,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   100b0:	42002034 	orhi	r8,r8,128
   100b4:	00800e04 	movi	r2,56
   100b8:	1100b116 	blt	r2,r4,10380 <__adddf3+0x50c>
   100bc:	008007c4 	movi	r2,31
   100c0:	1100e216 	blt	r2,r4,1044c <__adddf3+0x5d8>
   100c4:	00800804 	movi	r2,32
   100c8:	1105c83a 	sub	r2,r2,r4
   100cc:	4092983a 	sll	r9,r8,r2
   100d0:	310ed83a 	srl	r7,r6,r4
   100d4:	3084983a 	sll	r2,r6,r2
   100d8:	4110d83a 	srl	r8,r8,r4
   100dc:	49ccb03a 	or	r6,r9,r7
   100e0:	1004c03a 	cmpne	r2,r2,zero
   100e4:	308cb03a 	or	r6,r6,r2
   100e8:	344d883a 	add	r6,r6,r17
   100ec:	3463803a 	cmpltu	r17,r6,r17
   100f0:	414b883a 	add	r5,r8,r5
   100f4:	2c4b883a 	add	r5,r5,r17
   100f8:	3023883a 	mov	r17,r6
   100fc:	2880202c 	andhi	r2,r5,128
   10100:	10002726 	beq	r2,zero,101a0 <__adddf3+0x32c>
   10104:	84000044 	addi	r16,r16,1
   10108:	0081ffc4 	movi	r2,2047
   1010c:	8080ae26 	beq	r16,r2,103c8 <__adddf3+0x554>
   10110:	00bfe034 	movhi	r2,65408
   10114:	10bfffc4 	addi	r2,r2,-1
   10118:	288a703a 	and	r5,r5,r2
   1011c:	880cd07a 	srli	r6,r17,1
   10120:	280897fa 	slli	r4,r5,31
   10124:	88c0004c 	andi	r3,r17,1
   10128:	30e2b03a 	or	r17,r6,r3
   1012c:	280ad07a 	srli	r5,r5,1
   10130:	8922b03a 	or	r17,r17,r4
   10134:	003f6e06 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10138:	1148b03a 	or	r4,r2,r5
   1013c:	20003c26 	beq	r4,zero,10230 <__adddf3+0x3bc>
   10140:	29000234 	orhi	r4,r5,8
   10144:	01400434 	movhi	r5,16
   10148:	297fffc4 	addi	r5,r5,-1
   1014c:	2148703a 	and	r4,r4,r5
   10150:	003f7f06 	br	ff50 <__alt_mem_Flash_flash_data+0xf400ff50>
   10154:	18ffffc4 	addi	r3,r3,-1
   10158:	18004d1e 	bne	r3,zero,10290 <__adddf3+0x41c>
   1015c:	898dc83a 	sub	r6,r17,r6
   10160:	89a3803a 	cmpltu	r17,r17,r6
   10164:	2a0bc83a 	sub	r5,r5,r8
   10168:	2c4bc83a 	sub	r5,r5,r17
   1016c:	3023883a 	mov	r17,r6
   10170:	003f9c06 	br	ffe4 <__alt_mem_Flash_flash_data+0xf400ffe4>
   10174:	4184b03a 	or	r2,r8,r6
   10178:	103f5d26 	beq	r2,zero,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   1017c:	213fffc4 	addi	r4,r4,-1
   10180:	203fd926 	beq	r4,zero,100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   10184:	0081ffc4 	movi	r2,2047
   10188:	80bfca1e 	bne	r16,r2,100b4 <__alt_mem_Flash_flash_data+0xf40100b4>
   1018c:	003f5806 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10190:	10c8b03a 	or	r4,r2,r3
   10194:	20008b26 	beq	r4,zero,103c4 <__adddf3+0x550>
   10198:	100b883a 	mov	r5,r2
   1019c:	1823883a 	mov	r17,r3
   101a0:	888001cc 	andi	r2,r17,7
   101a4:	103f541e 	bne	r2,zero,fef8 <__alt_mem_Flash_flash_data+0xf400fef8>
   101a8:	9007883a 	mov	r3,r18
   101ac:	003fb006 	br	10070 <__alt_mem_Flash_flash_data+0xf4010070>
   101b0:	1800531e 	bne	r3,zero,10300 <__adddf3+0x48c>
   101b4:	80800044 	addi	r2,r16,1
   101b8:	1081ffcc 	andi	r2,r2,2047
   101bc:	00c00044 	movi	r3,1
   101c0:	1880990e 	bge	r3,r2,10428 <__adddf3+0x5b4>
   101c4:	8985c83a 	sub	r2,r17,r6
   101c8:	8887803a 	cmpltu	r3,r17,r2
   101cc:	2a27c83a 	sub	r19,r5,r8
   101d0:	98e7c83a 	sub	r19,r19,r3
   101d4:	98c0202c 	andhi	r3,r19,128
   101d8:	18006226 	beq	r3,zero,10364 <__adddf3+0x4f0>
   101dc:	3463c83a 	sub	r17,r6,r17
   101e0:	4151c83a 	sub	r8,r8,r5
   101e4:	344d803a 	cmpltu	r6,r6,r17
   101e8:	41a7c83a 	sub	r19,r8,r6
   101ec:	3825883a 	mov	r18,r7
   101f0:	983f821e 	bne	r19,zero,fffc <__alt_mem_Flash_flash_data+0xf400fffc>
   101f4:	8809883a 	mov	r4,r17
   101f8:	00124100 	call	12410 <__clzsi2>
   101fc:	10800804 	addi	r2,r2,32
   10200:	10fffe04 	addi	r3,r2,-8
   10204:	010007c4 	movi	r4,31
   10208:	20ff810e 	bge	r4,r3,10010 <__alt_mem_Flash_flash_data+0xf4010010>
   1020c:	14fff604 	addi	r19,r2,-40
   10210:	8ce6983a 	sll	r19,r17,r19
   10214:	0023883a 	mov	r17,zero
   10218:	1c3f840e 	bge	r3,r16,1002c <__alt_mem_Flash_flash_data+0xf401002c>
   1021c:	017fe034 	movhi	r5,65408
   10220:	297fffc4 	addi	r5,r5,-1
   10224:	80e1c83a 	sub	r16,r16,r3
   10228:	994a703a 	and	r5,r19,r5
   1022c:	003f3006 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10230:	0009883a 	mov	r4,zero
   10234:	0005883a 	mov	r2,zero
   10238:	003f4506 	br	ff50 <__alt_mem_Flash_flash_data+0xf400ff50>
   1023c:	418cb03a 	or	r6,r8,r6
   10240:	300cc03a 	cmpne	r6,r6,zero
   10244:	0007883a 	mov	r3,zero
   10248:	003f6106 	br	ffd0 <__alt_mem_Flash_flash_data+0xf400ffd0>
   1024c:	2000921e 	bne	r4,zero,10498 <__adddf3+0x624>
   10250:	80800044 	addi	r2,r16,1
   10254:	11c1ffcc 	andi	r7,r2,2047
   10258:	01000044 	movi	r4,1
   1025c:	21c0610e 	bge	r4,r7,103e4 <__adddf3+0x570>
   10260:	0101ffc4 	movi	r4,2047
   10264:	1100a326 	beq	r2,r4,104f4 <__adddf3+0x680>
   10268:	344d883a 	add	r6,r6,r17
   1026c:	3463803a 	cmpltu	r17,r6,r17
   10270:	414b883a 	add	r5,r8,r5
   10274:	2c4b883a 	add	r5,r5,r17
   10278:	282297fa 	slli	r17,r5,31
   1027c:	300cd07a 	srli	r6,r6,1
   10280:	280ad07a 	srli	r5,r5,1
   10284:	1021883a 	mov	r16,r2
   10288:	89a2b03a 	or	r17,r17,r6
   1028c:	003f1806 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10290:	0081ffc4 	movi	r2,2047
   10294:	80bf411e 	bne	r16,r2,ff9c <__alt_mem_Flash_flash_data+0xf400ff9c>
   10298:	003f1506 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   1029c:	80bff844 	addi	r2,r16,-31
   102a0:	00c00804 	movi	r3,32
   102a4:	9884d83a 	srl	r2,r19,r2
   102a8:	28c04a26 	beq	r5,r3,103d4 <__adddf3+0x560>
   102ac:	00c00fc4 	movi	r3,63
   102b0:	1c21c83a 	sub	r16,r3,r16
   102b4:	9c26983a 	sll	r19,r19,r16
   102b8:	9c62b03a 	or	r17,r19,r17
   102bc:	8822c03a 	cmpne	r17,r17,zero
   102c0:	88a2b03a 	or	r17,r17,r2
   102c4:	000b883a 	mov	r5,zero
   102c8:	0021883a 	mov	r16,zero
   102cc:	003fb406 	br	101a0 <__alt_mem_Flash_flash_data+0xf40101a0>
   102d0:	18bff804 	addi	r2,r3,-32
   102d4:	01000804 	movi	r4,32
   102d8:	4084d83a 	srl	r2,r8,r2
   102dc:	19003f26 	beq	r3,r4,103dc <__adddf3+0x568>
   102e0:	01001004 	movi	r4,64
   102e4:	20c7c83a 	sub	r3,r4,r3
   102e8:	40d0983a 	sll	r8,r8,r3
   102ec:	418cb03a 	or	r6,r8,r6
   102f0:	300cc03a 	cmpne	r6,r6,zero
   102f4:	308cb03a 	or	r6,r6,r2
   102f8:	0007883a 	mov	r3,zero
   102fc:	003f3406 	br	ffd0 <__alt_mem_Flash_flash_data+0xf400ffd0>
   10300:	80002326 	beq	r16,zero,10390 <__adddf3+0x51c>
   10304:	0101ffc4 	movi	r4,2047
   10308:	11005e26 	beq	r2,r4,10484 <__adddf3+0x610>
   1030c:	00c7c83a 	sub	r3,zero,r3
   10310:	29402034 	orhi	r5,r5,128
   10314:	01000e04 	movi	r4,56
   10318:	20c07216 	blt	r4,r3,104e4 <__adddf3+0x670>
   1031c:	010007c4 	movi	r4,31
   10320:	20c0ce16 	blt	r4,r3,1065c <__adddf3+0x7e8>
   10324:	01000804 	movi	r4,32
   10328:	20c9c83a 	sub	r4,r4,r3
   1032c:	2914983a 	sll	r10,r5,r4
   10330:	88d2d83a 	srl	r9,r17,r3
   10334:	8908983a 	sll	r4,r17,r4
   10338:	28c6d83a 	srl	r3,r5,r3
   1033c:	5262b03a 	or	r17,r10,r9
   10340:	2008c03a 	cmpne	r4,r4,zero
   10344:	8922b03a 	or	r17,r17,r4
   10348:	3463c83a 	sub	r17,r6,r17
   1034c:	40c7c83a 	sub	r3,r8,r3
   10350:	344d803a 	cmpltu	r6,r6,r17
   10354:	198bc83a 	sub	r5,r3,r6
   10358:	1021883a 	mov	r16,r2
   1035c:	3825883a 	mov	r18,r7
   10360:	003f2006 	br	ffe4 <__alt_mem_Flash_flash_data+0xf400ffe4>
   10364:	9886b03a 	or	r3,r19,r2
   10368:	1800141e 	bne	r3,zero,103bc <__adddf3+0x548>
   1036c:	0007883a 	mov	r3,zero
   10370:	000b883a 	mov	r5,zero
   10374:	0023883a 	mov	r17,zero
   10378:	0021883a 	mov	r16,zero
   1037c:	003f3c06 	br	10070 <__alt_mem_Flash_flash_data+0xf4010070>
   10380:	418cb03a 	or	r6,r8,r6
   10384:	300cc03a 	cmpne	r6,r6,zero
   10388:	0011883a 	mov	r8,zero
   1038c:	003f5606 	br	100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   10390:	2c48b03a 	or	r4,r5,r17
   10394:	20003b26 	beq	r4,zero,10484 <__adddf3+0x610>
   10398:	00c6303a 	nor	r3,zero,r3
   1039c:	1800371e 	bne	r3,zero,1047c <__adddf3+0x608>
   103a0:	3463c83a 	sub	r17,r6,r17
   103a4:	414bc83a 	sub	r5,r8,r5
   103a8:	344d803a 	cmpltu	r6,r6,r17
   103ac:	298bc83a 	sub	r5,r5,r6
   103b0:	1021883a 	mov	r16,r2
   103b4:	3825883a 	mov	r18,r7
   103b8:	003f0a06 	br	ffe4 <__alt_mem_Flash_flash_data+0xf400ffe4>
   103bc:	1023883a 	mov	r17,r2
   103c0:	003f0d06 	br	fff8 <__alt_mem_Flash_flash_data+0xf400fff8>
   103c4:	0007883a 	mov	r3,zero
   103c8:	000b883a 	mov	r5,zero
   103cc:	0023883a 	mov	r17,zero
   103d0:	003f2706 	br	10070 <__alt_mem_Flash_flash_data+0xf4010070>
   103d4:	0027883a 	mov	r19,zero
   103d8:	003fb706 	br	102b8 <__alt_mem_Flash_flash_data+0xf40102b8>
   103dc:	0011883a 	mov	r8,zero
   103e0:	003fc206 	br	102ec <__alt_mem_Flash_flash_data+0xf40102ec>
   103e4:	2c44b03a 	or	r2,r5,r17
   103e8:	8000871e 	bne	r16,zero,10608 <__adddf3+0x794>
   103ec:	1000b126 	beq	r2,zero,106b4 <__adddf3+0x840>
   103f0:	4184b03a 	or	r2,r8,r6
   103f4:	103ebe26 	beq	r2,zero,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   103f8:	3445883a 	add	r2,r6,r17
   103fc:	1463803a 	cmpltu	r17,r2,r17
   10400:	414b883a 	add	r5,r8,r5
   10404:	2c4b883a 	add	r5,r5,r17
   10408:	28c0202c 	andhi	r3,r5,128
   1040c:	1023883a 	mov	r17,r2
   10410:	183f6326 	beq	r3,zero,101a0 <__alt_mem_Flash_flash_data+0xf40101a0>
   10414:	00bfe034 	movhi	r2,65408
   10418:	10bfffc4 	addi	r2,r2,-1
   1041c:	2021883a 	mov	r16,r4
   10420:	288a703a 	and	r5,r5,r2
   10424:	003eb206 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10428:	2c44b03a 	or	r2,r5,r17
   1042c:	8000251e 	bne	r16,zero,104c4 <__adddf3+0x650>
   10430:	10004b1e 	bne	r2,zero,10560 <__adddf3+0x6ec>
   10434:	4184b03a 	or	r2,r8,r6
   10438:	103fe226 	beq	r2,zero,103c4 <__alt_mem_Flash_flash_data+0xf40103c4>
   1043c:	400b883a 	mov	r5,r8
   10440:	3023883a 	mov	r17,r6
   10444:	3825883a 	mov	r18,r7
   10448:	003ea906 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   1044c:	20bff804 	addi	r2,r4,-32
   10450:	01c00804 	movi	r7,32
   10454:	4084d83a 	srl	r2,r8,r2
   10458:	21c07e26 	beq	r4,r7,10654 <__adddf3+0x7e0>
   1045c:	01c01004 	movi	r7,64
   10460:	3909c83a 	sub	r4,r7,r4
   10464:	4110983a 	sll	r8,r8,r4
   10468:	418cb03a 	or	r6,r8,r6
   1046c:	300cc03a 	cmpne	r6,r6,zero
   10470:	308cb03a 	or	r6,r6,r2
   10474:	0011883a 	mov	r8,zero
   10478:	003f1b06 	br	100e8 <__alt_mem_Flash_flash_data+0xf40100e8>
   1047c:	0101ffc4 	movi	r4,2047
   10480:	113fa41e 	bne	r2,r4,10314 <__alt_mem_Flash_flash_data+0xf4010314>
   10484:	400b883a 	mov	r5,r8
   10488:	3023883a 	mov	r17,r6
   1048c:	1021883a 	mov	r16,r2
   10490:	3825883a 	mov	r18,r7
   10494:	003e9606 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10498:	80001a1e 	bne	r16,zero,10504 <__adddf3+0x690>
   1049c:	2c4eb03a 	or	r7,r5,r17
   104a0:	38005526 	beq	r7,zero,105f8 <__adddf3+0x784>
   104a4:	0108303a 	nor	r4,zero,r4
   104a8:	2000511e 	bne	r4,zero,105f0 <__adddf3+0x77c>
   104ac:	89a3883a 	add	r17,r17,r6
   104b0:	414b883a 	add	r5,r8,r5
   104b4:	898d803a 	cmpltu	r6,r17,r6
   104b8:	298b883a 	add	r5,r5,r6
   104bc:	1021883a 	mov	r16,r2
   104c0:	003f0e06 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   104c4:	1000341e 	bne	r2,zero,10598 <__adddf3+0x724>
   104c8:	4184b03a 	or	r2,r8,r6
   104cc:	10006f26 	beq	r2,zero,1068c <__adddf3+0x818>
   104d0:	400b883a 	mov	r5,r8
   104d4:	3023883a 	mov	r17,r6
   104d8:	3825883a 	mov	r18,r7
   104dc:	0401ffc4 	movi	r16,2047
   104e0:	003e8306 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   104e4:	2c62b03a 	or	r17,r5,r17
   104e8:	8822c03a 	cmpne	r17,r17,zero
   104ec:	0007883a 	mov	r3,zero
   104f0:	003f9506 	br	10348 <__alt_mem_Flash_flash_data+0xf4010348>
   104f4:	1021883a 	mov	r16,r2
   104f8:	000b883a 	mov	r5,zero
   104fc:	0023883a 	mov	r17,zero
   10500:	003edb06 	br	10070 <__alt_mem_Flash_flash_data+0xf4010070>
   10504:	01c1ffc4 	movi	r7,2047
   10508:	11c03b26 	beq	r2,r7,105f8 <__adddf3+0x784>
   1050c:	0109c83a 	sub	r4,zero,r4
   10510:	29402034 	orhi	r5,r5,128
   10514:	01c00e04 	movi	r7,56
   10518:	39006216 	blt	r7,r4,106a4 <__adddf3+0x830>
   1051c:	01c007c4 	movi	r7,31
   10520:	39006b16 	blt	r7,r4,106d0 <__adddf3+0x85c>
   10524:	01c00804 	movi	r7,32
   10528:	390fc83a 	sub	r7,r7,r4
   1052c:	29d4983a 	sll	r10,r5,r7
   10530:	8912d83a 	srl	r9,r17,r4
   10534:	89ce983a 	sll	r7,r17,r7
   10538:	2908d83a 	srl	r4,r5,r4
   1053c:	5262b03a 	or	r17,r10,r9
   10540:	380ac03a 	cmpne	r5,r7,zero
   10544:	8962b03a 	or	r17,r17,r5
   10548:	89a3883a 	add	r17,r17,r6
   1054c:	2211883a 	add	r8,r4,r8
   10550:	898d803a 	cmpltu	r6,r17,r6
   10554:	418b883a 	add	r5,r8,r6
   10558:	1021883a 	mov	r16,r2
   1055c:	003ee706 	br	100fc <__alt_mem_Flash_flash_data+0xf40100fc>
   10560:	4184b03a 	or	r2,r8,r6
   10564:	103e6226 	beq	r2,zero,fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10568:	8987c83a 	sub	r3,r17,r6
   1056c:	88c9803a 	cmpltu	r4,r17,r3
   10570:	2a05c83a 	sub	r2,r5,r8
   10574:	1105c83a 	sub	r2,r2,r4
   10578:	1100202c 	andhi	r4,r2,128
   1057c:	203f0426 	beq	r4,zero,10190 <__alt_mem_Flash_flash_data+0xf4010190>
   10580:	3463c83a 	sub	r17,r6,r17
   10584:	414bc83a 	sub	r5,r8,r5
   10588:	344d803a 	cmpltu	r6,r6,r17
   1058c:	298bc83a 	sub	r5,r5,r6
   10590:	3825883a 	mov	r18,r7
   10594:	003e5606 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10598:	4184b03a 	or	r2,r8,r6
   1059c:	10002b26 	beq	r2,zero,1064c <__adddf3+0x7d8>
   105a0:	2804d0fa 	srli	r2,r5,3
   105a4:	8822d0fa 	srli	r17,r17,3
   105a8:	280a977a 	slli	r5,r5,29
   105ac:	10c0022c 	andhi	r3,r2,8
   105b0:	2c62b03a 	or	r17,r5,r17
   105b4:	18000826 	beq	r3,zero,105d8 <__adddf3+0x764>
   105b8:	4008d0fa 	srli	r4,r8,3
   105bc:	20c0022c 	andhi	r3,r4,8
   105c0:	1800051e 	bne	r3,zero,105d8 <__adddf3+0x764>
   105c4:	300cd0fa 	srli	r6,r6,3
   105c8:	4010977a 	slli	r8,r8,29
   105cc:	2005883a 	mov	r2,r4
   105d0:	3825883a 	mov	r18,r7
   105d4:	41a2b03a 	or	r17,r8,r6
   105d8:	880ad77a 	srli	r5,r17,29
   105dc:	100490fa 	slli	r2,r2,3
   105e0:	882290fa 	slli	r17,r17,3
   105e4:	0401ffc4 	movi	r16,2047
   105e8:	288ab03a 	or	r5,r5,r2
   105ec:	003e4006 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   105f0:	01c1ffc4 	movi	r7,2047
   105f4:	11ffc71e 	bne	r2,r7,10514 <__alt_mem_Flash_flash_data+0xf4010514>
   105f8:	400b883a 	mov	r5,r8
   105fc:	3023883a 	mov	r17,r6
   10600:	1021883a 	mov	r16,r2
   10604:	003e3a06 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10608:	10002d26 	beq	r2,zero,106c0 <__adddf3+0x84c>
   1060c:	4184b03a 	or	r2,r8,r6
   10610:	10000e26 	beq	r2,zero,1064c <__adddf3+0x7d8>
   10614:	2804d0fa 	srli	r2,r5,3
   10618:	8822d0fa 	srli	r17,r17,3
   1061c:	280a977a 	slli	r5,r5,29
   10620:	10c0022c 	andhi	r3,r2,8
   10624:	2c62b03a 	or	r17,r5,r17
   10628:	183feb26 	beq	r3,zero,105d8 <__alt_mem_Flash_flash_data+0xf40105d8>
   1062c:	4008d0fa 	srli	r4,r8,3
   10630:	20c0022c 	andhi	r3,r4,8
   10634:	183fe81e 	bne	r3,zero,105d8 <__alt_mem_Flash_flash_data+0xf40105d8>
   10638:	300cd0fa 	srli	r6,r6,3
   1063c:	4010977a 	slli	r8,r8,29
   10640:	2005883a 	mov	r2,r4
   10644:	41a2b03a 	or	r17,r8,r6
   10648:	003fe306 	br	105d8 <__alt_mem_Flash_flash_data+0xf40105d8>
   1064c:	0401ffc4 	movi	r16,2047
   10650:	003e2706 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   10654:	0011883a 	mov	r8,zero
   10658:	003f8306 	br	10468 <__alt_mem_Flash_flash_data+0xf4010468>
   1065c:	193ff804 	addi	r4,r3,-32
   10660:	02400804 	movi	r9,32
   10664:	2908d83a 	srl	r4,r5,r4
   10668:	1a402526 	beq	r3,r9,10700 <__adddf3+0x88c>
   1066c:	02401004 	movi	r9,64
   10670:	48c7c83a 	sub	r3,r9,r3
   10674:	28ca983a 	sll	r5,r5,r3
   10678:	2c62b03a 	or	r17,r5,r17
   1067c:	8822c03a 	cmpne	r17,r17,zero
   10680:	8922b03a 	or	r17,r17,r4
   10684:	0007883a 	mov	r3,zero
   10688:	003f2f06 	br	10348 <__alt_mem_Flash_flash_data+0xf4010348>
   1068c:	01402034 	movhi	r5,128
   10690:	0007883a 	mov	r3,zero
   10694:	297fffc4 	addi	r5,r5,-1
   10698:	047ffe04 	movi	r17,-8
   1069c:	0401ffc4 	movi	r16,2047
   106a0:	003e7306 	br	10070 <__alt_mem_Flash_flash_data+0xf4010070>
   106a4:	2c62b03a 	or	r17,r5,r17
   106a8:	8822c03a 	cmpne	r17,r17,zero
   106ac:	0009883a 	mov	r4,zero
   106b0:	003fa506 	br	10548 <__alt_mem_Flash_flash_data+0xf4010548>
   106b4:	400b883a 	mov	r5,r8
   106b8:	3023883a 	mov	r17,r6
   106bc:	003e0c06 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   106c0:	400b883a 	mov	r5,r8
   106c4:	3023883a 	mov	r17,r6
   106c8:	0401ffc4 	movi	r16,2047
   106cc:	003e0806 	br	fef0 <__alt_mem_Flash_flash_data+0xf400fef0>
   106d0:	21fff804 	addi	r7,r4,-32
   106d4:	02400804 	movi	r9,32
   106d8:	29ced83a 	srl	r7,r5,r7
   106dc:	22400a26 	beq	r4,r9,10708 <__adddf3+0x894>
   106e0:	02401004 	movi	r9,64
   106e4:	4909c83a 	sub	r4,r9,r4
   106e8:	290a983a 	sll	r5,r5,r4
   106ec:	2c62b03a 	or	r17,r5,r17
   106f0:	8822c03a 	cmpne	r17,r17,zero
   106f4:	89e2b03a 	or	r17,r17,r7
   106f8:	0009883a 	mov	r4,zero
   106fc:	003f9206 	br	10548 <__alt_mem_Flash_flash_data+0xf4010548>
   10700:	000b883a 	mov	r5,zero
   10704:	003fdc06 	br	10678 <__alt_mem_Flash_flash_data+0xf4010678>
   10708:	000b883a 	mov	r5,zero
   1070c:	003ff706 	br	106ec <__alt_mem_Flash_flash_data+0xf40106ec>

00010710 <__divdf3>:
   10710:	defff204 	addi	sp,sp,-56
   10714:	dd000815 	stw	r20,32(sp)
   10718:	2828d53a 	srli	r20,r5,20
   1071c:	dd800a15 	stw	r22,40(sp)
   10720:	282cd7fa 	srli	r22,r5,31
   10724:	dc000415 	stw	r16,16(sp)
   10728:	04000434 	movhi	r16,16
   1072c:	df000c15 	stw	fp,48(sp)
   10730:	dcc00715 	stw	r19,28(sp)
   10734:	dc800615 	stw	r18,24(sp)
   10738:	dc400515 	stw	r17,20(sp)
   1073c:	843fffc4 	addi	r16,r16,-1
   10740:	dfc00d15 	stw	ra,52(sp)
   10744:	ddc00b15 	stw	r23,44(sp)
   10748:	dd400915 	stw	r21,36(sp)
   1074c:	a501ffcc 	andi	r20,r20,2047
   10750:	2025883a 	mov	r18,r4
   10754:	2027883a 	mov	r19,r4
   10758:	2c22703a 	and	r17,r5,r16
   1075c:	b7003fcc 	andi	fp,r22,255
   10760:	a0005e26 	beq	r20,zero,108dc <__divdf3+0x1cc>
   10764:	0081ffc4 	movi	r2,2047
   10768:	a0803526 	beq	r20,r2,10840 <__divdf3+0x130>
   1076c:	8c000434 	orhi	r16,r17,16
   10770:	2004d77a 	srli	r2,r4,29
   10774:	802090fa 	slli	r16,r16,3
   10778:	202690fa 	slli	r19,r4,3
   1077c:	a53f0044 	addi	r20,r20,-1023
   10780:	80a2b03a 	or	r17,r16,r2
   10784:	0025883a 	mov	r18,zero
   10788:	0011883a 	mov	r8,zero
   1078c:	380ad53a 	srli	r5,r7,20
   10790:	382ed7fa 	srli	r23,r7,31
   10794:	04000434 	movhi	r16,16
   10798:	843fffc4 	addi	r16,r16,-1
   1079c:	2941ffcc 	andi	r5,r5,2047
   107a0:	302b883a 	mov	r21,r6
   107a4:	3c20703a 	and	r16,r7,r16
   107a8:	ba403fcc 	andi	r9,r23,255
   107ac:	28006726 	beq	r5,zero,1094c <__divdf3+0x23c>
   107b0:	0081ffc4 	movi	r2,2047
   107b4:	28805f26 	beq	r5,r2,10934 <__divdf3+0x224>
   107b8:	84000434 	orhi	r16,r16,16
   107bc:	3004d77a 	srli	r2,r6,29
   107c0:	802090fa 	slli	r16,r16,3
   107c4:	302a90fa 	slli	r21,r6,3
   107c8:	297f0044 	addi	r5,r5,-1023
   107cc:	80a0b03a 	or	r16,r16,r2
   107d0:	000f883a 	mov	r7,zero
   107d4:	3c86b03a 	or	r3,r7,r18
   107d8:	180690ba 	slli	r3,r3,2
   107dc:	00800074 	movhi	r2,1
   107e0:	10820004 	addi	r2,r2,2048
   107e4:	1887883a 	add	r3,r3,r2
   107e8:	18c00017 	ldw	r3,0(r3)
   107ec:	b5c8f03a 	xor	r4,r22,r23
   107f0:	200d883a 	mov	r6,r4
   107f4:	24803fcc 	andi	r18,r4,255
   107f8:	a169c83a 	sub	r20,r20,r5
   107fc:	1800683a 	jmp	r3
   10800:	00010a48 	cmpgei	zero,zero,1065
   10804:	00010878 	rdprs	zero,zero,1057
   10808:	00010a0c 	andi	zero,zero,1064
   1080c:	0001085c 	xori	zero,zero,1057
   10810:	00010a0c 	andi	zero,zero,1064
   10814:	000109e0 	cmpeqi	zero,zero,1063
   10818:	00010a0c 	andi	zero,zero,1064
   1081c:	0001085c 	xori	zero,zero,1057
   10820:	00010878 	rdprs	zero,zero,1057
   10824:	00010878 	rdprs	zero,zero,1057
   10828:	000109e0 	cmpeqi	zero,zero,1063
   1082c:	0001085c 	xori	zero,zero,1057
   10830:	0001086c 	andhi	zero,zero,1057
   10834:	0001086c 	andhi	zero,zero,1057
   10838:	0001086c 	andhi	zero,zero,1057
   1083c:	00010a1c 	xori	zero,zero,1064
   10840:	8904b03a 	or	r2,r17,r4
   10844:	1000631e 	bne	r2,zero,109d4 <__divdf3+0x2c4>
   10848:	04800204 	movi	r18,8
   1084c:	0023883a 	mov	r17,zero
   10850:	0027883a 	mov	r19,zero
   10854:	02000084 	movi	r8,2
   10858:	003fcc06 	br	1078c <__alt_mem_Flash_flash_data+0xf401078c>
   1085c:	8023883a 	mov	r17,r16
   10860:	a827883a 	mov	r19,r21
   10864:	4839883a 	mov	fp,r9
   10868:	3811883a 	mov	r8,r7
   1086c:	00800084 	movi	r2,2
   10870:	40812a1e 	bne	r8,r2,10d1c <__divdf3+0x60c>
   10874:	e025883a 	mov	r18,fp
   10878:	9180004c 	andi	r6,r18,1
   1087c:	0101ffc4 	movi	r4,2047
   10880:	000b883a 	mov	r5,zero
   10884:	0027883a 	mov	r19,zero
   10888:	2008953a 	slli	r4,r4,20
   1088c:	30c03fcc 	andi	r3,r6,255
   10890:	04000434 	movhi	r16,16
   10894:	180697fa 	slli	r3,r3,31
   10898:	843fffc4 	addi	r16,r16,-1
   1089c:	2c20703a 	and	r16,r5,r16
   108a0:	8120b03a 	or	r16,r16,r4
   108a4:	80c6b03a 	or	r3,r16,r3
   108a8:	9805883a 	mov	r2,r19
   108ac:	dfc00d17 	ldw	ra,52(sp)
   108b0:	df000c17 	ldw	fp,48(sp)
   108b4:	ddc00b17 	ldw	r23,44(sp)
   108b8:	dd800a17 	ldw	r22,40(sp)
   108bc:	dd400917 	ldw	r21,36(sp)
   108c0:	dd000817 	ldw	r20,32(sp)
   108c4:	dcc00717 	ldw	r19,28(sp)
   108c8:	dc800617 	ldw	r18,24(sp)
   108cc:	dc400517 	ldw	r17,20(sp)
   108d0:	dc000417 	ldw	r16,16(sp)
   108d4:	dec00e04 	addi	sp,sp,56
   108d8:	f800283a 	ret
   108dc:	8904b03a 	or	r2,r17,r4
   108e0:	10003726 	beq	r2,zero,109c0 <__divdf3+0x2b0>
   108e4:	88011c26 	beq	r17,zero,10d58 <__divdf3+0x648>
   108e8:	8809883a 	mov	r4,r17
   108ec:	d9800315 	stw	r6,12(sp)
   108f0:	d9c00115 	stw	r7,4(sp)
   108f4:	00124100 	call	12410 <__clzsi2>
   108f8:	d9800317 	ldw	r6,12(sp)
   108fc:	d9c00117 	ldw	r7,4(sp)
   10900:	1007883a 	mov	r3,r2
   10904:	01000a04 	movi	r4,40
   10908:	1cfffe04 	addi	r19,r3,-8
   1090c:	20c9c83a 	sub	r4,r4,r3
   10910:	8cca983a 	sll	r5,r17,r19
   10914:	9108d83a 	srl	r4,r18,r4
   10918:	94e6983a 	sll	r19,r18,r19
   1091c:	2162b03a 	or	r17,r4,r5
   10920:	053f0344 	movi	r20,-1011
   10924:	a0e9c83a 	sub	r20,r20,r3
   10928:	0025883a 	mov	r18,zero
   1092c:	0011883a 	mov	r8,zero
   10930:	003f9606 	br	1078c <__alt_mem_Flash_flash_data+0xf401078c>
   10934:	8184b03a 	or	r2,r16,r6
   10938:	10001f1e 	bne	r2,zero,109b8 <__divdf3+0x2a8>
   1093c:	0021883a 	mov	r16,zero
   10940:	002b883a 	mov	r21,zero
   10944:	01c00084 	movi	r7,2
   10948:	003fa206 	br	107d4 <__alt_mem_Flash_flash_data+0xf40107d4>
   1094c:	8184b03a 	or	r2,r16,r6
   10950:	10001526 	beq	r2,zero,109a8 <__divdf3+0x298>
   10954:	80010c26 	beq	r16,zero,10d88 <__divdf3+0x678>
   10958:	8009883a 	mov	r4,r16
   1095c:	d9800315 	stw	r6,12(sp)
   10960:	da000215 	stw	r8,8(sp)
   10964:	da400015 	stw	r9,0(sp)
   10968:	00124100 	call	12410 <__clzsi2>
   1096c:	d9800317 	ldw	r6,12(sp)
   10970:	da000217 	ldw	r8,8(sp)
   10974:	da400017 	ldw	r9,0(sp)
   10978:	1007883a 	mov	r3,r2
   1097c:	01000a04 	movi	r4,40
   10980:	1d7ffe04 	addi	r21,r3,-8
   10984:	20c9c83a 	sub	r4,r4,r3
   10988:	8560983a 	sll	r16,r16,r21
   1098c:	3108d83a 	srl	r4,r6,r4
   10990:	356a983a 	sll	r21,r6,r21
   10994:	2420b03a 	or	r16,r4,r16
   10998:	017f0344 	movi	r5,-1011
   1099c:	28cbc83a 	sub	r5,r5,r3
   109a0:	000f883a 	mov	r7,zero
   109a4:	003f8b06 	br	107d4 <__alt_mem_Flash_flash_data+0xf40107d4>
   109a8:	0021883a 	mov	r16,zero
   109ac:	002b883a 	mov	r21,zero
   109b0:	01c00044 	movi	r7,1
   109b4:	003f8706 	br	107d4 <__alt_mem_Flash_flash_data+0xf40107d4>
   109b8:	01c000c4 	movi	r7,3
   109bc:	003f8506 	br	107d4 <__alt_mem_Flash_flash_data+0xf40107d4>
   109c0:	04800104 	movi	r18,4
   109c4:	0023883a 	mov	r17,zero
   109c8:	0027883a 	mov	r19,zero
   109cc:	02000044 	movi	r8,1
   109d0:	003f6e06 	br	1078c <__alt_mem_Flash_flash_data+0xf401078c>
   109d4:	04800304 	movi	r18,12
   109d8:	020000c4 	movi	r8,3
   109dc:	003f6b06 	br	1078c <__alt_mem_Flash_flash_data+0xf401078c>
   109e0:	01400434 	movhi	r5,16
   109e4:	000d883a 	mov	r6,zero
   109e8:	297fffc4 	addi	r5,r5,-1
   109ec:	04ffffc4 	movi	r19,-1
   109f0:	0101ffc4 	movi	r4,2047
   109f4:	003fa406 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   109f8:	043f0084 	movi	r16,-1022
   109fc:	8521c83a 	sub	r16,r16,r20
   10a00:	00800e04 	movi	r2,56
   10a04:	1401200e 	bge	r2,r16,10e88 <__divdf3+0x778>
   10a08:	9180004c 	andi	r6,r18,1
   10a0c:	0009883a 	mov	r4,zero
   10a10:	000b883a 	mov	r5,zero
   10a14:	0027883a 	mov	r19,zero
   10a18:	003f9b06 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   10a1c:	8880022c 	andhi	r2,r17,8
   10a20:	1000c726 	beq	r2,zero,10d40 <__divdf3+0x630>
   10a24:	8080022c 	andhi	r2,r16,8
   10a28:	1000c51e 	bne	r2,zero,10d40 <__divdf3+0x630>
   10a2c:	00800434 	movhi	r2,16
   10a30:	81400234 	orhi	r5,r16,8
   10a34:	10bfffc4 	addi	r2,r2,-1
   10a38:	b80d883a 	mov	r6,r23
   10a3c:	288a703a 	and	r5,r5,r2
   10a40:	a827883a 	mov	r19,r21
   10a44:	003fea06 	br	109f0 <__alt_mem_Flash_flash_data+0xf40109f0>
   10a48:	8440ea36 	bltu	r16,r17,10df4 <__divdf3+0x6e4>
   10a4c:	8c00e826 	beq	r17,r16,10df0 <__divdf3+0x6e0>
   10a50:	a53fffc4 	addi	r20,r20,-1
   10a54:	882d883a 	mov	r22,r17
   10a58:	000d883a 	mov	r6,zero
   10a5c:	a804d63a 	srli	r2,r21,24
   10a60:	8020923a 	slli	r16,r16,8
   10a64:	b009883a 	mov	r4,r22
   10a68:	d9800315 	stw	r6,12(sp)
   10a6c:	1420b03a 	or	r16,r2,r16
   10a70:	802ed43a 	srli	r23,r16,16
   10a74:	873fffcc 	andi	fp,r16,65535
   10a78:	a82a923a 	slli	r21,r21,8
   10a7c:	b80b883a 	mov	r5,r23
   10a80:	000fe640 	call	fe64 <__udivsi3>
   10a84:	b009883a 	mov	r4,r22
   10a88:	b80b883a 	mov	r5,r23
   10a8c:	1023883a 	mov	r17,r2
   10a90:	000fe6c0 	call	fe6c <__umodsi3>
   10a94:	1004943a 	slli	r2,r2,16
   10a98:	9808d43a 	srli	r4,r19,16
   10a9c:	8f2d383a 	mul	r22,r17,fp
   10aa0:	d9800317 	ldw	r6,12(sp)
   10aa4:	1106b03a 	or	r3,r2,r4
   10aa8:	1d80062e 	bgeu	r3,r22,10ac4 <__divdf3+0x3b4>
   10aac:	1c07883a 	add	r3,r3,r16
   10ab0:	88bfffc4 	addi	r2,r17,-1
   10ab4:	1c00dc36 	bltu	r3,r16,10e28 <__divdf3+0x718>
   10ab8:	1d80db2e 	bgeu	r3,r22,10e28 <__divdf3+0x718>
   10abc:	8c7fff84 	addi	r17,r17,-2
   10ac0:	1c07883a 	add	r3,r3,r16
   10ac4:	1dadc83a 	sub	r22,r3,r22
   10ac8:	b009883a 	mov	r4,r22
   10acc:	b80b883a 	mov	r5,r23
   10ad0:	d9800315 	stw	r6,12(sp)
   10ad4:	000fe640 	call	fe64 <__udivsi3>
   10ad8:	b009883a 	mov	r4,r22
   10adc:	b80b883a 	mov	r5,r23
   10ae0:	d8800015 	stw	r2,0(sp)
   10ae4:	000fe6c0 	call	fe6c <__umodsi3>
   10ae8:	da400017 	ldw	r9,0(sp)
   10aec:	1004943a 	slli	r2,r2,16
   10af0:	9cffffcc 	andi	r19,r19,65535
   10af4:	4f07383a 	mul	r3,r9,fp
   10af8:	14c8b03a 	or	r4,r2,r19
   10afc:	d9800317 	ldw	r6,12(sp)
   10b00:	20c0062e 	bgeu	r4,r3,10b1c <__divdf3+0x40c>
   10b04:	2409883a 	add	r4,r4,r16
   10b08:	48bfffc4 	addi	r2,r9,-1
   10b0c:	2400c436 	bltu	r4,r16,10e20 <__divdf3+0x710>
   10b10:	20c0c32e 	bgeu	r4,r3,10e20 <__divdf3+0x710>
   10b14:	4a7fff84 	addi	r9,r9,-2
   10b18:	2409883a 	add	r4,r4,r16
   10b1c:	8822943a 	slli	r17,r17,16
   10b20:	a80ed43a 	srli	r7,r21,16
   10b24:	aa3fffcc 	andi	r8,r21,65535
   10b28:	4c62b03a 	or	r17,r9,r17
   10b2c:	8816d43a 	srli	r11,r17,16
   10b30:	897fffcc 	andi	r5,r17,65535
   10b34:	2a15383a 	mul	r10,r5,r8
   10b38:	5a19383a 	mul	r12,r11,r8
   10b3c:	29cb383a 	mul	r5,r5,r7
   10b40:	5012d43a 	srli	r9,r10,16
   10b44:	20c5c83a 	sub	r2,r4,r3
   10b48:	614b883a 	add	r5,r12,r5
   10b4c:	2a4b883a 	add	r5,r5,r9
   10b50:	59c7383a 	mul	r3,r11,r7
   10b54:	2b00022e 	bgeu	r5,r12,10b60 <__divdf3+0x450>
   10b58:	01000074 	movhi	r4,1
   10b5c:	1907883a 	add	r3,r3,r4
   10b60:	2808d43a 	srli	r4,r5,16
   10b64:	280a943a 	slli	r5,r5,16
   10b68:	54ffffcc 	andi	r19,r10,65535
   10b6c:	1907883a 	add	r3,r3,r4
   10b70:	2ccb883a 	add	r5,r5,r19
   10b74:	10c09336 	bltu	r2,r3,10dc4 <__divdf3+0x6b4>
   10b78:	10c0ad26 	beq	r2,r3,10e30 <__divdf3+0x720>
   10b7c:	10c7c83a 	sub	r3,r2,r3
   10b80:	3167c83a 	sub	r19,r6,r5
   10b84:	34ed803a 	cmpltu	r22,r6,r19
   10b88:	1dadc83a 	sub	r22,r3,r22
   10b8c:	b400b226 	beq	r22,r16,10e58 <__divdf3+0x748>
   10b90:	b009883a 	mov	r4,r22
   10b94:	b80b883a 	mov	r5,r23
   10b98:	d9c00115 	stw	r7,4(sp)
   10b9c:	da000215 	stw	r8,8(sp)
   10ba0:	000fe640 	call	fe64 <__udivsi3>
   10ba4:	b009883a 	mov	r4,r22
   10ba8:	b80b883a 	mov	r5,r23
   10bac:	d8800315 	stw	r2,12(sp)
   10bb0:	000fe6c0 	call	fe6c <__umodsi3>
   10bb4:	d9800317 	ldw	r6,12(sp)
   10bb8:	1004943a 	slli	r2,r2,16
   10bbc:	9808d43a 	srli	r4,r19,16
   10bc0:	372d383a 	mul	r22,r6,fp
   10bc4:	d9c00117 	ldw	r7,4(sp)
   10bc8:	1106b03a 	or	r3,r2,r4
   10bcc:	da000217 	ldw	r8,8(sp)
   10bd0:	1d80062e 	bgeu	r3,r22,10bec <__divdf3+0x4dc>
   10bd4:	1c07883a 	add	r3,r3,r16
   10bd8:	30bfffc4 	addi	r2,r6,-1
   10bdc:	1c00a036 	bltu	r3,r16,10e60 <__divdf3+0x750>
   10be0:	1d809f2e 	bgeu	r3,r22,10e60 <__divdf3+0x750>
   10be4:	31bfff84 	addi	r6,r6,-2
   10be8:	1c07883a 	add	r3,r3,r16
   10bec:	1dadc83a 	sub	r22,r3,r22
   10bf0:	b009883a 	mov	r4,r22
   10bf4:	b80b883a 	mov	r5,r23
   10bf8:	d9800315 	stw	r6,12(sp)
   10bfc:	d9c00115 	stw	r7,4(sp)
   10c00:	da000215 	stw	r8,8(sp)
   10c04:	000fe640 	call	fe64 <__udivsi3>
   10c08:	b009883a 	mov	r4,r22
   10c0c:	b80b883a 	mov	r5,r23
   10c10:	d8800015 	stw	r2,0(sp)
   10c14:	000fe6c0 	call	fe6c <__umodsi3>
   10c18:	da400017 	ldw	r9,0(sp)
   10c1c:	1004943a 	slli	r2,r2,16
   10c20:	993fffcc 	andi	r4,r19,65535
   10c24:	4f39383a 	mul	fp,r9,fp
   10c28:	1106b03a 	or	r3,r2,r4
   10c2c:	d9800317 	ldw	r6,12(sp)
   10c30:	d9c00117 	ldw	r7,4(sp)
   10c34:	da000217 	ldw	r8,8(sp)
   10c38:	1f00062e 	bgeu	r3,fp,10c54 <__divdf3+0x544>
   10c3c:	1c07883a 	add	r3,r3,r16
   10c40:	48bfffc4 	addi	r2,r9,-1
   10c44:	1c008836 	bltu	r3,r16,10e68 <__divdf3+0x758>
   10c48:	1f00872e 	bgeu	r3,fp,10e68 <__divdf3+0x758>
   10c4c:	4a7fff84 	addi	r9,r9,-2
   10c50:	1c07883a 	add	r3,r3,r16
   10c54:	3008943a 	slli	r4,r6,16
   10c58:	1f07c83a 	sub	r3,r3,fp
   10c5c:	4926b03a 	or	r19,r9,r4
   10c60:	993fffcc 	andi	r4,r19,65535
   10c64:	980cd43a 	srli	r6,r19,16
   10c68:	220b383a 	mul	r5,r4,r8
   10c6c:	21c5383a 	mul	r2,r4,r7
   10c70:	3211383a 	mul	r8,r6,r8
   10c74:	2808d43a 	srli	r4,r5,16
   10c78:	31cf383a 	mul	r7,r6,r7
   10c7c:	4085883a 	add	r2,r8,r2
   10c80:	1105883a 	add	r2,r2,r4
   10c84:	1200022e 	bgeu	r2,r8,10c90 <__divdf3+0x580>
   10c88:	01000074 	movhi	r4,1
   10c8c:	390f883a 	add	r7,r7,r4
   10c90:	1008d43a 	srli	r4,r2,16
   10c94:	1004943a 	slli	r2,r2,16
   10c98:	297fffcc 	andi	r5,r5,65535
   10c9c:	390f883a 	add	r7,r7,r4
   10ca0:	1145883a 	add	r2,r2,r5
   10ca4:	19c06536 	bltu	r3,r7,10e3c <__divdf3+0x72c>
   10ca8:	19c09f26 	beq	r3,r7,10f28 <__divdf3+0x818>
   10cac:	9cc00054 	ori	r19,r19,1
   10cb0:	a100ffc4 	addi	r4,r20,1023
   10cb4:	013f500e 	bge	zero,r4,109f8 <__alt_mem_Flash_flash_data+0xf40109f8>
   10cb8:	988001cc 	andi	r2,r19,7
   10cbc:	10000726 	beq	r2,zero,10cdc <__divdf3+0x5cc>
   10cc0:	98c003cc 	andi	r3,r19,15
   10cc4:	00800104 	movi	r2,4
   10cc8:	18800426 	beq	r3,r2,10cdc <__divdf3+0x5cc>
   10ccc:	9885883a 	add	r2,r19,r2
   10cd0:	14e1803a 	cmpltu	r16,r2,r19
   10cd4:	8c23883a 	add	r17,r17,r16
   10cd8:	1027883a 	mov	r19,r2
   10cdc:	8880402c 	andhi	r2,r17,256
   10ce0:	10000426 	beq	r2,zero,10cf4 <__divdf3+0x5e4>
   10ce4:	00bfc034 	movhi	r2,65280
   10ce8:	10bfffc4 	addi	r2,r2,-1
   10cec:	a1010004 	addi	r4,r20,1024
   10cf0:	88a2703a 	and	r17,r17,r2
   10cf4:	0081ff84 	movi	r2,2046
   10cf8:	113edf16 	blt	r2,r4,10878 <__alt_mem_Flash_flash_data+0xf4010878>
   10cfc:	9826d0fa 	srli	r19,r19,3
   10d00:	8804977a 	slli	r2,r17,29
   10d04:	8820927a 	slli	r16,r17,9
   10d08:	2101ffcc 	andi	r4,r4,2047
   10d0c:	14e6b03a 	or	r19,r2,r19
   10d10:	800ad33a 	srli	r5,r16,12
   10d14:	9180004c 	andi	r6,r18,1
   10d18:	003edb06 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   10d1c:	008000c4 	movi	r2,3
   10d20:	4080a826 	beq	r8,r2,10fc4 <__divdf3+0x8b4>
   10d24:	00800044 	movi	r2,1
   10d28:	4080551e 	bne	r8,r2,10e80 <__divdf3+0x770>
   10d2c:	e00d883a 	mov	r6,fp
   10d30:	0009883a 	mov	r4,zero
   10d34:	000b883a 	mov	r5,zero
   10d38:	0027883a 	mov	r19,zero
   10d3c:	003ed206 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   10d40:	00800434 	movhi	r2,16
   10d44:	89400234 	orhi	r5,r17,8
   10d48:	10bfffc4 	addi	r2,r2,-1
   10d4c:	b00d883a 	mov	r6,r22
   10d50:	288a703a 	and	r5,r5,r2
   10d54:	003f2606 	br	109f0 <__alt_mem_Flash_flash_data+0xf40109f0>
   10d58:	d9800315 	stw	r6,12(sp)
   10d5c:	d9c00115 	stw	r7,4(sp)
   10d60:	00124100 	call	12410 <__clzsi2>
   10d64:	10c00804 	addi	r3,r2,32
   10d68:	010009c4 	movi	r4,39
   10d6c:	d9800317 	ldw	r6,12(sp)
   10d70:	d9c00117 	ldw	r7,4(sp)
   10d74:	20fee30e 	bge	r4,r3,10904 <__alt_mem_Flash_flash_data+0xf4010904>
   10d78:	117ffe04 	addi	r5,r2,-8
   10d7c:	9162983a 	sll	r17,r18,r5
   10d80:	0027883a 	mov	r19,zero
   10d84:	003ee606 	br	10920 <__alt_mem_Flash_flash_data+0xf4010920>
   10d88:	3009883a 	mov	r4,r6
   10d8c:	d9800315 	stw	r6,12(sp)
   10d90:	da000215 	stw	r8,8(sp)
   10d94:	da400015 	stw	r9,0(sp)
   10d98:	00124100 	call	12410 <__clzsi2>
   10d9c:	10c00804 	addi	r3,r2,32
   10da0:	010009c4 	movi	r4,39
   10da4:	d9800317 	ldw	r6,12(sp)
   10da8:	da000217 	ldw	r8,8(sp)
   10dac:	da400017 	ldw	r9,0(sp)
   10db0:	20fef20e 	bge	r4,r3,1097c <__alt_mem_Flash_flash_data+0xf401097c>
   10db4:	10bffe04 	addi	r2,r2,-8
   10db8:	a8a0983a 	sll	r16,r21,r2
   10dbc:	002b883a 	mov	r21,zero
   10dc0:	003ef506 	br	10998 <__alt_mem_Flash_flash_data+0xf4010998>
   10dc4:	354d883a 	add	r6,r6,r21
   10dc8:	3549803a 	cmpltu	r4,r6,r21
   10dcc:	2409883a 	add	r4,r4,r16
   10dd0:	2089883a 	add	r4,r4,r2
   10dd4:	88bfffc4 	addi	r2,r17,-1
   10dd8:	81000c2e 	bgeu	r16,r4,10e0c <__divdf3+0x6fc>
   10ddc:	20c04436 	bltu	r4,r3,10ef0 <__divdf3+0x7e0>
   10de0:	19006f26 	beq	r3,r4,10fa0 <__divdf3+0x890>
   10de4:	20c7c83a 	sub	r3,r4,r3
   10de8:	1023883a 	mov	r17,r2
   10dec:	003f6406 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10df0:	9d7f1736 	bltu	r19,r21,10a50 <__alt_mem_Flash_flash_data+0xf4010a50>
   10df4:	9806d07a 	srli	r3,r19,1
   10df8:	880497fa 	slli	r2,r17,31
   10dfc:	980c97fa 	slli	r6,r19,31
   10e00:	882cd07a 	srli	r22,r17,1
   10e04:	18a6b03a 	or	r19,r3,r2
   10e08:	003f1406 	br	10a5c <__alt_mem_Flash_flash_data+0xf4010a5c>
   10e0c:	243ff51e 	bne	r4,r16,10de4 <__alt_mem_Flash_flash_data+0xf4010de4>
   10e10:	357ff22e 	bgeu	r6,r21,10ddc <__alt_mem_Flash_flash_data+0xf4010ddc>
   10e14:	80c7c83a 	sub	r3,r16,r3
   10e18:	1023883a 	mov	r17,r2
   10e1c:	003f5806 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10e20:	1013883a 	mov	r9,r2
   10e24:	003f3d06 	br	10b1c <__alt_mem_Flash_flash_data+0xf4010b1c>
   10e28:	1023883a 	mov	r17,r2
   10e2c:	003f2506 	br	10ac4 <__alt_mem_Flash_flash_data+0xf4010ac4>
   10e30:	317fe436 	bltu	r6,r5,10dc4 <__alt_mem_Flash_flash_data+0xf4010dc4>
   10e34:	0007883a 	mov	r3,zero
   10e38:	003f5106 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10e3c:	1c07883a 	add	r3,r3,r16
   10e40:	993fffc4 	addi	r4,r19,-1
   10e44:	1c000a2e 	bgeu	r3,r16,10e70 <__divdf3+0x760>
   10e48:	2027883a 	mov	r19,r4
   10e4c:	19ff971e 	bne	r3,r7,10cac <__alt_mem_Flash_flash_data+0xf4010cac>
   10e50:	a8bf961e 	bne	r21,r2,10cac <__alt_mem_Flash_flash_data+0xf4010cac>
   10e54:	003f9606 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10e58:	04ffffc4 	movi	r19,-1
   10e5c:	003f9406 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10e60:	100d883a 	mov	r6,r2
   10e64:	003f6106 	br	10bec <__alt_mem_Flash_flash_data+0xf4010bec>
   10e68:	1013883a 	mov	r9,r2
   10e6c:	003f7906 	br	10c54 <__alt_mem_Flash_flash_data+0xf4010c54>
   10e70:	19c02636 	bltu	r3,r7,10f0c <__divdf3+0x7fc>
   10e74:	38c04d26 	beq	r7,r3,10fac <__divdf3+0x89c>
   10e78:	2027883a 	mov	r19,r4
   10e7c:	003f8b06 	br	10cac <__alt_mem_Flash_flash_data+0xf4010cac>
   10e80:	e025883a 	mov	r18,fp
   10e84:	003f8a06 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10e88:	008007c4 	movi	r2,31
   10e8c:	14002a16 	blt	r2,r16,10f38 <__divdf3+0x828>
   10e90:	a5010784 	addi	r20,r20,1054
   10e94:	8d04983a 	sll	r2,r17,r20
   10e98:	9c06d83a 	srl	r3,r19,r16
   10e9c:	9d28983a 	sll	r20,r19,r20
   10ea0:	8c20d83a 	srl	r16,r17,r16
   10ea4:	1886b03a 	or	r3,r3,r2
   10ea8:	a004c03a 	cmpne	r2,r20,zero
   10eac:	1884b03a 	or	r2,r3,r2
   10eb0:	10c001cc 	andi	r3,r2,7
   10eb4:	18000726 	beq	r3,zero,10ed4 <__divdf3+0x7c4>
   10eb8:	110003cc 	andi	r4,r2,15
   10ebc:	00c00104 	movi	r3,4
   10ec0:	20c00426 	beq	r4,r3,10ed4 <__divdf3+0x7c4>
   10ec4:	10c00104 	addi	r3,r2,4
   10ec8:	1885803a 	cmpltu	r2,r3,r2
   10ecc:	80a1883a 	add	r16,r16,r2
   10ed0:	1805883a 	mov	r2,r3
   10ed4:	80c0202c 	andhi	r3,r16,128
   10ed8:	18002d26 	beq	r3,zero,10f90 <__divdf3+0x880>
   10edc:	9180004c 	andi	r6,r18,1
   10ee0:	01000044 	movi	r4,1
   10ee4:	000b883a 	mov	r5,zero
   10ee8:	0027883a 	mov	r19,zero
   10eec:	003e6606 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   10ef0:	354d883a 	add	r6,r6,r21
   10ef4:	356d803a 	cmpltu	r22,r6,r21
   10ef8:	b42d883a 	add	r22,r22,r16
   10efc:	b12d883a 	add	r22,r22,r4
   10f00:	8c7fff84 	addi	r17,r17,-2
   10f04:	b0c7c83a 	sub	r3,r22,r3
   10f08:	003f1d06 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10f0c:	ad4b883a 	add	r5,r21,r21
   10f10:	2d6b803a 	cmpltu	r21,r5,r21
   10f14:	ac2b883a 	add	r21,r21,r16
   10f18:	1d47883a 	add	r3,r3,r21
   10f1c:	993fff84 	addi	r4,r19,-2
   10f20:	282b883a 	mov	r21,r5
   10f24:	003fc806 	br	10e48 <__alt_mem_Flash_flash_data+0xf4010e48>
   10f28:	103fc41e 	bne	r2,zero,10e3c <__alt_mem_Flash_flash_data+0xf4010e3c>
   10f2c:	002b883a 	mov	r21,zero
   10f30:	a8bf5e1e 	bne	r21,r2,10cac <__alt_mem_Flash_flash_data+0xf4010cac>
   10f34:	003f5e06 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10f38:	00bef884 	movi	r2,-1054
   10f3c:	1505c83a 	sub	r2,r2,r20
   10f40:	00c00804 	movi	r3,32
   10f44:	8884d83a 	srl	r2,r17,r2
   10f48:	80c01c26 	beq	r16,r3,10fbc <__divdf3+0x8ac>
   10f4c:	a0c10f84 	addi	r3,r20,1086
   10f50:	88c6983a 	sll	r3,r17,r3
   10f54:	1cc6b03a 	or	r3,r3,r19
   10f58:	1806c03a 	cmpne	r3,r3,zero
   10f5c:	1884b03a 	or	r2,r3,r2
   10f60:	140001cc 	andi	r16,r2,7
   10f64:	8000061e 	bne	r16,zero,10f80 <__divdf3+0x870>
   10f68:	000b883a 	mov	r5,zero
   10f6c:	1004d0fa 	srli	r2,r2,3
   10f70:	9180004c 	andi	r6,r18,1
   10f74:	0009883a 	mov	r4,zero
   10f78:	1426b03a 	or	r19,r2,r16
   10f7c:	003e4206 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>
   10f80:	110003cc 	andi	r4,r2,15
   10f84:	00c00104 	movi	r3,4
   10f88:	0021883a 	mov	r16,zero
   10f8c:	20ffcd1e 	bne	r4,r3,10ec4 <__alt_mem_Flash_flash_data+0xf4010ec4>
   10f90:	800a927a 	slli	r5,r16,9
   10f94:	8020977a 	slli	r16,r16,29
   10f98:	280ad33a 	srli	r5,r5,12
   10f9c:	003ff306 	br	10f6c <__alt_mem_Flash_flash_data+0xf4010f6c>
   10fa0:	317fd336 	bltu	r6,r5,10ef0 <__alt_mem_Flash_flash_data+0xf4010ef0>
   10fa4:	1023883a 	mov	r17,r2
   10fa8:	003fa206 	br	10e34 <__alt_mem_Flash_flash_data+0xf4010e34>
   10fac:	a8bfd736 	bltu	r21,r2,10f0c <__alt_mem_Flash_flash_data+0xf4010f0c>
   10fb0:	2027883a 	mov	r19,r4
   10fb4:	a8bf3d1e 	bne	r21,r2,10cac <__alt_mem_Flash_flash_data+0xf4010cac>
   10fb8:	003f3d06 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10fbc:	0007883a 	mov	r3,zero
   10fc0:	003fe406 	br	10f54 <__alt_mem_Flash_flash_data+0xf4010f54>
   10fc4:	00800434 	movhi	r2,16
   10fc8:	89400234 	orhi	r5,r17,8
   10fcc:	10bfffc4 	addi	r2,r2,-1
   10fd0:	e00d883a 	mov	r6,fp
   10fd4:	288a703a 	and	r5,r5,r2
   10fd8:	003e8506 	br	109f0 <__alt_mem_Flash_flash_data+0xf40109f0>

00010fdc <__eqdf2>:
   10fdc:	2804d53a 	srli	r2,r5,20
   10fe0:	3806d53a 	srli	r3,r7,20
   10fe4:	02000434 	movhi	r8,16
   10fe8:	423fffc4 	addi	r8,r8,-1
   10fec:	1081ffcc 	andi	r2,r2,2047
   10ff0:	0241ffc4 	movi	r9,2047
   10ff4:	2a14703a 	and	r10,r5,r8
   10ff8:	18c1ffcc 	andi	r3,r3,2047
   10ffc:	3a10703a 	and	r8,r7,r8
   11000:	280ad7fa 	srli	r5,r5,31
   11004:	380ed7fa 	srli	r7,r7,31
   11008:	12400f26 	beq	r2,r9,11048 <__eqdf2+0x6c>
   1100c:	0241ffc4 	movi	r9,2047
   11010:	1a400326 	beq	r3,r9,11020 <__eqdf2+0x44>
   11014:	10c00526 	beq	r2,r3,1102c <__eqdf2+0x50>
   11018:	00800044 	movi	r2,1
   1101c:	f800283a 	ret
   11020:	4192b03a 	or	r9,r8,r6
   11024:	483ffc1e 	bne	r9,zero,11018 <__alt_mem_Flash_flash_data+0xf4011018>
   11028:	10fffb1e 	bne	r2,r3,11018 <__alt_mem_Flash_flash_data+0xf4011018>
   1102c:	523ffa1e 	bne	r10,r8,11018 <__alt_mem_Flash_flash_data+0xf4011018>
   11030:	21bff91e 	bne	r4,r6,11018 <__alt_mem_Flash_flash_data+0xf4011018>
   11034:	29c00826 	beq	r5,r7,11058 <__eqdf2+0x7c>
   11038:	103ff71e 	bne	r2,zero,11018 <__alt_mem_Flash_flash_data+0xf4011018>
   1103c:	5104b03a 	or	r2,r10,r4
   11040:	1004c03a 	cmpne	r2,r2,zero
   11044:	f800283a 	ret
   11048:	5112b03a 	or	r9,r10,r4
   1104c:	483fef26 	beq	r9,zero,1100c <__alt_mem_Flash_flash_data+0xf401100c>
   11050:	00800044 	movi	r2,1
   11054:	f800283a 	ret
   11058:	0005883a 	mov	r2,zero
   1105c:	f800283a 	ret

00011060 <__gedf2>:
   11060:	2804d53a 	srli	r2,r5,20
   11064:	3806d53a 	srli	r3,r7,20
   11068:	02000434 	movhi	r8,16
   1106c:	423fffc4 	addi	r8,r8,-1
   11070:	0241ffc4 	movi	r9,2047
   11074:	1081ffcc 	andi	r2,r2,2047
   11078:	2a14703a 	and	r10,r5,r8
   1107c:	1a46703a 	and	r3,r3,r9
   11080:	3a10703a 	and	r8,r7,r8
   11084:	280ad7fa 	srli	r5,r5,31
   11088:	380ed7fa 	srli	r7,r7,31
   1108c:	12400b26 	beq	r2,r9,110bc <__gedf2+0x5c>
   11090:	1a401626 	beq	r3,r9,110ec <__gedf2+0x8c>
   11094:	10000c1e 	bne	r2,zero,110c8 <__gedf2+0x68>
   11098:	5112b03a 	or	r9,r10,r4
   1109c:	4813003a 	cmpeq	r9,r9,zero
   110a0:	4817883a 	mov	r11,r9
   110a4:	18000c1e 	bne	r3,zero,110d8 <__gedf2+0x78>
   110a8:	4198b03a 	or	r12,r8,r6
   110ac:	60000a1e 	bne	r12,zero,110d8 <__gedf2+0x78>
   110b0:	48001326 	beq	r9,zero,11100 <__gedf2+0xa0>
   110b4:	0005883a 	mov	r2,zero
   110b8:	f800283a 	ret
   110bc:	5112b03a 	or	r9,r10,r4
   110c0:	4800191e 	bne	r9,zero,11128 <__gedf2+0xc8>
   110c4:	18800926 	beq	r3,r2,110ec <__gedf2+0x8c>
   110c8:	18000b1e 	bne	r3,zero,110f8 <__gedf2+0x98>
   110cc:	4192b03a 	or	r9,r8,r6
   110d0:	0017883a 	mov	r11,zero
   110d4:	48000a26 	beq	r9,zero,11100 <__gedf2+0xa0>
   110d8:	39c03fcc 	andi	r7,r7,255
   110dc:	58000726 	beq	r11,zero,110fc <__gedf2+0x9c>
   110e0:	3800081e 	bne	r7,zero,11104 <__gedf2+0xa4>
   110e4:	00bfffc4 	movi	r2,-1
   110e8:	f800283a 	ret
   110ec:	4192b03a 	or	r9,r8,r6
   110f0:	48000d1e 	bne	r9,zero,11128 <__gedf2+0xc8>
   110f4:	103fe826 	beq	r2,zero,11098 <__alt_mem_Flash_flash_data+0xf4011098>
   110f8:	39c03fcc 	andi	r7,r7,255
   110fc:	29c00326 	beq	r5,r7,1110c <__gedf2+0xac>
   11100:	283ff81e 	bne	r5,zero,110e4 <__alt_mem_Flash_flash_data+0xf40110e4>
   11104:	00800044 	movi	r2,1
   11108:	f800283a 	ret
   1110c:	18bffc16 	blt	r3,r2,11100 <__alt_mem_Flash_flash_data+0xf4011100>
   11110:	10c00316 	blt	r2,r3,11120 <__gedf2+0xc0>
   11114:	42bffa36 	bltu	r8,r10,11100 <__alt_mem_Flash_flash_data+0xf4011100>
   11118:	52000526 	beq	r10,r8,11130 <__gedf2+0xd0>
   1111c:	523fe52e 	bgeu	r10,r8,110b4 <__alt_mem_Flash_flash_data+0xf40110b4>
   11120:	283ff026 	beq	r5,zero,110e4 <__alt_mem_Flash_flash_data+0xf40110e4>
   11124:	003ff706 	br	11104 <__alt_mem_Flash_flash_data+0xf4011104>
   11128:	00bfff84 	movi	r2,-2
   1112c:	f800283a 	ret
   11130:	313ff336 	bltu	r6,r4,11100 <__alt_mem_Flash_flash_data+0xf4011100>
   11134:	21bfdf2e 	bgeu	r4,r6,110b4 <__alt_mem_Flash_flash_data+0xf40110b4>
   11138:	283fea26 	beq	r5,zero,110e4 <__alt_mem_Flash_flash_data+0xf40110e4>
   1113c:	003ff106 	br	11104 <__alt_mem_Flash_flash_data+0xf4011104>

00011140 <__ledf2>:
   11140:	2804d53a 	srli	r2,r5,20
   11144:	3810d53a 	srli	r8,r7,20
   11148:	00c00434 	movhi	r3,16
   1114c:	18ffffc4 	addi	r3,r3,-1
   11150:	0241ffc4 	movi	r9,2047
   11154:	1081ffcc 	andi	r2,r2,2047
   11158:	28d4703a 	and	r10,r5,r3
   1115c:	4250703a 	and	r8,r8,r9
   11160:	38c6703a 	and	r3,r7,r3
   11164:	280ad7fa 	srli	r5,r5,31
   11168:	380ed7fa 	srli	r7,r7,31
   1116c:	12400b26 	beq	r2,r9,1119c <__ledf2+0x5c>
   11170:	42401926 	beq	r8,r9,111d8 <__ledf2+0x98>
   11174:	10000c1e 	bne	r2,zero,111a8 <__ledf2+0x68>
   11178:	5112b03a 	or	r9,r10,r4
   1117c:	4813003a 	cmpeq	r9,r9,zero
   11180:	4817883a 	mov	r11,r9
   11184:	40000f26 	beq	r8,zero,111c4 <__ledf2+0x84>
   11188:	39c03fcc 	andi	r7,r7,255
   1118c:	58001826 	beq	r11,zero,111f0 <__ledf2+0xb0>
   11190:	38000a1e 	bne	r7,zero,111bc <__ledf2+0x7c>
   11194:	00bfffc4 	movi	r2,-1
   11198:	f800283a 	ret
   1119c:	5112b03a 	or	r9,r10,r4
   111a0:	48000f1e 	bne	r9,zero,111e0 <__ledf2+0xa0>
   111a4:	40800c26 	beq	r8,r2,111d8 <__ledf2+0x98>
   111a8:	4000101e 	bne	r8,zero,111ec <__ledf2+0xac>
   111ac:	1992b03a 	or	r9,r3,r6
   111b0:	0017883a 	mov	r11,zero
   111b4:	483ff41e 	bne	r9,zero,11188 <__alt_mem_Flash_flash_data+0xf4011188>
   111b8:	283ff61e 	bne	r5,zero,11194 <__alt_mem_Flash_flash_data+0xf4011194>
   111bc:	00800044 	movi	r2,1
   111c0:	f800283a 	ret
   111c4:	1998b03a 	or	r12,r3,r6
   111c8:	603fef1e 	bne	r12,zero,11188 <__alt_mem_Flash_flash_data+0xf4011188>
   111cc:	483ffa26 	beq	r9,zero,111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   111d0:	0005883a 	mov	r2,zero
   111d4:	f800283a 	ret
   111d8:	1992b03a 	or	r9,r3,r6
   111dc:	48000226 	beq	r9,zero,111e8 <__ledf2+0xa8>
   111e0:	00800084 	movi	r2,2
   111e4:	f800283a 	ret
   111e8:	103fe326 	beq	r2,zero,11178 <__alt_mem_Flash_flash_data+0xf4011178>
   111ec:	39c03fcc 	andi	r7,r7,255
   111f0:	29fff11e 	bne	r5,r7,111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   111f4:	40bff016 	blt	r8,r2,111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   111f8:	12000316 	blt	r2,r8,11208 <__ledf2+0xc8>
   111fc:	1abfee36 	bltu	r3,r10,111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   11200:	50c00326 	beq	r10,r3,11210 <__ledf2+0xd0>
   11204:	50fff22e 	bgeu	r10,r3,111d0 <__alt_mem_Flash_flash_data+0xf40111d0>
   11208:	283fe226 	beq	r5,zero,11194 <__alt_mem_Flash_flash_data+0xf4011194>
   1120c:	003feb06 	br	111bc <__alt_mem_Flash_flash_data+0xf40111bc>
   11210:	313fe936 	bltu	r6,r4,111b8 <__alt_mem_Flash_flash_data+0xf40111b8>
   11214:	21bfee2e 	bgeu	r4,r6,111d0 <__alt_mem_Flash_flash_data+0xf40111d0>
   11218:	283fde26 	beq	r5,zero,11194 <__alt_mem_Flash_flash_data+0xf4011194>
   1121c:	003fe706 	br	111bc <__alt_mem_Flash_flash_data+0xf40111bc>

00011220 <__muldf3>:
   11220:	defff204 	addi	sp,sp,-56
   11224:	2804d53a 	srli	r2,r5,20
   11228:	dd800a15 	stw	r22,40(sp)
   1122c:	282cd7fa 	srli	r22,r5,31
   11230:	dc000415 	stw	r16,16(sp)
   11234:	04000434 	movhi	r16,16
   11238:	df000c15 	stw	fp,48(sp)
   1123c:	dd000815 	stw	r20,32(sp)
   11240:	dcc00715 	stw	r19,28(sp)
   11244:	dc800615 	stw	r18,24(sp)
   11248:	dc400515 	stw	r17,20(sp)
   1124c:	843fffc4 	addi	r16,r16,-1
   11250:	dfc00d15 	stw	ra,52(sp)
   11254:	ddc00b15 	stw	r23,44(sp)
   11258:	dd400915 	stw	r21,36(sp)
   1125c:	1501ffcc 	andi	r20,r2,2047
   11260:	2023883a 	mov	r17,r4
   11264:	2025883a 	mov	r18,r4
   11268:	2c20703a 	and	r16,r5,r16
   1126c:	b027883a 	mov	r19,r22
   11270:	b7003fcc 	andi	fp,r22,255
   11274:	a0005926 	beq	r20,zero,113dc <__muldf3+0x1bc>
   11278:	0081ffc4 	movi	r2,2047
   1127c:	a0803426 	beq	r20,r2,11350 <__muldf3+0x130>
   11280:	84000434 	orhi	r16,r16,16
   11284:	2004d77a 	srli	r2,r4,29
   11288:	802090fa 	slli	r16,r16,3
   1128c:	202490fa 	slli	r18,r4,3
   11290:	a53f0044 	addi	r20,r20,-1023
   11294:	80a0b03a 	or	r16,r16,r2
   11298:	002b883a 	mov	r21,zero
   1129c:	0015883a 	mov	r10,zero
   112a0:	3812d53a 	srli	r9,r7,20
   112a4:	3806d7fa 	srli	r3,r7,31
   112a8:	02000434 	movhi	r8,16
   112ac:	423fffc4 	addi	r8,r8,-1
   112b0:	4941ffcc 	andi	r5,r9,2047
   112b4:	302f883a 	mov	r23,r6
   112b8:	3a22703a 	and	r17,r7,r8
   112bc:	1ac03fcc 	andi	r11,r3,255
   112c0:	28006226 	beq	r5,zero,1144c <__muldf3+0x22c>
   112c4:	0081ffc4 	movi	r2,2047
   112c8:	28805a26 	beq	r5,r2,11434 <__muldf3+0x214>
   112cc:	8a000434 	orhi	r8,r17,16
   112d0:	3004d77a 	srli	r2,r6,29
   112d4:	401090fa 	slli	r8,r8,3
   112d8:	302e90fa 	slli	r23,r6,3
   112dc:	297f0044 	addi	r5,r5,-1023
   112e0:	40a2b03a 	or	r17,r8,r2
   112e4:	0013883a 	mov	r9,zero
   112e8:	4d4cb03a 	or	r6,r9,r21
   112ec:	300c90ba 	slli	r6,r6,2
   112f0:	02000074 	movhi	r8,1
   112f4:	4204c404 	addi	r8,r8,4880
   112f8:	320d883a 	add	r6,r6,r8
   112fc:	31800017 	ldw	r6,0(r6)
   11300:	a14b883a 	add	r5,r20,r5
   11304:	1dacf03a 	xor	r22,r3,r22
   11308:	2b000044 	addi	r12,r5,1
   1130c:	3000683a 	jmp	r6
   11310:	0001154c 	andi	zero,zero,1109
   11314:	00011538 	rdprs	zero,zero,1108
   11318:	00011538 	rdprs	zero,zero,1108
   1131c:	00011524 	muli	zero,zero,1108
   11320:	0001136c 	andhi	zero,zero,1101
   11324:	0001136c 	andhi	zero,zero,1101
   11328:	0001150c 	andi	zero,zero,1108
   1132c:	00011524 	muli	zero,zero,1108
   11330:	0001136c 	andhi	zero,zero,1101
   11334:	0001150c 	andi	zero,zero,1108
   11338:	0001136c 	andhi	zero,zero,1101
   1133c:	00011524 	muli	zero,zero,1108
   11340:	00011370 	cmpltui	zero,zero,1101
   11344:	00011370 	cmpltui	zero,zero,1101
   11348:	00011370 	cmpltui	zero,zero,1101
   1134c:	00011748 	cmpgei	zero,zero,1117
   11350:	8104b03a 	or	r2,r16,r4
   11354:	10006a1e 	bne	r2,zero,11500 <__muldf3+0x2e0>
   11358:	05400204 	movi	r21,8
   1135c:	0021883a 	mov	r16,zero
   11360:	0025883a 	mov	r18,zero
   11364:	02800084 	movi	r10,2
   11368:	003fcd06 	br	112a0 <__alt_mem_Flash_flash_data+0xf40112a0>
   1136c:	b039883a 	mov	fp,r22
   11370:	00800084 	movi	r2,2
   11374:	50804e1e 	bne	r10,r2,114b0 <__muldf3+0x290>
   11378:	e4c0004c 	andi	r19,fp,1
   1137c:	0101ffc4 	movi	r4,2047
   11380:	0021883a 	mov	r16,zero
   11384:	0025883a 	mov	r18,zero
   11388:	2008953a 	slli	r4,r4,20
   1138c:	98c03fcc 	andi	r3,r19,255
   11390:	01400434 	movhi	r5,16
   11394:	297fffc4 	addi	r5,r5,-1
   11398:	180697fa 	slli	r3,r3,31
   1139c:	8160703a 	and	r16,r16,r5
   113a0:	8120b03a 	or	r16,r16,r4
   113a4:	80c6b03a 	or	r3,r16,r3
   113a8:	9005883a 	mov	r2,r18
   113ac:	dfc00d17 	ldw	ra,52(sp)
   113b0:	df000c17 	ldw	fp,48(sp)
   113b4:	ddc00b17 	ldw	r23,44(sp)
   113b8:	dd800a17 	ldw	r22,40(sp)
   113bc:	dd400917 	ldw	r21,36(sp)
   113c0:	dd000817 	ldw	r20,32(sp)
   113c4:	dcc00717 	ldw	r19,28(sp)
   113c8:	dc800617 	ldw	r18,24(sp)
   113cc:	dc400517 	ldw	r17,20(sp)
   113d0:	dc000417 	ldw	r16,16(sp)
   113d4:	dec00e04 	addi	sp,sp,56
   113d8:	f800283a 	ret
   113dc:	8104b03a 	or	r2,r16,r4
   113e0:	10004226 	beq	r2,zero,114ec <__muldf3+0x2cc>
   113e4:	8000f926 	beq	r16,zero,117cc <__muldf3+0x5ac>
   113e8:	8009883a 	mov	r4,r16
   113ec:	d9800315 	stw	r6,12(sp)
   113f0:	d9c00015 	stw	r7,0(sp)
   113f4:	00124100 	call	12410 <__clzsi2>
   113f8:	d9800317 	ldw	r6,12(sp)
   113fc:	d9c00017 	ldw	r7,0(sp)
   11400:	1007883a 	mov	r3,r2
   11404:	01000a04 	movi	r4,40
   11408:	18bffe04 	addi	r2,r3,-8
   1140c:	20c9c83a 	sub	r4,r4,r3
   11410:	80a0983a 	sll	r16,r16,r2
   11414:	8908d83a 	srl	r4,r17,r4
   11418:	88a4983a 	sll	r18,r17,r2
   1141c:	2420b03a 	or	r16,r4,r16
   11420:	017f0344 	movi	r5,-1011
   11424:	28e9c83a 	sub	r20,r5,r3
   11428:	002b883a 	mov	r21,zero
   1142c:	0015883a 	mov	r10,zero
   11430:	003f9b06 	br	112a0 <__alt_mem_Flash_flash_data+0xf40112a0>
   11434:	8984b03a 	or	r2,r17,r6
   11438:	10002a1e 	bne	r2,zero,114e4 <__muldf3+0x2c4>
   1143c:	0023883a 	mov	r17,zero
   11440:	002f883a 	mov	r23,zero
   11444:	02400084 	movi	r9,2
   11448:	003fa706 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   1144c:	8984b03a 	or	r2,r17,r6
   11450:	10002026 	beq	r2,zero,114d4 <__muldf3+0x2b4>
   11454:	8800cc26 	beq	r17,zero,11788 <__muldf3+0x568>
   11458:	8809883a 	mov	r4,r17
   1145c:	d8c00215 	stw	r3,8(sp)
   11460:	d9800315 	stw	r6,12(sp)
   11464:	da800015 	stw	r10,0(sp)
   11468:	dac00115 	stw	r11,4(sp)
   1146c:	00124100 	call	12410 <__clzsi2>
   11470:	d8c00217 	ldw	r3,8(sp)
   11474:	d9800317 	ldw	r6,12(sp)
   11478:	da800017 	ldw	r10,0(sp)
   1147c:	dac00117 	ldw	r11,4(sp)
   11480:	1009883a 	mov	r4,r2
   11484:	01400a04 	movi	r5,40
   11488:	25fffe04 	addi	r23,r4,-8
   1148c:	290bc83a 	sub	r5,r5,r4
   11490:	8dd0983a 	sll	r8,r17,r23
   11494:	314ad83a 	srl	r5,r6,r5
   11498:	35ee983a 	sll	r23,r6,r23
   1149c:	2a22b03a 	or	r17,r5,r8
   114a0:	017f0344 	movi	r5,-1011
   114a4:	290bc83a 	sub	r5,r5,r4
   114a8:	0013883a 	mov	r9,zero
   114ac:	003f8e06 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   114b0:	008000c4 	movi	r2,3
   114b4:	50811d26 	beq	r10,r2,1192c <__muldf3+0x70c>
   114b8:	00800044 	movi	r2,1
   114bc:	5080e01e 	bne	r10,r2,11840 <__muldf3+0x620>
   114c0:	e0a6703a 	and	r19,fp,r2
   114c4:	0009883a 	mov	r4,zero
   114c8:	0021883a 	mov	r16,zero
   114cc:	0025883a 	mov	r18,zero
   114d0:	003fad06 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   114d4:	0023883a 	mov	r17,zero
   114d8:	002f883a 	mov	r23,zero
   114dc:	02400044 	movi	r9,1
   114e0:	003f8106 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   114e4:	024000c4 	movi	r9,3
   114e8:	003f7f06 	br	112e8 <__alt_mem_Flash_flash_data+0xf40112e8>
   114ec:	05400104 	movi	r21,4
   114f0:	0021883a 	mov	r16,zero
   114f4:	0025883a 	mov	r18,zero
   114f8:	02800044 	movi	r10,1
   114fc:	003f6806 	br	112a0 <__alt_mem_Flash_flash_data+0xf40112a0>
   11500:	05400304 	movi	r21,12
   11504:	028000c4 	movi	r10,3
   11508:	003f6506 	br	112a0 <__alt_mem_Flash_flash_data+0xf40112a0>
   1150c:	04000434 	movhi	r16,16
   11510:	0027883a 	mov	r19,zero
   11514:	843fffc4 	addi	r16,r16,-1
   11518:	04bfffc4 	movi	r18,-1
   1151c:	0101ffc4 	movi	r4,2047
   11520:	003f9906 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   11524:	8821883a 	mov	r16,r17
   11528:	b825883a 	mov	r18,r23
   1152c:	5839883a 	mov	fp,r11
   11530:	4815883a 	mov	r10,r9
   11534:	003f8e06 	br	11370 <__alt_mem_Flash_flash_data+0xf4011370>
   11538:	8821883a 	mov	r16,r17
   1153c:	b825883a 	mov	r18,r23
   11540:	b039883a 	mov	fp,r22
   11544:	4815883a 	mov	r10,r9
   11548:	003f8906 	br	11370 <__alt_mem_Flash_flash_data+0xf4011370>
   1154c:	b80cd43a 	srli	r6,r23,16
   11550:	9006d43a 	srli	r3,r18,16
   11554:	90bfffcc 	andi	r2,r18,65535
   11558:	bdffffcc 	andi	r23,r23,65535
   1155c:	b891383a 	mul	r8,r23,r2
   11560:	b8c9383a 	mul	r4,r23,r3
   11564:	309b383a 	mul	r13,r6,r2
   11568:	400ed43a 	srli	r7,r8,16
   1156c:	30df383a 	mul	r15,r6,r3
   11570:	235b883a 	add	r13,r4,r13
   11574:	69db883a 	add	r13,r13,r7
   11578:	6900022e 	bgeu	r13,r4,11584 <__muldf3+0x364>
   1157c:	01000074 	movhi	r4,1
   11580:	791f883a 	add	r15,r15,r4
   11584:	8828d43a 	srli	r20,r17,16
   11588:	8c7fffcc 	andi	r17,r17,65535
   1158c:	888f383a 	mul	r7,r17,r2
   11590:	88d3383a 	mul	r9,r17,r3
   11594:	a0a5383a 	mul	r18,r20,r2
   11598:	3816d43a 	srli	r11,r7,16
   1159c:	6814943a 	slli	r10,r13,16
   115a0:	4ca5883a 	add	r18,r9,r18
   115a4:	423fffcc 	andi	r8,r8,65535
   115a8:	92e5883a 	add	r18,r18,r11
   115ac:	6808d43a 	srli	r4,r13,16
   115b0:	5215883a 	add	r10,r10,r8
   115b4:	a0c7383a 	mul	r3,r20,r3
   115b8:	9240022e 	bgeu	r18,r9,115c4 <__muldf3+0x3a4>
   115bc:	00800074 	movhi	r2,1
   115c0:	1887883a 	add	r3,r3,r2
   115c4:	802ad43a 	srli	r21,r16,16
   115c8:	80bfffcc 	andi	r2,r16,65535
   115cc:	b893383a 	mul	r9,r23,r2
   115d0:	3091383a 	mul	r8,r6,r2
   115d4:	bd6f383a 	mul	r23,r23,r21
   115d8:	9026943a 	slli	r19,r18,16
   115dc:	481ad43a 	srli	r13,r9,16
   115e0:	9024d43a 	srli	r18,r18,16
   115e4:	39ffffcc 	andi	r7,r7,65535
   115e8:	ba11883a 	add	r8,r23,r8
   115ec:	99e7883a 	add	r19,r19,r7
   115f0:	4351883a 	add	r8,r8,r13
   115f4:	1c97883a 	add	r11,r3,r18
   115f8:	354d383a 	mul	r6,r6,r21
   115fc:	9925883a 	add	r18,r19,r4
   11600:	45c0022e 	bgeu	r8,r23,1160c <__muldf3+0x3ec>
   11604:	00c00074 	movhi	r3,1
   11608:	30cd883a 	add	r6,r6,r3
   1160c:	8889383a 	mul	r4,r17,r2
   11610:	8d63383a 	mul	r17,r17,r21
   11614:	a085383a 	mul	r2,r20,r2
   11618:	200ed43a 	srli	r7,r4,16
   1161c:	401cd43a 	srli	r14,r8,16
   11620:	401a943a 	slli	r13,r8,16
   11624:	8885883a 	add	r2,r17,r2
   11628:	4a3fffcc 	andi	r8,r9,65535
   1162c:	11c5883a 	add	r2,r2,r7
   11630:	339d883a 	add	r14,r6,r14
   11634:	6a11883a 	add	r8,r13,r8
   11638:	a561383a 	mul	r16,r20,r21
   1163c:	1440022e 	bgeu	r2,r17,11648 <__muldf3+0x428>
   11640:	00c00074 	movhi	r3,1
   11644:	80e1883a 	add	r16,r16,r3
   11648:	1006943a 	slli	r3,r2,16
   1164c:	213fffcc 	andi	r4,r4,65535
   11650:	93db883a 	add	r13,r18,r15
   11654:	1909883a 	add	r4,r3,r4
   11658:	22c7883a 	add	r3,r4,r11
   1165c:	6cd3803a 	cmpltu	r9,r13,r19
   11660:	6a09883a 	add	r4,r13,r8
   11664:	1a5b883a 	add	r13,r3,r9
   11668:	2211803a 	cmpltu	r8,r4,r8
   1166c:	734d883a 	add	r6,r14,r13
   11670:	100ed43a 	srli	r7,r2,16
   11674:	6a53803a 	cmpltu	r9,r13,r9
   11678:	3205883a 	add	r2,r6,r8
   1167c:	1ac7803a 	cmpltu	r3,r3,r11
   11680:	1211803a 	cmpltu	r8,r2,r8
   11684:	48c6b03a 	or	r3,r9,r3
   11688:	338d803a 	cmpltu	r6,r6,r14
   1168c:	19c7883a 	add	r3,r3,r7
   11690:	418cb03a 	or	r6,r8,r6
   11694:	1987883a 	add	r3,r3,r6
   11698:	2024927a 	slli	r18,r4,9
   1169c:	1c07883a 	add	r3,r3,r16
   116a0:	1806927a 	slli	r3,r3,9
   116a4:	1020d5fa 	srli	r16,r2,23
   116a8:	2008d5fa 	srli	r4,r4,23
   116ac:	9294b03a 	or	r10,r18,r10
   116b0:	1004927a 	slli	r2,r2,9
   116b4:	5024c03a 	cmpne	r18,r10,zero
   116b8:	1c20b03a 	or	r16,r3,r16
   116bc:	9108b03a 	or	r4,r18,r4
   116c0:	80c0402c 	andhi	r3,r16,256
   116c4:	20a4b03a 	or	r18,r4,r2
   116c8:	18000726 	beq	r3,zero,116e8 <__muldf3+0x4c8>
   116cc:	9006d07a 	srli	r3,r18,1
   116d0:	800897fa 	slli	r4,r16,31
   116d4:	9080004c 	andi	r2,r18,1
   116d8:	8020d07a 	srli	r16,r16,1
   116dc:	10c4b03a 	or	r2,r2,r3
   116e0:	1124b03a 	or	r18,r2,r4
   116e4:	600b883a 	mov	r5,r12
   116e8:	2900ffc4 	addi	r4,r5,1023
   116ec:	01004b0e 	bge	zero,r4,1181c <__muldf3+0x5fc>
   116f0:	908001cc 	andi	r2,r18,7
   116f4:	10000726 	beq	r2,zero,11714 <__muldf3+0x4f4>
   116f8:	90c003cc 	andi	r3,r18,15
   116fc:	00800104 	movi	r2,4
   11700:	18800426 	beq	r3,r2,11714 <__muldf3+0x4f4>
   11704:	9087883a 	add	r3,r18,r2
   11708:	1c85803a 	cmpltu	r2,r3,r18
   1170c:	80a1883a 	add	r16,r16,r2
   11710:	1825883a 	mov	r18,r3
   11714:	8080402c 	andhi	r2,r16,256
   11718:	10000426 	beq	r2,zero,1172c <__muldf3+0x50c>
   1171c:	00bfc034 	movhi	r2,65280
   11720:	10bfffc4 	addi	r2,r2,-1
   11724:	29010004 	addi	r4,r5,1024
   11728:	80a0703a 	and	r16,r16,r2
   1172c:	0081ff84 	movi	r2,2046
   11730:	1100320e 	bge	r2,r4,117fc <__muldf3+0x5dc>
   11734:	b4c0004c 	andi	r19,r22,1
   11738:	0101ffc4 	movi	r4,2047
   1173c:	0021883a 	mov	r16,zero
   11740:	0025883a 	mov	r18,zero
   11744:	003f1006 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   11748:	8080022c 	andhi	r2,r16,8
   1174c:	10000926 	beq	r2,zero,11774 <__muldf3+0x554>
   11750:	8880022c 	andhi	r2,r17,8
   11754:	1000071e 	bne	r2,zero,11774 <__muldf3+0x554>
   11758:	00800434 	movhi	r2,16
   1175c:	8c000234 	orhi	r16,r17,8
   11760:	10bfffc4 	addi	r2,r2,-1
   11764:	1827883a 	mov	r19,r3
   11768:	80a0703a 	and	r16,r16,r2
   1176c:	b825883a 	mov	r18,r23
   11770:	003f6a06 	br	1151c <__alt_mem_Flash_flash_data+0xf401151c>
   11774:	00800434 	movhi	r2,16
   11778:	84000234 	orhi	r16,r16,8
   1177c:	10bfffc4 	addi	r2,r2,-1
   11780:	80a0703a 	and	r16,r16,r2
   11784:	003f6506 	br	1151c <__alt_mem_Flash_flash_data+0xf401151c>
   11788:	3009883a 	mov	r4,r6
   1178c:	d8c00215 	stw	r3,8(sp)
   11790:	d9800315 	stw	r6,12(sp)
   11794:	da800015 	stw	r10,0(sp)
   11798:	dac00115 	stw	r11,4(sp)
   1179c:	00124100 	call	12410 <__clzsi2>
   117a0:	11000804 	addi	r4,r2,32
   117a4:	014009c4 	movi	r5,39
   117a8:	d8c00217 	ldw	r3,8(sp)
   117ac:	d9800317 	ldw	r6,12(sp)
   117b0:	da800017 	ldw	r10,0(sp)
   117b4:	dac00117 	ldw	r11,4(sp)
   117b8:	293f320e 	bge	r5,r4,11484 <__alt_mem_Flash_flash_data+0xf4011484>
   117bc:	10bffe04 	addi	r2,r2,-8
   117c0:	b8a2983a 	sll	r17,r23,r2
   117c4:	002f883a 	mov	r23,zero
   117c8:	003f3506 	br	114a0 <__alt_mem_Flash_flash_data+0xf40114a0>
   117cc:	d9800315 	stw	r6,12(sp)
   117d0:	d9c00015 	stw	r7,0(sp)
   117d4:	00124100 	call	12410 <__clzsi2>
   117d8:	10c00804 	addi	r3,r2,32
   117dc:	010009c4 	movi	r4,39
   117e0:	d9800317 	ldw	r6,12(sp)
   117e4:	d9c00017 	ldw	r7,0(sp)
   117e8:	20ff060e 	bge	r4,r3,11404 <__alt_mem_Flash_flash_data+0xf4011404>
   117ec:	10bffe04 	addi	r2,r2,-8
   117f0:	88a0983a 	sll	r16,r17,r2
   117f4:	0025883a 	mov	r18,zero
   117f8:	003f0906 	br	11420 <__alt_mem_Flash_flash_data+0xf4011420>
   117fc:	9004d0fa 	srli	r2,r18,3
   11800:	8024977a 	slli	r18,r16,29
   11804:	8020927a 	slli	r16,r16,9
   11808:	2101ffcc 	andi	r4,r4,2047
   1180c:	90a4b03a 	or	r18,r18,r2
   11810:	8020d33a 	srli	r16,r16,12
   11814:	b4c0004c 	andi	r19,r22,1
   11818:	003edb06 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   1181c:	00ff0084 	movi	r3,-1022
   11820:	1947c83a 	sub	r3,r3,r5
   11824:	00800e04 	movi	r2,56
   11828:	10c0080e 	bge	r2,r3,1184c <__muldf3+0x62c>
   1182c:	b4c0004c 	andi	r19,r22,1
   11830:	0009883a 	mov	r4,zero
   11834:	0021883a 	mov	r16,zero
   11838:	0025883a 	mov	r18,zero
   1183c:	003ed206 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   11840:	600b883a 	mov	r5,r12
   11844:	e02d883a 	mov	r22,fp
   11848:	003fa706 	br	116e8 <__alt_mem_Flash_flash_data+0xf40116e8>
   1184c:	008007c4 	movi	r2,31
   11850:	10c01816 	blt	r2,r3,118b4 <__muldf3+0x694>
   11854:	29410784 	addi	r5,r5,1054
   11858:	8144983a 	sll	r2,r16,r5
   1185c:	90c8d83a 	srl	r4,r18,r3
   11860:	914a983a 	sll	r5,r18,r5
   11864:	80c6d83a 	srl	r3,r16,r3
   11868:	2088b03a 	or	r4,r4,r2
   1186c:	2804c03a 	cmpne	r2,r5,zero
   11870:	2084b03a 	or	r2,r4,r2
   11874:	110001cc 	andi	r4,r2,7
   11878:	20000726 	beq	r4,zero,11898 <__muldf3+0x678>
   1187c:	114003cc 	andi	r5,r2,15
   11880:	01000104 	movi	r4,4
   11884:	29000426 	beq	r5,r4,11898 <__muldf3+0x678>
   11888:	11000104 	addi	r4,r2,4
   1188c:	2085803a 	cmpltu	r2,r4,r2
   11890:	1887883a 	add	r3,r3,r2
   11894:	2005883a 	mov	r2,r4
   11898:	1900202c 	andhi	r4,r3,128
   1189c:	20001826 	beq	r4,zero,11900 <__muldf3+0x6e0>
   118a0:	b4c0004c 	andi	r19,r22,1
   118a4:	01000044 	movi	r4,1
   118a8:	0021883a 	mov	r16,zero
   118ac:	0025883a 	mov	r18,zero
   118b0:	003eb506 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   118b4:	00bef884 	movi	r2,-1054
   118b8:	1145c83a 	sub	r2,r2,r5
   118bc:	8088d83a 	srl	r4,r16,r2
   118c0:	00800804 	movi	r2,32
   118c4:	18801726 	beq	r3,r2,11924 <__muldf3+0x704>
   118c8:	28810f84 	addi	r2,r5,1086
   118cc:	8084983a 	sll	r2,r16,r2
   118d0:	1484b03a 	or	r2,r2,r18
   118d4:	1004c03a 	cmpne	r2,r2,zero
   118d8:	1104b03a 	or	r2,r2,r4
   118dc:	10c001cc 	andi	r3,r2,7
   118e0:	18000b1e 	bne	r3,zero,11910 <__muldf3+0x6f0>
   118e4:	0021883a 	mov	r16,zero
   118e8:	1004d0fa 	srli	r2,r2,3
   118ec:	b4c0004c 	andi	r19,r22,1
   118f0:	0009883a 	mov	r4,zero
   118f4:	10e4b03a 	or	r18,r2,r3
   118f8:	003ea306 	br	11388 <__alt_mem_Flash_flash_data+0xf4011388>
   118fc:	0007883a 	mov	r3,zero
   11900:	1820927a 	slli	r16,r3,9
   11904:	1806977a 	slli	r3,r3,29
   11908:	8020d33a 	srli	r16,r16,12
   1190c:	003ff606 	br	118e8 <__alt_mem_Flash_flash_data+0xf40118e8>
   11910:	110003cc 	andi	r4,r2,15
   11914:	00c00104 	movi	r3,4
   11918:	20fff826 	beq	r4,r3,118fc <__alt_mem_Flash_flash_data+0xf40118fc>
   1191c:	0007883a 	mov	r3,zero
   11920:	003fd906 	br	11888 <__alt_mem_Flash_flash_data+0xf4011888>
   11924:	0005883a 	mov	r2,zero
   11928:	003fe906 	br	118d0 <__alt_mem_Flash_flash_data+0xf40118d0>
   1192c:	00800434 	movhi	r2,16
   11930:	84000234 	orhi	r16,r16,8
   11934:	10bfffc4 	addi	r2,r2,-1
   11938:	e4c0004c 	andi	r19,fp,1
   1193c:	80a0703a 	and	r16,r16,r2
   11940:	003ef606 	br	1151c <__alt_mem_Flash_flash_data+0xf401151c>

00011944 <__subdf3>:
   11944:	00c00434 	movhi	r3,16
   11948:	18ffffc4 	addi	r3,r3,-1
   1194c:	defffb04 	addi	sp,sp,-20
   11950:	28d2703a 	and	r9,r5,r3
   11954:	3814d53a 	srli	r10,r7,20
   11958:	38c6703a 	and	r3,r7,r3
   1195c:	3004d77a 	srli	r2,r6,29
   11960:	dc800215 	stw	r18,8(sp)
   11964:	dc000015 	stw	r16,0(sp)
   11968:	2824d7fa 	srli	r18,r5,31
   1196c:	2820d53a 	srli	r16,r5,20
   11970:	481290fa 	slli	r9,r9,3
   11974:	200ad77a 	srli	r5,r4,29
   11978:	180690fa 	slli	r3,r3,3
   1197c:	dc400115 	stw	r17,4(sp)
   11980:	dfc00415 	stw	ra,16(sp)
   11984:	202290fa 	slli	r17,r4,3
   11988:	dcc00315 	stw	r19,12(sp)
   1198c:	5281ffcc 	andi	r10,r10,2047
   11990:	0101ffc4 	movi	r4,2047
   11994:	9011883a 	mov	r8,r18
   11998:	8401ffcc 	andi	r16,r16,2047
   1199c:	94803fcc 	andi	r18,r18,255
   119a0:	494ab03a 	or	r5,r9,r5
   119a4:	380ed7fa 	srli	r7,r7,31
   119a8:	1886b03a 	or	r3,r3,r2
   119ac:	300c90fa 	slli	r6,r6,3
   119b0:	51009026 	beq	r10,r4,11bf4 <__subdf3+0x2b0>
   119b4:	39c0005c 	xori	r7,r7,1
   119b8:	8285c83a 	sub	r2,r16,r10
   119bc:	91c06f26 	beq	r18,r7,11b7c <__subdf3+0x238>
   119c0:	0080b10e 	bge	zero,r2,11c88 <__subdf3+0x344>
   119c4:	50002a1e 	bne	r10,zero,11a70 <__subdf3+0x12c>
   119c8:	1988b03a 	or	r4,r3,r6
   119cc:	2000941e 	bne	r4,zero,11c20 <__subdf3+0x2dc>
   119d0:	888001cc 	andi	r2,r17,7
   119d4:	10005b26 	beq	r2,zero,11b44 <__subdf3+0x200>
   119d8:	88c003cc 	andi	r3,r17,15
   119dc:	00800104 	movi	r2,4
   119e0:	18805826 	beq	r3,r2,11b44 <__subdf3+0x200>
   119e4:	88c00104 	addi	r3,r17,4
   119e8:	1c63803a 	cmpltu	r17,r3,r17
   119ec:	2c4b883a 	add	r5,r5,r17
   119f0:	2880202c 	andhi	r2,r5,128
   119f4:	9200004c 	andi	r8,r18,1
   119f8:	1823883a 	mov	r17,r3
   119fc:	10005426 	beq	r2,zero,11b50 <__subdf3+0x20c>
   11a00:	84000044 	addi	r16,r16,1
   11a04:	0081ffc4 	movi	r2,2047
   11a08:	8080bf26 	beq	r16,r2,11d08 <__subdf3+0x3c4>
   11a0c:	013fe034 	movhi	r4,65408
   11a10:	213fffc4 	addi	r4,r4,-1
   11a14:	290a703a 	and	r5,r5,r4
   11a18:	2804977a 	slli	r2,r5,29
   11a1c:	280a927a 	slli	r5,r5,9
   11a20:	8822d0fa 	srli	r17,r17,3
   11a24:	8401ffcc 	andi	r16,r16,2047
   11a28:	2808d33a 	srli	r4,r5,12
   11a2c:	1444b03a 	or	r2,r2,r17
   11a30:	8401ffcc 	andi	r16,r16,2047
   11a34:	800a953a 	slli	r5,r16,20
   11a38:	40c03fcc 	andi	r3,r8,255
   11a3c:	04000434 	movhi	r16,16
   11a40:	180697fa 	slli	r3,r3,31
   11a44:	843fffc4 	addi	r16,r16,-1
   11a48:	2420703a 	and	r16,r4,r16
   11a4c:	8160b03a 	or	r16,r16,r5
   11a50:	80c6b03a 	or	r3,r16,r3
   11a54:	dfc00417 	ldw	ra,16(sp)
   11a58:	dcc00317 	ldw	r19,12(sp)
   11a5c:	dc800217 	ldw	r18,8(sp)
   11a60:	dc400117 	ldw	r17,4(sp)
   11a64:	dc000017 	ldw	r16,0(sp)
   11a68:	dec00504 	addi	sp,sp,20
   11a6c:	f800283a 	ret
   11a70:	0101ffc4 	movi	r4,2047
   11a74:	813fd626 	beq	r16,r4,119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11a78:	18c02034 	orhi	r3,r3,128
   11a7c:	01000e04 	movi	r4,56
   11a80:	2080a416 	blt	r4,r2,11d14 <__subdf3+0x3d0>
   11a84:	010007c4 	movi	r4,31
   11a88:	2080c716 	blt	r4,r2,11da8 <__subdf3+0x464>
   11a8c:	01000804 	movi	r4,32
   11a90:	2089c83a 	sub	r4,r4,r2
   11a94:	1910983a 	sll	r8,r3,r4
   11a98:	308ed83a 	srl	r7,r6,r2
   11a9c:	3108983a 	sll	r4,r6,r4
   11aa0:	1884d83a 	srl	r2,r3,r2
   11aa4:	41ccb03a 	or	r6,r8,r7
   11aa8:	2008c03a 	cmpne	r4,r4,zero
   11aac:	310cb03a 	or	r6,r6,r4
   11ab0:	898dc83a 	sub	r6,r17,r6
   11ab4:	89a3803a 	cmpltu	r17,r17,r6
   11ab8:	288bc83a 	sub	r5,r5,r2
   11abc:	2c4bc83a 	sub	r5,r5,r17
   11ac0:	3023883a 	mov	r17,r6
   11ac4:	2880202c 	andhi	r2,r5,128
   11ac8:	10006b26 	beq	r2,zero,11c78 <__subdf3+0x334>
   11acc:	04c02034 	movhi	r19,128
   11ad0:	9cffffc4 	addi	r19,r19,-1
   11ad4:	2ce6703a 	and	r19,r5,r19
   11ad8:	98007c26 	beq	r19,zero,11ccc <__subdf3+0x388>
   11adc:	9809883a 	mov	r4,r19
   11ae0:	00124100 	call	12410 <__clzsi2>
   11ae4:	10fffe04 	addi	r3,r2,-8
   11ae8:	010007c4 	movi	r4,31
   11aec:	20c07d16 	blt	r4,r3,11ce4 <__subdf3+0x3a0>
   11af0:	01400a04 	movi	r5,40
   11af4:	2885c83a 	sub	r2,r5,r2
   11af8:	888ad83a 	srl	r5,r17,r2
   11afc:	98e6983a 	sll	r19,r19,r3
   11b00:	88e2983a 	sll	r17,r17,r3
   11b04:	2ce6b03a 	or	r19,r5,r19
   11b08:	1c007a16 	blt	r3,r16,11cf4 <__subdf3+0x3b0>
   11b0c:	1c21c83a 	sub	r16,r3,r16
   11b10:	81400044 	addi	r5,r16,1
   11b14:	00c007c4 	movi	r3,31
   11b18:	19409616 	blt	r3,r5,11d74 <__subdf3+0x430>
   11b1c:	1c21c83a 	sub	r16,r3,r16
   11b20:	8c08983a 	sll	r4,r17,r16
   11b24:	8946d83a 	srl	r3,r17,r5
   11b28:	9c20983a 	sll	r16,r19,r16
   11b2c:	2008c03a 	cmpne	r4,r4,zero
   11b30:	994ad83a 	srl	r5,r19,r5
   11b34:	1c06b03a 	or	r3,r3,r16
   11b38:	1922b03a 	or	r17,r3,r4
   11b3c:	0021883a 	mov	r16,zero
   11b40:	003fa306 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11b44:	2880202c 	andhi	r2,r5,128
   11b48:	9200004c 	andi	r8,r18,1
   11b4c:	103fac1e 	bne	r2,zero,11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11b50:	2804977a 	slli	r2,r5,29
   11b54:	8822d0fa 	srli	r17,r17,3
   11b58:	00c1ffc4 	movi	r3,2047
   11b5c:	280ad0fa 	srli	r5,r5,3
   11b60:	1444b03a 	or	r2,r2,r17
   11b64:	80c02726 	beq	r16,r3,11c04 <__subdf3+0x2c0>
   11b68:	01000434 	movhi	r4,16
   11b6c:	213fffc4 	addi	r4,r4,-1
   11b70:	80e0703a 	and	r16,r16,r3
   11b74:	2908703a 	and	r4,r5,r4
   11b78:	003fad06 	br	11a30 <__alt_mem_Flash_flash_data+0xf4011a30>
   11b7c:	0080690e 	bge	zero,r2,11d24 <__subdf3+0x3e0>
   11b80:	50002f26 	beq	r10,zero,11c40 <__subdf3+0x2fc>
   11b84:	0101ffc4 	movi	r4,2047
   11b88:	813f9126 	beq	r16,r4,119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11b8c:	18c02034 	orhi	r3,r3,128
   11b90:	01000e04 	movi	r4,56
   11b94:	2080b00e 	bge	r4,r2,11e58 <__subdf3+0x514>
   11b98:	198cb03a 	or	r6,r3,r6
   11b9c:	300ec03a 	cmpne	r7,r6,zero
   11ba0:	0005883a 	mov	r2,zero
   11ba4:	3c4f883a 	add	r7,r7,r17
   11ba8:	3c63803a 	cmpltu	r17,r7,r17
   11bac:	114b883a 	add	r5,r2,r5
   11bb0:	2c4b883a 	add	r5,r5,r17
   11bb4:	3823883a 	mov	r17,r7
   11bb8:	2880202c 	andhi	r2,r5,128
   11bbc:	10002e26 	beq	r2,zero,11c78 <__subdf3+0x334>
   11bc0:	84000044 	addi	r16,r16,1
   11bc4:	0081ffc4 	movi	r2,2047
   11bc8:	8080de26 	beq	r16,r2,11f44 <__subdf3+0x600>
   11bcc:	00bfe034 	movhi	r2,65408
   11bd0:	10bfffc4 	addi	r2,r2,-1
   11bd4:	288a703a 	and	r5,r5,r2
   11bd8:	880cd07a 	srli	r6,r17,1
   11bdc:	280897fa 	slli	r4,r5,31
   11be0:	88c0004c 	andi	r3,r17,1
   11be4:	30e2b03a 	or	r17,r6,r3
   11be8:	280ad07a 	srli	r5,r5,1
   11bec:	8922b03a 	or	r17,r17,r4
   11bf0:	003f7706 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11bf4:	1984b03a 	or	r2,r3,r6
   11bf8:	103f6e26 	beq	r2,zero,119b4 <__alt_mem_Flash_flash_data+0xf40119b4>
   11bfc:	39c03fcc 	andi	r7,r7,255
   11c00:	003f6d06 	br	119b8 <__alt_mem_Flash_flash_data+0xf40119b8>
   11c04:	1146b03a 	or	r3,r2,r5
   11c08:	18003f26 	beq	r3,zero,11d08 <__subdf3+0x3c4>
   11c0c:	00c00434 	movhi	r3,16
   11c10:	29000234 	orhi	r4,r5,8
   11c14:	18ffffc4 	addi	r3,r3,-1
   11c18:	20c8703a 	and	r4,r4,r3
   11c1c:	003f8406 	br	11a30 <__alt_mem_Flash_flash_data+0xf4011a30>
   11c20:	10bfffc4 	addi	r2,r2,-1
   11c24:	1000501e 	bne	r2,zero,11d68 <__subdf3+0x424>
   11c28:	898fc83a 	sub	r7,r17,r6
   11c2c:	89e3803a 	cmpltu	r17,r17,r7
   11c30:	28cbc83a 	sub	r5,r5,r3
   11c34:	2c4bc83a 	sub	r5,r5,r17
   11c38:	3823883a 	mov	r17,r7
   11c3c:	003fa106 	br	11ac4 <__alt_mem_Flash_flash_data+0xf4011ac4>
   11c40:	1988b03a 	or	r4,r3,r6
   11c44:	203f6226 	beq	r4,zero,119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11c48:	10bfffc4 	addi	r2,r2,-1
   11c4c:	10009b1e 	bne	r2,zero,11ebc <__subdf3+0x578>
   11c50:	344d883a 	add	r6,r6,r17
   11c54:	3463803a 	cmpltu	r17,r6,r17
   11c58:	194b883a 	add	r5,r3,r5
   11c5c:	2c4b883a 	add	r5,r5,r17
   11c60:	3023883a 	mov	r17,r6
   11c64:	003fd406 	br	11bb8 <__alt_mem_Flash_flash_data+0xf4011bb8>
   11c68:	1106b03a 	or	r3,r2,r4
   11c6c:	1800b426 	beq	r3,zero,11f40 <__subdf3+0x5fc>
   11c70:	100b883a 	mov	r5,r2
   11c74:	2023883a 	mov	r17,r4
   11c78:	888001cc 	andi	r2,r17,7
   11c7c:	103f561e 	bne	r2,zero,119d8 <__alt_mem_Flash_flash_data+0xf40119d8>
   11c80:	9200004c 	andi	r8,r18,1
   11c84:	003fb206 	br	11b50 <__alt_mem_Flash_flash_data+0xf4011b50>
   11c88:	1000531e 	bne	r2,zero,11dd8 <__subdf3+0x494>
   11c8c:	80800044 	addi	r2,r16,1
   11c90:	1081ffcc 	andi	r2,r2,2047
   11c94:	01000044 	movi	r4,1
   11c98:	2080a00e 	bge	r4,r2,11f1c <__subdf3+0x5d8>
   11c9c:	8985c83a 	sub	r2,r17,r6
   11ca0:	8889803a 	cmpltu	r4,r17,r2
   11ca4:	28e7c83a 	sub	r19,r5,r3
   11ca8:	9927c83a 	sub	r19,r19,r4
   11cac:	9900202c 	andhi	r4,r19,128
   11cb0:	20006226 	beq	r4,zero,11e3c <__subdf3+0x4f8>
   11cb4:	3463c83a 	sub	r17,r6,r17
   11cb8:	194bc83a 	sub	r5,r3,r5
   11cbc:	344d803a 	cmpltu	r6,r6,r17
   11cc0:	29a7c83a 	sub	r19,r5,r6
   11cc4:	3825883a 	mov	r18,r7
   11cc8:	983f841e 	bne	r19,zero,11adc <__alt_mem_Flash_flash_data+0xf4011adc>
   11ccc:	8809883a 	mov	r4,r17
   11cd0:	00124100 	call	12410 <__clzsi2>
   11cd4:	10800804 	addi	r2,r2,32
   11cd8:	10fffe04 	addi	r3,r2,-8
   11cdc:	010007c4 	movi	r4,31
   11ce0:	20ff830e 	bge	r4,r3,11af0 <__alt_mem_Flash_flash_data+0xf4011af0>
   11ce4:	14fff604 	addi	r19,r2,-40
   11ce8:	8ce6983a 	sll	r19,r17,r19
   11cec:	0023883a 	mov	r17,zero
   11cf0:	1c3f860e 	bge	r3,r16,11b0c <__alt_mem_Flash_flash_data+0xf4011b0c>
   11cf4:	017fe034 	movhi	r5,65408
   11cf8:	297fffc4 	addi	r5,r5,-1
   11cfc:	80e1c83a 	sub	r16,r16,r3
   11d00:	994a703a 	and	r5,r19,r5
   11d04:	003f3206 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11d08:	0009883a 	mov	r4,zero
   11d0c:	0005883a 	mov	r2,zero
   11d10:	003f4706 	br	11a30 <__alt_mem_Flash_flash_data+0xf4011a30>
   11d14:	198cb03a 	or	r6,r3,r6
   11d18:	300cc03a 	cmpne	r6,r6,zero
   11d1c:	0005883a 	mov	r2,zero
   11d20:	003f6306 	br	11ab0 <__alt_mem_Flash_flash_data+0xf4011ab0>
   11d24:	10009d1e 	bne	r2,zero,11f9c <__subdf3+0x658>
   11d28:	81c00044 	addi	r7,r16,1
   11d2c:	3881ffcc 	andi	r2,r7,2047
   11d30:	02400044 	movi	r9,1
   11d34:	4880680e 	bge	r9,r2,11ed8 <__subdf3+0x594>
   11d38:	0081ffc4 	movi	r2,2047
   11d3c:	3880ae26 	beq	r7,r2,11ff8 <__subdf3+0x6b4>
   11d40:	344d883a 	add	r6,r6,r17
   11d44:	3463803a 	cmpltu	r17,r6,r17
   11d48:	194b883a 	add	r5,r3,r5
   11d4c:	2c4b883a 	add	r5,r5,r17
   11d50:	282297fa 	slli	r17,r5,31
   11d54:	300cd07a 	srli	r6,r6,1
   11d58:	280ad07a 	srli	r5,r5,1
   11d5c:	3821883a 	mov	r16,r7
   11d60:	89a2b03a 	or	r17,r17,r6
   11d64:	003f1a06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11d68:	0101ffc4 	movi	r4,2047
   11d6c:	813f431e 	bne	r16,r4,11a7c <__alt_mem_Flash_flash_data+0xf4011a7c>
   11d70:	003f1706 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11d74:	80bff844 	addi	r2,r16,-31
   11d78:	00c00804 	movi	r3,32
   11d7c:	9884d83a 	srl	r2,r19,r2
   11d80:	28c05126 	beq	r5,r3,11ec8 <__subdf3+0x584>
   11d84:	00c00fc4 	movi	r3,63
   11d88:	1c21c83a 	sub	r16,r3,r16
   11d8c:	9c26983a 	sll	r19,r19,r16
   11d90:	9c62b03a 	or	r17,r19,r17
   11d94:	8822c03a 	cmpne	r17,r17,zero
   11d98:	88a2b03a 	or	r17,r17,r2
   11d9c:	000b883a 	mov	r5,zero
   11da0:	0021883a 	mov	r16,zero
   11da4:	003fb406 	br	11c78 <__alt_mem_Flash_flash_data+0xf4011c78>
   11da8:	113ff804 	addi	r4,r2,-32
   11dac:	01c00804 	movi	r7,32
   11db0:	1908d83a 	srl	r4,r3,r4
   11db4:	11c04626 	beq	r2,r7,11ed0 <__subdf3+0x58c>
   11db8:	01c01004 	movi	r7,64
   11dbc:	3885c83a 	sub	r2,r7,r2
   11dc0:	1884983a 	sll	r2,r3,r2
   11dc4:	118cb03a 	or	r6,r2,r6
   11dc8:	300cc03a 	cmpne	r6,r6,zero
   11dcc:	310cb03a 	or	r6,r6,r4
   11dd0:	0005883a 	mov	r2,zero
   11dd4:	003f3606 	br	11ab0 <__alt_mem_Flash_flash_data+0xf4011ab0>
   11dd8:	80002b26 	beq	r16,zero,11e88 <__subdf3+0x544>
   11ddc:	0101ffc4 	movi	r4,2047
   11de0:	51006926 	beq	r10,r4,11f88 <__subdf3+0x644>
   11de4:	0085c83a 	sub	r2,zero,r2
   11de8:	29402034 	orhi	r5,r5,128
   11dec:	01000e04 	movi	r4,56
   11df0:	20807d16 	blt	r4,r2,11fe8 <__subdf3+0x6a4>
   11df4:	010007c4 	movi	r4,31
   11df8:	2080d916 	blt	r4,r2,12160 <__subdf3+0x81c>
   11dfc:	01000804 	movi	r4,32
   11e00:	2089c83a 	sub	r4,r4,r2
   11e04:	2912983a 	sll	r9,r5,r4
   11e08:	8890d83a 	srl	r8,r17,r2
   11e0c:	8908983a 	sll	r4,r17,r4
   11e10:	2884d83a 	srl	r2,r5,r2
   11e14:	4a22b03a 	or	r17,r9,r8
   11e18:	2008c03a 	cmpne	r4,r4,zero
   11e1c:	8922b03a 	or	r17,r17,r4
   11e20:	3463c83a 	sub	r17,r6,r17
   11e24:	1885c83a 	sub	r2,r3,r2
   11e28:	344d803a 	cmpltu	r6,r6,r17
   11e2c:	118bc83a 	sub	r5,r2,r6
   11e30:	5021883a 	mov	r16,r10
   11e34:	3825883a 	mov	r18,r7
   11e38:	003f2206 	br	11ac4 <__alt_mem_Flash_flash_data+0xf4011ac4>
   11e3c:	9886b03a 	or	r3,r19,r2
   11e40:	18001c1e 	bne	r3,zero,11eb4 <__subdf3+0x570>
   11e44:	0011883a 	mov	r8,zero
   11e48:	000b883a 	mov	r5,zero
   11e4c:	0023883a 	mov	r17,zero
   11e50:	0021883a 	mov	r16,zero
   11e54:	003f3e06 	br	11b50 <__alt_mem_Flash_flash_data+0xf4011b50>
   11e58:	010007c4 	movi	r4,31
   11e5c:	20803c16 	blt	r4,r2,11f50 <__subdf3+0x60c>
   11e60:	01000804 	movi	r4,32
   11e64:	2089c83a 	sub	r4,r4,r2
   11e68:	1912983a 	sll	r9,r3,r4
   11e6c:	308ed83a 	srl	r7,r6,r2
   11e70:	3108983a 	sll	r4,r6,r4
   11e74:	1884d83a 	srl	r2,r3,r2
   11e78:	49ceb03a 	or	r7,r9,r7
   11e7c:	2008c03a 	cmpne	r4,r4,zero
   11e80:	390eb03a 	or	r7,r7,r4
   11e84:	003f4706 	br	11ba4 <__alt_mem_Flash_flash_data+0xf4011ba4>
   11e88:	2c48b03a 	or	r4,r5,r17
   11e8c:	20003e26 	beq	r4,zero,11f88 <__subdf3+0x644>
   11e90:	0084303a 	nor	r2,zero,r2
   11e94:	10003a1e 	bne	r2,zero,11f80 <__subdf3+0x63c>
   11e98:	3463c83a 	sub	r17,r6,r17
   11e9c:	194bc83a 	sub	r5,r3,r5
   11ea0:	344d803a 	cmpltu	r6,r6,r17
   11ea4:	298bc83a 	sub	r5,r5,r6
   11ea8:	5021883a 	mov	r16,r10
   11eac:	3825883a 	mov	r18,r7
   11eb0:	003f0406 	br	11ac4 <__alt_mem_Flash_flash_data+0xf4011ac4>
   11eb4:	1023883a 	mov	r17,r2
   11eb8:	003f0706 	br	11ad8 <__alt_mem_Flash_flash_data+0xf4011ad8>
   11ebc:	0101ffc4 	movi	r4,2047
   11ec0:	813f331e 	bne	r16,r4,11b90 <__alt_mem_Flash_flash_data+0xf4011b90>
   11ec4:	003ec206 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11ec8:	0027883a 	mov	r19,zero
   11ecc:	003fb006 	br	11d90 <__alt_mem_Flash_flash_data+0xf4011d90>
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	003fbb06 	br	11dc4 <__alt_mem_Flash_flash_data+0xf4011dc4>
   11ed8:	2c44b03a 	or	r2,r5,r17
   11edc:	80008b1e 	bne	r16,zero,1210c <__subdf3+0x7c8>
   11ee0:	1000b526 	beq	r2,zero,121b8 <__subdf3+0x874>
   11ee4:	1984b03a 	or	r2,r3,r6
   11ee8:	103eb926 	beq	r2,zero,119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11eec:	3449883a 	add	r4,r6,r17
   11ef0:	2463803a 	cmpltu	r17,r4,r17
   11ef4:	194b883a 	add	r5,r3,r5
   11ef8:	2c4b883a 	add	r5,r5,r17
   11efc:	2880202c 	andhi	r2,r5,128
   11f00:	2023883a 	mov	r17,r4
   11f04:	103f5c26 	beq	r2,zero,11c78 <__alt_mem_Flash_flash_data+0xf4011c78>
   11f08:	00bfe034 	movhi	r2,65408
   11f0c:	10bfffc4 	addi	r2,r2,-1
   11f10:	4821883a 	mov	r16,r9
   11f14:	288a703a 	and	r5,r5,r2
   11f18:	003ead06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11f1c:	2c44b03a 	or	r2,r5,r17
   11f20:	8000291e 	bne	r16,zero,11fc8 <__subdf3+0x684>
   11f24:	10004f1e 	bne	r2,zero,12064 <__subdf3+0x720>
   11f28:	1984b03a 	or	r2,r3,r6
   11f2c:	10000426 	beq	r2,zero,11f40 <__subdf3+0x5fc>
   11f30:	180b883a 	mov	r5,r3
   11f34:	3023883a 	mov	r17,r6
   11f38:	3825883a 	mov	r18,r7
   11f3c:	003ea406 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11f40:	0011883a 	mov	r8,zero
   11f44:	000b883a 	mov	r5,zero
   11f48:	0023883a 	mov	r17,zero
   11f4c:	003f0006 	br	11b50 <__alt_mem_Flash_flash_data+0xf4011b50>
   11f50:	11fff804 	addi	r7,r2,-32
   11f54:	19c8d83a 	srl	r4,r3,r7
   11f58:	01c00804 	movi	r7,32
   11f5c:	11c07e26 	beq	r2,r7,12158 <__subdf3+0x814>
   11f60:	01c01004 	movi	r7,64
   11f64:	3885c83a 	sub	r2,r7,r2
   11f68:	1884983a 	sll	r2,r3,r2
   11f6c:	118cb03a 	or	r6,r2,r6
   11f70:	300ec03a 	cmpne	r7,r6,zero
   11f74:	390eb03a 	or	r7,r7,r4
   11f78:	0005883a 	mov	r2,zero
   11f7c:	003f0906 	br	11ba4 <__alt_mem_Flash_flash_data+0xf4011ba4>
   11f80:	0101ffc4 	movi	r4,2047
   11f84:	513f991e 	bne	r10,r4,11dec <__alt_mem_Flash_flash_data+0xf4011dec>
   11f88:	180b883a 	mov	r5,r3
   11f8c:	3023883a 	mov	r17,r6
   11f90:	5021883a 	mov	r16,r10
   11f94:	3825883a 	mov	r18,r7
   11f98:	003e8d06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11f9c:	80001a1e 	bne	r16,zero,12008 <__subdf3+0x6c4>
   11fa0:	2c48b03a 	or	r4,r5,r17
   11fa4:	20005526 	beq	r4,zero,120fc <__subdf3+0x7b8>
   11fa8:	0084303a 	nor	r2,zero,r2
   11fac:	1000511e 	bne	r2,zero,120f4 <__subdf3+0x7b0>
   11fb0:	89a3883a 	add	r17,r17,r6
   11fb4:	194b883a 	add	r5,r3,r5
   11fb8:	898d803a 	cmpltu	r6,r17,r6
   11fbc:	298b883a 	add	r5,r5,r6
   11fc0:	5021883a 	mov	r16,r10
   11fc4:	003efc06 	br	11bb8 <__alt_mem_Flash_flash_data+0xf4011bb8>
   11fc8:	1000341e 	bne	r2,zero,1209c <__subdf3+0x758>
   11fcc:	1984b03a 	or	r2,r3,r6
   11fd0:	10006f26 	beq	r2,zero,12190 <__subdf3+0x84c>
   11fd4:	180b883a 	mov	r5,r3
   11fd8:	3023883a 	mov	r17,r6
   11fdc:	3825883a 	mov	r18,r7
   11fe0:	0401ffc4 	movi	r16,2047
   11fe4:	003e7a06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   11fe8:	2c62b03a 	or	r17,r5,r17
   11fec:	8822c03a 	cmpne	r17,r17,zero
   11ff0:	0005883a 	mov	r2,zero
   11ff4:	003f8a06 	br	11e20 <__alt_mem_Flash_flash_data+0xf4011e20>
   11ff8:	3821883a 	mov	r16,r7
   11ffc:	000b883a 	mov	r5,zero
   12000:	0023883a 	mov	r17,zero
   12004:	003ed206 	br	11b50 <__alt_mem_Flash_flash_data+0xf4011b50>
   12008:	0101ffc4 	movi	r4,2047
   1200c:	51003b26 	beq	r10,r4,120fc <__subdf3+0x7b8>
   12010:	0085c83a 	sub	r2,zero,r2
   12014:	29402034 	orhi	r5,r5,128
   12018:	01000e04 	movi	r4,56
   1201c:	20806216 	blt	r4,r2,121a8 <__subdf3+0x864>
   12020:	010007c4 	movi	r4,31
   12024:	20806b16 	blt	r4,r2,121d4 <__subdf3+0x890>
   12028:	01000804 	movi	r4,32
   1202c:	2089c83a 	sub	r4,r4,r2
   12030:	2912983a 	sll	r9,r5,r4
   12034:	888ed83a 	srl	r7,r17,r2
   12038:	8908983a 	sll	r4,r17,r4
   1203c:	2884d83a 	srl	r2,r5,r2
   12040:	49e2b03a 	or	r17,r9,r7
   12044:	2008c03a 	cmpne	r4,r4,zero
   12048:	8922b03a 	or	r17,r17,r4
   1204c:	89a3883a 	add	r17,r17,r6
   12050:	10c5883a 	add	r2,r2,r3
   12054:	898d803a 	cmpltu	r6,r17,r6
   12058:	118b883a 	add	r5,r2,r6
   1205c:	5021883a 	mov	r16,r10
   12060:	003ed506 	br	11bb8 <__alt_mem_Flash_flash_data+0xf4011bb8>
   12064:	1984b03a 	or	r2,r3,r6
   12068:	103e5926 	beq	r2,zero,119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   1206c:	8989c83a 	sub	r4,r17,r6
   12070:	8911803a 	cmpltu	r8,r17,r4
   12074:	28c5c83a 	sub	r2,r5,r3
   12078:	1205c83a 	sub	r2,r2,r8
   1207c:	1200202c 	andhi	r8,r2,128
   12080:	403ef926 	beq	r8,zero,11c68 <__alt_mem_Flash_flash_data+0xf4011c68>
   12084:	3463c83a 	sub	r17,r6,r17
   12088:	194bc83a 	sub	r5,r3,r5
   1208c:	344d803a 	cmpltu	r6,r6,r17
   12090:	298bc83a 	sub	r5,r5,r6
   12094:	3825883a 	mov	r18,r7
   12098:	003e4d06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   1209c:	1984b03a 	or	r2,r3,r6
   120a0:	10002b26 	beq	r2,zero,12150 <__subdf3+0x80c>
   120a4:	2808d0fa 	srli	r4,r5,3
   120a8:	8822d0fa 	srli	r17,r17,3
   120ac:	280a977a 	slli	r5,r5,29
   120b0:	2080022c 	andhi	r2,r4,8
   120b4:	2c62b03a 	or	r17,r5,r17
   120b8:	10000826 	beq	r2,zero,120dc <__subdf3+0x798>
   120bc:	1810d0fa 	srli	r8,r3,3
   120c0:	4080022c 	andhi	r2,r8,8
   120c4:	1000051e 	bne	r2,zero,120dc <__subdf3+0x798>
   120c8:	300cd0fa 	srli	r6,r6,3
   120cc:	1804977a 	slli	r2,r3,29
   120d0:	4009883a 	mov	r4,r8
   120d4:	3825883a 	mov	r18,r7
   120d8:	11a2b03a 	or	r17,r2,r6
   120dc:	880ad77a 	srli	r5,r17,29
   120e0:	200890fa 	slli	r4,r4,3
   120e4:	882290fa 	slli	r17,r17,3
   120e8:	0401ffc4 	movi	r16,2047
   120ec:	290ab03a 	or	r5,r5,r4
   120f0:	003e3706 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   120f4:	0101ffc4 	movi	r4,2047
   120f8:	513fc71e 	bne	r10,r4,12018 <__alt_mem_Flash_flash_data+0xf4012018>
   120fc:	180b883a 	mov	r5,r3
   12100:	3023883a 	mov	r17,r6
   12104:	5021883a 	mov	r16,r10
   12108:	003e3106 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   1210c:	10002d26 	beq	r2,zero,121c4 <__subdf3+0x880>
   12110:	1984b03a 	or	r2,r3,r6
   12114:	10000e26 	beq	r2,zero,12150 <__subdf3+0x80c>
   12118:	2808d0fa 	srli	r4,r5,3
   1211c:	8822d0fa 	srli	r17,r17,3
   12120:	280a977a 	slli	r5,r5,29
   12124:	2080022c 	andhi	r2,r4,8
   12128:	2c62b03a 	or	r17,r5,r17
   1212c:	103feb26 	beq	r2,zero,120dc <__alt_mem_Flash_flash_data+0xf40120dc>
   12130:	180ed0fa 	srli	r7,r3,3
   12134:	3880022c 	andhi	r2,r7,8
   12138:	103fe81e 	bne	r2,zero,120dc <__alt_mem_Flash_flash_data+0xf40120dc>
   1213c:	300cd0fa 	srli	r6,r6,3
   12140:	1804977a 	slli	r2,r3,29
   12144:	3809883a 	mov	r4,r7
   12148:	11a2b03a 	or	r17,r2,r6
   1214c:	003fe306 	br	120dc <__alt_mem_Flash_flash_data+0xf40120dc>
   12150:	0401ffc4 	movi	r16,2047
   12154:	003e1e06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   12158:	0005883a 	mov	r2,zero
   1215c:	003f8306 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   12160:	113ff804 	addi	r4,r2,-32
   12164:	02000804 	movi	r8,32
   12168:	2908d83a 	srl	r4,r5,r4
   1216c:	12002526 	beq	r2,r8,12204 <__subdf3+0x8c0>
   12170:	02001004 	movi	r8,64
   12174:	4085c83a 	sub	r2,r8,r2
   12178:	288a983a 	sll	r5,r5,r2
   1217c:	2c62b03a 	or	r17,r5,r17
   12180:	8822c03a 	cmpne	r17,r17,zero
   12184:	8922b03a 	or	r17,r17,r4
   12188:	0005883a 	mov	r2,zero
   1218c:	003f2406 	br	11e20 <__alt_mem_Flash_flash_data+0xf4011e20>
   12190:	01402034 	movhi	r5,128
   12194:	0011883a 	mov	r8,zero
   12198:	297fffc4 	addi	r5,r5,-1
   1219c:	047ffe04 	movi	r17,-8
   121a0:	0401ffc4 	movi	r16,2047
   121a4:	003e6a06 	br	11b50 <__alt_mem_Flash_flash_data+0xf4011b50>
   121a8:	2c62b03a 	or	r17,r5,r17
   121ac:	8822c03a 	cmpne	r17,r17,zero
   121b0:	0005883a 	mov	r2,zero
   121b4:	003fa506 	br	1204c <__alt_mem_Flash_flash_data+0xf401204c>
   121b8:	180b883a 	mov	r5,r3
   121bc:	3023883a 	mov	r17,r6
   121c0:	003e0306 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   121c4:	180b883a 	mov	r5,r3
   121c8:	3023883a 	mov	r17,r6
   121cc:	0401ffc4 	movi	r16,2047
   121d0:	003dff06 	br	119d0 <__alt_mem_Flash_flash_data+0xf40119d0>
   121d4:	113ff804 	addi	r4,r2,-32
   121d8:	01c00804 	movi	r7,32
   121dc:	2908d83a 	srl	r4,r5,r4
   121e0:	11c00a26 	beq	r2,r7,1220c <__subdf3+0x8c8>
   121e4:	01c01004 	movi	r7,64
   121e8:	3885c83a 	sub	r2,r7,r2
   121ec:	288a983a 	sll	r5,r5,r2
   121f0:	2c62b03a 	or	r17,r5,r17
   121f4:	8822c03a 	cmpne	r17,r17,zero
   121f8:	8922b03a 	or	r17,r17,r4
   121fc:	0005883a 	mov	r2,zero
   12200:	003f9206 	br	1204c <__alt_mem_Flash_flash_data+0xf401204c>
   12204:	000b883a 	mov	r5,zero
   12208:	003fdc06 	br	1217c <__alt_mem_Flash_flash_data+0xf401217c>
   1220c:	000b883a 	mov	r5,zero
   12210:	003ff706 	br	121f0 <__alt_mem_Flash_flash_data+0xf40121f0>

00012214 <__fixdfsi>:
   12214:	2806d53a 	srli	r3,r5,20
   12218:	00800434 	movhi	r2,16
   1221c:	10bfffc4 	addi	r2,r2,-1
   12220:	18c1ffcc 	andi	r3,r3,2047
   12224:	0180ff84 	movi	r6,1022
   12228:	2884703a 	and	r2,r5,r2
   1222c:	280ad7fa 	srli	r5,r5,31
   12230:	30c0130e 	bge	r6,r3,12280 <__fixdfsi+0x6c>
   12234:	01810744 	movi	r6,1053
   12238:	30c00d16 	blt	r6,r3,12270 <__fixdfsi+0x5c>
   1223c:	01810cc4 	movi	r6,1075
   12240:	30cdc83a 	sub	r6,r6,r3
   12244:	01c007c4 	movi	r7,31
   12248:	10800434 	orhi	r2,r2,16
   1224c:	39800e0e 	bge	r7,r6,12288 <__fixdfsi+0x74>
   12250:	010104c4 	movi	r4,1043
   12254:	20c7c83a 	sub	r3,r4,r3
   12258:	10c6d83a 	srl	r3,r2,r3
   1225c:	29403fcc 	andi	r5,r5,255
   12260:	0145c83a 	sub	r2,zero,r5
   12264:	1884f03a 	xor	r2,r3,r2
   12268:	1145883a 	add	r2,r2,r5
   1226c:	f800283a 	ret
   12270:	00a00034 	movhi	r2,32768
   12274:	10bfffc4 	addi	r2,r2,-1
   12278:	2885883a 	add	r2,r5,r2
   1227c:	f800283a 	ret
   12280:	0005883a 	mov	r2,zero
   12284:	f800283a 	ret
   12288:	18fefb44 	addi	r3,r3,-1043
   1228c:	2188d83a 	srl	r4,r4,r6
   12290:	10c6983a 	sll	r3,r2,r3
   12294:	20c6b03a 	or	r3,r4,r3
   12298:	003ff006 	br	1225c <__alt_mem_Flash_flash_data+0xf401225c>

0001229c <__floatsidf>:
   1229c:	defffd04 	addi	sp,sp,-12
   122a0:	dc400115 	stw	r17,4(sp)
   122a4:	dfc00215 	stw	ra,8(sp)
   122a8:	dc000015 	stw	r16,0(sp)
   122ac:	2023883a 	mov	r17,r4
   122b0:	20001426 	beq	r4,zero,12304 <__floatsidf+0x68>
   122b4:	2020d7fa 	srli	r16,r4,31
   122b8:	80000126 	beq	r16,zero,122c0 <__floatsidf+0x24>
   122bc:	0123c83a 	sub	r17,zero,r4
   122c0:	8809883a 	mov	r4,r17
   122c4:	00124100 	call	12410 <__clzsi2>
   122c8:	01410784 	movi	r5,1054
   122cc:	00c00284 	movi	r3,10
   122d0:	288bc83a 	sub	r5,r5,r2
   122d4:	18801c16 	blt	r3,r2,12348 <__floatsidf+0xac>
   122d8:	00c002c4 	movi	r3,11
   122dc:	1887c83a 	sub	r3,r3,r2
   122e0:	88c8d83a 	srl	r4,r17,r3
   122e4:	00c00434 	movhi	r3,16
   122e8:	18ffffc4 	addi	r3,r3,-1
   122ec:	10800544 	addi	r2,r2,21
   122f0:	20c8703a 	and	r4,r4,r3
   122f4:	8884983a 	sll	r2,r17,r2
   122f8:	28c1ffcc 	andi	r3,r5,2047
   122fc:	800d883a 	mov	r6,r16
   12300:	00000406 	br	12314 <__floatsidf+0x78>
   12304:	000d883a 	mov	r6,zero
   12308:	0007883a 	mov	r3,zero
   1230c:	0009883a 	mov	r4,zero
   12310:	0005883a 	mov	r2,zero
   12314:	180a953a 	slli	r5,r3,20
   12318:	31803fcc 	andi	r6,r6,255
   1231c:	00c00434 	movhi	r3,16
   12320:	300c97fa 	slli	r6,r6,31
   12324:	18ffffc4 	addi	r3,r3,-1
   12328:	20c6703a 	and	r3,r4,r3
   1232c:	1946b03a 	or	r3,r3,r5
   12330:	1986b03a 	or	r3,r3,r6
   12334:	dfc00217 	ldw	ra,8(sp)
   12338:	dc400117 	ldw	r17,4(sp)
   1233c:	dc000017 	ldw	r16,0(sp)
   12340:	dec00304 	addi	sp,sp,12
   12344:	f800283a 	ret
   12348:	10fffd44 	addi	r3,r2,-11
   1234c:	88c8983a 	sll	r4,r17,r3
   12350:	00800434 	movhi	r2,16
   12354:	10bfffc4 	addi	r2,r2,-1
   12358:	2088703a 	and	r4,r4,r2
   1235c:	28c1ffcc 	andi	r3,r5,2047
   12360:	800d883a 	mov	r6,r16
   12364:	0005883a 	mov	r2,zero
   12368:	003fea06 	br	12314 <__alt_mem_Flash_flash_data+0xf4012314>

0001236c <__floatunsidf>:
   1236c:	defffe04 	addi	sp,sp,-8
   12370:	dc000015 	stw	r16,0(sp)
   12374:	dfc00115 	stw	ra,4(sp)
   12378:	2021883a 	mov	r16,r4
   1237c:	20001026 	beq	r4,zero,123c0 <__floatunsidf+0x54>
   12380:	00124100 	call	12410 <__clzsi2>
   12384:	01410784 	movi	r5,1054
   12388:	100d883a 	mov	r6,r2
   1238c:	288bc83a 	sub	r5,r5,r2
   12390:	00800284 	movi	r2,10
   12394:	11801616 	blt	r2,r6,123f0 <__floatunsidf+0x84>
   12398:	008002c4 	movi	r2,11
   1239c:	1185c83a 	sub	r2,r2,r6
   123a0:	8084d83a 	srl	r2,r16,r2
   123a4:	00c00434 	movhi	r3,16
   123a8:	31c00544 	addi	r7,r6,21
   123ac:	18ffffc4 	addi	r3,r3,-1
   123b0:	81e0983a 	sll	r16,r16,r7
   123b4:	10cc703a 	and	r6,r2,r3
   123b8:	2941ffcc 	andi	r5,r5,2047
   123bc:	00000206 	br	123c8 <__floatunsidf+0x5c>
   123c0:	000b883a 	mov	r5,zero
   123c4:	000d883a 	mov	r6,zero
   123c8:	280a953a 	slli	r5,r5,20
   123cc:	00c00434 	movhi	r3,16
   123d0:	18ffffc4 	addi	r3,r3,-1
   123d4:	30c6703a 	and	r3,r6,r3
   123d8:	8005883a 	mov	r2,r16
   123dc:	1946b03a 	or	r3,r3,r5
   123e0:	dfc00117 	ldw	ra,4(sp)
   123e4:	dc000017 	ldw	r16,0(sp)
   123e8:	dec00204 	addi	sp,sp,8
   123ec:	f800283a 	ret
   123f0:	31bffd44 	addi	r6,r6,-11
   123f4:	818c983a 	sll	r6,r16,r6
   123f8:	00800434 	movhi	r2,16
   123fc:	10bfffc4 	addi	r2,r2,-1
   12400:	2941ffcc 	andi	r5,r5,2047
   12404:	0021883a 	mov	r16,zero
   12408:	308c703a 	and	r6,r6,r2
   1240c:	003fee06 	br	123c8 <__alt_mem_Flash_flash_data+0xf40123c8>

00012410 <__clzsi2>:
   12410:	00bfffd4 	movui	r2,65535
   12414:	11000b36 	bltu	r2,r4,12444 <__clzsi2+0x34>
   12418:	00803fc4 	movi	r2,255
   1241c:	1100122e 	bgeu	r2,r4,12468 <__clzsi2+0x58>
   12420:	00c00204 	movi	r3,8
   12424:	01400604 	movi	r5,24
   12428:	20c8d83a 	srl	r4,r4,r3
   1242c:	008000b4 	movhi	r2,2
   12430:	10bf3504 	addi	r2,r2,-812
   12434:	1109883a 	add	r4,r2,r4
   12438:	20800003 	ldbu	r2,0(r4)
   1243c:	2885c83a 	sub	r2,r5,r2
   12440:	f800283a 	ret
   12444:	00804034 	movhi	r2,256
   12448:	10bfffc4 	addi	r2,r2,-1
   1244c:	11000336 	bltu	r2,r4,1245c <__clzsi2+0x4c>
   12450:	00c00404 	movi	r3,16
   12454:	180b883a 	mov	r5,r3
   12458:	003ff306 	br	12428 <__alt_mem_Flash_flash_data+0xf4012428>
   1245c:	00c00604 	movi	r3,24
   12460:	01400204 	movi	r5,8
   12464:	003ff006 	br	12428 <__alt_mem_Flash_flash_data+0xf4012428>
   12468:	0007883a 	mov	r3,zero
   1246c:	01400804 	movi	r5,32
   12470:	003fed06 	br	12428 <__alt_mem_Flash_flash_data+0xf4012428>

00012474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12474:	defffe04 	addi	sp,sp,-8
   12478:	dfc00115 	stw	ra,4(sp)
   1247c:	df000015 	stw	fp,0(sp)
   12480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12484:	008000b4 	movhi	r2,2
   12488:	1087d704 	addi	r2,r2,8028
   1248c:	10800017 	ldw	r2,0(r2)
   12490:	10000526 	beq	r2,zero,124a8 <alt_get_errno+0x34>
   12494:	008000b4 	movhi	r2,2
   12498:	1087d704 	addi	r2,r2,8028
   1249c:	10800017 	ldw	r2,0(r2)
   124a0:	103ee83a 	callr	r2
   124a4:	00000206 	br	124b0 <alt_get_errno+0x3c>
   124a8:	008000b4 	movhi	r2,2
   124ac:	108fe804 	addi	r2,r2,16288
}
   124b0:	e037883a 	mov	sp,fp
   124b4:	dfc00117 	ldw	ra,4(sp)
   124b8:	df000017 	ldw	fp,0(sp)
   124bc:	dec00204 	addi	sp,sp,8
   124c0:	f800283a 	ret

000124c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   124c4:	defffb04 	addi	sp,sp,-20
   124c8:	dfc00415 	stw	ra,16(sp)
   124cc:	df000315 	stw	fp,12(sp)
   124d0:	df000304 	addi	fp,sp,12
   124d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   124d8:	e0bfff17 	ldw	r2,-4(fp)
   124dc:	10000616 	blt	r2,zero,124f8 <close+0x34>
   124e0:	e0bfff17 	ldw	r2,-4(fp)
   124e4:	10c00324 	muli	r3,r2,12
   124e8:	008000b4 	movhi	r2,2
   124ec:	10826304 	addi	r2,r2,2444
   124f0:	1885883a 	add	r2,r3,r2
   124f4:	00000106 	br	124fc <close+0x38>
   124f8:	0005883a 	mov	r2,zero
   124fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12500:	e0bffd17 	ldw	r2,-12(fp)
   12504:	10001926 	beq	r2,zero,1256c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12508:	e0bffd17 	ldw	r2,-12(fp)
   1250c:	10800017 	ldw	r2,0(r2)
   12510:	10800417 	ldw	r2,16(r2)
   12514:	10000626 	beq	r2,zero,12530 <close+0x6c>
   12518:	e0bffd17 	ldw	r2,-12(fp)
   1251c:	10800017 	ldw	r2,0(r2)
   12520:	10800417 	ldw	r2,16(r2)
   12524:	e13ffd17 	ldw	r4,-12(fp)
   12528:	103ee83a 	callr	r2
   1252c:	00000106 	br	12534 <close+0x70>
   12530:	0005883a 	mov	r2,zero
   12534:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12538:	e13fff17 	ldw	r4,-4(fp)
   1253c:	0012bdc0 	call	12bdc <alt_release_fd>
    if (rval < 0)
   12540:	e0bffe17 	ldw	r2,-8(fp)
   12544:	1000070e 	bge	r2,zero,12564 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12548:	00124740 	call	12474 <alt_get_errno>
   1254c:	1007883a 	mov	r3,r2
   12550:	e0bffe17 	ldw	r2,-8(fp)
   12554:	0085c83a 	sub	r2,zero,r2
   12558:	18800015 	stw	r2,0(r3)
      return -1;
   1255c:	00bfffc4 	movi	r2,-1
   12560:	00000706 	br	12580 <close+0xbc>
    }
    return 0;
   12564:	0005883a 	mov	r2,zero
   12568:	00000506 	br	12580 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1256c:	00124740 	call	12474 <alt_get_errno>
   12570:	1007883a 	mov	r3,r2
   12574:	00801444 	movi	r2,81
   12578:	18800015 	stw	r2,0(r3)
    return -1;
   1257c:	00bfffc4 	movi	r2,-1
  }
}
   12580:	e037883a 	mov	sp,fp
   12584:	dfc00117 	ldw	ra,4(sp)
   12588:	df000017 	ldw	fp,0(sp)
   1258c:	dec00204 	addi	sp,sp,8
   12590:	f800283a 	ret

00012594 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12594:	defffc04 	addi	sp,sp,-16
   12598:	df000315 	stw	fp,12(sp)
   1259c:	df000304 	addi	fp,sp,12
   125a0:	e13ffd15 	stw	r4,-12(fp)
   125a4:	e17ffe15 	stw	r5,-8(fp)
   125a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   125ac:	e0bfff17 	ldw	r2,-4(fp)
}
   125b0:	e037883a 	mov	sp,fp
   125b4:	df000017 	ldw	fp,0(sp)
   125b8:	dec00104 	addi	sp,sp,4
   125bc:	f800283a 	ret

000125c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   125c0:	defffe04 	addi	sp,sp,-8
   125c4:	dfc00115 	stw	ra,4(sp)
   125c8:	df000015 	stw	fp,0(sp)
   125cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   125d0:	008000b4 	movhi	r2,2
   125d4:	1087d704 	addi	r2,r2,8028
   125d8:	10800017 	ldw	r2,0(r2)
   125dc:	10000526 	beq	r2,zero,125f4 <alt_get_errno+0x34>
   125e0:	008000b4 	movhi	r2,2
   125e4:	1087d704 	addi	r2,r2,8028
   125e8:	10800017 	ldw	r2,0(r2)
   125ec:	103ee83a 	callr	r2
   125f0:	00000206 	br	125fc <alt_get_errno+0x3c>
   125f4:	008000b4 	movhi	r2,2
   125f8:	108fe804 	addi	r2,r2,16288
}
   125fc:	e037883a 	mov	sp,fp
   12600:	dfc00117 	ldw	ra,4(sp)
   12604:	df000017 	ldw	fp,0(sp)
   12608:	dec00204 	addi	sp,sp,8
   1260c:	f800283a 	ret

00012610 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12610:	defffb04 	addi	sp,sp,-20
   12614:	dfc00415 	stw	ra,16(sp)
   12618:	df000315 	stw	fp,12(sp)
   1261c:	df000304 	addi	fp,sp,12
   12620:	e13ffe15 	stw	r4,-8(fp)
   12624:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12628:	e0bffe17 	ldw	r2,-8(fp)
   1262c:	10000616 	blt	r2,zero,12648 <fstat+0x38>
   12630:	e0bffe17 	ldw	r2,-8(fp)
   12634:	10c00324 	muli	r3,r2,12
   12638:	008000b4 	movhi	r2,2
   1263c:	10826304 	addi	r2,r2,2444
   12640:	1885883a 	add	r2,r3,r2
   12644:	00000106 	br	1264c <fstat+0x3c>
   12648:	0005883a 	mov	r2,zero
   1264c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12650:	e0bffd17 	ldw	r2,-12(fp)
   12654:	10001026 	beq	r2,zero,12698 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12658:	e0bffd17 	ldw	r2,-12(fp)
   1265c:	10800017 	ldw	r2,0(r2)
   12660:	10800817 	ldw	r2,32(r2)
   12664:	10000726 	beq	r2,zero,12684 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   12668:	e0bffd17 	ldw	r2,-12(fp)
   1266c:	10800017 	ldw	r2,0(r2)
   12670:	10800817 	ldw	r2,32(r2)
   12674:	e13ffd17 	ldw	r4,-12(fp)
   12678:	e17fff17 	ldw	r5,-4(fp)
   1267c:	103ee83a 	callr	r2
   12680:	00000a06 	br	126ac <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	00c80004 	movi	r3,8192
   1268c:	10c00115 	stw	r3,4(r2)
      return 0;
   12690:	0005883a 	mov	r2,zero
   12694:	00000506 	br	126ac <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12698:	00125c00 	call	125c0 <alt_get_errno>
   1269c:	1007883a 	mov	r3,r2
   126a0:	00801444 	movi	r2,81
   126a4:	18800015 	stw	r2,0(r3)
    return -1;
   126a8:	00bfffc4 	movi	r2,-1
  }
}
   126ac:	e037883a 	mov	sp,fp
   126b0:	dfc00117 	ldw	ra,4(sp)
   126b4:	df000017 	ldw	fp,0(sp)
   126b8:	dec00204 	addi	sp,sp,8
   126bc:	f800283a 	ret

000126c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   126c0:	defffe04 	addi	sp,sp,-8
   126c4:	dfc00115 	stw	ra,4(sp)
   126c8:	df000015 	stw	fp,0(sp)
   126cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   126d0:	008000b4 	movhi	r2,2
   126d4:	1087d704 	addi	r2,r2,8028
   126d8:	10800017 	ldw	r2,0(r2)
   126dc:	10000526 	beq	r2,zero,126f4 <alt_get_errno+0x34>
   126e0:	008000b4 	movhi	r2,2
   126e4:	1087d704 	addi	r2,r2,8028
   126e8:	10800017 	ldw	r2,0(r2)
   126ec:	103ee83a 	callr	r2
   126f0:	00000206 	br	126fc <alt_get_errno+0x3c>
   126f4:	008000b4 	movhi	r2,2
   126f8:	108fe804 	addi	r2,r2,16288
}
   126fc:	e037883a 	mov	sp,fp
   12700:	dfc00117 	ldw	ra,4(sp)
   12704:	df000017 	ldw	fp,0(sp)
   12708:	dec00204 	addi	sp,sp,8
   1270c:	f800283a 	ret

00012710 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12710:	deffed04 	addi	sp,sp,-76
   12714:	dfc01215 	stw	ra,72(sp)
   12718:	df001115 	stw	fp,68(sp)
   1271c:	df001104 	addi	fp,sp,68
   12720:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12724:	e0bfff17 	ldw	r2,-4(fp)
   12728:	10000616 	blt	r2,zero,12744 <isatty+0x34>
   1272c:	e0bfff17 	ldw	r2,-4(fp)
   12730:	10c00324 	muli	r3,r2,12
   12734:	008000b4 	movhi	r2,2
   12738:	10826304 	addi	r2,r2,2444
   1273c:	1885883a 	add	r2,r3,r2
   12740:	00000106 	br	12748 <isatty+0x38>
   12744:	0005883a 	mov	r2,zero
   12748:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1274c:	e0bfef17 	ldw	r2,-68(fp)
   12750:	10000e26 	beq	r2,zero,1278c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   12754:	e0bfef17 	ldw	r2,-68(fp)
   12758:	10800017 	ldw	r2,0(r2)
   1275c:	10800817 	ldw	r2,32(r2)
   12760:	1000021e 	bne	r2,zero,1276c <isatty+0x5c>
    {
      return 1;
   12764:	00800044 	movi	r2,1
   12768:	00000d06 	br	127a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1276c:	e0bff004 	addi	r2,fp,-64
   12770:	e13fff17 	ldw	r4,-4(fp)
   12774:	100b883a 	mov	r5,r2
   12778:	00126100 	call	12610 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1277c:	e0bff117 	ldw	r2,-60(fp)
   12780:	10880020 	cmpeqi	r2,r2,8192
   12784:	10803fcc 	andi	r2,r2,255
   12788:	00000506 	br	127a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1278c:	00126c00 	call	126c0 <alt_get_errno>
   12790:	1007883a 	mov	r3,r2
   12794:	00801444 	movi	r2,81
   12798:	18800015 	stw	r2,0(r3)
    return 0;
   1279c:	0005883a 	mov	r2,zero
  }
}
   127a0:	e037883a 	mov	sp,fp
   127a4:	dfc00117 	ldw	ra,4(sp)
   127a8:	df000017 	ldw	fp,0(sp)
   127ac:	dec00204 	addi	sp,sp,8
   127b0:	f800283a 	ret

000127b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   127b4:	defffc04 	addi	sp,sp,-16
   127b8:	df000315 	stw	fp,12(sp)
   127bc:	df000304 	addi	fp,sp,12
   127c0:	e13ffd15 	stw	r4,-12(fp)
   127c4:	e17ffe15 	stw	r5,-8(fp)
   127c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   127cc:	e0fffe17 	ldw	r3,-8(fp)
   127d0:	e0bffd17 	ldw	r2,-12(fp)
   127d4:	18800c26 	beq	r3,r2,12808 <alt_load_section+0x54>
  {
    while( to != end )
   127d8:	00000806 	br	127fc <alt_load_section+0x48>
    {
      *to++ = *from++;
   127dc:	e0bffe17 	ldw	r2,-8(fp)
   127e0:	10c00104 	addi	r3,r2,4
   127e4:	e0fffe15 	stw	r3,-8(fp)
   127e8:	e0fffd17 	ldw	r3,-12(fp)
   127ec:	19000104 	addi	r4,r3,4
   127f0:	e13ffd15 	stw	r4,-12(fp)
   127f4:	18c00017 	ldw	r3,0(r3)
   127f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   127fc:	e0fffe17 	ldw	r3,-8(fp)
   12800:	e0bfff17 	ldw	r2,-4(fp)
   12804:	18bff51e 	bne	r3,r2,127dc <__alt_mem_Flash_flash_data+0xf40127dc>
    {
      *to++ = *from++;
    }
  }
}
   12808:	e037883a 	mov	sp,fp
   1280c:	df000017 	ldw	fp,0(sp)
   12810:	dec00104 	addi	sp,sp,4
   12814:	f800283a 	ret

00012818 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12818:	defffe04 	addi	sp,sp,-8
   1281c:	dfc00115 	stw	ra,4(sp)
   12820:	df000015 	stw	fp,0(sp)
   12824:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12828:	010000b4 	movhi	r4,2
   1282c:	2107fb04 	addi	r4,r4,8172
   12830:	014000b4 	movhi	r5,2
   12834:	29403004 	addi	r5,r5,192
   12838:	018000b4 	movhi	r6,2
   1283c:	3187fb04 	addi	r6,r6,8172
   12840:	00127b40 	call	127b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12844:	01000034 	movhi	r4,0
   12848:	21000804 	addi	r4,r4,32
   1284c:	01400034 	movhi	r5,0
   12850:	29400804 	addi	r5,r5,32
   12854:	01800034 	movhi	r6,0
   12858:	31809104 	addi	r6,r6,580
   1285c:	00127b40 	call	127b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12860:	010000b4 	movhi	r4,2
   12864:	213d9e04 	addi	r4,r4,-2440
   12868:	014000b4 	movhi	r5,2
   1286c:	297d9e04 	addi	r5,r5,-2440
   12870:	018000b4 	movhi	r6,2
   12874:	31803004 	addi	r6,r6,192
   12878:	00127b40 	call	127b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1287c:	001e2c00 	call	1e2c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12880:	001e5180 	call	1e518 <alt_icache_flush_all>
}
   12884:	e037883a 	mov	sp,fp
   12888:	dfc00117 	ldw	ra,4(sp)
   1288c:	df000017 	ldw	fp,0(sp)
   12890:	dec00204 	addi	sp,sp,8
   12894:	f800283a 	ret

00012898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12898:	defffe04 	addi	sp,sp,-8
   1289c:	dfc00115 	stw	ra,4(sp)
   128a0:	df000015 	stw	fp,0(sp)
   128a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   128a8:	008000b4 	movhi	r2,2
   128ac:	1087d704 	addi	r2,r2,8028
   128b0:	10800017 	ldw	r2,0(r2)
   128b4:	10000526 	beq	r2,zero,128cc <alt_get_errno+0x34>
   128b8:	008000b4 	movhi	r2,2
   128bc:	1087d704 	addi	r2,r2,8028
   128c0:	10800017 	ldw	r2,0(r2)
   128c4:	103ee83a 	callr	r2
   128c8:	00000206 	br	128d4 <alt_get_errno+0x3c>
   128cc:	008000b4 	movhi	r2,2
   128d0:	108fe804 	addi	r2,r2,16288
}
   128d4:	e037883a 	mov	sp,fp
   128d8:	dfc00117 	ldw	ra,4(sp)
   128dc:	df000017 	ldw	fp,0(sp)
   128e0:	dec00204 	addi	sp,sp,8
   128e4:	f800283a 	ret

000128e8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   128e8:	defff904 	addi	sp,sp,-28
   128ec:	dfc00615 	stw	ra,24(sp)
   128f0:	df000515 	stw	fp,20(sp)
   128f4:	df000504 	addi	fp,sp,20
   128f8:	e13ffd15 	stw	r4,-12(fp)
   128fc:	e17ffe15 	stw	r5,-8(fp)
   12900:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12904:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12908:	e0bffd17 	ldw	r2,-12(fp)
   1290c:	10000616 	blt	r2,zero,12928 <lseek+0x40>
   12910:	e0bffd17 	ldw	r2,-12(fp)
   12914:	10c00324 	muli	r3,r2,12
   12918:	008000b4 	movhi	r2,2
   1291c:	10826304 	addi	r2,r2,2444
   12920:	1885883a 	add	r2,r3,r2
   12924:	00000106 	br	1292c <lseek+0x44>
   12928:	0005883a 	mov	r2,zero
   1292c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12930:	e0bffc17 	ldw	r2,-16(fp)
   12934:	10001026 	beq	r2,zero,12978 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12938:	e0bffc17 	ldw	r2,-16(fp)
   1293c:	10800017 	ldw	r2,0(r2)
   12940:	10800717 	ldw	r2,28(r2)
   12944:	10000926 	beq	r2,zero,1296c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12948:	e0bffc17 	ldw	r2,-16(fp)
   1294c:	10800017 	ldw	r2,0(r2)
   12950:	10800717 	ldw	r2,28(r2)
   12954:	e13ffc17 	ldw	r4,-16(fp)
   12958:	e17ffe17 	ldw	r5,-8(fp)
   1295c:	e1bfff17 	ldw	r6,-4(fp)
   12960:	103ee83a 	callr	r2
   12964:	e0bffb15 	stw	r2,-20(fp)
   12968:	00000506 	br	12980 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1296c:	00bfde84 	movi	r2,-134
   12970:	e0bffb15 	stw	r2,-20(fp)
   12974:	00000206 	br	12980 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   12978:	00bfebc4 	movi	r2,-81
   1297c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12980:	e0bffb17 	ldw	r2,-20(fp)
   12984:	1000070e 	bge	r2,zero,129a4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12988:	00128980 	call	12898 <alt_get_errno>
   1298c:	1007883a 	mov	r3,r2
   12990:	e0bffb17 	ldw	r2,-20(fp)
   12994:	0085c83a 	sub	r2,zero,r2
   12998:	18800015 	stw	r2,0(r3)
    rc = -1;
   1299c:	00bfffc4 	movi	r2,-1
   129a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   129a4:	e0bffb17 	ldw	r2,-20(fp)
}
   129a8:	e037883a 	mov	sp,fp
   129ac:	dfc00117 	ldw	ra,4(sp)
   129b0:	df000017 	ldw	fp,0(sp)
   129b4:	dec00204 	addi	sp,sp,8
   129b8:	f800283a 	ret

000129bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   129bc:	defff904 	addi	sp,sp,-28
   129c0:	dfc00615 	stw	ra,24(sp)
   129c4:	df000515 	stw	fp,20(sp)
   129c8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   129cc:	0009883a 	mov	r4,zero
   129d0:	001b9900 	call	1b990 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   129d4:	00139ac0 	call	139ac <OSInit>
   129d8:	01000044 	movi	r4,1
   129dc:	00190a40 	call	190a4 <OSSemCreate>
   129e0:	1007883a 	mov	r3,r2
   129e4:	008000b4 	movhi	r2,2
   129e8:	108fee04 	addi	r2,r2,16312
   129ec:	10c00015 	stw	r3,0(r2)
   129f0:	01000044 	movi	r4,1
   129f4:	00190a40 	call	190a4 <OSSemCreate>
   129f8:	1007883a 	mov	r3,r2
   129fc:	008000b4 	movhi	r2,2
   12a00:	108ff004 	addi	r2,r2,16320
   12a04:	10c00015 	stw	r3,0(r2)
   12a08:	008000b4 	movhi	r2,2
   12a0c:	108fe904 	addi	r2,r2,16292
   12a10:	e0bffc15 	stw	r2,-16(fp)
   12a14:	00800044 	movi	r2,1
   12a18:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12a1c:	e0bffd0b 	ldhu	r2,-12(fp)
   12a20:	1009883a 	mov	r4,r2
   12a24:	00190a40 	call	190a4 <OSSemCreate>
   12a28:	1007883a 	mov	r3,r2
   12a2c:	e0bffc17 	ldw	r2,-16(fp)
   12a30:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12a34:	001b9c40 	call	1b9c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12a38:	010000b4 	movhi	r4,2
   12a3c:	213f7804 	addi	r4,r4,-544
   12a40:	014000b4 	movhi	r5,2
   12a44:	297f7804 	addi	r5,r5,-544
   12a48:	018000b4 	movhi	r6,2
   12a4c:	31bf7804 	addi	r6,r6,-544
   12a50:	001e6080 	call	1e608 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12a54:	001e3d00 	call	1e3d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12a58:	010000b4 	movhi	r4,2
   12a5c:	21390b04 	addi	r4,r4,-7124
   12a60:	001f2cc0 	call	1f2cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12a64:	d1282b17 	ldw	r4,-24404(gp)
   12a68:	d0e82c17 	ldw	r3,-24400(gp)
   12a6c:	d0a82d17 	ldw	r2,-24396(gp)
   12a70:	180b883a 	mov	r5,r3
   12a74:	100d883a 	mov	r6,r2
   12a78:	00022c80 	call	22c8 <main>
   12a7c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12a80:	01000044 	movi	r4,1
   12a84:	00124c40 	call	124c4 <close>
  exit (result);
   12a88:	e13ffb17 	ldw	r4,-20(fp)
   12a8c:	001f2e00 	call	1f2e0 <exit>

00012a90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a90:	defffe04 	addi	sp,sp,-8
   12a94:	dfc00115 	stw	ra,4(sp)
   12a98:	df000015 	stw	fp,0(sp)
   12a9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12aa0:	008000b4 	movhi	r2,2
   12aa4:	1087d704 	addi	r2,r2,8028
   12aa8:	10800017 	ldw	r2,0(r2)
   12aac:	10000526 	beq	r2,zero,12ac4 <alt_get_errno+0x34>
   12ab0:	008000b4 	movhi	r2,2
   12ab4:	1087d704 	addi	r2,r2,8028
   12ab8:	10800017 	ldw	r2,0(r2)
   12abc:	103ee83a 	callr	r2
   12ac0:	00000206 	br	12acc <alt_get_errno+0x3c>
   12ac4:	008000b4 	movhi	r2,2
   12ac8:	108fe804 	addi	r2,r2,16288
}
   12acc:	e037883a 	mov	sp,fp
   12ad0:	dfc00117 	ldw	ra,4(sp)
   12ad4:	df000017 	ldw	fp,0(sp)
   12ad8:	dec00204 	addi	sp,sp,8
   12adc:	f800283a 	ret

00012ae0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12ae0:	defff904 	addi	sp,sp,-28
   12ae4:	dfc00615 	stw	ra,24(sp)
   12ae8:	df000515 	stw	fp,20(sp)
   12aec:	df000504 	addi	fp,sp,20
   12af0:	e13ffd15 	stw	r4,-12(fp)
   12af4:	e17ffe15 	stw	r5,-8(fp)
   12af8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12afc:	e0bffd17 	ldw	r2,-12(fp)
   12b00:	10000616 	blt	r2,zero,12b1c <read+0x3c>
   12b04:	e0bffd17 	ldw	r2,-12(fp)
   12b08:	10c00324 	muli	r3,r2,12
   12b0c:	008000b4 	movhi	r2,2
   12b10:	10826304 	addi	r2,r2,2444
   12b14:	1885883a 	add	r2,r3,r2
   12b18:	00000106 	br	12b20 <read+0x40>
   12b1c:	0005883a 	mov	r2,zero
   12b20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12b24:	e0bffb17 	ldw	r2,-20(fp)
   12b28:	10002226 	beq	r2,zero,12bb4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12b2c:	e0bffb17 	ldw	r2,-20(fp)
   12b30:	10800217 	ldw	r2,8(r2)
   12b34:	108000cc 	andi	r2,r2,3
   12b38:	10800060 	cmpeqi	r2,r2,1
   12b3c:	1000181e 	bne	r2,zero,12ba0 <read+0xc0>
        (fd->dev->read))
   12b40:	e0bffb17 	ldw	r2,-20(fp)
   12b44:	10800017 	ldw	r2,0(r2)
   12b48:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12b4c:	10001426 	beq	r2,zero,12ba0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12b50:	e0bffb17 	ldw	r2,-20(fp)
   12b54:	10800017 	ldw	r2,0(r2)
   12b58:	10800517 	ldw	r2,20(r2)
   12b5c:	e0ffff17 	ldw	r3,-4(fp)
   12b60:	e13ffb17 	ldw	r4,-20(fp)
   12b64:	e17ffe17 	ldw	r5,-8(fp)
   12b68:	180d883a 	mov	r6,r3
   12b6c:	103ee83a 	callr	r2
   12b70:	e0bffc15 	stw	r2,-16(fp)
   12b74:	e0bffc17 	ldw	r2,-16(fp)
   12b78:	1000070e 	bge	r2,zero,12b98 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12b7c:	0012a900 	call	12a90 <alt_get_errno>
   12b80:	1007883a 	mov	r3,r2
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	0085c83a 	sub	r2,zero,r2
   12b8c:	18800015 	stw	r2,0(r3)
          return -1;
   12b90:	00bfffc4 	movi	r2,-1
   12b94:	00000c06 	br	12bc8 <read+0xe8>
        }
        return rval;
   12b98:	e0bffc17 	ldw	r2,-16(fp)
   12b9c:	00000a06 	br	12bc8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12ba0:	0012a900 	call	12a90 <alt_get_errno>
   12ba4:	1007883a 	mov	r3,r2
   12ba8:	00800344 	movi	r2,13
   12bac:	18800015 	stw	r2,0(r3)
   12bb0:	00000406 	br	12bc4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12bb4:	0012a900 	call	12a90 <alt_get_errno>
   12bb8:	1007883a 	mov	r3,r2
   12bbc:	00801444 	movi	r2,81
   12bc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12bc4:	00bfffc4 	movi	r2,-1
}
   12bc8:	e037883a 	mov	sp,fp
   12bcc:	dfc00117 	ldw	ra,4(sp)
   12bd0:	df000017 	ldw	fp,0(sp)
   12bd4:	dec00204 	addi	sp,sp,8
   12bd8:	f800283a 	ret

00012bdc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12bdc:	defffe04 	addi	sp,sp,-8
   12be0:	df000115 	stw	fp,4(sp)
   12be4:	df000104 	addi	fp,sp,4
   12be8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12bec:	e0bfff17 	ldw	r2,-4(fp)
   12bf0:	108000d0 	cmplti	r2,r2,3
   12bf4:	10000d1e 	bne	r2,zero,12c2c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12bf8:	008000b4 	movhi	r2,2
   12bfc:	10826304 	addi	r2,r2,2444
   12c00:	e0ffff17 	ldw	r3,-4(fp)
   12c04:	18c00324 	muli	r3,r3,12
   12c08:	18c00204 	addi	r3,r3,8
   12c0c:	10c5883a 	add	r2,r2,r3
   12c10:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12c14:	008000b4 	movhi	r2,2
   12c18:	10826304 	addi	r2,r2,2444
   12c1c:	e0ffff17 	ldw	r3,-4(fp)
   12c20:	18c00324 	muli	r3,r3,12
   12c24:	10c5883a 	add	r2,r2,r3
   12c28:	10000015 	stw	zero,0(r2)
  }
}
   12c2c:	e037883a 	mov	sp,fp
   12c30:	df000017 	ldw	fp,0(sp)
   12c34:	dec00104 	addi	sp,sp,4
   12c38:	f800283a 	ret

00012c3c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12c3c:	defff904 	addi	sp,sp,-28
   12c40:	df000615 	stw	fp,24(sp)
   12c44:	df000604 	addi	fp,sp,24
   12c48:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c4c:	0005303a 	rdctl	r2,status
   12c50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c54:	e0fffc17 	ldw	r3,-16(fp)
   12c58:	00bfff84 	movi	r2,-2
   12c5c:	1884703a 	and	r2,r3,r2
   12c60:	1001703a 	wrctl	status,r2
  
  return context;
   12c64:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12c68:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12c6c:	d0a01917 	ldw	r2,-32668(gp)
   12c70:	10c000c4 	addi	r3,r2,3
   12c74:	00bfff04 	movi	r2,-4
   12c78:	1884703a 	and	r2,r3,r2
   12c7c:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12c80:	d0e01917 	ldw	r3,-32668(gp)
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	1887883a 	add	r3,r3,r2
   12c8c:	00810034 	movhi	r2,1024
   12c90:	10800004 	addi	r2,r2,0
   12c94:	10c0062e 	bgeu	r2,r3,12cb0 <sbrk+0x74>
   12c98:	e0bffa17 	ldw	r2,-24(fp)
   12c9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ca0:	e0bffd17 	ldw	r2,-12(fp)
   12ca4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12ca8:	00bfffc4 	movi	r2,-1
   12cac:	00000b06 	br	12cdc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12cb0:	d0a01917 	ldw	r2,-32668(gp)
   12cb4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   12cb8:	d0e01917 	ldw	r3,-32668(gp)
   12cbc:	e0bfff17 	ldw	r2,-4(fp)
   12cc0:	1885883a 	add	r2,r3,r2
   12cc4:	d0a01915 	stw	r2,-32668(gp)
   12cc8:	e0bffa17 	ldw	r2,-24(fp)
   12ccc:	e0bffe15 	stw	r2,-8(fp)
   12cd0:	e0bffe17 	ldw	r2,-8(fp)
   12cd4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
} 
   12cdc:	e037883a 	mov	sp,fp
   12ce0:	df000017 	ldw	fp,0(sp)
   12ce4:	dec00104 	addi	sp,sp,4
   12ce8:	f800283a 	ret

00012cec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12cec:	defffe04 	addi	sp,sp,-8
   12cf0:	dfc00115 	stw	ra,4(sp)
   12cf4:	df000015 	stw	fp,0(sp)
   12cf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12cfc:	008000b4 	movhi	r2,2
   12d00:	1087d704 	addi	r2,r2,8028
   12d04:	10800017 	ldw	r2,0(r2)
   12d08:	10000526 	beq	r2,zero,12d20 <alt_get_errno+0x34>
   12d0c:	008000b4 	movhi	r2,2
   12d10:	1087d704 	addi	r2,r2,8028
   12d14:	10800017 	ldw	r2,0(r2)
   12d18:	103ee83a 	callr	r2
   12d1c:	00000206 	br	12d28 <alt_get_errno+0x3c>
   12d20:	008000b4 	movhi	r2,2
   12d24:	108fe804 	addi	r2,r2,16288
}
   12d28:	e037883a 	mov	sp,fp
   12d2c:	dfc00117 	ldw	ra,4(sp)
   12d30:	df000017 	ldw	fp,0(sp)
   12d34:	dec00204 	addi	sp,sp,8
   12d38:	f800283a 	ret

00012d3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12d3c:	defff904 	addi	sp,sp,-28
   12d40:	dfc00615 	stw	ra,24(sp)
   12d44:	df000515 	stw	fp,20(sp)
   12d48:	df000504 	addi	fp,sp,20
   12d4c:	e13ffd15 	stw	r4,-12(fp)
   12d50:	e17ffe15 	stw	r5,-8(fp)
   12d54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12d58:	e0bffd17 	ldw	r2,-12(fp)
   12d5c:	10000616 	blt	r2,zero,12d78 <write+0x3c>
   12d60:	e0bffd17 	ldw	r2,-12(fp)
   12d64:	10c00324 	muli	r3,r2,12
   12d68:	008000b4 	movhi	r2,2
   12d6c:	10826304 	addi	r2,r2,2444
   12d70:	1885883a 	add	r2,r3,r2
   12d74:	00000106 	br	12d7c <write+0x40>
   12d78:	0005883a 	mov	r2,zero
   12d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12d80:	e0bffb17 	ldw	r2,-20(fp)
   12d84:	10002126 	beq	r2,zero,12e0c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12d88:	e0bffb17 	ldw	r2,-20(fp)
   12d8c:	10800217 	ldw	r2,8(r2)
   12d90:	108000cc 	andi	r2,r2,3
   12d94:	10001826 	beq	r2,zero,12df8 <write+0xbc>
   12d98:	e0bffb17 	ldw	r2,-20(fp)
   12d9c:	10800017 	ldw	r2,0(r2)
   12da0:	10800617 	ldw	r2,24(r2)
   12da4:	10001426 	beq	r2,zero,12df8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12da8:	e0bffb17 	ldw	r2,-20(fp)
   12dac:	10800017 	ldw	r2,0(r2)
   12db0:	10800617 	ldw	r2,24(r2)
   12db4:	e0ffff17 	ldw	r3,-4(fp)
   12db8:	e13ffb17 	ldw	r4,-20(fp)
   12dbc:	e17ffe17 	ldw	r5,-8(fp)
   12dc0:	180d883a 	mov	r6,r3
   12dc4:	103ee83a 	callr	r2
   12dc8:	e0bffc15 	stw	r2,-16(fp)
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	1000070e 	bge	r2,zero,12df0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12dd4:	0012cec0 	call	12cec <alt_get_errno>
   12dd8:	1007883a 	mov	r3,r2
   12ddc:	e0bffc17 	ldw	r2,-16(fp)
   12de0:	0085c83a 	sub	r2,zero,r2
   12de4:	18800015 	stw	r2,0(r3)
        return -1;
   12de8:	00bfffc4 	movi	r2,-1
   12dec:	00000c06 	br	12e20 <write+0xe4>
      }
      return rval;
   12df0:	e0bffc17 	ldw	r2,-16(fp)
   12df4:	00000a06 	br	12e20 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12df8:	0012cec0 	call	12cec <alt_get_errno>
   12dfc:	1007883a 	mov	r3,r2
   12e00:	00800344 	movi	r2,13
   12e04:	18800015 	stw	r2,0(r3)
   12e08:	00000406 	br	12e1c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12e0c:	0012cec0 	call	12cec <alt_get_errno>
   12e10:	1007883a 	mov	r3,r2
   12e14:	00801444 	movi	r2,81
   12e18:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12e1c:	00bfffc4 	movi	r2,-1
}
   12e20:	e037883a 	mov	sp,fp
   12e24:	dfc00117 	ldw	ra,4(sp)
   12e28:	df000017 	ldw	fp,0(sp)
   12e2c:	dec00204 	addi	sp,sp,8
   12e30:	f800283a 	ret

00012e34 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12e34:	deffdf04 	addi	sp,sp,-132
   12e38:	dfc02015 	stw	ra,128(sp)
   12e3c:	df001f15 	stw	fp,124(sp)
   12e40:	df001f04 	addi	fp,sp,124
   12e44:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12e48:	e0bfe204 	addi	r2,fp,-120
   12e4c:	01003fc4 	movi	r4,255
   12e50:	100b883a 	mov	r5,r2
   12e54:	001b2580 	call	1b258 <OSTaskQuery>
   12e58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12e5c:	e0bffe83 	ldbu	r2,-6(fp)
   12e60:	10803fcc 	andi	r2,r2,255
   12e64:	10000126 	beq	r2,zero,12e6c <__env_lock+0x38>
    return;
   12e68:	00001d06 	br	12ee0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   12e6c:	e0bfee83 	ldbu	r2,-70(fp)
   12e70:	10803fcc 	andi	r2,r2,255
   12e74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   12e78:	d0e82f17 	ldw	r3,-24388(gp)
   12e7c:	e0bffd04 	addi	r2,fp,-12
   12e80:	1809883a 	mov	r4,r3
   12e84:	100b883a 	mov	r5,r2
   12e88:	00198f00 	call	198f0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   12e8c:	e0bffe43 	ldbu	r2,-7(fp)
   12e90:	10803fcc 	andi	r2,r2,255
   12e94:	10000726 	beq	r2,zero,12eb4 <__env_lock+0x80>
   12e98:	d0a01a17 	ldw	r2,-32664(gp)
   12e9c:	e0ffe117 	ldw	r3,-124(fp)
   12ea0:	1880041e 	bne	r3,r2,12eb4 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   12ea4:	d0a82e17 	ldw	r2,-24392(gp)
   12ea8:	10800044 	addi	r2,r2,1
   12eac:	d0a82e15 	stw	r2,-24392(gp)
   12eb0:	00000a06 	br	12edc <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   12eb4:	d0e82f17 	ldw	r3,-24388(gp)
   12eb8:	e0bffe84 	addi	r2,fp,-6
   12ebc:	1809883a 	mov	r4,r3
   12ec0:	000b883a 	mov	r5,zero
   12ec4:	100d883a 	mov	r6,r2
   12ec8:	001940c0 	call	1940c <OSSemPend>
    locks  = 1;
   12ecc:	00800044 	movi	r2,1
   12ed0:	d0a82e15 	stw	r2,-24392(gp)
    lockid = id;
   12ed4:	e0bfe117 	ldw	r2,-124(fp)
   12ed8:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   12edc:	0001883a 	nop
}
   12ee0:	e037883a 	mov	sp,fp
   12ee4:	dfc00117 	ldw	ra,4(sp)
   12ee8:	df000017 	ldw	fp,0(sp)
   12eec:	dec00204 	addi	sp,sp,8
   12ef0:	f800283a 	ret

00012ef4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   12ef4:	defffd04 	addi	sp,sp,-12
   12ef8:	dfc00215 	stw	ra,8(sp)
   12efc:	df000115 	stw	fp,4(sp)
   12f00:	df000104 	addi	fp,sp,4
   12f04:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   12f08:	d0a82e17 	ldw	r2,-24392(gp)
   12f0c:	1000011e 	bne	r2,zero,12f14 <__env_unlock+0x20>
    return;
   12f10:	00000a06 	br	12f3c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   12f14:	d0a82e17 	ldw	r2,-24392(gp)
   12f18:	10bfffc4 	addi	r2,r2,-1
   12f1c:	d0a82e15 	stw	r2,-24392(gp)
   12f20:	d0a82e17 	ldw	r2,-24392(gp)
   12f24:	1000051e 	bne	r2,zero,12f3c <__env_unlock+0x48>
  {
    lockid = -1;
   12f28:	00bfffc4 	movi	r2,-1
   12f2c:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
   12f30:	d0a82f17 	ldw	r2,-24388(gp)
   12f34:	1009883a 	mov	r4,r2
   12f38:	00197e00 	call	197e0 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   12f3c:	e037883a 	mov	sp,fp
   12f40:	dfc00117 	ldw	ra,4(sp)
   12f44:	df000017 	ldw	fp,0(sp)
   12f48:	dec00204 	addi	sp,sp,8
   12f4c:	f800283a 	ret

00012f50 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   12f50:	deffdb04 	addi	sp,sp,-148
   12f54:	dfc02415 	stw	ra,144(sp)
   12f58:	df002315 	stw	fp,140(sp)
   12f5c:	df002304 	addi	fp,sp,140
   12f60:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12f64:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   12f68:	008000b4 	movhi	r2,2
   12f6c:	108ff144 	addi	r2,r2,16325
   12f70:	10800003 	ldbu	r2,0(r2)
   12f74:	10803fcc 	andi	r2,r2,255
   12f78:	10800060 	cmpeqi	r2,r2,1
   12f7c:	1000011e 	bne	r2,zero,12f84 <__malloc_lock+0x34>
      return;
   12f80:	00003606 	br	1305c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12f84:	e0bfe204 	addi	r2,fp,-120
   12f88:	01003fc4 	movi	r4,255
   12f8c:	100b883a 	mov	r5,r2
   12f90:	001b2580 	call	1b258 <OSTaskQuery>
   12f94:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   12f98:	e0bffe83 	ldbu	r2,-6(fp)
   12f9c:	10803fcc 	andi	r2,r2,255
   12fa0:	10000126 	beq	r2,zero,12fa8 <__malloc_lock+0x58>
    return;
   12fa4:	00002d06 	br	1305c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   12fa8:	e0bfee83 	ldbu	r2,-70(fp)
   12fac:	10803fcc 	andi	r2,r2,255
   12fb0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   12fb4:	d0e83117 	ldw	r3,-24380(gp)
   12fb8:	e0bffd04 	addi	r2,fp,-12
   12fbc:	1809883a 	mov	r4,r3
   12fc0:	100b883a 	mov	r5,r2
   12fc4:	00198f00 	call	198f0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fc8:	0005303a 	rdctl	r2,status
   12fcc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fd0:	e0ffdf17 	ldw	r3,-132(fp)
   12fd4:	00bfff84 	movi	r2,-2
   12fd8:	1884703a 	and	r2,r3,r2
   12fdc:	1001703a 	wrctl	status,r2
  
  return context;
   12fe0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   12fe4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   12fe8:	e0bffd0b 	ldhu	r2,-12(fp)
   12fec:	10bfffcc 	andi	r2,r2,65535
   12ff0:	10000b1e 	bne	r2,zero,13020 <__malloc_lock+0xd0>
   12ff4:	d0a01b17 	ldw	r2,-32660(gp)
   12ff8:	e0ffde17 	ldw	r3,-136(fp)
   12ffc:	1880081e 	bne	r3,r2,13020 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   13000:	d0a83017 	ldw	r2,-24384(gp)
   13004:	10800044 	addi	r2,r2,1
   13008:	d0a83015 	stw	r2,-24384(gp)
   1300c:	e0bfdd17 	ldw	r2,-140(fp)
   13010:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13014:	e0bfe017 	ldw	r2,-128(fp)
   13018:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1301c:	00000e06 	br	13058 <__malloc_lock+0x108>
   13020:	e0bfdd17 	ldw	r2,-140(fp)
   13024:	e0bfe115 	stw	r2,-124(fp)
   13028:	e0bfe117 	ldw	r2,-124(fp)
   1302c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13030:	d0e83117 	ldw	r3,-24380(gp)
   13034:	e0bffe84 	addi	r2,fp,-6
   13038:	1809883a 	mov	r4,r3
   1303c:	000b883a 	mov	r5,zero
   13040:	100d883a 	mov	r6,r2
   13044:	001940c0 	call	1940c <OSSemPend>
    locks  = 1;
   13048:	00800044 	movi	r2,1
   1304c:	d0a83015 	stw	r2,-24384(gp)
    lockid = id;
   13050:	e0bfde17 	ldw	r2,-136(fp)
   13054:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13058:	0001883a 	nop
}
   1305c:	e037883a 	mov	sp,fp
   13060:	dfc00117 	ldw	ra,4(sp)
   13064:	df000017 	ldw	fp,0(sp)
   13068:	dec00204 	addi	sp,sp,8
   1306c:	f800283a 	ret

00013070 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13070:	defff804 	addi	sp,sp,-32
   13074:	dfc00715 	stw	ra,28(sp)
   13078:	df000615 	stw	fp,24(sp)
   1307c:	df000604 	addi	fp,sp,24
   13080:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13084:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13088:	008000b4 	movhi	r2,2
   1308c:	108ff144 	addi	r2,r2,16325
   13090:	10800003 	ldbu	r2,0(r2)
   13094:	10803fcc 	andi	r2,r2,255
   13098:	10800060 	cmpeqi	r2,r2,1
   1309c:	1000011e 	bne	r2,zero,130a4 <__malloc_unlock+0x34>
      return;
   130a0:	00002206 	br	1312c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130a4:	0005303a 	rdctl	r2,status
   130a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130ac:	e0fffb17 	ldw	r3,-20(fp)
   130b0:	00bfff84 	movi	r2,-2
   130b4:	1884703a 	and	r2,r3,r2
   130b8:	1001703a 	wrctl	status,r2
  
  return context;
   130bc:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   130c0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   130c4:	d0a83017 	ldw	r2,-24384(gp)
   130c8:	1000051e 	bne	r2,zero,130e0 <__malloc_unlock+0x70>
   130cc:	e0bffa17 	ldw	r2,-24(fp)
   130d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130d4:	e0bffc17 	ldw	r2,-16(fp)
   130d8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   130dc:	00001306 	br	1312c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   130e0:	d0a83017 	ldw	r2,-24384(gp)
   130e4:	10bfffc4 	addi	r2,r2,-1
   130e8:	d0a83015 	stw	r2,-24384(gp)
   130ec:	d0a83017 	ldw	r2,-24384(gp)
   130f0:	10000a1e 	bne	r2,zero,1311c <__malloc_unlock+0xac>
  {
    lockid = -1;
   130f4:	00bfffc4 	movi	r2,-1
   130f8:	d0a01b15 	stw	r2,-32660(gp)
   130fc:	e0bffa17 	ldw	r2,-24(fp)
   13100:	e0bffd15 	stw	r2,-12(fp)
   13104:	e0bffd17 	ldw	r2,-12(fp)
   13108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1310c:	d0a83117 	ldw	r2,-24380(gp)
   13110:	1009883a 	mov	r4,r2
   13114:	00197e00 	call	197e0 <OSSemPost>
   13118:	00000406 	br	1312c <__malloc_unlock+0xbc>
   1311c:	e0bffa17 	ldw	r2,-24(fp)
   13120:	e0bffe15 	stw	r2,-8(fp)
   13124:	e0bffe17 	ldw	r2,-8(fp)
   13128:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1312c:	e037883a 	mov	sp,fp
   13130:	dfc00117 	ldw	ra,4(sp)
   13134:	df000017 	ldw	fp,0(sp)
   13138:	dec00204 	addi	sp,sp,8
   1313c:	f800283a 	ret

00013140 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13140:	defff704 	addi	sp,sp,-36
   13144:	dfc00815 	stw	ra,32(sp)
   13148:	df000715 	stw	fp,28(sp)
   1314c:	df000704 	addi	fp,sp,28
   13150:	e13ffd15 	stw	r4,-12(fp)
   13154:	e17ffe15 	stw	r5,-8(fp)
   13158:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1315c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13160:	e0bfff17 	ldw	r2,-4(fp)
   13164:	1000021e 	bne	r2,zero,13170 <OSEventNameGet+0x30>
        return (0);
   13168:	0005883a 	mov	r2,zero
   1316c:	00003706 	br	1324c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13170:	e0bffd17 	ldw	r2,-12(fp)
   13174:	1000051e 	bne	r2,zero,1318c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13178:	e0bfff17 	ldw	r2,-4(fp)
   1317c:	00c00104 	movi	r3,4
   13180:	10c00005 	stb	r3,0(r2)
        return (0);
   13184:	0005883a 	mov	r2,zero
   13188:	00003006 	br	1324c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1318c:	e0bffe17 	ldw	r2,-8(fp)
   13190:	1000051e 	bne	r2,zero,131a8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13194:	e0bfff17 	ldw	r2,-4(fp)
   13198:	00c00304 	movi	r3,12
   1319c:	10c00005 	stb	r3,0(r2)
        return (0);
   131a0:	0005883a 	mov	r2,zero
   131a4:	00002906 	br	1324c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   131a8:	d0a84003 	ldbu	r2,-24320(gp)
   131ac:	10803fcc 	andi	r2,r2,255
   131b0:	10000526 	beq	r2,zero,131c8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   131b4:	e0bfff17 	ldw	r2,-4(fp)
   131b8:	00c00444 	movi	r3,17
   131bc:	10c00005 	stb	r3,0(r2)
        return (0);
   131c0:	0005883a 	mov	r2,zero
   131c4:	00002106 	br	1324c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   131c8:	e0bffd17 	ldw	r2,-12(fp)
   131cc:	10800003 	ldbu	r2,0(r2)
   131d0:	10803fcc 	andi	r2,r2,255
   131d4:	10bfffc4 	addi	r2,r2,-1
   131d8:	10800128 	cmpgeui	r2,r2,4
   131dc:	10000526 	beq	r2,zero,131f4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   131e0:	e0bfff17 	ldw	r2,-4(fp)
   131e4:	00c00044 	movi	r3,1
   131e8:	10c00005 	stb	r3,0(r2)
             return (0);
   131ec:	0005883a 	mov	r2,zero
   131f0:	00001606 	br	1324c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   131f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131f8:	0005303a 	rdctl	r2,status
   131fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13200:	e0fffb17 	ldw	r3,-20(fp)
   13204:	00bfff84 	movi	r2,-2
   13208:	1884703a 	and	r2,r3,r2
   1320c:	1001703a 	wrctl	status,r2
  
  return context;
   13210:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13214:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13218:	e0bffd17 	ldw	r2,-12(fp)
   1321c:	10800384 	addi	r2,r2,14
   13220:	e13ffe17 	ldw	r4,-8(fp)
   13224:	100b883a 	mov	r5,r2
   13228:	0014b940 	call	14b94 <OS_StrCopy>
   1322c:	e0bffa05 	stb	r2,-24(fp)
   13230:	e0bff917 	ldw	r2,-28(fp)
   13234:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13238:	e0bffc17 	ldw	r2,-16(fp)
   1323c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	10000005 	stb	zero,0(r2)
    return (len);
   13248:	e0bffa03 	ldbu	r2,-24(fp)
}
   1324c:	e037883a 	mov	sp,fp
   13250:	dfc00117 	ldw	ra,4(sp)
   13254:	df000017 	ldw	fp,0(sp)
   13258:	dec00204 	addi	sp,sp,8
   1325c:	f800283a 	ret

00013260 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13260:	defff604 	addi	sp,sp,-40
   13264:	dfc00915 	stw	ra,36(sp)
   13268:	df000815 	stw	fp,32(sp)
   1326c:	df000804 	addi	fp,sp,32
   13270:	e13ffd15 	stw	r4,-12(fp)
   13274:	e17ffe15 	stw	r5,-8(fp)
   13278:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1327c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13280:	e0bfff17 	ldw	r2,-4(fp)
   13284:	1000011e 	bne	r2,zero,1328c <OSEventNameSet+0x2c>
        return;
   13288:	00003f06 	br	13388 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1328c:	e0bffd17 	ldw	r2,-12(fp)
   13290:	1000041e 	bne	r2,zero,132a4 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13294:	e0bfff17 	ldw	r2,-4(fp)
   13298:	00c00104 	movi	r3,4
   1329c:	10c00005 	stb	r3,0(r2)
        return;
   132a0:	00003906 	br	13388 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   132a4:	e0bffe17 	ldw	r2,-8(fp)
   132a8:	1000041e 	bne	r2,zero,132bc <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	00c00304 	movi	r3,12
   132b4:	10c00005 	stb	r3,0(r2)
        return;
   132b8:	00003306 	br	13388 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   132bc:	d0a84003 	ldbu	r2,-24320(gp)
   132c0:	10803fcc 	andi	r2,r2,255
   132c4:	10000426 	beq	r2,zero,132d8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	00c00484 	movi	r3,18
   132d0:	10c00005 	stb	r3,0(r2)
        return;
   132d4:	00002c06 	br	13388 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   132d8:	e0bffd17 	ldw	r2,-12(fp)
   132dc:	10800003 	ldbu	r2,0(r2)
   132e0:	10803fcc 	andi	r2,r2,255
   132e4:	10bfffc4 	addi	r2,r2,-1
   132e8:	10800128 	cmpgeui	r2,r2,4
   132ec:	10000426 	beq	r2,zero,13300 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	00c00044 	movi	r3,1
   132f8:	10c00005 	stb	r3,0(r2)
             return;
   132fc:	00002206 	br	13388 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13300:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13304:	0005303a 	rdctl	r2,status
   13308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1330c:	e0fffa17 	ldw	r3,-24(fp)
   13310:	00bfff84 	movi	r2,-2
   13314:	1884703a 	and	r2,r3,r2
   13318:	1001703a 	wrctl	status,r2
  
  return context;
   1331c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   13320:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   13324:	e13ffe17 	ldw	r4,-8(fp)
   13328:	0014c080 	call	14c08 <OS_StrLen>
   1332c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13330:	e0bff903 	ldbu	r2,-28(fp)
   13334:	10800830 	cmpltui	r2,r2,32
   13338:	1000081e 	bne	r2,zero,1335c <OSEventNameSet+0xfc>
   1333c:	e0bff817 	ldw	r2,-32(fp)
   13340:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13344:	e0bffb17 	ldw	r2,-20(fp)
   13348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   1334c:	e0bfff17 	ldw	r2,-4(fp)
   13350:	00c002c4 	movi	r3,11
   13354:	10c00005 	stb	r3,0(r2)
        return;
   13358:	00000b06 	br	13388 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   1335c:	e0bffd17 	ldw	r2,-12(fp)
   13360:	10800384 	addi	r2,r2,14
   13364:	1009883a 	mov	r4,r2
   13368:	e17ffe17 	ldw	r5,-8(fp)
   1336c:	0014b940 	call	14b94 <OS_StrCopy>
   13370:	e0bff817 	ldw	r2,-32(fp)
   13374:	e0bffc15 	stw	r2,-16(fp)
   13378:	e0bffc17 	ldw	r2,-16(fp)
   1337c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13380:	e0bfff17 	ldw	r2,-4(fp)
   13384:	10000005 	stb	zero,0(r2)
}
   13388:	e037883a 	mov	sp,fp
   1338c:	dfc00117 	ldw	ra,4(sp)
   13390:	df000017 	ldw	fp,0(sp)
   13394:	dec00204 	addi	sp,sp,8
   13398:	f800283a 	ret

0001339c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1339c:	deffed04 	addi	sp,sp,-76
   133a0:	dfc01215 	stw	ra,72(sp)
   133a4:	df001115 	stw	fp,68(sp)
   133a8:	df001104 	addi	fp,sp,68
   133ac:	e13ffc15 	stw	r4,-16(fp)
   133b0:	e17ffd15 	stw	r5,-12(fp)
   133b4:	e1bffe15 	stw	r6,-8(fp)
   133b8:	3805883a 	mov	r2,r7
   133bc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   133c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   133c4:	e0800217 	ldw	r2,8(fp)
   133c8:	1000021e 	bne	r2,zero,133d4 <OSEventPendMulti+0x38>
        return (0);
   133cc:	0005883a 	mov	r2,zero
   133d0:	00017106 	br	13998 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   133d4:	e0bffc17 	ldw	r2,-16(fp)
   133d8:	1000051e 	bne	r2,zero,133f0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   133dc:	e0800217 	ldw	r2,8(fp)
   133e0:	00c00104 	movi	r3,4
   133e4:	10c00005 	stb	r3,0(r2)
        return (0);
   133e8:	0005883a 	mov	r2,zero
   133ec:	00016a06 	br	13998 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   133f0:	e0bffd17 	ldw	r2,-12(fp)
   133f4:	1000051e 	bne	r2,zero,1340c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   133f8:	e0800217 	ldw	r2,8(fp)
   133fc:	00c00104 	movi	r3,4
   13400:	10c00005 	stb	r3,0(r2)
        return (0);
   13404:	0005883a 	mov	r2,zero
   13408:	00016306 	br	13998 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1340c:	e0bffe17 	ldw	r2,-8(fp)
   13410:	1000051e 	bne	r2,zero,13428 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13414:	e0800217 	ldw	r2,8(fp)
   13418:	00c00104 	movi	r3,4
   1341c:	10c00005 	stb	r3,0(r2)
        return (0);
   13420:	0005883a 	mov	r2,zero
   13424:	00015c06 	br	13998 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13430:	e0bffc17 	ldw	r2,-16(fp)
   13434:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13438:	e0bfef17 	ldw	r2,-68(fp)
   1343c:	10800017 	ldw	r2,0(r2)
   13440:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13444:	00001906 	br	134ac <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13448:	e0bff017 	ldw	r2,-64(fp)
   1344c:	10800003 	ldbu	r2,0(r2)
   13450:	10803fcc 	andi	r2,r2,255
   13454:	10c000a0 	cmpeqi	r3,r2,2
   13458:	1800091e 	bne	r3,zero,13480 <OSEventPendMulti+0xe4>
   1345c:	10c000e0 	cmpeqi	r3,r2,3
   13460:	1800091e 	bne	r3,zero,13488 <OSEventPendMulti+0xec>
   13464:	10800060 	cmpeqi	r2,r2,1
   13468:	1000091e 	bne	r2,zero,13490 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1346c:	e0800217 	ldw	r2,8(fp)
   13470:	00c00044 	movi	r3,1
   13474:	10c00005 	stb	r3,0(r2)
                 return (0);
   13478:	0005883a 	mov	r2,zero
   1347c:	00014606 	br	13998 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13480:	0001883a 	nop
   13484:	00000306 	br	13494 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13488:	0001883a 	nop
   1348c:	00000106 	br	13494 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13490:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13494:	e0bfef17 	ldw	r2,-68(fp)
   13498:	10800104 	addi	r2,r2,4
   1349c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   134a0:	e0bfef17 	ldw	r2,-68(fp)
   134a4:	10800017 	ldw	r2,0(r2)
   134a8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   134ac:	e0bff017 	ldw	r2,-64(fp)
   134b0:	103fe51e 	bne	r2,zero,13448 <__alt_mem_Flash_flash_data+0xf4013448>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   134b4:	d0a84003 	ldbu	r2,-24320(gp)
   134b8:	10803fcc 	andi	r2,r2,255
   134bc:	10000526 	beq	r2,zero,134d4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   134c0:	e0800217 	ldw	r2,8(fp)
   134c4:	00c00084 	movi	r3,2
   134c8:	10c00005 	stb	r3,0(r2)
        return (0);
   134cc:	0005883a 	mov	r2,zero
   134d0:	00013106 	br	13998 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   134d4:	d0a83203 	ldbu	r2,-24376(gp)
   134d8:	10803fcc 	andi	r2,r2,255
   134dc:	10000526 	beq	r2,zero,134f4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   134e0:	e0800217 	ldw	r2,8(fp)
   134e4:	00c00344 	movi	r3,13
   134e8:	10c00005 	stb	r3,0(r2)
        return (0);
   134ec:	0005883a 	mov	r2,zero
   134f0:	00012906 	br	13998 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134f4:	0005303a 	rdctl	r2,status
   134f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134fc:	e0fff517 	ldw	r3,-44(fp)
   13500:	00bfff84 	movi	r2,-2
   13504:	1884703a 	and	r2,r3,r2
   13508:	1001703a 	wrctl	status,r2
  
  return context;
   1350c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13510:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   13514:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   13518:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1351c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   13520:	e0bffc17 	ldw	r2,-16(fp)
   13524:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   13528:	e0bfef17 	ldw	r2,-68(fp)
   1352c:	10800017 	ldw	r2,0(r2)
   13530:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13534:	00008106 	br	1373c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13538:	e0bff017 	ldw	r2,-64(fp)
   1353c:	10800003 	ldbu	r2,0(r2)
   13540:	10803fcc 	andi	r2,r2,255
   13544:	10c000a0 	cmpeqi	r3,r2,2
   13548:	18003c1e 	bne	r3,zero,1363c <OSEventPendMulti+0x2a0>
   1354c:	10c000e0 	cmpeqi	r3,r2,3
   13550:	1800031e 	bne	r3,zero,13560 <OSEventPendMulti+0x1c4>
   13554:	10800060 	cmpeqi	r2,r2,1
   13558:	10001e1e 	bne	r2,zero,135d4 <OSEventPendMulti+0x238>
   1355c:	00006606 	br	136f8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13560:	e0bff017 	ldw	r2,-64(fp)
   13564:	1080020b 	ldhu	r2,8(r2)
   13568:	10bfffcc 	andi	r2,r2,65535
   1356c:	10001526 	beq	r2,zero,135c4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13570:	e0bff017 	ldw	r2,-64(fp)
   13574:	1080020b 	ldhu	r2,8(r2)
   13578:	10bfffc4 	addi	r2,r2,-1
   1357c:	1007883a 	mov	r3,r2
   13580:	e0bff017 	ldw	r2,-64(fp)
   13584:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13588:	e0bffd17 	ldw	r2,-12(fp)
   1358c:	10c00104 	addi	r3,r2,4
   13590:	e0fffd15 	stw	r3,-12(fp)
   13594:	e0fff017 	ldw	r3,-64(fp)
   13598:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1359c:	00800044 	movi	r2,1
   135a0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   135a4:	e0bffe17 	ldw	r2,-8(fp)
   135a8:	10c00104 	addi	r3,r2,4
   135ac:	e0fffe15 	stw	r3,-8(fp)
   135b0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   135b4:	e0bff18b 	ldhu	r2,-58(fp)
   135b8:	10800044 	addi	r2,r2,1
   135bc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   135c0:	00005806 	br	13724 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   135c4:	e0bff203 	ldbu	r2,-56(fp)
   135c8:	10800054 	ori	r2,r2,1
   135cc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   135d0:	00005406 	br	13724 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   135d4:	e0bff017 	ldw	r2,-64(fp)
   135d8:	10800117 	ldw	r2,4(r2)
   135dc:	10001326 	beq	r2,zero,1362c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   135e0:	e0bffe17 	ldw	r2,-8(fp)
   135e4:	10c00104 	addi	r3,r2,4
   135e8:	e0fffe15 	stw	r3,-8(fp)
   135ec:	e0fff017 	ldw	r3,-64(fp)
   135f0:	18c00117 	ldw	r3,4(r3)
   135f4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   135f8:	e0bff017 	ldw	r2,-64(fp)
   135fc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13600:	e0bffd17 	ldw	r2,-12(fp)
   13604:	10c00104 	addi	r3,r2,4
   13608:	e0fffd15 	stw	r3,-12(fp)
   1360c:	e0fff017 	ldw	r3,-64(fp)
   13610:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13614:	00800044 	movi	r2,1
   13618:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1361c:	e0bff18b 	ldhu	r2,-58(fp)
   13620:	10800044 	addi	r2,r2,1
   13624:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   13628:	00003e06 	br	13724 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1362c:	e0bff203 	ldbu	r2,-56(fp)
   13630:	10800094 	ori	r2,r2,2
   13634:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13638:	00003a06 	br	13724 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1363c:	e0bff017 	ldw	r2,-64(fp)
   13640:	10800117 	ldw	r2,4(r2)
   13644:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   13648:	e0bff417 	ldw	r2,-48(fp)
   1364c:	1080058b 	ldhu	r2,22(r2)
   13650:	10bfffcc 	andi	r2,r2,65535
   13654:	10002426 	beq	r2,zero,136e8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13658:	e0bffe17 	ldw	r2,-8(fp)
   1365c:	10c00104 	addi	r3,r2,4
   13660:	e0fffe15 	stw	r3,-8(fp)
   13664:	e0fff417 	ldw	r3,-48(fp)
   13668:	18c00417 	ldw	r3,16(r3)
   1366c:	19400104 	addi	r5,r3,4
   13670:	e13ff417 	ldw	r4,-48(fp)
   13674:	21400415 	stw	r5,16(r4)
   13678:	18c00017 	ldw	r3,0(r3)
   1367c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13680:	e0bff417 	ldw	r2,-48(fp)
   13684:	10c00417 	ldw	r3,16(r2)
   13688:	e0bff417 	ldw	r2,-48(fp)
   1368c:	10800217 	ldw	r2,8(r2)
   13690:	1880041e 	bne	r3,r2,136a4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   13694:	e0bff417 	ldw	r2,-48(fp)
   13698:	10c00117 	ldw	r3,4(r2)
   1369c:	e0bff417 	ldw	r2,-48(fp)
   136a0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   136a4:	e0bff417 	ldw	r2,-48(fp)
   136a8:	1080058b 	ldhu	r2,22(r2)
   136ac:	10bfffc4 	addi	r2,r2,-1
   136b0:	1007883a 	mov	r3,r2
   136b4:	e0bff417 	ldw	r2,-48(fp)
   136b8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   136bc:	e0bffd17 	ldw	r2,-12(fp)
   136c0:	10c00104 	addi	r3,r2,4
   136c4:	e0fffd15 	stw	r3,-12(fp)
   136c8:	e0fff017 	ldw	r3,-64(fp)
   136cc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   136d0:	00800044 	movi	r2,1
   136d4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   136d8:	e0bff18b 	ldhu	r2,-58(fp)
   136dc:	10800044 	addi	r2,r2,1
   136e0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   136e4:	00000f06 	br	13724 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   136e8:	e0bff203 	ldbu	r2,-56(fp)
   136ec:	10800114 	ori	r2,r2,4
   136f0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   136f4:	00000b06 	br	13724 <OSEventPendMulti+0x388>
   136f8:	e0bff317 	ldw	r2,-52(fp)
   136fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13700:	e0bff617 	ldw	r2,-40(fp)
   13704:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   13708:	e0bffd17 	ldw	r2,-12(fp)
   1370c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   13710:	e0800217 	ldw	r2,8(fp)
   13714:	00c00044 	movi	r3,1
   13718:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1371c:	e0bff18b 	ldhu	r2,-58(fp)
   13720:	00009d06 	br	13998 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   13724:	e0bfef17 	ldw	r2,-68(fp)
   13728:	10800104 	addi	r2,r2,4
   1372c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13730:	e0bfef17 	ldw	r2,-68(fp)
   13734:	10800017 	ldw	r2,0(r2)
   13738:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1373c:	e0bff017 	ldw	r2,-64(fp)
   13740:	103f7d1e 	bne	r2,zero,13538 <__alt_mem_Flash_flash_data+0xf4013538>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   13744:	e0bff103 	ldbu	r2,-60(fp)
   13748:	10800058 	cmpnei	r2,r2,1
   1374c:	10000a1e 	bne	r2,zero,13778 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   13750:	e0bffd17 	ldw	r2,-12(fp)
   13754:	10000015 	stw	zero,0(r2)
   13758:	e0bff317 	ldw	r2,-52(fp)
   1375c:	e0bff715 	stw	r2,-36(fp)
   13760:	e0bff717 	ldw	r2,-36(fp)
   13764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13768:	e0800217 	ldw	r2,8(fp)
   1376c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13770:	e0bff18b 	ldhu	r2,-58(fp)
   13774:	00008806 	br	13998 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13778:	d0a84117 	ldw	r2,-24316(gp)
   1377c:	d0e84117 	ldw	r3,-24316(gp)
   13780:	19000c03 	ldbu	r4,48(r3)
   13784:	e0fff203 	ldbu	r3,-56(fp)
   13788:	20c6b03a 	or	r3,r4,r3
   1378c:	1809883a 	mov	r4,r3
   13790:	00ffe004 	movi	r3,-128
   13794:	20c6b03a 	or	r3,r4,r3
   13798:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1379c:	d0a84117 	ldw	r2,-24316(gp)
   137a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   137a4:	d0a84117 	ldw	r2,-24316(gp)
   137a8:	e0ffff0b 	ldhu	r3,-4(fp)
   137ac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   137b0:	e13ffc17 	ldw	r4,-16(fp)
   137b4:	00142e40 	call	142e4 <OS_EventTaskWaitMulti>
   137b8:	e0bff317 	ldw	r2,-52(fp)
   137bc:	e0bff815 	stw	r2,-32(fp)
   137c0:	e0bff817 	ldw	r2,-32(fp)
   137c4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   137c8:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137cc:	0005303a 	rdctl	r2,status
   137d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137d4:	e0fff917 	ldw	r3,-28(fp)
   137d8:	00bfff84 	movi	r2,-2
   137dc:	1884703a 	and	r2,r3,r2
   137e0:	1001703a 	wrctl	status,r2
  
  return context;
   137e4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   137e8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   137ec:	d0a84117 	ldw	r2,-24316(gp)
   137f0:	10800c43 	ldbu	r2,49(r2)
   137f4:	10803fcc 	andi	r2,r2,255
   137f8:	10000226 	beq	r2,zero,13804 <OSEventPendMulti+0x468>
   137fc:	108000a0 	cmpeqi	r2,r2,2
   13800:	10001826 	beq	r2,zero,13864 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   13804:	d0a84117 	ldw	r2,-24316(gp)
   13808:	10800717 	ldw	r2,28(r2)
   1380c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   13810:	e0bff017 	ldw	r2,-64(fp)
   13814:	10000b26 	beq	r2,zero,13844 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   13818:	e0bffd17 	ldw	r2,-12(fp)
   1381c:	10c00104 	addi	r3,r2,4
   13820:	e0fffd15 	stw	r3,-12(fp)
   13824:	e0fff017 	ldw	r3,-64(fp)
   13828:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1382c:	e0bffd17 	ldw	r2,-12(fp)
   13830:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   13834:	e0bff18b 	ldhu	r2,-58(fp)
   13838:	10800044 	addi	r2,r2,1
   1383c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   13840:	00000d06 	br	13878 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   13844:	d0a84117 	ldw	r2,-24316(gp)
   13848:	00c00044 	movi	r3,1
   1384c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13850:	d0a84117 	ldw	r2,-24316(gp)
   13854:	1009883a 	mov	r4,r2
   13858:	e17ffc17 	ldw	r5,-16(fp)
   1385c:	00144e40 	call	144e4 <OS_EventTaskRemoveMulti>
             }
			 break;
   13860:	00000506 	br	13878 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13864:	d0a84117 	ldw	r2,-24316(gp)
   13868:	1009883a 	mov	r4,r2
   1386c:	e17ffc17 	ldw	r5,-16(fp)
   13870:	00144e40 	call	144e4 <OS_EventTaskRemoveMulti>
             break;
   13874:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13878:	d0a84117 	ldw	r2,-24316(gp)
   1387c:	10800c43 	ldbu	r2,49(r2)
   13880:	10803fcc 	andi	r2,r2,255
   13884:	10000326 	beq	r2,zero,13894 <OSEventPendMulti+0x4f8>
   13888:	108000a0 	cmpeqi	r2,r2,2
   1388c:	1000231e 	bne	r2,zero,1391c <OSEventPendMulti+0x580>
   13890:	00002a06 	br	1393c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13894:	e0bff017 	ldw	r2,-64(fp)
   13898:	10800003 	ldbu	r2,0(r2)
   1389c:	10803fcc 	andi	r2,r2,255
   138a0:	0080100e 	bge	zero,r2,138e4 <OSEventPendMulti+0x548>
   138a4:	10c000d0 	cmplti	r3,r2,3
   138a8:	1800071e 	bne	r3,zero,138c8 <OSEventPendMulti+0x52c>
   138ac:	108000e0 	cmpeqi	r2,r2,3
   138b0:	10000c26 	beq	r2,zero,138e4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   138b4:	e0bffe17 	ldw	r2,-8(fp)
   138b8:	10c00104 	addi	r3,r2,4
   138bc:	e0fffe15 	stw	r3,-8(fp)
   138c0:	10000015 	stw	zero,0(r2)
                      break;
   138c4:	00001206 	br	13910 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   138c8:	e0bffe17 	ldw	r2,-8(fp)
   138cc:	10c00104 	addi	r3,r2,4
   138d0:	e0fffe15 	stw	r3,-8(fp)
   138d4:	d0e84117 	ldw	r3,-24316(gp)
   138d8:	18c00917 	ldw	r3,36(r3)
   138dc:	10c00015 	stw	r3,0(r2)
                      break;
   138e0:	00000b06 	br	13910 <OSEventPendMulti+0x574>
   138e4:	e0bff317 	ldw	r2,-52(fp)
   138e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138ec:	e0bffa17 	ldw	r2,-24(fp)
   138f0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   138fc:	e0800217 	ldw	r2,8(fp)
   13900:	00c00044 	movi	r3,1
   13904:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13908:	e0bff18b 	ldhu	r2,-58(fp)
   1390c:	00002206 	br	13998 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13910:	e0800217 	ldw	r2,8(fp)
   13914:	10000005 	stb	zero,0(r2)
             break;
   13918:	00001006 	br	1395c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1391c:	e0bffe17 	ldw	r2,-8(fp)
   13920:	10c00104 	addi	r3,r2,4
   13924:	e0fffe15 	stw	r3,-8(fp)
   13928:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1392c:	e0800217 	ldw	r2,8(fp)
   13930:	00c00384 	movi	r3,14
   13934:	10c00005 	stb	r3,0(r2)
             break;
   13938:	00000806 	br	1395c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	10c00104 	addi	r3,r2,4
   13944:	e0fffe15 	stw	r3,-8(fp)
   13948:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1394c:	e0800217 	ldw	r2,8(fp)
   13950:	00c00284 	movi	r3,10
   13954:	10c00005 	stb	r3,0(r2)
             break;
   13958:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1395c:	d0a84117 	ldw	r2,-24316(gp)
   13960:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13964:	d0a84117 	ldw	r2,-24316(gp)
   13968:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1396c:	d0a84117 	ldw	r2,-24316(gp)
   13970:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13974:	d0a84117 	ldw	r2,-24316(gp)
   13978:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1397c:	d0a84117 	ldw	r2,-24316(gp)
   13980:	10000915 	stw	zero,36(r2)
   13984:	e0bff317 	ldw	r2,-52(fp)
   13988:	e0bffb15 	stw	r2,-20(fp)
   1398c:	e0bffb17 	ldw	r2,-20(fp)
   13990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13994:	e0bff18b 	ldhu	r2,-58(fp)
}
   13998:	e037883a 	mov	sp,fp
   1399c:	dfc00117 	ldw	ra,4(sp)
   139a0:	df000017 	ldw	fp,0(sp)
   139a4:	dec00204 	addi	sp,sp,8
   139a8:	f800283a 	ret

000139ac <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   139ac:	defffe04 	addi	sp,sp,-8
   139b0:	dfc00115 	stw	ra,4(sp)
   139b4:	df000015 	stw	fp,0(sp)
   139b8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   139bc:	001ef200 	call	1ef20 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   139c0:	00147200 	call	14720 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   139c4:	00147640 	call	14764 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   139c8:	00148c40 	call	148c4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   139cc:	00146440 	call	14644 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   139d0:	00168440 	call	16844 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   139d4:	0017d140 	call	17d14 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   139d8:	0018f480 	call	18f48 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   139dc:	00147cc0 	call	147cc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   139e0:	00148480 	call	14848 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   139e4:	001ef3c0 	call	1ef3c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   139e8:	00151300 	call	15130 <OSDebugInit>
#endif
}
   139ec:	e037883a 	mov	sp,fp
   139f0:	dfc00117 	ldw	ra,4(sp)
   139f4:	df000017 	ldw	fp,0(sp)
   139f8:	dec00204 	addi	sp,sp,8
   139fc:	f800283a 	ret

00013a00 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13a00:	defffc04 	addi	sp,sp,-16
   13a04:	df000315 	stw	fp,12(sp)
   13a08:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13a0c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   13a10:	d0a83243 	ldbu	r2,-24375(gp)
   13a14:	10803fcc 	andi	r2,r2,255
   13a18:	10800058 	cmpnei	r2,r2,1
   13a1c:	1000131e 	bne	r2,zero,13a6c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a20:	0005303a 	rdctl	r2,status
   13a24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a28:	e0fffe17 	ldw	r3,-8(fp)
   13a2c:	00bfff84 	movi	r2,-2
   13a30:	1884703a 	and	r2,r3,r2
   13a34:	1001703a 	wrctl	status,r2
  
  return context;
   13a38:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13a3c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   13a40:	d0a84003 	ldbu	r2,-24320(gp)
   13a44:	10803fcc 	andi	r2,r2,255
   13a48:	10803fe0 	cmpeqi	r2,r2,255
   13a4c:	1000031e 	bne	r2,zero,13a5c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13a50:	d0a84003 	ldbu	r2,-24320(gp)
   13a54:	10800044 	addi	r2,r2,1
   13a58:	d0a84005 	stb	r2,-24320(gp)
   13a5c:	e0bffd17 	ldw	r2,-12(fp)
   13a60:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a64:	e0bfff17 	ldw	r2,-4(fp)
   13a68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   13a6c:	e037883a 	mov	sp,fp
   13a70:	df000017 	ldw	fp,0(sp)
   13a74:	dec00104 	addi	sp,sp,4
   13a78:	f800283a 	ret

00013a7c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13a7c:	defffb04 	addi	sp,sp,-20
   13a80:	dfc00415 	stw	ra,16(sp)
   13a84:	df000315 	stw	fp,12(sp)
   13a88:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13a8c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13a90:	d0a83243 	ldbu	r2,-24375(gp)
   13a94:	10803fcc 	andi	r2,r2,255
   13a98:	10800058 	cmpnei	r2,r2,1
   13a9c:	10002f1e 	bne	r2,zero,13b5c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13aa0:	0005303a 	rdctl	r2,status
   13aa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13aa8:	e0fffe17 	ldw	r3,-8(fp)
   13aac:	00bfff84 	movi	r2,-2
   13ab0:	1884703a 	and	r2,r3,r2
   13ab4:	1001703a 	wrctl	status,r2
  
  return context;
   13ab8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13abc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13ac0:	d0a84003 	ldbu	r2,-24320(gp)
   13ac4:	10803fcc 	andi	r2,r2,255
   13ac8:	10000326 	beq	r2,zero,13ad8 <OSIntExit+0x5c>
            OSIntNesting--;
   13acc:	d0a84003 	ldbu	r2,-24320(gp)
   13ad0:	10bfffc4 	addi	r2,r2,-1
   13ad4:	d0a84005 	stb	r2,-24320(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13ad8:	d0a84003 	ldbu	r2,-24320(gp)
   13adc:	10803fcc 	andi	r2,r2,255
   13ae0:	10001a1e 	bne	r2,zero,13b4c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13ae4:	d0a83203 	ldbu	r2,-24376(gp)
   13ae8:	10803fcc 	andi	r2,r2,255
   13aec:	1000171e 	bne	r2,zero,13b4c <OSIntExit+0xd0>
                OS_SchedNew();
   13af0:	0014b240 	call	14b24 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13af4:	d0e83403 	ldbu	r3,-24368(gp)
   13af8:	d0a83443 	ldbu	r2,-24367(gp)
   13afc:	18c03fcc 	andi	r3,r3,255
   13b00:	10803fcc 	andi	r2,r2,255
   13b04:	18801126 	beq	r3,r2,13b4c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13b08:	d0a83403 	ldbu	r2,-24368(gp)
   13b0c:	10c03fcc 	andi	r3,r2,255
   13b10:	00800174 	movhi	r2,5
   13b14:	10a4a204 	addi	r2,r2,-28024
   13b18:	18c7883a 	add	r3,r3,r3
   13b1c:	18c7883a 	add	r3,r3,r3
   13b20:	10c5883a 	add	r2,r2,r3
   13b24:	10800017 	ldw	r2,0(r2)
   13b28:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13b2c:	d0a83c17 	ldw	r2,-24336(gp)
   13b30:	10c00e17 	ldw	r3,56(r2)
   13b34:	18c00044 	addi	r3,r3,1
   13b38:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13b3c:	d0a83717 	ldw	r2,-24356(gp)
   13b40:	10800044 	addi	r2,r2,1
   13b44:	d0a83715 	stw	r2,-24356(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13b48:	001ec600 	call	1ec60 <OSCtxSw>
   13b4c:	e0bffd17 	ldw	r2,-12(fp)
   13b50:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b54:	e0bfff17 	ldw	r2,-4(fp)
   13b58:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13b5c:	e037883a 	mov	sp,fp
   13b60:	dfc00117 	ldw	ra,4(sp)
   13b64:	df000017 	ldw	fp,0(sp)
   13b68:	dec00204 	addi	sp,sp,8
   13b6c:	f800283a 	ret

00013b70 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13b70:	defffc04 	addi	sp,sp,-16
   13b74:	df000315 	stw	fp,12(sp)
   13b78:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b7c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13b80:	d0a83243 	ldbu	r2,-24375(gp)
   13b84:	10803fcc 	andi	r2,r2,255
   13b88:	10800058 	cmpnei	r2,r2,1
   13b8c:	1000161e 	bne	r2,zero,13be8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b90:	0005303a 	rdctl	r2,status
   13b94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b98:	e0fffe17 	ldw	r3,-8(fp)
   13b9c:	00bfff84 	movi	r2,-2
   13ba0:	1884703a 	and	r2,r3,r2
   13ba4:	1001703a 	wrctl	status,r2
  
  return context;
   13ba8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13bac:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13bb0:	d0a84003 	ldbu	r2,-24320(gp)
   13bb4:	10803fcc 	andi	r2,r2,255
   13bb8:	1000071e 	bne	r2,zero,13bd8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13bbc:	d0a83203 	ldbu	r2,-24376(gp)
   13bc0:	10803fcc 	andi	r2,r2,255
   13bc4:	10803fe0 	cmpeqi	r2,r2,255
   13bc8:	1000031e 	bne	r2,zero,13bd8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13bcc:	d0a83203 	ldbu	r2,-24376(gp)
   13bd0:	10800044 	addi	r2,r2,1
   13bd4:	d0a83205 	stb	r2,-24376(gp)
   13bd8:	e0bffd17 	ldw	r2,-12(fp)
   13bdc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13be0:	e0bfff17 	ldw	r2,-4(fp)
   13be4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13be8:	e037883a 	mov	sp,fp
   13bec:	df000017 	ldw	fp,0(sp)
   13bf0:	dec00104 	addi	sp,sp,4
   13bf4:	f800283a 	ret

00013bf8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13bf8:	defff804 	addi	sp,sp,-32
   13bfc:	dfc00715 	stw	ra,28(sp)
   13c00:	df000615 	stw	fp,24(sp)
   13c04:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c08:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13c0c:	d0a83243 	ldbu	r2,-24375(gp)
   13c10:	10803fcc 	andi	r2,r2,255
   13c14:	10800058 	cmpnei	r2,r2,1
   13c18:	1000281e 	bne	r2,zero,13cbc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c1c:	0005303a 	rdctl	r2,status
   13c20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c24:	e0fffb17 	ldw	r3,-20(fp)
   13c28:	00bfff84 	movi	r2,-2
   13c2c:	1884703a 	and	r2,r3,r2
   13c30:	1001703a 	wrctl	status,r2
  
  return context;
   13c34:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   13c38:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13c3c:	d0a83203 	ldbu	r2,-24376(gp)
   13c40:	10803fcc 	andi	r2,r2,255
   13c44:	10001926 	beq	r2,zero,13cac <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13c48:	d0a83203 	ldbu	r2,-24376(gp)
   13c4c:	10bfffc4 	addi	r2,r2,-1
   13c50:	d0a83205 	stb	r2,-24376(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13c54:	d0a83203 	ldbu	r2,-24376(gp)
   13c58:	10803fcc 	andi	r2,r2,255
   13c5c:	10000e1e 	bne	r2,zero,13c98 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13c60:	d0a84003 	ldbu	r2,-24320(gp)
   13c64:	10803fcc 	andi	r2,r2,255
   13c68:	1000061e 	bne	r2,zero,13c84 <OSSchedUnlock+0x8c>
   13c6c:	e0bffa17 	ldw	r2,-24(fp)
   13c70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c74:	e0bffc17 	ldw	r2,-16(fp)
   13c78:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13c7c:	0014a580 	call	14a58 <OS_Sched>
   13c80:	00000e06 	br	13cbc <OSSchedUnlock+0xc4>
   13c84:	e0bffa17 	ldw	r2,-24(fp)
   13c88:	e0bffd15 	stw	r2,-12(fp)
   13c8c:	e0bffd17 	ldw	r2,-12(fp)
   13c90:	1001703a 	wrctl	status,r2
   13c94:	00000906 	br	13cbc <OSSchedUnlock+0xc4>
   13c98:	e0bffa17 	ldw	r2,-24(fp)
   13c9c:	e0bffe15 	stw	r2,-8(fp)
   13ca0:	e0bffe17 	ldw	r2,-8(fp)
   13ca4:	1001703a 	wrctl	status,r2
   13ca8:	00000406 	br	13cbc <OSSchedUnlock+0xc4>
   13cac:	e0bffa17 	ldw	r2,-24(fp)
   13cb0:	e0bfff15 	stw	r2,-4(fp)
   13cb4:	e0bfff17 	ldw	r2,-4(fp)
   13cb8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13cbc:	e037883a 	mov	sp,fp
   13cc0:	dfc00117 	ldw	ra,4(sp)
   13cc4:	df000017 	ldw	fp,0(sp)
   13cc8:	dec00204 	addi	sp,sp,8
   13ccc:	f800283a 	ret

00013cd0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13cd0:	defffe04 	addi	sp,sp,-8
   13cd4:	dfc00115 	stw	ra,4(sp)
   13cd8:	df000015 	stw	fp,0(sp)
   13cdc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13ce0:	d0a83243 	ldbu	r2,-24375(gp)
   13ce4:	10803fcc 	andi	r2,r2,255
   13ce8:	10000f1e 	bne	r2,zero,13d28 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13cec:	0014b240 	call	14b24 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13cf0:	d0a83403 	ldbu	r2,-24368(gp)
   13cf4:	d0a83445 	stb	r2,-24367(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13cf8:	d0a83403 	ldbu	r2,-24368(gp)
   13cfc:	10c03fcc 	andi	r3,r2,255
   13d00:	00800174 	movhi	r2,5
   13d04:	10a4a204 	addi	r2,r2,-28024
   13d08:	18c7883a 	add	r3,r3,r3
   13d0c:	18c7883a 	add	r3,r3,r3
   13d10:	10c5883a 	add	r2,r2,r3
   13d14:	10800017 	ldw	r2,0(r2)
   13d18:	d0a83c15 	stw	r2,-24336(gp)
        OSTCBCur      = OSTCBHighRdy;
   13d1c:	d0a83c17 	ldw	r2,-24336(gp)
   13d20:	d0a84115 	stw	r2,-24316(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13d24:	001ecec0 	call	1ecec <OSStartHighRdy>
    }
}
   13d28:	e037883a 	mov	sp,fp
   13d2c:	dfc00117 	ldw	ra,4(sp)
   13d30:	df000017 	ldw	fp,0(sp)
   13d34:	dec00204 	addi	sp,sp,8
   13d38:	f800283a 	ret

00013d3c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13d3c:	defff904 	addi	sp,sp,-28
   13d40:	dfc00615 	stw	ra,24(sp)
   13d44:	df000515 	stw	fp,20(sp)
   13d48:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d4c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13d50:	01000084 	movi	r4,2
   13d54:	001b3f00 	call	1b3f0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d58:	0005303a 	rdctl	r2,status
   13d5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d60:	e0fffc17 	ldw	r3,-16(fp)
   13d64:	00bfff84 	movi	r2,-2
   13d68:	1884703a 	and	r2,r3,r2
   13d6c:	1001703a 	wrctl	status,r2
  
  return context;
   13d70:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13d74:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13d78:	d0283315 	stw	zero,-24372(gp)
   13d7c:	e0bffb17 	ldw	r2,-20(fp)
   13d80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d84:	e0bffd17 	ldw	r2,-12(fp)
   13d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13d8c:	0009883a 	mov	r4,zero
   13d90:	001b3f00 	call	1b3f0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d94:	0005303a 	rdctl	r2,status
   13d98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d9c:	e0fffe17 	ldw	r3,-8(fp)
   13da0:	00bfff84 	movi	r2,-2
   13da4:	1884703a 	and	r2,r3,r2
   13da8:	1001703a 	wrctl	status,r2
  
  return context;
   13dac:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13db0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13db4:	d0a83317 	ldw	r2,-24372(gp)
   13db8:	d0a83815 	stw	r2,-24352(gp)
    OSStatRdy    = OS_TRUE;
   13dbc:	00800044 	movi	r2,1
   13dc0:	d0a84405 	stb	r2,-24304(gp)
   13dc4:	e0bffb17 	ldw	r2,-20(fp)
   13dc8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dcc:	e0bfff17 	ldw	r2,-4(fp)
   13dd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13dd4:	e037883a 	mov	sp,fp
   13dd8:	dfc00117 	ldw	ra,4(sp)
   13ddc:	df000017 	ldw	fp,0(sp)
   13de0:	dec00204 	addi	sp,sp,8
   13de4:	f800283a 	ret

00013de8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13de8:	defff704 	addi	sp,sp,-36
   13dec:	dfc00815 	stw	ra,32(sp)
   13df0:	df000715 	stw	fp,28(sp)
   13df4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13df8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13dfc:	001ef040 	call	1ef04 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e00:	0005303a 	rdctl	r2,status
   13e04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e08:	e0fffc17 	ldw	r3,-16(fp)
   13e0c:	00bfff84 	movi	r2,-2
   13e10:	1884703a 	and	r2,r3,r2
   13e14:	1001703a 	wrctl	status,r2
  
  return context;
   13e18:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13e1c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13e20:	d0a84217 	ldw	r2,-24312(gp)
   13e24:	10800044 	addi	r2,r2,1
   13e28:	d0a84215 	stw	r2,-24312(gp)
   13e2c:	e0bffb17 	ldw	r2,-20(fp)
   13e30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e34:	e0bffd17 	ldw	r2,-12(fp)
   13e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13e3c:	d0a83243 	ldbu	r2,-24375(gp)
   13e40:	10803fcc 	andi	r2,r2,255
   13e44:	10800058 	cmpnei	r2,r2,1
   13e48:	1000691e 	bne	r2,zero,13ff0 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13e4c:	d0a83603 	ldbu	r2,-24360(gp)
   13e50:	10803fcc 	andi	r2,r2,255
   13e54:	10c00060 	cmpeqi	r3,r2,1
   13e58:	1800061e 	bne	r3,zero,13e74 <OSTimeTick+0x8c>
   13e5c:	10c000a0 	cmpeqi	r3,r2,2
   13e60:	1800061e 	bne	r3,zero,13e7c <OSTimeTick+0x94>
   13e64:	10000a1e 	bne	r2,zero,13e90 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   13e68:	00800044 	movi	r2,1
   13e6c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   13e70:	00000b06 	br	13ea0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   13e74:	e03ffa05 	stb	zero,-24(fp)
                 break;
   13e78:	00000906 	br	13ea0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   13e7c:	00800044 	movi	r2,1
   13e80:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   13e84:	00800044 	movi	r2,1
   13e88:	d0a83605 	stb	r2,-24360(gp)
                 break;
   13e8c:	00000406 	br	13ea0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   13e90:	00800044 	movi	r2,1
   13e94:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   13e98:	d0283605 	stb	zero,-24360(gp)
                 break;
   13e9c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   13ea0:	e0bffa03 	ldbu	r2,-24(fp)
   13ea4:	1000011e 	bne	r2,zero,13eac <OSTimeTick+0xc4>
            return;
   13ea8:	00005106 	br	13ff0 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   13eac:	d0a83517 	ldw	r2,-24364(gp)
   13eb0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13eb4:	00004906 	br	13fdc <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13eb8:	0005303a 	rdctl	r2,status
   13ebc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ec0:	e0fffe17 	ldw	r3,-8(fp)
   13ec4:	00bfff84 	movi	r2,-2
   13ec8:	1884703a 	and	r2,r3,r2
   13ecc:	1001703a 	wrctl	status,r2
  
  return context;
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   13ed4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   13ed8:	e0bff917 	ldw	r2,-28(fp)
   13edc:	10800b8b 	ldhu	r2,46(r2)
   13ee0:	10bfffcc 	andi	r2,r2,65535
   13ee4:	10003626 	beq	r2,zero,13fc0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   13ee8:	e0bff917 	ldw	r2,-28(fp)
   13eec:	10800b8b 	ldhu	r2,46(r2)
   13ef0:	10bfffc4 	addi	r2,r2,-1
   13ef4:	1007883a 	mov	r3,r2
   13ef8:	e0bff917 	ldw	r2,-28(fp)
   13efc:	10c00b8d 	sth	r3,46(r2)
   13f00:	e0bff917 	ldw	r2,-28(fp)
   13f04:	10800b8b 	ldhu	r2,46(r2)
   13f08:	10bfffcc 	andi	r2,r2,65535
   13f0c:	10002c1e 	bne	r2,zero,13fc0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   13f10:	e0bff917 	ldw	r2,-28(fp)
   13f14:	10800c03 	ldbu	r2,48(r2)
   13f18:	10803fcc 	andi	r2,r2,255
   13f1c:	10800dcc 	andi	r2,r2,55
   13f20:	10000b26 	beq	r2,zero,13f50 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   13f24:	e0bff917 	ldw	r2,-28(fp)
   13f28:	10c00c03 	ldbu	r3,48(r2)
   13f2c:	00bff204 	movi	r2,-56
   13f30:	1884703a 	and	r2,r3,r2
   13f34:	1007883a 	mov	r3,r2
   13f38:	e0bff917 	ldw	r2,-28(fp)
   13f3c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   13f40:	e0bff917 	ldw	r2,-28(fp)
   13f44:	00c00044 	movi	r3,1
   13f48:	10c00c45 	stb	r3,49(r2)
   13f4c:	00000206 	br	13f58 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13f50:	e0bff917 	ldw	r2,-28(fp)
   13f54:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   13f58:	e0bff917 	ldw	r2,-28(fp)
   13f5c:	10800c03 	ldbu	r2,48(r2)
   13f60:	10803fcc 	andi	r2,r2,255
   13f64:	1080020c 	andi	r2,r2,8
   13f68:	1000151e 	bne	r2,zero,13fc0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   13f6c:	e0bff917 	ldw	r2,-28(fp)
   13f70:	10c00d83 	ldbu	r3,54(r2)
   13f74:	d0a83e03 	ldbu	r2,-24328(gp)
   13f78:	1884b03a 	or	r2,r3,r2
   13f7c:	d0a83e05 	stb	r2,-24328(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13f80:	e0bff917 	ldw	r2,-28(fp)
   13f84:	10800d03 	ldbu	r2,52(r2)
   13f88:	10c03fcc 	andi	r3,r2,255
   13f8c:	e0bff917 	ldw	r2,-28(fp)
   13f90:	10800d03 	ldbu	r2,52(r2)
   13f94:	11003fcc 	andi	r4,r2,255
   13f98:	d0a83e44 	addi	r2,gp,-24327
   13f9c:	2085883a 	add	r2,r4,r2
   13fa0:	11000003 	ldbu	r4,0(r2)
   13fa4:	e0bff917 	ldw	r2,-28(fp)
   13fa8:	10800d43 	ldbu	r2,53(r2)
   13fac:	2084b03a 	or	r2,r4,r2
   13fb0:	1009883a 	mov	r4,r2
   13fb4:	d0a83e44 	addi	r2,gp,-24327
   13fb8:	1885883a 	add	r2,r3,r2
   13fbc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   13fc0:	e0bff917 	ldw	r2,-28(fp)
   13fc4:	10800517 	ldw	r2,20(r2)
   13fc8:	e0bff915 	stw	r2,-28(fp)
   13fcc:	e0bffb17 	ldw	r2,-20(fp)
   13fd0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fd4:	e0bfff17 	ldw	r2,-4(fp)
   13fd8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   13fdc:	e0bff917 	ldw	r2,-28(fp)
   13fe0:	10800c83 	ldbu	r2,50(r2)
   13fe4:	10803fcc 	andi	r2,r2,255
   13fe8:	10800518 	cmpnei	r2,r2,20
   13fec:	103fb21e 	bne	r2,zero,13eb8 <__alt_mem_Flash_flash_data+0xf4013eb8>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   13ff0:	e037883a 	mov	sp,fp
   13ff4:	dfc00117 	ldw	ra,4(sp)
   13ff8:	df000017 	ldw	fp,0(sp)
   13ffc:	dec00204 	addi	sp,sp,8
   14000:	f800283a 	ret

00014004 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   14004:	deffff04 	addi	sp,sp,-4
   14008:	df000015 	stw	fp,0(sp)
   1400c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   14010:	00804784 	movi	r2,286
}
   14014:	e037883a 	mov	sp,fp
   14018:	df000017 	ldw	fp,0(sp)
   1401c:	dec00104 	addi	sp,sp,4
   14020:	f800283a 	ret

00014024 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   14024:	deffff04 	addi	sp,sp,-4
   14028:	df000015 	stw	fp,0(sp)
   1402c:	d839883a 	mov	fp,sp
}
   14030:	e037883a 	mov	sp,fp
   14034:	df000017 	ldw	fp,0(sp)
   14038:	dec00104 	addi	sp,sp,4
   1403c:	f800283a 	ret

00014040 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14040:	defff804 	addi	sp,sp,-32
   14044:	dfc00715 	stw	ra,28(sp)
   14048:	df000615 	stw	fp,24(sp)
   1404c:	df000604 	addi	fp,sp,24
   14050:	e13ffc15 	stw	r4,-16(fp)
   14054:	e17ffd15 	stw	r5,-12(fp)
   14058:	3007883a 	mov	r3,r6
   1405c:	3805883a 	mov	r2,r7
   14060:	e0fffe05 	stb	r3,-8(fp)
   14064:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14068:	e0bffc17 	ldw	r2,-16(fp)
   1406c:	10800283 	ldbu	r2,10(r2)
   14070:	10c03fcc 	andi	r3,r2,255
   14074:	008000b4 	movhi	r2,2
   14078:	10bf7c04 	addi	r2,r2,-528
   1407c:	10c5883a 	add	r2,r2,r3
   14080:	10800003 	ldbu	r2,0(r2)
   14084:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14088:	e0bffa03 	ldbu	r2,-24(fp)
   1408c:	e0fffc17 	ldw	r3,-16(fp)
   14090:	1885883a 	add	r2,r3,r2
   14094:	10800204 	addi	r2,r2,8
   14098:	108000c3 	ldbu	r2,3(r2)
   1409c:	10c03fcc 	andi	r3,r2,255
   140a0:	008000b4 	movhi	r2,2
   140a4:	10bf7c04 	addi	r2,r2,-528
   140a8:	10c5883a 	add	r2,r2,r3
   140ac:	10800003 	ldbu	r2,0(r2)
   140b0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   140b4:	e0bffa03 	ldbu	r2,-24(fp)
   140b8:	100490fa 	slli	r2,r2,3
   140bc:	1007883a 	mov	r3,r2
   140c0:	e0bffa43 	ldbu	r2,-23(fp)
   140c4:	1885883a 	add	r2,r3,r2
   140c8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   140cc:	e0fffa83 	ldbu	r3,-22(fp)
   140d0:	00800174 	movhi	r2,5
   140d4:	10a4a204 	addi	r2,r2,-28024
   140d8:	18c7883a 	add	r3,r3,r3
   140dc:	18c7883a 	add	r3,r3,r3
   140e0:	10c5883a 	add	r2,r2,r3
   140e4:	10800017 	ldw	r2,0(r2)
   140e8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   140ec:	e0bffb17 	ldw	r2,-20(fp)
   140f0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   140f4:	e0bffb17 	ldw	r2,-20(fp)
   140f8:	e0fffd17 	ldw	r3,-12(fp)
   140fc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14100:	e0bffb17 	ldw	r2,-20(fp)
   14104:	10800c03 	ldbu	r2,48(r2)
   14108:	1007883a 	mov	r3,r2
   1410c:	e0bffe03 	ldbu	r2,-8(fp)
   14110:	0084303a 	nor	r2,zero,r2
   14114:	1884703a 	and	r2,r3,r2
   14118:	1007883a 	mov	r3,r2
   1411c:	e0bffb17 	ldw	r2,-20(fp)
   14120:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14124:	e0bffb17 	ldw	r2,-20(fp)
   14128:	e0ffff03 	ldbu	r3,-4(fp)
   1412c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14130:	e0bffb17 	ldw	r2,-20(fp)
   14134:	10800c03 	ldbu	r2,48(r2)
   14138:	10803fcc 	andi	r2,r2,255
   1413c:	1080020c 	andi	r2,r2,8
   14140:	1000111e 	bne	r2,zero,14188 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14144:	e0bffb17 	ldw	r2,-20(fp)
   14148:	10c00d83 	ldbu	r3,54(r2)
   1414c:	d0a83e03 	ldbu	r2,-24328(gp)
   14150:	1884b03a 	or	r2,r3,r2
   14154:	d0a83e05 	stb	r2,-24328(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14158:	e0fffa03 	ldbu	r3,-24(fp)
   1415c:	e13ffa03 	ldbu	r4,-24(fp)
   14160:	d0a83e44 	addi	r2,gp,-24327
   14164:	2085883a 	add	r2,r4,r2
   14168:	11000003 	ldbu	r4,0(r2)
   1416c:	e0bffb17 	ldw	r2,-20(fp)
   14170:	10800d43 	ldbu	r2,53(r2)
   14174:	2084b03a 	or	r2,r4,r2
   14178:	1009883a 	mov	r4,r2
   1417c:	d0a83e44 	addi	r2,gp,-24327
   14180:	1885883a 	add	r2,r3,r2
   14184:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14188:	e13ffb17 	ldw	r4,-20(fp)
   1418c:	e17ffc17 	ldw	r5,-16(fp)
   14190:	00144300 	call	14430 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14194:	e0bffb17 	ldw	r2,-20(fp)
   14198:	10800817 	ldw	r2,32(r2)
   1419c:	10000826 	beq	r2,zero,141c0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   141a0:	e0bffb17 	ldw	r2,-20(fp)
   141a4:	10800817 	ldw	r2,32(r2)
   141a8:	e13ffb17 	ldw	r4,-20(fp)
   141ac:	100b883a 	mov	r5,r2
   141b0:	00144e40 	call	144e4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   141b4:	e0bffb17 	ldw	r2,-20(fp)
   141b8:	e0fffc17 	ldw	r3,-16(fp)
   141bc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   141c0:	e0bffa83 	ldbu	r2,-22(fp)
}
   141c4:	e037883a 	mov	sp,fp
   141c8:	dfc00117 	ldw	ra,4(sp)
   141cc:	df000017 	ldw	fp,0(sp)
   141d0:	dec00204 	addi	sp,sp,8
   141d4:	f800283a 	ret

000141d8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   141d8:	defffd04 	addi	sp,sp,-12
   141dc:	df000215 	stw	fp,8(sp)
   141e0:	df000204 	addi	fp,sp,8
   141e4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   141e8:	d0a84117 	ldw	r2,-24316(gp)
   141ec:	e0ffff17 	ldw	r3,-4(fp)
   141f0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   141f4:	d0a84117 	ldw	r2,-24316(gp)
   141f8:	10800d03 	ldbu	r2,52(r2)
   141fc:	10803fcc 	andi	r2,r2,255
   14200:	d0e84117 	ldw	r3,-24316(gp)
   14204:	18c00d03 	ldbu	r3,52(r3)
   14208:	18c03fcc 	andi	r3,r3,255
   1420c:	e13fff17 	ldw	r4,-4(fp)
   14210:	20c7883a 	add	r3,r4,r3
   14214:	18c00204 	addi	r3,r3,8
   14218:	190000c3 	ldbu	r4,3(r3)
   1421c:	d0e84117 	ldw	r3,-24316(gp)
   14220:	18c00d43 	ldbu	r3,53(r3)
   14224:	20c6b03a 	or	r3,r4,r3
   14228:	1809883a 	mov	r4,r3
   1422c:	e0ffff17 	ldw	r3,-4(fp)
   14230:	1885883a 	add	r2,r3,r2
   14234:	10800204 	addi	r2,r2,8
   14238:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	10c00283 	ldbu	r3,10(r2)
   14244:	d0a84117 	ldw	r2,-24316(gp)
   14248:	10800d83 	ldbu	r2,54(r2)
   1424c:	1884b03a 	or	r2,r3,r2
   14250:	1007883a 	mov	r3,r2
   14254:	e0bfff17 	ldw	r2,-4(fp)
   14258:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1425c:	d0a84117 	ldw	r2,-24316(gp)
   14260:	10800d03 	ldbu	r2,52(r2)
   14264:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14268:	e0fffe03 	ldbu	r3,-8(fp)
   1426c:	e13ffe03 	ldbu	r4,-8(fp)
   14270:	d0a83e44 	addi	r2,gp,-24327
   14274:	2085883a 	add	r2,r4,r2
   14278:	10800003 	ldbu	r2,0(r2)
   1427c:	1009883a 	mov	r4,r2
   14280:	d0a84117 	ldw	r2,-24316(gp)
   14284:	10800d43 	ldbu	r2,53(r2)
   14288:	0084303a 	nor	r2,zero,r2
   1428c:	2084703a 	and	r2,r4,r2
   14290:	1009883a 	mov	r4,r2
   14294:	d0a83e44 	addi	r2,gp,-24327
   14298:	1885883a 	add	r2,r3,r2
   1429c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   142a0:	e0fffe03 	ldbu	r3,-8(fp)
   142a4:	d0a83e44 	addi	r2,gp,-24327
   142a8:	1885883a 	add	r2,r3,r2
   142ac:	10800003 	ldbu	r2,0(r2)
   142b0:	10803fcc 	andi	r2,r2,255
   142b4:	1000071e 	bne	r2,zero,142d4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   142b8:	d0a84117 	ldw	r2,-24316(gp)
   142bc:	10800d83 	ldbu	r2,54(r2)
   142c0:	0084303a 	nor	r2,zero,r2
   142c4:	1007883a 	mov	r3,r2
   142c8:	d0a83e03 	ldbu	r2,-24328(gp)
   142cc:	1884703a 	and	r2,r3,r2
   142d0:	d0a83e05 	stb	r2,-24328(gp)
    }
}
   142d4:	e037883a 	mov	sp,fp
   142d8:	df000017 	ldw	fp,0(sp)
   142dc:	dec00104 	addi	sp,sp,4
   142e0:	f800283a 	ret

000142e4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   142e4:	defffb04 	addi	sp,sp,-20
   142e8:	df000415 	stw	fp,16(sp)
   142ec:	df000404 	addi	fp,sp,16
   142f0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   142f4:	d0a84117 	ldw	r2,-24316(gp)
   142f8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   142fc:	d0a84117 	ldw	r2,-24316(gp)
   14300:	e0ffff17 	ldw	r3,-4(fp)
   14304:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   14308:	e0bfff17 	ldw	r2,-4(fp)
   1430c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14310:	e0bffc17 	ldw	r2,-16(fp)
   14314:	10800017 	ldw	r2,0(r2)
   14318:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1431c:	00002006 	br	143a0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14320:	d0a84117 	ldw	r2,-24316(gp)
   14324:	10800d03 	ldbu	r2,52(r2)
   14328:	10803fcc 	andi	r2,r2,255
   1432c:	d0e84117 	ldw	r3,-24316(gp)
   14330:	18c00d03 	ldbu	r3,52(r3)
   14334:	18c03fcc 	andi	r3,r3,255
   14338:	e13ffd17 	ldw	r4,-12(fp)
   1433c:	20c7883a 	add	r3,r4,r3
   14340:	18c00204 	addi	r3,r3,8
   14344:	190000c3 	ldbu	r4,3(r3)
   14348:	d0e84117 	ldw	r3,-24316(gp)
   1434c:	18c00d43 	ldbu	r3,53(r3)
   14350:	20c6b03a 	or	r3,r4,r3
   14354:	1809883a 	mov	r4,r3
   14358:	e0fffd17 	ldw	r3,-12(fp)
   1435c:	1885883a 	add	r2,r3,r2
   14360:	10800204 	addi	r2,r2,8
   14364:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14368:	e0bffd17 	ldw	r2,-12(fp)
   1436c:	10c00283 	ldbu	r3,10(r2)
   14370:	d0a84117 	ldw	r2,-24316(gp)
   14374:	10800d83 	ldbu	r2,54(r2)
   14378:	1884b03a 	or	r2,r3,r2
   1437c:	1007883a 	mov	r3,r2
   14380:	e0bffd17 	ldw	r2,-12(fp)
   14384:	10c00285 	stb	r3,10(r2)
        pevents++;
   14388:	e0bffc17 	ldw	r2,-16(fp)
   1438c:	10800104 	addi	r2,r2,4
   14390:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14394:	e0bffc17 	ldw	r2,-16(fp)
   14398:	10800017 	ldw	r2,0(r2)
   1439c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   143a0:	e0bffd17 	ldw	r2,-12(fp)
   143a4:	103fde1e 	bne	r2,zero,14320 <__alt_mem_Flash_flash_data+0xf4014320>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   143a8:	d0a84117 	ldw	r2,-24316(gp)
   143ac:	10800d03 	ldbu	r2,52(r2)
   143b0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   143b4:	e0fffe03 	ldbu	r3,-8(fp)
   143b8:	e13ffe03 	ldbu	r4,-8(fp)
   143bc:	d0a83e44 	addi	r2,gp,-24327
   143c0:	2085883a 	add	r2,r4,r2
   143c4:	10800003 	ldbu	r2,0(r2)
   143c8:	1009883a 	mov	r4,r2
   143cc:	d0a84117 	ldw	r2,-24316(gp)
   143d0:	10800d43 	ldbu	r2,53(r2)
   143d4:	0084303a 	nor	r2,zero,r2
   143d8:	2084703a 	and	r2,r4,r2
   143dc:	1009883a 	mov	r4,r2
   143e0:	d0a83e44 	addi	r2,gp,-24327
   143e4:	1885883a 	add	r2,r3,r2
   143e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   143ec:	e0fffe03 	ldbu	r3,-8(fp)
   143f0:	d0a83e44 	addi	r2,gp,-24327
   143f4:	1885883a 	add	r2,r3,r2
   143f8:	10800003 	ldbu	r2,0(r2)
   143fc:	10803fcc 	andi	r2,r2,255
   14400:	1000071e 	bne	r2,zero,14420 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14404:	d0a84117 	ldw	r2,-24316(gp)
   14408:	10800d83 	ldbu	r2,54(r2)
   1440c:	0084303a 	nor	r2,zero,r2
   14410:	1007883a 	mov	r3,r2
   14414:	d0a83e03 	ldbu	r2,-24328(gp)
   14418:	1884703a 	and	r2,r3,r2
   1441c:	d0a83e05 	stb	r2,-24328(gp)
    }
}
   14420:	e037883a 	mov	sp,fp
   14424:	df000017 	ldw	fp,0(sp)
   14428:	dec00104 	addi	sp,sp,4
   1442c:	f800283a 	ret

00014430 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14430:	defffc04 	addi	sp,sp,-16
   14434:	df000315 	stw	fp,12(sp)
   14438:	df000304 	addi	fp,sp,12
   1443c:	e13ffe15 	stw	r4,-8(fp)
   14440:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14444:	e0bffe17 	ldw	r2,-8(fp)
   14448:	10800d03 	ldbu	r2,52(r2)
   1444c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14450:	e0bffd03 	ldbu	r2,-12(fp)
   14454:	e0fffd03 	ldbu	r3,-12(fp)
   14458:	e13fff17 	ldw	r4,-4(fp)
   1445c:	20c7883a 	add	r3,r4,r3
   14460:	18c00204 	addi	r3,r3,8
   14464:	18c000c3 	ldbu	r3,3(r3)
   14468:	1809883a 	mov	r4,r3
   1446c:	e0fffe17 	ldw	r3,-8(fp)
   14470:	18c00d43 	ldbu	r3,53(r3)
   14474:	00c6303a 	nor	r3,zero,r3
   14478:	20c6703a 	and	r3,r4,r3
   1447c:	1809883a 	mov	r4,r3
   14480:	e0ffff17 	ldw	r3,-4(fp)
   14484:	1885883a 	add	r2,r3,r2
   14488:	10800204 	addi	r2,r2,8
   1448c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14490:	e0bffd03 	ldbu	r2,-12(fp)
   14494:	e0ffff17 	ldw	r3,-4(fp)
   14498:	1885883a 	add	r2,r3,r2
   1449c:	10800204 	addi	r2,r2,8
   144a0:	108000c3 	ldbu	r2,3(r2)
   144a4:	10803fcc 	andi	r2,r2,255
   144a8:	10000a1e 	bne	r2,zero,144d4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   144ac:	e0bfff17 	ldw	r2,-4(fp)
   144b0:	10800283 	ldbu	r2,10(r2)
   144b4:	1007883a 	mov	r3,r2
   144b8:	e0bffe17 	ldw	r2,-8(fp)
   144bc:	10800d83 	ldbu	r2,54(r2)
   144c0:	0084303a 	nor	r2,zero,r2
   144c4:	1884703a 	and	r2,r3,r2
   144c8:	1007883a 	mov	r3,r2
   144cc:	e0bfff17 	ldw	r2,-4(fp)
   144d0:	10c00285 	stb	r3,10(r2)
    }
}
   144d4:	e037883a 	mov	sp,fp
   144d8:	df000017 	ldw	fp,0(sp)
   144dc:	dec00104 	addi	sp,sp,4
   144e0:	f800283a 	ret

000144e4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   144e4:	defffa04 	addi	sp,sp,-24
   144e8:	df000515 	stw	fp,20(sp)
   144ec:	df000504 	addi	fp,sp,20
   144f0:	e13ffe15 	stw	r4,-8(fp)
   144f4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   144f8:	e0bffe17 	ldw	r2,-8(fp)
   144fc:	10800d03 	ldbu	r2,52(r2)
   14500:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   14504:	e0bffe17 	ldw	r2,-8(fp)
   14508:	10800d83 	ldbu	r2,54(r2)
   1450c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   14510:	e0bffe17 	ldw	r2,-8(fp)
   14514:	10800d43 	ldbu	r2,53(r2)
   14518:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1451c:	e0bfff17 	ldw	r2,-4(fp)
   14520:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   14524:	e0bffb17 	ldw	r2,-20(fp)
   14528:	10800017 	ldw	r2,0(r2)
   1452c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14530:	00002506 	br	145c8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14534:	e0bffd03 	ldbu	r2,-12(fp)
   14538:	e0fffd03 	ldbu	r3,-12(fp)
   1453c:	e13ffc17 	ldw	r4,-16(fp)
   14540:	20c7883a 	add	r3,r4,r3
   14544:	18c00204 	addi	r3,r3,8
   14548:	18c000c3 	ldbu	r3,3(r3)
   1454c:	1809883a 	mov	r4,r3
   14550:	e0fffd83 	ldbu	r3,-10(fp)
   14554:	00c6303a 	nor	r3,zero,r3
   14558:	20c6703a 	and	r3,r4,r3
   1455c:	1809883a 	mov	r4,r3
   14560:	e0fffc17 	ldw	r3,-16(fp)
   14564:	1885883a 	add	r2,r3,r2
   14568:	10800204 	addi	r2,r2,8
   1456c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   14570:	e0bffd03 	ldbu	r2,-12(fp)
   14574:	e0fffc17 	ldw	r3,-16(fp)
   14578:	1885883a 	add	r2,r3,r2
   1457c:	10800204 	addi	r2,r2,8
   14580:	108000c3 	ldbu	r2,3(r2)
   14584:	10803fcc 	andi	r2,r2,255
   14588:	1000091e 	bne	r2,zero,145b0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1458c:	e0bffc17 	ldw	r2,-16(fp)
   14590:	10800283 	ldbu	r2,10(r2)
   14594:	1007883a 	mov	r3,r2
   14598:	e0bffd43 	ldbu	r2,-11(fp)
   1459c:	0084303a 	nor	r2,zero,r2
   145a0:	1884703a 	and	r2,r3,r2
   145a4:	1007883a 	mov	r3,r2
   145a8:	e0bffc17 	ldw	r2,-16(fp)
   145ac:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   145b0:	e0bffb17 	ldw	r2,-20(fp)
   145b4:	10800104 	addi	r2,r2,4
   145b8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   145bc:	e0bffb17 	ldw	r2,-20(fp)
   145c0:	10800017 	ldw	r2,0(r2)
   145c4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   145c8:	e0bffc17 	ldw	r2,-16(fp)
   145cc:	103fd91e 	bne	r2,zero,14534 <__alt_mem_Flash_flash_data+0xf4014534>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   145d0:	e037883a 	mov	sp,fp
   145d4:	df000017 	ldw	fp,0(sp)
   145d8:	dec00104 	addi	sp,sp,4
   145dc:	f800283a 	ret

000145e0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   145e0:	defffc04 	addi	sp,sp,-16
   145e4:	df000315 	stw	fp,12(sp)
   145e8:	df000304 	addi	fp,sp,12
   145ec:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   145f0:	e0bfff17 	ldw	r2,-4(fp)
   145f4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   145f8:	e0bfff17 	ldw	r2,-4(fp)
   145fc:	108002c4 	addi	r2,r2,11
   14600:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14604:	e03ffe05 	stb	zero,-8(fp)
   14608:	00000706 	br	14628 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1460c:	e0bffd17 	ldw	r2,-12(fp)
   14610:	10c00044 	addi	r3,r2,1
   14614:	e0fffd15 	stw	r3,-12(fp)
   14618:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1461c:	e0bffe03 	ldbu	r2,-8(fp)
   14620:	10800044 	addi	r2,r2,1
   14624:	e0bffe05 	stb	r2,-8(fp)
   14628:	e0bffe03 	ldbu	r2,-8(fp)
   1462c:	108000f0 	cmpltui	r2,r2,3
   14630:	103ff61e 	bne	r2,zero,1460c <__alt_mem_Flash_flash_data+0xf401460c>
        *ptbl++ = 0;
    }
}
   14634:	e037883a 	mov	sp,fp
   14638:	df000017 	ldw	fp,0(sp)
   1463c:	dec00104 	addi	sp,sp,4
   14640:	f800283a 	ret

00014644 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   14644:	defffb04 	addi	sp,sp,-20
   14648:	dfc00415 	stw	ra,16(sp)
   1464c:	df000315 	stw	fp,12(sp)
   14650:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   14654:	01000174 	movhi	r4,5
   14658:	21208e04 	addi	r4,r4,-32200
   1465c:	0142d004 	movi	r5,2880
   14660:	00149a40 	call	149a4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   14664:	00800174 	movhi	r2,5
   14668:	10a08e04 	addi	r2,r2,-32200
   1466c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14670:	00800174 	movhi	r2,5
   14674:	10a09a04 	addi	r2,r2,-32152
   14678:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1467c:	e03ffd0d 	sth	zero,-12(fp)
   14680:	00001306 	br	146d0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14684:	e0bffe17 	ldw	r2,-8(fp)
   14688:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1468c:	e0bffe17 	ldw	r2,-8(fp)
   14690:	e0ffff17 	ldw	r3,-4(fp)
   14694:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   14698:	e0bffe17 	ldw	r2,-8(fp)
   1469c:	00c00fc4 	movi	r3,63
   146a0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   146a4:	e0bffe17 	ldw	r2,-8(fp)
   146a8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   146ac:	e0bffe17 	ldw	r2,-8(fp)
   146b0:	10800c04 	addi	r2,r2,48
   146b4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   146b8:	e0bfff17 	ldw	r2,-4(fp)
   146bc:	10800c04 	addi	r2,r2,48
   146c0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   146c4:	e0bffd0b 	ldhu	r2,-12(fp)
   146c8:	10800044 	addi	r2,r2,1
   146cc:	e0bffd0d 	sth	r2,-12(fp)
   146d0:	e0bffd0b 	ldhu	r2,-12(fp)
   146d4:	10800ef0 	cmpltui	r2,r2,59
   146d8:	103fea1e 	bne	r2,zero,14684 <__alt_mem_Flash_flash_data+0xf4014684>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   146dc:	e0bffe17 	ldw	r2,-8(fp)
   146e0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   146e4:	e0bffe17 	ldw	r2,-8(fp)
   146e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   146ec:	e0bffe17 	ldw	r2,-8(fp)
   146f0:	00c00fc4 	movi	r3,63
   146f4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   146f8:	e0bffe17 	ldw	r2,-8(fp)
   146fc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   14700:	00800174 	movhi	r2,5
   14704:	10a08e04 	addi	r2,r2,-32200
   14708:	d0a83f15 	stw	r2,-24324(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1470c:	e037883a 	mov	sp,fp
   14710:	dfc00117 	ldw	ra,4(sp)
   14714:	df000017 	ldw	fp,0(sp)
   14718:	dec00204 	addi	sp,sp,8
   1471c:	f800283a 	ret

00014720 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   14720:	deffff04 	addi	sp,sp,-4
   14724:	df000015 	stw	fp,0(sp)
   14728:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1472c:	d0284215 	stw	zero,-24312(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   14730:	d0284005 	stb	zero,-24320(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   14734:	d0283205 	stb	zero,-24376(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   14738:	d0283a45 	stb	zero,-24343(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1473c:	d0283245 	stb	zero,-24375(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   14740:	d0283715 	stw	zero,-24356(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   14744:	d0283315 	stw	zero,-24372(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   14748:	d0284515 	stw	zero,-24300(gp)
    OSIdleCtrMax  = 0L;
   1474c:	d0283815 	stw	zero,-24352(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   14750:	d0284405 	stb	zero,-24304(gp)
#endif
}
   14754:	e037883a 	mov	sp,fp
   14758:	df000017 	ldw	fp,0(sp)
   1475c:	dec00104 	addi	sp,sp,4
   14760:	f800283a 	ret

00014764 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   14764:	defffd04 	addi	sp,sp,-12
   14768:	df000215 	stw	fp,8(sp)
   1476c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   14770:	d0283e05 	stb	zero,-24328(gp)
    prdytbl       = &OSRdyTbl[0];
   14774:	d0a83e44 	addi	r2,gp,-24327
   14778:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1477c:	e03ffe05 	stb	zero,-8(fp)
   14780:	00000706 	br	147a0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   14784:	e0bfff17 	ldw	r2,-4(fp)
   14788:	10c00044 	addi	r3,r2,1
   1478c:	e0ffff15 	stw	r3,-4(fp)
   14790:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14794:	e0bffe03 	ldbu	r2,-8(fp)
   14798:	10800044 	addi	r2,r2,1
   1479c:	e0bffe05 	stb	r2,-8(fp)
   147a0:	e0bffe03 	ldbu	r2,-8(fp)
   147a4:	108000f0 	cmpltui	r2,r2,3
   147a8:	103ff61e 	bne	r2,zero,14784 <__alt_mem_Flash_flash_data+0xf4014784>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   147ac:	d0283445 	stb	zero,-24367(gp)
    OSPrioHighRdy = 0;
   147b0:	d0283405 	stb	zero,-24368(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   147b4:	d0283c15 	stw	zero,-24336(gp)
    OSTCBCur      = (OS_TCB *)0;
   147b8:	d0284115 	stw	zero,-24316(gp)
}
   147bc:	e037883a 	mov	sp,fp
   147c0:	df000017 	ldw	fp,0(sp)
   147c4:	dec00104 	addi	sp,sp,4
   147c8:	f800283a 	ret

000147cc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   147cc:	defff804 	addi	sp,sp,-32
   147d0:	dfc00715 	stw	ra,28(sp)
   147d4:	df000615 	stw	fp,24(sp)
   147d8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   147dc:	00bfffd4 	movui	r2,65535
   147e0:	d8800015 	stw	r2,0(sp)
   147e4:	00800134 	movhi	r2,4
   147e8:	109e8e04 	addi	r2,r2,31288
   147ec:	d8800115 	stw	r2,4(sp)
   147f0:	00808004 	movi	r2,512
   147f4:	d8800215 	stw	r2,8(sp)
   147f8:	d8000315 	stw	zero,12(sp)
   147fc:	008000c4 	movi	r2,3
   14800:	d8800415 	stw	r2,16(sp)
   14804:	01000074 	movhi	r4,1
   14808:	21131704 	addi	r4,r4,19548
   1480c:	000b883a 	mov	r5,zero
   14810:	01800174 	movhi	r6,5
   14814:	31a08d04 	addi	r6,r6,-32204
   14818:	01c00504 	movi	r7,20
   1481c:	001a1f80 	call	1a1f8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   14820:	01000504 	movi	r4,20
   14824:	014000b4 	movhi	r5,2
   14828:	297fbc04 	addi	r5,r5,-272
   1482c:	e1bfff04 	addi	r6,fp,-4
   14830:	001aac40 	call	1aac4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   14834:	e037883a 	mov	sp,fp
   14838:	dfc00117 	ldw	ra,4(sp)
   1483c:	df000017 	ldw	fp,0(sp)
   14840:	dec00204 	addi	sp,sp,8
   14844:	f800283a 	ret

00014848 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   14848:	defff804 	addi	sp,sp,-32
   1484c:	dfc00715 	stw	ra,28(sp)
   14850:	df000615 	stw	fp,24(sp)
   14854:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14858:	00bfff94 	movui	r2,65534
   1485c:	d8800015 	stw	r2,0(sp)
   14860:	00800134 	movhi	r2,4
   14864:	109c1604 	addi	r2,r2,28760
   14868:	d8800115 	stw	r2,4(sp)
   1486c:	00808004 	movi	r2,512
   14870:	d8800215 	stw	r2,8(sp)
   14874:	d8000315 	stw	zero,12(sp)
   14878:	008000c4 	movi	r2,3
   1487c:	d8800415 	stw	r2,16(sp)
   14880:	01000074 	movhi	r4,1
   14884:	21132e04 	addi	r4,r4,19640
   14888:	000b883a 	mov	r5,zero
   1488c:	01800134 	movhi	r6,4
   14890:	319e1504 	addi	r6,r6,30804
   14894:	01c004c4 	movi	r7,19
   14898:	001a1f80 	call	1a1f8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1489c:	010004c4 	movi	r4,19
   148a0:	014000b4 	movhi	r5,2
   148a4:	297fc004 	addi	r5,r5,-256
   148a8:	e1bfff04 	addi	r6,fp,-4
   148ac:	001aac40 	call	1aac4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   148b0:	e037883a 	mov	sp,fp
   148b4:	dfc00117 	ldw	ra,4(sp)
   148b8:	df000017 	ldw	fp,0(sp)
   148bc:	dec00204 	addi	sp,sp,8
   148c0:	f800283a 	ret

000148c4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   148c4:	defffb04 	addi	sp,sp,-20
   148c8:	dfc00415 	stw	ra,16(sp)
   148cc:	df000315 	stw	fp,12(sp)
   148d0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   148d4:	01000174 	movhi	r4,5
   148d8:	21235e04 	addi	r4,r4,-29320
   148dc:	01414404 	movi	r5,1296
   148e0:	00149a40 	call	149a4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   148e4:	01000174 	movhi	r4,5
   148e8:	2124a204 	addi	r4,r4,-28024
   148ec:	01401504 	movi	r5,84
   148f0:	00149a40 	call	149a4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   148f4:	00800174 	movhi	r2,5
   148f8:	10a35e04 	addi	r2,r2,-29320
   148fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14900:	00800174 	movhi	r2,5
   14904:	10a37904 	addi	r2,r2,-29212
   14908:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1490c:	e03ffd05 	stb	zero,-12(fp)
   14910:	00001106 	br	14958 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14914:	e0bffe17 	ldw	r2,-8(fp)
   14918:	e0ffff17 	ldw	r3,-4(fp)
   1491c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14920:	e0bffe17 	ldw	r2,-8(fp)
   14924:	00c00fc4 	movi	r3,63
   14928:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1492c:	e0bffe17 	ldw	r2,-8(fp)
   14930:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14934:	e0bffe17 	ldw	r2,-8(fp)
   14938:	10801b04 	addi	r2,r2,108
   1493c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   14940:	e0bfff17 	ldw	r2,-4(fp)
   14944:	10801b04 	addi	r2,r2,108
   14948:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1494c:	e0bffd03 	ldbu	r2,-12(fp)
   14950:	10800044 	addi	r2,r2,1
   14954:	e0bffd05 	stb	r2,-12(fp)
   14958:	e0bffd03 	ldbu	r2,-12(fp)
   1495c:	108002f0 	cmpltui	r2,r2,11
   14960:	103fec1e 	bne	r2,zero,14914 <__alt_mem_Flash_flash_data+0xf4014914>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14964:	e0bffe17 	ldw	r2,-8(fp)
   14968:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1496c:	e0bffe17 	ldw	r2,-8(fp)
   14970:	00c00fc4 	movi	r3,63
   14974:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14978:	e0bffe17 	ldw	r2,-8(fp)
   1497c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14980:	d0283515 	stw	zero,-24364(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14984:	00800174 	movhi	r2,5
   14988:	10a35e04 	addi	r2,r2,-29320
   1498c:	d0a83915 	stw	r2,-24348(gp)
}
   14990:	e037883a 	mov	sp,fp
   14994:	dfc00117 	ldw	ra,4(sp)
   14998:	df000017 	ldw	fp,0(sp)
   1499c:	dec00204 	addi	sp,sp,8
   149a0:	f800283a 	ret

000149a4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   149a4:	defffd04 	addi	sp,sp,-12
   149a8:	df000215 	stw	fp,8(sp)
   149ac:	df000204 	addi	fp,sp,8
   149b0:	e13ffe15 	stw	r4,-8(fp)
   149b4:	2805883a 	mov	r2,r5
   149b8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   149bc:	00000706 	br	149dc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   149c0:	e0bffe17 	ldw	r2,-8(fp)
   149c4:	10c00044 	addi	r3,r2,1
   149c8:	e0fffe15 	stw	r3,-8(fp)
   149cc:	10000005 	stb	zero,0(r2)
        size--;
   149d0:	e0bfff0b 	ldhu	r2,-4(fp)
   149d4:	10bfffc4 	addi	r2,r2,-1
   149d8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   149dc:	e0bfff0b 	ldhu	r2,-4(fp)
   149e0:	103ff71e 	bne	r2,zero,149c0 <__alt_mem_Flash_flash_data+0xf40149c0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   149e4:	e037883a 	mov	sp,fp
   149e8:	df000017 	ldw	fp,0(sp)
   149ec:	dec00104 	addi	sp,sp,4
   149f0:	f800283a 	ret

000149f4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   149f4:	defffc04 	addi	sp,sp,-16
   149f8:	df000315 	stw	fp,12(sp)
   149fc:	df000304 	addi	fp,sp,12
   14a00:	e13ffd15 	stw	r4,-12(fp)
   14a04:	e17ffe15 	stw	r5,-8(fp)
   14a08:	3005883a 	mov	r2,r6
   14a0c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14a10:	00000b06 	br	14a40 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14a14:	e0bffd17 	ldw	r2,-12(fp)
   14a18:	10c00044 	addi	r3,r2,1
   14a1c:	e0fffd15 	stw	r3,-12(fp)
   14a20:	e0fffe17 	ldw	r3,-8(fp)
   14a24:	19000044 	addi	r4,r3,1
   14a28:	e13ffe15 	stw	r4,-8(fp)
   14a2c:	18c00003 	ldbu	r3,0(r3)
   14a30:	10c00005 	stb	r3,0(r2)
        size--;
   14a34:	e0bfff0b 	ldhu	r2,-4(fp)
   14a38:	10bfffc4 	addi	r2,r2,-1
   14a3c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14a40:	e0bfff0b 	ldhu	r2,-4(fp)
   14a44:	103ff31e 	bne	r2,zero,14a14 <__alt_mem_Flash_flash_data+0xf4014a14>
        *pdest++ = *psrc++;
        size--;
    }
}
   14a48:	e037883a 	mov	sp,fp
   14a4c:	df000017 	ldw	fp,0(sp)
   14a50:	dec00104 	addi	sp,sp,4
   14a54:	f800283a 	ret

00014a58 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14a58:	defffb04 	addi	sp,sp,-20
   14a5c:	dfc00415 	stw	ra,16(sp)
   14a60:	df000315 	stw	fp,12(sp)
   14a64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14a68:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a6c:	0005303a 	rdctl	r2,status
   14a70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a74:	e0fffe17 	ldw	r3,-8(fp)
   14a78:	00bfff84 	movi	r2,-2
   14a7c:	1884703a 	and	r2,r3,r2
   14a80:	1001703a 	wrctl	status,r2
  
  return context;
   14a84:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14a88:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14a8c:	d0a84003 	ldbu	r2,-24320(gp)
   14a90:	10803fcc 	andi	r2,r2,255
   14a94:	10001a1e 	bne	r2,zero,14b00 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14a98:	d0a83203 	ldbu	r2,-24376(gp)
   14a9c:	10803fcc 	andi	r2,r2,255
   14aa0:	1000171e 	bne	r2,zero,14b00 <OS_Sched+0xa8>
            OS_SchedNew();
   14aa4:	0014b240 	call	14b24 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14aa8:	d0e83403 	ldbu	r3,-24368(gp)
   14aac:	d0a83443 	ldbu	r2,-24367(gp)
   14ab0:	18c03fcc 	andi	r3,r3,255
   14ab4:	10803fcc 	andi	r2,r2,255
   14ab8:	18801126 	beq	r3,r2,14b00 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14abc:	d0a83403 	ldbu	r2,-24368(gp)
   14ac0:	10c03fcc 	andi	r3,r2,255
   14ac4:	00800174 	movhi	r2,5
   14ac8:	10a4a204 	addi	r2,r2,-28024
   14acc:	18c7883a 	add	r3,r3,r3
   14ad0:	18c7883a 	add	r3,r3,r3
   14ad4:	10c5883a 	add	r2,r2,r3
   14ad8:	10800017 	ldw	r2,0(r2)
   14adc:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14ae0:	d0a83c17 	ldw	r2,-24336(gp)
   14ae4:	10c00e17 	ldw	r3,56(r2)
   14ae8:	18c00044 	addi	r3,r3,1
   14aec:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14af0:	d0a83717 	ldw	r2,-24356(gp)
   14af4:	10800044 	addi	r2,r2,1
   14af8:	d0a83715 	stw	r2,-24356(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14afc:	001ec600 	call	1ec60 <OSCtxSw>
   14b00:	e0bffd17 	ldw	r2,-12(fp)
   14b04:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b08:	e0bfff17 	ldw	r2,-4(fp)
   14b0c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14b10:	e037883a 	mov	sp,fp
   14b14:	dfc00117 	ldw	ra,4(sp)
   14b18:	df000017 	ldw	fp,0(sp)
   14b1c:	dec00204 	addi	sp,sp,8
   14b20:	f800283a 	ret

00014b24 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14b24:	defffe04 	addi	sp,sp,-8
   14b28:	df000115 	stw	fp,4(sp)
   14b2c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14b30:	d0a83e03 	ldbu	r2,-24328(gp)
   14b34:	10c03fcc 	andi	r3,r2,255
   14b38:	008000b4 	movhi	r2,2
   14b3c:	10bf7c04 	addi	r2,r2,-528
   14b40:	10c5883a 	add	r2,r2,r3
   14b44:	10800003 	ldbu	r2,0(r2)
   14b48:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14b4c:	e0bfff03 	ldbu	r2,-4(fp)
   14b50:	100490fa 	slli	r2,r2,3
   14b54:	1009883a 	mov	r4,r2
   14b58:	e0ffff03 	ldbu	r3,-4(fp)
   14b5c:	d0a83e44 	addi	r2,gp,-24327
   14b60:	1885883a 	add	r2,r3,r2
   14b64:	10800003 	ldbu	r2,0(r2)
   14b68:	10c03fcc 	andi	r3,r2,255
   14b6c:	008000b4 	movhi	r2,2
   14b70:	10bf7c04 	addi	r2,r2,-528
   14b74:	10c5883a 	add	r2,r2,r3
   14b78:	10800003 	ldbu	r2,0(r2)
   14b7c:	2085883a 	add	r2,r4,r2
   14b80:	d0a83405 	stb	r2,-24368(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14b84:	e037883a 	mov	sp,fp
   14b88:	df000017 	ldw	fp,0(sp)
   14b8c:	dec00104 	addi	sp,sp,4
   14b90:	f800283a 	ret

00014b94 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14b94:	defffc04 	addi	sp,sp,-16
   14b98:	df000315 	stw	fp,12(sp)
   14b9c:	df000304 	addi	fp,sp,12
   14ba0:	e13ffe15 	stw	r4,-8(fp)
   14ba4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14ba8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14bac:	00000b06 	br	14bdc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	10c00044 	addi	r3,r2,1
   14bb8:	e0fffe15 	stw	r3,-8(fp)
   14bbc:	e0ffff17 	ldw	r3,-4(fp)
   14bc0:	19000044 	addi	r4,r3,1
   14bc4:	e13fff15 	stw	r4,-4(fp)
   14bc8:	18c00003 	ldbu	r3,0(r3)
   14bcc:	10c00005 	stb	r3,0(r2)
        len++;
   14bd0:	e0bffd03 	ldbu	r2,-12(fp)
   14bd4:	10800044 	addi	r2,r2,1
   14bd8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14bdc:	e0bfff17 	ldw	r2,-4(fp)
   14be0:	10800003 	ldbu	r2,0(r2)
   14be4:	10803fcc 	andi	r2,r2,255
   14be8:	103ff11e 	bne	r2,zero,14bb0 <__alt_mem_Flash_flash_data+0xf4014bb0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14bec:	e0bffe17 	ldw	r2,-8(fp)
   14bf0:	10000005 	stb	zero,0(r2)
    return (len);
   14bf4:	e0bffd03 	ldbu	r2,-12(fp)
}
   14bf8:	e037883a 	mov	sp,fp
   14bfc:	df000017 	ldw	fp,0(sp)
   14c00:	dec00104 	addi	sp,sp,4
   14c04:	f800283a 	ret

00014c08 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14c08:	defffd04 	addi	sp,sp,-12
   14c0c:	df000215 	stw	fp,8(sp)
   14c10:	df000204 	addi	fp,sp,8
   14c14:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14c18:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14c1c:	00000606 	br	14c38 <OS_StrLen+0x30>
        psrc++;
   14c20:	e0bfff17 	ldw	r2,-4(fp)
   14c24:	10800044 	addi	r2,r2,1
   14c28:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14c2c:	e0bffe03 	ldbu	r2,-8(fp)
   14c30:	10800044 	addi	r2,r2,1
   14c34:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14c38:	e0bfff17 	ldw	r2,-4(fp)
   14c3c:	10800003 	ldbu	r2,0(r2)
   14c40:	10803fcc 	andi	r2,r2,255
   14c44:	103ff61e 	bne	r2,zero,14c20 <__alt_mem_Flash_flash_data+0xf4014c20>
        psrc++;
        len++;
    }
    return (len);
   14c48:	e0bffe03 	ldbu	r2,-8(fp)
}
   14c4c:	e037883a 	mov	sp,fp
   14c50:	df000017 	ldw	fp,0(sp)
   14c54:	dec00104 	addi	sp,sp,4
   14c58:	f800283a 	ret

00014c5c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14c5c:	defffa04 	addi	sp,sp,-24
   14c60:	dfc00515 	stw	ra,20(sp)
   14c64:	df000415 	stw	fp,16(sp)
   14c68:	df000404 	addi	fp,sp,16
   14c6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c74:	0005303a 	rdctl	r2,status
   14c78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c7c:	e0fffd17 	ldw	r3,-12(fp)
   14c80:	00bfff84 	movi	r2,-2
   14c84:	1884703a 	and	r2,r3,r2
   14c88:	1001703a 	wrctl	status,r2
  
  return context;
   14c8c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14c90:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14c94:	d0a83317 	ldw	r2,-24372(gp)
   14c98:	10800044 	addi	r2,r2,1
   14c9c:	d0a83315 	stw	r2,-24372(gp)
   14ca0:	e0bffc17 	ldw	r2,-16(fp)
   14ca4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ca8:	e0bffe17 	ldw	r2,-8(fp)
   14cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14cb0:	001ef580 	call	1ef58 <OSTaskIdleHook>
    }
   14cb4:	003fef06 	br	14c74 <__alt_mem_Flash_flash_data+0xf4014c74>

00014cb8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14cb8:	defff804 	addi	sp,sp,-32
   14cbc:	dfc00715 	stw	ra,28(sp)
   14cc0:	df000615 	stw	fp,24(sp)
   14cc4:	dc400515 	stw	r17,20(sp)
   14cc8:	dc000415 	stw	r16,16(sp)
   14ccc:	df000604 	addi	fp,sp,24
   14cd0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14cd4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14cd8:	00000206 	br	14ce4 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14cdc:	01000044 	movi	r4,1
   14ce0:	001b3f00 	call	1b3f0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14ce4:	d0a84403 	ldbu	r2,-24304(gp)
   14ce8:	10803fcc 	andi	r2,r2,255
   14cec:	103ffb26 	beq	r2,zero,14cdc <__alt_mem_Flash_flash_data+0xf4014cdc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14cf0:	d0e83817 	ldw	r3,-24352(gp)
   14cf4:	00947b34 	movhi	r2,20972
   14cf8:	10a147c4 	addi	r2,r2,-31457
   14cfc:	1888383a 	mulxuu	r4,r3,r2
   14d00:	1885383a 	mul	r2,r3,r2
   14d04:	1021883a 	mov	r16,r2
   14d08:	2023883a 	mov	r17,r4
   14d0c:	8804d17a 	srli	r2,r17,5
   14d10:	d0a83815 	stw	r2,-24352(gp)
    if (OSIdleCtrMax == 0L) {
   14d14:	d0a83817 	ldw	r2,-24352(gp)
   14d18:	1000031e 	bne	r2,zero,14d28 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14d1c:	d0283a05 	stb	zero,-24344(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14d20:	01003fc4 	movi	r4,255
   14d24:	001b0440 	call	1b044 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d28:	0005303a 	rdctl	r2,status
   14d2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d30:	e0fffb17 	ldw	r3,-20(fp)
   14d34:	00bfff84 	movi	r2,-2
   14d38:	1884703a 	and	r2,r3,r2
   14d3c:	1001703a 	wrctl	status,r2
  
  return context;
   14d40:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14d44:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14d48:	d0a83317 	ldw	r2,-24372(gp)
   14d4c:	d0a84515 	stw	r2,-24300(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14d50:	d0283315 	stw	zero,-24372(gp)
   14d54:	e0bffa17 	ldw	r2,-24(fp)
   14d58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d5c:	e0bffc17 	ldw	r2,-16(fp)
   14d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14d64:	d0e84517 	ldw	r3,-24300(gp)
   14d68:	d0a83817 	ldw	r2,-24352(gp)
   14d6c:	1885203a 	divu	r2,r3,r2
   14d70:	1007883a 	mov	r3,r2
   14d74:	00801904 	movi	r2,100
   14d78:	10c5c83a 	sub	r2,r2,r3
   14d7c:	d0a83a05 	stb	r2,-24344(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14d80:	001eee80 	call	1eee8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14d84:	0014d940 	call	14d94 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14d88:	0009883a 	mov	r4,zero
   14d8c:	001b3f00 	call	1b3f0 <OSTimeDly>
    }
   14d90:	003fe506 	br	14d28 <__alt_mem_Flash_flash_data+0xf4014d28>

00014d94 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14d94:	defffa04 	addi	sp,sp,-24
   14d98:	dfc00515 	stw	ra,20(sp)
   14d9c:	df000415 	stw	fp,16(sp)
   14da0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14da4:	e03ffc05 	stb	zero,-16(fp)
   14da8:	00002406 	br	14e3c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14dac:	e0fffc03 	ldbu	r3,-16(fp)
   14db0:	e0bffe04 	addi	r2,fp,-8
   14db4:	1809883a 	mov	r4,r3
   14db8:	100b883a 	mov	r5,r2
   14dbc:	001ae7c0 	call	1ae7c <OSTaskStkChk>
   14dc0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14dc4:	e0bffc43 	ldbu	r2,-15(fp)
   14dc8:	1000191e 	bne	r2,zero,14e30 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14dcc:	e0fffc03 	ldbu	r3,-16(fp)
   14dd0:	00800174 	movhi	r2,5
   14dd4:	10a4a204 	addi	r2,r2,-28024
   14dd8:	18c7883a 	add	r3,r3,r3
   14ddc:	18c7883a 	add	r3,r3,r3
   14de0:	10c5883a 	add	r2,r2,r3
   14de4:	10800017 	ldw	r2,0(r2)
   14de8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14dec:	e0bffd17 	ldw	r2,-12(fp)
   14df0:	10000f26 	beq	r2,zero,14e30 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14df4:	e0bffd17 	ldw	r2,-12(fp)
   14df8:	10800060 	cmpeqi	r2,r2,1
   14dfc:	10000c1e 	bne	r2,zero,14e30 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14e00:	e0bffd17 	ldw	r2,-12(fp)
   14e04:	10c00217 	ldw	r3,8(r2)
   14e08:	e0bffd17 	ldw	r2,-12(fp)
   14e0c:	10800317 	ldw	r2,12(r2)
   14e10:	1085883a 	add	r2,r2,r2
   14e14:	1085883a 	add	r2,r2,r2
   14e18:	1887883a 	add	r3,r3,r2
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   14e24:	e0ffff17 	ldw	r3,-4(fp)
   14e28:	e0bffd17 	ldw	r2,-12(fp)
   14e2c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14e30:	e0bffc03 	ldbu	r2,-16(fp)
   14e34:	10800044 	addi	r2,r2,1
   14e38:	e0bffc05 	stb	r2,-16(fp)
   14e3c:	e0bffc03 	ldbu	r2,-16(fp)
   14e40:	10800570 	cmpltui	r2,r2,21
   14e44:	103fd91e 	bne	r2,zero,14dac <__alt_mem_Flash_flash_data+0xf4014dac>
#endif
                }
            }
        }
    }
}
   14e48:	e037883a 	mov	sp,fp
   14e4c:	dfc00117 	ldw	ra,4(sp)
   14e50:	df000017 	ldw	fp,0(sp)
   14e54:	dec00204 	addi	sp,sp,8
   14e58:	f800283a 	ret

00014e5c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   14e5c:	defff204 	addi	sp,sp,-56
   14e60:	dfc00d15 	stw	ra,52(sp)
   14e64:	df000c15 	stw	fp,48(sp)
   14e68:	df000c04 	addi	fp,sp,48
   14e6c:	e17ffc15 	stw	r5,-16(fp)
   14e70:	e1bffd15 	stw	r6,-12(fp)
   14e74:	3807883a 	mov	r3,r7
   14e78:	e0800417 	ldw	r2,16(fp)
   14e7c:	e13ffb05 	stb	r4,-20(fp)
   14e80:	e0fffe0d 	sth	r3,-8(fp)
   14e84:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14e88:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e8c:	0005303a 	rdctl	r2,status
   14e90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e94:	e0fff617 	ldw	r3,-40(fp)
   14e98:	00bfff84 	movi	r2,-2
   14e9c:	1884703a 	and	r2,r3,r2
   14ea0:	1001703a 	wrctl	status,r2
  
  return context;
   14ea4:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   14ea8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   14eac:	d0a83917 	ldw	r2,-24348(gp)
   14eb0:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   14eb4:	e0bff517 	ldw	r2,-44(fp)
   14eb8:	10009326 	beq	r2,zero,15108 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   14ebc:	e0bff517 	ldw	r2,-44(fp)
   14ec0:	10800517 	ldw	r2,20(r2)
   14ec4:	d0a83915 	stw	r2,-24348(gp)
   14ec8:	e0bff417 	ldw	r2,-48(fp)
   14ecc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ed0:	e0bff717 	ldw	r2,-36(fp)
   14ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   14ed8:	e0bff517 	ldw	r2,-44(fp)
   14edc:	e0fffc17 	ldw	r3,-16(fp)
   14ee0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   14ee4:	e0bff517 	ldw	r2,-44(fp)
   14ee8:	e0fffb03 	ldbu	r3,-20(fp)
   14eec:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   14ef0:	e0bff517 	ldw	r2,-44(fp)
   14ef4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   14ef8:	e0bff517 	ldw	r2,-44(fp)
   14efc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   14f00:	e0bff517 	ldw	r2,-44(fp)
   14f04:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   14f08:	e0bff517 	ldw	r2,-44(fp)
   14f0c:	e0c00317 	ldw	r3,12(fp)
   14f10:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   14f14:	e0bff517 	ldw	r2,-44(fp)
   14f18:	e0c00217 	ldw	r3,8(fp)
   14f1c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   14f20:	e0bff517 	ldw	r2,-44(fp)
   14f24:	e0fffd17 	ldw	r3,-12(fp)
   14f28:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   14f2c:	e0bff517 	ldw	r2,-44(fp)
   14f30:	e0ffff0b 	ldhu	r3,-4(fp)
   14f34:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   14f38:	e0bff517 	ldw	r2,-44(fp)
   14f3c:	e0fffe0b 	ldhu	r3,-8(fp)
   14f40:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   14f44:	e0bff517 	ldw	r2,-44(fp)
   14f48:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   14f4c:	e0bffb03 	ldbu	r2,-20(fp)
   14f50:	1004d0fa 	srli	r2,r2,3
   14f54:	1007883a 	mov	r3,r2
   14f58:	e0bff517 	ldw	r2,-44(fp)
   14f5c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   14f60:	e0bffb03 	ldbu	r2,-20(fp)
   14f64:	108001cc 	andi	r2,r2,7
   14f68:	1007883a 	mov	r3,r2
   14f6c:	e0bff517 	ldw	r2,-44(fp)
   14f70:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   14f74:	e0bff517 	ldw	r2,-44(fp)
   14f78:	10800d03 	ldbu	r2,52(r2)
   14f7c:	10803fcc 	andi	r2,r2,255
   14f80:	00c00044 	movi	r3,1
   14f84:	1884983a 	sll	r2,r3,r2
   14f88:	1007883a 	mov	r3,r2
   14f8c:	e0bff517 	ldw	r2,-44(fp)
   14f90:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   14f94:	e0bff517 	ldw	r2,-44(fp)
   14f98:	10800cc3 	ldbu	r2,51(r2)
   14f9c:	10803fcc 	andi	r2,r2,255
   14fa0:	00c00044 	movi	r3,1
   14fa4:	1884983a 	sll	r2,r3,r2
   14fa8:	1007883a 	mov	r3,r2
   14fac:	e0bff517 	ldw	r2,-44(fp)
   14fb0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   14fb4:	e0bff517 	ldw	r2,-44(fp)
   14fb8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   14fbc:	e0bff517 	ldw	r2,-44(fp)
   14fc0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   14fc4:	e0bff517 	ldw	r2,-44(fp)
   14fc8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   14fcc:	e0bff517 	ldw	r2,-44(fp)
   14fd0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   14fd4:	e0bff517 	ldw	r2,-44(fp)
   14fd8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   14fdc:	e0bff517 	ldw	r2,-44(fp)
   14fe0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   14fe4:	e0bff517 	ldw	r2,-44(fp)
   14fe8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   14fec:	e0bff517 	ldw	r2,-44(fp)
   14ff0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   14ff4:	e0bff517 	ldw	r2,-44(fp)
   14ff8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   14ffc:	e0bff517 	ldw	r2,-44(fp)
   15000:	00c00fc4 	movi	r3,63
   15004:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15008:	e0bff517 	ldw	r2,-44(fp)
   1500c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15010:	e13ff517 	ldw	r4,-44(fp)
   15014:	001ef740 	call	1ef74 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15018:	e13ff517 	ldw	r4,-44(fp)
   1501c:	001ee8c0 	call	1ee8c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15020:	0005303a 	rdctl	r2,status
   15024:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15028:	e0fff817 	ldw	r3,-32(fp)
   1502c:	00bfff84 	movi	r2,-2
   15030:	1884703a 	and	r2,r3,r2
   15034:	1001703a 	wrctl	status,r2
  
  return context;
   15038:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   1503c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15040:	e0fffb03 	ldbu	r3,-20(fp)
   15044:	00800174 	movhi	r2,5
   15048:	10a4a204 	addi	r2,r2,-28024
   1504c:	18c7883a 	add	r3,r3,r3
   15050:	18c7883a 	add	r3,r3,r3
   15054:	10c5883a 	add	r2,r2,r3
   15058:	e0fff517 	ldw	r3,-44(fp)
   1505c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15060:	d0e83517 	ldw	r3,-24364(gp)
   15064:	e0bff517 	ldw	r2,-44(fp)
   15068:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1506c:	e0bff517 	ldw	r2,-44(fp)
   15070:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15074:	d0a83517 	ldw	r2,-24364(gp)
   15078:	10000326 	beq	r2,zero,15088 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1507c:	d0a83517 	ldw	r2,-24364(gp)
   15080:	e0fff517 	ldw	r3,-44(fp)
   15084:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15088:	e0bff517 	ldw	r2,-44(fp)
   1508c:	d0a83515 	stw	r2,-24364(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15090:	e0bff517 	ldw	r2,-44(fp)
   15094:	10c00d83 	ldbu	r3,54(r2)
   15098:	d0a83e03 	ldbu	r2,-24328(gp)
   1509c:	1884b03a 	or	r2,r3,r2
   150a0:	d0a83e05 	stb	r2,-24328(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   150a4:	e0bff517 	ldw	r2,-44(fp)
   150a8:	10800d03 	ldbu	r2,52(r2)
   150ac:	10c03fcc 	andi	r3,r2,255
   150b0:	e0bff517 	ldw	r2,-44(fp)
   150b4:	10800d03 	ldbu	r2,52(r2)
   150b8:	11003fcc 	andi	r4,r2,255
   150bc:	d0a83e44 	addi	r2,gp,-24327
   150c0:	2085883a 	add	r2,r4,r2
   150c4:	11000003 	ldbu	r4,0(r2)
   150c8:	e0bff517 	ldw	r2,-44(fp)
   150cc:	10800d43 	ldbu	r2,53(r2)
   150d0:	2084b03a 	or	r2,r4,r2
   150d4:	1009883a 	mov	r4,r2
   150d8:	d0a83e44 	addi	r2,gp,-24327
   150dc:	1885883a 	add	r2,r3,r2
   150e0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   150e4:	d0a83a43 	ldbu	r2,-24343(gp)
   150e8:	10800044 	addi	r2,r2,1
   150ec:	d0a83a45 	stb	r2,-24343(gp)
   150f0:	e0bff417 	ldw	r2,-48(fp)
   150f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150f8:	e0bff917 	ldw	r2,-28(fp)
   150fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15100:	0005883a 	mov	r2,zero
   15104:	00000506 	br	1511c <OS_TCBInit+0x2c0>
   15108:	e0bff417 	ldw	r2,-48(fp)
   1510c:	e0bffa15 	stw	r2,-24(fp)
   15110:	e0bffa17 	ldw	r2,-24(fp)
   15114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15118:	00801084 	movi	r2,66
}
   1511c:	e037883a 	mov	sp,fp
   15120:	dfc00117 	ldw	ra,4(sp)
   15124:	df000017 	ldw	fp,0(sp)
   15128:	dec00204 	addi	sp,sp,8
   1512c:	f800283a 	ret

00015130 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15130:	defffe04 	addi	sp,sp,-8
   15134:	df000115 	stw	fp,4(sp)
   15138:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1513c:	d0a01c04 	addi	r2,gp,-32656
   15140:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15144:	d0a01d04 	addi	r2,gp,-32652
   15148:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1514c:	d0a01e84 	addi	r2,gp,-32646
   15150:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15154:	d0a01f04 	addi	r2,gp,-32644
   15158:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1515c:	d0a01e04 	addi	r2,gp,-32648
   15160:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15164:	d0a01f84 	addi	r2,gp,-32642
   15168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1516c:	d0a02004 	addi	r2,gp,-32640
   15170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15174:	d0a02084 	addi	r2,gp,-32638
   15178:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1517c:	d0a02104 	addi	r2,gp,-32636
   15180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15184:	d0a02184 	addi	r2,gp,-32634
   15188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1518c:	d0a02204 	addi	r2,gp,-32632
   15190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15194:	d0a02284 	addi	r2,gp,-32630
   15198:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1519c:	d0a02304 	addi	r2,gp,-32628
   151a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   151a4:	d0a02384 	addi	r2,gp,-32626
   151a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   151ac:	d0a02404 	addi	r2,gp,-32624
   151b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   151b4:	d0a02484 	addi	r2,gp,-32622
   151b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   151bc:	d0a02504 	addi	r2,gp,-32620
   151c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   151c4:	d0a02584 	addi	r2,gp,-32618
   151c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   151cc:	d0a02604 	addi	r2,gp,-32616
   151d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   151d4:	d0a02684 	addi	r2,gp,-32614
   151d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   151dc:	d0a02704 	addi	r2,gp,-32612
   151e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   151e4:	d0a02784 	addi	r2,gp,-32610
   151e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   151ec:	d0a02804 	addi	r2,gp,-32608
   151f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   151f4:	d0a02884 	addi	r2,gp,-32606
   151f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   151fc:	d0a02904 	addi	r2,gp,-32604
   15200:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15204:	d0a02984 	addi	r2,gp,-32602
   15208:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1520c:	d0a02a04 	addi	r2,gp,-32600
   15210:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15214:	d0a02a84 	addi	r2,gp,-32598
   15218:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1521c:	d0a02b04 	addi	r2,gp,-32596
   15220:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15224:	d0a02b84 	addi	r2,gp,-32594
   15228:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1522c:	d0a02c04 	addi	r2,gp,-32592
   15230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15234:	d0a02c84 	addi	r2,gp,-32590
   15238:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1523c:	d0a02d04 	addi	r2,gp,-32588
   15240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15244:	d0a02d84 	addi	r2,gp,-32586
   15248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1524c:	d0a02e04 	addi	r2,gp,-32584
   15250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15254:	d0a02e84 	addi	r2,gp,-32582
   15258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1525c:	d0a02f04 	addi	r2,gp,-32580
   15260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15264:	d0a02f84 	addi	r2,gp,-32578
   15268:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1526c:	d0a03004 	addi	r2,gp,-32576
   15270:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15274:	d0a03084 	addi	r2,gp,-32574
   15278:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1527c:	d0a03104 	addi	r2,gp,-32572
   15280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15284:	d0a03184 	addi	r2,gp,-32570
   15288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1528c:	d0a03204 	addi	r2,gp,-32568
   15290:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15294:	d0a03284 	addi	r2,gp,-32566
   15298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1529c:	d0a03304 	addi	r2,gp,-32564
   152a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   152a4:	d0a03804 	addi	r2,gp,-32544
   152a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   152ac:	e037883a 	mov	sp,fp
   152b0:	df000017 	ldw	fp,0(sp)
   152b4:	dec00104 	addi	sp,sp,4
   152b8:	f800283a 	ret

000152bc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   152bc:	defff204 	addi	sp,sp,-56
   152c0:	df000d15 	stw	fp,52(sp)
   152c4:	df000d04 	addi	fp,sp,52
   152c8:	e13ffc15 	stw	r4,-16(fp)
   152cc:	2807883a 	mov	r3,r5
   152d0:	3005883a 	mov	r2,r6
   152d4:	e1ffff15 	stw	r7,-4(fp)
   152d8:	e0fffd0d 	sth	r3,-12(fp)
   152dc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   152e0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   152e4:	e0bfff17 	ldw	r2,-4(fp)
   152e8:	1000021e 	bne	r2,zero,152f4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   152ec:	0005883a 	mov	r2,zero
   152f0:	0000b006 	br	155b4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   152f4:	e0bffc17 	ldw	r2,-16(fp)
   152f8:	1000051e 	bne	r2,zero,15310 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   152fc:	e0bfff17 	ldw	r2,-4(fp)
   15300:	00c01b84 	movi	r3,110
   15304:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15308:	0005883a 	mov	r2,zero
   1530c:	0000a906 	br	155b4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15310:	e0bffc17 	ldw	r2,-16(fp)
   15314:	10800003 	ldbu	r2,0(r2)
   15318:	10803fcc 	andi	r2,r2,255
   1531c:	10800160 	cmpeqi	r2,r2,5
   15320:	1000051e 	bne	r2,zero,15338 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15324:	e0bfff17 	ldw	r2,-4(fp)
   15328:	00c00044 	movi	r3,1
   1532c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15330:	0005883a 	mov	r2,zero
   15334:	00009f06 	br	155b4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15338:	e0fffe03 	ldbu	r3,-8(fp)
   1533c:	00bfe004 	movi	r2,-128
   15340:	1884703a 	and	r2,r3,r2
   15344:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   15348:	e0bff503 	ldbu	r2,-44(fp)
   1534c:	10000626 	beq	r2,zero,15368 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15350:	e0bffe03 	ldbu	r2,-8(fp)
   15354:	10801fcc 	andi	r2,r2,127
   15358:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1535c:	00800044 	movi	r2,1
   15360:	e0bff385 	stb	r2,-50(fp)
   15364:	00000106 	br	1536c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   15368:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1536c:	e0bfff17 	ldw	r2,-4(fp)
   15370:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15374:	0005303a 	rdctl	r2,status
   15378:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1537c:	e0fff617 	ldw	r3,-40(fp)
   15380:	00bfff84 	movi	r2,-2
   15384:	1884703a 	and	r2,r3,r2
   15388:	1001703a 	wrctl	status,r2
  
  return context;
   1538c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   15390:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15394:	e0bffe03 	ldbu	r2,-8(fp)
   15398:	10c00060 	cmpeqi	r3,r2,1
   1539c:	18005f1e 	bne	r3,zero,1551c <OSFlagAccept+0x260>
   153a0:	10c00088 	cmpgei	r3,r2,2
   153a4:	1800021e 	bne	r3,zero,153b0 <OSFlagAccept+0xf4>
   153a8:	10003f26 	beq	r2,zero,154a8 <OSFlagAccept+0x1ec>
   153ac:	00007706 	br	1558c <OSFlagAccept+0x2d0>
   153b0:	10c000a0 	cmpeqi	r3,r2,2
   153b4:	1800031e 	bne	r3,zero,153c4 <OSFlagAccept+0x108>
   153b8:	108000e0 	cmpeqi	r2,r2,3
   153bc:	10001e1e 	bne	r2,zero,15438 <OSFlagAccept+0x17c>
   153c0:	00007206 	br	1558c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   153c4:	e0bffc17 	ldw	r2,-16(fp)
   153c8:	10c0020b 	ldhu	r3,8(r2)
   153cc:	e0bffd0b 	ldhu	r2,-12(fp)
   153d0:	1884703a 	and	r2,r3,r2
   153d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   153d8:	e0fff30b 	ldhu	r3,-52(fp)
   153dc:	e0bffd0b 	ldhu	r2,-12(fp)
   153e0:	18800d1e 	bne	r3,r2,15418 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   153e4:	e0bff383 	ldbu	r2,-50(fp)
   153e8:	10800058 	cmpnei	r2,r2,1
   153ec:	10000d1e 	bne	r2,zero,15424 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   153f0:	e0bffc17 	ldw	r2,-16(fp)
   153f4:	1080020b 	ldhu	r2,8(r2)
   153f8:	1007883a 	mov	r3,r2
   153fc:	e0bff30b 	ldhu	r2,-52(fp)
   15400:	0084303a 	nor	r2,zero,r2
   15404:	1884703a 	and	r2,r3,r2
   15408:	1007883a 	mov	r3,r2
   1540c:	e0bffc17 	ldw	r2,-16(fp)
   15410:	10c0020d 	sth	r3,8(r2)
   15414:	00000306 	br	15424 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15418:	e0bfff17 	ldw	r2,-4(fp)
   1541c:	00c01c04 	movi	r3,112
   15420:	10c00005 	stb	r3,0(r2)
   15424:	e0bff417 	ldw	r2,-48(fp)
   15428:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1542c:	e0bff717 	ldw	r2,-36(fp)
   15430:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15434:	00005e06 	br	155b0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15438:	e0bffc17 	ldw	r2,-16(fp)
   1543c:	10c0020b 	ldhu	r3,8(r2)
   15440:	e0bffd0b 	ldhu	r2,-12(fp)
   15444:	1884703a 	and	r2,r3,r2
   15448:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1544c:	e0bff30b 	ldhu	r2,-52(fp)
   15450:	10000d26 	beq	r2,zero,15488 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15454:	e0bff383 	ldbu	r2,-50(fp)
   15458:	10800058 	cmpnei	r2,r2,1
   1545c:	10000d1e 	bne	r2,zero,15494 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15460:	e0bffc17 	ldw	r2,-16(fp)
   15464:	1080020b 	ldhu	r2,8(r2)
   15468:	1007883a 	mov	r3,r2
   1546c:	e0bff30b 	ldhu	r2,-52(fp)
   15470:	0084303a 	nor	r2,zero,r2
   15474:	1884703a 	and	r2,r3,r2
   15478:	1007883a 	mov	r3,r2
   1547c:	e0bffc17 	ldw	r2,-16(fp)
   15480:	10c0020d 	sth	r3,8(r2)
   15484:	00000306 	br	15494 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	00c01c04 	movi	r3,112
   15490:	10c00005 	stb	r3,0(r2)
   15494:	e0bff417 	ldw	r2,-48(fp)
   15498:	e0bff815 	stw	r2,-32(fp)
   1549c:	e0bff817 	ldw	r2,-32(fp)
   154a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   154a4:	00004206 	br	155b0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   154a8:	e0bffc17 	ldw	r2,-16(fp)
   154ac:	1080020b 	ldhu	r2,8(r2)
   154b0:	0084303a 	nor	r2,zero,r2
   154b4:	1007883a 	mov	r3,r2
   154b8:	e0bffd0b 	ldhu	r2,-12(fp)
   154bc:	1884703a 	and	r2,r3,r2
   154c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   154c4:	e0fff30b 	ldhu	r3,-52(fp)
   154c8:	e0bffd0b 	ldhu	r2,-12(fp)
   154cc:	18800b1e 	bne	r3,r2,154fc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   154d0:	e0bff383 	ldbu	r2,-50(fp)
   154d4:	10800058 	cmpnei	r2,r2,1
   154d8:	10000b1e 	bne	r2,zero,15508 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   154dc:	e0bffc17 	ldw	r2,-16(fp)
   154e0:	10c0020b 	ldhu	r3,8(r2)
   154e4:	e0bff30b 	ldhu	r2,-52(fp)
   154e8:	1884b03a 	or	r2,r3,r2
   154ec:	1007883a 	mov	r3,r2
   154f0:	e0bffc17 	ldw	r2,-16(fp)
   154f4:	10c0020d 	sth	r3,8(r2)
   154f8:	00000306 	br	15508 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   154fc:	e0bfff17 	ldw	r2,-4(fp)
   15500:	00c01c04 	movi	r3,112
   15504:	10c00005 	stb	r3,0(r2)
   15508:	e0bff417 	ldw	r2,-48(fp)
   1550c:	e0bff915 	stw	r2,-28(fp)
   15510:	e0bff917 	ldw	r2,-28(fp)
   15514:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15518:	00002506 	br	155b0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1551c:	e0bffc17 	ldw	r2,-16(fp)
   15520:	1080020b 	ldhu	r2,8(r2)
   15524:	0084303a 	nor	r2,zero,r2
   15528:	1007883a 	mov	r3,r2
   1552c:	e0bffd0b 	ldhu	r2,-12(fp)
   15530:	1884703a 	and	r2,r3,r2
   15534:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15538:	e0bff30b 	ldhu	r2,-52(fp)
   1553c:	10000b26 	beq	r2,zero,1556c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15540:	e0bff383 	ldbu	r2,-50(fp)
   15544:	10800058 	cmpnei	r2,r2,1
   15548:	10000b1e 	bne	r2,zero,15578 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1554c:	e0bffc17 	ldw	r2,-16(fp)
   15550:	10c0020b 	ldhu	r3,8(r2)
   15554:	e0bff30b 	ldhu	r2,-52(fp)
   15558:	1884b03a 	or	r2,r3,r2
   1555c:	1007883a 	mov	r3,r2
   15560:	e0bffc17 	ldw	r2,-16(fp)
   15564:	10c0020d 	sth	r3,8(r2)
   15568:	00000306 	br	15578 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1556c:	e0bfff17 	ldw	r2,-4(fp)
   15570:	00c01c04 	movi	r3,112
   15574:	10c00005 	stb	r3,0(r2)
   15578:	e0bff417 	ldw	r2,-48(fp)
   1557c:	e0bffa15 	stw	r2,-24(fp)
   15580:	e0bffa17 	ldw	r2,-24(fp)
   15584:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15588:	00000906 	br	155b0 <OSFlagAccept+0x2f4>
   1558c:	e0bff417 	ldw	r2,-48(fp)
   15590:	e0bffb15 	stw	r2,-20(fp)
   15594:	e0bffb17 	ldw	r2,-20(fp)
   15598:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1559c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   155a0:	e0bfff17 	ldw	r2,-4(fp)
   155a4:	00c01bc4 	movi	r3,111
   155a8:	10c00005 	stb	r3,0(r2)
             break;
   155ac:	0001883a 	nop
    }
    return (flags_rdy);
   155b0:	e0bff30b 	ldhu	r2,-52(fp)
}
   155b4:	e037883a 	mov	sp,fp
   155b8:	df000017 	ldw	fp,0(sp)
   155bc:	dec00104 	addi	sp,sp,4
   155c0:	f800283a 	ret

000155c4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   155c4:	defff804 	addi	sp,sp,-32
   155c8:	df000715 	stw	fp,28(sp)
   155cc:	df000704 	addi	fp,sp,28
   155d0:	2005883a 	mov	r2,r4
   155d4:	e17fff15 	stw	r5,-4(fp)
   155d8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   155dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   155e0:	e0bfff17 	ldw	r2,-4(fp)
   155e4:	1000021e 	bne	r2,zero,155f0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   155e8:	0005883a 	mov	r2,zero
   155ec:	00003b06 	br	156dc <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   155f0:	008000b4 	movhi	r2,2
   155f4:	108fff04 	addi	r2,r2,16380
   155f8:	10800003 	ldbu	r2,0(r2)
   155fc:	10803fcc 	andi	r2,r2,255
   15600:	10000526 	beq	r2,zero,15618 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   15604:	e0bfff17 	ldw	r2,-4(fp)
   15608:	00c00404 	movi	r3,16
   1560c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   15610:	0005883a 	mov	r2,zero
   15614:	00003106 	br	156dc <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15618:	0005303a 	rdctl	r2,status
   1561c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15620:	e0fffb17 	ldw	r3,-20(fp)
   15624:	00bfff84 	movi	r2,-2
   15628:	1884703a 	and	r2,r3,r2
   1562c:	1001703a 	wrctl	status,r2
  
  return context;
   15630:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15634:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   15638:	008000b4 	movhi	r2,2
   1563c:	10900204 	addi	r2,r2,16392
   15640:	10800017 	ldw	r2,0(r2)
   15644:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   15648:	e0bffa17 	ldw	r2,-24(fp)
   1564c:	10001b26 	beq	r2,zero,156bc <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   15650:	008000b4 	movhi	r2,2
   15654:	10900204 	addi	r2,r2,16392
   15658:	10800017 	ldw	r2,0(r2)
   1565c:	10c00117 	ldw	r3,4(r2)
   15660:	008000b4 	movhi	r2,2
   15664:	10900204 	addi	r2,r2,16392
   15668:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1566c:	e0bffa17 	ldw	r2,-24(fp)
   15670:	00c00144 	movi	r3,5
   15674:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   15678:	e0bffa17 	ldw	r2,-24(fp)
   1567c:	e0fffe0b 	ldhu	r3,-8(fp)
   15680:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   15684:	e0bffa17 	ldw	r2,-24(fp)
   15688:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1568c:	e0bffa17 	ldw	r2,-24(fp)
   15690:	00c00fc4 	movi	r3,63
   15694:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15698:	e0bffa17 	ldw	r2,-24(fp)
   1569c:	100002c5 	stb	zero,11(r2)
   156a0:	e0bff917 	ldw	r2,-28(fp)
   156a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156a8:	e0bffc17 	ldw	r2,-16(fp)
   156ac:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	10000005 	stb	zero,0(r2)
   156b8:	00000706 	br	156d8 <OSFlagCreate+0x114>
   156bc:	e0bff917 	ldw	r2,-28(fp)
   156c0:	e0bffd15 	stw	r2,-12(fp)
   156c4:	e0bffd17 	ldw	r2,-12(fp)
   156c8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   156cc:	e0bfff17 	ldw	r2,-4(fp)
   156d0:	00c01c84 	movi	r3,114
   156d4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   156d8:	e0bffa17 	ldw	r2,-24(fp)
}
   156dc:	e037883a 	mov	sp,fp
   156e0:	df000017 	ldw	fp,0(sp)
   156e4:	dec00104 	addi	sp,sp,4
   156e8:	f800283a 	ret

000156ec <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   156ec:	defff204 	addi	sp,sp,-56
   156f0:	dfc00d15 	stw	ra,52(sp)
   156f4:	df000c15 	stw	fp,48(sp)
   156f8:	df000c04 	addi	fp,sp,48
   156fc:	e13ffd15 	stw	r4,-12(fp)
   15700:	2805883a 	mov	r2,r5
   15704:	e1bfff15 	stw	r6,-4(fp)
   15708:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1570c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15710:	e0bfff17 	ldw	r2,-4(fp)
   15714:	1000021e 	bne	r2,zero,15720 <OSFlagDel+0x34>
        return (pgrp);
   15718:	e0bffd17 	ldw	r2,-12(fp)
   1571c:	00008a06 	br	15948 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15720:	e0bffd17 	ldw	r2,-12(fp)
   15724:	1000051e 	bne	r2,zero,1573c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15728:	e0bfff17 	ldw	r2,-4(fp)
   1572c:	00c01b84 	movi	r3,110
   15730:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15734:	e0bffd17 	ldw	r2,-12(fp)
   15738:	00008306 	br	15948 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1573c:	008000b4 	movhi	r2,2
   15740:	108fff04 	addi	r2,r2,16380
   15744:	10800003 	ldbu	r2,0(r2)
   15748:	10803fcc 	andi	r2,r2,255
   1574c:	10000526 	beq	r2,zero,15764 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15750:	e0bfff17 	ldw	r2,-4(fp)
   15754:	00c003c4 	movi	r3,15
   15758:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1575c:	e0bffd17 	ldw	r2,-12(fp)
   15760:	00007906 	br	15948 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   15764:	e0bffd17 	ldw	r2,-12(fp)
   15768:	10800003 	ldbu	r2,0(r2)
   1576c:	10803fcc 	andi	r2,r2,255
   15770:	10800160 	cmpeqi	r2,r2,5
   15774:	1000051e 	bne	r2,zero,1578c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   15778:	e0bfff17 	ldw	r2,-4(fp)
   1577c:	00c00044 	movi	r3,1
   15780:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15784:	e0bffd17 	ldw	r2,-12(fp)
   15788:	00006f06 	br	15948 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1578c:	0005303a 	rdctl	r2,status
   15790:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15794:	e0fff817 	ldw	r3,-32(fp)
   15798:	00bfff84 	movi	r2,-2
   1579c:	1884703a 	and	r2,r3,r2
   157a0:	1001703a 	wrctl	status,r2
  
  return context;
   157a4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   157a8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   157ac:	e0bffd17 	ldw	r2,-12(fp)
   157b0:	10800117 	ldw	r2,4(r2)
   157b4:	10000326 	beq	r2,zero,157c4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   157b8:	00800044 	movi	r2,1
   157bc:	e0bff405 	stb	r2,-48(fp)
   157c0:	00000106 	br	157c8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   157c4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   157c8:	e0bffe03 	ldbu	r2,-8(fp)
   157cc:	10000326 	beq	r2,zero,157dc <OSFlagDel+0xf0>
   157d0:	10800060 	cmpeqi	r2,r2,1
   157d4:	1000271e 	bne	r2,zero,15874 <OSFlagDel+0x188>
   157d8:	00005006 	br	1591c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   157dc:	e0bff403 	ldbu	r2,-48(fp)
   157e0:	10001a1e 	bne	r2,zero,1584c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	00c00fc4 	movi	r3,63
   157ec:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   157f0:	e0bffd17 	ldw	r2,-12(fp)
   157f4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   157f8:	e0bffd17 	ldw	r2,-12(fp)
   157fc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   15800:	008000b4 	movhi	r2,2
   15804:	10900204 	addi	r2,r2,16392
   15808:	10c00017 	ldw	r3,0(r2)
   1580c:	e0bffd17 	ldw	r2,-12(fp)
   15810:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15814:	e0bffd17 	ldw	r2,-12(fp)
   15818:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1581c:	008000b4 	movhi	r2,2
   15820:	10900204 	addi	r2,r2,16392
   15824:	e0fffd17 	ldw	r3,-12(fp)
   15828:	10c00015 	stw	r3,0(r2)
   1582c:	e0bff717 	ldw	r2,-36(fp)
   15830:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15834:	e0bff917 	ldw	r2,-28(fp)
   15838:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1583c:	e0bfff17 	ldw	r2,-4(fp)
   15840:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   15844:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   15848:	00003e06 	br	15944 <OSFlagDel+0x258>
   1584c:	e0bff717 	ldw	r2,-36(fp)
   15850:	e0bffa15 	stw	r2,-24(fp)
   15854:	e0bffa17 	ldw	r2,-24(fp)
   15858:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	00c01244 	movi	r3,73
   15864:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15868:	e0bffd17 	ldw	r2,-12(fp)
   1586c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15870:	00003406 	br	15944 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15874:	e0bffd17 	ldw	r2,-12(fp)
   15878:	10800117 	ldw	r2,4(r2)
   1587c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15880:	00000606 	br	1589c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15884:	e13ff517 	ldw	r4,-44(fp)
   15888:	000b883a 	mov	r5,zero
   1588c:	00169280 	call	16928 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15890:	e0bff517 	ldw	r2,-44(fp)
   15894:	10800017 	ldw	r2,0(r2)
   15898:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1589c:	e0bff517 	ldw	r2,-44(fp)
   158a0:	103ff81e 	bne	r2,zero,15884 <__alt_mem_Flash_flash_data+0xf4015884>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   158a4:	e0bffd17 	ldw	r2,-12(fp)
   158a8:	00c00fc4 	movi	r3,63
   158ac:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   158b0:	e0bffd17 	ldw	r2,-12(fp)
   158b4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   158b8:	e0bffd17 	ldw	r2,-12(fp)
   158bc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   158c0:	008000b4 	movhi	r2,2
   158c4:	10900204 	addi	r2,r2,16392
   158c8:	10c00017 	ldw	r3,0(r2)
   158cc:	e0bffd17 	ldw	r2,-12(fp)
   158d0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   158d4:	e0bffd17 	ldw	r2,-12(fp)
   158d8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   158dc:	008000b4 	movhi	r2,2
   158e0:	10900204 	addi	r2,r2,16392
   158e4:	e0fffd17 	ldw	r3,-12(fp)
   158e8:	10c00015 	stw	r3,0(r2)
   158ec:	e0bff717 	ldw	r2,-36(fp)
   158f0:	e0bffb15 	stw	r2,-20(fp)
   158f4:	e0bffb17 	ldw	r2,-20(fp)
   158f8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   158fc:	e0bff403 	ldbu	r2,-48(fp)
   15900:	10800058 	cmpnei	r2,r2,1
   15904:	1000011e 	bne	r2,zero,1590c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15908:	0014a580 	call	14a58 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1590c:	e0bfff17 	ldw	r2,-4(fp)
   15910:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15914:	e03ff615 	stw	zero,-40(fp)
             break;
   15918:	00000a06 	br	15944 <OSFlagDel+0x258>
   1591c:	e0bff717 	ldw	r2,-36(fp)
   15920:	e0bffc15 	stw	r2,-16(fp)
   15924:	e0bffc17 	ldw	r2,-16(fp)
   15928:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1592c:	e0bfff17 	ldw	r2,-4(fp)
   15930:	00c001c4 	movi	r3,7
   15934:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	e0bff615 	stw	r2,-40(fp)
             break;
   15940:	0001883a 	nop
    }
    return (pgrp_return);
   15944:	e0bff617 	ldw	r2,-40(fp)
}
   15948:	e037883a 	mov	sp,fp
   1594c:	dfc00117 	ldw	ra,4(sp)
   15950:	df000017 	ldw	fp,0(sp)
   15954:	dec00204 	addi	sp,sp,8
   15958:	f800283a 	ret

0001595c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1595c:	defff604 	addi	sp,sp,-40
   15960:	dfc00915 	stw	ra,36(sp)
   15964:	df000815 	stw	fp,32(sp)
   15968:	df000804 	addi	fp,sp,32
   1596c:	e13ffd15 	stw	r4,-12(fp)
   15970:	e17ffe15 	stw	r5,-8(fp)
   15974:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15978:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1597c:	e0bfff17 	ldw	r2,-4(fp)
   15980:	1000021e 	bne	r2,zero,1598c <OSFlagNameGet+0x30>
        return (0);
   15984:	0005883a 	mov	r2,zero
   15988:	00003b06 	br	15a78 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1598c:	e0bffd17 	ldw	r2,-12(fp)
   15990:	1000051e 	bne	r2,zero,159a8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15994:	e0bfff17 	ldw	r2,-4(fp)
   15998:	00c01b84 	movi	r3,110
   1599c:	10c00005 	stb	r3,0(r2)
        return (0);
   159a0:	0005883a 	mov	r2,zero
   159a4:	00003406 	br	15a78 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   159a8:	e0bffe17 	ldw	r2,-8(fp)
   159ac:	1000051e 	bne	r2,zero,159c4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   159b0:	e0bfff17 	ldw	r2,-4(fp)
   159b4:	00c00304 	movi	r3,12
   159b8:	10c00005 	stb	r3,0(r2)
        return (0);
   159bc:	0005883a 	mov	r2,zero
   159c0:	00002d06 	br	15a78 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   159c4:	008000b4 	movhi	r2,2
   159c8:	108fff04 	addi	r2,r2,16380
   159cc:	10800003 	ldbu	r2,0(r2)
   159d0:	10803fcc 	andi	r2,r2,255
   159d4:	10000526 	beq	r2,zero,159ec <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   159d8:	e0bfff17 	ldw	r2,-4(fp)
   159dc:	00c00444 	movi	r3,17
   159e0:	10c00005 	stb	r3,0(r2)
        return (0);
   159e4:	0005883a 	mov	r2,zero
   159e8:	00002306 	br	15a78 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159ec:	0005303a 	rdctl	r2,status
   159f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159f4:	e0fffa17 	ldw	r3,-24(fp)
   159f8:	00bfff84 	movi	r2,-2
   159fc:	1884703a 	and	r2,r3,r2
   15a00:	1001703a 	wrctl	status,r2
  
  return context;
   15a04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15a08:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15a0c:	e0bffd17 	ldw	r2,-12(fp)
   15a10:	10800003 	ldbu	r2,0(r2)
   15a14:	10803fcc 	andi	r2,r2,255
   15a18:	10800160 	cmpeqi	r2,r2,5
   15a1c:	1000091e 	bne	r2,zero,15a44 <OSFlagNameGet+0xe8>
   15a20:	e0bff817 	ldw	r2,-32(fp)
   15a24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a28:	e0bffb17 	ldw	r2,-20(fp)
   15a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15a30:	e0bfff17 	ldw	r2,-4(fp)
   15a34:	00c00044 	movi	r3,1
   15a38:	10c00005 	stb	r3,0(r2)
        return (0);
   15a3c:	0005883a 	mov	r2,zero
   15a40:	00000d06 	br	15a78 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15a44:	e0bffd17 	ldw	r2,-12(fp)
   15a48:	10800284 	addi	r2,r2,10
   15a4c:	e13ffe17 	ldw	r4,-8(fp)
   15a50:	100b883a 	mov	r5,r2
   15a54:	0014b940 	call	14b94 <OS_StrCopy>
   15a58:	e0bff905 	stb	r2,-28(fp)
   15a5c:	e0bff817 	ldw	r2,-32(fp)
   15a60:	e0bffc15 	stw	r2,-16(fp)
   15a64:	e0bffc17 	ldw	r2,-16(fp)
   15a68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15a6c:	e0bfff17 	ldw	r2,-4(fp)
   15a70:	10000005 	stb	zero,0(r2)
    return (len);
   15a74:	e0bff903 	ldbu	r2,-28(fp)
}
   15a78:	e037883a 	mov	sp,fp
   15a7c:	dfc00117 	ldw	ra,4(sp)
   15a80:	df000017 	ldw	fp,0(sp)
   15a84:	dec00204 	addi	sp,sp,8
   15a88:	f800283a 	ret

00015a8c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15a8c:	defff504 	addi	sp,sp,-44
   15a90:	dfc00a15 	stw	ra,40(sp)
   15a94:	df000915 	stw	fp,36(sp)
   15a98:	df000904 	addi	fp,sp,36
   15a9c:	e13ffd15 	stw	r4,-12(fp)
   15aa0:	e17ffe15 	stw	r5,-8(fp)
   15aa4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15aa8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15aac:	e0bfff17 	ldw	r2,-4(fp)
   15ab0:	1000011e 	bne	r2,zero,15ab8 <OSFlagNameSet+0x2c>
        return;
   15ab4:	00004406 	br	15bc8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15ab8:	e0bffd17 	ldw	r2,-12(fp)
   15abc:	1000041e 	bne	r2,zero,15ad0 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15ac0:	e0bfff17 	ldw	r2,-4(fp)
   15ac4:	00c01b84 	movi	r3,110
   15ac8:	10c00005 	stb	r3,0(r2)
        return;
   15acc:	00003e06 	br	15bc8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15ad0:	e0bffe17 	ldw	r2,-8(fp)
   15ad4:	1000041e 	bne	r2,zero,15ae8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   15ad8:	e0bfff17 	ldw	r2,-4(fp)
   15adc:	00c00304 	movi	r3,12
   15ae0:	10c00005 	stb	r3,0(r2)
        return;
   15ae4:	00003806 	br	15bc8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15ae8:	008000b4 	movhi	r2,2
   15aec:	108fff04 	addi	r2,r2,16380
   15af0:	10800003 	ldbu	r2,0(r2)
   15af4:	10803fcc 	andi	r2,r2,255
   15af8:	10000426 	beq	r2,zero,15b0c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   15afc:	e0bfff17 	ldw	r2,-4(fp)
   15b00:	00c00484 	movi	r3,18
   15b04:	10c00005 	stb	r3,0(r2)
        return;
   15b08:	00002f06 	br	15bc8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b0c:	0005303a 	rdctl	r2,status
   15b10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b14:	e0fff917 	ldw	r3,-28(fp)
   15b18:	00bfff84 	movi	r2,-2
   15b1c:	1884703a 	and	r2,r3,r2
   15b20:	1001703a 	wrctl	status,r2
  
  return context;
   15b24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15b28:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15b2c:	e0bffd17 	ldw	r2,-12(fp)
   15b30:	10800003 	ldbu	r2,0(r2)
   15b34:	10803fcc 	andi	r2,r2,255
   15b38:	10800160 	cmpeqi	r2,r2,5
   15b3c:	1000081e 	bne	r2,zero,15b60 <OSFlagNameSet+0xd4>
   15b40:	e0bff717 	ldw	r2,-36(fp)
   15b44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b48:	e0bffa17 	ldw	r2,-24(fp)
   15b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15b50:	e0bfff17 	ldw	r2,-4(fp)
   15b54:	00c00044 	movi	r3,1
   15b58:	10c00005 	stb	r3,0(r2)
        return;
   15b5c:	00001a06 	br	15bc8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15b60:	e13ffe17 	ldw	r4,-8(fp)
   15b64:	0014c080 	call	14c08 <OS_StrLen>
   15b68:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15b6c:	e0bff803 	ldbu	r2,-32(fp)
   15b70:	10800830 	cmpltui	r2,r2,32
   15b74:	1000081e 	bne	r2,zero,15b98 <OSFlagNameSet+0x10c>
   15b78:	e0bff717 	ldw	r2,-36(fp)
   15b7c:	e0bffb15 	stw	r2,-20(fp)
   15b80:	e0bffb17 	ldw	r2,-20(fp)
   15b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15b88:	e0bfff17 	ldw	r2,-4(fp)
   15b8c:	00c01cc4 	movi	r3,115
   15b90:	10c00005 	stb	r3,0(r2)
        return;
   15b94:	00000c06 	br	15bc8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15b98:	e0bffd17 	ldw	r2,-12(fp)
   15b9c:	10800284 	addi	r2,r2,10
   15ba0:	1009883a 	mov	r4,r2
   15ba4:	e17ffe17 	ldw	r5,-8(fp)
   15ba8:	0014b940 	call	14b94 <OS_StrCopy>
   15bac:	e0bff717 	ldw	r2,-36(fp)
   15bb0:	e0bffc15 	stw	r2,-16(fp)
   15bb4:	e0bffc17 	ldw	r2,-16(fp)
   15bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15bbc:	e0bfff17 	ldw	r2,-4(fp)
   15bc0:	10000005 	stb	zero,0(r2)
    return;
   15bc4:	0001883a 	nop
}
   15bc8:	e037883a 	mov	sp,fp
   15bcc:	dfc00117 	ldw	ra,4(sp)
   15bd0:	df000017 	ldw	fp,0(sp)
   15bd4:	dec00204 	addi	sp,sp,8
   15bd8:	f800283a 	ret

00015bdc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15bdc:	deffe204 	addi	sp,sp,-120
   15be0:	dfc01d15 	stw	ra,116(sp)
   15be4:	df001c15 	stw	fp,112(sp)
   15be8:	df001c04 	addi	fp,sp,112
   15bec:	e13ffc15 	stw	r4,-16(fp)
   15bf0:	2809883a 	mov	r4,r5
   15bf4:	3007883a 	mov	r3,r6
   15bf8:	3805883a 	mov	r2,r7
   15bfc:	e13ffd0d 	sth	r4,-12(fp)
   15c00:	e0fffe05 	stb	r3,-8(fp)
   15c04:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15c08:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15c0c:	e0800217 	ldw	r2,8(fp)
   15c10:	1000021e 	bne	r2,zero,15c1c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15c14:	0005883a 	mov	r2,zero
   15c18:	00016706 	br	161b8 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15c1c:	e0bffc17 	ldw	r2,-16(fp)
   15c20:	1000051e 	bne	r2,zero,15c38 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c24:	e0800217 	ldw	r2,8(fp)
   15c28:	00c01b84 	movi	r3,110
   15c2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c30:	0005883a 	mov	r2,zero
   15c34:	00016006 	br	161b8 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15c38:	008000b4 	movhi	r2,2
   15c3c:	108fff04 	addi	r2,r2,16380
   15c40:	10800003 	ldbu	r2,0(r2)
   15c44:	10803fcc 	andi	r2,r2,255
   15c48:	10000526 	beq	r2,zero,15c60 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15c4c:	e0800217 	ldw	r2,8(fp)
   15c50:	00c00084 	movi	r3,2
   15c54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c58:	0005883a 	mov	r2,zero
   15c5c:	00015606 	br	161b8 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15c60:	008000b4 	movhi	r2,2
   15c64:	108ff104 	addi	r2,r2,16324
   15c68:	10800003 	ldbu	r2,0(r2)
   15c6c:	10803fcc 	andi	r2,r2,255
   15c70:	10000526 	beq	r2,zero,15c88 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15c74:	e0800217 	ldw	r2,8(fp)
   15c78:	00c00344 	movi	r3,13
   15c7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15c80:	0005883a 	mov	r2,zero
   15c84:	00014c06 	br	161b8 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15c88:	e0bffc17 	ldw	r2,-16(fp)
   15c8c:	10800003 	ldbu	r2,0(r2)
   15c90:	10803fcc 	andi	r2,r2,255
   15c94:	10800160 	cmpeqi	r2,r2,5
   15c98:	1000051e 	bne	r2,zero,15cb0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   15c9c:	e0800217 	ldw	r2,8(fp)
   15ca0:	00c00044 	movi	r3,1
   15ca4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15ca8:	0005883a 	mov	r2,zero
   15cac:	00014206 	br	161b8 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15cb0:	e0fffe03 	ldbu	r3,-8(fp)
   15cb4:	00bfe004 	movi	r2,-128
   15cb8:	1884703a 	and	r2,r3,r2
   15cbc:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15cc0:	e0bfe703 	ldbu	r2,-100(fp)
   15cc4:	10000626 	beq	r2,zero,15ce0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15cc8:	e0bffe03 	ldbu	r2,-8(fp)
   15ccc:	10801fcc 	andi	r2,r2,127
   15cd0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15cd4:	00800044 	movi	r2,1
   15cd8:	e0bfe505 	stb	r2,-108(fp)
   15cdc:	00000106 	br	15ce4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   15ce0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ce4:	0005303a 	rdctl	r2,status
   15ce8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cec:	e0ffe917 	ldw	r3,-92(fp)
   15cf0:	00bfff84 	movi	r2,-2
   15cf4:	1884703a 	and	r2,r3,r2
   15cf8:	1001703a 	wrctl	status,r2
  
  return context;
   15cfc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15d00:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   15d04:	e0bffe03 	ldbu	r2,-8(fp)
   15d08:	10c00060 	cmpeqi	r3,r2,1
   15d0c:	1800921e 	bne	r3,zero,15f58 <OSFlagPend+0x37c>
   15d10:	10c00088 	cmpgei	r3,r2,2
   15d14:	1800021e 	bne	r3,zero,15d20 <OSFlagPend+0x144>
   15d18:	10006126 	beq	r2,zero,15ea0 <OSFlagPend+0x2c4>
   15d1c:	0000bb06 	br	1600c <OSFlagPend+0x430>
   15d20:	10c000a0 	cmpeqi	r3,r2,2
   15d24:	1800031e 	bne	r3,zero,15d34 <OSFlagPend+0x158>
   15d28:	108000e0 	cmpeqi	r2,r2,3
   15d2c:	10002f1e 	bne	r2,zero,15dec <OSFlagPend+0x210>
   15d30:	0000b606 	br	1600c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15d34:	e0bffc17 	ldw	r2,-16(fp)
   15d38:	10c0020b 	ldhu	r3,8(r2)
   15d3c:	e0bffd0b 	ldhu	r2,-12(fp)
   15d40:	1884703a 	and	r2,r3,r2
   15d44:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15d48:	e0ffe78b 	ldhu	r3,-98(fp)
   15d4c:	e0bffd0b 	ldhu	r2,-12(fp)
   15d50:	1880191e 	bne	r3,r2,15db8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15d54:	e0bfe503 	ldbu	r2,-108(fp)
   15d58:	10800058 	cmpnei	r2,r2,1
   15d5c:	1000091e 	bne	r2,zero,15d84 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15d60:	e0bffc17 	ldw	r2,-16(fp)
   15d64:	1080020b 	ldhu	r2,8(r2)
   15d68:	1007883a 	mov	r3,r2
   15d6c:	e0bfe78b 	ldhu	r2,-98(fp)
   15d70:	0084303a 	nor	r2,zero,r2
   15d74:	1884703a 	and	r2,r3,r2
   15d78:	1007883a 	mov	r3,r2
   15d7c:	e0bffc17 	ldw	r2,-16(fp)
   15d80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15d84:	008000b4 	movhi	r2,2
   15d88:	10900004 	addi	r2,r2,16384
   15d8c:	10800017 	ldw	r2,0(r2)
   15d90:	e0ffe78b 	ldhu	r3,-98(fp)
   15d94:	10c00b0d 	sth	r3,44(r2)
   15d98:	e0bfe617 	ldw	r2,-104(fp)
   15d9c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15da0:	e0bfea17 	ldw	r2,-88(fp)
   15da4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15da8:	e0800217 	ldw	r2,8(fp)
   15dac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15db0:	e0bfe78b 	ldhu	r2,-98(fp)
   15db4:	00010006 	br	161b8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15db8:	e1bffd0b 	ldhu	r6,-12(fp)
   15dbc:	e0fffe03 	ldbu	r3,-8(fp)
   15dc0:	e0bfff0b 	ldhu	r2,-4(fp)
   15dc4:	e17ff704 	addi	r5,fp,-36
   15dc8:	d8800015 	stw	r2,0(sp)
   15dcc:	e13ffc17 	ldw	r4,-16(fp)
   15dd0:	180f883a 	mov	r7,r3
   15dd4:	00166800 	call	16680 <OS_FlagBlock>
   15dd8:	e0bfe617 	ldw	r2,-104(fp)
   15ddc:	e0bfeb15 	stw	r2,-84(fp)
   15de0:	e0bfeb17 	ldw	r2,-84(fp)
   15de4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15de8:	00009206 	br	16034 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15dec:	e0bffc17 	ldw	r2,-16(fp)
   15df0:	10c0020b 	ldhu	r3,8(r2)
   15df4:	e0bffd0b 	ldhu	r2,-12(fp)
   15df8:	1884703a 	and	r2,r3,r2
   15dfc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15e00:	e0bfe78b 	ldhu	r2,-98(fp)
   15e04:	10001926 	beq	r2,zero,15e6c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15e08:	e0bfe503 	ldbu	r2,-108(fp)
   15e0c:	10800058 	cmpnei	r2,r2,1
   15e10:	1000091e 	bne	r2,zero,15e38 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15e14:	e0bffc17 	ldw	r2,-16(fp)
   15e18:	1080020b 	ldhu	r2,8(r2)
   15e1c:	1007883a 	mov	r3,r2
   15e20:	e0bfe78b 	ldhu	r2,-98(fp)
   15e24:	0084303a 	nor	r2,zero,r2
   15e28:	1884703a 	and	r2,r3,r2
   15e2c:	1007883a 	mov	r3,r2
   15e30:	e0bffc17 	ldw	r2,-16(fp)
   15e34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15e38:	008000b4 	movhi	r2,2
   15e3c:	10900004 	addi	r2,r2,16384
   15e40:	10800017 	ldw	r2,0(r2)
   15e44:	e0ffe78b 	ldhu	r3,-98(fp)
   15e48:	10c00b0d 	sth	r3,44(r2)
   15e4c:	e0bfe617 	ldw	r2,-104(fp)
   15e50:	e0bfec15 	stw	r2,-80(fp)
   15e54:	e0bfec17 	ldw	r2,-80(fp)
   15e58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15e5c:	e0800217 	ldw	r2,8(fp)
   15e60:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15e64:	e0bfe78b 	ldhu	r2,-98(fp)
   15e68:	0000d306 	br	161b8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15e6c:	e1bffd0b 	ldhu	r6,-12(fp)
   15e70:	e0fffe03 	ldbu	r3,-8(fp)
   15e74:	e0bfff0b 	ldhu	r2,-4(fp)
   15e78:	e17ff704 	addi	r5,fp,-36
   15e7c:	d8800015 	stw	r2,0(sp)
   15e80:	e13ffc17 	ldw	r4,-16(fp)
   15e84:	180f883a 	mov	r7,r3
   15e88:	00166800 	call	16680 <OS_FlagBlock>
   15e8c:	e0bfe617 	ldw	r2,-104(fp)
   15e90:	e0bfed15 	stw	r2,-76(fp)
   15e94:	e0bfed17 	ldw	r2,-76(fp)
   15e98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15e9c:	00006506 	br	16034 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15ea0:	e0bffc17 	ldw	r2,-16(fp)
   15ea4:	1080020b 	ldhu	r2,8(r2)
   15ea8:	0084303a 	nor	r2,zero,r2
   15eac:	1007883a 	mov	r3,r2
   15eb0:	e0bffd0b 	ldhu	r2,-12(fp)
   15eb4:	1884703a 	and	r2,r3,r2
   15eb8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ebc:	e0ffe78b 	ldhu	r3,-98(fp)
   15ec0:	e0bffd0b 	ldhu	r2,-12(fp)
   15ec4:	1880171e 	bne	r3,r2,15f24 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ec8:	e0bfe503 	ldbu	r2,-108(fp)
   15ecc:	10800058 	cmpnei	r2,r2,1
   15ed0:	1000071e 	bne	r2,zero,15ef0 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15ed4:	e0bffc17 	ldw	r2,-16(fp)
   15ed8:	10c0020b 	ldhu	r3,8(r2)
   15edc:	e0bfe78b 	ldhu	r2,-98(fp)
   15ee0:	1884b03a 	or	r2,r3,r2
   15ee4:	1007883a 	mov	r3,r2
   15ee8:	e0bffc17 	ldw	r2,-16(fp)
   15eec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15ef0:	008000b4 	movhi	r2,2
   15ef4:	10900004 	addi	r2,r2,16384
   15ef8:	10800017 	ldw	r2,0(r2)
   15efc:	e0ffe78b 	ldhu	r3,-98(fp)
   15f00:	10c00b0d 	sth	r3,44(r2)
   15f04:	e0bfe617 	ldw	r2,-104(fp)
   15f08:	e0bfee15 	stw	r2,-72(fp)
   15f0c:	e0bfee17 	ldw	r2,-72(fp)
   15f10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f14:	e0800217 	ldw	r2,8(fp)
   15f18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f1c:	e0bfe78b 	ldhu	r2,-98(fp)
   15f20:	0000a506 	br	161b8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f24:	e1bffd0b 	ldhu	r6,-12(fp)
   15f28:	e0fffe03 	ldbu	r3,-8(fp)
   15f2c:	e0bfff0b 	ldhu	r2,-4(fp)
   15f30:	e17ff704 	addi	r5,fp,-36
   15f34:	d8800015 	stw	r2,0(sp)
   15f38:	e13ffc17 	ldw	r4,-16(fp)
   15f3c:	180f883a 	mov	r7,r3
   15f40:	00166800 	call	16680 <OS_FlagBlock>
   15f44:	e0bfe617 	ldw	r2,-104(fp)
   15f48:	e0bfef15 	stw	r2,-68(fp)
   15f4c:	e0bfef17 	ldw	r2,-68(fp)
   15f50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f54:	00003706 	br	16034 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15f58:	e0bffc17 	ldw	r2,-16(fp)
   15f5c:	1080020b 	ldhu	r2,8(r2)
   15f60:	0084303a 	nor	r2,zero,r2
   15f64:	1007883a 	mov	r3,r2
   15f68:	e0bffd0b 	ldhu	r2,-12(fp)
   15f6c:	1884703a 	and	r2,r3,r2
   15f70:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15f74:	e0bfe78b 	ldhu	r2,-98(fp)
   15f78:	10001726 	beq	r2,zero,15fd8 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f7c:	e0bfe503 	ldbu	r2,-108(fp)
   15f80:	10800058 	cmpnei	r2,r2,1
   15f84:	1000071e 	bne	r2,zero,15fa4 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15f88:	e0bffc17 	ldw	r2,-16(fp)
   15f8c:	10c0020b 	ldhu	r3,8(r2)
   15f90:	e0bfe78b 	ldhu	r2,-98(fp)
   15f94:	1884b03a 	or	r2,r3,r2
   15f98:	1007883a 	mov	r3,r2
   15f9c:	e0bffc17 	ldw	r2,-16(fp)
   15fa0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fa4:	008000b4 	movhi	r2,2
   15fa8:	10900004 	addi	r2,r2,16384
   15fac:	10800017 	ldw	r2,0(r2)
   15fb0:	e0ffe78b 	ldhu	r3,-98(fp)
   15fb4:	10c00b0d 	sth	r3,44(r2)
   15fb8:	e0bfe617 	ldw	r2,-104(fp)
   15fbc:	e0bff015 	stw	r2,-64(fp)
   15fc0:	e0bff017 	ldw	r2,-64(fp)
   15fc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15fc8:	e0800217 	ldw	r2,8(fp)
   15fcc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15fd0:	e0bfe78b 	ldhu	r2,-98(fp)
   15fd4:	00007806 	br	161b8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15fd8:	e1bffd0b 	ldhu	r6,-12(fp)
   15fdc:	e0fffe03 	ldbu	r3,-8(fp)
   15fe0:	e0bfff0b 	ldhu	r2,-4(fp)
   15fe4:	e17ff704 	addi	r5,fp,-36
   15fe8:	d8800015 	stw	r2,0(sp)
   15fec:	e13ffc17 	ldw	r4,-16(fp)
   15ff0:	180f883a 	mov	r7,r3
   15ff4:	00166800 	call	16680 <OS_FlagBlock>
   15ff8:	e0bfe617 	ldw	r2,-104(fp)
   15ffc:	e0bff115 	stw	r2,-60(fp)
   16000:	e0bff117 	ldw	r2,-60(fp)
   16004:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16008:	00000a06 	br	16034 <OSFlagPend+0x458>
   1600c:	e0bfe617 	ldw	r2,-104(fp)
   16010:	e0bff215 	stw	r2,-56(fp)
   16014:	e0bff217 	ldw	r2,-56(fp)
   16018:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1601c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   16020:	e0800217 	ldw	r2,8(fp)
   16024:	00c01bc4 	movi	r3,111
   16028:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1602c:	e0bfe78b 	ldhu	r2,-98(fp)
   16030:	00006106 	br	161b8 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16034:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16038:	0005303a 	rdctl	r2,status
   1603c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16040:	e0fff317 	ldw	r3,-52(fp)
   16044:	00bfff84 	movi	r2,-2
   16048:	1884703a 	and	r2,r3,r2
   1604c:	1001703a 	wrctl	status,r2
  
  return context;
   16050:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   16054:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   16058:	008000b4 	movhi	r2,2
   1605c:	10900004 	addi	r2,r2,16384
   16060:	10800017 	ldw	r2,0(r2)
   16064:	10800c43 	ldbu	r2,49(r2)
   16068:	10803fcc 	andi	r2,r2,255
   1606c:	10002226 	beq	r2,zero,160f8 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16070:	008000b4 	movhi	r2,2
   16074:	10900004 	addi	r2,r2,16384
   16078:	10800017 	ldw	r2,0(r2)
   1607c:	10800c43 	ldbu	r2,49(r2)
   16080:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16084:	008000b4 	movhi	r2,2
   16088:	10900004 	addi	r2,r2,16384
   1608c:	10800017 	ldw	r2,0(r2)
   16090:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   16094:	e0bff704 	addi	r2,fp,-36
   16098:	1009883a 	mov	r4,r2
   1609c:	0016a380 	call	16a38 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   160a0:	008000b4 	movhi	r2,2
   160a4:	10900004 	addi	r2,r2,16384
   160a8:	10800017 	ldw	r2,0(r2)
   160ac:	10000c05 	stb	zero,48(r2)
   160b0:	e0bfe617 	ldw	r2,-104(fp)
   160b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   160b8:	e0bff417 	ldw	r2,-48(fp)
   160bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   160c0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   160c4:	e0bfe803 	ldbu	r2,-96(fp)
   160c8:	108000a0 	cmpeqi	r2,r2,2
   160cc:	10000426 	beq	r2,zero,160e0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   160d0:	e0800217 	ldw	r2,8(fp)
   160d4:	00c00384 	movi	r3,14
   160d8:	10c00005 	stb	r3,0(r2)
                 break;
   160dc:	00000406 	br	160f0 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   160e0:	e0800217 	ldw	r2,8(fp)
   160e4:	00c00284 	movi	r3,10
   160e8:	10c00005 	stb	r3,0(r2)
                 break;
   160ec:	0001883a 	nop
        }
        return (flags_rdy);
   160f0:	e0bfe78b 	ldhu	r2,-98(fp)
   160f4:	00003006 	br	161b8 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   160f8:	008000b4 	movhi	r2,2
   160fc:	10900004 	addi	r2,r2,16384
   16100:	10800017 	ldw	r2,0(r2)
   16104:	10800b0b 	ldhu	r2,44(r2)
   16108:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1610c:	e0bfe503 	ldbu	r2,-108(fp)
   16110:	10800058 	cmpnei	r2,r2,1
   16114:	1000211e 	bne	r2,zero,1619c <OSFlagPend+0x5c0>
        switch (wait_type) {
   16118:	e0bffe03 	ldbu	r2,-8(fp)
   1611c:	10001616 	blt	r2,zero,16178 <OSFlagPend+0x59c>
   16120:	10c00090 	cmplti	r3,r2,2
   16124:	18000c1e 	bne	r3,zero,16158 <OSFlagPend+0x57c>
   16128:	10800108 	cmpgei	r2,r2,4
   1612c:	1000121e 	bne	r2,zero,16178 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16130:	e0bffc17 	ldw	r2,-16(fp)
   16134:	1080020b 	ldhu	r2,8(r2)
   16138:	1007883a 	mov	r3,r2
   1613c:	e0bfe78b 	ldhu	r2,-98(fp)
   16140:	0084303a 	nor	r2,zero,r2
   16144:	1884703a 	and	r2,r3,r2
   16148:	1007883a 	mov	r3,r2
   1614c:	e0bffc17 	ldw	r2,-16(fp)
   16150:	10c0020d 	sth	r3,8(r2)
                 break;
   16154:	00001106 	br	1619c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16158:	e0bffc17 	ldw	r2,-16(fp)
   1615c:	10c0020b 	ldhu	r3,8(r2)
   16160:	e0bfe78b 	ldhu	r2,-98(fp)
   16164:	1884b03a 	or	r2,r3,r2
   16168:	1007883a 	mov	r3,r2
   1616c:	e0bffc17 	ldw	r2,-16(fp)
   16170:	10c0020d 	sth	r3,8(r2)
                 break;
   16174:	00000906 	br	1619c <OSFlagPend+0x5c0>
   16178:	e0bfe617 	ldw	r2,-104(fp)
   1617c:	e0bff515 	stw	r2,-44(fp)
   16180:	e0bff517 	ldw	r2,-44(fp)
   16184:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16188:	e0800217 	ldw	r2,8(fp)
   1618c:	00c01bc4 	movi	r3,111
   16190:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16194:	0005883a 	mov	r2,zero
   16198:	00000706 	br	161b8 <OSFlagPend+0x5dc>
   1619c:	e0bfe617 	ldw	r2,-104(fp)
   161a0:	e0bff615 	stw	r2,-40(fp)
   161a4:	e0bff617 	ldw	r2,-40(fp)
   161a8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   161ac:	e0800217 	ldw	r2,8(fp)
   161b0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   161b4:	e0bfe78b 	ldhu	r2,-98(fp)
}
   161b8:	e037883a 	mov	sp,fp
   161bc:	dfc00117 	ldw	ra,4(sp)
   161c0:	df000017 	ldw	fp,0(sp)
   161c4:	dec00204 	addi	sp,sp,8
   161c8:	f800283a 	ret

000161cc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   161cc:	defffb04 	addi	sp,sp,-20
   161d0:	df000415 	stw	fp,16(sp)
   161d4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   161d8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161dc:	0005303a 	rdctl	r2,status
   161e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161e4:	e0fffe17 	ldw	r3,-8(fp)
   161e8:	00bfff84 	movi	r2,-2
   161ec:	1884703a 	and	r2,r3,r2
   161f0:	1001703a 	wrctl	status,r2
  
  return context;
   161f4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   161f8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   161fc:	008000b4 	movhi	r2,2
   16200:	10900004 	addi	r2,r2,16384
   16204:	10800017 	ldw	r2,0(r2)
   16208:	10800b0b 	ldhu	r2,44(r2)
   1620c:	e0bffd0d 	sth	r2,-12(fp)
   16210:	e0bffc17 	ldw	r2,-16(fp)
   16214:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16218:	e0bfff17 	ldw	r2,-4(fp)
   1621c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16220:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16224:	e037883a 	mov	sp,fp
   16228:	df000017 	ldw	fp,0(sp)
   1622c:	dec00104 	addi	sp,sp,4
   16230:	f800283a 	ret

00016234 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16234:	deffef04 	addi	sp,sp,-68
   16238:	dfc01015 	stw	ra,64(sp)
   1623c:	df000f15 	stw	fp,60(sp)
   16240:	df000f04 	addi	fp,sp,60
   16244:	e13ffc15 	stw	r4,-16(fp)
   16248:	2807883a 	mov	r3,r5
   1624c:	3005883a 	mov	r2,r6
   16250:	e1ffff15 	stw	r7,-4(fp)
   16254:	e0fffd0d 	sth	r3,-12(fp)
   16258:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1625c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16260:	e0bfff17 	ldw	r2,-4(fp)
   16264:	1000021e 	bne	r2,zero,16270 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   16268:	0005883a 	mov	r2,zero
   1626c:	0000ce06 	br	165a8 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16270:	e0bffc17 	ldw	r2,-16(fp)
   16274:	1000051e 	bne	r2,zero,1628c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16278:	e0bfff17 	ldw	r2,-4(fp)
   1627c:	00c01b84 	movi	r3,110
   16280:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16284:	0005883a 	mov	r2,zero
   16288:	0000c706 	br	165a8 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1628c:	e0bffc17 	ldw	r2,-16(fp)
   16290:	10800003 	ldbu	r2,0(r2)
   16294:	10803fcc 	andi	r2,r2,255
   16298:	10800160 	cmpeqi	r2,r2,5
   1629c:	1000051e 	bne	r2,zero,162b4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   162a0:	e0bfff17 	ldw	r2,-4(fp)
   162a4:	00c00044 	movi	r3,1
   162a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   162ac:	0005883a 	mov	r2,zero
   162b0:	0000bd06 	br	165a8 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   162b4:	0005303a 	rdctl	r2,status
   162b8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162bc:	e0fff617 	ldw	r3,-40(fp)
   162c0:	00bfff84 	movi	r2,-2
   162c4:	1884703a 	and	r2,r3,r2
   162c8:	1001703a 	wrctl	status,r2
  
  return context;
   162cc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   162d0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   162d4:	e0bffe03 	ldbu	r2,-8(fp)
   162d8:	10000326 	beq	r2,zero,162e8 <OSFlagPost+0xb4>
   162dc:	10800060 	cmpeqi	r2,r2,1
   162e0:	10000b1e 	bne	r2,zero,16310 <OSFlagPost+0xdc>
   162e4:	00001206 	br	16330 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   162e8:	e0bffc17 	ldw	r2,-16(fp)
   162ec:	1080020b 	ldhu	r2,8(r2)
   162f0:	1007883a 	mov	r3,r2
   162f4:	e0bffd0b 	ldhu	r2,-12(fp)
   162f8:	0084303a 	nor	r2,zero,r2
   162fc:	1884703a 	and	r2,r3,r2
   16300:	1007883a 	mov	r3,r2
   16304:	e0bffc17 	ldw	r2,-16(fp)
   16308:	10c0020d 	sth	r3,8(r2)
             break;
   1630c:	00001106 	br	16354 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16310:	e0bffc17 	ldw	r2,-16(fp)
   16314:	10c0020b 	ldhu	r3,8(r2)
   16318:	e0bffd0b 	ldhu	r2,-12(fp)
   1631c:	1884b03a 	or	r2,r3,r2
   16320:	1007883a 	mov	r3,r2
   16324:	e0bffc17 	ldw	r2,-16(fp)
   16328:	10c0020d 	sth	r3,8(r2)
             break;
   1632c:	00000906 	br	16354 <OSFlagPost+0x120>
   16330:	e0bff317 	ldw	r2,-52(fp)
   16334:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16338:	e0bff717 	ldw	r2,-36(fp)
   1633c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16340:	e0bfff17 	ldw	r2,-4(fp)
   16344:	00c01c44 	movi	r3,113
   16348:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1634c:	0005883a 	mov	r2,zero
   16350:	00009506 	br	165a8 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16354:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16358:	e0bffc17 	ldw	r2,-16(fp)
   1635c:	10800117 	ldw	r2,4(r2)
   16360:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16364:	00007406 	br	16538 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   16368:	e0bff117 	ldw	r2,-60(fp)
   1636c:	10800483 	ldbu	r2,18(r2)
   16370:	10803fcc 	andi	r2,r2,255
   16374:	10c00060 	cmpeqi	r3,r2,1
   16378:	18004d1e 	bne	r3,zero,164b0 <OSFlagPost+0x27c>
   1637c:	10c00088 	cmpgei	r3,r2,2
   16380:	1800021e 	bne	r3,zero,1638c <OSFlagPost+0x158>
   16384:	10003126 	beq	r2,zero,1644c <OSFlagPost+0x218>
   16388:	00005f06 	br	16508 <OSFlagPost+0x2d4>
   1638c:	10c000a0 	cmpeqi	r3,r2,2
   16390:	1800031e 	bne	r3,zero,163a0 <OSFlagPost+0x16c>
   16394:	108000e0 	cmpeqi	r2,r2,3
   16398:	1000181e 	bne	r2,zero,163fc <OSFlagPost+0x1c8>
   1639c:	00005a06 	br	16508 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   163a0:	e0bffc17 	ldw	r2,-16(fp)
   163a4:	10c0020b 	ldhu	r3,8(r2)
   163a8:	e0bff117 	ldw	r2,-60(fp)
   163ac:	1080040b 	ldhu	r2,16(r2)
   163b0:	1884703a 	and	r2,r3,r2
   163b4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   163b8:	e0bff117 	ldw	r2,-60(fp)
   163bc:	1080040b 	ldhu	r2,16(r2)
   163c0:	10ffffcc 	andi	r3,r2,65535
   163c4:	e0bff40b 	ldhu	r2,-48(fp)
   163c8:	18800b1e 	bne	r3,r2,163f8 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   163cc:	e0bff40b 	ldhu	r2,-48(fp)
   163d0:	e13ff117 	ldw	r4,-60(fp)
   163d4:	100b883a 	mov	r5,r2
   163d8:	00169280 	call	16928 <OS_FlagTaskRdy>
   163dc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   163e0:	e0bff483 	ldbu	r2,-46(fp)
   163e4:	10800058 	cmpnei	r2,r2,1
   163e8:	1000031e 	bne	r2,zero,163f8 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   163ec:	00800044 	movi	r2,1
   163f0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   163f4:	00004d06 	br	1652c <OSFlagPost+0x2f8>
   163f8:	00004c06 	br	1652c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   163fc:	e0bffc17 	ldw	r2,-16(fp)
   16400:	10c0020b 	ldhu	r3,8(r2)
   16404:	e0bff117 	ldw	r2,-60(fp)
   16408:	1080040b 	ldhu	r2,16(r2)
   1640c:	1884703a 	and	r2,r3,r2
   16410:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16414:	e0bff40b 	ldhu	r2,-48(fp)
   16418:	10000b26 	beq	r2,zero,16448 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1641c:	e0bff40b 	ldhu	r2,-48(fp)
   16420:	e13ff117 	ldw	r4,-60(fp)
   16424:	100b883a 	mov	r5,r2
   16428:	00169280 	call	16928 <OS_FlagTaskRdy>
   1642c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16430:	e0bff483 	ldbu	r2,-46(fp)
   16434:	10800058 	cmpnei	r2,r2,1
   16438:	1000031e 	bne	r2,zero,16448 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1643c:	00800044 	movi	r2,1
   16440:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16444:	00003906 	br	1652c <OSFlagPost+0x2f8>
   16448:	00003806 	br	1652c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1644c:	e0bffc17 	ldw	r2,-16(fp)
   16450:	1080020b 	ldhu	r2,8(r2)
   16454:	0084303a 	nor	r2,zero,r2
   16458:	1007883a 	mov	r3,r2
   1645c:	e0bff117 	ldw	r2,-60(fp)
   16460:	1080040b 	ldhu	r2,16(r2)
   16464:	1884703a 	and	r2,r3,r2
   16468:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1646c:	e0bff117 	ldw	r2,-60(fp)
   16470:	1080040b 	ldhu	r2,16(r2)
   16474:	10ffffcc 	andi	r3,r2,65535
   16478:	e0bff40b 	ldhu	r2,-48(fp)
   1647c:	18800b1e 	bne	r3,r2,164ac <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16480:	e0bff40b 	ldhu	r2,-48(fp)
   16484:	e13ff117 	ldw	r4,-60(fp)
   16488:	100b883a 	mov	r5,r2
   1648c:	00169280 	call	16928 <OS_FlagTaskRdy>
   16490:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16494:	e0bff483 	ldbu	r2,-46(fp)
   16498:	10800058 	cmpnei	r2,r2,1
   1649c:	1000031e 	bne	r2,zero,164ac <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   164a0:	00800044 	movi	r2,1
   164a4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   164a8:	00002006 	br	1652c <OSFlagPost+0x2f8>
   164ac:	00001f06 	br	1652c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   164b0:	e0bffc17 	ldw	r2,-16(fp)
   164b4:	1080020b 	ldhu	r2,8(r2)
   164b8:	0084303a 	nor	r2,zero,r2
   164bc:	1007883a 	mov	r3,r2
   164c0:	e0bff117 	ldw	r2,-60(fp)
   164c4:	1080040b 	ldhu	r2,16(r2)
   164c8:	1884703a 	and	r2,r3,r2
   164cc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   164d0:	e0bff40b 	ldhu	r2,-48(fp)
   164d4:	10000b26 	beq	r2,zero,16504 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   164d8:	e0bff40b 	ldhu	r2,-48(fp)
   164dc:	e13ff117 	ldw	r4,-60(fp)
   164e0:	100b883a 	mov	r5,r2
   164e4:	00169280 	call	16928 <OS_FlagTaskRdy>
   164e8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   164ec:	e0bff483 	ldbu	r2,-46(fp)
   164f0:	10800058 	cmpnei	r2,r2,1
   164f4:	1000031e 	bne	r2,zero,16504 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   164f8:	00800044 	movi	r2,1
   164fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16500:	00000a06 	br	1652c <OSFlagPost+0x2f8>
   16504:	00000906 	br	1652c <OSFlagPost+0x2f8>
   16508:	e0bff317 	ldw	r2,-52(fp)
   1650c:	e0bff815 	stw	r2,-32(fp)
   16510:	e0bff817 	ldw	r2,-32(fp)
   16514:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16518:	e0bfff17 	ldw	r2,-4(fp)
   1651c:	00c01bc4 	movi	r3,111
   16520:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16524:	0005883a 	mov	r2,zero
   16528:	00001f06 	br	165a8 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1652c:	e0bff117 	ldw	r2,-60(fp)
   16530:	10800017 	ldw	r2,0(r2)
   16534:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16538:	e0bff117 	ldw	r2,-60(fp)
   1653c:	103f8a1e 	bne	r2,zero,16368 <__alt_mem_Flash_flash_data+0xf4016368>
   16540:	e0bff317 	ldw	r2,-52(fp)
   16544:	e0bff915 	stw	r2,-28(fp)
   16548:	e0bff917 	ldw	r2,-28(fp)
   1654c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   16550:	e0bff203 	ldbu	r2,-56(fp)
   16554:	10800058 	cmpnei	r2,r2,1
   16558:	1000011e 	bne	r2,zero,16560 <OSFlagPost+0x32c>
        OS_Sched();
   1655c:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16560:	0005303a 	rdctl	r2,status
   16564:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16568:	e0fffa17 	ldw	r3,-24(fp)
   1656c:	00bfff84 	movi	r2,-2
   16570:	1884703a 	and	r2,r3,r2
   16574:	1001703a 	wrctl	status,r2
  
  return context;
   16578:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1657c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16580:	e0bffc17 	ldw	r2,-16(fp)
   16584:	1080020b 	ldhu	r2,8(r2)
   16588:	e0bff50d 	sth	r2,-44(fp)
   1658c:	e0bff317 	ldw	r2,-52(fp)
   16590:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16594:	e0bffb17 	ldw	r2,-20(fp)
   16598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1659c:	e0bfff17 	ldw	r2,-4(fp)
   165a0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   165a4:	e0bff50b 	ldhu	r2,-44(fp)
}
   165a8:	e037883a 	mov	sp,fp
   165ac:	dfc00117 	ldw	ra,4(sp)
   165b0:	df000017 	ldw	fp,0(sp)
   165b4:	dec00204 	addi	sp,sp,8
   165b8:	f800283a 	ret

000165bc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   165bc:	defff904 	addi	sp,sp,-28
   165c0:	df000615 	stw	fp,24(sp)
   165c4:	df000604 	addi	fp,sp,24
   165c8:	e13ffe15 	stw	r4,-8(fp)
   165cc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   165d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   165d4:	e0bfff17 	ldw	r2,-4(fp)
   165d8:	1000021e 	bne	r2,zero,165e4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   165dc:	0005883a 	mov	r2,zero
   165e0:	00002306 	br	16670 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   165e4:	e0bffe17 	ldw	r2,-8(fp)
   165e8:	1000051e 	bne	r2,zero,16600 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   165ec:	e0bfff17 	ldw	r2,-4(fp)
   165f0:	00c01b84 	movi	r3,110
   165f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   165f8:	0005883a 	mov	r2,zero
   165fc:	00001c06 	br	16670 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   16600:	e0bffe17 	ldw	r2,-8(fp)
   16604:	10800003 	ldbu	r2,0(r2)
   16608:	10803fcc 	andi	r2,r2,255
   1660c:	10800160 	cmpeqi	r2,r2,5
   16610:	1000051e 	bne	r2,zero,16628 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16614:	e0bfff17 	ldw	r2,-4(fp)
   16618:	00c00044 	movi	r3,1
   1661c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16620:	0005883a 	mov	r2,zero
   16624:	00001206 	br	16670 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16628:	0005303a 	rdctl	r2,status
   1662c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16630:	e0fffc17 	ldw	r3,-16(fp)
   16634:	00bfff84 	movi	r2,-2
   16638:	1884703a 	and	r2,r3,r2
   1663c:	1001703a 	wrctl	status,r2
  
  return context;
   16640:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16644:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16648:	e0bffe17 	ldw	r2,-8(fp)
   1664c:	1080020b 	ldhu	r2,8(r2)
   16650:	e0bffb0d 	sth	r2,-20(fp)
   16654:	e0bffa17 	ldw	r2,-24(fp)
   16658:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1665c:	e0bffd17 	ldw	r2,-12(fp)
   16660:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16664:	e0bfff17 	ldw	r2,-4(fp)
   16668:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1666c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16670:	e037883a 	mov	sp,fp
   16674:	df000017 	ldw	fp,0(sp)
   16678:	dec00104 	addi	sp,sp,4
   1667c:	f800283a 	ret

00016680 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   16680:	defff804 	addi	sp,sp,-32
   16684:	df000715 	stw	fp,28(sp)
   16688:	df000704 	addi	fp,sp,28
   1668c:	e13ffb15 	stw	r4,-20(fp)
   16690:	e17ffc15 	stw	r5,-16(fp)
   16694:	3009883a 	mov	r4,r6
   16698:	3807883a 	mov	r3,r7
   1669c:	e0800117 	ldw	r2,4(fp)
   166a0:	e13ffd0d 	sth	r4,-12(fp)
   166a4:	e0fffe05 	stb	r3,-8(fp)
   166a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   166ac:	008000b4 	movhi	r2,2
   166b0:	10900004 	addi	r2,r2,16384
   166b4:	10c00017 	ldw	r3,0(r2)
   166b8:	008000b4 	movhi	r2,2
   166bc:	10900004 	addi	r2,r2,16384
   166c0:	10800017 	ldw	r2,0(r2)
   166c4:	10800c03 	ldbu	r2,48(r2)
   166c8:	10800814 	ori	r2,r2,32
   166cc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   166d0:	008000b4 	movhi	r2,2
   166d4:	10900004 	addi	r2,r2,16384
   166d8:	10800017 	ldw	r2,0(r2)
   166dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   166e0:	008000b4 	movhi	r2,2
   166e4:	10900004 	addi	r2,r2,16384
   166e8:	10800017 	ldw	r2,0(r2)
   166ec:	e0ffff0b 	ldhu	r3,-4(fp)
   166f0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   166f4:	008000b4 	movhi	r2,2
   166f8:	10900004 	addi	r2,r2,16384
   166fc:	10800017 	ldw	r2,0(r2)
   16700:	e0fffc17 	ldw	r3,-16(fp)
   16704:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   16708:	e0bffc17 	ldw	r2,-16(fp)
   1670c:	e0fffd0b 	ldhu	r3,-12(fp)
   16710:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   16714:	e0bffc17 	ldw	r2,-16(fp)
   16718:	e0fffe03 	ldbu	r3,-8(fp)
   1671c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   16720:	008000b4 	movhi	r2,2
   16724:	10900004 	addi	r2,r2,16384
   16728:	10c00017 	ldw	r3,0(r2)
   1672c:	e0bffc17 	ldw	r2,-16(fp)
   16730:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   16734:	e0bffb17 	ldw	r2,-20(fp)
   16738:	10c00117 	ldw	r3,4(r2)
   1673c:	e0bffc17 	ldw	r2,-16(fp)
   16740:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   16744:	e0bffc17 	ldw	r2,-16(fp)
   16748:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1674c:	e0bffc17 	ldw	r2,-16(fp)
   16750:	e0fffb17 	ldw	r3,-20(fp)
   16754:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16758:	e0bffb17 	ldw	r2,-20(fp)
   1675c:	10800117 	ldw	r2,4(r2)
   16760:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   16764:	e0bff917 	ldw	r2,-28(fp)
   16768:	10000326 	beq	r2,zero,16778 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1676c:	e0bff917 	ldw	r2,-28(fp)
   16770:	e0fffc17 	ldw	r3,-16(fp)
   16774:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16778:	e0bffb17 	ldw	r2,-20(fp)
   1677c:	e0fffc17 	ldw	r3,-16(fp)
   16780:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   16784:	008000b4 	movhi	r2,2
   16788:	10900004 	addi	r2,r2,16384
   1678c:	10800017 	ldw	r2,0(r2)
   16790:	10800d03 	ldbu	r2,52(r2)
   16794:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16798:	e0fffa03 	ldbu	r3,-24(fp)
   1679c:	e13ffa03 	ldbu	r4,-24(fp)
   167a0:	008000b4 	movhi	r2,2
   167a4:	108ffd44 	addi	r2,r2,16373
   167a8:	1105883a 	add	r2,r2,r4
   167ac:	10800003 	ldbu	r2,0(r2)
   167b0:	1009883a 	mov	r4,r2
   167b4:	008000b4 	movhi	r2,2
   167b8:	10900004 	addi	r2,r2,16384
   167bc:	10800017 	ldw	r2,0(r2)
   167c0:	10800d43 	ldbu	r2,53(r2)
   167c4:	0084303a 	nor	r2,zero,r2
   167c8:	2084703a 	and	r2,r4,r2
   167cc:	1009883a 	mov	r4,r2
   167d0:	008000b4 	movhi	r2,2
   167d4:	108ffd44 	addi	r2,r2,16373
   167d8:	10c5883a 	add	r2,r2,r3
   167dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   167e0:	e0fffa03 	ldbu	r3,-24(fp)
   167e4:	008000b4 	movhi	r2,2
   167e8:	108ffd44 	addi	r2,r2,16373
   167ec:	10c5883a 	add	r2,r2,r3
   167f0:	10800003 	ldbu	r2,0(r2)
   167f4:	10803fcc 	andi	r2,r2,255
   167f8:	10000e1e 	bne	r2,zero,16834 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   167fc:	008000b4 	movhi	r2,2
   16800:	10900004 	addi	r2,r2,16384
   16804:	10800017 	ldw	r2,0(r2)
   16808:	10800d83 	ldbu	r2,54(r2)
   1680c:	0084303a 	nor	r2,zero,r2
   16810:	1007883a 	mov	r3,r2
   16814:	008000b4 	movhi	r2,2
   16818:	108ffd04 	addi	r2,r2,16372
   1681c:	10800003 	ldbu	r2,0(r2)
   16820:	1884703a 	and	r2,r3,r2
   16824:	1007883a 	mov	r3,r2
   16828:	008000b4 	movhi	r2,2
   1682c:	108ffd04 	addi	r2,r2,16372
   16830:	10c00005 	stb	r3,0(r2)
    }
}
   16834:	e037883a 	mov	sp,fp
   16838:	df000017 	ldw	fp,0(sp)
   1683c:	dec00104 	addi	sp,sp,4
   16840:	f800283a 	ret

00016844 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   16844:	defffb04 	addi	sp,sp,-20
   16848:	dfc00415 	stw	ra,16(sp)
   1684c:	df000315 	stw	fp,12(sp)
   16850:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   16854:	01000134 	movhi	r4,4
   16858:	21182e04 	addi	r4,r4,24760
   1685c:	0140dc04 	movi	r5,880
   16860:	00149a40 	call	149a4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   16864:	00800134 	movhi	r2,4
   16868:	10982e04 	addi	r2,r2,24760
   1686c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16870:	00800134 	movhi	r2,4
   16874:	10983904 	addi	r2,r2,24804
   16878:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1687c:	e03ffd0d 	sth	zero,-12(fp)
   16880:	00001306 	br	168d0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16884:	e0bffe17 	ldw	r2,-8(fp)
   16888:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1688c:	e0bffe17 	ldw	r2,-8(fp)
   16890:	e0ffff17 	ldw	r3,-4(fp)
   16894:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16898:	e0bffe17 	ldw	r2,-8(fp)
   1689c:	00c00fc4 	movi	r3,63
   168a0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   168a4:	e0bffe17 	ldw	r2,-8(fp)
   168a8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   168ac:	e0bffe17 	ldw	r2,-8(fp)
   168b0:	10800b04 	addi	r2,r2,44
   168b4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   168b8:	e0bfff17 	ldw	r2,-4(fp)
   168bc:	10800b04 	addi	r2,r2,44
   168c0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   168c4:	e0bffd0b 	ldhu	r2,-12(fp)
   168c8:	10800044 	addi	r2,r2,1
   168cc:	e0bffd0d 	sth	r2,-12(fp)
   168d0:	e0bffd0b 	ldhu	r2,-12(fp)
   168d4:	108004f0 	cmpltui	r2,r2,19
   168d8:	103fea1e 	bne	r2,zero,16884 <__alt_mem_Flash_flash_data+0xf4016884>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   168dc:	e0bffe17 	ldw	r2,-8(fp)
   168e0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   168e4:	e0bffe17 	ldw	r2,-8(fp)
   168e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   168ec:	e0bffe17 	ldw	r2,-8(fp)
   168f0:	00c00fc4 	movi	r3,63
   168f4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   168f8:	e0bffe17 	ldw	r2,-8(fp)
   168fc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   16900:	008000b4 	movhi	r2,2
   16904:	10900204 	addi	r2,r2,16392
   16908:	00c00134 	movhi	r3,4
   1690c:	18d82e04 	addi	r3,r3,24760
   16910:	10c00015 	stw	r3,0(r2)
#endif
}
   16914:	e037883a 	mov	sp,fp
   16918:	dfc00117 	ldw	ra,4(sp)
   1691c:	df000017 	ldw	fp,0(sp)
   16920:	dec00204 	addi	sp,sp,8
   16924:	f800283a 	ret

00016928 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   16928:	defffa04 	addi	sp,sp,-24
   1692c:	dfc00515 	stw	ra,20(sp)
   16930:	df000415 	stw	fp,16(sp)
   16934:	df000404 	addi	fp,sp,16
   16938:	e13ffe15 	stw	r4,-8(fp)
   1693c:	2805883a 	mov	r2,r5
   16940:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16944:	e0bffe17 	ldw	r2,-8(fp)
   16948:	10800217 	ldw	r2,8(r2)
   1694c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16950:	e0bffd17 	ldw	r2,-12(fp)
   16954:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16958:	e0bffd17 	ldw	r2,-12(fp)
   1695c:	e0ffff0b 	ldhu	r3,-4(fp)
   16960:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16964:	e0bffd17 	ldw	r2,-12(fp)
   16968:	10c00c03 	ldbu	r3,48(r2)
   1696c:	00bff7c4 	movi	r2,-33
   16970:	1884703a 	and	r2,r3,r2
   16974:	1007883a 	mov	r3,r2
   16978:	e0bffd17 	ldw	r2,-12(fp)
   1697c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16980:	e0bffd17 	ldw	r2,-12(fp)
   16984:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16988:	e0bffd17 	ldw	r2,-12(fp)
   1698c:	10800c03 	ldbu	r2,48(r2)
   16990:	10803fcc 	andi	r2,r2,255
   16994:	10001f1e 	bne	r2,zero,16a14 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16998:	e0bffd17 	ldw	r2,-12(fp)
   1699c:	10c00d83 	ldbu	r3,54(r2)
   169a0:	008000b4 	movhi	r2,2
   169a4:	108ffd04 	addi	r2,r2,16372
   169a8:	10800003 	ldbu	r2,0(r2)
   169ac:	1884b03a 	or	r2,r3,r2
   169b0:	1007883a 	mov	r3,r2
   169b4:	008000b4 	movhi	r2,2
   169b8:	108ffd04 	addi	r2,r2,16372
   169bc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   169c0:	e0bffd17 	ldw	r2,-12(fp)
   169c4:	10800d03 	ldbu	r2,52(r2)
   169c8:	10c03fcc 	andi	r3,r2,255
   169cc:	e0bffd17 	ldw	r2,-12(fp)
   169d0:	10800d03 	ldbu	r2,52(r2)
   169d4:	11003fcc 	andi	r4,r2,255
   169d8:	008000b4 	movhi	r2,2
   169dc:	108ffd44 	addi	r2,r2,16373
   169e0:	1105883a 	add	r2,r2,r4
   169e4:	11000003 	ldbu	r4,0(r2)
   169e8:	e0bffd17 	ldw	r2,-12(fp)
   169ec:	10800d43 	ldbu	r2,53(r2)
   169f0:	2084b03a 	or	r2,r4,r2
   169f4:	1009883a 	mov	r4,r2
   169f8:	008000b4 	movhi	r2,2
   169fc:	108ffd44 	addi	r2,r2,16373
   16a00:	10c5883a 	add	r2,r2,r3
   16a04:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16a08:	00800044 	movi	r2,1
   16a0c:	e0bffc05 	stb	r2,-16(fp)
   16a10:	00000106 	br	16a18 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   16a14:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16a18:	e13ffe17 	ldw	r4,-8(fp)
   16a1c:	0016a380 	call	16a38 <OS_FlagUnlink>
    return (sched);
   16a20:	e0bffc03 	ldbu	r2,-16(fp)
}
   16a24:	e037883a 	mov	sp,fp
   16a28:	dfc00117 	ldw	ra,4(sp)
   16a2c:	df000017 	ldw	fp,0(sp)
   16a30:	dec00204 	addi	sp,sp,8
   16a34:	f800283a 	ret

00016a38 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16a38:	defffa04 	addi	sp,sp,-24
   16a3c:	df000515 	stw	fp,20(sp)
   16a40:	df000504 	addi	fp,sp,20
   16a44:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   16a48:	e0bfff17 	ldw	r2,-4(fp)
   16a4c:	10800117 	ldw	r2,4(r2)
   16a50:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16a54:	e0bfff17 	ldw	r2,-4(fp)
   16a58:	10800017 	ldw	r2,0(r2)
   16a5c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16a60:	e0bffb17 	ldw	r2,-20(fp)
   16a64:	10000b1e 	bne	r2,zero,16a94 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   16a68:	e0bfff17 	ldw	r2,-4(fp)
   16a6c:	10800317 	ldw	r2,12(r2)
   16a70:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16a74:	e0bffd17 	ldw	r2,-12(fp)
   16a78:	e0fffc17 	ldw	r3,-16(fp)
   16a7c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16a80:	e0bffc17 	ldw	r2,-16(fp)
   16a84:	10000b26 	beq	r2,zero,16ab4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16a88:	e0bffc17 	ldw	r2,-16(fp)
   16a8c:	10000115 	stw	zero,4(r2)
   16a90:	00000806 	br	16ab4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16a94:	e0bffb17 	ldw	r2,-20(fp)
   16a98:	e0fffc17 	ldw	r3,-16(fp)
   16a9c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16aa0:	e0bffc17 	ldw	r2,-16(fp)
   16aa4:	10000326 	beq	r2,zero,16ab4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16aa8:	e0bffc17 	ldw	r2,-16(fp)
   16aac:	e0fffb17 	ldw	r3,-20(fp)
   16ab0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16ab4:	e0bfff17 	ldw	r2,-4(fp)
   16ab8:	10800217 	ldw	r2,8(r2)
   16abc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16ac0:	e0bffe17 	ldw	r2,-8(fp)
   16ac4:	10000a15 	stw	zero,40(r2)
#endif
}
   16ac8:	e037883a 	mov	sp,fp
   16acc:	df000017 	ldw	fp,0(sp)
   16ad0:	dec00104 	addi	sp,sp,4
   16ad4:	f800283a 	ret

00016ad8 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   16ad8:	defffa04 	addi	sp,sp,-24
   16adc:	df000515 	stw	fp,20(sp)
   16ae0:	df000504 	addi	fp,sp,20
   16ae4:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   16ae8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   16aec:	e0bfff17 	ldw	r2,-4(fp)
   16af0:	1000021e 	bne	r2,zero,16afc <OSMboxAccept+0x24>
        return ((void *)0);
   16af4:	0005883a 	mov	r2,zero
   16af8:	00001906 	br	16b60 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   16afc:	e0bfff17 	ldw	r2,-4(fp)
   16b00:	10800003 	ldbu	r2,0(r2)
   16b04:	10803fcc 	andi	r2,r2,255
   16b08:	10800060 	cmpeqi	r2,r2,1
   16b0c:	1000021e 	bne	r2,zero,16b18 <OSMboxAccept+0x40>
        return ((void *)0);
   16b10:	0005883a 	mov	r2,zero
   16b14:	00001206 	br	16b60 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b18:	0005303a 	rdctl	r2,status
   16b1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b20:	e0fffd17 	ldw	r3,-12(fp)
   16b24:	00bfff84 	movi	r2,-2
   16b28:	1884703a 	and	r2,r3,r2
   16b2c:	1001703a 	wrctl	status,r2
  
  return context;
   16b30:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16b34:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   16b38:	e0bfff17 	ldw	r2,-4(fp)
   16b3c:	10800117 	ldw	r2,4(r2)
   16b40:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   16b44:	e0bfff17 	ldw	r2,-4(fp)
   16b48:	10000115 	stw	zero,4(r2)
   16b4c:	e0bffb17 	ldw	r2,-20(fp)
   16b50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b54:	e0bffe17 	ldw	r2,-8(fp)
   16b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   16b5c:	e0bffc17 	ldw	r2,-16(fp)
}
   16b60:	e037883a 	mov	sp,fp
   16b64:	df000017 	ldw	fp,0(sp)
   16b68:	dec00104 	addi	sp,sp,4
   16b6c:	f800283a 	ret

00016b70 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   16b70:	defff904 	addi	sp,sp,-28
   16b74:	dfc00615 	stw	ra,24(sp)
   16b78:	df000515 	stw	fp,20(sp)
   16b7c:	df000504 	addi	fp,sp,20
   16b80:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16b84:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16b88:	008000b4 	movhi	r2,2
   16b8c:	108fff04 	addi	r2,r2,16380
   16b90:	10800003 	ldbu	r2,0(r2)
   16b94:	10803fcc 	andi	r2,r2,255
   16b98:	10000226 	beq	r2,zero,16ba4 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16b9c:	0005883a 	mov	r2,zero
   16ba0:	00002d06 	br	16c58 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ba4:	0005303a 	rdctl	r2,status
   16ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bac:	e0fffd17 	ldw	r3,-12(fp)
   16bb0:	00bfff84 	movi	r2,-2
   16bb4:	1884703a 	and	r2,r3,r2
   16bb8:	1001703a 	wrctl	status,r2
  
  return context;
   16bbc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16bc0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   16bc4:	008000b4 	movhi	r2,2
   16bc8:	108ffe04 	addi	r2,r2,16376
   16bcc:	10800017 	ldw	r2,0(r2)
   16bd0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   16bd4:	008000b4 	movhi	r2,2
   16bd8:	108ffe04 	addi	r2,r2,16376
   16bdc:	10800017 	ldw	r2,0(r2)
   16be0:	10000726 	beq	r2,zero,16c00 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16be4:	008000b4 	movhi	r2,2
   16be8:	108ffe04 	addi	r2,r2,16376
   16bec:	10800017 	ldw	r2,0(r2)
   16bf0:	10c00117 	ldw	r3,4(r2)
   16bf4:	008000b4 	movhi	r2,2
   16bf8:	108ffe04 	addi	r2,r2,16376
   16bfc:	10c00015 	stw	r3,0(r2)
   16c00:	e0bffb17 	ldw	r2,-20(fp)
   16c04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c08:	e0bffe17 	ldw	r2,-8(fp)
   16c0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   16c10:	e0bffc17 	ldw	r2,-16(fp)
   16c14:	10000f26 	beq	r2,zero,16c54 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   16c18:	e0bffc17 	ldw	r2,-16(fp)
   16c1c:	00c00044 	movi	r3,1
   16c20:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   16c24:	e0bffc17 	ldw	r2,-16(fp)
   16c28:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   16c2c:	e0bffc17 	ldw	r2,-16(fp)
   16c30:	e0ffff17 	ldw	r3,-4(fp)
   16c34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   16c38:	e0bffc17 	ldw	r2,-16(fp)
   16c3c:	00c00fc4 	movi	r3,63
   16c40:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16c44:	e0bffc17 	ldw	r2,-16(fp)
   16c48:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   16c4c:	e13ffc17 	ldw	r4,-16(fp)
   16c50:	00145e00 	call	145e0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   16c54:	e0bffc17 	ldw	r2,-16(fp)
}
   16c58:	e037883a 	mov	sp,fp
   16c5c:	dfc00117 	ldw	ra,4(sp)
   16c60:	df000017 	ldw	fp,0(sp)
   16c64:	dec00204 	addi	sp,sp,8
   16c68:	f800283a 	ret

00016c6c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16c6c:	defff304 	addi	sp,sp,-52
   16c70:	dfc00c15 	stw	ra,48(sp)
   16c74:	df000b15 	stw	fp,44(sp)
   16c78:	df000b04 	addi	fp,sp,44
   16c7c:	e13ffd15 	stw	r4,-12(fp)
   16c80:	2805883a 	mov	r2,r5
   16c84:	e1bfff15 	stw	r6,-4(fp)
   16c88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16c8c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16c90:	e0bfff17 	ldw	r2,-4(fp)
   16c94:	1000021e 	bne	r2,zero,16ca0 <OSMboxDel+0x34>
        return (pevent);
   16c98:	e0bffd17 	ldw	r2,-12(fp)
   16c9c:	00008806 	br	16ec0 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16ca0:	e0bffd17 	ldw	r2,-12(fp)
   16ca4:	1000051e 	bne	r2,zero,16cbc <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16ca8:	e0bfff17 	ldw	r2,-4(fp)
   16cac:	00c00104 	movi	r3,4
   16cb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16cb4:	e0bffd17 	ldw	r2,-12(fp)
   16cb8:	00008106 	br	16ec0 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   16cbc:	e0bffd17 	ldw	r2,-12(fp)
   16cc0:	10800003 	ldbu	r2,0(r2)
   16cc4:	10803fcc 	andi	r2,r2,255
   16cc8:	10800060 	cmpeqi	r2,r2,1
   16ccc:	1000051e 	bne	r2,zero,16ce4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16cd0:	e0bfff17 	ldw	r2,-4(fp)
   16cd4:	00c00044 	movi	r3,1
   16cd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16cdc:	e0bffd17 	ldw	r2,-12(fp)
   16ce0:	00007706 	br	16ec0 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16ce4:	008000b4 	movhi	r2,2
   16ce8:	108fff04 	addi	r2,r2,16380
   16cec:	10800003 	ldbu	r2,0(r2)
   16cf0:	10803fcc 	andi	r2,r2,255
   16cf4:	10000526 	beq	r2,zero,16d0c <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16cf8:	e0bfff17 	ldw	r2,-4(fp)
   16cfc:	00c003c4 	movi	r3,15
   16d00:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16d04:	e0bffd17 	ldw	r2,-12(fp)
   16d08:	00006d06 	br	16ec0 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d0c:	0005303a 	rdctl	r2,status
   16d10:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d14:	e0fff817 	ldw	r3,-32(fp)
   16d18:	00bfff84 	movi	r2,-2
   16d1c:	1884703a 	and	r2,r3,r2
   16d20:	1001703a 	wrctl	status,r2
  
  return context;
   16d24:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16d28:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   16d2c:	e0bffd17 	ldw	r2,-12(fp)
   16d30:	10800283 	ldbu	r2,10(r2)
   16d34:	10803fcc 	andi	r2,r2,255
   16d38:	10000326 	beq	r2,zero,16d48 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16d3c:	00800044 	movi	r2,1
   16d40:	e0bff505 	stb	r2,-44(fp)
   16d44:	00000106 	br	16d4c <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16d48:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16d4c:	e0bffe03 	ldbu	r2,-8(fp)
   16d50:	10000326 	beq	r2,zero,16d60 <OSMboxDel+0xf4>
   16d54:	10800060 	cmpeqi	r2,r2,1
   16d58:	10002c1e 	bne	r2,zero,16e0c <OSMboxDel+0x1a0>
   16d5c:	00004d06 	br	16e94 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   16d60:	e0bff503 	ldbu	r2,-44(fp)
   16d64:	10001a1e 	bne	r2,zero,16dd0 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16d68:	e0bffd17 	ldw	r2,-12(fp)
   16d6c:	00c00fc4 	movi	r3,63
   16d70:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16d74:	e0bffd17 	ldw	r2,-12(fp)
   16d78:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   16d7c:	e0bffd17 	ldw	r2,-12(fp)
   16d80:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   16d84:	008000b4 	movhi	r2,2
   16d88:	108ffe04 	addi	r2,r2,16376
   16d8c:	10c00017 	ldw	r3,0(r2)
   16d90:	e0bffd17 	ldw	r2,-12(fp)
   16d94:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   16d98:	e0bffd17 	ldw	r2,-12(fp)
   16d9c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   16da0:	008000b4 	movhi	r2,2
   16da4:	108ffe04 	addi	r2,r2,16376
   16da8:	e0fffd17 	ldw	r3,-12(fp)
   16dac:	10c00015 	stw	r3,0(r2)
   16db0:	e0bff717 	ldw	r2,-36(fp)
   16db4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16db8:	e0bff917 	ldw	r2,-28(fp)
   16dbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   16dc0:	e0bfff17 	ldw	r2,-4(fp)
   16dc4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   16dc8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   16dcc:	00003b06 	br	16ebc <OSMboxDel+0x250>
   16dd0:	e0bff717 	ldw	r2,-36(fp)
   16dd4:	e0bffa15 	stw	r2,-24(fp)
   16dd8:	e0bffa17 	ldw	r2,-24(fp)
   16ddc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   16de0:	e0bfff17 	ldw	r2,-4(fp)
   16de4:	00c01244 	movi	r3,73
   16de8:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   16dec:	e0bffd17 	ldw	r2,-12(fp)
   16df0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16df4:	00003106 	br	16ebc <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16df8:	e13ffd17 	ldw	r4,-12(fp)
   16dfc:	000b883a 	mov	r5,zero
   16e00:	01800084 	movi	r6,2
   16e04:	000f883a 	mov	r7,zero
   16e08:	00140400 	call	14040 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   16e0c:	e0bffd17 	ldw	r2,-12(fp)
   16e10:	10800283 	ldbu	r2,10(r2)
   16e14:	10803fcc 	andi	r2,r2,255
   16e18:	103ff71e 	bne	r2,zero,16df8 <__alt_mem_Flash_flash_data+0xf4016df8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16e1c:	e0bffd17 	ldw	r2,-12(fp)
   16e20:	00c00fc4 	movi	r3,63
   16e24:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16e28:	e0bffd17 	ldw	r2,-12(fp)
   16e2c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16e30:	e0bffd17 	ldw	r2,-12(fp)
   16e34:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16e38:	008000b4 	movhi	r2,2
   16e3c:	108ffe04 	addi	r2,r2,16376
   16e40:	10c00017 	ldw	r3,0(r2)
   16e44:	e0bffd17 	ldw	r2,-12(fp)
   16e48:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16e4c:	e0bffd17 	ldw	r2,-12(fp)
   16e50:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16e54:	008000b4 	movhi	r2,2
   16e58:	108ffe04 	addi	r2,r2,16376
   16e5c:	e0fffd17 	ldw	r3,-12(fp)
   16e60:	10c00015 	stw	r3,0(r2)
   16e64:	e0bff717 	ldw	r2,-36(fp)
   16e68:	e0bffb15 	stw	r2,-20(fp)
   16e6c:	e0bffb17 	ldw	r2,-20(fp)
   16e70:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16e74:	e0bff503 	ldbu	r2,-44(fp)
   16e78:	10800058 	cmpnei	r2,r2,1
   16e7c:	1000011e 	bne	r2,zero,16e84 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16e80:	0014a580 	call	14a58 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   16e84:	e0bfff17 	ldw	r2,-4(fp)
   16e88:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   16e8c:	e03ff615 	stw	zero,-40(fp)
             break;
   16e90:	00000a06 	br	16ebc <OSMboxDel+0x250>
   16e94:	e0bff717 	ldw	r2,-36(fp)
   16e98:	e0bffc15 	stw	r2,-16(fp)
   16e9c:	e0bffc17 	ldw	r2,-16(fp)
   16ea0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   16ea4:	e0bfff17 	ldw	r2,-4(fp)
   16ea8:	00c001c4 	movi	r3,7
   16eac:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   16eb0:	e0bffd17 	ldw	r2,-12(fp)
   16eb4:	e0bff615 	stw	r2,-40(fp)
             break;
   16eb8:	0001883a 	nop
    }
    return (pevent_return);
   16ebc:	e0bff617 	ldw	r2,-40(fp)
}
   16ec0:	e037883a 	mov	sp,fp
   16ec4:	dfc00117 	ldw	ra,4(sp)
   16ec8:	df000017 	ldw	fp,0(sp)
   16ecc:	dec00204 	addi	sp,sp,8
   16ed0:	f800283a 	ret

00016ed4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16ed4:	defff404 	addi	sp,sp,-48
   16ed8:	dfc00b15 	stw	ra,44(sp)
   16edc:	df000a15 	stw	fp,40(sp)
   16ee0:	df000a04 	addi	fp,sp,40
   16ee4:	e13ffd15 	stw	r4,-12(fp)
   16ee8:	2805883a 	mov	r2,r5
   16eec:	e1bfff15 	stw	r6,-4(fp)
   16ef0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16ef4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16ef8:	e0bfff17 	ldw	r2,-4(fp)
   16efc:	1000021e 	bne	r2,zero,16f08 <OSMboxPend+0x34>
        return ((void *)0);
   16f00:	0005883a 	mov	r2,zero
   16f04:	00009706 	br	17164 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16f08:	e0bffd17 	ldw	r2,-12(fp)
   16f0c:	1000051e 	bne	r2,zero,16f24 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16f10:	e0bfff17 	ldw	r2,-4(fp)
   16f14:	00c00104 	movi	r3,4
   16f18:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f1c:	0005883a 	mov	r2,zero
   16f20:	00009006 	br	17164 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   16f24:	e0bffd17 	ldw	r2,-12(fp)
   16f28:	10800003 	ldbu	r2,0(r2)
   16f2c:	10803fcc 	andi	r2,r2,255
   16f30:	10800060 	cmpeqi	r2,r2,1
   16f34:	1000051e 	bne	r2,zero,16f4c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16f38:	e0bfff17 	ldw	r2,-4(fp)
   16f3c:	00c00044 	movi	r3,1
   16f40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f44:	0005883a 	mov	r2,zero
   16f48:	00008606 	br	17164 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   16f4c:	008000b4 	movhi	r2,2
   16f50:	108fff04 	addi	r2,r2,16380
   16f54:	10800003 	ldbu	r2,0(r2)
   16f58:	10803fcc 	andi	r2,r2,255
   16f5c:	10000526 	beq	r2,zero,16f74 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16f60:	e0bfff17 	ldw	r2,-4(fp)
   16f64:	00c00084 	movi	r3,2
   16f68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f6c:	0005883a 	mov	r2,zero
   16f70:	00007c06 	br	17164 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16f74:	008000b4 	movhi	r2,2
   16f78:	108ff104 	addi	r2,r2,16324
   16f7c:	10800003 	ldbu	r2,0(r2)
   16f80:	10803fcc 	andi	r2,r2,255
   16f84:	10000526 	beq	r2,zero,16f9c <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16f88:	e0bfff17 	ldw	r2,-4(fp)
   16f8c:	00c00344 	movi	r3,13
   16f90:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16f94:	0005883a 	mov	r2,zero
   16f98:	00007206 	br	17164 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f9c:	0005303a 	rdctl	r2,status
   16fa0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fa4:	e0fff817 	ldw	r3,-32(fp)
   16fa8:	00bfff84 	movi	r2,-2
   16fac:	1884703a 	and	r2,r3,r2
   16fb0:	1001703a 	wrctl	status,r2
  
  return context;
   16fb4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16fb8:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   16fbc:	e0bffd17 	ldw	r2,-12(fp)
   16fc0:	10800117 	ldw	r2,4(r2)
   16fc4:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   16fc8:	e0bff617 	ldw	r2,-40(fp)
   16fcc:	10000a26 	beq	r2,zero,16ff8 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	10000115 	stw	zero,4(r2)
   16fd8:	e0bff717 	ldw	r2,-36(fp)
   16fdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fe0:	e0bff917 	ldw	r2,-28(fp)
   16fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   16fe8:	e0bfff17 	ldw	r2,-4(fp)
   16fec:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   16ff0:	e0bff617 	ldw	r2,-40(fp)
   16ff4:	00005b06 	br	17164 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   16ff8:	008000b4 	movhi	r2,2
   16ffc:	10900004 	addi	r2,r2,16384
   17000:	10c00017 	ldw	r3,0(r2)
   17004:	008000b4 	movhi	r2,2
   17008:	10900004 	addi	r2,r2,16384
   1700c:	10800017 	ldw	r2,0(r2)
   17010:	10800c03 	ldbu	r2,48(r2)
   17014:	10800094 	ori	r2,r2,2
   17018:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1701c:	008000b4 	movhi	r2,2
   17020:	10900004 	addi	r2,r2,16384
   17024:	10800017 	ldw	r2,0(r2)
   17028:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   1702c:	008000b4 	movhi	r2,2
   17030:	10900004 	addi	r2,r2,16384
   17034:	10800017 	ldw	r2,0(r2)
   17038:	e0fffe0b 	ldhu	r3,-8(fp)
   1703c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   17040:	e13ffd17 	ldw	r4,-12(fp)
   17044:	00141d80 	call	141d8 <OS_EventTaskWait>
   17048:	e0bff717 	ldw	r2,-36(fp)
   1704c:	e0bffa15 	stw	r2,-24(fp)
   17050:	e0bffa17 	ldw	r2,-24(fp)
   17054:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   17058:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1705c:	0005303a 	rdctl	r2,status
   17060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17064:	e0fffb17 	ldw	r3,-20(fp)
   17068:	00bfff84 	movi	r2,-2
   1706c:	1884703a 	and	r2,r3,r2
   17070:	1001703a 	wrctl	status,r2
  
  return context;
   17074:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   17078:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1707c:	008000b4 	movhi	r2,2
   17080:	10900004 	addi	r2,r2,16384
   17084:	10800017 	ldw	r2,0(r2)
   17088:	10800c43 	ldbu	r2,49(r2)
   1708c:	10803fcc 	andi	r2,r2,255
   17090:	10000326 	beq	r2,zero,170a0 <OSMboxPend+0x1cc>
   17094:	108000a0 	cmpeqi	r2,r2,2
   17098:	1000091e 	bne	r2,zero,170c0 <OSMboxPend+0x1ec>
   1709c:	00000d06 	br	170d4 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   170a0:	008000b4 	movhi	r2,2
   170a4:	10900004 	addi	r2,r2,16384
   170a8:	10800017 	ldw	r2,0(r2)
   170ac:	10800917 	ldw	r2,36(r2)
   170b0:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   170b4:	e0bfff17 	ldw	r2,-4(fp)
   170b8:	10000005 	stb	zero,0(r2)
             break;
   170bc:	00001006 	br	17100 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   170c0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   170c4:	e0bfff17 	ldw	r2,-4(fp)
   170c8:	00c00384 	movi	r3,14
   170cc:	10c00005 	stb	r3,0(r2)
             break;
   170d0:	00000b06 	br	17100 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   170d4:	008000b4 	movhi	r2,2
   170d8:	10900004 	addi	r2,r2,16384
   170dc:	10800017 	ldw	r2,0(r2)
   170e0:	1009883a 	mov	r4,r2
   170e4:	e17ffd17 	ldw	r5,-12(fp)
   170e8:	00144300 	call	14430 <OS_EventTaskRemove>
             pmsg = (void *)0;
   170ec:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   170f0:	e0bfff17 	ldw	r2,-4(fp)
   170f4:	00c00284 	movi	r3,10
   170f8:	10c00005 	stb	r3,0(r2)
             break;
   170fc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17100:	008000b4 	movhi	r2,2
   17104:	10900004 	addi	r2,r2,16384
   17108:	10800017 	ldw	r2,0(r2)
   1710c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17110:	008000b4 	movhi	r2,2
   17114:	10900004 	addi	r2,r2,16384
   17118:	10800017 	ldw	r2,0(r2)
   1711c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17120:	008000b4 	movhi	r2,2
   17124:	10900004 	addi	r2,r2,16384
   17128:	10800017 	ldw	r2,0(r2)
   1712c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17130:	008000b4 	movhi	r2,2
   17134:	10900004 	addi	r2,r2,16384
   17138:	10800017 	ldw	r2,0(r2)
   1713c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17140:	008000b4 	movhi	r2,2
   17144:	10900004 	addi	r2,r2,16384
   17148:	10800017 	ldw	r2,0(r2)
   1714c:	10000915 	stw	zero,36(r2)
   17150:	e0bff717 	ldw	r2,-36(fp)
   17154:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17158:	e0bffc17 	ldw	r2,-16(fp)
   1715c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17160:	e0bff617 	ldw	r2,-40(fp)
}
   17164:	e037883a 	mov	sp,fp
   17168:	dfc00117 	ldw	ra,4(sp)
   1716c:	df000017 	ldw	fp,0(sp)
   17170:	dec00204 	addi	sp,sp,8
   17174:	f800283a 	ret

00017178 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17178:	defff604 	addi	sp,sp,-40
   1717c:	dfc00915 	stw	ra,36(sp)
   17180:	df000815 	stw	fp,32(sp)
   17184:	df000804 	addi	fp,sp,32
   17188:	e13ffd15 	stw	r4,-12(fp)
   1718c:	2805883a 	mov	r2,r5
   17190:	e1bfff15 	stw	r6,-4(fp)
   17194:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17198:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1719c:	e0bfff17 	ldw	r2,-4(fp)
   171a0:	1000021e 	bne	r2,zero,171ac <OSMboxPendAbort+0x34>
        return (0);
   171a4:	0005883a 	mov	r2,zero
   171a8:	00004906 	br	172d0 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   171ac:	e0bffd17 	ldw	r2,-12(fp)
   171b0:	1000051e 	bne	r2,zero,171c8 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   171b4:	e0bfff17 	ldw	r2,-4(fp)
   171b8:	00c00104 	movi	r3,4
   171bc:	10c00005 	stb	r3,0(r2)
        return (0);
   171c0:	0005883a 	mov	r2,zero
   171c4:	00004206 	br	172d0 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   171c8:	e0bffd17 	ldw	r2,-12(fp)
   171cc:	10800003 	ldbu	r2,0(r2)
   171d0:	10803fcc 	andi	r2,r2,255
   171d4:	10800060 	cmpeqi	r2,r2,1
   171d8:	1000051e 	bne	r2,zero,171f0 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   171dc:	e0bfff17 	ldw	r2,-4(fp)
   171e0:	00c00044 	movi	r3,1
   171e4:	10c00005 	stb	r3,0(r2)
        return (0);
   171e8:	0005883a 	mov	r2,zero
   171ec:	00003806 	br	172d0 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171f0:	0005303a 	rdctl	r2,status
   171f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171f8:	e0fffa17 	ldw	r3,-24(fp)
   171fc:	00bfff84 	movi	r2,-2
   17200:	1884703a 	and	r2,r3,r2
   17204:	1001703a 	wrctl	status,r2
  
  return context;
   17208:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1720c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   17210:	e0bffd17 	ldw	r2,-12(fp)
   17214:	10800283 	ldbu	r2,10(r2)
   17218:	10803fcc 	andi	r2,r2,255
   1721c:	10002526 	beq	r2,zero,172b4 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   17220:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17224:	e0bffe03 	ldbu	r2,-8(fp)
   17228:	10800060 	cmpeqi	r2,r2,1
   1722c:	10000e26 	beq	r2,zero,17268 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17230:	00000806 	br	17254 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17234:	e13ffd17 	ldw	r4,-12(fp)
   17238:	000b883a 	mov	r5,zero
   1723c:	01800084 	movi	r6,2
   17240:	01c00084 	movi	r7,2
   17244:	00140400 	call	14040 <OS_EventTaskRdy>
                     nbr_tasks++;
   17248:	e0bff803 	ldbu	r2,-32(fp)
   1724c:	10800044 	addi	r2,r2,1
   17250:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17254:	e0bffd17 	ldw	r2,-12(fp)
   17258:	10800283 	ldbu	r2,10(r2)
   1725c:	10803fcc 	andi	r2,r2,255
   17260:	103ff41e 	bne	r2,zero,17234 <__alt_mem_Flash_flash_data+0xf4017234>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17264:	00000906 	br	1728c <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17268:	e13ffd17 	ldw	r4,-12(fp)
   1726c:	000b883a 	mov	r5,zero
   17270:	01800084 	movi	r6,2
   17274:	01c00084 	movi	r7,2
   17278:	00140400 	call	14040 <OS_EventTaskRdy>
                 nbr_tasks++;
   1727c:	e0bff803 	ldbu	r2,-32(fp)
   17280:	10800044 	addi	r2,r2,1
   17284:	e0bff805 	stb	r2,-32(fp)
                 break;
   17288:	0001883a 	nop
   1728c:	e0bff917 	ldw	r2,-28(fp)
   17290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17294:	e0bffb17 	ldw	r2,-20(fp)
   17298:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1729c:	0014a580 	call	14a58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   172a0:	e0bfff17 	ldw	r2,-4(fp)
   172a4:	00c00384 	movi	r3,14
   172a8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   172ac:	e0bff803 	ldbu	r2,-32(fp)
   172b0:	00000706 	br	172d0 <OSMboxPendAbort+0x158>
   172b4:	e0bff917 	ldw	r2,-28(fp)
   172b8:	e0bffc15 	stw	r2,-16(fp)
   172bc:	e0bffc17 	ldw	r2,-16(fp)
   172c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   172c4:	e0bfff17 	ldw	r2,-4(fp)
   172c8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   172cc:	0005883a 	mov	r2,zero
}
   172d0:	e037883a 	mov	sp,fp
   172d4:	dfc00117 	ldw	ra,4(sp)
   172d8:	df000017 	ldw	fp,0(sp)
   172dc:	dec00204 	addi	sp,sp,8
   172e0:	f800283a 	ret

000172e4 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   172e4:	defff704 	addi	sp,sp,-36
   172e8:	dfc00815 	stw	ra,32(sp)
   172ec:	df000715 	stw	fp,28(sp)
   172f0:	df000704 	addi	fp,sp,28
   172f4:	e13ffe15 	stw	r4,-8(fp)
   172f8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   172fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17300:	e0bffe17 	ldw	r2,-8(fp)
   17304:	1000021e 	bne	r2,zero,17310 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17308:	00800104 	movi	r2,4
   1730c:	00003406 	br	173e0 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17310:	e0bfff17 	ldw	r2,-4(fp)
   17314:	1000021e 	bne	r2,zero,17320 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   17318:	008000c4 	movi	r2,3
   1731c:	00003006 	br	173e0 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17320:	e0bffe17 	ldw	r2,-8(fp)
   17324:	10800003 	ldbu	r2,0(r2)
   17328:	10803fcc 	andi	r2,r2,255
   1732c:	10800060 	cmpeqi	r2,r2,1
   17330:	1000021e 	bne	r2,zero,1733c <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   17334:	00800044 	movi	r2,1
   17338:	00002906 	br	173e0 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1733c:	0005303a 	rdctl	r2,status
   17340:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17344:	e0fffa17 	ldw	r3,-24(fp)
   17348:	00bfff84 	movi	r2,-2
   1734c:	1884703a 	and	r2,r3,r2
   17350:	1001703a 	wrctl	status,r2
  
  return context;
   17354:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17358:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   1735c:	e0bffe17 	ldw	r2,-8(fp)
   17360:	10800283 	ldbu	r2,10(r2)
   17364:	10803fcc 	andi	r2,r2,255
   17368:	10000c26 	beq	r2,zero,1739c <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1736c:	e13ffe17 	ldw	r4,-8(fp)
   17370:	e17fff17 	ldw	r5,-4(fp)
   17374:	01800084 	movi	r6,2
   17378:	000f883a 	mov	r7,zero
   1737c:	00140400 	call	14040 <OS_EventTaskRdy>
   17380:	e0bff917 	ldw	r2,-28(fp)
   17384:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17388:	e0bffb17 	ldw	r2,-20(fp)
   1738c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17390:	0014a580 	call	14a58 <OS_Sched>
        return (OS_ERR_NONE);
   17394:	0005883a 	mov	r2,zero
   17398:	00001106 	br	173e0 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   1739c:	e0bffe17 	ldw	r2,-8(fp)
   173a0:	10800117 	ldw	r2,4(r2)
   173a4:	10000626 	beq	r2,zero,173c0 <OSMboxPost+0xdc>
   173a8:	e0bff917 	ldw	r2,-28(fp)
   173ac:	e0bffc15 	stw	r2,-16(fp)
   173b0:	e0bffc17 	ldw	r2,-16(fp)
   173b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   173b8:	00800504 	movi	r2,20
   173bc:	00000806 	br	173e0 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   173c0:	e0bffe17 	ldw	r2,-8(fp)
   173c4:	e0ffff17 	ldw	r3,-4(fp)
   173c8:	10c00115 	stw	r3,4(r2)
   173cc:	e0bff917 	ldw	r2,-28(fp)
   173d0:	e0bffd15 	stw	r2,-12(fp)
   173d4:	e0bffd17 	ldw	r2,-12(fp)
   173d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   173dc:	0005883a 	mov	r2,zero
}
   173e0:	e037883a 	mov	sp,fp
   173e4:	dfc00117 	ldw	ra,4(sp)
   173e8:	df000017 	ldw	fp,0(sp)
   173ec:	dec00204 	addi	sp,sp,8
   173f0:	f800283a 	ret

000173f4 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   173f4:	defff604 	addi	sp,sp,-40
   173f8:	dfc00915 	stw	ra,36(sp)
   173fc:	df000815 	stw	fp,32(sp)
   17400:	df000804 	addi	fp,sp,32
   17404:	e13ffd15 	stw	r4,-12(fp)
   17408:	e17ffe15 	stw	r5,-8(fp)
   1740c:	3005883a 	mov	r2,r6
   17410:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17414:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17418:	e0bffd17 	ldw	r2,-12(fp)
   1741c:	1000021e 	bne	r2,zero,17428 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17420:	00800104 	movi	r2,4
   17424:	00004506 	br	1753c <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17428:	e0bffe17 	ldw	r2,-8(fp)
   1742c:	1000021e 	bne	r2,zero,17438 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   17430:	008000c4 	movi	r2,3
   17434:	00004106 	br	1753c <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17438:	e0bffd17 	ldw	r2,-12(fp)
   1743c:	10800003 	ldbu	r2,0(r2)
   17440:	10803fcc 	andi	r2,r2,255
   17444:	10800060 	cmpeqi	r2,r2,1
   17448:	1000021e 	bne	r2,zero,17454 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   1744c:	00800044 	movi	r2,1
   17450:	00003a06 	br	1753c <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17454:	0005303a 	rdctl	r2,status
   17458:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1745c:	e0fff917 	ldw	r3,-28(fp)
   17460:	00bfff84 	movi	r2,-2
   17464:	1884703a 	and	r2,r3,r2
   17468:	1001703a 	wrctl	status,r2
  
  return context;
   1746c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17470:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17474:	e0bffd17 	ldw	r2,-12(fp)
   17478:	10800283 	ldbu	r2,10(r2)
   1747c:	10803fcc 	andi	r2,r2,255
   17480:	10001d26 	beq	r2,zero,174f8 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17484:	e0bfff03 	ldbu	r2,-4(fp)
   17488:	1080004c 	andi	r2,r2,1
   1748c:	10000b26 	beq	r2,zero,174bc <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17490:	00000506 	br	174a8 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17494:	e13ffd17 	ldw	r4,-12(fp)
   17498:	e17ffe17 	ldw	r5,-8(fp)
   1749c:	01800084 	movi	r6,2
   174a0:	000f883a 	mov	r7,zero
   174a4:	00140400 	call	14040 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   174a8:	e0bffd17 	ldw	r2,-12(fp)
   174ac:	10800283 	ldbu	r2,10(r2)
   174b0:	10803fcc 	andi	r2,r2,255
   174b4:	103ff71e 	bne	r2,zero,17494 <__alt_mem_Flash_flash_data+0xf4017494>
   174b8:	00000506 	br	174d0 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   174bc:	e13ffd17 	ldw	r4,-12(fp)
   174c0:	e17ffe17 	ldw	r5,-8(fp)
   174c4:	01800084 	movi	r6,2
   174c8:	000f883a 	mov	r7,zero
   174cc:	00140400 	call	14040 <OS_EventTaskRdy>
   174d0:	e0bff817 	ldw	r2,-32(fp)
   174d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174d8:	e0bffa17 	ldw	r2,-24(fp)
   174dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   174e0:	e0bfff03 	ldbu	r2,-4(fp)
   174e4:	1080010c 	andi	r2,r2,4
   174e8:	1000011e 	bne	r2,zero,174f0 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   174ec:	0014a580 	call	14a58 <OS_Sched>
        }
        return (OS_ERR_NONE);
   174f0:	0005883a 	mov	r2,zero
   174f4:	00001106 	br	1753c <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   174f8:	e0bffd17 	ldw	r2,-12(fp)
   174fc:	10800117 	ldw	r2,4(r2)
   17500:	10000626 	beq	r2,zero,1751c <OSMboxPostOpt+0x128>
   17504:	e0bff817 	ldw	r2,-32(fp)
   17508:	e0bffb15 	stw	r2,-20(fp)
   1750c:	e0bffb17 	ldw	r2,-20(fp)
   17510:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17514:	00800504 	movi	r2,20
   17518:	00000806 	br	1753c <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1751c:	e0bffd17 	ldw	r2,-12(fp)
   17520:	e0fffe17 	ldw	r3,-8(fp)
   17524:	10c00115 	stw	r3,4(r2)
   17528:	e0bff817 	ldw	r2,-32(fp)
   1752c:	e0bffc15 	stw	r2,-16(fp)
   17530:	e0bffc17 	ldw	r2,-16(fp)
   17534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17538:	0005883a 	mov	r2,zero
}
   1753c:	e037883a 	mov	sp,fp
   17540:	dfc00117 	ldw	ra,4(sp)
   17544:	df000017 	ldw	fp,0(sp)
   17548:	dec00204 	addi	sp,sp,8
   1754c:	f800283a 	ret

00017550 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   17550:	defff704 	addi	sp,sp,-36
   17554:	df000815 	stw	fp,32(sp)
   17558:	df000804 	addi	fp,sp,32
   1755c:	e13ffe15 	stw	r4,-8(fp)
   17560:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17564:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17568:	e0bffe17 	ldw	r2,-8(fp)
   1756c:	1000021e 	bne	r2,zero,17578 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17570:	00800104 	movi	r2,4
   17574:	00003606 	br	17650 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	1000021e 	bne	r2,zero,17588 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17580:	00800244 	movi	r2,9
   17584:	00003206 	br	17650 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17588:	e0bffe17 	ldw	r2,-8(fp)
   1758c:	10800003 	ldbu	r2,0(r2)
   17590:	10803fcc 	andi	r2,r2,255
   17594:	10800060 	cmpeqi	r2,r2,1
   17598:	1000021e 	bne	r2,zero,175a4 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1759c:	00800044 	movi	r2,1
   175a0:	00002b06 	br	17650 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175a4:	0005303a 	rdctl	r2,status
   175a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175ac:	e0fffc17 	ldw	r3,-16(fp)
   175b0:	00bfff84 	movi	r2,-2
   175b4:	1884703a 	and	r2,r3,r2
   175b8:	1001703a 	wrctl	status,r2
  
  return context;
   175bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   175c0:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   175c4:	e0bffe17 	ldw	r2,-8(fp)
   175c8:	10c00283 	ldbu	r3,10(r2)
   175cc:	e0bfff17 	ldw	r2,-4(fp)
   175d0:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   175d4:	e0bffe17 	ldw	r2,-8(fp)
   175d8:	108002c4 	addi	r2,r2,11
   175dc:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   175e0:	e0bfff17 	ldw	r2,-4(fp)
   175e4:	10800104 	addi	r2,r2,4
   175e8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   175ec:	e03ff805 	stb	zero,-32(fp)
   175f0:	00000b06 	br	17620 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   175f4:	e0bffa17 	ldw	r2,-24(fp)
   175f8:	10c00044 	addi	r3,r2,1
   175fc:	e0fffa15 	stw	r3,-24(fp)
   17600:	e0fff917 	ldw	r3,-28(fp)
   17604:	19000044 	addi	r4,r3,1
   17608:	e13ff915 	stw	r4,-28(fp)
   1760c:	18c00003 	ldbu	r3,0(r3)
   17610:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17614:	e0bff803 	ldbu	r2,-32(fp)
   17618:	10800044 	addi	r2,r2,1
   1761c:	e0bff805 	stb	r2,-32(fp)
   17620:	e0bff803 	ldbu	r2,-32(fp)
   17624:	108000f0 	cmpltui	r2,r2,3
   17628:	103ff21e 	bne	r2,zero,175f4 <__alt_mem_Flash_flash_data+0xf40175f4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   1762c:	e0bffe17 	ldw	r2,-8(fp)
   17630:	10c00117 	ldw	r3,4(r2)
   17634:	e0bfff17 	ldw	r2,-4(fp)
   17638:	10c00015 	stw	r3,0(r2)
   1763c:	e0bffb17 	ldw	r2,-20(fp)
   17640:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17644:	e0bffd17 	ldw	r2,-12(fp)
   17648:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1764c:	0005883a 	mov	r2,zero
}
   17650:	e037883a 	mov	sp,fp
   17654:	df000017 	ldw	fp,0(sp)
   17658:	dec00104 	addi	sp,sp,4
   1765c:	f800283a 	ret

00017660 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   17660:	defff404 	addi	sp,sp,-48
   17664:	df000b15 	stw	fp,44(sp)
   17668:	df000b04 	addi	fp,sp,44
   1766c:	e13ffc15 	stw	r4,-16(fp)
   17670:	e17ffd15 	stw	r5,-12(fp)
   17674:	e1bffe15 	stw	r6,-8(fp)
   17678:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1767c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17680:	e0bfff17 	ldw	r2,-4(fp)
   17684:	1000021e 	bne	r2,zero,17690 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   17688:	0005883a 	mov	r2,zero
   1768c:	00006d06 	br	17844 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17690:	e0bffc17 	ldw	r2,-16(fp)
   17694:	1000051e 	bne	r2,zero,176ac <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17698:	e0bfff17 	ldw	r2,-4(fp)
   1769c:	00c01884 	movi	r3,98
   176a0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   176a4:	0005883a 	mov	r2,zero
   176a8:	00006606 	br	17844 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   176ac:	e0bffc17 	ldw	r2,-16(fp)
   176b0:	108000cc 	andi	r2,r2,3
   176b4:	10000526 	beq	r2,zero,176cc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   176b8:	e0bfff17 	ldw	r2,-4(fp)
   176bc:	00c01884 	movi	r3,98
   176c0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   176c4:	0005883a 	mov	r2,zero
   176c8:	00005e06 	br	17844 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   176cc:	e0bffd17 	ldw	r2,-12(fp)
   176d0:	108000a8 	cmpgeui	r2,r2,2
   176d4:	1000051e 	bne	r2,zero,176ec <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   176d8:	e0bfff17 	ldw	r2,-4(fp)
   176dc:	00c016c4 	movi	r3,91
   176e0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   176e4:	0005883a 	mov	r2,zero
   176e8:	00005606 	br	17844 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   176ec:	e0bffe17 	ldw	r2,-8(fp)
   176f0:	10800128 	cmpgeui	r2,r2,4
   176f4:	1000051e 	bne	r2,zero,1770c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   176f8:	e0bfff17 	ldw	r2,-4(fp)
   176fc:	00c01704 	movi	r3,92
   17700:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17704:	0005883a 	mov	r2,zero
   17708:	00004e06 	br	17844 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1770c:	0005303a 	rdctl	r2,status
   17710:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17714:	e0fffa17 	ldw	r3,-24(fp)
   17718:	00bfff84 	movi	r2,-2
   1771c:	1884703a 	and	r2,r3,r2
   17720:	1001703a 	wrctl	status,r2
  
  return context;
   17724:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17728:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1772c:	008000b4 	movhi	r2,2
   17730:	108ffa04 	addi	r2,r2,16360
   17734:	10800017 	ldw	r2,0(r2)
   17738:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1773c:	008000b4 	movhi	r2,2
   17740:	108ffa04 	addi	r2,r2,16360
   17744:	10800017 	ldw	r2,0(r2)
   17748:	10000726 	beq	r2,zero,17768 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1774c:	008000b4 	movhi	r2,2
   17750:	108ffa04 	addi	r2,r2,16360
   17754:	10800017 	ldw	r2,0(r2)
   17758:	10c00117 	ldw	r3,4(r2)
   1775c:	008000b4 	movhi	r2,2
   17760:	108ffa04 	addi	r2,r2,16360
   17764:	10c00015 	stw	r3,0(r2)
   17768:	e0bff817 	ldw	r2,-32(fp)
   1776c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17770:	e0bffb17 	ldw	r2,-20(fp)
   17774:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   17778:	e0bff917 	ldw	r2,-28(fp)
   1777c:	1000051e 	bne	r2,zero,17794 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   17780:	e0bfff17 	ldw	r2,-4(fp)
   17784:	00c01684 	movi	r3,90
   17788:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1778c:	0005883a 	mov	r2,zero
   17790:	00002c06 	br	17844 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   17794:	e0bffc17 	ldw	r2,-16(fp)
   17798:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1779c:	e0fffc17 	ldw	r3,-16(fp)
   177a0:	e0bffe17 	ldw	r2,-8(fp)
   177a4:	1885883a 	add	r2,r3,r2
   177a8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   177ac:	e03ff715 	stw	zero,-36(fp)
   177b0:	00000c06 	br	177e4 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   177b4:	e0bff617 	ldw	r2,-40(fp)
   177b8:	e0fff517 	ldw	r3,-44(fp)
   177bc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   177c0:	e0bff517 	ldw	r2,-44(fp)
   177c4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   177c8:	e0fff517 	ldw	r3,-44(fp)
   177cc:	e0bffe17 	ldw	r2,-8(fp)
   177d0:	1885883a 	add	r2,r3,r2
   177d4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   177d8:	e0bff717 	ldw	r2,-36(fp)
   177dc:	10800044 	addi	r2,r2,1
   177e0:	e0bff715 	stw	r2,-36(fp)
   177e4:	e0bffd17 	ldw	r2,-12(fp)
   177e8:	10bfffc4 	addi	r2,r2,-1
   177ec:	e0fff717 	ldw	r3,-36(fp)
   177f0:	18bff036 	bltu	r3,r2,177b4 <__alt_mem_Flash_flash_data+0xf40177b4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   177f4:	e0bff617 	ldw	r2,-40(fp)
   177f8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   177fc:	e0bff917 	ldw	r2,-28(fp)
   17800:	e0fffc17 	ldw	r3,-16(fp)
   17804:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   17808:	e0bff917 	ldw	r2,-28(fp)
   1780c:	e0fffc17 	ldw	r3,-16(fp)
   17810:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   17814:	e0bff917 	ldw	r2,-28(fp)
   17818:	e0fffd17 	ldw	r3,-12(fp)
   1781c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   17820:	e0bff917 	ldw	r2,-28(fp)
   17824:	e0fffd17 	ldw	r3,-12(fp)
   17828:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1782c:	e0bff917 	ldw	r2,-28(fp)
   17830:	e0fffe17 	ldw	r3,-8(fp)
   17834:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   17838:	e0bfff17 	ldw	r2,-4(fp)
   1783c:	10000005 	stb	zero,0(r2)
    return (pmem);
   17840:	e0bff917 	ldw	r2,-28(fp)
}
   17844:	e037883a 	mov	sp,fp
   17848:	df000017 	ldw	fp,0(sp)
   1784c:	dec00104 	addi	sp,sp,4
   17850:	f800283a 	ret

00017854 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   17854:	defff804 	addi	sp,sp,-32
   17858:	df000715 	stw	fp,28(sp)
   1785c:	df000704 	addi	fp,sp,28
   17860:	e13ffe15 	stw	r4,-8(fp)
   17864:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17868:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1786c:	e0bfff17 	ldw	r2,-4(fp)
   17870:	1000021e 	bne	r2,zero,1787c <OSMemGet+0x28>
        return ((void *)0);
   17874:	0005883a 	mov	r2,zero
   17878:	00002e06 	br	17934 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1787c:	e0bffe17 	ldw	r2,-8(fp)
   17880:	1000051e 	bne	r2,zero,17898 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17884:	e0bfff17 	ldw	r2,-4(fp)
   17888:	00c01804 	movi	r3,96
   1788c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17890:	0005883a 	mov	r2,zero
   17894:	00002706 	br	17934 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17898:	0005303a 	rdctl	r2,status
   1789c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178a0:	e0fffb17 	ldw	r3,-20(fp)
   178a4:	00bfff84 	movi	r2,-2
   178a8:	1884703a 	and	r2,r3,r2
   178ac:	1001703a 	wrctl	status,r2
  
  return context;
   178b0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   178b4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   178b8:	e0bffe17 	ldw	r2,-8(fp)
   178bc:	10800417 	ldw	r2,16(r2)
   178c0:	10001426 	beq	r2,zero,17914 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   178c4:	e0bffe17 	ldw	r2,-8(fp)
   178c8:	10800117 	ldw	r2,4(r2)
   178cc:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   178d0:	e0bffa17 	ldw	r2,-24(fp)
   178d4:	10c00017 	ldw	r3,0(r2)
   178d8:	e0bffe17 	ldw	r2,-8(fp)
   178dc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   178e0:	e0bffe17 	ldw	r2,-8(fp)
   178e4:	10800417 	ldw	r2,16(r2)
   178e8:	10ffffc4 	addi	r3,r2,-1
   178ec:	e0bffe17 	ldw	r2,-8(fp)
   178f0:	10c00415 	stw	r3,16(r2)
   178f4:	e0bff917 	ldw	r2,-28(fp)
   178f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178fc:	e0bffc17 	ldw	r2,-16(fp)
   17900:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   17904:	e0bfff17 	ldw	r2,-4(fp)
   17908:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1790c:	e0bffa17 	ldw	r2,-24(fp)
   17910:	00000806 	br	17934 <OSMemGet+0xe0>
   17914:	e0bff917 	ldw	r2,-28(fp)
   17918:	e0bffd15 	stw	r2,-12(fp)
   1791c:	e0bffd17 	ldw	r2,-12(fp)
   17920:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   17924:	e0bfff17 	ldw	r2,-4(fp)
   17928:	00c01744 	movi	r3,93
   1792c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   17930:	0005883a 	mov	r2,zero
}
   17934:	e037883a 	mov	sp,fp
   17938:	df000017 	ldw	fp,0(sp)
   1793c:	dec00104 	addi	sp,sp,4
   17940:	f800283a 	ret

00017944 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17944:	defff704 	addi	sp,sp,-36
   17948:	dfc00815 	stw	ra,32(sp)
   1794c:	df000715 	stw	fp,28(sp)
   17950:	df000704 	addi	fp,sp,28
   17954:	e13ffd15 	stw	r4,-12(fp)
   17958:	e17ffe15 	stw	r5,-8(fp)
   1795c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17960:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17964:	e0bfff17 	ldw	r2,-4(fp)
   17968:	1000021e 	bne	r2,zero,17974 <OSMemNameGet+0x30>
        return (0);
   1796c:	0005883a 	mov	r2,zero
   17970:	00002d06 	br	17a28 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17974:	e0bffd17 	ldw	r2,-12(fp)
   17978:	1000051e 	bne	r2,zero,17990 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1797c:	e0bfff17 	ldw	r2,-4(fp)
   17980:	00c01804 	movi	r3,96
   17984:	10c00005 	stb	r3,0(r2)
        return (0);
   17988:	0005883a 	mov	r2,zero
   1798c:	00002606 	br	17a28 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17990:	e0bffe17 	ldw	r2,-8(fp)
   17994:	1000051e 	bne	r2,zero,179ac <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17998:	e0bfff17 	ldw	r2,-4(fp)
   1799c:	00c00304 	movi	r3,12
   179a0:	10c00005 	stb	r3,0(r2)
        return (0);
   179a4:	0005883a 	mov	r2,zero
   179a8:	00001f06 	br	17a28 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   179ac:	008000b4 	movhi	r2,2
   179b0:	108fff04 	addi	r2,r2,16380
   179b4:	10800003 	ldbu	r2,0(r2)
   179b8:	10803fcc 	andi	r2,r2,255
   179bc:	10000526 	beq	r2,zero,179d4 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   179c0:	e0bfff17 	ldw	r2,-4(fp)
   179c4:	00c00444 	movi	r3,17
   179c8:	10c00005 	stb	r3,0(r2)
        return (0);
   179cc:	0005883a 	mov	r2,zero
   179d0:	00001506 	br	17a28 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179d4:	0005303a 	rdctl	r2,status
   179d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179dc:	e0fffb17 	ldw	r3,-20(fp)
   179e0:	00bfff84 	movi	r2,-2
   179e4:	1884703a 	and	r2,r3,r2
   179e8:	1001703a 	wrctl	status,r2
  
  return context;
   179ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   179f0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   179f4:	e0bffd17 	ldw	r2,-12(fp)
   179f8:	10800504 	addi	r2,r2,20
   179fc:	e13ffe17 	ldw	r4,-8(fp)
   17a00:	100b883a 	mov	r5,r2
   17a04:	0014b940 	call	14b94 <OS_StrCopy>
   17a08:	e0bffa05 	stb	r2,-24(fp)
   17a0c:	e0bff917 	ldw	r2,-28(fp)
   17a10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a14:	e0bffc17 	ldw	r2,-16(fp)
   17a18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17a1c:	e0bfff17 	ldw	r2,-4(fp)
   17a20:	10000005 	stb	zero,0(r2)
    return (len);
   17a24:	e0bffa03 	ldbu	r2,-24(fp)
}
   17a28:	e037883a 	mov	sp,fp
   17a2c:	dfc00117 	ldw	ra,4(sp)
   17a30:	df000017 	ldw	fp,0(sp)
   17a34:	dec00204 	addi	sp,sp,8
   17a38:	f800283a 	ret

00017a3c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17a3c:	defff604 	addi	sp,sp,-40
   17a40:	dfc00915 	stw	ra,36(sp)
   17a44:	df000815 	stw	fp,32(sp)
   17a48:	df000804 	addi	fp,sp,32
   17a4c:	e13ffd15 	stw	r4,-12(fp)
   17a50:	e17ffe15 	stw	r5,-8(fp)
   17a54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17a58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17a5c:	e0bfff17 	ldw	r2,-4(fp)
   17a60:	1000011e 	bne	r2,zero,17a68 <OSMemNameSet+0x2c>
        return;
   17a64:	00003606 	br	17b40 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17a68:	e0bffd17 	ldw	r2,-12(fp)
   17a6c:	1000041e 	bne	r2,zero,17a80 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17a70:	e0bfff17 	ldw	r2,-4(fp)
   17a74:	00c01804 	movi	r3,96
   17a78:	10c00005 	stb	r3,0(r2)
        return;
   17a7c:	00003006 	br	17b40 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17a80:	e0bffe17 	ldw	r2,-8(fp)
   17a84:	1000041e 	bne	r2,zero,17a98 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   17a88:	e0bfff17 	ldw	r2,-4(fp)
   17a8c:	00c00304 	movi	r3,12
   17a90:	10c00005 	stb	r3,0(r2)
        return;
   17a94:	00002a06 	br	17b40 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17a98:	008000b4 	movhi	r2,2
   17a9c:	108fff04 	addi	r2,r2,16380
   17aa0:	10800003 	ldbu	r2,0(r2)
   17aa4:	10803fcc 	andi	r2,r2,255
   17aa8:	10000426 	beq	r2,zero,17abc <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   17aac:	e0bfff17 	ldw	r2,-4(fp)
   17ab0:	00c00484 	movi	r3,18
   17ab4:	10c00005 	stb	r3,0(r2)
        return;
   17ab8:	00002106 	br	17b40 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17abc:	0005303a 	rdctl	r2,status
   17ac0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ac4:	e0fffa17 	ldw	r3,-24(fp)
   17ac8:	00bfff84 	movi	r2,-2
   17acc:	1884703a 	and	r2,r3,r2
   17ad0:	1001703a 	wrctl	status,r2
  
  return context;
   17ad4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17ad8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17adc:	e13ffe17 	ldw	r4,-8(fp)
   17ae0:	0014c080 	call	14c08 <OS_StrLen>
   17ae4:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17ae8:	e0bff903 	ldbu	r2,-28(fp)
   17aec:	10800830 	cmpltui	r2,r2,32
   17af0:	1000081e 	bne	r2,zero,17b14 <OSMemNameSet+0xd8>
   17af4:	e0bff817 	ldw	r2,-32(fp)
   17af8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17afc:	e0bffb17 	ldw	r2,-20(fp)
   17b00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17b04:	e0bfff17 	ldw	r2,-4(fp)
   17b08:	00c018c4 	movi	r3,99
   17b0c:	10c00005 	stb	r3,0(r2)
        return;
   17b10:	00000b06 	br	17b40 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17b14:	e0bffd17 	ldw	r2,-12(fp)
   17b18:	10800504 	addi	r2,r2,20
   17b1c:	1009883a 	mov	r4,r2
   17b20:	e17ffe17 	ldw	r5,-8(fp)
   17b24:	0014b940 	call	14b94 <OS_StrCopy>
   17b28:	e0bff817 	ldw	r2,-32(fp)
   17b2c:	e0bffc15 	stw	r2,-16(fp)
   17b30:	e0bffc17 	ldw	r2,-16(fp)
   17b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17b38:	e0bfff17 	ldw	r2,-4(fp)
   17b3c:	10000005 	stb	zero,0(r2)
}
   17b40:	e037883a 	mov	sp,fp
   17b44:	dfc00117 	ldw	ra,4(sp)
   17b48:	df000017 	ldw	fp,0(sp)
   17b4c:	dec00204 	addi	sp,sp,8
   17b50:	f800283a 	ret

00017b54 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   17b54:	defff904 	addi	sp,sp,-28
   17b58:	df000615 	stw	fp,24(sp)
   17b5c:	df000604 	addi	fp,sp,24
   17b60:	e13ffe15 	stw	r4,-8(fp)
   17b64:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17b68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17b6c:	e0bffe17 	ldw	r2,-8(fp)
   17b70:	1000021e 	bne	r2,zero,17b7c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17b74:	00801804 	movi	r2,96
   17b78:	00002806 	br	17c1c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   17b7c:	e0bfff17 	ldw	r2,-4(fp)
   17b80:	1000021e 	bne	r2,zero,17b8c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   17b84:	008017c4 	movi	r2,95
   17b88:	00002406 	br	17c1c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b8c:	0005303a 	rdctl	r2,status
   17b90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b94:	e0fffb17 	ldw	r3,-20(fp)
   17b98:	00bfff84 	movi	r2,-2
   17b9c:	1884703a 	and	r2,r3,r2
   17ba0:	1001703a 	wrctl	status,r2
  
  return context;
   17ba4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17ba8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   17bac:	e0bffe17 	ldw	r2,-8(fp)
   17bb0:	10c00417 	ldw	r3,16(r2)
   17bb4:	e0bffe17 	ldw	r2,-8(fp)
   17bb8:	10800317 	ldw	r2,12(r2)
   17bbc:	18800636 	bltu	r3,r2,17bd8 <OSMemPut+0x84>
   17bc0:	e0bffa17 	ldw	r2,-24(fp)
   17bc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17bc8:	e0bffc17 	ldw	r2,-16(fp)
   17bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   17bd0:	00801784 	movi	r2,94
   17bd4:	00001106 	br	17c1c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17bd8:	e0bffe17 	ldw	r2,-8(fp)
   17bdc:	10c00117 	ldw	r3,4(r2)
   17be0:	e0bfff17 	ldw	r2,-4(fp)
   17be4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17be8:	e0bffe17 	ldw	r2,-8(fp)
   17bec:	e0ffff17 	ldw	r3,-4(fp)
   17bf0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   17bf4:	e0bffe17 	ldw	r2,-8(fp)
   17bf8:	10800417 	ldw	r2,16(r2)
   17bfc:	10c00044 	addi	r3,r2,1
   17c00:	e0bffe17 	ldw	r2,-8(fp)
   17c04:	10c00415 	stw	r3,16(r2)
   17c08:	e0bffa17 	ldw	r2,-24(fp)
   17c0c:	e0bffd15 	stw	r2,-12(fp)
   17c10:	e0bffd17 	ldw	r2,-12(fp)
   17c14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17c18:	0005883a 	mov	r2,zero
}
   17c1c:	e037883a 	mov	sp,fp
   17c20:	df000017 	ldw	fp,0(sp)
   17c24:	dec00104 	addi	sp,sp,4
   17c28:	f800283a 	ret

00017c2c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17c2c:	defffa04 	addi	sp,sp,-24
   17c30:	df000515 	stw	fp,20(sp)
   17c34:	df000504 	addi	fp,sp,20
   17c38:	e13ffe15 	stw	r4,-8(fp)
   17c3c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17c40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17c44:	e0bffe17 	ldw	r2,-8(fp)
   17c48:	1000021e 	bne	r2,zero,17c54 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17c4c:	00801804 	movi	r2,96
   17c50:	00002c06 	br	17d04 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   17c54:	e0bfff17 	ldw	r2,-4(fp)
   17c58:	1000021e 	bne	r2,zero,17c64 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   17c5c:	00801844 	movi	r2,97
   17c60:	00002806 	br	17d04 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c64:	0005303a 	rdctl	r2,status
   17c68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c6c:	e0fffc17 	ldw	r3,-16(fp)
   17c70:	00bfff84 	movi	r2,-2
   17c74:	1884703a 	and	r2,r3,r2
   17c78:	1001703a 	wrctl	status,r2
  
  return context;
   17c7c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17c80:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   17c84:	e0bffe17 	ldw	r2,-8(fp)
   17c88:	10c00017 	ldw	r3,0(r2)
   17c8c:	e0bfff17 	ldw	r2,-4(fp)
   17c90:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   17c94:	e0bffe17 	ldw	r2,-8(fp)
   17c98:	10c00117 	ldw	r3,4(r2)
   17c9c:	e0bfff17 	ldw	r2,-4(fp)
   17ca0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   17ca4:	e0bffe17 	ldw	r2,-8(fp)
   17ca8:	10c00217 	ldw	r3,8(r2)
   17cac:	e0bfff17 	ldw	r2,-4(fp)
   17cb0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   17cb4:	e0bffe17 	ldw	r2,-8(fp)
   17cb8:	10c00317 	ldw	r3,12(r2)
   17cbc:	e0bfff17 	ldw	r2,-4(fp)
   17cc0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   17cc4:	e0bffe17 	ldw	r2,-8(fp)
   17cc8:	10c00417 	ldw	r3,16(r2)
   17ccc:	e0bfff17 	ldw	r2,-4(fp)
   17cd0:	10c00415 	stw	r3,16(r2)
   17cd4:	e0bffb17 	ldw	r2,-20(fp)
   17cd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cdc:	e0bffd17 	ldw	r2,-12(fp)
   17ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   17ce4:	e0bfff17 	ldw	r2,-4(fp)
   17ce8:	10c00317 	ldw	r3,12(r2)
   17cec:	e0bfff17 	ldw	r2,-4(fp)
   17cf0:	10800417 	ldw	r2,16(r2)
   17cf4:	1887c83a 	sub	r3,r3,r2
   17cf8:	e0bfff17 	ldw	r2,-4(fp)
   17cfc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17d00:	0005883a 	mov	r2,zero
}
   17d04:	e037883a 	mov	sp,fp
   17d08:	df000017 	ldw	fp,0(sp)
   17d0c:	dec00104 	addi	sp,sp,4
   17d10:	f800283a 	ret

00017d14 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   17d14:	defffc04 	addi	sp,sp,-16
   17d18:	dfc00315 	stw	ra,12(sp)
   17d1c:	df000215 	stw	fp,8(sp)
   17d20:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   17d24:	01000134 	movhi	r4,4
   17d28:	21190a04 	addi	r4,r4,25640
   17d2c:	01430c04 	movi	r5,3120
   17d30:	00149a40 	call	149a4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   17d34:	00800134 	movhi	r2,4
   17d38:	10990a04 	addi	r2,r2,25640
   17d3c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17d40:	e03fff0d 	sth	zero,-4(fp)
   17d44:	00001306 	br	17d94 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17d48:	e0bfff0b 	ldhu	r2,-4(fp)
   17d4c:	10800044 	addi	r2,r2,1
   17d50:	10c00d24 	muli	r3,r2,52
   17d54:	00800134 	movhi	r2,4
   17d58:	10990a04 	addi	r2,r2,25640
   17d5c:	1887883a 	add	r3,r3,r2
   17d60:	e0bffe17 	ldw	r2,-8(fp)
   17d64:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17d68:	e0bffe17 	ldw	r2,-8(fp)
   17d6c:	00c00fc4 	movi	r3,63
   17d70:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   17d74:	e0bffe17 	ldw	r2,-8(fp)
   17d78:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   17d7c:	e0bffe17 	ldw	r2,-8(fp)
   17d80:	10800d04 	addi	r2,r2,52
   17d84:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17d88:	e0bfff0b 	ldhu	r2,-4(fp)
   17d8c:	10800044 	addi	r2,r2,1
   17d90:	e0bfff0d 	sth	r2,-4(fp)
   17d94:	e0bfff0b 	ldhu	r2,-4(fp)
   17d98:	10800ef0 	cmpltui	r2,r2,59
   17d9c:	103fea1e 	bne	r2,zero,17d48 <__alt_mem_Flash_flash_data+0xf4017d48>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   17da0:	e0bffe17 	ldw	r2,-8(fp)
   17da4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   17da8:	e0bffe17 	ldw	r2,-8(fp)
   17dac:	00c00fc4 	movi	r3,63
   17db0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   17db4:	e0bffe17 	ldw	r2,-8(fp)
   17db8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17dbc:	008000b4 	movhi	r2,2
   17dc0:	108ffa04 	addi	r2,r2,16360
   17dc4:	00c00134 	movhi	r3,4
   17dc8:	18d90a04 	addi	r3,r3,25640
   17dcc:	10c00015 	stw	r3,0(r2)
#endif
}
   17dd0:	e037883a 	mov	sp,fp
   17dd4:	dfc00117 	ldw	ra,4(sp)
   17dd8:	df000017 	ldw	fp,0(sp)
   17ddc:	dec00204 	addi	sp,sp,8
   17de0:	f800283a 	ret

00017de4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17de4:	defff804 	addi	sp,sp,-32
   17de8:	df000715 	stw	fp,28(sp)
   17dec:	df000704 	addi	fp,sp,28
   17df0:	e13ffe15 	stw	r4,-8(fp)
   17df4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17df8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17dfc:	e0bfff17 	ldw	r2,-4(fp)
   17e00:	1000021e 	bne	r2,zero,17e0c <OSQAccept+0x28>
        return ((void *)0);
   17e04:	0005883a 	mov	r2,zero
   17e08:	00004206 	br	17f14 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17e0c:	e0bffe17 	ldw	r2,-8(fp)
   17e10:	1000051e 	bne	r2,zero,17e28 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17e14:	e0bfff17 	ldw	r2,-4(fp)
   17e18:	00c00104 	movi	r3,4
   17e1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17e20:	0005883a 	mov	r2,zero
   17e24:	00003b06 	br	17f14 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17e28:	e0bffe17 	ldw	r2,-8(fp)
   17e2c:	10800003 	ldbu	r2,0(r2)
   17e30:	10803fcc 	andi	r2,r2,255
   17e34:	108000a0 	cmpeqi	r2,r2,2
   17e38:	1000051e 	bne	r2,zero,17e50 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17e3c:	e0bfff17 	ldw	r2,-4(fp)
   17e40:	00c00044 	movi	r3,1
   17e44:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17e48:	0005883a 	mov	r2,zero
   17e4c:	00003106 	br	17f14 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e50:	0005303a 	rdctl	r2,status
   17e54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e58:	e0fffc17 	ldw	r3,-16(fp)
   17e5c:	00bfff84 	movi	r2,-2
   17e60:	1884703a 	and	r2,r3,r2
   17e64:	1001703a 	wrctl	status,r2
  
  return context;
   17e68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17e6c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17e70:	e0bffe17 	ldw	r2,-8(fp)
   17e74:	10800117 	ldw	r2,4(r2)
   17e78:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17e7c:	e0bffb17 	ldw	r2,-20(fp)
   17e80:	1080058b 	ldhu	r2,22(r2)
   17e84:	10bfffcc 	andi	r2,r2,65535
   17e88:	10001926 	beq	r2,zero,17ef0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17e8c:	e0bffb17 	ldw	r2,-20(fp)
   17e90:	10800417 	ldw	r2,16(r2)
   17e94:	11000104 	addi	r4,r2,4
   17e98:	e0fffb17 	ldw	r3,-20(fp)
   17e9c:	19000415 	stw	r4,16(r3)
   17ea0:	10800017 	ldw	r2,0(r2)
   17ea4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17ea8:	e0bffb17 	ldw	r2,-20(fp)
   17eac:	1080058b 	ldhu	r2,22(r2)
   17eb0:	10bfffc4 	addi	r2,r2,-1
   17eb4:	1007883a 	mov	r3,r2
   17eb8:	e0bffb17 	ldw	r2,-20(fp)
   17ebc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17ec0:	e0bffb17 	ldw	r2,-20(fp)
   17ec4:	10c00417 	ldw	r3,16(r2)
   17ec8:	e0bffb17 	ldw	r2,-20(fp)
   17ecc:	10800217 	ldw	r2,8(r2)
   17ed0:	1880041e 	bne	r3,r2,17ee4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   17ed4:	e0bffb17 	ldw	r2,-20(fp)
   17ed8:	10c00117 	ldw	r3,4(r2)
   17edc:	e0bffb17 	ldw	r2,-20(fp)
   17ee0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   17ee4:	e0bfff17 	ldw	r2,-4(fp)
   17ee8:	10000005 	stb	zero,0(r2)
   17eec:	00000406 	br	17f00 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   17ef0:	e0bfff17 	ldw	r2,-4(fp)
   17ef4:	00c007c4 	movi	r3,31
   17ef8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   17efc:	e03ff915 	stw	zero,-28(fp)
   17f00:	e0bffa17 	ldw	r2,-24(fp)
   17f04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f08:	e0bffd17 	ldw	r2,-12(fp)
   17f0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   17f10:	e0bff917 	ldw	r2,-28(fp)
}
   17f14:	e037883a 	mov	sp,fp
   17f18:	df000017 	ldw	fp,0(sp)
   17f1c:	dec00104 	addi	sp,sp,4
   17f20:	f800283a 	ret

00017f24 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17f24:	defff404 	addi	sp,sp,-48
   17f28:	dfc00b15 	stw	ra,44(sp)
   17f2c:	df000a15 	stw	fp,40(sp)
   17f30:	df000a04 	addi	fp,sp,40
   17f34:	e13ffe15 	stw	r4,-8(fp)
   17f38:	2805883a 	mov	r2,r5
   17f3c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17f40:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17f44:	008000b4 	movhi	r2,2
   17f48:	108fff04 	addi	r2,r2,16380
   17f4c:	10800003 	ldbu	r2,0(r2)
   17f50:	10803fcc 	andi	r2,r2,255
   17f54:	10000226 	beq	r2,zero,17f60 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17f58:	0005883a 	mov	r2,zero
   17f5c:	00006b06 	br	1810c <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f60:	0005303a 	rdctl	r2,status
   17f64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f68:	e0fff917 	ldw	r3,-28(fp)
   17f6c:	00bfff84 	movi	r2,-2
   17f70:	1884703a 	and	r2,r3,r2
   17f74:	1001703a 	wrctl	status,r2
  
  return context;
   17f78:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17f7c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   17f80:	008000b4 	movhi	r2,2
   17f84:	108ffe04 	addi	r2,r2,16376
   17f88:	10800017 	ldw	r2,0(r2)
   17f8c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   17f90:	008000b4 	movhi	r2,2
   17f94:	108ffe04 	addi	r2,r2,16376
   17f98:	10800017 	ldw	r2,0(r2)
   17f9c:	10000726 	beq	r2,zero,17fbc <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17fa0:	008000b4 	movhi	r2,2
   17fa4:	108ffe04 	addi	r2,r2,16376
   17fa8:	10800017 	ldw	r2,0(r2)
   17fac:	10c00117 	ldw	r3,4(r2)
   17fb0:	008000b4 	movhi	r2,2
   17fb4:	108ffe04 	addi	r2,r2,16376
   17fb8:	10c00015 	stw	r3,0(r2)
   17fbc:	e0bff717 	ldw	r2,-36(fp)
   17fc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fc4:	e0bffa17 	ldw	r2,-24(fp)
   17fc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   17fcc:	e0bff617 	ldw	r2,-40(fp)
   17fd0:	10004d26 	beq	r2,zero,18108 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17fd4:	0005303a 	rdctl	r2,status
   17fd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17fdc:	e0fffb17 	ldw	r3,-20(fp)
   17fe0:	00bfff84 	movi	r2,-2
   17fe4:	1884703a 	and	r2,r3,r2
   17fe8:	1001703a 	wrctl	status,r2
  
  return context;
   17fec:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   17ff0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   17ff4:	008000b4 	movhi	r2,2
   17ff8:	108ffc04 	addi	r2,r2,16368
   17ffc:	10800017 	ldw	r2,0(r2)
   18000:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   18004:	e0bff817 	ldw	r2,-32(fp)
   18008:	10003126 	beq	r2,zero,180d0 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1800c:	008000b4 	movhi	r2,2
   18010:	108ffc04 	addi	r2,r2,16368
   18014:	10800017 	ldw	r2,0(r2)
   18018:	10c00017 	ldw	r3,0(r2)
   1801c:	008000b4 	movhi	r2,2
   18020:	108ffc04 	addi	r2,r2,16368
   18024:	10c00015 	stw	r3,0(r2)
   18028:	e0bff717 	ldw	r2,-36(fp)
   1802c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18030:	e0bffc17 	ldw	r2,-16(fp)
   18034:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   18038:	e0bff817 	ldw	r2,-32(fp)
   1803c:	e0fffe17 	ldw	r3,-8(fp)
   18040:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   18044:	e0bfff0b 	ldhu	r2,-4(fp)
   18048:	1085883a 	add	r2,r2,r2
   1804c:	1085883a 	add	r2,r2,r2
   18050:	1007883a 	mov	r3,r2
   18054:	e0bffe17 	ldw	r2,-8(fp)
   18058:	10c7883a 	add	r3,r2,r3
   1805c:	e0bff817 	ldw	r2,-32(fp)
   18060:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   18064:	e0bff817 	ldw	r2,-32(fp)
   18068:	e0fffe17 	ldw	r3,-8(fp)
   1806c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   18070:	e0bff817 	ldw	r2,-32(fp)
   18074:	e0fffe17 	ldw	r3,-8(fp)
   18078:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1807c:	e0bff817 	ldw	r2,-32(fp)
   18080:	e0ffff0b 	ldhu	r3,-4(fp)
   18084:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   18088:	e0bff817 	ldw	r2,-32(fp)
   1808c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   18090:	e0bff617 	ldw	r2,-40(fp)
   18094:	00c00084 	movi	r3,2
   18098:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1809c:	e0bff617 	ldw	r2,-40(fp)
   180a0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   180a4:	e0bff617 	ldw	r2,-40(fp)
   180a8:	e0fff817 	ldw	r3,-32(fp)
   180ac:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   180b0:	e0bff617 	ldw	r2,-40(fp)
   180b4:	00c00fc4 	movi	r3,63
   180b8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   180bc:	e0bff617 	ldw	r2,-40(fp)
   180c0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   180c4:	e13ff617 	ldw	r4,-40(fp)
   180c8:	00145e00 	call	145e0 <OS_EventWaitListInit>
   180cc:	00000e06 	br	18108 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   180d0:	008000b4 	movhi	r2,2
   180d4:	108ffe04 	addi	r2,r2,16376
   180d8:	10c00017 	ldw	r3,0(r2)
   180dc:	e0bff617 	ldw	r2,-40(fp)
   180e0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   180e4:	008000b4 	movhi	r2,2
   180e8:	108ffe04 	addi	r2,r2,16376
   180ec:	e0fff617 	ldw	r3,-40(fp)
   180f0:	10c00015 	stw	r3,0(r2)
   180f4:	e0bff717 	ldw	r2,-36(fp)
   180f8:	e0bffd15 	stw	r2,-12(fp)
   180fc:	e0bffd17 	ldw	r2,-12(fp)
   18100:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   18104:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   18108:	e0bff617 	ldw	r2,-40(fp)
}
   1810c:	e037883a 	mov	sp,fp
   18110:	dfc00117 	ldw	ra,4(sp)
   18114:	df000017 	ldw	fp,0(sp)
   18118:	dec00204 	addi	sp,sp,8
   1811c:	f800283a 	ret

00018120 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18120:	defff204 	addi	sp,sp,-56
   18124:	dfc00d15 	stw	ra,52(sp)
   18128:	df000c15 	stw	fp,48(sp)
   1812c:	df000c04 	addi	fp,sp,48
   18130:	e13ffd15 	stw	r4,-12(fp)
   18134:	2805883a 	mov	r2,r5
   18138:	e1bfff15 	stw	r6,-4(fp)
   1813c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18140:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18144:	e0bfff17 	ldw	r2,-4(fp)
   18148:	1000021e 	bne	r2,zero,18154 <OSQDel+0x34>
        return (pevent);
   1814c:	e0bffd17 	ldw	r2,-12(fp)
   18150:	0000a006 	br	183d4 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18154:	e0bffd17 	ldw	r2,-12(fp)
   18158:	1000051e 	bne	r2,zero,18170 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1815c:	e0bfff17 	ldw	r2,-4(fp)
   18160:	00c00104 	movi	r3,4
   18164:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18168:	e0bffd17 	ldw	r2,-12(fp)
   1816c:	00009906 	br	183d4 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18170:	e0bffd17 	ldw	r2,-12(fp)
   18174:	10800003 	ldbu	r2,0(r2)
   18178:	10803fcc 	andi	r2,r2,255
   1817c:	108000a0 	cmpeqi	r2,r2,2
   18180:	1000051e 	bne	r2,zero,18198 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18184:	e0bfff17 	ldw	r2,-4(fp)
   18188:	00c00044 	movi	r3,1
   1818c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18190:	e0bffd17 	ldw	r2,-12(fp)
   18194:	00008f06 	br	183d4 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18198:	008000b4 	movhi	r2,2
   1819c:	108fff04 	addi	r2,r2,16380
   181a0:	10800003 	ldbu	r2,0(r2)
   181a4:	10803fcc 	andi	r2,r2,255
   181a8:	10000526 	beq	r2,zero,181c0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   181ac:	e0bfff17 	ldw	r2,-4(fp)
   181b0:	00c003c4 	movi	r3,15
   181b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   181b8:	e0bffd17 	ldw	r2,-12(fp)
   181bc:	00008506 	br	183d4 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181c0:	0005303a 	rdctl	r2,status
   181c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181c8:	e0fff817 	ldw	r3,-32(fp)
   181cc:	00bfff84 	movi	r2,-2
   181d0:	1884703a 	and	r2,r3,r2
   181d4:	1001703a 	wrctl	status,r2
  
  return context;
   181d8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   181dc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   181e0:	e0bffd17 	ldw	r2,-12(fp)
   181e4:	10800283 	ldbu	r2,10(r2)
   181e8:	10803fcc 	andi	r2,r2,255
   181ec:	10000326 	beq	r2,zero,181fc <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   181f0:	00800044 	movi	r2,1
   181f4:	e0bff405 	stb	r2,-48(fp)
   181f8:	00000106 	br	18200 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   181fc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   18200:	e0bffe03 	ldbu	r2,-8(fp)
   18204:	10000326 	beq	r2,zero,18214 <OSQDel+0xf4>
   18208:	10800060 	cmpeqi	r2,r2,1
   1820c:	1000381e 	bne	r2,zero,182f0 <OSQDel+0x1d0>
   18210:	00006506 	br	183a8 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   18214:	e0bff403 	ldbu	r2,-48(fp)
   18218:	1000261e 	bne	r2,zero,182b4 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1821c:	e0bffd17 	ldw	r2,-12(fp)
   18220:	00c00fc4 	movi	r3,63
   18224:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18228:	e0bffd17 	ldw	r2,-12(fp)
   1822c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   18230:	e0bffd17 	ldw	r2,-12(fp)
   18234:	10800117 	ldw	r2,4(r2)
   18238:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   1823c:	008000b4 	movhi	r2,2
   18240:	108ffc04 	addi	r2,r2,16368
   18244:	10c00017 	ldw	r3,0(r2)
   18248:	e0bff717 	ldw	r2,-36(fp)
   1824c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   18250:	008000b4 	movhi	r2,2
   18254:	108ffc04 	addi	r2,r2,16368
   18258:	e0fff717 	ldw	r3,-36(fp)
   1825c:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18260:	e0bffd17 	ldw	r2,-12(fp)
   18264:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18268:	008000b4 	movhi	r2,2
   1826c:	108ffe04 	addi	r2,r2,16376
   18270:	10c00017 	ldw	r3,0(r2)
   18274:	e0bffd17 	ldw	r2,-12(fp)
   18278:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1827c:	e0bffd17 	ldw	r2,-12(fp)
   18280:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18284:	008000b4 	movhi	r2,2
   18288:	108ffe04 	addi	r2,r2,16376
   1828c:	e0fffd17 	ldw	r3,-12(fp)
   18290:	10c00015 	stw	r3,0(r2)
   18294:	e0bff617 	ldw	r2,-40(fp)
   18298:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1829c:	e0bff917 	ldw	r2,-28(fp)
   182a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   182a4:	e0bfff17 	ldw	r2,-4(fp)
   182a8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   182ac:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   182b0:	00004706 	br	183d0 <OSQDel+0x2b0>
   182b4:	e0bff617 	ldw	r2,-40(fp)
   182b8:	e0bffa15 	stw	r2,-24(fp)
   182bc:	e0bffa17 	ldw	r2,-24(fp)
   182c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   182c4:	e0bfff17 	ldw	r2,-4(fp)
   182c8:	00c01244 	movi	r3,73
   182cc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   182d0:	e0bffd17 	ldw	r2,-12(fp)
   182d4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   182d8:	00003d06 	br	183d0 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   182dc:	e13ffd17 	ldw	r4,-12(fp)
   182e0:	000b883a 	mov	r5,zero
   182e4:	01800104 	movi	r6,4
   182e8:	000f883a 	mov	r7,zero
   182ec:	00140400 	call	14040 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   182f0:	e0bffd17 	ldw	r2,-12(fp)
   182f4:	10800283 	ldbu	r2,10(r2)
   182f8:	10803fcc 	andi	r2,r2,255
   182fc:	103ff71e 	bne	r2,zero,182dc <__alt_mem_Flash_flash_data+0xf40182dc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   18300:	e0bffd17 	ldw	r2,-12(fp)
   18304:	00c00fc4 	movi	r3,63
   18308:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1830c:	e0bffd17 	ldw	r2,-12(fp)
   18310:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   18314:	e0bffd17 	ldw	r2,-12(fp)
   18318:	10800117 	ldw	r2,4(r2)
   1831c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   18320:	008000b4 	movhi	r2,2
   18324:	108ffc04 	addi	r2,r2,16368
   18328:	10c00017 	ldw	r3,0(r2)
   1832c:	e0bff717 	ldw	r2,-36(fp)
   18330:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18334:	008000b4 	movhi	r2,2
   18338:	108ffc04 	addi	r2,r2,16368
   1833c:	e0fff717 	ldw	r3,-36(fp)
   18340:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18344:	e0bffd17 	ldw	r2,-12(fp)
   18348:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1834c:	008000b4 	movhi	r2,2
   18350:	108ffe04 	addi	r2,r2,16376
   18354:	10c00017 	ldw	r3,0(r2)
   18358:	e0bffd17 	ldw	r2,-12(fp)
   1835c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18360:	e0bffd17 	ldw	r2,-12(fp)
   18364:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18368:	008000b4 	movhi	r2,2
   1836c:	108ffe04 	addi	r2,r2,16376
   18370:	e0fffd17 	ldw	r3,-12(fp)
   18374:	10c00015 	stw	r3,0(r2)
   18378:	e0bff617 	ldw	r2,-40(fp)
   1837c:	e0bffb15 	stw	r2,-20(fp)
   18380:	e0bffb17 	ldw	r2,-20(fp)
   18384:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18388:	e0bff403 	ldbu	r2,-48(fp)
   1838c:	10800058 	cmpnei	r2,r2,1
   18390:	1000011e 	bne	r2,zero,18398 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18394:	0014a580 	call	14a58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18398:	e0bfff17 	ldw	r2,-4(fp)
   1839c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   183a0:	e03ff515 	stw	zero,-44(fp)
             break;
   183a4:	00000a06 	br	183d0 <OSQDel+0x2b0>
   183a8:	e0bff617 	ldw	r2,-40(fp)
   183ac:	e0bffc15 	stw	r2,-16(fp)
   183b0:	e0bffc17 	ldw	r2,-16(fp)
   183b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   183b8:	e0bfff17 	ldw	r2,-4(fp)
   183bc:	00c001c4 	movi	r3,7
   183c0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   183c4:	e0bffd17 	ldw	r2,-12(fp)
   183c8:	e0bff515 	stw	r2,-44(fp)
             break;
   183cc:	0001883a 	nop
    }
    return (pevent_return);
   183d0:	e0bff517 	ldw	r2,-44(fp)
}
   183d4:	e037883a 	mov	sp,fp
   183d8:	dfc00117 	ldw	ra,4(sp)
   183dc:	df000017 	ldw	fp,0(sp)
   183e0:	dec00204 	addi	sp,sp,8
   183e4:	f800283a 	ret

000183e8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   183e8:	defffa04 	addi	sp,sp,-24
   183ec:	df000515 	stw	fp,20(sp)
   183f0:	df000504 	addi	fp,sp,20
   183f4:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   183f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   183fc:	e0bfff17 	ldw	r2,-4(fp)
   18400:	1000021e 	bne	r2,zero,1840c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   18404:	00800104 	movi	r2,4
   18408:	00002106 	br	18490 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1840c:	e0bfff17 	ldw	r2,-4(fp)
   18410:	10800003 	ldbu	r2,0(r2)
   18414:	10803fcc 	andi	r2,r2,255
   18418:	108000a0 	cmpeqi	r2,r2,2
   1841c:	1000021e 	bne	r2,zero,18428 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   18420:	00800044 	movi	r2,1
   18424:	00001a06 	br	18490 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18428:	0005303a 	rdctl	r2,status
   1842c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18430:	e0fffd17 	ldw	r3,-12(fp)
   18434:	00bfff84 	movi	r2,-2
   18438:	1884703a 	and	r2,r3,r2
   1843c:	1001703a 	wrctl	status,r2
  
  return context;
   18440:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18444:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   18448:	e0bfff17 	ldw	r2,-4(fp)
   1844c:	10800117 	ldw	r2,4(r2)
   18450:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   18454:	e0bffc17 	ldw	r2,-16(fp)
   18458:	10c00117 	ldw	r3,4(r2)
   1845c:	e0bffc17 	ldw	r2,-16(fp)
   18460:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   18464:	e0bffc17 	ldw	r2,-16(fp)
   18468:	10c00117 	ldw	r3,4(r2)
   1846c:	e0bffc17 	ldw	r2,-16(fp)
   18470:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   18474:	e0bffc17 	ldw	r2,-16(fp)
   18478:	1000058d 	sth	zero,22(r2)
   1847c:	e0bffb17 	ldw	r2,-20(fp)
   18480:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18484:	e0bffe17 	ldw	r2,-8(fp)
   18488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1848c:	0005883a 	mov	r2,zero
}
   18490:	e037883a 	mov	sp,fp
   18494:	df000017 	ldw	fp,0(sp)
   18498:	dec00104 	addi	sp,sp,4
   1849c:	f800283a 	ret

000184a0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   184a0:	defff304 	addi	sp,sp,-52
   184a4:	dfc00c15 	stw	ra,48(sp)
   184a8:	df000b15 	stw	fp,44(sp)
   184ac:	df000b04 	addi	fp,sp,44
   184b0:	e13ffd15 	stw	r4,-12(fp)
   184b4:	2805883a 	mov	r2,r5
   184b8:	e1bfff15 	stw	r6,-4(fp)
   184bc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   184c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   184c4:	e0bfff17 	ldw	r2,-4(fp)
   184c8:	1000021e 	bne	r2,zero,184d4 <OSQPend+0x34>
        return ((void *)0);
   184cc:	0005883a 	mov	r2,zero
   184d0:	0000ad06 	br	18788 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   184d4:	e0bffd17 	ldw	r2,-12(fp)
   184d8:	1000051e 	bne	r2,zero,184f0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   184dc:	e0bfff17 	ldw	r2,-4(fp)
   184e0:	00c00104 	movi	r3,4
   184e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   184e8:	0005883a 	mov	r2,zero
   184ec:	0000a606 	br	18788 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   184f0:	e0bffd17 	ldw	r2,-12(fp)
   184f4:	10800003 	ldbu	r2,0(r2)
   184f8:	10803fcc 	andi	r2,r2,255
   184fc:	108000a0 	cmpeqi	r2,r2,2
   18500:	1000051e 	bne	r2,zero,18518 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18504:	e0bfff17 	ldw	r2,-4(fp)
   18508:	00c00044 	movi	r3,1
   1850c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18510:	0005883a 	mov	r2,zero
   18514:	00009c06 	br	18788 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   18518:	008000b4 	movhi	r2,2
   1851c:	108fff04 	addi	r2,r2,16380
   18520:	10800003 	ldbu	r2,0(r2)
   18524:	10803fcc 	andi	r2,r2,255
   18528:	10000526 	beq	r2,zero,18540 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1852c:	e0bfff17 	ldw	r2,-4(fp)
   18530:	00c00084 	movi	r3,2
   18534:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18538:	0005883a 	mov	r2,zero
   1853c:	00009206 	br	18788 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   18540:	008000b4 	movhi	r2,2
   18544:	108ff104 	addi	r2,r2,16324
   18548:	10800003 	ldbu	r2,0(r2)
   1854c:	10803fcc 	andi	r2,r2,255
   18550:	10000526 	beq	r2,zero,18568 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   18554:	e0bfff17 	ldw	r2,-4(fp)
   18558:	00c00344 	movi	r3,13
   1855c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18560:	0005883a 	mov	r2,zero
   18564:	00008806 	br	18788 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18568:	0005303a 	rdctl	r2,status
   1856c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18570:	e0fff817 	ldw	r3,-32(fp)
   18574:	00bfff84 	movi	r2,-2
   18578:	1884703a 	and	r2,r3,r2
   1857c:	1001703a 	wrctl	status,r2
  
  return context;
   18580:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18584:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18588:	e0bffd17 	ldw	r2,-12(fp)
   1858c:	10800117 	ldw	r2,4(r2)
   18590:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18594:	e0bff717 	ldw	r2,-36(fp)
   18598:	1080058b 	ldhu	r2,22(r2)
   1859c:	10bfffcc 	andi	r2,r2,65535
   185a0:	10001e26 	beq	r2,zero,1861c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   185a4:	e0bff717 	ldw	r2,-36(fp)
   185a8:	10800417 	ldw	r2,16(r2)
   185ac:	11000104 	addi	r4,r2,4
   185b0:	e0fff717 	ldw	r3,-36(fp)
   185b4:	19000415 	stw	r4,16(r3)
   185b8:	10800017 	ldw	r2,0(r2)
   185bc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   185c0:	e0bff717 	ldw	r2,-36(fp)
   185c4:	1080058b 	ldhu	r2,22(r2)
   185c8:	10bfffc4 	addi	r2,r2,-1
   185cc:	1007883a 	mov	r3,r2
   185d0:	e0bff717 	ldw	r2,-36(fp)
   185d4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   185d8:	e0bff717 	ldw	r2,-36(fp)
   185dc:	10c00417 	ldw	r3,16(r2)
   185e0:	e0bff717 	ldw	r2,-36(fp)
   185e4:	10800217 	ldw	r2,8(r2)
   185e8:	1880041e 	bne	r3,r2,185fc <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   185ec:	e0bff717 	ldw	r2,-36(fp)
   185f0:	10c00117 	ldw	r3,4(r2)
   185f4:	e0bff717 	ldw	r2,-36(fp)
   185f8:	10c00415 	stw	r3,16(r2)
   185fc:	e0bff617 	ldw	r2,-40(fp)
   18600:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18604:	e0bff917 	ldw	r2,-28(fp)
   18608:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1860c:	e0bfff17 	ldw	r2,-4(fp)
   18610:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   18614:	e0bff517 	ldw	r2,-44(fp)
   18618:	00005b06 	br	18788 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1861c:	008000b4 	movhi	r2,2
   18620:	10900004 	addi	r2,r2,16384
   18624:	10c00017 	ldw	r3,0(r2)
   18628:	008000b4 	movhi	r2,2
   1862c:	10900004 	addi	r2,r2,16384
   18630:	10800017 	ldw	r2,0(r2)
   18634:	10800c03 	ldbu	r2,48(r2)
   18638:	10800114 	ori	r2,r2,4
   1863c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   18640:	008000b4 	movhi	r2,2
   18644:	10900004 	addi	r2,r2,16384
   18648:	10800017 	ldw	r2,0(r2)
   1864c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   18650:	008000b4 	movhi	r2,2
   18654:	10900004 	addi	r2,r2,16384
   18658:	10800017 	ldw	r2,0(r2)
   1865c:	e0fffe0b 	ldhu	r3,-8(fp)
   18660:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   18664:	e13ffd17 	ldw	r4,-12(fp)
   18668:	00141d80 	call	141d8 <OS_EventTaskWait>
   1866c:	e0bff617 	ldw	r2,-40(fp)
   18670:	e0bffa15 	stw	r2,-24(fp)
   18674:	e0bffa17 	ldw	r2,-24(fp)
   18678:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1867c:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18680:	0005303a 	rdctl	r2,status
   18684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18688:	e0fffb17 	ldw	r3,-20(fp)
   1868c:	00bfff84 	movi	r2,-2
   18690:	1884703a 	and	r2,r3,r2
   18694:	1001703a 	wrctl	status,r2
  
  return context;
   18698:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1869c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   186a0:	008000b4 	movhi	r2,2
   186a4:	10900004 	addi	r2,r2,16384
   186a8:	10800017 	ldw	r2,0(r2)
   186ac:	10800c43 	ldbu	r2,49(r2)
   186b0:	10803fcc 	andi	r2,r2,255
   186b4:	10000326 	beq	r2,zero,186c4 <OSQPend+0x224>
   186b8:	108000a0 	cmpeqi	r2,r2,2
   186bc:	1000091e 	bne	r2,zero,186e4 <OSQPend+0x244>
   186c0:	00000d06 	br	186f8 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   186c4:	008000b4 	movhi	r2,2
   186c8:	10900004 	addi	r2,r2,16384
   186cc:	10800017 	ldw	r2,0(r2)
   186d0:	10800917 	ldw	r2,36(r2)
   186d4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   186d8:	e0bfff17 	ldw	r2,-4(fp)
   186dc:	10000005 	stb	zero,0(r2)
             break;
   186e0:	00001006 	br	18724 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   186e4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   186e8:	e0bfff17 	ldw	r2,-4(fp)
   186ec:	00c00384 	movi	r3,14
   186f0:	10c00005 	stb	r3,0(r2)
             break;
   186f4:	00000b06 	br	18724 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   186f8:	008000b4 	movhi	r2,2
   186fc:	10900004 	addi	r2,r2,16384
   18700:	10800017 	ldw	r2,0(r2)
   18704:	1009883a 	mov	r4,r2
   18708:	e17ffd17 	ldw	r5,-12(fp)
   1870c:	00144300 	call	14430 <OS_EventTaskRemove>
             pmsg = (void *)0;
   18710:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18714:	e0bfff17 	ldw	r2,-4(fp)
   18718:	00c00284 	movi	r3,10
   1871c:	10c00005 	stb	r3,0(r2)
             break;
   18720:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18724:	008000b4 	movhi	r2,2
   18728:	10900004 	addi	r2,r2,16384
   1872c:	10800017 	ldw	r2,0(r2)
   18730:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   18734:	008000b4 	movhi	r2,2
   18738:	10900004 	addi	r2,r2,16384
   1873c:	10800017 	ldw	r2,0(r2)
   18740:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   18744:	008000b4 	movhi	r2,2
   18748:	10900004 	addi	r2,r2,16384
   1874c:	10800017 	ldw	r2,0(r2)
   18750:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18754:	008000b4 	movhi	r2,2
   18758:	10900004 	addi	r2,r2,16384
   1875c:	10800017 	ldw	r2,0(r2)
   18760:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   18764:	008000b4 	movhi	r2,2
   18768:	10900004 	addi	r2,r2,16384
   1876c:	10800017 	ldw	r2,0(r2)
   18770:	10000915 	stw	zero,36(r2)
   18774:	e0bff617 	ldw	r2,-40(fp)
   18778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1877c:	e0bffc17 	ldw	r2,-16(fp)
   18780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   18784:	e0bff517 	ldw	r2,-44(fp)
}
   18788:	e037883a 	mov	sp,fp
   1878c:	dfc00117 	ldw	ra,4(sp)
   18790:	df000017 	ldw	fp,0(sp)
   18794:	dec00204 	addi	sp,sp,8
   18798:	f800283a 	ret

0001879c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1879c:	defff604 	addi	sp,sp,-40
   187a0:	dfc00915 	stw	ra,36(sp)
   187a4:	df000815 	stw	fp,32(sp)
   187a8:	df000804 	addi	fp,sp,32
   187ac:	e13ffd15 	stw	r4,-12(fp)
   187b0:	2805883a 	mov	r2,r5
   187b4:	e1bfff15 	stw	r6,-4(fp)
   187b8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   187bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   187c0:	e0bfff17 	ldw	r2,-4(fp)
   187c4:	1000021e 	bne	r2,zero,187d0 <OSQPendAbort+0x34>
        return (0);
   187c8:	0005883a 	mov	r2,zero
   187cc:	00004906 	br	188f4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   187d0:	e0bffd17 	ldw	r2,-12(fp)
   187d4:	1000051e 	bne	r2,zero,187ec <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   187d8:	e0bfff17 	ldw	r2,-4(fp)
   187dc:	00c00104 	movi	r3,4
   187e0:	10c00005 	stb	r3,0(r2)
        return (0);
   187e4:	0005883a 	mov	r2,zero
   187e8:	00004206 	br	188f4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   187ec:	e0bffd17 	ldw	r2,-12(fp)
   187f0:	10800003 	ldbu	r2,0(r2)
   187f4:	10803fcc 	andi	r2,r2,255
   187f8:	108000a0 	cmpeqi	r2,r2,2
   187fc:	1000051e 	bne	r2,zero,18814 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18800:	e0bfff17 	ldw	r2,-4(fp)
   18804:	00c00044 	movi	r3,1
   18808:	10c00005 	stb	r3,0(r2)
        return (0);
   1880c:	0005883a 	mov	r2,zero
   18810:	00003806 	br	188f4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18814:	0005303a 	rdctl	r2,status
   18818:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1881c:	e0fffa17 	ldw	r3,-24(fp)
   18820:	00bfff84 	movi	r2,-2
   18824:	1884703a 	and	r2,r3,r2
   18828:	1001703a 	wrctl	status,r2
  
  return context;
   1882c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18830:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   18834:	e0bffd17 	ldw	r2,-12(fp)
   18838:	10800283 	ldbu	r2,10(r2)
   1883c:	10803fcc 	andi	r2,r2,255
   18840:	10002526 	beq	r2,zero,188d8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   18844:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18848:	e0bffe03 	ldbu	r2,-8(fp)
   1884c:	10800060 	cmpeqi	r2,r2,1
   18850:	10000e26 	beq	r2,zero,1888c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18854:	00000806 	br	18878 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18858:	e13ffd17 	ldw	r4,-12(fp)
   1885c:	000b883a 	mov	r5,zero
   18860:	01800104 	movi	r6,4
   18864:	01c00084 	movi	r7,2
   18868:	00140400 	call	14040 <OS_EventTaskRdy>
                     nbr_tasks++;
   1886c:	e0bff803 	ldbu	r2,-32(fp)
   18870:	10800044 	addi	r2,r2,1
   18874:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18878:	e0bffd17 	ldw	r2,-12(fp)
   1887c:	10800283 	ldbu	r2,10(r2)
   18880:	10803fcc 	andi	r2,r2,255
   18884:	103ff41e 	bne	r2,zero,18858 <__alt_mem_Flash_flash_data+0xf4018858>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18888:	00000906 	br	188b0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1888c:	e13ffd17 	ldw	r4,-12(fp)
   18890:	000b883a 	mov	r5,zero
   18894:	01800104 	movi	r6,4
   18898:	01c00084 	movi	r7,2
   1889c:	00140400 	call	14040 <OS_EventTaskRdy>
                 nbr_tasks++;
   188a0:	e0bff803 	ldbu	r2,-32(fp)
   188a4:	10800044 	addi	r2,r2,1
   188a8:	e0bff805 	stb	r2,-32(fp)
                 break;
   188ac:	0001883a 	nop
   188b0:	e0bff917 	ldw	r2,-28(fp)
   188b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188b8:	e0bffb17 	ldw	r2,-20(fp)
   188bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   188c0:	0014a580 	call	14a58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   188c4:	e0bfff17 	ldw	r2,-4(fp)
   188c8:	00c00384 	movi	r3,14
   188cc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   188d0:	e0bff803 	ldbu	r2,-32(fp)
   188d4:	00000706 	br	188f4 <OSQPendAbort+0x158>
   188d8:	e0bff917 	ldw	r2,-28(fp)
   188dc:	e0bffc15 	stw	r2,-16(fp)
   188e0:	e0bffc17 	ldw	r2,-16(fp)
   188e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   188e8:	e0bfff17 	ldw	r2,-4(fp)
   188ec:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   188f0:	0005883a 	mov	r2,zero
}
   188f4:	e037883a 	mov	sp,fp
   188f8:	dfc00117 	ldw	ra,4(sp)
   188fc:	df000017 	ldw	fp,0(sp)
   18900:	dec00204 	addi	sp,sp,8
   18904:	f800283a 	ret

00018908 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   18908:	defff604 	addi	sp,sp,-40
   1890c:	dfc00915 	stw	ra,36(sp)
   18910:	df000815 	stw	fp,32(sp)
   18914:	df000804 	addi	fp,sp,32
   18918:	e13ffe15 	stw	r4,-8(fp)
   1891c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18920:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18924:	e0bffe17 	ldw	r2,-8(fp)
   18928:	1000021e 	bne	r2,zero,18934 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1892c:	00800104 	movi	r2,4
   18930:	00004a06 	br	18a5c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18934:	e0bffe17 	ldw	r2,-8(fp)
   18938:	10800003 	ldbu	r2,0(r2)
   1893c:	10803fcc 	andi	r2,r2,255
   18940:	108000a0 	cmpeqi	r2,r2,2
   18944:	1000021e 	bne	r2,zero,18950 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   18948:	00800044 	movi	r2,1
   1894c:	00004306 	br	18a5c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18950:	0005303a 	rdctl	r2,status
   18954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18958:	e0fffa17 	ldw	r3,-24(fp)
   1895c:	00bfff84 	movi	r2,-2
   18960:	1884703a 	and	r2,r3,r2
   18964:	1001703a 	wrctl	status,r2
  
  return context;
   18968:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1896c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   18970:	e0bffe17 	ldw	r2,-8(fp)
   18974:	10800283 	ldbu	r2,10(r2)
   18978:	10803fcc 	andi	r2,r2,255
   1897c:	10000c26 	beq	r2,zero,189b0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18980:	e13ffe17 	ldw	r4,-8(fp)
   18984:	e17fff17 	ldw	r5,-4(fp)
   18988:	01800104 	movi	r6,4
   1898c:	000f883a 	mov	r7,zero
   18990:	00140400 	call	14040 <OS_EventTaskRdy>
   18994:	e0bff817 	ldw	r2,-32(fp)
   18998:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1899c:	e0bffb17 	ldw	r2,-20(fp)
   189a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   189a4:	0014a580 	call	14a58 <OS_Sched>
        return (OS_ERR_NONE);
   189a8:	0005883a 	mov	r2,zero
   189ac:	00002b06 	br	18a5c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   189b0:	e0bffe17 	ldw	r2,-8(fp)
   189b4:	10800117 	ldw	r2,4(r2)
   189b8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   189bc:	e0bff917 	ldw	r2,-28(fp)
   189c0:	10c0058b 	ldhu	r3,22(r2)
   189c4:	e0bff917 	ldw	r2,-28(fp)
   189c8:	1080050b 	ldhu	r2,20(r2)
   189cc:	18ffffcc 	andi	r3,r3,65535
   189d0:	10bfffcc 	andi	r2,r2,65535
   189d4:	18800636 	bltu	r3,r2,189f0 <OSQPost+0xe8>
   189d8:	e0bff817 	ldw	r2,-32(fp)
   189dc:	e0bffc15 	stw	r2,-16(fp)
   189e0:	e0bffc17 	ldw	r2,-16(fp)
   189e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   189e8:	00800784 	movi	r2,30
   189ec:	00001b06 	br	18a5c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   189f0:	e0bff917 	ldw	r2,-28(fp)
   189f4:	10800317 	ldw	r2,12(r2)
   189f8:	11000104 	addi	r4,r2,4
   189fc:	e0fff917 	ldw	r3,-28(fp)
   18a00:	19000315 	stw	r4,12(r3)
   18a04:	e0ffff17 	ldw	r3,-4(fp)
   18a08:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   18a0c:	e0bff917 	ldw	r2,-28(fp)
   18a10:	1080058b 	ldhu	r2,22(r2)
   18a14:	10800044 	addi	r2,r2,1
   18a18:	1007883a 	mov	r3,r2
   18a1c:	e0bff917 	ldw	r2,-28(fp)
   18a20:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   18a24:	e0bff917 	ldw	r2,-28(fp)
   18a28:	10c00317 	ldw	r3,12(r2)
   18a2c:	e0bff917 	ldw	r2,-28(fp)
   18a30:	10800217 	ldw	r2,8(r2)
   18a34:	1880041e 	bne	r3,r2,18a48 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   18a38:	e0bff917 	ldw	r2,-28(fp)
   18a3c:	10c00117 	ldw	r3,4(r2)
   18a40:	e0bff917 	ldw	r2,-28(fp)
   18a44:	10c00315 	stw	r3,12(r2)
   18a48:	e0bff817 	ldw	r2,-32(fp)
   18a4c:	e0bffd15 	stw	r2,-12(fp)
   18a50:	e0bffd17 	ldw	r2,-12(fp)
   18a54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18a58:	0005883a 	mov	r2,zero
}
   18a5c:	e037883a 	mov	sp,fp
   18a60:	dfc00117 	ldw	ra,4(sp)
   18a64:	df000017 	ldw	fp,0(sp)
   18a68:	dec00204 	addi	sp,sp,8
   18a6c:	f800283a 	ret

00018a70 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   18a70:	defff604 	addi	sp,sp,-40
   18a74:	dfc00915 	stw	ra,36(sp)
   18a78:	df000815 	stw	fp,32(sp)
   18a7c:	df000804 	addi	fp,sp,32
   18a80:	e13ffe15 	stw	r4,-8(fp)
   18a84:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18a88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18a8c:	e0bffe17 	ldw	r2,-8(fp)
   18a90:	1000021e 	bne	r2,zero,18a9c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18a94:	00800104 	movi	r2,4
   18a98:	00004c06 	br	18bcc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18a9c:	e0bffe17 	ldw	r2,-8(fp)
   18aa0:	10800003 	ldbu	r2,0(r2)
   18aa4:	10803fcc 	andi	r2,r2,255
   18aa8:	108000a0 	cmpeqi	r2,r2,2
   18aac:	1000021e 	bne	r2,zero,18ab8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   18ab0:	00800044 	movi	r2,1
   18ab4:	00004506 	br	18bcc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ab8:	0005303a 	rdctl	r2,status
   18abc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ac0:	e0fffa17 	ldw	r3,-24(fp)
   18ac4:	00bfff84 	movi	r2,-2
   18ac8:	1884703a 	and	r2,r3,r2
   18acc:	1001703a 	wrctl	status,r2
  
  return context;
   18ad0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18ad4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   18ad8:	e0bffe17 	ldw	r2,-8(fp)
   18adc:	10800283 	ldbu	r2,10(r2)
   18ae0:	10803fcc 	andi	r2,r2,255
   18ae4:	10000c26 	beq	r2,zero,18b18 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18ae8:	e13ffe17 	ldw	r4,-8(fp)
   18aec:	e17fff17 	ldw	r5,-4(fp)
   18af0:	01800104 	movi	r6,4
   18af4:	000f883a 	mov	r7,zero
   18af8:	00140400 	call	14040 <OS_EventTaskRdy>
   18afc:	e0bff817 	ldw	r2,-32(fp)
   18b00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b04:	e0bffb17 	ldw	r2,-20(fp)
   18b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18b0c:	0014a580 	call	14a58 <OS_Sched>
        return (OS_ERR_NONE);
   18b10:	0005883a 	mov	r2,zero
   18b14:	00002d06 	br	18bcc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18b18:	e0bffe17 	ldw	r2,-8(fp)
   18b1c:	10800117 	ldw	r2,4(r2)
   18b20:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18b24:	e0bff917 	ldw	r2,-28(fp)
   18b28:	10c0058b 	ldhu	r3,22(r2)
   18b2c:	e0bff917 	ldw	r2,-28(fp)
   18b30:	1080050b 	ldhu	r2,20(r2)
   18b34:	18ffffcc 	andi	r3,r3,65535
   18b38:	10bfffcc 	andi	r2,r2,65535
   18b3c:	18800636 	bltu	r3,r2,18b58 <OSQPostFront+0xe8>
   18b40:	e0bff817 	ldw	r2,-32(fp)
   18b44:	e0bffc15 	stw	r2,-16(fp)
   18b48:	e0bffc17 	ldw	r2,-16(fp)
   18b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18b50:	00800784 	movi	r2,30
   18b54:	00001d06 	br	18bcc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   18b58:	e0bff917 	ldw	r2,-28(fp)
   18b5c:	10c00417 	ldw	r3,16(r2)
   18b60:	e0bff917 	ldw	r2,-28(fp)
   18b64:	10800117 	ldw	r2,4(r2)
   18b68:	1880041e 	bne	r3,r2,18b7c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   18b6c:	e0bff917 	ldw	r2,-28(fp)
   18b70:	10c00217 	ldw	r3,8(r2)
   18b74:	e0bff917 	ldw	r2,-28(fp)
   18b78:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   18b7c:	e0bff917 	ldw	r2,-28(fp)
   18b80:	10800417 	ldw	r2,16(r2)
   18b84:	10ffff04 	addi	r3,r2,-4
   18b88:	e0bff917 	ldw	r2,-28(fp)
   18b8c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   18b90:	e0bff917 	ldw	r2,-28(fp)
   18b94:	10800417 	ldw	r2,16(r2)
   18b98:	e0ffff17 	ldw	r3,-4(fp)
   18b9c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18ba0:	e0bff917 	ldw	r2,-28(fp)
   18ba4:	1080058b 	ldhu	r2,22(r2)
   18ba8:	10800044 	addi	r2,r2,1
   18bac:	1007883a 	mov	r3,r2
   18bb0:	e0bff917 	ldw	r2,-28(fp)
   18bb4:	10c0058d 	sth	r3,22(r2)
   18bb8:	e0bff817 	ldw	r2,-32(fp)
   18bbc:	e0bffd15 	stw	r2,-12(fp)
   18bc0:	e0bffd17 	ldw	r2,-12(fp)
   18bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18bc8:	0005883a 	mov	r2,zero
}
   18bcc:	e037883a 	mov	sp,fp
   18bd0:	dfc00117 	ldw	ra,4(sp)
   18bd4:	df000017 	ldw	fp,0(sp)
   18bd8:	dec00204 	addi	sp,sp,8
   18bdc:	f800283a 	ret

00018be0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   18be0:	defff504 	addi	sp,sp,-44
   18be4:	dfc00a15 	stw	ra,40(sp)
   18be8:	df000915 	stw	fp,36(sp)
   18bec:	df000904 	addi	fp,sp,36
   18bf0:	e13ffd15 	stw	r4,-12(fp)
   18bf4:	e17ffe15 	stw	r5,-8(fp)
   18bf8:	3005883a 	mov	r2,r6
   18bfc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18c00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18c04:	e0bffd17 	ldw	r2,-12(fp)
   18c08:	1000021e 	bne	r2,zero,18c14 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18c0c:	00800104 	movi	r2,4
   18c10:	00007106 	br	18dd8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18c14:	e0bffd17 	ldw	r2,-12(fp)
   18c18:	10800003 	ldbu	r2,0(r2)
   18c1c:	10803fcc 	andi	r2,r2,255
   18c20:	108000a0 	cmpeqi	r2,r2,2
   18c24:	1000021e 	bne	r2,zero,18c30 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18c28:	00800044 	movi	r2,1
   18c2c:	00006a06 	br	18dd8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c30:	0005303a 	rdctl	r2,status
   18c34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c38:	e0fff917 	ldw	r3,-28(fp)
   18c3c:	00bfff84 	movi	r2,-2
   18c40:	1884703a 	and	r2,r3,r2
   18c44:	1001703a 	wrctl	status,r2
  
  return context;
   18c48:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18c4c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   18c50:	e0bffd17 	ldw	r2,-12(fp)
   18c54:	10800283 	ldbu	r2,10(r2)
   18c58:	10803fcc 	andi	r2,r2,255
   18c5c:	10001d26 	beq	r2,zero,18cd4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   18c60:	e0bfff03 	ldbu	r2,-4(fp)
   18c64:	1080004c 	andi	r2,r2,1
   18c68:	10000b26 	beq	r2,zero,18c98 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   18c6c:	00000506 	br	18c84 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18c70:	e13ffd17 	ldw	r4,-12(fp)
   18c74:	e17ffe17 	ldw	r5,-8(fp)
   18c78:	01800104 	movi	r6,4
   18c7c:	000f883a 	mov	r7,zero
   18c80:	00140400 	call	14040 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   18c84:	e0bffd17 	ldw	r2,-12(fp)
   18c88:	10800283 	ldbu	r2,10(r2)
   18c8c:	10803fcc 	andi	r2,r2,255
   18c90:	103ff71e 	bne	r2,zero,18c70 <__alt_mem_Flash_flash_data+0xf4018c70>
   18c94:	00000506 	br	18cac <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18c98:	e13ffd17 	ldw	r4,-12(fp)
   18c9c:	e17ffe17 	ldw	r5,-8(fp)
   18ca0:	01800104 	movi	r6,4
   18ca4:	000f883a 	mov	r7,zero
   18ca8:	00140400 	call	14040 <OS_EventTaskRdy>
   18cac:	e0bff717 	ldw	r2,-36(fp)
   18cb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cb4:	e0bffa17 	ldw	r2,-24(fp)
   18cb8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18cbc:	e0bfff03 	ldbu	r2,-4(fp)
   18cc0:	1080010c 	andi	r2,r2,4
   18cc4:	1000011e 	bne	r2,zero,18ccc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   18cc8:	0014a580 	call	14a58 <OS_Sched>
        }
        return (OS_ERR_NONE);
   18ccc:	0005883a 	mov	r2,zero
   18cd0:	00004106 	br	18dd8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18cd4:	e0bffd17 	ldw	r2,-12(fp)
   18cd8:	10800117 	ldw	r2,4(r2)
   18cdc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18ce0:	e0bff817 	ldw	r2,-32(fp)
   18ce4:	10c0058b 	ldhu	r3,22(r2)
   18ce8:	e0bff817 	ldw	r2,-32(fp)
   18cec:	1080050b 	ldhu	r2,20(r2)
   18cf0:	18ffffcc 	andi	r3,r3,65535
   18cf4:	10bfffcc 	andi	r2,r2,65535
   18cf8:	18800636 	bltu	r3,r2,18d14 <OSQPostOpt+0x134>
   18cfc:	e0bff717 	ldw	r2,-36(fp)
   18d00:	e0bffb15 	stw	r2,-20(fp)
   18d04:	e0bffb17 	ldw	r2,-20(fp)
   18d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18d0c:	00800784 	movi	r2,30
   18d10:	00003106 	br	18dd8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18d14:	e0bfff03 	ldbu	r2,-4(fp)
   18d18:	1080008c 	andi	r2,r2,2
   18d1c:	10001326 	beq	r2,zero,18d6c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   18d20:	e0bff817 	ldw	r2,-32(fp)
   18d24:	10c00417 	ldw	r3,16(r2)
   18d28:	e0bff817 	ldw	r2,-32(fp)
   18d2c:	10800117 	ldw	r2,4(r2)
   18d30:	1880041e 	bne	r3,r2,18d44 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18d34:	e0bff817 	ldw	r2,-32(fp)
   18d38:	10c00217 	ldw	r3,8(r2)
   18d3c:	e0bff817 	ldw	r2,-32(fp)
   18d40:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18d44:	e0bff817 	ldw	r2,-32(fp)
   18d48:	10800417 	ldw	r2,16(r2)
   18d4c:	10ffff04 	addi	r3,r2,-4
   18d50:	e0bff817 	ldw	r2,-32(fp)
   18d54:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18d58:	e0bff817 	ldw	r2,-32(fp)
   18d5c:	10800417 	ldw	r2,16(r2)
   18d60:	e0fffe17 	ldw	r3,-8(fp)
   18d64:	10c00015 	stw	r3,0(r2)
   18d68:	00001006 	br	18dac <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   18d6c:	e0bff817 	ldw	r2,-32(fp)
   18d70:	10800317 	ldw	r2,12(r2)
   18d74:	11000104 	addi	r4,r2,4
   18d78:	e0fff817 	ldw	r3,-32(fp)
   18d7c:	19000315 	stw	r4,12(r3)
   18d80:	e0fffe17 	ldw	r3,-8(fp)
   18d84:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   18d88:	e0bff817 	ldw	r2,-32(fp)
   18d8c:	10c00317 	ldw	r3,12(r2)
   18d90:	e0bff817 	ldw	r2,-32(fp)
   18d94:	10800217 	ldw	r2,8(r2)
   18d98:	1880041e 	bne	r3,r2,18dac <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   18d9c:	e0bff817 	ldw	r2,-32(fp)
   18da0:	10c00117 	ldw	r3,4(r2)
   18da4:	e0bff817 	ldw	r2,-32(fp)
   18da8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18dac:	e0bff817 	ldw	r2,-32(fp)
   18db0:	1080058b 	ldhu	r2,22(r2)
   18db4:	10800044 	addi	r2,r2,1
   18db8:	1007883a 	mov	r3,r2
   18dbc:	e0bff817 	ldw	r2,-32(fp)
   18dc0:	10c0058d 	sth	r3,22(r2)
   18dc4:	e0bff717 	ldw	r2,-36(fp)
   18dc8:	e0bffc15 	stw	r2,-16(fp)
   18dcc:	e0bffc17 	ldw	r2,-16(fp)
   18dd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18dd4:	0005883a 	mov	r2,zero
}
   18dd8:	e037883a 	mov	sp,fp
   18ddc:	dfc00117 	ldw	ra,4(sp)
   18de0:	df000017 	ldw	fp,0(sp)
   18de4:	dec00204 	addi	sp,sp,8
   18de8:	f800283a 	ret

00018dec <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18dec:	defff604 	addi	sp,sp,-40
   18df0:	df000915 	stw	fp,36(sp)
   18df4:	df000904 	addi	fp,sp,36
   18df8:	e13ffe15 	stw	r4,-8(fp)
   18dfc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18e00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18e04:	e0bffe17 	ldw	r2,-8(fp)
   18e08:	1000021e 	bne	r2,zero,18e14 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18e0c:	00800104 	movi	r2,4
   18e10:	00004906 	br	18f38 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18e14:	e0bfff17 	ldw	r2,-4(fp)
   18e18:	1000021e 	bne	r2,zero,18e24 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18e1c:	00800244 	movi	r2,9
   18e20:	00004506 	br	18f38 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18e24:	e0bffe17 	ldw	r2,-8(fp)
   18e28:	10800003 	ldbu	r2,0(r2)
   18e2c:	10803fcc 	andi	r2,r2,255
   18e30:	108000a0 	cmpeqi	r2,r2,2
   18e34:	1000021e 	bne	r2,zero,18e40 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18e38:	00800044 	movi	r2,1
   18e3c:	00003e06 	br	18f38 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e40:	0005303a 	rdctl	r2,status
   18e44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e48:	e0fffc17 	ldw	r3,-16(fp)
   18e4c:	00bfff84 	movi	r2,-2
   18e50:	1884703a 	and	r2,r3,r2
   18e54:	1001703a 	wrctl	status,r2
  
  return context;
   18e58:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18e5c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   18e60:	e0bffe17 	ldw	r2,-8(fp)
   18e64:	10c00283 	ldbu	r3,10(r2)
   18e68:	e0bfff17 	ldw	r2,-4(fp)
   18e6c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   18e70:	e0bffe17 	ldw	r2,-8(fp)
   18e74:	108002c4 	addi	r2,r2,11
   18e78:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18e7c:	e0bfff17 	ldw	r2,-4(fp)
   18e80:	10800204 	addi	r2,r2,8
   18e84:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18e88:	e03ff705 	stb	zero,-36(fp)
   18e8c:	00000b06 	br	18ebc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   18e90:	e0bff917 	ldw	r2,-28(fp)
   18e94:	10c00044 	addi	r3,r2,1
   18e98:	e0fff915 	stw	r3,-28(fp)
   18e9c:	e0fff817 	ldw	r3,-32(fp)
   18ea0:	19000044 	addi	r4,r3,1
   18ea4:	e13ff815 	stw	r4,-32(fp)
   18ea8:	18c00003 	ldbu	r3,0(r3)
   18eac:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18eb0:	e0bff703 	ldbu	r2,-36(fp)
   18eb4:	10800044 	addi	r2,r2,1
   18eb8:	e0bff705 	stb	r2,-36(fp)
   18ebc:	e0bff703 	ldbu	r2,-36(fp)
   18ec0:	108000f0 	cmpltui	r2,r2,3
   18ec4:	103ff21e 	bne	r2,zero,18e90 <__alt_mem_Flash_flash_data+0xf4018e90>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   18ec8:	e0bffe17 	ldw	r2,-8(fp)
   18ecc:	10800117 	ldw	r2,4(r2)
   18ed0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   18ed4:	e0bffb17 	ldw	r2,-20(fp)
   18ed8:	1080058b 	ldhu	r2,22(r2)
   18edc:	10bfffcc 	andi	r2,r2,65535
   18ee0:	10000626 	beq	r2,zero,18efc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   18ee4:	e0bffb17 	ldw	r2,-20(fp)
   18ee8:	10800417 	ldw	r2,16(r2)
   18eec:	10c00017 	ldw	r3,0(r2)
   18ef0:	e0bfff17 	ldw	r2,-4(fp)
   18ef4:	10c00015 	stw	r3,0(r2)
   18ef8:	00000206 	br	18f04 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   18efc:	e0bfff17 	ldw	r2,-4(fp)
   18f00:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   18f04:	e0bffb17 	ldw	r2,-20(fp)
   18f08:	10c0058b 	ldhu	r3,22(r2)
   18f0c:	e0bfff17 	ldw	r2,-4(fp)
   18f10:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   18f14:	e0bffb17 	ldw	r2,-20(fp)
   18f18:	10c0050b 	ldhu	r3,20(r2)
   18f1c:	e0bfff17 	ldw	r2,-4(fp)
   18f20:	10c0018d 	sth	r3,6(r2)
   18f24:	e0bffa17 	ldw	r2,-24(fp)
   18f28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f2c:	e0bffd17 	ldw	r2,-12(fp)
   18f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18f34:	0005883a 	mov	r2,zero
}
   18f38:	e037883a 	mov	sp,fp
   18f3c:	df000017 	ldw	fp,0(sp)
   18f40:	dec00104 	addi	sp,sp,4
   18f44:	f800283a 	ret

00018f48 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18f48:	defffb04 	addi	sp,sp,-20
   18f4c:	dfc00415 	stw	ra,16(sp)
   18f50:	df000315 	stw	fp,12(sp)
   18f54:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18f58:	01000134 	movhi	r4,4
   18f5c:	211e1604 	addi	r4,r4,30808
   18f60:	01407804 	movi	r5,480
   18f64:	00149a40 	call	149a4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18f68:	00800134 	movhi	r2,4
   18f6c:	109e1604 	addi	r2,r2,30808
   18f70:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18f74:	00800134 	movhi	r2,4
   18f78:	109e1c04 	addi	r2,r2,30832
   18f7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18f80:	e03ffd0d 	sth	zero,-12(fp)
   18f84:	00000c06 	br	18fb8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   18f88:	e0bffe17 	ldw	r2,-8(fp)
   18f8c:	e0ffff17 	ldw	r3,-4(fp)
   18f90:	10c00015 	stw	r3,0(r2)
        pq1++;
   18f94:	e0bffe17 	ldw	r2,-8(fp)
   18f98:	10800604 	addi	r2,r2,24
   18f9c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   18fa0:	e0bfff17 	ldw	r2,-4(fp)
   18fa4:	10800604 	addi	r2,r2,24
   18fa8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18fac:	e0bffd0b 	ldhu	r2,-12(fp)
   18fb0:	10800044 	addi	r2,r2,1
   18fb4:	e0bffd0d 	sth	r2,-12(fp)
   18fb8:	e0bffd0b 	ldhu	r2,-12(fp)
   18fbc:	108004f0 	cmpltui	r2,r2,19
   18fc0:	103ff11e 	bne	r2,zero,18f88 <__alt_mem_Flash_flash_data+0xf4018f88>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   18fc4:	e0bffe17 	ldw	r2,-8(fp)
   18fc8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   18fcc:	008000b4 	movhi	r2,2
   18fd0:	108ffc04 	addi	r2,r2,16368
   18fd4:	00c00134 	movhi	r3,4
   18fd8:	18de1604 	addi	r3,r3,30808
   18fdc:	10c00015 	stw	r3,0(r2)
#endif
}
   18fe0:	e037883a 	mov	sp,fp
   18fe4:	dfc00117 	ldw	ra,4(sp)
   18fe8:	df000017 	ldw	fp,0(sp)
   18fec:	dec00204 	addi	sp,sp,8
   18ff0:	f800283a 	ret

00018ff4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   18ff4:	defffa04 	addi	sp,sp,-24
   18ff8:	df000515 	stw	fp,20(sp)
   18ffc:	df000504 	addi	fp,sp,20
   19000:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19004:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19008:	e0bfff17 	ldw	r2,-4(fp)
   1900c:	1000021e 	bne	r2,zero,19018 <OSSemAccept+0x24>
        return (0);
   19010:	0005883a 	mov	r2,zero
   19014:	00001f06 	br	19094 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19018:	e0bfff17 	ldw	r2,-4(fp)
   1901c:	10800003 	ldbu	r2,0(r2)
   19020:	10803fcc 	andi	r2,r2,255
   19024:	108000e0 	cmpeqi	r2,r2,3
   19028:	1000021e 	bne	r2,zero,19034 <OSSemAccept+0x40>
        return (0);
   1902c:	0005883a 	mov	r2,zero
   19030:	00001806 	br	19094 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19034:	0005303a 	rdctl	r2,status
   19038:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1903c:	e0fffd17 	ldw	r3,-12(fp)
   19040:	00bfff84 	movi	r2,-2
   19044:	1884703a 	and	r2,r3,r2
   19048:	1001703a 	wrctl	status,r2
  
  return context;
   1904c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19050:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   19054:	e0bfff17 	ldw	r2,-4(fp)
   19058:	1080020b 	ldhu	r2,8(r2)
   1905c:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   19060:	e0bffc0b 	ldhu	r2,-16(fp)
   19064:	10000626 	beq	r2,zero,19080 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   19068:	e0bfff17 	ldw	r2,-4(fp)
   1906c:	1080020b 	ldhu	r2,8(r2)
   19070:	10bfffc4 	addi	r2,r2,-1
   19074:	1007883a 	mov	r3,r2
   19078:	e0bfff17 	ldw	r2,-4(fp)
   1907c:	10c0020d 	sth	r3,8(r2)
   19080:	e0bffb17 	ldw	r2,-20(fp)
   19084:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19088:	e0bffe17 	ldw	r2,-8(fp)
   1908c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   19090:	e0bffc0b 	ldhu	r2,-16(fp)
}
   19094:	e037883a 	mov	sp,fp
   19098:	df000017 	ldw	fp,0(sp)
   1909c:	dec00104 	addi	sp,sp,4
   190a0:	f800283a 	ret

000190a4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   190a4:	defff904 	addi	sp,sp,-28
   190a8:	dfc00615 	stw	ra,24(sp)
   190ac:	df000515 	stw	fp,20(sp)
   190b0:	df000504 	addi	fp,sp,20
   190b4:	2005883a 	mov	r2,r4
   190b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   190bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   190c0:	008000b4 	movhi	r2,2
   190c4:	108fff04 	addi	r2,r2,16380
   190c8:	10800003 	ldbu	r2,0(r2)
   190cc:	10803fcc 	andi	r2,r2,255
   190d0:	10000226 	beq	r2,zero,190dc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   190d4:	0005883a 	mov	r2,zero
   190d8:	00002d06 	br	19190 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   190dc:	0005303a 	rdctl	r2,status
   190e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   190e4:	e0fffd17 	ldw	r3,-12(fp)
   190e8:	00bfff84 	movi	r2,-2
   190ec:	1884703a 	and	r2,r3,r2
   190f0:	1001703a 	wrctl	status,r2
  
  return context;
   190f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   190f8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   190fc:	008000b4 	movhi	r2,2
   19100:	108ffe04 	addi	r2,r2,16376
   19104:	10800017 	ldw	r2,0(r2)
   19108:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1910c:	008000b4 	movhi	r2,2
   19110:	108ffe04 	addi	r2,r2,16376
   19114:	10800017 	ldw	r2,0(r2)
   19118:	10000726 	beq	r2,zero,19138 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1911c:	008000b4 	movhi	r2,2
   19120:	108ffe04 	addi	r2,r2,16376
   19124:	10800017 	ldw	r2,0(r2)
   19128:	10c00117 	ldw	r3,4(r2)
   1912c:	008000b4 	movhi	r2,2
   19130:	108ffe04 	addi	r2,r2,16376
   19134:	10c00015 	stw	r3,0(r2)
   19138:	e0bffb17 	ldw	r2,-20(fp)
   1913c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19140:	e0bffe17 	ldw	r2,-8(fp)
   19144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   19148:	e0bffc17 	ldw	r2,-16(fp)
   1914c:	10000f26 	beq	r2,zero,1918c <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   19150:	e0bffc17 	ldw	r2,-16(fp)
   19154:	00c000c4 	movi	r3,3
   19158:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1915c:	e0bffc17 	ldw	r2,-16(fp)
   19160:	e0ffff0b 	ldhu	r3,-4(fp)
   19164:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   19168:	e0bffc17 	ldw	r2,-16(fp)
   1916c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   19170:	e0bffc17 	ldw	r2,-16(fp)
   19174:	00c00fc4 	movi	r3,63
   19178:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1917c:	e0bffc17 	ldw	r2,-16(fp)
   19180:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   19184:	e13ffc17 	ldw	r4,-16(fp)
   19188:	00145e00 	call	145e0 <OS_EventWaitListInit>
    }
    return (pevent);
   1918c:	e0bffc17 	ldw	r2,-16(fp)
}
   19190:	e037883a 	mov	sp,fp
   19194:	dfc00117 	ldw	ra,4(sp)
   19198:	df000017 	ldw	fp,0(sp)
   1919c:	dec00204 	addi	sp,sp,8
   191a0:	f800283a 	ret

000191a4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   191a4:	defff304 	addi	sp,sp,-52
   191a8:	dfc00c15 	stw	ra,48(sp)
   191ac:	df000b15 	stw	fp,44(sp)
   191b0:	df000b04 	addi	fp,sp,44
   191b4:	e13ffd15 	stw	r4,-12(fp)
   191b8:	2805883a 	mov	r2,r5
   191bc:	e1bfff15 	stw	r6,-4(fp)
   191c0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   191c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   191c8:	e0bfff17 	ldw	r2,-4(fp)
   191cc:	1000021e 	bne	r2,zero,191d8 <OSSemDel+0x34>
        return (pevent);
   191d0:	e0bffd17 	ldw	r2,-12(fp)
   191d4:	00008806 	br	193f8 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   191d8:	e0bffd17 	ldw	r2,-12(fp)
   191dc:	1000051e 	bne	r2,zero,191f4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   191e0:	e0bfff17 	ldw	r2,-4(fp)
   191e4:	00c00104 	movi	r3,4
   191e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   191ec:	e0bffd17 	ldw	r2,-12(fp)
   191f0:	00008106 	br	193f8 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   191f4:	e0bffd17 	ldw	r2,-12(fp)
   191f8:	10800003 	ldbu	r2,0(r2)
   191fc:	10803fcc 	andi	r2,r2,255
   19200:	108000e0 	cmpeqi	r2,r2,3
   19204:	1000051e 	bne	r2,zero,1921c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19208:	e0bfff17 	ldw	r2,-4(fp)
   1920c:	00c00044 	movi	r3,1
   19210:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19214:	e0bffd17 	ldw	r2,-12(fp)
   19218:	00007706 	br	193f8 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1921c:	008000b4 	movhi	r2,2
   19220:	108fff04 	addi	r2,r2,16380
   19224:	10800003 	ldbu	r2,0(r2)
   19228:	10803fcc 	andi	r2,r2,255
   1922c:	10000526 	beq	r2,zero,19244 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   19230:	e0bfff17 	ldw	r2,-4(fp)
   19234:	00c003c4 	movi	r3,15
   19238:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1923c:	e0bffd17 	ldw	r2,-12(fp)
   19240:	00006d06 	br	193f8 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19244:	0005303a 	rdctl	r2,status
   19248:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1924c:	e0fff817 	ldw	r3,-32(fp)
   19250:	00bfff84 	movi	r2,-2
   19254:	1884703a 	and	r2,r3,r2
   19258:	1001703a 	wrctl	status,r2
  
  return context;
   1925c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19260:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   19264:	e0bffd17 	ldw	r2,-12(fp)
   19268:	10800283 	ldbu	r2,10(r2)
   1926c:	10803fcc 	andi	r2,r2,255
   19270:	10000326 	beq	r2,zero,19280 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   19274:	00800044 	movi	r2,1
   19278:	e0bff505 	stb	r2,-44(fp)
   1927c:	00000106 	br	19284 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   19280:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   19284:	e0bffe03 	ldbu	r2,-8(fp)
   19288:	10000326 	beq	r2,zero,19298 <OSSemDel+0xf4>
   1928c:	10800060 	cmpeqi	r2,r2,1
   19290:	10002c1e 	bne	r2,zero,19344 <OSSemDel+0x1a0>
   19294:	00004d06 	br	193cc <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   19298:	e0bff503 	ldbu	r2,-44(fp)
   1929c:	10001a1e 	bne	r2,zero,19308 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   192a0:	e0bffd17 	ldw	r2,-12(fp)
   192a4:	00c00fc4 	movi	r3,63
   192a8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   192ac:	e0bffd17 	ldw	r2,-12(fp)
   192b0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   192b4:	e0bffd17 	ldw	r2,-12(fp)
   192b8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   192bc:	008000b4 	movhi	r2,2
   192c0:	108ffe04 	addi	r2,r2,16376
   192c4:	10c00017 	ldw	r3,0(r2)
   192c8:	e0bffd17 	ldw	r2,-12(fp)
   192cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   192d0:	e0bffd17 	ldw	r2,-12(fp)
   192d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   192d8:	008000b4 	movhi	r2,2
   192dc:	108ffe04 	addi	r2,r2,16376
   192e0:	e0fffd17 	ldw	r3,-12(fp)
   192e4:	10c00015 	stw	r3,0(r2)
   192e8:	e0bff717 	ldw	r2,-36(fp)
   192ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   192f0:	e0bff917 	ldw	r2,-28(fp)
   192f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   192f8:	e0bfff17 	ldw	r2,-4(fp)
   192fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   19300:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19304:	00003b06 	br	193f4 <OSSemDel+0x250>
   19308:	e0bff717 	ldw	r2,-36(fp)
   1930c:	e0bffa15 	stw	r2,-24(fp)
   19310:	e0bffa17 	ldw	r2,-24(fp)
   19314:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19318:	e0bfff17 	ldw	r2,-4(fp)
   1931c:	00c01244 	movi	r3,73
   19320:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19324:	e0bffd17 	ldw	r2,-12(fp)
   19328:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1932c:	00003106 	br	193f4 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19330:	e13ffd17 	ldw	r4,-12(fp)
   19334:	000b883a 	mov	r5,zero
   19338:	01800044 	movi	r6,1
   1933c:	000f883a 	mov	r7,zero
   19340:	00140400 	call	14040 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   19344:	e0bffd17 	ldw	r2,-12(fp)
   19348:	10800283 	ldbu	r2,10(r2)
   1934c:	10803fcc 	andi	r2,r2,255
   19350:	103ff71e 	bne	r2,zero,19330 <__alt_mem_Flash_flash_data+0xf4019330>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19354:	e0bffd17 	ldw	r2,-12(fp)
   19358:	00c00fc4 	movi	r3,63
   1935c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19360:	e0bffd17 	ldw	r2,-12(fp)
   19364:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19368:	e0bffd17 	ldw	r2,-12(fp)
   1936c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19370:	008000b4 	movhi	r2,2
   19374:	108ffe04 	addi	r2,r2,16376
   19378:	10c00017 	ldw	r3,0(r2)
   1937c:	e0bffd17 	ldw	r2,-12(fp)
   19380:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19384:	e0bffd17 	ldw	r2,-12(fp)
   19388:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1938c:	008000b4 	movhi	r2,2
   19390:	108ffe04 	addi	r2,r2,16376
   19394:	e0fffd17 	ldw	r3,-12(fp)
   19398:	10c00015 	stw	r3,0(r2)
   1939c:	e0bff717 	ldw	r2,-36(fp)
   193a0:	e0bffb15 	stw	r2,-20(fp)
   193a4:	e0bffb17 	ldw	r2,-20(fp)
   193a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   193ac:	e0bff503 	ldbu	r2,-44(fp)
   193b0:	10800058 	cmpnei	r2,r2,1
   193b4:	1000011e 	bne	r2,zero,193bc <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   193b8:	0014a580 	call	14a58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   193bc:	e0bfff17 	ldw	r2,-4(fp)
   193c0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   193c4:	e03ff615 	stw	zero,-40(fp)
             break;
   193c8:	00000a06 	br	193f4 <OSSemDel+0x250>
   193cc:	e0bff717 	ldw	r2,-36(fp)
   193d0:	e0bffc15 	stw	r2,-16(fp)
   193d4:	e0bffc17 	ldw	r2,-16(fp)
   193d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   193dc:	e0bfff17 	ldw	r2,-4(fp)
   193e0:	00c001c4 	movi	r3,7
   193e4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   193e8:	e0bffd17 	ldw	r2,-12(fp)
   193ec:	e0bff615 	stw	r2,-40(fp)
             break;
   193f0:	0001883a 	nop
    }
    return (pevent_return);
   193f4:	e0bff617 	ldw	r2,-40(fp)
}
   193f8:	e037883a 	mov	sp,fp
   193fc:	dfc00117 	ldw	ra,4(sp)
   19400:	df000017 	ldw	fp,0(sp)
   19404:	dec00204 	addi	sp,sp,8
   19408:	f800283a 	ret

0001940c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1940c:	defff504 	addi	sp,sp,-44
   19410:	dfc00a15 	stw	ra,40(sp)
   19414:	df000915 	stw	fp,36(sp)
   19418:	df000904 	addi	fp,sp,36
   1941c:	e13ffd15 	stw	r4,-12(fp)
   19420:	2805883a 	mov	r2,r5
   19424:	e1bfff15 	stw	r6,-4(fp)
   19428:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1942c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19430:	e0bfff17 	ldw	r2,-4(fp)
   19434:	1000011e 	bne	r2,zero,1943c <OSSemPend+0x30>
        return;
   19438:	00008906 	br	19660 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1943c:	e0bffd17 	ldw	r2,-12(fp)
   19440:	1000041e 	bne	r2,zero,19454 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   19444:	e0bfff17 	ldw	r2,-4(fp)
   19448:	00c00104 	movi	r3,4
   1944c:	10c00005 	stb	r3,0(r2)
        return;
   19450:	00008306 	br	19660 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19454:	e0bffd17 	ldw	r2,-12(fp)
   19458:	10800003 	ldbu	r2,0(r2)
   1945c:	10803fcc 	andi	r2,r2,255
   19460:	108000e0 	cmpeqi	r2,r2,3
   19464:	1000041e 	bne	r2,zero,19478 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   19468:	e0bfff17 	ldw	r2,-4(fp)
   1946c:	00c00044 	movi	r3,1
   19470:	10c00005 	stb	r3,0(r2)
        return;
   19474:	00007a06 	br	19660 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   19478:	008000b4 	movhi	r2,2
   1947c:	108fff04 	addi	r2,r2,16380
   19480:	10800003 	ldbu	r2,0(r2)
   19484:	10803fcc 	andi	r2,r2,255
   19488:	10000426 	beq	r2,zero,1949c <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1948c:	e0bfff17 	ldw	r2,-4(fp)
   19490:	00c00084 	movi	r3,2
   19494:	10c00005 	stb	r3,0(r2)
        return;
   19498:	00007106 	br	19660 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1949c:	008000b4 	movhi	r2,2
   194a0:	108ff104 	addi	r2,r2,16324
   194a4:	10800003 	ldbu	r2,0(r2)
   194a8:	10803fcc 	andi	r2,r2,255
   194ac:	10000426 	beq	r2,zero,194c0 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   194b0:	e0bfff17 	ldw	r2,-4(fp)
   194b4:	00c00344 	movi	r3,13
   194b8:	10c00005 	stb	r3,0(r2)
        return;
   194bc:	00006806 	br	19660 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   194c0:	0005303a 	rdctl	r2,status
   194c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   194c8:	e0fff817 	ldw	r3,-32(fp)
   194cc:	00bfff84 	movi	r2,-2
   194d0:	1884703a 	and	r2,r3,r2
   194d4:	1001703a 	wrctl	status,r2
  
  return context;
   194d8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   194dc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   194e0:	e0bffd17 	ldw	r2,-12(fp)
   194e4:	1080020b 	ldhu	r2,8(r2)
   194e8:	10bfffcc 	andi	r2,r2,65535
   194ec:	10000d26 	beq	r2,zero,19524 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   194f0:	e0bffd17 	ldw	r2,-12(fp)
   194f4:	1080020b 	ldhu	r2,8(r2)
   194f8:	10bfffc4 	addi	r2,r2,-1
   194fc:	1007883a 	mov	r3,r2
   19500:	e0bffd17 	ldw	r2,-12(fp)
   19504:	10c0020d 	sth	r3,8(r2)
   19508:	e0bff717 	ldw	r2,-36(fp)
   1950c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19510:	e0bff917 	ldw	r2,-28(fp)
   19514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   19518:	e0bfff17 	ldw	r2,-4(fp)
   1951c:	10000005 	stb	zero,0(r2)
        return;
   19520:	00004f06 	br	19660 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   19524:	008000b4 	movhi	r2,2
   19528:	10900004 	addi	r2,r2,16384
   1952c:	10c00017 	ldw	r3,0(r2)
   19530:	008000b4 	movhi	r2,2
   19534:	10900004 	addi	r2,r2,16384
   19538:	10800017 	ldw	r2,0(r2)
   1953c:	10800c03 	ldbu	r2,48(r2)
   19540:	10800054 	ori	r2,r2,1
   19544:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19548:	008000b4 	movhi	r2,2
   1954c:	10900004 	addi	r2,r2,16384
   19550:	10800017 	ldw	r2,0(r2)
   19554:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19558:	008000b4 	movhi	r2,2
   1955c:	10900004 	addi	r2,r2,16384
   19560:	10800017 	ldw	r2,0(r2)
   19564:	e0fffe0b 	ldhu	r3,-8(fp)
   19568:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1956c:	e13ffd17 	ldw	r4,-12(fp)
   19570:	00141d80 	call	141d8 <OS_EventTaskWait>
   19574:	e0bff717 	ldw	r2,-36(fp)
   19578:	e0bffa15 	stw	r2,-24(fp)
   1957c:	e0bffa17 	ldw	r2,-24(fp)
   19580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   19584:	0014a580 	call	14a58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19588:	0005303a 	rdctl	r2,status
   1958c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19590:	e0fffb17 	ldw	r3,-20(fp)
   19594:	00bfff84 	movi	r2,-2
   19598:	1884703a 	and	r2,r3,r2
   1959c:	1001703a 	wrctl	status,r2
  
  return context;
   195a0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   195a4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   195a8:	008000b4 	movhi	r2,2
   195ac:	10900004 	addi	r2,r2,16384
   195b0:	10800017 	ldw	r2,0(r2)
   195b4:	10800c43 	ldbu	r2,49(r2)
   195b8:	10803fcc 	andi	r2,r2,255
   195bc:	10000326 	beq	r2,zero,195cc <OSSemPend+0x1c0>
   195c0:	108000a0 	cmpeqi	r2,r2,2
   195c4:	1000041e 	bne	r2,zero,195d8 <OSSemPend+0x1cc>
   195c8:	00000706 	br	195e8 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   195cc:	e0bfff17 	ldw	r2,-4(fp)
   195d0:	10000005 	stb	zero,0(r2)
             break;
   195d4:	00000e06 	br	19610 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   195d8:	e0bfff17 	ldw	r2,-4(fp)
   195dc:	00c00384 	movi	r3,14
   195e0:	10c00005 	stb	r3,0(r2)
             break;
   195e4:	00000a06 	br	19610 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   195e8:	008000b4 	movhi	r2,2
   195ec:	10900004 	addi	r2,r2,16384
   195f0:	10800017 	ldw	r2,0(r2)
   195f4:	1009883a 	mov	r4,r2
   195f8:	e17ffd17 	ldw	r5,-12(fp)
   195fc:	00144300 	call	14430 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19600:	e0bfff17 	ldw	r2,-4(fp)
   19604:	00c00284 	movi	r3,10
   19608:	10c00005 	stb	r3,0(r2)
             break;
   1960c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19610:	008000b4 	movhi	r2,2
   19614:	10900004 	addi	r2,r2,16384
   19618:	10800017 	ldw	r2,0(r2)
   1961c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19620:	008000b4 	movhi	r2,2
   19624:	10900004 	addi	r2,r2,16384
   19628:	10800017 	ldw	r2,0(r2)
   1962c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19630:	008000b4 	movhi	r2,2
   19634:	10900004 	addi	r2,r2,16384
   19638:	10800017 	ldw	r2,0(r2)
   1963c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19640:	008000b4 	movhi	r2,2
   19644:	10900004 	addi	r2,r2,16384
   19648:	10800017 	ldw	r2,0(r2)
   1964c:	10000815 	stw	zero,32(r2)
   19650:	e0bff717 	ldw	r2,-36(fp)
   19654:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19658:	e0bffc17 	ldw	r2,-16(fp)
   1965c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   19660:	e037883a 	mov	sp,fp
   19664:	dfc00117 	ldw	ra,4(sp)
   19668:	df000017 	ldw	fp,0(sp)
   1966c:	dec00204 	addi	sp,sp,8
   19670:	f800283a 	ret

00019674 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19674:	defff604 	addi	sp,sp,-40
   19678:	dfc00915 	stw	ra,36(sp)
   1967c:	df000815 	stw	fp,32(sp)
   19680:	df000804 	addi	fp,sp,32
   19684:	e13ffd15 	stw	r4,-12(fp)
   19688:	2805883a 	mov	r2,r5
   1968c:	e1bfff15 	stw	r6,-4(fp)
   19690:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19694:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19698:	e0bfff17 	ldw	r2,-4(fp)
   1969c:	1000021e 	bne	r2,zero,196a8 <OSSemPendAbort+0x34>
        return (0);
   196a0:	0005883a 	mov	r2,zero
   196a4:	00004906 	br	197cc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   196a8:	e0bffd17 	ldw	r2,-12(fp)
   196ac:	1000051e 	bne	r2,zero,196c4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   196b0:	e0bfff17 	ldw	r2,-4(fp)
   196b4:	00c00104 	movi	r3,4
   196b8:	10c00005 	stb	r3,0(r2)
        return (0);
   196bc:	0005883a 	mov	r2,zero
   196c0:	00004206 	br	197cc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   196c4:	e0bffd17 	ldw	r2,-12(fp)
   196c8:	10800003 	ldbu	r2,0(r2)
   196cc:	10803fcc 	andi	r2,r2,255
   196d0:	108000e0 	cmpeqi	r2,r2,3
   196d4:	1000051e 	bne	r2,zero,196ec <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   196d8:	e0bfff17 	ldw	r2,-4(fp)
   196dc:	00c00044 	movi	r3,1
   196e0:	10c00005 	stb	r3,0(r2)
        return (0);
   196e4:	0005883a 	mov	r2,zero
   196e8:	00003806 	br	197cc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   196ec:	0005303a 	rdctl	r2,status
   196f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   196f4:	e0fffa17 	ldw	r3,-24(fp)
   196f8:	00bfff84 	movi	r2,-2
   196fc:	1884703a 	and	r2,r3,r2
   19700:	1001703a 	wrctl	status,r2
  
  return context;
   19704:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19708:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1970c:	e0bffd17 	ldw	r2,-12(fp)
   19710:	10800283 	ldbu	r2,10(r2)
   19714:	10803fcc 	andi	r2,r2,255
   19718:	10002526 	beq	r2,zero,197b0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1971c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   19720:	e0bffe03 	ldbu	r2,-8(fp)
   19724:	10800060 	cmpeqi	r2,r2,1
   19728:	10000e26 	beq	r2,zero,19764 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1972c:	00000806 	br	19750 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19730:	e13ffd17 	ldw	r4,-12(fp)
   19734:	000b883a 	mov	r5,zero
   19738:	01800044 	movi	r6,1
   1973c:	01c00084 	movi	r7,2
   19740:	00140400 	call	14040 <OS_EventTaskRdy>
                     nbr_tasks++;
   19744:	e0bff803 	ldbu	r2,-32(fp)
   19748:	10800044 	addi	r2,r2,1
   1974c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   19750:	e0bffd17 	ldw	r2,-12(fp)
   19754:	10800283 	ldbu	r2,10(r2)
   19758:	10803fcc 	andi	r2,r2,255
   1975c:	103ff41e 	bne	r2,zero,19730 <__alt_mem_Flash_flash_data+0xf4019730>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19760:	00000906 	br	19788 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19764:	e13ffd17 	ldw	r4,-12(fp)
   19768:	000b883a 	mov	r5,zero
   1976c:	01800044 	movi	r6,1
   19770:	01c00084 	movi	r7,2
   19774:	00140400 	call	14040 <OS_EventTaskRdy>
                 nbr_tasks++;
   19778:	e0bff803 	ldbu	r2,-32(fp)
   1977c:	10800044 	addi	r2,r2,1
   19780:	e0bff805 	stb	r2,-32(fp)
                 break;
   19784:	0001883a 	nop
   19788:	e0bff917 	ldw	r2,-28(fp)
   1978c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19790:	e0bffb17 	ldw	r2,-20(fp)
   19794:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19798:	0014a580 	call	14a58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1979c:	e0bfff17 	ldw	r2,-4(fp)
   197a0:	00c00384 	movi	r3,14
   197a4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   197a8:	e0bff803 	ldbu	r2,-32(fp)
   197ac:	00000706 	br	197cc <OSSemPendAbort+0x158>
   197b0:	e0bff917 	ldw	r2,-28(fp)
   197b4:	e0bffc15 	stw	r2,-16(fp)
   197b8:	e0bffc17 	ldw	r2,-16(fp)
   197bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   197c0:	e0bfff17 	ldw	r2,-4(fp)
   197c4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   197c8:	0005883a 	mov	r2,zero
}
   197cc:	e037883a 	mov	sp,fp
   197d0:	dfc00117 	ldw	ra,4(sp)
   197d4:	df000017 	ldw	fp,0(sp)
   197d8:	dec00204 	addi	sp,sp,8
   197dc:	f800283a 	ret

000197e0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   197e0:	defff804 	addi	sp,sp,-32
   197e4:	dfc00715 	stw	ra,28(sp)
   197e8:	df000615 	stw	fp,24(sp)
   197ec:	df000604 	addi	fp,sp,24
   197f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   197f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   197f8:	e0bfff17 	ldw	r2,-4(fp)
   197fc:	1000021e 	bne	r2,zero,19808 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   19800:	00800104 	movi	r2,4
   19804:	00003506 	br	198dc <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19808:	e0bfff17 	ldw	r2,-4(fp)
   1980c:	10800003 	ldbu	r2,0(r2)
   19810:	10803fcc 	andi	r2,r2,255
   19814:	108000e0 	cmpeqi	r2,r2,3
   19818:	1000021e 	bne	r2,zero,19824 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1981c:	00800044 	movi	r2,1
   19820:	00002e06 	br	198dc <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19824:	0005303a 	rdctl	r2,status
   19828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1982c:	e0fffb17 	ldw	r3,-20(fp)
   19830:	00bfff84 	movi	r2,-2
   19834:	1884703a 	and	r2,r3,r2
   19838:	1001703a 	wrctl	status,r2
  
  return context;
   1983c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19840:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   19844:	e0bfff17 	ldw	r2,-4(fp)
   19848:	10800283 	ldbu	r2,10(r2)
   1984c:	10803fcc 	andi	r2,r2,255
   19850:	10000c26 	beq	r2,zero,19884 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19854:	e13fff17 	ldw	r4,-4(fp)
   19858:	000b883a 	mov	r5,zero
   1985c:	01800044 	movi	r6,1
   19860:	000f883a 	mov	r7,zero
   19864:	00140400 	call	14040 <OS_EventTaskRdy>
   19868:	e0bffa17 	ldw	r2,-24(fp)
   1986c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19870:	e0bffc17 	ldw	r2,-16(fp)
   19874:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19878:	0014a580 	call	14a58 <OS_Sched>
        return (OS_ERR_NONE);
   1987c:	0005883a 	mov	r2,zero
   19880:	00001606 	br	198dc <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   19884:	e0bfff17 	ldw	r2,-4(fp)
   19888:	1080020b 	ldhu	r2,8(r2)
   1988c:	10ffffcc 	andi	r3,r2,65535
   19890:	00bfffd4 	movui	r2,65535
   19894:	18800c26 	beq	r3,r2,198c8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19898:	e0bfff17 	ldw	r2,-4(fp)
   1989c:	1080020b 	ldhu	r2,8(r2)
   198a0:	10800044 	addi	r2,r2,1
   198a4:	1007883a 	mov	r3,r2
   198a8:	e0bfff17 	ldw	r2,-4(fp)
   198ac:	10c0020d 	sth	r3,8(r2)
   198b0:	e0bffa17 	ldw	r2,-24(fp)
   198b4:	e0bffd15 	stw	r2,-12(fp)
   198b8:	e0bffd17 	ldw	r2,-12(fp)
   198bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   198c0:	0005883a 	mov	r2,zero
   198c4:	00000506 	br	198dc <OSSemPost+0xfc>
   198c8:	e0bffa17 	ldw	r2,-24(fp)
   198cc:	e0bffe15 	stw	r2,-8(fp)
   198d0:	e0bffe17 	ldw	r2,-8(fp)
   198d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   198d8:	00800c84 	movi	r2,50
}
   198dc:	e037883a 	mov	sp,fp
   198e0:	dfc00117 	ldw	ra,4(sp)
   198e4:	df000017 	ldw	fp,0(sp)
   198e8:	dec00204 	addi	sp,sp,8
   198ec:	f800283a 	ret

000198f0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   198f0:	defff704 	addi	sp,sp,-36
   198f4:	df000815 	stw	fp,32(sp)
   198f8:	df000804 	addi	fp,sp,32
   198fc:	e13ffe15 	stw	r4,-8(fp)
   19900:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19904:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19908:	e0bffe17 	ldw	r2,-8(fp)
   1990c:	1000021e 	bne	r2,zero,19918 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   19910:	00800104 	movi	r2,4
   19914:	00003606 	br	199f0 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   19918:	e0bfff17 	ldw	r2,-4(fp)
   1991c:	1000021e 	bne	r2,zero,19928 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   19920:	00800244 	movi	r2,9
   19924:	00003206 	br	199f0 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   19928:	e0bffe17 	ldw	r2,-8(fp)
   1992c:	10800003 	ldbu	r2,0(r2)
   19930:	10803fcc 	andi	r2,r2,255
   19934:	108000e0 	cmpeqi	r2,r2,3
   19938:	1000021e 	bne	r2,zero,19944 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1993c:	00800044 	movi	r2,1
   19940:	00002b06 	br	199f0 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19944:	0005303a 	rdctl	r2,status
   19948:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1994c:	e0fffc17 	ldw	r3,-16(fp)
   19950:	00bfff84 	movi	r2,-2
   19954:	1884703a 	and	r2,r3,r2
   19958:	1001703a 	wrctl	status,r2
  
  return context;
   1995c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19960:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   19964:	e0bffe17 	ldw	r2,-8(fp)
   19968:	10c00283 	ldbu	r3,10(r2)
   1996c:	e0bfff17 	ldw	r2,-4(fp)
   19970:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   19974:	e0bffe17 	ldw	r2,-8(fp)
   19978:	108002c4 	addi	r2,r2,11
   1997c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   19980:	e0bfff17 	ldw	r2,-4(fp)
   19984:	10800084 	addi	r2,r2,2
   19988:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1998c:	e03ffa05 	stb	zero,-24(fp)
   19990:	00000b06 	br	199c0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   19994:	e0bff917 	ldw	r2,-28(fp)
   19998:	10c00044 	addi	r3,r2,1
   1999c:	e0fff915 	stw	r3,-28(fp)
   199a0:	e0fff817 	ldw	r3,-32(fp)
   199a4:	19000044 	addi	r4,r3,1
   199a8:	e13ff815 	stw	r4,-32(fp)
   199ac:	18c00003 	ldbu	r3,0(r3)
   199b0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   199b4:	e0bffa03 	ldbu	r2,-24(fp)
   199b8:	10800044 	addi	r2,r2,1
   199bc:	e0bffa05 	stb	r2,-24(fp)
   199c0:	e0bffa03 	ldbu	r2,-24(fp)
   199c4:	108000f0 	cmpltui	r2,r2,3
   199c8:	103ff21e 	bne	r2,zero,19994 <__alt_mem_Flash_flash_data+0xf4019994>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   199cc:	e0bffe17 	ldw	r2,-8(fp)
   199d0:	10c0020b 	ldhu	r3,8(r2)
   199d4:	e0bfff17 	ldw	r2,-4(fp)
   199d8:	10c0000d 	sth	r3,0(r2)
   199dc:	e0bffb17 	ldw	r2,-20(fp)
   199e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   199e4:	e0bffd17 	ldw	r2,-12(fp)
   199e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   199ec:	0005883a 	mov	r2,zero
}
   199f0:	e037883a 	mov	sp,fp
   199f4:	df000017 	ldw	fp,0(sp)
   199f8:	dec00104 	addi	sp,sp,4
   199fc:	f800283a 	ret

00019a00 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   19a00:	defff904 	addi	sp,sp,-28
   19a04:	df000615 	stw	fp,24(sp)
   19a08:	df000604 	addi	fp,sp,24
   19a0c:	e13ffd15 	stw	r4,-12(fp)
   19a10:	2805883a 	mov	r2,r5
   19a14:	e1bfff15 	stw	r6,-4(fp)
   19a18:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19a1c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19a20:	e0bfff17 	ldw	r2,-4(fp)
   19a24:	1000011e 	bne	r2,zero,19a2c <OSSemSet+0x2c>
        return;
   19a28:	00003006 	br	19aec <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19a2c:	e0bffd17 	ldw	r2,-12(fp)
   19a30:	1000041e 	bne	r2,zero,19a44 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19a34:	e0bfff17 	ldw	r2,-4(fp)
   19a38:	00c00104 	movi	r3,4
   19a3c:	10c00005 	stb	r3,0(r2)
        return;
   19a40:	00002a06 	br	19aec <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19a44:	e0bffd17 	ldw	r2,-12(fp)
   19a48:	10800003 	ldbu	r2,0(r2)
   19a4c:	10803fcc 	andi	r2,r2,255
   19a50:	108000e0 	cmpeqi	r2,r2,3
   19a54:	1000041e 	bne	r2,zero,19a68 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   19a58:	e0bfff17 	ldw	r2,-4(fp)
   19a5c:	00c00044 	movi	r3,1
   19a60:	10c00005 	stb	r3,0(r2)
        return;
   19a64:	00002106 	br	19aec <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a68:	0005303a 	rdctl	r2,status
   19a6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a70:	e0fffb17 	ldw	r3,-20(fp)
   19a74:	00bfff84 	movi	r2,-2
   19a78:	1884703a 	and	r2,r3,r2
   19a7c:	1001703a 	wrctl	status,r2
  
  return context;
   19a80:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19a84:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   19a88:	e0bfff17 	ldw	r2,-4(fp)
   19a8c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   19a90:	e0bffd17 	ldw	r2,-12(fp)
   19a94:	1080020b 	ldhu	r2,8(r2)
   19a98:	10bfffcc 	andi	r2,r2,65535
   19a9c:	10000426 	beq	r2,zero,19ab0 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   19aa0:	e0bffd17 	ldw	r2,-12(fp)
   19aa4:	e0fffe0b 	ldhu	r3,-8(fp)
   19aa8:	10c0020d 	sth	r3,8(r2)
   19aac:	00000b06 	br	19adc <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   19ab0:	e0bffd17 	ldw	r2,-12(fp)
   19ab4:	10800283 	ldbu	r2,10(r2)
   19ab8:	10803fcc 	andi	r2,r2,255
   19abc:	1000041e 	bne	r2,zero,19ad0 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   19ac0:	e0bffd17 	ldw	r2,-12(fp)
   19ac4:	e0fffe0b 	ldhu	r3,-8(fp)
   19ac8:	10c0020d 	sth	r3,8(r2)
   19acc:	00000306 	br	19adc <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   19ad0:	e0bfff17 	ldw	r2,-4(fp)
   19ad4:	00c01244 	movi	r3,73
   19ad8:	10c00005 	stb	r3,0(r2)
   19adc:	e0bffa17 	ldw	r2,-24(fp)
   19ae0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ae4:	e0bffc17 	ldw	r2,-16(fp)
   19ae8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   19aec:	e037883a 	mov	sp,fp
   19af0:	df000017 	ldw	fp,0(sp)
   19af4:	dec00104 	addi	sp,sp,4
   19af8:	f800283a 	ret

00019afc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   19afc:	defff104 	addi	sp,sp,-60
   19b00:	dfc00e15 	stw	ra,56(sp)
   19b04:	df000d15 	stw	fp,52(sp)
   19b08:	df000d04 	addi	fp,sp,52
   19b0c:	2007883a 	mov	r3,r4
   19b10:	2805883a 	mov	r2,r5
   19b14:	e0fffe05 	stb	r3,-8(fp)
   19b18:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   19b1c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   19b20:	e0bffe03 	ldbu	r2,-8(fp)
   19b24:	10800530 	cmpltui	r2,r2,20
   19b28:	1000051e 	bne	r2,zero,19b40 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   19b2c:	e0bffe03 	ldbu	r2,-8(fp)
   19b30:	10803fe0 	cmpeqi	r2,r2,255
   19b34:	1000021e 	bne	r2,zero,19b40 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   19b38:	00800a84 	movi	r2,42
   19b3c:	00013a06 	br	1a028 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   19b40:	e0bfff03 	ldbu	r2,-4(fp)
   19b44:	10800530 	cmpltui	r2,r2,20
   19b48:	1000021e 	bne	r2,zero,19b54 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   19b4c:	00800a84 	movi	r2,42
   19b50:	00013506 	br	1a028 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b54:	0005303a 	rdctl	r2,status
   19b58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19b5c:	e0fff917 	ldw	r3,-28(fp)
   19b60:	00bfff84 	movi	r2,-2
   19b64:	1884703a 	and	r2,r3,r2
   19b68:	1001703a 	wrctl	status,r2
  
  return context;
   19b6c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19b70:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   19b74:	e0ffff03 	ldbu	r3,-4(fp)
   19b78:	00800174 	movhi	r2,5
   19b7c:	10a4a204 	addi	r2,r2,-28024
   19b80:	18c7883a 	add	r3,r3,r3
   19b84:	18c7883a 	add	r3,r3,r3
   19b88:	10c5883a 	add	r2,r2,r3
   19b8c:	10800017 	ldw	r2,0(r2)
   19b90:	10000626 	beq	r2,zero,19bac <OSTaskChangePrio+0xb0>
   19b94:	e0bff517 	ldw	r2,-44(fp)
   19b98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b9c:	e0bffa17 	ldw	r2,-24(fp)
   19ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   19ba4:	00800a04 	movi	r2,40
   19ba8:	00011f06 	br	1a028 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   19bac:	e0bffe03 	ldbu	r2,-8(fp)
   19bb0:	10803fd8 	cmpnei	r2,r2,255
   19bb4:	1000051e 	bne	r2,zero,19bcc <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   19bb8:	008000b4 	movhi	r2,2
   19bbc:	10900004 	addi	r2,r2,16384
   19bc0:	10800017 	ldw	r2,0(r2)
   19bc4:	10800c83 	ldbu	r2,50(r2)
   19bc8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   19bcc:	e0fffe03 	ldbu	r3,-8(fp)
   19bd0:	00800174 	movhi	r2,5
   19bd4:	10a4a204 	addi	r2,r2,-28024
   19bd8:	18c7883a 	add	r3,r3,r3
   19bdc:	18c7883a 	add	r3,r3,r3
   19be0:	10c5883a 	add	r2,r2,r3
   19be4:	10800017 	ldw	r2,0(r2)
   19be8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   19bec:	e0bff617 	ldw	r2,-40(fp)
   19bf0:	1000061e 	bne	r2,zero,19c0c <OSTaskChangePrio+0x110>
   19bf4:	e0bff517 	ldw	r2,-44(fp)
   19bf8:	e0bffb15 	stw	r2,-20(fp)
   19bfc:	e0bffb17 	ldw	r2,-20(fp)
   19c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   19c04:	00800a44 	movi	r2,41
   19c08:	00010706 	br	1a028 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   19c0c:	e0bff617 	ldw	r2,-40(fp)
   19c10:	10800058 	cmpnei	r2,r2,1
   19c14:	1000061e 	bne	r2,zero,19c30 <OSTaskChangePrio+0x134>
   19c18:	e0bff517 	ldw	r2,-44(fp)
   19c1c:	e0bffc15 	stw	r2,-16(fp)
   19c20:	e0bffc17 	ldw	r2,-16(fp)
   19c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   19c28:	008010c4 	movi	r2,67
   19c2c:	0000fe06 	br	1a028 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   19c30:	e0bfff03 	ldbu	r2,-4(fp)
   19c34:	1004d0fa 	srli	r2,r2,3
   19c38:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   19c3c:	e0bfff03 	ldbu	r2,-4(fp)
   19c40:	108001cc 	andi	r2,r2,7
   19c44:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   19c48:	e0bff703 	ldbu	r2,-36(fp)
   19c4c:	00c00044 	movi	r3,1
   19c50:	1884983a 	sll	r2,r3,r2
   19c54:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   19c58:	e0bff743 	ldbu	r2,-35(fp)
   19c5c:	00c00044 	movi	r3,1
   19c60:	1884983a 	sll	r2,r3,r2
   19c64:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   19c68:	e0fffe03 	ldbu	r3,-8(fp)
   19c6c:	00800174 	movhi	r2,5
   19c70:	10a4a204 	addi	r2,r2,-28024
   19c74:	18c7883a 	add	r3,r3,r3
   19c78:	18c7883a 	add	r3,r3,r3
   19c7c:	10c5883a 	add	r2,r2,r3
   19c80:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   19c84:	e0ffff03 	ldbu	r3,-4(fp)
   19c88:	00800174 	movhi	r2,5
   19c8c:	10a4a204 	addi	r2,r2,-28024
   19c90:	18c7883a 	add	r3,r3,r3
   19c94:	18c7883a 	add	r3,r3,r3
   19c98:	10c5883a 	add	r2,r2,r3
   19c9c:	e0fff617 	ldw	r3,-40(fp)
   19ca0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   19ca4:	e0bff617 	ldw	r2,-40(fp)
   19ca8:	10800d03 	ldbu	r2,52(r2)
   19cac:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19cb0:	e0bff617 	ldw	r2,-40(fp)
   19cb4:	10800d83 	ldbu	r2,54(r2)
   19cb8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19cbc:	e0bff617 	ldw	r2,-40(fp)
   19cc0:	10800d43 	ldbu	r2,53(r2)
   19cc4:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   19cc8:	e0fff803 	ldbu	r3,-32(fp)
   19ccc:	008000b4 	movhi	r2,2
   19cd0:	108ffd44 	addi	r2,r2,16373
   19cd4:	10c5883a 	add	r2,r2,r3
   19cd8:	10c00003 	ldbu	r3,0(r2)
   19cdc:	e0bff883 	ldbu	r2,-30(fp)
   19ce0:	1884703a 	and	r2,r3,r2
   19ce4:	10803fcc 	andi	r2,r2,255
   19ce8:	10003726 	beq	r2,zero,19dc8 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   19cec:	e0fff803 	ldbu	r3,-32(fp)
   19cf0:	e13ff803 	ldbu	r4,-32(fp)
   19cf4:	008000b4 	movhi	r2,2
   19cf8:	108ffd44 	addi	r2,r2,16373
   19cfc:	1105883a 	add	r2,r2,r4
   19d00:	10800003 	ldbu	r2,0(r2)
   19d04:	1009883a 	mov	r4,r2
   19d08:	e0bff883 	ldbu	r2,-30(fp)
   19d0c:	0084303a 	nor	r2,zero,r2
   19d10:	2084703a 	and	r2,r4,r2
   19d14:	1009883a 	mov	r4,r2
   19d18:	008000b4 	movhi	r2,2
   19d1c:	108ffd44 	addi	r2,r2,16373
   19d20:	10c5883a 	add	r2,r2,r3
   19d24:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   19d28:	e0fff803 	ldbu	r3,-32(fp)
   19d2c:	008000b4 	movhi	r2,2
   19d30:	108ffd44 	addi	r2,r2,16373
   19d34:	10c5883a 	add	r2,r2,r3
   19d38:	10800003 	ldbu	r2,0(r2)
   19d3c:	10803fcc 	andi	r2,r2,255
   19d40:	10000b1e 	bne	r2,zero,19d70 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   19d44:	e0bff843 	ldbu	r2,-31(fp)
   19d48:	0084303a 	nor	r2,zero,r2
   19d4c:	1007883a 	mov	r3,r2
   19d50:	008000b4 	movhi	r2,2
   19d54:	108ffd04 	addi	r2,r2,16372
   19d58:	10800003 	ldbu	r2,0(r2)
   19d5c:	1884703a 	and	r2,r3,r2
   19d60:	1007883a 	mov	r3,r2
   19d64:	008000b4 	movhi	r2,2
   19d68:	108ffd04 	addi	r2,r2,16372
   19d6c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   19d70:	008000b4 	movhi	r2,2
   19d74:	108ffd04 	addi	r2,r2,16372
   19d78:	10c00003 	ldbu	r3,0(r2)
   19d7c:	e0bff783 	ldbu	r2,-34(fp)
   19d80:	1884b03a 	or	r2,r3,r2
   19d84:	1007883a 	mov	r3,r2
   19d88:	008000b4 	movhi	r2,2
   19d8c:	108ffd04 	addi	r2,r2,16372
   19d90:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   19d94:	e0fff703 	ldbu	r3,-36(fp)
   19d98:	e13ff703 	ldbu	r4,-36(fp)
   19d9c:	008000b4 	movhi	r2,2
   19da0:	108ffd44 	addi	r2,r2,16373
   19da4:	1105883a 	add	r2,r2,r4
   19da8:	11000003 	ldbu	r4,0(r2)
   19dac:	e0bff7c3 	ldbu	r2,-33(fp)
   19db0:	2084b03a 	or	r2,r4,r2
   19db4:	1009883a 	mov	r4,r2
   19db8:	008000b4 	movhi	r2,2
   19dbc:	108ffd44 	addi	r2,r2,16373
   19dc0:	10c5883a 	add	r2,r2,r3
   19dc4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   19dc8:	e0bff617 	ldw	r2,-40(fp)
   19dcc:	10800717 	ldw	r2,28(r2)
   19dd0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   19dd4:	e0bff317 	ldw	r2,-52(fp)
   19dd8:	10003326 	beq	r2,zero,19ea8 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19ddc:	e0bff803 	ldbu	r2,-32(fp)
   19de0:	e0fff803 	ldbu	r3,-32(fp)
   19de4:	e13ff317 	ldw	r4,-52(fp)
   19de8:	20c7883a 	add	r3,r4,r3
   19dec:	18c00204 	addi	r3,r3,8
   19df0:	18c000c3 	ldbu	r3,3(r3)
   19df4:	1809883a 	mov	r4,r3
   19df8:	e0fff883 	ldbu	r3,-30(fp)
   19dfc:	00c6303a 	nor	r3,zero,r3
   19e00:	20c6703a 	and	r3,r4,r3
   19e04:	1809883a 	mov	r4,r3
   19e08:	e0fff317 	ldw	r3,-52(fp)
   19e0c:	1885883a 	add	r2,r3,r2
   19e10:	10800204 	addi	r2,r2,8
   19e14:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19e18:	e0bff803 	ldbu	r2,-32(fp)
   19e1c:	e0fff317 	ldw	r3,-52(fp)
   19e20:	1885883a 	add	r2,r3,r2
   19e24:	10800204 	addi	r2,r2,8
   19e28:	108000c3 	ldbu	r2,3(r2)
   19e2c:	10803fcc 	andi	r2,r2,255
   19e30:	1000091e 	bne	r2,zero,19e58 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   19e34:	e0bff317 	ldw	r2,-52(fp)
   19e38:	10800283 	ldbu	r2,10(r2)
   19e3c:	1007883a 	mov	r3,r2
   19e40:	e0bff843 	ldbu	r2,-31(fp)
   19e44:	0084303a 	nor	r2,zero,r2
   19e48:	1884703a 	and	r2,r3,r2
   19e4c:	1007883a 	mov	r3,r2
   19e50:	e0bff317 	ldw	r2,-52(fp)
   19e54:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   19e58:	e0bff317 	ldw	r2,-52(fp)
   19e5c:	10c00283 	ldbu	r3,10(r2)
   19e60:	e0bff783 	ldbu	r2,-34(fp)
   19e64:	1884b03a 	or	r2,r3,r2
   19e68:	1007883a 	mov	r3,r2
   19e6c:	e0bff317 	ldw	r2,-52(fp)
   19e70:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   19e74:	e0bff703 	ldbu	r2,-36(fp)
   19e78:	e0fff703 	ldbu	r3,-36(fp)
   19e7c:	e13ff317 	ldw	r4,-52(fp)
   19e80:	20c7883a 	add	r3,r4,r3
   19e84:	18c00204 	addi	r3,r3,8
   19e88:	190000c3 	ldbu	r4,3(r3)
   19e8c:	e0fff7c3 	ldbu	r3,-33(fp)
   19e90:	20c6b03a 	or	r3,r4,r3
   19e94:	1809883a 	mov	r4,r3
   19e98:	e0fff317 	ldw	r3,-52(fp)
   19e9c:	1885883a 	add	r2,r3,r2
   19ea0:	10800204 	addi	r2,r2,8
   19ea4:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   19ea8:	e0bff617 	ldw	r2,-40(fp)
   19eac:	10800817 	ldw	r2,32(r2)
   19eb0:	10004226 	beq	r2,zero,19fbc <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   19eb4:	e0bff617 	ldw	r2,-40(fp)
   19eb8:	10800817 	ldw	r2,32(r2)
   19ebc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   19ec0:	e0bff417 	ldw	r2,-48(fp)
   19ec4:	10800017 	ldw	r2,0(r2)
   19ec8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   19ecc:	00003906 	br	19fb4 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   19ed0:	e0bff803 	ldbu	r2,-32(fp)
   19ed4:	e0fff803 	ldbu	r3,-32(fp)
   19ed8:	e13ff317 	ldw	r4,-52(fp)
   19edc:	20c7883a 	add	r3,r4,r3
   19ee0:	18c00204 	addi	r3,r3,8
   19ee4:	18c000c3 	ldbu	r3,3(r3)
   19ee8:	1809883a 	mov	r4,r3
   19eec:	e0fff883 	ldbu	r3,-30(fp)
   19ef0:	00c6303a 	nor	r3,zero,r3
   19ef4:	20c6703a 	and	r3,r4,r3
   19ef8:	1809883a 	mov	r4,r3
   19efc:	e0fff317 	ldw	r3,-52(fp)
   19f00:	1885883a 	add	r2,r3,r2
   19f04:	10800204 	addi	r2,r2,8
   19f08:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   19f0c:	e0bff803 	ldbu	r2,-32(fp)
   19f10:	e0fff317 	ldw	r3,-52(fp)
   19f14:	1885883a 	add	r2,r3,r2
   19f18:	10800204 	addi	r2,r2,8
   19f1c:	108000c3 	ldbu	r2,3(r2)
   19f20:	10803fcc 	andi	r2,r2,255
   19f24:	1000091e 	bne	r2,zero,19f4c <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   19f28:	e0bff317 	ldw	r2,-52(fp)
   19f2c:	10800283 	ldbu	r2,10(r2)
   19f30:	1007883a 	mov	r3,r2
   19f34:	e0bff843 	ldbu	r2,-31(fp)
   19f38:	0084303a 	nor	r2,zero,r2
   19f3c:	1884703a 	and	r2,r3,r2
   19f40:	1007883a 	mov	r3,r2
   19f44:	e0bff317 	ldw	r2,-52(fp)
   19f48:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19f4c:	e0bff317 	ldw	r2,-52(fp)
   19f50:	10c00283 	ldbu	r3,10(r2)
   19f54:	e0bff783 	ldbu	r2,-34(fp)
   19f58:	1884b03a 	or	r2,r3,r2
   19f5c:	1007883a 	mov	r3,r2
   19f60:	e0bff317 	ldw	r2,-52(fp)
   19f64:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19f68:	e0bff703 	ldbu	r2,-36(fp)
   19f6c:	e0fff703 	ldbu	r3,-36(fp)
   19f70:	e13ff317 	ldw	r4,-52(fp)
   19f74:	20c7883a 	add	r3,r4,r3
   19f78:	18c00204 	addi	r3,r3,8
   19f7c:	190000c3 	ldbu	r4,3(r3)
   19f80:	e0fff7c3 	ldbu	r3,-33(fp)
   19f84:	20c6b03a 	or	r3,r4,r3
   19f88:	1809883a 	mov	r4,r3
   19f8c:	e0fff317 	ldw	r3,-52(fp)
   19f90:	1885883a 	add	r2,r3,r2
   19f94:	10800204 	addi	r2,r2,8
   19f98:	110000c5 	stb	r4,3(r2)
            pevents++;
   19f9c:	e0bff417 	ldw	r2,-48(fp)
   19fa0:	10800104 	addi	r2,r2,4
   19fa4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   19fa8:	e0bff417 	ldw	r2,-48(fp)
   19fac:	10800017 	ldw	r2,0(r2)
   19fb0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   19fb4:	e0bff317 	ldw	r2,-52(fp)
   19fb8:	103fc51e 	bne	r2,zero,19ed0 <__alt_mem_Flash_flash_data+0xf4019ed0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19fbc:	e0bff617 	ldw	r2,-40(fp)
   19fc0:	e0ffff03 	ldbu	r3,-4(fp)
   19fc4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   19fc8:	e0bff617 	ldw	r2,-40(fp)
   19fcc:	e0fff703 	ldbu	r3,-36(fp)
   19fd0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   19fd4:	e0bff617 	ldw	r2,-40(fp)
   19fd8:	e0fff743 	ldbu	r3,-35(fp)
   19fdc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   19fe0:	e0bff617 	ldw	r2,-40(fp)
   19fe4:	e0fff783 	ldbu	r3,-34(fp)
   19fe8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   19fec:	e0bff617 	ldw	r2,-40(fp)
   19ff0:	e0fff7c3 	ldbu	r3,-33(fp)
   19ff4:	10c00d45 	stb	r3,53(r2)
   19ff8:	e0bff517 	ldw	r2,-44(fp)
   19ffc:	e0bffd15 	stw	r2,-12(fp)
   1a000:	e0bffd17 	ldw	r2,-12(fp)
   1a004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a008:	008000b4 	movhi	r2,2
   1a00c:	108ff144 	addi	r2,r2,16325
   1a010:	10800003 	ldbu	r2,0(r2)
   1a014:	10803fcc 	andi	r2,r2,255
   1a018:	10800058 	cmpnei	r2,r2,1
   1a01c:	1000011e 	bne	r2,zero,1a024 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1a020:	0014a580 	call	14a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a024:	0005883a 	mov	r2,zero
}
   1a028:	e037883a 	mov	sp,fp
   1a02c:	dfc00117 	ldw	ra,4(sp)
   1a030:	df000017 	ldw	fp,0(sp)
   1a034:	dec00204 	addi	sp,sp,8
   1a038:	f800283a 	ret

0001a03c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1a03c:	deffee04 	addi	sp,sp,-72
   1a040:	dfc01115 	stw	ra,68(sp)
   1a044:	df001015 	stw	fp,64(sp)
   1a048:	df001004 	addi	fp,sp,64
   1a04c:	e13ffc15 	stw	r4,-16(fp)
   1a050:	e17ffd15 	stw	r5,-12(fp)
   1a054:	e1bffe15 	stw	r6,-8(fp)
   1a058:	3805883a 	mov	r2,r7
   1a05c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a060:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a064:	e0bfff03 	ldbu	r2,-4(fp)
   1a068:	10800570 	cmpltui	r2,r2,21
   1a06c:	1000021e 	bne	r2,zero,1a078 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1a070:	00800a84 	movi	r2,42
   1a074:	00005b06 	br	1a1e4 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a078:	0005303a 	rdctl	r2,status
   1a07c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a080:	e0fff617 	ldw	r3,-40(fp)
   1a084:	00bfff84 	movi	r2,-2
   1a088:	1884703a 	and	r2,r3,r2
   1a08c:	1001703a 	wrctl	status,r2
  
  return context;
   1a090:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a094:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a098:	008000b4 	movhi	r2,2
   1a09c:	108fff04 	addi	r2,r2,16380
   1a0a0:	10800003 	ldbu	r2,0(r2)
   1a0a4:	10803fcc 	andi	r2,r2,255
   1a0a8:	10000626 	beq	r2,zero,1a0c4 <OSTaskCreate+0x88>
   1a0ac:	e0bff317 	ldw	r2,-52(fp)
   1a0b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a0b4:	e0bff717 	ldw	r2,-36(fp)
   1a0b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a0bc:	00800f04 	movi	r2,60
   1a0c0:	00004806 	br	1a1e4 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a0c4:	e0ffff03 	ldbu	r3,-4(fp)
   1a0c8:	00800174 	movhi	r2,5
   1a0cc:	10a4a204 	addi	r2,r2,-28024
   1a0d0:	18c7883a 	add	r3,r3,r3
   1a0d4:	18c7883a 	add	r3,r3,r3
   1a0d8:	10c5883a 	add	r2,r2,r3
   1a0dc:	10800017 	ldw	r2,0(r2)
   1a0e0:	10003b1e 	bne	r2,zero,1a1d0 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a0e4:	e0ffff03 	ldbu	r3,-4(fp)
   1a0e8:	00800174 	movhi	r2,5
   1a0ec:	10a4a204 	addi	r2,r2,-28024
   1a0f0:	18c7883a 	add	r3,r3,r3
   1a0f4:	18c7883a 	add	r3,r3,r3
   1a0f8:	10c5883a 	add	r2,r2,r3
   1a0fc:	00c00044 	movi	r3,1
   1a100:	10c00015 	stw	r3,0(r2)
   1a104:	e0bff317 	ldw	r2,-52(fp)
   1a108:	e0bff815 	stw	r2,-32(fp)
   1a10c:	e0bff817 	ldw	r2,-32(fp)
   1a110:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1a114:	e13ffc17 	ldw	r4,-16(fp)
   1a118:	e17ffd17 	ldw	r5,-12(fp)
   1a11c:	e1bffe17 	ldw	r6,-8(fp)
   1a120:	000f883a 	mov	r7,zero
   1a124:	001ed300 	call	1ed30 <OSTaskStkInit>
   1a128:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1a12c:	e0bfff03 	ldbu	r2,-4(fp)
   1a130:	d8000015 	stw	zero,0(sp)
   1a134:	d8000115 	stw	zero,4(sp)
   1a138:	d8000215 	stw	zero,8(sp)
   1a13c:	1009883a 	mov	r4,r2
   1a140:	e17ff417 	ldw	r5,-48(fp)
   1a144:	000d883a 	mov	r6,zero
   1a148:	000f883a 	mov	r7,zero
   1a14c:	0014e5c0 	call	14e5c <OS_TCBInit>
   1a150:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1a154:	e0bff503 	ldbu	r2,-44(fp)
   1a158:	1000081e 	bne	r2,zero,1a17c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1a15c:	008000b4 	movhi	r2,2
   1a160:	108ff144 	addi	r2,r2,16325
   1a164:	10800003 	ldbu	r2,0(r2)
   1a168:	10803fcc 	andi	r2,r2,255
   1a16c:	10800058 	cmpnei	r2,r2,1
   1a170:	1000151e 	bne	r2,zero,1a1c8 <OSTaskCreate+0x18c>
                OS_Sched();
   1a174:	0014a580 	call	14a58 <OS_Sched>
   1a178:	00001306 	br	1a1c8 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a17c:	0005303a 	rdctl	r2,status
   1a180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a184:	e0fff917 	ldw	r3,-28(fp)
   1a188:	00bfff84 	movi	r2,-2
   1a18c:	1884703a 	and	r2,r3,r2
   1a190:	1001703a 	wrctl	status,r2
  
  return context;
   1a194:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a198:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1a19c:	e0ffff03 	ldbu	r3,-4(fp)
   1a1a0:	00800174 	movhi	r2,5
   1a1a4:	10a4a204 	addi	r2,r2,-28024
   1a1a8:	18c7883a 	add	r3,r3,r3
   1a1ac:	18c7883a 	add	r3,r3,r3
   1a1b0:	10c5883a 	add	r2,r2,r3
   1a1b4:	10000015 	stw	zero,0(r2)
   1a1b8:	e0bff317 	ldw	r2,-52(fp)
   1a1bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a1c0:	e0bffa17 	ldw	r2,-24(fp)
   1a1c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a1c8:	e0bff503 	ldbu	r2,-44(fp)
   1a1cc:	00000506 	br	1a1e4 <OSTaskCreate+0x1a8>
   1a1d0:	e0bff317 	ldw	r2,-52(fp)
   1a1d4:	e0bffb15 	stw	r2,-20(fp)
   1a1d8:	e0bffb17 	ldw	r2,-20(fp)
   1a1dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a1e0:	00800a04 	movi	r2,40
}
   1a1e4:	e037883a 	mov	sp,fp
   1a1e8:	dfc00117 	ldw	ra,4(sp)
   1a1ec:	df000017 	ldw	fp,0(sp)
   1a1f0:	dec00204 	addi	sp,sp,8
   1a1f4:	f800283a 	ret

0001a1f8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1a1f8:	deffec04 	addi	sp,sp,-80
   1a1fc:	dfc01315 	stw	ra,76(sp)
   1a200:	df001215 	stw	fp,72(sp)
   1a204:	df001204 	addi	fp,sp,72
   1a208:	e13ffa15 	stw	r4,-24(fp)
   1a20c:	e17ffb15 	stw	r5,-20(fp)
   1a210:	e1bffc15 	stw	r6,-16(fp)
   1a214:	3809883a 	mov	r4,r7
   1a218:	e0c00217 	ldw	r3,8(fp)
   1a21c:	e0800617 	ldw	r2,24(fp)
   1a220:	e13ffd05 	stb	r4,-12(fp)
   1a224:	e0fffe0d 	sth	r3,-8(fp)
   1a228:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a22c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a230:	e0bffd03 	ldbu	r2,-12(fp)
   1a234:	10800570 	cmpltui	r2,r2,21
   1a238:	1000021e 	bne	r2,zero,1a244 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1a23c:	00800a84 	movi	r2,42
   1a240:	00006306 	br	1a3d0 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a244:	0005303a 	rdctl	r2,status
   1a248:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a24c:	e0fff417 	ldw	r3,-48(fp)
   1a250:	00bfff84 	movi	r2,-2
   1a254:	1884703a 	and	r2,r3,r2
   1a258:	1001703a 	wrctl	status,r2
  
  return context;
   1a25c:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a260:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a264:	008000b4 	movhi	r2,2
   1a268:	108fff04 	addi	r2,r2,16380
   1a26c:	10800003 	ldbu	r2,0(r2)
   1a270:	10803fcc 	andi	r2,r2,255
   1a274:	10000626 	beq	r2,zero,1a290 <OSTaskCreateExt+0x98>
   1a278:	e0bff117 	ldw	r2,-60(fp)
   1a27c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a280:	e0bff517 	ldw	r2,-44(fp)
   1a284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a288:	00800f04 	movi	r2,60
   1a28c:	00005006 	br	1a3d0 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a290:	e0fffd03 	ldbu	r3,-12(fp)
   1a294:	00800174 	movhi	r2,5
   1a298:	10a4a204 	addi	r2,r2,-28024
   1a29c:	18c7883a 	add	r3,r3,r3
   1a2a0:	18c7883a 	add	r3,r3,r3
   1a2a4:	10c5883a 	add	r2,r2,r3
   1a2a8:	10800017 	ldw	r2,0(r2)
   1a2ac:	1000431e 	bne	r2,zero,1a3bc <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a2b0:	e0fffd03 	ldbu	r3,-12(fp)
   1a2b4:	00800174 	movhi	r2,5
   1a2b8:	10a4a204 	addi	r2,r2,-28024
   1a2bc:	18c7883a 	add	r3,r3,r3
   1a2c0:	18c7883a 	add	r3,r3,r3
   1a2c4:	10c5883a 	add	r2,r2,r3
   1a2c8:	00c00044 	movi	r3,1
   1a2cc:	10c00015 	stw	r3,0(r2)
   1a2d0:	e0bff117 	ldw	r2,-60(fp)
   1a2d4:	e0bff615 	stw	r2,-40(fp)
   1a2d8:	e0bff617 	ldw	r2,-40(fp)
   1a2dc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1a2e0:	e0bfff0b 	ldhu	r2,-4(fp)
   1a2e4:	e1000317 	ldw	r4,12(fp)
   1a2e8:	e1400417 	ldw	r5,16(fp)
   1a2ec:	100d883a 	mov	r6,r2
   1a2f0:	001b3840 	call	1b384 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1a2f4:	e0bfff0b 	ldhu	r2,-4(fp)
   1a2f8:	e13ffa17 	ldw	r4,-24(fp)
   1a2fc:	e17ffb17 	ldw	r5,-20(fp)
   1a300:	e1bffc17 	ldw	r6,-16(fp)
   1a304:	100f883a 	mov	r7,r2
   1a308:	001ed300 	call	1ed30 <OSTaskStkInit>
   1a30c:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1a310:	e13ffd03 	ldbu	r4,-12(fp)
   1a314:	e1fffe0b 	ldhu	r7,-8(fp)
   1a318:	e0bfff0b 	ldhu	r2,-4(fp)
   1a31c:	e0c00417 	ldw	r3,16(fp)
   1a320:	d8c00015 	stw	r3,0(sp)
   1a324:	e0c00517 	ldw	r3,20(fp)
   1a328:	d8c00115 	stw	r3,4(sp)
   1a32c:	d8800215 	stw	r2,8(sp)
   1a330:	e17ff217 	ldw	r5,-56(fp)
   1a334:	e1800317 	ldw	r6,12(fp)
   1a338:	0014e5c0 	call	14e5c <OS_TCBInit>
   1a33c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1a340:	e0bff303 	ldbu	r2,-52(fp)
   1a344:	1000081e 	bne	r2,zero,1a368 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1a348:	008000b4 	movhi	r2,2
   1a34c:	108ff144 	addi	r2,r2,16325
   1a350:	10800003 	ldbu	r2,0(r2)
   1a354:	10803fcc 	andi	r2,r2,255
   1a358:	10800058 	cmpnei	r2,r2,1
   1a35c:	1000151e 	bne	r2,zero,1a3b4 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1a360:	0014a580 	call	14a58 <OS_Sched>
   1a364:	00001306 	br	1a3b4 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a368:	0005303a 	rdctl	r2,status
   1a36c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a370:	e0fff717 	ldw	r3,-36(fp)
   1a374:	00bfff84 	movi	r2,-2
   1a378:	1884703a 	and	r2,r3,r2
   1a37c:	1001703a 	wrctl	status,r2
  
  return context;
   1a380:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a384:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1a388:	e0fffd03 	ldbu	r3,-12(fp)
   1a38c:	00800174 	movhi	r2,5
   1a390:	10a4a204 	addi	r2,r2,-28024
   1a394:	18c7883a 	add	r3,r3,r3
   1a398:	18c7883a 	add	r3,r3,r3
   1a39c:	10c5883a 	add	r2,r2,r3
   1a3a0:	10000015 	stw	zero,0(r2)
   1a3a4:	e0bff117 	ldw	r2,-60(fp)
   1a3a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a3ac:	e0bff817 	ldw	r2,-32(fp)
   1a3b0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a3b4:	e0bff303 	ldbu	r2,-52(fp)
   1a3b8:	00000506 	br	1a3d0 <OSTaskCreateExt+0x1d8>
   1a3bc:	e0bff117 	ldw	r2,-60(fp)
   1a3c0:	e0bff915 	stw	r2,-28(fp)
   1a3c4:	e0bff917 	ldw	r2,-28(fp)
   1a3c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a3cc:	00800a04 	movi	r2,40
}
   1a3d0:	e037883a 	mov	sp,fp
   1a3d4:	dfc00117 	ldw	ra,4(sp)
   1a3d8:	df000017 	ldw	fp,0(sp)
   1a3dc:	dec00204 	addi	sp,sp,8
   1a3e0:	f800283a 	ret

0001a3e4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1a3e4:	defff404 	addi	sp,sp,-48
   1a3e8:	dfc00b15 	stw	ra,44(sp)
   1a3ec:	df000a15 	stw	fp,40(sp)
   1a3f0:	df000a04 	addi	fp,sp,40
   1a3f4:	2005883a 	mov	r2,r4
   1a3f8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1a3fc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1a400:	008000b4 	movhi	r2,2
   1a404:	108fff04 	addi	r2,r2,16380
   1a408:	10800003 	ldbu	r2,0(r2)
   1a40c:	10803fcc 	andi	r2,r2,255
   1a410:	10000226 	beq	r2,zero,1a41c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1a414:	00801004 	movi	r2,64
   1a418:	0000e506 	br	1a7b0 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1a41c:	e0bfff03 	ldbu	r2,-4(fp)
   1a420:	10800518 	cmpnei	r2,r2,20
   1a424:	1000021e 	bne	r2,zero,1a430 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a428:	00800f84 	movi	r2,62
   1a42c:	0000e006 	br	1a7b0 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1a430:	e0bfff03 	ldbu	r2,-4(fp)
   1a434:	10800530 	cmpltui	r2,r2,20
   1a438:	1000051e 	bne	r2,zero,1a450 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1a43c:	e0bfff03 	ldbu	r2,-4(fp)
   1a440:	10803fe0 	cmpeqi	r2,r2,255
   1a444:	1000021e 	bne	r2,zero,1a450 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1a448:	00800a84 	movi	r2,42
   1a44c:	0000d806 	br	1a7b0 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a450:	0005303a 	rdctl	r2,status
   1a454:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a458:	e0fff917 	ldw	r3,-28(fp)
   1a45c:	00bfff84 	movi	r2,-2
   1a460:	1884703a 	and	r2,r3,r2
   1a464:	1001703a 	wrctl	status,r2
  
  return context;
   1a468:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1a46c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1a470:	e0bfff03 	ldbu	r2,-4(fp)
   1a474:	10803fd8 	cmpnei	r2,r2,255
   1a478:	1000051e 	bne	r2,zero,1a490 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1a47c:	008000b4 	movhi	r2,2
   1a480:	10900004 	addi	r2,r2,16384
   1a484:	10800017 	ldw	r2,0(r2)
   1a488:	10800c83 	ldbu	r2,50(r2)
   1a48c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a490:	e0ffff03 	ldbu	r3,-4(fp)
   1a494:	00800174 	movhi	r2,5
   1a498:	10a4a204 	addi	r2,r2,-28024
   1a49c:	18c7883a 	add	r3,r3,r3
   1a4a0:	18c7883a 	add	r3,r3,r3
   1a4a4:	10c5883a 	add	r2,r2,r3
   1a4a8:	10800017 	ldw	r2,0(r2)
   1a4ac:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1a4b0:	e0bff717 	ldw	r2,-36(fp)
   1a4b4:	1000061e 	bne	r2,zero,1a4d0 <OSTaskDel+0xec>
   1a4b8:	e0bff617 	ldw	r2,-40(fp)
   1a4bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4c0:	e0bffa17 	ldw	r2,-24(fp)
   1a4c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a4c8:	008010c4 	movi	r2,67
   1a4cc:	0000b806 	br	1a7b0 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1a4d0:	e0bff717 	ldw	r2,-36(fp)
   1a4d4:	10800058 	cmpnei	r2,r2,1
   1a4d8:	1000061e 	bne	r2,zero,1a4f4 <OSTaskDel+0x110>
   1a4dc:	e0bff617 	ldw	r2,-40(fp)
   1a4e0:	e0bffb15 	stw	r2,-20(fp)
   1a4e4:	e0bffb17 	ldw	r2,-20(fp)
   1a4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a4ec:	00800f44 	movi	r2,61
   1a4f0:	0000af06 	br	1a7b0 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1a4f4:	e0bff717 	ldw	r2,-36(fp)
   1a4f8:	10800d03 	ldbu	r2,52(r2)
   1a4fc:	10c03fcc 	andi	r3,r2,255
   1a500:	e0bff717 	ldw	r2,-36(fp)
   1a504:	10800d03 	ldbu	r2,52(r2)
   1a508:	11003fcc 	andi	r4,r2,255
   1a50c:	008000b4 	movhi	r2,2
   1a510:	108ffd44 	addi	r2,r2,16373
   1a514:	1105883a 	add	r2,r2,r4
   1a518:	10800003 	ldbu	r2,0(r2)
   1a51c:	1009883a 	mov	r4,r2
   1a520:	e0bff717 	ldw	r2,-36(fp)
   1a524:	10800d43 	ldbu	r2,53(r2)
   1a528:	0084303a 	nor	r2,zero,r2
   1a52c:	2084703a 	and	r2,r4,r2
   1a530:	1009883a 	mov	r4,r2
   1a534:	008000b4 	movhi	r2,2
   1a538:	108ffd44 	addi	r2,r2,16373
   1a53c:	10c5883a 	add	r2,r2,r3
   1a540:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1a544:	e0bff717 	ldw	r2,-36(fp)
   1a548:	10800d03 	ldbu	r2,52(r2)
   1a54c:	10c03fcc 	andi	r3,r2,255
   1a550:	008000b4 	movhi	r2,2
   1a554:	108ffd44 	addi	r2,r2,16373
   1a558:	10c5883a 	add	r2,r2,r3
   1a55c:	10800003 	ldbu	r2,0(r2)
   1a560:	10803fcc 	andi	r2,r2,255
   1a564:	10000c1e 	bne	r2,zero,1a598 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1a568:	e0bff717 	ldw	r2,-36(fp)
   1a56c:	10800d83 	ldbu	r2,54(r2)
   1a570:	0084303a 	nor	r2,zero,r2
   1a574:	1007883a 	mov	r3,r2
   1a578:	008000b4 	movhi	r2,2
   1a57c:	108ffd04 	addi	r2,r2,16372
   1a580:	10800003 	ldbu	r2,0(r2)
   1a584:	1884703a 	and	r2,r3,r2
   1a588:	1007883a 	mov	r3,r2
   1a58c:	008000b4 	movhi	r2,2
   1a590:	108ffd04 	addi	r2,r2,16372
   1a594:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1a598:	e0bff717 	ldw	r2,-36(fp)
   1a59c:	10800717 	ldw	r2,28(r2)
   1a5a0:	10000526 	beq	r2,zero,1a5b8 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1a5a4:	e0bff717 	ldw	r2,-36(fp)
   1a5a8:	10800717 	ldw	r2,28(r2)
   1a5ac:	e13ff717 	ldw	r4,-36(fp)
   1a5b0:	100b883a 	mov	r5,r2
   1a5b4:	00144300 	call	14430 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1a5b8:	e0bff717 	ldw	r2,-36(fp)
   1a5bc:	10800817 	ldw	r2,32(r2)
   1a5c0:	10000526 	beq	r2,zero,1a5d8 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1a5c4:	e0bff717 	ldw	r2,-36(fp)
   1a5c8:	10800817 	ldw	r2,32(r2)
   1a5cc:	e13ff717 	ldw	r4,-36(fp)
   1a5d0:	100b883a 	mov	r5,r2
   1a5d4:	00144e40 	call	144e4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1a5d8:	e0bff717 	ldw	r2,-36(fp)
   1a5dc:	10800a17 	ldw	r2,40(r2)
   1a5e0:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1a5e4:	e0bff817 	ldw	r2,-32(fp)
   1a5e8:	10000226 	beq	r2,zero,1a5f4 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1a5ec:	e13ff817 	ldw	r4,-32(fp)
   1a5f0:	0016a380 	call	16a38 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1a5f4:	e0bff717 	ldw	r2,-36(fp)
   1a5f8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1a5fc:	e0bff717 	ldw	r2,-36(fp)
   1a600:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1a604:	e0bff717 	ldw	r2,-36(fp)
   1a608:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1a60c:	008000b4 	movhi	r2,2
   1a610:	108ff104 	addi	r2,r2,16324
   1a614:	10800003 	ldbu	r2,0(r2)
   1a618:	10803fcc 	andi	r2,r2,255
   1a61c:	10803fe0 	cmpeqi	r2,r2,255
   1a620:	1000081e 	bne	r2,zero,1a644 <OSTaskDel+0x260>
        OSLockNesting++;
   1a624:	008000b4 	movhi	r2,2
   1a628:	108ff104 	addi	r2,r2,16324
   1a62c:	10800003 	ldbu	r2,0(r2)
   1a630:	10800044 	addi	r2,r2,1
   1a634:	1007883a 	mov	r3,r2
   1a638:	008000b4 	movhi	r2,2
   1a63c:	108ff104 	addi	r2,r2,16324
   1a640:	10c00005 	stb	r3,0(r2)
   1a644:	e0bff617 	ldw	r2,-40(fp)
   1a648:	e0bffc15 	stw	r2,-16(fp)
   1a64c:	e0bffc17 	ldw	r2,-16(fp)
   1a650:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1a654:	00140240 	call	14024 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a658:	0005303a 	rdctl	r2,status
   1a65c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a660:	e0fffd17 	ldw	r3,-12(fp)
   1a664:	00bfff84 	movi	r2,-2
   1a668:	1884703a 	and	r2,r3,r2
   1a66c:	1001703a 	wrctl	status,r2
  
  return context;
   1a670:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1a674:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1a678:	008000b4 	movhi	r2,2
   1a67c:	108ff104 	addi	r2,r2,16324
   1a680:	10800003 	ldbu	r2,0(r2)
   1a684:	10803fcc 	andi	r2,r2,255
   1a688:	10000826 	beq	r2,zero,1a6ac <OSTaskDel+0x2c8>
        OSLockNesting--;
   1a68c:	008000b4 	movhi	r2,2
   1a690:	108ff104 	addi	r2,r2,16324
   1a694:	10800003 	ldbu	r2,0(r2)
   1a698:	10bfffc4 	addi	r2,r2,-1
   1a69c:	1007883a 	mov	r3,r2
   1a6a0:	008000b4 	movhi	r2,2
   1a6a4:	108ff104 	addi	r2,r2,16324
   1a6a8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1a6ac:	e13ff717 	ldw	r4,-36(fp)
   1a6b0:	001eeac0 	call	1eeac <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1a6b4:	008000b4 	movhi	r2,2
   1a6b8:	108ff944 	addi	r2,r2,16357
   1a6bc:	10800003 	ldbu	r2,0(r2)
   1a6c0:	10bfffc4 	addi	r2,r2,-1
   1a6c4:	1007883a 	mov	r3,r2
   1a6c8:	008000b4 	movhi	r2,2
   1a6cc:	108ff944 	addi	r2,r2,16357
   1a6d0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1a6d4:	e0ffff03 	ldbu	r3,-4(fp)
   1a6d8:	00800174 	movhi	r2,5
   1a6dc:	10a4a204 	addi	r2,r2,-28024
   1a6e0:	18c7883a 	add	r3,r3,r3
   1a6e4:	18c7883a 	add	r3,r3,r3
   1a6e8:	10c5883a 	add	r2,r2,r3
   1a6ec:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1a6f0:	e0bff717 	ldw	r2,-36(fp)
   1a6f4:	10800617 	ldw	r2,24(r2)
   1a6f8:	1000091e 	bne	r2,zero,1a720 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1a6fc:	e0bff717 	ldw	r2,-36(fp)
   1a700:	10800517 	ldw	r2,20(r2)
   1a704:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1a708:	e0bff717 	ldw	r2,-36(fp)
   1a70c:	10c00517 	ldw	r3,20(r2)
   1a710:	008000b4 	movhi	r2,2
   1a714:	108ff404 	addi	r2,r2,16336
   1a718:	10c00015 	stw	r3,0(r2)
   1a71c:	00000a06 	br	1a748 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1a720:	e0bff717 	ldw	r2,-36(fp)
   1a724:	10800617 	ldw	r2,24(r2)
   1a728:	e0fff717 	ldw	r3,-36(fp)
   1a72c:	18c00517 	ldw	r3,20(r3)
   1a730:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1a734:	e0bff717 	ldw	r2,-36(fp)
   1a738:	10800517 	ldw	r2,20(r2)
   1a73c:	e0fff717 	ldw	r3,-36(fp)
   1a740:	18c00617 	ldw	r3,24(r3)
   1a744:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1a748:	008000b4 	movhi	r2,2
   1a74c:	108ff804 	addi	r2,r2,16352
   1a750:	10c00017 	ldw	r3,0(r2)
   1a754:	e0bff717 	ldw	r2,-36(fp)
   1a758:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1a75c:	008000b4 	movhi	r2,2
   1a760:	108ff804 	addi	r2,r2,16352
   1a764:	e0fff717 	ldw	r3,-36(fp)
   1a768:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1a76c:	e0bff717 	ldw	r2,-36(fp)
   1a770:	00c00fc4 	movi	r3,63
   1a774:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1a778:	e0bff717 	ldw	r2,-36(fp)
   1a77c:	10001345 	stb	zero,77(r2)
   1a780:	e0bff617 	ldw	r2,-40(fp)
   1a784:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a788:	e0bffe17 	ldw	r2,-8(fp)
   1a78c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a790:	008000b4 	movhi	r2,2
   1a794:	108ff144 	addi	r2,r2,16325
   1a798:	10800003 	ldbu	r2,0(r2)
   1a79c:	10803fcc 	andi	r2,r2,255
   1a7a0:	10800058 	cmpnei	r2,r2,1
   1a7a4:	1000011e 	bne	r2,zero,1a7ac <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1a7a8:	0014a580 	call	14a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a7ac:	0005883a 	mov	r2,zero
}
   1a7b0:	e037883a 	mov	sp,fp
   1a7b4:	dfc00117 	ldw	ra,4(sp)
   1a7b8:	df000017 	ldw	fp,0(sp)
   1a7bc:	dec00204 	addi	sp,sp,8
   1a7c0:	f800283a 	ret

0001a7c4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1a7c4:	defff504 	addi	sp,sp,-44
   1a7c8:	df000a15 	stw	fp,40(sp)
   1a7cc:	df000a04 	addi	fp,sp,40
   1a7d0:	2005883a 	mov	r2,r4
   1a7d4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a7d8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1a7dc:	e0bfff03 	ldbu	r2,-4(fp)
   1a7e0:	10800518 	cmpnei	r2,r2,20
   1a7e4:	1000021e 	bne	r2,zero,1a7f0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a7e8:	00800f84 	movi	r2,62
   1a7ec:	00004706 	br	1a90c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a7f0:	e0bfff03 	ldbu	r2,-4(fp)
   1a7f4:	10800530 	cmpltui	r2,r2,20
   1a7f8:	1000051e 	bne	r2,zero,1a810 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1a7fc:	e0bfff03 	ldbu	r2,-4(fp)
   1a800:	10803fe0 	cmpeqi	r2,r2,255
   1a804:	1000021e 	bne	r2,zero,1a810 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1a808:	00800a84 	movi	r2,42
   1a80c:	00003f06 	br	1a90c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1a810:	e0bfff03 	ldbu	r2,-4(fp)
   1a814:	10803fd8 	cmpnei	r2,r2,255
   1a818:	1000131e 	bne	r2,zero,1a868 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a81c:	0005303a 	rdctl	r2,status
   1a820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a824:	e0fff917 	ldw	r3,-28(fp)
   1a828:	00bfff84 	movi	r2,-2
   1a82c:	1884703a 	and	r2,r3,r2
   1a830:	1001703a 	wrctl	status,r2
  
  return context;
   1a834:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1a838:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1a83c:	008000b4 	movhi	r2,2
   1a840:	10900004 	addi	r2,r2,16384
   1a844:	10800017 	ldw	r2,0(r2)
   1a848:	10800dc3 	ldbu	r2,55(r2)
   1a84c:	e0bff705 	stb	r2,-36(fp)
   1a850:	e0bff617 	ldw	r2,-40(fp)
   1a854:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a858:	e0bffa17 	ldw	r2,-24(fp)
   1a85c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1a860:	e0bff703 	ldbu	r2,-36(fp)
   1a864:	00002906 	br	1a90c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a868:	0005303a 	rdctl	r2,status
   1a86c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a870:	e0fffb17 	ldw	r3,-20(fp)
   1a874:	00bfff84 	movi	r2,-2
   1a878:	1884703a 	and	r2,r3,r2
   1a87c:	1001703a 	wrctl	status,r2
  
  return context;
   1a880:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a884:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1a888:	e0ffff03 	ldbu	r3,-4(fp)
   1a88c:	00800174 	movhi	r2,5
   1a890:	10a4a204 	addi	r2,r2,-28024
   1a894:	18c7883a 	add	r3,r3,r3
   1a898:	18c7883a 	add	r3,r3,r3
   1a89c:	10c5883a 	add	r2,r2,r3
   1a8a0:	10800017 	ldw	r2,0(r2)
   1a8a4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1a8a8:	e0bff817 	ldw	r2,-32(fp)
   1a8ac:	1000061e 	bne	r2,zero,1a8c8 <OSTaskDelReq+0x104>
   1a8b0:	e0bff617 	ldw	r2,-40(fp)
   1a8b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a8b8:	e0bffc17 	ldw	r2,-16(fp)
   1a8bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1a8c0:	008010c4 	movi	r2,67
   1a8c4:	00001106 	br	1a90c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1a8c8:	e0bff817 	ldw	r2,-32(fp)
   1a8cc:	10800058 	cmpnei	r2,r2,1
   1a8d0:	1000061e 	bne	r2,zero,1a8ec <OSTaskDelReq+0x128>
   1a8d4:	e0bff617 	ldw	r2,-40(fp)
   1a8d8:	e0bffd15 	stw	r2,-12(fp)
   1a8dc:	e0bffd17 	ldw	r2,-12(fp)
   1a8e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a8e4:	00800f44 	movi	r2,61
   1a8e8:	00000806 	br	1a90c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1a8ec:	e0bff817 	ldw	r2,-32(fp)
   1a8f0:	00c00fc4 	movi	r3,63
   1a8f4:	10c00dc5 	stb	r3,55(r2)
   1a8f8:	e0bff617 	ldw	r2,-40(fp)
   1a8fc:	e0bffe15 	stw	r2,-8(fp)
   1a900:	e0bffe17 	ldw	r2,-8(fp)
   1a904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a908:	0005883a 	mov	r2,zero
}
   1a90c:	e037883a 	mov	sp,fp
   1a910:	df000017 	ldw	fp,0(sp)
   1a914:	dec00104 	addi	sp,sp,4
   1a918:	f800283a 	ret

0001a91c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1a91c:	defff404 	addi	sp,sp,-48
   1a920:	dfc00b15 	stw	ra,44(sp)
   1a924:	df000a15 	stw	fp,40(sp)
   1a928:	df000a04 	addi	fp,sp,40
   1a92c:	2005883a 	mov	r2,r4
   1a930:	e17ffe15 	stw	r5,-8(fp)
   1a934:	e1bfff15 	stw	r6,-4(fp)
   1a938:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1a93c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1a940:	e0bfff17 	ldw	r2,-4(fp)
   1a944:	1000021e 	bne	r2,zero,1a950 <OSTaskNameGet+0x34>
        return (0);
   1a948:	0005883a 	mov	r2,zero
   1a94c:	00005806 	br	1aab0 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1a950:	e0bffd03 	ldbu	r2,-12(fp)
   1a954:	10800570 	cmpltui	r2,r2,21
   1a958:	1000081e 	bne	r2,zero,1a97c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1a95c:	e0bffd03 	ldbu	r2,-12(fp)
   1a960:	10803fe0 	cmpeqi	r2,r2,255
   1a964:	1000051e 	bne	r2,zero,1a97c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1a968:	e0bfff17 	ldw	r2,-4(fp)
   1a96c:	00c00a84 	movi	r3,42
   1a970:	10c00005 	stb	r3,0(r2)
            return (0);
   1a974:	0005883a 	mov	r2,zero
   1a978:	00004d06 	br	1aab0 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1a97c:	e0bffe17 	ldw	r2,-8(fp)
   1a980:	1000051e 	bne	r2,zero,1a998 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1a984:	e0bfff17 	ldw	r2,-4(fp)
   1a988:	00c00304 	movi	r3,12
   1a98c:	10c00005 	stb	r3,0(r2)
        return (0);
   1a990:	0005883a 	mov	r2,zero
   1a994:	00004606 	br	1aab0 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1a998:	008000b4 	movhi	r2,2
   1a99c:	108fff04 	addi	r2,r2,16380
   1a9a0:	10800003 	ldbu	r2,0(r2)
   1a9a4:	10803fcc 	andi	r2,r2,255
   1a9a8:	10000526 	beq	r2,zero,1a9c0 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1a9ac:	e0bfff17 	ldw	r2,-4(fp)
   1a9b0:	00c00444 	movi	r3,17
   1a9b4:	10c00005 	stb	r3,0(r2)
        return (0);
   1a9b8:	0005883a 	mov	r2,zero
   1a9bc:	00003c06 	br	1aab0 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a9c0:	0005303a 	rdctl	r2,status
   1a9c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9c8:	e0fff917 	ldw	r3,-28(fp)
   1a9cc:	00bfff84 	movi	r2,-2
   1a9d0:	1884703a 	and	r2,r3,r2
   1a9d4:	1001703a 	wrctl	status,r2
  
  return context;
   1a9d8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1a9dc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1a9e0:	e0bffd03 	ldbu	r2,-12(fp)
   1a9e4:	10803fd8 	cmpnei	r2,r2,255
   1a9e8:	1000051e 	bne	r2,zero,1aa00 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1a9ec:	008000b4 	movhi	r2,2
   1a9f0:	10900004 	addi	r2,r2,16384
   1a9f4:	10800017 	ldw	r2,0(r2)
   1a9f8:	10800c83 	ldbu	r2,50(r2)
   1a9fc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1aa00:	e0fffd03 	ldbu	r3,-12(fp)
   1aa04:	00800174 	movhi	r2,5
   1aa08:	10a4a204 	addi	r2,r2,-28024
   1aa0c:	18c7883a 	add	r3,r3,r3
   1aa10:	18c7883a 	add	r3,r3,r3
   1aa14:	10c5883a 	add	r2,r2,r3
   1aa18:	10800017 	ldw	r2,0(r2)
   1aa1c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1aa20:	e0bff717 	ldw	r2,-36(fp)
   1aa24:	1000091e 	bne	r2,zero,1aa4c <OSTaskNameGet+0x130>
   1aa28:	e0bff617 	ldw	r2,-40(fp)
   1aa2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa30:	e0bffa17 	ldw	r2,-24(fp)
   1aa34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1aa38:	e0bfff17 	ldw	r2,-4(fp)
   1aa3c:	00c010c4 	movi	r3,67
   1aa40:	10c00005 	stb	r3,0(r2)
        return (0);
   1aa44:	0005883a 	mov	r2,zero
   1aa48:	00001906 	br	1aab0 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1aa4c:	e0bff717 	ldw	r2,-36(fp)
   1aa50:	10800058 	cmpnei	r2,r2,1
   1aa54:	1000091e 	bne	r2,zero,1aa7c <OSTaskNameGet+0x160>
   1aa58:	e0bff617 	ldw	r2,-40(fp)
   1aa5c:	e0bffb15 	stw	r2,-20(fp)
   1aa60:	e0bffb17 	ldw	r2,-20(fp)
   1aa64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1aa68:	e0bfff17 	ldw	r2,-4(fp)
   1aa6c:	00c010c4 	movi	r3,67
   1aa70:	10c00005 	stb	r3,0(r2)
        return (0);
   1aa74:	0005883a 	mov	r2,zero
   1aa78:	00000d06 	br	1aab0 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1aa7c:	e0bff717 	ldw	r2,-36(fp)
   1aa80:	10801304 	addi	r2,r2,76
   1aa84:	e13ffe17 	ldw	r4,-8(fp)
   1aa88:	100b883a 	mov	r5,r2
   1aa8c:	0014b940 	call	14b94 <OS_StrCopy>
   1aa90:	e0bff805 	stb	r2,-32(fp)
   1aa94:	e0bff617 	ldw	r2,-40(fp)
   1aa98:	e0bffc15 	stw	r2,-16(fp)
   1aa9c:	e0bffc17 	ldw	r2,-16(fp)
   1aaa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1aaa4:	e0bfff17 	ldw	r2,-4(fp)
   1aaa8:	10000005 	stb	zero,0(r2)
    return (len);
   1aaac:	e0bff803 	ldbu	r2,-32(fp)
}
   1aab0:	e037883a 	mov	sp,fp
   1aab4:	dfc00117 	ldw	ra,4(sp)
   1aab8:	df000017 	ldw	fp,0(sp)
   1aabc:	dec00204 	addi	sp,sp,8
   1aac0:	f800283a 	ret

0001aac4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1aac4:	defff304 	addi	sp,sp,-52
   1aac8:	dfc00c15 	stw	ra,48(sp)
   1aacc:	df000b15 	stw	fp,44(sp)
   1aad0:	df000b04 	addi	fp,sp,44
   1aad4:	2005883a 	mov	r2,r4
   1aad8:	e17ffe15 	stw	r5,-8(fp)
   1aadc:	e1bfff15 	stw	r6,-4(fp)
   1aae0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1aae4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1aae8:	e0bfff17 	ldw	r2,-4(fp)
   1aaec:	1000011e 	bne	r2,zero,1aaf4 <OSTaskNameSet+0x30>
        return;
   1aaf0:	00005f06 	br	1ac70 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1aaf4:	e0bffd03 	ldbu	r2,-12(fp)
   1aaf8:	10800570 	cmpltui	r2,r2,21
   1aafc:	1000071e 	bne	r2,zero,1ab1c <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1ab00:	e0bffd03 	ldbu	r2,-12(fp)
   1ab04:	10803fe0 	cmpeqi	r2,r2,255
   1ab08:	1000041e 	bne	r2,zero,1ab1c <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1ab0c:	e0bfff17 	ldw	r2,-4(fp)
   1ab10:	00c00a84 	movi	r3,42
   1ab14:	10c00005 	stb	r3,0(r2)
            return;
   1ab18:	00005506 	br	1ac70 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1ab1c:	e0bffe17 	ldw	r2,-8(fp)
   1ab20:	1000041e 	bne	r2,zero,1ab34 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1ab24:	e0bfff17 	ldw	r2,-4(fp)
   1ab28:	00c00304 	movi	r3,12
   1ab2c:	10c00005 	stb	r3,0(r2)
        return;
   1ab30:	00004f06 	br	1ac70 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1ab34:	008000b4 	movhi	r2,2
   1ab38:	108fff04 	addi	r2,r2,16380
   1ab3c:	10800003 	ldbu	r2,0(r2)
   1ab40:	10803fcc 	andi	r2,r2,255
   1ab44:	10000426 	beq	r2,zero,1ab58 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1ab48:	e0bfff17 	ldw	r2,-4(fp)
   1ab4c:	00c00484 	movi	r3,18
   1ab50:	10c00005 	stb	r3,0(r2)
        return;
   1ab54:	00004606 	br	1ac70 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab58:	0005303a 	rdctl	r2,status
   1ab5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab60:	e0fff817 	ldw	r3,-32(fp)
   1ab64:	00bfff84 	movi	r2,-2
   1ab68:	1884703a 	and	r2,r3,r2
   1ab6c:	1001703a 	wrctl	status,r2
  
  return context;
   1ab70:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1ab74:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1ab78:	e0bffd03 	ldbu	r2,-12(fp)
   1ab7c:	10803fd8 	cmpnei	r2,r2,255
   1ab80:	1000051e 	bne	r2,zero,1ab98 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1ab84:	008000b4 	movhi	r2,2
   1ab88:	10900004 	addi	r2,r2,16384
   1ab8c:	10800017 	ldw	r2,0(r2)
   1ab90:	10800c83 	ldbu	r2,50(r2)
   1ab94:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ab98:	e0fffd03 	ldbu	r3,-12(fp)
   1ab9c:	00800174 	movhi	r2,5
   1aba0:	10a4a204 	addi	r2,r2,-28024
   1aba4:	18c7883a 	add	r3,r3,r3
   1aba8:	18c7883a 	add	r3,r3,r3
   1abac:	10c5883a 	add	r2,r2,r3
   1abb0:	10800017 	ldw	r2,0(r2)
   1abb4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1abb8:	e0bff617 	ldw	r2,-40(fp)
   1abbc:	1000081e 	bne	r2,zero,1abe0 <OSTaskNameSet+0x11c>
   1abc0:	e0bff517 	ldw	r2,-44(fp)
   1abc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1abc8:	e0bff917 	ldw	r2,-28(fp)
   1abcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1abd0:	e0bfff17 	ldw	r2,-4(fp)
   1abd4:	00c010c4 	movi	r3,67
   1abd8:	10c00005 	stb	r3,0(r2)
        return;
   1abdc:	00002406 	br	1ac70 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1abe0:	e0bff617 	ldw	r2,-40(fp)
   1abe4:	10800058 	cmpnei	r2,r2,1
   1abe8:	1000081e 	bne	r2,zero,1ac0c <OSTaskNameSet+0x148>
   1abec:	e0bff517 	ldw	r2,-44(fp)
   1abf0:	e0bffa15 	stw	r2,-24(fp)
   1abf4:	e0bffa17 	ldw	r2,-24(fp)
   1abf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1abfc:	e0bfff17 	ldw	r2,-4(fp)
   1ac00:	00c010c4 	movi	r3,67
   1ac04:	10c00005 	stb	r3,0(r2)
        return;
   1ac08:	00001906 	br	1ac70 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1ac0c:	e13ffe17 	ldw	r4,-8(fp)
   1ac10:	0014c080 	call	14c08 <OS_StrLen>
   1ac14:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1ac18:	e0bff703 	ldbu	r2,-36(fp)
   1ac1c:	10800830 	cmpltui	r2,r2,32
   1ac20:	1000081e 	bne	r2,zero,1ac44 <OSTaskNameSet+0x180>
   1ac24:	e0bff517 	ldw	r2,-44(fp)
   1ac28:	e0bffb15 	stw	r2,-20(fp)
   1ac2c:	e0bffb17 	ldw	r2,-20(fp)
   1ac30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1ac34:	e0bfff17 	ldw	r2,-4(fp)
   1ac38:	00c01044 	movi	r3,65
   1ac3c:	10c00005 	stb	r3,0(r2)
        return;
   1ac40:	00000b06 	br	1ac70 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1ac44:	e0bff617 	ldw	r2,-40(fp)
   1ac48:	10801304 	addi	r2,r2,76
   1ac4c:	1009883a 	mov	r4,r2
   1ac50:	e17ffe17 	ldw	r5,-8(fp)
   1ac54:	0014b940 	call	14b94 <OS_StrCopy>
   1ac58:	e0bff517 	ldw	r2,-44(fp)
   1ac5c:	e0bffc15 	stw	r2,-16(fp)
   1ac60:	e0bffc17 	ldw	r2,-16(fp)
   1ac64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ac68:	e0bfff17 	ldw	r2,-4(fp)
   1ac6c:	10000005 	stb	zero,0(r2)
}
   1ac70:	e037883a 	mov	sp,fp
   1ac74:	dfc00117 	ldw	ra,4(sp)
   1ac78:	df000017 	ldw	fp,0(sp)
   1ac7c:	dec00204 	addi	sp,sp,8
   1ac80:	f800283a 	ret

0001ac84 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1ac84:	defff404 	addi	sp,sp,-48
   1ac88:	dfc00b15 	stw	ra,44(sp)
   1ac8c:	df000a15 	stw	fp,40(sp)
   1ac90:	df000a04 	addi	fp,sp,40
   1ac94:	2005883a 	mov	r2,r4
   1ac98:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1ac9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1aca0:	e0bfff03 	ldbu	r2,-4(fp)
   1aca4:	10800530 	cmpltui	r2,r2,20
   1aca8:	1000021e 	bne	r2,zero,1acb4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1acac:	00800a84 	movi	r2,42
   1acb0:	00006d06 	br	1ae68 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1acb4:	0005303a 	rdctl	r2,status
   1acb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1acbc:	e0fff817 	ldw	r3,-32(fp)
   1acc0:	00bfff84 	movi	r2,-2
   1acc4:	1884703a 	and	r2,r3,r2
   1acc8:	1001703a 	wrctl	status,r2
  
  return context;
   1accc:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1acd0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1acd4:	e0ffff03 	ldbu	r3,-4(fp)
   1acd8:	00800174 	movhi	r2,5
   1acdc:	10a4a204 	addi	r2,r2,-28024
   1ace0:	18c7883a 	add	r3,r3,r3
   1ace4:	18c7883a 	add	r3,r3,r3
   1ace8:	10c5883a 	add	r2,r2,r3
   1acec:	10800017 	ldw	r2,0(r2)
   1acf0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1acf4:	e0bff717 	ldw	r2,-36(fp)
   1acf8:	1000061e 	bne	r2,zero,1ad14 <OSTaskResume+0x90>
   1acfc:	e0bff617 	ldw	r2,-40(fp)
   1ad00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad04:	e0bff917 	ldw	r2,-28(fp)
   1ad08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1ad0c:	00801184 	movi	r2,70
   1ad10:	00005506 	br	1ae68 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1ad14:	e0bff717 	ldw	r2,-36(fp)
   1ad18:	10800058 	cmpnei	r2,r2,1
   1ad1c:	1000061e 	bne	r2,zero,1ad38 <OSTaskResume+0xb4>
   1ad20:	e0bff617 	ldw	r2,-40(fp)
   1ad24:	e0bffa15 	stw	r2,-24(fp)
   1ad28:	e0bffa17 	ldw	r2,-24(fp)
   1ad2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ad30:	008010c4 	movi	r2,67
   1ad34:	00004c06 	br	1ae68 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1ad38:	e0bff717 	ldw	r2,-36(fp)
   1ad3c:	10800c03 	ldbu	r2,48(r2)
   1ad40:	10803fcc 	andi	r2,r2,255
   1ad44:	1080020c 	andi	r2,r2,8
   1ad48:	10004226 	beq	r2,zero,1ae54 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1ad4c:	e0bff717 	ldw	r2,-36(fp)
   1ad50:	10c00c03 	ldbu	r3,48(r2)
   1ad54:	00bffdc4 	movi	r2,-9
   1ad58:	1884703a 	and	r2,r3,r2
   1ad5c:	1007883a 	mov	r3,r2
   1ad60:	e0bff717 	ldw	r2,-36(fp)
   1ad64:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1ad68:	e0bff717 	ldw	r2,-36(fp)
   1ad6c:	10800c03 	ldbu	r2,48(r2)
   1ad70:	10803fcc 	andi	r2,r2,255
   1ad74:	1000311e 	bne	r2,zero,1ae3c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1ad78:	e0bff717 	ldw	r2,-36(fp)
   1ad7c:	10800b8b 	ldhu	r2,46(r2)
   1ad80:	10bfffcc 	andi	r2,r2,65535
   1ad84:	1000281e 	bne	r2,zero,1ae28 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1ad88:	e0bff717 	ldw	r2,-36(fp)
   1ad8c:	10c00d83 	ldbu	r3,54(r2)
   1ad90:	008000b4 	movhi	r2,2
   1ad94:	108ffd04 	addi	r2,r2,16372
   1ad98:	10800003 	ldbu	r2,0(r2)
   1ad9c:	1884b03a 	or	r2,r3,r2
   1ada0:	1007883a 	mov	r3,r2
   1ada4:	008000b4 	movhi	r2,2
   1ada8:	108ffd04 	addi	r2,r2,16372
   1adac:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1adb0:	e0bff717 	ldw	r2,-36(fp)
   1adb4:	10800d03 	ldbu	r2,52(r2)
   1adb8:	10c03fcc 	andi	r3,r2,255
   1adbc:	e0bff717 	ldw	r2,-36(fp)
   1adc0:	10800d03 	ldbu	r2,52(r2)
   1adc4:	11003fcc 	andi	r4,r2,255
   1adc8:	008000b4 	movhi	r2,2
   1adcc:	108ffd44 	addi	r2,r2,16373
   1add0:	1105883a 	add	r2,r2,r4
   1add4:	11000003 	ldbu	r4,0(r2)
   1add8:	e0bff717 	ldw	r2,-36(fp)
   1addc:	10800d43 	ldbu	r2,53(r2)
   1ade0:	2084b03a 	or	r2,r4,r2
   1ade4:	1009883a 	mov	r4,r2
   1ade8:	008000b4 	movhi	r2,2
   1adec:	108ffd44 	addi	r2,r2,16373
   1adf0:	10c5883a 	add	r2,r2,r3
   1adf4:	11000005 	stb	r4,0(r2)
   1adf8:	e0bff617 	ldw	r2,-40(fp)
   1adfc:	e0bffb15 	stw	r2,-20(fp)
   1ae00:	e0bffb17 	ldw	r2,-20(fp)
   1ae04:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1ae08:	008000b4 	movhi	r2,2
   1ae0c:	108ff144 	addi	r2,r2,16325
   1ae10:	10800003 	ldbu	r2,0(r2)
   1ae14:	10803fcc 	andi	r2,r2,255
   1ae18:	10800058 	cmpnei	r2,r2,1
   1ae1c:	10000b1e 	bne	r2,zero,1ae4c <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1ae20:	0014a580 	call	14a58 <OS_Sched>
   1ae24:	00000906 	br	1ae4c <OSTaskResume+0x1c8>
   1ae28:	e0bff617 	ldw	r2,-40(fp)
   1ae2c:	e0bffc15 	stw	r2,-16(fp)
   1ae30:	e0bffc17 	ldw	r2,-16(fp)
   1ae34:	1001703a 	wrctl	status,r2
   1ae38:	00000406 	br	1ae4c <OSTaskResume+0x1c8>
   1ae3c:	e0bff617 	ldw	r2,-40(fp)
   1ae40:	e0bffd15 	stw	r2,-12(fp)
   1ae44:	e0bffd17 	ldw	r2,-12(fp)
   1ae48:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1ae4c:	0005883a 	mov	r2,zero
   1ae50:	00000506 	br	1ae68 <OSTaskResume+0x1e4>
   1ae54:	e0bff617 	ldw	r2,-40(fp)
   1ae58:	e0bffe15 	stw	r2,-8(fp)
   1ae5c:	e0bffe17 	ldw	r2,-8(fp)
   1ae60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1ae64:	00801104 	movi	r2,68
}
   1ae68:	e037883a 	mov	sp,fp
   1ae6c:	dfc00117 	ldw	ra,4(sp)
   1ae70:	df000017 	ldw	fp,0(sp)
   1ae74:	dec00204 	addi	sp,sp,8
   1ae78:	f800283a 	ret

0001ae7c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1ae7c:	defff304 	addi	sp,sp,-52
   1ae80:	df000c15 	stw	fp,48(sp)
   1ae84:	df000c04 	addi	fp,sp,48
   1ae88:	2005883a 	mov	r2,r4
   1ae8c:	e17fff15 	stw	r5,-4(fp)
   1ae90:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ae94:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1ae98:	e0bffe03 	ldbu	r2,-8(fp)
   1ae9c:	10800570 	cmpltui	r2,r2,21
   1aea0:	1000051e 	bne	r2,zero,1aeb8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1aea4:	e0bffe03 	ldbu	r2,-8(fp)
   1aea8:	10803fe0 	cmpeqi	r2,r2,255
   1aeac:	1000021e 	bne	r2,zero,1aeb8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1aeb0:	00800a84 	movi	r2,42
   1aeb4:	00005f06 	br	1b034 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1aeb8:	e0bfff17 	ldw	r2,-4(fp)
   1aebc:	1000021e 	bne	r2,zero,1aec8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1aec0:	00800244 	movi	r2,9
   1aec4:	00005b06 	br	1b034 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1aec8:	e0bfff17 	ldw	r2,-4(fp)
   1aecc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1aed0:	e0bfff17 	ldw	r2,-4(fp)
   1aed4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aed8:	0005303a 	rdctl	r2,status
   1aedc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aee0:	e0fff917 	ldw	r3,-28(fp)
   1aee4:	00bfff84 	movi	r2,-2
   1aee8:	1884703a 	and	r2,r3,r2
   1aeec:	1001703a 	wrctl	status,r2
  
  return context;
   1aef0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1aef4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1aef8:	e0bffe03 	ldbu	r2,-8(fp)
   1aefc:	10803fd8 	cmpnei	r2,r2,255
   1af00:	1000051e 	bne	r2,zero,1af18 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1af04:	008000b4 	movhi	r2,2
   1af08:	10900004 	addi	r2,r2,16384
   1af0c:	10800017 	ldw	r2,0(r2)
   1af10:	10800c83 	ldbu	r2,50(r2)
   1af14:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1af18:	e0fffe03 	ldbu	r3,-8(fp)
   1af1c:	00800174 	movhi	r2,5
   1af20:	10a4a204 	addi	r2,r2,-28024
   1af24:	18c7883a 	add	r3,r3,r3
   1af28:	18c7883a 	add	r3,r3,r3
   1af2c:	10c5883a 	add	r2,r2,r3
   1af30:	10800017 	ldw	r2,0(r2)
   1af34:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1af38:	e0bff717 	ldw	r2,-36(fp)
   1af3c:	1000061e 	bne	r2,zero,1af58 <OSTaskStkChk+0xdc>
   1af40:	e0bff617 	ldw	r2,-40(fp)
   1af44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af48:	e0bffa17 	ldw	r2,-24(fp)
   1af4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1af50:	008010c4 	movi	r2,67
   1af54:	00003706 	br	1b034 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1af58:	e0bff717 	ldw	r2,-36(fp)
   1af5c:	10800058 	cmpnei	r2,r2,1
   1af60:	1000061e 	bne	r2,zero,1af7c <OSTaskStkChk+0x100>
   1af64:	e0bff617 	ldw	r2,-40(fp)
   1af68:	e0bffb15 	stw	r2,-20(fp)
   1af6c:	e0bffb17 	ldw	r2,-20(fp)
   1af70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1af74:	008010c4 	movi	r2,67
   1af78:	00002e06 	br	1b034 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1af7c:	e0bff717 	ldw	r2,-36(fp)
   1af80:	1080040b 	ldhu	r2,16(r2)
   1af84:	10bfffcc 	andi	r2,r2,65535
   1af88:	1080004c 	andi	r2,r2,1
   1af8c:	1000061e 	bne	r2,zero,1afa8 <OSTaskStkChk+0x12c>
   1af90:	e0bff617 	ldw	r2,-40(fp)
   1af94:	e0bffc15 	stw	r2,-16(fp)
   1af98:	e0bffc17 	ldw	r2,-16(fp)
   1af9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1afa0:	00801144 	movi	r2,69
   1afa4:	00002306 	br	1b034 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1afa8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1afac:	e0bff717 	ldw	r2,-36(fp)
   1afb0:	10800317 	ldw	r2,12(r2)
   1afb4:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1afb8:	e0bff717 	ldw	r2,-36(fp)
   1afbc:	10800217 	ldw	r2,8(r2)
   1afc0:	e0bff415 	stw	r2,-48(fp)
   1afc4:	e0bff617 	ldw	r2,-40(fp)
   1afc8:	e0bffd15 	stw	r2,-12(fp)
   1afcc:	e0bffd17 	ldw	r2,-12(fp)
   1afd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1afd4:	00000306 	br	1afe4 <OSTaskStkChk+0x168>
        nfree++;
   1afd8:	e0bff517 	ldw	r2,-44(fp)
   1afdc:	10800044 	addi	r2,r2,1
   1afe0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1afe4:	e0bff417 	ldw	r2,-48(fp)
   1afe8:	10c00104 	addi	r3,r2,4
   1afec:	e0fff415 	stw	r3,-48(fp)
   1aff0:	10800017 	ldw	r2,0(r2)
   1aff4:	103ff826 	beq	r2,zero,1afd8 <__alt_mem_Flash_flash_data+0xf401afd8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1aff8:	e0bff517 	ldw	r2,-44(fp)
   1affc:	1085883a 	add	r2,r2,r2
   1b000:	1085883a 	add	r2,r2,r2
   1b004:	1007883a 	mov	r3,r2
   1b008:	e0bfff17 	ldw	r2,-4(fp)
   1b00c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1b010:	e0fff817 	ldw	r3,-32(fp)
   1b014:	e0bff517 	ldw	r2,-44(fp)
   1b018:	1885c83a 	sub	r2,r3,r2
   1b01c:	1085883a 	add	r2,r2,r2
   1b020:	1085883a 	add	r2,r2,r2
   1b024:	1007883a 	mov	r3,r2
   1b028:	e0bfff17 	ldw	r2,-4(fp)
   1b02c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1b030:	0005883a 	mov	r2,zero
}
   1b034:	e037883a 	mov	sp,fp
   1b038:	df000017 	ldw	fp,0(sp)
   1b03c:	dec00104 	addi	sp,sp,4
   1b040:	f800283a 	ret

0001b044 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1b044:	defff504 	addi	sp,sp,-44
   1b048:	dfc00a15 	stw	ra,40(sp)
   1b04c:	df000915 	stw	fp,36(sp)
   1b050:	df000904 	addi	fp,sp,36
   1b054:	2005883a 	mov	r2,r4
   1b058:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b05c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1b060:	e0bfff03 	ldbu	r2,-4(fp)
   1b064:	10800518 	cmpnei	r2,r2,20
   1b068:	1000021e 	bne	r2,zero,1b074 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1b06c:	008011c4 	movi	r2,71
   1b070:	00007406 	br	1b244 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b074:	e0bfff03 	ldbu	r2,-4(fp)
   1b078:	10800530 	cmpltui	r2,r2,20
   1b07c:	1000051e 	bne	r2,zero,1b094 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1b080:	e0bfff03 	ldbu	r2,-4(fp)
   1b084:	10803fe0 	cmpeqi	r2,r2,255
   1b088:	1000021e 	bne	r2,zero,1b094 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1b08c:	00800a84 	movi	r2,42
   1b090:	00006c06 	br	1b244 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b094:	0005303a 	rdctl	r2,status
   1b098:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b09c:	e0fffb17 	ldw	r3,-20(fp)
   1b0a0:	00bfff84 	movi	r2,-2
   1b0a4:	1884703a 	and	r2,r3,r2
   1b0a8:	1001703a 	wrctl	status,r2
  
  return context;
   1b0ac:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1b0b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1b0b4:	e0bfff03 	ldbu	r2,-4(fp)
   1b0b8:	10803fd8 	cmpnei	r2,r2,255
   1b0bc:	1000081e 	bne	r2,zero,1b0e0 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b0c0:	008000b4 	movhi	r2,2
   1b0c4:	10900004 	addi	r2,r2,16384
   1b0c8:	10800017 	ldw	r2,0(r2)
   1b0cc:	10800c83 	ldbu	r2,50(r2)
   1b0d0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1b0d4:	00800044 	movi	r2,1
   1b0d8:	e0bff705 	stb	r2,-36(fp)
   1b0dc:	00000b06 	br	1b10c <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1b0e0:	008000b4 	movhi	r2,2
   1b0e4:	10900004 	addi	r2,r2,16384
   1b0e8:	10800017 	ldw	r2,0(r2)
   1b0ec:	10800c83 	ldbu	r2,50(r2)
   1b0f0:	10c03fcc 	andi	r3,r2,255
   1b0f4:	e0bfff03 	ldbu	r2,-4(fp)
   1b0f8:	1880031e 	bne	r3,r2,1b108 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1b0fc:	00800044 	movi	r2,1
   1b100:	e0bff705 	stb	r2,-36(fp)
   1b104:	00000106 	br	1b10c <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1b108:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b10c:	e0ffff03 	ldbu	r3,-4(fp)
   1b110:	00800174 	movhi	r2,5
   1b114:	10a4a204 	addi	r2,r2,-28024
   1b118:	18c7883a 	add	r3,r3,r3
   1b11c:	18c7883a 	add	r3,r3,r3
   1b120:	10c5883a 	add	r2,r2,r3
   1b124:	10800017 	ldw	r2,0(r2)
   1b128:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1b12c:	e0bff917 	ldw	r2,-28(fp)
   1b130:	1000061e 	bne	r2,zero,1b14c <OSTaskSuspend+0x108>
   1b134:	e0bff817 	ldw	r2,-32(fp)
   1b138:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b13c:	e0bffc17 	ldw	r2,-16(fp)
   1b140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1b144:	00801204 	movi	r2,72
   1b148:	00003e06 	br	1b244 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1b14c:	e0bff917 	ldw	r2,-28(fp)
   1b150:	10800058 	cmpnei	r2,r2,1
   1b154:	1000061e 	bne	r2,zero,1b170 <OSTaskSuspend+0x12c>
   1b158:	e0bff817 	ldw	r2,-32(fp)
   1b15c:	e0bffd15 	stw	r2,-12(fp)
   1b160:	e0bffd17 	ldw	r2,-12(fp)
   1b164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b168:	008010c4 	movi	r2,67
   1b16c:	00003506 	br	1b244 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1b170:	e0bff917 	ldw	r2,-28(fp)
   1b174:	10800d03 	ldbu	r2,52(r2)
   1b178:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1b17c:	e0fffa03 	ldbu	r3,-24(fp)
   1b180:	e13ffa03 	ldbu	r4,-24(fp)
   1b184:	008000b4 	movhi	r2,2
   1b188:	108ffd44 	addi	r2,r2,16373
   1b18c:	1105883a 	add	r2,r2,r4
   1b190:	10800003 	ldbu	r2,0(r2)
   1b194:	1009883a 	mov	r4,r2
   1b198:	e0bff917 	ldw	r2,-28(fp)
   1b19c:	10800d43 	ldbu	r2,53(r2)
   1b1a0:	0084303a 	nor	r2,zero,r2
   1b1a4:	2084703a 	and	r2,r4,r2
   1b1a8:	1009883a 	mov	r4,r2
   1b1ac:	008000b4 	movhi	r2,2
   1b1b0:	108ffd44 	addi	r2,r2,16373
   1b1b4:	10c5883a 	add	r2,r2,r3
   1b1b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1b1bc:	e0fffa03 	ldbu	r3,-24(fp)
   1b1c0:	008000b4 	movhi	r2,2
   1b1c4:	108ffd44 	addi	r2,r2,16373
   1b1c8:	10c5883a 	add	r2,r2,r3
   1b1cc:	10800003 	ldbu	r2,0(r2)
   1b1d0:	10803fcc 	andi	r2,r2,255
   1b1d4:	10000c1e 	bne	r2,zero,1b208 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1b1d8:	e0bff917 	ldw	r2,-28(fp)
   1b1dc:	10800d83 	ldbu	r2,54(r2)
   1b1e0:	0084303a 	nor	r2,zero,r2
   1b1e4:	1007883a 	mov	r3,r2
   1b1e8:	008000b4 	movhi	r2,2
   1b1ec:	108ffd04 	addi	r2,r2,16372
   1b1f0:	10800003 	ldbu	r2,0(r2)
   1b1f4:	1884703a 	and	r2,r3,r2
   1b1f8:	1007883a 	mov	r3,r2
   1b1fc:	008000b4 	movhi	r2,2
   1b200:	108ffd04 	addi	r2,r2,16372
   1b204:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1b208:	e0bff917 	ldw	r2,-28(fp)
   1b20c:	10800c03 	ldbu	r2,48(r2)
   1b210:	10800214 	ori	r2,r2,8
   1b214:	1007883a 	mov	r3,r2
   1b218:	e0bff917 	ldw	r2,-28(fp)
   1b21c:	10c00c05 	stb	r3,48(r2)
   1b220:	e0bff817 	ldw	r2,-32(fp)
   1b224:	e0bffe15 	stw	r2,-8(fp)
   1b228:	e0bffe17 	ldw	r2,-8(fp)
   1b22c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1b230:	e0bff703 	ldbu	r2,-36(fp)
   1b234:	10800058 	cmpnei	r2,r2,1
   1b238:	1000011e 	bne	r2,zero,1b240 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1b23c:	0014a580 	call	14a58 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b240:	0005883a 	mov	r2,zero
}
   1b244:	e037883a 	mov	sp,fp
   1b248:	dfc00117 	ldw	ra,4(sp)
   1b24c:	df000017 	ldw	fp,0(sp)
   1b250:	dec00204 	addi	sp,sp,8
   1b254:	f800283a 	ret

0001b258 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1b258:	defff604 	addi	sp,sp,-40
   1b25c:	dfc00915 	stw	ra,36(sp)
   1b260:	df000815 	stw	fp,32(sp)
   1b264:	df000804 	addi	fp,sp,32
   1b268:	2005883a 	mov	r2,r4
   1b26c:	e17fff15 	stw	r5,-4(fp)
   1b270:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b274:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1b278:	e0bffe03 	ldbu	r2,-8(fp)
   1b27c:	10800570 	cmpltui	r2,r2,21
   1b280:	1000051e 	bne	r2,zero,1b298 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1b284:	e0bffe03 	ldbu	r2,-8(fp)
   1b288:	10803fe0 	cmpeqi	r2,r2,255
   1b28c:	1000021e 	bne	r2,zero,1b298 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1b290:	00800a84 	movi	r2,42
   1b294:	00003606 	br	1b370 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1b298:	e0bfff17 	ldw	r2,-4(fp)
   1b29c:	1000021e 	bne	r2,zero,1b2a8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1b2a0:	00800244 	movi	r2,9
   1b2a4:	00003206 	br	1b370 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b2a8:	0005303a 	rdctl	r2,status
   1b2ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2b0:	e0fffa17 	ldw	r3,-24(fp)
   1b2b4:	00bfff84 	movi	r2,-2
   1b2b8:	1884703a 	and	r2,r3,r2
   1b2bc:	1001703a 	wrctl	status,r2
  
  return context;
   1b2c0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b2c4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1b2c8:	e0bffe03 	ldbu	r2,-8(fp)
   1b2cc:	10803fd8 	cmpnei	r2,r2,255
   1b2d0:	1000051e 	bne	r2,zero,1b2e8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1b2d4:	008000b4 	movhi	r2,2
   1b2d8:	10900004 	addi	r2,r2,16384
   1b2dc:	10800017 	ldw	r2,0(r2)
   1b2e0:	10800c83 	ldbu	r2,50(r2)
   1b2e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b2e8:	e0fffe03 	ldbu	r3,-8(fp)
   1b2ec:	00800174 	movhi	r2,5
   1b2f0:	10a4a204 	addi	r2,r2,-28024
   1b2f4:	18c7883a 	add	r3,r3,r3
   1b2f8:	18c7883a 	add	r3,r3,r3
   1b2fc:	10c5883a 	add	r2,r2,r3
   1b300:	10800017 	ldw	r2,0(r2)
   1b304:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1b308:	e0bff917 	ldw	r2,-28(fp)
   1b30c:	1000061e 	bne	r2,zero,1b328 <OSTaskQuery+0xd0>
   1b310:	e0bff817 	ldw	r2,-32(fp)
   1b314:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b318:	e0bffb17 	ldw	r2,-20(fp)
   1b31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1b320:	00800a44 	movi	r2,41
   1b324:	00001206 	br	1b370 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1b328:	e0bff917 	ldw	r2,-28(fp)
   1b32c:	10800058 	cmpnei	r2,r2,1
   1b330:	1000061e 	bne	r2,zero,1b34c <OSTaskQuery+0xf4>
   1b334:	e0bff817 	ldw	r2,-32(fp)
   1b338:	e0bffc15 	stw	r2,-16(fp)
   1b33c:	e0bffc17 	ldw	r2,-16(fp)
   1b340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b344:	008010c4 	movi	r2,67
   1b348:	00000906 	br	1b370 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1b34c:	e13fff17 	ldw	r4,-4(fp)
   1b350:	e17ff917 	ldw	r5,-28(fp)
   1b354:	01801b04 	movi	r6,108
   1b358:	00149f40 	call	149f4 <OS_MemCopy>
   1b35c:	e0bff817 	ldw	r2,-32(fp)
   1b360:	e0bffd15 	stw	r2,-12(fp)
   1b364:	e0bffd17 	ldw	r2,-12(fp)
   1b368:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b36c:	0005883a 	mov	r2,zero
}
   1b370:	e037883a 	mov	sp,fp
   1b374:	dfc00117 	ldw	ra,4(sp)
   1b378:	df000017 	ldw	fp,0(sp)
   1b37c:	dec00204 	addi	sp,sp,8
   1b380:	f800283a 	ret

0001b384 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1b384:	defffc04 	addi	sp,sp,-16
   1b388:	df000315 	stw	fp,12(sp)
   1b38c:	df000304 	addi	fp,sp,12
   1b390:	e13ffd15 	stw	r4,-12(fp)
   1b394:	e17ffe15 	stw	r5,-8(fp)
   1b398:	3005883a 	mov	r2,r6
   1b39c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1b3a0:	e0bfff0b 	ldhu	r2,-4(fp)
   1b3a4:	1080004c 	andi	r2,r2,1
   1b3a8:	10000d26 	beq	r2,zero,1b3e0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1b3ac:	e0bfff0b 	ldhu	r2,-4(fp)
   1b3b0:	1080008c 	andi	r2,r2,2
   1b3b4:	10000a26 	beq	r2,zero,1b3e0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b3b8:	00000706 	br	1b3d8 <OS_TaskStkClr+0x54>
                size--;
   1b3bc:	e0bffe17 	ldw	r2,-8(fp)
   1b3c0:	10bfffc4 	addi	r2,r2,-1
   1b3c4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1b3c8:	e0bffd17 	ldw	r2,-12(fp)
   1b3cc:	10c00104 	addi	r3,r2,4
   1b3d0:	e0fffd15 	stw	r3,-12(fp)
   1b3d4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b3d8:	e0bffe17 	ldw	r2,-8(fp)
   1b3dc:	103ff71e 	bne	r2,zero,1b3bc <__alt_mem_Flash_flash_data+0xf401b3bc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1b3e0:	e037883a 	mov	sp,fp
   1b3e4:	df000017 	ldw	fp,0(sp)
   1b3e8:	dec00104 	addi	sp,sp,4
   1b3ec:	f800283a 	ret

0001b3f0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1b3f0:	defff904 	addi	sp,sp,-28
   1b3f4:	dfc00615 	stw	ra,24(sp)
   1b3f8:	df000515 	stw	fp,20(sp)
   1b3fc:	df000504 	addi	fp,sp,20
   1b400:	2005883a 	mov	r2,r4
   1b404:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b408:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b40c:	008000b4 	movhi	r2,2
   1b410:	108fff04 	addi	r2,r2,16380
   1b414:	10800003 	ldbu	r2,0(r2)
   1b418:	10803fcc 	andi	r2,r2,255
   1b41c:	10000126 	beq	r2,zero,1b424 <OSTimeDly+0x34>
        return;
   1b420:	00004006 	br	1b524 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1b424:	e0bfff0b 	ldhu	r2,-4(fp)
   1b428:	10003e26 	beq	r2,zero,1b524 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b42c:	0005303a 	rdctl	r2,status
   1b430:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b434:	e0fffd17 	ldw	r3,-12(fp)
   1b438:	00bfff84 	movi	r2,-2
   1b43c:	1884703a 	and	r2,r3,r2
   1b440:	1001703a 	wrctl	status,r2
  
  return context;
   1b444:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1b448:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1b44c:	008000b4 	movhi	r2,2
   1b450:	10900004 	addi	r2,r2,16384
   1b454:	10800017 	ldw	r2,0(r2)
   1b458:	10800d03 	ldbu	r2,52(r2)
   1b45c:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1b460:	e0fffc03 	ldbu	r3,-16(fp)
   1b464:	e13ffc03 	ldbu	r4,-16(fp)
   1b468:	008000b4 	movhi	r2,2
   1b46c:	108ffd44 	addi	r2,r2,16373
   1b470:	1105883a 	add	r2,r2,r4
   1b474:	10800003 	ldbu	r2,0(r2)
   1b478:	1009883a 	mov	r4,r2
   1b47c:	008000b4 	movhi	r2,2
   1b480:	10900004 	addi	r2,r2,16384
   1b484:	10800017 	ldw	r2,0(r2)
   1b488:	10800d43 	ldbu	r2,53(r2)
   1b48c:	0084303a 	nor	r2,zero,r2
   1b490:	2084703a 	and	r2,r4,r2
   1b494:	1009883a 	mov	r4,r2
   1b498:	008000b4 	movhi	r2,2
   1b49c:	108ffd44 	addi	r2,r2,16373
   1b4a0:	10c5883a 	add	r2,r2,r3
   1b4a4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1b4a8:	e0fffc03 	ldbu	r3,-16(fp)
   1b4ac:	008000b4 	movhi	r2,2
   1b4b0:	108ffd44 	addi	r2,r2,16373
   1b4b4:	10c5883a 	add	r2,r2,r3
   1b4b8:	10800003 	ldbu	r2,0(r2)
   1b4bc:	10803fcc 	andi	r2,r2,255
   1b4c0:	10000e1e 	bne	r2,zero,1b4fc <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1b4c4:	008000b4 	movhi	r2,2
   1b4c8:	10900004 	addi	r2,r2,16384
   1b4cc:	10800017 	ldw	r2,0(r2)
   1b4d0:	10800d83 	ldbu	r2,54(r2)
   1b4d4:	0084303a 	nor	r2,zero,r2
   1b4d8:	1007883a 	mov	r3,r2
   1b4dc:	008000b4 	movhi	r2,2
   1b4e0:	108ffd04 	addi	r2,r2,16372
   1b4e4:	10800003 	ldbu	r2,0(r2)
   1b4e8:	1884703a 	and	r2,r3,r2
   1b4ec:	1007883a 	mov	r3,r2
   1b4f0:	008000b4 	movhi	r2,2
   1b4f4:	108ffd04 	addi	r2,r2,16372
   1b4f8:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1b4fc:	008000b4 	movhi	r2,2
   1b500:	10900004 	addi	r2,r2,16384
   1b504:	10800017 	ldw	r2,0(r2)
   1b508:	e0ffff0b 	ldhu	r3,-4(fp)
   1b50c:	10c00b8d 	sth	r3,46(r2)
   1b510:	e0bffb17 	ldw	r2,-20(fp)
   1b514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b518:	e0bffe17 	ldw	r2,-8(fp)
   1b51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1b520:	0014a580 	call	14a58 <OS_Sched>
    }
}
   1b524:	e037883a 	mov	sp,fp
   1b528:	dfc00117 	ldw	ra,4(sp)
   1b52c:	df000017 	ldw	fp,0(sp)
   1b530:	dec00204 	addi	sp,sp,8
   1b534:	f800283a 	ret

0001b538 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1b538:	defff804 	addi	sp,sp,-32
   1b53c:	dfc00715 	stw	ra,28(sp)
   1b540:	df000615 	stw	fp,24(sp)
   1b544:	df000604 	addi	fp,sp,24
   1b548:	2015883a 	mov	r10,r4
   1b54c:	2809883a 	mov	r4,r5
   1b550:	3007883a 	mov	r3,r6
   1b554:	3805883a 	mov	r2,r7
   1b558:	e2bffc05 	stb	r10,-16(fp)
   1b55c:	e13ffd05 	stb	r4,-12(fp)
   1b560:	e0fffe05 	stb	r3,-8(fp)
   1b564:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b568:	008000b4 	movhi	r2,2
   1b56c:	108fff04 	addi	r2,r2,16380
   1b570:	10800003 	ldbu	r2,0(r2)
   1b574:	10803fcc 	andi	r2,r2,255
   1b578:	10000226 	beq	r2,zero,1b584 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1b57c:	00801544 	movi	r2,85
   1b580:	00004206 	br	1b68c <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1b584:	e0bffc03 	ldbu	r2,-16(fp)
   1b588:	1000081e 	bne	r2,zero,1b5ac <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1b58c:	e0bffd03 	ldbu	r2,-12(fp)
   1b590:	1000061e 	bne	r2,zero,1b5ac <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1b594:	e0bffe03 	ldbu	r2,-8(fp)
   1b598:	1000041e 	bne	r2,zero,1b5ac <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1b59c:	e0bfff0b 	ldhu	r2,-4(fp)
   1b5a0:	1000021e 	bne	r2,zero,1b5ac <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1b5a4:	00801504 	movi	r2,84
   1b5a8:	00003806 	br	1b68c <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1b5ac:	e0bffd03 	ldbu	r2,-12(fp)
   1b5b0:	10800f30 	cmpltui	r2,r2,60
   1b5b4:	1000021e 	bne	r2,zero,1b5c0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1b5b8:	00801444 	movi	r2,81
   1b5bc:	00003306 	br	1b68c <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1b5c0:	e0bffe03 	ldbu	r2,-8(fp)
   1b5c4:	10800f30 	cmpltui	r2,r2,60
   1b5c8:	1000021e 	bne	r2,zero,1b5d4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1b5cc:	00801484 	movi	r2,82
   1b5d0:	00002e06 	br	1b68c <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1b5d4:	e0bfff0b 	ldhu	r2,-4(fp)
   1b5d8:	1080fa30 	cmpltui	r2,r2,1000
   1b5dc:	1000021e 	bne	r2,zero,1b5e8 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1b5e0:	008014c4 	movi	r2,83
   1b5e4:	00002906 	br	1b68c <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b5e8:	e0bffc03 	ldbu	r2,-16(fp)
   1b5ec:	10c38424 	muli	r3,r2,3600
   1b5f0:	e0bffd03 	ldbu	r2,-12(fp)
   1b5f4:	10800f24 	muli	r2,r2,60
   1b5f8:	1887883a 	add	r3,r3,r2
   1b5fc:	e0bffe03 	ldbu	r2,-8(fp)
   1b600:	1885883a 	add	r2,r3,r2
   1b604:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1b608:	e0bfff0b 	ldhu	r2,-4(fp)
   1b60c:	10800f84 	addi	r2,r2,62
   1b610:	100690fa 	slli	r3,r2,3
   1b614:	008418b4 	movhi	r2,4194
   1b618:	109374c4 	addi	r2,r2,19923
   1b61c:	188a383a 	mulxuu	r5,r3,r2
   1b620:	1885383a 	mul	r2,r3,r2
   1b624:	1011883a 	mov	r8,r2
   1b628:	2813883a 	mov	r9,r5
   1b62c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b630:	2085883a 	add	r2,r4,r2
   1b634:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1b638:	e0bffb17 	ldw	r2,-20(fp)
   1b63c:	1004d43a 	srli	r2,r2,16
   1b640:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1b644:	e0bffb17 	ldw	r2,-20(fp)
   1b648:	10bfffcc 	andi	r2,r2,65535
   1b64c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1b650:	e0bffb17 	ldw	r2,-20(fp)
   1b654:	10bfffcc 	andi	r2,r2,65535
   1b658:	1009883a 	mov	r4,r2
   1b65c:	001b3f00 	call	1b3f0 <OSTimeDly>
    while (loops > 0) {
   1b660:	00000706 	br	1b680 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1b664:	01200014 	movui	r4,32768
   1b668:	001b3f00 	call	1b3f0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1b66c:	01200014 	movui	r4,32768
   1b670:	001b3f00 	call	1b3f0 <OSTimeDly>
        loops--;
   1b674:	e0bffa0b 	ldhu	r2,-24(fp)
   1b678:	10bfffc4 	addi	r2,r2,-1
   1b67c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1b680:	e0bffa0b 	ldhu	r2,-24(fp)
   1b684:	103ff71e 	bne	r2,zero,1b664 <__alt_mem_Flash_flash_data+0xf401b664>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1b688:	0005883a 	mov	r2,zero
}
   1b68c:	e037883a 	mov	sp,fp
   1b690:	dfc00117 	ldw	ra,4(sp)
   1b694:	df000017 	ldw	fp,0(sp)
   1b698:	dec00204 	addi	sp,sp,8
   1b69c:	f800283a 	ret

0001b6a0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1b6a0:	defff504 	addi	sp,sp,-44
   1b6a4:	dfc00a15 	stw	ra,40(sp)
   1b6a8:	df000915 	stw	fp,36(sp)
   1b6ac:	df000904 	addi	fp,sp,36
   1b6b0:	2005883a 	mov	r2,r4
   1b6b4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b6b8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1b6bc:	e0bfff03 	ldbu	r2,-4(fp)
   1b6c0:	10800530 	cmpltui	r2,r2,20
   1b6c4:	1000021e 	bne	r2,zero,1b6d0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b6c8:	00800a84 	movi	r2,42
   1b6cc:	00006b06 	br	1b87c <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6d0:	0005303a 	rdctl	r2,status
   1b6d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6d8:	e0fff917 	ldw	r3,-28(fp)
   1b6dc:	00bfff84 	movi	r2,-2
   1b6e0:	1884703a 	and	r2,r3,r2
   1b6e4:	1001703a 	wrctl	status,r2
  
  return context;
   1b6e8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1b6ec:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1b6f0:	e0ffff03 	ldbu	r3,-4(fp)
   1b6f4:	00800174 	movhi	r2,5
   1b6f8:	10a4a204 	addi	r2,r2,-28024
   1b6fc:	18c7883a 	add	r3,r3,r3
   1b700:	18c7883a 	add	r3,r3,r3
   1b704:	10c5883a 	add	r2,r2,r3
   1b708:	10800017 	ldw	r2,0(r2)
   1b70c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1b710:	e0bff817 	ldw	r2,-32(fp)
   1b714:	1000061e 	bne	r2,zero,1b730 <OSTimeDlyResume+0x90>
   1b718:	e0bff717 	ldw	r2,-36(fp)
   1b71c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b720:	e0bffa17 	ldw	r2,-24(fp)
   1b724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b728:	008010c4 	movi	r2,67
   1b72c:	00005306 	br	1b87c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b730:	e0bff817 	ldw	r2,-32(fp)
   1b734:	10800058 	cmpnei	r2,r2,1
   1b738:	1000061e 	bne	r2,zero,1b754 <OSTimeDlyResume+0xb4>
   1b73c:	e0bff717 	ldw	r2,-36(fp)
   1b740:	e0bffb15 	stw	r2,-20(fp)
   1b744:	e0bffb17 	ldw	r2,-20(fp)
   1b748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b74c:	008010c4 	movi	r2,67
   1b750:	00004a06 	br	1b87c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1b754:	e0bff817 	ldw	r2,-32(fp)
   1b758:	10800b8b 	ldhu	r2,46(r2)
   1b75c:	10bfffcc 	andi	r2,r2,65535
   1b760:	1000061e 	bne	r2,zero,1b77c <OSTimeDlyResume+0xdc>
   1b764:	e0bff717 	ldw	r2,-36(fp)
   1b768:	e0bffc15 	stw	r2,-16(fp)
   1b76c:	e0bffc17 	ldw	r2,-16(fp)
   1b770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1b774:	00801404 	movi	r2,80
   1b778:	00004006 	br	1b87c <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1b77c:	e0bff817 	ldw	r2,-32(fp)
   1b780:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1b784:	e0bff817 	ldw	r2,-32(fp)
   1b788:	10800c03 	ldbu	r2,48(r2)
   1b78c:	10803fcc 	andi	r2,r2,255
   1b790:	10800dcc 	andi	r2,r2,55
   1b794:	10000b26 	beq	r2,zero,1b7c4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1b798:	e0bff817 	ldw	r2,-32(fp)
   1b79c:	10c00c03 	ldbu	r3,48(r2)
   1b7a0:	00bff204 	movi	r2,-56
   1b7a4:	1884703a 	and	r2,r3,r2
   1b7a8:	1007883a 	mov	r3,r2
   1b7ac:	e0bff817 	ldw	r2,-32(fp)
   1b7b0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1b7b4:	e0bff817 	ldw	r2,-32(fp)
   1b7b8:	00c00044 	movi	r3,1
   1b7bc:	10c00c45 	stb	r3,49(r2)
   1b7c0:	00000206 	br	1b7cc <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1b7c4:	e0bff817 	ldw	r2,-32(fp)
   1b7c8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1b7cc:	e0bff817 	ldw	r2,-32(fp)
   1b7d0:	10800c03 	ldbu	r2,48(r2)
   1b7d4:	10803fcc 	andi	r2,r2,255
   1b7d8:	1080020c 	andi	r2,r2,8
   1b7dc:	1000221e 	bne	r2,zero,1b868 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1b7e0:	e0bff817 	ldw	r2,-32(fp)
   1b7e4:	10c00d83 	ldbu	r3,54(r2)
   1b7e8:	008000b4 	movhi	r2,2
   1b7ec:	108ffd04 	addi	r2,r2,16372
   1b7f0:	10800003 	ldbu	r2,0(r2)
   1b7f4:	1884b03a 	or	r2,r3,r2
   1b7f8:	1007883a 	mov	r3,r2
   1b7fc:	008000b4 	movhi	r2,2
   1b800:	108ffd04 	addi	r2,r2,16372
   1b804:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b808:	e0bff817 	ldw	r2,-32(fp)
   1b80c:	10800d03 	ldbu	r2,52(r2)
   1b810:	10c03fcc 	andi	r3,r2,255
   1b814:	e0bff817 	ldw	r2,-32(fp)
   1b818:	10800d03 	ldbu	r2,52(r2)
   1b81c:	11003fcc 	andi	r4,r2,255
   1b820:	008000b4 	movhi	r2,2
   1b824:	108ffd44 	addi	r2,r2,16373
   1b828:	1105883a 	add	r2,r2,r4
   1b82c:	11000003 	ldbu	r4,0(r2)
   1b830:	e0bff817 	ldw	r2,-32(fp)
   1b834:	10800d43 	ldbu	r2,53(r2)
   1b838:	2084b03a 	or	r2,r4,r2
   1b83c:	1009883a 	mov	r4,r2
   1b840:	008000b4 	movhi	r2,2
   1b844:	108ffd44 	addi	r2,r2,16373
   1b848:	10c5883a 	add	r2,r2,r3
   1b84c:	11000005 	stb	r4,0(r2)
   1b850:	e0bff717 	ldw	r2,-36(fp)
   1b854:	e0bffd15 	stw	r2,-12(fp)
   1b858:	e0bffd17 	ldw	r2,-12(fp)
   1b85c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1b860:	0014a580 	call	14a58 <OS_Sched>
   1b864:	00000406 	br	1b878 <OSTimeDlyResume+0x1d8>
   1b868:	e0bff717 	ldw	r2,-36(fp)
   1b86c:	e0bffe15 	stw	r2,-8(fp)
   1b870:	e0bffe17 	ldw	r2,-8(fp)
   1b874:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1b878:	0005883a 	mov	r2,zero
}
   1b87c:	e037883a 	mov	sp,fp
   1b880:	dfc00117 	ldw	ra,4(sp)
   1b884:	df000017 	ldw	fp,0(sp)
   1b888:	dec00204 	addi	sp,sp,8
   1b88c:	f800283a 	ret

0001b890 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1b890:	defffb04 	addi	sp,sp,-20
   1b894:	df000415 	stw	fp,16(sp)
   1b898:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b89c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8a0:	0005303a 	rdctl	r2,status
   1b8a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8a8:	e0fffe17 	ldw	r3,-8(fp)
   1b8ac:	00bfff84 	movi	r2,-2
   1b8b0:	1884703a 	and	r2,r3,r2
   1b8b4:	1001703a 	wrctl	status,r2
  
  return context;
   1b8b8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1b8bc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1b8c0:	008000b4 	movhi	r2,2
   1b8c4:	10900104 	addi	r2,r2,16388
   1b8c8:	10800017 	ldw	r2,0(r2)
   1b8cc:	e0bffd15 	stw	r2,-12(fp)
   1b8d0:	e0bffc17 	ldw	r2,-16(fp)
   1b8d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8d8:	e0bfff17 	ldw	r2,-4(fp)
   1b8dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1b8e0:	e0bffd17 	ldw	r2,-12(fp)
}
   1b8e4:	e037883a 	mov	sp,fp
   1b8e8:	df000017 	ldw	fp,0(sp)
   1b8ec:	dec00104 	addi	sp,sp,4
   1b8f0:	f800283a 	ret

0001b8f4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1b8f4:	defffb04 	addi	sp,sp,-20
   1b8f8:	df000415 	stw	fp,16(sp)
   1b8fc:	df000404 	addi	fp,sp,16
   1b900:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b904:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b908:	0005303a 	rdctl	r2,status
   1b90c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b910:	e0fffd17 	ldw	r3,-12(fp)
   1b914:	00bfff84 	movi	r2,-2
   1b918:	1884703a 	and	r2,r3,r2
   1b91c:	1001703a 	wrctl	status,r2
  
  return context;
   1b920:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1b924:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1b928:	008000b4 	movhi	r2,2
   1b92c:	10900104 	addi	r2,r2,16388
   1b930:	e0ffff17 	ldw	r3,-4(fp)
   1b934:	10c00015 	stw	r3,0(r2)
   1b938:	e0bffc17 	ldw	r2,-16(fp)
   1b93c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b940:	e0bffe17 	ldw	r2,-8(fp)
   1b944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1b948:	e037883a 	mov	sp,fp
   1b94c:	df000017 	ldw	fp,0(sp)
   1b950:	dec00104 	addi	sp,sp,4
   1b954:	f800283a 	ret

0001b958 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1b958:	defffd04 	addi	sp,sp,-12
   1b95c:	dfc00215 	stw	ra,8(sp)
   1b960:	df000115 	stw	fp,4(sp)
   1b964:	df000104 	addi	fp,sp,4
   1b968:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1b96c:	e13fff17 	ldw	r4,-4(fp)
   1b970:	014000b4 	movhi	r5,2
   1b974:	2947d404 	addi	r5,r5,8016
   1b978:	001e32c0 	call	1e32c <alt_dev_llist_insert>
}
   1b97c:	e037883a 	mov	sp,fp
   1b980:	dfc00117 	ldw	ra,4(sp)
   1b984:	df000017 	ldw	fp,0(sp)
   1b988:	dec00204 	addi	sp,sp,8
   1b98c:	f800283a 	ret

0001b990 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1b990:	defffd04 	addi	sp,sp,-12
   1b994:	dfc00215 	stw	ra,8(sp)
   1b998:	df000115 	stw	fp,4(sp)
   1b99c:	df000104 	addi	fp,sp,4
   1b9a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1b9a4:	001ec400 	call	1ec40 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1b9a8:	00800044 	movi	r2,1
   1b9ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1b9b0:	e037883a 	mov	sp,fp
   1b9b4:	dfc00117 	ldw	ra,4(sp)
   1b9b8:	df000017 	ldw	fp,0(sp)
   1b9bc:	dec00204 	addi	sp,sp,8
   1b9c0:	f800283a 	ret

0001b9c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1b9c4:	defffd04 	addi	sp,sp,-12
   1b9c8:	dfc00215 	stw	ra,8(sp)
   1b9cc:	df000115 	stw	fp,4(sp)
   1b9d0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1b9d4:	01040034 	movhi	r4,4096
   1b9d8:	21080004 	addi	r4,r4,8192
   1b9dc:	000b883a 	mov	r5,zero
   1b9e0:	000d883a 	mov	r6,zero
   1b9e4:	01c00204 	movi	r7,8
   1b9e8:	001cb380 	call	1cb38 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1b9ec:	010000b4 	movhi	r4,2
   1b9f0:	2102cd04 	addi	r4,r4,2868
   1b9f4:	000b883a 	mov	r5,zero
   1b9f8:	01800204 	movi	r6,8
   1b9fc:	001bf000 	call	1bf00 <altera_avalon_jtag_uart_init>
   1ba00:	010000b4 	movhi	r4,2
   1ba04:	2102c304 	addi	r4,r4,2828
   1ba08:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1ba0c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1ba10:	010000b4 	movhi	r4,2
   1ba14:	2106de04 	addi	r4,r4,7032
   1ba18:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1ba1c:	010000b4 	movhi	r4,2
   1ba20:	2106ea04 	addi	r4,r4,7080
   1ba24:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1ba28:	010000b4 	movhi	r4,2
   1ba2c:	2106f604 	addi	r4,r4,7128
   1ba30:	001cc680 	call	1cc68 <alt_up_character_lcd_init>
   1ba34:	010000b4 	movhi	r4,2
   1ba38:	2106f604 	addi	r4,r4,7128
   1ba3c:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1ba40:	010000b4 	movhi	r4,2
   1ba44:	21070104 	addi	r4,r4,7172
   1ba48:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1ba4c:	010000b4 	movhi	r4,2
   1ba50:	21070c04 	addi	r4,r4,7216
   1ba54:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1ba58:	010000b4 	movhi	r4,2
   1ba5c:	21071704 	addi	r4,r4,7260
   1ba60:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1ba64:	010000b4 	movhi	r4,2
   1ba68:	21072204 	addi	r4,r4,7304
   1ba6c:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1ba70:	010000b4 	movhi	r4,2
   1ba74:	21072d04 	addi	r4,r4,7348
   1ba78:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1ba7c:	010000b4 	movhi	r4,2
   1ba80:	21073804 	addi	r4,r4,7392
   1ba84:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1ba88:	010000b4 	movhi	r4,2
   1ba8c:	21074304 	addi	r4,r4,7436
   1ba90:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1ba94:	010000b4 	movhi	r4,2
   1ba98:	21074e04 	addi	r4,r4,7480
   1ba9c:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1baa0:	010000b4 	movhi	r4,2
   1baa4:	21075904 	addi	r4,r4,7524
   1baa8:	001d5800 	call	1d580 <alt_up_ps2_init>
   1baac:	010000b4 	movhi	r4,2
   1bab0:	21075904 	addi	r4,r4,7524
   1bab4:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1bab8:	010000b4 	movhi	r4,2
   1babc:	21076704 	addi	r4,r4,7580
   1bac0:	001d5800 	call	1d580 <alt_up_ps2_init>
   1bac4:	010000b4 	movhi	r4,2
   1bac8:	21076704 	addi	r4,r4,7580
   1bacc:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1bad0:	010000b4 	movhi	r4,2
   1bad4:	21077504 	addi	r4,r4,7636
   1bad8:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1badc:	010000b4 	movhi	r4,2
   1bae0:	21078004 	addi	r4,r4,7680
   1bae4:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1bae8:	008000b4 	movhi	r2,2
   1baec:	10878d04 	addi	r2,r2,7732
   1baf0:	10800a17 	ldw	r2,40(r2)
   1baf4:	10800104 	addi	r2,r2,4
   1baf8:	10800017 	ldw	r2,0(r2)
   1bafc:	10ffffcc 	andi	r3,r2,65535
   1bb00:	008000b4 	movhi	r2,2
   1bb04:	10878d04 	addi	r2,r2,7732
   1bb08:	10c00c15 	stw	r3,48(r2)
   1bb0c:	008000b4 	movhi	r2,2
   1bb10:	10878d04 	addi	r2,r2,7732
   1bb14:	10800a17 	ldw	r2,40(r2)
   1bb18:	10800104 	addi	r2,r2,4
   1bb1c:	10800017 	ldw	r2,0(r2)
   1bb20:	1006d43a 	srli	r3,r2,16
   1bb24:	008000b4 	movhi	r2,2
   1bb28:	10878d04 	addi	r2,r2,7732
   1bb2c:	10c00d15 	stw	r3,52(r2)
   1bb30:	008000b4 	movhi	r2,2
   1bb34:	10878d04 	addi	r2,r2,7732
   1bb38:	10800c17 	ldw	r2,48(r2)
   1bb3c:	10801068 	cmpgeui	r2,r2,65
   1bb40:	1000081e 	bne	r2,zero,1bb64 <alt_sys_init+0x1a0>
   1bb44:	008000b4 	movhi	r2,2
   1bb48:	10878d04 	addi	r2,r2,7732
   1bb4c:	00c00fc4 	movi	r3,63
   1bb50:	10c00f15 	stw	r3,60(r2)
   1bb54:	008000b4 	movhi	r2,2
   1bb58:	10878d04 	addi	r2,r2,7732
   1bb5c:	00c00184 	movi	r3,6
   1bb60:	10c01015 	stw	r3,64(r2)
   1bb64:	008000b4 	movhi	r2,2
   1bb68:	10878d04 	addi	r2,r2,7732
   1bb6c:	10800d17 	ldw	r2,52(r2)
   1bb70:	10800868 	cmpgeui	r2,r2,33
   1bb74:	1000041e 	bne	r2,zero,1bb88 <alt_sys_init+0x1c4>
   1bb78:	008000b4 	movhi	r2,2
   1bb7c:	10878d04 	addi	r2,r2,7732
   1bb80:	00c007c4 	movi	r3,31
   1bb84:	10c01115 	stw	r3,68(r2)
   1bb88:	010000b4 	movhi	r4,2
   1bb8c:	21078d04 	addi	r4,r4,7732
   1bb90:	001de980 	call	1de98 <alt_up_char_buffer_init>
   1bb94:	010000b4 	movhi	r4,2
   1bb98:	21078d04 	addi	r4,r4,7732
   1bb9c:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1bba0:	008000b4 	movhi	r2,2
   1bba4:	10879f04 	addi	r2,r2,7804
   1bba8:	10800a17 	ldw	r2,40(r2)
   1bbac:	10800017 	ldw	r2,0(r2)
   1bbb0:	1007883a 	mov	r3,r2
   1bbb4:	008000b4 	movhi	r2,2
   1bbb8:	10879f04 	addi	r2,r2,7804
   1bbbc:	10c00b15 	stw	r3,44(r2)
   1bbc0:	008000b4 	movhi	r2,2
   1bbc4:	10879f04 	addi	r2,r2,7804
   1bbc8:	10800a17 	ldw	r2,40(r2)
   1bbcc:	10800104 	addi	r2,r2,4
   1bbd0:	10800017 	ldw	r2,0(r2)
   1bbd4:	1007883a 	mov	r3,r2
   1bbd8:	008000b4 	movhi	r2,2
   1bbdc:	10879f04 	addi	r2,r2,7804
   1bbe0:	10c00c15 	stw	r3,48(r2)
   1bbe4:	008000b4 	movhi	r2,2
   1bbe8:	10879f04 	addi	r2,r2,7804
   1bbec:	10800a17 	ldw	r2,40(r2)
   1bbf0:	10800204 	addi	r2,r2,8
   1bbf4:	10800017 	ldw	r2,0(r2)
   1bbf8:	10ffffcc 	andi	r3,r2,65535
   1bbfc:	008000b4 	movhi	r2,2
   1bc00:	10879f04 	addi	r2,r2,7804
   1bc04:	10c00f15 	stw	r3,60(r2)
   1bc08:	008000b4 	movhi	r2,2
   1bc0c:	10879f04 	addi	r2,r2,7804
   1bc10:	10800a17 	ldw	r2,40(r2)
   1bc14:	10800204 	addi	r2,r2,8
   1bc18:	10800017 	ldw	r2,0(r2)
   1bc1c:	1006d43a 	srli	r3,r2,16
   1bc20:	008000b4 	movhi	r2,2
   1bc24:	10879f04 	addi	r2,r2,7804
   1bc28:	10c01015 	stw	r3,64(r2)
   1bc2c:	008000b4 	movhi	r2,2
   1bc30:	10879f04 	addi	r2,r2,7804
   1bc34:	10800a17 	ldw	r2,40(r2)
   1bc38:	10800304 	addi	r2,r2,12
   1bc3c:	10800017 	ldw	r2,0(r2)
   1bc40:	1005d07a 	srai	r2,r2,1
   1bc44:	10c0004c 	andi	r3,r2,1
   1bc48:	008000b4 	movhi	r2,2
   1bc4c:	10879f04 	addi	r2,r2,7804
   1bc50:	10c00d15 	stw	r3,52(r2)
   1bc54:	008000b4 	movhi	r2,2
   1bc58:	10879f04 	addi	r2,r2,7804
   1bc5c:	10800a17 	ldw	r2,40(r2)
   1bc60:	10800304 	addi	r2,r2,12
   1bc64:	10800017 	ldw	r2,0(r2)
   1bc68:	1005d13a 	srai	r2,r2,4
   1bc6c:	10c003cc 	andi	r3,r2,15
   1bc70:	008000b4 	movhi	r2,2
   1bc74:	10879f04 	addi	r2,r2,7804
   1bc78:	10c00e15 	stw	r3,56(r2)
   1bc7c:	008000b4 	movhi	r2,2
   1bc80:	10879f04 	addi	r2,r2,7804
   1bc84:	10800a17 	ldw	r2,40(r2)
   1bc88:	10800304 	addi	r2,r2,12
   1bc8c:	10800017 	ldw	r2,0(r2)
   1bc90:	1005d43a 	srai	r2,r2,16
   1bc94:	e0bfff05 	stb	r2,-4(fp)
   1bc98:	008000b4 	movhi	r2,2
   1bc9c:	10879f04 	addi	r2,r2,7804
   1bca0:	10800a17 	ldw	r2,40(r2)
   1bca4:	10800304 	addi	r2,r2,12
   1bca8:	10800017 	ldw	r2,0(r2)
   1bcac:	1004d63a 	srli	r2,r2,24
   1bcb0:	e0bfff45 	stb	r2,-3(fp)
   1bcb4:	008000b4 	movhi	r2,2
   1bcb8:	10879f04 	addi	r2,r2,7804
   1bcbc:	10800e17 	ldw	r2,56(r2)
   1bcc0:	10800058 	cmpnei	r2,r2,1
   1bcc4:	1000041e 	bne	r2,zero,1bcd8 <alt_sys_init+0x314>
   1bcc8:	008000b4 	movhi	r2,2
   1bccc:	10879f04 	addi	r2,r2,7804
   1bcd0:	10001115 	stw	zero,68(r2)
   1bcd4:	00000e06 	br	1bd10 <alt_sys_init+0x34c>
   1bcd8:	008000b4 	movhi	r2,2
   1bcdc:	10879f04 	addi	r2,r2,7804
   1bce0:	10800e17 	ldw	r2,56(r2)
   1bce4:	10800098 	cmpnei	r2,r2,2
   1bce8:	1000051e 	bne	r2,zero,1bd00 <alt_sys_init+0x33c>
   1bcec:	008000b4 	movhi	r2,2
   1bcf0:	10879f04 	addi	r2,r2,7804
   1bcf4:	00c00044 	movi	r3,1
   1bcf8:	10c01115 	stw	r3,68(r2)
   1bcfc:	00000406 	br	1bd10 <alt_sys_init+0x34c>
   1bd00:	008000b4 	movhi	r2,2
   1bd04:	10879f04 	addi	r2,r2,7804
   1bd08:	00c00084 	movi	r3,2
   1bd0c:	10c01115 	stw	r3,68(r2)
   1bd10:	e0bfff03 	ldbu	r2,-4(fp)
   1bd14:	00c00804 	movi	r3,32
   1bd18:	1885c83a 	sub	r2,r3,r2
   1bd1c:	00ffffc4 	movi	r3,-1
   1bd20:	1886d83a 	srl	r3,r3,r2
   1bd24:	008000b4 	movhi	r2,2
   1bd28:	10879f04 	addi	r2,r2,7804
   1bd2c:	10c01215 	stw	r3,72(r2)
   1bd30:	e0ffff03 	ldbu	r3,-4(fp)
   1bd34:	008000b4 	movhi	r2,2
   1bd38:	10879f04 	addi	r2,r2,7804
   1bd3c:	10801117 	ldw	r2,68(r2)
   1bd40:	1887883a 	add	r3,r3,r2
   1bd44:	008000b4 	movhi	r2,2
   1bd48:	10879f04 	addi	r2,r2,7804
   1bd4c:	10c01315 	stw	r3,76(r2)
   1bd50:	e0bfff43 	ldbu	r2,-3(fp)
   1bd54:	00c00804 	movi	r3,32
   1bd58:	1885c83a 	sub	r2,r3,r2
   1bd5c:	00ffffc4 	movi	r3,-1
   1bd60:	1886d83a 	srl	r3,r3,r2
   1bd64:	008000b4 	movhi	r2,2
   1bd68:	10879f04 	addi	r2,r2,7804
   1bd6c:	10c01415 	stw	r3,80(r2)
   1bd70:	010000b4 	movhi	r4,2
   1bd74:	21079f04 	addi	r4,r4,7804
   1bd78:	001b9580 	call	1b958 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1bd7c:	010000b4 	movhi	r4,2
   1bd80:	2107b404 	addi	r4,r4,7888
   1bd84:	001b9580 	call	1b958 <alt_dev_reg>
}
   1bd88:	e037883a 	mov	sp,fp
   1bd8c:	dfc00117 	ldw	ra,4(sp)
   1bd90:	df000017 	ldw	fp,0(sp)
   1bd94:	dec00204 	addi	sp,sp,8
   1bd98:	f800283a 	ret

0001bd9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1bd9c:	defffa04 	addi	sp,sp,-24
   1bda0:	dfc00515 	stw	ra,20(sp)
   1bda4:	df000415 	stw	fp,16(sp)
   1bda8:	df000404 	addi	fp,sp,16
   1bdac:	e13ffd15 	stw	r4,-12(fp)
   1bdb0:	e17ffe15 	stw	r5,-8(fp)
   1bdb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bdb8:	e0bffd17 	ldw	r2,-12(fp)
   1bdbc:	10800017 	ldw	r2,0(r2)
   1bdc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1bdc4:	e0bffc17 	ldw	r2,-16(fp)
   1bdc8:	10c00a04 	addi	r3,r2,40
   1bdcc:	e0bffd17 	ldw	r2,-12(fp)
   1bdd0:	10800217 	ldw	r2,8(r2)
   1bdd4:	1809883a 	mov	r4,r3
   1bdd8:	e17ffe17 	ldw	r5,-8(fp)
   1bddc:	e1bfff17 	ldw	r6,-4(fp)
   1bde0:	100f883a 	mov	r7,r2
   1bde4:	001c54c0 	call	1c54c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1bde8:	e037883a 	mov	sp,fp
   1bdec:	dfc00117 	ldw	ra,4(sp)
   1bdf0:	df000017 	ldw	fp,0(sp)
   1bdf4:	dec00204 	addi	sp,sp,8
   1bdf8:	f800283a 	ret

0001bdfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1bdfc:	defffa04 	addi	sp,sp,-24
   1be00:	dfc00515 	stw	ra,20(sp)
   1be04:	df000415 	stw	fp,16(sp)
   1be08:	df000404 	addi	fp,sp,16
   1be0c:	e13ffd15 	stw	r4,-12(fp)
   1be10:	e17ffe15 	stw	r5,-8(fp)
   1be14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1be18:	e0bffd17 	ldw	r2,-12(fp)
   1be1c:	10800017 	ldw	r2,0(r2)
   1be20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1be24:	e0bffc17 	ldw	r2,-16(fp)
   1be28:	10c00a04 	addi	r3,r2,40
   1be2c:	e0bffd17 	ldw	r2,-12(fp)
   1be30:	10800217 	ldw	r2,8(r2)
   1be34:	1809883a 	mov	r4,r3
   1be38:	e17ffe17 	ldw	r5,-8(fp)
   1be3c:	e1bfff17 	ldw	r6,-4(fp)
   1be40:	100f883a 	mov	r7,r2
   1be44:	001c8000 	call	1c800 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1be48:	e037883a 	mov	sp,fp
   1be4c:	dfc00117 	ldw	ra,4(sp)
   1be50:	df000017 	ldw	fp,0(sp)
   1be54:	dec00204 	addi	sp,sp,8
   1be58:	f800283a 	ret

0001be5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1be5c:	defffc04 	addi	sp,sp,-16
   1be60:	dfc00315 	stw	ra,12(sp)
   1be64:	df000215 	stw	fp,8(sp)
   1be68:	df000204 	addi	fp,sp,8
   1be6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1be70:	e0bfff17 	ldw	r2,-4(fp)
   1be74:	10800017 	ldw	r2,0(r2)
   1be78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1be7c:	e0bffe17 	ldw	r2,-8(fp)
   1be80:	10c00a04 	addi	r3,r2,40
   1be84:	e0bfff17 	ldw	r2,-4(fp)
   1be88:	10800217 	ldw	r2,8(r2)
   1be8c:	1809883a 	mov	r4,r3
   1be90:	100b883a 	mov	r5,r2
   1be94:	001c3f80 	call	1c3f8 <altera_avalon_jtag_uart_close>
}
   1be98:	e037883a 	mov	sp,fp
   1be9c:	dfc00117 	ldw	ra,4(sp)
   1bea0:	df000017 	ldw	fp,0(sp)
   1bea4:	dec00204 	addi	sp,sp,8
   1bea8:	f800283a 	ret

0001beac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1beac:	defffa04 	addi	sp,sp,-24
   1beb0:	dfc00515 	stw	ra,20(sp)
   1beb4:	df000415 	stw	fp,16(sp)
   1beb8:	df000404 	addi	fp,sp,16
   1bebc:	e13ffd15 	stw	r4,-12(fp)
   1bec0:	e17ffe15 	stw	r5,-8(fp)
   1bec4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1bec8:	e0bffd17 	ldw	r2,-12(fp)
   1becc:	10800017 	ldw	r2,0(r2)
   1bed0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1bed4:	e0bffc17 	ldw	r2,-16(fp)
   1bed8:	10800a04 	addi	r2,r2,40
   1bedc:	1009883a 	mov	r4,r2
   1bee0:	e17ffe17 	ldw	r5,-8(fp)
   1bee4:	e1bfff17 	ldw	r6,-4(fp)
   1bee8:	001c4600 	call	1c460 <altera_avalon_jtag_uart_ioctl>
}
   1beec:	e037883a 	mov	sp,fp
   1bef0:	dfc00117 	ldw	ra,4(sp)
   1bef4:	df000017 	ldw	fp,0(sp)
   1bef8:	dec00204 	addi	sp,sp,8
   1befc:	f800283a 	ret

0001bf00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1bf00:	defff104 	addi	sp,sp,-60
   1bf04:	dfc00e15 	stw	ra,56(sp)
   1bf08:	df000d15 	stw	fp,52(sp)
   1bf0c:	df000d04 	addi	fp,sp,52
   1bf10:	e13ff915 	stw	r4,-28(fp)
   1bf14:	e17ffa15 	stw	r5,-24(fp)
   1bf18:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1bf1c:	e0bff917 	ldw	r2,-28(fp)
   1bf20:	10800c04 	addi	r2,r2,48
   1bf24:	e0bff315 	stw	r2,-52(fp)
   1bf28:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1bf2c:	e0fff40b 	ldhu	r3,-48(fp)
   1bf30:	e0bff884 	addi	r2,fp,-30
   1bf34:	1809883a 	mov	r4,r3
   1bf38:	100b883a 	mov	r5,r2
   1bf3c:	00155c40 	call	155c4 <OSFlagCreate>
   1bf40:	1007883a 	mov	r3,r2
   1bf44:	e0bff317 	ldw	r2,-52(fp)
   1bf48:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1bf4c:	e0bff917 	ldw	r2,-28(fp)
   1bf50:	10800a04 	addi	r2,r2,40
   1bf54:	e0bff515 	stw	r2,-44(fp)
   1bf58:	00800044 	movi	r2,1
   1bf5c:	e0bff60d 	sth	r2,-40(fp)
   1bf60:	e0bff60b 	ldhu	r2,-40(fp)
   1bf64:	1009883a 	mov	r4,r2
   1bf68:	00190a40 	call	190a4 <OSSemCreate>
   1bf6c:	1007883a 	mov	r3,r2
   1bf70:	e0bff517 	ldw	r2,-44(fp)
   1bf74:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1bf78:	e0bff917 	ldw	r2,-28(fp)
   1bf7c:	10800b04 	addi	r2,r2,44
   1bf80:	e0bff715 	stw	r2,-36(fp)
   1bf84:	00800044 	movi	r2,1
   1bf88:	e0bff80d 	sth	r2,-32(fp)
   1bf8c:	e0bff80b 	ldhu	r2,-32(fp)
   1bf90:	1009883a 	mov	r4,r2
   1bf94:	00190a40 	call	190a4 <OSSemCreate>
   1bf98:	1007883a 	mov	r3,r2
   1bf9c:	e0bff717 	ldw	r2,-36(fp)
   1bfa0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bfa4:	e0bff917 	ldw	r2,-28(fp)
   1bfa8:	00c00044 	movi	r3,1
   1bfac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1bfb0:	e0bff917 	ldw	r2,-28(fp)
   1bfb4:	10800017 	ldw	r2,0(r2)
   1bfb8:	10800104 	addi	r2,r2,4
   1bfbc:	1007883a 	mov	r3,r2
   1bfc0:	e0bff917 	ldw	r2,-28(fp)
   1bfc4:	10800817 	ldw	r2,32(r2)
   1bfc8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1bfcc:	e0bffb17 	ldw	r2,-20(fp)
   1bfd0:	1009883a 	mov	r4,r2
   1bfd4:	e17ff917 	ldw	r5,-28(fp)
   1bfd8:	018000b4 	movhi	r6,2
   1bfdc:	31b01004 	addi	r6,r6,-16320
   1bfe0:	001e6800 	call	1e680 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1bfe4:	e0bff917 	ldw	r2,-28(fp)
   1bfe8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1bfec:	e0bff917 	ldw	r2,-28(fp)
   1bff0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1bff4:	008000b4 	movhi	r2,2
   1bff8:	10900604 	addi	r2,r2,16408
   1bffc:	10800017 	ldw	r2,0(r2)
   1c000:	1809883a 	mov	r4,r3
   1c004:	100b883a 	mov	r5,r2
   1c008:	018000b4 	movhi	r6,2
   1c00c:	31b0ba04 	addi	r6,r6,-15640
   1c010:	e1fff917 	ldw	r7,-28(fp)
   1c014:	001e1800 	call	1e180 <alt_alarm_start>
   1c018:	1000040e 	bge	r2,zero,1c02c <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c01c:	e0fff917 	ldw	r3,-28(fp)
   1c020:	00a00034 	movhi	r2,32768
   1c024:	10bfffc4 	addi	r2,r2,-1
   1c028:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c02c:	e037883a 	mov	sp,fp
   1c030:	dfc00117 	ldw	ra,4(sp)
   1c034:	df000017 	ldw	fp,0(sp)
   1c038:	dec00204 	addi	sp,sp,8
   1c03c:	f800283a 	ret

0001c040 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c040:	defff104 	addi	sp,sp,-60
   1c044:	dfc00e15 	stw	ra,56(sp)
   1c048:	df000d15 	stw	fp,52(sp)
   1c04c:	df000d04 	addi	fp,sp,52
   1c050:	e13ffe15 	stw	r4,-8(fp)
   1c054:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c058:	e0bffe17 	ldw	r2,-8(fp)
   1c05c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1c060:	e0bff517 	ldw	r2,-44(fp)
   1c064:	10800017 	ldw	r2,0(r2)
   1c068:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c06c:	e0bff617 	ldw	r2,-40(fp)
   1c070:	10800104 	addi	r2,r2,4
   1c074:	10800037 	ldwio	r2,0(r2)
   1c078:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c07c:	e0bff717 	ldw	r2,-36(fp)
   1c080:	1080c00c 	andi	r2,r2,768
   1c084:	1000011e 	bne	r2,zero,1c08c <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1c088:	00009206 	br	1c2d4 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1c08c:	e0bff717 	ldw	r2,-36(fp)
   1c090:	1080400c 	andi	r2,r2,256
   1c094:	10004726 	beq	r2,zero,1c1b4 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1c098:	00800074 	movhi	r2,1
   1c09c:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c0a0:	e0bff517 	ldw	r2,-44(fp)
   1c0a4:	10800d17 	ldw	r2,52(r2)
   1c0a8:	10800044 	addi	r2,r2,1
   1c0ac:	1081ffcc 	andi	r2,r2,2047
   1c0b0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1c0b4:	e0bff517 	ldw	r2,-44(fp)
   1c0b8:	10c00e17 	ldw	r3,56(r2)
   1c0bc:	e0bff817 	ldw	r2,-32(fp)
   1c0c0:	1880011e 	bne	r3,r2,1c0c8 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1c0c4:	00002906 	br	1c16c <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1c0c8:	e0bff617 	ldw	r2,-40(fp)
   1c0cc:	10800037 	ldwio	r2,0(r2)
   1c0d0:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1c0d4:	e0bff317 	ldw	r2,-52(fp)
   1c0d8:	10a0000c 	andi	r2,r2,32768
   1c0dc:	1000011e 	bne	r2,zero,1c0e4 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1c0e0:	00002206 	br	1c16c <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1c0e4:	e0bff517 	ldw	r2,-44(fp)
   1c0e8:	10800d17 	ldw	r2,52(r2)
   1c0ec:	e0fff317 	ldw	r3,-52(fp)
   1c0f0:	1809883a 	mov	r4,r3
   1c0f4:	e0fff517 	ldw	r3,-44(fp)
   1c0f8:	1885883a 	add	r2,r3,r2
   1c0fc:	10801104 	addi	r2,r2,68
   1c100:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c104:	e0bff517 	ldw	r2,-44(fp)
   1c108:	10800d17 	ldw	r2,52(r2)
   1c10c:	10800044 	addi	r2,r2,1
   1c110:	10c1ffcc 	andi	r3,r2,2047
   1c114:	e0bff517 	ldw	r2,-44(fp)
   1c118:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1c11c:	e0bff517 	ldw	r2,-44(fp)
   1c120:	10800c17 	ldw	r2,48(r2)
   1c124:	e0bff915 	stw	r2,-28(fp)
   1c128:	00800044 	movi	r2,1
   1c12c:	e0bffa0d 	sth	r2,-24(fp)
   1c130:	00800044 	movi	r2,1
   1c134:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c138:	008000b4 	movhi	r2,2
   1c13c:	108ff144 	addi	r2,r2,16325
   1c140:	10800003 	ldbu	r2,0(r2)
   1c144:	10803fcc 	andi	r2,r2,255
   1c148:	103fd526 	beq	r2,zero,1c0a0 <__alt_mem_Flash_flash_data+0xf401c0a0>
  {
    OSFlagPost (group, flags, opt, &err);
   1c14c:	e17ffa0b 	ldhu	r5,-24(fp)
   1c150:	e0fffa83 	ldbu	r3,-22(fp)
   1c154:	e0bffcc4 	addi	r2,fp,-13
   1c158:	e13ff917 	ldw	r4,-28(fp)
   1c15c:	180d883a 	mov	r6,r3
   1c160:	100f883a 	mov	r7,r2
   1c164:	00162340 	call	16234 <OSFlagPost>
      }
   1c168:	003fcd06 	br	1c0a0 <__alt_mem_Flash_flash_data+0xf401c0a0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1c16c:	e0bff317 	ldw	r2,-52(fp)
   1c170:	10bfffec 	andhi	r2,r2,65535
   1c174:	10000f26 	beq	r2,zero,1c1b4 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c178:	e0bff517 	ldw	r2,-44(fp)
   1c17c:	10c00817 	ldw	r3,32(r2)
   1c180:	00bfff84 	movi	r2,-2
   1c184:	1886703a 	and	r3,r3,r2
   1c188:	e0bff517 	ldw	r2,-44(fp)
   1c18c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1c190:	e0bff617 	ldw	r2,-40(fp)
   1c194:	10800104 	addi	r2,r2,4
   1c198:	1007883a 	mov	r3,r2
   1c19c:	e0bff517 	ldw	r2,-44(fp)
   1c1a0:	10800817 	ldw	r2,32(r2)
   1c1a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c1a8:	e0bff617 	ldw	r2,-40(fp)
   1c1ac:	10800104 	addi	r2,r2,4
   1c1b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1c1b4:	e0bff717 	ldw	r2,-36(fp)
   1c1b8:	1080800c 	andi	r2,r2,512
   1c1bc:	10004426 	beq	r2,zero,1c2d0 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1c1c0:	e0bff717 	ldw	r2,-36(fp)
   1c1c4:	1004d43a 	srli	r2,r2,16
   1c1c8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c1cc:	00002706 	br	1c26c <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1c1d0:	e0bff617 	ldw	r2,-40(fp)
   1c1d4:	e0fff517 	ldw	r3,-44(fp)
   1c1d8:	18c01017 	ldw	r3,64(r3)
   1c1dc:	e13ff517 	ldw	r4,-44(fp)
   1c1e0:	20c7883a 	add	r3,r4,r3
   1c1e4:	18c21104 	addi	r3,r3,2116
   1c1e8:	18c00003 	ldbu	r3,0(r3)
   1c1ec:	18c03fcc 	andi	r3,r3,255
   1c1f0:	18c0201c 	xori	r3,r3,128
   1c1f4:	18ffe004 	addi	r3,r3,-128
   1c1f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c1fc:	e0bff517 	ldw	r2,-44(fp)
   1c200:	10801017 	ldw	r2,64(r2)
   1c204:	10800044 	addi	r2,r2,1
   1c208:	10c1ffcc 	andi	r3,r2,2047
   1c20c:	e0bff517 	ldw	r2,-44(fp)
   1c210:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1c214:	e0bff517 	ldw	r2,-44(fp)
   1c218:	10800c17 	ldw	r2,48(r2)
   1c21c:	e0bffb15 	stw	r2,-20(fp)
   1c220:	00800084 	movi	r2,2
   1c224:	e0bffc0d 	sth	r2,-16(fp)
   1c228:	00800044 	movi	r2,1
   1c22c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c230:	008000b4 	movhi	r2,2
   1c234:	108ff144 	addi	r2,r2,16325
   1c238:	10800003 	ldbu	r2,0(r2)
   1c23c:	10803fcc 	andi	r2,r2,255
   1c240:	10000726 	beq	r2,zero,1c260 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1c244:	e17ffc0b 	ldhu	r5,-16(fp)
   1c248:	e0fffc83 	ldbu	r3,-14(fp)
   1c24c:	e0bffd04 	addi	r2,fp,-12
   1c250:	e13ffb17 	ldw	r4,-20(fp)
   1c254:	180d883a 	mov	r6,r3
   1c258:	100f883a 	mov	r7,r2
   1c25c:	00162340 	call	16234 <OSFlagPost>

        space--;
   1c260:	e0bff417 	ldw	r2,-48(fp)
   1c264:	10bfffc4 	addi	r2,r2,-1
   1c268:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c26c:	e0bff417 	ldw	r2,-48(fp)
   1c270:	10000526 	beq	r2,zero,1c288 <altera_avalon_jtag_uart_irq+0x248>
   1c274:	e0bff517 	ldw	r2,-44(fp)
   1c278:	10c01017 	ldw	r3,64(r2)
   1c27c:	e0bff517 	ldw	r2,-44(fp)
   1c280:	10800f17 	ldw	r2,60(r2)
   1c284:	18bfd21e 	bne	r3,r2,1c1d0 <__alt_mem_Flash_flash_data+0xf401c1d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c288:	e0bff417 	ldw	r2,-48(fp)
   1c28c:	10001026 	beq	r2,zero,1c2d0 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c290:	e0bff517 	ldw	r2,-44(fp)
   1c294:	10c00817 	ldw	r3,32(r2)
   1c298:	00bfff44 	movi	r2,-3
   1c29c:	1886703a 	and	r3,r3,r2
   1c2a0:	e0bff517 	ldw	r2,-44(fp)
   1c2a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c2a8:	e0bff517 	ldw	r2,-44(fp)
   1c2ac:	10800017 	ldw	r2,0(r2)
   1c2b0:	10800104 	addi	r2,r2,4
   1c2b4:	1007883a 	mov	r3,r2
   1c2b8:	e0bff517 	ldw	r2,-44(fp)
   1c2bc:	10800817 	ldw	r2,32(r2)
   1c2c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c2c4:	e0bff617 	ldw	r2,-40(fp)
   1c2c8:	10800104 	addi	r2,r2,4
   1c2cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c2d0:	003f6606 	br	1c06c <__alt_mem_Flash_flash_data+0xf401c06c>
}
   1c2d4:	e037883a 	mov	sp,fp
   1c2d8:	dfc00117 	ldw	ra,4(sp)
   1c2dc:	df000017 	ldw	fp,0(sp)
   1c2e0:	dec00204 	addi	sp,sp,8
   1c2e4:	f800283a 	ret

0001c2e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c2e8:	defff904 	addi	sp,sp,-28
   1c2ec:	dfc00615 	stw	ra,24(sp)
   1c2f0:	df000515 	stw	fp,20(sp)
   1c2f4:	df000504 	addi	fp,sp,20
   1c2f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c2fc:	e0bfff17 	ldw	r2,-4(fp)
   1c300:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c304:	e0bffb17 	ldw	r2,-20(fp)
   1c308:	10800017 	ldw	r2,0(r2)
   1c30c:	10800104 	addi	r2,r2,4
   1c310:	10800037 	ldwio	r2,0(r2)
   1c314:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c318:	e0bffc17 	ldw	r2,-16(fp)
   1c31c:	1081000c 	andi	r2,r2,1024
   1c320:	10000b26 	beq	r2,zero,1c350 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c324:	e0bffb17 	ldw	r2,-20(fp)
   1c328:	10800017 	ldw	r2,0(r2)
   1c32c:	10800104 	addi	r2,r2,4
   1c330:	1007883a 	mov	r3,r2
   1c334:	e0bffb17 	ldw	r2,-20(fp)
   1c338:	10800817 	ldw	r2,32(r2)
   1c33c:	10810014 	ori	r2,r2,1024
   1c340:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1c344:	e0bffb17 	ldw	r2,-20(fp)
   1c348:	10000915 	stw	zero,36(r2)
   1c34c:	00002206 	br	1c3d8 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c350:	e0bffb17 	ldw	r2,-20(fp)
   1c354:	10c00917 	ldw	r3,36(r2)
   1c358:	00a00034 	movhi	r2,32768
   1c35c:	10bfff04 	addi	r2,r2,-4
   1c360:	10c01d36 	bltu	r2,r3,1c3d8 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1c364:	e0bffb17 	ldw	r2,-20(fp)
   1c368:	10800917 	ldw	r2,36(r2)
   1c36c:	10c00044 	addi	r3,r2,1
   1c370:	e0bffb17 	ldw	r2,-20(fp)
   1c374:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1c378:	e0bffb17 	ldw	r2,-20(fp)
   1c37c:	10c00917 	ldw	r3,36(r2)
   1c380:	e0bffb17 	ldw	r2,-20(fp)
   1c384:	10800117 	ldw	r2,4(r2)
   1c388:	18801336 	bltu	r3,r2,1c3d8 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1c38c:	e0bffb17 	ldw	r2,-20(fp)
   1c390:	10800c17 	ldw	r2,48(r2)
   1c394:	e0bffd15 	stw	r2,-12(fp)
   1c398:	00800104 	movi	r2,4
   1c39c:	e0bffe0d 	sth	r2,-8(fp)
   1c3a0:	00800044 	movi	r2,1
   1c3a4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c3a8:	008000b4 	movhi	r2,2
   1c3ac:	108ff144 	addi	r2,r2,16325
   1c3b0:	10800003 	ldbu	r2,0(r2)
   1c3b4:	10803fcc 	andi	r2,r2,255
   1c3b8:	10000726 	beq	r2,zero,1c3d8 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1c3bc:	e17ffe0b 	ldhu	r5,-8(fp)
   1c3c0:	e0fffe83 	ldbu	r3,-6(fp)
   1c3c4:	e0bffec4 	addi	r2,fp,-5
   1c3c8:	e13ffd17 	ldw	r4,-12(fp)
   1c3cc:	180d883a 	mov	r6,r3
   1c3d0:	100f883a 	mov	r7,r2
   1c3d4:	00162340 	call	16234 <OSFlagPost>
   1c3d8:	008000b4 	movhi	r2,2
   1c3dc:	10900604 	addi	r2,r2,16408
   1c3e0:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1c3e4:	e037883a 	mov	sp,fp
   1c3e8:	dfc00117 	ldw	ra,4(sp)
   1c3ec:	df000017 	ldw	fp,0(sp)
   1c3f0:	dec00204 	addi	sp,sp,8
   1c3f4:	f800283a 	ret

0001c3f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c3f8:	defffd04 	addi	sp,sp,-12
   1c3fc:	df000215 	stw	fp,8(sp)
   1c400:	df000204 	addi	fp,sp,8
   1c404:	e13ffe15 	stw	r4,-8(fp)
   1c408:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c40c:	00000506 	br	1c424 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1c410:	e0bfff17 	ldw	r2,-4(fp)
   1c414:	1090000c 	andi	r2,r2,16384
   1c418:	10000226 	beq	r2,zero,1c424 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1c41c:	00bffd44 	movi	r2,-11
   1c420:	00000b06 	br	1c450 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c424:	e0bffe17 	ldw	r2,-8(fp)
   1c428:	10c01017 	ldw	r3,64(r2)
   1c42c:	e0bffe17 	ldw	r2,-8(fp)
   1c430:	10800f17 	ldw	r2,60(r2)
   1c434:	18800526 	beq	r3,r2,1c44c <altera_avalon_jtag_uart_close+0x54>
   1c438:	e0bffe17 	ldw	r2,-8(fp)
   1c43c:	10c00917 	ldw	r3,36(r2)
   1c440:	e0bffe17 	ldw	r2,-8(fp)
   1c444:	10800117 	ldw	r2,4(r2)
   1c448:	18bff136 	bltu	r3,r2,1c410 <__alt_mem_Flash_flash_data+0xf401c410>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c44c:	0005883a 	mov	r2,zero
}
   1c450:	e037883a 	mov	sp,fp
   1c454:	df000017 	ldw	fp,0(sp)
   1c458:	dec00104 	addi	sp,sp,4
   1c45c:	f800283a 	ret

0001c460 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c460:	defffa04 	addi	sp,sp,-24
   1c464:	df000515 	stw	fp,20(sp)
   1c468:	df000504 	addi	fp,sp,20
   1c46c:	e13ffd15 	stw	r4,-12(fp)
   1c470:	e17ffe15 	stw	r5,-8(fp)
   1c474:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1c478:	00bff9c4 	movi	r2,-25
   1c47c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1c480:	e0bffe17 	ldw	r2,-8(fp)
   1c484:	10da8060 	cmpeqi	r3,r2,27137
   1c488:	1800031e 	bne	r3,zero,1c498 <altera_avalon_jtag_uart_ioctl+0x38>
   1c48c:	109a80a0 	cmpeqi	r2,r2,27138
   1c490:	1000191e 	bne	r2,zero,1c4f8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1c494:	00002806 	br	1c538 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c498:	e0bffd17 	ldw	r2,-12(fp)
   1c49c:	10c00117 	ldw	r3,4(r2)
   1c4a0:	00a00034 	movhi	r2,32768
   1c4a4:	10bfffc4 	addi	r2,r2,-1
   1c4a8:	18801226 	beq	r3,r2,1c4f4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1c4ac:	e0bfff17 	ldw	r2,-4(fp)
   1c4b0:	10800017 	ldw	r2,0(r2)
   1c4b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c4b8:	e0bffc17 	ldw	r2,-16(fp)
   1c4bc:	10800090 	cmplti	r2,r2,2
   1c4c0:	1000061e 	bne	r2,zero,1c4dc <altera_avalon_jtag_uart_ioctl+0x7c>
   1c4c4:	e0fffc17 	ldw	r3,-16(fp)
   1c4c8:	00a00034 	movhi	r2,32768
   1c4cc:	10bfffc4 	addi	r2,r2,-1
   1c4d0:	18800226 	beq	r3,r2,1c4dc <altera_avalon_jtag_uart_ioctl+0x7c>
   1c4d4:	e0bffc17 	ldw	r2,-16(fp)
   1c4d8:	00000206 	br	1c4e4 <altera_avalon_jtag_uart_ioctl+0x84>
   1c4dc:	00a00034 	movhi	r2,32768
   1c4e0:	10bfff84 	addi	r2,r2,-2
   1c4e4:	e0fffd17 	ldw	r3,-12(fp)
   1c4e8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1c4ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c4f0:	00001106 	br	1c538 <altera_avalon_jtag_uart_ioctl+0xd8>
   1c4f4:	00001006 	br	1c538 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c4f8:	e0bffd17 	ldw	r2,-12(fp)
   1c4fc:	10c00117 	ldw	r3,4(r2)
   1c500:	00a00034 	movhi	r2,32768
   1c504:	10bfffc4 	addi	r2,r2,-1
   1c508:	18800a26 	beq	r3,r2,1c534 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c50c:	e0bffd17 	ldw	r2,-12(fp)
   1c510:	10c00917 	ldw	r3,36(r2)
   1c514:	e0bffd17 	ldw	r2,-12(fp)
   1c518:	10800117 	ldw	r2,4(r2)
   1c51c:	1885803a 	cmpltu	r2,r3,r2
   1c520:	10c03fcc 	andi	r3,r2,255
   1c524:	e0bfff17 	ldw	r2,-4(fp)
   1c528:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1c52c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c530:	00000006 	br	1c534 <altera_avalon_jtag_uart_ioctl+0xd4>
   1c534:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1c538:	e0bffb17 	ldw	r2,-20(fp)
}
   1c53c:	e037883a 	mov	sp,fp
   1c540:	df000017 	ldw	fp,0(sp)
   1c544:	dec00104 	addi	sp,sp,4
   1c548:	f800283a 	ret

0001c54c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1c54c:	deffec04 	addi	sp,sp,-80
   1c550:	dfc01315 	stw	ra,76(sp)
   1c554:	df001215 	stw	fp,72(sp)
   1c558:	df001204 	addi	fp,sp,72
   1c55c:	e13ffc15 	stw	r4,-16(fp)
   1c560:	e17ffd15 	stw	r5,-12(fp)
   1c564:	e1bffe15 	stw	r6,-8(fp)
   1c568:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1c56c:	e0bffd17 	ldw	r2,-12(fp)
   1c570:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1c574:	e0bffc17 	ldw	r2,-16(fp)
   1c578:	10800a17 	ldw	r2,40(r2)
   1c57c:	e0bff415 	stw	r2,-48(fp)
   1c580:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1c584:	e0fff50b 	ldhu	r3,-44(fp)
   1c588:	e0bffb04 	addi	r2,fp,-20
   1c58c:	e13ff417 	ldw	r4,-48(fp)
   1c590:	180b883a 	mov	r5,r3
   1c594:	100d883a 	mov	r6,r2
   1c598:	001940c0 	call	1940c <OSSemPend>

  while (space > 0)
   1c59c:	00006506 	br	1c734 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1c5a0:	e0bffc17 	ldw	r2,-16(fp)
   1c5a4:	10800d17 	ldw	r2,52(r2)
   1c5a8:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1c5ac:	e0bffc17 	ldw	r2,-16(fp)
   1c5b0:	10800e17 	ldw	r2,56(r2)
   1c5b4:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1c5b8:	e0fff117 	ldw	r3,-60(fp)
   1c5bc:	e0bff217 	ldw	r2,-56(fp)
   1c5c0:	18800536 	bltu	r3,r2,1c5d8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1c5c4:	e0fff117 	ldw	r3,-60(fp)
   1c5c8:	e0bff217 	ldw	r2,-56(fp)
   1c5cc:	1885c83a 	sub	r2,r3,r2
   1c5d0:	e0bff015 	stw	r2,-64(fp)
   1c5d4:	00000406 	br	1c5e8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1c5d8:	00c20004 	movi	r3,2048
   1c5dc:	e0bff217 	ldw	r2,-56(fp)
   1c5e0:	1885c83a 	sub	r2,r3,r2
   1c5e4:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1c5e8:	e0bff017 	ldw	r2,-64(fp)
   1c5ec:	1000011e 	bne	r2,zero,1c5f4 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1c5f0:	00001d06 	br	1c668 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1c5f4:	e0fffe17 	ldw	r3,-8(fp)
   1c5f8:	e0bff017 	ldw	r2,-64(fp)
   1c5fc:	1880022e 	bgeu	r3,r2,1c608 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1c600:	e0bffe17 	ldw	r2,-8(fp)
   1c604:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1c608:	e0bff217 	ldw	r2,-56(fp)
   1c60c:	10801104 	addi	r2,r2,68
   1c610:	e0fffc17 	ldw	r3,-16(fp)
   1c614:	1885883a 	add	r2,r3,r2
   1c618:	e13fef17 	ldw	r4,-68(fp)
   1c61c:	100b883a 	mov	r5,r2
   1c620:	e1bff017 	ldw	r6,-64(fp)
   1c624:	000a6d00 	call	a6d0 <memcpy>
      ptr   += n;
   1c628:	e0ffef17 	ldw	r3,-68(fp)
   1c62c:	e0bff017 	ldw	r2,-64(fp)
   1c630:	1885883a 	add	r2,r3,r2
   1c634:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1c638:	e0fffe17 	ldw	r3,-8(fp)
   1c63c:	e0bff017 	ldw	r2,-64(fp)
   1c640:	1885c83a 	sub	r2,r3,r2
   1c644:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c648:	e0fff217 	ldw	r3,-56(fp)
   1c64c:	e0bff017 	ldw	r2,-64(fp)
   1c650:	1885883a 	add	r2,r3,r2
   1c654:	10c1ffcc 	andi	r3,r2,2047
   1c658:	e0bffc17 	ldw	r2,-16(fp)
   1c65c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1c660:	e0bffe17 	ldw	r2,-8(fp)
   1c664:	00bfce16 	blt	zero,r2,1c5a0 <__alt_mem_Flash_flash_data+0xf401c5a0>

    /* If we read any data then return it */
    if (ptr != buffer)
   1c668:	e0ffef17 	ldw	r3,-68(fp)
   1c66c:	e0bffd17 	ldw	r2,-12(fp)
   1c670:	18800126 	beq	r3,r2,1c678 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1c674:	00003106 	br	1c73c <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1c678:	e0bfff17 	ldw	r2,-4(fp)
   1c67c:	1090000c 	andi	r2,r2,16384
   1c680:	10000126 	beq	r2,zero,1c688 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1c684:	00002d06 	br	1c73c <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1c688:	008000b4 	movhi	r2,2
   1c68c:	108ff144 	addi	r2,r2,16325
   1c690:	10800003 	ldbu	r2,0(r2)
   1c694:	10803fcc 	andi	r2,r2,255
   1c698:	10800058 	cmpnei	r2,r2,1
   1c69c:	1000161e 	bne	r2,zero,1c6f8 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1c6a0:	e0bffc17 	ldw	r2,-16(fp)
   1c6a4:	10800c17 	ldw	r2,48(r2)
   1c6a8:	e0bff615 	stw	r2,-40(fp)
   1c6ac:	00800144 	movi	r2,5
   1c6b0:	e0bff70d 	sth	r2,-36(fp)
   1c6b4:	00bfe0c4 	movi	r2,-125
   1c6b8:	e0bff785 	stb	r2,-34(fp)
   1c6bc:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c6c0:	008000b4 	movhi	r2,2
   1c6c4:	108ff144 	addi	r2,r2,16325
   1c6c8:	10800003 	ldbu	r2,0(r2)
   1c6cc:	10803fcc 	andi	r2,r2,255
   1c6d0:	10001326 	beq	r2,zero,1c720 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c6d4:	e17ff70b 	ldhu	r5,-36(fp)
   1c6d8:	e1bff783 	ldbu	r6,-34(fp)
   1c6dc:	e0fff80b 	ldhu	r3,-32(fp)
   1c6e0:	e0bffb44 	addi	r2,fp,-19
   1c6e4:	d8800015 	stw	r2,0(sp)
   1c6e8:	e13ff617 	ldw	r4,-40(fp)
   1c6ec:	180f883a 	mov	r7,r3
   1c6f0:	0015bdc0 	call	15bdc <OSFlagPend>
   1c6f4:	00000a06 	br	1c720 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1c6f8:	0001883a 	nop
   1c6fc:	e0bffc17 	ldw	r2,-16(fp)
   1c700:	10c00d17 	ldw	r3,52(r2)
   1c704:	e0bff117 	ldw	r2,-60(fp)
   1c708:	1880051e 	bne	r3,r2,1c720 <altera_avalon_jtag_uart_read+0x1d4>
   1c70c:	e0bffc17 	ldw	r2,-16(fp)
   1c710:	10c00917 	ldw	r3,36(r2)
   1c714:	e0bffc17 	ldw	r2,-16(fp)
   1c718:	10800117 	ldw	r2,4(r2)
   1c71c:	18bff736 	bltu	r3,r2,1c6fc <__alt_mem_Flash_flash_data+0xf401c6fc>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1c720:	e0bffc17 	ldw	r2,-16(fp)
   1c724:	10c00d17 	ldw	r3,52(r2)
   1c728:	e0bff117 	ldw	r2,-60(fp)
   1c72c:	1880011e 	bne	r3,r2,1c734 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1c730:	00000206 	br	1c73c <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c734:	e0bffe17 	ldw	r2,-8(fp)
   1c738:	00bf9916 	blt	zero,r2,1c5a0 <__alt_mem_Flash_flash_data+0xf401c5a0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1c73c:	e0bffc17 	ldw	r2,-16(fp)
   1c740:	10800a17 	ldw	r2,40(r2)
   1c744:	1009883a 	mov	r4,r2
   1c748:	00197e00 	call	197e0 <OSSemPost>

  if (ptr != buffer)
   1c74c:	e0ffef17 	ldw	r3,-68(fp)
   1c750:	e0bffd17 	ldw	r2,-12(fp)
   1c754:	18801826 	beq	r3,r2,1c7b8 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c758:	0005303a 	rdctl	r2,status
   1c75c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c760:	e0fff917 	ldw	r3,-28(fp)
   1c764:	00bfff84 	movi	r2,-2
   1c768:	1884703a 	and	r2,r3,r2
   1c76c:	1001703a 	wrctl	status,r2
  
  return context;
   1c770:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1c774:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c778:	e0bffc17 	ldw	r2,-16(fp)
   1c77c:	10800817 	ldw	r2,32(r2)
   1c780:	10c00054 	ori	r3,r2,1
   1c784:	e0bffc17 	ldw	r2,-16(fp)
   1c788:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c78c:	e0bffc17 	ldw	r2,-16(fp)
   1c790:	10800017 	ldw	r2,0(r2)
   1c794:	10800104 	addi	r2,r2,4
   1c798:	1007883a 	mov	r3,r2
   1c79c:	e0bffc17 	ldw	r2,-16(fp)
   1c7a0:	10800817 	ldw	r2,32(r2)
   1c7a4:	18800035 	stwio	r2,0(r3)
   1c7a8:	e0bff317 	ldw	r2,-52(fp)
   1c7ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c7b0:	e0bffa17 	ldw	r2,-24(fp)
   1c7b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1c7b8:	e0ffef17 	ldw	r3,-68(fp)
   1c7bc:	e0bffd17 	ldw	r2,-12(fp)
   1c7c0:	18800426 	beq	r3,r2,1c7d4 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1c7c4:	e0ffef17 	ldw	r3,-68(fp)
   1c7c8:	e0bffd17 	ldw	r2,-12(fp)
   1c7cc:	1885c83a 	sub	r2,r3,r2
   1c7d0:	00000606 	br	1c7ec <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1c7d4:	e0bfff17 	ldw	r2,-4(fp)
   1c7d8:	1090000c 	andi	r2,r2,16384
   1c7dc:	10000226 	beq	r2,zero,1c7e8 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1c7e0:	00bffd44 	movi	r2,-11
   1c7e4:	00000106 	br	1c7ec <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1c7e8:	00bffec4 	movi	r2,-5
}
   1c7ec:	e037883a 	mov	sp,fp
   1c7f0:	dfc00117 	ldw	ra,4(sp)
   1c7f4:	df000017 	ldw	fp,0(sp)
   1c7f8:	dec00204 	addi	sp,sp,8
   1c7fc:	f800283a 	ret

0001c800 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1c800:	deffed04 	addi	sp,sp,-76
   1c804:	dfc01215 	stw	ra,72(sp)
   1c808:	df001115 	stw	fp,68(sp)
   1c80c:	df001104 	addi	fp,sp,68
   1c810:	e13ffc15 	stw	r4,-16(fp)
   1c814:	e17ffd15 	stw	r5,-12(fp)
   1c818:	e1bffe15 	stw	r6,-8(fp)
   1c81c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1c820:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1c824:	e0bffd17 	ldw	r2,-12(fp)
   1c828:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1c82c:	e0bffc17 	ldw	r2,-16(fp)
   1c830:	10800b17 	ldw	r2,44(r2)
   1c834:	e0bff515 	stw	r2,-44(fp)
   1c838:	e03ff60d 	sth	zero,-40(fp)
   1c83c:	e0fff60b 	ldhu	r3,-40(fp)
   1c840:	e0bffbc4 	addi	r2,fp,-17
   1c844:	e13ff517 	ldw	r4,-44(fp)
   1c848:	180b883a 	mov	r5,r3
   1c84c:	100d883a 	mov	r6,r2
   1c850:	001940c0 	call	1940c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c854:	00003806 	br	1c938 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1c858:	e0bffc17 	ldw	r2,-16(fp)
   1c85c:	10800f17 	ldw	r2,60(r2)
   1c860:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1c864:	e0bffc17 	ldw	r2,-16(fp)
   1c868:	10801017 	ldw	r2,64(r2)
   1c86c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1c870:	e0fff317 	ldw	r3,-52(fp)
   1c874:	e0bff017 	ldw	r2,-64(fp)
   1c878:	1880062e 	bgeu	r3,r2,1c894 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1c87c:	e0fff017 	ldw	r3,-64(fp)
   1c880:	e0bff317 	ldw	r2,-52(fp)
   1c884:	1885c83a 	sub	r2,r3,r2
   1c888:	10bfffc4 	addi	r2,r2,-1
   1c88c:	e0bff115 	stw	r2,-60(fp)
   1c890:	00000b06 	br	1c8c0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1c894:	e0bff017 	ldw	r2,-64(fp)
   1c898:	10000526 	beq	r2,zero,1c8b0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1c89c:	00c20004 	movi	r3,2048
   1c8a0:	e0bff317 	ldw	r2,-52(fp)
   1c8a4:	1885c83a 	sub	r2,r3,r2
   1c8a8:	e0bff115 	stw	r2,-60(fp)
   1c8ac:	00000406 	br	1c8c0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1c8b0:	00c1ffc4 	movi	r3,2047
   1c8b4:	e0bff317 	ldw	r2,-52(fp)
   1c8b8:	1885c83a 	sub	r2,r3,r2
   1c8bc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1c8c0:	e0bff117 	ldw	r2,-60(fp)
   1c8c4:	1000011e 	bne	r2,zero,1c8cc <altera_avalon_jtag_uart_write+0xcc>
        break;
   1c8c8:	00001d06 	br	1c940 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1c8cc:	e0fffe17 	ldw	r3,-8(fp)
   1c8d0:	e0bff117 	ldw	r2,-60(fp)
   1c8d4:	1880022e 	bgeu	r3,r2,1c8e0 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1c8d8:	e0bffe17 	ldw	r2,-8(fp)
   1c8dc:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1c8e0:	e0bff317 	ldw	r2,-52(fp)
   1c8e4:	10821104 	addi	r2,r2,2116
   1c8e8:	e0fffc17 	ldw	r3,-16(fp)
   1c8ec:	1885883a 	add	r2,r3,r2
   1c8f0:	1009883a 	mov	r4,r2
   1c8f4:	e17ffd17 	ldw	r5,-12(fp)
   1c8f8:	e1bff117 	ldw	r6,-60(fp)
   1c8fc:	000a6d00 	call	a6d0 <memcpy>
      ptr   += n;
   1c900:	e0fffd17 	ldw	r3,-12(fp)
   1c904:	e0bff117 	ldw	r2,-60(fp)
   1c908:	1885883a 	add	r2,r3,r2
   1c90c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1c910:	e0fffe17 	ldw	r3,-8(fp)
   1c914:	e0bff117 	ldw	r2,-60(fp)
   1c918:	1885c83a 	sub	r2,r3,r2
   1c91c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c920:	e0fff317 	ldw	r3,-52(fp)
   1c924:	e0bff117 	ldw	r2,-60(fp)
   1c928:	1885883a 	add	r2,r3,r2
   1c92c:	10c1ffcc 	andi	r3,r2,2047
   1c930:	e0bffc17 	ldw	r2,-16(fp)
   1c934:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c938:	e0bffe17 	ldw	r2,-8(fp)
   1c93c:	00bfc616 	blt	zero,r2,1c858 <__alt_mem_Flash_flash_data+0xf401c858>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c940:	0005303a 	rdctl	r2,status
   1c944:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c948:	e0fff717 	ldw	r3,-36(fp)
   1c94c:	00bfff84 	movi	r2,-2
   1c950:	1884703a 	and	r2,r3,r2
   1c954:	1001703a 	wrctl	status,r2
  
  return context;
   1c958:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1c95c:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c960:	e0bffc17 	ldw	r2,-16(fp)
   1c964:	10800817 	ldw	r2,32(r2)
   1c968:	10c00094 	ori	r3,r2,2
   1c96c:	e0bffc17 	ldw	r2,-16(fp)
   1c970:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c974:	e0bffc17 	ldw	r2,-16(fp)
   1c978:	10800017 	ldw	r2,0(r2)
   1c97c:	10800104 	addi	r2,r2,4
   1c980:	1007883a 	mov	r3,r2
   1c984:	e0bffc17 	ldw	r2,-16(fp)
   1c988:	10800817 	ldw	r2,32(r2)
   1c98c:	18800035 	stwio	r2,0(r3)
   1c990:	e0bff417 	ldw	r2,-48(fp)
   1c994:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c998:	e0bff817 	ldw	r2,-32(fp)
   1c99c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1c9a0:	e0bffe17 	ldw	r2,-8(fp)
   1c9a4:	00802e0e 	bge	zero,r2,1ca60 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1c9a8:	e0bfff17 	ldw	r2,-4(fp)
   1c9ac:	1090000c 	andi	r2,r2,16384
   1c9b0:	10000126 	beq	r2,zero,1c9b8 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1c9b4:	00002c06 	br	1ca68 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1c9b8:	008000b4 	movhi	r2,2
   1c9bc:	108ff144 	addi	r2,r2,16325
   1c9c0:	10800003 	ldbu	r2,0(r2)
   1c9c4:	10803fcc 	andi	r2,r2,255
   1c9c8:	10800058 	cmpnei	r2,r2,1
   1c9cc:	1000161e 	bne	r2,zero,1ca28 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1c9d0:	e0bffc17 	ldw	r2,-16(fp)
   1c9d4:	10800c17 	ldw	r2,48(r2)
   1c9d8:	e0bff915 	stw	r2,-28(fp)
   1c9dc:	00800184 	movi	r2,6
   1c9e0:	e0bffa0d 	sth	r2,-24(fp)
   1c9e4:	00bfe0c4 	movi	r2,-125
   1c9e8:	e0bffa85 	stb	r2,-22(fp)
   1c9ec:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c9f0:	008000b4 	movhi	r2,2
   1c9f4:	108ff144 	addi	r2,r2,16325
   1c9f8:	10800003 	ldbu	r2,0(r2)
   1c9fc:	10803fcc 	andi	r2,r2,255
   1ca00:	10001326 	beq	r2,zero,1ca50 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1ca04:	e17ffa0b 	ldhu	r5,-24(fp)
   1ca08:	e1bffa83 	ldbu	r6,-22(fp)
   1ca0c:	e0fffb0b 	ldhu	r3,-20(fp)
   1ca10:	e0bffb84 	addi	r2,fp,-18
   1ca14:	d8800015 	stw	r2,0(sp)
   1ca18:	e13ff917 	ldw	r4,-28(fp)
   1ca1c:	180f883a 	mov	r7,r3
   1ca20:	0015bdc0 	call	15bdc <OSFlagPend>
   1ca24:	00000a06 	br	1ca50 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ca28:	0001883a 	nop
   1ca2c:	e0bffc17 	ldw	r2,-16(fp)
   1ca30:	10c01017 	ldw	r3,64(r2)
   1ca34:	e0bff017 	ldw	r2,-64(fp)
   1ca38:	1880051e 	bne	r3,r2,1ca50 <altera_avalon_jtag_uart_write+0x250>
   1ca3c:	e0bffc17 	ldw	r2,-16(fp)
   1ca40:	10c00917 	ldw	r3,36(r2)
   1ca44:	e0bffc17 	ldw	r2,-16(fp)
   1ca48:	10800117 	ldw	r2,4(r2)
   1ca4c:	18bff736 	bltu	r3,r2,1ca2c <__alt_mem_Flash_flash_data+0xf401ca2c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1ca50:	e0bffc17 	ldw	r2,-16(fp)
   1ca54:	10800917 	ldw	r2,36(r2)
   1ca58:	10000126 	beq	r2,zero,1ca60 <altera_avalon_jtag_uart_write+0x260>
         break;
   1ca5c:	00000206 	br	1ca68 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1ca60:	e0bffe17 	ldw	r2,-8(fp)
   1ca64:	00bf7b16 	blt	zero,r2,1c854 <__alt_mem_Flash_flash_data+0xf401c854>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1ca68:	e0bffc17 	ldw	r2,-16(fp)
   1ca6c:	10800b17 	ldw	r2,44(r2)
   1ca70:	1009883a 	mov	r4,r2
   1ca74:	00197e00 	call	197e0 <OSSemPost>

  if (ptr != start)
   1ca78:	e0fffd17 	ldw	r3,-12(fp)
   1ca7c:	e0bff217 	ldw	r2,-56(fp)
   1ca80:	18800426 	beq	r3,r2,1ca94 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1ca84:	e0fffd17 	ldw	r3,-12(fp)
   1ca88:	e0bff217 	ldw	r2,-56(fp)
   1ca8c:	1885c83a 	sub	r2,r3,r2
   1ca90:	00000606 	br	1caac <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1ca94:	e0bfff17 	ldw	r2,-4(fp)
   1ca98:	1090000c 	andi	r2,r2,16384
   1ca9c:	10000226 	beq	r2,zero,1caa8 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1caa0:	00bffd44 	movi	r2,-11
   1caa4:	00000106 	br	1caac <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1caa8:	00bffec4 	movi	r2,-5
}
   1caac:	e037883a 	mov	sp,fp
   1cab0:	dfc00117 	ldw	ra,4(sp)
   1cab4:	df000017 	ldw	fp,0(sp)
   1cab8:	dec00204 	addi	sp,sp,8
   1cabc:	f800283a 	ret

0001cac0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1cac0:	defff904 	addi	sp,sp,-28
   1cac4:	dfc00615 	stw	ra,24(sp)
   1cac8:	df000515 	stw	fp,20(sp)
   1cacc:	df000504 	addi	fp,sp,20
   1cad0:	e13ffe15 	stw	r4,-8(fp)
   1cad4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1cad8:	0007883a 	mov	r3,zero
   1cadc:	e0bffe17 	ldw	r2,-8(fp)
   1cae0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1cae4:	e0bffe17 	ldw	r2,-8(fp)
   1cae8:	10800104 	addi	r2,r2,4
   1caec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1caf0:	0005303a 	rdctl	r2,status
   1caf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1caf8:	e0fffc17 	ldw	r3,-16(fp)
   1cafc:	00bfff84 	movi	r2,-2
   1cb00:	1884703a 	and	r2,r3,r2
   1cb04:	1001703a 	wrctl	status,r2
  
  return context;
   1cb08:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1cb0c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1cb10:	001eb3c0 	call	1eb3c <alt_tick>
   1cb14:	e0bffb17 	ldw	r2,-20(fp)
   1cb18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb1c:	e0bffd17 	ldw	r2,-12(fp)
   1cb20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1cb24:	e037883a 	mov	sp,fp
   1cb28:	dfc00117 	ldw	ra,4(sp)
   1cb2c:	df000017 	ldw	fp,0(sp)
   1cb30:	dec00204 	addi	sp,sp,8
   1cb34:	f800283a 	ret

0001cb38 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1cb38:	defff904 	addi	sp,sp,-28
   1cb3c:	dfc00615 	stw	ra,24(sp)
   1cb40:	df000515 	stw	fp,20(sp)
   1cb44:	df000504 	addi	fp,sp,20
   1cb48:	e13ffc15 	stw	r4,-16(fp)
   1cb4c:	e17ffd15 	stw	r5,-12(fp)
   1cb50:	e1bffe15 	stw	r6,-8(fp)
   1cb54:	e1ffff15 	stw	r7,-4(fp)
   1cb58:	e0bfff17 	ldw	r2,-4(fp)
   1cb5c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1cb60:	008000b4 	movhi	r2,2
   1cb64:	10900604 	addi	r2,r2,16408
   1cb68:	10800017 	ldw	r2,0(r2)
   1cb6c:	1000041e 	bne	r2,zero,1cb80 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1cb70:	008000b4 	movhi	r2,2
   1cb74:	10900604 	addi	r2,r2,16408
   1cb78:	e0fffb17 	ldw	r3,-20(fp)
   1cb7c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1cb80:	e0bffc17 	ldw	r2,-16(fp)
   1cb84:	10800104 	addi	r2,r2,4
   1cb88:	00c001c4 	movi	r3,7
   1cb8c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1cb90:	e13ffe17 	ldw	r4,-8(fp)
   1cb94:	e17ffc17 	ldw	r5,-16(fp)
   1cb98:	018000b4 	movhi	r6,2
   1cb9c:	31b2b004 	addi	r6,r6,-13632
   1cba0:	001e6800 	call	1e680 <alt_irq_register>
#endif  
}
   1cba4:	e037883a 	mov	sp,fp
   1cba8:	dfc00117 	ldw	ra,4(sp)
   1cbac:	df000017 	ldw	fp,0(sp)
   1cbb0:	dec00204 	addi	sp,sp,8
   1cbb4:	f800283a 	ret

0001cbb8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1cbb8:	defffc04 	addi	sp,sp,-16
   1cbbc:	df000315 	stw	fp,12(sp)
   1cbc0:	df000304 	addi	fp,sp,12
   1cbc4:	e13ffe15 	stw	r4,-8(fp)
   1cbc8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1cbcc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1cbd0:	e0bfff17 	ldw	r2,-4(fp)
   1cbd4:	1000061e 	bne	r2,zero,1cbf0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1cbd8:	e0bffe17 	ldw	r2,-8(fp)
   1cbdc:	1007883a 	mov	r3,r2
   1cbe0:	e0bffd03 	ldbu	r2,-12(fp)
   1cbe4:	1884b03a 	or	r2,r3,r2
   1cbe8:	e0bffd05 	stb	r2,-12(fp)
   1cbec:	00000806 	br	1cc10 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1cbf0:	e0bffe17 	ldw	r2,-8(fp)
   1cbf4:	1007883a 	mov	r3,r2
   1cbf8:	e0bffd03 	ldbu	r2,-12(fp)
   1cbfc:	1884b03a 	or	r2,r3,r2
   1cc00:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1cc04:	e0bffd03 	ldbu	r2,-12(fp)
   1cc08:	10801014 	ori	r2,r2,64
   1cc0c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1cc10:	e0fffd03 	ldbu	r3,-12(fp)
   1cc14:	00bfe004 	movi	r2,-128
   1cc18:	1884b03a 	or	r2,r3,r2
}
   1cc1c:	e037883a 	mov	sp,fp
   1cc20:	df000017 	ldw	fp,0(sp)
   1cc24:	dec00104 	addi	sp,sp,4
   1cc28:	f800283a 	ret

0001cc2c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1cc2c:	defffd04 	addi	sp,sp,-12
   1cc30:	df000215 	stw	fp,8(sp)
   1cc34:	df000204 	addi	fp,sp,8
   1cc38:	e13ffe15 	stw	r4,-8(fp)
   1cc3c:	2805883a 	mov	r2,r5
   1cc40:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1cc44:	e0bffe17 	ldw	r2,-8(fp)
   1cc48:	10800a17 	ldw	r2,40(r2)
   1cc4c:	1007883a 	mov	r3,r2
   1cc50:	e0bfff03 	ldbu	r2,-4(fp)
   1cc54:	18800025 	stbio	r2,0(r3)
}
   1cc58:	e037883a 	mov	sp,fp
   1cc5c:	df000017 	ldw	fp,0(sp)
   1cc60:	dec00104 	addi	sp,sp,4
   1cc64:	f800283a 	ret

0001cc68 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1cc68:	defffe04 	addi	sp,sp,-8
   1cc6c:	df000115 	stw	fp,4(sp)
   1cc70:	df000104 	addi	fp,sp,4
   1cc74:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1cc78:	e0bfff17 	ldw	r2,-4(fp)
   1cc7c:	10800a17 	ldw	r2,40(r2)
   1cc80:	1007883a 	mov	r3,r2
   1cc84:	00800044 	movi	r2,1
   1cc88:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1cc8c:	e037883a 	mov	sp,fp
   1cc90:	df000017 	ldw	fp,0(sp)
   1cc94:	dec00104 	addi	sp,sp,4
   1cc98:	f800283a 	ret

0001cc9c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1cc9c:	defffc04 	addi	sp,sp,-16
   1cca0:	dfc00315 	stw	ra,12(sp)
   1cca4:	df000215 	stw	fp,8(sp)
   1cca8:	df000204 	addi	fp,sp,8
   1ccac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1ccb0:	e13fff17 	ldw	r4,-4(fp)
   1ccb4:	014000b4 	movhi	r5,2
   1ccb8:	2947d404 	addi	r5,r5,8016
   1ccbc:	001e4880 	call	1e488 <alt_find_dev>
   1ccc0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ccc4:	e0bffe17 	ldw	r2,-8(fp)
}
   1ccc8:	e037883a 	mov	sp,fp
   1cccc:	dfc00117 	ldw	ra,4(sp)
   1ccd0:	df000017 	ldw	fp,0(sp)
   1ccd4:	dec00204 	addi	sp,sp,8
   1ccd8:	f800283a 	ret

0001ccdc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1ccdc:	defffb04 	addi	sp,sp,-20
   1cce0:	df000415 	stw	fp,16(sp)
   1cce4:	df000404 	addi	fp,sp,16
   1cce8:	e13ffd15 	stw	r4,-12(fp)
   1ccec:	e17ffe15 	stw	r5,-8(fp)
   1ccf0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1ccf4:	e03ffc15 	stw	zero,-16(fp)
   1ccf8:	00000f06 	br	1cd38 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1ccfc:	e0bffd17 	ldw	r2,-12(fp)
   1cd00:	10800a17 	ldw	r2,40(r2)
   1cd04:	10800044 	addi	r2,r2,1
   1cd08:	1009883a 	mov	r4,r2
   1cd0c:	e0fffe17 	ldw	r3,-8(fp)
   1cd10:	e0bffc17 	ldw	r2,-16(fp)
   1cd14:	1885883a 	add	r2,r3,r2
   1cd18:	10800003 	ldbu	r2,0(r2)
   1cd1c:	10803fcc 	andi	r2,r2,255
   1cd20:	1080201c 	xori	r2,r2,128
   1cd24:	10bfe004 	addi	r2,r2,-128
   1cd28:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1cd2c:	e0bffc17 	ldw	r2,-16(fp)
   1cd30:	10800044 	addi	r2,r2,1
   1cd34:	e0bffc15 	stw	r2,-16(fp)
   1cd38:	e0fffc17 	ldw	r3,-16(fp)
   1cd3c:	e0bfff17 	ldw	r2,-4(fp)
   1cd40:	18bfee36 	bltu	r3,r2,1ccfc <__alt_mem_Flash_flash_data+0xf401ccfc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1cd44:	e037883a 	mov	sp,fp
   1cd48:	df000017 	ldw	fp,0(sp)
   1cd4c:	dec00104 	addi	sp,sp,4
   1cd50:	f800283a 	ret

0001cd54 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1cd54:	defffd04 	addi	sp,sp,-12
   1cd58:	df000215 	stw	fp,8(sp)
   1cd5c:	df000204 	addi	fp,sp,8
   1cd60:	e13ffe15 	stw	r4,-8(fp)
   1cd64:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1cd68:	00000d06 	br	1cda0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1cd6c:	e0bffe17 	ldw	r2,-8(fp)
   1cd70:	10800a17 	ldw	r2,40(r2)
   1cd74:	10800044 	addi	r2,r2,1
   1cd78:	1007883a 	mov	r3,r2
   1cd7c:	e0bfff17 	ldw	r2,-4(fp)
   1cd80:	10800003 	ldbu	r2,0(r2)
   1cd84:	10803fcc 	andi	r2,r2,255
   1cd88:	1080201c 	xori	r2,r2,128
   1cd8c:	10bfe004 	addi	r2,r2,-128
   1cd90:	18800025 	stbio	r2,0(r3)
		++ptr;
   1cd94:	e0bfff17 	ldw	r2,-4(fp)
   1cd98:	10800044 	addi	r2,r2,1
   1cd9c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1cda0:	e0bfff17 	ldw	r2,-4(fp)
   1cda4:	10800003 	ldbu	r2,0(r2)
   1cda8:	10803fcc 	andi	r2,r2,255
   1cdac:	1080201c 	xori	r2,r2,128
   1cdb0:	10bfe004 	addi	r2,r2,-128
   1cdb4:	103fed1e 	bne	r2,zero,1cd6c <__alt_mem_Flash_flash_data+0xf401cd6c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1cdb8:	e037883a 	mov	sp,fp
   1cdbc:	df000017 	ldw	fp,0(sp)
   1cdc0:	dec00104 	addi	sp,sp,4
   1cdc4:	f800283a 	ret

0001cdc8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1cdc8:	defffb04 	addi	sp,sp,-20
   1cdcc:	dfc00415 	stw	ra,16(sp)
   1cdd0:	df000315 	stw	fp,12(sp)
   1cdd4:	df000304 	addi	fp,sp,12
   1cdd8:	e13ffd15 	stw	r4,-12(fp)
   1cddc:	e17ffe15 	stw	r5,-8(fp)
   1cde0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1cde4:	e0bffd17 	ldw	r2,-12(fp)
   1cde8:	10c00017 	ldw	r3,0(r2)
   1cdec:	e0bfff17 	ldw	r2,-4(fp)
   1cdf0:	1809883a 	mov	r4,r3
   1cdf4:	e17ffe17 	ldw	r5,-8(fp)
   1cdf8:	100d883a 	mov	r6,r2
   1cdfc:	001ccdc0 	call	1ccdc <alt_up_character_lcd_write>
	return 0;
   1ce00:	0005883a 	mov	r2,zero
}
   1ce04:	e037883a 	mov	sp,fp
   1ce08:	dfc00117 	ldw	ra,4(sp)
   1ce0c:	df000017 	ldw	fp,0(sp)
   1ce10:	dec00204 	addi	sp,sp,8
   1ce14:	f800283a 	ret

0001ce18 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1ce18:	defffa04 	addi	sp,sp,-24
   1ce1c:	dfc00515 	stw	ra,20(sp)
   1ce20:	df000415 	stw	fp,16(sp)
   1ce24:	df000404 	addi	fp,sp,16
   1ce28:	e13ffd15 	stw	r4,-12(fp)
   1ce2c:	e17ffe15 	stw	r5,-8(fp)
   1ce30:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1ce34:	e0bffe17 	ldw	r2,-8(fp)
   1ce38:	10800a28 	cmpgeui	r2,r2,40
   1ce3c:	1000031e 	bne	r2,zero,1ce4c <alt_up_character_lcd_set_cursor_pos+0x34>
   1ce40:	e0bfff17 	ldw	r2,-4(fp)
   1ce44:	108000b0 	cmpltui	r2,r2,2
   1ce48:	1000021e 	bne	r2,zero,1ce54 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1ce4c:	00bfffc4 	movi	r2,-1
   1ce50:	00000906 	br	1ce78 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1ce54:	e13ffe17 	ldw	r4,-8(fp)
   1ce58:	e17fff17 	ldw	r5,-4(fp)
   1ce5c:	001cbb80 	call	1cbb8 <get_DDRAM_addr>
   1ce60:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1ce64:	e0bffc03 	ldbu	r2,-16(fp)
   1ce68:	e13ffd17 	ldw	r4,-12(fp)
   1ce6c:	100b883a 	mov	r5,r2
   1ce70:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
	return 0;
   1ce74:	0005883a 	mov	r2,zero
}
   1ce78:	e037883a 	mov	sp,fp
   1ce7c:	dfc00117 	ldw	ra,4(sp)
   1ce80:	df000017 	ldw	fp,0(sp)
   1ce84:	dec00204 	addi	sp,sp,8
   1ce88:	f800283a 	ret

0001ce8c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1ce8c:	defffb04 	addi	sp,sp,-20
   1ce90:	dfc00415 	stw	ra,16(sp)
   1ce94:	df000315 	stw	fp,12(sp)
   1ce98:	df000304 	addi	fp,sp,12
   1ce9c:	e13ffe15 	stw	r4,-8(fp)
   1cea0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1cea4:	e0bfff17 	ldw	r2,-4(fp)
   1cea8:	1000011e 	bne	r2,zero,1ceb0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1ceac:	00001406 	br	1cf00 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1ceb0:	e0bfff17 	ldw	r2,-4(fp)
   1ceb4:	0080020e 	bge	zero,r2,1cec0 <alt_up_character_lcd_shift_cursor+0x34>
   1ceb8:	00800504 	movi	r2,20
   1cebc:	00000106 	br	1cec4 <alt_up_character_lcd_shift_cursor+0x38>
   1cec0:	00800404 	movi	r2,16
   1cec4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1cec8:	e0bfff17 	ldw	r2,-4(fp)
   1cecc:	1000010e 	bge	r2,zero,1ced4 <alt_up_character_lcd_shift_cursor+0x48>
   1ced0:	0085c83a 	sub	r2,zero,r2
   1ced4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1ced8:	00000406 	br	1ceec <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1cedc:	e0bffd43 	ldbu	r2,-11(fp)
   1cee0:	e13ffe17 	ldw	r4,-8(fp)
   1cee4:	100b883a 	mov	r5,r2
   1cee8:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1ceec:	e0bffd03 	ldbu	r2,-12(fp)
   1cef0:	10ffffc4 	addi	r3,r2,-1
   1cef4:	e0fffd05 	stb	r3,-12(fp)
   1cef8:	10803fcc 	andi	r2,r2,255
   1cefc:	103ff71e 	bne	r2,zero,1cedc <__alt_mem_Flash_flash_data+0xf401cedc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1cf00:	e037883a 	mov	sp,fp
   1cf04:	dfc00117 	ldw	ra,4(sp)
   1cf08:	df000017 	ldw	fp,0(sp)
   1cf0c:	dec00204 	addi	sp,sp,8
   1cf10:	f800283a 	ret

0001cf14 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1cf14:	defffb04 	addi	sp,sp,-20
   1cf18:	dfc00415 	stw	ra,16(sp)
   1cf1c:	df000315 	stw	fp,12(sp)
   1cf20:	df000304 	addi	fp,sp,12
   1cf24:	e13ffe15 	stw	r4,-8(fp)
   1cf28:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1cf2c:	e0bfff17 	ldw	r2,-4(fp)
   1cf30:	1000011e 	bne	r2,zero,1cf38 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1cf34:	00001406 	br	1cf88 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1cf38:	e0bfff17 	ldw	r2,-4(fp)
   1cf3c:	0080020e 	bge	zero,r2,1cf48 <alt_up_character_lcd_shift_display+0x34>
   1cf40:	00800704 	movi	r2,28
   1cf44:	00000106 	br	1cf4c <alt_up_character_lcd_shift_display+0x38>
   1cf48:	00800604 	movi	r2,24
   1cf4c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1cf50:	e0bfff17 	ldw	r2,-4(fp)
   1cf54:	1000010e 	bge	r2,zero,1cf5c <alt_up_character_lcd_shift_display+0x48>
   1cf58:	0085c83a 	sub	r2,zero,r2
   1cf5c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1cf60:	00000406 	br	1cf74 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1cf64:	e0bffd43 	ldbu	r2,-11(fp)
   1cf68:	e13ffe17 	ldw	r4,-8(fp)
   1cf6c:	100b883a 	mov	r5,r2
   1cf70:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1cf74:	e0bffd03 	ldbu	r2,-12(fp)
   1cf78:	10ffffc4 	addi	r3,r2,-1
   1cf7c:	e0fffd05 	stb	r3,-12(fp)
   1cf80:	10803fcc 	andi	r2,r2,255
   1cf84:	103ff71e 	bne	r2,zero,1cf64 <__alt_mem_Flash_flash_data+0xf401cf64>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1cf88:	e037883a 	mov	sp,fp
   1cf8c:	dfc00117 	ldw	ra,4(sp)
   1cf90:	df000017 	ldw	fp,0(sp)
   1cf94:	dec00204 	addi	sp,sp,8
   1cf98:	f800283a 	ret

0001cf9c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1cf9c:	defffa04 	addi	sp,sp,-24
   1cfa0:	dfc00515 	stw	ra,20(sp)
   1cfa4:	df000415 	stw	fp,16(sp)
   1cfa8:	df000404 	addi	fp,sp,16
   1cfac:	e13ffd15 	stw	r4,-12(fp)
   1cfb0:	e17ffe15 	stw	r5,-8(fp)
   1cfb4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1cfb8:	e0bffe17 	ldw	r2,-8(fp)
   1cfbc:	10800a28 	cmpgeui	r2,r2,40
   1cfc0:	1000031e 	bne	r2,zero,1cfd0 <alt_up_character_lcd_erase_pos+0x34>
   1cfc4:	e0bfff17 	ldw	r2,-4(fp)
   1cfc8:	108000b0 	cmpltui	r2,r2,2
   1cfcc:	1000021e 	bne	r2,zero,1cfd8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1cfd0:	00bfffc4 	movi	r2,-1
   1cfd4:	00000f06 	br	1d014 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1cfd8:	e13ffe17 	ldw	r4,-8(fp)
   1cfdc:	e17fff17 	ldw	r5,-4(fp)
   1cfe0:	001cbb80 	call	1cbb8 <get_DDRAM_addr>
   1cfe4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1cfe8:	e0bffc03 	ldbu	r2,-16(fp)
   1cfec:	e13ffd17 	ldw	r4,-12(fp)
   1cff0:	100b883a 	mov	r5,r2
   1cff4:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1cff8:	e0bffd17 	ldw	r2,-12(fp)
   1cffc:	10800a17 	ldw	r2,40(r2)
   1d000:	10800044 	addi	r2,r2,1
   1d004:	1007883a 	mov	r3,r2
   1d008:	00800084 	movi	r2,2
   1d00c:	18800025 	stbio	r2,0(r3)
	return 0;
   1d010:	0005883a 	mov	r2,zero
}
   1d014:	e037883a 	mov	sp,fp
   1d018:	dfc00117 	ldw	ra,4(sp)
   1d01c:	df000017 	ldw	fp,0(sp)
   1d020:	dec00204 	addi	sp,sp,8
   1d024:	f800283a 	ret

0001d028 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1d028:	defffd04 	addi	sp,sp,-12
   1d02c:	dfc00215 	stw	ra,8(sp)
   1d030:	df000115 	stw	fp,4(sp)
   1d034:	df000104 	addi	fp,sp,4
   1d038:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1d03c:	e13fff17 	ldw	r4,-4(fp)
   1d040:	01400304 	movi	r5,12
   1d044:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
}
   1d048:	e037883a 	mov	sp,fp
   1d04c:	dfc00117 	ldw	ra,4(sp)
   1d050:	df000017 	ldw	fp,0(sp)
   1d054:	dec00204 	addi	sp,sp,8
   1d058:	f800283a 	ret

0001d05c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1d05c:	defffd04 	addi	sp,sp,-12
   1d060:	dfc00215 	stw	ra,8(sp)
   1d064:	df000115 	stw	fp,4(sp)
   1d068:	df000104 	addi	fp,sp,4
   1d06c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1d070:	e13fff17 	ldw	r4,-4(fp)
   1d074:	014003c4 	movi	r5,15
   1d078:	001cc2c0 	call	1cc2c <alt_up_character_lcd_send_cmd>
}
   1d07c:	e037883a 	mov	sp,fp
   1d080:	dfc00117 	ldw	ra,4(sp)
   1d084:	df000017 	ldw	fp,0(sp)
   1d088:	dec00204 	addi	sp,sp,8
   1d08c:	f800283a 	ret

0001d090 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1d090:	defffd04 	addi	sp,sp,-12
   1d094:	df000215 	stw	fp,8(sp)
   1d098:	df000204 	addi	fp,sp,8
   1d09c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d0a0:	e0bfff17 	ldw	r2,-4(fp)
   1d0a4:	10800a17 	ldw	r2,40(r2)
   1d0a8:	10800104 	addi	r2,r2,4
   1d0ac:	10800037 	ldwio	r2,0(r2)
   1d0b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1d0b4:	e0bffe17 	ldw	r2,-8(fp)
   1d0b8:	10800054 	ori	r2,r2,1
   1d0bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d0c0:	e0bfff17 	ldw	r2,-4(fp)
   1d0c4:	10800a17 	ldw	r2,40(r2)
   1d0c8:	10800104 	addi	r2,r2,4
   1d0cc:	1007883a 	mov	r3,r2
   1d0d0:	e0bffe17 	ldw	r2,-8(fp)
   1d0d4:	18800035 	stwio	r2,0(r3)
}
   1d0d8:	e037883a 	mov	sp,fp
   1d0dc:	df000017 	ldw	fp,0(sp)
   1d0e0:	dec00104 	addi	sp,sp,4
   1d0e4:	f800283a 	ret

0001d0e8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1d0e8:	defffd04 	addi	sp,sp,-12
   1d0ec:	df000215 	stw	fp,8(sp)
   1d0f0:	df000204 	addi	fp,sp,8
   1d0f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d0f8:	e0bfff17 	ldw	r2,-4(fp)
   1d0fc:	10800a17 	ldw	r2,40(r2)
   1d100:	10800104 	addi	r2,r2,4
   1d104:	10800037 	ldwio	r2,0(r2)
   1d108:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1d10c:	e0fffe17 	ldw	r3,-8(fp)
   1d110:	00bfff84 	movi	r2,-2
   1d114:	1884703a 	and	r2,r3,r2
   1d118:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d11c:	e0bfff17 	ldw	r2,-4(fp)
   1d120:	10800a17 	ldw	r2,40(r2)
   1d124:	10800104 	addi	r2,r2,4
   1d128:	1007883a 	mov	r3,r2
   1d12c:	e0bffe17 	ldw	r2,-8(fp)
   1d130:	18800035 	stwio	r2,0(r3)
}
   1d134:	e037883a 	mov	sp,fp
   1d138:	df000017 	ldw	fp,0(sp)
   1d13c:	dec00104 	addi	sp,sp,4
   1d140:	f800283a 	ret

0001d144 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1d144:	defffd04 	addi	sp,sp,-12
   1d148:	df000215 	stw	fp,8(sp)
   1d14c:	df000204 	addi	fp,sp,8
   1d150:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d154:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1d158:	e0bfff17 	ldw	r2,-4(fp)
   1d15c:	10800a17 	ldw	r2,40(r2)
   1d160:	10800084 	addi	r2,r2,2
   1d164:	1080002b 	ldhuio	r2,0(r2)
   1d168:	10bfffcc 	andi	r2,r2,65535
   1d16c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1d170:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d174:	e037883a 	mov	sp,fp
   1d178:	df000017 	ldw	fp,0(sp)
   1d17c:	dec00104 	addi	sp,sp,4
   1d180:	f800283a 	ret

0001d184 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1d184:	defffd04 	addi	sp,sp,-12
   1d188:	df000215 	stw	fp,8(sp)
   1d18c:	df000204 	addi	fp,sp,8
   1d190:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d194:	e0bfff17 	ldw	r2,-4(fp)
   1d198:	10800a17 	ldw	r2,40(r2)
   1d19c:	10800104 	addi	r2,r2,4
   1d1a0:	10800037 	ldwio	r2,0(r2)
   1d1a4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1d1a8:	e0bffe17 	ldw	r2,-8(fp)
   1d1ac:	1004d43a 	srli	r2,r2,16
}
   1d1b0:	e037883a 	mov	sp,fp
   1d1b4:	df000017 	ldw	fp,0(sp)
   1d1b8:	dec00104 	addi	sp,sp,4
   1d1bc:	f800283a 	ret

0001d1c0 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1d1c0:	defffd04 	addi	sp,sp,-12
   1d1c4:	df000215 	stw	fp,8(sp)
   1d1c8:	df000204 	addi	fp,sp,8
   1d1cc:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1d1d0:	e0bfff17 	ldw	r2,-4(fp)
   1d1d4:	1080800c 	andi	r2,r2,512
   1d1d8:	1004d27a 	srli	r2,r2,9
   1d1dc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d1e0:	e0bffe17 	ldw	r2,-8(fp)
   1d1e4:	10000226 	beq	r2,zero,1d1f0 <alt_up_irda_check_parity+0x30>
   1d1e8:	00bfffc4 	movi	r2,-1
   1d1ec:	00000106 	br	1d1f4 <alt_up_irda_check_parity+0x34>
   1d1f0:	0005883a 	mov	r2,zero
}
   1d1f4:	e037883a 	mov	sp,fp
   1d1f8:	df000017 	ldw	fp,0(sp)
   1d1fc:	dec00104 	addi	sp,sp,4
   1d200:	f800283a 	ret

0001d204 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1d204:	defffd04 	addi	sp,sp,-12
   1d208:	df000215 	stw	fp,8(sp)
   1d20c:	df000204 	addi	fp,sp,8
   1d210:	e13ffe15 	stw	r4,-8(fp)
   1d214:	2805883a 	mov	r2,r5
   1d218:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1d21c:	e0bffe17 	ldw	r2,-8(fp)
   1d220:	10800a17 	ldw	r2,40(r2)
   1d224:	1007883a 	mov	r3,r2
   1d228:	e0bfff03 	ldbu	r2,-4(fp)
   1d22c:	18800035 	stwio	r2,0(r3)
	return 0;
   1d230:	0005883a 	mov	r2,zero
}
   1d234:	e037883a 	mov	sp,fp
   1d238:	df000017 	ldw	fp,0(sp)
   1d23c:	dec00104 	addi	sp,sp,4
   1d240:	f800283a 	ret

0001d244 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1d244:	defffa04 	addi	sp,sp,-24
   1d248:	dfc00515 	stw	ra,20(sp)
   1d24c:	df000415 	stw	fp,16(sp)
   1d250:	df000404 	addi	fp,sp,16
   1d254:	e13ffd15 	stw	r4,-12(fp)
   1d258:	e17ffe15 	stw	r5,-8(fp)
   1d25c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1d260:	e0bffd17 	ldw	r2,-12(fp)
   1d264:	10800a17 	ldw	r2,40(r2)
   1d268:	10800037 	ldwio	r2,0(r2)
   1d26c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1d270:	e0bffc17 	ldw	r2,-16(fp)
   1d274:	1007883a 	mov	r3,r2
   1d278:	e0bffe17 	ldw	r2,-8(fp)
   1d27c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1d280:	e13ffc17 	ldw	r4,-16(fp)
   1d284:	001d1c00 	call	1d1c0 <alt_up_irda_check_parity>
   1d288:	1007883a 	mov	r3,r2
   1d28c:	e0bfff17 	ldw	r2,-4(fp)
   1d290:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1d294:	e0bffc17 	ldw	r2,-16(fp)
   1d298:	10a0000c 	andi	r2,r2,32768
   1d29c:	1004d3fa 	srli	r2,r2,15
   1d2a0:	10bfffc4 	addi	r2,r2,-1
}
   1d2a4:	e037883a 	mov	sp,fp
   1d2a8:	dfc00117 	ldw	ra,4(sp)
   1d2ac:	df000017 	ldw	fp,0(sp)
   1d2b0:	dec00204 	addi	sp,sp,8
   1d2b4:	f800283a 	ret

0001d2b8 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d2b8:	defff804 	addi	sp,sp,-32
   1d2bc:	dfc00715 	stw	ra,28(sp)
   1d2c0:	df000615 	stw	fp,24(sp)
   1d2c4:	df000604 	addi	fp,sp,24
   1d2c8:	e13ffd15 	stw	r4,-12(fp)
   1d2cc:	e17ffe15 	stw	r5,-8(fp)
   1d2d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d2d4:	e0bffd17 	ldw	r2,-12(fp)
   1d2d8:	10800017 	ldw	r2,0(r2)
   1d2dc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d2e0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d2e4:	00000e06 	br	1d320 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1d2e8:	e0bffe17 	ldw	r2,-8(fp)
   1d2ec:	10c00044 	addi	r3,r2,1
   1d2f0:	e0fffe15 	stw	r3,-8(fp)
   1d2f4:	e0fffc04 	addi	r3,fp,-16
   1d2f8:	e13ffb17 	ldw	r4,-20(fp)
   1d2fc:	100b883a 	mov	r5,r2
   1d300:	180d883a 	mov	r6,r3
   1d304:	001d2440 	call	1d244 <alt_up_irda_read_data>
   1d308:	1000041e 	bne	r2,zero,1d31c <alt_up_irda_read_fd+0x64>
			count++;
   1d30c:	e0bffa17 	ldw	r2,-24(fp)
   1d310:	10800044 	addi	r2,r2,1
   1d314:	e0bffa15 	stw	r2,-24(fp)
   1d318:	00000106 	br	1d320 <alt_up_irda_read_fd+0x68>
		else
			break;
   1d31c:	00000406 	br	1d330 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d320:	e0bfff17 	ldw	r2,-4(fp)
   1d324:	10ffffc4 	addi	r3,r2,-1
   1d328:	e0ffff15 	stw	r3,-4(fp)
   1d32c:	103fee1e 	bne	r2,zero,1d2e8 <__alt_mem_Flash_flash_data+0xf401d2e8>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1d330:	e0bffa17 	ldw	r2,-24(fp)
}
   1d334:	e037883a 	mov	sp,fp
   1d338:	dfc00117 	ldw	ra,4(sp)
   1d33c:	df000017 	ldw	fp,0(sp)
   1d340:	dec00204 	addi	sp,sp,8
   1d344:	f800283a 	ret

0001d348 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d348:	defff904 	addi	sp,sp,-28
   1d34c:	dfc00615 	stw	ra,24(sp)
   1d350:	df000515 	stw	fp,20(sp)
   1d354:	df000504 	addi	fp,sp,20
   1d358:	e13ffd15 	stw	r4,-12(fp)
   1d35c:	e17ffe15 	stw	r5,-8(fp)
   1d360:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d364:	e0bffd17 	ldw	r2,-12(fp)
   1d368:	10800017 	ldw	r2,0(r2)
   1d36c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d370:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d374:	00000e06 	br	1d3b0 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1d378:	e0bffe17 	ldw	r2,-8(fp)
   1d37c:	10c00044 	addi	r3,r2,1
   1d380:	e0fffe15 	stw	r3,-8(fp)
   1d384:	10800003 	ldbu	r2,0(r2)
   1d388:	10803fcc 	andi	r2,r2,255
   1d38c:	e13ffc17 	ldw	r4,-16(fp)
   1d390:	100b883a 	mov	r5,r2
   1d394:	001d2040 	call	1d204 <alt_up_irda_write_data>
   1d398:	1000041e 	bne	r2,zero,1d3ac <alt_up_irda_write_fd+0x64>
			count++;
   1d39c:	e0bffb17 	ldw	r2,-20(fp)
   1d3a0:	10800044 	addi	r2,r2,1
   1d3a4:	e0bffb15 	stw	r2,-20(fp)
   1d3a8:	00000106 	br	1d3b0 <alt_up_irda_write_fd+0x68>
		else
			break;
   1d3ac:	00000406 	br	1d3c0 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d3b0:	e0bfff17 	ldw	r2,-4(fp)
   1d3b4:	10ffffc4 	addi	r3,r2,-1
   1d3b8:	e0ffff15 	stw	r3,-4(fp)
   1d3bc:	103fee1e 	bne	r2,zero,1d378 <__alt_mem_Flash_flash_data+0xf401d378>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1d3c0:	e0bffb17 	ldw	r2,-20(fp)
}
   1d3c4:	e037883a 	mov	sp,fp
   1d3c8:	dfc00117 	ldw	ra,4(sp)
   1d3cc:	df000017 	ldw	fp,0(sp)
   1d3d0:	dec00204 	addi	sp,sp,8
   1d3d4:	f800283a 	ret

0001d3d8 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1d3d8:	defffc04 	addi	sp,sp,-16
   1d3dc:	dfc00315 	stw	ra,12(sp)
   1d3e0:	df000215 	stw	fp,8(sp)
   1d3e4:	df000204 	addi	fp,sp,8
   1d3e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1d3ec:	e13fff17 	ldw	r4,-4(fp)
   1d3f0:	014000b4 	movhi	r5,2
   1d3f4:	2947d404 	addi	r5,r5,8016
   1d3f8:	001e4880 	call	1e488 <alt_find_dev>
   1d3fc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d400:	e0bffe17 	ldw	r2,-8(fp)
}
   1d404:	e037883a 	mov	sp,fp
   1d408:	dfc00117 	ldw	ra,4(sp)
   1d40c:	df000017 	ldw	fp,0(sp)
   1d410:	dec00204 	addi	sp,sp,8
   1d414:	f800283a 	ret

0001d418 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1d418:	defffc04 	addi	sp,sp,-16
   1d41c:	dfc00315 	stw	ra,12(sp)
   1d420:	df000215 	stw	fp,8(sp)
   1d424:	df000204 	addi	fp,sp,8
   1d428:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1d42c:	e13fff17 	ldw	r4,-4(fp)
   1d430:	014000b4 	movhi	r5,2
   1d434:	2947d404 	addi	r5,r5,8016
   1d438:	001e4880 	call	1e488 <alt_find_dev>
   1d43c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d440:	e0bffe17 	ldw	r2,-8(fp)
}
   1d444:	e037883a 	mov	sp,fp
   1d448:	dfc00117 	ldw	ra,4(sp)
   1d44c:	df000017 	ldw	fp,0(sp)
   1d450:	dec00204 	addi	sp,sp,8
   1d454:	f800283a 	ret

0001d458 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1d458:	defffd04 	addi	sp,sp,-12
   1d45c:	df000215 	stw	fp,8(sp)
   1d460:	df000204 	addi	fp,sp,8
   1d464:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1d468:	e0bfff17 	ldw	r2,-4(fp)
   1d46c:	1080400c 	andi	r2,r2,256
   1d470:	1004d23a 	srli	r2,r2,8
   1d474:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1d478:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d47c:	e037883a 	mov	sp,fp
   1d480:	df000017 	ldw	fp,0(sp)
   1d484:	dec00104 	addi	sp,sp,4
   1d488:	f800283a 	ret

0001d48c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1d48c:	defffd04 	addi	sp,sp,-12
   1d490:	df000215 	stw	fp,8(sp)
   1d494:	df000204 	addi	fp,sp,8
   1d498:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1d49c:	e0bfff17 	ldw	r2,-4(fp)
   1d4a0:	1080004c 	andi	r2,r2,1
   1d4a4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d4a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d4ac:	e037883a 	mov	sp,fp
   1d4b0:	df000017 	ldw	fp,0(sp)
   1d4b4:	dec00104 	addi	sp,sp,4
   1d4b8:	f800283a 	ret

0001d4bc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1d4bc:	defffd04 	addi	sp,sp,-12
   1d4c0:	df000215 	stw	fp,8(sp)
   1d4c4:	df000204 	addi	fp,sp,8
   1d4c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1d4cc:	e0bfff17 	ldw	r2,-4(fp)
   1d4d0:	1081000c 	andi	r2,r2,1024
   1d4d4:	1004d2ba 	srli	r2,r2,10
   1d4d8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d4dc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d4e0:	e037883a 	mov	sp,fp
   1d4e4:	df000017 	ldw	fp,0(sp)
   1d4e8:	dec00104 	addi	sp,sp,4
   1d4ec:	f800283a 	ret

0001d4f0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1d4f0:	defffd04 	addi	sp,sp,-12
   1d4f4:	df000215 	stw	fp,8(sp)
   1d4f8:	df000204 	addi	fp,sp,8
   1d4fc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1d500:	e0bfff17 	ldw	r2,-4(fp)
   1d504:	1004d43a 	srli	r2,r2,16
   1d508:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1d50c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d510:	e037883a 	mov	sp,fp
   1d514:	df000017 	ldw	fp,0(sp)
   1d518:	dec00104 	addi	sp,sp,4
   1d51c:	f800283a 	ret

0001d520 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1d520:	defffd04 	addi	sp,sp,-12
   1d524:	df000215 	stw	fp,8(sp)
   1d528:	df000204 	addi	fp,sp,8
   1d52c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1d530:	e0bfff17 	ldw	r2,-4(fp)
   1d534:	10a0000c 	andi	r2,r2,32768
   1d538:	1004d3fa 	srli	r2,r2,15
   1d53c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1d540:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d544:	e037883a 	mov	sp,fp
   1d548:	df000017 	ldw	fp,0(sp)
   1d54c:	dec00104 	addi	sp,sp,4
   1d550:	f800283a 	ret

0001d554 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1d554:	defffd04 	addi	sp,sp,-12
   1d558:	df000215 	stw	fp,8(sp)
   1d55c:	df000204 	addi	fp,sp,8
   1d560:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1d564:	e0bfff17 	ldw	r2,-4(fp)
   1d568:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1d56c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d570:	e037883a 	mov	sp,fp
   1d574:	df000017 	ldw	fp,0(sp)
   1d578:	dec00104 	addi	sp,sp,4
   1d57c:	f800283a 	ret

0001d580 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1d580:	defffb04 	addi	sp,sp,-20
   1d584:	dfc00415 	stw	ra,16(sp)
   1d588:	df000315 	stw	fp,12(sp)
   1d58c:	df000304 	addi	fp,sp,12
   1d590:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1d594:	e13fff17 	ldw	r4,-4(fp)
   1d598:	01403fc4 	movi	r5,255
   1d59c:	001d7dc0 	call	1d7dc <alt_up_ps2_write_data_byte_with_ack>
   1d5a0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1d5a4:	e0bffd17 	ldw	r2,-12(fp)
   1d5a8:	1000211e 	bne	r2,zero,1d630 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d5ac:	e0bffe04 	addi	r2,fp,-8
   1d5b0:	e13fff17 	ldw	r4,-4(fp)
   1d5b4:	100b883a 	mov	r5,r2
   1d5b8:	001d8400 	call	1d840 <alt_up_ps2_read_data_byte_timeout>
   1d5bc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1d5c0:	e0bffd17 	ldw	r2,-12(fp)
   1d5c4:	10001a1e 	bne	r2,zero,1d630 <alt_up_ps2_init+0xb0>
   1d5c8:	e0bffe03 	ldbu	r2,-8(fp)
   1d5cc:	10803fcc 	andi	r2,r2,255
   1d5d0:	10802a98 	cmpnei	r2,r2,170
   1d5d4:	1000161e 	bne	r2,zero,1d630 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d5d8:	e0bffe04 	addi	r2,fp,-8
   1d5dc:	e13fff17 	ldw	r4,-4(fp)
   1d5e0:	100b883a 	mov	r5,r2
   1d5e4:	001d8400 	call	1d840 <alt_up_ps2_read_data_byte_timeout>
   1d5e8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1d5ec:	e0bffd17 	ldw	r2,-12(fp)
   1d5f0:	10bfe318 	cmpnei	r2,r2,-116
   1d5f4:	1000041e 	bne	r2,zero,1d608 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1d5f8:	e0bfff17 	ldw	r2,-4(fp)
   1d5fc:	00c00044 	movi	r3,1
   1d600:	10c00d15 	stw	r3,52(r2)
   1d604:	00000a06 	br	1d630 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1d608:	e0bffd17 	ldw	r2,-12(fp)
   1d60c:	1000081e 	bne	r2,zero,1d630 <alt_up_ps2_init+0xb0>
   1d610:	e0bffe03 	ldbu	r2,-8(fp)
   1d614:	10803fcc 	andi	r2,r2,255
   1d618:	1000051e 	bne	r2,zero,1d630 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1d61c:	e0bfff17 	ldw	r2,-4(fp)
   1d620:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1d624:	e13fff17 	ldw	r4,-4(fp)
   1d628:	01403d04 	movi	r5,244
   1d62c:	001d6f80 	call	1d6f8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1d630:	e037883a 	mov	sp,fp
   1d634:	dfc00117 	ldw	ra,4(sp)
   1d638:	df000017 	ldw	fp,0(sp)
   1d63c:	dec00204 	addi	sp,sp,8
   1d640:	f800283a 	ret

0001d644 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d644:	defffd04 	addi	sp,sp,-12
   1d648:	df000215 	stw	fp,8(sp)
   1d64c:	df000204 	addi	fp,sp,8
   1d650:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d654:	e0bfff17 	ldw	r2,-4(fp)
   1d658:	10800a17 	ldw	r2,40(r2)
   1d65c:	10800104 	addi	r2,r2,4
   1d660:	10800037 	ldwio	r2,0(r2)
   1d664:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d668:	e0bffe17 	ldw	r2,-8(fp)
   1d66c:	10800054 	ori	r2,r2,1
   1d670:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d674:	e0bfff17 	ldw	r2,-4(fp)
   1d678:	10800a17 	ldw	r2,40(r2)
   1d67c:	10800104 	addi	r2,r2,4
   1d680:	1007883a 	mov	r3,r2
   1d684:	e0bffe17 	ldw	r2,-8(fp)
   1d688:	18800035 	stwio	r2,0(r3)
}
   1d68c:	e037883a 	mov	sp,fp
   1d690:	df000017 	ldw	fp,0(sp)
   1d694:	dec00104 	addi	sp,sp,4
   1d698:	f800283a 	ret

0001d69c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d69c:	defffd04 	addi	sp,sp,-12
   1d6a0:	df000215 	stw	fp,8(sp)
   1d6a4:	df000204 	addi	fp,sp,8
   1d6a8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d6ac:	e0bfff17 	ldw	r2,-4(fp)
   1d6b0:	10800a17 	ldw	r2,40(r2)
   1d6b4:	10800104 	addi	r2,r2,4
   1d6b8:	10800037 	ldwio	r2,0(r2)
   1d6bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d6c0:	e0fffe17 	ldw	r3,-8(fp)
   1d6c4:	00bfff84 	movi	r2,-2
   1d6c8:	1884703a 	and	r2,r3,r2
   1d6cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d6d0:	e0bfff17 	ldw	r2,-4(fp)
   1d6d4:	10800a17 	ldw	r2,40(r2)
   1d6d8:	10800104 	addi	r2,r2,4
   1d6dc:	1007883a 	mov	r3,r2
   1d6e0:	e0bffe17 	ldw	r2,-8(fp)
   1d6e4:	18800035 	stwio	r2,0(r3)
}
   1d6e8:	e037883a 	mov	sp,fp
   1d6ec:	df000017 	ldw	fp,0(sp)
   1d6f0:	dec00104 	addi	sp,sp,4
   1d6f4:	f800283a 	ret

0001d6f8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d6f8:	defffb04 	addi	sp,sp,-20
   1d6fc:	dfc00415 	stw	ra,16(sp)
   1d700:	df000315 	stw	fp,12(sp)
   1d704:	df000304 	addi	fp,sp,12
   1d708:	e13ffe15 	stw	r4,-8(fp)
   1d70c:	2805883a 	mov	r2,r5
   1d710:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1d714:	e0bffe17 	ldw	r2,-8(fp)
   1d718:	10800a17 	ldw	r2,40(r2)
   1d71c:	1007883a 	mov	r3,r2
   1d720:	e0bfff03 	ldbu	r2,-4(fp)
   1d724:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1d728:	e0bffe17 	ldw	r2,-8(fp)
   1d72c:	10800a17 	ldw	r2,40(r2)
   1d730:	10800104 	addi	r2,r2,4
   1d734:	10800037 	ldwio	r2,0(r2)
   1d738:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1d73c:	e13ffd17 	ldw	r4,-12(fp)
   1d740:	001d4bc0 	call	1d4bc <read_CE_bit>
   1d744:	10803fcc 	andi	r2,r2,255
   1d748:	10000226 	beq	r2,zero,1d754 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1d74c:	00bffec4 	movi	r2,-5
   1d750:	00000106 	br	1d758 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1d754:	0005883a 	mov	r2,zero
}
   1d758:	e037883a 	mov	sp,fp
   1d75c:	dfc00117 	ldw	ra,4(sp)
   1d760:	df000017 	ldw	fp,0(sp)
   1d764:	dec00204 	addi	sp,sp,8
   1d768:	f800283a 	ret

0001d76c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1d76c:	defffc04 	addi	sp,sp,-16
   1d770:	dfc00315 	stw	ra,12(sp)
   1d774:	df000215 	stw	fp,8(sp)
   1d778:	df000204 	addi	fp,sp,8
   1d77c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1d780:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1d784:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1d788:	e0bffe44 	addi	r2,fp,-7
   1d78c:	e13fff17 	ldw	r4,-4(fp)
   1d790:	100b883a 	mov	r5,r2
   1d794:	001d8400 	call	1d840 <alt_up_ps2_read_data_byte_timeout>
   1d798:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1d79c:	e0bffe03 	ldbu	r2,-8(fp)
   1d7a0:	1000061e 	bne	r2,zero,1d7bc <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1d7a4:	e0bffe43 	ldbu	r2,-7(fp)
   1d7a8:	10803fcc 	andi	r2,r2,255
   1d7ac:	10803e98 	cmpnei	r2,r2,250
   1d7b0:	1000041e 	bne	r2,zero,1d7c4 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1d7b4:	0005883a 	mov	r2,zero
   1d7b8:	00000306 	br	1d7c8 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1d7bc:	e0bffe03 	ldbu	r2,-8(fp)
   1d7c0:	00000106 	br	1d7c8 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1d7c4:	003ff006 	br	1d788 <__alt_mem_Flash_flash_data+0xf401d788>
	return -ETIMEDOUT;
}
   1d7c8:	e037883a 	mov	sp,fp
   1d7cc:	dfc00117 	ldw	ra,4(sp)
   1d7d0:	df000017 	ldw	fp,0(sp)
   1d7d4:	dec00204 	addi	sp,sp,8
   1d7d8:	f800283a 	ret

0001d7dc <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d7dc:	defffa04 	addi	sp,sp,-24
   1d7e0:	dfc00515 	stw	ra,20(sp)
   1d7e4:	df000415 	stw	fp,16(sp)
   1d7e8:	df000404 	addi	fp,sp,16
   1d7ec:	e13ffe15 	stw	r4,-8(fp)
   1d7f0:	2805883a 	mov	r2,r5
   1d7f4:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1d7f8:	e0bfff03 	ldbu	r2,-4(fp)
   1d7fc:	e13ffe17 	ldw	r4,-8(fp)
   1d800:	100b883a 	mov	r5,r2
   1d804:	001d6f80 	call	1d6f8 <alt_up_ps2_write_data_byte>
   1d808:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1d80c:	e0bffc17 	ldw	r2,-16(fp)
   1d810:	10000226 	beq	r2,zero,1d81c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1d814:	e0bffc17 	ldw	r2,-16(fp)
   1d818:	00000406 	br	1d82c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1d81c:	e13ffe17 	ldw	r4,-8(fp)
   1d820:	001d76c0 	call	1d76c <alt_up_ps2_wait_for_ack>
   1d824:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1d828:	e0bffd17 	ldw	r2,-12(fp)
}
   1d82c:	e037883a 	mov	sp,fp
   1d830:	dfc00117 	ldw	ra,4(sp)
   1d834:	df000017 	ldw	fp,0(sp)
   1d838:	dec00204 	addi	sp,sp,8
   1d83c:	f800283a 	ret

0001d840 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1d840:	defffa04 	addi	sp,sp,-24
   1d844:	dfc00515 	stw	ra,20(sp)
   1d848:	df000415 	stw	fp,16(sp)
   1d84c:	df000404 	addi	fp,sp,16
   1d850:	e13ffe15 	stw	r4,-8(fp)
   1d854:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1d858:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1d85c:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1d860:	e0bffc17 	ldw	r2,-16(fp)
   1d864:	10800044 	addi	r2,r2,1
   1d868:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d86c:	e0bffe17 	ldw	r2,-8(fp)
   1d870:	10800a17 	ldw	r2,40(r2)
   1d874:	10800037 	ldwio	r2,0(r2)
   1d878:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1d87c:	e13ffd17 	ldw	r4,-12(fp)
   1d880:	001d5200 	call	1d520 <read_data_valid>
   1d884:	10803fcc 	andi	r2,r2,255
   1d888:	10000726 	beq	r2,zero,1d8a8 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1d88c:	e13ffd17 	ldw	r4,-12(fp)
   1d890:	001d5540 	call	1d554 <read_data_byte>
   1d894:	1007883a 	mov	r3,r2
   1d898:	e0bfff17 	ldw	r2,-4(fp)
   1d89c:	10c00005 	stb	r3,0(r2)
			return 0;
   1d8a0:	0005883a 	mov	r2,zero
   1d8a4:	00000a06 	br	1d8d0 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1d8a8:	e0bffe17 	ldw	r2,-8(fp)
   1d8ac:	10800c17 	ldw	r2,48(r2)
   1d8b0:	10000626 	beq	r2,zero,1d8cc <alt_up_ps2_read_data_byte_timeout+0x8c>
   1d8b4:	e0bffe17 	ldw	r2,-8(fp)
   1d8b8:	10c00c17 	ldw	r3,48(r2)
   1d8bc:	e0bffc17 	ldw	r2,-16(fp)
   1d8c0:	1880022e 	bgeu	r3,r2,1d8cc <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1d8c4:	00bfe304 	movi	r2,-116
   1d8c8:	00000106 	br	1d8d0 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1d8cc:	003fe406 	br	1d860 <__alt_mem_Flash_flash_data+0xf401d860>
}
   1d8d0:	e037883a 	mov	sp,fp
   1d8d4:	dfc00117 	ldw	ra,4(sp)
   1d8d8:	df000017 	ldw	fp,0(sp)
   1d8dc:	dec00204 	addi	sp,sp,8
   1d8e0:	f800283a 	ret

0001d8e4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1d8e4:	defffb04 	addi	sp,sp,-20
   1d8e8:	dfc00415 	stw	ra,16(sp)
   1d8ec:	df000315 	stw	fp,12(sp)
   1d8f0:	df000304 	addi	fp,sp,12
   1d8f4:	e13ffe15 	stw	r4,-8(fp)
   1d8f8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1d8fc:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d900:	e0bffe17 	ldw	r2,-8(fp)
   1d904:	10800a17 	ldw	r2,40(r2)
   1d908:	10800037 	ldwio	r2,0(r2)
   1d90c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1d910:	e13ffd17 	ldw	r4,-12(fp)
   1d914:	001d5200 	call	1d520 <read_data_valid>
   1d918:	10803fcc 	andi	r2,r2,255
   1d91c:	10000726 	beq	r2,zero,1d93c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1d920:	e13ffd17 	ldw	r4,-12(fp)
   1d924:	001d5540 	call	1d554 <read_data_byte>
   1d928:	1007883a 	mov	r3,r2
   1d92c:	e0bfff17 	ldw	r2,-4(fp)
   1d930:	10c00005 	stb	r3,0(r2)
		return 0;
   1d934:	0005883a 	mov	r2,zero
   1d938:	00000106 	br	1d940 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1d93c:	00bfffc4 	movi	r2,-1
}
   1d940:	e037883a 	mov	sp,fp
   1d944:	dfc00117 	ldw	ra,4(sp)
   1d948:	df000017 	ldw	fp,0(sp)
   1d94c:	dec00204 	addi	sp,sp,8
   1d950:	f800283a 	ret

0001d954 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1d954:	defffb04 	addi	sp,sp,-20
   1d958:	dfc00415 	stw	ra,16(sp)
   1d95c:	df000315 	stw	fp,12(sp)
   1d960:	df000304 	addi	fp,sp,12
   1d964:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1d968:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1d96c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d970:	e0bfff17 	ldw	r2,-4(fp)
   1d974:	10800a17 	ldw	r2,40(r2)
   1d978:	10800037 	ldwio	r2,0(r2)
   1d97c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1d980:	e13ffe17 	ldw	r4,-8(fp)
   1d984:	001d4f00 	call	1d4f0 <read_num_bytes_available>
   1d988:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1d98c:	e0bffd0b 	ldhu	r2,-12(fp)
   1d990:	103ff71e 	bne	r2,zero,1d970 <__alt_mem_Flash_flash_data+0xf401d970>
}
   1d994:	e037883a 	mov	sp,fp
   1d998:	dfc00117 	ldw	ra,4(sp)
   1d99c:	df000017 	ldw	fp,0(sp)
   1d9a0:	dec00204 	addi	sp,sp,8
   1d9a4:	f800283a 	ret

0001d9a8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d9a8:	defff804 	addi	sp,sp,-32
   1d9ac:	dfc00715 	stw	ra,28(sp)
   1d9b0:	df000615 	stw	fp,24(sp)
   1d9b4:	df000604 	addi	fp,sp,24
   1d9b8:	e13ffd15 	stw	r4,-12(fp)
   1d9bc:	e17ffe15 	stw	r5,-8(fp)
   1d9c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d9c4:	e0bffd17 	ldw	r2,-12(fp)
   1d9c8:	10800017 	ldw	r2,0(r2)
   1d9cc:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1d9d0:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1d9d4:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1d9d8:	e0fffc17 	ldw	r3,-16(fp)
   1d9dc:	e0bfff17 	ldw	r2,-4(fp)
   1d9e0:	18bffd16 	blt	r3,r2,1d9d8 <__alt_mem_Flash_flash_data+0xf401d9d8>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1d9e4:	e0bffe17 	ldw	r2,-8(fp)
   1d9e8:	10c00044 	addi	r3,r2,1
   1d9ec:	e0fffe15 	stw	r3,-8(fp)
   1d9f0:	e13ffa17 	ldw	r4,-24(fp)
   1d9f4:	100b883a 	mov	r5,r2
   1d9f8:	001d8400 	call	1d840 <alt_up_ps2_read_data_byte_timeout>
   1d9fc:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1da00:	e0bffb17 	ldw	r2,-20(fp)
   1da04:	10000226 	beq	r2,zero,1da10 <alt_up_ps2_read_fd+0x68>
			return count;
   1da08:	e0bffc17 	ldw	r2,-16(fp)
   1da0c:	00000406 	br	1da20 <alt_up_ps2_read_fd+0x78>
		count++;
   1da10:	e0bffc17 	ldw	r2,-16(fp)
   1da14:	10800044 	addi	r2,r2,1
   1da18:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1da1c:	e0bffc17 	ldw	r2,-16(fp)
}
   1da20:	e037883a 	mov	sp,fp
   1da24:	dfc00117 	ldw	ra,4(sp)
   1da28:	df000017 	ldw	fp,0(sp)
   1da2c:	dec00204 	addi	sp,sp,8
   1da30:	f800283a 	ret

0001da34 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1da34:	defff804 	addi	sp,sp,-32
   1da38:	dfc00715 	stw	ra,28(sp)
   1da3c:	df000615 	stw	fp,24(sp)
   1da40:	df000604 	addi	fp,sp,24
   1da44:	e13ffd15 	stw	r4,-12(fp)
   1da48:	e17ffe15 	stw	r5,-8(fp)
   1da4c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1da50:	e0bffd17 	ldw	r2,-12(fp)
   1da54:	10800017 	ldw	r2,0(r2)
   1da58:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1da5c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1da60:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1da64:	00001006 	br	1daa8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1da68:	e0bffe17 	ldw	r2,-8(fp)
   1da6c:	10c00044 	addi	r3,r2,1
   1da70:	e0fffe15 	stw	r3,-8(fp)
   1da74:	10800003 	ldbu	r2,0(r2)
   1da78:	10803fcc 	andi	r2,r2,255
   1da7c:	e13ffb17 	ldw	r4,-20(fp)
   1da80:	100b883a 	mov	r5,r2
   1da84:	001d6f80 	call	1d6f8 <alt_up_ps2_write_data_byte>
   1da88:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1da8c:	e0bffc17 	ldw	r2,-16(fp)
   1da90:	10000226 	beq	r2,zero,1da9c <alt_up_ps2_write_fd+0x68>
			return count;
   1da94:	e0bffa17 	ldw	r2,-24(fp)
   1da98:	00000706 	br	1dab8 <alt_up_ps2_write_fd+0x84>
		count++;
   1da9c:	e0bffa17 	ldw	r2,-24(fp)
   1daa0:	10800044 	addi	r2,r2,1
   1daa4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1daa8:	e0fffa17 	ldw	r3,-24(fp)
   1daac:	e0bfff17 	ldw	r2,-4(fp)
   1dab0:	18bfed16 	blt	r3,r2,1da68 <__alt_mem_Flash_flash_data+0xf401da68>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1dab4:	e0bffa17 	ldw	r2,-24(fp)
}
   1dab8:	e037883a 	mov	sp,fp
   1dabc:	dfc00117 	ldw	ra,4(sp)
   1dac0:	df000017 	ldw	fp,0(sp)
   1dac4:	dec00204 	addi	sp,sp,8
   1dac8:	f800283a 	ret

0001dacc <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1dacc:	defffc04 	addi	sp,sp,-16
   1dad0:	dfc00315 	stw	ra,12(sp)
   1dad4:	df000215 	stw	fp,8(sp)
   1dad8:	df000204 	addi	fp,sp,8
   1dadc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1dae0:	e13fff17 	ldw	r4,-4(fp)
   1dae4:	014000b4 	movhi	r5,2
   1dae8:	2947d404 	addi	r5,r5,8016
   1daec:	001e4880 	call	1e488 <alt_find_dev>
   1daf0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1daf4:	e0bffe17 	ldw	r2,-8(fp)
}
   1daf8:	e037883a 	mov	sp,fp
   1dafc:	dfc00117 	ldw	ra,4(sp)
   1db00:	df000017 	ldw	fp,0(sp)
   1db04:	dec00204 	addi	sp,sp,8
   1db08:	f800283a 	ret

0001db0c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1db0c:	defffd04 	addi	sp,sp,-12
   1db10:	df000215 	stw	fp,8(sp)
   1db14:	df000204 	addi	fp,sp,8
   1db18:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1db1c:	e0bfff17 	ldw	r2,-4(fp)
   1db20:	10800a17 	ldw	r2,40(r2)
   1db24:	10800104 	addi	r2,r2,4
   1db28:	10800037 	ldwio	r2,0(r2)
   1db2c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1db30:	e0bffe17 	ldw	r2,-8(fp)
   1db34:	10800054 	ori	r2,r2,1
   1db38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1db3c:	e0bfff17 	ldw	r2,-4(fp)
   1db40:	10800a17 	ldw	r2,40(r2)
   1db44:	10800104 	addi	r2,r2,4
   1db48:	1007883a 	mov	r3,r2
   1db4c:	e0bffe17 	ldw	r2,-8(fp)
   1db50:	18800035 	stwio	r2,0(r3)
}
   1db54:	e037883a 	mov	sp,fp
   1db58:	df000017 	ldw	fp,0(sp)
   1db5c:	dec00104 	addi	sp,sp,4
   1db60:	f800283a 	ret

0001db64 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1db64:	defffd04 	addi	sp,sp,-12
   1db68:	df000215 	stw	fp,8(sp)
   1db6c:	df000204 	addi	fp,sp,8
   1db70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1db74:	e0bfff17 	ldw	r2,-4(fp)
   1db78:	10800a17 	ldw	r2,40(r2)
   1db7c:	10800104 	addi	r2,r2,4
   1db80:	10800037 	ldwio	r2,0(r2)
   1db84:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1db88:	e0fffe17 	ldw	r3,-8(fp)
   1db8c:	00bfff84 	movi	r2,-2
   1db90:	1884703a 	and	r2,r3,r2
   1db94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1db98:	e0bfff17 	ldw	r2,-4(fp)
   1db9c:	10800a17 	ldw	r2,40(r2)
   1dba0:	10800104 	addi	r2,r2,4
   1dba4:	1007883a 	mov	r3,r2
   1dba8:	e0bffe17 	ldw	r2,-8(fp)
   1dbac:	18800035 	stwio	r2,0(r3)
}
   1dbb0:	e037883a 	mov	sp,fp
   1dbb4:	df000017 	ldw	fp,0(sp)
   1dbb8:	dec00104 	addi	sp,sp,4
   1dbbc:	f800283a 	ret

0001dbc0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1dbc0:	defffd04 	addi	sp,sp,-12
   1dbc4:	df000215 	stw	fp,8(sp)
   1dbc8:	df000204 	addi	fp,sp,8
   1dbcc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1dbd0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1dbd4:	e0bfff17 	ldw	r2,-4(fp)
   1dbd8:	10800a17 	ldw	r2,40(r2)
   1dbdc:	10800084 	addi	r2,r2,2
   1dbe0:	1080002b 	ldhuio	r2,0(r2)
   1dbe4:	10bfffcc 	andi	r2,r2,65535
   1dbe8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1dbec:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1dbf0:	e037883a 	mov	sp,fp
   1dbf4:	df000017 	ldw	fp,0(sp)
   1dbf8:	dec00104 	addi	sp,sp,4
   1dbfc:	f800283a 	ret

0001dc00 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1dc00:	defffd04 	addi	sp,sp,-12
   1dc04:	df000215 	stw	fp,8(sp)
   1dc08:	df000204 	addi	fp,sp,8
   1dc0c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1dc10:	e0bfff17 	ldw	r2,-4(fp)
   1dc14:	10800a17 	ldw	r2,40(r2)
   1dc18:	10800104 	addi	r2,r2,4
   1dc1c:	10800037 	ldwio	r2,0(r2)
   1dc20:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1dc24:	e0bffe17 	ldw	r2,-8(fp)
   1dc28:	1004d43a 	srli	r2,r2,16
}
   1dc2c:	e037883a 	mov	sp,fp
   1dc30:	df000017 	ldw	fp,0(sp)
   1dc34:	dec00104 	addi	sp,sp,4
   1dc38:	f800283a 	ret

0001dc3c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1dc3c:	defffd04 	addi	sp,sp,-12
   1dc40:	df000215 	stw	fp,8(sp)
   1dc44:	df000204 	addi	fp,sp,8
   1dc48:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1dc4c:	e0bfff17 	ldw	r2,-4(fp)
   1dc50:	1080800c 	andi	r2,r2,512
   1dc54:	1004d27a 	srli	r2,r2,9
   1dc58:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1dc5c:	e0bffe17 	ldw	r2,-8(fp)
   1dc60:	10000226 	beq	r2,zero,1dc6c <alt_up_rs232_check_parity+0x30>
   1dc64:	00bfffc4 	movi	r2,-1
   1dc68:	00000106 	br	1dc70 <alt_up_rs232_check_parity+0x34>
   1dc6c:	0005883a 	mov	r2,zero
}
   1dc70:	e037883a 	mov	sp,fp
   1dc74:	df000017 	ldw	fp,0(sp)
   1dc78:	dec00104 	addi	sp,sp,4
   1dc7c:	f800283a 	ret

0001dc80 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1dc80:	defffd04 	addi	sp,sp,-12
   1dc84:	df000215 	stw	fp,8(sp)
   1dc88:	df000204 	addi	fp,sp,8
   1dc8c:	e13ffe15 	stw	r4,-8(fp)
   1dc90:	2805883a 	mov	r2,r5
   1dc94:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1dc98:	e0bffe17 	ldw	r2,-8(fp)
   1dc9c:	10800a17 	ldw	r2,40(r2)
   1dca0:	1007883a 	mov	r3,r2
   1dca4:	e0bfff03 	ldbu	r2,-4(fp)
   1dca8:	18800035 	stwio	r2,0(r3)
	return 0;
   1dcac:	0005883a 	mov	r2,zero
}
   1dcb0:	e037883a 	mov	sp,fp
   1dcb4:	df000017 	ldw	fp,0(sp)
   1dcb8:	dec00104 	addi	sp,sp,4
   1dcbc:	f800283a 	ret

0001dcc0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1dcc0:	defffa04 	addi	sp,sp,-24
   1dcc4:	dfc00515 	stw	ra,20(sp)
   1dcc8:	df000415 	stw	fp,16(sp)
   1dccc:	df000404 	addi	fp,sp,16
   1dcd0:	e13ffd15 	stw	r4,-12(fp)
   1dcd4:	e17ffe15 	stw	r5,-8(fp)
   1dcd8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1dcdc:	e0bffd17 	ldw	r2,-12(fp)
   1dce0:	10800a17 	ldw	r2,40(r2)
   1dce4:	10800037 	ldwio	r2,0(r2)
   1dce8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1dcec:	e0bffc17 	ldw	r2,-16(fp)
   1dcf0:	1007883a 	mov	r3,r2
   1dcf4:	e0bffe17 	ldw	r2,-8(fp)
   1dcf8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1dcfc:	e13ffc17 	ldw	r4,-16(fp)
   1dd00:	001dc3c0 	call	1dc3c <alt_up_rs232_check_parity>
   1dd04:	1007883a 	mov	r3,r2
   1dd08:	e0bfff17 	ldw	r2,-4(fp)
   1dd0c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1dd10:	e0bffc17 	ldw	r2,-16(fp)
   1dd14:	10a0000c 	andi	r2,r2,32768
   1dd18:	1004d3fa 	srli	r2,r2,15
   1dd1c:	10bfffc4 	addi	r2,r2,-1
}
   1dd20:	e037883a 	mov	sp,fp
   1dd24:	dfc00117 	ldw	ra,4(sp)
   1dd28:	df000017 	ldw	fp,0(sp)
   1dd2c:	dec00204 	addi	sp,sp,8
   1dd30:	f800283a 	ret

0001dd34 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1dd34:	defff804 	addi	sp,sp,-32
   1dd38:	dfc00715 	stw	ra,28(sp)
   1dd3c:	df000615 	stw	fp,24(sp)
   1dd40:	df000604 	addi	fp,sp,24
   1dd44:	e13ffd15 	stw	r4,-12(fp)
   1dd48:	e17ffe15 	stw	r5,-8(fp)
   1dd4c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1dd50:	e0bffd17 	ldw	r2,-12(fp)
   1dd54:	10800017 	ldw	r2,0(r2)
   1dd58:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1dd5c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1dd60:	00000e06 	br	1dd9c <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1dd64:	e0bffe17 	ldw	r2,-8(fp)
   1dd68:	10c00044 	addi	r3,r2,1
   1dd6c:	e0fffe15 	stw	r3,-8(fp)
   1dd70:	e0fffc04 	addi	r3,fp,-16
   1dd74:	e13ffb17 	ldw	r4,-20(fp)
   1dd78:	100b883a 	mov	r5,r2
   1dd7c:	180d883a 	mov	r6,r3
   1dd80:	001dcc00 	call	1dcc0 <alt_up_rs232_read_data>
   1dd84:	1000041e 	bne	r2,zero,1dd98 <alt_up_rs232_read_fd+0x64>
			count++;
   1dd88:	e0bffa17 	ldw	r2,-24(fp)
   1dd8c:	10800044 	addi	r2,r2,1
   1dd90:	e0bffa15 	stw	r2,-24(fp)
   1dd94:	00000106 	br	1dd9c <alt_up_rs232_read_fd+0x68>
		else
			break;
   1dd98:	00000406 	br	1ddac <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1dd9c:	e0bfff17 	ldw	r2,-4(fp)
   1dda0:	10ffffc4 	addi	r3,r2,-1
   1dda4:	e0ffff15 	stw	r3,-4(fp)
   1dda8:	103fee1e 	bne	r2,zero,1dd64 <__alt_mem_Flash_flash_data+0xf401dd64>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ddac:	e0bffa17 	ldw	r2,-24(fp)
}
   1ddb0:	e037883a 	mov	sp,fp
   1ddb4:	dfc00117 	ldw	ra,4(sp)
   1ddb8:	df000017 	ldw	fp,0(sp)
   1ddbc:	dec00204 	addi	sp,sp,8
   1ddc0:	f800283a 	ret

0001ddc4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ddc4:	defff904 	addi	sp,sp,-28
   1ddc8:	dfc00615 	stw	ra,24(sp)
   1ddcc:	df000515 	stw	fp,20(sp)
   1ddd0:	df000504 	addi	fp,sp,20
   1ddd4:	e13ffd15 	stw	r4,-12(fp)
   1ddd8:	e17ffe15 	stw	r5,-8(fp)
   1dddc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1dde0:	e0bffd17 	ldw	r2,-12(fp)
   1dde4:	10800017 	ldw	r2,0(r2)
   1dde8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1ddec:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1ddf0:	00000f06 	br	1de30 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1ddf4:	e0bffe17 	ldw	r2,-8(fp)
   1ddf8:	10800003 	ldbu	r2,0(r2)
   1ddfc:	10803fcc 	andi	r2,r2,255
   1de00:	e13ffc17 	ldw	r4,-16(fp)
   1de04:	100b883a 	mov	r5,r2
   1de08:	001dc800 	call	1dc80 <alt_up_rs232_write_data>
   1de0c:	1000071e 	bne	r2,zero,1de2c <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1de10:	e0bffb17 	ldw	r2,-20(fp)
   1de14:	10800044 	addi	r2,r2,1
   1de18:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1de1c:	e0bffe17 	ldw	r2,-8(fp)
   1de20:	10800044 	addi	r2,r2,1
   1de24:	e0bffe15 	stw	r2,-8(fp)
   1de28:	00000106 	br	1de30 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1de2c:	00000406 	br	1de40 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1de30:	e0bfff17 	ldw	r2,-4(fp)
   1de34:	10ffffc4 	addi	r3,r2,-1
   1de38:	e0ffff15 	stw	r3,-4(fp)
   1de3c:	103fed1e 	bne	r2,zero,1ddf4 <__alt_mem_Flash_flash_data+0xf401ddf4>
			ptr++;
		}
		else
			break;
	}
	return count;
   1de40:	e0bffb17 	ldw	r2,-20(fp)
}
   1de44:	e037883a 	mov	sp,fp
   1de48:	dfc00117 	ldw	ra,4(sp)
   1de4c:	df000017 	ldw	fp,0(sp)
   1de50:	dec00204 	addi	sp,sp,8
   1de54:	f800283a 	ret

0001de58 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1de58:	defffc04 	addi	sp,sp,-16
   1de5c:	dfc00315 	stw	ra,12(sp)
   1de60:	df000215 	stw	fp,8(sp)
   1de64:	df000204 	addi	fp,sp,8
   1de68:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1de6c:	e13fff17 	ldw	r4,-4(fp)
   1de70:	014000b4 	movhi	r5,2
   1de74:	2947d404 	addi	r5,r5,8016
   1de78:	001e4880 	call	1e488 <alt_find_dev>
   1de7c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1de80:	e0bffe17 	ldw	r2,-8(fp)
}
   1de84:	e037883a 	mov	sp,fp
   1de88:	dfc00117 	ldw	ra,4(sp)
   1de8c:	df000017 	ldw	fp,0(sp)
   1de90:	dec00204 	addi	sp,sp,8
   1de94:	f800283a 	ret

0001de98 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1de98:	defffc04 	addi	sp,sp,-16
   1de9c:	dfc00315 	stw	ra,12(sp)
   1dea0:	df000215 	stw	fp,8(sp)
   1dea4:	df000204 	addi	fp,sp,8
   1dea8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1deac:	e0bfff17 	ldw	r2,-4(fp)
   1deb0:	10800217 	ldw	r2,8(r2)
   1deb4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1deb8:	00000b06 	br	1dee8 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1debc:	e13ffe17 	ldw	r4,-8(fp)
   1dec0:	014000b4 	movhi	r5,2
   1dec4:	29402804 	addi	r5,r5,160
   1dec8:	000c1940 	call	c194 <strcmp>
   1decc:	1000031e 	bne	r2,zero,1dedc <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1ded0:	e0bffe17 	ldw	r2,-8(fp)
   1ded4:	10000005 	stb	zero,0(r2)
			break;
   1ded8:	00000906 	br	1df00 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1dedc:	e0bffe17 	ldw	r2,-8(fp)
   1dee0:	10800044 	addi	r2,r2,1
   1dee4:	e0bffe15 	stw	r2,-8(fp)
   1dee8:	e0bffe17 	ldw	r2,-8(fp)
   1deec:	10800003 	ldbu	r2,0(r2)
   1def0:	10803fcc 	andi	r2,r2,255
   1def4:	1080201c 	xori	r2,r2,128
   1def8:	10bfe004 	addi	r2,r2,-128
   1defc:	103fef1e 	bne	r2,zero,1debc <__alt_mem_Flash_flash_data+0xf401debc>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1df00:	0001883a 	nop
}
   1df04:	e037883a 	mov	sp,fp
   1df08:	dfc00117 	ldw	ra,4(sp)
   1df0c:	df000017 	ldw	fp,0(sp)
   1df10:	dec00204 	addi	sp,sp,8
   1df14:	f800283a 	ret

0001df18 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1df18:	defffc04 	addi	sp,sp,-16
   1df1c:	dfc00315 	stw	ra,12(sp)
   1df20:	df000215 	stw	fp,8(sp)
   1df24:	df000204 	addi	fp,sp,8
   1df28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1df2c:	e13fff17 	ldw	r4,-4(fp)
   1df30:	014000b4 	movhi	r5,2
   1df34:	2947d404 	addi	r5,r5,8016
   1df38:	001e4880 	call	1e488 <alt_find_dev>
   1df3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1df40:	e0bffe17 	ldw	r2,-8(fp)
}
   1df44:	e037883a 	mov	sp,fp
   1df48:	dfc00117 	ldw	ra,4(sp)
   1df4c:	df000017 	ldw	fp,0(sp)
   1df50:	dec00204 	addi	sp,sp,8
   1df54:	f800283a 	ret

0001df58 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1df58:	defffa04 	addi	sp,sp,-24
   1df5c:	df000515 	stw	fp,20(sp)
   1df60:	df000504 	addi	fp,sp,20
   1df64:	e13ffc15 	stw	r4,-16(fp)
   1df68:	2805883a 	mov	r2,r5
   1df6c:	e1bffe15 	stw	r6,-8(fp)
   1df70:	e1ffff15 	stw	r7,-4(fp)
   1df74:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1df78:	e0bffc17 	ldw	r2,-16(fp)
   1df7c:	10800c17 	ldw	r2,48(r2)
   1df80:	e0fffe17 	ldw	r3,-8(fp)
   1df84:	1880042e 	bgeu	r3,r2,1df98 <alt_up_char_buffer_draw+0x40>
   1df88:	e0bffc17 	ldw	r2,-16(fp)
   1df8c:	10800d17 	ldw	r2,52(r2)
   1df90:	e0ffff17 	ldw	r3,-4(fp)
   1df94:	18800236 	bltu	r3,r2,1dfa0 <alt_up_char_buffer_draw+0x48>
		return -1;
   1df98:	00bfffc4 	movi	r2,-1
   1df9c:	00001d06 	br	1e014 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1dfa0:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1dfa4:	e0bffc17 	ldw	r2,-16(fp)
   1dfa8:	10c00f17 	ldw	r3,60(r2)
   1dfac:	e0bffe17 	ldw	r2,-8(fp)
   1dfb0:	1884703a 	and	r2,r3,r2
   1dfb4:	e0fffc17 	ldw	r3,-16(fp)
   1dfb8:	18c00e17 	ldw	r3,56(r3)
   1dfbc:	10c4983a 	sll	r2,r2,r3
   1dfc0:	e0fffb17 	ldw	r3,-20(fp)
   1dfc4:	1884b03a 	or	r2,r3,r2
   1dfc8:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1dfcc:	e0bffc17 	ldw	r2,-16(fp)
   1dfd0:	10c01117 	ldw	r3,68(r2)
   1dfd4:	e0bfff17 	ldw	r2,-4(fp)
   1dfd8:	1884703a 	and	r2,r3,r2
   1dfdc:	e0fffc17 	ldw	r3,-16(fp)
   1dfe0:	18c01017 	ldw	r3,64(r3)
   1dfe4:	10c4983a 	sll	r2,r2,r3
   1dfe8:	e0fffb17 	ldw	r3,-20(fp)
   1dfec:	1884b03a 	or	r2,r3,r2
   1dff0:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1dff4:	e0bffc17 	ldw	r2,-16(fp)
   1dff8:	10c00b17 	ldw	r3,44(r2)
   1dffc:	e0bffb17 	ldw	r2,-20(fp)
   1e000:	1885883a 	add	r2,r3,r2
   1e004:	1007883a 	mov	r3,r2
   1e008:	e0bffd03 	ldbu	r2,-12(fp)
   1e00c:	18800025 	stbio	r2,0(r3)

	return 0;
   1e010:	0005883a 	mov	r2,zero
}
   1e014:	e037883a 	mov	sp,fp
   1e018:	df000017 	ldw	fp,0(sp)
   1e01c:	dec00104 	addi	sp,sp,4
   1e020:	f800283a 	ret

0001e024 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1e024:	defffa04 	addi	sp,sp,-24
   1e028:	df000515 	stw	fp,20(sp)
   1e02c:	df000504 	addi	fp,sp,20
   1e030:	e13ffc15 	stw	r4,-16(fp)
   1e034:	e17ffd15 	stw	r5,-12(fp)
   1e038:	e1bffe15 	stw	r6,-8(fp)
   1e03c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e040:	e0bffc17 	ldw	r2,-16(fp)
   1e044:	10800c17 	ldw	r2,48(r2)
   1e048:	e0fffe17 	ldw	r3,-8(fp)
   1e04c:	1880042e 	bgeu	r3,r2,1e060 <alt_up_char_buffer_string+0x3c>
   1e050:	e0bffc17 	ldw	r2,-16(fp)
   1e054:	10800d17 	ldw	r2,52(r2)
   1e058:	e0ffff17 	ldw	r3,-4(fp)
   1e05c:	18800236 	bltu	r3,r2,1e068 <alt_up_char_buffer_string+0x44>
		return -1;
   1e060:	00bfffc4 	movi	r2,-1
   1e064:	00002b06 	br	1e114 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1e068:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1e06c:	e0bffc17 	ldw	r2,-16(fp)
   1e070:	10801017 	ldw	r2,64(r2)
   1e074:	1007883a 	mov	r3,r2
   1e078:	e0bfff17 	ldw	r2,-4(fp)
   1e07c:	10c6983a 	sll	r3,r2,r3
   1e080:	e0bffe17 	ldw	r2,-8(fp)
   1e084:	1885883a 	add	r2,r3,r2
   1e088:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1e08c:	00001a06 	br	1e0f8 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1e090:	e0bffc17 	ldw	r2,-16(fp)
   1e094:	10c00b17 	ldw	r3,44(r2)
   1e098:	e0bffb17 	ldw	r2,-20(fp)
   1e09c:	1885883a 	add	r2,r3,r2
   1e0a0:	1007883a 	mov	r3,r2
   1e0a4:	e0bffd17 	ldw	r2,-12(fp)
   1e0a8:	10800003 	ldbu	r2,0(r2)
   1e0ac:	10803fcc 	andi	r2,r2,255
   1e0b0:	1080201c 	xori	r2,r2,128
   1e0b4:	10bfe004 	addi	r2,r2,-128
   1e0b8:	18800025 	stbio	r2,0(r3)
		++ptr;
   1e0bc:	e0bffd17 	ldw	r2,-12(fp)
   1e0c0:	10800044 	addi	r2,r2,1
   1e0c4:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1e0c8:	e0bffe17 	ldw	r2,-8(fp)
   1e0cc:	10800044 	addi	r2,r2,1
   1e0d0:	e0bffe15 	stw	r2,-8(fp)
   1e0d4:	e0bffc17 	ldw	r2,-16(fp)
   1e0d8:	10800c17 	ldw	r2,48(r2)
   1e0dc:	e0fffe17 	ldw	r3,-8(fp)
   1e0e0:	18800236 	bltu	r3,r2,1e0ec <alt_up_char_buffer_string+0xc8>
			return -1;
   1e0e4:	00bfffc4 	movi	r2,-1
   1e0e8:	00000a06 	br	1e114 <alt_up_char_buffer_string+0xf0>
		++offset;
   1e0ec:	e0bffb17 	ldw	r2,-20(fp)
   1e0f0:	10800044 	addi	r2,r2,1
   1e0f4:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1e0f8:	e0bffd17 	ldw	r2,-12(fp)
   1e0fc:	10800003 	ldbu	r2,0(r2)
   1e100:	10803fcc 	andi	r2,r2,255
   1e104:	1080201c 	xori	r2,r2,128
   1e108:	10bfe004 	addi	r2,r2,-128
   1e10c:	103fe01e 	bne	r2,zero,1e090 <__alt_mem_Flash_flash_data+0xf401e090>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1e110:	0005883a 	mov	r2,zero
}
   1e114:	e037883a 	mov	sp,fp
   1e118:	df000017 	ldw	fp,0(sp)
   1e11c:	dec00104 	addi	sp,sp,4
   1e120:	f800283a 	ret

0001e124 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1e124:	defffe04 	addi	sp,sp,-8
   1e128:	df000115 	stw	fp,4(sp)
   1e12c:	df000104 	addi	fp,sp,4
   1e130:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1e134:	e0bfff17 	ldw	r2,-4(fp)
   1e138:	10800a17 	ldw	r2,40(r2)
   1e13c:	10800084 	addi	r2,r2,2
   1e140:	1007883a 	mov	r3,r2
   1e144:	00800044 	movi	r2,1
   1e148:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1e14c:	0001883a 	nop
   1e150:	e0bfff17 	ldw	r2,-4(fp)
   1e154:	10800a17 	ldw	r2,40(r2)
   1e158:	10800084 	addi	r2,r2,2
   1e15c:	10800023 	ldbuio	r2,0(r2)
   1e160:	10803fcc 	andi	r2,r2,255
   1e164:	1080004c 	andi	r2,r2,1
   1e168:	103ff91e 	bne	r2,zero,1e150 <__alt_mem_Flash_flash_data+0xf401e150>
	return 0;
   1e16c:	0005883a 	mov	r2,zero
}
   1e170:	e037883a 	mov	sp,fp
   1e174:	df000017 	ldw	fp,0(sp)
   1e178:	dec00104 	addi	sp,sp,4
   1e17c:	f800283a 	ret

0001e180 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1e180:	defff504 	addi	sp,sp,-44
   1e184:	df000a15 	stw	fp,40(sp)
   1e188:	df000a04 	addi	fp,sp,40
   1e18c:	e13ffc15 	stw	r4,-16(fp)
   1e190:	e17ffd15 	stw	r5,-12(fp)
   1e194:	e1bffe15 	stw	r6,-8(fp)
   1e198:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1e19c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e1a0:	008000b4 	movhi	r2,2
   1e1a4:	10900604 	addi	r2,r2,16408
   1e1a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1e1ac:	10003f26 	beq	r2,zero,1e2ac <alt_alarm_start+0x12c>
  {
    if (alarm)
   1e1b0:	e0bffc17 	ldw	r2,-16(fp)
   1e1b4:	10003b26 	beq	r2,zero,1e2a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1e1b8:	e0bffc17 	ldw	r2,-16(fp)
   1e1bc:	e0fffe17 	ldw	r3,-8(fp)
   1e1c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1e1c4:	e0bffc17 	ldw	r2,-16(fp)
   1e1c8:	e0ffff17 	ldw	r3,-4(fp)
   1e1cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e1d0:	0005303a 	rdctl	r2,status
   1e1d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e1d8:	e0fff817 	ldw	r3,-32(fp)
   1e1dc:	00bfff84 	movi	r2,-2
   1e1e0:	1884703a 	and	r2,r3,r2
   1e1e4:	1001703a 	wrctl	status,r2
  
  return context;
   1e1e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1e1ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e1f0:	008000b4 	movhi	r2,2
   1e1f4:	10900704 	addi	r2,r2,16412
   1e1f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1e1fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1e200:	e0fffd17 	ldw	r3,-12(fp)
   1e204:	e0bff617 	ldw	r2,-40(fp)
   1e208:	1885883a 	add	r2,r3,r2
   1e20c:	10c00044 	addi	r3,r2,1
   1e210:	e0bffc17 	ldw	r2,-16(fp)
   1e214:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1e218:	e0bffc17 	ldw	r2,-16(fp)
   1e21c:	10c00217 	ldw	r3,8(r2)
   1e220:	e0bff617 	ldw	r2,-40(fp)
   1e224:	1880042e 	bgeu	r3,r2,1e238 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1e228:	e0bffc17 	ldw	r2,-16(fp)
   1e22c:	00c00044 	movi	r3,1
   1e230:	10c00405 	stb	r3,16(r2)
   1e234:	00000206 	br	1e240 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1e238:	e0bffc17 	ldw	r2,-16(fp)
   1e23c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1e240:	e0fffc17 	ldw	r3,-16(fp)
   1e244:	008000b4 	movhi	r2,2
   1e248:	1087f904 	addi	r2,r2,8164
   1e24c:	e0bff915 	stw	r2,-28(fp)
   1e250:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e254:	e0bffa17 	ldw	r2,-24(fp)
   1e258:	e0fff917 	ldw	r3,-28(fp)
   1e25c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e260:	e0bff917 	ldw	r2,-28(fp)
   1e264:	10c00017 	ldw	r3,0(r2)
   1e268:	e0bffa17 	ldw	r2,-24(fp)
   1e26c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e270:	e0bff917 	ldw	r2,-28(fp)
   1e274:	10800017 	ldw	r2,0(r2)
   1e278:	e0fffa17 	ldw	r3,-24(fp)
   1e27c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e280:	e0bff917 	ldw	r2,-28(fp)
   1e284:	e0fffa17 	ldw	r3,-24(fp)
   1e288:	10c00015 	stw	r3,0(r2)
   1e28c:	e0bff717 	ldw	r2,-36(fp)
   1e290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e294:	e0bffb17 	ldw	r2,-20(fp)
   1e298:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1e29c:	0005883a 	mov	r2,zero
   1e2a0:	00000306 	br	1e2b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1e2a4:	00bffa84 	movi	r2,-22
   1e2a8:	00000106 	br	1e2b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1e2ac:	00bfde84 	movi	r2,-134
  }
}
   1e2b0:	e037883a 	mov	sp,fp
   1e2b4:	df000017 	ldw	fp,0(sp)
   1e2b8:	dec00104 	addi	sp,sp,4
   1e2bc:	f800283a 	ret

0001e2c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1e2c0:	deffff04 	addi	sp,sp,-4
   1e2c4:	df000015 	stw	fp,0(sp)
   1e2c8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1e2cc:	e037883a 	mov	sp,fp
   1e2d0:	df000017 	ldw	fp,0(sp)
   1e2d4:	dec00104 	addi	sp,sp,4
   1e2d8:	f800283a 	ret

0001e2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e2dc:	defffe04 	addi	sp,sp,-8
   1e2e0:	dfc00115 	stw	ra,4(sp)
   1e2e4:	df000015 	stw	fp,0(sp)
   1e2e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e2ec:	008000b4 	movhi	r2,2
   1e2f0:	1087d704 	addi	r2,r2,8028
   1e2f4:	10800017 	ldw	r2,0(r2)
   1e2f8:	10000526 	beq	r2,zero,1e310 <alt_get_errno+0x34>
   1e2fc:	008000b4 	movhi	r2,2
   1e300:	1087d704 	addi	r2,r2,8028
   1e304:	10800017 	ldw	r2,0(r2)
   1e308:	103ee83a 	callr	r2
   1e30c:	00000206 	br	1e318 <alt_get_errno+0x3c>
   1e310:	008000b4 	movhi	r2,2
   1e314:	108fe804 	addi	r2,r2,16288
}
   1e318:	e037883a 	mov	sp,fp
   1e31c:	dfc00117 	ldw	ra,4(sp)
   1e320:	df000017 	ldw	fp,0(sp)
   1e324:	dec00204 	addi	sp,sp,8
   1e328:	f800283a 	ret

0001e32c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1e32c:	defffa04 	addi	sp,sp,-24
   1e330:	dfc00515 	stw	ra,20(sp)
   1e334:	df000415 	stw	fp,16(sp)
   1e338:	df000404 	addi	fp,sp,16
   1e33c:	e13ffe15 	stw	r4,-8(fp)
   1e340:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1e344:	e0bffe17 	ldw	r2,-8(fp)
   1e348:	10000326 	beq	r2,zero,1e358 <alt_dev_llist_insert+0x2c>
   1e34c:	e0bffe17 	ldw	r2,-8(fp)
   1e350:	10800217 	ldw	r2,8(r2)
   1e354:	1000061e 	bne	r2,zero,1e370 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1e358:	001e2dc0 	call	1e2dc <alt_get_errno>
   1e35c:	1007883a 	mov	r3,r2
   1e360:	00800584 	movi	r2,22
   1e364:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1e368:	00bffa84 	movi	r2,-22
   1e36c:	00001306 	br	1e3bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1e370:	e0bffe17 	ldw	r2,-8(fp)
   1e374:	e0ffff17 	ldw	r3,-4(fp)
   1e378:	e0fffc15 	stw	r3,-16(fp)
   1e37c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e380:	e0bffd17 	ldw	r2,-12(fp)
   1e384:	e0fffc17 	ldw	r3,-16(fp)
   1e388:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e38c:	e0bffc17 	ldw	r2,-16(fp)
   1e390:	10c00017 	ldw	r3,0(r2)
   1e394:	e0bffd17 	ldw	r2,-12(fp)
   1e398:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e39c:	e0bffc17 	ldw	r2,-16(fp)
   1e3a0:	10800017 	ldw	r2,0(r2)
   1e3a4:	e0fffd17 	ldw	r3,-12(fp)
   1e3a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e3ac:	e0bffc17 	ldw	r2,-16(fp)
   1e3b0:	e0fffd17 	ldw	r3,-12(fp)
   1e3b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   1e3b8:	0005883a 	mov	r2,zero
}
   1e3bc:	e037883a 	mov	sp,fp
   1e3c0:	dfc00117 	ldw	ra,4(sp)
   1e3c4:	df000017 	ldw	fp,0(sp)
   1e3c8:	dec00204 	addi	sp,sp,8
   1e3cc:	f800283a 	ret

0001e3d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1e3d0:	defffd04 	addi	sp,sp,-12
   1e3d4:	dfc00215 	stw	ra,8(sp)
   1e3d8:	df000115 	stw	fp,4(sp)
   1e3dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e3e0:	008000b4 	movhi	r2,2
   1e3e4:	10bd9d04 	addi	r2,r2,-2444
   1e3e8:	e0bfff15 	stw	r2,-4(fp)
   1e3ec:	00000606 	br	1e408 <_do_ctors+0x38>
        (*ctor) (); 
   1e3f0:	e0bfff17 	ldw	r2,-4(fp)
   1e3f4:	10800017 	ldw	r2,0(r2)
   1e3f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e3fc:	e0bfff17 	ldw	r2,-4(fp)
   1e400:	10bfff04 	addi	r2,r2,-4
   1e404:	e0bfff15 	stw	r2,-4(fp)
   1e408:	e0ffff17 	ldw	r3,-4(fp)
   1e40c:	008000b4 	movhi	r2,2
   1e410:	10bd9e04 	addi	r2,r2,-2440
   1e414:	18bff62e 	bgeu	r3,r2,1e3f0 <__alt_mem_Flash_flash_data+0xf401e3f0>
        (*ctor) (); 
}
   1e418:	e037883a 	mov	sp,fp
   1e41c:	dfc00117 	ldw	ra,4(sp)
   1e420:	df000017 	ldw	fp,0(sp)
   1e424:	dec00204 	addi	sp,sp,8
   1e428:	f800283a 	ret

0001e42c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1e42c:	defffd04 	addi	sp,sp,-12
   1e430:	dfc00215 	stw	ra,8(sp)
   1e434:	df000115 	stw	fp,4(sp)
   1e438:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e43c:	008000b4 	movhi	r2,2
   1e440:	10bd9d04 	addi	r2,r2,-2444
   1e444:	e0bfff15 	stw	r2,-4(fp)
   1e448:	00000606 	br	1e464 <_do_dtors+0x38>
        (*dtor) (); 
   1e44c:	e0bfff17 	ldw	r2,-4(fp)
   1e450:	10800017 	ldw	r2,0(r2)
   1e454:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e458:	e0bfff17 	ldw	r2,-4(fp)
   1e45c:	10bfff04 	addi	r2,r2,-4
   1e460:	e0bfff15 	stw	r2,-4(fp)
   1e464:	e0ffff17 	ldw	r3,-4(fp)
   1e468:	008000b4 	movhi	r2,2
   1e46c:	10bd9e04 	addi	r2,r2,-2440
   1e470:	18bff62e 	bgeu	r3,r2,1e44c <__alt_mem_Flash_flash_data+0xf401e44c>
        (*dtor) (); 
}
   1e474:	e037883a 	mov	sp,fp
   1e478:	dfc00117 	ldw	ra,4(sp)
   1e47c:	df000017 	ldw	fp,0(sp)
   1e480:	dec00204 	addi	sp,sp,8
   1e484:	f800283a 	ret

0001e488 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e488:	defffa04 	addi	sp,sp,-24
   1e48c:	dfc00515 	stw	ra,20(sp)
   1e490:	df000415 	stw	fp,16(sp)
   1e494:	df000404 	addi	fp,sp,16
   1e498:	e13ffe15 	stw	r4,-8(fp)
   1e49c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1e4a0:	e0bfff17 	ldw	r2,-4(fp)
   1e4a4:	10800017 	ldw	r2,0(r2)
   1e4a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1e4ac:	e13ffe17 	ldw	r4,-8(fp)
   1e4b0:	00030440 	call	3044 <strlen>
   1e4b4:	10800044 	addi	r2,r2,1
   1e4b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e4bc:	00000d06 	br	1e4f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e4c0:	e0bffc17 	ldw	r2,-16(fp)
   1e4c4:	10c00217 	ldw	r3,8(r2)
   1e4c8:	e0bffd17 	ldw	r2,-12(fp)
   1e4cc:	1809883a 	mov	r4,r3
   1e4d0:	e17ffe17 	ldw	r5,-8(fp)
   1e4d4:	100d883a 	mov	r6,r2
   1e4d8:	001f3180 	call	1f318 <memcmp>
   1e4dc:	1000021e 	bne	r2,zero,1e4e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1e4e0:	e0bffc17 	ldw	r2,-16(fp)
   1e4e4:	00000706 	br	1e504 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1e4e8:	e0bffc17 	ldw	r2,-16(fp)
   1e4ec:	10800017 	ldw	r2,0(r2)
   1e4f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e4f4:	e0fffc17 	ldw	r3,-16(fp)
   1e4f8:	e0bfff17 	ldw	r2,-4(fp)
   1e4fc:	18bff01e 	bne	r3,r2,1e4c0 <__alt_mem_Flash_flash_data+0xf401e4c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1e500:	0005883a 	mov	r2,zero
}
   1e504:	e037883a 	mov	sp,fp
   1e508:	dfc00117 	ldw	ra,4(sp)
   1e50c:	df000017 	ldw	fp,0(sp)
   1e510:	dec00204 	addi	sp,sp,8
   1e514:	f800283a 	ret

0001e518 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1e518:	defffe04 	addi	sp,sp,-8
   1e51c:	dfc00115 	stw	ra,4(sp)
   1e520:	df000015 	stw	fp,0(sp)
   1e524:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1e528:	0009883a 	mov	r4,zero
   1e52c:	01440004 	movi	r5,4096
   1e530:	001f1a40 	call	1f1a4 <alt_icache_flush>
#endif
}
   1e534:	e037883a 	mov	sp,fp
   1e538:	dfc00117 	ldw	ra,4(sp)
   1e53c:	df000017 	ldw	fp,0(sp)
   1e540:	dec00204 	addi	sp,sp,8
   1e544:	f800283a 	ret

0001e548 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1e548:	defff904 	addi	sp,sp,-28
   1e54c:	dfc00615 	stw	ra,24(sp)
   1e550:	df000515 	stw	fp,20(sp)
   1e554:	df000504 	addi	fp,sp,20
   1e558:	e13ffc15 	stw	r4,-16(fp)
   1e55c:	e17ffd15 	stw	r5,-12(fp)
   1e560:	e1bffe15 	stw	r6,-8(fp)
   1e564:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1e568:	e13ffd17 	ldw	r4,-12(fp)
   1e56c:	e17ffe17 	ldw	r5,-8(fp)
   1e570:	e1bfff17 	ldw	r6,-4(fp)
   1e574:	001e94c0 	call	1e94c <open>
   1e578:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1e57c:	e0bffb17 	ldw	r2,-20(fp)
   1e580:	10001c16 	blt	r2,zero,1e5f4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1e584:	008000b4 	movhi	r2,2
   1e588:	10826304 	addi	r2,r2,2444
   1e58c:	e0fffb17 	ldw	r3,-20(fp)
   1e590:	18c00324 	muli	r3,r3,12
   1e594:	10c5883a 	add	r2,r2,r3
   1e598:	10c00017 	ldw	r3,0(r2)
   1e59c:	e0bffc17 	ldw	r2,-16(fp)
   1e5a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1e5a4:	008000b4 	movhi	r2,2
   1e5a8:	10826304 	addi	r2,r2,2444
   1e5ac:	e0fffb17 	ldw	r3,-20(fp)
   1e5b0:	18c00324 	muli	r3,r3,12
   1e5b4:	18c00104 	addi	r3,r3,4
   1e5b8:	10c5883a 	add	r2,r2,r3
   1e5bc:	10c00017 	ldw	r3,0(r2)
   1e5c0:	e0bffc17 	ldw	r2,-16(fp)
   1e5c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1e5c8:	008000b4 	movhi	r2,2
   1e5cc:	10826304 	addi	r2,r2,2444
   1e5d0:	e0fffb17 	ldw	r3,-20(fp)
   1e5d4:	18c00324 	muli	r3,r3,12
   1e5d8:	18c00204 	addi	r3,r3,8
   1e5dc:	10c5883a 	add	r2,r2,r3
   1e5e0:	10c00017 	ldw	r3,0(r2)
   1e5e4:	e0bffc17 	ldw	r2,-16(fp)
   1e5e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1e5ec:	e13ffb17 	ldw	r4,-20(fp)
   1e5f0:	0012bdc0 	call	12bdc <alt_release_fd>
  }
} 
   1e5f4:	e037883a 	mov	sp,fp
   1e5f8:	dfc00117 	ldw	ra,4(sp)
   1e5fc:	df000017 	ldw	fp,0(sp)
   1e600:	dec00204 	addi	sp,sp,8
   1e604:	f800283a 	ret

0001e608 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1e608:	defffb04 	addi	sp,sp,-20
   1e60c:	dfc00415 	stw	ra,16(sp)
   1e610:	df000315 	stw	fp,12(sp)
   1e614:	df000304 	addi	fp,sp,12
   1e618:	e13ffd15 	stw	r4,-12(fp)
   1e61c:	e17ffe15 	stw	r5,-8(fp)
   1e620:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1e624:	010000b4 	movhi	r4,2
   1e628:	21026604 	addi	r4,r4,2456
   1e62c:	e17ffd17 	ldw	r5,-12(fp)
   1e630:	01800044 	movi	r6,1
   1e634:	01c07fc4 	movi	r7,511
   1e638:	001e5480 	call	1e548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1e63c:	010000b4 	movhi	r4,2
   1e640:	21026304 	addi	r4,r4,2444
   1e644:	e17ffe17 	ldw	r5,-8(fp)
   1e648:	000d883a 	mov	r6,zero
   1e64c:	01c07fc4 	movi	r7,511
   1e650:	001e5480 	call	1e548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1e654:	010000b4 	movhi	r4,2
   1e658:	21026904 	addi	r4,r4,2468
   1e65c:	e17fff17 	ldw	r5,-4(fp)
   1e660:	01800044 	movi	r6,1
   1e664:	01c07fc4 	movi	r7,511
   1e668:	001e5480 	call	1e548 <alt_open_fd>
}  
   1e66c:	e037883a 	mov	sp,fp
   1e670:	dfc00117 	ldw	ra,4(sp)
   1e674:	df000017 	ldw	fp,0(sp)
   1e678:	dec00204 	addi	sp,sp,8
   1e67c:	f800283a 	ret

0001e680 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1e680:	defff004 	addi	sp,sp,-64
   1e684:	df000f15 	stw	fp,60(sp)
   1e688:	df000f04 	addi	fp,sp,60
   1e68c:	e13ffd15 	stw	r4,-12(fp)
   1e690:	e17ffe15 	stw	r5,-8(fp)
   1e694:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1e698:	00bffa84 	movi	r2,-22
   1e69c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1e6a0:	e0bffd17 	ldw	r2,-12(fp)
   1e6a4:	10800828 	cmpgeui	r2,r2,32
   1e6a8:	10005c1e 	bne	r2,zero,1e81c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e6ac:	0005303a 	rdctl	r2,status
   1e6b0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e6b4:	e0fff317 	ldw	r3,-52(fp)
   1e6b8:	00bfff84 	movi	r2,-2
   1e6bc:	1884703a 	and	r2,r3,r2
   1e6c0:	1001703a 	wrctl	status,r2
  
  return context;
   1e6c4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1e6c8:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1e6cc:	00800174 	movhi	r2,5
   1e6d0:	10a4b704 	addi	r2,r2,-27940
   1e6d4:	e0fffd17 	ldw	r3,-12(fp)
   1e6d8:	180690fa 	slli	r3,r3,3
   1e6dc:	10c5883a 	add	r2,r2,r3
   1e6e0:	e0ffff17 	ldw	r3,-4(fp)
   1e6e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1e6e8:	00800174 	movhi	r2,5
   1e6ec:	10a4b704 	addi	r2,r2,-27940
   1e6f0:	e0fffd17 	ldw	r3,-12(fp)
   1e6f4:	180690fa 	slli	r3,r3,3
   1e6f8:	18c00104 	addi	r3,r3,4
   1e6fc:	10c5883a 	add	r2,r2,r3
   1e700:	e0fffe17 	ldw	r3,-8(fp)
   1e704:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1e708:	e0bfff17 	ldw	r2,-4(fp)
   1e70c:	10001f26 	beq	r2,zero,1e78c <alt_irq_register+0x10c>
   1e710:	e0bffd17 	ldw	r2,-12(fp)
   1e714:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e718:	0005303a 	rdctl	r2,status
   1e71c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e720:	e0fff517 	ldw	r3,-44(fp)
   1e724:	00bfff84 	movi	r2,-2
   1e728:	1884703a 	and	r2,r3,r2
   1e72c:	1001703a 	wrctl	status,r2
  
  return context;
   1e730:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e734:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1e738:	e0bff417 	ldw	r2,-48(fp)
   1e73c:	00c00044 	movi	r3,1
   1e740:	1884983a 	sll	r2,r3,r2
   1e744:	1007883a 	mov	r3,r2
   1e748:	008000b4 	movhi	r2,2
   1e74c:	10900504 	addi	r2,r2,16404
   1e750:	10800017 	ldw	r2,0(r2)
   1e754:	1886b03a 	or	r3,r3,r2
   1e758:	008000b4 	movhi	r2,2
   1e75c:	10900504 	addi	r2,r2,16404
   1e760:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e764:	008000b4 	movhi	r2,2
   1e768:	10900504 	addi	r2,r2,16404
   1e76c:	10800017 	ldw	r2,0(r2)
   1e770:	100170fa 	wrctl	ienable,r2
   1e774:	e0bff617 	ldw	r2,-40(fp)
   1e778:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e77c:	e0bff717 	ldw	r2,-36(fp)
   1e780:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e784:	0005883a 	mov	r2,zero
   1e788:	00001f06 	br	1e808 <alt_irq_register+0x188>
   1e78c:	e0bffd17 	ldw	r2,-12(fp)
   1e790:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e794:	0005303a 	rdctl	r2,status
   1e798:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e79c:	e0fff917 	ldw	r3,-28(fp)
   1e7a0:	00bfff84 	movi	r2,-2
   1e7a4:	1884703a 	and	r2,r3,r2
   1e7a8:	1001703a 	wrctl	status,r2
  
  return context;
   1e7ac:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e7b0:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1e7b4:	e0bff817 	ldw	r2,-32(fp)
   1e7b8:	00c00044 	movi	r3,1
   1e7bc:	1884983a 	sll	r2,r3,r2
   1e7c0:	0084303a 	nor	r2,zero,r2
   1e7c4:	1007883a 	mov	r3,r2
   1e7c8:	008000b4 	movhi	r2,2
   1e7cc:	10900504 	addi	r2,r2,16404
   1e7d0:	10800017 	ldw	r2,0(r2)
   1e7d4:	1886703a 	and	r3,r3,r2
   1e7d8:	008000b4 	movhi	r2,2
   1e7dc:	10900504 	addi	r2,r2,16404
   1e7e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e7e4:	008000b4 	movhi	r2,2
   1e7e8:	10900504 	addi	r2,r2,16404
   1e7ec:	10800017 	ldw	r2,0(r2)
   1e7f0:	100170fa 	wrctl	ienable,r2
   1e7f4:	e0bffa17 	ldw	r2,-24(fp)
   1e7f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e7fc:	e0bffb17 	ldw	r2,-20(fp)
   1e800:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e804:	0005883a 	mov	r2,zero
   1e808:	e0bff115 	stw	r2,-60(fp)
   1e80c:	e0bff217 	ldw	r2,-56(fp)
   1e810:	e0bffc15 	stw	r2,-16(fp)
   1e814:	e0bffc17 	ldw	r2,-16(fp)
   1e818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1e81c:	e0bff117 	ldw	r2,-60(fp)
}
   1e820:	e037883a 	mov	sp,fp
   1e824:	df000017 	ldw	fp,0(sp)
   1e828:	dec00104 	addi	sp,sp,4
   1e82c:	f800283a 	ret

0001e830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e830:	defffe04 	addi	sp,sp,-8
   1e834:	dfc00115 	stw	ra,4(sp)
   1e838:	df000015 	stw	fp,0(sp)
   1e83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e840:	008000b4 	movhi	r2,2
   1e844:	1087d704 	addi	r2,r2,8028
   1e848:	10800017 	ldw	r2,0(r2)
   1e84c:	10000526 	beq	r2,zero,1e864 <alt_get_errno+0x34>
   1e850:	008000b4 	movhi	r2,2
   1e854:	1087d704 	addi	r2,r2,8028
   1e858:	10800017 	ldw	r2,0(r2)
   1e85c:	103ee83a 	callr	r2
   1e860:	00000206 	br	1e86c <alt_get_errno+0x3c>
   1e864:	008000b4 	movhi	r2,2
   1e868:	108fe804 	addi	r2,r2,16288
}
   1e86c:	e037883a 	mov	sp,fp
   1e870:	dfc00117 	ldw	ra,4(sp)
   1e874:	df000017 	ldw	fp,0(sp)
   1e878:	dec00204 	addi	sp,sp,8
   1e87c:	f800283a 	ret

0001e880 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1e880:	defffd04 	addi	sp,sp,-12
   1e884:	df000215 	stw	fp,8(sp)
   1e888:	df000204 	addi	fp,sp,8
   1e88c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1e890:	e0bfff17 	ldw	r2,-4(fp)
   1e894:	10800217 	ldw	r2,8(r2)
   1e898:	10d00034 	orhi	r3,r2,16384
   1e89c:	e0bfff17 	ldw	r2,-4(fp)
   1e8a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e8a4:	e03ffe15 	stw	zero,-8(fp)
   1e8a8:	00001d06 	br	1e920 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e8ac:	008000b4 	movhi	r2,2
   1e8b0:	10826304 	addi	r2,r2,2444
   1e8b4:	e0fffe17 	ldw	r3,-8(fp)
   1e8b8:	18c00324 	muli	r3,r3,12
   1e8bc:	10c5883a 	add	r2,r2,r3
   1e8c0:	10c00017 	ldw	r3,0(r2)
   1e8c4:	e0bfff17 	ldw	r2,-4(fp)
   1e8c8:	10800017 	ldw	r2,0(r2)
   1e8cc:	1880111e 	bne	r3,r2,1e914 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e8d0:	008000b4 	movhi	r2,2
   1e8d4:	10826304 	addi	r2,r2,2444
   1e8d8:	e0fffe17 	ldw	r3,-8(fp)
   1e8dc:	18c00324 	muli	r3,r3,12
   1e8e0:	18c00204 	addi	r3,r3,8
   1e8e4:	10c5883a 	add	r2,r2,r3
   1e8e8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e8ec:	1000090e 	bge	r2,zero,1e914 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1e8f0:	e0bffe17 	ldw	r2,-8(fp)
   1e8f4:	10c00324 	muli	r3,r2,12
   1e8f8:	008000b4 	movhi	r2,2
   1e8fc:	10826304 	addi	r2,r2,2444
   1e900:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e904:	e0bfff17 	ldw	r2,-4(fp)
   1e908:	18800226 	beq	r3,r2,1e914 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1e90c:	00bffcc4 	movi	r2,-13
   1e910:	00000a06 	br	1e93c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e914:	e0bffe17 	ldw	r2,-8(fp)
   1e918:	10800044 	addi	r2,r2,1
   1e91c:	e0bffe15 	stw	r2,-8(fp)
   1e920:	008000b4 	movhi	r2,2
   1e924:	1087d604 	addi	r2,r2,8024
   1e928:	10800017 	ldw	r2,0(r2)
   1e92c:	1007883a 	mov	r3,r2
   1e930:	e0bffe17 	ldw	r2,-8(fp)
   1e934:	18bfdd2e 	bgeu	r3,r2,1e8ac <__alt_mem_Flash_flash_data+0xf401e8ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1e938:	0005883a 	mov	r2,zero
}
   1e93c:	e037883a 	mov	sp,fp
   1e940:	df000017 	ldw	fp,0(sp)
   1e944:	dec00104 	addi	sp,sp,4
   1e948:	f800283a 	ret

0001e94c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1e94c:	defff604 	addi	sp,sp,-40
   1e950:	dfc00915 	stw	ra,36(sp)
   1e954:	df000815 	stw	fp,32(sp)
   1e958:	df000804 	addi	fp,sp,32
   1e95c:	e13ffd15 	stw	r4,-12(fp)
   1e960:	e17ffe15 	stw	r5,-8(fp)
   1e964:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1e968:	00bfffc4 	movi	r2,-1
   1e96c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1e970:	00bffb44 	movi	r2,-19
   1e974:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1e978:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1e97c:	e13ffd17 	ldw	r4,-12(fp)
   1e980:	014000b4 	movhi	r5,2
   1e984:	2947d404 	addi	r5,r5,8016
   1e988:	001e4880 	call	1e488 <alt_find_dev>
   1e98c:	e0bff815 	stw	r2,-32(fp)
   1e990:	e0bff817 	ldw	r2,-32(fp)
   1e994:	1000051e 	bne	r2,zero,1e9ac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1e998:	e13ffd17 	ldw	r4,-12(fp)
   1e99c:	001ef940 	call	1ef94 <alt_find_file>
   1e9a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1e9a4:	00800044 	movi	r2,1
   1e9a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1e9ac:	e0bff817 	ldw	r2,-32(fp)
   1e9b0:	10002926 	beq	r2,zero,1ea58 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1e9b4:	e13ff817 	ldw	r4,-32(fp)
   1e9b8:	001f0a80 	call	1f0a8 <alt_get_fd>
   1e9bc:	e0bff915 	stw	r2,-28(fp)
   1e9c0:	e0bff917 	ldw	r2,-28(fp)
   1e9c4:	1000030e 	bge	r2,zero,1e9d4 <open+0x88>
    {
      status = index;
   1e9c8:	e0bff917 	ldw	r2,-28(fp)
   1e9cc:	e0bffa15 	stw	r2,-24(fp)
   1e9d0:	00002306 	br	1ea60 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1e9d4:	e0bff917 	ldw	r2,-28(fp)
   1e9d8:	10c00324 	muli	r3,r2,12
   1e9dc:	008000b4 	movhi	r2,2
   1e9e0:	10826304 	addi	r2,r2,2444
   1e9e4:	1885883a 	add	r2,r3,r2
   1e9e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1e9ec:	e0fffe17 	ldw	r3,-8(fp)
   1e9f0:	00900034 	movhi	r2,16384
   1e9f4:	10bfffc4 	addi	r2,r2,-1
   1e9f8:	1886703a 	and	r3,r3,r2
   1e9fc:	e0bffc17 	ldw	r2,-16(fp)
   1ea00:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1ea04:	e0bffb17 	ldw	r2,-20(fp)
   1ea08:	1000051e 	bne	r2,zero,1ea20 <open+0xd4>
   1ea0c:	e13ffc17 	ldw	r4,-16(fp)
   1ea10:	001e8800 	call	1e880 <alt_file_locked>
   1ea14:	e0bffa15 	stw	r2,-24(fp)
   1ea18:	e0bffa17 	ldw	r2,-24(fp)
   1ea1c:	10001016 	blt	r2,zero,1ea60 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1ea20:	e0bff817 	ldw	r2,-32(fp)
   1ea24:	10800317 	ldw	r2,12(r2)
   1ea28:	10000826 	beq	r2,zero,1ea4c <open+0x100>
   1ea2c:	e0bff817 	ldw	r2,-32(fp)
   1ea30:	10800317 	ldw	r2,12(r2)
   1ea34:	e13ffc17 	ldw	r4,-16(fp)
   1ea38:	e17ffd17 	ldw	r5,-12(fp)
   1ea3c:	e1bffe17 	ldw	r6,-8(fp)
   1ea40:	e1ffff17 	ldw	r7,-4(fp)
   1ea44:	103ee83a 	callr	r2
   1ea48:	00000106 	br	1ea50 <open+0x104>
   1ea4c:	0005883a 	mov	r2,zero
   1ea50:	e0bffa15 	stw	r2,-24(fp)
   1ea54:	00000206 	br	1ea60 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ea58:	00bffb44 	movi	r2,-19
   1ea5c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ea60:	e0bffa17 	ldw	r2,-24(fp)
   1ea64:	1000090e 	bge	r2,zero,1ea8c <open+0x140>
  {
    alt_release_fd (index);  
   1ea68:	e13ff917 	ldw	r4,-28(fp)
   1ea6c:	0012bdc0 	call	12bdc <alt_release_fd>
    ALT_ERRNO = -status;
   1ea70:	001e8300 	call	1e830 <alt_get_errno>
   1ea74:	1007883a 	mov	r3,r2
   1ea78:	e0bffa17 	ldw	r2,-24(fp)
   1ea7c:	0085c83a 	sub	r2,zero,r2
   1ea80:	18800015 	stw	r2,0(r3)
    return -1;
   1ea84:	00bfffc4 	movi	r2,-1
   1ea88:	00000106 	br	1ea90 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1ea8c:	e0bff917 	ldw	r2,-28(fp)
}
   1ea90:	e037883a 	mov	sp,fp
   1ea94:	dfc00117 	ldw	ra,4(sp)
   1ea98:	df000017 	ldw	fp,0(sp)
   1ea9c:	dec00204 	addi	sp,sp,8
   1eaa0:	f800283a 	ret

0001eaa4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1eaa4:	defffa04 	addi	sp,sp,-24
   1eaa8:	df000515 	stw	fp,20(sp)
   1eaac:	df000504 	addi	fp,sp,20
   1eab0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eab4:	0005303a 	rdctl	r2,status
   1eab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eabc:	e0fffc17 	ldw	r3,-16(fp)
   1eac0:	00bfff84 	movi	r2,-2
   1eac4:	1884703a 	and	r2,r3,r2
   1eac8:	1001703a 	wrctl	status,r2
  
  return context;
   1eacc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ead0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ead4:	e0bfff17 	ldw	r2,-4(fp)
   1ead8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1eadc:	e0bffd17 	ldw	r2,-12(fp)
   1eae0:	10800017 	ldw	r2,0(r2)
   1eae4:	e0fffd17 	ldw	r3,-12(fp)
   1eae8:	18c00117 	ldw	r3,4(r3)
   1eaec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1eaf0:	e0bffd17 	ldw	r2,-12(fp)
   1eaf4:	10800117 	ldw	r2,4(r2)
   1eaf8:	e0fffd17 	ldw	r3,-12(fp)
   1eafc:	18c00017 	ldw	r3,0(r3)
   1eb00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1eb04:	e0bffd17 	ldw	r2,-12(fp)
   1eb08:	e0fffd17 	ldw	r3,-12(fp)
   1eb0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1eb10:	e0bffd17 	ldw	r2,-12(fp)
   1eb14:	e0fffd17 	ldw	r3,-12(fp)
   1eb18:	10c00015 	stw	r3,0(r2)
   1eb1c:	e0bffb17 	ldw	r2,-20(fp)
   1eb20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eb24:	e0bffe17 	ldw	r2,-8(fp)
   1eb28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1eb2c:	e037883a 	mov	sp,fp
   1eb30:	df000017 	ldw	fp,0(sp)
   1eb34:	dec00104 	addi	sp,sp,4
   1eb38:	f800283a 	ret

0001eb3c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1eb3c:	defffb04 	addi	sp,sp,-20
   1eb40:	dfc00415 	stw	ra,16(sp)
   1eb44:	df000315 	stw	fp,12(sp)
   1eb48:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1eb4c:	d0a03a17 	ldw	r2,-32536(gp)
   1eb50:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1eb54:	d0a84817 	ldw	r2,-24288(gp)
   1eb58:	10800044 	addi	r2,r2,1
   1eb5c:	d0a84815 	stw	r2,-24288(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1eb60:	00002e06 	br	1ec1c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1eb64:	e0bffd17 	ldw	r2,-12(fp)
   1eb68:	10800017 	ldw	r2,0(r2)
   1eb6c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1eb70:	e0bffd17 	ldw	r2,-12(fp)
   1eb74:	10800403 	ldbu	r2,16(r2)
   1eb78:	10803fcc 	andi	r2,r2,255
   1eb7c:	10000426 	beq	r2,zero,1eb90 <alt_tick+0x54>
   1eb80:	d0a84817 	ldw	r2,-24288(gp)
   1eb84:	1000021e 	bne	r2,zero,1eb90 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1eb88:	e0bffd17 	ldw	r2,-12(fp)
   1eb8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1eb90:	e0bffd17 	ldw	r2,-12(fp)
   1eb94:	10800217 	ldw	r2,8(r2)
   1eb98:	d0e84817 	ldw	r3,-24288(gp)
   1eb9c:	18801d36 	bltu	r3,r2,1ec14 <alt_tick+0xd8>
   1eba0:	e0bffd17 	ldw	r2,-12(fp)
   1eba4:	10800403 	ldbu	r2,16(r2)
   1eba8:	10803fcc 	andi	r2,r2,255
   1ebac:	1000191e 	bne	r2,zero,1ec14 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ebb0:	e0bffd17 	ldw	r2,-12(fp)
   1ebb4:	10800317 	ldw	r2,12(r2)
   1ebb8:	e0fffd17 	ldw	r3,-12(fp)
   1ebbc:	18c00517 	ldw	r3,20(r3)
   1ebc0:	1809883a 	mov	r4,r3
   1ebc4:	103ee83a 	callr	r2
   1ebc8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ebcc:	e0bfff17 	ldw	r2,-4(fp)
   1ebd0:	1000031e 	bne	r2,zero,1ebe0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ebd4:	e13ffd17 	ldw	r4,-12(fp)
   1ebd8:	001eaa40 	call	1eaa4 <alt_alarm_stop>
   1ebdc:	00000d06 	br	1ec14 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ebe0:	e0bffd17 	ldw	r2,-12(fp)
   1ebe4:	10c00217 	ldw	r3,8(r2)
   1ebe8:	e0bfff17 	ldw	r2,-4(fp)
   1ebec:	1887883a 	add	r3,r3,r2
   1ebf0:	e0bffd17 	ldw	r2,-12(fp)
   1ebf4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1ebf8:	e0bffd17 	ldw	r2,-12(fp)
   1ebfc:	10c00217 	ldw	r3,8(r2)
   1ec00:	d0a84817 	ldw	r2,-24288(gp)
   1ec04:	1880032e 	bgeu	r3,r2,1ec14 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1ec08:	e0bffd17 	ldw	r2,-12(fp)
   1ec0c:	00c00044 	movi	r3,1
   1ec10:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1ec14:	e0bffe17 	ldw	r2,-8(fp)
   1ec18:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ec1c:	e0fffd17 	ldw	r3,-12(fp)
   1ec20:	d0a03a04 	addi	r2,gp,-32536
   1ec24:	18bfcf1e 	bne	r3,r2,1eb64 <__alt_mem_Flash_flash_data+0xf401eb64>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ec28:	0013de80 	call	13de8 <OSTimeTick>
}
   1ec2c:	e037883a 	mov	sp,fp
   1ec30:	dfc00117 	ldw	ra,4(sp)
   1ec34:	df000017 	ldw	fp,0(sp)
   1ec38:	dec00204 	addi	sp,sp,8
   1ec3c:	f800283a 	ret

0001ec40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ec40:	deffff04 	addi	sp,sp,-4
   1ec44:	df000015 	stw	fp,0(sp)
   1ec48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1ec4c:	000170fa 	wrctl	ienable,zero
}
   1ec50:	e037883a 	mov	sp,fp
   1ec54:	df000017 	ldw	fp,0(sp)
   1ec58:	dec00104 	addi	sp,sp,4
   1ec5c:	f800283a 	ret

0001ec60 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1ec60:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1ec64:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1ec68:	d1284117 	ldw	r4,-24316(gp)

      stw ra,  0(sp)
   1ec6c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1ec70:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1ec74:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1ec78:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1ec7c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1ec80:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1ec84:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1ec88:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1ec8c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1ec90:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1ec94:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1ec98:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ec9c:	001eecc0 	call	1eecc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1eca0:	d1283c17 	ldw	r4,-24336(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1eca4:	d1683407 	ldb	r5,-24368(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1eca8:	d1284115 	stw	r4,-24316(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1ecac:	d1683445 	stb	r5,-24367(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1ecb0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1ecb4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1ecb8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1ecbc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1ecc0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1ecc4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1ecc8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1eccc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ecd0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ecd4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1ecd8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1ecdc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1ece0:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1ece4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1ece8:	f800283a 	ret

0001ecec <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ecec:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ecf0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1ecf4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1ecf8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ecfc:	001eecc0 	call	1eecc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1ed00:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1ed04:	d4a83245 	stb	r18,-24375(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1ed08:	003fe506 	br	1eca0 <__alt_mem_Flash_flash_data+0xf401eca0>

0001ed0c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1ed0c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1ed10:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1ed14:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1ed18:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1ed1c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1ed20:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1ed24:	dec00204 	addi	sp,sp,8

      callr r2
   1ed28:	103ee83a 	callr	r2

      nop
   1ed2c:	0001883a 	nop

0001ed30 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1ed30:	defff704 	addi	sp,sp,-36
   1ed34:	dfc00815 	stw	ra,32(sp)
   1ed38:	df000715 	stw	fp,28(sp)
   1ed3c:	df000704 	addi	fp,sp,28
   1ed40:	e13ffc15 	stw	r4,-16(fp)
   1ed44:	e17ffd15 	stw	r5,-12(fp)
   1ed48:	e1bffe15 	stw	r6,-8(fp)
   1ed4c:	3805883a 	mov	r2,r7
   1ed50:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ed54:	e0fffe17 	ldw	r3,-8(fp)
   1ed58:	00bfff04 	movi	r2,-4
   1ed5c:	1884703a 	and	r2,r3,r2
   1ed60:	10bef704 	addi	r2,r2,-1060
   1ed64:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ed68:	e13ff917 	ldw	r4,-28(fp)
   1ed6c:	000b883a 	mov	r5,zero
   1ed70:	01810904 	movi	r6,1060
   1ed74:	000a9640 	call	a964 <memset>
   1ed78:	e0bff917 	ldw	r2,-28(fp)
   1ed7c:	10c0bb04 	addi	r3,r2,748
   1ed80:	e0bff917 	ldw	r2,-28(fp)
   1ed84:	10c00115 	stw	r3,4(r2)
   1ed88:	e0bff917 	ldw	r2,-28(fp)
   1ed8c:	10c0d504 	addi	r3,r2,852
   1ed90:	e0bff917 	ldw	r2,-28(fp)
   1ed94:	10c00215 	stw	r3,8(r2)
   1ed98:	e0bff917 	ldw	r2,-28(fp)
   1ed9c:	10c0ef04 	addi	r3,r2,956
   1eda0:	e0bff917 	ldw	r2,-28(fp)
   1eda4:	10c00315 	stw	r3,12(r2)
   1eda8:	e0fff917 	ldw	r3,-28(fp)
   1edac:	008000b4 	movhi	r2,2
   1edb0:	10802f04 	addi	r2,r2,188
   1edb4:	18800d15 	stw	r2,52(r3)
   1edb8:	e0bff917 	ldw	r2,-28(fp)
   1edbc:	00c00044 	movi	r3,1
   1edc0:	10c02915 	stw	r3,164(r2)
   1edc4:	10002a15 	stw	zero,168(r2)
   1edc8:	e0bff917 	ldw	r2,-28(fp)
   1edcc:	00ccc384 	movi	r3,13070
   1edd0:	10c02b0d 	sth	r3,172(r2)
   1edd4:	e0bff917 	ldw	r2,-28(fp)
   1edd8:	00eaf344 	movi	r3,-21555
   1eddc:	10c02b8d 	sth	r3,174(r2)
   1ede0:	e0bff917 	ldw	r2,-28(fp)
   1ede4:	00c48d04 	movi	r3,4660
   1ede8:	10c02c0d 	sth	r3,176(r2)
   1edec:	e0bff917 	ldw	r2,-28(fp)
   1edf0:	00f99b44 	movi	r3,-6547
   1edf4:	10c02c8d 	sth	r3,178(r2)
   1edf8:	e0bff917 	ldw	r2,-28(fp)
   1edfc:	00f7bb04 	movi	r3,-8468
   1ee00:	10c02d0d 	sth	r3,180(r2)
   1ee04:	e0bff917 	ldw	r2,-28(fp)
   1ee08:	00c00144 	movi	r3,5
   1ee0c:	10c02d8d 	sth	r3,182(r2)
   1ee10:	e0bff917 	ldw	r2,-28(fp)
   1ee14:	00c002c4 	movi	r3,11
   1ee18:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1ee1c:	e0bff917 	ldw	r2,-28(fp)
   1ee20:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1ee24:	e0bffa17 	ldw	r2,-24(fp)
   1ee28:	10bff304 	addi	r2,r2,-52
   1ee2c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1ee30:	e0bffb17 	ldw	r2,-20(fp)
   1ee34:	10800c04 	addi	r2,r2,48
   1ee38:	e0fffc17 	ldw	r3,-16(fp)
   1ee3c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1ee40:	e0bffb17 	ldw	r2,-20(fp)
   1ee44:	10800b04 	addi	r2,r2,44
   1ee48:	e0fffd17 	ldw	r3,-12(fp)
   1ee4c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1ee50:	e0bffb17 	ldw	r2,-20(fp)
   1ee54:	10800a04 	addi	r2,r2,40
   1ee58:	e0fff917 	ldw	r3,-28(fp)
   1ee5c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ee60:	008000b4 	movhi	r2,2
   1ee64:	10bb4304 	addi	r2,r2,-4852
   1ee68:	10c00104 	addi	r3,r2,4
   1ee6c:	e0bffb17 	ldw	r2,-20(fp)
   1ee70:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ee74:	e0bffb17 	ldw	r2,-20(fp)
}
   1ee78:	e037883a 	mov	sp,fp
   1ee7c:	dfc00117 	ldw	ra,4(sp)
   1ee80:	df000017 	ldw	fp,0(sp)
   1ee84:	dec00204 	addi	sp,sp,8
   1ee88:	f800283a 	ret

0001ee8c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1ee8c:	defffe04 	addi	sp,sp,-8
   1ee90:	df000115 	stw	fp,4(sp)
   1ee94:	df000104 	addi	fp,sp,4
   1ee98:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1ee9c:	e037883a 	mov	sp,fp
   1eea0:	df000017 	ldw	fp,0(sp)
   1eea4:	dec00104 	addi	sp,sp,4
   1eea8:	f800283a 	ret

0001eeac <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1eeac:	defffe04 	addi	sp,sp,-8
   1eeb0:	df000115 	stw	fp,4(sp)
   1eeb4:	df000104 	addi	fp,sp,4
   1eeb8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1eebc:	e037883a 	mov	sp,fp
   1eec0:	df000017 	ldw	fp,0(sp)
   1eec4:	dec00104 	addi	sp,sp,4
   1eec8:	f800283a 	ret

0001eecc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1eecc:	deffff04 	addi	sp,sp,-4
   1eed0:	df000015 	stw	fp,0(sp)
   1eed4:	d839883a 	mov	fp,sp
}
   1eed8:	e037883a 	mov	sp,fp
   1eedc:	df000017 	ldw	fp,0(sp)
   1eee0:	dec00104 	addi	sp,sp,4
   1eee4:	f800283a 	ret

0001eee8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1eee8:	deffff04 	addi	sp,sp,-4
   1eeec:	df000015 	stw	fp,0(sp)
   1eef0:	d839883a 	mov	fp,sp
}
   1eef4:	e037883a 	mov	sp,fp
   1eef8:	df000017 	ldw	fp,0(sp)
   1eefc:	dec00104 	addi	sp,sp,4
   1ef00:	f800283a 	ret

0001ef04 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1ef04:	deffff04 	addi	sp,sp,-4
   1ef08:	df000015 	stw	fp,0(sp)
   1ef0c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1ef10:	e037883a 	mov	sp,fp
   1ef14:	df000017 	ldw	fp,0(sp)
   1ef18:	dec00104 	addi	sp,sp,4
   1ef1c:	f800283a 	ret

0001ef20 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1ef20:	deffff04 	addi	sp,sp,-4
   1ef24:	df000015 	stw	fp,0(sp)
   1ef28:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1ef2c:	e037883a 	mov	sp,fp
   1ef30:	df000017 	ldw	fp,0(sp)
   1ef34:	dec00104 	addi	sp,sp,4
   1ef38:	f800283a 	ret

0001ef3c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1ef3c:	deffff04 	addi	sp,sp,-4
   1ef40:	df000015 	stw	fp,0(sp)
   1ef44:	d839883a 	mov	fp,sp
}
   1ef48:	e037883a 	mov	sp,fp
   1ef4c:	df000017 	ldw	fp,0(sp)
   1ef50:	dec00104 	addi	sp,sp,4
   1ef54:	f800283a 	ret

0001ef58 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1ef58:	deffff04 	addi	sp,sp,-4
   1ef5c:	df000015 	stw	fp,0(sp)
   1ef60:	d839883a 	mov	fp,sp
}
   1ef64:	e037883a 	mov	sp,fp
   1ef68:	df000017 	ldw	fp,0(sp)
   1ef6c:	dec00104 	addi	sp,sp,4
   1ef70:	f800283a 	ret

0001ef74 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1ef74:	defffe04 	addi	sp,sp,-8
   1ef78:	df000115 	stw	fp,4(sp)
   1ef7c:	df000104 	addi	fp,sp,4
   1ef80:	e13fff15 	stw	r4,-4(fp)
}
   1ef84:	e037883a 	mov	sp,fp
   1ef88:	df000017 	ldw	fp,0(sp)
   1ef8c:	dec00104 	addi	sp,sp,4
   1ef90:	f800283a 	ret

0001ef94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1ef94:	defffb04 	addi	sp,sp,-20
   1ef98:	dfc00415 	stw	ra,16(sp)
   1ef9c:	df000315 	stw	fp,12(sp)
   1efa0:	df000304 	addi	fp,sp,12
   1efa4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1efa8:	008000b4 	movhi	r2,2
   1efac:	1087d204 	addi	r2,r2,8008
   1efb0:	10800017 	ldw	r2,0(r2)
   1efb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1efb8:	00003106 	br	1f080 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1efbc:	e0bffd17 	ldw	r2,-12(fp)
   1efc0:	10800217 	ldw	r2,8(r2)
   1efc4:	1009883a 	mov	r4,r2
   1efc8:	00030440 	call	3044 <strlen>
   1efcc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1efd0:	e0bffd17 	ldw	r2,-12(fp)
   1efd4:	10c00217 	ldw	r3,8(r2)
   1efd8:	e0bffe17 	ldw	r2,-8(fp)
   1efdc:	10bfffc4 	addi	r2,r2,-1
   1efe0:	1885883a 	add	r2,r3,r2
   1efe4:	10800003 	ldbu	r2,0(r2)
   1efe8:	10803fcc 	andi	r2,r2,255
   1efec:	1080201c 	xori	r2,r2,128
   1eff0:	10bfe004 	addi	r2,r2,-128
   1eff4:	10800bd8 	cmpnei	r2,r2,47
   1eff8:	1000031e 	bne	r2,zero,1f008 <alt_find_file+0x74>
    {
      len -= 1;
   1effc:	e0bffe17 	ldw	r2,-8(fp)
   1f000:	10bfffc4 	addi	r2,r2,-1
   1f004:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f008:	e0bffe17 	ldw	r2,-8(fp)
   1f00c:	e0ffff17 	ldw	r3,-4(fp)
   1f010:	1885883a 	add	r2,r3,r2
   1f014:	10800003 	ldbu	r2,0(r2)
   1f018:	10803fcc 	andi	r2,r2,255
   1f01c:	1080201c 	xori	r2,r2,128
   1f020:	10bfe004 	addi	r2,r2,-128
   1f024:	10800be0 	cmpeqi	r2,r2,47
   1f028:	1000081e 	bne	r2,zero,1f04c <alt_find_file+0xb8>
   1f02c:	e0bffe17 	ldw	r2,-8(fp)
   1f030:	e0ffff17 	ldw	r3,-4(fp)
   1f034:	1885883a 	add	r2,r3,r2
   1f038:	10800003 	ldbu	r2,0(r2)
   1f03c:	10803fcc 	andi	r2,r2,255
   1f040:	1080201c 	xori	r2,r2,128
   1f044:	10bfe004 	addi	r2,r2,-128
   1f048:	10000a1e 	bne	r2,zero,1f074 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1f04c:	e0bffd17 	ldw	r2,-12(fp)
   1f050:	10c00217 	ldw	r3,8(r2)
   1f054:	e0bffe17 	ldw	r2,-8(fp)
   1f058:	1809883a 	mov	r4,r3
   1f05c:	e17fff17 	ldw	r5,-4(fp)
   1f060:	100d883a 	mov	r6,r2
   1f064:	001f3180 	call	1f318 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f068:	1000021e 	bne	r2,zero,1f074 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f06c:	e0bffd17 	ldw	r2,-12(fp)
   1f070:	00000806 	br	1f094 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1f074:	e0bffd17 	ldw	r2,-12(fp)
   1f078:	10800017 	ldw	r2,0(r2)
   1f07c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f080:	e0fffd17 	ldw	r3,-12(fp)
   1f084:	008000b4 	movhi	r2,2
   1f088:	1087d204 	addi	r2,r2,8008
   1f08c:	18bfcb1e 	bne	r3,r2,1efbc <__alt_mem_Flash_flash_data+0xf401efbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f090:	0005883a 	mov	r2,zero
}
   1f094:	e037883a 	mov	sp,fp
   1f098:	dfc00117 	ldw	ra,4(sp)
   1f09c:	df000017 	ldw	fp,0(sp)
   1f0a0:	dec00204 	addi	sp,sp,8
   1f0a4:	f800283a 	ret

0001f0a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f0a8:	defff904 	addi	sp,sp,-28
   1f0ac:	dfc00615 	stw	ra,24(sp)
   1f0b0:	df000515 	stw	fp,20(sp)
   1f0b4:	df000504 	addi	fp,sp,20
   1f0b8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f0bc:	00bffa04 	movi	r2,-24
   1f0c0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1f0c4:	008000b4 	movhi	r2,2
   1f0c8:	108fe904 	addi	r2,r2,16292
   1f0cc:	10800017 	ldw	r2,0(r2)
   1f0d0:	e0bffd15 	stw	r2,-12(fp)
   1f0d4:	e03ffe0d 	sth	zero,-8(fp)
   1f0d8:	e0fffe0b 	ldhu	r3,-8(fp)
   1f0dc:	e0bffe84 	addi	r2,fp,-6
   1f0e0:	e13ffd17 	ldw	r4,-12(fp)
   1f0e4:	180b883a 	mov	r5,r3
   1f0e8:	100d883a 	mov	r6,r2
   1f0ec:	001940c0 	call	1940c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f0f0:	e03ffb15 	stw	zero,-20(fp)
   1f0f4:	00001d06 	br	1f16c <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1f0f8:	008000b4 	movhi	r2,2
   1f0fc:	10826304 	addi	r2,r2,2444
   1f100:	e0fffb17 	ldw	r3,-20(fp)
   1f104:	18c00324 	muli	r3,r3,12
   1f108:	10c5883a 	add	r2,r2,r3
   1f10c:	10800017 	ldw	r2,0(r2)
   1f110:	1000131e 	bne	r2,zero,1f160 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1f114:	008000b4 	movhi	r2,2
   1f118:	10826304 	addi	r2,r2,2444
   1f11c:	e0fffb17 	ldw	r3,-20(fp)
   1f120:	18c00324 	muli	r3,r3,12
   1f124:	10c5883a 	add	r2,r2,r3
   1f128:	e0ffff17 	ldw	r3,-4(fp)
   1f12c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f130:	008000b4 	movhi	r2,2
   1f134:	1087d604 	addi	r2,r2,8024
   1f138:	10c00017 	ldw	r3,0(r2)
   1f13c:	e0bffb17 	ldw	r2,-20(fp)
   1f140:	1880040e 	bge	r3,r2,1f154 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1f144:	008000b4 	movhi	r2,2
   1f148:	1087d604 	addi	r2,r2,8024
   1f14c:	e0fffb17 	ldw	r3,-20(fp)
   1f150:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1f154:	e0bffb17 	ldw	r2,-20(fp)
   1f158:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1f15c:	00000606 	br	1f178 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f160:	e0bffb17 	ldw	r2,-20(fp)
   1f164:	10800044 	addi	r2,r2,1
   1f168:	e0bffb15 	stw	r2,-20(fp)
   1f16c:	e0bffb17 	ldw	r2,-20(fp)
   1f170:	10800810 	cmplti	r2,r2,32
   1f174:	103fe01e 	bne	r2,zero,1f0f8 <__alt_mem_Flash_flash_data+0xf401f0f8>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1f178:	008000b4 	movhi	r2,2
   1f17c:	108fe904 	addi	r2,r2,16292
   1f180:	10800017 	ldw	r2,0(r2)
   1f184:	1009883a 	mov	r4,r2
   1f188:	00197e00 	call	197e0 <OSSemPost>

  return rc;
   1f18c:	e0bffc17 	ldw	r2,-16(fp)
}
   1f190:	e037883a 	mov	sp,fp
   1f194:	dfc00117 	ldw	ra,4(sp)
   1f198:	df000017 	ldw	fp,0(sp)
   1f19c:	dec00204 	addi	sp,sp,8
   1f1a0:	f800283a 	ret

0001f1a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1f1a4:	defffb04 	addi	sp,sp,-20
   1f1a8:	df000415 	stw	fp,16(sp)
   1f1ac:	df000404 	addi	fp,sp,16
   1f1b0:	e13ffe15 	stw	r4,-8(fp)
   1f1b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1f1b8:	e0bfff17 	ldw	r2,-4(fp)
   1f1bc:	10840070 	cmpltui	r2,r2,4097
   1f1c0:	1000021e 	bne	r2,zero,1f1cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1f1c4:	00840004 	movi	r2,4096
   1f1c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1f1cc:	e0fffe17 	ldw	r3,-8(fp)
   1f1d0:	e0bfff17 	ldw	r2,-4(fp)
   1f1d4:	1885883a 	add	r2,r3,r2
   1f1d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f1dc:	e0bffe17 	ldw	r2,-8(fp)
   1f1e0:	e0bffc15 	stw	r2,-16(fp)
   1f1e4:	00000506 	br	1f1fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1f1e8:	e0bffc17 	ldw	r2,-16(fp)
   1f1ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f1f0:	e0bffc17 	ldw	r2,-16(fp)
   1f1f4:	10800804 	addi	r2,r2,32
   1f1f8:	e0bffc15 	stw	r2,-16(fp)
   1f1fc:	e0fffc17 	ldw	r3,-16(fp)
   1f200:	e0bffd17 	ldw	r2,-12(fp)
   1f204:	18bff836 	bltu	r3,r2,1f1e8 <__alt_mem_Flash_flash_data+0xf401f1e8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1f208:	e0bffe17 	ldw	r2,-8(fp)
   1f20c:	108007cc 	andi	r2,r2,31
   1f210:	10000226 	beq	r2,zero,1f21c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1f214:	e0bffc17 	ldw	r2,-16(fp)
   1f218:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1f21c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1f220:	e037883a 	mov	sp,fp
   1f224:	df000017 	ldw	fp,0(sp)
   1f228:	dec00104 	addi	sp,sp,4
   1f22c:	f800283a 	ret

0001f230 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1f230:	defffe04 	addi	sp,sp,-8
   1f234:	df000115 	stw	fp,4(sp)
   1f238:	df000104 	addi	fp,sp,4
   1f23c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1f240:	e0bfff17 	ldw	r2,-4(fp)
   1f244:	10bffe84 	addi	r2,r2,-6
   1f248:	10c00428 	cmpgeui	r3,r2,16
   1f24c:	18001a1e 	bne	r3,zero,1f2b8 <alt_exception_cause_generated_bad_addr+0x88>
   1f250:	100690ba 	slli	r3,r2,2
   1f254:	008000b4 	movhi	r2,2
   1f258:	10bc9a04 	addi	r2,r2,-3480
   1f25c:	1885883a 	add	r2,r3,r2
   1f260:	10800017 	ldw	r2,0(r2)
   1f264:	1000683a 	jmp	r2
   1f268:	0001f2a8 	cmpgeui	zero,zero,1994
   1f26c:	0001f2a8 	cmpgeui	zero,zero,1994
   1f270:	0001f2b8 	rdprs	zero,zero,1994
   1f274:	0001f2b8 	rdprs	zero,zero,1994
   1f278:	0001f2b8 	rdprs	zero,zero,1994
   1f27c:	0001f2a8 	cmpgeui	zero,zero,1994
   1f280:	0001f2b0 	cmpltui	zero,zero,1994
   1f284:	0001f2b8 	rdprs	zero,zero,1994
   1f288:	0001f2a8 	cmpgeui	zero,zero,1994
   1f28c:	0001f2a8 	cmpgeui	zero,zero,1994
   1f290:	0001f2b8 	rdprs	zero,zero,1994
   1f294:	0001f2a8 	cmpgeui	zero,zero,1994
   1f298:	0001f2b0 	cmpltui	zero,zero,1994
   1f29c:	0001f2b8 	rdprs	zero,zero,1994
   1f2a0:	0001f2b8 	rdprs	zero,zero,1994
   1f2a4:	0001f2a8 	cmpgeui	zero,zero,1994
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1f2a8:	00800044 	movi	r2,1
   1f2ac:	00000306 	br	1f2bc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1f2b0:	0005883a 	mov	r2,zero
   1f2b4:	00000106 	br	1f2bc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1f2b8:	0005883a 	mov	r2,zero
  }
}
   1f2bc:	e037883a 	mov	sp,fp
   1f2c0:	df000017 	ldw	fp,0(sp)
   1f2c4:	dec00104 	addi	sp,sp,4
   1f2c8:	f800283a 	ret

0001f2cc <atexit>:
   1f2cc:	200b883a 	mov	r5,r4
   1f2d0:	000d883a 	mov	r6,zero
   1f2d4:	0009883a 	mov	r4,zero
   1f2d8:	000f883a 	mov	r7,zero
   1f2dc:	001f3941 	jmpi	1f394 <__register_exitproc>

0001f2e0 <exit>:
   1f2e0:	defffe04 	addi	sp,sp,-8
   1f2e4:	000b883a 	mov	r5,zero
   1f2e8:	dc000015 	stw	r16,0(sp)
   1f2ec:	dfc00115 	stw	ra,4(sp)
   1f2f0:	2021883a 	mov	r16,r4
   1f2f4:	001f4a80 	call	1f4a8 <__call_exitprocs>
   1f2f8:	008000b4 	movhi	r2,2
   1f2fc:	1087cc04 	addi	r2,r2,7984
   1f300:	11000017 	ldw	r4,0(r2)
   1f304:	20800f17 	ldw	r2,60(r4)
   1f308:	10000126 	beq	r2,zero,1f310 <exit+0x30>
   1f30c:	103ee83a 	callr	r2
   1f310:	8009883a 	mov	r4,r16
   1f314:	001f63c0 	call	1f63c <_exit>

0001f318 <memcmp>:
   1f318:	01c000c4 	movi	r7,3
   1f31c:	3980192e 	bgeu	r7,r6,1f384 <memcmp+0x6c>
   1f320:	2144b03a 	or	r2,r4,r5
   1f324:	11c4703a 	and	r2,r2,r7
   1f328:	10000f26 	beq	r2,zero,1f368 <memcmp+0x50>
   1f32c:	20800003 	ldbu	r2,0(r4)
   1f330:	28c00003 	ldbu	r3,0(r5)
   1f334:	10c0151e 	bne	r2,r3,1f38c <memcmp+0x74>
   1f338:	31bfff84 	addi	r6,r6,-2
   1f33c:	01ffffc4 	movi	r7,-1
   1f340:	00000406 	br	1f354 <memcmp+0x3c>
   1f344:	20800003 	ldbu	r2,0(r4)
   1f348:	28c00003 	ldbu	r3,0(r5)
   1f34c:	31bfffc4 	addi	r6,r6,-1
   1f350:	10c00e1e 	bne	r2,r3,1f38c <memcmp+0x74>
   1f354:	21000044 	addi	r4,r4,1
   1f358:	29400044 	addi	r5,r5,1
   1f35c:	31fff91e 	bne	r6,r7,1f344 <__alt_mem_Flash_flash_data+0xf401f344>
   1f360:	0005883a 	mov	r2,zero
   1f364:	f800283a 	ret
   1f368:	20c00017 	ldw	r3,0(r4)
   1f36c:	28800017 	ldw	r2,0(r5)
   1f370:	1880041e 	bne	r3,r2,1f384 <memcmp+0x6c>
   1f374:	31bfff04 	addi	r6,r6,-4
   1f378:	21000104 	addi	r4,r4,4
   1f37c:	29400104 	addi	r5,r5,4
   1f380:	39bff936 	bltu	r7,r6,1f368 <__alt_mem_Flash_flash_data+0xf401f368>
   1f384:	303fe91e 	bne	r6,zero,1f32c <__alt_mem_Flash_flash_data+0xf401f32c>
   1f388:	003ff506 	br	1f360 <__alt_mem_Flash_flash_data+0xf401f360>
   1f38c:	10c5c83a 	sub	r2,r2,r3
   1f390:	f800283a 	ret

0001f394 <__register_exitproc>:
   1f394:	008000b4 	movhi	r2,2
   1f398:	defffa04 	addi	sp,sp,-24
   1f39c:	1087cc04 	addi	r2,r2,7984
   1f3a0:	dc000315 	stw	r16,12(sp)
   1f3a4:	14000017 	ldw	r16,0(r2)
   1f3a8:	dc400415 	stw	r17,16(sp)
   1f3ac:	dfc00515 	stw	ra,20(sp)
   1f3b0:	80805217 	ldw	r2,328(r16)
   1f3b4:	2023883a 	mov	r17,r4
   1f3b8:	10003626 	beq	r2,zero,1f494 <__register_exitproc+0x100>
   1f3bc:	10c00117 	ldw	r3,4(r2)
   1f3c0:	010007c4 	movi	r4,31
   1f3c4:	20c00e16 	blt	r4,r3,1f400 <__register_exitproc+0x6c>
   1f3c8:	1a400044 	addi	r9,r3,1
   1f3cc:	8800211e 	bne	r17,zero,1f454 <__register_exitproc+0xc0>
   1f3d0:	18c00084 	addi	r3,r3,2
   1f3d4:	18c7883a 	add	r3,r3,r3
   1f3d8:	18c7883a 	add	r3,r3,r3
   1f3dc:	12400115 	stw	r9,4(r2)
   1f3e0:	10c7883a 	add	r3,r2,r3
   1f3e4:	19400015 	stw	r5,0(r3)
   1f3e8:	0005883a 	mov	r2,zero
   1f3ec:	dfc00517 	ldw	ra,20(sp)
   1f3f0:	dc400417 	ldw	r17,16(sp)
   1f3f4:	dc000317 	ldw	r16,12(sp)
   1f3f8:	dec00604 	addi	sp,sp,24
   1f3fc:	f800283a 	ret
   1f400:	00800034 	movhi	r2,0
   1f404:	10800004 	addi	r2,r2,0
   1f408:	10002526 	beq	r2,zero,1f4a0 <__register_exitproc+0x10c>
   1f40c:	01006404 	movi	r4,400
   1f410:	d9400015 	stw	r5,0(sp)
   1f414:	d9800115 	stw	r6,4(sp)
   1f418:	d9c00215 	stw	r7,8(sp)
   1f41c:	00000000 	call	0 <__alt_mem_SDRAM>
   1f420:	d9400017 	ldw	r5,0(sp)
   1f424:	d9800117 	ldw	r6,4(sp)
   1f428:	d9c00217 	ldw	r7,8(sp)
   1f42c:	10001c26 	beq	r2,zero,1f4a0 <__register_exitproc+0x10c>
   1f430:	80c05217 	ldw	r3,328(r16)
   1f434:	10000115 	stw	zero,4(r2)
   1f438:	02400044 	movi	r9,1
   1f43c:	10c00015 	stw	r3,0(r2)
   1f440:	80805215 	stw	r2,328(r16)
   1f444:	10006215 	stw	zero,392(r2)
   1f448:	10006315 	stw	zero,396(r2)
   1f44c:	0007883a 	mov	r3,zero
   1f450:	883fdf26 	beq	r17,zero,1f3d0 <__alt_mem_Flash_flash_data+0xf401f3d0>
   1f454:	18d1883a 	add	r8,r3,r3
   1f458:	4211883a 	add	r8,r8,r8
   1f45c:	1211883a 	add	r8,r2,r8
   1f460:	41802215 	stw	r6,136(r8)
   1f464:	01000044 	movi	r4,1
   1f468:	11806217 	ldw	r6,392(r2)
   1f46c:	20c8983a 	sll	r4,r4,r3
   1f470:	310cb03a 	or	r6,r6,r4
   1f474:	11806215 	stw	r6,392(r2)
   1f478:	41c04215 	stw	r7,264(r8)
   1f47c:	01800084 	movi	r6,2
   1f480:	89bfd31e 	bne	r17,r6,1f3d0 <__alt_mem_Flash_flash_data+0xf401f3d0>
   1f484:	11806317 	ldw	r6,396(r2)
   1f488:	3108b03a 	or	r4,r6,r4
   1f48c:	11006315 	stw	r4,396(r2)
   1f490:	003fcf06 	br	1f3d0 <__alt_mem_Flash_flash_data+0xf401f3d0>
   1f494:	80805304 	addi	r2,r16,332
   1f498:	80805215 	stw	r2,328(r16)
   1f49c:	003fc706 	br	1f3bc <__alt_mem_Flash_flash_data+0xf401f3bc>
   1f4a0:	00bfffc4 	movi	r2,-1
   1f4a4:	003fd106 	br	1f3ec <__alt_mem_Flash_flash_data+0xf401f3ec>

0001f4a8 <__call_exitprocs>:
   1f4a8:	008000b4 	movhi	r2,2
   1f4ac:	1087cc04 	addi	r2,r2,7984
   1f4b0:	10800017 	ldw	r2,0(r2)
   1f4b4:	defff404 	addi	sp,sp,-48
   1f4b8:	dd800815 	stw	r22,32(sp)
   1f4bc:	d8800015 	stw	r2,0(sp)
   1f4c0:	10805204 	addi	r2,r2,328
   1f4c4:	dd000615 	stw	r20,24(sp)
   1f4c8:	dc800415 	stw	r18,16(sp)
   1f4cc:	dfc00b15 	stw	ra,44(sp)
   1f4d0:	df000a15 	stw	fp,40(sp)
   1f4d4:	ddc00915 	stw	r23,36(sp)
   1f4d8:	dd400715 	stw	r21,28(sp)
   1f4dc:	dcc00515 	stw	r19,20(sp)
   1f4e0:	dc400315 	stw	r17,12(sp)
   1f4e4:	dc000215 	stw	r16,8(sp)
   1f4e8:	2025883a 	mov	r18,r4
   1f4ec:	2829883a 	mov	r20,r5
   1f4f0:	d8800115 	stw	r2,4(sp)
   1f4f4:	05bfffc4 	movi	r22,-1
   1f4f8:	d8800017 	ldw	r2,0(sp)
   1f4fc:	14c05217 	ldw	r19,328(r2)
   1f500:	98001d26 	beq	r19,zero,1f578 <__call_exitprocs+0xd0>
   1f504:	dd400117 	ldw	r21,4(sp)
   1f508:	98800117 	ldw	r2,4(r19)
   1f50c:	173fffc4 	addi	fp,r2,-1
   1f510:	e0000d16 	blt	fp,zero,1f548 <__call_exitprocs+0xa0>
   1f514:	14000044 	addi	r16,r2,1
   1f518:	8421883a 	add	r16,r16,r16
   1f51c:	8421883a 	add	r16,r16,r16
   1f520:	84402004 	addi	r17,r16,128
   1f524:	9c63883a 	add	r17,r19,r17
   1f528:	9c21883a 	add	r16,r19,r16
   1f52c:	a0001e26 	beq	r20,zero,1f5a8 <__call_exitprocs+0x100>
   1f530:	80804017 	ldw	r2,256(r16)
   1f534:	15001c26 	beq	r2,r20,1f5a8 <__call_exitprocs+0x100>
   1f538:	e73fffc4 	addi	fp,fp,-1
   1f53c:	843fff04 	addi	r16,r16,-4
   1f540:	8c7fff04 	addi	r17,r17,-4
   1f544:	e5bff91e 	bne	fp,r22,1f52c <__alt_mem_Flash_flash_data+0xf401f52c>
   1f548:	00800034 	movhi	r2,0
   1f54c:	10800004 	addi	r2,r2,0
   1f550:	10000926 	beq	r2,zero,1f578 <__call_exitprocs+0xd0>
   1f554:	98800117 	ldw	r2,4(r19)
   1f558:	1000311e 	bne	r2,zero,1f620 <__call_exitprocs+0x178>
   1f55c:	98800017 	ldw	r2,0(r19)
   1f560:	10003426 	beq	r2,zero,1f634 <__call_exitprocs+0x18c>
   1f564:	9809883a 	mov	r4,r19
   1f568:	a8800015 	stw	r2,0(r21)
   1f56c:	00000000 	call	0 <__alt_mem_SDRAM>
   1f570:	acc00017 	ldw	r19,0(r21)
   1f574:	983fe41e 	bne	r19,zero,1f508 <__alt_mem_Flash_flash_data+0xf401f508>
   1f578:	dfc00b17 	ldw	ra,44(sp)
   1f57c:	df000a17 	ldw	fp,40(sp)
   1f580:	ddc00917 	ldw	r23,36(sp)
   1f584:	dd800817 	ldw	r22,32(sp)
   1f588:	dd400717 	ldw	r21,28(sp)
   1f58c:	dd000617 	ldw	r20,24(sp)
   1f590:	dcc00517 	ldw	r19,20(sp)
   1f594:	dc800417 	ldw	r18,16(sp)
   1f598:	dc400317 	ldw	r17,12(sp)
   1f59c:	dc000217 	ldw	r16,8(sp)
   1f5a0:	dec00c04 	addi	sp,sp,48
   1f5a4:	f800283a 	ret
   1f5a8:	98800117 	ldw	r2,4(r19)
   1f5ac:	80c00017 	ldw	r3,0(r16)
   1f5b0:	10bfffc4 	addi	r2,r2,-1
   1f5b4:	17001526 	beq	r2,fp,1f60c <__call_exitprocs+0x164>
   1f5b8:	80000015 	stw	zero,0(r16)
   1f5bc:	183fde26 	beq	r3,zero,1f538 <__alt_mem_Flash_flash_data+0xf401f538>
   1f5c0:	00800044 	movi	r2,1
   1f5c4:	1708983a 	sll	r4,r2,fp
   1f5c8:	98806217 	ldw	r2,392(r19)
   1f5cc:	9dc00117 	ldw	r23,4(r19)
   1f5d0:	2084703a 	and	r2,r4,r2
   1f5d4:	1000061e 	bne	r2,zero,1f5f0 <__call_exitprocs+0x148>
   1f5d8:	183ee83a 	callr	r3
   1f5dc:	98800117 	ldw	r2,4(r19)
   1f5e0:	15ffc51e 	bne	r2,r23,1f4f8 <__alt_mem_Flash_flash_data+0xf401f4f8>
   1f5e4:	a8800017 	ldw	r2,0(r21)
   1f5e8:	14ffd326 	beq	r2,r19,1f538 <__alt_mem_Flash_flash_data+0xf401f538>
   1f5ec:	003fc206 	br	1f4f8 <__alt_mem_Flash_flash_data+0xf401f4f8>
   1f5f0:	98806317 	ldw	r2,396(r19)
   1f5f4:	2084703a 	and	r2,r4,r2
   1f5f8:	1000061e 	bne	r2,zero,1f614 <__call_exitprocs+0x16c>
   1f5fc:	89400017 	ldw	r5,0(r17)
   1f600:	9009883a 	mov	r4,r18
   1f604:	183ee83a 	callr	r3
   1f608:	003ff406 	br	1f5dc <__alt_mem_Flash_flash_data+0xf401f5dc>
   1f60c:	9f000115 	stw	fp,4(r19)
   1f610:	003fea06 	br	1f5bc <__alt_mem_Flash_flash_data+0xf401f5bc>
   1f614:	89000017 	ldw	r4,0(r17)
   1f618:	183ee83a 	callr	r3
   1f61c:	003fef06 	br	1f5dc <__alt_mem_Flash_flash_data+0xf401f5dc>
   1f620:	98800017 	ldw	r2,0(r19)
   1f624:	982b883a 	mov	r21,r19
   1f628:	1027883a 	mov	r19,r2
   1f62c:	983fb61e 	bne	r19,zero,1f508 <__alt_mem_Flash_flash_data+0xf401f508>
   1f630:	003fd106 	br	1f578 <__alt_mem_Flash_flash_data+0xf401f578>
   1f634:	0005883a 	mov	r2,zero
   1f638:	003ffa06 	br	1f624 <__alt_mem_Flash_flash_data+0xf401f624>

0001f63c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f63c:	defffd04 	addi	sp,sp,-12
   1f640:	df000215 	stw	fp,8(sp)
   1f644:	df000204 	addi	fp,sp,8
   1f648:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f64c:	008000b4 	movhi	r2,2
   1f650:	108ff144 	addi	r2,r2,16325
   1f654:	10000005 	stb	zero,0(r2)
   1f658:	e0bfff17 	ldw	r2,-4(fp)
   1f65c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f660:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f664:	10000226 	beq	r2,zero,1f670 <_exit+0x34>
    ALT_SIM_FAIL();
   1f668:	002af070 	cmpltui	zero,zero,43969
   1f66c:	00000106 	br	1f674 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1f670:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f674:	003fff06 	br	1f674 <__alt_mem_Flash_flash_data+0xf401f674>
