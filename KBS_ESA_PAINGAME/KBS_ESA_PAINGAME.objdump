
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001119c memsz 0x0001119c flags r-x
    LOAD off    0x000121bc vaddr 0x000111bc paddr 0x0001306c align 2**12
         filesz 0x00001eb0 memsz 0x00001eb0 flags rw-
    LOAD off    0x00014f1c vaddr 0x00014f1c paddr 0x00014f1c align 2**12
         filesz 0x00000000 memsz 0x0000d43c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010bbc  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003bc  00010e00  00010e00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb0  000111bc  0001306c  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d43c  00014f1c  00014f1c  00014f1c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00022358  00022358  0001406c  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001406c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  00014090  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023759  00000000  00000000  00014d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008798  00000000  00000000  000384b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a63c  00000000  00000000  00040c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000030ec  00000000  00000000  0004b290  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004613  00000000  00000000  0004e37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047e0  00000000  00000000  0005298f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00057170  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  00057190  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005c8ff  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005c905  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005c90a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005c90b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005c90c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005c910  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005c914  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005c918  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005c921  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005c92a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005c933  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0005c93e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0005c99c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  00067561  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00010e00 l    d  .rodata	00000000 .rodata
000111bc l    d  .rwdata	00000000 .rwdata
00014f1c l    d  .bss	00000000 .bss
00022358 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000111bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003548 l     F .text	00000008 __fp_lock
00003550 l     F .text	00000008 __fp_unlock
00003564 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000045b4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
000046e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00004800 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000482c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000492c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00004a20 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00004b04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00004cfc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012fe0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00004f58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00012fe4 l     O .rwdata	00000004 lockid
00014f9c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00012fe8 l     O .rwdata	00000004 lockid
00014fa4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000698c l     F .text	00000044 OS_InitMisc
000069d0 l     F .text	00000068 OS_InitRdyList
00006b30 l     F .text	000000e0 OS_InitTCBList
000068b0 l     F .text	000000dc OS_InitEventList
00006a38 l     F .text	0000007c OS_InitTaskIdle
00006ab4 l     F .text	0000007c OS_InitTaskStat
00006d90 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00008b94 l     F .text	00000110 OS_FlagTaskRdy
000088ec l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d03c l     F .text	00000038 alt_dev_reg
00011b90 l     O .rwdata	0000106c JTAG_UART
00012bfc l     O .rwdata	00000030 AV_Config
00012c2c l     O .rwdata	00000030 Audio_Subsystem_Audio
00012c5c l     O .rwdata	0000002c Char_LCD_16x2
00012c88 l     O .rwdata	0000002c IrDA
00012cb4 l     O .rwdata	0000002c Expansion_JP5
00012ce0 l     O .rwdata	0000002c Green_LEDs
00012d0c l     O .rwdata	0000002c HEX3_HEX0
00012d38 l     O .rwdata	0000002c HEX7_HEX4
00012d64 l     O .rwdata	0000002c Pushbuttons
00012d90 l     O .rwdata	0000002c Red_LEDs
00012dbc l     O .rwdata	0000002c Slider_Switches
00012de8 l     O .rwdata	00000038 PS2_Port
00012e20 l     O .rwdata	00000038 PS2_Port_Dual
00012e58 l     O .rwdata	0000002c Serial_Port
00012e84 l     O .rwdata	00000034 USB
00012eb8 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00012f00 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00012f54 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d724 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000d9cc l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e1a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f9c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000fc2c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ff14 l     F .text	00000050 alt_get_errno
0000ff64 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015008 g     O .bss	00000004 alt_instruction_exception_handler
00013036 g     O .rwdata	00000002 OSTaskNameSize
000044a8 g     F .text	00000054 _isatty_r
00004c28 g     F .text	000000d4 alt_main
00001a6c g     F .text	000000a8 _puts_r
00022258 g     O .bss	00000100 alt_irq
0000ed80 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000044fc g     F .text	0000005c _lseek_r
000093f8 g     F .text	000000d0 OS_MemInit
0001306c g       *ABS*	00000000 __flash_rwdata_start
0000cfd8 g     F .text	00000064 OSTimeSet
0000e310 g     F .text	0000003c alt_up_character_lcd_send_cmd
00005608 g     F .text	00000610 OSEventPendMulti
00022358 g       *ABS*	00000000 __alt_heap_start
00010570 g     F .text	00000020 OSTaskCreateHook
0001300e g     O .rwdata	00000002 OSMboxEn
00005c6c g     F .text	0000007c OSIntEnter
00004238 g     F .text	0000005c __sseek
00003898 g     F .text	00000010 __sinit
0000f708 g     F .text	00000100 alt_up_char_buffer_string
0000eba0 g     F .text	00000034 read_CE_bit
0001301e g     O .rwdata	00000002 OSQEn
00003700 g     F .text	00000068 __sfmoreglue
000052dc g     F .text	000000d0 __malloc_unlock
000105cc g     F .text	0000001c OSTaskStatHook
0000ef24 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000f418 g     F .text	00000090 alt_up_rs232_read_fd
00014fac g     O .bss	00000001 OSLockNesting
00000838 g     F .text	00000144 menu
0001305c g     O .rwdata	00000002 OSDataSize
00014fad g     O .bss	00000001 OSRunning
0000f63c g     F .text	000000cc alt_up_char_buffer_draw
00014f1c g     O .bss	00000004 counter3
00002a48 g     F .text	0000015c memmove
00010604 g     F .text	0000001c OSInitHookBegin
00013054 g     O .rwdata	00000002 OSTmrSize
00003880 g     F .text	00000018 _cleanup
00012f8c g     O .rwdata	00000004 gameModeMenu
00014fb0 g     O .bss	00000004 OSIdleCtr
00012f94 g     O .rwdata	00000004 xRechts
00010324 g     F .text	00000020 altera_nios2_gen2_irq_init
000103f0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000e29c g     F .text	00000074 get_DDRAM_addr
000070c8 g     F .text	000002d4 OS_TCBInit
00012fa4 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0001305a g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00012ffa g     O .rwdata	00000002 OSEventSize
00014fb4 g     O .bss	00000001 OSPrioHighRdy
00004450 g     F .text	00000058 _fstat_r
00010590 g     F .text	00000020 OSTaskDelHook
00014f88 g     O .bss	00000004 errno
000041b4 g     F .text	00000008 __seofread
000103d0 g       .text	00000000 OSStartHighRdy
00014f30 g     O .bss	00000004 pixel_buffer_y
0000b8dc g     F .text	000001ec OSTaskCreateExt
00008438 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001303a g     O .rwdata	00000002 OSTaskStatStkSize
00007528 g     F .text	00000308 OSFlagAccept
00009acc g     F .text	000000b8 OSQFlush
000094c8 g     F .text	00000140 OSQAccept
00014f94 g     O .bss	00000004 alt_argv
0001af80 g       *ABS*	00000000 _gp
0000b720 g     F .text	000001bc OSTaskCreate
0000b1e0 g     F .text	00000540 OSTaskChangePrio
00014fa8 g     O .bss	00000004 alt_heapsem
0000739c g     F .text	0000018c OSDebugInit
0000bac8 g     F .text	000003e0 OSTaskDel
00012f98 g     O .rwdata	00000004 xBoven
00011a10 g     O .rwdata	00000180 alt_fd_list
0001f034 g     O .bss	00000370 OSFlagTbl
0000669c g     F .text	000000b4 OS_EventTaskRemove
0000fb6c g     F .text	00000090 alt_find_dev
00002910 g     F .text	00000138 memcpy
00013024 g     O .rwdata	00000002 OSRdyTblSize
0000e4ac g     F .text	00000050 alt_up_character_lcd_write_fd
0000f808 g     F .text	0000005c alt_up_char_buffer_clear
00003558 g     F .text	0000000c _cleanup_r
0000fcec g     F .text	00000078 alt_io_redirect
00010e00 g       *ABS*	00000000 __DTOR_END__
0000ea2c g     F .text	00000090 alt_up_irda_write_fd
0000f3a4 g     F .text	00000074 alt_up_rs232_read_data
00001b14 g     F .text	00000014 puts
00010914 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000053ac g     F .text	00000120 OSEventNameGet
00013008 g     O .rwdata	00000002 OSFlagMax
00014f68 g     O .bss	00000004 last
00005ce8 g     F .text	000000f4 OSIntExit
00013042 g     O .rwdata	00000002 OSTCBSize
00014fb5 g     O .bss	00000001 OSPrioCur
0000e828 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000dc30 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000046d0 g     F .text	00000008 .hidden __udivsi3
0000497c g     F .text	000000a4 isatty
00013028 g     O .rwdata	00000002 OSStkWidth
0001301c g     O .rwdata	00000002 OSPtrSize
00012ffc g     O .rwdata	00000002 OSEventTblSize
0000e7cc g     F .text	0000005c alt_up_irda_disable_read_interrupt
00012fa0 g     O .rwdata	00000004 xMenu
00010344 g       .text	00000000 OSCtxSw
00010888 g     F .text	0000008c alt_icache_flush
00014f84 g     O .bss	00000004 __malloc_top_pad
0000055c g     F .text	0000011c moveDown
00014fb8 g     O .bss	00000004 OSTCBList
00014f8c g     O .bss	00000004 alt_fd_list_lock
00001bc0 g     F .text	000004c0 __sfvwrite_r
0001f3a4 g     O .bss	00000c30 OSMemTbl
00014fbc g     O .bss	00000001 OSTickStepState
0000310c g     F .text	00000054 _sbrk_r
00015034 g     O .bss	00002000 menu_stk
00013020 g     O .rwdata	00000002 OSQMax
0001ffd4 g     O .bss	00000800 OSTaskStatStk
00009028 g     F .text	000000f8 OSMemNameGet
00013000 g     O .rwdata	00000002 OSFlagEn
00004558 g     F .text	0000005c _read_r
00013046 g     O .rwdata	00000002 OSTimeTickHookEn
00009fec g     F .text	00000168 OSQPost
00008ca4 g     F .text	000000a0 OS_FlagUnlink
00014f34 g     O .bss	00000004 blue_y2
00012fd8 g     O .rwdata	00000004 alt_max_fd
0000f320 g     F .text	00000044 alt_up_rs232_check_parity
00006c60 g     F .text	00000064 OS_MemCopy
00006cc4 g     F .text	000000cc OS_Sched
0000434c g     F .text	000000f0 _fclose_r
00008f38 g     F .text	000000f0 OSMemGet
0000c1a8 g     F .text	000001c0 OSTaskNameSet
0000ebd4 g     F .text	00000030 read_num_bytes_available
00003518 g     F .text	00000030 fflush
00014f80 g     O .bss	00000004 __malloc_max_sbrked_mem
00014fc0 g     O .bss	00000004 OSCtxSwCtr
000105e8 g     F .text	0000001c OSTimeTickHook
0000fd64 g     F .text	000001b0 alt_irq_register
0001300a g     O .rwdata	00000002 OSFlagNameSize
0000eb3c g     F .text	00000034 read_RI_bit
00006750 g     F .text	000000fc OS_EventTaskRemoveMulti
00014f20 g     O .bss	00000004 controllerSem
00006550 g     F .text	0000014c OS_EventTaskWaitMulti
00013022 g     O .rwdata	00000002 OSQSize
00004b54 g     F .text	000000d4 lseek
0000aaf0 g     F .text	00000268 OSSemPend
00012fb8 g     O .rwdata	00000004 _global_impure_ptr
00002ba4 g     F .text	00000568 _realloc_r
00014f60 g     O .bss	00000004 vorige
0001300c g     O .rwdata	00000002 OSLowestPrio
00022358 g       *ABS*	00000000 __bss_end
00010658 g     F .text	00000020 OSTCBInitHook
00013052 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00010220 g     F .text	00000104 alt_tick
00014f24 g     O .bss	00000004 counter1
00012ff4 g     O .rwdata	00000002 OSEventEn
0001304e g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000ec38 g     F .text	0000002c read_data_byte
000038b8 g     F .text	00000018 __fp_lock_all
00008ab0 g     F .text	000000e4 OS_FlagInit
00010188 g     F .text	00000098 alt_alarm_stop
0000eb70 g     F .text	00000030 read_RE_bit
00013030 g     O .rwdata	00000002 OSTaskIdleStkSize
00014ffc g     O .bss	00000004 alt_irq_active
0000a6d8 g     F .text	000000b0 OSSemAccept
000010e0 g     F .text	00000090 VGA_text
00009238 g     F .text	000000d8 OSMemPut
00014f38 g     O .bss	00000004 pixel_buffer_x
00008d44 g     F .text	000001f4 OSMemCreate
00014fc4 g     O .bss	00000004 OSIdleCtrMax
00017034 g     O .bss	00002000 controller1_stk
0000e868 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
000119e8 g     O .rwdata	00000028 alt_dev_null
00013044 g     O .rwdata	00000002 OSTicksPerSec
0000e740 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000eafc g     F .text	00000040 alt_up_parallel_port_open_dev
00010344 g       .text	00000000 OSIntCtxSw
0000eddc g     F .text	00000074 alt_up_ps2_write_data_byte
0000f9a4 g     F .text	0000001c alt_dcache_flush_all
00012fa8 g     O .rwdata	00000002 geel
00014fc8 g     O .bss	00000004 OSTCBFreeList
0001306c g       *ABS*	00000000 __ram_rwdata_end
0000ad58 g     F .text	0000016c OSSemPendAbort
00012fd0 g     O .rwdata	00000008 alt_dev_list
00004fa8 g     F .text	000000f8 write
00013048 g     O .rwdata	00000002 OSVersionNbr
000111bc g       *ABS*	00000000 __ram_rodata_end
0000487c g     F .text	000000b0 fstat
0000f4a8 g     F .text	00000094 alt_up_rs232_write_fd
0000097c g     F .text	0000031c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00012ff0 g     O .rwdata	00000004 OSEndiannessTest
000046d8 g     F .text	00000008 .hidden __umodsi3
00014f3c g     O .bss	00000004 blue_x1
00013002 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	00000088 controllers
00022358 g       *ABS*	00000000 end
0000f118 g     F .text	00000098 alt_up_ps2_write_fd
0000e8a4 g     F .text	00000044 alt_up_irda_check_parity
0000f57c g     F .text	00000080 alt_up_char_buffer_init
0000d5e4 g     F .text	00000140 altera_avalon_jtag_uart_init
00006f24 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000678 g     F .text	000001c0 Game
00014f64 g     O .bss	00000002 zwart
00010e00 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e21c g     F .text	00000080 alt_avalon_timer_sc_init
0000dee4 g     F .text	000002c0 altera_avalon_jtag_uart_write
000038a8 g     F .text	00000004 __sfp_lock_acquire
00002828 g     F .text	000000e8 memchr
00006c10 g     F .text	00000050 OS_MemClr
0000e3c0 g     F .text	00000078 alt_up_character_lcd_write
00010414 g     F .text	0000015c OSTaskStkInit
00003a0c g     F .text	000002f0 _free_r
000062ac g     F .text	00000198 OS_EventTaskRdy
00010c30 g     F .text	00000194 __call_exitprocs
00014fcc g     O .bss	00000001 OSCPUUsage
00012fc0 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00015000 g     O .bss	00000004 _alt_tick_rate
00009b84 g     F .text	000002fc OSQPend
0000cad4 g     F .text	00000148 OSTimeDly
00019034 g     O .bss	00002000 controller2_stk
00015004 g     O .bss	00000004 _alt_nticks
00004d4c g     F .text	000000fc read
0000d0a8 g     F .text	000003d8 alt_sys_init
0000e5f8 g     F .text	00000088 alt_up_character_lcd_shift_display
00010b1c g     F .text	00000114 __register_exitproc
00014fcd g     O .bss	00000001 OSTaskCtr
00012faa g     O .rwdata	00000002 rood
0000f038 g     F .text	00000054 alt_up_ps2_clear_fifo
0000f2e4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000102c g     F .text	000000b4 VGA_box
0000cc1c g     F .text	00000168 OSTimeDlyHMSM
0000e680 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000dadc g     F .text	00000068 altera_avalon_jtag_uart_close
000111bc g       *ABS*	00000000 __ram_rwdata_start
00010e00 g       *ABS*	00000000 __ram_rodata_start
0001500c g     O .bss	00000028 __malloc_current_mallinfo
00012ff6 g     O .rwdata	00000002 OSEventMax
0000aec4 g     F .text	00000110 OSSemPost
00014f40 g     O .bss	00000004 blue_y1
00005e64 g     F .text	000000d8 OSSchedUnlock
00001170 g     F .text	00000068 draw_middenlijn
0000d480 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001078c g     F .text	000000fc alt_get_fd
00014fd0 g     O .bss	00000004 OSMemFreeList
00005fa8 g     F .text	000000ac OSStatInit
00008828 g     F .text	000000c4 OSFlagQuery
0001302c g     O .rwdata	00000002 OSTaskCreateExtEn
000042f8 g     F .text	00000054 _close_r
000109fc g     F .text	0000007c memcmp
00006290 g     F .text	0000001c OS_Dummy
0000d540 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00022358 g       *ABS*	00000000 __alt_stack_base
0000d590 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00014f6c g     O .bss	00000004 changed
0000e774 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00003160 g     F .text	00000154 __swsetup_r
000207d4 g     O .bss	000001e0 OSQTbl
00000308 g     F .text	000000f0 controller
00012fb4 g     O .rwdata	00000002 wit
00003768 g     F .text	00000118 __sfp
000115e0 g     O .rwdata	00000408 __malloc_av_
00014f44 g     O .bss	00000004 ALT_y
000038b4 g     F .text	00000004 __sinit_lock_release
00014fd4 g     O .bss	00000004 OSTCBHighRdy
00004160 g     F .text	00000054 __sread
00014fd8 g     O .bss	00000004 OSQFreeList
0000f248 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00010678 g     F .text	00000114 alt_find_file
0000fa10 g     F .text	000000a4 alt_dev_llist_insert
000051bc g     F .text	00000120 __malloc_lock
00004ea8 g     F .text	000000b0 sbrk
00014f48 g     O .bss	00000004 ALT_inc_y
000054cc g     F .text	0000013c OSEventNameSet
000034bc g     F .text	0000005c _fflush_r
00014fdc g     O .bss	00000001 OSRdyGrp
00014f1c g       *ABS*	00000000 __bss_start
0000403c g     F .text	00000124 memset
00000e54 g     F .text	000001d8 main
00014f98 g     O .bss	00000004 alt_envp
00014f7c g     O .bss	00000004 __malloc_max_total_mem
0000f5fc g     F .text	00000040 alt_up_char_buffer_open_dev
0000d4e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010eec g     O .rodata	00000100 OSUnMapTbl
00013026 g     O .rwdata	00000002 OSSemEn
0000e570 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000084a0 g     F .text	00000388 OSFlagPost
00004294 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000443c g     F .text	00000014 fclose
00006444 g     F .text	0000010c OS_EventTaskWait
0000efc8 g     F .text	00000070 alt_up_ps2_read_data_byte
00014f74 g     O .bss	00000004 timeout
00007000 g     F .text	000000c8 OS_TaskStatStkChk
0000bea8 g     F .text	00000158 OSTaskDelReq
00002080 g     F .text	000007a8 _malloc_r
00012fdc g     O .rwdata	00000004 alt_errno
00005f3c g     F .text	0000006c OSStart
00005160 g     F .text	0000005c __env_unlock
00003cfc g     F .text	000000c4 _fwalk
0000c368 g     F .text	000001f8 OSTaskResume
00009310 g     F .text	000000e8 OSMemQuery
00013038 g     O .rwdata	00000002 OSTaskStatEn
0001b034 g     O .bss	00002000 Game_stk
0000e8e8 g     F .text	00000040 alt_up_irda_write_data
00013012 g     O .rwdata	00000002 OSMemMax
0000a154 g     F .text	00000170 OSQPostFront
0000f1b0 g     F .text	00000040 alt_up_ps2_open_dev
00004620 g     F .text	00000054 .hidden __divsi3
00014fdd g     O .bss	00000003 OSRdyTbl
00012fec g     O .rwdata	00000002 OSDebugEn
0000e380 g     F .text	00000040 alt_up_character_lcd_open_dev
000038e8 g     F .text	00000124 _malloc_trim_r
0000ed28 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00010e00 g       *ABS*	00000000 __CTOR_END__
00012f84 g     O .rwdata	00000002 balWit
00013004 g     O .rwdata	00000002 OSFlagNodeSize
0001304c g     O .rwdata	00000002 OSTmrCfgMax
0000e34c g     F .text	00000034 alt_up_character_lcd_init
00010a78 g     F .text	000000a4 strcmp
00009608 g     F .text	000001fc OSQCreate
0000c000 g     F .text	000001a8 OSTaskNameGet
00010e00 g       *ABS*	00000000 __flash_rodata_start
0000a2c4 g     F .text	0000020c OSQPostOpt
00006054 g     F .text	0000021c OSTimeTick
00013034 g     O .rwdata	00000002 OSTaskMax
00010e00 g       *ABS*	00000000 __DTOR_LIST__
0000a788 g     F .text	00000100 OSSemCreate
00013058 g     O .rwdata	00000002 OSTmrWheelSize
0000f53c g     F .text	00000040 alt_up_rs232_open_dev
00014f4c g     O .bss	00000004 gameSem
0001302e g     O .rwdata	00000002 OSTaskDelEn
0000afd4 g     F .text	00000110 OSSemQuery
00009804 g     F .text	000002c8 OSQDel
00009e80 g     F .text	0000016c OSQPendAbort
0000d074 g     F .text	00000034 alt_irq_init
00004e48 g     F .text	00000060 alt_release_fd
000003f8 g     F .text	0000004c checkID
0000ec04 g     F .text	00000034 read_data_valid
0000e70c g     F .text	00000034 alt_up_character_lcd_cursor_off
0000eec0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000109b0 g     F .text	00000014 atexit
0000429c g     F .text	0000005c _write_r
00005ddc g     F .text	00000088 OSSchedLock
00007830 g     F .text	00000128 OSFlagCreate
00014f78 g     O .bss	00000004 menuFlags
00012fbc g     O .rwdata	00000004 _impure_ptr
00014f90 g     O .bss	00000004 alt_argc
000032b4 g     F .text	00000208 __sflush_r
0000fb10 g     F .text	0000005c _do_dtors
00012ffe g     O .rwdata	00000002 OSEventMultiEn
00007958 g     F .text	00000270 OSFlagDel
00014fe0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00007e48 g     F .text	000005f0 OSFlagPend
0001304a g     O .rwdata	00000002 OSTmrEn
000038d0 g     F .text	00000018 __fp_unlock_all
00012fc8 g     O .rwdata	00000008 alt_fs_list
00006e00 g     F .text	00000074 OS_StrCopy
0000f1f0 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000f364 g     F .text	00000040 alt_up_rs232_write_data
00000444 g     F .text	00000118 moveUp
00013014 g     O .rwdata	00000002 OSMemNameSize
00014f50 g     O .bss	00000004 ALT_x1
00010620 g     F .text	0000001c OSInitHookEnd
000011d8 g     F .text	00000848 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013040 g     O .rwdata	00000002 OSTCBPrioTblMax
0001303c g     O .rwdata	00000002 OSTaskStatStkChkEn
00013010 g     O .rwdata	00000002 OSMemEn
00012f88 g     O .rwdata	00000004 first
0001301a g     O .rwdata	00000002 OSMutexEn
0001306c g       *ABS*	00000000 _edata
00012fb0 g     O .rwdata	00000004 interval_timer_ptr
00022358 g       *ABS*	00000000 _end
00014fe4 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000db44 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000cd84 g     F .text	000001f0 OSTimeDlyResume
00007cf8 g     F .text	00000150 OSFlagNameSet
00000cd4 g     F .text	000000a0 clearText
0000c560 g     F .text	000001c8 OSTaskStkChk
00013016 g     O .rwdata	00000002 OSMemSize
000041bc g     F .text	0000007c __swrite
00012fc4 g     O .rwdata	00000004 __malloc_trim_threshold
00014fe8 g     O .bss	00000004 OSTCBCur
000109c4 g     F .text	00000038 exit
00001a20 g     F .text	0000004c checkIDScore
0000e928 g     F .text	00000074 alt_up_irda_read_data
00013018 g     O .rwdata	00000002 OSMemTblSize
00003dc0 g     F .text	000000c4 _fwalk_reent
0000ec64 g     F .text	000000c4 alt_up_ps2_init
00004674 g     F .text	0000005c .hidden __modsi3
0001d034 g     O .bss	00002000 menu_stk2
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000038ac g     F .text	00000004 __sfp_lock_release
00005c18 g     F .text	00000054 OSInit
0000c93c g     F .text	0000012c OSTaskQuery
0000e438 g     F .text	00000074 alt_up_character_lcd_string
0000a62c g     F .text	000000ac OS_QInit
00006e74 g     F .text	00000054 OS_StrLen
0000eabc g     F .text	00000040 alt_up_irda_open_dev
00009120 g     F .text	00000118 OSMemNameSet
00013032 g     O .rwdata	00000002 OSTaskProfileEn
00014fec g     O .bss	00000004 OSTime
00000d74 g     F .text	00000058 tekenBox
000209b4 g     O .bss	00000800 OSTaskIdleStk
00010dc4 g     F .text	0000003c _exit
00014f54 g     O .bss	00000004 ALT_inc_x
0000f864 g     F .text	00000140 alt_alarm_start
00007bc8 g     F .text	00000130 OSFlagNameGet
0000cf74 g     F .text	00000064 OSTimeGet
00003e84 g     F .text	000001b8 __smakebuf_r
0000ee50 g     F .text	00000070 alt_up_ps2_wait_for_ack
00001b28 g     F .text	00000098 strlen
000105b0 g     F .text	0000001c OSTaskSwHook
00010030 g     F .text	00000158 open
000211b4 g     O .bss	00000b40 OSEventTbl
00021cf4 g     O .bss	00000510 OSTCBTbl
0000b0e4 g     F .text	000000fc OSSemSet
00012fac g     O .rwdata	00000004 eenkeer
00000c98 g     F .text	0000003c clearScreen
00014f58 g     O .bss	00000004 ALT_x2
0000fbfc g     F .text	00000030 alt_icache_flush_all
0000e4fc g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00013060 g     O .rwdata	00000004 alt_priority_mask
0000a888 g     F .text	00000268 OSSemDel
00014ff0 g     O .bss	00000004 OSFlagFreeList
00012ff8 g     O .rwdata	00000002 OSEventNameSize
00014ff4 g     O .bss	00000001 OSStatRdy
00022204 g     O .bss	00000054 OSTCBPrioTbl
000050a0 g     F .text	000000c0 __env_lock
0000f08c g     F .text	0000008c alt_up_ps2_read_fd
0001303e g     O .rwdata	00000002 OSTaskSwHookEn
00012f90 g     O .rwdata	00000004 xLinks
0000e99c g     F .text	00000090 alt_up_irda_read_fd
00013064 g     O .rwdata	00000008 alt_alarm_list
00013006 g     O .rwdata	00000002 OSFlagWidth
0000fab4 g     F .text	0000005c _do_ctors
00012f80 g     O .rwdata	00000002 kleur
0000f2a4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00014f2c g     O .bss	00000002 balZwart
00004730 g     F .text	000000d0 close
00014f5c g     O .bss	00000004 blue_x2
00014fa0 g     O .bss	00000004 alt_envsem
00014ff8 g     O .bss	00000004 OSIdleCtrRun
00012f9c g     O .rwdata	00000004 xOnder
00006270 g     F .text	00000020 OSVersion
00013050 g     O .rwdata	00000002 OSTmrCfgWheelSize
00004a84 g     F .text	00000080 alt_load
0000ca68 g     F .text	0000006c OS_TaskStkClr
00000dcc g     F .text	00000088 tekenBox2
0001302a g     O .rwdata	00000002 OSTaskCreateEn
00014f70 g     O .bss	00000004 menuSem
0000684c g     F .text	00000064 OS_EventWaitListInit
0001063c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000038b0 g     F .text	00000004 __sinit_lock_acquire
0000c728 g     F .text	00000214 OSTaskSuspend
00014f28 g     O .bss	00000004 counter2
00006ec8 g     F .text	0000005c OS_TaskIdle
00013056 g     O .rwdata	00000002 OSTmrTblSize
0000a4d0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0005c6c0 	call	5c6c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10889604 	addi	r2,r2,8792
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10889604 	addi	r2,r2,8792
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0005ce80 	call	5ce8 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82217 	ldw	r2,-24440(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82217 	ldw	r2,-24440(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6abe014 	ori	gp,gp,44928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1093c714 	ori	r2,r2,20252

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18c8d614 	ori	r3,r3,9048

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	0004a840 	call	4a84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	0004c280 	call	4c28 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:

short kleur = 0x0000ff;
int counter1, counter2, counter3 = 0;


void controllers(void* pdata){
     280:	defffa04 	addi	sp,sp,-24
     284:	dfc00515 	stw	ra,20(sp)
     288:	df000415 	stw	fp,16(sp)
     28c:	df000404 	addi	fp,sp,16
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*)pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffd15 	stw	r2,-12(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffc15 	stw	r2,-16(fp)

	OSSemPend(controllerSem, 0, &err);
     2a4:	d0e7e817 	ldw	r3,-24672(gp)
     2a8:	e0bffe04 	addi	r2,fp,-8
     2ac:	1809883a 	mov	r4,r3
     2b0:	000b883a 	mov	r5,zero
     2b4:	100d883a 	mov	r6,r2
     2b8:	000aaf00 	call	aaf0 <OSSemPend>
	while (1){

		if (controller(ID) == 1){
     2bc:	e13ffd17 	ldw	r4,-12(fp)
     2c0:	00003080 	call	308 <controller>
     2c4:	10800058 	cmpnei	r2,r2,1
     2c8:	1000051e 	bne	r2,zero,2e0 <controllers+0x60>
			hoogte = moveDown(ID, hoogte);
     2cc:	e13ffd17 	ldw	r4,-12(fp)
     2d0:	e17ffc17 	ldw	r5,-16(fp)
     2d4:	000055c0 	call	55c <moveDown>
     2d8:	e0bffc15 	stw	r2,-16(fp)
     2dc:	00000706 	br	2fc <controllers+0x7c>
		}else if(controller(ID) == 0){
     2e0:	e13ffd17 	ldw	r4,-12(fp)
     2e4:	00003080 	call	308 <controller>
     2e8:	1000041e 	bne	r2,zero,2fc <controllers+0x7c>
			hoogte = moveUp(ID, hoogte);
     2ec:	e13ffd17 	ldw	r4,-12(fp)
     2f0:	e17ffc17 	ldw	r5,-16(fp)
     2f4:	00004440 	call	444 <moveUp>
     2f8:	e0bffc15 	stw	r2,-16(fp)
		}

		OSTimeDly(1);
     2fc:	01000044 	movi	r4,1
     300:	000cad40 	call	cad4 <OSTimeDly>
	}
     304:	003fed06 	br	2bc <__alt_mem_Flash_flash_data+0xf40002bc>

00000308 <controller>:


}

int controller(int ID){
     308:	defff904 	addi	sp,sp,-28
     30c:	dfc00615 	stw	ra,24(sp)
     310:	df000515 	stw	fp,20(sp)
     314:	df000504 	addi	fp,sp,20
     318:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     31c:	01000074 	movhi	r4,1
     320:	21038004 	addi	r4,r4,3584
     324:	000eafc0 	call	eafc <alt_up_parallel_port_open_dev>
     328:	e0bffb15 	stw	r2,-20(fp)
	alt_up_parallel_port_dev * SW_switch_ptr	= alt_up_parallel_port_open_dev ("/dev/Slider_Switches");
     32c:	01000074 	movhi	r4,1
     330:	21038504 	addi	r4,r4,3604
     334:	000eafc0 	call	eafc <alt_up_parallel_port_open_dev>
     338:	e0bffc15 	stw	r2,-16(fp)

	int KEY_value, SW_value;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     33c:	e0bffc17 	ldw	r2,-16(fp)
     340:	10800a17 	ldw	r2,40(r2)
     344:	10800037 	ldwio	r2,0(r2)
     348:	e0bffd15 	stw	r2,-12(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values
     34c:	e0bffb17 	ldw	r2,-20(fp)
     350:	10800a17 	ldw	r2,40(r2)
     354:	10800037 	ldwio	r2,0(r2)
     358:	e0bffe15 	stw	r2,-8(fp)

	if(ID == 2){
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	10800098 	cmpnei	r2,r2,2
     364:	1000131e 	bne	r2,zero,3b4 <controller+0xac>
		if(KEY_value != 0){
     368:	e0bffe17 	ldw	r2,-8(fp)
     36c:	10000f26 	beq	r2,zero,3ac <controller+0xa4>
			if(KEY_value == 8){
     370:	e0bffe17 	ldw	r2,-8(fp)
     374:	10800218 	cmpnei	r2,r2,8
     378:	1000021e 	bne	r2,zero,384 <controller+0x7c>
				return 1;
     37c:	00800044 	movi	r2,1
     380:	00001806 	br	3e4 <controller+0xdc>
			}
			if(KEY_value == 4){
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	10800118 	cmpnei	r2,r2,4
     38c:	1000021e 	bne	r2,zero,398 <controller+0x90>
				return 0;
     390:	0005883a 	mov	r2,zero
     394:	00001306 	br	3e4 <controller+0xdc>
			}
			if(KEY_value == 2){
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	10800098 	cmpnei	r2,r2,2
     3a0:	1000101e 	bne	r2,zero,3e4 <controller+0xdc>
				return 2;
     3a4:	00800084 	movi	r2,2
     3a8:	00000e06 	br	3e4 <controller+0xdc>
			}
		}else{
			return 3;
     3ac:	008000c4 	movi	r2,3
     3b0:	00000c06 	br	3e4 <controller+0xdc>
		}

	}else if(ID == 1){
     3b4:	e0bfff17 	ldw	r2,-4(fp)
     3b8:	10800058 	cmpnei	r2,r2,1
     3bc:	1000091e 	bne	r2,zero,3e4 <controller+0xdc>
		if(SW_value != 0){
     3c0:	e0bffd17 	ldw	r2,-12(fp)
     3c4:	10000526 	beq	r2,zero,3dc <controller+0xd4>
			if(SW_value == 1){
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	10800058 	cmpnei	r2,r2,1
     3d0:	1000041e 	bne	r2,zero,3e4 <controller+0xdc>
				return 0;
     3d4:	0005883a 	mov	r2,zero
     3d8:	00000206 	br	3e4 <controller+0xdc>
			}
		}else{
			return 1;
     3dc:	00800044 	movi	r2,1
     3e0:	00000006 	br	3e4 <controller+0xdc>
		}
	}

}
     3e4:	e037883a 	mov	sp,fp
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret

000003f8 <checkID>:

int checkID(int ID){
     3f8:	defffe04 	addi	sp,sp,-8
     3fc:	df000115 	stw	fp,4(sp)
     400:	df000104 	addi	fp,sp,4
     404:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	10800058 	cmpnei	r2,r2,1
     410:	1000021e 	bne	r2,zero,41c <checkID+0x24>
		return 15;
     414:	008003c4 	movi	r2,15
     418:	00000606 	br	434 <checkID+0x3c>
	}else if(ID == 2){
     41c:	e0bfff17 	ldw	r2,-4(fp)
     420:	10800098 	cmpnei	r2,r2,2
     424:	1000021e 	bne	r2,zero,430 <checkID+0x38>
		return 300;
     428:	00804b04 	movi	r2,300
     42c:	00000106 	br	434 <checkID+0x3c>

	}
	return 0;
     430:	0005883a 	mov	r2,zero
}
     434:	e037883a 	mov	sp,fp
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00104 	addi	sp,sp,4
     440:	f800283a 	ret

00000444 <moveUp>:

int moveUp(int ID, int current){
     444:	defff904 	addi	sp,sp,-28
     448:	dfc00615 	stw	ra,24(sp)
     44c:	df000515 	stw	fp,20(sp)
     450:	df000504 	addi	fp,sp,20
     454:	e13ffe15 	stw	r4,-8(fp)
     458:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     45c:	e0bfff17 	ldw	r2,-4(fp)
     460:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     464:	e13ffe17 	ldw	r4,-8(fp)
     468:	00003f80 	call	3f8 <checkID>
     46c:	e0bffd15 	stw	r2,-12(fp)

	if(boven >= 4 && boven <= 184){
     470:	e0bffc17 	ldw	r2,-16(fp)
     474:	10800110 	cmplti	r2,r2,4
     478:	10001f1e 	bne	r2,zero,4f8 <moveUp+0xb4>
     47c:	e0bffc17 	ldw	r2,-16(fp)
     480:	10802e48 	cmpgei	r2,r2,185
     484:	10001c1e 	bne	r2,zero,4f8 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     488:	e0bffd17 	ldw	r2,-12(fp)
     48c:	11800144 	addi	r6,r2,5
     490:	e0bffc17 	ldw	r2,-16(fp)
     494:	10c00044 	addi	r3,r2,1
     498:	d0a0000b 	ldhu	r2,-32768(gp)
     49c:	10bfffcc 	andi	r2,r2,65535
     4a0:	10a0001c 	xori	r2,r2,32768
     4a4:	10a00004 	addi	r2,r2,-32768
     4a8:	d8800015 	stw	r2,0(sp)
     4ac:	e13ffd17 	ldw	r4,-12(fp)
     4b0:	e17ffc17 	ldw	r5,-16(fp)
     4b4:	180f883a 	mov	r7,r3
     4b8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
     4bc:	e0bffc17 	ldw	r2,-16(fp)
     4c0:	11400c84 	addi	r5,r2,50
     4c4:	e0bffd17 	ldw	r2,-12(fp)
     4c8:	10c00144 	addi	r3,r2,5
     4cc:	e0bffc17 	ldw	r2,-16(fp)
     4d0:	10800cc4 	addi	r2,r2,51
     4d4:	d8000015 	stw	zero,0(sp)
     4d8:	e13ffd17 	ldw	r4,-12(fp)
     4dc:	180d883a 	mov	r6,r3
     4e0:	100f883a 	mov	r7,r2
     4e4:	000102c0 	call	102c <VGA_box>
		boven--;
     4e8:	e0bffc17 	ldw	r2,-16(fp)
     4ec:	10bfffc4 	addi	r2,r2,-1
     4f0:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven >= 4 && boven <= 184){
     4f4:	00001306 	br	544 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
		boven--;
	}else if(boven > 184){
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	10802e50 	cmplti	r2,r2,185
     500:	1000101e 	bne	r2,zero,544 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     504:	e0bffd17 	ldw	r2,-12(fp)
     508:	11800144 	addi	r6,r2,5
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	10c00044 	addi	r3,r2,1
     514:	d0a0000b 	ldhu	r2,-32768(gp)
     518:	10bfffcc 	andi	r2,r2,65535
     51c:	10a0001c 	xori	r2,r2,32768
     520:	10a00004 	addi	r2,r2,-32768
     524:	d8800015 	stw	r2,0(sp)
     528:	e13ffd17 	ldw	r4,-12(fp)
     52c:	e17ffc17 	ldw	r5,-16(fp)
     530:	180f883a 	mov	r7,r3
     534:	000102c0 	call	102c <VGA_box>
		boven--;
     538:	e0bffc17 	ldw	r2,-16(fp)
     53c:	10bfffc4 	addi	r2,r2,-1
     540:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     544:	e0bffc17 	ldw	r2,-16(fp)

}
     548:	e037883a 	mov	sp,fp
     54c:	dfc00117 	ldw	ra,4(sp)
     550:	df000017 	ldw	fp,0(sp)
     554:	dec00204 	addi	sp,sp,8
     558:	f800283a 	ret

0000055c <moveDown>:
int moveDown(int ID, int current){
     55c:	defff904 	addi	sp,sp,-28
     560:	dfc00615 	stw	ra,24(sp)
     564:	df000515 	stw	fp,20(sp)
     568:	df000504 	addi	fp,sp,20
     56c:	e13ffe15 	stw	r4,-8(fp)
     570:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     574:	e0bfff17 	ldw	r2,-4(fp)
     578:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     57c:	e13ffe17 	ldw	r4,-8(fp)
     580:	00003f80 	call	3f8 <checkID>
     584:	e0bffd15 	stw	r2,-12(fp)

	if(boven <= 184 && boven >= 4){
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	10802e48 	cmpgei	r2,r2,185
     590:	10001f1e 	bne	r2,zero,610 <moveDown+0xb4>
     594:	e0bffc17 	ldw	r2,-16(fp)
     598:	10800110 	cmplti	r2,r2,4
     59c:	10001c1e 	bne	r2,zero,610 <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     5a0:	e0bffc17 	ldw	r2,-16(fp)
     5a4:	11400c84 	addi	r5,r2,50
     5a8:	e0bffd17 	ldw	r2,-12(fp)
     5ac:	11800144 	addi	r6,r2,5
     5b0:	e0bffc17 	ldw	r2,-16(fp)
     5b4:	10c00cc4 	addi	r3,r2,51
     5b8:	d0a0000b 	ldhu	r2,-32768(gp)
     5bc:	10bfffcc 	andi	r2,r2,65535
     5c0:	10a0001c 	xori	r2,r2,32768
     5c4:	10a00004 	addi	r2,r2,-32768
     5c8:	d8800015 	stw	r2,0(sp)
     5cc:	e13ffd17 	ldw	r4,-12(fp)
     5d0:	180f883a 	mov	r7,r3
     5d4:	000102c0 	call	102c <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     5d8:	e0bffd17 	ldw	r2,-12(fp)
     5dc:	10c00144 	addi	r3,r2,5
     5e0:	e0bffc17 	ldw	r2,-16(fp)
     5e4:	10800044 	addi	r2,r2,1
     5e8:	d8000015 	stw	zero,0(sp)
     5ec:	e13ffd17 	ldw	r4,-12(fp)
     5f0:	e17ffc17 	ldw	r5,-16(fp)
     5f4:	180d883a 	mov	r6,r3
     5f8:	100f883a 	mov	r7,r2
     5fc:	000102c0 	call	102c <VGA_box>
		boven++;
     600:	e0bffc17 	ldw	r2,-16(fp)
     604:	10800044 	addi	r2,r2,1
     608:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven <= 184 && boven >= 4){
     60c:	00001406 	br	660 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	}else if(boven < 4){
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	10800108 	cmpgei	r2,r2,4
     618:	1000111e 	bne	r2,zero,660 <moveDown+0x104>
		VGA_box(X, boven + 50, X+5, boven + 51, kleur);
     61c:	e0bffc17 	ldw	r2,-16(fp)
     620:	11400c84 	addi	r5,r2,50
     624:	e0bffd17 	ldw	r2,-12(fp)
     628:	11800144 	addi	r6,r2,5
     62c:	e0bffc17 	ldw	r2,-16(fp)
     630:	10c00cc4 	addi	r3,r2,51
     634:	d0a0000b 	ldhu	r2,-32768(gp)
     638:	10bfffcc 	andi	r2,r2,65535
     63c:	10a0001c 	xori	r2,r2,32768
     640:	10a00004 	addi	r2,r2,-32768
     644:	d8800015 	stw	r2,0(sp)
     648:	e13ffd17 	ldw	r4,-12(fp)
     64c:	180f883a 	mov	r7,r3
     650:	000102c0 	call	102c <VGA_box>
		boven++;
     654:	e0bffc17 	ldw	r2,-16(fp)
     658:	10800044 	addi	r2,r2,1
     65c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     660:	e0bffc17 	ldw	r2,-16(fp)

}
     664:	e037883a 	mov	sp,fp
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	df000017 	ldw	fp,0(sp)
     670:	dec00204 	addi	sp,sp,8
     674:	f800283a 	ret

00000678 <Game>:
short balZwart = 0x000000;
short balWit = 0xffffff;

int first = 1;

void Game(void* pdata){
     678:	defffb04 	addi	sp,sp,-20
     67c:	dfc00415 	stw	ra,16(sp)
     680:	df000315 	stw	fp,12(sp)
     684:	df000304 	addi	fp,sp,12
     688:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0; ALT_x2 = 180; ALT_y = 100; ALT_inc_x = 1; ALT_inc_y = 1;
     68c:	d027f415 	stw	zero,-24624(gp)
     690:	00802d04 	movi	r2,180
     694:	d0a7f615 	stw	r2,-24616(gp)
     698:	00801904 	movi	r2,100
     69c:	d0a7f115 	stw	r2,-24636(gp)
     6a0:	00800044 	movi	r2,1
     6a4:	d0a7f515 	stw	r2,-24620(gp)
     6a8:	00800044 	movi	r2,1
     6ac:	d0a7f215 	stw	r2,-24632(gp)

	pixel_buffer_x = 340; pixel_buffer_y = 230;
     6b0:	00805504 	movi	r2,340
     6b4:	d0a7ee15 	stw	r2,-24648(gp)
     6b8:	00803984 	movi	r2,230
     6bc:	d0a7ec15 	stw	r2,-24656(gp)

	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	OSSemPend(gameSem, 0, &err);
     6c0:	d0a7f317 	ldw	r2,-24628(gp)
     6c4:	1009883a 	mov	r4,r2
     6c8:	000b883a 	mov	r5,zero
     6cc:	e1bffe04 	addi	r6,fp,-8
     6d0:	000aaf00 	call	aaf0 <OSSemPend>
	OSSemPost(controllerSem);
     6d4:	d0a7e817 	ldw	r2,-24672(gp)
     6d8:	1009883a 	mov	r4,r2
     6dc:	000aec40 	call	aec4 <OSSemPost>
	OSSemPost(controllerSem);
     6e0:	d0a7e817 	ldw	r2,-24672(gp)
     6e4:	1009883a 	mov	r4,r2
     6e8:	000aec40 	call	aec4 <OSSemPost>
	draw_middenlijn();
     6ec:	00011700 	call	1170 <draw_middenlijn>
	draw_number(0, 1);
     6f0:	0009883a 	mov	r4,zero
     6f4:	01400044 	movi	r5,1
     6f8:	00011d80 	call	11d8 <draw_number>
	draw_number(8, 2);
     6fc:	01000204 	movi	r4,8
     700:	01400084 	movi	r5,2
     704:	00011d80 	call	11d8 <draw_number>
	while(1){
		


		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balZwart); // erase
     708:	d127f417 	ldw	r4,-24624(gp)
     70c:	d167f117 	ldw	r5,-24636(gp)
     710:	d0a7f417 	ldw	r2,-24624(gp)
     714:	11800144 	addi	r6,r2,5
     718:	d0a7f117 	ldw	r2,-24636(gp)
     71c:	10c00144 	addi	r3,r2,5
     720:	d0a7eb0b 	ldhu	r2,-24660(gp)
     724:	10bfffcc 	andi	r2,r2,65535
     728:	10a0001c 	xori	r2,r2,32768
     72c:	10a00004 	addi	r2,r2,-32768
     730:	d8800015 	stw	r2,0(sp)
     734:	180f883a 	mov	r7,r3
     738:	000102c0 	call	102c <VGA_box>
		if(first == 1){
     73c:	d0a00217 	ldw	r2,-32760(gp)
     740:	10800058 	cmpnei	r2,r2,1
     744:	10000f1e 	bne	r2,zero,784 <Game+0x10c>
			ALT_x1 = 159 + ALT_x1 + ALT_inc_x;
     748:	d0a7f417 	ldw	r2,-24624(gp)
     74c:	10c027c4 	addi	r3,r2,159
     750:	d0a7f517 	ldw	r2,-24620(gp)
     754:	1885883a 	add	r2,r3,r2
     758:	d0a7f415 	stw	r2,-24624(gp)
			ALT_x2 += ALT_inc_x;
     75c:	d0e7f617 	ldw	r3,-24616(gp)
     760:	d0a7f517 	ldw	r2,-24620(gp)
     764:	1885883a 	add	r2,r3,r2
     768:	d0a7f615 	stw	r2,-24616(gp)
			ALT_y += ALT_inc_y;
     76c:	d0e7f117 	ldw	r3,-24636(gp)
     770:	d0a7f217 	ldw	r2,-24632(gp)
     774:	1885883a 	add	r2,r3,r2
     778:	d0a7f115 	stw	r2,-24636(gp)
			first = 0;
     77c:	d0200215 	stw	zero,-32760(gp)
     780:	00000c06 	br	7b4 <Game+0x13c>
		}else{
			ALT_x1 += ALT_inc_x;
     784:	d0e7f417 	ldw	r3,-24624(gp)
     788:	d0a7f517 	ldw	r2,-24620(gp)
     78c:	1885883a 	add	r2,r3,r2
     790:	d0a7f415 	stw	r2,-24624(gp)
			ALT_x2 += ALT_inc_x;
     794:	d0e7f617 	ldw	r3,-24616(gp)
     798:	d0a7f517 	ldw	r2,-24620(gp)
     79c:	1885883a 	add	r2,r3,r2
     7a0:	d0a7f615 	stw	r2,-24616(gp)
			ALT_y += ALT_inc_y;
     7a4:	d0e7f117 	ldw	r3,-24636(gp)
     7a8:	d0a7f217 	ldw	r2,-24632(gp)
     7ac:	1885883a 	add	r2,r3,r2
     7b0:	d0a7f115 	stw	r2,-24636(gp)
		}

		if ( (ALT_y == pixel_buffer_y) || (ALT_y == 4) )
     7b4:	d0e7f117 	ldw	r3,-24636(gp)
     7b8:	d0a7ec17 	ldw	r2,-24656(gp)
     7bc:	18800326 	beq	r3,r2,7cc <Game+0x154>
     7c0:	d0a7f117 	ldw	r2,-24636(gp)
     7c4:	10800118 	cmpnei	r2,r2,4
     7c8:	1000031e 	bne	r2,zero,7d8 <Game+0x160>
			ALT_inc_y = -(ALT_inc_y);
     7cc:	d0a7f217 	ldw	r2,-24632(gp)
     7d0:	0085c83a 	sub	r2,zero,r2
     7d4:	d0a7f215 	stw	r2,-24632(gp)
		if ( (ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0) )
     7d8:	d0e7f617 	ldw	r3,-24616(gp)
     7dc:	d0a7ee17 	ldw	r2,-24648(gp)
     7e0:	18800226 	beq	r3,r2,7ec <Game+0x174>
     7e4:	d0a7f417 	ldw	r2,-24624(gp)
     7e8:	1000031e 	bne	r2,zero,7f8 <Game+0x180>
			ALT_inc_x = -(ALT_inc_x);
     7ec:	d0a7f517 	ldw	r2,-24620(gp)
     7f0:	0085c83a 	sub	r2,zero,r2
     7f4:	d0a7f515 	stw	r2,-24620(gp)
//			ALT_inc_x = -(ALT_inc_x);
		// if balkje links collision


	
		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balWit); // ball
     7f8:	d127f417 	ldw	r4,-24624(gp)
     7fc:	d167f117 	ldw	r5,-24636(gp)
     800:	d0a7f417 	ldw	r2,-24624(gp)
     804:	11800144 	addi	r6,r2,5
     808:	d0a7f117 	ldw	r2,-24636(gp)
     80c:	10c00144 	addi	r3,r2,5
     810:	d0a0010b 	ldhu	r2,-32764(gp)
     814:	10bfffcc 	andi	r2,r2,65535
     818:	10a0001c 	xori	r2,r2,32768
     81c:	10a00004 	addi	r2,r2,-32768
     820:	d8800015 	stw	r2,0(sp)
     824:	180f883a 	mov	r7,r3
     828:	000102c0 	call	102c <VGA_box>


		VGA_text (ALT_x1, ALT_y, "HALLOOO");
		*/

		OSTimeDly(1);
     82c:	01000044 	movi	r4,1
     830:	000cad40 	call	cad4 <OSTimeDly>
	}
     834:	003fb406 	br	708 <__alt_mem_Flash_flash_data+0xf4000708>

00000838 <menu>:

int eenkeer = 1;
int last;
int changed;

void menu(void* pdata){
     838:	defffc04 	addi	sp,sp,-16
     83c:	dfc00315 	stw	ra,12(sp)
     840:	df000215 	stw	fp,8(sp)
     844:	df000204 	addi	fp,sp,8
     848:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     84c:	e0bfff17 	ldw	r2,-4(fp)
     850:	e0bffe15 	stw	r2,-8(fp)


	VGA_text (xMenu, yMenu, "Singleplayer");
     854:	d0e00817 	ldw	r3,-32736(gp)
     858:	d0a00917 	ldw	r2,-32732(gp)
     85c:	1809883a 	mov	r4,r3
     860:	100b883a 	mov	r5,r2
     864:	01800074 	movhi	r6,1
     868:	31838b04 	addi	r6,r6,3628
     86c:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
     870:	d0e00817 	ldw	r3,-32736(gp)
     874:	d0a00917 	ldw	r2,-32732(gp)
     878:	10800104 	addi	r2,r2,4
     87c:	1809883a 	mov	r4,r3
     880:	100b883a 	mov	r5,r2
     884:	01800074 	movhi	r6,1
     888:	31838f04 	addi	r6,r6,3644
     88c:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
     890:	d0e00817 	ldw	r3,-32736(gp)
     894:	d0a00917 	ldw	r2,-32732(gp)
     898:	10800204 	addi	r2,r2,8
     89c:	1809883a 	mov	r4,r3
     8a0:	100b883a 	mov	r5,r2
     8a4:	01800074 	movhi	r6,1
     8a8:	31839204 	addi	r6,r6,3656
     8ac:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
     8b0:	d0e00817 	ldw	r3,-32736(gp)
     8b4:	d0a00917 	ldw	r2,-32732(gp)
     8b8:	10800304 	addi	r2,r2,12
     8bc:	1809883a 	mov	r4,r3
     8c0:	100b883a 	mov	r5,r2
     8c4:	01800074 	movhi	r6,1
     8c8:	31839504 	addi	r6,r6,3668
     8cc:	00010e00 	call	10e0 <VGA_text>


	while(1){
		if (controller(ID) == 1){
     8d0:	e13ffe17 	ldw	r4,-8(fp)
     8d4:	00003080 	call	308 <controller>
     8d8:	10800058 	cmpnei	r2,r2,1
     8dc:	1000111e 	bne	r2,zero,924 <menu+0xec>
			if(changed != 0){
     8e0:	d0a7fb17 	ldw	r2,-24596(gp)
     8e4:	10000926 	beq	r2,zero,90c <menu+0xd4>
				gameModeMenu++;
     8e8:	d0a00317 	ldw	r2,-32756(gp)
     8ec:	10800044 	addi	r2,r2,1
     8f0:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
     8f4:	00800044 	movi	r2,1
     8f8:	d0a00b15 	stw	r2,-32724(gp)
				changed=0;
     8fc:	d027fb15 	stw	zero,-24596(gp)
				printf("heeft 1 gereturned \n");
     900:	01000074 	movhi	r4,1
     904:	21039804 	addi	r4,r4,3680
     908:	0001b140 	call	1b14 <puts>
			}
			if (gameModeMenu >= 5){
     90c:	d0a00317 	ldw	r2,-32756(gp)
     910:	10800150 	cmplti	r2,r2,5
     914:	1000161e 	bne	r2,zero,970 <menu+0x138>
				gameModeMenu = 1;
     918:	00800044 	movi	r2,1
     91c:	d0a00315 	stw	r2,-32756(gp)
     920:	00001306 	br	970 <menu+0x138>
			}
		} else if (controller(ID) == 0){
     924:	e13ffe17 	ldw	r4,-8(fp)
     928:	00003080 	call	308 <controller>
     92c:	1000101e 	bne	r2,zero,970 <menu+0x138>
			if(changed !=0){
     930:	d0a7fb17 	ldw	r2,-24596(gp)
     934:	10000a26 	beq	r2,zero,960 <menu+0x128>
				gameModeMenu--;
     938:	d0a00317 	ldw	r2,-32756(gp)
     93c:	10bfffc4 	addi	r2,r2,-1
     940:	d0a00315 	stw	r2,-32756(gp)
				last=0;
     944:	d027fa15 	stw	zero,-24600(gp)
				changed=0;
     948:	d027fb15 	stw	zero,-24596(gp)
				eenkeer = 1;
     94c:	00800044 	movi	r2,1
     950:	d0a00b15 	stw	r2,-32724(gp)
				printf("heeft 0 gereturned \n");
     954:	01000074 	movhi	r4,1
     958:	21039d04 	addi	r4,r4,3700
     95c:	0001b140 	call	1b14 <puts>
			}
			if (gameModeMenu <= 0){
     960:	d0a00317 	ldw	r2,-32756(gp)
     964:	00800216 	blt	zero,r2,970 <menu+0x138>
				gameModeMenu = 4;
     968:	00800104 	movi	r2,4
     96c:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(10);
     970:	01000284 	movi	r4,10
     974:	000cad40 	call	cad4 <OSTimeDly>
	}
     978:	003fd506 	br	8d0 <__alt_mem_Flash_flash_data+0xf40008d0>

0000097c <selecteerMenu>:

}

void selecteerMenu(void *pdata){
     97c:	defffb04 	addi	sp,sp,-20
     980:	dfc00415 	stw	ra,16(sp)
     984:	df000315 	stw	fp,12(sp)
     988:	df000304 	addi	fp,sp,12
     98c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
     990:	e0bfff17 	ldw	r2,-4(fp)
     994:	e0bffe15 	stw	r2,-8(fp)



	while(1){

		if (gameModeMenu == 1){
     998:	d0a00317 	ldw	r2,-32756(gp)
     99c:	10800058 	cmpnei	r2,r2,1
     9a0:	1000261e 	bne	r2,zero,a3c <selecteerMenu+0xc0>
			if(eenkeer == 1){
     9a4:	d0a00b17 	ldw	r2,-32724(gp)
     9a8:	10800058 	cmpnei	r2,r2,1
     9ac:	1000b21e 	bne	r2,zero,c78 <selecteerMenu+0x2fc>
				clearScreen();
     9b0:	0000c980 	call	c98 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
     9b4:	d0a00417 	ldw	r2,-32752(gp)
     9b8:	1085883a 	add	r2,r2,r2
     9bc:	1085883a 	add	r2,r2,r2
     9c0:	1009883a 	mov	r4,r2
     9c4:	d0a00617 	ldw	r2,-32744(gp)
     9c8:	1085883a 	add	r2,r2,r2
     9cc:	1085883a 	add	r2,r2,r2
     9d0:	100b883a 	mov	r5,r2
     9d4:	d0a00517 	ldw	r2,-32748(gp)
     9d8:	1085883a 	add	r2,r2,r2
     9dc:	1085883a 	add	r2,r2,r2
     9e0:	100d883a 	mov	r6,r2
     9e4:	d0a00717 	ldw	r2,-32740(gp)
     9e8:	1085883a 	add	r2,r2,r2
     9ec:	1085883a 	add	r2,r2,r2
     9f0:	1007883a 	mov	r3,r2
     9f4:	d0a00a8b 	ldhu	r2,-32726(gp)
     9f8:	10bfffcc 	andi	r2,r2,65535
     9fc:	10a0001c 	xori	r2,r2,32768
     a00:	10a00004 	addi	r2,r2,-32768
     a04:	d8800015 	stw	r2,0(sp)
     a08:	180f883a 	mov	r7,r3
     a0c:	000102c0 	call	102c <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
     a10:	d0e00817 	ldw	r3,-32736(gp)
     a14:	d0a00917 	ldw	r2,-32732(gp)
     a18:	1809883a 	mov	r4,r3
     a1c:	100b883a 	mov	r5,r2
     a20:	01800074 	movhi	r6,1
     a24:	31838b04 	addi	r6,r6,3628
     a28:	00010e00 	call	10e0 <VGA_text>
				eenkeer = 0;
     a2c:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
     a30:	00800044 	movi	r2,1
     a34:	d0a7fb15 	stw	r2,-24596(gp)
     a38:	00008f06 	br	c78 <selecteerMenu+0x2fc>
			}
		} else if (gameModeMenu == 2){
     a3c:	d0a00317 	ldw	r2,-32756(gp)
     a40:	10800098 	cmpnei	r2,r2,2
     a44:	1000351e 	bne	r2,zero,b1c <selecteerMenu+0x1a0>
			if(eenkeer == 1){
     a48:	d0a00b17 	ldw	r2,-32724(gp)
     a4c:	10800058 	cmpnei	r2,r2,1
     a50:	1000251e 	bne	r2,zero,ae8 <selecteerMenu+0x16c>
				clearScreen();
     a54:	0000c980 	call	c98 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
     a58:	d0a00417 	ldw	r2,-32752(gp)
     a5c:	1085883a 	add	r2,r2,r2
     a60:	1085883a 	add	r2,r2,r2
     a64:	1009883a 	mov	r4,r2
     a68:	d0a00617 	ldw	r2,-32744(gp)
     a6c:	10800104 	addi	r2,r2,4
     a70:	1085883a 	add	r2,r2,r2
     a74:	1085883a 	add	r2,r2,r2
     a78:	100b883a 	mov	r5,r2
     a7c:	d0a00517 	ldw	r2,-32748(gp)
     a80:	1085883a 	add	r2,r2,r2
     a84:	1085883a 	add	r2,r2,r2
     a88:	100d883a 	mov	r6,r2
     a8c:	d0a00717 	ldw	r2,-32740(gp)
     a90:	10800104 	addi	r2,r2,4
     a94:	1085883a 	add	r2,r2,r2
     a98:	1085883a 	add	r2,r2,r2
     a9c:	1007883a 	mov	r3,r2
     aa0:	d0a00a8b 	ldhu	r2,-32726(gp)
     aa4:	10bfffcc 	andi	r2,r2,65535
     aa8:	10a0001c 	xori	r2,r2,32768
     aac:	10a00004 	addi	r2,r2,-32768
     ab0:	d8800015 	stw	r2,0(sp)
     ab4:	180f883a 	mov	r7,r3
     ab8:	000102c0 	call	102c <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
     abc:	d0e00817 	ldw	r3,-32736(gp)
     ac0:	d0a00917 	ldw	r2,-32732(gp)
     ac4:	10800104 	addi	r2,r2,4
     ac8:	1809883a 	mov	r4,r3
     acc:	100b883a 	mov	r5,r2
     ad0:	01800074 	movhi	r6,1
     ad4:	31838f04 	addi	r6,r6,3644
     ad8:	00010e00 	call	10e0 <VGA_text>
				eenkeer = 0;
     adc:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
     ae0:	00800044 	movi	r2,1
     ae4:	d0a7fb15 	stw	r2,-24596(gp)
			}
			if(controller(ID) == 2){
     ae8:	e13ffe17 	ldw	r4,-8(fp)
     aec:	00003080 	call	308 <controller>
     af0:	10800098 	cmpnei	r2,r2,2
     af4:	1000601e 	bne	r2,zero,c78 <selecteerMenu+0x2fc>
				clearScreen();
     af8:	0000c980 	call	c98 <clearScreen>
				clearText();
     afc:	0000cd40 	call	cd4 <clearText>
				printf("start game\n");
     b00:	01000074 	movhi	r4,1
     b04:	2103a204 	addi	r4,r4,3720
     b08:	0001b140 	call	1b14 <puts>
				OSSemPost(gameSem);
     b0c:	d0a7f317 	ldw	r2,-24628(gp)
     b10:	1009883a 	mov	r4,r2
     b14:	000aec40 	call	aec4 <OSSemPost>
				break;
     b18:	00005a06 	br	c84 <selecteerMenu+0x308>
			}
		} else if (gameModeMenu == 3){
     b1c:	d0a00317 	ldw	r2,-32756(gp)
     b20:	108000d8 	cmpnei	r2,r2,3
     b24:	1000291e 	bne	r2,zero,bcc <selecteerMenu+0x250>
			if(eenkeer == 1){
     b28:	d0a00b17 	ldw	r2,-32724(gp)
     b2c:	10800058 	cmpnei	r2,r2,1
     b30:	1000511e 	bne	r2,zero,c78 <selecteerMenu+0x2fc>
				clearScreen();
     b34:	0000c980 	call	c98 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
     b38:	d0a00417 	ldw	r2,-32752(gp)
     b3c:	1085883a 	add	r2,r2,r2
     b40:	1085883a 	add	r2,r2,r2
     b44:	1009883a 	mov	r4,r2
     b48:	d0a00617 	ldw	r2,-32744(gp)
     b4c:	10800204 	addi	r2,r2,8
     b50:	1085883a 	add	r2,r2,r2
     b54:	1085883a 	add	r2,r2,r2
     b58:	100b883a 	mov	r5,r2
     b5c:	d0a00517 	ldw	r2,-32748(gp)
     b60:	1085883a 	add	r2,r2,r2
     b64:	1085883a 	add	r2,r2,r2
     b68:	100d883a 	mov	r6,r2
     b6c:	d0a00717 	ldw	r2,-32740(gp)
     b70:	10800204 	addi	r2,r2,8
     b74:	1085883a 	add	r2,r2,r2
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1007883a 	mov	r3,r2
     b80:	d0a00a8b 	ldhu	r2,-32726(gp)
     b84:	10bfffcc 	andi	r2,r2,65535
     b88:	10a0001c 	xori	r2,r2,32768
     b8c:	10a00004 	addi	r2,r2,-32768
     b90:	d8800015 	stw	r2,0(sp)
     b94:	180f883a 	mov	r7,r3
     b98:	000102c0 	call	102c <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
     b9c:	d0e00817 	ldw	r3,-32736(gp)
     ba0:	d0a00917 	ldw	r2,-32732(gp)
     ba4:	10800204 	addi	r2,r2,8
     ba8:	1809883a 	mov	r4,r3
     bac:	100b883a 	mov	r5,r2
     bb0:	01800074 	movhi	r6,1
     bb4:	31839204 	addi	r6,r6,3656
     bb8:	00010e00 	call	10e0 <VGA_text>
				eenkeer = 0;
     bbc:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
     bc0:	00800044 	movi	r2,1
     bc4:	d0a7fb15 	stw	r2,-24596(gp)
     bc8:	00002b06 	br	c78 <selecteerMenu+0x2fc>

			}
		} else if (gameModeMenu == 4){
     bcc:	d0a00317 	ldw	r2,-32756(gp)
     bd0:	10800118 	cmpnei	r2,r2,4
     bd4:	1000281e 	bne	r2,zero,c78 <selecteerMenu+0x2fc>
			if(eenkeer == 1){
     bd8:	d0a00b17 	ldw	r2,-32724(gp)
     bdc:	10800058 	cmpnei	r2,r2,1
     be0:	1000251e 	bne	r2,zero,c78 <selecteerMenu+0x2fc>
				clearScreen();
     be4:	0000c980 	call	c98 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
     be8:	d0a00417 	ldw	r2,-32752(gp)
     bec:	1085883a 	add	r2,r2,r2
     bf0:	1085883a 	add	r2,r2,r2
     bf4:	1009883a 	mov	r4,r2
     bf8:	d0a00617 	ldw	r2,-32744(gp)
     bfc:	10800304 	addi	r2,r2,12
     c00:	1085883a 	add	r2,r2,r2
     c04:	1085883a 	add	r2,r2,r2
     c08:	100b883a 	mov	r5,r2
     c0c:	d0a00517 	ldw	r2,-32748(gp)
     c10:	1085883a 	add	r2,r2,r2
     c14:	1085883a 	add	r2,r2,r2
     c18:	100d883a 	mov	r6,r2
     c1c:	d0a00717 	ldw	r2,-32740(gp)
     c20:	10800304 	addi	r2,r2,12
     c24:	1085883a 	add	r2,r2,r2
     c28:	1085883a 	add	r2,r2,r2
     c2c:	1007883a 	mov	r3,r2
     c30:	d0a00a8b 	ldhu	r2,-32726(gp)
     c34:	10bfffcc 	andi	r2,r2,65535
     c38:	10a0001c 	xori	r2,r2,32768
     c3c:	10a00004 	addi	r2,r2,-32768
     c40:	d8800015 	stw	r2,0(sp)
     c44:	180f883a 	mov	r7,r3
     c48:	000102c0 	call	102c <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
     c4c:	d0e00817 	ldw	r3,-32736(gp)
     c50:	d0a00917 	ldw	r2,-32732(gp)
     c54:	10800304 	addi	r2,r2,12
     c58:	1809883a 	mov	r4,r3
     c5c:	100b883a 	mov	r5,r2
     c60:	01800074 	movhi	r6,1
     c64:	31839504 	addi	r6,r6,3668
     c68:	00010e00 	call	10e0 <VGA_text>
				eenkeer = 0;
     c6c:	d0200b15 	stw	zero,-32724(gp)
				changed = 1;
     c70:	00800044 	movi	r2,1
     c74:	d0a7fb15 	stw	r2,-24596(gp)

			}
		}

		OSTimeDly(10);
     c78:	01000284 	movi	r4,10
     c7c:	000cad40 	call	cad4 <OSTimeDly>
	}
     c80:	003f4506 	br	998 <__alt_mem_Flash_flash_data+0xf4000998>
}
     c84:	e037883a 	mov	sp,fp
     c88:	dfc00117 	ldw	ra,4(sp)
     c8c:	df000017 	ldw	fp,0(sp)
     c90:	dec00204 	addi	sp,sp,8
     c94:	f800283a 	ret

00000c98 <clearScreen>:

void clearScreen(){
     c98:	defffd04 	addi	sp,sp,-12
     c9c:	dfc00215 	stw	ra,8(sp)
     ca0:	df000115 	stw	fp,4(sp)
     ca4:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,200, 0);
     ca8:	d8000015 	stw	zero,0(sp)
     cac:	01000644 	movi	r4,25
     cb0:	01401184 	movi	r5,70
     cb4:	01803204 	movi	r6,200
     cb8:	01c03204 	movi	r7,200
     cbc:	000102c0 	call	102c <VGA_box>
}
     cc0:	e037883a 	mov	sp,fp
     cc4:	dfc00117 	ldw	ra,4(sp)
     cc8:	df000017 	ldw	fp,0(sp)
     ccc:	dec00204 	addi	sp,sp,8
     cd0:	f800283a 	ret

00000cd4 <clearText>:

void clearText(){
     cd4:	defffe04 	addi	sp,sp,-8
     cd8:	dfc00115 	stw	ra,4(sp)
     cdc:	df000015 	stw	fp,0(sp)
     ce0:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
     ce4:	d0e00817 	ldw	r3,-32736(gp)
     ce8:	d0a00917 	ldw	r2,-32732(gp)
     cec:	1809883a 	mov	r4,r3
     cf0:	100b883a 	mov	r5,r2
     cf4:	01800074 	movhi	r6,1
     cf8:	3183a504 	addi	r6,r6,3732
     cfc:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
     d00:	d0e00817 	ldw	r3,-32736(gp)
     d04:	d0a00917 	ldw	r2,-32732(gp)
     d08:	10800104 	addi	r2,r2,4
     d0c:	1809883a 	mov	r4,r3
     d10:	100b883a 	mov	r5,r2
     d14:	01800074 	movhi	r6,1
     d18:	3183a904 	addi	r6,r6,3748
     d1c:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
     d20:	d0e00817 	ldw	r3,-32736(gp)
     d24:	d0a00917 	ldw	r2,-32732(gp)
     d28:	10800204 	addi	r2,r2,8
     d2c:	1809883a 	mov	r4,r3
     d30:	100b883a 	mov	r5,r2
     d34:	01800074 	movhi	r6,1
     d38:	3183ac04 	addi	r6,r6,3760
     d3c:	00010e00 	call	10e0 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
     d40:	d0e00817 	ldw	r3,-32736(gp)
     d44:	d0a00917 	ldw	r2,-32732(gp)
     d48:	10800304 	addi	r2,r2,12
     d4c:	1809883a 	mov	r4,r3
     d50:	100b883a 	mov	r5,r2
     d54:	01800074 	movhi	r6,1
     d58:	3183af04 	addi	r6,r6,3772
     d5c:	00010e00 	call	10e0 <VGA_text>
}
     d60:	e037883a 	mov	sp,fp
     d64:	dfc00117 	ldw	ra,4(sp)
     d68:	df000017 	ldw	fp,0(sp)
     d6c:	dec00204 	addi	sp,sp,8
     d70:	f800283a 	ret

00000d74 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
     d74:	defff804 	addi	sp,sp,-32
     d78:	dfc00715 	stw	ra,28(sp)
     d7c:	df000615 	stw	fp,24(sp)
     d80:	df000604 	addi	fp,sp,24
     d84:	e13ffb15 	stw	r4,-20(fp)
     d88:	e17ffc15 	stw	r5,-16(fp)
     d8c:	e1bffd15 	stw	r6,-12(fp)
     d90:	e1fffe15 	stw	r7,-8(fp)
     d94:	e0800217 	ldw	r2,8(fp)
     d98:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     d9c:	e0bfff0f 	ldh	r2,-4(fp)
     da0:	d8800015 	stw	r2,0(sp)
     da4:	e13ffb17 	ldw	r4,-20(fp)
     da8:	e17ffc17 	ldw	r5,-16(fp)
     dac:	e1bffd17 	ldw	r6,-12(fp)
     db0:	e1fffe17 	ldw	r7,-8(fp)
     db4:	000102c0 	call	102c <VGA_box>
}
     db8:	e037883a 	mov	sp,fp
     dbc:	dfc00117 	ldw	ra,4(sp)
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00204 	addi	sp,sp,8
     dc8:	f800283a 	ret

00000dcc <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
     dcc:	defff804 	addi	sp,sp,-32
     dd0:	dfc00715 	stw	ra,28(sp)
     dd4:	df000615 	stw	fp,24(sp)
     dd8:	df000604 	addi	fp,sp,24
     ddc:	e13ffb15 	stw	r4,-20(fp)
     de0:	e17ffc15 	stw	r5,-16(fp)
     de4:	e1bffd15 	stw	r6,-12(fp)
     de8:	e1fffe15 	stw	r7,-8(fp)
     dec:	e0800217 	ldw	r2,8(fp)
     df0:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
     df4:	e0bffb17 	ldw	r2,-20(fp)
     df8:	10800044 	addi	r2,r2,1
     dfc:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
     e00:	e0bffc17 	ldw	r2,-16(fp)
     e04:	10800044 	addi	r2,r2,1
     e08:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
     e0c:	e0bffd17 	ldw	r2,-12(fp)
     e10:	10bfffc4 	addi	r2,r2,-1
     e14:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
     e18:	e0bffe17 	ldw	r2,-8(fp)
     e1c:	10bfffc4 	addi	r2,r2,-1
     e20:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     e24:	e0bfff0f 	ldh	r2,-4(fp)
     e28:	d8800015 	stw	r2,0(sp)
     e2c:	e13ffb17 	ldw	r4,-20(fp)
     e30:	e17ffc17 	ldw	r5,-16(fp)
     e34:	e1bffd17 	ldw	r6,-12(fp)
     e38:	e1fffe17 	ldw	r7,-8(fp)
     e3c:	000102c0 	call	102c <VGA_box>
}
     e40:	e037883a 	mov	sp,fp
     e44:	dfc00117 	ldw	ra,4(sp)
     e48:	df000017 	ldw	fp,0(sp)
     e4c:	dec00204 	addi	sp,sp,8
     e50:	f800283a 	ret

00000e54 <main>:
void selecteerMenu(void *pdata);
void Game(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     e54:	defffb04 	addi	sp,sp,-20
     e58:	dfc00415 	stw	ra,16(sp)
     e5c:	df000315 	stw	fp,12(sp)
     e60:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
     e64:	0005c180 	call	5c18 <OSInit>
	int counter = 0x50000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     e68:	00800174 	movhi	r2,5
     e6c:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     e70:	d0a00c17 	ldw	r2,-32720(gp)
     e74:	10800204 	addi	r2,r2,8
     e78:	e0fffe17 	ldw	r3,-8(fp)
     e7c:	18ffffcc 	andi	r3,r3,65535
     e80:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     e84:	d0a00c17 	ldw	r2,-32720(gp)
     e88:	10800304 	addi	r2,r2,12
     e8c:	e0fffe17 	ldw	r3,-8(fp)
     e90:	1806d43a 	srli	r3,r3,16
     e94:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     e98:	d0a00c17 	ldw	r2,-32720(gp)
     e9c:	10800104 	addi	r2,r2,4
     ea0:	00c001c4 	movi	r3,7
     ea4:	10c00015 	stw	r3,0(r2)

	menuFlags = OSFlagCreate(menuFlags, &err);
     ea8:	d0a7fe17 	ldw	r2,-24584(gp)
     eac:	10ffffcc 	andi	r3,r2,65535
     eb0:	e0bfff04 	addi	r2,fp,-4
     eb4:	1809883a 	mov	r4,r3
     eb8:	100b883a 	mov	r5,r2
     ebc:	00078300 	call	7830 <OSFlagCreate>
     ec0:	d0a7fe15 	stw	r2,-24584(gp)
	gameSem = OSSemCreate(0);
     ec4:	0009883a 	mov	r4,zero
     ec8:	000a7880 	call	a788 <OSSemCreate>
     ecc:	d0a7f315 	stw	r2,-24628(gp)
	controllerSem = OSSemCreate(0);
     ed0:	0009883a 	mov	r4,zero
     ed4:	000a7880 	call	a788 <OSSemCreate>
     ed8:	d0a7e815 	stw	r2,-24672(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
     edc:	d8000015 	stw	zero,0(sp)
     ee0:	0009883a 	mov	r4,zero
     ee4:	000b883a 	mov	r5,zero
     ee8:	01804fc4 	movi	r6,319
     eec:	01c03bc4 	movi	r7,239
     ef0:	000102c0 	call	102c <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
     ef4:	00803fc4 	movi	r2,255
     ef8:	d8800015 	stw	r2,0(sp)
     efc:	010003c4 	movi	r4,15
     f00:	01400c84 	movi	r5,50
     f04:	01800504 	movi	r6,20
     f08:	01c01904 	movi	r7,100
     f0c:	000102c0 	call	102c <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
     f10:	00803fc4 	movi	r2,255
     f14:	d8800015 	stw	r2,0(sp)
     f18:	01004b04 	movi	r4,300
     f1c:	01400c84 	movi	r5,50
     f20:	01804c44 	movi	r6,305
     f24:	01c01904 	movi	r7,100
     f28:	000102c0 	call	102c <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
     f2c:	00804034 	movhi	r2,256
     f30:	10bfffc4 	addi	r2,r2,-1
     f34:	d8800015 	stw	r2,0(sp)
     f38:	0009883a 	mov	r4,zero
     f3c:	000b883a 	mov	r5,zero
     f40:	01804fc4 	movi	r6,319
     f44:	01c000c4 	movi	r7,3
     f48:	000102c0 	call	102c <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
     f4c:	00804034 	movhi	r2,256
     f50:	10bfffc4 	addi	r2,r2,-1
     f54:	d8800015 	stw	r2,0(sp)
     f58:	0009883a 	mov	r4,zero
     f5c:	01403b04 	movi	r5,236
     f60:	01804fc4 	movi	r6,319
     f64:	01c03bc4 	movi	r7,239
     f68:	000102c0 	call	102c <VGA_box>

	draw_number(0, 1);
     f6c:	0009883a 	mov	r4,zero
     f70:	01400044 	movi	r5,1
     f74:	00011d80 	call	11d8 <draw_number>
	draw_number(8, 2);
     f78:	01000204 	movi	r4,8
     f7c:	01400084 	movi	r5,2
     f80:	00011d80 	call	11d8 <draw_number>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
     f84:	01000034 	movhi	r4,0
     f88:	2100a004 	addi	r4,r4,640
     f8c:	01400044 	movi	r5,1
     f90:	018000b4 	movhi	r6,2
     f94:	31a40c04 	addi	r6,r6,-28624
     f98:	01c001c4 	movi	r7,7
     f9c:	000b7200 	call	b720 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
     fa0:	01000034 	movhi	r4,0
     fa4:	2100a004 	addi	r4,r4,640
     fa8:	01400084 	movi	r5,2
     fac:	018000b4 	movhi	r6,2
     fb0:	31ac0c04 	addi	r6,r6,-20432
     fb4:	01c00204 	movi	r7,8
     fb8:	000b7200 	call	b720 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
     fbc:	01000034 	movhi	r4,0
     fc0:	21019e04 	addi	r4,r4,1656
     fc4:	000b883a 	mov	r5,zero
     fc8:	018000b4 	movhi	r6,2
     fcc:	31b40c04 	addi	r6,r6,-12240
     fd0:	01c00184 	movi	r7,6
     fd4:	000b7200 	call	b720 <OSTaskCreate>

	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
     fd8:	01000034 	movhi	r4,0
     fdc:	21020e04 	addi	r4,r4,2104
     fe0:	01400084 	movi	r5,2
     fe4:	01800074 	movhi	r6,1
     fe8:	319c0c04 	addi	r6,r6,28720
     fec:	01c00244 	movi	r7,9
     ff0:	000b7200 	call	b720 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 2, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
     ff4:	01000034 	movhi	r4,0
     ff8:	21025f04 	addi	r4,r4,2428
     ffc:	01400084 	movi	r5,2
    1000:	018000b4 	movhi	r6,2
    1004:	31bc0c04 	addi	r6,r6,-4048
    1008:	01c00284 	movi	r7,10
    100c:	000b7200 	call	b720 <OSTaskCreate>
	OSStart();
    1010:	0005f3c0 	call	5f3c <OSStart>
	return 0;
    1014:	0005883a 	mov	r2,zero
}
    1018:	e037883a 	mov	sp,fp
    101c:	dfc00117 	ldw	ra,4(sp)
    1020:	df000017 	ldw	fp,0(sp)
    1024:	dec00204 	addi	sp,sp,8
    1028:	f800283a 	ret

0000102c <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    102c:	defff604 	addi	sp,sp,-40
    1030:	df000915 	stw	fp,36(sp)
    1034:	df000904 	addi	fp,sp,36
    1038:	e13ffb15 	stw	r4,-20(fp)
    103c:	e17ffc15 	stw	r5,-16(fp)
    1040:	e1bffd15 	stw	r6,-12(fp)
    1044:	e1fffe15 	stw	r7,-8(fp)
    1048:	e0800117 	ldw	r2,4(fp)
    104c:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    1050:	00820034 	movhi	r2,2048
    1054:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1058:	e0bffc17 	ldw	r2,-16(fp)
    105c:	e0bff715 	stw	r2,-36(fp)
    1060:	00001806 	br	10c4 <VGA_box+0x98>
	{
		col = x1;
    1064:	e0bffb17 	ldw	r2,-20(fp)
    1068:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    106c:	00000f06 	br	10ac <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    1070:	e0bff717 	ldw	r2,-36(fp)
    1074:	1006927a 	slli	r3,r2,9
    1078:	e0bff817 	ldw	r2,-32(fp)
    107c:	1885883a 	add	r2,r3,r2
    1080:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    1084:	e0bffa17 	ldw	r2,-24(fp)
    1088:	1085883a 	add	r2,r2,r2
    108c:	1007883a 	mov	r3,r2
    1090:	e0bff917 	ldw	r2,-28(fp)
    1094:	10c5883a 	add	r2,r2,r3
    1098:	e0ffff0b 	ldhu	r3,-4(fp)
    109c:	10c0000d 	sth	r3,0(r2)
			++col;
    10a0:	e0bff817 	ldw	r2,-32(fp)
    10a4:	10800044 	addi	r2,r2,1
    10a8:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    10ac:	e0bff817 	ldw	r2,-32(fp)
    10b0:	e0fffd17 	ldw	r3,-12(fp)
    10b4:	18bfee0e 	bge	r3,r2,1070 <__alt_mem_Flash_flash_data+0xf4001070>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    10b8:	e0bff717 	ldw	r2,-36(fp)
    10bc:	10800044 	addi	r2,r2,1
    10c0:	e0bff715 	stw	r2,-36(fp)
    10c4:	e0bff717 	ldw	r2,-36(fp)
    10c8:	e0fffe17 	ldw	r3,-8(fp)
    10cc:	18bfe50e 	bge	r3,r2,1064 <__alt_mem_Flash_flash_data+0xf4001064>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    10d0:	e037883a 	mov	sp,fp
    10d4:	df000017 	ldw	fp,0(sp)
    10d8:	dec00104 	addi	sp,sp,4
    10dc:	f800283a 	ret

000010e0 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    10e0:	defffa04 	addi	sp,sp,-24
    10e4:	df000515 	stw	fp,20(sp)
    10e8:	df000504 	addi	fp,sp,20
    10ec:	e13ffd15 	stw	r4,-12(fp)
    10f0:	e17ffe15 	stw	r5,-8(fp)
    10f4:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    10f8:	00824034 	movhi	r2,2304
    10fc:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    1100:	e0bffe17 	ldw	r2,-8(fp)
    1104:	100691fa 	slli	r3,r2,7
    1108:	e0bffd17 	ldw	r2,-12(fp)
    110c:	1885883a 	add	r2,r3,r2
    1110:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    1114:	00000c06 	br	1148 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    1118:	e0bffb17 	ldw	r2,-20(fp)
    111c:	e0fffc17 	ldw	r3,-16(fp)
    1120:	1885883a 	add	r2,r3,r2
    1124:	e0ffff17 	ldw	r3,-4(fp)
    1128:	18c00003 	ldbu	r3,0(r3)
    112c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    1130:	e0bfff17 	ldw	r2,-4(fp)
    1134:	10800044 	addi	r2,r2,1
    1138:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    113c:	e0bffb17 	ldw	r2,-20(fp)
    1140:	10800044 	addi	r2,r2,1
    1144:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	10800003 	ldbu	r2,0(r2)
    1150:	10803fcc 	andi	r2,r2,255
    1154:	1080201c 	xori	r2,r2,128
    1158:	10bfe004 	addi	r2,r2,-128
    115c:	103fee1e 	bne	r2,zero,1118 <__alt_mem_Flash_flash_data+0xf4001118>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    1160:	e037883a 	mov	sp,fp
    1164:	df000017 	ldw	fp,0(sp)
    1168:	dec00104 	addi	sp,sp,4
    116c:	f800283a 	ret

00001170 <draw_middenlijn>:

void draw_middenlijn(){
    1170:	defffc04 	addi	sp,sp,-16
    1174:	dfc00315 	stw	ra,12(sp)
    1178:	df000215 	stw	fp,8(sp)
    117c:	df000204 	addi	fp,sp,8
	int i = 0;
    1180:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    1184:	00000c06 	br	11b8 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, 0xffff);				// middenlijntje
    1188:	e0bfff17 	ldw	r2,-4(fp)
    118c:	10c001c4 	addi	r3,r2,7
    1190:	00bfffc4 	movi	r2,-1
    1194:	d8800015 	stw	r2,0(sp)
    1198:	010027c4 	movi	r4,159
    119c:	e17fff17 	ldw	r5,-4(fp)
    11a0:	01802804 	movi	r6,160
    11a4:	180f883a 	mov	r7,r3
    11a8:	000102c0 	call	102c <VGA_box>
		i = i + 11;
    11ac:	e0bfff17 	ldw	r2,-4(fp)
    11b0:	108002c4 	addi	r2,r2,11
    11b4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    11b8:	e0bfff17 	ldw	r2,-4(fp)
    11bc:	10803c10 	cmplti	r2,r2,240
    11c0:	103ff11e 	bne	r2,zero,1188 <__alt_mem_Flash_flash_data+0xf4001188>
		VGA_box (159, i, 160, i+ 7, 0xffff);				// middenlijntje
		i = i + 11;
	}

}
    11c4:	e037883a 	mov	sp,fp
    11c8:	dfc00117 	ldw	ra,4(sp)
    11cc:	df000017 	ldw	fp,0(sp)
    11d0:	dec00204 	addi	sp,sp,8
    11d4:	f800283a 	ret

000011d8 <draw_number>:

void draw_number(int nummer, int ID){
    11d8:	defffa04 	addi	sp,sp,-24
    11dc:	dfc00515 	stw	ra,20(sp)
    11e0:	df000415 	stw	fp,16(sp)
    11e4:	df000404 	addi	fp,sp,16
    11e8:	e13ffe15 	stw	r4,-8(fp)
    11ec:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    11f0:	e13fff17 	ldw	r4,-4(fp)
    11f4:	0001a200 	call	1a20 <checkIDScore>
    11f8:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    11fc:	e0bffe17 	ldw	r2,-8(fp)
    1200:	10800058 	cmpnei	r2,r2,1
    1204:	10000e1e 	bne	r2,zero,1240 <draw_number+0x68>
		VGA_box(X + 5, 20, X+7, 60, wit);
    1208:	e0bffd17 	ldw	r2,-12(fp)
    120c:	11000144 	addi	r4,r2,5
    1210:	e0bffd17 	ldw	r2,-12(fp)
    1214:	10c001c4 	addi	r3,r2,7
    1218:	d0a00d0b 	ldhu	r2,-32716(gp)
    121c:	10bfffcc 	andi	r2,r2,65535
    1220:	10a0001c 	xori	r2,r2,32768
    1224:	10a00004 	addi	r2,r2,-32768
    1228:	d8800015 	stw	r2,0(sp)
    122c:	01400504 	movi	r5,20
    1230:	180d883a 	mov	r6,r3
    1234:	01c00f04 	movi	r7,60
    1238:	000102c0 	call	102c <VGA_box>
    123c:	0001f306 	br	1a0c <draw_number+0x834>
	}else if(nummer == 2){
    1240:	e0bffe17 	ldw	r2,-8(fp)
    1244:	10800098 	cmpnei	r2,r2,2
    1248:	10003e1e 	bne	r2,zero,1344 <draw_number+0x16c>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    124c:	e0bffd17 	ldw	r2,-12(fp)
    1250:	10c00504 	addi	r3,r2,20
    1254:	d0a00d0b 	ldhu	r2,-32716(gp)
    1258:	10bfffcc 	andi	r2,r2,65535
    125c:	10a0001c 	xori	r2,r2,32768
    1260:	10a00004 	addi	r2,r2,-32768
    1264:	d8800015 	stw	r2,0(sp)
    1268:	e13ffd17 	ldw	r4,-12(fp)
    126c:	01400504 	movi	r5,20
    1270:	180d883a 	mov	r6,r3
    1274:	01c00584 	movi	r7,22
    1278:	000102c0 	call	102c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    127c:	e0bffd17 	ldw	r2,-12(fp)
    1280:	11000484 	addi	r4,r2,18
    1284:	e0bffd17 	ldw	r2,-12(fp)
    1288:	10c00504 	addi	r3,r2,20
    128c:	d0a00d0b 	ldhu	r2,-32716(gp)
    1290:	10bfffcc 	andi	r2,r2,65535
    1294:	10a0001c 	xori	r2,r2,32768
    1298:	10a00004 	addi	r2,r2,-32768
    129c:	d8800015 	stw	r2,0(sp)
    12a0:	01400584 	movi	r5,22
    12a4:	180d883a 	mov	r6,r3
    12a8:	01c00984 	movi	r7,38
    12ac:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    12b0:	e0bffd17 	ldw	r2,-12(fp)
    12b4:	10c00504 	addi	r3,r2,20
    12b8:	d0a00d0b 	ldhu	r2,-32716(gp)
    12bc:	10bfffcc 	andi	r2,r2,65535
    12c0:	10a0001c 	xori	r2,r2,32768
    12c4:	10a00004 	addi	r2,r2,-32768
    12c8:	d8800015 	stw	r2,0(sp)
    12cc:	e13ffd17 	ldw	r4,-12(fp)
    12d0:	01400984 	movi	r5,38
    12d4:	180d883a 	mov	r6,r3
    12d8:	01c00a04 	movi	r7,40
    12dc:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    12e0:	e0bffd17 	ldw	r2,-12(fp)
    12e4:	10c00084 	addi	r3,r2,2
    12e8:	d0a00d0b 	ldhu	r2,-32716(gp)
    12ec:	10bfffcc 	andi	r2,r2,65535
    12f0:	10a0001c 	xori	r2,r2,32768
    12f4:	10a00004 	addi	r2,r2,-32768
    12f8:	d8800015 	stw	r2,0(sp)
    12fc:	e13ffd17 	ldw	r4,-12(fp)
    1300:	01400a04 	movi	r5,40
    1304:	180d883a 	mov	r6,r3
    1308:	01c00e84 	movi	r7,58
    130c:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    1310:	e0bffd17 	ldw	r2,-12(fp)
    1314:	10c00504 	addi	r3,r2,20
    1318:	d0a00d0b 	ldhu	r2,-32716(gp)
    131c:	10bfffcc 	andi	r2,r2,65535
    1320:	10a0001c 	xori	r2,r2,32768
    1324:	10a00004 	addi	r2,r2,-32768
    1328:	d8800015 	stw	r2,0(sp)
    132c:	e13ffd17 	ldw	r4,-12(fp)
    1330:	01400e84 	movi	r5,58
    1334:	180d883a 	mov	r6,r3
    1338:	01c00f04 	movi	r7,60
    133c:	000102c0 	call	102c <VGA_box>
    1340:	0001b206 	br	1a0c <draw_number+0x834>
	}else if(nummer == 3){
    1344:	e0bffe17 	ldw	r2,-8(fp)
    1348:	108000d8 	cmpnei	r2,r2,3
    134c:	1000321e 	bne	r2,zero,1418 <draw_number+0x240>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1350:	e0bffd17 	ldw	r2,-12(fp)
    1354:	10c00504 	addi	r3,r2,20
    1358:	d0a00d0b 	ldhu	r2,-32716(gp)
    135c:	10bfffcc 	andi	r2,r2,65535
    1360:	10a0001c 	xori	r2,r2,32768
    1364:	10a00004 	addi	r2,r2,-32768
    1368:	d8800015 	stw	r2,0(sp)
    136c:	e13ffd17 	ldw	r4,-12(fp)
    1370:	01400504 	movi	r5,20
    1374:	180d883a 	mov	r6,r3
    1378:	01c00584 	movi	r7,22
    137c:	000102c0 	call	102c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    1380:	e0bffd17 	ldw	r2,-12(fp)
    1384:	11000484 	addi	r4,r2,18
    1388:	e0bffd17 	ldw	r2,-12(fp)
    138c:	10c00504 	addi	r3,r2,20
    1390:	d0a00d0b 	ldhu	r2,-32716(gp)
    1394:	10bfffcc 	andi	r2,r2,65535
    1398:	10a0001c 	xori	r2,r2,32768
    139c:	10a00004 	addi	r2,r2,-32768
    13a0:	d8800015 	stw	r2,0(sp)
    13a4:	01400584 	movi	r5,22
    13a8:	180d883a 	mov	r6,r3
    13ac:	01c00f04 	movi	r7,60
    13b0:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    13b4:	e0bffd17 	ldw	r2,-12(fp)
    13b8:	10c00504 	addi	r3,r2,20
    13bc:	d0a00d0b 	ldhu	r2,-32716(gp)
    13c0:	10bfffcc 	andi	r2,r2,65535
    13c4:	10a0001c 	xori	r2,r2,32768
    13c8:	10a00004 	addi	r2,r2,-32768
    13cc:	d8800015 	stw	r2,0(sp)
    13d0:	e13ffd17 	ldw	r4,-12(fp)
    13d4:	014009c4 	movi	r5,39
    13d8:	180d883a 	mov	r6,r3
    13dc:	01c00a44 	movi	r7,41
    13e0:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    13e4:	e0bffd17 	ldw	r2,-12(fp)
    13e8:	10c00504 	addi	r3,r2,20
    13ec:	d0a00d0b 	ldhu	r2,-32716(gp)
    13f0:	10bfffcc 	andi	r2,r2,65535
    13f4:	10a0001c 	xori	r2,r2,32768
    13f8:	10a00004 	addi	r2,r2,-32768
    13fc:	d8800015 	stw	r2,0(sp)
    1400:	e13ffd17 	ldw	r4,-12(fp)
    1404:	01400e84 	movi	r5,58
    1408:	180d883a 	mov	r6,r3
    140c:	01c00f04 	movi	r7,60
    1410:	000102c0 	call	102c <VGA_box>
    1414:	00017d06 	br	1a0c <draw_number+0x834>
	}else if(nummer == 4){
    1418:	e0bffe17 	ldw	r2,-8(fp)
    141c:	10800118 	cmpnei	r2,r2,4
    1420:	1000261e 	bne	r2,zero,14bc <draw_number+0x2e4>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1424:	e0bffd17 	ldw	r2,-12(fp)
    1428:	10c00084 	addi	r3,r2,2
    142c:	d0a00d0b 	ldhu	r2,-32716(gp)
    1430:	10bfffcc 	andi	r2,r2,65535
    1434:	10a0001c 	xori	r2,r2,32768
    1438:	10a00004 	addi	r2,r2,-32768
    143c:	d8800015 	stw	r2,0(sp)
    1440:	e13ffd17 	ldw	r4,-12(fp)
    1444:	01400504 	movi	r5,20
    1448:	180d883a 	mov	r6,r3
    144c:	01c00a04 	movi	r7,40
    1450:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1454:	e0bffd17 	ldw	r2,-12(fp)
    1458:	10c00504 	addi	r3,r2,20
    145c:	d0a00d0b 	ldhu	r2,-32716(gp)
    1460:	10bfffcc 	andi	r2,r2,65535
    1464:	10a0001c 	xori	r2,r2,32768
    1468:	10a00004 	addi	r2,r2,-32768
    146c:	d8800015 	stw	r2,0(sp)
    1470:	e13ffd17 	ldw	r4,-12(fp)
    1474:	014009c4 	movi	r5,39
    1478:	180d883a 	mov	r6,r3
    147c:	01c00a44 	movi	r7,41
    1480:	000102c0 	call	102c <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1484:	e0bffd17 	ldw	r2,-12(fp)
    1488:	11000484 	addi	r4,r2,18
    148c:	e0bffd17 	ldw	r2,-12(fp)
    1490:	10c00504 	addi	r3,r2,20
    1494:	d0a00d0b 	ldhu	r2,-32716(gp)
    1498:	10bfffcc 	andi	r2,r2,65535
    149c:	10a0001c 	xori	r2,r2,32768
    14a0:	10a00004 	addi	r2,r2,-32768
    14a4:	d8800015 	stw	r2,0(sp)
    14a8:	01400504 	movi	r5,20
    14ac:	180d883a 	mov	r6,r3
    14b0:	01c00f04 	movi	r7,60
    14b4:	000102c0 	call	102c <VGA_box>
    14b8:	00015406 	br	1a0c <draw_number+0x834>
	}else if(nummer == 5){
    14bc:	e0bffe17 	ldw	r2,-8(fp)
    14c0:	10800158 	cmpnei	r2,r2,5
    14c4:	10003e1e 	bne	r2,zero,15c0 <draw_number+0x3e8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    14c8:	e0bffd17 	ldw	r2,-12(fp)
    14cc:	10c00504 	addi	r3,r2,20
    14d0:	d0a00d0b 	ldhu	r2,-32716(gp)
    14d4:	10bfffcc 	andi	r2,r2,65535
    14d8:	10a0001c 	xori	r2,r2,32768
    14dc:	10a00004 	addi	r2,r2,-32768
    14e0:	d8800015 	stw	r2,0(sp)
    14e4:	e13ffd17 	ldw	r4,-12(fp)
    14e8:	01400504 	movi	r5,20
    14ec:	180d883a 	mov	r6,r3
    14f0:	01c00584 	movi	r7,22
    14f4:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    14f8:	e0bffd17 	ldw	r2,-12(fp)
    14fc:	10c00084 	addi	r3,r2,2
    1500:	d0a00d0b 	ldhu	r2,-32716(gp)
    1504:	10bfffcc 	andi	r2,r2,65535
    1508:	10a0001c 	xori	r2,r2,32768
    150c:	10a00004 	addi	r2,r2,-32768
    1510:	d8800015 	stw	r2,0(sp)
    1514:	e13ffd17 	ldw	r4,-12(fp)
    1518:	01400584 	movi	r5,22
    151c:	180d883a 	mov	r6,r3
    1520:	01c00984 	movi	r7,38
    1524:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1528:	e0bffd17 	ldw	r2,-12(fp)
    152c:	10c00504 	addi	r3,r2,20
    1530:	d0a00d0b 	ldhu	r2,-32716(gp)
    1534:	10bfffcc 	andi	r2,r2,65535
    1538:	10a0001c 	xori	r2,r2,32768
    153c:	10a00004 	addi	r2,r2,-32768
    1540:	d8800015 	stw	r2,0(sp)
    1544:	e13ffd17 	ldw	r4,-12(fp)
    1548:	01400984 	movi	r5,38
    154c:	180d883a 	mov	r6,r3
    1550:	01c00a04 	movi	r7,40
    1554:	000102c0 	call	102c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    1558:	e0bffd17 	ldw	r2,-12(fp)
    155c:	11000484 	addi	r4,r2,18
    1560:	e0bffd17 	ldw	r2,-12(fp)
    1564:	10c00504 	addi	r3,r2,20
    1568:	d0a00d0b 	ldhu	r2,-32716(gp)
    156c:	10bfffcc 	andi	r2,r2,65535
    1570:	10a0001c 	xori	r2,r2,32768
    1574:	10a00004 	addi	r2,r2,-32768
    1578:	d8800015 	stw	r2,0(sp)
    157c:	01400a04 	movi	r5,40
    1580:	180d883a 	mov	r6,r3
    1584:	01c00e84 	movi	r7,58
    1588:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    158c:	e0bffd17 	ldw	r2,-12(fp)
    1590:	10c00504 	addi	r3,r2,20
    1594:	d0a00d0b 	ldhu	r2,-32716(gp)
    1598:	10bfffcc 	andi	r2,r2,65535
    159c:	10a0001c 	xori	r2,r2,32768
    15a0:	10a00004 	addi	r2,r2,-32768
    15a4:	d8800015 	stw	r2,0(sp)
    15a8:	e13ffd17 	ldw	r4,-12(fp)
    15ac:	01400e84 	movi	r5,58
    15b0:	180d883a 	mov	r6,r3
    15b4:	01c00f04 	movi	r7,60
    15b8:	000102c0 	call	102c <VGA_box>
    15bc:	00011306 	br	1a0c <draw_number+0x834>
	}else if(nummer == 6){
    15c0:	e0bffe17 	ldw	r2,-8(fp)
    15c4:	10800198 	cmpnei	r2,r2,6
    15c8:	10003e1e 	bne	r2,zero,16c4 <draw_number+0x4ec>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    15cc:	e0bffd17 	ldw	r2,-12(fp)
    15d0:	10c00084 	addi	r3,r2,2
    15d4:	d0a00d0b 	ldhu	r2,-32716(gp)
    15d8:	10bfffcc 	andi	r2,r2,65535
    15dc:	10a0001c 	xori	r2,r2,32768
    15e0:	10a00004 	addi	r2,r2,-32768
    15e4:	d8800015 	stw	r2,0(sp)
    15e8:	e13ffd17 	ldw	r4,-12(fp)
    15ec:	01400504 	movi	r5,20
    15f0:	180d883a 	mov	r6,r3
    15f4:	01c00f04 	movi	r7,60
    15f8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    15fc:	e0bffd17 	ldw	r2,-12(fp)
    1600:	10c00504 	addi	r3,r2,20
    1604:	d0a00d0b 	ldhu	r2,-32716(gp)
    1608:	10bfffcc 	andi	r2,r2,65535
    160c:	10a0001c 	xori	r2,r2,32768
    1610:	10a00004 	addi	r2,r2,-32768
    1614:	d8800015 	stw	r2,0(sp)
    1618:	e13ffd17 	ldw	r4,-12(fp)
    161c:	01400504 	movi	r5,20
    1620:	180d883a 	mov	r6,r3
    1624:	01c00584 	movi	r7,22
    1628:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    162c:	e0bffd17 	ldw	r2,-12(fp)
    1630:	10c00504 	addi	r3,r2,20
    1634:	d0a00d0b 	ldhu	r2,-32716(gp)
    1638:	10bfffcc 	andi	r2,r2,65535
    163c:	10a0001c 	xori	r2,r2,32768
    1640:	10a00004 	addi	r2,r2,-32768
    1644:	d8800015 	stw	r2,0(sp)
    1648:	e13ffd17 	ldw	r4,-12(fp)
    164c:	01400e84 	movi	r5,58
    1650:	180d883a 	mov	r6,r3
    1654:	01c00f04 	movi	r7,60
    1658:	000102c0 	call	102c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    165c:	e0bffd17 	ldw	r2,-12(fp)
    1660:	11000484 	addi	r4,r2,18
    1664:	e0bffd17 	ldw	r2,-12(fp)
    1668:	10c00504 	addi	r3,r2,20
    166c:	d0a00d0b 	ldhu	r2,-32716(gp)
    1670:	10bfffcc 	andi	r2,r2,65535
    1674:	10a0001c 	xori	r2,r2,32768
    1678:	10a00004 	addi	r2,r2,-32768
    167c:	d8800015 	stw	r2,0(sp)
    1680:	01400a04 	movi	r5,40
    1684:	180d883a 	mov	r6,r3
    1688:	01c00e84 	movi	r7,58
    168c:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1690:	e0bffd17 	ldw	r2,-12(fp)
    1694:	10c00504 	addi	r3,r2,20
    1698:	d0a00d0b 	ldhu	r2,-32716(gp)
    169c:	10bfffcc 	andi	r2,r2,65535
    16a0:	10a0001c 	xori	r2,r2,32768
    16a4:	10a00004 	addi	r2,r2,-32768
    16a8:	d8800015 	stw	r2,0(sp)
    16ac:	e13ffd17 	ldw	r4,-12(fp)
    16b0:	014009c4 	movi	r5,39
    16b4:	180d883a 	mov	r6,r3
    16b8:	01c00a44 	movi	r7,41
    16bc:	000102c0 	call	102c <VGA_box>
    16c0:	0000d206 	br	1a0c <draw_number+0x834>
	}else if(nummer == 7){
    16c4:	e0bffe17 	ldw	r2,-8(fp)
    16c8:	108001d8 	cmpnei	r2,r2,7
    16cc:	10001a1e 	bne	r2,zero,1738 <draw_number+0x560>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    16d0:	e0bffd17 	ldw	r2,-12(fp)
    16d4:	11000484 	addi	r4,r2,18
    16d8:	e0bffd17 	ldw	r2,-12(fp)
    16dc:	10c00504 	addi	r3,r2,20
    16e0:	d0a00d0b 	ldhu	r2,-32716(gp)
    16e4:	10bfffcc 	andi	r2,r2,65535
    16e8:	10a0001c 	xori	r2,r2,32768
    16ec:	10a00004 	addi	r2,r2,-32768
    16f0:	d8800015 	stw	r2,0(sp)
    16f4:	01400504 	movi	r5,20
    16f8:	180d883a 	mov	r6,r3
    16fc:	01c00f04 	movi	r7,60
    1700:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1704:	e0bffd17 	ldw	r2,-12(fp)
    1708:	10c00504 	addi	r3,r2,20
    170c:	d0a00d0b 	ldhu	r2,-32716(gp)
    1710:	10bfffcc 	andi	r2,r2,65535
    1714:	10a0001c 	xori	r2,r2,32768
    1718:	10a00004 	addi	r2,r2,-32768
    171c:	d8800015 	stw	r2,0(sp)
    1720:	e13ffd17 	ldw	r4,-12(fp)
    1724:	01400504 	movi	r5,20
    1728:	180d883a 	mov	r6,r3
    172c:	01c00584 	movi	r7,22
    1730:	000102c0 	call	102c <VGA_box>
    1734:	0000b506 	br	1a0c <draw_number+0x834>
	}else if(nummer == 8){
    1738:	e0bffe17 	ldw	r2,-8(fp)
    173c:	10800218 	cmpnei	r2,r2,8
    1740:	10003e1e 	bne	r2,zero,183c <draw_number+0x664>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1744:	e0bffd17 	ldw	r2,-12(fp)
    1748:	11000484 	addi	r4,r2,18
    174c:	e0bffd17 	ldw	r2,-12(fp)
    1750:	10c00504 	addi	r3,r2,20
    1754:	d0a00d0b 	ldhu	r2,-32716(gp)
    1758:	10bfffcc 	andi	r2,r2,65535
    175c:	10a0001c 	xori	r2,r2,32768
    1760:	10a00004 	addi	r2,r2,-32768
    1764:	d8800015 	stw	r2,0(sp)
    1768:	01400504 	movi	r5,20
    176c:	180d883a 	mov	r6,r3
    1770:	01c00f04 	movi	r7,60
    1774:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1778:	e0bffd17 	ldw	r2,-12(fp)
    177c:	10c00084 	addi	r3,r2,2
    1780:	d0a00d0b 	ldhu	r2,-32716(gp)
    1784:	10bfffcc 	andi	r2,r2,65535
    1788:	10a0001c 	xori	r2,r2,32768
    178c:	10a00004 	addi	r2,r2,-32768
    1790:	d8800015 	stw	r2,0(sp)
    1794:	e13ffd17 	ldw	r4,-12(fp)
    1798:	01400504 	movi	r5,20
    179c:	180d883a 	mov	r6,r3
    17a0:	01c00f04 	movi	r7,60
    17a4:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    17a8:	e0bffd17 	ldw	r2,-12(fp)
    17ac:	10c00504 	addi	r3,r2,20
    17b0:	d0a00d0b 	ldhu	r2,-32716(gp)
    17b4:	10bfffcc 	andi	r2,r2,65535
    17b8:	10a0001c 	xori	r2,r2,32768
    17bc:	10a00004 	addi	r2,r2,-32768
    17c0:	d8800015 	stw	r2,0(sp)
    17c4:	e13ffd17 	ldw	r4,-12(fp)
    17c8:	01400504 	movi	r5,20
    17cc:	180d883a 	mov	r6,r3
    17d0:	01c00584 	movi	r7,22
    17d4:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    17d8:	e0bffd17 	ldw	r2,-12(fp)
    17dc:	10c00504 	addi	r3,r2,20
    17e0:	d0a00d0b 	ldhu	r2,-32716(gp)
    17e4:	10bfffcc 	andi	r2,r2,65535
    17e8:	10a0001c 	xori	r2,r2,32768
    17ec:	10a00004 	addi	r2,r2,-32768
    17f0:	d8800015 	stw	r2,0(sp)
    17f4:	e13ffd17 	ldw	r4,-12(fp)
    17f8:	014009c4 	movi	r5,39
    17fc:	180d883a 	mov	r6,r3
    1800:	01c00a44 	movi	r7,41
    1804:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1808:	e0bffd17 	ldw	r2,-12(fp)
    180c:	10c00504 	addi	r3,r2,20
    1810:	d0a00d0b 	ldhu	r2,-32716(gp)
    1814:	10bfffcc 	andi	r2,r2,65535
    1818:	10a0001c 	xori	r2,r2,32768
    181c:	10a00004 	addi	r2,r2,-32768
    1820:	d8800015 	stw	r2,0(sp)
    1824:	e13ffd17 	ldw	r4,-12(fp)
    1828:	01400e84 	movi	r5,58
    182c:	180d883a 	mov	r6,r3
    1830:	01c00f04 	movi	r7,60
    1834:	000102c0 	call	102c <VGA_box>
    1838:	00007406 	br	1a0c <draw_number+0x834>
	}else if(nummer == 9){
    183c:	e0bffe17 	ldw	r2,-8(fp)
    1840:	10800258 	cmpnei	r2,r2,9
    1844:	10003e1e 	bne	r2,zero,1940 <draw_number+0x768>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1848:	e0bffd17 	ldw	r2,-12(fp)
    184c:	11000484 	addi	r4,r2,18
    1850:	e0bffd17 	ldw	r2,-12(fp)
    1854:	10c00504 	addi	r3,r2,20
    1858:	d0a00d0b 	ldhu	r2,-32716(gp)
    185c:	10bfffcc 	andi	r2,r2,65535
    1860:	10a0001c 	xori	r2,r2,32768
    1864:	10a00004 	addi	r2,r2,-32768
    1868:	d8800015 	stw	r2,0(sp)
    186c:	01400504 	movi	r5,20
    1870:	180d883a 	mov	r6,r3
    1874:	01c00f04 	movi	r7,60
    1878:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    187c:	e0bffd17 	ldw	r2,-12(fp)
    1880:	10c00084 	addi	r3,r2,2
    1884:	d0a00d0b 	ldhu	r2,-32716(gp)
    1888:	10bfffcc 	andi	r2,r2,65535
    188c:	10a0001c 	xori	r2,r2,32768
    1890:	10a00004 	addi	r2,r2,-32768
    1894:	d8800015 	stw	r2,0(sp)
    1898:	e13ffd17 	ldw	r4,-12(fp)
    189c:	01400504 	movi	r5,20
    18a0:	180d883a 	mov	r6,r3
    18a4:	01c00a04 	movi	r7,40
    18a8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    18ac:	e0bffd17 	ldw	r2,-12(fp)
    18b0:	10c00504 	addi	r3,r2,20
    18b4:	d0a00d0b 	ldhu	r2,-32716(gp)
    18b8:	10bfffcc 	andi	r2,r2,65535
    18bc:	10a0001c 	xori	r2,r2,32768
    18c0:	10a00004 	addi	r2,r2,-32768
    18c4:	d8800015 	stw	r2,0(sp)
    18c8:	e13ffd17 	ldw	r4,-12(fp)
    18cc:	01400504 	movi	r5,20
    18d0:	180d883a 	mov	r6,r3
    18d4:	01c00584 	movi	r7,22
    18d8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    18dc:	e0bffd17 	ldw	r2,-12(fp)
    18e0:	10c00504 	addi	r3,r2,20
    18e4:	d0a00d0b 	ldhu	r2,-32716(gp)
    18e8:	10bfffcc 	andi	r2,r2,65535
    18ec:	10a0001c 	xori	r2,r2,32768
    18f0:	10a00004 	addi	r2,r2,-32768
    18f4:	d8800015 	stw	r2,0(sp)
    18f8:	e13ffd17 	ldw	r4,-12(fp)
    18fc:	014009c4 	movi	r5,39
    1900:	180d883a 	mov	r6,r3
    1904:	01c00a44 	movi	r7,41
    1908:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    190c:	e0bffd17 	ldw	r2,-12(fp)
    1910:	10c00504 	addi	r3,r2,20
    1914:	d0a00d0b 	ldhu	r2,-32716(gp)
    1918:	10bfffcc 	andi	r2,r2,65535
    191c:	10a0001c 	xori	r2,r2,32768
    1920:	10a00004 	addi	r2,r2,-32768
    1924:	d8800015 	stw	r2,0(sp)
    1928:	e13ffd17 	ldw	r4,-12(fp)
    192c:	01400e84 	movi	r5,58
    1930:	180d883a 	mov	r6,r3
    1934:	01c00f04 	movi	r7,60
    1938:	000102c0 	call	102c <VGA_box>
    193c:	00003306 	br	1a0c <draw_number+0x834>
	}else if(nummer == 0){
    1940:	e0bffe17 	ldw	r2,-8(fp)
    1944:	1000311e 	bne	r2,zero,1a0c <draw_number+0x834>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1948:	e0bffd17 	ldw	r2,-12(fp)
    194c:	11000484 	addi	r4,r2,18
    1950:	e0bffd17 	ldw	r2,-12(fp)
    1954:	10c00504 	addi	r3,r2,20
    1958:	d0a00d0b 	ldhu	r2,-32716(gp)
    195c:	10bfffcc 	andi	r2,r2,65535
    1960:	10a0001c 	xori	r2,r2,32768
    1964:	10a00004 	addi	r2,r2,-32768
    1968:	d8800015 	stw	r2,0(sp)
    196c:	01400504 	movi	r5,20
    1970:	180d883a 	mov	r6,r3
    1974:	01c00f04 	movi	r7,60
    1978:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    197c:	e0bffd17 	ldw	r2,-12(fp)
    1980:	10c00084 	addi	r3,r2,2
    1984:	d0a00d0b 	ldhu	r2,-32716(gp)
    1988:	10bfffcc 	andi	r2,r2,65535
    198c:	10a0001c 	xori	r2,r2,32768
    1990:	10a00004 	addi	r2,r2,-32768
    1994:	d8800015 	stw	r2,0(sp)
    1998:	e13ffd17 	ldw	r4,-12(fp)
    199c:	01400504 	movi	r5,20
    19a0:	180d883a 	mov	r6,r3
    19a4:	01c00f04 	movi	r7,60
    19a8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    19ac:	e0bffd17 	ldw	r2,-12(fp)
    19b0:	10c00504 	addi	r3,r2,20
    19b4:	d0a00d0b 	ldhu	r2,-32716(gp)
    19b8:	10bfffcc 	andi	r2,r2,65535
    19bc:	10a0001c 	xori	r2,r2,32768
    19c0:	10a00004 	addi	r2,r2,-32768
    19c4:	d8800015 	stw	r2,0(sp)
    19c8:	e13ffd17 	ldw	r4,-12(fp)
    19cc:	01400504 	movi	r5,20
    19d0:	180d883a 	mov	r6,r3
    19d4:	01c00584 	movi	r7,22
    19d8:	000102c0 	call	102c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    19dc:	e0bffd17 	ldw	r2,-12(fp)
    19e0:	10c00504 	addi	r3,r2,20
    19e4:	d0a00d0b 	ldhu	r2,-32716(gp)
    19e8:	10bfffcc 	andi	r2,r2,65535
    19ec:	10a0001c 	xori	r2,r2,32768
    19f0:	10a00004 	addi	r2,r2,-32768
    19f4:	d8800015 	stw	r2,0(sp)
    19f8:	e13ffd17 	ldw	r4,-12(fp)
    19fc:	01400e84 	movi	r5,58
    1a00:	180d883a 	mov	r6,r3
    1a04:	01c00f04 	movi	r7,60
    1a08:	000102c0 	call	102c <VGA_box>
	}
}
    1a0c:	e037883a 	mov	sp,fp
    1a10:	dfc00117 	ldw	ra,4(sp)
    1a14:	df000017 	ldw	fp,0(sp)
    1a18:	dec00204 	addi	sp,sp,8
    1a1c:	f800283a 	ret

00001a20 <checkIDScore>:

int checkIDScore(int ID){
    1a20:	defffe04 	addi	sp,sp,-8
    1a24:	df000115 	stw	fp,4(sp)
    1a28:	df000104 	addi	fp,sp,4
    1a2c:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    1a30:	e0bfff17 	ldw	r2,-4(fp)
    1a34:	10800058 	cmpnei	r2,r2,1
    1a38:	1000021e 	bne	r2,zero,1a44 <checkIDScore+0x24>
		return 120;
    1a3c:	00801e04 	movi	r2,120
    1a40:	00000606 	br	1a5c <checkIDScore+0x3c>
	}else if(ID == 2){
    1a44:	e0bfff17 	ldw	r2,-4(fp)
    1a48:	10800098 	cmpnei	r2,r2,2
    1a4c:	1000021e 	bne	r2,zero,1a58 <checkIDScore+0x38>
		return 180;
    1a50:	00802d04 	movi	r2,180
    1a54:	00000106 	br	1a5c <checkIDScore+0x3c>

	}
	return 0;
    1a58:	0005883a 	mov	r2,zero
}
    1a5c:	e037883a 	mov	sp,fp
    1a60:	df000017 	ldw	fp,0(sp)
    1a64:	dec00104 	addi	sp,sp,4
    1a68:	f800283a 	ret

00001a6c <_puts_r>:
    1a6c:	defff604 	addi	sp,sp,-40
    1a70:	dc000715 	stw	r16,28(sp)
    1a74:	2021883a 	mov	r16,r4
    1a78:	2809883a 	mov	r4,r5
    1a7c:	dc400815 	stw	r17,32(sp)
    1a80:	dfc00915 	stw	ra,36(sp)
    1a84:	2823883a 	mov	r17,r5
    1a88:	0001b280 	call	1b28 <strlen>
    1a8c:	81400217 	ldw	r5,8(r16)
    1a90:	11000044 	addi	r4,r2,1
    1a94:	d8800115 	stw	r2,4(sp)
    1a98:	00800074 	movhi	r2,1
    1a9c:	2980030b 	ldhu	r6,12(r5)
    1aa0:	1083b204 	addi	r2,r2,3784
    1aa4:	d8800215 	stw	r2,8(sp)
    1aa8:	00800044 	movi	r2,1
    1aac:	d8800315 	stw	r2,12(sp)
    1ab0:	00800084 	movi	r2,2
    1ab4:	d8800515 	stw	r2,20(sp)
    1ab8:	dc400015 	stw	r17,0(sp)
    1abc:	d9000615 	stw	r4,24(sp)
    1ac0:	dec00415 	stw	sp,16(sp)
    1ac4:	3088000c 	andi	r2,r6,8192
    1ac8:	1000061e 	bne	r2,zero,1ae4 <_puts_r+0x78>
    1acc:	29001917 	ldw	r4,100(r5)
    1ad0:	00b7ffc4 	movi	r2,-8193
    1ad4:	31880014 	ori	r6,r6,8192
    1ad8:	2084703a 	and	r2,r4,r2
    1adc:	2980030d 	sth	r6,12(r5)
    1ae0:	28801915 	stw	r2,100(r5)
    1ae4:	8009883a 	mov	r4,r16
    1ae8:	d9800404 	addi	r6,sp,16
    1aec:	0001bc00 	call	1bc0 <__sfvwrite_r>
    1af0:	1000061e 	bne	r2,zero,1b0c <_puts_r+0xa0>
    1af4:	00800284 	movi	r2,10
    1af8:	dfc00917 	ldw	ra,36(sp)
    1afc:	dc400817 	ldw	r17,32(sp)
    1b00:	dc000717 	ldw	r16,28(sp)
    1b04:	dec00a04 	addi	sp,sp,40
    1b08:	f800283a 	ret
    1b0c:	00bfffc4 	movi	r2,-1
    1b10:	003ff906 	br	1af8 <__alt_mem_Flash_flash_data+0xf4001af8>

00001b14 <puts>:
    1b14:	00800074 	movhi	r2,1
    1b18:	108bef04 	addi	r2,r2,12220
    1b1c:	200b883a 	mov	r5,r4
    1b20:	11000017 	ldw	r4,0(r2)
    1b24:	0001a6c1 	jmpi	1a6c <_puts_r>

00001b28 <strlen>:
    1b28:	208000cc 	andi	r2,r4,3
    1b2c:	10002026 	beq	r2,zero,1bb0 <strlen+0x88>
    1b30:	20800007 	ldb	r2,0(r4)
    1b34:	10002026 	beq	r2,zero,1bb8 <strlen+0x90>
    1b38:	2005883a 	mov	r2,r4
    1b3c:	00000206 	br	1b48 <strlen+0x20>
    1b40:	10c00007 	ldb	r3,0(r2)
    1b44:	18001826 	beq	r3,zero,1ba8 <strlen+0x80>
    1b48:	10800044 	addi	r2,r2,1
    1b4c:	10c000cc 	andi	r3,r2,3
    1b50:	183ffb1e 	bne	r3,zero,1b40 <__alt_mem_Flash_flash_data+0xf4001b40>
    1b54:	10c00017 	ldw	r3,0(r2)
    1b58:	01ffbff4 	movhi	r7,65279
    1b5c:	39ffbfc4 	addi	r7,r7,-257
    1b60:	00ca303a 	nor	r5,zero,r3
    1b64:	01a02074 	movhi	r6,32897
    1b68:	19c7883a 	add	r3,r3,r7
    1b6c:	31a02004 	addi	r6,r6,-32640
    1b70:	1946703a 	and	r3,r3,r5
    1b74:	1986703a 	and	r3,r3,r6
    1b78:	1800091e 	bne	r3,zero,1ba0 <strlen+0x78>
    1b7c:	10800104 	addi	r2,r2,4
    1b80:	10c00017 	ldw	r3,0(r2)
    1b84:	19cb883a 	add	r5,r3,r7
    1b88:	00c6303a 	nor	r3,zero,r3
    1b8c:	28c6703a 	and	r3,r5,r3
    1b90:	1986703a 	and	r3,r3,r6
    1b94:	183ff926 	beq	r3,zero,1b7c <__alt_mem_Flash_flash_data+0xf4001b7c>
    1b98:	00000106 	br	1ba0 <strlen+0x78>
    1b9c:	10800044 	addi	r2,r2,1
    1ba0:	10c00007 	ldb	r3,0(r2)
    1ba4:	183ffd1e 	bne	r3,zero,1b9c <__alt_mem_Flash_flash_data+0xf4001b9c>
    1ba8:	1105c83a 	sub	r2,r2,r4
    1bac:	f800283a 	ret
    1bb0:	2005883a 	mov	r2,r4
    1bb4:	003fe706 	br	1b54 <__alt_mem_Flash_flash_data+0xf4001b54>
    1bb8:	0005883a 	mov	r2,zero
    1bbc:	f800283a 	ret

00001bc0 <__sfvwrite_r>:
    1bc0:	30800217 	ldw	r2,8(r6)
    1bc4:	10006726 	beq	r2,zero,1d64 <__sfvwrite_r+0x1a4>
    1bc8:	defff404 	addi	sp,sp,-48
    1bcc:	dd000615 	stw	r20,24(sp)
    1bd0:	2029883a 	mov	r20,r4
    1bd4:	2900030b 	ldhu	r4,12(r5)
    1bd8:	ddc00915 	stw	r23,36(sp)
    1bdc:	dc000215 	stw	r16,8(sp)
    1be0:	dfc00b15 	stw	ra,44(sp)
    1be4:	df000a15 	stw	fp,40(sp)
    1be8:	dd800815 	stw	r22,32(sp)
    1bec:	dd400715 	stw	r21,28(sp)
    1bf0:	dcc00515 	stw	r19,20(sp)
    1bf4:	dc800415 	stw	r18,16(sp)
    1bf8:	dc400315 	stw	r17,12(sp)
    1bfc:	2080020c 	andi	r2,r4,8
    1c00:	2821883a 	mov	r16,r5
    1c04:	302f883a 	mov	r23,r6
    1c08:	10002726 	beq	r2,zero,1ca8 <__sfvwrite_r+0xe8>
    1c0c:	28800417 	ldw	r2,16(r5)
    1c10:	10002526 	beq	r2,zero,1ca8 <__sfvwrite_r+0xe8>
    1c14:	2080008c 	andi	r2,r4,2
    1c18:	bc400017 	ldw	r17,0(r23)
    1c1c:	10002a26 	beq	r2,zero,1cc8 <__sfvwrite_r+0x108>
    1c20:	05600034 	movhi	r21,32768
    1c24:	0027883a 	mov	r19,zero
    1c28:	0025883a 	mov	r18,zero
    1c2c:	ad7f0004 	addi	r21,r21,-1024
    1c30:	980d883a 	mov	r6,r19
    1c34:	a009883a 	mov	r4,r20
    1c38:	90004626 	beq	r18,zero,1d54 <__sfvwrite_r+0x194>
    1c3c:	900f883a 	mov	r7,r18
    1c40:	81400717 	ldw	r5,28(r16)
    1c44:	ac80022e 	bgeu	r21,r18,1c50 <__sfvwrite_r+0x90>
    1c48:	01e00034 	movhi	r7,32768
    1c4c:	39ff0004 	addi	r7,r7,-1024
    1c50:	80800917 	ldw	r2,36(r16)
    1c54:	103ee83a 	callr	r2
    1c58:	0080520e 	bge	zero,r2,1da4 <__sfvwrite_r+0x1e4>
    1c5c:	b8c00217 	ldw	r3,8(r23)
    1c60:	98a7883a 	add	r19,r19,r2
    1c64:	90a5c83a 	sub	r18,r18,r2
    1c68:	1885c83a 	sub	r2,r3,r2
    1c6c:	b8800215 	stw	r2,8(r23)
    1c70:	103fef1e 	bne	r2,zero,1c30 <__alt_mem_Flash_flash_data+0xf4001c30>
    1c74:	0005883a 	mov	r2,zero
    1c78:	dfc00b17 	ldw	ra,44(sp)
    1c7c:	df000a17 	ldw	fp,40(sp)
    1c80:	ddc00917 	ldw	r23,36(sp)
    1c84:	dd800817 	ldw	r22,32(sp)
    1c88:	dd400717 	ldw	r21,28(sp)
    1c8c:	dd000617 	ldw	r20,24(sp)
    1c90:	dcc00517 	ldw	r19,20(sp)
    1c94:	dc800417 	ldw	r18,16(sp)
    1c98:	dc400317 	ldw	r17,12(sp)
    1c9c:	dc000217 	ldw	r16,8(sp)
    1ca0:	dec00c04 	addi	sp,sp,48
    1ca4:	f800283a 	ret
    1ca8:	a009883a 	mov	r4,r20
    1cac:	800b883a 	mov	r5,r16
    1cb0:	00031600 	call	3160 <__swsetup_r>
    1cb4:	1000ec1e 	bne	r2,zero,2068 <__sfvwrite_r+0x4a8>
    1cb8:	8100030b 	ldhu	r4,12(r16)
    1cbc:	bc400017 	ldw	r17,0(r23)
    1cc0:	2080008c 	andi	r2,r4,2
    1cc4:	103fd61e 	bne	r2,zero,1c20 <__alt_mem_Flash_flash_data+0xf4001c20>
    1cc8:	2080004c 	andi	r2,r4,1
    1ccc:	10003a1e 	bne	r2,zero,1db8 <__sfvwrite_r+0x1f8>
    1cd0:	0039883a 	mov	fp,zero
    1cd4:	0025883a 	mov	r18,zero
    1cd8:	90001a26 	beq	r18,zero,1d44 <__sfvwrite_r+0x184>
    1cdc:	2080800c 	andi	r2,r4,512
    1ce0:	85800217 	ldw	r22,8(r16)
    1ce4:	10007626 	beq	r2,zero,1ec0 <__sfvwrite_r+0x300>
    1ce8:	b027883a 	mov	r19,r22
    1cec:	95809436 	bltu	r18,r22,1f40 <__sfvwrite_r+0x380>
    1cf0:	2081200c 	andi	r2,r4,1152
    1cf4:	10009f1e 	bne	r2,zero,1f74 <__sfvwrite_r+0x3b4>
    1cf8:	81000017 	ldw	r4,0(r16)
    1cfc:	e00b883a 	mov	r5,fp
    1d00:	980d883a 	mov	r6,r19
    1d04:	0002a480 	call	2a48 <memmove>
    1d08:	81000217 	ldw	r4,8(r16)
    1d0c:	81400017 	ldw	r5,0(r16)
    1d10:	9005883a 	mov	r2,r18
    1d14:	2587c83a 	sub	r3,r4,r22
    1d18:	2ce7883a 	add	r19,r5,r19
    1d1c:	80c00215 	stw	r3,8(r16)
    1d20:	84c00015 	stw	r19,0(r16)
    1d24:	b8c00217 	ldw	r3,8(r23)
    1d28:	e0b9883a 	add	fp,fp,r2
    1d2c:	90a5c83a 	sub	r18,r18,r2
    1d30:	1885c83a 	sub	r2,r3,r2
    1d34:	b8800215 	stw	r2,8(r23)
    1d38:	103fce26 	beq	r2,zero,1c74 <__alt_mem_Flash_flash_data+0xf4001c74>
    1d3c:	8100030b 	ldhu	r4,12(r16)
    1d40:	903fe61e 	bne	r18,zero,1cdc <__alt_mem_Flash_flash_data+0xf4001cdc>
    1d44:	8f000017 	ldw	fp,0(r17)
    1d48:	8c800117 	ldw	r18,4(r17)
    1d4c:	8c400204 	addi	r17,r17,8
    1d50:	003fe106 	br	1cd8 <__alt_mem_Flash_flash_data+0xf4001cd8>
    1d54:	8cc00017 	ldw	r19,0(r17)
    1d58:	8c800117 	ldw	r18,4(r17)
    1d5c:	8c400204 	addi	r17,r17,8
    1d60:	003fb306 	br	1c30 <__alt_mem_Flash_flash_data+0xf4001c30>
    1d64:	0005883a 	mov	r2,zero
    1d68:	f800283a 	ret
    1d6c:	00a00034 	movhi	r2,32768
    1d70:	10bfffc4 	addi	r2,r2,-1
    1d74:	9009883a 	mov	r4,r18
    1d78:	1480012e 	bgeu	r2,r18,1d80 <__sfvwrite_r+0x1c0>
    1d7c:	1009883a 	mov	r4,r2
    1d80:	980b883a 	mov	r5,r19
    1d84:	00046200 	call	4620 <__divsi3>
    1d88:	81400717 	ldw	r5,28(r16)
    1d8c:	80c00917 	ldw	r3,36(r16)
    1d90:	988f383a 	mul	r7,r19,r2
    1d94:	a009883a 	mov	r4,r20
    1d98:	e00d883a 	mov	r6,fp
    1d9c:	183ee83a 	callr	r3
    1da0:	00bfe016 	blt	zero,r2,1d24 <__alt_mem_Flash_flash_data+0xf4001d24>
    1da4:	8080030b 	ldhu	r2,12(r16)
    1da8:	10801014 	ori	r2,r2,64
    1dac:	8080030d 	sth	r2,12(r16)
    1db0:	00bfffc4 	movi	r2,-1
    1db4:	003fb006 	br	1c78 <__alt_mem_Flash_flash_data+0xf4001c78>
    1db8:	0027883a 	mov	r19,zero
    1dbc:	0011883a 	mov	r8,zero
    1dc0:	0039883a 	mov	fp,zero
    1dc4:	0025883a 	mov	r18,zero
    1dc8:	90001f26 	beq	r18,zero,1e48 <__sfvwrite_r+0x288>
    1dcc:	40006026 	beq	r8,zero,1f50 <__sfvwrite_r+0x390>
    1dd0:	982b883a 	mov	r21,r19
    1dd4:	94c0012e 	bgeu	r18,r19,1ddc <__sfvwrite_r+0x21c>
    1dd8:	902b883a 	mov	r21,r18
    1ddc:	81000017 	ldw	r4,0(r16)
    1de0:	80800417 	ldw	r2,16(r16)
    1de4:	a82d883a 	mov	r22,r21
    1de8:	81800217 	ldw	r6,8(r16)
    1dec:	81c00517 	ldw	r7,20(r16)
    1df0:	1100022e 	bgeu	r2,r4,1dfc <__sfvwrite_r+0x23c>
    1df4:	31c7883a 	add	r3,r6,r7
    1df8:	1d401816 	blt	r3,r21,1e5c <__sfvwrite_r+0x29c>
    1dfc:	a9c04416 	blt	r21,r7,1f10 <__sfvwrite_r+0x350>
    1e00:	80800917 	ldw	r2,36(r16)
    1e04:	81400717 	ldw	r5,28(r16)
    1e08:	a009883a 	mov	r4,r20
    1e0c:	da000115 	stw	r8,4(sp)
    1e10:	e00d883a 	mov	r6,fp
    1e14:	103ee83a 	callr	r2
    1e18:	102d883a 	mov	r22,r2
    1e1c:	da000117 	ldw	r8,4(sp)
    1e20:	00bfe00e 	bge	zero,r2,1da4 <__alt_mem_Flash_flash_data+0xf4001da4>
    1e24:	9da7c83a 	sub	r19,r19,r22
    1e28:	98001f26 	beq	r19,zero,1ea8 <__sfvwrite_r+0x2e8>
    1e2c:	b8800217 	ldw	r2,8(r23)
    1e30:	e5b9883a 	add	fp,fp,r22
    1e34:	95a5c83a 	sub	r18,r18,r22
    1e38:	15adc83a 	sub	r22,r2,r22
    1e3c:	bd800215 	stw	r22,8(r23)
    1e40:	b03f8c26 	beq	r22,zero,1c74 <__alt_mem_Flash_flash_data+0xf4001c74>
    1e44:	903fe11e 	bne	r18,zero,1dcc <__alt_mem_Flash_flash_data+0xf4001dcc>
    1e48:	8f000017 	ldw	fp,0(r17)
    1e4c:	8c800117 	ldw	r18,4(r17)
    1e50:	0011883a 	mov	r8,zero
    1e54:	8c400204 	addi	r17,r17,8
    1e58:	003fdb06 	br	1dc8 <__alt_mem_Flash_flash_data+0xf4001dc8>
    1e5c:	180d883a 	mov	r6,r3
    1e60:	e00b883a 	mov	r5,fp
    1e64:	da000115 	stw	r8,4(sp)
    1e68:	d8c00015 	stw	r3,0(sp)
    1e6c:	0002a480 	call	2a48 <memmove>
    1e70:	d8c00017 	ldw	r3,0(sp)
    1e74:	80800017 	ldw	r2,0(r16)
    1e78:	a009883a 	mov	r4,r20
    1e7c:	800b883a 	mov	r5,r16
    1e80:	10c5883a 	add	r2,r2,r3
    1e84:	80800015 	stw	r2,0(r16)
    1e88:	d8c00015 	stw	r3,0(sp)
    1e8c:	00034bc0 	call	34bc <_fflush_r>
    1e90:	d8c00017 	ldw	r3,0(sp)
    1e94:	da000117 	ldw	r8,4(sp)
    1e98:	103fc21e 	bne	r2,zero,1da4 <__alt_mem_Flash_flash_data+0xf4001da4>
    1e9c:	182d883a 	mov	r22,r3
    1ea0:	9da7c83a 	sub	r19,r19,r22
    1ea4:	983fe11e 	bne	r19,zero,1e2c <__alt_mem_Flash_flash_data+0xf4001e2c>
    1ea8:	a009883a 	mov	r4,r20
    1eac:	800b883a 	mov	r5,r16
    1eb0:	00034bc0 	call	34bc <_fflush_r>
    1eb4:	103fbb1e 	bne	r2,zero,1da4 <__alt_mem_Flash_flash_data+0xf4001da4>
    1eb8:	0011883a 	mov	r8,zero
    1ebc:	003fdb06 	br	1e2c <__alt_mem_Flash_flash_data+0xf4001e2c>
    1ec0:	81000017 	ldw	r4,0(r16)
    1ec4:	80800417 	ldw	r2,16(r16)
    1ec8:	11000236 	bltu	r2,r4,1ed4 <__sfvwrite_r+0x314>
    1ecc:	84c00517 	ldw	r19,20(r16)
    1ed0:	94ffa62e 	bgeu	r18,r19,1d6c <__alt_mem_Flash_flash_data+0xf4001d6c>
    1ed4:	9027883a 	mov	r19,r18
    1ed8:	b480012e 	bgeu	r22,r18,1ee0 <__sfvwrite_r+0x320>
    1edc:	b027883a 	mov	r19,r22
    1ee0:	e00b883a 	mov	r5,fp
    1ee4:	980d883a 	mov	r6,r19
    1ee8:	0002a480 	call	2a48 <memmove>
    1eec:	80800217 	ldw	r2,8(r16)
    1ef0:	80c00017 	ldw	r3,0(r16)
    1ef4:	14c5c83a 	sub	r2,r2,r19
    1ef8:	1cc7883a 	add	r3,r3,r19
    1efc:	80800215 	stw	r2,8(r16)
    1f00:	80c00015 	stw	r3,0(r16)
    1f04:	10004326 	beq	r2,zero,2014 <__sfvwrite_r+0x454>
    1f08:	9805883a 	mov	r2,r19
    1f0c:	003f8506 	br	1d24 <__alt_mem_Flash_flash_data+0xf4001d24>
    1f10:	a80d883a 	mov	r6,r21
    1f14:	e00b883a 	mov	r5,fp
    1f18:	da000115 	stw	r8,4(sp)
    1f1c:	0002a480 	call	2a48 <memmove>
    1f20:	80800217 	ldw	r2,8(r16)
    1f24:	80c00017 	ldw	r3,0(r16)
    1f28:	da000117 	ldw	r8,4(sp)
    1f2c:	1545c83a 	sub	r2,r2,r21
    1f30:	1d6b883a 	add	r21,r3,r21
    1f34:	80800215 	stw	r2,8(r16)
    1f38:	85400015 	stw	r21,0(r16)
    1f3c:	003fb906 	br	1e24 <__alt_mem_Flash_flash_data+0xf4001e24>
    1f40:	81000017 	ldw	r4,0(r16)
    1f44:	902d883a 	mov	r22,r18
    1f48:	9027883a 	mov	r19,r18
    1f4c:	003f6b06 	br	1cfc <__alt_mem_Flash_flash_data+0xf4001cfc>
    1f50:	e009883a 	mov	r4,fp
    1f54:	01400284 	movi	r5,10
    1f58:	900d883a 	mov	r6,r18
    1f5c:	00028280 	call	2828 <memchr>
    1f60:	10003e26 	beq	r2,zero,205c <__sfvwrite_r+0x49c>
    1f64:	10800044 	addi	r2,r2,1
    1f68:	1727c83a 	sub	r19,r2,fp
    1f6c:	02000044 	movi	r8,1
    1f70:	003f9706 	br	1dd0 <__alt_mem_Flash_flash_data+0xf4001dd0>
    1f74:	80800517 	ldw	r2,20(r16)
    1f78:	81400417 	ldw	r5,16(r16)
    1f7c:	80c00017 	ldw	r3,0(r16)
    1f80:	10a7883a 	add	r19,r2,r2
    1f84:	9885883a 	add	r2,r19,r2
    1f88:	1026d7fa 	srli	r19,r2,31
    1f8c:	196bc83a 	sub	r21,r3,r5
    1f90:	a9800044 	addi	r6,r21,1
    1f94:	9885883a 	add	r2,r19,r2
    1f98:	1027d07a 	srai	r19,r2,1
    1f9c:	3485883a 	add	r2,r6,r18
    1fa0:	980d883a 	mov	r6,r19
    1fa4:	9880022e 	bgeu	r19,r2,1fb0 <__sfvwrite_r+0x3f0>
    1fa8:	1027883a 	mov	r19,r2
    1fac:	100d883a 	mov	r6,r2
    1fb0:	2101000c 	andi	r4,r4,1024
    1fb4:	20001c26 	beq	r4,zero,2028 <__sfvwrite_r+0x468>
    1fb8:	a009883a 	mov	r4,r20
    1fbc:	300b883a 	mov	r5,r6
    1fc0:	00020800 	call	2080 <_malloc_r>
    1fc4:	102d883a 	mov	r22,r2
    1fc8:	10002926 	beq	r2,zero,2070 <__sfvwrite_r+0x4b0>
    1fcc:	81400417 	ldw	r5,16(r16)
    1fd0:	1009883a 	mov	r4,r2
    1fd4:	a80d883a 	mov	r6,r21
    1fd8:	00029100 	call	2910 <memcpy>
    1fdc:	8080030b 	ldhu	r2,12(r16)
    1fe0:	00fedfc4 	movi	r3,-1153
    1fe4:	10c4703a 	and	r2,r2,r3
    1fe8:	10802014 	ori	r2,r2,128
    1fec:	8080030d 	sth	r2,12(r16)
    1ff0:	b549883a 	add	r4,r22,r21
    1ff4:	9d4bc83a 	sub	r5,r19,r21
    1ff8:	85800415 	stw	r22,16(r16)
    1ffc:	84c00515 	stw	r19,20(r16)
    2000:	81000015 	stw	r4,0(r16)
    2004:	902d883a 	mov	r22,r18
    2008:	81400215 	stw	r5,8(r16)
    200c:	9027883a 	mov	r19,r18
    2010:	003f3a06 	br	1cfc <__alt_mem_Flash_flash_data+0xf4001cfc>
    2014:	a009883a 	mov	r4,r20
    2018:	800b883a 	mov	r5,r16
    201c:	00034bc0 	call	34bc <_fflush_r>
    2020:	103fb926 	beq	r2,zero,1f08 <__alt_mem_Flash_flash_data+0xf4001f08>
    2024:	003f5f06 	br	1da4 <__alt_mem_Flash_flash_data+0xf4001da4>
    2028:	a009883a 	mov	r4,r20
    202c:	0002ba40 	call	2ba4 <_realloc_r>
    2030:	102d883a 	mov	r22,r2
    2034:	103fee1e 	bne	r2,zero,1ff0 <__alt_mem_Flash_flash_data+0xf4001ff0>
    2038:	81400417 	ldw	r5,16(r16)
    203c:	a009883a 	mov	r4,r20
    2040:	0003a0c0 	call	3a0c <_free_r>
    2044:	8080030b 	ldhu	r2,12(r16)
    2048:	00ffdfc4 	movi	r3,-129
    204c:	1884703a 	and	r2,r3,r2
    2050:	00c00304 	movi	r3,12
    2054:	a0c00015 	stw	r3,0(r20)
    2058:	003f5306 	br	1da8 <__alt_mem_Flash_flash_data+0xf4001da8>
    205c:	94c00044 	addi	r19,r18,1
    2060:	02000044 	movi	r8,1
    2064:	003f5a06 	br	1dd0 <__alt_mem_Flash_flash_data+0xf4001dd0>
    2068:	00bfffc4 	movi	r2,-1
    206c:	003f0206 	br	1c78 <__alt_mem_Flash_flash_data+0xf4001c78>
    2070:	00800304 	movi	r2,12
    2074:	a0800015 	stw	r2,0(r20)
    2078:	8080030b 	ldhu	r2,12(r16)
    207c:	003f4a06 	br	1da8 <__alt_mem_Flash_flash_data+0xf4001da8>

00002080 <_malloc_r>:
    2080:	defff504 	addi	sp,sp,-44
    2084:	dc800315 	stw	r18,12(sp)
    2088:	dfc00a15 	stw	ra,40(sp)
    208c:	df000915 	stw	fp,36(sp)
    2090:	ddc00815 	stw	r23,32(sp)
    2094:	dd800715 	stw	r22,28(sp)
    2098:	dd400615 	stw	r21,24(sp)
    209c:	dd000515 	stw	r20,20(sp)
    20a0:	dcc00415 	stw	r19,16(sp)
    20a4:	dc400215 	stw	r17,8(sp)
    20a8:	dc000115 	stw	r16,4(sp)
    20ac:	288002c4 	addi	r2,r5,11
    20b0:	00c00584 	movi	r3,22
    20b4:	2025883a 	mov	r18,r4
    20b8:	18802a2e 	bgeu	r3,r2,2164 <_malloc_r+0xe4>
    20bc:	047ffe04 	movi	r17,-8
    20c0:	1462703a 	and	r17,r2,r17
    20c4:	88009e16 	blt	r17,zero,2340 <_malloc_r+0x2c0>
    20c8:	89409d36 	bltu	r17,r5,2340 <_malloc_r+0x2c0>
    20cc:	00051bc0 	call	51bc <__malloc_lock>
    20d0:	00807dc4 	movi	r2,503
    20d4:	14402736 	bltu	r2,r17,2174 <_malloc_r+0xf4>
    20d8:	8806d0fa 	srli	r3,r17,3
    20dc:	04c00074 	movhi	r19,1
    20e0:	9cc57804 	addi	r19,r19,5600
    20e4:	18c5883a 	add	r2,r3,r3
    20e8:	1085883a 	add	r2,r2,r2
    20ec:	1085883a 	add	r2,r2,r2
    20f0:	9885883a 	add	r2,r19,r2
    20f4:	14000317 	ldw	r16,12(r2)
    20f8:	80814a26 	beq	r16,r2,2624 <_malloc_r+0x5a4>
    20fc:	80c00117 	ldw	r3,4(r16)
    2100:	81000317 	ldw	r4,12(r16)
    2104:	00bfff04 	movi	r2,-4
    2108:	1884703a 	and	r2,r3,r2
    210c:	81400217 	ldw	r5,8(r16)
    2110:	8085883a 	add	r2,r16,r2
    2114:	10c00117 	ldw	r3,4(r2)
    2118:	29000315 	stw	r4,12(r5)
    211c:	21400215 	stw	r5,8(r4)
    2120:	18c00054 	ori	r3,r3,1
    2124:	10c00115 	stw	r3,4(r2)
    2128:	9009883a 	mov	r4,r18
    212c:	00052dc0 	call	52dc <__malloc_unlock>
    2130:	80800204 	addi	r2,r16,8
    2134:	dfc00a17 	ldw	ra,40(sp)
    2138:	df000917 	ldw	fp,36(sp)
    213c:	ddc00817 	ldw	r23,32(sp)
    2140:	dd800717 	ldw	r22,28(sp)
    2144:	dd400617 	ldw	r21,24(sp)
    2148:	dd000517 	ldw	r20,20(sp)
    214c:	dcc00417 	ldw	r19,16(sp)
    2150:	dc800317 	ldw	r18,12(sp)
    2154:	dc400217 	ldw	r17,8(sp)
    2158:	dc000117 	ldw	r16,4(sp)
    215c:	dec00b04 	addi	sp,sp,44
    2160:	f800283a 	ret
    2164:	04400404 	movi	r17,16
    2168:	89407536 	bltu	r17,r5,2340 <_malloc_r+0x2c0>
    216c:	00051bc0 	call	51bc <__malloc_lock>
    2170:	003fd906 	br	20d8 <__alt_mem_Flash_flash_data+0xf40020d8>
    2174:	8806d27a 	srli	r3,r17,9
    2178:	18007526 	beq	r3,zero,2350 <_malloc_r+0x2d0>
    217c:	00800104 	movi	r2,4
    2180:	10c0ef36 	bltu	r2,r3,2540 <_malloc_r+0x4c0>
    2184:	8806d1ba 	srli	r3,r17,6
    2188:	19c00e04 	addi	r7,r3,56
    218c:	39cb883a 	add	r5,r7,r7
    2190:	04c00074 	movhi	r19,1
    2194:	294b883a 	add	r5,r5,r5
    2198:	9cc57804 	addi	r19,r19,5600
    219c:	294b883a 	add	r5,r5,r5
    21a0:	994b883a 	add	r5,r19,r5
    21a4:	2c000317 	ldw	r16,12(r5)
    21a8:	2c000e26 	beq	r5,r16,21e4 <_malloc_r+0x164>
    21ac:	80800117 	ldw	r2,4(r16)
    21b0:	01bfff04 	movi	r6,-4
    21b4:	010003c4 	movi	r4,15
    21b8:	1184703a 	and	r2,r2,r6
    21bc:	1447c83a 	sub	r3,r2,r17
    21c0:	20c00716 	blt	r4,r3,21e0 <_malloc_r+0x160>
    21c4:	1800650e 	bge	r3,zero,235c <_malloc_r+0x2dc>
    21c8:	84000317 	ldw	r16,12(r16)
    21cc:	2c000526 	beq	r5,r16,21e4 <_malloc_r+0x164>
    21d0:	80800117 	ldw	r2,4(r16)
    21d4:	1184703a 	and	r2,r2,r6
    21d8:	1447c83a 	sub	r3,r2,r17
    21dc:	20fff90e 	bge	r4,r3,21c4 <__alt_mem_Flash_flash_data+0xf40021c4>
    21e0:	39ffffc4 	addi	r7,r7,-1
    21e4:	38c00044 	addi	r3,r7,1
    21e8:	01800074 	movhi	r6,1
    21ec:	9c000417 	ldw	r16,16(r19)
    21f0:	31857804 	addi	r6,r6,5600
    21f4:	32400204 	addi	r9,r6,8
    21f8:	82410326 	beq	r16,r9,2608 <_malloc_r+0x588>
    21fc:	81000117 	ldw	r4,4(r16)
    2200:	00bfff04 	movi	r2,-4
    2204:	208e703a 	and	r7,r4,r2
    2208:	3c45c83a 	sub	r2,r7,r17
    220c:	010003c4 	movi	r4,15
    2210:	2080ee16 	blt	r4,r2,25cc <_malloc_r+0x54c>
    2214:	32400515 	stw	r9,20(r6)
    2218:	32400415 	stw	r9,16(r6)
    221c:	1000510e 	bge	r2,zero,2364 <_malloc_r+0x2e4>
    2220:	00807fc4 	movi	r2,511
    2224:	11c0ce36 	bltu	r2,r7,2560 <_malloc_r+0x4e0>
    2228:	3808d0fa 	srli	r4,r7,3
    222c:	01c00044 	movi	r7,1
    2230:	30800117 	ldw	r2,4(r6)
    2234:	210b883a 	add	r5,r4,r4
    2238:	294b883a 	add	r5,r5,r5
    223c:	2009d0ba 	srai	r4,r4,2
    2240:	294b883a 	add	r5,r5,r5
    2244:	298b883a 	add	r5,r5,r6
    2248:	2a000217 	ldw	r8,8(r5)
    224c:	3908983a 	sll	r4,r7,r4
    2250:	81400315 	stw	r5,12(r16)
    2254:	82000215 	stw	r8,8(r16)
    2258:	2088b03a 	or	r4,r4,r2
    225c:	2c000215 	stw	r16,8(r5)
    2260:	31000115 	stw	r4,4(r6)
    2264:	44000315 	stw	r16,12(r8)
    2268:	1805d0ba 	srai	r2,r3,2
    226c:	01400044 	movi	r5,1
    2270:	288a983a 	sll	r5,r5,r2
    2274:	21404336 	bltu	r4,r5,2384 <_malloc_r+0x304>
    2278:	2144703a 	and	r2,r4,r5
    227c:	10000a1e 	bne	r2,zero,22a8 <_malloc_r+0x228>
    2280:	00bfff04 	movi	r2,-4
    2284:	294b883a 	add	r5,r5,r5
    2288:	1886703a 	and	r3,r3,r2
    228c:	2144703a 	and	r2,r4,r5
    2290:	18c00104 	addi	r3,r3,4
    2294:	1000041e 	bne	r2,zero,22a8 <_malloc_r+0x228>
    2298:	294b883a 	add	r5,r5,r5
    229c:	2144703a 	and	r2,r4,r5
    22a0:	18c00104 	addi	r3,r3,4
    22a4:	103ffc26 	beq	r2,zero,2298 <__alt_mem_Flash_flash_data+0xf4002298>
    22a8:	023fff04 	movi	r8,-4
    22ac:	01c003c4 	movi	r7,15
    22b0:	18c5883a 	add	r2,r3,r3
    22b4:	1085883a 	add	r2,r2,r2
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	9895883a 	add	r10,r19,r2
    22c0:	52c00304 	addi	r11,r10,12
    22c4:	1819883a 	mov	r12,r3
    22c8:	5c000017 	ldw	r16,0(r11)
    22cc:	59bffd04 	addi	r6,r11,-12
    22d0:	8180041e 	bne	r16,r6,22e4 <_malloc_r+0x264>
    22d4:	0000ce06 	br	2610 <_malloc_r+0x590>
    22d8:	2000d70e 	bge	r4,zero,2638 <_malloc_r+0x5b8>
    22dc:	84000317 	ldw	r16,12(r16)
    22e0:	8180cb26 	beq	r16,r6,2610 <_malloc_r+0x590>
    22e4:	80800117 	ldw	r2,4(r16)
    22e8:	1204703a 	and	r2,r2,r8
    22ec:	1449c83a 	sub	r4,r2,r17
    22f0:	393ff90e 	bge	r7,r4,22d8 <__alt_mem_Flash_flash_data+0xf40022d8>
    22f4:	80800317 	ldw	r2,12(r16)
    22f8:	80c00217 	ldw	r3,8(r16)
    22fc:	89400054 	ori	r5,r17,1
    2300:	81400115 	stw	r5,4(r16)
    2304:	18800315 	stw	r2,12(r3)
    2308:	10c00215 	stw	r3,8(r2)
    230c:	8463883a 	add	r17,r16,r17
    2310:	9c400515 	stw	r17,20(r19)
    2314:	9c400415 	stw	r17,16(r19)
    2318:	20800054 	ori	r2,r4,1
    231c:	88800115 	stw	r2,4(r17)
    2320:	8a400315 	stw	r9,12(r17)
    2324:	8a400215 	stw	r9,8(r17)
    2328:	8923883a 	add	r17,r17,r4
    232c:	89000015 	stw	r4,0(r17)
    2330:	9009883a 	mov	r4,r18
    2334:	00052dc0 	call	52dc <__malloc_unlock>
    2338:	80800204 	addi	r2,r16,8
    233c:	003f7d06 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2340:	00800304 	movi	r2,12
    2344:	90800015 	stw	r2,0(r18)
    2348:	0005883a 	mov	r2,zero
    234c:	003f7906 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2350:	01401f84 	movi	r5,126
    2354:	01c00fc4 	movi	r7,63
    2358:	003f8d06 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    235c:	81000317 	ldw	r4,12(r16)
    2360:	003f6a06 	br	210c <__alt_mem_Flash_flash_data+0xf400210c>
    2364:	81c5883a 	add	r2,r16,r7
    2368:	10c00117 	ldw	r3,4(r2)
    236c:	9009883a 	mov	r4,r18
    2370:	18c00054 	ori	r3,r3,1
    2374:	10c00115 	stw	r3,4(r2)
    2378:	00052dc0 	call	52dc <__malloc_unlock>
    237c:	80800204 	addi	r2,r16,8
    2380:	003f6c06 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2384:	9c000217 	ldw	r16,8(r19)
    2388:	00bfff04 	movi	r2,-4
    238c:	85800117 	ldw	r22,4(r16)
    2390:	b0ac703a 	and	r22,r22,r2
    2394:	b4400336 	bltu	r22,r17,23a4 <_malloc_r+0x324>
    2398:	b445c83a 	sub	r2,r22,r17
    239c:	00c003c4 	movi	r3,15
    23a0:	18805d16 	blt	r3,r2,2518 <_malloc_r+0x498>
    23a4:	05c00074 	movhi	r23,1
    23a8:	00800074 	movhi	r2,1
    23ac:	bdcbf004 	addi	r23,r23,12224
    23b0:	1093e104 	addi	r2,r2,20356
    23b4:	15400017 	ldw	r21,0(r2)
    23b8:	b9000017 	ldw	r4,0(r23)
    23bc:	00ffffc4 	movi	r3,-1
    23c0:	858d883a 	add	r6,r16,r22
    23c4:	8d6b883a 	add	r21,r17,r21
    23c8:	20c0e426 	beq	r4,r3,275c <_malloc_r+0x6dc>
    23cc:	ad4403c4 	addi	r21,r21,4111
    23d0:	00fc0004 	movi	r3,-4096
    23d4:	a8ea703a 	and	r21,r21,r3
    23d8:	9009883a 	mov	r4,r18
    23dc:	a80b883a 	mov	r5,r21
    23e0:	d9800015 	stw	r6,0(sp)
    23e4:	000310c0 	call	310c <_sbrk_r>
    23e8:	00ffffc4 	movi	r3,-1
    23ec:	1029883a 	mov	r20,r2
    23f0:	d9800017 	ldw	r6,0(sp)
    23f4:	10c0a426 	beq	r2,r3,2688 <_malloc_r+0x608>
    23f8:	1180a236 	bltu	r2,r6,2684 <_malloc_r+0x604>
    23fc:	07000074 	movhi	fp,1
    2400:	e7140304 	addi	fp,fp,20492
    2404:	e0c00017 	ldw	r3,0(fp)
    2408:	a8c7883a 	add	r3,r21,r3
    240c:	e0c00015 	stw	r3,0(fp)
    2410:	3500da26 	beq	r6,r20,277c <_malloc_r+0x6fc>
    2414:	b9000017 	ldw	r4,0(r23)
    2418:	00bfffc4 	movi	r2,-1
    241c:	2080e426 	beq	r4,r2,27b0 <_malloc_r+0x730>
    2420:	a185c83a 	sub	r2,r20,r6
    2424:	1885883a 	add	r2,r3,r2
    2428:	e0800015 	stw	r2,0(fp)
    242c:	a0c001cc 	andi	r3,r20,7
    2430:	1800b526 	beq	r3,zero,2708 <_malloc_r+0x688>
    2434:	a0e9c83a 	sub	r20,r20,r3
    2438:	00840204 	movi	r2,4104
    243c:	a5000204 	addi	r20,r20,8
    2440:	10c7c83a 	sub	r3,r2,r3
    2444:	a545883a 	add	r2,r20,r21
    2448:	1083ffcc 	andi	r2,r2,4095
    244c:	18abc83a 	sub	r21,r3,r2
    2450:	9009883a 	mov	r4,r18
    2454:	a80b883a 	mov	r5,r21
    2458:	000310c0 	call	310c <_sbrk_r>
    245c:	00ffffc4 	movi	r3,-1
    2460:	10c0d026 	beq	r2,r3,27a4 <_malloc_r+0x724>
    2464:	1507c83a 	sub	r3,r2,r20
    2468:	a8c7883a 	add	r3,r21,r3
    246c:	18c00054 	ori	r3,r3,1
    2470:	e0800017 	ldw	r2,0(fp)
    2474:	9d000215 	stw	r20,8(r19)
    2478:	a0c00115 	stw	r3,4(r20)
    247c:	a887883a 	add	r3,r21,r2
    2480:	e0c00015 	stw	r3,0(fp)
    2484:	84c00e26 	beq	r16,r19,24c0 <_malloc_r+0x440>
    2488:	018003c4 	movi	r6,15
    248c:	3580a02e 	bgeu	r6,r22,2710 <_malloc_r+0x690>
    2490:	81400117 	ldw	r5,4(r16)
    2494:	013ffe04 	movi	r4,-8
    2498:	b0bffd04 	addi	r2,r22,-12
    249c:	1104703a 	and	r2,r2,r4
    24a0:	2900004c 	andi	r4,r5,1
    24a4:	1108b03a 	or	r4,r2,r4
    24a8:	81000115 	stw	r4,4(r16)
    24ac:	01400144 	movi	r5,5
    24b0:	8089883a 	add	r4,r16,r2
    24b4:	21400115 	stw	r5,4(r4)
    24b8:	21400215 	stw	r5,8(r4)
    24bc:	3080c036 	bltu	r6,r2,27c0 <_malloc_r+0x740>
    24c0:	00800074 	movhi	r2,1
    24c4:	1093e004 	addi	r2,r2,20352
    24c8:	11000017 	ldw	r4,0(r2)
    24cc:	20c0012e 	bgeu	r4,r3,24d4 <_malloc_r+0x454>
    24d0:	10c00015 	stw	r3,0(r2)
    24d4:	00800074 	movhi	r2,1
    24d8:	1093df04 	addi	r2,r2,20348
    24dc:	11000017 	ldw	r4,0(r2)
    24e0:	9c000217 	ldw	r16,8(r19)
    24e4:	20c0012e 	bgeu	r4,r3,24ec <_malloc_r+0x46c>
    24e8:	10c00015 	stw	r3,0(r2)
    24ec:	80c00117 	ldw	r3,4(r16)
    24f0:	00bfff04 	movi	r2,-4
    24f4:	1886703a 	and	r3,r3,r2
    24f8:	1c45c83a 	sub	r2,r3,r17
    24fc:	1c400236 	bltu	r3,r17,2508 <_malloc_r+0x488>
    2500:	00c003c4 	movi	r3,15
    2504:	18800416 	blt	r3,r2,2518 <_malloc_r+0x498>
    2508:	9009883a 	mov	r4,r18
    250c:	00052dc0 	call	52dc <__malloc_unlock>
    2510:	0005883a 	mov	r2,zero
    2514:	003f0706 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2518:	88c00054 	ori	r3,r17,1
    251c:	80c00115 	stw	r3,4(r16)
    2520:	8463883a 	add	r17,r16,r17
    2524:	10800054 	ori	r2,r2,1
    2528:	9c400215 	stw	r17,8(r19)
    252c:	88800115 	stw	r2,4(r17)
    2530:	9009883a 	mov	r4,r18
    2534:	00052dc0 	call	52dc <__malloc_unlock>
    2538:	80800204 	addi	r2,r16,8
    253c:	003efd06 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2540:	00800504 	movi	r2,20
    2544:	10c0482e 	bgeu	r2,r3,2668 <_malloc_r+0x5e8>
    2548:	00801504 	movi	r2,84
    254c:	10c06836 	bltu	r2,r3,26f0 <_malloc_r+0x670>
    2550:	8806d33a 	srli	r3,r17,12
    2554:	19c01b84 	addi	r7,r3,110
    2558:	39cb883a 	add	r5,r7,r7
    255c:	003f0c06 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    2560:	3804d27a 	srli	r2,r7,9
    2564:	01000104 	movi	r4,4
    2568:	2080422e 	bgeu	r4,r2,2674 <_malloc_r+0x5f4>
    256c:	01000504 	movi	r4,20
    2570:	20807c36 	bltu	r4,r2,2764 <_malloc_r+0x6e4>
    2574:	110016c4 	addi	r4,r2,91
    2578:	210b883a 	add	r5,r4,r4
    257c:	294b883a 	add	r5,r5,r5
    2580:	294b883a 	add	r5,r5,r5
    2584:	994b883a 	add	r5,r19,r5
    2588:	28800217 	ldw	r2,8(r5)
    258c:	02000074 	movhi	r8,1
    2590:	42057804 	addi	r8,r8,5600
    2594:	11406326 	beq	r2,r5,2724 <_malloc_r+0x6a4>
    2598:	01bfff04 	movi	r6,-4
    259c:	11000117 	ldw	r4,4(r2)
    25a0:	2188703a 	and	r4,r4,r6
    25a4:	3900022e 	bgeu	r7,r4,25b0 <_malloc_r+0x530>
    25a8:	10800217 	ldw	r2,8(r2)
    25ac:	28bffb1e 	bne	r5,r2,259c <__alt_mem_Flash_flash_data+0xf400259c>
    25b0:	11800317 	ldw	r6,12(r2)
    25b4:	99000117 	ldw	r4,4(r19)
    25b8:	81800315 	stw	r6,12(r16)
    25bc:	80800215 	stw	r2,8(r16)
    25c0:	34000215 	stw	r16,8(r6)
    25c4:	14000315 	stw	r16,12(r2)
    25c8:	003f2706 	br	2268 <__alt_mem_Flash_flash_data+0xf4002268>
    25cc:	88c00054 	ori	r3,r17,1
    25d0:	80c00115 	stw	r3,4(r16)
    25d4:	8463883a 	add	r17,r16,r17
    25d8:	34400515 	stw	r17,20(r6)
    25dc:	34400415 	stw	r17,16(r6)
    25e0:	10c00054 	ori	r3,r2,1
    25e4:	8a400315 	stw	r9,12(r17)
    25e8:	8a400215 	stw	r9,8(r17)
    25ec:	88c00115 	stw	r3,4(r17)
    25f0:	88a3883a 	add	r17,r17,r2
    25f4:	88800015 	stw	r2,0(r17)
    25f8:	9009883a 	mov	r4,r18
    25fc:	00052dc0 	call	52dc <__malloc_unlock>
    2600:	80800204 	addi	r2,r16,8
    2604:	003ecb06 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2608:	31000117 	ldw	r4,4(r6)
    260c:	003f1606 	br	2268 <__alt_mem_Flash_flash_data+0xf4002268>
    2610:	63000044 	addi	r12,r12,1
    2614:	608000cc 	andi	r2,r12,3
    2618:	5ac00204 	addi	r11,r11,8
    261c:	103f2a1e 	bne	r2,zero,22c8 <__alt_mem_Flash_flash_data+0xf40022c8>
    2620:	00002106 	br	26a8 <_malloc_r+0x628>
    2624:	80800204 	addi	r2,r16,8
    2628:	84000517 	ldw	r16,20(r16)
    262c:	143eb31e 	bne	r2,r16,20fc <__alt_mem_Flash_flash_data+0xf40020fc>
    2630:	18c00084 	addi	r3,r3,2
    2634:	003eec06 	br	21e8 <__alt_mem_Flash_flash_data+0xf40021e8>
    2638:	8085883a 	add	r2,r16,r2
    263c:	10c00117 	ldw	r3,4(r2)
    2640:	81000317 	ldw	r4,12(r16)
    2644:	81400217 	ldw	r5,8(r16)
    2648:	18c00054 	ori	r3,r3,1
    264c:	10c00115 	stw	r3,4(r2)
    2650:	29000315 	stw	r4,12(r5)
    2654:	21400215 	stw	r5,8(r4)
    2658:	9009883a 	mov	r4,r18
    265c:	00052dc0 	call	52dc <__malloc_unlock>
    2660:	80800204 	addi	r2,r16,8
    2664:	003eb306 	br	2134 <__alt_mem_Flash_flash_data+0xf4002134>
    2668:	19c016c4 	addi	r7,r3,91
    266c:	39cb883a 	add	r5,r7,r7
    2670:	003ec706 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    2674:	3804d1ba 	srli	r2,r7,6
    2678:	11000e04 	addi	r4,r2,56
    267c:	210b883a 	add	r5,r4,r4
    2680:	003fbe06 	br	257c <__alt_mem_Flash_flash_data+0xf400257c>
    2684:	84ff5d26 	beq	r16,r19,23fc <__alt_mem_Flash_flash_data+0xf40023fc>
    2688:	9c000217 	ldw	r16,8(r19)
    268c:	00bfff04 	movi	r2,-4
    2690:	80c00117 	ldw	r3,4(r16)
    2694:	1886703a 	and	r3,r3,r2
    2698:	003f9706 	br	24f8 <__alt_mem_Flash_flash_data+0xf40024f8>
    269c:	52800017 	ldw	r10,0(r10)
    26a0:	18ffffc4 	addi	r3,r3,-1
    26a4:	50805c1e 	bne	r10,r2,2818 <_malloc_r+0x798>
    26a8:	190000cc 	andi	r4,r3,3
    26ac:	50bffe04 	addi	r2,r10,-8
    26b0:	203ffa1e 	bne	r4,zero,269c <__alt_mem_Flash_flash_data+0xf400269c>
    26b4:	98800117 	ldw	r2,4(r19)
    26b8:	0146303a 	nor	r3,zero,r5
    26bc:	1884703a 	and	r2,r3,r2
    26c0:	98800115 	stw	r2,4(r19)
    26c4:	294b883a 	add	r5,r5,r5
    26c8:	117f2e36 	bltu	r2,r5,2384 <__alt_mem_Flash_flash_data+0xf4002384>
    26cc:	283f2d26 	beq	r5,zero,2384 <__alt_mem_Flash_flash_data+0xf4002384>
    26d0:	1146703a 	and	r3,r2,r5
    26d4:	1800521e 	bne	r3,zero,2820 <_malloc_r+0x7a0>
    26d8:	6007883a 	mov	r3,r12
    26dc:	294b883a 	add	r5,r5,r5
    26e0:	1148703a 	and	r4,r2,r5
    26e4:	18c00104 	addi	r3,r3,4
    26e8:	203ffc26 	beq	r4,zero,26dc <__alt_mem_Flash_flash_data+0xf40026dc>
    26ec:	003ef006 	br	22b0 <__alt_mem_Flash_flash_data+0xf40022b0>
    26f0:	00805504 	movi	r2,340
    26f4:	10c01336 	bltu	r2,r3,2744 <_malloc_r+0x6c4>
    26f8:	8806d3fa 	srli	r3,r17,15
    26fc:	19c01dc4 	addi	r7,r3,119
    2700:	39cb883a 	add	r5,r7,r7
    2704:	003ea206 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    2708:	00c40004 	movi	r3,4096
    270c:	003f4d06 	br	2444 <__alt_mem_Flash_flash_data+0xf4002444>
    2710:	00800044 	movi	r2,1
    2714:	a0800115 	stw	r2,4(r20)
    2718:	a021883a 	mov	r16,r20
    271c:	0007883a 	mov	r3,zero
    2720:	003f7506 	br	24f8 <__alt_mem_Flash_flash_data+0xf40024f8>
    2724:	200bd0ba 	srai	r5,r4,2
    2728:	01800044 	movi	r6,1
    272c:	41000117 	ldw	r4,4(r8)
    2730:	314a983a 	sll	r5,r6,r5
    2734:	100d883a 	mov	r6,r2
    2738:	2908b03a 	or	r4,r5,r4
    273c:	41000115 	stw	r4,4(r8)
    2740:	003f9d06 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2744:	00815504 	movi	r2,1364
    2748:	10c01336 	bltu	r2,r3,2798 <_malloc_r+0x718>
    274c:	8806d4ba 	srli	r3,r17,18
    2750:	19c01f04 	addi	r7,r3,124
    2754:	39cb883a 	add	r5,r7,r7
    2758:	003e8d06 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    275c:	ad400404 	addi	r21,r21,16
    2760:	003f1d06 	br	23d8 <__alt_mem_Flash_flash_data+0xf40023d8>
    2764:	01001504 	movi	r4,84
    2768:	20801c36 	bltu	r4,r2,27dc <_malloc_r+0x75c>
    276c:	3804d33a 	srli	r2,r7,12
    2770:	11001b84 	addi	r4,r2,110
    2774:	210b883a 	add	r5,r4,r4
    2778:	003f8006 	br	257c <__alt_mem_Flash_flash_data+0xf400257c>
    277c:	3083ffcc 	andi	r2,r6,4095
    2780:	103f241e 	bne	r2,zero,2414 <__alt_mem_Flash_flash_data+0xf4002414>
    2784:	99000217 	ldw	r4,8(r19)
    2788:	ad85883a 	add	r2,r21,r22
    278c:	10800054 	ori	r2,r2,1
    2790:	20800115 	stw	r2,4(r4)
    2794:	003f4a06 	br	24c0 <__alt_mem_Flash_flash_data+0xf40024c0>
    2798:	01403f04 	movi	r5,252
    279c:	01c01f84 	movi	r7,126
    27a0:	003e7b06 	br	2190 <__alt_mem_Flash_flash_data+0xf4002190>
    27a4:	00c00044 	movi	r3,1
    27a8:	002b883a 	mov	r21,zero
    27ac:	003f3006 	br	2470 <__alt_mem_Flash_flash_data+0xf4002470>
    27b0:	00800074 	movhi	r2,1
    27b4:	108bf004 	addi	r2,r2,12224
    27b8:	15000015 	stw	r20,0(r2)
    27bc:	003f1b06 	br	242c <__alt_mem_Flash_flash_data+0xf400242c>
    27c0:	9009883a 	mov	r4,r18
    27c4:	81400204 	addi	r5,r16,8
    27c8:	0003a0c0 	call	3a0c <_free_r>
    27cc:	00800074 	movhi	r2,1
    27d0:	10940304 	addi	r2,r2,20492
    27d4:	10c00017 	ldw	r3,0(r2)
    27d8:	003f3906 	br	24c0 <__alt_mem_Flash_flash_data+0xf40024c0>
    27dc:	01005504 	movi	r4,340
    27e0:	20800436 	bltu	r4,r2,27f4 <_malloc_r+0x774>
    27e4:	3804d3fa 	srli	r2,r7,15
    27e8:	11001dc4 	addi	r4,r2,119
    27ec:	210b883a 	add	r5,r4,r4
    27f0:	003f6206 	br	257c <__alt_mem_Flash_flash_data+0xf400257c>
    27f4:	01015504 	movi	r4,1364
    27f8:	20800436 	bltu	r4,r2,280c <_malloc_r+0x78c>
    27fc:	3804d4ba 	srli	r2,r7,18
    2800:	11001f04 	addi	r4,r2,124
    2804:	210b883a 	add	r5,r4,r4
    2808:	003f5c06 	br	257c <__alt_mem_Flash_flash_data+0xf400257c>
    280c:	01403f04 	movi	r5,252
    2810:	01001f84 	movi	r4,126
    2814:	003f5906 	br	257c <__alt_mem_Flash_flash_data+0xf400257c>
    2818:	98800117 	ldw	r2,4(r19)
    281c:	003fa906 	br	26c4 <__alt_mem_Flash_flash_data+0xf40026c4>
    2820:	6007883a 	mov	r3,r12
    2824:	003ea206 	br	22b0 <__alt_mem_Flash_flash_data+0xf40022b0>

00002828 <memchr>:
    2828:	208000cc 	andi	r2,r4,3
    282c:	280f883a 	mov	r7,r5
    2830:	10003526 	beq	r2,zero,2908 <memchr+0xe0>
    2834:	30bfffc4 	addi	r2,r6,-1
    2838:	30001b26 	beq	r6,zero,28a8 <memchr+0x80>
    283c:	21800003 	ldbu	r6,0(r4)
    2840:	28c03fcc 	andi	r3,r5,255
    2844:	30c01a26 	beq	r6,r3,28b0 <memchr+0x88>
    2848:	180d883a 	mov	r6,r3
    284c:	00000406 	br	2860 <memchr+0x38>
    2850:	10001526 	beq	r2,zero,28a8 <memchr+0x80>
    2854:	20c00003 	ldbu	r3,0(r4)
    2858:	10bfffc4 	addi	r2,r2,-1
    285c:	19801426 	beq	r3,r6,28b0 <memchr+0x88>
    2860:	21000044 	addi	r4,r4,1
    2864:	20c000cc 	andi	r3,r4,3
    2868:	183ff91e 	bne	r3,zero,2850 <__alt_mem_Flash_flash_data+0xf4002850>
    286c:	024000c4 	movi	r9,3
    2870:	48801136 	bltu	r9,r2,28b8 <memchr+0x90>
    2874:	10000c26 	beq	r2,zero,28a8 <memchr+0x80>
    2878:	20c00003 	ldbu	r3,0(r4)
    287c:	29403fcc 	andi	r5,r5,255
    2880:	19400b26 	beq	r3,r5,28b0 <memchr+0x88>
    2884:	20c00044 	addi	r3,r4,1
    2888:	2085883a 	add	r2,r4,r2
    288c:	39803fcc 	andi	r6,r7,255
    2890:	00000306 	br	28a0 <memchr+0x78>
    2894:	18c00044 	addi	r3,r3,1
    2898:	197fffc3 	ldbu	r5,-1(r3)
    289c:	29800426 	beq	r5,r6,28b0 <memchr+0x88>
    28a0:	1809883a 	mov	r4,r3
    28a4:	18bffb1e 	bne	r3,r2,2894 <__alt_mem_Flash_flash_data+0xf4002894>
    28a8:	0005883a 	mov	r2,zero
    28ac:	f800283a 	ret
    28b0:	2005883a 	mov	r2,r4
    28b4:	f800283a 	ret
    28b8:	28c03fcc 	andi	r3,r5,255
    28bc:	1810923a 	slli	r8,r3,8
    28c0:	02ffbff4 	movhi	r11,65279
    28c4:	02a02074 	movhi	r10,32897
    28c8:	40c6b03a 	or	r3,r8,r3
    28cc:	1810943a 	slli	r8,r3,16
    28d0:	5affbfc4 	addi	r11,r11,-257
    28d4:	52a02004 	addi	r10,r10,-32640
    28d8:	40d0b03a 	or	r8,r8,r3
    28dc:	20c00017 	ldw	r3,0(r4)
    28e0:	40c6f03a 	xor	r3,r8,r3
    28e4:	1acd883a 	add	r6,r3,r11
    28e8:	00c6303a 	nor	r3,zero,r3
    28ec:	30c6703a 	and	r3,r6,r3
    28f0:	1a86703a 	and	r3,r3,r10
    28f4:	183fdf1e 	bne	r3,zero,2874 <__alt_mem_Flash_flash_data+0xf4002874>
    28f8:	10bfff04 	addi	r2,r2,-4
    28fc:	21000104 	addi	r4,r4,4
    2900:	48bff636 	bltu	r9,r2,28dc <__alt_mem_Flash_flash_data+0xf40028dc>
    2904:	003fdb06 	br	2874 <__alt_mem_Flash_flash_data+0xf4002874>
    2908:	3005883a 	mov	r2,r6
    290c:	003fd706 	br	286c <__alt_mem_Flash_flash_data+0xf400286c>

00002910 <memcpy>:
    2910:	deffff04 	addi	sp,sp,-4
    2914:	dc000015 	stw	r16,0(sp)
    2918:	00c003c4 	movi	r3,15
    291c:	2005883a 	mov	r2,r4
    2920:	1980432e 	bgeu	r3,r6,2a30 <memcpy+0x120>
    2924:	2146b03a 	or	r3,r4,r5
    2928:	18c000cc 	andi	r3,r3,3
    292c:	1800421e 	bne	r3,zero,2a38 <memcpy+0x128>
    2930:	343ffc04 	addi	r16,r6,-16
    2934:	8020d13a 	srli	r16,r16,4
    2938:	28c00104 	addi	r3,r5,4
    293c:	23400104 	addi	r13,r4,4
    2940:	801e913a 	slli	r15,r16,4
    2944:	2b000204 	addi	r12,r5,8
    2948:	22c00204 	addi	r11,r4,8
    294c:	7bc00504 	addi	r15,r15,20
    2950:	2a800304 	addi	r10,r5,12
    2954:	22400304 	addi	r9,r4,12
    2958:	2bdf883a 	add	r15,r5,r15
    295c:	2811883a 	mov	r8,r5
    2960:	200f883a 	mov	r7,r4
    2964:	41000017 	ldw	r4,0(r8)
    2968:	39c00404 	addi	r7,r7,16
    296c:	18c00404 	addi	r3,r3,16
    2970:	393ffc15 	stw	r4,-16(r7)
    2974:	1bbffc17 	ldw	r14,-16(r3)
    2978:	6b400404 	addi	r13,r13,16
    297c:	5ac00404 	addi	r11,r11,16
    2980:	6bbffc15 	stw	r14,-16(r13)
    2984:	63800017 	ldw	r14,0(r12)
    2988:	4a400404 	addi	r9,r9,16
    298c:	42000404 	addi	r8,r8,16
    2990:	5bbffc15 	stw	r14,-16(r11)
    2994:	53800017 	ldw	r14,0(r10)
    2998:	63000404 	addi	r12,r12,16
    299c:	52800404 	addi	r10,r10,16
    29a0:	4bbffc15 	stw	r14,-16(r9)
    29a4:	1bffef1e 	bne	r3,r15,2964 <__alt_mem_Flash_flash_data+0xf4002964>
    29a8:	81c00044 	addi	r7,r16,1
    29ac:	380e913a 	slli	r7,r7,4
    29b0:	310003cc 	andi	r4,r6,15
    29b4:	02c000c4 	movi	r11,3
    29b8:	11c7883a 	add	r3,r2,r7
    29bc:	29cb883a 	add	r5,r5,r7
    29c0:	59001f2e 	bgeu	r11,r4,2a40 <memcpy+0x130>
    29c4:	1813883a 	mov	r9,r3
    29c8:	2811883a 	mov	r8,r5
    29cc:	200f883a 	mov	r7,r4
    29d0:	42800017 	ldw	r10,0(r8)
    29d4:	4a400104 	addi	r9,r9,4
    29d8:	39ffff04 	addi	r7,r7,-4
    29dc:	4abfff15 	stw	r10,-4(r9)
    29e0:	42000104 	addi	r8,r8,4
    29e4:	59fffa36 	bltu	r11,r7,29d0 <__alt_mem_Flash_flash_data+0xf40029d0>
    29e8:	213fff04 	addi	r4,r4,-4
    29ec:	2008d0ba 	srli	r4,r4,2
    29f0:	318000cc 	andi	r6,r6,3
    29f4:	21000044 	addi	r4,r4,1
    29f8:	2109883a 	add	r4,r4,r4
    29fc:	2109883a 	add	r4,r4,r4
    2a00:	1907883a 	add	r3,r3,r4
    2a04:	290b883a 	add	r5,r5,r4
    2a08:	30000626 	beq	r6,zero,2a24 <memcpy+0x114>
    2a0c:	198d883a 	add	r6,r3,r6
    2a10:	29c00003 	ldbu	r7,0(r5)
    2a14:	18c00044 	addi	r3,r3,1
    2a18:	29400044 	addi	r5,r5,1
    2a1c:	19ffffc5 	stb	r7,-1(r3)
    2a20:	19bffb1e 	bne	r3,r6,2a10 <__alt_mem_Flash_flash_data+0xf4002a10>
    2a24:	dc000017 	ldw	r16,0(sp)
    2a28:	dec00104 	addi	sp,sp,4
    2a2c:	f800283a 	ret
    2a30:	2007883a 	mov	r3,r4
    2a34:	003ff406 	br	2a08 <__alt_mem_Flash_flash_data+0xf4002a08>
    2a38:	2007883a 	mov	r3,r4
    2a3c:	003ff306 	br	2a0c <__alt_mem_Flash_flash_data+0xf4002a0c>
    2a40:	200d883a 	mov	r6,r4
    2a44:	003ff006 	br	2a08 <__alt_mem_Flash_flash_data+0xf4002a08>

00002a48 <memmove>:
    2a48:	2005883a 	mov	r2,r4
    2a4c:	29000b2e 	bgeu	r5,r4,2a7c <memmove+0x34>
    2a50:	298f883a 	add	r7,r5,r6
    2a54:	21c0092e 	bgeu	r4,r7,2a7c <memmove+0x34>
    2a58:	2187883a 	add	r3,r4,r6
    2a5c:	198bc83a 	sub	r5,r3,r6
    2a60:	30004b26 	beq	r6,zero,2b90 <memmove+0x148>
    2a64:	39ffffc4 	addi	r7,r7,-1
    2a68:	39000003 	ldbu	r4,0(r7)
    2a6c:	18ffffc4 	addi	r3,r3,-1
    2a70:	19000005 	stb	r4,0(r3)
    2a74:	197ffb1e 	bne	r3,r5,2a64 <__alt_mem_Flash_flash_data+0xf4002a64>
    2a78:	f800283a 	ret
    2a7c:	00c003c4 	movi	r3,15
    2a80:	1980412e 	bgeu	r3,r6,2b88 <memmove+0x140>
    2a84:	1146b03a 	or	r3,r2,r5
    2a88:	18c000cc 	andi	r3,r3,3
    2a8c:	1800411e 	bne	r3,zero,2b94 <memmove+0x14c>
    2a90:	33fffc04 	addi	r15,r6,-16
    2a94:	781ed13a 	srli	r15,r15,4
    2a98:	28c00104 	addi	r3,r5,4
    2a9c:	13400104 	addi	r13,r2,4
    2aa0:	781c913a 	slli	r14,r15,4
    2aa4:	2b000204 	addi	r12,r5,8
    2aa8:	12c00204 	addi	r11,r2,8
    2aac:	73800504 	addi	r14,r14,20
    2ab0:	2a800304 	addi	r10,r5,12
    2ab4:	12400304 	addi	r9,r2,12
    2ab8:	2b9d883a 	add	r14,r5,r14
    2abc:	2811883a 	mov	r8,r5
    2ac0:	100f883a 	mov	r7,r2
    2ac4:	41000017 	ldw	r4,0(r8)
    2ac8:	39c00404 	addi	r7,r7,16
    2acc:	18c00404 	addi	r3,r3,16
    2ad0:	393ffc15 	stw	r4,-16(r7)
    2ad4:	193ffc17 	ldw	r4,-16(r3)
    2ad8:	6b400404 	addi	r13,r13,16
    2adc:	5ac00404 	addi	r11,r11,16
    2ae0:	693ffc15 	stw	r4,-16(r13)
    2ae4:	61000017 	ldw	r4,0(r12)
    2ae8:	4a400404 	addi	r9,r9,16
    2aec:	42000404 	addi	r8,r8,16
    2af0:	593ffc15 	stw	r4,-16(r11)
    2af4:	51000017 	ldw	r4,0(r10)
    2af8:	63000404 	addi	r12,r12,16
    2afc:	52800404 	addi	r10,r10,16
    2b00:	493ffc15 	stw	r4,-16(r9)
    2b04:	1bbfef1e 	bne	r3,r14,2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2b08:	79000044 	addi	r4,r15,1
    2b0c:	2008913a 	slli	r4,r4,4
    2b10:	328003cc 	andi	r10,r6,15
    2b14:	02c000c4 	movi	r11,3
    2b18:	1107883a 	add	r3,r2,r4
    2b1c:	290b883a 	add	r5,r5,r4
    2b20:	5a801e2e 	bgeu	r11,r10,2b9c <memmove+0x154>
    2b24:	1813883a 	mov	r9,r3
    2b28:	2811883a 	mov	r8,r5
    2b2c:	500f883a 	mov	r7,r10
    2b30:	41000017 	ldw	r4,0(r8)
    2b34:	4a400104 	addi	r9,r9,4
    2b38:	39ffff04 	addi	r7,r7,-4
    2b3c:	493fff15 	stw	r4,-4(r9)
    2b40:	42000104 	addi	r8,r8,4
    2b44:	59fffa36 	bltu	r11,r7,2b30 <__alt_mem_Flash_flash_data+0xf4002b30>
    2b48:	513fff04 	addi	r4,r10,-4
    2b4c:	2008d0ba 	srli	r4,r4,2
    2b50:	318000cc 	andi	r6,r6,3
    2b54:	21000044 	addi	r4,r4,1
    2b58:	2109883a 	add	r4,r4,r4
    2b5c:	2109883a 	add	r4,r4,r4
    2b60:	1907883a 	add	r3,r3,r4
    2b64:	290b883a 	add	r5,r5,r4
    2b68:	30000926 	beq	r6,zero,2b90 <memmove+0x148>
    2b6c:	198d883a 	add	r6,r3,r6
    2b70:	29c00003 	ldbu	r7,0(r5)
    2b74:	18c00044 	addi	r3,r3,1
    2b78:	29400044 	addi	r5,r5,1
    2b7c:	19ffffc5 	stb	r7,-1(r3)
    2b80:	19bffb1e 	bne	r3,r6,2b70 <__alt_mem_Flash_flash_data+0xf4002b70>
    2b84:	f800283a 	ret
    2b88:	1007883a 	mov	r3,r2
    2b8c:	003ff606 	br	2b68 <__alt_mem_Flash_flash_data+0xf4002b68>
    2b90:	f800283a 	ret
    2b94:	1007883a 	mov	r3,r2
    2b98:	003ff406 	br	2b6c <__alt_mem_Flash_flash_data+0xf4002b6c>
    2b9c:	500d883a 	mov	r6,r10
    2ba0:	003ff106 	br	2b68 <__alt_mem_Flash_flash_data+0xf4002b68>

00002ba4 <_realloc_r>:
    2ba4:	defff604 	addi	sp,sp,-40
    2ba8:	dd000415 	stw	r20,16(sp)
    2bac:	dc400115 	stw	r17,4(sp)
    2bb0:	dfc00915 	stw	ra,36(sp)
    2bb4:	df000815 	stw	fp,32(sp)
    2bb8:	ddc00715 	stw	r23,28(sp)
    2bbc:	dd800615 	stw	r22,24(sp)
    2bc0:	dd400515 	stw	r21,20(sp)
    2bc4:	dcc00315 	stw	r19,12(sp)
    2bc8:	dc800215 	stw	r18,8(sp)
    2bcc:	dc000015 	stw	r16,0(sp)
    2bd0:	2829883a 	mov	r20,r5
    2bd4:	3023883a 	mov	r17,r6
    2bd8:	2800ad26 	beq	r5,zero,2e90 <_realloc_r+0x2ec>
    2bdc:	2025883a 	mov	r18,r4
    2be0:	00051bc0 	call	51bc <__malloc_lock>
    2be4:	a0ffff17 	ldw	r3,-4(r20)
    2be8:	043fff04 	movi	r16,-4
    2bec:	890002c4 	addi	r4,r17,11
    2bf0:	01c00584 	movi	r7,22
    2bf4:	a57ffe04 	addi	r21,r20,-8
    2bf8:	1c20703a 	and	r16,r3,r16
    2bfc:	39001d2e 	bgeu	r7,r4,2c74 <_realloc_r+0xd0>
    2c00:	05bffe04 	movi	r22,-8
    2c04:	25ac703a 	and	r22,r4,r22
    2c08:	b00f883a 	mov	r7,r22
    2c0c:	b0006516 	blt	r22,zero,2da4 <_realloc_r+0x200>
    2c10:	b4406436 	bltu	r22,r17,2da4 <_realloc_r+0x200>
    2c14:	81c01a0e 	bge	r16,r7,2c80 <_realloc_r+0xdc>
    2c18:	07000074 	movhi	fp,1
    2c1c:	e7057804 	addi	fp,fp,5600
    2c20:	e1400217 	ldw	r5,8(fp)
    2c24:	ac11883a 	add	r8,r21,r16
    2c28:	2a006226 	beq	r5,r8,2db4 <_realloc_r+0x210>
    2c2c:	41800117 	ldw	r6,4(r8)
    2c30:	027fff84 	movi	r9,-2
    2c34:	3252703a 	and	r9,r6,r9
    2c38:	4253883a 	add	r9,r8,r9
    2c3c:	49000117 	ldw	r4,4(r9)
    2c40:	2100004c 	andi	r4,r4,1
    2c44:	2000281e 	bne	r4,zero,2ce8 <_realloc_r+0x144>
    2c48:	00bfff04 	movi	r2,-4
    2c4c:	3084703a 	and	r2,r6,r2
    2c50:	1409883a 	add	r4,r2,r16
    2c54:	21c05e16 	blt	r4,r7,2dd0 <_realloc_r+0x22c>
    2c58:	40800317 	ldw	r2,12(r8)
    2c5c:	41400217 	ldw	r5,8(r8)
    2c60:	a023883a 	mov	r17,r20
    2c64:	2021883a 	mov	r16,r4
    2c68:	28800315 	stw	r2,12(r5)
    2c6c:	11400215 	stw	r5,8(r2)
    2c70:	00000406 	br	2c84 <_realloc_r+0xe0>
    2c74:	01c00404 	movi	r7,16
    2c78:	382d883a 	mov	r22,r7
    2c7c:	003fe406 	br	2c10 <__alt_mem_Flash_flash_data+0xf4002c10>
    2c80:	a023883a 	mov	r17,r20
    2c84:	858fc83a 	sub	r7,r16,r22
    2c88:	008003c4 	movi	r2,15
    2c8c:	18c0004c 	andi	r3,r3,1
    2c90:	11c07236 	bltu	r2,r7,2e5c <_realloc_r+0x2b8>
    2c94:	1c06b03a 	or	r3,r3,r16
    2c98:	a8c00115 	stw	r3,4(r21)
    2c9c:	ac21883a 	add	r16,r21,r16
    2ca0:	80800117 	ldw	r2,4(r16)
    2ca4:	10800054 	ori	r2,r2,1
    2ca8:	80800115 	stw	r2,4(r16)
    2cac:	9009883a 	mov	r4,r18
    2cb0:	00052dc0 	call	52dc <__malloc_unlock>
    2cb4:	8805883a 	mov	r2,r17
    2cb8:	dfc00917 	ldw	ra,36(sp)
    2cbc:	df000817 	ldw	fp,32(sp)
    2cc0:	ddc00717 	ldw	r23,28(sp)
    2cc4:	dd800617 	ldw	r22,24(sp)
    2cc8:	dd400517 	ldw	r21,20(sp)
    2ccc:	dd000417 	ldw	r20,16(sp)
    2cd0:	dcc00317 	ldw	r19,12(sp)
    2cd4:	dc800217 	ldw	r18,8(sp)
    2cd8:	dc400117 	ldw	r17,4(sp)
    2cdc:	dc000017 	ldw	r16,0(sp)
    2ce0:	dec00a04 	addi	sp,sp,40
    2ce4:	f800283a 	ret
    2ce8:	18c0004c 	andi	r3,r3,1
    2cec:	1800081e 	bne	r3,zero,2d10 <_realloc_r+0x16c>
    2cf0:	a4fffe17 	ldw	r19,-8(r20)
    2cf4:	00bfff04 	movi	r2,-4
    2cf8:	ace7c83a 	sub	r19,r21,r19
    2cfc:	98c00117 	ldw	r3,4(r19)
    2d00:	1886703a 	and	r3,r3,r2
    2d04:	98000226 	beq	r19,zero,2d10 <_realloc_r+0x16c>
    2d08:	1c2f883a 	add	r23,r3,r16
    2d0c:	b9c06d0e 	bge	r23,r7,2ec4 <_realloc_r+0x320>
    2d10:	880b883a 	mov	r5,r17
    2d14:	9009883a 	mov	r4,r18
    2d18:	00020800 	call	2080 <_malloc_r>
    2d1c:	1023883a 	mov	r17,r2
    2d20:	1000ef26 	beq	r2,zero,30e0 <_realloc_r+0x53c>
    2d24:	a0ffff17 	ldw	r3,-4(r20)
    2d28:	113ffe04 	addi	r4,r2,-8
    2d2c:	00bfff84 	movi	r2,-2
    2d30:	1884703a 	and	r2,r3,r2
    2d34:	a885883a 	add	r2,r21,r2
    2d38:	2080bf26 	beq	r4,r2,3038 <_realloc_r+0x494>
    2d3c:	81bfff04 	addi	r6,r16,-4
    2d40:	00800904 	movi	r2,36
    2d44:	11808936 	bltu	r2,r6,2f6c <_realloc_r+0x3c8>
    2d48:	00c004c4 	movi	r3,19
    2d4c:	19806c2e 	bgeu	r3,r6,2f00 <_realloc_r+0x35c>
    2d50:	a0c00017 	ldw	r3,0(r20)
    2d54:	88c00015 	stw	r3,0(r17)
    2d58:	a0c00117 	ldw	r3,4(r20)
    2d5c:	88c00115 	stw	r3,4(r17)
    2d60:	00c006c4 	movi	r3,27
    2d64:	1980ac36 	bltu	r3,r6,3018 <_realloc_r+0x474>
    2d68:	88800204 	addi	r2,r17,8
    2d6c:	a0c00204 	addi	r3,r20,8
    2d70:	19000017 	ldw	r4,0(r3)
    2d74:	11000015 	stw	r4,0(r2)
    2d78:	19000117 	ldw	r4,4(r3)
    2d7c:	11000115 	stw	r4,4(r2)
    2d80:	18c00217 	ldw	r3,8(r3)
    2d84:	10c00215 	stw	r3,8(r2)
    2d88:	a00b883a 	mov	r5,r20
    2d8c:	9009883a 	mov	r4,r18
    2d90:	0003a0c0 	call	3a0c <_free_r>
    2d94:	9009883a 	mov	r4,r18
    2d98:	00052dc0 	call	52dc <__malloc_unlock>
    2d9c:	8805883a 	mov	r2,r17
    2da0:	003fc506 	br	2cb8 <__alt_mem_Flash_flash_data+0xf4002cb8>
    2da4:	00800304 	movi	r2,12
    2da8:	90800015 	stw	r2,0(r18)
    2dac:	0005883a 	mov	r2,zero
    2db0:	003fc106 	br	2cb8 <__alt_mem_Flash_flash_data+0xf4002cb8>
    2db4:	29800117 	ldw	r6,4(r5)
    2db8:	00bfff04 	movi	r2,-4
    2dbc:	b1000404 	addi	r4,r22,16
    2dc0:	3084703a 	and	r2,r6,r2
    2dc4:	140d883a 	add	r6,r2,r16
    2dc8:	31005b0e 	bge	r6,r4,2f38 <_realloc_r+0x394>
    2dcc:	2811883a 	mov	r8,r5
    2dd0:	18c0004c 	andi	r3,r3,1
    2dd4:	183fce1e 	bne	r3,zero,2d10 <__alt_mem_Flash_flash_data+0xf4002d10>
    2dd8:	a4fffe17 	ldw	r19,-8(r20)
    2ddc:	00ffff04 	movi	r3,-4
    2de0:	ace7c83a 	sub	r19,r21,r19
    2de4:	99000117 	ldw	r4,4(r19)
    2de8:	20c6703a 	and	r3,r4,r3
    2dec:	403fc526 	beq	r8,zero,2d04 <__alt_mem_Flash_flash_data+0xf4002d04>
    2df0:	1c2f883a 	add	r23,r3,r16
    2df4:	b8af883a 	add	r23,r23,r2
    2df8:	41406026 	beq	r8,r5,2f7c <_realloc_r+0x3d8>
    2dfc:	b9ffc116 	blt	r23,r7,2d04 <__alt_mem_Flash_flash_data+0xf4002d04>
    2e00:	40c00217 	ldw	r3,8(r8)
    2e04:	40800317 	ldw	r2,12(r8)
    2e08:	81bfff04 	addi	r6,r16,-4
    2e0c:	01000904 	movi	r4,36
    2e10:	18800315 	stw	r2,12(r3)
    2e14:	10c00215 	stw	r3,8(r2)
    2e18:	99400217 	ldw	r5,8(r19)
    2e1c:	98c00317 	ldw	r3,12(r19)
    2e20:	9c400204 	addi	r17,r19,8
    2e24:	28c00315 	stw	r3,12(r5)
    2e28:	19400215 	stw	r5,8(r3)
    2e2c:	21802d36 	bltu	r4,r6,2ee4 <_realloc_r+0x340>
    2e30:	008004c4 	movi	r2,19
    2e34:	1180352e 	bgeu	r2,r6,2f0c <_realloc_r+0x368>
    2e38:	a0800017 	ldw	r2,0(r20)
    2e3c:	98800215 	stw	r2,8(r19)
    2e40:	a0800117 	ldw	r2,4(r20)
    2e44:	98800315 	stw	r2,12(r19)
    2e48:	008006c4 	movi	r2,27
    2e4c:	11808036 	bltu	r2,r6,3050 <_realloc_r+0x4ac>
    2e50:	98c00404 	addi	r3,r19,16
    2e54:	a5000204 	addi	r20,r20,8
    2e58:	00002d06 	br	2f10 <_realloc_r+0x36c>
    2e5c:	1d86b03a 	or	r3,r3,r22
    2e60:	ad8b883a 	add	r5,r21,r22
    2e64:	a8c00115 	stw	r3,4(r21)
    2e68:	38800054 	ori	r2,r7,1
    2e6c:	28800115 	stw	r2,4(r5)
    2e70:	29cf883a 	add	r7,r5,r7
    2e74:	38800117 	ldw	r2,4(r7)
    2e78:	9009883a 	mov	r4,r18
    2e7c:	29400204 	addi	r5,r5,8
    2e80:	10800054 	ori	r2,r2,1
    2e84:	38800115 	stw	r2,4(r7)
    2e88:	0003a0c0 	call	3a0c <_free_r>
    2e8c:	003f8706 	br	2cac <__alt_mem_Flash_flash_data+0xf4002cac>
    2e90:	300b883a 	mov	r5,r6
    2e94:	dfc00917 	ldw	ra,36(sp)
    2e98:	df000817 	ldw	fp,32(sp)
    2e9c:	ddc00717 	ldw	r23,28(sp)
    2ea0:	dd800617 	ldw	r22,24(sp)
    2ea4:	dd400517 	ldw	r21,20(sp)
    2ea8:	dd000417 	ldw	r20,16(sp)
    2eac:	dcc00317 	ldw	r19,12(sp)
    2eb0:	dc800217 	ldw	r18,8(sp)
    2eb4:	dc400117 	ldw	r17,4(sp)
    2eb8:	dc000017 	ldw	r16,0(sp)
    2ebc:	dec00a04 	addi	sp,sp,40
    2ec0:	00020801 	jmpi	2080 <_malloc_r>
    2ec4:	98800317 	ldw	r2,12(r19)
    2ec8:	98c00217 	ldw	r3,8(r19)
    2ecc:	81bfff04 	addi	r6,r16,-4
    2ed0:	01000904 	movi	r4,36
    2ed4:	18800315 	stw	r2,12(r3)
    2ed8:	10c00215 	stw	r3,8(r2)
    2edc:	9c400204 	addi	r17,r19,8
    2ee0:	21bfd32e 	bgeu	r4,r6,2e30 <__alt_mem_Flash_flash_data+0xf4002e30>
    2ee4:	8809883a 	mov	r4,r17
    2ee8:	a00b883a 	mov	r5,r20
    2eec:	0002a480 	call	2a48 <memmove>
    2ef0:	98c00117 	ldw	r3,4(r19)
    2ef4:	b821883a 	mov	r16,r23
    2ef8:	982b883a 	mov	r21,r19
    2efc:	003f6106 	br	2c84 <__alt_mem_Flash_flash_data+0xf4002c84>
    2f00:	8805883a 	mov	r2,r17
    2f04:	a007883a 	mov	r3,r20
    2f08:	003f9906 	br	2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
    2f0c:	8807883a 	mov	r3,r17
    2f10:	a0800017 	ldw	r2,0(r20)
    2f14:	b821883a 	mov	r16,r23
    2f18:	982b883a 	mov	r21,r19
    2f1c:	18800015 	stw	r2,0(r3)
    2f20:	a0800117 	ldw	r2,4(r20)
    2f24:	18800115 	stw	r2,4(r3)
    2f28:	a0800217 	ldw	r2,8(r20)
    2f2c:	18800215 	stw	r2,8(r3)
    2f30:	98c00117 	ldw	r3,4(r19)
    2f34:	003f5306 	br	2c84 <__alt_mem_Flash_flash_data+0xf4002c84>
    2f38:	adab883a 	add	r21,r21,r22
    2f3c:	3585c83a 	sub	r2,r6,r22
    2f40:	e5400215 	stw	r21,8(fp)
    2f44:	10800054 	ori	r2,r2,1
    2f48:	a8800115 	stw	r2,4(r21)
    2f4c:	a0bfff17 	ldw	r2,-4(r20)
    2f50:	9009883a 	mov	r4,r18
    2f54:	1080004c 	andi	r2,r2,1
    2f58:	b0acb03a 	or	r22,r22,r2
    2f5c:	a5bfff15 	stw	r22,-4(r20)
    2f60:	00052dc0 	call	52dc <__malloc_unlock>
    2f64:	a005883a 	mov	r2,r20
    2f68:	003f5306 	br	2cb8 <__alt_mem_Flash_flash_data+0xf4002cb8>
    2f6c:	8809883a 	mov	r4,r17
    2f70:	a00b883a 	mov	r5,r20
    2f74:	0002a480 	call	2a48 <memmove>
    2f78:	003f8306 	br	2d88 <__alt_mem_Flash_flash_data+0xf4002d88>
    2f7c:	b0800404 	addi	r2,r22,16
    2f80:	b8bf6016 	blt	r23,r2,2d04 <__alt_mem_Flash_flash_data+0xf4002d04>
    2f84:	98800317 	ldw	r2,12(r19)
    2f88:	98c00217 	ldw	r3,8(r19)
    2f8c:	81bfff04 	addi	r6,r16,-4
    2f90:	01000904 	movi	r4,36
    2f94:	18800315 	stw	r2,12(r3)
    2f98:	10c00215 	stw	r3,8(r2)
    2f9c:	9c400204 	addi	r17,r19,8
    2fa0:	21804336 	bltu	r4,r6,30b0 <_realloc_r+0x50c>
    2fa4:	008004c4 	movi	r2,19
    2fa8:	11803f2e 	bgeu	r2,r6,30a8 <_realloc_r+0x504>
    2fac:	a0800017 	ldw	r2,0(r20)
    2fb0:	98800215 	stw	r2,8(r19)
    2fb4:	a0800117 	ldw	r2,4(r20)
    2fb8:	98800315 	stw	r2,12(r19)
    2fbc:	008006c4 	movi	r2,27
    2fc0:	11803f36 	bltu	r2,r6,30c0 <_realloc_r+0x51c>
    2fc4:	98800404 	addi	r2,r19,16
    2fc8:	a5000204 	addi	r20,r20,8
    2fcc:	a0c00017 	ldw	r3,0(r20)
    2fd0:	10c00015 	stw	r3,0(r2)
    2fd4:	a0c00117 	ldw	r3,4(r20)
    2fd8:	10c00115 	stw	r3,4(r2)
    2fdc:	a0c00217 	ldw	r3,8(r20)
    2fe0:	10c00215 	stw	r3,8(r2)
    2fe4:	9d87883a 	add	r3,r19,r22
    2fe8:	bd85c83a 	sub	r2,r23,r22
    2fec:	e0c00215 	stw	r3,8(fp)
    2ff0:	10800054 	ori	r2,r2,1
    2ff4:	18800115 	stw	r2,4(r3)
    2ff8:	98800117 	ldw	r2,4(r19)
    2ffc:	9009883a 	mov	r4,r18
    3000:	1080004c 	andi	r2,r2,1
    3004:	b0acb03a 	or	r22,r22,r2
    3008:	9d800115 	stw	r22,4(r19)
    300c:	00052dc0 	call	52dc <__malloc_unlock>
    3010:	8805883a 	mov	r2,r17
    3014:	003f2806 	br	2cb8 <__alt_mem_Flash_flash_data+0xf4002cb8>
    3018:	a0c00217 	ldw	r3,8(r20)
    301c:	88c00215 	stw	r3,8(r17)
    3020:	a0c00317 	ldw	r3,12(r20)
    3024:	88c00315 	stw	r3,12(r17)
    3028:	30801126 	beq	r6,r2,3070 <_realloc_r+0x4cc>
    302c:	88800404 	addi	r2,r17,16
    3030:	a0c00404 	addi	r3,r20,16
    3034:	003f4e06 	br	2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
    3038:	893fff17 	ldw	r4,-4(r17)
    303c:	00bfff04 	movi	r2,-4
    3040:	a023883a 	mov	r17,r20
    3044:	2084703a 	and	r2,r4,r2
    3048:	80a1883a 	add	r16,r16,r2
    304c:	003f0d06 	br	2c84 <__alt_mem_Flash_flash_data+0xf4002c84>
    3050:	a0800217 	ldw	r2,8(r20)
    3054:	98800415 	stw	r2,16(r19)
    3058:	a0800317 	ldw	r2,12(r20)
    305c:	98800515 	stw	r2,20(r19)
    3060:	31000a26 	beq	r6,r4,308c <_realloc_r+0x4e8>
    3064:	98c00604 	addi	r3,r19,24
    3068:	a5000404 	addi	r20,r20,16
    306c:	003fa806 	br	2f10 <__alt_mem_Flash_flash_data+0xf4002f10>
    3070:	a1000417 	ldw	r4,16(r20)
    3074:	88800604 	addi	r2,r17,24
    3078:	a0c00604 	addi	r3,r20,24
    307c:	89000415 	stw	r4,16(r17)
    3080:	a1000517 	ldw	r4,20(r20)
    3084:	89000515 	stw	r4,20(r17)
    3088:	003f3906 	br	2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
    308c:	a0800417 	ldw	r2,16(r20)
    3090:	a5000604 	addi	r20,r20,24
    3094:	98c00804 	addi	r3,r19,32
    3098:	98800615 	stw	r2,24(r19)
    309c:	a0bfff17 	ldw	r2,-4(r20)
    30a0:	98800715 	stw	r2,28(r19)
    30a4:	003f9a06 	br	2f10 <__alt_mem_Flash_flash_data+0xf4002f10>
    30a8:	8805883a 	mov	r2,r17
    30ac:	003fc706 	br	2fcc <__alt_mem_Flash_flash_data+0xf4002fcc>
    30b0:	8809883a 	mov	r4,r17
    30b4:	a00b883a 	mov	r5,r20
    30b8:	0002a480 	call	2a48 <memmove>
    30bc:	003fc906 	br	2fe4 <__alt_mem_Flash_flash_data+0xf4002fe4>
    30c0:	a0800217 	ldw	r2,8(r20)
    30c4:	98800415 	stw	r2,16(r19)
    30c8:	a0800317 	ldw	r2,12(r20)
    30cc:	98800515 	stw	r2,20(r19)
    30d0:	31000726 	beq	r6,r4,30f0 <_realloc_r+0x54c>
    30d4:	98800604 	addi	r2,r19,24
    30d8:	a5000404 	addi	r20,r20,16
    30dc:	003fbb06 	br	2fcc <__alt_mem_Flash_flash_data+0xf4002fcc>
    30e0:	9009883a 	mov	r4,r18
    30e4:	00052dc0 	call	52dc <__malloc_unlock>
    30e8:	0005883a 	mov	r2,zero
    30ec:	003ef206 	br	2cb8 <__alt_mem_Flash_flash_data+0xf4002cb8>
    30f0:	a0c00417 	ldw	r3,16(r20)
    30f4:	a5000604 	addi	r20,r20,24
    30f8:	98800804 	addi	r2,r19,32
    30fc:	98c00615 	stw	r3,24(r19)
    3100:	a0ffff17 	ldw	r3,-4(r20)
    3104:	98c00715 	stw	r3,28(r19)
    3108:	003fb006 	br	2fcc <__alt_mem_Flash_flash_data+0xf4002fcc>

0000310c <_sbrk_r>:
    310c:	defffd04 	addi	sp,sp,-12
    3110:	dc000015 	stw	r16,0(sp)
    3114:	04000074 	movhi	r16,1
    3118:	dc400115 	stw	r17,4(sp)
    311c:	8413e204 	addi	r16,r16,20360
    3120:	2023883a 	mov	r17,r4
    3124:	2809883a 	mov	r4,r5
    3128:	dfc00215 	stw	ra,8(sp)
    312c:	80000015 	stw	zero,0(r16)
    3130:	0004ea80 	call	4ea8 <sbrk>
    3134:	00ffffc4 	movi	r3,-1
    3138:	10c00526 	beq	r2,r3,3150 <_sbrk_r+0x44>
    313c:	dfc00217 	ldw	ra,8(sp)
    3140:	dc400117 	ldw	r17,4(sp)
    3144:	dc000017 	ldw	r16,0(sp)
    3148:	dec00304 	addi	sp,sp,12
    314c:	f800283a 	ret
    3150:	80c00017 	ldw	r3,0(r16)
    3154:	183ff926 	beq	r3,zero,313c <__alt_mem_Flash_flash_data+0xf400313c>
    3158:	88c00015 	stw	r3,0(r17)
    315c:	003ff706 	br	313c <__alt_mem_Flash_flash_data+0xf400313c>

00003160 <__swsetup_r>:
    3160:	00800074 	movhi	r2,1
    3164:	defffd04 	addi	sp,sp,-12
    3168:	108bef04 	addi	r2,r2,12220
    316c:	dc400115 	stw	r17,4(sp)
    3170:	2023883a 	mov	r17,r4
    3174:	11000017 	ldw	r4,0(r2)
    3178:	dc000015 	stw	r16,0(sp)
    317c:	dfc00215 	stw	ra,8(sp)
    3180:	2821883a 	mov	r16,r5
    3184:	20000226 	beq	r4,zero,3190 <__swsetup_r+0x30>
    3188:	20c00e17 	ldw	r3,56(r4)
    318c:	18003126 	beq	r3,zero,3254 <__swsetup_r+0xf4>
    3190:	8080030b 	ldhu	r2,12(r16)
    3194:	10c0020c 	andi	r3,r2,8
    3198:	100d883a 	mov	r6,r2
    319c:	18000f26 	beq	r3,zero,31dc <__swsetup_r+0x7c>
    31a0:	80c00417 	ldw	r3,16(r16)
    31a4:	18001526 	beq	r3,zero,31fc <__swsetup_r+0x9c>
    31a8:	1100004c 	andi	r4,r2,1
    31ac:	20001c1e 	bne	r4,zero,3220 <__swsetup_r+0xc0>
    31b0:	1080008c 	andi	r2,r2,2
    31b4:	1000291e 	bne	r2,zero,325c <__swsetup_r+0xfc>
    31b8:	80800517 	ldw	r2,20(r16)
    31bc:	80800215 	stw	r2,8(r16)
    31c0:	18001c26 	beq	r3,zero,3234 <__swsetup_r+0xd4>
    31c4:	0005883a 	mov	r2,zero
    31c8:	dfc00217 	ldw	ra,8(sp)
    31cc:	dc400117 	ldw	r17,4(sp)
    31d0:	dc000017 	ldw	r16,0(sp)
    31d4:	dec00304 	addi	sp,sp,12
    31d8:	f800283a 	ret
    31dc:	3080040c 	andi	r2,r6,16
    31e0:	10002e26 	beq	r2,zero,329c <__swsetup_r+0x13c>
    31e4:	3080010c 	andi	r2,r6,4
    31e8:	10001e1e 	bne	r2,zero,3264 <__swsetup_r+0x104>
    31ec:	80c00417 	ldw	r3,16(r16)
    31f0:	30800214 	ori	r2,r6,8
    31f4:	8080030d 	sth	r2,12(r16)
    31f8:	183feb1e 	bne	r3,zero,31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    31fc:	1140a00c 	andi	r5,r2,640
    3200:	01008004 	movi	r4,512
    3204:	293fe826 	beq	r5,r4,31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    3208:	8809883a 	mov	r4,r17
    320c:	800b883a 	mov	r5,r16
    3210:	0003e840 	call	3e84 <__smakebuf_r>
    3214:	8080030b 	ldhu	r2,12(r16)
    3218:	80c00417 	ldw	r3,16(r16)
    321c:	003fe206 	br	31a8 <__alt_mem_Flash_flash_data+0xf40031a8>
    3220:	80800517 	ldw	r2,20(r16)
    3224:	80000215 	stw	zero,8(r16)
    3228:	0085c83a 	sub	r2,zero,r2
    322c:	80800615 	stw	r2,24(r16)
    3230:	183fe41e 	bne	r3,zero,31c4 <__alt_mem_Flash_flash_data+0xf40031c4>
    3234:	80c0030b 	ldhu	r3,12(r16)
    3238:	0005883a 	mov	r2,zero
    323c:	1900200c 	andi	r4,r3,128
    3240:	203fe126 	beq	r4,zero,31c8 <__alt_mem_Flash_flash_data+0xf40031c8>
    3244:	18c01014 	ori	r3,r3,64
    3248:	80c0030d 	sth	r3,12(r16)
    324c:	00bfffc4 	movi	r2,-1
    3250:	003fdd06 	br	31c8 <__alt_mem_Flash_flash_data+0xf40031c8>
    3254:	00038980 	call	3898 <__sinit>
    3258:	003fcd06 	br	3190 <__alt_mem_Flash_flash_data+0xf4003190>
    325c:	0005883a 	mov	r2,zero
    3260:	003fd606 	br	31bc <__alt_mem_Flash_flash_data+0xf40031bc>
    3264:	81400c17 	ldw	r5,48(r16)
    3268:	28000626 	beq	r5,zero,3284 <__swsetup_r+0x124>
    326c:	80801004 	addi	r2,r16,64
    3270:	28800326 	beq	r5,r2,3280 <__swsetup_r+0x120>
    3274:	8809883a 	mov	r4,r17
    3278:	0003a0c0 	call	3a0c <_free_r>
    327c:	8180030b 	ldhu	r6,12(r16)
    3280:	80000c15 	stw	zero,48(r16)
    3284:	80c00417 	ldw	r3,16(r16)
    3288:	00bff6c4 	movi	r2,-37
    328c:	118c703a 	and	r6,r2,r6
    3290:	80000115 	stw	zero,4(r16)
    3294:	80c00015 	stw	r3,0(r16)
    3298:	003fd506 	br	31f0 <__alt_mem_Flash_flash_data+0xf40031f0>
    329c:	00800244 	movi	r2,9
    32a0:	88800015 	stw	r2,0(r17)
    32a4:	30801014 	ori	r2,r6,64
    32a8:	8080030d 	sth	r2,12(r16)
    32ac:	00bfffc4 	movi	r2,-1
    32b0:	003fc506 	br	31c8 <__alt_mem_Flash_flash_data+0xf40031c8>

000032b4 <__sflush_r>:
    32b4:	2880030b 	ldhu	r2,12(r5)
    32b8:	defffb04 	addi	sp,sp,-20
    32bc:	dcc00315 	stw	r19,12(sp)
    32c0:	dc400115 	stw	r17,4(sp)
    32c4:	dfc00415 	stw	ra,16(sp)
    32c8:	dc800215 	stw	r18,8(sp)
    32cc:	dc000015 	stw	r16,0(sp)
    32d0:	10c0020c 	andi	r3,r2,8
    32d4:	2823883a 	mov	r17,r5
    32d8:	2027883a 	mov	r19,r4
    32dc:	1800311e 	bne	r3,zero,33a4 <__sflush_r+0xf0>
    32e0:	28c00117 	ldw	r3,4(r5)
    32e4:	10820014 	ori	r2,r2,2048
    32e8:	2880030d 	sth	r2,12(r5)
    32ec:	00c04b0e 	bge	zero,r3,341c <__sflush_r+0x168>
    32f0:	8a000a17 	ldw	r8,40(r17)
    32f4:	40002326 	beq	r8,zero,3384 <__sflush_r+0xd0>
    32f8:	9c000017 	ldw	r16,0(r19)
    32fc:	10c4000c 	andi	r3,r2,4096
    3300:	98000015 	stw	zero,0(r19)
    3304:	18004826 	beq	r3,zero,3428 <__sflush_r+0x174>
    3308:	89801417 	ldw	r6,80(r17)
    330c:	10c0010c 	andi	r3,r2,4
    3310:	18000626 	beq	r3,zero,332c <__sflush_r+0x78>
    3314:	88c00117 	ldw	r3,4(r17)
    3318:	88800c17 	ldw	r2,48(r17)
    331c:	30cdc83a 	sub	r6,r6,r3
    3320:	10000226 	beq	r2,zero,332c <__sflush_r+0x78>
    3324:	88800f17 	ldw	r2,60(r17)
    3328:	308dc83a 	sub	r6,r6,r2
    332c:	89400717 	ldw	r5,28(r17)
    3330:	9809883a 	mov	r4,r19
    3334:	000f883a 	mov	r7,zero
    3338:	403ee83a 	callr	r8
    333c:	00ffffc4 	movi	r3,-1
    3340:	10c04426 	beq	r2,r3,3454 <__sflush_r+0x1a0>
    3344:	88c0030b 	ldhu	r3,12(r17)
    3348:	89000417 	ldw	r4,16(r17)
    334c:	88000115 	stw	zero,4(r17)
    3350:	197dffcc 	andi	r5,r3,63487
    3354:	8940030d 	sth	r5,12(r17)
    3358:	89000015 	stw	r4,0(r17)
    335c:	18c4000c 	andi	r3,r3,4096
    3360:	18002c1e 	bne	r3,zero,3414 <__sflush_r+0x160>
    3364:	89400c17 	ldw	r5,48(r17)
    3368:	9c000015 	stw	r16,0(r19)
    336c:	28000526 	beq	r5,zero,3384 <__sflush_r+0xd0>
    3370:	88801004 	addi	r2,r17,64
    3374:	28800226 	beq	r5,r2,3380 <__sflush_r+0xcc>
    3378:	9809883a 	mov	r4,r19
    337c:	0003a0c0 	call	3a0c <_free_r>
    3380:	88000c15 	stw	zero,48(r17)
    3384:	0005883a 	mov	r2,zero
    3388:	dfc00417 	ldw	ra,16(sp)
    338c:	dcc00317 	ldw	r19,12(sp)
    3390:	dc800217 	ldw	r18,8(sp)
    3394:	dc400117 	ldw	r17,4(sp)
    3398:	dc000017 	ldw	r16,0(sp)
    339c:	dec00504 	addi	sp,sp,20
    33a0:	f800283a 	ret
    33a4:	2c800417 	ldw	r18,16(r5)
    33a8:	903ff626 	beq	r18,zero,3384 <__alt_mem_Flash_flash_data+0xf4003384>
    33ac:	2c000017 	ldw	r16,0(r5)
    33b0:	108000cc 	andi	r2,r2,3
    33b4:	2c800015 	stw	r18,0(r5)
    33b8:	84a1c83a 	sub	r16,r16,r18
    33bc:	1000131e 	bne	r2,zero,340c <__sflush_r+0x158>
    33c0:	28800517 	ldw	r2,20(r5)
    33c4:	88800215 	stw	r2,8(r17)
    33c8:	04000316 	blt	zero,r16,33d8 <__sflush_r+0x124>
    33cc:	003fed06 	br	3384 <__alt_mem_Flash_flash_data+0xf4003384>
    33d0:	90a5883a 	add	r18,r18,r2
    33d4:	043feb0e 	bge	zero,r16,3384 <__alt_mem_Flash_flash_data+0xf4003384>
    33d8:	88800917 	ldw	r2,36(r17)
    33dc:	89400717 	ldw	r5,28(r17)
    33e0:	800f883a 	mov	r7,r16
    33e4:	900d883a 	mov	r6,r18
    33e8:	9809883a 	mov	r4,r19
    33ec:	103ee83a 	callr	r2
    33f0:	80a1c83a 	sub	r16,r16,r2
    33f4:	00bff616 	blt	zero,r2,33d0 <__alt_mem_Flash_flash_data+0xf40033d0>
    33f8:	88c0030b 	ldhu	r3,12(r17)
    33fc:	00bfffc4 	movi	r2,-1
    3400:	18c01014 	ori	r3,r3,64
    3404:	88c0030d 	sth	r3,12(r17)
    3408:	003fdf06 	br	3388 <__alt_mem_Flash_flash_data+0xf4003388>
    340c:	0005883a 	mov	r2,zero
    3410:	003fec06 	br	33c4 <__alt_mem_Flash_flash_data+0xf40033c4>
    3414:	88801415 	stw	r2,80(r17)
    3418:	003fd206 	br	3364 <__alt_mem_Flash_flash_data+0xf4003364>
    341c:	28c00f17 	ldw	r3,60(r5)
    3420:	00ffb316 	blt	zero,r3,32f0 <__alt_mem_Flash_flash_data+0xf40032f0>
    3424:	003fd706 	br	3384 <__alt_mem_Flash_flash_data+0xf4003384>
    3428:	89400717 	ldw	r5,28(r17)
    342c:	000d883a 	mov	r6,zero
    3430:	9809883a 	mov	r4,r19
    3434:	01c00044 	movi	r7,1
    3438:	403ee83a 	callr	r8
    343c:	100d883a 	mov	r6,r2
    3440:	00bfffc4 	movi	r2,-1
    3444:	30801426 	beq	r6,r2,3498 <__sflush_r+0x1e4>
    3448:	8880030b 	ldhu	r2,12(r17)
    344c:	8a000a17 	ldw	r8,40(r17)
    3450:	003fae06 	br	330c <__alt_mem_Flash_flash_data+0xf400330c>
    3454:	98c00017 	ldw	r3,0(r19)
    3458:	183fba26 	beq	r3,zero,3344 <__alt_mem_Flash_flash_data+0xf4003344>
    345c:	01000744 	movi	r4,29
    3460:	19000626 	beq	r3,r4,347c <__sflush_r+0x1c8>
    3464:	01000584 	movi	r4,22
    3468:	19000426 	beq	r3,r4,347c <__sflush_r+0x1c8>
    346c:	88c0030b 	ldhu	r3,12(r17)
    3470:	18c01014 	ori	r3,r3,64
    3474:	88c0030d 	sth	r3,12(r17)
    3478:	003fc306 	br	3388 <__alt_mem_Flash_flash_data+0xf4003388>
    347c:	8880030b 	ldhu	r2,12(r17)
    3480:	88c00417 	ldw	r3,16(r17)
    3484:	88000115 	stw	zero,4(r17)
    3488:	10bdffcc 	andi	r2,r2,63487
    348c:	8880030d 	sth	r2,12(r17)
    3490:	88c00015 	stw	r3,0(r17)
    3494:	003fb306 	br	3364 <__alt_mem_Flash_flash_data+0xf4003364>
    3498:	98800017 	ldw	r2,0(r19)
    349c:	103fea26 	beq	r2,zero,3448 <__alt_mem_Flash_flash_data+0xf4003448>
    34a0:	00c00744 	movi	r3,29
    34a4:	10c00226 	beq	r2,r3,34b0 <__sflush_r+0x1fc>
    34a8:	00c00584 	movi	r3,22
    34ac:	10ffd21e 	bne	r2,r3,33f8 <__alt_mem_Flash_flash_data+0xf40033f8>
    34b0:	9c000015 	stw	r16,0(r19)
    34b4:	0005883a 	mov	r2,zero
    34b8:	003fb306 	br	3388 <__alt_mem_Flash_flash_data+0xf4003388>

000034bc <_fflush_r>:
    34bc:	defffd04 	addi	sp,sp,-12
    34c0:	dc000115 	stw	r16,4(sp)
    34c4:	dfc00215 	stw	ra,8(sp)
    34c8:	2021883a 	mov	r16,r4
    34cc:	20000226 	beq	r4,zero,34d8 <_fflush_r+0x1c>
    34d0:	20800e17 	ldw	r2,56(r4)
    34d4:	10000c26 	beq	r2,zero,3508 <_fflush_r+0x4c>
    34d8:	2880030f 	ldh	r2,12(r5)
    34dc:	1000051e 	bne	r2,zero,34f4 <_fflush_r+0x38>
    34e0:	0005883a 	mov	r2,zero
    34e4:	dfc00217 	ldw	ra,8(sp)
    34e8:	dc000117 	ldw	r16,4(sp)
    34ec:	dec00304 	addi	sp,sp,12
    34f0:	f800283a 	ret
    34f4:	8009883a 	mov	r4,r16
    34f8:	dfc00217 	ldw	ra,8(sp)
    34fc:	dc000117 	ldw	r16,4(sp)
    3500:	dec00304 	addi	sp,sp,12
    3504:	00032b41 	jmpi	32b4 <__sflush_r>
    3508:	d9400015 	stw	r5,0(sp)
    350c:	00038980 	call	3898 <__sinit>
    3510:	d9400017 	ldw	r5,0(sp)
    3514:	003ff006 	br	34d8 <__alt_mem_Flash_flash_data+0xf40034d8>

00003518 <fflush>:
    3518:	20000526 	beq	r4,zero,3530 <fflush+0x18>
    351c:	00800074 	movhi	r2,1
    3520:	108bef04 	addi	r2,r2,12220
    3524:	200b883a 	mov	r5,r4
    3528:	11000017 	ldw	r4,0(r2)
    352c:	00034bc1 	jmpi	34bc <_fflush_r>
    3530:	00800074 	movhi	r2,1
    3534:	108bee04 	addi	r2,r2,12216
    3538:	11000017 	ldw	r4,0(r2)
    353c:	01400034 	movhi	r5,0
    3540:	294d2f04 	addi	r5,r5,13500
    3544:	0003dc01 	jmpi	3dc0 <_fwalk_reent>

00003548 <__fp_lock>:
    3548:	0005883a 	mov	r2,zero
    354c:	f800283a 	ret

00003550 <__fp_unlock>:
    3550:	0005883a 	mov	r2,zero
    3554:	f800283a 	ret

00003558 <_cleanup_r>:
    3558:	01400034 	movhi	r5,0
    355c:	2950d304 	addi	r5,r5,17228
    3560:	0003dc01 	jmpi	3dc0 <_fwalk_reent>

00003564 <__sinit.part.1>:
    3564:	defff704 	addi	sp,sp,-36
    3568:	00c00034 	movhi	r3,0
    356c:	dfc00815 	stw	ra,32(sp)
    3570:	ddc00715 	stw	r23,28(sp)
    3574:	dd800615 	stw	r22,24(sp)
    3578:	dd400515 	stw	r21,20(sp)
    357c:	dd000415 	stw	r20,16(sp)
    3580:	dcc00315 	stw	r19,12(sp)
    3584:	dc800215 	stw	r18,8(sp)
    3588:	dc400115 	stw	r17,4(sp)
    358c:	dc000015 	stw	r16,0(sp)
    3590:	18cd5604 	addi	r3,r3,13656
    3594:	24000117 	ldw	r16,4(r4)
    3598:	20c00f15 	stw	r3,60(r4)
    359c:	2080bb04 	addi	r2,r4,748
    35a0:	00c000c4 	movi	r3,3
    35a4:	20c0b915 	stw	r3,740(r4)
    35a8:	2080ba15 	stw	r2,744(r4)
    35ac:	2000b815 	stw	zero,736(r4)
    35b0:	05c00204 	movi	r23,8
    35b4:	00800104 	movi	r2,4
    35b8:	2025883a 	mov	r18,r4
    35bc:	b80d883a 	mov	r6,r23
    35c0:	81001704 	addi	r4,r16,92
    35c4:	000b883a 	mov	r5,zero
    35c8:	80000015 	stw	zero,0(r16)
    35cc:	80000115 	stw	zero,4(r16)
    35d0:	80000215 	stw	zero,8(r16)
    35d4:	8080030d 	sth	r2,12(r16)
    35d8:	80001915 	stw	zero,100(r16)
    35dc:	8000038d 	sth	zero,14(r16)
    35e0:	80000415 	stw	zero,16(r16)
    35e4:	80000515 	stw	zero,20(r16)
    35e8:	80000615 	stw	zero,24(r16)
    35ec:	000403c0 	call	403c <memset>
    35f0:	05800034 	movhi	r22,0
    35f4:	94400217 	ldw	r17,8(r18)
    35f8:	05400034 	movhi	r21,0
    35fc:	05000034 	movhi	r20,0
    3600:	04c00034 	movhi	r19,0
    3604:	b5905804 	addi	r22,r22,16736
    3608:	ad506f04 	addi	r21,r21,16828
    360c:	a5108e04 	addi	r20,r20,16952
    3610:	9cd0a504 	addi	r19,r19,17044
    3614:	85800815 	stw	r22,32(r16)
    3618:	85400915 	stw	r21,36(r16)
    361c:	85000a15 	stw	r20,40(r16)
    3620:	84c00b15 	stw	r19,44(r16)
    3624:	84000715 	stw	r16,28(r16)
    3628:	00800284 	movi	r2,10
    362c:	8880030d 	sth	r2,12(r17)
    3630:	00800044 	movi	r2,1
    3634:	89001704 	addi	r4,r17,92
    3638:	b80d883a 	mov	r6,r23
    363c:	000b883a 	mov	r5,zero
    3640:	88000015 	stw	zero,0(r17)
    3644:	88000115 	stw	zero,4(r17)
    3648:	88000215 	stw	zero,8(r17)
    364c:	88001915 	stw	zero,100(r17)
    3650:	8880038d 	sth	r2,14(r17)
    3654:	88000415 	stw	zero,16(r17)
    3658:	88000515 	stw	zero,20(r17)
    365c:	88000615 	stw	zero,24(r17)
    3660:	000403c0 	call	403c <memset>
    3664:	94000317 	ldw	r16,12(r18)
    3668:	00800484 	movi	r2,18
    366c:	8c400715 	stw	r17,28(r17)
    3670:	8d800815 	stw	r22,32(r17)
    3674:	8d400915 	stw	r21,36(r17)
    3678:	8d000a15 	stw	r20,40(r17)
    367c:	8cc00b15 	stw	r19,44(r17)
    3680:	8080030d 	sth	r2,12(r16)
    3684:	00800084 	movi	r2,2
    3688:	80000015 	stw	zero,0(r16)
    368c:	80000115 	stw	zero,4(r16)
    3690:	80000215 	stw	zero,8(r16)
    3694:	80001915 	stw	zero,100(r16)
    3698:	8080038d 	sth	r2,14(r16)
    369c:	80000415 	stw	zero,16(r16)
    36a0:	80000515 	stw	zero,20(r16)
    36a4:	80000615 	stw	zero,24(r16)
    36a8:	81001704 	addi	r4,r16,92
    36ac:	000b883a 	mov	r5,zero
    36b0:	b80d883a 	mov	r6,r23
    36b4:	000403c0 	call	403c <memset>
    36b8:	00800044 	movi	r2,1
    36bc:	84000715 	stw	r16,28(r16)
    36c0:	85800815 	stw	r22,32(r16)
    36c4:	85400915 	stw	r21,36(r16)
    36c8:	85000a15 	stw	r20,40(r16)
    36cc:	84c00b15 	stw	r19,44(r16)
    36d0:	90800e15 	stw	r2,56(r18)
    36d4:	dfc00817 	ldw	ra,32(sp)
    36d8:	ddc00717 	ldw	r23,28(sp)
    36dc:	dd800617 	ldw	r22,24(sp)
    36e0:	dd400517 	ldw	r21,20(sp)
    36e4:	dd000417 	ldw	r20,16(sp)
    36e8:	dcc00317 	ldw	r19,12(sp)
    36ec:	dc800217 	ldw	r18,8(sp)
    36f0:	dc400117 	ldw	r17,4(sp)
    36f4:	dc000017 	ldw	r16,0(sp)
    36f8:	dec00904 	addi	sp,sp,36
    36fc:	f800283a 	ret

00003700 <__sfmoreglue>:
    3700:	defffc04 	addi	sp,sp,-16
    3704:	dc400115 	stw	r17,4(sp)
    3708:	2c7fffc4 	addi	r17,r5,-1
    370c:	8c401a24 	muli	r17,r17,104
    3710:	dc800215 	stw	r18,8(sp)
    3714:	2825883a 	mov	r18,r5
    3718:	89401d04 	addi	r5,r17,116
    371c:	dc000015 	stw	r16,0(sp)
    3720:	dfc00315 	stw	ra,12(sp)
    3724:	00020800 	call	2080 <_malloc_r>
    3728:	1021883a 	mov	r16,r2
    372c:	10000726 	beq	r2,zero,374c <__sfmoreglue+0x4c>
    3730:	11000304 	addi	r4,r2,12
    3734:	10000015 	stw	zero,0(r2)
    3738:	14800115 	stw	r18,4(r2)
    373c:	11000215 	stw	r4,8(r2)
    3740:	000b883a 	mov	r5,zero
    3744:	89801a04 	addi	r6,r17,104
    3748:	000403c0 	call	403c <memset>
    374c:	8005883a 	mov	r2,r16
    3750:	dfc00317 	ldw	ra,12(sp)
    3754:	dc800217 	ldw	r18,8(sp)
    3758:	dc400117 	ldw	r17,4(sp)
    375c:	dc000017 	ldw	r16,0(sp)
    3760:	dec00404 	addi	sp,sp,16
    3764:	f800283a 	ret

00003768 <__sfp>:
    3768:	00800074 	movhi	r2,1
    376c:	defffb04 	addi	sp,sp,-20
    3770:	108bee04 	addi	r2,r2,12216
    3774:	dc800215 	stw	r18,8(sp)
    3778:	14800017 	ldw	r18,0(r2)
    377c:	dcc00315 	stw	r19,12(sp)
    3780:	dfc00415 	stw	ra,16(sp)
    3784:	90800e17 	ldw	r2,56(r18)
    3788:	dc400115 	stw	r17,4(sp)
    378c:	dc000015 	stw	r16,0(sp)
    3790:	2027883a 	mov	r19,r4
    3794:	1000021e 	bne	r2,zero,37a0 <__sfp+0x38>
    3798:	9009883a 	mov	r4,r18
    379c:	00035640 	call	3564 <__sinit.part.1>
    37a0:	9480b804 	addi	r18,r18,736
    37a4:	047fffc4 	movi	r17,-1
    37a8:	91400117 	ldw	r5,4(r18)
    37ac:	94000217 	ldw	r16,8(r18)
    37b0:	297fffc4 	addi	r5,r5,-1
    37b4:	28000a16 	blt	r5,zero,37e0 <__sfp+0x78>
    37b8:	8080030f 	ldh	r2,12(r16)
    37bc:	10000c26 	beq	r2,zero,37f0 <__sfp+0x88>
    37c0:	80c01d04 	addi	r3,r16,116
    37c4:	00000206 	br	37d0 <__sfp+0x68>
    37c8:	18bfe60f 	ldh	r2,-104(r3)
    37cc:	10000826 	beq	r2,zero,37f0 <__sfp+0x88>
    37d0:	297fffc4 	addi	r5,r5,-1
    37d4:	1c3ffd04 	addi	r16,r3,-12
    37d8:	18c01a04 	addi	r3,r3,104
    37dc:	2c7ffa1e 	bne	r5,r17,37c8 <__alt_mem_Flash_flash_data+0xf40037c8>
    37e0:	90800017 	ldw	r2,0(r18)
    37e4:	10001d26 	beq	r2,zero,385c <__sfp+0xf4>
    37e8:	1025883a 	mov	r18,r2
    37ec:	003fee06 	br	37a8 <__alt_mem_Flash_flash_data+0xf40037a8>
    37f0:	00bfffc4 	movi	r2,-1
    37f4:	8080038d 	sth	r2,14(r16)
    37f8:	00800044 	movi	r2,1
    37fc:	8080030d 	sth	r2,12(r16)
    3800:	80001915 	stw	zero,100(r16)
    3804:	80000015 	stw	zero,0(r16)
    3808:	80000215 	stw	zero,8(r16)
    380c:	80000115 	stw	zero,4(r16)
    3810:	80000415 	stw	zero,16(r16)
    3814:	80000515 	stw	zero,20(r16)
    3818:	80000615 	stw	zero,24(r16)
    381c:	81001704 	addi	r4,r16,92
    3820:	000b883a 	mov	r5,zero
    3824:	01800204 	movi	r6,8
    3828:	000403c0 	call	403c <memset>
    382c:	8005883a 	mov	r2,r16
    3830:	80000c15 	stw	zero,48(r16)
    3834:	80000d15 	stw	zero,52(r16)
    3838:	80001115 	stw	zero,68(r16)
    383c:	80001215 	stw	zero,72(r16)
    3840:	dfc00417 	ldw	ra,16(sp)
    3844:	dcc00317 	ldw	r19,12(sp)
    3848:	dc800217 	ldw	r18,8(sp)
    384c:	dc400117 	ldw	r17,4(sp)
    3850:	dc000017 	ldw	r16,0(sp)
    3854:	dec00504 	addi	sp,sp,20
    3858:	f800283a 	ret
    385c:	9809883a 	mov	r4,r19
    3860:	01400104 	movi	r5,4
    3864:	00037000 	call	3700 <__sfmoreglue>
    3868:	90800015 	stw	r2,0(r18)
    386c:	103fde1e 	bne	r2,zero,37e8 <__alt_mem_Flash_flash_data+0xf40037e8>
    3870:	00800304 	movi	r2,12
    3874:	98800015 	stw	r2,0(r19)
    3878:	0005883a 	mov	r2,zero
    387c:	003ff006 	br	3840 <__alt_mem_Flash_flash_data+0xf4003840>

00003880 <_cleanup>:
    3880:	00800074 	movhi	r2,1
    3884:	108bee04 	addi	r2,r2,12216
    3888:	11000017 	ldw	r4,0(r2)
    388c:	01400034 	movhi	r5,0
    3890:	2950d304 	addi	r5,r5,17228
    3894:	0003dc01 	jmpi	3dc0 <_fwalk_reent>

00003898 <__sinit>:
    3898:	20800e17 	ldw	r2,56(r4)
    389c:	10000126 	beq	r2,zero,38a4 <__sinit+0xc>
    38a0:	f800283a 	ret
    38a4:	00035641 	jmpi	3564 <__sinit.part.1>

000038a8 <__sfp_lock_acquire>:
    38a8:	f800283a 	ret

000038ac <__sfp_lock_release>:
    38ac:	f800283a 	ret

000038b0 <__sinit_lock_acquire>:
    38b0:	f800283a 	ret

000038b4 <__sinit_lock_release>:
    38b4:	f800283a 	ret

000038b8 <__fp_lock_all>:
    38b8:	00800074 	movhi	r2,1
    38bc:	108bef04 	addi	r2,r2,12220
    38c0:	11000017 	ldw	r4,0(r2)
    38c4:	01400034 	movhi	r5,0
    38c8:	294d5204 	addi	r5,r5,13640
    38cc:	0003cfc1 	jmpi	3cfc <_fwalk>

000038d0 <__fp_unlock_all>:
    38d0:	00800074 	movhi	r2,1
    38d4:	108bef04 	addi	r2,r2,12220
    38d8:	11000017 	ldw	r4,0(r2)
    38dc:	01400034 	movhi	r5,0
    38e0:	294d5404 	addi	r5,r5,13648
    38e4:	0003cfc1 	jmpi	3cfc <_fwalk>

000038e8 <_malloc_trim_r>:
    38e8:	defffb04 	addi	sp,sp,-20
    38ec:	dcc00315 	stw	r19,12(sp)
    38f0:	04c00074 	movhi	r19,1
    38f4:	dc800215 	stw	r18,8(sp)
    38f8:	dc400115 	stw	r17,4(sp)
    38fc:	dc000015 	stw	r16,0(sp)
    3900:	dfc00415 	stw	ra,16(sp)
    3904:	2821883a 	mov	r16,r5
    3908:	9cc57804 	addi	r19,r19,5600
    390c:	2025883a 	mov	r18,r4
    3910:	00051bc0 	call	51bc <__malloc_lock>
    3914:	98800217 	ldw	r2,8(r19)
    3918:	14400117 	ldw	r17,4(r2)
    391c:	00bfff04 	movi	r2,-4
    3920:	88a2703a 	and	r17,r17,r2
    3924:	8c21c83a 	sub	r16,r17,r16
    3928:	8403fbc4 	addi	r16,r16,4079
    392c:	8020d33a 	srli	r16,r16,12
    3930:	0083ffc4 	movi	r2,4095
    3934:	843fffc4 	addi	r16,r16,-1
    3938:	8020933a 	slli	r16,r16,12
    393c:	1400060e 	bge	r2,r16,3958 <_malloc_trim_r+0x70>
    3940:	9009883a 	mov	r4,r18
    3944:	000b883a 	mov	r5,zero
    3948:	000310c0 	call	310c <_sbrk_r>
    394c:	98c00217 	ldw	r3,8(r19)
    3950:	1c47883a 	add	r3,r3,r17
    3954:	10c00a26 	beq	r2,r3,3980 <_malloc_trim_r+0x98>
    3958:	9009883a 	mov	r4,r18
    395c:	00052dc0 	call	52dc <__malloc_unlock>
    3960:	0005883a 	mov	r2,zero
    3964:	dfc00417 	ldw	ra,16(sp)
    3968:	dcc00317 	ldw	r19,12(sp)
    396c:	dc800217 	ldw	r18,8(sp)
    3970:	dc400117 	ldw	r17,4(sp)
    3974:	dc000017 	ldw	r16,0(sp)
    3978:	dec00504 	addi	sp,sp,20
    397c:	f800283a 	ret
    3980:	9009883a 	mov	r4,r18
    3984:	040bc83a 	sub	r5,zero,r16
    3988:	000310c0 	call	310c <_sbrk_r>
    398c:	00ffffc4 	movi	r3,-1
    3990:	10c00d26 	beq	r2,r3,39c8 <_malloc_trim_r+0xe0>
    3994:	00c00074 	movhi	r3,1
    3998:	18d40304 	addi	r3,r3,20492
    399c:	18800017 	ldw	r2,0(r3)
    39a0:	99000217 	ldw	r4,8(r19)
    39a4:	8c23c83a 	sub	r17,r17,r16
    39a8:	8c400054 	ori	r17,r17,1
    39ac:	1421c83a 	sub	r16,r2,r16
    39b0:	24400115 	stw	r17,4(r4)
    39b4:	9009883a 	mov	r4,r18
    39b8:	1c000015 	stw	r16,0(r3)
    39bc:	00052dc0 	call	52dc <__malloc_unlock>
    39c0:	00800044 	movi	r2,1
    39c4:	003fe706 	br	3964 <__alt_mem_Flash_flash_data+0xf4003964>
    39c8:	9009883a 	mov	r4,r18
    39cc:	000b883a 	mov	r5,zero
    39d0:	000310c0 	call	310c <_sbrk_r>
    39d4:	99000217 	ldw	r4,8(r19)
    39d8:	014003c4 	movi	r5,15
    39dc:	1107c83a 	sub	r3,r2,r4
    39e0:	28ffdd0e 	bge	r5,r3,3958 <__alt_mem_Flash_flash_data+0xf4003958>
    39e4:	01400074 	movhi	r5,1
    39e8:	294bf004 	addi	r5,r5,12224
    39ec:	29400017 	ldw	r5,0(r5)
    39f0:	18c00054 	ori	r3,r3,1
    39f4:	20c00115 	stw	r3,4(r4)
    39f8:	00c00074 	movhi	r3,1
    39fc:	1145c83a 	sub	r2,r2,r5
    3a00:	18d40304 	addi	r3,r3,20492
    3a04:	18800015 	stw	r2,0(r3)
    3a08:	003fd306 	br	3958 <__alt_mem_Flash_flash_data+0xf4003958>

00003a0c <_free_r>:
    3a0c:	28004c26 	beq	r5,zero,3b40 <_free_r+0x134>
    3a10:	defffd04 	addi	sp,sp,-12
    3a14:	dc400115 	stw	r17,4(sp)
    3a18:	dc000015 	stw	r16,0(sp)
    3a1c:	2023883a 	mov	r17,r4
    3a20:	2821883a 	mov	r16,r5
    3a24:	dfc00215 	stw	ra,8(sp)
    3a28:	00051bc0 	call	51bc <__malloc_lock>
    3a2c:	813fff17 	ldw	r4,-4(r16)
    3a30:	00bfff84 	movi	r2,-2
    3a34:	02400074 	movhi	r9,1
    3a38:	81bffe04 	addi	r6,r16,-8
    3a3c:	2084703a 	and	r2,r4,r2
    3a40:	4a457804 	addi	r9,r9,5600
    3a44:	308b883a 	add	r5,r6,r2
    3a48:	2a000117 	ldw	r8,4(r5)
    3a4c:	49c00217 	ldw	r7,8(r9)
    3a50:	00ffff04 	movi	r3,-4
    3a54:	40c6703a 	and	r3,r8,r3
    3a58:	39405326 	beq	r7,r5,3ba8 <_free_r+0x19c>
    3a5c:	28c00115 	stw	r3,4(r5)
    3a60:	2100004c 	andi	r4,r4,1
    3a64:	2000091e 	bne	r4,zero,3a8c <_free_r+0x80>
    3a68:	81fffe17 	ldw	r7,-8(r16)
    3a6c:	4a000204 	addi	r8,r9,8
    3a70:	31cdc83a 	sub	r6,r6,r7
    3a74:	31000217 	ldw	r4,8(r6)
    3a78:	11c5883a 	add	r2,r2,r7
    3a7c:	22006126 	beq	r4,r8,3c04 <_free_r+0x1f8>
    3a80:	31c00317 	ldw	r7,12(r6)
    3a84:	21c00315 	stw	r7,12(r4)
    3a88:	39000215 	stw	r4,8(r7)
    3a8c:	28c9883a 	add	r4,r5,r3
    3a90:	21c00117 	ldw	r7,4(r4)
    3a94:	39c0004c 	andi	r7,r7,1
    3a98:	38000d1e 	bne	r7,zero,3ad0 <_free_r+0xc4>
    3a9c:	29000217 	ldw	r4,8(r5)
    3aa0:	10c5883a 	add	r2,r2,r3
    3aa4:	00c00074 	movhi	r3,1
    3aa8:	18c57a04 	addi	r3,r3,5608
    3aac:	20c07526 	beq	r4,r3,3c84 <_free_r+0x278>
    3ab0:	29c00317 	ldw	r7,12(r5)
    3ab4:	11400054 	ori	r5,r2,1
    3ab8:	3087883a 	add	r3,r6,r2
    3abc:	21c00315 	stw	r7,12(r4)
    3ac0:	39000215 	stw	r4,8(r7)
    3ac4:	31400115 	stw	r5,4(r6)
    3ac8:	18800015 	stw	r2,0(r3)
    3acc:	00000406 	br	3ae0 <_free_r+0xd4>
    3ad0:	10c00054 	ori	r3,r2,1
    3ad4:	30c00115 	stw	r3,4(r6)
    3ad8:	3087883a 	add	r3,r6,r2
    3adc:	18800015 	stw	r2,0(r3)
    3ae0:	00c07fc4 	movi	r3,511
    3ae4:	18801736 	bltu	r3,r2,3b44 <_free_r+0x138>
    3ae8:	1004d0fa 	srli	r2,r2,3
    3aec:	01400044 	movi	r5,1
    3af0:	49000117 	ldw	r4,4(r9)
    3af4:	1087883a 	add	r3,r2,r2
    3af8:	18c7883a 	add	r3,r3,r3
    3afc:	1005d0ba 	srai	r2,r2,2
    3b00:	18c7883a 	add	r3,r3,r3
    3b04:	1a47883a 	add	r3,r3,r9
    3b08:	19c00217 	ldw	r7,8(r3)
    3b0c:	2884983a 	sll	r2,r5,r2
    3b10:	30c00315 	stw	r3,12(r6)
    3b14:	31c00215 	stw	r7,8(r6)
    3b18:	1104b03a 	or	r2,r2,r4
    3b1c:	19800215 	stw	r6,8(r3)
    3b20:	48800115 	stw	r2,4(r9)
    3b24:	39800315 	stw	r6,12(r7)
    3b28:	8809883a 	mov	r4,r17
    3b2c:	dfc00217 	ldw	ra,8(sp)
    3b30:	dc400117 	ldw	r17,4(sp)
    3b34:	dc000017 	ldw	r16,0(sp)
    3b38:	dec00304 	addi	sp,sp,12
    3b3c:	00052dc1 	jmpi	52dc <__malloc_unlock>
    3b40:	f800283a 	ret
    3b44:	1006d27a 	srli	r3,r2,9
    3b48:	01000104 	movi	r4,4
    3b4c:	20c04036 	bltu	r4,r3,3c50 <_free_r+0x244>
    3b50:	1006d1ba 	srli	r3,r2,6
    3b54:	19400e04 	addi	r5,r3,56
    3b58:	2947883a 	add	r3,r5,r5
    3b5c:	18c7883a 	add	r3,r3,r3
    3b60:	18c7883a 	add	r3,r3,r3
    3b64:	1a49883a 	add	r4,r3,r9
    3b68:	20c00217 	ldw	r3,8(r4)
    3b6c:	01c00074 	movhi	r7,1
    3b70:	39c57804 	addi	r7,r7,5600
    3b74:	19003b26 	beq	r3,r4,3c64 <_free_r+0x258>
    3b78:	01ffff04 	movi	r7,-4
    3b7c:	19400117 	ldw	r5,4(r3)
    3b80:	29ca703a 	and	r5,r5,r7
    3b84:	1140022e 	bgeu	r2,r5,3b90 <_free_r+0x184>
    3b88:	18c00217 	ldw	r3,8(r3)
    3b8c:	20fffb1e 	bne	r4,r3,3b7c <__alt_mem_Flash_flash_data+0xf4003b7c>
    3b90:	18800317 	ldw	r2,12(r3)
    3b94:	30800315 	stw	r2,12(r6)
    3b98:	30c00215 	stw	r3,8(r6)
    3b9c:	11800215 	stw	r6,8(r2)
    3ba0:	19800315 	stw	r6,12(r3)
    3ba4:	003fe006 	br	3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3ba8:	2100004c 	andi	r4,r4,1
    3bac:	1885883a 	add	r2,r3,r2
    3bb0:	2000071e 	bne	r4,zero,3bd0 <_free_r+0x1c4>
    3bb4:	817ffe17 	ldw	r5,-8(r16)
    3bb8:	314dc83a 	sub	r6,r6,r5
    3bbc:	30c00317 	ldw	r3,12(r6)
    3bc0:	31000217 	ldw	r4,8(r6)
    3bc4:	1145883a 	add	r2,r2,r5
    3bc8:	20c00315 	stw	r3,12(r4)
    3bcc:	19000215 	stw	r4,8(r3)
    3bd0:	10c00054 	ori	r3,r2,1
    3bd4:	30c00115 	stw	r3,4(r6)
    3bd8:	00c00074 	movhi	r3,1
    3bdc:	18cbf104 	addi	r3,r3,12228
    3be0:	18c00017 	ldw	r3,0(r3)
    3be4:	49800215 	stw	r6,8(r9)
    3be8:	10ffcf36 	bltu	r2,r3,3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3bec:	00800074 	movhi	r2,1
    3bf0:	1093e104 	addi	r2,r2,20356
    3bf4:	11400017 	ldw	r5,0(r2)
    3bf8:	8809883a 	mov	r4,r17
    3bfc:	00038e80 	call	38e8 <_malloc_trim_r>
    3c00:	003fc906 	br	3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3c04:	28c9883a 	add	r4,r5,r3
    3c08:	21000117 	ldw	r4,4(r4)
    3c0c:	2100004c 	andi	r4,r4,1
    3c10:	20000a1e 	bne	r4,zero,3c3c <_free_r+0x230>
    3c14:	29000317 	ldw	r4,12(r5)
    3c18:	29400217 	ldw	r5,8(r5)
    3c1c:	10c5883a 	add	r2,r2,r3
    3c20:	10c00054 	ori	r3,r2,1
    3c24:	29000315 	stw	r4,12(r5)
    3c28:	21400215 	stw	r5,8(r4)
    3c2c:	30c00115 	stw	r3,4(r6)
    3c30:	308d883a 	add	r6,r6,r2
    3c34:	30800015 	stw	r2,0(r6)
    3c38:	003fbb06 	br	3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3c3c:	10c00054 	ori	r3,r2,1
    3c40:	30c00115 	stw	r3,4(r6)
    3c44:	308d883a 	add	r6,r6,r2
    3c48:	30800015 	stw	r2,0(r6)
    3c4c:	003fb606 	br	3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3c50:	01000504 	movi	r4,20
    3c54:	20c01436 	bltu	r4,r3,3ca8 <_free_r+0x29c>
    3c58:	194016c4 	addi	r5,r3,91
    3c5c:	2947883a 	add	r3,r5,r5
    3c60:	003fbe06 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3c64:	280bd0ba 	srai	r5,r5,2
    3c68:	00800044 	movi	r2,1
    3c6c:	39000117 	ldw	r4,4(r7)
    3c70:	114a983a 	sll	r5,r2,r5
    3c74:	1805883a 	mov	r2,r3
    3c78:	2908b03a 	or	r4,r5,r4
    3c7c:	39000115 	stw	r4,4(r7)
    3c80:	003fc406 	br	3b94 <__alt_mem_Flash_flash_data+0xf4003b94>
    3c84:	49800515 	stw	r6,20(r9)
    3c88:	49800415 	stw	r6,16(r9)
    3c8c:	10c00054 	ori	r3,r2,1
    3c90:	31000315 	stw	r4,12(r6)
    3c94:	31000215 	stw	r4,8(r6)
    3c98:	30c00115 	stw	r3,4(r6)
    3c9c:	308d883a 	add	r6,r6,r2
    3ca0:	30800015 	stw	r2,0(r6)
    3ca4:	003fa006 	br	3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3ca8:	01001504 	movi	r4,84
    3cac:	20c00436 	bltu	r4,r3,3cc0 <_free_r+0x2b4>
    3cb0:	1006d33a 	srli	r3,r2,12
    3cb4:	19401b84 	addi	r5,r3,110
    3cb8:	2947883a 	add	r3,r5,r5
    3cbc:	003fa706 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3cc0:	01005504 	movi	r4,340
    3cc4:	20c00436 	bltu	r4,r3,3cd8 <_free_r+0x2cc>
    3cc8:	1006d3fa 	srli	r3,r2,15
    3ccc:	19401dc4 	addi	r5,r3,119
    3cd0:	2947883a 	add	r3,r5,r5
    3cd4:	003fa106 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3cd8:	01015504 	movi	r4,1364
    3cdc:	20c00436 	bltu	r4,r3,3cf0 <_free_r+0x2e4>
    3ce0:	1006d4ba 	srli	r3,r2,18
    3ce4:	19401f04 	addi	r5,r3,124
    3ce8:	2947883a 	add	r3,r5,r5
    3cec:	003f9b06 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>
    3cf0:	00c03f04 	movi	r3,252
    3cf4:	01401f84 	movi	r5,126
    3cf8:	003f9806 	br	3b5c <__alt_mem_Flash_flash_data+0xf4003b5c>

00003cfc <_fwalk>:
    3cfc:	defff704 	addi	sp,sp,-36
    3d00:	dd000415 	stw	r20,16(sp)
    3d04:	dfc00815 	stw	ra,32(sp)
    3d08:	ddc00715 	stw	r23,28(sp)
    3d0c:	dd800615 	stw	r22,24(sp)
    3d10:	dd400515 	stw	r21,20(sp)
    3d14:	dcc00315 	stw	r19,12(sp)
    3d18:	dc800215 	stw	r18,8(sp)
    3d1c:	dc400115 	stw	r17,4(sp)
    3d20:	dc000015 	stw	r16,0(sp)
    3d24:	2500b804 	addi	r20,r4,736
    3d28:	a0002326 	beq	r20,zero,3db8 <_fwalk+0xbc>
    3d2c:	282b883a 	mov	r21,r5
    3d30:	002f883a 	mov	r23,zero
    3d34:	05800044 	movi	r22,1
    3d38:	04ffffc4 	movi	r19,-1
    3d3c:	a4400117 	ldw	r17,4(r20)
    3d40:	a4800217 	ldw	r18,8(r20)
    3d44:	8c7fffc4 	addi	r17,r17,-1
    3d48:	88000d16 	blt	r17,zero,3d80 <_fwalk+0x84>
    3d4c:	94000304 	addi	r16,r18,12
    3d50:	94800384 	addi	r18,r18,14
    3d54:	80c0000b 	ldhu	r3,0(r16)
    3d58:	8c7fffc4 	addi	r17,r17,-1
    3d5c:	813ffd04 	addi	r4,r16,-12
    3d60:	b0c0042e 	bgeu	r22,r3,3d74 <_fwalk+0x78>
    3d64:	90c0000f 	ldh	r3,0(r18)
    3d68:	1cc00226 	beq	r3,r19,3d74 <_fwalk+0x78>
    3d6c:	a83ee83a 	callr	r21
    3d70:	b8aeb03a 	or	r23,r23,r2
    3d74:	84001a04 	addi	r16,r16,104
    3d78:	94801a04 	addi	r18,r18,104
    3d7c:	8cfff51e 	bne	r17,r19,3d54 <__alt_mem_Flash_flash_data+0xf4003d54>
    3d80:	a5000017 	ldw	r20,0(r20)
    3d84:	a03fed1e 	bne	r20,zero,3d3c <__alt_mem_Flash_flash_data+0xf4003d3c>
    3d88:	b805883a 	mov	r2,r23
    3d8c:	dfc00817 	ldw	ra,32(sp)
    3d90:	ddc00717 	ldw	r23,28(sp)
    3d94:	dd800617 	ldw	r22,24(sp)
    3d98:	dd400517 	ldw	r21,20(sp)
    3d9c:	dd000417 	ldw	r20,16(sp)
    3da0:	dcc00317 	ldw	r19,12(sp)
    3da4:	dc800217 	ldw	r18,8(sp)
    3da8:	dc400117 	ldw	r17,4(sp)
    3dac:	dc000017 	ldw	r16,0(sp)
    3db0:	dec00904 	addi	sp,sp,36
    3db4:	f800283a 	ret
    3db8:	002f883a 	mov	r23,zero
    3dbc:	003ff206 	br	3d88 <__alt_mem_Flash_flash_data+0xf4003d88>

00003dc0 <_fwalk_reent>:
    3dc0:	defff704 	addi	sp,sp,-36
    3dc4:	dd400515 	stw	r21,20(sp)
    3dc8:	dfc00815 	stw	ra,32(sp)
    3dcc:	ddc00715 	stw	r23,28(sp)
    3dd0:	dd800615 	stw	r22,24(sp)
    3dd4:	dd000415 	stw	r20,16(sp)
    3dd8:	dcc00315 	stw	r19,12(sp)
    3ddc:	dc800215 	stw	r18,8(sp)
    3de0:	dc400115 	stw	r17,4(sp)
    3de4:	dc000015 	stw	r16,0(sp)
    3de8:	2540b804 	addi	r21,r4,736
    3dec:	a8002326 	beq	r21,zero,3e7c <_fwalk_reent+0xbc>
    3df0:	2829883a 	mov	r20,r5
    3df4:	202d883a 	mov	r22,r4
    3df8:	002f883a 	mov	r23,zero
    3dfc:	04c00044 	movi	r19,1
    3e00:	04bfffc4 	movi	r18,-1
    3e04:	ac400117 	ldw	r17,4(r21)
    3e08:	ac000217 	ldw	r16,8(r21)
    3e0c:	8c7fffc4 	addi	r17,r17,-1
    3e10:	88000c16 	blt	r17,zero,3e44 <_fwalk_reent+0x84>
    3e14:	84000304 	addi	r16,r16,12
    3e18:	80c0000b 	ldhu	r3,0(r16)
    3e1c:	8c7fffc4 	addi	r17,r17,-1
    3e20:	817ffd04 	addi	r5,r16,-12
    3e24:	98c0052e 	bgeu	r19,r3,3e3c <_fwalk_reent+0x7c>
    3e28:	80c0008f 	ldh	r3,2(r16)
    3e2c:	b009883a 	mov	r4,r22
    3e30:	1c800226 	beq	r3,r18,3e3c <_fwalk_reent+0x7c>
    3e34:	a03ee83a 	callr	r20
    3e38:	b8aeb03a 	or	r23,r23,r2
    3e3c:	84001a04 	addi	r16,r16,104
    3e40:	8cbff51e 	bne	r17,r18,3e18 <__alt_mem_Flash_flash_data+0xf4003e18>
    3e44:	ad400017 	ldw	r21,0(r21)
    3e48:	a83fee1e 	bne	r21,zero,3e04 <__alt_mem_Flash_flash_data+0xf4003e04>
    3e4c:	b805883a 	mov	r2,r23
    3e50:	dfc00817 	ldw	ra,32(sp)
    3e54:	ddc00717 	ldw	r23,28(sp)
    3e58:	dd800617 	ldw	r22,24(sp)
    3e5c:	dd400517 	ldw	r21,20(sp)
    3e60:	dd000417 	ldw	r20,16(sp)
    3e64:	dcc00317 	ldw	r19,12(sp)
    3e68:	dc800217 	ldw	r18,8(sp)
    3e6c:	dc400117 	ldw	r17,4(sp)
    3e70:	dc000017 	ldw	r16,0(sp)
    3e74:	dec00904 	addi	sp,sp,36
    3e78:	f800283a 	ret
    3e7c:	002f883a 	mov	r23,zero
    3e80:	003ff206 	br	3e4c <__alt_mem_Flash_flash_data+0xf4003e4c>

00003e84 <__smakebuf_r>:
    3e84:	2880030b 	ldhu	r2,12(r5)
    3e88:	10c0008c 	andi	r3,r2,2
    3e8c:	1800401e 	bne	r3,zero,3f90 <__smakebuf_r+0x10c>
    3e90:	deffec04 	addi	sp,sp,-80
    3e94:	dc000f15 	stw	r16,60(sp)
    3e98:	2821883a 	mov	r16,r5
    3e9c:	2940038f 	ldh	r5,14(r5)
    3ea0:	dc401015 	stw	r17,64(sp)
    3ea4:	dfc01315 	stw	ra,76(sp)
    3ea8:	dcc01215 	stw	r19,72(sp)
    3eac:	dc801115 	stw	r18,68(sp)
    3eb0:	2023883a 	mov	r17,r4
    3eb4:	28001b16 	blt	r5,zero,3f24 <__smakebuf_r+0xa0>
    3eb8:	d80d883a 	mov	r6,sp
    3ebc:	00044500 	call	4450 <_fstat_r>
    3ec0:	10001716 	blt	r2,zero,3f20 <__smakebuf_r+0x9c>
    3ec4:	d8800117 	ldw	r2,4(sp)
    3ec8:	00e00014 	movui	r3,32768
    3ecc:	10bc000c 	andi	r2,r2,61440
    3ed0:	10c03726 	beq	r2,r3,3fb0 <__smakebuf_r+0x12c>
    3ed4:	80c0030b 	ldhu	r3,12(r16)
    3ed8:	18c20014 	ori	r3,r3,2048
    3edc:	80c0030d 	sth	r3,12(r16)
    3ee0:	00c80004 	movi	r3,8192
    3ee4:	10c03c1e 	bne	r2,r3,3fd8 <__smakebuf_r+0x154>
    3ee8:	8140038f 	ldh	r5,14(r16)
    3eec:	8809883a 	mov	r4,r17
    3ef0:	00044a80 	call	44a8 <_isatty_r>
    3ef4:	10004e26 	beq	r2,zero,4030 <__smakebuf_r+0x1ac>
    3ef8:	8080030b 	ldhu	r2,12(r16)
    3efc:	04c00044 	movi	r19,1
    3f00:	80c010c4 	addi	r3,r16,67
    3f04:	14c4b03a 	or	r2,r2,r19
    3f08:	8080030d 	sth	r2,12(r16)
    3f0c:	80c00015 	stw	r3,0(r16)
    3f10:	80c00415 	stw	r3,16(r16)
    3f14:	84c00515 	stw	r19,20(r16)
    3f18:	04810004 	movi	r18,1024
    3f1c:	00000706 	br	3f3c <__smakebuf_r+0xb8>
    3f20:	8080030b 	ldhu	r2,12(r16)
    3f24:	10c0200c 	andi	r3,r2,128
    3f28:	18001f1e 	bne	r3,zero,3fa8 <__smakebuf_r+0x124>
    3f2c:	04810004 	movi	r18,1024
    3f30:	10820014 	ori	r2,r2,2048
    3f34:	8080030d 	sth	r2,12(r16)
    3f38:	0027883a 	mov	r19,zero
    3f3c:	8809883a 	mov	r4,r17
    3f40:	900b883a 	mov	r5,r18
    3f44:	00020800 	call	2080 <_malloc_r>
    3f48:	10002e26 	beq	r2,zero,4004 <__smakebuf_r+0x180>
    3f4c:	80c0030b 	ldhu	r3,12(r16)
    3f50:	01000034 	movhi	r4,0
    3f54:	210d5604 	addi	r4,r4,13656
    3f58:	89000f15 	stw	r4,60(r17)
    3f5c:	18c02014 	ori	r3,r3,128
    3f60:	80c0030d 	sth	r3,12(r16)
    3f64:	80800015 	stw	r2,0(r16)
    3f68:	80800415 	stw	r2,16(r16)
    3f6c:	84800515 	stw	r18,20(r16)
    3f70:	98001c1e 	bne	r19,zero,3fe4 <__smakebuf_r+0x160>
    3f74:	dfc01317 	ldw	ra,76(sp)
    3f78:	dcc01217 	ldw	r19,72(sp)
    3f7c:	dc801117 	ldw	r18,68(sp)
    3f80:	dc401017 	ldw	r17,64(sp)
    3f84:	dc000f17 	ldw	r16,60(sp)
    3f88:	dec01404 	addi	sp,sp,80
    3f8c:	f800283a 	ret
    3f90:	288010c4 	addi	r2,r5,67
    3f94:	28800015 	stw	r2,0(r5)
    3f98:	28800415 	stw	r2,16(r5)
    3f9c:	00800044 	movi	r2,1
    3fa0:	28800515 	stw	r2,20(r5)
    3fa4:	f800283a 	ret
    3fa8:	04801004 	movi	r18,64
    3fac:	003fe006 	br	3f30 <__alt_mem_Flash_flash_data+0xf4003f30>
    3fb0:	81000a17 	ldw	r4,40(r16)
    3fb4:	00c00034 	movhi	r3,0
    3fb8:	18d08e04 	addi	r3,r3,16952
    3fbc:	20ffc51e 	bne	r4,r3,3ed4 <__alt_mem_Flash_flash_data+0xf4003ed4>
    3fc0:	80c0030b 	ldhu	r3,12(r16)
    3fc4:	01010004 	movi	r4,1024
    3fc8:	81001315 	stw	r4,76(r16)
    3fcc:	1906b03a 	or	r3,r3,r4
    3fd0:	80c0030d 	sth	r3,12(r16)
    3fd4:	003fc206 	br	3ee0 <__alt_mem_Flash_flash_data+0xf4003ee0>
    3fd8:	0027883a 	mov	r19,zero
    3fdc:	04810004 	movi	r18,1024
    3fe0:	003fd606 	br	3f3c <__alt_mem_Flash_flash_data+0xf4003f3c>
    3fe4:	8140038f 	ldh	r5,14(r16)
    3fe8:	8809883a 	mov	r4,r17
    3fec:	00044a80 	call	44a8 <_isatty_r>
    3ff0:	103fe026 	beq	r2,zero,3f74 <__alt_mem_Flash_flash_data+0xf4003f74>
    3ff4:	8080030b 	ldhu	r2,12(r16)
    3ff8:	10800054 	ori	r2,r2,1
    3ffc:	8080030d 	sth	r2,12(r16)
    4000:	003fdc06 	br	3f74 <__alt_mem_Flash_flash_data+0xf4003f74>
    4004:	8080030b 	ldhu	r2,12(r16)
    4008:	10c0800c 	andi	r3,r2,512
    400c:	183fd91e 	bne	r3,zero,3f74 <__alt_mem_Flash_flash_data+0xf4003f74>
    4010:	10800094 	ori	r2,r2,2
    4014:	80c010c4 	addi	r3,r16,67
    4018:	8080030d 	sth	r2,12(r16)
    401c:	00800044 	movi	r2,1
    4020:	80c00015 	stw	r3,0(r16)
    4024:	80c00415 	stw	r3,16(r16)
    4028:	80800515 	stw	r2,20(r16)
    402c:	003fd106 	br	3f74 <__alt_mem_Flash_flash_data+0xf4003f74>
    4030:	04c00044 	movi	r19,1
    4034:	04810004 	movi	r18,1024
    4038:	003fc006 	br	3f3c <__alt_mem_Flash_flash_data+0xf4003f3c>

0000403c <memset>:
    403c:	20c000cc 	andi	r3,r4,3
    4040:	2005883a 	mov	r2,r4
    4044:	18004326 	beq	r3,zero,4154 <memset+0x118>
    4048:	31ffffc4 	addi	r7,r6,-1
    404c:	30004026 	beq	r6,zero,4150 <memset+0x114>
    4050:	2813883a 	mov	r9,r5
    4054:	200d883a 	mov	r6,r4
    4058:	2007883a 	mov	r3,r4
    405c:	00000406 	br	4070 <memset+0x34>
    4060:	3a3fffc4 	addi	r8,r7,-1
    4064:	31800044 	addi	r6,r6,1
    4068:	38003926 	beq	r7,zero,4150 <memset+0x114>
    406c:	400f883a 	mov	r7,r8
    4070:	18c00044 	addi	r3,r3,1
    4074:	32400005 	stb	r9,0(r6)
    4078:	1a0000cc 	andi	r8,r3,3
    407c:	403ff81e 	bne	r8,zero,4060 <__alt_mem_Flash_flash_data+0xf4004060>
    4080:	010000c4 	movi	r4,3
    4084:	21c02d2e 	bgeu	r4,r7,413c <memset+0x100>
    4088:	29803fcc 	andi	r6,r5,255
    408c:	3008923a 	slli	r4,r6,8
    4090:	218cb03a 	or	r6,r4,r6
    4094:	3008943a 	slli	r4,r6,16
    4098:	218cb03a 	or	r6,r4,r6
    409c:	010003c4 	movi	r4,15
    40a0:	21c0182e 	bgeu	r4,r7,4104 <memset+0xc8>
    40a4:	3b3ffc04 	addi	r12,r7,-16
    40a8:	6018d13a 	srli	r12,r12,4
    40ac:	1a000104 	addi	r8,r3,4
    40b0:	1ac00204 	addi	r11,r3,8
    40b4:	6008913a 	slli	r4,r12,4
    40b8:	1a800304 	addi	r10,r3,12
    40bc:	1813883a 	mov	r9,r3
    40c0:	21000504 	addi	r4,r4,20
    40c4:	1909883a 	add	r4,r3,r4
    40c8:	49800015 	stw	r6,0(r9)
    40cc:	41800015 	stw	r6,0(r8)
    40d0:	59800015 	stw	r6,0(r11)
    40d4:	51800015 	stw	r6,0(r10)
    40d8:	42000404 	addi	r8,r8,16
    40dc:	4a400404 	addi	r9,r9,16
    40e0:	5ac00404 	addi	r11,r11,16
    40e4:	52800404 	addi	r10,r10,16
    40e8:	413ff71e 	bne	r8,r4,40c8 <__alt_mem_Flash_flash_data+0xf40040c8>
    40ec:	63000044 	addi	r12,r12,1
    40f0:	6018913a 	slli	r12,r12,4
    40f4:	39c003cc 	andi	r7,r7,15
    40f8:	010000c4 	movi	r4,3
    40fc:	1b07883a 	add	r3,r3,r12
    4100:	21c00e2e 	bgeu	r4,r7,413c <memset+0x100>
    4104:	1813883a 	mov	r9,r3
    4108:	3811883a 	mov	r8,r7
    410c:	010000c4 	movi	r4,3
    4110:	49800015 	stw	r6,0(r9)
    4114:	423fff04 	addi	r8,r8,-4
    4118:	4a400104 	addi	r9,r9,4
    411c:	223ffc36 	bltu	r4,r8,4110 <__alt_mem_Flash_flash_data+0xf4004110>
    4120:	393fff04 	addi	r4,r7,-4
    4124:	2008d0ba 	srli	r4,r4,2
    4128:	39c000cc 	andi	r7,r7,3
    412c:	21000044 	addi	r4,r4,1
    4130:	2109883a 	add	r4,r4,r4
    4134:	2109883a 	add	r4,r4,r4
    4138:	1907883a 	add	r3,r3,r4
    413c:	38000426 	beq	r7,zero,4150 <memset+0x114>
    4140:	19cf883a 	add	r7,r3,r7
    4144:	19400005 	stb	r5,0(r3)
    4148:	18c00044 	addi	r3,r3,1
    414c:	19fffd1e 	bne	r3,r7,4144 <__alt_mem_Flash_flash_data+0xf4004144>
    4150:	f800283a 	ret
    4154:	2007883a 	mov	r3,r4
    4158:	300f883a 	mov	r7,r6
    415c:	003fc806 	br	4080 <__alt_mem_Flash_flash_data+0xf4004080>

00004160 <__sread>:
    4160:	defffe04 	addi	sp,sp,-8
    4164:	dc000015 	stw	r16,0(sp)
    4168:	2821883a 	mov	r16,r5
    416c:	2940038f 	ldh	r5,14(r5)
    4170:	dfc00115 	stw	ra,4(sp)
    4174:	00045580 	call	4558 <_read_r>
    4178:	10000716 	blt	r2,zero,4198 <__sread+0x38>
    417c:	80c01417 	ldw	r3,80(r16)
    4180:	1887883a 	add	r3,r3,r2
    4184:	80c01415 	stw	r3,80(r16)
    4188:	dfc00117 	ldw	ra,4(sp)
    418c:	dc000017 	ldw	r16,0(sp)
    4190:	dec00204 	addi	sp,sp,8
    4194:	f800283a 	ret
    4198:	80c0030b 	ldhu	r3,12(r16)
    419c:	18fbffcc 	andi	r3,r3,61439
    41a0:	80c0030d 	sth	r3,12(r16)
    41a4:	dfc00117 	ldw	ra,4(sp)
    41a8:	dc000017 	ldw	r16,0(sp)
    41ac:	dec00204 	addi	sp,sp,8
    41b0:	f800283a 	ret

000041b4 <__seofread>:
    41b4:	0005883a 	mov	r2,zero
    41b8:	f800283a 	ret

000041bc <__swrite>:
    41bc:	2880030b 	ldhu	r2,12(r5)
    41c0:	defffb04 	addi	sp,sp,-20
    41c4:	dcc00315 	stw	r19,12(sp)
    41c8:	dc800215 	stw	r18,8(sp)
    41cc:	dc400115 	stw	r17,4(sp)
    41d0:	dc000015 	stw	r16,0(sp)
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	10c0400c 	andi	r3,r2,256
    41dc:	2821883a 	mov	r16,r5
    41e0:	2027883a 	mov	r19,r4
    41e4:	3025883a 	mov	r18,r6
    41e8:	3823883a 	mov	r17,r7
    41ec:	18000526 	beq	r3,zero,4204 <__swrite+0x48>
    41f0:	2940038f 	ldh	r5,14(r5)
    41f4:	000d883a 	mov	r6,zero
    41f8:	01c00084 	movi	r7,2
    41fc:	00044fc0 	call	44fc <_lseek_r>
    4200:	8080030b 	ldhu	r2,12(r16)
    4204:	8140038f 	ldh	r5,14(r16)
    4208:	10bbffcc 	andi	r2,r2,61439
    420c:	9809883a 	mov	r4,r19
    4210:	900d883a 	mov	r6,r18
    4214:	880f883a 	mov	r7,r17
    4218:	8080030d 	sth	r2,12(r16)
    421c:	dfc00417 	ldw	ra,16(sp)
    4220:	dcc00317 	ldw	r19,12(sp)
    4224:	dc800217 	ldw	r18,8(sp)
    4228:	dc400117 	ldw	r17,4(sp)
    422c:	dc000017 	ldw	r16,0(sp)
    4230:	dec00504 	addi	sp,sp,20
    4234:	000429c1 	jmpi	429c <_write_r>

00004238 <__sseek>:
    4238:	defffe04 	addi	sp,sp,-8
    423c:	dc000015 	stw	r16,0(sp)
    4240:	2821883a 	mov	r16,r5
    4244:	2940038f 	ldh	r5,14(r5)
    4248:	dfc00115 	stw	ra,4(sp)
    424c:	00044fc0 	call	44fc <_lseek_r>
    4250:	00ffffc4 	movi	r3,-1
    4254:	10c00826 	beq	r2,r3,4278 <__sseek+0x40>
    4258:	80c0030b 	ldhu	r3,12(r16)
    425c:	80801415 	stw	r2,80(r16)
    4260:	18c40014 	ori	r3,r3,4096
    4264:	80c0030d 	sth	r3,12(r16)
    4268:	dfc00117 	ldw	ra,4(sp)
    426c:	dc000017 	ldw	r16,0(sp)
    4270:	dec00204 	addi	sp,sp,8
    4274:	f800283a 	ret
    4278:	80c0030b 	ldhu	r3,12(r16)
    427c:	18fbffcc 	andi	r3,r3,61439
    4280:	80c0030d 	sth	r3,12(r16)
    4284:	dfc00117 	ldw	ra,4(sp)
    4288:	dc000017 	ldw	r16,0(sp)
    428c:	dec00204 	addi	sp,sp,8
    4290:	f800283a 	ret

00004294 <__sclose>:
    4294:	2940038f 	ldh	r5,14(r5)
    4298:	00042f81 	jmpi	42f8 <_close_r>

0000429c <_write_r>:
    429c:	defffd04 	addi	sp,sp,-12
    42a0:	dc000015 	stw	r16,0(sp)
    42a4:	04000074 	movhi	r16,1
    42a8:	dc400115 	stw	r17,4(sp)
    42ac:	8413e204 	addi	r16,r16,20360
    42b0:	2023883a 	mov	r17,r4
    42b4:	2809883a 	mov	r4,r5
    42b8:	300b883a 	mov	r5,r6
    42bc:	380d883a 	mov	r6,r7
    42c0:	dfc00215 	stw	ra,8(sp)
    42c4:	80000015 	stw	zero,0(r16)
    42c8:	0004fa80 	call	4fa8 <write>
    42cc:	00ffffc4 	movi	r3,-1
    42d0:	10c00526 	beq	r2,r3,42e8 <_write_r+0x4c>
    42d4:	dfc00217 	ldw	ra,8(sp)
    42d8:	dc400117 	ldw	r17,4(sp)
    42dc:	dc000017 	ldw	r16,0(sp)
    42e0:	dec00304 	addi	sp,sp,12
    42e4:	f800283a 	ret
    42e8:	80c00017 	ldw	r3,0(r16)
    42ec:	183ff926 	beq	r3,zero,42d4 <__alt_mem_Flash_flash_data+0xf40042d4>
    42f0:	88c00015 	stw	r3,0(r17)
    42f4:	003ff706 	br	42d4 <__alt_mem_Flash_flash_data+0xf40042d4>

000042f8 <_close_r>:
    42f8:	defffd04 	addi	sp,sp,-12
    42fc:	dc000015 	stw	r16,0(sp)
    4300:	04000074 	movhi	r16,1
    4304:	dc400115 	stw	r17,4(sp)
    4308:	8413e204 	addi	r16,r16,20360
    430c:	2023883a 	mov	r17,r4
    4310:	2809883a 	mov	r4,r5
    4314:	dfc00215 	stw	ra,8(sp)
    4318:	80000015 	stw	zero,0(r16)
    431c:	00047300 	call	4730 <close>
    4320:	00ffffc4 	movi	r3,-1
    4324:	10c00526 	beq	r2,r3,433c <_close_r+0x44>
    4328:	dfc00217 	ldw	ra,8(sp)
    432c:	dc400117 	ldw	r17,4(sp)
    4330:	dc000017 	ldw	r16,0(sp)
    4334:	dec00304 	addi	sp,sp,12
    4338:	f800283a 	ret
    433c:	80c00017 	ldw	r3,0(r16)
    4340:	183ff926 	beq	r3,zero,4328 <__alt_mem_Flash_flash_data+0xf4004328>
    4344:	88c00015 	stw	r3,0(r17)
    4348:	003ff706 	br	4328 <__alt_mem_Flash_flash_data+0xf4004328>

0000434c <_fclose_r>:
    434c:	28003926 	beq	r5,zero,4434 <_fclose_r+0xe8>
    4350:	defffc04 	addi	sp,sp,-16
    4354:	dc400115 	stw	r17,4(sp)
    4358:	dc000015 	stw	r16,0(sp)
    435c:	dfc00315 	stw	ra,12(sp)
    4360:	dc800215 	stw	r18,8(sp)
    4364:	2023883a 	mov	r17,r4
    4368:	2821883a 	mov	r16,r5
    436c:	20000226 	beq	r4,zero,4378 <_fclose_r+0x2c>
    4370:	20800e17 	ldw	r2,56(r4)
    4374:	10002726 	beq	r2,zero,4414 <_fclose_r+0xc8>
    4378:	8080030f 	ldh	r2,12(r16)
    437c:	1000071e 	bne	r2,zero,439c <_fclose_r+0x50>
    4380:	0005883a 	mov	r2,zero
    4384:	dfc00317 	ldw	ra,12(sp)
    4388:	dc800217 	ldw	r18,8(sp)
    438c:	dc400117 	ldw	r17,4(sp)
    4390:	dc000017 	ldw	r16,0(sp)
    4394:	dec00404 	addi	sp,sp,16
    4398:	f800283a 	ret
    439c:	8809883a 	mov	r4,r17
    43a0:	800b883a 	mov	r5,r16
    43a4:	00032b40 	call	32b4 <__sflush_r>
    43a8:	1025883a 	mov	r18,r2
    43ac:	80800b17 	ldw	r2,44(r16)
    43b0:	10000426 	beq	r2,zero,43c4 <_fclose_r+0x78>
    43b4:	81400717 	ldw	r5,28(r16)
    43b8:	8809883a 	mov	r4,r17
    43bc:	103ee83a 	callr	r2
    43c0:	10001616 	blt	r2,zero,441c <_fclose_r+0xd0>
    43c4:	8080030b 	ldhu	r2,12(r16)
    43c8:	1080200c 	andi	r2,r2,128
    43cc:	1000151e 	bne	r2,zero,4424 <_fclose_r+0xd8>
    43d0:	81400c17 	ldw	r5,48(r16)
    43d4:	28000526 	beq	r5,zero,43ec <_fclose_r+0xa0>
    43d8:	80801004 	addi	r2,r16,64
    43dc:	28800226 	beq	r5,r2,43e8 <_fclose_r+0x9c>
    43e0:	8809883a 	mov	r4,r17
    43e4:	0003a0c0 	call	3a0c <_free_r>
    43e8:	80000c15 	stw	zero,48(r16)
    43ec:	81401117 	ldw	r5,68(r16)
    43f0:	28000326 	beq	r5,zero,4400 <_fclose_r+0xb4>
    43f4:	8809883a 	mov	r4,r17
    43f8:	0003a0c0 	call	3a0c <_free_r>
    43fc:	80001115 	stw	zero,68(r16)
    4400:	00038a80 	call	38a8 <__sfp_lock_acquire>
    4404:	8000030d 	sth	zero,12(r16)
    4408:	00038ac0 	call	38ac <__sfp_lock_release>
    440c:	9005883a 	mov	r2,r18
    4410:	003fdc06 	br	4384 <__alt_mem_Flash_flash_data+0xf4004384>
    4414:	00038980 	call	3898 <__sinit>
    4418:	003fd706 	br	4378 <__alt_mem_Flash_flash_data+0xf4004378>
    441c:	04bfffc4 	movi	r18,-1
    4420:	003fe806 	br	43c4 <__alt_mem_Flash_flash_data+0xf40043c4>
    4424:	81400417 	ldw	r5,16(r16)
    4428:	8809883a 	mov	r4,r17
    442c:	0003a0c0 	call	3a0c <_free_r>
    4430:	003fe706 	br	43d0 <__alt_mem_Flash_flash_data+0xf40043d0>
    4434:	0005883a 	mov	r2,zero
    4438:	f800283a 	ret

0000443c <fclose>:
    443c:	00800074 	movhi	r2,1
    4440:	108bef04 	addi	r2,r2,12220
    4444:	200b883a 	mov	r5,r4
    4448:	11000017 	ldw	r4,0(r2)
    444c:	000434c1 	jmpi	434c <_fclose_r>

00004450 <_fstat_r>:
    4450:	defffd04 	addi	sp,sp,-12
    4454:	dc000015 	stw	r16,0(sp)
    4458:	04000074 	movhi	r16,1
    445c:	dc400115 	stw	r17,4(sp)
    4460:	8413e204 	addi	r16,r16,20360
    4464:	2023883a 	mov	r17,r4
    4468:	2809883a 	mov	r4,r5
    446c:	300b883a 	mov	r5,r6
    4470:	dfc00215 	stw	ra,8(sp)
    4474:	80000015 	stw	zero,0(r16)
    4478:	000487c0 	call	487c <fstat>
    447c:	00ffffc4 	movi	r3,-1
    4480:	10c00526 	beq	r2,r3,4498 <_fstat_r+0x48>
    4484:	dfc00217 	ldw	ra,8(sp)
    4488:	dc400117 	ldw	r17,4(sp)
    448c:	dc000017 	ldw	r16,0(sp)
    4490:	dec00304 	addi	sp,sp,12
    4494:	f800283a 	ret
    4498:	80c00017 	ldw	r3,0(r16)
    449c:	183ff926 	beq	r3,zero,4484 <__alt_mem_Flash_flash_data+0xf4004484>
    44a0:	88c00015 	stw	r3,0(r17)
    44a4:	003ff706 	br	4484 <__alt_mem_Flash_flash_data+0xf4004484>

000044a8 <_isatty_r>:
    44a8:	defffd04 	addi	sp,sp,-12
    44ac:	dc000015 	stw	r16,0(sp)
    44b0:	04000074 	movhi	r16,1
    44b4:	dc400115 	stw	r17,4(sp)
    44b8:	8413e204 	addi	r16,r16,20360
    44bc:	2023883a 	mov	r17,r4
    44c0:	2809883a 	mov	r4,r5
    44c4:	dfc00215 	stw	ra,8(sp)
    44c8:	80000015 	stw	zero,0(r16)
    44cc:	000497c0 	call	497c <isatty>
    44d0:	00ffffc4 	movi	r3,-1
    44d4:	10c00526 	beq	r2,r3,44ec <_isatty_r+0x44>
    44d8:	dfc00217 	ldw	ra,8(sp)
    44dc:	dc400117 	ldw	r17,4(sp)
    44e0:	dc000017 	ldw	r16,0(sp)
    44e4:	dec00304 	addi	sp,sp,12
    44e8:	f800283a 	ret
    44ec:	80c00017 	ldw	r3,0(r16)
    44f0:	183ff926 	beq	r3,zero,44d8 <__alt_mem_Flash_flash_data+0xf40044d8>
    44f4:	88c00015 	stw	r3,0(r17)
    44f8:	003ff706 	br	44d8 <__alt_mem_Flash_flash_data+0xf40044d8>

000044fc <_lseek_r>:
    44fc:	defffd04 	addi	sp,sp,-12
    4500:	dc000015 	stw	r16,0(sp)
    4504:	04000074 	movhi	r16,1
    4508:	dc400115 	stw	r17,4(sp)
    450c:	8413e204 	addi	r16,r16,20360
    4510:	2023883a 	mov	r17,r4
    4514:	2809883a 	mov	r4,r5
    4518:	300b883a 	mov	r5,r6
    451c:	380d883a 	mov	r6,r7
    4520:	dfc00215 	stw	ra,8(sp)
    4524:	80000015 	stw	zero,0(r16)
    4528:	0004b540 	call	4b54 <lseek>
    452c:	00ffffc4 	movi	r3,-1
    4530:	10c00526 	beq	r2,r3,4548 <_lseek_r+0x4c>
    4534:	dfc00217 	ldw	ra,8(sp)
    4538:	dc400117 	ldw	r17,4(sp)
    453c:	dc000017 	ldw	r16,0(sp)
    4540:	dec00304 	addi	sp,sp,12
    4544:	f800283a 	ret
    4548:	80c00017 	ldw	r3,0(r16)
    454c:	183ff926 	beq	r3,zero,4534 <__alt_mem_Flash_flash_data+0xf4004534>
    4550:	88c00015 	stw	r3,0(r17)
    4554:	003ff706 	br	4534 <__alt_mem_Flash_flash_data+0xf4004534>

00004558 <_read_r>:
    4558:	defffd04 	addi	sp,sp,-12
    455c:	dc000015 	stw	r16,0(sp)
    4560:	04000074 	movhi	r16,1
    4564:	dc400115 	stw	r17,4(sp)
    4568:	8413e204 	addi	r16,r16,20360
    456c:	2023883a 	mov	r17,r4
    4570:	2809883a 	mov	r4,r5
    4574:	300b883a 	mov	r5,r6
    4578:	380d883a 	mov	r6,r7
    457c:	dfc00215 	stw	ra,8(sp)
    4580:	80000015 	stw	zero,0(r16)
    4584:	0004d4c0 	call	4d4c <read>
    4588:	00ffffc4 	movi	r3,-1
    458c:	10c00526 	beq	r2,r3,45a4 <_read_r+0x4c>
    4590:	dfc00217 	ldw	ra,8(sp)
    4594:	dc400117 	ldw	r17,4(sp)
    4598:	dc000017 	ldw	r16,0(sp)
    459c:	dec00304 	addi	sp,sp,12
    45a0:	f800283a 	ret
    45a4:	80c00017 	ldw	r3,0(r16)
    45a8:	183ff926 	beq	r3,zero,4590 <__alt_mem_Flash_flash_data+0xf4004590>
    45ac:	88c00015 	stw	r3,0(r17)
    45b0:	003ff706 	br	4590 <__alt_mem_Flash_flash_data+0xf4004590>

000045b4 <udivmodsi4>:
    45b4:	2900182e 	bgeu	r5,r4,4618 <udivmodsi4+0x64>
    45b8:	28001716 	blt	r5,zero,4618 <udivmodsi4+0x64>
    45bc:	00800804 	movi	r2,32
    45c0:	00c00044 	movi	r3,1
    45c4:	00000206 	br	45d0 <udivmodsi4+0x1c>
    45c8:	10001126 	beq	r2,zero,4610 <udivmodsi4+0x5c>
    45cc:	28000516 	blt	r5,zero,45e4 <udivmodsi4+0x30>
    45d0:	294b883a 	add	r5,r5,r5
    45d4:	10bfffc4 	addi	r2,r2,-1
    45d8:	18c7883a 	add	r3,r3,r3
    45dc:	293ffa36 	bltu	r5,r4,45c8 <__alt_mem_Flash_flash_data+0xf40045c8>
    45e0:	18000b26 	beq	r3,zero,4610 <udivmodsi4+0x5c>
    45e4:	0005883a 	mov	r2,zero
    45e8:	21400236 	bltu	r4,r5,45f4 <udivmodsi4+0x40>
    45ec:	2149c83a 	sub	r4,r4,r5
    45f0:	10c4b03a 	or	r2,r2,r3
    45f4:	1806d07a 	srli	r3,r3,1
    45f8:	280ad07a 	srli	r5,r5,1
    45fc:	183ffa1e 	bne	r3,zero,45e8 <__alt_mem_Flash_flash_data+0xf40045e8>
    4600:	3000011e 	bne	r6,zero,4608 <udivmodsi4+0x54>
    4604:	f800283a 	ret
    4608:	2005883a 	mov	r2,r4
    460c:	f800283a 	ret
    4610:	0005883a 	mov	r2,zero
    4614:	003ffa06 	br	4600 <__alt_mem_Flash_flash_data+0xf4004600>
    4618:	00c00044 	movi	r3,1
    461c:	003ff106 	br	45e4 <__alt_mem_Flash_flash_data+0xf40045e4>

00004620 <__divsi3>:
    4620:	defffe04 	addi	sp,sp,-8
    4624:	dfc00115 	stw	ra,4(sp)
    4628:	dc000015 	stw	r16,0(sp)
    462c:	20000b16 	blt	r4,zero,465c <__divsi3+0x3c>
    4630:	0021883a 	mov	r16,zero
    4634:	28000c16 	blt	r5,zero,4668 <__divsi3+0x48>
    4638:	000d883a 	mov	r6,zero
    463c:	00045b40 	call	45b4 <udivmodsi4>
    4640:	0407c83a 	sub	r3,zero,r16
    4644:	1884f03a 	xor	r2,r3,r2
    4648:	1405883a 	add	r2,r2,r16
    464c:	dfc00117 	ldw	ra,4(sp)
    4650:	dc000017 	ldw	r16,0(sp)
    4654:	dec00204 	addi	sp,sp,8
    4658:	f800283a 	ret
    465c:	0109c83a 	sub	r4,zero,r4
    4660:	04000044 	movi	r16,1
    4664:	283ff40e 	bge	r5,zero,4638 <__alt_mem_Flash_flash_data+0xf4004638>
    4668:	014bc83a 	sub	r5,zero,r5
    466c:	8400005c 	xori	r16,r16,1
    4670:	003ff106 	br	4638 <__alt_mem_Flash_flash_data+0xf4004638>

00004674 <__modsi3>:
    4674:	defffd04 	addi	sp,sp,-12
    4678:	dfc00215 	stw	ra,8(sp)
    467c:	dc400115 	stw	r17,4(sp)
    4680:	dc000015 	stw	r16,0(sp)
    4684:	20000c16 	blt	r4,zero,46b8 <__modsi3+0x44>
    4688:	0023883a 	mov	r17,zero
    468c:	0021883a 	mov	r16,zero
    4690:	28000d16 	blt	r5,zero,46c8 <__modsi3+0x54>
    4694:	01800044 	movi	r6,1
    4698:	00045b40 	call	45b4 <udivmodsi4>
    469c:	1404f03a 	xor	r2,r2,r16
    46a0:	8885883a 	add	r2,r17,r2
    46a4:	dfc00217 	ldw	ra,8(sp)
    46a8:	dc400117 	ldw	r17,4(sp)
    46ac:	dc000017 	ldw	r16,0(sp)
    46b0:	dec00304 	addi	sp,sp,12
    46b4:	f800283a 	ret
    46b8:	0109c83a 	sub	r4,zero,r4
    46bc:	04400044 	movi	r17,1
    46c0:	043fffc4 	movi	r16,-1
    46c4:	283ff30e 	bge	r5,zero,4694 <__alt_mem_Flash_flash_data+0xf4004694>
    46c8:	014bc83a 	sub	r5,zero,r5
    46cc:	003ff106 	br	4694 <__alt_mem_Flash_flash_data+0xf4004694>

000046d0 <__udivsi3>:
    46d0:	000d883a 	mov	r6,zero
    46d4:	00045b41 	jmpi	45b4 <udivmodsi4>

000046d8 <__umodsi3>:
    46d8:	01800044 	movi	r6,1
    46dc:	00045b41 	jmpi	45b4 <udivmodsi4>

000046e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    46e0:	defffe04 	addi	sp,sp,-8
    46e4:	dfc00115 	stw	ra,4(sp)
    46e8:	df000015 	stw	fp,0(sp)
    46ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    46f0:	00800074 	movhi	r2,1
    46f4:	108bf704 	addi	r2,r2,12252
    46f8:	10800017 	ldw	r2,0(r2)
    46fc:	10000526 	beq	r2,zero,4714 <alt_get_errno+0x34>
    4700:	00800074 	movhi	r2,1
    4704:	108bf704 	addi	r2,r2,12252
    4708:	10800017 	ldw	r2,0(r2)
    470c:	103ee83a 	callr	r2
    4710:	00000206 	br	471c <alt_get_errno+0x3c>
    4714:	00800074 	movhi	r2,1
    4718:	1093e204 	addi	r2,r2,20360
}
    471c:	e037883a 	mov	sp,fp
    4720:	dfc00117 	ldw	ra,4(sp)
    4724:	df000017 	ldw	fp,0(sp)
    4728:	dec00204 	addi	sp,sp,8
    472c:	f800283a 	ret

00004730 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4730:	defffb04 	addi	sp,sp,-20
    4734:	dfc00415 	stw	ra,16(sp)
    4738:	df000315 	stw	fp,12(sp)
    473c:	df000304 	addi	fp,sp,12
    4740:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4744:	e0bfff17 	ldw	r2,-4(fp)
    4748:	10000616 	blt	r2,zero,4764 <close+0x34>
    474c:	e0bfff17 	ldw	r2,-4(fp)
    4750:	10c00324 	muli	r3,r2,12
    4754:	00800074 	movhi	r2,1
    4758:	10868404 	addi	r2,r2,6672
    475c:	1885883a 	add	r2,r3,r2
    4760:	00000106 	br	4768 <close+0x38>
    4764:	0005883a 	mov	r2,zero
    4768:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    476c:	e0bffd17 	ldw	r2,-12(fp)
    4770:	10001926 	beq	r2,zero,47d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4774:	e0bffd17 	ldw	r2,-12(fp)
    4778:	10800017 	ldw	r2,0(r2)
    477c:	10800417 	ldw	r2,16(r2)
    4780:	10000626 	beq	r2,zero,479c <close+0x6c>
    4784:	e0bffd17 	ldw	r2,-12(fp)
    4788:	10800017 	ldw	r2,0(r2)
    478c:	10800417 	ldw	r2,16(r2)
    4790:	e13ffd17 	ldw	r4,-12(fp)
    4794:	103ee83a 	callr	r2
    4798:	00000106 	br	47a0 <close+0x70>
    479c:	0005883a 	mov	r2,zero
    47a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    47a4:	e13fff17 	ldw	r4,-4(fp)
    47a8:	0004e480 	call	4e48 <alt_release_fd>
    if (rval < 0)
    47ac:	e0bffe17 	ldw	r2,-8(fp)
    47b0:	1000070e 	bge	r2,zero,47d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    47b4:	00046e00 	call	46e0 <alt_get_errno>
    47b8:	1007883a 	mov	r3,r2
    47bc:	e0bffe17 	ldw	r2,-8(fp)
    47c0:	0085c83a 	sub	r2,zero,r2
    47c4:	18800015 	stw	r2,0(r3)
      return -1;
    47c8:	00bfffc4 	movi	r2,-1
    47cc:	00000706 	br	47ec <close+0xbc>
    }
    return 0;
    47d0:	0005883a 	mov	r2,zero
    47d4:	00000506 	br	47ec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    47d8:	00046e00 	call	46e0 <alt_get_errno>
    47dc:	1007883a 	mov	r3,r2
    47e0:	00801444 	movi	r2,81
    47e4:	18800015 	stw	r2,0(r3)
    return -1;
    47e8:	00bfffc4 	movi	r2,-1
  }
}
    47ec:	e037883a 	mov	sp,fp
    47f0:	dfc00117 	ldw	ra,4(sp)
    47f4:	df000017 	ldw	fp,0(sp)
    47f8:	dec00204 	addi	sp,sp,8
    47fc:	f800283a 	ret

00004800 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4800:	defffc04 	addi	sp,sp,-16
    4804:	df000315 	stw	fp,12(sp)
    4808:	df000304 	addi	fp,sp,12
    480c:	e13ffd15 	stw	r4,-12(fp)
    4810:	e17ffe15 	stw	r5,-8(fp)
    4814:	e1bfff15 	stw	r6,-4(fp)
  return len;
    4818:	e0bfff17 	ldw	r2,-4(fp)
}
    481c:	e037883a 	mov	sp,fp
    4820:	df000017 	ldw	fp,0(sp)
    4824:	dec00104 	addi	sp,sp,4
    4828:	f800283a 	ret

0000482c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    482c:	defffe04 	addi	sp,sp,-8
    4830:	dfc00115 	stw	ra,4(sp)
    4834:	df000015 	stw	fp,0(sp)
    4838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    483c:	00800074 	movhi	r2,1
    4840:	108bf704 	addi	r2,r2,12252
    4844:	10800017 	ldw	r2,0(r2)
    4848:	10000526 	beq	r2,zero,4860 <alt_get_errno+0x34>
    484c:	00800074 	movhi	r2,1
    4850:	108bf704 	addi	r2,r2,12252
    4854:	10800017 	ldw	r2,0(r2)
    4858:	103ee83a 	callr	r2
    485c:	00000206 	br	4868 <alt_get_errno+0x3c>
    4860:	00800074 	movhi	r2,1
    4864:	1093e204 	addi	r2,r2,20360
}
    4868:	e037883a 	mov	sp,fp
    486c:	dfc00117 	ldw	ra,4(sp)
    4870:	df000017 	ldw	fp,0(sp)
    4874:	dec00204 	addi	sp,sp,8
    4878:	f800283a 	ret

0000487c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    487c:	defffb04 	addi	sp,sp,-20
    4880:	dfc00415 	stw	ra,16(sp)
    4884:	df000315 	stw	fp,12(sp)
    4888:	df000304 	addi	fp,sp,12
    488c:	e13ffe15 	stw	r4,-8(fp)
    4890:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4894:	e0bffe17 	ldw	r2,-8(fp)
    4898:	10000616 	blt	r2,zero,48b4 <fstat+0x38>
    489c:	e0bffe17 	ldw	r2,-8(fp)
    48a0:	10c00324 	muli	r3,r2,12
    48a4:	00800074 	movhi	r2,1
    48a8:	10868404 	addi	r2,r2,6672
    48ac:	1885883a 	add	r2,r3,r2
    48b0:	00000106 	br	48b8 <fstat+0x3c>
    48b4:	0005883a 	mov	r2,zero
    48b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    48bc:	e0bffd17 	ldw	r2,-12(fp)
    48c0:	10001026 	beq	r2,zero,4904 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    48c4:	e0bffd17 	ldw	r2,-12(fp)
    48c8:	10800017 	ldw	r2,0(r2)
    48cc:	10800817 	ldw	r2,32(r2)
    48d0:	10000726 	beq	r2,zero,48f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    48d4:	e0bffd17 	ldw	r2,-12(fp)
    48d8:	10800017 	ldw	r2,0(r2)
    48dc:	10800817 	ldw	r2,32(r2)
    48e0:	e13ffd17 	ldw	r4,-12(fp)
    48e4:	e17fff17 	ldw	r5,-4(fp)
    48e8:	103ee83a 	callr	r2
    48ec:	00000a06 	br	4918 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    48f0:	e0bfff17 	ldw	r2,-4(fp)
    48f4:	00c80004 	movi	r3,8192
    48f8:	10c00115 	stw	r3,4(r2)
      return 0;
    48fc:	0005883a 	mov	r2,zero
    4900:	00000506 	br	4918 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4904:	000482c0 	call	482c <alt_get_errno>
    4908:	1007883a 	mov	r3,r2
    490c:	00801444 	movi	r2,81
    4910:	18800015 	stw	r2,0(r3)
    return -1;
    4914:	00bfffc4 	movi	r2,-1
  }
}
    4918:	e037883a 	mov	sp,fp
    491c:	dfc00117 	ldw	ra,4(sp)
    4920:	df000017 	ldw	fp,0(sp)
    4924:	dec00204 	addi	sp,sp,8
    4928:	f800283a 	ret

0000492c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    492c:	defffe04 	addi	sp,sp,-8
    4930:	dfc00115 	stw	ra,4(sp)
    4934:	df000015 	stw	fp,0(sp)
    4938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    493c:	00800074 	movhi	r2,1
    4940:	108bf704 	addi	r2,r2,12252
    4944:	10800017 	ldw	r2,0(r2)
    4948:	10000526 	beq	r2,zero,4960 <alt_get_errno+0x34>
    494c:	00800074 	movhi	r2,1
    4950:	108bf704 	addi	r2,r2,12252
    4954:	10800017 	ldw	r2,0(r2)
    4958:	103ee83a 	callr	r2
    495c:	00000206 	br	4968 <alt_get_errno+0x3c>
    4960:	00800074 	movhi	r2,1
    4964:	1093e204 	addi	r2,r2,20360
}
    4968:	e037883a 	mov	sp,fp
    496c:	dfc00117 	ldw	ra,4(sp)
    4970:	df000017 	ldw	fp,0(sp)
    4974:	dec00204 	addi	sp,sp,8
    4978:	f800283a 	ret

0000497c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    497c:	deffed04 	addi	sp,sp,-76
    4980:	dfc01215 	stw	ra,72(sp)
    4984:	df001115 	stw	fp,68(sp)
    4988:	df001104 	addi	fp,sp,68
    498c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4990:	e0bfff17 	ldw	r2,-4(fp)
    4994:	10000616 	blt	r2,zero,49b0 <isatty+0x34>
    4998:	e0bfff17 	ldw	r2,-4(fp)
    499c:	10c00324 	muli	r3,r2,12
    49a0:	00800074 	movhi	r2,1
    49a4:	10868404 	addi	r2,r2,6672
    49a8:	1885883a 	add	r2,r3,r2
    49ac:	00000106 	br	49b4 <isatty+0x38>
    49b0:	0005883a 	mov	r2,zero
    49b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    49b8:	e0bfef17 	ldw	r2,-68(fp)
    49bc:	10000e26 	beq	r2,zero,49f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    49c0:	e0bfef17 	ldw	r2,-68(fp)
    49c4:	10800017 	ldw	r2,0(r2)
    49c8:	10800817 	ldw	r2,32(r2)
    49cc:	1000021e 	bne	r2,zero,49d8 <isatty+0x5c>
    {
      return 1;
    49d0:	00800044 	movi	r2,1
    49d4:	00000d06 	br	4a0c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    49d8:	e0bff004 	addi	r2,fp,-64
    49dc:	e13fff17 	ldw	r4,-4(fp)
    49e0:	100b883a 	mov	r5,r2
    49e4:	000487c0 	call	487c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    49e8:	e0bff117 	ldw	r2,-60(fp)
    49ec:	10880020 	cmpeqi	r2,r2,8192
    49f0:	10803fcc 	andi	r2,r2,255
    49f4:	00000506 	br	4a0c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    49f8:	000492c0 	call	492c <alt_get_errno>
    49fc:	1007883a 	mov	r3,r2
    4a00:	00801444 	movi	r2,81
    4a04:	18800015 	stw	r2,0(r3)
    return 0;
    4a08:	0005883a 	mov	r2,zero
  }
}
    4a0c:	e037883a 	mov	sp,fp
    4a10:	dfc00117 	ldw	ra,4(sp)
    4a14:	df000017 	ldw	fp,0(sp)
    4a18:	dec00204 	addi	sp,sp,8
    4a1c:	f800283a 	ret

00004a20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4a20:	defffc04 	addi	sp,sp,-16
    4a24:	df000315 	stw	fp,12(sp)
    4a28:	df000304 	addi	fp,sp,12
    4a2c:	e13ffd15 	stw	r4,-12(fp)
    4a30:	e17ffe15 	stw	r5,-8(fp)
    4a34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4a38:	e0fffe17 	ldw	r3,-8(fp)
    4a3c:	e0bffd17 	ldw	r2,-12(fp)
    4a40:	18800c26 	beq	r3,r2,4a74 <alt_load_section+0x54>
  {
    while( to != end )
    4a44:	00000806 	br	4a68 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4a48:	e0bffe17 	ldw	r2,-8(fp)
    4a4c:	10c00104 	addi	r3,r2,4
    4a50:	e0fffe15 	stw	r3,-8(fp)
    4a54:	e0fffd17 	ldw	r3,-12(fp)
    4a58:	19000104 	addi	r4,r3,4
    4a5c:	e13ffd15 	stw	r4,-12(fp)
    4a60:	18c00017 	ldw	r3,0(r3)
    4a64:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4a68:	e0fffe17 	ldw	r3,-8(fp)
    4a6c:	e0bfff17 	ldw	r2,-4(fp)
    4a70:	18bff51e 	bne	r3,r2,4a48 <__alt_mem_Flash_flash_data+0xf4004a48>
    {
      *to++ = *from++;
    }
  }
}
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4a84:	defffe04 	addi	sp,sp,-8
    4a88:	dfc00115 	stw	ra,4(sp)
    4a8c:	df000015 	stw	fp,0(sp)
    4a90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4a94:	01000074 	movhi	r4,1
    4a98:	210c1b04 	addi	r4,r4,12396
    4a9c:	01400074 	movhi	r5,1
    4aa0:	29446f04 	addi	r5,r5,4540
    4aa4:	01800074 	movhi	r6,1
    4aa8:	318c1b04 	addi	r6,r6,12396
    4aac:	0004a200 	call	4a20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4ab0:	01000034 	movhi	r4,0
    4ab4:	21000804 	addi	r4,r4,32
    4ab8:	01400034 	movhi	r5,0
    4abc:	29400804 	addi	r5,r5,32
    4ac0:	01800034 	movhi	r6,0
    4ac4:	31809104 	addi	r6,r6,580
    4ac8:	0004a200 	call	4a20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4acc:	01000074 	movhi	r4,1
    4ad0:	21038004 	addi	r4,r4,3584
    4ad4:	01400074 	movhi	r5,1
    4ad8:	29438004 	addi	r5,r5,3584
    4adc:	01800074 	movhi	r6,1
    4ae0:	31846f04 	addi	r6,r6,4540
    4ae4:	0004a200 	call	4a20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4ae8:	000f9a40 	call	f9a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4aec:	000fbfc0 	call	fbfc <alt_icache_flush_all>
}
    4af0:	e037883a 	mov	sp,fp
    4af4:	dfc00117 	ldw	ra,4(sp)
    4af8:	df000017 	ldw	fp,0(sp)
    4afc:	dec00204 	addi	sp,sp,8
    4b00:	f800283a 	ret

00004b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4b04:	defffe04 	addi	sp,sp,-8
    4b08:	dfc00115 	stw	ra,4(sp)
    4b0c:	df000015 	stw	fp,0(sp)
    4b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4b14:	00800074 	movhi	r2,1
    4b18:	108bf704 	addi	r2,r2,12252
    4b1c:	10800017 	ldw	r2,0(r2)
    4b20:	10000526 	beq	r2,zero,4b38 <alt_get_errno+0x34>
    4b24:	00800074 	movhi	r2,1
    4b28:	108bf704 	addi	r2,r2,12252
    4b2c:	10800017 	ldw	r2,0(r2)
    4b30:	103ee83a 	callr	r2
    4b34:	00000206 	br	4b40 <alt_get_errno+0x3c>
    4b38:	00800074 	movhi	r2,1
    4b3c:	1093e204 	addi	r2,r2,20360
}
    4b40:	e037883a 	mov	sp,fp
    4b44:	dfc00117 	ldw	ra,4(sp)
    4b48:	df000017 	ldw	fp,0(sp)
    4b4c:	dec00204 	addi	sp,sp,8
    4b50:	f800283a 	ret

00004b54 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4b54:	defff904 	addi	sp,sp,-28
    4b58:	dfc00615 	stw	ra,24(sp)
    4b5c:	df000515 	stw	fp,20(sp)
    4b60:	df000504 	addi	fp,sp,20
    4b64:	e13ffd15 	stw	r4,-12(fp)
    4b68:	e17ffe15 	stw	r5,-8(fp)
    4b6c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4b70:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4b74:	e0bffd17 	ldw	r2,-12(fp)
    4b78:	10000616 	blt	r2,zero,4b94 <lseek+0x40>
    4b7c:	e0bffd17 	ldw	r2,-12(fp)
    4b80:	10c00324 	muli	r3,r2,12
    4b84:	00800074 	movhi	r2,1
    4b88:	10868404 	addi	r2,r2,6672
    4b8c:	1885883a 	add	r2,r3,r2
    4b90:	00000106 	br	4b98 <lseek+0x44>
    4b94:	0005883a 	mov	r2,zero
    4b98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4b9c:	e0bffc17 	ldw	r2,-16(fp)
    4ba0:	10001026 	beq	r2,zero,4be4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4ba4:	e0bffc17 	ldw	r2,-16(fp)
    4ba8:	10800017 	ldw	r2,0(r2)
    4bac:	10800717 	ldw	r2,28(r2)
    4bb0:	10000926 	beq	r2,zero,4bd8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4bb4:	e0bffc17 	ldw	r2,-16(fp)
    4bb8:	10800017 	ldw	r2,0(r2)
    4bbc:	10800717 	ldw	r2,28(r2)
    4bc0:	e13ffc17 	ldw	r4,-16(fp)
    4bc4:	e17ffe17 	ldw	r5,-8(fp)
    4bc8:	e1bfff17 	ldw	r6,-4(fp)
    4bcc:	103ee83a 	callr	r2
    4bd0:	e0bffb15 	stw	r2,-20(fp)
    4bd4:	00000506 	br	4bec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    4bd8:	00bfde84 	movi	r2,-134
    4bdc:	e0bffb15 	stw	r2,-20(fp)
    4be0:	00000206 	br	4bec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    4be4:	00bfebc4 	movi	r2,-81
    4be8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    4bec:	e0bffb17 	ldw	r2,-20(fp)
    4bf0:	1000070e 	bge	r2,zero,4c10 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    4bf4:	0004b040 	call	4b04 <alt_get_errno>
    4bf8:	1007883a 	mov	r3,r2
    4bfc:	e0bffb17 	ldw	r2,-20(fp)
    4c00:	0085c83a 	sub	r2,zero,r2
    4c04:	18800015 	stw	r2,0(r3)
    rc = -1;
    4c08:	00bfffc4 	movi	r2,-1
    4c0c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    4c10:	e0bffb17 	ldw	r2,-20(fp)
}
    4c14:	e037883a 	mov	sp,fp
    4c18:	dfc00117 	ldw	ra,4(sp)
    4c1c:	df000017 	ldw	fp,0(sp)
    4c20:	dec00204 	addi	sp,sp,8
    4c24:	f800283a 	ret

00004c28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4c28:	defff904 	addi	sp,sp,-28
    4c2c:	dfc00615 	stw	ra,24(sp)
    4c30:	df000515 	stw	fp,20(sp)
    4c34:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4c38:	0009883a 	mov	r4,zero
    4c3c:	000d0740 	call	d074 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4c40:	0005c180 	call	5c18 <OSInit>
    4c44:	01000044 	movi	r4,1
    4c48:	000a7880 	call	a788 <OSSemCreate>
    4c4c:	1007883a 	mov	r3,r2
    4c50:	00800074 	movhi	r2,1
    4c54:	1093e804 	addi	r2,r2,20384
    4c58:	10c00015 	stw	r3,0(r2)
    4c5c:	01000044 	movi	r4,1
    4c60:	000a7880 	call	a788 <OSSemCreate>
    4c64:	1007883a 	mov	r3,r2
    4c68:	00800074 	movhi	r2,1
    4c6c:	1093ea04 	addi	r2,r2,20392
    4c70:	10c00015 	stw	r3,0(r2)
    4c74:	00800074 	movhi	r2,1
    4c78:	1093e304 	addi	r2,r2,20364
    4c7c:	e0bffc15 	stw	r2,-16(fp)
    4c80:	00800044 	movi	r2,1
    4c84:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    4c88:	e0bffd0b 	ldhu	r2,-12(fp)
    4c8c:	1009883a 	mov	r4,r2
    4c90:	000a7880 	call	a788 <OSSemCreate>
    4c94:	1007883a 	mov	r3,r2
    4c98:	e0bffc17 	ldw	r2,-16(fp)
    4c9c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4ca0:	000d0a80 	call	d0a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4ca4:	01000074 	movhi	r4,1
    4ca8:	2103b704 	addi	r4,r4,3804
    4cac:	01400074 	movhi	r5,1
    4cb0:	2943b704 	addi	r5,r5,3804
    4cb4:	01800074 	movhi	r6,1
    4cb8:	3183b704 	addi	r6,r6,3804
    4cbc:	000fcec0 	call	fcec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4cc0:	000fab40 	call	fab4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4cc4:	01000074 	movhi	r4,1
    4cc8:	213ec404 	addi	r4,r4,-1264
    4ccc:	00109b00 	call	109b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4cd0:	d1280417 	ldw	r4,-24560(gp)
    4cd4:	d0e80517 	ldw	r3,-24556(gp)
    4cd8:	d0a80617 	ldw	r2,-24552(gp)
    4cdc:	180b883a 	mov	r5,r3
    4ce0:	100d883a 	mov	r6,r2
    4ce4:	0000e540 	call	e54 <main>
    4ce8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    4cec:	01000044 	movi	r4,1
    4cf0:	00047300 	call	4730 <close>
  exit (result);
    4cf4:	e13ffb17 	ldw	r4,-20(fp)
    4cf8:	00109c40 	call	109c4 <exit>

00004cfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4cfc:	defffe04 	addi	sp,sp,-8
    4d00:	dfc00115 	stw	ra,4(sp)
    4d04:	df000015 	stw	fp,0(sp)
    4d08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4d0c:	00800074 	movhi	r2,1
    4d10:	108bf704 	addi	r2,r2,12252
    4d14:	10800017 	ldw	r2,0(r2)
    4d18:	10000526 	beq	r2,zero,4d30 <alt_get_errno+0x34>
    4d1c:	00800074 	movhi	r2,1
    4d20:	108bf704 	addi	r2,r2,12252
    4d24:	10800017 	ldw	r2,0(r2)
    4d28:	103ee83a 	callr	r2
    4d2c:	00000206 	br	4d38 <alt_get_errno+0x3c>
    4d30:	00800074 	movhi	r2,1
    4d34:	1093e204 	addi	r2,r2,20360
}
    4d38:	e037883a 	mov	sp,fp
    4d3c:	dfc00117 	ldw	ra,4(sp)
    4d40:	df000017 	ldw	fp,0(sp)
    4d44:	dec00204 	addi	sp,sp,8
    4d48:	f800283a 	ret

00004d4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4d4c:	defff904 	addi	sp,sp,-28
    4d50:	dfc00615 	stw	ra,24(sp)
    4d54:	df000515 	stw	fp,20(sp)
    4d58:	df000504 	addi	fp,sp,20
    4d5c:	e13ffd15 	stw	r4,-12(fp)
    4d60:	e17ffe15 	stw	r5,-8(fp)
    4d64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4d68:	e0bffd17 	ldw	r2,-12(fp)
    4d6c:	10000616 	blt	r2,zero,4d88 <read+0x3c>
    4d70:	e0bffd17 	ldw	r2,-12(fp)
    4d74:	10c00324 	muli	r3,r2,12
    4d78:	00800074 	movhi	r2,1
    4d7c:	10868404 	addi	r2,r2,6672
    4d80:	1885883a 	add	r2,r3,r2
    4d84:	00000106 	br	4d8c <read+0x40>
    4d88:	0005883a 	mov	r2,zero
    4d8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4d90:	e0bffb17 	ldw	r2,-20(fp)
    4d94:	10002226 	beq	r2,zero,4e20 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4d98:	e0bffb17 	ldw	r2,-20(fp)
    4d9c:	10800217 	ldw	r2,8(r2)
    4da0:	108000cc 	andi	r2,r2,3
    4da4:	10800060 	cmpeqi	r2,r2,1
    4da8:	1000181e 	bne	r2,zero,4e0c <read+0xc0>
        (fd->dev->read))
    4dac:	e0bffb17 	ldw	r2,-20(fp)
    4db0:	10800017 	ldw	r2,0(r2)
    4db4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4db8:	10001426 	beq	r2,zero,4e0c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4dbc:	e0bffb17 	ldw	r2,-20(fp)
    4dc0:	10800017 	ldw	r2,0(r2)
    4dc4:	10800517 	ldw	r2,20(r2)
    4dc8:	e0ffff17 	ldw	r3,-4(fp)
    4dcc:	e13ffb17 	ldw	r4,-20(fp)
    4dd0:	e17ffe17 	ldw	r5,-8(fp)
    4dd4:	180d883a 	mov	r6,r3
    4dd8:	103ee83a 	callr	r2
    4ddc:	e0bffc15 	stw	r2,-16(fp)
    4de0:	e0bffc17 	ldw	r2,-16(fp)
    4de4:	1000070e 	bge	r2,zero,4e04 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    4de8:	0004cfc0 	call	4cfc <alt_get_errno>
    4dec:	1007883a 	mov	r3,r2
    4df0:	e0bffc17 	ldw	r2,-16(fp)
    4df4:	0085c83a 	sub	r2,zero,r2
    4df8:	18800015 	stw	r2,0(r3)
          return -1;
    4dfc:	00bfffc4 	movi	r2,-1
    4e00:	00000c06 	br	4e34 <read+0xe8>
        }
        return rval;
    4e04:	e0bffc17 	ldw	r2,-16(fp)
    4e08:	00000a06 	br	4e34 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    4e0c:	0004cfc0 	call	4cfc <alt_get_errno>
    4e10:	1007883a 	mov	r3,r2
    4e14:	00800344 	movi	r2,13
    4e18:	18800015 	stw	r2,0(r3)
    4e1c:	00000406 	br	4e30 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4e20:	0004cfc0 	call	4cfc <alt_get_errno>
    4e24:	1007883a 	mov	r3,r2
    4e28:	00801444 	movi	r2,81
    4e2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4e30:	00bfffc4 	movi	r2,-1
}
    4e34:	e037883a 	mov	sp,fp
    4e38:	dfc00117 	ldw	ra,4(sp)
    4e3c:	df000017 	ldw	fp,0(sp)
    4e40:	dec00204 	addi	sp,sp,8
    4e44:	f800283a 	ret

00004e48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4e48:	defffe04 	addi	sp,sp,-8
    4e4c:	df000115 	stw	fp,4(sp)
    4e50:	df000104 	addi	fp,sp,4
    4e54:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4e58:	e0bfff17 	ldw	r2,-4(fp)
    4e5c:	108000d0 	cmplti	r2,r2,3
    4e60:	10000d1e 	bne	r2,zero,4e98 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4e64:	00800074 	movhi	r2,1
    4e68:	10868404 	addi	r2,r2,6672
    4e6c:	e0ffff17 	ldw	r3,-4(fp)
    4e70:	18c00324 	muli	r3,r3,12
    4e74:	18c00204 	addi	r3,r3,8
    4e78:	10c5883a 	add	r2,r2,r3
    4e7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4e80:	00800074 	movhi	r2,1
    4e84:	10868404 	addi	r2,r2,6672
    4e88:	e0ffff17 	ldw	r3,-4(fp)
    4e8c:	18c00324 	muli	r3,r3,12
    4e90:	10c5883a 	add	r2,r2,r3
    4e94:	10000015 	stw	zero,0(r2)
  }
}
    4e98:	e037883a 	mov	sp,fp
    4e9c:	df000017 	ldw	fp,0(sp)
    4ea0:	dec00104 	addi	sp,sp,4
    4ea4:	f800283a 	ret

00004ea8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4ea8:	defff904 	addi	sp,sp,-28
    4eac:	df000615 	stw	fp,24(sp)
    4eb0:	df000604 	addi	fp,sp,24
    4eb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4eb8:	0005303a 	rdctl	r2,status
    4ebc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ec0:	e0fffc17 	ldw	r3,-16(fp)
    4ec4:	00bfff84 	movi	r2,-2
    4ec8:	1884703a 	and	r2,r3,r2
    4ecc:	1001703a 	wrctl	status,r2
  
  return context;
    4ed0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    4ed4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4ed8:	d0a01817 	ldw	r2,-32672(gp)
    4edc:	10c000c4 	addi	r3,r2,3
    4ee0:	00bfff04 	movi	r2,-4
    4ee4:	1884703a 	and	r2,r3,r2
    4ee8:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4eec:	d0e01817 	ldw	r3,-32672(gp)
    4ef0:	e0bfff17 	ldw	r2,-4(fp)
    4ef4:	1887883a 	add	r3,r3,r2
    4ef8:	00810034 	movhi	r2,1024
    4efc:	10800004 	addi	r2,r2,0
    4f00:	10c0062e 	bgeu	r2,r3,4f1c <sbrk+0x74>
    4f04:	e0bffa17 	ldw	r2,-24(fp)
    4f08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f0c:	e0bffd17 	ldw	r2,-12(fp)
    4f10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    4f14:	00bfffc4 	movi	r2,-1
    4f18:	00000b06 	br	4f48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    4f1c:	d0a01817 	ldw	r2,-32672(gp)
    4f20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    4f24:	d0e01817 	ldw	r3,-32672(gp)
    4f28:	e0bfff17 	ldw	r2,-4(fp)
    4f2c:	1885883a 	add	r2,r3,r2
    4f30:	d0a01815 	stw	r2,-32672(gp)
    4f34:	e0bffa17 	ldw	r2,-24(fp)
    4f38:	e0bffe15 	stw	r2,-8(fp)
    4f3c:	e0bffe17 	ldw	r2,-8(fp)
    4f40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    4f44:	e0bffb17 	ldw	r2,-20(fp)
} 
    4f48:	e037883a 	mov	sp,fp
    4f4c:	df000017 	ldw	fp,0(sp)
    4f50:	dec00104 	addi	sp,sp,4
    4f54:	f800283a 	ret

00004f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4f58:	defffe04 	addi	sp,sp,-8
    4f5c:	dfc00115 	stw	ra,4(sp)
    4f60:	df000015 	stw	fp,0(sp)
    4f64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4f68:	00800074 	movhi	r2,1
    4f6c:	108bf704 	addi	r2,r2,12252
    4f70:	10800017 	ldw	r2,0(r2)
    4f74:	10000526 	beq	r2,zero,4f8c <alt_get_errno+0x34>
    4f78:	00800074 	movhi	r2,1
    4f7c:	108bf704 	addi	r2,r2,12252
    4f80:	10800017 	ldw	r2,0(r2)
    4f84:	103ee83a 	callr	r2
    4f88:	00000206 	br	4f94 <alt_get_errno+0x3c>
    4f8c:	00800074 	movhi	r2,1
    4f90:	1093e204 	addi	r2,r2,20360
}
    4f94:	e037883a 	mov	sp,fp
    4f98:	dfc00117 	ldw	ra,4(sp)
    4f9c:	df000017 	ldw	fp,0(sp)
    4fa0:	dec00204 	addi	sp,sp,8
    4fa4:	f800283a 	ret

00004fa8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4fa8:	defff904 	addi	sp,sp,-28
    4fac:	dfc00615 	stw	ra,24(sp)
    4fb0:	df000515 	stw	fp,20(sp)
    4fb4:	df000504 	addi	fp,sp,20
    4fb8:	e13ffd15 	stw	r4,-12(fp)
    4fbc:	e17ffe15 	stw	r5,-8(fp)
    4fc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4fc4:	e0bffd17 	ldw	r2,-12(fp)
    4fc8:	10000616 	blt	r2,zero,4fe4 <write+0x3c>
    4fcc:	e0bffd17 	ldw	r2,-12(fp)
    4fd0:	10c00324 	muli	r3,r2,12
    4fd4:	00800074 	movhi	r2,1
    4fd8:	10868404 	addi	r2,r2,6672
    4fdc:	1885883a 	add	r2,r3,r2
    4fe0:	00000106 	br	4fe8 <write+0x40>
    4fe4:	0005883a 	mov	r2,zero
    4fe8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4fec:	e0bffb17 	ldw	r2,-20(fp)
    4ff0:	10002126 	beq	r2,zero,5078 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4ff4:	e0bffb17 	ldw	r2,-20(fp)
    4ff8:	10800217 	ldw	r2,8(r2)
    4ffc:	108000cc 	andi	r2,r2,3
    5000:	10001826 	beq	r2,zero,5064 <write+0xbc>
    5004:	e0bffb17 	ldw	r2,-20(fp)
    5008:	10800017 	ldw	r2,0(r2)
    500c:	10800617 	ldw	r2,24(r2)
    5010:	10001426 	beq	r2,zero,5064 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5014:	e0bffb17 	ldw	r2,-20(fp)
    5018:	10800017 	ldw	r2,0(r2)
    501c:	10800617 	ldw	r2,24(r2)
    5020:	e0ffff17 	ldw	r3,-4(fp)
    5024:	e13ffb17 	ldw	r4,-20(fp)
    5028:	e17ffe17 	ldw	r5,-8(fp)
    502c:	180d883a 	mov	r6,r3
    5030:	103ee83a 	callr	r2
    5034:	e0bffc15 	stw	r2,-16(fp)
    5038:	e0bffc17 	ldw	r2,-16(fp)
    503c:	1000070e 	bge	r2,zero,505c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    5040:	0004f580 	call	4f58 <alt_get_errno>
    5044:	1007883a 	mov	r3,r2
    5048:	e0bffc17 	ldw	r2,-16(fp)
    504c:	0085c83a 	sub	r2,zero,r2
    5050:	18800015 	stw	r2,0(r3)
        return -1;
    5054:	00bfffc4 	movi	r2,-1
    5058:	00000c06 	br	508c <write+0xe4>
      }
      return rval;
    505c:	e0bffc17 	ldw	r2,-16(fp)
    5060:	00000a06 	br	508c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5064:	0004f580 	call	4f58 <alt_get_errno>
    5068:	1007883a 	mov	r3,r2
    506c:	00800344 	movi	r2,13
    5070:	18800015 	stw	r2,0(r3)
    5074:	00000406 	br	5088 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5078:	0004f580 	call	4f58 <alt_get_errno>
    507c:	1007883a 	mov	r3,r2
    5080:	00801444 	movi	r2,81
    5084:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5088:	00bfffc4 	movi	r2,-1
}
    508c:	e037883a 	mov	sp,fp
    5090:	dfc00117 	ldw	ra,4(sp)
    5094:	df000017 	ldw	fp,0(sp)
    5098:	dec00204 	addi	sp,sp,8
    509c:	f800283a 	ret

000050a0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    50a0:	deffdf04 	addi	sp,sp,-132
    50a4:	dfc02015 	stw	ra,128(sp)
    50a8:	df001f15 	stw	fp,124(sp)
    50ac:	df001f04 	addi	fp,sp,124
    50b0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    50b4:	e0bfe204 	addi	r2,fp,-120
    50b8:	01003fc4 	movi	r4,255
    50bc:	100b883a 	mov	r5,r2
    50c0:	000c93c0 	call	c93c <OSTaskQuery>
    50c4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    50c8:	e0bffe83 	ldbu	r2,-6(fp)
    50cc:	10803fcc 	andi	r2,r2,255
    50d0:	10000126 	beq	r2,zero,50d8 <__env_lock+0x38>
    return;
    50d4:	00001d06 	br	514c <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    50d8:	e0bfee83 	ldbu	r2,-70(fp)
    50dc:	10803fcc 	andi	r2,r2,255
    50e0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    50e4:	d0e80817 	ldw	r3,-24544(gp)
    50e8:	e0bffd04 	addi	r2,fp,-12
    50ec:	1809883a 	mov	r4,r3
    50f0:	100b883a 	mov	r5,r2
    50f4:	000afd40 	call	afd4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    50f8:	e0bffe43 	ldbu	r2,-7(fp)
    50fc:	10803fcc 	andi	r2,r2,255
    5100:	10000726 	beq	r2,zero,5120 <__env_lock+0x80>
    5104:	d0a01917 	ldw	r2,-32668(gp)
    5108:	e0ffe117 	ldw	r3,-124(fp)
    510c:	1880041e 	bne	r3,r2,5120 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    5110:	d0a80717 	ldw	r2,-24548(gp)
    5114:	10800044 	addi	r2,r2,1
    5118:	d0a80715 	stw	r2,-24548(gp)
    511c:	00000a06 	br	5148 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    5120:	d0e80817 	ldw	r3,-24544(gp)
    5124:	e0bffe84 	addi	r2,fp,-6
    5128:	1809883a 	mov	r4,r3
    512c:	000b883a 	mov	r5,zero
    5130:	100d883a 	mov	r6,r2
    5134:	000aaf00 	call	aaf0 <OSSemPend>
    locks  = 1;
    5138:	00800044 	movi	r2,1
    513c:	d0a80715 	stw	r2,-24548(gp)
    lockid = id;
    5140:	e0bfe117 	ldw	r2,-124(fp)
    5144:	d0a01915 	stw	r2,-32668(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    5148:	0001883a 	nop
}
    514c:	e037883a 	mov	sp,fp
    5150:	dfc00117 	ldw	ra,4(sp)
    5154:	df000017 	ldw	fp,0(sp)
    5158:	dec00204 	addi	sp,sp,8
    515c:	f800283a 	ret

00005160 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    5160:	defffd04 	addi	sp,sp,-12
    5164:	dfc00215 	stw	ra,8(sp)
    5168:	df000115 	stw	fp,4(sp)
    516c:	df000104 	addi	fp,sp,4
    5170:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    5174:	d0a80717 	ldw	r2,-24548(gp)
    5178:	1000011e 	bne	r2,zero,5180 <__env_unlock+0x20>
    return;
    517c:	00000a06 	br	51a8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    5180:	d0a80717 	ldw	r2,-24548(gp)
    5184:	10bfffc4 	addi	r2,r2,-1
    5188:	d0a80715 	stw	r2,-24548(gp)
    518c:	d0a80717 	ldw	r2,-24548(gp)
    5190:	1000051e 	bne	r2,zero,51a8 <__env_unlock+0x48>
  {
    lockid = -1;
    5194:	00bfffc4 	movi	r2,-1
    5198:	d0a01915 	stw	r2,-32668(gp)
    OSSemPost( alt_envsem );
    519c:	d0a80817 	ldw	r2,-24544(gp)
    51a0:	1009883a 	mov	r4,r2
    51a4:	000aec40 	call	aec4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    51a8:	e037883a 	mov	sp,fp
    51ac:	dfc00117 	ldw	ra,4(sp)
    51b0:	df000017 	ldw	fp,0(sp)
    51b4:	dec00204 	addi	sp,sp,8
    51b8:	f800283a 	ret

000051bc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    51bc:	deffdb04 	addi	sp,sp,-148
    51c0:	dfc02415 	stw	ra,144(sp)
    51c4:	df002315 	stw	fp,140(sp)
    51c8:	df002304 	addi	fp,sp,140
    51cc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    51d0:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    51d4:	00800074 	movhi	r2,1
    51d8:	1093eb44 	addi	r2,r2,20397
    51dc:	10800003 	ldbu	r2,0(r2)
    51e0:	10803fcc 	andi	r2,r2,255
    51e4:	10800060 	cmpeqi	r2,r2,1
    51e8:	1000011e 	bne	r2,zero,51f0 <__malloc_lock+0x34>
      return;
    51ec:	00003606 	br	52c8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    51f0:	e0bfe204 	addi	r2,fp,-120
    51f4:	01003fc4 	movi	r4,255
    51f8:	100b883a 	mov	r5,r2
    51fc:	000c93c0 	call	c93c <OSTaskQuery>
    5200:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    5204:	e0bffe83 	ldbu	r2,-6(fp)
    5208:	10803fcc 	andi	r2,r2,255
    520c:	10000126 	beq	r2,zero,5214 <__malloc_lock+0x58>
    return;
    5210:	00002d06 	br	52c8 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    5214:	e0bfee83 	ldbu	r2,-70(fp)
    5218:	10803fcc 	andi	r2,r2,255
    521c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    5220:	d0e80a17 	ldw	r3,-24536(gp)
    5224:	e0bffd04 	addi	r2,fp,-12
    5228:	1809883a 	mov	r4,r3
    522c:	100b883a 	mov	r5,r2
    5230:	000afd40 	call	afd4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5234:	0005303a 	rdctl	r2,status
    5238:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    523c:	e0ffdf17 	ldw	r3,-132(fp)
    5240:	00bfff84 	movi	r2,-2
    5244:	1884703a 	and	r2,r3,r2
    5248:	1001703a 	wrctl	status,r2
  
  return context;
    524c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    5250:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    5254:	e0bffd0b 	ldhu	r2,-12(fp)
    5258:	10bfffcc 	andi	r2,r2,65535
    525c:	10000b1e 	bne	r2,zero,528c <__malloc_lock+0xd0>
    5260:	d0a01a17 	ldw	r2,-32664(gp)
    5264:	e0ffde17 	ldw	r3,-136(fp)
    5268:	1880081e 	bne	r3,r2,528c <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    526c:	d0a80917 	ldw	r2,-24540(gp)
    5270:	10800044 	addi	r2,r2,1
    5274:	d0a80915 	stw	r2,-24540(gp)
    5278:	e0bfdd17 	ldw	r2,-140(fp)
    527c:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5280:	e0bfe017 	ldw	r2,-128(fp)
    5284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    5288:	00000e06 	br	52c4 <__malloc_lock+0x108>
    528c:	e0bfdd17 	ldw	r2,-140(fp)
    5290:	e0bfe115 	stw	r2,-124(fp)
    5294:	e0bfe117 	ldw	r2,-124(fp)
    5298:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    529c:	d0e80a17 	ldw	r3,-24536(gp)
    52a0:	e0bffe84 	addi	r2,fp,-6
    52a4:	1809883a 	mov	r4,r3
    52a8:	000b883a 	mov	r5,zero
    52ac:	100d883a 	mov	r6,r2
    52b0:	000aaf00 	call	aaf0 <OSSemPend>
    locks  = 1;
    52b4:	00800044 	movi	r2,1
    52b8:	d0a80915 	stw	r2,-24540(gp)
    lockid = id;
    52bc:	e0bfde17 	ldw	r2,-136(fp)
    52c0:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    52c4:	0001883a 	nop
}
    52c8:	e037883a 	mov	sp,fp
    52cc:	dfc00117 	ldw	ra,4(sp)
    52d0:	df000017 	ldw	fp,0(sp)
    52d4:	dec00204 	addi	sp,sp,8
    52d8:	f800283a 	ret

000052dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    52dc:	defff804 	addi	sp,sp,-32
    52e0:	dfc00715 	stw	ra,28(sp)
    52e4:	df000615 	stw	fp,24(sp)
    52e8:	df000604 	addi	fp,sp,24
    52ec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    52f0:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    52f4:	00800074 	movhi	r2,1
    52f8:	1093eb44 	addi	r2,r2,20397
    52fc:	10800003 	ldbu	r2,0(r2)
    5300:	10803fcc 	andi	r2,r2,255
    5304:	10800060 	cmpeqi	r2,r2,1
    5308:	1000011e 	bne	r2,zero,5310 <__malloc_unlock+0x34>
      return;
    530c:	00002206 	br	5398 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5310:	0005303a 	rdctl	r2,status
    5314:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5318:	e0fffb17 	ldw	r3,-20(fp)
    531c:	00bfff84 	movi	r2,-2
    5320:	1884703a 	and	r2,r3,r2
    5324:	1001703a 	wrctl	status,r2
  
  return context;
    5328:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    532c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    5330:	d0a80917 	ldw	r2,-24540(gp)
    5334:	1000051e 	bne	r2,zero,534c <__malloc_unlock+0x70>
    5338:	e0bffa17 	ldw	r2,-24(fp)
    533c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5340:	e0bffc17 	ldw	r2,-16(fp)
    5344:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    5348:	00001306 	br	5398 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    534c:	d0a80917 	ldw	r2,-24540(gp)
    5350:	10bfffc4 	addi	r2,r2,-1
    5354:	d0a80915 	stw	r2,-24540(gp)
    5358:	d0a80917 	ldw	r2,-24540(gp)
    535c:	10000a1e 	bne	r2,zero,5388 <__malloc_unlock+0xac>
  {
    lockid = -1;
    5360:	00bfffc4 	movi	r2,-1
    5364:	d0a01a15 	stw	r2,-32664(gp)
    5368:	e0bffa17 	ldw	r2,-24(fp)
    536c:	e0bffd15 	stw	r2,-12(fp)
    5370:	e0bffd17 	ldw	r2,-12(fp)
    5374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    5378:	d0a80a17 	ldw	r2,-24536(gp)
    537c:	1009883a 	mov	r4,r2
    5380:	000aec40 	call	aec4 <OSSemPost>
    5384:	00000406 	br	5398 <__malloc_unlock+0xbc>
    5388:	e0bffa17 	ldw	r2,-24(fp)
    538c:	e0bffe15 	stw	r2,-8(fp)
    5390:	e0bffe17 	ldw	r2,-8(fp)
    5394:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    5398:	e037883a 	mov	sp,fp
    539c:	dfc00117 	ldw	ra,4(sp)
    53a0:	df000017 	ldw	fp,0(sp)
    53a4:	dec00204 	addi	sp,sp,8
    53a8:	f800283a 	ret

000053ac <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    53ac:	defff704 	addi	sp,sp,-36
    53b0:	dfc00815 	stw	ra,32(sp)
    53b4:	df000715 	stw	fp,28(sp)
    53b8:	df000704 	addi	fp,sp,28
    53bc:	e13ffd15 	stw	r4,-12(fp)
    53c0:	e17ffe15 	stw	r5,-8(fp)
    53c4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    53c8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    53cc:	e0bfff17 	ldw	r2,-4(fp)
    53d0:	1000021e 	bne	r2,zero,53dc <OSEventNameGet+0x30>
        return (0);
    53d4:	0005883a 	mov	r2,zero
    53d8:	00003706 	br	54b8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    53dc:	e0bffd17 	ldw	r2,-12(fp)
    53e0:	1000051e 	bne	r2,zero,53f8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    53e4:	e0bfff17 	ldw	r2,-4(fp)
    53e8:	00c00104 	movi	r3,4
    53ec:	10c00005 	stb	r3,0(r2)
        return (0);
    53f0:	0005883a 	mov	r2,zero
    53f4:	00003006 	br	54b8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    53f8:	e0bffe17 	ldw	r2,-8(fp)
    53fc:	1000051e 	bne	r2,zero,5414 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    5400:	e0bfff17 	ldw	r2,-4(fp)
    5404:	00c00304 	movi	r3,12
    5408:	10c00005 	stb	r3,0(r2)
        return (0);
    540c:	0005883a 	mov	r2,zero
    5410:	00002906 	br	54b8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5414:	d0a81903 	ldbu	r2,-24476(gp)
    5418:	10803fcc 	andi	r2,r2,255
    541c:	10000526 	beq	r2,zero,5434 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    5420:	e0bfff17 	ldw	r2,-4(fp)
    5424:	00c00444 	movi	r3,17
    5428:	10c00005 	stb	r3,0(r2)
        return (0);
    542c:	0005883a 	mov	r2,zero
    5430:	00002106 	br	54b8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    5434:	e0bffd17 	ldw	r2,-12(fp)
    5438:	10800003 	ldbu	r2,0(r2)
    543c:	10803fcc 	andi	r2,r2,255
    5440:	10bfffc4 	addi	r2,r2,-1
    5444:	10800128 	cmpgeui	r2,r2,4
    5448:	10000526 	beq	r2,zero,5460 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    544c:	e0bfff17 	ldw	r2,-4(fp)
    5450:	00c00044 	movi	r3,1
    5454:	10c00005 	stb	r3,0(r2)
             return (0);
    5458:	0005883a 	mov	r2,zero
    545c:	00001606 	br	54b8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    5460:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5464:	0005303a 	rdctl	r2,status
    5468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    546c:	e0fffb17 	ldw	r3,-20(fp)
    5470:	00bfff84 	movi	r2,-2
    5474:	1884703a 	and	r2,r3,r2
    5478:	1001703a 	wrctl	status,r2
  
  return context;
    547c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    5480:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    5484:	e0bffd17 	ldw	r2,-12(fp)
    5488:	10800384 	addi	r2,r2,14
    548c:	e13ffe17 	ldw	r4,-8(fp)
    5490:	100b883a 	mov	r5,r2
    5494:	0006e000 	call	6e00 <OS_StrCopy>
    5498:	e0bffa05 	stb	r2,-24(fp)
    549c:	e0bff917 	ldw	r2,-28(fp)
    54a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    54a4:	e0bffc17 	ldw	r2,-16(fp)
    54a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    54ac:	e0bfff17 	ldw	r2,-4(fp)
    54b0:	10000005 	stb	zero,0(r2)
    return (len);
    54b4:	e0bffa03 	ldbu	r2,-24(fp)
}
    54b8:	e037883a 	mov	sp,fp
    54bc:	dfc00117 	ldw	ra,4(sp)
    54c0:	df000017 	ldw	fp,0(sp)
    54c4:	dec00204 	addi	sp,sp,8
    54c8:	f800283a 	ret

000054cc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    54cc:	defff604 	addi	sp,sp,-40
    54d0:	dfc00915 	stw	ra,36(sp)
    54d4:	df000815 	stw	fp,32(sp)
    54d8:	df000804 	addi	fp,sp,32
    54dc:	e13ffd15 	stw	r4,-12(fp)
    54e0:	e17ffe15 	stw	r5,-8(fp)
    54e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    54e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    54ec:	e0bfff17 	ldw	r2,-4(fp)
    54f0:	1000011e 	bne	r2,zero,54f8 <OSEventNameSet+0x2c>
        return;
    54f4:	00003f06 	br	55f4 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    54f8:	e0bffd17 	ldw	r2,-12(fp)
    54fc:	1000041e 	bne	r2,zero,5510 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    5500:	e0bfff17 	ldw	r2,-4(fp)
    5504:	00c00104 	movi	r3,4
    5508:	10c00005 	stb	r3,0(r2)
        return;
    550c:	00003906 	br	55f4 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5510:	e0bffe17 	ldw	r2,-8(fp)
    5514:	1000041e 	bne	r2,zero,5528 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    5518:	e0bfff17 	ldw	r2,-4(fp)
    551c:	00c00304 	movi	r3,12
    5520:	10c00005 	stb	r3,0(r2)
        return;
    5524:	00003306 	br	55f4 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5528:	d0a81903 	ldbu	r2,-24476(gp)
    552c:	10803fcc 	andi	r2,r2,255
    5530:	10000426 	beq	r2,zero,5544 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    5534:	e0bfff17 	ldw	r2,-4(fp)
    5538:	00c00484 	movi	r3,18
    553c:	10c00005 	stb	r3,0(r2)
        return;
    5540:	00002c06 	br	55f4 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    5544:	e0bffd17 	ldw	r2,-12(fp)
    5548:	10800003 	ldbu	r2,0(r2)
    554c:	10803fcc 	andi	r2,r2,255
    5550:	10bfffc4 	addi	r2,r2,-1
    5554:	10800128 	cmpgeui	r2,r2,4
    5558:	10000426 	beq	r2,zero,556c <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    555c:	e0bfff17 	ldw	r2,-4(fp)
    5560:	00c00044 	movi	r3,1
    5564:	10c00005 	stb	r3,0(r2)
             return;
    5568:	00002206 	br	55f4 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    556c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5570:	0005303a 	rdctl	r2,status
    5574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5578:	e0fffa17 	ldw	r3,-24(fp)
    557c:	00bfff84 	movi	r2,-2
    5580:	1884703a 	and	r2,r3,r2
    5584:	1001703a 	wrctl	status,r2
  
  return context;
    5588:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    558c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    5590:	e13ffe17 	ldw	r4,-8(fp)
    5594:	0006e740 	call	6e74 <OS_StrLen>
    5598:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    559c:	e0bff903 	ldbu	r2,-28(fp)
    55a0:	10800830 	cmpltui	r2,r2,32
    55a4:	1000081e 	bne	r2,zero,55c8 <OSEventNameSet+0xfc>
    55a8:	e0bff817 	ldw	r2,-32(fp)
    55ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55b0:	e0bffb17 	ldw	r2,-20(fp)
    55b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    55b8:	e0bfff17 	ldw	r2,-4(fp)
    55bc:	00c002c4 	movi	r3,11
    55c0:	10c00005 	stb	r3,0(r2)
        return;
    55c4:	00000b06 	br	55f4 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    55c8:	e0bffd17 	ldw	r2,-12(fp)
    55cc:	10800384 	addi	r2,r2,14
    55d0:	1009883a 	mov	r4,r2
    55d4:	e17ffe17 	ldw	r5,-8(fp)
    55d8:	0006e000 	call	6e00 <OS_StrCopy>
    55dc:	e0bff817 	ldw	r2,-32(fp)
    55e0:	e0bffc15 	stw	r2,-16(fp)
    55e4:	e0bffc17 	ldw	r2,-16(fp)
    55e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    55ec:	e0bfff17 	ldw	r2,-4(fp)
    55f0:	10000005 	stb	zero,0(r2)
}
    55f4:	e037883a 	mov	sp,fp
    55f8:	dfc00117 	ldw	ra,4(sp)
    55fc:	df000017 	ldw	fp,0(sp)
    5600:	dec00204 	addi	sp,sp,8
    5604:	f800283a 	ret

00005608 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    5608:	deffed04 	addi	sp,sp,-76
    560c:	dfc01215 	stw	ra,72(sp)
    5610:	df001115 	stw	fp,68(sp)
    5614:	df001104 	addi	fp,sp,68
    5618:	e13ffc15 	stw	r4,-16(fp)
    561c:	e17ffd15 	stw	r5,-12(fp)
    5620:	e1bffe15 	stw	r6,-8(fp)
    5624:	3805883a 	mov	r2,r7
    5628:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    562c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    5630:	e0800217 	ldw	r2,8(fp)
    5634:	1000021e 	bne	r2,zero,5640 <OSEventPendMulti+0x38>
        return (0);
    5638:	0005883a 	mov	r2,zero
    563c:	00017106 	br	5c04 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    5640:	e0bffc17 	ldw	r2,-16(fp)
    5644:	1000051e 	bne	r2,zero,565c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    5648:	e0800217 	ldw	r2,8(fp)
    564c:	00c00104 	movi	r3,4
    5650:	10c00005 	stb	r3,0(r2)
        return (0);
    5654:	0005883a 	mov	r2,zero
    5658:	00016a06 	br	5c04 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    565c:	e0bffd17 	ldw	r2,-12(fp)
    5660:	1000051e 	bne	r2,zero,5678 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    5664:	e0800217 	ldw	r2,8(fp)
    5668:	00c00104 	movi	r3,4
    566c:	10c00005 	stb	r3,0(r2)
        return (0);
    5670:	0005883a 	mov	r2,zero
    5674:	00016306 	br	5c04 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    5678:	e0bffe17 	ldw	r2,-8(fp)
    567c:	1000051e 	bne	r2,zero,5694 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    5680:	e0800217 	ldw	r2,8(fp)
    5684:	00c00104 	movi	r3,4
    5688:	10c00005 	stb	r3,0(r2)
        return (0);
    568c:	0005883a 	mov	r2,zero
    5690:	00015c06 	br	5c04 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    5694:	e0bffd17 	ldw	r2,-12(fp)
    5698:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    569c:	e0bffc17 	ldw	r2,-16(fp)
    56a0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    56a4:	e0bfef17 	ldw	r2,-68(fp)
    56a8:	10800017 	ldw	r2,0(r2)
    56ac:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    56b0:	00001906 	br	5718 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    56b4:	e0bff017 	ldw	r2,-64(fp)
    56b8:	10800003 	ldbu	r2,0(r2)
    56bc:	10803fcc 	andi	r2,r2,255
    56c0:	10c000a0 	cmpeqi	r3,r2,2
    56c4:	1800091e 	bne	r3,zero,56ec <OSEventPendMulti+0xe4>
    56c8:	10c000e0 	cmpeqi	r3,r2,3
    56cc:	1800091e 	bne	r3,zero,56f4 <OSEventPendMulti+0xec>
    56d0:	10800060 	cmpeqi	r2,r2,1
    56d4:	1000091e 	bne	r2,zero,56fc <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    56d8:	e0800217 	ldw	r2,8(fp)
    56dc:	00c00044 	movi	r3,1
    56e0:	10c00005 	stb	r3,0(r2)
                 return (0);
    56e4:	0005883a 	mov	r2,zero
    56e8:	00014606 	br	5c04 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    56ec:	0001883a 	nop
    56f0:	00000306 	br	5700 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    56f4:	0001883a 	nop
    56f8:	00000106 	br	5700 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    56fc:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    5700:	e0bfef17 	ldw	r2,-68(fp)
    5704:	10800104 	addi	r2,r2,4
    5708:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    570c:	e0bfef17 	ldw	r2,-68(fp)
    5710:	10800017 	ldw	r2,0(r2)
    5714:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    5718:	e0bff017 	ldw	r2,-64(fp)
    571c:	103fe51e 	bne	r2,zero,56b4 <__alt_mem_Flash_flash_data+0xf40056b4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    5720:	d0a81903 	ldbu	r2,-24476(gp)
    5724:	10803fcc 	andi	r2,r2,255
    5728:	10000526 	beq	r2,zero,5740 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    572c:	e0800217 	ldw	r2,8(fp)
    5730:	00c00084 	movi	r3,2
    5734:	10c00005 	stb	r3,0(r2)
        return (0);
    5738:	0005883a 	mov	r2,zero
    573c:	00013106 	br	5c04 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    5740:	d0a80b03 	ldbu	r2,-24532(gp)
    5744:	10803fcc 	andi	r2,r2,255
    5748:	10000526 	beq	r2,zero,5760 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    574c:	e0800217 	ldw	r2,8(fp)
    5750:	00c00344 	movi	r3,13
    5754:	10c00005 	stb	r3,0(r2)
        return (0);
    5758:	0005883a 	mov	r2,zero
    575c:	00012906 	br	5c04 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5760:	0005303a 	rdctl	r2,status
    5764:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5768:	e0fff517 	ldw	r3,-44(fp)
    576c:	00bfff84 	movi	r2,-2
    5770:	1884703a 	and	r2,r3,r2
    5774:	1001703a 	wrctl	status,r2
  
  return context;
    5778:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    577c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    5780:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    5784:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    5788:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    578c:	e0bffc17 	ldw	r2,-16(fp)
    5790:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    5794:	e0bfef17 	ldw	r2,-68(fp)
    5798:	10800017 	ldw	r2,0(r2)
    579c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    57a0:	00008106 	br	59a8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    57a4:	e0bff017 	ldw	r2,-64(fp)
    57a8:	10800003 	ldbu	r2,0(r2)
    57ac:	10803fcc 	andi	r2,r2,255
    57b0:	10c000a0 	cmpeqi	r3,r2,2
    57b4:	18003c1e 	bne	r3,zero,58a8 <OSEventPendMulti+0x2a0>
    57b8:	10c000e0 	cmpeqi	r3,r2,3
    57bc:	1800031e 	bne	r3,zero,57cc <OSEventPendMulti+0x1c4>
    57c0:	10800060 	cmpeqi	r2,r2,1
    57c4:	10001e1e 	bne	r2,zero,5840 <OSEventPendMulti+0x238>
    57c8:	00006606 	br	5964 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    57cc:	e0bff017 	ldw	r2,-64(fp)
    57d0:	1080020b 	ldhu	r2,8(r2)
    57d4:	10bfffcc 	andi	r2,r2,65535
    57d8:	10001526 	beq	r2,zero,5830 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    57dc:	e0bff017 	ldw	r2,-64(fp)
    57e0:	1080020b 	ldhu	r2,8(r2)
    57e4:	10bfffc4 	addi	r2,r2,-1
    57e8:	1007883a 	mov	r3,r2
    57ec:	e0bff017 	ldw	r2,-64(fp)
    57f0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    57f4:	e0bffd17 	ldw	r2,-12(fp)
    57f8:	10c00104 	addi	r3,r2,4
    57fc:	e0fffd15 	stw	r3,-12(fp)
    5800:	e0fff017 	ldw	r3,-64(fp)
    5804:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    5808:	00800044 	movi	r2,1
    580c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    5810:	e0bffe17 	ldw	r2,-8(fp)
    5814:	10c00104 	addi	r3,r2,4
    5818:	e0fffe15 	stw	r3,-8(fp)
    581c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    5820:	e0bff18b 	ldhu	r2,-58(fp)
    5824:	10800044 	addi	r2,r2,1
    5828:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    582c:	00005806 	br	5990 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    5830:	e0bff203 	ldbu	r2,-56(fp)
    5834:	10800054 	ori	r2,r2,1
    5838:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    583c:	00005406 	br	5990 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    5840:	e0bff017 	ldw	r2,-64(fp)
    5844:	10800117 	ldw	r2,4(r2)
    5848:	10001326 	beq	r2,zero,5898 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    584c:	e0bffe17 	ldw	r2,-8(fp)
    5850:	10c00104 	addi	r3,r2,4
    5854:	e0fffe15 	stw	r3,-8(fp)
    5858:	e0fff017 	ldw	r3,-64(fp)
    585c:	18c00117 	ldw	r3,4(r3)
    5860:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    5864:	e0bff017 	ldw	r2,-64(fp)
    5868:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    586c:	e0bffd17 	ldw	r2,-12(fp)
    5870:	10c00104 	addi	r3,r2,4
    5874:	e0fffd15 	stw	r3,-12(fp)
    5878:	e0fff017 	ldw	r3,-64(fp)
    587c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    5880:	00800044 	movi	r2,1
    5884:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    5888:	e0bff18b 	ldhu	r2,-58(fp)
    588c:	10800044 	addi	r2,r2,1
    5890:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    5894:	00003e06 	br	5990 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    5898:	e0bff203 	ldbu	r2,-56(fp)
    589c:	10800094 	ori	r2,r2,2
    58a0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    58a4:	00003a06 	br	5990 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    58a8:	e0bff017 	ldw	r2,-64(fp)
    58ac:	10800117 	ldw	r2,4(r2)
    58b0:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    58b4:	e0bff417 	ldw	r2,-48(fp)
    58b8:	1080058b 	ldhu	r2,22(r2)
    58bc:	10bfffcc 	andi	r2,r2,65535
    58c0:	10002426 	beq	r2,zero,5954 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    58c4:	e0bffe17 	ldw	r2,-8(fp)
    58c8:	10c00104 	addi	r3,r2,4
    58cc:	e0fffe15 	stw	r3,-8(fp)
    58d0:	e0fff417 	ldw	r3,-48(fp)
    58d4:	18c00417 	ldw	r3,16(r3)
    58d8:	19400104 	addi	r5,r3,4
    58dc:	e13ff417 	ldw	r4,-48(fp)
    58e0:	21400415 	stw	r5,16(r4)
    58e4:	18c00017 	ldw	r3,0(r3)
    58e8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    58ec:	e0bff417 	ldw	r2,-48(fp)
    58f0:	10c00417 	ldw	r3,16(r2)
    58f4:	e0bff417 	ldw	r2,-48(fp)
    58f8:	10800217 	ldw	r2,8(r2)
    58fc:	1880041e 	bne	r3,r2,5910 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    5900:	e0bff417 	ldw	r2,-48(fp)
    5904:	10c00117 	ldw	r3,4(r2)
    5908:	e0bff417 	ldw	r2,-48(fp)
    590c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    5910:	e0bff417 	ldw	r2,-48(fp)
    5914:	1080058b 	ldhu	r2,22(r2)
    5918:	10bfffc4 	addi	r2,r2,-1
    591c:	1007883a 	mov	r3,r2
    5920:	e0bff417 	ldw	r2,-48(fp)
    5924:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    5928:	e0bffd17 	ldw	r2,-12(fp)
    592c:	10c00104 	addi	r3,r2,4
    5930:	e0fffd15 	stw	r3,-12(fp)
    5934:	e0fff017 	ldw	r3,-64(fp)
    5938:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    593c:	00800044 	movi	r2,1
    5940:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    5944:	e0bff18b 	ldhu	r2,-58(fp)
    5948:	10800044 	addi	r2,r2,1
    594c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    5950:	00000f06 	br	5990 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    5954:	e0bff203 	ldbu	r2,-56(fp)
    5958:	10800114 	ori	r2,r2,4
    595c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5960:	00000b06 	br	5990 <OSEventPendMulti+0x388>
    5964:	e0bff317 	ldw	r2,-52(fp)
    5968:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    596c:	e0bff617 	ldw	r2,-40(fp)
    5970:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    5974:	e0bffd17 	ldw	r2,-12(fp)
    5978:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    597c:	e0800217 	ldw	r2,8(fp)
    5980:	00c00044 	movi	r3,1
    5984:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    5988:	e0bff18b 	ldhu	r2,-58(fp)
    598c:	00009d06 	br	5c04 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    5990:	e0bfef17 	ldw	r2,-68(fp)
    5994:	10800104 	addi	r2,r2,4
    5998:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    599c:	e0bfef17 	ldw	r2,-68(fp)
    59a0:	10800017 	ldw	r2,0(r2)
    59a4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    59a8:	e0bff017 	ldw	r2,-64(fp)
    59ac:	103f7d1e 	bne	r2,zero,57a4 <__alt_mem_Flash_flash_data+0xf40057a4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    59b0:	e0bff103 	ldbu	r2,-60(fp)
    59b4:	10800058 	cmpnei	r2,r2,1
    59b8:	10000a1e 	bne	r2,zero,59e4 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    59bc:	e0bffd17 	ldw	r2,-12(fp)
    59c0:	10000015 	stw	zero,0(r2)
    59c4:	e0bff317 	ldw	r2,-52(fp)
    59c8:	e0bff715 	stw	r2,-36(fp)
    59cc:	e0bff717 	ldw	r2,-36(fp)
    59d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    59d4:	e0800217 	ldw	r2,8(fp)
    59d8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    59dc:	e0bff18b 	ldhu	r2,-58(fp)
    59e0:	00008806 	br	5c04 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    59e4:	d0a81a17 	ldw	r2,-24472(gp)
    59e8:	d0e81a17 	ldw	r3,-24472(gp)
    59ec:	19000c03 	ldbu	r4,48(r3)
    59f0:	e0fff203 	ldbu	r3,-56(fp)
    59f4:	20c6b03a 	or	r3,r4,r3
    59f8:	1809883a 	mov	r4,r3
    59fc:	00ffe004 	movi	r3,-128
    5a00:	20c6b03a 	or	r3,r4,r3
    5a04:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5a08:	d0a81a17 	ldw	r2,-24472(gp)
    5a0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    5a10:	d0a81a17 	ldw	r2,-24472(gp)
    5a14:	e0ffff0b 	ldhu	r3,-4(fp)
    5a18:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    5a1c:	e13ffc17 	ldw	r4,-16(fp)
    5a20:	00065500 	call	6550 <OS_EventTaskWaitMulti>
    5a24:	e0bff317 	ldw	r2,-52(fp)
    5a28:	e0bff815 	stw	r2,-32(fp)
    5a2c:	e0bff817 	ldw	r2,-32(fp)
    5a30:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    5a34:	0006cc40 	call	6cc4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a38:	0005303a 	rdctl	r2,status
    5a3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a40:	e0fff917 	ldw	r3,-28(fp)
    5a44:	00bfff84 	movi	r2,-2
    5a48:	1884703a 	and	r2,r3,r2
    5a4c:	1001703a 	wrctl	status,r2
  
  return context;
    5a50:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    5a54:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    5a58:	d0a81a17 	ldw	r2,-24472(gp)
    5a5c:	10800c43 	ldbu	r2,49(r2)
    5a60:	10803fcc 	andi	r2,r2,255
    5a64:	10000226 	beq	r2,zero,5a70 <OSEventPendMulti+0x468>
    5a68:	108000a0 	cmpeqi	r2,r2,2
    5a6c:	10001826 	beq	r2,zero,5ad0 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    5a70:	d0a81a17 	ldw	r2,-24472(gp)
    5a74:	10800717 	ldw	r2,28(r2)
    5a78:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    5a7c:	e0bff017 	ldw	r2,-64(fp)
    5a80:	10000b26 	beq	r2,zero,5ab0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    5a84:	e0bffd17 	ldw	r2,-12(fp)
    5a88:	10c00104 	addi	r3,r2,4
    5a8c:	e0fffd15 	stw	r3,-12(fp)
    5a90:	e0fff017 	ldw	r3,-64(fp)
    5a94:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    5aa0:	e0bff18b 	ldhu	r2,-58(fp)
    5aa4:	10800044 	addi	r2,r2,1
    5aa8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    5aac:	00000d06 	br	5ae4 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    5ab0:	d0a81a17 	ldw	r2,-24472(gp)
    5ab4:	00c00044 	movi	r3,1
    5ab8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5abc:	d0a81a17 	ldw	r2,-24472(gp)
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	e17ffc17 	ldw	r5,-16(fp)
    5ac8:	00067500 	call	6750 <OS_EventTaskRemoveMulti>
             }
			 break;
    5acc:	00000506 	br	5ae4 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5ad0:	d0a81a17 	ldw	r2,-24472(gp)
    5ad4:	1009883a 	mov	r4,r2
    5ad8:	e17ffc17 	ldw	r5,-16(fp)
    5adc:	00067500 	call	6750 <OS_EventTaskRemoveMulti>
             break;
    5ae0:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    5ae4:	d0a81a17 	ldw	r2,-24472(gp)
    5ae8:	10800c43 	ldbu	r2,49(r2)
    5aec:	10803fcc 	andi	r2,r2,255
    5af0:	10000326 	beq	r2,zero,5b00 <OSEventPendMulti+0x4f8>
    5af4:	108000a0 	cmpeqi	r2,r2,2
    5af8:	1000231e 	bne	r2,zero,5b88 <OSEventPendMulti+0x580>
    5afc:	00002a06 	br	5ba8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    5b00:	e0bff017 	ldw	r2,-64(fp)
    5b04:	10800003 	ldbu	r2,0(r2)
    5b08:	10803fcc 	andi	r2,r2,255
    5b0c:	0080100e 	bge	zero,r2,5b50 <OSEventPendMulti+0x548>
    5b10:	10c000d0 	cmplti	r3,r2,3
    5b14:	1800071e 	bne	r3,zero,5b34 <OSEventPendMulti+0x52c>
    5b18:	108000e0 	cmpeqi	r2,r2,3
    5b1c:	10000c26 	beq	r2,zero,5b50 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    5b20:	e0bffe17 	ldw	r2,-8(fp)
    5b24:	10c00104 	addi	r3,r2,4
    5b28:	e0fffe15 	stw	r3,-8(fp)
    5b2c:	10000015 	stw	zero,0(r2)
                      break;
    5b30:	00001206 	br	5b7c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    5b34:	e0bffe17 	ldw	r2,-8(fp)
    5b38:	10c00104 	addi	r3,r2,4
    5b3c:	e0fffe15 	stw	r3,-8(fp)
    5b40:	d0e81a17 	ldw	r3,-24472(gp)
    5b44:	18c00917 	ldw	r3,36(r3)
    5b48:	10c00015 	stw	r3,0(r2)
                      break;
    5b4c:	00000b06 	br	5b7c <OSEventPendMulti+0x574>
    5b50:	e0bff317 	ldw	r2,-52(fp)
    5b54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b58:	e0bffa17 	ldw	r2,-24(fp)
    5b5c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    5b60:	e0bffd17 	ldw	r2,-12(fp)
    5b64:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    5b68:	e0800217 	ldw	r2,8(fp)
    5b6c:	00c00044 	movi	r3,1
    5b70:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    5b74:	e0bff18b 	ldhu	r2,-58(fp)
    5b78:	00002206 	br	5c04 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    5b7c:	e0800217 	ldw	r2,8(fp)
    5b80:	10000005 	stb	zero,0(r2)
             break;
    5b84:	00001006 	br	5bc8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    5b88:	e0bffe17 	ldw	r2,-8(fp)
    5b8c:	10c00104 	addi	r3,r2,4
    5b90:	e0fffe15 	stw	r3,-8(fp)
    5b94:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    5b98:	e0800217 	ldw	r2,8(fp)
    5b9c:	00c00384 	movi	r3,14
    5ba0:	10c00005 	stb	r3,0(r2)
             break;
    5ba4:	00000806 	br	5bc8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    5ba8:	e0bffe17 	ldw	r2,-8(fp)
    5bac:	10c00104 	addi	r3,r2,4
    5bb0:	e0fffe15 	stw	r3,-8(fp)
    5bb4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    5bb8:	e0800217 	ldw	r2,8(fp)
    5bbc:	00c00284 	movi	r3,10
    5bc0:	10c00005 	stb	r3,0(r2)
             break;
    5bc4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    5bc8:	d0a81a17 	ldw	r2,-24472(gp)
    5bcc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    5bd0:	d0a81a17 	ldw	r2,-24472(gp)
    5bd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    5bd8:	d0a81a17 	ldw	r2,-24472(gp)
    5bdc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5be0:	d0a81a17 	ldw	r2,-24472(gp)
    5be4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    5be8:	d0a81a17 	ldw	r2,-24472(gp)
    5bec:	10000915 	stw	zero,36(r2)
    5bf0:	e0bff317 	ldw	r2,-52(fp)
    5bf4:	e0bffb15 	stw	r2,-20(fp)
    5bf8:	e0bffb17 	ldw	r2,-20(fp)
    5bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    5c00:	e0bff18b 	ldhu	r2,-58(fp)
}
    5c04:	e037883a 	mov	sp,fp
    5c08:	dfc00117 	ldw	ra,4(sp)
    5c0c:	df000017 	ldw	fp,0(sp)
    5c10:	dec00204 	addi	sp,sp,8
    5c14:	f800283a 	ret

00005c18 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    5c18:	defffe04 	addi	sp,sp,-8
    5c1c:	dfc00115 	stw	ra,4(sp)
    5c20:	df000015 	stw	fp,0(sp)
    5c24:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    5c28:	00106040 	call	10604 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    5c2c:	000698c0 	call	698c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    5c30:	00069d00 	call	69d0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    5c34:	0006b300 	call	6b30 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    5c38:	00068b00 	call	68b0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    5c3c:	0008ab00 	call	8ab0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    5c40:	00093f80 	call	93f8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    5c44:	000a62c0 	call	a62c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    5c48:	0006a380 	call	6a38 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    5c4c:	0006ab40 	call	6ab4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    5c50:	00106200 	call	10620 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    5c54:	000739c0 	call	739c <OSDebugInit>
#endif
}
    5c58:	e037883a 	mov	sp,fp
    5c5c:	dfc00117 	ldw	ra,4(sp)
    5c60:	df000017 	ldw	fp,0(sp)
    5c64:	dec00204 	addi	sp,sp,8
    5c68:	f800283a 	ret

00005c6c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    5c6c:	defffc04 	addi	sp,sp,-16
    5c70:	df000315 	stw	fp,12(sp)
    5c74:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5c78:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    5c7c:	d0a80b43 	ldbu	r2,-24531(gp)
    5c80:	10803fcc 	andi	r2,r2,255
    5c84:	10800058 	cmpnei	r2,r2,1
    5c88:	1000131e 	bne	r2,zero,5cd8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c8c:	0005303a 	rdctl	r2,status
    5c90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c94:	e0fffe17 	ldw	r3,-8(fp)
    5c98:	00bfff84 	movi	r2,-2
    5c9c:	1884703a 	and	r2,r3,r2
    5ca0:	1001703a 	wrctl	status,r2
  
  return context;
    5ca4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5ca8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    5cac:	d0a81903 	ldbu	r2,-24476(gp)
    5cb0:	10803fcc 	andi	r2,r2,255
    5cb4:	10803fe0 	cmpeqi	r2,r2,255
    5cb8:	1000031e 	bne	r2,zero,5cc8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    5cbc:	d0a81903 	ldbu	r2,-24476(gp)
    5cc0:	10800044 	addi	r2,r2,1
    5cc4:	d0a81905 	stb	r2,-24476(gp)
    5cc8:	e0bffd17 	ldw	r2,-12(fp)
    5ccc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cd0:	e0bfff17 	ldw	r2,-4(fp)
    5cd4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    5cd8:	e037883a 	mov	sp,fp
    5cdc:	df000017 	ldw	fp,0(sp)
    5ce0:	dec00104 	addi	sp,sp,4
    5ce4:	f800283a 	ret

00005ce8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    5ce8:	defffb04 	addi	sp,sp,-20
    5cec:	dfc00415 	stw	ra,16(sp)
    5cf0:	df000315 	stw	fp,12(sp)
    5cf4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5cf8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    5cfc:	d0a80b43 	ldbu	r2,-24531(gp)
    5d00:	10803fcc 	andi	r2,r2,255
    5d04:	10800058 	cmpnei	r2,r2,1
    5d08:	10002f1e 	bne	r2,zero,5dc8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d0c:	0005303a 	rdctl	r2,status
    5d10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d14:	e0fffe17 	ldw	r3,-8(fp)
    5d18:	00bfff84 	movi	r2,-2
    5d1c:	1884703a 	and	r2,r3,r2
    5d20:	1001703a 	wrctl	status,r2
  
  return context;
    5d24:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5d28:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    5d2c:	d0a81903 	ldbu	r2,-24476(gp)
    5d30:	10803fcc 	andi	r2,r2,255
    5d34:	10000326 	beq	r2,zero,5d44 <OSIntExit+0x5c>
            OSIntNesting--;
    5d38:	d0a81903 	ldbu	r2,-24476(gp)
    5d3c:	10bfffc4 	addi	r2,r2,-1
    5d40:	d0a81905 	stb	r2,-24476(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    5d44:	d0a81903 	ldbu	r2,-24476(gp)
    5d48:	10803fcc 	andi	r2,r2,255
    5d4c:	10001a1e 	bne	r2,zero,5db8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    5d50:	d0a80b03 	ldbu	r2,-24532(gp)
    5d54:	10803fcc 	andi	r2,r2,255
    5d58:	1000171e 	bne	r2,zero,5db8 <OSIntExit+0xd0>
                OS_SchedNew();
    5d5c:	0006d900 	call	6d90 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    5d60:	d0e80d03 	ldbu	r3,-24524(gp)
    5d64:	d0a80d43 	ldbu	r2,-24523(gp)
    5d68:	18c03fcc 	andi	r3,r3,255
    5d6c:	10803fcc 	andi	r2,r2,255
    5d70:	18801126 	beq	r3,r2,5db8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    5d74:	d0a80d03 	ldbu	r2,-24524(gp)
    5d78:	10c03fcc 	andi	r3,r2,255
    5d7c:	008000b4 	movhi	r2,2
    5d80:	10888104 	addi	r2,r2,8708
    5d84:	18c7883a 	add	r3,r3,r3
    5d88:	18c7883a 	add	r3,r3,r3
    5d8c:	10c5883a 	add	r2,r2,r3
    5d90:	10800017 	ldw	r2,0(r2)
    5d94:	d0a81515 	stw	r2,-24492(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    5d98:	d0a81517 	ldw	r2,-24492(gp)
    5d9c:	10c00e17 	ldw	r3,56(r2)
    5da0:	18c00044 	addi	r3,r3,1
    5da4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    5da8:	d0a81017 	ldw	r2,-24512(gp)
    5dac:	10800044 	addi	r2,r2,1
    5db0:	d0a81015 	stw	r2,-24512(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    5db4:	00103440 	call	10344 <OSCtxSw>
    5db8:	e0bffd17 	ldw	r2,-12(fp)
    5dbc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5dc0:	e0bfff17 	ldw	r2,-4(fp)
    5dc4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    5dc8:	e037883a 	mov	sp,fp
    5dcc:	dfc00117 	ldw	ra,4(sp)
    5dd0:	df000017 	ldw	fp,0(sp)
    5dd4:	dec00204 	addi	sp,sp,8
    5dd8:	f800283a 	ret

00005ddc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    5ddc:	defffc04 	addi	sp,sp,-16
    5de0:	df000315 	stw	fp,12(sp)
    5de4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5de8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    5dec:	d0a80b43 	ldbu	r2,-24531(gp)
    5df0:	10803fcc 	andi	r2,r2,255
    5df4:	10800058 	cmpnei	r2,r2,1
    5df8:	1000161e 	bne	r2,zero,5e54 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5dfc:	0005303a 	rdctl	r2,status
    5e00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e04:	e0fffe17 	ldw	r3,-8(fp)
    5e08:	00bfff84 	movi	r2,-2
    5e0c:	1884703a 	and	r2,r3,r2
    5e10:	1001703a 	wrctl	status,r2
  
  return context;
    5e14:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    5e18:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    5e1c:	d0a81903 	ldbu	r2,-24476(gp)
    5e20:	10803fcc 	andi	r2,r2,255
    5e24:	1000071e 	bne	r2,zero,5e44 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    5e28:	d0a80b03 	ldbu	r2,-24532(gp)
    5e2c:	10803fcc 	andi	r2,r2,255
    5e30:	10803fe0 	cmpeqi	r2,r2,255
    5e34:	1000031e 	bne	r2,zero,5e44 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    5e38:	d0a80b03 	ldbu	r2,-24532(gp)
    5e3c:	10800044 	addi	r2,r2,1
    5e40:	d0a80b05 	stb	r2,-24532(gp)
    5e44:	e0bffd17 	ldw	r2,-12(fp)
    5e48:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e4c:	e0bfff17 	ldw	r2,-4(fp)
    5e50:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    5e54:	e037883a 	mov	sp,fp
    5e58:	df000017 	ldw	fp,0(sp)
    5e5c:	dec00104 	addi	sp,sp,4
    5e60:	f800283a 	ret

00005e64 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    5e64:	defff804 	addi	sp,sp,-32
    5e68:	dfc00715 	stw	ra,28(sp)
    5e6c:	df000615 	stw	fp,24(sp)
    5e70:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5e74:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    5e78:	d0a80b43 	ldbu	r2,-24531(gp)
    5e7c:	10803fcc 	andi	r2,r2,255
    5e80:	10800058 	cmpnei	r2,r2,1
    5e84:	1000281e 	bne	r2,zero,5f28 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e88:	0005303a 	rdctl	r2,status
    5e8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e90:	e0fffb17 	ldw	r3,-20(fp)
    5e94:	00bfff84 	movi	r2,-2
    5e98:	1884703a 	and	r2,r3,r2
    5e9c:	1001703a 	wrctl	status,r2
  
  return context;
    5ea0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    5ea4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    5ea8:	d0a80b03 	ldbu	r2,-24532(gp)
    5eac:	10803fcc 	andi	r2,r2,255
    5eb0:	10001926 	beq	r2,zero,5f18 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    5eb4:	d0a80b03 	ldbu	r2,-24532(gp)
    5eb8:	10bfffc4 	addi	r2,r2,-1
    5ebc:	d0a80b05 	stb	r2,-24532(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    5ec0:	d0a80b03 	ldbu	r2,-24532(gp)
    5ec4:	10803fcc 	andi	r2,r2,255
    5ec8:	10000e1e 	bne	r2,zero,5f04 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    5ecc:	d0a81903 	ldbu	r2,-24476(gp)
    5ed0:	10803fcc 	andi	r2,r2,255
    5ed4:	1000061e 	bne	r2,zero,5ef0 <OSSchedUnlock+0x8c>
    5ed8:	e0bffa17 	ldw	r2,-24(fp)
    5edc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ee0:	e0bffc17 	ldw	r2,-16(fp)
    5ee4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    5ee8:	0006cc40 	call	6cc4 <OS_Sched>
    5eec:	00000e06 	br	5f28 <OSSchedUnlock+0xc4>
    5ef0:	e0bffa17 	ldw	r2,-24(fp)
    5ef4:	e0bffd15 	stw	r2,-12(fp)
    5ef8:	e0bffd17 	ldw	r2,-12(fp)
    5efc:	1001703a 	wrctl	status,r2
    5f00:	00000906 	br	5f28 <OSSchedUnlock+0xc4>
    5f04:	e0bffa17 	ldw	r2,-24(fp)
    5f08:	e0bffe15 	stw	r2,-8(fp)
    5f0c:	e0bffe17 	ldw	r2,-8(fp)
    5f10:	1001703a 	wrctl	status,r2
    5f14:	00000406 	br	5f28 <OSSchedUnlock+0xc4>
    5f18:	e0bffa17 	ldw	r2,-24(fp)
    5f1c:	e0bfff15 	stw	r2,-4(fp)
    5f20:	e0bfff17 	ldw	r2,-4(fp)
    5f24:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    5f28:	e037883a 	mov	sp,fp
    5f2c:	dfc00117 	ldw	ra,4(sp)
    5f30:	df000017 	ldw	fp,0(sp)
    5f34:	dec00204 	addi	sp,sp,8
    5f38:	f800283a 	ret

00005f3c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    5f3c:	defffe04 	addi	sp,sp,-8
    5f40:	dfc00115 	stw	ra,4(sp)
    5f44:	df000015 	stw	fp,0(sp)
    5f48:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    5f4c:	d0a80b43 	ldbu	r2,-24531(gp)
    5f50:	10803fcc 	andi	r2,r2,255
    5f54:	10000f1e 	bne	r2,zero,5f94 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    5f58:	0006d900 	call	6d90 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    5f5c:	d0a80d03 	ldbu	r2,-24524(gp)
    5f60:	d0a80d45 	stb	r2,-24523(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    5f64:	d0a80d03 	ldbu	r2,-24524(gp)
    5f68:	10c03fcc 	andi	r3,r2,255
    5f6c:	008000b4 	movhi	r2,2
    5f70:	10888104 	addi	r2,r2,8708
    5f74:	18c7883a 	add	r3,r3,r3
    5f78:	18c7883a 	add	r3,r3,r3
    5f7c:	10c5883a 	add	r2,r2,r3
    5f80:	10800017 	ldw	r2,0(r2)
    5f84:	d0a81515 	stw	r2,-24492(gp)
        OSTCBCur      = OSTCBHighRdy;
    5f88:	d0a81517 	ldw	r2,-24492(gp)
    5f8c:	d0a81a15 	stw	r2,-24472(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    5f90:	00103d00 	call	103d0 <OSStartHighRdy>
    }
}
    5f94:	e037883a 	mov	sp,fp
    5f98:	dfc00117 	ldw	ra,4(sp)
    5f9c:	df000017 	ldw	fp,0(sp)
    5fa0:	dec00204 	addi	sp,sp,8
    5fa4:	f800283a 	ret

00005fa8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    5fa8:	defff904 	addi	sp,sp,-28
    5fac:	dfc00615 	stw	ra,24(sp)
    5fb0:	df000515 	stw	fp,20(sp)
    5fb4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5fb8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    5fbc:	01000084 	movi	r4,2
    5fc0:	000cad40 	call	cad4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5fc4:	0005303a 	rdctl	r2,status
    5fc8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5fcc:	e0fffc17 	ldw	r3,-16(fp)
    5fd0:	00bfff84 	movi	r2,-2
    5fd4:	1884703a 	and	r2,r3,r2
    5fd8:	1001703a 	wrctl	status,r2
  
  return context;
    5fdc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    5fe0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    5fe4:	d0280c15 	stw	zero,-24528(gp)
    5fe8:	e0bffb17 	ldw	r2,-20(fp)
    5fec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ff0:	e0bffd17 	ldw	r2,-12(fp)
    5ff4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    5ff8:	0009883a 	mov	r4,zero
    5ffc:	000cad40 	call	cad4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6000:	0005303a 	rdctl	r2,status
    6004:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6008:	e0fffe17 	ldw	r3,-8(fp)
    600c:	00bfff84 	movi	r2,-2
    6010:	1884703a 	and	r2,r3,r2
    6014:	1001703a 	wrctl	status,r2
  
  return context;
    6018:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    601c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    6020:	d0a80c17 	ldw	r2,-24528(gp)
    6024:	d0a81115 	stw	r2,-24508(gp)
    OSStatRdy    = OS_TRUE;
    6028:	00800044 	movi	r2,1
    602c:	d0a81d05 	stb	r2,-24460(gp)
    6030:	e0bffb17 	ldw	r2,-20(fp)
    6034:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    6040:	e037883a 	mov	sp,fp
    6044:	dfc00117 	ldw	ra,4(sp)
    6048:	df000017 	ldw	fp,0(sp)
    604c:	dec00204 	addi	sp,sp,8
    6050:	f800283a 	ret

00006054 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    6054:	defff704 	addi	sp,sp,-36
    6058:	dfc00815 	stw	ra,32(sp)
    605c:	df000715 	stw	fp,28(sp)
    6060:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    6064:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    6068:	00105e80 	call	105e8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    606c:	0005303a 	rdctl	r2,status
    6070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6074:	e0fffc17 	ldw	r3,-16(fp)
    6078:	00bfff84 	movi	r2,-2
    607c:	1884703a 	and	r2,r3,r2
    6080:	1001703a 	wrctl	status,r2
  
  return context;
    6084:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    6088:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    608c:	d0a81b17 	ldw	r2,-24468(gp)
    6090:	10800044 	addi	r2,r2,1
    6094:	d0a81b15 	stw	r2,-24468(gp)
    6098:	e0bffb17 	ldw	r2,-20(fp)
    609c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60a0:	e0bffd17 	ldw	r2,-12(fp)
    60a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    60a8:	d0a80b43 	ldbu	r2,-24531(gp)
    60ac:	10803fcc 	andi	r2,r2,255
    60b0:	10800058 	cmpnei	r2,r2,1
    60b4:	1000691e 	bne	r2,zero,625c <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    60b8:	d0a80f03 	ldbu	r2,-24516(gp)
    60bc:	10803fcc 	andi	r2,r2,255
    60c0:	10c00060 	cmpeqi	r3,r2,1
    60c4:	1800061e 	bne	r3,zero,60e0 <OSTimeTick+0x8c>
    60c8:	10c000a0 	cmpeqi	r3,r2,2
    60cc:	1800061e 	bne	r3,zero,60e8 <OSTimeTick+0x94>
    60d0:	10000a1e 	bne	r2,zero,60fc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    60d4:	00800044 	movi	r2,1
    60d8:	e0bffa05 	stb	r2,-24(fp)
                 break;
    60dc:	00000b06 	br	610c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    60e0:	e03ffa05 	stb	zero,-24(fp)
                 break;
    60e4:	00000906 	br	610c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    60e8:	00800044 	movi	r2,1
    60ec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    60f0:	00800044 	movi	r2,1
    60f4:	d0a80f05 	stb	r2,-24516(gp)
                 break;
    60f8:	00000406 	br	610c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    60fc:	00800044 	movi	r2,1
    6100:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    6104:	d0280f05 	stb	zero,-24516(gp)
                 break;
    6108:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    610c:	e0bffa03 	ldbu	r2,-24(fp)
    6110:	1000011e 	bne	r2,zero,6118 <OSTimeTick+0xc4>
            return;
    6114:	00005106 	br	625c <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    6118:	d0a80e17 	ldw	r2,-24520(gp)
    611c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    6120:	00004906 	br	6248 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6124:	0005303a 	rdctl	r2,status
    6128:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    612c:	e0fffe17 	ldw	r3,-8(fp)
    6130:	00bfff84 	movi	r2,-2
    6134:	1884703a 	and	r2,r3,r2
    6138:	1001703a 	wrctl	status,r2
  
  return context;
    613c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    6140:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    6144:	e0bff917 	ldw	r2,-28(fp)
    6148:	10800b8b 	ldhu	r2,46(r2)
    614c:	10bfffcc 	andi	r2,r2,65535
    6150:	10003626 	beq	r2,zero,622c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    6154:	e0bff917 	ldw	r2,-28(fp)
    6158:	10800b8b 	ldhu	r2,46(r2)
    615c:	10bfffc4 	addi	r2,r2,-1
    6160:	1007883a 	mov	r3,r2
    6164:	e0bff917 	ldw	r2,-28(fp)
    6168:	10c00b8d 	sth	r3,46(r2)
    616c:	e0bff917 	ldw	r2,-28(fp)
    6170:	10800b8b 	ldhu	r2,46(r2)
    6174:	10bfffcc 	andi	r2,r2,65535
    6178:	10002c1e 	bne	r2,zero,622c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    617c:	e0bff917 	ldw	r2,-28(fp)
    6180:	10800c03 	ldbu	r2,48(r2)
    6184:	10803fcc 	andi	r2,r2,255
    6188:	10800dcc 	andi	r2,r2,55
    618c:	10000b26 	beq	r2,zero,61bc <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    6190:	e0bff917 	ldw	r2,-28(fp)
    6194:	10c00c03 	ldbu	r3,48(r2)
    6198:	00bff204 	movi	r2,-56
    619c:	1884703a 	and	r2,r3,r2
    61a0:	1007883a 	mov	r3,r2
    61a4:	e0bff917 	ldw	r2,-28(fp)
    61a8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    61ac:	e0bff917 	ldw	r2,-28(fp)
    61b0:	00c00044 	movi	r3,1
    61b4:	10c00c45 	stb	r3,49(r2)
    61b8:	00000206 	br	61c4 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    61bc:	e0bff917 	ldw	r2,-28(fp)
    61c0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    61c4:	e0bff917 	ldw	r2,-28(fp)
    61c8:	10800c03 	ldbu	r2,48(r2)
    61cc:	10803fcc 	andi	r2,r2,255
    61d0:	1080020c 	andi	r2,r2,8
    61d4:	1000151e 	bne	r2,zero,622c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    61d8:	e0bff917 	ldw	r2,-28(fp)
    61dc:	10c00d83 	ldbu	r3,54(r2)
    61e0:	d0a81703 	ldbu	r2,-24484(gp)
    61e4:	1884b03a 	or	r2,r3,r2
    61e8:	d0a81705 	stb	r2,-24484(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    61ec:	e0bff917 	ldw	r2,-28(fp)
    61f0:	10800d03 	ldbu	r2,52(r2)
    61f4:	10c03fcc 	andi	r3,r2,255
    61f8:	e0bff917 	ldw	r2,-28(fp)
    61fc:	10800d03 	ldbu	r2,52(r2)
    6200:	11003fcc 	andi	r4,r2,255
    6204:	d0a81744 	addi	r2,gp,-24483
    6208:	2085883a 	add	r2,r4,r2
    620c:	11000003 	ldbu	r4,0(r2)
    6210:	e0bff917 	ldw	r2,-28(fp)
    6214:	10800d43 	ldbu	r2,53(r2)
    6218:	2084b03a 	or	r2,r4,r2
    621c:	1009883a 	mov	r4,r2
    6220:	d0a81744 	addi	r2,gp,-24483
    6224:	1885883a 	add	r2,r3,r2
    6228:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    622c:	e0bff917 	ldw	r2,-28(fp)
    6230:	10800517 	ldw	r2,20(r2)
    6234:	e0bff915 	stw	r2,-28(fp)
    6238:	e0bffb17 	ldw	r2,-20(fp)
    623c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6240:	e0bfff17 	ldw	r2,-4(fp)
    6244:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    6248:	e0bff917 	ldw	r2,-28(fp)
    624c:	10800c83 	ldbu	r2,50(r2)
    6250:	10803fcc 	andi	r2,r2,255
    6254:	10800518 	cmpnei	r2,r2,20
    6258:	103fb21e 	bne	r2,zero,6124 <__alt_mem_Flash_flash_data+0xf4006124>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    625c:	e037883a 	mov	sp,fp
    6260:	dfc00117 	ldw	ra,4(sp)
    6264:	df000017 	ldw	fp,0(sp)
    6268:	dec00204 	addi	sp,sp,8
    626c:	f800283a 	ret

00006270 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    6270:	deffff04 	addi	sp,sp,-4
    6274:	df000015 	stw	fp,0(sp)
    6278:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    627c:	00804784 	movi	r2,286
}
    6280:	e037883a 	mov	sp,fp
    6284:	df000017 	ldw	fp,0(sp)
    6288:	dec00104 	addi	sp,sp,4
    628c:	f800283a 	ret

00006290 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    6290:	deffff04 	addi	sp,sp,-4
    6294:	df000015 	stw	fp,0(sp)
    6298:	d839883a 	mov	fp,sp
}
    629c:	e037883a 	mov	sp,fp
    62a0:	df000017 	ldw	fp,0(sp)
    62a4:	dec00104 	addi	sp,sp,4
    62a8:	f800283a 	ret

000062ac <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    62ac:	defff804 	addi	sp,sp,-32
    62b0:	dfc00715 	stw	ra,28(sp)
    62b4:	df000615 	stw	fp,24(sp)
    62b8:	df000604 	addi	fp,sp,24
    62bc:	e13ffc15 	stw	r4,-16(fp)
    62c0:	e17ffd15 	stw	r5,-12(fp)
    62c4:	3007883a 	mov	r3,r6
    62c8:	3805883a 	mov	r2,r7
    62cc:	e0fffe05 	stb	r3,-8(fp)
    62d0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    62d4:	e0bffc17 	ldw	r2,-16(fp)
    62d8:	10800283 	ldbu	r2,10(r2)
    62dc:	10c03fcc 	andi	r3,r2,255
    62e0:	00800074 	movhi	r2,1
    62e4:	1083bb04 	addi	r2,r2,3820
    62e8:	10c5883a 	add	r2,r2,r3
    62ec:	10800003 	ldbu	r2,0(r2)
    62f0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    62f4:	e0bffa03 	ldbu	r2,-24(fp)
    62f8:	e0fffc17 	ldw	r3,-16(fp)
    62fc:	1885883a 	add	r2,r3,r2
    6300:	10800204 	addi	r2,r2,8
    6304:	108000c3 	ldbu	r2,3(r2)
    6308:	10c03fcc 	andi	r3,r2,255
    630c:	00800074 	movhi	r2,1
    6310:	1083bb04 	addi	r2,r2,3820
    6314:	10c5883a 	add	r2,r2,r3
    6318:	10800003 	ldbu	r2,0(r2)
    631c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    6320:	e0bffa03 	ldbu	r2,-24(fp)
    6324:	100490fa 	slli	r2,r2,3
    6328:	1007883a 	mov	r3,r2
    632c:	e0bffa43 	ldbu	r2,-23(fp)
    6330:	1885883a 	add	r2,r3,r2
    6334:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    6338:	e0fffa83 	ldbu	r3,-22(fp)
    633c:	008000b4 	movhi	r2,2
    6340:	10888104 	addi	r2,r2,8708
    6344:	18c7883a 	add	r3,r3,r3
    6348:	18c7883a 	add	r3,r3,r3
    634c:	10c5883a 	add	r2,r2,r3
    6350:	10800017 	ldw	r2,0(r2)
    6354:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    6358:	e0bffb17 	ldw	r2,-20(fp)
    635c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    6360:	e0bffb17 	ldw	r2,-20(fp)
    6364:	e0fffd17 	ldw	r3,-12(fp)
    6368:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    636c:	e0bffb17 	ldw	r2,-20(fp)
    6370:	10800c03 	ldbu	r2,48(r2)
    6374:	1007883a 	mov	r3,r2
    6378:	e0bffe03 	ldbu	r2,-8(fp)
    637c:	0084303a 	nor	r2,zero,r2
    6380:	1884703a 	and	r2,r3,r2
    6384:	1007883a 	mov	r3,r2
    6388:	e0bffb17 	ldw	r2,-20(fp)
    638c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    6390:	e0bffb17 	ldw	r2,-20(fp)
    6394:	e0ffff03 	ldbu	r3,-4(fp)
    6398:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    639c:	e0bffb17 	ldw	r2,-20(fp)
    63a0:	10800c03 	ldbu	r2,48(r2)
    63a4:	10803fcc 	andi	r2,r2,255
    63a8:	1080020c 	andi	r2,r2,8
    63ac:	1000111e 	bne	r2,zero,63f4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    63b0:	e0bffb17 	ldw	r2,-20(fp)
    63b4:	10c00d83 	ldbu	r3,54(r2)
    63b8:	d0a81703 	ldbu	r2,-24484(gp)
    63bc:	1884b03a 	or	r2,r3,r2
    63c0:	d0a81705 	stb	r2,-24484(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    63c4:	e0fffa03 	ldbu	r3,-24(fp)
    63c8:	e13ffa03 	ldbu	r4,-24(fp)
    63cc:	d0a81744 	addi	r2,gp,-24483
    63d0:	2085883a 	add	r2,r4,r2
    63d4:	11000003 	ldbu	r4,0(r2)
    63d8:	e0bffb17 	ldw	r2,-20(fp)
    63dc:	10800d43 	ldbu	r2,53(r2)
    63e0:	2084b03a 	or	r2,r4,r2
    63e4:	1009883a 	mov	r4,r2
    63e8:	d0a81744 	addi	r2,gp,-24483
    63ec:	1885883a 	add	r2,r3,r2
    63f0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    63f4:	e13ffb17 	ldw	r4,-20(fp)
    63f8:	e17ffc17 	ldw	r5,-16(fp)
    63fc:	000669c0 	call	669c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    6400:	e0bffb17 	ldw	r2,-20(fp)
    6404:	10800817 	ldw	r2,32(r2)
    6408:	10000826 	beq	r2,zero,642c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    640c:	e0bffb17 	ldw	r2,-20(fp)
    6410:	10800817 	ldw	r2,32(r2)
    6414:	e13ffb17 	ldw	r4,-20(fp)
    6418:	100b883a 	mov	r5,r2
    641c:	00067500 	call	6750 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    6420:	e0bffb17 	ldw	r2,-20(fp)
    6424:	e0fffc17 	ldw	r3,-16(fp)
    6428:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    642c:	e0bffa83 	ldbu	r2,-22(fp)
}
    6430:	e037883a 	mov	sp,fp
    6434:	dfc00117 	ldw	ra,4(sp)
    6438:	df000017 	ldw	fp,0(sp)
    643c:	dec00204 	addi	sp,sp,8
    6440:	f800283a 	ret

00006444 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    6444:	defffd04 	addi	sp,sp,-12
    6448:	df000215 	stw	fp,8(sp)
    644c:	df000204 	addi	fp,sp,8
    6450:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    6454:	d0a81a17 	ldw	r2,-24472(gp)
    6458:	e0ffff17 	ldw	r3,-4(fp)
    645c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    6460:	d0a81a17 	ldw	r2,-24472(gp)
    6464:	10800d03 	ldbu	r2,52(r2)
    6468:	10803fcc 	andi	r2,r2,255
    646c:	d0e81a17 	ldw	r3,-24472(gp)
    6470:	18c00d03 	ldbu	r3,52(r3)
    6474:	18c03fcc 	andi	r3,r3,255
    6478:	e13fff17 	ldw	r4,-4(fp)
    647c:	20c7883a 	add	r3,r4,r3
    6480:	18c00204 	addi	r3,r3,8
    6484:	190000c3 	ldbu	r4,3(r3)
    6488:	d0e81a17 	ldw	r3,-24472(gp)
    648c:	18c00d43 	ldbu	r3,53(r3)
    6490:	20c6b03a 	or	r3,r4,r3
    6494:	1809883a 	mov	r4,r3
    6498:	e0ffff17 	ldw	r3,-4(fp)
    649c:	1885883a 	add	r2,r3,r2
    64a0:	10800204 	addi	r2,r2,8
    64a4:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    64a8:	e0bfff17 	ldw	r2,-4(fp)
    64ac:	10c00283 	ldbu	r3,10(r2)
    64b0:	d0a81a17 	ldw	r2,-24472(gp)
    64b4:	10800d83 	ldbu	r2,54(r2)
    64b8:	1884b03a 	or	r2,r3,r2
    64bc:	1007883a 	mov	r3,r2
    64c0:	e0bfff17 	ldw	r2,-4(fp)
    64c4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    64c8:	d0a81a17 	ldw	r2,-24472(gp)
    64cc:	10800d03 	ldbu	r2,52(r2)
    64d0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    64d4:	e0fffe03 	ldbu	r3,-8(fp)
    64d8:	e13ffe03 	ldbu	r4,-8(fp)
    64dc:	d0a81744 	addi	r2,gp,-24483
    64e0:	2085883a 	add	r2,r4,r2
    64e4:	10800003 	ldbu	r2,0(r2)
    64e8:	1009883a 	mov	r4,r2
    64ec:	d0a81a17 	ldw	r2,-24472(gp)
    64f0:	10800d43 	ldbu	r2,53(r2)
    64f4:	0084303a 	nor	r2,zero,r2
    64f8:	2084703a 	and	r2,r4,r2
    64fc:	1009883a 	mov	r4,r2
    6500:	d0a81744 	addi	r2,gp,-24483
    6504:	1885883a 	add	r2,r3,r2
    6508:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    650c:	e0fffe03 	ldbu	r3,-8(fp)
    6510:	d0a81744 	addi	r2,gp,-24483
    6514:	1885883a 	add	r2,r3,r2
    6518:	10800003 	ldbu	r2,0(r2)
    651c:	10803fcc 	andi	r2,r2,255
    6520:	1000071e 	bne	r2,zero,6540 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    6524:	d0a81a17 	ldw	r2,-24472(gp)
    6528:	10800d83 	ldbu	r2,54(r2)
    652c:	0084303a 	nor	r2,zero,r2
    6530:	1007883a 	mov	r3,r2
    6534:	d0a81703 	ldbu	r2,-24484(gp)
    6538:	1884703a 	and	r2,r3,r2
    653c:	d0a81705 	stb	r2,-24484(gp)
    }
}
    6540:	e037883a 	mov	sp,fp
    6544:	df000017 	ldw	fp,0(sp)
    6548:	dec00104 	addi	sp,sp,4
    654c:	f800283a 	ret

00006550 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    6550:	defffb04 	addi	sp,sp,-20
    6554:	df000415 	stw	fp,16(sp)
    6558:	df000404 	addi	fp,sp,16
    655c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    6560:	d0a81a17 	ldw	r2,-24472(gp)
    6564:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    6568:	d0a81a17 	ldw	r2,-24472(gp)
    656c:	e0ffff17 	ldw	r3,-4(fp)
    6570:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    6574:	e0bfff17 	ldw	r2,-4(fp)
    6578:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    657c:	e0bffc17 	ldw	r2,-16(fp)
    6580:	10800017 	ldw	r2,0(r2)
    6584:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    6588:	00002006 	br	660c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    658c:	d0a81a17 	ldw	r2,-24472(gp)
    6590:	10800d03 	ldbu	r2,52(r2)
    6594:	10803fcc 	andi	r2,r2,255
    6598:	d0e81a17 	ldw	r3,-24472(gp)
    659c:	18c00d03 	ldbu	r3,52(r3)
    65a0:	18c03fcc 	andi	r3,r3,255
    65a4:	e13ffd17 	ldw	r4,-12(fp)
    65a8:	20c7883a 	add	r3,r4,r3
    65ac:	18c00204 	addi	r3,r3,8
    65b0:	190000c3 	ldbu	r4,3(r3)
    65b4:	d0e81a17 	ldw	r3,-24472(gp)
    65b8:	18c00d43 	ldbu	r3,53(r3)
    65bc:	20c6b03a 	or	r3,r4,r3
    65c0:	1809883a 	mov	r4,r3
    65c4:	e0fffd17 	ldw	r3,-12(fp)
    65c8:	1885883a 	add	r2,r3,r2
    65cc:	10800204 	addi	r2,r2,8
    65d0:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    65d4:	e0bffd17 	ldw	r2,-12(fp)
    65d8:	10c00283 	ldbu	r3,10(r2)
    65dc:	d0a81a17 	ldw	r2,-24472(gp)
    65e0:	10800d83 	ldbu	r2,54(r2)
    65e4:	1884b03a 	or	r2,r3,r2
    65e8:	1007883a 	mov	r3,r2
    65ec:	e0bffd17 	ldw	r2,-12(fp)
    65f0:	10c00285 	stb	r3,10(r2)
        pevents++;
    65f4:	e0bffc17 	ldw	r2,-16(fp)
    65f8:	10800104 	addi	r2,r2,4
    65fc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    6600:	e0bffc17 	ldw	r2,-16(fp)
    6604:	10800017 	ldw	r2,0(r2)
    6608:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    660c:	e0bffd17 	ldw	r2,-12(fp)
    6610:	103fde1e 	bne	r2,zero,658c <__alt_mem_Flash_flash_data+0xf400658c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    6614:	d0a81a17 	ldw	r2,-24472(gp)
    6618:	10800d03 	ldbu	r2,52(r2)
    661c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    6620:	e0fffe03 	ldbu	r3,-8(fp)
    6624:	e13ffe03 	ldbu	r4,-8(fp)
    6628:	d0a81744 	addi	r2,gp,-24483
    662c:	2085883a 	add	r2,r4,r2
    6630:	10800003 	ldbu	r2,0(r2)
    6634:	1009883a 	mov	r4,r2
    6638:	d0a81a17 	ldw	r2,-24472(gp)
    663c:	10800d43 	ldbu	r2,53(r2)
    6640:	0084303a 	nor	r2,zero,r2
    6644:	2084703a 	and	r2,r4,r2
    6648:	1009883a 	mov	r4,r2
    664c:	d0a81744 	addi	r2,gp,-24483
    6650:	1885883a 	add	r2,r3,r2
    6654:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    6658:	e0fffe03 	ldbu	r3,-8(fp)
    665c:	d0a81744 	addi	r2,gp,-24483
    6660:	1885883a 	add	r2,r3,r2
    6664:	10800003 	ldbu	r2,0(r2)
    6668:	10803fcc 	andi	r2,r2,255
    666c:	1000071e 	bne	r2,zero,668c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    6670:	d0a81a17 	ldw	r2,-24472(gp)
    6674:	10800d83 	ldbu	r2,54(r2)
    6678:	0084303a 	nor	r2,zero,r2
    667c:	1007883a 	mov	r3,r2
    6680:	d0a81703 	ldbu	r2,-24484(gp)
    6684:	1884703a 	and	r2,r3,r2
    6688:	d0a81705 	stb	r2,-24484(gp)
    }
}
    668c:	e037883a 	mov	sp,fp
    6690:	df000017 	ldw	fp,0(sp)
    6694:	dec00104 	addi	sp,sp,4
    6698:	f800283a 	ret

0000669c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    669c:	defffc04 	addi	sp,sp,-16
    66a0:	df000315 	stw	fp,12(sp)
    66a4:	df000304 	addi	fp,sp,12
    66a8:	e13ffe15 	stw	r4,-8(fp)
    66ac:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    66b0:	e0bffe17 	ldw	r2,-8(fp)
    66b4:	10800d03 	ldbu	r2,52(r2)
    66b8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    66bc:	e0bffd03 	ldbu	r2,-12(fp)
    66c0:	e0fffd03 	ldbu	r3,-12(fp)
    66c4:	e13fff17 	ldw	r4,-4(fp)
    66c8:	20c7883a 	add	r3,r4,r3
    66cc:	18c00204 	addi	r3,r3,8
    66d0:	18c000c3 	ldbu	r3,3(r3)
    66d4:	1809883a 	mov	r4,r3
    66d8:	e0fffe17 	ldw	r3,-8(fp)
    66dc:	18c00d43 	ldbu	r3,53(r3)
    66e0:	00c6303a 	nor	r3,zero,r3
    66e4:	20c6703a 	and	r3,r4,r3
    66e8:	1809883a 	mov	r4,r3
    66ec:	e0ffff17 	ldw	r3,-4(fp)
    66f0:	1885883a 	add	r2,r3,r2
    66f4:	10800204 	addi	r2,r2,8
    66f8:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    66fc:	e0bffd03 	ldbu	r2,-12(fp)
    6700:	e0ffff17 	ldw	r3,-4(fp)
    6704:	1885883a 	add	r2,r3,r2
    6708:	10800204 	addi	r2,r2,8
    670c:	108000c3 	ldbu	r2,3(r2)
    6710:	10803fcc 	andi	r2,r2,255
    6714:	10000a1e 	bne	r2,zero,6740 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    6718:	e0bfff17 	ldw	r2,-4(fp)
    671c:	10800283 	ldbu	r2,10(r2)
    6720:	1007883a 	mov	r3,r2
    6724:	e0bffe17 	ldw	r2,-8(fp)
    6728:	10800d83 	ldbu	r2,54(r2)
    672c:	0084303a 	nor	r2,zero,r2
    6730:	1884703a 	and	r2,r3,r2
    6734:	1007883a 	mov	r3,r2
    6738:	e0bfff17 	ldw	r2,-4(fp)
    673c:	10c00285 	stb	r3,10(r2)
    }
}
    6740:	e037883a 	mov	sp,fp
    6744:	df000017 	ldw	fp,0(sp)
    6748:	dec00104 	addi	sp,sp,4
    674c:	f800283a 	ret

00006750 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    6750:	defffa04 	addi	sp,sp,-24
    6754:	df000515 	stw	fp,20(sp)
    6758:	df000504 	addi	fp,sp,20
    675c:	e13ffe15 	stw	r4,-8(fp)
    6760:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    6764:	e0bffe17 	ldw	r2,-8(fp)
    6768:	10800d03 	ldbu	r2,52(r2)
    676c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    6770:	e0bffe17 	ldw	r2,-8(fp)
    6774:	10800d83 	ldbu	r2,54(r2)
    6778:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    677c:	e0bffe17 	ldw	r2,-8(fp)
    6780:	10800d43 	ldbu	r2,53(r2)
    6784:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    6788:	e0bfff17 	ldw	r2,-4(fp)
    678c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    6790:	e0bffb17 	ldw	r2,-20(fp)
    6794:	10800017 	ldw	r2,0(r2)
    6798:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    679c:	00002506 	br	6834 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    67a0:	e0bffd03 	ldbu	r2,-12(fp)
    67a4:	e0fffd03 	ldbu	r3,-12(fp)
    67a8:	e13ffc17 	ldw	r4,-16(fp)
    67ac:	20c7883a 	add	r3,r4,r3
    67b0:	18c00204 	addi	r3,r3,8
    67b4:	18c000c3 	ldbu	r3,3(r3)
    67b8:	1809883a 	mov	r4,r3
    67bc:	e0fffd83 	ldbu	r3,-10(fp)
    67c0:	00c6303a 	nor	r3,zero,r3
    67c4:	20c6703a 	and	r3,r4,r3
    67c8:	1809883a 	mov	r4,r3
    67cc:	e0fffc17 	ldw	r3,-16(fp)
    67d0:	1885883a 	add	r2,r3,r2
    67d4:	10800204 	addi	r2,r2,8
    67d8:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    67dc:	e0bffd03 	ldbu	r2,-12(fp)
    67e0:	e0fffc17 	ldw	r3,-16(fp)
    67e4:	1885883a 	add	r2,r3,r2
    67e8:	10800204 	addi	r2,r2,8
    67ec:	108000c3 	ldbu	r2,3(r2)
    67f0:	10803fcc 	andi	r2,r2,255
    67f4:	1000091e 	bne	r2,zero,681c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    67f8:	e0bffc17 	ldw	r2,-16(fp)
    67fc:	10800283 	ldbu	r2,10(r2)
    6800:	1007883a 	mov	r3,r2
    6804:	e0bffd43 	ldbu	r2,-11(fp)
    6808:	0084303a 	nor	r2,zero,r2
    680c:	1884703a 	and	r2,r3,r2
    6810:	1007883a 	mov	r3,r2
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    681c:	e0bffb17 	ldw	r2,-20(fp)
    6820:	10800104 	addi	r2,r2,4
    6824:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    6828:	e0bffb17 	ldw	r2,-20(fp)
    682c:	10800017 	ldw	r2,0(r2)
    6830:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    6834:	e0bffc17 	ldw	r2,-16(fp)
    6838:	103fd91e 	bne	r2,zero,67a0 <__alt_mem_Flash_flash_data+0xf40067a0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    683c:	e037883a 	mov	sp,fp
    6840:	df000017 	ldw	fp,0(sp)
    6844:	dec00104 	addi	sp,sp,4
    6848:	f800283a 	ret

0000684c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    684c:	defffc04 	addi	sp,sp,-16
    6850:	df000315 	stw	fp,12(sp)
    6854:	df000304 	addi	fp,sp,12
    6858:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    685c:	e0bfff17 	ldw	r2,-4(fp)
    6860:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    6864:	e0bfff17 	ldw	r2,-4(fp)
    6868:	108002c4 	addi	r2,r2,11
    686c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6870:	e03ffe05 	stb	zero,-8(fp)
    6874:	00000706 	br	6894 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    6878:	e0bffd17 	ldw	r2,-12(fp)
    687c:	10c00044 	addi	r3,r2,1
    6880:	e0fffd15 	stw	r3,-12(fp)
    6884:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6888:	e0bffe03 	ldbu	r2,-8(fp)
    688c:	10800044 	addi	r2,r2,1
    6890:	e0bffe05 	stb	r2,-8(fp)
    6894:	e0bffe03 	ldbu	r2,-8(fp)
    6898:	108000f0 	cmpltui	r2,r2,3
    689c:	103ff61e 	bne	r2,zero,6878 <__alt_mem_Flash_flash_data+0xf4006878>
        *ptbl++ = 0;
    }
}
    68a0:	e037883a 	mov	sp,fp
    68a4:	df000017 	ldw	fp,0(sp)
    68a8:	dec00104 	addi	sp,sp,4
    68ac:	f800283a 	ret

000068b0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    68b0:	defffb04 	addi	sp,sp,-20
    68b4:	dfc00415 	stw	ra,16(sp)
    68b8:	df000315 	stw	fp,12(sp)
    68bc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    68c0:	010000b4 	movhi	r4,2
    68c4:	21046d04 	addi	r4,r4,4532
    68c8:	0142d004 	movi	r5,2880
    68cc:	0006c100 	call	6c10 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    68d0:	008000b4 	movhi	r2,2
    68d4:	10846d04 	addi	r2,r2,4532
    68d8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    68dc:	008000b4 	movhi	r2,2
    68e0:	10847904 	addi	r2,r2,4580
    68e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    68e8:	e03ffd0d 	sth	zero,-12(fp)
    68ec:	00001306 	br	693c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    68f0:	e0bffe17 	ldw	r2,-8(fp)
    68f4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    68f8:	e0bffe17 	ldw	r2,-8(fp)
    68fc:	e0ffff17 	ldw	r3,-4(fp)
    6900:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    6904:	e0bffe17 	ldw	r2,-8(fp)
    6908:	00c00fc4 	movi	r3,63
    690c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    6910:	e0bffe17 	ldw	r2,-8(fp)
    6914:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    6918:	e0bffe17 	ldw	r2,-8(fp)
    691c:	10800c04 	addi	r2,r2,48
    6920:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    6924:	e0bfff17 	ldw	r2,-4(fp)
    6928:	10800c04 	addi	r2,r2,48
    692c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    6930:	e0bffd0b 	ldhu	r2,-12(fp)
    6934:	10800044 	addi	r2,r2,1
    6938:	e0bffd0d 	sth	r2,-12(fp)
    693c:	e0bffd0b 	ldhu	r2,-12(fp)
    6940:	10800ef0 	cmpltui	r2,r2,59
    6944:	103fea1e 	bne	r2,zero,68f0 <__alt_mem_Flash_flash_data+0xf40068f0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    6948:	e0bffe17 	ldw	r2,-8(fp)
    694c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    6950:	e0bffe17 	ldw	r2,-8(fp)
    6954:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    6958:	e0bffe17 	ldw	r2,-8(fp)
    695c:	00c00fc4 	movi	r3,63
    6960:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    6964:	e0bffe17 	ldw	r2,-8(fp)
    6968:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    696c:	008000b4 	movhi	r2,2
    6970:	10846d04 	addi	r2,r2,4532
    6974:	d0a81815 	stw	r2,-24480(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    6978:	e037883a 	mov	sp,fp
    697c:	dfc00117 	ldw	ra,4(sp)
    6980:	df000017 	ldw	fp,0(sp)
    6984:	dec00204 	addi	sp,sp,8
    6988:	f800283a 	ret

0000698c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    698c:	deffff04 	addi	sp,sp,-4
    6990:	df000015 	stw	fp,0(sp)
    6994:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    6998:	d0281b15 	stw	zero,-24468(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    699c:	d0281905 	stb	zero,-24476(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    69a0:	d0280b05 	stb	zero,-24532(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    69a4:	d0281345 	stb	zero,-24499(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    69a8:	d0280b45 	stb	zero,-24531(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    69ac:	d0281015 	stw	zero,-24512(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    69b0:	d0280c15 	stw	zero,-24528(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    69b4:	d0281e15 	stw	zero,-24456(gp)
    OSIdleCtrMax  = 0L;
    69b8:	d0281115 	stw	zero,-24508(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    69bc:	d0281d05 	stb	zero,-24460(gp)
#endif
}
    69c0:	e037883a 	mov	sp,fp
    69c4:	df000017 	ldw	fp,0(sp)
    69c8:	dec00104 	addi	sp,sp,4
    69cc:	f800283a 	ret

000069d0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    69d0:	defffd04 	addi	sp,sp,-12
    69d4:	df000215 	stw	fp,8(sp)
    69d8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    69dc:	d0281705 	stb	zero,-24484(gp)
    prdytbl       = &OSRdyTbl[0];
    69e0:	d0a81744 	addi	r2,gp,-24483
    69e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    69e8:	e03ffe05 	stb	zero,-8(fp)
    69ec:	00000706 	br	6a0c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    69f0:	e0bfff17 	ldw	r2,-4(fp)
    69f4:	10c00044 	addi	r3,r2,1
    69f8:	e0ffff15 	stw	r3,-4(fp)
    69fc:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    6a00:	e0bffe03 	ldbu	r2,-8(fp)
    6a04:	10800044 	addi	r2,r2,1
    6a08:	e0bffe05 	stb	r2,-8(fp)
    6a0c:	e0bffe03 	ldbu	r2,-8(fp)
    6a10:	108000f0 	cmpltui	r2,r2,3
    6a14:	103ff61e 	bne	r2,zero,69f0 <__alt_mem_Flash_flash_data+0xf40069f0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    6a18:	d0280d45 	stb	zero,-24523(gp)
    OSPrioHighRdy = 0;
    6a1c:	d0280d05 	stb	zero,-24524(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    6a20:	d0281515 	stw	zero,-24492(gp)
    OSTCBCur      = (OS_TCB *)0;
    6a24:	d0281a15 	stw	zero,-24472(gp)
}
    6a28:	e037883a 	mov	sp,fp
    6a2c:	df000017 	ldw	fp,0(sp)
    6a30:	dec00104 	addi	sp,sp,4
    6a34:	f800283a 	ret

00006a38 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    6a38:	defff804 	addi	sp,sp,-32
    6a3c:	dfc00715 	stw	ra,28(sp)
    6a40:	df000615 	stw	fp,24(sp)
    6a44:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    6a48:	00bfffd4 	movui	r2,65535
    6a4c:	d8800015 	stw	r2,0(sp)
    6a50:	008000b4 	movhi	r2,2
    6a54:	10826d04 	addi	r2,r2,2484
    6a58:	d8800115 	stw	r2,4(sp)
    6a5c:	00808004 	movi	r2,512
    6a60:	d8800215 	stw	r2,8(sp)
    6a64:	d8000315 	stw	zero,12(sp)
    6a68:	008000c4 	movi	r2,3
    6a6c:	d8800415 	stw	r2,16(sp)
    6a70:	01000034 	movhi	r4,0
    6a74:	211bb204 	addi	r4,r4,28360
    6a78:	000b883a 	mov	r5,zero
    6a7c:	018000b4 	movhi	r6,2
    6a80:	31846c04 	addi	r6,r6,4528
    6a84:	01c00504 	movi	r7,20
    6a88:	000b8dc0 	call	b8dc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    6a8c:	01000504 	movi	r4,20
    6a90:	01400074 	movhi	r5,1
    6a94:	2943fb04 	addi	r5,r5,4076
    6a98:	e1bfff04 	addi	r6,fp,-4
    6a9c:	000c1a80 	call	c1a8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    6aa0:	e037883a 	mov	sp,fp
    6aa4:	dfc00117 	ldw	ra,4(sp)
    6aa8:	df000017 	ldw	fp,0(sp)
    6aac:	dec00204 	addi	sp,sp,8
    6ab0:	f800283a 	ret

00006ab4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    6ab4:	defff804 	addi	sp,sp,-32
    6ab8:	dfc00715 	stw	ra,28(sp)
    6abc:	df000615 	stw	fp,24(sp)
    6ac0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    6ac4:	00bfff94 	movui	r2,65534
    6ac8:	d8800015 	stw	r2,0(sp)
    6acc:	008000b4 	movhi	r2,2
    6ad0:	10bff504 	addi	r2,r2,-44
    6ad4:	d8800115 	stw	r2,4(sp)
    6ad8:	00808004 	movi	r2,512
    6adc:	d8800215 	stw	r2,8(sp)
    6ae0:	d8000315 	stw	zero,12(sp)
    6ae4:	008000c4 	movi	r2,3
    6ae8:	d8800415 	stw	r2,16(sp)
    6aec:	01000034 	movhi	r4,0
    6af0:	211bc904 	addi	r4,r4,28452
    6af4:	000b883a 	mov	r5,zero
    6af8:	018000b4 	movhi	r6,2
    6afc:	3181f404 	addi	r6,r6,2000
    6b00:	01c004c4 	movi	r7,19
    6b04:	000b8dc0 	call	b8dc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    6b08:	010004c4 	movi	r4,19
    6b0c:	01400074 	movhi	r5,1
    6b10:	2943ff04 	addi	r5,r5,4092
    6b14:	e1bfff04 	addi	r6,fp,-4
    6b18:	000c1a80 	call	c1a8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    6b1c:	e037883a 	mov	sp,fp
    6b20:	dfc00117 	ldw	ra,4(sp)
    6b24:	df000017 	ldw	fp,0(sp)
    6b28:	dec00204 	addi	sp,sp,8
    6b2c:	f800283a 	ret

00006b30 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    6b30:	defffb04 	addi	sp,sp,-20
    6b34:	dfc00415 	stw	ra,16(sp)
    6b38:	df000315 	stw	fp,12(sp)
    6b3c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    6b40:	010000b4 	movhi	r4,2
    6b44:	21073d04 	addi	r4,r4,7412
    6b48:	01414404 	movi	r5,1296
    6b4c:	0006c100 	call	6c10 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    6b50:	010000b4 	movhi	r4,2
    6b54:	21088104 	addi	r4,r4,8708
    6b58:	01401504 	movi	r5,84
    6b5c:	0006c100 	call	6c10 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    6b60:	008000b4 	movhi	r2,2
    6b64:	10873d04 	addi	r2,r2,7412
    6b68:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    6b6c:	008000b4 	movhi	r2,2
    6b70:	10875804 	addi	r2,r2,7520
    6b74:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6b78:	e03ffd05 	stb	zero,-12(fp)
    6b7c:	00001106 	br	6bc4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    6b80:	e0bffe17 	ldw	r2,-8(fp)
    6b84:	e0ffff17 	ldw	r3,-4(fp)
    6b88:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    6b8c:	e0bffe17 	ldw	r2,-8(fp)
    6b90:	00c00fc4 	movi	r3,63
    6b94:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    6b98:	e0bffe17 	ldw	r2,-8(fp)
    6b9c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    6ba0:	e0bffe17 	ldw	r2,-8(fp)
    6ba4:	10801b04 	addi	r2,r2,108
    6ba8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    6bac:	e0bfff17 	ldw	r2,-4(fp)
    6bb0:	10801b04 	addi	r2,r2,108
    6bb4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    6bb8:	e0bffd03 	ldbu	r2,-12(fp)
    6bbc:	10800044 	addi	r2,r2,1
    6bc0:	e0bffd05 	stb	r2,-12(fp)
    6bc4:	e0bffd03 	ldbu	r2,-12(fp)
    6bc8:	108002f0 	cmpltui	r2,r2,11
    6bcc:	103fec1e 	bne	r2,zero,6b80 <__alt_mem_Flash_flash_data+0xf4006b80>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    6bd0:	e0bffe17 	ldw	r2,-8(fp)
    6bd4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    6bd8:	e0bffe17 	ldw	r2,-8(fp)
    6bdc:	00c00fc4 	movi	r3,63
    6be0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    6be4:	e0bffe17 	ldw	r2,-8(fp)
    6be8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    6bec:	d0280e15 	stw	zero,-24520(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    6bf0:	008000b4 	movhi	r2,2
    6bf4:	10873d04 	addi	r2,r2,7412
    6bf8:	d0a81215 	stw	r2,-24504(gp)
}
    6bfc:	e037883a 	mov	sp,fp
    6c00:	dfc00117 	ldw	ra,4(sp)
    6c04:	df000017 	ldw	fp,0(sp)
    6c08:	dec00204 	addi	sp,sp,8
    6c0c:	f800283a 	ret

00006c10 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    6c10:	defffd04 	addi	sp,sp,-12
    6c14:	df000215 	stw	fp,8(sp)
    6c18:	df000204 	addi	fp,sp,8
    6c1c:	e13ffe15 	stw	r4,-8(fp)
    6c20:	2805883a 	mov	r2,r5
    6c24:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    6c28:	00000706 	br	6c48 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    6c2c:	e0bffe17 	ldw	r2,-8(fp)
    6c30:	10c00044 	addi	r3,r2,1
    6c34:	e0fffe15 	stw	r3,-8(fp)
    6c38:	10000005 	stb	zero,0(r2)
        size--;
    6c3c:	e0bfff0b 	ldhu	r2,-4(fp)
    6c40:	10bfffc4 	addi	r2,r2,-1
    6c44:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    6c48:	e0bfff0b 	ldhu	r2,-4(fp)
    6c4c:	103ff71e 	bne	r2,zero,6c2c <__alt_mem_Flash_flash_data+0xf4006c2c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    6c50:	e037883a 	mov	sp,fp
    6c54:	df000017 	ldw	fp,0(sp)
    6c58:	dec00104 	addi	sp,sp,4
    6c5c:	f800283a 	ret

00006c60 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    6c60:	defffc04 	addi	sp,sp,-16
    6c64:	df000315 	stw	fp,12(sp)
    6c68:	df000304 	addi	fp,sp,12
    6c6c:	e13ffd15 	stw	r4,-12(fp)
    6c70:	e17ffe15 	stw	r5,-8(fp)
    6c74:	3005883a 	mov	r2,r6
    6c78:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    6c7c:	00000b06 	br	6cac <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    6c80:	e0bffd17 	ldw	r2,-12(fp)
    6c84:	10c00044 	addi	r3,r2,1
    6c88:	e0fffd15 	stw	r3,-12(fp)
    6c8c:	e0fffe17 	ldw	r3,-8(fp)
    6c90:	19000044 	addi	r4,r3,1
    6c94:	e13ffe15 	stw	r4,-8(fp)
    6c98:	18c00003 	ldbu	r3,0(r3)
    6c9c:	10c00005 	stb	r3,0(r2)
        size--;
    6ca0:	e0bfff0b 	ldhu	r2,-4(fp)
    6ca4:	10bfffc4 	addi	r2,r2,-1
    6ca8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    6cac:	e0bfff0b 	ldhu	r2,-4(fp)
    6cb0:	103ff31e 	bne	r2,zero,6c80 <__alt_mem_Flash_flash_data+0xf4006c80>
        *pdest++ = *psrc++;
        size--;
    }
}
    6cb4:	e037883a 	mov	sp,fp
    6cb8:	df000017 	ldw	fp,0(sp)
    6cbc:	dec00104 	addi	sp,sp,4
    6cc0:	f800283a 	ret

00006cc4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    6cc4:	defffb04 	addi	sp,sp,-20
    6cc8:	dfc00415 	stw	ra,16(sp)
    6ccc:	df000315 	stw	fp,12(sp)
    6cd0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    6cd4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6cd8:	0005303a 	rdctl	r2,status
    6cdc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ce0:	e0fffe17 	ldw	r3,-8(fp)
    6ce4:	00bfff84 	movi	r2,-2
    6ce8:	1884703a 	and	r2,r3,r2
    6cec:	1001703a 	wrctl	status,r2
  
  return context;
    6cf0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6cf4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    6cf8:	d0a81903 	ldbu	r2,-24476(gp)
    6cfc:	10803fcc 	andi	r2,r2,255
    6d00:	10001a1e 	bne	r2,zero,6d6c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    6d04:	d0a80b03 	ldbu	r2,-24532(gp)
    6d08:	10803fcc 	andi	r2,r2,255
    6d0c:	1000171e 	bne	r2,zero,6d6c <OS_Sched+0xa8>
            OS_SchedNew();
    6d10:	0006d900 	call	6d90 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    6d14:	d0e80d03 	ldbu	r3,-24524(gp)
    6d18:	d0a80d43 	ldbu	r2,-24523(gp)
    6d1c:	18c03fcc 	andi	r3,r3,255
    6d20:	10803fcc 	andi	r2,r2,255
    6d24:	18801126 	beq	r3,r2,6d6c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    6d28:	d0a80d03 	ldbu	r2,-24524(gp)
    6d2c:	10c03fcc 	andi	r3,r2,255
    6d30:	008000b4 	movhi	r2,2
    6d34:	10888104 	addi	r2,r2,8708
    6d38:	18c7883a 	add	r3,r3,r3
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	10c5883a 	add	r2,r2,r3
    6d44:	10800017 	ldw	r2,0(r2)
    6d48:	d0a81515 	stw	r2,-24492(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    6d4c:	d0a81517 	ldw	r2,-24492(gp)
    6d50:	10c00e17 	ldw	r3,56(r2)
    6d54:	18c00044 	addi	r3,r3,1
    6d58:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    6d5c:	d0a81017 	ldw	r2,-24512(gp)
    6d60:	10800044 	addi	r2,r2,1
    6d64:	d0a81015 	stw	r2,-24512(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    6d68:	00103440 	call	10344 <OSCtxSw>
    6d6c:	e0bffd17 	ldw	r2,-12(fp)
    6d70:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6d74:	e0bfff17 	ldw	r2,-4(fp)
    6d78:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    6d7c:	e037883a 	mov	sp,fp
    6d80:	dfc00117 	ldw	ra,4(sp)
    6d84:	df000017 	ldw	fp,0(sp)
    6d88:	dec00204 	addi	sp,sp,8
    6d8c:	f800283a 	ret

00006d90 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    6d90:	defffe04 	addi	sp,sp,-8
    6d94:	df000115 	stw	fp,4(sp)
    6d98:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    6d9c:	d0a81703 	ldbu	r2,-24484(gp)
    6da0:	10c03fcc 	andi	r3,r2,255
    6da4:	00800074 	movhi	r2,1
    6da8:	1083bb04 	addi	r2,r2,3820
    6dac:	10c5883a 	add	r2,r2,r3
    6db0:	10800003 	ldbu	r2,0(r2)
    6db4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    6db8:	e0bfff03 	ldbu	r2,-4(fp)
    6dbc:	100490fa 	slli	r2,r2,3
    6dc0:	1009883a 	mov	r4,r2
    6dc4:	e0ffff03 	ldbu	r3,-4(fp)
    6dc8:	d0a81744 	addi	r2,gp,-24483
    6dcc:	1885883a 	add	r2,r3,r2
    6dd0:	10800003 	ldbu	r2,0(r2)
    6dd4:	10c03fcc 	andi	r3,r2,255
    6dd8:	00800074 	movhi	r2,1
    6ddc:	1083bb04 	addi	r2,r2,3820
    6de0:	10c5883a 	add	r2,r2,r3
    6de4:	10800003 	ldbu	r2,0(r2)
    6de8:	2085883a 	add	r2,r4,r2
    6dec:	d0a80d05 	stb	r2,-24524(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    6df0:	e037883a 	mov	sp,fp
    6df4:	df000017 	ldw	fp,0(sp)
    6df8:	dec00104 	addi	sp,sp,4
    6dfc:	f800283a 	ret

00006e00 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    6e00:	defffc04 	addi	sp,sp,-16
    6e04:	df000315 	stw	fp,12(sp)
    6e08:	df000304 	addi	fp,sp,12
    6e0c:	e13ffe15 	stw	r4,-8(fp)
    6e10:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    6e14:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    6e18:	00000b06 	br	6e48 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    6e1c:	e0bffe17 	ldw	r2,-8(fp)
    6e20:	10c00044 	addi	r3,r2,1
    6e24:	e0fffe15 	stw	r3,-8(fp)
    6e28:	e0ffff17 	ldw	r3,-4(fp)
    6e2c:	19000044 	addi	r4,r3,1
    6e30:	e13fff15 	stw	r4,-4(fp)
    6e34:	18c00003 	ldbu	r3,0(r3)
    6e38:	10c00005 	stb	r3,0(r2)
        len++;
    6e3c:	e0bffd03 	ldbu	r2,-12(fp)
    6e40:	10800044 	addi	r2,r2,1
    6e44:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6e48:	e0bfff17 	ldw	r2,-4(fp)
    6e4c:	10800003 	ldbu	r2,0(r2)
    6e50:	10803fcc 	andi	r2,r2,255
    6e54:	103ff11e 	bne	r2,zero,6e1c <__alt_mem_Flash_flash_data+0xf4006e1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    6e58:	e0bffe17 	ldw	r2,-8(fp)
    6e5c:	10000005 	stb	zero,0(r2)
    return (len);
    6e60:	e0bffd03 	ldbu	r2,-12(fp)
}
    6e64:	e037883a 	mov	sp,fp
    6e68:	df000017 	ldw	fp,0(sp)
    6e6c:	dec00104 	addi	sp,sp,4
    6e70:	f800283a 	ret

00006e74 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    6e74:	defffd04 	addi	sp,sp,-12
    6e78:	df000215 	stw	fp,8(sp)
    6e7c:	df000204 	addi	fp,sp,8
    6e80:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    6e84:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    6e88:	00000606 	br	6ea4 <OS_StrLen+0x30>
        psrc++;
    6e8c:	e0bfff17 	ldw	r2,-4(fp)
    6e90:	10800044 	addi	r2,r2,1
    6e94:	e0bfff15 	stw	r2,-4(fp)
        len++;
    6e98:	e0bffe03 	ldbu	r2,-8(fp)
    6e9c:	10800044 	addi	r2,r2,1
    6ea0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6ea4:	e0bfff17 	ldw	r2,-4(fp)
    6ea8:	10800003 	ldbu	r2,0(r2)
    6eac:	10803fcc 	andi	r2,r2,255
    6eb0:	103ff61e 	bne	r2,zero,6e8c <__alt_mem_Flash_flash_data+0xf4006e8c>
        psrc++;
        len++;
    }
    return (len);
    6eb4:	e0bffe03 	ldbu	r2,-8(fp)
}
    6eb8:	e037883a 	mov	sp,fp
    6ebc:	df000017 	ldw	fp,0(sp)
    6ec0:	dec00104 	addi	sp,sp,4
    6ec4:	f800283a 	ret

00006ec8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    6ec8:	defffa04 	addi	sp,sp,-24
    6ecc:	dfc00515 	stw	ra,20(sp)
    6ed0:	df000415 	stw	fp,16(sp)
    6ed4:	df000404 	addi	fp,sp,16
    6ed8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6edc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ee0:	0005303a 	rdctl	r2,status
    6ee4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ee8:	e0fffd17 	ldw	r3,-12(fp)
    6eec:	00bfff84 	movi	r2,-2
    6ef0:	1884703a 	and	r2,r3,r2
    6ef4:	1001703a 	wrctl	status,r2
  
  return context;
    6ef8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    6efc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    6f00:	d0a80c17 	ldw	r2,-24528(gp)
    6f04:	10800044 	addi	r2,r2,1
    6f08:	d0a80c15 	stw	r2,-24528(gp)
    6f0c:	e0bffc17 	ldw	r2,-16(fp)
    6f10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    6f1c:	001063c0 	call	1063c <OSTaskIdleHook>
    }
    6f20:	003fef06 	br	6ee0 <__alt_mem_Flash_flash_data+0xf4006ee0>

00006f24 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    6f24:	defff804 	addi	sp,sp,-32
    6f28:	dfc00715 	stw	ra,28(sp)
    6f2c:	df000615 	stw	fp,24(sp)
    6f30:	dc400515 	stw	r17,20(sp)
    6f34:	dc000415 	stw	r16,16(sp)
    6f38:	df000604 	addi	fp,sp,24
    6f3c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6f40:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6f44:	00000206 	br	6f50 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    6f48:	01000044 	movi	r4,1
    6f4c:	000cad40 	call	cad4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6f50:	d0a81d03 	ldbu	r2,-24460(gp)
    6f54:	10803fcc 	andi	r2,r2,255
    6f58:	103ffb26 	beq	r2,zero,6f48 <__alt_mem_Flash_flash_data+0xf4006f48>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    6f5c:	d0e81117 	ldw	r3,-24508(gp)
    6f60:	00947b34 	movhi	r2,20972
    6f64:	10a147c4 	addi	r2,r2,-31457
    6f68:	1888383a 	mulxuu	r4,r3,r2
    6f6c:	1885383a 	mul	r2,r3,r2
    6f70:	1021883a 	mov	r16,r2
    6f74:	2023883a 	mov	r17,r4
    6f78:	8804d17a 	srli	r2,r17,5
    6f7c:	d0a81115 	stw	r2,-24508(gp)
    if (OSIdleCtrMax == 0L) {
    6f80:	d0a81117 	ldw	r2,-24508(gp)
    6f84:	1000031e 	bne	r2,zero,6f94 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    6f88:	d0281305 	stb	zero,-24500(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    6f8c:	01003fc4 	movi	r4,255
    6f90:	000c7280 	call	c728 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f94:	0005303a 	rdctl	r2,status
    6f98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f9c:	e0fffb17 	ldw	r3,-20(fp)
    6fa0:	00bfff84 	movi	r2,-2
    6fa4:	1884703a 	and	r2,r3,r2
    6fa8:	1001703a 	wrctl	status,r2
  
  return context;
    6fac:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    6fb0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    6fb4:	d0a80c17 	ldw	r2,-24528(gp)
    6fb8:	d0a81e15 	stw	r2,-24456(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    6fbc:	d0280c15 	stw	zero,-24528(gp)
    6fc0:	e0bffa17 	ldw	r2,-24(fp)
    6fc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6fc8:	e0bffc17 	ldw	r2,-16(fp)
    6fcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    6fd0:	d0e81e17 	ldw	r3,-24456(gp)
    6fd4:	d0a81117 	ldw	r2,-24508(gp)
    6fd8:	1885203a 	divu	r2,r3,r2
    6fdc:	1007883a 	mov	r3,r2
    6fe0:	00801904 	movi	r2,100
    6fe4:	10c5c83a 	sub	r2,r2,r3
    6fe8:	d0a81305 	stb	r2,-24500(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    6fec:	00105cc0 	call	105cc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    6ff0:	00070000 	call	7000 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    6ff4:	0009883a 	mov	r4,zero
    6ff8:	000cad40 	call	cad4 <OSTimeDly>
    }
    6ffc:	003fe506 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>

00007000 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    7000:	defffa04 	addi	sp,sp,-24
    7004:	dfc00515 	stw	ra,20(sp)
    7008:	df000415 	stw	fp,16(sp)
    700c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    7010:	e03ffc05 	stb	zero,-16(fp)
    7014:	00002406 	br	70a8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    7018:	e0fffc03 	ldbu	r3,-16(fp)
    701c:	e0bffe04 	addi	r2,fp,-8
    7020:	1809883a 	mov	r4,r3
    7024:	100b883a 	mov	r5,r2
    7028:	000c5600 	call	c560 <OSTaskStkChk>
    702c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    7030:	e0bffc43 	ldbu	r2,-15(fp)
    7034:	1000191e 	bne	r2,zero,709c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    7038:	e0fffc03 	ldbu	r3,-16(fp)
    703c:	008000b4 	movhi	r2,2
    7040:	10888104 	addi	r2,r2,8708
    7044:	18c7883a 	add	r3,r3,r3
    7048:	18c7883a 	add	r3,r3,r3
    704c:	10c5883a 	add	r2,r2,r3
    7050:	10800017 	ldw	r2,0(r2)
    7054:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    7058:	e0bffd17 	ldw	r2,-12(fp)
    705c:	10000f26 	beq	r2,zero,709c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    7060:	e0bffd17 	ldw	r2,-12(fp)
    7064:	10800060 	cmpeqi	r2,r2,1
    7068:	10000c1e 	bne	r2,zero,709c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    706c:	e0bffd17 	ldw	r2,-12(fp)
    7070:	10c00217 	ldw	r3,8(r2)
    7074:	e0bffd17 	ldw	r2,-12(fp)
    7078:	10800317 	ldw	r2,12(r2)
    707c:	1085883a 	add	r2,r2,r2
    7080:	1085883a 	add	r2,r2,r2
    7084:	1887883a 	add	r3,r3,r2
    7088:	e0bffd17 	ldw	r2,-12(fp)
    708c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    7090:	e0ffff17 	ldw	r3,-4(fp)
    7094:	e0bffd17 	ldw	r2,-12(fp)
    7098:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    709c:	e0bffc03 	ldbu	r2,-16(fp)
    70a0:	10800044 	addi	r2,r2,1
    70a4:	e0bffc05 	stb	r2,-16(fp)
    70a8:	e0bffc03 	ldbu	r2,-16(fp)
    70ac:	10800570 	cmpltui	r2,r2,21
    70b0:	103fd91e 	bne	r2,zero,7018 <__alt_mem_Flash_flash_data+0xf4007018>
#endif
                }
            }
        }
    }
}
    70b4:	e037883a 	mov	sp,fp
    70b8:	dfc00117 	ldw	ra,4(sp)
    70bc:	df000017 	ldw	fp,0(sp)
    70c0:	dec00204 	addi	sp,sp,8
    70c4:	f800283a 	ret

000070c8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    70c8:	defff204 	addi	sp,sp,-56
    70cc:	dfc00d15 	stw	ra,52(sp)
    70d0:	df000c15 	stw	fp,48(sp)
    70d4:	df000c04 	addi	fp,sp,48
    70d8:	e17ffc15 	stw	r5,-16(fp)
    70dc:	e1bffd15 	stw	r6,-12(fp)
    70e0:	3807883a 	mov	r3,r7
    70e4:	e0800417 	ldw	r2,16(fp)
    70e8:	e13ffb05 	stb	r4,-20(fp)
    70ec:	e0fffe0d 	sth	r3,-8(fp)
    70f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    70f4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70f8:	0005303a 	rdctl	r2,status
    70fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7100:	e0fff617 	ldw	r3,-40(fp)
    7104:	00bfff84 	movi	r2,-2
    7108:	1884703a 	and	r2,r3,r2
    710c:	1001703a 	wrctl	status,r2
  
  return context;
    7110:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    7114:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    7118:	d0a81217 	ldw	r2,-24504(gp)
    711c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    7120:	e0bff517 	ldw	r2,-44(fp)
    7124:	10009326 	beq	r2,zero,7374 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    7128:	e0bff517 	ldw	r2,-44(fp)
    712c:	10800517 	ldw	r2,20(r2)
    7130:	d0a81215 	stw	r2,-24504(gp)
    7134:	e0bff417 	ldw	r2,-48(fp)
    7138:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    713c:	e0bff717 	ldw	r2,-36(fp)
    7140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    7144:	e0bff517 	ldw	r2,-44(fp)
    7148:	e0fffc17 	ldw	r3,-16(fp)
    714c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    7150:	e0bff517 	ldw	r2,-44(fp)
    7154:	e0fffb03 	ldbu	r3,-20(fp)
    7158:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    715c:	e0bff517 	ldw	r2,-44(fp)
    7160:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    7164:	e0bff517 	ldw	r2,-44(fp)
    7168:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    716c:	e0bff517 	ldw	r2,-44(fp)
    7170:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    7174:	e0bff517 	ldw	r2,-44(fp)
    7178:	e0c00317 	ldw	r3,12(fp)
    717c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    7180:	e0bff517 	ldw	r2,-44(fp)
    7184:	e0c00217 	ldw	r3,8(fp)
    7188:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    718c:	e0bff517 	ldw	r2,-44(fp)
    7190:	e0fffd17 	ldw	r3,-12(fp)
    7194:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    7198:	e0bff517 	ldw	r2,-44(fp)
    719c:	e0ffff0b 	ldhu	r3,-4(fp)
    71a0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    71a4:	e0bff517 	ldw	r2,-44(fp)
    71a8:	e0fffe0b 	ldhu	r3,-8(fp)
    71ac:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    71b0:	e0bff517 	ldw	r2,-44(fp)
    71b4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    71b8:	e0bffb03 	ldbu	r2,-20(fp)
    71bc:	1004d0fa 	srli	r2,r2,3
    71c0:	1007883a 	mov	r3,r2
    71c4:	e0bff517 	ldw	r2,-44(fp)
    71c8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    71cc:	e0bffb03 	ldbu	r2,-20(fp)
    71d0:	108001cc 	andi	r2,r2,7
    71d4:	1007883a 	mov	r3,r2
    71d8:	e0bff517 	ldw	r2,-44(fp)
    71dc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    71e0:	e0bff517 	ldw	r2,-44(fp)
    71e4:	10800d03 	ldbu	r2,52(r2)
    71e8:	10803fcc 	andi	r2,r2,255
    71ec:	00c00044 	movi	r3,1
    71f0:	1884983a 	sll	r2,r3,r2
    71f4:	1007883a 	mov	r3,r2
    71f8:	e0bff517 	ldw	r2,-44(fp)
    71fc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    7200:	e0bff517 	ldw	r2,-44(fp)
    7204:	10800cc3 	ldbu	r2,51(r2)
    7208:	10803fcc 	andi	r2,r2,255
    720c:	00c00044 	movi	r3,1
    7210:	1884983a 	sll	r2,r3,r2
    7214:	1007883a 	mov	r3,r2
    7218:	e0bff517 	ldw	r2,-44(fp)
    721c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    7220:	e0bff517 	ldw	r2,-44(fp)
    7224:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    7228:	e0bff517 	ldw	r2,-44(fp)
    722c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    7230:	e0bff517 	ldw	r2,-44(fp)
    7234:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    7238:	e0bff517 	ldw	r2,-44(fp)
    723c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    7240:	e0bff517 	ldw	r2,-44(fp)
    7244:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    7248:	e0bff517 	ldw	r2,-44(fp)
    724c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    7250:	e0bff517 	ldw	r2,-44(fp)
    7254:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    7258:	e0bff517 	ldw	r2,-44(fp)
    725c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    7260:	e0bff517 	ldw	r2,-44(fp)
    7264:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    7268:	e0bff517 	ldw	r2,-44(fp)
    726c:	00c00fc4 	movi	r3,63
    7270:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    7274:	e0bff517 	ldw	r2,-44(fp)
    7278:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    727c:	e13ff517 	ldw	r4,-44(fp)
    7280:	00106580 	call	10658 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    7284:	e13ff517 	ldw	r4,-44(fp)
    7288:	00105700 	call	10570 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    728c:	0005303a 	rdctl	r2,status
    7290:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7294:	e0fff817 	ldw	r3,-32(fp)
    7298:	00bfff84 	movi	r2,-2
    729c:	1884703a 	and	r2,r3,r2
    72a0:	1001703a 	wrctl	status,r2
  
  return context;
    72a4:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    72a8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    72ac:	e0fffb03 	ldbu	r3,-20(fp)
    72b0:	008000b4 	movhi	r2,2
    72b4:	10888104 	addi	r2,r2,8708
    72b8:	18c7883a 	add	r3,r3,r3
    72bc:	18c7883a 	add	r3,r3,r3
    72c0:	10c5883a 	add	r2,r2,r3
    72c4:	e0fff517 	ldw	r3,-44(fp)
    72c8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    72cc:	d0e80e17 	ldw	r3,-24520(gp)
    72d0:	e0bff517 	ldw	r2,-44(fp)
    72d4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    72d8:	e0bff517 	ldw	r2,-44(fp)
    72dc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    72e0:	d0a80e17 	ldw	r2,-24520(gp)
    72e4:	10000326 	beq	r2,zero,72f4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    72e8:	d0a80e17 	ldw	r2,-24520(gp)
    72ec:	e0fff517 	ldw	r3,-44(fp)
    72f0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    72f4:	e0bff517 	ldw	r2,-44(fp)
    72f8:	d0a80e15 	stw	r2,-24520(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    72fc:	e0bff517 	ldw	r2,-44(fp)
    7300:	10c00d83 	ldbu	r3,54(r2)
    7304:	d0a81703 	ldbu	r2,-24484(gp)
    7308:	1884b03a 	or	r2,r3,r2
    730c:	d0a81705 	stb	r2,-24484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7310:	e0bff517 	ldw	r2,-44(fp)
    7314:	10800d03 	ldbu	r2,52(r2)
    7318:	10c03fcc 	andi	r3,r2,255
    731c:	e0bff517 	ldw	r2,-44(fp)
    7320:	10800d03 	ldbu	r2,52(r2)
    7324:	11003fcc 	andi	r4,r2,255
    7328:	d0a81744 	addi	r2,gp,-24483
    732c:	2085883a 	add	r2,r4,r2
    7330:	11000003 	ldbu	r4,0(r2)
    7334:	e0bff517 	ldw	r2,-44(fp)
    7338:	10800d43 	ldbu	r2,53(r2)
    733c:	2084b03a 	or	r2,r4,r2
    7340:	1009883a 	mov	r4,r2
    7344:	d0a81744 	addi	r2,gp,-24483
    7348:	1885883a 	add	r2,r3,r2
    734c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    7350:	d0a81343 	ldbu	r2,-24499(gp)
    7354:	10800044 	addi	r2,r2,1
    7358:	d0a81345 	stb	r2,-24499(gp)
    735c:	e0bff417 	ldw	r2,-48(fp)
    7360:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7364:	e0bff917 	ldw	r2,-28(fp)
    7368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    736c:	0005883a 	mov	r2,zero
    7370:	00000506 	br	7388 <OS_TCBInit+0x2c0>
    7374:	e0bff417 	ldw	r2,-48(fp)
    7378:	e0bffa15 	stw	r2,-24(fp)
    737c:	e0bffa17 	ldw	r2,-24(fp)
    7380:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    7384:	00801084 	movi	r2,66
}
    7388:	e037883a 	mov	sp,fp
    738c:	dfc00117 	ldw	ra,4(sp)
    7390:	df000017 	ldw	fp,0(sp)
    7394:	dec00204 	addi	sp,sp,8
    7398:	f800283a 	ret

0000739c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    739c:	defffe04 	addi	sp,sp,-8
    73a0:	df000115 	stw	fp,4(sp)
    73a4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    73a8:	d0a01b04 	addi	r2,gp,-32660
    73ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    73b0:	d0a01c04 	addi	r2,gp,-32656
    73b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    73b8:	d0a01d84 	addi	r2,gp,-32650
    73bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    73c0:	d0a01e04 	addi	r2,gp,-32648
    73c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    73c8:	d0a01d04 	addi	r2,gp,-32652
    73cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    73d0:	d0a01e84 	addi	r2,gp,-32646
    73d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    73d8:	d0a01f04 	addi	r2,gp,-32644
    73dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    73e0:	d0a01f84 	addi	r2,gp,-32642
    73e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    73e8:	d0a02004 	addi	r2,gp,-32640
    73ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    73f0:	d0a02084 	addi	r2,gp,-32638
    73f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    73f8:	d0a02104 	addi	r2,gp,-32636
    73fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    7400:	d0a02184 	addi	r2,gp,-32634
    7404:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    7408:	d0a02204 	addi	r2,gp,-32632
    740c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    7410:	d0a02284 	addi	r2,gp,-32630
    7414:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    7418:	d0a02304 	addi	r2,gp,-32628
    741c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    7420:	d0a02384 	addi	r2,gp,-32626
    7424:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    7428:	d0a02404 	addi	r2,gp,-32624
    742c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    7430:	d0a02484 	addi	r2,gp,-32622
    7434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    7438:	d0a02504 	addi	r2,gp,-32620
    743c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    7440:	d0a02584 	addi	r2,gp,-32618
    7444:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    7448:	d0a02604 	addi	r2,gp,-32616
    744c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    7450:	d0a02684 	addi	r2,gp,-32614
    7454:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    7458:	d0a02704 	addi	r2,gp,-32612
    745c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    7460:	d0a02784 	addi	r2,gp,-32610
    7464:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    7468:	d0a02804 	addi	r2,gp,-32608
    746c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    7470:	d0a02884 	addi	r2,gp,-32606
    7474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    7478:	d0a02904 	addi	r2,gp,-32604
    747c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    7480:	d0a02984 	addi	r2,gp,-32602
    7484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    7488:	d0a02a04 	addi	r2,gp,-32600
    748c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    7490:	d0a02a84 	addi	r2,gp,-32598
    7494:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    7498:	d0a02b04 	addi	r2,gp,-32596
    749c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    74a0:	d0a02b84 	addi	r2,gp,-32594
    74a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    74a8:	d0a02c04 	addi	r2,gp,-32592
    74ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    74b0:	d0a02c84 	addi	r2,gp,-32590
    74b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    74b8:	d0a02d04 	addi	r2,gp,-32588
    74bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    74c0:	d0a02d84 	addi	r2,gp,-32586
    74c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    74c8:	d0a02e04 	addi	r2,gp,-32584
    74cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    74d0:	d0a02e84 	addi	r2,gp,-32582
    74d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    74d8:	d0a02f04 	addi	r2,gp,-32580
    74dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    74e0:	d0a02f84 	addi	r2,gp,-32578
    74e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    74e8:	d0a03004 	addi	r2,gp,-32576
    74ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    74f0:	d0a03084 	addi	r2,gp,-32574
    74f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    74f8:	d0a03104 	addi	r2,gp,-32572
    74fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    7500:	d0a03184 	addi	r2,gp,-32570
    7504:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    7508:	d0a03204 	addi	r2,gp,-32568
    750c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    7510:	d0a03704 	addi	r2,gp,-32548
    7514:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    7518:	e037883a 	mov	sp,fp
    751c:	df000017 	ldw	fp,0(sp)
    7520:	dec00104 	addi	sp,sp,4
    7524:	f800283a 	ret

00007528 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    7528:	defff204 	addi	sp,sp,-56
    752c:	df000d15 	stw	fp,52(sp)
    7530:	df000d04 	addi	fp,sp,52
    7534:	e13ffc15 	stw	r4,-16(fp)
    7538:	2807883a 	mov	r3,r5
    753c:	3005883a 	mov	r2,r6
    7540:	e1ffff15 	stw	r7,-4(fp)
    7544:	e0fffd0d 	sth	r3,-12(fp)
    7548:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    754c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7550:	e0bfff17 	ldw	r2,-4(fp)
    7554:	1000021e 	bne	r2,zero,7560 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    7558:	0005883a 	mov	r2,zero
    755c:	0000b006 	br	7820 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7560:	e0bffc17 	ldw	r2,-16(fp)
    7564:	1000051e 	bne	r2,zero,757c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7568:	e0bfff17 	ldw	r2,-4(fp)
    756c:	00c01b84 	movi	r3,110
    7570:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7574:	0005883a 	mov	r2,zero
    7578:	0000a906 	br	7820 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    757c:	e0bffc17 	ldw	r2,-16(fp)
    7580:	10800003 	ldbu	r2,0(r2)
    7584:	10803fcc 	andi	r2,r2,255
    7588:	10800160 	cmpeqi	r2,r2,5
    758c:	1000051e 	bne	r2,zero,75a4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    7590:	e0bfff17 	ldw	r2,-4(fp)
    7594:	00c00044 	movi	r3,1
    7598:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    759c:	0005883a 	mov	r2,zero
    75a0:	00009f06 	br	7820 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    75a4:	e0fffe03 	ldbu	r3,-8(fp)
    75a8:	00bfe004 	movi	r2,-128
    75ac:	1884703a 	and	r2,r3,r2
    75b0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    75b4:	e0bff503 	ldbu	r2,-44(fp)
    75b8:	10000626 	beq	r2,zero,75d4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    75bc:	e0bffe03 	ldbu	r2,-8(fp)
    75c0:	10801fcc 	andi	r2,r2,127
    75c4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    75c8:	00800044 	movi	r2,1
    75cc:	e0bff385 	stb	r2,-50(fp)
    75d0:	00000106 	br	75d8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    75d4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    75d8:	e0bfff17 	ldw	r2,-4(fp)
    75dc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    75e0:	0005303a 	rdctl	r2,status
    75e4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75e8:	e0fff617 	ldw	r3,-40(fp)
    75ec:	00bfff84 	movi	r2,-2
    75f0:	1884703a 	and	r2,r3,r2
    75f4:	1001703a 	wrctl	status,r2
  
  return context;
    75f8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    75fc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    7600:	e0bffe03 	ldbu	r2,-8(fp)
    7604:	10c00060 	cmpeqi	r3,r2,1
    7608:	18005f1e 	bne	r3,zero,7788 <OSFlagAccept+0x260>
    760c:	10c00088 	cmpgei	r3,r2,2
    7610:	1800021e 	bne	r3,zero,761c <OSFlagAccept+0xf4>
    7614:	10003f26 	beq	r2,zero,7714 <OSFlagAccept+0x1ec>
    7618:	00007706 	br	77f8 <OSFlagAccept+0x2d0>
    761c:	10c000a0 	cmpeqi	r3,r2,2
    7620:	1800031e 	bne	r3,zero,7630 <OSFlagAccept+0x108>
    7624:	108000e0 	cmpeqi	r2,r2,3
    7628:	10001e1e 	bne	r2,zero,76a4 <OSFlagAccept+0x17c>
    762c:	00007206 	br	77f8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    7630:	e0bffc17 	ldw	r2,-16(fp)
    7634:	10c0020b 	ldhu	r3,8(r2)
    7638:	e0bffd0b 	ldhu	r2,-12(fp)
    763c:	1884703a 	and	r2,r3,r2
    7640:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7644:	e0fff30b 	ldhu	r3,-52(fp)
    7648:	e0bffd0b 	ldhu	r2,-12(fp)
    764c:	18800d1e 	bne	r3,r2,7684 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7650:	e0bff383 	ldbu	r2,-50(fp)
    7654:	10800058 	cmpnei	r2,r2,1
    7658:	10000d1e 	bne	r2,zero,7690 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    765c:	e0bffc17 	ldw	r2,-16(fp)
    7660:	1080020b 	ldhu	r2,8(r2)
    7664:	1007883a 	mov	r3,r2
    7668:	e0bff30b 	ldhu	r2,-52(fp)
    766c:	0084303a 	nor	r2,zero,r2
    7670:	1884703a 	and	r2,r3,r2
    7674:	1007883a 	mov	r3,r2
    7678:	e0bffc17 	ldw	r2,-16(fp)
    767c:	10c0020d 	sth	r3,8(r2)
    7680:	00000306 	br	7690 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7684:	e0bfff17 	ldw	r2,-4(fp)
    7688:	00c01c04 	movi	r3,112
    768c:	10c00005 	stb	r3,0(r2)
    7690:	e0bff417 	ldw	r2,-48(fp)
    7694:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7698:	e0bff717 	ldw	r2,-36(fp)
    769c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    76a0:	00005e06 	br	781c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    76a4:	e0bffc17 	ldw	r2,-16(fp)
    76a8:	10c0020b 	ldhu	r3,8(r2)
    76ac:	e0bffd0b 	ldhu	r2,-12(fp)
    76b0:	1884703a 	and	r2,r3,r2
    76b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    76b8:	e0bff30b 	ldhu	r2,-52(fp)
    76bc:	10000d26 	beq	r2,zero,76f4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    76c0:	e0bff383 	ldbu	r2,-50(fp)
    76c4:	10800058 	cmpnei	r2,r2,1
    76c8:	10000d1e 	bne	r2,zero,7700 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    76cc:	e0bffc17 	ldw	r2,-16(fp)
    76d0:	1080020b 	ldhu	r2,8(r2)
    76d4:	1007883a 	mov	r3,r2
    76d8:	e0bff30b 	ldhu	r2,-52(fp)
    76dc:	0084303a 	nor	r2,zero,r2
    76e0:	1884703a 	and	r2,r3,r2
    76e4:	1007883a 	mov	r3,r2
    76e8:	e0bffc17 	ldw	r2,-16(fp)
    76ec:	10c0020d 	sth	r3,8(r2)
    76f0:	00000306 	br	7700 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    76f4:	e0bfff17 	ldw	r2,-4(fp)
    76f8:	00c01c04 	movi	r3,112
    76fc:	10c00005 	stb	r3,0(r2)
    7700:	e0bff417 	ldw	r2,-48(fp)
    7704:	e0bff815 	stw	r2,-32(fp)
    7708:	e0bff817 	ldw	r2,-32(fp)
    770c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7710:	00004206 	br	781c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    7714:	e0bffc17 	ldw	r2,-16(fp)
    7718:	1080020b 	ldhu	r2,8(r2)
    771c:	0084303a 	nor	r2,zero,r2
    7720:	1007883a 	mov	r3,r2
    7724:	e0bffd0b 	ldhu	r2,-12(fp)
    7728:	1884703a 	and	r2,r3,r2
    772c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7730:	e0fff30b 	ldhu	r3,-52(fp)
    7734:	e0bffd0b 	ldhu	r2,-12(fp)
    7738:	18800b1e 	bne	r3,r2,7768 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    773c:	e0bff383 	ldbu	r2,-50(fp)
    7740:	10800058 	cmpnei	r2,r2,1
    7744:	10000b1e 	bne	r2,zero,7774 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7748:	e0bffc17 	ldw	r2,-16(fp)
    774c:	10c0020b 	ldhu	r3,8(r2)
    7750:	e0bff30b 	ldhu	r2,-52(fp)
    7754:	1884b03a 	or	r2,r3,r2
    7758:	1007883a 	mov	r3,r2
    775c:	e0bffc17 	ldw	r2,-16(fp)
    7760:	10c0020d 	sth	r3,8(r2)
    7764:	00000306 	br	7774 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    7768:	e0bfff17 	ldw	r2,-4(fp)
    776c:	00c01c04 	movi	r3,112
    7770:	10c00005 	stb	r3,0(r2)
    7774:	e0bff417 	ldw	r2,-48(fp)
    7778:	e0bff915 	stw	r2,-28(fp)
    777c:	e0bff917 	ldw	r2,-28(fp)
    7780:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    7784:	00002506 	br	781c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7788:	e0bffc17 	ldw	r2,-16(fp)
    778c:	1080020b 	ldhu	r2,8(r2)
    7790:	0084303a 	nor	r2,zero,r2
    7794:	1007883a 	mov	r3,r2
    7798:	e0bffd0b 	ldhu	r2,-12(fp)
    779c:	1884703a 	and	r2,r3,r2
    77a0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    77a4:	e0bff30b 	ldhu	r2,-52(fp)
    77a8:	10000b26 	beq	r2,zero,77d8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    77ac:	e0bff383 	ldbu	r2,-50(fp)
    77b0:	10800058 	cmpnei	r2,r2,1
    77b4:	10000b1e 	bne	r2,zero,77e4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    77b8:	e0bffc17 	ldw	r2,-16(fp)
    77bc:	10c0020b 	ldhu	r3,8(r2)
    77c0:	e0bff30b 	ldhu	r2,-52(fp)
    77c4:	1884b03a 	or	r2,r3,r2
    77c8:	1007883a 	mov	r3,r2
    77cc:	e0bffc17 	ldw	r2,-16(fp)
    77d0:	10c0020d 	sth	r3,8(r2)
    77d4:	00000306 	br	77e4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    77d8:	e0bfff17 	ldw	r2,-4(fp)
    77dc:	00c01c04 	movi	r3,112
    77e0:	10c00005 	stb	r3,0(r2)
    77e4:	e0bff417 	ldw	r2,-48(fp)
    77e8:	e0bffa15 	stw	r2,-24(fp)
    77ec:	e0bffa17 	ldw	r2,-24(fp)
    77f0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    77f4:	00000906 	br	781c <OSFlagAccept+0x2f4>
    77f8:	e0bff417 	ldw	r2,-48(fp)
    77fc:	e0bffb15 	stw	r2,-20(fp)
    7800:	e0bffb17 	ldw	r2,-20(fp)
    7804:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    7808:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    780c:	e0bfff17 	ldw	r2,-4(fp)
    7810:	00c01bc4 	movi	r3,111
    7814:	10c00005 	stb	r3,0(r2)
             break;
    7818:	0001883a 	nop
    }
    return (flags_rdy);
    781c:	e0bff30b 	ldhu	r2,-52(fp)
}
    7820:	e037883a 	mov	sp,fp
    7824:	df000017 	ldw	fp,0(sp)
    7828:	dec00104 	addi	sp,sp,4
    782c:	f800283a 	ret

00007830 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    7830:	defff804 	addi	sp,sp,-32
    7834:	df000715 	stw	fp,28(sp)
    7838:	df000704 	addi	fp,sp,28
    783c:	2005883a 	mov	r2,r4
    7840:	e17fff15 	stw	r5,-4(fp)
    7844:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    7848:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    784c:	e0bfff17 	ldw	r2,-4(fp)
    7850:	1000021e 	bne	r2,zero,785c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    7854:	0005883a 	mov	r2,zero
    7858:	00003b06 	br	7948 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    785c:	00800074 	movhi	r2,1
    7860:	1093f904 	addi	r2,r2,20452
    7864:	10800003 	ldbu	r2,0(r2)
    7868:	10803fcc 	andi	r2,r2,255
    786c:	10000526 	beq	r2,zero,7884 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    7870:	e0bfff17 	ldw	r2,-4(fp)
    7874:	00c00404 	movi	r3,16
    7878:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    787c:	0005883a 	mov	r2,zero
    7880:	00003106 	br	7948 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7884:	0005303a 	rdctl	r2,status
    7888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    788c:	e0fffb17 	ldw	r3,-20(fp)
    7890:	00bfff84 	movi	r2,-2
    7894:	1884703a 	and	r2,r3,r2
    7898:	1001703a 	wrctl	status,r2
  
  return context;
    789c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    78a0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    78a4:	00800074 	movhi	r2,1
    78a8:	1093fc04 	addi	r2,r2,20464
    78ac:	10800017 	ldw	r2,0(r2)
    78b0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    78b4:	e0bffa17 	ldw	r2,-24(fp)
    78b8:	10001b26 	beq	r2,zero,7928 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    78bc:	00800074 	movhi	r2,1
    78c0:	1093fc04 	addi	r2,r2,20464
    78c4:	10800017 	ldw	r2,0(r2)
    78c8:	10c00117 	ldw	r3,4(r2)
    78cc:	00800074 	movhi	r2,1
    78d0:	1093fc04 	addi	r2,r2,20464
    78d4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    78d8:	e0bffa17 	ldw	r2,-24(fp)
    78dc:	00c00144 	movi	r3,5
    78e0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    78e4:	e0bffa17 	ldw	r2,-24(fp)
    78e8:	e0fffe0b 	ldhu	r3,-8(fp)
    78ec:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    78f0:	e0bffa17 	ldw	r2,-24(fp)
    78f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    78f8:	e0bffa17 	ldw	r2,-24(fp)
    78fc:	00c00fc4 	movi	r3,63
    7900:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7904:	e0bffa17 	ldw	r2,-24(fp)
    7908:	100002c5 	stb	zero,11(r2)
    790c:	e0bff917 	ldw	r2,-28(fp)
    7910:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7914:	e0bffc17 	ldw	r2,-16(fp)
    7918:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    791c:	e0bfff17 	ldw	r2,-4(fp)
    7920:	10000005 	stb	zero,0(r2)
    7924:	00000706 	br	7944 <OSFlagCreate+0x114>
    7928:	e0bff917 	ldw	r2,-28(fp)
    792c:	e0bffd15 	stw	r2,-12(fp)
    7930:	e0bffd17 	ldw	r2,-12(fp)
    7934:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    7938:	e0bfff17 	ldw	r2,-4(fp)
    793c:	00c01c84 	movi	r3,114
    7940:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    7944:	e0bffa17 	ldw	r2,-24(fp)
}
    7948:	e037883a 	mov	sp,fp
    794c:	df000017 	ldw	fp,0(sp)
    7950:	dec00104 	addi	sp,sp,4
    7954:	f800283a 	ret

00007958 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    7958:	defff204 	addi	sp,sp,-56
    795c:	dfc00d15 	stw	ra,52(sp)
    7960:	df000c15 	stw	fp,48(sp)
    7964:	df000c04 	addi	fp,sp,48
    7968:	e13ffd15 	stw	r4,-12(fp)
    796c:	2805883a 	mov	r2,r5
    7970:	e1bfff15 	stw	r6,-4(fp)
    7974:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7978:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    797c:	e0bfff17 	ldw	r2,-4(fp)
    7980:	1000021e 	bne	r2,zero,798c <OSFlagDel+0x34>
        return (pgrp);
    7984:	e0bffd17 	ldw	r2,-12(fp)
    7988:	00008a06 	br	7bb4 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    798c:	e0bffd17 	ldw	r2,-12(fp)
    7990:	1000051e 	bne	r2,zero,79a8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7994:	e0bfff17 	ldw	r2,-4(fp)
    7998:	00c01b84 	movi	r3,110
    799c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    79a0:	e0bffd17 	ldw	r2,-12(fp)
    79a4:	00008306 	br	7bb4 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    79a8:	00800074 	movhi	r2,1
    79ac:	1093f904 	addi	r2,r2,20452
    79b0:	10800003 	ldbu	r2,0(r2)
    79b4:	10803fcc 	andi	r2,r2,255
    79b8:	10000526 	beq	r2,zero,79d0 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    79bc:	e0bfff17 	ldw	r2,-4(fp)
    79c0:	00c003c4 	movi	r3,15
    79c4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    79c8:	e0bffd17 	ldw	r2,-12(fp)
    79cc:	00007906 	br	7bb4 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    79d0:	e0bffd17 	ldw	r2,-12(fp)
    79d4:	10800003 	ldbu	r2,0(r2)
    79d8:	10803fcc 	andi	r2,r2,255
    79dc:	10800160 	cmpeqi	r2,r2,5
    79e0:	1000051e 	bne	r2,zero,79f8 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    79e4:	e0bfff17 	ldw	r2,-4(fp)
    79e8:	00c00044 	movi	r3,1
    79ec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    79f0:	e0bffd17 	ldw	r2,-12(fp)
    79f4:	00006f06 	br	7bb4 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79f8:	0005303a 	rdctl	r2,status
    79fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a00:	e0fff817 	ldw	r3,-32(fp)
    7a04:	00bfff84 	movi	r2,-2
    7a08:	1884703a 	and	r2,r3,r2
    7a0c:	1001703a 	wrctl	status,r2
  
  return context;
    7a10:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    7a14:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    7a18:	e0bffd17 	ldw	r2,-12(fp)
    7a1c:	10800117 	ldw	r2,4(r2)
    7a20:	10000326 	beq	r2,zero,7a30 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7a24:	00800044 	movi	r2,1
    7a28:	e0bff405 	stb	r2,-48(fp)
    7a2c:	00000106 	br	7a34 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7a30:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    7a34:	e0bffe03 	ldbu	r2,-8(fp)
    7a38:	10000326 	beq	r2,zero,7a48 <OSFlagDel+0xf0>
    7a3c:	10800060 	cmpeqi	r2,r2,1
    7a40:	1000271e 	bne	r2,zero,7ae0 <OSFlagDel+0x188>
    7a44:	00005006 	br	7b88 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    7a48:	e0bff403 	ldbu	r2,-48(fp)
    7a4c:	10001a1e 	bne	r2,zero,7ab8 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    7a50:	e0bffd17 	ldw	r2,-12(fp)
    7a54:	00c00fc4 	movi	r3,63
    7a58:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7a5c:	e0bffd17 	ldw	r2,-12(fp)
    7a60:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7a64:	e0bffd17 	ldw	r2,-12(fp)
    7a68:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    7a6c:	00800074 	movhi	r2,1
    7a70:	1093fc04 	addi	r2,r2,20464
    7a74:	10c00017 	ldw	r3,0(r2)
    7a78:	e0bffd17 	ldw	r2,-12(fp)
    7a7c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7a80:	e0bffd17 	ldw	r2,-12(fp)
    7a84:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    7a88:	00800074 	movhi	r2,1
    7a8c:	1093fc04 	addi	r2,r2,20464
    7a90:	e0fffd17 	ldw	r3,-12(fp)
    7a94:	10c00015 	stw	r3,0(r2)
    7a98:	e0bff717 	ldw	r2,-36(fp)
    7a9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7aa0:	e0bff917 	ldw	r2,-28(fp)
    7aa4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    7aa8:	e0bfff17 	ldw	r2,-4(fp)
    7aac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    7ab0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    7ab4:	00003e06 	br	7bb0 <OSFlagDel+0x258>
    7ab8:	e0bff717 	ldw	r2,-36(fp)
    7abc:	e0bffa15 	stw	r2,-24(fp)
    7ac0:	e0bffa17 	ldw	r2,-24(fp)
    7ac4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    7ac8:	e0bfff17 	ldw	r2,-4(fp)
    7acc:	00c01244 	movi	r3,73
    7ad0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    7ad4:	e0bffd17 	ldw	r2,-12(fp)
    7ad8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    7adc:	00003406 	br	7bb0 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7ae0:	e0bffd17 	ldw	r2,-12(fp)
    7ae4:	10800117 	ldw	r2,4(r2)
    7ae8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    7aec:	00000606 	br	7b08 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    7af0:	e13ff517 	ldw	r4,-44(fp)
    7af4:	000b883a 	mov	r5,zero
    7af8:	0008b940 	call	8b94 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    7afc:	e0bff517 	ldw	r2,-44(fp)
    7b00:	10800017 	ldw	r2,0(r2)
    7b04:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    7b08:	e0bff517 	ldw	r2,-44(fp)
    7b0c:	103ff81e 	bne	r2,zero,7af0 <__alt_mem_Flash_flash_data+0xf4007af0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    7b10:	e0bffd17 	ldw	r2,-12(fp)
    7b14:	00c00fc4 	movi	r3,63
    7b18:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7b1c:	e0bffd17 	ldw	r2,-12(fp)
    7b20:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7b24:	e0bffd17 	ldw	r2,-12(fp)
    7b28:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    7b2c:	00800074 	movhi	r2,1
    7b30:	1093fc04 	addi	r2,r2,20464
    7b34:	10c00017 	ldw	r3,0(r2)
    7b38:	e0bffd17 	ldw	r2,-12(fp)
    7b3c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7b40:	e0bffd17 	ldw	r2,-12(fp)
    7b44:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    7b48:	00800074 	movhi	r2,1
    7b4c:	1093fc04 	addi	r2,r2,20464
    7b50:	e0fffd17 	ldw	r3,-12(fp)
    7b54:	10c00015 	stw	r3,0(r2)
    7b58:	e0bff717 	ldw	r2,-36(fp)
    7b5c:	e0bffb15 	stw	r2,-20(fp)
    7b60:	e0bffb17 	ldw	r2,-20(fp)
    7b64:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7b68:	e0bff403 	ldbu	r2,-48(fp)
    7b6c:	10800058 	cmpnei	r2,r2,1
    7b70:	1000011e 	bne	r2,zero,7b78 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7b74:	0006cc40 	call	6cc4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    7b78:	e0bfff17 	ldw	r2,-4(fp)
    7b7c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    7b80:	e03ff615 	stw	zero,-40(fp)
             break;
    7b84:	00000a06 	br	7bb0 <OSFlagDel+0x258>
    7b88:	e0bff717 	ldw	r2,-36(fp)
    7b8c:	e0bffc15 	stw	r2,-16(fp)
    7b90:	e0bffc17 	ldw	r2,-16(fp)
    7b94:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    7b98:	e0bfff17 	ldw	r2,-4(fp)
    7b9c:	00c001c4 	movi	r3,7
    7ba0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    7ba4:	e0bffd17 	ldw	r2,-12(fp)
    7ba8:	e0bff615 	stw	r2,-40(fp)
             break;
    7bac:	0001883a 	nop
    }
    return (pgrp_return);
    7bb0:	e0bff617 	ldw	r2,-40(fp)
}
    7bb4:	e037883a 	mov	sp,fp
    7bb8:	dfc00117 	ldw	ra,4(sp)
    7bbc:	df000017 	ldw	fp,0(sp)
    7bc0:	dec00204 	addi	sp,sp,8
    7bc4:	f800283a 	ret

00007bc8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7bc8:	defff604 	addi	sp,sp,-40
    7bcc:	dfc00915 	stw	ra,36(sp)
    7bd0:	df000815 	stw	fp,32(sp)
    7bd4:	df000804 	addi	fp,sp,32
    7bd8:	e13ffd15 	stw	r4,-12(fp)
    7bdc:	e17ffe15 	stw	r5,-8(fp)
    7be0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7be4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7be8:	e0bfff17 	ldw	r2,-4(fp)
    7bec:	1000021e 	bne	r2,zero,7bf8 <OSFlagNameGet+0x30>
        return (0);
    7bf0:	0005883a 	mov	r2,zero
    7bf4:	00003b06 	br	7ce4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    7bf8:	e0bffd17 	ldw	r2,-12(fp)
    7bfc:	1000051e 	bne	r2,zero,7c14 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7c00:	e0bfff17 	ldw	r2,-4(fp)
    7c04:	00c01b84 	movi	r3,110
    7c08:	10c00005 	stb	r3,0(r2)
        return (0);
    7c0c:	0005883a 	mov	r2,zero
    7c10:	00003406 	br	7ce4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7c14:	e0bffe17 	ldw	r2,-8(fp)
    7c18:	1000051e 	bne	r2,zero,7c30 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    7c1c:	e0bfff17 	ldw	r2,-4(fp)
    7c20:	00c00304 	movi	r3,12
    7c24:	10c00005 	stb	r3,0(r2)
        return (0);
    7c28:	0005883a 	mov	r2,zero
    7c2c:	00002d06 	br	7ce4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7c30:	00800074 	movhi	r2,1
    7c34:	1093f904 	addi	r2,r2,20452
    7c38:	10800003 	ldbu	r2,0(r2)
    7c3c:	10803fcc 	andi	r2,r2,255
    7c40:	10000526 	beq	r2,zero,7c58 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    7c44:	e0bfff17 	ldw	r2,-4(fp)
    7c48:	00c00444 	movi	r3,17
    7c4c:	10c00005 	stb	r3,0(r2)
        return (0);
    7c50:	0005883a 	mov	r2,zero
    7c54:	00002306 	br	7ce4 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c58:	0005303a 	rdctl	r2,status
    7c5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c60:	e0fffa17 	ldw	r3,-24(fp)
    7c64:	00bfff84 	movi	r2,-2
    7c68:	1884703a 	and	r2,r3,r2
    7c6c:	1001703a 	wrctl	status,r2
  
  return context;
    7c70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7c74:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    7c78:	e0bffd17 	ldw	r2,-12(fp)
    7c7c:	10800003 	ldbu	r2,0(r2)
    7c80:	10803fcc 	andi	r2,r2,255
    7c84:	10800160 	cmpeqi	r2,r2,5
    7c88:	1000091e 	bne	r2,zero,7cb0 <OSFlagNameGet+0xe8>
    7c8c:	e0bff817 	ldw	r2,-32(fp)
    7c90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c94:	e0bffb17 	ldw	r2,-20(fp)
    7c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7c9c:	e0bfff17 	ldw	r2,-4(fp)
    7ca0:	00c00044 	movi	r3,1
    7ca4:	10c00005 	stb	r3,0(r2)
        return (0);
    7ca8:	0005883a 	mov	r2,zero
    7cac:	00000d06 	br	7ce4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    7cb0:	e0bffd17 	ldw	r2,-12(fp)
    7cb4:	10800284 	addi	r2,r2,10
    7cb8:	e13ffe17 	ldw	r4,-8(fp)
    7cbc:	100b883a 	mov	r5,r2
    7cc0:	0006e000 	call	6e00 <OS_StrCopy>
    7cc4:	e0bff905 	stb	r2,-28(fp)
    7cc8:	e0bff817 	ldw	r2,-32(fp)
    7ccc:	e0bffc15 	stw	r2,-16(fp)
    7cd0:	e0bffc17 	ldw	r2,-16(fp)
    7cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7cd8:	e0bfff17 	ldw	r2,-4(fp)
    7cdc:	10000005 	stb	zero,0(r2)
    return (len);
    7ce0:	e0bff903 	ldbu	r2,-28(fp)
}
    7ce4:	e037883a 	mov	sp,fp
    7ce8:	dfc00117 	ldw	ra,4(sp)
    7cec:	df000017 	ldw	fp,0(sp)
    7cf0:	dec00204 	addi	sp,sp,8
    7cf4:	f800283a 	ret

00007cf8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    7cf8:	defff504 	addi	sp,sp,-44
    7cfc:	dfc00a15 	stw	ra,40(sp)
    7d00:	df000915 	stw	fp,36(sp)
    7d04:	df000904 	addi	fp,sp,36
    7d08:	e13ffd15 	stw	r4,-12(fp)
    7d0c:	e17ffe15 	stw	r5,-8(fp)
    7d10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7d14:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7d18:	e0bfff17 	ldw	r2,-4(fp)
    7d1c:	1000011e 	bne	r2,zero,7d24 <OSFlagNameSet+0x2c>
        return;
    7d20:	00004406 	br	7e34 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    7d24:	e0bffd17 	ldw	r2,-12(fp)
    7d28:	1000041e 	bne	r2,zero,7d3c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7d2c:	e0bfff17 	ldw	r2,-4(fp)
    7d30:	00c01b84 	movi	r3,110
    7d34:	10c00005 	stb	r3,0(r2)
        return;
    7d38:	00003e06 	br	7e34 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7d3c:	e0bffe17 	ldw	r2,-8(fp)
    7d40:	1000041e 	bne	r2,zero,7d54 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    7d44:	e0bfff17 	ldw	r2,-4(fp)
    7d48:	00c00304 	movi	r3,12
    7d4c:	10c00005 	stb	r3,0(r2)
        return;
    7d50:	00003806 	br	7e34 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7d54:	00800074 	movhi	r2,1
    7d58:	1093f904 	addi	r2,r2,20452
    7d5c:	10800003 	ldbu	r2,0(r2)
    7d60:	10803fcc 	andi	r2,r2,255
    7d64:	10000426 	beq	r2,zero,7d78 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    7d68:	e0bfff17 	ldw	r2,-4(fp)
    7d6c:	00c00484 	movi	r3,18
    7d70:	10c00005 	stb	r3,0(r2)
        return;
    7d74:	00002f06 	br	7e34 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d78:	0005303a 	rdctl	r2,status
    7d7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d80:	e0fff917 	ldw	r3,-28(fp)
    7d84:	00bfff84 	movi	r2,-2
    7d88:	1884703a 	and	r2,r3,r2
    7d8c:	1001703a 	wrctl	status,r2
  
  return context;
    7d90:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7d94:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    7d98:	e0bffd17 	ldw	r2,-12(fp)
    7d9c:	10800003 	ldbu	r2,0(r2)
    7da0:	10803fcc 	andi	r2,r2,255
    7da4:	10800160 	cmpeqi	r2,r2,5
    7da8:	1000081e 	bne	r2,zero,7dcc <OSFlagNameSet+0xd4>
    7dac:	e0bff717 	ldw	r2,-36(fp)
    7db0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7db4:	e0bffa17 	ldw	r2,-24(fp)
    7db8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7dbc:	e0bfff17 	ldw	r2,-4(fp)
    7dc0:	00c00044 	movi	r3,1
    7dc4:	10c00005 	stb	r3,0(r2)
        return;
    7dc8:	00001a06 	br	7e34 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    7dcc:	e13ffe17 	ldw	r4,-8(fp)
    7dd0:	0006e740 	call	6e74 <OS_StrLen>
    7dd4:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    7dd8:	e0bff803 	ldbu	r2,-32(fp)
    7ddc:	10800830 	cmpltui	r2,r2,32
    7de0:	1000081e 	bne	r2,zero,7e04 <OSFlagNameSet+0x10c>
    7de4:	e0bff717 	ldw	r2,-36(fp)
    7de8:	e0bffb15 	stw	r2,-20(fp)
    7dec:	e0bffb17 	ldw	r2,-20(fp)
    7df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    7df4:	e0bfff17 	ldw	r2,-4(fp)
    7df8:	00c01cc4 	movi	r3,115
    7dfc:	10c00005 	stb	r3,0(r2)
        return;
    7e00:	00000c06 	br	7e34 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    7e04:	e0bffd17 	ldw	r2,-12(fp)
    7e08:	10800284 	addi	r2,r2,10
    7e0c:	1009883a 	mov	r4,r2
    7e10:	e17ffe17 	ldw	r5,-8(fp)
    7e14:	0006e000 	call	6e00 <OS_StrCopy>
    7e18:	e0bff717 	ldw	r2,-36(fp)
    7e1c:	e0bffc15 	stw	r2,-16(fp)
    7e20:	e0bffc17 	ldw	r2,-16(fp)
    7e24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7e28:	e0bfff17 	ldw	r2,-4(fp)
    7e2c:	10000005 	stb	zero,0(r2)
    return;
    7e30:	0001883a 	nop
}
    7e34:	e037883a 	mov	sp,fp
    7e38:	dfc00117 	ldw	ra,4(sp)
    7e3c:	df000017 	ldw	fp,0(sp)
    7e40:	dec00204 	addi	sp,sp,8
    7e44:	f800283a 	ret

00007e48 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    7e48:	deffe204 	addi	sp,sp,-120
    7e4c:	dfc01d15 	stw	ra,116(sp)
    7e50:	df001c15 	stw	fp,112(sp)
    7e54:	df001c04 	addi	fp,sp,112
    7e58:	e13ffc15 	stw	r4,-16(fp)
    7e5c:	2809883a 	mov	r4,r5
    7e60:	3007883a 	mov	r3,r6
    7e64:	3805883a 	mov	r2,r7
    7e68:	e13ffd0d 	sth	r4,-12(fp)
    7e6c:	e0fffe05 	stb	r3,-8(fp)
    7e70:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7e74:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7e78:	e0800217 	ldw	r2,8(fp)
    7e7c:	1000021e 	bne	r2,zero,7e88 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    7e80:	0005883a 	mov	r2,zero
    7e84:	00016706 	br	8424 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7e88:	e0bffc17 	ldw	r2,-16(fp)
    7e8c:	1000051e 	bne	r2,zero,7ea4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7e90:	e0800217 	ldw	r2,8(fp)
    7e94:	00c01b84 	movi	r3,110
    7e98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7e9c:	0005883a 	mov	r2,zero
    7ea0:	00016006 	br	8424 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7ea4:	00800074 	movhi	r2,1
    7ea8:	1093f904 	addi	r2,r2,20452
    7eac:	10800003 	ldbu	r2,0(r2)
    7eb0:	10803fcc 	andi	r2,r2,255
    7eb4:	10000526 	beq	r2,zero,7ecc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    7eb8:	e0800217 	ldw	r2,8(fp)
    7ebc:	00c00084 	movi	r3,2
    7ec0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7ec4:	0005883a 	mov	r2,zero
    7ec8:	00015606 	br	8424 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    7ecc:	00800074 	movhi	r2,1
    7ed0:	1093eb04 	addi	r2,r2,20396
    7ed4:	10800003 	ldbu	r2,0(r2)
    7ed8:	10803fcc 	andi	r2,r2,255
    7edc:	10000526 	beq	r2,zero,7ef4 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    7ee0:	e0800217 	ldw	r2,8(fp)
    7ee4:	00c00344 	movi	r3,13
    7ee8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7eec:	0005883a 	mov	r2,zero
    7ef0:	00014c06 	br	8424 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    7ef4:	e0bffc17 	ldw	r2,-16(fp)
    7ef8:	10800003 	ldbu	r2,0(r2)
    7efc:	10803fcc 	andi	r2,r2,255
    7f00:	10800160 	cmpeqi	r2,r2,5
    7f04:	1000051e 	bne	r2,zero,7f1c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    7f08:	e0800217 	ldw	r2,8(fp)
    7f0c:	00c00044 	movi	r3,1
    7f10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7f14:	0005883a 	mov	r2,zero
    7f18:	00014206 	br	8424 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    7f1c:	e0fffe03 	ldbu	r3,-8(fp)
    7f20:	00bfe004 	movi	r2,-128
    7f24:	1884703a 	and	r2,r3,r2
    7f28:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    7f2c:	e0bfe703 	ldbu	r2,-100(fp)
    7f30:	10000626 	beq	r2,zero,7f4c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    7f34:	e0bffe03 	ldbu	r2,-8(fp)
    7f38:	10801fcc 	andi	r2,r2,127
    7f3c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    7f40:	00800044 	movi	r2,1
    7f44:	e0bfe505 	stb	r2,-108(fp)
    7f48:	00000106 	br	7f50 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    7f4c:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f50:	0005303a 	rdctl	r2,status
    7f54:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f58:	e0ffe917 	ldw	r3,-92(fp)
    7f5c:	00bfff84 	movi	r2,-2
    7f60:	1884703a 	and	r2,r3,r2
    7f64:	1001703a 	wrctl	status,r2
  
  return context;
    7f68:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7f6c:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    7f70:	e0bffe03 	ldbu	r2,-8(fp)
    7f74:	10c00060 	cmpeqi	r3,r2,1
    7f78:	1800921e 	bne	r3,zero,81c4 <OSFlagPend+0x37c>
    7f7c:	10c00088 	cmpgei	r3,r2,2
    7f80:	1800021e 	bne	r3,zero,7f8c <OSFlagPend+0x144>
    7f84:	10006126 	beq	r2,zero,810c <OSFlagPend+0x2c4>
    7f88:	0000bb06 	br	8278 <OSFlagPend+0x430>
    7f8c:	10c000a0 	cmpeqi	r3,r2,2
    7f90:	1800031e 	bne	r3,zero,7fa0 <OSFlagPend+0x158>
    7f94:	108000e0 	cmpeqi	r2,r2,3
    7f98:	10002f1e 	bne	r2,zero,8058 <OSFlagPend+0x210>
    7f9c:	0000b606 	br	8278 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    7fa0:	e0bffc17 	ldw	r2,-16(fp)
    7fa4:	10c0020b 	ldhu	r3,8(r2)
    7fa8:	e0bffd0b 	ldhu	r2,-12(fp)
    7fac:	1884703a 	and	r2,r3,r2
    7fb0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7fb4:	e0ffe78b 	ldhu	r3,-98(fp)
    7fb8:	e0bffd0b 	ldhu	r2,-12(fp)
    7fbc:	1880191e 	bne	r3,r2,8024 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7fc0:	e0bfe503 	ldbu	r2,-108(fp)
    7fc4:	10800058 	cmpnei	r2,r2,1
    7fc8:	1000091e 	bne	r2,zero,7ff0 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    7fcc:	e0bffc17 	ldw	r2,-16(fp)
    7fd0:	1080020b 	ldhu	r2,8(r2)
    7fd4:	1007883a 	mov	r3,r2
    7fd8:	e0bfe78b 	ldhu	r2,-98(fp)
    7fdc:	0084303a 	nor	r2,zero,r2
    7fe0:	1884703a 	and	r2,r3,r2
    7fe4:	1007883a 	mov	r3,r2
    7fe8:	e0bffc17 	ldw	r2,-16(fp)
    7fec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7ff0:	00800074 	movhi	r2,1
    7ff4:	1093fa04 	addi	r2,r2,20456
    7ff8:	10800017 	ldw	r2,0(r2)
    7ffc:	e0ffe78b 	ldhu	r3,-98(fp)
    8000:	10c00b0d 	sth	r3,44(r2)
    8004:	e0bfe617 	ldw	r2,-104(fp)
    8008:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    800c:	e0bfea17 	ldw	r2,-88(fp)
    8010:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    8014:	e0800217 	ldw	r2,8(fp)
    8018:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    801c:	e0bfe78b 	ldhu	r2,-98(fp)
    8020:	00010006 	br	8424 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    8024:	e1bffd0b 	ldhu	r6,-12(fp)
    8028:	e0fffe03 	ldbu	r3,-8(fp)
    802c:	e0bfff0b 	ldhu	r2,-4(fp)
    8030:	e17ff704 	addi	r5,fp,-36
    8034:	d8800015 	stw	r2,0(sp)
    8038:	e13ffc17 	ldw	r4,-16(fp)
    803c:	180f883a 	mov	r7,r3
    8040:	00088ec0 	call	88ec <OS_FlagBlock>
    8044:	e0bfe617 	ldw	r2,-104(fp)
    8048:	e0bfeb15 	stw	r2,-84(fp)
    804c:	e0bfeb17 	ldw	r2,-84(fp)
    8050:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    8054:	00009206 	br	82a0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    8058:	e0bffc17 	ldw	r2,-16(fp)
    805c:	10c0020b 	ldhu	r3,8(r2)
    8060:	e0bffd0b 	ldhu	r2,-12(fp)
    8064:	1884703a 	and	r2,r3,r2
    8068:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    806c:	e0bfe78b 	ldhu	r2,-98(fp)
    8070:	10001926 	beq	r2,zero,80d8 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    8074:	e0bfe503 	ldbu	r2,-108(fp)
    8078:	10800058 	cmpnei	r2,r2,1
    807c:	1000091e 	bne	r2,zero,80a4 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    8080:	e0bffc17 	ldw	r2,-16(fp)
    8084:	1080020b 	ldhu	r2,8(r2)
    8088:	1007883a 	mov	r3,r2
    808c:	e0bfe78b 	ldhu	r2,-98(fp)
    8090:	0084303a 	nor	r2,zero,r2
    8094:	1884703a 	and	r2,r3,r2
    8098:	1007883a 	mov	r3,r2
    809c:	e0bffc17 	ldw	r2,-16(fp)
    80a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    80a4:	00800074 	movhi	r2,1
    80a8:	1093fa04 	addi	r2,r2,20456
    80ac:	10800017 	ldw	r2,0(r2)
    80b0:	e0ffe78b 	ldhu	r3,-98(fp)
    80b4:	10c00b0d 	sth	r3,44(r2)
    80b8:	e0bfe617 	ldw	r2,-104(fp)
    80bc:	e0bfec15 	stw	r2,-80(fp)
    80c0:	e0bfec17 	ldw	r2,-80(fp)
    80c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    80c8:	e0800217 	ldw	r2,8(fp)
    80cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    80d0:	e0bfe78b 	ldhu	r2,-98(fp)
    80d4:	0000d306 	br	8424 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    80d8:	e1bffd0b 	ldhu	r6,-12(fp)
    80dc:	e0fffe03 	ldbu	r3,-8(fp)
    80e0:	e0bfff0b 	ldhu	r2,-4(fp)
    80e4:	e17ff704 	addi	r5,fp,-36
    80e8:	d8800015 	stw	r2,0(sp)
    80ec:	e13ffc17 	ldw	r4,-16(fp)
    80f0:	180f883a 	mov	r7,r3
    80f4:	00088ec0 	call	88ec <OS_FlagBlock>
    80f8:	e0bfe617 	ldw	r2,-104(fp)
    80fc:	e0bfed15 	stw	r2,-76(fp)
    8100:	e0bfed17 	ldw	r2,-76(fp)
    8104:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    8108:	00006506 	br	82a0 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    810c:	e0bffc17 	ldw	r2,-16(fp)
    8110:	1080020b 	ldhu	r2,8(r2)
    8114:	0084303a 	nor	r2,zero,r2
    8118:	1007883a 	mov	r3,r2
    811c:	e0bffd0b 	ldhu	r2,-12(fp)
    8120:	1884703a 	and	r2,r3,r2
    8124:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    8128:	e0ffe78b 	ldhu	r3,-98(fp)
    812c:	e0bffd0b 	ldhu	r2,-12(fp)
    8130:	1880171e 	bne	r3,r2,8190 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    8134:	e0bfe503 	ldbu	r2,-108(fp)
    8138:	10800058 	cmpnei	r2,r2,1
    813c:	1000071e 	bne	r2,zero,815c <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    8140:	e0bffc17 	ldw	r2,-16(fp)
    8144:	10c0020b 	ldhu	r3,8(r2)
    8148:	e0bfe78b 	ldhu	r2,-98(fp)
    814c:	1884b03a 	or	r2,r3,r2
    8150:	1007883a 	mov	r3,r2
    8154:	e0bffc17 	ldw	r2,-16(fp)
    8158:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    815c:	00800074 	movhi	r2,1
    8160:	1093fa04 	addi	r2,r2,20456
    8164:	10800017 	ldw	r2,0(r2)
    8168:	e0ffe78b 	ldhu	r3,-98(fp)
    816c:	10c00b0d 	sth	r3,44(r2)
    8170:	e0bfe617 	ldw	r2,-104(fp)
    8174:	e0bfee15 	stw	r2,-72(fp)
    8178:	e0bfee17 	ldw	r2,-72(fp)
    817c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    8180:	e0800217 	ldw	r2,8(fp)
    8184:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    8188:	e0bfe78b 	ldhu	r2,-98(fp)
    818c:	0000a506 	br	8424 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    8190:	e1bffd0b 	ldhu	r6,-12(fp)
    8194:	e0fffe03 	ldbu	r3,-8(fp)
    8198:	e0bfff0b 	ldhu	r2,-4(fp)
    819c:	e17ff704 	addi	r5,fp,-36
    81a0:	d8800015 	stw	r2,0(sp)
    81a4:	e13ffc17 	ldw	r4,-16(fp)
    81a8:	180f883a 	mov	r7,r3
    81ac:	00088ec0 	call	88ec <OS_FlagBlock>
    81b0:	e0bfe617 	ldw	r2,-104(fp)
    81b4:	e0bfef15 	stw	r2,-68(fp)
    81b8:	e0bfef17 	ldw	r2,-68(fp)
    81bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    81c0:	00003706 	br	82a0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    81c4:	e0bffc17 	ldw	r2,-16(fp)
    81c8:	1080020b 	ldhu	r2,8(r2)
    81cc:	0084303a 	nor	r2,zero,r2
    81d0:	1007883a 	mov	r3,r2
    81d4:	e0bffd0b 	ldhu	r2,-12(fp)
    81d8:	1884703a 	and	r2,r3,r2
    81dc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    81e0:	e0bfe78b 	ldhu	r2,-98(fp)
    81e4:	10001726 	beq	r2,zero,8244 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    81e8:	e0bfe503 	ldbu	r2,-108(fp)
    81ec:	10800058 	cmpnei	r2,r2,1
    81f0:	1000071e 	bne	r2,zero,8210 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    81f4:	e0bffc17 	ldw	r2,-16(fp)
    81f8:	10c0020b 	ldhu	r3,8(r2)
    81fc:	e0bfe78b 	ldhu	r2,-98(fp)
    8200:	1884b03a 	or	r2,r3,r2
    8204:	1007883a 	mov	r3,r2
    8208:	e0bffc17 	ldw	r2,-16(fp)
    820c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    8210:	00800074 	movhi	r2,1
    8214:	1093fa04 	addi	r2,r2,20456
    8218:	10800017 	ldw	r2,0(r2)
    821c:	e0ffe78b 	ldhu	r3,-98(fp)
    8220:	10c00b0d 	sth	r3,44(r2)
    8224:	e0bfe617 	ldw	r2,-104(fp)
    8228:	e0bff015 	stw	r2,-64(fp)
    822c:	e0bff017 	ldw	r2,-64(fp)
    8230:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    8234:	e0800217 	ldw	r2,8(fp)
    8238:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    823c:	e0bfe78b 	ldhu	r2,-98(fp)
    8240:	00007806 	br	8424 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    8244:	e1bffd0b 	ldhu	r6,-12(fp)
    8248:	e0fffe03 	ldbu	r3,-8(fp)
    824c:	e0bfff0b 	ldhu	r2,-4(fp)
    8250:	e17ff704 	addi	r5,fp,-36
    8254:	d8800015 	stw	r2,0(sp)
    8258:	e13ffc17 	ldw	r4,-16(fp)
    825c:	180f883a 	mov	r7,r3
    8260:	00088ec0 	call	88ec <OS_FlagBlock>
    8264:	e0bfe617 	ldw	r2,-104(fp)
    8268:	e0bff115 	stw	r2,-60(fp)
    826c:	e0bff117 	ldw	r2,-60(fp)
    8270:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    8274:	00000a06 	br	82a0 <OSFlagPend+0x458>
    8278:	e0bfe617 	ldw	r2,-104(fp)
    827c:	e0bff215 	stw	r2,-56(fp)
    8280:	e0bff217 	ldw	r2,-56(fp)
    8284:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    8288:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    828c:	e0800217 	ldw	r2,8(fp)
    8290:	00c01bc4 	movi	r3,111
    8294:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    8298:	e0bfe78b 	ldhu	r2,-98(fp)
    829c:	00006106 	br	8424 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    82a0:	0006cc40 	call	6cc4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82a4:	0005303a 	rdctl	r2,status
    82a8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82ac:	e0fff317 	ldw	r3,-52(fp)
    82b0:	00bfff84 	movi	r2,-2
    82b4:	1884703a 	and	r2,r3,r2
    82b8:	1001703a 	wrctl	status,r2
  
  return context;
    82bc:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    82c0:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    82c4:	00800074 	movhi	r2,1
    82c8:	1093fa04 	addi	r2,r2,20456
    82cc:	10800017 	ldw	r2,0(r2)
    82d0:	10800c43 	ldbu	r2,49(r2)
    82d4:	10803fcc 	andi	r2,r2,255
    82d8:	10002226 	beq	r2,zero,8364 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    82dc:	00800074 	movhi	r2,1
    82e0:	1093fa04 	addi	r2,r2,20456
    82e4:	10800017 	ldw	r2,0(r2)
    82e8:	10800c43 	ldbu	r2,49(r2)
    82ec:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    82f0:	00800074 	movhi	r2,1
    82f4:	1093fa04 	addi	r2,r2,20456
    82f8:	10800017 	ldw	r2,0(r2)
    82fc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    8300:	e0bff704 	addi	r2,fp,-36
    8304:	1009883a 	mov	r4,r2
    8308:	0008ca40 	call	8ca4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    830c:	00800074 	movhi	r2,1
    8310:	1093fa04 	addi	r2,r2,20456
    8314:	10800017 	ldw	r2,0(r2)
    8318:	10000c05 	stb	zero,48(r2)
    831c:	e0bfe617 	ldw	r2,-104(fp)
    8320:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8324:	e0bff417 	ldw	r2,-48(fp)
    8328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    832c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    8330:	e0bfe803 	ldbu	r2,-96(fp)
    8334:	108000a0 	cmpeqi	r2,r2,2
    8338:	10000426 	beq	r2,zero,834c <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    833c:	e0800217 	ldw	r2,8(fp)
    8340:	00c00384 	movi	r3,14
    8344:	10c00005 	stb	r3,0(r2)
                 break;
    8348:	00000406 	br	835c <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    834c:	e0800217 	ldw	r2,8(fp)
    8350:	00c00284 	movi	r3,10
    8354:	10c00005 	stb	r3,0(r2)
                 break;
    8358:	0001883a 	nop
        }
        return (flags_rdy);
    835c:	e0bfe78b 	ldhu	r2,-98(fp)
    8360:	00003006 	br	8424 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    8364:	00800074 	movhi	r2,1
    8368:	1093fa04 	addi	r2,r2,20456
    836c:	10800017 	ldw	r2,0(r2)
    8370:	10800b0b 	ldhu	r2,44(r2)
    8374:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    8378:	e0bfe503 	ldbu	r2,-108(fp)
    837c:	10800058 	cmpnei	r2,r2,1
    8380:	1000211e 	bne	r2,zero,8408 <OSFlagPend+0x5c0>
        switch (wait_type) {
    8384:	e0bffe03 	ldbu	r2,-8(fp)
    8388:	10001616 	blt	r2,zero,83e4 <OSFlagPend+0x59c>
    838c:	10c00090 	cmplti	r3,r2,2
    8390:	18000c1e 	bne	r3,zero,83c4 <OSFlagPend+0x57c>
    8394:	10800108 	cmpgei	r2,r2,4
    8398:	1000121e 	bne	r2,zero,83e4 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    839c:	e0bffc17 	ldw	r2,-16(fp)
    83a0:	1080020b 	ldhu	r2,8(r2)
    83a4:	1007883a 	mov	r3,r2
    83a8:	e0bfe78b 	ldhu	r2,-98(fp)
    83ac:	0084303a 	nor	r2,zero,r2
    83b0:	1884703a 	and	r2,r3,r2
    83b4:	1007883a 	mov	r3,r2
    83b8:	e0bffc17 	ldw	r2,-16(fp)
    83bc:	10c0020d 	sth	r3,8(r2)
                 break;
    83c0:	00001106 	br	8408 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    83c4:	e0bffc17 	ldw	r2,-16(fp)
    83c8:	10c0020b 	ldhu	r3,8(r2)
    83cc:	e0bfe78b 	ldhu	r2,-98(fp)
    83d0:	1884b03a 	or	r2,r3,r2
    83d4:	1007883a 	mov	r3,r2
    83d8:	e0bffc17 	ldw	r2,-16(fp)
    83dc:	10c0020d 	sth	r3,8(r2)
                 break;
    83e0:	00000906 	br	8408 <OSFlagPend+0x5c0>
    83e4:	e0bfe617 	ldw	r2,-104(fp)
    83e8:	e0bff515 	stw	r2,-44(fp)
    83ec:	e0bff517 	ldw	r2,-44(fp)
    83f0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    83f4:	e0800217 	ldw	r2,8(fp)
    83f8:	00c01bc4 	movi	r3,111
    83fc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    8400:	0005883a 	mov	r2,zero
    8404:	00000706 	br	8424 <OSFlagPend+0x5dc>
    8408:	e0bfe617 	ldw	r2,-104(fp)
    840c:	e0bff615 	stw	r2,-40(fp)
    8410:	e0bff617 	ldw	r2,-40(fp)
    8414:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    8418:	e0800217 	ldw	r2,8(fp)
    841c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    8420:	e0bfe78b 	ldhu	r2,-98(fp)
}
    8424:	e037883a 	mov	sp,fp
    8428:	dfc00117 	ldw	ra,4(sp)
    842c:	df000017 	ldw	fp,0(sp)
    8430:	dec00204 	addi	sp,sp,8
    8434:	f800283a 	ret

00008438 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    8438:	defffb04 	addi	sp,sp,-20
    843c:	df000415 	stw	fp,16(sp)
    8440:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    8444:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8448:	0005303a 	rdctl	r2,status
    844c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8450:	e0fffe17 	ldw	r3,-8(fp)
    8454:	00bfff84 	movi	r2,-2
    8458:	1884703a 	and	r2,r3,r2
    845c:	1001703a 	wrctl	status,r2
  
  return context;
    8460:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    8464:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    8468:	00800074 	movhi	r2,1
    846c:	1093fa04 	addi	r2,r2,20456
    8470:	10800017 	ldw	r2,0(r2)
    8474:	10800b0b 	ldhu	r2,44(r2)
    8478:	e0bffd0d 	sth	r2,-12(fp)
    847c:	e0bffc17 	ldw	r2,-16(fp)
    8480:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8484:	e0bfff17 	ldw	r2,-4(fp)
    8488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    848c:	e0bffd0b 	ldhu	r2,-12(fp)
}
    8490:	e037883a 	mov	sp,fp
    8494:	df000017 	ldw	fp,0(sp)
    8498:	dec00104 	addi	sp,sp,4
    849c:	f800283a 	ret

000084a0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    84a0:	deffef04 	addi	sp,sp,-68
    84a4:	dfc01015 	stw	ra,64(sp)
    84a8:	df000f15 	stw	fp,60(sp)
    84ac:	df000f04 	addi	fp,sp,60
    84b0:	e13ffc15 	stw	r4,-16(fp)
    84b4:	2807883a 	mov	r3,r5
    84b8:	3005883a 	mov	r2,r6
    84bc:	e1ffff15 	stw	r7,-4(fp)
    84c0:	e0fffd0d 	sth	r3,-12(fp)
    84c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    84c8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    84cc:	e0bfff17 	ldw	r2,-4(fp)
    84d0:	1000021e 	bne	r2,zero,84dc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    84d4:	0005883a 	mov	r2,zero
    84d8:	0000ce06 	br	8814 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    84dc:	e0bffc17 	ldw	r2,-16(fp)
    84e0:	1000051e 	bne	r2,zero,84f8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    84e4:	e0bfff17 	ldw	r2,-4(fp)
    84e8:	00c01b84 	movi	r3,110
    84ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    84f0:	0005883a 	mov	r2,zero
    84f4:	0000c706 	br	8814 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    84f8:	e0bffc17 	ldw	r2,-16(fp)
    84fc:	10800003 	ldbu	r2,0(r2)
    8500:	10803fcc 	andi	r2,r2,255
    8504:	10800160 	cmpeqi	r2,r2,5
    8508:	1000051e 	bne	r2,zero,8520 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    850c:	e0bfff17 	ldw	r2,-4(fp)
    8510:	00c00044 	movi	r3,1
    8514:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8518:	0005883a 	mov	r2,zero
    851c:	0000bd06 	br	8814 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8520:	0005303a 	rdctl	r2,status
    8524:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8528:	e0fff617 	ldw	r3,-40(fp)
    852c:	00bfff84 	movi	r2,-2
    8530:	1884703a 	and	r2,r3,r2
    8534:	1001703a 	wrctl	status,r2
  
  return context;
    8538:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    853c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    8540:	e0bffe03 	ldbu	r2,-8(fp)
    8544:	10000326 	beq	r2,zero,8554 <OSFlagPost+0xb4>
    8548:	10800060 	cmpeqi	r2,r2,1
    854c:	10000b1e 	bne	r2,zero,857c <OSFlagPost+0xdc>
    8550:	00001206 	br	859c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    8554:	e0bffc17 	ldw	r2,-16(fp)
    8558:	1080020b 	ldhu	r2,8(r2)
    855c:	1007883a 	mov	r3,r2
    8560:	e0bffd0b 	ldhu	r2,-12(fp)
    8564:	0084303a 	nor	r2,zero,r2
    8568:	1884703a 	and	r2,r3,r2
    856c:	1007883a 	mov	r3,r2
    8570:	e0bffc17 	ldw	r2,-16(fp)
    8574:	10c0020d 	sth	r3,8(r2)
             break;
    8578:	00001106 	br	85c0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    857c:	e0bffc17 	ldw	r2,-16(fp)
    8580:	10c0020b 	ldhu	r3,8(r2)
    8584:	e0bffd0b 	ldhu	r2,-12(fp)
    8588:	1884b03a 	or	r2,r3,r2
    858c:	1007883a 	mov	r3,r2
    8590:	e0bffc17 	ldw	r2,-16(fp)
    8594:	10c0020d 	sth	r3,8(r2)
             break;
    8598:	00000906 	br	85c0 <OSFlagPost+0x120>
    859c:	e0bff317 	ldw	r2,-52(fp)
    85a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    85a4:	e0bff717 	ldw	r2,-36(fp)
    85a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    85ac:	e0bfff17 	ldw	r2,-4(fp)
    85b0:	00c01c44 	movi	r3,113
    85b4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    85b8:	0005883a 	mov	r2,zero
    85bc:	00009506 	br	8814 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    85c0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    85c4:	e0bffc17 	ldw	r2,-16(fp)
    85c8:	10800117 	ldw	r2,4(r2)
    85cc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    85d0:	00007406 	br	87a4 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    85d4:	e0bff117 	ldw	r2,-60(fp)
    85d8:	10800483 	ldbu	r2,18(r2)
    85dc:	10803fcc 	andi	r2,r2,255
    85e0:	10c00060 	cmpeqi	r3,r2,1
    85e4:	18004d1e 	bne	r3,zero,871c <OSFlagPost+0x27c>
    85e8:	10c00088 	cmpgei	r3,r2,2
    85ec:	1800021e 	bne	r3,zero,85f8 <OSFlagPost+0x158>
    85f0:	10003126 	beq	r2,zero,86b8 <OSFlagPost+0x218>
    85f4:	00005f06 	br	8774 <OSFlagPost+0x2d4>
    85f8:	10c000a0 	cmpeqi	r3,r2,2
    85fc:	1800031e 	bne	r3,zero,860c <OSFlagPost+0x16c>
    8600:	108000e0 	cmpeqi	r2,r2,3
    8604:	1000181e 	bne	r2,zero,8668 <OSFlagPost+0x1c8>
    8608:	00005a06 	br	8774 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    860c:	e0bffc17 	ldw	r2,-16(fp)
    8610:	10c0020b 	ldhu	r3,8(r2)
    8614:	e0bff117 	ldw	r2,-60(fp)
    8618:	1080040b 	ldhu	r2,16(r2)
    861c:	1884703a 	and	r2,r3,r2
    8620:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    8624:	e0bff117 	ldw	r2,-60(fp)
    8628:	1080040b 	ldhu	r2,16(r2)
    862c:	10ffffcc 	andi	r3,r2,65535
    8630:	e0bff40b 	ldhu	r2,-48(fp)
    8634:	18800b1e 	bne	r3,r2,8664 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8638:	e0bff40b 	ldhu	r2,-48(fp)
    863c:	e13ff117 	ldw	r4,-60(fp)
    8640:	100b883a 	mov	r5,r2
    8644:	0008b940 	call	8b94 <OS_FlagTaskRdy>
    8648:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    864c:	e0bff483 	ldbu	r2,-46(fp)
    8650:	10800058 	cmpnei	r2,r2,1
    8654:	1000031e 	bne	r2,zero,8664 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8658:	00800044 	movi	r2,1
    865c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8660:	00004d06 	br	8798 <OSFlagPost+0x2f8>
    8664:	00004c06 	br	8798 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    8668:	e0bffc17 	ldw	r2,-16(fp)
    866c:	10c0020b 	ldhu	r3,8(r2)
    8670:	e0bff117 	ldw	r2,-60(fp)
    8674:	1080040b 	ldhu	r2,16(r2)
    8678:	1884703a 	and	r2,r3,r2
    867c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    8680:	e0bff40b 	ldhu	r2,-48(fp)
    8684:	10000b26 	beq	r2,zero,86b4 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8688:	e0bff40b 	ldhu	r2,-48(fp)
    868c:	e13ff117 	ldw	r4,-60(fp)
    8690:	100b883a 	mov	r5,r2
    8694:	0008b940 	call	8b94 <OS_FlagTaskRdy>
    8698:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    869c:	e0bff483 	ldbu	r2,-46(fp)
    86a0:	10800058 	cmpnei	r2,r2,1
    86a4:	1000031e 	bne	r2,zero,86b4 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    86a8:	00800044 	movi	r2,1
    86ac:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    86b0:	00003906 	br	8798 <OSFlagPost+0x2f8>
    86b4:	00003806 	br	8798 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    86b8:	e0bffc17 	ldw	r2,-16(fp)
    86bc:	1080020b 	ldhu	r2,8(r2)
    86c0:	0084303a 	nor	r2,zero,r2
    86c4:	1007883a 	mov	r3,r2
    86c8:	e0bff117 	ldw	r2,-60(fp)
    86cc:	1080040b 	ldhu	r2,16(r2)
    86d0:	1884703a 	and	r2,r3,r2
    86d4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    86d8:	e0bff117 	ldw	r2,-60(fp)
    86dc:	1080040b 	ldhu	r2,16(r2)
    86e0:	10ffffcc 	andi	r3,r2,65535
    86e4:	e0bff40b 	ldhu	r2,-48(fp)
    86e8:	18800b1e 	bne	r3,r2,8718 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    86ec:	e0bff40b 	ldhu	r2,-48(fp)
    86f0:	e13ff117 	ldw	r4,-60(fp)
    86f4:	100b883a 	mov	r5,r2
    86f8:	0008b940 	call	8b94 <OS_FlagTaskRdy>
    86fc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8700:	e0bff483 	ldbu	r2,-46(fp)
    8704:	10800058 	cmpnei	r2,r2,1
    8708:	1000031e 	bne	r2,zero,8718 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    870c:	00800044 	movi	r2,1
    8710:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    8714:	00002006 	br	8798 <OSFlagPost+0x2f8>
    8718:	00001f06 	br	8798 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    871c:	e0bffc17 	ldw	r2,-16(fp)
    8720:	1080020b 	ldhu	r2,8(r2)
    8724:	0084303a 	nor	r2,zero,r2
    8728:	1007883a 	mov	r3,r2
    872c:	e0bff117 	ldw	r2,-60(fp)
    8730:	1080040b 	ldhu	r2,16(r2)
    8734:	1884703a 	and	r2,r3,r2
    8738:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    873c:	e0bff40b 	ldhu	r2,-48(fp)
    8740:	10000b26 	beq	r2,zero,8770 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    8744:	e0bff40b 	ldhu	r2,-48(fp)
    8748:	e13ff117 	ldw	r4,-60(fp)
    874c:	100b883a 	mov	r5,r2
    8750:	0008b940 	call	8b94 <OS_FlagTaskRdy>
    8754:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    8758:	e0bff483 	ldbu	r2,-46(fp)
    875c:	10800058 	cmpnei	r2,r2,1
    8760:	1000031e 	bne	r2,zero,8770 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    8764:	00800044 	movi	r2,1
    8768:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    876c:	00000a06 	br	8798 <OSFlagPost+0x2f8>
    8770:	00000906 	br	8798 <OSFlagPost+0x2f8>
    8774:	e0bff317 	ldw	r2,-52(fp)
    8778:	e0bff815 	stw	r2,-32(fp)
    877c:	e0bff817 	ldw	r2,-32(fp)
    8780:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    8784:	e0bfff17 	ldw	r2,-4(fp)
    8788:	00c01bc4 	movi	r3,111
    878c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    8790:	0005883a 	mov	r2,zero
    8794:	00001f06 	br	8814 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    8798:	e0bff117 	ldw	r2,-60(fp)
    879c:	10800017 	ldw	r2,0(r2)
    87a0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    87a4:	e0bff117 	ldw	r2,-60(fp)
    87a8:	103f8a1e 	bne	r2,zero,85d4 <__alt_mem_Flash_flash_data+0xf40085d4>
    87ac:	e0bff317 	ldw	r2,-52(fp)
    87b0:	e0bff915 	stw	r2,-28(fp)
    87b4:	e0bff917 	ldw	r2,-28(fp)
    87b8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    87bc:	e0bff203 	ldbu	r2,-56(fp)
    87c0:	10800058 	cmpnei	r2,r2,1
    87c4:	1000011e 	bne	r2,zero,87cc <OSFlagPost+0x32c>
        OS_Sched();
    87c8:	0006cc40 	call	6cc4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    87cc:	0005303a 	rdctl	r2,status
    87d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    87d4:	e0fffa17 	ldw	r3,-24(fp)
    87d8:	00bfff84 	movi	r2,-2
    87dc:	1884703a 	and	r2,r3,r2
    87e0:	1001703a 	wrctl	status,r2
  
  return context;
    87e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    87e8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    87ec:	e0bffc17 	ldw	r2,-16(fp)
    87f0:	1080020b 	ldhu	r2,8(r2)
    87f4:	e0bff50d 	sth	r2,-44(fp)
    87f8:	e0bff317 	ldw	r2,-52(fp)
    87fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8800:	e0bffb17 	ldw	r2,-20(fp)
    8804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    8808:	e0bfff17 	ldw	r2,-4(fp)
    880c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    8810:	e0bff50b 	ldhu	r2,-44(fp)
}
    8814:	e037883a 	mov	sp,fp
    8818:	dfc00117 	ldw	ra,4(sp)
    881c:	df000017 	ldw	fp,0(sp)
    8820:	dec00204 	addi	sp,sp,8
    8824:	f800283a 	ret

00008828 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    8828:	defff904 	addi	sp,sp,-28
    882c:	df000615 	stw	fp,24(sp)
    8830:	df000604 	addi	fp,sp,24
    8834:	e13ffe15 	stw	r4,-8(fp)
    8838:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    883c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    8840:	e0bfff17 	ldw	r2,-4(fp)
    8844:	1000021e 	bne	r2,zero,8850 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    8848:	0005883a 	mov	r2,zero
    884c:	00002306 	br	88dc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    8850:	e0bffe17 	ldw	r2,-8(fp)
    8854:	1000051e 	bne	r2,zero,886c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    8858:	e0bfff17 	ldw	r2,-4(fp)
    885c:	00c01b84 	movi	r3,110
    8860:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8864:	0005883a 	mov	r2,zero
    8868:	00001c06 	br	88dc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    886c:	e0bffe17 	ldw	r2,-8(fp)
    8870:	10800003 	ldbu	r2,0(r2)
    8874:	10803fcc 	andi	r2,r2,255
    8878:	10800160 	cmpeqi	r2,r2,5
    887c:	1000051e 	bne	r2,zero,8894 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8880:	e0bfff17 	ldw	r2,-4(fp)
    8884:	00c00044 	movi	r3,1
    8888:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    888c:	0005883a 	mov	r2,zero
    8890:	00001206 	br	88dc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8894:	0005303a 	rdctl	r2,status
    8898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    889c:	e0fffc17 	ldw	r3,-16(fp)
    88a0:	00bfff84 	movi	r2,-2
    88a4:	1884703a 	and	r2,r3,r2
    88a8:	1001703a 	wrctl	status,r2
  
  return context;
    88ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    88b0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    88b4:	e0bffe17 	ldw	r2,-8(fp)
    88b8:	1080020b 	ldhu	r2,8(r2)
    88bc:	e0bffb0d 	sth	r2,-20(fp)
    88c0:	e0bffa17 	ldw	r2,-24(fp)
    88c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88c8:	e0bffd17 	ldw	r2,-12(fp)
    88cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    88d0:	e0bfff17 	ldw	r2,-4(fp)
    88d4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    88d8:	e0bffb0b 	ldhu	r2,-20(fp)
}
    88dc:	e037883a 	mov	sp,fp
    88e0:	df000017 	ldw	fp,0(sp)
    88e4:	dec00104 	addi	sp,sp,4
    88e8:	f800283a 	ret

000088ec <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    88ec:	defff804 	addi	sp,sp,-32
    88f0:	df000715 	stw	fp,28(sp)
    88f4:	df000704 	addi	fp,sp,28
    88f8:	e13ffb15 	stw	r4,-20(fp)
    88fc:	e17ffc15 	stw	r5,-16(fp)
    8900:	3009883a 	mov	r4,r6
    8904:	3807883a 	mov	r3,r7
    8908:	e0800117 	ldw	r2,4(fp)
    890c:	e13ffd0d 	sth	r4,-12(fp)
    8910:	e0fffe05 	stb	r3,-8(fp)
    8914:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    8918:	00800074 	movhi	r2,1
    891c:	1093fa04 	addi	r2,r2,20456
    8920:	10c00017 	ldw	r3,0(r2)
    8924:	00800074 	movhi	r2,1
    8928:	1093fa04 	addi	r2,r2,20456
    892c:	10800017 	ldw	r2,0(r2)
    8930:	10800c03 	ldbu	r2,48(r2)
    8934:	10800814 	ori	r2,r2,32
    8938:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    893c:	00800074 	movhi	r2,1
    8940:	1093fa04 	addi	r2,r2,20456
    8944:	10800017 	ldw	r2,0(r2)
    8948:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    894c:	00800074 	movhi	r2,1
    8950:	1093fa04 	addi	r2,r2,20456
    8954:	10800017 	ldw	r2,0(r2)
    8958:	e0ffff0b 	ldhu	r3,-4(fp)
    895c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    8960:	00800074 	movhi	r2,1
    8964:	1093fa04 	addi	r2,r2,20456
    8968:	10800017 	ldw	r2,0(r2)
    896c:	e0fffc17 	ldw	r3,-16(fp)
    8970:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    8974:	e0bffc17 	ldw	r2,-16(fp)
    8978:	e0fffd0b 	ldhu	r3,-12(fp)
    897c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    8980:	e0bffc17 	ldw	r2,-16(fp)
    8984:	e0fffe03 	ldbu	r3,-8(fp)
    8988:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    898c:	00800074 	movhi	r2,1
    8990:	1093fa04 	addi	r2,r2,20456
    8994:	10c00017 	ldw	r3,0(r2)
    8998:	e0bffc17 	ldw	r2,-16(fp)
    899c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    89a0:	e0bffb17 	ldw	r2,-20(fp)
    89a4:	10c00117 	ldw	r3,4(r2)
    89a8:	e0bffc17 	ldw	r2,-16(fp)
    89ac:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    89b0:	e0bffc17 	ldw	r2,-16(fp)
    89b4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    89b8:	e0bffc17 	ldw	r2,-16(fp)
    89bc:	e0fffb17 	ldw	r3,-20(fp)
    89c0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    89c4:	e0bffb17 	ldw	r2,-20(fp)
    89c8:	10800117 	ldw	r2,4(r2)
    89cc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    89d0:	e0bff917 	ldw	r2,-28(fp)
    89d4:	10000326 	beq	r2,zero,89e4 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    89d8:	e0bff917 	ldw	r2,-28(fp)
    89dc:	e0fffc17 	ldw	r3,-16(fp)
    89e0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    89e4:	e0bffb17 	ldw	r2,-20(fp)
    89e8:	e0fffc17 	ldw	r3,-16(fp)
    89ec:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    89f0:	00800074 	movhi	r2,1
    89f4:	1093fa04 	addi	r2,r2,20456
    89f8:	10800017 	ldw	r2,0(r2)
    89fc:	10800d03 	ldbu	r2,52(r2)
    8a00:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    8a04:	e0fffa03 	ldbu	r3,-24(fp)
    8a08:	e13ffa03 	ldbu	r4,-24(fp)
    8a0c:	00800074 	movhi	r2,1
    8a10:	1093f744 	addi	r2,r2,20445
    8a14:	1105883a 	add	r2,r2,r4
    8a18:	10800003 	ldbu	r2,0(r2)
    8a1c:	1009883a 	mov	r4,r2
    8a20:	00800074 	movhi	r2,1
    8a24:	1093fa04 	addi	r2,r2,20456
    8a28:	10800017 	ldw	r2,0(r2)
    8a2c:	10800d43 	ldbu	r2,53(r2)
    8a30:	0084303a 	nor	r2,zero,r2
    8a34:	2084703a 	and	r2,r4,r2
    8a38:	1009883a 	mov	r4,r2
    8a3c:	00800074 	movhi	r2,1
    8a40:	1093f744 	addi	r2,r2,20445
    8a44:	10c5883a 	add	r2,r2,r3
    8a48:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    8a4c:	e0fffa03 	ldbu	r3,-24(fp)
    8a50:	00800074 	movhi	r2,1
    8a54:	1093f744 	addi	r2,r2,20445
    8a58:	10c5883a 	add	r2,r2,r3
    8a5c:	10800003 	ldbu	r2,0(r2)
    8a60:	10803fcc 	andi	r2,r2,255
    8a64:	10000e1e 	bne	r2,zero,8aa0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    8a68:	00800074 	movhi	r2,1
    8a6c:	1093fa04 	addi	r2,r2,20456
    8a70:	10800017 	ldw	r2,0(r2)
    8a74:	10800d83 	ldbu	r2,54(r2)
    8a78:	0084303a 	nor	r2,zero,r2
    8a7c:	1007883a 	mov	r3,r2
    8a80:	00800074 	movhi	r2,1
    8a84:	1093f704 	addi	r2,r2,20444
    8a88:	10800003 	ldbu	r2,0(r2)
    8a8c:	1884703a 	and	r2,r3,r2
    8a90:	1007883a 	mov	r3,r2
    8a94:	00800074 	movhi	r2,1
    8a98:	1093f704 	addi	r2,r2,20444
    8a9c:	10c00005 	stb	r3,0(r2)
    }
}
    8aa0:	e037883a 	mov	sp,fp
    8aa4:	df000017 	ldw	fp,0(sp)
    8aa8:	dec00104 	addi	sp,sp,4
    8aac:	f800283a 	ret

00008ab0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    8ab0:	defffb04 	addi	sp,sp,-20
    8ab4:	dfc00415 	stw	ra,16(sp)
    8ab8:	df000315 	stw	fp,12(sp)
    8abc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    8ac0:	010000b4 	movhi	r4,2
    8ac4:	213c0d04 	addi	r4,r4,-4044
    8ac8:	0140dc04 	movi	r5,880
    8acc:	0006c100 	call	6c10 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    8ad0:	008000b4 	movhi	r2,2
    8ad4:	10bc0d04 	addi	r2,r2,-4044
    8ad8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    8adc:	008000b4 	movhi	r2,2
    8ae0:	10bc1804 	addi	r2,r2,-4000
    8ae4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8ae8:	e03ffd0d 	sth	zero,-12(fp)
    8aec:	00001306 	br	8b3c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8af0:	e0bffe17 	ldw	r2,-8(fp)
    8af4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    8af8:	e0bffe17 	ldw	r2,-8(fp)
    8afc:	e0ffff17 	ldw	r3,-4(fp)
    8b00:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    8b04:	e0bffe17 	ldw	r2,-8(fp)
    8b08:	00c00fc4 	movi	r3,63
    8b0c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8b10:	e0bffe17 	ldw	r2,-8(fp)
    8b14:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    8b18:	e0bffe17 	ldw	r2,-8(fp)
    8b1c:	10800b04 	addi	r2,r2,44
    8b20:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    8b24:	e0bfff17 	ldw	r2,-4(fp)
    8b28:	10800b04 	addi	r2,r2,44
    8b2c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8b30:	e0bffd0b 	ldhu	r2,-12(fp)
    8b34:	10800044 	addi	r2,r2,1
    8b38:	e0bffd0d 	sth	r2,-12(fp)
    8b3c:	e0bffd0b 	ldhu	r2,-12(fp)
    8b40:	108004f0 	cmpltui	r2,r2,19
    8b44:	103fea1e 	bne	r2,zero,8af0 <__alt_mem_Flash_flash_data+0xf4008af0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    8b48:	e0bffe17 	ldw	r2,-8(fp)
    8b4c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    8b50:	e0bffe17 	ldw	r2,-8(fp)
    8b54:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    8b58:	e0bffe17 	ldw	r2,-8(fp)
    8b5c:	00c00fc4 	movi	r3,63
    8b60:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8b64:	e0bffe17 	ldw	r2,-8(fp)
    8b68:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    8b6c:	00800074 	movhi	r2,1
    8b70:	1093fc04 	addi	r2,r2,20464
    8b74:	00c000b4 	movhi	r3,2
    8b78:	18fc0d04 	addi	r3,r3,-4044
    8b7c:	10c00015 	stw	r3,0(r2)
#endif
}
    8b80:	e037883a 	mov	sp,fp
    8b84:	dfc00117 	ldw	ra,4(sp)
    8b88:	df000017 	ldw	fp,0(sp)
    8b8c:	dec00204 	addi	sp,sp,8
    8b90:	f800283a 	ret

00008b94 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    8b94:	defffa04 	addi	sp,sp,-24
    8b98:	dfc00515 	stw	ra,20(sp)
    8b9c:	df000415 	stw	fp,16(sp)
    8ba0:	df000404 	addi	fp,sp,16
    8ba4:	e13ffe15 	stw	r4,-8(fp)
    8ba8:	2805883a 	mov	r2,r5
    8bac:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    8bb0:	e0bffe17 	ldw	r2,-8(fp)
    8bb4:	10800217 	ldw	r2,8(r2)
    8bb8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    8bbc:	e0bffd17 	ldw	r2,-12(fp)
    8bc0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    8bc4:	e0bffd17 	ldw	r2,-12(fp)
    8bc8:	e0ffff0b 	ldhu	r3,-4(fp)
    8bcc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    8bd0:	e0bffd17 	ldw	r2,-12(fp)
    8bd4:	10c00c03 	ldbu	r3,48(r2)
    8bd8:	00bff7c4 	movi	r2,-33
    8bdc:	1884703a 	and	r2,r3,r2
    8be0:	1007883a 	mov	r3,r2
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    8be8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    8bec:	e0bffd17 	ldw	r2,-12(fp)
    8bf0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    8bf4:	e0bffd17 	ldw	r2,-12(fp)
    8bf8:	10800c03 	ldbu	r2,48(r2)
    8bfc:	10803fcc 	andi	r2,r2,255
    8c00:	10001f1e 	bne	r2,zero,8c80 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    8c04:	e0bffd17 	ldw	r2,-12(fp)
    8c08:	10c00d83 	ldbu	r3,54(r2)
    8c0c:	00800074 	movhi	r2,1
    8c10:	1093f704 	addi	r2,r2,20444
    8c14:	10800003 	ldbu	r2,0(r2)
    8c18:	1884b03a 	or	r2,r3,r2
    8c1c:	1007883a 	mov	r3,r2
    8c20:	00800074 	movhi	r2,1
    8c24:	1093f704 	addi	r2,r2,20444
    8c28:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8c2c:	e0bffd17 	ldw	r2,-12(fp)
    8c30:	10800d03 	ldbu	r2,52(r2)
    8c34:	10c03fcc 	andi	r3,r2,255
    8c38:	e0bffd17 	ldw	r2,-12(fp)
    8c3c:	10800d03 	ldbu	r2,52(r2)
    8c40:	11003fcc 	andi	r4,r2,255
    8c44:	00800074 	movhi	r2,1
    8c48:	1093f744 	addi	r2,r2,20445
    8c4c:	1105883a 	add	r2,r2,r4
    8c50:	11000003 	ldbu	r4,0(r2)
    8c54:	e0bffd17 	ldw	r2,-12(fp)
    8c58:	10800d43 	ldbu	r2,53(r2)
    8c5c:	2084b03a 	or	r2,r4,r2
    8c60:	1009883a 	mov	r4,r2
    8c64:	00800074 	movhi	r2,1
    8c68:	1093f744 	addi	r2,r2,20445
    8c6c:	10c5883a 	add	r2,r2,r3
    8c70:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    8c74:	00800044 	movi	r2,1
    8c78:	e0bffc05 	stb	r2,-16(fp)
    8c7c:	00000106 	br	8c84 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    8c80:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    8c84:	e13ffe17 	ldw	r4,-8(fp)
    8c88:	0008ca40 	call	8ca4 <OS_FlagUnlink>
    return (sched);
    8c8c:	e0bffc03 	ldbu	r2,-16(fp)
}
    8c90:	e037883a 	mov	sp,fp
    8c94:	dfc00117 	ldw	ra,4(sp)
    8c98:	df000017 	ldw	fp,0(sp)
    8c9c:	dec00204 	addi	sp,sp,8
    8ca0:	f800283a 	ret

00008ca4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    8ca4:	defffa04 	addi	sp,sp,-24
    8ca8:	df000515 	stw	fp,20(sp)
    8cac:	df000504 	addi	fp,sp,20
    8cb0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    8cb4:	e0bfff17 	ldw	r2,-4(fp)
    8cb8:	10800117 	ldw	r2,4(r2)
    8cbc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    8cc0:	e0bfff17 	ldw	r2,-4(fp)
    8cc4:	10800017 	ldw	r2,0(r2)
    8cc8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    8ccc:	e0bffb17 	ldw	r2,-20(fp)
    8cd0:	10000b1e 	bne	r2,zero,8d00 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    8cd4:	e0bfff17 	ldw	r2,-4(fp)
    8cd8:	10800317 	ldw	r2,12(r2)
    8cdc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    8ce0:	e0bffd17 	ldw	r2,-12(fp)
    8ce4:	e0fffc17 	ldw	r3,-16(fp)
    8ce8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    8cec:	e0bffc17 	ldw	r2,-16(fp)
    8cf0:	10000b26 	beq	r2,zero,8d20 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    8cf4:	e0bffc17 	ldw	r2,-16(fp)
    8cf8:	10000115 	stw	zero,4(r2)
    8cfc:	00000806 	br	8d20 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    8d00:	e0bffb17 	ldw	r2,-20(fp)
    8d04:	e0fffc17 	ldw	r3,-16(fp)
    8d08:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    8d0c:	e0bffc17 	ldw	r2,-16(fp)
    8d10:	10000326 	beq	r2,zero,8d20 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    8d14:	e0bffc17 	ldw	r2,-16(fp)
    8d18:	e0fffb17 	ldw	r3,-20(fp)
    8d1c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    8d20:	e0bfff17 	ldw	r2,-4(fp)
    8d24:	10800217 	ldw	r2,8(r2)
    8d28:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    8d2c:	e0bffe17 	ldw	r2,-8(fp)
    8d30:	10000a15 	stw	zero,40(r2)
#endif
}
    8d34:	e037883a 	mov	sp,fp
    8d38:	df000017 	ldw	fp,0(sp)
    8d3c:	dec00104 	addi	sp,sp,4
    8d40:	f800283a 	ret

00008d44 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    8d44:	defff404 	addi	sp,sp,-48
    8d48:	df000b15 	stw	fp,44(sp)
    8d4c:	df000b04 	addi	fp,sp,44
    8d50:	e13ffc15 	stw	r4,-16(fp)
    8d54:	e17ffd15 	stw	r5,-12(fp)
    8d58:	e1bffe15 	stw	r6,-8(fp)
    8d5c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8d60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8d64:	e0bfff17 	ldw	r2,-4(fp)
    8d68:	1000021e 	bne	r2,zero,8d74 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    8d6c:	0005883a 	mov	r2,zero
    8d70:	00006d06 	br	8f28 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    8d74:	e0bffc17 	ldw	r2,-16(fp)
    8d78:	1000051e 	bne	r2,zero,8d90 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    8d7c:	e0bfff17 	ldw	r2,-4(fp)
    8d80:	00c01884 	movi	r3,98
    8d84:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8d88:	0005883a 	mov	r2,zero
    8d8c:	00006606 	br	8f28 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    8d90:	e0bffc17 	ldw	r2,-16(fp)
    8d94:	108000cc 	andi	r2,r2,3
    8d98:	10000526 	beq	r2,zero,8db0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    8d9c:	e0bfff17 	ldw	r2,-4(fp)
    8da0:	00c01884 	movi	r3,98
    8da4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8da8:	0005883a 	mov	r2,zero
    8dac:	00005e06 	br	8f28 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    8db0:	e0bffd17 	ldw	r2,-12(fp)
    8db4:	108000a8 	cmpgeui	r2,r2,2
    8db8:	1000051e 	bne	r2,zero,8dd0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    8dbc:	e0bfff17 	ldw	r2,-4(fp)
    8dc0:	00c016c4 	movi	r3,91
    8dc4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8dc8:	0005883a 	mov	r2,zero
    8dcc:	00005606 	br	8f28 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    8dd0:	e0bffe17 	ldw	r2,-8(fp)
    8dd4:	10800128 	cmpgeui	r2,r2,4
    8dd8:	1000051e 	bne	r2,zero,8df0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    8ddc:	e0bfff17 	ldw	r2,-4(fp)
    8de0:	00c01704 	movi	r3,92
    8de4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8de8:	0005883a 	mov	r2,zero
    8dec:	00004e06 	br	8f28 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8df0:	0005303a 	rdctl	r2,status
    8df4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8df8:	e0fffa17 	ldw	r3,-24(fp)
    8dfc:	00bfff84 	movi	r2,-2
    8e00:	1884703a 	and	r2,r3,r2
    8e04:	1001703a 	wrctl	status,r2
  
  return context;
    8e08:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8e0c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    8e10:	00800074 	movhi	r2,1
    8e14:	1093f404 	addi	r2,r2,20432
    8e18:	10800017 	ldw	r2,0(r2)
    8e1c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    8e20:	00800074 	movhi	r2,1
    8e24:	1093f404 	addi	r2,r2,20432
    8e28:	10800017 	ldw	r2,0(r2)
    8e2c:	10000726 	beq	r2,zero,8e4c <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    8e30:	00800074 	movhi	r2,1
    8e34:	1093f404 	addi	r2,r2,20432
    8e38:	10800017 	ldw	r2,0(r2)
    8e3c:	10c00117 	ldw	r3,4(r2)
    8e40:	00800074 	movhi	r2,1
    8e44:	1093f404 	addi	r2,r2,20432
    8e48:	10c00015 	stw	r3,0(r2)
    8e4c:	e0bff817 	ldw	r2,-32(fp)
    8e50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e54:	e0bffb17 	ldw	r2,-20(fp)
    8e58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    8e5c:	e0bff917 	ldw	r2,-28(fp)
    8e60:	1000051e 	bne	r2,zero,8e78 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    8e64:	e0bfff17 	ldw	r2,-4(fp)
    8e68:	00c01684 	movi	r3,90
    8e6c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8e70:	0005883a 	mov	r2,zero
    8e74:	00002c06 	br	8f28 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    8e78:	e0bffc17 	ldw	r2,-16(fp)
    8e7c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    8e80:	e0fffc17 	ldw	r3,-16(fp)
    8e84:	e0bffe17 	ldw	r2,-8(fp)
    8e88:	1885883a 	add	r2,r3,r2
    8e8c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    8e90:	e03ff715 	stw	zero,-36(fp)
    8e94:	00000c06 	br	8ec8 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    8e98:	e0bff617 	ldw	r2,-40(fp)
    8e9c:	e0fff517 	ldw	r3,-44(fp)
    8ea0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    8ea4:	e0bff517 	ldw	r2,-44(fp)
    8ea8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    8eac:	e0fff517 	ldw	r3,-44(fp)
    8eb0:	e0bffe17 	ldw	r2,-8(fp)
    8eb4:	1885883a 	add	r2,r3,r2
    8eb8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    8ebc:	e0bff717 	ldw	r2,-36(fp)
    8ec0:	10800044 	addi	r2,r2,1
    8ec4:	e0bff715 	stw	r2,-36(fp)
    8ec8:	e0bffd17 	ldw	r2,-12(fp)
    8ecc:	10bfffc4 	addi	r2,r2,-1
    8ed0:	e0fff717 	ldw	r3,-36(fp)
    8ed4:	18bff036 	bltu	r3,r2,8e98 <__alt_mem_Flash_flash_data+0xf4008e98>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    8ed8:	e0bff617 	ldw	r2,-40(fp)
    8edc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    8ee0:	e0bff917 	ldw	r2,-28(fp)
    8ee4:	e0fffc17 	ldw	r3,-16(fp)
    8ee8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    8eec:	e0bff917 	ldw	r2,-28(fp)
    8ef0:	e0fffc17 	ldw	r3,-16(fp)
    8ef4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    8ef8:	e0bff917 	ldw	r2,-28(fp)
    8efc:	e0fffd17 	ldw	r3,-12(fp)
    8f00:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    8f04:	e0bff917 	ldw	r2,-28(fp)
    8f08:	e0fffd17 	ldw	r3,-12(fp)
    8f0c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    8f10:	e0bff917 	ldw	r2,-28(fp)
    8f14:	e0fffe17 	ldw	r3,-8(fp)
    8f18:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    8f1c:	e0bfff17 	ldw	r2,-4(fp)
    8f20:	10000005 	stb	zero,0(r2)
    return (pmem);
    8f24:	e0bff917 	ldw	r2,-28(fp)
}
    8f28:	e037883a 	mov	sp,fp
    8f2c:	df000017 	ldw	fp,0(sp)
    8f30:	dec00104 	addi	sp,sp,4
    8f34:	f800283a 	ret

00008f38 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    8f38:	defff804 	addi	sp,sp,-32
    8f3c:	df000715 	stw	fp,28(sp)
    8f40:	df000704 	addi	fp,sp,28
    8f44:	e13ffe15 	stw	r4,-8(fp)
    8f48:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8f4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8f50:	e0bfff17 	ldw	r2,-4(fp)
    8f54:	1000021e 	bne	r2,zero,8f60 <OSMemGet+0x28>
        return ((void *)0);
    8f58:	0005883a 	mov	r2,zero
    8f5c:	00002e06 	br	9018 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    8f60:	e0bffe17 	ldw	r2,-8(fp)
    8f64:	1000051e 	bne	r2,zero,8f7c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    8f68:	e0bfff17 	ldw	r2,-4(fp)
    8f6c:	00c01804 	movi	r3,96
    8f70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8f74:	0005883a 	mov	r2,zero
    8f78:	00002706 	br	9018 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8f7c:	0005303a 	rdctl	r2,status
    8f80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f84:	e0fffb17 	ldw	r3,-20(fp)
    8f88:	00bfff84 	movi	r2,-2
    8f8c:	1884703a 	and	r2,r3,r2
    8f90:	1001703a 	wrctl	status,r2
  
  return context;
    8f94:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8f98:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    8f9c:	e0bffe17 	ldw	r2,-8(fp)
    8fa0:	10800417 	ldw	r2,16(r2)
    8fa4:	10001426 	beq	r2,zero,8ff8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    8fa8:	e0bffe17 	ldw	r2,-8(fp)
    8fac:	10800117 	ldw	r2,4(r2)
    8fb0:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    8fb4:	e0bffa17 	ldw	r2,-24(fp)
    8fb8:	10c00017 	ldw	r3,0(r2)
    8fbc:	e0bffe17 	ldw	r2,-8(fp)
    8fc0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    8fc4:	e0bffe17 	ldw	r2,-8(fp)
    8fc8:	10800417 	ldw	r2,16(r2)
    8fcc:	10ffffc4 	addi	r3,r2,-1
    8fd0:	e0bffe17 	ldw	r2,-8(fp)
    8fd4:	10c00415 	stw	r3,16(r2)
    8fd8:	e0bff917 	ldw	r2,-28(fp)
    8fdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8fe0:	e0bffc17 	ldw	r2,-16(fp)
    8fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    8fe8:	e0bfff17 	ldw	r2,-4(fp)
    8fec:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    8ff0:	e0bffa17 	ldw	r2,-24(fp)
    8ff4:	00000806 	br	9018 <OSMemGet+0xe0>
    8ff8:	e0bff917 	ldw	r2,-28(fp)
    8ffc:	e0bffd15 	stw	r2,-12(fp)
    9000:	e0bffd17 	ldw	r2,-12(fp)
    9004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    9008:	e0bfff17 	ldw	r2,-4(fp)
    900c:	00c01744 	movi	r3,93
    9010:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    9014:	0005883a 	mov	r2,zero
}
    9018:	e037883a 	mov	sp,fp
    901c:	df000017 	ldw	fp,0(sp)
    9020:	dec00104 	addi	sp,sp,4
    9024:	f800283a 	ret

00009028 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    9028:	defff704 	addi	sp,sp,-36
    902c:	dfc00815 	stw	ra,32(sp)
    9030:	df000715 	stw	fp,28(sp)
    9034:	df000704 	addi	fp,sp,28
    9038:	e13ffd15 	stw	r4,-12(fp)
    903c:	e17ffe15 	stw	r5,-8(fp)
    9040:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9044:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9048:	e0bfff17 	ldw	r2,-4(fp)
    904c:	1000021e 	bne	r2,zero,9058 <OSMemNameGet+0x30>
        return (0);
    9050:	0005883a 	mov	r2,zero
    9054:	00002d06 	br	910c <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    9058:	e0bffd17 	ldw	r2,-12(fp)
    905c:	1000051e 	bne	r2,zero,9074 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    9060:	e0bfff17 	ldw	r2,-4(fp)
    9064:	00c01804 	movi	r3,96
    9068:	10c00005 	stb	r3,0(r2)
        return (0);
    906c:	0005883a 	mov	r2,zero
    9070:	00002606 	br	910c <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    9074:	e0bffe17 	ldw	r2,-8(fp)
    9078:	1000051e 	bne	r2,zero,9090 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    907c:	e0bfff17 	ldw	r2,-4(fp)
    9080:	00c00304 	movi	r3,12
    9084:	10c00005 	stb	r3,0(r2)
        return (0);
    9088:	0005883a 	mov	r2,zero
    908c:	00001f06 	br	910c <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9090:	00800074 	movhi	r2,1
    9094:	1093f904 	addi	r2,r2,20452
    9098:	10800003 	ldbu	r2,0(r2)
    909c:	10803fcc 	andi	r2,r2,255
    90a0:	10000526 	beq	r2,zero,90b8 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    90a4:	e0bfff17 	ldw	r2,-4(fp)
    90a8:	00c00444 	movi	r3,17
    90ac:	10c00005 	stb	r3,0(r2)
        return (0);
    90b0:	0005883a 	mov	r2,zero
    90b4:	00001506 	br	910c <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    90b8:	0005303a 	rdctl	r2,status
    90bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    90c0:	e0fffb17 	ldw	r3,-20(fp)
    90c4:	00bfff84 	movi	r2,-2
    90c8:	1884703a 	and	r2,r3,r2
    90cc:	1001703a 	wrctl	status,r2
  
  return context;
    90d0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    90d4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    90d8:	e0bffd17 	ldw	r2,-12(fp)
    90dc:	10800504 	addi	r2,r2,20
    90e0:	e13ffe17 	ldw	r4,-8(fp)
    90e4:	100b883a 	mov	r5,r2
    90e8:	0006e000 	call	6e00 <OS_StrCopy>
    90ec:	e0bffa05 	stb	r2,-24(fp)
    90f0:	e0bff917 	ldw	r2,-28(fp)
    90f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90f8:	e0bffc17 	ldw	r2,-16(fp)
    90fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	10000005 	stb	zero,0(r2)
    return (len);
    9108:	e0bffa03 	ldbu	r2,-24(fp)
}
    910c:	e037883a 	mov	sp,fp
    9110:	dfc00117 	ldw	ra,4(sp)
    9114:	df000017 	ldw	fp,0(sp)
    9118:	dec00204 	addi	sp,sp,8
    911c:	f800283a 	ret

00009120 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    9120:	defff604 	addi	sp,sp,-40
    9124:	dfc00915 	stw	ra,36(sp)
    9128:	df000815 	stw	fp,32(sp)
    912c:	df000804 	addi	fp,sp,32
    9130:	e13ffd15 	stw	r4,-12(fp)
    9134:	e17ffe15 	stw	r5,-8(fp)
    9138:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    913c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9140:	e0bfff17 	ldw	r2,-4(fp)
    9144:	1000011e 	bne	r2,zero,914c <OSMemNameSet+0x2c>
        return;
    9148:	00003606 	br	9224 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    914c:	e0bffd17 	ldw	r2,-12(fp)
    9150:	1000041e 	bne	r2,zero,9164 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    9154:	e0bfff17 	ldw	r2,-4(fp)
    9158:	00c01804 	movi	r3,96
    915c:	10c00005 	stb	r3,0(r2)
        return;
    9160:	00003006 	br	9224 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    9164:	e0bffe17 	ldw	r2,-8(fp)
    9168:	1000041e 	bne	r2,zero,917c <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    916c:	e0bfff17 	ldw	r2,-4(fp)
    9170:	00c00304 	movi	r3,12
    9174:	10c00005 	stb	r3,0(r2)
        return;
    9178:	00002a06 	br	9224 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    917c:	00800074 	movhi	r2,1
    9180:	1093f904 	addi	r2,r2,20452
    9184:	10800003 	ldbu	r2,0(r2)
    9188:	10803fcc 	andi	r2,r2,255
    918c:	10000426 	beq	r2,zero,91a0 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    9190:	e0bfff17 	ldw	r2,-4(fp)
    9194:	00c00484 	movi	r3,18
    9198:	10c00005 	stb	r3,0(r2)
        return;
    919c:	00002106 	br	9224 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91a0:	0005303a 	rdctl	r2,status
    91a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91a8:	e0fffa17 	ldw	r3,-24(fp)
    91ac:	00bfff84 	movi	r2,-2
    91b0:	1884703a 	and	r2,r3,r2
    91b4:	1001703a 	wrctl	status,r2
  
  return context;
    91b8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    91bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    91c0:	e13ffe17 	ldw	r4,-8(fp)
    91c4:	0006e740 	call	6e74 <OS_StrLen>
    91c8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    91cc:	e0bff903 	ldbu	r2,-28(fp)
    91d0:	10800830 	cmpltui	r2,r2,32
    91d4:	1000081e 	bne	r2,zero,91f8 <OSMemNameSet+0xd8>
    91d8:	e0bff817 	ldw	r2,-32(fp)
    91dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91e0:	e0bffb17 	ldw	r2,-20(fp)
    91e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    91e8:	e0bfff17 	ldw	r2,-4(fp)
    91ec:	00c018c4 	movi	r3,99
    91f0:	10c00005 	stb	r3,0(r2)
        return;
    91f4:	00000b06 	br	9224 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    91f8:	e0bffd17 	ldw	r2,-12(fp)
    91fc:	10800504 	addi	r2,r2,20
    9200:	1009883a 	mov	r4,r2
    9204:	e17ffe17 	ldw	r5,-8(fp)
    9208:	0006e000 	call	6e00 <OS_StrCopy>
    920c:	e0bff817 	ldw	r2,-32(fp)
    9210:	e0bffc15 	stw	r2,-16(fp)
    9214:	e0bffc17 	ldw	r2,-16(fp)
    9218:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    921c:	e0bfff17 	ldw	r2,-4(fp)
    9220:	10000005 	stb	zero,0(r2)
}
    9224:	e037883a 	mov	sp,fp
    9228:	dfc00117 	ldw	ra,4(sp)
    922c:	df000017 	ldw	fp,0(sp)
    9230:	dec00204 	addi	sp,sp,8
    9234:	f800283a 	ret

00009238 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    9238:	defff904 	addi	sp,sp,-28
    923c:	df000615 	stw	fp,24(sp)
    9240:	df000604 	addi	fp,sp,24
    9244:	e13ffe15 	stw	r4,-8(fp)
    9248:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    924c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    9250:	e0bffe17 	ldw	r2,-8(fp)
    9254:	1000021e 	bne	r2,zero,9260 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    9258:	00801804 	movi	r2,96
    925c:	00002806 	br	9300 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    9260:	e0bfff17 	ldw	r2,-4(fp)
    9264:	1000021e 	bne	r2,zero,9270 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    9268:	008017c4 	movi	r2,95
    926c:	00002406 	br	9300 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9270:	0005303a 	rdctl	r2,status
    9274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9278:	e0fffb17 	ldw	r3,-20(fp)
    927c:	00bfff84 	movi	r2,-2
    9280:	1884703a 	and	r2,r3,r2
    9284:	1001703a 	wrctl	status,r2
  
  return context;
    9288:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    928c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    9290:	e0bffe17 	ldw	r2,-8(fp)
    9294:	10c00417 	ldw	r3,16(r2)
    9298:	e0bffe17 	ldw	r2,-8(fp)
    929c:	10800317 	ldw	r2,12(r2)
    92a0:	18800636 	bltu	r3,r2,92bc <OSMemPut+0x84>
    92a4:	e0bffa17 	ldw	r2,-24(fp)
    92a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92ac:	e0bffc17 	ldw	r2,-16(fp)
    92b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    92b4:	00801784 	movi	r2,94
    92b8:	00001106 	br	9300 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    92bc:	e0bffe17 	ldw	r2,-8(fp)
    92c0:	10c00117 	ldw	r3,4(r2)
    92c4:	e0bfff17 	ldw	r2,-4(fp)
    92c8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    92cc:	e0bffe17 	ldw	r2,-8(fp)
    92d0:	e0ffff17 	ldw	r3,-4(fp)
    92d4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    92d8:	e0bffe17 	ldw	r2,-8(fp)
    92dc:	10800417 	ldw	r2,16(r2)
    92e0:	10c00044 	addi	r3,r2,1
    92e4:	e0bffe17 	ldw	r2,-8(fp)
    92e8:	10c00415 	stw	r3,16(r2)
    92ec:	e0bffa17 	ldw	r2,-24(fp)
    92f0:	e0bffd15 	stw	r2,-12(fp)
    92f4:	e0bffd17 	ldw	r2,-12(fp)
    92f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    92fc:	0005883a 	mov	r2,zero
}
    9300:	e037883a 	mov	sp,fp
    9304:	df000017 	ldw	fp,0(sp)
    9308:	dec00104 	addi	sp,sp,4
    930c:	f800283a 	ret

00009310 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    9310:	defffa04 	addi	sp,sp,-24
    9314:	df000515 	stw	fp,20(sp)
    9318:	df000504 	addi	fp,sp,20
    931c:	e13ffe15 	stw	r4,-8(fp)
    9320:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9324:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    9328:	e0bffe17 	ldw	r2,-8(fp)
    932c:	1000021e 	bne	r2,zero,9338 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    9330:	00801804 	movi	r2,96
    9334:	00002c06 	br	93e8 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    9338:	e0bfff17 	ldw	r2,-4(fp)
    933c:	1000021e 	bne	r2,zero,9348 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    9340:	00801844 	movi	r2,97
    9344:	00002806 	br	93e8 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9348:	0005303a 	rdctl	r2,status
    934c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9350:	e0fffc17 	ldw	r3,-16(fp)
    9354:	00bfff84 	movi	r2,-2
    9358:	1884703a 	and	r2,r3,r2
    935c:	1001703a 	wrctl	status,r2
  
  return context;
    9360:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9364:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    9368:	e0bffe17 	ldw	r2,-8(fp)
    936c:	10c00017 	ldw	r3,0(r2)
    9370:	e0bfff17 	ldw	r2,-4(fp)
    9374:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    9378:	e0bffe17 	ldw	r2,-8(fp)
    937c:	10c00117 	ldw	r3,4(r2)
    9380:	e0bfff17 	ldw	r2,-4(fp)
    9384:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    9388:	e0bffe17 	ldw	r2,-8(fp)
    938c:	10c00217 	ldw	r3,8(r2)
    9390:	e0bfff17 	ldw	r2,-4(fp)
    9394:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    9398:	e0bffe17 	ldw	r2,-8(fp)
    939c:	10c00317 	ldw	r3,12(r2)
    93a0:	e0bfff17 	ldw	r2,-4(fp)
    93a4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    93a8:	e0bffe17 	ldw	r2,-8(fp)
    93ac:	10c00417 	ldw	r3,16(r2)
    93b0:	e0bfff17 	ldw	r2,-4(fp)
    93b4:	10c00415 	stw	r3,16(r2)
    93b8:	e0bffb17 	ldw	r2,-20(fp)
    93bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93c0:	e0bffd17 	ldw	r2,-12(fp)
    93c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    93c8:	e0bfff17 	ldw	r2,-4(fp)
    93cc:	10c00317 	ldw	r3,12(r2)
    93d0:	e0bfff17 	ldw	r2,-4(fp)
    93d4:	10800417 	ldw	r2,16(r2)
    93d8:	1887c83a 	sub	r3,r3,r2
    93dc:	e0bfff17 	ldw	r2,-4(fp)
    93e0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    93e4:	0005883a 	mov	r2,zero
}
    93e8:	e037883a 	mov	sp,fp
    93ec:	df000017 	ldw	fp,0(sp)
    93f0:	dec00104 	addi	sp,sp,4
    93f4:	f800283a 	ret

000093f8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    93f8:	defffc04 	addi	sp,sp,-16
    93fc:	dfc00315 	stw	ra,12(sp)
    9400:	df000215 	stw	fp,8(sp)
    9404:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    9408:	010000b4 	movhi	r4,2
    940c:	213ce904 	addi	r4,r4,-3164
    9410:	01430c04 	movi	r5,3120
    9414:	0006c100 	call	6c10 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    9418:	008000b4 	movhi	r2,2
    941c:	10bce904 	addi	r2,r2,-3164
    9420:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    9424:	e03fff0d 	sth	zero,-4(fp)
    9428:	00001306 	br	9478 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    942c:	e0bfff0b 	ldhu	r2,-4(fp)
    9430:	10800044 	addi	r2,r2,1
    9434:	10c00d24 	muli	r3,r2,52
    9438:	008000b4 	movhi	r2,2
    943c:	10bce904 	addi	r2,r2,-3164
    9440:	1887883a 	add	r3,r3,r2
    9444:	e0bffe17 	ldw	r2,-8(fp)
    9448:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    944c:	e0bffe17 	ldw	r2,-8(fp)
    9450:	00c00fc4 	movi	r3,63
    9454:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    9458:	e0bffe17 	ldw	r2,-8(fp)
    945c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    9460:	e0bffe17 	ldw	r2,-8(fp)
    9464:	10800d04 	addi	r2,r2,52
    9468:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    946c:	e0bfff0b 	ldhu	r2,-4(fp)
    9470:	10800044 	addi	r2,r2,1
    9474:	e0bfff0d 	sth	r2,-4(fp)
    9478:	e0bfff0b 	ldhu	r2,-4(fp)
    947c:	10800ef0 	cmpltui	r2,r2,59
    9480:	103fea1e 	bne	r2,zero,942c <__alt_mem_Flash_flash_data+0xf400942c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    9484:	e0bffe17 	ldw	r2,-8(fp)
    9488:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    948c:	e0bffe17 	ldw	r2,-8(fp)
    9490:	00c00fc4 	movi	r3,63
    9494:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    9498:	e0bffe17 	ldw	r2,-8(fp)
    949c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    94a0:	00800074 	movhi	r2,1
    94a4:	1093f404 	addi	r2,r2,20432
    94a8:	00c000b4 	movhi	r3,2
    94ac:	18fce904 	addi	r3,r3,-3164
    94b0:	10c00015 	stw	r3,0(r2)
#endif
}
    94b4:	e037883a 	mov	sp,fp
    94b8:	dfc00117 	ldw	ra,4(sp)
    94bc:	df000017 	ldw	fp,0(sp)
    94c0:	dec00204 	addi	sp,sp,8
    94c4:	f800283a 	ret

000094c8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    94c8:	defff804 	addi	sp,sp,-32
    94cc:	df000715 	stw	fp,28(sp)
    94d0:	df000704 	addi	fp,sp,28
    94d4:	e13ffe15 	stw	r4,-8(fp)
    94d8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    94dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    94e0:	e0bfff17 	ldw	r2,-4(fp)
    94e4:	1000021e 	bne	r2,zero,94f0 <OSQAccept+0x28>
        return ((void *)0);
    94e8:	0005883a 	mov	r2,zero
    94ec:	00004206 	br	95f8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    94f0:	e0bffe17 	ldw	r2,-8(fp)
    94f4:	1000051e 	bne	r2,zero,950c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    94f8:	e0bfff17 	ldw	r2,-4(fp)
    94fc:	00c00104 	movi	r3,4
    9500:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9504:	0005883a 	mov	r2,zero
    9508:	00003b06 	br	95f8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    950c:	e0bffe17 	ldw	r2,-8(fp)
    9510:	10800003 	ldbu	r2,0(r2)
    9514:	10803fcc 	andi	r2,r2,255
    9518:	108000a0 	cmpeqi	r2,r2,2
    951c:	1000051e 	bne	r2,zero,9534 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    9520:	e0bfff17 	ldw	r2,-4(fp)
    9524:	00c00044 	movi	r3,1
    9528:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    952c:	0005883a 	mov	r2,zero
    9530:	00003106 	br	95f8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9534:	0005303a 	rdctl	r2,status
    9538:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    953c:	e0fffc17 	ldw	r3,-16(fp)
    9540:	00bfff84 	movi	r2,-2
    9544:	1884703a 	and	r2,r3,r2
    9548:	1001703a 	wrctl	status,r2
  
  return context;
    954c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9550:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    9554:	e0bffe17 	ldw	r2,-8(fp)
    9558:	10800117 	ldw	r2,4(r2)
    955c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    9560:	e0bffb17 	ldw	r2,-20(fp)
    9564:	1080058b 	ldhu	r2,22(r2)
    9568:	10bfffcc 	andi	r2,r2,65535
    956c:	10001926 	beq	r2,zero,95d4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    9570:	e0bffb17 	ldw	r2,-20(fp)
    9574:	10800417 	ldw	r2,16(r2)
    9578:	11000104 	addi	r4,r2,4
    957c:	e0fffb17 	ldw	r3,-20(fp)
    9580:	19000415 	stw	r4,16(r3)
    9584:	10800017 	ldw	r2,0(r2)
    9588:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    958c:	e0bffb17 	ldw	r2,-20(fp)
    9590:	1080058b 	ldhu	r2,22(r2)
    9594:	10bfffc4 	addi	r2,r2,-1
    9598:	1007883a 	mov	r3,r2
    959c:	e0bffb17 	ldw	r2,-20(fp)
    95a0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    95a4:	e0bffb17 	ldw	r2,-20(fp)
    95a8:	10c00417 	ldw	r3,16(r2)
    95ac:	e0bffb17 	ldw	r2,-20(fp)
    95b0:	10800217 	ldw	r2,8(r2)
    95b4:	1880041e 	bne	r3,r2,95c8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    95b8:	e0bffb17 	ldw	r2,-20(fp)
    95bc:	10c00117 	ldw	r3,4(r2)
    95c0:	e0bffb17 	ldw	r2,-20(fp)
    95c4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    95c8:	e0bfff17 	ldw	r2,-4(fp)
    95cc:	10000005 	stb	zero,0(r2)
    95d0:	00000406 	br	95e4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    95d4:	e0bfff17 	ldw	r2,-4(fp)
    95d8:	00c007c4 	movi	r3,31
    95dc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    95e0:	e03ff915 	stw	zero,-28(fp)
    95e4:	e0bffa17 	ldw	r2,-24(fp)
    95e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95ec:	e0bffd17 	ldw	r2,-12(fp)
    95f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    95f4:	e0bff917 	ldw	r2,-28(fp)
}
    95f8:	e037883a 	mov	sp,fp
    95fc:	df000017 	ldw	fp,0(sp)
    9600:	dec00104 	addi	sp,sp,4
    9604:	f800283a 	ret

00009608 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    9608:	defff404 	addi	sp,sp,-48
    960c:	dfc00b15 	stw	ra,44(sp)
    9610:	df000a15 	stw	fp,40(sp)
    9614:	df000a04 	addi	fp,sp,40
    9618:	e13ffe15 	stw	r4,-8(fp)
    961c:	2805883a 	mov	r2,r5
    9620:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9624:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    9628:	00800074 	movhi	r2,1
    962c:	1093f904 	addi	r2,r2,20452
    9630:	10800003 	ldbu	r2,0(r2)
    9634:	10803fcc 	andi	r2,r2,255
    9638:	10000226 	beq	r2,zero,9644 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    963c:	0005883a 	mov	r2,zero
    9640:	00006b06 	br	97f0 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9644:	0005303a 	rdctl	r2,status
    9648:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    964c:	e0fff917 	ldw	r3,-28(fp)
    9650:	00bfff84 	movi	r2,-2
    9654:	1884703a 	and	r2,r3,r2
    9658:	1001703a 	wrctl	status,r2
  
  return context;
    965c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    9660:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    9664:	00800074 	movhi	r2,1
    9668:	1093f804 	addi	r2,r2,20448
    966c:	10800017 	ldw	r2,0(r2)
    9670:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    9674:	00800074 	movhi	r2,1
    9678:	1093f804 	addi	r2,r2,20448
    967c:	10800017 	ldw	r2,0(r2)
    9680:	10000726 	beq	r2,zero,96a0 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9684:	00800074 	movhi	r2,1
    9688:	1093f804 	addi	r2,r2,20448
    968c:	10800017 	ldw	r2,0(r2)
    9690:	10c00117 	ldw	r3,4(r2)
    9694:	00800074 	movhi	r2,1
    9698:	1093f804 	addi	r2,r2,20448
    969c:	10c00015 	stw	r3,0(r2)
    96a0:	e0bff717 	ldw	r2,-36(fp)
    96a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96a8:	e0bffa17 	ldw	r2,-24(fp)
    96ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    96b0:	e0bff617 	ldw	r2,-40(fp)
    96b4:	10004d26 	beq	r2,zero,97ec <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96b8:	0005303a 	rdctl	r2,status
    96bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96c0:	e0fffb17 	ldw	r3,-20(fp)
    96c4:	00bfff84 	movi	r2,-2
    96c8:	1884703a 	and	r2,r3,r2
    96cc:	1001703a 	wrctl	status,r2
  
  return context;
    96d0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    96d4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    96d8:	00800074 	movhi	r2,1
    96dc:	1093f604 	addi	r2,r2,20440
    96e0:	10800017 	ldw	r2,0(r2)
    96e4:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    96e8:	e0bff817 	ldw	r2,-32(fp)
    96ec:	10003126 	beq	r2,zero,97b4 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    96f0:	00800074 	movhi	r2,1
    96f4:	1093f604 	addi	r2,r2,20440
    96f8:	10800017 	ldw	r2,0(r2)
    96fc:	10c00017 	ldw	r3,0(r2)
    9700:	00800074 	movhi	r2,1
    9704:	1093f604 	addi	r2,r2,20440
    9708:	10c00015 	stw	r3,0(r2)
    970c:	e0bff717 	ldw	r2,-36(fp)
    9710:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9714:	e0bffc17 	ldw	r2,-16(fp)
    9718:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    971c:	e0bff817 	ldw	r2,-32(fp)
    9720:	e0fffe17 	ldw	r3,-8(fp)
    9724:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    9728:	e0bfff0b 	ldhu	r2,-4(fp)
    972c:	1085883a 	add	r2,r2,r2
    9730:	1085883a 	add	r2,r2,r2
    9734:	1007883a 	mov	r3,r2
    9738:	e0bffe17 	ldw	r2,-8(fp)
    973c:	10c7883a 	add	r3,r2,r3
    9740:	e0bff817 	ldw	r2,-32(fp)
    9744:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    9748:	e0bff817 	ldw	r2,-32(fp)
    974c:	e0fffe17 	ldw	r3,-8(fp)
    9750:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    9754:	e0bff817 	ldw	r2,-32(fp)
    9758:	e0fffe17 	ldw	r3,-8(fp)
    975c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    9760:	e0bff817 	ldw	r2,-32(fp)
    9764:	e0ffff0b 	ldhu	r3,-4(fp)
    9768:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    976c:	e0bff817 	ldw	r2,-32(fp)
    9770:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    9774:	e0bff617 	ldw	r2,-40(fp)
    9778:	00c00084 	movi	r3,2
    977c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    9780:	e0bff617 	ldw	r2,-40(fp)
    9784:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    9788:	e0bff617 	ldw	r2,-40(fp)
    978c:	e0fff817 	ldw	r3,-32(fp)
    9790:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    9794:	e0bff617 	ldw	r2,-40(fp)
    9798:	00c00fc4 	movi	r3,63
    979c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    97a0:	e0bff617 	ldw	r2,-40(fp)
    97a4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    97a8:	e13ff617 	ldw	r4,-40(fp)
    97ac:	000684c0 	call	684c <OS_EventWaitListInit>
    97b0:	00000e06 	br	97ec <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    97b4:	00800074 	movhi	r2,1
    97b8:	1093f804 	addi	r2,r2,20448
    97bc:	10c00017 	ldw	r3,0(r2)
    97c0:	e0bff617 	ldw	r2,-40(fp)
    97c4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    97c8:	00800074 	movhi	r2,1
    97cc:	1093f804 	addi	r2,r2,20448
    97d0:	e0fff617 	ldw	r3,-40(fp)
    97d4:	10c00015 	stw	r3,0(r2)
    97d8:	e0bff717 	ldw	r2,-36(fp)
    97dc:	e0bffd15 	stw	r2,-12(fp)
    97e0:	e0bffd17 	ldw	r2,-12(fp)
    97e4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    97e8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    97ec:	e0bff617 	ldw	r2,-40(fp)
}
    97f0:	e037883a 	mov	sp,fp
    97f4:	dfc00117 	ldw	ra,4(sp)
    97f8:	df000017 	ldw	fp,0(sp)
    97fc:	dec00204 	addi	sp,sp,8
    9800:	f800283a 	ret

00009804 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9804:	defff204 	addi	sp,sp,-56
    9808:	dfc00d15 	stw	ra,52(sp)
    980c:	df000c15 	stw	fp,48(sp)
    9810:	df000c04 	addi	fp,sp,48
    9814:	e13ffd15 	stw	r4,-12(fp)
    9818:	2805883a 	mov	r2,r5
    981c:	e1bfff15 	stw	r6,-4(fp)
    9820:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9824:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9828:	e0bfff17 	ldw	r2,-4(fp)
    982c:	1000021e 	bne	r2,zero,9838 <OSQDel+0x34>
        return (pevent);
    9830:	e0bffd17 	ldw	r2,-12(fp)
    9834:	0000a006 	br	9ab8 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9838:	e0bffd17 	ldw	r2,-12(fp)
    983c:	1000051e 	bne	r2,zero,9854 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9840:	e0bfff17 	ldw	r2,-4(fp)
    9844:	00c00104 	movi	r3,4
    9848:	10c00005 	stb	r3,0(r2)
        return (pevent);
    984c:	e0bffd17 	ldw	r2,-12(fp)
    9850:	00009906 	br	9ab8 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9854:	e0bffd17 	ldw	r2,-12(fp)
    9858:	10800003 	ldbu	r2,0(r2)
    985c:	10803fcc 	andi	r2,r2,255
    9860:	108000a0 	cmpeqi	r2,r2,2
    9864:	1000051e 	bne	r2,zero,987c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9868:	e0bfff17 	ldw	r2,-4(fp)
    986c:	00c00044 	movi	r3,1
    9870:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9874:	e0bffd17 	ldw	r2,-12(fp)
    9878:	00008f06 	br	9ab8 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    987c:	00800074 	movhi	r2,1
    9880:	1093f904 	addi	r2,r2,20452
    9884:	10800003 	ldbu	r2,0(r2)
    9888:	10803fcc 	andi	r2,r2,255
    988c:	10000526 	beq	r2,zero,98a4 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    9890:	e0bfff17 	ldw	r2,-4(fp)
    9894:	00c003c4 	movi	r3,15
    9898:	10c00005 	stb	r3,0(r2)
        return (pevent);
    989c:	e0bffd17 	ldw	r2,-12(fp)
    98a0:	00008506 	br	9ab8 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98a4:	0005303a 	rdctl	r2,status
    98a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98ac:	e0fff817 	ldw	r3,-32(fp)
    98b0:	00bfff84 	movi	r2,-2
    98b4:	1884703a 	and	r2,r3,r2
    98b8:	1001703a 	wrctl	status,r2
  
  return context;
    98bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    98c0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    98c4:	e0bffd17 	ldw	r2,-12(fp)
    98c8:	10800283 	ldbu	r2,10(r2)
    98cc:	10803fcc 	andi	r2,r2,255
    98d0:	10000326 	beq	r2,zero,98e0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    98d4:	00800044 	movi	r2,1
    98d8:	e0bff405 	stb	r2,-48(fp)
    98dc:	00000106 	br	98e4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    98e0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    98e4:	e0bffe03 	ldbu	r2,-8(fp)
    98e8:	10000326 	beq	r2,zero,98f8 <OSQDel+0xf4>
    98ec:	10800060 	cmpeqi	r2,r2,1
    98f0:	1000381e 	bne	r2,zero,99d4 <OSQDel+0x1d0>
    98f4:	00006506 	br	9a8c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    98f8:	e0bff403 	ldbu	r2,-48(fp)
    98fc:	1000261e 	bne	r2,zero,9998 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    9900:	e0bffd17 	ldw	r2,-12(fp)
    9904:	00c00fc4 	movi	r3,63
    9908:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    990c:	e0bffd17 	ldw	r2,-12(fp)
    9910:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    9914:	e0bffd17 	ldw	r2,-12(fp)
    9918:	10800117 	ldw	r2,4(r2)
    991c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    9920:	00800074 	movhi	r2,1
    9924:	1093f604 	addi	r2,r2,20440
    9928:	10c00017 	ldw	r3,0(r2)
    992c:	e0bff717 	ldw	r2,-36(fp)
    9930:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    9934:	00800074 	movhi	r2,1
    9938:	1093f604 	addi	r2,r2,20440
    993c:	e0fff717 	ldw	r3,-36(fp)
    9940:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9944:	e0bffd17 	ldw	r2,-12(fp)
    9948:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    994c:	00800074 	movhi	r2,1
    9950:	1093f804 	addi	r2,r2,20448
    9954:	10c00017 	ldw	r3,0(r2)
    9958:	e0bffd17 	ldw	r2,-12(fp)
    995c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9960:	e0bffd17 	ldw	r2,-12(fp)
    9964:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    9968:	00800074 	movhi	r2,1
    996c:	1093f804 	addi	r2,r2,20448
    9970:	e0fffd17 	ldw	r3,-12(fp)
    9974:	10c00015 	stw	r3,0(r2)
    9978:	e0bff617 	ldw	r2,-40(fp)
    997c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9980:	e0bff917 	ldw	r2,-28(fp)
    9984:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    9988:	e0bfff17 	ldw	r2,-4(fp)
    998c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    9990:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9994:	00004706 	br	9ab4 <OSQDel+0x2b0>
    9998:	e0bff617 	ldw	r2,-40(fp)
    999c:	e0bffa15 	stw	r2,-24(fp)
    99a0:	e0bffa17 	ldw	r2,-24(fp)
    99a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    99a8:	e0bfff17 	ldw	r2,-4(fp)
    99ac:	00c01244 	movi	r3,73
    99b0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    99b4:	e0bffd17 	ldw	r2,-12(fp)
    99b8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    99bc:	00003d06 	br	9ab4 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    99c0:	e13ffd17 	ldw	r4,-12(fp)
    99c4:	000b883a 	mov	r5,zero
    99c8:	01800104 	movi	r6,4
    99cc:	000f883a 	mov	r7,zero
    99d0:	00062ac0 	call	62ac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    99d4:	e0bffd17 	ldw	r2,-12(fp)
    99d8:	10800283 	ldbu	r2,10(r2)
    99dc:	10803fcc 	andi	r2,r2,255
    99e0:	103ff71e 	bne	r2,zero,99c0 <__alt_mem_Flash_flash_data+0xf40099c0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    99e4:	e0bffd17 	ldw	r2,-12(fp)
    99e8:	00c00fc4 	movi	r3,63
    99ec:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    99f0:	e0bffd17 	ldw	r2,-12(fp)
    99f4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    99f8:	e0bffd17 	ldw	r2,-12(fp)
    99fc:	10800117 	ldw	r2,4(r2)
    9a00:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    9a04:	00800074 	movhi	r2,1
    9a08:	1093f604 	addi	r2,r2,20440
    9a0c:	10c00017 	ldw	r3,0(r2)
    9a10:	e0bff717 	ldw	r2,-36(fp)
    9a14:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    9a18:	00800074 	movhi	r2,1
    9a1c:	1093f604 	addi	r2,r2,20440
    9a20:	e0fff717 	ldw	r3,-36(fp)
    9a24:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9a28:	e0bffd17 	ldw	r2,-12(fp)
    9a2c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9a30:	00800074 	movhi	r2,1
    9a34:	1093f804 	addi	r2,r2,20448
    9a38:	10c00017 	ldw	r3,0(r2)
    9a3c:	e0bffd17 	ldw	r2,-12(fp)
    9a40:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9a44:	e0bffd17 	ldw	r2,-12(fp)
    9a48:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9a4c:	00800074 	movhi	r2,1
    9a50:	1093f804 	addi	r2,r2,20448
    9a54:	e0fffd17 	ldw	r3,-12(fp)
    9a58:	10c00015 	stw	r3,0(r2)
    9a5c:	e0bff617 	ldw	r2,-40(fp)
    9a60:	e0bffb15 	stw	r2,-20(fp)
    9a64:	e0bffb17 	ldw	r2,-20(fp)
    9a68:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9a6c:	e0bff403 	ldbu	r2,-48(fp)
    9a70:	10800058 	cmpnei	r2,r2,1
    9a74:	1000011e 	bne	r2,zero,9a7c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    9a78:	0006cc40 	call	6cc4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9a7c:	e0bfff17 	ldw	r2,-4(fp)
    9a80:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    9a84:	e03ff515 	stw	zero,-44(fp)
             break;
    9a88:	00000a06 	br	9ab4 <OSQDel+0x2b0>
    9a8c:	e0bff617 	ldw	r2,-40(fp)
    9a90:	e0bffc15 	stw	r2,-16(fp)
    9a94:	e0bffc17 	ldw	r2,-16(fp)
    9a98:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9a9c:	e0bfff17 	ldw	r2,-4(fp)
    9aa0:	00c001c4 	movi	r3,7
    9aa4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    9aa8:	e0bffd17 	ldw	r2,-12(fp)
    9aac:	e0bff515 	stw	r2,-44(fp)
             break;
    9ab0:	0001883a 	nop
    }
    return (pevent_return);
    9ab4:	e0bff517 	ldw	r2,-44(fp)
}
    9ab8:	e037883a 	mov	sp,fp
    9abc:	dfc00117 	ldw	ra,4(sp)
    9ac0:	df000017 	ldw	fp,0(sp)
    9ac4:	dec00204 	addi	sp,sp,8
    9ac8:	f800283a 	ret

00009acc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    9acc:	defffa04 	addi	sp,sp,-24
    9ad0:	df000515 	stw	fp,20(sp)
    9ad4:	df000504 	addi	fp,sp,20
    9ad8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9adc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9ae0:	e0bfff17 	ldw	r2,-4(fp)
    9ae4:	1000021e 	bne	r2,zero,9af0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    9ae8:	00800104 	movi	r2,4
    9aec:	00002106 	br	9b74 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9af0:	e0bfff17 	ldw	r2,-4(fp)
    9af4:	10800003 	ldbu	r2,0(r2)
    9af8:	10803fcc 	andi	r2,r2,255
    9afc:	108000a0 	cmpeqi	r2,r2,2
    9b00:	1000021e 	bne	r2,zero,9b0c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    9b04:	00800044 	movi	r2,1
    9b08:	00001a06 	br	9b74 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b0c:	0005303a 	rdctl	r2,status
    9b10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b14:	e0fffd17 	ldw	r3,-12(fp)
    9b18:	00bfff84 	movi	r2,-2
    9b1c:	1884703a 	and	r2,r3,r2
    9b20:	1001703a 	wrctl	status,r2
  
  return context;
    9b24:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9b28:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    9b2c:	e0bfff17 	ldw	r2,-4(fp)
    9b30:	10800117 	ldw	r2,4(r2)
    9b34:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    9b38:	e0bffc17 	ldw	r2,-16(fp)
    9b3c:	10c00117 	ldw	r3,4(r2)
    9b40:	e0bffc17 	ldw	r2,-16(fp)
    9b44:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    9b48:	e0bffc17 	ldw	r2,-16(fp)
    9b4c:	10c00117 	ldw	r3,4(r2)
    9b50:	e0bffc17 	ldw	r2,-16(fp)
    9b54:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    9b58:	e0bffc17 	ldw	r2,-16(fp)
    9b5c:	1000058d 	sth	zero,22(r2)
    9b60:	e0bffb17 	ldw	r2,-20(fp)
    9b64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b68:	e0bffe17 	ldw	r2,-8(fp)
    9b6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9b70:	0005883a 	mov	r2,zero
}
    9b74:	e037883a 	mov	sp,fp
    9b78:	df000017 	ldw	fp,0(sp)
    9b7c:	dec00104 	addi	sp,sp,4
    9b80:	f800283a 	ret

00009b84 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9b84:	defff304 	addi	sp,sp,-52
    9b88:	dfc00c15 	stw	ra,48(sp)
    9b8c:	df000b15 	stw	fp,44(sp)
    9b90:	df000b04 	addi	fp,sp,44
    9b94:	e13ffd15 	stw	r4,-12(fp)
    9b98:	2805883a 	mov	r2,r5
    9b9c:	e1bfff15 	stw	r6,-4(fp)
    9ba0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9ba4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    9ba8:	e0bfff17 	ldw	r2,-4(fp)
    9bac:	1000021e 	bne	r2,zero,9bb8 <OSQPend+0x34>
        return ((void *)0);
    9bb0:	0005883a 	mov	r2,zero
    9bb4:	0000ad06 	br	9e6c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    9bb8:	e0bffd17 	ldw	r2,-12(fp)
    9bbc:	1000051e 	bne	r2,zero,9bd4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9bc0:	e0bfff17 	ldw	r2,-4(fp)
    9bc4:	00c00104 	movi	r3,4
    9bc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9bcc:	0005883a 	mov	r2,zero
    9bd0:	0000a606 	br	9e6c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    9bd4:	e0bffd17 	ldw	r2,-12(fp)
    9bd8:	10800003 	ldbu	r2,0(r2)
    9bdc:	10803fcc 	andi	r2,r2,255
    9be0:	108000a0 	cmpeqi	r2,r2,2
    9be4:	1000051e 	bne	r2,zero,9bfc <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9be8:	e0bfff17 	ldw	r2,-4(fp)
    9bec:	00c00044 	movi	r3,1
    9bf0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9bf4:	0005883a 	mov	r2,zero
    9bf8:	00009c06 	br	9e6c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    9bfc:	00800074 	movhi	r2,1
    9c00:	1093f904 	addi	r2,r2,20452
    9c04:	10800003 	ldbu	r2,0(r2)
    9c08:	10803fcc 	andi	r2,r2,255
    9c0c:	10000526 	beq	r2,zero,9c24 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    9c10:	e0bfff17 	ldw	r2,-4(fp)
    9c14:	00c00084 	movi	r3,2
    9c18:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9c1c:	0005883a 	mov	r2,zero
    9c20:	00009206 	br	9e6c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    9c24:	00800074 	movhi	r2,1
    9c28:	1093eb04 	addi	r2,r2,20396
    9c2c:	10800003 	ldbu	r2,0(r2)
    9c30:	10803fcc 	andi	r2,r2,255
    9c34:	10000526 	beq	r2,zero,9c4c <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    9c38:	e0bfff17 	ldw	r2,-4(fp)
    9c3c:	00c00344 	movi	r3,13
    9c40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9c44:	0005883a 	mov	r2,zero
    9c48:	00008806 	br	9e6c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c4c:	0005303a 	rdctl	r2,status
    9c50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c54:	e0fff817 	ldw	r3,-32(fp)
    9c58:	00bfff84 	movi	r2,-2
    9c5c:	1884703a 	and	r2,r3,r2
    9c60:	1001703a 	wrctl	status,r2
  
  return context;
    9c64:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9c68:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    9c6c:	e0bffd17 	ldw	r2,-12(fp)
    9c70:	10800117 	ldw	r2,4(r2)
    9c74:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    9c78:	e0bff717 	ldw	r2,-36(fp)
    9c7c:	1080058b 	ldhu	r2,22(r2)
    9c80:	10bfffcc 	andi	r2,r2,65535
    9c84:	10001e26 	beq	r2,zero,9d00 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    9c88:	e0bff717 	ldw	r2,-36(fp)
    9c8c:	10800417 	ldw	r2,16(r2)
    9c90:	11000104 	addi	r4,r2,4
    9c94:	e0fff717 	ldw	r3,-36(fp)
    9c98:	19000415 	stw	r4,16(r3)
    9c9c:	10800017 	ldw	r2,0(r2)
    9ca0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    9ca4:	e0bff717 	ldw	r2,-36(fp)
    9ca8:	1080058b 	ldhu	r2,22(r2)
    9cac:	10bfffc4 	addi	r2,r2,-1
    9cb0:	1007883a 	mov	r3,r2
    9cb4:	e0bff717 	ldw	r2,-36(fp)
    9cb8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    9cbc:	e0bff717 	ldw	r2,-36(fp)
    9cc0:	10c00417 	ldw	r3,16(r2)
    9cc4:	e0bff717 	ldw	r2,-36(fp)
    9cc8:	10800217 	ldw	r2,8(r2)
    9ccc:	1880041e 	bne	r3,r2,9ce0 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    9cd0:	e0bff717 	ldw	r2,-36(fp)
    9cd4:	10c00117 	ldw	r3,4(r2)
    9cd8:	e0bff717 	ldw	r2,-36(fp)
    9cdc:	10c00415 	stw	r3,16(r2)
    9ce0:	e0bff617 	ldw	r2,-40(fp)
    9ce4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ce8:	e0bff917 	ldw	r2,-28(fp)
    9cec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    9cf0:	e0bfff17 	ldw	r2,-4(fp)
    9cf4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    9cf8:	e0bff517 	ldw	r2,-44(fp)
    9cfc:	00005b06 	br	9e6c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    9d00:	00800074 	movhi	r2,1
    9d04:	1093fa04 	addi	r2,r2,20456
    9d08:	10c00017 	ldw	r3,0(r2)
    9d0c:	00800074 	movhi	r2,1
    9d10:	1093fa04 	addi	r2,r2,20456
    9d14:	10800017 	ldw	r2,0(r2)
    9d18:	10800c03 	ldbu	r2,48(r2)
    9d1c:	10800114 	ori	r2,r2,4
    9d20:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    9d24:	00800074 	movhi	r2,1
    9d28:	1093fa04 	addi	r2,r2,20456
    9d2c:	10800017 	ldw	r2,0(r2)
    9d30:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    9d34:	00800074 	movhi	r2,1
    9d38:	1093fa04 	addi	r2,r2,20456
    9d3c:	10800017 	ldw	r2,0(r2)
    9d40:	e0fffe0b 	ldhu	r3,-8(fp)
    9d44:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    9d48:	e13ffd17 	ldw	r4,-12(fp)
    9d4c:	00064440 	call	6444 <OS_EventTaskWait>
    9d50:	e0bff617 	ldw	r2,-40(fp)
    9d54:	e0bffa15 	stw	r2,-24(fp)
    9d58:	e0bffa17 	ldw	r2,-24(fp)
    9d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    9d60:	0006cc40 	call	6cc4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d64:	0005303a 	rdctl	r2,status
    9d68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d6c:	e0fffb17 	ldw	r3,-20(fp)
    9d70:	00bfff84 	movi	r2,-2
    9d74:	1884703a 	and	r2,r3,r2
    9d78:	1001703a 	wrctl	status,r2
  
  return context;
    9d7c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    9d80:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9d84:	00800074 	movhi	r2,1
    9d88:	1093fa04 	addi	r2,r2,20456
    9d8c:	10800017 	ldw	r2,0(r2)
    9d90:	10800c43 	ldbu	r2,49(r2)
    9d94:	10803fcc 	andi	r2,r2,255
    9d98:	10000326 	beq	r2,zero,9da8 <OSQPend+0x224>
    9d9c:	108000a0 	cmpeqi	r2,r2,2
    9da0:	1000091e 	bne	r2,zero,9dc8 <OSQPend+0x244>
    9da4:	00000d06 	br	9ddc <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    9da8:	00800074 	movhi	r2,1
    9dac:	1093fa04 	addi	r2,r2,20456
    9db0:	10800017 	ldw	r2,0(r2)
    9db4:	10800917 	ldw	r2,36(r2)
    9db8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    9dbc:	e0bfff17 	ldw	r2,-4(fp)
    9dc0:	10000005 	stb	zero,0(r2)
             break;
    9dc4:	00001006 	br	9e08 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    9dc8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    9dcc:	e0bfff17 	ldw	r2,-4(fp)
    9dd0:	00c00384 	movi	r3,14
    9dd4:	10c00005 	stb	r3,0(r2)
             break;
    9dd8:	00000b06 	br	9e08 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    9ddc:	00800074 	movhi	r2,1
    9de0:	1093fa04 	addi	r2,r2,20456
    9de4:	10800017 	ldw	r2,0(r2)
    9de8:	1009883a 	mov	r4,r2
    9dec:	e17ffd17 	ldw	r5,-12(fp)
    9df0:	000669c0 	call	669c <OS_EventTaskRemove>
             pmsg = (void *)0;
    9df4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    9df8:	e0bfff17 	ldw	r2,-4(fp)
    9dfc:	00c00284 	movi	r3,10
    9e00:	10c00005 	stb	r3,0(r2)
             break;
    9e04:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    9e08:	00800074 	movhi	r2,1
    9e0c:	1093fa04 	addi	r2,r2,20456
    9e10:	10800017 	ldw	r2,0(r2)
    9e14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    9e18:	00800074 	movhi	r2,1
    9e1c:	1093fa04 	addi	r2,r2,20456
    9e20:	10800017 	ldw	r2,0(r2)
    9e24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    9e28:	00800074 	movhi	r2,1
    9e2c:	1093fa04 	addi	r2,r2,20456
    9e30:	10800017 	ldw	r2,0(r2)
    9e34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    9e38:	00800074 	movhi	r2,1
    9e3c:	1093fa04 	addi	r2,r2,20456
    9e40:	10800017 	ldw	r2,0(r2)
    9e44:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    9e48:	00800074 	movhi	r2,1
    9e4c:	1093fa04 	addi	r2,r2,20456
    9e50:	10800017 	ldw	r2,0(r2)
    9e54:	10000915 	stw	zero,36(r2)
    9e58:	e0bff617 	ldw	r2,-40(fp)
    9e5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9e60:	e0bffc17 	ldw	r2,-16(fp)
    9e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    9e68:	e0bff517 	ldw	r2,-44(fp)
}
    9e6c:	e037883a 	mov	sp,fp
    9e70:	dfc00117 	ldw	ra,4(sp)
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00204 	addi	sp,sp,8
    9e7c:	f800283a 	ret

00009e80 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9e80:	defff604 	addi	sp,sp,-40
    9e84:	dfc00915 	stw	ra,36(sp)
    9e88:	df000815 	stw	fp,32(sp)
    9e8c:	df000804 	addi	fp,sp,32
    9e90:	e13ffd15 	stw	r4,-12(fp)
    9e94:	2805883a 	mov	r2,r5
    9e98:	e1bfff15 	stw	r6,-4(fp)
    9e9c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9ea0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9ea4:	e0bfff17 	ldw	r2,-4(fp)
    9ea8:	1000021e 	bne	r2,zero,9eb4 <OSQPendAbort+0x34>
        return (0);
    9eac:	0005883a 	mov	r2,zero
    9eb0:	00004906 	br	9fd8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9eb4:	e0bffd17 	ldw	r2,-12(fp)
    9eb8:	1000051e 	bne	r2,zero,9ed0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9ebc:	e0bfff17 	ldw	r2,-4(fp)
    9ec0:	00c00104 	movi	r3,4
    9ec4:	10c00005 	stb	r3,0(r2)
        return (0);
    9ec8:	0005883a 	mov	r2,zero
    9ecc:	00004206 	br	9fd8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9ed0:	e0bffd17 	ldw	r2,-12(fp)
    9ed4:	10800003 	ldbu	r2,0(r2)
    9ed8:	10803fcc 	andi	r2,r2,255
    9edc:	108000a0 	cmpeqi	r2,r2,2
    9ee0:	1000051e 	bne	r2,zero,9ef8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    9ee4:	e0bfff17 	ldw	r2,-4(fp)
    9ee8:	00c00044 	movi	r3,1
    9eec:	10c00005 	stb	r3,0(r2)
        return (0);
    9ef0:	0005883a 	mov	r2,zero
    9ef4:	00003806 	br	9fd8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ef8:	0005303a 	rdctl	r2,status
    9efc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f00:	e0fffa17 	ldw	r3,-24(fp)
    9f04:	00bfff84 	movi	r2,-2
    9f08:	1884703a 	and	r2,r3,r2
    9f0c:	1001703a 	wrctl	status,r2
  
  return context;
    9f10:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9f14:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    9f18:	e0bffd17 	ldw	r2,-12(fp)
    9f1c:	10800283 	ldbu	r2,10(r2)
    9f20:	10803fcc 	andi	r2,r2,255
    9f24:	10002526 	beq	r2,zero,9fbc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    9f28:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    9f2c:	e0bffe03 	ldbu	r2,-8(fp)
    9f30:	10800060 	cmpeqi	r2,r2,1
    9f34:	10000e26 	beq	r2,zero,9f70 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    9f38:	00000806 	br	9f5c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    9f3c:	e13ffd17 	ldw	r4,-12(fp)
    9f40:	000b883a 	mov	r5,zero
    9f44:	01800104 	movi	r6,4
    9f48:	01c00084 	movi	r7,2
    9f4c:	00062ac0 	call	62ac <OS_EventTaskRdy>
                     nbr_tasks++;
    9f50:	e0bff803 	ldbu	r2,-32(fp)
    9f54:	10800044 	addi	r2,r2,1
    9f58:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    9f5c:	e0bffd17 	ldw	r2,-12(fp)
    9f60:	10800283 	ldbu	r2,10(r2)
    9f64:	10803fcc 	andi	r2,r2,255
    9f68:	103ff41e 	bne	r2,zero,9f3c <__alt_mem_Flash_flash_data+0xf4009f3c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9f6c:	00000906 	br	9f94 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    9f70:	e13ffd17 	ldw	r4,-12(fp)
    9f74:	000b883a 	mov	r5,zero
    9f78:	01800104 	movi	r6,4
    9f7c:	01c00084 	movi	r7,2
    9f80:	00062ac0 	call	62ac <OS_EventTaskRdy>
                 nbr_tasks++;
    9f84:	e0bff803 	ldbu	r2,-32(fp)
    9f88:	10800044 	addi	r2,r2,1
    9f8c:	e0bff805 	stb	r2,-32(fp)
                 break;
    9f90:	0001883a 	nop
    9f94:	e0bff917 	ldw	r2,-28(fp)
    9f98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f9c:	e0bffb17 	ldw	r2,-20(fp)
    9fa0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    9fa4:	0006cc40 	call	6cc4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    9fa8:	e0bfff17 	ldw	r2,-4(fp)
    9fac:	00c00384 	movi	r3,14
    9fb0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9fb4:	e0bff803 	ldbu	r2,-32(fp)
    9fb8:	00000706 	br	9fd8 <OSQPendAbort+0x158>
    9fbc:	e0bff917 	ldw	r2,-28(fp)
    9fc0:	e0bffc15 	stw	r2,-16(fp)
    9fc4:	e0bffc17 	ldw	r2,-16(fp)
    9fc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9fcc:	e0bfff17 	ldw	r2,-4(fp)
    9fd0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    9fd4:	0005883a 	mov	r2,zero
}
    9fd8:	e037883a 	mov	sp,fp
    9fdc:	dfc00117 	ldw	ra,4(sp)
    9fe0:	df000017 	ldw	fp,0(sp)
    9fe4:	dec00204 	addi	sp,sp,8
    9fe8:	f800283a 	ret

00009fec <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    9fec:	defff604 	addi	sp,sp,-40
    9ff0:	dfc00915 	stw	ra,36(sp)
    9ff4:	df000815 	stw	fp,32(sp)
    9ff8:	df000804 	addi	fp,sp,32
    9ffc:	e13ffe15 	stw	r4,-8(fp)
    a000:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a004:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a008:	e0bffe17 	ldw	r2,-8(fp)
    a00c:	1000021e 	bne	r2,zero,a018 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a010:	00800104 	movi	r2,4
    a014:	00004a06 	br	a140 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a018:	e0bffe17 	ldw	r2,-8(fp)
    a01c:	10800003 	ldbu	r2,0(r2)
    a020:	10803fcc 	andi	r2,r2,255
    a024:	108000a0 	cmpeqi	r2,r2,2
    a028:	1000021e 	bne	r2,zero,a034 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    a02c:	00800044 	movi	r2,1
    a030:	00004306 	br	a140 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a034:	0005303a 	rdctl	r2,status
    a038:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a03c:	e0fffa17 	ldw	r3,-24(fp)
    a040:	00bfff84 	movi	r2,-2
    a044:	1884703a 	and	r2,r3,r2
    a048:	1001703a 	wrctl	status,r2
  
  return context;
    a04c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a050:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    a054:	e0bffe17 	ldw	r2,-8(fp)
    a058:	10800283 	ldbu	r2,10(r2)
    a05c:	10803fcc 	andi	r2,r2,255
    a060:	10000c26 	beq	r2,zero,a094 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a064:	e13ffe17 	ldw	r4,-8(fp)
    a068:	e17fff17 	ldw	r5,-4(fp)
    a06c:	01800104 	movi	r6,4
    a070:	000f883a 	mov	r7,zero
    a074:	00062ac0 	call	62ac <OS_EventTaskRdy>
    a078:	e0bff817 	ldw	r2,-32(fp)
    a07c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a080:	e0bffb17 	ldw	r2,-20(fp)
    a084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    a088:	0006cc40 	call	6cc4 <OS_Sched>
        return (OS_ERR_NONE);
    a08c:	0005883a 	mov	r2,zero
    a090:	00002b06 	br	a140 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    a094:	e0bffe17 	ldw	r2,-8(fp)
    a098:	10800117 	ldw	r2,4(r2)
    a09c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    a0a0:	e0bff917 	ldw	r2,-28(fp)
    a0a4:	10c0058b 	ldhu	r3,22(r2)
    a0a8:	e0bff917 	ldw	r2,-28(fp)
    a0ac:	1080050b 	ldhu	r2,20(r2)
    a0b0:	18ffffcc 	andi	r3,r3,65535
    a0b4:	10bfffcc 	andi	r2,r2,65535
    a0b8:	18800636 	bltu	r3,r2,a0d4 <OSQPost+0xe8>
    a0bc:	e0bff817 	ldw	r2,-32(fp)
    a0c0:	e0bffc15 	stw	r2,-16(fp)
    a0c4:	e0bffc17 	ldw	r2,-16(fp)
    a0c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a0cc:	00800784 	movi	r2,30
    a0d0:	00001b06 	br	a140 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    a0d4:	e0bff917 	ldw	r2,-28(fp)
    a0d8:	10800317 	ldw	r2,12(r2)
    a0dc:	11000104 	addi	r4,r2,4
    a0e0:	e0fff917 	ldw	r3,-28(fp)
    a0e4:	19000315 	stw	r4,12(r3)
    a0e8:	e0ffff17 	ldw	r3,-4(fp)
    a0ec:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    a0f0:	e0bff917 	ldw	r2,-28(fp)
    a0f4:	1080058b 	ldhu	r2,22(r2)
    a0f8:	10800044 	addi	r2,r2,1
    a0fc:	1007883a 	mov	r3,r2
    a100:	e0bff917 	ldw	r2,-28(fp)
    a104:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    a108:	e0bff917 	ldw	r2,-28(fp)
    a10c:	10c00317 	ldw	r3,12(r2)
    a110:	e0bff917 	ldw	r2,-28(fp)
    a114:	10800217 	ldw	r2,8(r2)
    a118:	1880041e 	bne	r3,r2,a12c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    a11c:	e0bff917 	ldw	r2,-28(fp)
    a120:	10c00117 	ldw	r3,4(r2)
    a124:	e0bff917 	ldw	r2,-28(fp)
    a128:	10c00315 	stw	r3,12(r2)
    a12c:	e0bff817 	ldw	r2,-32(fp)
    a130:	e0bffd15 	stw	r2,-12(fp)
    a134:	e0bffd17 	ldw	r2,-12(fp)
    a138:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a13c:	0005883a 	mov	r2,zero
}
    a140:	e037883a 	mov	sp,fp
    a144:	dfc00117 	ldw	ra,4(sp)
    a148:	df000017 	ldw	fp,0(sp)
    a14c:	dec00204 	addi	sp,sp,8
    a150:	f800283a 	ret

0000a154 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    a154:	defff604 	addi	sp,sp,-40
    a158:	dfc00915 	stw	ra,36(sp)
    a15c:	df000815 	stw	fp,32(sp)
    a160:	df000804 	addi	fp,sp,32
    a164:	e13ffe15 	stw	r4,-8(fp)
    a168:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a16c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a170:	e0bffe17 	ldw	r2,-8(fp)
    a174:	1000021e 	bne	r2,zero,a180 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    a178:	00800104 	movi	r2,4
    a17c:	00004c06 	br	a2b0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a180:	e0bffe17 	ldw	r2,-8(fp)
    a184:	10800003 	ldbu	r2,0(r2)
    a188:	10803fcc 	andi	r2,r2,255
    a18c:	108000a0 	cmpeqi	r2,r2,2
    a190:	1000021e 	bne	r2,zero,a19c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    a194:	00800044 	movi	r2,1
    a198:	00004506 	br	a2b0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a19c:	0005303a 	rdctl	r2,status
    a1a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1a4:	e0fffa17 	ldw	r3,-24(fp)
    a1a8:	00bfff84 	movi	r2,-2
    a1ac:	1884703a 	and	r2,r3,r2
    a1b0:	1001703a 	wrctl	status,r2
  
  return context;
    a1b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a1b8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    a1bc:	e0bffe17 	ldw	r2,-8(fp)
    a1c0:	10800283 	ldbu	r2,10(r2)
    a1c4:	10803fcc 	andi	r2,r2,255
    a1c8:	10000c26 	beq	r2,zero,a1fc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a1cc:	e13ffe17 	ldw	r4,-8(fp)
    a1d0:	e17fff17 	ldw	r5,-4(fp)
    a1d4:	01800104 	movi	r6,4
    a1d8:	000f883a 	mov	r7,zero
    a1dc:	00062ac0 	call	62ac <OS_EventTaskRdy>
    a1e0:	e0bff817 	ldw	r2,-32(fp)
    a1e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1e8:	e0bffb17 	ldw	r2,-20(fp)
    a1ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    a1f0:	0006cc40 	call	6cc4 <OS_Sched>
        return (OS_ERR_NONE);
    a1f4:	0005883a 	mov	r2,zero
    a1f8:	00002d06 	br	a2b0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a1fc:	e0bffe17 	ldw	r2,-8(fp)
    a200:	10800117 	ldw	r2,4(r2)
    a204:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a208:	e0bff917 	ldw	r2,-28(fp)
    a20c:	10c0058b 	ldhu	r3,22(r2)
    a210:	e0bff917 	ldw	r2,-28(fp)
    a214:	1080050b 	ldhu	r2,20(r2)
    a218:	18ffffcc 	andi	r3,r3,65535
    a21c:	10bfffcc 	andi	r2,r2,65535
    a220:	18800636 	bltu	r3,r2,a23c <OSQPostFront+0xe8>
    a224:	e0bff817 	ldw	r2,-32(fp)
    a228:	e0bffc15 	stw	r2,-16(fp)
    a22c:	e0bffc17 	ldw	r2,-16(fp)
    a230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a234:	00800784 	movi	r2,30
    a238:	00001d06 	br	a2b0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    a23c:	e0bff917 	ldw	r2,-28(fp)
    a240:	10c00417 	ldw	r3,16(r2)
    a244:	e0bff917 	ldw	r2,-28(fp)
    a248:	10800117 	ldw	r2,4(r2)
    a24c:	1880041e 	bne	r3,r2,a260 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    a250:	e0bff917 	ldw	r2,-28(fp)
    a254:	10c00217 	ldw	r3,8(r2)
    a258:	e0bff917 	ldw	r2,-28(fp)
    a25c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    a260:	e0bff917 	ldw	r2,-28(fp)
    a264:	10800417 	ldw	r2,16(r2)
    a268:	10ffff04 	addi	r3,r2,-4
    a26c:	e0bff917 	ldw	r2,-28(fp)
    a270:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    a274:	e0bff917 	ldw	r2,-28(fp)
    a278:	10800417 	ldw	r2,16(r2)
    a27c:	e0ffff17 	ldw	r3,-4(fp)
    a280:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a284:	e0bff917 	ldw	r2,-28(fp)
    a288:	1080058b 	ldhu	r2,22(r2)
    a28c:	10800044 	addi	r2,r2,1
    a290:	1007883a 	mov	r3,r2
    a294:	e0bff917 	ldw	r2,-28(fp)
    a298:	10c0058d 	sth	r3,22(r2)
    a29c:	e0bff817 	ldw	r2,-32(fp)
    a2a0:	e0bffd15 	stw	r2,-12(fp)
    a2a4:	e0bffd17 	ldw	r2,-12(fp)
    a2a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a2ac:	0005883a 	mov	r2,zero
}
    a2b0:	e037883a 	mov	sp,fp
    a2b4:	dfc00117 	ldw	ra,4(sp)
    a2b8:	df000017 	ldw	fp,0(sp)
    a2bc:	dec00204 	addi	sp,sp,8
    a2c0:	f800283a 	ret

0000a2c4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    a2c4:	defff504 	addi	sp,sp,-44
    a2c8:	dfc00a15 	stw	ra,40(sp)
    a2cc:	df000915 	stw	fp,36(sp)
    a2d0:	df000904 	addi	fp,sp,36
    a2d4:	e13ffd15 	stw	r4,-12(fp)
    a2d8:	e17ffe15 	stw	r5,-8(fp)
    a2dc:	3005883a 	mov	r2,r6
    a2e0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a2e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a2e8:	e0bffd17 	ldw	r2,-12(fp)
    a2ec:	1000021e 	bne	r2,zero,a2f8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    a2f0:	00800104 	movi	r2,4
    a2f4:	00007106 	br	a4bc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    a2f8:	e0bffd17 	ldw	r2,-12(fp)
    a2fc:	10800003 	ldbu	r2,0(r2)
    a300:	10803fcc 	andi	r2,r2,255
    a304:	108000a0 	cmpeqi	r2,r2,2
    a308:	1000021e 	bne	r2,zero,a314 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    a30c:	00800044 	movi	r2,1
    a310:	00006a06 	br	a4bc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a314:	0005303a 	rdctl	r2,status
    a318:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a31c:	e0fff917 	ldw	r3,-28(fp)
    a320:	00bfff84 	movi	r2,-2
    a324:	1884703a 	and	r2,r3,r2
    a328:	1001703a 	wrctl	status,r2
  
  return context;
    a32c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    a330:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    a334:	e0bffd17 	ldw	r2,-12(fp)
    a338:	10800283 	ldbu	r2,10(r2)
    a33c:	10803fcc 	andi	r2,r2,255
    a340:	10001d26 	beq	r2,zero,a3b8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    a344:	e0bfff03 	ldbu	r2,-4(fp)
    a348:	1080004c 	andi	r2,r2,1
    a34c:	10000b26 	beq	r2,zero,a37c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a350:	00000506 	br	a368 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a354:	e13ffd17 	ldw	r4,-12(fp)
    a358:	e17ffe17 	ldw	r5,-8(fp)
    a35c:	01800104 	movi	r6,4
    a360:	000f883a 	mov	r7,zero
    a364:	00062ac0 	call	62ac <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    a368:	e0bffd17 	ldw	r2,-12(fp)
    a36c:	10800283 	ldbu	r2,10(r2)
    a370:	10803fcc 	andi	r2,r2,255
    a374:	103ff71e 	bne	r2,zero,a354 <__alt_mem_Flash_flash_data+0xf400a354>
    a378:	00000506 	br	a390 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    a37c:	e13ffd17 	ldw	r4,-12(fp)
    a380:	e17ffe17 	ldw	r5,-8(fp)
    a384:	01800104 	movi	r6,4
    a388:	000f883a 	mov	r7,zero
    a38c:	00062ac0 	call	62ac <OS_EventTaskRdy>
    a390:	e0bff717 	ldw	r2,-36(fp)
    a394:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a398:	e0bffa17 	ldw	r2,-24(fp)
    a39c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    a3a0:	e0bfff03 	ldbu	r2,-4(fp)
    a3a4:	1080010c 	andi	r2,r2,4
    a3a8:	1000011e 	bne	r2,zero,a3b0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    a3ac:	0006cc40 	call	6cc4 <OS_Sched>
        }
        return (OS_ERR_NONE);
    a3b0:	0005883a 	mov	r2,zero
    a3b4:	00004106 	br	a4bc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    a3b8:	e0bffd17 	ldw	r2,-12(fp)
    a3bc:	10800117 	ldw	r2,4(r2)
    a3c0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    a3c4:	e0bff817 	ldw	r2,-32(fp)
    a3c8:	10c0058b 	ldhu	r3,22(r2)
    a3cc:	e0bff817 	ldw	r2,-32(fp)
    a3d0:	1080050b 	ldhu	r2,20(r2)
    a3d4:	18ffffcc 	andi	r3,r3,65535
    a3d8:	10bfffcc 	andi	r2,r2,65535
    a3dc:	18800636 	bltu	r3,r2,a3f8 <OSQPostOpt+0x134>
    a3e0:	e0bff717 	ldw	r2,-36(fp)
    a3e4:	e0bffb15 	stw	r2,-20(fp)
    a3e8:	e0bffb17 	ldw	r2,-20(fp)
    a3ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    a3f0:	00800784 	movi	r2,30
    a3f4:	00003106 	br	a4bc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    a3f8:	e0bfff03 	ldbu	r2,-4(fp)
    a3fc:	1080008c 	andi	r2,r2,2
    a400:	10001326 	beq	r2,zero,a450 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    a404:	e0bff817 	ldw	r2,-32(fp)
    a408:	10c00417 	ldw	r3,16(r2)
    a40c:	e0bff817 	ldw	r2,-32(fp)
    a410:	10800117 	ldw	r2,4(r2)
    a414:	1880041e 	bne	r3,r2,a428 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    a418:	e0bff817 	ldw	r2,-32(fp)
    a41c:	10c00217 	ldw	r3,8(r2)
    a420:	e0bff817 	ldw	r2,-32(fp)
    a424:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    a428:	e0bff817 	ldw	r2,-32(fp)
    a42c:	10800417 	ldw	r2,16(r2)
    a430:	10ffff04 	addi	r3,r2,-4
    a434:	e0bff817 	ldw	r2,-32(fp)
    a438:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    a43c:	e0bff817 	ldw	r2,-32(fp)
    a440:	10800417 	ldw	r2,16(r2)
    a444:	e0fffe17 	ldw	r3,-8(fp)
    a448:	10c00015 	stw	r3,0(r2)
    a44c:	00001006 	br	a490 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    a450:	e0bff817 	ldw	r2,-32(fp)
    a454:	10800317 	ldw	r2,12(r2)
    a458:	11000104 	addi	r4,r2,4
    a45c:	e0fff817 	ldw	r3,-32(fp)
    a460:	19000315 	stw	r4,12(r3)
    a464:	e0fffe17 	ldw	r3,-8(fp)
    a468:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    a46c:	e0bff817 	ldw	r2,-32(fp)
    a470:	10c00317 	ldw	r3,12(r2)
    a474:	e0bff817 	ldw	r2,-32(fp)
    a478:	10800217 	ldw	r2,8(r2)
    a47c:	1880041e 	bne	r3,r2,a490 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    a480:	e0bff817 	ldw	r2,-32(fp)
    a484:	10c00117 	ldw	r3,4(r2)
    a488:	e0bff817 	ldw	r2,-32(fp)
    a48c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    a490:	e0bff817 	ldw	r2,-32(fp)
    a494:	1080058b 	ldhu	r2,22(r2)
    a498:	10800044 	addi	r2,r2,1
    a49c:	1007883a 	mov	r3,r2
    a4a0:	e0bff817 	ldw	r2,-32(fp)
    a4a4:	10c0058d 	sth	r3,22(r2)
    a4a8:	e0bff717 	ldw	r2,-36(fp)
    a4ac:	e0bffc15 	stw	r2,-16(fp)
    a4b0:	e0bffc17 	ldw	r2,-16(fp)
    a4b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a4b8:	0005883a 	mov	r2,zero
}
    a4bc:	e037883a 	mov	sp,fp
    a4c0:	dfc00117 	ldw	ra,4(sp)
    a4c4:	df000017 	ldw	fp,0(sp)
    a4c8:	dec00204 	addi	sp,sp,8
    a4cc:	f800283a 	ret

0000a4d0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    a4d0:	defff604 	addi	sp,sp,-40
    a4d4:	df000915 	stw	fp,36(sp)
    a4d8:	df000904 	addi	fp,sp,36
    a4dc:	e13ffe15 	stw	r4,-8(fp)
    a4e0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    a4e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    a4e8:	e0bffe17 	ldw	r2,-8(fp)
    a4ec:	1000021e 	bne	r2,zero,a4f8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a4f0:	00800104 	movi	r2,4
    a4f4:	00004906 	br	a61c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    a4f8:	e0bfff17 	ldw	r2,-4(fp)
    a4fc:	1000021e 	bne	r2,zero,a508 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a500:	00800244 	movi	r2,9
    a504:	00004506 	br	a61c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    a508:	e0bffe17 	ldw	r2,-8(fp)
    a50c:	10800003 	ldbu	r2,0(r2)
    a510:	10803fcc 	andi	r2,r2,255
    a514:	108000a0 	cmpeqi	r2,r2,2
    a518:	1000021e 	bne	r2,zero,a524 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a51c:	00800044 	movi	r2,1
    a520:	00003e06 	br	a61c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a524:	0005303a 	rdctl	r2,status
    a528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a52c:	e0fffc17 	ldw	r3,-16(fp)
    a530:	00bfff84 	movi	r2,-2
    a534:	1884703a 	and	r2,r3,r2
    a538:	1001703a 	wrctl	status,r2
  
  return context;
    a53c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a540:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    a544:	e0bffe17 	ldw	r2,-8(fp)
    a548:	10c00283 	ldbu	r3,10(r2)
    a54c:	e0bfff17 	ldw	r2,-4(fp)
    a550:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    a554:	e0bffe17 	ldw	r2,-8(fp)
    a558:	108002c4 	addi	r2,r2,11
    a55c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    a560:	e0bfff17 	ldw	r2,-4(fp)
    a564:	10800204 	addi	r2,r2,8
    a568:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a56c:	e03ff705 	stb	zero,-36(fp)
    a570:	00000b06 	br	a5a0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    a574:	e0bff917 	ldw	r2,-28(fp)
    a578:	10c00044 	addi	r3,r2,1
    a57c:	e0fff915 	stw	r3,-28(fp)
    a580:	e0fff817 	ldw	r3,-32(fp)
    a584:	19000044 	addi	r4,r3,1
    a588:	e13ff815 	stw	r4,-32(fp)
    a58c:	18c00003 	ldbu	r3,0(r3)
    a590:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a594:	e0bff703 	ldbu	r2,-36(fp)
    a598:	10800044 	addi	r2,r2,1
    a59c:	e0bff705 	stb	r2,-36(fp)
    a5a0:	e0bff703 	ldbu	r2,-36(fp)
    a5a4:	108000f0 	cmpltui	r2,r2,3
    a5a8:	103ff21e 	bne	r2,zero,a574 <__alt_mem_Flash_flash_data+0xf400a574>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    a5ac:	e0bffe17 	ldw	r2,-8(fp)
    a5b0:	10800117 	ldw	r2,4(r2)
    a5b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    a5b8:	e0bffb17 	ldw	r2,-20(fp)
    a5bc:	1080058b 	ldhu	r2,22(r2)
    a5c0:	10bfffcc 	andi	r2,r2,65535
    a5c4:	10000626 	beq	r2,zero,a5e0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    a5c8:	e0bffb17 	ldw	r2,-20(fp)
    a5cc:	10800417 	ldw	r2,16(r2)
    a5d0:	10c00017 	ldw	r3,0(r2)
    a5d4:	e0bfff17 	ldw	r2,-4(fp)
    a5d8:	10c00015 	stw	r3,0(r2)
    a5dc:	00000206 	br	a5e8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    a5e0:	e0bfff17 	ldw	r2,-4(fp)
    a5e4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    a5e8:	e0bffb17 	ldw	r2,-20(fp)
    a5ec:	10c0058b 	ldhu	r3,22(r2)
    a5f0:	e0bfff17 	ldw	r2,-4(fp)
    a5f4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    a5f8:	e0bffb17 	ldw	r2,-20(fp)
    a5fc:	10c0050b 	ldhu	r3,20(r2)
    a600:	e0bfff17 	ldw	r2,-4(fp)
    a604:	10c0018d 	sth	r3,6(r2)
    a608:	e0bffa17 	ldw	r2,-24(fp)
    a60c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a610:	e0bffd17 	ldw	r2,-12(fp)
    a614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a618:	0005883a 	mov	r2,zero
}
    a61c:	e037883a 	mov	sp,fp
    a620:	df000017 	ldw	fp,0(sp)
    a624:	dec00104 	addi	sp,sp,4
    a628:	f800283a 	ret

0000a62c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    a62c:	defffb04 	addi	sp,sp,-20
    a630:	dfc00415 	stw	ra,16(sp)
    a634:	df000315 	stw	fp,12(sp)
    a638:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    a63c:	010000b4 	movhi	r4,2
    a640:	2101f504 	addi	r4,r4,2004
    a644:	01407804 	movi	r5,480
    a648:	0006c100 	call	6c10 <OS_MemClr>
    pq1 = &OSQTbl[0];
    a64c:	008000b4 	movhi	r2,2
    a650:	1081f504 	addi	r2,r2,2004
    a654:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    a658:	008000b4 	movhi	r2,2
    a65c:	1081fb04 	addi	r2,r2,2028
    a660:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    a664:	e03ffd0d 	sth	zero,-12(fp)
    a668:	00000c06 	br	a69c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    a66c:	e0bffe17 	ldw	r2,-8(fp)
    a670:	e0ffff17 	ldw	r3,-4(fp)
    a674:	10c00015 	stw	r3,0(r2)
        pq1++;
    a678:	e0bffe17 	ldw	r2,-8(fp)
    a67c:	10800604 	addi	r2,r2,24
    a680:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    a684:	e0bfff17 	ldw	r2,-4(fp)
    a688:	10800604 	addi	r2,r2,24
    a68c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    a690:	e0bffd0b 	ldhu	r2,-12(fp)
    a694:	10800044 	addi	r2,r2,1
    a698:	e0bffd0d 	sth	r2,-12(fp)
    a69c:	e0bffd0b 	ldhu	r2,-12(fp)
    a6a0:	108004f0 	cmpltui	r2,r2,19
    a6a4:	103ff11e 	bne	r2,zero,a66c <__alt_mem_Flash_flash_data+0xf400a66c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    a6a8:	e0bffe17 	ldw	r2,-8(fp)
    a6ac:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    a6b0:	00800074 	movhi	r2,1
    a6b4:	1093f604 	addi	r2,r2,20440
    a6b8:	00c000b4 	movhi	r3,2
    a6bc:	18c1f504 	addi	r3,r3,2004
    a6c0:	10c00015 	stw	r3,0(r2)
#endif
}
    a6c4:	e037883a 	mov	sp,fp
    a6c8:	dfc00117 	ldw	ra,4(sp)
    a6cc:	df000017 	ldw	fp,0(sp)
    a6d0:	dec00204 	addi	sp,sp,8
    a6d4:	f800283a 	ret

0000a6d8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    a6d8:	defffa04 	addi	sp,sp,-24
    a6dc:	df000515 	stw	fp,20(sp)
    a6e0:	df000504 	addi	fp,sp,20
    a6e4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a6e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a6ec:	e0bfff17 	ldw	r2,-4(fp)
    a6f0:	1000021e 	bne	r2,zero,a6fc <OSSemAccept+0x24>
        return (0);
    a6f4:	0005883a 	mov	r2,zero
    a6f8:	00001f06 	br	a778 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a6fc:	e0bfff17 	ldw	r2,-4(fp)
    a700:	10800003 	ldbu	r2,0(r2)
    a704:	10803fcc 	andi	r2,r2,255
    a708:	108000e0 	cmpeqi	r2,r2,3
    a70c:	1000021e 	bne	r2,zero,a718 <OSSemAccept+0x40>
        return (0);
    a710:	0005883a 	mov	r2,zero
    a714:	00001806 	br	a778 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a718:	0005303a 	rdctl	r2,status
    a71c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a720:	e0fffd17 	ldw	r3,-12(fp)
    a724:	00bfff84 	movi	r2,-2
    a728:	1884703a 	and	r2,r3,r2
    a72c:	1001703a 	wrctl	status,r2
  
  return context;
    a730:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a734:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    a738:	e0bfff17 	ldw	r2,-4(fp)
    a73c:	1080020b 	ldhu	r2,8(r2)
    a740:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    a744:	e0bffc0b 	ldhu	r2,-16(fp)
    a748:	10000626 	beq	r2,zero,a764 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    a74c:	e0bfff17 	ldw	r2,-4(fp)
    a750:	1080020b 	ldhu	r2,8(r2)
    a754:	10bfffc4 	addi	r2,r2,-1
    a758:	1007883a 	mov	r3,r2
    a75c:	e0bfff17 	ldw	r2,-4(fp)
    a760:	10c0020d 	sth	r3,8(r2)
    a764:	e0bffb17 	ldw	r2,-20(fp)
    a768:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a76c:	e0bffe17 	ldw	r2,-8(fp)
    a770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    a774:	e0bffc0b 	ldhu	r2,-16(fp)
}
    a778:	e037883a 	mov	sp,fp
    a77c:	df000017 	ldw	fp,0(sp)
    a780:	dec00104 	addi	sp,sp,4
    a784:	f800283a 	ret

0000a788 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    a788:	defff904 	addi	sp,sp,-28
    a78c:	dfc00615 	stw	ra,24(sp)
    a790:	df000515 	stw	fp,20(sp)
    a794:	df000504 	addi	fp,sp,20
    a798:	2005883a 	mov	r2,r4
    a79c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a7a0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    a7a4:	00800074 	movhi	r2,1
    a7a8:	1093f904 	addi	r2,r2,20452
    a7ac:	10800003 	ldbu	r2,0(r2)
    a7b0:	10803fcc 	andi	r2,r2,255
    a7b4:	10000226 	beq	r2,zero,a7c0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    a7b8:	0005883a 	mov	r2,zero
    a7bc:	00002d06 	br	a874 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7c0:	0005303a 	rdctl	r2,status
    a7c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7c8:	e0fffd17 	ldw	r3,-12(fp)
    a7cc:	00bfff84 	movi	r2,-2
    a7d0:	1884703a 	and	r2,r3,r2
    a7d4:	1001703a 	wrctl	status,r2
  
  return context;
    a7d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    a7dc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    a7e0:	00800074 	movhi	r2,1
    a7e4:	1093f804 	addi	r2,r2,20448
    a7e8:	10800017 	ldw	r2,0(r2)
    a7ec:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    a7f0:	00800074 	movhi	r2,1
    a7f4:	1093f804 	addi	r2,r2,20448
    a7f8:	10800017 	ldw	r2,0(r2)
    a7fc:	10000726 	beq	r2,zero,a81c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    a800:	00800074 	movhi	r2,1
    a804:	1093f804 	addi	r2,r2,20448
    a808:	10800017 	ldw	r2,0(r2)
    a80c:	10c00117 	ldw	r3,4(r2)
    a810:	00800074 	movhi	r2,1
    a814:	1093f804 	addi	r2,r2,20448
    a818:	10c00015 	stw	r3,0(r2)
    a81c:	e0bffb17 	ldw	r2,-20(fp)
    a820:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a824:	e0bffe17 	ldw	r2,-8(fp)
    a828:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    a82c:	e0bffc17 	ldw	r2,-16(fp)
    a830:	10000f26 	beq	r2,zero,a870 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    a834:	e0bffc17 	ldw	r2,-16(fp)
    a838:	00c000c4 	movi	r3,3
    a83c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    a840:	e0bffc17 	ldw	r2,-16(fp)
    a844:	e0ffff0b 	ldhu	r3,-4(fp)
    a848:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    a84c:	e0bffc17 	ldw	r2,-16(fp)
    a850:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    a854:	e0bffc17 	ldw	r2,-16(fp)
    a858:	00c00fc4 	movi	r3,63
    a85c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    a860:	e0bffc17 	ldw	r2,-16(fp)
    a864:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    a868:	e13ffc17 	ldw	r4,-16(fp)
    a86c:	000684c0 	call	684c <OS_EventWaitListInit>
    }
    return (pevent);
    a870:	e0bffc17 	ldw	r2,-16(fp)
}
    a874:	e037883a 	mov	sp,fp
    a878:	dfc00117 	ldw	ra,4(sp)
    a87c:	df000017 	ldw	fp,0(sp)
    a880:	dec00204 	addi	sp,sp,8
    a884:	f800283a 	ret

0000a888 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a888:	defff304 	addi	sp,sp,-52
    a88c:	dfc00c15 	stw	ra,48(sp)
    a890:	df000b15 	stw	fp,44(sp)
    a894:	df000b04 	addi	fp,sp,44
    a898:	e13ffd15 	stw	r4,-12(fp)
    a89c:	2805883a 	mov	r2,r5
    a8a0:	e1bfff15 	stw	r6,-4(fp)
    a8a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a8a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a8ac:	e0bfff17 	ldw	r2,-4(fp)
    a8b0:	1000021e 	bne	r2,zero,a8bc <OSSemDel+0x34>
        return (pevent);
    a8b4:	e0bffd17 	ldw	r2,-12(fp)
    a8b8:	00008806 	br	aadc <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a8bc:	e0bffd17 	ldw	r2,-12(fp)
    a8c0:	1000051e 	bne	r2,zero,a8d8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	00c00104 	movi	r3,4
    a8cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a8d0:	e0bffd17 	ldw	r2,-12(fp)
    a8d4:	00008106 	br	aadc <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    a8d8:	e0bffd17 	ldw	r2,-12(fp)
    a8dc:	10800003 	ldbu	r2,0(r2)
    a8e0:	10803fcc 	andi	r2,r2,255
    a8e4:	108000e0 	cmpeqi	r2,r2,3
    a8e8:	1000051e 	bne	r2,zero,a900 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a8ec:	e0bfff17 	ldw	r2,-4(fp)
    a8f0:	00c00044 	movi	r3,1
    a8f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a8f8:	e0bffd17 	ldw	r2,-12(fp)
    a8fc:	00007706 	br	aadc <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    a900:	00800074 	movhi	r2,1
    a904:	1093f904 	addi	r2,r2,20452
    a908:	10800003 	ldbu	r2,0(r2)
    a90c:	10803fcc 	andi	r2,r2,255
    a910:	10000526 	beq	r2,zero,a928 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    a914:	e0bfff17 	ldw	r2,-4(fp)
    a918:	00c003c4 	movi	r3,15
    a91c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a920:	e0bffd17 	ldw	r2,-12(fp)
    a924:	00006d06 	br	aadc <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a928:	0005303a 	rdctl	r2,status
    a92c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a930:	e0fff817 	ldw	r3,-32(fp)
    a934:	00bfff84 	movi	r2,-2
    a938:	1884703a 	and	r2,r3,r2
    a93c:	1001703a 	wrctl	status,r2
  
  return context;
    a940:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a944:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    a948:	e0bffd17 	ldw	r2,-12(fp)
    a94c:	10800283 	ldbu	r2,10(r2)
    a950:	10803fcc 	andi	r2,r2,255
    a954:	10000326 	beq	r2,zero,a964 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    a958:	00800044 	movi	r2,1
    a95c:	e0bff505 	stb	r2,-44(fp)
    a960:	00000106 	br	a968 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    a964:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    a968:	e0bffe03 	ldbu	r2,-8(fp)
    a96c:	10000326 	beq	r2,zero,a97c <OSSemDel+0xf4>
    a970:	10800060 	cmpeqi	r2,r2,1
    a974:	10002c1e 	bne	r2,zero,aa28 <OSSemDel+0x1a0>
    a978:	00004d06 	br	aab0 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    a97c:	e0bff503 	ldbu	r2,-44(fp)
    a980:	10001a1e 	bne	r2,zero,a9ec <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    a984:	e0bffd17 	ldw	r2,-12(fp)
    a988:	00c00fc4 	movi	r3,63
    a98c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    a990:	e0bffd17 	ldw	r2,-12(fp)
    a994:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    a998:	e0bffd17 	ldw	r2,-12(fp)
    a99c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    a9a0:	00800074 	movhi	r2,1
    a9a4:	1093f804 	addi	r2,r2,20448
    a9a8:	10c00017 	ldw	r3,0(r2)
    a9ac:	e0bffd17 	ldw	r2,-12(fp)
    a9b0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    a9b4:	e0bffd17 	ldw	r2,-12(fp)
    a9b8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    a9bc:	00800074 	movhi	r2,1
    a9c0:	1093f804 	addi	r2,r2,20448
    a9c4:	e0fffd17 	ldw	r3,-12(fp)
    a9c8:	10c00015 	stw	r3,0(r2)
    a9cc:	e0bff717 	ldw	r2,-36(fp)
    a9d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a9d4:	e0bff917 	ldw	r2,-28(fp)
    a9d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    a9dc:	e0bfff17 	ldw	r2,-4(fp)
    a9e0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    a9e4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    a9e8:	00003b06 	br	aad8 <OSSemDel+0x250>
    a9ec:	e0bff717 	ldw	r2,-36(fp)
    a9f0:	e0bffa15 	stw	r2,-24(fp)
    a9f4:	e0bffa17 	ldw	r2,-24(fp)
    a9f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    a9fc:	e0bfff17 	ldw	r2,-4(fp)
    aa00:	00c01244 	movi	r3,73
    aa04:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    aa08:	e0bffd17 	ldw	r2,-12(fp)
    aa0c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    aa10:	00003106 	br	aad8 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    aa14:	e13ffd17 	ldw	r4,-12(fp)
    aa18:	000b883a 	mov	r5,zero
    aa1c:	01800044 	movi	r6,1
    aa20:	000f883a 	mov	r7,zero
    aa24:	00062ac0 	call	62ac <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    aa28:	e0bffd17 	ldw	r2,-12(fp)
    aa2c:	10800283 	ldbu	r2,10(r2)
    aa30:	10803fcc 	andi	r2,r2,255
    aa34:	103ff71e 	bne	r2,zero,aa14 <__alt_mem_Flash_flash_data+0xf400aa14>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    aa38:	e0bffd17 	ldw	r2,-12(fp)
    aa3c:	00c00fc4 	movi	r3,63
    aa40:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    aa44:	e0bffd17 	ldw	r2,-12(fp)
    aa48:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    aa4c:	e0bffd17 	ldw	r2,-12(fp)
    aa50:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    aa54:	00800074 	movhi	r2,1
    aa58:	1093f804 	addi	r2,r2,20448
    aa5c:	10c00017 	ldw	r3,0(r2)
    aa60:	e0bffd17 	ldw	r2,-12(fp)
    aa64:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    aa68:	e0bffd17 	ldw	r2,-12(fp)
    aa6c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    aa70:	00800074 	movhi	r2,1
    aa74:	1093f804 	addi	r2,r2,20448
    aa78:	e0fffd17 	ldw	r3,-12(fp)
    aa7c:	10c00015 	stw	r3,0(r2)
    aa80:	e0bff717 	ldw	r2,-36(fp)
    aa84:	e0bffb15 	stw	r2,-20(fp)
    aa88:	e0bffb17 	ldw	r2,-20(fp)
    aa8c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    aa90:	e0bff503 	ldbu	r2,-44(fp)
    aa94:	10800058 	cmpnei	r2,r2,1
    aa98:	1000011e 	bne	r2,zero,aaa0 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    aa9c:	0006cc40 	call	6cc4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    aaa0:	e0bfff17 	ldw	r2,-4(fp)
    aaa4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    aaa8:	e03ff615 	stw	zero,-40(fp)
             break;
    aaac:	00000a06 	br	aad8 <OSSemDel+0x250>
    aab0:	e0bff717 	ldw	r2,-36(fp)
    aab4:	e0bffc15 	stw	r2,-16(fp)
    aab8:	e0bffc17 	ldw	r2,-16(fp)
    aabc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    aac0:	e0bfff17 	ldw	r2,-4(fp)
    aac4:	00c001c4 	movi	r3,7
    aac8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    aacc:	e0bffd17 	ldw	r2,-12(fp)
    aad0:	e0bff615 	stw	r2,-40(fp)
             break;
    aad4:	0001883a 	nop
    }
    return (pevent_return);
    aad8:	e0bff617 	ldw	r2,-40(fp)
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	dfc00117 	ldw	ra,4(sp)
    aae4:	df000017 	ldw	fp,0(sp)
    aae8:	dec00204 	addi	sp,sp,8
    aaec:	f800283a 	ret

0000aaf0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    aaf0:	defff504 	addi	sp,sp,-44
    aaf4:	dfc00a15 	stw	ra,40(sp)
    aaf8:	df000915 	stw	fp,36(sp)
    aafc:	df000904 	addi	fp,sp,36
    ab00:	e13ffd15 	stw	r4,-12(fp)
    ab04:	2805883a 	mov	r2,r5
    ab08:	e1bfff15 	stw	r6,-4(fp)
    ab0c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ab10:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ab14:	e0bfff17 	ldw	r2,-4(fp)
    ab18:	1000011e 	bne	r2,zero,ab20 <OSSemPend+0x30>
        return;
    ab1c:	00008906 	br	ad44 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    ab20:	e0bffd17 	ldw	r2,-12(fp)
    ab24:	1000041e 	bne	r2,zero,ab38 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    ab28:	e0bfff17 	ldw	r2,-4(fp)
    ab2c:	00c00104 	movi	r3,4
    ab30:	10c00005 	stb	r3,0(r2)
        return;
    ab34:	00008306 	br	ad44 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    ab38:	e0bffd17 	ldw	r2,-12(fp)
    ab3c:	10800003 	ldbu	r2,0(r2)
    ab40:	10803fcc 	andi	r2,r2,255
    ab44:	108000e0 	cmpeqi	r2,r2,3
    ab48:	1000041e 	bne	r2,zero,ab5c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    ab4c:	e0bfff17 	ldw	r2,-4(fp)
    ab50:	00c00044 	movi	r3,1
    ab54:	10c00005 	stb	r3,0(r2)
        return;
    ab58:	00007a06 	br	ad44 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    ab5c:	00800074 	movhi	r2,1
    ab60:	1093f904 	addi	r2,r2,20452
    ab64:	10800003 	ldbu	r2,0(r2)
    ab68:	10803fcc 	andi	r2,r2,255
    ab6c:	10000426 	beq	r2,zero,ab80 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    ab70:	e0bfff17 	ldw	r2,-4(fp)
    ab74:	00c00084 	movi	r3,2
    ab78:	10c00005 	stb	r3,0(r2)
        return;
    ab7c:	00007106 	br	ad44 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    ab80:	00800074 	movhi	r2,1
    ab84:	1093eb04 	addi	r2,r2,20396
    ab88:	10800003 	ldbu	r2,0(r2)
    ab8c:	10803fcc 	andi	r2,r2,255
    ab90:	10000426 	beq	r2,zero,aba4 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    ab94:	e0bfff17 	ldw	r2,-4(fp)
    ab98:	00c00344 	movi	r3,13
    ab9c:	10c00005 	stb	r3,0(r2)
        return;
    aba0:	00006806 	br	ad44 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aba4:	0005303a 	rdctl	r2,status
    aba8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    abac:	e0fff817 	ldw	r3,-32(fp)
    abb0:	00bfff84 	movi	r2,-2
    abb4:	1884703a 	and	r2,r3,r2
    abb8:	1001703a 	wrctl	status,r2
  
  return context;
    abbc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    abc0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    abc4:	e0bffd17 	ldw	r2,-12(fp)
    abc8:	1080020b 	ldhu	r2,8(r2)
    abcc:	10bfffcc 	andi	r2,r2,65535
    abd0:	10000d26 	beq	r2,zero,ac08 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    abd4:	e0bffd17 	ldw	r2,-12(fp)
    abd8:	1080020b 	ldhu	r2,8(r2)
    abdc:	10bfffc4 	addi	r2,r2,-1
    abe0:	1007883a 	mov	r3,r2
    abe4:	e0bffd17 	ldw	r2,-12(fp)
    abe8:	10c0020d 	sth	r3,8(r2)
    abec:	e0bff717 	ldw	r2,-36(fp)
    abf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    abf4:	e0bff917 	ldw	r2,-28(fp)
    abf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    abfc:	e0bfff17 	ldw	r2,-4(fp)
    ac00:	10000005 	stb	zero,0(r2)
        return;
    ac04:	00004f06 	br	ad44 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    ac08:	00800074 	movhi	r2,1
    ac0c:	1093fa04 	addi	r2,r2,20456
    ac10:	10c00017 	ldw	r3,0(r2)
    ac14:	00800074 	movhi	r2,1
    ac18:	1093fa04 	addi	r2,r2,20456
    ac1c:	10800017 	ldw	r2,0(r2)
    ac20:	10800c03 	ldbu	r2,48(r2)
    ac24:	10800054 	ori	r2,r2,1
    ac28:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    ac2c:	00800074 	movhi	r2,1
    ac30:	1093fa04 	addi	r2,r2,20456
    ac34:	10800017 	ldw	r2,0(r2)
    ac38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    ac3c:	00800074 	movhi	r2,1
    ac40:	1093fa04 	addi	r2,r2,20456
    ac44:	10800017 	ldw	r2,0(r2)
    ac48:	e0fffe0b 	ldhu	r3,-8(fp)
    ac4c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    ac50:	e13ffd17 	ldw	r4,-12(fp)
    ac54:	00064440 	call	6444 <OS_EventTaskWait>
    ac58:	e0bff717 	ldw	r2,-36(fp)
    ac5c:	e0bffa15 	stw	r2,-24(fp)
    ac60:	e0bffa17 	ldw	r2,-24(fp)
    ac64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    ac68:	0006cc40 	call	6cc4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ac6c:	0005303a 	rdctl	r2,status
    ac70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ac74:	e0fffb17 	ldw	r3,-20(fp)
    ac78:	00bfff84 	movi	r2,-2
    ac7c:	1884703a 	and	r2,r3,r2
    ac80:	1001703a 	wrctl	status,r2
  
  return context;
    ac84:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    ac88:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    ac8c:	00800074 	movhi	r2,1
    ac90:	1093fa04 	addi	r2,r2,20456
    ac94:	10800017 	ldw	r2,0(r2)
    ac98:	10800c43 	ldbu	r2,49(r2)
    ac9c:	10803fcc 	andi	r2,r2,255
    aca0:	10000326 	beq	r2,zero,acb0 <OSSemPend+0x1c0>
    aca4:	108000a0 	cmpeqi	r2,r2,2
    aca8:	1000041e 	bne	r2,zero,acbc <OSSemPend+0x1cc>
    acac:	00000706 	br	accc <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    acb0:	e0bfff17 	ldw	r2,-4(fp)
    acb4:	10000005 	stb	zero,0(r2)
             break;
    acb8:	00000e06 	br	acf4 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    acbc:	e0bfff17 	ldw	r2,-4(fp)
    acc0:	00c00384 	movi	r3,14
    acc4:	10c00005 	stb	r3,0(r2)
             break;
    acc8:	00000a06 	br	acf4 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    accc:	00800074 	movhi	r2,1
    acd0:	1093fa04 	addi	r2,r2,20456
    acd4:	10800017 	ldw	r2,0(r2)
    acd8:	1009883a 	mov	r4,r2
    acdc:	e17ffd17 	ldw	r5,-12(fp)
    ace0:	000669c0 	call	669c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    ace4:	e0bfff17 	ldw	r2,-4(fp)
    ace8:	00c00284 	movi	r3,10
    acec:	10c00005 	stb	r3,0(r2)
             break;
    acf0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    acf4:	00800074 	movhi	r2,1
    acf8:	1093fa04 	addi	r2,r2,20456
    acfc:	10800017 	ldw	r2,0(r2)
    ad00:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    ad04:	00800074 	movhi	r2,1
    ad08:	1093fa04 	addi	r2,r2,20456
    ad0c:	10800017 	ldw	r2,0(r2)
    ad10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    ad14:	00800074 	movhi	r2,1
    ad18:	1093fa04 	addi	r2,r2,20456
    ad1c:	10800017 	ldw	r2,0(r2)
    ad20:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    ad24:	00800074 	movhi	r2,1
    ad28:	1093fa04 	addi	r2,r2,20456
    ad2c:	10800017 	ldw	r2,0(r2)
    ad30:	10000815 	stw	zero,32(r2)
    ad34:	e0bff717 	ldw	r2,-36(fp)
    ad38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ad3c:	e0bffc17 	ldw	r2,-16(fp)
    ad40:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    ad44:	e037883a 	mov	sp,fp
    ad48:	dfc00117 	ldw	ra,4(sp)
    ad4c:	df000017 	ldw	fp,0(sp)
    ad50:	dec00204 	addi	sp,sp,8
    ad54:	f800283a 	ret

0000ad58 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    ad58:	defff604 	addi	sp,sp,-40
    ad5c:	dfc00915 	stw	ra,36(sp)
    ad60:	df000815 	stw	fp,32(sp)
    ad64:	df000804 	addi	fp,sp,32
    ad68:	e13ffd15 	stw	r4,-12(fp)
    ad6c:	2805883a 	mov	r2,r5
    ad70:	e1bfff15 	stw	r6,-4(fp)
    ad74:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    ad78:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    ad7c:	e0bfff17 	ldw	r2,-4(fp)
    ad80:	1000021e 	bne	r2,zero,ad8c <OSSemPendAbort+0x34>
        return (0);
    ad84:	0005883a 	mov	r2,zero
    ad88:	00004906 	br	aeb0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    ad8c:	e0bffd17 	ldw	r2,-12(fp)
    ad90:	1000051e 	bne	r2,zero,ada8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    ad94:	e0bfff17 	ldw	r2,-4(fp)
    ad98:	00c00104 	movi	r3,4
    ad9c:	10c00005 	stb	r3,0(r2)
        return (0);
    ada0:	0005883a 	mov	r2,zero
    ada4:	00004206 	br	aeb0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    ada8:	e0bffd17 	ldw	r2,-12(fp)
    adac:	10800003 	ldbu	r2,0(r2)
    adb0:	10803fcc 	andi	r2,r2,255
    adb4:	108000e0 	cmpeqi	r2,r2,3
    adb8:	1000051e 	bne	r2,zero,add0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    adbc:	e0bfff17 	ldw	r2,-4(fp)
    adc0:	00c00044 	movi	r3,1
    adc4:	10c00005 	stb	r3,0(r2)
        return (0);
    adc8:	0005883a 	mov	r2,zero
    adcc:	00003806 	br	aeb0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    add0:	0005303a 	rdctl	r2,status
    add4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    add8:	e0fffa17 	ldw	r3,-24(fp)
    addc:	00bfff84 	movi	r2,-2
    ade0:	1884703a 	and	r2,r3,r2
    ade4:	1001703a 	wrctl	status,r2
  
  return context;
    ade8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    adec:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    adf0:	e0bffd17 	ldw	r2,-12(fp)
    adf4:	10800283 	ldbu	r2,10(r2)
    adf8:	10803fcc 	andi	r2,r2,255
    adfc:	10002526 	beq	r2,zero,ae94 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    ae00:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    ae04:	e0bffe03 	ldbu	r2,-8(fp)
    ae08:	10800060 	cmpeqi	r2,r2,1
    ae0c:	10000e26 	beq	r2,zero,ae48 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    ae10:	00000806 	br	ae34 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    ae14:	e13ffd17 	ldw	r4,-12(fp)
    ae18:	000b883a 	mov	r5,zero
    ae1c:	01800044 	movi	r6,1
    ae20:	01c00084 	movi	r7,2
    ae24:	00062ac0 	call	62ac <OS_EventTaskRdy>
                     nbr_tasks++;
    ae28:	e0bff803 	ldbu	r2,-32(fp)
    ae2c:	10800044 	addi	r2,r2,1
    ae30:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    ae34:	e0bffd17 	ldw	r2,-12(fp)
    ae38:	10800283 	ldbu	r2,10(r2)
    ae3c:	10803fcc 	andi	r2,r2,255
    ae40:	103ff41e 	bne	r2,zero,ae14 <__alt_mem_Flash_flash_data+0xf400ae14>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    ae44:	00000906 	br	ae6c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    ae48:	e13ffd17 	ldw	r4,-12(fp)
    ae4c:	000b883a 	mov	r5,zero
    ae50:	01800044 	movi	r6,1
    ae54:	01c00084 	movi	r7,2
    ae58:	00062ac0 	call	62ac <OS_EventTaskRdy>
                 nbr_tasks++;
    ae5c:	e0bff803 	ldbu	r2,-32(fp)
    ae60:	10800044 	addi	r2,r2,1
    ae64:	e0bff805 	stb	r2,-32(fp)
                 break;
    ae68:	0001883a 	nop
    ae6c:	e0bff917 	ldw	r2,-28(fp)
    ae70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ae74:	e0bffb17 	ldw	r2,-20(fp)
    ae78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    ae7c:	0006cc40 	call	6cc4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    ae80:	e0bfff17 	ldw	r2,-4(fp)
    ae84:	00c00384 	movi	r3,14
    ae88:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    ae8c:	e0bff803 	ldbu	r2,-32(fp)
    ae90:	00000706 	br	aeb0 <OSSemPendAbort+0x158>
    ae94:	e0bff917 	ldw	r2,-28(fp)
    ae98:	e0bffc15 	stw	r2,-16(fp)
    ae9c:	e0bffc17 	ldw	r2,-16(fp)
    aea0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    aea4:	e0bfff17 	ldw	r2,-4(fp)
    aea8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    aeac:	0005883a 	mov	r2,zero
}
    aeb0:	e037883a 	mov	sp,fp
    aeb4:	dfc00117 	ldw	ra,4(sp)
    aeb8:	df000017 	ldw	fp,0(sp)
    aebc:	dec00204 	addi	sp,sp,8
    aec0:	f800283a 	ret

0000aec4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    aec4:	defff804 	addi	sp,sp,-32
    aec8:	dfc00715 	stw	ra,28(sp)
    aecc:	df000615 	stw	fp,24(sp)
    aed0:	df000604 	addi	fp,sp,24
    aed4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    aed8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    aedc:	e0bfff17 	ldw	r2,-4(fp)
    aee0:	1000021e 	bne	r2,zero,aeec <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    aee4:	00800104 	movi	r2,4
    aee8:	00003506 	br	afc0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    aeec:	e0bfff17 	ldw	r2,-4(fp)
    aef0:	10800003 	ldbu	r2,0(r2)
    aef4:	10803fcc 	andi	r2,r2,255
    aef8:	108000e0 	cmpeqi	r2,r2,3
    aefc:	1000021e 	bne	r2,zero,af08 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    af00:	00800044 	movi	r2,1
    af04:	00002e06 	br	afc0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af08:	0005303a 	rdctl	r2,status
    af0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af10:	e0fffb17 	ldw	r3,-20(fp)
    af14:	00bfff84 	movi	r2,-2
    af18:	1884703a 	and	r2,r3,r2
    af1c:	1001703a 	wrctl	status,r2
  
  return context;
    af20:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    af24:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    af28:	e0bfff17 	ldw	r2,-4(fp)
    af2c:	10800283 	ldbu	r2,10(r2)
    af30:	10803fcc 	andi	r2,r2,255
    af34:	10000c26 	beq	r2,zero,af68 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    af38:	e13fff17 	ldw	r4,-4(fp)
    af3c:	000b883a 	mov	r5,zero
    af40:	01800044 	movi	r6,1
    af44:	000f883a 	mov	r7,zero
    af48:	00062ac0 	call	62ac <OS_EventTaskRdy>
    af4c:	e0bffa17 	ldw	r2,-24(fp)
    af50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af54:	e0bffc17 	ldw	r2,-16(fp)
    af58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    af5c:	0006cc40 	call	6cc4 <OS_Sched>
        return (OS_ERR_NONE);
    af60:	0005883a 	mov	r2,zero
    af64:	00001606 	br	afc0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	1080020b 	ldhu	r2,8(r2)
    af70:	10ffffcc 	andi	r3,r2,65535
    af74:	00bfffd4 	movui	r2,65535
    af78:	18800c26 	beq	r3,r2,afac <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    af7c:	e0bfff17 	ldw	r2,-4(fp)
    af80:	1080020b 	ldhu	r2,8(r2)
    af84:	10800044 	addi	r2,r2,1
    af88:	1007883a 	mov	r3,r2
    af8c:	e0bfff17 	ldw	r2,-4(fp)
    af90:	10c0020d 	sth	r3,8(r2)
    af94:	e0bffa17 	ldw	r2,-24(fp)
    af98:	e0bffd15 	stw	r2,-12(fp)
    af9c:	e0bffd17 	ldw	r2,-12(fp)
    afa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    afa4:	0005883a 	mov	r2,zero
    afa8:	00000506 	br	afc0 <OSSemPost+0xfc>
    afac:	e0bffa17 	ldw	r2,-24(fp)
    afb0:	e0bffe15 	stw	r2,-8(fp)
    afb4:	e0bffe17 	ldw	r2,-8(fp)
    afb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    afbc:	00800c84 	movi	r2,50
}
    afc0:	e037883a 	mov	sp,fp
    afc4:	dfc00117 	ldw	ra,4(sp)
    afc8:	df000017 	ldw	fp,0(sp)
    afcc:	dec00204 	addi	sp,sp,8
    afd0:	f800283a 	ret

0000afd4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    afd4:	defff704 	addi	sp,sp,-36
    afd8:	df000815 	stw	fp,32(sp)
    afdc:	df000804 	addi	fp,sp,32
    afe0:	e13ffe15 	stw	r4,-8(fp)
    afe4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    afe8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    afec:	e0bffe17 	ldw	r2,-8(fp)
    aff0:	1000021e 	bne	r2,zero,affc <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    aff4:	00800104 	movi	r2,4
    aff8:	00003606 	br	b0d4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    affc:	e0bfff17 	ldw	r2,-4(fp)
    b000:	1000021e 	bne	r2,zero,b00c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    b004:	00800244 	movi	r2,9
    b008:	00003206 	br	b0d4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    b00c:	e0bffe17 	ldw	r2,-8(fp)
    b010:	10800003 	ldbu	r2,0(r2)
    b014:	10803fcc 	andi	r2,r2,255
    b018:	108000e0 	cmpeqi	r2,r2,3
    b01c:	1000021e 	bne	r2,zero,b028 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    b020:	00800044 	movi	r2,1
    b024:	00002b06 	br	b0d4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b028:	0005303a 	rdctl	r2,status
    b02c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b030:	e0fffc17 	ldw	r3,-16(fp)
    b034:	00bfff84 	movi	r2,-2
    b038:	1884703a 	and	r2,r3,r2
    b03c:	1001703a 	wrctl	status,r2
  
  return context;
    b040:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    b044:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    b048:	e0bffe17 	ldw	r2,-8(fp)
    b04c:	10c00283 	ldbu	r3,10(r2)
    b050:	e0bfff17 	ldw	r2,-4(fp)
    b054:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    b058:	e0bffe17 	ldw	r2,-8(fp)
    b05c:	108002c4 	addi	r2,r2,11
    b060:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    b064:	e0bfff17 	ldw	r2,-4(fp)
    b068:	10800084 	addi	r2,r2,2
    b06c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b070:	e03ffa05 	stb	zero,-24(fp)
    b074:	00000b06 	br	b0a4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    b078:	e0bff917 	ldw	r2,-28(fp)
    b07c:	10c00044 	addi	r3,r2,1
    b080:	e0fff915 	stw	r3,-28(fp)
    b084:	e0fff817 	ldw	r3,-32(fp)
    b088:	19000044 	addi	r4,r3,1
    b08c:	e13ff815 	stw	r4,-32(fp)
    b090:	18c00003 	ldbu	r3,0(r3)
    b094:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    b098:	e0bffa03 	ldbu	r2,-24(fp)
    b09c:	10800044 	addi	r2,r2,1
    b0a0:	e0bffa05 	stb	r2,-24(fp)
    b0a4:	e0bffa03 	ldbu	r2,-24(fp)
    b0a8:	108000f0 	cmpltui	r2,r2,3
    b0ac:	103ff21e 	bne	r2,zero,b078 <__alt_mem_Flash_flash_data+0xf400b078>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    b0b0:	e0bffe17 	ldw	r2,-8(fp)
    b0b4:	10c0020b 	ldhu	r3,8(r2)
    b0b8:	e0bfff17 	ldw	r2,-4(fp)
    b0bc:	10c0000d 	sth	r3,0(r2)
    b0c0:	e0bffb17 	ldw	r2,-20(fp)
    b0c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b0c8:	e0bffd17 	ldw	r2,-12(fp)
    b0cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b0d0:	0005883a 	mov	r2,zero
}
    b0d4:	e037883a 	mov	sp,fp
    b0d8:	df000017 	ldw	fp,0(sp)
    b0dc:	dec00104 	addi	sp,sp,4
    b0e0:	f800283a 	ret

0000b0e4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    b0e4:	defff904 	addi	sp,sp,-28
    b0e8:	df000615 	stw	fp,24(sp)
    b0ec:	df000604 	addi	fp,sp,24
    b0f0:	e13ffd15 	stw	r4,-12(fp)
    b0f4:	2805883a 	mov	r2,r5
    b0f8:	e1bfff15 	stw	r6,-4(fp)
    b0fc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    b100:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    b104:	e0bfff17 	ldw	r2,-4(fp)
    b108:	1000011e 	bne	r2,zero,b110 <OSSemSet+0x2c>
        return;
    b10c:	00003006 	br	b1d0 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    b110:	e0bffd17 	ldw	r2,-12(fp)
    b114:	1000041e 	bne	r2,zero,b128 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    b118:	e0bfff17 	ldw	r2,-4(fp)
    b11c:	00c00104 	movi	r3,4
    b120:	10c00005 	stb	r3,0(r2)
        return;
    b124:	00002a06 	br	b1d0 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    b128:	e0bffd17 	ldw	r2,-12(fp)
    b12c:	10800003 	ldbu	r2,0(r2)
    b130:	10803fcc 	andi	r2,r2,255
    b134:	108000e0 	cmpeqi	r2,r2,3
    b138:	1000041e 	bne	r2,zero,b14c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    b13c:	e0bfff17 	ldw	r2,-4(fp)
    b140:	00c00044 	movi	r3,1
    b144:	10c00005 	stb	r3,0(r2)
        return;
    b148:	00002106 	br	b1d0 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b14c:	0005303a 	rdctl	r2,status
    b150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b154:	e0fffb17 	ldw	r3,-20(fp)
    b158:	00bfff84 	movi	r2,-2
    b15c:	1884703a 	and	r2,r3,r2
    b160:	1001703a 	wrctl	status,r2
  
  return context;
    b164:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    b168:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    b16c:	e0bfff17 	ldw	r2,-4(fp)
    b170:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    b174:	e0bffd17 	ldw	r2,-12(fp)
    b178:	1080020b 	ldhu	r2,8(r2)
    b17c:	10bfffcc 	andi	r2,r2,65535
    b180:	10000426 	beq	r2,zero,b194 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    b184:	e0bffd17 	ldw	r2,-12(fp)
    b188:	e0fffe0b 	ldhu	r3,-8(fp)
    b18c:	10c0020d 	sth	r3,8(r2)
    b190:	00000b06 	br	b1c0 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    b194:	e0bffd17 	ldw	r2,-12(fp)
    b198:	10800283 	ldbu	r2,10(r2)
    b19c:	10803fcc 	andi	r2,r2,255
    b1a0:	1000041e 	bne	r2,zero,b1b4 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    b1a4:	e0bffd17 	ldw	r2,-12(fp)
    b1a8:	e0fffe0b 	ldhu	r3,-8(fp)
    b1ac:	10c0020d 	sth	r3,8(r2)
    b1b0:	00000306 	br	b1c0 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    b1b4:	e0bfff17 	ldw	r2,-4(fp)
    b1b8:	00c01244 	movi	r3,73
    b1bc:	10c00005 	stb	r3,0(r2)
    b1c0:	e0bffa17 	ldw	r2,-24(fp)
    b1c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b1c8:	e0bffc17 	ldw	r2,-16(fp)
    b1cc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    b1d0:	e037883a 	mov	sp,fp
    b1d4:	df000017 	ldw	fp,0(sp)
    b1d8:	dec00104 	addi	sp,sp,4
    b1dc:	f800283a 	ret

0000b1e0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    b1e0:	defff104 	addi	sp,sp,-60
    b1e4:	dfc00e15 	stw	ra,56(sp)
    b1e8:	df000d15 	stw	fp,52(sp)
    b1ec:	df000d04 	addi	fp,sp,52
    b1f0:	2007883a 	mov	r3,r4
    b1f4:	2805883a 	mov	r2,r5
    b1f8:	e0fffe05 	stb	r3,-8(fp)
    b1fc:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    b200:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    b204:	e0bffe03 	ldbu	r2,-8(fp)
    b208:	10800530 	cmpltui	r2,r2,20
    b20c:	1000051e 	bne	r2,zero,b224 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    b210:	e0bffe03 	ldbu	r2,-8(fp)
    b214:	10803fe0 	cmpeqi	r2,r2,255
    b218:	1000021e 	bne	r2,zero,b224 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    b21c:	00800a84 	movi	r2,42
    b220:	00013a06 	br	b70c <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    b224:	e0bfff03 	ldbu	r2,-4(fp)
    b228:	10800530 	cmpltui	r2,r2,20
    b22c:	1000021e 	bne	r2,zero,b238 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    b230:	00800a84 	movi	r2,42
    b234:	00013506 	br	b70c <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b238:	0005303a 	rdctl	r2,status
    b23c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b240:	e0fff917 	ldw	r3,-28(fp)
    b244:	00bfff84 	movi	r2,-2
    b248:	1884703a 	and	r2,r3,r2
    b24c:	1001703a 	wrctl	status,r2
  
  return context;
    b250:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b254:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    b258:	e0ffff03 	ldbu	r3,-4(fp)
    b25c:	008000b4 	movhi	r2,2
    b260:	10888104 	addi	r2,r2,8708
    b264:	18c7883a 	add	r3,r3,r3
    b268:	18c7883a 	add	r3,r3,r3
    b26c:	10c5883a 	add	r2,r2,r3
    b270:	10800017 	ldw	r2,0(r2)
    b274:	10000626 	beq	r2,zero,b290 <OSTaskChangePrio+0xb0>
    b278:	e0bff517 	ldw	r2,-44(fp)
    b27c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b280:	e0bffa17 	ldw	r2,-24(fp)
    b284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    b288:	00800a04 	movi	r2,40
    b28c:	00011f06 	br	b70c <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    b290:	e0bffe03 	ldbu	r2,-8(fp)
    b294:	10803fd8 	cmpnei	r2,r2,255
    b298:	1000051e 	bne	r2,zero,b2b0 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    b29c:	00800074 	movhi	r2,1
    b2a0:	1093fa04 	addi	r2,r2,20456
    b2a4:	10800017 	ldw	r2,0(r2)
    b2a8:	10800c83 	ldbu	r2,50(r2)
    b2ac:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    b2b0:	e0fffe03 	ldbu	r3,-8(fp)
    b2b4:	008000b4 	movhi	r2,2
    b2b8:	10888104 	addi	r2,r2,8708
    b2bc:	18c7883a 	add	r3,r3,r3
    b2c0:	18c7883a 	add	r3,r3,r3
    b2c4:	10c5883a 	add	r2,r2,r3
    b2c8:	10800017 	ldw	r2,0(r2)
    b2cc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    b2d0:	e0bff617 	ldw	r2,-40(fp)
    b2d4:	1000061e 	bne	r2,zero,b2f0 <OSTaskChangePrio+0x110>
    b2d8:	e0bff517 	ldw	r2,-44(fp)
    b2dc:	e0bffb15 	stw	r2,-20(fp)
    b2e0:	e0bffb17 	ldw	r2,-20(fp)
    b2e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    b2e8:	00800a44 	movi	r2,41
    b2ec:	00010706 	br	b70c <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    b2f0:	e0bff617 	ldw	r2,-40(fp)
    b2f4:	10800058 	cmpnei	r2,r2,1
    b2f8:	1000061e 	bne	r2,zero,b314 <OSTaskChangePrio+0x134>
    b2fc:	e0bff517 	ldw	r2,-44(fp)
    b300:	e0bffc15 	stw	r2,-16(fp)
    b304:	e0bffc17 	ldw	r2,-16(fp)
    b308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    b30c:	008010c4 	movi	r2,67
    b310:	0000fe06 	br	b70c <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    b314:	e0bfff03 	ldbu	r2,-4(fp)
    b318:	1004d0fa 	srli	r2,r2,3
    b31c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    b320:	e0bfff03 	ldbu	r2,-4(fp)
    b324:	108001cc 	andi	r2,r2,7
    b328:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    b32c:	e0bff703 	ldbu	r2,-36(fp)
    b330:	00c00044 	movi	r3,1
    b334:	1884983a 	sll	r2,r3,r2
    b338:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    b33c:	e0bff743 	ldbu	r2,-35(fp)
    b340:	00c00044 	movi	r3,1
    b344:	1884983a 	sll	r2,r3,r2
    b348:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    b34c:	e0fffe03 	ldbu	r3,-8(fp)
    b350:	008000b4 	movhi	r2,2
    b354:	10888104 	addi	r2,r2,8708
    b358:	18c7883a 	add	r3,r3,r3
    b35c:	18c7883a 	add	r3,r3,r3
    b360:	10c5883a 	add	r2,r2,r3
    b364:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    b368:	e0ffff03 	ldbu	r3,-4(fp)
    b36c:	008000b4 	movhi	r2,2
    b370:	10888104 	addi	r2,r2,8708
    b374:	18c7883a 	add	r3,r3,r3
    b378:	18c7883a 	add	r3,r3,r3
    b37c:	10c5883a 	add	r2,r2,r3
    b380:	e0fff617 	ldw	r3,-40(fp)
    b384:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    b388:	e0bff617 	ldw	r2,-40(fp)
    b38c:	10800d03 	ldbu	r2,52(r2)
    b390:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    b394:	e0bff617 	ldw	r2,-40(fp)
    b398:	10800d83 	ldbu	r2,54(r2)
    b39c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    b3a0:	e0bff617 	ldw	r2,-40(fp)
    b3a4:	10800d43 	ldbu	r2,53(r2)
    b3a8:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    b3ac:	e0fff803 	ldbu	r3,-32(fp)
    b3b0:	00800074 	movhi	r2,1
    b3b4:	1093f744 	addi	r2,r2,20445
    b3b8:	10c5883a 	add	r2,r2,r3
    b3bc:	10c00003 	ldbu	r3,0(r2)
    b3c0:	e0bff883 	ldbu	r2,-30(fp)
    b3c4:	1884703a 	and	r2,r3,r2
    b3c8:	10803fcc 	andi	r2,r2,255
    b3cc:	10003726 	beq	r2,zero,b4ac <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    b3d0:	e0fff803 	ldbu	r3,-32(fp)
    b3d4:	e13ff803 	ldbu	r4,-32(fp)
    b3d8:	00800074 	movhi	r2,1
    b3dc:	1093f744 	addi	r2,r2,20445
    b3e0:	1105883a 	add	r2,r2,r4
    b3e4:	10800003 	ldbu	r2,0(r2)
    b3e8:	1009883a 	mov	r4,r2
    b3ec:	e0bff883 	ldbu	r2,-30(fp)
    b3f0:	0084303a 	nor	r2,zero,r2
    b3f4:	2084703a 	and	r2,r4,r2
    b3f8:	1009883a 	mov	r4,r2
    b3fc:	00800074 	movhi	r2,1
    b400:	1093f744 	addi	r2,r2,20445
    b404:	10c5883a 	add	r2,r2,r3
    b408:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    b40c:	e0fff803 	ldbu	r3,-32(fp)
    b410:	00800074 	movhi	r2,1
    b414:	1093f744 	addi	r2,r2,20445
    b418:	10c5883a 	add	r2,r2,r3
    b41c:	10800003 	ldbu	r2,0(r2)
    b420:	10803fcc 	andi	r2,r2,255
    b424:	10000b1e 	bne	r2,zero,b454 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    b428:	e0bff843 	ldbu	r2,-31(fp)
    b42c:	0084303a 	nor	r2,zero,r2
    b430:	1007883a 	mov	r3,r2
    b434:	00800074 	movhi	r2,1
    b438:	1093f704 	addi	r2,r2,20444
    b43c:	10800003 	ldbu	r2,0(r2)
    b440:	1884703a 	and	r2,r3,r2
    b444:	1007883a 	mov	r3,r2
    b448:	00800074 	movhi	r2,1
    b44c:	1093f704 	addi	r2,r2,20444
    b450:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    b454:	00800074 	movhi	r2,1
    b458:	1093f704 	addi	r2,r2,20444
    b45c:	10c00003 	ldbu	r3,0(r2)
    b460:	e0bff783 	ldbu	r2,-34(fp)
    b464:	1884b03a 	or	r2,r3,r2
    b468:	1007883a 	mov	r3,r2
    b46c:	00800074 	movhi	r2,1
    b470:	1093f704 	addi	r2,r2,20444
    b474:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    b478:	e0fff703 	ldbu	r3,-36(fp)
    b47c:	e13ff703 	ldbu	r4,-36(fp)
    b480:	00800074 	movhi	r2,1
    b484:	1093f744 	addi	r2,r2,20445
    b488:	1105883a 	add	r2,r2,r4
    b48c:	11000003 	ldbu	r4,0(r2)
    b490:	e0bff7c3 	ldbu	r2,-33(fp)
    b494:	2084b03a 	or	r2,r4,r2
    b498:	1009883a 	mov	r4,r2
    b49c:	00800074 	movhi	r2,1
    b4a0:	1093f744 	addi	r2,r2,20445
    b4a4:	10c5883a 	add	r2,r2,r3
    b4a8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    b4ac:	e0bff617 	ldw	r2,-40(fp)
    b4b0:	10800717 	ldw	r2,28(r2)
    b4b4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    b4b8:	e0bff317 	ldw	r2,-52(fp)
    b4bc:	10003326 	beq	r2,zero,b58c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    b4c0:	e0bff803 	ldbu	r2,-32(fp)
    b4c4:	e0fff803 	ldbu	r3,-32(fp)
    b4c8:	e13ff317 	ldw	r4,-52(fp)
    b4cc:	20c7883a 	add	r3,r4,r3
    b4d0:	18c00204 	addi	r3,r3,8
    b4d4:	18c000c3 	ldbu	r3,3(r3)
    b4d8:	1809883a 	mov	r4,r3
    b4dc:	e0fff883 	ldbu	r3,-30(fp)
    b4e0:	00c6303a 	nor	r3,zero,r3
    b4e4:	20c6703a 	and	r3,r4,r3
    b4e8:	1809883a 	mov	r4,r3
    b4ec:	e0fff317 	ldw	r3,-52(fp)
    b4f0:	1885883a 	add	r2,r3,r2
    b4f4:	10800204 	addi	r2,r2,8
    b4f8:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    b4fc:	e0bff803 	ldbu	r2,-32(fp)
    b500:	e0fff317 	ldw	r3,-52(fp)
    b504:	1885883a 	add	r2,r3,r2
    b508:	10800204 	addi	r2,r2,8
    b50c:	108000c3 	ldbu	r2,3(r2)
    b510:	10803fcc 	andi	r2,r2,255
    b514:	1000091e 	bne	r2,zero,b53c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    b518:	e0bff317 	ldw	r2,-52(fp)
    b51c:	10800283 	ldbu	r2,10(r2)
    b520:	1007883a 	mov	r3,r2
    b524:	e0bff843 	ldbu	r2,-31(fp)
    b528:	0084303a 	nor	r2,zero,r2
    b52c:	1884703a 	and	r2,r3,r2
    b530:	1007883a 	mov	r3,r2
    b534:	e0bff317 	ldw	r2,-52(fp)
    b538:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    b53c:	e0bff317 	ldw	r2,-52(fp)
    b540:	10c00283 	ldbu	r3,10(r2)
    b544:	e0bff783 	ldbu	r2,-34(fp)
    b548:	1884b03a 	or	r2,r3,r2
    b54c:	1007883a 	mov	r3,r2
    b550:	e0bff317 	ldw	r2,-52(fp)
    b554:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    b558:	e0bff703 	ldbu	r2,-36(fp)
    b55c:	e0fff703 	ldbu	r3,-36(fp)
    b560:	e13ff317 	ldw	r4,-52(fp)
    b564:	20c7883a 	add	r3,r4,r3
    b568:	18c00204 	addi	r3,r3,8
    b56c:	190000c3 	ldbu	r4,3(r3)
    b570:	e0fff7c3 	ldbu	r3,-33(fp)
    b574:	20c6b03a 	or	r3,r4,r3
    b578:	1809883a 	mov	r4,r3
    b57c:	e0fff317 	ldw	r3,-52(fp)
    b580:	1885883a 	add	r2,r3,r2
    b584:	10800204 	addi	r2,r2,8
    b588:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    b58c:	e0bff617 	ldw	r2,-40(fp)
    b590:	10800817 	ldw	r2,32(r2)
    b594:	10004226 	beq	r2,zero,b6a0 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    b598:	e0bff617 	ldw	r2,-40(fp)
    b59c:	10800817 	ldw	r2,32(r2)
    b5a0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    b5a4:	e0bff417 	ldw	r2,-48(fp)
    b5a8:	10800017 	ldw	r2,0(r2)
    b5ac:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    b5b0:	00003906 	br	b698 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    b5b4:	e0bff803 	ldbu	r2,-32(fp)
    b5b8:	e0fff803 	ldbu	r3,-32(fp)
    b5bc:	e13ff317 	ldw	r4,-52(fp)
    b5c0:	20c7883a 	add	r3,r4,r3
    b5c4:	18c00204 	addi	r3,r3,8
    b5c8:	18c000c3 	ldbu	r3,3(r3)
    b5cc:	1809883a 	mov	r4,r3
    b5d0:	e0fff883 	ldbu	r3,-30(fp)
    b5d4:	00c6303a 	nor	r3,zero,r3
    b5d8:	20c6703a 	and	r3,r4,r3
    b5dc:	1809883a 	mov	r4,r3
    b5e0:	e0fff317 	ldw	r3,-52(fp)
    b5e4:	1885883a 	add	r2,r3,r2
    b5e8:	10800204 	addi	r2,r2,8
    b5ec:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    b5f0:	e0bff803 	ldbu	r2,-32(fp)
    b5f4:	e0fff317 	ldw	r3,-52(fp)
    b5f8:	1885883a 	add	r2,r3,r2
    b5fc:	10800204 	addi	r2,r2,8
    b600:	108000c3 	ldbu	r2,3(r2)
    b604:	10803fcc 	andi	r2,r2,255
    b608:	1000091e 	bne	r2,zero,b630 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    b60c:	e0bff317 	ldw	r2,-52(fp)
    b610:	10800283 	ldbu	r2,10(r2)
    b614:	1007883a 	mov	r3,r2
    b618:	e0bff843 	ldbu	r2,-31(fp)
    b61c:	0084303a 	nor	r2,zero,r2
    b620:	1884703a 	and	r2,r3,r2
    b624:	1007883a 	mov	r3,r2
    b628:	e0bff317 	ldw	r2,-52(fp)
    b62c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    b630:	e0bff317 	ldw	r2,-52(fp)
    b634:	10c00283 	ldbu	r3,10(r2)
    b638:	e0bff783 	ldbu	r2,-34(fp)
    b63c:	1884b03a 	or	r2,r3,r2
    b640:	1007883a 	mov	r3,r2
    b644:	e0bff317 	ldw	r2,-52(fp)
    b648:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    b64c:	e0bff703 	ldbu	r2,-36(fp)
    b650:	e0fff703 	ldbu	r3,-36(fp)
    b654:	e13ff317 	ldw	r4,-52(fp)
    b658:	20c7883a 	add	r3,r4,r3
    b65c:	18c00204 	addi	r3,r3,8
    b660:	190000c3 	ldbu	r4,3(r3)
    b664:	e0fff7c3 	ldbu	r3,-33(fp)
    b668:	20c6b03a 	or	r3,r4,r3
    b66c:	1809883a 	mov	r4,r3
    b670:	e0fff317 	ldw	r3,-52(fp)
    b674:	1885883a 	add	r2,r3,r2
    b678:	10800204 	addi	r2,r2,8
    b67c:	110000c5 	stb	r4,3(r2)
            pevents++;
    b680:	e0bff417 	ldw	r2,-48(fp)
    b684:	10800104 	addi	r2,r2,4
    b688:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    b68c:	e0bff417 	ldw	r2,-48(fp)
    b690:	10800017 	ldw	r2,0(r2)
    b694:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    b698:	e0bff317 	ldw	r2,-52(fp)
    b69c:	103fc51e 	bne	r2,zero,b5b4 <__alt_mem_Flash_flash_data+0xf400b5b4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    b6a0:	e0bff617 	ldw	r2,-40(fp)
    b6a4:	e0ffff03 	ldbu	r3,-4(fp)
    b6a8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    b6ac:	e0bff617 	ldw	r2,-40(fp)
    b6b0:	e0fff703 	ldbu	r3,-36(fp)
    b6b4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    b6b8:	e0bff617 	ldw	r2,-40(fp)
    b6bc:	e0fff743 	ldbu	r3,-35(fp)
    b6c0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    b6c4:	e0bff617 	ldw	r2,-40(fp)
    b6c8:	e0fff783 	ldbu	r3,-34(fp)
    b6cc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    b6d0:	e0bff617 	ldw	r2,-40(fp)
    b6d4:	e0fff7c3 	ldbu	r3,-33(fp)
    b6d8:	10c00d45 	stb	r3,53(r2)
    b6dc:	e0bff517 	ldw	r2,-44(fp)
    b6e0:	e0bffd15 	stw	r2,-12(fp)
    b6e4:	e0bffd17 	ldw	r2,-12(fp)
    b6e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    b6ec:	00800074 	movhi	r2,1
    b6f0:	1093eb44 	addi	r2,r2,20397
    b6f4:	10800003 	ldbu	r2,0(r2)
    b6f8:	10803fcc 	andi	r2,r2,255
    b6fc:	10800058 	cmpnei	r2,r2,1
    b700:	1000011e 	bne	r2,zero,b708 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    b704:	0006cc40 	call	6cc4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b708:	0005883a 	mov	r2,zero
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    b720:	deffee04 	addi	sp,sp,-72
    b724:	dfc01115 	stw	ra,68(sp)
    b728:	df001015 	stw	fp,64(sp)
    b72c:	df001004 	addi	fp,sp,64
    b730:	e13ffc15 	stw	r4,-16(fp)
    b734:	e17ffd15 	stw	r5,-12(fp)
    b738:	e1bffe15 	stw	r6,-8(fp)
    b73c:	3805883a 	mov	r2,r7
    b740:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    b744:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    b748:	e0bfff03 	ldbu	r2,-4(fp)
    b74c:	10800570 	cmpltui	r2,r2,21
    b750:	1000021e 	bne	r2,zero,b75c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    b754:	00800a84 	movi	r2,42
    b758:	00005b06 	br	b8c8 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b75c:	0005303a 	rdctl	r2,status
    b760:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b764:	e0fff617 	ldw	r3,-40(fp)
    b768:	00bfff84 	movi	r2,-2
    b76c:	1884703a 	and	r2,r3,r2
    b770:	1001703a 	wrctl	status,r2
  
  return context;
    b774:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b778:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    b77c:	00800074 	movhi	r2,1
    b780:	1093f904 	addi	r2,r2,20452
    b784:	10800003 	ldbu	r2,0(r2)
    b788:	10803fcc 	andi	r2,r2,255
    b78c:	10000626 	beq	r2,zero,b7a8 <OSTaskCreate+0x88>
    b790:	e0bff317 	ldw	r2,-52(fp)
    b794:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b798:	e0bff717 	ldw	r2,-36(fp)
    b79c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    b7a0:	00800f04 	movi	r2,60
    b7a4:	00004806 	br	b8c8 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    b7a8:	e0ffff03 	ldbu	r3,-4(fp)
    b7ac:	008000b4 	movhi	r2,2
    b7b0:	10888104 	addi	r2,r2,8708
    b7b4:	18c7883a 	add	r3,r3,r3
    b7b8:	18c7883a 	add	r3,r3,r3
    b7bc:	10c5883a 	add	r2,r2,r3
    b7c0:	10800017 	ldw	r2,0(r2)
    b7c4:	10003b1e 	bne	r2,zero,b8b4 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    b7c8:	e0ffff03 	ldbu	r3,-4(fp)
    b7cc:	008000b4 	movhi	r2,2
    b7d0:	10888104 	addi	r2,r2,8708
    b7d4:	18c7883a 	add	r3,r3,r3
    b7d8:	18c7883a 	add	r3,r3,r3
    b7dc:	10c5883a 	add	r2,r2,r3
    b7e0:	00c00044 	movi	r3,1
    b7e4:	10c00015 	stw	r3,0(r2)
    b7e8:	e0bff317 	ldw	r2,-52(fp)
    b7ec:	e0bff815 	stw	r2,-32(fp)
    b7f0:	e0bff817 	ldw	r2,-32(fp)
    b7f4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    b7f8:	e13ffc17 	ldw	r4,-16(fp)
    b7fc:	e17ffd17 	ldw	r5,-12(fp)
    b800:	e1bffe17 	ldw	r6,-8(fp)
    b804:	000f883a 	mov	r7,zero
    b808:	00104140 	call	10414 <OSTaskStkInit>
    b80c:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    b810:	e0bfff03 	ldbu	r2,-4(fp)
    b814:	d8000015 	stw	zero,0(sp)
    b818:	d8000115 	stw	zero,4(sp)
    b81c:	d8000215 	stw	zero,8(sp)
    b820:	1009883a 	mov	r4,r2
    b824:	e17ff417 	ldw	r5,-48(fp)
    b828:	000d883a 	mov	r6,zero
    b82c:	000f883a 	mov	r7,zero
    b830:	00070c80 	call	70c8 <OS_TCBInit>
    b834:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    b838:	e0bff503 	ldbu	r2,-44(fp)
    b83c:	1000081e 	bne	r2,zero,b860 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    b840:	00800074 	movhi	r2,1
    b844:	1093eb44 	addi	r2,r2,20397
    b848:	10800003 	ldbu	r2,0(r2)
    b84c:	10803fcc 	andi	r2,r2,255
    b850:	10800058 	cmpnei	r2,r2,1
    b854:	1000151e 	bne	r2,zero,b8ac <OSTaskCreate+0x18c>
                OS_Sched();
    b858:	0006cc40 	call	6cc4 <OS_Sched>
    b85c:	00001306 	br	b8ac <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b860:	0005303a 	rdctl	r2,status
    b864:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b868:	e0fff917 	ldw	r3,-28(fp)
    b86c:	00bfff84 	movi	r2,-2
    b870:	1884703a 	and	r2,r3,r2
    b874:	1001703a 	wrctl	status,r2
  
  return context;
    b878:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    b87c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    b880:	e0ffff03 	ldbu	r3,-4(fp)
    b884:	008000b4 	movhi	r2,2
    b888:	10888104 	addi	r2,r2,8708
    b88c:	18c7883a 	add	r3,r3,r3
    b890:	18c7883a 	add	r3,r3,r3
    b894:	10c5883a 	add	r2,r2,r3
    b898:	10000015 	stw	zero,0(r2)
    b89c:	e0bff317 	ldw	r2,-52(fp)
    b8a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8a4:	e0bffa17 	ldw	r2,-24(fp)
    b8a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    b8ac:	e0bff503 	ldbu	r2,-44(fp)
    b8b0:	00000506 	br	b8c8 <OSTaskCreate+0x1a8>
    b8b4:	e0bff317 	ldw	r2,-52(fp)
    b8b8:	e0bffb15 	stw	r2,-20(fp)
    b8bc:	e0bffb17 	ldw	r2,-20(fp)
    b8c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    b8c4:	00800a04 	movi	r2,40
}
    b8c8:	e037883a 	mov	sp,fp
    b8cc:	dfc00117 	ldw	ra,4(sp)
    b8d0:	df000017 	ldw	fp,0(sp)
    b8d4:	dec00204 	addi	sp,sp,8
    b8d8:	f800283a 	ret

0000b8dc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    b8dc:	deffec04 	addi	sp,sp,-80
    b8e0:	dfc01315 	stw	ra,76(sp)
    b8e4:	df001215 	stw	fp,72(sp)
    b8e8:	df001204 	addi	fp,sp,72
    b8ec:	e13ffa15 	stw	r4,-24(fp)
    b8f0:	e17ffb15 	stw	r5,-20(fp)
    b8f4:	e1bffc15 	stw	r6,-16(fp)
    b8f8:	3809883a 	mov	r4,r7
    b8fc:	e0c00217 	ldw	r3,8(fp)
    b900:	e0800617 	ldw	r2,24(fp)
    b904:	e13ffd05 	stb	r4,-12(fp)
    b908:	e0fffe0d 	sth	r3,-8(fp)
    b90c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    b910:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    b914:	e0bffd03 	ldbu	r2,-12(fp)
    b918:	10800570 	cmpltui	r2,r2,21
    b91c:	1000021e 	bne	r2,zero,b928 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    b920:	00800a84 	movi	r2,42
    b924:	00006306 	br	bab4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b928:	0005303a 	rdctl	r2,status
    b92c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b930:	e0fff417 	ldw	r3,-48(fp)
    b934:	00bfff84 	movi	r2,-2
    b938:	1884703a 	and	r2,r3,r2
    b93c:	1001703a 	wrctl	status,r2
  
  return context;
    b940:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b944:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    b948:	00800074 	movhi	r2,1
    b94c:	1093f904 	addi	r2,r2,20452
    b950:	10800003 	ldbu	r2,0(r2)
    b954:	10803fcc 	andi	r2,r2,255
    b958:	10000626 	beq	r2,zero,b974 <OSTaskCreateExt+0x98>
    b95c:	e0bff117 	ldw	r2,-60(fp)
    b960:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b964:	e0bff517 	ldw	r2,-44(fp)
    b968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    b96c:	00800f04 	movi	r2,60
    b970:	00005006 	br	bab4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    b974:	e0fffd03 	ldbu	r3,-12(fp)
    b978:	008000b4 	movhi	r2,2
    b97c:	10888104 	addi	r2,r2,8708
    b980:	18c7883a 	add	r3,r3,r3
    b984:	18c7883a 	add	r3,r3,r3
    b988:	10c5883a 	add	r2,r2,r3
    b98c:	10800017 	ldw	r2,0(r2)
    b990:	1000431e 	bne	r2,zero,baa0 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    b994:	e0fffd03 	ldbu	r3,-12(fp)
    b998:	008000b4 	movhi	r2,2
    b99c:	10888104 	addi	r2,r2,8708
    b9a0:	18c7883a 	add	r3,r3,r3
    b9a4:	18c7883a 	add	r3,r3,r3
    b9a8:	10c5883a 	add	r2,r2,r3
    b9ac:	00c00044 	movi	r3,1
    b9b0:	10c00015 	stw	r3,0(r2)
    b9b4:	e0bff117 	ldw	r2,-60(fp)
    b9b8:	e0bff615 	stw	r2,-40(fp)
    b9bc:	e0bff617 	ldw	r2,-40(fp)
    b9c0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    b9c4:	e0bfff0b 	ldhu	r2,-4(fp)
    b9c8:	e1000317 	ldw	r4,12(fp)
    b9cc:	e1400417 	ldw	r5,16(fp)
    b9d0:	100d883a 	mov	r6,r2
    b9d4:	000ca680 	call	ca68 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    b9d8:	e0bfff0b 	ldhu	r2,-4(fp)
    b9dc:	e13ffa17 	ldw	r4,-24(fp)
    b9e0:	e17ffb17 	ldw	r5,-20(fp)
    b9e4:	e1bffc17 	ldw	r6,-16(fp)
    b9e8:	100f883a 	mov	r7,r2
    b9ec:	00104140 	call	10414 <OSTaskStkInit>
    b9f0:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    b9f4:	e13ffd03 	ldbu	r4,-12(fp)
    b9f8:	e1fffe0b 	ldhu	r7,-8(fp)
    b9fc:	e0bfff0b 	ldhu	r2,-4(fp)
    ba00:	e0c00417 	ldw	r3,16(fp)
    ba04:	d8c00015 	stw	r3,0(sp)
    ba08:	e0c00517 	ldw	r3,20(fp)
    ba0c:	d8c00115 	stw	r3,4(sp)
    ba10:	d8800215 	stw	r2,8(sp)
    ba14:	e17ff217 	ldw	r5,-56(fp)
    ba18:	e1800317 	ldw	r6,12(fp)
    ba1c:	00070c80 	call	70c8 <OS_TCBInit>
    ba20:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    ba24:	e0bff303 	ldbu	r2,-52(fp)
    ba28:	1000081e 	bne	r2,zero,ba4c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    ba2c:	00800074 	movhi	r2,1
    ba30:	1093eb44 	addi	r2,r2,20397
    ba34:	10800003 	ldbu	r2,0(r2)
    ba38:	10803fcc 	andi	r2,r2,255
    ba3c:	10800058 	cmpnei	r2,r2,1
    ba40:	1000151e 	bne	r2,zero,ba98 <OSTaskCreateExt+0x1bc>
                OS_Sched();
    ba44:	0006cc40 	call	6cc4 <OS_Sched>
    ba48:	00001306 	br	ba98 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba4c:	0005303a 	rdctl	r2,status
    ba50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba54:	e0fff717 	ldw	r3,-36(fp)
    ba58:	00bfff84 	movi	r2,-2
    ba5c:	1884703a 	and	r2,r3,r2
    ba60:	1001703a 	wrctl	status,r2
  
  return context;
    ba64:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    ba68:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    ba6c:	e0fffd03 	ldbu	r3,-12(fp)
    ba70:	008000b4 	movhi	r2,2
    ba74:	10888104 	addi	r2,r2,8708
    ba78:	18c7883a 	add	r3,r3,r3
    ba7c:	18c7883a 	add	r3,r3,r3
    ba80:	10c5883a 	add	r2,r2,r3
    ba84:	10000015 	stw	zero,0(r2)
    ba88:	e0bff117 	ldw	r2,-60(fp)
    ba8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba90:	e0bff817 	ldw	r2,-32(fp)
    ba94:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    ba98:	e0bff303 	ldbu	r2,-52(fp)
    ba9c:	00000506 	br	bab4 <OSTaskCreateExt+0x1d8>
    baa0:	e0bff117 	ldw	r2,-60(fp)
    baa4:	e0bff915 	stw	r2,-28(fp)
    baa8:	e0bff917 	ldw	r2,-28(fp)
    baac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    bab0:	00800a04 	movi	r2,40
}
    bab4:	e037883a 	mov	sp,fp
    bab8:	dfc00117 	ldw	ra,4(sp)
    babc:	df000017 	ldw	fp,0(sp)
    bac0:	dec00204 	addi	sp,sp,8
    bac4:	f800283a 	ret

0000bac8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    bac8:	defff404 	addi	sp,sp,-48
    bacc:	dfc00b15 	stw	ra,44(sp)
    bad0:	df000a15 	stw	fp,40(sp)
    bad4:	df000a04 	addi	fp,sp,40
    bad8:	2005883a 	mov	r2,r4
    badc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    bae0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    bae4:	00800074 	movhi	r2,1
    bae8:	1093f904 	addi	r2,r2,20452
    baec:	10800003 	ldbu	r2,0(r2)
    baf0:	10803fcc 	andi	r2,r2,255
    baf4:	10000226 	beq	r2,zero,bb00 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    baf8:	00801004 	movi	r2,64
    bafc:	0000e506 	br	be94 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    bb00:	e0bfff03 	ldbu	r2,-4(fp)
    bb04:	10800518 	cmpnei	r2,r2,20
    bb08:	1000021e 	bne	r2,zero,bb14 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    bb0c:	00800f84 	movi	r2,62
    bb10:	0000e006 	br	be94 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    bb14:	e0bfff03 	ldbu	r2,-4(fp)
    bb18:	10800530 	cmpltui	r2,r2,20
    bb1c:	1000051e 	bne	r2,zero,bb34 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    bb20:	e0bfff03 	ldbu	r2,-4(fp)
    bb24:	10803fe0 	cmpeqi	r2,r2,255
    bb28:	1000021e 	bne	r2,zero,bb34 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    bb2c:	00800a84 	movi	r2,42
    bb30:	0000d806 	br	be94 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb34:	0005303a 	rdctl	r2,status
    bb38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb3c:	e0fff917 	ldw	r3,-28(fp)
    bb40:	00bfff84 	movi	r2,-2
    bb44:	1884703a 	and	r2,r3,r2
    bb48:	1001703a 	wrctl	status,r2
  
  return context;
    bb4c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    bb50:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    bb54:	e0bfff03 	ldbu	r2,-4(fp)
    bb58:	10803fd8 	cmpnei	r2,r2,255
    bb5c:	1000051e 	bne	r2,zero,bb74 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    bb60:	00800074 	movhi	r2,1
    bb64:	1093fa04 	addi	r2,r2,20456
    bb68:	10800017 	ldw	r2,0(r2)
    bb6c:	10800c83 	ldbu	r2,50(r2)
    bb70:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bb74:	e0ffff03 	ldbu	r3,-4(fp)
    bb78:	008000b4 	movhi	r2,2
    bb7c:	10888104 	addi	r2,r2,8708
    bb80:	18c7883a 	add	r3,r3,r3
    bb84:	18c7883a 	add	r3,r3,r3
    bb88:	10c5883a 	add	r2,r2,r3
    bb8c:	10800017 	ldw	r2,0(r2)
    bb90:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    bb94:	e0bff717 	ldw	r2,-36(fp)
    bb98:	1000061e 	bne	r2,zero,bbb4 <OSTaskDel+0xec>
    bb9c:	e0bff617 	ldw	r2,-40(fp)
    bba0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bba4:	e0bffa17 	ldw	r2,-24(fp)
    bba8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bbac:	008010c4 	movi	r2,67
    bbb0:	0000b806 	br	be94 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    bbb4:	e0bff717 	ldw	r2,-36(fp)
    bbb8:	10800058 	cmpnei	r2,r2,1
    bbbc:	1000061e 	bne	r2,zero,bbd8 <OSTaskDel+0x110>
    bbc0:	e0bff617 	ldw	r2,-40(fp)
    bbc4:	e0bffb15 	stw	r2,-20(fp)
    bbc8:	e0bffb17 	ldw	r2,-20(fp)
    bbcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    bbd0:	00800f44 	movi	r2,61
    bbd4:	0000af06 	br	be94 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    bbd8:	e0bff717 	ldw	r2,-36(fp)
    bbdc:	10800d03 	ldbu	r2,52(r2)
    bbe0:	10c03fcc 	andi	r3,r2,255
    bbe4:	e0bff717 	ldw	r2,-36(fp)
    bbe8:	10800d03 	ldbu	r2,52(r2)
    bbec:	11003fcc 	andi	r4,r2,255
    bbf0:	00800074 	movhi	r2,1
    bbf4:	1093f744 	addi	r2,r2,20445
    bbf8:	1105883a 	add	r2,r2,r4
    bbfc:	10800003 	ldbu	r2,0(r2)
    bc00:	1009883a 	mov	r4,r2
    bc04:	e0bff717 	ldw	r2,-36(fp)
    bc08:	10800d43 	ldbu	r2,53(r2)
    bc0c:	0084303a 	nor	r2,zero,r2
    bc10:	2084703a 	and	r2,r4,r2
    bc14:	1009883a 	mov	r4,r2
    bc18:	00800074 	movhi	r2,1
    bc1c:	1093f744 	addi	r2,r2,20445
    bc20:	10c5883a 	add	r2,r2,r3
    bc24:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    bc28:	e0bff717 	ldw	r2,-36(fp)
    bc2c:	10800d03 	ldbu	r2,52(r2)
    bc30:	10c03fcc 	andi	r3,r2,255
    bc34:	00800074 	movhi	r2,1
    bc38:	1093f744 	addi	r2,r2,20445
    bc3c:	10c5883a 	add	r2,r2,r3
    bc40:	10800003 	ldbu	r2,0(r2)
    bc44:	10803fcc 	andi	r2,r2,255
    bc48:	10000c1e 	bne	r2,zero,bc7c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    bc4c:	e0bff717 	ldw	r2,-36(fp)
    bc50:	10800d83 	ldbu	r2,54(r2)
    bc54:	0084303a 	nor	r2,zero,r2
    bc58:	1007883a 	mov	r3,r2
    bc5c:	00800074 	movhi	r2,1
    bc60:	1093f704 	addi	r2,r2,20444
    bc64:	10800003 	ldbu	r2,0(r2)
    bc68:	1884703a 	and	r2,r3,r2
    bc6c:	1007883a 	mov	r3,r2
    bc70:	00800074 	movhi	r2,1
    bc74:	1093f704 	addi	r2,r2,20444
    bc78:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    bc7c:	e0bff717 	ldw	r2,-36(fp)
    bc80:	10800717 	ldw	r2,28(r2)
    bc84:	10000526 	beq	r2,zero,bc9c <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    bc88:	e0bff717 	ldw	r2,-36(fp)
    bc8c:	10800717 	ldw	r2,28(r2)
    bc90:	e13ff717 	ldw	r4,-36(fp)
    bc94:	100b883a 	mov	r5,r2
    bc98:	000669c0 	call	669c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    bc9c:	e0bff717 	ldw	r2,-36(fp)
    bca0:	10800817 	ldw	r2,32(r2)
    bca4:	10000526 	beq	r2,zero,bcbc <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    bca8:	e0bff717 	ldw	r2,-36(fp)
    bcac:	10800817 	ldw	r2,32(r2)
    bcb0:	e13ff717 	ldw	r4,-36(fp)
    bcb4:	100b883a 	mov	r5,r2
    bcb8:	00067500 	call	6750 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    bcbc:	e0bff717 	ldw	r2,-36(fp)
    bcc0:	10800a17 	ldw	r2,40(r2)
    bcc4:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    bcc8:	e0bff817 	ldw	r2,-32(fp)
    bccc:	10000226 	beq	r2,zero,bcd8 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    bcd0:	e13ff817 	ldw	r4,-32(fp)
    bcd4:	0008ca40 	call	8ca4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    bcd8:	e0bff717 	ldw	r2,-36(fp)
    bcdc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    bce0:	e0bff717 	ldw	r2,-36(fp)
    bce4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    bce8:	e0bff717 	ldw	r2,-36(fp)
    bcec:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    bcf0:	00800074 	movhi	r2,1
    bcf4:	1093eb04 	addi	r2,r2,20396
    bcf8:	10800003 	ldbu	r2,0(r2)
    bcfc:	10803fcc 	andi	r2,r2,255
    bd00:	10803fe0 	cmpeqi	r2,r2,255
    bd04:	1000081e 	bne	r2,zero,bd28 <OSTaskDel+0x260>
        OSLockNesting++;
    bd08:	00800074 	movhi	r2,1
    bd0c:	1093eb04 	addi	r2,r2,20396
    bd10:	10800003 	ldbu	r2,0(r2)
    bd14:	10800044 	addi	r2,r2,1
    bd18:	1007883a 	mov	r3,r2
    bd1c:	00800074 	movhi	r2,1
    bd20:	1093eb04 	addi	r2,r2,20396
    bd24:	10c00005 	stb	r3,0(r2)
    bd28:	e0bff617 	ldw	r2,-40(fp)
    bd2c:	e0bffc15 	stw	r2,-16(fp)
    bd30:	e0bffc17 	ldw	r2,-16(fp)
    bd34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    bd38:	00062900 	call	6290 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd3c:	0005303a 	rdctl	r2,status
    bd40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd44:	e0fffd17 	ldw	r3,-12(fp)
    bd48:	00bfff84 	movi	r2,-2
    bd4c:	1884703a 	and	r2,r3,r2
    bd50:	1001703a 	wrctl	status,r2
  
  return context;
    bd54:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    bd58:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    bd5c:	00800074 	movhi	r2,1
    bd60:	1093eb04 	addi	r2,r2,20396
    bd64:	10800003 	ldbu	r2,0(r2)
    bd68:	10803fcc 	andi	r2,r2,255
    bd6c:	10000826 	beq	r2,zero,bd90 <OSTaskDel+0x2c8>
        OSLockNesting--;
    bd70:	00800074 	movhi	r2,1
    bd74:	1093eb04 	addi	r2,r2,20396
    bd78:	10800003 	ldbu	r2,0(r2)
    bd7c:	10bfffc4 	addi	r2,r2,-1
    bd80:	1007883a 	mov	r3,r2
    bd84:	00800074 	movhi	r2,1
    bd88:	1093eb04 	addi	r2,r2,20396
    bd8c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    bd90:	e13ff717 	ldw	r4,-36(fp)
    bd94:	00105900 	call	10590 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    bd98:	00800074 	movhi	r2,1
    bd9c:	1093f344 	addi	r2,r2,20429
    bda0:	10800003 	ldbu	r2,0(r2)
    bda4:	10bfffc4 	addi	r2,r2,-1
    bda8:	1007883a 	mov	r3,r2
    bdac:	00800074 	movhi	r2,1
    bdb0:	1093f344 	addi	r2,r2,20429
    bdb4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    bdb8:	e0ffff03 	ldbu	r3,-4(fp)
    bdbc:	008000b4 	movhi	r2,2
    bdc0:	10888104 	addi	r2,r2,8708
    bdc4:	18c7883a 	add	r3,r3,r3
    bdc8:	18c7883a 	add	r3,r3,r3
    bdcc:	10c5883a 	add	r2,r2,r3
    bdd0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    bdd4:	e0bff717 	ldw	r2,-36(fp)
    bdd8:	10800617 	ldw	r2,24(r2)
    bddc:	1000091e 	bne	r2,zero,be04 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    bde0:	e0bff717 	ldw	r2,-36(fp)
    bde4:	10800517 	ldw	r2,20(r2)
    bde8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    bdec:	e0bff717 	ldw	r2,-36(fp)
    bdf0:	10c00517 	ldw	r3,20(r2)
    bdf4:	00800074 	movhi	r2,1
    bdf8:	1093ee04 	addi	r2,r2,20408
    bdfc:	10c00015 	stw	r3,0(r2)
    be00:	00000a06 	br	be2c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    be04:	e0bff717 	ldw	r2,-36(fp)
    be08:	10800617 	ldw	r2,24(r2)
    be0c:	e0fff717 	ldw	r3,-36(fp)
    be10:	18c00517 	ldw	r3,20(r3)
    be14:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    be18:	e0bff717 	ldw	r2,-36(fp)
    be1c:	10800517 	ldw	r2,20(r2)
    be20:	e0fff717 	ldw	r3,-36(fp)
    be24:	18c00617 	ldw	r3,24(r3)
    be28:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    be2c:	00800074 	movhi	r2,1
    be30:	1093f204 	addi	r2,r2,20424
    be34:	10c00017 	ldw	r3,0(r2)
    be38:	e0bff717 	ldw	r2,-36(fp)
    be3c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    be40:	00800074 	movhi	r2,1
    be44:	1093f204 	addi	r2,r2,20424
    be48:	e0fff717 	ldw	r3,-36(fp)
    be4c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    be50:	e0bff717 	ldw	r2,-36(fp)
    be54:	00c00fc4 	movi	r3,63
    be58:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    be5c:	e0bff717 	ldw	r2,-36(fp)
    be60:	10001345 	stb	zero,77(r2)
    be64:	e0bff617 	ldw	r2,-40(fp)
    be68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be6c:	e0bffe17 	ldw	r2,-8(fp)
    be70:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    be74:	00800074 	movhi	r2,1
    be78:	1093eb44 	addi	r2,r2,20397
    be7c:	10800003 	ldbu	r2,0(r2)
    be80:	10803fcc 	andi	r2,r2,255
    be84:	10800058 	cmpnei	r2,r2,1
    be88:	1000011e 	bne	r2,zero,be90 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    be8c:	0006cc40 	call	6cc4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    be90:	0005883a 	mov	r2,zero
}
    be94:	e037883a 	mov	sp,fp
    be98:	dfc00117 	ldw	ra,4(sp)
    be9c:	df000017 	ldw	fp,0(sp)
    bea0:	dec00204 	addi	sp,sp,8
    bea4:	f800283a 	ret

0000bea8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    bea8:	defff504 	addi	sp,sp,-44
    beac:	df000a15 	stw	fp,40(sp)
    beb0:	df000a04 	addi	fp,sp,40
    beb4:	2005883a 	mov	r2,r4
    beb8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bebc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    bec0:	e0bfff03 	ldbu	r2,-4(fp)
    bec4:	10800518 	cmpnei	r2,r2,20
    bec8:	1000021e 	bne	r2,zero,bed4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    becc:	00800f84 	movi	r2,62
    bed0:	00004706 	br	bff0 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    bed4:	e0bfff03 	ldbu	r2,-4(fp)
    bed8:	10800530 	cmpltui	r2,r2,20
    bedc:	1000051e 	bne	r2,zero,bef4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    bee0:	e0bfff03 	ldbu	r2,-4(fp)
    bee4:	10803fe0 	cmpeqi	r2,r2,255
    bee8:	1000021e 	bne	r2,zero,bef4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    beec:	00800a84 	movi	r2,42
    bef0:	00003f06 	br	bff0 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    bef4:	e0bfff03 	ldbu	r2,-4(fp)
    bef8:	10803fd8 	cmpnei	r2,r2,255
    befc:	1000131e 	bne	r2,zero,bf4c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf00:	0005303a 	rdctl	r2,status
    bf04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf08:	e0fff917 	ldw	r3,-28(fp)
    bf0c:	00bfff84 	movi	r2,-2
    bf10:	1884703a 	and	r2,r3,r2
    bf14:	1001703a 	wrctl	status,r2
  
  return context;
    bf18:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    bf1c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    bf20:	00800074 	movhi	r2,1
    bf24:	1093fa04 	addi	r2,r2,20456
    bf28:	10800017 	ldw	r2,0(r2)
    bf2c:	10800dc3 	ldbu	r2,55(r2)
    bf30:	e0bff705 	stb	r2,-36(fp)
    bf34:	e0bff617 	ldw	r2,-40(fp)
    bf38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf3c:	e0bffa17 	ldw	r2,-24(fp)
    bf40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    bf44:	e0bff703 	ldbu	r2,-36(fp)
    bf48:	00002906 	br	bff0 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf4c:	0005303a 	rdctl	r2,status
    bf50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf54:	e0fffb17 	ldw	r3,-20(fp)
    bf58:	00bfff84 	movi	r2,-2
    bf5c:	1884703a 	and	r2,r3,r2
    bf60:	1001703a 	wrctl	status,r2
  
  return context;
    bf64:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    bf68:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    bf6c:	e0ffff03 	ldbu	r3,-4(fp)
    bf70:	008000b4 	movhi	r2,2
    bf74:	10888104 	addi	r2,r2,8708
    bf78:	18c7883a 	add	r3,r3,r3
    bf7c:	18c7883a 	add	r3,r3,r3
    bf80:	10c5883a 	add	r2,r2,r3
    bf84:	10800017 	ldw	r2,0(r2)
    bf88:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    bf8c:	e0bff817 	ldw	r2,-32(fp)
    bf90:	1000061e 	bne	r2,zero,bfac <OSTaskDelReq+0x104>
    bf94:	e0bff617 	ldw	r2,-40(fp)
    bf98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf9c:	e0bffc17 	ldw	r2,-16(fp)
    bfa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    bfa4:	008010c4 	movi	r2,67
    bfa8:	00001106 	br	bff0 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    bfac:	e0bff817 	ldw	r2,-32(fp)
    bfb0:	10800058 	cmpnei	r2,r2,1
    bfb4:	1000061e 	bne	r2,zero,bfd0 <OSTaskDelReq+0x128>
    bfb8:	e0bff617 	ldw	r2,-40(fp)
    bfbc:	e0bffd15 	stw	r2,-12(fp)
    bfc0:	e0bffd17 	ldw	r2,-12(fp)
    bfc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    bfc8:	00800f44 	movi	r2,61
    bfcc:	00000806 	br	bff0 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    bfd0:	e0bff817 	ldw	r2,-32(fp)
    bfd4:	00c00fc4 	movi	r3,63
    bfd8:	10c00dc5 	stb	r3,55(r2)
    bfdc:	e0bff617 	ldw	r2,-40(fp)
    bfe0:	e0bffe15 	stw	r2,-8(fp)
    bfe4:	e0bffe17 	ldw	r2,-8(fp)
    bfe8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    bfec:	0005883a 	mov	r2,zero
}
    bff0:	e037883a 	mov	sp,fp
    bff4:	df000017 	ldw	fp,0(sp)
    bff8:	dec00104 	addi	sp,sp,4
    bffc:	f800283a 	ret

0000c000 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c000:	defff404 	addi	sp,sp,-48
    c004:	dfc00b15 	stw	ra,44(sp)
    c008:	df000a15 	stw	fp,40(sp)
    c00c:	df000a04 	addi	fp,sp,40
    c010:	2005883a 	mov	r2,r4
    c014:	e17ffe15 	stw	r5,-8(fp)
    c018:	e1bfff15 	stw	r6,-4(fp)
    c01c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    c020:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    c024:	e0bfff17 	ldw	r2,-4(fp)
    c028:	1000021e 	bne	r2,zero,c034 <OSTaskNameGet+0x34>
        return (0);
    c02c:	0005883a 	mov	r2,zero
    c030:	00005806 	br	c194 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    c034:	e0bffd03 	ldbu	r2,-12(fp)
    c038:	10800570 	cmpltui	r2,r2,21
    c03c:	1000081e 	bne	r2,zero,c060 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    c040:	e0bffd03 	ldbu	r2,-12(fp)
    c044:	10803fe0 	cmpeqi	r2,r2,255
    c048:	1000051e 	bne	r2,zero,c060 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    c04c:	e0bfff17 	ldw	r2,-4(fp)
    c050:	00c00a84 	movi	r3,42
    c054:	10c00005 	stb	r3,0(r2)
            return (0);
    c058:	0005883a 	mov	r2,zero
    c05c:	00004d06 	br	c194 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    c060:	e0bffe17 	ldw	r2,-8(fp)
    c064:	1000051e 	bne	r2,zero,c07c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    c068:	e0bfff17 	ldw	r2,-4(fp)
    c06c:	00c00304 	movi	r3,12
    c070:	10c00005 	stb	r3,0(r2)
        return (0);
    c074:	0005883a 	mov	r2,zero
    c078:	00004606 	br	c194 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    c07c:	00800074 	movhi	r2,1
    c080:	1093f904 	addi	r2,r2,20452
    c084:	10800003 	ldbu	r2,0(r2)
    c088:	10803fcc 	andi	r2,r2,255
    c08c:	10000526 	beq	r2,zero,c0a4 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    c090:	e0bfff17 	ldw	r2,-4(fp)
    c094:	00c00444 	movi	r3,17
    c098:	10c00005 	stb	r3,0(r2)
        return (0);
    c09c:	0005883a 	mov	r2,zero
    c0a0:	00003c06 	br	c194 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c0a4:	0005303a 	rdctl	r2,status
    c0a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c0ac:	e0fff917 	ldw	r3,-28(fp)
    c0b0:	00bfff84 	movi	r2,-2
    c0b4:	1884703a 	and	r2,r3,r2
    c0b8:	1001703a 	wrctl	status,r2
  
  return context;
    c0bc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    c0c0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    c0c4:	e0bffd03 	ldbu	r2,-12(fp)
    c0c8:	10803fd8 	cmpnei	r2,r2,255
    c0cc:	1000051e 	bne	r2,zero,c0e4 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    c0d0:	00800074 	movhi	r2,1
    c0d4:	1093fa04 	addi	r2,r2,20456
    c0d8:	10800017 	ldw	r2,0(r2)
    c0dc:	10800c83 	ldbu	r2,50(r2)
    c0e0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c0e4:	e0fffd03 	ldbu	r3,-12(fp)
    c0e8:	008000b4 	movhi	r2,2
    c0ec:	10888104 	addi	r2,r2,8708
    c0f0:	18c7883a 	add	r3,r3,r3
    c0f4:	18c7883a 	add	r3,r3,r3
    c0f8:	10c5883a 	add	r2,r2,r3
    c0fc:	10800017 	ldw	r2,0(r2)
    c100:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    c104:	e0bff717 	ldw	r2,-36(fp)
    c108:	1000091e 	bne	r2,zero,c130 <OSTaskNameGet+0x130>
    c10c:	e0bff617 	ldw	r2,-40(fp)
    c110:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c114:	e0bffa17 	ldw	r2,-24(fp)
    c118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c11c:	e0bfff17 	ldw	r2,-4(fp)
    c120:	00c010c4 	movi	r3,67
    c124:	10c00005 	stb	r3,0(r2)
        return (0);
    c128:	0005883a 	mov	r2,zero
    c12c:	00001906 	br	c194 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    c130:	e0bff717 	ldw	r2,-36(fp)
    c134:	10800058 	cmpnei	r2,r2,1
    c138:	1000091e 	bne	r2,zero,c160 <OSTaskNameGet+0x160>
    c13c:	e0bff617 	ldw	r2,-40(fp)
    c140:	e0bffb15 	stw	r2,-20(fp)
    c144:	e0bffb17 	ldw	r2,-20(fp)
    c148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c14c:	e0bfff17 	ldw	r2,-4(fp)
    c150:	00c010c4 	movi	r3,67
    c154:	10c00005 	stb	r3,0(r2)
        return (0);
    c158:	0005883a 	mov	r2,zero
    c15c:	00000d06 	br	c194 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    c160:	e0bff717 	ldw	r2,-36(fp)
    c164:	10801304 	addi	r2,r2,76
    c168:	e13ffe17 	ldw	r4,-8(fp)
    c16c:	100b883a 	mov	r5,r2
    c170:	0006e000 	call	6e00 <OS_StrCopy>
    c174:	e0bff805 	stb	r2,-32(fp)
    c178:	e0bff617 	ldw	r2,-40(fp)
    c17c:	e0bffc15 	stw	r2,-16(fp)
    c180:	e0bffc17 	ldw	r2,-16(fp)
    c184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c188:	e0bfff17 	ldw	r2,-4(fp)
    c18c:	10000005 	stb	zero,0(r2)
    return (len);
    c190:	e0bff803 	ldbu	r2,-32(fp)
}
    c194:	e037883a 	mov	sp,fp
    c198:	dfc00117 	ldw	ra,4(sp)
    c19c:	df000017 	ldw	fp,0(sp)
    c1a0:	dec00204 	addi	sp,sp,8
    c1a4:	f800283a 	ret

0000c1a8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    c1a8:	defff304 	addi	sp,sp,-52
    c1ac:	dfc00c15 	stw	ra,48(sp)
    c1b0:	df000b15 	stw	fp,44(sp)
    c1b4:	df000b04 	addi	fp,sp,44
    c1b8:	2005883a 	mov	r2,r4
    c1bc:	e17ffe15 	stw	r5,-8(fp)
    c1c0:	e1bfff15 	stw	r6,-4(fp)
    c1c4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c1c8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    c1cc:	e0bfff17 	ldw	r2,-4(fp)
    c1d0:	1000011e 	bne	r2,zero,c1d8 <OSTaskNameSet+0x30>
        return;
    c1d4:	00005f06 	br	c354 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    c1d8:	e0bffd03 	ldbu	r2,-12(fp)
    c1dc:	10800570 	cmpltui	r2,r2,21
    c1e0:	1000071e 	bne	r2,zero,c200 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    c1e4:	e0bffd03 	ldbu	r2,-12(fp)
    c1e8:	10803fe0 	cmpeqi	r2,r2,255
    c1ec:	1000041e 	bne	r2,zero,c200 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    c1f0:	e0bfff17 	ldw	r2,-4(fp)
    c1f4:	00c00a84 	movi	r3,42
    c1f8:	10c00005 	stb	r3,0(r2)
            return;
    c1fc:	00005506 	br	c354 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    c200:	e0bffe17 	ldw	r2,-8(fp)
    c204:	1000041e 	bne	r2,zero,c218 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    c208:	e0bfff17 	ldw	r2,-4(fp)
    c20c:	00c00304 	movi	r3,12
    c210:	10c00005 	stb	r3,0(r2)
        return;
    c214:	00004f06 	br	c354 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    c218:	00800074 	movhi	r2,1
    c21c:	1093f904 	addi	r2,r2,20452
    c220:	10800003 	ldbu	r2,0(r2)
    c224:	10803fcc 	andi	r2,r2,255
    c228:	10000426 	beq	r2,zero,c23c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    c22c:	e0bfff17 	ldw	r2,-4(fp)
    c230:	00c00484 	movi	r3,18
    c234:	10c00005 	stb	r3,0(r2)
        return;
    c238:	00004606 	br	c354 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c23c:	0005303a 	rdctl	r2,status
    c240:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c244:	e0fff817 	ldw	r3,-32(fp)
    c248:	00bfff84 	movi	r2,-2
    c24c:	1884703a 	and	r2,r3,r2
    c250:	1001703a 	wrctl	status,r2
  
  return context;
    c254:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    c258:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    c25c:	e0bffd03 	ldbu	r2,-12(fp)
    c260:	10803fd8 	cmpnei	r2,r2,255
    c264:	1000051e 	bne	r2,zero,c27c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    c268:	00800074 	movhi	r2,1
    c26c:	1093fa04 	addi	r2,r2,20456
    c270:	10800017 	ldw	r2,0(r2)
    c274:	10800c83 	ldbu	r2,50(r2)
    c278:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c27c:	e0fffd03 	ldbu	r3,-12(fp)
    c280:	008000b4 	movhi	r2,2
    c284:	10888104 	addi	r2,r2,8708
    c288:	18c7883a 	add	r3,r3,r3
    c28c:	18c7883a 	add	r3,r3,r3
    c290:	10c5883a 	add	r2,r2,r3
    c294:	10800017 	ldw	r2,0(r2)
    c298:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    c29c:	e0bff617 	ldw	r2,-40(fp)
    c2a0:	1000081e 	bne	r2,zero,c2c4 <OSTaskNameSet+0x11c>
    c2a4:	e0bff517 	ldw	r2,-44(fp)
    c2a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c2ac:	e0bff917 	ldw	r2,-28(fp)
    c2b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c2b4:	e0bfff17 	ldw	r2,-4(fp)
    c2b8:	00c010c4 	movi	r3,67
    c2bc:	10c00005 	stb	r3,0(r2)
        return;
    c2c0:	00002406 	br	c354 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    c2c4:	e0bff617 	ldw	r2,-40(fp)
    c2c8:	10800058 	cmpnei	r2,r2,1
    c2cc:	1000081e 	bne	r2,zero,c2f0 <OSTaskNameSet+0x148>
    c2d0:	e0bff517 	ldw	r2,-44(fp)
    c2d4:	e0bffa15 	stw	r2,-24(fp)
    c2d8:	e0bffa17 	ldw	r2,-24(fp)
    c2dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
    c2e4:	00c010c4 	movi	r3,67
    c2e8:	10c00005 	stb	r3,0(r2)
        return;
    c2ec:	00001906 	br	c354 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    c2f0:	e13ffe17 	ldw	r4,-8(fp)
    c2f4:	0006e740 	call	6e74 <OS_StrLen>
    c2f8:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    c2fc:	e0bff703 	ldbu	r2,-36(fp)
    c300:	10800830 	cmpltui	r2,r2,32
    c304:	1000081e 	bne	r2,zero,c328 <OSTaskNameSet+0x180>
    c308:	e0bff517 	ldw	r2,-44(fp)
    c30c:	e0bffb15 	stw	r2,-20(fp)
    c310:	e0bffb17 	ldw	r2,-20(fp)
    c314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    c318:	e0bfff17 	ldw	r2,-4(fp)
    c31c:	00c01044 	movi	r3,65
    c320:	10c00005 	stb	r3,0(r2)
        return;
    c324:	00000b06 	br	c354 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    c328:	e0bff617 	ldw	r2,-40(fp)
    c32c:	10801304 	addi	r2,r2,76
    c330:	1009883a 	mov	r4,r2
    c334:	e17ffe17 	ldw	r5,-8(fp)
    c338:	0006e000 	call	6e00 <OS_StrCopy>
    c33c:	e0bff517 	ldw	r2,-44(fp)
    c340:	e0bffc15 	stw	r2,-16(fp)
    c344:	e0bffc17 	ldw	r2,-16(fp)
    c348:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    c34c:	e0bfff17 	ldw	r2,-4(fp)
    c350:	10000005 	stb	zero,0(r2)
}
    c354:	e037883a 	mov	sp,fp
    c358:	dfc00117 	ldw	ra,4(sp)
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00204 	addi	sp,sp,8
    c364:	f800283a 	ret

0000c368 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    c368:	defff404 	addi	sp,sp,-48
    c36c:	dfc00b15 	stw	ra,44(sp)
    c370:	df000a15 	stw	fp,40(sp)
    c374:	df000a04 	addi	fp,sp,40
    c378:	2005883a 	mov	r2,r4
    c37c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    c380:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    c384:	e0bfff03 	ldbu	r2,-4(fp)
    c388:	10800530 	cmpltui	r2,r2,20
    c38c:	1000021e 	bne	r2,zero,c398 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    c390:	00800a84 	movi	r2,42
    c394:	00006d06 	br	c54c <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c398:	0005303a 	rdctl	r2,status
    c39c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3a0:	e0fff817 	ldw	r3,-32(fp)
    c3a4:	00bfff84 	movi	r2,-2
    c3a8:	1884703a 	and	r2,r3,r2
    c3ac:	1001703a 	wrctl	status,r2
  
  return context;
    c3b0:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    c3b4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    c3b8:	e0ffff03 	ldbu	r3,-4(fp)
    c3bc:	008000b4 	movhi	r2,2
    c3c0:	10888104 	addi	r2,r2,8708
    c3c4:	18c7883a 	add	r3,r3,r3
    c3c8:	18c7883a 	add	r3,r3,r3
    c3cc:	10c5883a 	add	r2,r2,r3
    c3d0:	10800017 	ldw	r2,0(r2)
    c3d4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    c3d8:	e0bff717 	ldw	r2,-36(fp)
    c3dc:	1000061e 	bne	r2,zero,c3f8 <OSTaskResume+0x90>
    c3e0:	e0bff617 	ldw	r2,-40(fp)
    c3e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3e8:	e0bff917 	ldw	r2,-28(fp)
    c3ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    c3f0:	00801184 	movi	r2,70
    c3f4:	00005506 	br	c54c <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    c3f8:	e0bff717 	ldw	r2,-36(fp)
    c3fc:	10800058 	cmpnei	r2,r2,1
    c400:	1000061e 	bne	r2,zero,c41c <OSTaskResume+0xb4>
    c404:	e0bff617 	ldw	r2,-40(fp)
    c408:	e0bffa15 	stw	r2,-24(fp)
    c40c:	e0bffa17 	ldw	r2,-24(fp)
    c410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c414:	008010c4 	movi	r2,67
    c418:	00004c06 	br	c54c <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    c41c:	e0bff717 	ldw	r2,-36(fp)
    c420:	10800c03 	ldbu	r2,48(r2)
    c424:	10803fcc 	andi	r2,r2,255
    c428:	1080020c 	andi	r2,r2,8
    c42c:	10004226 	beq	r2,zero,c538 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    c430:	e0bff717 	ldw	r2,-36(fp)
    c434:	10c00c03 	ldbu	r3,48(r2)
    c438:	00bffdc4 	movi	r2,-9
    c43c:	1884703a 	and	r2,r3,r2
    c440:	1007883a 	mov	r3,r2
    c444:	e0bff717 	ldw	r2,-36(fp)
    c448:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    c44c:	e0bff717 	ldw	r2,-36(fp)
    c450:	10800c03 	ldbu	r2,48(r2)
    c454:	10803fcc 	andi	r2,r2,255
    c458:	1000311e 	bne	r2,zero,c520 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    c45c:	e0bff717 	ldw	r2,-36(fp)
    c460:	10800b8b 	ldhu	r2,46(r2)
    c464:	10bfffcc 	andi	r2,r2,65535
    c468:	1000281e 	bne	r2,zero,c50c <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    c46c:	e0bff717 	ldw	r2,-36(fp)
    c470:	10c00d83 	ldbu	r3,54(r2)
    c474:	00800074 	movhi	r2,1
    c478:	1093f704 	addi	r2,r2,20444
    c47c:	10800003 	ldbu	r2,0(r2)
    c480:	1884b03a 	or	r2,r3,r2
    c484:	1007883a 	mov	r3,r2
    c488:	00800074 	movhi	r2,1
    c48c:	1093f704 	addi	r2,r2,20444
    c490:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    c494:	e0bff717 	ldw	r2,-36(fp)
    c498:	10800d03 	ldbu	r2,52(r2)
    c49c:	10c03fcc 	andi	r3,r2,255
    c4a0:	e0bff717 	ldw	r2,-36(fp)
    c4a4:	10800d03 	ldbu	r2,52(r2)
    c4a8:	11003fcc 	andi	r4,r2,255
    c4ac:	00800074 	movhi	r2,1
    c4b0:	1093f744 	addi	r2,r2,20445
    c4b4:	1105883a 	add	r2,r2,r4
    c4b8:	11000003 	ldbu	r4,0(r2)
    c4bc:	e0bff717 	ldw	r2,-36(fp)
    c4c0:	10800d43 	ldbu	r2,53(r2)
    c4c4:	2084b03a 	or	r2,r4,r2
    c4c8:	1009883a 	mov	r4,r2
    c4cc:	00800074 	movhi	r2,1
    c4d0:	1093f744 	addi	r2,r2,20445
    c4d4:	10c5883a 	add	r2,r2,r3
    c4d8:	11000005 	stb	r4,0(r2)
    c4dc:	e0bff617 	ldw	r2,-40(fp)
    c4e0:	e0bffb15 	stw	r2,-20(fp)
    c4e4:	e0bffb17 	ldw	r2,-20(fp)
    c4e8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    c4ec:	00800074 	movhi	r2,1
    c4f0:	1093eb44 	addi	r2,r2,20397
    c4f4:	10800003 	ldbu	r2,0(r2)
    c4f8:	10803fcc 	andi	r2,r2,255
    c4fc:	10800058 	cmpnei	r2,r2,1
    c500:	10000b1e 	bne	r2,zero,c530 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    c504:	0006cc40 	call	6cc4 <OS_Sched>
    c508:	00000906 	br	c530 <OSTaskResume+0x1c8>
    c50c:	e0bff617 	ldw	r2,-40(fp)
    c510:	e0bffc15 	stw	r2,-16(fp)
    c514:	e0bffc17 	ldw	r2,-16(fp)
    c518:	1001703a 	wrctl	status,r2
    c51c:	00000406 	br	c530 <OSTaskResume+0x1c8>
    c520:	e0bff617 	ldw	r2,-40(fp)
    c524:	e0bffd15 	stw	r2,-12(fp)
    c528:	e0bffd17 	ldw	r2,-12(fp)
    c52c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    c530:	0005883a 	mov	r2,zero
    c534:	00000506 	br	c54c <OSTaskResume+0x1e4>
    c538:	e0bff617 	ldw	r2,-40(fp)
    c53c:	e0bffe15 	stw	r2,-8(fp)
    c540:	e0bffe17 	ldw	r2,-8(fp)
    c544:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    c548:	00801104 	movi	r2,68
}
    c54c:	e037883a 	mov	sp,fp
    c550:	dfc00117 	ldw	ra,4(sp)
    c554:	df000017 	ldw	fp,0(sp)
    c558:	dec00204 	addi	sp,sp,8
    c55c:	f800283a 	ret

0000c560 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    c560:	defff304 	addi	sp,sp,-52
    c564:	df000c15 	stw	fp,48(sp)
    c568:	df000c04 	addi	fp,sp,48
    c56c:	2005883a 	mov	r2,r4
    c570:	e17fff15 	stw	r5,-4(fp)
    c574:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    c578:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    c57c:	e0bffe03 	ldbu	r2,-8(fp)
    c580:	10800570 	cmpltui	r2,r2,21
    c584:	1000051e 	bne	r2,zero,c59c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    c588:	e0bffe03 	ldbu	r2,-8(fp)
    c58c:	10803fe0 	cmpeqi	r2,r2,255
    c590:	1000021e 	bne	r2,zero,c59c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    c594:	00800a84 	movi	r2,42
    c598:	00005f06 	br	c718 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    c59c:	e0bfff17 	ldw	r2,-4(fp)
    c5a0:	1000021e 	bne	r2,zero,c5ac <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    c5a4:	00800244 	movi	r2,9
    c5a8:	00005b06 	br	c718 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    c5ac:	e0bfff17 	ldw	r2,-4(fp)
    c5b0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    c5b4:	e0bfff17 	ldw	r2,-4(fp)
    c5b8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5bc:	0005303a 	rdctl	r2,status
    c5c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5c4:	e0fff917 	ldw	r3,-28(fp)
    c5c8:	00bfff84 	movi	r2,-2
    c5cc:	1884703a 	and	r2,r3,r2
    c5d0:	1001703a 	wrctl	status,r2
  
  return context;
    c5d4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    c5d8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    c5dc:	e0bffe03 	ldbu	r2,-8(fp)
    c5e0:	10803fd8 	cmpnei	r2,r2,255
    c5e4:	1000051e 	bne	r2,zero,c5fc <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    c5e8:	00800074 	movhi	r2,1
    c5ec:	1093fa04 	addi	r2,r2,20456
    c5f0:	10800017 	ldw	r2,0(r2)
    c5f4:	10800c83 	ldbu	r2,50(r2)
    c5f8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c5fc:	e0fffe03 	ldbu	r3,-8(fp)
    c600:	008000b4 	movhi	r2,2
    c604:	10888104 	addi	r2,r2,8708
    c608:	18c7883a 	add	r3,r3,r3
    c60c:	18c7883a 	add	r3,r3,r3
    c610:	10c5883a 	add	r2,r2,r3
    c614:	10800017 	ldw	r2,0(r2)
    c618:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    c61c:	e0bff717 	ldw	r2,-36(fp)
    c620:	1000061e 	bne	r2,zero,c63c <OSTaskStkChk+0xdc>
    c624:	e0bff617 	ldw	r2,-40(fp)
    c628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c62c:	e0bffa17 	ldw	r2,-24(fp)
    c630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c634:	008010c4 	movi	r2,67
    c638:	00003706 	br	c718 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    c63c:	e0bff717 	ldw	r2,-36(fp)
    c640:	10800058 	cmpnei	r2,r2,1
    c644:	1000061e 	bne	r2,zero,c660 <OSTaskStkChk+0x100>
    c648:	e0bff617 	ldw	r2,-40(fp)
    c64c:	e0bffb15 	stw	r2,-20(fp)
    c650:	e0bffb17 	ldw	r2,-20(fp)
    c654:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c658:	008010c4 	movi	r2,67
    c65c:	00002e06 	br	c718 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    c660:	e0bff717 	ldw	r2,-36(fp)
    c664:	1080040b 	ldhu	r2,16(r2)
    c668:	10bfffcc 	andi	r2,r2,65535
    c66c:	1080004c 	andi	r2,r2,1
    c670:	1000061e 	bne	r2,zero,c68c <OSTaskStkChk+0x12c>
    c674:	e0bff617 	ldw	r2,-40(fp)
    c678:	e0bffc15 	stw	r2,-16(fp)
    c67c:	e0bffc17 	ldw	r2,-16(fp)
    c680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    c684:	00801144 	movi	r2,69
    c688:	00002306 	br	c718 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    c68c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    c690:	e0bff717 	ldw	r2,-36(fp)
    c694:	10800317 	ldw	r2,12(r2)
    c698:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    c69c:	e0bff717 	ldw	r2,-36(fp)
    c6a0:	10800217 	ldw	r2,8(r2)
    c6a4:	e0bff415 	stw	r2,-48(fp)
    c6a8:	e0bff617 	ldw	r2,-40(fp)
    c6ac:	e0bffd15 	stw	r2,-12(fp)
    c6b0:	e0bffd17 	ldw	r2,-12(fp)
    c6b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    c6b8:	00000306 	br	c6c8 <OSTaskStkChk+0x168>
        nfree++;
    c6bc:	e0bff517 	ldw	r2,-44(fp)
    c6c0:	10800044 	addi	r2,r2,1
    c6c4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    c6c8:	e0bff417 	ldw	r2,-48(fp)
    c6cc:	10c00104 	addi	r3,r2,4
    c6d0:	e0fff415 	stw	r3,-48(fp)
    c6d4:	10800017 	ldw	r2,0(r2)
    c6d8:	103ff826 	beq	r2,zero,c6bc <__alt_mem_Flash_flash_data+0xf400c6bc>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    c6dc:	e0bff517 	ldw	r2,-44(fp)
    c6e0:	1085883a 	add	r2,r2,r2
    c6e4:	1085883a 	add	r2,r2,r2
    c6e8:	1007883a 	mov	r3,r2
    c6ec:	e0bfff17 	ldw	r2,-4(fp)
    c6f0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    c6f4:	e0fff817 	ldw	r3,-32(fp)
    c6f8:	e0bff517 	ldw	r2,-44(fp)
    c6fc:	1885c83a 	sub	r2,r3,r2
    c700:	1085883a 	add	r2,r2,r2
    c704:	1085883a 	add	r2,r2,r2
    c708:	1007883a 	mov	r3,r2
    c70c:	e0bfff17 	ldw	r2,-4(fp)
    c710:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    c714:	0005883a 	mov	r2,zero
}
    c718:	e037883a 	mov	sp,fp
    c71c:	df000017 	ldw	fp,0(sp)
    c720:	dec00104 	addi	sp,sp,4
    c724:	f800283a 	ret

0000c728 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    c728:	defff504 	addi	sp,sp,-44
    c72c:	dfc00a15 	stw	ra,40(sp)
    c730:	df000915 	stw	fp,36(sp)
    c734:	df000904 	addi	fp,sp,36
    c738:	2005883a 	mov	r2,r4
    c73c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c740:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    c744:	e0bfff03 	ldbu	r2,-4(fp)
    c748:	10800518 	cmpnei	r2,r2,20
    c74c:	1000021e 	bne	r2,zero,c758 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    c750:	008011c4 	movi	r2,71
    c754:	00007406 	br	c928 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    c758:	e0bfff03 	ldbu	r2,-4(fp)
    c75c:	10800530 	cmpltui	r2,r2,20
    c760:	1000051e 	bne	r2,zero,c778 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    c764:	e0bfff03 	ldbu	r2,-4(fp)
    c768:	10803fe0 	cmpeqi	r2,r2,255
    c76c:	1000021e 	bne	r2,zero,c778 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    c770:	00800a84 	movi	r2,42
    c774:	00006c06 	br	c928 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c778:	0005303a 	rdctl	r2,status
    c77c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c780:	e0fffb17 	ldw	r3,-20(fp)
    c784:	00bfff84 	movi	r2,-2
    c788:	1884703a 	and	r2,r3,r2
    c78c:	1001703a 	wrctl	status,r2
  
  return context;
    c790:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    c794:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    c798:	e0bfff03 	ldbu	r2,-4(fp)
    c79c:	10803fd8 	cmpnei	r2,r2,255
    c7a0:	1000081e 	bne	r2,zero,c7c4 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    c7a4:	00800074 	movhi	r2,1
    c7a8:	1093fa04 	addi	r2,r2,20456
    c7ac:	10800017 	ldw	r2,0(r2)
    c7b0:	10800c83 	ldbu	r2,50(r2)
    c7b4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    c7b8:	00800044 	movi	r2,1
    c7bc:	e0bff705 	stb	r2,-36(fp)
    c7c0:	00000b06 	br	c7f0 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    c7c4:	00800074 	movhi	r2,1
    c7c8:	1093fa04 	addi	r2,r2,20456
    c7cc:	10800017 	ldw	r2,0(r2)
    c7d0:	10800c83 	ldbu	r2,50(r2)
    c7d4:	10c03fcc 	andi	r3,r2,255
    c7d8:	e0bfff03 	ldbu	r2,-4(fp)
    c7dc:	1880031e 	bne	r3,r2,c7ec <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    c7e0:	00800044 	movi	r2,1
    c7e4:	e0bff705 	stb	r2,-36(fp)
    c7e8:	00000106 	br	c7f0 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    c7ec:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c7f0:	e0ffff03 	ldbu	r3,-4(fp)
    c7f4:	008000b4 	movhi	r2,2
    c7f8:	10888104 	addi	r2,r2,8708
    c7fc:	18c7883a 	add	r3,r3,r3
    c800:	18c7883a 	add	r3,r3,r3
    c804:	10c5883a 	add	r2,r2,r3
    c808:	10800017 	ldw	r2,0(r2)
    c80c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    c810:	e0bff917 	ldw	r2,-28(fp)
    c814:	1000061e 	bne	r2,zero,c830 <OSTaskSuspend+0x108>
    c818:	e0bff817 	ldw	r2,-32(fp)
    c81c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c820:	e0bffc17 	ldw	r2,-16(fp)
    c824:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    c828:	00801204 	movi	r2,72
    c82c:	00003e06 	br	c928 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    c830:	e0bff917 	ldw	r2,-28(fp)
    c834:	10800058 	cmpnei	r2,r2,1
    c838:	1000061e 	bne	r2,zero,c854 <OSTaskSuspend+0x12c>
    c83c:	e0bff817 	ldw	r2,-32(fp)
    c840:	e0bffd15 	stw	r2,-12(fp)
    c844:	e0bffd17 	ldw	r2,-12(fp)
    c848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c84c:	008010c4 	movi	r2,67
    c850:	00003506 	br	c928 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    c854:	e0bff917 	ldw	r2,-28(fp)
    c858:	10800d03 	ldbu	r2,52(r2)
    c85c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    c860:	e0fffa03 	ldbu	r3,-24(fp)
    c864:	e13ffa03 	ldbu	r4,-24(fp)
    c868:	00800074 	movhi	r2,1
    c86c:	1093f744 	addi	r2,r2,20445
    c870:	1105883a 	add	r2,r2,r4
    c874:	10800003 	ldbu	r2,0(r2)
    c878:	1009883a 	mov	r4,r2
    c87c:	e0bff917 	ldw	r2,-28(fp)
    c880:	10800d43 	ldbu	r2,53(r2)
    c884:	0084303a 	nor	r2,zero,r2
    c888:	2084703a 	and	r2,r4,r2
    c88c:	1009883a 	mov	r4,r2
    c890:	00800074 	movhi	r2,1
    c894:	1093f744 	addi	r2,r2,20445
    c898:	10c5883a 	add	r2,r2,r3
    c89c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    c8a0:	e0fffa03 	ldbu	r3,-24(fp)
    c8a4:	00800074 	movhi	r2,1
    c8a8:	1093f744 	addi	r2,r2,20445
    c8ac:	10c5883a 	add	r2,r2,r3
    c8b0:	10800003 	ldbu	r2,0(r2)
    c8b4:	10803fcc 	andi	r2,r2,255
    c8b8:	10000c1e 	bne	r2,zero,c8ec <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    c8bc:	e0bff917 	ldw	r2,-28(fp)
    c8c0:	10800d83 	ldbu	r2,54(r2)
    c8c4:	0084303a 	nor	r2,zero,r2
    c8c8:	1007883a 	mov	r3,r2
    c8cc:	00800074 	movhi	r2,1
    c8d0:	1093f704 	addi	r2,r2,20444
    c8d4:	10800003 	ldbu	r2,0(r2)
    c8d8:	1884703a 	and	r2,r3,r2
    c8dc:	1007883a 	mov	r3,r2
    c8e0:	00800074 	movhi	r2,1
    c8e4:	1093f704 	addi	r2,r2,20444
    c8e8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    c8ec:	e0bff917 	ldw	r2,-28(fp)
    c8f0:	10800c03 	ldbu	r2,48(r2)
    c8f4:	10800214 	ori	r2,r2,8
    c8f8:	1007883a 	mov	r3,r2
    c8fc:	e0bff917 	ldw	r2,-28(fp)
    c900:	10c00c05 	stb	r3,48(r2)
    c904:	e0bff817 	ldw	r2,-32(fp)
    c908:	e0bffe15 	stw	r2,-8(fp)
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    c914:	e0bff703 	ldbu	r2,-36(fp)
    c918:	10800058 	cmpnei	r2,r2,1
    c91c:	1000011e 	bne	r2,zero,c924 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    c920:	0006cc40 	call	6cc4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    c924:	0005883a 	mov	r2,zero
}
    c928:	e037883a 	mov	sp,fp
    c92c:	dfc00117 	ldw	ra,4(sp)
    c930:	df000017 	ldw	fp,0(sp)
    c934:	dec00204 	addi	sp,sp,8
    c938:	f800283a 	ret

0000c93c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    c93c:	defff604 	addi	sp,sp,-40
    c940:	dfc00915 	stw	ra,36(sp)
    c944:	df000815 	stw	fp,32(sp)
    c948:	df000804 	addi	fp,sp,32
    c94c:	2005883a 	mov	r2,r4
    c950:	e17fff15 	stw	r5,-4(fp)
    c954:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c958:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    c95c:	e0bffe03 	ldbu	r2,-8(fp)
    c960:	10800570 	cmpltui	r2,r2,21
    c964:	1000051e 	bne	r2,zero,c97c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    c968:	e0bffe03 	ldbu	r2,-8(fp)
    c96c:	10803fe0 	cmpeqi	r2,r2,255
    c970:	1000021e 	bne	r2,zero,c97c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    c974:	00800a84 	movi	r2,42
    c978:	00003606 	br	ca54 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    c97c:	e0bfff17 	ldw	r2,-4(fp)
    c980:	1000021e 	bne	r2,zero,c98c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    c984:	00800244 	movi	r2,9
    c988:	00003206 	br	ca54 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c98c:	0005303a 	rdctl	r2,status
    c990:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c994:	e0fffa17 	ldw	r3,-24(fp)
    c998:	00bfff84 	movi	r2,-2
    c99c:	1884703a 	and	r2,r3,r2
    c9a0:	1001703a 	wrctl	status,r2
  
  return context;
    c9a4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    c9a8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    c9ac:	e0bffe03 	ldbu	r2,-8(fp)
    c9b0:	10803fd8 	cmpnei	r2,r2,255
    c9b4:	1000051e 	bne	r2,zero,c9cc <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    c9b8:	00800074 	movhi	r2,1
    c9bc:	1093fa04 	addi	r2,r2,20456
    c9c0:	10800017 	ldw	r2,0(r2)
    c9c4:	10800c83 	ldbu	r2,50(r2)
    c9c8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c9cc:	e0fffe03 	ldbu	r3,-8(fp)
    c9d0:	008000b4 	movhi	r2,2
    c9d4:	10888104 	addi	r2,r2,8708
    c9d8:	18c7883a 	add	r3,r3,r3
    c9dc:	18c7883a 	add	r3,r3,r3
    c9e0:	10c5883a 	add	r2,r2,r3
    c9e4:	10800017 	ldw	r2,0(r2)
    c9e8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    c9ec:	e0bff917 	ldw	r2,-28(fp)
    c9f0:	1000061e 	bne	r2,zero,ca0c <OSTaskQuery+0xd0>
    c9f4:	e0bff817 	ldw	r2,-32(fp)
    c9f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9fc:	e0bffb17 	ldw	r2,-20(fp)
    ca00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    ca04:	00800a44 	movi	r2,41
    ca08:	00001206 	br	ca54 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    ca0c:	e0bff917 	ldw	r2,-28(fp)
    ca10:	10800058 	cmpnei	r2,r2,1
    ca14:	1000061e 	bne	r2,zero,ca30 <OSTaskQuery+0xf4>
    ca18:	e0bff817 	ldw	r2,-32(fp)
    ca1c:	e0bffc15 	stw	r2,-16(fp)
    ca20:	e0bffc17 	ldw	r2,-16(fp)
    ca24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    ca28:	008010c4 	movi	r2,67
    ca2c:	00000906 	br	ca54 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    ca30:	e13fff17 	ldw	r4,-4(fp)
    ca34:	e17ff917 	ldw	r5,-28(fp)
    ca38:	01801b04 	movi	r6,108
    ca3c:	0006c600 	call	6c60 <OS_MemCopy>
    ca40:	e0bff817 	ldw	r2,-32(fp)
    ca44:	e0bffd15 	stw	r2,-12(fp)
    ca48:	e0bffd17 	ldw	r2,-12(fp)
    ca4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    ca50:	0005883a 	mov	r2,zero
}
    ca54:	e037883a 	mov	sp,fp
    ca58:	dfc00117 	ldw	ra,4(sp)
    ca5c:	df000017 	ldw	fp,0(sp)
    ca60:	dec00204 	addi	sp,sp,8
    ca64:	f800283a 	ret

0000ca68 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    ca68:	defffc04 	addi	sp,sp,-16
    ca6c:	df000315 	stw	fp,12(sp)
    ca70:	df000304 	addi	fp,sp,12
    ca74:	e13ffd15 	stw	r4,-12(fp)
    ca78:	e17ffe15 	stw	r5,-8(fp)
    ca7c:	3005883a 	mov	r2,r6
    ca80:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    ca84:	e0bfff0b 	ldhu	r2,-4(fp)
    ca88:	1080004c 	andi	r2,r2,1
    ca8c:	10000d26 	beq	r2,zero,cac4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    ca90:	e0bfff0b 	ldhu	r2,-4(fp)
    ca94:	1080008c 	andi	r2,r2,2
    ca98:	10000a26 	beq	r2,zero,cac4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    ca9c:	00000706 	br	cabc <OS_TaskStkClr+0x54>
                size--;
    caa0:	e0bffe17 	ldw	r2,-8(fp)
    caa4:	10bfffc4 	addi	r2,r2,-1
    caa8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    caac:	e0bffd17 	ldw	r2,-12(fp)
    cab0:	10c00104 	addi	r3,r2,4
    cab4:	e0fffd15 	stw	r3,-12(fp)
    cab8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    cabc:	e0bffe17 	ldw	r2,-8(fp)
    cac0:	103ff71e 	bne	r2,zero,caa0 <__alt_mem_Flash_flash_data+0xf400caa0>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    cac4:	e037883a 	mov	sp,fp
    cac8:	df000017 	ldw	fp,0(sp)
    cacc:	dec00104 	addi	sp,sp,4
    cad0:	f800283a 	ret

0000cad4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    cad4:	defff904 	addi	sp,sp,-28
    cad8:	dfc00615 	stw	ra,24(sp)
    cadc:	df000515 	stw	fp,20(sp)
    cae0:	df000504 	addi	fp,sp,20
    cae4:	2005883a 	mov	r2,r4
    cae8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    caec:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    caf0:	00800074 	movhi	r2,1
    caf4:	1093f904 	addi	r2,r2,20452
    caf8:	10800003 	ldbu	r2,0(r2)
    cafc:	10803fcc 	andi	r2,r2,255
    cb00:	10000126 	beq	r2,zero,cb08 <OSTimeDly+0x34>
        return;
    cb04:	00004006 	br	cc08 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    cb08:	e0bfff0b 	ldhu	r2,-4(fp)
    cb0c:	10003e26 	beq	r2,zero,cc08 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb10:	0005303a 	rdctl	r2,status
    cb14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cb18:	e0fffd17 	ldw	r3,-12(fp)
    cb1c:	00bfff84 	movi	r2,-2
    cb20:	1884703a 	and	r2,r3,r2
    cb24:	1001703a 	wrctl	status,r2
  
  return context;
    cb28:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    cb2c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    cb30:	00800074 	movhi	r2,1
    cb34:	1093fa04 	addi	r2,r2,20456
    cb38:	10800017 	ldw	r2,0(r2)
    cb3c:	10800d03 	ldbu	r2,52(r2)
    cb40:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    cb44:	e0fffc03 	ldbu	r3,-16(fp)
    cb48:	e13ffc03 	ldbu	r4,-16(fp)
    cb4c:	00800074 	movhi	r2,1
    cb50:	1093f744 	addi	r2,r2,20445
    cb54:	1105883a 	add	r2,r2,r4
    cb58:	10800003 	ldbu	r2,0(r2)
    cb5c:	1009883a 	mov	r4,r2
    cb60:	00800074 	movhi	r2,1
    cb64:	1093fa04 	addi	r2,r2,20456
    cb68:	10800017 	ldw	r2,0(r2)
    cb6c:	10800d43 	ldbu	r2,53(r2)
    cb70:	0084303a 	nor	r2,zero,r2
    cb74:	2084703a 	and	r2,r4,r2
    cb78:	1009883a 	mov	r4,r2
    cb7c:	00800074 	movhi	r2,1
    cb80:	1093f744 	addi	r2,r2,20445
    cb84:	10c5883a 	add	r2,r2,r3
    cb88:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    cb8c:	e0fffc03 	ldbu	r3,-16(fp)
    cb90:	00800074 	movhi	r2,1
    cb94:	1093f744 	addi	r2,r2,20445
    cb98:	10c5883a 	add	r2,r2,r3
    cb9c:	10800003 	ldbu	r2,0(r2)
    cba0:	10803fcc 	andi	r2,r2,255
    cba4:	10000e1e 	bne	r2,zero,cbe0 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    cba8:	00800074 	movhi	r2,1
    cbac:	1093fa04 	addi	r2,r2,20456
    cbb0:	10800017 	ldw	r2,0(r2)
    cbb4:	10800d83 	ldbu	r2,54(r2)
    cbb8:	0084303a 	nor	r2,zero,r2
    cbbc:	1007883a 	mov	r3,r2
    cbc0:	00800074 	movhi	r2,1
    cbc4:	1093f704 	addi	r2,r2,20444
    cbc8:	10800003 	ldbu	r2,0(r2)
    cbcc:	1884703a 	and	r2,r3,r2
    cbd0:	1007883a 	mov	r3,r2
    cbd4:	00800074 	movhi	r2,1
    cbd8:	1093f704 	addi	r2,r2,20444
    cbdc:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    cbe0:	00800074 	movhi	r2,1
    cbe4:	1093fa04 	addi	r2,r2,20456
    cbe8:	10800017 	ldw	r2,0(r2)
    cbec:	e0ffff0b 	ldhu	r3,-4(fp)
    cbf0:	10c00b8d 	sth	r3,46(r2)
    cbf4:	e0bffb17 	ldw	r2,-20(fp)
    cbf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cbfc:	e0bffe17 	ldw	r2,-8(fp)
    cc00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    cc04:	0006cc40 	call	6cc4 <OS_Sched>
    }
}
    cc08:	e037883a 	mov	sp,fp
    cc0c:	dfc00117 	ldw	ra,4(sp)
    cc10:	df000017 	ldw	fp,0(sp)
    cc14:	dec00204 	addi	sp,sp,8
    cc18:	f800283a 	ret

0000cc1c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    cc1c:	defff804 	addi	sp,sp,-32
    cc20:	dfc00715 	stw	ra,28(sp)
    cc24:	df000615 	stw	fp,24(sp)
    cc28:	df000604 	addi	fp,sp,24
    cc2c:	2015883a 	mov	r10,r4
    cc30:	2809883a 	mov	r4,r5
    cc34:	3007883a 	mov	r3,r6
    cc38:	3805883a 	mov	r2,r7
    cc3c:	e2bffc05 	stb	r10,-16(fp)
    cc40:	e13ffd05 	stb	r4,-12(fp)
    cc44:	e0fffe05 	stb	r3,-8(fp)
    cc48:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    cc4c:	00800074 	movhi	r2,1
    cc50:	1093f904 	addi	r2,r2,20452
    cc54:	10800003 	ldbu	r2,0(r2)
    cc58:	10803fcc 	andi	r2,r2,255
    cc5c:	10000226 	beq	r2,zero,cc68 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    cc60:	00801544 	movi	r2,85
    cc64:	00004206 	br	cd70 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    cc68:	e0bffc03 	ldbu	r2,-16(fp)
    cc6c:	1000081e 	bne	r2,zero,cc90 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    cc70:	e0bffd03 	ldbu	r2,-12(fp)
    cc74:	1000061e 	bne	r2,zero,cc90 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    cc78:	e0bffe03 	ldbu	r2,-8(fp)
    cc7c:	1000041e 	bne	r2,zero,cc90 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    cc80:	e0bfff0b 	ldhu	r2,-4(fp)
    cc84:	1000021e 	bne	r2,zero,cc90 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    cc88:	00801504 	movi	r2,84
    cc8c:	00003806 	br	cd70 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    cc90:	e0bffd03 	ldbu	r2,-12(fp)
    cc94:	10800f30 	cmpltui	r2,r2,60
    cc98:	1000021e 	bne	r2,zero,cca4 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    cc9c:	00801444 	movi	r2,81
    cca0:	00003306 	br	cd70 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    cca4:	e0bffe03 	ldbu	r2,-8(fp)
    cca8:	10800f30 	cmpltui	r2,r2,60
    ccac:	1000021e 	bne	r2,zero,ccb8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    ccb0:	00801484 	movi	r2,82
    ccb4:	00002e06 	br	cd70 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    ccb8:	e0bfff0b 	ldhu	r2,-4(fp)
    ccbc:	1080fa30 	cmpltui	r2,r2,1000
    ccc0:	1000021e 	bne	r2,zero,cccc <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    ccc4:	008014c4 	movi	r2,83
    ccc8:	00002906 	br	cd70 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    cccc:	e0bffc03 	ldbu	r2,-16(fp)
    ccd0:	10c38424 	muli	r3,r2,3600
    ccd4:	e0bffd03 	ldbu	r2,-12(fp)
    ccd8:	10800f24 	muli	r2,r2,60
    ccdc:	1887883a 	add	r3,r3,r2
    cce0:	e0bffe03 	ldbu	r2,-8(fp)
    cce4:	1885883a 	add	r2,r3,r2
    cce8:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    ccec:	e0bfff0b 	ldhu	r2,-4(fp)
    ccf0:	10800f84 	addi	r2,r2,62
    ccf4:	100690fa 	slli	r3,r2,3
    ccf8:	008418b4 	movhi	r2,4194
    ccfc:	109374c4 	addi	r2,r2,19923
    cd00:	188a383a 	mulxuu	r5,r3,r2
    cd04:	1885383a 	mul	r2,r3,r2
    cd08:	1011883a 	mov	r8,r2
    cd0c:	2813883a 	mov	r9,r5
    cd10:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    cd14:	2085883a 	add	r2,r4,r2
    cd18:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    cd1c:	e0bffb17 	ldw	r2,-20(fp)
    cd20:	1004d43a 	srli	r2,r2,16
    cd24:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    cd28:	e0bffb17 	ldw	r2,-20(fp)
    cd2c:	10bfffcc 	andi	r2,r2,65535
    cd30:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    cd34:	e0bffb17 	ldw	r2,-20(fp)
    cd38:	10bfffcc 	andi	r2,r2,65535
    cd3c:	1009883a 	mov	r4,r2
    cd40:	000cad40 	call	cad4 <OSTimeDly>
    while (loops > 0) {
    cd44:	00000706 	br	cd64 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    cd48:	01200014 	movui	r4,32768
    cd4c:	000cad40 	call	cad4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    cd50:	01200014 	movui	r4,32768
    cd54:	000cad40 	call	cad4 <OSTimeDly>
        loops--;
    cd58:	e0bffa0b 	ldhu	r2,-24(fp)
    cd5c:	10bfffc4 	addi	r2,r2,-1
    cd60:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    cd64:	e0bffa0b 	ldhu	r2,-24(fp)
    cd68:	103ff71e 	bne	r2,zero,cd48 <__alt_mem_Flash_flash_data+0xf400cd48>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    cd6c:	0005883a 	mov	r2,zero
}
    cd70:	e037883a 	mov	sp,fp
    cd74:	dfc00117 	ldw	ra,4(sp)
    cd78:	df000017 	ldw	fp,0(sp)
    cd7c:	dec00204 	addi	sp,sp,8
    cd80:	f800283a 	ret

0000cd84 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    cd84:	defff504 	addi	sp,sp,-44
    cd88:	dfc00a15 	stw	ra,40(sp)
    cd8c:	df000915 	stw	fp,36(sp)
    cd90:	df000904 	addi	fp,sp,36
    cd94:	2005883a 	mov	r2,r4
    cd98:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    cd9c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    cda0:	e0bfff03 	ldbu	r2,-4(fp)
    cda4:	10800530 	cmpltui	r2,r2,20
    cda8:	1000021e 	bne	r2,zero,cdb4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    cdac:	00800a84 	movi	r2,42
    cdb0:	00006b06 	br	cf60 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cdb4:	0005303a 	rdctl	r2,status
    cdb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cdbc:	e0fff917 	ldw	r3,-28(fp)
    cdc0:	00bfff84 	movi	r2,-2
    cdc4:	1884703a 	and	r2,r3,r2
    cdc8:	1001703a 	wrctl	status,r2
  
  return context;
    cdcc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    cdd0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    cdd4:	e0ffff03 	ldbu	r3,-4(fp)
    cdd8:	008000b4 	movhi	r2,2
    cddc:	10888104 	addi	r2,r2,8708
    cde0:	18c7883a 	add	r3,r3,r3
    cde4:	18c7883a 	add	r3,r3,r3
    cde8:	10c5883a 	add	r2,r2,r3
    cdec:	10800017 	ldw	r2,0(r2)
    cdf0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    cdf4:	e0bff817 	ldw	r2,-32(fp)
    cdf8:	1000061e 	bne	r2,zero,ce14 <OSTimeDlyResume+0x90>
    cdfc:	e0bff717 	ldw	r2,-36(fp)
    ce00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce04:	e0bffa17 	ldw	r2,-24(fp)
    ce08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    ce0c:	008010c4 	movi	r2,67
    ce10:	00005306 	br	cf60 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    ce14:	e0bff817 	ldw	r2,-32(fp)
    ce18:	10800058 	cmpnei	r2,r2,1
    ce1c:	1000061e 	bne	r2,zero,ce38 <OSTimeDlyResume+0xb4>
    ce20:	e0bff717 	ldw	r2,-36(fp)
    ce24:	e0bffb15 	stw	r2,-20(fp)
    ce28:	e0bffb17 	ldw	r2,-20(fp)
    ce2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    ce30:	008010c4 	movi	r2,67
    ce34:	00004a06 	br	cf60 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    ce38:	e0bff817 	ldw	r2,-32(fp)
    ce3c:	10800b8b 	ldhu	r2,46(r2)
    ce40:	10bfffcc 	andi	r2,r2,65535
    ce44:	1000061e 	bne	r2,zero,ce60 <OSTimeDlyResume+0xdc>
    ce48:	e0bff717 	ldw	r2,-36(fp)
    ce4c:	e0bffc15 	stw	r2,-16(fp)
    ce50:	e0bffc17 	ldw	r2,-16(fp)
    ce54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    ce58:	00801404 	movi	r2,80
    ce5c:	00004006 	br	cf60 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    ce60:	e0bff817 	ldw	r2,-32(fp)
    ce64:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ce68:	e0bff817 	ldw	r2,-32(fp)
    ce6c:	10800c03 	ldbu	r2,48(r2)
    ce70:	10803fcc 	andi	r2,r2,255
    ce74:	10800dcc 	andi	r2,r2,55
    ce78:	10000b26 	beq	r2,zero,cea8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    ce7c:	e0bff817 	ldw	r2,-32(fp)
    ce80:	10c00c03 	ldbu	r3,48(r2)
    ce84:	00bff204 	movi	r2,-56
    ce88:	1884703a 	and	r2,r3,r2
    ce8c:	1007883a 	mov	r3,r2
    ce90:	e0bff817 	ldw	r2,-32(fp)
    ce94:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    ce98:	e0bff817 	ldw	r2,-32(fp)
    ce9c:	00c00044 	movi	r3,1
    cea0:	10c00c45 	stb	r3,49(r2)
    cea4:	00000206 	br	ceb0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    cea8:	e0bff817 	ldw	r2,-32(fp)
    ceac:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    ceb0:	e0bff817 	ldw	r2,-32(fp)
    ceb4:	10800c03 	ldbu	r2,48(r2)
    ceb8:	10803fcc 	andi	r2,r2,255
    cebc:	1080020c 	andi	r2,r2,8
    cec0:	1000221e 	bne	r2,zero,cf4c <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    cec4:	e0bff817 	ldw	r2,-32(fp)
    cec8:	10c00d83 	ldbu	r3,54(r2)
    cecc:	00800074 	movhi	r2,1
    ced0:	1093f704 	addi	r2,r2,20444
    ced4:	10800003 	ldbu	r2,0(r2)
    ced8:	1884b03a 	or	r2,r3,r2
    cedc:	1007883a 	mov	r3,r2
    cee0:	00800074 	movhi	r2,1
    cee4:	1093f704 	addi	r2,r2,20444
    cee8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ceec:	e0bff817 	ldw	r2,-32(fp)
    cef0:	10800d03 	ldbu	r2,52(r2)
    cef4:	10c03fcc 	andi	r3,r2,255
    cef8:	e0bff817 	ldw	r2,-32(fp)
    cefc:	10800d03 	ldbu	r2,52(r2)
    cf00:	11003fcc 	andi	r4,r2,255
    cf04:	00800074 	movhi	r2,1
    cf08:	1093f744 	addi	r2,r2,20445
    cf0c:	1105883a 	add	r2,r2,r4
    cf10:	11000003 	ldbu	r4,0(r2)
    cf14:	e0bff817 	ldw	r2,-32(fp)
    cf18:	10800d43 	ldbu	r2,53(r2)
    cf1c:	2084b03a 	or	r2,r4,r2
    cf20:	1009883a 	mov	r4,r2
    cf24:	00800074 	movhi	r2,1
    cf28:	1093f744 	addi	r2,r2,20445
    cf2c:	10c5883a 	add	r2,r2,r3
    cf30:	11000005 	stb	r4,0(r2)
    cf34:	e0bff717 	ldw	r2,-36(fp)
    cf38:	e0bffd15 	stw	r2,-12(fp)
    cf3c:	e0bffd17 	ldw	r2,-12(fp)
    cf40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    cf44:	0006cc40 	call	6cc4 <OS_Sched>
    cf48:	00000406 	br	cf5c <OSTimeDlyResume+0x1d8>
    cf4c:	e0bff717 	ldw	r2,-36(fp)
    cf50:	e0bffe15 	stw	r2,-8(fp)
    cf54:	e0bffe17 	ldw	r2,-8(fp)
    cf58:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    cf5c:	0005883a 	mov	r2,zero
}
    cf60:	e037883a 	mov	sp,fp
    cf64:	dfc00117 	ldw	ra,4(sp)
    cf68:	df000017 	ldw	fp,0(sp)
    cf6c:	dec00204 	addi	sp,sp,8
    cf70:	f800283a 	ret

0000cf74 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    cf74:	defffb04 	addi	sp,sp,-20
    cf78:	df000415 	stw	fp,16(sp)
    cf7c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cf80:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf84:	0005303a 	rdctl	r2,status
    cf88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf8c:	e0fffe17 	ldw	r3,-8(fp)
    cf90:	00bfff84 	movi	r2,-2
    cf94:	1884703a 	and	r2,r3,r2
    cf98:	1001703a 	wrctl	status,r2
  
  return context;
    cf9c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    cfa0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    cfa4:	00800074 	movhi	r2,1
    cfa8:	1093fb04 	addi	r2,r2,20460
    cfac:	10800017 	ldw	r2,0(r2)
    cfb0:	e0bffd15 	stw	r2,-12(fp)
    cfb4:	e0bffc17 	ldw	r2,-16(fp)
    cfb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cfbc:	e0bfff17 	ldw	r2,-4(fp)
    cfc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    cfc4:	e0bffd17 	ldw	r2,-12(fp)
}
    cfc8:	e037883a 	mov	sp,fp
    cfcc:	df000017 	ldw	fp,0(sp)
    cfd0:	dec00104 	addi	sp,sp,4
    cfd4:	f800283a 	ret

0000cfd8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    cfd8:	defffb04 	addi	sp,sp,-20
    cfdc:	df000415 	stw	fp,16(sp)
    cfe0:	df000404 	addi	fp,sp,16
    cfe4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    cfe8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cfec:	0005303a 	rdctl	r2,status
    cff0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cff4:	e0fffd17 	ldw	r3,-12(fp)
    cff8:	00bfff84 	movi	r2,-2
    cffc:	1884703a 	and	r2,r3,r2
    d000:	1001703a 	wrctl	status,r2
  
  return context;
    d004:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    d008:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    d00c:	00800074 	movhi	r2,1
    d010:	1093fb04 	addi	r2,r2,20460
    d014:	e0ffff17 	ldw	r3,-4(fp)
    d018:	10c00015 	stw	r3,0(r2)
    d01c:	e0bffc17 	ldw	r2,-16(fp)
    d020:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d024:	e0bffe17 	ldw	r2,-8(fp)
    d028:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    d02c:	e037883a 	mov	sp,fp
    d030:	df000017 	ldw	fp,0(sp)
    d034:	dec00104 	addi	sp,sp,4
    d038:	f800283a 	ret

0000d03c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d03c:	defffd04 	addi	sp,sp,-12
    d040:	dfc00215 	stw	ra,8(sp)
    d044:	df000115 	stw	fp,4(sp)
    d048:	df000104 	addi	fp,sp,4
    d04c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d050:	e13fff17 	ldw	r4,-4(fp)
    d054:	01400074 	movhi	r5,1
    d058:	294bf404 	addi	r5,r5,12240
    d05c:	000fa100 	call	fa10 <alt_dev_llist_insert>
}
    d060:	e037883a 	mov	sp,fp
    d064:	dfc00117 	ldw	ra,4(sp)
    d068:	df000017 	ldw	fp,0(sp)
    d06c:	dec00204 	addi	sp,sp,8
    d070:	f800283a 	ret

0000d074 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d074:	defffd04 	addi	sp,sp,-12
    d078:	dfc00215 	stw	ra,8(sp)
    d07c:	df000115 	stw	fp,4(sp)
    d080:	df000104 	addi	fp,sp,4
    d084:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    d088:	00103240 	call	10324 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d08c:	00800044 	movi	r2,1
    d090:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d094:	e037883a 	mov	sp,fp
    d098:	dfc00117 	ldw	ra,4(sp)
    d09c:	df000017 	ldw	fp,0(sp)
    d0a0:	dec00204 	addi	sp,sp,8
    d0a4:	f800283a 	ret

0000d0a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d0a8:	defffd04 	addi	sp,sp,-12
    d0ac:	dfc00215 	stw	ra,8(sp)
    d0b0:	df000115 	stw	fp,4(sp)
    d0b4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d0b8:	01040034 	movhi	r4,4096
    d0bc:	21080004 	addi	r4,r4,8192
    d0c0:	000b883a 	mov	r5,zero
    d0c4:	000d883a 	mov	r6,zero
    d0c8:	01c00204 	movi	r7,8
    d0cc:	000e21c0 	call	e21c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d0d0:	01000074 	movhi	r4,1
    d0d4:	2106ee04 	addi	r4,r4,7096
    d0d8:	000b883a 	mov	r5,zero
    d0dc:	01800204 	movi	r6,8
    d0e0:	000d5e40 	call	d5e4 <altera_avalon_jtag_uart_init>
    d0e4:	01000074 	movhi	r4,1
    d0e8:	2106e404 	addi	r4,r4,7056
    d0ec:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    d0f0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    d0f4:	01000074 	movhi	r4,1
    d0f8:	210aff04 	addi	r4,r4,11260
    d0fc:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    d100:	01000074 	movhi	r4,1
    d104:	210b0b04 	addi	r4,r4,11308
    d108:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d10c:	01000074 	movhi	r4,1
    d110:	210b1704 	addi	r4,r4,11356
    d114:	000e34c0 	call	e34c <alt_up_character_lcd_init>
    d118:	01000074 	movhi	r4,1
    d11c:	210b1704 	addi	r4,r4,11356
    d120:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    d124:	01000074 	movhi	r4,1
    d128:	210b2204 	addi	r4,r4,11400
    d12c:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    d130:	01000074 	movhi	r4,1
    d134:	210b2d04 	addi	r4,r4,11444
    d138:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    d13c:	01000074 	movhi	r4,1
    d140:	210b3804 	addi	r4,r4,11488
    d144:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    d148:	01000074 	movhi	r4,1
    d14c:	210b4304 	addi	r4,r4,11532
    d150:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    d154:	01000074 	movhi	r4,1
    d158:	210b4e04 	addi	r4,r4,11576
    d15c:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    d160:	01000074 	movhi	r4,1
    d164:	210b5904 	addi	r4,r4,11620
    d168:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    d16c:	01000074 	movhi	r4,1
    d170:	210b6404 	addi	r4,r4,11664
    d174:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    d178:	01000074 	movhi	r4,1
    d17c:	210b6f04 	addi	r4,r4,11708
    d180:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    d184:	01000074 	movhi	r4,1
    d188:	210b7a04 	addi	r4,r4,11752
    d18c:	000ec640 	call	ec64 <alt_up_ps2_init>
    d190:	01000074 	movhi	r4,1
    d194:	210b7a04 	addi	r4,r4,11752
    d198:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    d19c:	01000074 	movhi	r4,1
    d1a0:	210b8804 	addi	r4,r4,11808
    d1a4:	000ec640 	call	ec64 <alt_up_ps2_init>
    d1a8:	01000074 	movhi	r4,1
    d1ac:	210b8804 	addi	r4,r4,11808
    d1b0:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    d1b4:	01000074 	movhi	r4,1
    d1b8:	210b9604 	addi	r4,r4,11864
    d1bc:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    d1c0:	01000074 	movhi	r4,1
    d1c4:	210ba104 	addi	r4,r4,11908
    d1c8:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    d1cc:	00800074 	movhi	r2,1
    d1d0:	108bae04 	addi	r2,r2,11960
    d1d4:	10800a17 	ldw	r2,40(r2)
    d1d8:	10800104 	addi	r2,r2,4
    d1dc:	10800017 	ldw	r2,0(r2)
    d1e0:	10ffffcc 	andi	r3,r2,65535
    d1e4:	00800074 	movhi	r2,1
    d1e8:	108bae04 	addi	r2,r2,11960
    d1ec:	10c00c15 	stw	r3,48(r2)
    d1f0:	00800074 	movhi	r2,1
    d1f4:	108bae04 	addi	r2,r2,11960
    d1f8:	10800a17 	ldw	r2,40(r2)
    d1fc:	10800104 	addi	r2,r2,4
    d200:	10800017 	ldw	r2,0(r2)
    d204:	1006d43a 	srli	r3,r2,16
    d208:	00800074 	movhi	r2,1
    d20c:	108bae04 	addi	r2,r2,11960
    d210:	10c00d15 	stw	r3,52(r2)
    d214:	00800074 	movhi	r2,1
    d218:	108bae04 	addi	r2,r2,11960
    d21c:	10800c17 	ldw	r2,48(r2)
    d220:	10801068 	cmpgeui	r2,r2,65
    d224:	1000081e 	bne	r2,zero,d248 <alt_sys_init+0x1a0>
    d228:	00800074 	movhi	r2,1
    d22c:	108bae04 	addi	r2,r2,11960
    d230:	00c00fc4 	movi	r3,63
    d234:	10c00f15 	stw	r3,60(r2)
    d238:	00800074 	movhi	r2,1
    d23c:	108bae04 	addi	r2,r2,11960
    d240:	00c00184 	movi	r3,6
    d244:	10c01015 	stw	r3,64(r2)
    d248:	00800074 	movhi	r2,1
    d24c:	108bae04 	addi	r2,r2,11960
    d250:	10800d17 	ldw	r2,52(r2)
    d254:	10800868 	cmpgeui	r2,r2,33
    d258:	1000041e 	bne	r2,zero,d26c <alt_sys_init+0x1c4>
    d25c:	00800074 	movhi	r2,1
    d260:	108bae04 	addi	r2,r2,11960
    d264:	00c007c4 	movi	r3,31
    d268:	10c01115 	stw	r3,68(r2)
    d26c:	01000074 	movhi	r4,1
    d270:	210bae04 	addi	r4,r4,11960
    d274:	000f57c0 	call	f57c <alt_up_char_buffer_init>
    d278:	01000074 	movhi	r4,1
    d27c:	210bae04 	addi	r4,r4,11960
    d280:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    d284:	00800074 	movhi	r2,1
    d288:	108bc004 	addi	r2,r2,12032
    d28c:	10800a17 	ldw	r2,40(r2)
    d290:	10800017 	ldw	r2,0(r2)
    d294:	1007883a 	mov	r3,r2
    d298:	00800074 	movhi	r2,1
    d29c:	108bc004 	addi	r2,r2,12032
    d2a0:	10c00b15 	stw	r3,44(r2)
    d2a4:	00800074 	movhi	r2,1
    d2a8:	108bc004 	addi	r2,r2,12032
    d2ac:	10800a17 	ldw	r2,40(r2)
    d2b0:	10800104 	addi	r2,r2,4
    d2b4:	10800017 	ldw	r2,0(r2)
    d2b8:	1007883a 	mov	r3,r2
    d2bc:	00800074 	movhi	r2,1
    d2c0:	108bc004 	addi	r2,r2,12032
    d2c4:	10c00c15 	stw	r3,48(r2)
    d2c8:	00800074 	movhi	r2,1
    d2cc:	108bc004 	addi	r2,r2,12032
    d2d0:	10800a17 	ldw	r2,40(r2)
    d2d4:	10800204 	addi	r2,r2,8
    d2d8:	10800017 	ldw	r2,0(r2)
    d2dc:	10ffffcc 	andi	r3,r2,65535
    d2e0:	00800074 	movhi	r2,1
    d2e4:	108bc004 	addi	r2,r2,12032
    d2e8:	10c00f15 	stw	r3,60(r2)
    d2ec:	00800074 	movhi	r2,1
    d2f0:	108bc004 	addi	r2,r2,12032
    d2f4:	10800a17 	ldw	r2,40(r2)
    d2f8:	10800204 	addi	r2,r2,8
    d2fc:	10800017 	ldw	r2,0(r2)
    d300:	1006d43a 	srli	r3,r2,16
    d304:	00800074 	movhi	r2,1
    d308:	108bc004 	addi	r2,r2,12032
    d30c:	10c01015 	stw	r3,64(r2)
    d310:	00800074 	movhi	r2,1
    d314:	108bc004 	addi	r2,r2,12032
    d318:	10800a17 	ldw	r2,40(r2)
    d31c:	10800304 	addi	r2,r2,12
    d320:	10800017 	ldw	r2,0(r2)
    d324:	1005d07a 	srai	r2,r2,1
    d328:	10c0004c 	andi	r3,r2,1
    d32c:	00800074 	movhi	r2,1
    d330:	108bc004 	addi	r2,r2,12032
    d334:	10c00d15 	stw	r3,52(r2)
    d338:	00800074 	movhi	r2,1
    d33c:	108bc004 	addi	r2,r2,12032
    d340:	10800a17 	ldw	r2,40(r2)
    d344:	10800304 	addi	r2,r2,12
    d348:	10800017 	ldw	r2,0(r2)
    d34c:	1005d13a 	srai	r2,r2,4
    d350:	10c003cc 	andi	r3,r2,15
    d354:	00800074 	movhi	r2,1
    d358:	108bc004 	addi	r2,r2,12032
    d35c:	10c00e15 	stw	r3,56(r2)
    d360:	00800074 	movhi	r2,1
    d364:	108bc004 	addi	r2,r2,12032
    d368:	10800a17 	ldw	r2,40(r2)
    d36c:	10800304 	addi	r2,r2,12
    d370:	10800017 	ldw	r2,0(r2)
    d374:	1005d43a 	srai	r2,r2,16
    d378:	e0bfff05 	stb	r2,-4(fp)
    d37c:	00800074 	movhi	r2,1
    d380:	108bc004 	addi	r2,r2,12032
    d384:	10800a17 	ldw	r2,40(r2)
    d388:	10800304 	addi	r2,r2,12
    d38c:	10800017 	ldw	r2,0(r2)
    d390:	1004d63a 	srli	r2,r2,24
    d394:	e0bfff45 	stb	r2,-3(fp)
    d398:	00800074 	movhi	r2,1
    d39c:	108bc004 	addi	r2,r2,12032
    d3a0:	10800e17 	ldw	r2,56(r2)
    d3a4:	10800058 	cmpnei	r2,r2,1
    d3a8:	1000041e 	bne	r2,zero,d3bc <alt_sys_init+0x314>
    d3ac:	00800074 	movhi	r2,1
    d3b0:	108bc004 	addi	r2,r2,12032
    d3b4:	10001115 	stw	zero,68(r2)
    d3b8:	00000e06 	br	d3f4 <alt_sys_init+0x34c>
    d3bc:	00800074 	movhi	r2,1
    d3c0:	108bc004 	addi	r2,r2,12032
    d3c4:	10800e17 	ldw	r2,56(r2)
    d3c8:	10800098 	cmpnei	r2,r2,2
    d3cc:	1000051e 	bne	r2,zero,d3e4 <alt_sys_init+0x33c>
    d3d0:	00800074 	movhi	r2,1
    d3d4:	108bc004 	addi	r2,r2,12032
    d3d8:	00c00044 	movi	r3,1
    d3dc:	10c01115 	stw	r3,68(r2)
    d3e0:	00000406 	br	d3f4 <alt_sys_init+0x34c>
    d3e4:	00800074 	movhi	r2,1
    d3e8:	108bc004 	addi	r2,r2,12032
    d3ec:	00c00084 	movi	r3,2
    d3f0:	10c01115 	stw	r3,68(r2)
    d3f4:	e0bfff03 	ldbu	r2,-4(fp)
    d3f8:	00c00804 	movi	r3,32
    d3fc:	1885c83a 	sub	r2,r3,r2
    d400:	00ffffc4 	movi	r3,-1
    d404:	1886d83a 	srl	r3,r3,r2
    d408:	00800074 	movhi	r2,1
    d40c:	108bc004 	addi	r2,r2,12032
    d410:	10c01215 	stw	r3,72(r2)
    d414:	e0ffff03 	ldbu	r3,-4(fp)
    d418:	00800074 	movhi	r2,1
    d41c:	108bc004 	addi	r2,r2,12032
    d420:	10801117 	ldw	r2,68(r2)
    d424:	1887883a 	add	r3,r3,r2
    d428:	00800074 	movhi	r2,1
    d42c:	108bc004 	addi	r2,r2,12032
    d430:	10c01315 	stw	r3,76(r2)
    d434:	e0bfff43 	ldbu	r2,-3(fp)
    d438:	00c00804 	movi	r3,32
    d43c:	1885c83a 	sub	r2,r3,r2
    d440:	00ffffc4 	movi	r3,-1
    d444:	1886d83a 	srl	r3,r3,r2
    d448:	00800074 	movhi	r2,1
    d44c:	108bc004 	addi	r2,r2,12032
    d450:	10c01415 	stw	r3,80(r2)
    d454:	01000074 	movhi	r4,1
    d458:	210bc004 	addi	r4,r4,12032
    d45c:	000d03c0 	call	d03c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    d460:	01000074 	movhi	r4,1
    d464:	210bd504 	addi	r4,r4,12116
    d468:	000d03c0 	call	d03c <alt_dev_reg>
}
    d46c:	e037883a 	mov	sp,fp
    d470:	dfc00117 	ldw	ra,4(sp)
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00204 	addi	sp,sp,8
    d47c:	f800283a 	ret

0000d480 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d480:	defffa04 	addi	sp,sp,-24
    d484:	dfc00515 	stw	ra,20(sp)
    d488:	df000415 	stw	fp,16(sp)
    d48c:	df000404 	addi	fp,sp,16
    d490:	e13ffd15 	stw	r4,-12(fp)
    d494:	e17ffe15 	stw	r5,-8(fp)
    d498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d49c:	e0bffd17 	ldw	r2,-12(fp)
    d4a0:	10800017 	ldw	r2,0(r2)
    d4a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d4a8:	e0bffc17 	ldw	r2,-16(fp)
    d4ac:	10c00a04 	addi	r3,r2,40
    d4b0:	e0bffd17 	ldw	r2,-12(fp)
    d4b4:	10800217 	ldw	r2,8(r2)
    d4b8:	1809883a 	mov	r4,r3
    d4bc:	e17ffe17 	ldw	r5,-8(fp)
    d4c0:	e1bfff17 	ldw	r6,-4(fp)
    d4c4:	100f883a 	mov	r7,r2
    d4c8:	000dc300 	call	dc30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d4cc:	e037883a 	mov	sp,fp
    d4d0:	dfc00117 	ldw	ra,4(sp)
    d4d4:	df000017 	ldw	fp,0(sp)
    d4d8:	dec00204 	addi	sp,sp,8
    d4dc:	f800283a 	ret

0000d4e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d4e0:	defffa04 	addi	sp,sp,-24
    d4e4:	dfc00515 	stw	ra,20(sp)
    d4e8:	df000415 	stw	fp,16(sp)
    d4ec:	df000404 	addi	fp,sp,16
    d4f0:	e13ffd15 	stw	r4,-12(fp)
    d4f4:	e17ffe15 	stw	r5,-8(fp)
    d4f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d4fc:	e0bffd17 	ldw	r2,-12(fp)
    d500:	10800017 	ldw	r2,0(r2)
    d504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d508:	e0bffc17 	ldw	r2,-16(fp)
    d50c:	10c00a04 	addi	r3,r2,40
    d510:	e0bffd17 	ldw	r2,-12(fp)
    d514:	10800217 	ldw	r2,8(r2)
    d518:	1809883a 	mov	r4,r3
    d51c:	e17ffe17 	ldw	r5,-8(fp)
    d520:	e1bfff17 	ldw	r6,-4(fp)
    d524:	100f883a 	mov	r7,r2
    d528:	000dee40 	call	dee4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d52c:	e037883a 	mov	sp,fp
    d530:	dfc00117 	ldw	ra,4(sp)
    d534:	df000017 	ldw	fp,0(sp)
    d538:	dec00204 	addi	sp,sp,8
    d53c:	f800283a 	ret

0000d540 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d540:	defffc04 	addi	sp,sp,-16
    d544:	dfc00315 	stw	ra,12(sp)
    d548:	df000215 	stw	fp,8(sp)
    d54c:	df000204 	addi	fp,sp,8
    d550:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d554:	e0bfff17 	ldw	r2,-4(fp)
    d558:	10800017 	ldw	r2,0(r2)
    d55c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d560:	e0bffe17 	ldw	r2,-8(fp)
    d564:	10c00a04 	addi	r3,r2,40
    d568:	e0bfff17 	ldw	r2,-4(fp)
    d56c:	10800217 	ldw	r2,8(r2)
    d570:	1809883a 	mov	r4,r3
    d574:	100b883a 	mov	r5,r2
    d578:	000dadc0 	call	dadc <altera_avalon_jtag_uart_close>
}
    d57c:	e037883a 	mov	sp,fp
    d580:	dfc00117 	ldw	ra,4(sp)
    d584:	df000017 	ldw	fp,0(sp)
    d588:	dec00204 	addi	sp,sp,8
    d58c:	f800283a 	ret

0000d590 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d590:	defffa04 	addi	sp,sp,-24
    d594:	dfc00515 	stw	ra,20(sp)
    d598:	df000415 	stw	fp,16(sp)
    d59c:	df000404 	addi	fp,sp,16
    d5a0:	e13ffd15 	stw	r4,-12(fp)
    d5a4:	e17ffe15 	stw	r5,-8(fp)
    d5a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d5ac:	e0bffd17 	ldw	r2,-12(fp)
    d5b0:	10800017 	ldw	r2,0(r2)
    d5b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d5b8:	e0bffc17 	ldw	r2,-16(fp)
    d5bc:	10800a04 	addi	r2,r2,40
    d5c0:	1009883a 	mov	r4,r2
    d5c4:	e17ffe17 	ldw	r5,-8(fp)
    d5c8:	e1bfff17 	ldw	r6,-4(fp)
    d5cc:	000db440 	call	db44 <altera_avalon_jtag_uart_ioctl>
}
    d5d0:	e037883a 	mov	sp,fp
    d5d4:	dfc00117 	ldw	ra,4(sp)
    d5d8:	df000017 	ldw	fp,0(sp)
    d5dc:	dec00204 	addi	sp,sp,8
    d5e0:	f800283a 	ret

0000d5e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d5e4:	defff104 	addi	sp,sp,-60
    d5e8:	dfc00e15 	stw	ra,56(sp)
    d5ec:	df000d15 	stw	fp,52(sp)
    d5f0:	df000d04 	addi	fp,sp,52
    d5f4:	e13ff915 	stw	r4,-28(fp)
    d5f8:	e17ffa15 	stw	r5,-24(fp)
    d5fc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    d600:	e0bff917 	ldw	r2,-28(fp)
    d604:	10800c04 	addi	r2,r2,48
    d608:	e0bff315 	stw	r2,-52(fp)
    d60c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    d610:	e0fff40b 	ldhu	r3,-48(fp)
    d614:	e0bff884 	addi	r2,fp,-30
    d618:	1809883a 	mov	r4,r3
    d61c:	100b883a 	mov	r5,r2
    d620:	00078300 	call	7830 <OSFlagCreate>
    d624:	1007883a 	mov	r3,r2
    d628:	e0bff317 	ldw	r2,-52(fp)
    d62c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    d630:	e0bff917 	ldw	r2,-28(fp)
    d634:	10800a04 	addi	r2,r2,40
    d638:	e0bff515 	stw	r2,-44(fp)
    d63c:	00800044 	movi	r2,1
    d640:	e0bff60d 	sth	r2,-40(fp)
    d644:	e0bff60b 	ldhu	r2,-40(fp)
    d648:	1009883a 	mov	r4,r2
    d64c:	000a7880 	call	a788 <OSSemCreate>
    d650:	1007883a 	mov	r3,r2
    d654:	e0bff517 	ldw	r2,-44(fp)
    d658:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    d65c:	e0bff917 	ldw	r2,-28(fp)
    d660:	10800b04 	addi	r2,r2,44
    d664:	e0bff715 	stw	r2,-36(fp)
    d668:	00800044 	movi	r2,1
    d66c:	e0bff80d 	sth	r2,-32(fp)
    d670:	e0bff80b 	ldhu	r2,-32(fp)
    d674:	1009883a 	mov	r4,r2
    d678:	000a7880 	call	a788 <OSSemCreate>
    d67c:	1007883a 	mov	r3,r2
    d680:	e0bff717 	ldw	r2,-36(fp)
    d684:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d688:	e0bff917 	ldw	r2,-28(fp)
    d68c:	00c00044 	movi	r3,1
    d690:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d694:	e0bff917 	ldw	r2,-28(fp)
    d698:	10800017 	ldw	r2,0(r2)
    d69c:	10800104 	addi	r2,r2,4
    d6a0:	1007883a 	mov	r3,r2
    d6a4:	e0bff917 	ldw	r2,-28(fp)
    d6a8:	10800817 	ldw	r2,32(r2)
    d6ac:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    d6b0:	e0bffb17 	ldw	r2,-20(fp)
    d6b4:	1009883a 	mov	r4,r2
    d6b8:	e17ff917 	ldw	r5,-28(fp)
    d6bc:	01800074 	movhi	r6,1
    d6c0:	31b5c904 	addi	r6,r6,-10460
    d6c4:	000fd640 	call	fd64 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d6c8:	e0bff917 	ldw	r2,-28(fp)
    d6cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d6d0:	e0bff917 	ldw	r2,-28(fp)
    d6d4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d6d8:	00800074 	movhi	r2,1
    d6dc:	10940004 	addi	r2,r2,20480
    d6e0:	10800017 	ldw	r2,0(r2)
    d6e4:	1809883a 	mov	r4,r3
    d6e8:	100b883a 	mov	r5,r2
    d6ec:	01800074 	movhi	r6,1
    d6f0:	31b67304 	addi	r6,r6,-9780
    d6f4:	e1fff917 	ldw	r7,-28(fp)
    d6f8:	000f8640 	call	f864 <alt_alarm_start>
    d6fc:	1000040e 	bge	r2,zero,d710 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d700:	e0fff917 	ldw	r3,-28(fp)
    d704:	00a00034 	movhi	r2,32768
    d708:	10bfffc4 	addi	r2,r2,-1
    d70c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d710:	e037883a 	mov	sp,fp
    d714:	dfc00117 	ldw	ra,4(sp)
    d718:	df000017 	ldw	fp,0(sp)
    d71c:	dec00204 	addi	sp,sp,8
    d720:	f800283a 	ret

0000d724 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d724:	defff104 	addi	sp,sp,-60
    d728:	dfc00e15 	stw	ra,56(sp)
    d72c:	df000d15 	stw	fp,52(sp)
    d730:	df000d04 	addi	fp,sp,52
    d734:	e13ffe15 	stw	r4,-8(fp)
    d738:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d73c:	e0bffe17 	ldw	r2,-8(fp)
    d740:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    d744:	e0bff517 	ldw	r2,-44(fp)
    d748:	10800017 	ldw	r2,0(r2)
    d74c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d750:	e0bff617 	ldw	r2,-40(fp)
    d754:	10800104 	addi	r2,r2,4
    d758:	10800037 	ldwio	r2,0(r2)
    d75c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d760:	e0bff717 	ldw	r2,-36(fp)
    d764:	1080c00c 	andi	r2,r2,768
    d768:	1000011e 	bne	r2,zero,d770 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    d76c:	00009206 	br	d9b8 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d770:	e0bff717 	ldw	r2,-36(fp)
    d774:	1080400c 	andi	r2,r2,256
    d778:	10004726 	beq	r2,zero,d898 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d77c:	00800074 	movhi	r2,1
    d780:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d784:	e0bff517 	ldw	r2,-44(fp)
    d788:	10800d17 	ldw	r2,52(r2)
    d78c:	10800044 	addi	r2,r2,1
    d790:	1081ffcc 	andi	r2,r2,2047
    d794:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    d798:	e0bff517 	ldw	r2,-44(fp)
    d79c:	10c00e17 	ldw	r3,56(r2)
    d7a0:	e0bff817 	ldw	r2,-32(fp)
    d7a4:	1880011e 	bne	r3,r2,d7ac <altera_avalon_jtag_uart_irq+0x88>
          break;
    d7a8:	00002906 	br	d850 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d7ac:	e0bff617 	ldw	r2,-40(fp)
    d7b0:	10800037 	ldwio	r2,0(r2)
    d7b4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d7b8:	e0bff317 	ldw	r2,-52(fp)
    d7bc:	10a0000c 	andi	r2,r2,32768
    d7c0:	1000011e 	bne	r2,zero,d7c8 <altera_avalon_jtag_uart_irq+0xa4>
          break;
    d7c4:	00002206 	br	d850 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d7c8:	e0bff517 	ldw	r2,-44(fp)
    d7cc:	10800d17 	ldw	r2,52(r2)
    d7d0:	e0fff317 	ldw	r3,-52(fp)
    d7d4:	1809883a 	mov	r4,r3
    d7d8:	e0fff517 	ldw	r3,-44(fp)
    d7dc:	1885883a 	add	r2,r3,r2
    d7e0:	10801104 	addi	r2,r2,68
    d7e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d7e8:	e0bff517 	ldw	r2,-44(fp)
    d7ec:	10800d17 	ldw	r2,52(r2)
    d7f0:	10800044 	addi	r2,r2,1
    d7f4:	10c1ffcc 	andi	r3,r2,2047
    d7f8:	e0bff517 	ldw	r2,-44(fp)
    d7fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    d800:	e0bff517 	ldw	r2,-44(fp)
    d804:	10800c17 	ldw	r2,48(r2)
    d808:	e0bff915 	stw	r2,-28(fp)
    d80c:	00800044 	movi	r2,1
    d810:	e0bffa0d 	sth	r2,-24(fp)
    d814:	00800044 	movi	r2,1
    d818:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    d81c:	00800074 	movhi	r2,1
    d820:	1093eb44 	addi	r2,r2,20397
    d824:	10800003 	ldbu	r2,0(r2)
    d828:	10803fcc 	andi	r2,r2,255
    d82c:	103fd526 	beq	r2,zero,d784 <__alt_mem_Flash_flash_data+0xf400d784>
  {
    OSFlagPost (group, flags, opt, &err);
    d830:	e17ffa0b 	ldhu	r5,-24(fp)
    d834:	e0fffa83 	ldbu	r3,-22(fp)
    d838:	e0bffcc4 	addi	r2,fp,-13
    d83c:	e13ff917 	ldw	r4,-28(fp)
    d840:	180d883a 	mov	r6,r3
    d844:	100f883a 	mov	r7,r2
    d848:	00084a00 	call	84a0 <OSFlagPost>
      }
    d84c:	003fcd06 	br	d784 <__alt_mem_Flash_flash_data+0xf400d784>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d850:	e0bff317 	ldw	r2,-52(fp)
    d854:	10bfffec 	andhi	r2,r2,65535
    d858:	10000f26 	beq	r2,zero,d898 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d85c:	e0bff517 	ldw	r2,-44(fp)
    d860:	10c00817 	ldw	r3,32(r2)
    d864:	00bfff84 	movi	r2,-2
    d868:	1886703a 	and	r3,r3,r2
    d86c:	e0bff517 	ldw	r2,-44(fp)
    d870:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d874:	e0bff617 	ldw	r2,-40(fp)
    d878:	10800104 	addi	r2,r2,4
    d87c:	1007883a 	mov	r3,r2
    d880:	e0bff517 	ldw	r2,-44(fp)
    d884:	10800817 	ldw	r2,32(r2)
    d888:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d88c:	e0bff617 	ldw	r2,-40(fp)
    d890:	10800104 	addi	r2,r2,4
    d894:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d898:	e0bff717 	ldw	r2,-36(fp)
    d89c:	1080800c 	andi	r2,r2,512
    d8a0:	10004426 	beq	r2,zero,d9b4 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d8a4:	e0bff717 	ldw	r2,-36(fp)
    d8a8:	1004d43a 	srli	r2,r2,16
    d8ac:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d8b0:	00002706 	br	d950 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d8b4:	e0bff617 	ldw	r2,-40(fp)
    d8b8:	e0fff517 	ldw	r3,-44(fp)
    d8bc:	18c01017 	ldw	r3,64(r3)
    d8c0:	e13ff517 	ldw	r4,-44(fp)
    d8c4:	20c7883a 	add	r3,r4,r3
    d8c8:	18c21104 	addi	r3,r3,2116
    d8cc:	18c00003 	ldbu	r3,0(r3)
    d8d0:	18c03fcc 	andi	r3,r3,255
    d8d4:	18c0201c 	xori	r3,r3,128
    d8d8:	18ffe004 	addi	r3,r3,-128
    d8dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d8e0:	e0bff517 	ldw	r2,-44(fp)
    d8e4:	10801017 	ldw	r2,64(r2)
    d8e8:	10800044 	addi	r2,r2,1
    d8ec:	10c1ffcc 	andi	r3,r2,2047
    d8f0:	e0bff517 	ldw	r2,-44(fp)
    d8f4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    d8f8:	e0bff517 	ldw	r2,-44(fp)
    d8fc:	10800c17 	ldw	r2,48(r2)
    d900:	e0bffb15 	stw	r2,-20(fp)
    d904:	00800084 	movi	r2,2
    d908:	e0bffc0d 	sth	r2,-16(fp)
    d90c:	00800044 	movi	r2,1
    d910:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    d914:	00800074 	movhi	r2,1
    d918:	1093eb44 	addi	r2,r2,20397
    d91c:	10800003 	ldbu	r2,0(r2)
    d920:	10803fcc 	andi	r2,r2,255
    d924:	10000726 	beq	r2,zero,d944 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    d928:	e17ffc0b 	ldhu	r5,-16(fp)
    d92c:	e0fffc83 	ldbu	r3,-14(fp)
    d930:	e0bffd04 	addi	r2,fp,-12
    d934:	e13ffb17 	ldw	r4,-20(fp)
    d938:	180d883a 	mov	r6,r3
    d93c:	100f883a 	mov	r7,r2
    d940:	00084a00 	call	84a0 <OSFlagPost>

        space--;
    d944:	e0bff417 	ldw	r2,-48(fp)
    d948:	10bfffc4 	addi	r2,r2,-1
    d94c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d950:	e0bff417 	ldw	r2,-48(fp)
    d954:	10000526 	beq	r2,zero,d96c <altera_avalon_jtag_uart_irq+0x248>
    d958:	e0bff517 	ldw	r2,-44(fp)
    d95c:	10c01017 	ldw	r3,64(r2)
    d960:	e0bff517 	ldw	r2,-44(fp)
    d964:	10800f17 	ldw	r2,60(r2)
    d968:	18bfd21e 	bne	r3,r2,d8b4 <__alt_mem_Flash_flash_data+0xf400d8b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d96c:	e0bff417 	ldw	r2,-48(fp)
    d970:	10001026 	beq	r2,zero,d9b4 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d974:	e0bff517 	ldw	r2,-44(fp)
    d978:	10c00817 	ldw	r3,32(r2)
    d97c:	00bfff44 	movi	r2,-3
    d980:	1886703a 	and	r3,r3,r2
    d984:	e0bff517 	ldw	r2,-44(fp)
    d988:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d98c:	e0bff517 	ldw	r2,-44(fp)
    d990:	10800017 	ldw	r2,0(r2)
    d994:	10800104 	addi	r2,r2,4
    d998:	1007883a 	mov	r3,r2
    d99c:	e0bff517 	ldw	r2,-44(fp)
    d9a0:	10800817 	ldw	r2,32(r2)
    d9a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d9a8:	e0bff617 	ldw	r2,-40(fp)
    d9ac:	10800104 	addi	r2,r2,4
    d9b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d9b4:	003f6606 	br	d750 <__alt_mem_Flash_flash_data+0xf400d750>
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d9cc:	defff904 	addi	sp,sp,-28
    d9d0:	dfc00615 	stw	ra,24(sp)
    d9d4:	df000515 	stw	fp,20(sp)
    d9d8:	df000504 	addi	fp,sp,20
    d9dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d9e0:	e0bfff17 	ldw	r2,-4(fp)
    d9e4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d9e8:	e0bffb17 	ldw	r2,-20(fp)
    d9ec:	10800017 	ldw	r2,0(r2)
    d9f0:	10800104 	addi	r2,r2,4
    d9f4:	10800037 	ldwio	r2,0(r2)
    d9f8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d9fc:	e0bffc17 	ldw	r2,-16(fp)
    da00:	1081000c 	andi	r2,r2,1024
    da04:	10000b26 	beq	r2,zero,da34 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    da08:	e0bffb17 	ldw	r2,-20(fp)
    da0c:	10800017 	ldw	r2,0(r2)
    da10:	10800104 	addi	r2,r2,4
    da14:	1007883a 	mov	r3,r2
    da18:	e0bffb17 	ldw	r2,-20(fp)
    da1c:	10800817 	ldw	r2,32(r2)
    da20:	10810014 	ori	r2,r2,1024
    da24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    da28:	e0bffb17 	ldw	r2,-20(fp)
    da2c:	10000915 	stw	zero,36(r2)
    da30:	00002206 	br	dabc <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    da34:	e0bffb17 	ldw	r2,-20(fp)
    da38:	10c00917 	ldw	r3,36(r2)
    da3c:	00a00034 	movhi	r2,32768
    da40:	10bfff04 	addi	r2,r2,-4
    da44:	10c01d36 	bltu	r2,r3,dabc <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    da48:	e0bffb17 	ldw	r2,-20(fp)
    da4c:	10800917 	ldw	r2,36(r2)
    da50:	10c00044 	addi	r3,r2,1
    da54:	e0bffb17 	ldw	r2,-20(fp)
    da58:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    da5c:	e0bffb17 	ldw	r2,-20(fp)
    da60:	10c00917 	ldw	r3,36(r2)
    da64:	e0bffb17 	ldw	r2,-20(fp)
    da68:	10800117 	ldw	r2,4(r2)
    da6c:	18801336 	bltu	r3,r2,dabc <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    da70:	e0bffb17 	ldw	r2,-20(fp)
    da74:	10800c17 	ldw	r2,48(r2)
    da78:	e0bffd15 	stw	r2,-12(fp)
    da7c:	00800104 	movi	r2,4
    da80:	e0bffe0d 	sth	r2,-8(fp)
    da84:	00800044 	movi	r2,1
    da88:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    da8c:	00800074 	movhi	r2,1
    da90:	1093eb44 	addi	r2,r2,20397
    da94:	10800003 	ldbu	r2,0(r2)
    da98:	10803fcc 	andi	r2,r2,255
    da9c:	10000726 	beq	r2,zero,dabc <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    daa0:	e17ffe0b 	ldhu	r5,-8(fp)
    daa4:	e0fffe83 	ldbu	r3,-6(fp)
    daa8:	e0bffec4 	addi	r2,fp,-5
    daac:	e13ffd17 	ldw	r4,-12(fp)
    dab0:	180d883a 	mov	r6,r3
    dab4:	100f883a 	mov	r7,r2
    dab8:	00084a00 	call	84a0 <OSFlagPost>
    dabc:	00800074 	movhi	r2,1
    dac0:	10940004 	addi	r2,r2,20480
    dac4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    dac8:	e037883a 	mov	sp,fp
    dacc:	dfc00117 	ldw	ra,4(sp)
    dad0:	df000017 	ldw	fp,0(sp)
    dad4:	dec00204 	addi	sp,sp,8
    dad8:	f800283a 	ret

0000dadc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dadc:	defffd04 	addi	sp,sp,-12
    dae0:	df000215 	stw	fp,8(sp)
    dae4:	df000204 	addi	fp,sp,8
    dae8:	e13ffe15 	stw	r4,-8(fp)
    daec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    daf0:	00000506 	br	db08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    daf4:	e0bfff17 	ldw	r2,-4(fp)
    daf8:	1090000c 	andi	r2,r2,16384
    dafc:	10000226 	beq	r2,zero,db08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    db00:	00bffd44 	movi	r2,-11
    db04:	00000b06 	br	db34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    db08:	e0bffe17 	ldw	r2,-8(fp)
    db0c:	10c01017 	ldw	r3,64(r2)
    db10:	e0bffe17 	ldw	r2,-8(fp)
    db14:	10800f17 	ldw	r2,60(r2)
    db18:	18800526 	beq	r3,r2,db30 <altera_avalon_jtag_uart_close+0x54>
    db1c:	e0bffe17 	ldw	r2,-8(fp)
    db20:	10c00917 	ldw	r3,36(r2)
    db24:	e0bffe17 	ldw	r2,-8(fp)
    db28:	10800117 	ldw	r2,4(r2)
    db2c:	18bff136 	bltu	r3,r2,daf4 <__alt_mem_Flash_flash_data+0xf400daf4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    db30:	0005883a 	mov	r2,zero
}
    db34:	e037883a 	mov	sp,fp
    db38:	df000017 	ldw	fp,0(sp)
    db3c:	dec00104 	addi	sp,sp,4
    db40:	f800283a 	ret

0000db44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    db44:	defffa04 	addi	sp,sp,-24
    db48:	df000515 	stw	fp,20(sp)
    db4c:	df000504 	addi	fp,sp,20
    db50:	e13ffd15 	stw	r4,-12(fp)
    db54:	e17ffe15 	stw	r5,-8(fp)
    db58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    db5c:	00bff9c4 	movi	r2,-25
    db60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    db64:	e0bffe17 	ldw	r2,-8(fp)
    db68:	10da8060 	cmpeqi	r3,r2,27137
    db6c:	1800031e 	bne	r3,zero,db7c <altera_avalon_jtag_uart_ioctl+0x38>
    db70:	109a80a0 	cmpeqi	r2,r2,27138
    db74:	1000191e 	bne	r2,zero,dbdc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    db78:	00002806 	br	dc1c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    db7c:	e0bffd17 	ldw	r2,-12(fp)
    db80:	10c00117 	ldw	r3,4(r2)
    db84:	00a00034 	movhi	r2,32768
    db88:	10bfffc4 	addi	r2,r2,-1
    db8c:	18801226 	beq	r3,r2,dbd8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    db90:	e0bfff17 	ldw	r2,-4(fp)
    db94:	10800017 	ldw	r2,0(r2)
    db98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    db9c:	e0bffc17 	ldw	r2,-16(fp)
    dba0:	10800090 	cmplti	r2,r2,2
    dba4:	1000061e 	bne	r2,zero,dbc0 <altera_avalon_jtag_uart_ioctl+0x7c>
    dba8:	e0fffc17 	ldw	r3,-16(fp)
    dbac:	00a00034 	movhi	r2,32768
    dbb0:	10bfffc4 	addi	r2,r2,-1
    dbb4:	18800226 	beq	r3,r2,dbc0 <altera_avalon_jtag_uart_ioctl+0x7c>
    dbb8:	e0bffc17 	ldw	r2,-16(fp)
    dbbc:	00000206 	br	dbc8 <altera_avalon_jtag_uart_ioctl+0x84>
    dbc0:	00a00034 	movhi	r2,32768
    dbc4:	10bfff84 	addi	r2,r2,-2
    dbc8:	e0fffd17 	ldw	r3,-12(fp)
    dbcc:	18800115 	stw	r2,4(r3)
      rc = 0;
    dbd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dbd4:	00001106 	br	dc1c <altera_avalon_jtag_uart_ioctl+0xd8>
    dbd8:	00001006 	br	dc1c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dbdc:	e0bffd17 	ldw	r2,-12(fp)
    dbe0:	10c00117 	ldw	r3,4(r2)
    dbe4:	00a00034 	movhi	r2,32768
    dbe8:	10bfffc4 	addi	r2,r2,-1
    dbec:	18800a26 	beq	r3,r2,dc18 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
    dbf4:	10c00917 	ldw	r3,36(r2)
    dbf8:	e0bffd17 	ldw	r2,-12(fp)
    dbfc:	10800117 	ldw	r2,4(r2)
    dc00:	1885803a 	cmpltu	r2,r3,r2
    dc04:	10c03fcc 	andi	r3,r2,255
    dc08:	e0bfff17 	ldw	r2,-4(fp)
    dc0c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dc10:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dc14:	00000006 	br	dc18 <altera_avalon_jtag_uart_ioctl+0xd4>
    dc18:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dc1c:	e0bffb17 	ldw	r2,-20(fp)
}
    dc20:	e037883a 	mov	sp,fp
    dc24:	df000017 	ldw	fp,0(sp)
    dc28:	dec00104 	addi	sp,sp,4
    dc2c:	f800283a 	ret

0000dc30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dc30:	deffec04 	addi	sp,sp,-80
    dc34:	dfc01315 	stw	ra,76(sp)
    dc38:	df001215 	stw	fp,72(sp)
    dc3c:	df001204 	addi	fp,sp,72
    dc40:	e13ffc15 	stw	r4,-16(fp)
    dc44:	e17ffd15 	stw	r5,-12(fp)
    dc48:	e1bffe15 	stw	r6,-8(fp)
    dc4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    dc58:	e0bffc17 	ldw	r2,-16(fp)
    dc5c:	10800a17 	ldw	r2,40(r2)
    dc60:	e0bff415 	stw	r2,-48(fp)
    dc64:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    dc68:	e0fff50b 	ldhu	r3,-44(fp)
    dc6c:	e0bffb04 	addi	r2,fp,-20
    dc70:	e13ff417 	ldw	r4,-48(fp)
    dc74:	180b883a 	mov	r5,r3
    dc78:	100d883a 	mov	r6,r2
    dc7c:	000aaf00 	call	aaf0 <OSSemPend>

  while (space > 0)
    dc80:	00006506 	br	de18 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dc84:	e0bffc17 	ldw	r2,-16(fp)
    dc88:	10800d17 	ldw	r2,52(r2)
    dc8c:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    dc90:	e0bffc17 	ldw	r2,-16(fp)
    dc94:	10800e17 	ldw	r2,56(r2)
    dc98:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    dc9c:	e0fff117 	ldw	r3,-60(fp)
    dca0:	e0bff217 	ldw	r2,-56(fp)
    dca4:	18800536 	bltu	r3,r2,dcbc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    dca8:	e0fff117 	ldw	r3,-60(fp)
    dcac:	e0bff217 	ldw	r2,-56(fp)
    dcb0:	1885c83a 	sub	r2,r3,r2
    dcb4:	e0bff015 	stw	r2,-64(fp)
    dcb8:	00000406 	br	dccc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    dcbc:	00c20004 	movi	r3,2048
    dcc0:	e0bff217 	ldw	r2,-56(fp)
    dcc4:	1885c83a 	sub	r2,r3,r2
    dcc8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    dccc:	e0bff017 	ldw	r2,-64(fp)
    dcd0:	1000011e 	bne	r2,zero,dcd8 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    dcd4:	00001d06 	br	dd4c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    dcd8:	e0fffe17 	ldw	r3,-8(fp)
    dcdc:	e0bff017 	ldw	r2,-64(fp)
    dce0:	1880022e 	bgeu	r3,r2,dcec <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    dce4:	e0bffe17 	ldw	r2,-8(fp)
    dce8:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    dcec:	e0bff217 	ldw	r2,-56(fp)
    dcf0:	10801104 	addi	r2,r2,68
    dcf4:	e0fffc17 	ldw	r3,-16(fp)
    dcf8:	1885883a 	add	r2,r3,r2
    dcfc:	e13fef17 	ldw	r4,-68(fp)
    dd00:	100b883a 	mov	r5,r2
    dd04:	e1bff017 	ldw	r6,-64(fp)
    dd08:	00029100 	call	2910 <memcpy>
      ptr   += n;
    dd0c:	e0ffef17 	ldw	r3,-68(fp)
    dd10:	e0bff017 	ldw	r2,-64(fp)
    dd14:	1885883a 	add	r2,r3,r2
    dd18:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    dd1c:	e0fffe17 	ldw	r3,-8(fp)
    dd20:	e0bff017 	ldw	r2,-64(fp)
    dd24:	1885c83a 	sub	r2,r3,r2
    dd28:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd2c:	e0fff217 	ldw	r3,-56(fp)
    dd30:	e0bff017 	ldw	r2,-64(fp)
    dd34:	1885883a 	add	r2,r3,r2
    dd38:	10c1ffcc 	andi	r3,r2,2047
    dd3c:	e0bffc17 	ldw	r2,-16(fp)
    dd40:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    dd44:	e0bffe17 	ldw	r2,-8(fp)
    dd48:	00bfce16 	blt	zero,r2,dc84 <__alt_mem_Flash_flash_data+0xf400dc84>

    /* If we read any data then return it */
    if (ptr != buffer)
    dd4c:	e0ffef17 	ldw	r3,-68(fp)
    dd50:	e0bffd17 	ldw	r2,-12(fp)
    dd54:	18800126 	beq	r3,r2,dd5c <altera_avalon_jtag_uart_read+0x12c>
      break;
    dd58:	00003106 	br	de20 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dd5c:	e0bfff17 	ldw	r2,-4(fp)
    dd60:	1090000c 	andi	r2,r2,16384
    dd64:	10000126 	beq	r2,zero,dd6c <altera_avalon_jtag_uart_read+0x13c>
      break;
    dd68:	00002d06 	br	de20 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    dd6c:	00800074 	movhi	r2,1
    dd70:	1093eb44 	addi	r2,r2,20397
    dd74:	10800003 	ldbu	r2,0(r2)
    dd78:	10803fcc 	andi	r2,r2,255
    dd7c:	10800058 	cmpnei	r2,r2,1
    dd80:	1000161e 	bne	r2,zero,dddc <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    dd84:	e0bffc17 	ldw	r2,-16(fp)
    dd88:	10800c17 	ldw	r2,48(r2)
    dd8c:	e0bff615 	stw	r2,-40(fp)
    dd90:	00800144 	movi	r2,5
    dd94:	e0bff70d 	sth	r2,-36(fp)
    dd98:	00bfe0c4 	movi	r2,-125
    dd9c:	e0bff785 	stb	r2,-34(fp)
    dda0:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    dda4:	00800074 	movhi	r2,1
    dda8:	1093eb44 	addi	r2,r2,20397
    ddac:	10800003 	ldbu	r2,0(r2)
    ddb0:	10803fcc 	andi	r2,r2,255
    ddb4:	10001326 	beq	r2,zero,de04 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    ddb8:	e17ff70b 	ldhu	r5,-36(fp)
    ddbc:	e1bff783 	ldbu	r6,-34(fp)
    ddc0:	e0fff80b 	ldhu	r3,-32(fp)
    ddc4:	e0bffb44 	addi	r2,fp,-19
    ddc8:	d8800015 	stw	r2,0(sp)
    ddcc:	e13ff617 	ldw	r4,-40(fp)
    ddd0:	180f883a 	mov	r7,r3
    ddd4:	0007e480 	call	7e48 <OSFlagPend>
    ddd8:	00000a06 	br	de04 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dddc:	0001883a 	nop
    dde0:	e0bffc17 	ldw	r2,-16(fp)
    dde4:	10c00d17 	ldw	r3,52(r2)
    dde8:	e0bff117 	ldw	r2,-60(fp)
    ddec:	1880051e 	bne	r3,r2,de04 <altera_avalon_jtag_uart_read+0x1d4>
    ddf0:	e0bffc17 	ldw	r2,-16(fp)
    ddf4:	10c00917 	ldw	r3,36(r2)
    ddf8:	e0bffc17 	ldw	r2,-16(fp)
    ddfc:	10800117 	ldw	r2,4(r2)
    de00:	18bff736 	bltu	r3,r2,dde0 <__alt_mem_Flash_flash_data+0xf400dde0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    de04:	e0bffc17 	ldw	r2,-16(fp)
    de08:	10c00d17 	ldw	r3,52(r2)
    de0c:	e0bff117 	ldw	r2,-60(fp)
    de10:	1880011e 	bne	r3,r2,de18 <altera_avalon_jtag_uart_read+0x1e8>
      break;
    de14:	00000206 	br	de20 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    de18:	e0bffe17 	ldw	r2,-8(fp)
    de1c:	00bf9916 	blt	zero,r2,dc84 <__alt_mem_Flash_flash_data+0xf400dc84>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    de20:	e0bffc17 	ldw	r2,-16(fp)
    de24:	10800a17 	ldw	r2,40(r2)
    de28:	1009883a 	mov	r4,r2
    de2c:	000aec40 	call	aec4 <OSSemPost>

  if (ptr != buffer)
    de30:	e0ffef17 	ldw	r3,-68(fp)
    de34:	e0bffd17 	ldw	r2,-12(fp)
    de38:	18801826 	beq	r3,r2,de9c <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de3c:	0005303a 	rdctl	r2,status
    de40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de44:	e0fff917 	ldw	r3,-28(fp)
    de48:	00bfff84 	movi	r2,-2
    de4c:	1884703a 	and	r2,r3,r2
    de50:	1001703a 	wrctl	status,r2
  
  return context;
    de54:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    de58:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    de5c:	e0bffc17 	ldw	r2,-16(fp)
    de60:	10800817 	ldw	r2,32(r2)
    de64:	10c00054 	ori	r3,r2,1
    de68:	e0bffc17 	ldw	r2,-16(fp)
    de6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    de70:	e0bffc17 	ldw	r2,-16(fp)
    de74:	10800017 	ldw	r2,0(r2)
    de78:	10800104 	addi	r2,r2,4
    de7c:	1007883a 	mov	r3,r2
    de80:	e0bffc17 	ldw	r2,-16(fp)
    de84:	10800817 	ldw	r2,32(r2)
    de88:	18800035 	stwio	r2,0(r3)
    de8c:	e0bff317 	ldw	r2,-52(fp)
    de90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de94:	e0bffa17 	ldw	r2,-24(fp)
    de98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    de9c:	e0ffef17 	ldw	r3,-68(fp)
    dea0:	e0bffd17 	ldw	r2,-12(fp)
    dea4:	18800426 	beq	r3,r2,deb8 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    dea8:	e0ffef17 	ldw	r3,-68(fp)
    deac:	e0bffd17 	ldw	r2,-12(fp)
    deb0:	1885c83a 	sub	r2,r3,r2
    deb4:	00000606 	br	ded0 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    deb8:	e0bfff17 	ldw	r2,-4(fp)
    debc:	1090000c 	andi	r2,r2,16384
    dec0:	10000226 	beq	r2,zero,decc <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    dec4:	00bffd44 	movi	r2,-11
    dec8:	00000106 	br	ded0 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    decc:	00bffec4 	movi	r2,-5
}
    ded0:	e037883a 	mov	sp,fp
    ded4:	dfc00117 	ldw	ra,4(sp)
    ded8:	df000017 	ldw	fp,0(sp)
    dedc:	dec00204 	addi	sp,sp,8
    dee0:	f800283a 	ret

0000dee4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    dee4:	deffed04 	addi	sp,sp,-76
    dee8:	dfc01215 	stw	ra,72(sp)
    deec:	df001115 	stw	fp,68(sp)
    def0:	df001104 	addi	fp,sp,68
    def4:	e13ffc15 	stw	r4,-16(fp)
    def8:	e17ffd15 	stw	r5,-12(fp)
    defc:	e1bffe15 	stw	r6,-8(fp)
    df00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    df04:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    df08:	e0bffd17 	ldw	r2,-12(fp)
    df0c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    df10:	e0bffc17 	ldw	r2,-16(fp)
    df14:	10800b17 	ldw	r2,44(r2)
    df18:	e0bff515 	stw	r2,-44(fp)
    df1c:	e03ff60d 	sth	zero,-40(fp)
    df20:	e0fff60b 	ldhu	r3,-40(fp)
    df24:	e0bffbc4 	addi	r2,fp,-17
    df28:	e13ff517 	ldw	r4,-44(fp)
    df2c:	180b883a 	mov	r5,r3
    df30:	100d883a 	mov	r6,r2
    df34:	000aaf00 	call	aaf0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    df38:	00003806 	br	e01c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    df3c:	e0bffc17 	ldw	r2,-16(fp)
    df40:	10800f17 	ldw	r2,60(r2)
    df44:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    df48:	e0bffc17 	ldw	r2,-16(fp)
    df4c:	10801017 	ldw	r2,64(r2)
    df50:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    df54:	e0fff317 	ldw	r3,-52(fp)
    df58:	e0bff017 	ldw	r2,-64(fp)
    df5c:	1880062e 	bgeu	r3,r2,df78 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    df60:	e0fff017 	ldw	r3,-64(fp)
    df64:	e0bff317 	ldw	r2,-52(fp)
    df68:	1885c83a 	sub	r2,r3,r2
    df6c:	10bfffc4 	addi	r2,r2,-1
    df70:	e0bff115 	stw	r2,-60(fp)
    df74:	00000b06 	br	dfa4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    df78:	e0bff017 	ldw	r2,-64(fp)
    df7c:	10000526 	beq	r2,zero,df94 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    df80:	00c20004 	movi	r3,2048
    df84:	e0bff317 	ldw	r2,-52(fp)
    df88:	1885c83a 	sub	r2,r3,r2
    df8c:	e0bff115 	stw	r2,-60(fp)
    df90:	00000406 	br	dfa4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    df94:	00c1ffc4 	movi	r3,2047
    df98:	e0bff317 	ldw	r2,-52(fp)
    df9c:	1885c83a 	sub	r2,r3,r2
    dfa0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    dfa4:	e0bff117 	ldw	r2,-60(fp)
    dfa8:	1000011e 	bne	r2,zero,dfb0 <altera_avalon_jtag_uart_write+0xcc>
        break;
    dfac:	00001d06 	br	e024 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    dfb0:	e0fffe17 	ldw	r3,-8(fp)
    dfb4:	e0bff117 	ldw	r2,-60(fp)
    dfb8:	1880022e 	bgeu	r3,r2,dfc4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    dfbc:	e0bffe17 	ldw	r2,-8(fp)
    dfc0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    dfc4:	e0bff317 	ldw	r2,-52(fp)
    dfc8:	10821104 	addi	r2,r2,2116
    dfcc:	e0fffc17 	ldw	r3,-16(fp)
    dfd0:	1885883a 	add	r2,r3,r2
    dfd4:	1009883a 	mov	r4,r2
    dfd8:	e17ffd17 	ldw	r5,-12(fp)
    dfdc:	e1bff117 	ldw	r6,-60(fp)
    dfe0:	00029100 	call	2910 <memcpy>
      ptr   += n;
    dfe4:	e0fffd17 	ldw	r3,-12(fp)
    dfe8:	e0bff117 	ldw	r2,-60(fp)
    dfec:	1885883a 	add	r2,r3,r2
    dff0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    dff4:	e0fffe17 	ldw	r3,-8(fp)
    dff8:	e0bff117 	ldw	r2,-60(fp)
    dffc:	1885c83a 	sub	r2,r3,r2
    e000:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e004:	e0fff317 	ldw	r3,-52(fp)
    e008:	e0bff117 	ldw	r2,-60(fp)
    e00c:	1885883a 	add	r2,r3,r2
    e010:	10c1ffcc 	andi	r3,r2,2047
    e014:	e0bffc17 	ldw	r2,-16(fp)
    e018:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e01c:	e0bffe17 	ldw	r2,-8(fp)
    e020:	00bfc616 	blt	zero,r2,df3c <__alt_mem_Flash_flash_data+0xf400df3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e024:	0005303a 	rdctl	r2,status
    e028:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e02c:	e0fff717 	ldw	r3,-36(fp)
    e030:	00bfff84 	movi	r2,-2
    e034:	1884703a 	and	r2,r3,r2
    e038:	1001703a 	wrctl	status,r2
  
  return context;
    e03c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e040:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e044:	e0bffc17 	ldw	r2,-16(fp)
    e048:	10800817 	ldw	r2,32(r2)
    e04c:	10c00094 	ori	r3,r2,2
    e050:	e0bffc17 	ldw	r2,-16(fp)
    e054:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e058:	e0bffc17 	ldw	r2,-16(fp)
    e05c:	10800017 	ldw	r2,0(r2)
    e060:	10800104 	addi	r2,r2,4
    e064:	1007883a 	mov	r3,r2
    e068:	e0bffc17 	ldw	r2,-16(fp)
    e06c:	10800817 	ldw	r2,32(r2)
    e070:	18800035 	stwio	r2,0(r3)
    e074:	e0bff417 	ldw	r2,-48(fp)
    e078:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e07c:	e0bff817 	ldw	r2,-32(fp)
    e080:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e084:	e0bffe17 	ldw	r2,-8(fp)
    e088:	00802e0e 	bge	zero,r2,e144 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    e08c:	e0bfff17 	ldw	r2,-4(fp)
    e090:	1090000c 	andi	r2,r2,16384
    e094:	10000126 	beq	r2,zero,e09c <altera_avalon_jtag_uart_write+0x1b8>
        break;
    e098:	00002c06 	br	e14c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    e09c:	00800074 	movhi	r2,1
    e0a0:	1093eb44 	addi	r2,r2,20397
    e0a4:	10800003 	ldbu	r2,0(r2)
    e0a8:	10803fcc 	andi	r2,r2,255
    e0ac:	10800058 	cmpnei	r2,r2,1
    e0b0:	1000161e 	bne	r2,zero,e10c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    e0b4:	e0bffc17 	ldw	r2,-16(fp)
    e0b8:	10800c17 	ldw	r2,48(r2)
    e0bc:	e0bff915 	stw	r2,-28(fp)
    e0c0:	00800184 	movi	r2,6
    e0c4:	e0bffa0d 	sth	r2,-24(fp)
    e0c8:	00bfe0c4 	movi	r2,-125
    e0cc:	e0bffa85 	stb	r2,-22(fp)
    e0d0:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    e0d4:	00800074 	movhi	r2,1
    e0d8:	1093eb44 	addi	r2,r2,20397
    e0dc:	10800003 	ldbu	r2,0(r2)
    e0e0:	10803fcc 	andi	r2,r2,255
    e0e4:	10001326 	beq	r2,zero,e134 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    e0e8:	e17ffa0b 	ldhu	r5,-24(fp)
    e0ec:	e1bffa83 	ldbu	r6,-22(fp)
    e0f0:	e0fffb0b 	ldhu	r3,-20(fp)
    e0f4:	e0bffb84 	addi	r2,fp,-18
    e0f8:	d8800015 	stw	r2,0(sp)
    e0fc:	e13ff917 	ldw	r4,-28(fp)
    e100:	180f883a 	mov	r7,r3
    e104:	0007e480 	call	7e48 <OSFlagPend>
    e108:	00000a06 	br	e134 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e10c:	0001883a 	nop
    e110:	e0bffc17 	ldw	r2,-16(fp)
    e114:	10c01017 	ldw	r3,64(r2)
    e118:	e0bff017 	ldw	r2,-64(fp)
    e11c:	1880051e 	bne	r3,r2,e134 <altera_avalon_jtag_uart_write+0x250>
    e120:	e0bffc17 	ldw	r2,-16(fp)
    e124:	10c00917 	ldw	r3,36(r2)
    e128:	e0bffc17 	ldw	r2,-16(fp)
    e12c:	10800117 	ldw	r2,4(r2)
    e130:	18bff736 	bltu	r3,r2,e110 <__alt_mem_Flash_flash_data+0xf400e110>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e134:	e0bffc17 	ldw	r2,-16(fp)
    e138:	10800917 	ldw	r2,36(r2)
    e13c:	10000126 	beq	r2,zero,e144 <altera_avalon_jtag_uart_write+0x260>
         break;
    e140:	00000206 	br	e14c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    e144:	e0bffe17 	ldw	r2,-8(fp)
    e148:	00bf7b16 	blt	zero,r2,df38 <__alt_mem_Flash_flash_data+0xf400df38>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	10800b17 	ldw	r2,44(r2)
    e154:	1009883a 	mov	r4,r2
    e158:	000aec40 	call	aec4 <OSSemPost>

  if (ptr != start)
    e15c:	e0fffd17 	ldw	r3,-12(fp)
    e160:	e0bff217 	ldw	r2,-56(fp)
    e164:	18800426 	beq	r3,r2,e178 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    e168:	e0fffd17 	ldw	r3,-12(fp)
    e16c:	e0bff217 	ldw	r2,-56(fp)
    e170:	1885c83a 	sub	r2,r3,r2
    e174:	00000606 	br	e190 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    e178:	e0bfff17 	ldw	r2,-4(fp)
    e17c:	1090000c 	andi	r2,r2,16384
    e180:	10000226 	beq	r2,zero,e18c <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    e184:	00bffd44 	movi	r2,-11
    e188:	00000106 	br	e190 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e18c:	00bffec4 	movi	r2,-5
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e1a4:	defff904 	addi	sp,sp,-28
    e1a8:	dfc00615 	stw	ra,24(sp)
    e1ac:	df000515 	stw	fp,20(sp)
    e1b0:	df000504 	addi	fp,sp,20
    e1b4:	e13ffe15 	stw	r4,-8(fp)
    e1b8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e1bc:	0007883a 	mov	r3,zero
    e1c0:	e0bffe17 	ldw	r2,-8(fp)
    e1c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e1c8:	e0bffe17 	ldw	r2,-8(fp)
    e1cc:	10800104 	addi	r2,r2,4
    e1d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1d4:	0005303a 	rdctl	r2,status
    e1d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1dc:	e0fffc17 	ldw	r3,-16(fp)
    e1e0:	00bfff84 	movi	r2,-2
    e1e4:	1884703a 	and	r2,r3,r2
    e1e8:	1001703a 	wrctl	status,r2
  
  return context;
    e1ec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e1f0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e1f4:	00102200 	call	10220 <alt_tick>
    e1f8:	e0bffb17 	ldw	r2,-20(fp)
    e1fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e200:	e0bffd17 	ldw	r2,-12(fp)
    e204:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e208:	e037883a 	mov	sp,fp
    e20c:	dfc00117 	ldw	ra,4(sp)
    e210:	df000017 	ldw	fp,0(sp)
    e214:	dec00204 	addi	sp,sp,8
    e218:	f800283a 	ret

0000e21c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e21c:	defff904 	addi	sp,sp,-28
    e220:	dfc00615 	stw	ra,24(sp)
    e224:	df000515 	stw	fp,20(sp)
    e228:	df000504 	addi	fp,sp,20
    e22c:	e13ffc15 	stw	r4,-16(fp)
    e230:	e17ffd15 	stw	r5,-12(fp)
    e234:	e1bffe15 	stw	r6,-8(fp)
    e238:	e1ffff15 	stw	r7,-4(fp)
    e23c:	e0bfff17 	ldw	r2,-4(fp)
    e240:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e244:	00800074 	movhi	r2,1
    e248:	10940004 	addi	r2,r2,20480
    e24c:	10800017 	ldw	r2,0(r2)
    e250:	1000041e 	bne	r2,zero,e264 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e254:	00800074 	movhi	r2,1
    e258:	10940004 	addi	r2,r2,20480
    e25c:	e0fffb17 	ldw	r3,-20(fp)
    e260:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	10800104 	addi	r2,r2,4
    e26c:	00c001c4 	movi	r3,7
    e270:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e274:	e13ffe17 	ldw	r4,-8(fp)
    e278:	e17ffc17 	ldw	r5,-16(fp)
    e27c:	01800074 	movhi	r6,1
    e280:	31b86904 	addi	r6,r6,-7772
    e284:	000fd640 	call	fd64 <alt_irq_register>
#endif  
}
    e288:	e037883a 	mov	sp,fp
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret

0000e29c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e29c:	defffc04 	addi	sp,sp,-16
    e2a0:	df000315 	stw	fp,12(sp)
    e2a4:	df000304 	addi	fp,sp,12
    e2a8:	e13ffe15 	stw	r4,-8(fp)
    e2ac:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e2b0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    e2b4:	e0bfff17 	ldw	r2,-4(fp)
    e2b8:	1000061e 	bne	r2,zero,e2d4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    e2bc:	e0bffe17 	ldw	r2,-8(fp)
    e2c0:	1007883a 	mov	r3,r2
    e2c4:	e0bffd03 	ldbu	r2,-12(fp)
    e2c8:	1884b03a 	or	r2,r3,r2
    e2cc:	e0bffd05 	stb	r2,-12(fp)
    e2d0:	00000806 	br	e2f4 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	1007883a 	mov	r3,r2
    e2dc:	e0bffd03 	ldbu	r2,-12(fp)
    e2e0:	1884b03a 	or	r2,r3,r2
    e2e4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    e2e8:	e0bffd03 	ldbu	r2,-12(fp)
    e2ec:	10801014 	ori	r2,r2,64
    e2f0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e2f4:	e0fffd03 	ldbu	r3,-12(fp)
    e2f8:	00bfe004 	movi	r2,-128
    e2fc:	1884b03a 	or	r2,r3,r2
}
    e300:	e037883a 	mov	sp,fp
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00104 	addi	sp,sp,4
    e30c:	f800283a 	ret

0000e310 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e310:	defffd04 	addi	sp,sp,-12
    e314:	df000215 	stw	fp,8(sp)
    e318:	df000204 	addi	fp,sp,8
    e31c:	e13ffe15 	stw	r4,-8(fp)
    e320:	2805883a 	mov	r2,r5
    e324:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e328:	e0bffe17 	ldw	r2,-8(fp)
    e32c:	10800a17 	ldw	r2,40(r2)
    e330:	1007883a 	mov	r3,r2
    e334:	e0bfff03 	ldbu	r2,-4(fp)
    e338:	18800025 	stbio	r2,0(r3)
}
    e33c:	e037883a 	mov	sp,fp
    e340:	df000017 	ldw	fp,0(sp)
    e344:	dec00104 	addi	sp,sp,4
    e348:	f800283a 	ret

0000e34c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e34c:	defffe04 	addi	sp,sp,-8
    e350:	df000115 	stw	fp,4(sp)
    e354:	df000104 	addi	fp,sp,4
    e358:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	10800a17 	ldw	r2,40(r2)
    e364:	1007883a 	mov	r3,r2
    e368:	00800044 	movi	r2,1
    e36c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e370:	e037883a 	mov	sp,fp
    e374:	df000017 	ldw	fp,0(sp)
    e378:	dec00104 	addi	sp,sp,4
    e37c:	f800283a 	ret

0000e380 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e380:	defffc04 	addi	sp,sp,-16
    e384:	dfc00315 	stw	ra,12(sp)
    e388:	df000215 	stw	fp,8(sp)
    e38c:	df000204 	addi	fp,sp,8
    e390:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e394:	e13fff17 	ldw	r4,-4(fp)
    e398:	01400074 	movhi	r5,1
    e39c:	294bf404 	addi	r5,r5,12240
    e3a0:	000fb6c0 	call	fb6c <alt_find_dev>
    e3a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e3a8:	e0bffe17 	ldw	r2,-8(fp)
}
    e3ac:	e037883a 	mov	sp,fp
    e3b0:	dfc00117 	ldw	ra,4(sp)
    e3b4:	df000017 	ldw	fp,0(sp)
    e3b8:	dec00204 	addi	sp,sp,8
    e3bc:	f800283a 	ret

0000e3c0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    e3c0:	defffb04 	addi	sp,sp,-20
    e3c4:	df000415 	stw	fp,16(sp)
    e3c8:	df000404 	addi	fp,sp,16
    e3cc:	e13ffd15 	stw	r4,-12(fp)
    e3d0:	e17ffe15 	stw	r5,-8(fp)
    e3d4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    e3d8:	e03ffc15 	stw	zero,-16(fp)
    e3dc:	00000f06 	br	e41c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e3e0:	e0bffd17 	ldw	r2,-12(fp)
    e3e4:	10800a17 	ldw	r2,40(r2)
    e3e8:	10800044 	addi	r2,r2,1
    e3ec:	1009883a 	mov	r4,r2
    e3f0:	e0fffe17 	ldw	r3,-8(fp)
    e3f4:	e0bffc17 	ldw	r2,-16(fp)
    e3f8:	1885883a 	add	r2,r3,r2
    e3fc:	10800003 	ldbu	r2,0(r2)
    e400:	10803fcc 	andi	r2,r2,255
    e404:	1080201c 	xori	r2,r2,128
    e408:	10bfe004 	addi	r2,r2,-128
    e40c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e410:	e0bffc17 	ldw	r2,-16(fp)
    e414:	10800044 	addi	r2,r2,1
    e418:	e0bffc15 	stw	r2,-16(fp)
    e41c:	e0fffc17 	ldw	r3,-16(fp)
    e420:	e0bfff17 	ldw	r2,-4(fp)
    e424:	18bfee36 	bltu	r3,r2,e3e0 <__alt_mem_Flash_flash_data+0xf400e3e0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    e428:	e037883a 	mov	sp,fp
    e42c:	df000017 	ldw	fp,0(sp)
    e430:	dec00104 	addi	sp,sp,4
    e434:	f800283a 	ret

0000e438 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    e438:	defffd04 	addi	sp,sp,-12
    e43c:	df000215 	stw	fp,8(sp)
    e440:	df000204 	addi	fp,sp,8
    e444:	e13ffe15 	stw	r4,-8(fp)
    e448:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    e44c:	00000d06 	br	e484 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e450:	e0bffe17 	ldw	r2,-8(fp)
    e454:	10800a17 	ldw	r2,40(r2)
    e458:	10800044 	addi	r2,r2,1
    e45c:	1007883a 	mov	r3,r2
    e460:	e0bfff17 	ldw	r2,-4(fp)
    e464:	10800003 	ldbu	r2,0(r2)
    e468:	10803fcc 	andi	r2,r2,255
    e46c:	1080201c 	xori	r2,r2,128
    e470:	10bfe004 	addi	r2,r2,-128
    e474:	18800025 	stbio	r2,0(r3)
		++ptr;
    e478:	e0bfff17 	ldw	r2,-4(fp)
    e47c:	10800044 	addi	r2,r2,1
    e480:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e484:	e0bfff17 	ldw	r2,-4(fp)
    e488:	10800003 	ldbu	r2,0(r2)
    e48c:	10803fcc 	andi	r2,r2,255
    e490:	1080201c 	xori	r2,r2,128
    e494:	10bfe004 	addi	r2,r2,-128
    e498:	103fed1e 	bne	r2,zero,e450 <__alt_mem_Flash_flash_data+0xf400e450>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    e49c:	e037883a 	mov	sp,fp
    e4a0:	df000017 	ldw	fp,0(sp)
    e4a4:	dec00104 	addi	sp,sp,4
    e4a8:	f800283a 	ret

0000e4ac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e4ac:	defffb04 	addi	sp,sp,-20
    e4b0:	dfc00415 	stw	ra,16(sp)
    e4b4:	df000315 	stw	fp,12(sp)
    e4b8:	df000304 	addi	fp,sp,12
    e4bc:	e13ffd15 	stw	r4,-12(fp)
    e4c0:	e17ffe15 	stw	r5,-8(fp)
    e4c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e4c8:	e0bffd17 	ldw	r2,-12(fp)
    e4cc:	10c00017 	ldw	r3,0(r2)
    e4d0:	e0bfff17 	ldw	r2,-4(fp)
    e4d4:	1809883a 	mov	r4,r3
    e4d8:	e17ffe17 	ldw	r5,-8(fp)
    e4dc:	100d883a 	mov	r6,r2
    e4e0:	000e3c00 	call	e3c0 <alt_up_character_lcd_write>
	return 0;
    e4e4:	0005883a 	mov	r2,zero
}
    e4e8:	e037883a 	mov	sp,fp
    e4ec:	dfc00117 	ldw	ra,4(sp)
    e4f0:	df000017 	ldw	fp,0(sp)
    e4f4:	dec00204 	addi	sp,sp,8
    e4f8:	f800283a 	ret

0000e4fc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e4fc:	defffa04 	addi	sp,sp,-24
    e500:	dfc00515 	stw	ra,20(sp)
    e504:	df000415 	stw	fp,16(sp)
    e508:	df000404 	addi	fp,sp,16
    e50c:	e13ffd15 	stw	r4,-12(fp)
    e510:	e17ffe15 	stw	r5,-8(fp)
    e514:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e518:	e0bffe17 	ldw	r2,-8(fp)
    e51c:	10800a28 	cmpgeui	r2,r2,40
    e520:	1000031e 	bne	r2,zero,e530 <alt_up_character_lcd_set_cursor_pos+0x34>
    e524:	e0bfff17 	ldw	r2,-4(fp)
    e528:	108000b0 	cmpltui	r2,r2,2
    e52c:	1000021e 	bne	r2,zero,e538 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    e530:	00bfffc4 	movi	r2,-1
    e534:	00000906 	br	e55c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e538:	e13ffe17 	ldw	r4,-8(fp)
    e53c:	e17fff17 	ldw	r5,-4(fp)
    e540:	000e29c0 	call	e29c <get_DDRAM_addr>
    e544:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    e548:	e0bffc03 	ldbu	r2,-16(fp)
    e54c:	e13ffd17 	ldw	r4,-12(fp)
    e550:	100b883a 	mov	r5,r2
    e554:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
	return 0;
    e558:	0005883a 	mov	r2,zero
}
    e55c:	e037883a 	mov	sp,fp
    e560:	dfc00117 	ldw	ra,4(sp)
    e564:	df000017 	ldw	fp,0(sp)
    e568:	dec00204 	addi	sp,sp,8
    e56c:	f800283a 	ret

0000e570 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e570:	defffb04 	addi	sp,sp,-20
    e574:	dfc00415 	stw	ra,16(sp)
    e578:	df000315 	stw	fp,12(sp)
    e57c:	df000304 	addi	fp,sp,12
    e580:	e13ffe15 	stw	r4,-8(fp)
    e584:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	1000011e 	bne	r2,zero,e594 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    e590:	00001406 	br	e5e4 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    e594:	e0bfff17 	ldw	r2,-4(fp)
    e598:	0080020e 	bge	zero,r2,e5a4 <alt_up_character_lcd_shift_cursor+0x34>
    e59c:	00800504 	movi	r2,20
    e5a0:	00000106 	br	e5a8 <alt_up_character_lcd_shift_cursor+0x38>
    e5a4:	00800404 	movi	r2,16
    e5a8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    e5ac:	e0bfff17 	ldw	r2,-4(fp)
    e5b0:	1000010e 	bge	r2,zero,e5b8 <alt_up_character_lcd_shift_cursor+0x48>
    e5b4:	0085c83a 	sub	r2,zero,r2
    e5b8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e5bc:	00000406 	br	e5d0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e5c0:	e0bffd43 	ldbu	r2,-11(fp)
    e5c4:	e13ffe17 	ldw	r4,-8(fp)
    e5c8:	100b883a 	mov	r5,r2
    e5cc:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e5d0:	e0bffd03 	ldbu	r2,-12(fp)
    e5d4:	10ffffc4 	addi	r3,r2,-1
    e5d8:	e0fffd05 	stb	r3,-12(fp)
    e5dc:	10803fcc 	andi	r2,r2,255
    e5e0:	103ff71e 	bne	r2,zero,e5c0 <__alt_mem_Flash_flash_data+0xf400e5c0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e5e4:	e037883a 	mov	sp,fp
    e5e8:	dfc00117 	ldw	ra,4(sp)
    e5ec:	df000017 	ldw	fp,0(sp)
    e5f0:	dec00204 	addi	sp,sp,8
    e5f4:	f800283a 	ret

0000e5f8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e5f8:	defffb04 	addi	sp,sp,-20
    e5fc:	dfc00415 	stw	ra,16(sp)
    e600:	df000315 	stw	fp,12(sp)
    e604:	df000304 	addi	fp,sp,12
    e608:	e13ffe15 	stw	r4,-8(fp)
    e60c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    e610:	e0bfff17 	ldw	r2,-4(fp)
    e614:	1000011e 	bne	r2,zero,e61c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    e618:	00001406 	br	e66c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    e61c:	e0bfff17 	ldw	r2,-4(fp)
    e620:	0080020e 	bge	zero,r2,e62c <alt_up_character_lcd_shift_display+0x34>
    e624:	00800704 	movi	r2,28
    e628:	00000106 	br	e630 <alt_up_character_lcd_shift_display+0x38>
    e62c:	00800604 	movi	r2,24
    e630:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    e634:	e0bfff17 	ldw	r2,-4(fp)
    e638:	1000010e 	bge	r2,zero,e640 <alt_up_character_lcd_shift_display+0x48>
    e63c:	0085c83a 	sub	r2,zero,r2
    e640:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e644:	00000406 	br	e658 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e648:	e0bffd43 	ldbu	r2,-11(fp)
    e64c:	e13ffe17 	ldw	r4,-8(fp)
    e650:	100b883a 	mov	r5,r2
    e654:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e658:	e0bffd03 	ldbu	r2,-12(fp)
    e65c:	10ffffc4 	addi	r3,r2,-1
    e660:	e0fffd05 	stb	r3,-12(fp)
    e664:	10803fcc 	andi	r2,r2,255
    e668:	103ff71e 	bne	r2,zero,e648 <__alt_mem_Flash_flash_data+0xf400e648>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e66c:	e037883a 	mov	sp,fp
    e670:	dfc00117 	ldw	ra,4(sp)
    e674:	df000017 	ldw	fp,0(sp)
    e678:	dec00204 	addi	sp,sp,8
    e67c:	f800283a 	ret

0000e680 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    e680:	defffa04 	addi	sp,sp,-24
    e684:	dfc00515 	stw	ra,20(sp)
    e688:	df000415 	stw	fp,16(sp)
    e68c:	df000404 	addi	fp,sp,16
    e690:	e13ffd15 	stw	r4,-12(fp)
    e694:	e17ffe15 	stw	r5,-8(fp)
    e698:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    e69c:	e0bffe17 	ldw	r2,-8(fp)
    e6a0:	10800a28 	cmpgeui	r2,r2,40
    e6a4:	1000031e 	bne	r2,zero,e6b4 <alt_up_character_lcd_erase_pos+0x34>
    e6a8:	e0bfff17 	ldw	r2,-4(fp)
    e6ac:	108000b0 	cmpltui	r2,r2,2
    e6b0:	1000021e 	bne	r2,zero,e6bc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    e6b4:	00bfffc4 	movi	r2,-1
    e6b8:	00000f06 	br	e6f8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e6bc:	e13ffe17 	ldw	r4,-8(fp)
    e6c0:	e17fff17 	ldw	r5,-4(fp)
    e6c4:	000e29c0 	call	e29c <get_DDRAM_addr>
    e6c8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    e6cc:	e0bffc03 	ldbu	r2,-16(fp)
    e6d0:	e13ffd17 	ldw	r4,-12(fp)
    e6d4:	100b883a 	mov	r5,r2
    e6d8:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    e6dc:	e0bffd17 	ldw	r2,-12(fp)
    e6e0:	10800a17 	ldw	r2,40(r2)
    e6e4:	10800044 	addi	r2,r2,1
    e6e8:	1007883a 	mov	r3,r2
    e6ec:	00800084 	movi	r2,2
    e6f0:	18800025 	stbio	r2,0(r3)
	return 0;
    e6f4:	0005883a 	mov	r2,zero
}
    e6f8:	e037883a 	mov	sp,fp
    e6fc:	dfc00117 	ldw	ra,4(sp)
    e700:	df000017 	ldw	fp,0(sp)
    e704:	dec00204 	addi	sp,sp,8
    e708:	f800283a 	ret

0000e70c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    e70c:	defffd04 	addi	sp,sp,-12
    e710:	dfc00215 	stw	ra,8(sp)
    e714:	df000115 	stw	fp,4(sp)
    e718:	df000104 	addi	fp,sp,4
    e71c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    e720:	e13fff17 	ldw	r4,-4(fp)
    e724:	01400304 	movi	r5,12
    e728:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
}
    e72c:	e037883a 	mov	sp,fp
    e730:	dfc00117 	ldw	ra,4(sp)
    e734:	df000017 	ldw	fp,0(sp)
    e738:	dec00204 	addi	sp,sp,8
    e73c:	f800283a 	ret

0000e740 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    e740:	defffd04 	addi	sp,sp,-12
    e744:	dfc00215 	stw	ra,8(sp)
    e748:	df000115 	stw	fp,4(sp)
    e74c:	df000104 	addi	fp,sp,4
    e750:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    e754:	e13fff17 	ldw	r4,-4(fp)
    e758:	014003c4 	movi	r5,15
    e75c:	000e3100 	call	e310 <alt_up_character_lcd_send_cmd>
}
    e760:	e037883a 	mov	sp,fp
    e764:	dfc00117 	ldw	ra,4(sp)
    e768:	df000017 	ldw	fp,0(sp)
    e76c:	dec00204 	addi	sp,sp,8
    e770:	f800283a 	ret

0000e774 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    e774:	defffd04 	addi	sp,sp,-12
    e778:	df000215 	stw	fp,8(sp)
    e77c:	df000204 	addi	fp,sp,8
    e780:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e784:	e0bfff17 	ldw	r2,-4(fp)
    e788:	10800a17 	ldw	r2,40(r2)
    e78c:	10800104 	addi	r2,r2,4
    e790:	10800037 	ldwio	r2,0(r2)
    e794:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    e798:	e0bffe17 	ldw	r2,-8(fp)
    e79c:	10800054 	ori	r2,r2,1
    e7a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e7a4:	e0bfff17 	ldw	r2,-4(fp)
    e7a8:	10800a17 	ldw	r2,40(r2)
    e7ac:	10800104 	addi	r2,r2,4
    e7b0:	1007883a 	mov	r3,r2
    e7b4:	e0bffe17 	ldw	r2,-8(fp)
    e7b8:	18800035 	stwio	r2,0(r3)
}
    e7bc:	e037883a 	mov	sp,fp
    e7c0:	df000017 	ldw	fp,0(sp)
    e7c4:	dec00104 	addi	sp,sp,4
    e7c8:	f800283a 	ret

0000e7cc <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    e7cc:	defffd04 	addi	sp,sp,-12
    e7d0:	df000215 	stw	fp,8(sp)
    e7d4:	df000204 	addi	fp,sp,8
    e7d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e7dc:	e0bfff17 	ldw	r2,-4(fp)
    e7e0:	10800a17 	ldw	r2,40(r2)
    e7e4:	10800104 	addi	r2,r2,4
    e7e8:	10800037 	ldwio	r2,0(r2)
    e7ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    e7f0:	e0fffe17 	ldw	r3,-8(fp)
    e7f4:	00bfff84 	movi	r2,-2
    e7f8:	1884703a 	and	r2,r3,r2
    e7fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e800:	e0bfff17 	ldw	r2,-4(fp)
    e804:	10800a17 	ldw	r2,40(r2)
    e808:	10800104 	addi	r2,r2,4
    e80c:	1007883a 	mov	r3,r2
    e810:	e0bffe17 	ldw	r2,-8(fp)
    e814:	18800035 	stwio	r2,0(r3)
}
    e818:	e037883a 	mov	sp,fp
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00104 	addi	sp,sp,4
    e824:	f800283a 	ret

0000e828 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    e828:	defffd04 	addi	sp,sp,-12
    e82c:	df000215 	stw	fp,8(sp)
    e830:	df000204 	addi	fp,sp,8
    e834:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e838:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e83c:	e0bfff17 	ldw	r2,-4(fp)
    e840:	10800a17 	ldw	r2,40(r2)
    e844:	10800084 	addi	r2,r2,2
    e848:	1080002b 	ldhuio	r2,0(r2)
    e84c:	10bfffcc 	andi	r2,r2,65535
    e850:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    e854:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e858:	e037883a 	mov	sp,fp
    e85c:	df000017 	ldw	fp,0(sp)
    e860:	dec00104 	addi	sp,sp,4
    e864:	f800283a 	ret

0000e868 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    e868:	defffd04 	addi	sp,sp,-12
    e86c:	df000215 	stw	fp,8(sp)
    e870:	df000204 	addi	fp,sp,8
    e874:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e878:	e0bfff17 	ldw	r2,-4(fp)
    e87c:	10800a17 	ldw	r2,40(r2)
    e880:	10800104 	addi	r2,r2,4
    e884:	10800037 	ldwio	r2,0(r2)
    e888:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    e88c:	e0bffe17 	ldw	r2,-8(fp)
    e890:	1004d43a 	srli	r2,r2,16
}
    e894:	e037883a 	mov	sp,fp
    e898:	df000017 	ldw	fp,0(sp)
    e89c:	dec00104 	addi	sp,sp,4
    e8a0:	f800283a 	ret

0000e8a4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    e8a4:	defffd04 	addi	sp,sp,-12
    e8a8:	df000215 	stw	fp,8(sp)
    e8ac:	df000204 	addi	fp,sp,8
    e8b0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    e8b4:	e0bfff17 	ldw	r2,-4(fp)
    e8b8:	1080800c 	andi	r2,r2,512
    e8bc:	1004d27a 	srli	r2,r2,9
    e8c0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    e8c4:	e0bffe17 	ldw	r2,-8(fp)
    e8c8:	10000226 	beq	r2,zero,e8d4 <alt_up_irda_check_parity+0x30>
    e8cc:	00bfffc4 	movi	r2,-1
    e8d0:	00000106 	br	e8d8 <alt_up_irda_check_parity+0x34>
    e8d4:	0005883a 	mov	r2,zero
}
    e8d8:	e037883a 	mov	sp,fp
    e8dc:	df000017 	ldw	fp,0(sp)
    e8e0:	dec00104 	addi	sp,sp,4
    e8e4:	f800283a 	ret

0000e8e8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    e8e8:	defffd04 	addi	sp,sp,-12
    e8ec:	df000215 	stw	fp,8(sp)
    e8f0:	df000204 	addi	fp,sp,8
    e8f4:	e13ffe15 	stw	r4,-8(fp)
    e8f8:	2805883a 	mov	r2,r5
    e8fc:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e900:	e0bffe17 	ldw	r2,-8(fp)
    e904:	10800a17 	ldw	r2,40(r2)
    e908:	1007883a 	mov	r3,r2
    e90c:	e0bfff03 	ldbu	r2,-4(fp)
    e910:	18800035 	stwio	r2,0(r3)
	return 0;
    e914:	0005883a 	mov	r2,zero
}
    e918:	e037883a 	mov	sp,fp
    e91c:	df000017 	ldw	fp,0(sp)
    e920:	dec00104 	addi	sp,sp,4
    e924:	f800283a 	ret

0000e928 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e928:	defffa04 	addi	sp,sp,-24
    e92c:	dfc00515 	stw	ra,20(sp)
    e930:	df000415 	stw	fp,16(sp)
    e934:	df000404 	addi	fp,sp,16
    e938:	e13ffd15 	stw	r4,-12(fp)
    e93c:	e17ffe15 	stw	r5,-8(fp)
    e940:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e944:	e0bffd17 	ldw	r2,-12(fp)
    e948:	10800a17 	ldw	r2,40(r2)
    e94c:	10800037 	ldwio	r2,0(r2)
    e950:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e954:	e0bffc17 	ldw	r2,-16(fp)
    e958:	1007883a 	mov	r3,r2
    e95c:	e0bffe17 	ldw	r2,-8(fp)
    e960:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e964:	e13ffc17 	ldw	r4,-16(fp)
    e968:	000e8a40 	call	e8a4 <alt_up_irda_check_parity>
    e96c:	1007883a 	mov	r3,r2
    e970:	e0bfff17 	ldw	r2,-4(fp)
    e974:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    e978:	e0bffc17 	ldw	r2,-16(fp)
    e97c:	10a0000c 	andi	r2,r2,32768
    e980:	1004d3fa 	srli	r2,r2,15
    e984:	10bfffc4 	addi	r2,r2,-1
}
    e988:	e037883a 	mov	sp,fp
    e98c:	dfc00117 	ldw	ra,4(sp)
    e990:	df000017 	ldw	fp,0(sp)
    e994:	dec00204 	addi	sp,sp,8
    e998:	f800283a 	ret

0000e99c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e99c:	defff804 	addi	sp,sp,-32
    e9a0:	dfc00715 	stw	ra,28(sp)
    e9a4:	df000615 	stw	fp,24(sp)
    e9a8:	df000604 	addi	fp,sp,24
    e9ac:	e13ffd15 	stw	r4,-12(fp)
    e9b0:	e17ffe15 	stw	r5,-8(fp)
    e9b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e9b8:	e0bffd17 	ldw	r2,-12(fp)
    e9bc:	10800017 	ldw	r2,0(r2)
    e9c0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e9c4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e9c8:	00000e06 	br	ea04 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    e9cc:	e0bffe17 	ldw	r2,-8(fp)
    e9d0:	10c00044 	addi	r3,r2,1
    e9d4:	e0fffe15 	stw	r3,-8(fp)
    e9d8:	e0fffc04 	addi	r3,fp,-16
    e9dc:	e13ffb17 	ldw	r4,-20(fp)
    e9e0:	100b883a 	mov	r5,r2
    e9e4:	180d883a 	mov	r6,r3
    e9e8:	000e9280 	call	e928 <alt_up_irda_read_data>
    e9ec:	1000041e 	bne	r2,zero,ea00 <alt_up_irda_read_fd+0x64>
			count++;
    e9f0:	e0bffa17 	ldw	r2,-24(fp)
    e9f4:	10800044 	addi	r2,r2,1
    e9f8:	e0bffa15 	stw	r2,-24(fp)
    e9fc:	00000106 	br	ea04 <alt_up_irda_read_fd+0x68>
		else
			break;
    ea00:	00000406 	br	ea14 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    ea04:	e0bfff17 	ldw	r2,-4(fp)
    ea08:	10ffffc4 	addi	r3,r2,-1
    ea0c:	e0ffff15 	stw	r3,-4(fp)
    ea10:	103fee1e 	bne	r2,zero,e9cc <__alt_mem_Flash_flash_data+0xf400e9cc>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    ea14:	e0bffa17 	ldw	r2,-24(fp)
}
    ea18:	e037883a 	mov	sp,fp
    ea1c:	dfc00117 	ldw	ra,4(sp)
    ea20:	df000017 	ldw	fp,0(sp)
    ea24:	dec00204 	addi	sp,sp,8
    ea28:	f800283a 	ret

0000ea2c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ea2c:	defff904 	addi	sp,sp,-28
    ea30:	dfc00615 	stw	ra,24(sp)
    ea34:	df000515 	stw	fp,20(sp)
    ea38:	df000504 	addi	fp,sp,20
    ea3c:	e13ffd15 	stw	r4,-12(fp)
    ea40:	e17ffe15 	stw	r5,-8(fp)
    ea44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    ea48:	e0bffd17 	ldw	r2,-12(fp)
    ea4c:	10800017 	ldw	r2,0(r2)
    ea50:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ea54:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ea58:	00000e06 	br	ea94 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    ea5c:	e0bffe17 	ldw	r2,-8(fp)
    ea60:	10c00044 	addi	r3,r2,1
    ea64:	e0fffe15 	stw	r3,-8(fp)
    ea68:	10800003 	ldbu	r2,0(r2)
    ea6c:	10803fcc 	andi	r2,r2,255
    ea70:	e13ffc17 	ldw	r4,-16(fp)
    ea74:	100b883a 	mov	r5,r2
    ea78:	000e8e80 	call	e8e8 <alt_up_irda_write_data>
    ea7c:	1000041e 	bne	r2,zero,ea90 <alt_up_irda_write_fd+0x64>
			count++;
    ea80:	e0bffb17 	ldw	r2,-20(fp)
    ea84:	10800044 	addi	r2,r2,1
    ea88:	e0bffb15 	stw	r2,-20(fp)
    ea8c:	00000106 	br	ea94 <alt_up_irda_write_fd+0x68>
		else
			break;
    ea90:	00000406 	br	eaa4 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    ea94:	e0bfff17 	ldw	r2,-4(fp)
    ea98:	10ffffc4 	addi	r3,r2,-1
    ea9c:	e0ffff15 	stw	r3,-4(fp)
    eaa0:	103fee1e 	bne	r2,zero,ea5c <__alt_mem_Flash_flash_data+0xf400ea5c>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    eaa4:	e0bffb17 	ldw	r2,-20(fp)
}
    eaa8:	e037883a 	mov	sp,fp
    eaac:	dfc00117 	ldw	ra,4(sp)
    eab0:	df000017 	ldw	fp,0(sp)
    eab4:	dec00204 	addi	sp,sp,8
    eab8:	f800283a 	ret

0000eabc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    eabc:	defffc04 	addi	sp,sp,-16
    eac0:	dfc00315 	stw	ra,12(sp)
    eac4:	df000215 	stw	fp,8(sp)
    eac8:	df000204 	addi	fp,sp,8
    eacc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    ead0:	e13fff17 	ldw	r4,-4(fp)
    ead4:	01400074 	movhi	r5,1
    ead8:	294bf404 	addi	r5,r5,12240
    eadc:	000fb6c0 	call	fb6c <alt_find_dev>
    eae0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    eae4:	e0bffe17 	ldw	r2,-8(fp)
}
    eae8:	e037883a 	mov	sp,fp
    eaec:	dfc00117 	ldw	ra,4(sp)
    eaf0:	df000017 	ldw	fp,0(sp)
    eaf4:	dec00204 	addi	sp,sp,8
    eaf8:	f800283a 	ret

0000eafc <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    eafc:	defffc04 	addi	sp,sp,-16
    eb00:	dfc00315 	stw	ra,12(sp)
    eb04:	df000215 	stw	fp,8(sp)
    eb08:	df000204 	addi	fp,sp,8
    eb0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    eb10:	e13fff17 	ldw	r4,-4(fp)
    eb14:	01400074 	movhi	r5,1
    eb18:	294bf404 	addi	r5,r5,12240
    eb1c:	000fb6c0 	call	fb6c <alt_find_dev>
    eb20:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    eb24:	e0bffe17 	ldw	r2,-8(fp)
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	dfc00117 	ldw	ra,4(sp)
    eb30:	df000017 	ldw	fp,0(sp)
    eb34:	dec00204 	addi	sp,sp,8
    eb38:	f800283a 	ret

0000eb3c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    eb3c:	defffd04 	addi	sp,sp,-12
    eb40:	df000215 	stw	fp,8(sp)
    eb44:	df000204 	addi	fp,sp,8
    eb48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    eb4c:	e0bfff17 	ldw	r2,-4(fp)
    eb50:	1080400c 	andi	r2,r2,256
    eb54:	1004d23a 	srli	r2,r2,8
    eb58:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    eb5c:	e0bffe03 	ldbu	r2,-8(fp)
}
    eb60:	e037883a 	mov	sp,fp
    eb64:	df000017 	ldw	fp,0(sp)
    eb68:	dec00104 	addi	sp,sp,4
    eb6c:	f800283a 	ret

0000eb70 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    eb70:	defffd04 	addi	sp,sp,-12
    eb74:	df000215 	stw	fp,8(sp)
    eb78:	df000204 	addi	fp,sp,8
    eb7c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    eb80:	e0bfff17 	ldw	r2,-4(fp)
    eb84:	1080004c 	andi	r2,r2,1
    eb88:	e0bffe05 	stb	r2,-8(fp)
	return re;
    eb8c:	e0bffe03 	ldbu	r2,-8(fp)
}
    eb90:	e037883a 	mov	sp,fp
    eb94:	df000017 	ldw	fp,0(sp)
    eb98:	dec00104 	addi	sp,sp,4
    eb9c:	f800283a 	ret

0000eba0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    eba0:	defffd04 	addi	sp,sp,-12
    eba4:	df000215 	stw	fp,8(sp)
    eba8:	df000204 	addi	fp,sp,8
    ebac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    ebb0:	e0bfff17 	ldw	r2,-4(fp)
    ebb4:	1081000c 	andi	r2,r2,1024
    ebb8:	1004d2ba 	srli	r2,r2,10
    ebbc:	e0bffe05 	stb	r2,-8(fp)
	return re;
    ebc0:	e0bffe03 	ldbu	r2,-8(fp)
}
    ebc4:	e037883a 	mov	sp,fp
    ebc8:	df000017 	ldw	fp,0(sp)
    ebcc:	dec00104 	addi	sp,sp,4
    ebd0:	f800283a 	ret

0000ebd4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    ebd4:	defffd04 	addi	sp,sp,-12
    ebd8:	df000215 	stw	fp,8(sp)
    ebdc:	df000204 	addi	fp,sp,8
    ebe0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    ebe4:	e0bfff17 	ldw	r2,-4(fp)
    ebe8:	1004d43a 	srli	r2,r2,16
    ebec:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    ebf0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ebf4:	e037883a 	mov	sp,fp
    ebf8:	df000017 	ldw	fp,0(sp)
    ebfc:	dec00104 	addi	sp,sp,4
    ec00:	f800283a 	ret

0000ec04 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    ec04:	defffd04 	addi	sp,sp,-12
    ec08:	df000215 	stw	fp,8(sp)
    ec0c:	df000204 	addi	fp,sp,8
    ec10:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    ec14:	e0bfff17 	ldw	r2,-4(fp)
    ec18:	10a0000c 	andi	r2,r2,32768
    ec1c:	1004d3fa 	srli	r2,r2,15
    ec20:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    ec24:	e0bffe03 	ldbu	r2,-8(fp)
}
    ec28:	e037883a 	mov	sp,fp
    ec2c:	df000017 	ldw	fp,0(sp)
    ec30:	dec00104 	addi	sp,sp,4
    ec34:	f800283a 	ret

0000ec38 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    ec38:	defffd04 	addi	sp,sp,-12
    ec3c:	df000215 	stw	fp,8(sp)
    ec40:	df000204 	addi	fp,sp,8
    ec44:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    ec48:	e0bfff17 	ldw	r2,-4(fp)
    ec4c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    ec50:	e0bffe03 	ldbu	r2,-8(fp)
}
    ec54:	e037883a 	mov	sp,fp
    ec58:	df000017 	ldw	fp,0(sp)
    ec5c:	dec00104 	addi	sp,sp,4
    ec60:	f800283a 	ret

0000ec64 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    ec64:	defffb04 	addi	sp,sp,-20
    ec68:	dfc00415 	stw	ra,16(sp)
    ec6c:	df000315 	stw	fp,12(sp)
    ec70:	df000304 	addi	fp,sp,12
    ec74:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    ec78:	e13fff17 	ldw	r4,-4(fp)
    ec7c:	01403fc4 	movi	r5,255
    ec80:	000eec00 	call	eec0 <alt_up_ps2_write_data_byte_with_ack>
    ec84:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	1000211e 	bne	r2,zero,ed14 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ec90:	e0bffe04 	addi	r2,fp,-8
    ec94:	e13fff17 	ldw	r4,-4(fp)
    ec98:	100b883a 	mov	r5,r2
    ec9c:	000ef240 	call	ef24 <alt_up_ps2_read_data_byte_timeout>
    eca0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    eca4:	e0bffd17 	ldw	r2,-12(fp)
    eca8:	10001a1e 	bne	r2,zero,ed14 <alt_up_ps2_init+0xb0>
    ecac:	e0bffe03 	ldbu	r2,-8(fp)
    ecb0:	10803fcc 	andi	r2,r2,255
    ecb4:	10802a98 	cmpnei	r2,r2,170
    ecb8:	1000161e 	bne	r2,zero,ed14 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ecbc:	e0bffe04 	addi	r2,fp,-8
    ecc0:	e13fff17 	ldw	r4,-4(fp)
    ecc4:	100b883a 	mov	r5,r2
    ecc8:	000ef240 	call	ef24 <alt_up_ps2_read_data_byte_timeout>
    eccc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    ecd0:	e0bffd17 	ldw	r2,-12(fp)
    ecd4:	10bfe318 	cmpnei	r2,r2,-116
    ecd8:	1000041e 	bne	r2,zero,ecec <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    ecdc:	e0bfff17 	ldw	r2,-4(fp)
    ece0:	00c00044 	movi	r3,1
    ece4:	10c00d15 	stw	r3,52(r2)
    ece8:	00000a06 	br	ed14 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    ecec:	e0bffd17 	ldw	r2,-12(fp)
    ecf0:	1000081e 	bne	r2,zero,ed14 <alt_up_ps2_init+0xb0>
    ecf4:	e0bffe03 	ldbu	r2,-8(fp)
    ecf8:	10803fcc 	andi	r2,r2,255
    ecfc:	1000051e 	bne	r2,zero,ed14 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    ed08:	e13fff17 	ldw	r4,-4(fp)
    ed0c:	01403d04 	movi	r5,244
    ed10:	000eddc0 	call	eddc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    ed14:	e037883a 	mov	sp,fp
    ed18:	dfc00117 	ldw	ra,4(sp)
    ed1c:	df000017 	ldw	fp,0(sp)
    ed20:	dec00204 	addi	sp,sp,8
    ed24:	f800283a 	ret

0000ed28 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    ed28:	defffd04 	addi	sp,sp,-12
    ed2c:	df000215 	stw	fp,8(sp)
    ed30:	df000204 	addi	fp,sp,8
    ed34:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    ed38:	e0bfff17 	ldw	r2,-4(fp)
    ed3c:	10800a17 	ldw	r2,40(r2)
    ed40:	10800104 	addi	r2,r2,4
    ed44:	10800037 	ldwio	r2,0(r2)
    ed48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    ed4c:	e0bffe17 	ldw	r2,-8(fp)
    ed50:	10800054 	ori	r2,r2,1
    ed54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    ed58:	e0bfff17 	ldw	r2,-4(fp)
    ed5c:	10800a17 	ldw	r2,40(r2)
    ed60:	10800104 	addi	r2,r2,4
    ed64:	1007883a 	mov	r3,r2
    ed68:	e0bffe17 	ldw	r2,-8(fp)
    ed6c:	18800035 	stwio	r2,0(r3)
}
    ed70:	e037883a 	mov	sp,fp
    ed74:	df000017 	ldw	fp,0(sp)
    ed78:	dec00104 	addi	sp,sp,4
    ed7c:	f800283a 	ret

0000ed80 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    ed80:	defffd04 	addi	sp,sp,-12
    ed84:	df000215 	stw	fp,8(sp)
    ed88:	df000204 	addi	fp,sp,8
    ed8c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    ed90:	e0bfff17 	ldw	r2,-4(fp)
    ed94:	10800a17 	ldw	r2,40(r2)
    ed98:	10800104 	addi	r2,r2,4
    ed9c:	10800037 	ldwio	r2,0(r2)
    eda0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    eda4:	e0fffe17 	ldw	r3,-8(fp)
    eda8:	00bfff84 	movi	r2,-2
    edac:	1884703a 	and	r2,r3,r2
    edb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    edb4:	e0bfff17 	ldw	r2,-4(fp)
    edb8:	10800a17 	ldw	r2,40(r2)
    edbc:	10800104 	addi	r2,r2,4
    edc0:	1007883a 	mov	r3,r2
    edc4:	e0bffe17 	ldw	r2,-8(fp)
    edc8:	18800035 	stwio	r2,0(r3)
}
    edcc:	e037883a 	mov	sp,fp
    edd0:	df000017 	ldw	fp,0(sp)
    edd4:	dec00104 	addi	sp,sp,4
    edd8:	f800283a 	ret

0000eddc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    eddc:	defffb04 	addi	sp,sp,-20
    ede0:	dfc00415 	stw	ra,16(sp)
    ede4:	df000315 	stw	fp,12(sp)
    ede8:	df000304 	addi	fp,sp,12
    edec:	e13ffe15 	stw	r4,-8(fp)
    edf0:	2805883a 	mov	r2,r5
    edf4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    edf8:	e0bffe17 	ldw	r2,-8(fp)
    edfc:	10800a17 	ldw	r2,40(r2)
    ee00:	1007883a 	mov	r3,r2
    ee04:	e0bfff03 	ldbu	r2,-4(fp)
    ee08:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    ee0c:	e0bffe17 	ldw	r2,-8(fp)
    ee10:	10800a17 	ldw	r2,40(r2)
    ee14:	10800104 	addi	r2,r2,4
    ee18:	10800037 	ldwio	r2,0(r2)
    ee1c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    ee20:	e13ffd17 	ldw	r4,-12(fp)
    ee24:	000eba00 	call	eba0 <read_CE_bit>
    ee28:	10803fcc 	andi	r2,r2,255
    ee2c:	10000226 	beq	r2,zero,ee38 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    ee30:	00bffec4 	movi	r2,-5
    ee34:	00000106 	br	ee3c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    ee38:	0005883a 	mov	r2,zero
}
    ee3c:	e037883a 	mov	sp,fp
    ee40:	dfc00117 	ldw	ra,4(sp)
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00204 	addi	sp,sp,8
    ee4c:	f800283a 	ret

0000ee50 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    ee50:	defffc04 	addi	sp,sp,-16
    ee54:	dfc00315 	stw	ra,12(sp)
    ee58:	df000215 	stw	fp,8(sp)
    ee5c:	df000204 	addi	fp,sp,8
    ee60:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    ee64:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    ee68:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    ee6c:	e0bffe44 	addi	r2,fp,-7
    ee70:	e13fff17 	ldw	r4,-4(fp)
    ee74:	100b883a 	mov	r5,r2
    ee78:	000ef240 	call	ef24 <alt_up_ps2_read_data_byte_timeout>
    ee7c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    ee80:	e0bffe03 	ldbu	r2,-8(fp)
    ee84:	1000061e 	bne	r2,zero,eea0 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    ee88:	e0bffe43 	ldbu	r2,-7(fp)
    ee8c:	10803fcc 	andi	r2,r2,255
    ee90:	10803e98 	cmpnei	r2,r2,250
    ee94:	1000041e 	bne	r2,zero,eea8 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    ee98:	0005883a 	mov	r2,zero
    ee9c:	00000306 	br	eeac <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    eea0:	e0bffe03 	ldbu	r2,-8(fp)
    eea4:	00000106 	br	eeac <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    eea8:	003ff006 	br	ee6c <__alt_mem_Flash_flash_data+0xf400ee6c>
	return -ETIMEDOUT;
}
    eeac:	e037883a 	mov	sp,fp
    eeb0:	dfc00117 	ldw	ra,4(sp)
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00204 	addi	sp,sp,8
    eebc:	f800283a 	ret

0000eec0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    eec0:	defffa04 	addi	sp,sp,-24
    eec4:	dfc00515 	stw	ra,20(sp)
    eec8:	df000415 	stw	fp,16(sp)
    eecc:	df000404 	addi	fp,sp,16
    eed0:	e13ffe15 	stw	r4,-8(fp)
    eed4:	2805883a 	mov	r2,r5
    eed8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    eedc:	e0bfff03 	ldbu	r2,-4(fp)
    eee0:	e13ffe17 	ldw	r4,-8(fp)
    eee4:	100b883a 	mov	r5,r2
    eee8:	000eddc0 	call	eddc <alt_up_ps2_write_data_byte>
    eeec:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    eef0:	e0bffc17 	ldw	r2,-16(fp)
    eef4:	10000226 	beq	r2,zero,ef00 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    eef8:	e0bffc17 	ldw	r2,-16(fp)
    eefc:	00000406 	br	ef10 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    ef00:	e13ffe17 	ldw	r4,-8(fp)
    ef04:	000ee500 	call	ee50 <alt_up_ps2_wait_for_ack>
    ef08:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    ef0c:	e0bffd17 	ldw	r2,-12(fp)
}
    ef10:	e037883a 	mov	sp,fp
    ef14:	dfc00117 	ldw	ra,4(sp)
    ef18:	df000017 	ldw	fp,0(sp)
    ef1c:	dec00204 	addi	sp,sp,8
    ef20:	f800283a 	ret

0000ef24 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ef24:	defffa04 	addi	sp,sp,-24
    ef28:	dfc00515 	stw	ra,20(sp)
    ef2c:	df000415 	stw	fp,16(sp)
    ef30:	df000404 	addi	fp,sp,16
    ef34:	e13ffe15 	stw	r4,-8(fp)
    ef38:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    ef3c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    ef40:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    ef44:	e0bffc17 	ldw	r2,-16(fp)
    ef48:	10800044 	addi	r2,r2,1
    ef4c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ef50:	e0bffe17 	ldw	r2,-8(fp)
    ef54:	10800a17 	ldw	r2,40(r2)
    ef58:	10800037 	ldwio	r2,0(r2)
    ef5c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    ef60:	e13ffd17 	ldw	r4,-12(fp)
    ef64:	000ec040 	call	ec04 <read_data_valid>
    ef68:	10803fcc 	andi	r2,r2,255
    ef6c:	10000726 	beq	r2,zero,ef8c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    ef70:	e13ffd17 	ldw	r4,-12(fp)
    ef74:	000ec380 	call	ec38 <read_data_byte>
    ef78:	1007883a 	mov	r3,r2
    ef7c:	e0bfff17 	ldw	r2,-4(fp)
    ef80:	10c00005 	stb	r3,0(r2)
			return 0;
    ef84:	0005883a 	mov	r2,zero
    ef88:	00000a06 	br	efb4 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    ef8c:	e0bffe17 	ldw	r2,-8(fp)
    ef90:	10800c17 	ldw	r2,48(r2)
    ef94:	10000626 	beq	r2,zero,efb0 <alt_up_ps2_read_data_byte_timeout+0x8c>
    ef98:	e0bffe17 	ldw	r2,-8(fp)
    ef9c:	10c00c17 	ldw	r3,48(r2)
    efa0:	e0bffc17 	ldw	r2,-16(fp)
    efa4:	1880022e 	bgeu	r3,r2,efb0 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    efa8:	00bfe304 	movi	r2,-116
    efac:	00000106 	br	efb4 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    efb0:	003fe406 	br	ef44 <__alt_mem_Flash_flash_data+0xf400ef44>
}
    efb4:	e037883a 	mov	sp,fp
    efb8:	dfc00117 	ldw	ra,4(sp)
    efbc:	df000017 	ldw	fp,0(sp)
    efc0:	dec00204 	addi	sp,sp,8
    efc4:	f800283a 	ret

0000efc8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    efc8:	defffb04 	addi	sp,sp,-20
    efcc:	dfc00415 	stw	ra,16(sp)
    efd0:	df000315 	stw	fp,12(sp)
    efd4:	df000304 	addi	fp,sp,12
    efd8:	e13ffe15 	stw	r4,-8(fp)
    efdc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    efe0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    efe4:	e0bffe17 	ldw	r2,-8(fp)
    efe8:	10800a17 	ldw	r2,40(r2)
    efec:	10800037 	ldwio	r2,0(r2)
    eff0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    eff4:	e13ffd17 	ldw	r4,-12(fp)
    eff8:	000ec040 	call	ec04 <read_data_valid>
    effc:	10803fcc 	andi	r2,r2,255
    f000:	10000726 	beq	r2,zero,f020 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    f004:	e13ffd17 	ldw	r4,-12(fp)
    f008:	000ec380 	call	ec38 <read_data_byte>
    f00c:	1007883a 	mov	r3,r2
    f010:	e0bfff17 	ldw	r2,-4(fp)
    f014:	10c00005 	stb	r3,0(r2)
		return 0;
    f018:	0005883a 	mov	r2,zero
    f01c:	00000106 	br	f024 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    f020:	00bfffc4 	movi	r2,-1
}
    f024:	e037883a 	mov	sp,fp
    f028:	dfc00117 	ldw	ra,4(sp)
    f02c:	df000017 	ldw	fp,0(sp)
    f030:	dec00204 	addi	sp,sp,8
    f034:	f800283a 	ret

0000f038 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    f038:	defffb04 	addi	sp,sp,-20
    f03c:	dfc00415 	stw	ra,16(sp)
    f040:	df000315 	stw	fp,12(sp)
    f044:	df000304 	addi	fp,sp,12
    f048:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    f04c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    f050:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    f054:	e0bfff17 	ldw	r2,-4(fp)
    f058:	10800a17 	ldw	r2,40(r2)
    f05c:	10800037 	ldwio	r2,0(r2)
    f060:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    f064:	e13ffe17 	ldw	r4,-8(fp)
    f068:	000ebd40 	call	ebd4 <read_num_bytes_available>
    f06c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    f070:	e0bffd0b 	ldhu	r2,-12(fp)
    f074:	103ff71e 	bne	r2,zero,f054 <__alt_mem_Flash_flash_data+0xf400f054>
}
    f078:	e037883a 	mov	sp,fp
    f07c:	dfc00117 	ldw	ra,4(sp)
    f080:	df000017 	ldw	fp,0(sp)
    f084:	dec00204 	addi	sp,sp,8
    f088:	f800283a 	ret

0000f08c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    f08c:	defff804 	addi	sp,sp,-32
    f090:	dfc00715 	stw	ra,28(sp)
    f094:	df000615 	stw	fp,24(sp)
    f098:	df000604 	addi	fp,sp,24
    f09c:	e13ffd15 	stw	r4,-12(fp)
    f0a0:	e17ffe15 	stw	r5,-8(fp)
    f0a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f0a8:	e0bffd17 	ldw	r2,-12(fp)
    f0ac:	10800017 	ldw	r2,0(r2)
    f0b0:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    f0b4:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    f0b8:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    f0bc:	e0fffc17 	ldw	r3,-16(fp)
    f0c0:	e0bfff17 	ldw	r2,-4(fp)
    f0c4:	18bffd16 	blt	r3,r2,f0bc <__alt_mem_Flash_flash_data+0xf400f0bc>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    f0c8:	e0bffe17 	ldw	r2,-8(fp)
    f0cc:	10c00044 	addi	r3,r2,1
    f0d0:	e0fffe15 	stw	r3,-8(fp)
    f0d4:	e13ffa17 	ldw	r4,-24(fp)
    f0d8:	100b883a 	mov	r5,r2
    f0dc:	000ef240 	call	ef24 <alt_up_ps2_read_data_byte_timeout>
    f0e0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    f0e4:	e0bffb17 	ldw	r2,-20(fp)
    f0e8:	10000226 	beq	r2,zero,f0f4 <alt_up_ps2_read_fd+0x68>
			return count;
    f0ec:	e0bffc17 	ldw	r2,-16(fp)
    f0f0:	00000406 	br	f104 <alt_up_ps2_read_fd+0x78>
		count++;
    f0f4:	e0bffc17 	ldw	r2,-16(fp)
    f0f8:	10800044 	addi	r2,r2,1
    f0fc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    f100:	e0bffc17 	ldw	r2,-16(fp)
}
    f104:	e037883a 	mov	sp,fp
    f108:	dfc00117 	ldw	ra,4(sp)
    f10c:	df000017 	ldw	fp,0(sp)
    f110:	dec00204 	addi	sp,sp,8
    f114:	f800283a 	ret

0000f118 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f118:	defff804 	addi	sp,sp,-32
    f11c:	dfc00715 	stw	ra,28(sp)
    f120:	df000615 	stw	fp,24(sp)
    f124:	df000604 	addi	fp,sp,24
    f128:	e13ffd15 	stw	r4,-12(fp)
    f12c:	e17ffe15 	stw	r5,-8(fp)
    f130:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	10800017 	ldw	r2,0(r2)
    f13c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    f140:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    f144:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    f148:	00001006 	br	f18c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    f14c:	e0bffe17 	ldw	r2,-8(fp)
    f150:	10c00044 	addi	r3,r2,1
    f154:	e0fffe15 	stw	r3,-8(fp)
    f158:	10800003 	ldbu	r2,0(r2)
    f15c:	10803fcc 	andi	r2,r2,255
    f160:	e13ffb17 	ldw	r4,-20(fp)
    f164:	100b883a 	mov	r5,r2
    f168:	000eddc0 	call	eddc <alt_up_ps2_write_data_byte>
    f16c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    f170:	e0bffc17 	ldw	r2,-16(fp)
    f174:	10000226 	beq	r2,zero,f180 <alt_up_ps2_write_fd+0x68>
			return count;
    f178:	e0bffa17 	ldw	r2,-24(fp)
    f17c:	00000706 	br	f19c <alt_up_ps2_write_fd+0x84>
		count++;
    f180:	e0bffa17 	ldw	r2,-24(fp)
    f184:	10800044 	addi	r2,r2,1
    f188:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    f18c:	e0fffa17 	ldw	r3,-24(fp)
    f190:	e0bfff17 	ldw	r2,-4(fp)
    f194:	18bfed16 	blt	r3,r2,f14c <__alt_mem_Flash_flash_data+0xf400f14c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    f198:	e0bffa17 	ldw	r2,-24(fp)
}
    f19c:	e037883a 	mov	sp,fp
    f1a0:	dfc00117 	ldw	ra,4(sp)
    f1a4:	df000017 	ldw	fp,0(sp)
    f1a8:	dec00204 	addi	sp,sp,8
    f1ac:	f800283a 	ret

0000f1b0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    f1b0:	defffc04 	addi	sp,sp,-16
    f1b4:	dfc00315 	stw	ra,12(sp)
    f1b8:	df000215 	stw	fp,8(sp)
    f1bc:	df000204 	addi	fp,sp,8
    f1c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    f1c4:	e13fff17 	ldw	r4,-4(fp)
    f1c8:	01400074 	movhi	r5,1
    f1cc:	294bf404 	addi	r5,r5,12240
    f1d0:	000fb6c0 	call	fb6c <alt_find_dev>
    f1d4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f1d8:	e0bffe17 	ldw	r2,-8(fp)
}
    f1dc:	e037883a 	mov	sp,fp
    f1e0:	dfc00117 	ldw	ra,4(sp)
    f1e4:	df000017 	ldw	fp,0(sp)
    f1e8:	dec00204 	addi	sp,sp,8
    f1ec:	f800283a 	ret

0000f1f0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f1f0:	defffd04 	addi	sp,sp,-12
    f1f4:	df000215 	stw	fp,8(sp)
    f1f8:	df000204 	addi	fp,sp,8
    f1fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f200:	e0bfff17 	ldw	r2,-4(fp)
    f204:	10800a17 	ldw	r2,40(r2)
    f208:	10800104 	addi	r2,r2,4
    f20c:	10800037 	ldwio	r2,0(r2)
    f210:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f214:	e0bffe17 	ldw	r2,-8(fp)
    f218:	10800054 	ori	r2,r2,1
    f21c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f220:	e0bfff17 	ldw	r2,-4(fp)
    f224:	10800a17 	ldw	r2,40(r2)
    f228:	10800104 	addi	r2,r2,4
    f22c:	1007883a 	mov	r3,r2
    f230:	e0bffe17 	ldw	r2,-8(fp)
    f234:	18800035 	stwio	r2,0(r3)
}
    f238:	e037883a 	mov	sp,fp
    f23c:	df000017 	ldw	fp,0(sp)
    f240:	dec00104 	addi	sp,sp,4
    f244:	f800283a 	ret

0000f248 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f248:	defffd04 	addi	sp,sp,-12
    f24c:	df000215 	stw	fp,8(sp)
    f250:	df000204 	addi	fp,sp,8
    f254:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	10800a17 	ldw	r2,40(r2)
    f260:	10800104 	addi	r2,r2,4
    f264:	10800037 	ldwio	r2,0(r2)
    f268:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f26c:	e0fffe17 	ldw	r3,-8(fp)
    f270:	00bfff84 	movi	r2,-2
    f274:	1884703a 	and	r2,r3,r2
    f278:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f27c:	e0bfff17 	ldw	r2,-4(fp)
    f280:	10800a17 	ldw	r2,40(r2)
    f284:	10800104 	addi	r2,r2,4
    f288:	1007883a 	mov	r3,r2
    f28c:	e0bffe17 	ldw	r2,-8(fp)
    f290:	18800035 	stwio	r2,0(r3)
}
    f294:	e037883a 	mov	sp,fp
    f298:	df000017 	ldw	fp,0(sp)
    f29c:	dec00104 	addi	sp,sp,4
    f2a0:	f800283a 	ret

0000f2a4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f2a4:	defffd04 	addi	sp,sp,-12
    f2a8:	df000215 	stw	fp,8(sp)
    f2ac:	df000204 	addi	fp,sp,8
    f2b0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f2b4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f2b8:	e0bfff17 	ldw	r2,-4(fp)
    f2bc:	10800a17 	ldw	r2,40(r2)
    f2c0:	10800084 	addi	r2,r2,2
    f2c4:	1080002b 	ldhuio	r2,0(r2)
    f2c8:	10bfffcc 	andi	r2,r2,65535
    f2cc:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f2d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f2d4:	e037883a 	mov	sp,fp
    f2d8:	df000017 	ldw	fp,0(sp)
    f2dc:	dec00104 	addi	sp,sp,4
    f2e0:	f800283a 	ret

0000f2e4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f2e4:	defffd04 	addi	sp,sp,-12
    f2e8:	df000215 	stw	fp,8(sp)
    f2ec:	df000204 	addi	fp,sp,8
    f2f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f2f4:	e0bfff17 	ldw	r2,-4(fp)
    f2f8:	10800a17 	ldw	r2,40(r2)
    f2fc:	10800104 	addi	r2,r2,4
    f300:	10800037 	ldwio	r2,0(r2)
    f304:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f308:	e0bffe17 	ldw	r2,-8(fp)
    f30c:	1004d43a 	srli	r2,r2,16
}
    f310:	e037883a 	mov	sp,fp
    f314:	df000017 	ldw	fp,0(sp)
    f318:	dec00104 	addi	sp,sp,4
    f31c:	f800283a 	ret

0000f320 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f320:	defffd04 	addi	sp,sp,-12
    f324:	df000215 	stw	fp,8(sp)
    f328:	df000204 	addi	fp,sp,8
    f32c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f330:	e0bfff17 	ldw	r2,-4(fp)
    f334:	1080800c 	andi	r2,r2,512
    f338:	1004d27a 	srli	r2,r2,9
    f33c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    f340:	e0bffe17 	ldw	r2,-8(fp)
    f344:	10000226 	beq	r2,zero,f350 <alt_up_rs232_check_parity+0x30>
    f348:	00bfffc4 	movi	r2,-1
    f34c:	00000106 	br	f354 <alt_up_rs232_check_parity+0x34>
    f350:	0005883a 	mov	r2,zero
}
    f354:	e037883a 	mov	sp,fp
    f358:	df000017 	ldw	fp,0(sp)
    f35c:	dec00104 	addi	sp,sp,4
    f360:	f800283a 	ret

0000f364 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f364:	defffd04 	addi	sp,sp,-12
    f368:	df000215 	stw	fp,8(sp)
    f36c:	df000204 	addi	fp,sp,8
    f370:	e13ffe15 	stw	r4,-8(fp)
    f374:	2805883a 	mov	r2,r5
    f378:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f37c:	e0bffe17 	ldw	r2,-8(fp)
    f380:	10800a17 	ldw	r2,40(r2)
    f384:	1007883a 	mov	r3,r2
    f388:	e0bfff03 	ldbu	r2,-4(fp)
    f38c:	18800035 	stwio	r2,0(r3)
	return 0;
    f390:	0005883a 	mov	r2,zero
}
    f394:	e037883a 	mov	sp,fp
    f398:	df000017 	ldw	fp,0(sp)
    f39c:	dec00104 	addi	sp,sp,4
    f3a0:	f800283a 	ret

0000f3a4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f3a4:	defffa04 	addi	sp,sp,-24
    f3a8:	dfc00515 	stw	ra,20(sp)
    f3ac:	df000415 	stw	fp,16(sp)
    f3b0:	df000404 	addi	fp,sp,16
    f3b4:	e13ffd15 	stw	r4,-12(fp)
    f3b8:	e17ffe15 	stw	r5,-8(fp)
    f3bc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f3c0:	e0bffd17 	ldw	r2,-12(fp)
    f3c4:	10800a17 	ldw	r2,40(r2)
    f3c8:	10800037 	ldwio	r2,0(r2)
    f3cc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f3d0:	e0bffc17 	ldw	r2,-16(fp)
    f3d4:	1007883a 	mov	r3,r2
    f3d8:	e0bffe17 	ldw	r2,-8(fp)
    f3dc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f3e0:	e13ffc17 	ldw	r4,-16(fp)
    f3e4:	000f3200 	call	f320 <alt_up_rs232_check_parity>
    f3e8:	1007883a 	mov	r3,r2
    f3ec:	e0bfff17 	ldw	r2,-4(fp)
    f3f0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    f3f4:	e0bffc17 	ldw	r2,-16(fp)
    f3f8:	10a0000c 	andi	r2,r2,32768
    f3fc:	1004d3fa 	srli	r2,r2,15
    f400:	10bfffc4 	addi	r2,r2,-1
}
    f404:	e037883a 	mov	sp,fp
    f408:	dfc00117 	ldw	ra,4(sp)
    f40c:	df000017 	ldw	fp,0(sp)
    f410:	dec00204 	addi	sp,sp,8
    f414:	f800283a 	ret

0000f418 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f418:	defff804 	addi	sp,sp,-32
    f41c:	dfc00715 	stw	ra,28(sp)
    f420:	df000615 	stw	fp,24(sp)
    f424:	df000604 	addi	fp,sp,24
    f428:	e13ffd15 	stw	r4,-12(fp)
    f42c:	e17ffe15 	stw	r5,-8(fp)
    f430:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f434:	e0bffd17 	ldw	r2,-12(fp)
    f438:	10800017 	ldw	r2,0(r2)
    f43c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f440:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f444:	00000e06 	br	f480 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    f448:	e0bffe17 	ldw	r2,-8(fp)
    f44c:	10c00044 	addi	r3,r2,1
    f450:	e0fffe15 	stw	r3,-8(fp)
    f454:	e0fffc04 	addi	r3,fp,-16
    f458:	e13ffb17 	ldw	r4,-20(fp)
    f45c:	100b883a 	mov	r5,r2
    f460:	180d883a 	mov	r6,r3
    f464:	000f3a40 	call	f3a4 <alt_up_rs232_read_data>
    f468:	1000041e 	bne	r2,zero,f47c <alt_up_rs232_read_fd+0x64>
			count++;
    f46c:	e0bffa17 	ldw	r2,-24(fp)
    f470:	10800044 	addi	r2,r2,1
    f474:	e0bffa15 	stw	r2,-24(fp)
    f478:	00000106 	br	f480 <alt_up_rs232_read_fd+0x68>
		else
			break;
    f47c:	00000406 	br	f490 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f480:	e0bfff17 	ldw	r2,-4(fp)
    f484:	10ffffc4 	addi	r3,r2,-1
    f488:	e0ffff15 	stw	r3,-4(fp)
    f48c:	103fee1e 	bne	r2,zero,f448 <__alt_mem_Flash_flash_data+0xf400f448>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f490:	e0bffa17 	ldw	r2,-24(fp)
}
    f494:	e037883a 	mov	sp,fp
    f498:	dfc00117 	ldw	ra,4(sp)
    f49c:	df000017 	ldw	fp,0(sp)
    f4a0:	dec00204 	addi	sp,sp,8
    f4a4:	f800283a 	ret

0000f4a8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f4a8:	defff904 	addi	sp,sp,-28
    f4ac:	dfc00615 	stw	ra,24(sp)
    f4b0:	df000515 	stw	fp,20(sp)
    f4b4:	df000504 	addi	fp,sp,20
    f4b8:	e13ffd15 	stw	r4,-12(fp)
    f4bc:	e17ffe15 	stw	r5,-8(fp)
    f4c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f4c4:	e0bffd17 	ldw	r2,-12(fp)
    f4c8:	10800017 	ldw	r2,0(r2)
    f4cc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f4d0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f4d4:	00000f06 	br	f514 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f4d8:	e0bffe17 	ldw	r2,-8(fp)
    f4dc:	10800003 	ldbu	r2,0(r2)
    f4e0:	10803fcc 	andi	r2,r2,255
    f4e4:	e13ffc17 	ldw	r4,-16(fp)
    f4e8:	100b883a 	mov	r5,r2
    f4ec:	000f3640 	call	f364 <alt_up_rs232_write_data>
    f4f0:	1000071e 	bne	r2,zero,f510 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    f4f4:	e0bffb17 	ldw	r2,-20(fp)
    f4f8:	10800044 	addi	r2,r2,1
    f4fc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f500:	e0bffe17 	ldw	r2,-8(fp)
    f504:	10800044 	addi	r2,r2,1
    f508:	e0bffe15 	stw	r2,-8(fp)
    f50c:	00000106 	br	f514 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    f510:	00000406 	br	f524 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f514:	e0bfff17 	ldw	r2,-4(fp)
    f518:	10ffffc4 	addi	r3,r2,-1
    f51c:	e0ffff15 	stw	r3,-4(fp)
    f520:	103fed1e 	bne	r2,zero,f4d8 <__alt_mem_Flash_flash_data+0xf400f4d8>
			ptr++;
		}
		else
			break;
	}
	return count;
    f524:	e0bffb17 	ldw	r2,-20(fp)
}
    f528:	e037883a 	mov	sp,fp
    f52c:	dfc00117 	ldw	ra,4(sp)
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00204 	addi	sp,sp,8
    f538:	f800283a 	ret

0000f53c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f53c:	defffc04 	addi	sp,sp,-16
    f540:	dfc00315 	stw	ra,12(sp)
    f544:	df000215 	stw	fp,8(sp)
    f548:	df000204 	addi	fp,sp,8
    f54c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f550:	e13fff17 	ldw	r4,-4(fp)
    f554:	01400074 	movhi	r5,1
    f558:	294bf404 	addi	r5,r5,12240
    f55c:	000fb6c0 	call	fb6c <alt_find_dev>
    f560:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f564:	e0bffe17 	ldw	r2,-8(fp)
}
    f568:	e037883a 	mov	sp,fp
    f56c:	dfc00117 	ldw	ra,4(sp)
    f570:	df000017 	ldw	fp,0(sp)
    f574:	dec00204 	addi	sp,sp,8
    f578:	f800283a 	ret

0000f57c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f57c:	defffc04 	addi	sp,sp,-16
    f580:	dfc00315 	stw	ra,12(sp)
    f584:	df000215 	stw	fp,8(sp)
    f588:	df000204 	addi	fp,sp,8
    f58c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f590:	e0bfff17 	ldw	r2,-4(fp)
    f594:	10800217 	ldw	r2,8(r2)
    f598:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    f59c:	00000b06 	br	f5cc <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f5a0:	e13ffe17 	ldw	r4,-8(fp)
    f5a4:	01400074 	movhi	r5,1
    f5a8:	29446704 	addi	r5,r5,4508
    f5ac:	0010a780 	call	10a78 <strcmp>
    f5b0:	1000031e 	bne	r2,zero,f5c0 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    f5b4:	e0bffe17 	ldw	r2,-8(fp)
    f5b8:	10000005 	stb	zero,0(r2)
			break;
    f5bc:	00000906 	br	f5e4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f5c0:	e0bffe17 	ldw	r2,-8(fp)
    f5c4:	10800044 	addi	r2,r2,1
    f5c8:	e0bffe15 	stw	r2,-8(fp)
    f5cc:	e0bffe17 	ldw	r2,-8(fp)
    f5d0:	10800003 	ldbu	r2,0(r2)
    f5d4:	10803fcc 	andi	r2,r2,255
    f5d8:	1080201c 	xori	r2,r2,128
    f5dc:	10bfe004 	addi	r2,r2,-128
    f5e0:	103fef1e 	bne	r2,zero,f5a0 <__alt_mem_Flash_flash_data+0xf400f5a0>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    f5e4:	0001883a 	nop
}
    f5e8:	e037883a 	mov	sp,fp
    f5ec:	dfc00117 	ldw	ra,4(sp)
    f5f0:	df000017 	ldw	fp,0(sp)
    f5f4:	dec00204 	addi	sp,sp,8
    f5f8:	f800283a 	ret

0000f5fc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    f5fc:	defffc04 	addi	sp,sp,-16
    f600:	dfc00315 	stw	ra,12(sp)
    f604:	df000215 	stw	fp,8(sp)
    f608:	df000204 	addi	fp,sp,8
    f60c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    f610:	e13fff17 	ldw	r4,-4(fp)
    f614:	01400074 	movhi	r5,1
    f618:	294bf404 	addi	r5,r5,12240
    f61c:	000fb6c0 	call	fb6c <alt_find_dev>
    f620:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f624:	e0bffe17 	ldw	r2,-8(fp)
}
    f628:	e037883a 	mov	sp,fp
    f62c:	dfc00117 	ldw	ra,4(sp)
    f630:	df000017 	ldw	fp,0(sp)
    f634:	dec00204 	addi	sp,sp,8
    f638:	f800283a 	ret

0000f63c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    f63c:	defffa04 	addi	sp,sp,-24
    f640:	df000515 	stw	fp,20(sp)
    f644:	df000504 	addi	fp,sp,20
    f648:	e13ffc15 	stw	r4,-16(fp)
    f64c:	2805883a 	mov	r2,r5
    f650:	e1bffe15 	stw	r6,-8(fp)
    f654:	e1ffff15 	stw	r7,-4(fp)
    f658:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f65c:	e0bffc17 	ldw	r2,-16(fp)
    f660:	10800c17 	ldw	r2,48(r2)
    f664:	e0fffe17 	ldw	r3,-8(fp)
    f668:	1880042e 	bgeu	r3,r2,f67c <alt_up_char_buffer_draw+0x40>
    f66c:	e0bffc17 	ldw	r2,-16(fp)
    f670:	10800d17 	ldw	r2,52(r2)
    f674:	e0ffff17 	ldw	r3,-4(fp)
    f678:	18800236 	bltu	r3,r2,f684 <alt_up_char_buffer_draw+0x48>
		return -1;
    f67c:	00bfffc4 	movi	r2,-1
    f680:	00001d06 	br	f6f8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    f684:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    f688:	e0bffc17 	ldw	r2,-16(fp)
    f68c:	10c00f17 	ldw	r3,60(r2)
    f690:	e0bffe17 	ldw	r2,-8(fp)
    f694:	1884703a 	and	r2,r3,r2
    f698:	e0fffc17 	ldw	r3,-16(fp)
    f69c:	18c00e17 	ldw	r3,56(r3)
    f6a0:	10c4983a 	sll	r2,r2,r3
    f6a4:	e0fffb17 	ldw	r3,-20(fp)
    f6a8:	1884b03a 	or	r2,r3,r2
    f6ac:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    f6b0:	e0bffc17 	ldw	r2,-16(fp)
    f6b4:	10c01117 	ldw	r3,68(r2)
    f6b8:	e0bfff17 	ldw	r2,-4(fp)
    f6bc:	1884703a 	and	r2,r3,r2
    f6c0:	e0fffc17 	ldw	r3,-16(fp)
    f6c4:	18c01017 	ldw	r3,64(r3)
    f6c8:	10c4983a 	sll	r2,r2,r3
    f6cc:	e0fffb17 	ldw	r3,-20(fp)
    f6d0:	1884b03a 	or	r2,r3,r2
    f6d4:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    f6d8:	e0bffc17 	ldw	r2,-16(fp)
    f6dc:	10c00b17 	ldw	r3,44(r2)
    f6e0:	e0bffb17 	ldw	r2,-20(fp)
    f6e4:	1885883a 	add	r2,r3,r2
    f6e8:	1007883a 	mov	r3,r2
    f6ec:	e0bffd03 	ldbu	r2,-12(fp)
    f6f0:	18800025 	stbio	r2,0(r3)

	return 0;
    f6f4:	0005883a 	mov	r2,zero
}
    f6f8:	e037883a 	mov	sp,fp
    f6fc:	df000017 	ldw	fp,0(sp)
    f700:	dec00104 	addi	sp,sp,4
    f704:	f800283a 	ret

0000f708 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    f708:	defffa04 	addi	sp,sp,-24
    f70c:	df000515 	stw	fp,20(sp)
    f710:	df000504 	addi	fp,sp,20
    f714:	e13ffc15 	stw	r4,-16(fp)
    f718:	e17ffd15 	stw	r5,-12(fp)
    f71c:	e1bffe15 	stw	r6,-8(fp)
    f720:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	10800c17 	ldw	r2,48(r2)
    f72c:	e0fffe17 	ldw	r3,-8(fp)
    f730:	1880042e 	bgeu	r3,r2,f744 <alt_up_char_buffer_string+0x3c>
    f734:	e0bffc17 	ldw	r2,-16(fp)
    f738:	10800d17 	ldw	r2,52(r2)
    f73c:	e0ffff17 	ldw	r3,-4(fp)
    f740:	18800236 	bltu	r3,r2,f74c <alt_up_char_buffer_string+0x44>
		return -1;
    f744:	00bfffc4 	movi	r2,-1
    f748:	00002b06 	br	f7f8 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    f74c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10801017 	ldw	r2,64(r2)
    f758:	1007883a 	mov	r3,r2
    f75c:	e0bfff17 	ldw	r2,-4(fp)
    f760:	10c6983a 	sll	r3,r2,r3
    f764:	e0bffe17 	ldw	r2,-8(fp)
    f768:	1885883a 	add	r2,r3,r2
    f76c:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    f770:	00001a06 	br	f7dc <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	10c00b17 	ldw	r3,44(r2)
    f77c:	e0bffb17 	ldw	r2,-20(fp)
    f780:	1885883a 	add	r2,r3,r2
    f784:	1007883a 	mov	r3,r2
    f788:	e0bffd17 	ldw	r2,-12(fp)
    f78c:	10800003 	ldbu	r2,0(r2)
    f790:	10803fcc 	andi	r2,r2,255
    f794:	1080201c 	xori	r2,r2,128
    f798:	10bfe004 	addi	r2,r2,-128
    f79c:	18800025 	stbio	r2,0(r3)
		++ptr;
    f7a0:	e0bffd17 	ldw	r2,-12(fp)
    f7a4:	10800044 	addi	r2,r2,1
    f7a8:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    f7ac:	e0bffe17 	ldw	r2,-8(fp)
    f7b0:	10800044 	addi	r2,r2,1
    f7b4:	e0bffe15 	stw	r2,-8(fp)
    f7b8:	e0bffc17 	ldw	r2,-16(fp)
    f7bc:	10800c17 	ldw	r2,48(r2)
    f7c0:	e0fffe17 	ldw	r3,-8(fp)
    f7c4:	18800236 	bltu	r3,r2,f7d0 <alt_up_char_buffer_string+0xc8>
			return -1;
    f7c8:	00bfffc4 	movi	r2,-1
    f7cc:	00000a06 	br	f7f8 <alt_up_char_buffer_string+0xf0>
		++offset;
    f7d0:	e0bffb17 	ldw	r2,-20(fp)
    f7d4:	10800044 	addi	r2,r2,1
    f7d8:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f7dc:	e0bffd17 	ldw	r2,-12(fp)
    f7e0:	10800003 	ldbu	r2,0(r2)
    f7e4:	10803fcc 	andi	r2,r2,255
    f7e8:	1080201c 	xori	r2,r2,128
    f7ec:	10bfe004 	addi	r2,r2,-128
    f7f0:	103fe01e 	bne	r2,zero,f774 <__alt_mem_Flash_flash_data+0xf400f774>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    f7f4:	0005883a 	mov	r2,zero
}
    f7f8:	e037883a 	mov	sp,fp
    f7fc:	df000017 	ldw	fp,0(sp)
    f800:	dec00104 	addi	sp,sp,4
    f804:	f800283a 	ret

0000f808 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    f808:	defffe04 	addi	sp,sp,-8
    f80c:	df000115 	stw	fp,4(sp)
    f810:	df000104 	addi	fp,sp,4
    f814:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	10800a17 	ldw	r2,40(r2)
    f820:	10800084 	addi	r2,r2,2
    f824:	1007883a 	mov	r3,r2
    f828:	00800044 	movi	r2,1
    f82c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f830:	0001883a 	nop
    f834:	e0bfff17 	ldw	r2,-4(fp)
    f838:	10800a17 	ldw	r2,40(r2)
    f83c:	10800084 	addi	r2,r2,2
    f840:	10800023 	ldbuio	r2,0(r2)
    f844:	10803fcc 	andi	r2,r2,255
    f848:	1080004c 	andi	r2,r2,1
    f84c:	103ff91e 	bne	r2,zero,f834 <__alt_mem_Flash_flash_data+0xf400f834>
	return 0;
    f850:	0005883a 	mov	r2,zero
}
    f854:	e037883a 	mov	sp,fp
    f858:	df000017 	ldw	fp,0(sp)
    f85c:	dec00104 	addi	sp,sp,4
    f860:	f800283a 	ret

0000f864 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f864:	defff504 	addi	sp,sp,-44
    f868:	df000a15 	stw	fp,40(sp)
    f86c:	df000a04 	addi	fp,sp,40
    f870:	e13ffc15 	stw	r4,-16(fp)
    f874:	e17ffd15 	stw	r5,-12(fp)
    f878:	e1bffe15 	stw	r6,-8(fp)
    f87c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f880:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f884:	00800074 	movhi	r2,1
    f888:	10940004 	addi	r2,r2,20480
    f88c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f890:	10003f26 	beq	r2,zero,f990 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f894:	e0bffc17 	ldw	r2,-16(fp)
    f898:	10003b26 	beq	r2,zero,f988 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f89c:	e0bffc17 	ldw	r2,-16(fp)
    f8a0:	e0fffe17 	ldw	r3,-8(fp)
    f8a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f8a8:	e0bffc17 	ldw	r2,-16(fp)
    f8ac:	e0ffff17 	ldw	r3,-4(fp)
    f8b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8b4:	0005303a 	rdctl	r2,status
    f8b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8bc:	e0fff817 	ldw	r3,-32(fp)
    f8c0:	00bfff84 	movi	r2,-2
    f8c4:	1884703a 	and	r2,r3,r2
    f8c8:	1001703a 	wrctl	status,r2
  
  return context;
    f8cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    f8d0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f8d4:	00800074 	movhi	r2,1
    f8d8:	10940104 	addi	r2,r2,20484
    f8dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f8e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f8e4:	e0fffd17 	ldw	r3,-12(fp)
    f8e8:	e0bff617 	ldw	r2,-40(fp)
    f8ec:	1885883a 	add	r2,r3,r2
    f8f0:	10c00044 	addi	r3,r2,1
    f8f4:	e0bffc17 	ldw	r2,-16(fp)
    f8f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f8fc:	e0bffc17 	ldw	r2,-16(fp)
    f900:	10c00217 	ldw	r3,8(r2)
    f904:	e0bff617 	ldw	r2,-40(fp)
    f908:	1880042e 	bgeu	r3,r2,f91c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f90c:	e0bffc17 	ldw	r2,-16(fp)
    f910:	00c00044 	movi	r3,1
    f914:	10c00405 	stb	r3,16(r2)
    f918:	00000206 	br	f924 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f91c:	e0bffc17 	ldw	r2,-16(fp)
    f920:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f924:	e0fffc17 	ldw	r3,-16(fp)
    f928:	00800074 	movhi	r2,1
    f92c:	108c1904 	addi	r2,r2,12388
    f930:	e0bff915 	stw	r2,-28(fp)
    f934:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f938:	e0bffa17 	ldw	r2,-24(fp)
    f93c:	e0fff917 	ldw	r3,-28(fp)
    f940:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f944:	e0bff917 	ldw	r2,-28(fp)
    f948:	10c00017 	ldw	r3,0(r2)
    f94c:	e0bffa17 	ldw	r2,-24(fp)
    f950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f954:	e0bff917 	ldw	r2,-28(fp)
    f958:	10800017 	ldw	r2,0(r2)
    f95c:	e0fffa17 	ldw	r3,-24(fp)
    f960:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f964:	e0bff917 	ldw	r2,-28(fp)
    f968:	e0fffa17 	ldw	r3,-24(fp)
    f96c:	10c00015 	stw	r3,0(r2)
    f970:	e0bff717 	ldw	r2,-36(fp)
    f974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f978:	e0bffb17 	ldw	r2,-20(fp)
    f97c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f980:	0005883a 	mov	r2,zero
    f984:	00000306 	br	f994 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f988:	00bffa84 	movi	r2,-22
    f98c:	00000106 	br	f994 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f990:	00bfde84 	movi	r2,-134
  }
}
    f994:	e037883a 	mov	sp,fp
    f998:	df000017 	ldw	fp,0(sp)
    f99c:	dec00104 	addi	sp,sp,4
    f9a0:	f800283a 	ret

0000f9a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f9a4:	deffff04 	addi	sp,sp,-4
    f9a8:	df000015 	stw	fp,0(sp)
    f9ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f9b0:	e037883a 	mov	sp,fp
    f9b4:	df000017 	ldw	fp,0(sp)
    f9b8:	dec00104 	addi	sp,sp,4
    f9bc:	f800283a 	ret

0000f9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9c0:	defffe04 	addi	sp,sp,-8
    f9c4:	dfc00115 	stw	ra,4(sp)
    f9c8:	df000015 	stw	fp,0(sp)
    f9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9d0:	00800074 	movhi	r2,1
    f9d4:	108bf704 	addi	r2,r2,12252
    f9d8:	10800017 	ldw	r2,0(r2)
    f9dc:	10000526 	beq	r2,zero,f9f4 <alt_get_errno+0x34>
    f9e0:	00800074 	movhi	r2,1
    f9e4:	108bf704 	addi	r2,r2,12252
    f9e8:	10800017 	ldw	r2,0(r2)
    f9ec:	103ee83a 	callr	r2
    f9f0:	00000206 	br	f9fc <alt_get_errno+0x3c>
    f9f4:	00800074 	movhi	r2,1
    f9f8:	1093e204 	addi	r2,r2,20360
}
    f9fc:	e037883a 	mov	sp,fp
    fa00:	dfc00117 	ldw	ra,4(sp)
    fa04:	df000017 	ldw	fp,0(sp)
    fa08:	dec00204 	addi	sp,sp,8
    fa0c:	f800283a 	ret

0000fa10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fa10:	defffa04 	addi	sp,sp,-24
    fa14:	dfc00515 	stw	ra,20(sp)
    fa18:	df000415 	stw	fp,16(sp)
    fa1c:	df000404 	addi	fp,sp,16
    fa20:	e13ffe15 	stw	r4,-8(fp)
    fa24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	10000326 	beq	r2,zero,fa3c <alt_dev_llist_insert+0x2c>
    fa30:	e0bffe17 	ldw	r2,-8(fp)
    fa34:	10800217 	ldw	r2,8(r2)
    fa38:	1000061e 	bne	r2,zero,fa54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fa3c:	000f9c00 	call	f9c0 <alt_get_errno>
    fa40:	1007883a 	mov	r3,r2
    fa44:	00800584 	movi	r2,22
    fa48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fa4c:	00bffa84 	movi	r2,-22
    fa50:	00001306 	br	faa0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fa54:	e0bffe17 	ldw	r2,-8(fp)
    fa58:	e0ffff17 	ldw	r3,-4(fp)
    fa5c:	e0fffc15 	stw	r3,-16(fp)
    fa60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fa64:	e0bffd17 	ldw	r2,-12(fp)
    fa68:	e0fffc17 	ldw	r3,-16(fp)
    fa6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fa70:	e0bffc17 	ldw	r2,-16(fp)
    fa74:	10c00017 	ldw	r3,0(r2)
    fa78:	e0bffd17 	ldw	r2,-12(fp)
    fa7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fa80:	e0bffc17 	ldw	r2,-16(fp)
    fa84:	10800017 	ldw	r2,0(r2)
    fa88:	e0fffd17 	ldw	r3,-12(fp)
    fa8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fa90:	e0bffc17 	ldw	r2,-16(fp)
    fa94:	e0fffd17 	ldw	r3,-12(fp)
    fa98:	10c00015 	stw	r3,0(r2)

  return 0;  
    fa9c:	0005883a 	mov	r2,zero
}
    faa0:	e037883a 	mov	sp,fp
    faa4:	dfc00117 	ldw	ra,4(sp)
    faa8:	df000017 	ldw	fp,0(sp)
    faac:	dec00204 	addi	sp,sp,8
    fab0:	f800283a 	ret

0000fab4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fab4:	defffd04 	addi	sp,sp,-12
    fab8:	dfc00215 	stw	ra,8(sp)
    fabc:	df000115 	stw	fp,4(sp)
    fac0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fac4:	00800074 	movhi	r2,1
    fac8:	10837f04 	addi	r2,r2,3580
    facc:	e0bfff15 	stw	r2,-4(fp)
    fad0:	00000606 	br	faec <_do_ctors+0x38>
        (*ctor) (); 
    fad4:	e0bfff17 	ldw	r2,-4(fp)
    fad8:	10800017 	ldw	r2,0(r2)
    fadc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fae0:	e0bfff17 	ldw	r2,-4(fp)
    fae4:	10bfff04 	addi	r2,r2,-4
    fae8:	e0bfff15 	stw	r2,-4(fp)
    faec:	e0ffff17 	ldw	r3,-4(fp)
    faf0:	00800074 	movhi	r2,1
    faf4:	10838004 	addi	r2,r2,3584
    faf8:	18bff62e 	bgeu	r3,r2,fad4 <__alt_mem_Flash_flash_data+0xf400fad4>
        (*ctor) (); 
}
    fafc:	e037883a 	mov	sp,fp
    fb00:	dfc00117 	ldw	ra,4(sp)
    fb04:	df000017 	ldw	fp,0(sp)
    fb08:	dec00204 	addi	sp,sp,8
    fb0c:	f800283a 	ret

0000fb10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fb10:	defffd04 	addi	sp,sp,-12
    fb14:	dfc00215 	stw	ra,8(sp)
    fb18:	df000115 	stw	fp,4(sp)
    fb1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fb20:	00800074 	movhi	r2,1
    fb24:	10837f04 	addi	r2,r2,3580
    fb28:	e0bfff15 	stw	r2,-4(fp)
    fb2c:	00000606 	br	fb48 <_do_dtors+0x38>
        (*dtor) (); 
    fb30:	e0bfff17 	ldw	r2,-4(fp)
    fb34:	10800017 	ldw	r2,0(r2)
    fb38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fb3c:	e0bfff17 	ldw	r2,-4(fp)
    fb40:	10bfff04 	addi	r2,r2,-4
    fb44:	e0bfff15 	stw	r2,-4(fp)
    fb48:	e0ffff17 	ldw	r3,-4(fp)
    fb4c:	00800074 	movhi	r2,1
    fb50:	10838004 	addi	r2,r2,3584
    fb54:	18bff62e 	bgeu	r3,r2,fb30 <__alt_mem_Flash_flash_data+0xf400fb30>
        (*dtor) (); 
}
    fb58:	e037883a 	mov	sp,fp
    fb5c:	dfc00117 	ldw	ra,4(sp)
    fb60:	df000017 	ldw	fp,0(sp)
    fb64:	dec00204 	addi	sp,sp,8
    fb68:	f800283a 	ret

0000fb6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fb6c:	defffa04 	addi	sp,sp,-24
    fb70:	dfc00515 	stw	ra,20(sp)
    fb74:	df000415 	stw	fp,16(sp)
    fb78:	df000404 	addi	fp,sp,16
    fb7c:	e13ffe15 	stw	r4,-8(fp)
    fb80:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fb84:	e0bfff17 	ldw	r2,-4(fp)
    fb88:	10800017 	ldw	r2,0(r2)
    fb8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fb90:	e13ffe17 	ldw	r4,-8(fp)
    fb94:	0001b280 	call	1b28 <strlen>
    fb98:	10800044 	addi	r2,r2,1
    fb9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fba0:	00000d06 	br	fbd8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fba4:	e0bffc17 	ldw	r2,-16(fp)
    fba8:	10c00217 	ldw	r3,8(r2)
    fbac:	e0bffd17 	ldw	r2,-12(fp)
    fbb0:	1809883a 	mov	r4,r3
    fbb4:	e17ffe17 	ldw	r5,-8(fp)
    fbb8:	100d883a 	mov	r6,r2
    fbbc:	00109fc0 	call	109fc <memcmp>
    fbc0:	1000021e 	bne	r2,zero,fbcc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    fbc4:	e0bffc17 	ldw	r2,-16(fp)
    fbc8:	00000706 	br	fbe8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    fbcc:	e0bffc17 	ldw	r2,-16(fp)
    fbd0:	10800017 	ldw	r2,0(r2)
    fbd4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fbd8:	e0fffc17 	ldw	r3,-16(fp)
    fbdc:	e0bfff17 	ldw	r2,-4(fp)
    fbe0:	18bff01e 	bne	r3,r2,fba4 <__alt_mem_Flash_flash_data+0xf400fba4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fbe4:	0005883a 	mov	r2,zero
}
    fbe8:	e037883a 	mov	sp,fp
    fbec:	dfc00117 	ldw	ra,4(sp)
    fbf0:	df000017 	ldw	fp,0(sp)
    fbf4:	dec00204 	addi	sp,sp,8
    fbf8:	f800283a 	ret

0000fbfc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    fbfc:	defffe04 	addi	sp,sp,-8
    fc00:	dfc00115 	stw	ra,4(sp)
    fc04:	df000015 	stw	fp,0(sp)
    fc08:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    fc0c:	0009883a 	mov	r4,zero
    fc10:	01440004 	movi	r5,4096
    fc14:	00108880 	call	10888 <alt_icache_flush>
#endif
}
    fc18:	e037883a 	mov	sp,fp
    fc1c:	dfc00117 	ldw	ra,4(sp)
    fc20:	df000017 	ldw	fp,0(sp)
    fc24:	dec00204 	addi	sp,sp,8
    fc28:	f800283a 	ret

0000fc2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    fc2c:	defff904 	addi	sp,sp,-28
    fc30:	dfc00615 	stw	ra,24(sp)
    fc34:	df000515 	stw	fp,20(sp)
    fc38:	df000504 	addi	fp,sp,20
    fc3c:	e13ffc15 	stw	r4,-16(fp)
    fc40:	e17ffd15 	stw	r5,-12(fp)
    fc44:	e1bffe15 	stw	r6,-8(fp)
    fc48:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    fc4c:	e13ffd17 	ldw	r4,-12(fp)
    fc50:	e17ffe17 	ldw	r5,-8(fp)
    fc54:	e1bfff17 	ldw	r6,-4(fp)
    fc58:	00100300 	call	10030 <open>
    fc5c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	10001c16 	blt	r2,zero,fcd8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    fc68:	00800074 	movhi	r2,1
    fc6c:	10868404 	addi	r2,r2,6672
    fc70:	e0fffb17 	ldw	r3,-20(fp)
    fc74:	18c00324 	muli	r3,r3,12
    fc78:	10c5883a 	add	r2,r2,r3
    fc7c:	10c00017 	ldw	r3,0(r2)
    fc80:	e0bffc17 	ldw	r2,-16(fp)
    fc84:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fc88:	00800074 	movhi	r2,1
    fc8c:	10868404 	addi	r2,r2,6672
    fc90:	e0fffb17 	ldw	r3,-20(fp)
    fc94:	18c00324 	muli	r3,r3,12
    fc98:	18c00104 	addi	r3,r3,4
    fc9c:	10c5883a 	add	r2,r2,r3
    fca0:	10c00017 	ldw	r3,0(r2)
    fca4:	e0bffc17 	ldw	r2,-16(fp)
    fca8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    fcac:	00800074 	movhi	r2,1
    fcb0:	10868404 	addi	r2,r2,6672
    fcb4:	e0fffb17 	ldw	r3,-20(fp)
    fcb8:	18c00324 	muli	r3,r3,12
    fcbc:	18c00204 	addi	r3,r3,8
    fcc0:	10c5883a 	add	r2,r2,r3
    fcc4:	10c00017 	ldw	r3,0(r2)
    fcc8:	e0bffc17 	ldw	r2,-16(fp)
    fccc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    fcd0:	e13ffb17 	ldw	r4,-20(fp)
    fcd4:	0004e480 	call	4e48 <alt_release_fd>
  }
} 
    fcd8:	e037883a 	mov	sp,fp
    fcdc:	dfc00117 	ldw	ra,4(sp)
    fce0:	df000017 	ldw	fp,0(sp)
    fce4:	dec00204 	addi	sp,sp,8
    fce8:	f800283a 	ret

0000fcec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    fcec:	defffb04 	addi	sp,sp,-20
    fcf0:	dfc00415 	stw	ra,16(sp)
    fcf4:	df000315 	stw	fp,12(sp)
    fcf8:	df000304 	addi	fp,sp,12
    fcfc:	e13ffd15 	stw	r4,-12(fp)
    fd00:	e17ffe15 	stw	r5,-8(fp)
    fd04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    fd08:	01000074 	movhi	r4,1
    fd0c:	21068704 	addi	r4,r4,6684
    fd10:	e17ffd17 	ldw	r5,-12(fp)
    fd14:	01800044 	movi	r6,1
    fd18:	01c07fc4 	movi	r7,511
    fd1c:	000fc2c0 	call	fc2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    fd20:	01000074 	movhi	r4,1
    fd24:	21068404 	addi	r4,r4,6672
    fd28:	e17ffe17 	ldw	r5,-8(fp)
    fd2c:	000d883a 	mov	r6,zero
    fd30:	01c07fc4 	movi	r7,511
    fd34:	000fc2c0 	call	fc2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    fd38:	01000074 	movhi	r4,1
    fd3c:	21068a04 	addi	r4,r4,6696
    fd40:	e17fff17 	ldw	r5,-4(fp)
    fd44:	01800044 	movi	r6,1
    fd48:	01c07fc4 	movi	r7,511
    fd4c:	000fc2c0 	call	fc2c <alt_open_fd>
}  
    fd50:	e037883a 	mov	sp,fp
    fd54:	dfc00117 	ldw	ra,4(sp)
    fd58:	df000017 	ldw	fp,0(sp)
    fd5c:	dec00204 	addi	sp,sp,8
    fd60:	f800283a 	ret

0000fd64 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    fd64:	defff004 	addi	sp,sp,-64
    fd68:	df000f15 	stw	fp,60(sp)
    fd6c:	df000f04 	addi	fp,sp,60
    fd70:	e13ffd15 	stw	r4,-12(fp)
    fd74:	e17ffe15 	stw	r5,-8(fp)
    fd78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    fd7c:	00bffa84 	movi	r2,-22
    fd80:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    fd84:	e0bffd17 	ldw	r2,-12(fp)
    fd88:	10800828 	cmpgeui	r2,r2,32
    fd8c:	10005c1e 	bne	r2,zero,ff00 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd90:	0005303a 	rdctl	r2,status
    fd94:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd98:	e0fff317 	ldw	r3,-52(fp)
    fd9c:	00bfff84 	movi	r2,-2
    fda0:	1884703a 	and	r2,r3,r2
    fda4:	1001703a 	wrctl	status,r2
  
  return context;
    fda8:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    fdac:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    fdb0:	008000b4 	movhi	r2,2
    fdb4:	10889604 	addi	r2,r2,8792
    fdb8:	e0fffd17 	ldw	r3,-12(fp)
    fdbc:	180690fa 	slli	r3,r3,3
    fdc0:	10c5883a 	add	r2,r2,r3
    fdc4:	e0ffff17 	ldw	r3,-4(fp)
    fdc8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    fdcc:	008000b4 	movhi	r2,2
    fdd0:	10889604 	addi	r2,r2,8792
    fdd4:	e0fffd17 	ldw	r3,-12(fp)
    fdd8:	180690fa 	slli	r3,r3,3
    fddc:	18c00104 	addi	r3,r3,4
    fde0:	10c5883a 	add	r2,r2,r3
    fde4:	e0fffe17 	ldw	r3,-8(fp)
    fde8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    fdec:	e0bfff17 	ldw	r2,-4(fp)
    fdf0:	10001f26 	beq	r2,zero,fe70 <alt_irq_register+0x10c>
    fdf4:	e0bffd17 	ldw	r2,-12(fp)
    fdf8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fdfc:	0005303a 	rdctl	r2,status
    fe00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe04:	e0fff517 	ldw	r3,-44(fp)
    fe08:	00bfff84 	movi	r2,-2
    fe0c:	1884703a 	and	r2,r3,r2
    fe10:	1001703a 	wrctl	status,r2
  
  return context;
    fe14:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fe18:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    fe1c:	e0bff417 	ldw	r2,-48(fp)
    fe20:	00c00044 	movi	r3,1
    fe24:	1884983a 	sll	r2,r3,r2
    fe28:	1007883a 	mov	r3,r2
    fe2c:	00800074 	movhi	r2,1
    fe30:	1093ff04 	addi	r2,r2,20476
    fe34:	10800017 	ldw	r2,0(r2)
    fe38:	1886b03a 	or	r3,r3,r2
    fe3c:	00800074 	movhi	r2,1
    fe40:	1093ff04 	addi	r2,r2,20476
    fe44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fe48:	00800074 	movhi	r2,1
    fe4c:	1093ff04 	addi	r2,r2,20476
    fe50:	10800017 	ldw	r2,0(r2)
    fe54:	100170fa 	wrctl	ienable,r2
    fe58:	e0bff617 	ldw	r2,-40(fp)
    fe5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe60:	e0bff717 	ldw	r2,-36(fp)
    fe64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fe68:	0005883a 	mov	r2,zero
    fe6c:	00001f06 	br	feec <alt_irq_register+0x188>
    fe70:	e0bffd17 	ldw	r2,-12(fp)
    fe74:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe78:	0005303a 	rdctl	r2,status
    fe7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe80:	e0fff917 	ldw	r3,-28(fp)
    fe84:	00bfff84 	movi	r2,-2
    fe88:	1884703a 	and	r2,r3,r2
    fe8c:	1001703a 	wrctl	status,r2
  
  return context;
    fe90:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    fe94:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    fe98:	e0bff817 	ldw	r2,-32(fp)
    fe9c:	00c00044 	movi	r3,1
    fea0:	1884983a 	sll	r2,r3,r2
    fea4:	0084303a 	nor	r2,zero,r2
    fea8:	1007883a 	mov	r3,r2
    feac:	00800074 	movhi	r2,1
    feb0:	1093ff04 	addi	r2,r2,20476
    feb4:	10800017 	ldw	r2,0(r2)
    feb8:	1886703a 	and	r3,r3,r2
    febc:	00800074 	movhi	r2,1
    fec0:	1093ff04 	addi	r2,r2,20476
    fec4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    fec8:	00800074 	movhi	r2,1
    fecc:	1093ff04 	addi	r2,r2,20476
    fed0:	10800017 	ldw	r2,0(r2)
    fed4:	100170fa 	wrctl	ienable,r2
    fed8:	e0bffa17 	ldw	r2,-24(fp)
    fedc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fee0:	e0bffb17 	ldw	r2,-20(fp)
    fee4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    fee8:	0005883a 	mov	r2,zero
    feec:	e0bff115 	stw	r2,-60(fp)
    fef0:	e0bff217 	ldw	r2,-56(fp)
    fef4:	e0bffc15 	stw	r2,-16(fp)
    fef8:	e0bffc17 	ldw	r2,-16(fp)
    fefc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ff00:	e0bff117 	ldw	r2,-60(fp)
}
    ff04:	e037883a 	mov	sp,fp
    ff08:	df000017 	ldw	fp,0(sp)
    ff0c:	dec00104 	addi	sp,sp,4
    ff10:	f800283a 	ret

0000ff14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ff14:	defffe04 	addi	sp,sp,-8
    ff18:	dfc00115 	stw	ra,4(sp)
    ff1c:	df000015 	stw	fp,0(sp)
    ff20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff24:	00800074 	movhi	r2,1
    ff28:	108bf704 	addi	r2,r2,12252
    ff2c:	10800017 	ldw	r2,0(r2)
    ff30:	10000526 	beq	r2,zero,ff48 <alt_get_errno+0x34>
    ff34:	00800074 	movhi	r2,1
    ff38:	108bf704 	addi	r2,r2,12252
    ff3c:	10800017 	ldw	r2,0(r2)
    ff40:	103ee83a 	callr	r2
    ff44:	00000206 	br	ff50 <alt_get_errno+0x3c>
    ff48:	00800074 	movhi	r2,1
    ff4c:	1093e204 	addi	r2,r2,20360
}
    ff50:	e037883a 	mov	sp,fp
    ff54:	dfc00117 	ldw	ra,4(sp)
    ff58:	df000017 	ldw	fp,0(sp)
    ff5c:	dec00204 	addi	sp,sp,8
    ff60:	f800283a 	ret

0000ff64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ff64:	defffd04 	addi	sp,sp,-12
    ff68:	df000215 	stw	fp,8(sp)
    ff6c:	df000204 	addi	fp,sp,8
    ff70:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ff74:	e0bfff17 	ldw	r2,-4(fp)
    ff78:	10800217 	ldw	r2,8(r2)
    ff7c:	10d00034 	orhi	r3,r2,16384
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ff88:	e03ffe15 	stw	zero,-8(fp)
    ff8c:	00001d06 	br	10004 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ff90:	00800074 	movhi	r2,1
    ff94:	10868404 	addi	r2,r2,6672
    ff98:	e0fffe17 	ldw	r3,-8(fp)
    ff9c:	18c00324 	muli	r3,r3,12
    ffa0:	10c5883a 	add	r2,r2,r3
    ffa4:	10c00017 	ldw	r3,0(r2)
    ffa8:	e0bfff17 	ldw	r2,-4(fp)
    ffac:	10800017 	ldw	r2,0(r2)
    ffb0:	1880111e 	bne	r3,r2,fff8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ffb4:	00800074 	movhi	r2,1
    ffb8:	10868404 	addi	r2,r2,6672
    ffbc:	e0fffe17 	ldw	r3,-8(fp)
    ffc0:	18c00324 	muli	r3,r3,12
    ffc4:	18c00204 	addi	r3,r3,8
    ffc8:	10c5883a 	add	r2,r2,r3
    ffcc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ffd0:	1000090e 	bge	r2,zero,fff8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ffd4:	e0bffe17 	ldw	r2,-8(fp)
    ffd8:	10c00324 	muli	r3,r2,12
    ffdc:	00800074 	movhi	r2,1
    ffe0:	10868404 	addi	r2,r2,6672
    ffe4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ffe8:	e0bfff17 	ldw	r2,-4(fp)
    ffec:	18800226 	beq	r3,r2,fff8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    fff0:	00bffcc4 	movi	r2,-13
    fff4:	00000a06 	br	10020 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    fff8:	e0bffe17 	ldw	r2,-8(fp)
    fffc:	10800044 	addi	r2,r2,1
   10000:	e0bffe15 	stw	r2,-8(fp)
   10004:	00800074 	movhi	r2,1
   10008:	108bf604 	addi	r2,r2,12248
   1000c:	10800017 	ldw	r2,0(r2)
   10010:	1007883a 	mov	r3,r2
   10014:	e0bffe17 	ldw	r2,-8(fp)
   10018:	18bfdd2e 	bgeu	r3,r2,ff90 <__alt_mem_Flash_flash_data+0xf400ff90>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1001c:	0005883a 	mov	r2,zero
}
   10020:	e037883a 	mov	sp,fp
   10024:	df000017 	ldw	fp,0(sp)
   10028:	dec00104 	addi	sp,sp,4
   1002c:	f800283a 	ret

00010030 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10030:	defff604 	addi	sp,sp,-40
   10034:	dfc00915 	stw	ra,36(sp)
   10038:	df000815 	stw	fp,32(sp)
   1003c:	df000804 	addi	fp,sp,32
   10040:	e13ffd15 	stw	r4,-12(fp)
   10044:	e17ffe15 	stw	r5,-8(fp)
   10048:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1004c:	00bfffc4 	movi	r2,-1
   10050:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10054:	00bffb44 	movi	r2,-19
   10058:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1005c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10060:	e13ffd17 	ldw	r4,-12(fp)
   10064:	01400074 	movhi	r5,1
   10068:	294bf404 	addi	r5,r5,12240
   1006c:	000fb6c0 	call	fb6c <alt_find_dev>
   10070:	e0bff815 	stw	r2,-32(fp)
   10074:	e0bff817 	ldw	r2,-32(fp)
   10078:	1000051e 	bne	r2,zero,10090 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1007c:	e13ffd17 	ldw	r4,-12(fp)
   10080:	00106780 	call	10678 <alt_find_file>
   10084:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10088:	00800044 	movi	r2,1
   1008c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10090:	e0bff817 	ldw	r2,-32(fp)
   10094:	10002926 	beq	r2,zero,1013c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10098:	e13ff817 	ldw	r4,-32(fp)
   1009c:	001078c0 	call	1078c <alt_get_fd>
   100a0:	e0bff915 	stw	r2,-28(fp)
   100a4:	e0bff917 	ldw	r2,-28(fp)
   100a8:	1000030e 	bge	r2,zero,100b8 <open+0x88>
    {
      status = index;
   100ac:	e0bff917 	ldw	r2,-28(fp)
   100b0:	e0bffa15 	stw	r2,-24(fp)
   100b4:	00002306 	br	10144 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   100b8:	e0bff917 	ldw	r2,-28(fp)
   100bc:	10c00324 	muli	r3,r2,12
   100c0:	00800074 	movhi	r2,1
   100c4:	10868404 	addi	r2,r2,6672
   100c8:	1885883a 	add	r2,r3,r2
   100cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   100d0:	e0fffe17 	ldw	r3,-8(fp)
   100d4:	00900034 	movhi	r2,16384
   100d8:	10bfffc4 	addi	r2,r2,-1
   100dc:	1886703a 	and	r3,r3,r2
   100e0:	e0bffc17 	ldw	r2,-16(fp)
   100e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   100e8:	e0bffb17 	ldw	r2,-20(fp)
   100ec:	1000051e 	bne	r2,zero,10104 <open+0xd4>
   100f0:	e13ffc17 	ldw	r4,-16(fp)
   100f4:	000ff640 	call	ff64 <alt_file_locked>
   100f8:	e0bffa15 	stw	r2,-24(fp)
   100fc:	e0bffa17 	ldw	r2,-24(fp)
   10100:	10001016 	blt	r2,zero,10144 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10104:	e0bff817 	ldw	r2,-32(fp)
   10108:	10800317 	ldw	r2,12(r2)
   1010c:	10000826 	beq	r2,zero,10130 <open+0x100>
   10110:	e0bff817 	ldw	r2,-32(fp)
   10114:	10800317 	ldw	r2,12(r2)
   10118:	e13ffc17 	ldw	r4,-16(fp)
   1011c:	e17ffd17 	ldw	r5,-12(fp)
   10120:	e1bffe17 	ldw	r6,-8(fp)
   10124:	e1ffff17 	ldw	r7,-4(fp)
   10128:	103ee83a 	callr	r2
   1012c:	00000106 	br	10134 <open+0x104>
   10130:	0005883a 	mov	r2,zero
   10134:	e0bffa15 	stw	r2,-24(fp)
   10138:	00000206 	br	10144 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1013c:	00bffb44 	movi	r2,-19
   10140:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10144:	e0bffa17 	ldw	r2,-24(fp)
   10148:	1000090e 	bge	r2,zero,10170 <open+0x140>
  {
    alt_release_fd (index);  
   1014c:	e13ff917 	ldw	r4,-28(fp)
   10150:	0004e480 	call	4e48 <alt_release_fd>
    ALT_ERRNO = -status;
   10154:	000ff140 	call	ff14 <alt_get_errno>
   10158:	1007883a 	mov	r3,r2
   1015c:	e0bffa17 	ldw	r2,-24(fp)
   10160:	0085c83a 	sub	r2,zero,r2
   10164:	18800015 	stw	r2,0(r3)
    return -1;
   10168:	00bfffc4 	movi	r2,-1
   1016c:	00000106 	br	10174 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   10170:	e0bff917 	ldw	r2,-28(fp)
}
   10174:	e037883a 	mov	sp,fp
   10178:	dfc00117 	ldw	ra,4(sp)
   1017c:	df000017 	ldw	fp,0(sp)
   10180:	dec00204 	addi	sp,sp,8
   10184:	f800283a 	ret

00010188 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10188:	defffa04 	addi	sp,sp,-24
   1018c:	df000515 	stw	fp,20(sp)
   10190:	df000504 	addi	fp,sp,20
   10194:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10198:	0005303a 	rdctl	r2,status
   1019c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101a0:	e0fffc17 	ldw	r3,-16(fp)
   101a4:	00bfff84 	movi	r2,-2
   101a8:	1884703a 	and	r2,r3,r2
   101ac:	1001703a 	wrctl	status,r2
  
  return context;
   101b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   101b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   101b8:	e0bfff17 	ldw	r2,-4(fp)
   101bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   101c0:	e0bffd17 	ldw	r2,-12(fp)
   101c4:	10800017 	ldw	r2,0(r2)
   101c8:	e0fffd17 	ldw	r3,-12(fp)
   101cc:	18c00117 	ldw	r3,4(r3)
   101d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   101d4:	e0bffd17 	ldw	r2,-12(fp)
   101d8:	10800117 	ldw	r2,4(r2)
   101dc:	e0fffd17 	ldw	r3,-12(fp)
   101e0:	18c00017 	ldw	r3,0(r3)
   101e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   101e8:	e0bffd17 	ldw	r2,-12(fp)
   101ec:	e0fffd17 	ldw	r3,-12(fp)
   101f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   101f4:	e0bffd17 	ldw	r2,-12(fp)
   101f8:	e0fffd17 	ldw	r3,-12(fp)
   101fc:	10c00015 	stw	r3,0(r2)
   10200:	e0bffb17 	ldw	r2,-20(fp)
   10204:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10208:	e0bffe17 	ldw	r2,-8(fp)
   1020c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10210:	e037883a 	mov	sp,fp
   10214:	df000017 	ldw	fp,0(sp)
   10218:	dec00104 	addi	sp,sp,4
   1021c:	f800283a 	ret

00010220 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10220:	defffb04 	addi	sp,sp,-20
   10224:	dfc00415 	stw	ra,16(sp)
   10228:	df000315 	stw	fp,12(sp)
   1022c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10230:	d0a03917 	ldw	r2,-32540(gp)
   10234:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10238:	d0a82117 	ldw	r2,-24444(gp)
   1023c:	10800044 	addi	r2,r2,1
   10240:	d0a82115 	stw	r2,-24444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10244:	00002e06 	br	10300 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10248:	e0bffd17 	ldw	r2,-12(fp)
   1024c:	10800017 	ldw	r2,0(r2)
   10250:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10254:	e0bffd17 	ldw	r2,-12(fp)
   10258:	10800403 	ldbu	r2,16(r2)
   1025c:	10803fcc 	andi	r2,r2,255
   10260:	10000426 	beq	r2,zero,10274 <alt_tick+0x54>
   10264:	d0a82117 	ldw	r2,-24444(gp)
   10268:	1000021e 	bne	r2,zero,10274 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1026c:	e0bffd17 	ldw	r2,-12(fp)
   10270:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	10800217 	ldw	r2,8(r2)
   1027c:	d0e82117 	ldw	r3,-24444(gp)
   10280:	18801d36 	bltu	r3,r2,102f8 <alt_tick+0xd8>
   10284:	e0bffd17 	ldw	r2,-12(fp)
   10288:	10800403 	ldbu	r2,16(r2)
   1028c:	10803fcc 	andi	r2,r2,255
   10290:	1000191e 	bne	r2,zero,102f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10294:	e0bffd17 	ldw	r2,-12(fp)
   10298:	10800317 	ldw	r2,12(r2)
   1029c:	e0fffd17 	ldw	r3,-12(fp)
   102a0:	18c00517 	ldw	r3,20(r3)
   102a4:	1809883a 	mov	r4,r3
   102a8:	103ee83a 	callr	r2
   102ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   102b0:	e0bfff17 	ldw	r2,-4(fp)
   102b4:	1000031e 	bne	r2,zero,102c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   102b8:	e13ffd17 	ldw	r4,-12(fp)
   102bc:	00101880 	call	10188 <alt_alarm_stop>
   102c0:	00000d06 	br	102f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	10c00217 	ldw	r3,8(r2)
   102cc:	e0bfff17 	ldw	r2,-4(fp)
   102d0:	1887883a 	add	r3,r3,r2
   102d4:	e0bffd17 	ldw	r2,-12(fp)
   102d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   102dc:	e0bffd17 	ldw	r2,-12(fp)
   102e0:	10c00217 	ldw	r3,8(r2)
   102e4:	d0a82117 	ldw	r2,-24444(gp)
   102e8:	1880032e 	bgeu	r3,r2,102f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   102ec:	e0bffd17 	ldw	r2,-12(fp)
   102f0:	00c00044 	movi	r3,1
   102f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   102f8:	e0bffe17 	ldw	r2,-8(fp)
   102fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10300:	e0fffd17 	ldw	r3,-12(fp)
   10304:	d0a03904 	addi	r2,gp,-32540
   10308:	18bfcf1e 	bne	r3,r2,10248 <__alt_mem_Flash_flash_data+0xf4010248>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1030c:	00060540 	call	6054 <OSTimeTick>
}
   10310:	e037883a 	mov	sp,fp
   10314:	dfc00117 	ldw	ra,4(sp)
   10318:	df000017 	ldw	fp,0(sp)
   1031c:	dec00204 	addi	sp,sp,8
   10320:	f800283a 	ret

00010324 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10324:	deffff04 	addi	sp,sp,-4
   10328:	df000015 	stw	fp,0(sp)
   1032c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10330:	000170fa 	wrctl	ienable,zero
}
   10334:	e037883a 	mov	sp,fp
   10338:	df000017 	ldw	fp,0(sp)
   1033c:	dec00104 	addi	sp,sp,4
   10340:	f800283a 	ret

00010344 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   10344:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   10348:	d0e00f17 	ldw	r3,-32708(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1034c:	d1281a17 	ldw	r4,-24472(gp)

      stw ra,  0(sp)
   10350:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   10354:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   10358:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1035c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   10360:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   10364:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   10368:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1036c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   10370:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   10374:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   10378:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1037c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   10380:	00105b00 	call	105b0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   10384:	d1281517 	ldw	r4,-24492(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   10388:	d1680d07 	ldb	r5,-24524(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1038c:	d1281a15 	stw	r4,-24472(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   10390:	d1680d45 	stb	r5,-24523(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   10394:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   10398:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1039c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   103a0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   103a4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   103a8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   103ac:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   103b0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   103b4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   103b8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   103bc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   103c0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   103c4:	d0e00f15 	stw	r3,-32708(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   103c8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   103cc:	f800283a 	ret

000103d0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   103d0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   103d4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   103d8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   103dc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   103e0:	00105b00 	call	105b0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   103e4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   103e8:	d4a80b45 	stb	r18,-24531(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   103ec:	003fe506 	br	10384 <__alt_mem_Flash_flash_data+0xf4010384>

000103f0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   103f0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   103f4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   103f8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   103fc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   10400:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   10404:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   10408:	dec00204 	addi	sp,sp,8

      callr r2
   1040c:	103ee83a 	callr	r2

      nop
   10410:	0001883a 	nop

00010414 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   10414:	defff704 	addi	sp,sp,-36
   10418:	dfc00815 	stw	ra,32(sp)
   1041c:	df000715 	stw	fp,28(sp)
   10420:	df000704 	addi	fp,sp,28
   10424:	e13ffc15 	stw	r4,-16(fp)
   10428:	e17ffd15 	stw	r5,-12(fp)
   1042c:	e1bffe15 	stw	r6,-8(fp)
   10430:	3805883a 	mov	r2,r7
   10434:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   10438:	e0fffe17 	ldw	r3,-8(fp)
   1043c:	00bfff04 	movi	r2,-4
   10440:	1884703a 	and	r2,r3,r2
   10444:	10bef704 	addi	r2,r2,-1060
   10448:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1044c:	e13ff917 	ldw	r4,-28(fp)
   10450:	000b883a 	mov	r5,zero
   10454:	01810904 	movi	r6,1060
   10458:	000403c0 	call	403c <memset>
   1045c:	e0bff917 	ldw	r2,-28(fp)
   10460:	10c0bb04 	addi	r3,r2,748
   10464:	e0bff917 	ldw	r2,-28(fp)
   10468:	10c00115 	stw	r3,4(r2)
   1046c:	e0bff917 	ldw	r2,-28(fp)
   10470:	10c0d504 	addi	r3,r2,852
   10474:	e0bff917 	ldw	r2,-28(fp)
   10478:	10c00215 	stw	r3,8(r2)
   1047c:	e0bff917 	ldw	r2,-28(fp)
   10480:	10c0ef04 	addi	r3,r2,956
   10484:	e0bff917 	ldw	r2,-28(fp)
   10488:	10c00315 	stw	r3,12(r2)
   1048c:	e0fff917 	ldw	r3,-28(fp)
   10490:	00800074 	movhi	r2,1
   10494:	10846e04 	addi	r2,r2,4536
   10498:	18800d15 	stw	r2,52(r3)
   1049c:	e0bff917 	ldw	r2,-28(fp)
   104a0:	00c00044 	movi	r3,1
   104a4:	10c02915 	stw	r3,164(r2)
   104a8:	10002a15 	stw	zero,168(r2)
   104ac:	e0bff917 	ldw	r2,-28(fp)
   104b0:	00ccc384 	movi	r3,13070
   104b4:	10c02b0d 	sth	r3,172(r2)
   104b8:	e0bff917 	ldw	r2,-28(fp)
   104bc:	00eaf344 	movi	r3,-21555
   104c0:	10c02b8d 	sth	r3,174(r2)
   104c4:	e0bff917 	ldw	r2,-28(fp)
   104c8:	00c48d04 	movi	r3,4660
   104cc:	10c02c0d 	sth	r3,176(r2)
   104d0:	e0bff917 	ldw	r2,-28(fp)
   104d4:	00f99b44 	movi	r3,-6547
   104d8:	10c02c8d 	sth	r3,178(r2)
   104dc:	e0bff917 	ldw	r2,-28(fp)
   104e0:	00f7bb04 	movi	r3,-8468
   104e4:	10c02d0d 	sth	r3,180(r2)
   104e8:	e0bff917 	ldw	r2,-28(fp)
   104ec:	00c00144 	movi	r3,5
   104f0:	10c02d8d 	sth	r3,182(r2)
   104f4:	e0bff917 	ldw	r2,-28(fp)
   104f8:	00c002c4 	movi	r3,11
   104fc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   10500:	e0bff917 	ldw	r2,-28(fp)
   10504:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   10508:	e0bffa17 	ldw	r2,-24(fp)
   1050c:	10bff304 	addi	r2,r2,-52
   10510:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   10514:	e0bffb17 	ldw	r2,-20(fp)
   10518:	10800c04 	addi	r2,r2,48
   1051c:	e0fffc17 	ldw	r3,-16(fp)
   10520:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   10524:	e0bffb17 	ldw	r2,-20(fp)
   10528:	10800b04 	addi	r2,r2,44
   1052c:	e0fffd17 	ldw	r3,-12(fp)
   10530:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   10534:	e0bffb17 	ldw	r2,-20(fp)
   10538:	10800a04 	addi	r2,r2,40
   1053c:	e0fff917 	ldw	r3,-28(fp)
   10540:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   10544:	00800074 	movhi	r2,1
   10548:	1080fc04 	addi	r2,r2,1008
   1054c:	10c00104 	addi	r3,r2,4
   10550:	e0bffb17 	ldw	r2,-20(fp)
   10554:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   10558:	e0bffb17 	ldw	r2,-20(fp)
}
   1055c:	e037883a 	mov	sp,fp
   10560:	dfc00117 	ldw	ra,4(sp)
   10564:	df000017 	ldw	fp,0(sp)
   10568:	dec00204 	addi	sp,sp,8
   1056c:	f800283a 	ret

00010570 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   10570:	defffe04 	addi	sp,sp,-8
   10574:	df000115 	stw	fp,4(sp)
   10578:	df000104 	addi	fp,sp,4
   1057c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   10580:	e037883a 	mov	sp,fp
   10584:	df000017 	ldw	fp,0(sp)
   10588:	dec00104 	addi	sp,sp,4
   1058c:	f800283a 	ret

00010590 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   10590:	defffe04 	addi	sp,sp,-8
   10594:	df000115 	stw	fp,4(sp)
   10598:	df000104 	addi	fp,sp,4
   1059c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   105a0:	e037883a 	mov	sp,fp
   105a4:	df000017 	ldw	fp,0(sp)
   105a8:	dec00104 	addi	sp,sp,4
   105ac:	f800283a 	ret

000105b0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   105b0:	deffff04 	addi	sp,sp,-4
   105b4:	df000015 	stw	fp,0(sp)
   105b8:	d839883a 	mov	fp,sp
}
   105bc:	e037883a 	mov	sp,fp
   105c0:	df000017 	ldw	fp,0(sp)
   105c4:	dec00104 	addi	sp,sp,4
   105c8:	f800283a 	ret

000105cc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   105cc:	deffff04 	addi	sp,sp,-4
   105d0:	df000015 	stw	fp,0(sp)
   105d4:	d839883a 	mov	fp,sp
}
   105d8:	e037883a 	mov	sp,fp
   105dc:	df000017 	ldw	fp,0(sp)
   105e0:	dec00104 	addi	sp,sp,4
   105e4:	f800283a 	ret

000105e8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   105e8:	deffff04 	addi	sp,sp,-4
   105ec:	df000015 	stw	fp,0(sp)
   105f0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   105f4:	e037883a 	mov	sp,fp
   105f8:	df000017 	ldw	fp,0(sp)
   105fc:	dec00104 	addi	sp,sp,4
   10600:	f800283a 	ret

00010604 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   10604:	deffff04 	addi	sp,sp,-4
   10608:	df000015 	stw	fp,0(sp)
   1060c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   10610:	e037883a 	mov	sp,fp
   10614:	df000017 	ldw	fp,0(sp)
   10618:	dec00104 	addi	sp,sp,4
   1061c:	f800283a 	ret

00010620 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   10620:	deffff04 	addi	sp,sp,-4
   10624:	df000015 	stw	fp,0(sp)
   10628:	d839883a 	mov	fp,sp
}
   1062c:	e037883a 	mov	sp,fp
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00104 	addi	sp,sp,4
   10638:	f800283a 	ret

0001063c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1063c:	deffff04 	addi	sp,sp,-4
   10640:	df000015 	stw	fp,0(sp)
   10644:	d839883a 	mov	fp,sp
}
   10648:	e037883a 	mov	sp,fp
   1064c:	df000017 	ldw	fp,0(sp)
   10650:	dec00104 	addi	sp,sp,4
   10654:	f800283a 	ret

00010658 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   10658:	defffe04 	addi	sp,sp,-8
   1065c:	df000115 	stw	fp,4(sp)
   10660:	df000104 	addi	fp,sp,4
   10664:	e13fff15 	stw	r4,-4(fp)
}
   10668:	e037883a 	mov	sp,fp
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00104 	addi	sp,sp,4
   10674:	f800283a 	ret

00010678 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10678:	defffb04 	addi	sp,sp,-20
   1067c:	dfc00415 	stw	ra,16(sp)
   10680:	df000315 	stw	fp,12(sp)
   10684:	df000304 	addi	fp,sp,12
   10688:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1068c:	00800074 	movhi	r2,1
   10690:	108bf204 	addi	r2,r2,12232
   10694:	10800017 	ldw	r2,0(r2)
   10698:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1069c:	00003106 	br	10764 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   106a0:	e0bffd17 	ldw	r2,-12(fp)
   106a4:	10800217 	ldw	r2,8(r2)
   106a8:	1009883a 	mov	r4,r2
   106ac:	0001b280 	call	1b28 <strlen>
   106b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   106b4:	e0bffd17 	ldw	r2,-12(fp)
   106b8:	10c00217 	ldw	r3,8(r2)
   106bc:	e0bffe17 	ldw	r2,-8(fp)
   106c0:	10bfffc4 	addi	r2,r2,-1
   106c4:	1885883a 	add	r2,r3,r2
   106c8:	10800003 	ldbu	r2,0(r2)
   106cc:	10803fcc 	andi	r2,r2,255
   106d0:	1080201c 	xori	r2,r2,128
   106d4:	10bfe004 	addi	r2,r2,-128
   106d8:	10800bd8 	cmpnei	r2,r2,47
   106dc:	1000031e 	bne	r2,zero,106ec <alt_find_file+0x74>
    {
      len -= 1;
   106e0:	e0bffe17 	ldw	r2,-8(fp)
   106e4:	10bfffc4 	addi	r2,r2,-1
   106e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   106ec:	e0bffe17 	ldw	r2,-8(fp)
   106f0:	e0ffff17 	ldw	r3,-4(fp)
   106f4:	1885883a 	add	r2,r3,r2
   106f8:	10800003 	ldbu	r2,0(r2)
   106fc:	10803fcc 	andi	r2,r2,255
   10700:	1080201c 	xori	r2,r2,128
   10704:	10bfe004 	addi	r2,r2,-128
   10708:	10800be0 	cmpeqi	r2,r2,47
   1070c:	1000081e 	bne	r2,zero,10730 <alt_find_file+0xb8>
   10710:	e0bffe17 	ldw	r2,-8(fp)
   10714:	e0ffff17 	ldw	r3,-4(fp)
   10718:	1885883a 	add	r2,r3,r2
   1071c:	10800003 	ldbu	r2,0(r2)
   10720:	10803fcc 	andi	r2,r2,255
   10724:	1080201c 	xori	r2,r2,128
   10728:	10bfe004 	addi	r2,r2,-128
   1072c:	10000a1e 	bne	r2,zero,10758 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   10730:	e0bffd17 	ldw	r2,-12(fp)
   10734:	10c00217 	ldw	r3,8(r2)
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	1809883a 	mov	r4,r3
   10740:	e17fff17 	ldw	r5,-4(fp)
   10744:	100d883a 	mov	r6,r2
   10748:	00109fc0 	call	109fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1074c:	1000021e 	bne	r2,zero,10758 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10750:	e0bffd17 	ldw	r2,-12(fp)
   10754:	00000806 	br	10778 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   10758:	e0bffd17 	ldw	r2,-12(fp)
   1075c:	10800017 	ldw	r2,0(r2)
   10760:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10764:	e0fffd17 	ldw	r3,-12(fp)
   10768:	00800074 	movhi	r2,1
   1076c:	108bf204 	addi	r2,r2,12232
   10770:	18bfcb1e 	bne	r3,r2,106a0 <__alt_mem_Flash_flash_data+0xf40106a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10774:	0005883a 	mov	r2,zero
}
   10778:	e037883a 	mov	sp,fp
   1077c:	dfc00117 	ldw	ra,4(sp)
   10780:	df000017 	ldw	fp,0(sp)
   10784:	dec00204 	addi	sp,sp,8
   10788:	f800283a 	ret

0001078c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1078c:	defff904 	addi	sp,sp,-28
   10790:	dfc00615 	stw	ra,24(sp)
   10794:	df000515 	stw	fp,20(sp)
   10798:	df000504 	addi	fp,sp,20
   1079c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   107a0:	00bffa04 	movi	r2,-24
   107a4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   107a8:	00800074 	movhi	r2,1
   107ac:	1093e304 	addi	r2,r2,20364
   107b0:	10800017 	ldw	r2,0(r2)
   107b4:	e0bffd15 	stw	r2,-12(fp)
   107b8:	e03ffe0d 	sth	zero,-8(fp)
   107bc:	e0fffe0b 	ldhu	r3,-8(fp)
   107c0:	e0bffe84 	addi	r2,fp,-6
   107c4:	e13ffd17 	ldw	r4,-12(fp)
   107c8:	180b883a 	mov	r5,r3
   107cc:	100d883a 	mov	r6,r2
   107d0:	000aaf00 	call	aaf0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   107d4:	e03ffb15 	stw	zero,-20(fp)
   107d8:	00001d06 	br	10850 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   107dc:	00800074 	movhi	r2,1
   107e0:	10868404 	addi	r2,r2,6672
   107e4:	e0fffb17 	ldw	r3,-20(fp)
   107e8:	18c00324 	muli	r3,r3,12
   107ec:	10c5883a 	add	r2,r2,r3
   107f0:	10800017 	ldw	r2,0(r2)
   107f4:	1000131e 	bne	r2,zero,10844 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   107f8:	00800074 	movhi	r2,1
   107fc:	10868404 	addi	r2,r2,6672
   10800:	e0fffb17 	ldw	r3,-20(fp)
   10804:	18c00324 	muli	r3,r3,12
   10808:	10c5883a 	add	r2,r2,r3
   1080c:	e0ffff17 	ldw	r3,-4(fp)
   10810:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10814:	00800074 	movhi	r2,1
   10818:	108bf604 	addi	r2,r2,12248
   1081c:	10c00017 	ldw	r3,0(r2)
   10820:	e0bffb17 	ldw	r2,-20(fp)
   10824:	1880040e 	bge	r3,r2,10838 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   10828:	00800074 	movhi	r2,1
   1082c:	108bf604 	addi	r2,r2,12248
   10830:	e0fffb17 	ldw	r3,-20(fp)
   10834:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   10838:	e0bffb17 	ldw	r2,-20(fp)
   1083c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   10840:	00000606 	br	1085c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10844:	e0bffb17 	ldw	r2,-20(fp)
   10848:	10800044 	addi	r2,r2,1
   1084c:	e0bffb15 	stw	r2,-20(fp)
   10850:	e0bffb17 	ldw	r2,-20(fp)
   10854:	10800810 	cmplti	r2,r2,32
   10858:	103fe01e 	bne	r2,zero,107dc <__alt_mem_Flash_flash_data+0xf40107dc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1085c:	00800074 	movhi	r2,1
   10860:	1093e304 	addi	r2,r2,20364
   10864:	10800017 	ldw	r2,0(r2)
   10868:	1009883a 	mov	r4,r2
   1086c:	000aec40 	call	aec4 <OSSemPost>

  return rc;
   10870:	e0bffc17 	ldw	r2,-16(fp)
}
   10874:	e037883a 	mov	sp,fp
   10878:	dfc00117 	ldw	ra,4(sp)
   1087c:	df000017 	ldw	fp,0(sp)
   10880:	dec00204 	addi	sp,sp,8
   10884:	f800283a 	ret

00010888 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10888:	defffb04 	addi	sp,sp,-20
   1088c:	df000415 	stw	fp,16(sp)
   10890:	df000404 	addi	fp,sp,16
   10894:	e13ffe15 	stw	r4,-8(fp)
   10898:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1089c:	e0bfff17 	ldw	r2,-4(fp)
   108a0:	10840070 	cmpltui	r2,r2,4097
   108a4:	1000021e 	bne	r2,zero,108b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   108a8:	00840004 	movi	r2,4096
   108ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   108b0:	e0fffe17 	ldw	r3,-8(fp)
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	1885883a 	add	r2,r3,r2
   108bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   108c0:	e0bffe17 	ldw	r2,-8(fp)
   108c4:	e0bffc15 	stw	r2,-16(fp)
   108c8:	00000506 	br	108e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   108cc:	e0bffc17 	ldw	r2,-16(fp)
   108d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	10800804 	addi	r2,r2,32
   108dc:	e0bffc15 	stw	r2,-16(fp)
   108e0:	e0fffc17 	ldw	r3,-16(fp)
   108e4:	e0bffd17 	ldw	r2,-12(fp)
   108e8:	18bff836 	bltu	r3,r2,108cc <__alt_mem_Flash_flash_data+0xf40108cc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   108ec:	e0bffe17 	ldw	r2,-8(fp)
   108f0:	108007cc 	andi	r2,r2,31
   108f4:	10000226 	beq	r2,zero,10900 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   108f8:	e0bffc17 	ldw	r2,-16(fp)
   108fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10900:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10904:	e037883a 	mov	sp,fp
   10908:	df000017 	ldw	fp,0(sp)
   1090c:	dec00104 	addi	sp,sp,4
   10910:	f800283a 	ret

00010914 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10914:	defffe04 	addi	sp,sp,-8
   10918:	df000115 	stw	fp,4(sp)
   1091c:	df000104 	addi	fp,sp,4
   10920:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10924:	e0bfff17 	ldw	r2,-4(fp)
   10928:	10bffe84 	addi	r2,r2,-6
   1092c:	10c00428 	cmpgeui	r3,r2,16
   10930:	18001a1e 	bne	r3,zero,1099c <alt_exception_cause_generated_bad_addr+0x88>
   10934:	100690ba 	slli	r3,r2,2
   10938:	00800074 	movhi	r2,1
   1093c:	10825304 	addi	r2,r2,2380
   10940:	1885883a 	add	r2,r3,r2
   10944:	10800017 	ldw	r2,0(r2)
   10948:	1000683a 	jmp	r2
   1094c:	0001098c 	andi	zero,zero,1062
   10950:	0001098c 	andi	zero,zero,1062
   10954:	0001099c 	xori	zero,zero,1062
   10958:	0001099c 	xori	zero,zero,1062
   1095c:	0001099c 	xori	zero,zero,1062
   10960:	0001098c 	andi	zero,zero,1062
   10964:	00010994 	movui	zero,1062
   10968:	0001099c 	xori	zero,zero,1062
   1096c:	0001098c 	andi	zero,zero,1062
   10970:	0001098c 	andi	zero,zero,1062
   10974:	0001099c 	xori	zero,zero,1062
   10978:	0001098c 	andi	zero,zero,1062
   1097c:	00010994 	movui	zero,1062
   10980:	0001099c 	xori	zero,zero,1062
   10984:	0001099c 	xori	zero,zero,1062
   10988:	0001098c 	andi	zero,zero,1062
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1098c:	00800044 	movi	r2,1
   10990:	00000306 	br	109a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10994:	0005883a 	mov	r2,zero
   10998:	00000106 	br	109a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1099c:	0005883a 	mov	r2,zero
  }
}
   109a0:	e037883a 	mov	sp,fp
   109a4:	df000017 	ldw	fp,0(sp)
   109a8:	dec00104 	addi	sp,sp,4
   109ac:	f800283a 	ret

000109b0 <atexit>:
   109b0:	200b883a 	mov	r5,r4
   109b4:	000d883a 	mov	r6,zero
   109b8:	0009883a 	mov	r4,zero
   109bc:	000f883a 	mov	r7,zero
   109c0:	0010b1c1 	jmpi	10b1c <__register_exitproc>

000109c4 <exit>:
   109c4:	defffe04 	addi	sp,sp,-8
   109c8:	000b883a 	mov	r5,zero
   109cc:	dc000015 	stw	r16,0(sp)
   109d0:	dfc00115 	stw	ra,4(sp)
   109d4:	2021883a 	mov	r16,r4
   109d8:	0010c300 	call	10c30 <__call_exitprocs>
   109dc:	00800074 	movhi	r2,1
   109e0:	108bee04 	addi	r2,r2,12216
   109e4:	11000017 	ldw	r4,0(r2)
   109e8:	20800f17 	ldw	r2,60(r4)
   109ec:	10000126 	beq	r2,zero,109f4 <exit+0x30>
   109f0:	103ee83a 	callr	r2
   109f4:	8009883a 	mov	r4,r16
   109f8:	0010dc40 	call	10dc4 <_exit>

000109fc <memcmp>:
   109fc:	01c000c4 	movi	r7,3
   10a00:	3980192e 	bgeu	r7,r6,10a68 <memcmp+0x6c>
   10a04:	2144b03a 	or	r2,r4,r5
   10a08:	11c4703a 	and	r2,r2,r7
   10a0c:	10000f26 	beq	r2,zero,10a4c <memcmp+0x50>
   10a10:	20800003 	ldbu	r2,0(r4)
   10a14:	28c00003 	ldbu	r3,0(r5)
   10a18:	10c0151e 	bne	r2,r3,10a70 <memcmp+0x74>
   10a1c:	31bfff84 	addi	r6,r6,-2
   10a20:	01ffffc4 	movi	r7,-1
   10a24:	00000406 	br	10a38 <memcmp+0x3c>
   10a28:	20800003 	ldbu	r2,0(r4)
   10a2c:	28c00003 	ldbu	r3,0(r5)
   10a30:	31bfffc4 	addi	r6,r6,-1
   10a34:	10c00e1e 	bne	r2,r3,10a70 <memcmp+0x74>
   10a38:	21000044 	addi	r4,r4,1
   10a3c:	29400044 	addi	r5,r5,1
   10a40:	31fff91e 	bne	r6,r7,10a28 <__alt_mem_Flash_flash_data+0xf4010a28>
   10a44:	0005883a 	mov	r2,zero
   10a48:	f800283a 	ret
   10a4c:	20c00017 	ldw	r3,0(r4)
   10a50:	28800017 	ldw	r2,0(r5)
   10a54:	1880041e 	bne	r3,r2,10a68 <memcmp+0x6c>
   10a58:	31bfff04 	addi	r6,r6,-4
   10a5c:	21000104 	addi	r4,r4,4
   10a60:	29400104 	addi	r5,r5,4
   10a64:	39bff936 	bltu	r7,r6,10a4c <__alt_mem_Flash_flash_data+0xf4010a4c>
   10a68:	303fe91e 	bne	r6,zero,10a10 <__alt_mem_Flash_flash_data+0xf4010a10>
   10a6c:	003ff506 	br	10a44 <__alt_mem_Flash_flash_data+0xf4010a44>
   10a70:	10c5c83a 	sub	r2,r2,r3
   10a74:	f800283a 	ret

00010a78 <strcmp>:
   10a78:	2144b03a 	or	r2,r4,r5
   10a7c:	108000cc 	andi	r2,r2,3
   10a80:	1000171e 	bne	r2,zero,10ae0 <strcmp+0x68>
   10a84:	20800017 	ldw	r2,0(r4)
   10a88:	28c00017 	ldw	r3,0(r5)
   10a8c:	10c0141e 	bne	r2,r3,10ae0 <strcmp+0x68>
   10a90:	027fbff4 	movhi	r9,65279
   10a94:	4a7fbfc4 	addi	r9,r9,-257
   10a98:	0086303a 	nor	r3,zero,r2
   10a9c:	02202074 	movhi	r8,32897
   10aa0:	1245883a 	add	r2,r2,r9
   10aa4:	42202004 	addi	r8,r8,-32640
   10aa8:	10c4703a 	and	r2,r2,r3
   10aac:	1204703a 	and	r2,r2,r8
   10ab0:	10000226 	beq	r2,zero,10abc <strcmp+0x44>
   10ab4:	00001706 	br	10b14 <strcmp+0x9c>
   10ab8:	1000161e 	bne	r2,zero,10b14 <strcmp+0x9c>
   10abc:	21000104 	addi	r4,r4,4
   10ac0:	20c00017 	ldw	r3,0(r4)
   10ac4:	29400104 	addi	r5,r5,4
   10ac8:	29800017 	ldw	r6,0(r5)
   10acc:	1a4f883a 	add	r7,r3,r9
   10ad0:	00c4303a 	nor	r2,zero,r3
   10ad4:	3884703a 	and	r2,r7,r2
   10ad8:	1204703a 	and	r2,r2,r8
   10adc:	19bff626 	beq	r3,r6,10ab8 <__alt_mem_Flash_flash_data+0xf4010ab8>
   10ae0:	20800007 	ldb	r2,0(r4)
   10ae4:	1000051e 	bne	r2,zero,10afc <strcmp+0x84>
   10ae8:	00000606 	br	10b04 <strcmp+0x8c>
   10aec:	21000044 	addi	r4,r4,1
   10af0:	20800007 	ldb	r2,0(r4)
   10af4:	29400044 	addi	r5,r5,1
   10af8:	10000226 	beq	r2,zero,10b04 <strcmp+0x8c>
   10afc:	28c00007 	ldb	r3,0(r5)
   10b00:	10fffa26 	beq	r2,r3,10aec <__alt_mem_Flash_flash_data+0xf4010aec>
   10b04:	20800003 	ldbu	r2,0(r4)
   10b08:	28c00003 	ldbu	r3,0(r5)
   10b0c:	10c5c83a 	sub	r2,r2,r3
   10b10:	f800283a 	ret
   10b14:	0005883a 	mov	r2,zero
   10b18:	f800283a 	ret

00010b1c <__register_exitproc>:
   10b1c:	00800074 	movhi	r2,1
   10b20:	defffa04 	addi	sp,sp,-24
   10b24:	108bee04 	addi	r2,r2,12216
   10b28:	dc000315 	stw	r16,12(sp)
   10b2c:	14000017 	ldw	r16,0(r2)
   10b30:	dc400415 	stw	r17,16(sp)
   10b34:	dfc00515 	stw	ra,20(sp)
   10b38:	80805217 	ldw	r2,328(r16)
   10b3c:	2023883a 	mov	r17,r4
   10b40:	10003626 	beq	r2,zero,10c1c <__register_exitproc+0x100>
   10b44:	10c00117 	ldw	r3,4(r2)
   10b48:	010007c4 	movi	r4,31
   10b4c:	20c00e16 	blt	r4,r3,10b88 <__register_exitproc+0x6c>
   10b50:	1a400044 	addi	r9,r3,1
   10b54:	8800211e 	bne	r17,zero,10bdc <__register_exitproc+0xc0>
   10b58:	18c00084 	addi	r3,r3,2
   10b5c:	18c7883a 	add	r3,r3,r3
   10b60:	18c7883a 	add	r3,r3,r3
   10b64:	12400115 	stw	r9,4(r2)
   10b68:	10c7883a 	add	r3,r2,r3
   10b6c:	19400015 	stw	r5,0(r3)
   10b70:	0005883a 	mov	r2,zero
   10b74:	dfc00517 	ldw	ra,20(sp)
   10b78:	dc400417 	ldw	r17,16(sp)
   10b7c:	dc000317 	ldw	r16,12(sp)
   10b80:	dec00604 	addi	sp,sp,24
   10b84:	f800283a 	ret
   10b88:	00800034 	movhi	r2,0
   10b8c:	10800004 	addi	r2,r2,0
   10b90:	10002526 	beq	r2,zero,10c28 <__register_exitproc+0x10c>
   10b94:	01006404 	movi	r4,400
   10b98:	d9400015 	stw	r5,0(sp)
   10b9c:	d9800115 	stw	r6,4(sp)
   10ba0:	d9c00215 	stw	r7,8(sp)
   10ba4:	00000000 	call	0 <__alt_mem_SDRAM>
   10ba8:	d9400017 	ldw	r5,0(sp)
   10bac:	d9800117 	ldw	r6,4(sp)
   10bb0:	d9c00217 	ldw	r7,8(sp)
   10bb4:	10001c26 	beq	r2,zero,10c28 <__register_exitproc+0x10c>
   10bb8:	80c05217 	ldw	r3,328(r16)
   10bbc:	10000115 	stw	zero,4(r2)
   10bc0:	02400044 	movi	r9,1
   10bc4:	10c00015 	stw	r3,0(r2)
   10bc8:	80805215 	stw	r2,328(r16)
   10bcc:	10006215 	stw	zero,392(r2)
   10bd0:	10006315 	stw	zero,396(r2)
   10bd4:	0007883a 	mov	r3,zero
   10bd8:	883fdf26 	beq	r17,zero,10b58 <__alt_mem_Flash_flash_data+0xf4010b58>
   10bdc:	18d1883a 	add	r8,r3,r3
   10be0:	4211883a 	add	r8,r8,r8
   10be4:	1211883a 	add	r8,r2,r8
   10be8:	41802215 	stw	r6,136(r8)
   10bec:	01000044 	movi	r4,1
   10bf0:	11806217 	ldw	r6,392(r2)
   10bf4:	20c8983a 	sll	r4,r4,r3
   10bf8:	310cb03a 	or	r6,r6,r4
   10bfc:	11806215 	stw	r6,392(r2)
   10c00:	41c04215 	stw	r7,264(r8)
   10c04:	01800084 	movi	r6,2
   10c08:	89bfd31e 	bne	r17,r6,10b58 <__alt_mem_Flash_flash_data+0xf4010b58>
   10c0c:	11806317 	ldw	r6,396(r2)
   10c10:	3108b03a 	or	r4,r6,r4
   10c14:	11006315 	stw	r4,396(r2)
   10c18:	003fcf06 	br	10b58 <__alt_mem_Flash_flash_data+0xf4010b58>
   10c1c:	80805304 	addi	r2,r16,332
   10c20:	80805215 	stw	r2,328(r16)
   10c24:	003fc706 	br	10b44 <__alt_mem_Flash_flash_data+0xf4010b44>
   10c28:	00bfffc4 	movi	r2,-1
   10c2c:	003fd106 	br	10b74 <__alt_mem_Flash_flash_data+0xf4010b74>

00010c30 <__call_exitprocs>:
   10c30:	00800074 	movhi	r2,1
   10c34:	108bee04 	addi	r2,r2,12216
   10c38:	10800017 	ldw	r2,0(r2)
   10c3c:	defff404 	addi	sp,sp,-48
   10c40:	dd800815 	stw	r22,32(sp)
   10c44:	d8800015 	stw	r2,0(sp)
   10c48:	10805204 	addi	r2,r2,328
   10c4c:	dd000615 	stw	r20,24(sp)
   10c50:	dc800415 	stw	r18,16(sp)
   10c54:	dfc00b15 	stw	ra,44(sp)
   10c58:	df000a15 	stw	fp,40(sp)
   10c5c:	ddc00915 	stw	r23,36(sp)
   10c60:	dd400715 	stw	r21,28(sp)
   10c64:	dcc00515 	stw	r19,20(sp)
   10c68:	dc400315 	stw	r17,12(sp)
   10c6c:	dc000215 	stw	r16,8(sp)
   10c70:	2025883a 	mov	r18,r4
   10c74:	2829883a 	mov	r20,r5
   10c78:	d8800115 	stw	r2,4(sp)
   10c7c:	05bfffc4 	movi	r22,-1
   10c80:	d8800017 	ldw	r2,0(sp)
   10c84:	14c05217 	ldw	r19,328(r2)
   10c88:	98001d26 	beq	r19,zero,10d00 <__call_exitprocs+0xd0>
   10c8c:	dd400117 	ldw	r21,4(sp)
   10c90:	98800117 	ldw	r2,4(r19)
   10c94:	173fffc4 	addi	fp,r2,-1
   10c98:	e0000d16 	blt	fp,zero,10cd0 <__call_exitprocs+0xa0>
   10c9c:	14000044 	addi	r16,r2,1
   10ca0:	8421883a 	add	r16,r16,r16
   10ca4:	8421883a 	add	r16,r16,r16
   10ca8:	84402004 	addi	r17,r16,128
   10cac:	9c63883a 	add	r17,r19,r17
   10cb0:	9c21883a 	add	r16,r19,r16
   10cb4:	a0001e26 	beq	r20,zero,10d30 <__call_exitprocs+0x100>
   10cb8:	80804017 	ldw	r2,256(r16)
   10cbc:	15001c26 	beq	r2,r20,10d30 <__call_exitprocs+0x100>
   10cc0:	e73fffc4 	addi	fp,fp,-1
   10cc4:	843fff04 	addi	r16,r16,-4
   10cc8:	8c7fff04 	addi	r17,r17,-4
   10ccc:	e5bff91e 	bne	fp,r22,10cb4 <__alt_mem_Flash_flash_data+0xf4010cb4>
   10cd0:	00800034 	movhi	r2,0
   10cd4:	10800004 	addi	r2,r2,0
   10cd8:	10000926 	beq	r2,zero,10d00 <__call_exitprocs+0xd0>
   10cdc:	98800117 	ldw	r2,4(r19)
   10ce0:	1000311e 	bne	r2,zero,10da8 <__call_exitprocs+0x178>
   10ce4:	98800017 	ldw	r2,0(r19)
   10ce8:	10003426 	beq	r2,zero,10dbc <__call_exitprocs+0x18c>
   10cec:	9809883a 	mov	r4,r19
   10cf0:	a8800015 	stw	r2,0(r21)
   10cf4:	00000000 	call	0 <__alt_mem_SDRAM>
   10cf8:	acc00017 	ldw	r19,0(r21)
   10cfc:	983fe41e 	bne	r19,zero,10c90 <__alt_mem_Flash_flash_data+0xf4010c90>
   10d00:	dfc00b17 	ldw	ra,44(sp)
   10d04:	df000a17 	ldw	fp,40(sp)
   10d08:	ddc00917 	ldw	r23,36(sp)
   10d0c:	dd800817 	ldw	r22,32(sp)
   10d10:	dd400717 	ldw	r21,28(sp)
   10d14:	dd000617 	ldw	r20,24(sp)
   10d18:	dcc00517 	ldw	r19,20(sp)
   10d1c:	dc800417 	ldw	r18,16(sp)
   10d20:	dc400317 	ldw	r17,12(sp)
   10d24:	dc000217 	ldw	r16,8(sp)
   10d28:	dec00c04 	addi	sp,sp,48
   10d2c:	f800283a 	ret
   10d30:	98800117 	ldw	r2,4(r19)
   10d34:	80c00017 	ldw	r3,0(r16)
   10d38:	10bfffc4 	addi	r2,r2,-1
   10d3c:	17001526 	beq	r2,fp,10d94 <__call_exitprocs+0x164>
   10d40:	80000015 	stw	zero,0(r16)
   10d44:	183fde26 	beq	r3,zero,10cc0 <__alt_mem_Flash_flash_data+0xf4010cc0>
   10d48:	00800044 	movi	r2,1
   10d4c:	1708983a 	sll	r4,r2,fp
   10d50:	98806217 	ldw	r2,392(r19)
   10d54:	9dc00117 	ldw	r23,4(r19)
   10d58:	2084703a 	and	r2,r4,r2
   10d5c:	1000061e 	bne	r2,zero,10d78 <__call_exitprocs+0x148>
   10d60:	183ee83a 	callr	r3
   10d64:	98800117 	ldw	r2,4(r19)
   10d68:	15ffc51e 	bne	r2,r23,10c80 <__alt_mem_Flash_flash_data+0xf4010c80>
   10d6c:	a8800017 	ldw	r2,0(r21)
   10d70:	14ffd326 	beq	r2,r19,10cc0 <__alt_mem_Flash_flash_data+0xf4010cc0>
   10d74:	003fc206 	br	10c80 <__alt_mem_Flash_flash_data+0xf4010c80>
   10d78:	98806317 	ldw	r2,396(r19)
   10d7c:	2084703a 	and	r2,r4,r2
   10d80:	1000061e 	bne	r2,zero,10d9c <__call_exitprocs+0x16c>
   10d84:	89400017 	ldw	r5,0(r17)
   10d88:	9009883a 	mov	r4,r18
   10d8c:	183ee83a 	callr	r3
   10d90:	003ff406 	br	10d64 <__alt_mem_Flash_flash_data+0xf4010d64>
   10d94:	9f000115 	stw	fp,4(r19)
   10d98:	003fea06 	br	10d44 <__alt_mem_Flash_flash_data+0xf4010d44>
   10d9c:	89000017 	ldw	r4,0(r17)
   10da0:	183ee83a 	callr	r3
   10da4:	003fef06 	br	10d64 <__alt_mem_Flash_flash_data+0xf4010d64>
   10da8:	98800017 	ldw	r2,0(r19)
   10dac:	982b883a 	mov	r21,r19
   10db0:	1027883a 	mov	r19,r2
   10db4:	983fb61e 	bne	r19,zero,10c90 <__alt_mem_Flash_flash_data+0xf4010c90>
   10db8:	003fd106 	br	10d00 <__alt_mem_Flash_flash_data+0xf4010d00>
   10dbc:	0005883a 	mov	r2,zero
   10dc0:	003ffa06 	br	10dac <__alt_mem_Flash_flash_data+0xf4010dac>

00010dc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10dc4:	defffd04 	addi	sp,sp,-12
   10dc8:	df000215 	stw	fp,8(sp)
   10dcc:	df000204 	addi	fp,sp,8
   10dd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   10dd4:	00800074 	movhi	r2,1
   10dd8:	1093eb44 	addi	r2,r2,20397
   10ddc:	10000005 	stb	zero,0(r2)
   10de0:	e0bfff17 	ldw	r2,-4(fp)
   10de4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   10de8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10dec:	10000226 	beq	r2,zero,10df8 <_exit+0x34>
    ALT_SIM_FAIL();
   10df0:	002af070 	cmpltui	zero,zero,43969
   10df4:	00000106 	br	10dfc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   10df8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   10dfc:	003fff06 	br	10dfc <__alt_mem_Flash_flash_data+0xf4010dfc>
