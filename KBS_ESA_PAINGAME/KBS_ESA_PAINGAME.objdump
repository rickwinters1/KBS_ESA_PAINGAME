
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010920 memsz 0x00010920 flags r-x
    LOAD off    0x00011940 vaddr 0x00010940 paddr 0x000127e0 align 2**12
         filesz 0x00001ea0 memsz 0x00001ea0 flags rw-
    LOAD off    0x00014680 vaddr 0x00014680 paddr 0x00014680 align 2**12
         filesz 0x00000000 memsz 0x0000d42c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010390  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000036c  000105d4  000105d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ea0  00010940  000127e0  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000d42c  00014680  00014680  00014680  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00021aac  00021aac  000137e0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  000137e0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000137e0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  00013808  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000234f5  00000000  00000000  000144d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008699  00000000  00000000  000379cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a533  00000000  00000000  00040066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000301c  00000000  00000000  0004a59c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000045a0  00000000  00000000  0004d5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000047e0  00000000  00000000  00051b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00056338  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005e8  00000000  00000000  00056358  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005b982  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005b988  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005b98d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005b98e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005b98f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005b993  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005b997  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0005b99b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0005b9a4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0005b9ad  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005b9b6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0005b9c1  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0005ba1f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000665e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000105d4 l    d  .rodata	00000000 .rodata
00010940 l    d  .rwdata	00000000 .rwdata
00014680 l    d  .bss	00000000 .bss
00021aac l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00010940 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00002d1c l     F .text	00000008 __fp_lock
00002d24 l     F .text	00000008 __fp_unlock
00002d38 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00003d88 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00003eb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003fd4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004000 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004100 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000041f4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000042d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000044d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012754 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000472c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00012758 l     O .rwdata	00000004 lockid
000146f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001275c l     O .rwdata	00000004 lockid
000146f8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00006160 l     F .text	00000044 OS_InitMisc
000061a4 l     F .text	00000068 OS_InitRdyList
00006304 l     F .text	000000e0 OS_InitTCBList
00006084 l     F .text	000000dc OS_InitEventList
0000620c l     F .text	0000007c OS_InitTaskIdle
00006288 l     F .text	0000007c OS_InitTaskStat
00006564 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00008368 l     F .text	00000110 OS_FlagTaskRdy
000080c0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000c810 l     F .text	00000038 alt_dev_reg
00011314 l     O .rwdata	0000106c JTAG_UART
00012380 l     O .rwdata	00000030 AV_Config
000123b0 l     O .rwdata	00000030 Audio_Subsystem_Audio
000123e0 l     O .rwdata	0000002c Char_LCD_16x2
0001240c l     O .rwdata	0000002c IrDA
00012438 l     O .rwdata	0000002c Expansion_JP5
00012464 l     O .rwdata	0000002c Green_LEDs
00012490 l     O .rwdata	0000002c HEX3_HEX0
000124bc l     O .rwdata	0000002c HEX7_HEX4
000124e8 l     O .rwdata	0000002c Pushbuttons
00012514 l     O .rwdata	0000002c Red_LEDs
00012540 l     O .rwdata	0000002c Slider_Switches
0001256c l     O .rwdata	00000038 PS2_Port
000125a4 l     O .rwdata	00000038 PS2_Port_Dual
000125dc l     O .rwdata	0000002c Serial_Port
00012608 l     O .rwdata	00000034 USB
0001263c l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00012684 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000126d8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000cef8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000d1a0 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d978 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f400 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f6e8 l     F .text	00000050 alt_get_errno
0000f738 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001475c g     O .bss	00000004 alt_instruction_exception_handler
000127aa g     O .rwdata	00000002 OSTaskNameSize
00003c7c g     F .text	00000054 _isatty_r
000043fc g     F .text	000000d4 alt_main
00001240 g     F .text	000000a8 _puts_r
000219ac g     O .bss	00000100 alt_irq
0000e554 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00003cd0 g     F .text	0000005c _lseek_r
00008bcc g     F .text	000000d0 OS_MemInit
000127e0 g       *ABS*	00000000 __flash_rwdata_start
0000c7ac g     F .text	00000064 OSTimeSet
0000dae4 g     F .text	0000003c alt_up_character_lcd_send_cmd
00004ddc g     F .text	00000610 OSEventPendMulti
00021aac g       *ABS*	00000000 __alt_heap_start
0000fd44 g     F .text	00000020 OSTaskCreateHook
00012782 g     O .rwdata	00000002 OSMboxEn
00005440 g     F .text	0000007c OSIntEnter
00003a0c g     F .text	0000005c __sseek
0000306c g     F .text	00000010 __sinit
0000eedc g     F .text	00000100 alt_up_char_buffer_string
0000e374 g     F .text	00000034 read_CE_bit
00012792 g     O .rwdata	00000002 OSQEn
00002ed4 g     F .text	00000068 __sfmoreglue
00004ab0 g     F .text	000000d0 __malloc_unlock
0000fda0 g     F .text	0000001c OSTaskStatHook
0000e6f8 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000ebec g     F .text	00000090 alt_up_rs232_read_fd
00014700 g     O .bss	00000001 OSLockNesting
00000810 g     F .text	000000c4 menu
000127d0 g     O .rwdata	00000002 OSDataSize
00014701 g     O .bss	00000001 OSRunning
0000ee10 g     F .text	000000cc alt_up_char_buffer_draw
00014680 g     O .bss	00000004 counter3
0000221c g     F .text	0000015c memmove
0000fdd8 g     F .text	0000001c OSInitHookBegin
000127c8 g     O .rwdata	00000002 OSTmrSize
00003054 g     F .text	00000018 _cleanup
00012708 g     O .rwdata	00000004 gameModeMenu
00014704 g     O .bss	00000004 OSIdleCtr
00012710 g     O .rwdata	00000004 xRechts
0000faf8 g     F .text	00000020 altera_nios2_gen2_irq_init
0000fbc4 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000da70 g     F .text	00000074 get_DDRAM_addr
0000689c g     F .text	000002d4 OS_TCBInit
00012724 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
000127ce g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001276e g     O .rwdata	00000002 OSEventSize
00014708 g     O .bss	00000001 OSPrioHighRdy
00003c24 g     F .text	00000058 _fstat_r
0000fd64 g     F .text	00000020 OSTaskDelHook
000146dc g     O .bss	00000004 errno
00003988 g     F .text	00000008 __seofread
0000fba4 g       .text	00000000 OSStartHighRdy
00014694 g     O .bss	00000004 pixel_buffer_y
0000b0b0 g     F .text	000001ec OSTaskCreateExt
00007c0c g     F .text	00000068 OSFlagPendGetFlagsRdy
000127ae g     O .rwdata	00000002 OSTaskStatStkSize
00006cfc g     F .text	00000308 OSFlagAccept
000092a0 g     F .text	000000b8 OSQFlush
00008c9c g     F .text	00000140 OSQAccept
000146e8 g     O .bss	00000004 alt_argv
0001a704 g       *ABS*	00000000 _gp
0000aef4 g     F .text	000001bc OSTaskCreate
0000a9b4 g     F .text	00000540 OSTaskChangePrio
000146fc g     O .bss	00000004 alt_heapsem
00006b70 g     F .text	0000018c OSDebugInit
0000b29c g     F .text	000003e0 OSTaskDel
00012714 g     O .rwdata	00000004 xBoven
00011194 g     O .rwdata	00000180 alt_fd_list
0001e788 g     O .bss	00000370 OSFlagTbl
00005e70 g     F .text	000000b4 OS_EventTaskRemove
0000f340 g     F .text	00000090 alt_find_dev
000020e4 g     F .text	00000138 memcpy
00012798 g     O .rwdata	00000002 OSRdyTblSize
0000dc80 g     F .text	00000050 alt_up_character_lcd_write_fd
0000efdc g     F .text	0000005c alt_up_char_buffer_clear
00002d2c g     F .text	0000000c _cleanup_r
0000f4c0 g     F .text	00000078 alt_io_redirect
000105d4 g       *ABS*	00000000 __DTOR_END__
0000e200 g     F .text	00000090 alt_up_irda_write_fd
0000eb78 g     F .text	00000074 alt_up_rs232_read_data
000012e8 g     F .text	00000014 puts
000100e8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004b80 g     F .text	00000120 OSEventNameGet
0001277c g     O .rwdata	00000002 OSFlagMax
000054bc g     F .text	000000f4 OSIntExit
000127b6 g     O .rwdata	00000002 OSTCBSize
00014709 g     O .bss	00000001 OSPrioCur
0000dffc g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000d404 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003ea4 g     F .text	00000008 .hidden __udivsi3
00004150 g     F .text	000000a4 isatty
0001279c g     O .rwdata	00000002 OSStkWidth
00012790 g     O .rwdata	00000002 OSPtrSize
00012770 g     O .rwdata	00000002 OSEventTblSize
0000dfa0 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00012720 g     O .rwdata	00000004 xMenu
0000fb18 g       .text	00000000 OSCtxSw
0001005c g     F .text	0000008c alt_icache_flush
000146d8 g     O .bss	00000004 __malloc_top_pad
000005c4 g     F .text	0000011c moveDown
0001470c g     O .bss	00000004 OSTCBList
000146e0 g     O .bss	00000004 alt_fd_list_lock
00001394 g     F .text	000004c0 __sfvwrite_r
0001eaf8 g     O .bss	00000c30 OSMemTbl
00014710 g     O .bss	00000001 OSTickStepState
000028e0 g     F .text	00000054 _sbrk_r
00014788 g     O .bss	00002000 menu_stk
00012794 g     O .rwdata	00000002 OSQMax
0001f728 g     O .bss	00000800 OSTaskStatStk
000087fc g     F .text	000000f8 OSMemNameGet
00012774 g     O .rwdata	00000002 OSFlagEn
00003d2c g     F .text	0000005c _read_r
000127ba g     O .rwdata	00000002 OSTimeTickHookEn
000097c0 g     F .text	00000168 OSQPost
00008478 g     F .text	000000a0 OS_FlagUnlink
00014698 g     O .bss	00000004 blue_y2
0001274c g     O .rwdata	00000004 alt_max_fd
0000eaf4 g     F .text	00000044 alt_up_rs232_check_parity
00006434 g     F .text	00000064 OS_MemCopy
00006498 g     F .text	000000cc OS_Sched
00003b20 g     F .text	000000f0 _fclose_r
0000870c g     F .text	000000f0 OSMemGet
0000b97c g     F .text	000001c0 OSTaskNameSet
0000e3a8 g     F .text	00000030 read_num_bytes_available
00002cec g     F .text	00000030 fflush
000146d4 g     O .bss	00000004 __malloc_max_sbrked_mem
00014714 g     O .bss	00000004 OSCtxSwCtr
0000fdbc g     F .text	0000001c OSTimeTickHook
0000f538 g     F .text	000001b0 alt_irq_register
0001277e g     O .rwdata	00000002 OSFlagNameSize
0000e310 g     F .text	00000034 read_RI_bit
00005f24 g     F .text	000000fc OS_EventTaskRemoveMulti
00014684 g     O .bss	00000004 controllerSem
00005d24 g     F .text	0000014c OS_EventTaskWaitMulti
00012796 g     O .rwdata	00000002 OSQSize
00004328 g     F .text	000000d4 lseek
0000a2c4 g     F .text	00000268 OSSemPend
0001272c g     O .rwdata	00000004 _global_impure_ptr
00002378 g     F .text	00000568 _realloc_r
000146c0 g     O .bss	00000004 vorige
00012780 g     O .rwdata	00000002 OSLowestPrio
00021aac g       *ABS*	00000000 __bss_end
0000fe2c g     F .text	00000020 OSTCBInitHook
000127c6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000f9f4 g     F .text	00000104 alt_tick
00014688 g     O .bss	00000004 counter1
00012768 g     O .rwdata	00000002 OSEventEn
000127c2 g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000e40c g     F .text	0000002c read_data_byte
0000308c g     F .text	00000018 __fp_lock_all
00008284 g     F .text	000000e4 OS_FlagInit
0000f95c g     F .text	00000098 alt_alarm_stop
0000e344 g     F .text	00000030 read_RE_bit
000127a4 g     O .rwdata	00000002 OSTaskIdleStkSize
00014750 g     O .bss	00000004 alt_irq_active
00009eac g     F .text	000000b0 OSSemAccept
000011b0 g     F .text	00000090 VGA_text
00008a0c g     F .text	000000d8 OSMemPut
0001469c g     O .bss	00000004 pixel_buffer_x
00008518 g     F .text	000001f4 OSMemCreate
00014718 g     O .bss	00000004 OSIdleCtrMax
00016788 g     O .bss	00002000 controller1_stk
0000e03c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001116c g     O .rwdata	00000028 alt_dev_null
000127b8 g     O .rwdata	00000002 OSTicksPerSec
0000df14 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000e2d0 g     F .text	00000040 alt_up_parallel_port_open_dev
0000fb18 g       .text	00000000 OSIntCtxSw
0000e5b0 g     F .text	00000074 alt_up_ps2_write_data_byte
0000f178 g     F .text	0000001c alt_dcache_flush_all
0001271c g     O .rwdata	00000002 geel
0001471c g     O .bss	00000004 OSTCBFreeList
000127e0 g       *ABS*	00000000 __ram_rwdata_end
0000a52c g     F .text	0000016c OSSemPendAbort
00012744 g     O .rwdata	00000008 alt_dev_list
0000477c g     F .text	000000f8 write
000127bc g     O .rwdata	00000002 OSVersionNbr
00010940 g       *ABS*	00000000 __ram_rodata_end
00004050 g     F .text	000000b0 fstat
0000ec7c g     F .text	00000094 alt_up_rs232_write_fd
000008d4 g     F .text	000005a4 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00012764 g     O .rwdata	00000004 OSEndiannessTest
00003eac g     F .text	00000008 .hidden __umodsi3
000146a0 g     O .bss	00000004 blue_x1
00012776 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	00000070 controllers
00021aac g       *ABS*	00000000 end
0000e8ec g     F .text	00000098 alt_up_ps2_write_fd
0000e078 g     F .text	00000044 alt_up_irda_check_parity
0000ed50 g     F .text	00000080 alt_up_char_buffer_init
0000cdb8 g     F .text	00000140 altera_avalon_jtag_uart_init
000066f8 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006e0 g     F .text	00000130 Game
000146c4 g     O .bss	00000002 zwart
000105d4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000d9f0 g     F .text	00000080 alt_avalon_timer_sc_init
0000d6b8 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000307c g     F .text	00000004 __sfp_lock_acquire
00001ffc g     F .text	000000e8 memchr
000063e4 g     F .text	00000050 OS_MemClr
0000db94 g     F .text	00000078 alt_up_character_lcd_write
0000fbe8 g     F .text	0000015c OSTaskStkInit
000031e0 g     F .text	000002f0 _free_r
00005a80 g     F .text	00000198 OS_EventTaskRdy
00010404 g     F .text	00000194 __call_exitprocs
00014720 g     O .bss	00000001 OSCPUUsage
00012734 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00014754 g     O .bss	00000004 _alt_tick_rate
00009358 g     F .text	000002fc OSQPend
0000c2a8 g     F .text	00000148 OSTimeDly
00018788 g     O .bss	00002000 controller2_stk
00014758 g     O .bss	00000004 _alt_nticks
00004520 g     F .text	000000fc read
0000c87c g     F .text	000003d8 alt_sys_init
0000ddcc g     F .text	00000088 alt_up_character_lcd_shift_display
000102f0 g     F .text	00000114 __register_exitproc
00014721 g     O .bss	00000001 OSTaskCtr
0000e80c g     F .text	00000054 alt_up_ps2_clear_fifo
0000eab8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000010fc g     F .text	000000b4 VGA_box
0000c3f0 g     F .text	00000168 OSTimeDlyHMSM
0000de54 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000d2b0 g     F .text	00000068 altera_avalon_jtag_uart_close
00010940 g       *ABS*	00000000 __ram_rwdata_start
000105d4 g       *ABS*	00000000 __ram_rodata_start
00014760 g     O .bss	00000028 __malloc_current_mallinfo
0001276a g     O .rwdata	00000002 OSEventMax
0000a698 g     F .text	00000110 OSSemPost
000146a4 g     O .bss	00000004 blue_y1
00005638 g     F .text	000000d8 OSSchedUnlock
0000cc54 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000ff60 g     F .text	000000fc alt_get_fd
00014724 g     O .bss	00000004 OSMemFreeList
0000577c g     F .text	000000ac OSStatInit
00007ffc g     F .text	000000c4 OSFlagQuery
000127a0 g     O .rwdata	00000002 OSTaskCreateExtEn
00003acc g     F .text	00000054 _close_r
000101d0 g     F .text	0000007c memcmp
00005a64 g     F .text	0000001c OS_Dummy
0000cd14 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00021aac g       *ABS*	00000000 __alt_stack_base
0000cd64 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000df48 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00002934 g     F .text	00000154 __swsetup_r
0001ff28 g     O .bss	000001e0 OSQTbl
000002f0 g     F .text	00000170 controller
00002f3c g     F .text	00000118 __sfp
00010d64 g     O .rwdata	00000408 __malloc_av_
000146a8 g     O .bss	00000004 ALT_y
00003088 g     F .text	00000004 __sinit_lock_release
00014728 g     O .bss	00000004 OSTCBHighRdy
00003934 g     F .text	00000054 __sread
0001472c g     O .bss	00000004 OSQFreeList
0000ea1c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0000fe4c g     F .text	00000114 alt_find_file
0000f1e4 g     F .text	000000a4 alt_dev_llist_insert
00004990 g     F .text	00000120 __malloc_lock
0000467c g     F .text	000000b0 sbrk
000146ac g     O .bss	00000004 ALT_inc_y
00004ca0 g     F .text	0000013c OSEventNameSet
00002c90 g     F .text	0000005c _fflush_r
00014730 g     O .bss	00000001 OSRdyGrp
00014680 g       *ABS*	00000000 __bss_start
00003810 g     F .text	00000124 memset
00000f58 g     F .text	000001a4 main
000146ec g     O .bss	00000004 alt_envp
000146d0 g     O .bss	00000004 __malloc_max_total_mem
0000edd0 g     F .text	00000040 alt_up_char_buffer_open_dev
0000ccb4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010670 g     O .rodata	00000100 OSUnMapTbl
0001279a g     O .rwdata	00000002 OSSemEn
0000dd44 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00007c74 g     F .text	00000388 OSFlagPost
00003a68 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00003c10 g     F .text	00000014 fclose
00005c18 g     F .text	0000010c OS_EventTaskWait
0000e79c g     F .text	00000070 alt_up_ps2_read_data_byte
000146cc g     O .bss	00000004 timeout
000067d4 g     F .text	000000c8 OS_TaskStatStkChk
0000b67c g     F .text	00000158 OSTaskDelReq
00001854 g     F .text	000007a8 _malloc_r
00012750 g     O .rwdata	00000004 alt_errno
00005710 g     F .text	0000006c OSStart
00004934 g     F .text	0000005c __env_unlock
000034d0 g     F .text	000000c4 _fwalk
0000bb3c g     F .text	000001f8 OSTaskResume
00008ae4 g     F .text	000000e8 OSMemQuery
000127ac g     O .rwdata	00000002 OSTaskStatEn
0001a788 g     O .bss	00002000 Game_stk
0000e0bc g     F .text	00000040 alt_up_irda_write_data
00012786 g     O .rwdata	00000002 OSMemMax
00009928 g     F .text	00000170 OSQPostFront
0000e984 g     F .text	00000040 alt_up_ps2_open_dev
00003df4 g     F .text	00000054 .hidden __divsi3
00014731 g     O .bss	00000003 OSRdyTbl
00012760 g     O .rwdata	00000002 OSDebugEn
0000db54 g     F .text	00000040 alt_up_character_lcd_open_dev
000030bc g     F .text	00000124 _malloc_trim_r
0000e4fc g     F .text	00000058 alt_up_ps2_enable_read_interrupt
000105d4 g       *ABS*	00000000 __CTOR_END__
00012706 g     O .rwdata	00000002 balWit
00012778 g     O .rwdata	00000002 OSFlagNodeSize
000127c0 g     O .rwdata	00000002 OSTmrCfgMax
0000db20 g     F .text	00000034 alt_up_character_lcd_init
0001024c g     F .text	000000a4 strcmp
00008ddc g     F .text	000001fc OSQCreate
0000b7d4 g     F .text	000001a8 OSTaskNameGet
000105d4 g       *ABS*	00000000 __flash_rodata_start
00009a98 g     F .text	0000020c OSQPostOpt
00005828 g     F .text	0000021c OSTimeTick
000127a8 g     O .rwdata	00000002 OSTaskMax
000105d4 g       *ABS*	00000000 __DTOR_LIST__
00009f5c g     F .text	00000100 OSSemCreate
000127cc g     O .rwdata	00000002 OSTmrWheelSize
0000ed10 g     F .text	00000040 alt_up_rs232_open_dev
000127a2 g     O .rwdata	00000002 OSTaskDelEn
0000a7a8 g     F .text	00000110 OSSemQuery
00008fd8 g     F .text	000002c8 OSQDel
00009654 g     F .text	0000016c OSQPendAbort
0000c848 g     F .text	00000034 alt_irq_init
0000461c g     F .text	00000060 alt_release_fd
00000460 g     F .text	0000004c checkID
0000e3d8 g     F .text	00000034 read_data_valid
0000dee0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0000e694 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00010184 g     F .text	00000014 atexit
00003a70 g     F .text	0000005c _write_r
000055b0 g     F .text	00000088 OSSchedLock
00007004 g     F .text	00000128 OSFlagCreate
00012730 g     O .rwdata	00000004 _impure_ptr
000146e4 g     O .bss	00000004 alt_argc
00002a88 g     F .text	00000208 __sflush_r
0000f2e4 g     F .text	0000005c _do_dtors
00012772 g     O .rwdata	00000002 OSEventMultiEn
0000712c g     F .text	00000270 OSFlagDel
00014734 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000761c g     F .text	000005f0 OSFlagPend
000127be g     O .rwdata	00000002 OSTmrEn
000030a4 g     F .text	00000018 __fp_unlock_all
0001273c g     O .rwdata	00000008 alt_fs_list
000065d4 g     F .text	00000074 OS_StrCopy
0000e9c4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000eb38 g     F .text	00000040 alt_up_rs232_write_data
000004ac g     F .text	00000118 moveUp
00012788 g     O .rwdata	00000002 OSMemNameSize
000146b0 g     O .bss	00000004 ALT_x1
0000fdf4 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000127b4 g     O .rwdata	00000002 OSTCBPrioTblMax
000127b0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00012784 g     O .rwdata	00000002 OSMemEn
0001278e g     O .rwdata	00000002 OSMutexEn
000127e0 g       *ABS*	00000000 _edata
00012728 g     O .rwdata	00000004 interval_timer_ptr
00021aac g       *ABS*	00000000 _end
00014738 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000d318 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000c558 g     F .text	000001f0 OSTimeDlyResume
000074cc g     F .text	00000150 OSFlagNameSet
0000bd34 g     F .text	000001c8 OSTaskStkChk
0001278a g     O .rwdata	00000002 OSMemSize
00003990 g     F .text	0000007c __swrite
00012738 g     O .rwdata	00000004 __malloc_trim_threshold
0001473c g     O .bss	00000004 OSTCBCur
00010198 g     F .text	00000038 exit
0000e0fc g     F .text	00000074 alt_up_irda_read_data
0001278c g     O .rwdata	00000002 OSMemTblSize
00003594 g     F .text	000000c4 _fwalk_reent
0000e438 g     F .text	000000c4 alt_up_ps2_init
00003e48 g     F .text	0000005c .hidden __modsi3
0001c788 g     O .bss	00002000 menu_stk2
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003080 g     F .text	00000004 __sfp_lock_release
000053ec g     F .text	00000054 OSInit
0000c110 g     F .text	0000012c OSTaskQuery
0000dc0c g     F .text	00000074 alt_up_character_lcd_string
00009e00 g     F .text	000000ac OS_QInit
00006648 g     F .text	00000054 OS_StrLen
0000e290 g     F .text	00000040 alt_up_irda_open_dev
000088f4 g     F .text	00000118 OSMemNameSet
000127a6 g     O .rwdata	00000002 OSTaskProfileEn
00014740 g     O .bss	00000004 OSTime
00000e78 g     F .text	00000058 tekenBox
00020108 g     O .bss	00000800 OSTaskIdleStk
00010598 g     F .text	0000003c _exit
000146b4 g     O .bss	00000004 ALT_inc_x
0000f038 g     F .text	00000140 alt_alarm_start
0000739c g     F .text	00000130 OSFlagNameGet
0000c748 g     F .text	00000064 OSTimeGet
00003658 g     F .text	000001b8 __smakebuf_r
0000e624 g     F .text	00000070 alt_up_ps2_wait_for_ack
000012fc g     F .text	00000098 strlen
0000fd84 g     F .text	0000001c OSTaskSwHook
0000f804 g     F .text	00000158 open
00020908 g     O .bss	00000b40 OSEventTbl
00021448 g     O .bss	00000510 OSTCBTbl
0000a8b8 g     F .text	000000fc OSSemSet
000146b8 g     O .bss	00000004 ALT_x2
0000f3d0 g     F .text	00000030 alt_icache_flush_all
0000dcd0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000127d4 g     O .rwdata	00000004 alt_priority_mask
0000a05c g     F .text	00000268 OSSemDel
00014744 g     O .bss	00000004 OSFlagFreeList
0001276c g     O .rwdata	00000002 OSEventNameSize
00014748 g     O .bss	00000001 OSStatRdy
00021958 g     O .bss	00000054 OSTCBPrioTbl
00004874 g     F .text	000000c0 __env_lock
0000e860 g     F .text	0000008c alt_up_ps2_read_fd
000127b2 g     O .rwdata	00000002 OSTaskSwHookEn
0001270c g     O .rwdata	00000004 xLinks
0000e170 g     F .text	00000090 alt_up_irda_read_fd
000127d8 g     O .rwdata	00000008 alt_alarm_list
0001277a g     O .rwdata	00000002 OSFlagWidth
0000f288 g     F .text	0000005c _do_ctors
00012704 g     O .rwdata	00000002 kleur
0000ea78 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00014690 g     O .bss	00000002 balZwart
00003f04 g     F .text	000000d0 close
000146bc g     O .bss	00000004 blue_x2
000146f4 g     O .bss	00000004 alt_envsem
0001474c g     O .bss	00000004 OSIdleCtrRun
00012718 g     O .rwdata	00000004 xOnder
00005a44 g     F .text	00000020 OSVersion
000127c4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00004258 g     F .text	00000080 alt_load
0000c23c g     F .text	0000006c OS_TaskStkClr
00000ed0 g     F .text	00000088 tekenBox2
0001279e g     O .rwdata	00000002 OSTaskCreateEn
000146c8 g     O .bss	00000004 menuSem
00006020 g     F .text	00000064 OS_EventWaitListInit
0000fe10 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00003084 g     F .text	00000004 __sinit_lock_acquire
0000befc g     F .text	00000214 OSTaskSuspend
0001468c g     O .bss	00000004 counter2
0000669c g     F .text	0000005c OS_TaskIdle
000127ca g     O .rwdata	00000002 OSTmrTblSize
00009ca4 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00054400 	call	5440 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10866b04 	addi	r2,r2,6572
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10866b04 	addi	r2,r2,6572
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00054bc0 	call	54bc <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a81617 	ldw	r2,-24488(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a81617 	ldw	r2,-24488(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6a9c114 	ori	gp,gp,42756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1091a014 	ori	r2,r2,18048

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18c6ab14 	ori	r3,r3,6828

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00042580 	call	4258 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00043fc0 	call	43fc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:

short kleur = 0x0000ff;
int counter1, counter2, counter3 = 0;


void controllers(void* pdata){
     280:	defffb04 	addi	sp,sp,-20
     284:	dfc00415 	stw	ra,16(sp)
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13fff15 	stw	r4,-4(fp)



	int ID = (int*)pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffe15 	stw	r2,-8(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffd15 	stw	r2,-12(fp)

	while (1){
		if (controller(ID) == 1){
     2a4:	e13ffe17 	ldw	r4,-8(fp)
     2a8:	00002f00 	call	2f0 <controller>
     2ac:	10800058 	cmpnei	r2,r2,1
     2b0:	1000051e 	bne	r2,zero,2c8 <controllers+0x48>
			hoogte = moveDown(ID, hoogte);
     2b4:	e13ffe17 	ldw	r4,-8(fp)
     2b8:	e17ffd17 	ldw	r5,-12(fp)
     2bc:	00005c40 	call	5c4 <moveDown>
     2c0:	e0bffd15 	stw	r2,-12(fp)
     2c4:	00000706 	br	2e4 <controllers+0x64>
		}else if(controller(ID) == 0){
     2c8:	e13ffe17 	ldw	r4,-8(fp)
     2cc:	00002f00 	call	2f0 <controller>
     2d0:	1000041e 	bne	r2,zero,2e4 <controllers+0x64>
			hoogte = moveUp(ID, hoogte);
     2d4:	e13ffe17 	ldw	r4,-8(fp)
     2d8:	e17ffd17 	ldw	r5,-12(fp)
     2dc:	00004ac0 	call	4ac <moveUp>
     2e0:	e0bffd15 	stw	r2,-12(fp)
		}

		OSTimeDly(1);
     2e4:	01000044 	movi	r4,1
     2e8:	000c2a80 	call	c2a8 <OSTimeDly>
	}
     2ec:	003fed06 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

000002f0 <controller>:


}

int controller(int ID){
     2f0:	defff904 	addi	sp,sp,-28
     2f4:	dfc00615 	stw	ra,24(sp)
     2f8:	df000515 	stw	fp,20(sp)
     2fc:	df000504 	addi	fp,sp,20
     300:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     304:	01000074 	movhi	r4,1
     308:	21017504 	addi	r4,r4,1492
     30c:	000e2d00 	call	e2d0 <alt_up_parallel_port_open_dev>
     310:	e0bffb15 	stw	r2,-20(fp)
	alt_up_parallel_port_dev * SW_switch_ptr	= alt_up_parallel_port_open_dev ("/dev/Slider_Switches");
     314:	01000074 	movhi	r4,1
     318:	21017a04 	addi	r4,r4,1512
     31c:	000e2d00 	call	e2d0 <alt_up_parallel_port_open_dev>
     320:	e0bffc15 	stw	r2,-16(fp)

	int KEY_value, SW_value;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     324:	e0bffc17 	ldw	r2,-16(fp)
     328:	10800a17 	ldw	r2,40(r2)
     32c:	10800037 	ldwio	r2,0(r2)
     330:	e0bffd15 	stw	r2,-12(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values
     334:	e0bffb17 	ldw	r2,-20(fp)
     338:	10800a17 	ldw	r2,40(r2)
     33c:	10800037 	ldwio	r2,0(r2)
     340:	e0bffe15 	stw	r2,-8(fp)

	if(ID == 2){
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10800098 	cmpnei	r2,r2,2
     34c:	1000291e 	bne	r2,zero,3f4 <controller+0x104>
		if(KEY_value != 0){
     350:	e0bffe17 	ldw	r2,-8(fp)
     354:	10002526 	beq	r2,zero,3ec <controller+0xfc>
			while(KEY_value == 8){
     358:	00000806 	br	37c <controller+0x8c>
				counter1++;
     35c:	d0a7e117 	ldw	r2,-24700(gp)
     360:	10800044 	addi	r2,r2,1
     364:	d0a7e115 	stw	r2,-24700(gp)
				if(counter1 >= 20){
     368:	d0a7e117 	ldw	r2,-24700(gp)
     36c:	10800510 	cmplti	r2,r2,20
     370:	1000021e 	bne	r2,zero,37c <controller+0x8c>
					return 1;
     374:	00800044 	movi	r2,1
     378:	00003406 	br	44c <controller+0x15c>
	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values

	if(ID == 2){
		if(KEY_value != 0){
			while(KEY_value == 8){
     37c:	e0bffe17 	ldw	r2,-8(fp)
     380:	10800220 	cmpeqi	r2,r2,8
     384:	103ff51e 	bne	r2,zero,35c <__alt_mem_Flash_flash_data+0xf400035c>
				if(counter1 >= 20){
					return 1;
					counter1 = 0;
				}
			}
			while(KEY_value == 4){
     388:	00000806 	br	3ac <controller+0xbc>
				counter2++;
     38c:	d0a7e217 	ldw	r2,-24696(gp)
     390:	10800044 	addi	r2,r2,1
     394:	d0a7e215 	stw	r2,-24696(gp)
				if(counter2 >= 20){
     398:	d0a7e217 	ldw	r2,-24696(gp)
     39c:	10800510 	cmplti	r2,r2,20
     3a0:	1000021e 	bne	r2,zero,3ac <controller+0xbc>
					return 0;
     3a4:	0005883a 	mov	r2,zero
     3a8:	00002806 	br	44c <controller+0x15c>
				if(counter1 >= 20){
					return 1;
					counter1 = 0;
				}
			}
			while(KEY_value == 4){
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10800120 	cmpeqi	r2,r2,4
     3b4:	103ff51e 	bne	r2,zero,38c <__alt_mem_Flash_flash_data+0xf400038c>
				if(counter2 >= 20){
					return 0;
					counter2 = 0;
				}
			}
			while(KEY_value == 2){
     3b8:	00000806 	br	3dc <controller+0xec>
				counter3++;
     3bc:	d0a7df17 	ldw	r2,-24708(gp)
     3c0:	10800044 	addi	r2,r2,1
     3c4:	d0a7df15 	stw	r2,-24708(gp)
				if(counter3 >= 20){
     3c8:	d0a7df17 	ldw	r2,-24708(gp)
     3cc:	10800510 	cmplti	r2,r2,20
     3d0:	1000021e 	bne	r2,zero,3dc <controller+0xec>
					return 2;
     3d4:	00800084 	movi	r2,2
     3d8:	00001c06 	br	44c <controller+0x15c>
				if(counter2 >= 20){
					return 0;
					counter2 = 0;
				}
			}
			while(KEY_value == 2){
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	108000a0 	cmpeqi	r2,r2,2
     3e4:	103ff51e 	bne	r2,zero,3bc <__alt_mem_Flash_flash_data+0xf40003bc>
     3e8:	00001806 	br	44c <controller+0x15c>
					return 2;
					counter3 = 0;
				}
			}
		}else{
			return 3;
     3ec:	008000c4 	movi	r2,3
     3f0:	00001606 	br	44c <controller+0x15c>
		}

	}else if(ID == 1){
     3f4:	e0bfff17 	ldw	r2,-4(fp)
     3f8:	10800058 	cmpnei	r2,r2,1
     3fc:	1000131e 	bne	r2,zero,44c <controller+0x15c>
		if(SW_value != 0){
     400:	e0bffd17 	ldw	r2,-12(fp)
     404:	10000f26 	beq	r2,zero,444 <controller+0x154>
			while(SW_value == 2){
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	10800098 	cmpnei	r2,r2,2
     410:	1000021e 	bne	r2,zero,41c <controller+0x12c>
				return 1;
     414:	00800044 	movi	r2,1
     418:	00000c06 	br	44c <controller+0x15c>
			}
			while(SW_value == 1){
     41c:	e0bffd17 	ldw	r2,-12(fp)
     420:	10800058 	cmpnei	r2,r2,1
     424:	1000021e 	bne	r2,zero,430 <controller+0x140>
				return 0;
     428:	0005883a 	mov	r2,zero
     42c:	00000706 	br	44c <controller+0x15c>
			}
			while(SW_value >= 3){
     430:	e0bffd17 	ldw	r2,-12(fp)
     434:	108000d0 	cmplti	r2,r2,3
     438:	1000041e 	bne	r2,zero,44c <controller+0x15c>
				return 2;
     43c:	00800084 	movi	r2,2
     440:	00000206 	br	44c <controller+0x15c>
			}
		}else{
			return 3;
     444:	008000c4 	movi	r2,3
     448:	00000006 	br	44c <controller+0x15c>
		}
	}

}
     44c:	e037883a 	mov	sp,fp
     450:	dfc00117 	ldw	ra,4(sp)
     454:	df000017 	ldw	fp,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret

00000460 <checkID>:

int checkID(int ID){
     460:	defffe04 	addi	sp,sp,-8
     464:	df000115 	stw	fp,4(sp)
     468:	df000104 	addi	fp,sp,4
     46c:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
     470:	e0bfff17 	ldw	r2,-4(fp)
     474:	10800058 	cmpnei	r2,r2,1
     478:	1000021e 	bne	r2,zero,484 <checkID+0x24>
		return 15;
     47c:	008003c4 	movi	r2,15
     480:	00000606 	br	49c <checkID+0x3c>
	}else if(ID == 2){
     484:	e0bfff17 	ldw	r2,-4(fp)
     488:	10800098 	cmpnei	r2,r2,2
     48c:	1000021e 	bne	r2,zero,498 <checkID+0x38>
		return 300;
     490:	00804b04 	movi	r2,300
     494:	00000106 	br	49c <checkID+0x3c>

	}
	return 0;
     498:	0005883a 	mov	r2,zero
}
     49c:	e037883a 	mov	sp,fp
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00104 	addi	sp,sp,4
     4a8:	f800283a 	ret

000004ac <moveUp>:

int moveUp(int ID, int current){
     4ac:	defff904 	addi	sp,sp,-28
     4b0:	dfc00615 	stw	ra,24(sp)
     4b4:	df000515 	stw	fp,20(sp)
     4b8:	df000504 	addi	fp,sp,20
     4bc:	e13ffe15 	stw	r4,-8(fp)
     4c0:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     4cc:	e13ffe17 	ldw	r4,-8(fp)
     4d0:	00004600 	call	460 <checkID>
     4d4:	e0bffd15 	stw	r2,-12(fp)

	if(boven >= 4 && boven <= 184){
     4d8:	e0bffc17 	ldw	r2,-16(fp)
     4dc:	10800110 	cmplti	r2,r2,4
     4e0:	10001f1e 	bne	r2,zero,560 <moveUp+0xb4>
     4e4:	e0bffc17 	ldw	r2,-16(fp)
     4e8:	10802e48 	cmpgei	r2,r2,185
     4ec:	10001c1e 	bne	r2,zero,560 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	11800144 	addi	r6,r2,5
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	10c00044 	addi	r3,r2,1
     500:	d0a0000b 	ldhu	r2,-32768(gp)
     504:	10bfffcc 	andi	r2,r2,65535
     508:	10a0001c 	xori	r2,r2,32768
     50c:	10a00004 	addi	r2,r2,-32768
     510:	d8800015 	stw	r2,0(sp)
     514:	e13ffd17 	ldw	r4,-12(fp)
     518:	e17ffc17 	ldw	r5,-16(fp)
     51c:	180f883a 	mov	r7,r3
     520:	00010fc0 	call	10fc <VGA_box>
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
     524:	e0bffc17 	ldw	r2,-16(fp)
     528:	11400c84 	addi	r5,r2,50
     52c:	e0bffd17 	ldw	r2,-12(fp)
     530:	10c00144 	addi	r3,r2,5
     534:	e0bffc17 	ldw	r2,-16(fp)
     538:	10800cc4 	addi	r2,r2,51
     53c:	d8000015 	stw	zero,0(sp)
     540:	e13ffd17 	ldw	r4,-12(fp)
     544:	180d883a 	mov	r6,r3
     548:	100f883a 	mov	r7,r2
     54c:	00010fc0 	call	10fc <VGA_box>
		boven--;
     550:	e0bffc17 	ldw	r2,-16(fp)
     554:	10bfffc4 	addi	r2,r2,-1
     558:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven >= 4 && boven <= 184){
     55c:	00001306 	br	5ac <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
		boven--;
	}else if(boven > 184){
     560:	e0bffc17 	ldw	r2,-16(fp)
     564:	10802e50 	cmplti	r2,r2,185
     568:	1000101e 	bne	r2,zero,5ac <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     56c:	e0bffd17 	ldw	r2,-12(fp)
     570:	11800144 	addi	r6,r2,5
     574:	e0bffc17 	ldw	r2,-16(fp)
     578:	10c00044 	addi	r3,r2,1
     57c:	d0a0000b 	ldhu	r2,-32768(gp)
     580:	10bfffcc 	andi	r2,r2,65535
     584:	10a0001c 	xori	r2,r2,32768
     588:	10a00004 	addi	r2,r2,-32768
     58c:	d8800015 	stw	r2,0(sp)
     590:	e13ffd17 	ldw	r4,-12(fp)
     594:	e17ffc17 	ldw	r5,-16(fp)
     598:	180f883a 	mov	r7,r3
     59c:	00010fc0 	call	10fc <VGA_box>
		boven--;
     5a0:	e0bffc17 	ldw	r2,-16(fp)
     5a4:	10bfffc4 	addi	r2,r2,-1
     5a8:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     5ac:	e0bffc17 	ldw	r2,-16(fp)

}
     5b0:	e037883a 	mov	sp,fp
     5b4:	dfc00117 	ldw	ra,4(sp)
     5b8:	df000017 	ldw	fp,0(sp)
     5bc:	dec00204 	addi	sp,sp,8
     5c0:	f800283a 	ret

000005c4 <moveDown>:
int moveDown(int ID, int current){
     5c4:	defff904 	addi	sp,sp,-28
     5c8:	dfc00615 	stw	ra,24(sp)
     5cc:	df000515 	stw	fp,20(sp)
     5d0:	df000504 	addi	fp,sp,20
     5d4:	e13ffe15 	stw	r4,-8(fp)
     5d8:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5dc:	e0bfff17 	ldw	r2,-4(fp)
     5e0:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5e4:	e13ffe17 	ldw	r4,-8(fp)
     5e8:	00004600 	call	460 <checkID>
     5ec:	e0bffd15 	stw	r2,-12(fp)

	if(boven <= 184 && boven >= 4){
     5f0:	e0bffc17 	ldw	r2,-16(fp)
     5f4:	10802e48 	cmpgei	r2,r2,185
     5f8:	10001f1e 	bne	r2,zero,678 <moveDown+0xb4>
     5fc:	e0bffc17 	ldw	r2,-16(fp)
     600:	10800110 	cmplti	r2,r2,4
     604:	10001c1e 	bne	r2,zero,678 <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     608:	e0bffc17 	ldw	r2,-16(fp)
     60c:	11400c84 	addi	r5,r2,50
     610:	e0bffd17 	ldw	r2,-12(fp)
     614:	11800144 	addi	r6,r2,5
     618:	e0bffc17 	ldw	r2,-16(fp)
     61c:	10c00cc4 	addi	r3,r2,51
     620:	d0a0000b 	ldhu	r2,-32768(gp)
     624:	10bfffcc 	andi	r2,r2,65535
     628:	10a0001c 	xori	r2,r2,32768
     62c:	10a00004 	addi	r2,r2,-32768
     630:	d8800015 	stw	r2,0(sp)
     634:	e13ffd17 	ldw	r4,-12(fp)
     638:	180f883a 	mov	r7,r3
     63c:	00010fc0 	call	10fc <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     640:	e0bffd17 	ldw	r2,-12(fp)
     644:	10c00144 	addi	r3,r2,5
     648:	e0bffc17 	ldw	r2,-16(fp)
     64c:	10800044 	addi	r2,r2,1
     650:	d8000015 	stw	zero,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180d883a 	mov	r6,r3
     660:	100f883a 	mov	r7,r2
     664:	00010fc0 	call	10fc <VGA_box>
		boven++;
     668:	e0bffc17 	ldw	r2,-16(fp)
     66c:	10800044 	addi	r2,r2,1
     670:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven <= 184 && boven >= 4){
     674:	00001406 	br	6c8 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	}else if(boven < 4){
     678:	e0bffc17 	ldw	r2,-16(fp)
     67c:	10800108 	cmpgei	r2,r2,4
     680:	1000111e 	bne	r2,zero,6c8 <moveDown+0x104>
		VGA_box(X, boven + 50, X+5, boven + 51, kleur);
     684:	e0bffc17 	ldw	r2,-16(fp)
     688:	11400c84 	addi	r5,r2,50
     68c:	e0bffd17 	ldw	r2,-12(fp)
     690:	11800144 	addi	r6,r2,5
     694:	e0bffc17 	ldw	r2,-16(fp)
     698:	10c00cc4 	addi	r3,r2,51
     69c:	d0a0000b 	ldhu	r2,-32768(gp)
     6a0:	10bfffcc 	andi	r2,r2,65535
     6a4:	10a0001c 	xori	r2,r2,32768
     6a8:	10a00004 	addi	r2,r2,-32768
     6ac:	d8800015 	stw	r2,0(sp)
     6b0:	e13ffd17 	ldw	r4,-12(fp)
     6b4:	180f883a 	mov	r7,r3
     6b8:	00010fc0 	call	10fc <VGA_box>
		boven++;
     6bc:	e0bffc17 	ldw	r2,-16(fp)
     6c0:	10800044 	addi	r2,r2,1
     6c4:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     6c8:	e0bffc17 	ldw	r2,-16(fp)

}
     6cc:	e037883a 	mov	sp,fp
     6d0:	dfc00117 	ldw	ra,4(sp)
     6d4:	df000017 	ldw	fp,0(sp)
     6d8:	dec00204 	addi	sp,sp,8
     6dc:	f800283a 	ret

000006e0 <Game>:
int pixel_buffer_x; int pixel_buffer_y;
int blue_x1; int blue_y1; int blue_x2; int blue_y2;
short balZwart = 0x000000;
short balWit = 0xffffff;

void Game(void* pdata){
     6e0:	defffc04 	addi	sp,sp,-16
     6e4:	dfc00315 	stw	ra,12(sp)
     6e8:	df000215 	stw	fp,8(sp)
     6ec:	df000204 	addi	fp,sp,8
     6f0:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0; ALT_x2 = 20; ALT_y = 5; ALT_inc_x = 1; ALT_inc_y = 1;
     6f4:	d027eb15 	stw	zero,-24660(gp)
     6f8:	00800504 	movi	r2,20
     6fc:	d0a7ed15 	stw	r2,-24652(gp)
     700:	00800144 	movi	r2,5
     704:	d0a7e915 	stw	r2,-24668(gp)
     708:	00800044 	movi	r2,1
     70c:	d0a7ec15 	stw	r2,-24656(gp)
     710:	00800044 	movi	r2,1
     714:	d0a7ea15 	stw	r2,-24664(gp)

	pixel_buffer_x = 340; pixel_buffer_y = 230;
     718:	00805504 	movi	r2,340
     71c:	d0a7e615 	stw	r2,-24680(gp)
     720:	00803984 	movi	r2,230
     724:	d0a7e415 	stw	r2,-24688(gp)
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;
	while(1){
		
		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balZwart); // erase
     728:	d127eb17 	ldw	r4,-24660(gp)
     72c:	d167e917 	ldw	r5,-24668(gp)
     730:	d0a7eb17 	ldw	r2,-24660(gp)
     734:	11800144 	addi	r6,r2,5
     738:	d0a7e917 	ldw	r2,-24668(gp)
     73c:	10c00144 	addi	r3,r2,5
     740:	d0a7e30b 	ldhu	r2,-24692(gp)
     744:	10bfffcc 	andi	r2,r2,65535
     748:	10a0001c 	xori	r2,r2,32768
     74c:	10a00004 	addi	r2,r2,-32768
     750:	d8800015 	stw	r2,0(sp)
     754:	180f883a 	mov	r7,r3
     758:	00010fc0 	call	10fc <VGA_box>
		ALT_x1 += ALT_inc_x;
     75c:	d0e7eb17 	ldw	r3,-24660(gp)
     760:	d0a7ec17 	ldw	r2,-24656(gp)
     764:	1885883a 	add	r2,r3,r2
     768:	d0a7eb15 	stw	r2,-24660(gp)
		ALT_x2 += ALT_inc_x;
     76c:	d0e7ed17 	ldw	r3,-24652(gp)
     770:	d0a7ec17 	ldw	r2,-24656(gp)
     774:	1885883a 	add	r2,r3,r2
     778:	d0a7ed15 	stw	r2,-24652(gp)
		ALT_y += ALT_inc_y;
     77c:	d0e7e917 	ldw	r3,-24668(gp)
     780:	d0a7ea17 	ldw	r2,-24664(gp)
     784:	1885883a 	add	r2,r3,r2
     788:	d0a7e915 	stw	r2,-24668(gp)

		if ( (ALT_y == pixel_buffer_y) || (ALT_y == 4) )
     78c:	d0e7e917 	ldw	r3,-24668(gp)
     790:	d0a7e417 	ldw	r2,-24688(gp)
     794:	18800326 	beq	r3,r2,7a4 <Game+0xc4>
     798:	d0a7e917 	ldw	r2,-24668(gp)
     79c:	10800118 	cmpnei	r2,r2,4
     7a0:	1000031e 	bne	r2,zero,7b0 <Game+0xd0>
			ALT_inc_y = -(ALT_inc_y);
     7a4:	d0a7ea17 	ldw	r2,-24664(gp)
     7a8:	0085c83a 	sub	r2,zero,r2
     7ac:	d0a7ea15 	stw	r2,-24664(gp)
		if ( (ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0) )
     7b0:	d0e7ed17 	ldw	r3,-24652(gp)
     7b4:	d0a7e617 	ldw	r2,-24680(gp)
     7b8:	18800226 	beq	r3,r2,7c4 <Game+0xe4>
     7bc:	d0a7eb17 	ldw	r2,-24660(gp)
     7c0:	1000031e 	bne	r2,zero,7d0 <Game+0xf0>
			ALT_inc_x = -(ALT_inc_x);
     7c4:	d0a7ec17 	ldw	r2,-24656(gp)
     7c8:	0085c83a 	sub	r2,zero,r2
     7cc:	d0a7ec15 	stw	r2,-24656(gp)


	
		VGA_box(ALT_x1, ALT_y, ALT_x1+5, ALT_y+5, balWit); // ball
     7d0:	d127eb17 	ldw	r4,-24660(gp)
     7d4:	d167e917 	ldw	r5,-24668(gp)
     7d8:	d0a7eb17 	ldw	r2,-24660(gp)
     7dc:	11800144 	addi	r6,r2,5
     7e0:	d0a7e917 	ldw	r2,-24668(gp)
     7e4:	10c00144 	addi	r3,r2,5
     7e8:	d0a0008b 	ldhu	r2,-32766(gp)
     7ec:	10bfffcc 	andi	r2,r2,65535
     7f0:	10a0001c 	xori	r2,r2,32768
     7f4:	10a00004 	addi	r2,r2,-32768
     7f8:	d8800015 	stw	r2,0(sp)
     7fc:	180f883a 	mov	r7,r3
     800:	00010fc0 	call	10fc <VGA_box>


		VGA_text (ALT_x1, ALT_y, "HALLOOO");
		*/

		OSTimeDly(1);
     804:	01000044 	movi	r4,1
     808:	000c2a80 	call	c2a8 <OSTimeDly>
	}
     80c:	003fc606 	br	728 <__alt_mem_Flash_flash_data+0xf4000728>

00000810 <menu>:
short geel = 0xffff00;

int xMenu = 32;
int yMenu = 18;

void menu(void* pdata){
     810:	defffc04 	addi	sp,sp,-16
     814:	dfc00315 	stw	ra,12(sp)
     818:	df000215 	stw	fp,8(sp)
     81c:	df000204 	addi	fp,sp,8
     820:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     824:	e0bfff17 	ldw	r2,-4(fp)
     828:	e0bffe15 	stw	r2,-8(fp)

	while(1){
		if (gameModeMenu <= 0){
     82c:	d0a00117 	ldw	r2,-32764(gp)
     830:	00800316 	blt	zero,r2,840 <menu+0x30>
			gameModeMenu = 4;
     834:	00800104 	movi	r2,4
     838:	d0a00115 	stw	r2,-32764(gp)
     83c:	00000506 	br	854 <menu+0x44>
		} else if (gameModeMenu >= 5){
     840:	d0a00117 	ldw	r2,-32764(gp)
     844:	10800150 	cmplti	r2,r2,5
     848:	1000021e 	bne	r2,zero,854 <menu+0x44>
			gameModeMenu = 1;
     84c:	00800044 	movi	r2,1
     850:	d0a00115 	stw	r2,-32764(gp)
		}

		if (controller(ID) == 1){
     854:	e13ffe17 	ldw	r4,-8(fp)
     858:	00002f00 	call	2f0 <controller>
     85c:	10800058 	cmpnei	r2,r2,1
     860:	10000a1e 	bne	r2,zero,88c <menu+0x7c>
			gameModeMenu++;
     864:	d0a00117 	ldw	r2,-32764(gp)
     868:	10800044 	addi	r2,r2,1
     86c:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(menuSem);
     870:	d0a7f117 	ldw	r2,-24636(gp)
     874:	1009883a 	mov	r4,r2
     878:	000a6980 	call	a698 <OSSemPost>
			printf("voor post1 \n");
     87c:	01000074 	movhi	r4,1
     880:	21018004 	addi	r4,r4,1536
     884:	00012e80 	call	12e8 <puts>
     888:	00000c06 	br	8bc <menu+0xac>

		} else if (controller(ID) == 0){
     88c:	e13ffe17 	ldw	r4,-8(fp)
     890:	00002f00 	call	2f0 <controller>
     894:	1000091e 	bne	r2,zero,8bc <menu+0xac>
			gameModeMenu--;
     898:	d0a00117 	ldw	r2,-32764(gp)
     89c:	10bfffc4 	addi	r2,r2,-1
     8a0:	d0a00115 	stw	r2,-32764(gp)
			OSSemPost(menuSem);
     8a4:	d0a7f117 	ldw	r2,-24636(gp)
     8a8:	1009883a 	mov	r4,r2
     8ac:	000a6980 	call	a698 <OSSemPost>
			printf("voor post2 \n");
     8b0:	01000074 	movhi	r4,1
     8b4:	21018304 	addi	r4,r4,1548
     8b8:	00012e80 	call	12e8 <puts>

		}
		OSTimeDlyHMSM(0,0,0,200);
     8bc:	0009883a 	mov	r4,zero
     8c0:	000b883a 	mov	r5,zero
     8c4:	000d883a 	mov	r6,zero
     8c8:	01c03204 	movi	r7,200
     8cc:	000c3f00 	call	c3f0 <OSTimeDlyHMSM>
	}
     8d0:	003fd606 	br	82c <__alt_mem_Flash_flash_data+0xf400082c>

000008d4 <selecteerMenu>:
	VGA_text (xMenu, yMenu+4, "Multiplayer");
	VGA_text (xMenu, yMenu+8, "Highscores");
	VGA_text (xMenu, yMenu+12, "Tutorial");
}

void selecteerMenu(void *pdata){
     8d4:	defffb04 	addi	sp,sp,-20
     8d8:	dfc00415 	stw	ra,16(sp)
     8dc:	df000315 	stw	fp,12(sp)
     8e0:	df000304 	addi	fp,sp,12
     8e4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	while(1){
		OSSemPend(menuSem, 0, &err);
     8e8:	d0a7f117 	ldw	r2,-24636(gp)
     8ec:	1009883a 	mov	r4,r2
     8f0:	000b883a 	mov	r5,zero
     8f4:	e1bffe04 	addi	r6,fp,-8
     8f8:	000a2c40 	call	a2c4 <OSSemPend>
		if (gameModeMenu == 1){
     8fc:	d0a00117 	ldw	r2,-32764(gp)
     900:	10800058 	cmpnei	r2,r2,1
     904:	1000651e 	bne	r2,zero,a9c <selecteerMenu+0x1c8>
			if(vorige == 4){
     908:	d0a7ef17 	ldw	r2,-24644(gp)
     90c:	10800118 	cmpnei	r2,r2,4
     910:	1000141e 	bne	r2,zero,964 <selecteerMenu+0x90>
				tekenBox(xLinks *4, xBoven+30 * 4, xRechts *4, xOnder+30 *4, zwart);
     914:	d0a00217 	ldw	r2,-32760(gp)
     918:	1085883a 	add	r2,r2,r2
     91c:	1085883a 	add	r2,r2,r2
     920:	1009883a 	mov	r4,r2
     924:	d0a00417 	ldw	r2,-32752(gp)
     928:	11401e04 	addi	r5,r2,120
     92c:	d0a00317 	ldw	r2,-32756(gp)
     930:	1085883a 	add	r2,r2,r2
     934:	1085883a 	add	r2,r2,r2
     938:	100d883a 	mov	r6,r2
     93c:	d0a00517 	ldw	r2,-32748(gp)
     940:	10c01e04 	addi	r3,r2,120
     944:	d0a7f00b 	ldhu	r2,-24640(gp)
     948:	10bfffcc 	andi	r2,r2,65535
     94c:	10a0001c 	xori	r2,r2,32768
     950:	10a00004 	addi	r2,r2,-32768
     954:	d8800015 	stw	r2,0(sp)
     958:	180f883a 	mov	r7,r3
     95c:	0000e780 	call	e78 <tekenBox>
     960:	00001606 	br	9bc <selecteerMenu+0xe8>
			}else if(vorige == 3){
     964:	d0a7ef17 	ldw	r2,-24644(gp)
     968:	108000d8 	cmpnei	r2,r2,3
     96c:	1000131e 	bne	r2,zero,9bc <selecteerMenu+0xe8>
				tekenBox(xLinks *4, xBoven+20 *4, xRechts *4, xOnder+20 *4, zwart);
     970:	d0a00217 	ldw	r2,-32760(gp)
     974:	1085883a 	add	r2,r2,r2
     978:	1085883a 	add	r2,r2,r2
     97c:	1009883a 	mov	r4,r2
     980:	d0a00417 	ldw	r2,-32752(gp)
     984:	11401404 	addi	r5,r2,80
     988:	d0a00317 	ldw	r2,-32756(gp)
     98c:	1085883a 	add	r2,r2,r2
     990:	1085883a 	add	r2,r2,r2
     994:	100d883a 	mov	r6,r2
     998:	d0a00517 	ldw	r2,-32748(gp)
     99c:	10c01404 	addi	r3,r2,80
     9a0:	d0a7f00b 	ldhu	r2,-24640(gp)
     9a4:	10bfffcc 	andi	r2,r2,65535
     9a8:	10a0001c 	xori	r2,r2,32768
     9ac:	10a00004 	addi	r2,r2,-32768
     9b0:	d8800015 	stw	r2,0(sp)
     9b4:	180f883a 	mov	r7,r3
     9b8:	0000e780 	call	e78 <tekenBox>
			}
			tekenBox(xLinks *4, xBoven *4, xRechts *4, xOnder *4, geel);
     9bc:	d0a00217 	ldw	r2,-32760(gp)
     9c0:	1085883a 	add	r2,r2,r2
     9c4:	1085883a 	add	r2,r2,r2
     9c8:	1009883a 	mov	r4,r2
     9cc:	d0a00417 	ldw	r2,-32752(gp)
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	1085883a 	add	r2,r2,r2
     9d8:	100b883a 	mov	r5,r2
     9dc:	d0a00317 	ldw	r2,-32756(gp)
     9e0:	1085883a 	add	r2,r2,r2
     9e4:	1085883a 	add	r2,r2,r2
     9e8:	100d883a 	mov	r6,r2
     9ec:	d0a00517 	ldw	r2,-32748(gp)
     9f0:	1085883a 	add	r2,r2,r2
     9f4:	1085883a 	add	r2,r2,r2
     9f8:	1007883a 	mov	r3,r2
     9fc:	d0a0060b 	ldhu	r2,-32744(gp)
     a00:	10bfffcc 	andi	r2,r2,65535
     a04:	10a0001c 	xori	r2,r2,32768
     a08:	10a00004 	addi	r2,r2,-32768
     a0c:	d8800015 	stw	r2,0(sp)
     a10:	180f883a 	mov	r7,r3
     a14:	0000e780 	call	e78 <tekenBox>
			tekenBox2(xLinks *4, xBoven *4, xRechts *4, xOnder *4, zwart);
     a18:	d0a00217 	ldw	r2,-32760(gp)
     a1c:	1085883a 	add	r2,r2,r2
     a20:	1085883a 	add	r2,r2,r2
     a24:	1009883a 	mov	r4,r2
     a28:	d0a00417 	ldw	r2,-32752(gp)
     a2c:	1085883a 	add	r2,r2,r2
     a30:	1085883a 	add	r2,r2,r2
     a34:	100b883a 	mov	r5,r2
     a38:	d0a00317 	ldw	r2,-32756(gp)
     a3c:	1085883a 	add	r2,r2,r2
     a40:	1085883a 	add	r2,r2,r2
     a44:	100d883a 	mov	r6,r2
     a48:	d0a00517 	ldw	r2,-32748(gp)
     a4c:	1085883a 	add	r2,r2,r2
     a50:	1085883a 	add	r2,r2,r2
     a54:	1007883a 	mov	r3,r2
     a58:	d0a7f00b 	ldhu	r2,-24640(gp)
     a5c:	10bfffcc 	andi	r2,r2,65535
     a60:	10a0001c 	xori	r2,r2,32768
     a64:	10a00004 	addi	r2,r2,-32768
     a68:	d8800015 	stw	r2,0(sp)
     a6c:	180f883a 	mov	r7,r3
     a70:	0000ed00 	call	ed0 <tekenBox2>
			VGA_text (xMenu, yMenu, "Singleplayer");
     a74:	d0e00717 	ldw	r3,-32740(gp)
     a78:	d0a00817 	ldw	r2,-32736(gp)
     a7c:	1809883a 	mov	r4,r3
     a80:	100b883a 	mov	r5,r2
     a84:	01800074 	movhi	r6,1
     a88:	31818604 	addi	r6,r6,1560
     a8c:	00011b00 	call	11b0 <VGA_text>
			vorige = 1;
     a90:	00800044 	movi	r2,1
     a94:	d0a7ef15 	stw	r2,-24644(gp)
     a98:	0000f406 	br	e6c <selecteerMenu+0x598>
		} else if (gameModeMenu == 2){
     a9c:	d0a00117 	ldw	r2,-32764(gp)
     aa0:	10800098 	cmpnei	r2,r2,2
     aa4:	1000621e 	bne	r2,zero,c30 <selecteerMenu+0x35c>
			if(vorige == 1){
     aa8:	d0a7ef17 	ldw	r2,-24644(gp)
     aac:	10800058 	cmpnei	r2,r2,1
     ab0:	1000181e 	bne	r2,zero,b14 <selecteerMenu+0x240>
				tekenBox(xLinks *4, xBoven *4, xRechts *4, xOnder *4, zwart);
     ab4:	d0a00217 	ldw	r2,-32760(gp)
     ab8:	1085883a 	add	r2,r2,r2
     abc:	1085883a 	add	r2,r2,r2
     ac0:	1009883a 	mov	r4,r2
     ac4:	d0a00417 	ldw	r2,-32752(gp)
     ac8:	1085883a 	add	r2,r2,r2
     acc:	1085883a 	add	r2,r2,r2
     ad0:	100b883a 	mov	r5,r2
     ad4:	d0a00317 	ldw	r2,-32756(gp)
     ad8:	1085883a 	add	r2,r2,r2
     adc:	1085883a 	add	r2,r2,r2
     ae0:	100d883a 	mov	r6,r2
     ae4:	d0a00517 	ldw	r2,-32748(gp)
     ae8:	1085883a 	add	r2,r2,r2
     aec:	1085883a 	add	r2,r2,r2
     af0:	1007883a 	mov	r3,r2
     af4:	d0a7f00b 	ldhu	r2,-24640(gp)
     af8:	10bfffcc 	andi	r2,r2,65535
     afc:	10a0001c 	xori	r2,r2,32768
     b00:	10a00004 	addi	r2,r2,-32768
     b04:	d8800015 	stw	r2,0(sp)
     b08:	180f883a 	mov	r7,r3
     b0c:	0000e780 	call	e78 <tekenBox>
     b10:	00001606 	br	b6c <selecteerMenu+0x298>
			}else if(vorige == 3){
     b14:	d0a7ef17 	ldw	r2,-24644(gp)
     b18:	108000d8 	cmpnei	r2,r2,3
     b1c:	1000131e 	bne	r2,zero,b6c <selecteerMenu+0x298>
				tekenBox(xLinks *4, xBoven+20 *4, xRechts *4, xOnder+20 *4, zwart);
     b20:	d0a00217 	ldw	r2,-32760(gp)
     b24:	1085883a 	add	r2,r2,r2
     b28:	1085883a 	add	r2,r2,r2
     b2c:	1009883a 	mov	r4,r2
     b30:	d0a00417 	ldw	r2,-32752(gp)
     b34:	11401404 	addi	r5,r2,80
     b38:	d0a00317 	ldw	r2,-32756(gp)
     b3c:	1085883a 	add	r2,r2,r2
     b40:	1085883a 	add	r2,r2,r2
     b44:	100d883a 	mov	r6,r2
     b48:	d0a00517 	ldw	r2,-32748(gp)
     b4c:	10c01404 	addi	r3,r2,80
     b50:	d0a7f00b 	ldhu	r2,-24640(gp)
     b54:	10bfffcc 	andi	r2,r2,65535
     b58:	10a0001c 	xori	r2,r2,32768
     b5c:	10a00004 	addi	r2,r2,-32768
     b60:	d8800015 	stw	r2,0(sp)
     b64:	180f883a 	mov	r7,r3
     b68:	0000e780 	call	e78 <tekenBox>
			}
			tekenBox(xLinks *4, xBoven+10 *4, xRechts *4, xOnder+10 *4, geel);
     b6c:	d0a00217 	ldw	r2,-32760(gp)
     b70:	1085883a 	add	r2,r2,r2
     b74:	1085883a 	add	r2,r2,r2
     b78:	1009883a 	mov	r4,r2
     b7c:	d0a00417 	ldw	r2,-32752(gp)
     b80:	11400a04 	addi	r5,r2,40
     b84:	d0a00317 	ldw	r2,-32756(gp)
     b88:	1085883a 	add	r2,r2,r2
     b8c:	1085883a 	add	r2,r2,r2
     b90:	100d883a 	mov	r6,r2
     b94:	d0a00517 	ldw	r2,-32748(gp)
     b98:	10c00a04 	addi	r3,r2,40
     b9c:	d0a0060b 	ldhu	r2,-32744(gp)
     ba0:	10bfffcc 	andi	r2,r2,65535
     ba4:	10a0001c 	xori	r2,r2,32768
     ba8:	10a00004 	addi	r2,r2,-32768
     bac:	d8800015 	stw	r2,0(sp)
     bb0:	180f883a 	mov	r7,r3
     bb4:	0000e780 	call	e78 <tekenBox>
			tekenBox2(xLinks *4, xBoven+10 *4, xRechts *4, xOnder+10 *4, zwart);
     bb8:	d0a00217 	ldw	r2,-32760(gp)
     bbc:	1085883a 	add	r2,r2,r2
     bc0:	1085883a 	add	r2,r2,r2
     bc4:	1009883a 	mov	r4,r2
     bc8:	d0a00417 	ldw	r2,-32752(gp)
     bcc:	11400a04 	addi	r5,r2,40
     bd0:	d0a00317 	ldw	r2,-32756(gp)
     bd4:	1085883a 	add	r2,r2,r2
     bd8:	1085883a 	add	r2,r2,r2
     bdc:	100d883a 	mov	r6,r2
     be0:	d0a00517 	ldw	r2,-32748(gp)
     be4:	10c00a04 	addi	r3,r2,40
     be8:	d0a7f00b 	ldhu	r2,-24640(gp)
     bec:	10bfffcc 	andi	r2,r2,65535
     bf0:	10a0001c 	xori	r2,r2,32768
     bf4:	10a00004 	addi	r2,r2,-32768
     bf8:	d8800015 	stw	r2,0(sp)
     bfc:	180f883a 	mov	r7,r3
     c00:	0000ed00 	call	ed0 <tekenBox2>
			VGA_text (xMenu, yMenu+4, "Multiplayer");
     c04:	d0e00717 	ldw	r3,-32740(gp)
     c08:	d0a00817 	ldw	r2,-32736(gp)
     c0c:	10800104 	addi	r2,r2,4
     c10:	1809883a 	mov	r4,r3
     c14:	100b883a 	mov	r5,r2
     c18:	01800074 	movhi	r6,1
     c1c:	31818a04 	addi	r6,r6,1576
     c20:	00011b00 	call	11b0 <VGA_text>
			vorige = 2;
     c24:	00800084 	movi	r2,2
     c28:	d0a7ef15 	stw	r2,-24644(gp)
     c2c:	00008f06 	br	e6c <selecteerMenu+0x598>
		} else if (gameModeMenu == 3){
     c30:	d0a00117 	ldw	r2,-32764(gp)
     c34:	108000d8 	cmpnei	r2,r2,3
     c38:	1000461e 	bne	r2,zero,d54 <selecteerMenu+0x480>
			if(vorige == 2){
     c3c:	d0a7ef17 	ldw	r2,-24644(gp)
     c40:	10800098 	cmpnei	r2,r2,2
     c44:	10000e1e 	bne	r2,zero,c80 <selecteerMenu+0x3ac>
				tekenBox(xLinks, xBoven+10, xRechts, xOnder+10, zwart);
     c48:	d1200217 	ldw	r4,-32760(gp)
     c4c:	d0a00417 	ldw	r2,-32752(gp)
     c50:	11400284 	addi	r5,r2,10
     c54:	d1a00317 	ldw	r6,-32756(gp)
     c58:	d0a00517 	ldw	r2,-32748(gp)
     c5c:	10c00284 	addi	r3,r2,10
     c60:	d0a7f00b 	ldhu	r2,-24640(gp)
     c64:	10bfffcc 	andi	r2,r2,65535
     c68:	10a0001c 	xori	r2,r2,32768
     c6c:	10a00004 	addi	r2,r2,-32768
     c70:	d8800015 	stw	r2,0(sp)
     c74:	180f883a 	mov	r7,r3
     c78:	0000e780 	call	e78 <tekenBox>
     c7c:	00001006 	br	cc0 <selecteerMenu+0x3ec>
			}else if(vorige == 4){
     c80:	d0a7ef17 	ldw	r2,-24644(gp)
     c84:	10800118 	cmpnei	r2,r2,4
     c88:	10000d1e 	bne	r2,zero,cc0 <selecteerMenu+0x3ec>
				tekenBox(xLinks, xBoven+30, xRechts, xOnder+30, zwart);
     c8c:	d1200217 	ldw	r4,-32760(gp)
     c90:	d0a00417 	ldw	r2,-32752(gp)
     c94:	11400784 	addi	r5,r2,30
     c98:	d1a00317 	ldw	r6,-32756(gp)
     c9c:	d0a00517 	ldw	r2,-32748(gp)
     ca0:	10c00784 	addi	r3,r2,30
     ca4:	d0a7f00b 	ldhu	r2,-24640(gp)
     ca8:	10bfffcc 	andi	r2,r2,65535
     cac:	10a0001c 	xori	r2,r2,32768
     cb0:	10a00004 	addi	r2,r2,-32768
     cb4:	d8800015 	stw	r2,0(sp)
     cb8:	180f883a 	mov	r7,r3
     cbc:	0000e780 	call	e78 <tekenBox>
			}
			tekenBox(xLinks, xBoven+20, xRechts, xOnder+20, geel);
     cc0:	d1200217 	ldw	r4,-32760(gp)
     cc4:	d0a00417 	ldw	r2,-32752(gp)
     cc8:	11400504 	addi	r5,r2,20
     ccc:	d1a00317 	ldw	r6,-32756(gp)
     cd0:	d0a00517 	ldw	r2,-32748(gp)
     cd4:	10c00504 	addi	r3,r2,20
     cd8:	d0a0060b 	ldhu	r2,-32744(gp)
     cdc:	10bfffcc 	andi	r2,r2,65535
     ce0:	10a0001c 	xori	r2,r2,32768
     ce4:	10a00004 	addi	r2,r2,-32768
     ce8:	d8800015 	stw	r2,0(sp)
     cec:	180f883a 	mov	r7,r3
     cf0:	0000e780 	call	e78 <tekenBox>
			tekenBox2(xLinks, xBoven+20, xRechts, xOnder+20, zwart);
     cf4:	d1200217 	ldw	r4,-32760(gp)
     cf8:	d0a00417 	ldw	r2,-32752(gp)
     cfc:	11400504 	addi	r5,r2,20
     d00:	d1a00317 	ldw	r6,-32756(gp)
     d04:	d0a00517 	ldw	r2,-32748(gp)
     d08:	10c00504 	addi	r3,r2,20
     d0c:	d0a7f00b 	ldhu	r2,-24640(gp)
     d10:	10bfffcc 	andi	r2,r2,65535
     d14:	10a0001c 	xori	r2,r2,32768
     d18:	10a00004 	addi	r2,r2,-32768
     d1c:	d8800015 	stw	r2,0(sp)
     d20:	180f883a 	mov	r7,r3
     d24:	0000ed00 	call	ed0 <tekenBox2>
			VGA_text (xMenu, yMenu+8, "Highscores");
     d28:	d0e00717 	ldw	r3,-32740(gp)
     d2c:	d0a00817 	ldw	r2,-32736(gp)
     d30:	10800204 	addi	r2,r2,8
     d34:	1809883a 	mov	r4,r3
     d38:	100b883a 	mov	r5,r2
     d3c:	01800074 	movhi	r6,1
     d40:	31818d04 	addi	r6,r6,1588
     d44:	00011b00 	call	11b0 <VGA_text>
			vorige = 3;
     d48:	008000c4 	movi	r2,3
     d4c:	d0a7ef15 	stw	r2,-24644(gp)
     d50:	00004606 	br	e6c <selecteerMenu+0x598>
		} else if (gameModeMenu == 4){
     d54:	d0a00117 	ldw	r2,-32764(gp)
     d58:	10800118 	cmpnei	r2,r2,4
     d5c:	1000431e 	bne	r2,zero,e6c <selecteerMenu+0x598>
			if(vorige == 1){
     d60:	d0a7ef17 	ldw	r2,-24644(gp)
     d64:	10800058 	cmpnei	r2,r2,1
     d68:	10000c1e 	bne	r2,zero,d9c <selecteerMenu+0x4c8>
				tekenBox(xLinks, xBoven, xRechts, xOnder, zwart);
     d6c:	d1200217 	ldw	r4,-32760(gp)
     d70:	d1600417 	ldw	r5,-32752(gp)
     d74:	d1a00317 	ldw	r6,-32756(gp)
     d78:	d0e00517 	ldw	r3,-32748(gp)
     d7c:	d0a7f00b 	ldhu	r2,-24640(gp)
     d80:	10bfffcc 	andi	r2,r2,65535
     d84:	10a0001c 	xori	r2,r2,32768
     d88:	10a00004 	addi	r2,r2,-32768
     d8c:	d8800015 	stw	r2,0(sp)
     d90:	180f883a 	mov	r7,r3
     d94:	0000e780 	call	e78 <tekenBox>
     d98:	00001006 	br	ddc <selecteerMenu+0x508>
			}else if(vorige == 3){
     d9c:	d0a7ef17 	ldw	r2,-24644(gp)
     da0:	108000d8 	cmpnei	r2,r2,3
     da4:	10000d1e 	bne	r2,zero,ddc <selecteerMenu+0x508>
				tekenBox(xLinks, xBoven+20, xRechts, xOnder+20, zwart);
     da8:	d1200217 	ldw	r4,-32760(gp)
     dac:	d0a00417 	ldw	r2,-32752(gp)
     db0:	11400504 	addi	r5,r2,20
     db4:	d1a00317 	ldw	r6,-32756(gp)
     db8:	d0a00517 	ldw	r2,-32748(gp)
     dbc:	10c00504 	addi	r3,r2,20
     dc0:	d0a7f00b 	ldhu	r2,-24640(gp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	10a0001c 	xori	r2,r2,32768
     dcc:	10a00004 	addi	r2,r2,-32768
     dd0:	d8800015 	stw	r2,0(sp)
     dd4:	180f883a 	mov	r7,r3
     dd8:	0000e780 	call	e78 <tekenBox>
			}
			tekenBox(xLinks, xBoven+30, xRechts, xOnder+30, geel);
     ddc:	d1200217 	ldw	r4,-32760(gp)
     de0:	d0a00417 	ldw	r2,-32752(gp)
     de4:	11400784 	addi	r5,r2,30
     de8:	d1a00317 	ldw	r6,-32756(gp)
     dec:	d0a00517 	ldw	r2,-32748(gp)
     df0:	10c00784 	addi	r3,r2,30
     df4:	d0a0060b 	ldhu	r2,-32744(gp)
     df8:	10bfffcc 	andi	r2,r2,65535
     dfc:	10a0001c 	xori	r2,r2,32768
     e00:	10a00004 	addi	r2,r2,-32768
     e04:	d8800015 	stw	r2,0(sp)
     e08:	180f883a 	mov	r7,r3
     e0c:	0000e780 	call	e78 <tekenBox>
			tekenBox2(xLinks, xBoven+30, xRechts, xOnder+30, zwart);
     e10:	d1200217 	ldw	r4,-32760(gp)
     e14:	d0a00417 	ldw	r2,-32752(gp)
     e18:	11400784 	addi	r5,r2,30
     e1c:	d1a00317 	ldw	r6,-32756(gp)
     e20:	d0a00517 	ldw	r2,-32748(gp)
     e24:	10c00784 	addi	r3,r2,30
     e28:	d0a7f00b 	ldhu	r2,-24640(gp)
     e2c:	10bfffcc 	andi	r2,r2,65535
     e30:	10a0001c 	xori	r2,r2,32768
     e34:	10a00004 	addi	r2,r2,-32768
     e38:	d8800015 	stw	r2,0(sp)
     e3c:	180f883a 	mov	r7,r3
     e40:	0000ed00 	call	ed0 <tekenBox2>
			VGA_text (xMenu, yMenu+12, "Tutorial");
     e44:	d0e00717 	ldw	r3,-32740(gp)
     e48:	d0a00817 	ldw	r2,-32736(gp)
     e4c:	10800304 	addi	r2,r2,12
     e50:	1809883a 	mov	r4,r3
     e54:	100b883a 	mov	r5,r2
     e58:	01800074 	movhi	r6,1
     e5c:	31819004 	addi	r6,r6,1600
     e60:	00011b00 	call	11b0 <VGA_text>
			vorige = 4;
     e64:	00800104 	movi	r2,4
     e68:	d0a7ef15 	stw	r2,-24644(gp)
//		}else if(vorige == 3){
//			tekenBox(xLinks, xBoven+20, xRechts, xOnder+20, zwart);
//		}else if(vorige == 4){
//			tekenBox(xLinks, xBoven+30, xRechts, xOnder+30, zwart);
//		}
		OSTimeDly(10);
     e6c:	01000284 	movi	r4,10
     e70:	000c2a80 	call	c2a8 <OSTimeDly>
	}
     e74:	003e9c06 	br	8e8 <__alt_mem_Flash_flash_data+0xf40008e8>

00000e78 <tekenBox>:
}

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
     e78:	defff804 	addi	sp,sp,-32
     e7c:	dfc00715 	stw	ra,28(sp)
     e80:	df000615 	stw	fp,24(sp)
     e84:	df000604 	addi	fp,sp,24
     e88:	e13ffb15 	stw	r4,-20(fp)
     e8c:	e17ffc15 	stw	r5,-16(fp)
     e90:	e1bffd15 	stw	r6,-12(fp)
     e94:	e1fffe15 	stw	r7,-8(fp)
     e98:	e0800217 	ldw	r2,8(fp)
     e9c:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     ea0:	e0bfff0f 	ldh	r2,-4(fp)
     ea4:	d8800015 	stw	r2,0(sp)
     ea8:	e13ffb17 	ldw	r4,-20(fp)
     eac:	e17ffc17 	ldw	r5,-16(fp)
     eb0:	e1bffd17 	ldw	r6,-12(fp)
     eb4:	e1fffe17 	ldw	r7,-8(fp)
     eb8:	00010fc0 	call	10fc <VGA_box>
}
     ebc:	e037883a 	mov	sp,fp
     ec0:	dfc00117 	ldw	ra,4(sp)
     ec4:	df000017 	ldw	fp,0(sp)
     ec8:	dec00204 	addi	sp,sp,8
     ecc:	f800283a 	ret

00000ed0 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
     ed0:	defff804 	addi	sp,sp,-32
     ed4:	dfc00715 	stw	ra,28(sp)
     ed8:	df000615 	stw	fp,24(sp)
     edc:	df000604 	addi	fp,sp,24
     ee0:	e13ffb15 	stw	r4,-20(fp)
     ee4:	e17ffc15 	stw	r5,-16(fp)
     ee8:	e1bffd15 	stw	r6,-12(fp)
     eec:	e1fffe15 	stw	r7,-8(fp)
     ef0:	e0800217 	ldw	r2,8(fp)
     ef4:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
     ef8:	e0bffb17 	ldw	r2,-20(fp)
     efc:	10800044 	addi	r2,r2,1
     f00:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
     f04:	e0bffc17 	ldw	r2,-16(fp)
     f08:	10800044 	addi	r2,r2,1
     f0c:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
     f10:	e0bffd17 	ldw	r2,-12(fp)
     f14:	10bfffc4 	addi	r2,r2,-1
     f18:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
     f1c:	e0bffe17 	ldw	r2,-8(fp)
     f20:	10bfffc4 	addi	r2,r2,-1
     f24:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     f28:	e0bfff0f 	ldh	r2,-4(fp)
     f2c:	d8800015 	stw	r2,0(sp)
     f30:	e13ffb17 	ldw	r4,-20(fp)
     f34:	e17ffc17 	ldw	r5,-16(fp)
     f38:	e1bffd17 	ldw	r6,-12(fp)
     f3c:	e1fffe17 	ldw	r7,-8(fp)
     f40:	00010fc0 	call	10fc <VGA_box>
}
     f44:	e037883a 	mov	sp,fp
     f48:	dfc00117 	ldw	ra,4(sp)
     f4c:	df000017 	ldw	fp,0(sp)
     f50:	dec00204 	addi	sp,sp,8
     f54:	f800283a 	ret

00000f58 <main>:
void selecteerMenu(void *pdata);
void Game(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     f58:	defffc04 	addi	sp,sp,-16
     f5c:	dfc00315 	stw	ra,12(sp)
     f60:	df000215 	stw	fp,8(sp)
     f64:	df000204 	addi	fp,sp,8
	OSInit();
     f68:	00053ec0 	call	53ec <OSInit>
	int counter = 0x50000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     f6c:	00800174 	movhi	r2,5
     f70:	e0bfff15 	stw	r2,-4(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     f74:	d0a00917 	ldw	r2,-32732(gp)
     f78:	10800204 	addi	r2,r2,8
     f7c:	e0ffff17 	ldw	r3,-4(fp)
     f80:	18ffffcc 	andi	r3,r3,65535
     f84:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     f88:	d0a00917 	ldw	r2,-32732(gp)
     f8c:	10800304 	addi	r2,r2,12
     f90:	e0ffff17 	ldw	r3,-4(fp)
     f94:	1806d43a 	srli	r3,r3,16
     f98:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     f9c:	d0a00917 	ldw	r2,-32732(gp)
     fa0:	10800104 	addi	r2,r2,4
     fa4:	00c001c4 	movi	r3,7
     fa8:	10c00015 	stw	r3,0(r2)

	menuSem = OSSemCreate(1);
     fac:	01000044 	movi	r4,1
     fb0:	0009f5c0 	call	9f5c <OSSemCreate>
     fb4:	d0a7f115 	stw	r2,-24636(gp)
	controllerSem = OSSemCreate(1);
     fb8:	01000044 	movi	r4,1
     fbc:	0009f5c0 	call	9f5c <OSSemCreate>
     fc0:	d0a7e015 	stw	r2,-24704(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
     fc4:	d8000015 	stw	zero,0(sp)
     fc8:	0009883a 	mov	r4,zero
     fcc:	000b883a 	mov	r5,zero
     fd0:	01804fc4 	movi	r6,319
     fd4:	01c03bc4 	movi	r7,239
     fd8:	00010fc0 	call	10fc <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
     fdc:	00803fc4 	movi	r2,255
     fe0:	d8800015 	stw	r2,0(sp)
     fe4:	010003c4 	movi	r4,15
     fe8:	01400c84 	movi	r5,50
     fec:	01800504 	movi	r6,20
     ff0:	01c01904 	movi	r7,100
     ff4:	00010fc0 	call	10fc <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
     ff8:	00803fc4 	movi	r2,255
     ffc:	d8800015 	stw	r2,0(sp)
    1000:	01004b04 	movi	r4,300
    1004:	01400c84 	movi	r5,50
    1008:	01804c44 	movi	r6,305
    100c:	01c01904 	movi	r7,100
    1010:	00010fc0 	call	10fc <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
    1014:	00804034 	movhi	r2,256
    1018:	10bfffc4 	addi	r2,r2,-1
    101c:	d8800015 	stw	r2,0(sp)
    1020:	0009883a 	mov	r4,zero
    1024:	000b883a 	mov	r5,zero
    1028:	01804fc4 	movi	r6,319
    102c:	01c000c4 	movi	r7,3
    1030:	00010fc0 	call	10fc <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
    1034:	00804034 	movhi	r2,256
    1038:	10bfffc4 	addi	r2,r2,-1
    103c:	d8800015 	stw	r2,0(sp)
    1040:	0009883a 	mov	r4,zero
    1044:	01403b04 	movi	r5,236
    1048:	01804fc4 	movi	r6,319
    104c:	01c03bc4 	movi	r7,239
    1050:	00010fc0 	call	10fc <VGA_box>

//	VGA_box (159, 0, 160, 239, 0xFFFFFF);				// middenlijntje

	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    1054:	01000034 	movhi	r4,0
    1058:	2100a004 	addi	r4,r4,640
    105c:	01400044 	movi	r5,1
    1060:	018000b4 	movhi	r6,2
    1064:	31a1e104 	addi	r6,r6,-30844
    1068:	01c001c4 	movi	r7,7
    106c:	000aef40 	call	aef4 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    1070:	01000034 	movhi	r4,0
    1074:	2100a004 	addi	r4,r4,640
    1078:	01400084 	movi	r5,2
    107c:	018000b4 	movhi	r6,2
    1080:	31a9e104 	addi	r6,r6,-22652
    1084:	01c00204 	movi	r7,8
    1088:	000aef40 	call	aef4 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    108c:	01000034 	movhi	r4,0
    1090:	2101b804 	addi	r4,r4,1760
    1094:	000b883a 	mov	r5,zero
    1098:	018000b4 	movhi	r6,2
    109c:	31b1e104 	addi	r6,r6,-14460
    10a0:	01c00184 	movi	r7,6
    10a4:	000aef40 	call	aef4 <OSTaskCreate>

	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    10a8:	01000034 	movhi	r4,0
    10ac:	21020404 	addi	r4,r4,2064
    10b0:	01400084 	movi	r5,2
    10b4:	01800074 	movhi	r6,1
    10b8:	3199e104 	addi	r6,r6,26500
    10bc:	01c00244 	movi	r7,9
    10c0:	000aef40 	call	aef4 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 0, &menu_stk2[TASK_STACKSIZE-1], 10);
    10c4:	01000034 	movhi	r4,0
    10c8:	21023504 	addi	r4,r4,2260
    10cc:	000b883a 	mov	r5,zero
    10d0:	018000b4 	movhi	r6,2
    10d4:	31b9e104 	addi	r6,r6,-6268
    10d8:	01c00284 	movi	r7,10
    10dc:	000aef40 	call	aef4 <OSTaskCreate>
	OSStart();
    10e0:	00057100 	call	5710 <OSStart>
	return 0;
    10e4:	0005883a 	mov	r2,zero
}
    10e8:	e037883a 	mov	sp,fp
    10ec:	dfc00117 	ldw	ra,4(sp)
    10f0:	df000017 	ldw	fp,0(sp)
    10f4:	dec00204 	addi	sp,sp,8
    10f8:	f800283a 	ret

000010fc <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    10fc:	defff604 	addi	sp,sp,-40
    1100:	df000915 	stw	fp,36(sp)
    1104:	df000904 	addi	fp,sp,36
    1108:	e13ffb15 	stw	r4,-20(fp)
    110c:	e17ffc15 	stw	r5,-16(fp)
    1110:	e1bffd15 	stw	r6,-12(fp)
    1114:	e1fffe15 	stw	r7,-8(fp)
    1118:	e0800117 	ldw	r2,4(fp)
    111c:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    1120:	00820034 	movhi	r2,2048
    1124:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1128:	e0bffc17 	ldw	r2,-16(fp)
    112c:	e0bff715 	stw	r2,-36(fp)
    1130:	00001806 	br	1194 <VGA_box+0x98>
	{
		col = x1;
    1134:	e0bffb17 	ldw	r2,-20(fp)
    1138:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    113c:	00000f06 	br	117c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    1140:	e0bff717 	ldw	r2,-36(fp)
    1144:	1006927a 	slli	r3,r2,9
    1148:	e0bff817 	ldw	r2,-32(fp)
    114c:	1885883a 	add	r2,r3,r2
    1150:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    1154:	e0bffa17 	ldw	r2,-24(fp)
    1158:	1085883a 	add	r2,r2,r2
    115c:	1007883a 	mov	r3,r2
    1160:	e0bff917 	ldw	r2,-28(fp)
    1164:	10c5883a 	add	r2,r2,r3
    1168:	e0ffff0b 	ldhu	r3,-4(fp)
    116c:	10c0000d 	sth	r3,0(r2)
			++col;
    1170:	e0bff817 	ldw	r2,-32(fp)
    1174:	10800044 	addi	r2,r2,1
    1178:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    117c:	e0bff817 	ldw	r2,-32(fp)
    1180:	e0fffd17 	ldw	r3,-12(fp)
    1184:	18bfee0e 	bge	r3,r2,1140 <__alt_mem_Flash_flash_data+0xf4001140>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    1188:	e0bff717 	ldw	r2,-36(fp)
    118c:	10800044 	addi	r2,r2,1
    1190:	e0bff715 	stw	r2,-36(fp)
    1194:	e0bff717 	ldw	r2,-36(fp)
    1198:	e0fffe17 	ldw	r3,-8(fp)
    119c:	18bfe50e 	bge	r3,r2,1134 <__alt_mem_Flash_flash_data+0xf4001134>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    11a0:	e037883a 	mov	sp,fp
    11a4:	df000017 	ldw	fp,0(sp)
    11a8:	dec00104 	addi	sp,sp,4
    11ac:	f800283a 	ret

000011b0 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    11b0:	defffa04 	addi	sp,sp,-24
    11b4:	df000515 	stw	fp,20(sp)
    11b8:	df000504 	addi	fp,sp,20
    11bc:	e13ffd15 	stw	r4,-12(fp)
    11c0:	e17ffe15 	stw	r5,-8(fp)
    11c4:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    11c8:	00824034 	movhi	r2,2304
    11cc:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    11d0:	e0bffe17 	ldw	r2,-8(fp)
    11d4:	100691fa 	slli	r3,r2,7
    11d8:	e0bffd17 	ldw	r2,-12(fp)
    11dc:	1885883a 	add	r2,r3,r2
    11e0:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    11e4:	00000c06 	br	1218 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    11e8:	e0bffb17 	ldw	r2,-20(fp)
    11ec:	e0fffc17 	ldw	r3,-16(fp)
    11f0:	1885883a 	add	r2,r3,r2
    11f4:	e0ffff17 	ldw	r3,-4(fp)
    11f8:	18c00003 	ldbu	r3,0(r3)
    11fc:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    1200:	e0bfff17 	ldw	r2,-4(fp)
    1204:	10800044 	addi	r2,r2,1
    1208:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    120c:	e0bffb17 	ldw	r2,-20(fp)
    1210:	10800044 	addi	r2,r2,1
    1214:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    1218:	e0bfff17 	ldw	r2,-4(fp)
    121c:	10800003 	ldbu	r2,0(r2)
    1220:	10803fcc 	andi	r2,r2,255
    1224:	1080201c 	xori	r2,r2,128
    1228:	10bfe004 	addi	r2,r2,-128
    122c:	103fee1e 	bne	r2,zero,11e8 <__alt_mem_Flash_flash_data+0xf40011e8>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    1230:	e037883a 	mov	sp,fp
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00104 	addi	sp,sp,4
    123c:	f800283a 	ret

00001240 <_puts_r>:
    1240:	defff604 	addi	sp,sp,-40
    1244:	dc000715 	stw	r16,28(sp)
    1248:	2021883a 	mov	r16,r4
    124c:	2809883a 	mov	r4,r5
    1250:	dc400815 	stw	r17,32(sp)
    1254:	dfc00915 	stw	ra,36(sp)
    1258:	2823883a 	mov	r17,r5
    125c:	00012fc0 	call	12fc <strlen>
    1260:	81400217 	ldw	r5,8(r16)
    1264:	11000044 	addi	r4,r2,1
    1268:	d8800115 	stw	r2,4(sp)
    126c:	00800074 	movhi	r2,1
    1270:	2980030b 	ldhu	r6,12(r5)
    1274:	10819304 	addi	r2,r2,1612
    1278:	d8800215 	stw	r2,8(sp)
    127c:	00800044 	movi	r2,1
    1280:	d8800315 	stw	r2,12(sp)
    1284:	00800084 	movi	r2,2
    1288:	d8800515 	stw	r2,20(sp)
    128c:	dc400015 	stw	r17,0(sp)
    1290:	d9000615 	stw	r4,24(sp)
    1294:	dec00415 	stw	sp,16(sp)
    1298:	3088000c 	andi	r2,r6,8192
    129c:	1000061e 	bne	r2,zero,12b8 <_puts_r+0x78>
    12a0:	29001917 	ldw	r4,100(r5)
    12a4:	00b7ffc4 	movi	r2,-8193
    12a8:	31880014 	ori	r6,r6,8192
    12ac:	2084703a 	and	r2,r4,r2
    12b0:	2980030d 	sth	r6,12(r5)
    12b4:	28801915 	stw	r2,100(r5)
    12b8:	8009883a 	mov	r4,r16
    12bc:	d9800404 	addi	r6,sp,16
    12c0:	00013940 	call	1394 <__sfvwrite_r>
    12c4:	1000061e 	bne	r2,zero,12e0 <_puts_r+0xa0>
    12c8:	00800284 	movi	r2,10
    12cc:	dfc00917 	ldw	ra,36(sp)
    12d0:	dc400817 	ldw	r17,32(sp)
    12d4:	dc000717 	ldw	r16,28(sp)
    12d8:	dec00a04 	addi	sp,sp,40
    12dc:	f800283a 	ret
    12e0:	00bfffc4 	movi	r2,-1
    12e4:	003ff906 	br	12cc <__alt_mem_Flash_flash_data+0xf40012cc>

000012e8 <puts>:
    12e8:	00800074 	movhi	r2,1
    12ec:	1089cc04 	addi	r2,r2,10032
    12f0:	200b883a 	mov	r5,r4
    12f4:	11000017 	ldw	r4,0(r2)
    12f8:	00012401 	jmpi	1240 <_puts_r>

000012fc <strlen>:
    12fc:	208000cc 	andi	r2,r4,3
    1300:	10002026 	beq	r2,zero,1384 <strlen+0x88>
    1304:	20800007 	ldb	r2,0(r4)
    1308:	10002026 	beq	r2,zero,138c <strlen+0x90>
    130c:	2005883a 	mov	r2,r4
    1310:	00000206 	br	131c <strlen+0x20>
    1314:	10c00007 	ldb	r3,0(r2)
    1318:	18001826 	beq	r3,zero,137c <strlen+0x80>
    131c:	10800044 	addi	r2,r2,1
    1320:	10c000cc 	andi	r3,r2,3
    1324:	183ffb1e 	bne	r3,zero,1314 <__alt_mem_Flash_flash_data+0xf4001314>
    1328:	10c00017 	ldw	r3,0(r2)
    132c:	01ffbff4 	movhi	r7,65279
    1330:	39ffbfc4 	addi	r7,r7,-257
    1334:	00ca303a 	nor	r5,zero,r3
    1338:	01a02074 	movhi	r6,32897
    133c:	19c7883a 	add	r3,r3,r7
    1340:	31a02004 	addi	r6,r6,-32640
    1344:	1946703a 	and	r3,r3,r5
    1348:	1986703a 	and	r3,r3,r6
    134c:	1800091e 	bne	r3,zero,1374 <strlen+0x78>
    1350:	10800104 	addi	r2,r2,4
    1354:	10c00017 	ldw	r3,0(r2)
    1358:	19cb883a 	add	r5,r3,r7
    135c:	00c6303a 	nor	r3,zero,r3
    1360:	28c6703a 	and	r3,r5,r3
    1364:	1986703a 	and	r3,r3,r6
    1368:	183ff926 	beq	r3,zero,1350 <__alt_mem_Flash_flash_data+0xf4001350>
    136c:	00000106 	br	1374 <strlen+0x78>
    1370:	10800044 	addi	r2,r2,1
    1374:	10c00007 	ldb	r3,0(r2)
    1378:	183ffd1e 	bne	r3,zero,1370 <__alt_mem_Flash_flash_data+0xf4001370>
    137c:	1105c83a 	sub	r2,r2,r4
    1380:	f800283a 	ret
    1384:	2005883a 	mov	r2,r4
    1388:	003fe706 	br	1328 <__alt_mem_Flash_flash_data+0xf4001328>
    138c:	0005883a 	mov	r2,zero
    1390:	f800283a 	ret

00001394 <__sfvwrite_r>:
    1394:	30800217 	ldw	r2,8(r6)
    1398:	10006726 	beq	r2,zero,1538 <__sfvwrite_r+0x1a4>
    139c:	defff404 	addi	sp,sp,-48
    13a0:	dd000615 	stw	r20,24(sp)
    13a4:	2029883a 	mov	r20,r4
    13a8:	2900030b 	ldhu	r4,12(r5)
    13ac:	ddc00915 	stw	r23,36(sp)
    13b0:	dc000215 	stw	r16,8(sp)
    13b4:	dfc00b15 	stw	ra,44(sp)
    13b8:	df000a15 	stw	fp,40(sp)
    13bc:	dd800815 	stw	r22,32(sp)
    13c0:	dd400715 	stw	r21,28(sp)
    13c4:	dcc00515 	stw	r19,20(sp)
    13c8:	dc800415 	stw	r18,16(sp)
    13cc:	dc400315 	stw	r17,12(sp)
    13d0:	2080020c 	andi	r2,r4,8
    13d4:	2821883a 	mov	r16,r5
    13d8:	302f883a 	mov	r23,r6
    13dc:	10002726 	beq	r2,zero,147c <__sfvwrite_r+0xe8>
    13e0:	28800417 	ldw	r2,16(r5)
    13e4:	10002526 	beq	r2,zero,147c <__sfvwrite_r+0xe8>
    13e8:	2080008c 	andi	r2,r4,2
    13ec:	bc400017 	ldw	r17,0(r23)
    13f0:	10002a26 	beq	r2,zero,149c <__sfvwrite_r+0x108>
    13f4:	05600034 	movhi	r21,32768
    13f8:	0027883a 	mov	r19,zero
    13fc:	0025883a 	mov	r18,zero
    1400:	ad7f0004 	addi	r21,r21,-1024
    1404:	980d883a 	mov	r6,r19
    1408:	a009883a 	mov	r4,r20
    140c:	90004626 	beq	r18,zero,1528 <__sfvwrite_r+0x194>
    1410:	900f883a 	mov	r7,r18
    1414:	81400717 	ldw	r5,28(r16)
    1418:	ac80022e 	bgeu	r21,r18,1424 <__sfvwrite_r+0x90>
    141c:	01e00034 	movhi	r7,32768
    1420:	39ff0004 	addi	r7,r7,-1024
    1424:	80800917 	ldw	r2,36(r16)
    1428:	103ee83a 	callr	r2
    142c:	0080520e 	bge	zero,r2,1578 <__sfvwrite_r+0x1e4>
    1430:	b8c00217 	ldw	r3,8(r23)
    1434:	98a7883a 	add	r19,r19,r2
    1438:	90a5c83a 	sub	r18,r18,r2
    143c:	1885c83a 	sub	r2,r3,r2
    1440:	b8800215 	stw	r2,8(r23)
    1444:	103fef1e 	bne	r2,zero,1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1448:	0005883a 	mov	r2,zero
    144c:	dfc00b17 	ldw	ra,44(sp)
    1450:	df000a17 	ldw	fp,40(sp)
    1454:	ddc00917 	ldw	r23,36(sp)
    1458:	dd800817 	ldw	r22,32(sp)
    145c:	dd400717 	ldw	r21,28(sp)
    1460:	dd000617 	ldw	r20,24(sp)
    1464:	dcc00517 	ldw	r19,20(sp)
    1468:	dc800417 	ldw	r18,16(sp)
    146c:	dc400317 	ldw	r17,12(sp)
    1470:	dc000217 	ldw	r16,8(sp)
    1474:	dec00c04 	addi	sp,sp,48
    1478:	f800283a 	ret
    147c:	a009883a 	mov	r4,r20
    1480:	800b883a 	mov	r5,r16
    1484:	00029340 	call	2934 <__swsetup_r>
    1488:	1000ec1e 	bne	r2,zero,183c <__sfvwrite_r+0x4a8>
    148c:	8100030b 	ldhu	r4,12(r16)
    1490:	bc400017 	ldw	r17,0(r23)
    1494:	2080008c 	andi	r2,r4,2
    1498:	103fd61e 	bne	r2,zero,13f4 <__alt_mem_Flash_flash_data+0xf40013f4>
    149c:	2080004c 	andi	r2,r4,1
    14a0:	10003a1e 	bne	r2,zero,158c <__sfvwrite_r+0x1f8>
    14a4:	0039883a 	mov	fp,zero
    14a8:	0025883a 	mov	r18,zero
    14ac:	90001a26 	beq	r18,zero,1518 <__sfvwrite_r+0x184>
    14b0:	2080800c 	andi	r2,r4,512
    14b4:	85800217 	ldw	r22,8(r16)
    14b8:	10007626 	beq	r2,zero,1694 <__sfvwrite_r+0x300>
    14bc:	b027883a 	mov	r19,r22
    14c0:	95809436 	bltu	r18,r22,1714 <__sfvwrite_r+0x380>
    14c4:	2081200c 	andi	r2,r4,1152
    14c8:	10009f1e 	bne	r2,zero,1748 <__sfvwrite_r+0x3b4>
    14cc:	81000017 	ldw	r4,0(r16)
    14d0:	e00b883a 	mov	r5,fp
    14d4:	980d883a 	mov	r6,r19
    14d8:	000221c0 	call	221c <memmove>
    14dc:	81000217 	ldw	r4,8(r16)
    14e0:	81400017 	ldw	r5,0(r16)
    14e4:	9005883a 	mov	r2,r18
    14e8:	2587c83a 	sub	r3,r4,r22
    14ec:	2ce7883a 	add	r19,r5,r19
    14f0:	80c00215 	stw	r3,8(r16)
    14f4:	84c00015 	stw	r19,0(r16)
    14f8:	b8c00217 	ldw	r3,8(r23)
    14fc:	e0b9883a 	add	fp,fp,r2
    1500:	90a5c83a 	sub	r18,r18,r2
    1504:	1885c83a 	sub	r2,r3,r2
    1508:	b8800215 	stw	r2,8(r23)
    150c:	103fce26 	beq	r2,zero,1448 <__alt_mem_Flash_flash_data+0xf4001448>
    1510:	8100030b 	ldhu	r4,12(r16)
    1514:	903fe61e 	bne	r18,zero,14b0 <__alt_mem_Flash_flash_data+0xf40014b0>
    1518:	8f000017 	ldw	fp,0(r17)
    151c:	8c800117 	ldw	r18,4(r17)
    1520:	8c400204 	addi	r17,r17,8
    1524:	003fe106 	br	14ac <__alt_mem_Flash_flash_data+0xf40014ac>
    1528:	8cc00017 	ldw	r19,0(r17)
    152c:	8c800117 	ldw	r18,4(r17)
    1530:	8c400204 	addi	r17,r17,8
    1534:	003fb306 	br	1404 <__alt_mem_Flash_flash_data+0xf4001404>
    1538:	0005883a 	mov	r2,zero
    153c:	f800283a 	ret
    1540:	00a00034 	movhi	r2,32768
    1544:	10bfffc4 	addi	r2,r2,-1
    1548:	9009883a 	mov	r4,r18
    154c:	1480012e 	bgeu	r2,r18,1554 <__sfvwrite_r+0x1c0>
    1550:	1009883a 	mov	r4,r2
    1554:	980b883a 	mov	r5,r19
    1558:	0003df40 	call	3df4 <__divsi3>
    155c:	81400717 	ldw	r5,28(r16)
    1560:	80c00917 	ldw	r3,36(r16)
    1564:	988f383a 	mul	r7,r19,r2
    1568:	a009883a 	mov	r4,r20
    156c:	e00d883a 	mov	r6,fp
    1570:	183ee83a 	callr	r3
    1574:	00bfe016 	blt	zero,r2,14f8 <__alt_mem_Flash_flash_data+0xf40014f8>
    1578:	8080030b 	ldhu	r2,12(r16)
    157c:	10801014 	ori	r2,r2,64
    1580:	8080030d 	sth	r2,12(r16)
    1584:	00bfffc4 	movi	r2,-1
    1588:	003fb006 	br	144c <__alt_mem_Flash_flash_data+0xf400144c>
    158c:	0027883a 	mov	r19,zero
    1590:	0011883a 	mov	r8,zero
    1594:	0039883a 	mov	fp,zero
    1598:	0025883a 	mov	r18,zero
    159c:	90001f26 	beq	r18,zero,161c <__sfvwrite_r+0x288>
    15a0:	40006026 	beq	r8,zero,1724 <__sfvwrite_r+0x390>
    15a4:	982b883a 	mov	r21,r19
    15a8:	94c0012e 	bgeu	r18,r19,15b0 <__sfvwrite_r+0x21c>
    15ac:	902b883a 	mov	r21,r18
    15b0:	81000017 	ldw	r4,0(r16)
    15b4:	80800417 	ldw	r2,16(r16)
    15b8:	a82d883a 	mov	r22,r21
    15bc:	81800217 	ldw	r6,8(r16)
    15c0:	81c00517 	ldw	r7,20(r16)
    15c4:	1100022e 	bgeu	r2,r4,15d0 <__sfvwrite_r+0x23c>
    15c8:	31c7883a 	add	r3,r6,r7
    15cc:	1d401816 	blt	r3,r21,1630 <__sfvwrite_r+0x29c>
    15d0:	a9c04416 	blt	r21,r7,16e4 <__sfvwrite_r+0x350>
    15d4:	80800917 	ldw	r2,36(r16)
    15d8:	81400717 	ldw	r5,28(r16)
    15dc:	a009883a 	mov	r4,r20
    15e0:	da000115 	stw	r8,4(sp)
    15e4:	e00d883a 	mov	r6,fp
    15e8:	103ee83a 	callr	r2
    15ec:	102d883a 	mov	r22,r2
    15f0:	da000117 	ldw	r8,4(sp)
    15f4:	00bfe00e 	bge	zero,r2,1578 <__alt_mem_Flash_flash_data+0xf4001578>
    15f8:	9da7c83a 	sub	r19,r19,r22
    15fc:	98001f26 	beq	r19,zero,167c <__sfvwrite_r+0x2e8>
    1600:	b8800217 	ldw	r2,8(r23)
    1604:	e5b9883a 	add	fp,fp,r22
    1608:	95a5c83a 	sub	r18,r18,r22
    160c:	15adc83a 	sub	r22,r2,r22
    1610:	bd800215 	stw	r22,8(r23)
    1614:	b03f8c26 	beq	r22,zero,1448 <__alt_mem_Flash_flash_data+0xf4001448>
    1618:	903fe11e 	bne	r18,zero,15a0 <__alt_mem_Flash_flash_data+0xf40015a0>
    161c:	8f000017 	ldw	fp,0(r17)
    1620:	8c800117 	ldw	r18,4(r17)
    1624:	0011883a 	mov	r8,zero
    1628:	8c400204 	addi	r17,r17,8
    162c:	003fdb06 	br	159c <__alt_mem_Flash_flash_data+0xf400159c>
    1630:	180d883a 	mov	r6,r3
    1634:	e00b883a 	mov	r5,fp
    1638:	da000115 	stw	r8,4(sp)
    163c:	d8c00015 	stw	r3,0(sp)
    1640:	000221c0 	call	221c <memmove>
    1644:	d8c00017 	ldw	r3,0(sp)
    1648:	80800017 	ldw	r2,0(r16)
    164c:	a009883a 	mov	r4,r20
    1650:	800b883a 	mov	r5,r16
    1654:	10c5883a 	add	r2,r2,r3
    1658:	80800015 	stw	r2,0(r16)
    165c:	d8c00015 	stw	r3,0(sp)
    1660:	0002c900 	call	2c90 <_fflush_r>
    1664:	d8c00017 	ldw	r3,0(sp)
    1668:	da000117 	ldw	r8,4(sp)
    166c:	103fc21e 	bne	r2,zero,1578 <__alt_mem_Flash_flash_data+0xf4001578>
    1670:	182d883a 	mov	r22,r3
    1674:	9da7c83a 	sub	r19,r19,r22
    1678:	983fe11e 	bne	r19,zero,1600 <__alt_mem_Flash_flash_data+0xf4001600>
    167c:	a009883a 	mov	r4,r20
    1680:	800b883a 	mov	r5,r16
    1684:	0002c900 	call	2c90 <_fflush_r>
    1688:	103fbb1e 	bne	r2,zero,1578 <__alt_mem_Flash_flash_data+0xf4001578>
    168c:	0011883a 	mov	r8,zero
    1690:	003fdb06 	br	1600 <__alt_mem_Flash_flash_data+0xf4001600>
    1694:	81000017 	ldw	r4,0(r16)
    1698:	80800417 	ldw	r2,16(r16)
    169c:	11000236 	bltu	r2,r4,16a8 <__sfvwrite_r+0x314>
    16a0:	84c00517 	ldw	r19,20(r16)
    16a4:	94ffa62e 	bgeu	r18,r19,1540 <__alt_mem_Flash_flash_data+0xf4001540>
    16a8:	9027883a 	mov	r19,r18
    16ac:	b480012e 	bgeu	r22,r18,16b4 <__sfvwrite_r+0x320>
    16b0:	b027883a 	mov	r19,r22
    16b4:	e00b883a 	mov	r5,fp
    16b8:	980d883a 	mov	r6,r19
    16bc:	000221c0 	call	221c <memmove>
    16c0:	80800217 	ldw	r2,8(r16)
    16c4:	80c00017 	ldw	r3,0(r16)
    16c8:	14c5c83a 	sub	r2,r2,r19
    16cc:	1cc7883a 	add	r3,r3,r19
    16d0:	80800215 	stw	r2,8(r16)
    16d4:	80c00015 	stw	r3,0(r16)
    16d8:	10004326 	beq	r2,zero,17e8 <__sfvwrite_r+0x454>
    16dc:	9805883a 	mov	r2,r19
    16e0:	003f8506 	br	14f8 <__alt_mem_Flash_flash_data+0xf40014f8>
    16e4:	a80d883a 	mov	r6,r21
    16e8:	e00b883a 	mov	r5,fp
    16ec:	da000115 	stw	r8,4(sp)
    16f0:	000221c0 	call	221c <memmove>
    16f4:	80800217 	ldw	r2,8(r16)
    16f8:	80c00017 	ldw	r3,0(r16)
    16fc:	da000117 	ldw	r8,4(sp)
    1700:	1545c83a 	sub	r2,r2,r21
    1704:	1d6b883a 	add	r21,r3,r21
    1708:	80800215 	stw	r2,8(r16)
    170c:	85400015 	stw	r21,0(r16)
    1710:	003fb906 	br	15f8 <__alt_mem_Flash_flash_data+0xf40015f8>
    1714:	81000017 	ldw	r4,0(r16)
    1718:	902d883a 	mov	r22,r18
    171c:	9027883a 	mov	r19,r18
    1720:	003f6b06 	br	14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    1724:	e009883a 	mov	r4,fp
    1728:	01400284 	movi	r5,10
    172c:	900d883a 	mov	r6,r18
    1730:	0001ffc0 	call	1ffc <memchr>
    1734:	10003e26 	beq	r2,zero,1830 <__sfvwrite_r+0x49c>
    1738:	10800044 	addi	r2,r2,1
    173c:	1727c83a 	sub	r19,r2,fp
    1740:	02000044 	movi	r8,1
    1744:	003f9706 	br	15a4 <__alt_mem_Flash_flash_data+0xf40015a4>
    1748:	80800517 	ldw	r2,20(r16)
    174c:	81400417 	ldw	r5,16(r16)
    1750:	80c00017 	ldw	r3,0(r16)
    1754:	10a7883a 	add	r19,r2,r2
    1758:	9885883a 	add	r2,r19,r2
    175c:	1026d7fa 	srli	r19,r2,31
    1760:	196bc83a 	sub	r21,r3,r5
    1764:	a9800044 	addi	r6,r21,1
    1768:	9885883a 	add	r2,r19,r2
    176c:	1027d07a 	srai	r19,r2,1
    1770:	3485883a 	add	r2,r6,r18
    1774:	980d883a 	mov	r6,r19
    1778:	9880022e 	bgeu	r19,r2,1784 <__sfvwrite_r+0x3f0>
    177c:	1027883a 	mov	r19,r2
    1780:	100d883a 	mov	r6,r2
    1784:	2101000c 	andi	r4,r4,1024
    1788:	20001c26 	beq	r4,zero,17fc <__sfvwrite_r+0x468>
    178c:	a009883a 	mov	r4,r20
    1790:	300b883a 	mov	r5,r6
    1794:	00018540 	call	1854 <_malloc_r>
    1798:	102d883a 	mov	r22,r2
    179c:	10002926 	beq	r2,zero,1844 <__sfvwrite_r+0x4b0>
    17a0:	81400417 	ldw	r5,16(r16)
    17a4:	1009883a 	mov	r4,r2
    17a8:	a80d883a 	mov	r6,r21
    17ac:	00020e40 	call	20e4 <memcpy>
    17b0:	8080030b 	ldhu	r2,12(r16)
    17b4:	00fedfc4 	movi	r3,-1153
    17b8:	10c4703a 	and	r2,r2,r3
    17bc:	10802014 	ori	r2,r2,128
    17c0:	8080030d 	sth	r2,12(r16)
    17c4:	b549883a 	add	r4,r22,r21
    17c8:	9d4bc83a 	sub	r5,r19,r21
    17cc:	85800415 	stw	r22,16(r16)
    17d0:	84c00515 	stw	r19,20(r16)
    17d4:	81000015 	stw	r4,0(r16)
    17d8:	902d883a 	mov	r22,r18
    17dc:	81400215 	stw	r5,8(r16)
    17e0:	9027883a 	mov	r19,r18
    17e4:	003f3a06 	br	14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    17e8:	a009883a 	mov	r4,r20
    17ec:	800b883a 	mov	r5,r16
    17f0:	0002c900 	call	2c90 <_fflush_r>
    17f4:	103fb926 	beq	r2,zero,16dc <__alt_mem_Flash_flash_data+0xf40016dc>
    17f8:	003f5f06 	br	1578 <__alt_mem_Flash_flash_data+0xf4001578>
    17fc:	a009883a 	mov	r4,r20
    1800:	00023780 	call	2378 <_realloc_r>
    1804:	102d883a 	mov	r22,r2
    1808:	103fee1e 	bne	r2,zero,17c4 <__alt_mem_Flash_flash_data+0xf40017c4>
    180c:	81400417 	ldw	r5,16(r16)
    1810:	a009883a 	mov	r4,r20
    1814:	00031e00 	call	31e0 <_free_r>
    1818:	8080030b 	ldhu	r2,12(r16)
    181c:	00ffdfc4 	movi	r3,-129
    1820:	1884703a 	and	r2,r3,r2
    1824:	00c00304 	movi	r3,12
    1828:	a0c00015 	stw	r3,0(r20)
    182c:	003f5306 	br	157c <__alt_mem_Flash_flash_data+0xf400157c>
    1830:	94c00044 	addi	r19,r18,1
    1834:	02000044 	movi	r8,1
    1838:	003f5a06 	br	15a4 <__alt_mem_Flash_flash_data+0xf40015a4>
    183c:	00bfffc4 	movi	r2,-1
    1840:	003f0206 	br	144c <__alt_mem_Flash_flash_data+0xf400144c>
    1844:	00800304 	movi	r2,12
    1848:	a0800015 	stw	r2,0(r20)
    184c:	8080030b 	ldhu	r2,12(r16)
    1850:	003f4a06 	br	157c <__alt_mem_Flash_flash_data+0xf400157c>

00001854 <_malloc_r>:
    1854:	defff504 	addi	sp,sp,-44
    1858:	dc800315 	stw	r18,12(sp)
    185c:	dfc00a15 	stw	ra,40(sp)
    1860:	df000915 	stw	fp,36(sp)
    1864:	ddc00815 	stw	r23,32(sp)
    1868:	dd800715 	stw	r22,28(sp)
    186c:	dd400615 	stw	r21,24(sp)
    1870:	dd000515 	stw	r20,20(sp)
    1874:	dcc00415 	stw	r19,16(sp)
    1878:	dc400215 	stw	r17,8(sp)
    187c:	dc000115 	stw	r16,4(sp)
    1880:	288002c4 	addi	r2,r5,11
    1884:	00c00584 	movi	r3,22
    1888:	2025883a 	mov	r18,r4
    188c:	18802a2e 	bgeu	r3,r2,1938 <_malloc_r+0xe4>
    1890:	047ffe04 	movi	r17,-8
    1894:	1462703a 	and	r17,r2,r17
    1898:	88009e16 	blt	r17,zero,1b14 <_malloc_r+0x2c0>
    189c:	89409d36 	bltu	r17,r5,1b14 <_malloc_r+0x2c0>
    18a0:	00049900 	call	4990 <__malloc_lock>
    18a4:	00807dc4 	movi	r2,503
    18a8:	14402736 	bltu	r2,r17,1948 <_malloc_r+0xf4>
    18ac:	8806d0fa 	srli	r3,r17,3
    18b0:	04c00074 	movhi	r19,1
    18b4:	9cc35904 	addi	r19,r19,3428
    18b8:	18c5883a 	add	r2,r3,r3
    18bc:	1085883a 	add	r2,r2,r2
    18c0:	1085883a 	add	r2,r2,r2
    18c4:	9885883a 	add	r2,r19,r2
    18c8:	14000317 	ldw	r16,12(r2)
    18cc:	80814a26 	beq	r16,r2,1df8 <_malloc_r+0x5a4>
    18d0:	80c00117 	ldw	r3,4(r16)
    18d4:	81000317 	ldw	r4,12(r16)
    18d8:	00bfff04 	movi	r2,-4
    18dc:	1884703a 	and	r2,r3,r2
    18e0:	81400217 	ldw	r5,8(r16)
    18e4:	8085883a 	add	r2,r16,r2
    18e8:	10c00117 	ldw	r3,4(r2)
    18ec:	29000315 	stw	r4,12(r5)
    18f0:	21400215 	stw	r5,8(r4)
    18f4:	18c00054 	ori	r3,r3,1
    18f8:	10c00115 	stw	r3,4(r2)
    18fc:	9009883a 	mov	r4,r18
    1900:	0004ab00 	call	4ab0 <__malloc_unlock>
    1904:	80800204 	addi	r2,r16,8
    1908:	dfc00a17 	ldw	ra,40(sp)
    190c:	df000917 	ldw	fp,36(sp)
    1910:	ddc00817 	ldw	r23,32(sp)
    1914:	dd800717 	ldw	r22,28(sp)
    1918:	dd400617 	ldw	r21,24(sp)
    191c:	dd000517 	ldw	r20,20(sp)
    1920:	dcc00417 	ldw	r19,16(sp)
    1924:	dc800317 	ldw	r18,12(sp)
    1928:	dc400217 	ldw	r17,8(sp)
    192c:	dc000117 	ldw	r16,4(sp)
    1930:	dec00b04 	addi	sp,sp,44
    1934:	f800283a 	ret
    1938:	04400404 	movi	r17,16
    193c:	89407536 	bltu	r17,r5,1b14 <_malloc_r+0x2c0>
    1940:	00049900 	call	4990 <__malloc_lock>
    1944:	003fd906 	br	18ac <__alt_mem_Flash_flash_data+0xf40018ac>
    1948:	8806d27a 	srli	r3,r17,9
    194c:	18007526 	beq	r3,zero,1b24 <_malloc_r+0x2d0>
    1950:	00800104 	movi	r2,4
    1954:	10c0ef36 	bltu	r2,r3,1d14 <_malloc_r+0x4c0>
    1958:	8806d1ba 	srli	r3,r17,6
    195c:	19c00e04 	addi	r7,r3,56
    1960:	39cb883a 	add	r5,r7,r7
    1964:	04c00074 	movhi	r19,1
    1968:	294b883a 	add	r5,r5,r5
    196c:	9cc35904 	addi	r19,r19,3428
    1970:	294b883a 	add	r5,r5,r5
    1974:	994b883a 	add	r5,r19,r5
    1978:	2c000317 	ldw	r16,12(r5)
    197c:	2c000e26 	beq	r5,r16,19b8 <_malloc_r+0x164>
    1980:	80800117 	ldw	r2,4(r16)
    1984:	01bfff04 	movi	r6,-4
    1988:	010003c4 	movi	r4,15
    198c:	1184703a 	and	r2,r2,r6
    1990:	1447c83a 	sub	r3,r2,r17
    1994:	20c00716 	blt	r4,r3,19b4 <_malloc_r+0x160>
    1998:	1800650e 	bge	r3,zero,1b30 <_malloc_r+0x2dc>
    199c:	84000317 	ldw	r16,12(r16)
    19a0:	2c000526 	beq	r5,r16,19b8 <_malloc_r+0x164>
    19a4:	80800117 	ldw	r2,4(r16)
    19a8:	1184703a 	and	r2,r2,r6
    19ac:	1447c83a 	sub	r3,r2,r17
    19b0:	20fff90e 	bge	r4,r3,1998 <__alt_mem_Flash_flash_data+0xf4001998>
    19b4:	39ffffc4 	addi	r7,r7,-1
    19b8:	38c00044 	addi	r3,r7,1
    19bc:	01800074 	movhi	r6,1
    19c0:	9c000417 	ldw	r16,16(r19)
    19c4:	31835904 	addi	r6,r6,3428
    19c8:	32400204 	addi	r9,r6,8
    19cc:	82410326 	beq	r16,r9,1ddc <_malloc_r+0x588>
    19d0:	81000117 	ldw	r4,4(r16)
    19d4:	00bfff04 	movi	r2,-4
    19d8:	208e703a 	and	r7,r4,r2
    19dc:	3c45c83a 	sub	r2,r7,r17
    19e0:	010003c4 	movi	r4,15
    19e4:	2080ee16 	blt	r4,r2,1da0 <_malloc_r+0x54c>
    19e8:	32400515 	stw	r9,20(r6)
    19ec:	32400415 	stw	r9,16(r6)
    19f0:	1000510e 	bge	r2,zero,1b38 <_malloc_r+0x2e4>
    19f4:	00807fc4 	movi	r2,511
    19f8:	11c0ce36 	bltu	r2,r7,1d34 <_malloc_r+0x4e0>
    19fc:	3808d0fa 	srli	r4,r7,3
    1a00:	01c00044 	movi	r7,1
    1a04:	30800117 	ldw	r2,4(r6)
    1a08:	210b883a 	add	r5,r4,r4
    1a0c:	294b883a 	add	r5,r5,r5
    1a10:	2009d0ba 	srai	r4,r4,2
    1a14:	294b883a 	add	r5,r5,r5
    1a18:	298b883a 	add	r5,r5,r6
    1a1c:	2a000217 	ldw	r8,8(r5)
    1a20:	3908983a 	sll	r4,r7,r4
    1a24:	81400315 	stw	r5,12(r16)
    1a28:	82000215 	stw	r8,8(r16)
    1a2c:	2088b03a 	or	r4,r4,r2
    1a30:	2c000215 	stw	r16,8(r5)
    1a34:	31000115 	stw	r4,4(r6)
    1a38:	44000315 	stw	r16,12(r8)
    1a3c:	1805d0ba 	srai	r2,r3,2
    1a40:	01400044 	movi	r5,1
    1a44:	288a983a 	sll	r5,r5,r2
    1a48:	21404336 	bltu	r4,r5,1b58 <_malloc_r+0x304>
    1a4c:	2144703a 	and	r2,r4,r5
    1a50:	10000a1e 	bne	r2,zero,1a7c <_malloc_r+0x228>
    1a54:	00bfff04 	movi	r2,-4
    1a58:	294b883a 	add	r5,r5,r5
    1a5c:	1886703a 	and	r3,r3,r2
    1a60:	2144703a 	and	r2,r4,r5
    1a64:	18c00104 	addi	r3,r3,4
    1a68:	1000041e 	bne	r2,zero,1a7c <_malloc_r+0x228>
    1a6c:	294b883a 	add	r5,r5,r5
    1a70:	2144703a 	and	r2,r4,r5
    1a74:	18c00104 	addi	r3,r3,4
    1a78:	103ffc26 	beq	r2,zero,1a6c <__alt_mem_Flash_flash_data+0xf4001a6c>
    1a7c:	023fff04 	movi	r8,-4
    1a80:	01c003c4 	movi	r7,15
    1a84:	18c5883a 	add	r2,r3,r3
    1a88:	1085883a 	add	r2,r2,r2
    1a8c:	1085883a 	add	r2,r2,r2
    1a90:	9895883a 	add	r10,r19,r2
    1a94:	52c00304 	addi	r11,r10,12
    1a98:	1819883a 	mov	r12,r3
    1a9c:	5c000017 	ldw	r16,0(r11)
    1aa0:	59bffd04 	addi	r6,r11,-12
    1aa4:	8180041e 	bne	r16,r6,1ab8 <_malloc_r+0x264>
    1aa8:	0000ce06 	br	1de4 <_malloc_r+0x590>
    1aac:	2000d70e 	bge	r4,zero,1e0c <_malloc_r+0x5b8>
    1ab0:	84000317 	ldw	r16,12(r16)
    1ab4:	8180cb26 	beq	r16,r6,1de4 <_malloc_r+0x590>
    1ab8:	80800117 	ldw	r2,4(r16)
    1abc:	1204703a 	and	r2,r2,r8
    1ac0:	1449c83a 	sub	r4,r2,r17
    1ac4:	393ff90e 	bge	r7,r4,1aac <__alt_mem_Flash_flash_data+0xf4001aac>
    1ac8:	80800317 	ldw	r2,12(r16)
    1acc:	80c00217 	ldw	r3,8(r16)
    1ad0:	89400054 	ori	r5,r17,1
    1ad4:	81400115 	stw	r5,4(r16)
    1ad8:	18800315 	stw	r2,12(r3)
    1adc:	10c00215 	stw	r3,8(r2)
    1ae0:	8463883a 	add	r17,r16,r17
    1ae4:	9c400515 	stw	r17,20(r19)
    1ae8:	9c400415 	stw	r17,16(r19)
    1aec:	20800054 	ori	r2,r4,1
    1af0:	88800115 	stw	r2,4(r17)
    1af4:	8a400315 	stw	r9,12(r17)
    1af8:	8a400215 	stw	r9,8(r17)
    1afc:	8923883a 	add	r17,r17,r4
    1b00:	89000015 	stw	r4,0(r17)
    1b04:	9009883a 	mov	r4,r18
    1b08:	0004ab00 	call	4ab0 <__malloc_unlock>
    1b0c:	80800204 	addi	r2,r16,8
    1b10:	003f7d06 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1b14:	00800304 	movi	r2,12
    1b18:	90800015 	stw	r2,0(r18)
    1b1c:	0005883a 	mov	r2,zero
    1b20:	003f7906 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1b24:	01401f84 	movi	r5,126
    1b28:	01c00fc4 	movi	r7,63
    1b2c:	003f8d06 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1b30:	81000317 	ldw	r4,12(r16)
    1b34:	003f6a06 	br	18e0 <__alt_mem_Flash_flash_data+0xf40018e0>
    1b38:	81c5883a 	add	r2,r16,r7
    1b3c:	10c00117 	ldw	r3,4(r2)
    1b40:	9009883a 	mov	r4,r18
    1b44:	18c00054 	ori	r3,r3,1
    1b48:	10c00115 	stw	r3,4(r2)
    1b4c:	0004ab00 	call	4ab0 <__malloc_unlock>
    1b50:	80800204 	addi	r2,r16,8
    1b54:	003f6c06 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1b58:	9c000217 	ldw	r16,8(r19)
    1b5c:	00bfff04 	movi	r2,-4
    1b60:	85800117 	ldw	r22,4(r16)
    1b64:	b0ac703a 	and	r22,r22,r2
    1b68:	b4400336 	bltu	r22,r17,1b78 <_malloc_r+0x324>
    1b6c:	b445c83a 	sub	r2,r22,r17
    1b70:	00c003c4 	movi	r3,15
    1b74:	18805d16 	blt	r3,r2,1cec <_malloc_r+0x498>
    1b78:	05c00074 	movhi	r23,1
    1b7c:	00800074 	movhi	r2,1
    1b80:	bdc9cd04 	addi	r23,r23,10036
    1b84:	1091b604 	addi	r2,r2,18136
    1b88:	15400017 	ldw	r21,0(r2)
    1b8c:	b9000017 	ldw	r4,0(r23)
    1b90:	00ffffc4 	movi	r3,-1
    1b94:	858d883a 	add	r6,r16,r22
    1b98:	8d6b883a 	add	r21,r17,r21
    1b9c:	20c0e426 	beq	r4,r3,1f30 <_malloc_r+0x6dc>
    1ba0:	ad4403c4 	addi	r21,r21,4111
    1ba4:	00fc0004 	movi	r3,-4096
    1ba8:	a8ea703a 	and	r21,r21,r3
    1bac:	9009883a 	mov	r4,r18
    1bb0:	a80b883a 	mov	r5,r21
    1bb4:	d9800015 	stw	r6,0(sp)
    1bb8:	00028e00 	call	28e0 <_sbrk_r>
    1bbc:	00ffffc4 	movi	r3,-1
    1bc0:	1029883a 	mov	r20,r2
    1bc4:	d9800017 	ldw	r6,0(sp)
    1bc8:	10c0a426 	beq	r2,r3,1e5c <_malloc_r+0x608>
    1bcc:	1180a236 	bltu	r2,r6,1e58 <_malloc_r+0x604>
    1bd0:	07000074 	movhi	fp,1
    1bd4:	e711d804 	addi	fp,fp,18272
    1bd8:	e0c00017 	ldw	r3,0(fp)
    1bdc:	a8c7883a 	add	r3,r21,r3
    1be0:	e0c00015 	stw	r3,0(fp)
    1be4:	3500da26 	beq	r6,r20,1f50 <_malloc_r+0x6fc>
    1be8:	b9000017 	ldw	r4,0(r23)
    1bec:	00bfffc4 	movi	r2,-1
    1bf0:	2080e426 	beq	r4,r2,1f84 <_malloc_r+0x730>
    1bf4:	a185c83a 	sub	r2,r20,r6
    1bf8:	1885883a 	add	r2,r3,r2
    1bfc:	e0800015 	stw	r2,0(fp)
    1c00:	a0c001cc 	andi	r3,r20,7
    1c04:	1800b526 	beq	r3,zero,1edc <_malloc_r+0x688>
    1c08:	a0e9c83a 	sub	r20,r20,r3
    1c0c:	00840204 	movi	r2,4104
    1c10:	a5000204 	addi	r20,r20,8
    1c14:	10c7c83a 	sub	r3,r2,r3
    1c18:	a545883a 	add	r2,r20,r21
    1c1c:	1083ffcc 	andi	r2,r2,4095
    1c20:	18abc83a 	sub	r21,r3,r2
    1c24:	9009883a 	mov	r4,r18
    1c28:	a80b883a 	mov	r5,r21
    1c2c:	00028e00 	call	28e0 <_sbrk_r>
    1c30:	00ffffc4 	movi	r3,-1
    1c34:	10c0d026 	beq	r2,r3,1f78 <_malloc_r+0x724>
    1c38:	1507c83a 	sub	r3,r2,r20
    1c3c:	a8c7883a 	add	r3,r21,r3
    1c40:	18c00054 	ori	r3,r3,1
    1c44:	e0800017 	ldw	r2,0(fp)
    1c48:	9d000215 	stw	r20,8(r19)
    1c4c:	a0c00115 	stw	r3,4(r20)
    1c50:	a887883a 	add	r3,r21,r2
    1c54:	e0c00015 	stw	r3,0(fp)
    1c58:	84c00e26 	beq	r16,r19,1c94 <_malloc_r+0x440>
    1c5c:	018003c4 	movi	r6,15
    1c60:	3580a02e 	bgeu	r6,r22,1ee4 <_malloc_r+0x690>
    1c64:	81400117 	ldw	r5,4(r16)
    1c68:	013ffe04 	movi	r4,-8
    1c6c:	b0bffd04 	addi	r2,r22,-12
    1c70:	1104703a 	and	r2,r2,r4
    1c74:	2900004c 	andi	r4,r5,1
    1c78:	1108b03a 	or	r4,r2,r4
    1c7c:	81000115 	stw	r4,4(r16)
    1c80:	01400144 	movi	r5,5
    1c84:	8089883a 	add	r4,r16,r2
    1c88:	21400115 	stw	r5,4(r4)
    1c8c:	21400215 	stw	r5,8(r4)
    1c90:	3080c036 	bltu	r6,r2,1f94 <_malloc_r+0x740>
    1c94:	00800074 	movhi	r2,1
    1c98:	1091b504 	addi	r2,r2,18132
    1c9c:	11000017 	ldw	r4,0(r2)
    1ca0:	20c0012e 	bgeu	r4,r3,1ca8 <_malloc_r+0x454>
    1ca4:	10c00015 	stw	r3,0(r2)
    1ca8:	00800074 	movhi	r2,1
    1cac:	1091b404 	addi	r2,r2,18128
    1cb0:	11000017 	ldw	r4,0(r2)
    1cb4:	9c000217 	ldw	r16,8(r19)
    1cb8:	20c0012e 	bgeu	r4,r3,1cc0 <_malloc_r+0x46c>
    1cbc:	10c00015 	stw	r3,0(r2)
    1cc0:	80c00117 	ldw	r3,4(r16)
    1cc4:	00bfff04 	movi	r2,-4
    1cc8:	1886703a 	and	r3,r3,r2
    1ccc:	1c45c83a 	sub	r2,r3,r17
    1cd0:	1c400236 	bltu	r3,r17,1cdc <_malloc_r+0x488>
    1cd4:	00c003c4 	movi	r3,15
    1cd8:	18800416 	blt	r3,r2,1cec <_malloc_r+0x498>
    1cdc:	9009883a 	mov	r4,r18
    1ce0:	0004ab00 	call	4ab0 <__malloc_unlock>
    1ce4:	0005883a 	mov	r2,zero
    1ce8:	003f0706 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1cec:	88c00054 	ori	r3,r17,1
    1cf0:	80c00115 	stw	r3,4(r16)
    1cf4:	8463883a 	add	r17,r16,r17
    1cf8:	10800054 	ori	r2,r2,1
    1cfc:	9c400215 	stw	r17,8(r19)
    1d00:	88800115 	stw	r2,4(r17)
    1d04:	9009883a 	mov	r4,r18
    1d08:	0004ab00 	call	4ab0 <__malloc_unlock>
    1d0c:	80800204 	addi	r2,r16,8
    1d10:	003efd06 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1d14:	00800504 	movi	r2,20
    1d18:	10c0482e 	bgeu	r2,r3,1e3c <_malloc_r+0x5e8>
    1d1c:	00801504 	movi	r2,84
    1d20:	10c06836 	bltu	r2,r3,1ec4 <_malloc_r+0x670>
    1d24:	8806d33a 	srli	r3,r17,12
    1d28:	19c01b84 	addi	r7,r3,110
    1d2c:	39cb883a 	add	r5,r7,r7
    1d30:	003f0c06 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1d34:	3804d27a 	srli	r2,r7,9
    1d38:	01000104 	movi	r4,4
    1d3c:	2080422e 	bgeu	r4,r2,1e48 <_malloc_r+0x5f4>
    1d40:	01000504 	movi	r4,20
    1d44:	20807c36 	bltu	r4,r2,1f38 <_malloc_r+0x6e4>
    1d48:	110016c4 	addi	r4,r2,91
    1d4c:	210b883a 	add	r5,r4,r4
    1d50:	294b883a 	add	r5,r5,r5
    1d54:	294b883a 	add	r5,r5,r5
    1d58:	994b883a 	add	r5,r19,r5
    1d5c:	28800217 	ldw	r2,8(r5)
    1d60:	02000074 	movhi	r8,1
    1d64:	42035904 	addi	r8,r8,3428
    1d68:	11406326 	beq	r2,r5,1ef8 <_malloc_r+0x6a4>
    1d6c:	01bfff04 	movi	r6,-4
    1d70:	11000117 	ldw	r4,4(r2)
    1d74:	2188703a 	and	r4,r4,r6
    1d78:	3900022e 	bgeu	r7,r4,1d84 <_malloc_r+0x530>
    1d7c:	10800217 	ldw	r2,8(r2)
    1d80:	28bffb1e 	bne	r5,r2,1d70 <__alt_mem_Flash_flash_data+0xf4001d70>
    1d84:	11800317 	ldw	r6,12(r2)
    1d88:	99000117 	ldw	r4,4(r19)
    1d8c:	81800315 	stw	r6,12(r16)
    1d90:	80800215 	stw	r2,8(r16)
    1d94:	34000215 	stw	r16,8(r6)
    1d98:	14000315 	stw	r16,12(r2)
    1d9c:	003f2706 	br	1a3c <__alt_mem_Flash_flash_data+0xf4001a3c>
    1da0:	88c00054 	ori	r3,r17,1
    1da4:	80c00115 	stw	r3,4(r16)
    1da8:	8463883a 	add	r17,r16,r17
    1dac:	34400515 	stw	r17,20(r6)
    1db0:	34400415 	stw	r17,16(r6)
    1db4:	10c00054 	ori	r3,r2,1
    1db8:	8a400315 	stw	r9,12(r17)
    1dbc:	8a400215 	stw	r9,8(r17)
    1dc0:	88c00115 	stw	r3,4(r17)
    1dc4:	88a3883a 	add	r17,r17,r2
    1dc8:	88800015 	stw	r2,0(r17)
    1dcc:	9009883a 	mov	r4,r18
    1dd0:	0004ab00 	call	4ab0 <__malloc_unlock>
    1dd4:	80800204 	addi	r2,r16,8
    1dd8:	003ecb06 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1ddc:	31000117 	ldw	r4,4(r6)
    1de0:	003f1606 	br	1a3c <__alt_mem_Flash_flash_data+0xf4001a3c>
    1de4:	63000044 	addi	r12,r12,1
    1de8:	608000cc 	andi	r2,r12,3
    1dec:	5ac00204 	addi	r11,r11,8
    1df0:	103f2a1e 	bne	r2,zero,1a9c <__alt_mem_Flash_flash_data+0xf4001a9c>
    1df4:	00002106 	br	1e7c <_malloc_r+0x628>
    1df8:	80800204 	addi	r2,r16,8
    1dfc:	84000517 	ldw	r16,20(r16)
    1e00:	143eb31e 	bne	r2,r16,18d0 <__alt_mem_Flash_flash_data+0xf40018d0>
    1e04:	18c00084 	addi	r3,r3,2
    1e08:	003eec06 	br	19bc <__alt_mem_Flash_flash_data+0xf40019bc>
    1e0c:	8085883a 	add	r2,r16,r2
    1e10:	10c00117 	ldw	r3,4(r2)
    1e14:	81000317 	ldw	r4,12(r16)
    1e18:	81400217 	ldw	r5,8(r16)
    1e1c:	18c00054 	ori	r3,r3,1
    1e20:	10c00115 	stw	r3,4(r2)
    1e24:	29000315 	stw	r4,12(r5)
    1e28:	21400215 	stw	r5,8(r4)
    1e2c:	9009883a 	mov	r4,r18
    1e30:	0004ab00 	call	4ab0 <__malloc_unlock>
    1e34:	80800204 	addi	r2,r16,8
    1e38:	003eb306 	br	1908 <__alt_mem_Flash_flash_data+0xf4001908>
    1e3c:	19c016c4 	addi	r7,r3,91
    1e40:	39cb883a 	add	r5,r7,r7
    1e44:	003ec706 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1e48:	3804d1ba 	srli	r2,r7,6
    1e4c:	11000e04 	addi	r4,r2,56
    1e50:	210b883a 	add	r5,r4,r4
    1e54:	003fbe06 	br	1d50 <__alt_mem_Flash_flash_data+0xf4001d50>
    1e58:	84ff5d26 	beq	r16,r19,1bd0 <__alt_mem_Flash_flash_data+0xf4001bd0>
    1e5c:	9c000217 	ldw	r16,8(r19)
    1e60:	00bfff04 	movi	r2,-4
    1e64:	80c00117 	ldw	r3,4(r16)
    1e68:	1886703a 	and	r3,r3,r2
    1e6c:	003f9706 	br	1ccc <__alt_mem_Flash_flash_data+0xf4001ccc>
    1e70:	52800017 	ldw	r10,0(r10)
    1e74:	18ffffc4 	addi	r3,r3,-1
    1e78:	50805c1e 	bne	r10,r2,1fec <_malloc_r+0x798>
    1e7c:	190000cc 	andi	r4,r3,3
    1e80:	50bffe04 	addi	r2,r10,-8
    1e84:	203ffa1e 	bne	r4,zero,1e70 <__alt_mem_Flash_flash_data+0xf4001e70>
    1e88:	98800117 	ldw	r2,4(r19)
    1e8c:	0146303a 	nor	r3,zero,r5
    1e90:	1884703a 	and	r2,r3,r2
    1e94:	98800115 	stw	r2,4(r19)
    1e98:	294b883a 	add	r5,r5,r5
    1e9c:	117f2e36 	bltu	r2,r5,1b58 <__alt_mem_Flash_flash_data+0xf4001b58>
    1ea0:	283f2d26 	beq	r5,zero,1b58 <__alt_mem_Flash_flash_data+0xf4001b58>
    1ea4:	1146703a 	and	r3,r2,r5
    1ea8:	1800521e 	bne	r3,zero,1ff4 <_malloc_r+0x7a0>
    1eac:	6007883a 	mov	r3,r12
    1eb0:	294b883a 	add	r5,r5,r5
    1eb4:	1148703a 	and	r4,r2,r5
    1eb8:	18c00104 	addi	r3,r3,4
    1ebc:	203ffc26 	beq	r4,zero,1eb0 <__alt_mem_Flash_flash_data+0xf4001eb0>
    1ec0:	003ef006 	br	1a84 <__alt_mem_Flash_flash_data+0xf4001a84>
    1ec4:	00805504 	movi	r2,340
    1ec8:	10c01336 	bltu	r2,r3,1f18 <_malloc_r+0x6c4>
    1ecc:	8806d3fa 	srli	r3,r17,15
    1ed0:	19c01dc4 	addi	r7,r3,119
    1ed4:	39cb883a 	add	r5,r7,r7
    1ed8:	003ea206 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1edc:	00c40004 	movi	r3,4096
    1ee0:	003f4d06 	br	1c18 <__alt_mem_Flash_flash_data+0xf4001c18>
    1ee4:	00800044 	movi	r2,1
    1ee8:	a0800115 	stw	r2,4(r20)
    1eec:	a021883a 	mov	r16,r20
    1ef0:	0007883a 	mov	r3,zero
    1ef4:	003f7506 	br	1ccc <__alt_mem_Flash_flash_data+0xf4001ccc>
    1ef8:	200bd0ba 	srai	r5,r4,2
    1efc:	01800044 	movi	r6,1
    1f00:	41000117 	ldw	r4,4(r8)
    1f04:	314a983a 	sll	r5,r6,r5
    1f08:	100d883a 	mov	r6,r2
    1f0c:	2908b03a 	or	r4,r5,r4
    1f10:	41000115 	stw	r4,4(r8)
    1f14:	003f9d06 	br	1d8c <__alt_mem_Flash_flash_data+0xf4001d8c>
    1f18:	00815504 	movi	r2,1364
    1f1c:	10c01336 	bltu	r2,r3,1f6c <_malloc_r+0x718>
    1f20:	8806d4ba 	srli	r3,r17,18
    1f24:	19c01f04 	addi	r7,r3,124
    1f28:	39cb883a 	add	r5,r7,r7
    1f2c:	003e8d06 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1f30:	ad400404 	addi	r21,r21,16
    1f34:	003f1d06 	br	1bac <__alt_mem_Flash_flash_data+0xf4001bac>
    1f38:	01001504 	movi	r4,84
    1f3c:	20801c36 	bltu	r4,r2,1fb0 <_malloc_r+0x75c>
    1f40:	3804d33a 	srli	r2,r7,12
    1f44:	11001b84 	addi	r4,r2,110
    1f48:	210b883a 	add	r5,r4,r4
    1f4c:	003f8006 	br	1d50 <__alt_mem_Flash_flash_data+0xf4001d50>
    1f50:	3083ffcc 	andi	r2,r6,4095
    1f54:	103f241e 	bne	r2,zero,1be8 <__alt_mem_Flash_flash_data+0xf4001be8>
    1f58:	99000217 	ldw	r4,8(r19)
    1f5c:	ad85883a 	add	r2,r21,r22
    1f60:	10800054 	ori	r2,r2,1
    1f64:	20800115 	stw	r2,4(r4)
    1f68:	003f4a06 	br	1c94 <__alt_mem_Flash_flash_data+0xf4001c94>
    1f6c:	01403f04 	movi	r5,252
    1f70:	01c01f84 	movi	r7,126
    1f74:	003e7b06 	br	1964 <__alt_mem_Flash_flash_data+0xf4001964>
    1f78:	00c00044 	movi	r3,1
    1f7c:	002b883a 	mov	r21,zero
    1f80:	003f3006 	br	1c44 <__alt_mem_Flash_flash_data+0xf4001c44>
    1f84:	00800074 	movhi	r2,1
    1f88:	1089cd04 	addi	r2,r2,10036
    1f8c:	15000015 	stw	r20,0(r2)
    1f90:	003f1b06 	br	1c00 <__alt_mem_Flash_flash_data+0xf4001c00>
    1f94:	9009883a 	mov	r4,r18
    1f98:	81400204 	addi	r5,r16,8
    1f9c:	00031e00 	call	31e0 <_free_r>
    1fa0:	00800074 	movhi	r2,1
    1fa4:	1091d804 	addi	r2,r2,18272
    1fa8:	10c00017 	ldw	r3,0(r2)
    1fac:	003f3906 	br	1c94 <__alt_mem_Flash_flash_data+0xf4001c94>
    1fb0:	01005504 	movi	r4,340
    1fb4:	20800436 	bltu	r4,r2,1fc8 <_malloc_r+0x774>
    1fb8:	3804d3fa 	srli	r2,r7,15
    1fbc:	11001dc4 	addi	r4,r2,119
    1fc0:	210b883a 	add	r5,r4,r4
    1fc4:	003f6206 	br	1d50 <__alt_mem_Flash_flash_data+0xf4001d50>
    1fc8:	01015504 	movi	r4,1364
    1fcc:	20800436 	bltu	r4,r2,1fe0 <_malloc_r+0x78c>
    1fd0:	3804d4ba 	srli	r2,r7,18
    1fd4:	11001f04 	addi	r4,r2,124
    1fd8:	210b883a 	add	r5,r4,r4
    1fdc:	003f5c06 	br	1d50 <__alt_mem_Flash_flash_data+0xf4001d50>
    1fe0:	01403f04 	movi	r5,252
    1fe4:	01001f84 	movi	r4,126
    1fe8:	003f5906 	br	1d50 <__alt_mem_Flash_flash_data+0xf4001d50>
    1fec:	98800117 	ldw	r2,4(r19)
    1ff0:	003fa906 	br	1e98 <__alt_mem_Flash_flash_data+0xf4001e98>
    1ff4:	6007883a 	mov	r3,r12
    1ff8:	003ea206 	br	1a84 <__alt_mem_Flash_flash_data+0xf4001a84>

00001ffc <memchr>:
    1ffc:	208000cc 	andi	r2,r4,3
    2000:	280f883a 	mov	r7,r5
    2004:	10003526 	beq	r2,zero,20dc <memchr+0xe0>
    2008:	30bfffc4 	addi	r2,r6,-1
    200c:	30001b26 	beq	r6,zero,207c <memchr+0x80>
    2010:	21800003 	ldbu	r6,0(r4)
    2014:	28c03fcc 	andi	r3,r5,255
    2018:	30c01a26 	beq	r6,r3,2084 <memchr+0x88>
    201c:	180d883a 	mov	r6,r3
    2020:	00000406 	br	2034 <memchr+0x38>
    2024:	10001526 	beq	r2,zero,207c <memchr+0x80>
    2028:	20c00003 	ldbu	r3,0(r4)
    202c:	10bfffc4 	addi	r2,r2,-1
    2030:	19801426 	beq	r3,r6,2084 <memchr+0x88>
    2034:	21000044 	addi	r4,r4,1
    2038:	20c000cc 	andi	r3,r4,3
    203c:	183ff91e 	bne	r3,zero,2024 <__alt_mem_Flash_flash_data+0xf4002024>
    2040:	024000c4 	movi	r9,3
    2044:	48801136 	bltu	r9,r2,208c <memchr+0x90>
    2048:	10000c26 	beq	r2,zero,207c <memchr+0x80>
    204c:	20c00003 	ldbu	r3,0(r4)
    2050:	29403fcc 	andi	r5,r5,255
    2054:	19400b26 	beq	r3,r5,2084 <memchr+0x88>
    2058:	20c00044 	addi	r3,r4,1
    205c:	2085883a 	add	r2,r4,r2
    2060:	39803fcc 	andi	r6,r7,255
    2064:	00000306 	br	2074 <memchr+0x78>
    2068:	18c00044 	addi	r3,r3,1
    206c:	197fffc3 	ldbu	r5,-1(r3)
    2070:	29800426 	beq	r5,r6,2084 <memchr+0x88>
    2074:	1809883a 	mov	r4,r3
    2078:	18bffb1e 	bne	r3,r2,2068 <__alt_mem_Flash_flash_data+0xf4002068>
    207c:	0005883a 	mov	r2,zero
    2080:	f800283a 	ret
    2084:	2005883a 	mov	r2,r4
    2088:	f800283a 	ret
    208c:	28c03fcc 	andi	r3,r5,255
    2090:	1810923a 	slli	r8,r3,8
    2094:	02ffbff4 	movhi	r11,65279
    2098:	02a02074 	movhi	r10,32897
    209c:	40c6b03a 	or	r3,r8,r3
    20a0:	1810943a 	slli	r8,r3,16
    20a4:	5affbfc4 	addi	r11,r11,-257
    20a8:	52a02004 	addi	r10,r10,-32640
    20ac:	40d0b03a 	or	r8,r8,r3
    20b0:	20c00017 	ldw	r3,0(r4)
    20b4:	40c6f03a 	xor	r3,r8,r3
    20b8:	1acd883a 	add	r6,r3,r11
    20bc:	00c6303a 	nor	r3,zero,r3
    20c0:	30c6703a 	and	r3,r6,r3
    20c4:	1a86703a 	and	r3,r3,r10
    20c8:	183fdf1e 	bne	r3,zero,2048 <__alt_mem_Flash_flash_data+0xf4002048>
    20cc:	10bfff04 	addi	r2,r2,-4
    20d0:	21000104 	addi	r4,r4,4
    20d4:	48bff636 	bltu	r9,r2,20b0 <__alt_mem_Flash_flash_data+0xf40020b0>
    20d8:	003fdb06 	br	2048 <__alt_mem_Flash_flash_data+0xf4002048>
    20dc:	3005883a 	mov	r2,r6
    20e0:	003fd706 	br	2040 <__alt_mem_Flash_flash_data+0xf4002040>

000020e4 <memcpy>:
    20e4:	deffff04 	addi	sp,sp,-4
    20e8:	dc000015 	stw	r16,0(sp)
    20ec:	00c003c4 	movi	r3,15
    20f0:	2005883a 	mov	r2,r4
    20f4:	1980432e 	bgeu	r3,r6,2204 <memcpy+0x120>
    20f8:	2146b03a 	or	r3,r4,r5
    20fc:	18c000cc 	andi	r3,r3,3
    2100:	1800421e 	bne	r3,zero,220c <memcpy+0x128>
    2104:	343ffc04 	addi	r16,r6,-16
    2108:	8020d13a 	srli	r16,r16,4
    210c:	28c00104 	addi	r3,r5,4
    2110:	23400104 	addi	r13,r4,4
    2114:	801e913a 	slli	r15,r16,4
    2118:	2b000204 	addi	r12,r5,8
    211c:	22c00204 	addi	r11,r4,8
    2120:	7bc00504 	addi	r15,r15,20
    2124:	2a800304 	addi	r10,r5,12
    2128:	22400304 	addi	r9,r4,12
    212c:	2bdf883a 	add	r15,r5,r15
    2130:	2811883a 	mov	r8,r5
    2134:	200f883a 	mov	r7,r4
    2138:	41000017 	ldw	r4,0(r8)
    213c:	39c00404 	addi	r7,r7,16
    2140:	18c00404 	addi	r3,r3,16
    2144:	393ffc15 	stw	r4,-16(r7)
    2148:	1bbffc17 	ldw	r14,-16(r3)
    214c:	6b400404 	addi	r13,r13,16
    2150:	5ac00404 	addi	r11,r11,16
    2154:	6bbffc15 	stw	r14,-16(r13)
    2158:	63800017 	ldw	r14,0(r12)
    215c:	4a400404 	addi	r9,r9,16
    2160:	42000404 	addi	r8,r8,16
    2164:	5bbffc15 	stw	r14,-16(r11)
    2168:	53800017 	ldw	r14,0(r10)
    216c:	63000404 	addi	r12,r12,16
    2170:	52800404 	addi	r10,r10,16
    2174:	4bbffc15 	stw	r14,-16(r9)
    2178:	1bffef1e 	bne	r3,r15,2138 <__alt_mem_Flash_flash_data+0xf4002138>
    217c:	81c00044 	addi	r7,r16,1
    2180:	380e913a 	slli	r7,r7,4
    2184:	310003cc 	andi	r4,r6,15
    2188:	02c000c4 	movi	r11,3
    218c:	11c7883a 	add	r3,r2,r7
    2190:	29cb883a 	add	r5,r5,r7
    2194:	59001f2e 	bgeu	r11,r4,2214 <memcpy+0x130>
    2198:	1813883a 	mov	r9,r3
    219c:	2811883a 	mov	r8,r5
    21a0:	200f883a 	mov	r7,r4
    21a4:	42800017 	ldw	r10,0(r8)
    21a8:	4a400104 	addi	r9,r9,4
    21ac:	39ffff04 	addi	r7,r7,-4
    21b0:	4abfff15 	stw	r10,-4(r9)
    21b4:	42000104 	addi	r8,r8,4
    21b8:	59fffa36 	bltu	r11,r7,21a4 <__alt_mem_Flash_flash_data+0xf40021a4>
    21bc:	213fff04 	addi	r4,r4,-4
    21c0:	2008d0ba 	srli	r4,r4,2
    21c4:	318000cc 	andi	r6,r6,3
    21c8:	21000044 	addi	r4,r4,1
    21cc:	2109883a 	add	r4,r4,r4
    21d0:	2109883a 	add	r4,r4,r4
    21d4:	1907883a 	add	r3,r3,r4
    21d8:	290b883a 	add	r5,r5,r4
    21dc:	30000626 	beq	r6,zero,21f8 <memcpy+0x114>
    21e0:	198d883a 	add	r6,r3,r6
    21e4:	29c00003 	ldbu	r7,0(r5)
    21e8:	18c00044 	addi	r3,r3,1
    21ec:	29400044 	addi	r5,r5,1
    21f0:	19ffffc5 	stb	r7,-1(r3)
    21f4:	19bffb1e 	bne	r3,r6,21e4 <__alt_mem_Flash_flash_data+0xf40021e4>
    21f8:	dc000017 	ldw	r16,0(sp)
    21fc:	dec00104 	addi	sp,sp,4
    2200:	f800283a 	ret
    2204:	2007883a 	mov	r3,r4
    2208:	003ff406 	br	21dc <__alt_mem_Flash_flash_data+0xf40021dc>
    220c:	2007883a 	mov	r3,r4
    2210:	003ff306 	br	21e0 <__alt_mem_Flash_flash_data+0xf40021e0>
    2214:	200d883a 	mov	r6,r4
    2218:	003ff006 	br	21dc <__alt_mem_Flash_flash_data+0xf40021dc>

0000221c <memmove>:
    221c:	2005883a 	mov	r2,r4
    2220:	29000b2e 	bgeu	r5,r4,2250 <memmove+0x34>
    2224:	298f883a 	add	r7,r5,r6
    2228:	21c0092e 	bgeu	r4,r7,2250 <memmove+0x34>
    222c:	2187883a 	add	r3,r4,r6
    2230:	198bc83a 	sub	r5,r3,r6
    2234:	30004b26 	beq	r6,zero,2364 <memmove+0x148>
    2238:	39ffffc4 	addi	r7,r7,-1
    223c:	39000003 	ldbu	r4,0(r7)
    2240:	18ffffc4 	addi	r3,r3,-1
    2244:	19000005 	stb	r4,0(r3)
    2248:	197ffb1e 	bne	r3,r5,2238 <__alt_mem_Flash_flash_data+0xf4002238>
    224c:	f800283a 	ret
    2250:	00c003c4 	movi	r3,15
    2254:	1980412e 	bgeu	r3,r6,235c <memmove+0x140>
    2258:	1146b03a 	or	r3,r2,r5
    225c:	18c000cc 	andi	r3,r3,3
    2260:	1800411e 	bne	r3,zero,2368 <memmove+0x14c>
    2264:	33fffc04 	addi	r15,r6,-16
    2268:	781ed13a 	srli	r15,r15,4
    226c:	28c00104 	addi	r3,r5,4
    2270:	13400104 	addi	r13,r2,4
    2274:	781c913a 	slli	r14,r15,4
    2278:	2b000204 	addi	r12,r5,8
    227c:	12c00204 	addi	r11,r2,8
    2280:	73800504 	addi	r14,r14,20
    2284:	2a800304 	addi	r10,r5,12
    2288:	12400304 	addi	r9,r2,12
    228c:	2b9d883a 	add	r14,r5,r14
    2290:	2811883a 	mov	r8,r5
    2294:	100f883a 	mov	r7,r2
    2298:	41000017 	ldw	r4,0(r8)
    229c:	39c00404 	addi	r7,r7,16
    22a0:	18c00404 	addi	r3,r3,16
    22a4:	393ffc15 	stw	r4,-16(r7)
    22a8:	193ffc17 	ldw	r4,-16(r3)
    22ac:	6b400404 	addi	r13,r13,16
    22b0:	5ac00404 	addi	r11,r11,16
    22b4:	693ffc15 	stw	r4,-16(r13)
    22b8:	61000017 	ldw	r4,0(r12)
    22bc:	4a400404 	addi	r9,r9,16
    22c0:	42000404 	addi	r8,r8,16
    22c4:	593ffc15 	stw	r4,-16(r11)
    22c8:	51000017 	ldw	r4,0(r10)
    22cc:	63000404 	addi	r12,r12,16
    22d0:	52800404 	addi	r10,r10,16
    22d4:	493ffc15 	stw	r4,-16(r9)
    22d8:	1bbfef1e 	bne	r3,r14,2298 <__alt_mem_Flash_flash_data+0xf4002298>
    22dc:	79000044 	addi	r4,r15,1
    22e0:	2008913a 	slli	r4,r4,4
    22e4:	328003cc 	andi	r10,r6,15
    22e8:	02c000c4 	movi	r11,3
    22ec:	1107883a 	add	r3,r2,r4
    22f0:	290b883a 	add	r5,r5,r4
    22f4:	5a801e2e 	bgeu	r11,r10,2370 <memmove+0x154>
    22f8:	1813883a 	mov	r9,r3
    22fc:	2811883a 	mov	r8,r5
    2300:	500f883a 	mov	r7,r10
    2304:	41000017 	ldw	r4,0(r8)
    2308:	4a400104 	addi	r9,r9,4
    230c:	39ffff04 	addi	r7,r7,-4
    2310:	493fff15 	stw	r4,-4(r9)
    2314:	42000104 	addi	r8,r8,4
    2318:	59fffa36 	bltu	r11,r7,2304 <__alt_mem_Flash_flash_data+0xf4002304>
    231c:	513fff04 	addi	r4,r10,-4
    2320:	2008d0ba 	srli	r4,r4,2
    2324:	318000cc 	andi	r6,r6,3
    2328:	21000044 	addi	r4,r4,1
    232c:	2109883a 	add	r4,r4,r4
    2330:	2109883a 	add	r4,r4,r4
    2334:	1907883a 	add	r3,r3,r4
    2338:	290b883a 	add	r5,r5,r4
    233c:	30000926 	beq	r6,zero,2364 <memmove+0x148>
    2340:	198d883a 	add	r6,r3,r6
    2344:	29c00003 	ldbu	r7,0(r5)
    2348:	18c00044 	addi	r3,r3,1
    234c:	29400044 	addi	r5,r5,1
    2350:	19ffffc5 	stb	r7,-1(r3)
    2354:	19bffb1e 	bne	r3,r6,2344 <__alt_mem_Flash_flash_data+0xf4002344>
    2358:	f800283a 	ret
    235c:	1007883a 	mov	r3,r2
    2360:	003ff606 	br	233c <__alt_mem_Flash_flash_data+0xf400233c>
    2364:	f800283a 	ret
    2368:	1007883a 	mov	r3,r2
    236c:	003ff406 	br	2340 <__alt_mem_Flash_flash_data+0xf4002340>
    2370:	500d883a 	mov	r6,r10
    2374:	003ff106 	br	233c <__alt_mem_Flash_flash_data+0xf400233c>

00002378 <_realloc_r>:
    2378:	defff604 	addi	sp,sp,-40
    237c:	dd000415 	stw	r20,16(sp)
    2380:	dc400115 	stw	r17,4(sp)
    2384:	dfc00915 	stw	ra,36(sp)
    2388:	df000815 	stw	fp,32(sp)
    238c:	ddc00715 	stw	r23,28(sp)
    2390:	dd800615 	stw	r22,24(sp)
    2394:	dd400515 	stw	r21,20(sp)
    2398:	dcc00315 	stw	r19,12(sp)
    239c:	dc800215 	stw	r18,8(sp)
    23a0:	dc000015 	stw	r16,0(sp)
    23a4:	2829883a 	mov	r20,r5
    23a8:	3023883a 	mov	r17,r6
    23ac:	2800ad26 	beq	r5,zero,2664 <_realloc_r+0x2ec>
    23b0:	2025883a 	mov	r18,r4
    23b4:	00049900 	call	4990 <__malloc_lock>
    23b8:	a0ffff17 	ldw	r3,-4(r20)
    23bc:	043fff04 	movi	r16,-4
    23c0:	890002c4 	addi	r4,r17,11
    23c4:	01c00584 	movi	r7,22
    23c8:	a57ffe04 	addi	r21,r20,-8
    23cc:	1c20703a 	and	r16,r3,r16
    23d0:	39001d2e 	bgeu	r7,r4,2448 <_realloc_r+0xd0>
    23d4:	05bffe04 	movi	r22,-8
    23d8:	25ac703a 	and	r22,r4,r22
    23dc:	b00f883a 	mov	r7,r22
    23e0:	b0006516 	blt	r22,zero,2578 <_realloc_r+0x200>
    23e4:	b4406436 	bltu	r22,r17,2578 <_realloc_r+0x200>
    23e8:	81c01a0e 	bge	r16,r7,2454 <_realloc_r+0xdc>
    23ec:	07000074 	movhi	fp,1
    23f0:	e7035904 	addi	fp,fp,3428
    23f4:	e1400217 	ldw	r5,8(fp)
    23f8:	ac11883a 	add	r8,r21,r16
    23fc:	2a006226 	beq	r5,r8,2588 <_realloc_r+0x210>
    2400:	41800117 	ldw	r6,4(r8)
    2404:	027fff84 	movi	r9,-2
    2408:	3252703a 	and	r9,r6,r9
    240c:	4253883a 	add	r9,r8,r9
    2410:	49000117 	ldw	r4,4(r9)
    2414:	2100004c 	andi	r4,r4,1
    2418:	2000281e 	bne	r4,zero,24bc <_realloc_r+0x144>
    241c:	00bfff04 	movi	r2,-4
    2420:	3084703a 	and	r2,r6,r2
    2424:	1409883a 	add	r4,r2,r16
    2428:	21c05e16 	blt	r4,r7,25a4 <_realloc_r+0x22c>
    242c:	40800317 	ldw	r2,12(r8)
    2430:	41400217 	ldw	r5,8(r8)
    2434:	a023883a 	mov	r17,r20
    2438:	2021883a 	mov	r16,r4
    243c:	28800315 	stw	r2,12(r5)
    2440:	11400215 	stw	r5,8(r2)
    2444:	00000406 	br	2458 <_realloc_r+0xe0>
    2448:	01c00404 	movi	r7,16
    244c:	382d883a 	mov	r22,r7
    2450:	003fe406 	br	23e4 <__alt_mem_Flash_flash_data+0xf40023e4>
    2454:	a023883a 	mov	r17,r20
    2458:	858fc83a 	sub	r7,r16,r22
    245c:	008003c4 	movi	r2,15
    2460:	18c0004c 	andi	r3,r3,1
    2464:	11c07236 	bltu	r2,r7,2630 <_realloc_r+0x2b8>
    2468:	1c06b03a 	or	r3,r3,r16
    246c:	a8c00115 	stw	r3,4(r21)
    2470:	ac21883a 	add	r16,r21,r16
    2474:	80800117 	ldw	r2,4(r16)
    2478:	10800054 	ori	r2,r2,1
    247c:	80800115 	stw	r2,4(r16)
    2480:	9009883a 	mov	r4,r18
    2484:	0004ab00 	call	4ab0 <__malloc_unlock>
    2488:	8805883a 	mov	r2,r17
    248c:	dfc00917 	ldw	ra,36(sp)
    2490:	df000817 	ldw	fp,32(sp)
    2494:	ddc00717 	ldw	r23,28(sp)
    2498:	dd800617 	ldw	r22,24(sp)
    249c:	dd400517 	ldw	r21,20(sp)
    24a0:	dd000417 	ldw	r20,16(sp)
    24a4:	dcc00317 	ldw	r19,12(sp)
    24a8:	dc800217 	ldw	r18,8(sp)
    24ac:	dc400117 	ldw	r17,4(sp)
    24b0:	dc000017 	ldw	r16,0(sp)
    24b4:	dec00a04 	addi	sp,sp,40
    24b8:	f800283a 	ret
    24bc:	18c0004c 	andi	r3,r3,1
    24c0:	1800081e 	bne	r3,zero,24e4 <_realloc_r+0x16c>
    24c4:	a4fffe17 	ldw	r19,-8(r20)
    24c8:	00bfff04 	movi	r2,-4
    24cc:	ace7c83a 	sub	r19,r21,r19
    24d0:	98c00117 	ldw	r3,4(r19)
    24d4:	1886703a 	and	r3,r3,r2
    24d8:	98000226 	beq	r19,zero,24e4 <_realloc_r+0x16c>
    24dc:	1c2f883a 	add	r23,r3,r16
    24e0:	b9c06d0e 	bge	r23,r7,2698 <_realloc_r+0x320>
    24e4:	880b883a 	mov	r5,r17
    24e8:	9009883a 	mov	r4,r18
    24ec:	00018540 	call	1854 <_malloc_r>
    24f0:	1023883a 	mov	r17,r2
    24f4:	1000ef26 	beq	r2,zero,28b4 <_realloc_r+0x53c>
    24f8:	a0ffff17 	ldw	r3,-4(r20)
    24fc:	113ffe04 	addi	r4,r2,-8
    2500:	00bfff84 	movi	r2,-2
    2504:	1884703a 	and	r2,r3,r2
    2508:	a885883a 	add	r2,r21,r2
    250c:	2080bf26 	beq	r4,r2,280c <_realloc_r+0x494>
    2510:	81bfff04 	addi	r6,r16,-4
    2514:	00800904 	movi	r2,36
    2518:	11808936 	bltu	r2,r6,2740 <_realloc_r+0x3c8>
    251c:	00c004c4 	movi	r3,19
    2520:	19806c2e 	bgeu	r3,r6,26d4 <_realloc_r+0x35c>
    2524:	a0c00017 	ldw	r3,0(r20)
    2528:	88c00015 	stw	r3,0(r17)
    252c:	a0c00117 	ldw	r3,4(r20)
    2530:	88c00115 	stw	r3,4(r17)
    2534:	00c006c4 	movi	r3,27
    2538:	1980ac36 	bltu	r3,r6,27ec <_realloc_r+0x474>
    253c:	88800204 	addi	r2,r17,8
    2540:	a0c00204 	addi	r3,r20,8
    2544:	19000017 	ldw	r4,0(r3)
    2548:	11000015 	stw	r4,0(r2)
    254c:	19000117 	ldw	r4,4(r3)
    2550:	11000115 	stw	r4,4(r2)
    2554:	18c00217 	ldw	r3,8(r3)
    2558:	10c00215 	stw	r3,8(r2)
    255c:	a00b883a 	mov	r5,r20
    2560:	9009883a 	mov	r4,r18
    2564:	00031e00 	call	31e0 <_free_r>
    2568:	9009883a 	mov	r4,r18
    256c:	0004ab00 	call	4ab0 <__malloc_unlock>
    2570:	8805883a 	mov	r2,r17
    2574:	003fc506 	br	248c <__alt_mem_Flash_flash_data+0xf400248c>
    2578:	00800304 	movi	r2,12
    257c:	90800015 	stw	r2,0(r18)
    2580:	0005883a 	mov	r2,zero
    2584:	003fc106 	br	248c <__alt_mem_Flash_flash_data+0xf400248c>
    2588:	29800117 	ldw	r6,4(r5)
    258c:	00bfff04 	movi	r2,-4
    2590:	b1000404 	addi	r4,r22,16
    2594:	3084703a 	and	r2,r6,r2
    2598:	140d883a 	add	r6,r2,r16
    259c:	31005b0e 	bge	r6,r4,270c <_realloc_r+0x394>
    25a0:	2811883a 	mov	r8,r5
    25a4:	18c0004c 	andi	r3,r3,1
    25a8:	183fce1e 	bne	r3,zero,24e4 <__alt_mem_Flash_flash_data+0xf40024e4>
    25ac:	a4fffe17 	ldw	r19,-8(r20)
    25b0:	00ffff04 	movi	r3,-4
    25b4:	ace7c83a 	sub	r19,r21,r19
    25b8:	99000117 	ldw	r4,4(r19)
    25bc:	20c6703a 	and	r3,r4,r3
    25c0:	403fc526 	beq	r8,zero,24d8 <__alt_mem_Flash_flash_data+0xf40024d8>
    25c4:	1c2f883a 	add	r23,r3,r16
    25c8:	b8af883a 	add	r23,r23,r2
    25cc:	41406026 	beq	r8,r5,2750 <_realloc_r+0x3d8>
    25d0:	b9ffc116 	blt	r23,r7,24d8 <__alt_mem_Flash_flash_data+0xf40024d8>
    25d4:	40c00217 	ldw	r3,8(r8)
    25d8:	40800317 	ldw	r2,12(r8)
    25dc:	81bfff04 	addi	r6,r16,-4
    25e0:	01000904 	movi	r4,36
    25e4:	18800315 	stw	r2,12(r3)
    25e8:	10c00215 	stw	r3,8(r2)
    25ec:	99400217 	ldw	r5,8(r19)
    25f0:	98c00317 	ldw	r3,12(r19)
    25f4:	9c400204 	addi	r17,r19,8
    25f8:	28c00315 	stw	r3,12(r5)
    25fc:	19400215 	stw	r5,8(r3)
    2600:	21802d36 	bltu	r4,r6,26b8 <_realloc_r+0x340>
    2604:	008004c4 	movi	r2,19
    2608:	1180352e 	bgeu	r2,r6,26e0 <_realloc_r+0x368>
    260c:	a0800017 	ldw	r2,0(r20)
    2610:	98800215 	stw	r2,8(r19)
    2614:	a0800117 	ldw	r2,4(r20)
    2618:	98800315 	stw	r2,12(r19)
    261c:	008006c4 	movi	r2,27
    2620:	11808036 	bltu	r2,r6,2824 <_realloc_r+0x4ac>
    2624:	98c00404 	addi	r3,r19,16
    2628:	a5000204 	addi	r20,r20,8
    262c:	00002d06 	br	26e4 <_realloc_r+0x36c>
    2630:	1d86b03a 	or	r3,r3,r22
    2634:	ad8b883a 	add	r5,r21,r22
    2638:	a8c00115 	stw	r3,4(r21)
    263c:	38800054 	ori	r2,r7,1
    2640:	28800115 	stw	r2,4(r5)
    2644:	29cf883a 	add	r7,r5,r7
    2648:	38800117 	ldw	r2,4(r7)
    264c:	9009883a 	mov	r4,r18
    2650:	29400204 	addi	r5,r5,8
    2654:	10800054 	ori	r2,r2,1
    2658:	38800115 	stw	r2,4(r7)
    265c:	00031e00 	call	31e0 <_free_r>
    2660:	003f8706 	br	2480 <__alt_mem_Flash_flash_data+0xf4002480>
    2664:	300b883a 	mov	r5,r6
    2668:	dfc00917 	ldw	ra,36(sp)
    266c:	df000817 	ldw	fp,32(sp)
    2670:	ddc00717 	ldw	r23,28(sp)
    2674:	dd800617 	ldw	r22,24(sp)
    2678:	dd400517 	ldw	r21,20(sp)
    267c:	dd000417 	ldw	r20,16(sp)
    2680:	dcc00317 	ldw	r19,12(sp)
    2684:	dc800217 	ldw	r18,8(sp)
    2688:	dc400117 	ldw	r17,4(sp)
    268c:	dc000017 	ldw	r16,0(sp)
    2690:	dec00a04 	addi	sp,sp,40
    2694:	00018541 	jmpi	1854 <_malloc_r>
    2698:	98800317 	ldw	r2,12(r19)
    269c:	98c00217 	ldw	r3,8(r19)
    26a0:	81bfff04 	addi	r6,r16,-4
    26a4:	01000904 	movi	r4,36
    26a8:	18800315 	stw	r2,12(r3)
    26ac:	10c00215 	stw	r3,8(r2)
    26b0:	9c400204 	addi	r17,r19,8
    26b4:	21bfd32e 	bgeu	r4,r6,2604 <__alt_mem_Flash_flash_data+0xf4002604>
    26b8:	8809883a 	mov	r4,r17
    26bc:	a00b883a 	mov	r5,r20
    26c0:	000221c0 	call	221c <memmove>
    26c4:	98c00117 	ldw	r3,4(r19)
    26c8:	b821883a 	mov	r16,r23
    26cc:	982b883a 	mov	r21,r19
    26d0:	003f6106 	br	2458 <__alt_mem_Flash_flash_data+0xf4002458>
    26d4:	8805883a 	mov	r2,r17
    26d8:	a007883a 	mov	r3,r20
    26dc:	003f9906 	br	2544 <__alt_mem_Flash_flash_data+0xf4002544>
    26e0:	8807883a 	mov	r3,r17
    26e4:	a0800017 	ldw	r2,0(r20)
    26e8:	b821883a 	mov	r16,r23
    26ec:	982b883a 	mov	r21,r19
    26f0:	18800015 	stw	r2,0(r3)
    26f4:	a0800117 	ldw	r2,4(r20)
    26f8:	18800115 	stw	r2,4(r3)
    26fc:	a0800217 	ldw	r2,8(r20)
    2700:	18800215 	stw	r2,8(r3)
    2704:	98c00117 	ldw	r3,4(r19)
    2708:	003f5306 	br	2458 <__alt_mem_Flash_flash_data+0xf4002458>
    270c:	adab883a 	add	r21,r21,r22
    2710:	3585c83a 	sub	r2,r6,r22
    2714:	e5400215 	stw	r21,8(fp)
    2718:	10800054 	ori	r2,r2,1
    271c:	a8800115 	stw	r2,4(r21)
    2720:	a0bfff17 	ldw	r2,-4(r20)
    2724:	9009883a 	mov	r4,r18
    2728:	1080004c 	andi	r2,r2,1
    272c:	b0acb03a 	or	r22,r22,r2
    2730:	a5bfff15 	stw	r22,-4(r20)
    2734:	0004ab00 	call	4ab0 <__malloc_unlock>
    2738:	a005883a 	mov	r2,r20
    273c:	003f5306 	br	248c <__alt_mem_Flash_flash_data+0xf400248c>
    2740:	8809883a 	mov	r4,r17
    2744:	a00b883a 	mov	r5,r20
    2748:	000221c0 	call	221c <memmove>
    274c:	003f8306 	br	255c <__alt_mem_Flash_flash_data+0xf400255c>
    2750:	b0800404 	addi	r2,r22,16
    2754:	b8bf6016 	blt	r23,r2,24d8 <__alt_mem_Flash_flash_data+0xf40024d8>
    2758:	98800317 	ldw	r2,12(r19)
    275c:	98c00217 	ldw	r3,8(r19)
    2760:	81bfff04 	addi	r6,r16,-4
    2764:	01000904 	movi	r4,36
    2768:	18800315 	stw	r2,12(r3)
    276c:	10c00215 	stw	r3,8(r2)
    2770:	9c400204 	addi	r17,r19,8
    2774:	21804336 	bltu	r4,r6,2884 <_realloc_r+0x50c>
    2778:	008004c4 	movi	r2,19
    277c:	11803f2e 	bgeu	r2,r6,287c <_realloc_r+0x504>
    2780:	a0800017 	ldw	r2,0(r20)
    2784:	98800215 	stw	r2,8(r19)
    2788:	a0800117 	ldw	r2,4(r20)
    278c:	98800315 	stw	r2,12(r19)
    2790:	008006c4 	movi	r2,27
    2794:	11803f36 	bltu	r2,r6,2894 <_realloc_r+0x51c>
    2798:	98800404 	addi	r2,r19,16
    279c:	a5000204 	addi	r20,r20,8
    27a0:	a0c00017 	ldw	r3,0(r20)
    27a4:	10c00015 	stw	r3,0(r2)
    27a8:	a0c00117 	ldw	r3,4(r20)
    27ac:	10c00115 	stw	r3,4(r2)
    27b0:	a0c00217 	ldw	r3,8(r20)
    27b4:	10c00215 	stw	r3,8(r2)
    27b8:	9d87883a 	add	r3,r19,r22
    27bc:	bd85c83a 	sub	r2,r23,r22
    27c0:	e0c00215 	stw	r3,8(fp)
    27c4:	10800054 	ori	r2,r2,1
    27c8:	18800115 	stw	r2,4(r3)
    27cc:	98800117 	ldw	r2,4(r19)
    27d0:	9009883a 	mov	r4,r18
    27d4:	1080004c 	andi	r2,r2,1
    27d8:	b0acb03a 	or	r22,r22,r2
    27dc:	9d800115 	stw	r22,4(r19)
    27e0:	0004ab00 	call	4ab0 <__malloc_unlock>
    27e4:	8805883a 	mov	r2,r17
    27e8:	003f2806 	br	248c <__alt_mem_Flash_flash_data+0xf400248c>
    27ec:	a0c00217 	ldw	r3,8(r20)
    27f0:	88c00215 	stw	r3,8(r17)
    27f4:	a0c00317 	ldw	r3,12(r20)
    27f8:	88c00315 	stw	r3,12(r17)
    27fc:	30801126 	beq	r6,r2,2844 <_realloc_r+0x4cc>
    2800:	88800404 	addi	r2,r17,16
    2804:	a0c00404 	addi	r3,r20,16
    2808:	003f4e06 	br	2544 <__alt_mem_Flash_flash_data+0xf4002544>
    280c:	893fff17 	ldw	r4,-4(r17)
    2810:	00bfff04 	movi	r2,-4
    2814:	a023883a 	mov	r17,r20
    2818:	2084703a 	and	r2,r4,r2
    281c:	80a1883a 	add	r16,r16,r2
    2820:	003f0d06 	br	2458 <__alt_mem_Flash_flash_data+0xf4002458>
    2824:	a0800217 	ldw	r2,8(r20)
    2828:	98800415 	stw	r2,16(r19)
    282c:	a0800317 	ldw	r2,12(r20)
    2830:	98800515 	stw	r2,20(r19)
    2834:	31000a26 	beq	r6,r4,2860 <_realloc_r+0x4e8>
    2838:	98c00604 	addi	r3,r19,24
    283c:	a5000404 	addi	r20,r20,16
    2840:	003fa806 	br	26e4 <__alt_mem_Flash_flash_data+0xf40026e4>
    2844:	a1000417 	ldw	r4,16(r20)
    2848:	88800604 	addi	r2,r17,24
    284c:	a0c00604 	addi	r3,r20,24
    2850:	89000415 	stw	r4,16(r17)
    2854:	a1000517 	ldw	r4,20(r20)
    2858:	89000515 	stw	r4,20(r17)
    285c:	003f3906 	br	2544 <__alt_mem_Flash_flash_data+0xf4002544>
    2860:	a0800417 	ldw	r2,16(r20)
    2864:	a5000604 	addi	r20,r20,24
    2868:	98c00804 	addi	r3,r19,32
    286c:	98800615 	stw	r2,24(r19)
    2870:	a0bfff17 	ldw	r2,-4(r20)
    2874:	98800715 	stw	r2,28(r19)
    2878:	003f9a06 	br	26e4 <__alt_mem_Flash_flash_data+0xf40026e4>
    287c:	8805883a 	mov	r2,r17
    2880:	003fc706 	br	27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2884:	8809883a 	mov	r4,r17
    2888:	a00b883a 	mov	r5,r20
    288c:	000221c0 	call	221c <memmove>
    2890:	003fc906 	br	27b8 <__alt_mem_Flash_flash_data+0xf40027b8>
    2894:	a0800217 	ldw	r2,8(r20)
    2898:	98800415 	stw	r2,16(r19)
    289c:	a0800317 	ldw	r2,12(r20)
    28a0:	98800515 	stw	r2,20(r19)
    28a4:	31000726 	beq	r6,r4,28c4 <_realloc_r+0x54c>
    28a8:	98800604 	addi	r2,r19,24
    28ac:	a5000404 	addi	r20,r20,16
    28b0:	003fbb06 	br	27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    28b4:	9009883a 	mov	r4,r18
    28b8:	0004ab00 	call	4ab0 <__malloc_unlock>
    28bc:	0005883a 	mov	r2,zero
    28c0:	003ef206 	br	248c <__alt_mem_Flash_flash_data+0xf400248c>
    28c4:	a0c00417 	ldw	r3,16(r20)
    28c8:	a5000604 	addi	r20,r20,24
    28cc:	98800804 	addi	r2,r19,32
    28d0:	98c00615 	stw	r3,24(r19)
    28d4:	a0ffff17 	ldw	r3,-4(r20)
    28d8:	98c00715 	stw	r3,28(r19)
    28dc:	003fb006 	br	27a0 <__alt_mem_Flash_flash_data+0xf40027a0>

000028e0 <_sbrk_r>:
    28e0:	defffd04 	addi	sp,sp,-12
    28e4:	dc000015 	stw	r16,0(sp)
    28e8:	04000074 	movhi	r16,1
    28ec:	dc400115 	stw	r17,4(sp)
    28f0:	8411b704 	addi	r16,r16,18140
    28f4:	2023883a 	mov	r17,r4
    28f8:	2809883a 	mov	r4,r5
    28fc:	dfc00215 	stw	ra,8(sp)
    2900:	80000015 	stw	zero,0(r16)
    2904:	000467c0 	call	467c <sbrk>
    2908:	00ffffc4 	movi	r3,-1
    290c:	10c00526 	beq	r2,r3,2924 <_sbrk_r+0x44>
    2910:	dfc00217 	ldw	ra,8(sp)
    2914:	dc400117 	ldw	r17,4(sp)
    2918:	dc000017 	ldw	r16,0(sp)
    291c:	dec00304 	addi	sp,sp,12
    2920:	f800283a 	ret
    2924:	80c00017 	ldw	r3,0(r16)
    2928:	183ff926 	beq	r3,zero,2910 <__alt_mem_Flash_flash_data+0xf4002910>
    292c:	88c00015 	stw	r3,0(r17)
    2930:	003ff706 	br	2910 <__alt_mem_Flash_flash_data+0xf4002910>

00002934 <__swsetup_r>:
    2934:	00800074 	movhi	r2,1
    2938:	defffd04 	addi	sp,sp,-12
    293c:	1089cc04 	addi	r2,r2,10032
    2940:	dc400115 	stw	r17,4(sp)
    2944:	2023883a 	mov	r17,r4
    2948:	11000017 	ldw	r4,0(r2)
    294c:	dc000015 	stw	r16,0(sp)
    2950:	dfc00215 	stw	ra,8(sp)
    2954:	2821883a 	mov	r16,r5
    2958:	20000226 	beq	r4,zero,2964 <__swsetup_r+0x30>
    295c:	20c00e17 	ldw	r3,56(r4)
    2960:	18003126 	beq	r3,zero,2a28 <__swsetup_r+0xf4>
    2964:	8080030b 	ldhu	r2,12(r16)
    2968:	10c0020c 	andi	r3,r2,8
    296c:	100d883a 	mov	r6,r2
    2970:	18000f26 	beq	r3,zero,29b0 <__swsetup_r+0x7c>
    2974:	80c00417 	ldw	r3,16(r16)
    2978:	18001526 	beq	r3,zero,29d0 <__swsetup_r+0x9c>
    297c:	1100004c 	andi	r4,r2,1
    2980:	20001c1e 	bne	r4,zero,29f4 <__swsetup_r+0xc0>
    2984:	1080008c 	andi	r2,r2,2
    2988:	1000291e 	bne	r2,zero,2a30 <__swsetup_r+0xfc>
    298c:	80800517 	ldw	r2,20(r16)
    2990:	80800215 	stw	r2,8(r16)
    2994:	18001c26 	beq	r3,zero,2a08 <__swsetup_r+0xd4>
    2998:	0005883a 	mov	r2,zero
    299c:	dfc00217 	ldw	ra,8(sp)
    29a0:	dc400117 	ldw	r17,4(sp)
    29a4:	dc000017 	ldw	r16,0(sp)
    29a8:	dec00304 	addi	sp,sp,12
    29ac:	f800283a 	ret
    29b0:	3080040c 	andi	r2,r6,16
    29b4:	10002e26 	beq	r2,zero,2a70 <__swsetup_r+0x13c>
    29b8:	3080010c 	andi	r2,r6,4
    29bc:	10001e1e 	bne	r2,zero,2a38 <__swsetup_r+0x104>
    29c0:	80c00417 	ldw	r3,16(r16)
    29c4:	30800214 	ori	r2,r6,8
    29c8:	8080030d 	sth	r2,12(r16)
    29cc:	183feb1e 	bne	r3,zero,297c <__alt_mem_Flash_flash_data+0xf400297c>
    29d0:	1140a00c 	andi	r5,r2,640
    29d4:	01008004 	movi	r4,512
    29d8:	293fe826 	beq	r5,r4,297c <__alt_mem_Flash_flash_data+0xf400297c>
    29dc:	8809883a 	mov	r4,r17
    29e0:	800b883a 	mov	r5,r16
    29e4:	00036580 	call	3658 <__smakebuf_r>
    29e8:	8080030b 	ldhu	r2,12(r16)
    29ec:	80c00417 	ldw	r3,16(r16)
    29f0:	003fe206 	br	297c <__alt_mem_Flash_flash_data+0xf400297c>
    29f4:	80800517 	ldw	r2,20(r16)
    29f8:	80000215 	stw	zero,8(r16)
    29fc:	0085c83a 	sub	r2,zero,r2
    2a00:	80800615 	stw	r2,24(r16)
    2a04:	183fe41e 	bne	r3,zero,2998 <__alt_mem_Flash_flash_data+0xf4002998>
    2a08:	80c0030b 	ldhu	r3,12(r16)
    2a0c:	0005883a 	mov	r2,zero
    2a10:	1900200c 	andi	r4,r3,128
    2a14:	203fe126 	beq	r4,zero,299c <__alt_mem_Flash_flash_data+0xf400299c>
    2a18:	18c01014 	ori	r3,r3,64
    2a1c:	80c0030d 	sth	r3,12(r16)
    2a20:	00bfffc4 	movi	r2,-1
    2a24:	003fdd06 	br	299c <__alt_mem_Flash_flash_data+0xf400299c>
    2a28:	000306c0 	call	306c <__sinit>
    2a2c:	003fcd06 	br	2964 <__alt_mem_Flash_flash_data+0xf4002964>
    2a30:	0005883a 	mov	r2,zero
    2a34:	003fd606 	br	2990 <__alt_mem_Flash_flash_data+0xf4002990>
    2a38:	81400c17 	ldw	r5,48(r16)
    2a3c:	28000626 	beq	r5,zero,2a58 <__swsetup_r+0x124>
    2a40:	80801004 	addi	r2,r16,64
    2a44:	28800326 	beq	r5,r2,2a54 <__swsetup_r+0x120>
    2a48:	8809883a 	mov	r4,r17
    2a4c:	00031e00 	call	31e0 <_free_r>
    2a50:	8180030b 	ldhu	r6,12(r16)
    2a54:	80000c15 	stw	zero,48(r16)
    2a58:	80c00417 	ldw	r3,16(r16)
    2a5c:	00bff6c4 	movi	r2,-37
    2a60:	118c703a 	and	r6,r2,r6
    2a64:	80000115 	stw	zero,4(r16)
    2a68:	80c00015 	stw	r3,0(r16)
    2a6c:	003fd506 	br	29c4 <__alt_mem_Flash_flash_data+0xf40029c4>
    2a70:	00800244 	movi	r2,9
    2a74:	88800015 	stw	r2,0(r17)
    2a78:	30801014 	ori	r2,r6,64
    2a7c:	8080030d 	sth	r2,12(r16)
    2a80:	00bfffc4 	movi	r2,-1
    2a84:	003fc506 	br	299c <__alt_mem_Flash_flash_data+0xf400299c>

00002a88 <__sflush_r>:
    2a88:	2880030b 	ldhu	r2,12(r5)
    2a8c:	defffb04 	addi	sp,sp,-20
    2a90:	dcc00315 	stw	r19,12(sp)
    2a94:	dc400115 	stw	r17,4(sp)
    2a98:	dfc00415 	stw	ra,16(sp)
    2a9c:	dc800215 	stw	r18,8(sp)
    2aa0:	dc000015 	stw	r16,0(sp)
    2aa4:	10c0020c 	andi	r3,r2,8
    2aa8:	2823883a 	mov	r17,r5
    2aac:	2027883a 	mov	r19,r4
    2ab0:	1800311e 	bne	r3,zero,2b78 <__sflush_r+0xf0>
    2ab4:	28c00117 	ldw	r3,4(r5)
    2ab8:	10820014 	ori	r2,r2,2048
    2abc:	2880030d 	sth	r2,12(r5)
    2ac0:	00c04b0e 	bge	zero,r3,2bf0 <__sflush_r+0x168>
    2ac4:	8a000a17 	ldw	r8,40(r17)
    2ac8:	40002326 	beq	r8,zero,2b58 <__sflush_r+0xd0>
    2acc:	9c000017 	ldw	r16,0(r19)
    2ad0:	10c4000c 	andi	r3,r2,4096
    2ad4:	98000015 	stw	zero,0(r19)
    2ad8:	18004826 	beq	r3,zero,2bfc <__sflush_r+0x174>
    2adc:	89801417 	ldw	r6,80(r17)
    2ae0:	10c0010c 	andi	r3,r2,4
    2ae4:	18000626 	beq	r3,zero,2b00 <__sflush_r+0x78>
    2ae8:	88c00117 	ldw	r3,4(r17)
    2aec:	88800c17 	ldw	r2,48(r17)
    2af0:	30cdc83a 	sub	r6,r6,r3
    2af4:	10000226 	beq	r2,zero,2b00 <__sflush_r+0x78>
    2af8:	88800f17 	ldw	r2,60(r17)
    2afc:	308dc83a 	sub	r6,r6,r2
    2b00:	89400717 	ldw	r5,28(r17)
    2b04:	9809883a 	mov	r4,r19
    2b08:	000f883a 	mov	r7,zero
    2b0c:	403ee83a 	callr	r8
    2b10:	00ffffc4 	movi	r3,-1
    2b14:	10c04426 	beq	r2,r3,2c28 <__sflush_r+0x1a0>
    2b18:	88c0030b 	ldhu	r3,12(r17)
    2b1c:	89000417 	ldw	r4,16(r17)
    2b20:	88000115 	stw	zero,4(r17)
    2b24:	197dffcc 	andi	r5,r3,63487
    2b28:	8940030d 	sth	r5,12(r17)
    2b2c:	89000015 	stw	r4,0(r17)
    2b30:	18c4000c 	andi	r3,r3,4096
    2b34:	18002c1e 	bne	r3,zero,2be8 <__sflush_r+0x160>
    2b38:	89400c17 	ldw	r5,48(r17)
    2b3c:	9c000015 	stw	r16,0(r19)
    2b40:	28000526 	beq	r5,zero,2b58 <__sflush_r+0xd0>
    2b44:	88801004 	addi	r2,r17,64
    2b48:	28800226 	beq	r5,r2,2b54 <__sflush_r+0xcc>
    2b4c:	9809883a 	mov	r4,r19
    2b50:	00031e00 	call	31e0 <_free_r>
    2b54:	88000c15 	stw	zero,48(r17)
    2b58:	0005883a 	mov	r2,zero
    2b5c:	dfc00417 	ldw	ra,16(sp)
    2b60:	dcc00317 	ldw	r19,12(sp)
    2b64:	dc800217 	ldw	r18,8(sp)
    2b68:	dc400117 	ldw	r17,4(sp)
    2b6c:	dc000017 	ldw	r16,0(sp)
    2b70:	dec00504 	addi	sp,sp,20
    2b74:	f800283a 	ret
    2b78:	2c800417 	ldw	r18,16(r5)
    2b7c:	903ff626 	beq	r18,zero,2b58 <__alt_mem_Flash_flash_data+0xf4002b58>
    2b80:	2c000017 	ldw	r16,0(r5)
    2b84:	108000cc 	andi	r2,r2,3
    2b88:	2c800015 	stw	r18,0(r5)
    2b8c:	84a1c83a 	sub	r16,r16,r18
    2b90:	1000131e 	bne	r2,zero,2be0 <__sflush_r+0x158>
    2b94:	28800517 	ldw	r2,20(r5)
    2b98:	88800215 	stw	r2,8(r17)
    2b9c:	04000316 	blt	zero,r16,2bac <__sflush_r+0x124>
    2ba0:	003fed06 	br	2b58 <__alt_mem_Flash_flash_data+0xf4002b58>
    2ba4:	90a5883a 	add	r18,r18,r2
    2ba8:	043feb0e 	bge	zero,r16,2b58 <__alt_mem_Flash_flash_data+0xf4002b58>
    2bac:	88800917 	ldw	r2,36(r17)
    2bb0:	89400717 	ldw	r5,28(r17)
    2bb4:	800f883a 	mov	r7,r16
    2bb8:	900d883a 	mov	r6,r18
    2bbc:	9809883a 	mov	r4,r19
    2bc0:	103ee83a 	callr	r2
    2bc4:	80a1c83a 	sub	r16,r16,r2
    2bc8:	00bff616 	blt	zero,r2,2ba4 <__alt_mem_Flash_flash_data+0xf4002ba4>
    2bcc:	88c0030b 	ldhu	r3,12(r17)
    2bd0:	00bfffc4 	movi	r2,-1
    2bd4:	18c01014 	ori	r3,r3,64
    2bd8:	88c0030d 	sth	r3,12(r17)
    2bdc:	003fdf06 	br	2b5c <__alt_mem_Flash_flash_data+0xf4002b5c>
    2be0:	0005883a 	mov	r2,zero
    2be4:	003fec06 	br	2b98 <__alt_mem_Flash_flash_data+0xf4002b98>
    2be8:	88801415 	stw	r2,80(r17)
    2bec:	003fd206 	br	2b38 <__alt_mem_Flash_flash_data+0xf4002b38>
    2bf0:	28c00f17 	ldw	r3,60(r5)
    2bf4:	00ffb316 	blt	zero,r3,2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2bf8:	003fd706 	br	2b58 <__alt_mem_Flash_flash_data+0xf4002b58>
    2bfc:	89400717 	ldw	r5,28(r17)
    2c00:	000d883a 	mov	r6,zero
    2c04:	9809883a 	mov	r4,r19
    2c08:	01c00044 	movi	r7,1
    2c0c:	403ee83a 	callr	r8
    2c10:	100d883a 	mov	r6,r2
    2c14:	00bfffc4 	movi	r2,-1
    2c18:	30801426 	beq	r6,r2,2c6c <__sflush_r+0x1e4>
    2c1c:	8880030b 	ldhu	r2,12(r17)
    2c20:	8a000a17 	ldw	r8,40(r17)
    2c24:	003fae06 	br	2ae0 <__alt_mem_Flash_flash_data+0xf4002ae0>
    2c28:	98c00017 	ldw	r3,0(r19)
    2c2c:	183fba26 	beq	r3,zero,2b18 <__alt_mem_Flash_flash_data+0xf4002b18>
    2c30:	01000744 	movi	r4,29
    2c34:	19000626 	beq	r3,r4,2c50 <__sflush_r+0x1c8>
    2c38:	01000584 	movi	r4,22
    2c3c:	19000426 	beq	r3,r4,2c50 <__sflush_r+0x1c8>
    2c40:	88c0030b 	ldhu	r3,12(r17)
    2c44:	18c01014 	ori	r3,r3,64
    2c48:	88c0030d 	sth	r3,12(r17)
    2c4c:	003fc306 	br	2b5c <__alt_mem_Flash_flash_data+0xf4002b5c>
    2c50:	8880030b 	ldhu	r2,12(r17)
    2c54:	88c00417 	ldw	r3,16(r17)
    2c58:	88000115 	stw	zero,4(r17)
    2c5c:	10bdffcc 	andi	r2,r2,63487
    2c60:	8880030d 	sth	r2,12(r17)
    2c64:	88c00015 	stw	r3,0(r17)
    2c68:	003fb306 	br	2b38 <__alt_mem_Flash_flash_data+0xf4002b38>
    2c6c:	98800017 	ldw	r2,0(r19)
    2c70:	103fea26 	beq	r2,zero,2c1c <__alt_mem_Flash_flash_data+0xf4002c1c>
    2c74:	00c00744 	movi	r3,29
    2c78:	10c00226 	beq	r2,r3,2c84 <__sflush_r+0x1fc>
    2c7c:	00c00584 	movi	r3,22
    2c80:	10ffd21e 	bne	r2,r3,2bcc <__alt_mem_Flash_flash_data+0xf4002bcc>
    2c84:	9c000015 	stw	r16,0(r19)
    2c88:	0005883a 	mov	r2,zero
    2c8c:	003fb306 	br	2b5c <__alt_mem_Flash_flash_data+0xf4002b5c>

00002c90 <_fflush_r>:
    2c90:	defffd04 	addi	sp,sp,-12
    2c94:	dc000115 	stw	r16,4(sp)
    2c98:	dfc00215 	stw	ra,8(sp)
    2c9c:	2021883a 	mov	r16,r4
    2ca0:	20000226 	beq	r4,zero,2cac <_fflush_r+0x1c>
    2ca4:	20800e17 	ldw	r2,56(r4)
    2ca8:	10000c26 	beq	r2,zero,2cdc <_fflush_r+0x4c>
    2cac:	2880030f 	ldh	r2,12(r5)
    2cb0:	1000051e 	bne	r2,zero,2cc8 <_fflush_r+0x38>
    2cb4:	0005883a 	mov	r2,zero
    2cb8:	dfc00217 	ldw	ra,8(sp)
    2cbc:	dc000117 	ldw	r16,4(sp)
    2cc0:	dec00304 	addi	sp,sp,12
    2cc4:	f800283a 	ret
    2cc8:	8009883a 	mov	r4,r16
    2ccc:	dfc00217 	ldw	ra,8(sp)
    2cd0:	dc000117 	ldw	r16,4(sp)
    2cd4:	dec00304 	addi	sp,sp,12
    2cd8:	0002a881 	jmpi	2a88 <__sflush_r>
    2cdc:	d9400015 	stw	r5,0(sp)
    2ce0:	000306c0 	call	306c <__sinit>
    2ce4:	d9400017 	ldw	r5,0(sp)
    2ce8:	003ff006 	br	2cac <__alt_mem_Flash_flash_data+0xf4002cac>

00002cec <fflush>:
    2cec:	20000526 	beq	r4,zero,2d04 <fflush+0x18>
    2cf0:	00800074 	movhi	r2,1
    2cf4:	1089cc04 	addi	r2,r2,10032
    2cf8:	200b883a 	mov	r5,r4
    2cfc:	11000017 	ldw	r4,0(r2)
    2d00:	0002c901 	jmpi	2c90 <_fflush_r>
    2d04:	00800074 	movhi	r2,1
    2d08:	1089cb04 	addi	r2,r2,10028
    2d0c:	11000017 	ldw	r4,0(r2)
    2d10:	01400034 	movhi	r5,0
    2d14:	294b2404 	addi	r5,r5,11408
    2d18:	00035941 	jmpi	3594 <_fwalk_reent>

00002d1c <__fp_lock>:
    2d1c:	0005883a 	mov	r2,zero
    2d20:	f800283a 	ret

00002d24 <__fp_unlock>:
    2d24:	0005883a 	mov	r2,zero
    2d28:	f800283a 	ret

00002d2c <_cleanup_r>:
    2d2c:	01400034 	movhi	r5,0
    2d30:	294ec804 	addi	r5,r5,15136
    2d34:	00035941 	jmpi	3594 <_fwalk_reent>

00002d38 <__sinit.part.1>:
    2d38:	defff704 	addi	sp,sp,-36
    2d3c:	00c00034 	movhi	r3,0
    2d40:	dfc00815 	stw	ra,32(sp)
    2d44:	ddc00715 	stw	r23,28(sp)
    2d48:	dd800615 	stw	r22,24(sp)
    2d4c:	dd400515 	stw	r21,20(sp)
    2d50:	dd000415 	stw	r20,16(sp)
    2d54:	dcc00315 	stw	r19,12(sp)
    2d58:	dc800215 	stw	r18,8(sp)
    2d5c:	dc400115 	stw	r17,4(sp)
    2d60:	dc000015 	stw	r16,0(sp)
    2d64:	18cb4b04 	addi	r3,r3,11564
    2d68:	24000117 	ldw	r16,4(r4)
    2d6c:	20c00f15 	stw	r3,60(r4)
    2d70:	2080bb04 	addi	r2,r4,748
    2d74:	00c000c4 	movi	r3,3
    2d78:	20c0b915 	stw	r3,740(r4)
    2d7c:	2080ba15 	stw	r2,744(r4)
    2d80:	2000b815 	stw	zero,736(r4)
    2d84:	05c00204 	movi	r23,8
    2d88:	00800104 	movi	r2,4
    2d8c:	2025883a 	mov	r18,r4
    2d90:	b80d883a 	mov	r6,r23
    2d94:	81001704 	addi	r4,r16,92
    2d98:	000b883a 	mov	r5,zero
    2d9c:	80000015 	stw	zero,0(r16)
    2da0:	80000115 	stw	zero,4(r16)
    2da4:	80000215 	stw	zero,8(r16)
    2da8:	8080030d 	sth	r2,12(r16)
    2dac:	80001915 	stw	zero,100(r16)
    2db0:	8000038d 	sth	zero,14(r16)
    2db4:	80000415 	stw	zero,16(r16)
    2db8:	80000515 	stw	zero,20(r16)
    2dbc:	80000615 	stw	zero,24(r16)
    2dc0:	00038100 	call	3810 <memset>
    2dc4:	05800034 	movhi	r22,0
    2dc8:	94400217 	ldw	r17,8(r18)
    2dcc:	05400034 	movhi	r21,0
    2dd0:	05000034 	movhi	r20,0
    2dd4:	04c00034 	movhi	r19,0
    2dd8:	b58e4d04 	addi	r22,r22,14644
    2ddc:	ad4e6404 	addi	r21,r21,14736
    2de0:	a50e8304 	addi	r20,r20,14860
    2de4:	9cce9a04 	addi	r19,r19,14952
    2de8:	85800815 	stw	r22,32(r16)
    2dec:	85400915 	stw	r21,36(r16)
    2df0:	85000a15 	stw	r20,40(r16)
    2df4:	84c00b15 	stw	r19,44(r16)
    2df8:	84000715 	stw	r16,28(r16)
    2dfc:	00800284 	movi	r2,10
    2e00:	8880030d 	sth	r2,12(r17)
    2e04:	00800044 	movi	r2,1
    2e08:	89001704 	addi	r4,r17,92
    2e0c:	b80d883a 	mov	r6,r23
    2e10:	000b883a 	mov	r5,zero
    2e14:	88000015 	stw	zero,0(r17)
    2e18:	88000115 	stw	zero,4(r17)
    2e1c:	88000215 	stw	zero,8(r17)
    2e20:	88001915 	stw	zero,100(r17)
    2e24:	8880038d 	sth	r2,14(r17)
    2e28:	88000415 	stw	zero,16(r17)
    2e2c:	88000515 	stw	zero,20(r17)
    2e30:	88000615 	stw	zero,24(r17)
    2e34:	00038100 	call	3810 <memset>
    2e38:	94000317 	ldw	r16,12(r18)
    2e3c:	00800484 	movi	r2,18
    2e40:	8c400715 	stw	r17,28(r17)
    2e44:	8d800815 	stw	r22,32(r17)
    2e48:	8d400915 	stw	r21,36(r17)
    2e4c:	8d000a15 	stw	r20,40(r17)
    2e50:	8cc00b15 	stw	r19,44(r17)
    2e54:	8080030d 	sth	r2,12(r16)
    2e58:	00800084 	movi	r2,2
    2e5c:	80000015 	stw	zero,0(r16)
    2e60:	80000115 	stw	zero,4(r16)
    2e64:	80000215 	stw	zero,8(r16)
    2e68:	80001915 	stw	zero,100(r16)
    2e6c:	8080038d 	sth	r2,14(r16)
    2e70:	80000415 	stw	zero,16(r16)
    2e74:	80000515 	stw	zero,20(r16)
    2e78:	80000615 	stw	zero,24(r16)
    2e7c:	81001704 	addi	r4,r16,92
    2e80:	000b883a 	mov	r5,zero
    2e84:	b80d883a 	mov	r6,r23
    2e88:	00038100 	call	3810 <memset>
    2e8c:	00800044 	movi	r2,1
    2e90:	84000715 	stw	r16,28(r16)
    2e94:	85800815 	stw	r22,32(r16)
    2e98:	85400915 	stw	r21,36(r16)
    2e9c:	85000a15 	stw	r20,40(r16)
    2ea0:	84c00b15 	stw	r19,44(r16)
    2ea4:	90800e15 	stw	r2,56(r18)
    2ea8:	dfc00817 	ldw	ra,32(sp)
    2eac:	ddc00717 	ldw	r23,28(sp)
    2eb0:	dd800617 	ldw	r22,24(sp)
    2eb4:	dd400517 	ldw	r21,20(sp)
    2eb8:	dd000417 	ldw	r20,16(sp)
    2ebc:	dcc00317 	ldw	r19,12(sp)
    2ec0:	dc800217 	ldw	r18,8(sp)
    2ec4:	dc400117 	ldw	r17,4(sp)
    2ec8:	dc000017 	ldw	r16,0(sp)
    2ecc:	dec00904 	addi	sp,sp,36
    2ed0:	f800283a 	ret

00002ed4 <__sfmoreglue>:
    2ed4:	defffc04 	addi	sp,sp,-16
    2ed8:	dc400115 	stw	r17,4(sp)
    2edc:	2c7fffc4 	addi	r17,r5,-1
    2ee0:	8c401a24 	muli	r17,r17,104
    2ee4:	dc800215 	stw	r18,8(sp)
    2ee8:	2825883a 	mov	r18,r5
    2eec:	89401d04 	addi	r5,r17,116
    2ef0:	dc000015 	stw	r16,0(sp)
    2ef4:	dfc00315 	stw	ra,12(sp)
    2ef8:	00018540 	call	1854 <_malloc_r>
    2efc:	1021883a 	mov	r16,r2
    2f00:	10000726 	beq	r2,zero,2f20 <__sfmoreglue+0x4c>
    2f04:	11000304 	addi	r4,r2,12
    2f08:	10000015 	stw	zero,0(r2)
    2f0c:	14800115 	stw	r18,4(r2)
    2f10:	11000215 	stw	r4,8(r2)
    2f14:	000b883a 	mov	r5,zero
    2f18:	89801a04 	addi	r6,r17,104
    2f1c:	00038100 	call	3810 <memset>
    2f20:	8005883a 	mov	r2,r16
    2f24:	dfc00317 	ldw	ra,12(sp)
    2f28:	dc800217 	ldw	r18,8(sp)
    2f2c:	dc400117 	ldw	r17,4(sp)
    2f30:	dc000017 	ldw	r16,0(sp)
    2f34:	dec00404 	addi	sp,sp,16
    2f38:	f800283a 	ret

00002f3c <__sfp>:
    2f3c:	00800074 	movhi	r2,1
    2f40:	defffb04 	addi	sp,sp,-20
    2f44:	1089cb04 	addi	r2,r2,10028
    2f48:	dc800215 	stw	r18,8(sp)
    2f4c:	14800017 	ldw	r18,0(r2)
    2f50:	dcc00315 	stw	r19,12(sp)
    2f54:	dfc00415 	stw	ra,16(sp)
    2f58:	90800e17 	ldw	r2,56(r18)
    2f5c:	dc400115 	stw	r17,4(sp)
    2f60:	dc000015 	stw	r16,0(sp)
    2f64:	2027883a 	mov	r19,r4
    2f68:	1000021e 	bne	r2,zero,2f74 <__sfp+0x38>
    2f6c:	9009883a 	mov	r4,r18
    2f70:	0002d380 	call	2d38 <__sinit.part.1>
    2f74:	9480b804 	addi	r18,r18,736
    2f78:	047fffc4 	movi	r17,-1
    2f7c:	91400117 	ldw	r5,4(r18)
    2f80:	94000217 	ldw	r16,8(r18)
    2f84:	297fffc4 	addi	r5,r5,-1
    2f88:	28000a16 	blt	r5,zero,2fb4 <__sfp+0x78>
    2f8c:	8080030f 	ldh	r2,12(r16)
    2f90:	10000c26 	beq	r2,zero,2fc4 <__sfp+0x88>
    2f94:	80c01d04 	addi	r3,r16,116
    2f98:	00000206 	br	2fa4 <__sfp+0x68>
    2f9c:	18bfe60f 	ldh	r2,-104(r3)
    2fa0:	10000826 	beq	r2,zero,2fc4 <__sfp+0x88>
    2fa4:	297fffc4 	addi	r5,r5,-1
    2fa8:	1c3ffd04 	addi	r16,r3,-12
    2fac:	18c01a04 	addi	r3,r3,104
    2fb0:	2c7ffa1e 	bne	r5,r17,2f9c <__alt_mem_Flash_flash_data+0xf4002f9c>
    2fb4:	90800017 	ldw	r2,0(r18)
    2fb8:	10001d26 	beq	r2,zero,3030 <__sfp+0xf4>
    2fbc:	1025883a 	mov	r18,r2
    2fc0:	003fee06 	br	2f7c <__alt_mem_Flash_flash_data+0xf4002f7c>
    2fc4:	00bfffc4 	movi	r2,-1
    2fc8:	8080038d 	sth	r2,14(r16)
    2fcc:	00800044 	movi	r2,1
    2fd0:	8080030d 	sth	r2,12(r16)
    2fd4:	80001915 	stw	zero,100(r16)
    2fd8:	80000015 	stw	zero,0(r16)
    2fdc:	80000215 	stw	zero,8(r16)
    2fe0:	80000115 	stw	zero,4(r16)
    2fe4:	80000415 	stw	zero,16(r16)
    2fe8:	80000515 	stw	zero,20(r16)
    2fec:	80000615 	stw	zero,24(r16)
    2ff0:	81001704 	addi	r4,r16,92
    2ff4:	000b883a 	mov	r5,zero
    2ff8:	01800204 	movi	r6,8
    2ffc:	00038100 	call	3810 <memset>
    3000:	8005883a 	mov	r2,r16
    3004:	80000c15 	stw	zero,48(r16)
    3008:	80000d15 	stw	zero,52(r16)
    300c:	80001115 	stw	zero,68(r16)
    3010:	80001215 	stw	zero,72(r16)
    3014:	dfc00417 	ldw	ra,16(sp)
    3018:	dcc00317 	ldw	r19,12(sp)
    301c:	dc800217 	ldw	r18,8(sp)
    3020:	dc400117 	ldw	r17,4(sp)
    3024:	dc000017 	ldw	r16,0(sp)
    3028:	dec00504 	addi	sp,sp,20
    302c:	f800283a 	ret
    3030:	9809883a 	mov	r4,r19
    3034:	01400104 	movi	r5,4
    3038:	0002ed40 	call	2ed4 <__sfmoreglue>
    303c:	90800015 	stw	r2,0(r18)
    3040:	103fde1e 	bne	r2,zero,2fbc <__alt_mem_Flash_flash_data+0xf4002fbc>
    3044:	00800304 	movi	r2,12
    3048:	98800015 	stw	r2,0(r19)
    304c:	0005883a 	mov	r2,zero
    3050:	003ff006 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>

00003054 <_cleanup>:
    3054:	00800074 	movhi	r2,1
    3058:	1089cb04 	addi	r2,r2,10028
    305c:	11000017 	ldw	r4,0(r2)
    3060:	01400034 	movhi	r5,0
    3064:	294ec804 	addi	r5,r5,15136
    3068:	00035941 	jmpi	3594 <_fwalk_reent>

0000306c <__sinit>:
    306c:	20800e17 	ldw	r2,56(r4)
    3070:	10000126 	beq	r2,zero,3078 <__sinit+0xc>
    3074:	f800283a 	ret
    3078:	0002d381 	jmpi	2d38 <__sinit.part.1>

0000307c <__sfp_lock_acquire>:
    307c:	f800283a 	ret

00003080 <__sfp_lock_release>:
    3080:	f800283a 	ret

00003084 <__sinit_lock_acquire>:
    3084:	f800283a 	ret

00003088 <__sinit_lock_release>:
    3088:	f800283a 	ret

0000308c <__fp_lock_all>:
    308c:	00800074 	movhi	r2,1
    3090:	1089cc04 	addi	r2,r2,10032
    3094:	11000017 	ldw	r4,0(r2)
    3098:	01400034 	movhi	r5,0
    309c:	294b4704 	addi	r5,r5,11548
    30a0:	00034d01 	jmpi	34d0 <_fwalk>

000030a4 <__fp_unlock_all>:
    30a4:	00800074 	movhi	r2,1
    30a8:	1089cc04 	addi	r2,r2,10032
    30ac:	11000017 	ldw	r4,0(r2)
    30b0:	01400034 	movhi	r5,0
    30b4:	294b4904 	addi	r5,r5,11556
    30b8:	00034d01 	jmpi	34d0 <_fwalk>

000030bc <_malloc_trim_r>:
    30bc:	defffb04 	addi	sp,sp,-20
    30c0:	dcc00315 	stw	r19,12(sp)
    30c4:	04c00074 	movhi	r19,1
    30c8:	dc800215 	stw	r18,8(sp)
    30cc:	dc400115 	stw	r17,4(sp)
    30d0:	dc000015 	stw	r16,0(sp)
    30d4:	dfc00415 	stw	ra,16(sp)
    30d8:	2821883a 	mov	r16,r5
    30dc:	9cc35904 	addi	r19,r19,3428
    30e0:	2025883a 	mov	r18,r4
    30e4:	00049900 	call	4990 <__malloc_lock>
    30e8:	98800217 	ldw	r2,8(r19)
    30ec:	14400117 	ldw	r17,4(r2)
    30f0:	00bfff04 	movi	r2,-4
    30f4:	88a2703a 	and	r17,r17,r2
    30f8:	8c21c83a 	sub	r16,r17,r16
    30fc:	8403fbc4 	addi	r16,r16,4079
    3100:	8020d33a 	srli	r16,r16,12
    3104:	0083ffc4 	movi	r2,4095
    3108:	843fffc4 	addi	r16,r16,-1
    310c:	8020933a 	slli	r16,r16,12
    3110:	1400060e 	bge	r2,r16,312c <_malloc_trim_r+0x70>
    3114:	9009883a 	mov	r4,r18
    3118:	000b883a 	mov	r5,zero
    311c:	00028e00 	call	28e0 <_sbrk_r>
    3120:	98c00217 	ldw	r3,8(r19)
    3124:	1c47883a 	add	r3,r3,r17
    3128:	10c00a26 	beq	r2,r3,3154 <_malloc_trim_r+0x98>
    312c:	9009883a 	mov	r4,r18
    3130:	0004ab00 	call	4ab0 <__malloc_unlock>
    3134:	0005883a 	mov	r2,zero
    3138:	dfc00417 	ldw	ra,16(sp)
    313c:	dcc00317 	ldw	r19,12(sp)
    3140:	dc800217 	ldw	r18,8(sp)
    3144:	dc400117 	ldw	r17,4(sp)
    3148:	dc000017 	ldw	r16,0(sp)
    314c:	dec00504 	addi	sp,sp,20
    3150:	f800283a 	ret
    3154:	9009883a 	mov	r4,r18
    3158:	040bc83a 	sub	r5,zero,r16
    315c:	00028e00 	call	28e0 <_sbrk_r>
    3160:	00ffffc4 	movi	r3,-1
    3164:	10c00d26 	beq	r2,r3,319c <_malloc_trim_r+0xe0>
    3168:	00c00074 	movhi	r3,1
    316c:	18d1d804 	addi	r3,r3,18272
    3170:	18800017 	ldw	r2,0(r3)
    3174:	99000217 	ldw	r4,8(r19)
    3178:	8c23c83a 	sub	r17,r17,r16
    317c:	8c400054 	ori	r17,r17,1
    3180:	1421c83a 	sub	r16,r2,r16
    3184:	24400115 	stw	r17,4(r4)
    3188:	9009883a 	mov	r4,r18
    318c:	1c000015 	stw	r16,0(r3)
    3190:	0004ab00 	call	4ab0 <__malloc_unlock>
    3194:	00800044 	movi	r2,1
    3198:	003fe706 	br	3138 <__alt_mem_Flash_flash_data+0xf4003138>
    319c:	9009883a 	mov	r4,r18
    31a0:	000b883a 	mov	r5,zero
    31a4:	00028e00 	call	28e0 <_sbrk_r>
    31a8:	99000217 	ldw	r4,8(r19)
    31ac:	014003c4 	movi	r5,15
    31b0:	1107c83a 	sub	r3,r2,r4
    31b4:	28ffdd0e 	bge	r5,r3,312c <__alt_mem_Flash_flash_data+0xf400312c>
    31b8:	01400074 	movhi	r5,1
    31bc:	2949cd04 	addi	r5,r5,10036
    31c0:	29400017 	ldw	r5,0(r5)
    31c4:	18c00054 	ori	r3,r3,1
    31c8:	20c00115 	stw	r3,4(r4)
    31cc:	00c00074 	movhi	r3,1
    31d0:	1145c83a 	sub	r2,r2,r5
    31d4:	18d1d804 	addi	r3,r3,18272
    31d8:	18800015 	stw	r2,0(r3)
    31dc:	003fd306 	br	312c <__alt_mem_Flash_flash_data+0xf400312c>

000031e0 <_free_r>:
    31e0:	28004c26 	beq	r5,zero,3314 <_free_r+0x134>
    31e4:	defffd04 	addi	sp,sp,-12
    31e8:	dc400115 	stw	r17,4(sp)
    31ec:	dc000015 	stw	r16,0(sp)
    31f0:	2023883a 	mov	r17,r4
    31f4:	2821883a 	mov	r16,r5
    31f8:	dfc00215 	stw	ra,8(sp)
    31fc:	00049900 	call	4990 <__malloc_lock>
    3200:	813fff17 	ldw	r4,-4(r16)
    3204:	00bfff84 	movi	r2,-2
    3208:	02400074 	movhi	r9,1
    320c:	81bffe04 	addi	r6,r16,-8
    3210:	2084703a 	and	r2,r4,r2
    3214:	4a435904 	addi	r9,r9,3428
    3218:	308b883a 	add	r5,r6,r2
    321c:	2a000117 	ldw	r8,4(r5)
    3220:	49c00217 	ldw	r7,8(r9)
    3224:	00ffff04 	movi	r3,-4
    3228:	40c6703a 	and	r3,r8,r3
    322c:	39405326 	beq	r7,r5,337c <_free_r+0x19c>
    3230:	28c00115 	stw	r3,4(r5)
    3234:	2100004c 	andi	r4,r4,1
    3238:	2000091e 	bne	r4,zero,3260 <_free_r+0x80>
    323c:	81fffe17 	ldw	r7,-8(r16)
    3240:	4a000204 	addi	r8,r9,8
    3244:	31cdc83a 	sub	r6,r6,r7
    3248:	31000217 	ldw	r4,8(r6)
    324c:	11c5883a 	add	r2,r2,r7
    3250:	22006126 	beq	r4,r8,33d8 <_free_r+0x1f8>
    3254:	31c00317 	ldw	r7,12(r6)
    3258:	21c00315 	stw	r7,12(r4)
    325c:	39000215 	stw	r4,8(r7)
    3260:	28c9883a 	add	r4,r5,r3
    3264:	21c00117 	ldw	r7,4(r4)
    3268:	39c0004c 	andi	r7,r7,1
    326c:	38000d1e 	bne	r7,zero,32a4 <_free_r+0xc4>
    3270:	29000217 	ldw	r4,8(r5)
    3274:	10c5883a 	add	r2,r2,r3
    3278:	00c00074 	movhi	r3,1
    327c:	18c35b04 	addi	r3,r3,3436
    3280:	20c07526 	beq	r4,r3,3458 <_free_r+0x278>
    3284:	29c00317 	ldw	r7,12(r5)
    3288:	11400054 	ori	r5,r2,1
    328c:	3087883a 	add	r3,r6,r2
    3290:	21c00315 	stw	r7,12(r4)
    3294:	39000215 	stw	r4,8(r7)
    3298:	31400115 	stw	r5,4(r6)
    329c:	18800015 	stw	r2,0(r3)
    32a0:	00000406 	br	32b4 <_free_r+0xd4>
    32a4:	10c00054 	ori	r3,r2,1
    32a8:	30c00115 	stw	r3,4(r6)
    32ac:	3087883a 	add	r3,r6,r2
    32b0:	18800015 	stw	r2,0(r3)
    32b4:	00c07fc4 	movi	r3,511
    32b8:	18801736 	bltu	r3,r2,3318 <_free_r+0x138>
    32bc:	1004d0fa 	srli	r2,r2,3
    32c0:	01400044 	movi	r5,1
    32c4:	49000117 	ldw	r4,4(r9)
    32c8:	1087883a 	add	r3,r2,r2
    32cc:	18c7883a 	add	r3,r3,r3
    32d0:	1005d0ba 	srai	r2,r2,2
    32d4:	18c7883a 	add	r3,r3,r3
    32d8:	1a47883a 	add	r3,r3,r9
    32dc:	19c00217 	ldw	r7,8(r3)
    32e0:	2884983a 	sll	r2,r5,r2
    32e4:	30c00315 	stw	r3,12(r6)
    32e8:	31c00215 	stw	r7,8(r6)
    32ec:	1104b03a 	or	r2,r2,r4
    32f0:	19800215 	stw	r6,8(r3)
    32f4:	48800115 	stw	r2,4(r9)
    32f8:	39800315 	stw	r6,12(r7)
    32fc:	8809883a 	mov	r4,r17
    3300:	dfc00217 	ldw	ra,8(sp)
    3304:	dc400117 	ldw	r17,4(sp)
    3308:	dc000017 	ldw	r16,0(sp)
    330c:	dec00304 	addi	sp,sp,12
    3310:	0004ab01 	jmpi	4ab0 <__malloc_unlock>
    3314:	f800283a 	ret
    3318:	1006d27a 	srli	r3,r2,9
    331c:	01000104 	movi	r4,4
    3320:	20c04036 	bltu	r4,r3,3424 <_free_r+0x244>
    3324:	1006d1ba 	srli	r3,r2,6
    3328:	19400e04 	addi	r5,r3,56
    332c:	2947883a 	add	r3,r5,r5
    3330:	18c7883a 	add	r3,r3,r3
    3334:	18c7883a 	add	r3,r3,r3
    3338:	1a49883a 	add	r4,r3,r9
    333c:	20c00217 	ldw	r3,8(r4)
    3340:	01c00074 	movhi	r7,1
    3344:	39c35904 	addi	r7,r7,3428
    3348:	19003b26 	beq	r3,r4,3438 <_free_r+0x258>
    334c:	01ffff04 	movi	r7,-4
    3350:	19400117 	ldw	r5,4(r3)
    3354:	29ca703a 	and	r5,r5,r7
    3358:	1140022e 	bgeu	r2,r5,3364 <_free_r+0x184>
    335c:	18c00217 	ldw	r3,8(r3)
    3360:	20fffb1e 	bne	r4,r3,3350 <__alt_mem_Flash_flash_data+0xf4003350>
    3364:	18800317 	ldw	r2,12(r3)
    3368:	30800315 	stw	r2,12(r6)
    336c:	30c00215 	stw	r3,8(r6)
    3370:	11800215 	stw	r6,8(r2)
    3374:	19800315 	stw	r6,12(r3)
    3378:	003fe006 	br	32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    337c:	2100004c 	andi	r4,r4,1
    3380:	1885883a 	add	r2,r3,r2
    3384:	2000071e 	bne	r4,zero,33a4 <_free_r+0x1c4>
    3388:	817ffe17 	ldw	r5,-8(r16)
    338c:	314dc83a 	sub	r6,r6,r5
    3390:	30c00317 	ldw	r3,12(r6)
    3394:	31000217 	ldw	r4,8(r6)
    3398:	1145883a 	add	r2,r2,r5
    339c:	20c00315 	stw	r3,12(r4)
    33a0:	19000215 	stw	r4,8(r3)
    33a4:	10c00054 	ori	r3,r2,1
    33a8:	30c00115 	stw	r3,4(r6)
    33ac:	00c00074 	movhi	r3,1
    33b0:	18c9ce04 	addi	r3,r3,10040
    33b4:	18c00017 	ldw	r3,0(r3)
    33b8:	49800215 	stw	r6,8(r9)
    33bc:	10ffcf36 	bltu	r2,r3,32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    33c0:	00800074 	movhi	r2,1
    33c4:	1091b604 	addi	r2,r2,18136
    33c8:	11400017 	ldw	r5,0(r2)
    33cc:	8809883a 	mov	r4,r17
    33d0:	00030bc0 	call	30bc <_malloc_trim_r>
    33d4:	003fc906 	br	32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    33d8:	28c9883a 	add	r4,r5,r3
    33dc:	21000117 	ldw	r4,4(r4)
    33e0:	2100004c 	andi	r4,r4,1
    33e4:	20000a1e 	bne	r4,zero,3410 <_free_r+0x230>
    33e8:	29000317 	ldw	r4,12(r5)
    33ec:	29400217 	ldw	r5,8(r5)
    33f0:	10c5883a 	add	r2,r2,r3
    33f4:	10c00054 	ori	r3,r2,1
    33f8:	29000315 	stw	r4,12(r5)
    33fc:	21400215 	stw	r5,8(r4)
    3400:	30c00115 	stw	r3,4(r6)
    3404:	308d883a 	add	r6,r6,r2
    3408:	30800015 	stw	r2,0(r6)
    340c:	003fbb06 	br	32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    3410:	10c00054 	ori	r3,r2,1
    3414:	30c00115 	stw	r3,4(r6)
    3418:	308d883a 	add	r6,r6,r2
    341c:	30800015 	stw	r2,0(r6)
    3420:	003fb606 	br	32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    3424:	01000504 	movi	r4,20
    3428:	20c01436 	bltu	r4,r3,347c <_free_r+0x29c>
    342c:	194016c4 	addi	r5,r3,91
    3430:	2947883a 	add	r3,r5,r5
    3434:	003fbe06 	br	3330 <__alt_mem_Flash_flash_data+0xf4003330>
    3438:	280bd0ba 	srai	r5,r5,2
    343c:	00800044 	movi	r2,1
    3440:	39000117 	ldw	r4,4(r7)
    3444:	114a983a 	sll	r5,r2,r5
    3448:	1805883a 	mov	r2,r3
    344c:	2908b03a 	or	r4,r5,r4
    3450:	39000115 	stw	r4,4(r7)
    3454:	003fc406 	br	3368 <__alt_mem_Flash_flash_data+0xf4003368>
    3458:	49800515 	stw	r6,20(r9)
    345c:	49800415 	stw	r6,16(r9)
    3460:	10c00054 	ori	r3,r2,1
    3464:	31000315 	stw	r4,12(r6)
    3468:	31000215 	stw	r4,8(r6)
    346c:	30c00115 	stw	r3,4(r6)
    3470:	308d883a 	add	r6,r6,r2
    3474:	30800015 	stw	r2,0(r6)
    3478:	003fa006 	br	32fc <__alt_mem_Flash_flash_data+0xf40032fc>
    347c:	01001504 	movi	r4,84
    3480:	20c00436 	bltu	r4,r3,3494 <_free_r+0x2b4>
    3484:	1006d33a 	srli	r3,r2,12
    3488:	19401b84 	addi	r5,r3,110
    348c:	2947883a 	add	r3,r5,r5
    3490:	003fa706 	br	3330 <__alt_mem_Flash_flash_data+0xf4003330>
    3494:	01005504 	movi	r4,340
    3498:	20c00436 	bltu	r4,r3,34ac <_free_r+0x2cc>
    349c:	1006d3fa 	srli	r3,r2,15
    34a0:	19401dc4 	addi	r5,r3,119
    34a4:	2947883a 	add	r3,r5,r5
    34a8:	003fa106 	br	3330 <__alt_mem_Flash_flash_data+0xf4003330>
    34ac:	01015504 	movi	r4,1364
    34b0:	20c00436 	bltu	r4,r3,34c4 <_free_r+0x2e4>
    34b4:	1006d4ba 	srli	r3,r2,18
    34b8:	19401f04 	addi	r5,r3,124
    34bc:	2947883a 	add	r3,r5,r5
    34c0:	003f9b06 	br	3330 <__alt_mem_Flash_flash_data+0xf4003330>
    34c4:	00c03f04 	movi	r3,252
    34c8:	01401f84 	movi	r5,126
    34cc:	003f9806 	br	3330 <__alt_mem_Flash_flash_data+0xf4003330>

000034d0 <_fwalk>:
    34d0:	defff704 	addi	sp,sp,-36
    34d4:	dd000415 	stw	r20,16(sp)
    34d8:	dfc00815 	stw	ra,32(sp)
    34dc:	ddc00715 	stw	r23,28(sp)
    34e0:	dd800615 	stw	r22,24(sp)
    34e4:	dd400515 	stw	r21,20(sp)
    34e8:	dcc00315 	stw	r19,12(sp)
    34ec:	dc800215 	stw	r18,8(sp)
    34f0:	dc400115 	stw	r17,4(sp)
    34f4:	dc000015 	stw	r16,0(sp)
    34f8:	2500b804 	addi	r20,r4,736
    34fc:	a0002326 	beq	r20,zero,358c <_fwalk+0xbc>
    3500:	282b883a 	mov	r21,r5
    3504:	002f883a 	mov	r23,zero
    3508:	05800044 	movi	r22,1
    350c:	04ffffc4 	movi	r19,-1
    3510:	a4400117 	ldw	r17,4(r20)
    3514:	a4800217 	ldw	r18,8(r20)
    3518:	8c7fffc4 	addi	r17,r17,-1
    351c:	88000d16 	blt	r17,zero,3554 <_fwalk+0x84>
    3520:	94000304 	addi	r16,r18,12
    3524:	94800384 	addi	r18,r18,14
    3528:	80c0000b 	ldhu	r3,0(r16)
    352c:	8c7fffc4 	addi	r17,r17,-1
    3530:	813ffd04 	addi	r4,r16,-12
    3534:	b0c0042e 	bgeu	r22,r3,3548 <_fwalk+0x78>
    3538:	90c0000f 	ldh	r3,0(r18)
    353c:	1cc00226 	beq	r3,r19,3548 <_fwalk+0x78>
    3540:	a83ee83a 	callr	r21
    3544:	b8aeb03a 	or	r23,r23,r2
    3548:	84001a04 	addi	r16,r16,104
    354c:	94801a04 	addi	r18,r18,104
    3550:	8cfff51e 	bne	r17,r19,3528 <__alt_mem_Flash_flash_data+0xf4003528>
    3554:	a5000017 	ldw	r20,0(r20)
    3558:	a03fed1e 	bne	r20,zero,3510 <__alt_mem_Flash_flash_data+0xf4003510>
    355c:	b805883a 	mov	r2,r23
    3560:	dfc00817 	ldw	ra,32(sp)
    3564:	ddc00717 	ldw	r23,28(sp)
    3568:	dd800617 	ldw	r22,24(sp)
    356c:	dd400517 	ldw	r21,20(sp)
    3570:	dd000417 	ldw	r20,16(sp)
    3574:	dcc00317 	ldw	r19,12(sp)
    3578:	dc800217 	ldw	r18,8(sp)
    357c:	dc400117 	ldw	r17,4(sp)
    3580:	dc000017 	ldw	r16,0(sp)
    3584:	dec00904 	addi	sp,sp,36
    3588:	f800283a 	ret
    358c:	002f883a 	mov	r23,zero
    3590:	003ff206 	br	355c <__alt_mem_Flash_flash_data+0xf400355c>

00003594 <_fwalk_reent>:
    3594:	defff704 	addi	sp,sp,-36
    3598:	dd400515 	stw	r21,20(sp)
    359c:	dfc00815 	stw	ra,32(sp)
    35a0:	ddc00715 	stw	r23,28(sp)
    35a4:	dd800615 	stw	r22,24(sp)
    35a8:	dd000415 	stw	r20,16(sp)
    35ac:	dcc00315 	stw	r19,12(sp)
    35b0:	dc800215 	stw	r18,8(sp)
    35b4:	dc400115 	stw	r17,4(sp)
    35b8:	dc000015 	stw	r16,0(sp)
    35bc:	2540b804 	addi	r21,r4,736
    35c0:	a8002326 	beq	r21,zero,3650 <_fwalk_reent+0xbc>
    35c4:	2829883a 	mov	r20,r5
    35c8:	202d883a 	mov	r22,r4
    35cc:	002f883a 	mov	r23,zero
    35d0:	04c00044 	movi	r19,1
    35d4:	04bfffc4 	movi	r18,-1
    35d8:	ac400117 	ldw	r17,4(r21)
    35dc:	ac000217 	ldw	r16,8(r21)
    35e0:	8c7fffc4 	addi	r17,r17,-1
    35e4:	88000c16 	blt	r17,zero,3618 <_fwalk_reent+0x84>
    35e8:	84000304 	addi	r16,r16,12
    35ec:	80c0000b 	ldhu	r3,0(r16)
    35f0:	8c7fffc4 	addi	r17,r17,-1
    35f4:	817ffd04 	addi	r5,r16,-12
    35f8:	98c0052e 	bgeu	r19,r3,3610 <_fwalk_reent+0x7c>
    35fc:	80c0008f 	ldh	r3,2(r16)
    3600:	b009883a 	mov	r4,r22
    3604:	1c800226 	beq	r3,r18,3610 <_fwalk_reent+0x7c>
    3608:	a03ee83a 	callr	r20
    360c:	b8aeb03a 	or	r23,r23,r2
    3610:	84001a04 	addi	r16,r16,104
    3614:	8cbff51e 	bne	r17,r18,35ec <__alt_mem_Flash_flash_data+0xf40035ec>
    3618:	ad400017 	ldw	r21,0(r21)
    361c:	a83fee1e 	bne	r21,zero,35d8 <__alt_mem_Flash_flash_data+0xf40035d8>
    3620:	b805883a 	mov	r2,r23
    3624:	dfc00817 	ldw	ra,32(sp)
    3628:	ddc00717 	ldw	r23,28(sp)
    362c:	dd800617 	ldw	r22,24(sp)
    3630:	dd400517 	ldw	r21,20(sp)
    3634:	dd000417 	ldw	r20,16(sp)
    3638:	dcc00317 	ldw	r19,12(sp)
    363c:	dc800217 	ldw	r18,8(sp)
    3640:	dc400117 	ldw	r17,4(sp)
    3644:	dc000017 	ldw	r16,0(sp)
    3648:	dec00904 	addi	sp,sp,36
    364c:	f800283a 	ret
    3650:	002f883a 	mov	r23,zero
    3654:	003ff206 	br	3620 <__alt_mem_Flash_flash_data+0xf4003620>

00003658 <__smakebuf_r>:
    3658:	2880030b 	ldhu	r2,12(r5)
    365c:	10c0008c 	andi	r3,r2,2
    3660:	1800401e 	bne	r3,zero,3764 <__smakebuf_r+0x10c>
    3664:	deffec04 	addi	sp,sp,-80
    3668:	dc000f15 	stw	r16,60(sp)
    366c:	2821883a 	mov	r16,r5
    3670:	2940038f 	ldh	r5,14(r5)
    3674:	dc401015 	stw	r17,64(sp)
    3678:	dfc01315 	stw	ra,76(sp)
    367c:	dcc01215 	stw	r19,72(sp)
    3680:	dc801115 	stw	r18,68(sp)
    3684:	2023883a 	mov	r17,r4
    3688:	28001b16 	blt	r5,zero,36f8 <__smakebuf_r+0xa0>
    368c:	d80d883a 	mov	r6,sp
    3690:	0003c240 	call	3c24 <_fstat_r>
    3694:	10001716 	blt	r2,zero,36f4 <__smakebuf_r+0x9c>
    3698:	d8800117 	ldw	r2,4(sp)
    369c:	00e00014 	movui	r3,32768
    36a0:	10bc000c 	andi	r2,r2,61440
    36a4:	10c03726 	beq	r2,r3,3784 <__smakebuf_r+0x12c>
    36a8:	80c0030b 	ldhu	r3,12(r16)
    36ac:	18c20014 	ori	r3,r3,2048
    36b0:	80c0030d 	sth	r3,12(r16)
    36b4:	00c80004 	movi	r3,8192
    36b8:	10c03c1e 	bne	r2,r3,37ac <__smakebuf_r+0x154>
    36bc:	8140038f 	ldh	r5,14(r16)
    36c0:	8809883a 	mov	r4,r17
    36c4:	0003c7c0 	call	3c7c <_isatty_r>
    36c8:	10004e26 	beq	r2,zero,3804 <__smakebuf_r+0x1ac>
    36cc:	8080030b 	ldhu	r2,12(r16)
    36d0:	04c00044 	movi	r19,1
    36d4:	80c010c4 	addi	r3,r16,67
    36d8:	14c4b03a 	or	r2,r2,r19
    36dc:	8080030d 	sth	r2,12(r16)
    36e0:	80c00015 	stw	r3,0(r16)
    36e4:	80c00415 	stw	r3,16(r16)
    36e8:	84c00515 	stw	r19,20(r16)
    36ec:	04810004 	movi	r18,1024
    36f0:	00000706 	br	3710 <__smakebuf_r+0xb8>
    36f4:	8080030b 	ldhu	r2,12(r16)
    36f8:	10c0200c 	andi	r3,r2,128
    36fc:	18001f1e 	bne	r3,zero,377c <__smakebuf_r+0x124>
    3700:	04810004 	movi	r18,1024
    3704:	10820014 	ori	r2,r2,2048
    3708:	8080030d 	sth	r2,12(r16)
    370c:	0027883a 	mov	r19,zero
    3710:	8809883a 	mov	r4,r17
    3714:	900b883a 	mov	r5,r18
    3718:	00018540 	call	1854 <_malloc_r>
    371c:	10002e26 	beq	r2,zero,37d8 <__smakebuf_r+0x180>
    3720:	80c0030b 	ldhu	r3,12(r16)
    3724:	01000034 	movhi	r4,0
    3728:	210b4b04 	addi	r4,r4,11564
    372c:	89000f15 	stw	r4,60(r17)
    3730:	18c02014 	ori	r3,r3,128
    3734:	80c0030d 	sth	r3,12(r16)
    3738:	80800015 	stw	r2,0(r16)
    373c:	80800415 	stw	r2,16(r16)
    3740:	84800515 	stw	r18,20(r16)
    3744:	98001c1e 	bne	r19,zero,37b8 <__smakebuf_r+0x160>
    3748:	dfc01317 	ldw	ra,76(sp)
    374c:	dcc01217 	ldw	r19,72(sp)
    3750:	dc801117 	ldw	r18,68(sp)
    3754:	dc401017 	ldw	r17,64(sp)
    3758:	dc000f17 	ldw	r16,60(sp)
    375c:	dec01404 	addi	sp,sp,80
    3760:	f800283a 	ret
    3764:	288010c4 	addi	r2,r5,67
    3768:	28800015 	stw	r2,0(r5)
    376c:	28800415 	stw	r2,16(r5)
    3770:	00800044 	movi	r2,1
    3774:	28800515 	stw	r2,20(r5)
    3778:	f800283a 	ret
    377c:	04801004 	movi	r18,64
    3780:	003fe006 	br	3704 <__alt_mem_Flash_flash_data+0xf4003704>
    3784:	81000a17 	ldw	r4,40(r16)
    3788:	00c00034 	movhi	r3,0
    378c:	18ce8304 	addi	r3,r3,14860
    3790:	20ffc51e 	bne	r4,r3,36a8 <__alt_mem_Flash_flash_data+0xf40036a8>
    3794:	80c0030b 	ldhu	r3,12(r16)
    3798:	01010004 	movi	r4,1024
    379c:	81001315 	stw	r4,76(r16)
    37a0:	1906b03a 	or	r3,r3,r4
    37a4:	80c0030d 	sth	r3,12(r16)
    37a8:	003fc206 	br	36b4 <__alt_mem_Flash_flash_data+0xf40036b4>
    37ac:	0027883a 	mov	r19,zero
    37b0:	04810004 	movi	r18,1024
    37b4:	003fd606 	br	3710 <__alt_mem_Flash_flash_data+0xf4003710>
    37b8:	8140038f 	ldh	r5,14(r16)
    37bc:	8809883a 	mov	r4,r17
    37c0:	0003c7c0 	call	3c7c <_isatty_r>
    37c4:	103fe026 	beq	r2,zero,3748 <__alt_mem_Flash_flash_data+0xf4003748>
    37c8:	8080030b 	ldhu	r2,12(r16)
    37cc:	10800054 	ori	r2,r2,1
    37d0:	8080030d 	sth	r2,12(r16)
    37d4:	003fdc06 	br	3748 <__alt_mem_Flash_flash_data+0xf4003748>
    37d8:	8080030b 	ldhu	r2,12(r16)
    37dc:	10c0800c 	andi	r3,r2,512
    37e0:	183fd91e 	bne	r3,zero,3748 <__alt_mem_Flash_flash_data+0xf4003748>
    37e4:	10800094 	ori	r2,r2,2
    37e8:	80c010c4 	addi	r3,r16,67
    37ec:	8080030d 	sth	r2,12(r16)
    37f0:	00800044 	movi	r2,1
    37f4:	80c00015 	stw	r3,0(r16)
    37f8:	80c00415 	stw	r3,16(r16)
    37fc:	80800515 	stw	r2,20(r16)
    3800:	003fd106 	br	3748 <__alt_mem_Flash_flash_data+0xf4003748>
    3804:	04c00044 	movi	r19,1
    3808:	04810004 	movi	r18,1024
    380c:	003fc006 	br	3710 <__alt_mem_Flash_flash_data+0xf4003710>

00003810 <memset>:
    3810:	20c000cc 	andi	r3,r4,3
    3814:	2005883a 	mov	r2,r4
    3818:	18004326 	beq	r3,zero,3928 <memset+0x118>
    381c:	31ffffc4 	addi	r7,r6,-1
    3820:	30004026 	beq	r6,zero,3924 <memset+0x114>
    3824:	2813883a 	mov	r9,r5
    3828:	200d883a 	mov	r6,r4
    382c:	2007883a 	mov	r3,r4
    3830:	00000406 	br	3844 <memset+0x34>
    3834:	3a3fffc4 	addi	r8,r7,-1
    3838:	31800044 	addi	r6,r6,1
    383c:	38003926 	beq	r7,zero,3924 <memset+0x114>
    3840:	400f883a 	mov	r7,r8
    3844:	18c00044 	addi	r3,r3,1
    3848:	32400005 	stb	r9,0(r6)
    384c:	1a0000cc 	andi	r8,r3,3
    3850:	403ff81e 	bne	r8,zero,3834 <__alt_mem_Flash_flash_data+0xf4003834>
    3854:	010000c4 	movi	r4,3
    3858:	21c02d2e 	bgeu	r4,r7,3910 <memset+0x100>
    385c:	29803fcc 	andi	r6,r5,255
    3860:	3008923a 	slli	r4,r6,8
    3864:	218cb03a 	or	r6,r4,r6
    3868:	3008943a 	slli	r4,r6,16
    386c:	218cb03a 	or	r6,r4,r6
    3870:	010003c4 	movi	r4,15
    3874:	21c0182e 	bgeu	r4,r7,38d8 <memset+0xc8>
    3878:	3b3ffc04 	addi	r12,r7,-16
    387c:	6018d13a 	srli	r12,r12,4
    3880:	1a000104 	addi	r8,r3,4
    3884:	1ac00204 	addi	r11,r3,8
    3888:	6008913a 	slli	r4,r12,4
    388c:	1a800304 	addi	r10,r3,12
    3890:	1813883a 	mov	r9,r3
    3894:	21000504 	addi	r4,r4,20
    3898:	1909883a 	add	r4,r3,r4
    389c:	49800015 	stw	r6,0(r9)
    38a0:	41800015 	stw	r6,0(r8)
    38a4:	59800015 	stw	r6,0(r11)
    38a8:	51800015 	stw	r6,0(r10)
    38ac:	42000404 	addi	r8,r8,16
    38b0:	4a400404 	addi	r9,r9,16
    38b4:	5ac00404 	addi	r11,r11,16
    38b8:	52800404 	addi	r10,r10,16
    38bc:	413ff71e 	bne	r8,r4,389c <__alt_mem_Flash_flash_data+0xf400389c>
    38c0:	63000044 	addi	r12,r12,1
    38c4:	6018913a 	slli	r12,r12,4
    38c8:	39c003cc 	andi	r7,r7,15
    38cc:	010000c4 	movi	r4,3
    38d0:	1b07883a 	add	r3,r3,r12
    38d4:	21c00e2e 	bgeu	r4,r7,3910 <memset+0x100>
    38d8:	1813883a 	mov	r9,r3
    38dc:	3811883a 	mov	r8,r7
    38e0:	010000c4 	movi	r4,3
    38e4:	49800015 	stw	r6,0(r9)
    38e8:	423fff04 	addi	r8,r8,-4
    38ec:	4a400104 	addi	r9,r9,4
    38f0:	223ffc36 	bltu	r4,r8,38e4 <__alt_mem_Flash_flash_data+0xf40038e4>
    38f4:	393fff04 	addi	r4,r7,-4
    38f8:	2008d0ba 	srli	r4,r4,2
    38fc:	39c000cc 	andi	r7,r7,3
    3900:	21000044 	addi	r4,r4,1
    3904:	2109883a 	add	r4,r4,r4
    3908:	2109883a 	add	r4,r4,r4
    390c:	1907883a 	add	r3,r3,r4
    3910:	38000426 	beq	r7,zero,3924 <memset+0x114>
    3914:	19cf883a 	add	r7,r3,r7
    3918:	19400005 	stb	r5,0(r3)
    391c:	18c00044 	addi	r3,r3,1
    3920:	19fffd1e 	bne	r3,r7,3918 <__alt_mem_Flash_flash_data+0xf4003918>
    3924:	f800283a 	ret
    3928:	2007883a 	mov	r3,r4
    392c:	300f883a 	mov	r7,r6
    3930:	003fc806 	br	3854 <__alt_mem_Flash_flash_data+0xf4003854>

00003934 <__sread>:
    3934:	defffe04 	addi	sp,sp,-8
    3938:	dc000015 	stw	r16,0(sp)
    393c:	2821883a 	mov	r16,r5
    3940:	2940038f 	ldh	r5,14(r5)
    3944:	dfc00115 	stw	ra,4(sp)
    3948:	0003d2c0 	call	3d2c <_read_r>
    394c:	10000716 	blt	r2,zero,396c <__sread+0x38>
    3950:	80c01417 	ldw	r3,80(r16)
    3954:	1887883a 	add	r3,r3,r2
    3958:	80c01415 	stw	r3,80(r16)
    395c:	dfc00117 	ldw	ra,4(sp)
    3960:	dc000017 	ldw	r16,0(sp)
    3964:	dec00204 	addi	sp,sp,8
    3968:	f800283a 	ret
    396c:	80c0030b 	ldhu	r3,12(r16)
    3970:	18fbffcc 	andi	r3,r3,61439
    3974:	80c0030d 	sth	r3,12(r16)
    3978:	dfc00117 	ldw	ra,4(sp)
    397c:	dc000017 	ldw	r16,0(sp)
    3980:	dec00204 	addi	sp,sp,8
    3984:	f800283a 	ret

00003988 <__seofread>:
    3988:	0005883a 	mov	r2,zero
    398c:	f800283a 	ret

00003990 <__swrite>:
    3990:	2880030b 	ldhu	r2,12(r5)
    3994:	defffb04 	addi	sp,sp,-20
    3998:	dcc00315 	stw	r19,12(sp)
    399c:	dc800215 	stw	r18,8(sp)
    39a0:	dc400115 	stw	r17,4(sp)
    39a4:	dc000015 	stw	r16,0(sp)
    39a8:	dfc00415 	stw	ra,16(sp)
    39ac:	10c0400c 	andi	r3,r2,256
    39b0:	2821883a 	mov	r16,r5
    39b4:	2027883a 	mov	r19,r4
    39b8:	3025883a 	mov	r18,r6
    39bc:	3823883a 	mov	r17,r7
    39c0:	18000526 	beq	r3,zero,39d8 <__swrite+0x48>
    39c4:	2940038f 	ldh	r5,14(r5)
    39c8:	000d883a 	mov	r6,zero
    39cc:	01c00084 	movi	r7,2
    39d0:	0003cd00 	call	3cd0 <_lseek_r>
    39d4:	8080030b 	ldhu	r2,12(r16)
    39d8:	8140038f 	ldh	r5,14(r16)
    39dc:	10bbffcc 	andi	r2,r2,61439
    39e0:	9809883a 	mov	r4,r19
    39e4:	900d883a 	mov	r6,r18
    39e8:	880f883a 	mov	r7,r17
    39ec:	8080030d 	sth	r2,12(r16)
    39f0:	dfc00417 	ldw	ra,16(sp)
    39f4:	dcc00317 	ldw	r19,12(sp)
    39f8:	dc800217 	ldw	r18,8(sp)
    39fc:	dc400117 	ldw	r17,4(sp)
    3a00:	dc000017 	ldw	r16,0(sp)
    3a04:	dec00504 	addi	sp,sp,20
    3a08:	0003a701 	jmpi	3a70 <_write_r>

00003a0c <__sseek>:
    3a0c:	defffe04 	addi	sp,sp,-8
    3a10:	dc000015 	stw	r16,0(sp)
    3a14:	2821883a 	mov	r16,r5
    3a18:	2940038f 	ldh	r5,14(r5)
    3a1c:	dfc00115 	stw	ra,4(sp)
    3a20:	0003cd00 	call	3cd0 <_lseek_r>
    3a24:	00ffffc4 	movi	r3,-1
    3a28:	10c00826 	beq	r2,r3,3a4c <__sseek+0x40>
    3a2c:	80c0030b 	ldhu	r3,12(r16)
    3a30:	80801415 	stw	r2,80(r16)
    3a34:	18c40014 	ori	r3,r3,4096
    3a38:	80c0030d 	sth	r3,12(r16)
    3a3c:	dfc00117 	ldw	ra,4(sp)
    3a40:	dc000017 	ldw	r16,0(sp)
    3a44:	dec00204 	addi	sp,sp,8
    3a48:	f800283a 	ret
    3a4c:	80c0030b 	ldhu	r3,12(r16)
    3a50:	18fbffcc 	andi	r3,r3,61439
    3a54:	80c0030d 	sth	r3,12(r16)
    3a58:	dfc00117 	ldw	ra,4(sp)
    3a5c:	dc000017 	ldw	r16,0(sp)
    3a60:	dec00204 	addi	sp,sp,8
    3a64:	f800283a 	ret

00003a68 <__sclose>:
    3a68:	2940038f 	ldh	r5,14(r5)
    3a6c:	0003acc1 	jmpi	3acc <_close_r>

00003a70 <_write_r>:
    3a70:	defffd04 	addi	sp,sp,-12
    3a74:	dc000015 	stw	r16,0(sp)
    3a78:	04000074 	movhi	r16,1
    3a7c:	dc400115 	stw	r17,4(sp)
    3a80:	8411b704 	addi	r16,r16,18140
    3a84:	2023883a 	mov	r17,r4
    3a88:	2809883a 	mov	r4,r5
    3a8c:	300b883a 	mov	r5,r6
    3a90:	380d883a 	mov	r6,r7
    3a94:	dfc00215 	stw	ra,8(sp)
    3a98:	80000015 	stw	zero,0(r16)
    3a9c:	000477c0 	call	477c <write>
    3aa0:	00ffffc4 	movi	r3,-1
    3aa4:	10c00526 	beq	r2,r3,3abc <_write_r+0x4c>
    3aa8:	dfc00217 	ldw	ra,8(sp)
    3aac:	dc400117 	ldw	r17,4(sp)
    3ab0:	dc000017 	ldw	r16,0(sp)
    3ab4:	dec00304 	addi	sp,sp,12
    3ab8:	f800283a 	ret
    3abc:	80c00017 	ldw	r3,0(r16)
    3ac0:	183ff926 	beq	r3,zero,3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    3ac4:	88c00015 	stw	r3,0(r17)
    3ac8:	003ff706 	br	3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>

00003acc <_close_r>:
    3acc:	defffd04 	addi	sp,sp,-12
    3ad0:	dc000015 	stw	r16,0(sp)
    3ad4:	04000074 	movhi	r16,1
    3ad8:	dc400115 	stw	r17,4(sp)
    3adc:	8411b704 	addi	r16,r16,18140
    3ae0:	2023883a 	mov	r17,r4
    3ae4:	2809883a 	mov	r4,r5
    3ae8:	dfc00215 	stw	ra,8(sp)
    3aec:	80000015 	stw	zero,0(r16)
    3af0:	0003f040 	call	3f04 <close>
    3af4:	00ffffc4 	movi	r3,-1
    3af8:	10c00526 	beq	r2,r3,3b10 <_close_r+0x44>
    3afc:	dfc00217 	ldw	ra,8(sp)
    3b00:	dc400117 	ldw	r17,4(sp)
    3b04:	dc000017 	ldw	r16,0(sp)
    3b08:	dec00304 	addi	sp,sp,12
    3b0c:	f800283a 	ret
    3b10:	80c00017 	ldw	r3,0(r16)
    3b14:	183ff926 	beq	r3,zero,3afc <__alt_mem_Flash_flash_data+0xf4003afc>
    3b18:	88c00015 	stw	r3,0(r17)
    3b1c:	003ff706 	br	3afc <__alt_mem_Flash_flash_data+0xf4003afc>

00003b20 <_fclose_r>:
    3b20:	28003926 	beq	r5,zero,3c08 <_fclose_r+0xe8>
    3b24:	defffc04 	addi	sp,sp,-16
    3b28:	dc400115 	stw	r17,4(sp)
    3b2c:	dc000015 	stw	r16,0(sp)
    3b30:	dfc00315 	stw	ra,12(sp)
    3b34:	dc800215 	stw	r18,8(sp)
    3b38:	2023883a 	mov	r17,r4
    3b3c:	2821883a 	mov	r16,r5
    3b40:	20000226 	beq	r4,zero,3b4c <_fclose_r+0x2c>
    3b44:	20800e17 	ldw	r2,56(r4)
    3b48:	10002726 	beq	r2,zero,3be8 <_fclose_r+0xc8>
    3b4c:	8080030f 	ldh	r2,12(r16)
    3b50:	1000071e 	bne	r2,zero,3b70 <_fclose_r+0x50>
    3b54:	0005883a 	mov	r2,zero
    3b58:	dfc00317 	ldw	ra,12(sp)
    3b5c:	dc800217 	ldw	r18,8(sp)
    3b60:	dc400117 	ldw	r17,4(sp)
    3b64:	dc000017 	ldw	r16,0(sp)
    3b68:	dec00404 	addi	sp,sp,16
    3b6c:	f800283a 	ret
    3b70:	8809883a 	mov	r4,r17
    3b74:	800b883a 	mov	r5,r16
    3b78:	0002a880 	call	2a88 <__sflush_r>
    3b7c:	1025883a 	mov	r18,r2
    3b80:	80800b17 	ldw	r2,44(r16)
    3b84:	10000426 	beq	r2,zero,3b98 <_fclose_r+0x78>
    3b88:	81400717 	ldw	r5,28(r16)
    3b8c:	8809883a 	mov	r4,r17
    3b90:	103ee83a 	callr	r2
    3b94:	10001616 	blt	r2,zero,3bf0 <_fclose_r+0xd0>
    3b98:	8080030b 	ldhu	r2,12(r16)
    3b9c:	1080200c 	andi	r2,r2,128
    3ba0:	1000151e 	bne	r2,zero,3bf8 <_fclose_r+0xd8>
    3ba4:	81400c17 	ldw	r5,48(r16)
    3ba8:	28000526 	beq	r5,zero,3bc0 <_fclose_r+0xa0>
    3bac:	80801004 	addi	r2,r16,64
    3bb0:	28800226 	beq	r5,r2,3bbc <_fclose_r+0x9c>
    3bb4:	8809883a 	mov	r4,r17
    3bb8:	00031e00 	call	31e0 <_free_r>
    3bbc:	80000c15 	stw	zero,48(r16)
    3bc0:	81401117 	ldw	r5,68(r16)
    3bc4:	28000326 	beq	r5,zero,3bd4 <_fclose_r+0xb4>
    3bc8:	8809883a 	mov	r4,r17
    3bcc:	00031e00 	call	31e0 <_free_r>
    3bd0:	80001115 	stw	zero,68(r16)
    3bd4:	000307c0 	call	307c <__sfp_lock_acquire>
    3bd8:	8000030d 	sth	zero,12(r16)
    3bdc:	00030800 	call	3080 <__sfp_lock_release>
    3be0:	9005883a 	mov	r2,r18
    3be4:	003fdc06 	br	3b58 <__alt_mem_Flash_flash_data+0xf4003b58>
    3be8:	000306c0 	call	306c <__sinit>
    3bec:	003fd706 	br	3b4c <__alt_mem_Flash_flash_data+0xf4003b4c>
    3bf0:	04bfffc4 	movi	r18,-1
    3bf4:	003fe806 	br	3b98 <__alt_mem_Flash_flash_data+0xf4003b98>
    3bf8:	81400417 	ldw	r5,16(r16)
    3bfc:	8809883a 	mov	r4,r17
    3c00:	00031e00 	call	31e0 <_free_r>
    3c04:	003fe706 	br	3ba4 <__alt_mem_Flash_flash_data+0xf4003ba4>
    3c08:	0005883a 	mov	r2,zero
    3c0c:	f800283a 	ret

00003c10 <fclose>:
    3c10:	00800074 	movhi	r2,1
    3c14:	1089cc04 	addi	r2,r2,10032
    3c18:	200b883a 	mov	r5,r4
    3c1c:	11000017 	ldw	r4,0(r2)
    3c20:	0003b201 	jmpi	3b20 <_fclose_r>

00003c24 <_fstat_r>:
    3c24:	defffd04 	addi	sp,sp,-12
    3c28:	dc000015 	stw	r16,0(sp)
    3c2c:	04000074 	movhi	r16,1
    3c30:	dc400115 	stw	r17,4(sp)
    3c34:	8411b704 	addi	r16,r16,18140
    3c38:	2023883a 	mov	r17,r4
    3c3c:	2809883a 	mov	r4,r5
    3c40:	300b883a 	mov	r5,r6
    3c44:	dfc00215 	stw	ra,8(sp)
    3c48:	80000015 	stw	zero,0(r16)
    3c4c:	00040500 	call	4050 <fstat>
    3c50:	00ffffc4 	movi	r3,-1
    3c54:	10c00526 	beq	r2,r3,3c6c <_fstat_r+0x48>
    3c58:	dfc00217 	ldw	ra,8(sp)
    3c5c:	dc400117 	ldw	r17,4(sp)
    3c60:	dc000017 	ldw	r16,0(sp)
    3c64:	dec00304 	addi	sp,sp,12
    3c68:	f800283a 	ret
    3c6c:	80c00017 	ldw	r3,0(r16)
    3c70:	183ff926 	beq	r3,zero,3c58 <__alt_mem_Flash_flash_data+0xf4003c58>
    3c74:	88c00015 	stw	r3,0(r17)
    3c78:	003ff706 	br	3c58 <__alt_mem_Flash_flash_data+0xf4003c58>

00003c7c <_isatty_r>:
    3c7c:	defffd04 	addi	sp,sp,-12
    3c80:	dc000015 	stw	r16,0(sp)
    3c84:	04000074 	movhi	r16,1
    3c88:	dc400115 	stw	r17,4(sp)
    3c8c:	8411b704 	addi	r16,r16,18140
    3c90:	2023883a 	mov	r17,r4
    3c94:	2809883a 	mov	r4,r5
    3c98:	dfc00215 	stw	ra,8(sp)
    3c9c:	80000015 	stw	zero,0(r16)
    3ca0:	00041500 	call	4150 <isatty>
    3ca4:	00ffffc4 	movi	r3,-1
    3ca8:	10c00526 	beq	r2,r3,3cc0 <_isatty_r+0x44>
    3cac:	dfc00217 	ldw	ra,8(sp)
    3cb0:	dc400117 	ldw	r17,4(sp)
    3cb4:	dc000017 	ldw	r16,0(sp)
    3cb8:	dec00304 	addi	sp,sp,12
    3cbc:	f800283a 	ret
    3cc0:	80c00017 	ldw	r3,0(r16)
    3cc4:	183ff926 	beq	r3,zero,3cac <__alt_mem_Flash_flash_data+0xf4003cac>
    3cc8:	88c00015 	stw	r3,0(r17)
    3ccc:	003ff706 	br	3cac <__alt_mem_Flash_flash_data+0xf4003cac>

00003cd0 <_lseek_r>:
    3cd0:	defffd04 	addi	sp,sp,-12
    3cd4:	dc000015 	stw	r16,0(sp)
    3cd8:	04000074 	movhi	r16,1
    3cdc:	dc400115 	stw	r17,4(sp)
    3ce0:	8411b704 	addi	r16,r16,18140
    3ce4:	2023883a 	mov	r17,r4
    3ce8:	2809883a 	mov	r4,r5
    3cec:	300b883a 	mov	r5,r6
    3cf0:	380d883a 	mov	r6,r7
    3cf4:	dfc00215 	stw	ra,8(sp)
    3cf8:	80000015 	stw	zero,0(r16)
    3cfc:	00043280 	call	4328 <lseek>
    3d00:	00ffffc4 	movi	r3,-1
    3d04:	10c00526 	beq	r2,r3,3d1c <_lseek_r+0x4c>
    3d08:	dfc00217 	ldw	ra,8(sp)
    3d0c:	dc400117 	ldw	r17,4(sp)
    3d10:	dc000017 	ldw	r16,0(sp)
    3d14:	dec00304 	addi	sp,sp,12
    3d18:	f800283a 	ret
    3d1c:	80c00017 	ldw	r3,0(r16)
    3d20:	183ff926 	beq	r3,zero,3d08 <__alt_mem_Flash_flash_data+0xf4003d08>
    3d24:	88c00015 	stw	r3,0(r17)
    3d28:	003ff706 	br	3d08 <__alt_mem_Flash_flash_data+0xf4003d08>

00003d2c <_read_r>:
    3d2c:	defffd04 	addi	sp,sp,-12
    3d30:	dc000015 	stw	r16,0(sp)
    3d34:	04000074 	movhi	r16,1
    3d38:	dc400115 	stw	r17,4(sp)
    3d3c:	8411b704 	addi	r16,r16,18140
    3d40:	2023883a 	mov	r17,r4
    3d44:	2809883a 	mov	r4,r5
    3d48:	300b883a 	mov	r5,r6
    3d4c:	380d883a 	mov	r6,r7
    3d50:	dfc00215 	stw	ra,8(sp)
    3d54:	80000015 	stw	zero,0(r16)
    3d58:	00045200 	call	4520 <read>
    3d5c:	00ffffc4 	movi	r3,-1
    3d60:	10c00526 	beq	r2,r3,3d78 <_read_r+0x4c>
    3d64:	dfc00217 	ldw	ra,8(sp)
    3d68:	dc400117 	ldw	r17,4(sp)
    3d6c:	dc000017 	ldw	r16,0(sp)
    3d70:	dec00304 	addi	sp,sp,12
    3d74:	f800283a 	ret
    3d78:	80c00017 	ldw	r3,0(r16)
    3d7c:	183ff926 	beq	r3,zero,3d64 <__alt_mem_Flash_flash_data+0xf4003d64>
    3d80:	88c00015 	stw	r3,0(r17)
    3d84:	003ff706 	br	3d64 <__alt_mem_Flash_flash_data+0xf4003d64>

00003d88 <udivmodsi4>:
    3d88:	2900182e 	bgeu	r5,r4,3dec <udivmodsi4+0x64>
    3d8c:	28001716 	blt	r5,zero,3dec <udivmodsi4+0x64>
    3d90:	00800804 	movi	r2,32
    3d94:	00c00044 	movi	r3,1
    3d98:	00000206 	br	3da4 <udivmodsi4+0x1c>
    3d9c:	10001126 	beq	r2,zero,3de4 <udivmodsi4+0x5c>
    3da0:	28000516 	blt	r5,zero,3db8 <udivmodsi4+0x30>
    3da4:	294b883a 	add	r5,r5,r5
    3da8:	10bfffc4 	addi	r2,r2,-1
    3dac:	18c7883a 	add	r3,r3,r3
    3db0:	293ffa36 	bltu	r5,r4,3d9c <__alt_mem_Flash_flash_data+0xf4003d9c>
    3db4:	18000b26 	beq	r3,zero,3de4 <udivmodsi4+0x5c>
    3db8:	0005883a 	mov	r2,zero
    3dbc:	21400236 	bltu	r4,r5,3dc8 <udivmodsi4+0x40>
    3dc0:	2149c83a 	sub	r4,r4,r5
    3dc4:	10c4b03a 	or	r2,r2,r3
    3dc8:	1806d07a 	srli	r3,r3,1
    3dcc:	280ad07a 	srli	r5,r5,1
    3dd0:	183ffa1e 	bne	r3,zero,3dbc <__alt_mem_Flash_flash_data+0xf4003dbc>
    3dd4:	3000011e 	bne	r6,zero,3ddc <udivmodsi4+0x54>
    3dd8:	f800283a 	ret
    3ddc:	2005883a 	mov	r2,r4
    3de0:	f800283a 	ret
    3de4:	0005883a 	mov	r2,zero
    3de8:	003ffa06 	br	3dd4 <__alt_mem_Flash_flash_data+0xf4003dd4>
    3dec:	00c00044 	movi	r3,1
    3df0:	003ff106 	br	3db8 <__alt_mem_Flash_flash_data+0xf4003db8>

00003df4 <__divsi3>:
    3df4:	defffe04 	addi	sp,sp,-8
    3df8:	dfc00115 	stw	ra,4(sp)
    3dfc:	dc000015 	stw	r16,0(sp)
    3e00:	20000b16 	blt	r4,zero,3e30 <__divsi3+0x3c>
    3e04:	0021883a 	mov	r16,zero
    3e08:	28000c16 	blt	r5,zero,3e3c <__divsi3+0x48>
    3e0c:	000d883a 	mov	r6,zero
    3e10:	0003d880 	call	3d88 <udivmodsi4>
    3e14:	0407c83a 	sub	r3,zero,r16
    3e18:	1884f03a 	xor	r2,r3,r2
    3e1c:	1405883a 	add	r2,r2,r16
    3e20:	dfc00117 	ldw	ra,4(sp)
    3e24:	dc000017 	ldw	r16,0(sp)
    3e28:	dec00204 	addi	sp,sp,8
    3e2c:	f800283a 	ret
    3e30:	0109c83a 	sub	r4,zero,r4
    3e34:	04000044 	movi	r16,1
    3e38:	283ff40e 	bge	r5,zero,3e0c <__alt_mem_Flash_flash_data+0xf4003e0c>
    3e3c:	014bc83a 	sub	r5,zero,r5
    3e40:	8400005c 	xori	r16,r16,1
    3e44:	003ff106 	br	3e0c <__alt_mem_Flash_flash_data+0xf4003e0c>

00003e48 <__modsi3>:
    3e48:	defffd04 	addi	sp,sp,-12
    3e4c:	dfc00215 	stw	ra,8(sp)
    3e50:	dc400115 	stw	r17,4(sp)
    3e54:	dc000015 	stw	r16,0(sp)
    3e58:	20000c16 	blt	r4,zero,3e8c <__modsi3+0x44>
    3e5c:	0023883a 	mov	r17,zero
    3e60:	0021883a 	mov	r16,zero
    3e64:	28000d16 	blt	r5,zero,3e9c <__modsi3+0x54>
    3e68:	01800044 	movi	r6,1
    3e6c:	0003d880 	call	3d88 <udivmodsi4>
    3e70:	1404f03a 	xor	r2,r2,r16
    3e74:	8885883a 	add	r2,r17,r2
    3e78:	dfc00217 	ldw	ra,8(sp)
    3e7c:	dc400117 	ldw	r17,4(sp)
    3e80:	dc000017 	ldw	r16,0(sp)
    3e84:	dec00304 	addi	sp,sp,12
    3e88:	f800283a 	ret
    3e8c:	0109c83a 	sub	r4,zero,r4
    3e90:	04400044 	movi	r17,1
    3e94:	043fffc4 	movi	r16,-1
    3e98:	283ff30e 	bge	r5,zero,3e68 <__alt_mem_Flash_flash_data+0xf4003e68>
    3e9c:	014bc83a 	sub	r5,zero,r5
    3ea0:	003ff106 	br	3e68 <__alt_mem_Flash_flash_data+0xf4003e68>

00003ea4 <__udivsi3>:
    3ea4:	000d883a 	mov	r6,zero
    3ea8:	0003d881 	jmpi	3d88 <udivmodsi4>

00003eac <__umodsi3>:
    3eac:	01800044 	movi	r6,1
    3eb0:	0003d881 	jmpi	3d88 <udivmodsi4>

00003eb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3eb4:	defffe04 	addi	sp,sp,-8
    3eb8:	dfc00115 	stw	ra,4(sp)
    3ebc:	df000015 	stw	fp,0(sp)
    3ec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3ec4:	00800074 	movhi	r2,1
    3ec8:	1089d404 	addi	r2,r2,10064
    3ecc:	10800017 	ldw	r2,0(r2)
    3ed0:	10000526 	beq	r2,zero,3ee8 <alt_get_errno+0x34>
    3ed4:	00800074 	movhi	r2,1
    3ed8:	1089d404 	addi	r2,r2,10064
    3edc:	10800017 	ldw	r2,0(r2)
    3ee0:	103ee83a 	callr	r2
    3ee4:	00000206 	br	3ef0 <alt_get_errno+0x3c>
    3ee8:	00800074 	movhi	r2,1
    3eec:	1091b704 	addi	r2,r2,18140
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	dfc00117 	ldw	ra,4(sp)
    3ef8:	df000017 	ldw	fp,0(sp)
    3efc:	dec00204 	addi	sp,sp,8
    3f00:	f800283a 	ret

00003f04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3f04:	defffb04 	addi	sp,sp,-20
    3f08:	dfc00415 	stw	ra,16(sp)
    3f0c:	df000315 	stw	fp,12(sp)
    3f10:	df000304 	addi	fp,sp,12
    3f14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    3f18:	e0bfff17 	ldw	r2,-4(fp)
    3f1c:	10000616 	blt	r2,zero,3f38 <close+0x34>
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10c00324 	muli	r3,r2,12
    3f28:	00800074 	movhi	r2,1
    3f2c:	10846504 	addi	r2,r2,4500
    3f30:	1885883a 	add	r2,r3,r2
    3f34:	00000106 	br	3f3c <close+0x38>
    3f38:	0005883a 	mov	r2,zero
    3f3c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10001926 	beq	r2,zero,3fac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    3f48:	e0bffd17 	ldw	r2,-12(fp)
    3f4c:	10800017 	ldw	r2,0(r2)
    3f50:	10800417 	ldw	r2,16(r2)
    3f54:	10000626 	beq	r2,zero,3f70 <close+0x6c>
    3f58:	e0bffd17 	ldw	r2,-12(fp)
    3f5c:	10800017 	ldw	r2,0(r2)
    3f60:	10800417 	ldw	r2,16(r2)
    3f64:	e13ffd17 	ldw	r4,-12(fp)
    3f68:	103ee83a 	callr	r2
    3f6c:	00000106 	br	3f74 <close+0x70>
    3f70:	0005883a 	mov	r2,zero
    3f74:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3f78:	e13fff17 	ldw	r4,-4(fp)
    3f7c:	000461c0 	call	461c <alt_release_fd>
    if (rval < 0)
    3f80:	e0bffe17 	ldw	r2,-8(fp)
    3f84:	1000070e 	bge	r2,zero,3fa4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    3f88:	0003eb40 	call	3eb4 <alt_get_errno>
    3f8c:	1007883a 	mov	r3,r2
    3f90:	e0bffe17 	ldw	r2,-8(fp)
    3f94:	0085c83a 	sub	r2,zero,r2
    3f98:	18800015 	stw	r2,0(r3)
      return -1;
    3f9c:	00bfffc4 	movi	r2,-1
    3fa0:	00000706 	br	3fc0 <close+0xbc>
    }
    return 0;
    3fa4:	0005883a 	mov	r2,zero
    3fa8:	00000506 	br	3fc0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3fac:	0003eb40 	call	3eb4 <alt_get_errno>
    3fb0:	1007883a 	mov	r3,r2
    3fb4:	00801444 	movi	r2,81
    3fb8:	18800015 	stw	r2,0(r3)
    return -1;
    3fbc:	00bfffc4 	movi	r2,-1
  }
}
    3fc0:	e037883a 	mov	sp,fp
    3fc4:	dfc00117 	ldw	ra,4(sp)
    3fc8:	df000017 	ldw	fp,0(sp)
    3fcc:	dec00204 	addi	sp,sp,8
    3fd0:	f800283a 	ret

00003fd4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3fd4:	defffc04 	addi	sp,sp,-16
    3fd8:	df000315 	stw	fp,12(sp)
    3fdc:	df000304 	addi	fp,sp,12
    3fe0:	e13ffd15 	stw	r4,-12(fp)
    3fe4:	e17ffe15 	stw	r5,-8(fp)
    3fe8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    3fec:	e0bfff17 	ldw	r2,-4(fp)
}
    3ff0:	e037883a 	mov	sp,fp
    3ff4:	df000017 	ldw	fp,0(sp)
    3ff8:	dec00104 	addi	sp,sp,4
    3ffc:	f800283a 	ret

00004000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4000:	defffe04 	addi	sp,sp,-8
    4004:	dfc00115 	stw	ra,4(sp)
    4008:	df000015 	stw	fp,0(sp)
    400c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4010:	00800074 	movhi	r2,1
    4014:	1089d404 	addi	r2,r2,10064
    4018:	10800017 	ldw	r2,0(r2)
    401c:	10000526 	beq	r2,zero,4034 <alt_get_errno+0x34>
    4020:	00800074 	movhi	r2,1
    4024:	1089d404 	addi	r2,r2,10064
    4028:	10800017 	ldw	r2,0(r2)
    402c:	103ee83a 	callr	r2
    4030:	00000206 	br	403c <alt_get_errno+0x3c>
    4034:	00800074 	movhi	r2,1
    4038:	1091b704 	addi	r2,r2,18140
}
    403c:	e037883a 	mov	sp,fp
    4040:	dfc00117 	ldw	ra,4(sp)
    4044:	df000017 	ldw	fp,0(sp)
    4048:	dec00204 	addi	sp,sp,8
    404c:	f800283a 	ret

00004050 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4050:	defffb04 	addi	sp,sp,-20
    4054:	dfc00415 	stw	ra,16(sp)
    4058:	df000315 	stw	fp,12(sp)
    405c:	df000304 	addi	fp,sp,12
    4060:	e13ffe15 	stw	r4,-8(fp)
    4064:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4068:	e0bffe17 	ldw	r2,-8(fp)
    406c:	10000616 	blt	r2,zero,4088 <fstat+0x38>
    4070:	e0bffe17 	ldw	r2,-8(fp)
    4074:	10c00324 	muli	r3,r2,12
    4078:	00800074 	movhi	r2,1
    407c:	10846504 	addi	r2,r2,4500
    4080:	1885883a 	add	r2,r3,r2
    4084:	00000106 	br	408c <fstat+0x3c>
    4088:	0005883a 	mov	r2,zero
    408c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4090:	e0bffd17 	ldw	r2,-12(fp)
    4094:	10001026 	beq	r2,zero,40d8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	10800017 	ldw	r2,0(r2)
    40a0:	10800817 	ldw	r2,32(r2)
    40a4:	10000726 	beq	r2,zero,40c4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    40a8:	e0bffd17 	ldw	r2,-12(fp)
    40ac:	10800017 	ldw	r2,0(r2)
    40b0:	10800817 	ldw	r2,32(r2)
    40b4:	e13ffd17 	ldw	r4,-12(fp)
    40b8:	e17fff17 	ldw	r5,-4(fp)
    40bc:	103ee83a 	callr	r2
    40c0:	00000a06 	br	40ec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	00c80004 	movi	r3,8192
    40cc:	10c00115 	stw	r3,4(r2)
      return 0;
    40d0:	0005883a 	mov	r2,zero
    40d4:	00000506 	br	40ec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    40d8:	00040000 	call	4000 <alt_get_errno>
    40dc:	1007883a 	mov	r3,r2
    40e0:	00801444 	movi	r2,81
    40e4:	18800015 	stw	r2,0(r3)
    return -1;
    40e8:	00bfffc4 	movi	r2,-1
  }
}
    40ec:	e037883a 	mov	sp,fp
    40f0:	dfc00117 	ldw	ra,4(sp)
    40f4:	df000017 	ldw	fp,0(sp)
    40f8:	dec00204 	addi	sp,sp,8
    40fc:	f800283a 	ret

00004100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4100:	defffe04 	addi	sp,sp,-8
    4104:	dfc00115 	stw	ra,4(sp)
    4108:	df000015 	stw	fp,0(sp)
    410c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4110:	00800074 	movhi	r2,1
    4114:	1089d404 	addi	r2,r2,10064
    4118:	10800017 	ldw	r2,0(r2)
    411c:	10000526 	beq	r2,zero,4134 <alt_get_errno+0x34>
    4120:	00800074 	movhi	r2,1
    4124:	1089d404 	addi	r2,r2,10064
    4128:	10800017 	ldw	r2,0(r2)
    412c:	103ee83a 	callr	r2
    4130:	00000206 	br	413c <alt_get_errno+0x3c>
    4134:	00800074 	movhi	r2,1
    4138:	1091b704 	addi	r2,r2,18140
}
    413c:	e037883a 	mov	sp,fp
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	df000017 	ldw	fp,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret

00004150 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4150:	deffed04 	addi	sp,sp,-76
    4154:	dfc01215 	stw	ra,72(sp)
    4158:	df001115 	stw	fp,68(sp)
    415c:	df001104 	addi	fp,sp,68
    4160:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4164:	e0bfff17 	ldw	r2,-4(fp)
    4168:	10000616 	blt	r2,zero,4184 <isatty+0x34>
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	10c00324 	muli	r3,r2,12
    4174:	00800074 	movhi	r2,1
    4178:	10846504 	addi	r2,r2,4500
    417c:	1885883a 	add	r2,r3,r2
    4180:	00000106 	br	4188 <isatty+0x38>
    4184:	0005883a 	mov	r2,zero
    4188:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    418c:	e0bfef17 	ldw	r2,-68(fp)
    4190:	10000e26 	beq	r2,zero,41cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4194:	e0bfef17 	ldw	r2,-68(fp)
    4198:	10800017 	ldw	r2,0(r2)
    419c:	10800817 	ldw	r2,32(r2)
    41a0:	1000021e 	bne	r2,zero,41ac <isatty+0x5c>
    {
      return 1;
    41a4:	00800044 	movi	r2,1
    41a8:	00000d06 	br	41e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    41ac:	e0bff004 	addi	r2,fp,-64
    41b0:	e13fff17 	ldw	r4,-4(fp)
    41b4:	100b883a 	mov	r5,r2
    41b8:	00040500 	call	4050 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    41bc:	e0bff117 	ldw	r2,-60(fp)
    41c0:	10880020 	cmpeqi	r2,r2,8192
    41c4:	10803fcc 	andi	r2,r2,255
    41c8:	00000506 	br	41e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    41cc:	00041000 	call	4100 <alt_get_errno>
    41d0:	1007883a 	mov	r3,r2
    41d4:	00801444 	movi	r2,81
    41d8:	18800015 	stw	r2,0(r3)
    return 0;
    41dc:	0005883a 	mov	r2,zero
  }
}
    41e0:	e037883a 	mov	sp,fp
    41e4:	dfc00117 	ldw	ra,4(sp)
    41e8:	df000017 	ldw	fp,0(sp)
    41ec:	dec00204 	addi	sp,sp,8
    41f0:	f800283a 	ret

000041f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    41f4:	defffc04 	addi	sp,sp,-16
    41f8:	df000315 	stw	fp,12(sp)
    41fc:	df000304 	addi	fp,sp,12
    4200:	e13ffd15 	stw	r4,-12(fp)
    4204:	e17ffe15 	stw	r5,-8(fp)
    4208:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    420c:	e0fffe17 	ldw	r3,-8(fp)
    4210:	e0bffd17 	ldw	r2,-12(fp)
    4214:	18800c26 	beq	r3,r2,4248 <alt_load_section+0x54>
  {
    while( to != end )
    4218:	00000806 	br	423c <alt_load_section+0x48>
    {
      *to++ = *from++;
    421c:	e0bffe17 	ldw	r2,-8(fp)
    4220:	10c00104 	addi	r3,r2,4
    4224:	e0fffe15 	stw	r3,-8(fp)
    4228:	e0fffd17 	ldw	r3,-12(fp)
    422c:	19000104 	addi	r4,r3,4
    4230:	e13ffd15 	stw	r4,-12(fp)
    4234:	18c00017 	ldw	r3,0(r3)
    4238:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    423c:	e0fffe17 	ldw	r3,-8(fp)
    4240:	e0bfff17 	ldw	r2,-4(fp)
    4244:	18bff51e 	bne	r3,r2,421c <__alt_mem_Flash_flash_data+0xf400421c>
    {
      *to++ = *from++;
    }
  }
}
    4248:	e037883a 	mov	sp,fp
    424c:	df000017 	ldw	fp,0(sp)
    4250:	dec00104 	addi	sp,sp,4
    4254:	f800283a 	ret

00004258 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4258:	defffe04 	addi	sp,sp,-8
    425c:	dfc00115 	stw	ra,4(sp)
    4260:	df000015 	stw	fp,0(sp)
    4264:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4268:	01000074 	movhi	r4,1
    426c:	2109f804 	addi	r4,r4,10208
    4270:	01400074 	movhi	r5,1
    4274:	29425004 	addi	r5,r5,2368
    4278:	01800074 	movhi	r6,1
    427c:	3189f804 	addi	r6,r6,10208
    4280:	00041f40 	call	41f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4284:	01000034 	movhi	r4,0
    4288:	21000804 	addi	r4,r4,32
    428c:	01400034 	movhi	r5,0
    4290:	29400804 	addi	r5,r5,32
    4294:	01800034 	movhi	r6,0
    4298:	31809104 	addi	r6,r6,580
    429c:	00041f40 	call	41f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    42a0:	01000074 	movhi	r4,1
    42a4:	21017504 	addi	r4,r4,1492
    42a8:	01400074 	movhi	r5,1
    42ac:	29417504 	addi	r5,r5,1492
    42b0:	01800074 	movhi	r6,1
    42b4:	31825004 	addi	r6,r6,2368
    42b8:	00041f40 	call	41f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    42bc:	000f1780 	call	f178 <alt_dcache_flush_all>
  alt_icache_flush_all();
    42c0:	000f3d00 	call	f3d0 <alt_icache_flush_all>
}
    42c4:	e037883a 	mov	sp,fp
    42c8:	dfc00117 	ldw	ra,4(sp)
    42cc:	df000017 	ldw	fp,0(sp)
    42d0:	dec00204 	addi	sp,sp,8
    42d4:	f800283a 	ret

000042d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    42d8:	defffe04 	addi	sp,sp,-8
    42dc:	dfc00115 	stw	ra,4(sp)
    42e0:	df000015 	stw	fp,0(sp)
    42e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    42e8:	00800074 	movhi	r2,1
    42ec:	1089d404 	addi	r2,r2,10064
    42f0:	10800017 	ldw	r2,0(r2)
    42f4:	10000526 	beq	r2,zero,430c <alt_get_errno+0x34>
    42f8:	00800074 	movhi	r2,1
    42fc:	1089d404 	addi	r2,r2,10064
    4300:	10800017 	ldw	r2,0(r2)
    4304:	103ee83a 	callr	r2
    4308:	00000206 	br	4314 <alt_get_errno+0x3c>
    430c:	00800074 	movhi	r2,1
    4310:	1091b704 	addi	r2,r2,18140
}
    4314:	e037883a 	mov	sp,fp
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret

00004328 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    4328:	defff904 	addi	sp,sp,-28
    432c:	dfc00615 	stw	ra,24(sp)
    4330:	df000515 	stw	fp,20(sp)
    4334:	df000504 	addi	fp,sp,20
    4338:	e13ffd15 	stw	r4,-12(fp)
    433c:	e17ffe15 	stw	r5,-8(fp)
    4340:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4344:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4348:	e0bffd17 	ldw	r2,-12(fp)
    434c:	10000616 	blt	r2,zero,4368 <lseek+0x40>
    4350:	e0bffd17 	ldw	r2,-12(fp)
    4354:	10c00324 	muli	r3,r2,12
    4358:	00800074 	movhi	r2,1
    435c:	10846504 	addi	r2,r2,4500
    4360:	1885883a 	add	r2,r3,r2
    4364:	00000106 	br	436c <lseek+0x44>
    4368:	0005883a 	mov	r2,zero
    436c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4370:	e0bffc17 	ldw	r2,-16(fp)
    4374:	10001026 	beq	r2,zero,43b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    4378:	e0bffc17 	ldw	r2,-16(fp)
    437c:	10800017 	ldw	r2,0(r2)
    4380:	10800717 	ldw	r2,28(r2)
    4384:	10000926 	beq	r2,zero,43ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    4388:	e0bffc17 	ldw	r2,-16(fp)
    438c:	10800017 	ldw	r2,0(r2)
    4390:	10800717 	ldw	r2,28(r2)
    4394:	e13ffc17 	ldw	r4,-16(fp)
    4398:	e17ffe17 	ldw	r5,-8(fp)
    439c:	e1bfff17 	ldw	r6,-4(fp)
    43a0:	103ee83a 	callr	r2
    43a4:	e0bffb15 	stw	r2,-20(fp)
    43a8:	00000506 	br	43c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    43ac:	00bfde84 	movi	r2,-134
    43b0:	e0bffb15 	stw	r2,-20(fp)
    43b4:	00000206 	br	43c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    43b8:	00bfebc4 	movi	r2,-81
    43bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    43c0:	e0bffb17 	ldw	r2,-20(fp)
    43c4:	1000070e 	bge	r2,zero,43e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    43c8:	00042d80 	call	42d8 <alt_get_errno>
    43cc:	1007883a 	mov	r3,r2
    43d0:	e0bffb17 	ldw	r2,-20(fp)
    43d4:	0085c83a 	sub	r2,zero,r2
    43d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    43dc:	00bfffc4 	movi	r2,-1
    43e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    43e4:	e0bffb17 	ldw	r2,-20(fp)
}
    43e8:	e037883a 	mov	sp,fp
    43ec:	dfc00117 	ldw	ra,4(sp)
    43f0:	df000017 	ldw	fp,0(sp)
    43f4:	dec00204 	addi	sp,sp,8
    43f8:	f800283a 	ret

000043fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    43fc:	defff904 	addi	sp,sp,-28
    4400:	dfc00615 	stw	ra,24(sp)
    4404:	df000515 	stw	fp,20(sp)
    4408:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    440c:	0009883a 	mov	r4,zero
    4410:	000c8480 	call	c848 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4414:	00053ec0 	call	53ec <OSInit>
    4418:	01000044 	movi	r4,1
    441c:	0009f5c0 	call	9f5c <OSSemCreate>
    4420:	1007883a 	mov	r3,r2
    4424:	00800074 	movhi	r2,1
    4428:	1091bd04 	addi	r2,r2,18164
    442c:	10c00015 	stw	r3,0(r2)
    4430:	01000044 	movi	r4,1
    4434:	0009f5c0 	call	9f5c <OSSemCreate>
    4438:	1007883a 	mov	r3,r2
    443c:	00800074 	movhi	r2,1
    4440:	1091bf04 	addi	r2,r2,18172
    4444:	10c00015 	stw	r3,0(r2)
    4448:	00800074 	movhi	r2,1
    444c:	1091b804 	addi	r2,r2,18144
    4450:	e0bffc15 	stw	r2,-16(fp)
    4454:	00800044 	movi	r2,1
    4458:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    445c:	e0bffd0b 	ldhu	r2,-12(fp)
    4460:	1009883a 	mov	r4,r2
    4464:	0009f5c0 	call	9f5c <OSSemCreate>
    4468:	1007883a 	mov	r3,r2
    446c:	e0bffc17 	ldw	r2,-16(fp)
    4470:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4474:	000c87c0 	call	c87c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4478:	01000074 	movhi	r4,1
    447c:	21019804 	addi	r4,r4,1632
    4480:	01400074 	movhi	r5,1
    4484:	29419804 	addi	r5,r5,1632
    4488:	01800074 	movhi	r6,1
    448c:	31819804 	addi	r6,r6,1632
    4490:	000f4c00 	call	f4c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4494:	000f2880 	call	f288 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4498:	01000074 	movhi	r4,1
    449c:	213cb904 	addi	r4,r4,-3356
    44a0:	00101840 	call	10184 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    44a4:	d127f817 	ldw	r4,-24608(gp)
    44a8:	d0e7f917 	ldw	r3,-24604(gp)
    44ac:	d0a7fa17 	ldw	r2,-24600(gp)
    44b0:	180b883a 	mov	r5,r3
    44b4:	100d883a 	mov	r6,r2
    44b8:	0000f580 	call	f58 <main>
    44bc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    44c0:	01000044 	movi	r4,1
    44c4:	0003f040 	call	3f04 <close>
  exit (result);
    44c8:	e13ffb17 	ldw	r4,-20(fp)
    44cc:	00101980 	call	10198 <exit>

000044d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    44d0:	defffe04 	addi	sp,sp,-8
    44d4:	dfc00115 	stw	ra,4(sp)
    44d8:	df000015 	stw	fp,0(sp)
    44dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    44e0:	00800074 	movhi	r2,1
    44e4:	1089d404 	addi	r2,r2,10064
    44e8:	10800017 	ldw	r2,0(r2)
    44ec:	10000526 	beq	r2,zero,4504 <alt_get_errno+0x34>
    44f0:	00800074 	movhi	r2,1
    44f4:	1089d404 	addi	r2,r2,10064
    44f8:	10800017 	ldw	r2,0(r2)
    44fc:	103ee83a 	callr	r2
    4500:	00000206 	br	450c <alt_get_errno+0x3c>
    4504:	00800074 	movhi	r2,1
    4508:	1091b704 	addi	r2,r2,18140
}
    450c:	e037883a 	mov	sp,fp
    4510:	dfc00117 	ldw	ra,4(sp)
    4514:	df000017 	ldw	fp,0(sp)
    4518:	dec00204 	addi	sp,sp,8
    451c:	f800283a 	ret

00004520 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4520:	defff904 	addi	sp,sp,-28
    4524:	dfc00615 	stw	ra,24(sp)
    4528:	df000515 	stw	fp,20(sp)
    452c:	df000504 	addi	fp,sp,20
    4530:	e13ffd15 	stw	r4,-12(fp)
    4534:	e17ffe15 	stw	r5,-8(fp)
    4538:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    453c:	e0bffd17 	ldw	r2,-12(fp)
    4540:	10000616 	blt	r2,zero,455c <read+0x3c>
    4544:	e0bffd17 	ldw	r2,-12(fp)
    4548:	10c00324 	muli	r3,r2,12
    454c:	00800074 	movhi	r2,1
    4550:	10846504 	addi	r2,r2,4500
    4554:	1885883a 	add	r2,r3,r2
    4558:	00000106 	br	4560 <read+0x40>
    455c:	0005883a 	mov	r2,zero
    4560:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4564:	e0bffb17 	ldw	r2,-20(fp)
    4568:	10002226 	beq	r2,zero,45f4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    456c:	e0bffb17 	ldw	r2,-20(fp)
    4570:	10800217 	ldw	r2,8(r2)
    4574:	108000cc 	andi	r2,r2,3
    4578:	10800060 	cmpeqi	r2,r2,1
    457c:	1000181e 	bne	r2,zero,45e0 <read+0xc0>
        (fd->dev->read))
    4580:	e0bffb17 	ldw	r2,-20(fp)
    4584:	10800017 	ldw	r2,0(r2)
    4588:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    458c:	10001426 	beq	r2,zero,45e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4590:	e0bffb17 	ldw	r2,-20(fp)
    4594:	10800017 	ldw	r2,0(r2)
    4598:	10800517 	ldw	r2,20(r2)
    459c:	e0ffff17 	ldw	r3,-4(fp)
    45a0:	e13ffb17 	ldw	r4,-20(fp)
    45a4:	e17ffe17 	ldw	r5,-8(fp)
    45a8:	180d883a 	mov	r6,r3
    45ac:	103ee83a 	callr	r2
    45b0:	e0bffc15 	stw	r2,-16(fp)
    45b4:	e0bffc17 	ldw	r2,-16(fp)
    45b8:	1000070e 	bge	r2,zero,45d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    45bc:	00044d00 	call	44d0 <alt_get_errno>
    45c0:	1007883a 	mov	r3,r2
    45c4:	e0bffc17 	ldw	r2,-16(fp)
    45c8:	0085c83a 	sub	r2,zero,r2
    45cc:	18800015 	stw	r2,0(r3)
          return -1;
    45d0:	00bfffc4 	movi	r2,-1
    45d4:	00000c06 	br	4608 <read+0xe8>
        }
        return rval;
    45d8:	e0bffc17 	ldw	r2,-16(fp)
    45dc:	00000a06 	br	4608 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    45e0:	00044d00 	call	44d0 <alt_get_errno>
    45e4:	1007883a 	mov	r3,r2
    45e8:	00800344 	movi	r2,13
    45ec:	18800015 	stw	r2,0(r3)
    45f0:	00000406 	br	4604 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    45f4:	00044d00 	call	44d0 <alt_get_errno>
    45f8:	1007883a 	mov	r3,r2
    45fc:	00801444 	movi	r2,81
    4600:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4604:	00bfffc4 	movi	r2,-1
}
    4608:	e037883a 	mov	sp,fp
    460c:	dfc00117 	ldw	ra,4(sp)
    4610:	df000017 	ldw	fp,0(sp)
    4614:	dec00204 	addi	sp,sp,8
    4618:	f800283a 	ret

0000461c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    461c:	defffe04 	addi	sp,sp,-8
    4620:	df000115 	stw	fp,4(sp)
    4624:	df000104 	addi	fp,sp,4
    4628:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    462c:	e0bfff17 	ldw	r2,-4(fp)
    4630:	108000d0 	cmplti	r2,r2,3
    4634:	10000d1e 	bne	r2,zero,466c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4638:	00800074 	movhi	r2,1
    463c:	10846504 	addi	r2,r2,4500
    4640:	e0ffff17 	ldw	r3,-4(fp)
    4644:	18c00324 	muli	r3,r3,12
    4648:	18c00204 	addi	r3,r3,8
    464c:	10c5883a 	add	r2,r2,r3
    4650:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4654:	00800074 	movhi	r2,1
    4658:	10846504 	addi	r2,r2,4500
    465c:	e0ffff17 	ldw	r3,-4(fp)
    4660:	18c00324 	muli	r3,r3,12
    4664:	10c5883a 	add	r2,r2,r3
    4668:	10000015 	stw	zero,0(r2)
  }
}
    466c:	e037883a 	mov	sp,fp
    4670:	df000017 	ldw	fp,0(sp)
    4674:	dec00104 	addi	sp,sp,4
    4678:	f800283a 	ret

0000467c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    467c:	defff904 	addi	sp,sp,-28
    4680:	df000615 	stw	fp,24(sp)
    4684:	df000604 	addi	fp,sp,24
    4688:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    468c:	0005303a 	rdctl	r2,status
    4690:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4694:	e0fffc17 	ldw	r3,-16(fp)
    4698:	00bfff84 	movi	r2,-2
    469c:	1884703a 	and	r2,r3,r2
    46a0:	1001703a 	wrctl	status,r2
  
  return context;
    46a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    46a8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    46ac:	d0a01417 	ldw	r2,-32688(gp)
    46b0:	10c000c4 	addi	r3,r2,3
    46b4:	00bfff04 	movi	r2,-4
    46b8:	1884703a 	and	r2,r3,r2
    46bc:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    46c0:	d0e01417 	ldw	r3,-32688(gp)
    46c4:	e0bfff17 	ldw	r2,-4(fp)
    46c8:	1887883a 	add	r3,r3,r2
    46cc:	00810034 	movhi	r2,1024
    46d0:	10800004 	addi	r2,r2,0
    46d4:	10c0062e 	bgeu	r2,r3,46f0 <sbrk+0x74>
    46d8:	e0bffa17 	ldw	r2,-24(fp)
    46dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46e0:	e0bffd17 	ldw	r2,-12(fp)
    46e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    46e8:	00bfffc4 	movi	r2,-1
    46ec:	00000b06 	br	471c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    46f0:	d0a01417 	ldw	r2,-32688(gp)
    46f4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    46f8:	d0e01417 	ldw	r3,-32688(gp)
    46fc:	e0bfff17 	ldw	r2,-4(fp)
    4700:	1885883a 	add	r2,r3,r2
    4704:	d0a01415 	stw	r2,-32688(gp)
    4708:	e0bffa17 	ldw	r2,-24(fp)
    470c:	e0bffe15 	stw	r2,-8(fp)
    4710:	e0bffe17 	ldw	r2,-8(fp)
    4714:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    4718:	e0bffb17 	ldw	r2,-20(fp)
} 
    471c:	e037883a 	mov	sp,fp
    4720:	df000017 	ldw	fp,0(sp)
    4724:	dec00104 	addi	sp,sp,4
    4728:	f800283a 	ret

0000472c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    472c:	defffe04 	addi	sp,sp,-8
    4730:	dfc00115 	stw	ra,4(sp)
    4734:	df000015 	stw	fp,0(sp)
    4738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    473c:	00800074 	movhi	r2,1
    4740:	1089d404 	addi	r2,r2,10064
    4744:	10800017 	ldw	r2,0(r2)
    4748:	10000526 	beq	r2,zero,4760 <alt_get_errno+0x34>
    474c:	00800074 	movhi	r2,1
    4750:	1089d404 	addi	r2,r2,10064
    4754:	10800017 	ldw	r2,0(r2)
    4758:	103ee83a 	callr	r2
    475c:	00000206 	br	4768 <alt_get_errno+0x3c>
    4760:	00800074 	movhi	r2,1
    4764:	1091b704 	addi	r2,r2,18140
}
    4768:	e037883a 	mov	sp,fp
    476c:	dfc00117 	ldw	ra,4(sp)
    4770:	df000017 	ldw	fp,0(sp)
    4774:	dec00204 	addi	sp,sp,8
    4778:	f800283a 	ret

0000477c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    477c:	defff904 	addi	sp,sp,-28
    4780:	dfc00615 	stw	ra,24(sp)
    4784:	df000515 	stw	fp,20(sp)
    4788:	df000504 	addi	fp,sp,20
    478c:	e13ffd15 	stw	r4,-12(fp)
    4790:	e17ffe15 	stw	r5,-8(fp)
    4794:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4798:	e0bffd17 	ldw	r2,-12(fp)
    479c:	10000616 	blt	r2,zero,47b8 <write+0x3c>
    47a0:	e0bffd17 	ldw	r2,-12(fp)
    47a4:	10c00324 	muli	r3,r2,12
    47a8:	00800074 	movhi	r2,1
    47ac:	10846504 	addi	r2,r2,4500
    47b0:	1885883a 	add	r2,r3,r2
    47b4:	00000106 	br	47bc <write+0x40>
    47b8:	0005883a 	mov	r2,zero
    47bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    47c0:	e0bffb17 	ldw	r2,-20(fp)
    47c4:	10002126 	beq	r2,zero,484c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    47c8:	e0bffb17 	ldw	r2,-20(fp)
    47cc:	10800217 	ldw	r2,8(r2)
    47d0:	108000cc 	andi	r2,r2,3
    47d4:	10001826 	beq	r2,zero,4838 <write+0xbc>
    47d8:	e0bffb17 	ldw	r2,-20(fp)
    47dc:	10800017 	ldw	r2,0(r2)
    47e0:	10800617 	ldw	r2,24(r2)
    47e4:	10001426 	beq	r2,zero,4838 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    47e8:	e0bffb17 	ldw	r2,-20(fp)
    47ec:	10800017 	ldw	r2,0(r2)
    47f0:	10800617 	ldw	r2,24(r2)
    47f4:	e0ffff17 	ldw	r3,-4(fp)
    47f8:	e13ffb17 	ldw	r4,-20(fp)
    47fc:	e17ffe17 	ldw	r5,-8(fp)
    4800:	180d883a 	mov	r6,r3
    4804:	103ee83a 	callr	r2
    4808:	e0bffc15 	stw	r2,-16(fp)
    480c:	e0bffc17 	ldw	r2,-16(fp)
    4810:	1000070e 	bge	r2,zero,4830 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    4814:	000472c0 	call	472c <alt_get_errno>
    4818:	1007883a 	mov	r3,r2
    481c:	e0bffc17 	ldw	r2,-16(fp)
    4820:	0085c83a 	sub	r2,zero,r2
    4824:	18800015 	stw	r2,0(r3)
        return -1;
    4828:	00bfffc4 	movi	r2,-1
    482c:	00000c06 	br	4860 <write+0xe4>
      }
      return rval;
    4830:	e0bffc17 	ldw	r2,-16(fp)
    4834:	00000a06 	br	4860 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4838:	000472c0 	call	472c <alt_get_errno>
    483c:	1007883a 	mov	r3,r2
    4840:	00800344 	movi	r2,13
    4844:	18800015 	stw	r2,0(r3)
    4848:	00000406 	br	485c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    484c:	000472c0 	call	472c <alt_get_errno>
    4850:	1007883a 	mov	r3,r2
    4854:	00801444 	movi	r2,81
    4858:	18800015 	stw	r2,0(r3)
  }
  return -1;
    485c:	00bfffc4 	movi	r2,-1
}
    4860:	e037883a 	mov	sp,fp
    4864:	dfc00117 	ldw	ra,4(sp)
    4868:	df000017 	ldw	fp,0(sp)
    486c:	dec00204 	addi	sp,sp,8
    4870:	f800283a 	ret

00004874 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    4874:	deffdf04 	addi	sp,sp,-132
    4878:	dfc02015 	stw	ra,128(sp)
    487c:	df001f15 	stw	fp,124(sp)
    4880:	df001f04 	addi	fp,sp,124
    4884:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    4888:	e0bfe204 	addi	r2,fp,-120
    488c:	01003fc4 	movi	r4,255
    4890:	100b883a 	mov	r5,r2
    4894:	000c1100 	call	c110 <OSTaskQuery>
    4898:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    489c:	e0bffe83 	ldbu	r2,-6(fp)
    48a0:	10803fcc 	andi	r2,r2,255
    48a4:	10000126 	beq	r2,zero,48ac <__env_lock+0x38>
    return;
    48a8:	00001d06 	br	4920 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    48ac:	e0bfee83 	ldbu	r2,-70(fp)
    48b0:	10803fcc 	andi	r2,r2,255
    48b4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    48b8:	d0e7fc17 	ldw	r3,-24592(gp)
    48bc:	e0bffd04 	addi	r2,fp,-12
    48c0:	1809883a 	mov	r4,r3
    48c4:	100b883a 	mov	r5,r2
    48c8:	000a7a80 	call	a7a8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    48cc:	e0bffe43 	ldbu	r2,-7(fp)
    48d0:	10803fcc 	andi	r2,r2,255
    48d4:	10000726 	beq	r2,zero,48f4 <__env_lock+0x80>
    48d8:	d0a01517 	ldw	r2,-32684(gp)
    48dc:	e0ffe117 	ldw	r3,-124(fp)
    48e0:	1880041e 	bne	r3,r2,48f4 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    48e4:	d0a7fb17 	ldw	r2,-24596(gp)
    48e8:	10800044 	addi	r2,r2,1
    48ec:	d0a7fb15 	stw	r2,-24596(gp)
    48f0:	00000a06 	br	491c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    48f4:	d0e7fc17 	ldw	r3,-24592(gp)
    48f8:	e0bffe84 	addi	r2,fp,-6
    48fc:	1809883a 	mov	r4,r3
    4900:	000b883a 	mov	r5,zero
    4904:	100d883a 	mov	r6,r2
    4908:	000a2c40 	call	a2c4 <OSSemPend>
    locks  = 1;
    490c:	00800044 	movi	r2,1
    4910:	d0a7fb15 	stw	r2,-24596(gp)
    lockid = id;
    4914:	e0bfe117 	ldw	r2,-124(fp)
    4918:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    491c:	0001883a 	nop
}
    4920:	e037883a 	mov	sp,fp
    4924:	dfc00117 	ldw	ra,4(sp)
    4928:	df000017 	ldw	fp,0(sp)
    492c:	dec00204 	addi	sp,sp,8
    4930:	f800283a 	ret

00004934 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    4934:	defffd04 	addi	sp,sp,-12
    4938:	dfc00215 	stw	ra,8(sp)
    493c:	df000115 	stw	fp,4(sp)
    4940:	df000104 	addi	fp,sp,4
    4944:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    4948:	d0a7fb17 	ldw	r2,-24596(gp)
    494c:	1000011e 	bne	r2,zero,4954 <__env_unlock+0x20>
    return;
    4950:	00000a06 	br	497c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    4954:	d0a7fb17 	ldw	r2,-24596(gp)
    4958:	10bfffc4 	addi	r2,r2,-1
    495c:	d0a7fb15 	stw	r2,-24596(gp)
    4960:	d0a7fb17 	ldw	r2,-24596(gp)
    4964:	1000051e 	bne	r2,zero,497c <__env_unlock+0x48>
  {
    lockid = -1;
    4968:	00bfffc4 	movi	r2,-1
    496c:	d0a01515 	stw	r2,-32684(gp)
    OSSemPost( alt_envsem );
    4970:	d0a7fc17 	ldw	r2,-24592(gp)
    4974:	1009883a 	mov	r4,r2
    4978:	000a6980 	call	a698 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    497c:	e037883a 	mov	sp,fp
    4980:	dfc00117 	ldw	ra,4(sp)
    4984:	df000017 	ldw	fp,0(sp)
    4988:	dec00204 	addi	sp,sp,8
    498c:	f800283a 	ret

00004990 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    4990:	deffdb04 	addi	sp,sp,-148
    4994:	dfc02415 	stw	ra,144(sp)
    4998:	df002315 	stw	fp,140(sp)
    499c:	df002304 	addi	fp,sp,140
    49a0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    49a4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    49a8:	00800074 	movhi	r2,1
    49ac:	1091c044 	addi	r2,r2,18177
    49b0:	10800003 	ldbu	r2,0(r2)
    49b4:	10803fcc 	andi	r2,r2,255
    49b8:	10800060 	cmpeqi	r2,r2,1
    49bc:	1000011e 	bne	r2,zero,49c4 <__malloc_lock+0x34>
      return;
    49c0:	00003606 	br	4a9c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    49c4:	e0bfe204 	addi	r2,fp,-120
    49c8:	01003fc4 	movi	r4,255
    49cc:	100b883a 	mov	r5,r2
    49d0:	000c1100 	call	c110 <OSTaskQuery>
    49d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    49d8:	e0bffe83 	ldbu	r2,-6(fp)
    49dc:	10803fcc 	andi	r2,r2,255
    49e0:	10000126 	beq	r2,zero,49e8 <__malloc_lock+0x58>
    return;
    49e4:	00002d06 	br	4a9c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    49e8:	e0bfee83 	ldbu	r2,-70(fp)
    49ec:	10803fcc 	andi	r2,r2,255
    49f0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    49f4:	d0e7fe17 	ldw	r3,-24584(gp)
    49f8:	e0bffd04 	addi	r2,fp,-12
    49fc:	1809883a 	mov	r4,r3
    4a00:	100b883a 	mov	r5,r2
    4a04:	000a7a80 	call	a7a8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a08:	0005303a 	rdctl	r2,status
    4a0c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a10:	e0ffdf17 	ldw	r3,-132(fp)
    4a14:	00bfff84 	movi	r2,-2
    4a18:	1884703a 	and	r2,r3,r2
    4a1c:	1001703a 	wrctl	status,r2
  
  return context;
    4a20:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    4a24:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    4a28:	e0bffd0b 	ldhu	r2,-12(fp)
    4a2c:	10bfffcc 	andi	r2,r2,65535
    4a30:	10000b1e 	bne	r2,zero,4a60 <__malloc_lock+0xd0>
    4a34:	d0a01617 	ldw	r2,-32680(gp)
    4a38:	e0ffde17 	ldw	r3,-136(fp)
    4a3c:	1880081e 	bne	r3,r2,4a60 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    4a40:	d0a7fd17 	ldw	r2,-24588(gp)
    4a44:	10800044 	addi	r2,r2,1
    4a48:	d0a7fd15 	stw	r2,-24588(gp)
    4a4c:	e0bfdd17 	ldw	r2,-140(fp)
    4a50:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a54:	e0bfe017 	ldw	r2,-128(fp)
    4a58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    4a5c:	00000e06 	br	4a98 <__malloc_lock+0x108>
    4a60:	e0bfdd17 	ldw	r2,-140(fp)
    4a64:	e0bfe115 	stw	r2,-124(fp)
    4a68:	e0bfe117 	ldw	r2,-124(fp)
    4a6c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    4a70:	d0e7fe17 	ldw	r3,-24584(gp)
    4a74:	e0bffe84 	addi	r2,fp,-6
    4a78:	1809883a 	mov	r4,r3
    4a7c:	000b883a 	mov	r5,zero
    4a80:	100d883a 	mov	r6,r2
    4a84:	000a2c40 	call	a2c4 <OSSemPend>
    locks  = 1;
    4a88:	00800044 	movi	r2,1
    4a8c:	d0a7fd15 	stw	r2,-24588(gp)
    lockid = id;
    4a90:	e0bfde17 	ldw	r2,-136(fp)
    4a94:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    4a98:	0001883a 	nop
}
    4a9c:	e037883a 	mov	sp,fp
    4aa0:	dfc00117 	ldw	ra,4(sp)
    4aa4:	df000017 	ldw	fp,0(sp)
    4aa8:	dec00204 	addi	sp,sp,8
    4aac:	f800283a 	ret

00004ab0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    4ab0:	defff804 	addi	sp,sp,-32
    4ab4:	dfc00715 	stw	ra,28(sp)
    4ab8:	df000615 	stw	fp,24(sp)
    4abc:	df000604 	addi	fp,sp,24
    4ac0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4ac4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    4ac8:	00800074 	movhi	r2,1
    4acc:	1091c044 	addi	r2,r2,18177
    4ad0:	10800003 	ldbu	r2,0(r2)
    4ad4:	10803fcc 	andi	r2,r2,255
    4ad8:	10800060 	cmpeqi	r2,r2,1
    4adc:	1000011e 	bne	r2,zero,4ae4 <__malloc_unlock+0x34>
      return;
    4ae0:	00002206 	br	4b6c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ae4:	0005303a 	rdctl	r2,status
    4ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4aec:	e0fffb17 	ldw	r3,-20(fp)
    4af0:	00bfff84 	movi	r2,-2
    4af4:	1884703a 	and	r2,r3,r2
    4af8:	1001703a 	wrctl	status,r2
  
  return context;
    4afc:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    4b00:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    4b04:	d0a7fd17 	ldw	r2,-24588(gp)
    4b08:	1000051e 	bne	r2,zero,4b20 <__malloc_unlock+0x70>
    4b0c:	e0bffa17 	ldw	r2,-24(fp)
    4b10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b14:	e0bffc17 	ldw	r2,-16(fp)
    4b18:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    4b1c:	00001306 	br	4b6c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    4b20:	d0a7fd17 	ldw	r2,-24588(gp)
    4b24:	10bfffc4 	addi	r2,r2,-1
    4b28:	d0a7fd15 	stw	r2,-24588(gp)
    4b2c:	d0a7fd17 	ldw	r2,-24588(gp)
    4b30:	10000a1e 	bne	r2,zero,4b5c <__malloc_unlock+0xac>
  {
    lockid = -1;
    4b34:	00bfffc4 	movi	r2,-1
    4b38:	d0a01615 	stw	r2,-32680(gp)
    4b3c:	e0bffa17 	ldw	r2,-24(fp)
    4b40:	e0bffd15 	stw	r2,-12(fp)
    4b44:	e0bffd17 	ldw	r2,-12(fp)
    4b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    4b4c:	d0a7fe17 	ldw	r2,-24584(gp)
    4b50:	1009883a 	mov	r4,r2
    4b54:	000a6980 	call	a698 <OSSemPost>
    4b58:	00000406 	br	4b6c <__malloc_unlock+0xbc>
    4b5c:	e0bffa17 	ldw	r2,-24(fp)
    4b60:	e0bffe15 	stw	r2,-8(fp)
    4b64:	e0bffe17 	ldw	r2,-8(fp)
    4b68:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    4b6c:	e037883a 	mov	sp,fp
    4b70:	dfc00117 	ldw	ra,4(sp)
    4b74:	df000017 	ldw	fp,0(sp)
    4b78:	dec00204 	addi	sp,sp,8
    4b7c:	f800283a 	ret

00004b80 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4b80:	defff704 	addi	sp,sp,-36
    4b84:	dfc00815 	stw	ra,32(sp)
    4b88:	df000715 	stw	fp,28(sp)
    4b8c:	df000704 	addi	fp,sp,28
    4b90:	e13ffd15 	stw	r4,-12(fp)
    4b94:	e17ffe15 	stw	r5,-8(fp)
    4b98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4b9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4ba0:	e0bfff17 	ldw	r2,-4(fp)
    4ba4:	1000021e 	bne	r2,zero,4bb0 <OSEventNameGet+0x30>
        return (0);
    4ba8:	0005883a 	mov	r2,zero
    4bac:	00003706 	br	4c8c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4bb0:	e0bffd17 	ldw	r2,-12(fp)
    4bb4:	1000051e 	bne	r2,zero,4bcc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    4bb8:	e0bfff17 	ldw	r2,-4(fp)
    4bbc:	00c00104 	movi	r3,4
    4bc0:	10c00005 	stb	r3,0(r2)
        return (0);
    4bc4:	0005883a 	mov	r2,zero
    4bc8:	00003006 	br	4c8c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4bcc:	e0bffe17 	ldw	r2,-8(fp)
    4bd0:	1000051e 	bne	r2,zero,4be8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4bd4:	e0bfff17 	ldw	r2,-4(fp)
    4bd8:	00c00304 	movi	r3,12
    4bdc:	10c00005 	stb	r3,0(r2)
        return (0);
    4be0:	0005883a 	mov	r2,zero
    4be4:	00002906 	br	4c8c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4be8:	d0a80d03 	ldbu	r2,-24524(gp)
    4bec:	10803fcc 	andi	r2,r2,255
    4bf0:	10000526 	beq	r2,zero,4c08 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    4bf4:	e0bfff17 	ldw	r2,-4(fp)
    4bf8:	00c00444 	movi	r3,17
    4bfc:	10c00005 	stb	r3,0(r2)
        return (0);
    4c00:	0005883a 	mov	r2,zero
    4c04:	00002106 	br	4c8c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    4c08:	e0bffd17 	ldw	r2,-12(fp)
    4c0c:	10800003 	ldbu	r2,0(r2)
    4c10:	10803fcc 	andi	r2,r2,255
    4c14:	10bfffc4 	addi	r2,r2,-1
    4c18:	10800128 	cmpgeui	r2,r2,4
    4c1c:	10000526 	beq	r2,zero,4c34 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4c20:	e0bfff17 	ldw	r2,-4(fp)
    4c24:	00c00044 	movi	r3,1
    4c28:	10c00005 	stb	r3,0(r2)
             return (0);
    4c2c:	0005883a 	mov	r2,zero
    4c30:	00001606 	br	4c8c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    4c34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c38:	0005303a 	rdctl	r2,status
    4c3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c40:	e0fffb17 	ldw	r3,-20(fp)
    4c44:	00bfff84 	movi	r2,-2
    4c48:	1884703a 	and	r2,r3,r2
    4c4c:	1001703a 	wrctl	status,r2
  
  return context;
    4c50:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    4c54:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    4c58:	e0bffd17 	ldw	r2,-12(fp)
    4c5c:	10800384 	addi	r2,r2,14
    4c60:	e13ffe17 	ldw	r4,-8(fp)
    4c64:	100b883a 	mov	r5,r2
    4c68:	00065d40 	call	65d4 <OS_StrCopy>
    4c6c:	e0bffa05 	stb	r2,-24(fp)
    4c70:	e0bff917 	ldw	r2,-28(fp)
    4c74:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c78:	e0bffc17 	ldw	r2,-16(fp)
    4c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4c80:	e0bfff17 	ldw	r2,-4(fp)
    4c84:	10000005 	stb	zero,0(r2)
    return (len);
    4c88:	e0bffa03 	ldbu	r2,-24(fp)
}
    4c8c:	e037883a 	mov	sp,fp
    4c90:	dfc00117 	ldw	ra,4(sp)
    4c94:	df000017 	ldw	fp,0(sp)
    4c98:	dec00204 	addi	sp,sp,8
    4c9c:	f800283a 	ret

00004ca0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    4ca0:	defff604 	addi	sp,sp,-40
    4ca4:	dfc00915 	stw	ra,36(sp)
    4ca8:	df000815 	stw	fp,32(sp)
    4cac:	df000804 	addi	fp,sp,32
    4cb0:	e13ffd15 	stw	r4,-12(fp)
    4cb4:	e17ffe15 	stw	r5,-8(fp)
    4cb8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4cbc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4cc0:	e0bfff17 	ldw	r2,-4(fp)
    4cc4:	1000011e 	bne	r2,zero,4ccc <OSEventNameSet+0x2c>
        return;
    4cc8:	00003f06 	br	4dc8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    4ccc:	e0bffd17 	ldw	r2,-12(fp)
    4cd0:	1000041e 	bne	r2,zero,4ce4 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    4cd4:	e0bfff17 	ldw	r2,-4(fp)
    4cd8:	00c00104 	movi	r3,4
    4cdc:	10c00005 	stb	r3,0(r2)
        return;
    4ce0:	00003906 	br	4dc8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4ce4:	e0bffe17 	ldw	r2,-8(fp)
    4ce8:	1000041e 	bne	r2,zero,4cfc <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    4cec:	e0bfff17 	ldw	r2,-4(fp)
    4cf0:	00c00304 	movi	r3,12
    4cf4:	10c00005 	stb	r3,0(r2)
        return;
    4cf8:	00003306 	br	4dc8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4cfc:	d0a80d03 	ldbu	r2,-24524(gp)
    4d00:	10803fcc 	andi	r2,r2,255
    4d04:	10000426 	beq	r2,zero,4d18 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    4d08:	e0bfff17 	ldw	r2,-4(fp)
    4d0c:	00c00484 	movi	r3,18
    4d10:	10c00005 	stb	r3,0(r2)
        return;
    4d14:	00002c06 	br	4dc8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    4d18:	e0bffd17 	ldw	r2,-12(fp)
    4d1c:	10800003 	ldbu	r2,0(r2)
    4d20:	10803fcc 	andi	r2,r2,255
    4d24:	10bfffc4 	addi	r2,r2,-1
    4d28:	10800128 	cmpgeui	r2,r2,4
    4d2c:	10000426 	beq	r2,zero,4d40 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    4d30:	e0bfff17 	ldw	r2,-4(fp)
    4d34:	00c00044 	movi	r3,1
    4d38:	10c00005 	stb	r3,0(r2)
             return;
    4d3c:	00002206 	br	4dc8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    4d40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d44:	0005303a 	rdctl	r2,status
    4d48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d4c:	e0fffa17 	ldw	r3,-24(fp)
    4d50:	00bfff84 	movi	r2,-2
    4d54:	1884703a 	and	r2,r3,r2
    4d58:	1001703a 	wrctl	status,r2
  
  return context;
    4d5c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    4d60:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    4d64:	e13ffe17 	ldw	r4,-8(fp)
    4d68:	00066480 	call	6648 <OS_StrLen>
    4d6c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    4d70:	e0bff903 	ldbu	r2,-28(fp)
    4d74:	10800830 	cmpltui	r2,r2,32
    4d78:	1000081e 	bne	r2,zero,4d9c <OSEventNameSet+0xfc>
    4d7c:	e0bff817 	ldw	r2,-32(fp)
    4d80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d84:	e0bffb17 	ldw	r2,-20(fp)
    4d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    4d8c:	e0bfff17 	ldw	r2,-4(fp)
    4d90:	00c002c4 	movi	r3,11
    4d94:	10c00005 	stb	r3,0(r2)
        return;
    4d98:	00000b06 	br	4dc8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    4d9c:	e0bffd17 	ldw	r2,-12(fp)
    4da0:	10800384 	addi	r2,r2,14
    4da4:	1009883a 	mov	r4,r2
    4da8:	e17ffe17 	ldw	r5,-8(fp)
    4dac:	00065d40 	call	65d4 <OS_StrCopy>
    4db0:	e0bff817 	ldw	r2,-32(fp)
    4db4:	e0bffc15 	stw	r2,-16(fp)
    4db8:	e0bffc17 	ldw	r2,-16(fp)
    4dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4dc0:	e0bfff17 	ldw	r2,-4(fp)
    4dc4:	10000005 	stb	zero,0(r2)
}
    4dc8:	e037883a 	mov	sp,fp
    4dcc:	dfc00117 	ldw	ra,4(sp)
    4dd0:	df000017 	ldw	fp,0(sp)
    4dd4:	dec00204 	addi	sp,sp,8
    4dd8:	f800283a 	ret

00004ddc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    4ddc:	deffed04 	addi	sp,sp,-76
    4de0:	dfc01215 	stw	ra,72(sp)
    4de4:	df001115 	stw	fp,68(sp)
    4de8:	df001104 	addi	fp,sp,68
    4dec:	e13ffc15 	stw	r4,-16(fp)
    4df0:	e17ffd15 	stw	r5,-12(fp)
    4df4:	e1bffe15 	stw	r6,-8(fp)
    4df8:	3805883a 	mov	r2,r7
    4dfc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    4e00:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    4e04:	e0800217 	ldw	r2,8(fp)
    4e08:	1000021e 	bne	r2,zero,4e14 <OSEventPendMulti+0x38>
        return (0);
    4e0c:	0005883a 	mov	r2,zero
    4e10:	00017106 	br	53d8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    4e14:	e0bffc17 	ldw	r2,-16(fp)
    4e18:	1000051e 	bne	r2,zero,4e30 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    4e1c:	e0800217 	ldw	r2,8(fp)
    4e20:	00c00104 	movi	r3,4
    4e24:	10c00005 	stb	r3,0(r2)
        return (0);
    4e28:	0005883a 	mov	r2,zero
    4e2c:	00016a06 	br	53d8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    4e30:	e0bffd17 	ldw	r2,-12(fp)
    4e34:	1000051e 	bne	r2,zero,4e4c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    4e38:	e0800217 	ldw	r2,8(fp)
    4e3c:	00c00104 	movi	r3,4
    4e40:	10c00005 	stb	r3,0(r2)
        return (0);
    4e44:	0005883a 	mov	r2,zero
    4e48:	00016306 	br	53d8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    4e4c:	e0bffe17 	ldw	r2,-8(fp)
    4e50:	1000051e 	bne	r2,zero,4e68 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    4e54:	e0800217 	ldw	r2,8(fp)
    4e58:	00c00104 	movi	r3,4
    4e5c:	10c00005 	stb	r3,0(r2)
        return (0);
    4e60:	0005883a 	mov	r2,zero
    4e64:	00015c06 	br	53d8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    4e68:	e0bffd17 	ldw	r2,-12(fp)
    4e6c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    4e70:	e0bffc17 	ldw	r2,-16(fp)
    4e74:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    4e78:	e0bfef17 	ldw	r2,-68(fp)
    4e7c:	10800017 	ldw	r2,0(r2)
    4e80:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    4e84:	00001906 	br	4eec <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    4e88:	e0bff017 	ldw	r2,-64(fp)
    4e8c:	10800003 	ldbu	r2,0(r2)
    4e90:	10803fcc 	andi	r2,r2,255
    4e94:	10c000a0 	cmpeqi	r3,r2,2
    4e98:	1800091e 	bne	r3,zero,4ec0 <OSEventPendMulti+0xe4>
    4e9c:	10c000e0 	cmpeqi	r3,r2,3
    4ea0:	1800091e 	bne	r3,zero,4ec8 <OSEventPendMulti+0xec>
    4ea4:	10800060 	cmpeqi	r2,r2,1
    4ea8:	1000091e 	bne	r2,zero,4ed0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    4eac:	e0800217 	ldw	r2,8(fp)
    4eb0:	00c00044 	movi	r3,1
    4eb4:	10c00005 	stb	r3,0(r2)
                 return (0);
    4eb8:	0005883a 	mov	r2,zero
    4ebc:	00014606 	br	53d8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    4ec0:	0001883a 	nop
    4ec4:	00000306 	br	4ed4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    4ec8:	0001883a 	nop
    4ecc:	00000106 	br	4ed4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    4ed0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    4ed4:	e0bfef17 	ldw	r2,-68(fp)
    4ed8:	10800104 	addi	r2,r2,4
    4edc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    4ee0:	e0bfef17 	ldw	r2,-68(fp)
    4ee4:	10800017 	ldw	r2,0(r2)
    4ee8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    4eec:	e0bff017 	ldw	r2,-64(fp)
    4ef0:	103fe51e 	bne	r2,zero,4e88 <__alt_mem_Flash_flash_data+0xf4004e88>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    4ef4:	d0a80d03 	ldbu	r2,-24524(gp)
    4ef8:	10803fcc 	andi	r2,r2,255
    4efc:	10000526 	beq	r2,zero,4f14 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    4f00:	e0800217 	ldw	r2,8(fp)
    4f04:	00c00084 	movi	r3,2
    4f08:	10c00005 	stb	r3,0(r2)
        return (0);
    4f0c:	0005883a 	mov	r2,zero
    4f10:	00013106 	br	53d8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    4f14:	d0a7ff03 	ldbu	r2,-24580(gp)
    4f18:	10803fcc 	andi	r2,r2,255
    4f1c:	10000526 	beq	r2,zero,4f34 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    4f20:	e0800217 	ldw	r2,8(fp)
    4f24:	00c00344 	movi	r3,13
    4f28:	10c00005 	stb	r3,0(r2)
        return (0);
    4f2c:	0005883a 	mov	r2,zero
    4f30:	00012906 	br	53d8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4f34:	0005303a 	rdctl	r2,status
    4f38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4f3c:	e0fff517 	ldw	r3,-44(fp)
    4f40:	00bfff84 	movi	r2,-2
    4f44:	1884703a 	and	r2,r3,r2
    4f48:	1001703a 	wrctl	status,r2
  
  return context;
    4f4c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    4f50:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    4f54:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    4f58:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    4f5c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    4f60:	e0bffc17 	ldw	r2,-16(fp)
    4f64:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    4f68:	e0bfef17 	ldw	r2,-68(fp)
    4f6c:	10800017 	ldw	r2,0(r2)
    4f70:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    4f74:	00008106 	br	517c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    4f78:	e0bff017 	ldw	r2,-64(fp)
    4f7c:	10800003 	ldbu	r2,0(r2)
    4f80:	10803fcc 	andi	r2,r2,255
    4f84:	10c000a0 	cmpeqi	r3,r2,2
    4f88:	18003c1e 	bne	r3,zero,507c <OSEventPendMulti+0x2a0>
    4f8c:	10c000e0 	cmpeqi	r3,r2,3
    4f90:	1800031e 	bne	r3,zero,4fa0 <OSEventPendMulti+0x1c4>
    4f94:	10800060 	cmpeqi	r2,r2,1
    4f98:	10001e1e 	bne	r2,zero,5014 <OSEventPendMulti+0x238>
    4f9c:	00006606 	br	5138 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    4fa0:	e0bff017 	ldw	r2,-64(fp)
    4fa4:	1080020b 	ldhu	r2,8(r2)
    4fa8:	10bfffcc 	andi	r2,r2,65535
    4fac:	10001526 	beq	r2,zero,5004 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    4fb0:	e0bff017 	ldw	r2,-64(fp)
    4fb4:	1080020b 	ldhu	r2,8(r2)
    4fb8:	10bfffc4 	addi	r2,r2,-1
    4fbc:	1007883a 	mov	r3,r2
    4fc0:	e0bff017 	ldw	r2,-64(fp)
    4fc4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    4fc8:	e0bffd17 	ldw	r2,-12(fp)
    4fcc:	10c00104 	addi	r3,r2,4
    4fd0:	e0fffd15 	stw	r3,-12(fp)
    4fd4:	e0fff017 	ldw	r3,-64(fp)
    4fd8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    4fdc:	00800044 	movi	r2,1
    4fe0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    4fe4:	e0bffe17 	ldw	r2,-8(fp)
    4fe8:	10c00104 	addi	r3,r2,4
    4fec:	e0fffe15 	stw	r3,-8(fp)
    4ff0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    4ff4:	e0bff18b 	ldhu	r2,-58(fp)
    4ff8:	10800044 	addi	r2,r2,1
    4ffc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    5000:	00005806 	br	5164 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    5004:	e0bff203 	ldbu	r2,-56(fp)
    5008:	10800054 	ori	r2,r2,1
    500c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5010:	00005406 	br	5164 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    5014:	e0bff017 	ldw	r2,-64(fp)
    5018:	10800117 	ldw	r2,4(r2)
    501c:	10001326 	beq	r2,zero,506c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    5020:	e0bffe17 	ldw	r2,-8(fp)
    5024:	10c00104 	addi	r3,r2,4
    5028:	e0fffe15 	stw	r3,-8(fp)
    502c:	e0fff017 	ldw	r3,-64(fp)
    5030:	18c00117 	ldw	r3,4(r3)
    5034:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    5038:	e0bff017 	ldw	r2,-64(fp)
    503c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    5040:	e0bffd17 	ldw	r2,-12(fp)
    5044:	10c00104 	addi	r3,r2,4
    5048:	e0fffd15 	stw	r3,-12(fp)
    504c:	e0fff017 	ldw	r3,-64(fp)
    5050:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    5054:	00800044 	movi	r2,1
    5058:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    505c:	e0bff18b 	ldhu	r2,-58(fp)
    5060:	10800044 	addi	r2,r2,1
    5064:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    5068:	00003e06 	br	5164 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    506c:	e0bff203 	ldbu	r2,-56(fp)
    5070:	10800094 	ori	r2,r2,2
    5074:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5078:	00003a06 	br	5164 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    507c:	e0bff017 	ldw	r2,-64(fp)
    5080:	10800117 	ldw	r2,4(r2)
    5084:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    5088:	e0bff417 	ldw	r2,-48(fp)
    508c:	1080058b 	ldhu	r2,22(r2)
    5090:	10bfffcc 	andi	r2,r2,65535
    5094:	10002426 	beq	r2,zero,5128 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    5098:	e0bffe17 	ldw	r2,-8(fp)
    509c:	10c00104 	addi	r3,r2,4
    50a0:	e0fffe15 	stw	r3,-8(fp)
    50a4:	e0fff417 	ldw	r3,-48(fp)
    50a8:	18c00417 	ldw	r3,16(r3)
    50ac:	19400104 	addi	r5,r3,4
    50b0:	e13ff417 	ldw	r4,-48(fp)
    50b4:	21400415 	stw	r5,16(r4)
    50b8:	18c00017 	ldw	r3,0(r3)
    50bc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    50c0:	e0bff417 	ldw	r2,-48(fp)
    50c4:	10c00417 	ldw	r3,16(r2)
    50c8:	e0bff417 	ldw	r2,-48(fp)
    50cc:	10800217 	ldw	r2,8(r2)
    50d0:	1880041e 	bne	r3,r2,50e4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    50d4:	e0bff417 	ldw	r2,-48(fp)
    50d8:	10c00117 	ldw	r3,4(r2)
    50dc:	e0bff417 	ldw	r2,-48(fp)
    50e0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    50e4:	e0bff417 	ldw	r2,-48(fp)
    50e8:	1080058b 	ldhu	r2,22(r2)
    50ec:	10bfffc4 	addi	r2,r2,-1
    50f0:	1007883a 	mov	r3,r2
    50f4:	e0bff417 	ldw	r2,-48(fp)
    50f8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    50fc:	e0bffd17 	ldw	r2,-12(fp)
    5100:	10c00104 	addi	r3,r2,4
    5104:	e0fffd15 	stw	r3,-12(fp)
    5108:	e0fff017 	ldw	r3,-64(fp)
    510c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    5110:	00800044 	movi	r2,1
    5114:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    5118:	e0bff18b 	ldhu	r2,-58(fp)
    511c:	10800044 	addi	r2,r2,1
    5120:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    5124:	00000f06 	br	5164 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    5128:	e0bff203 	ldbu	r2,-56(fp)
    512c:	10800114 	ori	r2,r2,4
    5130:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    5134:	00000b06 	br	5164 <OSEventPendMulti+0x388>
    5138:	e0bff317 	ldw	r2,-52(fp)
    513c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5140:	e0bff617 	ldw	r2,-40(fp)
    5144:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    5148:	e0bffd17 	ldw	r2,-12(fp)
    514c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    5150:	e0800217 	ldw	r2,8(fp)
    5154:	00c00044 	movi	r3,1
    5158:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    515c:	e0bff18b 	ldhu	r2,-58(fp)
    5160:	00009d06 	br	53d8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    5164:	e0bfef17 	ldw	r2,-68(fp)
    5168:	10800104 	addi	r2,r2,4
    516c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    5170:	e0bfef17 	ldw	r2,-68(fp)
    5174:	10800017 	ldw	r2,0(r2)
    5178:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    517c:	e0bff017 	ldw	r2,-64(fp)
    5180:	103f7d1e 	bne	r2,zero,4f78 <__alt_mem_Flash_flash_data+0xf4004f78>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    5184:	e0bff103 	ldbu	r2,-60(fp)
    5188:	10800058 	cmpnei	r2,r2,1
    518c:	10000a1e 	bne	r2,zero,51b8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    5190:	e0bffd17 	ldw	r2,-12(fp)
    5194:	10000015 	stw	zero,0(r2)
    5198:	e0bff317 	ldw	r2,-52(fp)
    519c:	e0bff715 	stw	r2,-36(fp)
    51a0:	e0bff717 	ldw	r2,-36(fp)
    51a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    51a8:	e0800217 	ldw	r2,8(fp)
    51ac:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    51b0:	e0bff18b 	ldhu	r2,-58(fp)
    51b4:	00008806 	br	53d8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    51b8:	d0a80e17 	ldw	r2,-24520(gp)
    51bc:	d0e80e17 	ldw	r3,-24520(gp)
    51c0:	19000c03 	ldbu	r4,48(r3)
    51c4:	e0fff203 	ldbu	r3,-56(fp)
    51c8:	20c6b03a 	or	r3,r4,r3
    51cc:	1809883a 	mov	r4,r3
    51d0:	00ffe004 	movi	r3,-128
    51d4:	20c6b03a 	or	r3,r4,r3
    51d8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    51dc:	d0a80e17 	ldw	r2,-24520(gp)
    51e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    51e4:	d0a80e17 	ldw	r2,-24520(gp)
    51e8:	e0ffff0b 	ldhu	r3,-4(fp)
    51ec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    51f0:	e13ffc17 	ldw	r4,-16(fp)
    51f4:	0005d240 	call	5d24 <OS_EventTaskWaitMulti>
    51f8:	e0bff317 	ldw	r2,-52(fp)
    51fc:	e0bff815 	stw	r2,-32(fp)
    5200:	e0bff817 	ldw	r2,-32(fp)
    5204:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    5208:	00064980 	call	6498 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    520c:	0005303a 	rdctl	r2,status
    5210:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5214:	e0fff917 	ldw	r3,-28(fp)
    5218:	00bfff84 	movi	r2,-2
    521c:	1884703a 	and	r2,r3,r2
    5220:	1001703a 	wrctl	status,r2
  
  return context;
    5224:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    5228:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    522c:	d0a80e17 	ldw	r2,-24520(gp)
    5230:	10800c43 	ldbu	r2,49(r2)
    5234:	10803fcc 	andi	r2,r2,255
    5238:	10000226 	beq	r2,zero,5244 <OSEventPendMulti+0x468>
    523c:	108000a0 	cmpeqi	r2,r2,2
    5240:	10001826 	beq	r2,zero,52a4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    5244:	d0a80e17 	ldw	r2,-24520(gp)
    5248:	10800717 	ldw	r2,28(r2)
    524c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    5250:	e0bff017 	ldw	r2,-64(fp)
    5254:	10000b26 	beq	r2,zero,5284 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    5258:	e0bffd17 	ldw	r2,-12(fp)
    525c:	10c00104 	addi	r3,r2,4
    5260:	e0fffd15 	stw	r3,-12(fp)
    5264:	e0fff017 	ldw	r3,-64(fp)
    5268:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    526c:	e0bffd17 	ldw	r2,-12(fp)
    5270:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    5274:	e0bff18b 	ldhu	r2,-58(fp)
    5278:	10800044 	addi	r2,r2,1
    527c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    5280:	00000d06 	br	52b8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    5284:	d0a80e17 	ldw	r2,-24520(gp)
    5288:	00c00044 	movi	r3,1
    528c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    5290:	d0a80e17 	ldw	r2,-24520(gp)
    5294:	1009883a 	mov	r4,r2
    5298:	e17ffc17 	ldw	r5,-16(fp)
    529c:	0005f240 	call	5f24 <OS_EventTaskRemoveMulti>
             }
			 break;
    52a0:	00000506 	br	52b8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    52a4:	d0a80e17 	ldw	r2,-24520(gp)
    52a8:	1009883a 	mov	r4,r2
    52ac:	e17ffc17 	ldw	r5,-16(fp)
    52b0:	0005f240 	call	5f24 <OS_EventTaskRemoveMulti>
             break;
    52b4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    52b8:	d0a80e17 	ldw	r2,-24520(gp)
    52bc:	10800c43 	ldbu	r2,49(r2)
    52c0:	10803fcc 	andi	r2,r2,255
    52c4:	10000326 	beq	r2,zero,52d4 <OSEventPendMulti+0x4f8>
    52c8:	108000a0 	cmpeqi	r2,r2,2
    52cc:	1000231e 	bne	r2,zero,535c <OSEventPendMulti+0x580>
    52d0:	00002a06 	br	537c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    52d4:	e0bff017 	ldw	r2,-64(fp)
    52d8:	10800003 	ldbu	r2,0(r2)
    52dc:	10803fcc 	andi	r2,r2,255
    52e0:	0080100e 	bge	zero,r2,5324 <OSEventPendMulti+0x548>
    52e4:	10c000d0 	cmplti	r3,r2,3
    52e8:	1800071e 	bne	r3,zero,5308 <OSEventPendMulti+0x52c>
    52ec:	108000e0 	cmpeqi	r2,r2,3
    52f0:	10000c26 	beq	r2,zero,5324 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    52f4:	e0bffe17 	ldw	r2,-8(fp)
    52f8:	10c00104 	addi	r3,r2,4
    52fc:	e0fffe15 	stw	r3,-8(fp)
    5300:	10000015 	stw	zero,0(r2)
                      break;
    5304:	00001206 	br	5350 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    5308:	e0bffe17 	ldw	r2,-8(fp)
    530c:	10c00104 	addi	r3,r2,4
    5310:	e0fffe15 	stw	r3,-8(fp)
    5314:	d0e80e17 	ldw	r3,-24520(gp)
    5318:	18c00917 	ldw	r3,36(r3)
    531c:	10c00015 	stw	r3,0(r2)
                      break;
    5320:	00000b06 	br	5350 <OSEventPendMulti+0x574>
    5324:	e0bff317 	ldw	r2,-52(fp)
    5328:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    532c:	e0bffa17 	ldw	r2,-24(fp)
    5330:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    5334:	e0bffd17 	ldw	r2,-12(fp)
    5338:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    533c:	e0800217 	ldw	r2,8(fp)
    5340:	00c00044 	movi	r3,1
    5344:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    5348:	e0bff18b 	ldhu	r2,-58(fp)
    534c:	00002206 	br	53d8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    5350:	e0800217 	ldw	r2,8(fp)
    5354:	10000005 	stb	zero,0(r2)
             break;
    5358:	00001006 	br	539c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    535c:	e0bffe17 	ldw	r2,-8(fp)
    5360:	10c00104 	addi	r3,r2,4
    5364:	e0fffe15 	stw	r3,-8(fp)
    5368:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    536c:	e0800217 	ldw	r2,8(fp)
    5370:	00c00384 	movi	r3,14
    5374:	10c00005 	stb	r3,0(r2)
             break;
    5378:	00000806 	br	539c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    537c:	e0bffe17 	ldw	r2,-8(fp)
    5380:	10c00104 	addi	r3,r2,4
    5384:	e0fffe15 	stw	r3,-8(fp)
    5388:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    538c:	e0800217 	ldw	r2,8(fp)
    5390:	00c00284 	movi	r3,10
    5394:	10c00005 	stb	r3,0(r2)
             break;
    5398:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    539c:	d0a80e17 	ldw	r2,-24520(gp)
    53a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    53a4:	d0a80e17 	ldw	r2,-24520(gp)
    53a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    53ac:	d0a80e17 	ldw	r2,-24520(gp)
    53b0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    53b4:	d0a80e17 	ldw	r2,-24520(gp)
    53b8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    53bc:	d0a80e17 	ldw	r2,-24520(gp)
    53c0:	10000915 	stw	zero,36(r2)
    53c4:	e0bff317 	ldw	r2,-52(fp)
    53c8:	e0bffb15 	stw	r2,-20(fp)
    53cc:	e0bffb17 	ldw	r2,-20(fp)
    53d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    53d4:	e0bff18b 	ldhu	r2,-58(fp)
}
    53d8:	e037883a 	mov	sp,fp
    53dc:	dfc00117 	ldw	ra,4(sp)
    53e0:	df000017 	ldw	fp,0(sp)
    53e4:	dec00204 	addi	sp,sp,8
    53e8:	f800283a 	ret

000053ec <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    53ec:	defffe04 	addi	sp,sp,-8
    53f0:	dfc00115 	stw	ra,4(sp)
    53f4:	df000015 	stw	fp,0(sp)
    53f8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    53fc:	000fdd80 	call	fdd8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    5400:	00061600 	call	6160 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    5404:	00061a40 	call	61a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    5408:	00063040 	call	6304 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    540c:	00060840 	call	6084 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    5410:	00082840 	call	8284 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    5414:	0008bcc0 	call	8bcc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    5418:	0009e000 	call	9e00 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    541c:	000620c0 	call	620c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    5420:	00062880 	call	6288 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    5424:	000fdf40 	call	fdf4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    5428:	0006b700 	call	6b70 <OSDebugInit>
#endif
}
    542c:	e037883a 	mov	sp,fp
    5430:	dfc00117 	ldw	ra,4(sp)
    5434:	df000017 	ldw	fp,0(sp)
    5438:	dec00204 	addi	sp,sp,8
    543c:	f800283a 	ret

00005440 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    5440:	defffc04 	addi	sp,sp,-16
    5444:	df000315 	stw	fp,12(sp)
    5448:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    544c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    5450:	d0a7ff43 	ldbu	r2,-24579(gp)
    5454:	10803fcc 	andi	r2,r2,255
    5458:	10800058 	cmpnei	r2,r2,1
    545c:	1000131e 	bne	r2,zero,54ac <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5460:	0005303a 	rdctl	r2,status
    5464:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5468:	e0fffe17 	ldw	r3,-8(fp)
    546c:	00bfff84 	movi	r2,-2
    5470:	1884703a 	and	r2,r3,r2
    5474:	1001703a 	wrctl	status,r2
  
  return context;
    5478:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    547c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    5480:	d0a80d03 	ldbu	r2,-24524(gp)
    5484:	10803fcc 	andi	r2,r2,255
    5488:	10803fe0 	cmpeqi	r2,r2,255
    548c:	1000031e 	bne	r2,zero,549c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    5490:	d0a80d03 	ldbu	r2,-24524(gp)
    5494:	10800044 	addi	r2,r2,1
    5498:	d0a80d05 	stb	r2,-24524(gp)
    549c:	e0bffd17 	ldw	r2,-12(fp)
    54a0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    54a4:	e0bfff17 	ldw	r2,-4(fp)
    54a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    54ac:	e037883a 	mov	sp,fp
    54b0:	df000017 	ldw	fp,0(sp)
    54b4:	dec00104 	addi	sp,sp,4
    54b8:	f800283a 	ret

000054bc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    54bc:	defffb04 	addi	sp,sp,-20
    54c0:	dfc00415 	stw	ra,16(sp)
    54c4:	df000315 	stw	fp,12(sp)
    54c8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    54cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    54d0:	d0a7ff43 	ldbu	r2,-24579(gp)
    54d4:	10803fcc 	andi	r2,r2,255
    54d8:	10800058 	cmpnei	r2,r2,1
    54dc:	10002f1e 	bne	r2,zero,559c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54e0:	0005303a 	rdctl	r2,status
    54e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54e8:	e0fffe17 	ldw	r3,-8(fp)
    54ec:	00bfff84 	movi	r2,-2
    54f0:	1884703a 	and	r2,r3,r2
    54f4:	1001703a 	wrctl	status,r2
  
  return context;
    54f8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    54fc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    5500:	d0a80d03 	ldbu	r2,-24524(gp)
    5504:	10803fcc 	andi	r2,r2,255
    5508:	10000326 	beq	r2,zero,5518 <OSIntExit+0x5c>
            OSIntNesting--;
    550c:	d0a80d03 	ldbu	r2,-24524(gp)
    5510:	10bfffc4 	addi	r2,r2,-1
    5514:	d0a80d05 	stb	r2,-24524(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    5518:	d0a80d03 	ldbu	r2,-24524(gp)
    551c:	10803fcc 	andi	r2,r2,255
    5520:	10001a1e 	bne	r2,zero,558c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    5524:	d0a7ff03 	ldbu	r2,-24580(gp)
    5528:	10803fcc 	andi	r2,r2,255
    552c:	1000171e 	bne	r2,zero,558c <OSIntExit+0xd0>
                OS_SchedNew();
    5530:	00065640 	call	6564 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    5534:	d0e80103 	ldbu	r3,-24572(gp)
    5538:	d0a80143 	ldbu	r2,-24571(gp)
    553c:	18c03fcc 	andi	r3,r3,255
    5540:	10803fcc 	andi	r2,r2,255
    5544:	18801126 	beq	r3,r2,558c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    5548:	d0a80103 	ldbu	r2,-24572(gp)
    554c:	10c03fcc 	andi	r3,r2,255
    5550:	008000b4 	movhi	r2,2
    5554:	10865604 	addi	r2,r2,6488
    5558:	18c7883a 	add	r3,r3,r3
    555c:	18c7883a 	add	r3,r3,r3
    5560:	10c5883a 	add	r2,r2,r3
    5564:	10800017 	ldw	r2,0(r2)
    5568:	d0a80915 	stw	r2,-24540(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    556c:	d0a80917 	ldw	r2,-24540(gp)
    5570:	10c00e17 	ldw	r3,56(r2)
    5574:	18c00044 	addi	r3,r3,1
    5578:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    557c:	d0a80417 	ldw	r2,-24560(gp)
    5580:	10800044 	addi	r2,r2,1
    5584:	d0a80415 	stw	r2,-24560(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    5588:	000fb180 	call	fb18 <OSCtxSw>
    558c:	e0bffd17 	ldw	r2,-12(fp)
    5590:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5594:	e0bfff17 	ldw	r2,-4(fp)
    5598:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    559c:	e037883a 	mov	sp,fp
    55a0:	dfc00117 	ldw	ra,4(sp)
    55a4:	df000017 	ldw	fp,0(sp)
    55a8:	dec00204 	addi	sp,sp,8
    55ac:	f800283a 	ret

000055b0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    55b0:	defffc04 	addi	sp,sp,-16
    55b4:	df000315 	stw	fp,12(sp)
    55b8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55bc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    55c0:	d0a7ff43 	ldbu	r2,-24579(gp)
    55c4:	10803fcc 	andi	r2,r2,255
    55c8:	10800058 	cmpnei	r2,r2,1
    55cc:	1000161e 	bne	r2,zero,5628 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55d0:	0005303a 	rdctl	r2,status
    55d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d8:	e0fffe17 	ldw	r3,-8(fp)
    55dc:	00bfff84 	movi	r2,-2
    55e0:	1884703a 	and	r2,r3,r2
    55e4:	1001703a 	wrctl	status,r2
  
  return context;
    55e8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    55ec:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    55f0:	d0a80d03 	ldbu	r2,-24524(gp)
    55f4:	10803fcc 	andi	r2,r2,255
    55f8:	1000071e 	bne	r2,zero,5618 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    55fc:	d0a7ff03 	ldbu	r2,-24580(gp)
    5600:	10803fcc 	andi	r2,r2,255
    5604:	10803fe0 	cmpeqi	r2,r2,255
    5608:	1000031e 	bne	r2,zero,5618 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    560c:	d0a7ff03 	ldbu	r2,-24580(gp)
    5610:	10800044 	addi	r2,r2,1
    5614:	d0a7ff05 	stb	r2,-24580(gp)
    5618:	e0bffd17 	ldw	r2,-12(fp)
    561c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5620:	e0bfff17 	ldw	r2,-4(fp)
    5624:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    5628:	e037883a 	mov	sp,fp
    562c:	df000017 	ldw	fp,0(sp)
    5630:	dec00104 	addi	sp,sp,4
    5634:	f800283a 	ret

00005638 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    5638:	defff804 	addi	sp,sp,-32
    563c:	dfc00715 	stw	ra,28(sp)
    5640:	df000615 	stw	fp,24(sp)
    5644:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5648:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    564c:	d0a7ff43 	ldbu	r2,-24579(gp)
    5650:	10803fcc 	andi	r2,r2,255
    5654:	10800058 	cmpnei	r2,r2,1
    5658:	1000281e 	bne	r2,zero,56fc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    565c:	0005303a 	rdctl	r2,status
    5660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5664:	e0fffb17 	ldw	r3,-20(fp)
    5668:	00bfff84 	movi	r2,-2
    566c:	1884703a 	and	r2,r3,r2
    5670:	1001703a 	wrctl	status,r2
  
  return context;
    5674:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    5678:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    567c:	d0a7ff03 	ldbu	r2,-24580(gp)
    5680:	10803fcc 	andi	r2,r2,255
    5684:	10001926 	beq	r2,zero,56ec <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    5688:	d0a7ff03 	ldbu	r2,-24580(gp)
    568c:	10bfffc4 	addi	r2,r2,-1
    5690:	d0a7ff05 	stb	r2,-24580(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    5694:	d0a7ff03 	ldbu	r2,-24580(gp)
    5698:	10803fcc 	andi	r2,r2,255
    569c:	10000e1e 	bne	r2,zero,56d8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    56a0:	d0a80d03 	ldbu	r2,-24524(gp)
    56a4:	10803fcc 	andi	r2,r2,255
    56a8:	1000061e 	bne	r2,zero,56c4 <OSSchedUnlock+0x8c>
    56ac:	e0bffa17 	ldw	r2,-24(fp)
    56b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56b4:	e0bffc17 	ldw	r2,-16(fp)
    56b8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    56bc:	00064980 	call	6498 <OS_Sched>
    56c0:	00000e06 	br	56fc <OSSchedUnlock+0xc4>
    56c4:	e0bffa17 	ldw	r2,-24(fp)
    56c8:	e0bffd15 	stw	r2,-12(fp)
    56cc:	e0bffd17 	ldw	r2,-12(fp)
    56d0:	1001703a 	wrctl	status,r2
    56d4:	00000906 	br	56fc <OSSchedUnlock+0xc4>
    56d8:	e0bffa17 	ldw	r2,-24(fp)
    56dc:	e0bffe15 	stw	r2,-8(fp)
    56e0:	e0bffe17 	ldw	r2,-8(fp)
    56e4:	1001703a 	wrctl	status,r2
    56e8:	00000406 	br	56fc <OSSchedUnlock+0xc4>
    56ec:	e0bffa17 	ldw	r2,-24(fp)
    56f0:	e0bfff15 	stw	r2,-4(fp)
    56f4:	e0bfff17 	ldw	r2,-4(fp)
    56f8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    56fc:	e037883a 	mov	sp,fp
    5700:	dfc00117 	ldw	ra,4(sp)
    5704:	df000017 	ldw	fp,0(sp)
    5708:	dec00204 	addi	sp,sp,8
    570c:	f800283a 	ret

00005710 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    5710:	defffe04 	addi	sp,sp,-8
    5714:	dfc00115 	stw	ra,4(sp)
    5718:	df000015 	stw	fp,0(sp)
    571c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    5720:	d0a7ff43 	ldbu	r2,-24579(gp)
    5724:	10803fcc 	andi	r2,r2,255
    5728:	10000f1e 	bne	r2,zero,5768 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    572c:	00065640 	call	6564 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    5730:	d0a80103 	ldbu	r2,-24572(gp)
    5734:	d0a80145 	stb	r2,-24571(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    5738:	d0a80103 	ldbu	r2,-24572(gp)
    573c:	10c03fcc 	andi	r3,r2,255
    5740:	008000b4 	movhi	r2,2
    5744:	10865604 	addi	r2,r2,6488
    5748:	18c7883a 	add	r3,r3,r3
    574c:	18c7883a 	add	r3,r3,r3
    5750:	10c5883a 	add	r2,r2,r3
    5754:	10800017 	ldw	r2,0(r2)
    5758:	d0a80915 	stw	r2,-24540(gp)
        OSTCBCur      = OSTCBHighRdy;
    575c:	d0a80917 	ldw	r2,-24540(gp)
    5760:	d0a80e15 	stw	r2,-24520(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    5764:	000fba40 	call	fba4 <OSStartHighRdy>
    }
}
    5768:	e037883a 	mov	sp,fp
    576c:	dfc00117 	ldw	ra,4(sp)
    5770:	df000017 	ldw	fp,0(sp)
    5774:	dec00204 	addi	sp,sp,8
    5778:	f800283a 	ret

0000577c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    577c:	defff904 	addi	sp,sp,-28
    5780:	dfc00615 	stw	ra,24(sp)
    5784:	df000515 	stw	fp,20(sp)
    5788:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    578c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    5790:	01000084 	movi	r4,2
    5794:	000c2a80 	call	c2a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5798:	0005303a 	rdctl	r2,status
    579c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57a0:	e0fffc17 	ldw	r3,-16(fp)
    57a4:	00bfff84 	movi	r2,-2
    57a8:	1884703a 	and	r2,r3,r2
    57ac:	1001703a 	wrctl	status,r2
  
  return context;
    57b0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    57b4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    57b8:	d0280015 	stw	zero,-24576(gp)
    57bc:	e0bffb17 	ldw	r2,-20(fp)
    57c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57c4:	e0bffd17 	ldw	r2,-12(fp)
    57c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    57cc:	0009883a 	mov	r4,zero
    57d0:	000c2a80 	call	c2a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57d4:	0005303a 	rdctl	r2,status
    57d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57dc:	e0fffe17 	ldw	r3,-8(fp)
    57e0:	00bfff84 	movi	r2,-2
    57e4:	1884703a 	and	r2,r3,r2
    57e8:	1001703a 	wrctl	status,r2
  
  return context;
    57ec:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    57f0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    57f4:	d0a80017 	ldw	r2,-24576(gp)
    57f8:	d0a80515 	stw	r2,-24556(gp)
    OSStatRdy    = OS_TRUE;
    57fc:	00800044 	movi	r2,1
    5800:	d0a81105 	stb	r2,-24508(gp)
    5804:	e0bffb17 	ldw	r2,-20(fp)
    5808:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    580c:	e0bfff17 	ldw	r2,-4(fp)
    5810:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    5814:	e037883a 	mov	sp,fp
    5818:	dfc00117 	ldw	ra,4(sp)
    581c:	df000017 	ldw	fp,0(sp)
    5820:	dec00204 	addi	sp,sp,8
    5824:	f800283a 	ret

00005828 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    5828:	defff704 	addi	sp,sp,-36
    582c:	dfc00815 	stw	ra,32(sp)
    5830:	df000715 	stw	fp,28(sp)
    5834:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5838:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    583c:	000fdbc0 	call	fdbc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5840:	0005303a 	rdctl	r2,status
    5844:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5848:	e0fffc17 	ldw	r3,-16(fp)
    584c:	00bfff84 	movi	r2,-2
    5850:	1884703a 	and	r2,r3,r2
    5854:	1001703a 	wrctl	status,r2
  
  return context;
    5858:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    585c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    5860:	d0a80f17 	ldw	r2,-24516(gp)
    5864:	10800044 	addi	r2,r2,1
    5868:	d0a80f15 	stw	r2,-24516(gp)
    586c:	e0bffb17 	ldw	r2,-20(fp)
    5870:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5874:	e0bffd17 	ldw	r2,-12(fp)
    5878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    587c:	d0a7ff43 	ldbu	r2,-24579(gp)
    5880:	10803fcc 	andi	r2,r2,255
    5884:	10800058 	cmpnei	r2,r2,1
    5888:	1000691e 	bne	r2,zero,5a30 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    588c:	d0a80303 	ldbu	r2,-24564(gp)
    5890:	10803fcc 	andi	r2,r2,255
    5894:	10c00060 	cmpeqi	r3,r2,1
    5898:	1800061e 	bne	r3,zero,58b4 <OSTimeTick+0x8c>
    589c:	10c000a0 	cmpeqi	r3,r2,2
    58a0:	1800061e 	bne	r3,zero,58bc <OSTimeTick+0x94>
    58a4:	10000a1e 	bne	r2,zero,58d0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    58a8:	00800044 	movi	r2,1
    58ac:	e0bffa05 	stb	r2,-24(fp)
                 break;
    58b0:	00000b06 	br	58e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    58b4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    58b8:	00000906 	br	58e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    58bc:	00800044 	movi	r2,1
    58c0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    58c4:	00800044 	movi	r2,1
    58c8:	d0a80305 	stb	r2,-24564(gp)
                 break;
    58cc:	00000406 	br	58e0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    58d0:	00800044 	movi	r2,1
    58d4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    58d8:	d0280305 	stb	zero,-24564(gp)
                 break;
    58dc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    58e0:	e0bffa03 	ldbu	r2,-24(fp)
    58e4:	1000011e 	bne	r2,zero,58ec <OSTimeTick+0xc4>
            return;
    58e8:	00005106 	br	5a30 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    58ec:	d0a80217 	ldw	r2,-24568(gp)
    58f0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    58f4:	00004906 	br	5a1c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58f8:	0005303a 	rdctl	r2,status
    58fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5900:	e0fffe17 	ldw	r3,-8(fp)
    5904:	00bfff84 	movi	r2,-2
    5908:	1884703a 	and	r2,r3,r2
    590c:	1001703a 	wrctl	status,r2
  
  return context;
    5910:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    5914:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    5918:	e0bff917 	ldw	r2,-28(fp)
    591c:	10800b8b 	ldhu	r2,46(r2)
    5920:	10bfffcc 	andi	r2,r2,65535
    5924:	10003626 	beq	r2,zero,5a00 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    5928:	e0bff917 	ldw	r2,-28(fp)
    592c:	10800b8b 	ldhu	r2,46(r2)
    5930:	10bfffc4 	addi	r2,r2,-1
    5934:	1007883a 	mov	r3,r2
    5938:	e0bff917 	ldw	r2,-28(fp)
    593c:	10c00b8d 	sth	r3,46(r2)
    5940:	e0bff917 	ldw	r2,-28(fp)
    5944:	10800b8b 	ldhu	r2,46(r2)
    5948:	10bfffcc 	andi	r2,r2,65535
    594c:	10002c1e 	bne	r2,zero,5a00 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    5950:	e0bff917 	ldw	r2,-28(fp)
    5954:	10800c03 	ldbu	r2,48(r2)
    5958:	10803fcc 	andi	r2,r2,255
    595c:	10800dcc 	andi	r2,r2,55
    5960:	10000b26 	beq	r2,zero,5990 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    5964:	e0bff917 	ldw	r2,-28(fp)
    5968:	10c00c03 	ldbu	r3,48(r2)
    596c:	00bff204 	movi	r2,-56
    5970:	1884703a 	and	r2,r3,r2
    5974:	1007883a 	mov	r3,r2
    5978:	e0bff917 	ldw	r2,-28(fp)
    597c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    5980:	e0bff917 	ldw	r2,-28(fp)
    5984:	00c00044 	movi	r3,1
    5988:	10c00c45 	stb	r3,49(r2)
    598c:	00000206 	br	5998 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    5990:	e0bff917 	ldw	r2,-28(fp)
    5994:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    5998:	e0bff917 	ldw	r2,-28(fp)
    599c:	10800c03 	ldbu	r2,48(r2)
    59a0:	10803fcc 	andi	r2,r2,255
    59a4:	1080020c 	andi	r2,r2,8
    59a8:	1000151e 	bne	r2,zero,5a00 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    59ac:	e0bff917 	ldw	r2,-28(fp)
    59b0:	10c00d83 	ldbu	r3,54(r2)
    59b4:	d0a80b03 	ldbu	r2,-24532(gp)
    59b8:	1884b03a 	or	r2,r3,r2
    59bc:	d0a80b05 	stb	r2,-24532(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    59c0:	e0bff917 	ldw	r2,-28(fp)
    59c4:	10800d03 	ldbu	r2,52(r2)
    59c8:	10c03fcc 	andi	r3,r2,255
    59cc:	e0bff917 	ldw	r2,-28(fp)
    59d0:	10800d03 	ldbu	r2,52(r2)
    59d4:	11003fcc 	andi	r4,r2,255
    59d8:	d0a80b44 	addi	r2,gp,-24531
    59dc:	2085883a 	add	r2,r4,r2
    59e0:	11000003 	ldbu	r4,0(r2)
    59e4:	e0bff917 	ldw	r2,-28(fp)
    59e8:	10800d43 	ldbu	r2,53(r2)
    59ec:	2084b03a 	or	r2,r4,r2
    59f0:	1009883a 	mov	r4,r2
    59f4:	d0a80b44 	addi	r2,gp,-24531
    59f8:	1885883a 	add	r2,r3,r2
    59fc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    5a00:	e0bff917 	ldw	r2,-28(fp)
    5a04:	10800517 	ldw	r2,20(r2)
    5a08:	e0bff915 	stw	r2,-28(fp)
    5a0c:	e0bffb17 	ldw	r2,-20(fp)
    5a10:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a14:	e0bfff17 	ldw	r2,-4(fp)
    5a18:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    5a1c:	e0bff917 	ldw	r2,-28(fp)
    5a20:	10800c83 	ldbu	r2,50(r2)
    5a24:	10803fcc 	andi	r2,r2,255
    5a28:	10800518 	cmpnei	r2,r2,20
    5a2c:	103fb21e 	bne	r2,zero,58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    5a30:	e037883a 	mov	sp,fp
    5a34:	dfc00117 	ldw	ra,4(sp)
    5a38:	df000017 	ldw	fp,0(sp)
    5a3c:	dec00204 	addi	sp,sp,8
    5a40:	f800283a 	ret

00005a44 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    5a44:	deffff04 	addi	sp,sp,-4
    5a48:	df000015 	stw	fp,0(sp)
    5a4c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    5a50:	00804784 	movi	r2,286
}
    5a54:	e037883a 	mov	sp,fp
    5a58:	df000017 	ldw	fp,0(sp)
    5a5c:	dec00104 	addi	sp,sp,4
    5a60:	f800283a 	ret

00005a64 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    5a64:	deffff04 	addi	sp,sp,-4
    5a68:	df000015 	stw	fp,0(sp)
    5a6c:	d839883a 	mov	fp,sp
}
    5a70:	e037883a 	mov	sp,fp
    5a74:	df000017 	ldw	fp,0(sp)
    5a78:	dec00104 	addi	sp,sp,4
    5a7c:	f800283a 	ret

00005a80 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    5a80:	defff804 	addi	sp,sp,-32
    5a84:	dfc00715 	stw	ra,28(sp)
    5a88:	df000615 	stw	fp,24(sp)
    5a8c:	df000604 	addi	fp,sp,24
    5a90:	e13ffc15 	stw	r4,-16(fp)
    5a94:	e17ffd15 	stw	r5,-12(fp)
    5a98:	3007883a 	mov	r3,r6
    5a9c:	3805883a 	mov	r2,r7
    5aa0:	e0fffe05 	stb	r3,-8(fp)
    5aa4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    5aa8:	e0bffc17 	ldw	r2,-16(fp)
    5aac:	10800283 	ldbu	r2,10(r2)
    5ab0:	10c03fcc 	andi	r3,r2,255
    5ab4:	00800074 	movhi	r2,1
    5ab8:	10819c04 	addi	r2,r2,1648
    5abc:	10c5883a 	add	r2,r2,r3
    5ac0:	10800003 	ldbu	r2,0(r2)
    5ac4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    5ac8:	e0bffa03 	ldbu	r2,-24(fp)
    5acc:	e0fffc17 	ldw	r3,-16(fp)
    5ad0:	1885883a 	add	r2,r3,r2
    5ad4:	10800204 	addi	r2,r2,8
    5ad8:	108000c3 	ldbu	r2,3(r2)
    5adc:	10c03fcc 	andi	r3,r2,255
    5ae0:	00800074 	movhi	r2,1
    5ae4:	10819c04 	addi	r2,r2,1648
    5ae8:	10c5883a 	add	r2,r2,r3
    5aec:	10800003 	ldbu	r2,0(r2)
    5af0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    5af4:	e0bffa03 	ldbu	r2,-24(fp)
    5af8:	100490fa 	slli	r2,r2,3
    5afc:	1007883a 	mov	r3,r2
    5b00:	e0bffa43 	ldbu	r2,-23(fp)
    5b04:	1885883a 	add	r2,r3,r2
    5b08:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    5b0c:	e0fffa83 	ldbu	r3,-22(fp)
    5b10:	008000b4 	movhi	r2,2
    5b14:	10865604 	addi	r2,r2,6488
    5b18:	18c7883a 	add	r3,r3,r3
    5b1c:	18c7883a 	add	r3,r3,r3
    5b20:	10c5883a 	add	r2,r2,r3
    5b24:	10800017 	ldw	r2,0(r2)
    5b28:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    5b2c:	e0bffb17 	ldw	r2,-20(fp)
    5b30:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    5b34:	e0bffb17 	ldw	r2,-20(fp)
    5b38:	e0fffd17 	ldw	r3,-12(fp)
    5b3c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    5b40:	e0bffb17 	ldw	r2,-20(fp)
    5b44:	10800c03 	ldbu	r2,48(r2)
    5b48:	1007883a 	mov	r3,r2
    5b4c:	e0bffe03 	ldbu	r2,-8(fp)
    5b50:	0084303a 	nor	r2,zero,r2
    5b54:	1884703a 	and	r2,r3,r2
    5b58:	1007883a 	mov	r3,r2
    5b5c:	e0bffb17 	ldw	r2,-20(fp)
    5b60:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    5b64:	e0bffb17 	ldw	r2,-20(fp)
    5b68:	e0ffff03 	ldbu	r3,-4(fp)
    5b6c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    5b70:	e0bffb17 	ldw	r2,-20(fp)
    5b74:	10800c03 	ldbu	r2,48(r2)
    5b78:	10803fcc 	andi	r2,r2,255
    5b7c:	1080020c 	andi	r2,r2,8
    5b80:	1000111e 	bne	r2,zero,5bc8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    5b84:	e0bffb17 	ldw	r2,-20(fp)
    5b88:	10c00d83 	ldbu	r3,54(r2)
    5b8c:	d0a80b03 	ldbu	r2,-24532(gp)
    5b90:	1884b03a 	or	r2,r3,r2
    5b94:	d0a80b05 	stb	r2,-24532(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    5b98:	e0fffa03 	ldbu	r3,-24(fp)
    5b9c:	e13ffa03 	ldbu	r4,-24(fp)
    5ba0:	d0a80b44 	addi	r2,gp,-24531
    5ba4:	2085883a 	add	r2,r4,r2
    5ba8:	11000003 	ldbu	r4,0(r2)
    5bac:	e0bffb17 	ldw	r2,-20(fp)
    5bb0:	10800d43 	ldbu	r2,53(r2)
    5bb4:	2084b03a 	or	r2,r4,r2
    5bb8:	1009883a 	mov	r4,r2
    5bbc:	d0a80b44 	addi	r2,gp,-24531
    5bc0:	1885883a 	add	r2,r3,r2
    5bc4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    5bc8:	e13ffb17 	ldw	r4,-20(fp)
    5bcc:	e17ffc17 	ldw	r5,-16(fp)
    5bd0:	0005e700 	call	5e70 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    5bd4:	e0bffb17 	ldw	r2,-20(fp)
    5bd8:	10800817 	ldw	r2,32(r2)
    5bdc:	10000826 	beq	r2,zero,5c00 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    5be0:	e0bffb17 	ldw	r2,-20(fp)
    5be4:	10800817 	ldw	r2,32(r2)
    5be8:	e13ffb17 	ldw	r4,-20(fp)
    5bec:	100b883a 	mov	r5,r2
    5bf0:	0005f240 	call	5f24 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    5bf4:	e0bffb17 	ldw	r2,-20(fp)
    5bf8:	e0fffc17 	ldw	r3,-16(fp)
    5bfc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    5c00:	e0bffa83 	ldbu	r2,-22(fp)
}
    5c04:	e037883a 	mov	sp,fp
    5c08:	dfc00117 	ldw	ra,4(sp)
    5c0c:	df000017 	ldw	fp,0(sp)
    5c10:	dec00204 	addi	sp,sp,8
    5c14:	f800283a 	ret

00005c18 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    5c18:	defffd04 	addi	sp,sp,-12
    5c1c:	df000215 	stw	fp,8(sp)
    5c20:	df000204 	addi	fp,sp,8
    5c24:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    5c28:	d0a80e17 	ldw	r2,-24520(gp)
    5c2c:	e0ffff17 	ldw	r3,-4(fp)
    5c30:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    5c34:	d0a80e17 	ldw	r2,-24520(gp)
    5c38:	10800d03 	ldbu	r2,52(r2)
    5c3c:	10803fcc 	andi	r2,r2,255
    5c40:	d0e80e17 	ldw	r3,-24520(gp)
    5c44:	18c00d03 	ldbu	r3,52(r3)
    5c48:	18c03fcc 	andi	r3,r3,255
    5c4c:	e13fff17 	ldw	r4,-4(fp)
    5c50:	20c7883a 	add	r3,r4,r3
    5c54:	18c00204 	addi	r3,r3,8
    5c58:	190000c3 	ldbu	r4,3(r3)
    5c5c:	d0e80e17 	ldw	r3,-24520(gp)
    5c60:	18c00d43 	ldbu	r3,53(r3)
    5c64:	20c6b03a 	or	r3,r4,r3
    5c68:	1809883a 	mov	r4,r3
    5c6c:	e0ffff17 	ldw	r3,-4(fp)
    5c70:	1885883a 	add	r2,r3,r2
    5c74:	10800204 	addi	r2,r2,8
    5c78:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5c7c:	e0bfff17 	ldw	r2,-4(fp)
    5c80:	10c00283 	ldbu	r3,10(r2)
    5c84:	d0a80e17 	ldw	r2,-24520(gp)
    5c88:	10800d83 	ldbu	r2,54(r2)
    5c8c:	1884b03a 	or	r2,r3,r2
    5c90:	1007883a 	mov	r3,r2
    5c94:	e0bfff17 	ldw	r2,-4(fp)
    5c98:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5c9c:	d0a80e17 	ldw	r2,-24520(gp)
    5ca0:	10800d03 	ldbu	r2,52(r2)
    5ca4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5ca8:	e0fffe03 	ldbu	r3,-8(fp)
    5cac:	e13ffe03 	ldbu	r4,-8(fp)
    5cb0:	d0a80b44 	addi	r2,gp,-24531
    5cb4:	2085883a 	add	r2,r4,r2
    5cb8:	10800003 	ldbu	r2,0(r2)
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	d0a80e17 	ldw	r2,-24520(gp)
    5cc4:	10800d43 	ldbu	r2,53(r2)
    5cc8:	0084303a 	nor	r2,zero,r2
    5ccc:	2084703a 	and	r2,r4,r2
    5cd0:	1009883a 	mov	r4,r2
    5cd4:	d0a80b44 	addi	r2,gp,-24531
    5cd8:	1885883a 	add	r2,r3,r2
    5cdc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5ce0:	e0fffe03 	ldbu	r3,-8(fp)
    5ce4:	d0a80b44 	addi	r2,gp,-24531
    5ce8:	1885883a 	add	r2,r3,r2
    5cec:	10800003 	ldbu	r2,0(r2)
    5cf0:	10803fcc 	andi	r2,r2,255
    5cf4:	1000071e 	bne	r2,zero,5d14 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5cf8:	d0a80e17 	ldw	r2,-24520(gp)
    5cfc:	10800d83 	ldbu	r2,54(r2)
    5d00:	0084303a 	nor	r2,zero,r2
    5d04:	1007883a 	mov	r3,r2
    5d08:	d0a80b03 	ldbu	r2,-24532(gp)
    5d0c:	1884703a 	and	r2,r3,r2
    5d10:	d0a80b05 	stb	r2,-24532(gp)
    }
}
    5d14:	e037883a 	mov	sp,fp
    5d18:	df000017 	ldw	fp,0(sp)
    5d1c:	dec00104 	addi	sp,sp,4
    5d20:	f800283a 	ret

00005d24 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    5d24:	defffb04 	addi	sp,sp,-20
    5d28:	df000415 	stw	fp,16(sp)
    5d2c:	df000404 	addi	fp,sp,16
    5d30:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    5d34:	d0a80e17 	ldw	r2,-24520(gp)
    5d38:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    5d3c:	d0a80e17 	ldw	r2,-24520(gp)
    5d40:	e0ffff17 	ldw	r3,-4(fp)
    5d44:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    5d48:	e0bfff17 	ldw	r2,-4(fp)
    5d4c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    5d50:	e0bffc17 	ldw	r2,-16(fp)
    5d54:	10800017 	ldw	r2,0(r2)
    5d58:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5d5c:	00002006 	br	5de0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    5d60:	d0a80e17 	ldw	r2,-24520(gp)
    5d64:	10800d03 	ldbu	r2,52(r2)
    5d68:	10803fcc 	andi	r2,r2,255
    5d6c:	d0e80e17 	ldw	r3,-24520(gp)
    5d70:	18c00d03 	ldbu	r3,52(r3)
    5d74:	18c03fcc 	andi	r3,r3,255
    5d78:	e13ffd17 	ldw	r4,-12(fp)
    5d7c:	20c7883a 	add	r3,r4,r3
    5d80:	18c00204 	addi	r3,r3,8
    5d84:	190000c3 	ldbu	r4,3(r3)
    5d88:	d0e80e17 	ldw	r3,-24520(gp)
    5d8c:	18c00d43 	ldbu	r3,53(r3)
    5d90:	20c6b03a 	or	r3,r4,r3
    5d94:	1809883a 	mov	r4,r3
    5d98:	e0fffd17 	ldw	r3,-12(fp)
    5d9c:	1885883a 	add	r2,r3,r2
    5da0:	10800204 	addi	r2,r2,8
    5da4:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    5da8:	e0bffd17 	ldw	r2,-12(fp)
    5dac:	10c00283 	ldbu	r3,10(r2)
    5db0:	d0a80e17 	ldw	r2,-24520(gp)
    5db4:	10800d83 	ldbu	r2,54(r2)
    5db8:	1884b03a 	or	r2,r3,r2
    5dbc:	1007883a 	mov	r3,r2
    5dc0:	e0bffd17 	ldw	r2,-12(fp)
    5dc4:	10c00285 	stb	r3,10(r2)
        pevents++;
    5dc8:	e0bffc17 	ldw	r2,-16(fp)
    5dcc:	10800104 	addi	r2,r2,4
    5dd0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    5dd4:	e0bffc17 	ldw	r2,-16(fp)
    5dd8:	10800017 	ldw	r2,0(r2)
    5ddc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    5de0:	e0bffd17 	ldw	r2,-12(fp)
    5de4:	103fde1e 	bne	r2,zero,5d60 <__alt_mem_Flash_flash_data+0xf4005d60>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    5de8:	d0a80e17 	ldw	r2,-24520(gp)
    5dec:	10800d03 	ldbu	r2,52(r2)
    5df0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    5df4:	e0fffe03 	ldbu	r3,-8(fp)
    5df8:	e13ffe03 	ldbu	r4,-8(fp)
    5dfc:	d0a80b44 	addi	r2,gp,-24531
    5e00:	2085883a 	add	r2,r4,r2
    5e04:	10800003 	ldbu	r2,0(r2)
    5e08:	1009883a 	mov	r4,r2
    5e0c:	d0a80e17 	ldw	r2,-24520(gp)
    5e10:	10800d43 	ldbu	r2,53(r2)
    5e14:	0084303a 	nor	r2,zero,r2
    5e18:	2084703a 	and	r2,r4,r2
    5e1c:	1009883a 	mov	r4,r2
    5e20:	d0a80b44 	addi	r2,gp,-24531
    5e24:	1885883a 	add	r2,r3,r2
    5e28:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    5e2c:	e0fffe03 	ldbu	r3,-8(fp)
    5e30:	d0a80b44 	addi	r2,gp,-24531
    5e34:	1885883a 	add	r2,r3,r2
    5e38:	10800003 	ldbu	r2,0(r2)
    5e3c:	10803fcc 	andi	r2,r2,255
    5e40:	1000071e 	bne	r2,zero,5e60 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    5e44:	d0a80e17 	ldw	r2,-24520(gp)
    5e48:	10800d83 	ldbu	r2,54(r2)
    5e4c:	0084303a 	nor	r2,zero,r2
    5e50:	1007883a 	mov	r3,r2
    5e54:	d0a80b03 	ldbu	r2,-24532(gp)
    5e58:	1884703a 	and	r2,r3,r2
    5e5c:	d0a80b05 	stb	r2,-24532(gp)
    }
}
    5e60:	e037883a 	mov	sp,fp
    5e64:	df000017 	ldw	fp,0(sp)
    5e68:	dec00104 	addi	sp,sp,4
    5e6c:	f800283a 	ret

00005e70 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    5e70:	defffc04 	addi	sp,sp,-16
    5e74:	df000315 	stw	fp,12(sp)
    5e78:	df000304 	addi	fp,sp,12
    5e7c:	e13ffe15 	stw	r4,-8(fp)
    5e80:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    5e84:	e0bffe17 	ldw	r2,-8(fp)
    5e88:	10800d03 	ldbu	r2,52(r2)
    5e8c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    5e90:	e0bffd03 	ldbu	r2,-12(fp)
    5e94:	e0fffd03 	ldbu	r3,-12(fp)
    5e98:	e13fff17 	ldw	r4,-4(fp)
    5e9c:	20c7883a 	add	r3,r4,r3
    5ea0:	18c00204 	addi	r3,r3,8
    5ea4:	18c000c3 	ldbu	r3,3(r3)
    5ea8:	1809883a 	mov	r4,r3
    5eac:	e0fffe17 	ldw	r3,-8(fp)
    5eb0:	18c00d43 	ldbu	r3,53(r3)
    5eb4:	00c6303a 	nor	r3,zero,r3
    5eb8:	20c6703a 	and	r3,r4,r3
    5ebc:	1809883a 	mov	r4,r3
    5ec0:	e0ffff17 	ldw	r3,-4(fp)
    5ec4:	1885883a 	add	r2,r3,r2
    5ec8:	10800204 	addi	r2,r2,8
    5ecc:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    5ed0:	e0bffd03 	ldbu	r2,-12(fp)
    5ed4:	e0ffff17 	ldw	r3,-4(fp)
    5ed8:	1885883a 	add	r2,r3,r2
    5edc:	10800204 	addi	r2,r2,8
    5ee0:	108000c3 	ldbu	r2,3(r2)
    5ee4:	10803fcc 	andi	r2,r2,255
    5ee8:	10000a1e 	bne	r2,zero,5f14 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    5eec:	e0bfff17 	ldw	r2,-4(fp)
    5ef0:	10800283 	ldbu	r2,10(r2)
    5ef4:	1007883a 	mov	r3,r2
    5ef8:	e0bffe17 	ldw	r2,-8(fp)
    5efc:	10800d83 	ldbu	r2,54(r2)
    5f00:	0084303a 	nor	r2,zero,r2
    5f04:	1884703a 	and	r2,r3,r2
    5f08:	1007883a 	mov	r3,r2
    5f0c:	e0bfff17 	ldw	r2,-4(fp)
    5f10:	10c00285 	stb	r3,10(r2)
    }
}
    5f14:	e037883a 	mov	sp,fp
    5f18:	df000017 	ldw	fp,0(sp)
    5f1c:	dec00104 	addi	sp,sp,4
    5f20:	f800283a 	ret

00005f24 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    5f24:	defffa04 	addi	sp,sp,-24
    5f28:	df000515 	stw	fp,20(sp)
    5f2c:	df000504 	addi	fp,sp,20
    5f30:	e13ffe15 	stw	r4,-8(fp)
    5f34:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    5f38:	e0bffe17 	ldw	r2,-8(fp)
    5f3c:	10800d03 	ldbu	r2,52(r2)
    5f40:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    5f44:	e0bffe17 	ldw	r2,-8(fp)
    5f48:	10800d83 	ldbu	r2,54(r2)
    5f4c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    5f50:	e0bffe17 	ldw	r2,-8(fp)
    5f54:	10800d43 	ldbu	r2,53(r2)
    5f58:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    5f5c:	e0bfff17 	ldw	r2,-4(fp)
    5f60:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    5f64:	e0bffb17 	ldw	r2,-20(fp)
    5f68:	10800017 	ldw	r2,0(r2)
    5f6c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    5f70:	00002506 	br	6008 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    5f74:	e0bffd03 	ldbu	r2,-12(fp)
    5f78:	e0fffd03 	ldbu	r3,-12(fp)
    5f7c:	e13ffc17 	ldw	r4,-16(fp)
    5f80:	20c7883a 	add	r3,r4,r3
    5f84:	18c00204 	addi	r3,r3,8
    5f88:	18c000c3 	ldbu	r3,3(r3)
    5f8c:	1809883a 	mov	r4,r3
    5f90:	e0fffd83 	ldbu	r3,-10(fp)
    5f94:	00c6303a 	nor	r3,zero,r3
    5f98:	20c6703a 	and	r3,r4,r3
    5f9c:	1809883a 	mov	r4,r3
    5fa0:	e0fffc17 	ldw	r3,-16(fp)
    5fa4:	1885883a 	add	r2,r3,r2
    5fa8:	10800204 	addi	r2,r2,8
    5fac:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    5fb0:	e0bffd03 	ldbu	r2,-12(fp)
    5fb4:	e0fffc17 	ldw	r3,-16(fp)
    5fb8:	1885883a 	add	r2,r3,r2
    5fbc:	10800204 	addi	r2,r2,8
    5fc0:	108000c3 	ldbu	r2,3(r2)
    5fc4:	10803fcc 	andi	r2,r2,255
    5fc8:	1000091e 	bne	r2,zero,5ff0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    5fcc:	e0bffc17 	ldw	r2,-16(fp)
    5fd0:	10800283 	ldbu	r2,10(r2)
    5fd4:	1007883a 	mov	r3,r2
    5fd8:	e0bffd43 	ldbu	r2,-11(fp)
    5fdc:	0084303a 	nor	r2,zero,r2
    5fe0:	1884703a 	and	r2,r3,r2
    5fe4:	1007883a 	mov	r3,r2
    5fe8:	e0bffc17 	ldw	r2,-16(fp)
    5fec:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    5ff0:	e0bffb17 	ldw	r2,-20(fp)
    5ff4:	10800104 	addi	r2,r2,4
    5ff8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    5ffc:	e0bffb17 	ldw	r2,-20(fp)
    6000:	10800017 	ldw	r2,0(r2)
    6004:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    6008:	e0bffc17 	ldw	r2,-16(fp)
    600c:	103fd91e 	bne	r2,zero,5f74 <__alt_mem_Flash_flash_data+0xf4005f74>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    6010:	e037883a 	mov	sp,fp
    6014:	df000017 	ldw	fp,0(sp)
    6018:	dec00104 	addi	sp,sp,4
    601c:	f800283a 	ret

00006020 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    6020:	defffc04 	addi	sp,sp,-16
    6024:	df000315 	stw	fp,12(sp)
    6028:	df000304 	addi	fp,sp,12
    602c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    6030:	e0bfff17 	ldw	r2,-4(fp)
    6034:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	108002c4 	addi	r2,r2,11
    6040:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6044:	e03ffe05 	stb	zero,-8(fp)
    6048:	00000706 	br	6068 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    604c:	e0bffd17 	ldw	r2,-12(fp)
    6050:	10c00044 	addi	r3,r2,1
    6054:	e0fffd15 	stw	r3,-12(fp)
    6058:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    605c:	e0bffe03 	ldbu	r2,-8(fp)
    6060:	10800044 	addi	r2,r2,1
    6064:	e0bffe05 	stb	r2,-8(fp)
    6068:	e0bffe03 	ldbu	r2,-8(fp)
    606c:	108000f0 	cmpltui	r2,r2,3
    6070:	103ff61e 	bne	r2,zero,604c <__alt_mem_Flash_flash_data+0xf400604c>
        *ptbl++ = 0;
    }
}
    6074:	e037883a 	mov	sp,fp
    6078:	df000017 	ldw	fp,0(sp)
    607c:	dec00104 	addi	sp,sp,4
    6080:	f800283a 	ret

00006084 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    6084:	defffb04 	addi	sp,sp,-20
    6088:	dfc00415 	stw	ra,16(sp)
    608c:	df000315 	stw	fp,12(sp)
    6090:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    6094:	010000b4 	movhi	r4,2
    6098:	21024204 	addi	r4,r4,2312
    609c:	0142d004 	movi	r5,2880
    60a0:	00063e40 	call	63e4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    60a4:	008000b4 	movhi	r2,2
    60a8:	10824204 	addi	r2,r2,2312
    60ac:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    60b0:	008000b4 	movhi	r2,2
    60b4:	10824e04 	addi	r2,r2,2360
    60b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    60bc:	e03ffd0d 	sth	zero,-12(fp)
    60c0:	00001306 	br	6110 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    60c4:	e0bffe17 	ldw	r2,-8(fp)
    60c8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    60cc:	e0bffe17 	ldw	r2,-8(fp)
    60d0:	e0ffff17 	ldw	r3,-4(fp)
    60d4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    60d8:	e0bffe17 	ldw	r2,-8(fp)
    60dc:	00c00fc4 	movi	r3,63
    60e0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    60e4:	e0bffe17 	ldw	r2,-8(fp)
    60e8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    60ec:	e0bffe17 	ldw	r2,-8(fp)
    60f0:	10800c04 	addi	r2,r2,48
    60f4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    60f8:	e0bfff17 	ldw	r2,-4(fp)
    60fc:	10800c04 	addi	r2,r2,48
    6100:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    6104:	e0bffd0b 	ldhu	r2,-12(fp)
    6108:	10800044 	addi	r2,r2,1
    610c:	e0bffd0d 	sth	r2,-12(fp)
    6110:	e0bffd0b 	ldhu	r2,-12(fp)
    6114:	10800ef0 	cmpltui	r2,r2,59
    6118:	103fea1e 	bne	r2,zero,60c4 <__alt_mem_Flash_flash_data+0xf40060c4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    611c:	e0bffe17 	ldw	r2,-8(fp)
    6120:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    6124:	e0bffe17 	ldw	r2,-8(fp)
    6128:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    612c:	e0bffe17 	ldw	r2,-8(fp)
    6130:	00c00fc4 	movi	r3,63
    6134:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    6138:	e0bffe17 	ldw	r2,-8(fp)
    613c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    6140:	008000b4 	movhi	r2,2
    6144:	10824204 	addi	r2,r2,2312
    6148:	d0a80c15 	stw	r2,-24528(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    614c:	e037883a 	mov	sp,fp
    6150:	dfc00117 	ldw	ra,4(sp)
    6154:	df000017 	ldw	fp,0(sp)
    6158:	dec00204 	addi	sp,sp,8
    615c:	f800283a 	ret

00006160 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    6160:	deffff04 	addi	sp,sp,-4
    6164:	df000015 	stw	fp,0(sp)
    6168:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    616c:	d0280f15 	stw	zero,-24516(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    6170:	d0280d05 	stb	zero,-24524(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    6174:	d027ff05 	stb	zero,-24580(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    6178:	d0280745 	stb	zero,-24547(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    617c:	d027ff45 	stb	zero,-24579(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    6180:	d0280415 	stw	zero,-24560(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    6184:	d0280015 	stw	zero,-24576(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    6188:	d0281215 	stw	zero,-24504(gp)
    OSIdleCtrMax  = 0L;
    618c:	d0280515 	stw	zero,-24556(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    6190:	d0281105 	stb	zero,-24508(gp)
#endif
}
    6194:	e037883a 	mov	sp,fp
    6198:	df000017 	ldw	fp,0(sp)
    619c:	dec00104 	addi	sp,sp,4
    61a0:	f800283a 	ret

000061a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    61a4:	defffd04 	addi	sp,sp,-12
    61a8:	df000215 	stw	fp,8(sp)
    61ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    61b0:	d0280b05 	stb	zero,-24532(gp)
    prdytbl       = &OSRdyTbl[0];
    61b4:	d0a80b44 	addi	r2,gp,-24531
    61b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    61bc:	e03ffe05 	stb	zero,-8(fp)
    61c0:	00000706 	br	61e0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    61c4:	e0bfff17 	ldw	r2,-4(fp)
    61c8:	10c00044 	addi	r3,r2,1
    61cc:	e0ffff15 	stw	r3,-4(fp)
    61d0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    61d4:	e0bffe03 	ldbu	r2,-8(fp)
    61d8:	10800044 	addi	r2,r2,1
    61dc:	e0bffe05 	stb	r2,-8(fp)
    61e0:	e0bffe03 	ldbu	r2,-8(fp)
    61e4:	108000f0 	cmpltui	r2,r2,3
    61e8:	103ff61e 	bne	r2,zero,61c4 <__alt_mem_Flash_flash_data+0xf40061c4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    61ec:	d0280145 	stb	zero,-24571(gp)
    OSPrioHighRdy = 0;
    61f0:	d0280105 	stb	zero,-24572(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    61f4:	d0280915 	stw	zero,-24540(gp)
    OSTCBCur      = (OS_TCB *)0;
    61f8:	d0280e15 	stw	zero,-24520(gp)
}
    61fc:	e037883a 	mov	sp,fp
    6200:	df000017 	ldw	fp,0(sp)
    6204:	dec00104 	addi	sp,sp,4
    6208:	f800283a 	ret

0000620c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    620c:	defff804 	addi	sp,sp,-32
    6210:	dfc00715 	stw	ra,28(sp)
    6214:	df000615 	stw	fp,24(sp)
    6218:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    621c:	00bfffd4 	movui	r2,65535
    6220:	d8800015 	stw	r2,0(sp)
    6224:	008000b4 	movhi	r2,2
    6228:	10804204 	addi	r2,r2,264
    622c:	d8800115 	stw	r2,4(sp)
    6230:	00808004 	movi	r2,512
    6234:	d8800215 	stw	r2,8(sp)
    6238:	d8000315 	stw	zero,12(sp)
    623c:	008000c4 	movi	r2,3
    6240:	d8800415 	stw	r2,16(sp)
    6244:	01000034 	movhi	r4,0
    6248:	2119a704 	addi	r4,r4,26268
    624c:	000b883a 	mov	r5,zero
    6250:	018000b4 	movhi	r6,2
    6254:	31824104 	addi	r6,r6,2308
    6258:	01c00504 	movi	r7,20
    625c:	000b0b00 	call	b0b0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    6260:	01000504 	movi	r4,20
    6264:	01400074 	movhi	r5,1
    6268:	2941dc04 	addi	r5,r5,1904
    626c:	e1bfff04 	addi	r6,fp,-4
    6270:	000b97c0 	call	b97c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    6274:	e037883a 	mov	sp,fp
    6278:	dfc00117 	ldw	ra,4(sp)
    627c:	df000017 	ldw	fp,0(sp)
    6280:	dec00204 	addi	sp,sp,8
    6284:	f800283a 	ret

00006288 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    6288:	defff804 	addi	sp,sp,-32
    628c:	dfc00715 	stw	ra,28(sp)
    6290:	df000615 	stw	fp,24(sp)
    6294:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    6298:	00bfff94 	movui	r2,65534
    629c:	d8800015 	stw	r2,0(sp)
    62a0:	008000b4 	movhi	r2,2
    62a4:	10bdca04 	addi	r2,r2,-2264
    62a8:	d8800115 	stw	r2,4(sp)
    62ac:	00808004 	movi	r2,512
    62b0:	d8800215 	stw	r2,8(sp)
    62b4:	d8000315 	stw	zero,12(sp)
    62b8:	008000c4 	movi	r2,3
    62bc:	d8800415 	stw	r2,16(sp)
    62c0:	01000034 	movhi	r4,0
    62c4:	2119be04 	addi	r4,r4,26360
    62c8:	000b883a 	mov	r5,zero
    62cc:	018000b4 	movhi	r6,2
    62d0:	31bfc904 	addi	r6,r6,-220
    62d4:	01c004c4 	movi	r7,19
    62d8:	000b0b00 	call	b0b0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    62dc:	010004c4 	movi	r4,19
    62e0:	01400074 	movhi	r5,1
    62e4:	2941e004 	addi	r5,r5,1920
    62e8:	e1bfff04 	addi	r6,fp,-4
    62ec:	000b97c0 	call	b97c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    62f0:	e037883a 	mov	sp,fp
    62f4:	dfc00117 	ldw	ra,4(sp)
    62f8:	df000017 	ldw	fp,0(sp)
    62fc:	dec00204 	addi	sp,sp,8
    6300:	f800283a 	ret

00006304 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    6304:	defffb04 	addi	sp,sp,-20
    6308:	dfc00415 	stw	ra,16(sp)
    630c:	df000315 	stw	fp,12(sp)
    6310:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    6314:	010000b4 	movhi	r4,2
    6318:	21051204 	addi	r4,r4,5192
    631c:	01414404 	movi	r5,1296
    6320:	00063e40 	call	63e4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    6324:	010000b4 	movhi	r4,2
    6328:	21065604 	addi	r4,r4,6488
    632c:	01401504 	movi	r5,84
    6330:	00063e40 	call	63e4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    6334:	008000b4 	movhi	r2,2
    6338:	10851204 	addi	r2,r2,5192
    633c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    6340:	008000b4 	movhi	r2,2
    6344:	10852d04 	addi	r2,r2,5300
    6348:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    634c:	e03ffd05 	stb	zero,-12(fp)
    6350:	00001106 	br	6398 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    6354:	e0bffe17 	ldw	r2,-8(fp)
    6358:	e0ffff17 	ldw	r3,-4(fp)
    635c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    6360:	e0bffe17 	ldw	r2,-8(fp)
    6364:	00c00fc4 	movi	r3,63
    6368:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    636c:	e0bffe17 	ldw	r2,-8(fp)
    6370:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    6374:	e0bffe17 	ldw	r2,-8(fp)
    6378:	10801b04 	addi	r2,r2,108
    637c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    6380:	e0bfff17 	ldw	r2,-4(fp)
    6384:	10801b04 	addi	r2,r2,108
    6388:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    638c:	e0bffd03 	ldbu	r2,-12(fp)
    6390:	10800044 	addi	r2,r2,1
    6394:	e0bffd05 	stb	r2,-12(fp)
    6398:	e0bffd03 	ldbu	r2,-12(fp)
    639c:	108002f0 	cmpltui	r2,r2,11
    63a0:	103fec1e 	bne	r2,zero,6354 <__alt_mem_Flash_flash_data+0xf4006354>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    63a4:	e0bffe17 	ldw	r2,-8(fp)
    63a8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    63ac:	e0bffe17 	ldw	r2,-8(fp)
    63b0:	00c00fc4 	movi	r3,63
    63b4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    63b8:	e0bffe17 	ldw	r2,-8(fp)
    63bc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    63c0:	d0280215 	stw	zero,-24568(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    63c4:	008000b4 	movhi	r2,2
    63c8:	10851204 	addi	r2,r2,5192
    63cc:	d0a80615 	stw	r2,-24552(gp)
}
    63d0:	e037883a 	mov	sp,fp
    63d4:	dfc00117 	ldw	ra,4(sp)
    63d8:	df000017 	ldw	fp,0(sp)
    63dc:	dec00204 	addi	sp,sp,8
    63e0:	f800283a 	ret

000063e4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    63e4:	defffd04 	addi	sp,sp,-12
    63e8:	df000215 	stw	fp,8(sp)
    63ec:	df000204 	addi	fp,sp,8
    63f0:	e13ffe15 	stw	r4,-8(fp)
    63f4:	2805883a 	mov	r2,r5
    63f8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    63fc:	00000706 	br	641c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    6400:	e0bffe17 	ldw	r2,-8(fp)
    6404:	10c00044 	addi	r3,r2,1
    6408:	e0fffe15 	stw	r3,-8(fp)
    640c:	10000005 	stb	zero,0(r2)
        size--;
    6410:	e0bfff0b 	ldhu	r2,-4(fp)
    6414:	10bfffc4 	addi	r2,r2,-1
    6418:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    641c:	e0bfff0b 	ldhu	r2,-4(fp)
    6420:	103ff71e 	bne	r2,zero,6400 <__alt_mem_Flash_flash_data+0xf4006400>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    6424:	e037883a 	mov	sp,fp
    6428:	df000017 	ldw	fp,0(sp)
    642c:	dec00104 	addi	sp,sp,4
    6430:	f800283a 	ret

00006434 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    6434:	defffc04 	addi	sp,sp,-16
    6438:	df000315 	stw	fp,12(sp)
    643c:	df000304 	addi	fp,sp,12
    6440:	e13ffd15 	stw	r4,-12(fp)
    6444:	e17ffe15 	stw	r5,-8(fp)
    6448:	3005883a 	mov	r2,r6
    644c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    6450:	00000b06 	br	6480 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    6454:	e0bffd17 	ldw	r2,-12(fp)
    6458:	10c00044 	addi	r3,r2,1
    645c:	e0fffd15 	stw	r3,-12(fp)
    6460:	e0fffe17 	ldw	r3,-8(fp)
    6464:	19000044 	addi	r4,r3,1
    6468:	e13ffe15 	stw	r4,-8(fp)
    646c:	18c00003 	ldbu	r3,0(r3)
    6470:	10c00005 	stb	r3,0(r2)
        size--;
    6474:	e0bfff0b 	ldhu	r2,-4(fp)
    6478:	10bfffc4 	addi	r2,r2,-1
    647c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    6480:	e0bfff0b 	ldhu	r2,-4(fp)
    6484:	103ff31e 	bne	r2,zero,6454 <__alt_mem_Flash_flash_data+0xf4006454>
        *pdest++ = *psrc++;
        size--;
    }
}
    6488:	e037883a 	mov	sp,fp
    648c:	df000017 	ldw	fp,0(sp)
    6490:	dec00104 	addi	sp,sp,4
    6494:	f800283a 	ret

00006498 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    6498:	defffb04 	addi	sp,sp,-20
    649c:	dfc00415 	stw	ra,16(sp)
    64a0:	df000315 	stw	fp,12(sp)
    64a4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    64a8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    64ac:	0005303a 	rdctl	r2,status
    64b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    64b4:	e0fffe17 	ldw	r3,-8(fp)
    64b8:	00bfff84 	movi	r2,-2
    64bc:	1884703a 	and	r2,r3,r2
    64c0:	1001703a 	wrctl	status,r2
  
  return context;
    64c4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    64c8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    64cc:	d0a80d03 	ldbu	r2,-24524(gp)
    64d0:	10803fcc 	andi	r2,r2,255
    64d4:	10001a1e 	bne	r2,zero,6540 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    64d8:	d0a7ff03 	ldbu	r2,-24580(gp)
    64dc:	10803fcc 	andi	r2,r2,255
    64e0:	1000171e 	bne	r2,zero,6540 <OS_Sched+0xa8>
            OS_SchedNew();
    64e4:	00065640 	call	6564 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    64e8:	d0e80103 	ldbu	r3,-24572(gp)
    64ec:	d0a80143 	ldbu	r2,-24571(gp)
    64f0:	18c03fcc 	andi	r3,r3,255
    64f4:	10803fcc 	andi	r2,r2,255
    64f8:	18801126 	beq	r3,r2,6540 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    64fc:	d0a80103 	ldbu	r2,-24572(gp)
    6500:	10c03fcc 	andi	r3,r2,255
    6504:	008000b4 	movhi	r2,2
    6508:	10865604 	addi	r2,r2,6488
    650c:	18c7883a 	add	r3,r3,r3
    6510:	18c7883a 	add	r3,r3,r3
    6514:	10c5883a 	add	r2,r2,r3
    6518:	10800017 	ldw	r2,0(r2)
    651c:	d0a80915 	stw	r2,-24540(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    6520:	d0a80917 	ldw	r2,-24540(gp)
    6524:	10c00e17 	ldw	r3,56(r2)
    6528:	18c00044 	addi	r3,r3,1
    652c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    6530:	d0a80417 	ldw	r2,-24560(gp)
    6534:	10800044 	addi	r2,r2,1
    6538:	d0a80415 	stw	r2,-24560(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    653c:	000fb180 	call	fb18 <OSCtxSw>
    6540:	e0bffd17 	ldw	r2,-12(fp)
    6544:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6548:	e0bfff17 	ldw	r2,-4(fp)
    654c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    6550:	e037883a 	mov	sp,fp
    6554:	dfc00117 	ldw	ra,4(sp)
    6558:	df000017 	ldw	fp,0(sp)
    655c:	dec00204 	addi	sp,sp,8
    6560:	f800283a 	ret

00006564 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    6564:	defffe04 	addi	sp,sp,-8
    6568:	df000115 	stw	fp,4(sp)
    656c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    6570:	d0a80b03 	ldbu	r2,-24532(gp)
    6574:	10c03fcc 	andi	r3,r2,255
    6578:	00800074 	movhi	r2,1
    657c:	10819c04 	addi	r2,r2,1648
    6580:	10c5883a 	add	r2,r2,r3
    6584:	10800003 	ldbu	r2,0(r2)
    6588:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    658c:	e0bfff03 	ldbu	r2,-4(fp)
    6590:	100490fa 	slli	r2,r2,3
    6594:	1009883a 	mov	r4,r2
    6598:	e0ffff03 	ldbu	r3,-4(fp)
    659c:	d0a80b44 	addi	r2,gp,-24531
    65a0:	1885883a 	add	r2,r3,r2
    65a4:	10800003 	ldbu	r2,0(r2)
    65a8:	10c03fcc 	andi	r3,r2,255
    65ac:	00800074 	movhi	r2,1
    65b0:	10819c04 	addi	r2,r2,1648
    65b4:	10c5883a 	add	r2,r2,r3
    65b8:	10800003 	ldbu	r2,0(r2)
    65bc:	2085883a 	add	r2,r4,r2
    65c0:	d0a80105 	stb	r2,-24572(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    65c4:	e037883a 	mov	sp,fp
    65c8:	df000017 	ldw	fp,0(sp)
    65cc:	dec00104 	addi	sp,sp,4
    65d0:	f800283a 	ret

000065d4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    65d4:	defffc04 	addi	sp,sp,-16
    65d8:	df000315 	stw	fp,12(sp)
    65dc:	df000304 	addi	fp,sp,12
    65e0:	e13ffe15 	stw	r4,-8(fp)
    65e4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    65e8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    65ec:	00000b06 	br	661c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    65f0:	e0bffe17 	ldw	r2,-8(fp)
    65f4:	10c00044 	addi	r3,r2,1
    65f8:	e0fffe15 	stw	r3,-8(fp)
    65fc:	e0ffff17 	ldw	r3,-4(fp)
    6600:	19000044 	addi	r4,r3,1
    6604:	e13fff15 	stw	r4,-4(fp)
    6608:	18c00003 	ldbu	r3,0(r3)
    660c:	10c00005 	stb	r3,0(r2)
        len++;
    6610:	e0bffd03 	ldbu	r2,-12(fp)
    6614:	10800044 	addi	r2,r2,1
    6618:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    661c:	e0bfff17 	ldw	r2,-4(fp)
    6620:	10800003 	ldbu	r2,0(r2)
    6624:	10803fcc 	andi	r2,r2,255
    6628:	103ff11e 	bne	r2,zero,65f0 <__alt_mem_Flash_flash_data+0xf40065f0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    662c:	e0bffe17 	ldw	r2,-8(fp)
    6630:	10000005 	stb	zero,0(r2)
    return (len);
    6634:	e0bffd03 	ldbu	r2,-12(fp)
}
    6638:	e037883a 	mov	sp,fp
    663c:	df000017 	ldw	fp,0(sp)
    6640:	dec00104 	addi	sp,sp,4
    6644:	f800283a 	ret

00006648 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    6648:	defffd04 	addi	sp,sp,-12
    664c:	df000215 	stw	fp,8(sp)
    6650:	df000204 	addi	fp,sp,8
    6654:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    6658:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    665c:	00000606 	br	6678 <OS_StrLen+0x30>
        psrc++;
    6660:	e0bfff17 	ldw	r2,-4(fp)
    6664:	10800044 	addi	r2,r2,1
    6668:	e0bfff15 	stw	r2,-4(fp)
        len++;
    666c:	e0bffe03 	ldbu	r2,-8(fp)
    6670:	10800044 	addi	r2,r2,1
    6674:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    6678:	e0bfff17 	ldw	r2,-4(fp)
    667c:	10800003 	ldbu	r2,0(r2)
    6680:	10803fcc 	andi	r2,r2,255
    6684:	103ff61e 	bne	r2,zero,6660 <__alt_mem_Flash_flash_data+0xf4006660>
        psrc++;
        len++;
    }
    return (len);
    6688:	e0bffe03 	ldbu	r2,-8(fp)
}
    668c:	e037883a 	mov	sp,fp
    6690:	df000017 	ldw	fp,0(sp)
    6694:	dec00104 	addi	sp,sp,4
    6698:	f800283a 	ret

0000669c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    669c:	defffa04 	addi	sp,sp,-24
    66a0:	dfc00515 	stw	ra,20(sp)
    66a4:	df000415 	stw	fp,16(sp)
    66a8:	df000404 	addi	fp,sp,16
    66ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    66b0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    66b4:	0005303a 	rdctl	r2,status
    66b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    66bc:	e0fffd17 	ldw	r3,-12(fp)
    66c0:	00bfff84 	movi	r2,-2
    66c4:	1884703a 	and	r2,r3,r2
    66c8:	1001703a 	wrctl	status,r2
  
  return context;
    66cc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    66d0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    66d4:	d0a80017 	ldw	r2,-24576(gp)
    66d8:	10800044 	addi	r2,r2,1
    66dc:	d0a80015 	stw	r2,-24576(gp)
    66e0:	e0bffc17 	ldw	r2,-16(fp)
    66e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66e8:	e0bffe17 	ldw	r2,-8(fp)
    66ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    66f0:	000fe100 	call	fe10 <OSTaskIdleHook>
    }
    66f4:	003fef06 	br	66b4 <__alt_mem_Flash_flash_data+0xf40066b4>

000066f8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    66f8:	defff804 	addi	sp,sp,-32
    66fc:	dfc00715 	stw	ra,28(sp)
    6700:	df000615 	stw	fp,24(sp)
    6704:	dc400515 	stw	r17,20(sp)
    6708:	dc000415 	stw	r16,16(sp)
    670c:	df000604 	addi	fp,sp,24
    6710:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6714:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6718:	00000206 	br	6724 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    671c:	01000044 	movi	r4,1
    6720:	000c2a80 	call	c2a8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    6724:	d0a81103 	ldbu	r2,-24508(gp)
    6728:	10803fcc 	andi	r2,r2,255
    672c:	103ffb26 	beq	r2,zero,671c <__alt_mem_Flash_flash_data+0xf400671c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    6730:	d0e80517 	ldw	r3,-24556(gp)
    6734:	00947b34 	movhi	r2,20972
    6738:	10a147c4 	addi	r2,r2,-31457
    673c:	1888383a 	mulxuu	r4,r3,r2
    6740:	1885383a 	mul	r2,r3,r2
    6744:	1021883a 	mov	r16,r2
    6748:	2023883a 	mov	r17,r4
    674c:	8804d17a 	srli	r2,r17,5
    6750:	d0a80515 	stw	r2,-24556(gp)
    if (OSIdleCtrMax == 0L) {
    6754:	d0a80517 	ldw	r2,-24556(gp)
    6758:	1000031e 	bne	r2,zero,6768 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    675c:	d0280705 	stb	zero,-24548(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    6760:	01003fc4 	movi	r4,255
    6764:	000befc0 	call	befc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6768:	0005303a 	rdctl	r2,status
    676c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6770:	e0fffb17 	ldw	r3,-20(fp)
    6774:	00bfff84 	movi	r2,-2
    6778:	1884703a 	and	r2,r3,r2
    677c:	1001703a 	wrctl	status,r2
  
  return context;
    6780:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    6784:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    6788:	d0a80017 	ldw	r2,-24576(gp)
    678c:	d0a81215 	stw	r2,-24504(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    6790:	d0280015 	stw	zero,-24576(gp)
    6794:	e0bffa17 	ldw	r2,-24(fp)
    6798:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    679c:	e0bffc17 	ldw	r2,-16(fp)
    67a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    67a4:	d0e81217 	ldw	r3,-24504(gp)
    67a8:	d0a80517 	ldw	r2,-24556(gp)
    67ac:	1885203a 	divu	r2,r3,r2
    67b0:	1007883a 	mov	r3,r2
    67b4:	00801904 	movi	r2,100
    67b8:	10c5c83a 	sub	r2,r2,r3
    67bc:	d0a80705 	stb	r2,-24548(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    67c0:	000fda00 	call	fda0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    67c4:	00067d40 	call	67d4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    67c8:	0009883a 	mov	r4,zero
    67cc:	000c2a80 	call	c2a8 <OSTimeDly>
    }
    67d0:	003fe506 	br	6768 <__alt_mem_Flash_flash_data+0xf4006768>

000067d4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    67d4:	defffa04 	addi	sp,sp,-24
    67d8:	dfc00515 	stw	ra,20(sp)
    67dc:	df000415 	stw	fp,16(sp)
    67e0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    67e4:	e03ffc05 	stb	zero,-16(fp)
    67e8:	00002406 	br	687c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    67ec:	e0fffc03 	ldbu	r3,-16(fp)
    67f0:	e0bffe04 	addi	r2,fp,-8
    67f4:	1809883a 	mov	r4,r3
    67f8:	100b883a 	mov	r5,r2
    67fc:	000bd340 	call	bd34 <OSTaskStkChk>
    6800:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    6804:	e0bffc43 	ldbu	r2,-15(fp)
    6808:	1000191e 	bne	r2,zero,6870 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    680c:	e0fffc03 	ldbu	r3,-16(fp)
    6810:	008000b4 	movhi	r2,2
    6814:	10865604 	addi	r2,r2,6488
    6818:	18c7883a 	add	r3,r3,r3
    681c:	18c7883a 	add	r3,r3,r3
    6820:	10c5883a 	add	r2,r2,r3
    6824:	10800017 	ldw	r2,0(r2)
    6828:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    682c:	e0bffd17 	ldw	r2,-12(fp)
    6830:	10000f26 	beq	r2,zero,6870 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    6834:	e0bffd17 	ldw	r2,-12(fp)
    6838:	10800060 	cmpeqi	r2,r2,1
    683c:	10000c1e 	bne	r2,zero,6870 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    6840:	e0bffd17 	ldw	r2,-12(fp)
    6844:	10c00217 	ldw	r3,8(r2)
    6848:	e0bffd17 	ldw	r2,-12(fp)
    684c:	10800317 	ldw	r2,12(r2)
    6850:	1085883a 	add	r2,r2,r2
    6854:	1085883a 	add	r2,r2,r2
    6858:	1887883a 	add	r3,r3,r2
    685c:	e0bffd17 	ldw	r2,-12(fp)
    6860:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    6864:	e0ffff17 	ldw	r3,-4(fp)
    6868:	e0bffd17 	ldw	r2,-12(fp)
    686c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    6870:	e0bffc03 	ldbu	r2,-16(fp)
    6874:	10800044 	addi	r2,r2,1
    6878:	e0bffc05 	stb	r2,-16(fp)
    687c:	e0bffc03 	ldbu	r2,-16(fp)
    6880:	10800570 	cmpltui	r2,r2,21
    6884:	103fd91e 	bne	r2,zero,67ec <__alt_mem_Flash_flash_data+0xf40067ec>
#endif
                }
            }
        }
    }
}
    6888:	e037883a 	mov	sp,fp
    688c:	dfc00117 	ldw	ra,4(sp)
    6890:	df000017 	ldw	fp,0(sp)
    6894:	dec00204 	addi	sp,sp,8
    6898:	f800283a 	ret

0000689c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    689c:	defff204 	addi	sp,sp,-56
    68a0:	dfc00d15 	stw	ra,52(sp)
    68a4:	df000c15 	stw	fp,48(sp)
    68a8:	df000c04 	addi	fp,sp,48
    68ac:	e17ffc15 	stw	r5,-16(fp)
    68b0:	e1bffd15 	stw	r6,-12(fp)
    68b4:	3807883a 	mov	r3,r7
    68b8:	e0800417 	ldw	r2,16(fp)
    68bc:	e13ffb05 	stb	r4,-20(fp)
    68c0:	e0fffe0d 	sth	r3,-8(fp)
    68c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    68c8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    68cc:	0005303a 	rdctl	r2,status
    68d0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    68d4:	e0fff617 	ldw	r3,-40(fp)
    68d8:	00bfff84 	movi	r2,-2
    68dc:	1884703a 	and	r2,r3,r2
    68e0:	1001703a 	wrctl	status,r2
  
  return context;
    68e4:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    68e8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    68ec:	d0a80617 	ldw	r2,-24552(gp)
    68f0:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    68f4:	e0bff517 	ldw	r2,-44(fp)
    68f8:	10009326 	beq	r2,zero,6b48 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    68fc:	e0bff517 	ldw	r2,-44(fp)
    6900:	10800517 	ldw	r2,20(r2)
    6904:	d0a80615 	stw	r2,-24552(gp)
    6908:	e0bff417 	ldw	r2,-48(fp)
    690c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6910:	e0bff717 	ldw	r2,-36(fp)
    6914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    6918:	e0bff517 	ldw	r2,-44(fp)
    691c:	e0fffc17 	ldw	r3,-16(fp)
    6920:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    6924:	e0bff517 	ldw	r2,-44(fp)
    6928:	e0fffb03 	ldbu	r3,-20(fp)
    692c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    6930:	e0bff517 	ldw	r2,-44(fp)
    6934:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    6938:	e0bff517 	ldw	r2,-44(fp)
    693c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    6940:	e0bff517 	ldw	r2,-44(fp)
    6944:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    6948:	e0bff517 	ldw	r2,-44(fp)
    694c:	e0c00317 	ldw	r3,12(fp)
    6950:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    6954:	e0bff517 	ldw	r2,-44(fp)
    6958:	e0c00217 	ldw	r3,8(fp)
    695c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    6960:	e0bff517 	ldw	r2,-44(fp)
    6964:	e0fffd17 	ldw	r3,-12(fp)
    6968:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    696c:	e0bff517 	ldw	r2,-44(fp)
    6970:	e0ffff0b 	ldhu	r3,-4(fp)
    6974:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    6978:	e0bff517 	ldw	r2,-44(fp)
    697c:	e0fffe0b 	ldhu	r3,-8(fp)
    6980:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    6984:	e0bff517 	ldw	r2,-44(fp)
    6988:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    698c:	e0bffb03 	ldbu	r2,-20(fp)
    6990:	1004d0fa 	srli	r2,r2,3
    6994:	1007883a 	mov	r3,r2
    6998:	e0bff517 	ldw	r2,-44(fp)
    699c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    69a0:	e0bffb03 	ldbu	r2,-20(fp)
    69a4:	108001cc 	andi	r2,r2,7
    69a8:	1007883a 	mov	r3,r2
    69ac:	e0bff517 	ldw	r2,-44(fp)
    69b0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    69b4:	e0bff517 	ldw	r2,-44(fp)
    69b8:	10800d03 	ldbu	r2,52(r2)
    69bc:	10803fcc 	andi	r2,r2,255
    69c0:	00c00044 	movi	r3,1
    69c4:	1884983a 	sll	r2,r3,r2
    69c8:	1007883a 	mov	r3,r2
    69cc:	e0bff517 	ldw	r2,-44(fp)
    69d0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    69d4:	e0bff517 	ldw	r2,-44(fp)
    69d8:	10800cc3 	ldbu	r2,51(r2)
    69dc:	10803fcc 	andi	r2,r2,255
    69e0:	00c00044 	movi	r3,1
    69e4:	1884983a 	sll	r2,r3,r2
    69e8:	1007883a 	mov	r3,r2
    69ec:	e0bff517 	ldw	r2,-44(fp)
    69f0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    69f4:	e0bff517 	ldw	r2,-44(fp)
    69f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    69fc:	e0bff517 	ldw	r2,-44(fp)
    6a00:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    6a04:	e0bff517 	ldw	r2,-44(fp)
    6a08:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    6a0c:	e0bff517 	ldw	r2,-44(fp)
    6a10:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    6a14:	e0bff517 	ldw	r2,-44(fp)
    6a18:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    6a1c:	e0bff517 	ldw	r2,-44(fp)
    6a20:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    6a24:	e0bff517 	ldw	r2,-44(fp)
    6a28:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    6a2c:	e0bff517 	ldw	r2,-44(fp)
    6a30:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    6a34:	e0bff517 	ldw	r2,-44(fp)
    6a38:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    6a3c:	e0bff517 	ldw	r2,-44(fp)
    6a40:	00c00fc4 	movi	r3,63
    6a44:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    6a48:	e0bff517 	ldw	r2,-44(fp)
    6a4c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    6a50:	e13ff517 	ldw	r4,-44(fp)
    6a54:	000fe2c0 	call	fe2c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    6a58:	e13ff517 	ldw	r4,-44(fp)
    6a5c:	000fd440 	call	fd44 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a60:	0005303a 	rdctl	r2,status
    6a64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a68:	e0fff817 	ldw	r3,-32(fp)
    6a6c:	00bfff84 	movi	r2,-2
    6a70:	1884703a 	and	r2,r3,r2
    6a74:	1001703a 	wrctl	status,r2
  
  return context;
    6a78:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    6a7c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    6a80:	e0fffb03 	ldbu	r3,-20(fp)
    6a84:	008000b4 	movhi	r2,2
    6a88:	10865604 	addi	r2,r2,6488
    6a8c:	18c7883a 	add	r3,r3,r3
    6a90:	18c7883a 	add	r3,r3,r3
    6a94:	10c5883a 	add	r2,r2,r3
    6a98:	e0fff517 	ldw	r3,-44(fp)
    6a9c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    6aa0:	d0e80217 	ldw	r3,-24568(gp)
    6aa4:	e0bff517 	ldw	r2,-44(fp)
    6aa8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    6aac:	e0bff517 	ldw	r2,-44(fp)
    6ab0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    6ab4:	d0a80217 	ldw	r2,-24568(gp)
    6ab8:	10000326 	beq	r2,zero,6ac8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    6abc:	d0a80217 	ldw	r2,-24568(gp)
    6ac0:	e0fff517 	ldw	r3,-44(fp)
    6ac4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    6ac8:	e0bff517 	ldw	r2,-44(fp)
    6acc:	d0a80215 	stw	r2,-24568(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    6ad0:	e0bff517 	ldw	r2,-44(fp)
    6ad4:	10c00d83 	ldbu	r3,54(r2)
    6ad8:	d0a80b03 	ldbu	r2,-24532(gp)
    6adc:	1884b03a 	or	r2,r3,r2
    6ae0:	d0a80b05 	stb	r2,-24532(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6ae4:	e0bff517 	ldw	r2,-44(fp)
    6ae8:	10800d03 	ldbu	r2,52(r2)
    6aec:	10c03fcc 	andi	r3,r2,255
    6af0:	e0bff517 	ldw	r2,-44(fp)
    6af4:	10800d03 	ldbu	r2,52(r2)
    6af8:	11003fcc 	andi	r4,r2,255
    6afc:	d0a80b44 	addi	r2,gp,-24531
    6b00:	2085883a 	add	r2,r4,r2
    6b04:	11000003 	ldbu	r4,0(r2)
    6b08:	e0bff517 	ldw	r2,-44(fp)
    6b0c:	10800d43 	ldbu	r2,53(r2)
    6b10:	2084b03a 	or	r2,r4,r2
    6b14:	1009883a 	mov	r4,r2
    6b18:	d0a80b44 	addi	r2,gp,-24531
    6b1c:	1885883a 	add	r2,r3,r2
    6b20:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    6b24:	d0a80743 	ldbu	r2,-24547(gp)
    6b28:	10800044 	addi	r2,r2,1
    6b2c:	d0a80745 	stb	r2,-24547(gp)
    6b30:	e0bff417 	ldw	r2,-48(fp)
    6b34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b38:	e0bff917 	ldw	r2,-28(fp)
    6b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    6b40:	0005883a 	mov	r2,zero
    6b44:	00000506 	br	6b5c <OS_TCBInit+0x2c0>
    6b48:	e0bff417 	ldw	r2,-48(fp)
    6b4c:	e0bffa15 	stw	r2,-24(fp)
    6b50:	e0bffa17 	ldw	r2,-24(fp)
    6b54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    6b58:	00801084 	movi	r2,66
}
    6b5c:	e037883a 	mov	sp,fp
    6b60:	dfc00117 	ldw	ra,4(sp)
    6b64:	df000017 	ldw	fp,0(sp)
    6b68:	dec00204 	addi	sp,sp,8
    6b6c:	f800283a 	ret

00006b70 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    6b70:	defffe04 	addi	sp,sp,-8
    6b74:	df000115 	stw	fp,4(sp)
    6b78:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    6b7c:	d0a01704 	addi	r2,gp,-32676
    6b80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    6b84:	d0a01804 	addi	r2,gp,-32672
    6b88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    6b8c:	d0a01984 	addi	r2,gp,-32666
    6b90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    6b94:	d0a01a04 	addi	r2,gp,-32664
    6b98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    6b9c:	d0a01904 	addi	r2,gp,-32668
    6ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    6ba4:	d0a01a84 	addi	r2,gp,-32662
    6ba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    6bac:	d0a01b04 	addi	r2,gp,-32660
    6bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    6bb4:	d0a01b84 	addi	r2,gp,-32658
    6bb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    6bbc:	d0a01c04 	addi	r2,gp,-32656
    6bc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    6bc4:	d0a01c84 	addi	r2,gp,-32654
    6bc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    6bcc:	d0a01d04 	addi	r2,gp,-32652
    6bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    6bd4:	d0a01d84 	addi	r2,gp,-32650
    6bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    6bdc:	d0a01e04 	addi	r2,gp,-32648
    6be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    6be4:	d0a01e84 	addi	r2,gp,-32646
    6be8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    6bec:	d0a01f04 	addi	r2,gp,-32644
    6bf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    6bf4:	d0a01f84 	addi	r2,gp,-32642
    6bf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    6bfc:	d0a02004 	addi	r2,gp,-32640
    6c00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    6c04:	d0a02084 	addi	r2,gp,-32638
    6c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    6c0c:	d0a02104 	addi	r2,gp,-32636
    6c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    6c14:	d0a02184 	addi	r2,gp,-32634
    6c18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    6c1c:	d0a02204 	addi	r2,gp,-32632
    6c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    6c24:	d0a02284 	addi	r2,gp,-32630
    6c28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    6c2c:	d0a02304 	addi	r2,gp,-32628
    6c30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    6c34:	d0a02384 	addi	r2,gp,-32626
    6c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    6c3c:	d0a02404 	addi	r2,gp,-32624
    6c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    6c44:	d0a02484 	addi	r2,gp,-32622
    6c48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    6c4c:	d0a02504 	addi	r2,gp,-32620
    6c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    6c54:	d0a02584 	addi	r2,gp,-32618
    6c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    6c5c:	d0a02604 	addi	r2,gp,-32616
    6c60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    6c64:	d0a02684 	addi	r2,gp,-32614
    6c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    6c6c:	d0a02704 	addi	r2,gp,-32612
    6c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    6c74:	d0a02784 	addi	r2,gp,-32610
    6c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    6c7c:	d0a02804 	addi	r2,gp,-32608
    6c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    6c84:	d0a02884 	addi	r2,gp,-32606
    6c88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    6c8c:	d0a02904 	addi	r2,gp,-32604
    6c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    6c94:	d0a02984 	addi	r2,gp,-32602
    6c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    6c9c:	d0a02a04 	addi	r2,gp,-32600
    6ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    6ca4:	d0a02a84 	addi	r2,gp,-32598
    6ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    6cac:	d0a02b04 	addi	r2,gp,-32596
    6cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    6cb4:	d0a02b84 	addi	r2,gp,-32594
    6cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    6cbc:	d0a02c04 	addi	r2,gp,-32592
    6cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    6cc4:	d0a02c84 	addi	r2,gp,-32590
    6cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    6ccc:	d0a02d04 	addi	r2,gp,-32588
    6cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    6cd4:	d0a02d84 	addi	r2,gp,-32586
    6cd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    6cdc:	d0a02e04 	addi	r2,gp,-32584
    6ce0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    6ce4:	d0a03304 	addi	r2,gp,-32564
    6ce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    6cec:	e037883a 	mov	sp,fp
    6cf0:	df000017 	ldw	fp,0(sp)
    6cf4:	dec00104 	addi	sp,sp,4
    6cf8:	f800283a 	ret

00006cfc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    6cfc:	defff204 	addi	sp,sp,-56
    6d00:	df000d15 	stw	fp,52(sp)
    6d04:	df000d04 	addi	fp,sp,52
    6d08:	e13ffc15 	stw	r4,-16(fp)
    6d0c:	2807883a 	mov	r3,r5
    6d10:	3005883a 	mov	r2,r6
    6d14:	e1ffff15 	stw	r7,-4(fp)
    6d18:	e0fffd0d 	sth	r3,-12(fp)
    6d1c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6d20:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6d24:	e0bfff17 	ldw	r2,-4(fp)
    6d28:	1000021e 	bne	r2,zero,6d34 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    6d2c:	0005883a 	mov	r2,zero
    6d30:	0000b006 	br	6ff4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    6d34:	e0bffc17 	ldw	r2,-16(fp)
    6d38:	1000051e 	bne	r2,zero,6d50 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6d3c:	e0bfff17 	ldw	r2,-4(fp)
    6d40:	00c01b84 	movi	r3,110
    6d44:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6d48:	0005883a 	mov	r2,zero
    6d4c:	0000a906 	br	6ff4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    6d50:	e0bffc17 	ldw	r2,-16(fp)
    6d54:	10800003 	ldbu	r2,0(r2)
    6d58:	10803fcc 	andi	r2,r2,255
    6d5c:	10800160 	cmpeqi	r2,r2,5
    6d60:	1000051e 	bne	r2,zero,6d78 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    6d64:	e0bfff17 	ldw	r2,-4(fp)
    6d68:	00c00044 	movi	r3,1
    6d6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6d70:	0005883a 	mov	r2,zero
    6d74:	00009f06 	br	6ff4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    6d78:	e0fffe03 	ldbu	r3,-8(fp)
    6d7c:	00bfe004 	movi	r2,-128
    6d80:	1884703a 	and	r2,r3,r2
    6d84:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    6d88:	e0bff503 	ldbu	r2,-44(fp)
    6d8c:	10000626 	beq	r2,zero,6da8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    6d90:	e0bffe03 	ldbu	r2,-8(fp)
    6d94:	10801fcc 	andi	r2,r2,127
    6d98:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    6d9c:	00800044 	movi	r2,1
    6da0:	e0bff385 	stb	r2,-50(fp)
    6da4:	00000106 	br	6dac <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    6da8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    6dac:	e0bfff17 	ldw	r2,-4(fp)
    6db0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6db4:	0005303a 	rdctl	r2,status
    6db8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6dbc:	e0fff617 	ldw	r3,-40(fp)
    6dc0:	00bfff84 	movi	r2,-2
    6dc4:	1884703a 	and	r2,r3,r2
    6dc8:	1001703a 	wrctl	status,r2
  
  return context;
    6dcc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    6dd0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    6dd4:	e0bffe03 	ldbu	r2,-8(fp)
    6dd8:	10c00060 	cmpeqi	r3,r2,1
    6ddc:	18005f1e 	bne	r3,zero,6f5c <OSFlagAccept+0x260>
    6de0:	10c00088 	cmpgei	r3,r2,2
    6de4:	1800021e 	bne	r3,zero,6df0 <OSFlagAccept+0xf4>
    6de8:	10003f26 	beq	r2,zero,6ee8 <OSFlagAccept+0x1ec>
    6dec:	00007706 	br	6fcc <OSFlagAccept+0x2d0>
    6df0:	10c000a0 	cmpeqi	r3,r2,2
    6df4:	1800031e 	bne	r3,zero,6e04 <OSFlagAccept+0x108>
    6df8:	108000e0 	cmpeqi	r2,r2,3
    6dfc:	10001e1e 	bne	r2,zero,6e78 <OSFlagAccept+0x17c>
    6e00:	00007206 	br	6fcc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6e04:	e0bffc17 	ldw	r2,-16(fp)
    6e08:	10c0020b 	ldhu	r3,8(r2)
    6e0c:	e0bffd0b 	ldhu	r2,-12(fp)
    6e10:	1884703a 	and	r2,r3,r2
    6e14:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6e18:	e0fff30b 	ldhu	r3,-52(fp)
    6e1c:	e0bffd0b 	ldhu	r2,-12(fp)
    6e20:	18800d1e 	bne	r3,r2,6e58 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6e24:	e0bff383 	ldbu	r2,-50(fp)
    6e28:	10800058 	cmpnei	r2,r2,1
    6e2c:	10000d1e 	bne	r2,zero,6e64 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    6e30:	e0bffc17 	ldw	r2,-16(fp)
    6e34:	1080020b 	ldhu	r2,8(r2)
    6e38:	1007883a 	mov	r3,r2
    6e3c:	e0bff30b 	ldhu	r2,-52(fp)
    6e40:	0084303a 	nor	r2,zero,r2
    6e44:	1884703a 	and	r2,r3,r2
    6e48:	1007883a 	mov	r3,r2
    6e4c:	e0bffc17 	ldw	r2,-16(fp)
    6e50:	10c0020d 	sth	r3,8(r2)
    6e54:	00000306 	br	6e64 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6e58:	e0bfff17 	ldw	r2,-4(fp)
    6e5c:	00c01c04 	movi	r3,112
    6e60:	10c00005 	stb	r3,0(r2)
    6e64:	e0bff417 	ldw	r2,-48(fp)
    6e68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e6c:	e0bff717 	ldw	r2,-36(fp)
    6e70:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6e74:	00005e06 	br	6ff0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    6e78:	e0bffc17 	ldw	r2,-16(fp)
    6e7c:	10c0020b 	ldhu	r3,8(r2)
    6e80:	e0bffd0b 	ldhu	r2,-12(fp)
    6e84:	1884703a 	and	r2,r3,r2
    6e88:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    6e8c:	e0bff30b 	ldhu	r2,-52(fp)
    6e90:	10000d26 	beq	r2,zero,6ec8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6e94:	e0bff383 	ldbu	r2,-50(fp)
    6e98:	10800058 	cmpnei	r2,r2,1
    6e9c:	10000d1e 	bne	r2,zero,6ed4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    6ea0:	e0bffc17 	ldw	r2,-16(fp)
    6ea4:	1080020b 	ldhu	r2,8(r2)
    6ea8:	1007883a 	mov	r3,r2
    6eac:	e0bff30b 	ldhu	r2,-52(fp)
    6eb0:	0084303a 	nor	r2,zero,r2
    6eb4:	1884703a 	and	r2,r3,r2
    6eb8:	1007883a 	mov	r3,r2
    6ebc:	e0bffc17 	ldw	r2,-16(fp)
    6ec0:	10c0020d 	sth	r3,8(r2)
    6ec4:	00000306 	br	6ed4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6ec8:	e0bfff17 	ldw	r2,-4(fp)
    6ecc:	00c01c04 	movi	r3,112
    6ed0:	10c00005 	stb	r3,0(r2)
    6ed4:	e0bff417 	ldw	r2,-48(fp)
    6ed8:	e0bff815 	stw	r2,-32(fp)
    6edc:	e0bff817 	ldw	r2,-32(fp)
    6ee0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6ee4:	00004206 	br	6ff0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    6ee8:	e0bffc17 	ldw	r2,-16(fp)
    6eec:	1080020b 	ldhu	r2,8(r2)
    6ef0:	0084303a 	nor	r2,zero,r2
    6ef4:	1007883a 	mov	r3,r2
    6ef8:	e0bffd0b 	ldhu	r2,-12(fp)
    6efc:	1884703a 	and	r2,r3,r2
    6f00:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    6f04:	e0fff30b 	ldhu	r3,-52(fp)
    6f08:	e0bffd0b 	ldhu	r2,-12(fp)
    6f0c:	18800b1e 	bne	r3,r2,6f3c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6f10:	e0bff383 	ldbu	r2,-50(fp)
    6f14:	10800058 	cmpnei	r2,r2,1
    6f18:	10000b1e 	bne	r2,zero,6f48 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    6f1c:	e0bffc17 	ldw	r2,-16(fp)
    6f20:	10c0020b 	ldhu	r3,8(r2)
    6f24:	e0bff30b 	ldhu	r2,-52(fp)
    6f28:	1884b03a 	or	r2,r3,r2
    6f2c:	1007883a 	mov	r3,r2
    6f30:	e0bffc17 	ldw	r2,-16(fp)
    6f34:	10c0020d 	sth	r3,8(r2)
    6f38:	00000306 	br	6f48 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6f3c:	e0bfff17 	ldw	r2,-4(fp)
    6f40:	00c01c04 	movi	r3,112
    6f44:	10c00005 	stb	r3,0(r2)
    6f48:	e0bff417 	ldw	r2,-48(fp)
    6f4c:	e0bff915 	stw	r2,-28(fp)
    6f50:	e0bff917 	ldw	r2,-28(fp)
    6f54:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6f58:	00002506 	br	6ff0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    6f5c:	e0bffc17 	ldw	r2,-16(fp)
    6f60:	1080020b 	ldhu	r2,8(r2)
    6f64:	0084303a 	nor	r2,zero,r2
    6f68:	1007883a 	mov	r3,r2
    6f6c:	e0bffd0b 	ldhu	r2,-12(fp)
    6f70:	1884703a 	and	r2,r3,r2
    6f74:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    6f78:	e0bff30b 	ldhu	r2,-52(fp)
    6f7c:	10000b26 	beq	r2,zero,6fac <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    6f80:	e0bff383 	ldbu	r2,-50(fp)
    6f84:	10800058 	cmpnei	r2,r2,1
    6f88:	10000b1e 	bne	r2,zero,6fb8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    6f8c:	e0bffc17 	ldw	r2,-16(fp)
    6f90:	10c0020b 	ldhu	r3,8(r2)
    6f94:	e0bff30b 	ldhu	r2,-52(fp)
    6f98:	1884b03a 	or	r2,r3,r2
    6f9c:	1007883a 	mov	r3,r2
    6fa0:	e0bffc17 	ldw	r2,-16(fp)
    6fa4:	10c0020d 	sth	r3,8(r2)
    6fa8:	00000306 	br	6fb8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    6fac:	e0bfff17 	ldw	r2,-4(fp)
    6fb0:	00c01c04 	movi	r3,112
    6fb4:	10c00005 	stb	r3,0(r2)
    6fb8:	e0bff417 	ldw	r2,-48(fp)
    6fbc:	e0bffa15 	stw	r2,-24(fp)
    6fc0:	e0bffa17 	ldw	r2,-24(fp)
    6fc4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    6fc8:	00000906 	br	6ff0 <OSFlagAccept+0x2f4>
    6fcc:	e0bff417 	ldw	r2,-48(fp)
    6fd0:	e0bffb15 	stw	r2,-20(fp)
    6fd4:	e0bffb17 	ldw	r2,-20(fp)
    6fd8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    6fdc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    6fe0:	e0bfff17 	ldw	r2,-4(fp)
    6fe4:	00c01bc4 	movi	r3,111
    6fe8:	10c00005 	stb	r3,0(r2)
             break;
    6fec:	0001883a 	nop
    }
    return (flags_rdy);
    6ff0:	e0bff30b 	ldhu	r2,-52(fp)
}
    6ff4:	e037883a 	mov	sp,fp
    6ff8:	df000017 	ldw	fp,0(sp)
    6ffc:	dec00104 	addi	sp,sp,4
    7000:	f800283a 	ret

00007004 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    7004:	defff804 	addi	sp,sp,-32
    7008:	df000715 	stw	fp,28(sp)
    700c:	df000704 	addi	fp,sp,28
    7010:	2005883a 	mov	r2,r4
    7014:	e17fff15 	stw	r5,-4(fp)
    7018:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    701c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    7020:	e0bfff17 	ldw	r2,-4(fp)
    7024:	1000021e 	bne	r2,zero,7030 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    7028:	0005883a 	mov	r2,zero
    702c:	00003b06 	br	711c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    7030:	00800074 	movhi	r2,1
    7034:	1091ce04 	addi	r2,r2,18232
    7038:	10800003 	ldbu	r2,0(r2)
    703c:	10803fcc 	andi	r2,r2,255
    7040:	10000526 	beq	r2,zero,7058 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    7044:	e0bfff17 	ldw	r2,-4(fp)
    7048:	00c00404 	movi	r3,16
    704c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    7050:	0005883a 	mov	r2,zero
    7054:	00003106 	br	711c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7058:	0005303a 	rdctl	r2,status
    705c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7060:	e0fffb17 	ldw	r3,-20(fp)
    7064:	00bfff84 	movi	r2,-2
    7068:	1884703a 	and	r2,r3,r2
    706c:	1001703a 	wrctl	status,r2
  
  return context;
    7070:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    7074:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    7078:	00800074 	movhi	r2,1
    707c:	1091d104 	addi	r2,r2,18244
    7080:	10800017 	ldw	r2,0(r2)
    7084:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    7088:	e0bffa17 	ldw	r2,-24(fp)
    708c:	10001b26 	beq	r2,zero,70fc <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    7090:	00800074 	movhi	r2,1
    7094:	1091d104 	addi	r2,r2,18244
    7098:	10800017 	ldw	r2,0(r2)
    709c:	10c00117 	ldw	r3,4(r2)
    70a0:	00800074 	movhi	r2,1
    70a4:	1091d104 	addi	r2,r2,18244
    70a8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    70ac:	e0bffa17 	ldw	r2,-24(fp)
    70b0:	00c00144 	movi	r3,5
    70b4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    70b8:	e0bffa17 	ldw	r2,-24(fp)
    70bc:	e0fffe0b 	ldhu	r3,-8(fp)
    70c0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    70c4:	e0bffa17 	ldw	r2,-24(fp)
    70c8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    70cc:	e0bffa17 	ldw	r2,-24(fp)
    70d0:	00c00fc4 	movi	r3,63
    70d4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    70d8:	e0bffa17 	ldw	r2,-24(fp)
    70dc:	100002c5 	stb	zero,11(r2)
    70e0:	e0bff917 	ldw	r2,-28(fp)
    70e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    70e8:	e0bffc17 	ldw	r2,-16(fp)
    70ec:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    70f0:	e0bfff17 	ldw	r2,-4(fp)
    70f4:	10000005 	stb	zero,0(r2)
    70f8:	00000706 	br	7118 <OSFlagCreate+0x114>
    70fc:	e0bff917 	ldw	r2,-28(fp)
    7100:	e0bffd15 	stw	r2,-12(fp)
    7104:	e0bffd17 	ldw	r2,-12(fp)
    7108:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    710c:	e0bfff17 	ldw	r2,-4(fp)
    7110:	00c01c84 	movi	r3,114
    7114:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    7118:	e0bffa17 	ldw	r2,-24(fp)
}
    711c:	e037883a 	mov	sp,fp
    7120:	df000017 	ldw	fp,0(sp)
    7124:	dec00104 	addi	sp,sp,4
    7128:	f800283a 	ret

0000712c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    712c:	defff204 	addi	sp,sp,-56
    7130:	dfc00d15 	stw	ra,52(sp)
    7134:	df000c15 	stw	fp,48(sp)
    7138:	df000c04 	addi	fp,sp,48
    713c:	e13ffd15 	stw	r4,-12(fp)
    7140:	2805883a 	mov	r2,r5
    7144:	e1bfff15 	stw	r6,-4(fp)
    7148:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    714c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7150:	e0bfff17 	ldw	r2,-4(fp)
    7154:	1000021e 	bne	r2,zero,7160 <OSFlagDel+0x34>
        return (pgrp);
    7158:	e0bffd17 	ldw	r2,-12(fp)
    715c:	00008a06 	br	7388 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    7160:	e0bffd17 	ldw	r2,-12(fp)
    7164:	1000051e 	bne	r2,zero,717c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7168:	e0bfff17 	ldw	r2,-4(fp)
    716c:	00c01b84 	movi	r3,110
    7170:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    7174:	e0bffd17 	ldw	r2,-12(fp)
    7178:	00008306 	br	7388 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    717c:	00800074 	movhi	r2,1
    7180:	1091ce04 	addi	r2,r2,18232
    7184:	10800003 	ldbu	r2,0(r2)
    7188:	10803fcc 	andi	r2,r2,255
    718c:	10000526 	beq	r2,zero,71a4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7190:	e0bfff17 	ldw	r2,-4(fp)
    7194:	00c003c4 	movi	r3,15
    7198:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    719c:	e0bffd17 	ldw	r2,-12(fp)
    71a0:	00007906 	br	7388 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    71a4:	e0bffd17 	ldw	r2,-12(fp)
    71a8:	10800003 	ldbu	r2,0(r2)
    71ac:	10803fcc 	andi	r2,r2,255
    71b0:	10800160 	cmpeqi	r2,r2,5
    71b4:	1000051e 	bne	r2,zero,71cc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    71b8:	e0bfff17 	ldw	r2,-4(fp)
    71bc:	00c00044 	movi	r3,1
    71c0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    71c4:	e0bffd17 	ldw	r2,-12(fp)
    71c8:	00006f06 	br	7388 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    71cc:	0005303a 	rdctl	r2,status
    71d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    71d4:	e0fff817 	ldw	r3,-32(fp)
    71d8:	00bfff84 	movi	r2,-2
    71dc:	1884703a 	and	r2,r3,r2
    71e0:	1001703a 	wrctl	status,r2
  
  return context;
    71e4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    71e8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    71ec:	e0bffd17 	ldw	r2,-12(fp)
    71f0:	10800117 	ldw	r2,4(r2)
    71f4:	10000326 	beq	r2,zero,7204 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    71f8:	00800044 	movi	r2,1
    71fc:	e0bff405 	stb	r2,-48(fp)
    7200:	00000106 	br	7208 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7204:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    7208:	e0bffe03 	ldbu	r2,-8(fp)
    720c:	10000326 	beq	r2,zero,721c <OSFlagDel+0xf0>
    7210:	10800060 	cmpeqi	r2,r2,1
    7214:	1000271e 	bne	r2,zero,72b4 <OSFlagDel+0x188>
    7218:	00005006 	br	735c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    721c:	e0bff403 	ldbu	r2,-48(fp)
    7220:	10001a1e 	bne	r2,zero,728c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    7224:	e0bffd17 	ldw	r2,-12(fp)
    7228:	00c00fc4 	movi	r3,63
    722c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    7230:	e0bffd17 	ldw	r2,-12(fp)
    7234:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    7238:	e0bffd17 	ldw	r2,-12(fp)
    723c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    7240:	00800074 	movhi	r2,1
    7244:	1091d104 	addi	r2,r2,18244
    7248:	10c00017 	ldw	r3,0(r2)
    724c:	e0bffd17 	ldw	r2,-12(fp)
    7250:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7254:	e0bffd17 	ldw	r2,-12(fp)
    7258:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    725c:	00800074 	movhi	r2,1
    7260:	1091d104 	addi	r2,r2,18244
    7264:	e0fffd17 	ldw	r3,-12(fp)
    7268:	10c00015 	stw	r3,0(r2)
    726c:	e0bff717 	ldw	r2,-36(fp)
    7270:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7274:	e0bff917 	ldw	r2,-28(fp)
    7278:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    727c:	e0bfff17 	ldw	r2,-4(fp)
    7280:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    7284:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    7288:	00003e06 	br	7384 <OSFlagDel+0x258>
    728c:	e0bff717 	ldw	r2,-36(fp)
    7290:	e0bffa15 	stw	r2,-24(fp)
    7294:	e0bffa17 	ldw	r2,-24(fp)
    7298:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    729c:	e0bfff17 	ldw	r2,-4(fp)
    72a0:	00c01244 	movi	r3,73
    72a4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    72a8:	e0bffd17 	ldw	r2,-12(fp)
    72ac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    72b0:	00003406 	br	7384 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    72b4:	e0bffd17 	ldw	r2,-12(fp)
    72b8:	10800117 	ldw	r2,4(r2)
    72bc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    72c0:	00000606 	br	72dc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    72c4:	e13ff517 	ldw	r4,-44(fp)
    72c8:	000b883a 	mov	r5,zero
    72cc:	00083680 	call	8368 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    72d0:	e0bff517 	ldw	r2,-44(fp)
    72d4:	10800017 	ldw	r2,0(r2)
    72d8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    72dc:	e0bff517 	ldw	r2,-44(fp)
    72e0:	103ff81e 	bne	r2,zero,72c4 <__alt_mem_Flash_flash_data+0xf40072c4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    72e4:	e0bffd17 	ldw	r2,-12(fp)
    72e8:	00c00fc4 	movi	r3,63
    72ec:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    72f0:	e0bffd17 	ldw	r2,-12(fp)
    72f4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    72f8:	e0bffd17 	ldw	r2,-12(fp)
    72fc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    7300:	00800074 	movhi	r2,1
    7304:	1091d104 	addi	r2,r2,18244
    7308:	10c00017 	ldw	r3,0(r2)
    730c:	e0bffd17 	ldw	r2,-12(fp)
    7310:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    7314:	e0bffd17 	ldw	r2,-12(fp)
    7318:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    731c:	00800074 	movhi	r2,1
    7320:	1091d104 	addi	r2,r2,18244
    7324:	e0fffd17 	ldw	r3,-12(fp)
    7328:	10c00015 	stw	r3,0(r2)
    732c:	e0bff717 	ldw	r2,-36(fp)
    7330:	e0bffb15 	stw	r2,-20(fp)
    7334:	e0bffb17 	ldw	r2,-20(fp)
    7338:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    733c:	e0bff403 	ldbu	r2,-48(fp)
    7340:	10800058 	cmpnei	r2,r2,1
    7344:	1000011e 	bne	r2,zero,734c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7348:	00064980 	call	6498 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    734c:	e0bfff17 	ldw	r2,-4(fp)
    7350:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    7354:	e03ff615 	stw	zero,-40(fp)
             break;
    7358:	00000a06 	br	7384 <OSFlagDel+0x258>
    735c:	e0bff717 	ldw	r2,-36(fp)
    7360:	e0bffc15 	stw	r2,-16(fp)
    7364:	e0bffc17 	ldw	r2,-16(fp)
    7368:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    736c:	e0bfff17 	ldw	r2,-4(fp)
    7370:	00c001c4 	movi	r3,7
    7374:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    7378:	e0bffd17 	ldw	r2,-12(fp)
    737c:	e0bff615 	stw	r2,-40(fp)
             break;
    7380:	0001883a 	nop
    }
    return (pgrp_return);
    7384:	e0bff617 	ldw	r2,-40(fp)
}
    7388:	e037883a 	mov	sp,fp
    738c:	dfc00117 	ldw	ra,4(sp)
    7390:	df000017 	ldw	fp,0(sp)
    7394:	dec00204 	addi	sp,sp,8
    7398:	f800283a 	ret

0000739c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    739c:	defff604 	addi	sp,sp,-40
    73a0:	dfc00915 	stw	ra,36(sp)
    73a4:	df000815 	stw	fp,32(sp)
    73a8:	df000804 	addi	fp,sp,32
    73ac:	e13ffd15 	stw	r4,-12(fp)
    73b0:	e17ffe15 	stw	r5,-8(fp)
    73b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    73b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    73bc:	e0bfff17 	ldw	r2,-4(fp)
    73c0:	1000021e 	bne	r2,zero,73cc <OSFlagNameGet+0x30>
        return (0);
    73c4:	0005883a 	mov	r2,zero
    73c8:	00003b06 	br	74b8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    73cc:	e0bffd17 	ldw	r2,-12(fp)
    73d0:	1000051e 	bne	r2,zero,73e8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    73d4:	e0bfff17 	ldw	r2,-4(fp)
    73d8:	00c01b84 	movi	r3,110
    73dc:	10c00005 	stb	r3,0(r2)
        return (0);
    73e0:	0005883a 	mov	r2,zero
    73e4:	00003406 	br	74b8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    73e8:	e0bffe17 	ldw	r2,-8(fp)
    73ec:	1000051e 	bne	r2,zero,7404 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    73f0:	e0bfff17 	ldw	r2,-4(fp)
    73f4:	00c00304 	movi	r3,12
    73f8:	10c00005 	stb	r3,0(r2)
        return (0);
    73fc:	0005883a 	mov	r2,zero
    7400:	00002d06 	br	74b8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7404:	00800074 	movhi	r2,1
    7408:	1091ce04 	addi	r2,r2,18232
    740c:	10800003 	ldbu	r2,0(r2)
    7410:	10803fcc 	andi	r2,r2,255
    7414:	10000526 	beq	r2,zero,742c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    7418:	e0bfff17 	ldw	r2,-4(fp)
    741c:	00c00444 	movi	r3,17
    7420:	10c00005 	stb	r3,0(r2)
        return (0);
    7424:	0005883a 	mov	r2,zero
    7428:	00002306 	br	74b8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    742c:	0005303a 	rdctl	r2,status
    7430:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7434:	e0fffa17 	ldw	r3,-24(fp)
    7438:	00bfff84 	movi	r2,-2
    743c:	1884703a 	and	r2,r3,r2
    7440:	1001703a 	wrctl	status,r2
  
  return context;
    7444:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7448:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    744c:	e0bffd17 	ldw	r2,-12(fp)
    7450:	10800003 	ldbu	r2,0(r2)
    7454:	10803fcc 	andi	r2,r2,255
    7458:	10800160 	cmpeqi	r2,r2,5
    745c:	1000091e 	bne	r2,zero,7484 <OSFlagNameGet+0xe8>
    7460:	e0bff817 	ldw	r2,-32(fp)
    7464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7468:	e0bffb17 	ldw	r2,-20(fp)
    746c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7470:	e0bfff17 	ldw	r2,-4(fp)
    7474:	00c00044 	movi	r3,1
    7478:	10c00005 	stb	r3,0(r2)
        return (0);
    747c:	0005883a 	mov	r2,zero
    7480:	00000d06 	br	74b8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    7484:	e0bffd17 	ldw	r2,-12(fp)
    7488:	10800284 	addi	r2,r2,10
    748c:	e13ffe17 	ldw	r4,-8(fp)
    7490:	100b883a 	mov	r5,r2
    7494:	00065d40 	call	65d4 <OS_StrCopy>
    7498:	e0bff905 	stb	r2,-28(fp)
    749c:	e0bff817 	ldw	r2,-32(fp)
    74a0:	e0bffc15 	stw	r2,-16(fp)
    74a4:	e0bffc17 	ldw	r2,-16(fp)
    74a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    74ac:	e0bfff17 	ldw	r2,-4(fp)
    74b0:	10000005 	stb	zero,0(r2)
    return (len);
    74b4:	e0bff903 	ldbu	r2,-28(fp)
}
    74b8:	e037883a 	mov	sp,fp
    74bc:	dfc00117 	ldw	ra,4(sp)
    74c0:	df000017 	ldw	fp,0(sp)
    74c4:	dec00204 	addi	sp,sp,8
    74c8:	f800283a 	ret

000074cc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    74cc:	defff504 	addi	sp,sp,-44
    74d0:	dfc00a15 	stw	ra,40(sp)
    74d4:	df000915 	stw	fp,36(sp)
    74d8:	df000904 	addi	fp,sp,36
    74dc:	e13ffd15 	stw	r4,-12(fp)
    74e0:	e17ffe15 	stw	r5,-8(fp)
    74e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    74e8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    74ec:	e0bfff17 	ldw	r2,-4(fp)
    74f0:	1000011e 	bne	r2,zero,74f8 <OSFlagNameSet+0x2c>
        return;
    74f4:	00004406 	br	7608 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    74f8:	e0bffd17 	ldw	r2,-12(fp)
    74fc:	1000041e 	bne	r2,zero,7510 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7500:	e0bfff17 	ldw	r2,-4(fp)
    7504:	00c01b84 	movi	r3,110
    7508:	10c00005 	stb	r3,0(r2)
        return;
    750c:	00003e06 	br	7608 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    7510:	e0bffe17 	ldw	r2,-8(fp)
    7514:	1000041e 	bne	r2,zero,7528 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    7518:	e0bfff17 	ldw	r2,-4(fp)
    751c:	00c00304 	movi	r3,12
    7520:	10c00005 	stb	r3,0(r2)
        return;
    7524:	00003806 	br	7608 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7528:	00800074 	movhi	r2,1
    752c:	1091ce04 	addi	r2,r2,18232
    7530:	10800003 	ldbu	r2,0(r2)
    7534:	10803fcc 	andi	r2,r2,255
    7538:	10000426 	beq	r2,zero,754c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    753c:	e0bfff17 	ldw	r2,-4(fp)
    7540:	00c00484 	movi	r3,18
    7544:	10c00005 	stb	r3,0(r2)
        return;
    7548:	00002f06 	br	7608 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    754c:	0005303a 	rdctl	r2,status
    7550:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7554:	e0fff917 	ldw	r3,-28(fp)
    7558:	00bfff84 	movi	r2,-2
    755c:	1884703a 	and	r2,r3,r2
    7560:	1001703a 	wrctl	status,r2
  
  return context;
    7564:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7568:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    756c:	e0bffd17 	ldw	r2,-12(fp)
    7570:	10800003 	ldbu	r2,0(r2)
    7574:	10803fcc 	andi	r2,r2,255
    7578:	10800160 	cmpeqi	r2,r2,5
    757c:	1000081e 	bne	r2,zero,75a0 <OSFlagNameSet+0xd4>
    7580:	e0bff717 	ldw	r2,-36(fp)
    7584:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7588:	e0bffa17 	ldw	r2,-24(fp)
    758c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    7590:	e0bfff17 	ldw	r2,-4(fp)
    7594:	00c00044 	movi	r3,1
    7598:	10c00005 	stb	r3,0(r2)
        return;
    759c:	00001a06 	br	7608 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    75a0:	e13ffe17 	ldw	r4,-8(fp)
    75a4:	00066480 	call	6648 <OS_StrLen>
    75a8:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    75ac:	e0bff803 	ldbu	r2,-32(fp)
    75b0:	10800830 	cmpltui	r2,r2,32
    75b4:	1000081e 	bne	r2,zero,75d8 <OSFlagNameSet+0x10c>
    75b8:	e0bff717 	ldw	r2,-36(fp)
    75bc:	e0bffb15 	stw	r2,-20(fp)
    75c0:	e0bffb17 	ldw	r2,-20(fp)
    75c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    75c8:	e0bfff17 	ldw	r2,-4(fp)
    75cc:	00c01cc4 	movi	r3,115
    75d0:	10c00005 	stb	r3,0(r2)
        return;
    75d4:	00000c06 	br	7608 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    75d8:	e0bffd17 	ldw	r2,-12(fp)
    75dc:	10800284 	addi	r2,r2,10
    75e0:	1009883a 	mov	r4,r2
    75e4:	e17ffe17 	ldw	r5,-8(fp)
    75e8:	00065d40 	call	65d4 <OS_StrCopy>
    75ec:	e0bff717 	ldw	r2,-36(fp)
    75f0:	e0bffc15 	stw	r2,-16(fp)
    75f4:	e0bffc17 	ldw	r2,-16(fp)
    75f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    75fc:	e0bfff17 	ldw	r2,-4(fp)
    7600:	10000005 	stb	zero,0(r2)
    return;
    7604:	0001883a 	nop
}
    7608:	e037883a 	mov	sp,fp
    760c:	dfc00117 	ldw	ra,4(sp)
    7610:	df000017 	ldw	fp,0(sp)
    7614:	dec00204 	addi	sp,sp,8
    7618:	f800283a 	ret

0000761c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    761c:	deffe204 	addi	sp,sp,-120
    7620:	dfc01d15 	stw	ra,116(sp)
    7624:	df001c15 	stw	fp,112(sp)
    7628:	df001c04 	addi	fp,sp,112
    762c:	e13ffc15 	stw	r4,-16(fp)
    7630:	2809883a 	mov	r4,r5
    7634:	3007883a 	mov	r3,r6
    7638:	3805883a 	mov	r2,r7
    763c:	e13ffd0d 	sth	r4,-12(fp)
    7640:	e0fffe05 	stb	r3,-8(fp)
    7644:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7648:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    764c:	e0800217 	ldw	r2,8(fp)
    7650:	1000021e 	bne	r2,zero,765c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    7654:	0005883a 	mov	r2,zero
    7658:	00016706 	br	7bf8 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    765c:	e0bffc17 	ldw	r2,-16(fp)
    7660:	1000051e 	bne	r2,zero,7678 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7664:	e0800217 	ldw	r2,8(fp)
    7668:	00c01b84 	movi	r3,110
    766c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7670:	0005883a 	mov	r2,zero
    7674:	00016006 	br	7bf8 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7678:	00800074 	movhi	r2,1
    767c:	1091ce04 	addi	r2,r2,18232
    7680:	10800003 	ldbu	r2,0(r2)
    7684:	10803fcc 	andi	r2,r2,255
    7688:	10000526 	beq	r2,zero,76a0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    768c:	e0800217 	ldw	r2,8(fp)
    7690:	00c00084 	movi	r3,2
    7694:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7698:	0005883a 	mov	r2,zero
    769c:	00015606 	br	7bf8 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    76a0:	00800074 	movhi	r2,1
    76a4:	1091c004 	addi	r2,r2,18176
    76a8:	10800003 	ldbu	r2,0(r2)
    76ac:	10803fcc 	andi	r2,r2,255
    76b0:	10000526 	beq	r2,zero,76c8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    76b4:	e0800217 	ldw	r2,8(fp)
    76b8:	00c00344 	movi	r3,13
    76bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    76c0:	0005883a 	mov	r2,zero
    76c4:	00014c06 	br	7bf8 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    76c8:	e0bffc17 	ldw	r2,-16(fp)
    76cc:	10800003 	ldbu	r2,0(r2)
    76d0:	10803fcc 	andi	r2,r2,255
    76d4:	10800160 	cmpeqi	r2,r2,5
    76d8:	1000051e 	bne	r2,zero,76f0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    76dc:	e0800217 	ldw	r2,8(fp)
    76e0:	00c00044 	movi	r3,1
    76e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    76e8:	0005883a 	mov	r2,zero
    76ec:	00014206 	br	7bf8 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    76f0:	e0fffe03 	ldbu	r3,-8(fp)
    76f4:	00bfe004 	movi	r2,-128
    76f8:	1884703a 	and	r2,r3,r2
    76fc:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    7700:	e0bfe703 	ldbu	r2,-100(fp)
    7704:	10000626 	beq	r2,zero,7720 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    7708:	e0bffe03 	ldbu	r2,-8(fp)
    770c:	10801fcc 	andi	r2,r2,127
    7710:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    7714:	00800044 	movi	r2,1
    7718:	e0bfe505 	stb	r2,-108(fp)
    771c:	00000106 	br	7724 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    7720:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7724:	0005303a 	rdctl	r2,status
    7728:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    772c:	e0ffe917 	ldw	r3,-92(fp)
    7730:	00bfff84 	movi	r2,-2
    7734:	1884703a 	and	r2,r3,r2
    7738:	1001703a 	wrctl	status,r2
  
  return context;
    773c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7740:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    7744:	e0bffe03 	ldbu	r2,-8(fp)
    7748:	10c00060 	cmpeqi	r3,r2,1
    774c:	1800921e 	bne	r3,zero,7998 <OSFlagPend+0x37c>
    7750:	10c00088 	cmpgei	r3,r2,2
    7754:	1800021e 	bne	r3,zero,7760 <OSFlagPend+0x144>
    7758:	10006126 	beq	r2,zero,78e0 <OSFlagPend+0x2c4>
    775c:	0000bb06 	br	7a4c <OSFlagPend+0x430>
    7760:	10c000a0 	cmpeqi	r3,r2,2
    7764:	1800031e 	bne	r3,zero,7774 <OSFlagPend+0x158>
    7768:	108000e0 	cmpeqi	r2,r2,3
    776c:	10002f1e 	bne	r2,zero,782c <OSFlagPend+0x210>
    7770:	0000b606 	br	7a4c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    7774:	e0bffc17 	ldw	r2,-16(fp)
    7778:	10c0020b 	ldhu	r3,8(r2)
    777c:	e0bffd0b 	ldhu	r2,-12(fp)
    7780:	1884703a 	and	r2,r3,r2
    7784:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    7788:	e0ffe78b 	ldhu	r3,-98(fp)
    778c:	e0bffd0b 	ldhu	r2,-12(fp)
    7790:	1880191e 	bne	r3,r2,77f8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7794:	e0bfe503 	ldbu	r2,-108(fp)
    7798:	10800058 	cmpnei	r2,r2,1
    779c:	1000091e 	bne	r2,zero,77c4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    77a0:	e0bffc17 	ldw	r2,-16(fp)
    77a4:	1080020b 	ldhu	r2,8(r2)
    77a8:	1007883a 	mov	r3,r2
    77ac:	e0bfe78b 	ldhu	r2,-98(fp)
    77b0:	0084303a 	nor	r2,zero,r2
    77b4:	1884703a 	and	r2,r3,r2
    77b8:	1007883a 	mov	r3,r2
    77bc:	e0bffc17 	ldw	r2,-16(fp)
    77c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    77c4:	00800074 	movhi	r2,1
    77c8:	1091cf04 	addi	r2,r2,18236
    77cc:	10800017 	ldw	r2,0(r2)
    77d0:	e0ffe78b 	ldhu	r3,-98(fp)
    77d4:	10c00b0d 	sth	r3,44(r2)
    77d8:	e0bfe617 	ldw	r2,-104(fp)
    77dc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    77e0:	e0bfea17 	ldw	r2,-88(fp)
    77e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    77e8:	e0800217 	ldw	r2,8(fp)
    77ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    77f0:	e0bfe78b 	ldhu	r2,-98(fp)
    77f4:	00010006 	br	7bf8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    77f8:	e1bffd0b 	ldhu	r6,-12(fp)
    77fc:	e0fffe03 	ldbu	r3,-8(fp)
    7800:	e0bfff0b 	ldhu	r2,-4(fp)
    7804:	e17ff704 	addi	r5,fp,-36
    7808:	d8800015 	stw	r2,0(sp)
    780c:	e13ffc17 	ldw	r4,-16(fp)
    7810:	180f883a 	mov	r7,r3
    7814:	00080c00 	call	80c0 <OS_FlagBlock>
    7818:	e0bfe617 	ldw	r2,-104(fp)
    781c:	e0bfeb15 	stw	r2,-84(fp)
    7820:	e0bfeb17 	ldw	r2,-84(fp)
    7824:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7828:	00009206 	br	7a74 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    782c:	e0bffc17 	ldw	r2,-16(fp)
    7830:	10c0020b 	ldhu	r3,8(r2)
    7834:	e0bffd0b 	ldhu	r2,-12(fp)
    7838:	1884703a 	and	r2,r3,r2
    783c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    7840:	e0bfe78b 	ldhu	r2,-98(fp)
    7844:	10001926 	beq	r2,zero,78ac <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7848:	e0bfe503 	ldbu	r2,-108(fp)
    784c:	10800058 	cmpnei	r2,r2,1
    7850:	1000091e 	bne	r2,zero,7878 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    7854:	e0bffc17 	ldw	r2,-16(fp)
    7858:	1080020b 	ldhu	r2,8(r2)
    785c:	1007883a 	mov	r3,r2
    7860:	e0bfe78b 	ldhu	r2,-98(fp)
    7864:	0084303a 	nor	r2,zero,r2
    7868:	1884703a 	and	r2,r3,r2
    786c:	1007883a 	mov	r3,r2
    7870:	e0bffc17 	ldw	r2,-16(fp)
    7874:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7878:	00800074 	movhi	r2,1
    787c:	1091cf04 	addi	r2,r2,18236
    7880:	10800017 	ldw	r2,0(r2)
    7884:	e0ffe78b 	ldhu	r3,-98(fp)
    7888:	10c00b0d 	sth	r3,44(r2)
    788c:	e0bfe617 	ldw	r2,-104(fp)
    7890:	e0bfec15 	stw	r2,-80(fp)
    7894:	e0bfec17 	ldw	r2,-80(fp)
    7898:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    789c:	e0800217 	ldw	r2,8(fp)
    78a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    78a4:	e0bfe78b 	ldhu	r2,-98(fp)
    78a8:	0000d306 	br	7bf8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    78ac:	e1bffd0b 	ldhu	r6,-12(fp)
    78b0:	e0fffe03 	ldbu	r3,-8(fp)
    78b4:	e0bfff0b 	ldhu	r2,-4(fp)
    78b8:	e17ff704 	addi	r5,fp,-36
    78bc:	d8800015 	stw	r2,0(sp)
    78c0:	e13ffc17 	ldw	r4,-16(fp)
    78c4:	180f883a 	mov	r7,r3
    78c8:	00080c00 	call	80c0 <OS_FlagBlock>
    78cc:	e0bfe617 	ldw	r2,-104(fp)
    78d0:	e0bfed15 	stw	r2,-76(fp)
    78d4:	e0bfed17 	ldw	r2,-76(fp)
    78d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    78dc:	00006506 	br	7a74 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    78e0:	e0bffc17 	ldw	r2,-16(fp)
    78e4:	1080020b 	ldhu	r2,8(r2)
    78e8:	0084303a 	nor	r2,zero,r2
    78ec:	1007883a 	mov	r3,r2
    78f0:	e0bffd0b 	ldhu	r2,-12(fp)
    78f4:	1884703a 	and	r2,r3,r2
    78f8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    78fc:	e0ffe78b 	ldhu	r3,-98(fp)
    7900:	e0bffd0b 	ldhu	r2,-12(fp)
    7904:	1880171e 	bne	r3,r2,7964 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    7908:	e0bfe503 	ldbu	r2,-108(fp)
    790c:	10800058 	cmpnei	r2,r2,1
    7910:	1000071e 	bne	r2,zero,7930 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    7914:	e0bffc17 	ldw	r2,-16(fp)
    7918:	10c0020b 	ldhu	r3,8(r2)
    791c:	e0bfe78b 	ldhu	r2,-98(fp)
    7920:	1884b03a 	or	r2,r3,r2
    7924:	1007883a 	mov	r3,r2
    7928:	e0bffc17 	ldw	r2,-16(fp)
    792c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    7930:	00800074 	movhi	r2,1
    7934:	1091cf04 	addi	r2,r2,18236
    7938:	10800017 	ldw	r2,0(r2)
    793c:	e0ffe78b 	ldhu	r3,-98(fp)
    7940:	10c00b0d 	sth	r3,44(r2)
    7944:	e0bfe617 	ldw	r2,-104(fp)
    7948:	e0bfee15 	stw	r2,-72(fp)
    794c:	e0bfee17 	ldw	r2,-72(fp)
    7950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7954:	e0800217 	ldw	r2,8(fp)
    7958:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    795c:	e0bfe78b 	ldhu	r2,-98(fp)
    7960:	0000a506 	br	7bf8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7964:	e1bffd0b 	ldhu	r6,-12(fp)
    7968:	e0fffe03 	ldbu	r3,-8(fp)
    796c:	e0bfff0b 	ldhu	r2,-4(fp)
    7970:	e17ff704 	addi	r5,fp,-36
    7974:	d8800015 	stw	r2,0(sp)
    7978:	e13ffc17 	ldw	r4,-16(fp)
    797c:	180f883a 	mov	r7,r3
    7980:	00080c00 	call	80c0 <OS_FlagBlock>
    7984:	e0bfe617 	ldw	r2,-104(fp)
    7988:	e0bfef15 	stw	r2,-68(fp)
    798c:	e0bfef17 	ldw	r2,-68(fp)
    7990:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7994:	00003706 	br	7a74 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    7998:	e0bffc17 	ldw	r2,-16(fp)
    799c:	1080020b 	ldhu	r2,8(r2)
    79a0:	0084303a 	nor	r2,zero,r2
    79a4:	1007883a 	mov	r3,r2
    79a8:	e0bffd0b 	ldhu	r2,-12(fp)
    79ac:	1884703a 	and	r2,r3,r2
    79b0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    79b4:	e0bfe78b 	ldhu	r2,-98(fp)
    79b8:	10001726 	beq	r2,zero,7a18 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    79bc:	e0bfe503 	ldbu	r2,-108(fp)
    79c0:	10800058 	cmpnei	r2,r2,1
    79c4:	1000071e 	bne	r2,zero,79e4 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    79c8:	e0bffc17 	ldw	r2,-16(fp)
    79cc:	10c0020b 	ldhu	r3,8(r2)
    79d0:	e0bfe78b 	ldhu	r2,-98(fp)
    79d4:	1884b03a 	or	r2,r3,r2
    79d8:	1007883a 	mov	r3,r2
    79dc:	e0bffc17 	ldw	r2,-16(fp)
    79e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    79e4:	00800074 	movhi	r2,1
    79e8:	1091cf04 	addi	r2,r2,18236
    79ec:	10800017 	ldw	r2,0(r2)
    79f0:	e0ffe78b 	ldhu	r3,-98(fp)
    79f4:	10c00b0d 	sth	r3,44(r2)
    79f8:	e0bfe617 	ldw	r2,-104(fp)
    79fc:	e0bff015 	stw	r2,-64(fp)
    7a00:	e0bff017 	ldw	r2,-64(fp)
    7a04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    7a08:	e0800217 	ldw	r2,8(fp)
    7a0c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    7a10:	e0bfe78b 	ldhu	r2,-98(fp)
    7a14:	00007806 	br	7bf8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    7a18:	e1bffd0b 	ldhu	r6,-12(fp)
    7a1c:	e0fffe03 	ldbu	r3,-8(fp)
    7a20:	e0bfff0b 	ldhu	r2,-4(fp)
    7a24:	e17ff704 	addi	r5,fp,-36
    7a28:	d8800015 	stw	r2,0(sp)
    7a2c:	e13ffc17 	ldw	r4,-16(fp)
    7a30:	180f883a 	mov	r7,r3
    7a34:	00080c00 	call	80c0 <OS_FlagBlock>
    7a38:	e0bfe617 	ldw	r2,-104(fp)
    7a3c:	e0bff115 	stw	r2,-60(fp)
    7a40:	e0bff117 	ldw	r2,-60(fp)
    7a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    7a48:	00000a06 	br	7a74 <OSFlagPend+0x458>
    7a4c:	e0bfe617 	ldw	r2,-104(fp)
    7a50:	e0bff215 	stw	r2,-56(fp)
    7a54:	e0bff217 	ldw	r2,-56(fp)
    7a58:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    7a5c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    7a60:	e0800217 	ldw	r2,8(fp)
    7a64:	00c01bc4 	movi	r3,111
    7a68:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    7a6c:	e0bfe78b 	ldhu	r2,-98(fp)
    7a70:	00006106 	br	7bf8 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    7a74:	00064980 	call	6498 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a78:	0005303a 	rdctl	r2,status
    7a7c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a80:	e0fff317 	ldw	r3,-52(fp)
    7a84:	00bfff84 	movi	r2,-2
    7a88:	1884703a 	and	r2,r3,r2
    7a8c:	1001703a 	wrctl	status,r2
  
  return context;
    7a90:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    7a94:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    7a98:	00800074 	movhi	r2,1
    7a9c:	1091cf04 	addi	r2,r2,18236
    7aa0:	10800017 	ldw	r2,0(r2)
    7aa4:	10800c43 	ldbu	r2,49(r2)
    7aa8:	10803fcc 	andi	r2,r2,255
    7aac:	10002226 	beq	r2,zero,7b38 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    7ab0:	00800074 	movhi	r2,1
    7ab4:	1091cf04 	addi	r2,r2,18236
    7ab8:	10800017 	ldw	r2,0(r2)
    7abc:	10800c43 	ldbu	r2,49(r2)
    7ac0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7ac4:	00800074 	movhi	r2,1
    7ac8:	1091cf04 	addi	r2,r2,18236
    7acc:	10800017 	ldw	r2,0(r2)
    7ad0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    7ad4:	e0bff704 	addi	r2,fp,-36
    7ad8:	1009883a 	mov	r4,r2
    7adc:	00084780 	call	8478 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    7ae0:	00800074 	movhi	r2,1
    7ae4:	1091cf04 	addi	r2,r2,18236
    7ae8:	10800017 	ldw	r2,0(r2)
    7aec:	10000c05 	stb	zero,48(r2)
    7af0:	e0bfe617 	ldw	r2,-104(fp)
    7af4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7af8:	e0bff417 	ldw	r2,-48(fp)
    7afc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    7b00:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    7b04:	e0bfe803 	ldbu	r2,-96(fp)
    7b08:	108000a0 	cmpeqi	r2,r2,2
    7b0c:	10000426 	beq	r2,zero,7b20 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    7b10:	e0800217 	ldw	r2,8(fp)
    7b14:	00c00384 	movi	r3,14
    7b18:	10c00005 	stb	r3,0(r2)
                 break;
    7b1c:	00000406 	br	7b30 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    7b20:	e0800217 	ldw	r2,8(fp)
    7b24:	00c00284 	movi	r3,10
    7b28:	10c00005 	stb	r3,0(r2)
                 break;
    7b2c:	0001883a 	nop
        }
        return (flags_rdy);
    7b30:	e0bfe78b 	ldhu	r2,-98(fp)
    7b34:	00003006 	br	7bf8 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    7b38:	00800074 	movhi	r2,1
    7b3c:	1091cf04 	addi	r2,r2,18236
    7b40:	10800017 	ldw	r2,0(r2)
    7b44:	10800b0b 	ldhu	r2,44(r2)
    7b48:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    7b4c:	e0bfe503 	ldbu	r2,-108(fp)
    7b50:	10800058 	cmpnei	r2,r2,1
    7b54:	1000211e 	bne	r2,zero,7bdc <OSFlagPend+0x5c0>
        switch (wait_type) {
    7b58:	e0bffe03 	ldbu	r2,-8(fp)
    7b5c:	10001616 	blt	r2,zero,7bb8 <OSFlagPend+0x59c>
    7b60:	10c00090 	cmplti	r3,r2,2
    7b64:	18000c1e 	bne	r3,zero,7b98 <OSFlagPend+0x57c>
    7b68:	10800108 	cmpgei	r2,r2,4
    7b6c:	1000121e 	bne	r2,zero,7bb8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    7b70:	e0bffc17 	ldw	r2,-16(fp)
    7b74:	1080020b 	ldhu	r2,8(r2)
    7b78:	1007883a 	mov	r3,r2
    7b7c:	e0bfe78b 	ldhu	r2,-98(fp)
    7b80:	0084303a 	nor	r2,zero,r2
    7b84:	1884703a 	and	r2,r3,r2
    7b88:	1007883a 	mov	r3,r2
    7b8c:	e0bffc17 	ldw	r2,-16(fp)
    7b90:	10c0020d 	sth	r3,8(r2)
                 break;
    7b94:	00001106 	br	7bdc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    7b98:	e0bffc17 	ldw	r2,-16(fp)
    7b9c:	10c0020b 	ldhu	r3,8(r2)
    7ba0:	e0bfe78b 	ldhu	r2,-98(fp)
    7ba4:	1884b03a 	or	r2,r3,r2
    7ba8:	1007883a 	mov	r3,r2
    7bac:	e0bffc17 	ldw	r2,-16(fp)
    7bb0:	10c0020d 	sth	r3,8(r2)
                 break;
    7bb4:	00000906 	br	7bdc <OSFlagPend+0x5c0>
    7bb8:	e0bfe617 	ldw	r2,-104(fp)
    7bbc:	e0bff515 	stw	r2,-44(fp)
    7bc0:	e0bff517 	ldw	r2,-44(fp)
    7bc4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7bc8:	e0800217 	ldw	r2,8(fp)
    7bcc:	00c01bc4 	movi	r3,111
    7bd0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7bd4:	0005883a 	mov	r2,zero
    7bd8:	00000706 	br	7bf8 <OSFlagPend+0x5dc>
    7bdc:	e0bfe617 	ldw	r2,-104(fp)
    7be0:	e0bff615 	stw	r2,-40(fp)
    7be4:	e0bff617 	ldw	r2,-40(fp)
    7be8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    7bec:	e0800217 	ldw	r2,8(fp)
    7bf0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    7bf4:	e0bfe78b 	ldhu	r2,-98(fp)
}
    7bf8:	e037883a 	mov	sp,fp
    7bfc:	dfc00117 	ldw	ra,4(sp)
    7c00:	df000017 	ldw	fp,0(sp)
    7c04:	dec00204 	addi	sp,sp,8
    7c08:	f800283a 	ret

00007c0c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    7c0c:	defffb04 	addi	sp,sp,-20
    7c10:	df000415 	stw	fp,16(sp)
    7c14:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    7c18:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7c1c:	0005303a 	rdctl	r2,status
    7c20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c24:	e0fffe17 	ldw	r3,-8(fp)
    7c28:	00bfff84 	movi	r2,-2
    7c2c:	1884703a 	and	r2,r3,r2
    7c30:	1001703a 	wrctl	status,r2
  
  return context;
    7c34:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    7c38:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    7c3c:	00800074 	movhi	r2,1
    7c40:	1091cf04 	addi	r2,r2,18236
    7c44:	10800017 	ldw	r2,0(r2)
    7c48:	10800b0b 	ldhu	r2,44(r2)
    7c4c:	e0bffd0d 	sth	r2,-12(fp)
    7c50:	e0bffc17 	ldw	r2,-16(fp)
    7c54:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c58:	e0bfff17 	ldw	r2,-4(fp)
    7c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    7c60:	e0bffd0b 	ldhu	r2,-12(fp)
}
    7c64:	e037883a 	mov	sp,fp
    7c68:	df000017 	ldw	fp,0(sp)
    7c6c:	dec00104 	addi	sp,sp,4
    7c70:	f800283a 	ret

00007c74 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    7c74:	deffef04 	addi	sp,sp,-68
    7c78:	dfc01015 	stw	ra,64(sp)
    7c7c:	df000f15 	stw	fp,60(sp)
    7c80:	df000f04 	addi	fp,sp,60
    7c84:	e13ffc15 	stw	r4,-16(fp)
    7c88:	2807883a 	mov	r3,r5
    7c8c:	3005883a 	mov	r2,r6
    7c90:	e1ffff15 	stw	r7,-4(fp)
    7c94:	e0fffd0d 	sth	r3,-12(fp)
    7c98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    7c9c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    7ca0:	e0bfff17 	ldw	r2,-4(fp)
    7ca4:	1000021e 	bne	r2,zero,7cb0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    7ca8:	0005883a 	mov	r2,zero
    7cac:	0000ce06 	br	7fe8 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    7cb0:	e0bffc17 	ldw	r2,-16(fp)
    7cb4:	1000051e 	bne	r2,zero,7ccc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    7cb8:	e0bfff17 	ldw	r2,-4(fp)
    7cbc:	00c01b84 	movi	r3,110
    7cc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7cc4:	0005883a 	mov	r2,zero
    7cc8:	0000c706 	br	7fe8 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    7ccc:	e0bffc17 	ldw	r2,-16(fp)
    7cd0:	10800003 	ldbu	r2,0(r2)
    7cd4:	10803fcc 	andi	r2,r2,255
    7cd8:	10800160 	cmpeqi	r2,r2,5
    7cdc:	1000051e 	bne	r2,zero,7cf4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    7ce0:	e0bfff17 	ldw	r2,-4(fp)
    7ce4:	00c00044 	movi	r3,1
    7ce8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    7cec:	0005883a 	mov	r2,zero
    7cf0:	0000bd06 	br	7fe8 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7cf4:	0005303a 	rdctl	r2,status
    7cf8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7cfc:	e0fff617 	ldw	r3,-40(fp)
    7d00:	00bfff84 	movi	r2,-2
    7d04:	1884703a 	and	r2,r3,r2
    7d08:	1001703a 	wrctl	status,r2
  
  return context;
    7d0c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7d10:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    7d14:	e0bffe03 	ldbu	r2,-8(fp)
    7d18:	10000326 	beq	r2,zero,7d28 <OSFlagPost+0xb4>
    7d1c:	10800060 	cmpeqi	r2,r2,1
    7d20:	10000b1e 	bne	r2,zero,7d50 <OSFlagPost+0xdc>
    7d24:	00001206 	br	7d70 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    7d28:	e0bffc17 	ldw	r2,-16(fp)
    7d2c:	1080020b 	ldhu	r2,8(r2)
    7d30:	1007883a 	mov	r3,r2
    7d34:	e0bffd0b 	ldhu	r2,-12(fp)
    7d38:	0084303a 	nor	r2,zero,r2
    7d3c:	1884703a 	and	r2,r3,r2
    7d40:	1007883a 	mov	r3,r2
    7d44:	e0bffc17 	ldw	r2,-16(fp)
    7d48:	10c0020d 	sth	r3,8(r2)
             break;
    7d4c:	00001106 	br	7d94 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    7d50:	e0bffc17 	ldw	r2,-16(fp)
    7d54:	10c0020b 	ldhu	r3,8(r2)
    7d58:	e0bffd0b 	ldhu	r2,-12(fp)
    7d5c:	1884b03a 	or	r2,r3,r2
    7d60:	1007883a 	mov	r3,r2
    7d64:	e0bffc17 	ldw	r2,-16(fp)
    7d68:	10c0020d 	sth	r3,8(r2)
             break;
    7d6c:	00000906 	br	7d94 <OSFlagPost+0x120>
    7d70:	e0bff317 	ldw	r2,-52(fp)
    7d74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d78:	e0bff717 	ldw	r2,-36(fp)
    7d7c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    7d80:	e0bfff17 	ldw	r2,-4(fp)
    7d84:	00c01c44 	movi	r3,113
    7d88:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    7d8c:	0005883a 	mov	r2,zero
    7d90:	00009506 	br	7fe8 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    7d94:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    7d98:	e0bffc17 	ldw	r2,-16(fp)
    7d9c:	10800117 	ldw	r2,4(r2)
    7da0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7da4:	00007406 	br	7f78 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    7da8:	e0bff117 	ldw	r2,-60(fp)
    7dac:	10800483 	ldbu	r2,18(r2)
    7db0:	10803fcc 	andi	r2,r2,255
    7db4:	10c00060 	cmpeqi	r3,r2,1
    7db8:	18004d1e 	bne	r3,zero,7ef0 <OSFlagPost+0x27c>
    7dbc:	10c00088 	cmpgei	r3,r2,2
    7dc0:	1800021e 	bne	r3,zero,7dcc <OSFlagPost+0x158>
    7dc4:	10003126 	beq	r2,zero,7e8c <OSFlagPost+0x218>
    7dc8:	00005f06 	br	7f48 <OSFlagPost+0x2d4>
    7dcc:	10c000a0 	cmpeqi	r3,r2,2
    7dd0:	1800031e 	bne	r3,zero,7de0 <OSFlagPost+0x16c>
    7dd4:	108000e0 	cmpeqi	r2,r2,3
    7dd8:	1000181e 	bne	r2,zero,7e3c <OSFlagPost+0x1c8>
    7ddc:	00005a06 	br	7f48 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7de0:	e0bffc17 	ldw	r2,-16(fp)
    7de4:	10c0020b 	ldhu	r3,8(r2)
    7de8:	e0bff117 	ldw	r2,-60(fp)
    7dec:	1080040b 	ldhu	r2,16(r2)
    7df0:	1884703a 	and	r2,r3,r2
    7df4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7df8:	e0bff117 	ldw	r2,-60(fp)
    7dfc:	1080040b 	ldhu	r2,16(r2)
    7e00:	10ffffcc 	andi	r3,r2,65535
    7e04:	e0bff40b 	ldhu	r2,-48(fp)
    7e08:	18800b1e 	bne	r3,r2,7e38 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7e0c:	e0bff40b 	ldhu	r2,-48(fp)
    7e10:	e13ff117 	ldw	r4,-60(fp)
    7e14:	100b883a 	mov	r5,r2
    7e18:	00083680 	call	8368 <OS_FlagTaskRdy>
    7e1c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7e20:	e0bff483 	ldbu	r2,-46(fp)
    7e24:	10800058 	cmpnei	r2,r2,1
    7e28:	1000031e 	bne	r2,zero,7e38 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7e2c:	00800044 	movi	r2,1
    7e30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7e34:	00004d06 	br	7f6c <OSFlagPost+0x2f8>
    7e38:	00004c06 	br	7f6c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7e3c:	e0bffc17 	ldw	r2,-16(fp)
    7e40:	10c0020b 	ldhu	r3,8(r2)
    7e44:	e0bff117 	ldw	r2,-60(fp)
    7e48:	1080040b 	ldhu	r2,16(r2)
    7e4c:	1884703a 	and	r2,r3,r2
    7e50:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7e54:	e0bff40b 	ldhu	r2,-48(fp)
    7e58:	10000b26 	beq	r2,zero,7e88 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7e5c:	e0bff40b 	ldhu	r2,-48(fp)
    7e60:	e13ff117 	ldw	r4,-60(fp)
    7e64:	100b883a 	mov	r5,r2
    7e68:	00083680 	call	8368 <OS_FlagTaskRdy>
    7e6c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7e70:	e0bff483 	ldbu	r2,-46(fp)
    7e74:	10800058 	cmpnei	r2,r2,1
    7e78:	1000031e 	bne	r2,zero,7e88 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7e7c:	00800044 	movi	r2,1
    7e80:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7e84:	00003906 	br	7f6c <OSFlagPost+0x2f8>
    7e88:	00003806 	br	7f6c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7e8c:	e0bffc17 	ldw	r2,-16(fp)
    7e90:	1080020b 	ldhu	r2,8(r2)
    7e94:	0084303a 	nor	r2,zero,r2
    7e98:	1007883a 	mov	r3,r2
    7e9c:	e0bff117 	ldw	r2,-60(fp)
    7ea0:	1080040b 	ldhu	r2,16(r2)
    7ea4:	1884703a 	and	r2,r3,r2
    7ea8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    7eac:	e0bff117 	ldw	r2,-60(fp)
    7eb0:	1080040b 	ldhu	r2,16(r2)
    7eb4:	10ffffcc 	andi	r3,r2,65535
    7eb8:	e0bff40b 	ldhu	r2,-48(fp)
    7ebc:	18800b1e 	bne	r3,r2,7eec <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7ec0:	e0bff40b 	ldhu	r2,-48(fp)
    7ec4:	e13ff117 	ldw	r4,-60(fp)
    7ec8:	100b883a 	mov	r5,r2
    7ecc:	00083680 	call	8368 <OS_FlagTaskRdy>
    7ed0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7ed4:	e0bff483 	ldbu	r2,-46(fp)
    7ed8:	10800058 	cmpnei	r2,r2,1
    7edc:	1000031e 	bne	r2,zero,7eec <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7ee0:	00800044 	movi	r2,1
    7ee4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7ee8:	00002006 	br	7f6c <OSFlagPost+0x2f8>
    7eec:	00001f06 	br	7f6c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    7ef0:	e0bffc17 	ldw	r2,-16(fp)
    7ef4:	1080020b 	ldhu	r2,8(r2)
    7ef8:	0084303a 	nor	r2,zero,r2
    7efc:	1007883a 	mov	r3,r2
    7f00:	e0bff117 	ldw	r2,-60(fp)
    7f04:	1080040b 	ldhu	r2,16(r2)
    7f08:	1884703a 	and	r2,r3,r2
    7f0c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    7f10:	e0bff40b 	ldhu	r2,-48(fp)
    7f14:	10000b26 	beq	r2,zero,7f44 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    7f18:	e0bff40b 	ldhu	r2,-48(fp)
    7f1c:	e13ff117 	ldw	r4,-60(fp)
    7f20:	100b883a 	mov	r5,r2
    7f24:	00083680 	call	8368 <OS_FlagTaskRdy>
    7f28:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    7f2c:	e0bff483 	ldbu	r2,-46(fp)
    7f30:	10800058 	cmpnei	r2,r2,1
    7f34:	1000031e 	bne	r2,zero,7f44 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    7f38:	00800044 	movi	r2,1
    7f3c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    7f40:	00000a06 	br	7f6c <OSFlagPost+0x2f8>
    7f44:	00000906 	br	7f6c <OSFlagPost+0x2f8>
    7f48:	e0bff317 	ldw	r2,-52(fp)
    7f4c:	e0bff815 	stw	r2,-32(fp)
    7f50:	e0bff817 	ldw	r2,-32(fp)
    7f54:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    7f58:	e0bfff17 	ldw	r2,-4(fp)
    7f5c:	00c01bc4 	movi	r3,111
    7f60:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    7f64:	0005883a 	mov	r2,zero
    7f68:	00001f06 	br	7fe8 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    7f6c:	e0bff117 	ldw	r2,-60(fp)
    7f70:	10800017 	ldw	r2,0(r2)
    7f74:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    7f78:	e0bff117 	ldw	r2,-60(fp)
    7f7c:	103f8a1e 	bne	r2,zero,7da8 <__alt_mem_Flash_flash_data+0xf4007da8>
    7f80:	e0bff317 	ldw	r2,-52(fp)
    7f84:	e0bff915 	stw	r2,-28(fp)
    7f88:	e0bff917 	ldw	r2,-28(fp)
    7f8c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    7f90:	e0bff203 	ldbu	r2,-56(fp)
    7f94:	10800058 	cmpnei	r2,r2,1
    7f98:	1000011e 	bne	r2,zero,7fa0 <OSFlagPost+0x32c>
        OS_Sched();
    7f9c:	00064980 	call	6498 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7fa0:	0005303a 	rdctl	r2,status
    7fa4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fa8:	e0fffa17 	ldw	r3,-24(fp)
    7fac:	00bfff84 	movi	r2,-2
    7fb0:	1884703a 	and	r2,r3,r2
    7fb4:	1001703a 	wrctl	status,r2
  
  return context;
    7fb8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    7fbc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    7fc0:	e0bffc17 	ldw	r2,-16(fp)
    7fc4:	1080020b 	ldhu	r2,8(r2)
    7fc8:	e0bff50d 	sth	r2,-44(fp)
    7fcc:	e0bff317 	ldw	r2,-52(fp)
    7fd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7fd4:	e0bffb17 	ldw	r2,-20(fp)
    7fd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    7fdc:	e0bfff17 	ldw	r2,-4(fp)
    7fe0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    7fe4:	e0bff50b 	ldhu	r2,-44(fp)
}
    7fe8:	e037883a 	mov	sp,fp
    7fec:	dfc00117 	ldw	ra,4(sp)
    7ff0:	df000017 	ldw	fp,0(sp)
    7ff4:	dec00204 	addi	sp,sp,8
    7ff8:	f800283a 	ret

00007ffc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    7ffc:	defff904 	addi	sp,sp,-28
    8000:	df000615 	stw	fp,24(sp)
    8004:	df000604 	addi	fp,sp,24
    8008:	e13ffe15 	stw	r4,-8(fp)
    800c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    8010:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    8014:	e0bfff17 	ldw	r2,-4(fp)
    8018:	1000021e 	bne	r2,zero,8024 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    801c:	0005883a 	mov	r2,zero
    8020:	00002306 	br	80b0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    8024:	e0bffe17 	ldw	r2,-8(fp)
    8028:	1000051e 	bne	r2,zero,8040 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    802c:	e0bfff17 	ldw	r2,-4(fp)
    8030:	00c01b84 	movi	r3,110
    8034:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8038:	0005883a 	mov	r2,zero
    803c:	00001c06 	br	80b0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    8040:	e0bffe17 	ldw	r2,-8(fp)
    8044:	10800003 	ldbu	r2,0(r2)
    8048:	10803fcc 	andi	r2,r2,255
    804c:	10800160 	cmpeqi	r2,r2,5
    8050:	1000051e 	bne	r2,zero,8068 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8054:	e0bfff17 	ldw	r2,-4(fp)
    8058:	00c00044 	movi	r3,1
    805c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    8060:	0005883a 	mov	r2,zero
    8064:	00001206 	br	80b0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8068:	0005303a 	rdctl	r2,status
    806c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8070:	e0fffc17 	ldw	r3,-16(fp)
    8074:	00bfff84 	movi	r2,-2
    8078:	1884703a 	and	r2,r3,r2
    807c:	1001703a 	wrctl	status,r2
  
  return context;
    8080:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8084:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    8088:	e0bffe17 	ldw	r2,-8(fp)
    808c:	1080020b 	ldhu	r2,8(r2)
    8090:	e0bffb0d 	sth	r2,-20(fp)
    8094:	e0bffa17 	ldw	r2,-24(fp)
    8098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    809c:	e0bffd17 	ldw	r2,-12(fp)
    80a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    80a4:	e0bfff17 	ldw	r2,-4(fp)
    80a8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    80ac:	e0bffb0b 	ldhu	r2,-20(fp)
}
    80b0:	e037883a 	mov	sp,fp
    80b4:	df000017 	ldw	fp,0(sp)
    80b8:	dec00104 	addi	sp,sp,4
    80bc:	f800283a 	ret

000080c0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    80c0:	defff804 	addi	sp,sp,-32
    80c4:	df000715 	stw	fp,28(sp)
    80c8:	df000704 	addi	fp,sp,28
    80cc:	e13ffb15 	stw	r4,-20(fp)
    80d0:	e17ffc15 	stw	r5,-16(fp)
    80d4:	3009883a 	mov	r4,r6
    80d8:	3807883a 	mov	r3,r7
    80dc:	e0800117 	ldw	r2,4(fp)
    80e0:	e13ffd0d 	sth	r4,-12(fp)
    80e4:	e0fffe05 	stb	r3,-8(fp)
    80e8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    80ec:	00800074 	movhi	r2,1
    80f0:	1091cf04 	addi	r2,r2,18236
    80f4:	10c00017 	ldw	r3,0(r2)
    80f8:	00800074 	movhi	r2,1
    80fc:	1091cf04 	addi	r2,r2,18236
    8100:	10800017 	ldw	r2,0(r2)
    8104:	10800c03 	ldbu	r2,48(r2)
    8108:	10800814 	ori	r2,r2,32
    810c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    8110:	00800074 	movhi	r2,1
    8114:	1091cf04 	addi	r2,r2,18236
    8118:	10800017 	ldw	r2,0(r2)
    811c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    8120:	00800074 	movhi	r2,1
    8124:	1091cf04 	addi	r2,r2,18236
    8128:	10800017 	ldw	r2,0(r2)
    812c:	e0ffff0b 	ldhu	r3,-4(fp)
    8130:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    8134:	00800074 	movhi	r2,1
    8138:	1091cf04 	addi	r2,r2,18236
    813c:	10800017 	ldw	r2,0(r2)
    8140:	e0fffc17 	ldw	r3,-16(fp)
    8144:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    8148:	e0bffc17 	ldw	r2,-16(fp)
    814c:	e0fffd0b 	ldhu	r3,-12(fp)
    8150:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    8154:	e0bffc17 	ldw	r2,-16(fp)
    8158:	e0fffe03 	ldbu	r3,-8(fp)
    815c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    8160:	00800074 	movhi	r2,1
    8164:	1091cf04 	addi	r2,r2,18236
    8168:	10c00017 	ldw	r3,0(r2)
    816c:	e0bffc17 	ldw	r2,-16(fp)
    8170:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    8174:	e0bffb17 	ldw	r2,-20(fp)
    8178:	10c00117 	ldw	r3,4(r2)
    817c:	e0bffc17 	ldw	r2,-16(fp)
    8180:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    8184:	e0bffc17 	ldw	r2,-16(fp)
    8188:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	e0fffb17 	ldw	r3,-20(fp)
    8194:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    8198:	e0bffb17 	ldw	r2,-20(fp)
    819c:	10800117 	ldw	r2,4(r2)
    81a0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    81a4:	e0bff917 	ldw	r2,-28(fp)
    81a8:	10000326 	beq	r2,zero,81b8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    81ac:	e0bff917 	ldw	r2,-28(fp)
    81b0:	e0fffc17 	ldw	r3,-16(fp)
    81b4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    81b8:	e0bffb17 	ldw	r2,-20(fp)
    81bc:	e0fffc17 	ldw	r3,-16(fp)
    81c0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    81c4:	00800074 	movhi	r2,1
    81c8:	1091cf04 	addi	r2,r2,18236
    81cc:	10800017 	ldw	r2,0(r2)
    81d0:	10800d03 	ldbu	r2,52(r2)
    81d4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    81d8:	e0fffa03 	ldbu	r3,-24(fp)
    81dc:	e13ffa03 	ldbu	r4,-24(fp)
    81e0:	00800074 	movhi	r2,1
    81e4:	1091cc44 	addi	r2,r2,18225
    81e8:	1105883a 	add	r2,r2,r4
    81ec:	10800003 	ldbu	r2,0(r2)
    81f0:	1009883a 	mov	r4,r2
    81f4:	00800074 	movhi	r2,1
    81f8:	1091cf04 	addi	r2,r2,18236
    81fc:	10800017 	ldw	r2,0(r2)
    8200:	10800d43 	ldbu	r2,53(r2)
    8204:	0084303a 	nor	r2,zero,r2
    8208:	2084703a 	and	r2,r4,r2
    820c:	1009883a 	mov	r4,r2
    8210:	00800074 	movhi	r2,1
    8214:	1091cc44 	addi	r2,r2,18225
    8218:	10c5883a 	add	r2,r2,r3
    821c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    8220:	e0fffa03 	ldbu	r3,-24(fp)
    8224:	00800074 	movhi	r2,1
    8228:	1091cc44 	addi	r2,r2,18225
    822c:	10c5883a 	add	r2,r2,r3
    8230:	10800003 	ldbu	r2,0(r2)
    8234:	10803fcc 	andi	r2,r2,255
    8238:	10000e1e 	bne	r2,zero,8274 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    823c:	00800074 	movhi	r2,1
    8240:	1091cf04 	addi	r2,r2,18236
    8244:	10800017 	ldw	r2,0(r2)
    8248:	10800d83 	ldbu	r2,54(r2)
    824c:	0084303a 	nor	r2,zero,r2
    8250:	1007883a 	mov	r3,r2
    8254:	00800074 	movhi	r2,1
    8258:	1091cc04 	addi	r2,r2,18224
    825c:	10800003 	ldbu	r2,0(r2)
    8260:	1884703a 	and	r2,r3,r2
    8264:	1007883a 	mov	r3,r2
    8268:	00800074 	movhi	r2,1
    826c:	1091cc04 	addi	r2,r2,18224
    8270:	10c00005 	stb	r3,0(r2)
    }
}
    8274:	e037883a 	mov	sp,fp
    8278:	df000017 	ldw	fp,0(sp)
    827c:	dec00104 	addi	sp,sp,4
    8280:	f800283a 	ret

00008284 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    8284:	defffb04 	addi	sp,sp,-20
    8288:	dfc00415 	stw	ra,16(sp)
    828c:	df000315 	stw	fp,12(sp)
    8290:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    8294:	010000b4 	movhi	r4,2
    8298:	2139e204 	addi	r4,r4,-6264
    829c:	0140dc04 	movi	r5,880
    82a0:	00063e40 	call	63e4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    82a4:	008000b4 	movhi	r2,2
    82a8:	10b9e204 	addi	r2,r2,-6264
    82ac:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    82b0:	008000b4 	movhi	r2,2
    82b4:	10b9ed04 	addi	r2,r2,-6220
    82b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    82bc:	e03ffd0d 	sth	zero,-12(fp)
    82c0:	00001306 	br	8310 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    82c4:	e0bffe17 	ldw	r2,-8(fp)
    82c8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    82cc:	e0bffe17 	ldw	r2,-8(fp)
    82d0:	e0ffff17 	ldw	r3,-4(fp)
    82d4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    82d8:	e0bffe17 	ldw	r2,-8(fp)
    82dc:	00c00fc4 	movi	r3,63
    82e0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    82e4:	e0bffe17 	ldw	r2,-8(fp)
    82e8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    82ec:	e0bffe17 	ldw	r2,-8(fp)
    82f0:	10800b04 	addi	r2,r2,44
    82f4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    82f8:	e0bfff17 	ldw	r2,-4(fp)
    82fc:	10800b04 	addi	r2,r2,44
    8300:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    8304:	e0bffd0b 	ldhu	r2,-12(fp)
    8308:	10800044 	addi	r2,r2,1
    830c:	e0bffd0d 	sth	r2,-12(fp)
    8310:	e0bffd0b 	ldhu	r2,-12(fp)
    8314:	108004f0 	cmpltui	r2,r2,19
    8318:	103fea1e 	bne	r2,zero,82c4 <__alt_mem_Flash_flash_data+0xf40082c4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    831c:	e0bffe17 	ldw	r2,-8(fp)
    8320:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    8324:	e0bffe17 	ldw	r2,-8(fp)
    8328:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    832c:	e0bffe17 	ldw	r2,-8(fp)
    8330:	00c00fc4 	movi	r3,63
    8334:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    8338:	e0bffe17 	ldw	r2,-8(fp)
    833c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    8340:	00800074 	movhi	r2,1
    8344:	1091d104 	addi	r2,r2,18244
    8348:	00c000b4 	movhi	r3,2
    834c:	18f9e204 	addi	r3,r3,-6264
    8350:	10c00015 	stw	r3,0(r2)
#endif
}
    8354:	e037883a 	mov	sp,fp
    8358:	dfc00117 	ldw	ra,4(sp)
    835c:	df000017 	ldw	fp,0(sp)
    8360:	dec00204 	addi	sp,sp,8
    8364:	f800283a 	ret

00008368 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    8368:	defffa04 	addi	sp,sp,-24
    836c:	dfc00515 	stw	ra,20(sp)
    8370:	df000415 	stw	fp,16(sp)
    8374:	df000404 	addi	fp,sp,16
    8378:	e13ffe15 	stw	r4,-8(fp)
    837c:	2805883a 	mov	r2,r5
    8380:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    8384:	e0bffe17 	ldw	r2,-8(fp)
    8388:	10800217 	ldw	r2,8(r2)
    838c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    8390:	e0bffd17 	ldw	r2,-12(fp)
    8394:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    8398:	e0bffd17 	ldw	r2,-12(fp)
    839c:	e0ffff0b 	ldhu	r3,-4(fp)
    83a0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    83a4:	e0bffd17 	ldw	r2,-12(fp)
    83a8:	10c00c03 	ldbu	r3,48(r2)
    83ac:	00bff7c4 	movi	r2,-33
    83b0:	1884703a 	and	r2,r3,r2
    83b4:	1007883a 	mov	r3,r2
    83b8:	e0bffd17 	ldw	r2,-12(fp)
    83bc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    83c0:	e0bffd17 	ldw	r2,-12(fp)
    83c4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    83c8:	e0bffd17 	ldw	r2,-12(fp)
    83cc:	10800c03 	ldbu	r2,48(r2)
    83d0:	10803fcc 	andi	r2,r2,255
    83d4:	10001f1e 	bne	r2,zero,8454 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    83d8:	e0bffd17 	ldw	r2,-12(fp)
    83dc:	10c00d83 	ldbu	r3,54(r2)
    83e0:	00800074 	movhi	r2,1
    83e4:	1091cc04 	addi	r2,r2,18224
    83e8:	10800003 	ldbu	r2,0(r2)
    83ec:	1884b03a 	or	r2,r3,r2
    83f0:	1007883a 	mov	r3,r2
    83f4:	00800074 	movhi	r2,1
    83f8:	1091cc04 	addi	r2,r2,18224
    83fc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8400:	e0bffd17 	ldw	r2,-12(fp)
    8404:	10800d03 	ldbu	r2,52(r2)
    8408:	10c03fcc 	andi	r3,r2,255
    840c:	e0bffd17 	ldw	r2,-12(fp)
    8410:	10800d03 	ldbu	r2,52(r2)
    8414:	11003fcc 	andi	r4,r2,255
    8418:	00800074 	movhi	r2,1
    841c:	1091cc44 	addi	r2,r2,18225
    8420:	1105883a 	add	r2,r2,r4
    8424:	11000003 	ldbu	r4,0(r2)
    8428:	e0bffd17 	ldw	r2,-12(fp)
    842c:	10800d43 	ldbu	r2,53(r2)
    8430:	2084b03a 	or	r2,r4,r2
    8434:	1009883a 	mov	r4,r2
    8438:	00800074 	movhi	r2,1
    843c:	1091cc44 	addi	r2,r2,18225
    8440:	10c5883a 	add	r2,r2,r3
    8444:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    8448:	00800044 	movi	r2,1
    844c:	e0bffc05 	stb	r2,-16(fp)
    8450:	00000106 	br	8458 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    8454:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    8458:	e13ffe17 	ldw	r4,-8(fp)
    845c:	00084780 	call	8478 <OS_FlagUnlink>
    return (sched);
    8460:	e0bffc03 	ldbu	r2,-16(fp)
}
    8464:	e037883a 	mov	sp,fp
    8468:	dfc00117 	ldw	ra,4(sp)
    846c:	df000017 	ldw	fp,0(sp)
    8470:	dec00204 	addi	sp,sp,8
    8474:	f800283a 	ret

00008478 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    8478:	defffa04 	addi	sp,sp,-24
    847c:	df000515 	stw	fp,20(sp)
    8480:	df000504 	addi	fp,sp,20
    8484:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    8488:	e0bfff17 	ldw	r2,-4(fp)
    848c:	10800117 	ldw	r2,4(r2)
    8490:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    8494:	e0bfff17 	ldw	r2,-4(fp)
    8498:	10800017 	ldw	r2,0(r2)
    849c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    84a0:	e0bffb17 	ldw	r2,-20(fp)
    84a4:	10000b1e 	bne	r2,zero,84d4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    84a8:	e0bfff17 	ldw	r2,-4(fp)
    84ac:	10800317 	ldw	r2,12(r2)
    84b0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	e0fffc17 	ldw	r3,-16(fp)
    84bc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    84c0:	e0bffc17 	ldw	r2,-16(fp)
    84c4:	10000b26 	beq	r2,zero,84f4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    84c8:	e0bffc17 	ldw	r2,-16(fp)
    84cc:	10000115 	stw	zero,4(r2)
    84d0:	00000806 	br	84f4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    84d4:	e0bffb17 	ldw	r2,-20(fp)
    84d8:	e0fffc17 	ldw	r3,-16(fp)
    84dc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    84e0:	e0bffc17 	ldw	r2,-16(fp)
    84e4:	10000326 	beq	r2,zero,84f4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    84e8:	e0bffc17 	ldw	r2,-16(fp)
    84ec:	e0fffb17 	ldw	r3,-20(fp)
    84f0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    84f4:	e0bfff17 	ldw	r2,-4(fp)
    84f8:	10800217 	ldw	r2,8(r2)
    84fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    8500:	e0bffe17 	ldw	r2,-8(fp)
    8504:	10000a15 	stw	zero,40(r2)
#endif
}
    8508:	e037883a 	mov	sp,fp
    850c:	df000017 	ldw	fp,0(sp)
    8510:	dec00104 	addi	sp,sp,4
    8514:	f800283a 	ret

00008518 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    8518:	defff404 	addi	sp,sp,-48
    851c:	df000b15 	stw	fp,44(sp)
    8520:	df000b04 	addi	fp,sp,44
    8524:	e13ffc15 	stw	r4,-16(fp)
    8528:	e17ffd15 	stw	r5,-12(fp)
    852c:	e1bffe15 	stw	r6,-8(fp)
    8530:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8534:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8538:	e0bfff17 	ldw	r2,-4(fp)
    853c:	1000021e 	bne	r2,zero,8548 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    8540:	0005883a 	mov	r2,zero
    8544:	00006d06 	br	86fc <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    8548:	e0bffc17 	ldw	r2,-16(fp)
    854c:	1000051e 	bne	r2,zero,8564 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    8550:	e0bfff17 	ldw	r2,-4(fp)
    8554:	00c01884 	movi	r3,98
    8558:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    855c:	0005883a 	mov	r2,zero
    8560:	00006606 	br	86fc <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    8564:	e0bffc17 	ldw	r2,-16(fp)
    8568:	108000cc 	andi	r2,r2,3
    856c:	10000526 	beq	r2,zero,8584 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    8570:	e0bfff17 	ldw	r2,-4(fp)
    8574:	00c01884 	movi	r3,98
    8578:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    857c:	0005883a 	mov	r2,zero
    8580:	00005e06 	br	86fc <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    8584:	e0bffd17 	ldw	r2,-12(fp)
    8588:	108000a8 	cmpgeui	r2,r2,2
    858c:	1000051e 	bne	r2,zero,85a4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    8590:	e0bfff17 	ldw	r2,-4(fp)
    8594:	00c016c4 	movi	r3,91
    8598:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    859c:	0005883a 	mov	r2,zero
    85a0:	00005606 	br	86fc <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    85a4:	e0bffe17 	ldw	r2,-8(fp)
    85a8:	10800128 	cmpgeui	r2,r2,4
    85ac:	1000051e 	bne	r2,zero,85c4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    85b0:	e0bfff17 	ldw	r2,-4(fp)
    85b4:	00c01704 	movi	r3,92
    85b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    85bc:	0005883a 	mov	r2,zero
    85c0:	00004e06 	br	86fc <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85c4:	0005303a 	rdctl	r2,status
    85c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    85cc:	e0fffa17 	ldw	r3,-24(fp)
    85d0:	00bfff84 	movi	r2,-2
    85d4:	1884703a 	and	r2,r3,r2
    85d8:	1001703a 	wrctl	status,r2
  
  return context;
    85dc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    85e0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    85e4:	00800074 	movhi	r2,1
    85e8:	1091c904 	addi	r2,r2,18212
    85ec:	10800017 	ldw	r2,0(r2)
    85f0:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    85f4:	00800074 	movhi	r2,1
    85f8:	1091c904 	addi	r2,r2,18212
    85fc:	10800017 	ldw	r2,0(r2)
    8600:	10000726 	beq	r2,zero,8620 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    8604:	00800074 	movhi	r2,1
    8608:	1091c904 	addi	r2,r2,18212
    860c:	10800017 	ldw	r2,0(r2)
    8610:	10c00117 	ldw	r3,4(r2)
    8614:	00800074 	movhi	r2,1
    8618:	1091c904 	addi	r2,r2,18212
    861c:	10c00015 	stw	r3,0(r2)
    8620:	e0bff817 	ldw	r2,-32(fp)
    8624:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8628:	e0bffb17 	ldw	r2,-20(fp)
    862c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    8630:	e0bff917 	ldw	r2,-28(fp)
    8634:	1000051e 	bne	r2,zero,864c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    8638:	e0bfff17 	ldw	r2,-4(fp)
    863c:	00c01684 	movi	r3,90
    8640:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    8644:	0005883a 	mov	r2,zero
    8648:	00002c06 	br	86fc <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    864c:	e0bffc17 	ldw	r2,-16(fp)
    8650:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    8654:	e0fffc17 	ldw	r3,-16(fp)
    8658:	e0bffe17 	ldw	r2,-8(fp)
    865c:	1885883a 	add	r2,r3,r2
    8660:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    8664:	e03ff715 	stw	zero,-36(fp)
    8668:	00000c06 	br	869c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    866c:	e0bff617 	ldw	r2,-40(fp)
    8670:	e0fff517 	ldw	r3,-44(fp)
    8674:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    8678:	e0bff517 	ldw	r2,-44(fp)
    867c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    8680:	e0fff517 	ldw	r3,-44(fp)
    8684:	e0bffe17 	ldw	r2,-8(fp)
    8688:	1885883a 	add	r2,r3,r2
    868c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    8690:	e0bff717 	ldw	r2,-36(fp)
    8694:	10800044 	addi	r2,r2,1
    8698:	e0bff715 	stw	r2,-36(fp)
    869c:	e0bffd17 	ldw	r2,-12(fp)
    86a0:	10bfffc4 	addi	r2,r2,-1
    86a4:	e0fff717 	ldw	r3,-36(fp)
    86a8:	18bff036 	bltu	r3,r2,866c <__alt_mem_Flash_flash_data+0xf400866c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    86ac:	e0bff617 	ldw	r2,-40(fp)
    86b0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    86b4:	e0bff917 	ldw	r2,-28(fp)
    86b8:	e0fffc17 	ldw	r3,-16(fp)
    86bc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    86c0:	e0bff917 	ldw	r2,-28(fp)
    86c4:	e0fffc17 	ldw	r3,-16(fp)
    86c8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    86cc:	e0bff917 	ldw	r2,-28(fp)
    86d0:	e0fffd17 	ldw	r3,-12(fp)
    86d4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    86d8:	e0bff917 	ldw	r2,-28(fp)
    86dc:	e0fffd17 	ldw	r3,-12(fp)
    86e0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    86e4:	e0bff917 	ldw	r2,-28(fp)
    86e8:	e0fffe17 	ldw	r3,-8(fp)
    86ec:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    86f0:	e0bfff17 	ldw	r2,-4(fp)
    86f4:	10000005 	stb	zero,0(r2)
    return (pmem);
    86f8:	e0bff917 	ldw	r2,-28(fp)
}
    86fc:	e037883a 	mov	sp,fp
    8700:	df000017 	ldw	fp,0(sp)
    8704:	dec00104 	addi	sp,sp,4
    8708:	f800283a 	ret

0000870c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    870c:	defff804 	addi	sp,sp,-32
    8710:	df000715 	stw	fp,28(sp)
    8714:	df000704 	addi	fp,sp,28
    8718:	e13ffe15 	stw	r4,-8(fp)
    871c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8720:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8724:	e0bfff17 	ldw	r2,-4(fp)
    8728:	1000021e 	bne	r2,zero,8734 <OSMemGet+0x28>
        return ((void *)0);
    872c:	0005883a 	mov	r2,zero
    8730:	00002e06 	br	87ec <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    8734:	e0bffe17 	ldw	r2,-8(fp)
    8738:	1000051e 	bne	r2,zero,8750 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    873c:	e0bfff17 	ldw	r2,-4(fp)
    8740:	00c01804 	movi	r3,96
    8744:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8748:	0005883a 	mov	r2,zero
    874c:	00002706 	br	87ec <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8750:	0005303a 	rdctl	r2,status
    8754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8758:	e0fffb17 	ldw	r3,-20(fp)
    875c:	00bfff84 	movi	r2,-2
    8760:	1884703a 	and	r2,r3,r2
    8764:	1001703a 	wrctl	status,r2
  
  return context;
    8768:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    876c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    8770:	e0bffe17 	ldw	r2,-8(fp)
    8774:	10800417 	ldw	r2,16(r2)
    8778:	10001426 	beq	r2,zero,87cc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    877c:	e0bffe17 	ldw	r2,-8(fp)
    8780:	10800117 	ldw	r2,4(r2)
    8784:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    8788:	e0bffa17 	ldw	r2,-24(fp)
    878c:	10c00017 	ldw	r3,0(r2)
    8790:	e0bffe17 	ldw	r2,-8(fp)
    8794:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    8798:	e0bffe17 	ldw	r2,-8(fp)
    879c:	10800417 	ldw	r2,16(r2)
    87a0:	10ffffc4 	addi	r3,r2,-1
    87a4:	e0bffe17 	ldw	r2,-8(fp)
    87a8:	10c00415 	stw	r3,16(r2)
    87ac:	e0bff917 	ldw	r2,-28(fp)
    87b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    87b4:	e0bffc17 	ldw	r2,-16(fp)
    87b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    87bc:	e0bfff17 	ldw	r2,-4(fp)
    87c0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    87c4:	e0bffa17 	ldw	r2,-24(fp)
    87c8:	00000806 	br	87ec <OSMemGet+0xe0>
    87cc:	e0bff917 	ldw	r2,-28(fp)
    87d0:	e0bffd15 	stw	r2,-12(fp)
    87d4:	e0bffd17 	ldw	r2,-12(fp)
    87d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    87dc:	e0bfff17 	ldw	r2,-4(fp)
    87e0:	00c01744 	movi	r3,93
    87e4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    87e8:	0005883a 	mov	r2,zero
}
    87ec:	e037883a 	mov	sp,fp
    87f0:	df000017 	ldw	fp,0(sp)
    87f4:	dec00104 	addi	sp,sp,4
    87f8:	f800283a 	ret

000087fc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    87fc:	defff704 	addi	sp,sp,-36
    8800:	dfc00815 	stw	ra,32(sp)
    8804:	df000715 	stw	fp,28(sp)
    8808:	df000704 	addi	fp,sp,28
    880c:	e13ffd15 	stw	r4,-12(fp)
    8810:	e17ffe15 	stw	r5,-8(fp)
    8814:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8818:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    881c:	e0bfff17 	ldw	r2,-4(fp)
    8820:	1000021e 	bne	r2,zero,882c <OSMemNameGet+0x30>
        return (0);
    8824:	0005883a 	mov	r2,zero
    8828:	00002d06 	br	88e0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    882c:	e0bffd17 	ldw	r2,-12(fp)
    8830:	1000051e 	bne	r2,zero,8848 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    8834:	e0bfff17 	ldw	r2,-4(fp)
    8838:	00c01804 	movi	r3,96
    883c:	10c00005 	stb	r3,0(r2)
        return (0);
    8840:	0005883a 	mov	r2,zero
    8844:	00002606 	br	88e0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    8848:	e0bffe17 	ldw	r2,-8(fp)
    884c:	1000051e 	bne	r2,zero,8864 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    8850:	e0bfff17 	ldw	r2,-4(fp)
    8854:	00c00304 	movi	r3,12
    8858:	10c00005 	stb	r3,0(r2)
        return (0);
    885c:	0005883a 	mov	r2,zero
    8860:	00001f06 	br	88e0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8864:	00800074 	movhi	r2,1
    8868:	1091ce04 	addi	r2,r2,18232
    886c:	10800003 	ldbu	r2,0(r2)
    8870:	10803fcc 	andi	r2,r2,255
    8874:	10000526 	beq	r2,zero,888c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    8878:	e0bfff17 	ldw	r2,-4(fp)
    887c:	00c00444 	movi	r3,17
    8880:	10c00005 	stb	r3,0(r2)
        return (0);
    8884:	0005883a 	mov	r2,zero
    8888:	00001506 	br	88e0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    888c:	0005303a 	rdctl	r2,status
    8890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8894:	e0fffb17 	ldw	r3,-20(fp)
    8898:	00bfff84 	movi	r2,-2
    889c:	1884703a 	and	r2,r3,r2
    88a0:	1001703a 	wrctl	status,r2
  
  return context;
    88a4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    88a8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    88ac:	e0bffd17 	ldw	r2,-12(fp)
    88b0:	10800504 	addi	r2,r2,20
    88b4:	e13ffe17 	ldw	r4,-8(fp)
    88b8:	100b883a 	mov	r5,r2
    88bc:	00065d40 	call	65d4 <OS_StrCopy>
    88c0:	e0bffa05 	stb	r2,-24(fp)
    88c4:	e0bff917 	ldw	r2,-28(fp)
    88c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88cc:	e0bffc17 	ldw	r2,-16(fp)
    88d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    88d4:	e0bfff17 	ldw	r2,-4(fp)
    88d8:	10000005 	stb	zero,0(r2)
    return (len);
    88dc:	e0bffa03 	ldbu	r2,-24(fp)
}
    88e0:	e037883a 	mov	sp,fp
    88e4:	dfc00117 	ldw	ra,4(sp)
    88e8:	df000017 	ldw	fp,0(sp)
    88ec:	dec00204 	addi	sp,sp,8
    88f0:	f800283a 	ret

000088f4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    88f4:	defff604 	addi	sp,sp,-40
    88f8:	dfc00915 	stw	ra,36(sp)
    88fc:	df000815 	stw	fp,32(sp)
    8900:	df000804 	addi	fp,sp,32
    8904:	e13ffd15 	stw	r4,-12(fp)
    8908:	e17ffe15 	stw	r5,-8(fp)
    890c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8910:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8914:	e0bfff17 	ldw	r2,-4(fp)
    8918:	1000011e 	bne	r2,zero,8920 <OSMemNameSet+0x2c>
        return;
    891c:	00003606 	br	89f8 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    8920:	e0bffd17 	ldw	r2,-12(fp)
    8924:	1000041e 	bne	r2,zero,8938 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    8928:	e0bfff17 	ldw	r2,-4(fp)
    892c:	00c01804 	movi	r3,96
    8930:	10c00005 	stb	r3,0(r2)
        return;
    8934:	00003006 	br	89f8 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    8938:	e0bffe17 	ldw	r2,-8(fp)
    893c:	1000041e 	bne	r2,zero,8950 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    8940:	e0bfff17 	ldw	r2,-4(fp)
    8944:	00c00304 	movi	r3,12
    8948:	10c00005 	stb	r3,0(r2)
        return;
    894c:	00002a06 	br	89f8 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8950:	00800074 	movhi	r2,1
    8954:	1091ce04 	addi	r2,r2,18232
    8958:	10800003 	ldbu	r2,0(r2)
    895c:	10803fcc 	andi	r2,r2,255
    8960:	10000426 	beq	r2,zero,8974 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    8964:	e0bfff17 	ldw	r2,-4(fp)
    8968:	00c00484 	movi	r3,18
    896c:	10c00005 	stb	r3,0(r2)
        return;
    8970:	00002106 	br	89f8 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8974:	0005303a 	rdctl	r2,status
    8978:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    897c:	e0fffa17 	ldw	r3,-24(fp)
    8980:	00bfff84 	movi	r2,-2
    8984:	1884703a 	and	r2,r3,r2
    8988:	1001703a 	wrctl	status,r2
  
  return context;
    898c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    8990:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    8994:	e13ffe17 	ldw	r4,-8(fp)
    8998:	00066480 	call	6648 <OS_StrLen>
    899c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    89a0:	e0bff903 	ldbu	r2,-28(fp)
    89a4:	10800830 	cmpltui	r2,r2,32
    89a8:	1000081e 	bne	r2,zero,89cc <OSMemNameSet+0xd8>
    89ac:	e0bff817 	ldw	r2,-32(fp)
    89b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89b4:	e0bffb17 	ldw	r2,-20(fp)
    89b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    89bc:	e0bfff17 	ldw	r2,-4(fp)
    89c0:	00c018c4 	movi	r3,99
    89c4:	10c00005 	stb	r3,0(r2)
        return;
    89c8:	00000b06 	br	89f8 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    89cc:	e0bffd17 	ldw	r2,-12(fp)
    89d0:	10800504 	addi	r2,r2,20
    89d4:	1009883a 	mov	r4,r2
    89d8:	e17ffe17 	ldw	r5,-8(fp)
    89dc:	00065d40 	call	65d4 <OS_StrCopy>
    89e0:	e0bff817 	ldw	r2,-32(fp)
    89e4:	e0bffc15 	stw	r2,-16(fp)
    89e8:	e0bffc17 	ldw	r2,-16(fp)
    89ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    89f0:	e0bfff17 	ldw	r2,-4(fp)
    89f4:	10000005 	stb	zero,0(r2)
}
    89f8:	e037883a 	mov	sp,fp
    89fc:	dfc00117 	ldw	ra,4(sp)
    8a00:	df000017 	ldw	fp,0(sp)
    8a04:	dec00204 	addi	sp,sp,8
    8a08:	f800283a 	ret

00008a0c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    8a0c:	defff904 	addi	sp,sp,-28
    8a10:	df000615 	stw	fp,24(sp)
    8a14:	df000604 	addi	fp,sp,24
    8a18:	e13ffe15 	stw	r4,-8(fp)
    8a1c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8a20:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    8a24:	e0bffe17 	ldw	r2,-8(fp)
    8a28:	1000021e 	bne	r2,zero,8a34 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    8a2c:	00801804 	movi	r2,96
    8a30:	00002806 	br	8ad4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    8a34:	e0bfff17 	ldw	r2,-4(fp)
    8a38:	1000021e 	bne	r2,zero,8a44 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    8a3c:	008017c4 	movi	r2,95
    8a40:	00002406 	br	8ad4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a44:	0005303a 	rdctl	r2,status
    8a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a4c:	e0fffb17 	ldw	r3,-20(fp)
    8a50:	00bfff84 	movi	r2,-2
    8a54:	1884703a 	and	r2,r3,r2
    8a58:	1001703a 	wrctl	status,r2
  
  return context;
    8a5c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8a60:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    8a64:	e0bffe17 	ldw	r2,-8(fp)
    8a68:	10c00417 	ldw	r3,16(r2)
    8a6c:	e0bffe17 	ldw	r2,-8(fp)
    8a70:	10800317 	ldw	r2,12(r2)
    8a74:	18800636 	bltu	r3,r2,8a90 <OSMemPut+0x84>
    8a78:	e0bffa17 	ldw	r2,-24(fp)
    8a7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8a80:	e0bffc17 	ldw	r2,-16(fp)
    8a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    8a88:	00801784 	movi	r2,94
    8a8c:	00001106 	br	8ad4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    8a90:	e0bffe17 	ldw	r2,-8(fp)
    8a94:	10c00117 	ldw	r3,4(r2)
    8a98:	e0bfff17 	ldw	r2,-4(fp)
    8a9c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    8aa0:	e0bffe17 	ldw	r2,-8(fp)
    8aa4:	e0ffff17 	ldw	r3,-4(fp)
    8aa8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    8aac:	e0bffe17 	ldw	r2,-8(fp)
    8ab0:	10800417 	ldw	r2,16(r2)
    8ab4:	10c00044 	addi	r3,r2,1
    8ab8:	e0bffe17 	ldw	r2,-8(fp)
    8abc:	10c00415 	stw	r3,16(r2)
    8ac0:	e0bffa17 	ldw	r2,-24(fp)
    8ac4:	e0bffd15 	stw	r2,-12(fp)
    8ac8:	e0bffd17 	ldw	r2,-12(fp)
    8acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    8ad0:	0005883a 	mov	r2,zero
}
    8ad4:	e037883a 	mov	sp,fp
    8ad8:	df000017 	ldw	fp,0(sp)
    8adc:	dec00104 	addi	sp,sp,4
    8ae0:	f800283a 	ret

00008ae4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    8ae4:	defffa04 	addi	sp,sp,-24
    8ae8:	df000515 	stw	fp,20(sp)
    8aec:	df000504 	addi	fp,sp,20
    8af0:	e13ffe15 	stw	r4,-8(fp)
    8af4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8af8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	1000021e 	bne	r2,zero,8b0c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    8b04:	00801804 	movi	r2,96
    8b08:	00002c06 	br	8bbc <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    8b0c:	e0bfff17 	ldw	r2,-4(fp)
    8b10:	1000021e 	bne	r2,zero,8b1c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    8b14:	00801844 	movi	r2,97
    8b18:	00002806 	br	8bbc <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8b1c:	0005303a 	rdctl	r2,status
    8b20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8b24:	e0fffc17 	ldw	r3,-16(fp)
    8b28:	00bfff84 	movi	r2,-2
    8b2c:	1884703a 	and	r2,r3,r2
    8b30:	1001703a 	wrctl	status,r2
  
  return context;
    8b34:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8b38:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    8b3c:	e0bffe17 	ldw	r2,-8(fp)
    8b40:	10c00017 	ldw	r3,0(r2)
    8b44:	e0bfff17 	ldw	r2,-4(fp)
    8b48:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    8b4c:	e0bffe17 	ldw	r2,-8(fp)
    8b50:	10c00117 	ldw	r3,4(r2)
    8b54:	e0bfff17 	ldw	r2,-4(fp)
    8b58:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    8b5c:	e0bffe17 	ldw	r2,-8(fp)
    8b60:	10c00217 	ldw	r3,8(r2)
    8b64:	e0bfff17 	ldw	r2,-4(fp)
    8b68:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    8b6c:	e0bffe17 	ldw	r2,-8(fp)
    8b70:	10c00317 	ldw	r3,12(r2)
    8b74:	e0bfff17 	ldw	r2,-4(fp)
    8b78:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    8b7c:	e0bffe17 	ldw	r2,-8(fp)
    8b80:	10c00417 	ldw	r3,16(r2)
    8b84:	e0bfff17 	ldw	r2,-4(fp)
    8b88:	10c00415 	stw	r3,16(r2)
    8b8c:	e0bffb17 	ldw	r2,-20(fp)
    8b90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b94:	e0bffd17 	ldw	r2,-12(fp)
    8b98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    8b9c:	e0bfff17 	ldw	r2,-4(fp)
    8ba0:	10c00317 	ldw	r3,12(r2)
    8ba4:	e0bfff17 	ldw	r2,-4(fp)
    8ba8:	10800417 	ldw	r2,16(r2)
    8bac:	1887c83a 	sub	r3,r3,r2
    8bb0:	e0bfff17 	ldw	r2,-4(fp)
    8bb4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    8bb8:	0005883a 	mov	r2,zero
}
    8bbc:	e037883a 	mov	sp,fp
    8bc0:	df000017 	ldw	fp,0(sp)
    8bc4:	dec00104 	addi	sp,sp,4
    8bc8:	f800283a 	ret

00008bcc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    8bcc:	defffc04 	addi	sp,sp,-16
    8bd0:	dfc00315 	stw	ra,12(sp)
    8bd4:	df000215 	stw	fp,8(sp)
    8bd8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    8bdc:	010000b4 	movhi	r4,2
    8be0:	213abe04 	addi	r4,r4,-5384
    8be4:	01430c04 	movi	r5,3120
    8be8:	00063e40 	call	63e4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    8bec:	008000b4 	movhi	r2,2
    8bf0:	10babe04 	addi	r2,r2,-5384
    8bf4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    8bf8:	e03fff0d 	sth	zero,-4(fp)
    8bfc:	00001306 	br	8c4c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    8c00:	e0bfff0b 	ldhu	r2,-4(fp)
    8c04:	10800044 	addi	r2,r2,1
    8c08:	10c00d24 	muli	r3,r2,52
    8c0c:	008000b4 	movhi	r2,2
    8c10:	10babe04 	addi	r2,r2,-5384
    8c14:	1887883a 	add	r3,r3,r2
    8c18:	e0bffe17 	ldw	r2,-8(fp)
    8c1c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    8c20:	e0bffe17 	ldw	r2,-8(fp)
    8c24:	00c00fc4 	movi	r3,63
    8c28:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    8c2c:	e0bffe17 	ldw	r2,-8(fp)
    8c30:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    8c34:	e0bffe17 	ldw	r2,-8(fp)
    8c38:	10800d04 	addi	r2,r2,52
    8c3c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    8c40:	e0bfff0b 	ldhu	r2,-4(fp)
    8c44:	10800044 	addi	r2,r2,1
    8c48:	e0bfff0d 	sth	r2,-4(fp)
    8c4c:	e0bfff0b 	ldhu	r2,-4(fp)
    8c50:	10800ef0 	cmpltui	r2,r2,59
    8c54:	103fea1e 	bne	r2,zero,8c00 <__alt_mem_Flash_flash_data+0xf4008c00>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    8c58:	e0bffe17 	ldw	r2,-8(fp)
    8c5c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    8c60:	e0bffe17 	ldw	r2,-8(fp)
    8c64:	00c00fc4 	movi	r3,63
    8c68:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    8c6c:	e0bffe17 	ldw	r2,-8(fp)
    8c70:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    8c74:	00800074 	movhi	r2,1
    8c78:	1091c904 	addi	r2,r2,18212
    8c7c:	00c000b4 	movhi	r3,2
    8c80:	18fabe04 	addi	r3,r3,-5384
    8c84:	10c00015 	stw	r3,0(r2)
#endif
}
    8c88:	e037883a 	mov	sp,fp
    8c8c:	dfc00117 	ldw	ra,4(sp)
    8c90:	df000017 	ldw	fp,0(sp)
    8c94:	dec00204 	addi	sp,sp,8
    8c98:	f800283a 	ret

00008c9c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    8c9c:	defff804 	addi	sp,sp,-32
    8ca0:	df000715 	stw	fp,28(sp)
    8ca4:	df000704 	addi	fp,sp,28
    8ca8:	e13ffe15 	stw	r4,-8(fp)
    8cac:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8cb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    8cb4:	e0bfff17 	ldw	r2,-4(fp)
    8cb8:	1000021e 	bne	r2,zero,8cc4 <OSQAccept+0x28>
        return ((void *)0);
    8cbc:	0005883a 	mov	r2,zero
    8cc0:	00004206 	br	8dcc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    8cc4:	e0bffe17 	ldw	r2,-8(fp)
    8cc8:	1000051e 	bne	r2,zero,8ce0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    8ccc:	e0bfff17 	ldw	r2,-4(fp)
    8cd0:	00c00104 	movi	r3,4
    8cd4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8cd8:	0005883a 	mov	r2,zero
    8cdc:	00003b06 	br	8dcc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    8ce0:	e0bffe17 	ldw	r2,-8(fp)
    8ce4:	10800003 	ldbu	r2,0(r2)
    8ce8:	10803fcc 	andi	r2,r2,255
    8cec:	108000a0 	cmpeqi	r2,r2,2
    8cf0:	1000051e 	bne	r2,zero,8d08 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    8cf4:	e0bfff17 	ldw	r2,-4(fp)
    8cf8:	00c00044 	movi	r3,1
    8cfc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    8d00:	0005883a 	mov	r2,zero
    8d04:	00003106 	br	8dcc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8d08:	0005303a 	rdctl	r2,status
    8d0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8d10:	e0fffc17 	ldw	r3,-16(fp)
    8d14:	00bfff84 	movi	r2,-2
    8d18:	1884703a 	and	r2,r3,r2
    8d1c:	1001703a 	wrctl	status,r2
  
  return context;
    8d20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8d24:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    8d28:	e0bffe17 	ldw	r2,-8(fp)
    8d2c:	10800117 	ldw	r2,4(r2)
    8d30:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    8d34:	e0bffb17 	ldw	r2,-20(fp)
    8d38:	1080058b 	ldhu	r2,22(r2)
    8d3c:	10bfffcc 	andi	r2,r2,65535
    8d40:	10001926 	beq	r2,zero,8da8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    8d44:	e0bffb17 	ldw	r2,-20(fp)
    8d48:	10800417 	ldw	r2,16(r2)
    8d4c:	11000104 	addi	r4,r2,4
    8d50:	e0fffb17 	ldw	r3,-20(fp)
    8d54:	19000415 	stw	r4,16(r3)
    8d58:	10800017 	ldw	r2,0(r2)
    8d5c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    8d60:	e0bffb17 	ldw	r2,-20(fp)
    8d64:	1080058b 	ldhu	r2,22(r2)
    8d68:	10bfffc4 	addi	r2,r2,-1
    8d6c:	1007883a 	mov	r3,r2
    8d70:	e0bffb17 	ldw	r2,-20(fp)
    8d74:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    8d78:	e0bffb17 	ldw	r2,-20(fp)
    8d7c:	10c00417 	ldw	r3,16(r2)
    8d80:	e0bffb17 	ldw	r2,-20(fp)
    8d84:	10800217 	ldw	r2,8(r2)
    8d88:	1880041e 	bne	r3,r2,8d9c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    8d8c:	e0bffb17 	ldw	r2,-20(fp)
    8d90:	10c00117 	ldw	r3,4(r2)
    8d94:	e0bffb17 	ldw	r2,-20(fp)
    8d98:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    8d9c:	e0bfff17 	ldw	r2,-4(fp)
    8da0:	10000005 	stb	zero,0(r2)
    8da4:	00000406 	br	8db8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    8da8:	e0bfff17 	ldw	r2,-4(fp)
    8dac:	00c007c4 	movi	r3,31
    8db0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    8db4:	e03ff915 	stw	zero,-28(fp)
    8db8:	e0bffa17 	ldw	r2,-24(fp)
    8dbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8dc0:	e0bffd17 	ldw	r2,-12(fp)
    8dc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    8dc8:	e0bff917 	ldw	r2,-28(fp)
}
    8dcc:	e037883a 	mov	sp,fp
    8dd0:	df000017 	ldw	fp,0(sp)
    8dd4:	dec00104 	addi	sp,sp,4
    8dd8:	f800283a 	ret

00008ddc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    8ddc:	defff404 	addi	sp,sp,-48
    8de0:	dfc00b15 	stw	ra,44(sp)
    8de4:	df000a15 	stw	fp,40(sp)
    8de8:	df000a04 	addi	fp,sp,40
    8dec:	e13ffe15 	stw	r4,-8(fp)
    8df0:	2805883a 	mov	r2,r5
    8df4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8df8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    8dfc:	00800074 	movhi	r2,1
    8e00:	1091ce04 	addi	r2,r2,18232
    8e04:	10800003 	ldbu	r2,0(r2)
    8e08:	10803fcc 	andi	r2,r2,255
    8e0c:	10000226 	beq	r2,zero,8e18 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    8e10:	0005883a 	mov	r2,zero
    8e14:	00006b06 	br	8fc4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e18:	0005303a 	rdctl	r2,status
    8e1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e20:	e0fff917 	ldw	r3,-28(fp)
    8e24:	00bfff84 	movi	r2,-2
    8e28:	1884703a 	and	r2,r3,r2
    8e2c:	1001703a 	wrctl	status,r2
  
  return context;
    8e30:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8e34:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    8e38:	00800074 	movhi	r2,1
    8e3c:	1091cd04 	addi	r2,r2,18228
    8e40:	10800017 	ldw	r2,0(r2)
    8e44:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    8e48:	00800074 	movhi	r2,1
    8e4c:	1091cd04 	addi	r2,r2,18228
    8e50:	10800017 	ldw	r2,0(r2)
    8e54:	10000726 	beq	r2,zero,8e74 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8e58:	00800074 	movhi	r2,1
    8e5c:	1091cd04 	addi	r2,r2,18228
    8e60:	10800017 	ldw	r2,0(r2)
    8e64:	10c00117 	ldw	r3,4(r2)
    8e68:	00800074 	movhi	r2,1
    8e6c:	1091cd04 	addi	r2,r2,18228
    8e70:	10c00015 	stw	r3,0(r2)
    8e74:	e0bff717 	ldw	r2,-36(fp)
    8e78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e7c:	e0bffa17 	ldw	r2,-24(fp)
    8e80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    8e84:	e0bff617 	ldw	r2,-40(fp)
    8e88:	10004d26 	beq	r2,zero,8fc0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e8c:	0005303a 	rdctl	r2,status
    8e90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e94:	e0fffb17 	ldw	r3,-20(fp)
    8e98:	00bfff84 	movi	r2,-2
    8e9c:	1884703a 	and	r2,r3,r2
    8ea0:	1001703a 	wrctl	status,r2
  
  return context;
    8ea4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    8ea8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    8eac:	00800074 	movhi	r2,1
    8eb0:	1091cb04 	addi	r2,r2,18220
    8eb4:	10800017 	ldw	r2,0(r2)
    8eb8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    8ebc:	e0bff817 	ldw	r2,-32(fp)
    8ec0:	10003126 	beq	r2,zero,8f88 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    8ec4:	00800074 	movhi	r2,1
    8ec8:	1091cb04 	addi	r2,r2,18220
    8ecc:	10800017 	ldw	r2,0(r2)
    8ed0:	10c00017 	ldw	r3,0(r2)
    8ed4:	00800074 	movhi	r2,1
    8ed8:	1091cb04 	addi	r2,r2,18220
    8edc:	10c00015 	stw	r3,0(r2)
    8ee0:	e0bff717 	ldw	r2,-36(fp)
    8ee4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ee8:	e0bffc17 	ldw	r2,-16(fp)
    8eec:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    8ef0:	e0bff817 	ldw	r2,-32(fp)
    8ef4:	e0fffe17 	ldw	r3,-8(fp)
    8ef8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    8efc:	e0bfff0b 	ldhu	r2,-4(fp)
    8f00:	1085883a 	add	r2,r2,r2
    8f04:	1085883a 	add	r2,r2,r2
    8f08:	1007883a 	mov	r3,r2
    8f0c:	e0bffe17 	ldw	r2,-8(fp)
    8f10:	10c7883a 	add	r3,r2,r3
    8f14:	e0bff817 	ldw	r2,-32(fp)
    8f18:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    8f1c:	e0bff817 	ldw	r2,-32(fp)
    8f20:	e0fffe17 	ldw	r3,-8(fp)
    8f24:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    8f28:	e0bff817 	ldw	r2,-32(fp)
    8f2c:	e0fffe17 	ldw	r3,-8(fp)
    8f30:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    8f34:	e0bff817 	ldw	r2,-32(fp)
    8f38:	e0ffff0b 	ldhu	r3,-4(fp)
    8f3c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    8f40:	e0bff817 	ldw	r2,-32(fp)
    8f44:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    8f48:	e0bff617 	ldw	r2,-40(fp)
    8f4c:	00c00084 	movi	r3,2
    8f50:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    8f54:	e0bff617 	ldw	r2,-40(fp)
    8f58:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    8f5c:	e0bff617 	ldw	r2,-40(fp)
    8f60:	e0fff817 	ldw	r3,-32(fp)
    8f64:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    8f68:	e0bff617 	ldw	r2,-40(fp)
    8f6c:	00c00fc4 	movi	r3,63
    8f70:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    8f74:	e0bff617 	ldw	r2,-40(fp)
    8f78:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    8f7c:	e13ff617 	ldw	r4,-40(fp)
    8f80:	00060200 	call	6020 <OS_EventWaitListInit>
    8f84:	00000e06 	br	8fc0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    8f88:	00800074 	movhi	r2,1
    8f8c:	1091cd04 	addi	r2,r2,18228
    8f90:	10c00017 	ldw	r3,0(r2)
    8f94:	e0bff617 	ldw	r2,-40(fp)
    8f98:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    8f9c:	00800074 	movhi	r2,1
    8fa0:	1091cd04 	addi	r2,r2,18228
    8fa4:	e0fff617 	ldw	r3,-40(fp)
    8fa8:	10c00015 	stw	r3,0(r2)
    8fac:	e0bff717 	ldw	r2,-36(fp)
    8fb0:	e0bffd15 	stw	r2,-12(fp)
    8fb4:	e0bffd17 	ldw	r2,-12(fp)
    8fb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    8fbc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    8fc0:	e0bff617 	ldw	r2,-40(fp)
}
    8fc4:	e037883a 	mov	sp,fp
    8fc8:	dfc00117 	ldw	ra,4(sp)
    8fcc:	df000017 	ldw	fp,0(sp)
    8fd0:	dec00204 	addi	sp,sp,8
    8fd4:	f800283a 	ret

00008fd8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8fd8:	defff204 	addi	sp,sp,-56
    8fdc:	dfc00d15 	stw	ra,52(sp)
    8fe0:	df000c15 	stw	fp,48(sp)
    8fe4:	df000c04 	addi	fp,sp,48
    8fe8:	e13ffd15 	stw	r4,-12(fp)
    8fec:	2805883a 	mov	r2,r5
    8ff0:	e1bfff15 	stw	r6,-4(fp)
    8ff4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8ff8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    8ffc:	e0bfff17 	ldw	r2,-4(fp)
    9000:	1000021e 	bne	r2,zero,900c <OSQDel+0x34>
        return (pevent);
    9004:	e0bffd17 	ldw	r2,-12(fp)
    9008:	0000a006 	br	928c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    900c:	e0bffd17 	ldw	r2,-12(fp)
    9010:	1000051e 	bne	r2,zero,9028 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9014:	e0bfff17 	ldw	r2,-4(fp)
    9018:	00c00104 	movi	r3,4
    901c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9020:	e0bffd17 	ldw	r2,-12(fp)
    9024:	00009906 	br	928c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    9028:	e0bffd17 	ldw	r2,-12(fp)
    902c:	10800003 	ldbu	r2,0(r2)
    9030:	10803fcc 	andi	r2,r2,255
    9034:	108000a0 	cmpeqi	r2,r2,2
    9038:	1000051e 	bne	r2,zero,9050 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    903c:	e0bfff17 	ldw	r2,-4(fp)
    9040:	00c00044 	movi	r3,1
    9044:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9048:	e0bffd17 	ldw	r2,-12(fp)
    904c:	00008f06 	br	928c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9050:	00800074 	movhi	r2,1
    9054:	1091ce04 	addi	r2,r2,18232
    9058:	10800003 	ldbu	r2,0(r2)
    905c:	10803fcc 	andi	r2,r2,255
    9060:	10000526 	beq	r2,zero,9078 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    9064:	e0bfff17 	ldw	r2,-4(fp)
    9068:	00c003c4 	movi	r3,15
    906c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    9070:	e0bffd17 	ldw	r2,-12(fp)
    9074:	00008506 	br	928c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9078:	0005303a 	rdctl	r2,status
    907c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9080:	e0fff817 	ldw	r3,-32(fp)
    9084:	00bfff84 	movi	r2,-2
    9088:	1884703a 	and	r2,r3,r2
    908c:	1001703a 	wrctl	status,r2
  
  return context;
    9090:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    9094:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	10800283 	ldbu	r2,10(r2)
    90a0:	10803fcc 	andi	r2,r2,255
    90a4:	10000326 	beq	r2,zero,90b4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    90a8:	00800044 	movi	r2,1
    90ac:	e0bff405 	stb	r2,-48(fp)
    90b0:	00000106 	br	90b8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    90b4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    90b8:	e0bffe03 	ldbu	r2,-8(fp)
    90bc:	10000326 	beq	r2,zero,90cc <OSQDel+0xf4>
    90c0:	10800060 	cmpeqi	r2,r2,1
    90c4:	1000381e 	bne	r2,zero,91a8 <OSQDel+0x1d0>
    90c8:	00006506 	br	9260 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    90cc:	e0bff403 	ldbu	r2,-48(fp)
    90d0:	1000261e 	bne	r2,zero,916c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    90d4:	e0bffd17 	ldw	r2,-12(fp)
    90d8:	00c00fc4 	movi	r3,63
    90dc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    90e0:	e0bffd17 	ldw	r2,-12(fp)
    90e4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    90e8:	e0bffd17 	ldw	r2,-12(fp)
    90ec:	10800117 	ldw	r2,4(r2)
    90f0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    90f4:	00800074 	movhi	r2,1
    90f8:	1091cb04 	addi	r2,r2,18220
    90fc:	10c00017 	ldw	r3,0(r2)
    9100:	e0bff717 	ldw	r2,-36(fp)
    9104:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    9108:	00800074 	movhi	r2,1
    910c:	1091cb04 	addi	r2,r2,18220
    9110:	e0fff717 	ldw	r3,-36(fp)
    9114:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    9118:	e0bffd17 	ldw	r2,-12(fp)
    911c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    9120:	00800074 	movhi	r2,1
    9124:	1091cd04 	addi	r2,r2,18228
    9128:	10c00017 	ldw	r3,0(r2)
    912c:	e0bffd17 	ldw	r2,-12(fp)
    9130:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    9134:	e0bffd17 	ldw	r2,-12(fp)
    9138:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    913c:	00800074 	movhi	r2,1
    9140:	1091cd04 	addi	r2,r2,18228
    9144:	e0fffd17 	ldw	r3,-12(fp)
    9148:	10c00015 	stw	r3,0(r2)
    914c:	e0bff617 	ldw	r2,-40(fp)
    9150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9154:	e0bff917 	ldw	r2,-28(fp)
    9158:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    915c:	e0bfff17 	ldw	r2,-4(fp)
    9160:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    9164:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    9168:	00004706 	br	9288 <OSQDel+0x2b0>
    916c:	e0bff617 	ldw	r2,-40(fp)
    9170:	e0bffa15 	stw	r2,-24(fp)
    9174:	e0bffa17 	ldw	r2,-24(fp)
    9178:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    917c:	e0bfff17 	ldw	r2,-4(fp)
    9180:	00c01244 	movi	r3,73
    9184:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    9188:	e0bffd17 	ldw	r2,-12(fp)
    918c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    9190:	00003d06 	br	9288 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    9194:	e13ffd17 	ldw	r4,-12(fp)
    9198:	000b883a 	mov	r5,zero
    919c:	01800104 	movi	r6,4
    91a0:	000f883a 	mov	r7,zero
    91a4:	0005a800 	call	5a80 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    91a8:	e0bffd17 	ldw	r2,-12(fp)
    91ac:	10800283 	ldbu	r2,10(r2)
    91b0:	10803fcc 	andi	r2,r2,255
    91b4:	103ff71e 	bne	r2,zero,9194 <__alt_mem_Flash_flash_data+0xf4009194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    91b8:	e0bffd17 	ldw	r2,-12(fp)
    91bc:	00c00fc4 	movi	r3,63
    91c0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    91c4:	e0bffd17 	ldw	r2,-12(fp)
    91c8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	10800117 	ldw	r2,4(r2)
    91d4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    91d8:	00800074 	movhi	r2,1
    91dc:	1091cb04 	addi	r2,r2,18220
    91e0:	10c00017 	ldw	r3,0(r2)
    91e4:	e0bff717 	ldw	r2,-36(fp)
    91e8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    91ec:	00800074 	movhi	r2,1
    91f0:	1091cb04 	addi	r2,r2,18220
    91f4:	e0fff717 	ldw	r3,-36(fp)
    91f8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    91fc:	e0bffd17 	ldw	r2,-12(fp)
    9200:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    9204:	00800074 	movhi	r2,1
    9208:	1091cd04 	addi	r2,r2,18228
    920c:	10c00017 	ldw	r3,0(r2)
    9210:	e0bffd17 	ldw	r2,-12(fp)
    9214:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    9218:	e0bffd17 	ldw	r2,-12(fp)
    921c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    9220:	00800074 	movhi	r2,1
    9224:	1091cd04 	addi	r2,r2,18228
    9228:	e0fffd17 	ldw	r3,-12(fp)
    922c:	10c00015 	stw	r3,0(r2)
    9230:	e0bff617 	ldw	r2,-40(fp)
    9234:	e0bffb15 	stw	r2,-20(fp)
    9238:	e0bffb17 	ldw	r2,-20(fp)
    923c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    9240:	e0bff403 	ldbu	r2,-48(fp)
    9244:	10800058 	cmpnei	r2,r2,1
    9248:	1000011e 	bne	r2,zero,9250 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    924c:	00064980 	call	6498 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    9250:	e0bfff17 	ldw	r2,-4(fp)
    9254:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    9258:	e03ff515 	stw	zero,-44(fp)
             break;
    925c:	00000a06 	br	9288 <OSQDel+0x2b0>
    9260:	e0bff617 	ldw	r2,-40(fp)
    9264:	e0bffc15 	stw	r2,-16(fp)
    9268:	e0bffc17 	ldw	r2,-16(fp)
    926c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    9270:	e0bfff17 	ldw	r2,-4(fp)
    9274:	00c001c4 	movi	r3,7
    9278:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    927c:	e0bffd17 	ldw	r2,-12(fp)
    9280:	e0bff515 	stw	r2,-44(fp)
             break;
    9284:	0001883a 	nop
    }
    return (pevent_return);
    9288:	e0bff517 	ldw	r2,-44(fp)
}
    928c:	e037883a 	mov	sp,fp
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	df000017 	ldw	fp,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    92a0:	defffa04 	addi	sp,sp,-24
    92a4:	df000515 	stw	fp,20(sp)
    92a8:	df000504 	addi	fp,sp,20
    92ac:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    92b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    92b4:	e0bfff17 	ldw	r2,-4(fp)
    92b8:	1000021e 	bne	r2,zero,92c4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    92bc:	00800104 	movi	r2,4
    92c0:	00002106 	br	9348 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    92c4:	e0bfff17 	ldw	r2,-4(fp)
    92c8:	10800003 	ldbu	r2,0(r2)
    92cc:	10803fcc 	andi	r2,r2,255
    92d0:	108000a0 	cmpeqi	r2,r2,2
    92d4:	1000021e 	bne	r2,zero,92e0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    92d8:	00800044 	movi	r2,1
    92dc:	00001a06 	br	9348 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92e0:	0005303a 	rdctl	r2,status
    92e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92e8:	e0fffd17 	ldw	r3,-12(fp)
    92ec:	00bfff84 	movi	r2,-2
    92f0:	1884703a 	and	r2,r3,r2
    92f4:	1001703a 	wrctl	status,r2
  
  return context;
    92f8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    92fc:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    9300:	e0bfff17 	ldw	r2,-4(fp)
    9304:	10800117 	ldw	r2,4(r2)
    9308:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    930c:	e0bffc17 	ldw	r2,-16(fp)
    9310:	10c00117 	ldw	r3,4(r2)
    9314:	e0bffc17 	ldw	r2,-16(fp)
    9318:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    931c:	e0bffc17 	ldw	r2,-16(fp)
    9320:	10c00117 	ldw	r3,4(r2)
    9324:	e0bffc17 	ldw	r2,-16(fp)
    9328:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    932c:	e0bffc17 	ldw	r2,-16(fp)
    9330:	1000058d 	sth	zero,22(r2)
    9334:	e0bffb17 	ldw	r2,-20(fp)
    9338:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    933c:	e0bffe17 	ldw	r2,-8(fp)
    9340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9344:	0005883a 	mov	r2,zero
}
    9348:	e037883a 	mov	sp,fp
    934c:	df000017 	ldw	fp,0(sp)
    9350:	dec00104 	addi	sp,sp,4
    9354:	f800283a 	ret

00009358 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    9358:	defff304 	addi	sp,sp,-52
    935c:	dfc00c15 	stw	ra,48(sp)
    9360:	df000b15 	stw	fp,44(sp)
    9364:	df000b04 	addi	fp,sp,44
    9368:	e13ffd15 	stw	r4,-12(fp)
    936c:	2805883a 	mov	r2,r5
    9370:	e1bfff15 	stw	r6,-4(fp)
    9374:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9378:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    937c:	e0bfff17 	ldw	r2,-4(fp)
    9380:	1000021e 	bne	r2,zero,938c <OSQPend+0x34>
        return ((void *)0);
    9384:	0005883a 	mov	r2,zero
    9388:	0000ad06 	br	9640 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    938c:	e0bffd17 	ldw	r2,-12(fp)
    9390:	1000051e 	bne	r2,zero,93a8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9394:	e0bfff17 	ldw	r2,-4(fp)
    9398:	00c00104 	movi	r3,4
    939c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    93a0:	0005883a 	mov	r2,zero
    93a4:	0000a606 	br	9640 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    93a8:	e0bffd17 	ldw	r2,-12(fp)
    93ac:	10800003 	ldbu	r2,0(r2)
    93b0:	10803fcc 	andi	r2,r2,255
    93b4:	108000a0 	cmpeqi	r2,r2,2
    93b8:	1000051e 	bne	r2,zero,93d0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    93bc:	e0bfff17 	ldw	r2,-4(fp)
    93c0:	00c00044 	movi	r3,1
    93c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    93c8:	0005883a 	mov	r2,zero
    93cc:	00009c06 	br	9640 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    93d0:	00800074 	movhi	r2,1
    93d4:	1091ce04 	addi	r2,r2,18232
    93d8:	10800003 	ldbu	r2,0(r2)
    93dc:	10803fcc 	andi	r2,r2,255
    93e0:	10000526 	beq	r2,zero,93f8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    93e4:	e0bfff17 	ldw	r2,-4(fp)
    93e8:	00c00084 	movi	r3,2
    93ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    93f0:	0005883a 	mov	r2,zero
    93f4:	00009206 	br	9640 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    93f8:	00800074 	movhi	r2,1
    93fc:	1091c004 	addi	r2,r2,18176
    9400:	10800003 	ldbu	r2,0(r2)
    9404:	10803fcc 	andi	r2,r2,255
    9408:	10000526 	beq	r2,zero,9420 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    940c:	e0bfff17 	ldw	r2,-4(fp)
    9410:	00c00344 	movi	r3,13
    9414:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    9418:	0005883a 	mov	r2,zero
    941c:	00008806 	br	9640 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9420:	0005303a 	rdctl	r2,status
    9424:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9428:	e0fff817 	ldw	r3,-32(fp)
    942c:	00bfff84 	movi	r2,-2
    9430:	1884703a 	and	r2,r3,r2
    9434:	1001703a 	wrctl	status,r2
  
  return context;
    9438:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    943c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    9440:	e0bffd17 	ldw	r2,-12(fp)
    9444:	10800117 	ldw	r2,4(r2)
    9448:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    944c:	e0bff717 	ldw	r2,-36(fp)
    9450:	1080058b 	ldhu	r2,22(r2)
    9454:	10bfffcc 	andi	r2,r2,65535
    9458:	10001e26 	beq	r2,zero,94d4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    945c:	e0bff717 	ldw	r2,-36(fp)
    9460:	10800417 	ldw	r2,16(r2)
    9464:	11000104 	addi	r4,r2,4
    9468:	e0fff717 	ldw	r3,-36(fp)
    946c:	19000415 	stw	r4,16(r3)
    9470:	10800017 	ldw	r2,0(r2)
    9474:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    9478:	e0bff717 	ldw	r2,-36(fp)
    947c:	1080058b 	ldhu	r2,22(r2)
    9480:	10bfffc4 	addi	r2,r2,-1
    9484:	1007883a 	mov	r3,r2
    9488:	e0bff717 	ldw	r2,-36(fp)
    948c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    9490:	e0bff717 	ldw	r2,-36(fp)
    9494:	10c00417 	ldw	r3,16(r2)
    9498:	e0bff717 	ldw	r2,-36(fp)
    949c:	10800217 	ldw	r2,8(r2)
    94a0:	1880041e 	bne	r3,r2,94b4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    94a4:	e0bff717 	ldw	r2,-36(fp)
    94a8:	10c00117 	ldw	r3,4(r2)
    94ac:	e0bff717 	ldw	r2,-36(fp)
    94b0:	10c00415 	stw	r3,16(r2)
    94b4:	e0bff617 	ldw	r2,-40(fp)
    94b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94bc:	e0bff917 	ldw	r2,-28(fp)
    94c0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    94c4:	e0bfff17 	ldw	r2,-4(fp)
    94c8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    94cc:	e0bff517 	ldw	r2,-44(fp)
    94d0:	00005b06 	br	9640 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    94d4:	00800074 	movhi	r2,1
    94d8:	1091cf04 	addi	r2,r2,18236
    94dc:	10c00017 	ldw	r3,0(r2)
    94e0:	00800074 	movhi	r2,1
    94e4:	1091cf04 	addi	r2,r2,18236
    94e8:	10800017 	ldw	r2,0(r2)
    94ec:	10800c03 	ldbu	r2,48(r2)
    94f0:	10800114 	ori	r2,r2,4
    94f4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    94f8:	00800074 	movhi	r2,1
    94fc:	1091cf04 	addi	r2,r2,18236
    9500:	10800017 	ldw	r2,0(r2)
    9504:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    9508:	00800074 	movhi	r2,1
    950c:	1091cf04 	addi	r2,r2,18236
    9510:	10800017 	ldw	r2,0(r2)
    9514:	e0fffe0b 	ldhu	r3,-8(fp)
    9518:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    951c:	e13ffd17 	ldw	r4,-12(fp)
    9520:	0005c180 	call	5c18 <OS_EventTaskWait>
    9524:	e0bff617 	ldw	r2,-40(fp)
    9528:	e0bffa15 	stw	r2,-24(fp)
    952c:	e0bffa17 	ldw	r2,-24(fp)
    9530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    9534:	00064980 	call	6498 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9538:	0005303a 	rdctl	r2,status
    953c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9540:	e0fffb17 	ldw	r3,-20(fp)
    9544:	00bfff84 	movi	r2,-2
    9548:	1884703a 	and	r2,r3,r2
    954c:	1001703a 	wrctl	status,r2
  
  return context;
    9550:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    9554:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    9558:	00800074 	movhi	r2,1
    955c:	1091cf04 	addi	r2,r2,18236
    9560:	10800017 	ldw	r2,0(r2)
    9564:	10800c43 	ldbu	r2,49(r2)
    9568:	10803fcc 	andi	r2,r2,255
    956c:	10000326 	beq	r2,zero,957c <OSQPend+0x224>
    9570:	108000a0 	cmpeqi	r2,r2,2
    9574:	1000091e 	bne	r2,zero,959c <OSQPend+0x244>
    9578:	00000d06 	br	95b0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    957c:	00800074 	movhi	r2,1
    9580:	1091cf04 	addi	r2,r2,18236
    9584:	10800017 	ldw	r2,0(r2)
    9588:	10800917 	ldw	r2,36(r2)
    958c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    9590:	e0bfff17 	ldw	r2,-4(fp)
    9594:	10000005 	stb	zero,0(r2)
             break;
    9598:	00001006 	br	95dc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    959c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    95a0:	e0bfff17 	ldw	r2,-4(fp)
    95a4:	00c00384 	movi	r3,14
    95a8:	10c00005 	stb	r3,0(r2)
             break;
    95ac:	00000b06 	br	95dc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    95b0:	00800074 	movhi	r2,1
    95b4:	1091cf04 	addi	r2,r2,18236
    95b8:	10800017 	ldw	r2,0(r2)
    95bc:	1009883a 	mov	r4,r2
    95c0:	e17ffd17 	ldw	r5,-12(fp)
    95c4:	0005e700 	call	5e70 <OS_EventTaskRemove>
             pmsg = (void *)0;
    95c8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    95cc:	e0bfff17 	ldw	r2,-4(fp)
    95d0:	00c00284 	movi	r3,10
    95d4:	10c00005 	stb	r3,0(r2)
             break;
    95d8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    95dc:	00800074 	movhi	r2,1
    95e0:	1091cf04 	addi	r2,r2,18236
    95e4:	10800017 	ldw	r2,0(r2)
    95e8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    95ec:	00800074 	movhi	r2,1
    95f0:	1091cf04 	addi	r2,r2,18236
    95f4:	10800017 	ldw	r2,0(r2)
    95f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    95fc:	00800074 	movhi	r2,1
    9600:	1091cf04 	addi	r2,r2,18236
    9604:	10800017 	ldw	r2,0(r2)
    9608:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    960c:	00800074 	movhi	r2,1
    9610:	1091cf04 	addi	r2,r2,18236
    9614:	10800017 	ldw	r2,0(r2)
    9618:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    961c:	00800074 	movhi	r2,1
    9620:	1091cf04 	addi	r2,r2,18236
    9624:	10800017 	ldw	r2,0(r2)
    9628:	10000915 	stw	zero,36(r2)
    962c:	e0bff617 	ldw	r2,-40(fp)
    9630:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9634:	e0bffc17 	ldw	r2,-16(fp)
    9638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    963c:	e0bff517 	ldw	r2,-44(fp)
}
    9640:	e037883a 	mov	sp,fp
    9644:	dfc00117 	ldw	ra,4(sp)
    9648:	df000017 	ldw	fp,0(sp)
    964c:	dec00204 	addi	sp,sp,8
    9650:	f800283a 	ret

00009654 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    9654:	defff604 	addi	sp,sp,-40
    9658:	dfc00915 	stw	ra,36(sp)
    965c:	df000815 	stw	fp,32(sp)
    9660:	df000804 	addi	fp,sp,32
    9664:	e13ffd15 	stw	r4,-12(fp)
    9668:	2805883a 	mov	r2,r5
    966c:	e1bfff15 	stw	r6,-4(fp)
    9670:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9674:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    9678:	e0bfff17 	ldw	r2,-4(fp)
    967c:	1000021e 	bne	r2,zero,9688 <OSQPendAbort+0x34>
        return (0);
    9680:	0005883a 	mov	r2,zero
    9684:	00004906 	br	97ac <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    9688:	e0bffd17 	ldw	r2,-12(fp)
    968c:	1000051e 	bne	r2,zero,96a4 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    9690:	e0bfff17 	ldw	r2,-4(fp)
    9694:	00c00104 	movi	r3,4
    9698:	10c00005 	stb	r3,0(r2)
        return (0);
    969c:	0005883a 	mov	r2,zero
    96a0:	00004206 	br	97ac <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    96a4:	e0bffd17 	ldw	r2,-12(fp)
    96a8:	10800003 	ldbu	r2,0(r2)
    96ac:	10803fcc 	andi	r2,r2,255
    96b0:	108000a0 	cmpeqi	r2,r2,2
    96b4:	1000051e 	bne	r2,zero,96cc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	00c00044 	movi	r3,1
    96c0:	10c00005 	stb	r3,0(r2)
        return (0);
    96c4:	0005883a 	mov	r2,zero
    96c8:	00003806 	br	97ac <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96cc:	0005303a 	rdctl	r2,status
    96d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96d4:	e0fffa17 	ldw	r3,-24(fp)
    96d8:	00bfff84 	movi	r2,-2
    96dc:	1884703a 	and	r2,r3,r2
    96e0:	1001703a 	wrctl	status,r2
  
  return context;
    96e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    96e8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    96ec:	e0bffd17 	ldw	r2,-12(fp)
    96f0:	10800283 	ldbu	r2,10(r2)
    96f4:	10803fcc 	andi	r2,r2,255
    96f8:	10002526 	beq	r2,zero,9790 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    96fc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    9700:	e0bffe03 	ldbu	r2,-8(fp)
    9704:	10800060 	cmpeqi	r2,r2,1
    9708:	10000e26 	beq	r2,zero,9744 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    970c:	00000806 	br	9730 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    9710:	e13ffd17 	ldw	r4,-12(fp)
    9714:	000b883a 	mov	r5,zero
    9718:	01800104 	movi	r6,4
    971c:	01c00084 	movi	r7,2
    9720:	0005a800 	call	5a80 <OS_EventTaskRdy>
                     nbr_tasks++;
    9724:	e0bff803 	ldbu	r2,-32(fp)
    9728:	10800044 	addi	r2,r2,1
    972c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    9730:	e0bffd17 	ldw	r2,-12(fp)
    9734:	10800283 	ldbu	r2,10(r2)
    9738:	10803fcc 	andi	r2,r2,255
    973c:	103ff41e 	bne	r2,zero,9710 <__alt_mem_Flash_flash_data+0xf4009710>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    9740:	00000906 	br	9768 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    9744:	e13ffd17 	ldw	r4,-12(fp)
    9748:	000b883a 	mov	r5,zero
    974c:	01800104 	movi	r6,4
    9750:	01c00084 	movi	r7,2
    9754:	0005a800 	call	5a80 <OS_EventTaskRdy>
                 nbr_tasks++;
    9758:	e0bff803 	ldbu	r2,-32(fp)
    975c:	10800044 	addi	r2,r2,1
    9760:	e0bff805 	stb	r2,-32(fp)
                 break;
    9764:	0001883a 	nop
    9768:	e0bff917 	ldw	r2,-28(fp)
    976c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9770:	e0bffb17 	ldw	r2,-20(fp)
    9774:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    9778:	00064980 	call	6498 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    977c:	e0bfff17 	ldw	r2,-4(fp)
    9780:	00c00384 	movi	r3,14
    9784:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    9788:	e0bff803 	ldbu	r2,-32(fp)
    978c:	00000706 	br	97ac <OSQPendAbort+0x158>
    9790:	e0bff917 	ldw	r2,-28(fp)
    9794:	e0bffc15 	stw	r2,-16(fp)
    9798:	e0bffc17 	ldw	r2,-16(fp)
    979c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    97a8:	0005883a 	mov	r2,zero
}
    97ac:	e037883a 	mov	sp,fp
    97b0:	dfc00117 	ldw	ra,4(sp)
    97b4:	df000017 	ldw	fp,0(sp)
    97b8:	dec00204 	addi	sp,sp,8
    97bc:	f800283a 	ret

000097c0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    97c0:	defff604 	addi	sp,sp,-40
    97c4:	dfc00915 	stw	ra,36(sp)
    97c8:	df000815 	stw	fp,32(sp)
    97cc:	df000804 	addi	fp,sp,32
    97d0:	e13ffe15 	stw	r4,-8(fp)
    97d4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    97d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    97dc:	e0bffe17 	ldw	r2,-8(fp)
    97e0:	1000021e 	bne	r2,zero,97ec <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    97e4:	00800104 	movi	r2,4
    97e8:	00004a06 	br	9914 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    97ec:	e0bffe17 	ldw	r2,-8(fp)
    97f0:	10800003 	ldbu	r2,0(r2)
    97f4:	10803fcc 	andi	r2,r2,255
    97f8:	108000a0 	cmpeqi	r2,r2,2
    97fc:	1000021e 	bne	r2,zero,9808 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    9800:	00800044 	movi	r2,1
    9804:	00004306 	br	9914 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9808:	0005303a 	rdctl	r2,status
    980c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9810:	e0fffa17 	ldw	r3,-24(fp)
    9814:	00bfff84 	movi	r2,-2
    9818:	1884703a 	and	r2,r3,r2
    981c:	1001703a 	wrctl	status,r2
  
  return context;
    9820:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    9824:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    9828:	e0bffe17 	ldw	r2,-8(fp)
    982c:	10800283 	ldbu	r2,10(r2)
    9830:	10803fcc 	andi	r2,r2,255
    9834:	10000c26 	beq	r2,zero,9868 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    9838:	e13ffe17 	ldw	r4,-8(fp)
    983c:	e17fff17 	ldw	r5,-4(fp)
    9840:	01800104 	movi	r6,4
    9844:	000f883a 	mov	r7,zero
    9848:	0005a800 	call	5a80 <OS_EventTaskRdy>
    984c:	e0bff817 	ldw	r2,-32(fp)
    9850:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9854:	e0bffb17 	ldw	r2,-20(fp)
    9858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    985c:	00064980 	call	6498 <OS_Sched>
        return (OS_ERR_NONE);
    9860:	0005883a 	mov	r2,zero
    9864:	00002b06 	br	9914 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    9868:	e0bffe17 	ldw	r2,-8(fp)
    986c:	10800117 	ldw	r2,4(r2)
    9870:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    9874:	e0bff917 	ldw	r2,-28(fp)
    9878:	10c0058b 	ldhu	r3,22(r2)
    987c:	e0bff917 	ldw	r2,-28(fp)
    9880:	1080050b 	ldhu	r2,20(r2)
    9884:	18ffffcc 	andi	r3,r3,65535
    9888:	10bfffcc 	andi	r2,r2,65535
    988c:	18800636 	bltu	r3,r2,98a8 <OSQPost+0xe8>
    9890:	e0bff817 	ldw	r2,-32(fp)
    9894:	e0bffc15 	stw	r2,-16(fp)
    9898:	e0bffc17 	ldw	r2,-16(fp)
    989c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    98a0:	00800784 	movi	r2,30
    98a4:	00001b06 	br	9914 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    98a8:	e0bff917 	ldw	r2,-28(fp)
    98ac:	10800317 	ldw	r2,12(r2)
    98b0:	11000104 	addi	r4,r2,4
    98b4:	e0fff917 	ldw	r3,-28(fp)
    98b8:	19000315 	stw	r4,12(r3)
    98bc:	e0ffff17 	ldw	r3,-4(fp)
    98c0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    98c4:	e0bff917 	ldw	r2,-28(fp)
    98c8:	1080058b 	ldhu	r2,22(r2)
    98cc:	10800044 	addi	r2,r2,1
    98d0:	1007883a 	mov	r3,r2
    98d4:	e0bff917 	ldw	r2,-28(fp)
    98d8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    98dc:	e0bff917 	ldw	r2,-28(fp)
    98e0:	10c00317 	ldw	r3,12(r2)
    98e4:	e0bff917 	ldw	r2,-28(fp)
    98e8:	10800217 	ldw	r2,8(r2)
    98ec:	1880041e 	bne	r3,r2,9900 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    98f0:	e0bff917 	ldw	r2,-28(fp)
    98f4:	10c00117 	ldw	r3,4(r2)
    98f8:	e0bff917 	ldw	r2,-28(fp)
    98fc:	10c00315 	stw	r3,12(r2)
    9900:	e0bff817 	ldw	r2,-32(fp)
    9904:	e0bffd15 	stw	r2,-12(fp)
    9908:	e0bffd17 	ldw	r2,-12(fp)
    990c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9910:	0005883a 	mov	r2,zero
}
    9914:	e037883a 	mov	sp,fp
    9918:	dfc00117 	ldw	ra,4(sp)
    991c:	df000017 	ldw	fp,0(sp)
    9920:	dec00204 	addi	sp,sp,8
    9924:	f800283a 	ret

00009928 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    9928:	defff604 	addi	sp,sp,-40
    992c:	dfc00915 	stw	ra,36(sp)
    9930:	df000815 	stw	fp,32(sp)
    9934:	df000804 	addi	fp,sp,32
    9938:	e13ffe15 	stw	r4,-8(fp)
    993c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9940:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9944:	e0bffe17 	ldw	r2,-8(fp)
    9948:	1000021e 	bne	r2,zero,9954 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    994c:	00800104 	movi	r2,4
    9950:	00004c06 	br	9a84 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9954:	e0bffe17 	ldw	r2,-8(fp)
    9958:	10800003 	ldbu	r2,0(r2)
    995c:	10803fcc 	andi	r2,r2,255
    9960:	108000a0 	cmpeqi	r2,r2,2
    9964:	1000021e 	bne	r2,zero,9970 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    9968:	00800044 	movi	r2,1
    996c:	00004506 	br	9a84 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9970:	0005303a 	rdctl	r2,status
    9974:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9978:	e0fffa17 	ldw	r3,-24(fp)
    997c:	00bfff84 	movi	r2,-2
    9980:	1884703a 	and	r2,r3,r2
    9984:	1001703a 	wrctl	status,r2
  
  return context;
    9988:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    998c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    9990:	e0bffe17 	ldw	r2,-8(fp)
    9994:	10800283 	ldbu	r2,10(r2)
    9998:	10803fcc 	andi	r2,r2,255
    999c:	10000c26 	beq	r2,zero,99d0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    99a0:	e13ffe17 	ldw	r4,-8(fp)
    99a4:	e17fff17 	ldw	r5,-4(fp)
    99a8:	01800104 	movi	r6,4
    99ac:	000f883a 	mov	r7,zero
    99b0:	0005a800 	call	5a80 <OS_EventTaskRdy>
    99b4:	e0bff817 	ldw	r2,-32(fp)
    99b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99bc:	e0bffb17 	ldw	r2,-20(fp)
    99c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    99c4:	00064980 	call	6498 <OS_Sched>
        return (OS_ERR_NONE);
    99c8:	0005883a 	mov	r2,zero
    99cc:	00002d06 	br	9a84 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    99d0:	e0bffe17 	ldw	r2,-8(fp)
    99d4:	10800117 	ldw	r2,4(r2)
    99d8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    99dc:	e0bff917 	ldw	r2,-28(fp)
    99e0:	10c0058b 	ldhu	r3,22(r2)
    99e4:	e0bff917 	ldw	r2,-28(fp)
    99e8:	1080050b 	ldhu	r2,20(r2)
    99ec:	18ffffcc 	andi	r3,r3,65535
    99f0:	10bfffcc 	andi	r2,r2,65535
    99f4:	18800636 	bltu	r3,r2,9a10 <OSQPostFront+0xe8>
    99f8:	e0bff817 	ldw	r2,-32(fp)
    99fc:	e0bffc15 	stw	r2,-16(fp)
    9a00:	e0bffc17 	ldw	r2,-16(fp)
    9a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    9a08:	00800784 	movi	r2,30
    9a0c:	00001d06 	br	9a84 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    9a10:	e0bff917 	ldw	r2,-28(fp)
    9a14:	10c00417 	ldw	r3,16(r2)
    9a18:	e0bff917 	ldw	r2,-28(fp)
    9a1c:	10800117 	ldw	r2,4(r2)
    9a20:	1880041e 	bne	r3,r2,9a34 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    9a24:	e0bff917 	ldw	r2,-28(fp)
    9a28:	10c00217 	ldw	r3,8(r2)
    9a2c:	e0bff917 	ldw	r2,-28(fp)
    9a30:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    9a34:	e0bff917 	ldw	r2,-28(fp)
    9a38:	10800417 	ldw	r2,16(r2)
    9a3c:	10ffff04 	addi	r3,r2,-4
    9a40:	e0bff917 	ldw	r2,-28(fp)
    9a44:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    9a48:	e0bff917 	ldw	r2,-28(fp)
    9a4c:	10800417 	ldw	r2,16(r2)
    9a50:	e0ffff17 	ldw	r3,-4(fp)
    9a54:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    9a58:	e0bff917 	ldw	r2,-28(fp)
    9a5c:	1080058b 	ldhu	r2,22(r2)
    9a60:	10800044 	addi	r2,r2,1
    9a64:	1007883a 	mov	r3,r2
    9a68:	e0bff917 	ldw	r2,-28(fp)
    9a6c:	10c0058d 	sth	r3,22(r2)
    9a70:	e0bff817 	ldw	r2,-32(fp)
    9a74:	e0bffd15 	stw	r2,-12(fp)
    9a78:	e0bffd17 	ldw	r2,-12(fp)
    9a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9a80:	0005883a 	mov	r2,zero
}
    9a84:	e037883a 	mov	sp,fp
    9a88:	dfc00117 	ldw	ra,4(sp)
    9a8c:	df000017 	ldw	fp,0(sp)
    9a90:	dec00204 	addi	sp,sp,8
    9a94:	f800283a 	ret

00009a98 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    9a98:	defff504 	addi	sp,sp,-44
    9a9c:	dfc00a15 	stw	ra,40(sp)
    9aa0:	df000915 	stw	fp,36(sp)
    9aa4:	df000904 	addi	fp,sp,36
    9aa8:	e13ffd15 	stw	r4,-12(fp)
    9aac:	e17ffe15 	stw	r5,-8(fp)
    9ab0:	3005883a 	mov	r2,r6
    9ab4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9ab8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9abc:	e0bffd17 	ldw	r2,-12(fp)
    9ac0:	1000021e 	bne	r2,zero,9acc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    9ac4:	00800104 	movi	r2,4
    9ac8:	00007106 	br	9c90 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    9acc:	e0bffd17 	ldw	r2,-12(fp)
    9ad0:	10800003 	ldbu	r2,0(r2)
    9ad4:	10803fcc 	andi	r2,r2,255
    9ad8:	108000a0 	cmpeqi	r2,r2,2
    9adc:	1000021e 	bne	r2,zero,9ae8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    9ae0:	00800044 	movi	r2,1
    9ae4:	00006a06 	br	9c90 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ae8:	0005303a 	rdctl	r2,status
    9aec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9af0:	e0fff917 	ldw	r3,-28(fp)
    9af4:	00bfff84 	movi	r2,-2
    9af8:	1884703a 	and	r2,r3,r2
    9afc:	1001703a 	wrctl	status,r2
  
  return context;
    9b00:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    9b04:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    9b08:	e0bffd17 	ldw	r2,-12(fp)
    9b0c:	10800283 	ldbu	r2,10(r2)
    9b10:	10803fcc 	andi	r2,r2,255
    9b14:	10001d26 	beq	r2,zero,9b8c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    9b18:	e0bfff03 	ldbu	r2,-4(fp)
    9b1c:	1080004c 	andi	r2,r2,1
    9b20:	10000b26 	beq	r2,zero,9b50 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    9b24:	00000506 	br	9b3c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    9b28:	e13ffd17 	ldw	r4,-12(fp)
    9b2c:	e17ffe17 	ldw	r5,-8(fp)
    9b30:	01800104 	movi	r6,4
    9b34:	000f883a 	mov	r7,zero
    9b38:	0005a800 	call	5a80 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    9b3c:	e0bffd17 	ldw	r2,-12(fp)
    9b40:	10800283 	ldbu	r2,10(r2)
    9b44:	10803fcc 	andi	r2,r2,255
    9b48:	103ff71e 	bne	r2,zero,9b28 <__alt_mem_Flash_flash_data+0xf4009b28>
    9b4c:	00000506 	br	9b64 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    9b50:	e13ffd17 	ldw	r4,-12(fp)
    9b54:	e17ffe17 	ldw	r5,-8(fp)
    9b58:	01800104 	movi	r6,4
    9b5c:	000f883a 	mov	r7,zero
    9b60:	0005a800 	call	5a80 <OS_EventTaskRdy>
    9b64:	e0bff717 	ldw	r2,-36(fp)
    9b68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9b6c:	e0bffa17 	ldw	r2,-24(fp)
    9b70:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    9b74:	e0bfff03 	ldbu	r2,-4(fp)
    9b78:	1080010c 	andi	r2,r2,4
    9b7c:	1000011e 	bne	r2,zero,9b84 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    9b80:	00064980 	call	6498 <OS_Sched>
        }
        return (OS_ERR_NONE);
    9b84:	0005883a 	mov	r2,zero
    9b88:	00004106 	br	9c90 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    9b8c:	e0bffd17 	ldw	r2,-12(fp)
    9b90:	10800117 	ldw	r2,4(r2)
    9b94:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    9b98:	e0bff817 	ldw	r2,-32(fp)
    9b9c:	10c0058b 	ldhu	r3,22(r2)
    9ba0:	e0bff817 	ldw	r2,-32(fp)
    9ba4:	1080050b 	ldhu	r2,20(r2)
    9ba8:	18ffffcc 	andi	r3,r3,65535
    9bac:	10bfffcc 	andi	r2,r2,65535
    9bb0:	18800636 	bltu	r3,r2,9bcc <OSQPostOpt+0x134>
    9bb4:	e0bff717 	ldw	r2,-36(fp)
    9bb8:	e0bffb15 	stw	r2,-20(fp)
    9bbc:	e0bffb17 	ldw	r2,-20(fp)
    9bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    9bc4:	00800784 	movi	r2,30
    9bc8:	00003106 	br	9c90 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    9bcc:	e0bfff03 	ldbu	r2,-4(fp)
    9bd0:	1080008c 	andi	r2,r2,2
    9bd4:	10001326 	beq	r2,zero,9c24 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    9bd8:	e0bff817 	ldw	r2,-32(fp)
    9bdc:	10c00417 	ldw	r3,16(r2)
    9be0:	e0bff817 	ldw	r2,-32(fp)
    9be4:	10800117 	ldw	r2,4(r2)
    9be8:	1880041e 	bne	r3,r2,9bfc <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    9bec:	e0bff817 	ldw	r2,-32(fp)
    9bf0:	10c00217 	ldw	r3,8(r2)
    9bf4:	e0bff817 	ldw	r2,-32(fp)
    9bf8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    9bfc:	e0bff817 	ldw	r2,-32(fp)
    9c00:	10800417 	ldw	r2,16(r2)
    9c04:	10ffff04 	addi	r3,r2,-4
    9c08:	e0bff817 	ldw	r2,-32(fp)
    9c0c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    9c10:	e0bff817 	ldw	r2,-32(fp)
    9c14:	10800417 	ldw	r2,16(r2)
    9c18:	e0fffe17 	ldw	r3,-8(fp)
    9c1c:	10c00015 	stw	r3,0(r2)
    9c20:	00001006 	br	9c64 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    9c24:	e0bff817 	ldw	r2,-32(fp)
    9c28:	10800317 	ldw	r2,12(r2)
    9c2c:	11000104 	addi	r4,r2,4
    9c30:	e0fff817 	ldw	r3,-32(fp)
    9c34:	19000315 	stw	r4,12(r3)
    9c38:	e0fffe17 	ldw	r3,-8(fp)
    9c3c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    9c40:	e0bff817 	ldw	r2,-32(fp)
    9c44:	10c00317 	ldw	r3,12(r2)
    9c48:	e0bff817 	ldw	r2,-32(fp)
    9c4c:	10800217 	ldw	r2,8(r2)
    9c50:	1880041e 	bne	r3,r2,9c64 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    9c54:	e0bff817 	ldw	r2,-32(fp)
    9c58:	10c00117 	ldw	r3,4(r2)
    9c5c:	e0bff817 	ldw	r2,-32(fp)
    9c60:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    9c64:	e0bff817 	ldw	r2,-32(fp)
    9c68:	1080058b 	ldhu	r2,22(r2)
    9c6c:	10800044 	addi	r2,r2,1
    9c70:	1007883a 	mov	r3,r2
    9c74:	e0bff817 	ldw	r2,-32(fp)
    9c78:	10c0058d 	sth	r3,22(r2)
    9c7c:	e0bff717 	ldw	r2,-36(fp)
    9c80:	e0bffc15 	stw	r2,-16(fp)
    9c84:	e0bffc17 	ldw	r2,-16(fp)
    9c88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9c8c:	0005883a 	mov	r2,zero
}
    9c90:	e037883a 	mov	sp,fp
    9c94:	dfc00117 	ldw	ra,4(sp)
    9c98:	df000017 	ldw	fp,0(sp)
    9c9c:	dec00204 	addi	sp,sp,8
    9ca0:	f800283a 	ret

00009ca4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    9ca4:	defff604 	addi	sp,sp,-40
    9ca8:	df000915 	stw	fp,36(sp)
    9cac:	df000904 	addi	fp,sp,36
    9cb0:	e13ffe15 	stw	r4,-8(fp)
    9cb4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9cb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    9cbc:	e0bffe17 	ldw	r2,-8(fp)
    9cc0:	1000021e 	bne	r2,zero,9ccc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    9cc4:	00800104 	movi	r2,4
    9cc8:	00004906 	br	9df0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    9ccc:	e0bfff17 	ldw	r2,-4(fp)
    9cd0:	1000021e 	bne	r2,zero,9cdc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    9cd4:	00800244 	movi	r2,9
    9cd8:	00004506 	br	9df0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    9cdc:	e0bffe17 	ldw	r2,-8(fp)
    9ce0:	10800003 	ldbu	r2,0(r2)
    9ce4:	10803fcc 	andi	r2,r2,255
    9ce8:	108000a0 	cmpeqi	r2,r2,2
    9cec:	1000021e 	bne	r2,zero,9cf8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    9cf0:	00800044 	movi	r2,1
    9cf4:	00003e06 	br	9df0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9cf8:	0005303a 	rdctl	r2,status
    9cfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d00:	e0fffc17 	ldw	r3,-16(fp)
    9d04:	00bfff84 	movi	r2,-2
    9d08:	1884703a 	and	r2,r3,r2
    9d0c:	1001703a 	wrctl	status,r2
  
  return context;
    9d10:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9d14:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    9d18:	e0bffe17 	ldw	r2,-8(fp)
    9d1c:	10c00283 	ldbu	r3,10(r2)
    9d20:	e0bfff17 	ldw	r2,-4(fp)
    9d24:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    9d28:	e0bffe17 	ldw	r2,-8(fp)
    9d2c:	108002c4 	addi	r2,r2,11
    9d30:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    9d34:	e0bfff17 	ldw	r2,-4(fp)
    9d38:	10800204 	addi	r2,r2,8
    9d3c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9d40:	e03ff705 	stb	zero,-36(fp)
    9d44:	00000b06 	br	9d74 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    9d48:	e0bff917 	ldw	r2,-28(fp)
    9d4c:	10c00044 	addi	r3,r2,1
    9d50:	e0fff915 	stw	r3,-28(fp)
    9d54:	e0fff817 	ldw	r3,-32(fp)
    9d58:	19000044 	addi	r4,r3,1
    9d5c:	e13ff815 	stw	r4,-32(fp)
    9d60:	18c00003 	ldbu	r3,0(r3)
    9d64:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    9d68:	e0bff703 	ldbu	r2,-36(fp)
    9d6c:	10800044 	addi	r2,r2,1
    9d70:	e0bff705 	stb	r2,-36(fp)
    9d74:	e0bff703 	ldbu	r2,-36(fp)
    9d78:	108000f0 	cmpltui	r2,r2,3
    9d7c:	103ff21e 	bne	r2,zero,9d48 <__alt_mem_Flash_flash_data+0xf4009d48>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    9d80:	e0bffe17 	ldw	r2,-8(fp)
    9d84:	10800117 	ldw	r2,4(r2)
    9d88:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    9d8c:	e0bffb17 	ldw	r2,-20(fp)
    9d90:	1080058b 	ldhu	r2,22(r2)
    9d94:	10bfffcc 	andi	r2,r2,65535
    9d98:	10000626 	beq	r2,zero,9db4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    9d9c:	e0bffb17 	ldw	r2,-20(fp)
    9da0:	10800417 	ldw	r2,16(r2)
    9da4:	10c00017 	ldw	r3,0(r2)
    9da8:	e0bfff17 	ldw	r2,-4(fp)
    9dac:	10c00015 	stw	r3,0(r2)
    9db0:	00000206 	br	9dbc <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    9db4:	e0bfff17 	ldw	r2,-4(fp)
    9db8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    9dbc:	e0bffb17 	ldw	r2,-20(fp)
    9dc0:	10c0058b 	ldhu	r3,22(r2)
    9dc4:	e0bfff17 	ldw	r2,-4(fp)
    9dc8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    9dcc:	e0bffb17 	ldw	r2,-20(fp)
    9dd0:	10c0050b 	ldhu	r3,20(r2)
    9dd4:	e0bfff17 	ldw	r2,-4(fp)
    9dd8:	10c0018d 	sth	r3,6(r2)
    9ddc:	e0bffa17 	ldw	r2,-24(fp)
    9de0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9de4:	e0bffd17 	ldw	r2,-12(fp)
    9de8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9dec:	0005883a 	mov	r2,zero
}
    9df0:	e037883a 	mov	sp,fp
    9df4:	df000017 	ldw	fp,0(sp)
    9df8:	dec00104 	addi	sp,sp,4
    9dfc:	f800283a 	ret

00009e00 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    9e00:	defffb04 	addi	sp,sp,-20
    9e04:	dfc00415 	stw	ra,16(sp)
    9e08:	df000315 	stw	fp,12(sp)
    9e0c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    9e10:	010000b4 	movhi	r4,2
    9e14:	213fca04 	addi	r4,r4,-216
    9e18:	01407804 	movi	r5,480
    9e1c:	00063e40 	call	63e4 <OS_MemClr>
    pq1 = &OSQTbl[0];
    9e20:	008000b4 	movhi	r2,2
    9e24:	10bfca04 	addi	r2,r2,-216
    9e28:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    9e2c:	008000b4 	movhi	r2,2
    9e30:	10bfd004 	addi	r2,r2,-192
    9e34:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9e38:	e03ffd0d 	sth	zero,-12(fp)
    9e3c:	00000c06 	br	9e70 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    9e40:	e0bffe17 	ldw	r2,-8(fp)
    9e44:	e0ffff17 	ldw	r3,-4(fp)
    9e48:	10c00015 	stw	r3,0(r2)
        pq1++;
    9e4c:	e0bffe17 	ldw	r2,-8(fp)
    9e50:	10800604 	addi	r2,r2,24
    9e54:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    9e58:	e0bfff17 	ldw	r2,-4(fp)
    9e5c:	10800604 	addi	r2,r2,24
    9e60:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    9e64:	e0bffd0b 	ldhu	r2,-12(fp)
    9e68:	10800044 	addi	r2,r2,1
    9e6c:	e0bffd0d 	sth	r2,-12(fp)
    9e70:	e0bffd0b 	ldhu	r2,-12(fp)
    9e74:	108004f0 	cmpltui	r2,r2,19
    9e78:	103ff11e 	bne	r2,zero,9e40 <__alt_mem_Flash_flash_data+0xf4009e40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    9e7c:	e0bffe17 	ldw	r2,-8(fp)
    9e80:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    9e84:	00800074 	movhi	r2,1
    9e88:	1091cb04 	addi	r2,r2,18220
    9e8c:	00c000b4 	movhi	r3,2
    9e90:	18ffca04 	addi	r3,r3,-216
    9e94:	10c00015 	stw	r3,0(r2)
#endif
}
    9e98:	e037883a 	mov	sp,fp
    9e9c:	dfc00117 	ldw	ra,4(sp)
    9ea0:	df000017 	ldw	fp,0(sp)
    9ea4:	dec00204 	addi	sp,sp,8
    9ea8:	f800283a 	ret

00009eac <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    9eac:	defffa04 	addi	sp,sp,-24
    9eb0:	df000515 	stw	fp,20(sp)
    9eb4:	df000504 	addi	fp,sp,20
    9eb8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9ebc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    9ec0:	e0bfff17 	ldw	r2,-4(fp)
    9ec4:	1000021e 	bne	r2,zero,9ed0 <OSSemAccept+0x24>
        return (0);
    9ec8:	0005883a 	mov	r2,zero
    9ecc:	00001f06 	br	9f4c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    9ed0:	e0bfff17 	ldw	r2,-4(fp)
    9ed4:	10800003 	ldbu	r2,0(r2)
    9ed8:	10803fcc 	andi	r2,r2,255
    9edc:	108000e0 	cmpeqi	r2,r2,3
    9ee0:	1000021e 	bne	r2,zero,9eec <OSSemAccept+0x40>
        return (0);
    9ee4:	0005883a 	mov	r2,zero
    9ee8:	00001806 	br	9f4c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9eec:	0005303a 	rdctl	r2,status
    9ef0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9ef4:	e0fffd17 	ldw	r3,-12(fp)
    9ef8:	00bfff84 	movi	r2,-2
    9efc:	1884703a 	and	r2,r3,r2
    9f00:	1001703a 	wrctl	status,r2
  
  return context;
    9f04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9f08:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    9f0c:	e0bfff17 	ldw	r2,-4(fp)
    9f10:	1080020b 	ldhu	r2,8(r2)
    9f14:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    9f18:	e0bffc0b 	ldhu	r2,-16(fp)
    9f1c:	10000626 	beq	r2,zero,9f38 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    9f20:	e0bfff17 	ldw	r2,-4(fp)
    9f24:	1080020b 	ldhu	r2,8(r2)
    9f28:	10bfffc4 	addi	r2,r2,-1
    9f2c:	1007883a 	mov	r3,r2
    9f30:	e0bfff17 	ldw	r2,-4(fp)
    9f34:	10c0020d 	sth	r3,8(r2)
    9f38:	e0bffb17 	ldw	r2,-20(fp)
    9f3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f40:	e0bffe17 	ldw	r2,-8(fp)
    9f44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    9f48:	e0bffc0b 	ldhu	r2,-16(fp)
}
    9f4c:	e037883a 	mov	sp,fp
    9f50:	df000017 	ldw	fp,0(sp)
    9f54:	dec00104 	addi	sp,sp,4
    9f58:	f800283a 	ret

00009f5c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    9f5c:	defff904 	addi	sp,sp,-28
    9f60:	dfc00615 	stw	ra,24(sp)
    9f64:	df000515 	stw	fp,20(sp)
    9f68:	df000504 	addi	fp,sp,20
    9f6c:	2005883a 	mov	r2,r4
    9f70:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    9f74:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    9f78:	00800074 	movhi	r2,1
    9f7c:	1091ce04 	addi	r2,r2,18232
    9f80:	10800003 	ldbu	r2,0(r2)
    9f84:	10803fcc 	andi	r2,r2,255
    9f88:	10000226 	beq	r2,zero,9f94 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    9f8c:	0005883a 	mov	r2,zero
    9f90:	00002d06 	br	a048 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f94:	0005303a 	rdctl	r2,status
    9f98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f9c:	e0fffd17 	ldw	r3,-12(fp)
    9fa0:	00bfff84 	movi	r2,-2
    9fa4:	1884703a 	and	r2,r3,r2
    9fa8:	1001703a 	wrctl	status,r2
  
  return context;
    9fac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    9fb0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    9fb4:	00800074 	movhi	r2,1
    9fb8:	1091cd04 	addi	r2,r2,18228
    9fbc:	10800017 	ldw	r2,0(r2)
    9fc0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    9fc4:	00800074 	movhi	r2,1
    9fc8:	1091cd04 	addi	r2,r2,18228
    9fcc:	10800017 	ldw	r2,0(r2)
    9fd0:	10000726 	beq	r2,zero,9ff0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    9fd4:	00800074 	movhi	r2,1
    9fd8:	1091cd04 	addi	r2,r2,18228
    9fdc:	10800017 	ldw	r2,0(r2)
    9fe0:	10c00117 	ldw	r3,4(r2)
    9fe4:	00800074 	movhi	r2,1
    9fe8:	1091cd04 	addi	r2,r2,18228
    9fec:	10c00015 	stw	r3,0(r2)
    9ff0:	e0bffb17 	ldw	r2,-20(fp)
    9ff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9ff8:	e0bffe17 	ldw	r2,-8(fp)
    9ffc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    a000:	e0bffc17 	ldw	r2,-16(fp)
    a004:	10000f26 	beq	r2,zero,a044 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    a008:	e0bffc17 	ldw	r2,-16(fp)
    a00c:	00c000c4 	movi	r3,3
    a010:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    a014:	e0bffc17 	ldw	r2,-16(fp)
    a018:	e0ffff0b 	ldhu	r3,-4(fp)
    a01c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    a020:	e0bffc17 	ldw	r2,-16(fp)
    a024:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    a028:	e0bffc17 	ldw	r2,-16(fp)
    a02c:	00c00fc4 	movi	r3,63
    a030:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    a034:	e0bffc17 	ldw	r2,-16(fp)
    a038:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    a03c:	e13ffc17 	ldw	r4,-16(fp)
    a040:	00060200 	call	6020 <OS_EventWaitListInit>
    }
    return (pevent);
    a044:	e0bffc17 	ldw	r2,-16(fp)
}
    a048:	e037883a 	mov	sp,fp
    a04c:	dfc00117 	ldw	ra,4(sp)
    a050:	df000017 	ldw	fp,0(sp)
    a054:	dec00204 	addi	sp,sp,8
    a058:	f800283a 	ret

0000a05c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a05c:	defff304 	addi	sp,sp,-52
    a060:	dfc00c15 	stw	ra,48(sp)
    a064:	df000b15 	stw	fp,44(sp)
    a068:	df000b04 	addi	fp,sp,44
    a06c:	e13ffd15 	stw	r4,-12(fp)
    a070:	2805883a 	mov	r2,r5
    a074:	e1bfff15 	stw	r6,-4(fp)
    a078:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a07c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    a080:	e0bfff17 	ldw	r2,-4(fp)
    a084:	1000021e 	bne	r2,zero,a090 <OSSemDel+0x34>
        return (pevent);
    a088:	e0bffd17 	ldw	r2,-12(fp)
    a08c:	00008806 	br	a2b0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a090:	e0bffd17 	ldw	r2,-12(fp)
    a094:	1000051e 	bne	r2,zero,a0ac <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a098:	e0bfff17 	ldw	r2,-4(fp)
    a09c:	00c00104 	movi	r3,4
    a0a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a0a4:	e0bffd17 	ldw	r2,-12(fp)
    a0a8:	00008106 	br	a2b0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    a0ac:	e0bffd17 	ldw	r2,-12(fp)
    a0b0:	10800003 	ldbu	r2,0(r2)
    a0b4:	10803fcc 	andi	r2,r2,255
    a0b8:	108000e0 	cmpeqi	r2,r2,3
    a0bc:	1000051e 	bne	r2,zero,a0d4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a0c0:	e0bfff17 	ldw	r2,-4(fp)
    a0c4:	00c00044 	movi	r3,1
    a0c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a0cc:	e0bffd17 	ldw	r2,-12(fp)
    a0d0:	00007706 	br	a2b0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    a0d4:	00800074 	movhi	r2,1
    a0d8:	1091ce04 	addi	r2,r2,18232
    a0dc:	10800003 	ldbu	r2,0(r2)
    a0e0:	10803fcc 	andi	r2,r2,255
    a0e4:	10000526 	beq	r2,zero,a0fc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    a0e8:	e0bfff17 	ldw	r2,-4(fp)
    a0ec:	00c003c4 	movi	r3,15
    a0f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    a0f4:	e0bffd17 	ldw	r2,-12(fp)
    a0f8:	00006d06 	br	a2b0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0fc:	0005303a 	rdctl	r2,status
    a100:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a104:	e0fff817 	ldw	r3,-32(fp)
    a108:	00bfff84 	movi	r2,-2
    a10c:	1884703a 	and	r2,r3,r2
    a110:	1001703a 	wrctl	status,r2
  
  return context;
    a114:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a118:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    a11c:	e0bffd17 	ldw	r2,-12(fp)
    a120:	10800283 	ldbu	r2,10(r2)
    a124:	10803fcc 	andi	r2,r2,255
    a128:	10000326 	beq	r2,zero,a138 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    a12c:	00800044 	movi	r2,1
    a130:	e0bff505 	stb	r2,-44(fp)
    a134:	00000106 	br	a13c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    a138:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    a13c:	e0bffe03 	ldbu	r2,-8(fp)
    a140:	10000326 	beq	r2,zero,a150 <OSSemDel+0xf4>
    a144:	10800060 	cmpeqi	r2,r2,1
    a148:	10002c1e 	bne	r2,zero,a1fc <OSSemDel+0x1a0>
    a14c:	00004d06 	br	a284 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    a150:	e0bff503 	ldbu	r2,-44(fp)
    a154:	10001a1e 	bne	r2,zero,a1c0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    a158:	e0bffd17 	ldw	r2,-12(fp)
    a15c:	00c00fc4 	movi	r3,63
    a160:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    a164:	e0bffd17 	ldw	r2,-12(fp)
    a168:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    a16c:	e0bffd17 	ldw	r2,-12(fp)
    a170:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    a174:	00800074 	movhi	r2,1
    a178:	1091cd04 	addi	r2,r2,18228
    a17c:	10c00017 	ldw	r3,0(r2)
    a180:	e0bffd17 	ldw	r2,-12(fp)
    a184:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    a188:	e0bffd17 	ldw	r2,-12(fp)
    a18c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    a190:	00800074 	movhi	r2,1
    a194:	1091cd04 	addi	r2,r2,18228
    a198:	e0fffd17 	ldw	r3,-12(fp)
    a19c:	10c00015 	stw	r3,0(r2)
    a1a0:	e0bff717 	ldw	r2,-36(fp)
    a1a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a1a8:	e0bff917 	ldw	r2,-28(fp)
    a1ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    a1b0:	e0bfff17 	ldw	r2,-4(fp)
    a1b4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    a1b8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    a1bc:	00003b06 	br	a2ac <OSSemDel+0x250>
    a1c0:	e0bff717 	ldw	r2,-36(fp)
    a1c4:	e0bffa15 	stw	r2,-24(fp)
    a1c8:	e0bffa17 	ldw	r2,-24(fp)
    a1cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    a1d0:	e0bfff17 	ldw	r2,-4(fp)
    a1d4:	00c01244 	movi	r3,73
    a1d8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    a1dc:	e0bffd17 	ldw	r2,-12(fp)
    a1e0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    a1e4:	00003106 	br	a2ac <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    a1e8:	e13ffd17 	ldw	r4,-12(fp)
    a1ec:	000b883a 	mov	r5,zero
    a1f0:	01800044 	movi	r6,1
    a1f4:	000f883a 	mov	r7,zero
    a1f8:	0005a800 	call	5a80 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    a1fc:	e0bffd17 	ldw	r2,-12(fp)
    a200:	10800283 	ldbu	r2,10(r2)
    a204:	10803fcc 	andi	r2,r2,255
    a208:	103ff71e 	bne	r2,zero,a1e8 <__alt_mem_Flash_flash_data+0xf400a1e8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    a20c:	e0bffd17 	ldw	r2,-12(fp)
    a210:	00c00fc4 	movi	r3,63
    a214:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    a218:	e0bffd17 	ldw	r2,-12(fp)
    a21c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    a220:	e0bffd17 	ldw	r2,-12(fp)
    a224:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    a228:	00800074 	movhi	r2,1
    a22c:	1091cd04 	addi	r2,r2,18228
    a230:	10c00017 	ldw	r3,0(r2)
    a234:	e0bffd17 	ldw	r2,-12(fp)
    a238:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    a23c:	e0bffd17 	ldw	r2,-12(fp)
    a240:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    a244:	00800074 	movhi	r2,1
    a248:	1091cd04 	addi	r2,r2,18228
    a24c:	e0fffd17 	ldw	r3,-12(fp)
    a250:	10c00015 	stw	r3,0(r2)
    a254:	e0bff717 	ldw	r2,-36(fp)
    a258:	e0bffb15 	stw	r2,-20(fp)
    a25c:	e0bffb17 	ldw	r2,-20(fp)
    a260:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    a264:	e0bff503 	ldbu	r2,-44(fp)
    a268:	10800058 	cmpnei	r2,r2,1
    a26c:	1000011e 	bne	r2,zero,a274 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    a270:	00064980 	call	6498 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    a274:	e0bfff17 	ldw	r2,-4(fp)
    a278:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    a27c:	e03ff615 	stw	zero,-40(fp)
             break;
    a280:	00000a06 	br	a2ac <OSSemDel+0x250>
    a284:	e0bff717 	ldw	r2,-36(fp)
    a288:	e0bffc15 	stw	r2,-16(fp)
    a28c:	e0bffc17 	ldw	r2,-16(fp)
    a290:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    a294:	e0bfff17 	ldw	r2,-4(fp)
    a298:	00c001c4 	movi	r3,7
    a29c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    a2a0:	e0bffd17 	ldw	r2,-12(fp)
    a2a4:	e0bff615 	stw	r2,-40(fp)
             break;
    a2a8:	0001883a 	nop
    }
    return (pevent_return);
    a2ac:	e0bff617 	ldw	r2,-40(fp)
}
    a2b0:	e037883a 	mov	sp,fp
    a2b4:	dfc00117 	ldw	ra,4(sp)
    a2b8:	df000017 	ldw	fp,0(sp)
    a2bc:	dec00204 	addi	sp,sp,8
    a2c0:	f800283a 	ret

0000a2c4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    a2c4:	defff504 	addi	sp,sp,-44
    a2c8:	dfc00a15 	stw	ra,40(sp)
    a2cc:	df000915 	stw	fp,36(sp)
    a2d0:	df000904 	addi	fp,sp,36
    a2d4:	e13ffd15 	stw	r4,-12(fp)
    a2d8:	2805883a 	mov	r2,r5
    a2dc:	e1bfff15 	stw	r6,-4(fp)
    a2e0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a2e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a2e8:	e0bfff17 	ldw	r2,-4(fp)
    a2ec:	1000011e 	bne	r2,zero,a2f4 <OSSemPend+0x30>
        return;
    a2f0:	00008906 	br	a518 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a2f4:	e0bffd17 	ldw	r2,-12(fp)
    a2f8:	1000041e 	bne	r2,zero,a30c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    a2fc:	e0bfff17 	ldw	r2,-4(fp)
    a300:	00c00104 	movi	r3,4
    a304:	10c00005 	stb	r3,0(r2)
        return;
    a308:	00008306 	br	a518 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a30c:	e0bffd17 	ldw	r2,-12(fp)
    a310:	10800003 	ldbu	r2,0(r2)
    a314:	10803fcc 	andi	r2,r2,255
    a318:	108000e0 	cmpeqi	r2,r2,3
    a31c:	1000041e 	bne	r2,zero,a330 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    a320:	e0bfff17 	ldw	r2,-4(fp)
    a324:	00c00044 	movi	r3,1
    a328:	10c00005 	stb	r3,0(r2)
        return;
    a32c:	00007a06 	br	a518 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    a330:	00800074 	movhi	r2,1
    a334:	1091ce04 	addi	r2,r2,18232
    a338:	10800003 	ldbu	r2,0(r2)
    a33c:	10803fcc 	andi	r2,r2,255
    a340:	10000426 	beq	r2,zero,a354 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    a344:	e0bfff17 	ldw	r2,-4(fp)
    a348:	00c00084 	movi	r3,2
    a34c:	10c00005 	stb	r3,0(r2)
        return;
    a350:	00007106 	br	a518 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    a354:	00800074 	movhi	r2,1
    a358:	1091c004 	addi	r2,r2,18176
    a35c:	10800003 	ldbu	r2,0(r2)
    a360:	10803fcc 	andi	r2,r2,255
    a364:	10000426 	beq	r2,zero,a378 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    a368:	e0bfff17 	ldw	r2,-4(fp)
    a36c:	00c00344 	movi	r3,13
    a370:	10c00005 	stb	r3,0(r2)
        return;
    a374:	00006806 	br	a518 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a378:	0005303a 	rdctl	r2,status
    a37c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a380:	e0fff817 	ldw	r3,-32(fp)
    a384:	00bfff84 	movi	r2,-2
    a388:	1884703a 	and	r2,r3,r2
    a38c:	1001703a 	wrctl	status,r2
  
  return context;
    a390:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    a394:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    a398:	e0bffd17 	ldw	r2,-12(fp)
    a39c:	1080020b 	ldhu	r2,8(r2)
    a3a0:	10bfffcc 	andi	r2,r2,65535
    a3a4:	10000d26 	beq	r2,zero,a3dc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    a3a8:	e0bffd17 	ldw	r2,-12(fp)
    a3ac:	1080020b 	ldhu	r2,8(r2)
    a3b0:	10bfffc4 	addi	r2,r2,-1
    a3b4:	1007883a 	mov	r3,r2
    a3b8:	e0bffd17 	ldw	r2,-12(fp)
    a3bc:	10c0020d 	sth	r3,8(r2)
    a3c0:	e0bff717 	ldw	r2,-36(fp)
    a3c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a3c8:	e0bff917 	ldw	r2,-28(fp)
    a3cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    a3d0:	e0bfff17 	ldw	r2,-4(fp)
    a3d4:	10000005 	stb	zero,0(r2)
        return;
    a3d8:	00004f06 	br	a518 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    a3dc:	00800074 	movhi	r2,1
    a3e0:	1091cf04 	addi	r2,r2,18236
    a3e4:	10c00017 	ldw	r3,0(r2)
    a3e8:	00800074 	movhi	r2,1
    a3ec:	1091cf04 	addi	r2,r2,18236
    a3f0:	10800017 	ldw	r2,0(r2)
    a3f4:	10800c03 	ldbu	r2,48(r2)
    a3f8:	10800054 	ori	r2,r2,1
    a3fc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    a400:	00800074 	movhi	r2,1
    a404:	1091cf04 	addi	r2,r2,18236
    a408:	10800017 	ldw	r2,0(r2)
    a40c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    a410:	00800074 	movhi	r2,1
    a414:	1091cf04 	addi	r2,r2,18236
    a418:	10800017 	ldw	r2,0(r2)
    a41c:	e0fffe0b 	ldhu	r3,-8(fp)
    a420:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    a424:	e13ffd17 	ldw	r4,-12(fp)
    a428:	0005c180 	call	5c18 <OS_EventTaskWait>
    a42c:	e0bff717 	ldw	r2,-36(fp)
    a430:	e0bffa15 	stw	r2,-24(fp)
    a434:	e0bffa17 	ldw	r2,-24(fp)
    a438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    a43c:	00064980 	call	6498 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a440:	0005303a 	rdctl	r2,status
    a444:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a448:	e0fffb17 	ldw	r3,-20(fp)
    a44c:	00bfff84 	movi	r2,-2
    a450:	1884703a 	and	r2,r3,r2
    a454:	1001703a 	wrctl	status,r2
  
  return context;
    a458:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    a45c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    a460:	00800074 	movhi	r2,1
    a464:	1091cf04 	addi	r2,r2,18236
    a468:	10800017 	ldw	r2,0(r2)
    a46c:	10800c43 	ldbu	r2,49(r2)
    a470:	10803fcc 	andi	r2,r2,255
    a474:	10000326 	beq	r2,zero,a484 <OSSemPend+0x1c0>
    a478:	108000a0 	cmpeqi	r2,r2,2
    a47c:	1000041e 	bne	r2,zero,a490 <OSSemPend+0x1cc>
    a480:	00000706 	br	a4a0 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    a484:	e0bfff17 	ldw	r2,-4(fp)
    a488:	10000005 	stb	zero,0(r2)
             break;
    a48c:	00000e06 	br	a4c8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    a490:	e0bfff17 	ldw	r2,-4(fp)
    a494:	00c00384 	movi	r3,14
    a498:	10c00005 	stb	r3,0(r2)
             break;
    a49c:	00000a06 	br	a4c8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    a4a0:	00800074 	movhi	r2,1
    a4a4:	1091cf04 	addi	r2,r2,18236
    a4a8:	10800017 	ldw	r2,0(r2)
    a4ac:	1009883a 	mov	r4,r2
    a4b0:	e17ffd17 	ldw	r5,-12(fp)
    a4b4:	0005e700 	call	5e70 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    a4b8:	e0bfff17 	ldw	r2,-4(fp)
    a4bc:	00c00284 	movi	r3,10
    a4c0:	10c00005 	stb	r3,0(r2)
             break;
    a4c4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    a4c8:	00800074 	movhi	r2,1
    a4cc:	1091cf04 	addi	r2,r2,18236
    a4d0:	10800017 	ldw	r2,0(r2)
    a4d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    a4d8:	00800074 	movhi	r2,1
    a4dc:	1091cf04 	addi	r2,r2,18236
    a4e0:	10800017 	ldw	r2,0(r2)
    a4e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    a4e8:	00800074 	movhi	r2,1
    a4ec:	1091cf04 	addi	r2,r2,18236
    a4f0:	10800017 	ldw	r2,0(r2)
    a4f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    a4f8:	00800074 	movhi	r2,1
    a4fc:	1091cf04 	addi	r2,r2,18236
    a500:	10800017 	ldw	r2,0(r2)
    a504:	10000815 	stw	zero,32(r2)
    a508:	e0bff717 	ldw	r2,-36(fp)
    a50c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a510:	e0bffc17 	ldw	r2,-16(fp)
    a514:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    a518:	e037883a 	mov	sp,fp
    a51c:	dfc00117 	ldw	ra,4(sp)
    a520:	df000017 	ldw	fp,0(sp)
    a524:	dec00204 	addi	sp,sp,8
    a528:	f800283a 	ret

0000a52c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    a52c:	defff604 	addi	sp,sp,-40
    a530:	dfc00915 	stw	ra,36(sp)
    a534:	df000815 	stw	fp,32(sp)
    a538:	df000804 	addi	fp,sp,32
    a53c:	e13ffd15 	stw	r4,-12(fp)
    a540:	2805883a 	mov	r2,r5
    a544:	e1bfff15 	stw	r6,-4(fp)
    a548:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a54c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a550:	e0bfff17 	ldw	r2,-4(fp)
    a554:	1000021e 	bne	r2,zero,a560 <OSSemPendAbort+0x34>
        return (0);
    a558:	0005883a 	mov	r2,zero
    a55c:	00004906 	br	a684 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a560:	e0bffd17 	ldw	r2,-12(fp)
    a564:	1000051e 	bne	r2,zero,a57c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    a568:	e0bfff17 	ldw	r2,-4(fp)
    a56c:	00c00104 	movi	r3,4
    a570:	10c00005 	stb	r3,0(r2)
        return (0);
    a574:	0005883a 	mov	r2,zero
    a578:	00004206 	br	a684 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a57c:	e0bffd17 	ldw	r2,-12(fp)
    a580:	10800003 	ldbu	r2,0(r2)
    a584:	10803fcc 	andi	r2,r2,255
    a588:	108000e0 	cmpeqi	r2,r2,3
    a58c:	1000051e 	bne	r2,zero,a5a4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    a590:	e0bfff17 	ldw	r2,-4(fp)
    a594:	00c00044 	movi	r3,1
    a598:	10c00005 	stb	r3,0(r2)
        return (0);
    a59c:	0005883a 	mov	r2,zero
    a5a0:	00003806 	br	a684 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a5a4:	0005303a 	rdctl	r2,status
    a5a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5ac:	e0fffa17 	ldw	r3,-24(fp)
    a5b0:	00bfff84 	movi	r2,-2
    a5b4:	1884703a 	and	r2,r3,r2
    a5b8:	1001703a 	wrctl	status,r2
  
  return context;
    a5bc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    a5c0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    a5c4:	e0bffd17 	ldw	r2,-12(fp)
    a5c8:	10800283 	ldbu	r2,10(r2)
    a5cc:	10803fcc 	andi	r2,r2,255
    a5d0:	10002526 	beq	r2,zero,a668 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    a5d4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    a5d8:	e0bffe03 	ldbu	r2,-8(fp)
    a5dc:	10800060 	cmpeqi	r2,r2,1
    a5e0:	10000e26 	beq	r2,zero,a61c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    a5e4:	00000806 	br	a608 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    a5e8:	e13ffd17 	ldw	r4,-12(fp)
    a5ec:	000b883a 	mov	r5,zero
    a5f0:	01800044 	movi	r6,1
    a5f4:	01c00084 	movi	r7,2
    a5f8:	0005a800 	call	5a80 <OS_EventTaskRdy>
                     nbr_tasks++;
    a5fc:	e0bff803 	ldbu	r2,-32(fp)
    a600:	10800044 	addi	r2,r2,1
    a604:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    a608:	e0bffd17 	ldw	r2,-12(fp)
    a60c:	10800283 	ldbu	r2,10(r2)
    a610:	10803fcc 	andi	r2,r2,255
    a614:	103ff41e 	bne	r2,zero,a5e8 <__alt_mem_Flash_flash_data+0xf400a5e8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    a618:	00000906 	br	a640 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    a61c:	e13ffd17 	ldw	r4,-12(fp)
    a620:	000b883a 	mov	r5,zero
    a624:	01800044 	movi	r6,1
    a628:	01c00084 	movi	r7,2
    a62c:	0005a800 	call	5a80 <OS_EventTaskRdy>
                 nbr_tasks++;
    a630:	e0bff803 	ldbu	r2,-32(fp)
    a634:	10800044 	addi	r2,r2,1
    a638:	e0bff805 	stb	r2,-32(fp)
                 break;
    a63c:	0001883a 	nop
    a640:	e0bff917 	ldw	r2,-28(fp)
    a644:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a648:	e0bffb17 	ldw	r2,-20(fp)
    a64c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    a650:	00064980 	call	6498 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    a654:	e0bfff17 	ldw	r2,-4(fp)
    a658:	00c00384 	movi	r3,14
    a65c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    a660:	e0bff803 	ldbu	r2,-32(fp)
    a664:	00000706 	br	a684 <OSSemPendAbort+0x158>
    a668:	e0bff917 	ldw	r2,-28(fp)
    a66c:	e0bffc15 	stw	r2,-16(fp)
    a670:	e0bffc17 	ldw	r2,-16(fp)
    a674:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    a678:	e0bfff17 	ldw	r2,-4(fp)
    a67c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    a680:	0005883a 	mov	r2,zero
}
    a684:	e037883a 	mov	sp,fp
    a688:	dfc00117 	ldw	ra,4(sp)
    a68c:	df000017 	ldw	fp,0(sp)
    a690:	dec00204 	addi	sp,sp,8
    a694:	f800283a 	ret

0000a698 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    a698:	defff804 	addi	sp,sp,-32
    a69c:	dfc00715 	stw	ra,28(sp)
    a6a0:	df000615 	stw	fp,24(sp)
    a6a4:	df000604 	addi	fp,sp,24
    a6a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a6ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	1000021e 	bne	r2,zero,a6c0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    a6b8:	00800104 	movi	r2,4
    a6bc:	00003506 	br	a794 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a6c0:	e0bfff17 	ldw	r2,-4(fp)
    a6c4:	10800003 	ldbu	r2,0(r2)
    a6c8:	10803fcc 	andi	r2,r2,255
    a6cc:	108000e0 	cmpeqi	r2,r2,3
    a6d0:	1000021e 	bne	r2,zero,a6dc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    a6d4:	00800044 	movi	r2,1
    a6d8:	00002e06 	br	a794 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6dc:	0005303a 	rdctl	r2,status
    a6e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6e4:	e0fffb17 	ldw	r3,-20(fp)
    a6e8:	00bfff84 	movi	r2,-2
    a6ec:	1884703a 	and	r2,r3,r2
    a6f0:	1001703a 	wrctl	status,r2
  
  return context;
    a6f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a6f8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    a6fc:	e0bfff17 	ldw	r2,-4(fp)
    a700:	10800283 	ldbu	r2,10(r2)
    a704:	10803fcc 	andi	r2,r2,255
    a708:	10000c26 	beq	r2,zero,a73c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    a70c:	e13fff17 	ldw	r4,-4(fp)
    a710:	000b883a 	mov	r5,zero
    a714:	01800044 	movi	r6,1
    a718:	000f883a 	mov	r7,zero
    a71c:	0005a800 	call	5a80 <OS_EventTaskRdy>
    a720:	e0bffa17 	ldw	r2,-24(fp)
    a724:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a728:	e0bffc17 	ldw	r2,-16(fp)
    a72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    a730:	00064980 	call	6498 <OS_Sched>
        return (OS_ERR_NONE);
    a734:	0005883a 	mov	r2,zero
    a738:	00001606 	br	a794 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    a73c:	e0bfff17 	ldw	r2,-4(fp)
    a740:	1080020b 	ldhu	r2,8(r2)
    a744:	10ffffcc 	andi	r3,r2,65535
    a748:	00bfffd4 	movui	r2,65535
    a74c:	18800c26 	beq	r3,r2,a780 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    a750:	e0bfff17 	ldw	r2,-4(fp)
    a754:	1080020b 	ldhu	r2,8(r2)
    a758:	10800044 	addi	r2,r2,1
    a75c:	1007883a 	mov	r3,r2
    a760:	e0bfff17 	ldw	r2,-4(fp)
    a764:	10c0020d 	sth	r3,8(r2)
    a768:	e0bffa17 	ldw	r2,-24(fp)
    a76c:	e0bffd15 	stw	r2,-12(fp)
    a770:	e0bffd17 	ldw	r2,-12(fp)
    a774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    a778:	0005883a 	mov	r2,zero
    a77c:	00000506 	br	a794 <OSSemPost+0xfc>
    a780:	e0bffa17 	ldw	r2,-24(fp)
    a784:	e0bffe15 	stw	r2,-8(fp)
    a788:	e0bffe17 	ldw	r2,-8(fp)
    a78c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    a790:	00800c84 	movi	r2,50
}
    a794:	e037883a 	mov	sp,fp
    a798:	dfc00117 	ldw	ra,4(sp)
    a79c:	df000017 	ldw	fp,0(sp)
    a7a0:	dec00204 	addi	sp,sp,8
    a7a4:	f800283a 	ret

0000a7a8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    a7a8:	defff704 	addi	sp,sp,-36
    a7ac:	df000815 	stw	fp,32(sp)
    a7b0:	df000804 	addi	fp,sp,32
    a7b4:	e13ffe15 	stw	r4,-8(fp)
    a7b8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    a7bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    a7c0:	e0bffe17 	ldw	r2,-8(fp)
    a7c4:	1000021e 	bne	r2,zero,a7d0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    a7c8:	00800104 	movi	r2,4
    a7cc:	00003606 	br	a8a8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    a7d0:	e0bfff17 	ldw	r2,-4(fp)
    a7d4:	1000021e 	bne	r2,zero,a7e0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    a7d8:	00800244 	movi	r2,9
    a7dc:	00003206 	br	a8a8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    a7e0:	e0bffe17 	ldw	r2,-8(fp)
    a7e4:	10800003 	ldbu	r2,0(r2)
    a7e8:	10803fcc 	andi	r2,r2,255
    a7ec:	108000e0 	cmpeqi	r2,r2,3
    a7f0:	1000021e 	bne	r2,zero,a7fc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    a7f4:	00800044 	movi	r2,1
    a7f8:	00002b06 	br	a8a8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7fc:	0005303a 	rdctl	r2,status
    a800:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a804:	e0fffc17 	ldw	r3,-16(fp)
    a808:	00bfff84 	movi	r2,-2
    a80c:	1884703a 	and	r2,r3,r2
    a810:	1001703a 	wrctl	status,r2
  
  return context;
    a814:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    a818:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    a81c:	e0bffe17 	ldw	r2,-8(fp)
    a820:	10c00283 	ldbu	r3,10(r2)
    a824:	e0bfff17 	ldw	r2,-4(fp)
    a828:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    a82c:	e0bffe17 	ldw	r2,-8(fp)
    a830:	108002c4 	addi	r2,r2,11
    a834:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    a838:	e0bfff17 	ldw	r2,-4(fp)
    a83c:	10800084 	addi	r2,r2,2
    a840:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a844:	e03ffa05 	stb	zero,-24(fp)
    a848:	00000b06 	br	a878 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    a84c:	e0bff917 	ldw	r2,-28(fp)
    a850:	10c00044 	addi	r3,r2,1
    a854:	e0fff915 	stw	r3,-28(fp)
    a858:	e0fff817 	ldw	r3,-32(fp)
    a85c:	19000044 	addi	r4,r3,1
    a860:	e13ff815 	stw	r4,-32(fp)
    a864:	18c00003 	ldbu	r3,0(r3)
    a868:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    a86c:	e0bffa03 	ldbu	r2,-24(fp)
    a870:	10800044 	addi	r2,r2,1
    a874:	e0bffa05 	stb	r2,-24(fp)
    a878:	e0bffa03 	ldbu	r2,-24(fp)
    a87c:	108000f0 	cmpltui	r2,r2,3
    a880:	103ff21e 	bne	r2,zero,a84c <__alt_mem_Flash_flash_data+0xf400a84c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    a884:	e0bffe17 	ldw	r2,-8(fp)
    a888:	10c0020b 	ldhu	r3,8(r2)
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	10c0000d 	sth	r3,0(r2)
    a894:	e0bffb17 	ldw	r2,-20(fp)
    a898:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a89c:	e0bffd17 	ldw	r2,-12(fp)
    a8a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a8a4:	0005883a 	mov	r2,zero
}
    a8a8:	e037883a 	mov	sp,fp
    a8ac:	df000017 	ldw	fp,0(sp)
    a8b0:	dec00104 	addi	sp,sp,4
    a8b4:	f800283a 	ret

0000a8b8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    a8b8:	defff904 	addi	sp,sp,-28
    a8bc:	df000615 	stw	fp,24(sp)
    a8c0:	df000604 	addi	fp,sp,24
    a8c4:	e13ffd15 	stw	r4,-12(fp)
    a8c8:	2805883a 	mov	r2,r5
    a8cc:	e1bfff15 	stw	r6,-4(fp)
    a8d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a8d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    a8d8:	e0bfff17 	ldw	r2,-4(fp)
    a8dc:	1000011e 	bne	r2,zero,a8e4 <OSSemSet+0x2c>
        return;
    a8e0:	00003006 	br	a9a4 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    a8e4:	e0bffd17 	ldw	r2,-12(fp)
    a8e8:	1000041e 	bne	r2,zero,a8fc <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    a8ec:	e0bfff17 	ldw	r2,-4(fp)
    a8f0:	00c00104 	movi	r3,4
    a8f4:	10c00005 	stb	r3,0(r2)
        return;
    a8f8:	00002a06 	br	a9a4 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    a8fc:	e0bffd17 	ldw	r2,-12(fp)
    a900:	10800003 	ldbu	r2,0(r2)
    a904:	10803fcc 	andi	r2,r2,255
    a908:	108000e0 	cmpeqi	r2,r2,3
    a90c:	1000041e 	bne	r2,zero,a920 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    a910:	e0bfff17 	ldw	r2,-4(fp)
    a914:	00c00044 	movi	r3,1
    a918:	10c00005 	stb	r3,0(r2)
        return;
    a91c:	00002106 	br	a9a4 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a920:	0005303a 	rdctl	r2,status
    a924:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a928:	e0fffb17 	ldw	r3,-20(fp)
    a92c:	00bfff84 	movi	r2,-2
    a930:	1884703a 	and	r2,r3,r2
    a934:	1001703a 	wrctl	status,r2
  
  return context;
    a938:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    a93c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    a940:	e0bfff17 	ldw	r2,-4(fp)
    a944:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    a948:	e0bffd17 	ldw	r2,-12(fp)
    a94c:	1080020b 	ldhu	r2,8(r2)
    a950:	10bfffcc 	andi	r2,r2,65535
    a954:	10000426 	beq	r2,zero,a968 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    a958:	e0bffd17 	ldw	r2,-12(fp)
    a95c:	e0fffe0b 	ldhu	r3,-8(fp)
    a960:	10c0020d 	sth	r3,8(r2)
    a964:	00000b06 	br	a994 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    a968:	e0bffd17 	ldw	r2,-12(fp)
    a96c:	10800283 	ldbu	r2,10(r2)
    a970:	10803fcc 	andi	r2,r2,255
    a974:	1000041e 	bne	r2,zero,a988 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    a978:	e0bffd17 	ldw	r2,-12(fp)
    a97c:	e0fffe0b 	ldhu	r3,-8(fp)
    a980:	10c0020d 	sth	r3,8(r2)
    a984:	00000306 	br	a994 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    a988:	e0bfff17 	ldw	r2,-4(fp)
    a98c:	00c01244 	movi	r3,73
    a990:	10c00005 	stb	r3,0(r2)
    a994:	e0bffa17 	ldw	r2,-24(fp)
    a998:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a99c:	e0bffc17 	ldw	r2,-16(fp)
    a9a0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    a9a4:	e037883a 	mov	sp,fp
    a9a8:	df000017 	ldw	fp,0(sp)
    a9ac:	dec00104 	addi	sp,sp,4
    a9b0:	f800283a 	ret

0000a9b4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    a9b4:	defff104 	addi	sp,sp,-60
    a9b8:	dfc00e15 	stw	ra,56(sp)
    a9bc:	df000d15 	stw	fp,52(sp)
    a9c0:	df000d04 	addi	fp,sp,52
    a9c4:	2007883a 	mov	r3,r4
    a9c8:	2805883a 	mov	r2,r5
    a9cc:	e0fffe05 	stb	r3,-8(fp)
    a9d0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    a9d4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    a9d8:	e0bffe03 	ldbu	r2,-8(fp)
    a9dc:	10800530 	cmpltui	r2,r2,20
    a9e0:	1000051e 	bne	r2,zero,a9f8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    a9e4:	e0bffe03 	ldbu	r2,-8(fp)
    a9e8:	10803fe0 	cmpeqi	r2,r2,255
    a9ec:	1000021e 	bne	r2,zero,a9f8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    a9f0:	00800a84 	movi	r2,42
    a9f4:	00013a06 	br	aee0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    a9f8:	e0bfff03 	ldbu	r2,-4(fp)
    a9fc:	10800530 	cmpltui	r2,r2,20
    aa00:	1000021e 	bne	r2,zero,aa0c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    aa04:	00800a84 	movi	r2,42
    aa08:	00013506 	br	aee0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa0c:	0005303a 	rdctl	r2,status
    aa10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa14:	e0fff917 	ldw	r3,-28(fp)
    aa18:	00bfff84 	movi	r2,-2
    aa1c:	1884703a 	and	r2,r3,r2
    aa20:	1001703a 	wrctl	status,r2
  
  return context;
    aa24:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    aa28:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    aa2c:	e0ffff03 	ldbu	r3,-4(fp)
    aa30:	008000b4 	movhi	r2,2
    aa34:	10865604 	addi	r2,r2,6488
    aa38:	18c7883a 	add	r3,r3,r3
    aa3c:	18c7883a 	add	r3,r3,r3
    aa40:	10c5883a 	add	r2,r2,r3
    aa44:	10800017 	ldw	r2,0(r2)
    aa48:	10000626 	beq	r2,zero,aa64 <OSTaskChangePrio+0xb0>
    aa4c:	e0bff517 	ldw	r2,-44(fp)
    aa50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aa54:	e0bffa17 	ldw	r2,-24(fp)
    aa58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    aa5c:	00800a04 	movi	r2,40
    aa60:	00011f06 	br	aee0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    aa64:	e0bffe03 	ldbu	r2,-8(fp)
    aa68:	10803fd8 	cmpnei	r2,r2,255
    aa6c:	1000051e 	bne	r2,zero,aa84 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    aa70:	00800074 	movhi	r2,1
    aa74:	1091cf04 	addi	r2,r2,18236
    aa78:	10800017 	ldw	r2,0(r2)
    aa7c:	10800c83 	ldbu	r2,50(r2)
    aa80:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    aa84:	e0fffe03 	ldbu	r3,-8(fp)
    aa88:	008000b4 	movhi	r2,2
    aa8c:	10865604 	addi	r2,r2,6488
    aa90:	18c7883a 	add	r3,r3,r3
    aa94:	18c7883a 	add	r3,r3,r3
    aa98:	10c5883a 	add	r2,r2,r3
    aa9c:	10800017 	ldw	r2,0(r2)
    aaa0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    aaa4:	e0bff617 	ldw	r2,-40(fp)
    aaa8:	1000061e 	bne	r2,zero,aac4 <OSTaskChangePrio+0x110>
    aaac:	e0bff517 	ldw	r2,-44(fp)
    aab0:	e0bffb15 	stw	r2,-20(fp)
    aab4:	e0bffb17 	ldw	r2,-20(fp)
    aab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    aabc:	00800a44 	movi	r2,41
    aac0:	00010706 	br	aee0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    aac4:	e0bff617 	ldw	r2,-40(fp)
    aac8:	10800058 	cmpnei	r2,r2,1
    aacc:	1000061e 	bne	r2,zero,aae8 <OSTaskChangePrio+0x134>
    aad0:	e0bff517 	ldw	r2,-44(fp)
    aad4:	e0bffc15 	stw	r2,-16(fp)
    aad8:	e0bffc17 	ldw	r2,-16(fp)
    aadc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    aae0:	008010c4 	movi	r2,67
    aae4:	0000fe06 	br	aee0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    aae8:	e0bfff03 	ldbu	r2,-4(fp)
    aaec:	1004d0fa 	srli	r2,r2,3
    aaf0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    aaf4:	e0bfff03 	ldbu	r2,-4(fp)
    aaf8:	108001cc 	andi	r2,r2,7
    aafc:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    ab00:	e0bff703 	ldbu	r2,-36(fp)
    ab04:	00c00044 	movi	r3,1
    ab08:	1884983a 	sll	r2,r3,r2
    ab0c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    ab10:	e0bff743 	ldbu	r2,-35(fp)
    ab14:	00c00044 	movi	r3,1
    ab18:	1884983a 	sll	r2,r3,r2
    ab1c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    ab20:	e0fffe03 	ldbu	r3,-8(fp)
    ab24:	008000b4 	movhi	r2,2
    ab28:	10865604 	addi	r2,r2,6488
    ab2c:	18c7883a 	add	r3,r3,r3
    ab30:	18c7883a 	add	r3,r3,r3
    ab34:	10c5883a 	add	r2,r2,r3
    ab38:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    ab3c:	e0ffff03 	ldbu	r3,-4(fp)
    ab40:	008000b4 	movhi	r2,2
    ab44:	10865604 	addi	r2,r2,6488
    ab48:	18c7883a 	add	r3,r3,r3
    ab4c:	18c7883a 	add	r3,r3,r3
    ab50:	10c5883a 	add	r2,r2,r3
    ab54:	e0fff617 	ldw	r3,-40(fp)
    ab58:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    ab5c:	e0bff617 	ldw	r2,-40(fp)
    ab60:	10800d03 	ldbu	r2,52(r2)
    ab64:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    ab68:	e0bff617 	ldw	r2,-40(fp)
    ab6c:	10800d83 	ldbu	r2,54(r2)
    ab70:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    ab74:	e0bff617 	ldw	r2,-40(fp)
    ab78:	10800d43 	ldbu	r2,53(r2)
    ab7c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    ab80:	e0fff803 	ldbu	r3,-32(fp)
    ab84:	00800074 	movhi	r2,1
    ab88:	1091cc44 	addi	r2,r2,18225
    ab8c:	10c5883a 	add	r2,r2,r3
    ab90:	10c00003 	ldbu	r3,0(r2)
    ab94:	e0bff883 	ldbu	r2,-30(fp)
    ab98:	1884703a 	and	r2,r3,r2
    ab9c:	10803fcc 	andi	r2,r2,255
    aba0:	10003726 	beq	r2,zero,ac80 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    aba4:	e0fff803 	ldbu	r3,-32(fp)
    aba8:	e13ff803 	ldbu	r4,-32(fp)
    abac:	00800074 	movhi	r2,1
    abb0:	1091cc44 	addi	r2,r2,18225
    abb4:	1105883a 	add	r2,r2,r4
    abb8:	10800003 	ldbu	r2,0(r2)
    abbc:	1009883a 	mov	r4,r2
    abc0:	e0bff883 	ldbu	r2,-30(fp)
    abc4:	0084303a 	nor	r2,zero,r2
    abc8:	2084703a 	and	r2,r4,r2
    abcc:	1009883a 	mov	r4,r2
    abd0:	00800074 	movhi	r2,1
    abd4:	1091cc44 	addi	r2,r2,18225
    abd8:	10c5883a 	add	r2,r2,r3
    abdc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    abe0:	e0fff803 	ldbu	r3,-32(fp)
    abe4:	00800074 	movhi	r2,1
    abe8:	1091cc44 	addi	r2,r2,18225
    abec:	10c5883a 	add	r2,r2,r3
    abf0:	10800003 	ldbu	r2,0(r2)
    abf4:	10803fcc 	andi	r2,r2,255
    abf8:	10000b1e 	bne	r2,zero,ac28 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    abfc:	e0bff843 	ldbu	r2,-31(fp)
    ac00:	0084303a 	nor	r2,zero,r2
    ac04:	1007883a 	mov	r3,r2
    ac08:	00800074 	movhi	r2,1
    ac0c:	1091cc04 	addi	r2,r2,18224
    ac10:	10800003 	ldbu	r2,0(r2)
    ac14:	1884703a 	and	r2,r3,r2
    ac18:	1007883a 	mov	r3,r2
    ac1c:	00800074 	movhi	r2,1
    ac20:	1091cc04 	addi	r2,r2,18224
    ac24:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    ac28:	00800074 	movhi	r2,1
    ac2c:	1091cc04 	addi	r2,r2,18224
    ac30:	10c00003 	ldbu	r3,0(r2)
    ac34:	e0bff783 	ldbu	r2,-34(fp)
    ac38:	1884b03a 	or	r2,r3,r2
    ac3c:	1007883a 	mov	r3,r2
    ac40:	00800074 	movhi	r2,1
    ac44:	1091cc04 	addi	r2,r2,18224
    ac48:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    ac4c:	e0fff703 	ldbu	r3,-36(fp)
    ac50:	e13ff703 	ldbu	r4,-36(fp)
    ac54:	00800074 	movhi	r2,1
    ac58:	1091cc44 	addi	r2,r2,18225
    ac5c:	1105883a 	add	r2,r2,r4
    ac60:	11000003 	ldbu	r4,0(r2)
    ac64:	e0bff7c3 	ldbu	r2,-33(fp)
    ac68:	2084b03a 	or	r2,r4,r2
    ac6c:	1009883a 	mov	r4,r2
    ac70:	00800074 	movhi	r2,1
    ac74:	1091cc44 	addi	r2,r2,18225
    ac78:	10c5883a 	add	r2,r2,r3
    ac7c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    ac80:	e0bff617 	ldw	r2,-40(fp)
    ac84:	10800717 	ldw	r2,28(r2)
    ac88:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    ac8c:	e0bff317 	ldw	r2,-52(fp)
    ac90:	10003326 	beq	r2,zero,ad60 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    ac94:	e0bff803 	ldbu	r2,-32(fp)
    ac98:	e0fff803 	ldbu	r3,-32(fp)
    ac9c:	e13ff317 	ldw	r4,-52(fp)
    aca0:	20c7883a 	add	r3,r4,r3
    aca4:	18c00204 	addi	r3,r3,8
    aca8:	18c000c3 	ldbu	r3,3(r3)
    acac:	1809883a 	mov	r4,r3
    acb0:	e0fff883 	ldbu	r3,-30(fp)
    acb4:	00c6303a 	nor	r3,zero,r3
    acb8:	20c6703a 	and	r3,r4,r3
    acbc:	1809883a 	mov	r4,r3
    acc0:	e0fff317 	ldw	r3,-52(fp)
    acc4:	1885883a 	add	r2,r3,r2
    acc8:	10800204 	addi	r2,r2,8
    accc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    acd0:	e0bff803 	ldbu	r2,-32(fp)
    acd4:	e0fff317 	ldw	r3,-52(fp)
    acd8:	1885883a 	add	r2,r3,r2
    acdc:	10800204 	addi	r2,r2,8
    ace0:	108000c3 	ldbu	r2,3(r2)
    ace4:	10803fcc 	andi	r2,r2,255
    ace8:	1000091e 	bne	r2,zero,ad10 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    acec:	e0bff317 	ldw	r2,-52(fp)
    acf0:	10800283 	ldbu	r2,10(r2)
    acf4:	1007883a 	mov	r3,r2
    acf8:	e0bff843 	ldbu	r2,-31(fp)
    acfc:	0084303a 	nor	r2,zero,r2
    ad00:	1884703a 	and	r2,r3,r2
    ad04:	1007883a 	mov	r3,r2
    ad08:	e0bff317 	ldw	r2,-52(fp)
    ad0c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    ad10:	e0bff317 	ldw	r2,-52(fp)
    ad14:	10c00283 	ldbu	r3,10(r2)
    ad18:	e0bff783 	ldbu	r2,-34(fp)
    ad1c:	1884b03a 	or	r2,r3,r2
    ad20:	1007883a 	mov	r3,r2
    ad24:	e0bff317 	ldw	r2,-52(fp)
    ad28:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    ad2c:	e0bff703 	ldbu	r2,-36(fp)
    ad30:	e0fff703 	ldbu	r3,-36(fp)
    ad34:	e13ff317 	ldw	r4,-52(fp)
    ad38:	20c7883a 	add	r3,r4,r3
    ad3c:	18c00204 	addi	r3,r3,8
    ad40:	190000c3 	ldbu	r4,3(r3)
    ad44:	e0fff7c3 	ldbu	r3,-33(fp)
    ad48:	20c6b03a 	or	r3,r4,r3
    ad4c:	1809883a 	mov	r4,r3
    ad50:	e0fff317 	ldw	r3,-52(fp)
    ad54:	1885883a 	add	r2,r3,r2
    ad58:	10800204 	addi	r2,r2,8
    ad5c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    ad60:	e0bff617 	ldw	r2,-40(fp)
    ad64:	10800817 	ldw	r2,32(r2)
    ad68:	10004226 	beq	r2,zero,ae74 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    ad6c:	e0bff617 	ldw	r2,-40(fp)
    ad70:	10800817 	ldw	r2,32(r2)
    ad74:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    ad78:	e0bff417 	ldw	r2,-48(fp)
    ad7c:	10800017 	ldw	r2,0(r2)
    ad80:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    ad84:	00003906 	br	ae6c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    ad88:	e0bff803 	ldbu	r2,-32(fp)
    ad8c:	e0fff803 	ldbu	r3,-32(fp)
    ad90:	e13ff317 	ldw	r4,-52(fp)
    ad94:	20c7883a 	add	r3,r4,r3
    ad98:	18c00204 	addi	r3,r3,8
    ad9c:	18c000c3 	ldbu	r3,3(r3)
    ada0:	1809883a 	mov	r4,r3
    ada4:	e0fff883 	ldbu	r3,-30(fp)
    ada8:	00c6303a 	nor	r3,zero,r3
    adac:	20c6703a 	and	r3,r4,r3
    adb0:	1809883a 	mov	r4,r3
    adb4:	e0fff317 	ldw	r3,-52(fp)
    adb8:	1885883a 	add	r2,r3,r2
    adbc:	10800204 	addi	r2,r2,8
    adc0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    adc4:	e0bff803 	ldbu	r2,-32(fp)
    adc8:	e0fff317 	ldw	r3,-52(fp)
    adcc:	1885883a 	add	r2,r3,r2
    add0:	10800204 	addi	r2,r2,8
    add4:	108000c3 	ldbu	r2,3(r2)
    add8:	10803fcc 	andi	r2,r2,255
    addc:	1000091e 	bne	r2,zero,ae04 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    ade0:	e0bff317 	ldw	r2,-52(fp)
    ade4:	10800283 	ldbu	r2,10(r2)
    ade8:	1007883a 	mov	r3,r2
    adec:	e0bff843 	ldbu	r2,-31(fp)
    adf0:	0084303a 	nor	r2,zero,r2
    adf4:	1884703a 	and	r2,r3,r2
    adf8:	1007883a 	mov	r3,r2
    adfc:	e0bff317 	ldw	r2,-52(fp)
    ae00:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    ae04:	e0bff317 	ldw	r2,-52(fp)
    ae08:	10c00283 	ldbu	r3,10(r2)
    ae0c:	e0bff783 	ldbu	r2,-34(fp)
    ae10:	1884b03a 	or	r2,r3,r2
    ae14:	1007883a 	mov	r3,r2
    ae18:	e0bff317 	ldw	r2,-52(fp)
    ae1c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    ae20:	e0bff703 	ldbu	r2,-36(fp)
    ae24:	e0fff703 	ldbu	r3,-36(fp)
    ae28:	e13ff317 	ldw	r4,-52(fp)
    ae2c:	20c7883a 	add	r3,r4,r3
    ae30:	18c00204 	addi	r3,r3,8
    ae34:	190000c3 	ldbu	r4,3(r3)
    ae38:	e0fff7c3 	ldbu	r3,-33(fp)
    ae3c:	20c6b03a 	or	r3,r4,r3
    ae40:	1809883a 	mov	r4,r3
    ae44:	e0fff317 	ldw	r3,-52(fp)
    ae48:	1885883a 	add	r2,r3,r2
    ae4c:	10800204 	addi	r2,r2,8
    ae50:	110000c5 	stb	r4,3(r2)
            pevents++;
    ae54:	e0bff417 	ldw	r2,-48(fp)
    ae58:	10800104 	addi	r2,r2,4
    ae5c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    ae60:	e0bff417 	ldw	r2,-48(fp)
    ae64:	10800017 	ldw	r2,0(r2)
    ae68:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    ae6c:	e0bff317 	ldw	r2,-52(fp)
    ae70:	103fc51e 	bne	r2,zero,ad88 <__alt_mem_Flash_flash_data+0xf400ad88>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    ae74:	e0bff617 	ldw	r2,-40(fp)
    ae78:	e0ffff03 	ldbu	r3,-4(fp)
    ae7c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    ae80:	e0bff617 	ldw	r2,-40(fp)
    ae84:	e0fff703 	ldbu	r3,-36(fp)
    ae88:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    ae8c:	e0bff617 	ldw	r2,-40(fp)
    ae90:	e0fff743 	ldbu	r3,-35(fp)
    ae94:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    ae98:	e0bff617 	ldw	r2,-40(fp)
    ae9c:	e0fff783 	ldbu	r3,-34(fp)
    aea0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    aea4:	e0bff617 	ldw	r2,-40(fp)
    aea8:	e0fff7c3 	ldbu	r3,-33(fp)
    aeac:	10c00d45 	stb	r3,53(r2)
    aeb0:	e0bff517 	ldw	r2,-44(fp)
    aeb4:	e0bffd15 	stw	r2,-12(fp)
    aeb8:	e0bffd17 	ldw	r2,-12(fp)
    aebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    aec0:	00800074 	movhi	r2,1
    aec4:	1091c044 	addi	r2,r2,18177
    aec8:	10800003 	ldbu	r2,0(r2)
    aecc:	10803fcc 	andi	r2,r2,255
    aed0:	10800058 	cmpnei	r2,r2,1
    aed4:	1000011e 	bne	r2,zero,aedc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    aed8:	00064980 	call	6498 <OS_Sched>
    }
    return (OS_ERR_NONE);
    aedc:	0005883a 	mov	r2,zero
}
    aee0:	e037883a 	mov	sp,fp
    aee4:	dfc00117 	ldw	ra,4(sp)
    aee8:	df000017 	ldw	fp,0(sp)
    aeec:	dec00204 	addi	sp,sp,8
    aef0:	f800283a 	ret

0000aef4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    aef4:	deffee04 	addi	sp,sp,-72
    aef8:	dfc01115 	stw	ra,68(sp)
    aefc:	df001015 	stw	fp,64(sp)
    af00:	df001004 	addi	fp,sp,64
    af04:	e13ffc15 	stw	r4,-16(fp)
    af08:	e17ffd15 	stw	r5,-12(fp)
    af0c:	e1bffe15 	stw	r6,-8(fp)
    af10:	3805883a 	mov	r2,r7
    af14:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    af18:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    af1c:	e0bfff03 	ldbu	r2,-4(fp)
    af20:	10800570 	cmpltui	r2,r2,21
    af24:	1000021e 	bne	r2,zero,af30 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    af28:	00800a84 	movi	r2,42
    af2c:	00005b06 	br	b09c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    af30:	0005303a 	rdctl	r2,status
    af34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    af38:	e0fff617 	ldw	r3,-40(fp)
    af3c:	00bfff84 	movi	r2,-2
    af40:	1884703a 	and	r2,r3,r2
    af44:	1001703a 	wrctl	status,r2
  
  return context;
    af48:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    af4c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    af50:	00800074 	movhi	r2,1
    af54:	1091ce04 	addi	r2,r2,18232
    af58:	10800003 	ldbu	r2,0(r2)
    af5c:	10803fcc 	andi	r2,r2,255
    af60:	10000626 	beq	r2,zero,af7c <OSTaskCreate+0x88>
    af64:	e0bff317 	ldw	r2,-52(fp)
    af68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    af6c:	e0bff717 	ldw	r2,-36(fp)
    af70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    af74:	00800f04 	movi	r2,60
    af78:	00004806 	br	b09c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    af7c:	e0ffff03 	ldbu	r3,-4(fp)
    af80:	008000b4 	movhi	r2,2
    af84:	10865604 	addi	r2,r2,6488
    af88:	18c7883a 	add	r3,r3,r3
    af8c:	18c7883a 	add	r3,r3,r3
    af90:	10c5883a 	add	r2,r2,r3
    af94:	10800017 	ldw	r2,0(r2)
    af98:	10003b1e 	bne	r2,zero,b088 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    af9c:	e0ffff03 	ldbu	r3,-4(fp)
    afa0:	008000b4 	movhi	r2,2
    afa4:	10865604 	addi	r2,r2,6488
    afa8:	18c7883a 	add	r3,r3,r3
    afac:	18c7883a 	add	r3,r3,r3
    afb0:	10c5883a 	add	r2,r2,r3
    afb4:	00c00044 	movi	r3,1
    afb8:	10c00015 	stw	r3,0(r2)
    afbc:	e0bff317 	ldw	r2,-52(fp)
    afc0:	e0bff815 	stw	r2,-32(fp)
    afc4:	e0bff817 	ldw	r2,-32(fp)
    afc8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    afcc:	e13ffc17 	ldw	r4,-16(fp)
    afd0:	e17ffd17 	ldw	r5,-12(fp)
    afd4:	e1bffe17 	ldw	r6,-8(fp)
    afd8:	000f883a 	mov	r7,zero
    afdc:	000fbe80 	call	fbe8 <OSTaskStkInit>
    afe0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    afe4:	e0bfff03 	ldbu	r2,-4(fp)
    afe8:	d8000015 	stw	zero,0(sp)
    afec:	d8000115 	stw	zero,4(sp)
    aff0:	d8000215 	stw	zero,8(sp)
    aff4:	1009883a 	mov	r4,r2
    aff8:	e17ff417 	ldw	r5,-48(fp)
    affc:	000d883a 	mov	r6,zero
    b000:	000f883a 	mov	r7,zero
    b004:	000689c0 	call	689c <OS_TCBInit>
    b008:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    b00c:	e0bff503 	ldbu	r2,-44(fp)
    b010:	1000081e 	bne	r2,zero,b034 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    b014:	00800074 	movhi	r2,1
    b018:	1091c044 	addi	r2,r2,18177
    b01c:	10800003 	ldbu	r2,0(r2)
    b020:	10803fcc 	andi	r2,r2,255
    b024:	10800058 	cmpnei	r2,r2,1
    b028:	1000151e 	bne	r2,zero,b080 <OSTaskCreate+0x18c>
                OS_Sched();
    b02c:	00064980 	call	6498 <OS_Sched>
    b030:	00001306 	br	b080 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b034:	0005303a 	rdctl	r2,status
    b038:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b03c:	e0fff917 	ldw	r3,-28(fp)
    b040:	00bfff84 	movi	r2,-2
    b044:	1884703a 	and	r2,r3,r2
    b048:	1001703a 	wrctl	status,r2
  
  return context;
    b04c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    b050:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    b054:	e0ffff03 	ldbu	r3,-4(fp)
    b058:	008000b4 	movhi	r2,2
    b05c:	10865604 	addi	r2,r2,6488
    b060:	18c7883a 	add	r3,r3,r3
    b064:	18c7883a 	add	r3,r3,r3
    b068:	10c5883a 	add	r2,r2,r3
    b06c:	10000015 	stw	zero,0(r2)
    b070:	e0bff317 	ldw	r2,-52(fp)
    b074:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b078:	e0bffa17 	ldw	r2,-24(fp)
    b07c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    b080:	e0bff503 	ldbu	r2,-44(fp)
    b084:	00000506 	br	b09c <OSTaskCreate+0x1a8>
    b088:	e0bff317 	ldw	r2,-52(fp)
    b08c:	e0bffb15 	stw	r2,-20(fp)
    b090:	e0bffb17 	ldw	r2,-20(fp)
    b094:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    b098:	00800a04 	movi	r2,40
}
    b09c:	e037883a 	mov	sp,fp
    b0a0:	dfc00117 	ldw	ra,4(sp)
    b0a4:	df000017 	ldw	fp,0(sp)
    b0a8:	dec00204 	addi	sp,sp,8
    b0ac:	f800283a 	ret

0000b0b0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    b0b0:	deffec04 	addi	sp,sp,-80
    b0b4:	dfc01315 	stw	ra,76(sp)
    b0b8:	df001215 	stw	fp,72(sp)
    b0bc:	df001204 	addi	fp,sp,72
    b0c0:	e13ffa15 	stw	r4,-24(fp)
    b0c4:	e17ffb15 	stw	r5,-20(fp)
    b0c8:	e1bffc15 	stw	r6,-16(fp)
    b0cc:	3809883a 	mov	r4,r7
    b0d0:	e0c00217 	ldw	r3,8(fp)
    b0d4:	e0800617 	ldw	r2,24(fp)
    b0d8:	e13ffd05 	stb	r4,-12(fp)
    b0dc:	e0fffe0d 	sth	r3,-8(fp)
    b0e0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    b0e4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    b0e8:	e0bffd03 	ldbu	r2,-12(fp)
    b0ec:	10800570 	cmpltui	r2,r2,21
    b0f0:	1000021e 	bne	r2,zero,b0fc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    b0f4:	00800a84 	movi	r2,42
    b0f8:	00006306 	br	b288 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b0fc:	0005303a 	rdctl	r2,status
    b100:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b104:	e0fff417 	ldw	r3,-48(fp)
    b108:	00bfff84 	movi	r2,-2
    b10c:	1884703a 	and	r2,r3,r2
    b110:	1001703a 	wrctl	status,r2
  
  return context;
    b114:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    b118:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    b11c:	00800074 	movhi	r2,1
    b120:	1091ce04 	addi	r2,r2,18232
    b124:	10800003 	ldbu	r2,0(r2)
    b128:	10803fcc 	andi	r2,r2,255
    b12c:	10000626 	beq	r2,zero,b148 <OSTaskCreateExt+0x98>
    b130:	e0bff117 	ldw	r2,-60(fp)
    b134:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b138:	e0bff517 	ldw	r2,-44(fp)
    b13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    b140:	00800f04 	movi	r2,60
    b144:	00005006 	br	b288 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    b148:	e0fffd03 	ldbu	r3,-12(fp)
    b14c:	008000b4 	movhi	r2,2
    b150:	10865604 	addi	r2,r2,6488
    b154:	18c7883a 	add	r3,r3,r3
    b158:	18c7883a 	add	r3,r3,r3
    b15c:	10c5883a 	add	r2,r2,r3
    b160:	10800017 	ldw	r2,0(r2)
    b164:	1000431e 	bne	r2,zero,b274 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    b168:	e0fffd03 	ldbu	r3,-12(fp)
    b16c:	008000b4 	movhi	r2,2
    b170:	10865604 	addi	r2,r2,6488
    b174:	18c7883a 	add	r3,r3,r3
    b178:	18c7883a 	add	r3,r3,r3
    b17c:	10c5883a 	add	r2,r2,r3
    b180:	00c00044 	movi	r3,1
    b184:	10c00015 	stw	r3,0(r2)
    b188:	e0bff117 	ldw	r2,-60(fp)
    b18c:	e0bff615 	stw	r2,-40(fp)
    b190:	e0bff617 	ldw	r2,-40(fp)
    b194:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    b198:	e0bfff0b 	ldhu	r2,-4(fp)
    b19c:	e1000317 	ldw	r4,12(fp)
    b1a0:	e1400417 	ldw	r5,16(fp)
    b1a4:	100d883a 	mov	r6,r2
    b1a8:	000c23c0 	call	c23c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    b1ac:	e0bfff0b 	ldhu	r2,-4(fp)
    b1b0:	e13ffa17 	ldw	r4,-24(fp)
    b1b4:	e17ffb17 	ldw	r5,-20(fp)
    b1b8:	e1bffc17 	ldw	r6,-16(fp)
    b1bc:	100f883a 	mov	r7,r2
    b1c0:	000fbe80 	call	fbe8 <OSTaskStkInit>
    b1c4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    b1c8:	e13ffd03 	ldbu	r4,-12(fp)
    b1cc:	e1fffe0b 	ldhu	r7,-8(fp)
    b1d0:	e0bfff0b 	ldhu	r2,-4(fp)
    b1d4:	e0c00417 	ldw	r3,16(fp)
    b1d8:	d8c00015 	stw	r3,0(sp)
    b1dc:	e0c00517 	ldw	r3,20(fp)
    b1e0:	d8c00115 	stw	r3,4(sp)
    b1e4:	d8800215 	stw	r2,8(sp)
    b1e8:	e17ff217 	ldw	r5,-56(fp)
    b1ec:	e1800317 	ldw	r6,12(fp)
    b1f0:	000689c0 	call	689c <OS_TCBInit>
    b1f4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    b1f8:	e0bff303 	ldbu	r2,-52(fp)
    b1fc:	1000081e 	bne	r2,zero,b220 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    b200:	00800074 	movhi	r2,1
    b204:	1091c044 	addi	r2,r2,18177
    b208:	10800003 	ldbu	r2,0(r2)
    b20c:	10803fcc 	andi	r2,r2,255
    b210:	10800058 	cmpnei	r2,r2,1
    b214:	1000151e 	bne	r2,zero,b26c <OSTaskCreateExt+0x1bc>
                OS_Sched();
    b218:	00064980 	call	6498 <OS_Sched>
    b21c:	00001306 	br	b26c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b220:	0005303a 	rdctl	r2,status
    b224:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b228:	e0fff717 	ldw	r3,-36(fp)
    b22c:	00bfff84 	movi	r2,-2
    b230:	1884703a 	and	r2,r3,r2
    b234:	1001703a 	wrctl	status,r2
  
  return context;
    b238:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    b23c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    b240:	e0fffd03 	ldbu	r3,-12(fp)
    b244:	008000b4 	movhi	r2,2
    b248:	10865604 	addi	r2,r2,6488
    b24c:	18c7883a 	add	r3,r3,r3
    b250:	18c7883a 	add	r3,r3,r3
    b254:	10c5883a 	add	r2,r2,r3
    b258:	10000015 	stw	zero,0(r2)
    b25c:	e0bff117 	ldw	r2,-60(fp)
    b260:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b264:	e0bff817 	ldw	r2,-32(fp)
    b268:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    b26c:	e0bff303 	ldbu	r2,-52(fp)
    b270:	00000506 	br	b288 <OSTaskCreateExt+0x1d8>
    b274:	e0bff117 	ldw	r2,-60(fp)
    b278:	e0bff915 	stw	r2,-28(fp)
    b27c:	e0bff917 	ldw	r2,-28(fp)
    b280:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    b284:	00800a04 	movi	r2,40
}
    b288:	e037883a 	mov	sp,fp
    b28c:	dfc00117 	ldw	ra,4(sp)
    b290:	df000017 	ldw	fp,0(sp)
    b294:	dec00204 	addi	sp,sp,8
    b298:	f800283a 	ret

0000b29c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    b29c:	defff404 	addi	sp,sp,-48
    b2a0:	dfc00b15 	stw	ra,44(sp)
    b2a4:	df000a15 	stw	fp,40(sp)
    b2a8:	df000a04 	addi	fp,sp,40
    b2ac:	2005883a 	mov	r2,r4
    b2b0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    b2b4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    b2b8:	00800074 	movhi	r2,1
    b2bc:	1091ce04 	addi	r2,r2,18232
    b2c0:	10800003 	ldbu	r2,0(r2)
    b2c4:	10803fcc 	andi	r2,r2,255
    b2c8:	10000226 	beq	r2,zero,b2d4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    b2cc:	00801004 	movi	r2,64
    b2d0:	0000e506 	br	b668 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    b2d4:	e0bfff03 	ldbu	r2,-4(fp)
    b2d8:	10800518 	cmpnei	r2,r2,20
    b2dc:	1000021e 	bne	r2,zero,b2e8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    b2e0:	00800f84 	movi	r2,62
    b2e4:	0000e006 	br	b668 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    b2e8:	e0bfff03 	ldbu	r2,-4(fp)
    b2ec:	10800530 	cmpltui	r2,r2,20
    b2f0:	1000051e 	bne	r2,zero,b308 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    b2f4:	e0bfff03 	ldbu	r2,-4(fp)
    b2f8:	10803fe0 	cmpeqi	r2,r2,255
    b2fc:	1000021e 	bne	r2,zero,b308 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    b300:	00800a84 	movi	r2,42
    b304:	0000d806 	br	b668 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b308:	0005303a 	rdctl	r2,status
    b30c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b310:	e0fff917 	ldw	r3,-28(fp)
    b314:	00bfff84 	movi	r2,-2
    b318:	1884703a 	and	r2,r3,r2
    b31c:	1001703a 	wrctl	status,r2
  
  return context;
    b320:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    b324:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    b328:	e0bfff03 	ldbu	r2,-4(fp)
    b32c:	10803fd8 	cmpnei	r2,r2,255
    b330:	1000051e 	bne	r2,zero,b348 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    b334:	00800074 	movhi	r2,1
    b338:	1091cf04 	addi	r2,r2,18236
    b33c:	10800017 	ldw	r2,0(r2)
    b340:	10800c83 	ldbu	r2,50(r2)
    b344:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b348:	e0ffff03 	ldbu	r3,-4(fp)
    b34c:	008000b4 	movhi	r2,2
    b350:	10865604 	addi	r2,r2,6488
    b354:	18c7883a 	add	r3,r3,r3
    b358:	18c7883a 	add	r3,r3,r3
    b35c:	10c5883a 	add	r2,r2,r3
    b360:	10800017 	ldw	r2,0(r2)
    b364:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    b368:	e0bff717 	ldw	r2,-36(fp)
    b36c:	1000061e 	bne	r2,zero,b388 <OSTaskDel+0xec>
    b370:	e0bff617 	ldw	r2,-40(fp)
    b374:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b378:	e0bffa17 	ldw	r2,-24(fp)
    b37c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    b380:	008010c4 	movi	r2,67
    b384:	0000b806 	br	b668 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    b388:	e0bff717 	ldw	r2,-36(fp)
    b38c:	10800058 	cmpnei	r2,r2,1
    b390:	1000061e 	bne	r2,zero,b3ac <OSTaskDel+0x110>
    b394:	e0bff617 	ldw	r2,-40(fp)
    b398:	e0bffb15 	stw	r2,-20(fp)
    b39c:	e0bffb17 	ldw	r2,-20(fp)
    b3a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    b3a4:	00800f44 	movi	r2,61
    b3a8:	0000af06 	br	b668 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    b3ac:	e0bff717 	ldw	r2,-36(fp)
    b3b0:	10800d03 	ldbu	r2,52(r2)
    b3b4:	10c03fcc 	andi	r3,r2,255
    b3b8:	e0bff717 	ldw	r2,-36(fp)
    b3bc:	10800d03 	ldbu	r2,52(r2)
    b3c0:	11003fcc 	andi	r4,r2,255
    b3c4:	00800074 	movhi	r2,1
    b3c8:	1091cc44 	addi	r2,r2,18225
    b3cc:	1105883a 	add	r2,r2,r4
    b3d0:	10800003 	ldbu	r2,0(r2)
    b3d4:	1009883a 	mov	r4,r2
    b3d8:	e0bff717 	ldw	r2,-36(fp)
    b3dc:	10800d43 	ldbu	r2,53(r2)
    b3e0:	0084303a 	nor	r2,zero,r2
    b3e4:	2084703a 	and	r2,r4,r2
    b3e8:	1009883a 	mov	r4,r2
    b3ec:	00800074 	movhi	r2,1
    b3f0:	1091cc44 	addi	r2,r2,18225
    b3f4:	10c5883a 	add	r2,r2,r3
    b3f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    b3fc:	e0bff717 	ldw	r2,-36(fp)
    b400:	10800d03 	ldbu	r2,52(r2)
    b404:	10c03fcc 	andi	r3,r2,255
    b408:	00800074 	movhi	r2,1
    b40c:	1091cc44 	addi	r2,r2,18225
    b410:	10c5883a 	add	r2,r2,r3
    b414:	10800003 	ldbu	r2,0(r2)
    b418:	10803fcc 	andi	r2,r2,255
    b41c:	10000c1e 	bne	r2,zero,b450 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    b420:	e0bff717 	ldw	r2,-36(fp)
    b424:	10800d83 	ldbu	r2,54(r2)
    b428:	0084303a 	nor	r2,zero,r2
    b42c:	1007883a 	mov	r3,r2
    b430:	00800074 	movhi	r2,1
    b434:	1091cc04 	addi	r2,r2,18224
    b438:	10800003 	ldbu	r2,0(r2)
    b43c:	1884703a 	and	r2,r3,r2
    b440:	1007883a 	mov	r3,r2
    b444:	00800074 	movhi	r2,1
    b448:	1091cc04 	addi	r2,r2,18224
    b44c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    b450:	e0bff717 	ldw	r2,-36(fp)
    b454:	10800717 	ldw	r2,28(r2)
    b458:	10000526 	beq	r2,zero,b470 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    b45c:	e0bff717 	ldw	r2,-36(fp)
    b460:	10800717 	ldw	r2,28(r2)
    b464:	e13ff717 	ldw	r4,-36(fp)
    b468:	100b883a 	mov	r5,r2
    b46c:	0005e700 	call	5e70 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    b470:	e0bff717 	ldw	r2,-36(fp)
    b474:	10800817 	ldw	r2,32(r2)
    b478:	10000526 	beq	r2,zero,b490 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    b47c:	e0bff717 	ldw	r2,-36(fp)
    b480:	10800817 	ldw	r2,32(r2)
    b484:	e13ff717 	ldw	r4,-36(fp)
    b488:	100b883a 	mov	r5,r2
    b48c:	0005f240 	call	5f24 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    b490:	e0bff717 	ldw	r2,-36(fp)
    b494:	10800a17 	ldw	r2,40(r2)
    b498:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    b49c:	e0bff817 	ldw	r2,-32(fp)
    b4a0:	10000226 	beq	r2,zero,b4ac <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    b4a4:	e13ff817 	ldw	r4,-32(fp)
    b4a8:	00084780 	call	8478 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    b4ac:	e0bff717 	ldw	r2,-36(fp)
    b4b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    b4b4:	e0bff717 	ldw	r2,-36(fp)
    b4b8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    b4bc:	e0bff717 	ldw	r2,-36(fp)
    b4c0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    b4c4:	00800074 	movhi	r2,1
    b4c8:	1091c004 	addi	r2,r2,18176
    b4cc:	10800003 	ldbu	r2,0(r2)
    b4d0:	10803fcc 	andi	r2,r2,255
    b4d4:	10803fe0 	cmpeqi	r2,r2,255
    b4d8:	1000081e 	bne	r2,zero,b4fc <OSTaskDel+0x260>
        OSLockNesting++;
    b4dc:	00800074 	movhi	r2,1
    b4e0:	1091c004 	addi	r2,r2,18176
    b4e4:	10800003 	ldbu	r2,0(r2)
    b4e8:	10800044 	addi	r2,r2,1
    b4ec:	1007883a 	mov	r3,r2
    b4f0:	00800074 	movhi	r2,1
    b4f4:	1091c004 	addi	r2,r2,18176
    b4f8:	10c00005 	stb	r3,0(r2)
    b4fc:	e0bff617 	ldw	r2,-40(fp)
    b500:	e0bffc15 	stw	r2,-16(fp)
    b504:	e0bffc17 	ldw	r2,-16(fp)
    b508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    b50c:	0005a640 	call	5a64 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b510:	0005303a 	rdctl	r2,status
    b514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b518:	e0fffd17 	ldw	r3,-12(fp)
    b51c:	00bfff84 	movi	r2,-2
    b520:	1884703a 	and	r2,r3,r2
    b524:	1001703a 	wrctl	status,r2
  
  return context;
    b528:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    b52c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    b530:	00800074 	movhi	r2,1
    b534:	1091c004 	addi	r2,r2,18176
    b538:	10800003 	ldbu	r2,0(r2)
    b53c:	10803fcc 	andi	r2,r2,255
    b540:	10000826 	beq	r2,zero,b564 <OSTaskDel+0x2c8>
        OSLockNesting--;
    b544:	00800074 	movhi	r2,1
    b548:	1091c004 	addi	r2,r2,18176
    b54c:	10800003 	ldbu	r2,0(r2)
    b550:	10bfffc4 	addi	r2,r2,-1
    b554:	1007883a 	mov	r3,r2
    b558:	00800074 	movhi	r2,1
    b55c:	1091c004 	addi	r2,r2,18176
    b560:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    b564:	e13ff717 	ldw	r4,-36(fp)
    b568:	000fd640 	call	fd64 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    b56c:	00800074 	movhi	r2,1
    b570:	1091c844 	addi	r2,r2,18209
    b574:	10800003 	ldbu	r2,0(r2)
    b578:	10bfffc4 	addi	r2,r2,-1
    b57c:	1007883a 	mov	r3,r2
    b580:	00800074 	movhi	r2,1
    b584:	1091c844 	addi	r2,r2,18209
    b588:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    b58c:	e0ffff03 	ldbu	r3,-4(fp)
    b590:	008000b4 	movhi	r2,2
    b594:	10865604 	addi	r2,r2,6488
    b598:	18c7883a 	add	r3,r3,r3
    b59c:	18c7883a 	add	r3,r3,r3
    b5a0:	10c5883a 	add	r2,r2,r3
    b5a4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    b5a8:	e0bff717 	ldw	r2,-36(fp)
    b5ac:	10800617 	ldw	r2,24(r2)
    b5b0:	1000091e 	bne	r2,zero,b5d8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    b5b4:	e0bff717 	ldw	r2,-36(fp)
    b5b8:	10800517 	ldw	r2,20(r2)
    b5bc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    b5c0:	e0bff717 	ldw	r2,-36(fp)
    b5c4:	10c00517 	ldw	r3,20(r2)
    b5c8:	00800074 	movhi	r2,1
    b5cc:	1091c304 	addi	r2,r2,18188
    b5d0:	10c00015 	stw	r3,0(r2)
    b5d4:	00000a06 	br	b600 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    b5d8:	e0bff717 	ldw	r2,-36(fp)
    b5dc:	10800617 	ldw	r2,24(r2)
    b5e0:	e0fff717 	ldw	r3,-36(fp)
    b5e4:	18c00517 	ldw	r3,20(r3)
    b5e8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    b5ec:	e0bff717 	ldw	r2,-36(fp)
    b5f0:	10800517 	ldw	r2,20(r2)
    b5f4:	e0fff717 	ldw	r3,-36(fp)
    b5f8:	18c00617 	ldw	r3,24(r3)
    b5fc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    b600:	00800074 	movhi	r2,1
    b604:	1091c704 	addi	r2,r2,18204
    b608:	10c00017 	ldw	r3,0(r2)
    b60c:	e0bff717 	ldw	r2,-36(fp)
    b610:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    b614:	00800074 	movhi	r2,1
    b618:	1091c704 	addi	r2,r2,18204
    b61c:	e0fff717 	ldw	r3,-36(fp)
    b620:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    b624:	e0bff717 	ldw	r2,-36(fp)
    b628:	00c00fc4 	movi	r3,63
    b62c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    b630:	e0bff717 	ldw	r2,-36(fp)
    b634:	10001345 	stb	zero,77(r2)
    b638:	e0bff617 	ldw	r2,-40(fp)
    b63c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b640:	e0bffe17 	ldw	r2,-8(fp)
    b644:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    b648:	00800074 	movhi	r2,1
    b64c:	1091c044 	addi	r2,r2,18177
    b650:	10800003 	ldbu	r2,0(r2)
    b654:	10803fcc 	andi	r2,r2,255
    b658:	10800058 	cmpnei	r2,r2,1
    b65c:	1000011e 	bne	r2,zero,b664 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    b660:	00064980 	call	6498 <OS_Sched>
    }
    return (OS_ERR_NONE);
    b664:	0005883a 	mov	r2,zero
}
    b668:	e037883a 	mov	sp,fp
    b66c:	dfc00117 	ldw	ra,4(sp)
    b670:	df000017 	ldw	fp,0(sp)
    b674:	dec00204 	addi	sp,sp,8
    b678:	f800283a 	ret

0000b67c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    b67c:	defff504 	addi	sp,sp,-44
    b680:	df000a15 	stw	fp,40(sp)
    b684:	df000a04 	addi	fp,sp,40
    b688:	2005883a 	mov	r2,r4
    b68c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    b690:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    b694:	e0bfff03 	ldbu	r2,-4(fp)
    b698:	10800518 	cmpnei	r2,r2,20
    b69c:	1000021e 	bne	r2,zero,b6a8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    b6a0:	00800f84 	movi	r2,62
    b6a4:	00004706 	br	b7c4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    b6a8:	e0bfff03 	ldbu	r2,-4(fp)
    b6ac:	10800530 	cmpltui	r2,r2,20
    b6b0:	1000051e 	bne	r2,zero,b6c8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    b6b4:	e0bfff03 	ldbu	r2,-4(fp)
    b6b8:	10803fe0 	cmpeqi	r2,r2,255
    b6bc:	1000021e 	bne	r2,zero,b6c8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    b6c0:	00800a84 	movi	r2,42
    b6c4:	00003f06 	br	b7c4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    b6c8:	e0bfff03 	ldbu	r2,-4(fp)
    b6cc:	10803fd8 	cmpnei	r2,r2,255
    b6d0:	1000131e 	bne	r2,zero,b720 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6d4:	0005303a 	rdctl	r2,status
    b6d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6dc:	e0fff917 	ldw	r3,-28(fp)
    b6e0:	00bfff84 	movi	r2,-2
    b6e4:	1884703a 	and	r2,r3,r2
    b6e8:	1001703a 	wrctl	status,r2
  
  return context;
    b6ec:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    b6f0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    b6f4:	00800074 	movhi	r2,1
    b6f8:	1091cf04 	addi	r2,r2,18236
    b6fc:	10800017 	ldw	r2,0(r2)
    b700:	10800dc3 	ldbu	r2,55(r2)
    b704:	e0bff705 	stb	r2,-36(fp)
    b708:	e0bff617 	ldw	r2,-40(fp)
    b70c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b710:	e0bffa17 	ldw	r2,-24(fp)
    b714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    b718:	e0bff703 	ldbu	r2,-36(fp)
    b71c:	00002906 	br	b7c4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b720:	0005303a 	rdctl	r2,status
    b724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b728:	e0fffb17 	ldw	r3,-20(fp)
    b72c:	00bfff84 	movi	r2,-2
    b730:	1884703a 	and	r2,r3,r2
    b734:	1001703a 	wrctl	status,r2
  
  return context;
    b738:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    b73c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    b740:	e0ffff03 	ldbu	r3,-4(fp)
    b744:	008000b4 	movhi	r2,2
    b748:	10865604 	addi	r2,r2,6488
    b74c:	18c7883a 	add	r3,r3,r3
    b750:	18c7883a 	add	r3,r3,r3
    b754:	10c5883a 	add	r2,r2,r3
    b758:	10800017 	ldw	r2,0(r2)
    b75c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    b760:	e0bff817 	ldw	r2,-32(fp)
    b764:	1000061e 	bne	r2,zero,b780 <OSTaskDelReq+0x104>
    b768:	e0bff617 	ldw	r2,-40(fp)
    b76c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b770:	e0bffc17 	ldw	r2,-16(fp)
    b774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    b778:	008010c4 	movi	r2,67
    b77c:	00001106 	br	b7c4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    b780:	e0bff817 	ldw	r2,-32(fp)
    b784:	10800058 	cmpnei	r2,r2,1
    b788:	1000061e 	bne	r2,zero,b7a4 <OSTaskDelReq+0x128>
    b78c:	e0bff617 	ldw	r2,-40(fp)
    b790:	e0bffd15 	stw	r2,-12(fp)
    b794:	e0bffd17 	ldw	r2,-12(fp)
    b798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    b79c:	00800f44 	movi	r2,61
    b7a0:	00000806 	br	b7c4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    b7a4:	e0bff817 	ldw	r2,-32(fp)
    b7a8:	00c00fc4 	movi	r3,63
    b7ac:	10c00dc5 	stb	r3,55(r2)
    b7b0:	e0bff617 	ldw	r2,-40(fp)
    b7b4:	e0bffe15 	stw	r2,-8(fp)
    b7b8:	e0bffe17 	ldw	r2,-8(fp)
    b7bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    b7c0:	0005883a 	mov	r2,zero
}
    b7c4:	e037883a 	mov	sp,fp
    b7c8:	df000017 	ldw	fp,0(sp)
    b7cc:	dec00104 	addi	sp,sp,4
    b7d0:	f800283a 	ret

0000b7d4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b7d4:	defff404 	addi	sp,sp,-48
    b7d8:	dfc00b15 	stw	ra,44(sp)
    b7dc:	df000a15 	stw	fp,40(sp)
    b7e0:	df000a04 	addi	fp,sp,40
    b7e4:	2005883a 	mov	r2,r4
    b7e8:	e17ffe15 	stw	r5,-8(fp)
    b7ec:	e1bfff15 	stw	r6,-4(fp)
    b7f0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    b7f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    b7f8:	e0bfff17 	ldw	r2,-4(fp)
    b7fc:	1000021e 	bne	r2,zero,b808 <OSTaskNameGet+0x34>
        return (0);
    b800:	0005883a 	mov	r2,zero
    b804:	00005806 	br	b968 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    b808:	e0bffd03 	ldbu	r2,-12(fp)
    b80c:	10800570 	cmpltui	r2,r2,21
    b810:	1000081e 	bne	r2,zero,b834 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    b814:	e0bffd03 	ldbu	r2,-12(fp)
    b818:	10803fe0 	cmpeqi	r2,r2,255
    b81c:	1000051e 	bne	r2,zero,b834 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    b820:	e0bfff17 	ldw	r2,-4(fp)
    b824:	00c00a84 	movi	r3,42
    b828:	10c00005 	stb	r3,0(r2)
            return (0);
    b82c:	0005883a 	mov	r2,zero
    b830:	00004d06 	br	b968 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    b834:	e0bffe17 	ldw	r2,-8(fp)
    b838:	1000051e 	bne	r2,zero,b850 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    b83c:	e0bfff17 	ldw	r2,-4(fp)
    b840:	00c00304 	movi	r3,12
    b844:	10c00005 	stb	r3,0(r2)
        return (0);
    b848:	0005883a 	mov	r2,zero
    b84c:	00004606 	br	b968 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    b850:	00800074 	movhi	r2,1
    b854:	1091ce04 	addi	r2,r2,18232
    b858:	10800003 	ldbu	r2,0(r2)
    b85c:	10803fcc 	andi	r2,r2,255
    b860:	10000526 	beq	r2,zero,b878 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    b864:	e0bfff17 	ldw	r2,-4(fp)
    b868:	00c00444 	movi	r3,17
    b86c:	10c00005 	stb	r3,0(r2)
        return (0);
    b870:	0005883a 	mov	r2,zero
    b874:	00003c06 	br	b968 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b878:	0005303a 	rdctl	r2,status
    b87c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b880:	e0fff917 	ldw	r3,-28(fp)
    b884:	00bfff84 	movi	r2,-2
    b888:	1884703a 	and	r2,r3,r2
    b88c:	1001703a 	wrctl	status,r2
  
  return context;
    b890:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    b894:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    b898:	e0bffd03 	ldbu	r2,-12(fp)
    b89c:	10803fd8 	cmpnei	r2,r2,255
    b8a0:	1000051e 	bne	r2,zero,b8b8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    b8a4:	00800074 	movhi	r2,1
    b8a8:	1091cf04 	addi	r2,r2,18236
    b8ac:	10800017 	ldw	r2,0(r2)
    b8b0:	10800c83 	ldbu	r2,50(r2)
    b8b4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    b8b8:	e0fffd03 	ldbu	r3,-12(fp)
    b8bc:	008000b4 	movhi	r2,2
    b8c0:	10865604 	addi	r2,r2,6488
    b8c4:	18c7883a 	add	r3,r3,r3
    b8c8:	18c7883a 	add	r3,r3,r3
    b8cc:	10c5883a 	add	r2,r2,r3
    b8d0:	10800017 	ldw	r2,0(r2)
    b8d4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    b8d8:	e0bff717 	ldw	r2,-36(fp)
    b8dc:	1000091e 	bne	r2,zero,b904 <OSTaskNameGet+0x130>
    b8e0:	e0bff617 	ldw	r2,-40(fp)
    b8e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8e8:	e0bffa17 	ldw	r2,-24(fp)
    b8ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b8f0:	e0bfff17 	ldw	r2,-4(fp)
    b8f4:	00c010c4 	movi	r3,67
    b8f8:	10c00005 	stb	r3,0(r2)
        return (0);
    b8fc:	0005883a 	mov	r2,zero
    b900:	00001906 	br	b968 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    b904:	e0bff717 	ldw	r2,-36(fp)
    b908:	10800058 	cmpnei	r2,r2,1
    b90c:	1000091e 	bne	r2,zero,b934 <OSTaskNameGet+0x160>
    b910:	e0bff617 	ldw	r2,-40(fp)
    b914:	e0bffb15 	stw	r2,-20(fp)
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    b920:	e0bfff17 	ldw	r2,-4(fp)
    b924:	00c010c4 	movi	r3,67
    b928:	10c00005 	stb	r3,0(r2)
        return (0);
    b92c:	0005883a 	mov	r2,zero
    b930:	00000d06 	br	b968 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    b934:	e0bff717 	ldw	r2,-36(fp)
    b938:	10801304 	addi	r2,r2,76
    b93c:	e13ffe17 	ldw	r4,-8(fp)
    b940:	100b883a 	mov	r5,r2
    b944:	00065d40 	call	65d4 <OS_StrCopy>
    b948:	e0bff805 	stb	r2,-32(fp)
    b94c:	e0bff617 	ldw	r2,-40(fp)
    b950:	e0bffc15 	stw	r2,-16(fp)
    b954:	e0bffc17 	ldw	r2,-16(fp)
    b958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    b95c:	e0bfff17 	ldw	r2,-4(fp)
    b960:	10000005 	stb	zero,0(r2)
    return (len);
    b964:	e0bff803 	ldbu	r2,-32(fp)
}
    b968:	e037883a 	mov	sp,fp
    b96c:	dfc00117 	ldw	ra,4(sp)
    b970:	df000017 	ldw	fp,0(sp)
    b974:	dec00204 	addi	sp,sp,8
    b978:	f800283a 	ret

0000b97c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    b97c:	defff304 	addi	sp,sp,-52
    b980:	dfc00c15 	stw	ra,48(sp)
    b984:	df000b15 	stw	fp,44(sp)
    b988:	df000b04 	addi	fp,sp,44
    b98c:	2005883a 	mov	r2,r4
    b990:	e17ffe15 	stw	r5,-8(fp)
    b994:	e1bfff15 	stw	r6,-4(fp)
    b998:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    b99c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    b9a0:	e0bfff17 	ldw	r2,-4(fp)
    b9a4:	1000011e 	bne	r2,zero,b9ac <OSTaskNameSet+0x30>
        return;
    b9a8:	00005f06 	br	bb28 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    b9ac:	e0bffd03 	ldbu	r2,-12(fp)
    b9b0:	10800570 	cmpltui	r2,r2,21
    b9b4:	1000071e 	bne	r2,zero,b9d4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    b9b8:	e0bffd03 	ldbu	r2,-12(fp)
    b9bc:	10803fe0 	cmpeqi	r2,r2,255
    b9c0:	1000041e 	bne	r2,zero,b9d4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    b9c4:	e0bfff17 	ldw	r2,-4(fp)
    b9c8:	00c00a84 	movi	r3,42
    b9cc:	10c00005 	stb	r3,0(r2)
            return;
    b9d0:	00005506 	br	bb28 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    b9d4:	e0bffe17 	ldw	r2,-8(fp)
    b9d8:	1000041e 	bne	r2,zero,b9ec <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    b9dc:	e0bfff17 	ldw	r2,-4(fp)
    b9e0:	00c00304 	movi	r3,12
    b9e4:	10c00005 	stb	r3,0(r2)
        return;
    b9e8:	00004f06 	br	bb28 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    b9ec:	00800074 	movhi	r2,1
    b9f0:	1091ce04 	addi	r2,r2,18232
    b9f4:	10800003 	ldbu	r2,0(r2)
    b9f8:	10803fcc 	andi	r2,r2,255
    b9fc:	10000426 	beq	r2,zero,ba10 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    ba00:	e0bfff17 	ldw	r2,-4(fp)
    ba04:	00c00484 	movi	r3,18
    ba08:	10c00005 	stb	r3,0(r2)
        return;
    ba0c:	00004606 	br	bb28 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba10:	0005303a 	rdctl	r2,status
    ba14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba18:	e0fff817 	ldw	r3,-32(fp)
    ba1c:	00bfff84 	movi	r2,-2
    ba20:	1884703a 	and	r2,r3,r2
    ba24:	1001703a 	wrctl	status,r2
  
  return context;
    ba28:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    ba2c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    ba30:	e0bffd03 	ldbu	r2,-12(fp)
    ba34:	10803fd8 	cmpnei	r2,r2,255
    ba38:	1000051e 	bne	r2,zero,ba50 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    ba3c:	00800074 	movhi	r2,1
    ba40:	1091cf04 	addi	r2,r2,18236
    ba44:	10800017 	ldw	r2,0(r2)
    ba48:	10800c83 	ldbu	r2,50(r2)
    ba4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    ba50:	e0fffd03 	ldbu	r3,-12(fp)
    ba54:	008000b4 	movhi	r2,2
    ba58:	10865604 	addi	r2,r2,6488
    ba5c:	18c7883a 	add	r3,r3,r3
    ba60:	18c7883a 	add	r3,r3,r3
    ba64:	10c5883a 	add	r2,r2,r3
    ba68:	10800017 	ldw	r2,0(r2)
    ba6c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    ba70:	e0bff617 	ldw	r2,-40(fp)
    ba74:	1000081e 	bne	r2,zero,ba98 <OSTaskNameSet+0x11c>
    ba78:	e0bff517 	ldw	r2,-44(fp)
    ba7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba80:	e0bff917 	ldw	r2,-28(fp)
    ba84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    ba88:	e0bfff17 	ldw	r2,-4(fp)
    ba8c:	00c010c4 	movi	r3,67
    ba90:	10c00005 	stb	r3,0(r2)
        return;
    ba94:	00002406 	br	bb28 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    ba98:	e0bff617 	ldw	r2,-40(fp)
    ba9c:	10800058 	cmpnei	r2,r2,1
    baa0:	1000081e 	bne	r2,zero,bac4 <OSTaskNameSet+0x148>
    baa4:	e0bff517 	ldw	r2,-44(fp)
    baa8:	e0bffa15 	stw	r2,-24(fp)
    baac:	e0bffa17 	ldw	r2,-24(fp)
    bab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    bab4:	e0bfff17 	ldw	r2,-4(fp)
    bab8:	00c010c4 	movi	r3,67
    babc:	10c00005 	stb	r3,0(r2)
        return;
    bac0:	00001906 	br	bb28 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    bac4:	e13ffe17 	ldw	r4,-8(fp)
    bac8:	00066480 	call	6648 <OS_StrLen>
    bacc:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    bad0:	e0bff703 	ldbu	r2,-36(fp)
    bad4:	10800830 	cmpltui	r2,r2,32
    bad8:	1000081e 	bne	r2,zero,bafc <OSTaskNameSet+0x180>
    badc:	e0bff517 	ldw	r2,-44(fp)
    bae0:	e0bffb15 	stw	r2,-20(fp)
    bae4:	e0bffb17 	ldw	r2,-20(fp)
    bae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    baec:	e0bfff17 	ldw	r2,-4(fp)
    baf0:	00c01044 	movi	r3,65
    baf4:	10c00005 	stb	r3,0(r2)
        return;
    baf8:	00000b06 	br	bb28 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    bafc:	e0bff617 	ldw	r2,-40(fp)
    bb00:	10801304 	addi	r2,r2,76
    bb04:	1009883a 	mov	r4,r2
    bb08:	e17ffe17 	ldw	r5,-8(fp)
    bb0c:	00065d40 	call	65d4 <OS_StrCopy>
    bb10:	e0bff517 	ldw	r2,-44(fp)
    bb14:	e0bffc15 	stw	r2,-16(fp)
    bb18:	e0bffc17 	ldw	r2,-16(fp)
    bb1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    bb20:	e0bfff17 	ldw	r2,-4(fp)
    bb24:	10000005 	stb	zero,0(r2)
}
    bb28:	e037883a 	mov	sp,fp
    bb2c:	dfc00117 	ldw	ra,4(sp)
    bb30:	df000017 	ldw	fp,0(sp)
    bb34:	dec00204 	addi	sp,sp,8
    bb38:	f800283a 	ret

0000bb3c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    bb3c:	defff404 	addi	sp,sp,-48
    bb40:	dfc00b15 	stw	ra,44(sp)
    bb44:	df000a15 	stw	fp,40(sp)
    bb48:	df000a04 	addi	fp,sp,40
    bb4c:	2005883a 	mov	r2,r4
    bb50:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    bb54:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    bb58:	e0bfff03 	ldbu	r2,-4(fp)
    bb5c:	10800530 	cmpltui	r2,r2,20
    bb60:	1000021e 	bne	r2,zero,bb6c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    bb64:	00800a84 	movi	r2,42
    bb68:	00006d06 	br	bd20 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb6c:	0005303a 	rdctl	r2,status
    bb70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb74:	e0fff817 	ldw	r3,-32(fp)
    bb78:	00bfff84 	movi	r2,-2
    bb7c:	1884703a 	and	r2,r3,r2
    bb80:	1001703a 	wrctl	status,r2
  
  return context;
    bb84:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    bb88:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    bb8c:	e0ffff03 	ldbu	r3,-4(fp)
    bb90:	008000b4 	movhi	r2,2
    bb94:	10865604 	addi	r2,r2,6488
    bb98:	18c7883a 	add	r3,r3,r3
    bb9c:	18c7883a 	add	r3,r3,r3
    bba0:	10c5883a 	add	r2,r2,r3
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    bbac:	e0bff717 	ldw	r2,-36(fp)
    bbb0:	1000061e 	bne	r2,zero,bbcc <OSTaskResume+0x90>
    bbb4:	e0bff617 	ldw	r2,-40(fp)
    bbb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbbc:	e0bff917 	ldw	r2,-28(fp)
    bbc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    bbc4:	00801184 	movi	r2,70
    bbc8:	00005506 	br	bd20 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    bbcc:	e0bff717 	ldw	r2,-36(fp)
    bbd0:	10800058 	cmpnei	r2,r2,1
    bbd4:	1000061e 	bne	r2,zero,bbf0 <OSTaskResume+0xb4>
    bbd8:	e0bff617 	ldw	r2,-40(fp)
    bbdc:	e0bffa15 	stw	r2,-24(fp)
    bbe0:	e0bffa17 	ldw	r2,-24(fp)
    bbe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    bbe8:	008010c4 	movi	r2,67
    bbec:	00004c06 	br	bd20 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    bbf0:	e0bff717 	ldw	r2,-36(fp)
    bbf4:	10800c03 	ldbu	r2,48(r2)
    bbf8:	10803fcc 	andi	r2,r2,255
    bbfc:	1080020c 	andi	r2,r2,8
    bc00:	10004226 	beq	r2,zero,bd0c <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    bc04:	e0bff717 	ldw	r2,-36(fp)
    bc08:	10c00c03 	ldbu	r3,48(r2)
    bc0c:	00bffdc4 	movi	r2,-9
    bc10:	1884703a 	and	r2,r3,r2
    bc14:	1007883a 	mov	r3,r2
    bc18:	e0bff717 	ldw	r2,-36(fp)
    bc1c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    bc20:	e0bff717 	ldw	r2,-36(fp)
    bc24:	10800c03 	ldbu	r2,48(r2)
    bc28:	10803fcc 	andi	r2,r2,255
    bc2c:	1000311e 	bne	r2,zero,bcf4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    bc30:	e0bff717 	ldw	r2,-36(fp)
    bc34:	10800b8b 	ldhu	r2,46(r2)
    bc38:	10bfffcc 	andi	r2,r2,65535
    bc3c:	1000281e 	bne	r2,zero,bce0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    bc40:	e0bff717 	ldw	r2,-36(fp)
    bc44:	10c00d83 	ldbu	r3,54(r2)
    bc48:	00800074 	movhi	r2,1
    bc4c:	1091cc04 	addi	r2,r2,18224
    bc50:	10800003 	ldbu	r2,0(r2)
    bc54:	1884b03a 	or	r2,r3,r2
    bc58:	1007883a 	mov	r3,r2
    bc5c:	00800074 	movhi	r2,1
    bc60:	1091cc04 	addi	r2,r2,18224
    bc64:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    bc68:	e0bff717 	ldw	r2,-36(fp)
    bc6c:	10800d03 	ldbu	r2,52(r2)
    bc70:	10c03fcc 	andi	r3,r2,255
    bc74:	e0bff717 	ldw	r2,-36(fp)
    bc78:	10800d03 	ldbu	r2,52(r2)
    bc7c:	11003fcc 	andi	r4,r2,255
    bc80:	00800074 	movhi	r2,1
    bc84:	1091cc44 	addi	r2,r2,18225
    bc88:	1105883a 	add	r2,r2,r4
    bc8c:	11000003 	ldbu	r4,0(r2)
    bc90:	e0bff717 	ldw	r2,-36(fp)
    bc94:	10800d43 	ldbu	r2,53(r2)
    bc98:	2084b03a 	or	r2,r4,r2
    bc9c:	1009883a 	mov	r4,r2
    bca0:	00800074 	movhi	r2,1
    bca4:	1091cc44 	addi	r2,r2,18225
    bca8:	10c5883a 	add	r2,r2,r3
    bcac:	11000005 	stb	r4,0(r2)
    bcb0:	e0bff617 	ldw	r2,-40(fp)
    bcb4:	e0bffb15 	stw	r2,-20(fp)
    bcb8:	e0bffb17 	ldw	r2,-20(fp)
    bcbc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    bcc0:	00800074 	movhi	r2,1
    bcc4:	1091c044 	addi	r2,r2,18177
    bcc8:	10800003 	ldbu	r2,0(r2)
    bccc:	10803fcc 	andi	r2,r2,255
    bcd0:	10800058 	cmpnei	r2,r2,1
    bcd4:	10000b1e 	bne	r2,zero,bd04 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    bcd8:	00064980 	call	6498 <OS_Sched>
    bcdc:	00000906 	br	bd04 <OSTaskResume+0x1c8>
    bce0:	e0bff617 	ldw	r2,-40(fp)
    bce4:	e0bffc15 	stw	r2,-16(fp)
    bce8:	e0bffc17 	ldw	r2,-16(fp)
    bcec:	1001703a 	wrctl	status,r2
    bcf0:	00000406 	br	bd04 <OSTaskResume+0x1c8>
    bcf4:	e0bff617 	ldw	r2,-40(fp)
    bcf8:	e0bffd15 	stw	r2,-12(fp)
    bcfc:	e0bffd17 	ldw	r2,-12(fp)
    bd00:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    bd04:	0005883a 	mov	r2,zero
    bd08:	00000506 	br	bd20 <OSTaskResume+0x1e4>
    bd0c:	e0bff617 	ldw	r2,-40(fp)
    bd10:	e0bffe15 	stw	r2,-8(fp)
    bd14:	e0bffe17 	ldw	r2,-8(fp)
    bd18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    bd1c:	00801104 	movi	r2,68
}
    bd20:	e037883a 	mov	sp,fp
    bd24:	dfc00117 	ldw	ra,4(sp)
    bd28:	df000017 	ldw	fp,0(sp)
    bd2c:	dec00204 	addi	sp,sp,8
    bd30:	f800283a 	ret

0000bd34 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    bd34:	defff304 	addi	sp,sp,-52
    bd38:	df000c15 	stw	fp,48(sp)
    bd3c:	df000c04 	addi	fp,sp,48
    bd40:	2005883a 	mov	r2,r4
    bd44:	e17fff15 	stw	r5,-4(fp)
    bd48:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    bd4c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    bd50:	e0bffe03 	ldbu	r2,-8(fp)
    bd54:	10800570 	cmpltui	r2,r2,21
    bd58:	1000051e 	bne	r2,zero,bd70 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    bd5c:	e0bffe03 	ldbu	r2,-8(fp)
    bd60:	10803fe0 	cmpeqi	r2,r2,255
    bd64:	1000021e 	bne	r2,zero,bd70 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    bd68:	00800a84 	movi	r2,42
    bd6c:	00005f06 	br	beec <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    bd70:	e0bfff17 	ldw	r2,-4(fp)
    bd74:	1000021e 	bne	r2,zero,bd80 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    bd78:	00800244 	movi	r2,9
    bd7c:	00005b06 	br	beec <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    bd80:	e0bfff17 	ldw	r2,-4(fp)
    bd84:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    bd88:	e0bfff17 	ldw	r2,-4(fp)
    bd8c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd90:	0005303a 	rdctl	r2,status
    bd94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd98:	e0fff917 	ldw	r3,-28(fp)
    bd9c:	00bfff84 	movi	r2,-2
    bda0:	1884703a 	and	r2,r3,r2
    bda4:	1001703a 	wrctl	status,r2
  
  return context;
    bda8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    bdac:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    bdb0:	e0bffe03 	ldbu	r2,-8(fp)
    bdb4:	10803fd8 	cmpnei	r2,r2,255
    bdb8:	1000051e 	bne	r2,zero,bdd0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    bdbc:	00800074 	movhi	r2,1
    bdc0:	1091cf04 	addi	r2,r2,18236
    bdc4:	10800017 	ldw	r2,0(r2)
    bdc8:	10800c83 	ldbu	r2,50(r2)
    bdcc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bdd0:	e0fffe03 	ldbu	r3,-8(fp)
    bdd4:	008000b4 	movhi	r2,2
    bdd8:	10865604 	addi	r2,r2,6488
    bddc:	18c7883a 	add	r3,r3,r3
    bde0:	18c7883a 	add	r3,r3,r3
    bde4:	10c5883a 	add	r2,r2,r3
    bde8:	10800017 	ldw	r2,0(r2)
    bdec:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    bdf0:	e0bff717 	ldw	r2,-36(fp)
    bdf4:	1000061e 	bne	r2,zero,be10 <OSTaskStkChk+0xdc>
    bdf8:	e0bff617 	ldw	r2,-40(fp)
    bdfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be00:	e0bffa17 	ldw	r2,-24(fp)
    be04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    be08:	008010c4 	movi	r2,67
    be0c:	00003706 	br	beec <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    be10:	e0bff717 	ldw	r2,-36(fp)
    be14:	10800058 	cmpnei	r2,r2,1
    be18:	1000061e 	bne	r2,zero,be34 <OSTaskStkChk+0x100>
    be1c:	e0bff617 	ldw	r2,-40(fp)
    be20:	e0bffb15 	stw	r2,-20(fp)
    be24:	e0bffb17 	ldw	r2,-20(fp)
    be28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    be2c:	008010c4 	movi	r2,67
    be30:	00002e06 	br	beec <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    be34:	e0bff717 	ldw	r2,-36(fp)
    be38:	1080040b 	ldhu	r2,16(r2)
    be3c:	10bfffcc 	andi	r2,r2,65535
    be40:	1080004c 	andi	r2,r2,1
    be44:	1000061e 	bne	r2,zero,be60 <OSTaskStkChk+0x12c>
    be48:	e0bff617 	ldw	r2,-40(fp)
    be4c:	e0bffc15 	stw	r2,-16(fp)
    be50:	e0bffc17 	ldw	r2,-16(fp)
    be54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    be58:	00801144 	movi	r2,69
    be5c:	00002306 	br	beec <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    be60:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    be64:	e0bff717 	ldw	r2,-36(fp)
    be68:	10800317 	ldw	r2,12(r2)
    be6c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    be70:	e0bff717 	ldw	r2,-36(fp)
    be74:	10800217 	ldw	r2,8(r2)
    be78:	e0bff415 	stw	r2,-48(fp)
    be7c:	e0bff617 	ldw	r2,-40(fp)
    be80:	e0bffd15 	stw	r2,-12(fp)
    be84:	e0bffd17 	ldw	r2,-12(fp)
    be88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    be8c:	00000306 	br	be9c <OSTaskStkChk+0x168>
        nfree++;
    be90:	e0bff517 	ldw	r2,-44(fp)
    be94:	10800044 	addi	r2,r2,1
    be98:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    be9c:	e0bff417 	ldw	r2,-48(fp)
    bea0:	10c00104 	addi	r3,r2,4
    bea4:	e0fff415 	stw	r3,-48(fp)
    bea8:	10800017 	ldw	r2,0(r2)
    beac:	103ff826 	beq	r2,zero,be90 <__alt_mem_Flash_flash_data+0xf400be90>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    beb0:	e0bff517 	ldw	r2,-44(fp)
    beb4:	1085883a 	add	r2,r2,r2
    beb8:	1085883a 	add	r2,r2,r2
    bebc:	1007883a 	mov	r3,r2
    bec0:	e0bfff17 	ldw	r2,-4(fp)
    bec4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    bec8:	e0fff817 	ldw	r3,-32(fp)
    becc:	e0bff517 	ldw	r2,-44(fp)
    bed0:	1885c83a 	sub	r2,r3,r2
    bed4:	1085883a 	add	r2,r2,r2
    bed8:	1085883a 	add	r2,r2,r2
    bedc:	1007883a 	mov	r3,r2
    bee0:	e0bfff17 	ldw	r2,-4(fp)
    bee4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    bee8:	0005883a 	mov	r2,zero
}
    beec:	e037883a 	mov	sp,fp
    bef0:	df000017 	ldw	fp,0(sp)
    bef4:	dec00104 	addi	sp,sp,4
    bef8:	f800283a 	ret

0000befc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    befc:	defff504 	addi	sp,sp,-44
    bf00:	dfc00a15 	stw	ra,40(sp)
    bf04:	df000915 	stw	fp,36(sp)
    bf08:	df000904 	addi	fp,sp,36
    bf0c:	2005883a 	mov	r2,r4
    bf10:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bf14:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    bf18:	e0bfff03 	ldbu	r2,-4(fp)
    bf1c:	10800518 	cmpnei	r2,r2,20
    bf20:	1000021e 	bne	r2,zero,bf2c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    bf24:	008011c4 	movi	r2,71
    bf28:	00007406 	br	c0fc <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    bf2c:	e0bfff03 	ldbu	r2,-4(fp)
    bf30:	10800530 	cmpltui	r2,r2,20
    bf34:	1000051e 	bne	r2,zero,bf4c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    bf38:	e0bfff03 	ldbu	r2,-4(fp)
    bf3c:	10803fe0 	cmpeqi	r2,r2,255
    bf40:	1000021e 	bne	r2,zero,bf4c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    bf44:	00800a84 	movi	r2,42
    bf48:	00006c06 	br	c0fc <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf4c:	0005303a 	rdctl	r2,status
    bf50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf54:	e0fffb17 	ldw	r3,-20(fp)
    bf58:	00bfff84 	movi	r2,-2
    bf5c:	1884703a 	and	r2,r3,r2
    bf60:	1001703a 	wrctl	status,r2
  
  return context;
    bf64:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    bf68:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    bf6c:	e0bfff03 	ldbu	r2,-4(fp)
    bf70:	10803fd8 	cmpnei	r2,r2,255
    bf74:	1000081e 	bne	r2,zero,bf98 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    bf78:	00800074 	movhi	r2,1
    bf7c:	1091cf04 	addi	r2,r2,18236
    bf80:	10800017 	ldw	r2,0(r2)
    bf84:	10800c83 	ldbu	r2,50(r2)
    bf88:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    bf8c:	00800044 	movi	r2,1
    bf90:	e0bff705 	stb	r2,-36(fp)
    bf94:	00000b06 	br	bfc4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    bf98:	00800074 	movhi	r2,1
    bf9c:	1091cf04 	addi	r2,r2,18236
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	10800c83 	ldbu	r2,50(r2)
    bfa8:	10c03fcc 	andi	r3,r2,255
    bfac:	e0bfff03 	ldbu	r2,-4(fp)
    bfb0:	1880031e 	bne	r3,r2,bfc0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    bfb4:	00800044 	movi	r2,1
    bfb8:	e0bff705 	stb	r2,-36(fp)
    bfbc:	00000106 	br	bfc4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    bfc0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    bfc4:	e0ffff03 	ldbu	r3,-4(fp)
    bfc8:	008000b4 	movhi	r2,2
    bfcc:	10865604 	addi	r2,r2,6488
    bfd0:	18c7883a 	add	r3,r3,r3
    bfd4:	18c7883a 	add	r3,r3,r3
    bfd8:	10c5883a 	add	r2,r2,r3
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    bfe4:	e0bff917 	ldw	r2,-28(fp)
    bfe8:	1000061e 	bne	r2,zero,c004 <OSTaskSuspend+0x108>
    bfec:	e0bff817 	ldw	r2,-32(fp)
    bff0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bff4:	e0bffc17 	ldw	r2,-16(fp)
    bff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    bffc:	00801204 	movi	r2,72
    c000:	00003e06 	br	c0fc <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    c004:	e0bff917 	ldw	r2,-28(fp)
    c008:	10800058 	cmpnei	r2,r2,1
    c00c:	1000061e 	bne	r2,zero,c028 <OSTaskSuspend+0x12c>
    c010:	e0bff817 	ldw	r2,-32(fp)
    c014:	e0bffd15 	stw	r2,-12(fp)
    c018:	e0bffd17 	ldw	r2,-12(fp)
    c01c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c020:	008010c4 	movi	r2,67
    c024:	00003506 	br	c0fc <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    c028:	e0bff917 	ldw	r2,-28(fp)
    c02c:	10800d03 	ldbu	r2,52(r2)
    c030:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    c034:	e0fffa03 	ldbu	r3,-24(fp)
    c038:	e13ffa03 	ldbu	r4,-24(fp)
    c03c:	00800074 	movhi	r2,1
    c040:	1091cc44 	addi	r2,r2,18225
    c044:	1105883a 	add	r2,r2,r4
    c048:	10800003 	ldbu	r2,0(r2)
    c04c:	1009883a 	mov	r4,r2
    c050:	e0bff917 	ldw	r2,-28(fp)
    c054:	10800d43 	ldbu	r2,53(r2)
    c058:	0084303a 	nor	r2,zero,r2
    c05c:	2084703a 	and	r2,r4,r2
    c060:	1009883a 	mov	r4,r2
    c064:	00800074 	movhi	r2,1
    c068:	1091cc44 	addi	r2,r2,18225
    c06c:	10c5883a 	add	r2,r2,r3
    c070:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    c074:	e0fffa03 	ldbu	r3,-24(fp)
    c078:	00800074 	movhi	r2,1
    c07c:	1091cc44 	addi	r2,r2,18225
    c080:	10c5883a 	add	r2,r2,r3
    c084:	10800003 	ldbu	r2,0(r2)
    c088:	10803fcc 	andi	r2,r2,255
    c08c:	10000c1e 	bne	r2,zero,c0c0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    c090:	e0bff917 	ldw	r2,-28(fp)
    c094:	10800d83 	ldbu	r2,54(r2)
    c098:	0084303a 	nor	r2,zero,r2
    c09c:	1007883a 	mov	r3,r2
    c0a0:	00800074 	movhi	r2,1
    c0a4:	1091cc04 	addi	r2,r2,18224
    c0a8:	10800003 	ldbu	r2,0(r2)
    c0ac:	1884703a 	and	r2,r3,r2
    c0b0:	1007883a 	mov	r3,r2
    c0b4:	00800074 	movhi	r2,1
    c0b8:	1091cc04 	addi	r2,r2,18224
    c0bc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    c0c0:	e0bff917 	ldw	r2,-28(fp)
    c0c4:	10800c03 	ldbu	r2,48(r2)
    c0c8:	10800214 	ori	r2,r2,8
    c0cc:	1007883a 	mov	r3,r2
    c0d0:	e0bff917 	ldw	r2,-28(fp)
    c0d4:	10c00c05 	stb	r3,48(r2)
    c0d8:	e0bff817 	ldw	r2,-32(fp)
    c0dc:	e0bffe15 	stw	r2,-8(fp)
    c0e0:	e0bffe17 	ldw	r2,-8(fp)
    c0e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    c0e8:	e0bff703 	ldbu	r2,-36(fp)
    c0ec:	10800058 	cmpnei	r2,r2,1
    c0f0:	1000011e 	bne	r2,zero,c0f8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    c0f4:	00064980 	call	6498 <OS_Sched>
    }
    return (OS_ERR_NONE);
    c0f8:	0005883a 	mov	r2,zero
}
    c0fc:	e037883a 	mov	sp,fp
    c100:	dfc00117 	ldw	ra,4(sp)
    c104:	df000017 	ldw	fp,0(sp)
    c108:	dec00204 	addi	sp,sp,8
    c10c:	f800283a 	ret

0000c110 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    c110:	defff604 	addi	sp,sp,-40
    c114:	dfc00915 	stw	ra,36(sp)
    c118:	df000815 	stw	fp,32(sp)
    c11c:	df000804 	addi	fp,sp,32
    c120:	2005883a 	mov	r2,r4
    c124:	e17fff15 	stw	r5,-4(fp)
    c128:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c12c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    c130:	e0bffe03 	ldbu	r2,-8(fp)
    c134:	10800570 	cmpltui	r2,r2,21
    c138:	1000051e 	bne	r2,zero,c150 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    c13c:	e0bffe03 	ldbu	r2,-8(fp)
    c140:	10803fe0 	cmpeqi	r2,r2,255
    c144:	1000021e 	bne	r2,zero,c150 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    c148:	00800a84 	movi	r2,42
    c14c:	00003606 	br	c228 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    c150:	e0bfff17 	ldw	r2,-4(fp)
    c154:	1000021e 	bne	r2,zero,c160 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    c158:	00800244 	movi	r2,9
    c15c:	00003206 	br	c228 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c160:	0005303a 	rdctl	r2,status
    c164:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c168:	e0fffa17 	ldw	r3,-24(fp)
    c16c:	00bfff84 	movi	r2,-2
    c170:	1884703a 	and	r2,r3,r2
    c174:	1001703a 	wrctl	status,r2
  
  return context;
    c178:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    c17c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    c180:	e0bffe03 	ldbu	r2,-8(fp)
    c184:	10803fd8 	cmpnei	r2,r2,255
    c188:	1000051e 	bne	r2,zero,c1a0 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    c18c:	00800074 	movhi	r2,1
    c190:	1091cf04 	addi	r2,r2,18236
    c194:	10800017 	ldw	r2,0(r2)
    c198:	10800c83 	ldbu	r2,50(r2)
    c19c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    c1a0:	e0fffe03 	ldbu	r3,-8(fp)
    c1a4:	008000b4 	movhi	r2,2
    c1a8:	10865604 	addi	r2,r2,6488
    c1ac:	18c7883a 	add	r3,r3,r3
    c1b0:	18c7883a 	add	r3,r3,r3
    c1b4:	10c5883a 	add	r2,r2,r3
    c1b8:	10800017 	ldw	r2,0(r2)
    c1bc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    c1c0:	e0bff917 	ldw	r2,-28(fp)
    c1c4:	1000061e 	bne	r2,zero,c1e0 <OSTaskQuery+0xd0>
    c1c8:	e0bff817 	ldw	r2,-32(fp)
    c1cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1d0:	e0bffb17 	ldw	r2,-20(fp)
    c1d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    c1d8:	00800a44 	movi	r2,41
    c1dc:	00001206 	br	c228 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    c1e0:	e0bff917 	ldw	r2,-28(fp)
    c1e4:	10800058 	cmpnei	r2,r2,1
    c1e8:	1000061e 	bne	r2,zero,c204 <OSTaskQuery+0xf4>
    c1ec:	e0bff817 	ldw	r2,-32(fp)
    c1f0:	e0bffc15 	stw	r2,-16(fp)
    c1f4:	e0bffc17 	ldw	r2,-16(fp)
    c1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    c1fc:	008010c4 	movi	r2,67
    c200:	00000906 	br	c228 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    c204:	e13fff17 	ldw	r4,-4(fp)
    c208:	e17ff917 	ldw	r5,-28(fp)
    c20c:	01801b04 	movi	r6,108
    c210:	00064340 	call	6434 <OS_MemCopy>
    c214:	e0bff817 	ldw	r2,-32(fp)
    c218:	e0bffd15 	stw	r2,-12(fp)
    c21c:	e0bffd17 	ldw	r2,-12(fp)
    c220:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    c224:	0005883a 	mov	r2,zero
}
    c228:	e037883a 	mov	sp,fp
    c22c:	dfc00117 	ldw	ra,4(sp)
    c230:	df000017 	ldw	fp,0(sp)
    c234:	dec00204 	addi	sp,sp,8
    c238:	f800283a 	ret

0000c23c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    c23c:	defffc04 	addi	sp,sp,-16
    c240:	df000315 	stw	fp,12(sp)
    c244:	df000304 	addi	fp,sp,12
    c248:	e13ffd15 	stw	r4,-12(fp)
    c24c:	e17ffe15 	stw	r5,-8(fp)
    c250:	3005883a 	mov	r2,r6
    c254:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    c258:	e0bfff0b 	ldhu	r2,-4(fp)
    c25c:	1080004c 	andi	r2,r2,1
    c260:	10000d26 	beq	r2,zero,c298 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    c264:	e0bfff0b 	ldhu	r2,-4(fp)
    c268:	1080008c 	andi	r2,r2,2
    c26c:	10000a26 	beq	r2,zero,c298 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    c270:	00000706 	br	c290 <OS_TaskStkClr+0x54>
                size--;
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10bfffc4 	addi	r2,r2,-1
    c27c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    c280:	e0bffd17 	ldw	r2,-12(fp)
    c284:	10c00104 	addi	r3,r2,4
    c288:	e0fffd15 	stw	r3,-12(fp)
    c28c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    c290:	e0bffe17 	ldw	r2,-8(fp)
    c294:	103ff71e 	bne	r2,zero,c274 <__alt_mem_Flash_flash_data+0xf400c274>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    c298:	e037883a 	mov	sp,fp
    c29c:	df000017 	ldw	fp,0(sp)
    c2a0:	dec00104 	addi	sp,sp,4
    c2a4:	f800283a 	ret

0000c2a8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    c2a8:	defff904 	addi	sp,sp,-28
    c2ac:	dfc00615 	stw	ra,24(sp)
    c2b0:	df000515 	stw	fp,20(sp)
    c2b4:	df000504 	addi	fp,sp,20
    c2b8:	2005883a 	mov	r2,r4
    c2bc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c2c0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    c2c4:	00800074 	movhi	r2,1
    c2c8:	1091ce04 	addi	r2,r2,18232
    c2cc:	10800003 	ldbu	r2,0(r2)
    c2d0:	10803fcc 	andi	r2,r2,255
    c2d4:	10000126 	beq	r2,zero,c2dc <OSTimeDly+0x34>
        return;
    c2d8:	00004006 	br	c3dc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    c2dc:	e0bfff0b 	ldhu	r2,-4(fp)
    c2e0:	10003e26 	beq	r2,zero,c3dc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2e4:	0005303a 	rdctl	r2,status
    c2e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2ec:	e0fffd17 	ldw	r3,-12(fp)
    c2f0:	00bfff84 	movi	r2,-2
    c2f4:	1884703a 	and	r2,r3,r2
    c2f8:	1001703a 	wrctl	status,r2
  
  return context;
    c2fc:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    c300:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    c304:	00800074 	movhi	r2,1
    c308:	1091cf04 	addi	r2,r2,18236
    c30c:	10800017 	ldw	r2,0(r2)
    c310:	10800d03 	ldbu	r2,52(r2)
    c314:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    c318:	e0fffc03 	ldbu	r3,-16(fp)
    c31c:	e13ffc03 	ldbu	r4,-16(fp)
    c320:	00800074 	movhi	r2,1
    c324:	1091cc44 	addi	r2,r2,18225
    c328:	1105883a 	add	r2,r2,r4
    c32c:	10800003 	ldbu	r2,0(r2)
    c330:	1009883a 	mov	r4,r2
    c334:	00800074 	movhi	r2,1
    c338:	1091cf04 	addi	r2,r2,18236
    c33c:	10800017 	ldw	r2,0(r2)
    c340:	10800d43 	ldbu	r2,53(r2)
    c344:	0084303a 	nor	r2,zero,r2
    c348:	2084703a 	and	r2,r4,r2
    c34c:	1009883a 	mov	r4,r2
    c350:	00800074 	movhi	r2,1
    c354:	1091cc44 	addi	r2,r2,18225
    c358:	10c5883a 	add	r2,r2,r3
    c35c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    c360:	e0fffc03 	ldbu	r3,-16(fp)
    c364:	00800074 	movhi	r2,1
    c368:	1091cc44 	addi	r2,r2,18225
    c36c:	10c5883a 	add	r2,r2,r3
    c370:	10800003 	ldbu	r2,0(r2)
    c374:	10803fcc 	andi	r2,r2,255
    c378:	10000e1e 	bne	r2,zero,c3b4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    c37c:	00800074 	movhi	r2,1
    c380:	1091cf04 	addi	r2,r2,18236
    c384:	10800017 	ldw	r2,0(r2)
    c388:	10800d83 	ldbu	r2,54(r2)
    c38c:	0084303a 	nor	r2,zero,r2
    c390:	1007883a 	mov	r3,r2
    c394:	00800074 	movhi	r2,1
    c398:	1091cc04 	addi	r2,r2,18224
    c39c:	10800003 	ldbu	r2,0(r2)
    c3a0:	1884703a 	and	r2,r3,r2
    c3a4:	1007883a 	mov	r3,r2
    c3a8:	00800074 	movhi	r2,1
    c3ac:	1091cc04 	addi	r2,r2,18224
    c3b0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    c3b4:	00800074 	movhi	r2,1
    c3b8:	1091cf04 	addi	r2,r2,18236
    c3bc:	10800017 	ldw	r2,0(r2)
    c3c0:	e0ffff0b 	ldhu	r3,-4(fp)
    c3c4:	10c00b8d 	sth	r3,46(r2)
    c3c8:	e0bffb17 	ldw	r2,-20(fp)
    c3cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c3d0:	e0bffe17 	ldw	r2,-8(fp)
    c3d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    c3d8:	00064980 	call	6498 <OS_Sched>
    }
}
    c3dc:	e037883a 	mov	sp,fp
    c3e0:	dfc00117 	ldw	ra,4(sp)
    c3e4:	df000017 	ldw	fp,0(sp)
    c3e8:	dec00204 	addi	sp,sp,8
    c3ec:	f800283a 	ret

0000c3f0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    c3f0:	defff804 	addi	sp,sp,-32
    c3f4:	dfc00715 	stw	ra,28(sp)
    c3f8:	df000615 	stw	fp,24(sp)
    c3fc:	df000604 	addi	fp,sp,24
    c400:	2015883a 	mov	r10,r4
    c404:	2809883a 	mov	r4,r5
    c408:	3007883a 	mov	r3,r6
    c40c:	3805883a 	mov	r2,r7
    c410:	e2bffc05 	stb	r10,-16(fp)
    c414:	e13ffd05 	stb	r4,-12(fp)
    c418:	e0fffe05 	stb	r3,-8(fp)
    c41c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    c420:	00800074 	movhi	r2,1
    c424:	1091ce04 	addi	r2,r2,18232
    c428:	10800003 	ldbu	r2,0(r2)
    c42c:	10803fcc 	andi	r2,r2,255
    c430:	10000226 	beq	r2,zero,c43c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    c434:	00801544 	movi	r2,85
    c438:	00004206 	br	c544 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    c43c:	e0bffc03 	ldbu	r2,-16(fp)
    c440:	1000081e 	bne	r2,zero,c464 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    c444:	e0bffd03 	ldbu	r2,-12(fp)
    c448:	1000061e 	bne	r2,zero,c464 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    c44c:	e0bffe03 	ldbu	r2,-8(fp)
    c450:	1000041e 	bne	r2,zero,c464 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    c454:	e0bfff0b 	ldhu	r2,-4(fp)
    c458:	1000021e 	bne	r2,zero,c464 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    c45c:	00801504 	movi	r2,84
    c460:	00003806 	br	c544 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    c464:	e0bffd03 	ldbu	r2,-12(fp)
    c468:	10800f30 	cmpltui	r2,r2,60
    c46c:	1000021e 	bne	r2,zero,c478 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    c470:	00801444 	movi	r2,81
    c474:	00003306 	br	c544 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    c478:	e0bffe03 	ldbu	r2,-8(fp)
    c47c:	10800f30 	cmpltui	r2,r2,60
    c480:	1000021e 	bne	r2,zero,c48c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    c484:	00801484 	movi	r2,82
    c488:	00002e06 	br	c544 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    c48c:	e0bfff0b 	ldhu	r2,-4(fp)
    c490:	1080fa30 	cmpltui	r2,r2,1000
    c494:	1000021e 	bne	r2,zero,c4a0 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    c498:	008014c4 	movi	r2,83
    c49c:	00002906 	br	c544 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    c4a0:	e0bffc03 	ldbu	r2,-16(fp)
    c4a4:	10c38424 	muli	r3,r2,3600
    c4a8:	e0bffd03 	ldbu	r2,-12(fp)
    c4ac:	10800f24 	muli	r2,r2,60
    c4b0:	1887883a 	add	r3,r3,r2
    c4b4:	e0bffe03 	ldbu	r2,-8(fp)
    c4b8:	1885883a 	add	r2,r3,r2
    c4bc:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    c4c0:	e0bfff0b 	ldhu	r2,-4(fp)
    c4c4:	10800f84 	addi	r2,r2,62
    c4c8:	100690fa 	slli	r3,r2,3
    c4cc:	008418b4 	movhi	r2,4194
    c4d0:	109374c4 	addi	r2,r2,19923
    c4d4:	188a383a 	mulxuu	r5,r3,r2
    c4d8:	1885383a 	mul	r2,r3,r2
    c4dc:	1011883a 	mov	r8,r2
    c4e0:	2813883a 	mov	r9,r5
    c4e4:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    c4e8:	2085883a 	add	r2,r4,r2
    c4ec:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    c4f0:	e0bffb17 	ldw	r2,-20(fp)
    c4f4:	1004d43a 	srli	r2,r2,16
    c4f8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    c4fc:	e0bffb17 	ldw	r2,-20(fp)
    c500:	10bfffcc 	andi	r2,r2,65535
    c504:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    c508:	e0bffb17 	ldw	r2,-20(fp)
    c50c:	10bfffcc 	andi	r2,r2,65535
    c510:	1009883a 	mov	r4,r2
    c514:	000c2a80 	call	c2a8 <OSTimeDly>
    while (loops > 0) {
    c518:	00000706 	br	c538 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    c51c:	01200014 	movui	r4,32768
    c520:	000c2a80 	call	c2a8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    c524:	01200014 	movui	r4,32768
    c528:	000c2a80 	call	c2a8 <OSTimeDly>
        loops--;
    c52c:	e0bffa0b 	ldhu	r2,-24(fp)
    c530:	10bfffc4 	addi	r2,r2,-1
    c534:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    c538:	e0bffa0b 	ldhu	r2,-24(fp)
    c53c:	103ff71e 	bne	r2,zero,c51c <__alt_mem_Flash_flash_data+0xf400c51c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    c540:	0005883a 	mov	r2,zero
}
    c544:	e037883a 	mov	sp,fp
    c548:	dfc00117 	ldw	ra,4(sp)
    c54c:	df000017 	ldw	fp,0(sp)
    c550:	dec00204 	addi	sp,sp,8
    c554:	f800283a 	ret

0000c558 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    c558:	defff504 	addi	sp,sp,-44
    c55c:	dfc00a15 	stw	ra,40(sp)
    c560:	df000915 	stw	fp,36(sp)
    c564:	df000904 	addi	fp,sp,36
    c568:	2005883a 	mov	r2,r4
    c56c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    c570:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    c574:	e0bfff03 	ldbu	r2,-4(fp)
    c578:	10800530 	cmpltui	r2,r2,20
    c57c:	1000021e 	bne	r2,zero,c588 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    c580:	00800a84 	movi	r2,42
    c584:	00006b06 	br	c734 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c588:	0005303a 	rdctl	r2,status
    c58c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c590:	e0fff917 	ldw	r3,-28(fp)
    c594:	00bfff84 	movi	r2,-2
    c598:	1884703a 	and	r2,r3,r2
    c59c:	1001703a 	wrctl	status,r2
  
  return context;
    c5a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    c5a4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    c5a8:	e0ffff03 	ldbu	r3,-4(fp)
    c5ac:	008000b4 	movhi	r2,2
    c5b0:	10865604 	addi	r2,r2,6488
    c5b4:	18c7883a 	add	r3,r3,r3
    c5b8:	18c7883a 	add	r3,r3,r3
    c5bc:	10c5883a 	add	r2,r2,r3
    c5c0:	10800017 	ldw	r2,0(r2)
    c5c4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    c5c8:	e0bff817 	ldw	r2,-32(fp)
    c5cc:	1000061e 	bne	r2,zero,c5e8 <OSTimeDlyResume+0x90>
    c5d0:	e0bff717 	ldw	r2,-36(fp)
    c5d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5d8:	e0bffa17 	ldw	r2,-24(fp)
    c5dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    c5e0:	008010c4 	movi	r2,67
    c5e4:	00005306 	br	c734 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    c5e8:	e0bff817 	ldw	r2,-32(fp)
    c5ec:	10800058 	cmpnei	r2,r2,1
    c5f0:	1000061e 	bne	r2,zero,c60c <OSTimeDlyResume+0xb4>
    c5f4:	e0bff717 	ldw	r2,-36(fp)
    c5f8:	e0bffb15 	stw	r2,-20(fp)
    c5fc:	e0bffb17 	ldw	r2,-20(fp)
    c600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    c604:	008010c4 	movi	r2,67
    c608:	00004a06 	br	c734 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    c60c:	e0bff817 	ldw	r2,-32(fp)
    c610:	10800b8b 	ldhu	r2,46(r2)
    c614:	10bfffcc 	andi	r2,r2,65535
    c618:	1000061e 	bne	r2,zero,c634 <OSTimeDlyResume+0xdc>
    c61c:	e0bff717 	ldw	r2,-36(fp)
    c620:	e0bffc15 	stw	r2,-16(fp)
    c624:	e0bffc17 	ldw	r2,-16(fp)
    c628:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    c62c:	00801404 	movi	r2,80
    c630:	00004006 	br	c734 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    c634:	e0bff817 	ldw	r2,-32(fp)
    c638:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    c63c:	e0bff817 	ldw	r2,-32(fp)
    c640:	10800c03 	ldbu	r2,48(r2)
    c644:	10803fcc 	andi	r2,r2,255
    c648:	10800dcc 	andi	r2,r2,55
    c64c:	10000b26 	beq	r2,zero,c67c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    c650:	e0bff817 	ldw	r2,-32(fp)
    c654:	10c00c03 	ldbu	r3,48(r2)
    c658:	00bff204 	movi	r2,-56
    c65c:	1884703a 	and	r2,r3,r2
    c660:	1007883a 	mov	r3,r2
    c664:	e0bff817 	ldw	r2,-32(fp)
    c668:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    c66c:	e0bff817 	ldw	r2,-32(fp)
    c670:	00c00044 	movi	r3,1
    c674:	10c00c45 	stb	r3,49(r2)
    c678:	00000206 	br	c684 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    c67c:	e0bff817 	ldw	r2,-32(fp)
    c680:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    c684:	e0bff817 	ldw	r2,-32(fp)
    c688:	10800c03 	ldbu	r2,48(r2)
    c68c:	10803fcc 	andi	r2,r2,255
    c690:	1080020c 	andi	r2,r2,8
    c694:	1000221e 	bne	r2,zero,c720 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    c698:	e0bff817 	ldw	r2,-32(fp)
    c69c:	10c00d83 	ldbu	r3,54(r2)
    c6a0:	00800074 	movhi	r2,1
    c6a4:	1091cc04 	addi	r2,r2,18224
    c6a8:	10800003 	ldbu	r2,0(r2)
    c6ac:	1884b03a 	or	r2,r3,r2
    c6b0:	1007883a 	mov	r3,r2
    c6b4:	00800074 	movhi	r2,1
    c6b8:	1091cc04 	addi	r2,r2,18224
    c6bc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    c6c0:	e0bff817 	ldw	r2,-32(fp)
    c6c4:	10800d03 	ldbu	r2,52(r2)
    c6c8:	10c03fcc 	andi	r3,r2,255
    c6cc:	e0bff817 	ldw	r2,-32(fp)
    c6d0:	10800d03 	ldbu	r2,52(r2)
    c6d4:	11003fcc 	andi	r4,r2,255
    c6d8:	00800074 	movhi	r2,1
    c6dc:	1091cc44 	addi	r2,r2,18225
    c6e0:	1105883a 	add	r2,r2,r4
    c6e4:	11000003 	ldbu	r4,0(r2)
    c6e8:	e0bff817 	ldw	r2,-32(fp)
    c6ec:	10800d43 	ldbu	r2,53(r2)
    c6f0:	2084b03a 	or	r2,r4,r2
    c6f4:	1009883a 	mov	r4,r2
    c6f8:	00800074 	movhi	r2,1
    c6fc:	1091cc44 	addi	r2,r2,18225
    c700:	10c5883a 	add	r2,r2,r3
    c704:	11000005 	stb	r4,0(r2)
    c708:	e0bff717 	ldw	r2,-36(fp)
    c70c:	e0bffd15 	stw	r2,-12(fp)
    c710:	e0bffd17 	ldw	r2,-12(fp)
    c714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    c718:	00064980 	call	6498 <OS_Sched>
    c71c:	00000406 	br	c730 <OSTimeDlyResume+0x1d8>
    c720:	e0bff717 	ldw	r2,-36(fp)
    c724:	e0bffe15 	stw	r2,-8(fp)
    c728:	e0bffe17 	ldw	r2,-8(fp)
    c72c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    c730:	0005883a 	mov	r2,zero
}
    c734:	e037883a 	mov	sp,fp
    c738:	dfc00117 	ldw	ra,4(sp)
    c73c:	df000017 	ldw	fp,0(sp)
    c740:	dec00204 	addi	sp,sp,8
    c744:	f800283a 	ret

0000c748 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    c748:	defffb04 	addi	sp,sp,-20
    c74c:	df000415 	stw	fp,16(sp)
    c750:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c754:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c758:	0005303a 	rdctl	r2,status
    c75c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c760:	e0fffe17 	ldw	r3,-8(fp)
    c764:	00bfff84 	movi	r2,-2
    c768:	1884703a 	and	r2,r3,r2
    c76c:	1001703a 	wrctl	status,r2
  
  return context;
    c770:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    c774:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    c778:	00800074 	movhi	r2,1
    c77c:	1091d004 	addi	r2,r2,18240
    c780:	10800017 	ldw	r2,0(r2)
    c784:	e0bffd15 	stw	r2,-12(fp)
    c788:	e0bffc17 	ldw	r2,-16(fp)
    c78c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c790:	e0bfff17 	ldw	r2,-4(fp)
    c794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    c798:	e0bffd17 	ldw	r2,-12(fp)
}
    c79c:	e037883a 	mov	sp,fp
    c7a0:	df000017 	ldw	fp,0(sp)
    c7a4:	dec00104 	addi	sp,sp,4
    c7a8:	f800283a 	ret

0000c7ac <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    c7ac:	defffb04 	addi	sp,sp,-20
    c7b0:	df000415 	stw	fp,16(sp)
    c7b4:	df000404 	addi	fp,sp,16
    c7b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c7bc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c7c0:	0005303a 	rdctl	r2,status
    c7c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c7c8:	e0fffd17 	ldw	r3,-12(fp)
    c7cc:	00bfff84 	movi	r2,-2
    c7d0:	1884703a 	and	r2,r3,r2
    c7d4:	1001703a 	wrctl	status,r2
  
  return context;
    c7d8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    c7dc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    c7e0:	00800074 	movhi	r2,1
    c7e4:	1091d004 	addi	r2,r2,18240
    c7e8:	e0ffff17 	ldw	r3,-4(fp)
    c7ec:	10c00015 	stw	r3,0(r2)
    c7f0:	e0bffc17 	ldw	r2,-16(fp)
    c7f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c7f8:	e0bffe17 	ldw	r2,-8(fp)
    c7fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    c800:	e037883a 	mov	sp,fp
    c804:	df000017 	ldw	fp,0(sp)
    c808:	dec00104 	addi	sp,sp,4
    c80c:	f800283a 	ret

0000c810 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c810:	defffd04 	addi	sp,sp,-12
    c814:	dfc00215 	stw	ra,8(sp)
    c818:	df000115 	stw	fp,4(sp)
    c81c:	df000104 	addi	fp,sp,4
    c820:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c824:	e13fff17 	ldw	r4,-4(fp)
    c828:	01400074 	movhi	r5,1
    c82c:	2949d104 	addi	r5,r5,10052
    c830:	000f1e40 	call	f1e4 <alt_dev_llist_insert>
}
    c834:	e037883a 	mov	sp,fp
    c838:	dfc00117 	ldw	ra,4(sp)
    c83c:	df000017 	ldw	fp,0(sp)
    c840:	dec00204 	addi	sp,sp,8
    c844:	f800283a 	ret

0000c848 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c848:	defffd04 	addi	sp,sp,-12
    c84c:	dfc00215 	stw	ra,8(sp)
    c850:	df000115 	stw	fp,4(sp)
    c854:	df000104 	addi	fp,sp,4
    c858:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    c85c:	000faf80 	call	faf8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c860:	00800044 	movi	r2,1
    c864:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c868:	e037883a 	mov	sp,fp
    c86c:	dfc00117 	ldw	ra,4(sp)
    c870:	df000017 	ldw	fp,0(sp)
    c874:	dec00204 	addi	sp,sp,8
    c878:	f800283a 	ret

0000c87c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c87c:	defffd04 	addi	sp,sp,-12
    c880:	dfc00215 	stw	ra,8(sp)
    c884:	df000115 	stw	fp,4(sp)
    c888:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c88c:	01040034 	movhi	r4,4096
    c890:	21080004 	addi	r4,r4,8192
    c894:	000b883a 	mov	r5,zero
    c898:	000d883a 	mov	r6,zero
    c89c:	01c00204 	movi	r7,8
    c8a0:	000d9f00 	call	d9f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c8a4:	01000074 	movhi	r4,1
    c8a8:	2104cf04 	addi	r4,r4,4924
    c8ac:	000b883a 	mov	r5,zero
    c8b0:	01800204 	movi	r6,8
    c8b4:	000cdb80 	call	cdb8 <altera_avalon_jtag_uart_init>
    c8b8:	01000074 	movhi	r4,1
    c8bc:	2104c504 	addi	r4,r4,4884
    c8c0:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    c8c4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    c8c8:	01000074 	movhi	r4,1
    c8cc:	2108e004 	addi	r4,r4,9088
    c8d0:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    c8d4:	01000074 	movhi	r4,1
    c8d8:	2108ec04 	addi	r4,r4,9136
    c8dc:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c8e0:	01000074 	movhi	r4,1
    c8e4:	2108f804 	addi	r4,r4,9184
    c8e8:	000db200 	call	db20 <alt_up_character_lcd_init>
    c8ec:	01000074 	movhi	r4,1
    c8f0:	2108f804 	addi	r4,r4,9184
    c8f4:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    c8f8:	01000074 	movhi	r4,1
    c8fc:	21090304 	addi	r4,r4,9228
    c900:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    c904:	01000074 	movhi	r4,1
    c908:	21090e04 	addi	r4,r4,9272
    c90c:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    c910:	01000074 	movhi	r4,1
    c914:	21091904 	addi	r4,r4,9316
    c918:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    c91c:	01000074 	movhi	r4,1
    c920:	21092404 	addi	r4,r4,9360
    c924:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    c928:	01000074 	movhi	r4,1
    c92c:	21092f04 	addi	r4,r4,9404
    c930:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    c934:	01000074 	movhi	r4,1
    c938:	21093a04 	addi	r4,r4,9448
    c93c:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    c940:	01000074 	movhi	r4,1
    c944:	21094504 	addi	r4,r4,9492
    c948:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    c94c:	01000074 	movhi	r4,1
    c950:	21095004 	addi	r4,r4,9536
    c954:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c958:	01000074 	movhi	r4,1
    c95c:	21095b04 	addi	r4,r4,9580
    c960:	000e4380 	call	e438 <alt_up_ps2_init>
    c964:	01000074 	movhi	r4,1
    c968:	21095b04 	addi	r4,r4,9580
    c96c:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    c970:	01000074 	movhi	r4,1
    c974:	21096904 	addi	r4,r4,9636
    c978:	000e4380 	call	e438 <alt_up_ps2_init>
    c97c:	01000074 	movhi	r4,1
    c980:	21096904 	addi	r4,r4,9636
    c984:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    c988:	01000074 	movhi	r4,1
    c98c:	21097704 	addi	r4,r4,9692
    c990:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    c994:	01000074 	movhi	r4,1
    c998:	21098204 	addi	r4,r4,9736
    c99c:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    c9a0:	00800074 	movhi	r2,1
    c9a4:	10898f04 	addi	r2,r2,9788
    c9a8:	10800a17 	ldw	r2,40(r2)
    c9ac:	10800104 	addi	r2,r2,4
    c9b0:	10800017 	ldw	r2,0(r2)
    c9b4:	10ffffcc 	andi	r3,r2,65535
    c9b8:	00800074 	movhi	r2,1
    c9bc:	10898f04 	addi	r2,r2,9788
    c9c0:	10c00c15 	stw	r3,48(r2)
    c9c4:	00800074 	movhi	r2,1
    c9c8:	10898f04 	addi	r2,r2,9788
    c9cc:	10800a17 	ldw	r2,40(r2)
    c9d0:	10800104 	addi	r2,r2,4
    c9d4:	10800017 	ldw	r2,0(r2)
    c9d8:	1006d43a 	srli	r3,r2,16
    c9dc:	00800074 	movhi	r2,1
    c9e0:	10898f04 	addi	r2,r2,9788
    c9e4:	10c00d15 	stw	r3,52(r2)
    c9e8:	00800074 	movhi	r2,1
    c9ec:	10898f04 	addi	r2,r2,9788
    c9f0:	10800c17 	ldw	r2,48(r2)
    c9f4:	10801068 	cmpgeui	r2,r2,65
    c9f8:	1000081e 	bne	r2,zero,ca1c <alt_sys_init+0x1a0>
    c9fc:	00800074 	movhi	r2,1
    ca00:	10898f04 	addi	r2,r2,9788
    ca04:	00c00fc4 	movi	r3,63
    ca08:	10c00f15 	stw	r3,60(r2)
    ca0c:	00800074 	movhi	r2,1
    ca10:	10898f04 	addi	r2,r2,9788
    ca14:	00c00184 	movi	r3,6
    ca18:	10c01015 	stw	r3,64(r2)
    ca1c:	00800074 	movhi	r2,1
    ca20:	10898f04 	addi	r2,r2,9788
    ca24:	10800d17 	ldw	r2,52(r2)
    ca28:	10800868 	cmpgeui	r2,r2,33
    ca2c:	1000041e 	bne	r2,zero,ca40 <alt_sys_init+0x1c4>
    ca30:	00800074 	movhi	r2,1
    ca34:	10898f04 	addi	r2,r2,9788
    ca38:	00c007c4 	movi	r3,31
    ca3c:	10c01115 	stw	r3,68(r2)
    ca40:	01000074 	movhi	r4,1
    ca44:	21098f04 	addi	r4,r4,9788
    ca48:	000ed500 	call	ed50 <alt_up_char_buffer_init>
    ca4c:	01000074 	movhi	r4,1
    ca50:	21098f04 	addi	r4,r4,9788
    ca54:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    ca58:	00800074 	movhi	r2,1
    ca5c:	1089a104 	addi	r2,r2,9860
    ca60:	10800a17 	ldw	r2,40(r2)
    ca64:	10800017 	ldw	r2,0(r2)
    ca68:	1007883a 	mov	r3,r2
    ca6c:	00800074 	movhi	r2,1
    ca70:	1089a104 	addi	r2,r2,9860
    ca74:	10c00b15 	stw	r3,44(r2)
    ca78:	00800074 	movhi	r2,1
    ca7c:	1089a104 	addi	r2,r2,9860
    ca80:	10800a17 	ldw	r2,40(r2)
    ca84:	10800104 	addi	r2,r2,4
    ca88:	10800017 	ldw	r2,0(r2)
    ca8c:	1007883a 	mov	r3,r2
    ca90:	00800074 	movhi	r2,1
    ca94:	1089a104 	addi	r2,r2,9860
    ca98:	10c00c15 	stw	r3,48(r2)
    ca9c:	00800074 	movhi	r2,1
    caa0:	1089a104 	addi	r2,r2,9860
    caa4:	10800a17 	ldw	r2,40(r2)
    caa8:	10800204 	addi	r2,r2,8
    caac:	10800017 	ldw	r2,0(r2)
    cab0:	10ffffcc 	andi	r3,r2,65535
    cab4:	00800074 	movhi	r2,1
    cab8:	1089a104 	addi	r2,r2,9860
    cabc:	10c00f15 	stw	r3,60(r2)
    cac0:	00800074 	movhi	r2,1
    cac4:	1089a104 	addi	r2,r2,9860
    cac8:	10800a17 	ldw	r2,40(r2)
    cacc:	10800204 	addi	r2,r2,8
    cad0:	10800017 	ldw	r2,0(r2)
    cad4:	1006d43a 	srli	r3,r2,16
    cad8:	00800074 	movhi	r2,1
    cadc:	1089a104 	addi	r2,r2,9860
    cae0:	10c01015 	stw	r3,64(r2)
    cae4:	00800074 	movhi	r2,1
    cae8:	1089a104 	addi	r2,r2,9860
    caec:	10800a17 	ldw	r2,40(r2)
    caf0:	10800304 	addi	r2,r2,12
    caf4:	10800017 	ldw	r2,0(r2)
    caf8:	1005d07a 	srai	r2,r2,1
    cafc:	10c0004c 	andi	r3,r2,1
    cb00:	00800074 	movhi	r2,1
    cb04:	1089a104 	addi	r2,r2,9860
    cb08:	10c00d15 	stw	r3,52(r2)
    cb0c:	00800074 	movhi	r2,1
    cb10:	1089a104 	addi	r2,r2,9860
    cb14:	10800a17 	ldw	r2,40(r2)
    cb18:	10800304 	addi	r2,r2,12
    cb1c:	10800017 	ldw	r2,0(r2)
    cb20:	1005d13a 	srai	r2,r2,4
    cb24:	10c003cc 	andi	r3,r2,15
    cb28:	00800074 	movhi	r2,1
    cb2c:	1089a104 	addi	r2,r2,9860
    cb30:	10c00e15 	stw	r3,56(r2)
    cb34:	00800074 	movhi	r2,1
    cb38:	1089a104 	addi	r2,r2,9860
    cb3c:	10800a17 	ldw	r2,40(r2)
    cb40:	10800304 	addi	r2,r2,12
    cb44:	10800017 	ldw	r2,0(r2)
    cb48:	1005d43a 	srai	r2,r2,16
    cb4c:	e0bfff05 	stb	r2,-4(fp)
    cb50:	00800074 	movhi	r2,1
    cb54:	1089a104 	addi	r2,r2,9860
    cb58:	10800a17 	ldw	r2,40(r2)
    cb5c:	10800304 	addi	r2,r2,12
    cb60:	10800017 	ldw	r2,0(r2)
    cb64:	1004d63a 	srli	r2,r2,24
    cb68:	e0bfff45 	stb	r2,-3(fp)
    cb6c:	00800074 	movhi	r2,1
    cb70:	1089a104 	addi	r2,r2,9860
    cb74:	10800e17 	ldw	r2,56(r2)
    cb78:	10800058 	cmpnei	r2,r2,1
    cb7c:	1000041e 	bne	r2,zero,cb90 <alt_sys_init+0x314>
    cb80:	00800074 	movhi	r2,1
    cb84:	1089a104 	addi	r2,r2,9860
    cb88:	10001115 	stw	zero,68(r2)
    cb8c:	00000e06 	br	cbc8 <alt_sys_init+0x34c>
    cb90:	00800074 	movhi	r2,1
    cb94:	1089a104 	addi	r2,r2,9860
    cb98:	10800e17 	ldw	r2,56(r2)
    cb9c:	10800098 	cmpnei	r2,r2,2
    cba0:	1000051e 	bne	r2,zero,cbb8 <alt_sys_init+0x33c>
    cba4:	00800074 	movhi	r2,1
    cba8:	1089a104 	addi	r2,r2,9860
    cbac:	00c00044 	movi	r3,1
    cbb0:	10c01115 	stw	r3,68(r2)
    cbb4:	00000406 	br	cbc8 <alt_sys_init+0x34c>
    cbb8:	00800074 	movhi	r2,1
    cbbc:	1089a104 	addi	r2,r2,9860
    cbc0:	00c00084 	movi	r3,2
    cbc4:	10c01115 	stw	r3,68(r2)
    cbc8:	e0bfff03 	ldbu	r2,-4(fp)
    cbcc:	00c00804 	movi	r3,32
    cbd0:	1885c83a 	sub	r2,r3,r2
    cbd4:	00ffffc4 	movi	r3,-1
    cbd8:	1886d83a 	srl	r3,r3,r2
    cbdc:	00800074 	movhi	r2,1
    cbe0:	1089a104 	addi	r2,r2,9860
    cbe4:	10c01215 	stw	r3,72(r2)
    cbe8:	e0ffff03 	ldbu	r3,-4(fp)
    cbec:	00800074 	movhi	r2,1
    cbf0:	1089a104 	addi	r2,r2,9860
    cbf4:	10801117 	ldw	r2,68(r2)
    cbf8:	1887883a 	add	r3,r3,r2
    cbfc:	00800074 	movhi	r2,1
    cc00:	1089a104 	addi	r2,r2,9860
    cc04:	10c01315 	stw	r3,76(r2)
    cc08:	e0bfff43 	ldbu	r2,-3(fp)
    cc0c:	00c00804 	movi	r3,32
    cc10:	1885c83a 	sub	r2,r3,r2
    cc14:	00ffffc4 	movi	r3,-1
    cc18:	1886d83a 	srl	r3,r3,r2
    cc1c:	00800074 	movhi	r2,1
    cc20:	1089a104 	addi	r2,r2,9860
    cc24:	10c01415 	stw	r3,80(r2)
    cc28:	01000074 	movhi	r4,1
    cc2c:	2109a104 	addi	r4,r4,9860
    cc30:	000c8100 	call	c810 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    cc34:	01000074 	movhi	r4,1
    cc38:	2109b604 	addi	r4,r4,9944
    cc3c:	000c8100 	call	c810 <alt_dev_reg>
}
    cc40:	e037883a 	mov	sp,fp
    cc44:	dfc00117 	ldw	ra,4(sp)
    cc48:	df000017 	ldw	fp,0(sp)
    cc4c:	dec00204 	addi	sp,sp,8
    cc50:	f800283a 	ret

0000cc54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    cc54:	defffa04 	addi	sp,sp,-24
    cc58:	dfc00515 	stw	ra,20(sp)
    cc5c:	df000415 	stw	fp,16(sp)
    cc60:	df000404 	addi	fp,sp,16
    cc64:	e13ffd15 	stw	r4,-12(fp)
    cc68:	e17ffe15 	stw	r5,-8(fp)
    cc6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cc70:	e0bffd17 	ldw	r2,-12(fp)
    cc74:	10800017 	ldw	r2,0(r2)
    cc78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    cc7c:	e0bffc17 	ldw	r2,-16(fp)
    cc80:	10c00a04 	addi	r3,r2,40
    cc84:	e0bffd17 	ldw	r2,-12(fp)
    cc88:	10800217 	ldw	r2,8(r2)
    cc8c:	1809883a 	mov	r4,r3
    cc90:	e17ffe17 	ldw	r5,-8(fp)
    cc94:	e1bfff17 	ldw	r6,-4(fp)
    cc98:	100f883a 	mov	r7,r2
    cc9c:	000d4040 	call	d404 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    cca0:	e037883a 	mov	sp,fp
    cca4:	dfc00117 	ldw	ra,4(sp)
    cca8:	df000017 	ldw	fp,0(sp)
    ccac:	dec00204 	addi	sp,sp,8
    ccb0:	f800283a 	ret

0000ccb4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ccb4:	defffa04 	addi	sp,sp,-24
    ccb8:	dfc00515 	stw	ra,20(sp)
    ccbc:	df000415 	stw	fp,16(sp)
    ccc0:	df000404 	addi	fp,sp,16
    ccc4:	e13ffd15 	stw	r4,-12(fp)
    ccc8:	e17ffe15 	stw	r5,-8(fp)
    cccc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ccd0:	e0bffd17 	ldw	r2,-12(fp)
    ccd4:	10800017 	ldw	r2,0(r2)
    ccd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ccdc:	e0bffc17 	ldw	r2,-16(fp)
    cce0:	10c00a04 	addi	r3,r2,40
    cce4:	e0bffd17 	ldw	r2,-12(fp)
    cce8:	10800217 	ldw	r2,8(r2)
    ccec:	1809883a 	mov	r4,r3
    ccf0:	e17ffe17 	ldw	r5,-8(fp)
    ccf4:	e1bfff17 	ldw	r6,-4(fp)
    ccf8:	100f883a 	mov	r7,r2
    ccfc:	000d6b80 	call	d6b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    cd00:	e037883a 	mov	sp,fp
    cd04:	dfc00117 	ldw	ra,4(sp)
    cd08:	df000017 	ldw	fp,0(sp)
    cd0c:	dec00204 	addi	sp,sp,8
    cd10:	f800283a 	ret

0000cd14 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    cd14:	defffc04 	addi	sp,sp,-16
    cd18:	dfc00315 	stw	ra,12(sp)
    cd1c:	df000215 	stw	fp,8(sp)
    cd20:	df000204 	addi	fp,sp,8
    cd24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cd28:	e0bfff17 	ldw	r2,-4(fp)
    cd2c:	10800017 	ldw	r2,0(r2)
    cd30:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    cd34:	e0bffe17 	ldw	r2,-8(fp)
    cd38:	10c00a04 	addi	r3,r2,40
    cd3c:	e0bfff17 	ldw	r2,-4(fp)
    cd40:	10800217 	ldw	r2,8(r2)
    cd44:	1809883a 	mov	r4,r3
    cd48:	100b883a 	mov	r5,r2
    cd4c:	000d2b00 	call	d2b0 <altera_avalon_jtag_uart_close>
}
    cd50:	e037883a 	mov	sp,fp
    cd54:	dfc00117 	ldw	ra,4(sp)
    cd58:	df000017 	ldw	fp,0(sp)
    cd5c:	dec00204 	addi	sp,sp,8
    cd60:	f800283a 	ret

0000cd64 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    cd64:	defffa04 	addi	sp,sp,-24
    cd68:	dfc00515 	stw	ra,20(sp)
    cd6c:	df000415 	stw	fp,16(sp)
    cd70:	df000404 	addi	fp,sp,16
    cd74:	e13ffd15 	stw	r4,-12(fp)
    cd78:	e17ffe15 	stw	r5,-8(fp)
    cd7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    cd80:	e0bffd17 	ldw	r2,-12(fp)
    cd84:	10800017 	ldw	r2,0(r2)
    cd88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    cd8c:	e0bffc17 	ldw	r2,-16(fp)
    cd90:	10800a04 	addi	r2,r2,40
    cd94:	1009883a 	mov	r4,r2
    cd98:	e17ffe17 	ldw	r5,-8(fp)
    cd9c:	e1bfff17 	ldw	r6,-4(fp)
    cda0:	000d3180 	call	d318 <altera_avalon_jtag_uart_ioctl>
}
    cda4:	e037883a 	mov	sp,fp
    cda8:	dfc00117 	ldw	ra,4(sp)
    cdac:	df000017 	ldw	fp,0(sp)
    cdb0:	dec00204 	addi	sp,sp,8
    cdb4:	f800283a 	ret

0000cdb8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    cdb8:	defff104 	addi	sp,sp,-60
    cdbc:	dfc00e15 	stw	ra,56(sp)
    cdc0:	df000d15 	stw	fp,52(sp)
    cdc4:	df000d04 	addi	fp,sp,52
    cdc8:	e13ff915 	stw	r4,-28(fp)
    cdcc:	e17ffa15 	stw	r5,-24(fp)
    cdd0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    cdd4:	e0bff917 	ldw	r2,-28(fp)
    cdd8:	10800c04 	addi	r2,r2,48
    cddc:	e0bff315 	stw	r2,-52(fp)
    cde0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    cde4:	e0fff40b 	ldhu	r3,-48(fp)
    cde8:	e0bff884 	addi	r2,fp,-30
    cdec:	1809883a 	mov	r4,r3
    cdf0:	100b883a 	mov	r5,r2
    cdf4:	00070040 	call	7004 <OSFlagCreate>
    cdf8:	1007883a 	mov	r3,r2
    cdfc:	e0bff317 	ldw	r2,-52(fp)
    ce00:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    ce04:	e0bff917 	ldw	r2,-28(fp)
    ce08:	10800a04 	addi	r2,r2,40
    ce0c:	e0bff515 	stw	r2,-44(fp)
    ce10:	00800044 	movi	r2,1
    ce14:	e0bff60d 	sth	r2,-40(fp)
    ce18:	e0bff60b 	ldhu	r2,-40(fp)
    ce1c:	1009883a 	mov	r4,r2
    ce20:	0009f5c0 	call	9f5c <OSSemCreate>
    ce24:	1007883a 	mov	r3,r2
    ce28:	e0bff517 	ldw	r2,-44(fp)
    ce2c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    ce30:	e0bff917 	ldw	r2,-28(fp)
    ce34:	10800b04 	addi	r2,r2,44
    ce38:	e0bff715 	stw	r2,-36(fp)
    ce3c:	00800044 	movi	r2,1
    ce40:	e0bff80d 	sth	r2,-32(fp)
    ce44:	e0bff80b 	ldhu	r2,-32(fp)
    ce48:	1009883a 	mov	r4,r2
    ce4c:	0009f5c0 	call	9f5c <OSSemCreate>
    ce50:	1007883a 	mov	r3,r2
    ce54:	e0bff717 	ldw	r2,-36(fp)
    ce58:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ce5c:	e0bff917 	ldw	r2,-28(fp)
    ce60:	00c00044 	movi	r3,1
    ce64:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ce68:	e0bff917 	ldw	r2,-28(fp)
    ce6c:	10800017 	ldw	r2,0(r2)
    ce70:	10800104 	addi	r2,r2,4
    ce74:	1007883a 	mov	r3,r2
    ce78:	e0bff917 	ldw	r2,-28(fp)
    ce7c:	10800817 	ldw	r2,32(r2)
    ce80:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    ce84:	e0bffb17 	ldw	r2,-20(fp)
    ce88:	1009883a 	mov	r4,r2
    ce8c:	e17ff917 	ldw	r5,-28(fp)
    ce90:	01800074 	movhi	r6,1
    ce94:	31b3be04 	addi	r6,r6,-12552
    ce98:	000f5380 	call	f538 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ce9c:	e0bff917 	ldw	r2,-28(fp)
    cea0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    cea4:	e0bff917 	ldw	r2,-28(fp)
    cea8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ceac:	00800074 	movhi	r2,1
    ceb0:	1091d504 	addi	r2,r2,18260
    ceb4:	10800017 	ldw	r2,0(r2)
    ceb8:	1809883a 	mov	r4,r3
    cebc:	100b883a 	mov	r5,r2
    cec0:	01800074 	movhi	r6,1
    cec4:	31b46804 	addi	r6,r6,-11872
    cec8:	e1fff917 	ldw	r7,-28(fp)
    cecc:	000f0380 	call	f038 <alt_alarm_start>
    ced0:	1000040e 	bge	r2,zero,cee4 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ced4:	e0fff917 	ldw	r3,-28(fp)
    ced8:	00a00034 	movhi	r2,32768
    cedc:	10bfffc4 	addi	r2,r2,-1
    cee0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    cee4:	e037883a 	mov	sp,fp
    cee8:	dfc00117 	ldw	ra,4(sp)
    ceec:	df000017 	ldw	fp,0(sp)
    cef0:	dec00204 	addi	sp,sp,8
    cef4:	f800283a 	ret

0000cef8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    cef8:	defff104 	addi	sp,sp,-60
    cefc:	dfc00e15 	stw	ra,56(sp)
    cf00:	df000d15 	stw	fp,52(sp)
    cf04:	df000d04 	addi	fp,sp,52
    cf08:	e13ffe15 	stw	r4,-8(fp)
    cf0c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    cf10:	e0bffe17 	ldw	r2,-8(fp)
    cf14:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    cf18:	e0bff517 	ldw	r2,-44(fp)
    cf1c:	10800017 	ldw	r2,0(r2)
    cf20:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cf24:	e0bff617 	ldw	r2,-40(fp)
    cf28:	10800104 	addi	r2,r2,4
    cf2c:	10800037 	ldwio	r2,0(r2)
    cf30:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    cf34:	e0bff717 	ldw	r2,-36(fp)
    cf38:	1080c00c 	andi	r2,r2,768
    cf3c:	1000011e 	bne	r2,zero,cf44 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    cf40:	00009206 	br	d18c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    cf44:	e0bff717 	ldw	r2,-36(fp)
    cf48:	1080400c 	andi	r2,r2,256
    cf4c:	10004726 	beq	r2,zero,d06c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    cf50:	00800074 	movhi	r2,1
    cf54:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cf58:	e0bff517 	ldw	r2,-44(fp)
    cf5c:	10800d17 	ldw	r2,52(r2)
    cf60:	10800044 	addi	r2,r2,1
    cf64:	1081ffcc 	andi	r2,r2,2047
    cf68:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    cf6c:	e0bff517 	ldw	r2,-44(fp)
    cf70:	10c00e17 	ldw	r3,56(r2)
    cf74:	e0bff817 	ldw	r2,-32(fp)
    cf78:	1880011e 	bne	r3,r2,cf80 <altera_avalon_jtag_uart_irq+0x88>
          break;
    cf7c:	00002906 	br	d024 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    cf80:	e0bff617 	ldw	r2,-40(fp)
    cf84:	10800037 	ldwio	r2,0(r2)
    cf88:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    cf8c:	e0bff317 	ldw	r2,-52(fp)
    cf90:	10a0000c 	andi	r2,r2,32768
    cf94:	1000011e 	bne	r2,zero,cf9c <altera_avalon_jtag_uart_irq+0xa4>
          break;
    cf98:	00002206 	br	d024 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    cf9c:	e0bff517 	ldw	r2,-44(fp)
    cfa0:	10800d17 	ldw	r2,52(r2)
    cfa4:	e0fff317 	ldw	r3,-52(fp)
    cfa8:	1809883a 	mov	r4,r3
    cfac:	e0fff517 	ldw	r3,-44(fp)
    cfb0:	1885883a 	add	r2,r3,r2
    cfb4:	10801104 	addi	r2,r2,68
    cfb8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cfbc:	e0bff517 	ldw	r2,-44(fp)
    cfc0:	10800d17 	ldw	r2,52(r2)
    cfc4:	10800044 	addi	r2,r2,1
    cfc8:	10c1ffcc 	andi	r3,r2,2047
    cfcc:	e0bff517 	ldw	r2,-44(fp)
    cfd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    cfd4:	e0bff517 	ldw	r2,-44(fp)
    cfd8:	10800c17 	ldw	r2,48(r2)
    cfdc:	e0bff915 	stw	r2,-28(fp)
    cfe0:	00800044 	movi	r2,1
    cfe4:	e0bffa0d 	sth	r2,-24(fp)
    cfe8:	00800044 	movi	r2,1
    cfec:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    cff0:	00800074 	movhi	r2,1
    cff4:	1091c044 	addi	r2,r2,18177
    cff8:	10800003 	ldbu	r2,0(r2)
    cffc:	10803fcc 	andi	r2,r2,255
    d000:	103fd526 	beq	r2,zero,cf58 <__alt_mem_Flash_flash_data+0xf400cf58>
  {
    OSFlagPost (group, flags, opt, &err);
    d004:	e17ffa0b 	ldhu	r5,-24(fp)
    d008:	e0fffa83 	ldbu	r3,-22(fp)
    d00c:	e0bffcc4 	addi	r2,fp,-13
    d010:	e13ff917 	ldw	r4,-28(fp)
    d014:	180d883a 	mov	r6,r3
    d018:	100f883a 	mov	r7,r2
    d01c:	0007c740 	call	7c74 <OSFlagPost>
      }
    d020:	003fcd06 	br	cf58 <__alt_mem_Flash_flash_data+0xf400cf58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d024:	e0bff317 	ldw	r2,-52(fp)
    d028:	10bfffec 	andhi	r2,r2,65535
    d02c:	10000f26 	beq	r2,zero,d06c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d030:	e0bff517 	ldw	r2,-44(fp)
    d034:	10c00817 	ldw	r3,32(r2)
    d038:	00bfff84 	movi	r2,-2
    d03c:	1886703a 	and	r3,r3,r2
    d040:	e0bff517 	ldw	r2,-44(fp)
    d044:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d048:	e0bff617 	ldw	r2,-40(fp)
    d04c:	10800104 	addi	r2,r2,4
    d050:	1007883a 	mov	r3,r2
    d054:	e0bff517 	ldw	r2,-44(fp)
    d058:	10800817 	ldw	r2,32(r2)
    d05c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d060:	e0bff617 	ldw	r2,-40(fp)
    d064:	10800104 	addi	r2,r2,4
    d068:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d06c:	e0bff717 	ldw	r2,-36(fp)
    d070:	1080800c 	andi	r2,r2,512
    d074:	10004426 	beq	r2,zero,d188 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d078:	e0bff717 	ldw	r2,-36(fp)
    d07c:	1004d43a 	srli	r2,r2,16
    d080:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d084:	00002706 	br	d124 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d088:	e0bff617 	ldw	r2,-40(fp)
    d08c:	e0fff517 	ldw	r3,-44(fp)
    d090:	18c01017 	ldw	r3,64(r3)
    d094:	e13ff517 	ldw	r4,-44(fp)
    d098:	20c7883a 	add	r3,r4,r3
    d09c:	18c21104 	addi	r3,r3,2116
    d0a0:	18c00003 	ldbu	r3,0(r3)
    d0a4:	18c03fcc 	andi	r3,r3,255
    d0a8:	18c0201c 	xori	r3,r3,128
    d0ac:	18ffe004 	addi	r3,r3,-128
    d0b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d0b4:	e0bff517 	ldw	r2,-44(fp)
    d0b8:	10801017 	ldw	r2,64(r2)
    d0bc:	10800044 	addi	r2,r2,1
    d0c0:	10c1ffcc 	andi	r3,r2,2047
    d0c4:	e0bff517 	ldw	r2,-44(fp)
    d0c8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    d0cc:	e0bff517 	ldw	r2,-44(fp)
    d0d0:	10800c17 	ldw	r2,48(r2)
    d0d4:	e0bffb15 	stw	r2,-20(fp)
    d0d8:	00800084 	movi	r2,2
    d0dc:	e0bffc0d 	sth	r2,-16(fp)
    d0e0:	00800044 	movi	r2,1
    d0e4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    d0e8:	00800074 	movhi	r2,1
    d0ec:	1091c044 	addi	r2,r2,18177
    d0f0:	10800003 	ldbu	r2,0(r2)
    d0f4:	10803fcc 	andi	r2,r2,255
    d0f8:	10000726 	beq	r2,zero,d118 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    d0fc:	e17ffc0b 	ldhu	r5,-16(fp)
    d100:	e0fffc83 	ldbu	r3,-14(fp)
    d104:	e0bffd04 	addi	r2,fp,-12
    d108:	e13ffb17 	ldw	r4,-20(fp)
    d10c:	180d883a 	mov	r6,r3
    d110:	100f883a 	mov	r7,r2
    d114:	0007c740 	call	7c74 <OSFlagPost>

        space--;
    d118:	e0bff417 	ldw	r2,-48(fp)
    d11c:	10bfffc4 	addi	r2,r2,-1
    d120:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d124:	e0bff417 	ldw	r2,-48(fp)
    d128:	10000526 	beq	r2,zero,d140 <altera_avalon_jtag_uart_irq+0x248>
    d12c:	e0bff517 	ldw	r2,-44(fp)
    d130:	10c01017 	ldw	r3,64(r2)
    d134:	e0bff517 	ldw	r2,-44(fp)
    d138:	10800f17 	ldw	r2,60(r2)
    d13c:	18bfd21e 	bne	r3,r2,d088 <__alt_mem_Flash_flash_data+0xf400d088>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d140:	e0bff417 	ldw	r2,-48(fp)
    d144:	10001026 	beq	r2,zero,d188 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d148:	e0bff517 	ldw	r2,-44(fp)
    d14c:	10c00817 	ldw	r3,32(r2)
    d150:	00bfff44 	movi	r2,-3
    d154:	1886703a 	and	r3,r3,r2
    d158:	e0bff517 	ldw	r2,-44(fp)
    d15c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d160:	e0bff517 	ldw	r2,-44(fp)
    d164:	10800017 	ldw	r2,0(r2)
    d168:	10800104 	addi	r2,r2,4
    d16c:	1007883a 	mov	r3,r2
    d170:	e0bff517 	ldw	r2,-44(fp)
    d174:	10800817 	ldw	r2,32(r2)
    d178:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d17c:	e0bff617 	ldw	r2,-40(fp)
    d180:	10800104 	addi	r2,r2,4
    d184:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d188:	003f6606 	br	cf24 <__alt_mem_Flash_flash_data+0xf400cf24>
}
    d18c:	e037883a 	mov	sp,fp
    d190:	dfc00117 	ldw	ra,4(sp)
    d194:	df000017 	ldw	fp,0(sp)
    d198:	dec00204 	addi	sp,sp,8
    d19c:	f800283a 	ret

0000d1a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    d1a0:	defff904 	addi	sp,sp,-28
    d1a4:	dfc00615 	stw	ra,24(sp)
    d1a8:	df000515 	stw	fp,20(sp)
    d1ac:	df000504 	addi	fp,sp,20
    d1b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    d1b4:	e0bfff17 	ldw	r2,-4(fp)
    d1b8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    d1bc:	e0bffb17 	ldw	r2,-20(fp)
    d1c0:	10800017 	ldw	r2,0(r2)
    d1c4:	10800104 	addi	r2,r2,4
    d1c8:	10800037 	ldwio	r2,0(r2)
    d1cc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    d1d0:	e0bffc17 	ldw	r2,-16(fp)
    d1d4:	1081000c 	andi	r2,r2,1024
    d1d8:	10000b26 	beq	r2,zero,d208 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    d1dc:	e0bffb17 	ldw	r2,-20(fp)
    d1e0:	10800017 	ldw	r2,0(r2)
    d1e4:	10800104 	addi	r2,r2,4
    d1e8:	1007883a 	mov	r3,r2
    d1ec:	e0bffb17 	ldw	r2,-20(fp)
    d1f0:	10800817 	ldw	r2,32(r2)
    d1f4:	10810014 	ori	r2,r2,1024
    d1f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    d1fc:	e0bffb17 	ldw	r2,-20(fp)
    d200:	10000915 	stw	zero,36(r2)
    d204:	00002206 	br	d290 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    d208:	e0bffb17 	ldw	r2,-20(fp)
    d20c:	10c00917 	ldw	r3,36(r2)
    d210:	00a00034 	movhi	r2,32768
    d214:	10bfff04 	addi	r2,r2,-4
    d218:	10c01d36 	bltu	r2,r3,d290 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    d21c:	e0bffb17 	ldw	r2,-20(fp)
    d220:	10800917 	ldw	r2,36(r2)
    d224:	10c00044 	addi	r3,r2,1
    d228:	e0bffb17 	ldw	r2,-20(fp)
    d22c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    d230:	e0bffb17 	ldw	r2,-20(fp)
    d234:	10c00917 	ldw	r3,36(r2)
    d238:	e0bffb17 	ldw	r2,-20(fp)
    d23c:	10800117 	ldw	r2,4(r2)
    d240:	18801336 	bltu	r3,r2,d290 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    d244:	e0bffb17 	ldw	r2,-20(fp)
    d248:	10800c17 	ldw	r2,48(r2)
    d24c:	e0bffd15 	stw	r2,-12(fp)
    d250:	00800104 	movi	r2,4
    d254:	e0bffe0d 	sth	r2,-8(fp)
    d258:	00800044 	movi	r2,1
    d25c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    d260:	00800074 	movhi	r2,1
    d264:	1091c044 	addi	r2,r2,18177
    d268:	10800003 	ldbu	r2,0(r2)
    d26c:	10803fcc 	andi	r2,r2,255
    d270:	10000726 	beq	r2,zero,d290 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    d274:	e17ffe0b 	ldhu	r5,-8(fp)
    d278:	e0fffe83 	ldbu	r3,-6(fp)
    d27c:	e0bffec4 	addi	r2,fp,-5
    d280:	e13ffd17 	ldw	r4,-12(fp)
    d284:	180d883a 	mov	r6,r3
    d288:	100f883a 	mov	r7,r2
    d28c:	0007c740 	call	7c74 <OSFlagPost>
    d290:	00800074 	movhi	r2,1
    d294:	1091d504 	addi	r2,r2,18260
    d298:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    d29c:	e037883a 	mov	sp,fp
    d2a0:	dfc00117 	ldw	ra,4(sp)
    d2a4:	df000017 	ldw	fp,0(sp)
    d2a8:	dec00204 	addi	sp,sp,8
    d2ac:	f800283a 	ret

0000d2b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    d2b0:	defffd04 	addi	sp,sp,-12
    d2b4:	df000215 	stw	fp,8(sp)
    d2b8:	df000204 	addi	fp,sp,8
    d2bc:	e13ffe15 	stw	r4,-8(fp)
    d2c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d2c4:	00000506 	br	d2dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    d2c8:	e0bfff17 	ldw	r2,-4(fp)
    d2cc:	1090000c 	andi	r2,r2,16384
    d2d0:	10000226 	beq	r2,zero,d2dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    d2d4:	00bffd44 	movi	r2,-11
    d2d8:	00000b06 	br	d308 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    d2dc:	e0bffe17 	ldw	r2,-8(fp)
    d2e0:	10c01017 	ldw	r3,64(r2)
    d2e4:	e0bffe17 	ldw	r2,-8(fp)
    d2e8:	10800f17 	ldw	r2,60(r2)
    d2ec:	18800526 	beq	r3,r2,d304 <altera_avalon_jtag_uart_close+0x54>
    d2f0:	e0bffe17 	ldw	r2,-8(fp)
    d2f4:	10c00917 	ldw	r3,36(r2)
    d2f8:	e0bffe17 	ldw	r2,-8(fp)
    d2fc:	10800117 	ldw	r2,4(r2)
    d300:	18bff136 	bltu	r3,r2,d2c8 <__alt_mem_Flash_flash_data+0xf400d2c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    d304:	0005883a 	mov	r2,zero
}
    d308:	e037883a 	mov	sp,fp
    d30c:	df000017 	ldw	fp,0(sp)
    d310:	dec00104 	addi	sp,sp,4
    d314:	f800283a 	ret

0000d318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    d318:	defffa04 	addi	sp,sp,-24
    d31c:	df000515 	stw	fp,20(sp)
    d320:	df000504 	addi	fp,sp,20
    d324:	e13ffd15 	stw	r4,-12(fp)
    d328:	e17ffe15 	stw	r5,-8(fp)
    d32c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    d330:	00bff9c4 	movi	r2,-25
    d334:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    d338:	e0bffe17 	ldw	r2,-8(fp)
    d33c:	10da8060 	cmpeqi	r3,r2,27137
    d340:	1800031e 	bne	r3,zero,d350 <altera_avalon_jtag_uart_ioctl+0x38>
    d344:	109a80a0 	cmpeqi	r2,r2,27138
    d348:	1000191e 	bne	r2,zero,d3b0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    d34c:	00002806 	br	d3f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    d350:	e0bffd17 	ldw	r2,-12(fp)
    d354:	10c00117 	ldw	r3,4(r2)
    d358:	00a00034 	movhi	r2,32768
    d35c:	10bfffc4 	addi	r2,r2,-1
    d360:	18801226 	beq	r3,r2,d3ac <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    d364:	e0bfff17 	ldw	r2,-4(fp)
    d368:	10800017 	ldw	r2,0(r2)
    d36c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    d370:	e0bffc17 	ldw	r2,-16(fp)
    d374:	10800090 	cmplti	r2,r2,2
    d378:	1000061e 	bne	r2,zero,d394 <altera_avalon_jtag_uart_ioctl+0x7c>
    d37c:	e0fffc17 	ldw	r3,-16(fp)
    d380:	00a00034 	movhi	r2,32768
    d384:	10bfffc4 	addi	r2,r2,-1
    d388:	18800226 	beq	r3,r2,d394 <altera_avalon_jtag_uart_ioctl+0x7c>
    d38c:	e0bffc17 	ldw	r2,-16(fp)
    d390:	00000206 	br	d39c <altera_avalon_jtag_uart_ioctl+0x84>
    d394:	00a00034 	movhi	r2,32768
    d398:	10bfff84 	addi	r2,r2,-2
    d39c:	e0fffd17 	ldw	r3,-12(fp)
    d3a0:	18800115 	stw	r2,4(r3)
      rc = 0;
    d3a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    d3a8:	00001106 	br	d3f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    d3ac:	00001006 	br	d3f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    d3b0:	e0bffd17 	ldw	r2,-12(fp)
    d3b4:	10c00117 	ldw	r3,4(r2)
    d3b8:	00a00034 	movhi	r2,32768
    d3bc:	10bfffc4 	addi	r2,r2,-1
    d3c0:	18800a26 	beq	r3,r2,d3ec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d3c4:	e0bffd17 	ldw	r2,-12(fp)
    d3c8:	10c00917 	ldw	r3,36(r2)
    d3cc:	e0bffd17 	ldw	r2,-12(fp)
    d3d0:	10800117 	ldw	r2,4(r2)
    d3d4:	1885803a 	cmpltu	r2,r3,r2
    d3d8:	10c03fcc 	andi	r3,r2,255
    d3dc:	e0bfff17 	ldw	r2,-4(fp)
    d3e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    d3e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    d3e8:	00000006 	br	d3ec <altera_avalon_jtag_uart_ioctl+0xd4>
    d3ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
    d3f0:	e0bffb17 	ldw	r2,-20(fp)
}
    d3f4:	e037883a 	mov	sp,fp
    d3f8:	df000017 	ldw	fp,0(sp)
    d3fc:	dec00104 	addi	sp,sp,4
    d400:	f800283a 	ret

0000d404 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d404:	deffec04 	addi	sp,sp,-80
    d408:	dfc01315 	stw	ra,76(sp)
    d40c:	df001215 	stw	fp,72(sp)
    d410:	df001204 	addi	fp,sp,72
    d414:	e13ffc15 	stw	r4,-16(fp)
    d418:	e17ffd15 	stw	r5,-12(fp)
    d41c:	e1bffe15 	stw	r6,-8(fp)
    d420:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    d424:	e0bffd17 	ldw	r2,-12(fp)
    d428:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    d42c:	e0bffc17 	ldw	r2,-16(fp)
    d430:	10800a17 	ldw	r2,40(r2)
    d434:	e0bff415 	stw	r2,-48(fp)
    d438:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    d43c:	e0fff50b 	ldhu	r3,-44(fp)
    d440:	e0bffb04 	addi	r2,fp,-20
    d444:	e13ff417 	ldw	r4,-48(fp)
    d448:	180b883a 	mov	r5,r3
    d44c:	100d883a 	mov	r6,r2
    d450:	000a2c40 	call	a2c4 <OSSemPend>

  while (space > 0)
    d454:	00006506 	br	d5ec <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d458:	e0bffc17 	ldw	r2,-16(fp)
    d45c:	10800d17 	ldw	r2,52(r2)
    d460:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    d464:	e0bffc17 	ldw	r2,-16(fp)
    d468:	10800e17 	ldw	r2,56(r2)
    d46c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    d470:	e0fff117 	ldw	r3,-60(fp)
    d474:	e0bff217 	ldw	r2,-56(fp)
    d478:	18800536 	bltu	r3,r2,d490 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    d47c:	e0fff117 	ldw	r3,-60(fp)
    d480:	e0bff217 	ldw	r2,-56(fp)
    d484:	1885c83a 	sub	r2,r3,r2
    d488:	e0bff015 	stw	r2,-64(fp)
    d48c:	00000406 	br	d4a0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d490:	00c20004 	movi	r3,2048
    d494:	e0bff217 	ldw	r2,-56(fp)
    d498:	1885c83a 	sub	r2,r3,r2
    d49c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    d4a0:	e0bff017 	ldw	r2,-64(fp)
    d4a4:	1000011e 	bne	r2,zero,d4ac <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    d4a8:	00001d06 	br	d520 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    d4ac:	e0fffe17 	ldw	r3,-8(fp)
    d4b0:	e0bff017 	ldw	r2,-64(fp)
    d4b4:	1880022e 	bgeu	r3,r2,d4c0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    d4b8:	e0bffe17 	ldw	r2,-8(fp)
    d4bc:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d4c0:	e0bff217 	ldw	r2,-56(fp)
    d4c4:	10801104 	addi	r2,r2,68
    d4c8:	e0fffc17 	ldw	r3,-16(fp)
    d4cc:	1885883a 	add	r2,r3,r2
    d4d0:	e13fef17 	ldw	r4,-68(fp)
    d4d4:	100b883a 	mov	r5,r2
    d4d8:	e1bff017 	ldw	r6,-64(fp)
    d4dc:	00020e40 	call	20e4 <memcpy>
      ptr   += n;
    d4e0:	e0ffef17 	ldw	r3,-68(fp)
    d4e4:	e0bff017 	ldw	r2,-64(fp)
    d4e8:	1885883a 	add	r2,r3,r2
    d4ec:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    d4f0:	e0fffe17 	ldw	r3,-8(fp)
    d4f4:	e0bff017 	ldw	r2,-64(fp)
    d4f8:	1885c83a 	sub	r2,r3,r2
    d4fc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d500:	e0fff217 	ldw	r3,-56(fp)
    d504:	e0bff017 	ldw	r2,-64(fp)
    d508:	1885883a 	add	r2,r3,r2
    d50c:	10c1ffcc 	andi	r3,r2,2047
    d510:	e0bffc17 	ldw	r2,-16(fp)
    d514:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    d518:	e0bffe17 	ldw	r2,-8(fp)
    d51c:	00bfce16 	blt	zero,r2,d458 <__alt_mem_Flash_flash_data+0xf400d458>

    /* If we read any data then return it */
    if (ptr != buffer)
    d520:	e0ffef17 	ldw	r3,-68(fp)
    d524:	e0bffd17 	ldw	r2,-12(fp)
    d528:	18800126 	beq	r3,r2,d530 <altera_avalon_jtag_uart_read+0x12c>
      break;
    d52c:	00003106 	br	d5f4 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d530:	e0bfff17 	ldw	r2,-4(fp)
    d534:	1090000c 	andi	r2,r2,16384
    d538:	10000126 	beq	r2,zero,d540 <altera_avalon_jtag_uart_read+0x13c>
      break;
    d53c:	00002d06 	br	d5f4 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    d540:	00800074 	movhi	r2,1
    d544:	1091c044 	addi	r2,r2,18177
    d548:	10800003 	ldbu	r2,0(r2)
    d54c:	10803fcc 	andi	r2,r2,255
    d550:	10800058 	cmpnei	r2,r2,1
    d554:	1000161e 	bne	r2,zero,d5b0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    d558:	e0bffc17 	ldw	r2,-16(fp)
    d55c:	10800c17 	ldw	r2,48(r2)
    d560:	e0bff615 	stw	r2,-40(fp)
    d564:	00800144 	movi	r2,5
    d568:	e0bff70d 	sth	r2,-36(fp)
    d56c:	00bfe0c4 	movi	r2,-125
    d570:	e0bff785 	stb	r2,-34(fp)
    d574:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    d578:	00800074 	movhi	r2,1
    d57c:	1091c044 	addi	r2,r2,18177
    d580:	10800003 	ldbu	r2,0(r2)
    d584:	10803fcc 	andi	r2,r2,255
    d588:	10001326 	beq	r2,zero,d5d8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    d58c:	e17ff70b 	ldhu	r5,-36(fp)
    d590:	e1bff783 	ldbu	r6,-34(fp)
    d594:	e0fff80b 	ldhu	r3,-32(fp)
    d598:	e0bffb44 	addi	r2,fp,-19
    d59c:	d8800015 	stw	r2,0(sp)
    d5a0:	e13ff617 	ldw	r4,-40(fp)
    d5a4:	180f883a 	mov	r7,r3
    d5a8:	000761c0 	call	761c <OSFlagPend>
    d5ac:	00000a06 	br	d5d8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d5b0:	0001883a 	nop
    d5b4:	e0bffc17 	ldw	r2,-16(fp)
    d5b8:	10c00d17 	ldw	r3,52(r2)
    d5bc:	e0bff117 	ldw	r2,-60(fp)
    d5c0:	1880051e 	bne	r3,r2,d5d8 <altera_avalon_jtag_uart_read+0x1d4>
    d5c4:	e0bffc17 	ldw	r2,-16(fp)
    d5c8:	10c00917 	ldw	r3,36(r2)
    d5cc:	e0bffc17 	ldw	r2,-16(fp)
    d5d0:	10800117 	ldw	r2,4(r2)
    d5d4:	18bff736 	bltu	r3,r2,d5b4 <__alt_mem_Flash_flash_data+0xf400d5b4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d5d8:	e0bffc17 	ldw	r2,-16(fp)
    d5dc:	10c00d17 	ldw	r3,52(r2)
    d5e0:	e0bff117 	ldw	r2,-60(fp)
    d5e4:	1880011e 	bne	r3,r2,d5ec <altera_avalon_jtag_uart_read+0x1e8>
      break;
    d5e8:	00000206 	br	d5f4 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d5ec:	e0bffe17 	ldw	r2,-8(fp)
    d5f0:	00bf9916 	blt	zero,r2,d458 <__alt_mem_Flash_flash_data+0xf400d458>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    d5f4:	e0bffc17 	ldw	r2,-16(fp)
    d5f8:	10800a17 	ldw	r2,40(r2)
    d5fc:	1009883a 	mov	r4,r2
    d600:	000a6980 	call	a698 <OSSemPost>

  if (ptr != buffer)
    d604:	e0ffef17 	ldw	r3,-68(fp)
    d608:	e0bffd17 	ldw	r2,-12(fp)
    d60c:	18801826 	beq	r3,r2,d670 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d610:	0005303a 	rdctl	r2,status
    d614:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d618:	e0fff917 	ldw	r3,-28(fp)
    d61c:	00bfff84 	movi	r2,-2
    d620:	1884703a 	and	r2,r3,r2
    d624:	1001703a 	wrctl	status,r2
  
  return context;
    d628:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d62c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d630:	e0bffc17 	ldw	r2,-16(fp)
    d634:	10800817 	ldw	r2,32(r2)
    d638:	10c00054 	ori	r3,r2,1
    d63c:	e0bffc17 	ldw	r2,-16(fp)
    d640:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d644:	e0bffc17 	ldw	r2,-16(fp)
    d648:	10800017 	ldw	r2,0(r2)
    d64c:	10800104 	addi	r2,r2,4
    d650:	1007883a 	mov	r3,r2
    d654:	e0bffc17 	ldw	r2,-16(fp)
    d658:	10800817 	ldw	r2,32(r2)
    d65c:	18800035 	stwio	r2,0(r3)
    d660:	e0bff317 	ldw	r2,-52(fp)
    d664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d668:	e0bffa17 	ldw	r2,-24(fp)
    d66c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d670:	e0ffef17 	ldw	r3,-68(fp)
    d674:	e0bffd17 	ldw	r2,-12(fp)
    d678:	18800426 	beq	r3,r2,d68c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    d67c:	e0ffef17 	ldw	r3,-68(fp)
    d680:	e0bffd17 	ldw	r2,-12(fp)
    d684:	1885c83a 	sub	r2,r3,r2
    d688:	00000606 	br	d6a4 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    d68c:	e0bfff17 	ldw	r2,-4(fp)
    d690:	1090000c 	andi	r2,r2,16384
    d694:	10000226 	beq	r2,zero,d6a0 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    d698:	00bffd44 	movi	r2,-11
    d69c:	00000106 	br	d6a4 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    d6a0:	00bffec4 	movi	r2,-5
}
    d6a4:	e037883a 	mov	sp,fp
    d6a8:	dfc00117 	ldw	ra,4(sp)
    d6ac:	df000017 	ldw	fp,0(sp)
    d6b0:	dec00204 	addi	sp,sp,8
    d6b4:	f800283a 	ret

0000d6b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d6b8:	deffed04 	addi	sp,sp,-76
    d6bc:	dfc01215 	stw	ra,72(sp)
    d6c0:	df001115 	stw	fp,68(sp)
    d6c4:	df001104 	addi	fp,sp,68
    d6c8:	e13ffc15 	stw	r4,-16(fp)
    d6cc:	e17ffd15 	stw	r5,-12(fp)
    d6d0:	e1bffe15 	stw	r6,-8(fp)
    d6d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d6d8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d6dc:	e0bffd17 	ldw	r2,-12(fp)
    d6e0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    d6e4:	e0bffc17 	ldw	r2,-16(fp)
    d6e8:	10800b17 	ldw	r2,44(r2)
    d6ec:	e0bff515 	stw	r2,-44(fp)
    d6f0:	e03ff60d 	sth	zero,-40(fp)
    d6f4:	e0fff60b 	ldhu	r3,-40(fp)
    d6f8:	e0bffbc4 	addi	r2,fp,-17
    d6fc:	e13ff517 	ldw	r4,-44(fp)
    d700:	180b883a 	mov	r5,r3
    d704:	100d883a 	mov	r6,r2
    d708:	000a2c40 	call	a2c4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d70c:	00003806 	br	d7f0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d710:	e0bffc17 	ldw	r2,-16(fp)
    d714:	10800f17 	ldw	r2,60(r2)
    d718:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    d71c:	e0bffc17 	ldw	r2,-16(fp)
    d720:	10801017 	ldw	r2,64(r2)
    d724:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    d728:	e0fff317 	ldw	r3,-52(fp)
    d72c:	e0bff017 	ldw	r2,-64(fp)
    d730:	1880062e 	bgeu	r3,r2,d74c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    d734:	e0fff017 	ldw	r3,-64(fp)
    d738:	e0bff317 	ldw	r2,-52(fp)
    d73c:	1885c83a 	sub	r2,r3,r2
    d740:	10bfffc4 	addi	r2,r2,-1
    d744:	e0bff115 	stw	r2,-60(fp)
    d748:	00000b06 	br	d778 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    d74c:	e0bff017 	ldw	r2,-64(fp)
    d750:	10000526 	beq	r2,zero,d768 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d754:	00c20004 	movi	r3,2048
    d758:	e0bff317 	ldw	r2,-52(fp)
    d75c:	1885c83a 	sub	r2,r3,r2
    d760:	e0bff115 	stw	r2,-60(fp)
    d764:	00000406 	br	d778 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d768:	00c1ffc4 	movi	r3,2047
    d76c:	e0bff317 	ldw	r2,-52(fp)
    d770:	1885c83a 	sub	r2,r3,r2
    d774:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    d778:	e0bff117 	ldw	r2,-60(fp)
    d77c:	1000011e 	bne	r2,zero,d784 <altera_avalon_jtag_uart_write+0xcc>
        break;
    d780:	00001d06 	br	d7f8 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    d784:	e0fffe17 	ldw	r3,-8(fp)
    d788:	e0bff117 	ldw	r2,-60(fp)
    d78c:	1880022e 	bgeu	r3,r2,d798 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    d790:	e0bffe17 	ldw	r2,-8(fp)
    d794:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d798:	e0bff317 	ldw	r2,-52(fp)
    d79c:	10821104 	addi	r2,r2,2116
    d7a0:	e0fffc17 	ldw	r3,-16(fp)
    d7a4:	1885883a 	add	r2,r3,r2
    d7a8:	1009883a 	mov	r4,r2
    d7ac:	e17ffd17 	ldw	r5,-12(fp)
    d7b0:	e1bff117 	ldw	r6,-60(fp)
    d7b4:	00020e40 	call	20e4 <memcpy>
      ptr   += n;
    d7b8:	e0fffd17 	ldw	r3,-12(fp)
    d7bc:	e0bff117 	ldw	r2,-60(fp)
    d7c0:	1885883a 	add	r2,r3,r2
    d7c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    d7c8:	e0fffe17 	ldw	r3,-8(fp)
    d7cc:	e0bff117 	ldw	r2,-60(fp)
    d7d0:	1885c83a 	sub	r2,r3,r2
    d7d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d7d8:	e0fff317 	ldw	r3,-52(fp)
    d7dc:	e0bff117 	ldw	r2,-60(fp)
    d7e0:	1885883a 	add	r2,r3,r2
    d7e4:	10c1ffcc 	andi	r3,r2,2047
    d7e8:	e0bffc17 	ldw	r2,-16(fp)
    d7ec:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d7f0:	e0bffe17 	ldw	r2,-8(fp)
    d7f4:	00bfc616 	blt	zero,r2,d710 <__alt_mem_Flash_flash_data+0xf400d710>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7f8:	0005303a 	rdctl	r2,status
    d7fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d800:	e0fff717 	ldw	r3,-36(fp)
    d804:	00bfff84 	movi	r2,-2
    d808:	1884703a 	and	r2,r3,r2
    d80c:	1001703a 	wrctl	status,r2
  
  return context;
    d810:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d814:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d818:	e0bffc17 	ldw	r2,-16(fp)
    d81c:	10800817 	ldw	r2,32(r2)
    d820:	10c00094 	ori	r3,r2,2
    d824:	e0bffc17 	ldw	r2,-16(fp)
    d828:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d82c:	e0bffc17 	ldw	r2,-16(fp)
    d830:	10800017 	ldw	r2,0(r2)
    d834:	10800104 	addi	r2,r2,4
    d838:	1007883a 	mov	r3,r2
    d83c:	e0bffc17 	ldw	r2,-16(fp)
    d840:	10800817 	ldw	r2,32(r2)
    d844:	18800035 	stwio	r2,0(r3)
    d848:	e0bff417 	ldw	r2,-48(fp)
    d84c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d850:	e0bff817 	ldw	r2,-32(fp)
    d854:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d858:	e0bffe17 	ldw	r2,-8(fp)
    d85c:	00802e0e 	bge	zero,r2,d918 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    d860:	e0bfff17 	ldw	r2,-4(fp)
    d864:	1090000c 	andi	r2,r2,16384
    d868:	10000126 	beq	r2,zero,d870 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    d86c:	00002c06 	br	d920 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    d870:	00800074 	movhi	r2,1
    d874:	1091c044 	addi	r2,r2,18177
    d878:	10800003 	ldbu	r2,0(r2)
    d87c:	10803fcc 	andi	r2,r2,255
    d880:	10800058 	cmpnei	r2,r2,1
    d884:	1000161e 	bne	r2,zero,d8e0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    d888:	e0bffc17 	ldw	r2,-16(fp)
    d88c:	10800c17 	ldw	r2,48(r2)
    d890:	e0bff915 	stw	r2,-28(fp)
    d894:	00800184 	movi	r2,6
    d898:	e0bffa0d 	sth	r2,-24(fp)
    d89c:	00bfe0c4 	movi	r2,-125
    d8a0:	e0bffa85 	stb	r2,-22(fp)
    d8a4:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    d8a8:	00800074 	movhi	r2,1
    d8ac:	1091c044 	addi	r2,r2,18177
    d8b0:	10800003 	ldbu	r2,0(r2)
    d8b4:	10803fcc 	andi	r2,r2,255
    d8b8:	10001326 	beq	r2,zero,d908 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    d8bc:	e17ffa0b 	ldhu	r5,-24(fp)
    d8c0:	e1bffa83 	ldbu	r6,-22(fp)
    d8c4:	e0fffb0b 	ldhu	r3,-20(fp)
    d8c8:	e0bffb84 	addi	r2,fp,-18
    d8cc:	d8800015 	stw	r2,0(sp)
    d8d0:	e13ff917 	ldw	r4,-28(fp)
    d8d4:	180f883a 	mov	r7,r3
    d8d8:	000761c0 	call	761c <OSFlagPend>
    d8dc:	00000a06 	br	d908 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d8e0:	0001883a 	nop
    d8e4:	e0bffc17 	ldw	r2,-16(fp)
    d8e8:	10c01017 	ldw	r3,64(r2)
    d8ec:	e0bff017 	ldw	r2,-64(fp)
    d8f0:	1880051e 	bne	r3,r2,d908 <altera_avalon_jtag_uart_write+0x250>
    d8f4:	e0bffc17 	ldw	r2,-16(fp)
    d8f8:	10c00917 	ldw	r3,36(r2)
    d8fc:	e0bffc17 	ldw	r2,-16(fp)
    d900:	10800117 	ldw	r2,4(r2)
    d904:	18bff736 	bltu	r3,r2,d8e4 <__alt_mem_Flash_flash_data+0xf400d8e4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    d908:	e0bffc17 	ldw	r2,-16(fp)
    d90c:	10800917 	ldw	r2,36(r2)
    d910:	10000126 	beq	r2,zero,d918 <altera_avalon_jtag_uart_write+0x260>
         break;
    d914:	00000206 	br	d920 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    d918:	e0bffe17 	ldw	r2,-8(fp)
    d91c:	00bf7b16 	blt	zero,r2,d70c <__alt_mem_Flash_flash_data+0xf400d70c>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    d920:	e0bffc17 	ldw	r2,-16(fp)
    d924:	10800b17 	ldw	r2,44(r2)
    d928:	1009883a 	mov	r4,r2
    d92c:	000a6980 	call	a698 <OSSemPost>

  if (ptr != start)
    d930:	e0fffd17 	ldw	r3,-12(fp)
    d934:	e0bff217 	ldw	r2,-56(fp)
    d938:	18800426 	beq	r3,r2,d94c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    d93c:	e0fffd17 	ldw	r3,-12(fp)
    d940:	e0bff217 	ldw	r2,-56(fp)
    d944:	1885c83a 	sub	r2,r3,r2
    d948:	00000606 	br	d964 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    d94c:	e0bfff17 	ldw	r2,-4(fp)
    d950:	1090000c 	andi	r2,r2,16384
    d954:	10000226 	beq	r2,zero,d960 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    d958:	00bffd44 	movi	r2,-11
    d95c:	00000106 	br	d964 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d960:	00bffec4 	movi	r2,-5
}
    d964:	e037883a 	mov	sp,fp
    d968:	dfc00117 	ldw	ra,4(sp)
    d96c:	df000017 	ldw	fp,0(sp)
    d970:	dec00204 	addi	sp,sp,8
    d974:	f800283a 	ret

0000d978 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d978:	defff904 	addi	sp,sp,-28
    d97c:	dfc00615 	stw	ra,24(sp)
    d980:	df000515 	stw	fp,20(sp)
    d984:	df000504 	addi	fp,sp,20
    d988:	e13ffe15 	stw	r4,-8(fp)
    d98c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d990:	0007883a 	mov	r3,zero
    d994:	e0bffe17 	ldw	r2,-8(fp)
    d998:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d99c:	e0bffe17 	ldw	r2,-8(fp)
    d9a0:	10800104 	addi	r2,r2,4
    d9a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9a8:	0005303a 	rdctl	r2,status
    d9ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9b0:	e0fffc17 	ldw	r3,-16(fp)
    d9b4:	00bfff84 	movi	r2,-2
    d9b8:	1884703a 	and	r2,r3,r2
    d9bc:	1001703a 	wrctl	status,r2
  
  return context;
    d9c0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d9c4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    d9c8:	000f9f40 	call	f9f4 <alt_tick>
    d9cc:	e0bffb17 	ldw	r2,-20(fp)
    d9d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d9d4:	e0bffd17 	ldw	r2,-12(fp)
    d9d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d9dc:	e037883a 	mov	sp,fp
    d9e0:	dfc00117 	ldw	ra,4(sp)
    d9e4:	df000017 	ldw	fp,0(sp)
    d9e8:	dec00204 	addi	sp,sp,8
    d9ec:	f800283a 	ret

0000d9f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d9f0:	defff904 	addi	sp,sp,-28
    d9f4:	dfc00615 	stw	ra,24(sp)
    d9f8:	df000515 	stw	fp,20(sp)
    d9fc:	df000504 	addi	fp,sp,20
    da00:	e13ffc15 	stw	r4,-16(fp)
    da04:	e17ffd15 	stw	r5,-12(fp)
    da08:	e1bffe15 	stw	r6,-8(fp)
    da0c:	e1ffff15 	stw	r7,-4(fp)
    da10:	e0bfff17 	ldw	r2,-4(fp)
    da14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    da18:	00800074 	movhi	r2,1
    da1c:	1091d504 	addi	r2,r2,18260
    da20:	10800017 	ldw	r2,0(r2)
    da24:	1000041e 	bne	r2,zero,da38 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    da28:	00800074 	movhi	r2,1
    da2c:	1091d504 	addi	r2,r2,18260
    da30:	e0fffb17 	ldw	r3,-20(fp)
    da34:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    da38:	e0bffc17 	ldw	r2,-16(fp)
    da3c:	10800104 	addi	r2,r2,4
    da40:	00c001c4 	movi	r3,7
    da44:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    da48:	e13ffe17 	ldw	r4,-8(fp)
    da4c:	e17ffc17 	ldw	r5,-16(fp)
    da50:	01800074 	movhi	r6,1
    da54:	31b65e04 	addi	r6,r6,-9864
    da58:	000f5380 	call	f538 <alt_irq_register>
#endif  
}
    da5c:	e037883a 	mov	sp,fp
    da60:	dfc00117 	ldw	ra,4(sp)
    da64:	df000017 	ldw	fp,0(sp)
    da68:	dec00204 	addi	sp,sp,8
    da6c:	f800283a 	ret

0000da70 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    da70:	defffc04 	addi	sp,sp,-16
    da74:	df000315 	stw	fp,12(sp)
    da78:	df000304 	addi	fp,sp,12
    da7c:	e13ffe15 	stw	r4,-8(fp)
    da80:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    da84:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    da88:	e0bfff17 	ldw	r2,-4(fp)
    da8c:	1000061e 	bne	r2,zero,daa8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    da90:	e0bffe17 	ldw	r2,-8(fp)
    da94:	1007883a 	mov	r3,r2
    da98:	e0bffd03 	ldbu	r2,-12(fp)
    da9c:	1884b03a 	or	r2,r3,r2
    daa0:	e0bffd05 	stb	r2,-12(fp)
    daa4:	00000806 	br	dac8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    daa8:	e0bffe17 	ldw	r2,-8(fp)
    daac:	1007883a 	mov	r3,r2
    dab0:	e0bffd03 	ldbu	r2,-12(fp)
    dab4:	1884b03a 	or	r2,r3,r2
    dab8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    dabc:	e0bffd03 	ldbu	r2,-12(fp)
    dac0:	10801014 	ori	r2,r2,64
    dac4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    dac8:	e0fffd03 	ldbu	r3,-12(fp)
    dacc:	00bfe004 	movi	r2,-128
    dad0:	1884b03a 	or	r2,r3,r2
}
    dad4:	e037883a 	mov	sp,fp
    dad8:	df000017 	ldw	fp,0(sp)
    dadc:	dec00104 	addi	sp,sp,4
    dae0:	f800283a 	ret

0000dae4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    dae4:	defffd04 	addi	sp,sp,-12
    dae8:	df000215 	stw	fp,8(sp)
    daec:	df000204 	addi	fp,sp,8
    daf0:	e13ffe15 	stw	r4,-8(fp)
    daf4:	2805883a 	mov	r2,r5
    daf8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    dafc:	e0bffe17 	ldw	r2,-8(fp)
    db00:	10800a17 	ldw	r2,40(r2)
    db04:	1007883a 	mov	r3,r2
    db08:	e0bfff03 	ldbu	r2,-4(fp)
    db0c:	18800025 	stbio	r2,0(r3)
}
    db10:	e037883a 	mov	sp,fp
    db14:	df000017 	ldw	fp,0(sp)
    db18:	dec00104 	addi	sp,sp,4
    db1c:	f800283a 	ret

0000db20 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    db20:	defffe04 	addi	sp,sp,-8
    db24:	df000115 	stw	fp,4(sp)
    db28:	df000104 	addi	fp,sp,4
    db2c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    db30:	e0bfff17 	ldw	r2,-4(fp)
    db34:	10800a17 	ldw	r2,40(r2)
    db38:	1007883a 	mov	r3,r2
    db3c:	00800044 	movi	r2,1
    db40:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    db44:	e037883a 	mov	sp,fp
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00104 	addi	sp,sp,4
    db50:	f800283a 	ret

0000db54 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    db54:	defffc04 	addi	sp,sp,-16
    db58:	dfc00315 	stw	ra,12(sp)
    db5c:	df000215 	stw	fp,8(sp)
    db60:	df000204 	addi	fp,sp,8
    db64:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    db68:	e13fff17 	ldw	r4,-4(fp)
    db6c:	01400074 	movhi	r5,1
    db70:	2949d104 	addi	r5,r5,10052
    db74:	000f3400 	call	f340 <alt_find_dev>
    db78:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    db7c:	e0bffe17 	ldw	r2,-8(fp)
}
    db80:	e037883a 	mov	sp,fp
    db84:	dfc00117 	ldw	ra,4(sp)
    db88:	df000017 	ldw	fp,0(sp)
    db8c:	dec00204 	addi	sp,sp,8
    db90:	f800283a 	ret

0000db94 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    db94:	defffb04 	addi	sp,sp,-20
    db98:	df000415 	stw	fp,16(sp)
    db9c:	df000404 	addi	fp,sp,16
    dba0:	e13ffd15 	stw	r4,-12(fp)
    dba4:	e17ffe15 	stw	r5,-8(fp)
    dba8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    dbac:	e03ffc15 	stw	zero,-16(fp)
    dbb0:	00000f06 	br	dbf0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    dbb4:	e0bffd17 	ldw	r2,-12(fp)
    dbb8:	10800a17 	ldw	r2,40(r2)
    dbbc:	10800044 	addi	r2,r2,1
    dbc0:	1009883a 	mov	r4,r2
    dbc4:	e0fffe17 	ldw	r3,-8(fp)
    dbc8:	e0bffc17 	ldw	r2,-16(fp)
    dbcc:	1885883a 	add	r2,r3,r2
    dbd0:	10800003 	ldbu	r2,0(r2)
    dbd4:	10803fcc 	andi	r2,r2,255
    dbd8:	1080201c 	xori	r2,r2,128
    dbdc:	10bfe004 	addi	r2,r2,-128
    dbe0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    dbe4:	e0bffc17 	ldw	r2,-16(fp)
    dbe8:	10800044 	addi	r2,r2,1
    dbec:	e0bffc15 	stw	r2,-16(fp)
    dbf0:	e0fffc17 	ldw	r3,-16(fp)
    dbf4:	e0bfff17 	ldw	r2,-4(fp)
    dbf8:	18bfee36 	bltu	r3,r2,dbb4 <__alt_mem_Flash_flash_data+0xf400dbb4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    dbfc:	e037883a 	mov	sp,fp
    dc00:	df000017 	ldw	fp,0(sp)
    dc04:	dec00104 	addi	sp,sp,4
    dc08:	f800283a 	ret

0000dc0c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    dc0c:	defffd04 	addi	sp,sp,-12
    dc10:	df000215 	stw	fp,8(sp)
    dc14:	df000204 	addi	fp,sp,8
    dc18:	e13ffe15 	stw	r4,-8(fp)
    dc1c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    dc20:	00000d06 	br	dc58 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    dc24:	e0bffe17 	ldw	r2,-8(fp)
    dc28:	10800a17 	ldw	r2,40(r2)
    dc2c:	10800044 	addi	r2,r2,1
    dc30:	1007883a 	mov	r3,r2
    dc34:	e0bfff17 	ldw	r2,-4(fp)
    dc38:	10800003 	ldbu	r2,0(r2)
    dc3c:	10803fcc 	andi	r2,r2,255
    dc40:	1080201c 	xori	r2,r2,128
    dc44:	10bfe004 	addi	r2,r2,-128
    dc48:	18800025 	stbio	r2,0(r3)
		++ptr;
    dc4c:	e0bfff17 	ldw	r2,-4(fp)
    dc50:	10800044 	addi	r2,r2,1
    dc54:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    dc58:	e0bfff17 	ldw	r2,-4(fp)
    dc5c:	10800003 	ldbu	r2,0(r2)
    dc60:	10803fcc 	andi	r2,r2,255
    dc64:	1080201c 	xori	r2,r2,128
    dc68:	10bfe004 	addi	r2,r2,-128
    dc6c:	103fed1e 	bne	r2,zero,dc24 <__alt_mem_Flash_flash_data+0xf400dc24>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    dc70:	e037883a 	mov	sp,fp
    dc74:	df000017 	ldw	fp,0(sp)
    dc78:	dec00104 	addi	sp,sp,4
    dc7c:	f800283a 	ret

0000dc80 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    dc80:	defffb04 	addi	sp,sp,-20
    dc84:	dfc00415 	stw	ra,16(sp)
    dc88:	df000315 	stw	fp,12(sp)
    dc8c:	df000304 	addi	fp,sp,12
    dc90:	e13ffd15 	stw	r4,-12(fp)
    dc94:	e17ffe15 	stw	r5,-8(fp)
    dc98:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    dc9c:	e0bffd17 	ldw	r2,-12(fp)
    dca0:	10c00017 	ldw	r3,0(r2)
    dca4:	e0bfff17 	ldw	r2,-4(fp)
    dca8:	1809883a 	mov	r4,r3
    dcac:	e17ffe17 	ldw	r5,-8(fp)
    dcb0:	100d883a 	mov	r6,r2
    dcb4:	000db940 	call	db94 <alt_up_character_lcd_write>
	return 0;
    dcb8:	0005883a 	mov	r2,zero
}
    dcbc:	e037883a 	mov	sp,fp
    dcc0:	dfc00117 	ldw	ra,4(sp)
    dcc4:	df000017 	ldw	fp,0(sp)
    dcc8:	dec00204 	addi	sp,sp,8
    dccc:	f800283a 	ret

0000dcd0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    dcd0:	defffa04 	addi	sp,sp,-24
    dcd4:	dfc00515 	stw	ra,20(sp)
    dcd8:	df000415 	stw	fp,16(sp)
    dcdc:	df000404 	addi	fp,sp,16
    dce0:	e13ffd15 	stw	r4,-12(fp)
    dce4:	e17ffe15 	stw	r5,-8(fp)
    dce8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    dcec:	e0bffe17 	ldw	r2,-8(fp)
    dcf0:	10800a28 	cmpgeui	r2,r2,40
    dcf4:	1000031e 	bne	r2,zero,dd04 <alt_up_character_lcd_set_cursor_pos+0x34>
    dcf8:	e0bfff17 	ldw	r2,-4(fp)
    dcfc:	108000b0 	cmpltui	r2,r2,2
    dd00:	1000021e 	bne	r2,zero,dd0c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    dd04:	00bfffc4 	movi	r2,-1
    dd08:	00000906 	br	dd30 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    dd0c:	e13ffe17 	ldw	r4,-8(fp)
    dd10:	e17fff17 	ldw	r5,-4(fp)
    dd14:	000da700 	call	da70 <get_DDRAM_addr>
    dd18:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    dd1c:	e0bffc03 	ldbu	r2,-16(fp)
    dd20:	e13ffd17 	ldw	r4,-12(fp)
    dd24:	100b883a 	mov	r5,r2
    dd28:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
	return 0;
    dd2c:	0005883a 	mov	r2,zero
}
    dd30:	e037883a 	mov	sp,fp
    dd34:	dfc00117 	ldw	ra,4(sp)
    dd38:	df000017 	ldw	fp,0(sp)
    dd3c:	dec00204 	addi	sp,sp,8
    dd40:	f800283a 	ret

0000dd44 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    dd44:	defffb04 	addi	sp,sp,-20
    dd48:	dfc00415 	stw	ra,16(sp)
    dd4c:	df000315 	stw	fp,12(sp)
    dd50:	df000304 	addi	fp,sp,12
    dd54:	e13ffe15 	stw	r4,-8(fp)
    dd58:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    dd5c:	e0bfff17 	ldw	r2,-4(fp)
    dd60:	1000011e 	bne	r2,zero,dd68 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    dd64:	00001406 	br	ddb8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    dd68:	e0bfff17 	ldw	r2,-4(fp)
    dd6c:	0080020e 	bge	zero,r2,dd78 <alt_up_character_lcd_shift_cursor+0x34>
    dd70:	00800504 	movi	r2,20
    dd74:	00000106 	br	dd7c <alt_up_character_lcd_shift_cursor+0x38>
    dd78:	00800404 	movi	r2,16
    dd7c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    dd80:	e0bfff17 	ldw	r2,-4(fp)
    dd84:	1000010e 	bge	r2,zero,dd8c <alt_up_character_lcd_shift_cursor+0x48>
    dd88:	0085c83a 	sub	r2,zero,r2
    dd8c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dd90:	00000406 	br	dda4 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    dd94:	e0bffd43 	ldbu	r2,-11(fp)
    dd98:	e13ffe17 	ldw	r4,-8(fp)
    dd9c:	100b883a 	mov	r5,r2
    dda0:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dda4:	e0bffd03 	ldbu	r2,-12(fp)
    dda8:	10ffffc4 	addi	r3,r2,-1
    ddac:	e0fffd05 	stb	r3,-12(fp)
    ddb0:	10803fcc 	andi	r2,r2,255
    ddb4:	103ff71e 	bne	r2,zero,dd94 <__alt_mem_Flash_flash_data+0xf400dd94>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ddb8:	e037883a 	mov	sp,fp
    ddbc:	dfc00117 	ldw	ra,4(sp)
    ddc0:	df000017 	ldw	fp,0(sp)
    ddc4:	dec00204 	addi	sp,sp,8
    ddc8:	f800283a 	ret

0000ddcc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ddcc:	defffb04 	addi	sp,sp,-20
    ddd0:	dfc00415 	stw	ra,16(sp)
    ddd4:	df000315 	stw	fp,12(sp)
    ddd8:	df000304 	addi	fp,sp,12
    dddc:	e13ffe15 	stw	r4,-8(fp)
    dde0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    dde4:	e0bfff17 	ldw	r2,-4(fp)
    dde8:	1000011e 	bne	r2,zero,ddf0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    ddec:	00001406 	br	de40 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ddf0:	e0bfff17 	ldw	r2,-4(fp)
    ddf4:	0080020e 	bge	zero,r2,de00 <alt_up_character_lcd_shift_display+0x34>
    ddf8:	00800704 	movi	r2,28
    ddfc:	00000106 	br	de04 <alt_up_character_lcd_shift_display+0x38>
    de00:	00800604 	movi	r2,24
    de04:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    de08:	e0bfff17 	ldw	r2,-4(fp)
    de0c:	1000010e 	bge	r2,zero,de14 <alt_up_character_lcd_shift_display+0x48>
    de10:	0085c83a 	sub	r2,zero,r2
    de14:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    de18:	00000406 	br	de2c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    de1c:	e0bffd43 	ldbu	r2,-11(fp)
    de20:	e13ffe17 	ldw	r4,-8(fp)
    de24:	100b883a 	mov	r5,r2
    de28:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    de2c:	e0bffd03 	ldbu	r2,-12(fp)
    de30:	10ffffc4 	addi	r3,r2,-1
    de34:	e0fffd05 	stb	r3,-12(fp)
    de38:	10803fcc 	andi	r2,r2,255
    de3c:	103ff71e 	bne	r2,zero,de1c <__alt_mem_Flash_flash_data+0xf400de1c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    de40:	e037883a 	mov	sp,fp
    de44:	dfc00117 	ldw	ra,4(sp)
    de48:	df000017 	ldw	fp,0(sp)
    de4c:	dec00204 	addi	sp,sp,8
    de50:	f800283a 	ret

0000de54 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    de54:	defffa04 	addi	sp,sp,-24
    de58:	dfc00515 	stw	ra,20(sp)
    de5c:	df000415 	stw	fp,16(sp)
    de60:	df000404 	addi	fp,sp,16
    de64:	e13ffd15 	stw	r4,-12(fp)
    de68:	e17ffe15 	stw	r5,-8(fp)
    de6c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    de70:	e0bffe17 	ldw	r2,-8(fp)
    de74:	10800a28 	cmpgeui	r2,r2,40
    de78:	1000031e 	bne	r2,zero,de88 <alt_up_character_lcd_erase_pos+0x34>
    de7c:	e0bfff17 	ldw	r2,-4(fp)
    de80:	108000b0 	cmpltui	r2,r2,2
    de84:	1000021e 	bne	r2,zero,de90 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    de88:	00bfffc4 	movi	r2,-1
    de8c:	00000f06 	br	decc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    de90:	e13ffe17 	ldw	r4,-8(fp)
    de94:	e17fff17 	ldw	r5,-4(fp)
    de98:	000da700 	call	da70 <get_DDRAM_addr>
    de9c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    dea0:	e0bffc03 	ldbu	r2,-16(fp)
    dea4:	e13ffd17 	ldw	r4,-12(fp)
    dea8:	100b883a 	mov	r5,r2
    deac:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    deb0:	e0bffd17 	ldw	r2,-12(fp)
    deb4:	10800a17 	ldw	r2,40(r2)
    deb8:	10800044 	addi	r2,r2,1
    debc:	1007883a 	mov	r3,r2
    dec0:	00800084 	movi	r2,2
    dec4:	18800025 	stbio	r2,0(r3)
	return 0;
    dec8:	0005883a 	mov	r2,zero
}
    decc:	e037883a 	mov	sp,fp
    ded0:	dfc00117 	ldw	ra,4(sp)
    ded4:	df000017 	ldw	fp,0(sp)
    ded8:	dec00204 	addi	sp,sp,8
    dedc:	f800283a 	ret

0000dee0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    dee0:	defffd04 	addi	sp,sp,-12
    dee4:	dfc00215 	stw	ra,8(sp)
    dee8:	df000115 	stw	fp,4(sp)
    deec:	df000104 	addi	fp,sp,4
    def0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    def4:	e13fff17 	ldw	r4,-4(fp)
    def8:	01400304 	movi	r5,12
    defc:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
}
    df00:	e037883a 	mov	sp,fp
    df04:	dfc00117 	ldw	ra,4(sp)
    df08:	df000017 	ldw	fp,0(sp)
    df0c:	dec00204 	addi	sp,sp,8
    df10:	f800283a 	ret

0000df14 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    df14:	defffd04 	addi	sp,sp,-12
    df18:	dfc00215 	stw	ra,8(sp)
    df1c:	df000115 	stw	fp,4(sp)
    df20:	df000104 	addi	fp,sp,4
    df24:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    df28:	e13fff17 	ldw	r4,-4(fp)
    df2c:	014003c4 	movi	r5,15
    df30:	000dae40 	call	dae4 <alt_up_character_lcd_send_cmd>
}
    df34:	e037883a 	mov	sp,fp
    df38:	dfc00117 	ldw	ra,4(sp)
    df3c:	df000017 	ldw	fp,0(sp)
    df40:	dec00204 	addi	sp,sp,8
    df44:	f800283a 	ret

0000df48 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    df48:	defffd04 	addi	sp,sp,-12
    df4c:	df000215 	stw	fp,8(sp)
    df50:	df000204 	addi	fp,sp,8
    df54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    df58:	e0bfff17 	ldw	r2,-4(fp)
    df5c:	10800a17 	ldw	r2,40(r2)
    df60:	10800104 	addi	r2,r2,4
    df64:	10800037 	ldwio	r2,0(r2)
    df68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    df6c:	e0bffe17 	ldw	r2,-8(fp)
    df70:	10800054 	ori	r2,r2,1
    df74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    df78:	e0bfff17 	ldw	r2,-4(fp)
    df7c:	10800a17 	ldw	r2,40(r2)
    df80:	10800104 	addi	r2,r2,4
    df84:	1007883a 	mov	r3,r2
    df88:	e0bffe17 	ldw	r2,-8(fp)
    df8c:	18800035 	stwio	r2,0(r3)
}
    df90:	e037883a 	mov	sp,fp
    df94:	df000017 	ldw	fp,0(sp)
    df98:	dec00104 	addi	sp,sp,4
    df9c:	f800283a 	ret

0000dfa0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    dfa0:	defffd04 	addi	sp,sp,-12
    dfa4:	df000215 	stw	fp,8(sp)
    dfa8:	df000204 	addi	fp,sp,8
    dfac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    dfb0:	e0bfff17 	ldw	r2,-4(fp)
    dfb4:	10800a17 	ldw	r2,40(r2)
    dfb8:	10800104 	addi	r2,r2,4
    dfbc:	10800037 	ldwio	r2,0(r2)
    dfc0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    dfc4:	e0fffe17 	ldw	r3,-8(fp)
    dfc8:	00bfff84 	movi	r2,-2
    dfcc:	1884703a 	and	r2,r3,r2
    dfd0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    dfd4:	e0bfff17 	ldw	r2,-4(fp)
    dfd8:	10800a17 	ldw	r2,40(r2)
    dfdc:	10800104 	addi	r2,r2,4
    dfe0:	1007883a 	mov	r3,r2
    dfe4:	e0bffe17 	ldw	r2,-8(fp)
    dfe8:	18800035 	stwio	r2,0(r3)
}
    dfec:	e037883a 	mov	sp,fp
    dff0:	df000017 	ldw	fp,0(sp)
    dff4:	dec00104 	addi	sp,sp,4
    dff8:	f800283a 	ret

0000dffc <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    dffc:	defffd04 	addi	sp,sp,-12
    e000:	df000215 	stw	fp,8(sp)
    e004:	df000204 	addi	fp,sp,8
    e008:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e00c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e010:	e0bfff17 	ldw	r2,-4(fp)
    e014:	10800a17 	ldw	r2,40(r2)
    e018:	10800084 	addi	r2,r2,2
    e01c:	1080002b 	ldhuio	r2,0(r2)
    e020:	10bfffcc 	andi	r2,r2,65535
    e024:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    e028:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e02c:	e037883a 	mov	sp,fp
    e030:	df000017 	ldw	fp,0(sp)
    e034:	dec00104 	addi	sp,sp,4
    e038:	f800283a 	ret

0000e03c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    e03c:	defffd04 	addi	sp,sp,-12
    e040:	df000215 	stw	fp,8(sp)
    e044:	df000204 	addi	fp,sp,8
    e048:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e04c:	e0bfff17 	ldw	r2,-4(fp)
    e050:	10800a17 	ldw	r2,40(r2)
    e054:	10800104 	addi	r2,r2,4
    e058:	10800037 	ldwio	r2,0(r2)
    e05c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    e060:	e0bffe17 	ldw	r2,-8(fp)
    e064:	1004d43a 	srli	r2,r2,16
}
    e068:	e037883a 	mov	sp,fp
    e06c:	df000017 	ldw	fp,0(sp)
    e070:	dec00104 	addi	sp,sp,4
    e074:	f800283a 	ret

0000e078 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    e078:	defffd04 	addi	sp,sp,-12
    e07c:	df000215 	stw	fp,8(sp)
    e080:	df000204 	addi	fp,sp,8
    e084:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    e088:	e0bfff17 	ldw	r2,-4(fp)
    e08c:	1080800c 	andi	r2,r2,512
    e090:	1004d27a 	srli	r2,r2,9
    e094:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    e098:	e0bffe17 	ldw	r2,-8(fp)
    e09c:	10000226 	beq	r2,zero,e0a8 <alt_up_irda_check_parity+0x30>
    e0a0:	00bfffc4 	movi	r2,-1
    e0a4:	00000106 	br	e0ac <alt_up_irda_check_parity+0x34>
    e0a8:	0005883a 	mov	r2,zero
}
    e0ac:	e037883a 	mov	sp,fp
    e0b0:	df000017 	ldw	fp,0(sp)
    e0b4:	dec00104 	addi	sp,sp,4
    e0b8:	f800283a 	ret

0000e0bc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    e0bc:	defffd04 	addi	sp,sp,-12
    e0c0:	df000215 	stw	fp,8(sp)
    e0c4:	df000204 	addi	fp,sp,8
    e0c8:	e13ffe15 	stw	r4,-8(fp)
    e0cc:	2805883a 	mov	r2,r5
    e0d0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e0d4:	e0bffe17 	ldw	r2,-8(fp)
    e0d8:	10800a17 	ldw	r2,40(r2)
    e0dc:	1007883a 	mov	r3,r2
    e0e0:	e0bfff03 	ldbu	r2,-4(fp)
    e0e4:	18800035 	stwio	r2,0(r3)
	return 0;
    e0e8:	0005883a 	mov	r2,zero
}
    e0ec:	e037883a 	mov	sp,fp
    e0f0:	df000017 	ldw	fp,0(sp)
    e0f4:	dec00104 	addi	sp,sp,4
    e0f8:	f800283a 	ret

0000e0fc <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e0fc:	defffa04 	addi	sp,sp,-24
    e100:	dfc00515 	stw	ra,20(sp)
    e104:	df000415 	stw	fp,16(sp)
    e108:	df000404 	addi	fp,sp,16
    e10c:	e13ffd15 	stw	r4,-12(fp)
    e110:	e17ffe15 	stw	r5,-8(fp)
    e114:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e118:	e0bffd17 	ldw	r2,-12(fp)
    e11c:	10800a17 	ldw	r2,40(r2)
    e120:	10800037 	ldwio	r2,0(r2)
    e124:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e128:	e0bffc17 	ldw	r2,-16(fp)
    e12c:	1007883a 	mov	r3,r2
    e130:	e0bffe17 	ldw	r2,-8(fp)
    e134:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e138:	e13ffc17 	ldw	r4,-16(fp)
    e13c:	000e0780 	call	e078 <alt_up_irda_check_parity>
    e140:	1007883a 	mov	r3,r2
    e144:	e0bfff17 	ldw	r2,-4(fp)
    e148:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	10a0000c 	andi	r2,r2,32768
    e154:	1004d3fa 	srli	r2,r2,15
    e158:	10bfffc4 	addi	r2,r2,-1
}
    e15c:	e037883a 	mov	sp,fp
    e160:	dfc00117 	ldw	ra,4(sp)
    e164:	df000017 	ldw	fp,0(sp)
    e168:	dec00204 	addi	sp,sp,8
    e16c:	f800283a 	ret

0000e170 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e170:	defff804 	addi	sp,sp,-32
    e174:	dfc00715 	stw	ra,28(sp)
    e178:	df000615 	stw	fp,24(sp)
    e17c:	df000604 	addi	fp,sp,24
    e180:	e13ffd15 	stw	r4,-12(fp)
    e184:	e17ffe15 	stw	r5,-8(fp)
    e188:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e18c:	e0bffd17 	ldw	r2,-12(fp)
    e190:	10800017 	ldw	r2,0(r2)
    e194:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e198:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e19c:	00000e06 	br	e1d8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    e1a0:	e0bffe17 	ldw	r2,-8(fp)
    e1a4:	10c00044 	addi	r3,r2,1
    e1a8:	e0fffe15 	stw	r3,-8(fp)
    e1ac:	e0fffc04 	addi	r3,fp,-16
    e1b0:	e13ffb17 	ldw	r4,-20(fp)
    e1b4:	100b883a 	mov	r5,r2
    e1b8:	180d883a 	mov	r6,r3
    e1bc:	000e0fc0 	call	e0fc <alt_up_irda_read_data>
    e1c0:	1000041e 	bne	r2,zero,e1d4 <alt_up_irda_read_fd+0x64>
			count++;
    e1c4:	e0bffa17 	ldw	r2,-24(fp)
    e1c8:	10800044 	addi	r2,r2,1
    e1cc:	e0bffa15 	stw	r2,-24(fp)
    e1d0:	00000106 	br	e1d8 <alt_up_irda_read_fd+0x68>
		else
			break;
    e1d4:	00000406 	br	e1e8 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e1d8:	e0bfff17 	ldw	r2,-4(fp)
    e1dc:	10ffffc4 	addi	r3,r2,-1
    e1e0:	e0ffff15 	stw	r3,-4(fp)
    e1e4:	103fee1e 	bne	r2,zero,e1a0 <__alt_mem_Flash_flash_data+0xf400e1a0>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e1e8:	e0bffa17 	ldw	r2,-24(fp)
}
    e1ec:	e037883a 	mov	sp,fp
    e1f0:	dfc00117 	ldw	ra,4(sp)
    e1f4:	df000017 	ldw	fp,0(sp)
    e1f8:	dec00204 	addi	sp,sp,8
    e1fc:	f800283a 	ret

0000e200 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e200:	defff904 	addi	sp,sp,-28
    e204:	dfc00615 	stw	ra,24(sp)
    e208:	df000515 	stw	fp,20(sp)
    e20c:	df000504 	addi	fp,sp,20
    e210:	e13ffd15 	stw	r4,-12(fp)
    e214:	e17ffe15 	stw	r5,-8(fp)
    e218:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e21c:	e0bffd17 	ldw	r2,-12(fp)
    e220:	10800017 	ldw	r2,0(r2)
    e224:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e228:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e22c:	00000e06 	br	e268 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    e230:	e0bffe17 	ldw	r2,-8(fp)
    e234:	10c00044 	addi	r3,r2,1
    e238:	e0fffe15 	stw	r3,-8(fp)
    e23c:	10800003 	ldbu	r2,0(r2)
    e240:	10803fcc 	andi	r2,r2,255
    e244:	e13ffc17 	ldw	r4,-16(fp)
    e248:	100b883a 	mov	r5,r2
    e24c:	000e0bc0 	call	e0bc <alt_up_irda_write_data>
    e250:	1000041e 	bne	r2,zero,e264 <alt_up_irda_write_fd+0x64>
			count++;
    e254:	e0bffb17 	ldw	r2,-20(fp)
    e258:	10800044 	addi	r2,r2,1
    e25c:	e0bffb15 	stw	r2,-20(fp)
    e260:	00000106 	br	e268 <alt_up_irda_write_fd+0x68>
		else
			break;
    e264:	00000406 	br	e278 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    e268:	e0bfff17 	ldw	r2,-4(fp)
    e26c:	10ffffc4 	addi	r3,r2,-1
    e270:	e0ffff15 	stw	r3,-4(fp)
    e274:	103fee1e 	bne	r2,zero,e230 <__alt_mem_Flash_flash_data+0xf400e230>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    e278:	e0bffb17 	ldw	r2,-20(fp)
}
    e27c:	e037883a 	mov	sp,fp
    e280:	dfc00117 	ldw	ra,4(sp)
    e284:	df000017 	ldw	fp,0(sp)
    e288:	dec00204 	addi	sp,sp,8
    e28c:	f800283a 	ret

0000e290 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    e290:	defffc04 	addi	sp,sp,-16
    e294:	dfc00315 	stw	ra,12(sp)
    e298:	df000215 	stw	fp,8(sp)
    e29c:	df000204 	addi	fp,sp,8
    e2a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    e2a4:	e13fff17 	ldw	r4,-4(fp)
    e2a8:	01400074 	movhi	r5,1
    e2ac:	2949d104 	addi	r5,r5,10052
    e2b0:	000f3400 	call	f340 <alt_find_dev>
    e2b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e2b8:	e0bffe17 	ldw	r2,-8(fp)
}
    e2bc:	e037883a 	mov	sp,fp
    e2c0:	dfc00117 	ldw	ra,4(sp)
    e2c4:	df000017 	ldw	fp,0(sp)
    e2c8:	dec00204 	addi	sp,sp,8
    e2cc:	f800283a 	ret

0000e2d0 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    e2d0:	defffc04 	addi	sp,sp,-16
    e2d4:	dfc00315 	stw	ra,12(sp)
    e2d8:	df000215 	stw	fp,8(sp)
    e2dc:	df000204 	addi	fp,sp,8
    e2e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    e2e4:	e13fff17 	ldw	r4,-4(fp)
    e2e8:	01400074 	movhi	r5,1
    e2ec:	2949d104 	addi	r5,r5,10052
    e2f0:	000f3400 	call	f340 <alt_find_dev>
    e2f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e2f8:	e0bffe17 	ldw	r2,-8(fp)
}
    e2fc:	e037883a 	mov	sp,fp
    e300:	dfc00117 	ldw	ra,4(sp)
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00204 	addi	sp,sp,8
    e30c:	f800283a 	ret

0000e310 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e310:	defffd04 	addi	sp,sp,-12
    e314:	df000215 	stw	fp,8(sp)
    e318:	df000204 	addi	fp,sp,8
    e31c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    e320:	e0bfff17 	ldw	r2,-4(fp)
    e324:	1080400c 	andi	r2,r2,256
    e328:	1004d23a 	srli	r2,r2,8
    e32c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    e330:	e0bffe03 	ldbu	r2,-8(fp)
}
    e334:	e037883a 	mov	sp,fp
    e338:	df000017 	ldw	fp,0(sp)
    e33c:	dec00104 	addi	sp,sp,4
    e340:	f800283a 	ret

0000e344 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    e344:	defffd04 	addi	sp,sp,-12
    e348:	df000215 	stw	fp,8(sp)
    e34c:	df000204 	addi	fp,sp,8
    e350:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	1080004c 	andi	r2,r2,1
    e35c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e360:	e0bffe03 	ldbu	r2,-8(fp)
}
    e364:	e037883a 	mov	sp,fp
    e368:	df000017 	ldw	fp,0(sp)
    e36c:	dec00104 	addi	sp,sp,4
    e370:	f800283a 	ret

0000e374 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e374:	defffd04 	addi	sp,sp,-12
    e378:	df000215 	stw	fp,8(sp)
    e37c:	df000204 	addi	fp,sp,8
    e380:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	1081000c 	andi	r2,r2,1024
    e38c:	1004d2ba 	srli	r2,r2,10
    e390:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e394:	e0bffe03 	ldbu	r2,-8(fp)
}
    e398:	e037883a 	mov	sp,fp
    e39c:	df000017 	ldw	fp,0(sp)
    e3a0:	dec00104 	addi	sp,sp,4
    e3a4:	f800283a 	ret

0000e3a8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    e3a8:	defffd04 	addi	sp,sp,-12
    e3ac:	df000215 	stw	fp,8(sp)
    e3b0:	df000204 	addi	fp,sp,8
    e3b4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    e3b8:	e0bfff17 	ldw	r2,-4(fp)
    e3bc:	1004d43a 	srli	r2,r2,16
    e3c0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    e3c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e3c8:	e037883a 	mov	sp,fp
    e3cc:	df000017 	ldw	fp,0(sp)
    e3d0:	dec00104 	addi	sp,sp,4
    e3d4:	f800283a 	ret

0000e3d8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e3d8:	defffd04 	addi	sp,sp,-12
    e3dc:	df000215 	stw	fp,8(sp)
    e3e0:	df000204 	addi	fp,sp,8
    e3e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    e3e8:	e0bfff17 	ldw	r2,-4(fp)
    e3ec:	10a0000c 	andi	r2,r2,32768
    e3f0:	1004d3fa 	srli	r2,r2,15
    e3f4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    e3f8:	e0bffe03 	ldbu	r2,-8(fp)
}
    e3fc:	e037883a 	mov	sp,fp
    e400:	df000017 	ldw	fp,0(sp)
    e404:	dec00104 	addi	sp,sp,4
    e408:	f800283a 	ret

0000e40c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    e40c:	defffd04 	addi	sp,sp,-12
    e410:	df000215 	stw	fp,8(sp)
    e414:	df000204 	addi	fp,sp,8
    e418:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    e41c:	e0bfff17 	ldw	r2,-4(fp)
    e420:	e0bffe05 	stb	r2,-8(fp)
	return data;
    e424:	e0bffe03 	ldbu	r2,-8(fp)
}
    e428:	e037883a 	mov	sp,fp
    e42c:	df000017 	ldw	fp,0(sp)
    e430:	dec00104 	addi	sp,sp,4
    e434:	f800283a 	ret

0000e438 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    e438:	defffb04 	addi	sp,sp,-20
    e43c:	dfc00415 	stw	ra,16(sp)
    e440:	df000315 	stw	fp,12(sp)
    e444:	df000304 	addi	fp,sp,12
    e448:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    e44c:	e13fff17 	ldw	r4,-4(fp)
    e450:	01403fc4 	movi	r5,255
    e454:	000e6940 	call	e694 <alt_up_ps2_write_data_byte_with_ack>
    e458:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    e45c:	e0bffd17 	ldw	r2,-12(fp)
    e460:	1000211e 	bne	r2,zero,e4e8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e464:	e0bffe04 	addi	r2,fp,-8
    e468:	e13fff17 	ldw	r4,-4(fp)
    e46c:	100b883a 	mov	r5,r2
    e470:	000e6f80 	call	e6f8 <alt_up_ps2_read_data_byte_timeout>
    e474:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    e478:	e0bffd17 	ldw	r2,-12(fp)
    e47c:	10001a1e 	bne	r2,zero,e4e8 <alt_up_ps2_init+0xb0>
    e480:	e0bffe03 	ldbu	r2,-8(fp)
    e484:	10803fcc 	andi	r2,r2,255
    e488:	10802a98 	cmpnei	r2,r2,170
    e48c:	1000161e 	bne	r2,zero,e4e8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e490:	e0bffe04 	addi	r2,fp,-8
    e494:	e13fff17 	ldw	r4,-4(fp)
    e498:	100b883a 	mov	r5,r2
    e49c:	000e6f80 	call	e6f8 <alt_up_ps2_read_data_byte_timeout>
    e4a0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    e4a4:	e0bffd17 	ldw	r2,-12(fp)
    e4a8:	10bfe318 	cmpnei	r2,r2,-116
    e4ac:	1000041e 	bne	r2,zero,e4c0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    e4b0:	e0bfff17 	ldw	r2,-4(fp)
    e4b4:	00c00044 	movi	r3,1
    e4b8:	10c00d15 	stw	r3,52(r2)
    e4bc:	00000a06 	br	e4e8 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    e4c0:	e0bffd17 	ldw	r2,-12(fp)
    e4c4:	1000081e 	bne	r2,zero,e4e8 <alt_up_ps2_init+0xb0>
    e4c8:	e0bffe03 	ldbu	r2,-8(fp)
    e4cc:	10803fcc 	andi	r2,r2,255
    e4d0:	1000051e 	bne	r2,zero,e4e8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    e4d4:	e0bfff17 	ldw	r2,-4(fp)
    e4d8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    e4dc:	e13fff17 	ldw	r4,-4(fp)
    e4e0:	01403d04 	movi	r5,244
    e4e4:	000e5b00 	call	e5b0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e4e8:	e037883a 	mov	sp,fp
    e4ec:	dfc00117 	ldw	ra,4(sp)
    e4f0:	df000017 	ldw	fp,0(sp)
    e4f4:	dec00204 	addi	sp,sp,8
    e4f8:	f800283a 	ret

0000e4fc <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e4fc:	defffd04 	addi	sp,sp,-12
    e500:	df000215 	stw	fp,8(sp)
    e504:	df000204 	addi	fp,sp,8
    e508:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e50c:	e0bfff17 	ldw	r2,-4(fp)
    e510:	10800a17 	ldw	r2,40(r2)
    e514:	10800104 	addi	r2,r2,4
    e518:	10800037 	ldwio	r2,0(r2)
    e51c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e520:	e0bffe17 	ldw	r2,-8(fp)
    e524:	10800054 	ori	r2,r2,1
    e528:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e52c:	e0bfff17 	ldw	r2,-4(fp)
    e530:	10800a17 	ldw	r2,40(r2)
    e534:	10800104 	addi	r2,r2,4
    e538:	1007883a 	mov	r3,r2
    e53c:	e0bffe17 	ldw	r2,-8(fp)
    e540:	18800035 	stwio	r2,0(r3)
}
    e544:	e037883a 	mov	sp,fp
    e548:	df000017 	ldw	fp,0(sp)
    e54c:	dec00104 	addi	sp,sp,4
    e550:	f800283a 	ret

0000e554 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e554:	defffd04 	addi	sp,sp,-12
    e558:	df000215 	stw	fp,8(sp)
    e55c:	df000204 	addi	fp,sp,8
    e560:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e564:	e0bfff17 	ldw	r2,-4(fp)
    e568:	10800a17 	ldw	r2,40(r2)
    e56c:	10800104 	addi	r2,r2,4
    e570:	10800037 	ldwio	r2,0(r2)
    e574:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e578:	e0fffe17 	ldw	r3,-8(fp)
    e57c:	00bfff84 	movi	r2,-2
    e580:	1884703a 	and	r2,r3,r2
    e584:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e588:	e0bfff17 	ldw	r2,-4(fp)
    e58c:	10800a17 	ldw	r2,40(r2)
    e590:	10800104 	addi	r2,r2,4
    e594:	1007883a 	mov	r3,r2
    e598:	e0bffe17 	ldw	r2,-8(fp)
    e59c:	18800035 	stwio	r2,0(r3)
}
    e5a0:	e037883a 	mov	sp,fp
    e5a4:	df000017 	ldw	fp,0(sp)
    e5a8:	dec00104 	addi	sp,sp,4
    e5ac:	f800283a 	ret

0000e5b0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e5b0:	defffb04 	addi	sp,sp,-20
    e5b4:	dfc00415 	stw	ra,16(sp)
    e5b8:	df000315 	stw	fp,12(sp)
    e5bc:	df000304 	addi	fp,sp,12
    e5c0:	e13ffe15 	stw	r4,-8(fp)
    e5c4:	2805883a 	mov	r2,r5
    e5c8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e5cc:	e0bffe17 	ldw	r2,-8(fp)
    e5d0:	10800a17 	ldw	r2,40(r2)
    e5d4:	1007883a 	mov	r3,r2
    e5d8:	e0bfff03 	ldbu	r2,-4(fp)
    e5dc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e5e0:	e0bffe17 	ldw	r2,-8(fp)
    e5e4:	10800a17 	ldw	r2,40(r2)
    e5e8:	10800104 	addi	r2,r2,4
    e5ec:	10800037 	ldwio	r2,0(r2)
    e5f0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    e5f4:	e13ffd17 	ldw	r4,-12(fp)
    e5f8:	000e3740 	call	e374 <read_CE_bit>
    e5fc:	10803fcc 	andi	r2,r2,255
    e600:	10000226 	beq	r2,zero,e60c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    e604:	00bffec4 	movi	r2,-5
    e608:	00000106 	br	e610 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    e60c:	0005883a 	mov	r2,zero
}
    e610:	e037883a 	mov	sp,fp
    e614:	dfc00117 	ldw	ra,4(sp)
    e618:	df000017 	ldw	fp,0(sp)
    e61c:	dec00204 	addi	sp,sp,8
    e620:	f800283a 	ret

0000e624 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    e624:	defffc04 	addi	sp,sp,-16
    e628:	dfc00315 	stw	ra,12(sp)
    e62c:	df000215 	stw	fp,8(sp)
    e630:	df000204 	addi	fp,sp,8
    e634:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    e638:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    e63c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    e640:	e0bffe44 	addi	r2,fp,-7
    e644:	e13fff17 	ldw	r4,-4(fp)
    e648:	100b883a 	mov	r5,r2
    e64c:	000e6f80 	call	e6f8 <alt_up_ps2_read_data_byte_timeout>
    e650:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    e654:	e0bffe03 	ldbu	r2,-8(fp)
    e658:	1000061e 	bne	r2,zero,e674 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    e65c:	e0bffe43 	ldbu	r2,-7(fp)
    e660:	10803fcc 	andi	r2,r2,255
    e664:	10803e98 	cmpnei	r2,r2,250
    e668:	1000041e 	bne	r2,zero,e67c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    e66c:	0005883a 	mov	r2,zero
    e670:	00000306 	br	e680 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    e674:	e0bffe03 	ldbu	r2,-8(fp)
    e678:	00000106 	br	e680 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    e67c:	003ff006 	br	e640 <__alt_mem_Flash_flash_data+0xf400e640>
	return -ETIMEDOUT;
}
    e680:	e037883a 	mov	sp,fp
    e684:	dfc00117 	ldw	ra,4(sp)
    e688:	df000017 	ldw	fp,0(sp)
    e68c:	dec00204 	addi	sp,sp,8
    e690:	f800283a 	ret

0000e694 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e694:	defffa04 	addi	sp,sp,-24
    e698:	dfc00515 	stw	ra,20(sp)
    e69c:	df000415 	stw	fp,16(sp)
    e6a0:	df000404 	addi	fp,sp,16
    e6a4:	e13ffe15 	stw	r4,-8(fp)
    e6a8:	2805883a 	mov	r2,r5
    e6ac:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    e6b0:	e0bfff03 	ldbu	r2,-4(fp)
    e6b4:	e13ffe17 	ldw	r4,-8(fp)
    e6b8:	100b883a 	mov	r5,r2
    e6bc:	000e5b00 	call	e5b0 <alt_up_ps2_write_data_byte>
    e6c0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    e6c4:	e0bffc17 	ldw	r2,-16(fp)
    e6c8:	10000226 	beq	r2,zero,e6d4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    e6cc:	e0bffc17 	ldw	r2,-16(fp)
    e6d0:	00000406 	br	e6e4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    e6d4:	e13ffe17 	ldw	r4,-8(fp)
    e6d8:	000e6240 	call	e624 <alt_up_ps2_wait_for_ack>
    e6dc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
}
    e6e4:	e037883a 	mov	sp,fp
    e6e8:	dfc00117 	ldw	ra,4(sp)
    e6ec:	df000017 	ldw	fp,0(sp)
    e6f0:	dec00204 	addi	sp,sp,8
    e6f4:	f800283a 	ret

0000e6f8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e6f8:	defffa04 	addi	sp,sp,-24
    e6fc:	dfc00515 	stw	ra,20(sp)
    e700:	df000415 	stw	fp,16(sp)
    e704:	df000404 	addi	fp,sp,16
    e708:	e13ffe15 	stw	r4,-8(fp)
    e70c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    e710:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    e714:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    e718:	e0bffc17 	ldw	r2,-16(fp)
    e71c:	10800044 	addi	r2,r2,1
    e720:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e724:	e0bffe17 	ldw	r2,-8(fp)
    e728:	10800a17 	ldw	r2,40(r2)
    e72c:	10800037 	ldwio	r2,0(r2)
    e730:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    e734:	e13ffd17 	ldw	r4,-12(fp)
    e738:	000e3d80 	call	e3d8 <read_data_valid>
    e73c:	10803fcc 	andi	r2,r2,255
    e740:	10000726 	beq	r2,zero,e760 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    e744:	e13ffd17 	ldw	r4,-12(fp)
    e748:	000e40c0 	call	e40c <read_data_byte>
    e74c:	1007883a 	mov	r3,r2
    e750:	e0bfff17 	ldw	r2,-4(fp)
    e754:	10c00005 	stb	r3,0(r2)
			return 0;
    e758:	0005883a 	mov	r2,zero
    e75c:	00000a06 	br	e788 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    e760:	e0bffe17 	ldw	r2,-8(fp)
    e764:	10800c17 	ldw	r2,48(r2)
    e768:	10000626 	beq	r2,zero,e784 <alt_up_ps2_read_data_byte_timeout+0x8c>
    e76c:	e0bffe17 	ldw	r2,-8(fp)
    e770:	10c00c17 	ldw	r3,48(r2)
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	1880022e 	bgeu	r3,r2,e784 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    e77c:	00bfe304 	movi	r2,-116
    e780:	00000106 	br	e788 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    e784:	003fe406 	br	e718 <__alt_mem_Flash_flash_data+0xf400e718>
}
    e788:	e037883a 	mov	sp,fp
    e78c:	dfc00117 	ldw	ra,4(sp)
    e790:	df000017 	ldw	fp,0(sp)
    e794:	dec00204 	addi	sp,sp,8
    e798:	f800283a 	ret

0000e79c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    e79c:	defffb04 	addi	sp,sp,-20
    e7a0:	dfc00415 	stw	ra,16(sp)
    e7a4:	df000315 	stw	fp,12(sp)
    e7a8:	df000304 	addi	fp,sp,12
    e7ac:	e13ffe15 	stw	r4,-8(fp)
    e7b0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    e7b4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e7b8:	e0bffe17 	ldw	r2,-8(fp)
    e7bc:	10800a17 	ldw	r2,40(r2)
    e7c0:	10800037 	ldwio	r2,0(r2)
    e7c4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    e7c8:	e13ffd17 	ldw	r4,-12(fp)
    e7cc:	000e3d80 	call	e3d8 <read_data_valid>
    e7d0:	10803fcc 	andi	r2,r2,255
    e7d4:	10000726 	beq	r2,zero,e7f4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    e7d8:	e13ffd17 	ldw	r4,-12(fp)
    e7dc:	000e40c0 	call	e40c <read_data_byte>
    e7e0:	1007883a 	mov	r3,r2
    e7e4:	e0bfff17 	ldw	r2,-4(fp)
    e7e8:	10c00005 	stb	r3,0(r2)
		return 0;
    e7ec:	0005883a 	mov	r2,zero
    e7f0:	00000106 	br	e7f8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    e7f4:	00bfffc4 	movi	r2,-1
}
    e7f8:	e037883a 	mov	sp,fp
    e7fc:	dfc00117 	ldw	ra,4(sp)
    e800:	df000017 	ldw	fp,0(sp)
    e804:	dec00204 	addi	sp,sp,8
    e808:	f800283a 	ret

0000e80c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    e80c:	defffb04 	addi	sp,sp,-20
    e810:	dfc00415 	stw	ra,16(sp)
    e814:	df000315 	stw	fp,12(sp)
    e818:	df000304 	addi	fp,sp,12
    e81c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    e820:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    e824:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    e828:	e0bfff17 	ldw	r2,-4(fp)
    e82c:	10800a17 	ldw	r2,40(r2)
    e830:	10800037 	ldwio	r2,0(r2)
    e834:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    e838:	e13ffe17 	ldw	r4,-8(fp)
    e83c:	000e3a80 	call	e3a8 <read_num_bytes_available>
    e840:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    e844:	e0bffd0b 	ldhu	r2,-12(fp)
    e848:	103ff71e 	bne	r2,zero,e828 <__alt_mem_Flash_flash_data+0xf400e828>
}
    e84c:	e037883a 	mov	sp,fp
    e850:	dfc00117 	ldw	ra,4(sp)
    e854:	df000017 	ldw	fp,0(sp)
    e858:	dec00204 	addi	sp,sp,8
    e85c:	f800283a 	ret

0000e860 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    e860:	defff804 	addi	sp,sp,-32
    e864:	dfc00715 	stw	ra,28(sp)
    e868:	df000615 	stw	fp,24(sp)
    e86c:	df000604 	addi	fp,sp,24
    e870:	e13ffd15 	stw	r4,-12(fp)
    e874:	e17ffe15 	stw	r5,-8(fp)
    e878:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e87c:	e0bffd17 	ldw	r2,-12(fp)
    e880:	10800017 	ldw	r2,0(r2)
    e884:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    e888:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    e88c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    e890:	e0fffc17 	ldw	r3,-16(fp)
    e894:	e0bfff17 	ldw	r2,-4(fp)
    e898:	18bffd16 	blt	r3,r2,e890 <__alt_mem_Flash_flash_data+0xf400e890>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    e89c:	e0bffe17 	ldw	r2,-8(fp)
    e8a0:	10c00044 	addi	r3,r2,1
    e8a4:	e0fffe15 	stw	r3,-8(fp)
    e8a8:	e13ffa17 	ldw	r4,-24(fp)
    e8ac:	100b883a 	mov	r5,r2
    e8b0:	000e6f80 	call	e6f8 <alt_up_ps2_read_data_byte_timeout>
    e8b4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    e8b8:	e0bffb17 	ldw	r2,-20(fp)
    e8bc:	10000226 	beq	r2,zero,e8c8 <alt_up_ps2_read_fd+0x68>
			return count;
    e8c0:	e0bffc17 	ldw	r2,-16(fp)
    e8c4:	00000406 	br	e8d8 <alt_up_ps2_read_fd+0x78>
		count++;
    e8c8:	e0bffc17 	ldw	r2,-16(fp)
    e8cc:	10800044 	addi	r2,r2,1
    e8d0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    e8d4:	e0bffc17 	ldw	r2,-16(fp)
}
    e8d8:	e037883a 	mov	sp,fp
    e8dc:	dfc00117 	ldw	ra,4(sp)
    e8e0:	df000017 	ldw	fp,0(sp)
    e8e4:	dec00204 	addi	sp,sp,8
    e8e8:	f800283a 	ret

0000e8ec <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e8ec:	defff804 	addi	sp,sp,-32
    e8f0:	dfc00715 	stw	ra,28(sp)
    e8f4:	df000615 	stw	fp,24(sp)
    e8f8:	df000604 	addi	fp,sp,24
    e8fc:	e13ffd15 	stw	r4,-12(fp)
    e900:	e17ffe15 	stw	r5,-8(fp)
    e904:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    e908:	e0bffd17 	ldw	r2,-12(fp)
    e90c:	10800017 	ldw	r2,0(r2)
    e910:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    e914:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    e918:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    e91c:	00001006 	br	e960 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	10c00044 	addi	r3,r2,1
    e928:	e0fffe15 	stw	r3,-8(fp)
    e92c:	10800003 	ldbu	r2,0(r2)
    e930:	10803fcc 	andi	r2,r2,255
    e934:	e13ffb17 	ldw	r4,-20(fp)
    e938:	100b883a 	mov	r5,r2
    e93c:	000e5b00 	call	e5b0 <alt_up_ps2_write_data_byte>
    e940:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    e944:	e0bffc17 	ldw	r2,-16(fp)
    e948:	10000226 	beq	r2,zero,e954 <alt_up_ps2_write_fd+0x68>
			return count;
    e94c:	e0bffa17 	ldw	r2,-24(fp)
    e950:	00000706 	br	e970 <alt_up_ps2_write_fd+0x84>
		count++;
    e954:	e0bffa17 	ldw	r2,-24(fp)
    e958:	10800044 	addi	r2,r2,1
    e95c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    e960:	e0fffa17 	ldw	r3,-24(fp)
    e964:	e0bfff17 	ldw	r2,-4(fp)
    e968:	18bfed16 	blt	r3,r2,e920 <__alt_mem_Flash_flash_data+0xf400e920>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    e96c:	e0bffa17 	ldw	r2,-24(fp)
}
    e970:	e037883a 	mov	sp,fp
    e974:	dfc00117 	ldw	ra,4(sp)
    e978:	df000017 	ldw	fp,0(sp)
    e97c:	dec00204 	addi	sp,sp,8
    e980:	f800283a 	ret

0000e984 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    e984:	defffc04 	addi	sp,sp,-16
    e988:	dfc00315 	stw	ra,12(sp)
    e98c:	df000215 	stw	fp,8(sp)
    e990:	df000204 	addi	fp,sp,8
    e994:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    e998:	e13fff17 	ldw	r4,-4(fp)
    e99c:	01400074 	movhi	r5,1
    e9a0:	2949d104 	addi	r5,r5,10052
    e9a4:	000f3400 	call	f340 <alt_find_dev>
    e9a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e9ac:	e0bffe17 	ldw	r2,-8(fp)
}
    e9b0:	e037883a 	mov	sp,fp
    e9b4:	dfc00117 	ldw	ra,4(sp)
    e9b8:	df000017 	ldw	fp,0(sp)
    e9bc:	dec00204 	addi	sp,sp,8
    e9c0:	f800283a 	ret

0000e9c4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    e9c4:	defffd04 	addi	sp,sp,-12
    e9c8:	df000215 	stw	fp,8(sp)
    e9cc:	df000204 	addi	fp,sp,8
    e9d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    e9d4:	e0bfff17 	ldw	r2,-4(fp)
    e9d8:	10800a17 	ldw	r2,40(r2)
    e9dc:	10800104 	addi	r2,r2,4
    e9e0:	10800037 	ldwio	r2,0(r2)
    e9e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    e9e8:	e0bffe17 	ldw	r2,-8(fp)
    e9ec:	10800054 	ori	r2,r2,1
    e9f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    e9f4:	e0bfff17 	ldw	r2,-4(fp)
    e9f8:	10800a17 	ldw	r2,40(r2)
    e9fc:	10800104 	addi	r2,r2,4
    ea00:	1007883a 	mov	r3,r2
    ea04:	e0bffe17 	ldw	r2,-8(fp)
    ea08:	18800035 	stwio	r2,0(r3)
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	df000017 	ldw	fp,0(sp)
    ea14:	dec00104 	addi	sp,sp,4
    ea18:	f800283a 	ret

0000ea1c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ea1c:	defffd04 	addi	sp,sp,-12
    ea20:	df000215 	stw	fp,8(sp)
    ea24:	df000204 	addi	fp,sp,8
    ea28:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ea2c:	e0bfff17 	ldw	r2,-4(fp)
    ea30:	10800a17 	ldw	r2,40(r2)
    ea34:	10800104 	addi	r2,r2,4
    ea38:	10800037 	ldwio	r2,0(r2)
    ea3c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    ea40:	e0fffe17 	ldw	r3,-8(fp)
    ea44:	00bfff84 	movi	r2,-2
    ea48:	1884703a 	and	r2,r3,r2
    ea4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ea50:	e0bfff17 	ldw	r2,-4(fp)
    ea54:	10800a17 	ldw	r2,40(r2)
    ea58:	10800104 	addi	r2,r2,4
    ea5c:	1007883a 	mov	r3,r2
    ea60:	e0bffe17 	ldw	r2,-8(fp)
    ea64:	18800035 	stwio	r2,0(r3)
}
    ea68:	e037883a 	mov	sp,fp
    ea6c:	df000017 	ldw	fp,0(sp)
    ea70:	dec00104 	addi	sp,sp,4
    ea74:	f800283a 	ret

0000ea78 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    ea78:	defffd04 	addi	sp,sp,-12
    ea7c:	df000215 	stw	fp,8(sp)
    ea80:	df000204 	addi	fp,sp,8
    ea84:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    ea88:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    ea8c:	e0bfff17 	ldw	r2,-4(fp)
    ea90:	10800a17 	ldw	r2,40(r2)
    ea94:	10800084 	addi	r2,r2,2
    ea98:	1080002b 	ldhuio	r2,0(r2)
    ea9c:	10bfffcc 	andi	r2,r2,65535
    eaa0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    eaa4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    eaa8:	e037883a 	mov	sp,fp
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00104 	addi	sp,sp,4
    eab4:	f800283a 	ret

0000eab8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    eab8:	defffd04 	addi	sp,sp,-12
    eabc:	df000215 	stw	fp,8(sp)
    eac0:	df000204 	addi	fp,sp,8
    eac4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    eac8:	e0bfff17 	ldw	r2,-4(fp)
    eacc:	10800a17 	ldw	r2,40(r2)
    ead0:	10800104 	addi	r2,r2,4
    ead4:	10800037 	ldwio	r2,0(r2)
    ead8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    eadc:	e0bffe17 	ldw	r2,-8(fp)
    eae0:	1004d43a 	srli	r2,r2,16
}
    eae4:	e037883a 	mov	sp,fp
    eae8:	df000017 	ldw	fp,0(sp)
    eaec:	dec00104 	addi	sp,sp,4
    eaf0:	f800283a 	ret

0000eaf4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    eaf4:	defffd04 	addi	sp,sp,-12
    eaf8:	df000215 	stw	fp,8(sp)
    eafc:	df000204 	addi	fp,sp,8
    eb00:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    eb04:	e0bfff17 	ldw	r2,-4(fp)
    eb08:	1080800c 	andi	r2,r2,512
    eb0c:	1004d27a 	srli	r2,r2,9
    eb10:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    eb14:	e0bffe17 	ldw	r2,-8(fp)
    eb18:	10000226 	beq	r2,zero,eb24 <alt_up_rs232_check_parity+0x30>
    eb1c:	00bfffc4 	movi	r2,-1
    eb20:	00000106 	br	eb28 <alt_up_rs232_check_parity+0x34>
    eb24:	0005883a 	mov	r2,zero
}
    eb28:	e037883a 	mov	sp,fp
    eb2c:	df000017 	ldw	fp,0(sp)
    eb30:	dec00104 	addi	sp,sp,4
    eb34:	f800283a 	ret

0000eb38 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    eb38:	defffd04 	addi	sp,sp,-12
    eb3c:	df000215 	stw	fp,8(sp)
    eb40:	df000204 	addi	fp,sp,8
    eb44:	e13ffe15 	stw	r4,-8(fp)
    eb48:	2805883a 	mov	r2,r5
    eb4c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    eb50:	e0bffe17 	ldw	r2,-8(fp)
    eb54:	10800a17 	ldw	r2,40(r2)
    eb58:	1007883a 	mov	r3,r2
    eb5c:	e0bfff03 	ldbu	r2,-4(fp)
    eb60:	18800035 	stwio	r2,0(r3)
	return 0;
    eb64:	0005883a 	mov	r2,zero
}
    eb68:	e037883a 	mov	sp,fp
    eb6c:	df000017 	ldw	fp,0(sp)
    eb70:	dec00104 	addi	sp,sp,4
    eb74:	f800283a 	ret

0000eb78 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    eb78:	defffa04 	addi	sp,sp,-24
    eb7c:	dfc00515 	stw	ra,20(sp)
    eb80:	df000415 	stw	fp,16(sp)
    eb84:	df000404 	addi	fp,sp,16
    eb88:	e13ffd15 	stw	r4,-12(fp)
    eb8c:	e17ffe15 	stw	r5,-8(fp)
    eb90:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    eb94:	e0bffd17 	ldw	r2,-12(fp)
    eb98:	10800a17 	ldw	r2,40(r2)
    eb9c:	10800037 	ldwio	r2,0(r2)
    eba0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    eba4:	e0bffc17 	ldw	r2,-16(fp)
    eba8:	1007883a 	mov	r3,r2
    ebac:	e0bffe17 	ldw	r2,-8(fp)
    ebb0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    ebb4:	e13ffc17 	ldw	r4,-16(fp)
    ebb8:	000eaf40 	call	eaf4 <alt_up_rs232_check_parity>
    ebbc:	1007883a 	mov	r3,r2
    ebc0:	e0bfff17 	ldw	r2,-4(fp)
    ebc4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    ebc8:	e0bffc17 	ldw	r2,-16(fp)
    ebcc:	10a0000c 	andi	r2,r2,32768
    ebd0:	1004d3fa 	srli	r2,r2,15
    ebd4:	10bfffc4 	addi	r2,r2,-1
}
    ebd8:	e037883a 	mov	sp,fp
    ebdc:	dfc00117 	ldw	ra,4(sp)
    ebe0:	df000017 	ldw	fp,0(sp)
    ebe4:	dec00204 	addi	sp,sp,8
    ebe8:	f800283a 	ret

0000ebec <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    ebec:	defff804 	addi	sp,sp,-32
    ebf0:	dfc00715 	stw	ra,28(sp)
    ebf4:	df000615 	stw	fp,24(sp)
    ebf8:	df000604 	addi	fp,sp,24
    ebfc:	e13ffd15 	stw	r4,-12(fp)
    ec00:	e17ffe15 	stw	r5,-8(fp)
    ec04:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ec08:	e0bffd17 	ldw	r2,-12(fp)
    ec0c:	10800017 	ldw	r2,0(r2)
    ec10:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    ec14:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    ec18:	00000e06 	br	ec54 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    ec1c:	e0bffe17 	ldw	r2,-8(fp)
    ec20:	10c00044 	addi	r3,r2,1
    ec24:	e0fffe15 	stw	r3,-8(fp)
    ec28:	e0fffc04 	addi	r3,fp,-16
    ec2c:	e13ffb17 	ldw	r4,-20(fp)
    ec30:	100b883a 	mov	r5,r2
    ec34:	180d883a 	mov	r6,r3
    ec38:	000eb780 	call	eb78 <alt_up_rs232_read_data>
    ec3c:	1000041e 	bne	r2,zero,ec50 <alt_up_rs232_read_fd+0x64>
			count++;
    ec40:	e0bffa17 	ldw	r2,-24(fp)
    ec44:	10800044 	addi	r2,r2,1
    ec48:	e0bffa15 	stw	r2,-24(fp)
    ec4c:	00000106 	br	ec54 <alt_up_rs232_read_fd+0x68>
		else
			break;
    ec50:	00000406 	br	ec64 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    ec54:	e0bfff17 	ldw	r2,-4(fp)
    ec58:	10ffffc4 	addi	r3,r2,-1
    ec5c:	e0ffff15 	stw	r3,-4(fp)
    ec60:	103fee1e 	bne	r2,zero,ec1c <__alt_mem_Flash_flash_data+0xf400ec1c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    ec64:	e0bffa17 	ldw	r2,-24(fp)
}
    ec68:	e037883a 	mov	sp,fp
    ec6c:	dfc00117 	ldw	ra,4(sp)
    ec70:	df000017 	ldw	fp,0(sp)
    ec74:	dec00204 	addi	sp,sp,8
    ec78:	f800283a 	ret

0000ec7c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ec7c:	defff904 	addi	sp,sp,-28
    ec80:	dfc00615 	stw	ra,24(sp)
    ec84:	df000515 	stw	fp,20(sp)
    ec88:	df000504 	addi	fp,sp,20
    ec8c:	e13ffd15 	stw	r4,-12(fp)
    ec90:	e17ffe15 	stw	r5,-8(fp)
    ec94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ec98:	e0bffd17 	ldw	r2,-12(fp)
    ec9c:	10800017 	ldw	r2,0(r2)
    eca0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    eca4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    eca8:	00000f06 	br	ece8 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    ecac:	e0bffe17 	ldw	r2,-8(fp)
    ecb0:	10800003 	ldbu	r2,0(r2)
    ecb4:	10803fcc 	andi	r2,r2,255
    ecb8:	e13ffc17 	ldw	r4,-16(fp)
    ecbc:	100b883a 	mov	r5,r2
    ecc0:	000eb380 	call	eb38 <alt_up_rs232_write_data>
    ecc4:	1000071e 	bne	r2,zero,ece4 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    ecc8:	e0bffb17 	ldw	r2,-20(fp)
    eccc:	10800044 	addi	r2,r2,1
    ecd0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    ecd4:	e0bffe17 	ldw	r2,-8(fp)
    ecd8:	10800044 	addi	r2,r2,1
    ecdc:	e0bffe15 	stw	r2,-8(fp)
    ece0:	00000106 	br	ece8 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    ece4:	00000406 	br	ecf8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    ece8:	e0bfff17 	ldw	r2,-4(fp)
    ecec:	10ffffc4 	addi	r3,r2,-1
    ecf0:	e0ffff15 	stw	r3,-4(fp)
    ecf4:	103fed1e 	bne	r2,zero,ecac <__alt_mem_Flash_flash_data+0xf400ecac>
			ptr++;
		}
		else
			break;
	}
	return count;
    ecf8:	e0bffb17 	ldw	r2,-20(fp)
}
    ecfc:	e037883a 	mov	sp,fp
    ed00:	dfc00117 	ldw	ra,4(sp)
    ed04:	df000017 	ldw	fp,0(sp)
    ed08:	dec00204 	addi	sp,sp,8
    ed0c:	f800283a 	ret

0000ed10 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    ed10:	defffc04 	addi	sp,sp,-16
    ed14:	dfc00315 	stw	ra,12(sp)
    ed18:	df000215 	stw	fp,8(sp)
    ed1c:	df000204 	addi	fp,sp,8
    ed20:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    ed24:	e13fff17 	ldw	r4,-4(fp)
    ed28:	01400074 	movhi	r5,1
    ed2c:	2949d104 	addi	r5,r5,10052
    ed30:	000f3400 	call	f340 <alt_find_dev>
    ed34:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ed38:	e0bffe17 	ldw	r2,-8(fp)
}
    ed3c:	e037883a 	mov	sp,fp
    ed40:	dfc00117 	ldw	ra,4(sp)
    ed44:	df000017 	ldw	fp,0(sp)
    ed48:	dec00204 	addi	sp,sp,8
    ed4c:	f800283a 	ret

0000ed50 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    ed50:	defffc04 	addi	sp,sp,-16
    ed54:	dfc00315 	stw	ra,12(sp)
    ed58:	df000215 	stw	fp,8(sp)
    ed5c:	df000204 	addi	fp,sp,8
    ed60:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    ed64:	e0bfff17 	ldw	r2,-4(fp)
    ed68:	10800217 	ldw	r2,8(r2)
    ed6c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    ed70:	00000b06 	br	eda0 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    ed74:	e13ffe17 	ldw	r4,-8(fp)
    ed78:	01400074 	movhi	r5,1
    ed7c:	29424804 	addi	r5,r5,2336
    ed80:	001024c0 	call	1024c <strcmp>
    ed84:	1000031e 	bne	r2,zero,ed94 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    ed88:	e0bffe17 	ldw	r2,-8(fp)
    ed8c:	10000005 	stb	zero,0(r2)
			break;
    ed90:	00000906 	br	edb8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    ed94:	e0bffe17 	ldw	r2,-8(fp)
    ed98:	10800044 	addi	r2,r2,1
    ed9c:	e0bffe15 	stw	r2,-8(fp)
    eda0:	e0bffe17 	ldw	r2,-8(fp)
    eda4:	10800003 	ldbu	r2,0(r2)
    eda8:	10803fcc 	andi	r2,r2,255
    edac:	1080201c 	xori	r2,r2,128
    edb0:	10bfe004 	addi	r2,r2,-128
    edb4:	103fef1e 	bne	r2,zero,ed74 <__alt_mem_Flash_flash_data+0xf400ed74>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    edb8:	0001883a 	nop
}
    edbc:	e037883a 	mov	sp,fp
    edc0:	dfc00117 	ldw	ra,4(sp)
    edc4:	df000017 	ldw	fp,0(sp)
    edc8:	dec00204 	addi	sp,sp,8
    edcc:	f800283a 	ret

0000edd0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    edd0:	defffc04 	addi	sp,sp,-16
    edd4:	dfc00315 	stw	ra,12(sp)
    edd8:	df000215 	stw	fp,8(sp)
    eddc:	df000204 	addi	fp,sp,8
    ede0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    ede4:	e13fff17 	ldw	r4,-4(fp)
    ede8:	01400074 	movhi	r5,1
    edec:	2949d104 	addi	r5,r5,10052
    edf0:	000f3400 	call	f340 <alt_find_dev>
    edf4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    edf8:	e0bffe17 	ldw	r2,-8(fp)
}
    edfc:	e037883a 	mov	sp,fp
    ee00:	dfc00117 	ldw	ra,4(sp)
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00204 	addi	sp,sp,8
    ee0c:	f800283a 	ret

0000ee10 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    ee10:	defffa04 	addi	sp,sp,-24
    ee14:	df000515 	stw	fp,20(sp)
    ee18:	df000504 	addi	fp,sp,20
    ee1c:	e13ffc15 	stw	r4,-16(fp)
    ee20:	2805883a 	mov	r2,r5
    ee24:	e1bffe15 	stw	r6,-8(fp)
    ee28:	e1ffff15 	stw	r7,-4(fp)
    ee2c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ee30:	e0bffc17 	ldw	r2,-16(fp)
    ee34:	10800c17 	ldw	r2,48(r2)
    ee38:	e0fffe17 	ldw	r3,-8(fp)
    ee3c:	1880042e 	bgeu	r3,r2,ee50 <alt_up_char_buffer_draw+0x40>
    ee40:	e0bffc17 	ldw	r2,-16(fp)
    ee44:	10800d17 	ldw	r2,52(r2)
    ee48:	e0ffff17 	ldw	r3,-4(fp)
    ee4c:	18800236 	bltu	r3,r2,ee58 <alt_up_char_buffer_draw+0x48>
		return -1;
    ee50:	00bfffc4 	movi	r2,-1
    ee54:	00001d06 	br	eecc <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    ee58:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    ee5c:	e0bffc17 	ldw	r2,-16(fp)
    ee60:	10c00f17 	ldw	r3,60(r2)
    ee64:	e0bffe17 	ldw	r2,-8(fp)
    ee68:	1884703a 	and	r2,r3,r2
    ee6c:	e0fffc17 	ldw	r3,-16(fp)
    ee70:	18c00e17 	ldw	r3,56(r3)
    ee74:	10c4983a 	sll	r2,r2,r3
    ee78:	e0fffb17 	ldw	r3,-20(fp)
    ee7c:	1884b03a 	or	r2,r3,r2
    ee80:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    ee84:	e0bffc17 	ldw	r2,-16(fp)
    ee88:	10c01117 	ldw	r3,68(r2)
    ee8c:	e0bfff17 	ldw	r2,-4(fp)
    ee90:	1884703a 	and	r2,r3,r2
    ee94:	e0fffc17 	ldw	r3,-16(fp)
    ee98:	18c01017 	ldw	r3,64(r3)
    ee9c:	10c4983a 	sll	r2,r2,r3
    eea0:	e0fffb17 	ldw	r3,-20(fp)
    eea4:	1884b03a 	or	r2,r3,r2
    eea8:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    eeac:	e0bffc17 	ldw	r2,-16(fp)
    eeb0:	10c00b17 	ldw	r3,44(r2)
    eeb4:	e0bffb17 	ldw	r2,-20(fp)
    eeb8:	1885883a 	add	r2,r3,r2
    eebc:	1007883a 	mov	r3,r2
    eec0:	e0bffd03 	ldbu	r2,-12(fp)
    eec4:	18800025 	stbio	r2,0(r3)

	return 0;
    eec8:	0005883a 	mov	r2,zero
}
    eecc:	e037883a 	mov	sp,fp
    eed0:	df000017 	ldw	fp,0(sp)
    eed4:	dec00104 	addi	sp,sp,4
    eed8:	f800283a 	ret

0000eedc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    eedc:	defffa04 	addi	sp,sp,-24
    eee0:	df000515 	stw	fp,20(sp)
    eee4:	df000504 	addi	fp,sp,20
    eee8:	e13ffc15 	stw	r4,-16(fp)
    eeec:	e17ffd15 	stw	r5,-12(fp)
    eef0:	e1bffe15 	stw	r6,-8(fp)
    eef4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    eef8:	e0bffc17 	ldw	r2,-16(fp)
    eefc:	10800c17 	ldw	r2,48(r2)
    ef00:	e0fffe17 	ldw	r3,-8(fp)
    ef04:	1880042e 	bgeu	r3,r2,ef18 <alt_up_char_buffer_string+0x3c>
    ef08:	e0bffc17 	ldw	r2,-16(fp)
    ef0c:	10800d17 	ldw	r2,52(r2)
    ef10:	e0ffff17 	ldw	r3,-4(fp)
    ef14:	18800236 	bltu	r3,r2,ef20 <alt_up_char_buffer_string+0x44>
		return -1;
    ef18:	00bfffc4 	movi	r2,-1
    ef1c:	00002b06 	br	efcc <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    ef20:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    ef24:	e0bffc17 	ldw	r2,-16(fp)
    ef28:	10801017 	ldw	r2,64(r2)
    ef2c:	1007883a 	mov	r3,r2
    ef30:	e0bfff17 	ldw	r2,-4(fp)
    ef34:	10c6983a 	sll	r3,r2,r3
    ef38:	e0bffe17 	ldw	r2,-8(fp)
    ef3c:	1885883a 	add	r2,r3,r2
    ef40:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    ef44:	00001a06 	br	efb0 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    ef48:	e0bffc17 	ldw	r2,-16(fp)
    ef4c:	10c00b17 	ldw	r3,44(r2)
    ef50:	e0bffb17 	ldw	r2,-20(fp)
    ef54:	1885883a 	add	r2,r3,r2
    ef58:	1007883a 	mov	r3,r2
    ef5c:	e0bffd17 	ldw	r2,-12(fp)
    ef60:	10800003 	ldbu	r2,0(r2)
    ef64:	10803fcc 	andi	r2,r2,255
    ef68:	1080201c 	xori	r2,r2,128
    ef6c:	10bfe004 	addi	r2,r2,-128
    ef70:	18800025 	stbio	r2,0(r3)
		++ptr;
    ef74:	e0bffd17 	ldw	r2,-12(fp)
    ef78:	10800044 	addi	r2,r2,1
    ef7c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    ef80:	e0bffe17 	ldw	r2,-8(fp)
    ef84:	10800044 	addi	r2,r2,1
    ef88:	e0bffe15 	stw	r2,-8(fp)
    ef8c:	e0bffc17 	ldw	r2,-16(fp)
    ef90:	10800c17 	ldw	r2,48(r2)
    ef94:	e0fffe17 	ldw	r3,-8(fp)
    ef98:	18800236 	bltu	r3,r2,efa4 <alt_up_char_buffer_string+0xc8>
			return -1;
    ef9c:	00bfffc4 	movi	r2,-1
    efa0:	00000a06 	br	efcc <alt_up_char_buffer_string+0xf0>
		++offset;
    efa4:	e0bffb17 	ldw	r2,-20(fp)
    efa8:	10800044 	addi	r2,r2,1
    efac:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    efb0:	e0bffd17 	ldw	r2,-12(fp)
    efb4:	10800003 	ldbu	r2,0(r2)
    efb8:	10803fcc 	andi	r2,r2,255
    efbc:	1080201c 	xori	r2,r2,128
    efc0:	10bfe004 	addi	r2,r2,-128
    efc4:	103fe01e 	bne	r2,zero,ef48 <__alt_mem_Flash_flash_data+0xf400ef48>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    efc8:	0005883a 	mov	r2,zero
}
    efcc:	e037883a 	mov	sp,fp
    efd0:	df000017 	ldw	fp,0(sp)
    efd4:	dec00104 	addi	sp,sp,4
    efd8:	f800283a 	ret

0000efdc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    efdc:	defffe04 	addi	sp,sp,-8
    efe0:	df000115 	stw	fp,4(sp)
    efe4:	df000104 	addi	fp,sp,4
    efe8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    efec:	e0bfff17 	ldw	r2,-4(fp)
    eff0:	10800a17 	ldw	r2,40(r2)
    eff4:	10800084 	addi	r2,r2,2
    eff8:	1007883a 	mov	r3,r2
    effc:	00800044 	movi	r2,1
    f000:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f004:	0001883a 	nop
    f008:	e0bfff17 	ldw	r2,-4(fp)
    f00c:	10800a17 	ldw	r2,40(r2)
    f010:	10800084 	addi	r2,r2,2
    f014:	10800023 	ldbuio	r2,0(r2)
    f018:	10803fcc 	andi	r2,r2,255
    f01c:	1080004c 	andi	r2,r2,1
    f020:	103ff91e 	bne	r2,zero,f008 <__alt_mem_Flash_flash_data+0xf400f008>
	return 0;
    f024:	0005883a 	mov	r2,zero
}
    f028:	e037883a 	mov	sp,fp
    f02c:	df000017 	ldw	fp,0(sp)
    f030:	dec00104 	addi	sp,sp,4
    f034:	f800283a 	ret

0000f038 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f038:	defff504 	addi	sp,sp,-44
    f03c:	df000a15 	stw	fp,40(sp)
    f040:	df000a04 	addi	fp,sp,40
    f044:	e13ffc15 	stw	r4,-16(fp)
    f048:	e17ffd15 	stw	r5,-12(fp)
    f04c:	e1bffe15 	stw	r6,-8(fp)
    f050:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    f054:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f058:	00800074 	movhi	r2,1
    f05c:	1091d504 	addi	r2,r2,18260
    f060:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    f064:	10003f26 	beq	r2,zero,f164 <alt_alarm_start+0x12c>
  {
    if (alarm)
    f068:	e0bffc17 	ldw	r2,-16(fp)
    f06c:	10003b26 	beq	r2,zero,f15c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    f070:	e0bffc17 	ldw	r2,-16(fp)
    f074:	e0fffe17 	ldw	r3,-8(fp)
    f078:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    f07c:	e0bffc17 	ldw	r2,-16(fp)
    f080:	e0ffff17 	ldw	r3,-4(fp)
    f084:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f088:	0005303a 	rdctl	r2,status
    f08c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f090:	e0fff817 	ldw	r3,-32(fp)
    f094:	00bfff84 	movi	r2,-2
    f098:	1884703a 	and	r2,r3,r2
    f09c:	1001703a 	wrctl	status,r2
  
  return context;
    f0a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    f0a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f0a8:	00800074 	movhi	r2,1
    f0ac:	1091d604 	addi	r2,r2,18264
    f0b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    f0b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    f0b8:	e0fffd17 	ldw	r3,-12(fp)
    f0bc:	e0bff617 	ldw	r2,-40(fp)
    f0c0:	1885883a 	add	r2,r3,r2
    f0c4:	10c00044 	addi	r3,r2,1
    f0c8:	e0bffc17 	ldw	r2,-16(fp)
    f0cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f0d0:	e0bffc17 	ldw	r2,-16(fp)
    f0d4:	10c00217 	ldw	r3,8(r2)
    f0d8:	e0bff617 	ldw	r2,-40(fp)
    f0dc:	1880042e 	bgeu	r3,r2,f0f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    f0e0:	e0bffc17 	ldw	r2,-16(fp)
    f0e4:	00c00044 	movi	r3,1
    f0e8:	10c00405 	stb	r3,16(r2)
    f0ec:	00000206 	br	f0f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    f0f0:	e0bffc17 	ldw	r2,-16(fp)
    f0f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f0f8:	e0fffc17 	ldw	r3,-16(fp)
    f0fc:	00800074 	movhi	r2,1
    f100:	1089f604 	addi	r2,r2,10200
    f104:	e0bff915 	stw	r2,-28(fp)
    f108:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f10c:	e0bffa17 	ldw	r2,-24(fp)
    f110:	e0fff917 	ldw	r3,-28(fp)
    f114:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f118:	e0bff917 	ldw	r2,-28(fp)
    f11c:	10c00017 	ldw	r3,0(r2)
    f120:	e0bffa17 	ldw	r2,-24(fp)
    f124:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f128:	e0bff917 	ldw	r2,-28(fp)
    f12c:	10800017 	ldw	r2,0(r2)
    f130:	e0fffa17 	ldw	r3,-24(fp)
    f134:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f138:	e0bff917 	ldw	r2,-28(fp)
    f13c:	e0fffa17 	ldw	r3,-24(fp)
    f140:	10c00015 	stw	r3,0(r2)
    f144:	e0bff717 	ldw	r2,-36(fp)
    f148:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f14c:	e0bffb17 	ldw	r2,-20(fp)
    f150:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    f154:	0005883a 	mov	r2,zero
    f158:	00000306 	br	f168 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    f15c:	00bffa84 	movi	r2,-22
    f160:	00000106 	br	f168 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    f164:	00bfde84 	movi	r2,-134
  }
}
    f168:	e037883a 	mov	sp,fp
    f16c:	df000017 	ldw	fp,0(sp)
    f170:	dec00104 	addi	sp,sp,4
    f174:	f800283a 	ret

0000f178 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f178:	deffff04 	addi	sp,sp,-4
    f17c:	df000015 	stw	fp,0(sp)
    f180:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f184:	e037883a 	mov	sp,fp
    f188:	df000017 	ldw	fp,0(sp)
    f18c:	dec00104 	addi	sp,sp,4
    f190:	f800283a 	ret

0000f194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f194:	defffe04 	addi	sp,sp,-8
    f198:	dfc00115 	stw	ra,4(sp)
    f19c:	df000015 	stw	fp,0(sp)
    f1a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f1a4:	00800074 	movhi	r2,1
    f1a8:	1089d404 	addi	r2,r2,10064
    f1ac:	10800017 	ldw	r2,0(r2)
    f1b0:	10000526 	beq	r2,zero,f1c8 <alt_get_errno+0x34>
    f1b4:	00800074 	movhi	r2,1
    f1b8:	1089d404 	addi	r2,r2,10064
    f1bc:	10800017 	ldw	r2,0(r2)
    f1c0:	103ee83a 	callr	r2
    f1c4:	00000206 	br	f1d0 <alt_get_errno+0x3c>
    f1c8:	00800074 	movhi	r2,1
    f1cc:	1091b704 	addi	r2,r2,18140
}
    f1d0:	e037883a 	mov	sp,fp
    f1d4:	dfc00117 	ldw	ra,4(sp)
    f1d8:	df000017 	ldw	fp,0(sp)
    f1dc:	dec00204 	addi	sp,sp,8
    f1e0:	f800283a 	ret

0000f1e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f1e4:	defffa04 	addi	sp,sp,-24
    f1e8:	dfc00515 	stw	ra,20(sp)
    f1ec:	df000415 	stw	fp,16(sp)
    f1f0:	df000404 	addi	fp,sp,16
    f1f4:	e13ffe15 	stw	r4,-8(fp)
    f1f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f1fc:	e0bffe17 	ldw	r2,-8(fp)
    f200:	10000326 	beq	r2,zero,f210 <alt_dev_llist_insert+0x2c>
    f204:	e0bffe17 	ldw	r2,-8(fp)
    f208:	10800217 	ldw	r2,8(r2)
    f20c:	1000061e 	bne	r2,zero,f228 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f210:	000f1940 	call	f194 <alt_get_errno>
    f214:	1007883a 	mov	r3,r2
    f218:	00800584 	movi	r2,22
    f21c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f220:	00bffa84 	movi	r2,-22
    f224:	00001306 	br	f274 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f228:	e0bffe17 	ldw	r2,-8(fp)
    f22c:	e0ffff17 	ldw	r3,-4(fp)
    f230:	e0fffc15 	stw	r3,-16(fp)
    f234:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	e0fffc17 	ldw	r3,-16(fp)
    f240:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f244:	e0bffc17 	ldw	r2,-16(fp)
    f248:	10c00017 	ldw	r3,0(r2)
    f24c:	e0bffd17 	ldw	r2,-12(fp)
    f250:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f254:	e0bffc17 	ldw	r2,-16(fp)
    f258:	10800017 	ldw	r2,0(r2)
    f25c:	e0fffd17 	ldw	r3,-12(fp)
    f260:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f264:	e0bffc17 	ldw	r2,-16(fp)
    f268:	e0fffd17 	ldw	r3,-12(fp)
    f26c:	10c00015 	stw	r3,0(r2)

  return 0;  
    f270:	0005883a 	mov	r2,zero
}
    f274:	e037883a 	mov	sp,fp
    f278:	dfc00117 	ldw	ra,4(sp)
    f27c:	df000017 	ldw	fp,0(sp)
    f280:	dec00204 	addi	sp,sp,8
    f284:	f800283a 	ret

0000f288 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f288:	defffd04 	addi	sp,sp,-12
    f28c:	dfc00215 	stw	ra,8(sp)
    f290:	df000115 	stw	fp,4(sp)
    f294:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f298:	00800074 	movhi	r2,1
    f29c:	10817404 	addi	r2,r2,1488
    f2a0:	e0bfff15 	stw	r2,-4(fp)
    f2a4:	00000606 	br	f2c0 <_do_ctors+0x38>
        (*ctor) (); 
    f2a8:	e0bfff17 	ldw	r2,-4(fp)
    f2ac:	10800017 	ldw	r2,0(r2)
    f2b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f2b4:	e0bfff17 	ldw	r2,-4(fp)
    f2b8:	10bfff04 	addi	r2,r2,-4
    f2bc:	e0bfff15 	stw	r2,-4(fp)
    f2c0:	e0ffff17 	ldw	r3,-4(fp)
    f2c4:	00800074 	movhi	r2,1
    f2c8:	10817504 	addi	r2,r2,1492
    f2cc:	18bff62e 	bgeu	r3,r2,f2a8 <__alt_mem_Flash_flash_data+0xf400f2a8>
        (*ctor) (); 
}
    f2d0:	e037883a 	mov	sp,fp
    f2d4:	dfc00117 	ldw	ra,4(sp)
    f2d8:	df000017 	ldw	fp,0(sp)
    f2dc:	dec00204 	addi	sp,sp,8
    f2e0:	f800283a 	ret

0000f2e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f2e4:	defffd04 	addi	sp,sp,-12
    f2e8:	dfc00215 	stw	ra,8(sp)
    f2ec:	df000115 	stw	fp,4(sp)
    f2f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f2f4:	00800074 	movhi	r2,1
    f2f8:	10817404 	addi	r2,r2,1488
    f2fc:	e0bfff15 	stw	r2,-4(fp)
    f300:	00000606 	br	f31c <_do_dtors+0x38>
        (*dtor) (); 
    f304:	e0bfff17 	ldw	r2,-4(fp)
    f308:	10800017 	ldw	r2,0(r2)
    f30c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f310:	e0bfff17 	ldw	r2,-4(fp)
    f314:	10bfff04 	addi	r2,r2,-4
    f318:	e0bfff15 	stw	r2,-4(fp)
    f31c:	e0ffff17 	ldw	r3,-4(fp)
    f320:	00800074 	movhi	r2,1
    f324:	10817504 	addi	r2,r2,1492
    f328:	18bff62e 	bgeu	r3,r2,f304 <__alt_mem_Flash_flash_data+0xf400f304>
        (*dtor) (); 
}
    f32c:	e037883a 	mov	sp,fp
    f330:	dfc00117 	ldw	ra,4(sp)
    f334:	df000017 	ldw	fp,0(sp)
    f338:	dec00204 	addi	sp,sp,8
    f33c:	f800283a 	ret

0000f340 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f340:	defffa04 	addi	sp,sp,-24
    f344:	dfc00515 	stw	ra,20(sp)
    f348:	df000415 	stw	fp,16(sp)
    f34c:	df000404 	addi	fp,sp,16
    f350:	e13ffe15 	stw	r4,-8(fp)
    f354:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f358:	e0bfff17 	ldw	r2,-4(fp)
    f35c:	10800017 	ldw	r2,0(r2)
    f360:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f364:	e13ffe17 	ldw	r4,-8(fp)
    f368:	00012fc0 	call	12fc <strlen>
    f36c:	10800044 	addi	r2,r2,1
    f370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f374:	00000d06 	br	f3ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f378:	e0bffc17 	ldw	r2,-16(fp)
    f37c:	10c00217 	ldw	r3,8(r2)
    f380:	e0bffd17 	ldw	r2,-12(fp)
    f384:	1809883a 	mov	r4,r3
    f388:	e17ffe17 	ldw	r5,-8(fp)
    f38c:	100d883a 	mov	r6,r2
    f390:	00101d00 	call	101d0 <memcmp>
    f394:	1000021e 	bne	r2,zero,f3a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f398:	e0bffc17 	ldw	r2,-16(fp)
    f39c:	00000706 	br	f3bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f3a0:	e0bffc17 	ldw	r2,-16(fp)
    f3a4:	10800017 	ldw	r2,0(r2)
    f3a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f3ac:	e0fffc17 	ldw	r3,-16(fp)
    f3b0:	e0bfff17 	ldw	r2,-4(fp)
    f3b4:	18bff01e 	bne	r3,r2,f378 <__alt_mem_Flash_flash_data+0xf400f378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f3b8:	0005883a 	mov	r2,zero
}
    f3bc:	e037883a 	mov	sp,fp
    f3c0:	dfc00117 	ldw	ra,4(sp)
    f3c4:	df000017 	ldw	fp,0(sp)
    f3c8:	dec00204 	addi	sp,sp,8
    f3cc:	f800283a 	ret

0000f3d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f3d0:	defffe04 	addi	sp,sp,-8
    f3d4:	dfc00115 	stw	ra,4(sp)
    f3d8:	df000015 	stw	fp,0(sp)
    f3dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f3e0:	0009883a 	mov	r4,zero
    f3e4:	01440004 	movi	r5,4096
    f3e8:	001005c0 	call	1005c <alt_icache_flush>
#endif
}
    f3ec:	e037883a 	mov	sp,fp
    f3f0:	dfc00117 	ldw	ra,4(sp)
    f3f4:	df000017 	ldw	fp,0(sp)
    f3f8:	dec00204 	addi	sp,sp,8
    f3fc:	f800283a 	ret

0000f400 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f400:	defff904 	addi	sp,sp,-28
    f404:	dfc00615 	stw	ra,24(sp)
    f408:	df000515 	stw	fp,20(sp)
    f40c:	df000504 	addi	fp,sp,20
    f410:	e13ffc15 	stw	r4,-16(fp)
    f414:	e17ffd15 	stw	r5,-12(fp)
    f418:	e1bffe15 	stw	r6,-8(fp)
    f41c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f420:	e13ffd17 	ldw	r4,-12(fp)
    f424:	e17ffe17 	ldw	r5,-8(fp)
    f428:	e1bfff17 	ldw	r6,-4(fp)
    f42c:	000f8040 	call	f804 <open>
    f430:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f434:	e0bffb17 	ldw	r2,-20(fp)
    f438:	10001c16 	blt	r2,zero,f4ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f43c:	00800074 	movhi	r2,1
    f440:	10846504 	addi	r2,r2,4500
    f444:	e0fffb17 	ldw	r3,-20(fp)
    f448:	18c00324 	muli	r3,r3,12
    f44c:	10c5883a 	add	r2,r2,r3
    f450:	10c00017 	ldw	r3,0(r2)
    f454:	e0bffc17 	ldw	r2,-16(fp)
    f458:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f45c:	00800074 	movhi	r2,1
    f460:	10846504 	addi	r2,r2,4500
    f464:	e0fffb17 	ldw	r3,-20(fp)
    f468:	18c00324 	muli	r3,r3,12
    f46c:	18c00104 	addi	r3,r3,4
    f470:	10c5883a 	add	r2,r2,r3
    f474:	10c00017 	ldw	r3,0(r2)
    f478:	e0bffc17 	ldw	r2,-16(fp)
    f47c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f480:	00800074 	movhi	r2,1
    f484:	10846504 	addi	r2,r2,4500
    f488:	e0fffb17 	ldw	r3,-20(fp)
    f48c:	18c00324 	muli	r3,r3,12
    f490:	18c00204 	addi	r3,r3,8
    f494:	10c5883a 	add	r2,r2,r3
    f498:	10c00017 	ldw	r3,0(r2)
    f49c:	e0bffc17 	ldw	r2,-16(fp)
    f4a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f4a4:	e13ffb17 	ldw	r4,-20(fp)
    f4a8:	000461c0 	call	461c <alt_release_fd>
  }
} 
    f4ac:	e037883a 	mov	sp,fp
    f4b0:	dfc00117 	ldw	ra,4(sp)
    f4b4:	df000017 	ldw	fp,0(sp)
    f4b8:	dec00204 	addi	sp,sp,8
    f4bc:	f800283a 	ret

0000f4c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f4c0:	defffb04 	addi	sp,sp,-20
    f4c4:	dfc00415 	stw	ra,16(sp)
    f4c8:	df000315 	stw	fp,12(sp)
    f4cc:	df000304 	addi	fp,sp,12
    f4d0:	e13ffd15 	stw	r4,-12(fp)
    f4d4:	e17ffe15 	stw	r5,-8(fp)
    f4d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f4dc:	01000074 	movhi	r4,1
    f4e0:	21046804 	addi	r4,r4,4512
    f4e4:	e17ffd17 	ldw	r5,-12(fp)
    f4e8:	01800044 	movi	r6,1
    f4ec:	01c07fc4 	movi	r7,511
    f4f0:	000f4000 	call	f400 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f4f4:	01000074 	movhi	r4,1
    f4f8:	21046504 	addi	r4,r4,4500
    f4fc:	e17ffe17 	ldw	r5,-8(fp)
    f500:	000d883a 	mov	r6,zero
    f504:	01c07fc4 	movi	r7,511
    f508:	000f4000 	call	f400 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f50c:	01000074 	movhi	r4,1
    f510:	21046b04 	addi	r4,r4,4524
    f514:	e17fff17 	ldw	r5,-4(fp)
    f518:	01800044 	movi	r6,1
    f51c:	01c07fc4 	movi	r7,511
    f520:	000f4000 	call	f400 <alt_open_fd>
}  
    f524:	e037883a 	mov	sp,fp
    f528:	dfc00117 	ldw	ra,4(sp)
    f52c:	df000017 	ldw	fp,0(sp)
    f530:	dec00204 	addi	sp,sp,8
    f534:	f800283a 	ret

0000f538 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    f538:	defff004 	addi	sp,sp,-64
    f53c:	df000f15 	stw	fp,60(sp)
    f540:	df000f04 	addi	fp,sp,60
    f544:	e13ffd15 	stw	r4,-12(fp)
    f548:	e17ffe15 	stw	r5,-8(fp)
    f54c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    f550:	00bffa84 	movi	r2,-22
    f554:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f558:	e0bffd17 	ldw	r2,-12(fp)
    f55c:	10800828 	cmpgeui	r2,r2,32
    f560:	10005c1e 	bne	r2,zero,f6d4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f564:	0005303a 	rdctl	r2,status
    f568:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f56c:	e0fff317 	ldw	r3,-52(fp)
    f570:	00bfff84 	movi	r2,-2
    f574:	1884703a 	and	r2,r3,r2
    f578:	1001703a 	wrctl	status,r2
  
  return context;
    f57c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    f580:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    f584:	008000b4 	movhi	r2,2
    f588:	10866b04 	addi	r2,r2,6572
    f58c:	e0fffd17 	ldw	r3,-12(fp)
    f590:	180690fa 	slli	r3,r3,3
    f594:	10c5883a 	add	r2,r2,r3
    f598:	e0ffff17 	ldw	r3,-4(fp)
    f59c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    f5a0:	008000b4 	movhi	r2,2
    f5a4:	10866b04 	addi	r2,r2,6572
    f5a8:	e0fffd17 	ldw	r3,-12(fp)
    f5ac:	180690fa 	slli	r3,r3,3
    f5b0:	18c00104 	addi	r3,r3,4
    f5b4:	10c5883a 	add	r2,r2,r3
    f5b8:	e0fffe17 	ldw	r3,-8(fp)
    f5bc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    f5c0:	e0bfff17 	ldw	r2,-4(fp)
    f5c4:	10001f26 	beq	r2,zero,f644 <alt_irq_register+0x10c>
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5d0:	0005303a 	rdctl	r2,status
    f5d4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5d8:	e0fff517 	ldw	r3,-44(fp)
    f5dc:	00bfff84 	movi	r2,-2
    f5e0:	1884703a 	and	r2,r3,r2
    f5e4:	1001703a 	wrctl	status,r2
  
  return context;
    f5e8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f5ec:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    f5f0:	e0bff417 	ldw	r2,-48(fp)
    f5f4:	00c00044 	movi	r3,1
    f5f8:	1884983a 	sll	r2,r3,r2
    f5fc:	1007883a 	mov	r3,r2
    f600:	00800074 	movhi	r2,1
    f604:	1091d404 	addi	r2,r2,18256
    f608:	10800017 	ldw	r2,0(r2)
    f60c:	1886b03a 	or	r3,r3,r2
    f610:	00800074 	movhi	r2,1
    f614:	1091d404 	addi	r2,r2,18256
    f618:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f61c:	00800074 	movhi	r2,1
    f620:	1091d404 	addi	r2,r2,18256
    f624:	10800017 	ldw	r2,0(r2)
    f628:	100170fa 	wrctl	ienable,r2
    f62c:	e0bff617 	ldw	r2,-40(fp)
    f630:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f634:	e0bff717 	ldw	r2,-36(fp)
    f638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f63c:	0005883a 	mov	r2,zero
    f640:	00001f06 	br	f6c0 <alt_irq_register+0x188>
    f644:	e0bffd17 	ldw	r2,-12(fp)
    f648:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f64c:	0005303a 	rdctl	r2,status
    f650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f654:	e0fff917 	ldw	r3,-28(fp)
    f658:	00bfff84 	movi	r2,-2
    f65c:	1884703a 	and	r2,r3,r2
    f660:	1001703a 	wrctl	status,r2
  
  return context;
    f664:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f668:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    f66c:	e0bff817 	ldw	r2,-32(fp)
    f670:	00c00044 	movi	r3,1
    f674:	1884983a 	sll	r2,r3,r2
    f678:	0084303a 	nor	r2,zero,r2
    f67c:	1007883a 	mov	r3,r2
    f680:	00800074 	movhi	r2,1
    f684:	1091d404 	addi	r2,r2,18256
    f688:	10800017 	ldw	r2,0(r2)
    f68c:	1886703a 	and	r3,r3,r2
    f690:	00800074 	movhi	r2,1
    f694:	1091d404 	addi	r2,r2,18256
    f698:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f69c:	00800074 	movhi	r2,1
    f6a0:	1091d404 	addi	r2,r2,18256
    f6a4:	10800017 	ldw	r2,0(r2)
    f6a8:	100170fa 	wrctl	ienable,r2
    f6ac:	e0bffa17 	ldw	r2,-24(fp)
    f6b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6b4:	e0bffb17 	ldw	r2,-20(fp)
    f6b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f6bc:	0005883a 	mov	r2,zero
    f6c0:	e0bff115 	stw	r2,-60(fp)
    f6c4:	e0bff217 	ldw	r2,-56(fp)
    f6c8:	e0bffc15 	stw	r2,-16(fp)
    f6cc:	e0bffc17 	ldw	r2,-16(fp)
    f6d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    f6d4:	e0bff117 	ldw	r2,-60(fp)
}
    f6d8:	e037883a 	mov	sp,fp
    f6dc:	df000017 	ldw	fp,0(sp)
    f6e0:	dec00104 	addi	sp,sp,4
    f6e4:	f800283a 	ret

0000f6e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f6e8:	defffe04 	addi	sp,sp,-8
    f6ec:	dfc00115 	stw	ra,4(sp)
    f6f0:	df000015 	stw	fp,0(sp)
    f6f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f6f8:	00800074 	movhi	r2,1
    f6fc:	1089d404 	addi	r2,r2,10064
    f700:	10800017 	ldw	r2,0(r2)
    f704:	10000526 	beq	r2,zero,f71c <alt_get_errno+0x34>
    f708:	00800074 	movhi	r2,1
    f70c:	1089d404 	addi	r2,r2,10064
    f710:	10800017 	ldw	r2,0(r2)
    f714:	103ee83a 	callr	r2
    f718:	00000206 	br	f724 <alt_get_errno+0x3c>
    f71c:	00800074 	movhi	r2,1
    f720:	1091b704 	addi	r2,r2,18140
}
    f724:	e037883a 	mov	sp,fp
    f728:	dfc00117 	ldw	ra,4(sp)
    f72c:	df000017 	ldw	fp,0(sp)
    f730:	dec00204 	addi	sp,sp,8
    f734:	f800283a 	ret

0000f738 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f738:	defffd04 	addi	sp,sp,-12
    f73c:	df000215 	stw	fp,8(sp)
    f740:	df000204 	addi	fp,sp,8
    f744:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f748:	e0bfff17 	ldw	r2,-4(fp)
    f74c:	10800217 	ldw	r2,8(r2)
    f750:	10d00034 	orhi	r3,r2,16384
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f75c:	e03ffe15 	stw	zero,-8(fp)
    f760:	00001d06 	br	f7d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f764:	00800074 	movhi	r2,1
    f768:	10846504 	addi	r2,r2,4500
    f76c:	e0fffe17 	ldw	r3,-8(fp)
    f770:	18c00324 	muli	r3,r3,12
    f774:	10c5883a 	add	r2,r2,r3
    f778:	10c00017 	ldw	r3,0(r2)
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	10800017 	ldw	r2,0(r2)
    f784:	1880111e 	bne	r3,r2,f7cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f788:	00800074 	movhi	r2,1
    f78c:	10846504 	addi	r2,r2,4500
    f790:	e0fffe17 	ldw	r3,-8(fp)
    f794:	18c00324 	muli	r3,r3,12
    f798:	18c00204 	addi	r3,r3,8
    f79c:	10c5883a 	add	r2,r2,r3
    f7a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f7a4:	1000090e 	bge	r2,zero,f7cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f7a8:	e0bffe17 	ldw	r2,-8(fp)
    f7ac:	10c00324 	muli	r3,r2,12
    f7b0:	00800074 	movhi	r2,1
    f7b4:	10846504 	addi	r2,r2,4500
    f7b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f7bc:	e0bfff17 	ldw	r2,-4(fp)
    f7c0:	18800226 	beq	r3,r2,f7cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f7c4:	00bffcc4 	movi	r2,-13
    f7c8:	00000a06 	br	f7f4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f7cc:	e0bffe17 	ldw	r2,-8(fp)
    f7d0:	10800044 	addi	r2,r2,1
    f7d4:	e0bffe15 	stw	r2,-8(fp)
    f7d8:	00800074 	movhi	r2,1
    f7dc:	1089d304 	addi	r2,r2,10060
    f7e0:	10800017 	ldw	r2,0(r2)
    f7e4:	1007883a 	mov	r3,r2
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	18bfdd2e 	bgeu	r3,r2,f764 <__alt_mem_Flash_flash_data+0xf400f764>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f7f0:	0005883a 	mov	r2,zero
}
    f7f4:	e037883a 	mov	sp,fp
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00104 	addi	sp,sp,4
    f800:	f800283a 	ret

0000f804 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f804:	defff604 	addi	sp,sp,-40
    f808:	dfc00915 	stw	ra,36(sp)
    f80c:	df000815 	stw	fp,32(sp)
    f810:	df000804 	addi	fp,sp,32
    f814:	e13ffd15 	stw	r4,-12(fp)
    f818:	e17ffe15 	stw	r5,-8(fp)
    f81c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f820:	00bfffc4 	movi	r2,-1
    f824:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f828:	00bffb44 	movi	r2,-19
    f82c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f830:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f834:	e13ffd17 	ldw	r4,-12(fp)
    f838:	01400074 	movhi	r5,1
    f83c:	2949d104 	addi	r5,r5,10052
    f840:	000f3400 	call	f340 <alt_find_dev>
    f844:	e0bff815 	stw	r2,-32(fp)
    f848:	e0bff817 	ldw	r2,-32(fp)
    f84c:	1000051e 	bne	r2,zero,f864 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f850:	e13ffd17 	ldw	r4,-12(fp)
    f854:	000fe4c0 	call	fe4c <alt_find_file>
    f858:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f85c:	00800044 	movi	r2,1
    f860:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f864:	e0bff817 	ldw	r2,-32(fp)
    f868:	10002926 	beq	r2,zero,f910 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f86c:	e13ff817 	ldw	r4,-32(fp)
    f870:	000ff600 	call	ff60 <alt_get_fd>
    f874:	e0bff915 	stw	r2,-28(fp)
    f878:	e0bff917 	ldw	r2,-28(fp)
    f87c:	1000030e 	bge	r2,zero,f88c <open+0x88>
    {
      status = index;
    f880:	e0bff917 	ldw	r2,-28(fp)
    f884:	e0bffa15 	stw	r2,-24(fp)
    f888:	00002306 	br	f918 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f88c:	e0bff917 	ldw	r2,-28(fp)
    f890:	10c00324 	muli	r3,r2,12
    f894:	00800074 	movhi	r2,1
    f898:	10846504 	addi	r2,r2,4500
    f89c:	1885883a 	add	r2,r3,r2
    f8a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f8a4:	e0fffe17 	ldw	r3,-8(fp)
    f8a8:	00900034 	movhi	r2,16384
    f8ac:	10bfffc4 	addi	r2,r2,-1
    f8b0:	1886703a 	and	r3,r3,r2
    f8b4:	e0bffc17 	ldw	r2,-16(fp)
    f8b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f8bc:	e0bffb17 	ldw	r2,-20(fp)
    f8c0:	1000051e 	bne	r2,zero,f8d8 <open+0xd4>
    f8c4:	e13ffc17 	ldw	r4,-16(fp)
    f8c8:	000f7380 	call	f738 <alt_file_locked>
    f8cc:	e0bffa15 	stw	r2,-24(fp)
    f8d0:	e0bffa17 	ldw	r2,-24(fp)
    f8d4:	10001016 	blt	r2,zero,f918 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f8d8:	e0bff817 	ldw	r2,-32(fp)
    f8dc:	10800317 	ldw	r2,12(r2)
    f8e0:	10000826 	beq	r2,zero,f904 <open+0x100>
    f8e4:	e0bff817 	ldw	r2,-32(fp)
    f8e8:	10800317 	ldw	r2,12(r2)
    f8ec:	e13ffc17 	ldw	r4,-16(fp)
    f8f0:	e17ffd17 	ldw	r5,-12(fp)
    f8f4:	e1bffe17 	ldw	r6,-8(fp)
    f8f8:	e1ffff17 	ldw	r7,-4(fp)
    f8fc:	103ee83a 	callr	r2
    f900:	00000106 	br	f908 <open+0x104>
    f904:	0005883a 	mov	r2,zero
    f908:	e0bffa15 	stw	r2,-24(fp)
    f90c:	00000206 	br	f918 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f910:	00bffb44 	movi	r2,-19
    f914:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f918:	e0bffa17 	ldw	r2,-24(fp)
    f91c:	1000090e 	bge	r2,zero,f944 <open+0x140>
  {
    alt_release_fd (index);  
    f920:	e13ff917 	ldw	r4,-28(fp)
    f924:	000461c0 	call	461c <alt_release_fd>
    ALT_ERRNO = -status;
    f928:	000f6e80 	call	f6e8 <alt_get_errno>
    f92c:	1007883a 	mov	r3,r2
    f930:	e0bffa17 	ldw	r2,-24(fp)
    f934:	0085c83a 	sub	r2,zero,r2
    f938:	18800015 	stw	r2,0(r3)
    return -1;
    f93c:	00bfffc4 	movi	r2,-1
    f940:	00000106 	br	f948 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f944:	e0bff917 	ldw	r2,-28(fp)
}
    f948:	e037883a 	mov	sp,fp
    f94c:	dfc00117 	ldw	ra,4(sp)
    f950:	df000017 	ldw	fp,0(sp)
    f954:	dec00204 	addi	sp,sp,8
    f958:	f800283a 	ret

0000f95c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f95c:	defffa04 	addi	sp,sp,-24
    f960:	df000515 	stw	fp,20(sp)
    f964:	df000504 	addi	fp,sp,20
    f968:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f96c:	0005303a 	rdctl	r2,status
    f970:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f974:	e0fffc17 	ldw	r3,-16(fp)
    f978:	00bfff84 	movi	r2,-2
    f97c:	1884703a 	and	r2,r3,r2
    f980:	1001703a 	wrctl	status,r2
  
  return context;
    f984:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f988:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f98c:	e0bfff17 	ldw	r2,-4(fp)
    f990:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f994:	e0bffd17 	ldw	r2,-12(fp)
    f998:	10800017 	ldw	r2,0(r2)
    f99c:	e0fffd17 	ldw	r3,-12(fp)
    f9a0:	18c00117 	ldw	r3,4(r3)
    f9a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f9a8:	e0bffd17 	ldw	r2,-12(fp)
    f9ac:	10800117 	ldw	r2,4(r2)
    f9b0:	e0fffd17 	ldw	r3,-12(fp)
    f9b4:	18c00017 	ldw	r3,0(r3)
    f9b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f9bc:	e0bffd17 	ldw	r2,-12(fp)
    f9c0:	e0fffd17 	ldw	r3,-12(fp)
    f9c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f9c8:	e0bffd17 	ldw	r2,-12(fp)
    f9cc:	e0fffd17 	ldw	r3,-12(fp)
    f9d0:	10c00015 	stw	r3,0(r2)
    f9d4:	e0bffb17 	ldw	r2,-20(fp)
    f9d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9dc:	e0bffe17 	ldw	r2,-8(fp)
    f9e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	df000017 	ldw	fp,0(sp)
    f9ec:	dec00104 	addi	sp,sp,4
    f9f0:	f800283a 	ret

0000f9f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f9f4:	defffb04 	addi	sp,sp,-20
    f9f8:	dfc00415 	stw	ra,16(sp)
    f9fc:	df000315 	stw	fp,12(sp)
    fa00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fa04:	d0a03517 	ldw	r2,-32556(gp)
    fa08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa0c:	d0a81517 	ldw	r2,-24492(gp)
    fa10:	10800044 	addi	r2,r2,1
    fa14:	d0a81515 	stw	r2,-24492(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa18:	00002e06 	br	fad4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    fa1c:	e0bffd17 	ldw	r2,-12(fp)
    fa20:	10800017 	ldw	r2,0(r2)
    fa24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fa28:	e0bffd17 	ldw	r2,-12(fp)
    fa2c:	10800403 	ldbu	r2,16(r2)
    fa30:	10803fcc 	andi	r2,r2,255
    fa34:	10000426 	beq	r2,zero,fa48 <alt_tick+0x54>
    fa38:	d0a81517 	ldw	r2,-24492(gp)
    fa3c:	1000021e 	bne	r2,zero,fa48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    fa40:	e0bffd17 	ldw	r2,-12(fp)
    fa44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fa48:	e0bffd17 	ldw	r2,-12(fp)
    fa4c:	10800217 	ldw	r2,8(r2)
    fa50:	d0e81517 	ldw	r3,-24492(gp)
    fa54:	18801d36 	bltu	r3,r2,facc <alt_tick+0xd8>
    fa58:	e0bffd17 	ldw	r2,-12(fp)
    fa5c:	10800403 	ldbu	r2,16(r2)
    fa60:	10803fcc 	andi	r2,r2,255
    fa64:	1000191e 	bne	r2,zero,facc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    fa68:	e0bffd17 	ldw	r2,-12(fp)
    fa6c:	10800317 	ldw	r2,12(r2)
    fa70:	e0fffd17 	ldw	r3,-12(fp)
    fa74:	18c00517 	ldw	r3,20(r3)
    fa78:	1809883a 	mov	r4,r3
    fa7c:	103ee83a 	callr	r2
    fa80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fa84:	e0bfff17 	ldw	r2,-4(fp)
    fa88:	1000031e 	bne	r2,zero,fa98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    fa8c:	e13ffd17 	ldw	r4,-12(fp)
    fa90:	000f95c0 	call	f95c <alt_alarm_stop>
    fa94:	00000d06 	br	facc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	10c00217 	ldw	r3,8(r2)
    faa0:	e0bfff17 	ldw	r2,-4(fp)
    faa4:	1887883a 	add	r3,r3,r2
    faa8:	e0bffd17 	ldw	r2,-12(fp)
    faac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fab0:	e0bffd17 	ldw	r2,-12(fp)
    fab4:	10c00217 	ldw	r3,8(r2)
    fab8:	d0a81517 	ldw	r2,-24492(gp)
    fabc:	1880032e 	bgeu	r3,r2,facc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    fac0:	e0bffd17 	ldw	r2,-12(fp)
    fac4:	00c00044 	movi	r3,1
    fac8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    facc:	e0bffe17 	ldw	r2,-8(fp)
    fad0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fad4:	e0fffd17 	ldw	r3,-12(fp)
    fad8:	d0a03504 	addi	r2,gp,-32556
    fadc:	18bfcf1e 	bne	r3,r2,fa1c <__alt_mem_Flash_flash_data+0xf400fa1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fae0:	00058280 	call	5828 <OSTimeTick>
}
    fae4:	e037883a 	mov	sp,fp
    fae8:	dfc00117 	ldw	ra,4(sp)
    faec:	df000017 	ldw	fp,0(sp)
    faf0:	dec00204 	addi	sp,sp,8
    faf4:	f800283a 	ret

0000faf8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    faf8:	deffff04 	addi	sp,sp,-4
    fafc:	df000015 	stw	fp,0(sp)
    fb00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    fb04:	000170fa 	wrctl	ienable,zero
}
    fb08:	e037883a 	mov	sp,fp
    fb0c:	df000017 	ldw	fp,0(sp)
    fb10:	dec00104 	addi	sp,sp,4
    fb14:	f800283a 	ret

0000fb18 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    fb18:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    fb1c:	d0e00b17 	ldw	r3,-32724(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    fb20:	d1280e17 	ldw	r4,-24520(gp)

      stw ra,  0(sp)
    fb24:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    fb28:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    fb2c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    fb30:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    fb34:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    fb38:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    fb3c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    fb40:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    fb44:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    fb48:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    fb4c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    fb50:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    fb54:	000fd840 	call	fd84 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    fb58:	d1280917 	ldw	r4,-24540(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    fb5c:	d1680107 	ldb	r5,-24572(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    fb60:	d1280e15 	stw	r4,-24520(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    fb64:	d1680145 	stb	r5,-24571(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    fb68:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    fb6c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    fb70:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    fb74:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    fb78:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    fb7c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    fb80:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    fb84:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    fb88:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    fb8c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    fb90:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    fb94:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    fb98:	d0e00b15 	stw	r3,-32724(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    fb9c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    fba0:	f800283a 	ret

0000fba4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    fba4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    fba8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    fbac:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    fbb0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    fbb4:	000fd840 	call	fd84 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    fbb8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    fbbc:	d4a7ff45 	stb	r18,-24579(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    fbc0:	003fe506 	br	fb58 <__alt_mem_Flash_flash_data+0xf400fb58>

0000fbc4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    fbc4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    fbc8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    fbcc:	10800054 	ori	r2,r2,1
      wrctl status, r2
    fbd0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    fbd4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    fbd8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    fbdc:	dec00204 	addi	sp,sp,8

      callr r2
    fbe0:	103ee83a 	callr	r2

      nop
    fbe4:	0001883a 	nop

0000fbe8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    fbe8:	defff704 	addi	sp,sp,-36
    fbec:	dfc00815 	stw	ra,32(sp)
    fbf0:	df000715 	stw	fp,28(sp)
    fbf4:	df000704 	addi	fp,sp,28
    fbf8:	e13ffc15 	stw	r4,-16(fp)
    fbfc:	e17ffd15 	stw	r5,-12(fp)
    fc00:	e1bffe15 	stw	r6,-8(fp)
    fc04:	3805883a 	mov	r2,r7
    fc08:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    fc0c:	e0fffe17 	ldw	r3,-8(fp)
    fc10:	00bfff04 	movi	r2,-4
    fc14:	1884703a 	and	r2,r3,r2
    fc18:	10bef704 	addi	r2,r2,-1060
    fc1c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    fc20:	e13ff917 	ldw	r4,-28(fp)
    fc24:	000b883a 	mov	r5,zero
    fc28:	01810904 	movi	r6,1060
    fc2c:	00038100 	call	3810 <memset>
    fc30:	e0bff917 	ldw	r2,-28(fp)
    fc34:	10c0bb04 	addi	r3,r2,748
    fc38:	e0bff917 	ldw	r2,-28(fp)
    fc3c:	10c00115 	stw	r3,4(r2)
    fc40:	e0bff917 	ldw	r2,-28(fp)
    fc44:	10c0d504 	addi	r3,r2,852
    fc48:	e0bff917 	ldw	r2,-28(fp)
    fc4c:	10c00215 	stw	r3,8(r2)
    fc50:	e0bff917 	ldw	r2,-28(fp)
    fc54:	10c0ef04 	addi	r3,r2,956
    fc58:	e0bff917 	ldw	r2,-28(fp)
    fc5c:	10c00315 	stw	r3,12(r2)
    fc60:	e0fff917 	ldw	r3,-28(fp)
    fc64:	00800074 	movhi	r2,1
    fc68:	10824f04 	addi	r2,r2,2364
    fc6c:	18800d15 	stw	r2,52(r3)
    fc70:	e0bff917 	ldw	r2,-28(fp)
    fc74:	00c00044 	movi	r3,1
    fc78:	10c02915 	stw	r3,164(r2)
    fc7c:	10002a15 	stw	zero,168(r2)
    fc80:	e0bff917 	ldw	r2,-28(fp)
    fc84:	00ccc384 	movi	r3,13070
    fc88:	10c02b0d 	sth	r3,172(r2)
    fc8c:	e0bff917 	ldw	r2,-28(fp)
    fc90:	00eaf344 	movi	r3,-21555
    fc94:	10c02b8d 	sth	r3,174(r2)
    fc98:	e0bff917 	ldw	r2,-28(fp)
    fc9c:	00c48d04 	movi	r3,4660
    fca0:	10c02c0d 	sth	r3,176(r2)
    fca4:	e0bff917 	ldw	r2,-28(fp)
    fca8:	00f99b44 	movi	r3,-6547
    fcac:	10c02c8d 	sth	r3,178(r2)
    fcb0:	e0bff917 	ldw	r2,-28(fp)
    fcb4:	00f7bb04 	movi	r3,-8468
    fcb8:	10c02d0d 	sth	r3,180(r2)
    fcbc:	e0bff917 	ldw	r2,-28(fp)
    fcc0:	00c00144 	movi	r3,5
    fcc4:	10c02d8d 	sth	r3,182(r2)
    fcc8:	e0bff917 	ldw	r2,-28(fp)
    fccc:	00c002c4 	movi	r3,11
    fcd0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    fcd4:	e0bff917 	ldw	r2,-28(fp)
    fcd8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    fcdc:	e0bffa17 	ldw	r2,-24(fp)
    fce0:	10bff304 	addi	r2,r2,-52
    fce4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    fce8:	e0bffb17 	ldw	r2,-20(fp)
    fcec:	10800c04 	addi	r2,r2,48
    fcf0:	e0fffc17 	ldw	r3,-16(fp)
    fcf4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    fcf8:	e0bffb17 	ldw	r2,-20(fp)
    fcfc:	10800b04 	addi	r2,r2,44
    fd00:	e0fffd17 	ldw	r3,-12(fp)
    fd04:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    fd08:	e0bffb17 	ldw	r2,-20(fp)
    fd0c:	10800a04 	addi	r2,r2,40
    fd10:	e0fff917 	ldw	r3,-28(fp)
    fd14:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    fd18:	00800074 	movhi	r2,1
    fd1c:	10bef104 	addi	r2,r2,-1084
    fd20:	10c00104 	addi	r3,r2,4
    fd24:	e0bffb17 	ldw	r2,-20(fp)
    fd28:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    fd2c:	e0bffb17 	ldw	r2,-20(fp)
}
    fd30:	e037883a 	mov	sp,fp
    fd34:	dfc00117 	ldw	ra,4(sp)
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00204 	addi	sp,sp,8
    fd40:	f800283a 	ret

0000fd44 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    fd44:	defffe04 	addi	sp,sp,-8
    fd48:	df000115 	stw	fp,4(sp)
    fd4c:	df000104 	addi	fp,sp,4
    fd50:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    fd54:	e037883a 	mov	sp,fp
    fd58:	df000017 	ldw	fp,0(sp)
    fd5c:	dec00104 	addi	sp,sp,4
    fd60:	f800283a 	ret

0000fd64 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    fd64:	defffe04 	addi	sp,sp,-8
    fd68:	df000115 	stw	fp,4(sp)
    fd6c:	df000104 	addi	fp,sp,4
    fd70:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    fd74:	e037883a 	mov	sp,fp
    fd78:	df000017 	ldw	fp,0(sp)
    fd7c:	dec00104 	addi	sp,sp,4
    fd80:	f800283a 	ret

0000fd84 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    fd84:	deffff04 	addi	sp,sp,-4
    fd88:	df000015 	stw	fp,0(sp)
    fd8c:	d839883a 	mov	fp,sp
}
    fd90:	e037883a 	mov	sp,fp
    fd94:	df000017 	ldw	fp,0(sp)
    fd98:	dec00104 	addi	sp,sp,4
    fd9c:	f800283a 	ret

0000fda0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    fda0:	deffff04 	addi	sp,sp,-4
    fda4:	df000015 	stw	fp,0(sp)
    fda8:	d839883a 	mov	fp,sp
}
    fdac:	e037883a 	mov	sp,fp
    fdb0:	df000017 	ldw	fp,0(sp)
    fdb4:	dec00104 	addi	sp,sp,4
    fdb8:	f800283a 	ret

0000fdbc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    fdbc:	deffff04 	addi	sp,sp,-4
    fdc0:	df000015 	stw	fp,0(sp)
    fdc4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    fdc8:	e037883a 	mov	sp,fp
    fdcc:	df000017 	ldw	fp,0(sp)
    fdd0:	dec00104 	addi	sp,sp,4
    fdd4:	f800283a 	ret

0000fdd8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    fdd8:	deffff04 	addi	sp,sp,-4
    fddc:	df000015 	stw	fp,0(sp)
    fde0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    fde4:	e037883a 	mov	sp,fp
    fde8:	df000017 	ldw	fp,0(sp)
    fdec:	dec00104 	addi	sp,sp,4
    fdf0:	f800283a 	ret

0000fdf4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    fdf4:	deffff04 	addi	sp,sp,-4
    fdf8:	df000015 	stw	fp,0(sp)
    fdfc:	d839883a 	mov	fp,sp
}
    fe00:	e037883a 	mov	sp,fp
    fe04:	df000017 	ldw	fp,0(sp)
    fe08:	dec00104 	addi	sp,sp,4
    fe0c:	f800283a 	ret

0000fe10 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    fe10:	deffff04 	addi	sp,sp,-4
    fe14:	df000015 	stw	fp,0(sp)
    fe18:	d839883a 	mov	fp,sp
}
    fe1c:	e037883a 	mov	sp,fp
    fe20:	df000017 	ldw	fp,0(sp)
    fe24:	dec00104 	addi	sp,sp,4
    fe28:	f800283a 	ret

0000fe2c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    fe2c:	defffe04 	addi	sp,sp,-8
    fe30:	df000115 	stw	fp,4(sp)
    fe34:	df000104 	addi	fp,sp,4
    fe38:	e13fff15 	stw	r4,-4(fp)
}
    fe3c:	e037883a 	mov	sp,fp
    fe40:	df000017 	ldw	fp,0(sp)
    fe44:	dec00104 	addi	sp,sp,4
    fe48:	f800283a 	ret

0000fe4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fe4c:	defffb04 	addi	sp,sp,-20
    fe50:	dfc00415 	stw	ra,16(sp)
    fe54:	df000315 	stw	fp,12(sp)
    fe58:	df000304 	addi	fp,sp,12
    fe5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fe60:	00800074 	movhi	r2,1
    fe64:	1089cf04 	addi	r2,r2,10044
    fe68:	10800017 	ldw	r2,0(r2)
    fe6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fe70:	00003106 	br	ff38 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    fe74:	e0bffd17 	ldw	r2,-12(fp)
    fe78:	10800217 	ldw	r2,8(r2)
    fe7c:	1009883a 	mov	r4,r2
    fe80:	00012fc0 	call	12fc <strlen>
    fe84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10c00217 	ldw	r3,8(r2)
    fe90:	e0bffe17 	ldw	r2,-8(fp)
    fe94:	10bfffc4 	addi	r2,r2,-1
    fe98:	1885883a 	add	r2,r3,r2
    fe9c:	10800003 	ldbu	r2,0(r2)
    fea0:	10803fcc 	andi	r2,r2,255
    fea4:	1080201c 	xori	r2,r2,128
    fea8:	10bfe004 	addi	r2,r2,-128
    feac:	10800bd8 	cmpnei	r2,r2,47
    feb0:	1000031e 	bne	r2,zero,fec0 <alt_find_file+0x74>
    {
      len -= 1;
    feb4:	e0bffe17 	ldw	r2,-8(fp)
    feb8:	10bfffc4 	addi	r2,r2,-1
    febc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fec0:	e0bffe17 	ldw	r2,-8(fp)
    fec4:	e0ffff17 	ldw	r3,-4(fp)
    fec8:	1885883a 	add	r2,r3,r2
    fecc:	10800003 	ldbu	r2,0(r2)
    fed0:	10803fcc 	andi	r2,r2,255
    fed4:	1080201c 	xori	r2,r2,128
    fed8:	10bfe004 	addi	r2,r2,-128
    fedc:	10800be0 	cmpeqi	r2,r2,47
    fee0:	1000081e 	bne	r2,zero,ff04 <alt_find_file+0xb8>
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	e0ffff17 	ldw	r3,-4(fp)
    feec:	1885883a 	add	r2,r3,r2
    fef0:	10800003 	ldbu	r2,0(r2)
    fef4:	10803fcc 	andi	r2,r2,255
    fef8:	1080201c 	xori	r2,r2,128
    fefc:	10bfe004 	addi	r2,r2,-128
    ff00:	10000a1e 	bne	r2,zero,ff2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    ff04:	e0bffd17 	ldw	r2,-12(fp)
    ff08:	10c00217 	ldw	r3,8(r2)
    ff0c:	e0bffe17 	ldw	r2,-8(fp)
    ff10:	1809883a 	mov	r4,r3
    ff14:	e17fff17 	ldw	r5,-4(fp)
    ff18:	100d883a 	mov	r6,r2
    ff1c:	00101d00 	call	101d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ff20:	1000021e 	bne	r2,zero,ff2c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ff24:	e0bffd17 	ldw	r2,-12(fp)
    ff28:	00000806 	br	ff4c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    ff2c:	e0bffd17 	ldw	r2,-12(fp)
    ff30:	10800017 	ldw	r2,0(r2)
    ff34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ff38:	e0fffd17 	ldw	r3,-12(fp)
    ff3c:	00800074 	movhi	r2,1
    ff40:	1089cf04 	addi	r2,r2,10044
    ff44:	18bfcb1e 	bne	r3,r2,fe74 <__alt_mem_Flash_flash_data+0xf400fe74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ff48:	0005883a 	mov	r2,zero
}
    ff4c:	e037883a 	mov	sp,fp
    ff50:	dfc00117 	ldw	ra,4(sp)
    ff54:	df000017 	ldw	fp,0(sp)
    ff58:	dec00204 	addi	sp,sp,8
    ff5c:	f800283a 	ret

0000ff60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ff60:	defff904 	addi	sp,sp,-28
    ff64:	dfc00615 	stw	ra,24(sp)
    ff68:	df000515 	stw	fp,20(sp)
    ff6c:	df000504 	addi	fp,sp,20
    ff70:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ff74:	00bffa04 	movi	r2,-24
    ff78:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    ff7c:	00800074 	movhi	r2,1
    ff80:	1091b804 	addi	r2,r2,18144
    ff84:	10800017 	ldw	r2,0(r2)
    ff88:	e0bffd15 	stw	r2,-12(fp)
    ff8c:	e03ffe0d 	sth	zero,-8(fp)
    ff90:	e0fffe0b 	ldhu	r3,-8(fp)
    ff94:	e0bffe84 	addi	r2,fp,-6
    ff98:	e13ffd17 	ldw	r4,-12(fp)
    ff9c:	180b883a 	mov	r5,r3
    ffa0:	100d883a 	mov	r6,r2
    ffa4:	000a2c40 	call	a2c4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ffa8:	e03ffb15 	stw	zero,-20(fp)
    ffac:	00001d06 	br	10024 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    ffb0:	00800074 	movhi	r2,1
    ffb4:	10846504 	addi	r2,r2,4500
    ffb8:	e0fffb17 	ldw	r3,-20(fp)
    ffbc:	18c00324 	muli	r3,r3,12
    ffc0:	10c5883a 	add	r2,r2,r3
    ffc4:	10800017 	ldw	r2,0(r2)
    ffc8:	1000131e 	bne	r2,zero,10018 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    ffcc:	00800074 	movhi	r2,1
    ffd0:	10846504 	addi	r2,r2,4500
    ffd4:	e0fffb17 	ldw	r3,-20(fp)
    ffd8:	18c00324 	muli	r3,r3,12
    ffdc:	10c5883a 	add	r2,r2,r3
    ffe0:	e0ffff17 	ldw	r3,-4(fp)
    ffe4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ffe8:	00800074 	movhi	r2,1
    ffec:	1089d304 	addi	r2,r2,10060
    fff0:	10c00017 	ldw	r3,0(r2)
    fff4:	e0bffb17 	ldw	r2,-20(fp)
    fff8:	1880040e 	bge	r3,r2,1000c <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    fffc:	00800074 	movhi	r2,1
   10000:	1089d304 	addi	r2,r2,10060
   10004:	e0fffb17 	ldw	r3,-20(fp)
   10008:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1000c:	e0bffb17 	ldw	r2,-20(fp)
   10010:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   10014:	00000606 	br	10030 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10018:	e0bffb17 	ldw	r2,-20(fp)
   1001c:	10800044 	addi	r2,r2,1
   10020:	e0bffb15 	stw	r2,-20(fp)
   10024:	e0bffb17 	ldw	r2,-20(fp)
   10028:	10800810 	cmplti	r2,r2,32
   1002c:	103fe01e 	bne	r2,zero,ffb0 <__alt_mem_Flash_flash_data+0xf400ffb0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   10030:	00800074 	movhi	r2,1
   10034:	1091b804 	addi	r2,r2,18144
   10038:	10800017 	ldw	r2,0(r2)
   1003c:	1009883a 	mov	r4,r2
   10040:	000a6980 	call	a698 <OSSemPost>

  return rc;
   10044:	e0bffc17 	ldw	r2,-16(fp)
}
   10048:	e037883a 	mov	sp,fp
   1004c:	dfc00117 	ldw	ra,4(sp)
   10050:	df000017 	ldw	fp,0(sp)
   10054:	dec00204 	addi	sp,sp,8
   10058:	f800283a 	ret

0001005c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1005c:	defffb04 	addi	sp,sp,-20
   10060:	df000415 	stw	fp,16(sp)
   10064:	df000404 	addi	fp,sp,16
   10068:	e13ffe15 	stw	r4,-8(fp)
   1006c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10070:	e0bfff17 	ldw	r2,-4(fp)
   10074:	10840070 	cmpltui	r2,r2,4097
   10078:	1000021e 	bne	r2,zero,10084 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1007c:	00840004 	movi	r2,4096
   10080:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10084:	e0fffe17 	ldw	r3,-8(fp)
   10088:	e0bfff17 	ldw	r2,-4(fp)
   1008c:	1885883a 	add	r2,r3,r2
   10090:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10094:	e0bffe17 	ldw	r2,-8(fp)
   10098:	e0bffc15 	stw	r2,-16(fp)
   1009c:	00000506 	br	100b4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	10800804 	addi	r2,r2,32
   100b0:	e0bffc15 	stw	r2,-16(fp)
   100b4:	e0fffc17 	ldw	r3,-16(fp)
   100b8:	e0bffd17 	ldw	r2,-12(fp)
   100bc:	18bff836 	bltu	r3,r2,100a0 <__alt_mem_Flash_flash_data+0xf40100a0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   100c0:	e0bffe17 	ldw	r2,-8(fp)
   100c4:	108007cc 	andi	r2,r2,31
   100c8:	10000226 	beq	r2,zero,100d4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   100d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   100d8:	e037883a 	mov	sp,fp
   100dc:	df000017 	ldw	fp,0(sp)
   100e0:	dec00104 	addi	sp,sp,4
   100e4:	f800283a 	ret

000100e8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   100e8:	defffe04 	addi	sp,sp,-8
   100ec:	df000115 	stw	fp,4(sp)
   100f0:	df000104 	addi	fp,sp,4
   100f4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   100f8:	e0bfff17 	ldw	r2,-4(fp)
   100fc:	10bffe84 	addi	r2,r2,-6
   10100:	10c00428 	cmpgeui	r3,r2,16
   10104:	18001a1e 	bne	r3,zero,10170 <alt_exception_cause_generated_bad_addr+0x88>
   10108:	100690ba 	slli	r3,r2,2
   1010c:	00800074 	movhi	r2,1
   10110:	10804804 	addi	r2,r2,288
   10114:	1885883a 	add	r2,r3,r2
   10118:	10800017 	ldw	r2,0(r2)
   1011c:	1000683a 	jmp	r2
   10120:	00010160 	cmpeqi	zero,zero,1029
   10124:	00010160 	cmpeqi	zero,zero,1029
   10128:	00010170 	cmpltui	zero,zero,1029
   1012c:	00010170 	cmpltui	zero,zero,1029
   10130:	00010170 	cmpltui	zero,zero,1029
   10134:	00010160 	cmpeqi	zero,zero,1029
   10138:	00010168 	cmpgeui	zero,zero,1029
   1013c:	00010170 	cmpltui	zero,zero,1029
   10140:	00010160 	cmpeqi	zero,zero,1029
   10144:	00010160 	cmpeqi	zero,zero,1029
   10148:	00010170 	cmpltui	zero,zero,1029
   1014c:	00010160 	cmpeqi	zero,zero,1029
   10150:	00010168 	cmpgeui	zero,zero,1029
   10154:	00010170 	cmpltui	zero,zero,1029
   10158:	00010170 	cmpltui	zero,zero,1029
   1015c:	00010160 	cmpeqi	zero,zero,1029
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10160:	00800044 	movi	r2,1
   10164:	00000306 	br	10174 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10168:	0005883a 	mov	r2,zero
   1016c:	00000106 	br	10174 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10170:	0005883a 	mov	r2,zero
  }
}
   10174:	e037883a 	mov	sp,fp
   10178:	df000017 	ldw	fp,0(sp)
   1017c:	dec00104 	addi	sp,sp,4
   10180:	f800283a 	ret

00010184 <atexit>:
   10184:	200b883a 	mov	r5,r4
   10188:	000d883a 	mov	r6,zero
   1018c:	0009883a 	mov	r4,zero
   10190:	000f883a 	mov	r7,zero
   10194:	00102f01 	jmpi	102f0 <__register_exitproc>

00010198 <exit>:
   10198:	defffe04 	addi	sp,sp,-8
   1019c:	000b883a 	mov	r5,zero
   101a0:	dc000015 	stw	r16,0(sp)
   101a4:	dfc00115 	stw	ra,4(sp)
   101a8:	2021883a 	mov	r16,r4
   101ac:	00104040 	call	10404 <__call_exitprocs>
   101b0:	00800074 	movhi	r2,1
   101b4:	1089cb04 	addi	r2,r2,10028
   101b8:	11000017 	ldw	r4,0(r2)
   101bc:	20800f17 	ldw	r2,60(r4)
   101c0:	10000126 	beq	r2,zero,101c8 <exit+0x30>
   101c4:	103ee83a 	callr	r2
   101c8:	8009883a 	mov	r4,r16
   101cc:	00105980 	call	10598 <_exit>

000101d0 <memcmp>:
   101d0:	01c000c4 	movi	r7,3
   101d4:	3980192e 	bgeu	r7,r6,1023c <memcmp+0x6c>
   101d8:	2144b03a 	or	r2,r4,r5
   101dc:	11c4703a 	and	r2,r2,r7
   101e0:	10000f26 	beq	r2,zero,10220 <memcmp+0x50>
   101e4:	20800003 	ldbu	r2,0(r4)
   101e8:	28c00003 	ldbu	r3,0(r5)
   101ec:	10c0151e 	bne	r2,r3,10244 <memcmp+0x74>
   101f0:	31bfff84 	addi	r6,r6,-2
   101f4:	01ffffc4 	movi	r7,-1
   101f8:	00000406 	br	1020c <memcmp+0x3c>
   101fc:	20800003 	ldbu	r2,0(r4)
   10200:	28c00003 	ldbu	r3,0(r5)
   10204:	31bfffc4 	addi	r6,r6,-1
   10208:	10c00e1e 	bne	r2,r3,10244 <memcmp+0x74>
   1020c:	21000044 	addi	r4,r4,1
   10210:	29400044 	addi	r5,r5,1
   10214:	31fff91e 	bne	r6,r7,101fc <__alt_mem_Flash_flash_data+0xf40101fc>
   10218:	0005883a 	mov	r2,zero
   1021c:	f800283a 	ret
   10220:	20c00017 	ldw	r3,0(r4)
   10224:	28800017 	ldw	r2,0(r5)
   10228:	1880041e 	bne	r3,r2,1023c <memcmp+0x6c>
   1022c:	31bfff04 	addi	r6,r6,-4
   10230:	21000104 	addi	r4,r4,4
   10234:	29400104 	addi	r5,r5,4
   10238:	39bff936 	bltu	r7,r6,10220 <__alt_mem_Flash_flash_data+0xf4010220>
   1023c:	303fe91e 	bne	r6,zero,101e4 <__alt_mem_Flash_flash_data+0xf40101e4>
   10240:	003ff506 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   10244:	10c5c83a 	sub	r2,r2,r3
   10248:	f800283a 	ret

0001024c <strcmp>:
   1024c:	2144b03a 	or	r2,r4,r5
   10250:	108000cc 	andi	r2,r2,3
   10254:	1000171e 	bne	r2,zero,102b4 <strcmp+0x68>
   10258:	20800017 	ldw	r2,0(r4)
   1025c:	28c00017 	ldw	r3,0(r5)
   10260:	10c0141e 	bne	r2,r3,102b4 <strcmp+0x68>
   10264:	027fbff4 	movhi	r9,65279
   10268:	4a7fbfc4 	addi	r9,r9,-257
   1026c:	0086303a 	nor	r3,zero,r2
   10270:	02202074 	movhi	r8,32897
   10274:	1245883a 	add	r2,r2,r9
   10278:	42202004 	addi	r8,r8,-32640
   1027c:	10c4703a 	and	r2,r2,r3
   10280:	1204703a 	and	r2,r2,r8
   10284:	10000226 	beq	r2,zero,10290 <strcmp+0x44>
   10288:	00001706 	br	102e8 <strcmp+0x9c>
   1028c:	1000161e 	bne	r2,zero,102e8 <strcmp+0x9c>
   10290:	21000104 	addi	r4,r4,4
   10294:	20c00017 	ldw	r3,0(r4)
   10298:	29400104 	addi	r5,r5,4
   1029c:	29800017 	ldw	r6,0(r5)
   102a0:	1a4f883a 	add	r7,r3,r9
   102a4:	00c4303a 	nor	r2,zero,r3
   102a8:	3884703a 	and	r2,r7,r2
   102ac:	1204703a 	and	r2,r2,r8
   102b0:	19bff626 	beq	r3,r6,1028c <__alt_mem_Flash_flash_data+0xf401028c>
   102b4:	20800007 	ldb	r2,0(r4)
   102b8:	1000051e 	bne	r2,zero,102d0 <strcmp+0x84>
   102bc:	00000606 	br	102d8 <strcmp+0x8c>
   102c0:	21000044 	addi	r4,r4,1
   102c4:	20800007 	ldb	r2,0(r4)
   102c8:	29400044 	addi	r5,r5,1
   102cc:	10000226 	beq	r2,zero,102d8 <strcmp+0x8c>
   102d0:	28c00007 	ldb	r3,0(r5)
   102d4:	10fffa26 	beq	r2,r3,102c0 <__alt_mem_Flash_flash_data+0xf40102c0>
   102d8:	20800003 	ldbu	r2,0(r4)
   102dc:	28c00003 	ldbu	r3,0(r5)
   102e0:	10c5c83a 	sub	r2,r2,r3
   102e4:	f800283a 	ret
   102e8:	0005883a 	mov	r2,zero
   102ec:	f800283a 	ret

000102f0 <__register_exitproc>:
   102f0:	00800074 	movhi	r2,1
   102f4:	defffa04 	addi	sp,sp,-24
   102f8:	1089cb04 	addi	r2,r2,10028
   102fc:	dc000315 	stw	r16,12(sp)
   10300:	14000017 	ldw	r16,0(r2)
   10304:	dc400415 	stw	r17,16(sp)
   10308:	dfc00515 	stw	ra,20(sp)
   1030c:	80805217 	ldw	r2,328(r16)
   10310:	2023883a 	mov	r17,r4
   10314:	10003626 	beq	r2,zero,103f0 <__register_exitproc+0x100>
   10318:	10c00117 	ldw	r3,4(r2)
   1031c:	010007c4 	movi	r4,31
   10320:	20c00e16 	blt	r4,r3,1035c <__register_exitproc+0x6c>
   10324:	1a400044 	addi	r9,r3,1
   10328:	8800211e 	bne	r17,zero,103b0 <__register_exitproc+0xc0>
   1032c:	18c00084 	addi	r3,r3,2
   10330:	18c7883a 	add	r3,r3,r3
   10334:	18c7883a 	add	r3,r3,r3
   10338:	12400115 	stw	r9,4(r2)
   1033c:	10c7883a 	add	r3,r2,r3
   10340:	19400015 	stw	r5,0(r3)
   10344:	0005883a 	mov	r2,zero
   10348:	dfc00517 	ldw	ra,20(sp)
   1034c:	dc400417 	ldw	r17,16(sp)
   10350:	dc000317 	ldw	r16,12(sp)
   10354:	dec00604 	addi	sp,sp,24
   10358:	f800283a 	ret
   1035c:	00800034 	movhi	r2,0
   10360:	10800004 	addi	r2,r2,0
   10364:	10002526 	beq	r2,zero,103fc <__register_exitproc+0x10c>
   10368:	01006404 	movi	r4,400
   1036c:	d9400015 	stw	r5,0(sp)
   10370:	d9800115 	stw	r6,4(sp)
   10374:	d9c00215 	stw	r7,8(sp)
   10378:	00000000 	call	0 <__reset>
   1037c:	d9400017 	ldw	r5,0(sp)
   10380:	d9800117 	ldw	r6,4(sp)
   10384:	d9c00217 	ldw	r7,8(sp)
   10388:	10001c26 	beq	r2,zero,103fc <__register_exitproc+0x10c>
   1038c:	80c05217 	ldw	r3,328(r16)
   10390:	10000115 	stw	zero,4(r2)
   10394:	02400044 	movi	r9,1
   10398:	10c00015 	stw	r3,0(r2)
   1039c:	80805215 	stw	r2,328(r16)
   103a0:	10006215 	stw	zero,392(r2)
   103a4:	10006315 	stw	zero,396(r2)
   103a8:	0007883a 	mov	r3,zero
   103ac:	883fdf26 	beq	r17,zero,1032c <__alt_mem_Flash_flash_data+0xf401032c>
   103b0:	18d1883a 	add	r8,r3,r3
   103b4:	4211883a 	add	r8,r8,r8
   103b8:	1211883a 	add	r8,r2,r8
   103bc:	41802215 	stw	r6,136(r8)
   103c0:	01000044 	movi	r4,1
   103c4:	11806217 	ldw	r6,392(r2)
   103c8:	20c8983a 	sll	r4,r4,r3
   103cc:	310cb03a 	or	r6,r6,r4
   103d0:	11806215 	stw	r6,392(r2)
   103d4:	41c04215 	stw	r7,264(r8)
   103d8:	01800084 	movi	r6,2
   103dc:	89bfd31e 	bne	r17,r6,1032c <__alt_mem_Flash_flash_data+0xf401032c>
   103e0:	11806317 	ldw	r6,396(r2)
   103e4:	3108b03a 	or	r4,r6,r4
   103e8:	11006315 	stw	r4,396(r2)
   103ec:	003fcf06 	br	1032c <__alt_mem_Flash_flash_data+0xf401032c>
   103f0:	80805304 	addi	r2,r16,332
   103f4:	80805215 	stw	r2,328(r16)
   103f8:	003fc706 	br	10318 <__alt_mem_Flash_flash_data+0xf4010318>
   103fc:	00bfffc4 	movi	r2,-1
   10400:	003fd106 	br	10348 <__alt_mem_Flash_flash_data+0xf4010348>

00010404 <__call_exitprocs>:
   10404:	00800074 	movhi	r2,1
   10408:	1089cb04 	addi	r2,r2,10028
   1040c:	10800017 	ldw	r2,0(r2)
   10410:	defff404 	addi	sp,sp,-48
   10414:	dd800815 	stw	r22,32(sp)
   10418:	d8800015 	stw	r2,0(sp)
   1041c:	10805204 	addi	r2,r2,328
   10420:	dd000615 	stw	r20,24(sp)
   10424:	dc800415 	stw	r18,16(sp)
   10428:	dfc00b15 	stw	ra,44(sp)
   1042c:	df000a15 	stw	fp,40(sp)
   10430:	ddc00915 	stw	r23,36(sp)
   10434:	dd400715 	stw	r21,28(sp)
   10438:	dcc00515 	stw	r19,20(sp)
   1043c:	dc400315 	stw	r17,12(sp)
   10440:	dc000215 	stw	r16,8(sp)
   10444:	2025883a 	mov	r18,r4
   10448:	2829883a 	mov	r20,r5
   1044c:	d8800115 	stw	r2,4(sp)
   10450:	05bfffc4 	movi	r22,-1
   10454:	d8800017 	ldw	r2,0(sp)
   10458:	14c05217 	ldw	r19,328(r2)
   1045c:	98001d26 	beq	r19,zero,104d4 <__call_exitprocs+0xd0>
   10460:	dd400117 	ldw	r21,4(sp)
   10464:	98800117 	ldw	r2,4(r19)
   10468:	173fffc4 	addi	fp,r2,-1
   1046c:	e0000d16 	blt	fp,zero,104a4 <__call_exitprocs+0xa0>
   10470:	14000044 	addi	r16,r2,1
   10474:	8421883a 	add	r16,r16,r16
   10478:	8421883a 	add	r16,r16,r16
   1047c:	84402004 	addi	r17,r16,128
   10480:	9c63883a 	add	r17,r19,r17
   10484:	9c21883a 	add	r16,r19,r16
   10488:	a0001e26 	beq	r20,zero,10504 <__call_exitprocs+0x100>
   1048c:	80804017 	ldw	r2,256(r16)
   10490:	15001c26 	beq	r2,r20,10504 <__call_exitprocs+0x100>
   10494:	e73fffc4 	addi	fp,fp,-1
   10498:	843fff04 	addi	r16,r16,-4
   1049c:	8c7fff04 	addi	r17,r17,-4
   104a0:	e5bff91e 	bne	fp,r22,10488 <__alt_mem_Flash_flash_data+0xf4010488>
   104a4:	00800034 	movhi	r2,0
   104a8:	10800004 	addi	r2,r2,0
   104ac:	10000926 	beq	r2,zero,104d4 <__call_exitprocs+0xd0>
   104b0:	98800117 	ldw	r2,4(r19)
   104b4:	1000311e 	bne	r2,zero,1057c <__call_exitprocs+0x178>
   104b8:	98800017 	ldw	r2,0(r19)
   104bc:	10003426 	beq	r2,zero,10590 <__call_exitprocs+0x18c>
   104c0:	9809883a 	mov	r4,r19
   104c4:	a8800015 	stw	r2,0(r21)
   104c8:	00000000 	call	0 <__reset>
   104cc:	acc00017 	ldw	r19,0(r21)
   104d0:	983fe41e 	bne	r19,zero,10464 <__alt_mem_Flash_flash_data+0xf4010464>
   104d4:	dfc00b17 	ldw	ra,44(sp)
   104d8:	df000a17 	ldw	fp,40(sp)
   104dc:	ddc00917 	ldw	r23,36(sp)
   104e0:	dd800817 	ldw	r22,32(sp)
   104e4:	dd400717 	ldw	r21,28(sp)
   104e8:	dd000617 	ldw	r20,24(sp)
   104ec:	dcc00517 	ldw	r19,20(sp)
   104f0:	dc800417 	ldw	r18,16(sp)
   104f4:	dc400317 	ldw	r17,12(sp)
   104f8:	dc000217 	ldw	r16,8(sp)
   104fc:	dec00c04 	addi	sp,sp,48
   10500:	f800283a 	ret
   10504:	98800117 	ldw	r2,4(r19)
   10508:	80c00017 	ldw	r3,0(r16)
   1050c:	10bfffc4 	addi	r2,r2,-1
   10510:	17001526 	beq	r2,fp,10568 <__call_exitprocs+0x164>
   10514:	80000015 	stw	zero,0(r16)
   10518:	183fde26 	beq	r3,zero,10494 <__alt_mem_Flash_flash_data+0xf4010494>
   1051c:	00800044 	movi	r2,1
   10520:	1708983a 	sll	r4,r2,fp
   10524:	98806217 	ldw	r2,392(r19)
   10528:	9dc00117 	ldw	r23,4(r19)
   1052c:	2084703a 	and	r2,r4,r2
   10530:	1000061e 	bne	r2,zero,1054c <__call_exitprocs+0x148>
   10534:	183ee83a 	callr	r3
   10538:	98800117 	ldw	r2,4(r19)
   1053c:	15ffc51e 	bne	r2,r23,10454 <__alt_mem_Flash_flash_data+0xf4010454>
   10540:	a8800017 	ldw	r2,0(r21)
   10544:	14ffd326 	beq	r2,r19,10494 <__alt_mem_Flash_flash_data+0xf4010494>
   10548:	003fc206 	br	10454 <__alt_mem_Flash_flash_data+0xf4010454>
   1054c:	98806317 	ldw	r2,396(r19)
   10550:	2084703a 	and	r2,r4,r2
   10554:	1000061e 	bne	r2,zero,10570 <__call_exitprocs+0x16c>
   10558:	89400017 	ldw	r5,0(r17)
   1055c:	9009883a 	mov	r4,r18
   10560:	183ee83a 	callr	r3
   10564:	003ff406 	br	10538 <__alt_mem_Flash_flash_data+0xf4010538>
   10568:	9f000115 	stw	fp,4(r19)
   1056c:	003fea06 	br	10518 <__alt_mem_Flash_flash_data+0xf4010518>
   10570:	89000017 	ldw	r4,0(r17)
   10574:	183ee83a 	callr	r3
   10578:	003fef06 	br	10538 <__alt_mem_Flash_flash_data+0xf4010538>
   1057c:	98800017 	ldw	r2,0(r19)
   10580:	982b883a 	mov	r21,r19
   10584:	1027883a 	mov	r19,r2
   10588:	983fb61e 	bne	r19,zero,10464 <__alt_mem_Flash_flash_data+0xf4010464>
   1058c:	003fd106 	br	104d4 <__alt_mem_Flash_flash_data+0xf40104d4>
   10590:	0005883a 	mov	r2,zero
   10594:	003ffa06 	br	10580 <__alt_mem_Flash_flash_data+0xf4010580>

00010598 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   10598:	defffd04 	addi	sp,sp,-12
   1059c:	df000215 	stw	fp,8(sp)
   105a0:	df000204 	addi	fp,sp,8
   105a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   105a8:	00800074 	movhi	r2,1
   105ac:	1091c044 	addi	r2,r2,18177
   105b0:	10000005 	stb	zero,0(r2)
   105b4:	e0bfff17 	ldw	r2,-4(fp)
   105b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   105bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   105c0:	10000226 	beq	r2,zero,105cc <_exit+0x34>
    ALT_SIM_FAIL();
   105c4:	002af070 	cmpltui	zero,zero,43969
   105c8:	00000106 	br	105d0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   105cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   105d0:	003fff06 	br	105d0 <__alt_mem_Flash_flash_data+0xf40105d0>
