
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000203c4 memsz 0x000203c4 flags r-x
    LOAD off    0x000213e4 vaddr 0x000203e4 paddr 0x00022310 align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x0002423c vaddr 0x0002423c paddr 0x0002423c align 2**12
         filesz 0x00000000 memsz 0x000214bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f5dc  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bc4  0001f820  0001f820  00020820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  000203e4  00022310  000213e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000214bc  0002423c  0002423c  0002423c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000456f8  000456f8  00023310  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00023310  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023310  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00023338  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034c79  00000000  00000000  000244f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c25f  00000000  00000000  00059171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000107c9  00000000  00000000  000653d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003fac  00000000  00000000  00075b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000056ea  00000000  00000000  00079b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  0007f232  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009a3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  0009a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a1e42  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a1e48  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a1e4d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a1e4e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a1e4f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a1e53  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a1e57  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a1e5b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a1e64  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a1e6d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a1e76  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a1e81  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a1edf  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000acaa4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001f820 l    d  .rodata	00000000 .rodata
000203e4 l    d  .rwdata	00000000 .rwdata
0002423c l    d  .bss	00000000 .bss
000456f8 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001fe32 l     O .rodata	00000010 zeroes.4240
0001fe42 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0001fe52 l     O .rodata	00000010 zeroes.4255
00007188 l     F .text	000000bc __sbprintf
0001fe62 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007398 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008f54 l     F .text	00000008 __fp_lock
00008f5c l     F .text	00000008 __fp_unlock
00008f70 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000203e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00020828 l     O .rwdata	00000020 lc_ctype_charset
00020808 l     O .rwdata	00000020 lc_message_charset
00020848 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001fe94 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ffb8 l     O .rodata	00000010 zeroes.4184
0001ffc8 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000d5e4 l     F .text	000000fc __sprint_r.part.0
0001ffe8 l     O .rodata	00000010 blanks.4199
0001ffd8 l     O .rodata	00000010 zeroes.4200
0000e9ec l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000fef0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0001261c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001273c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012768 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00012868 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001295c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00012a40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00012c38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022284 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012e94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022288 l     O .rwdata	00000004 lockid
000242d8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002228c l     O .rwdata	00000004 lockid
000242e0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000148c8 l     F .text	00000044 OS_InitMisc
0001490c l     F .text	00000068 OS_InitRdyList
00014a6c l     F .text	000000e0 OS_InitTCBList
000147ec l     F .text	000000dc OS_InitEventList
00014974 l     F .text	0000007c OS_InitTaskIdle
000149f0 l     F .text	0000007c OS_InitTaskStat
00014ccc l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00016ad0 l     F .text	00000110 OS_FlagTaskRdy
00016828 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001bb00 l     F .text	00000038 alt_dev_reg
00020e30 l     O .rwdata	0000106c JTAG_UART
00021e9c l     O .rwdata	00000030 AV_Config
00021ecc l     O .rwdata	00000030 Audio_Subsystem_Audio
00021efc l     O .rwdata	0000002c Char_LCD_16x2
00021f28 l     O .rwdata	0000002c IrDA
00021f54 l     O .rwdata	0000002c Expansion_JP5
00021f80 l     O .rwdata	0000002c Green_LEDs
00021fac l     O .rwdata	0000002c HEX3_HEX0
00021fd8 l     O .rwdata	0000002c HEX7_HEX4
00022004 l     O .rwdata	0000002c Pushbuttons
00022030 l     O .rwdata	0000002c Red_LEDs
0002205c l     O .rwdata	0000002c Slider_Switches
00022088 l     O .rwdata	00000038 PS2_Port
000220c0 l     O .rwdata	00000038 PS2_Port_Dual
000220f8 l     O .rwdata	0000002c Serial_Port
00022124 l     O .rwdata	00000034 USB
00022158 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000221a0 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000221f4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c1e8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001c490 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001cc68 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001e484 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001e6f0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001e9d8 l     F .text	00000050 alt_get_errno
0001ea28 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024344 g     O .bss	00000004 alt_instruction_exception_handler
0000ba58 g     F .text	00000074 _mprec_log10
000222da g     O .rwdata	00000002 OSTaskNameSize
0000bb44 g     F .text	0000008c __any_on
0000ef58 g     F .text	00000054 _isatty_r
0001fea0 g     O .rodata	00000028 __mprec_tinytens
00012b64 g     F .text	000000d4 alt_main
0000306c g     F .text	000000a8 _puts_r
000455f8 g     O .bss	00000100 alt_irq
0001d844 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000efac g     F .text	0000005c _lseek_r
00017ebc g     F .text	000000d0 OS_MemInit
00022310 g       *ABS*	00000000 __flash_rwdata_start
0001ba9c g     F .text	00000064 OSTimeSet
0001cdd4 g     F .text	0000003c alt_up_character_lcd_send_cmd
00011184 g     F .text	00000084 .hidden __eqdf2
00013544 g     F .text	00000610 OSEventPendMulti
000456f8 g       *ABS*	00000000 __alt_heap_start
0001f034 g     F .text	00000020 OSTaskCreateHook
00003030 g     F .text	0000003c printf
000222b2 g     O .rwdata	00000002 OSMboxEn
00024268 g     O .bss	00000004 random
00013ba8 g     F .text	0000007c OSIntEnter
0000f1b8 g     F .text	0000009c _wcrtomb_r
0000c2d8 g     F .text	0000005c __sseek
000092a4 g     F .text	00000010 __sinit
0001e1cc g     F .text	00000100 alt_up_char_buffer_string
0000f064 g     F .text	00000138 __swbuf_r
0001d664 g     F .text	00000034 read_CE_bit
000222c2 g     O .rwdata	00000002 OSQEn
00001908 g     F .text	000002ac Tutorial
00009d50 g     F .text	0000007c _setlocale_r
0000910c g     F .text	00000068 __sfmoreglue
00013218 g     F .text	000000d0 __malloc_unlock
0001f090 g     F .text	0000001c OSTaskStatHook
0001d9e8 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001dedc g     F .text	00000090 alt_up_rs232_read_fd
000242e8 g     O .bss	00000001 OSLockNesting
00001bb4 g     F .text	000000ec menu
00022300 g     O .rwdata	00000002 OSDataSize
000242e9 g     O .bss	00000001 OSRunning
0001e100 g     F .text	000000cc alt_up_char_buffer_draw
00024370 g     O .bss	00009c40 Singleplayer_stk
0002423c g     O .bss	00000004 counter3
0000a9b0 g     F .text	0000015c memmove
0001f0c8 g     F .text	0000001c OSInitHookBegin
000222f8 g     O .rwdata	00000002 OSTmrSize
0000928c g     F .text	00000018 _cleanup
0000ac30 g     F .text	000000a8 _Balloc
0002222c g     O .rwdata	00000004 gameModeMenu
000242ec g     O .bss	00000004 OSIdleCtr
00011208 g     F .text	000000e0 .hidden __gtdf2
00022234 g     O .rwdata	00000004 xRechts
0001ede8 g     F .text	00000020 altera_nios2_gen2_irq_init
0001eeb4 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001cd60 g     F .text	00000074 get_DDRAM_addr
00015004 g     F .text	000002d4 OS_TCBInit
00022244 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
000222fe g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002229e g     O .rwdata	00000002 OSEventSize
000242f0 g     O .bss	00000001 OSPrioHighRdy
0000ef00 g     F .text	00000058 _fstat_r
0001f054 g     F .text	00000020 OSTaskDelHook
000242c4 g     O .bss	00000004 errno
0000c254 g     F .text	00000008 __seofread
0001ee94 g       .text	00000000 OSStartHighRdy
0002426c g     O .bss	00000004 pixel_buffer_y
0001a3a0 g     F .text	000001ec OSTaskCreateExt
0000c5ac g     F .text	00001038 ___svfiprintf_internal_r
00016374 g     F .text	00000068 OSFlagPendGetFlagsRdy
000222de g     O .rwdata	00000002 OSTaskStatStkSize
00015464 g     F .text	00000308 OSFlagAccept
00018590 g     F .text	000000b8 OSQFlush
00017f8c g     F .text	00000140 OSQAccept
000242d0 g     O .bss	00000004 alt_argv
000016a0 g     F .text	00000268 endTutorial
00024270 g     O .bss	00000004 score1
0002a220 g       *ABS*	00000000 _gp
0001a1e4 g     F .text	000001bc OSTaskCreate
00019ca4 g     F .text	00000540 OSTaskChangePrio
000242e4 g     O .bss	00000004 alt_heapsem
00002848 g     F .text	0000003c del_middenlijn
000152d8 g     F .text	0000018c OSDebugInit
0001a58c g     F .text	000003e0 OSTaskDel
00022238 g     O .rwdata	00000004 xBoven
00020cb0 g     O .rwdata	00000180 alt_fd_list
0002224c g     O .rwdata	00000004 onePress
000423d4 g     O .bss	00000370 OSFlagTbl
000145d8 g     F .text	000000b4 OS_EventTaskRemove
0001e630 g     F .text	00000090 alt_find_dev
0000a878 g     F .text	00000138 memcpy
000222c8 g     O .rwdata	00000002 OSRdyTblSize
0001cf70 g     F .text	00000050 alt_up_character_lcd_write_fd
0001e2cc g     F .text	0000005c alt_up_char_buffer_clear
00008f64 g     F .text	0000000c _cleanup_r
00012444 g     F .text	000000d0 .hidden __floatsidf
0001e7b0 g     F .text	00000078 alt_io_redirect
000112e8 g     F .text	000000e0 .hidden __ltdf2
0001f820 g       *ABS*	00000000 __DTOR_END__
0001d4f0 g     F .text	00000090 alt_up_irda_write_fd
0001de68 g     F .text	00000074 alt_up_rs232_read_data
00003114 g     F .text	00000014 puts
0001f3d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000132e8 g     F .text	00000120 OSEventNameGet
000222ac g     O .rwdata	00000002 OSFlagMax
0000c138 g     F .text	00000074 __fpclassifyd
0002429c g     O .bss	00000004 last
0000b9b4 g     F .text	000000a4 __ratio
00013c24 g     F .text	000000f4 OSIntExit
0000e9c8 g     F .text	00000024 __vfiprintf_internal
000222e6 g     O .rwdata	00000002 OSTCBSize
000242f1 g     O .bss	00000001 OSPrioCur
0001d2ec g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001c6f4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003004 g     F .text	0000002c _printf_r
0001000c g     F .text	00000008 .hidden __udivsi3
000128b8 g     F .text	000000a4 isatty
000222cc g     O .rwdata	00000002 OSStkWidth
0001fef0 g     O .rodata	000000c8 __mprec_tens
000222c0 g     O .rwdata	00000002 OSPtrSize
00009dcc g     F .text	0000000c __locale_charset
000222a0 g     O .rwdata	00000002 OSEventTblSize
0001d290 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00022240 g     O .rwdata	00000004 xMenu
0001ee08 g       .text	00000000 OSCtxSw
0001f34c g     F .text	0000008c alt_icache_flush
000242c0 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
000242f4 g     O .bss	00000004 OSTCBList
00024240 g     O .bss	00000004 gpio_dev
00022228 g     O .rwdata	00000004 leven
000242c8 g     O .bss	00000004 alt_fd_list_lock
0002225c g     O .rwdata	00000004 __mb_cur_max
00009dfc g     F .text	0000000c _localeconv_r
0000b03c g     F .text	0000003c __i2b
00009708 g     F .text	000004c0 __sfvwrite_r
00042744 g     O .bss	00000c30 OSMemTbl
000242f8 g     O .bss	00000001 OSTickStepState
0000c1ac g     F .text	00000054 _sbrk_r
0002dfb0 g     O .bss	00002004 menu_stk
000222c4 g     O .rwdata	00000002 OSQMax
00043374 g     O .bss	00000800 OSTaskStatStk
00017aec g     F .text	000000f8 OSMemNameGet
000222a4 g     O .rwdata	00000002 OSFlagEn
0000f008 g     F .text	0000005c _read_r
000222ea g     O .rwdata	00000002 OSTimeTickHookEn
00018ab0 g     F .text	00000168 OSQPost
00016be0 g     F .text	000000a0 OS_FlagUnlink
0002227c g     O .rwdata	00000004 alt_max_fd
0001dde4 g     F .text	00000044 alt_up_rs232_check_parity
00014b9c g     F .text	00000064 OS_MemCopy
00014c00 g     F .text	000000cc OS_Sched
0000ec1c g     F .text	000000f0 _fclose_r
000179fc g     F .text	000000f0 OSMemGet
000176f8 g     F .text	00000110 OSMboxQuery
0001ac6c g     F .text	000001c0 OSTaskNameSet
0001d698 g     F .text	00000030 read_num_bytes_available
00008f24 g     F .text	00000030 fflush
000242bc g     O .bss	00000004 __malloc_max_sbrked_mem
000242fc g     O .bss	00000004 OSCtxSwCtr
0001f0ac g     F .text	0000001c OSTimeTickHook
0001e828 g     F .text	000001b0 alt_irq_register
000222ae g     O .rwdata	00000002 OSFlagNameSize
0001d600 g     F .text	00000034 read_RI_bit
0001468c g     F .text	000000fc OS_EventTaskRemoveMulti
00024244 g     O .bss	00000004 controllerSem
0001001c g     F .text	0000089c .hidden __adddf3
0001448c g     F .text	0000014c OS_EventTaskWaitMulti
0000b75c g     F .text	0000011c __b2d
000222c6 g     O .rwdata	00000002 OSQSize
0000f960 g     F .text	00000590 .hidden __umoddi3
00012a90 g     F .text	000000d4 lseek
000195b4 g     F .text	00000268 OSSemPend
00022254 g     O .rwdata	00000004 _global_impure_ptr
0000bbd0 g     F .text	00000568 _realloc_r
00024298 g     O .bss	00000004 vorige
000222b0 g     O .rwdata	00000002 OSLowestPrio
000456f8 g       *ABS*	00000000 __bss_end
0001f11c g     F .text	00000020 OSTCBInitHook
000222f6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001ece4 g     F .text	00000104 alt_tick
0001748c g     F .text	00000110 OSMboxPost
00024248 g     O .bss	00000004 counter1
0000f3a0 g     F .text	000005c0 .hidden __udivdi3
0000ed20 g     F .text	00000184 _fputwc_r
00022298 g     O .rwdata	00000002 OSEventEn
0001fec8 g     O .rodata	00000028 __mprec_bigtens
0000ae20 g     F .text	00000104 __s2b
000222f2 g     O .rwdata	00000002 OSTmrCfgNameSize
00012514 g     F .text	000000a4 .hidden __floatunsidf
0000b504 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001d6fc g     F .text	0000002c read_data_byte
000092c4 g     F .text	00000018 __fp_lock_all
000169ec g     F .text	000000e4 OS_FlagInit
0001ec4c g     F .text	00000098 alt_alarm_stop
0002424c g     O .bss	00000004 Flags_Games
0001d634 g     F .text	00000030 read_RE_bit
000222d4 g     O .rwdata	00000002 OSTaskIdleStkSize
00024338 g     O .bss	00000004 alt_irq_active
0001919c g     F .text	000000b0 OSSemAccept
00002750 g     F .text	00000090 VGA_text
00017cfc g     F .text	000000d8 OSMemPut
00024274 g     O .bss	00000004 pixel_buffer_x
00017808 g     F .text	000001f4 OSMemCreate
00024300 g     O .bss	00000004 OSIdleCtrMax
0002ffb4 g     O .bss	00002004 controller1_stk
0001d32c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00020c88 g     O .rwdata	00000028 alt_dev_null
000222e8 g     O .rwdata	00000002 OSTicksPerSec
0001d204 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001d5c0 g     F .text	00000040 alt_up_parallel_port_open_dev
0001ee08 g       .text	00000000 OSIntCtxSw
0001d8a0 g     F .text	00000074 alt_up_ps2_write_data_byte
00000e68 g     F .text	0000017c endGame
0001e468 g     F .text	0000001c alt_dcache_flush_all
0000af24 g     F .text	00000068 __hi0bits
000123bc g     F .text	00000088 .hidden __fixdfsi
00024304 g     O .bss	00000004 OSTCBFreeList
00022310 g       *ABS*	00000000 __ram_rwdata_end
0001981c g     F .text	0000016c OSSemPendAbort
00022274 g     O .rwdata	00000008 alt_dev_list
00012ee4 g     F .text	000000f8 write
00031fb8 g     O .bss	00002004 Tutorial_stk
000222ec g     O .rwdata	00000002 OSVersionNbr
000203e4 g       *ABS*	00000000 __ram_rodata_end
000127b8 g     F .text	000000b0 fstat
0001df6c g     F .text	00000094 alt_up_rs232_write_fd
00001ca0 g     F .text	00000440 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000112e8 g     F .text	000000e0 .hidden __ledf2
00022294 g     O .rwdata	00000004 OSEndiannessTest
0000b274 g     F .text	00000140 __pow5mult
0000d6f8 g     F .text	000012d0 ___vfiprintf_internal_r
000242b4 g     O .bss	00000004 __nlocale_changed
00010014 g     F .text	00000008 .hidden __umodsi3
000222a6 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
000456f8 g       *ABS*	00000000 end
0001dbdc g     F .text	00000098 alt_up_ps2_write_fd
0001d368 g     F .text	00000044 alt_up_irda_check_parity
0001e040 g     F .text	00000080 alt_up_char_buffer_init
000022a0 g     F .text	000001d0 teken_menu
0001c0a8 g     F .text	00000140 altera_avalon_jtag_uart_init
00014e60 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	000004b8 Game
00022224 g     O .rwdata	00000004 check
0001f820 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001cce0 g     F .text	00000080 alt_avalon_timer_sc_init
000125b8 g     F .text	00000064 .hidden __clzsi2
0001c9a8 g     F .text	000002c0 altera_avalon_jtag_uart_write
000092b4 g     F .text	00000004 __sfp_lock_acquire
0000a790 g     F .text	000000e8 memchr
00014b4c g     F .text	00000050 OS_MemClr
0001ce84 g     F .text	00000078 alt_up_character_lcd_write
00005214 g     F .text	00001f50 ___vfprintf_internal_r
0001eed8 g     F .text	0000015c OSTaskStkInit
00003128 g     F .text	00000058 _sprintf_r
00009418 g     F .text	000002f0 _free_r
00009dd8 g     F .text	00000010 __locale_mb_cur_max
000141e8 g     F .text	00000198 OS_EventTaskRdy
0001f650 g     F .text	00000194 __call_exitprocs
00024308 g     O .bss	00000001 OSCPUUsage
000242b0 g     O .bss	00000004 __mlocale_changed
00022260 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
000028f4 g     F .text	0000003c deleteNummer
0002433c g     O .bss	00000004 _alt_tick_rate
00018648 g     F .text	000002fc OSQPend
0001b598 g     F .text	00000148 OSTimeDly
00033fbc g     O .bss	00002004 controller2_stk
0000b3b4 g     F .text	00000150 __lshift
00024340 g     O .bss	00000004 _alt_nticks
00012c88 g     F .text	000000fc read
0001bb6c g     F .text	000003d8 alt_sys_init
0001d0bc g     F .text	00000088 alt_up_character_lcd_shift_display
0000c3e0 g     F .text	000001cc __ssprint_r
0001f53c g     F .text	00000114 __register_exitproc
00024309 g     O .bss	00000001 OSTaskCtr
0001dafc g     F .text	00000054 alt_up_ps2_clear_fifo
0001dda8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00024278 g     O .bss	00000004 score2
00024250 g     O .bss	00000004 MailBox2
0000269c g     F .text	000000b4 VGA_box
0001b6e0 g     F .text	00000168 OSTimeDlyHMSM
00001130 g     F .text	00000420 Singleplayer
0000b078 g     F .text	000001fc __multiply
0001d144 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001c5a0 g     F .text	00000068 altera_avalon_jtag_uart_close
000203e4 g       *ABS*	00000000 __ram_rwdata_start
0001f820 g       *ABS*	00000000 __ram_rodata_start
00024348 g     O .bss	00000028 __malloc_current_mallinfo
0002229a g     O .rwdata	00000002 OSEventMax
0000b878 g     F .text	0000013c __d2b
00019988 g     F .text	00000110 OSSemPost
00013da0 g     F .text	000000d8 OSSchedUnlock
000027e0 g     F .text	00000068 draw_middenlijn
0001bf44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001f250 g     F .text	000000fc alt_get_fd
0002430c g     O .bss	00000004 OSMemFreeList
00013ee4 g     F .text	000000ac OSStatInit
00016764 g     F .text	000000c4 OSFlagQuery
000222d0 g     O .rwdata	00000002 OSTaskCreateExtEn
0000eb04 g     F .text	00000054 _close_r
0001f4c0 g     F .text	0000007c memcmp
000141cc g     F .text	0000001c OS_Dummy
0001c004 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000456f8 g       *ABS*	00000000 __alt_stack_base
0001c054 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000242a0 g     O .bss	00000004 changed
0001d238 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00007244 g     F .text	00000154 __swsetup_r
00043b74 g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
000108b8 g     F .text	000008cc .hidden __divdf3
00009174 g     F .text	00000118 __sfp
0000bacc g     F .text	00000078 __copybits
00020880 g     O .rwdata	00000408 __malloc_av_
0002427c g     O .bss	00000004 ALT_y
000092c0 g     F .text	00000004 __sinit_lock_release
00024310 g     O .bss	00000004 OSTCBHighRdy
000113c8 g     F .text	00000724 .hidden __muldf3
0000c200 g     F .text	00000054 __sread
00024314 g     O .bss	00000004 OSQFreeList
0001dd0c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001f13c g     F .text	00000114 alt_find_file
0001e4d4 g     F .text	000000a4 alt_dev_llist_insert
000130f8 g     F .text	00000120 __malloc_lock
00012de4 g     F .text	000000b0 sbrk
00003284 g     F .text	00001f90 ___svfprintf_internal_r
00024280 g     O .bss	00000004 ALT_inc_y
00013408 g     F .text	0000013c OSEventNameSet
00008ec8 g     F .text	0000005c _fflush_r
0000eb58 g     F .text	000000c4 _calloc_r
00024318 g     O .bss	00000001 OSRdyGrp
0002423c g       *ABS*	00000000 __bss_start
0000ab0c g     F .text	00000124 memset
00002470 g     F .text	0000022c main
000242d4 g     O .bss	00000004 alt_envp
000242b8 g     O .bss	00000004 __malloc_max_total_mem
0001e0c0 g     F .text	00000040 alt_up_char_buffer_open_dev
0001bfa4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000f19c g     F .text	0000001c __swbuf
00020114 g     O .rodata	00000100 OSUnMapTbl
000222ca g     O .rwdata	00000002 OSSemEn
0001d034 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000163dc g     F .text	00000388 OSFlagPost
0000c334 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000ed0c g     F .text	00000014 fclose
00014380 g     F .text	0000010c OS_EventTaskWait
0001da8c g     F .text	00000070 alt_up_ps2_read_data_byte
000242a8 g     O .bss	00000004 timeout
00014f3c g     F .text	000000c8 OS_TaskStatStkChk
0001a96c g     F .text	00000158 OSTaskDelReq
00007598 g     F .text	00001728 _dtoa_r
00009fe8 g     F .text	000007a8 _malloc_r
0000f314 g     F .text	00000030 __ascii_wctomb
00022280 g     O .rwdata	00000004 alt_errno
00013e78 g     F .text	0000006c OSStart
0001309c g     F .text	0000005c __env_unlock
00009bc8 g     F .text	000000c4 _fwalk
0001ae2c g     F .text	000001f8 OSTaskResume
00017dd4 g     F .text	000000e8 OSMemQuery
000222dc g     O .rwdata	00000002 OSTaskStatEn
00035fc0 g     O .bss	00009c40 Game_stk
0001d3ac g     F .text	00000040 alt_up_irda_write_data
000222b6 g     O .rwdata	00000002 OSMemMax
00018c18 g     F .text	00000170 OSQPostFront
0001dc74 g     F .text	00000040 alt_up_ps2_open_dev
0000ff5c g     F .text	00000054 .hidden __divsi3
00024319 g     O .bss	00000003 OSRdyTbl
00022290 g     O .rwdata	00000002 OSDebugEn
0001ce44 g     F .text	00000040 alt_up_character_lcd_open_dev
000092f4 g     F .text	00000124 _malloc_trim_r
0001d7ec g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001f820 g       *ABS*	00000000 __CTOR_END__
000222a8 g     O .rwdata	00000002 OSFlagNodeSize
000222f0 g     O .rwdata	00000002 OSTmrCfgMax
0001ce10 g     F .text	00000034 alt_up_character_lcd_init
0000c33c g     F .text	000000a4 strcmp
000180cc g     F .text	000001fc OSQCreate
0001aac4 g     F .text	000001a8 OSTaskNameGet
0001f820 g       *ABS*	00000000 __flash_rodata_start
00018d88 g     F .text	0000020c OSQPostOpt
00013f90 g     F .text	0000021c OSTimeTick
000222d8 g     O .rwdata	00000002 OSTaskMax
0001f820 g       *ABS*	00000000 __DTOR_LIST__
0001924c g     F .text	00000100 OSSemCreate
000222fc g     O .rwdata	00000002 OSTmrWheelSize
0001e000 g     F .text	00000040 alt_up_rs232_open_dev
00024284 g     O .bss	00000004 gameSem
00011184 g     F .text	00000084 .hidden __nedf2
000222d2 g     O .rwdata	00000002 OSTaskDelEn
00019a98 g     F .text	00000110 OSSemQuery
000182c8 g     F .text	000002c8 OSQDel
00018944 g     F .text	0000016c OSQPendAbort
0001bb38 g     F .text	00000034 alt_irq_init
00012d84 g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001d6c8 g     F .text	00000034 read_data_valid
00003180 g     F .text	0000006c sprintf
0001d1d0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001fff8 g     O .rodata	00000100 .hidden __clz_tab
000242ac g     O .bss	00000004 _PathLocale
0001d984 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001f474 g     F .text	00000014 atexit
00002884 g     F .text	00000070 del_number
0000eaa8 g     F .text	0000005c _write_r
00013d18 g     F .text	00000088 OSSchedLock
00009e08 g     F .text	0000001c setlocale
0001576c g     F .text	00000128 OSFlagCreate
00022258 g     O .rwdata	00000004 _impure_ptr
000242cc g     O .bss	00000004 alt_argc
00008cc0 g     F .text	00000208 __sflush_r
0001e5d4 g     F .text	0000005c _do_dtors
00009df4 g     F .text	00000008 __locale_cjk_lang
000222a2 g     O .rwdata	00000002 OSEventMultiEn
00015894 g     F .text	00000270 OSFlagDel
0002431c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00017320 g     F .text	0000016c OSMboxPendAbort
0000b6fc g     F .text	00000060 __ulp
000222ee g     O .rwdata	00000002 OSTmrEn
00015d84 g     F .text	000005f0 OSFlagPend
000092dc g     F .text	00000018 __fp_unlock_all
0002226c g     O .rwdata	00000008 alt_fs_list
00014d3c g     F .text	00000074 OS_StrCopy
0001dcb4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001de28 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
000222b8 g     O .rwdata	00000002 OSMemNameSize
00024288 g     O .bss	00000004 ALT_x1
0001f0e4 g     F .text	0000001c OSInitHookEnd
0003fc00 g     O .bss	000007d0 Messages
00002930 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
000222e4 g     O .rwdata	00000002 OSTCBPrioTblMax
00009e24 g     F .text	0000000c localeconv
000222e0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00016d18 g     F .text	000000fc OSMboxCreate
000222b4 g     O .rwdata	00000002 OSMemEn
00022220 g     O .rwdata	00000004 first
000222be g     O .rwdata	00000002 OSMutexEn
00024264 g     O .bss	00000004 score3
00022310 g       *ABS*	00000000 _edata
00022250 g     O .rwdata	00000004 interval_timer_ptr
000456f8 g       *ABS*	00000000 _end
00024320 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001c608 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001b848 g     F .text	000001f0 OSTimeDlyResume
00015c34 g     F .text	00000150 OSFlagNameSet
00002120 g     F .text	000000a0 clearText
0001707c g     F .text	000002a4 OSMboxPend
0001b024 g     F .text	000001c8 OSTaskStkChk
000222ba g     O .rwdata	00000002 OSMemSize
0000c25c g     F .text	0000007c __swrite
00022264 g     O .rwdata	00000004 __malloc_trim_threshold
00009de8 g     F .text	0000000c __locale_msgcharset
00024324 g     O .bss	00000004 OSTCBCur
0001f488 g     F .text	00000038 exit
00002fa4 g     F .text	00000060 checkIDScore
0001d3ec g     F .text	00000074 alt_up_irda_read_data
000222bc g     O .rwdata	00000002 OSMemTblSize
00009c8c g     F .text	000000c4 _fwalk_reent
0001d728 g     F .text	000000c4 alt_up_ps2_init
0000b564 g     F .text	00000198 __mdiff
0000ffb0 g     F .text	0000005c .hidden __modsi3
000403d0 g     O .bss	00002004 menu_stk2
00016c80 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000092b8 g     F .text	00000004 __sfp_lock_release
00013b54 g     F .text	00000054 OSInit
0001b400 g     F .text	0000012c OSTaskQuery
0001cefc g     F .text	00000074 alt_up_character_lcd_string
000190f0 g     F .text	000000ac OS_QInit
00014db0 g     F .text	00000054 OS_StrLen
0001d580 g     F .text	00000040 alt_up_irda_open_dev
00017be4 g     F .text	00000118 OSMemNameSet
00000c44 g     F .text	00000224 gescoord
000222d6 g     O .rwdata	00000002 OSTaskProfileEn
00001550 g     F .text	00000150 tutorialUitleg
00024328 g     O .bss	00000004 OSTime
00024254 g     O .bss	00000004 Flags
000021c0 g     F .text	00000058 tekenBox
00043d54 g     O .bss	00000800 OSTaskIdleStk
0001f7e4 g     F .text	0000003c _exit
0002428c g     O .bss	00000004 ALT_inc_x
0001759c g     F .text	0000015c OSMboxPostOpt
0001e328 g     F .text	00000140 alt_alarm_start
00015b04 g     F .text	00000130 OSFlagNameGet
0001ba38 g     F .text	00000064 OSTimeGet
00009e30 g     F .text	000001b8 __smakebuf_r
0001d914 g     F .text	00000070 alt_up_ps2_wait_for_ack
000031ec g     F .text	00000098 strlen
0001f074 g     F .text	0000001c OSTaskSwHook
0001eaf4 g     F .text	00000158 open
00044554 g     O .bss	00000b40 OSEventTbl
00011208 g     F .text	000000e0 .hidden __gedf2
00045094 g     O .bss	00000510 OSTCBTbl
00019ba8 g     F .text	000000fc OSSemSet
00022248 g     O .rwdata	00000004 eenkeer
000020e0 g     F .text	00000040 clearScreen
00022268 g     O .rwdata	00000004 __wctomb
0000d6e0 g     F .text	00000018 __sprint_r
00024290 g     O .bss	00000004 ALT_x2
0001e6c0 g     F .text	00000030 alt_icache_flush_all
0001cfc0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00022304 g     O .rwdata	00000004 alt_priority_mask
0001934c g     F .text	00000268 OSSemDel
0002432c g     O .bss	00000004 OSFlagFreeList
0002229c g     O .rwdata	00000002 OSEventNameSize
00016e14 g     F .text	00000268 OSMboxDel
00007164 g     F .text	00000024 __vfprintf_internal
00024330 g     O .bss	00000001 OSStatRdy
00024258 g     O .bss	00000004 MailBox
000455a4 g     O .bss	00000054 OSTCBPrioTbl
0000f344 g     F .text	0000005c _wctomb_r
00012fdc g     F .text	000000c0 __env_lock
0001db50 g     F .text	0000008c alt_up_ps2_read_fd
000222e2 g     O .rwdata	00000002 OSTaskSwHookEn
00022230 g     O .rwdata	00000004 xLinks
00011aec g     F .text	000008d0 .hidden __subdf3
0001d460 g     F .text	00000090 alt_up_irda_read_fd
0000af8c g     F .text	000000b0 __lo0bits
00022308 g     O .rwdata	00000008 alt_alarm_list
000222aa g     O .rwdata	00000002 OSFlagWidth
0001e578 g     F .text	0000005c _do_ctors
0001dd68 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000f254 g     F .text	000000c0 wcrtomb
0001266c g     F .text	000000d0 close
000242dc g     O .bss	00000004 alt_envsem
00024334 g     O .bss	00000004 OSIdleCtrRun
0002223c g     O .rwdata	00000004 xOnder
000141ac g     F .text	00000020 OSVersion
000222f4 g     O .rwdata	00000002 OSTmrCfgWheelSize
000129c0 g     F .text	00000080 alt_load
0001b52c g     F .text	0000006c OS_TaskStkClr
00002218 g     F .text	00000088 tekenBox2
000222ce g     O .rwdata	00000002 OSTaskCreateEn
000242a4 g     O .bss	00000004 menuSem
00014788 g     F .text	00000064 OS_EventWaitListInit
0000eea4 g     F .text	0000005c fputwc
0001f100 g     F .text	0000001c OSTaskIdleHook
00024294 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
000092bc g     F .text	00000004 __sinit_lock_acquire
0000ad00 g     F .text	00000120 __multadd
00000fe4 g     F .text	0000014c endSingleplayer
0001b1ec g     F .text	00000214 OSTaskSuspend
0000acd8 g     F .text	00000028 _Bfree
0002425c g     O .bss	00000004 counter2
00024260 g     O .bss	00000004 Flags_Tutorial
00014e04 g     F .text	0000005c OS_TaskIdle
000222fa g     O .rwdata	00000002 OSTmrTblSize
00018f94 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0013ba80 	call	13ba8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800134 	movhi	r2,4
 140:	10957e04 	addi	r2,r2,22008
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	10957e04 	addi	r2,r2,22008
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0013c240 	call	13c24 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a84917 	ldw	r2,-24284(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a84917 	ldw	r2,-24284(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6a88814 	ori	gp,gp,41504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10908f14 	ori	r2,r2,16956

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18d5be14 	ori	r3,r3,22264

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00129c00 	call	129c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	0012b640 	call	12b64 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80d17 	ldw	r3,-24524(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	0015d840 	call	15d84 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80d17 	ldw	r3,-24524(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	0015d840 	call	15d84 <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e80e17 	ldw	r3,-24520(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	001748c0 	call	1748c <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80d17 	ldw	r3,-24524(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	0015d840 	call	15d84 <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80c17 	ldw	r3,-24528(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	001748c0 	call	1748c <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001b5980 	call	1b598 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	213e0804 	addi	r4,r4,-2016
     3b8:	001d5c00 	call	1d5c0 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	213e0d04 	addi	r4,r4,-1996
     3c8:	001d5c00 	call	1d5c0 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	213e1304 	addi	r4,r4,-1972
     3d8:	001d5c00 	call	1d5c0 <alt_up_parallel_port_open_dev>
     3dc:	d0a80815 	stw	r2,-24544(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80817 	ldw	r2,-24544(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80817 	ldw	r2,-24544(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	000269c0 	call	269c <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	000269c0 	call	269c <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	000269c0 	call	269c <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	000269c0 	call	269c <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	000269c0 	call	269c <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	000269c0 	call	269c <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81315 	stw	r2,-24500(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	000269c0 	call	269c <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e80b17 	ldw	r3,-24532(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	0015d840 	call	15d84 <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e80e17 	ldw	r3,-24520(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	001707c0 	call	1707c <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e80c17 	ldw	r3,-24528(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	001707c0 	call	1707c <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81417 	ldw	r3,-24496(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	00029300 	call	2930 <draw_number>
			}
			if (score2 == i) {
     864:	d0e81617 	ldw	r3,-24488(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	00029300 	call	2930 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81417 	ldw	r2,-24496(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81617 	ldw	r2,-24488(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281415 	stw	zero,-24496(gp)
				score2 =0;
     898:	d0281615 	stw	zero,-24488(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	00027e00 	call	27e0 <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000231e 	bne	r2,zero,950 <Game+0x1c4>
			del_middenlijn();
     8c4:	00028480 	call	2848 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
     8c8:	e0bffb17 	ldw	r2,-20(fp)
     8cc:	11400017 	ldw	r5,0(r2)
     8d0:	e0bffb17 	ldw	r2,-20(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	10c00c84 	addi	r3,r2,50
     8dc:	00803fc4 	movi	r2,255
     8e0:	d8800015 	stw	r2,0(sp)
     8e4:	01004b04 	movi	r4,300
     8e8:	01804c44 	movi	r6,305
     8ec:	180f883a 	mov	r7,r3
     8f0:	000269c0 	call	269c <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8f4:	01000504 	movi	r4,20
     8f8:	01400504 	movi	r5,20
     8fc:	018000b4 	movhi	r6,2
     900:	31be1804 	addi	r6,r6,-1952
     904:	00027500 	call	2750 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     908:	0009883a 	mov	r4,zero
     90c:	01400044 	movi	r5,1
     910:	000d883a 	mov	r6,zero
     914:	000f883a 	mov	r7,zero
     918:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     91c:	01000504 	movi	r4,20
     920:	01400504 	movi	r5,20
     924:	018000b4 	movhi	r6,2
     928:	31be2204 	addi	r6,r6,-1912
     92c:	00027500 	call	2750 <VGA_text>



			del_number(1);
     930:	01000044 	movi	r4,1
     934:	00028840 	call	2884 <del_number>
			del_number(2);
     938:	01000084 	movi	r4,2
     93c:	00028840 	call	2884 <del_number>

			score1 = 0;
     940:	d0281415 	stw	zero,-24496(gp)
			score2 = 0;
     944:	d0281615 	stw	zero,-24488(gp)

			i = 0;
     948:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     94c:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     950:	010000c4 	movi	r4,3
     954:	000039c0 	call	39c <controller>
     958:	10800058 	cmpnei	r2,r2,1
     95c:	1000a41e 	bne	r2,zero,bf0 <Game+0x464>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     960:	d1281a17 	ldw	r4,-24472(gp)
     964:	d1681717 	ldw	r5,-24484(gp)
     968:	d0a81a17 	ldw	r2,-24472(gp)
     96c:	10c00144 	addi	r3,r2,5
     970:	d0a81717 	ldw	r2,-24484(gp)
     974:	10800144 	addi	r2,r2,5
     978:	d8000015 	stw	zero,0(sp)
     97c:	180d883a 	mov	r6,r3
     980:	100f883a 	mov	r7,r2
     984:	000269c0 	call	269c <VGA_box>
			if (first == 1) {
     988:	d0a00017 	ldw	r2,-32768(gp)
     98c:	10800058 	cmpnei	r2,r2,1
     990:	10000f1e 	bne	r2,zero,9d0 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     994:	d0a81a17 	ldw	r2,-24472(gp)
     998:	10c02804 	addi	r3,r2,160
     99c:	d0a81b17 	ldw	r2,-24468(gp)
     9a0:	1885883a 	add	r2,r3,r2
     9a4:	d0a81a15 	stw	r2,-24472(gp)
				ALT_x2 += ALT_inc_x;
     9a8:	d0e81c17 	ldw	r3,-24464(gp)
     9ac:	d0a81b17 	ldw	r2,-24468(gp)
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	d0a81c15 	stw	r2,-24464(gp)
				ALT_y += ALT_inc_y;
     9b8:	d0e81717 	ldw	r3,-24484(gp)
     9bc:	d0a81817 	ldw	r2,-24480(gp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	d0a81715 	stw	r2,-24484(gp)
				first = 0;
     9c8:	d0200015 	stw	zero,-32768(gp)
     9cc:	00000c06 	br	a00 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
     9d0:	d0e81a17 	ldw	r3,-24472(gp)
     9d4:	d0a81b17 	ldw	r2,-24468(gp)
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	d0a81a15 	stw	r2,-24472(gp)
				ALT_x2 += ALT_inc_x;
     9e0:	d0e81c17 	ldw	r3,-24464(gp)
     9e4:	d0a81b17 	ldw	r2,-24468(gp)
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	d0a81c15 	stw	r2,-24464(gp)
				ALT_y += ALT_inc_y;
     9f0:	d0e81717 	ldw	r3,-24484(gp)
     9f4:	d0a81817 	ldw	r2,-24480(gp)
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	d0a81715 	stw	r2,-24484(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     a00:	d1281a17 	ldw	r4,-24472(gp)
     a04:	d1681717 	ldw	r5,-24484(gp)
     a08:	d0a81a17 	ldw	r2,-24472(gp)
     a0c:	11800144 	addi	r6,r2,5
     a10:	d0a81717 	ldw	r2,-24484(gp)
     a14:	10c00144 	addi	r3,r2,5
     a18:	00804034 	movhi	r2,256
     a1c:	10bfffc4 	addi	r2,r2,-1
     a20:	d8800015 	stw	r2,0(sp)
     a24:	180f883a 	mov	r7,r3
     a28:	000269c0 	call	269c <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a2c:	d0e81717 	ldw	r3,-24484(gp)
     a30:	d0a81317 	ldw	r2,-24500(gp)
     a34:	18800326 	beq	r3,r2,a44 <Game+0x2b8>
     a38:	d0a81717 	ldw	r2,-24484(gp)
     a3c:	10800118 	cmpnei	r2,r2,4
     a40:	1000031e 	bne	r2,zero,a50 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
     a44:	d0a81817 	ldw	r2,-24480(gp)
     a48:	0085c83a 	sub	r2,zero,r2
     a4c:	d0a81815 	stw	r2,-24480(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a50:	d0a81a17 	ldw	r2,-24472(gp)
     a54:	1000071e 	bne	r2,zero,a74 <Game+0x2e8>
				score2++;
     a58:	d0a81617 	ldw	r2,-24488(gp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	d0a81615 	stw	r2,-24488(gp)
				gescoord(2);
     a64:	01000084 	movi	r4,2
     a68:	0000c440 	call	c44 <gescoord>
				del_number(2);
     a6c:	01000084 	movi	r4,2
     a70:	00028840 	call	2884 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a74:	d0e81c17 	ldw	r3,-24464(gp)
     a78:	d0a81517 	ldw	r2,-24492(gp)
     a7c:	1880071e 	bne	r3,r2,a9c <Game+0x310>
				score1++;
     a80:	d0a81417 	ldw	r2,-24496(gp)
     a84:	10800044 	addi	r2,r2,1
     a88:	d0a81415 	stw	r2,-24496(gp)
				gescoord(1);
     a8c:	01000044 	movi	r4,1
     a90:	0000c440 	call	c44 <gescoord>
				del_number(1);
     a94:	01000044 	movi	r4,1
     a98:	00028840 	call	2884 <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a9c:	d0a81a17 	ldw	r2,-24472(gp)
     aa0:	10800558 	cmpnei	r2,r2,21
     aa4:	10000d1e 	bne	r2,zero,adc <Game+0x350>
     aa8:	e0bffa17 	ldw	r2,-24(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	10fffe84 	addi	r3,r2,-6
     ab4:	d0a81717 	ldw	r2,-24484(gp)
     ab8:	1880080e 	bge	r3,r2,adc <Game+0x350>
     abc:	e0bffa17 	ldw	r2,-24(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	10800c84 	addi	r2,r2,50
     ac8:	d0e81717 	ldw	r3,-24484(gp)
     acc:	1880030e 	bge	r3,r2,adc <Game+0x350>
				ALT_inc_x = -(ALT_inc_x);
     ad0:	d0a81b17 	ldw	r2,-24468(gp)
     ad4:	0085c83a 	sub	r2,zero,r2
     ad8:	d0a81b15 	stw	r2,-24468(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     adc:	d0a81a17 	ldw	r2,-24472(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	1000081e 	bne	r2,zero,b08 <Game+0x37c>
     ae8:	d0a81a17 	ldw	r2,-24472(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000051e 	bne	r2,zero,b08 <Game+0x37c>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10fffe84 	addi	r3,r2,-6
     b00:	d0a81717 	ldw	r2,-24484(gp)
     b04:	18800b26 	beq	r3,r2,b34 <Game+0x3a8>
     b08:	d0a81a17 	ldw	r2,-24472(gp)
     b0c:	10800548 	cmpgei	r2,r2,21
     b10:	10000b1e 	bne	r2,zero,b40 <Game+0x3b4>
     b14:	d0a81a17 	ldw	r2,-24472(gp)
     b18:	108003d0 	cmplti	r2,r2,15
     b1c:	1000081e 	bne	r2,zero,b40 <Game+0x3b4>
     b20:	e0bffa17 	ldw	r2,-24(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10c00c84 	addi	r3,r2,50
     b2c:	d0a81717 	ldw	r2,-24484(gp)
     b30:	1880031e 	bne	r3,r2,b40 <Game+0x3b4>
				ALT_inc_y = -(ALT_inc_y);
     b34:	d0a81817 	ldw	r2,-24480(gp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	d0a81815 	stw	r2,-24480(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b40:	d0a81c17 	ldw	r2,-24464(gp)
     b44:	10804ad8 	cmpnei	r2,r2,299
     b48:	10000d1e 	bne	r2,zero,b80 <Game+0x3f4>
     b4c:	e0bffb17 	ldw	r2,-20(fp)
     b50:	10800017 	ldw	r2,0(r2)
     b54:	10fffe84 	addi	r3,r2,-6
     b58:	d0a81717 	ldw	r2,-24484(gp)
     b5c:	1880080e 	bge	r3,r2,b80 <Game+0x3f4>
     b60:	e0bffb17 	ldw	r2,-20(fp)
     b64:	10800017 	ldw	r2,0(r2)
     b68:	10800c84 	addi	r2,r2,50
     b6c:	d0e81717 	ldw	r3,-24484(gp)
     b70:	1880030e 	bge	r3,r2,b80 <Game+0x3f4>
				ALT_inc_x = -(ALT_inc_x);
     b74:	d0a81b17 	ldw	r2,-24468(gp)
     b78:	0085c83a 	sub	r2,zero,r2
     b7c:	d0a81b15 	stw	r2,-24468(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b80:	d0a81c17 	ldw	r2,-24464(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	1000081e 	bne	r2,zero,bac <Game+0x420>
     b8c:	d0a81c17 	ldw	r2,-24464(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000051e 	bne	r2,zero,bac <Game+0x420>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10fffe84 	addi	r3,r2,-6
     ba4:	d0a81717 	ldw	r2,-24484(gp)
     ba8:	18800b26 	beq	r3,r2,bd8 <Game+0x44c>
     bac:	d0a81c17 	ldw	r2,-24464(gp)
     bb0:	10804c88 	cmpgei	r2,r2,306
     bb4:	10000b1e 	bne	r2,zero,be4 <Game+0x458>
     bb8:	d0a81c17 	ldw	r2,-24464(gp)
     bbc:	10804b10 	cmplti	r2,r2,300
     bc0:	1000081e 	bne	r2,zero,be4 <Game+0x458>
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	10c00c84 	addi	r3,r2,50
     bd0:	d0a81717 	ldw	r2,-24484(gp)
     bd4:	1880031e 	bne	r3,r2,be4 <Game+0x458>
				ALT_inc_y = -(ALT_inc_y);
     bd8:	d0a81817 	ldw	r2,-24480(gp)
     bdc:	0085c83a 	sub	r2,zero,r2
     be0:	d0a81815 	stw	r2,-24480(gp)
			}



			OSTimeDly(1);
     be4:	01000044 	movi	r4,1
     be8:	001b5980 	call	1b598 <OSTimeDly>
     bec:	00001406 	br	c40 <Game+0x4b4>

		} else if (controller(3) == 2) {
     bf0:	010000c4 	movi	r4,3
     bf4:	000039c0 	call	39c <controller>
     bf8:	10800098 	cmpnei	r2,r2,2
     bfc:	1000031e 	bne	r2,zero,c0c <Game+0x480>
			//links
			endGame(2);
     c00:	01000084 	movi	r4,2
     c04:	0000e680 	call	e68 <endGame>
     c08:	00000d06 	br	c40 <Game+0x4b4>
		}else if(controller(3) == 3){
     c0c:	010000c4 	movi	r4,3
     c10:	000039c0 	call	39c <controller>
     c14:	108000d8 	cmpnei	r2,r2,3
     c18:	1000031e 	bne	r2,zero,c28 <Game+0x49c>
			//rechts
			endGame(1);
     c1c:	01000044 	movi	r4,1
     c20:	0000e680 	call	e68 <endGame>
     c24:	00000606 	br	c40 <Game+0x4b4>
		} else if(controller(2) != 2){
     c28:	01000084 	movi	r4,2
     c2c:	000039c0 	call	39c <controller>
     c30:	108000a0 	cmpeqi	r2,r2,2
     c34:	1000021e 	bne	r2,zero,c40 <Game+0x4b4>
			endGame(1);
     c38:	01000044 	movi	r4,1
     c3c:	0000e680 	call	e68 <endGame>
		}

	}
     c40:	003eea06 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c44 <gescoord>:
}

void gescoord(int ID){
     c44:	defffc04 	addi	sp,sp,-16
     c48:	dfc00315 	stw	ra,12(sp)
     c4c:	df000215 	stw	fp,8(sp)
     c50:	df000204 	addi	fp,sp,8
     c54:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c58:	d1281a17 	ldw	r4,-24472(gp)
     c5c:	d1681717 	ldw	r5,-24484(gp)
     c60:	d0a81a17 	ldw	r2,-24472(gp)
     c64:	10c00144 	addi	r3,r2,5
     c68:	d0a81717 	ldw	r2,-24484(gp)
     c6c:	10800144 	addi	r2,r2,5
     c70:	d8000015 	stw	zero,0(sp)
     c74:	180d883a 	mov	r6,r3
     c78:	100f883a 	mov	r7,r2
     c7c:	000269c0 	call	269c <VGA_box>

	first = 1;
     c80:	00800044 	movi	r2,1
     c84:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	10800058 	cmpnei	r2,r2,1
     c90:	1000221e 	bne	r2,zero,d1c <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c94:	01000784 	movi	r4,30
     c98:	01400644 	movi	r5,25
     c9c:	018000b4 	movhi	r6,2
     ca0:	31be2c04 	addi	r6,r6,-1872
     ca4:	00027500 	call	2750 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ca8:	0009883a 	mov	r4,zero
     cac:	000b883a 	mov	r5,zero
     cb0:	018008c4 	movi	r6,35
     cb4:	000f883a 	mov	r7,zero
     cb8:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     cbc:	01000784 	movi	r4,30
     cc0:	01400644 	movi	r5,25
     cc4:	018000b4 	movhi	r6,2
     cc8:	31be3304 	addi	r6,r6,-1844
     ccc:	00027500 	call	2750 <VGA_text>
		ALT_x1 = 0;
     cd0:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     cd4:	00802944 	movi	r2,165
     cd8:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     cdc:	00801904 	movi	r2,100
     ce0:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = -1;
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     cec:	d0a81217 	ldw	r2,-24504(gp)
     cf0:	10800058 	cmpnei	r2,r2,1
     cf4:	1000031e 	bne	r2,zero,d04 <gescoord+0xc0>
			ALT_inc_y = -1;
     cf8:	00bfffc4 	movi	r2,-1
     cfc:	d0a81815 	stw	r2,-24480(gp)
     d00:	00000506 	br	d18 <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     d04:	d0a81217 	ldw	r2,-24504(gp)
     d08:	1000031e 	bne	r2,zero,d18 <gescoord+0xd4>
			ALT_inc_y = 1;
     d0c:	00800044 	movi	r2,1
     d10:	d0a81815 	stw	r2,-24480(gp)
     d14:	00004f06 	br	e54 <gescoord+0x210>
     d18:	00004e06 	br	e54 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     d1c:	e0bfff17 	ldw	r2,-4(fp)
     d20:	10800098 	cmpnei	r2,r2,2
     d24:	1000251e 	bne	r2,zero,dbc <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     d28:	01000784 	movi	r4,30
     d2c:	01400644 	movi	r5,25
     d30:	018000b4 	movhi	r6,2
     d34:	31be3a04 	addi	r6,r6,-1816
     d38:	00027500 	call	2750 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d3c:	0009883a 	mov	r4,zero
     d40:	000b883a 	mov	r5,zero
     d44:	018008c4 	movi	r6,35
     d48:	000f883a 	mov	r7,zero
     d4c:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d50:	01000784 	movi	r4,30
     d54:	01400644 	movi	r5,25
     d58:	018000b4 	movhi	r6,2
     d5c:	31be3304 	addi	r6,r6,-1844
     d60:	00027500 	call	2750 <VGA_text>
		ALT_x1 = 0;
     d64:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     d68:	00802944 	movi	r2,165
     d6c:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     d70:	00801904 	movi	r2,100
     d74:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = 1;
     d78:	00800044 	movi	r2,1
     d7c:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     d80:	d0a81217 	ldw	r2,-24504(gp)
     d84:	10800058 	cmpnei	r2,r2,1
     d88:	1000041e 	bne	r2,zero,d9c <gescoord+0x158>
			ALT_inc_y = 1;
     d8c:	00800044 	movi	r2,1
     d90:	d0a81815 	stw	r2,-24480(gp)
			random = 0;
     d94:	d0281215 	stw	zero,-24504(gp)
     d98:	00000706 	br	db8 <gescoord+0x174>
		}else if(random == 0){
     d9c:	d0a81217 	ldw	r2,-24504(gp)
     da0:	1000051e 	bne	r2,zero,db8 <gescoord+0x174>
			ALT_inc_y = -1;
     da4:	00bfffc4 	movi	r2,-1
     da8:	d0a81815 	stw	r2,-24480(gp)
			random = 1;
     dac:	00800044 	movi	r2,1
     db0:	d0a81215 	stw	r2,-24504(gp)
     db4:	00002706 	br	e54 <gescoord+0x210>
     db8:	00002606 	br	e54 <gescoord+0x210>
		}
	}else if(ID == 3){
     dbc:	e0bfff17 	ldw	r2,-4(fp)
     dc0:	108000d8 	cmpnei	r2,r2,3
     dc4:	1000231e 	bne	r2,zero,e54 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     dc8:	01000784 	movi	r4,30
     dcc:	01400644 	movi	r5,25
     dd0:	018000b4 	movhi	r6,2
     dd4:	31be4104 	addi	r6,r6,-1788
     dd8:	00027500 	call	2750 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ddc:	0009883a 	mov	r4,zero
     de0:	000b883a 	mov	r5,zero
     de4:	018008c4 	movi	r6,35
     de8:	000f883a 	mov	r7,zero
     dec:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     df0:	01000784 	movi	r4,30
     df4:	01400644 	movi	r5,25
     df8:	018000b4 	movhi	r6,2
     dfc:	31be4804 	addi	r6,r6,-1760
     e00:	00027500 	call	2750 <VGA_text>
		ALT_x1 = 0;
     e04:	d0281a15 	stw	zero,-24472(gp)
		ALT_x2 = 165;
     e08:	00802944 	movi	r2,165
     e0c:	d0a81c15 	stw	r2,-24464(gp)
		ALT_y = 100;
     e10:	00801904 	movi	r2,100
     e14:	d0a81715 	stw	r2,-24484(gp)
		ALT_inc_x = -1;
     e18:	00bfffc4 	movi	r2,-1
     e1c:	d0a81b15 	stw	r2,-24468(gp)
		if(random == 1){
     e20:	d0a81217 	ldw	r2,-24504(gp)
     e24:	10800058 	cmpnei	r2,r2,1
     e28:	1000041e 	bne	r2,zero,e3c <gescoord+0x1f8>
			ALT_inc_y = 1;
     e2c:	00800044 	movi	r2,1
     e30:	d0a81815 	stw	r2,-24480(gp)
			random = 0;
     e34:	d0281215 	stw	zero,-24504(gp)
     e38:	00000606 	br	e54 <gescoord+0x210>
		}else if(random == 0){
     e3c:	d0a81217 	ldw	r2,-24504(gp)
     e40:	1000041e 	bne	r2,zero,e54 <gescoord+0x210>
			ALT_inc_y = -1;
     e44:	00bfffc4 	movi	r2,-1
     e48:	d0a81815 	stw	r2,-24480(gp)
			random = 1;
     e4c:	00800044 	movi	r2,1
     e50:	d0a81215 	stw	r2,-24504(gp)
		}
	}

}
     e54:	e037883a 	mov	sp,fp
     e58:	dfc00117 	ldw	ra,4(sp)
     e5c:	df000017 	ldw	fp,0(sp)
     e60:	dec00204 	addi	sp,sp,8
     e64:	f800283a 	ret

00000e68 <endGame>:

void endGame(int ID) {
     e68:	defffb04 	addi	sp,sp,-20
     e6c:	dfc00415 	stw	ra,16(sp)
     e70:	df000315 	stw	fp,12(sp)
     e74:	df000304 	addi	fp,sp,12
     e78:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e7c:	010000b4 	movhi	r4,2
     e80:	213e4f04 	addi	r4,r4,-1732
     e84:	00031140 	call	3114 <puts>

	clearScreen();
     e88:	00020e00 	call	20e0 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e8c:	d0a80d17 	ldw	r2,-24524(gp)
     e90:	1009883a 	mov	r4,r2
     e94:	01400304 	movi	r5,12
     e98:	01800044 	movi	r6,1
     e9c:	e1fffe04 	addi	r7,fp,-8
     ea0:	00163dc0 	call	163dc <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     ea4:	d0a80b17 	ldw	r2,-24532(gp)
     ea8:	1009883a 	mov	r4,r2
     eac:	01400084 	movi	r5,2
     eb0:	01800044 	movi	r6,1
     eb4:	e1fffe04 	addi	r7,fp,-8
     eb8:	00163dc0 	call	163dc <OSFlagPost>


	if(ID == 1){
     ebc:	e0bfff17 	ldw	r2,-4(fp)
     ec0:	10800058 	cmpnei	r2,r2,1
     ec4:	1000101e 	bne	r2,zero,f08 <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     ec8:	010008c4 	movi	r4,35
     ecc:	01400644 	movi	r5,25
     ed0:	018000b4 	movhi	r6,2
     ed4:	31be5204 	addi	r6,r6,-1720
     ed8:	00027500 	call	2750 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     edc:	0009883a 	mov	r4,zero
     ee0:	000b883a 	mov	r5,zero
     ee4:	01800a04 	movi	r6,40
     ee8:	000f883a 	mov	r7,zero
     eec:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     ef0:	010008c4 	movi	r4,35
     ef4:	01400644 	movi	r5,25
     ef8:	018000b4 	movhi	r6,2
     efc:	31be5604 	addi	r6,r6,-1704
     f00:	00027500 	call	2750 <VGA_text>
     f04:	00001206 	br	f50 <endGame+0xe8>
	} else if(ID == 2){
     f08:	e0bfff17 	ldw	r2,-4(fp)
     f0c:	10800098 	cmpnei	r2,r2,2
     f10:	10000f1e 	bne	r2,zero,f50 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     f14:	010008c4 	movi	r4,35
     f18:	01400644 	movi	r5,25
     f1c:	018000b4 	movhi	r6,2
     f20:	31be5a04 	addi	r6,r6,-1688
     f24:	00027500 	call	2750 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     f28:	0009883a 	mov	r4,zero
     f2c:	000b883a 	mov	r5,zero
     f30:	01800a04 	movi	r6,40
     f34:	000f883a 	mov	r7,zero
     f38:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f3c:	010008c4 	movi	r4,35
     f40:	01400644 	movi	r5,25
     f44:	018000b4 	movhi	r6,2
     f48:	31be5604 	addi	r6,r6,-1704
     f4c:	00027500 	call	2750 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f50:	d0a80d17 	ldw	r2,-24524(gp)
     f54:	1009883a 	mov	r4,r2
     f58:	01400444 	movi	r5,17
     f5c:	000d883a 	mov	r6,zero
     f60:	e1fffe04 	addi	r7,fp,-8
     f64:	00163dc0 	call	163dc <OSFlagPost>

	teken_menu(2);
     f68:	01000084 	movi	r4,2
     f6c:	00022a00 	call	22a0 <teken_menu>
	deleteNummer();
     f70:	00028f40 	call	28f4 <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f74:	d1281a17 	ldw	r4,-24472(gp)
     f78:	d1681717 	ldw	r5,-24484(gp)
     f7c:	d0a81a17 	ldw	r2,-24472(gp)
     f80:	10c00144 	addi	r3,r2,5
     f84:	d0a81717 	ldw	r2,-24484(gp)
     f88:	10800144 	addi	r2,r2,5
     f8c:	d8000015 	stw	zero,0(sp)
     f90:	180d883a 	mov	r6,r3
     f94:	100f883a 	mov	r7,r2
     f98:	000269c0 	call	269c <VGA_box>

	ALT_x1 = 0;
     f9c:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
     fa0:	00802944 	movi	r2,165
     fa4:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
     fa8:	00801904 	movi	r2,100
     fac:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
     fb0:	00800044 	movi	r2,1
     fb4:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
     fb8:	00800044 	movi	r2,1
     fbc:	d0a81815 	stw	r2,-24480(gp)

	check = 1;
     fc0:	00800044 	movi	r2,1
     fc4:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     fc8:	00800044 	movi	r2,1
     fcc:	d0a00015 	stw	r2,-32768(gp)

}
     fd0:	e037883a 	mov	sp,fp
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	df000017 	ldw	fp,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret

00000fe4 <endSingleplayer>:

void endSingleplayer(){
     fe4:	defffc04 	addi	sp,sp,-16
     fe8:	dfc00315 	stw	ra,12(sp)
     fec:	df000215 	stw	fp,8(sp)
     ff0:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
     ff4:	010000b4 	movhi	r4,2
     ff8:	213e5e04 	addi	r4,r4,-1672
     ffc:	00031140 	call	3114 <puts>

	//clearScreen();

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1000:	d0a80d17 	ldw	r2,-24524(gp)
    1004:	1009883a 	mov	r4,r2
    1008:	01400104 	movi	r5,4
    100c:	01800044 	movi	r6,1
    1010:	e1ffff04 	addi	r7,fp,-4
    1014:	00163dc0 	call	163dc <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    1018:	010008c4 	movi	r4,35
    101c:	01400644 	movi	r5,25
    1020:	018000b4 	movhi	r6,2
    1024:	31be6304 	addi	r6,r6,-1652
    1028:	00027500 	call	2750 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    102c:	0009883a 	mov	r4,zero
    1030:	000b883a 	mov	r5,zero
    1034:	01800a04 	movi	r6,40
    1038:	000f883a 	mov	r7,zero
    103c:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1040:	010008c4 	movi	r4,35
    1044:	01400644 	movi	r5,25
    1048:	018000b4 	movhi	r6,2
    104c:	31be6604 	addi	r6,r6,-1640
    1050:	00027500 	call	2750 <VGA_text>


	VGA_text(6,5, "           ");
    1054:	01000184 	movi	r4,6
    1058:	01400144 	movi	r5,5
    105c:	018000b4 	movhi	r6,2
    1060:	31be6904 	addi	r6,r6,-1628
    1064:	00027500 	call	2750 <VGA_text>


	teken_menu(1);
    1068:	01000044 	movi	r4,1
    106c:	00022a00 	call	22a0 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1070:	d8000015 	stw	zero,0(sp)
    1074:	01004f04 	movi	r4,316
    1078:	01400104 	movi	r5,4
    107c:	01804fc4 	movi	r6,319
    1080:	01c03ac4 	movi	r7,235
    1084:	000269c0 	call	269c <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1088:	d1281a17 	ldw	r4,-24472(gp)
    108c:	d1681717 	ldw	r5,-24484(gp)
    1090:	d0a81a17 	ldw	r2,-24472(gp)
    1094:	10c00144 	addi	r3,r2,5
    1098:	d0a81717 	ldw	r2,-24484(gp)
    109c:	10800144 	addi	r2,r2,5
    10a0:	d8000015 	stw	zero,0(sp)
    10a4:	180d883a 	mov	r6,r3
    10a8:	100f883a 	mov	r7,r2
    10ac:	000269c0 	call	269c <VGA_box>
	deleteNummer();
    10b0:	00028f40 	call	28f4 <deleteNummer>


	ALT_x1 = 0;
    10b4:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    10b8:	00802944 	movi	r2,165
    10bc:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    10c0:	00801904 	movi	r2,100
    10c4:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    10c8:	00bfffc4 	movi	r2,-1
    10cc:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    10d0:	00800044 	movi	r2,1
    10d4:	d0a81815 	stw	r2,-24480(gp)

	leven = beginLevens;
    10d8:	008000c4 	movi	r2,3
    10dc:	d0a00215 	stw	r2,-32760(gp)
	score3 = 0;
    10e0:	d0281115 	stw	zero,-24508(gp)
	first = 1;
    10e4:	00800044 	movi	r2,1
    10e8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    10ec:	d0a80d17 	ldw	r2,-24524(gp)
    10f0:	1009883a 	mov	r4,r2
    10f4:	01400444 	movi	r5,17
    10f8:	000d883a 	mov	r6,zero
    10fc:	e1ffff04 	addi	r7,fp,-4
    1100:	00163dc0 	call	163dc <OSFlagPost>

	OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1104:	d0a80b17 	ldw	r2,-24532(gp)
    1108:	1009883a 	mov	r4,r2
    110c:	01400804 	movi	r5,32
    1110:	01800044 	movi	r6,1
    1114:	e1ffff04 	addi	r7,fp,-4
    1118:	00163dc0 	call	163dc <OSFlagPost>

}
    111c:	e037883a 	mov	sp,fp
    1120:	dfc00117 	ldw	ra,4(sp)
    1124:	df000017 	ldw	fp,0(sp)
    1128:	dec00204 	addi	sp,sp,8
    112c:	f800283a 	ret

00001130 <Singleplayer>:

void Singleplayer(void* pdata){
    1130:	defff704 	addi	sp,sp,-36
    1134:	dfc00815 	stw	ra,32(sp)
    1138:	df000715 	stw	fp,28(sp)
    113c:	df000704 	addi	fp,sp,28
    1140:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1144:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    1148:	00802944 	movi	r2,165
    114c:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    1150:	00801904 	movi	r2,100
    1154:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    1158:	00bfffc4 	movi	r2,-1
    115c:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    1160:	00800044 	movi	r2,1
    1164:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 315;
    1168:	00804ec4 	movi	r2,315
    116c:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    1170:	00803984 	movi	r2,230
    1174:	d0a81315 	stw	r2,-24500(gp)
	int q;
	Balk * balkje;
	
	char levens[10];

	score3 = 0;
    1178:	d0281115 	stw	zero,-24508(gp)
	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    117c:	d0e80b17 	ldw	r3,-24532(gp)
    1180:	e0bffc04 	addi	r2,fp,-16
    1184:	d8800015 	stw	r2,0(sp)
    1188:	1809883a 	mov	r4,r3
    118c:	01400804 	movi	r5,32
    1190:	000d883a 	mov	r6,zero
    1194:	000f883a 	mov	r7,zero
    1198:	0015d840 	call	15d84 <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    119c:	d0e80e17 	ldw	r3,-24520(gp)
    11a0:	e0bffc04 	addi	r2,fp,-16
    11a4:	1809883a 	mov	r4,r3
    11a8:	000b883a 	mov	r5,zero
    11ac:	100d883a 	mov	r6,r2
    11b0:	001707c0 	call	1707c <OSMboxPend>
    11b4:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    11b8:	d1281a17 	ldw	r4,-24472(gp)
    11bc:	d1681717 	ldw	r5,-24484(gp)
    11c0:	d0a81a17 	ldw	r2,-24472(gp)
    11c4:	10c00144 	addi	r3,r2,5
    11c8:	d0a81717 	ldw	r2,-24484(gp)
    11cc:	10800144 	addi	r2,r2,5
    11d0:	d8000015 	stw	zero,0(sp)
    11d4:	180d883a 	mov	r6,r3
    11d8:	100f883a 	mov	r7,r2
    11dc:	000269c0 	call	269c <VGA_box>

		if (first == 1) {
    11e0:	d0a00017 	ldw	r2,-32768(gp)
    11e4:	10800058 	cmpnei	r2,r2,1
    11e8:	1000201e 	bne	r2,zero,126c <Singleplayer+0x13c>
			printf("FIRST");
    11ec:	010000b4 	movhi	r4,2
    11f0:	213e6c04 	addi	r4,r4,-1616
    11f4:	00030300 	call	3030 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    11f8:	d0a81a17 	ldw	r2,-24472(gp)
    11fc:	10c02804 	addi	r3,r2,160
    1200:	d0a81b17 	ldw	r2,-24468(gp)
    1204:	1885883a 	add	r2,r3,r2
    1208:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    120c:	d0e81c17 	ldw	r3,-24464(gp)
    1210:	d0a81b17 	ldw	r2,-24468(gp)
    1214:	1885883a 	add	r2,r3,r2
    1218:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    121c:	d0e81717 	ldw	r3,-24484(gp)
    1220:	d0a81817 	ldw	r2,-24480(gp)
    1224:	1885883a 	add	r2,r3,r2
    1228:	d0a81715 	stw	r2,-24484(gp)

			del_middenlijn();
    122c:	00028480 	call	2848 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1230:	0081a5c4 	movi	r2,1687
    1234:	d8800015 	stw	r2,0(sp)
    1238:	01004f04 	movi	r4,316
    123c:	000b883a 	mov	r5,zero
    1240:	01804fc4 	movi	r6,319
    1244:	01c03bc4 	movi	r7,239
    1248:	000269c0 	call	269c <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    124c:	d8000015 	stw	zero,0(sp)
    1250:	01004b04 	movi	r4,300
    1254:	01400104 	movi	r5,4
    1258:	01804c44 	movi	r6,305
    125c:	01c03ac4 	movi	r7,235
    1260:	000269c0 	call	269c <VGA_box>

			first = 0;
    1264:	d0200015 	stw	zero,-32768(gp)
    1268:	00000c06 	br	129c <Singleplayer+0x16c>
		} else {
			ALT_x1 += ALT_inc_x;
    126c:	d0e81a17 	ldw	r3,-24472(gp)
    1270:	d0a81b17 	ldw	r2,-24468(gp)
    1274:	1885883a 	add	r2,r3,r2
    1278:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    127c:	d0e81c17 	ldw	r3,-24464(gp)
    1280:	d0a81b17 	ldw	r2,-24468(gp)
    1284:	1885883a 	add	r2,r3,r2
    1288:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    128c:	d0e81717 	ldw	r3,-24484(gp)
    1290:	d0a81817 	ldw	r2,-24480(gp)
    1294:	1885883a 	add	r2,r3,r2
    1298:	d0a81715 	stw	r2,-24484(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    129c:	d0e81717 	ldw	r3,-24484(gp)
    12a0:	d0a81317 	ldw	r2,-24500(gp)
    12a4:	18800326 	beq	r3,r2,12b4 <Singleplayer+0x184>
    12a8:	d0a81717 	ldw	r2,-24484(gp)
    12ac:	10800118 	cmpnei	r2,r2,4
    12b0:	1000031e 	bne	r2,zero,12c0 <Singleplayer+0x190>
			ALT_inc_y = -(ALT_inc_y);
    12b4:	d0a81817 	ldw	r2,-24480(gp)
    12b8:	0085c83a 	sub	r2,zero,r2
    12bc:	d0a81815 	stw	r2,-24480(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    12c0:	d0e81c17 	ldw	r3,-24464(gp)
    12c4:	d0a81517 	ldw	r2,-24492(gp)
    12c8:	1880071e 	bne	r3,r2,12e8 <Singleplayer+0x1b8>
			ALT_inc_x = -(ALT_inc_x);
    12cc:	d0a81b17 	ldw	r2,-24468(gp)
    12d0:	0085c83a 	sub	r2,zero,r2
    12d4:	d0a81b15 	stw	r2,-24468(gp)
			deleteNummer();
    12d8:	00028f40 	call	28f4 <deleteNummer>
			score3++;
    12dc:	d0a81117 	ldw	r2,-24508(gp)
    12e0:	10800044 	addi	r2,r2,1
    12e4:	d0a81115 	stw	r2,-24508(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    12e8:	d1281a17 	ldw	r4,-24472(gp)
    12ec:	d1681717 	ldw	r5,-24484(gp)
    12f0:	d0a81a17 	ldw	r2,-24472(gp)
    12f4:	11800144 	addi	r6,r2,5
    12f8:	d0a81717 	ldw	r2,-24484(gp)
    12fc:	10c00144 	addi	r3,r2,5
    1300:	00804034 	movhi	r2,256
    1304:	10bfffc4 	addi	r2,r2,-1
    1308:	d8800015 	stw	r2,0(sp)
    130c:	180f883a 	mov	r7,r3
    1310:	000269c0 	call	269c <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    1314:	d0a81a17 	ldw	r2,-24472(gp)
    1318:	1000051e 	bne	r2,zero,1330 <Singleplayer+0x200>
			leven--;
    131c:	d0a00217 	ldw	r2,-32760(gp)
    1320:	10bfffc4 	addi	r2,r2,-1
    1324:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    1328:	010000c4 	movi	r4,3
    132c:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1330:	d0a81a17 	ldw	r2,-24472(gp)
    1334:	10800558 	cmpnei	r2,r2,21
    1338:	10000c1e 	bne	r2,zero,136c <Singleplayer+0x23c>
    133c:	e0bffb17 	ldw	r2,-20(fp)
    1340:	10c00017 	ldw	r3,0(r2)
    1344:	d0a81717 	ldw	r2,-24484(gp)
    1348:	1880080e 	bge	r3,r2,136c <Singleplayer+0x23c>
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	10800017 	ldw	r2,0(r2)
    1354:	10800c84 	addi	r2,r2,50
    1358:	d0e81717 	ldw	r3,-24484(gp)
    135c:	1880030e 	bge	r3,r2,136c <Singleplayer+0x23c>
			ALT_inc_x = -(ALT_inc_x);
    1360:	d0a81b17 	ldw	r2,-24468(gp)
    1364:	0085c83a 	sub	r2,zero,r2
    1368:	d0a81b15 	stw	r2,-24468(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    136c:	d0a81a17 	ldw	r2,-24472(gp)
    1370:	10800608 	cmpgei	r2,r2,24
    1374:	10000a1e 	bne	r2,zero,13a0 <Singleplayer+0x270>
    1378:	d0a81a17 	ldw	r2,-24472(gp)
    137c:	10800590 	cmplti	r2,r2,22
    1380:	1000071e 	bne	r2,zero,13a0 <Singleplayer+0x270>
    1384:	e0bffb17 	ldw	r2,-20(fp)
    1388:	10c00017 	ldw	r3,0(r2)
    138c:	d0a81717 	ldw	r2,-24484(gp)
    1390:	1880031e 	bne	r3,r2,13a0 <Singleplayer+0x270>
			ALT_inc_y = -(ALT_inc_y);
    1394:	d0a81817 	ldw	r2,-24480(gp)
    1398:	0085c83a 	sub	r2,zero,r2
    139c:	d0a81815 	stw	r2,-24480(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    13a0:	d0a81a17 	ldw	r2,-24472(gp)
    13a4:	10800608 	cmpgei	r2,r2,24
    13a8:	10000b1e 	bne	r2,zero,13d8 <Singleplayer+0x2a8>
    13ac:	d0a81a17 	ldw	r2,-24472(gp)
    13b0:	10800590 	cmplti	r2,r2,22
    13b4:	1000081e 	bne	r2,zero,13d8 <Singleplayer+0x2a8>
    13b8:	e0bffb17 	ldw	r2,-20(fp)
    13bc:	10800017 	ldw	r2,0(r2)
    13c0:	10c00c84 	addi	r3,r2,50
    13c4:	d0a81717 	ldw	r2,-24484(gp)
    13c8:	1880031e 	bne	r3,r2,13d8 <Singleplayer+0x2a8>
			ALT_inc_y = -(ALT_inc_y);
    13cc:	d0a81817 	ldw	r2,-24480(gp)
    13d0:	0085c83a 	sub	r2,zero,r2
    13d4:	d0a81815 	stw	r2,-24480(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    13d8:	d0a00217 	ldw	r2,-32760(gp)
    13dc:	e0fffc44 	addi	r3,fp,-15
    13e0:	1809883a 	mov	r4,r3
    13e4:	014000b4 	movhi	r5,2
    13e8:	297e6e04 	addi	r5,r5,-1608
    13ec:	100d883a 	mov	r6,r2
    13f0:	00031800 	call	3180 <sprintf>
		VGA_text(6,5, levens);
    13f4:	e0bffc44 	addi	r2,fp,-15
    13f8:	01000184 	movi	r4,6
    13fc:	01400144 	movi	r5,5
    1400:	100d883a 	mov	r6,r2
    1404:	00027500 	call	2750 <VGA_text>
		OSTimeDly(1);
    1408:	01000044 	movi	r4,1
    140c:	001b5980 	call	1b598 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    1410:	e03ffa15 	stw	zero,-24(fp)
    1414:	00004a06 	br	1540 <Singleplayer+0x410>

			if(score3 == i){
    1418:	d0e81117 	ldw	r3,-24508(gp)
    141c:	e0bffa17 	ldw	r2,-24(fp)
    1420:	18803c1e 	bne	r3,r2,1514 <Singleplayer+0x3e4>

				if (score3 >= 0 && score3 <= 9){
    1424:	d0a81117 	ldw	r2,-24508(gp)
    1428:	10000716 	blt	r2,zero,1448 <Singleplayer+0x318>
    142c:	d0a81117 	ldw	r2,-24508(gp)
    1430:	10800288 	cmpgei	r2,r2,10
    1434:	1000041e 	bne	r2,zero,1448 <Singleplayer+0x318>
					draw_number(i, 3);
    1438:	e13ffa17 	ldw	r4,-24(fp)
    143c:	014000c4 	movi	r5,3
    1440:	00029300 	call	2930 <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    1444:	00003306 	br	1514 <Singleplayer+0x3e4>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1448:	d0a81117 	ldw	r2,-24508(gp)
    144c:	10800290 	cmplti	r2,r2,10
    1450:	1000121e 	bne	r2,zero,149c <Singleplayer+0x36c>
    1454:	d0a81117 	ldw	r2,-24508(gp)
    1458:	10801908 	cmpgei	r2,r2,100
    145c:	10000f1e 	bne	r2,zero,149c <Singleplayer+0x36c>
					draw_number(i /10 , 2);
    1460:	e0fffa17 	ldw	r3,-24(fp)
    1464:	00800284 	movi	r2,10
    1468:	1885283a 	div	r2,r3,r2
    146c:	1009883a 	mov	r4,r2
    1470:	01400084 	movi	r5,2
    1474:	00029300 	call	2930 <draw_number>
					draw_number(i %10, 3);
    1478:	e0bffa17 	ldw	r2,-24(fp)
    147c:	00c00284 	movi	r3,10
    1480:	10c7283a 	div	r3,r2,r3
    1484:	18c002a4 	muli	r3,r3,10
    1488:	10c5c83a 	sub	r2,r2,r3
    148c:	1009883a 	mov	r4,r2
    1490:	014000c4 	movi	r5,3
    1494:	00029300 	call	2930 <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1498:	00001e06 	br	1514 <Singleplayer+0x3e4>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    149c:	d0a81117 	ldw	r2,-24508(gp)
    14a0:	10801910 	cmplti	r2,r2,100
    14a4:	10001b1e 	bne	r2,zero,1514 <Singleplayer+0x3e4>
    14a8:	d0a81117 	ldw	r2,-24508(gp)
    14ac:	1080fa08 	cmpgei	r2,r2,1000
    14b0:	1000181e 	bne	r2,zero,1514 <Singleplayer+0x3e4>
					draw_number(i /100 , 1);
    14b4:	e0fffa17 	ldw	r3,-24(fp)
    14b8:	00801904 	movi	r2,100
    14bc:	1885283a 	div	r2,r3,r2
    14c0:	1009883a 	mov	r4,r2
    14c4:	01400044 	movi	r5,1
    14c8:	00029300 	call	2930 <draw_number>
					draw_number(i /10 %10, 2);
    14cc:	e0fffa17 	ldw	r3,-24(fp)
    14d0:	00800284 	movi	r2,10
    14d4:	1885283a 	div	r2,r3,r2
    14d8:	00c00284 	movi	r3,10
    14dc:	10c7283a 	div	r3,r2,r3
    14e0:	18c002a4 	muli	r3,r3,10
    14e4:	10c5c83a 	sub	r2,r2,r3
    14e8:	1009883a 	mov	r4,r2
    14ec:	01400084 	movi	r5,2
    14f0:	00029300 	call	2930 <draw_number>
					draw_number(i %10, 3);
    14f4:	e0bffa17 	ldw	r2,-24(fp)
    14f8:	00c00284 	movi	r3,10
    14fc:	10c7283a 	div	r3,r2,r3
    1500:	18c002a4 	muli	r3,r3,10
    1504:	10c5c83a 	sub	r2,r2,r3
    1508:	1009883a 	mov	r4,r2
    150c:	014000c4 	movi	r5,3
    1510:	00029300 	call	2930 <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    1514:	d0a81117 	ldw	r2,-24508(gp)
    1518:	1080f9e0 	cmpeqi	r2,r2,999
    151c:	1000021e 	bne	r2,zero,1528 <Singleplayer+0x3f8>
    1520:	d0a00217 	ldw	r2,-32760(gp)
    1524:	1000031e 	bne	r2,zero,1534 <Singleplayer+0x404>
				leven = 0;
    1528:	d0200215 	stw	zero,-32760(gp)
				score3 =0;
    152c:	d0281115 	stw	zero,-24508(gp)

				endSingleplayer();
    1530:	0000fe40 	call	fe4 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    1534:	e0bffa17 	ldw	r2,-24(fp)
    1538:	10800044 	addi	r2,r2,1
    153c:	e0bffa15 	stw	r2,-24(fp)
    1540:	e0bffa17 	ldw	r2,-24(fp)
    1544:	1080fa10 	cmplti	r2,r2,1000
    1548:	103fb31e 	bne	r2,zero,1418 <__alt_mem_Flash_flash_data+0xf4001418>





	}
    154c:	003f0b06 	br	117c <__alt_mem_Flash_flash_data+0xf400117c>

00001550 <tutorialUitleg>:
	
}

void tutorialUitleg(){
    1550:	defffe04 	addi	sp,sp,-8
    1554:	dfc00115 	stw	ra,4(sp)
    1558:	df000015 	stw	fp,0(sp)
    155c:	d839883a 	mov	fp,sp
	INT8U err;
	
	VGA_text(10, 5, "Er zijn twee soorten spellen: Singleplayer en Multiplayer.");
    1560:	01000284 	movi	r4,10
    1564:	01400144 	movi	r5,5
    1568:	018000b4 	movhi	r6,2
    156c:	31be7104 	addi	r6,r6,-1596
    1570:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 7, "In Singleplayer speel je tegen de computer, waarbij je");
    1574:	01000284 	movi	r4,10
    1578:	014001c4 	movi	r5,7
    157c:	018000b4 	movhi	r6,2
    1580:	31be8004 	addi	r6,r6,-1536
    1584:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 8, "zoveel mogelijk aantal punten moet bereiken door de bal");
    1588:	01000284 	movi	r4,10
    158c:	01400204 	movi	r5,8
    1590:	018000b4 	movhi	r6,2
    1594:	31be8e04 	addi	r6,r6,-1480
    1598:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 9, "tegen de muur te kaatsen. Hierbij heb je 3 levens.");
    159c:	01000284 	movi	r4,10
    15a0:	01400244 	movi	r5,9
    15a4:	018000b4 	movhi	r6,2
    15a8:	31be9c04 	addi	r6,r6,-1424
    15ac:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 11, "In Multiplayer gaat het er om dat je de bal in het doel");
    15b0:	01000284 	movi	r4,10
    15b4:	014002c4 	movi	r5,11
    15b8:	018000b4 	movhi	r6,2
    15bc:	31bea904 	addi	r6,r6,-1372
    15c0:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 12, "van de tegenstander krijgt. Het doel bevindt zich achter");
    15c4:	01000284 	movi	r4,10
    15c8:	01400304 	movi	r5,12
    15cc:	018000b4 	movhi	r6,2
    15d0:	31beb704 	addi	r6,r6,-1316
    15d4:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 13, "het balkje van de tegenstander. Wanneer je scoort krijg je");
    15d8:	01000284 	movi	r4,10
    15dc:	01400344 	movi	r5,13
    15e0:	018000b4 	movhi	r6,2
    15e4:	31bec604 	addi	r6,r6,-1256
    15e8:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 14, "1 punt.");
    15ec:	01000284 	movi	r4,10
    15f0:	01400384 	movi	r5,14
    15f4:	018000b4 	movhi	r6,2
    15f8:	31bed504 	addi	r6,r6,-1196
    15fc:	00027500 	call	2750 <VGA_text>
	
	VGA_text(10, 38, "De besturing gaat als volgt:");
    1600:	01000284 	movi	r4,10
    1604:	01400984 	movi	r5,38
    1608:	018000b4 	movhi	r6,2
    160c:	31bed704 	addi	r6,r6,-1188
    1610:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 40, "De linker balk wordt bestuurd door het op en neer bewegen");
    1614:	01000284 	movi	r4,10
    1618:	01400a04 	movi	r5,40
    161c:	018000b4 	movhi	r6,2
    1620:	31bedf04 	addi	r6,r6,-1156
    1624:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 41, "van switch 17. Bij de multiplayer wordt ook nog vereist om");
    1628:	01000284 	movi	r4,10
    162c:	01400a44 	movi	r5,41
    1630:	018000b4 	movhi	r6,2
    1634:	31beee04 	addi	r6,r6,-1096
    1638:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 42, "de linker knop in te houden, anders ben je af. Dit geldt ook");
    163c:	01000284 	movi	r4,10
    1640:	01400a84 	movi	r5,42
    1644:	018000b4 	movhi	r6,2
    1648:	31befd04 	addi	r6,r6,-1036
    164c:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 43, "voor de rechter knop voor de rechter balk.");
    1650:	01000284 	movi	r4,10
    1654:	01400ac4 	movi	r5,43
    1658:	018000b4 	movhi	r6,2
    165c:	31bf0d04 	addi	r6,r6,-972
    1660:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 45, "De rechter balk wordt bestuurd KEY3 en KEY2. KEY3 = omlaag,");
    1664:	01000284 	movi	r4,10
    1668:	01400b44 	movi	r5,45
    166c:	018000b4 	movhi	r6,2
    1670:	31bf1804 	addi	r6,r6,-928
    1674:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 46, "KEY2 = omhoog.");
    1678:	01000284 	movi	r4,10
    167c:	01400b84 	movi	r5,46
    1680:	018000b4 	movhi	r6,2
    1684:	31bf2704 	addi	r6,r6,-868
    1688:	00027500 	call	2750 <VGA_text>
}
    168c:	e037883a 	mov	sp,fp
    1690:	dfc00117 	ldw	ra,4(sp)
    1694:	df000017 	ldw	fp,0(sp)
    1698:	dec00204 	addi	sp,sp,8
    169c:	f800283a 	ret

000016a0 <endTutorial>:

void endTutorial(){
    16a0:	defffc04 	addi	sp,sp,-16
    16a4:	dfc00315 	stw	ra,12(sp)
    16a8:	df000215 	stw	fp,8(sp)
    16ac:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    16b0:	010000b4 	movhi	r4,2
    16b4:	213f2b04 	addi	r4,r4,-852
    16b8:	00031140 	call	3114 <puts>

	//clearScreen();
	VGA_text(10, 5, "                                                                              ");
    16bc:	01000284 	movi	r4,10
    16c0:	01400144 	movi	r5,5
    16c4:	018000b4 	movhi	r6,2
    16c8:	31bf2f04 	addi	r6,r6,-836
    16cc:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 6, "                                                                              ");
    16d0:	01000284 	movi	r4,10
    16d4:	01400184 	movi	r5,6
    16d8:	018000b4 	movhi	r6,2
    16dc:	31bf2f04 	addi	r6,r6,-836
    16e0:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 7, "                                                                              ");
    16e4:	01000284 	movi	r4,10
    16e8:	014001c4 	movi	r5,7
    16ec:	018000b4 	movhi	r6,2
    16f0:	31bf2f04 	addi	r6,r6,-836
    16f4:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 8, "                                                                              ");
    16f8:	01000284 	movi	r4,10
    16fc:	01400204 	movi	r5,8
    1700:	018000b4 	movhi	r6,2
    1704:	31bf2f04 	addi	r6,r6,-836
    1708:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 9, "                                                                              ");
    170c:	01000284 	movi	r4,10
    1710:	01400244 	movi	r5,9
    1714:	018000b4 	movhi	r6,2
    1718:	31bf2f04 	addi	r6,r6,-836
    171c:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 11, "                                                                              ");
    1720:	01000284 	movi	r4,10
    1724:	014002c4 	movi	r5,11
    1728:	018000b4 	movhi	r6,2
    172c:	31bf2f04 	addi	r6,r6,-836
    1730:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 12, "                                                                              ");
    1734:	01000284 	movi	r4,10
    1738:	01400304 	movi	r5,12
    173c:	018000b4 	movhi	r6,2
    1740:	31bf2f04 	addi	r6,r6,-836
    1744:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 13, "                                                                              ");
    1748:	01000284 	movi	r4,10
    174c:	01400344 	movi	r5,13
    1750:	018000b4 	movhi	r6,2
    1754:	31bf2f04 	addi	r6,r6,-836
    1758:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 14, "                                                                              ");
    175c:	01000284 	movi	r4,10
    1760:	01400384 	movi	r5,14
    1764:	018000b4 	movhi	r6,2
    1768:	31bf2f04 	addi	r6,r6,-836
    176c:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 38, "                                                                              ");
    1770:	01000284 	movi	r4,10
    1774:	01400984 	movi	r5,38
    1778:	018000b4 	movhi	r6,2
    177c:	31bf2f04 	addi	r6,r6,-836
    1780:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 40, "                                                                              ");
    1784:	01000284 	movi	r4,10
    1788:	01400a04 	movi	r5,40
    178c:	018000b4 	movhi	r6,2
    1790:	31bf2f04 	addi	r6,r6,-836
    1794:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 41, "                                                                              ");
    1798:	01000284 	movi	r4,10
    179c:	01400a44 	movi	r5,41
    17a0:	018000b4 	movhi	r6,2
    17a4:	31bf2f04 	addi	r6,r6,-836
    17a8:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 42, "                                                                              ");
    17ac:	01000284 	movi	r4,10
    17b0:	01400a84 	movi	r5,42
    17b4:	018000b4 	movhi	r6,2
    17b8:	31bf2f04 	addi	r6,r6,-836
    17bc:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 43, "                                                                              ");
    17c0:	01000284 	movi	r4,10
    17c4:	01400ac4 	movi	r5,43
    17c8:	018000b4 	movhi	r6,2
    17cc:	31bf2f04 	addi	r6,r6,-836
    17d0:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 45, "                                                                              ");
    17d4:	01000284 	movi	r4,10
    17d8:	01400b44 	movi	r5,45
    17dc:	018000b4 	movhi	r6,2
    17e0:	31bf2f04 	addi	r6,r6,-836
    17e4:	00027500 	call	2750 <VGA_text>
	VGA_text(10, 46, "                                                                              ");
    17e8:	01000284 	movi	r4,10
    17ec:	01400b84 	movi	r5,46
    17f0:	018000b4 	movhi	r6,2
    17f4:	31bf2f04 	addi	r6,r6,-836
    17f8:	00027500 	call	2750 <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    17fc:	d0a80d17 	ldw	r2,-24524(gp)
    1800:	1009883a 	mov	r4,r2
    1804:	01400104 	movi	r5,4
    1808:	01800044 	movi	r6,1
    180c:	e1ffff04 	addi	r7,fp,-4
    1810:	00163dc0 	call	163dc <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    1814:	010008c4 	movi	r4,35
    1818:	01400644 	movi	r5,25
    181c:	018000b4 	movhi	r6,2
    1820:	31bf4304 	addi	r6,r6,-756
    1824:	00027500 	call	2750 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1828:	0009883a 	mov	r4,zero
    182c:	000b883a 	mov	r5,zero
    1830:	01800a04 	movi	r6,40
    1834:	000f883a 	mov	r7,zero
    1838:	001b6e00 	call	1b6e0 <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    183c:	010008c4 	movi	r4,35
    1840:	01400644 	movi	r5,25
    1844:	018000b4 	movhi	r6,2
    1848:	31bf4704 	addi	r6,r6,-740
    184c:	00027500 	call	2750 <VGA_text>




	teken_menu(4);
    1850:	01000104 	movi	r4,4
    1854:	00022a00 	call	22a0 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    1858:	d8000015 	stw	zero,0(sp)
    185c:	01004f04 	movi	r4,316
    1860:	01400104 	movi	r5,4
    1864:	01804fc4 	movi	r6,319
    1868:	01c03ac4 	movi	r7,235
    186c:	000269c0 	call	269c <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1870:	d1281a17 	ldw	r4,-24472(gp)
    1874:	d1681717 	ldw	r5,-24484(gp)
    1878:	d0a81a17 	ldw	r2,-24472(gp)
    187c:	10c00144 	addi	r3,r2,5
    1880:	d0a81717 	ldw	r2,-24484(gp)
    1884:	10800144 	addi	r2,r2,5
    1888:	d8000015 	stw	zero,0(sp)
    188c:	180d883a 	mov	r6,r3
    1890:	100f883a 	mov	r7,r2
    1894:	000269c0 	call	269c <VGA_box>


	ALT_x1 = 0;
    1898:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    189c:	00802944 	movi	r2,165
    18a0:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    18a4:	00801904 	movi	r2,100
    18a8:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = -1;
    18ac:	00bfffc4 	movi	r2,-1
    18b0:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    18b4:	00800044 	movi	r2,1
    18b8:	d0a81815 	stw	r2,-24480(gp)

	first = 1;
    18bc:	00800044 	movi	r2,1
    18c0:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    18c4:	d0a80d17 	ldw	r2,-24524(gp)
    18c8:	1009883a 	mov	r4,r2
    18cc:	01400444 	movi	r5,17
    18d0:	000d883a 	mov	r6,zero
    18d4:	e1ffff04 	addi	r7,fp,-4
    18d8:	00163dc0 	call	163dc <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    18dc:	d0a81017 	ldw	r2,-24512(gp)
    18e0:	1009883a 	mov	r4,r2
    18e4:	01401004 	movi	r5,64
    18e8:	01800044 	movi	r6,1
    18ec:	e1ffff04 	addi	r7,fp,-4
    18f0:	00163dc0 	call	163dc <OSFlagPost>

}
    18f4:	e037883a 	mov	sp,fp
    18f8:	dfc00117 	ldw	ra,4(sp)
    18fc:	df000017 	ldw	fp,0(sp)
    1900:	dec00204 	addi	sp,sp,8
    1904:	f800283a 	ret

00001908 <Tutorial>:

void Tutorial(void* pdata){
    1908:	defffa04 	addi	sp,sp,-24
    190c:	dfc00515 	stw	ra,20(sp)
    1910:	df000415 	stw	fp,16(sp)
    1914:	df000404 	addi	fp,sp,16
    1918:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    191c:	d0281a15 	stw	zero,-24472(gp)
	ALT_x2 = 165;
    1920:	00802944 	movi	r2,165
    1924:	d0a81c15 	stw	r2,-24464(gp)
	ALT_y = 100;
    1928:	00801904 	movi	r2,100
    192c:	d0a81715 	stw	r2,-24484(gp)
	ALT_inc_x = 1;
    1930:	00800044 	movi	r2,1
    1934:	d0a81b15 	stw	r2,-24468(gp)
	ALT_inc_y = 1;
    1938:	00800044 	movi	r2,1
    193c:	d0a81815 	stw	r2,-24480(gp)

	pixel_buffer_x = 315;
    1940:	00804ec4 	movi	r2,315
    1944:	d0a81515 	stw	r2,-24492(gp)
	pixel_buffer_y = 230;
    1948:	00803984 	movi	r2,230
    194c:	d0a81315 	stw	r2,-24500(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1950:	d0e81017 	ldw	r3,-24512(gp)
    1954:	e0bffe04 	addi	r2,fp,-8
    1958:	d8800015 	stw	r2,0(sp)
    195c:	1809883a 	mov	r4,r3
    1960:	01401004 	movi	r5,64
    1964:	01800044 	movi	r6,1
    1968:	000f883a 	mov	r7,zero
    196c:	0015d840 	call	15d84 <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    1970:	d0e80e17 	ldw	r3,-24520(gp)
    1974:	e0bffe04 	addi	r2,fp,-8
    1978:	1809883a 	mov	r4,r3
    197c:	000b883a 	mov	r5,zero
    1980:	100d883a 	mov	r6,r2
    1984:	001707c0 	call	1707c <OSMboxPend>
    1988:	e0bffd15 	stw	r2,-12(fp)

		//printf("TUTORIAL SET\n");

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    198c:	00015500 	call	1550 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1990:	d1281a17 	ldw	r4,-24472(gp)
    1994:	d1681717 	ldw	r5,-24484(gp)
    1998:	d0a81a17 	ldw	r2,-24472(gp)
    199c:	10c00144 	addi	r3,r2,5
    19a0:	d0a81717 	ldw	r2,-24484(gp)
    19a4:	10800144 	addi	r2,r2,5
    19a8:	d8000015 	stw	zero,0(sp)
    19ac:	180d883a 	mov	r6,r3
    19b0:	100f883a 	mov	r7,r2
    19b4:	000269c0 	call	269c <VGA_box>


		if (first == 1) {
    19b8:	d0a00017 	ldw	r2,-32768(gp)
    19bc:	10800058 	cmpnei	r2,r2,1
    19c0:	1000201e 	bne	r2,zero,1a44 <Tutorial+0x13c>
			printf("FIRST");
    19c4:	010000b4 	movhi	r4,2
    19c8:	213e6c04 	addi	r4,r4,-1616
    19cc:	00030300 	call	3030 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    19d0:	d0a81a17 	ldw	r2,-24472(gp)
    19d4:	10c02804 	addi	r3,r2,160
    19d8:	d0a81b17 	ldw	r2,-24468(gp)
    19dc:	1885883a 	add	r2,r3,r2
    19e0:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    19e4:	d0e81c17 	ldw	r3,-24464(gp)
    19e8:	d0a81b17 	ldw	r2,-24468(gp)
    19ec:	1885883a 	add	r2,r3,r2
    19f0:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    19f4:	d0e81717 	ldw	r3,-24484(gp)
    19f8:	d0a81817 	ldw	r2,-24480(gp)
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	d0a81715 	stw	r2,-24484(gp)

			del_middenlijn();
    1a04:	00028480 	call	2848 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1a08:	0081a5c4 	movi	r2,1687
    1a0c:	d8800015 	stw	r2,0(sp)
    1a10:	01004f04 	movi	r4,316
    1a14:	000b883a 	mov	r5,zero
    1a18:	01804fc4 	movi	r6,319
    1a1c:	01c03bc4 	movi	r7,239
    1a20:	000269c0 	call	269c <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1a24:	d8000015 	stw	zero,0(sp)
    1a28:	01004b04 	movi	r4,300
    1a2c:	01400104 	movi	r5,4
    1a30:	01804c44 	movi	r6,305
    1a34:	01c03ac4 	movi	r7,235
    1a38:	000269c0 	call	269c <VGA_box>

			first = 0;
    1a3c:	d0200015 	stw	zero,-32768(gp)
    1a40:	00000c06 	br	1a74 <Tutorial+0x16c>
		} else {
			ALT_x1 += ALT_inc_x;
    1a44:	d0e81a17 	ldw	r3,-24472(gp)
    1a48:	d0a81b17 	ldw	r2,-24468(gp)
    1a4c:	1885883a 	add	r2,r3,r2
    1a50:	d0a81a15 	stw	r2,-24472(gp)
			ALT_x2 += ALT_inc_x;
    1a54:	d0e81c17 	ldw	r3,-24464(gp)
    1a58:	d0a81b17 	ldw	r2,-24468(gp)
    1a5c:	1885883a 	add	r2,r3,r2
    1a60:	d0a81c15 	stw	r2,-24464(gp)
			ALT_y += ALT_inc_y;
    1a64:	d0e81717 	ldw	r3,-24484(gp)
    1a68:	d0a81817 	ldw	r2,-24480(gp)
    1a6c:	1885883a 	add	r2,r3,r2
    1a70:	d0a81715 	stw	r2,-24484(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1a74:	d0e81717 	ldw	r3,-24484(gp)
    1a78:	d0a81317 	ldw	r2,-24500(gp)
    1a7c:	18800326 	beq	r3,r2,1a8c <Tutorial+0x184>
    1a80:	d0a81717 	ldw	r2,-24484(gp)
    1a84:	10800118 	cmpnei	r2,r2,4
    1a88:	1000031e 	bne	r2,zero,1a98 <Tutorial+0x190>
			ALT_inc_y = -(ALT_inc_y);
    1a8c:	d0a81817 	ldw	r2,-24480(gp)
    1a90:	0085c83a 	sub	r2,zero,r2
    1a94:	d0a81815 	stw	r2,-24480(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1a98:	d0e81c17 	ldw	r3,-24464(gp)
    1a9c:	d0a81517 	ldw	r2,-24492(gp)
    1aa0:	1880031e 	bne	r3,r2,1ab0 <Tutorial+0x1a8>
			ALT_inc_x = -(ALT_inc_x);
    1aa4:	d0a81b17 	ldw	r2,-24468(gp)
    1aa8:	0085c83a 	sub	r2,zero,r2
    1aac:	d0a81b15 	stw	r2,-24468(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1ab0:	d1281a17 	ldw	r4,-24472(gp)
    1ab4:	d1681717 	ldw	r5,-24484(gp)
    1ab8:	d0a81a17 	ldw	r2,-24472(gp)
    1abc:	11800144 	addi	r6,r2,5
    1ac0:	d0a81717 	ldw	r2,-24484(gp)
    1ac4:	10c00144 	addi	r3,r2,5
    1ac8:	00804034 	movhi	r2,256
    1acc:	10bfffc4 	addi	r2,r2,-1
    1ad0:	d8800015 	stw	r2,0(sp)
    1ad4:	180f883a 	mov	r7,r3
    1ad8:	000269c0 	call	269c <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    1adc:	d0a81a17 	ldw	r2,-24472(gp)
    1ae0:	1000021e 	bne	r2,zero,1aec <Tutorial+0x1e4>
			gescoord(3);
    1ae4:	010000c4 	movi	r4,3
    1ae8:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1aec:	d0a81a17 	ldw	r2,-24472(gp)
    1af0:	10800558 	cmpnei	r2,r2,21
    1af4:	10000c1e 	bne	r2,zero,1b28 <Tutorial+0x220>
    1af8:	e0bffd17 	ldw	r2,-12(fp)
    1afc:	10c00017 	ldw	r3,0(r2)
    1b00:	d0a81717 	ldw	r2,-24484(gp)
    1b04:	1880080e 	bge	r3,r2,1b28 <Tutorial+0x220>
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	10800017 	ldw	r2,0(r2)
    1b10:	10800c84 	addi	r2,r2,50
    1b14:	d0e81717 	ldw	r3,-24484(gp)
    1b18:	1880030e 	bge	r3,r2,1b28 <Tutorial+0x220>
			ALT_inc_x = -(ALT_inc_x);
    1b1c:	d0a81b17 	ldw	r2,-24468(gp)
    1b20:	0085c83a 	sub	r2,zero,r2
    1b24:	d0a81b15 	stw	r2,-24468(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1b28:	d0a81a17 	ldw	r2,-24472(gp)
    1b2c:	10800608 	cmpgei	r2,r2,24
    1b30:	10000a1e 	bne	r2,zero,1b5c <Tutorial+0x254>
    1b34:	d0a81a17 	ldw	r2,-24472(gp)
    1b38:	10800590 	cmplti	r2,r2,22
    1b3c:	1000071e 	bne	r2,zero,1b5c <Tutorial+0x254>
    1b40:	e0bffd17 	ldw	r2,-12(fp)
    1b44:	10c00017 	ldw	r3,0(r2)
    1b48:	d0a81717 	ldw	r2,-24484(gp)
    1b4c:	1880031e 	bne	r3,r2,1b5c <Tutorial+0x254>
			ALT_inc_y = -(ALT_inc_y);
    1b50:	d0a81817 	ldw	r2,-24480(gp)
    1b54:	0085c83a 	sub	r2,zero,r2
    1b58:	d0a81815 	stw	r2,-24480(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1b5c:	d0a81a17 	ldw	r2,-24472(gp)
    1b60:	10800608 	cmpgei	r2,r2,24
    1b64:	10000b1e 	bne	r2,zero,1b94 <Tutorial+0x28c>
    1b68:	d0a81a17 	ldw	r2,-24472(gp)
    1b6c:	10800590 	cmplti	r2,r2,22
    1b70:	1000081e 	bne	r2,zero,1b94 <Tutorial+0x28c>
    1b74:	e0bffd17 	ldw	r2,-12(fp)
    1b78:	10800017 	ldw	r2,0(r2)
    1b7c:	10c00c84 	addi	r3,r2,50
    1b80:	d0a81717 	ldw	r2,-24484(gp)
    1b84:	1880031e 	bne	r3,r2,1b94 <Tutorial+0x28c>
			ALT_inc_y = -(ALT_inc_y);
    1b88:	d0a81817 	ldw	r2,-24480(gp)
    1b8c:	0085c83a 	sub	r2,zero,r2
    1b90:	d0a81815 	stw	r2,-24480(gp)
		}

		
		if (controller(3) == 3) {
    1b94:	010000c4 	movi	r4,3
    1b98:	000039c0 	call	39c <controller>
    1b9c:	108000d8 	cmpnei	r2,r2,3
    1ba0:	1000011e 	bne	r2,zero,1ba8 <Tutorial+0x2a0>
			endTutorial();
    1ba4:	00016a00 	call	16a0 <endTutorial>
		}

		OSTimeDly(1);
    1ba8:	01000044 	movi	r4,1
    1bac:	001b5980 	call	1b598 <OSTimeDly>


	}
    1bb0:	003f6706 	br	1950 <__alt_mem_Flash_flash_data+0xf4001950>

00001bb4 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    1bb4:	defffa04 	addi	sp,sp,-24
    1bb8:	dfc00515 	stw	ra,20(sp)
    1bbc:	df000415 	stw	fp,16(sp)
    1bc0:	df000404 	addi	fp,sp,16
    1bc4:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    1bc8:	e0bfff17 	ldw	r2,-4(fp)
    1bcc:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    1bd0:	00022a00 	call	22a0 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1bd4:	d0e80d17 	ldw	r3,-24524(gp)
    1bd8:	e0bffe04 	addi	r2,fp,-8
    1bdc:	d8800015 	stw	r2,0(sp)
    1be0:	1809883a 	mov	r4,r3
    1be4:	01400044 	movi	r5,1
    1be8:	000d883a 	mov	r6,zero
    1bec:	000f883a 	mov	r7,zero
    1bf0:	0015d840 	call	15d84 <OSFlagPend>

		if (controller(ID) == 1){
    1bf4:	e13ffd17 	ldw	r4,-12(fp)
    1bf8:	000039c0 	call	39c <controller>
    1bfc:	10800058 	cmpnei	r2,r2,1
    1c00:	1000111e 	bne	r2,zero,1c48 <menu+0x94>
			if(changed != 0){
    1c04:	d0a82017 	ldw	r2,-24448(gp)
    1c08:	10000926 	beq	r2,zero,1c30 <menu+0x7c>
				gameModeMenu++;
    1c0c:	d0a00317 	ldw	r2,-32756(gp)
    1c10:	10800044 	addi	r2,r2,1
    1c14:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    1c18:	00800044 	movi	r2,1
    1c1c:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    1c20:	d0282015 	stw	zero,-24448(gp)
				printf("heeft 1 gereturned \n");
    1c24:	010000b4 	movhi	r4,2
    1c28:	213f4b04 	addi	r4,r4,-724
    1c2c:	00031140 	call	3114 <puts>
			}
			if (gameModeMenu >= 5){
    1c30:	d0a00317 	ldw	r2,-32756(gp)
    1c34:	10800150 	cmplti	r2,r2,5
    1c38:	1000161e 	bne	r2,zero,1c94 <menu+0xe0>
				gameModeMenu = 1;
    1c3c:	00800044 	movi	r2,1
    1c40:	d0a00315 	stw	r2,-32756(gp)
    1c44:	00001306 	br	1c94 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    1c48:	e13ffd17 	ldw	r4,-12(fp)
    1c4c:	000039c0 	call	39c <controller>
    1c50:	1000101e 	bne	r2,zero,1c94 <menu+0xe0>
			if(changed !=0){
    1c54:	d0a82017 	ldw	r2,-24448(gp)
    1c58:	10000a26 	beq	r2,zero,1c84 <menu+0xd0>
				gameModeMenu--;
    1c5c:	d0a00317 	ldw	r2,-32756(gp)
    1c60:	10bfffc4 	addi	r2,r2,-1
    1c64:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    1c68:	d0281f15 	stw	zero,-24452(gp)
				changed=0;
    1c6c:	d0282015 	stw	zero,-24448(gp)
				eenkeer = 1;
    1c70:	00800044 	movi	r2,1
    1c74:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    1c78:	010000b4 	movhi	r4,2
    1c7c:	213f5004 	addi	r4,r4,-704
    1c80:	00031140 	call	3114 <puts>
			}
			if (gameModeMenu <= 0){
    1c84:	d0a00317 	ldw	r2,-32756(gp)
    1c88:	00800216 	blt	zero,r2,1c94 <menu+0xe0>
				gameModeMenu = 4;
    1c8c:	00800104 	movi	r2,4
    1c90:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    1c94:	01000504 	movi	r4,20
    1c98:	001b5980 	call	1b598 <OSTimeDly>
	}
    1c9c:	003fcd06 	br	1bd4 <__alt_mem_Flash_flash_data+0xf4001bd4>

00001ca0 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    1ca0:	defffa04 	addi	sp,sp,-24
    1ca4:	dfc00515 	stw	ra,20(sp)
    1ca8:	df000415 	stw	fp,16(sp)
    1cac:	df000404 	addi	fp,sp,16
    1cb0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    1cb4:	e0bfff17 	ldw	r2,-4(fp)
    1cb8:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1cbc:	d0e80d17 	ldw	r3,-24524(gp)
    1cc0:	e0bffe04 	addi	r2,fp,-8
    1cc4:	d8800015 	stw	r2,0(sp)
    1cc8:	1809883a 	mov	r4,r3
    1ccc:	01400404 	movi	r5,16
    1cd0:	000d883a 	mov	r6,zero
    1cd4:	000f883a 	mov	r7,zero
    1cd8:	0015d840 	call	15d84 <OSFlagPend>

		if (gameModeMenu == 1){
    1cdc:	d0a00317 	ldw	r2,-32756(gp)
    1ce0:	10800058 	cmpnei	r2,r2,1
    1ce4:	1000411e 	bne	r2,zero,1dec <selecteerMenu+0x14c>
			if(eenkeer == 1){
    1ce8:	d0a00a17 	ldw	r2,-32728(gp)
    1cec:	10800058 	cmpnei	r2,r2,1
    1cf0:	10001f1e 	bne	r2,zero,1d70 <selecteerMenu+0xd0>
				clearScreen();
    1cf4:	00020e00 	call	20e0 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    1cf8:	d0a00417 	ldw	r2,-32752(gp)
    1cfc:	1085883a 	add	r2,r2,r2
    1d00:	1085883a 	add	r2,r2,r2
    1d04:	1009883a 	mov	r4,r2
    1d08:	d0a00617 	ldw	r2,-32744(gp)
    1d0c:	1085883a 	add	r2,r2,r2
    1d10:	1085883a 	add	r2,r2,r2
    1d14:	100b883a 	mov	r5,r2
    1d18:	d0a00517 	ldw	r2,-32748(gp)
    1d1c:	1085883a 	add	r2,r2,r2
    1d20:	1085883a 	add	r2,r2,r2
    1d24:	100d883a 	mov	r6,r2
    1d28:	d0a00717 	ldw	r2,-32740(gp)
    1d2c:	1085883a 	add	r2,r2,r2
    1d30:	1085883a 	add	r2,r2,r2
    1d34:	1007883a 	mov	r3,r2
    1d38:	00be0014 	movui	r2,63488
    1d3c:	d8800015 	stw	r2,0(sp)
    1d40:	180f883a 	mov	r7,r3
    1d44:	000269c0 	call	269c <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    1d48:	d0e00817 	ldw	r3,-32736(gp)
    1d4c:	d0a00917 	ldw	r2,-32732(gp)
    1d50:	1809883a 	mov	r4,r3
    1d54:	100b883a 	mov	r5,r2
    1d58:	018000b4 	movhi	r6,2
    1d5c:	31bf5504 	addi	r6,r6,-684
    1d60:	00027500 	call	2750 <VGA_text>
				eenkeer = 0;
    1d64:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1d68:	00800044 	movi	r2,1
    1d6c:	d0a82015 	stw	r2,-24448(gp)
			}
			if(controller(ID) == 2){
    1d70:	e13ffd17 	ldw	r4,-12(fp)
    1d74:	000039c0 	call	39c <controller>
    1d78:	10800098 	cmpnei	r2,r2,2
    1d7c:	1000d51e 	bne	r2,zero,20d4 <selecteerMenu+0x434>
				clearScreen();
    1d80:	00020e00 	call	20e0 <clearScreen>
				clearText();
    1d84:	00021200 	call	2120 <clearText>
				printf("start Singleplayer\n");
    1d88:	010000b4 	movhi	r4,2
    1d8c:	213f5904 	addi	r4,r4,-668
    1d90:	00031140 	call	3114 <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    1d94:	d0e80d17 	ldw	r3,-24524(gp)
    1d98:	e0bffe04 	addi	r2,fp,-8
    1d9c:	1809883a 	mov	r4,r3
    1da0:	01400104 	movi	r5,4
    1da4:	000d883a 	mov	r6,zero
    1da8:	100f883a 	mov	r7,r2
    1dac:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    1db0:	d0e80b17 	ldw	r3,-24532(gp)
    1db4:	e0bffe04 	addi	r2,fp,-8
    1db8:	1809883a 	mov	r4,r3
    1dbc:	01400804 	movi	r5,32
    1dc0:	000d883a 	mov	r6,zero
    1dc4:	100f883a 	mov	r7,r2
    1dc8:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1dcc:	d0e80d17 	ldw	r3,-24524(gp)
    1dd0:	e0bffe04 	addi	r2,fp,-8
    1dd4:	1809883a 	mov	r4,r3
    1dd8:	01400444 	movi	r5,17
    1ddc:	01800044 	movi	r6,1
    1de0:	100f883a 	mov	r7,r2
    1de4:	00163dc0 	call	163dc <OSFlagPost>
    1de8:	0000ba06 	br	20d4 <selecteerMenu+0x434>
			}
		} else if (gameModeMenu == 2){
    1dec:	d0a00317 	ldw	r2,-32756(gp)
    1df0:	10800098 	cmpnei	r2,r2,2
    1df4:	1000481e 	bne	r2,zero,1f18 <selecteerMenu+0x278>
			if(eenkeer == 1){
    1df8:	d0a00a17 	ldw	r2,-32728(gp)
    1dfc:	10800058 	cmpnei	r2,r2,1
    1e00:	1000221e 	bne	r2,zero,1e8c <selecteerMenu+0x1ec>
				clearScreen();
    1e04:	00020e00 	call	20e0 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1e08:	d0a00417 	ldw	r2,-32752(gp)
    1e0c:	1085883a 	add	r2,r2,r2
    1e10:	1085883a 	add	r2,r2,r2
    1e14:	1009883a 	mov	r4,r2
    1e18:	d0a00617 	ldw	r2,-32744(gp)
    1e1c:	10800104 	addi	r2,r2,4
    1e20:	1085883a 	add	r2,r2,r2
    1e24:	1085883a 	add	r2,r2,r2
    1e28:	100b883a 	mov	r5,r2
    1e2c:	d0a00517 	ldw	r2,-32748(gp)
    1e30:	1085883a 	add	r2,r2,r2
    1e34:	1085883a 	add	r2,r2,r2
    1e38:	100d883a 	mov	r6,r2
    1e3c:	d0a00717 	ldw	r2,-32740(gp)
    1e40:	10800104 	addi	r2,r2,4
    1e44:	1085883a 	add	r2,r2,r2
    1e48:	1085883a 	add	r2,r2,r2
    1e4c:	1007883a 	mov	r3,r2
    1e50:	00be0014 	movui	r2,63488
    1e54:	d8800015 	stw	r2,0(sp)
    1e58:	180f883a 	mov	r7,r3
    1e5c:	000269c0 	call	269c <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    1e60:	d0e00817 	ldw	r3,-32736(gp)
    1e64:	d0a00917 	ldw	r2,-32732(gp)
    1e68:	10800104 	addi	r2,r2,4
    1e6c:	1809883a 	mov	r4,r3
    1e70:	100b883a 	mov	r5,r2
    1e74:	018000b4 	movhi	r6,2
    1e78:	31bf5e04 	addi	r6,r6,-648
    1e7c:	00027500 	call	2750 <VGA_text>
				eenkeer = 0;
    1e80:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1e84:	00800044 	movi	r2,1
    1e88:	d0a82015 	stw	r2,-24448(gp)
			}
			if(controller(ID) == 2 || controller(ID) == 1){
    1e8c:	e13ffd17 	ldw	r4,-12(fp)
    1e90:	000039c0 	call	39c <controller>
    1e94:	108000a0 	cmpeqi	r2,r2,2
    1e98:	1000041e 	bne	r2,zero,1eac <selecteerMenu+0x20c>
    1e9c:	e13ffd17 	ldw	r4,-12(fp)
    1ea0:	000039c0 	call	39c <controller>
    1ea4:	10800058 	cmpnei	r2,r2,1
    1ea8:	10008a1e 	bne	r2,zero,20d4 <selecteerMenu+0x434>
				clearScreen();
    1eac:	00020e00 	call	20e0 <clearScreen>
				clearText();
    1eb0:	00021200 	call	2120 <clearText>
				printf("start game\n");
    1eb4:	010000b4 	movhi	r4,2
    1eb8:	213f6104 	addi	r4,r4,-636
    1ebc:	00031140 	call	3114 <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    1ec0:	d0e80d17 	ldw	r3,-24524(gp)
    1ec4:	e0bffe04 	addi	r2,fp,-8
    1ec8:	1809883a 	mov	r4,r3
    1ecc:	01400304 	movi	r5,12
    1ed0:	000d883a 	mov	r6,zero
    1ed4:	100f883a 	mov	r7,r2
    1ed8:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    1edc:	d0e80b17 	ldw	r3,-24532(gp)
    1ee0:	e0bffe04 	addi	r2,fp,-8
    1ee4:	1809883a 	mov	r4,r3
    1ee8:	01400084 	movi	r5,2
    1eec:	000d883a 	mov	r6,zero
    1ef0:	100f883a 	mov	r7,r2
    1ef4:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1ef8:	d0e80d17 	ldw	r3,-24524(gp)
    1efc:	e0bffe04 	addi	r2,fp,-8
    1f00:	1809883a 	mov	r4,r3
    1f04:	01400444 	movi	r5,17
    1f08:	01800044 	movi	r6,1
    1f0c:	100f883a 	mov	r7,r2
    1f10:	00163dc0 	call	163dc <OSFlagPost>
    1f14:	00006f06 	br	20d4 <selecteerMenu+0x434>
			}

		} else if (gameModeMenu == 3){
    1f18:	d0a00317 	ldw	r2,-32756(gp)
    1f1c:	108000d8 	cmpnei	r2,r2,3
    1f20:	1000261e 	bne	r2,zero,1fbc <selecteerMenu+0x31c>
			if(eenkeer == 1){
    1f24:	d0a00a17 	ldw	r2,-32728(gp)
    1f28:	10800058 	cmpnei	r2,r2,1
    1f2c:	1000691e 	bne	r2,zero,20d4 <selecteerMenu+0x434>
				clearScreen();
    1f30:	00020e00 	call	20e0 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    1f34:	d0a00417 	ldw	r2,-32752(gp)
    1f38:	1085883a 	add	r2,r2,r2
    1f3c:	1085883a 	add	r2,r2,r2
    1f40:	1009883a 	mov	r4,r2
    1f44:	d0a00617 	ldw	r2,-32744(gp)
    1f48:	10800204 	addi	r2,r2,8
    1f4c:	1085883a 	add	r2,r2,r2
    1f50:	1085883a 	add	r2,r2,r2
    1f54:	100b883a 	mov	r5,r2
    1f58:	d0a00517 	ldw	r2,-32748(gp)
    1f5c:	1085883a 	add	r2,r2,r2
    1f60:	1085883a 	add	r2,r2,r2
    1f64:	100d883a 	mov	r6,r2
    1f68:	d0a00717 	ldw	r2,-32740(gp)
    1f6c:	10800204 	addi	r2,r2,8
    1f70:	1085883a 	add	r2,r2,r2
    1f74:	1085883a 	add	r2,r2,r2
    1f78:	1007883a 	mov	r3,r2
    1f7c:	00be0014 	movui	r2,63488
    1f80:	d8800015 	stw	r2,0(sp)
    1f84:	180f883a 	mov	r7,r3
    1f88:	000269c0 	call	269c <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    1f8c:	d0e00817 	ldw	r3,-32736(gp)
    1f90:	d0a00917 	ldw	r2,-32732(gp)
    1f94:	10800204 	addi	r2,r2,8
    1f98:	1809883a 	mov	r4,r3
    1f9c:	100b883a 	mov	r5,r2
    1fa0:	018000b4 	movhi	r6,2
    1fa4:	31bf6404 	addi	r6,r6,-624
    1fa8:	00027500 	call	2750 <VGA_text>
				eenkeer = 0;
    1fac:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1fb0:	00800044 	movi	r2,1
    1fb4:	d0a82015 	stw	r2,-24448(gp)
    1fb8:	00004606 	br	20d4 <selecteerMenu+0x434>

			}
		} else if (gameModeMenu == 4){
    1fbc:	d0a00317 	ldw	r2,-32756(gp)
    1fc0:	10800118 	cmpnei	r2,r2,4
    1fc4:	1000431e 	bne	r2,zero,20d4 <selecteerMenu+0x434>
			if(eenkeer == 1){
    1fc8:	d0a00a17 	ldw	r2,-32728(gp)
    1fcc:	10800058 	cmpnei	r2,r2,1
    1fd0:	1000221e 	bne	r2,zero,205c <selecteerMenu+0x3bc>
				clearScreen();
    1fd4:	00020e00 	call	20e0 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    1fd8:	d0a00417 	ldw	r2,-32752(gp)
    1fdc:	1085883a 	add	r2,r2,r2
    1fe0:	1085883a 	add	r2,r2,r2
    1fe4:	1009883a 	mov	r4,r2
    1fe8:	d0a00617 	ldw	r2,-32744(gp)
    1fec:	10800304 	addi	r2,r2,12
    1ff0:	1085883a 	add	r2,r2,r2
    1ff4:	1085883a 	add	r2,r2,r2
    1ff8:	100b883a 	mov	r5,r2
    1ffc:	d0a00517 	ldw	r2,-32748(gp)
    2000:	1085883a 	add	r2,r2,r2
    2004:	1085883a 	add	r2,r2,r2
    2008:	100d883a 	mov	r6,r2
    200c:	d0a00717 	ldw	r2,-32740(gp)
    2010:	10800304 	addi	r2,r2,12
    2014:	1085883a 	add	r2,r2,r2
    2018:	1085883a 	add	r2,r2,r2
    201c:	1007883a 	mov	r3,r2
    2020:	00be0014 	movui	r2,63488
    2024:	d8800015 	stw	r2,0(sp)
    2028:	180f883a 	mov	r7,r3
    202c:	000269c0 	call	269c <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    2030:	d0e00817 	ldw	r3,-32736(gp)
    2034:	d0a00917 	ldw	r2,-32732(gp)
    2038:	10800304 	addi	r2,r2,12
    203c:	1809883a 	mov	r4,r3
    2040:	100b883a 	mov	r5,r2
    2044:	018000b4 	movhi	r6,2
    2048:	31bf6704 	addi	r6,r6,-612
    204c:	00027500 	call	2750 <VGA_text>
				eenkeer = 0;
    2050:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    2054:	00800044 	movi	r2,1
    2058:	d0a82015 	stw	r2,-24448(gp)

			}
			
			if(controller(ID) == 2){
    205c:	e13ffd17 	ldw	r4,-12(fp)
    2060:	000039c0 	call	39c <controller>
    2064:	10800098 	cmpnei	r2,r2,2
    2068:	10001a1e 	bne	r2,zero,20d4 <selecteerMenu+0x434>
				clearScreen();
    206c:	00020e00 	call	20e0 <clearScreen>
				clearText();
    2070:	00021200 	call	2120 <clearText>
				printf("Start Tutorial\n");
    2074:	010000b4 	movhi	r4,2
    2078:	213f6a04 	addi	r4,r4,-600
    207c:	00031140 	call	3114 <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    2080:	d0e80d17 	ldw	r3,-24524(gp)
    2084:	e0bffe04 	addi	r2,fp,-8
    2088:	1809883a 	mov	r4,r3
    208c:	01400104 	movi	r5,4
    2090:	000d883a 	mov	r6,zero
    2094:	100f883a 	mov	r7,r2
    2098:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    209c:	d0e81017 	ldw	r3,-24512(gp)
    20a0:	e0bffe04 	addi	r2,fp,-8
    20a4:	1809883a 	mov	r4,r3
    20a8:	01401004 	movi	r5,64
    20ac:	000d883a 	mov	r6,zero
    20b0:	100f883a 	mov	r7,r2
    20b4:	00163dc0 	call	163dc <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    20b8:	d0e80d17 	ldw	r3,-24524(gp)
    20bc:	e0bffe04 	addi	r2,fp,-8
    20c0:	1809883a 	mov	r4,r3
    20c4:	01400444 	movi	r5,17
    20c8:	01800044 	movi	r6,1
    20cc:	100f883a 	mov	r7,r2
    20d0:	00163dc0 	call	163dc <OSFlagPost>
			}
		}

		OSTimeDly(20);
    20d4:	01000504 	movi	r4,20
    20d8:	001b5980 	call	1b598 <OSTimeDly>
	}
    20dc:	003ef706 	br	1cbc <__alt_mem_Flash_flash_data+0xf4001cbc>

000020e0 <clearScreen>:
}

void clearScreen(){
    20e0:	defffd04 	addi	sp,sp,-12
    20e4:	dfc00215 	stw	ra,8(sp)
    20e8:	df000115 	stw	fp,4(sp)
    20ec:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    20f0:	d8000015 	stw	zero,0(sp)
    20f4:	01000644 	movi	r4,25
    20f8:	01401184 	movi	r5,70
    20fc:	01803204 	movi	r6,200
    2100:	01c021c4 	movi	r7,135
    2104:	000269c0 	call	269c <VGA_box>
	del_middenlijn();
    2108:	00028480 	call	2848 <del_middenlijn>
}
    210c:	e037883a 	mov	sp,fp
    2110:	dfc00117 	ldw	ra,4(sp)
    2114:	df000017 	ldw	fp,0(sp)
    2118:	dec00204 	addi	sp,sp,8
    211c:	f800283a 	ret

00002120 <clearText>:

void clearText(){
    2120:	defffe04 	addi	sp,sp,-8
    2124:	dfc00115 	stw	ra,4(sp)
    2128:	df000015 	stw	fp,0(sp)
    212c:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    2130:	d0e00817 	ldw	r3,-32736(gp)
    2134:	d0a00917 	ldw	r2,-32732(gp)
    2138:	1809883a 	mov	r4,r3
    213c:	100b883a 	mov	r5,r2
    2140:	018000b4 	movhi	r6,2
    2144:	31bf6e04 	addi	r6,r6,-584
    2148:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    214c:	d0e00817 	ldw	r3,-32736(gp)
    2150:	d0a00917 	ldw	r2,-32732(gp)
    2154:	10800104 	addi	r2,r2,4
    2158:	1809883a 	mov	r4,r3
    215c:	100b883a 	mov	r5,r2
    2160:	018000b4 	movhi	r6,2
    2164:	31bf7204 	addi	r6,r6,-568
    2168:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    216c:	d0e00817 	ldw	r3,-32736(gp)
    2170:	d0a00917 	ldw	r2,-32732(gp)
    2174:	10800204 	addi	r2,r2,8
    2178:	1809883a 	mov	r4,r3
    217c:	100b883a 	mov	r5,r2
    2180:	018000b4 	movhi	r6,2
    2184:	31bf7504 	addi	r6,r6,-556
    2188:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    218c:	d0e00817 	ldw	r3,-32736(gp)
    2190:	d0a00917 	ldw	r2,-32732(gp)
    2194:	10800304 	addi	r2,r2,12
    2198:	1809883a 	mov	r4,r3
    219c:	100b883a 	mov	r5,r2
    21a0:	018000b4 	movhi	r6,2
    21a4:	31bf7804 	addi	r6,r6,-544
    21a8:	00027500 	call	2750 <VGA_text>
}
    21ac:	e037883a 	mov	sp,fp
    21b0:	dfc00117 	ldw	ra,4(sp)
    21b4:	df000017 	ldw	fp,0(sp)
    21b8:	dec00204 	addi	sp,sp,8
    21bc:	f800283a 	ret

000021c0 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    21c0:	defff804 	addi	sp,sp,-32
    21c4:	dfc00715 	stw	ra,28(sp)
    21c8:	df000615 	stw	fp,24(sp)
    21cc:	df000604 	addi	fp,sp,24
    21d0:	e13ffb15 	stw	r4,-20(fp)
    21d4:	e17ffc15 	stw	r5,-16(fp)
    21d8:	e1bffd15 	stw	r6,-12(fp)
    21dc:	e1fffe15 	stw	r7,-8(fp)
    21e0:	e0800217 	ldw	r2,8(fp)
    21e4:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    21e8:	e0bfff0f 	ldh	r2,-4(fp)
    21ec:	d8800015 	stw	r2,0(sp)
    21f0:	e13ffb17 	ldw	r4,-20(fp)
    21f4:	e17ffc17 	ldw	r5,-16(fp)
    21f8:	e1bffd17 	ldw	r6,-12(fp)
    21fc:	e1fffe17 	ldw	r7,-8(fp)
    2200:	000269c0 	call	269c <VGA_box>
}
    2204:	e037883a 	mov	sp,fp
    2208:	dfc00117 	ldw	ra,4(sp)
    220c:	df000017 	ldw	fp,0(sp)
    2210:	dec00204 	addi	sp,sp,8
    2214:	f800283a 	ret

00002218 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2218:	defff804 	addi	sp,sp,-32
    221c:	dfc00715 	stw	ra,28(sp)
    2220:	df000615 	stw	fp,24(sp)
    2224:	df000604 	addi	fp,sp,24
    2228:	e13ffb15 	stw	r4,-20(fp)
    222c:	e17ffc15 	stw	r5,-16(fp)
    2230:	e1bffd15 	stw	r6,-12(fp)
    2234:	e1fffe15 	stw	r7,-8(fp)
    2238:	e0800217 	ldw	r2,8(fp)
    223c:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2240:	e0bffb17 	ldw	r2,-20(fp)
    2244:	10800044 	addi	r2,r2,1
    2248:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    224c:	e0bffc17 	ldw	r2,-16(fp)
    2250:	10800044 	addi	r2,r2,1
    2254:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    2258:	e0bffd17 	ldw	r2,-12(fp)
    225c:	10bfffc4 	addi	r2,r2,-1
    2260:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    2264:	e0bffe17 	ldw	r2,-8(fp)
    2268:	10bfffc4 	addi	r2,r2,-1
    226c:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2270:	e0bfff0f 	ldh	r2,-4(fp)
    2274:	d8800015 	stw	r2,0(sp)
    2278:	e13ffb17 	ldw	r4,-20(fp)
    227c:	e17ffc17 	ldw	r5,-16(fp)
    2280:	e1bffd17 	ldw	r6,-12(fp)
    2284:	e1fffe17 	ldw	r7,-8(fp)
    2288:	000269c0 	call	269c <VGA_box>
}
    228c:	e037883a 	mov	sp,fp
    2290:	dfc00117 	ldw	ra,4(sp)
    2294:	df000017 	ldw	fp,0(sp)
    2298:	dec00204 	addi	sp,sp,8
    229c:	f800283a 	ret

000022a0 <teken_menu>:

void teken_menu(int ID){
    22a0:	defffc04 	addi	sp,sp,-16
    22a4:	dfc00315 	stw	ra,12(sp)
    22a8:	df000215 	stw	fp,8(sp)
    22ac:	df000204 	addi	fp,sp,8
    22b0:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    22b4:	d0e00817 	ldw	r3,-32736(gp)
    22b8:	d0a00917 	ldw	r2,-32732(gp)
    22bc:	1809883a 	mov	r4,r3
    22c0:	100b883a 	mov	r5,r2
    22c4:	018000b4 	movhi	r6,2
    22c8:	31bf5504 	addi	r6,r6,-684
    22cc:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    22d0:	d0e00817 	ldw	r3,-32736(gp)
    22d4:	d0a00917 	ldw	r2,-32732(gp)
    22d8:	10800104 	addi	r2,r2,4
    22dc:	1809883a 	mov	r4,r3
    22e0:	100b883a 	mov	r5,r2
    22e4:	018000b4 	movhi	r6,2
    22e8:	31bf5e04 	addi	r6,r6,-648
    22ec:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    22f0:	d0e00817 	ldw	r3,-32736(gp)
    22f4:	d0a00917 	ldw	r2,-32732(gp)
    22f8:	10800204 	addi	r2,r2,8
    22fc:	1809883a 	mov	r4,r3
    2300:	100b883a 	mov	r5,r2
    2304:	018000b4 	movhi	r6,2
    2308:	31bf6404 	addi	r6,r6,-624
    230c:	00027500 	call	2750 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    2310:	d0e00817 	ldw	r3,-32736(gp)
    2314:	d0a00917 	ldw	r2,-32732(gp)
    2318:	10800304 	addi	r2,r2,12
    231c:	1809883a 	mov	r4,r3
    2320:	100b883a 	mov	r5,r2
    2324:	018000b4 	movhi	r6,2
    2328:	31bf6704 	addi	r6,r6,-612
    232c:	00027500 	call	2750 <VGA_text>
	if(ID == 1){
    2330:	e0bfff17 	ldw	r2,-4(fp)
    2334:	10800058 	cmpnei	r2,r2,1
    2338:	1000151e 	bne	r2,zero,2390 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    233c:	d0a00417 	ldw	r2,-32752(gp)
    2340:	1085883a 	add	r2,r2,r2
    2344:	1085883a 	add	r2,r2,r2
    2348:	1009883a 	mov	r4,r2
    234c:	d0a00617 	ldw	r2,-32744(gp)
    2350:	1085883a 	add	r2,r2,r2
    2354:	1085883a 	add	r2,r2,r2
    2358:	100b883a 	mov	r5,r2
    235c:	d0a00517 	ldw	r2,-32748(gp)
    2360:	1085883a 	add	r2,r2,r2
    2364:	1085883a 	add	r2,r2,r2
    2368:	100d883a 	mov	r6,r2
    236c:	d0a00717 	ldw	r2,-32740(gp)
    2370:	1085883a 	add	r2,r2,r2
    2374:	1085883a 	add	r2,r2,r2
    2378:	1007883a 	mov	r3,r2
    237c:	00be0014 	movui	r2,63488
    2380:	d8800015 	stw	r2,0(sp)
    2384:	180f883a 	mov	r7,r3
    2388:	000269c0 	call	269c <VGA_box>
    238c:	00003306 	br	245c <teken_menu+0x1bc>
	}else if(ID == 2){
    2390:	e0bfff17 	ldw	r2,-4(fp)
    2394:	10800098 	cmpnei	r2,r2,2
    2398:	1000171e 	bne	r2,zero,23f8 <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    239c:	d0a00417 	ldw	r2,-32752(gp)
    23a0:	1085883a 	add	r2,r2,r2
    23a4:	1085883a 	add	r2,r2,r2
    23a8:	1009883a 	mov	r4,r2
    23ac:	d0a00617 	ldw	r2,-32744(gp)
    23b0:	10800104 	addi	r2,r2,4
    23b4:	1085883a 	add	r2,r2,r2
    23b8:	1085883a 	add	r2,r2,r2
    23bc:	100b883a 	mov	r5,r2
    23c0:	d0a00517 	ldw	r2,-32748(gp)
    23c4:	1085883a 	add	r2,r2,r2
    23c8:	1085883a 	add	r2,r2,r2
    23cc:	100d883a 	mov	r6,r2
    23d0:	d0a00717 	ldw	r2,-32740(gp)
    23d4:	10800104 	addi	r2,r2,4
    23d8:	1085883a 	add	r2,r2,r2
    23dc:	1085883a 	add	r2,r2,r2
    23e0:	1007883a 	mov	r3,r2
    23e4:	00be0014 	movui	r2,63488
    23e8:	d8800015 	stw	r2,0(sp)
    23ec:	180f883a 	mov	r7,r3
    23f0:	000269c0 	call	269c <VGA_box>
    23f4:	00001906 	br	245c <teken_menu+0x1bc>
	}else if(ID == 4){
    23f8:	e0bfff17 	ldw	r2,-4(fp)
    23fc:	10800118 	cmpnei	r2,r2,4
    2400:	1000161e 	bne	r2,zero,245c <teken_menu+0x1bc>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    2404:	d0a00417 	ldw	r2,-32752(gp)
    2408:	1085883a 	add	r2,r2,r2
    240c:	1085883a 	add	r2,r2,r2
    2410:	1009883a 	mov	r4,r2
    2414:	d0a00617 	ldw	r2,-32744(gp)
    2418:	10800304 	addi	r2,r2,12
    241c:	1085883a 	add	r2,r2,r2
    2420:	1085883a 	add	r2,r2,r2
    2424:	100b883a 	mov	r5,r2
    2428:	d0a00517 	ldw	r2,-32748(gp)
    242c:	1085883a 	add	r2,r2,r2
    2430:	1085883a 	add	r2,r2,r2
    2434:	100d883a 	mov	r6,r2
    2438:	d0a00717 	ldw	r2,-32740(gp)
    243c:	10800304 	addi	r2,r2,12
    2440:	1085883a 	add	r2,r2,r2
    2444:	1085883a 	add	r2,r2,r2
    2448:	1007883a 	mov	r3,r2
    244c:	00be0014 	movui	r2,63488
    2450:	d8800015 	stw	r2,0(sp)
    2454:	180f883a 	mov	r7,r3
    2458:	000269c0 	call	269c <VGA_box>
	}

}
    245c:	e037883a 	mov	sp,fp
    2460:	dfc00117 	ldw	ra,4(sp)
    2464:	df000017 	ldw	fp,0(sp)
    2468:	dec00204 	addi	sp,sp,8
    246c:	f800283a 	ret

00002470 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    2470:	defffb04 	addi	sp,sp,-20
    2474:	dfc00415 	stw	ra,16(sp)
    2478:	df000315 	stw	fp,12(sp)
    247c:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    2480:	0013b540 	call	13b54 <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2484:	00800174 	movhi	r2,5
    2488:	10814004 	addi	r2,r2,1280
    248c:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    2490:	d0a00c17 	ldw	r2,-32720(gp)
    2494:	10800204 	addi	r2,r2,8
    2498:	e0fffe17 	ldw	r3,-8(fp)
    249c:	18ffffcc 	andi	r3,r3,65535
    24a0:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    24a4:	d0a00c17 	ldw	r2,-32720(gp)
    24a8:	10800304 	addi	r2,r2,12
    24ac:	e0fffe17 	ldw	r3,-8(fp)
    24b0:	1806d43a 	srli	r3,r3,16
    24b4:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    24b8:	d0a00c17 	ldw	r2,-32720(gp)
    24bc:	10800104 	addi	r2,r2,4
    24c0:	00c001c4 	movi	r3,7
    24c4:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    24c8:	e0bfff04 	addi	r2,fp,-4
    24cc:	01000304 	movi	r4,12
    24d0:	100b883a 	mov	r5,r2
    24d4:	001576c0 	call	1576c <OSFlagCreate>
    24d8:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    24dc:	e0bfff04 	addi	r2,fp,-4
    24e0:	01000884 	movi	r4,34
    24e4:	100b883a 	mov	r5,r2
    24e8:	001576c0 	call	1576c <OSFlagCreate>
    24ec:	d0a80b15 	stw	r2,-24532(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    24f0:	e0bfff04 	addi	r2,fp,-4
    24f4:	01001004 	movi	r4,64
    24f8:	100b883a 	mov	r5,r2
    24fc:	001576c0 	call	1576c <OSFlagCreate>
    2500:	d0a81015 	stw	r2,-24512(gp)


	gameSem = OSSemCreate(0);
    2504:	0009883a 	mov	r4,zero
    2508:	001924c0 	call	1924c <OSSemCreate>
    250c:	d0a81915 	stw	r2,-24476(gp)
	controllerSem = OSSemCreate(0);
    2510:	0009883a 	mov	r4,zero
    2514:	001924c0 	call	1924c <OSSemCreate>
    2518:	d0a80915 	stw	r2,-24540(gp)

	MailBox = OSMboxCreate((void *)0);
    251c:	0009883a 	mov	r4,zero
    2520:	0016d180 	call	16d18 <OSMboxCreate>
    2524:	d0a80e15 	stw	r2,-24520(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2528:	0009883a 	mov	r4,zero
    252c:	0016d180 	call	16d18 <OSMboxCreate>
    2530:	d0a80c15 	stw	r2,-24528(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    2534:	d8000015 	stw	zero,0(sp)
    2538:	0009883a 	mov	r4,zero
    253c:	000b883a 	mov	r5,zero
    2540:	01804fc4 	movi	r6,319
    2544:	01c03bc4 	movi	r7,239
    2548:	000269c0 	call	269c <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    254c:	00803fc4 	movi	r2,255
    2550:	d8800015 	stw	r2,0(sp)
    2554:	010003c4 	movi	r4,15
    2558:	01400c84 	movi	r5,50
    255c:	01800504 	movi	r6,20
    2560:	01c01904 	movi	r7,100
    2564:	000269c0 	call	269c <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    2568:	00803fc4 	movi	r2,255
    256c:	d8800015 	stw	r2,0(sp)
    2570:	01004b04 	movi	r4,300
    2574:	01400c84 	movi	r5,50
    2578:	01804c44 	movi	r6,305
    257c:	01c01904 	movi	r7,100
    2580:	000269c0 	call	269c <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    2584:	0081a5c4 	movi	r2,1687
    2588:	d8800015 	stw	r2,0(sp)
    258c:	0009883a 	mov	r4,zero
    2590:	000b883a 	mov	r5,zero
    2594:	01804fc4 	movi	r6,319
    2598:	01c000c4 	movi	r7,3
    259c:	000269c0 	call	269c <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    25a0:	0081a5c4 	movi	r2,1687
    25a4:	d8800015 	stw	r2,0(sp)
    25a8:	0009883a 	mov	r4,zero
    25ac:	01403b04 	movi	r5,236
    25b0:	01804fc4 	movi	r6,319
    25b4:	01c03bc4 	movi	r7,239
    25b8:	000269c0 	call	269c <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    25bc:	01000034 	movhi	r4,0
    25c0:	2100a004 	addi	r4,r4,640
    25c4:	01400044 	movi	r5,1
    25c8:	018000f4 	movhi	r6,3
    25cc:	3187ed04 	addi	r6,r6,8116
    25d0:	01c002c4 	movi	r7,11
    25d4:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    25d8:	01000034 	movhi	r4,0
    25dc:	2100a004 	addi	r4,r4,640
    25e0:	01400084 	movi	r5,2
    25e4:	018000f4 	movhi	r6,3
    25e8:	3197ef04 	addi	r6,r6,24508
    25ec:	01c00304 	movi	r7,12
    25f0:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    25f4:	01000034 	movhi	r4,0
    25f8:	2101e304 	addi	r4,r4,1932
    25fc:	000b883a 	mov	r5,zero
    2600:	018000f4 	movhi	r6,3
    2604:	319ff004 	addi	r6,r6,32704
    2608:	01c00184 	movi	r7,6
    260c:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2610:	01000034 	movhi	r4,0
    2614:	21044c04 	addi	r4,r4,4400
    2618:	000b883a 	mov	r5,zero
    261c:	018000b4 	movhi	r6,2
    2620:	3198dc04 	addi	r6,r6,25456
    2624:	01c001c4 	movi	r7,7
    2628:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    262c:	01000034 	movhi	r4,0
    2630:	21064204 	addi	r4,r4,6408
    2634:	000b883a 	mov	r5,zero
    2638:	018000f4 	movhi	r6,3
    263c:	318fee04 	addi	r6,r6,16312
    2640:	01c00204 	movi	r7,8
    2644:	001a1e40 	call	1a1e4 <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2648:	01000034 	movhi	r4,0
    264c:	2106ed04 	addi	r4,r4,7092
    2650:	01400084 	movi	r5,2
    2654:	018000f4 	movhi	r6,3
    2658:	31bfec04 	addi	r6,r6,-80
    265c:	01c00244 	movi	r7,9
    2660:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    2664:	01000034 	movhi	r4,0
    2668:	21072804 	addi	r4,r4,7328
    266c:	014000c4 	movi	r5,3
    2670:	01800134 	movhi	r6,4
    2674:	3188f404 	addi	r6,r6,9168
    2678:	01c00284 	movi	r7,10
    267c:	001a1e40 	call	1a1e4 <OSTaskCreate>
	OSStart();
    2680:	0013e780 	call	13e78 <OSStart>
	return 0;
    2684:	0005883a 	mov	r2,zero
}
    2688:	e037883a 	mov	sp,fp
    268c:	dfc00117 	ldw	ra,4(sp)
    2690:	df000017 	ldw	fp,0(sp)
    2694:	dec00204 	addi	sp,sp,8
    2698:	f800283a 	ret

0000269c <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    269c:	defff604 	addi	sp,sp,-40
    26a0:	df000915 	stw	fp,36(sp)
    26a4:	df000904 	addi	fp,sp,36
    26a8:	e13ffb15 	stw	r4,-20(fp)
    26ac:	e17ffc15 	stw	r5,-16(fp)
    26b0:	e1bffd15 	stw	r6,-12(fp)
    26b4:	e1fffe15 	stw	r7,-8(fp)
    26b8:	e0800117 	ldw	r2,4(fp)
    26bc:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    26c0:	00820034 	movhi	r2,2048
    26c4:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    26c8:	e0bffc17 	ldw	r2,-16(fp)
    26cc:	e0bff715 	stw	r2,-36(fp)
    26d0:	00001806 	br	2734 <VGA_box+0x98>
	{
		col = x1;
    26d4:	e0bffb17 	ldw	r2,-20(fp)
    26d8:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    26dc:	00000f06 	br	271c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    26e0:	e0bff717 	ldw	r2,-36(fp)
    26e4:	1006927a 	slli	r3,r2,9
    26e8:	e0bff817 	ldw	r2,-32(fp)
    26ec:	1885883a 	add	r2,r3,r2
    26f0:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    26f4:	e0bffa17 	ldw	r2,-24(fp)
    26f8:	1085883a 	add	r2,r2,r2
    26fc:	1007883a 	mov	r3,r2
    2700:	e0bff917 	ldw	r2,-28(fp)
    2704:	10c5883a 	add	r2,r2,r3
    2708:	e0ffff0b 	ldhu	r3,-4(fp)
    270c:	10c0000d 	sth	r3,0(r2)
			++col;
    2710:	e0bff817 	ldw	r2,-32(fp)
    2714:	10800044 	addi	r2,r2,1
    2718:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    271c:	e0bff817 	ldw	r2,-32(fp)
    2720:	e0fffd17 	ldw	r3,-12(fp)
    2724:	18bfee0e 	bge	r3,r2,26e0 <__alt_mem_Flash_flash_data+0xf40026e0>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2728:	e0bff717 	ldw	r2,-36(fp)
    272c:	10800044 	addi	r2,r2,1
    2730:	e0bff715 	stw	r2,-36(fp)
    2734:	e0bff717 	ldw	r2,-36(fp)
    2738:	e0fffe17 	ldw	r3,-8(fp)
    273c:	18bfe50e 	bge	r3,r2,26d4 <__alt_mem_Flash_flash_data+0xf40026d4>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    2740:	e037883a 	mov	sp,fp
    2744:	df000017 	ldw	fp,0(sp)
    2748:	dec00104 	addi	sp,sp,4
    274c:	f800283a 	ret

00002750 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    2750:	defffa04 	addi	sp,sp,-24
    2754:	df000515 	stw	fp,20(sp)
    2758:	df000504 	addi	fp,sp,20
    275c:	e13ffd15 	stw	r4,-12(fp)
    2760:	e17ffe15 	stw	r5,-8(fp)
    2764:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    2768:	00824034 	movhi	r2,2304
    276c:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    2770:	e0bffe17 	ldw	r2,-8(fp)
    2774:	100691fa 	slli	r3,r2,7
    2778:	e0bffd17 	ldw	r2,-12(fp)
    277c:	1885883a 	add	r2,r3,r2
    2780:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    2784:	00000c06 	br	27b8 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    2788:	e0bffb17 	ldw	r2,-20(fp)
    278c:	e0fffc17 	ldw	r3,-16(fp)
    2790:	1885883a 	add	r2,r3,r2
    2794:	e0ffff17 	ldw	r3,-4(fp)
    2798:	18c00003 	ldbu	r3,0(r3)
    279c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    27a0:	e0bfff17 	ldw	r2,-4(fp)
    27a4:	10800044 	addi	r2,r2,1
    27a8:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    27ac:	e0bffb17 	ldw	r2,-20(fp)
    27b0:	10800044 	addi	r2,r2,1
    27b4:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    27b8:	e0bfff17 	ldw	r2,-4(fp)
    27bc:	10800003 	ldbu	r2,0(r2)
    27c0:	10803fcc 	andi	r2,r2,255
    27c4:	1080201c 	xori	r2,r2,128
    27c8:	10bfe004 	addi	r2,r2,-128
    27cc:	103fee1e 	bne	r2,zero,2788 <__alt_mem_Flash_flash_data+0xf4002788>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    27d0:	e037883a 	mov	sp,fp
    27d4:	df000017 	ldw	fp,0(sp)
    27d8:	dec00104 	addi	sp,sp,4
    27dc:	f800283a 	ret

000027e0 <draw_middenlijn>:

void draw_middenlijn(){
    27e0:	defffc04 	addi	sp,sp,-16
    27e4:	dfc00315 	stw	ra,12(sp)
    27e8:	df000215 	stw	fp,8(sp)
    27ec:	df000204 	addi	fp,sp,8
	int i = 0;
    27f0:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    27f4:	00000c06 	br	2828 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    27f8:	e0bfff17 	ldw	r2,-4(fp)
    27fc:	10c001c4 	addi	r3,r2,7
    2800:	0081a5c4 	movi	r2,1687
    2804:	d8800015 	stw	r2,0(sp)
    2808:	010027c4 	movi	r4,159
    280c:	e17fff17 	ldw	r5,-4(fp)
    2810:	01802804 	movi	r6,160
    2814:	180f883a 	mov	r7,r3
    2818:	000269c0 	call	269c <VGA_box>
		i = i + 11;
    281c:	e0bfff17 	ldw	r2,-4(fp)
    2820:	108002c4 	addi	r2,r2,11
    2824:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    2828:	e0bfff17 	ldw	r2,-4(fp)
    282c:	10803c10 	cmplti	r2,r2,240
    2830:	103ff11e 	bne	r2,zero,27f8 <__alt_mem_Flash_flash_data+0xf40027f8>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    2834:	e037883a 	mov	sp,fp
    2838:	dfc00117 	ldw	ra,4(sp)
    283c:	df000017 	ldw	fp,0(sp)
    2840:	dec00204 	addi	sp,sp,8
    2844:	f800283a 	ret

00002848 <del_middenlijn>:

void del_middenlijn(){
    2848:	defffd04 	addi	sp,sp,-12
    284c:	dfc00215 	stw	ra,8(sp)
    2850:	df000115 	stw	fp,4(sp)
    2854:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    2858:	d8000015 	stw	zero,0(sp)
    285c:	010027c4 	movi	r4,159
    2860:	01400104 	movi	r5,4
    2864:	01802804 	movi	r6,160
    2868:	01c03ac4 	movi	r7,235
    286c:	000269c0 	call	269c <VGA_box>
}
    2870:	e037883a 	mov	sp,fp
    2874:	dfc00117 	ldw	ra,4(sp)
    2878:	df000017 	ldw	fp,0(sp)
    287c:	dec00204 	addi	sp,sp,8
    2880:	f800283a 	ret

00002884 <del_number>:

void del_number(int side){
    2884:	defffc04 	addi	sp,sp,-16
    2888:	dfc00315 	stw	ra,12(sp)
    288c:	df000215 	stw	fp,8(sp)
    2890:	df000204 	addi	fp,sp,8
    2894:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    2898:	e0bfff17 	ldw	r2,-4(fp)
    289c:	10800058 	cmpnei	r2,r2,1
    28a0:	1000061e 	bne	r2,zero,28bc <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    28a4:	d8000015 	stw	zero,0(sp)
    28a8:	01001e04 	movi	r4,120
    28ac:	01400504 	movi	r5,20
    28b0:	01802304 	movi	r6,140
    28b4:	01c00f04 	movi	r7,60
    28b8:	000269c0 	call	269c <VGA_box>
	}
	if(side == 2){
    28bc:	e0bfff17 	ldw	r2,-4(fp)
    28c0:	10800098 	cmpnei	r2,r2,2
    28c4:	1000061e 	bne	r2,zero,28e0 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    28c8:	d8000015 	stw	zero,0(sp)
    28cc:	01002d04 	movi	r4,180
    28d0:	01400504 	movi	r5,20
    28d4:	01803204 	movi	r6,200
    28d8:	01c00f04 	movi	r7,60
    28dc:	000269c0 	call	269c <VGA_box>
	}
}
    28e0:	e037883a 	mov	sp,fp
    28e4:	dfc00117 	ldw	ra,4(sp)
    28e8:	df000017 	ldw	fp,0(sp)
    28ec:	dec00204 	addi	sp,sp,8
    28f0:	f800283a 	ret

000028f4 <deleteNummer>:

void deleteNummer(){
    28f4:	defffd04 	addi	sp,sp,-12
    28f8:	dfc00215 	stw	ra,8(sp)
    28fc:	df000115 	stw	fp,4(sp)
    2900:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    2904:	d8000015 	stw	zero,0(sp)
    2908:	01001e04 	movi	r4,120
    290c:	01400504 	movi	r5,20
    2910:	01803204 	movi	r6,200
    2914:	01c00f04 	movi	r7,60
    2918:	000269c0 	call	269c <VGA_box>
}
    291c:	e037883a 	mov	sp,fp
    2920:	dfc00117 	ldw	ra,4(sp)
    2924:	df000017 	ldw	fp,0(sp)
    2928:	dec00204 	addi	sp,sp,8
    292c:	f800283a 	ret

00002930 <draw_number>:

void draw_number(int nummer, int ID){
    2930:	defffa04 	addi	sp,sp,-24
    2934:	dfc00515 	stw	ra,20(sp)
    2938:	df000415 	stw	fp,16(sp)
    293c:	df000404 	addi	fp,sp,16
    2940:	e13ffe15 	stw	r4,-8(fp)
    2944:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    2948:	e13fff17 	ldw	r4,-4(fp)
    294c:	0002fa40 	call	2fa4 <checkIDScore>
    2950:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    2954:	e0bffe17 	ldw	r2,-8(fp)
    2958:	10800058 	cmpnei	r2,r2,1
    295c:	10000b1e 	bne	r2,zero,298c <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	11000244 	addi	r4,r2,9
    2968:	e0bffd17 	ldw	r2,-12(fp)
    296c:	10c00304 	addi	r3,r2,12
    2970:	00bfffc4 	movi	r2,-1
    2974:	d8800015 	stw	r2,0(sp)
    2978:	01400504 	movi	r5,20
    297c:	180d883a 	mov	r6,r3
    2980:	01c00f04 	movi	r7,60
    2984:	000269c0 	call	269c <VGA_box>
    2988:	00018106 	br	2f90 <draw_number+0x660>
	}else if(nummer == 2){
    298c:	e0bffe17 	ldw	r2,-8(fp)
    2990:	10800098 	cmpnei	r2,r2,2
    2994:	10002f1e 	bne	r2,zero,2a54 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2998:	e0bffd17 	ldw	r2,-12(fp)
    299c:	10c00504 	addi	r3,r2,20
    29a0:	00bfffc4 	movi	r2,-1
    29a4:	d8800015 	stw	r2,0(sp)
    29a8:	e13ffd17 	ldw	r4,-12(fp)
    29ac:	01400504 	movi	r5,20
    29b0:	180d883a 	mov	r6,r3
    29b4:	01c00584 	movi	r7,22
    29b8:	000269c0 	call	269c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    29bc:	e0bffd17 	ldw	r2,-12(fp)
    29c0:	11000484 	addi	r4,r2,18
    29c4:	e0bffd17 	ldw	r2,-12(fp)
    29c8:	10c00504 	addi	r3,r2,20
    29cc:	00bfffc4 	movi	r2,-1
    29d0:	d8800015 	stw	r2,0(sp)
    29d4:	01400584 	movi	r5,22
    29d8:	180d883a 	mov	r6,r3
    29dc:	01c00984 	movi	r7,38
    29e0:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    29e4:	e0bffd17 	ldw	r2,-12(fp)
    29e8:	10c00504 	addi	r3,r2,20
    29ec:	00bfffc4 	movi	r2,-1
    29f0:	d8800015 	stw	r2,0(sp)
    29f4:	e13ffd17 	ldw	r4,-12(fp)
    29f8:	01400984 	movi	r5,38
    29fc:	180d883a 	mov	r6,r3
    2a00:	01c00a04 	movi	r7,40
    2a04:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    2a08:	e0bffd17 	ldw	r2,-12(fp)
    2a0c:	10c00084 	addi	r3,r2,2
    2a10:	00bfffc4 	movi	r2,-1
    2a14:	d8800015 	stw	r2,0(sp)
    2a18:	e13ffd17 	ldw	r4,-12(fp)
    2a1c:	01400a04 	movi	r5,40
    2a20:	180d883a 	mov	r6,r3
    2a24:	01c00e84 	movi	r7,58
    2a28:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2a2c:	e0bffd17 	ldw	r2,-12(fp)
    2a30:	10c00504 	addi	r3,r2,20
    2a34:	00bfffc4 	movi	r2,-1
    2a38:	d8800015 	stw	r2,0(sp)
    2a3c:	e13ffd17 	ldw	r4,-12(fp)
    2a40:	01400e84 	movi	r5,58
    2a44:	180d883a 	mov	r6,r3
    2a48:	01c00f04 	movi	r7,60
    2a4c:	000269c0 	call	269c <VGA_box>
    2a50:	00014f06 	br	2f90 <draw_number+0x660>
	}else if(nummer == 3){
    2a54:	e0bffe17 	ldw	r2,-8(fp)
    2a58:	108000d8 	cmpnei	r2,r2,3
    2a5c:	1000261e 	bne	r2,zero,2af8 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2a60:	e0bffd17 	ldw	r2,-12(fp)
    2a64:	10c00504 	addi	r3,r2,20
    2a68:	00bfffc4 	movi	r2,-1
    2a6c:	d8800015 	stw	r2,0(sp)
    2a70:	e13ffd17 	ldw	r4,-12(fp)
    2a74:	01400504 	movi	r5,20
    2a78:	180d883a 	mov	r6,r3
    2a7c:	01c00584 	movi	r7,22
    2a80:	000269c0 	call	269c <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    2a84:	e0bffd17 	ldw	r2,-12(fp)
    2a88:	11000484 	addi	r4,r2,18
    2a8c:	e0bffd17 	ldw	r2,-12(fp)
    2a90:	10c00504 	addi	r3,r2,20
    2a94:	00bfffc4 	movi	r2,-1
    2a98:	d8800015 	stw	r2,0(sp)
    2a9c:	01400584 	movi	r5,22
    2aa0:	180d883a 	mov	r6,r3
    2aa4:	01c00f04 	movi	r7,60
    2aa8:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    2aac:	e0bffd17 	ldw	r2,-12(fp)
    2ab0:	10c00504 	addi	r3,r2,20
    2ab4:	00bfffc4 	movi	r2,-1
    2ab8:	d8800015 	stw	r2,0(sp)
    2abc:	e13ffd17 	ldw	r4,-12(fp)
    2ac0:	014009c4 	movi	r5,39
    2ac4:	180d883a 	mov	r6,r3
    2ac8:	01c00a44 	movi	r7,41
    2acc:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2ad0:	e0bffd17 	ldw	r2,-12(fp)
    2ad4:	10c00504 	addi	r3,r2,20
    2ad8:	00bfffc4 	movi	r2,-1
    2adc:	d8800015 	stw	r2,0(sp)
    2ae0:	e13ffd17 	ldw	r4,-12(fp)
    2ae4:	01400e84 	movi	r5,58
    2ae8:	180d883a 	mov	r6,r3
    2aec:	01c00f04 	movi	r7,60
    2af0:	000269c0 	call	269c <VGA_box>
    2af4:	00012606 	br	2f90 <draw_number+0x660>
	}else if(nummer == 4){
    2af8:	e0bffe17 	ldw	r2,-8(fp)
    2afc:	10800118 	cmpnei	r2,r2,4
    2b00:	10001d1e 	bne	r2,zero,2b78 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2b04:	e0bffd17 	ldw	r2,-12(fp)
    2b08:	10c00084 	addi	r3,r2,2
    2b0c:	00bfffc4 	movi	r2,-1
    2b10:	d8800015 	stw	r2,0(sp)
    2b14:	e13ffd17 	ldw	r4,-12(fp)
    2b18:	01400504 	movi	r5,20
    2b1c:	180d883a 	mov	r6,r3
    2b20:	01c00a04 	movi	r7,40
    2b24:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2b28:	e0bffd17 	ldw	r2,-12(fp)
    2b2c:	10c00504 	addi	r3,r2,20
    2b30:	00bfffc4 	movi	r2,-1
    2b34:	d8800015 	stw	r2,0(sp)
    2b38:	e13ffd17 	ldw	r4,-12(fp)
    2b3c:	014009c4 	movi	r5,39
    2b40:	180d883a 	mov	r6,r3
    2b44:	01c00a44 	movi	r7,41
    2b48:	000269c0 	call	269c <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2b4c:	e0bffd17 	ldw	r2,-12(fp)
    2b50:	11000484 	addi	r4,r2,18
    2b54:	e0bffd17 	ldw	r2,-12(fp)
    2b58:	10c00504 	addi	r3,r2,20
    2b5c:	00bfffc4 	movi	r2,-1
    2b60:	d8800015 	stw	r2,0(sp)
    2b64:	01400504 	movi	r5,20
    2b68:	180d883a 	mov	r6,r3
    2b6c:	01c00f04 	movi	r7,60
    2b70:	000269c0 	call	269c <VGA_box>
    2b74:	00010606 	br	2f90 <draw_number+0x660>
	}else if(nummer == 5){
    2b78:	e0bffe17 	ldw	r2,-8(fp)
    2b7c:	10800158 	cmpnei	r2,r2,5
    2b80:	10002f1e 	bne	r2,zero,2c40 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2b84:	e0bffd17 	ldw	r2,-12(fp)
    2b88:	10c00504 	addi	r3,r2,20
    2b8c:	00bfffc4 	movi	r2,-1
    2b90:	d8800015 	stw	r2,0(sp)
    2b94:	e13ffd17 	ldw	r4,-12(fp)
    2b98:	01400504 	movi	r5,20
    2b9c:	180d883a 	mov	r6,r3
    2ba0:	01c00584 	movi	r7,22
    2ba4:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    2ba8:	e0bffd17 	ldw	r2,-12(fp)
    2bac:	10c00084 	addi	r3,r2,2
    2bb0:	00bfffc4 	movi	r2,-1
    2bb4:	d8800015 	stw	r2,0(sp)
    2bb8:	e13ffd17 	ldw	r4,-12(fp)
    2bbc:	01400584 	movi	r5,22
    2bc0:	180d883a 	mov	r6,r3
    2bc4:	01c00984 	movi	r7,38
    2bc8:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2bcc:	e0bffd17 	ldw	r2,-12(fp)
    2bd0:	10c00504 	addi	r3,r2,20
    2bd4:	00bfffc4 	movi	r2,-1
    2bd8:	d8800015 	stw	r2,0(sp)
    2bdc:	e13ffd17 	ldw	r4,-12(fp)
    2be0:	01400984 	movi	r5,38
    2be4:	180d883a 	mov	r6,r3
    2be8:	01c00a04 	movi	r7,40
    2bec:	000269c0 	call	269c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    2bf0:	e0bffd17 	ldw	r2,-12(fp)
    2bf4:	11000484 	addi	r4,r2,18
    2bf8:	e0bffd17 	ldw	r2,-12(fp)
    2bfc:	10c00504 	addi	r3,r2,20
    2c00:	00bfffc4 	movi	r2,-1
    2c04:	d8800015 	stw	r2,0(sp)
    2c08:	01400a04 	movi	r5,40
    2c0c:	180d883a 	mov	r6,r3
    2c10:	01c00e84 	movi	r7,58
    2c14:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2c18:	e0bffd17 	ldw	r2,-12(fp)
    2c1c:	10c00504 	addi	r3,r2,20
    2c20:	00bfffc4 	movi	r2,-1
    2c24:	d8800015 	stw	r2,0(sp)
    2c28:	e13ffd17 	ldw	r4,-12(fp)
    2c2c:	01400e84 	movi	r5,58
    2c30:	180d883a 	mov	r6,r3
    2c34:	01c00f04 	movi	r7,60
    2c38:	000269c0 	call	269c <VGA_box>
    2c3c:	0000d406 	br	2f90 <draw_number+0x660>
	}else if(nummer == 6){
    2c40:	e0bffe17 	ldw	r2,-8(fp)
    2c44:	10800198 	cmpnei	r2,r2,6
    2c48:	10002f1e 	bne	r2,zero,2d08 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2c4c:	e0bffd17 	ldw	r2,-12(fp)
    2c50:	10c00084 	addi	r3,r2,2
    2c54:	00bfffc4 	movi	r2,-1
    2c58:	d8800015 	stw	r2,0(sp)
    2c5c:	e13ffd17 	ldw	r4,-12(fp)
    2c60:	01400504 	movi	r5,20
    2c64:	180d883a 	mov	r6,r3
    2c68:	01c00f04 	movi	r7,60
    2c6c:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2c70:	e0bffd17 	ldw	r2,-12(fp)
    2c74:	10c00504 	addi	r3,r2,20
    2c78:	00bfffc4 	movi	r2,-1
    2c7c:	d8800015 	stw	r2,0(sp)
    2c80:	e13ffd17 	ldw	r4,-12(fp)
    2c84:	01400504 	movi	r5,20
    2c88:	180d883a 	mov	r6,r3
    2c8c:	01c00584 	movi	r7,22
    2c90:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2c94:	e0bffd17 	ldw	r2,-12(fp)
    2c98:	10c00504 	addi	r3,r2,20
    2c9c:	00bfffc4 	movi	r2,-1
    2ca0:	d8800015 	stw	r2,0(sp)
    2ca4:	e13ffd17 	ldw	r4,-12(fp)
    2ca8:	01400e84 	movi	r5,58
    2cac:	180d883a 	mov	r6,r3
    2cb0:	01c00f04 	movi	r7,60
    2cb4:	000269c0 	call	269c <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    2cb8:	e0bffd17 	ldw	r2,-12(fp)
    2cbc:	11000484 	addi	r4,r2,18
    2cc0:	e0bffd17 	ldw	r2,-12(fp)
    2cc4:	10c00504 	addi	r3,r2,20
    2cc8:	00bfffc4 	movi	r2,-1
    2ccc:	d8800015 	stw	r2,0(sp)
    2cd0:	01400a04 	movi	r5,40
    2cd4:	180d883a 	mov	r6,r3
    2cd8:	01c00e84 	movi	r7,58
    2cdc:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2ce0:	e0bffd17 	ldw	r2,-12(fp)
    2ce4:	10c00504 	addi	r3,r2,20
    2ce8:	00bfffc4 	movi	r2,-1
    2cec:	d8800015 	stw	r2,0(sp)
    2cf0:	e13ffd17 	ldw	r4,-12(fp)
    2cf4:	014009c4 	movi	r5,39
    2cf8:	180d883a 	mov	r6,r3
    2cfc:	01c00a44 	movi	r7,41
    2d00:	000269c0 	call	269c <VGA_box>
    2d04:	0000a206 	br	2f90 <draw_number+0x660>
	}else if(nummer == 7){
    2d08:	e0bffe17 	ldw	r2,-8(fp)
    2d0c:	108001d8 	cmpnei	r2,r2,7
    2d10:	1000141e 	bne	r2,zero,2d64 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2d14:	e0bffd17 	ldw	r2,-12(fp)
    2d18:	11000484 	addi	r4,r2,18
    2d1c:	e0bffd17 	ldw	r2,-12(fp)
    2d20:	10c00504 	addi	r3,r2,20
    2d24:	00bfffc4 	movi	r2,-1
    2d28:	d8800015 	stw	r2,0(sp)
    2d2c:	01400504 	movi	r5,20
    2d30:	180d883a 	mov	r6,r3
    2d34:	01c00f04 	movi	r7,60
    2d38:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2d3c:	e0bffd17 	ldw	r2,-12(fp)
    2d40:	10c00504 	addi	r3,r2,20
    2d44:	00bfffc4 	movi	r2,-1
    2d48:	d8800015 	stw	r2,0(sp)
    2d4c:	e13ffd17 	ldw	r4,-12(fp)
    2d50:	01400504 	movi	r5,20
    2d54:	180d883a 	mov	r6,r3
    2d58:	01c00584 	movi	r7,22
    2d5c:	000269c0 	call	269c <VGA_box>
    2d60:	00008b06 	br	2f90 <draw_number+0x660>
	}else if(nummer == 8){
    2d64:	e0bffe17 	ldw	r2,-8(fp)
    2d68:	10800218 	cmpnei	r2,r2,8
    2d6c:	10002f1e 	bne	r2,zero,2e2c <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2d70:	e0bffd17 	ldw	r2,-12(fp)
    2d74:	11000484 	addi	r4,r2,18
    2d78:	e0bffd17 	ldw	r2,-12(fp)
    2d7c:	10c00504 	addi	r3,r2,20
    2d80:	00bfffc4 	movi	r2,-1
    2d84:	d8800015 	stw	r2,0(sp)
    2d88:	01400504 	movi	r5,20
    2d8c:	180d883a 	mov	r6,r3
    2d90:	01c00f04 	movi	r7,60
    2d94:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2d98:	e0bffd17 	ldw	r2,-12(fp)
    2d9c:	10c00084 	addi	r3,r2,2
    2da0:	00bfffc4 	movi	r2,-1
    2da4:	d8800015 	stw	r2,0(sp)
    2da8:	e13ffd17 	ldw	r4,-12(fp)
    2dac:	01400504 	movi	r5,20
    2db0:	180d883a 	mov	r6,r3
    2db4:	01c00f04 	movi	r7,60
    2db8:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2dbc:	e0bffd17 	ldw	r2,-12(fp)
    2dc0:	10c00504 	addi	r3,r2,20
    2dc4:	00bfffc4 	movi	r2,-1
    2dc8:	d8800015 	stw	r2,0(sp)
    2dcc:	e13ffd17 	ldw	r4,-12(fp)
    2dd0:	01400504 	movi	r5,20
    2dd4:	180d883a 	mov	r6,r3
    2dd8:	01c00584 	movi	r7,22
    2ddc:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2de0:	e0bffd17 	ldw	r2,-12(fp)
    2de4:	10c00504 	addi	r3,r2,20
    2de8:	00bfffc4 	movi	r2,-1
    2dec:	d8800015 	stw	r2,0(sp)
    2df0:	e13ffd17 	ldw	r4,-12(fp)
    2df4:	014009c4 	movi	r5,39
    2df8:	180d883a 	mov	r6,r3
    2dfc:	01c00a44 	movi	r7,41
    2e00:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2e04:	e0bffd17 	ldw	r2,-12(fp)
    2e08:	10c00504 	addi	r3,r2,20
    2e0c:	00bfffc4 	movi	r2,-1
    2e10:	d8800015 	stw	r2,0(sp)
    2e14:	e13ffd17 	ldw	r4,-12(fp)
    2e18:	01400e84 	movi	r5,58
    2e1c:	180d883a 	mov	r6,r3
    2e20:	01c00f04 	movi	r7,60
    2e24:	000269c0 	call	269c <VGA_box>
    2e28:	00005906 	br	2f90 <draw_number+0x660>
	}else if(nummer == 9){
    2e2c:	e0bffe17 	ldw	r2,-8(fp)
    2e30:	10800258 	cmpnei	r2,r2,9
    2e34:	10002f1e 	bne	r2,zero,2ef4 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2e38:	e0bffd17 	ldw	r2,-12(fp)
    2e3c:	11000484 	addi	r4,r2,18
    2e40:	e0bffd17 	ldw	r2,-12(fp)
    2e44:	10c00504 	addi	r3,r2,20
    2e48:	00bfffc4 	movi	r2,-1
    2e4c:	d8800015 	stw	r2,0(sp)
    2e50:	01400504 	movi	r5,20
    2e54:	180d883a 	mov	r6,r3
    2e58:	01c00f04 	movi	r7,60
    2e5c:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2e60:	e0bffd17 	ldw	r2,-12(fp)
    2e64:	10c00084 	addi	r3,r2,2
    2e68:	00bfffc4 	movi	r2,-1
    2e6c:	d8800015 	stw	r2,0(sp)
    2e70:	e13ffd17 	ldw	r4,-12(fp)
    2e74:	01400504 	movi	r5,20
    2e78:	180d883a 	mov	r6,r3
    2e7c:	01c00a04 	movi	r7,40
    2e80:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2e84:	e0bffd17 	ldw	r2,-12(fp)
    2e88:	10c00504 	addi	r3,r2,20
    2e8c:	00bfffc4 	movi	r2,-1
    2e90:	d8800015 	stw	r2,0(sp)
    2e94:	e13ffd17 	ldw	r4,-12(fp)
    2e98:	01400504 	movi	r5,20
    2e9c:	180d883a 	mov	r6,r3
    2ea0:	01c00584 	movi	r7,22
    2ea4:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2ea8:	e0bffd17 	ldw	r2,-12(fp)
    2eac:	10c00504 	addi	r3,r2,20
    2eb0:	00bfffc4 	movi	r2,-1
    2eb4:	d8800015 	stw	r2,0(sp)
    2eb8:	e13ffd17 	ldw	r4,-12(fp)
    2ebc:	014009c4 	movi	r5,39
    2ec0:	180d883a 	mov	r6,r3
    2ec4:	01c00a44 	movi	r7,41
    2ec8:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2ecc:	e0bffd17 	ldw	r2,-12(fp)
    2ed0:	10c00504 	addi	r3,r2,20
    2ed4:	00bfffc4 	movi	r2,-1
    2ed8:	d8800015 	stw	r2,0(sp)
    2edc:	e13ffd17 	ldw	r4,-12(fp)
    2ee0:	01400e84 	movi	r5,58
    2ee4:	180d883a 	mov	r6,r3
    2ee8:	01c00f04 	movi	r7,60
    2eec:	000269c0 	call	269c <VGA_box>
    2ef0:	00002706 	br	2f90 <draw_number+0x660>
	}else if(nummer == 0){
    2ef4:	e0bffe17 	ldw	r2,-8(fp)
    2ef8:	1000251e 	bne	r2,zero,2f90 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2efc:	e0bffd17 	ldw	r2,-12(fp)
    2f00:	11000484 	addi	r4,r2,18
    2f04:	e0bffd17 	ldw	r2,-12(fp)
    2f08:	10c00504 	addi	r3,r2,20
    2f0c:	00bfffc4 	movi	r2,-1
    2f10:	d8800015 	stw	r2,0(sp)
    2f14:	01400504 	movi	r5,20
    2f18:	180d883a 	mov	r6,r3
    2f1c:	01c00f04 	movi	r7,60
    2f20:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2f24:	e0bffd17 	ldw	r2,-12(fp)
    2f28:	10c00084 	addi	r3,r2,2
    2f2c:	00bfffc4 	movi	r2,-1
    2f30:	d8800015 	stw	r2,0(sp)
    2f34:	e13ffd17 	ldw	r4,-12(fp)
    2f38:	01400504 	movi	r5,20
    2f3c:	180d883a 	mov	r6,r3
    2f40:	01c00f04 	movi	r7,60
    2f44:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2f48:	e0bffd17 	ldw	r2,-12(fp)
    2f4c:	10c00504 	addi	r3,r2,20
    2f50:	00bfffc4 	movi	r2,-1
    2f54:	d8800015 	stw	r2,0(sp)
    2f58:	e13ffd17 	ldw	r4,-12(fp)
    2f5c:	01400504 	movi	r5,20
    2f60:	180d883a 	mov	r6,r3
    2f64:	01c00584 	movi	r7,22
    2f68:	000269c0 	call	269c <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2f6c:	e0bffd17 	ldw	r2,-12(fp)
    2f70:	10c00504 	addi	r3,r2,20
    2f74:	00bfffc4 	movi	r2,-1
    2f78:	d8800015 	stw	r2,0(sp)
    2f7c:	e13ffd17 	ldw	r4,-12(fp)
    2f80:	01400e84 	movi	r5,58
    2f84:	180d883a 	mov	r6,r3
    2f88:	01c00f04 	movi	r7,60
    2f8c:	000269c0 	call	269c <VGA_box>
	}
}
    2f90:	e037883a 	mov	sp,fp
    2f94:	dfc00117 	ldw	ra,4(sp)
    2f98:	df000017 	ldw	fp,0(sp)
    2f9c:	dec00204 	addi	sp,sp,8
    2fa0:	f800283a 	ret

00002fa4 <checkIDScore>:

int checkIDScore(int ID){
    2fa4:	defffe04 	addi	sp,sp,-8
    2fa8:	df000115 	stw	fp,4(sp)
    2fac:	df000104 	addi	fp,sp,4
    2fb0:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    2fb4:	e0bfff17 	ldw	r2,-4(fp)
    2fb8:	10800058 	cmpnei	r2,r2,1
    2fbc:	1000021e 	bne	r2,zero,2fc8 <checkIDScore+0x24>
		return 120;
    2fc0:	00801e04 	movi	r2,120
    2fc4:	00000b06 	br	2ff4 <checkIDScore+0x50>
	}else if(ID == 2){
    2fc8:	e0bfff17 	ldw	r2,-4(fp)
    2fcc:	10800098 	cmpnei	r2,r2,2
    2fd0:	1000021e 	bne	r2,zero,2fdc <checkIDScore+0x38>
		return 150;
    2fd4:	00802584 	movi	r2,150
    2fd8:	00000606 	br	2ff4 <checkIDScore+0x50>
	}else if(ID == 3){
    2fdc:	e0bfff17 	ldw	r2,-4(fp)
    2fe0:	108000d8 	cmpnei	r2,r2,3
    2fe4:	1000021e 	bne	r2,zero,2ff0 <checkIDScore+0x4c>
		return 180;
    2fe8:	00802d04 	movi	r2,180
    2fec:	00000106 	br	2ff4 <checkIDScore+0x50>
	}
	
	return 0;
    2ff0:	0005883a 	mov	r2,zero
}
    2ff4:	e037883a 	mov	sp,fp
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00104 	addi	sp,sp,4
    3000:	f800283a 	ret

00003004 <_printf_r>:
    3004:	defffd04 	addi	sp,sp,-12
    3008:	dfc00015 	stw	ra,0(sp)
    300c:	d9800115 	stw	r6,4(sp)
    3010:	d9c00215 	stw	r7,8(sp)
    3014:	280d883a 	mov	r6,r5
    3018:	21400217 	ldw	r5,8(r4)
    301c:	d9c00104 	addi	r7,sp,4
    3020:	00052140 	call	5214 <___vfprintf_internal_r>
    3024:	dfc00017 	ldw	ra,0(sp)
    3028:	dec00304 	addi	sp,sp,12
    302c:	f800283a 	ret

00003030 <printf>:
    3030:	defffc04 	addi	sp,sp,-16
    3034:	dfc00015 	stw	ra,0(sp)
    3038:	d9400115 	stw	r5,4(sp)
    303c:	d9800215 	stw	r6,8(sp)
    3040:	d9c00315 	stw	r7,12(sp)
    3044:	008000b4 	movhi	r2,2
    3048:	10889604 	addi	r2,r2,8792
    304c:	10800017 	ldw	r2,0(r2)
    3050:	200b883a 	mov	r5,r4
    3054:	d9800104 	addi	r6,sp,4
    3058:	11000217 	ldw	r4,8(r2)
    305c:	00071640 	call	7164 <__vfprintf_internal>
    3060:	dfc00017 	ldw	ra,0(sp)
    3064:	dec00404 	addi	sp,sp,16
    3068:	f800283a 	ret

0000306c <_puts_r>:
    306c:	defff604 	addi	sp,sp,-40
    3070:	dc000715 	stw	r16,28(sp)
    3074:	2021883a 	mov	r16,r4
    3078:	2809883a 	mov	r4,r5
    307c:	dc400815 	stw	r17,32(sp)
    3080:	dfc00915 	stw	ra,36(sp)
    3084:	2823883a 	mov	r17,r5
    3088:	00031ec0 	call	31ec <strlen>
    308c:	81400217 	ldw	r5,8(r16)
    3090:	11000044 	addi	r4,r2,1
    3094:	d8800115 	stw	r2,4(sp)
    3098:	008000b4 	movhi	r2,2
    309c:	2980030b 	ldhu	r6,12(r5)
    30a0:	10bf7b04 	addi	r2,r2,-532
    30a4:	d8800215 	stw	r2,8(sp)
    30a8:	00800044 	movi	r2,1
    30ac:	d8800315 	stw	r2,12(sp)
    30b0:	00800084 	movi	r2,2
    30b4:	d8800515 	stw	r2,20(sp)
    30b8:	dc400015 	stw	r17,0(sp)
    30bc:	d9000615 	stw	r4,24(sp)
    30c0:	dec00415 	stw	sp,16(sp)
    30c4:	3088000c 	andi	r2,r6,8192
    30c8:	1000061e 	bne	r2,zero,30e4 <_puts_r+0x78>
    30cc:	29001917 	ldw	r4,100(r5)
    30d0:	00b7ffc4 	movi	r2,-8193
    30d4:	31880014 	ori	r6,r6,8192
    30d8:	2084703a 	and	r2,r4,r2
    30dc:	2980030d 	sth	r6,12(r5)
    30e0:	28801915 	stw	r2,100(r5)
    30e4:	8009883a 	mov	r4,r16
    30e8:	d9800404 	addi	r6,sp,16
    30ec:	00097080 	call	9708 <__sfvwrite_r>
    30f0:	1000061e 	bne	r2,zero,310c <_puts_r+0xa0>
    30f4:	00800284 	movi	r2,10
    30f8:	dfc00917 	ldw	ra,36(sp)
    30fc:	dc400817 	ldw	r17,32(sp)
    3100:	dc000717 	ldw	r16,28(sp)
    3104:	dec00a04 	addi	sp,sp,40
    3108:	f800283a 	ret
    310c:	00bfffc4 	movi	r2,-1
    3110:	003ff906 	br	30f8 <__alt_mem_Flash_flash_data+0xf40030f8>

00003114 <puts>:
    3114:	008000b4 	movhi	r2,2
    3118:	10889604 	addi	r2,r2,8792
    311c:	200b883a 	mov	r5,r4
    3120:	11000017 	ldw	r4,0(r2)
    3124:	000306c1 	jmpi	306c <_puts_r>

00003128 <_sprintf_r>:
    3128:	deffe404 	addi	sp,sp,-112
    312c:	2807883a 	mov	r3,r5
    3130:	dfc01a15 	stw	ra,104(sp)
    3134:	d9c01b15 	stw	r7,108(sp)
    3138:	00a00034 	movhi	r2,32768
    313c:	10bfffc4 	addi	r2,r2,-1
    3140:	02008204 	movi	r8,520
    3144:	d8800215 	stw	r2,8(sp)
    3148:	d8800515 	stw	r2,20(sp)
    314c:	d80b883a 	mov	r5,sp
    3150:	d9c01b04 	addi	r7,sp,108
    3154:	00bfffc4 	movi	r2,-1
    3158:	d8c00015 	stw	r3,0(sp)
    315c:	d8c00415 	stw	r3,16(sp)
    3160:	da00030d 	sth	r8,12(sp)
    3164:	d880038d 	sth	r2,14(sp)
    3168:	00032840 	call	3284 <___svfprintf_internal_r>
    316c:	d8c00017 	ldw	r3,0(sp)
    3170:	18000005 	stb	zero,0(r3)
    3174:	dfc01a17 	ldw	ra,104(sp)
    3178:	dec01c04 	addi	sp,sp,112
    317c:	f800283a 	ret

00003180 <sprintf>:
    3180:	deffe304 	addi	sp,sp,-116
    3184:	2007883a 	mov	r3,r4
    3188:	dfc01a15 	stw	ra,104(sp)
    318c:	d9801b15 	stw	r6,108(sp)
    3190:	d9c01c15 	stw	r7,112(sp)
    3194:	010000b4 	movhi	r4,2
    3198:	21089604 	addi	r4,r4,8792
    319c:	21000017 	ldw	r4,0(r4)
    31a0:	00a00034 	movhi	r2,32768
    31a4:	10bfffc4 	addi	r2,r2,-1
    31a8:	280d883a 	mov	r6,r5
    31ac:	02008204 	movi	r8,520
    31b0:	d8800215 	stw	r2,8(sp)
    31b4:	d8800515 	stw	r2,20(sp)
    31b8:	d80b883a 	mov	r5,sp
    31bc:	d9c01b04 	addi	r7,sp,108
    31c0:	00bfffc4 	movi	r2,-1
    31c4:	d8c00015 	stw	r3,0(sp)
    31c8:	d8c00415 	stw	r3,16(sp)
    31cc:	da00030d 	sth	r8,12(sp)
    31d0:	d880038d 	sth	r2,14(sp)
    31d4:	00032840 	call	3284 <___svfprintf_internal_r>
    31d8:	d8c00017 	ldw	r3,0(sp)
    31dc:	18000005 	stb	zero,0(r3)
    31e0:	dfc01a17 	ldw	ra,104(sp)
    31e4:	dec01d04 	addi	sp,sp,116
    31e8:	f800283a 	ret

000031ec <strlen>:
    31ec:	208000cc 	andi	r2,r4,3
    31f0:	10002026 	beq	r2,zero,3274 <strlen+0x88>
    31f4:	20800007 	ldb	r2,0(r4)
    31f8:	10002026 	beq	r2,zero,327c <strlen+0x90>
    31fc:	2005883a 	mov	r2,r4
    3200:	00000206 	br	320c <strlen+0x20>
    3204:	10c00007 	ldb	r3,0(r2)
    3208:	18001826 	beq	r3,zero,326c <strlen+0x80>
    320c:	10800044 	addi	r2,r2,1
    3210:	10c000cc 	andi	r3,r2,3
    3214:	183ffb1e 	bne	r3,zero,3204 <__alt_mem_Flash_flash_data+0xf4003204>
    3218:	10c00017 	ldw	r3,0(r2)
    321c:	01ffbff4 	movhi	r7,65279
    3220:	39ffbfc4 	addi	r7,r7,-257
    3224:	00ca303a 	nor	r5,zero,r3
    3228:	01a02074 	movhi	r6,32897
    322c:	19c7883a 	add	r3,r3,r7
    3230:	31a02004 	addi	r6,r6,-32640
    3234:	1946703a 	and	r3,r3,r5
    3238:	1986703a 	and	r3,r3,r6
    323c:	1800091e 	bne	r3,zero,3264 <strlen+0x78>
    3240:	10800104 	addi	r2,r2,4
    3244:	10c00017 	ldw	r3,0(r2)
    3248:	19cb883a 	add	r5,r3,r7
    324c:	00c6303a 	nor	r3,zero,r3
    3250:	28c6703a 	and	r3,r5,r3
    3254:	1986703a 	and	r3,r3,r6
    3258:	183ff926 	beq	r3,zero,3240 <__alt_mem_Flash_flash_data+0xf4003240>
    325c:	00000106 	br	3264 <strlen+0x78>
    3260:	10800044 	addi	r2,r2,1
    3264:	10c00007 	ldb	r3,0(r2)
    3268:	183ffd1e 	bne	r3,zero,3260 <__alt_mem_Flash_flash_data+0xf4003260>
    326c:	1105c83a 	sub	r2,r2,r4
    3270:	f800283a 	ret
    3274:	2005883a 	mov	r2,r4
    3278:	003fe706 	br	3218 <__alt_mem_Flash_flash_data+0xf4003218>
    327c:	0005883a 	mov	r2,zero
    3280:	f800283a 	ret

00003284 <___svfprintf_internal_r>:
    3284:	deffb504 	addi	sp,sp,-300
    3288:	dfc04a15 	stw	ra,296(sp)
    328c:	ddc04815 	stw	r23,288(sp)
    3290:	d9002f15 	stw	r4,188(sp)
    3294:	282f883a 	mov	r23,r5
    3298:	d9802915 	stw	r6,164(sp)
    329c:	d9c02d15 	stw	r7,180(sp)
    32a0:	df004915 	stw	fp,292(sp)
    32a4:	dd804715 	stw	r22,284(sp)
    32a8:	dd404615 	stw	r21,280(sp)
    32ac:	dd004515 	stw	r20,276(sp)
    32b0:	dcc04415 	stw	r19,272(sp)
    32b4:	dc804315 	stw	r18,268(sp)
    32b8:	dc404215 	stw	r17,264(sp)
    32bc:	dc004115 	stw	r16,260(sp)
    32c0:	0009dfc0 	call	9dfc <_localeconv_r>
    32c4:	10800017 	ldw	r2,0(r2)
    32c8:	1009883a 	mov	r4,r2
    32cc:	d8803515 	stw	r2,212(sp)
    32d0:	00031ec0 	call	31ec <strlen>
    32d4:	d8803915 	stw	r2,228(sp)
    32d8:	b880030b 	ldhu	r2,12(r23)
    32dc:	1080200c 	andi	r2,r2,128
    32e0:	10000226 	beq	r2,zero,32ec <___svfprintf_internal_r+0x68>
    32e4:	b8800417 	ldw	r2,16(r23)
    32e8:	10065f26 	beq	r2,zero,4c68 <___svfprintf_internal_r+0x19e4>
    32ec:	db001dc4 	addi	r12,sp,119
    32f0:	dd801e04 	addi	r22,sp,120
    32f4:	d8800404 	addi	r2,sp,16
    32f8:	050000b4 	movhi	r20,2
    32fc:	b317c83a 	sub	r11,r22,r12
    3300:	a53f8c84 	addi	r20,r20,-462
    3304:	db002815 	stw	r12,160(sp)
    3308:	d8801e15 	stw	r2,120(sp)
    330c:	d8002015 	stw	zero,128(sp)
    3310:	d8001f15 	stw	zero,124(sp)
    3314:	d8003315 	stw	zero,204(sp)
    3318:	d8003715 	stw	zero,220(sp)
    331c:	d8003815 	stw	zero,224(sp)
    3320:	1011883a 	mov	r8,r2
    3324:	d8003b15 	stw	zero,236(sp)
    3328:	d8003a15 	stw	zero,232(sp)
    332c:	d8003015 	stw	zero,192(sp)
    3330:	dac03d15 	stw	r11,244(sp)
    3334:	db002917 	ldw	r12,164(sp)
    3338:	60800007 	ldb	r2,0(r12)
    333c:	1000ab26 	beq	r2,zero,35ec <___svfprintf_internal_r+0x368>
    3340:	00c00944 	movi	r3,37
    3344:	10c0a926 	beq	r2,r3,35ec <___svfprintf_internal_r+0x368>
    3348:	6021883a 	mov	r16,r12
    334c:	00000106 	br	3354 <___svfprintf_internal_r+0xd0>
    3350:	10c08426 	beq	r2,r3,3564 <___svfprintf_internal_r+0x2e0>
    3354:	84000044 	addi	r16,r16,1
    3358:	80800007 	ldb	r2,0(r16)
    335c:	103ffc1e 	bne	r2,zero,3350 <__alt_mem_Flash_flash_data+0xf4003350>
    3360:	dac02917 	ldw	r11,164(sp)
    3364:	82e3c83a 	sub	r17,r16,r11
    3368:	88000f26 	beq	r17,zero,33a8 <___svfprintf_internal_r+0x124>
    336c:	d8c02017 	ldw	r3,128(sp)
    3370:	d8801f17 	ldw	r2,124(sp)
    3374:	dac02917 	ldw	r11,164(sp)
    3378:	1c47883a 	add	r3,r3,r17
    337c:	10800044 	addi	r2,r2,1
    3380:	d8c02015 	stw	r3,128(sp)
    3384:	42c00015 	stw	r11,0(r8)
    3388:	44400115 	stw	r17,4(r8)
    338c:	d8801f15 	stw	r2,124(sp)
    3390:	00c001c4 	movi	r3,7
    3394:	18807616 	blt	r3,r2,3570 <___svfprintf_internal_r+0x2ec>
    3398:	42000204 	addi	r8,r8,8
    339c:	db003017 	ldw	r12,192(sp)
    33a0:	6459883a 	add	r12,r12,r17
    33a4:	db003015 	stw	r12,192(sp)
    33a8:	80800007 	ldb	r2,0(r16)
    33ac:	10007726 	beq	r2,zero,358c <___svfprintf_internal_r+0x308>
    33b0:	80800044 	addi	r2,r16,1
    33b4:	84000047 	ldb	r16,1(r16)
    33b8:	d8002785 	stb	zero,158(sp)
    33bc:	000d883a 	mov	r6,zero
    33c0:	027fffc4 	movi	r9,-1
    33c4:	d8002e15 	stw	zero,184(sp)
    33c8:	0023883a 	mov	r17,zero
    33cc:	01001604 	movi	r4,88
    33d0:	01400244 	movi	r5,9
    33d4:	02800a84 	movi	r10,42
    33d8:	01c01b04 	movi	r7,108
    33dc:	10c00044 	addi	r3,r2,1
    33e0:	80bff804 	addi	r2,r16,-32
    33e4:	2082e636 	bltu	r4,r2,3f80 <___svfprintf_internal_r+0xcfc>
    33e8:	100490ba 	slli	r2,r2,2
    33ec:	02c00034 	movhi	r11,0
    33f0:	5acd0004 	addi	r11,r11,13312
    33f4:	12c5883a 	add	r2,r2,r11
    33f8:	10800017 	ldw	r2,0(r2)
    33fc:	1000683a 	jmp	r2
    3400:	00003d60 	cmpeqi	zero,zero,245
    3404:	00003f80 	call	3f8 <controller+0x5c>
    3408:	00003f80 	call	3f8 <controller+0x5c>
    340c:	00003d80 	call	3d8 <controller+0x3c>
    3410:	00003f80 	call	3f8 <controller+0x5c>
    3414:	00003f80 	call	3f8 <controller+0x5c>
    3418:	00003f80 	call	3f8 <controller+0x5c>
    341c:	00003f80 	call	3f8 <controller+0x5c>
    3420:	00003f80 	call	3f8 <controller+0x5c>
    3424:	00003f80 	call	3f8 <controller+0x5c>
    3428:	00003d90 	cmplti	zero,zero,246
    342c:	00003dbc 	xorhi	zero,zero,246
    3430:	00003f80 	call	3f8 <controller+0x5c>
    3434:	000035f4 	movhi	zero,215
    3438:	00003604 	movi	zero,216
    343c:	00003f80 	call	3f8 <controller+0x5c>
    3440:	00003644 	movi	zero,217
    3444:	00003c24 	muli	zero,zero,240
    3448:	00003c24 	muli	zero,zero,240
    344c:	00003c24 	muli	zero,zero,240
    3450:	00003c24 	muli	zero,zero,240
    3454:	00003c24 	muli	zero,zero,240
    3458:	00003c24 	muli	zero,zero,240
    345c:	00003c24 	muli	zero,zero,240
    3460:	00003c24 	muli	zero,zero,240
    3464:	00003c24 	muli	zero,zero,240
    3468:	00003f80 	call	3f8 <controller+0x5c>
    346c:	00003f80 	call	3f8 <controller+0x5c>
    3470:	00003f80 	call	3f8 <controller+0x5c>
    3474:	00003f80 	call	3f8 <controller+0x5c>
    3478:	00003f80 	call	3f8 <controller+0x5c>
    347c:	00003f80 	call	3f8 <controller+0x5c>
    3480:	00003f80 	call	3f8 <controller+0x5c>
    3484:	00003f80 	call	3f8 <controller+0x5c>
    3488:	00003f80 	call	3f8 <controller+0x5c>
    348c:	00003f80 	call	3f8 <controller+0x5c>
    3490:	00003654 	movui	zero,217
    3494:	00003ad4 	movui	zero,235
    3498:	00003f80 	call	3f8 <controller+0x5c>
    349c:	00003ad4 	movui	zero,235
    34a0:	00003f80 	call	3f8 <controller+0x5c>
    34a4:	00003f80 	call	3f8 <controller+0x5c>
    34a8:	00003f80 	call	3f8 <controller+0x5c>
    34ac:	00003f80 	call	3f8 <controller+0x5c>
    34b0:	00003b78 	rdprs	zero,zero,237
    34b4:	00003f80 	call	3f8 <controller+0x5c>
    34b8:	00003f80 	call	3f8 <controller+0x5c>
    34bc:	00003f14 	movui	zero,252
    34c0:	00003f80 	call	3f8 <controller+0x5c>
    34c4:	00003f80 	call	3f8 <controller+0x5c>
    34c8:	00003f80 	call	3f8 <controller+0x5c>
    34cc:	00003f80 	call	3f8 <controller+0x5c>
    34d0:	00003f80 	call	3f8 <controller+0x5c>
    34d4:	00003b88 	cmpgei	zero,zero,238
    34d8:	00003f80 	call	3f8 <controller+0x5c>
    34dc:	00003f80 	call	3f8 <controller+0x5c>
    34e0:	00003bc8 	cmpgei	zero,zero,239
    34e4:	00003f80 	call	3f8 <controller+0x5c>
    34e8:	00003f80 	call	3f8 <controller+0x5c>
    34ec:	00003f80 	call	3f8 <controller+0x5c>
    34f0:	00003f80 	call	3f8 <controller+0x5c>
    34f4:	00003f80 	call	3f8 <controller+0x5c>
    34f8:	00003f80 	call	3f8 <controller+0x5c>
    34fc:	00003f80 	call	3f8 <controller+0x5c>
    3500:	00003f80 	call	3f8 <controller+0x5c>
    3504:	00003f80 	call	3f8 <controller+0x5c>
    3508:	00003f80 	call	3f8 <controller+0x5c>
    350c:	00003e6c 	andhi	zero,zero,249
    3510:	00003eac 	andhi	zero,zero,250
    3514:	00003ad4 	movui	zero,235
    3518:	00003ad4 	movui	zero,235
    351c:	00003ad4 	movui	zero,235
    3520:	00003dcc 	andi	zero,zero,247
    3524:	00003eac 	andhi	zero,zero,250
    3528:	00003f80 	call	3f8 <controller+0x5c>
    352c:	00003f80 	call	3f8 <controller+0x5c>
    3530:	00003ddc 	xori	zero,zero,247
    3534:	00003f80 	call	3f8 <controller+0x5c>
    3538:	00003df0 	cmpltui	zero,zero,247
    353c:	00003f44 	movi	zero,253
    3540:	00003e24 	muli	zero,zero,248
    3544:	00003c58 	cmpnei	zero,zero,241
    3548:	00003f80 	call	3f8 <controller+0x5c>
    354c:	00003c68 	cmpgeui	zero,zero,241
    3550:	00003f80 	call	3f8 <controller+0x5c>
    3554:	00003ce0 	cmpeqi	zero,zero,243
    3558:	00003f80 	call	3f8 <controller+0x5c>
    355c:	00003f80 	call	3f8 <controller+0x5c>
    3560:	00003d20 	cmpeqi	zero,zero,244
    3564:	db002917 	ldw	r12,164(sp)
    3568:	8323c83a 	sub	r17,r16,r12
    356c:	003f7e06 	br	3368 <__alt_mem_Flash_flash_data+0xf4003368>
    3570:	d9002f17 	ldw	r4,188(sp)
    3574:	b80b883a 	mov	r5,r23
    3578:	b00d883a 	mov	r6,r22
    357c:	000c3e00 	call	c3e0 <__ssprint_r>
    3580:	1000081e 	bne	r2,zero,35a4 <___svfprintf_internal_r+0x320>
    3584:	da000404 	addi	r8,sp,16
    3588:	003f8406 	br	339c <__alt_mem_Flash_flash_data+0xf400339c>
    358c:	d8802017 	ldw	r2,128(sp)
    3590:	10000426 	beq	r2,zero,35a4 <___svfprintf_internal_r+0x320>
    3594:	d9002f17 	ldw	r4,188(sp)
    3598:	b80b883a 	mov	r5,r23
    359c:	d9801e04 	addi	r6,sp,120
    35a0:	000c3e00 	call	c3e0 <__ssprint_r>
    35a4:	b880030b 	ldhu	r2,12(r23)
    35a8:	1080100c 	andi	r2,r2,64
    35ac:	10000d1e 	bne	r2,zero,35e4 <___svfprintf_internal_r+0x360>
    35b0:	d8803017 	ldw	r2,192(sp)
    35b4:	dfc04a17 	ldw	ra,296(sp)
    35b8:	df004917 	ldw	fp,292(sp)
    35bc:	ddc04817 	ldw	r23,288(sp)
    35c0:	dd804717 	ldw	r22,284(sp)
    35c4:	dd404617 	ldw	r21,280(sp)
    35c8:	dd004517 	ldw	r20,276(sp)
    35cc:	dcc04417 	ldw	r19,272(sp)
    35d0:	dc804317 	ldw	r18,268(sp)
    35d4:	dc404217 	ldw	r17,264(sp)
    35d8:	dc004117 	ldw	r16,260(sp)
    35dc:	dec04b04 	addi	sp,sp,300
    35e0:	f800283a 	ret
    35e4:	00bfffc4 	movi	r2,-1
    35e8:	003ff206 	br	35b4 <__alt_mem_Flash_flash_data+0xf40035b4>
    35ec:	dc002917 	ldw	r16,164(sp)
    35f0:	003f6d06 	br	33a8 <__alt_mem_Flash_flash_data+0xf40033a8>
    35f4:	1805883a 	mov	r2,r3
    35f8:	8c400114 	ori	r17,r17,4
    35fc:	1c000007 	ldb	r16,0(r3)
    3600:	003f7606 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3604:	1c000007 	ldb	r16,0(r3)
    3608:	18800044 	addi	r2,r3,1
    360c:	8286e726 	beq	r16,r10,51ac <___svfprintf_internal_r+0x1f28>
    3610:	82fff404 	addi	r11,r16,-48
    3614:	1007883a 	mov	r3,r2
    3618:	0013883a 	mov	r9,zero
    361c:	2aff7036 	bltu	r5,r11,33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3620:	1c000007 	ldb	r16,0(r3)
    3624:	4a4002a4 	muli	r9,r9,10
    3628:	18c00044 	addi	r3,r3,1
    362c:	5a53883a 	add	r9,r11,r9
    3630:	82fff404 	addi	r11,r16,-48
    3634:	2afffa2e 	bgeu	r5,r11,3620 <__alt_mem_Flash_flash_data+0xf4003620>
    3638:	483f690e 	bge	r9,zero,33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    363c:	027fffc4 	movi	r9,-1
    3640:	003f6706 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3644:	8c402014 	ori	r17,r17,128
    3648:	1805883a 	mov	r2,r3
    364c:	1c000007 	ldb	r16,0(r3)
    3650:	003f6206 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3654:	8c400414 	ori	r17,r17,16
    3658:	d8c02915 	stw	r3,164(sp)
    365c:	d9802785 	stb	r6,158(sp)
    3660:	8880080c 	andi	r2,r17,32
    3664:	d8c02d17 	ldw	r3,180(sp)
    3668:	10021526 	beq	r2,zero,3ec0 <___svfprintf_internal_r+0xc3c>
    366c:	db002d17 	ldw	r12,180(sp)
    3670:	18800117 	ldw	r2,4(r3)
    3674:	1cc00017 	ldw	r19,0(r3)
    3678:	63000204 	addi	r12,r12,8
    367c:	db002d15 	stw	r12,180(sp)
    3680:	1039883a 	mov	fp,r2
    3684:	10021916 	blt	r2,zero,3eec <___svfprintf_internal_r+0xc68>
    3688:	dd402783 	ldbu	r21,158(sp)
    368c:	da403215 	stw	r9,200(sp)
    3690:	00800044 	movi	r2,1
    3694:	9f06b03a 	or	r3,r19,fp
    3698:	48000216 	blt	r9,zero,36a4 <___svfprintf_internal_r+0x420>
    369c:	013fdfc4 	movi	r4,-129
    36a0:	8922703a 	and	r17,r17,r4
    36a4:	1802461e 	bne	r3,zero,3fc0 <___svfprintf_internal_r+0xd3c>
    36a8:	48035426 	beq	r9,zero,43fc <___svfprintf_internal_r+0x1178>
    36ac:	10803fcc 	andi	r2,r2,255
    36b0:	00c00044 	movi	r3,1
    36b4:	10c26726 	beq	r2,r3,4054 <___svfprintf_internal_r+0xdd0>
    36b8:	00c00084 	movi	r3,2
    36bc:	10c2ea26 	beq	r2,r3,4268 <___svfprintf_internal_r+0xfe4>
    36c0:	b007883a 	mov	r3,r22
    36c4:	9808d0fa 	srli	r4,r19,3
    36c8:	e00a977a 	slli	r5,fp,29
    36cc:	e038d0fa 	srli	fp,fp,3
    36d0:	9cc001cc 	andi	r19,r19,7
    36d4:	98800c04 	addi	r2,r19,48
    36d8:	18ffffc4 	addi	r3,r3,-1
    36dc:	2926b03a 	or	r19,r5,r4
    36e0:	18800005 	stb	r2,0(r3)
    36e4:	9f08b03a 	or	r4,r19,fp
    36e8:	203ff61e 	bne	r4,zero,36c4 <__alt_mem_Flash_flash_data+0xf40036c4>
    36ec:	8900004c 	andi	r4,r17,1
    36f0:	d8c03115 	stw	r3,196(sp)
    36f4:	2002ea26 	beq	r4,zero,42a0 <___svfprintf_internal_r+0x101c>
    36f8:	10803fcc 	andi	r2,r2,255
    36fc:	1080201c 	xori	r2,r2,128
    3700:	10bfe004 	addi	r2,r2,-128
    3704:	01000c04 	movi	r4,48
    3708:	11057526 	beq	r2,r4,4ce0 <___svfprintf_internal_r+0x1a5c>
    370c:	dac03117 	ldw	r11,196(sp)
    3710:	193fffc5 	stb	r4,-1(r3)
    3714:	5affffc4 	addi	r11,r11,-1
    3718:	dac03115 	stw	r11,196(sp)
    371c:	b2e5c83a 	sub	r18,r22,r11
    3720:	9005883a 	mov	r2,r18
    3724:	9240010e 	bge	r18,r9,372c <___svfprintf_internal_r+0x4a8>
    3728:	4805883a 	mov	r2,r9
    372c:	d8802a15 	stw	r2,168(sp)
    3730:	d8003415 	stw	zero,208(sp)
    3734:	a8803fcc 	andi	r2,r21,255
    3738:	1080201c 	xori	r2,r2,128
    373c:	10bfe004 	addi	r2,r2,-128
    3740:	10000326 	beq	r2,zero,3750 <___svfprintf_internal_r+0x4cc>
    3744:	d8c02a17 	ldw	r3,168(sp)
    3748:	18c00044 	addi	r3,r3,1
    374c:	d8c02a15 	stw	r3,168(sp)
    3750:	8ac0008c 	andi	r11,r17,2
    3754:	dac02b15 	stw	r11,172(sp)
    3758:	58000326 	beq	r11,zero,3768 <___svfprintf_internal_r+0x4e4>
    375c:	db002a17 	ldw	r12,168(sp)
    3760:	63000084 	addi	r12,r12,2
    3764:	db002a15 	stw	r12,168(sp)
    3768:	88c0210c 	andi	r3,r17,132
    376c:	d8c02c15 	stw	r3,176(sp)
    3770:	1802111e 	bne	r3,zero,3fb8 <___svfprintf_internal_r+0xd34>
    3774:	dac02e17 	ldw	r11,184(sp)
    3778:	db002a17 	ldw	r12,168(sp)
    377c:	5b39c83a 	sub	fp,r11,r12
    3780:	07020d0e 	bge	zero,fp,3fb8 <___svfprintf_internal_r+0xd34>
    3784:	02400404 	movi	r9,16
    3788:	d8c02017 	ldw	r3,128(sp)
    378c:	d8801f17 	ldw	r2,124(sp)
    3790:	4f058c0e 	bge	r9,fp,4dc4 <___svfprintf_internal_r+0x1b40>
    3794:	014000b4 	movhi	r5,2
    3798:	e009883a 	mov	r4,fp
    379c:	297f9084 	addi	r5,r5,-446
    37a0:	dc003c15 	stw	r16,240(sp)
    37a4:	9039883a 	mov	fp,r18
    37a8:	d9403615 	stw	r5,216(sp)
    37ac:	8825883a 	mov	r18,r17
    37b0:	482b883a 	mov	r21,r9
    37b4:	04c001c4 	movi	r19,7
    37b8:	dc002f17 	ldw	r16,188(sp)
    37bc:	2023883a 	mov	r17,r4
    37c0:	00000306 	br	37d0 <___svfprintf_internal_r+0x54c>
    37c4:	8c7ffc04 	addi	r17,r17,-16
    37c8:	42000204 	addi	r8,r8,8
    37cc:	ac40130e 	bge	r21,r17,381c <___svfprintf_internal_r+0x598>
    37d0:	02c000b4 	movhi	r11,2
    37d4:	18c00404 	addi	r3,r3,16
    37d8:	10800044 	addi	r2,r2,1
    37dc:	5aff9084 	addi	r11,r11,-446
    37e0:	42c00015 	stw	r11,0(r8)
    37e4:	45400115 	stw	r21,4(r8)
    37e8:	d8c02015 	stw	r3,128(sp)
    37ec:	d8801f15 	stw	r2,124(sp)
    37f0:	98bff40e 	bge	r19,r2,37c4 <__alt_mem_Flash_flash_data+0xf40037c4>
    37f4:	8009883a 	mov	r4,r16
    37f8:	b80b883a 	mov	r5,r23
    37fc:	b00d883a 	mov	r6,r22
    3800:	000c3e00 	call	c3e0 <__ssprint_r>
    3804:	103f671e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    3808:	8c7ffc04 	addi	r17,r17,-16
    380c:	d8c02017 	ldw	r3,128(sp)
    3810:	d8801f17 	ldw	r2,124(sp)
    3814:	da000404 	addi	r8,sp,16
    3818:	ac7fed16 	blt	r21,r17,37d0 <__alt_mem_Flash_flash_data+0xf40037d0>
    381c:	dc003c17 	ldw	r16,240(sp)
    3820:	8809883a 	mov	r4,r17
    3824:	9023883a 	mov	r17,r18
    3828:	e025883a 	mov	r18,fp
    382c:	2039883a 	mov	fp,r4
    3830:	db003617 	ldw	r12,216(sp)
    3834:	e0c7883a 	add	r3,fp,r3
    3838:	10800044 	addi	r2,r2,1
    383c:	43000015 	stw	r12,0(r8)
    3840:	47000115 	stw	fp,4(r8)
    3844:	d8c02015 	stw	r3,128(sp)
    3848:	d8801f15 	stw	r2,124(sp)
    384c:	010001c4 	movi	r4,7
    3850:	20834416 	blt	r4,r2,4564 <___svfprintf_internal_r+0x12e0>
    3854:	d8802787 	ldb	r2,158(sp)
    3858:	42000204 	addi	r8,r8,8
    385c:	10000c26 	beq	r2,zero,3890 <___svfprintf_internal_r+0x60c>
    3860:	d8801f17 	ldw	r2,124(sp)
    3864:	d9002784 	addi	r4,sp,158
    3868:	18c00044 	addi	r3,r3,1
    386c:	10800044 	addi	r2,r2,1
    3870:	41000015 	stw	r4,0(r8)
    3874:	01000044 	movi	r4,1
    3878:	41000115 	stw	r4,4(r8)
    387c:	d8c02015 	stw	r3,128(sp)
    3880:	d8801f15 	stw	r2,124(sp)
    3884:	010001c4 	movi	r4,7
    3888:	2082f616 	blt	r4,r2,4464 <___svfprintf_internal_r+0x11e0>
    388c:	42000204 	addi	r8,r8,8
    3890:	dac02b17 	ldw	r11,172(sp)
    3894:	58000c26 	beq	r11,zero,38c8 <___svfprintf_internal_r+0x644>
    3898:	d8801f17 	ldw	r2,124(sp)
    389c:	d9002704 	addi	r4,sp,156
    38a0:	18c00084 	addi	r3,r3,2
    38a4:	10800044 	addi	r2,r2,1
    38a8:	41000015 	stw	r4,0(r8)
    38ac:	01000084 	movi	r4,2
    38b0:	41000115 	stw	r4,4(r8)
    38b4:	d8c02015 	stw	r3,128(sp)
    38b8:	d8801f15 	stw	r2,124(sp)
    38bc:	010001c4 	movi	r4,7
    38c0:	2082e016 	blt	r4,r2,4444 <___svfprintf_internal_r+0x11c0>
    38c4:	42000204 	addi	r8,r8,8
    38c8:	db002c17 	ldw	r12,176(sp)
    38cc:	00802004 	movi	r2,128
    38d0:	60822f26 	beq	r12,r2,4190 <___svfprintf_internal_r+0xf0c>
    38d4:	db003217 	ldw	r12,200(sp)
    38d8:	64abc83a 	sub	r21,r12,r18
    38dc:	0540310e 	bge	zero,r21,39a4 <___svfprintf_internal_r+0x720>
    38e0:	07000404 	movi	fp,16
    38e4:	d8801f17 	ldw	r2,124(sp)
    38e8:	e544270e 	bge	fp,r21,4988 <___svfprintf_internal_r+0x1704>
    38ec:	014000b4 	movhi	r5,2
    38f0:	a809883a 	mov	r4,r21
    38f4:	297f8c84 	addi	r5,r5,-462
    38f8:	dc002c15 	stw	r16,176(sp)
    38fc:	902b883a 	mov	r21,r18
    3900:	d9402b15 	stw	r5,172(sp)
    3904:	8825883a 	mov	r18,r17
    3908:	04c001c4 	movi	r19,7
    390c:	dc002f17 	ldw	r16,188(sp)
    3910:	2023883a 	mov	r17,r4
    3914:	00000306 	br	3924 <___svfprintf_internal_r+0x6a0>
    3918:	8c7ffc04 	addi	r17,r17,-16
    391c:	42000204 	addi	r8,r8,8
    3920:	e440110e 	bge	fp,r17,3968 <___svfprintf_internal_r+0x6e4>
    3924:	18c00404 	addi	r3,r3,16
    3928:	10800044 	addi	r2,r2,1
    392c:	45000015 	stw	r20,0(r8)
    3930:	47000115 	stw	fp,4(r8)
    3934:	d8c02015 	stw	r3,128(sp)
    3938:	d8801f15 	stw	r2,124(sp)
    393c:	98bff60e 	bge	r19,r2,3918 <__alt_mem_Flash_flash_data+0xf4003918>
    3940:	8009883a 	mov	r4,r16
    3944:	b80b883a 	mov	r5,r23
    3948:	b00d883a 	mov	r6,r22
    394c:	000c3e00 	call	c3e0 <__ssprint_r>
    3950:	103f141e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    3954:	8c7ffc04 	addi	r17,r17,-16
    3958:	d8c02017 	ldw	r3,128(sp)
    395c:	d8801f17 	ldw	r2,124(sp)
    3960:	da000404 	addi	r8,sp,16
    3964:	e47fef16 	blt	fp,r17,3924 <__alt_mem_Flash_flash_data+0xf4003924>
    3968:	dc002c17 	ldw	r16,176(sp)
    396c:	8809883a 	mov	r4,r17
    3970:	9023883a 	mov	r17,r18
    3974:	a825883a 	mov	r18,r21
    3978:	202b883a 	mov	r21,r4
    397c:	dac02b17 	ldw	r11,172(sp)
    3980:	1d47883a 	add	r3,r3,r21
    3984:	10800044 	addi	r2,r2,1
    3988:	42c00015 	stw	r11,0(r8)
    398c:	45400115 	stw	r21,4(r8)
    3990:	d8c02015 	stw	r3,128(sp)
    3994:	d8801f15 	stw	r2,124(sp)
    3998:	010001c4 	movi	r4,7
    399c:	2082a116 	blt	r4,r2,4424 <___svfprintf_internal_r+0x11a0>
    39a0:	42000204 	addi	r8,r8,8
    39a4:	8880400c 	andi	r2,r17,256
    39a8:	1001b01e 	bne	r2,zero,406c <___svfprintf_internal_r+0xde8>
    39ac:	d8801f17 	ldw	r2,124(sp)
    39b0:	db003117 	ldw	r12,196(sp)
    39b4:	1c87883a 	add	r3,r3,r18
    39b8:	10800044 	addi	r2,r2,1
    39bc:	43000015 	stw	r12,0(r8)
    39c0:	44800115 	stw	r18,4(r8)
    39c4:	d8c02015 	stw	r3,128(sp)
    39c8:	d8801f15 	stw	r2,124(sp)
    39cc:	010001c4 	movi	r4,7
    39d0:	20828216 	blt	r4,r2,43dc <___svfprintf_internal_r+0x1158>
    39d4:	42000204 	addi	r8,r8,8
    39d8:	8c40010c 	andi	r17,r17,4
    39dc:	88003226 	beq	r17,zero,3aa8 <___svfprintf_internal_r+0x824>
    39e0:	db002e17 	ldw	r12,184(sp)
    39e4:	dac02a17 	ldw	r11,168(sp)
    39e8:	62e1c83a 	sub	r16,r12,r11
    39ec:	04002e0e 	bge	zero,r16,3aa8 <___svfprintf_internal_r+0x824>
    39f0:	04400404 	movi	r17,16
    39f4:	d8801f17 	ldw	r2,124(sp)
    39f8:	8c05330e 	bge	r17,r16,4ec8 <___svfprintf_internal_r+0x1c44>
    39fc:	010000b4 	movhi	r4,2
    3a00:	213f9084 	addi	r4,r4,-446
    3a04:	d9003615 	stw	r4,216(sp)
    3a08:	048001c4 	movi	r18,7
    3a0c:	dcc02f17 	ldw	r19,188(sp)
    3a10:	00000306 	br	3a20 <___svfprintf_internal_r+0x79c>
    3a14:	843ffc04 	addi	r16,r16,-16
    3a18:	42000204 	addi	r8,r8,8
    3a1c:	8c00130e 	bge	r17,r16,3a6c <___svfprintf_internal_r+0x7e8>
    3a20:	014000b4 	movhi	r5,2
    3a24:	18c00404 	addi	r3,r3,16
    3a28:	10800044 	addi	r2,r2,1
    3a2c:	297f9084 	addi	r5,r5,-446
    3a30:	41400015 	stw	r5,0(r8)
    3a34:	44400115 	stw	r17,4(r8)
    3a38:	d8c02015 	stw	r3,128(sp)
    3a3c:	d8801f15 	stw	r2,124(sp)
    3a40:	90bff40e 	bge	r18,r2,3a14 <__alt_mem_Flash_flash_data+0xf4003a14>
    3a44:	9809883a 	mov	r4,r19
    3a48:	b80b883a 	mov	r5,r23
    3a4c:	b00d883a 	mov	r6,r22
    3a50:	000c3e00 	call	c3e0 <__ssprint_r>
    3a54:	103ed31e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    3a58:	843ffc04 	addi	r16,r16,-16
    3a5c:	d8c02017 	ldw	r3,128(sp)
    3a60:	d8801f17 	ldw	r2,124(sp)
    3a64:	da000404 	addi	r8,sp,16
    3a68:	8c3fed16 	blt	r17,r16,3a20 <__alt_mem_Flash_flash_data+0xf4003a20>
    3a6c:	dac03617 	ldw	r11,216(sp)
    3a70:	1c07883a 	add	r3,r3,r16
    3a74:	10800044 	addi	r2,r2,1
    3a78:	42c00015 	stw	r11,0(r8)
    3a7c:	44000115 	stw	r16,4(r8)
    3a80:	d8c02015 	stw	r3,128(sp)
    3a84:	d8801f15 	stw	r2,124(sp)
    3a88:	010001c4 	movi	r4,7
    3a8c:	2080060e 	bge	r4,r2,3aa8 <___svfprintf_internal_r+0x824>
    3a90:	d9002f17 	ldw	r4,188(sp)
    3a94:	b80b883a 	mov	r5,r23
    3a98:	b00d883a 	mov	r6,r22
    3a9c:	000c3e00 	call	c3e0 <__ssprint_r>
    3aa0:	103ec01e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    3aa4:	d8c02017 	ldw	r3,128(sp)
    3aa8:	d8802a17 	ldw	r2,168(sp)
    3aac:	db002e17 	ldw	r12,184(sp)
    3ab0:	1300010e 	bge	r2,r12,3ab8 <___svfprintf_internal_r+0x834>
    3ab4:	6005883a 	mov	r2,r12
    3ab8:	dac03017 	ldw	r11,192(sp)
    3abc:	5897883a 	add	r11,r11,r2
    3ac0:	dac03015 	stw	r11,192(sp)
    3ac4:	1802331e 	bne	r3,zero,4394 <___svfprintf_internal_r+0x1110>
    3ac8:	d8001f15 	stw	zero,124(sp)
    3acc:	da000404 	addi	r8,sp,16
    3ad0:	003e1806 	br	3334 <__alt_mem_Flash_flash_data+0xf4003334>
    3ad4:	db002d17 	ldw	r12,180(sp)
    3ad8:	dac02d17 	ldw	r11,180(sp)
    3adc:	d8c02915 	stw	r3,164(sp)
    3ae0:	63000017 	ldw	r12,0(r12)
    3ae4:	5ac00117 	ldw	r11,4(r11)
    3ae8:	d9802785 	stb	r6,158(sp)
    3aec:	6009883a 	mov	r4,r12
    3af0:	580b883a 	mov	r5,r11
    3af4:	db003715 	stw	r12,220(sp)
    3af8:	da004015 	stw	r8,256(sp)
    3afc:	da403f15 	stw	r9,252(sp)
    3b00:	dac03815 	stw	r11,224(sp)
    3b04:	000c1380 	call	c138 <__fpclassifyd>
    3b08:	db002d17 	ldw	r12,180(sp)
    3b0c:	04800044 	movi	r18,1
    3b10:	da004017 	ldw	r8,256(sp)
    3b14:	64c00204 	addi	r19,r12,8
    3b18:	da403f17 	ldw	r9,252(sp)
    3b1c:	d9003717 	ldw	r4,220(sp)
    3b20:	d9403817 	ldw	r5,224(sp)
    3b24:	1483561e 	bne	r2,r18,4880 <___svfprintf_internal_r+0x15fc>
    3b28:	000d883a 	mov	r6,zero
    3b2c:	000f883a 	mov	r7,zero
    3b30:	00112e80 	call	112e8 <__ledf2>
    3b34:	da004017 	ldw	r8,256(sp)
    3b38:	1004ee16 	blt	r2,zero,4ef4 <___svfprintf_internal_r+0x1c70>
    3b3c:	dd402783 	ldbu	r21,158(sp)
    3b40:	008011c4 	movi	r2,71
    3b44:	1404440e 	bge	r2,r16,4c58 <___svfprintf_internal_r+0x19d4>
    3b48:	00c000b4 	movhi	r3,2
    3b4c:	18ff7d04 	addi	r3,r3,-524
    3b50:	d8c03115 	stw	r3,196(sp)
    3b54:	02c000c4 	movi	r11,3
    3b58:	00bfdfc4 	movi	r2,-129
    3b5c:	dac02a15 	stw	r11,168(sp)
    3b60:	88a2703a 	and	r17,r17,r2
    3b64:	dcc02d15 	stw	r19,180(sp)
    3b68:	5825883a 	mov	r18,r11
    3b6c:	d8003215 	stw	zero,200(sp)
    3b70:	d8003415 	stw	zero,208(sp)
    3b74:	003eef06 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    3b78:	8c400214 	ori	r17,r17,8
    3b7c:	1805883a 	mov	r2,r3
    3b80:	1c000007 	ldb	r16,0(r3)
    3b84:	003e1506 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3b88:	8c400414 	ori	r17,r17,16
    3b8c:	d8c02915 	stw	r3,164(sp)
    3b90:	88c0080c 	andi	r3,r17,32
    3b94:	d8802d17 	ldw	r2,180(sp)
    3b98:	18005526 	beq	r3,zero,3cf0 <___svfprintf_internal_r+0xa6c>
    3b9c:	dac02d17 	ldw	r11,180(sp)
    3ba0:	14c00017 	ldw	r19,0(r2)
    3ba4:	17000117 	ldw	fp,4(r2)
    3ba8:	5ac00204 	addi	r11,r11,8
    3bac:	dac02d15 	stw	r11,180(sp)
    3bb0:	00800044 	movi	r2,1
    3bb4:	9f06b03a 	or	r3,r19,fp
    3bb8:	d8002785 	stb	zero,158(sp)
    3bbc:	da403215 	stw	r9,200(sp)
    3bc0:	002b883a 	mov	r21,zero
    3bc4:	003eb406 	br	3698 <__alt_mem_Flash_flash_data+0xf4003698>
    3bc8:	030000b4 	movhi	r12,2
    3bcc:	633f8004 	addi	r12,r12,-512
    3bd0:	d8c02915 	stw	r3,164(sp)
    3bd4:	d9802785 	stb	r6,158(sp)
    3bd8:	db003b15 	stw	r12,236(sp)
    3bdc:	88c0080c 	andi	r3,r17,32
    3be0:	d8802d17 	ldw	r2,180(sp)
    3be4:	18005626 	beq	r3,zero,3d40 <___svfprintf_internal_r+0xabc>
    3be8:	dac02d17 	ldw	r11,180(sp)
    3bec:	14c00017 	ldw	r19,0(r2)
    3bf0:	17000117 	ldw	fp,4(r2)
    3bf4:	5ac00204 	addi	r11,r11,8
    3bf8:	dac02d15 	stw	r11,180(sp)
    3bfc:	8880004c 	andi	r2,r17,1
    3c00:	10029326 	beq	r2,zero,4650 <___svfprintf_internal_r+0x13cc>
    3c04:	9f06b03a 	or	r3,r19,fp
    3c08:	18033526 	beq	r3,zero,48e0 <___svfprintf_internal_r+0x165c>
    3c0c:	00800c04 	movi	r2,48
    3c10:	d8802705 	stb	r2,156(sp)
    3c14:	dc002745 	stb	r16,157(sp)
    3c18:	8c400094 	ori	r17,r17,2
    3c1c:	00800084 	movi	r2,2
    3c20:	003fe506 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    3c24:	1805883a 	mov	r2,r3
    3c28:	d8002e15 	stw	zero,184(sp)
    3c2c:	82fff404 	addi	r11,r16,-48
    3c30:	0019883a 	mov	r12,zero
    3c34:	14000007 	ldb	r16,0(r2)
    3c38:	630002a4 	muli	r12,r12,10
    3c3c:	18c00044 	addi	r3,r3,1
    3c40:	1805883a 	mov	r2,r3
    3c44:	62d9883a 	add	r12,r12,r11
    3c48:	82fff404 	addi	r11,r16,-48
    3c4c:	2afff92e 	bgeu	r5,r11,3c34 <__alt_mem_Flash_flash_data+0xf4003c34>
    3c50:	db002e15 	stw	r12,184(sp)
    3c54:	003de206 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3c58:	8c400814 	ori	r17,r17,32
    3c5c:	1805883a 	mov	r2,r3
    3c60:	1c000007 	ldb	r16,0(r3)
    3c64:	003ddd06 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3c68:	dac02d17 	ldw	r11,180(sp)
    3c6c:	db002d17 	ldw	r12,180(sp)
    3c70:	d8c02915 	stw	r3,164(sp)
    3c74:	5ac00017 	ldw	r11,0(r11)
    3c78:	d8002785 	stb	zero,158(sp)
    3c7c:	64c00104 	addi	r19,r12,4
    3c80:	dac03115 	stw	r11,196(sp)
    3c84:	58048126 	beq	r11,zero,4e8c <___svfprintf_internal_r+0x1c08>
    3c88:	d9003117 	ldw	r4,196(sp)
    3c8c:	48041716 	blt	r9,zero,4cec <___svfprintf_internal_r+0x1a68>
    3c90:	480d883a 	mov	r6,r9
    3c94:	000b883a 	mov	r5,zero
    3c98:	da004015 	stw	r8,256(sp)
    3c9c:	da403f15 	stw	r9,252(sp)
    3ca0:	000a7900 	call	a790 <memchr>
    3ca4:	da004017 	ldw	r8,256(sp)
    3ca8:	da403f17 	ldw	r9,252(sp)
    3cac:	1004db26 	beq	r2,zero,501c <___svfprintf_internal_r+0x1d98>
    3cb0:	d8c03117 	ldw	r3,196(sp)
    3cb4:	10e5c83a 	sub	r18,r2,r3
    3cb8:	4c80010e 	bge	r9,r18,3cc0 <___svfprintf_internal_r+0xa3c>
    3cbc:	4825883a 	mov	r18,r9
    3cc0:	9005883a 	mov	r2,r18
    3cc4:	90040e16 	blt	r18,zero,4d00 <___svfprintf_internal_r+0x1a7c>
    3cc8:	dd402783 	ldbu	r21,158(sp)
    3ccc:	d8802a15 	stw	r2,168(sp)
    3cd0:	dcc02d15 	stw	r19,180(sp)
    3cd4:	d8003215 	stw	zero,200(sp)
    3cd8:	d8003415 	stw	zero,208(sp)
    3cdc:	003e9506 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    3ce0:	d8c02915 	stw	r3,164(sp)
    3ce4:	88c0080c 	andi	r3,r17,32
    3ce8:	d8802d17 	ldw	r2,180(sp)
    3cec:	183fab1e 	bne	r3,zero,3b9c <__alt_mem_Flash_flash_data+0xf4003b9c>
    3cf0:	88c0040c 	andi	r3,r17,16
    3cf4:	1802681e 	bne	r3,zero,4698 <___svfprintf_internal_r+0x1414>
    3cf8:	88c0100c 	andi	r3,r17,64
    3cfc:	18026626 	beq	r3,zero,4698 <___svfprintf_internal_r+0x1414>
    3d00:	dac02d17 	ldw	r11,180(sp)
    3d04:	14c0000b 	ldhu	r19,0(r2)
    3d08:	0039883a 	mov	fp,zero
    3d0c:	5ac00104 	addi	r11,r11,4
    3d10:	dac02d15 	stw	r11,180(sp)
    3d14:	00800044 	movi	r2,1
    3d18:	9807883a 	mov	r3,r19
    3d1c:	003fa606 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    3d20:	008000b4 	movhi	r2,2
    3d24:	10bf8504 	addi	r2,r2,-492
    3d28:	d8c02915 	stw	r3,164(sp)
    3d2c:	d8803b15 	stw	r2,236(sp)
    3d30:	d9802785 	stb	r6,158(sp)
    3d34:	88c0080c 	andi	r3,r17,32
    3d38:	d8802d17 	ldw	r2,180(sp)
    3d3c:	183faa1e 	bne	r3,zero,3be8 <__alt_mem_Flash_flash_data+0xf4003be8>
    3d40:	88c0040c 	andi	r3,r17,16
    3d44:	1802e826 	beq	r3,zero,48e8 <___svfprintf_internal_r+0x1664>
    3d48:	db002d17 	ldw	r12,180(sp)
    3d4c:	14c00017 	ldw	r19,0(r2)
    3d50:	0039883a 	mov	fp,zero
    3d54:	63000104 	addi	r12,r12,4
    3d58:	db002d15 	stw	r12,180(sp)
    3d5c:	003fa706 	br	3bfc <__alt_mem_Flash_flash_data+0xf4003bfc>
    3d60:	30803fcc 	andi	r2,r6,255
    3d64:	1080201c 	xori	r2,r2,128
    3d68:	10bfe004 	addi	r2,r2,-128
    3d6c:	1002d91e 	bne	r2,zero,48d4 <___svfprintf_internal_r+0x1650>
    3d70:	1805883a 	mov	r2,r3
    3d74:	01800804 	movi	r6,32
    3d78:	1c000007 	ldb	r16,0(r3)
    3d7c:	003d9706 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3d80:	8c400054 	ori	r17,r17,1
    3d84:	1805883a 	mov	r2,r3
    3d88:	1c000007 	ldb	r16,0(r3)
    3d8c:	003d9306 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3d90:	dac02d17 	ldw	r11,180(sp)
    3d94:	db002d17 	ldw	r12,180(sp)
    3d98:	5ac00017 	ldw	r11,0(r11)
    3d9c:	dac02e15 	stw	r11,184(sp)
    3da0:	62c00104 	addi	r11,r12,4
    3da4:	db002e17 	ldw	r12,184(sp)
    3da8:	60033e16 	blt	r12,zero,4aa4 <___svfprintf_internal_r+0x1820>
    3dac:	dac02d15 	stw	r11,180(sp)
    3db0:	1805883a 	mov	r2,r3
    3db4:	1c000007 	ldb	r16,0(r3)
    3db8:	003d8806 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3dbc:	1805883a 	mov	r2,r3
    3dc0:	01800ac4 	movi	r6,43
    3dc4:	1c000007 	ldb	r16,0(r3)
    3dc8:	003d8406 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3dcc:	8c401014 	ori	r17,r17,64
    3dd0:	1805883a 	mov	r2,r3
    3dd4:	1c000007 	ldb	r16,0(r3)
    3dd8:	003d8006 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3ddc:	1c000007 	ldb	r16,0(r3)
    3de0:	81c33626 	beq	r16,r7,4abc <___svfprintf_internal_r+0x1838>
    3de4:	8c400414 	ori	r17,r17,16
    3de8:	1805883a 	mov	r2,r3
    3dec:	003d7b06 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    3df0:	d8c02915 	stw	r3,164(sp)
    3df4:	d9802785 	stb	r6,158(sp)
    3df8:	8880080c 	andi	r2,r17,32
    3dfc:	1002c226 	beq	r2,zero,4908 <___svfprintf_internal_r+0x1684>
    3e00:	db002d17 	ldw	r12,180(sp)
    3e04:	dac03017 	ldw	r11,192(sp)
    3e08:	60800017 	ldw	r2,0(r12)
    3e0c:	5807d7fa 	srai	r3,r11,31
    3e10:	63000104 	addi	r12,r12,4
    3e14:	db002d15 	stw	r12,180(sp)
    3e18:	12c00015 	stw	r11,0(r2)
    3e1c:	10c00115 	stw	r3,4(r2)
    3e20:	003d4406 	br	3334 <__alt_mem_Flash_flash_data+0xf4003334>
    3e24:	db002d17 	ldw	r12,180(sp)
    3e28:	00800c04 	movi	r2,48
    3e2c:	d8802705 	stb	r2,156(sp)
    3e30:	64c00017 	ldw	r19,0(r12)
    3e34:	00801e04 	movi	r2,120
    3e38:	d8802745 	stb	r2,157(sp)
    3e3c:	008000b4 	movhi	r2,2
    3e40:	10bf8504 	addi	r2,r2,-492
    3e44:	63000104 	addi	r12,r12,4
    3e48:	d8c02915 	stw	r3,164(sp)
    3e4c:	d8803b15 	stw	r2,236(sp)
    3e50:	0039883a 	mov	fp,zero
    3e54:	8c400094 	ori	r17,r17,2
    3e58:	db002d15 	stw	r12,180(sp)
    3e5c:	00800084 	movi	r2,2
    3e60:	04001e04 	movi	r16,120
    3e64:	9807883a 	mov	r3,r19
    3e68:	003f5306 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    3e6c:	db002d17 	ldw	r12,180(sp)
    3e70:	d8c02915 	stw	r3,164(sp)
    3e74:	dac01404 	addi	r11,sp,80
    3e78:	60800017 	ldw	r2,0(r12)
    3e7c:	00c00044 	movi	r3,1
    3e80:	63000104 	addi	r12,r12,4
    3e84:	d8801405 	stb	r2,80(sp)
    3e88:	d8c02a15 	stw	r3,168(sp)
    3e8c:	d8002785 	stb	zero,158(sp)
    3e90:	db002d15 	stw	r12,180(sp)
    3e94:	1825883a 	mov	r18,r3
    3e98:	d8003215 	stw	zero,200(sp)
    3e9c:	d8003415 	stw	zero,208(sp)
    3ea0:	dac03115 	stw	r11,196(sp)
    3ea4:	0005883a 	mov	r2,zero
    3ea8:	003e2906 	br	3750 <__alt_mem_Flash_flash_data+0xf4003750>
    3eac:	d8c02915 	stw	r3,164(sp)
    3eb0:	d9802785 	stb	r6,158(sp)
    3eb4:	8880080c 	andi	r2,r17,32
    3eb8:	d8c02d17 	ldw	r3,180(sp)
    3ebc:	103deb1e 	bne	r2,zero,366c <__alt_mem_Flash_flash_data+0xf400366c>
    3ec0:	8880040c 	andi	r2,r17,16
    3ec4:	1001e51e 	bne	r2,zero,465c <___svfprintf_internal_r+0x13d8>
    3ec8:	8880100c 	andi	r2,r17,64
    3ecc:	1001e326 	beq	r2,zero,465c <___svfprintf_internal_r+0x13d8>
    3ed0:	1cc0000f 	ldh	r19,0(r3)
    3ed4:	db002d17 	ldw	r12,180(sp)
    3ed8:	9839d7fa 	srai	fp,r19,31
    3edc:	63000104 	addi	r12,r12,4
    3ee0:	db002d15 	stw	r12,180(sp)
    3ee4:	e005883a 	mov	r2,fp
    3ee8:	103de70e 	bge	r2,zero,3688 <__alt_mem_Flash_flash_data+0xf4003688>
    3eec:	04e7c83a 	sub	r19,zero,r19
    3ef0:	9804c03a 	cmpne	r2,r19,zero
    3ef4:	0739c83a 	sub	fp,zero,fp
    3ef8:	e0b9c83a 	sub	fp,fp,r2
    3efc:	05400b44 	movi	r21,45
    3f00:	dd402785 	stb	r21,158(sp)
    3f04:	da403215 	stw	r9,200(sp)
    3f08:	00800044 	movi	r2,1
    3f0c:	9f06b03a 	or	r3,r19,fp
    3f10:	003de106 	br	3698 <__alt_mem_Flash_flash_data+0xf4003698>
    3f14:	8c400414 	ori	r17,r17,16
    3f18:	d8c02915 	stw	r3,164(sp)
    3f1c:	8880080c 	andi	r2,r17,32
    3f20:	10000b26 	beq	r2,zero,3f50 <___svfprintf_internal_r+0xccc>
    3f24:	db002d17 	ldw	r12,180(sp)
    3f28:	0005883a 	mov	r2,zero
    3f2c:	64c00017 	ldw	r19,0(r12)
    3f30:	67000117 	ldw	fp,4(r12)
    3f34:	63000204 	addi	r12,r12,8
    3f38:	db002d15 	stw	r12,180(sp)
    3f3c:	9f06b03a 	or	r3,r19,fp
    3f40:	003f1d06 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    3f44:	d8c02915 	stw	r3,164(sp)
    3f48:	8880080c 	andi	r2,r17,32
    3f4c:	103ff51e 	bne	r2,zero,3f24 <__alt_mem_Flash_flash_data+0xf4003f24>
    3f50:	8880040c 	andi	r2,r17,16
    3f54:	1001c81e 	bne	r2,zero,4678 <___svfprintf_internal_r+0x13f4>
    3f58:	8880100c 	andi	r2,r17,64
    3f5c:	1001c626 	beq	r2,zero,4678 <___svfprintf_internal_r+0x13f4>
    3f60:	db002d17 	ldw	r12,180(sp)
    3f64:	0039883a 	mov	fp,zero
    3f68:	0005883a 	mov	r2,zero
    3f6c:	64c0000b 	ldhu	r19,0(r12)
    3f70:	63000104 	addi	r12,r12,4
    3f74:	db002d15 	stw	r12,180(sp)
    3f78:	9807883a 	mov	r3,r19
    3f7c:	003f0e06 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    3f80:	d8c02915 	stw	r3,164(sp)
    3f84:	d9802785 	stb	r6,158(sp)
    3f88:	803d8026 	beq	r16,zero,358c <__alt_mem_Flash_flash_data+0xf400358c>
    3f8c:	02c00044 	movi	r11,1
    3f90:	db001404 	addi	r12,sp,80
    3f94:	dac02a15 	stw	r11,168(sp)
    3f98:	dc001405 	stb	r16,80(sp)
    3f9c:	d8002785 	stb	zero,158(sp)
    3fa0:	5825883a 	mov	r18,r11
    3fa4:	d8003215 	stw	zero,200(sp)
    3fa8:	d8003415 	stw	zero,208(sp)
    3fac:	db003115 	stw	r12,196(sp)
    3fb0:	0005883a 	mov	r2,zero
    3fb4:	003de606 	br	3750 <__alt_mem_Flash_flash_data+0xf4003750>
    3fb8:	d8c02017 	ldw	r3,128(sp)
    3fbc:	003e2706 	br	385c <__alt_mem_Flash_flash_data+0xf400385c>
    3fc0:	10803fcc 	andi	r2,r2,255
    3fc4:	00c00044 	movi	r3,1
    3fc8:	10fdbb1e 	bne	r2,r3,36b8 <__alt_mem_Flash_flash_data+0xf40036b8>
    3fcc:	e000021e 	bne	fp,zero,3fd8 <___svfprintf_internal_r+0xd54>
    3fd0:	00800244 	movi	r2,9
    3fd4:	14c01f2e 	bgeu	r2,r19,4054 <___svfprintf_internal_r+0xdd0>
    3fd8:	dc002a15 	stw	r16,168(sp)
    3fdc:	dc402b15 	stw	r17,172(sp)
    3fe0:	9821883a 	mov	r16,r19
    3fe4:	e023883a 	mov	r17,fp
    3fe8:	b025883a 	mov	r18,r22
    3fec:	4827883a 	mov	r19,r9
    3ff0:	4039883a 	mov	fp,r8
    3ff4:	8009883a 	mov	r4,r16
    3ff8:	880b883a 	mov	r5,r17
    3ffc:	01800284 	movi	r6,10
    4000:	000f883a 	mov	r7,zero
    4004:	000f9600 	call	f960 <__umoddi3>
    4008:	10800c04 	addi	r2,r2,48
    400c:	94bfffc4 	addi	r18,r18,-1
    4010:	8009883a 	mov	r4,r16
    4014:	880b883a 	mov	r5,r17
    4018:	01800284 	movi	r6,10
    401c:	000f883a 	mov	r7,zero
    4020:	90800005 	stb	r2,0(r18)
    4024:	000f3a00 	call	f3a0 <__udivdi3>
    4028:	1021883a 	mov	r16,r2
    402c:	10c4b03a 	or	r2,r2,r3
    4030:	1823883a 	mov	r17,r3
    4034:	103fef1e 	bne	r2,zero,3ff4 <__alt_mem_Flash_flash_data+0xf4003ff4>
    4038:	dc803115 	stw	r18,196(sp)
    403c:	dc002a17 	ldw	r16,168(sp)
    4040:	dc402b17 	ldw	r17,172(sp)
    4044:	9813883a 	mov	r9,r19
    4048:	e011883a 	mov	r8,fp
    404c:	b4a5c83a 	sub	r18,r22,r18
    4050:	003db306 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    4054:	9cc00c04 	addi	r19,r19,48
    4058:	db001dc4 	addi	r12,sp,119
    405c:	dcc01dc5 	stb	r19,119(sp)
    4060:	dc803d17 	ldw	r18,244(sp)
    4064:	db003115 	stw	r12,196(sp)
    4068:	003dad06 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    406c:	00801944 	movi	r2,101
    4070:	14008d0e 	bge	r2,r16,42a8 <___svfprintf_internal_r+0x1024>
    4074:	d9003717 	ldw	r4,220(sp)
    4078:	d9403817 	ldw	r5,224(sp)
    407c:	000d883a 	mov	r6,zero
    4080:	000f883a 	mov	r7,zero
    4084:	d8c03e15 	stw	r3,248(sp)
    4088:	da004015 	stw	r8,256(sp)
    408c:	00111840 	call	11184 <__eqdf2>
    4090:	d8c03e17 	ldw	r3,248(sp)
    4094:	da004017 	ldw	r8,256(sp)
    4098:	1000fd1e 	bne	r2,zero,4490 <___svfprintf_internal_r+0x120c>
    409c:	d8801f17 	ldw	r2,124(sp)
    40a0:	010000b4 	movhi	r4,2
    40a4:	213f8c04 	addi	r4,r4,-464
    40a8:	18c00044 	addi	r3,r3,1
    40ac:	10800044 	addi	r2,r2,1
    40b0:	41000015 	stw	r4,0(r8)
    40b4:	01000044 	movi	r4,1
    40b8:	41000115 	stw	r4,4(r8)
    40bc:	d8c02015 	stw	r3,128(sp)
    40c0:	d8801f15 	stw	r2,124(sp)
    40c4:	010001c4 	movi	r4,7
    40c8:	20823316 	blt	r4,r2,4998 <___svfprintf_internal_r+0x1714>
    40cc:	42000204 	addi	r8,r8,8
    40d0:	d8802617 	ldw	r2,152(sp)
    40d4:	dac03317 	ldw	r11,204(sp)
    40d8:	12c00216 	blt	r2,r11,40e4 <___svfprintf_internal_r+0xe60>
    40dc:	8880004c 	andi	r2,r17,1
    40e0:	103e3d26 	beq	r2,zero,39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    40e4:	db003917 	ldw	r12,228(sp)
    40e8:	d8801f17 	ldw	r2,124(sp)
    40ec:	dac03517 	ldw	r11,212(sp)
    40f0:	1b07883a 	add	r3,r3,r12
    40f4:	10800044 	addi	r2,r2,1
    40f8:	42c00015 	stw	r11,0(r8)
    40fc:	43000115 	stw	r12,4(r8)
    4100:	d8c02015 	stw	r3,128(sp)
    4104:	d8801f15 	stw	r2,124(sp)
    4108:	010001c4 	movi	r4,7
    410c:	20826f16 	blt	r4,r2,4acc <___svfprintf_internal_r+0x1848>
    4110:	42000204 	addi	r8,r8,8
    4114:	db003317 	ldw	r12,204(sp)
    4118:	643fffc4 	addi	r16,r12,-1
    411c:	043e2e0e 	bge	zero,r16,39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    4120:	04800404 	movi	r18,16
    4124:	d8801f17 	ldw	r2,124(sp)
    4128:	9400a00e 	bge	r18,r16,43ac <___svfprintf_internal_r+0x1128>
    412c:	014000b4 	movhi	r5,2
    4130:	297f8c84 	addi	r5,r5,-462
    4134:	d9402b15 	stw	r5,172(sp)
    4138:	054001c4 	movi	r21,7
    413c:	dcc02f17 	ldw	r19,188(sp)
    4140:	00000306 	br	4150 <___svfprintf_internal_r+0xecc>
    4144:	42000204 	addi	r8,r8,8
    4148:	843ffc04 	addi	r16,r16,-16
    414c:	94009a0e 	bge	r18,r16,43b8 <___svfprintf_internal_r+0x1134>
    4150:	18c00404 	addi	r3,r3,16
    4154:	10800044 	addi	r2,r2,1
    4158:	45000015 	stw	r20,0(r8)
    415c:	44800115 	stw	r18,4(r8)
    4160:	d8c02015 	stw	r3,128(sp)
    4164:	d8801f15 	stw	r2,124(sp)
    4168:	a8bff60e 	bge	r21,r2,4144 <__alt_mem_Flash_flash_data+0xf4004144>
    416c:	9809883a 	mov	r4,r19
    4170:	b80b883a 	mov	r5,r23
    4174:	b00d883a 	mov	r6,r22
    4178:	000c3e00 	call	c3e0 <__ssprint_r>
    417c:	103d091e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4180:	d8c02017 	ldw	r3,128(sp)
    4184:	d8801f17 	ldw	r2,124(sp)
    4188:	da000404 	addi	r8,sp,16
    418c:	003fee06 	br	4148 <__alt_mem_Flash_flash_data+0xf4004148>
    4190:	dac02e17 	ldw	r11,184(sp)
    4194:	db002a17 	ldw	r12,168(sp)
    4198:	5b2bc83a 	sub	r21,r11,r12
    419c:	057dcd0e 	bge	zero,r21,38d4 <__alt_mem_Flash_flash_data+0xf40038d4>
    41a0:	07000404 	movi	fp,16
    41a4:	d8801f17 	ldw	r2,124(sp)
    41a8:	e5435d0e 	bge	fp,r21,4f20 <___svfprintf_internal_r+0x1c9c>
    41ac:	014000b4 	movhi	r5,2
    41b0:	a809883a 	mov	r4,r21
    41b4:	297f8c84 	addi	r5,r5,-462
    41b8:	dc002c15 	stw	r16,176(sp)
    41bc:	902b883a 	mov	r21,r18
    41c0:	d9402b15 	stw	r5,172(sp)
    41c4:	8825883a 	mov	r18,r17
    41c8:	04c001c4 	movi	r19,7
    41cc:	dc002f17 	ldw	r16,188(sp)
    41d0:	2023883a 	mov	r17,r4
    41d4:	00000306 	br	41e4 <___svfprintf_internal_r+0xf60>
    41d8:	8c7ffc04 	addi	r17,r17,-16
    41dc:	42000204 	addi	r8,r8,8
    41e0:	e440110e 	bge	fp,r17,4228 <___svfprintf_internal_r+0xfa4>
    41e4:	18c00404 	addi	r3,r3,16
    41e8:	10800044 	addi	r2,r2,1
    41ec:	45000015 	stw	r20,0(r8)
    41f0:	47000115 	stw	fp,4(r8)
    41f4:	d8c02015 	stw	r3,128(sp)
    41f8:	d8801f15 	stw	r2,124(sp)
    41fc:	98bff60e 	bge	r19,r2,41d8 <__alt_mem_Flash_flash_data+0xf40041d8>
    4200:	8009883a 	mov	r4,r16
    4204:	b80b883a 	mov	r5,r23
    4208:	b00d883a 	mov	r6,r22
    420c:	000c3e00 	call	c3e0 <__ssprint_r>
    4210:	103ce41e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4214:	8c7ffc04 	addi	r17,r17,-16
    4218:	d8c02017 	ldw	r3,128(sp)
    421c:	d8801f17 	ldw	r2,124(sp)
    4220:	da000404 	addi	r8,sp,16
    4224:	e47fef16 	blt	fp,r17,41e4 <__alt_mem_Flash_flash_data+0xf40041e4>
    4228:	dc002c17 	ldw	r16,176(sp)
    422c:	8809883a 	mov	r4,r17
    4230:	9023883a 	mov	r17,r18
    4234:	a825883a 	mov	r18,r21
    4238:	202b883a 	mov	r21,r4
    423c:	dac02b17 	ldw	r11,172(sp)
    4240:	1d47883a 	add	r3,r3,r21
    4244:	10800044 	addi	r2,r2,1
    4248:	42c00015 	stw	r11,0(r8)
    424c:	45400115 	stw	r21,4(r8)
    4250:	d8c02015 	stw	r3,128(sp)
    4254:	d8801f15 	stw	r2,124(sp)
    4258:	010001c4 	movi	r4,7
    425c:	20818016 	blt	r4,r2,4860 <___svfprintf_internal_r+0x15dc>
    4260:	42000204 	addi	r8,r8,8
    4264:	003d9b06 	br	38d4 <__alt_mem_Flash_flash_data+0xf40038d4>
    4268:	d9403b17 	ldw	r5,236(sp)
    426c:	b007883a 	mov	r3,r22
    4270:	988003cc 	andi	r2,r19,15
    4274:	e008973a 	slli	r4,fp,28
    4278:	2885883a 	add	r2,r5,r2
    427c:	9826d13a 	srli	r19,r19,4
    4280:	10800003 	ldbu	r2,0(r2)
    4284:	e038d13a 	srli	fp,fp,4
    4288:	18ffffc4 	addi	r3,r3,-1
    428c:	24e6b03a 	or	r19,r4,r19
    4290:	18800005 	stb	r2,0(r3)
    4294:	9f04b03a 	or	r2,r19,fp
    4298:	103ff51e 	bne	r2,zero,4270 <__alt_mem_Flash_flash_data+0xf4004270>
    429c:	d8c03115 	stw	r3,196(sp)
    42a0:	b0e5c83a 	sub	r18,r22,r3
    42a4:	003d1e06 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    42a8:	db003317 	ldw	r12,204(sp)
    42ac:	00800044 	movi	r2,1
    42b0:	18c00044 	addi	r3,r3,1
    42b4:	13014b0e 	bge	r2,r12,47e4 <___svfprintf_internal_r+0x1560>
    42b8:	dc001f17 	ldw	r16,124(sp)
    42bc:	dac03117 	ldw	r11,196(sp)
    42c0:	00800044 	movi	r2,1
    42c4:	84000044 	addi	r16,r16,1
    42c8:	40800115 	stw	r2,4(r8)
    42cc:	42c00015 	stw	r11,0(r8)
    42d0:	d8c02015 	stw	r3,128(sp)
    42d4:	dc001f15 	stw	r16,124(sp)
    42d8:	008001c4 	movi	r2,7
    42dc:	14014e16 	blt	r2,r16,4818 <___svfprintf_internal_r+0x1594>
    42e0:	42000204 	addi	r8,r8,8
    42e4:	db003917 	ldw	r12,228(sp)
    42e8:	dac03517 	ldw	r11,212(sp)
    42ec:	84000044 	addi	r16,r16,1
    42f0:	1b07883a 	add	r3,r3,r12
    42f4:	42c00015 	stw	r11,0(r8)
    42f8:	43000115 	stw	r12,4(r8)
    42fc:	d8c02015 	stw	r3,128(sp)
    4300:	dc001f15 	stw	r16,124(sp)
    4304:	008001c4 	movi	r2,7
    4308:	14014c16 	blt	r2,r16,483c <___svfprintf_internal_r+0x15b8>
    430c:	44800204 	addi	r18,r8,8
    4310:	d9003717 	ldw	r4,220(sp)
    4314:	d9403817 	ldw	r5,224(sp)
    4318:	000d883a 	mov	r6,zero
    431c:	000f883a 	mov	r7,zero
    4320:	d8c03e15 	stw	r3,248(sp)
    4324:	00111840 	call	11184 <__eqdf2>
    4328:	d8c03e17 	ldw	r3,248(sp)
    432c:	db003317 	ldw	r12,204(sp)
    4330:	10009526 	beq	r2,zero,4588 <___svfprintf_internal_r+0x1304>
    4334:	dac03117 	ldw	r11,196(sp)
    4338:	60bfffc4 	addi	r2,r12,-1
    433c:	1887883a 	add	r3,r3,r2
    4340:	59000044 	addi	r4,r11,1
    4344:	84000044 	addi	r16,r16,1
    4348:	90800115 	stw	r2,4(r18)
    434c:	91000015 	stw	r4,0(r18)
    4350:	d8c02015 	stw	r3,128(sp)
    4354:	dc001f15 	stw	r16,124(sp)
    4358:	008001c4 	movi	r2,7
    435c:	1400b316 	blt	r2,r16,462c <___svfprintf_internal_r+0x13a8>
    4360:	94800204 	addi	r18,r18,8
    4364:	dac03a17 	ldw	r11,232(sp)
    4368:	dd4022c4 	addi	r21,sp,139
    436c:	84000044 	addi	r16,r16,1
    4370:	1ac7883a 	add	r3,r3,r11
    4374:	95400015 	stw	r21,0(r18)
    4378:	92c00115 	stw	r11,4(r18)
    437c:	d8c02015 	stw	r3,128(sp)
    4380:	dc001f15 	stw	r16,124(sp)
    4384:	008001c4 	movi	r2,7
    4388:	14001416 	blt	r2,r16,43dc <___svfprintf_internal_r+0x1158>
    438c:	92000204 	addi	r8,r18,8
    4390:	003d9106 	br	39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    4394:	d9002f17 	ldw	r4,188(sp)
    4398:	b80b883a 	mov	r5,r23
    439c:	b00d883a 	mov	r6,r22
    43a0:	000c3e00 	call	c3e0 <__ssprint_r>
    43a4:	103dc826 	beq	r2,zero,3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    43a8:	003c7e06 	br	35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    43ac:	010000b4 	movhi	r4,2
    43b0:	213f8c84 	addi	r4,r4,-462
    43b4:	d9002b15 	stw	r4,172(sp)
    43b8:	dac02b17 	ldw	r11,172(sp)
    43bc:	1c07883a 	add	r3,r3,r16
    43c0:	44000115 	stw	r16,4(r8)
    43c4:	42c00015 	stw	r11,0(r8)
    43c8:	10800044 	addi	r2,r2,1
    43cc:	d8c02015 	stw	r3,128(sp)
    43d0:	d8801f15 	stw	r2,124(sp)
    43d4:	010001c4 	movi	r4,7
    43d8:	20bd7e0e 	bge	r4,r2,39d4 <__alt_mem_Flash_flash_data+0xf40039d4>
    43dc:	d9002f17 	ldw	r4,188(sp)
    43e0:	b80b883a 	mov	r5,r23
    43e4:	b00d883a 	mov	r6,r22
    43e8:	000c3e00 	call	c3e0 <__ssprint_r>
    43ec:	103c6d1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    43f0:	d8c02017 	ldw	r3,128(sp)
    43f4:	da000404 	addi	r8,sp,16
    43f8:	003d7706 	br	39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    43fc:	10803fcc 	andi	r2,r2,255
    4400:	1000201e 	bne	r2,zero,4484 <___svfprintf_internal_r+0x1200>
    4404:	8880004c 	andi	r2,r17,1
    4408:	10001e26 	beq	r2,zero,4484 <___svfprintf_internal_r+0x1200>
    440c:	00800c04 	movi	r2,48
    4410:	d8c01dc4 	addi	r3,sp,119
    4414:	d8801dc5 	stb	r2,119(sp)
    4418:	dc803d17 	ldw	r18,244(sp)
    441c:	d8c03115 	stw	r3,196(sp)
    4420:	003cbf06 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    4424:	d9002f17 	ldw	r4,188(sp)
    4428:	b80b883a 	mov	r5,r23
    442c:	b00d883a 	mov	r6,r22
    4430:	000c3e00 	call	c3e0 <__ssprint_r>
    4434:	103c5b1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4438:	d8c02017 	ldw	r3,128(sp)
    443c:	da000404 	addi	r8,sp,16
    4440:	003d5806 	br	39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    4444:	d9002f17 	ldw	r4,188(sp)
    4448:	b80b883a 	mov	r5,r23
    444c:	b00d883a 	mov	r6,r22
    4450:	000c3e00 	call	c3e0 <__ssprint_r>
    4454:	103c531e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4458:	d8c02017 	ldw	r3,128(sp)
    445c:	da000404 	addi	r8,sp,16
    4460:	003d1906 	br	38c8 <__alt_mem_Flash_flash_data+0xf40038c8>
    4464:	d9002f17 	ldw	r4,188(sp)
    4468:	b80b883a 	mov	r5,r23
    446c:	b00d883a 	mov	r6,r22
    4470:	000c3e00 	call	c3e0 <__ssprint_r>
    4474:	103c4b1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4478:	d8c02017 	ldw	r3,128(sp)
    447c:	da000404 	addi	r8,sp,16
    4480:	003d0306 	br	3890 <__alt_mem_Flash_flash_data+0xf4003890>
    4484:	0025883a 	mov	r18,zero
    4488:	dd803115 	stw	r22,196(sp)
    448c:	003ca406 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    4490:	dc002617 	ldw	r16,152(sp)
    4494:	0401480e 	bge	zero,r16,49b8 <___svfprintf_internal_r+0x1734>
    4498:	db003117 	ldw	r12,196(sp)
    449c:	dac03317 	ldw	r11,204(sp)
    44a0:	62e1883a 	add	r16,r12,r11
    44a4:	db003417 	ldw	r12,208(sp)
    44a8:	5825883a 	mov	r18,r11
    44ac:	62c0010e 	bge	r12,r11,44b4 <___svfprintf_internal_r+0x1230>
    44b0:	6025883a 	mov	r18,r12
    44b4:	04800b0e 	bge	zero,r18,44e4 <___svfprintf_internal_r+0x1260>
    44b8:	d8801f17 	ldw	r2,124(sp)
    44bc:	dac03117 	ldw	r11,196(sp)
    44c0:	1c87883a 	add	r3,r3,r18
    44c4:	10800044 	addi	r2,r2,1
    44c8:	42c00015 	stw	r11,0(r8)
    44cc:	44800115 	stw	r18,4(r8)
    44d0:	d8c02015 	stw	r3,128(sp)
    44d4:	d8801f15 	stw	r2,124(sp)
    44d8:	010001c4 	movi	r4,7
    44dc:	20823f16 	blt	r4,r2,4ddc <___svfprintf_internal_r+0x1b58>
    44e0:	42000204 	addi	r8,r8,8
    44e4:	90023b16 	blt	r18,zero,4dd4 <___svfprintf_internal_r+0x1b50>
    44e8:	db003417 	ldw	r12,208(sp)
    44ec:	64a5c83a 	sub	r18,r12,r18
    44f0:	0480780e 	bge	zero,r18,46d4 <___svfprintf_internal_r+0x1450>
    44f4:	05400404 	movi	r21,16
    44f8:	d8801f17 	ldw	r2,124(sp)
    44fc:	ac81140e 	bge	r21,r18,4950 <___svfprintf_internal_r+0x16cc>
    4500:	014000b4 	movhi	r5,2
    4504:	297f8c84 	addi	r5,r5,-462
    4508:	d9402b15 	stw	r5,172(sp)
    450c:	070001c4 	movi	fp,7
    4510:	dcc02f17 	ldw	r19,188(sp)
    4514:	00000306 	br	4524 <___svfprintf_internal_r+0x12a0>
    4518:	42000204 	addi	r8,r8,8
    451c:	94bffc04 	addi	r18,r18,-16
    4520:	ac810e0e 	bge	r21,r18,495c <___svfprintf_internal_r+0x16d8>
    4524:	18c00404 	addi	r3,r3,16
    4528:	10800044 	addi	r2,r2,1
    452c:	45000015 	stw	r20,0(r8)
    4530:	45400115 	stw	r21,4(r8)
    4534:	d8c02015 	stw	r3,128(sp)
    4538:	d8801f15 	stw	r2,124(sp)
    453c:	e0bff60e 	bge	fp,r2,4518 <__alt_mem_Flash_flash_data+0xf4004518>
    4540:	9809883a 	mov	r4,r19
    4544:	b80b883a 	mov	r5,r23
    4548:	b00d883a 	mov	r6,r22
    454c:	000c3e00 	call	c3e0 <__ssprint_r>
    4550:	103c141e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4554:	d8c02017 	ldw	r3,128(sp)
    4558:	d8801f17 	ldw	r2,124(sp)
    455c:	da000404 	addi	r8,sp,16
    4560:	003fee06 	br	451c <__alt_mem_Flash_flash_data+0xf400451c>
    4564:	d9002f17 	ldw	r4,188(sp)
    4568:	b80b883a 	mov	r5,r23
    456c:	b00d883a 	mov	r6,r22
    4570:	000c3e00 	call	c3e0 <__ssprint_r>
    4574:	103c0b1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4578:	d8c02017 	ldw	r3,128(sp)
    457c:	d8802787 	ldb	r2,158(sp)
    4580:	da000404 	addi	r8,sp,16
    4584:	003cb506 	br	385c <__alt_mem_Flash_flash_data+0xf400385c>
    4588:	657fffc4 	addi	r21,r12,-1
    458c:	057f750e 	bge	zero,r21,4364 <__alt_mem_Flash_flash_data+0xf4004364>
    4590:	07000404 	movi	fp,16
    4594:	e542ed0e 	bge	fp,r21,514c <___svfprintf_internal_r+0x1ec8>
    4598:	010000b4 	movhi	r4,2
    459c:	213f8c84 	addi	r4,r4,-462
    45a0:	d9002b15 	stw	r4,172(sp)
    45a4:	01c001c4 	movi	r7,7
    45a8:	dcc02f17 	ldw	r19,188(sp)
    45ac:	00000306 	br	45bc <___svfprintf_internal_r+0x1338>
    45b0:	ad7ffc04 	addi	r21,r21,-16
    45b4:	94800204 	addi	r18,r18,8
    45b8:	e540130e 	bge	fp,r21,4608 <___svfprintf_internal_r+0x1384>
    45bc:	18c00404 	addi	r3,r3,16
    45c0:	84000044 	addi	r16,r16,1
    45c4:	95000015 	stw	r20,0(r18)
    45c8:	97000115 	stw	fp,4(r18)
    45cc:	d8c02015 	stw	r3,128(sp)
    45d0:	dc001f15 	stw	r16,124(sp)
    45d4:	3c3ff60e 	bge	r7,r16,45b0 <__alt_mem_Flash_flash_data+0xf40045b0>
    45d8:	9809883a 	mov	r4,r19
    45dc:	b80b883a 	mov	r5,r23
    45e0:	b00d883a 	mov	r6,r22
    45e4:	d9c03e15 	stw	r7,248(sp)
    45e8:	000c3e00 	call	c3e0 <__ssprint_r>
    45ec:	d9c03e17 	ldw	r7,248(sp)
    45f0:	103bec1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    45f4:	ad7ffc04 	addi	r21,r21,-16
    45f8:	d8c02017 	ldw	r3,128(sp)
    45fc:	dc001f17 	ldw	r16,124(sp)
    4600:	dc800404 	addi	r18,sp,16
    4604:	e57fed16 	blt	fp,r21,45bc <__alt_mem_Flash_flash_data+0xf40045bc>
    4608:	dac02b17 	ldw	r11,172(sp)
    460c:	1d47883a 	add	r3,r3,r21
    4610:	84000044 	addi	r16,r16,1
    4614:	92c00015 	stw	r11,0(r18)
    4618:	95400115 	stw	r21,4(r18)
    461c:	d8c02015 	stw	r3,128(sp)
    4620:	dc001f15 	stw	r16,124(sp)
    4624:	008001c4 	movi	r2,7
    4628:	143f4d0e 	bge	r2,r16,4360 <__alt_mem_Flash_flash_data+0xf4004360>
    462c:	d9002f17 	ldw	r4,188(sp)
    4630:	b80b883a 	mov	r5,r23
    4634:	b00d883a 	mov	r6,r22
    4638:	000c3e00 	call	c3e0 <__ssprint_r>
    463c:	103bd91e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4640:	d8c02017 	ldw	r3,128(sp)
    4644:	dc001f17 	ldw	r16,124(sp)
    4648:	dc800404 	addi	r18,sp,16
    464c:	003f4506 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>
    4650:	00800084 	movi	r2,2
    4654:	9f06b03a 	or	r3,r19,fp
    4658:	003d5706 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    465c:	1cc00017 	ldw	r19,0(r3)
    4660:	dac02d17 	ldw	r11,180(sp)
    4664:	9839d7fa 	srai	fp,r19,31
    4668:	5ac00104 	addi	r11,r11,4
    466c:	dac02d15 	stw	r11,180(sp)
    4670:	e005883a 	mov	r2,fp
    4674:	003c0306 	br	3684 <__alt_mem_Flash_flash_data+0xf4003684>
    4678:	dac02d17 	ldw	r11,180(sp)
    467c:	0039883a 	mov	fp,zero
    4680:	0005883a 	mov	r2,zero
    4684:	5cc00017 	ldw	r19,0(r11)
    4688:	5ac00104 	addi	r11,r11,4
    468c:	dac02d15 	stw	r11,180(sp)
    4690:	9807883a 	mov	r3,r19
    4694:	003d4806 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    4698:	db002d17 	ldw	r12,180(sp)
    469c:	14c00017 	ldw	r19,0(r2)
    46a0:	0039883a 	mov	fp,zero
    46a4:	63000104 	addi	r12,r12,4
    46a8:	db002d15 	stw	r12,180(sp)
    46ac:	00800044 	movi	r2,1
    46b0:	9807883a 	mov	r3,r19
    46b4:	003d4006 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    46b8:	d9002f17 	ldw	r4,188(sp)
    46bc:	b80b883a 	mov	r5,r23
    46c0:	b00d883a 	mov	r6,r22
    46c4:	000c3e00 	call	c3e0 <__ssprint_r>
    46c8:	103bb61e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    46cc:	d8c02017 	ldw	r3,128(sp)
    46d0:	da000404 	addi	r8,sp,16
    46d4:	db003117 	ldw	r12,196(sp)
    46d8:	dac03417 	ldw	r11,208(sp)
    46dc:	d8802617 	ldw	r2,152(sp)
    46e0:	62e5883a 	add	r18,r12,r11
    46e4:	db003317 	ldw	r12,204(sp)
    46e8:	13000216 	blt	r2,r12,46f4 <___svfprintf_internal_r+0x1470>
    46ec:	8900004c 	andi	r4,r17,1
    46f0:	20000c26 	beq	r4,zero,4724 <___svfprintf_internal_r+0x14a0>
    46f4:	dac03917 	ldw	r11,228(sp)
    46f8:	d9001f17 	ldw	r4,124(sp)
    46fc:	db003517 	ldw	r12,212(sp)
    4700:	1ac7883a 	add	r3,r3,r11
    4704:	21000044 	addi	r4,r4,1
    4708:	43000015 	stw	r12,0(r8)
    470c:	42c00115 	stw	r11,4(r8)
    4710:	d8c02015 	stw	r3,128(sp)
    4714:	d9001f15 	stw	r4,124(sp)
    4718:	014001c4 	movi	r5,7
    471c:	2901b716 	blt	r5,r4,4dfc <___svfprintf_internal_r+0x1b78>
    4720:	42000204 	addi	r8,r8,8
    4724:	dac03317 	ldw	r11,204(sp)
    4728:	8489c83a 	sub	r4,r16,r18
    472c:	5885c83a 	sub	r2,r11,r2
    4730:	1021883a 	mov	r16,r2
    4734:	2080010e 	bge	r4,r2,473c <___svfprintf_internal_r+0x14b8>
    4738:	2021883a 	mov	r16,r4
    473c:	04000a0e 	bge	zero,r16,4768 <___svfprintf_internal_r+0x14e4>
    4740:	d9001f17 	ldw	r4,124(sp)
    4744:	1c07883a 	add	r3,r3,r16
    4748:	44800015 	stw	r18,0(r8)
    474c:	21000044 	addi	r4,r4,1
    4750:	44000115 	stw	r16,4(r8)
    4754:	d8c02015 	stw	r3,128(sp)
    4758:	d9001f15 	stw	r4,124(sp)
    475c:	014001c4 	movi	r5,7
    4760:	2901bf16 	blt	r5,r4,4e60 <___svfprintf_internal_r+0x1bdc>
    4764:	42000204 	addi	r8,r8,8
    4768:	8001bb16 	blt	r16,zero,4e58 <___svfprintf_internal_r+0x1bd4>
    476c:	1421c83a 	sub	r16,r2,r16
    4770:	043c990e 	bge	zero,r16,39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    4774:	04800404 	movi	r18,16
    4778:	d8801f17 	ldw	r2,124(sp)
    477c:	943f0b0e 	bge	r18,r16,43ac <__alt_mem_Flash_flash_data+0xf40043ac>
    4780:	014000b4 	movhi	r5,2
    4784:	297f8c84 	addi	r5,r5,-462
    4788:	d9402b15 	stw	r5,172(sp)
    478c:	054001c4 	movi	r21,7
    4790:	dcc02f17 	ldw	r19,188(sp)
    4794:	00000306 	br	47a4 <___svfprintf_internal_r+0x1520>
    4798:	42000204 	addi	r8,r8,8
    479c:	843ffc04 	addi	r16,r16,-16
    47a0:	943f050e 	bge	r18,r16,43b8 <__alt_mem_Flash_flash_data+0xf40043b8>
    47a4:	18c00404 	addi	r3,r3,16
    47a8:	10800044 	addi	r2,r2,1
    47ac:	45000015 	stw	r20,0(r8)
    47b0:	44800115 	stw	r18,4(r8)
    47b4:	d8c02015 	stw	r3,128(sp)
    47b8:	d8801f15 	stw	r2,124(sp)
    47bc:	a8bff60e 	bge	r21,r2,4798 <__alt_mem_Flash_flash_data+0xf4004798>
    47c0:	9809883a 	mov	r4,r19
    47c4:	b80b883a 	mov	r5,r23
    47c8:	b00d883a 	mov	r6,r22
    47cc:	000c3e00 	call	c3e0 <__ssprint_r>
    47d0:	103b741e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    47d4:	d8c02017 	ldw	r3,128(sp)
    47d8:	d8801f17 	ldw	r2,124(sp)
    47dc:	da000404 	addi	r8,sp,16
    47e0:	003fee06 	br	479c <__alt_mem_Flash_flash_data+0xf400479c>
    47e4:	8888703a 	and	r4,r17,r2
    47e8:	203eb31e 	bne	r4,zero,42b8 <__alt_mem_Flash_flash_data+0xf40042b8>
    47ec:	dc001f17 	ldw	r16,124(sp)
    47f0:	db003117 	ldw	r12,196(sp)
    47f4:	40800115 	stw	r2,4(r8)
    47f8:	84000044 	addi	r16,r16,1
    47fc:	43000015 	stw	r12,0(r8)
    4800:	d8c02015 	stw	r3,128(sp)
    4804:	dc001f15 	stw	r16,124(sp)
    4808:	008001c4 	movi	r2,7
    480c:	143f8716 	blt	r2,r16,462c <__alt_mem_Flash_flash_data+0xf400462c>
    4810:	44800204 	addi	r18,r8,8
    4814:	003ed306 	br	4364 <__alt_mem_Flash_flash_data+0xf4004364>
    4818:	d9002f17 	ldw	r4,188(sp)
    481c:	b80b883a 	mov	r5,r23
    4820:	b00d883a 	mov	r6,r22
    4824:	000c3e00 	call	c3e0 <__ssprint_r>
    4828:	103b5e1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    482c:	d8c02017 	ldw	r3,128(sp)
    4830:	dc001f17 	ldw	r16,124(sp)
    4834:	da000404 	addi	r8,sp,16
    4838:	003eaa06 	br	42e4 <__alt_mem_Flash_flash_data+0xf40042e4>
    483c:	d9002f17 	ldw	r4,188(sp)
    4840:	b80b883a 	mov	r5,r23
    4844:	b00d883a 	mov	r6,r22
    4848:	000c3e00 	call	c3e0 <__ssprint_r>
    484c:	103b551e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4850:	d8c02017 	ldw	r3,128(sp)
    4854:	dc001f17 	ldw	r16,124(sp)
    4858:	dc800404 	addi	r18,sp,16
    485c:	003eac06 	br	4310 <__alt_mem_Flash_flash_data+0xf4004310>
    4860:	d9002f17 	ldw	r4,188(sp)
    4864:	b80b883a 	mov	r5,r23
    4868:	b00d883a 	mov	r6,r22
    486c:	000c3e00 	call	c3e0 <__ssprint_r>
    4870:	103b4c1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4874:	d8c02017 	ldw	r3,128(sp)
    4878:	da000404 	addi	r8,sp,16
    487c:	003c1506 	br	38d4 <__alt_mem_Flash_flash_data+0xf40038d4>
    4880:	da004015 	stw	r8,256(sp)
    4884:	da403f15 	stw	r9,252(sp)
    4888:	000c1380 	call	c138 <__fpclassifyd>
    488c:	da004017 	ldw	r8,256(sp)
    4890:	da403f17 	ldw	r9,252(sp)
    4894:	1000951e 	bne	r2,zero,4aec <___svfprintf_internal_r+0x1868>
    4898:	008011c4 	movi	r2,71
    489c:	1400fb16 	blt	r2,r16,4c8c <___svfprintf_internal_r+0x1a08>
    48a0:	030000b4 	movhi	r12,2
    48a4:	633f7e04 	addi	r12,r12,-520
    48a8:	db003115 	stw	r12,196(sp)
    48ac:	00c000c4 	movi	r3,3
    48b0:	00bfdfc4 	movi	r2,-129
    48b4:	d8c02a15 	stw	r3,168(sp)
    48b8:	88a2703a 	and	r17,r17,r2
    48bc:	dd402783 	ldbu	r21,158(sp)
    48c0:	dcc02d15 	stw	r19,180(sp)
    48c4:	1825883a 	mov	r18,r3
    48c8:	d8003215 	stw	zero,200(sp)
    48cc:	d8003415 	stw	zero,208(sp)
    48d0:	003b9806 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    48d4:	1c000007 	ldb	r16,0(r3)
    48d8:	1805883a 	mov	r2,r3
    48dc:	003abf06 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    48e0:	00800084 	movi	r2,2
    48e4:	003cb406 	br	3bb8 <__alt_mem_Flash_flash_data+0xf4003bb8>
    48e8:	88c0100c 	andi	r3,r17,64
    48ec:	1800f626 	beq	r3,zero,4cc8 <___svfprintf_internal_r+0x1a44>
    48f0:	dac02d17 	ldw	r11,180(sp)
    48f4:	14c0000b 	ldhu	r19,0(r2)
    48f8:	0039883a 	mov	fp,zero
    48fc:	5ac00104 	addi	r11,r11,4
    4900:	dac02d15 	stw	r11,180(sp)
    4904:	003cbd06 	br	3bfc <__alt_mem_Flash_flash_data+0xf4003bfc>
    4908:	8880040c 	andi	r2,r17,16
    490c:	1000091e 	bne	r2,zero,4934 <___svfprintf_internal_r+0x16b0>
    4910:	8c40100c 	andi	r17,r17,64
    4914:	88000726 	beq	r17,zero,4934 <___svfprintf_internal_r+0x16b0>
    4918:	db002d17 	ldw	r12,180(sp)
    491c:	dac03017 	ldw	r11,192(sp)
    4920:	60800017 	ldw	r2,0(r12)
    4924:	63000104 	addi	r12,r12,4
    4928:	db002d15 	stw	r12,180(sp)
    492c:	12c0000d 	sth	r11,0(r2)
    4930:	003a8006 	br	3334 <__alt_mem_Flash_flash_data+0xf4003334>
    4934:	db002d17 	ldw	r12,180(sp)
    4938:	dac03017 	ldw	r11,192(sp)
    493c:	60800017 	ldw	r2,0(r12)
    4940:	63000104 	addi	r12,r12,4
    4944:	db002d15 	stw	r12,180(sp)
    4948:	12c00015 	stw	r11,0(r2)
    494c:	003a7906 	br	3334 <__alt_mem_Flash_flash_data+0xf4003334>
    4950:	010000b4 	movhi	r4,2
    4954:	213f8c84 	addi	r4,r4,-462
    4958:	d9002b15 	stw	r4,172(sp)
    495c:	dac02b17 	ldw	r11,172(sp)
    4960:	1c87883a 	add	r3,r3,r18
    4964:	10800044 	addi	r2,r2,1
    4968:	42c00015 	stw	r11,0(r8)
    496c:	44800115 	stw	r18,4(r8)
    4970:	d8c02015 	stw	r3,128(sp)
    4974:	d8801f15 	stw	r2,124(sp)
    4978:	010001c4 	movi	r4,7
    497c:	20bf4e16 	blt	r4,r2,46b8 <__alt_mem_Flash_flash_data+0xf40046b8>
    4980:	42000204 	addi	r8,r8,8
    4984:	003f5306 	br	46d4 <__alt_mem_Flash_flash_data+0xf40046d4>
    4988:	010000b4 	movhi	r4,2
    498c:	213f8c84 	addi	r4,r4,-462
    4990:	d9002b15 	stw	r4,172(sp)
    4994:	003bf906 	br	397c <__alt_mem_Flash_flash_data+0xf400397c>
    4998:	d9002f17 	ldw	r4,188(sp)
    499c:	b80b883a 	mov	r5,r23
    49a0:	b00d883a 	mov	r6,r22
    49a4:	000c3e00 	call	c3e0 <__ssprint_r>
    49a8:	103afe1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    49ac:	d8c02017 	ldw	r3,128(sp)
    49b0:	da000404 	addi	r8,sp,16
    49b4:	003dc606 	br	40d0 <__alt_mem_Flash_flash_data+0xf40040d0>
    49b8:	d8801f17 	ldw	r2,124(sp)
    49bc:	030000b4 	movhi	r12,2
    49c0:	01000044 	movi	r4,1
    49c4:	18c00044 	addi	r3,r3,1
    49c8:	10800044 	addi	r2,r2,1
    49cc:	633f8c04 	addi	r12,r12,-464
    49d0:	41000115 	stw	r4,4(r8)
    49d4:	43000015 	stw	r12,0(r8)
    49d8:	d8c02015 	stw	r3,128(sp)
    49dc:	d8801f15 	stw	r2,124(sp)
    49e0:	010001c4 	movi	r4,7
    49e4:	2080ad16 	blt	r4,r2,4c9c <___svfprintf_internal_r+0x1a18>
    49e8:	42000204 	addi	r8,r8,8
    49ec:	8000041e 	bne	r16,zero,4a00 <___svfprintf_internal_r+0x177c>
    49f0:	dac03317 	ldw	r11,204(sp)
    49f4:	5800021e 	bne	r11,zero,4a00 <___svfprintf_internal_r+0x177c>
    49f8:	8880004c 	andi	r2,r17,1
    49fc:	103bf626 	beq	r2,zero,39d8 <__alt_mem_Flash_flash_data+0xf40039d8>
    4a00:	db003917 	ldw	r12,228(sp)
    4a04:	d8801f17 	ldw	r2,124(sp)
    4a08:	dac03517 	ldw	r11,212(sp)
    4a0c:	1b07883a 	add	r3,r3,r12
    4a10:	10800044 	addi	r2,r2,1
    4a14:	42c00015 	stw	r11,0(r8)
    4a18:	43000115 	stw	r12,4(r8)
    4a1c:	d8c02015 	stw	r3,128(sp)
    4a20:	d8801f15 	stw	r2,124(sp)
    4a24:	010001c4 	movi	r4,7
    4a28:	20818616 	blt	r4,r2,5044 <___svfprintf_internal_r+0x1dc0>
    4a2c:	42000204 	addi	r8,r8,8
    4a30:	0421c83a 	sub	r16,zero,r16
    4a34:	0400bc0e 	bge	zero,r16,4d28 <___svfprintf_internal_r+0x1aa4>
    4a38:	04800404 	movi	r18,16
    4a3c:	9400f80e 	bge	r18,r16,4e20 <___svfprintf_internal_r+0x1b9c>
    4a40:	010000b4 	movhi	r4,2
    4a44:	213f8c84 	addi	r4,r4,-462
    4a48:	d9002b15 	stw	r4,172(sp)
    4a4c:	054001c4 	movi	r21,7
    4a50:	dcc02f17 	ldw	r19,188(sp)
    4a54:	00000306 	br	4a64 <___svfprintf_internal_r+0x17e0>
    4a58:	42000204 	addi	r8,r8,8
    4a5c:	843ffc04 	addi	r16,r16,-16
    4a60:	9400f20e 	bge	r18,r16,4e2c <___svfprintf_internal_r+0x1ba8>
    4a64:	18c00404 	addi	r3,r3,16
    4a68:	10800044 	addi	r2,r2,1
    4a6c:	45000015 	stw	r20,0(r8)
    4a70:	44800115 	stw	r18,4(r8)
    4a74:	d8c02015 	stw	r3,128(sp)
    4a78:	d8801f15 	stw	r2,124(sp)
    4a7c:	a8bff60e 	bge	r21,r2,4a58 <__alt_mem_Flash_flash_data+0xf4004a58>
    4a80:	9809883a 	mov	r4,r19
    4a84:	b80b883a 	mov	r5,r23
    4a88:	b00d883a 	mov	r6,r22
    4a8c:	000c3e00 	call	c3e0 <__ssprint_r>
    4a90:	103ac41e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4a94:	d8c02017 	ldw	r3,128(sp)
    4a98:	d8801f17 	ldw	r2,124(sp)
    4a9c:	da000404 	addi	r8,sp,16
    4aa0:	003fee06 	br	4a5c <__alt_mem_Flash_flash_data+0xf4004a5c>
    4aa4:	db002e17 	ldw	r12,184(sp)
    4aa8:	1805883a 	mov	r2,r3
    4aac:	dac02d15 	stw	r11,180(sp)
    4ab0:	0319c83a 	sub	r12,zero,r12
    4ab4:	db002e15 	stw	r12,184(sp)
    4ab8:	003acf06 	br	35f8 <__alt_mem_Flash_flash_data+0xf40035f8>
    4abc:	18800044 	addi	r2,r3,1
    4ac0:	8c400814 	ori	r17,r17,32
    4ac4:	1c000047 	ldb	r16,1(r3)
    4ac8:	003a4406 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    4acc:	d9002f17 	ldw	r4,188(sp)
    4ad0:	b80b883a 	mov	r5,r23
    4ad4:	b00d883a 	mov	r6,r22
    4ad8:	000c3e00 	call	c3e0 <__ssprint_r>
    4adc:	103ab11e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4ae0:	d8c02017 	ldw	r3,128(sp)
    4ae4:	da000404 	addi	r8,sp,16
    4ae8:	003d8a06 	br	4114 <__alt_mem_Flash_flash_data+0xf4004114>
    4aec:	057ff7c4 	movi	r21,-33
    4af0:	00bfffc4 	movi	r2,-1
    4af4:	856a703a 	and	r21,r16,r21
    4af8:	48807126 	beq	r9,r2,4cc0 <___svfprintf_internal_r+0x1a3c>
    4afc:	008011c4 	movi	r2,71
    4b00:	a8814d26 	beq	r21,r2,5038 <___svfprintf_internal_r+0x1db4>
    4b04:	db003817 	ldw	r12,224(sp)
    4b08:	8ac04014 	ori	r11,r17,256
    4b0c:	dac02d15 	stw	r11,180(sp)
    4b10:	60015616 	blt	r12,zero,506c <___svfprintf_internal_r+0x1de8>
    4b14:	dc803817 	ldw	r18,224(sp)
    4b18:	d8002a05 	stb	zero,168(sp)
    4b1c:	00801984 	movi	r2,102
    4b20:	80808c26 	beq	r16,r2,4d54 <___svfprintf_internal_r+0x1ad0>
    4b24:	00801184 	movi	r2,70
    4b28:	80808a26 	beq	r16,r2,4d54 <___svfprintf_internal_r+0x1ad0>
    4b2c:	00801144 	movi	r2,69
    4b30:	a8815226 	beq	r21,r2,507c <___svfprintf_internal_r+0x1df8>
    4b34:	4839883a 	mov	fp,r9
    4b38:	d8802604 	addi	r2,sp,152
    4b3c:	d8800115 	stw	r2,4(sp)
    4b40:	d9002f17 	ldw	r4,188(sp)
    4b44:	d8802504 	addi	r2,sp,148
    4b48:	d9403717 	ldw	r5,220(sp)
    4b4c:	d8800215 	stw	r2,8(sp)
    4b50:	d8802104 	addi	r2,sp,132
    4b54:	df000015 	stw	fp,0(sp)
    4b58:	d8800315 	stw	r2,12(sp)
    4b5c:	900d883a 	mov	r6,r18
    4b60:	01c00084 	movi	r7,2
    4b64:	da004015 	stw	r8,256(sp)
    4b68:	da403f15 	stw	r9,252(sp)
    4b6c:	00075980 	call	7598 <_dtoa_r>
    4b70:	d8803115 	stw	r2,196(sp)
    4b74:	008019c4 	movi	r2,103
    4b78:	da004017 	ldw	r8,256(sp)
    4b7c:	da403f17 	ldw	r9,252(sp)
    4b80:	80800226 	beq	r16,r2,4b8c <___svfprintf_internal_r+0x1908>
    4b84:	008011c4 	movi	r2,71
    4b88:	8080841e 	bne	r16,r2,4d9c <___svfprintf_internal_r+0x1b18>
    4b8c:	8880004c 	andi	r2,r17,1
    4b90:	10014f26 	beq	r2,zero,50d0 <___svfprintf_internal_r+0x1e4c>
    4b94:	db003117 	ldw	r12,196(sp)
    4b98:	6715883a 	add	r10,r12,fp
    4b9c:	d9003717 	ldw	r4,220(sp)
    4ba0:	900b883a 	mov	r5,r18
    4ba4:	000d883a 	mov	r6,zero
    4ba8:	000f883a 	mov	r7,zero
    4bac:	da004015 	stw	r8,256(sp)
    4bb0:	da403f15 	stw	r9,252(sp)
    4bb4:	da803e15 	stw	r10,248(sp)
    4bb8:	00111840 	call	11184 <__eqdf2>
    4bbc:	da004017 	ldw	r8,256(sp)
    4bc0:	da403f17 	ldw	r9,252(sp)
    4bc4:	da803e17 	ldw	r10,248(sp)
    4bc8:	1000d926 	beq	r2,zero,4f30 <___svfprintf_internal_r+0x1cac>
    4bcc:	d8802117 	ldw	r2,132(sp)
    4bd0:	1280062e 	bgeu	r2,r10,4bec <___svfprintf_internal_r+0x1968>
    4bd4:	01000c04 	movi	r4,48
    4bd8:	10c00044 	addi	r3,r2,1
    4bdc:	d8c02115 	stw	r3,132(sp)
    4be0:	11000005 	stb	r4,0(r2)
    4be4:	d8802117 	ldw	r2,132(sp)
    4be8:	12bffb36 	bltu	r2,r10,4bd8 <__alt_mem_Flash_flash_data+0xf4004bd8>
    4bec:	db003117 	ldw	r12,196(sp)
    4bf0:	1305c83a 	sub	r2,r2,r12
    4bf4:	d8803315 	stw	r2,204(sp)
    4bf8:	008011c4 	movi	r2,71
    4bfc:	a880b626 	beq	r21,r2,4ed8 <___svfprintf_internal_r+0x1c54>
    4c00:	00801944 	movi	r2,101
    4c04:	14017c0e 	bge	r2,r16,51f8 <___svfprintf_internal_r+0x1f74>
    4c08:	00801984 	movi	r2,102
    4c0c:	80812626 	beq	r16,r2,50a8 <___svfprintf_internal_r+0x1e24>
    4c10:	db002617 	ldw	r12,152(sp)
    4c14:	db003415 	stw	r12,208(sp)
    4c18:	db003417 	ldw	r12,208(sp)
    4c1c:	dac03317 	ldw	r11,204(sp)
    4c20:	62c11816 	blt	r12,r11,5084 <___svfprintf_internal_r+0x1e00>
    4c24:	8c40004c 	andi	r17,r17,1
    4c28:	88013b1e 	bne	r17,zero,5118 <___svfprintf_internal_r+0x1e94>
    4c2c:	6005883a 	mov	r2,r12
    4c30:	60012516 	blt	r12,zero,50c8 <___svfprintf_internal_r+0x1e44>
    4c34:	dc803417 	ldw	r18,208(sp)
    4c38:	df002a07 	ldb	fp,168(sp)
    4c3c:	e000b01e 	bne	fp,zero,4f00 <___svfprintf_internal_r+0x1c7c>
    4c40:	dc402d17 	ldw	r17,180(sp)
    4c44:	dd402783 	ldbu	r21,158(sp)
    4c48:	d8802a15 	stw	r2,168(sp)
    4c4c:	dcc02d15 	stw	r19,180(sp)
    4c50:	d8003215 	stw	zero,200(sp)
    4c54:	003ab706 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    4c58:	008000b4 	movhi	r2,2
    4c5c:	10bf7c04 	addi	r2,r2,-528
    4c60:	d8803115 	stw	r2,196(sp)
    4c64:	003bbb06 	br	3b54 <__alt_mem_Flash_flash_data+0xf4003b54>
    4c68:	d9002f17 	ldw	r4,188(sp)
    4c6c:	04001004 	movi	r16,64
    4c70:	800b883a 	mov	r5,r16
    4c74:	0009fe80 	call	9fe8 <_malloc_r>
    4c78:	b8800015 	stw	r2,0(r23)
    4c7c:	b8800415 	stw	r2,16(r23)
    4c80:	10015f26 	beq	r2,zero,5200 <___svfprintf_internal_r+0x1f7c>
    4c84:	bc000515 	stw	r16,20(r23)
    4c88:	00399806 	br	32ec <__alt_mem_Flash_flash_data+0xf40032ec>
    4c8c:	008000b4 	movhi	r2,2
    4c90:	10bf7f04 	addi	r2,r2,-516
    4c94:	d8803115 	stw	r2,196(sp)
    4c98:	003f0406 	br	48ac <__alt_mem_Flash_flash_data+0xf40048ac>
    4c9c:	d9002f17 	ldw	r4,188(sp)
    4ca0:	b80b883a 	mov	r5,r23
    4ca4:	b00d883a 	mov	r6,r22
    4ca8:	000c3e00 	call	c3e0 <__ssprint_r>
    4cac:	103a3d1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4cb0:	dc002617 	ldw	r16,152(sp)
    4cb4:	d8c02017 	ldw	r3,128(sp)
    4cb8:	da000404 	addi	r8,sp,16
    4cbc:	003f4b06 	br	49ec <__alt_mem_Flash_flash_data+0xf40049ec>
    4cc0:	02400184 	movi	r9,6
    4cc4:	003f8f06 	br	4b04 <__alt_mem_Flash_flash_data+0xf4004b04>
    4cc8:	db002d17 	ldw	r12,180(sp)
    4ccc:	14c00017 	ldw	r19,0(r2)
    4cd0:	0039883a 	mov	fp,zero
    4cd4:	63000104 	addi	r12,r12,4
    4cd8:	db002d15 	stw	r12,180(sp)
    4cdc:	003bc706 	br	3bfc <__alt_mem_Flash_flash_data+0xf4003bfc>
    4ce0:	d8c03117 	ldw	r3,196(sp)
    4ce4:	b0e5c83a 	sub	r18,r22,r3
    4ce8:	003a8d06 	br	3720 <__alt_mem_Flash_flash_data+0xf4003720>
    4cec:	da004015 	stw	r8,256(sp)
    4cf0:	00031ec0 	call	31ec <strlen>
    4cf4:	1025883a 	mov	r18,r2
    4cf8:	da004017 	ldw	r8,256(sp)
    4cfc:	903bf20e 	bge	r18,zero,3cc8 <__alt_mem_Flash_flash_data+0xf4003cc8>
    4d00:	0005883a 	mov	r2,zero
    4d04:	003bf006 	br	3cc8 <__alt_mem_Flash_flash_data+0xf4003cc8>
    4d08:	d9002f17 	ldw	r4,188(sp)
    4d0c:	b80b883a 	mov	r5,r23
    4d10:	b00d883a 	mov	r6,r22
    4d14:	000c3e00 	call	c3e0 <__ssprint_r>
    4d18:	103a221e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4d1c:	d8c02017 	ldw	r3,128(sp)
    4d20:	d8801f17 	ldw	r2,124(sp)
    4d24:	da000404 	addi	r8,sp,16
    4d28:	db003317 	ldw	r12,204(sp)
    4d2c:	dac03117 	ldw	r11,196(sp)
    4d30:	10800044 	addi	r2,r2,1
    4d34:	1b07883a 	add	r3,r3,r12
    4d38:	42c00015 	stw	r11,0(r8)
    4d3c:	43000115 	stw	r12,4(r8)
    4d40:	d8c02015 	stw	r3,128(sp)
    4d44:	d8801f15 	stw	r2,124(sp)
    4d48:	010001c4 	movi	r4,7
    4d4c:	20bb210e 	bge	r4,r2,39d4 <__alt_mem_Flash_flash_data+0xf40039d4>
    4d50:	003da206 	br	43dc <__alt_mem_Flash_flash_data+0xf40043dc>
    4d54:	d8802604 	addi	r2,sp,152
    4d58:	d8800115 	stw	r2,4(sp)
    4d5c:	d9002f17 	ldw	r4,188(sp)
    4d60:	d8802504 	addi	r2,sp,148
    4d64:	d9403717 	ldw	r5,220(sp)
    4d68:	d8800215 	stw	r2,8(sp)
    4d6c:	d8802104 	addi	r2,sp,132
    4d70:	da400015 	stw	r9,0(sp)
    4d74:	d8800315 	stw	r2,12(sp)
    4d78:	900d883a 	mov	r6,r18
    4d7c:	01c000c4 	movi	r7,3
    4d80:	da004015 	stw	r8,256(sp)
    4d84:	da403f15 	stw	r9,252(sp)
    4d88:	00075980 	call	7598 <_dtoa_r>
    4d8c:	da403f17 	ldw	r9,252(sp)
    4d90:	da004017 	ldw	r8,256(sp)
    4d94:	d8803115 	stw	r2,196(sp)
    4d98:	4839883a 	mov	fp,r9
    4d9c:	dac03117 	ldw	r11,196(sp)
    4da0:	00801184 	movi	r2,70
    4da4:	5f15883a 	add	r10,r11,fp
    4da8:	a8bf7c1e 	bne	r21,r2,4b9c <__alt_mem_Flash_flash_data+0xf4004b9c>
    4dac:	59000007 	ldb	r4,0(r11)
    4db0:	00800c04 	movi	r2,48
    4db4:	2080c826 	beq	r4,r2,50d8 <___svfprintf_internal_r+0x1e54>
    4db8:	d8c02617 	ldw	r3,152(sp)
    4dbc:	50d5883a 	add	r10,r10,r3
    4dc0:	003f7606 	br	4b9c <__alt_mem_Flash_flash_data+0xf4004b9c>
    4dc4:	010000b4 	movhi	r4,2
    4dc8:	213f9084 	addi	r4,r4,-446
    4dcc:	d9003615 	stw	r4,216(sp)
    4dd0:	003a9706 	br	3830 <__alt_mem_Flash_flash_data+0xf4003830>
    4dd4:	0025883a 	mov	r18,zero
    4dd8:	003dc306 	br	44e8 <__alt_mem_Flash_flash_data+0xf40044e8>
    4ddc:	d9002f17 	ldw	r4,188(sp)
    4de0:	b80b883a 	mov	r5,r23
    4de4:	b00d883a 	mov	r6,r22
    4de8:	000c3e00 	call	c3e0 <__ssprint_r>
    4dec:	1039ed1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4df0:	d8c02017 	ldw	r3,128(sp)
    4df4:	da000404 	addi	r8,sp,16
    4df8:	003dba06 	br	44e4 <__alt_mem_Flash_flash_data+0xf40044e4>
    4dfc:	d9002f17 	ldw	r4,188(sp)
    4e00:	b80b883a 	mov	r5,r23
    4e04:	b00d883a 	mov	r6,r22
    4e08:	000c3e00 	call	c3e0 <__ssprint_r>
    4e0c:	1039e51e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4e10:	d8802617 	ldw	r2,152(sp)
    4e14:	d8c02017 	ldw	r3,128(sp)
    4e18:	da000404 	addi	r8,sp,16
    4e1c:	003e4106 	br	4724 <__alt_mem_Flash_flash_data+0xf4004724>
    4e20:	030000b4 	movhi	r12,2
    4e24:	633f8c84 	addi	r12,r12,-462
    4e28:	db002b15 	stw	r12,172(sp)
    4e2c:	dac02b17 	ldw	r11,172(sp)
    4e30:	1c07883a 	add	r3,r3,r16
    4e34:	10800044 	addi	r2,r2,1
    4e38:	42c00015 	stw	r11,0(r8)
    4e3c:	44000115 	stw	r16,4(r8)
    4e40:	d8c02015 	stw	r3,128(sp)
    4e44:	d8801f15 	stw	r2,124(sp)
    4e48:	010001c4 	movi	r4,7
    4e4c:	20bfae16 	blt	r4,r2,4d08 <__alt_mem_Flash_flash_data+0xf4004d08>
    4e50:	42000204 	addi	r8,r8,8
    4e54:	003fb406 	br	4d28 <__alt_mem_Flash_flash_data+0xf4004d28>
    4e58:	0021883a 	mov	r16,zero
    4e5c:	003e4306 	br	476c <__alt_mem_Flash_flash_data+0xf400476c>
    4e60:	d9002f17 	ldw	r4,188(sp)
    4e64:	b80b883a 	mov	r5,r23
    4e68:	b00d883a 	mov	r6,r22
    4e6c:	000c3e00 	call	c3e0 <__ssprint_r>
    4e70:	1039cc1e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    4e74:	d8802617 	ldw	r2,152(sp)
    4e78:	db003317 	ldw	r12,204(sp)
    4e7c:	d8c02017 	ldw	r3,128(sp)
    4e80:	da000404 	addi	r8,sp,16
    4e84:	6085c83a 	sub	r2,r12,r2
    4e88:	003e3706 	br	4768 <__alt_mem_Flash_flash_data+0xf4004768>
    4e8c:	00800184 	movi	r2,6
    4e90:	1240012e 	bgeu	r2,r9,4e98 <___svfprintf_internal_r+0x1c14>
    4e94:	1013883a 	mov	r9,r2
    4e98:	4825883a 	mov	r18,r9
    4e9c:	4805883a 	mov	r2,r9
    4ea0:	4800a216 	blt	r9,zero,512c <___svfprintf_internal_r+0x1ea8>
    4ea4:	d8802a15 	stw	r2,168(sp)
    4ea8:	008000b4 	movhi	r2,2
    4eac:	10bf8a04 	addi	r2,r2,-472
    4eb0:	d8803115 	stw	r2,196(sp)
    4eb4:	dcc02d15 	stw	r19,180(sp)
    4eb8:	d8003215 	stw	zero,200(sp)
    4ebc:	d8003415 	stw	zero,208(sp)
    4ec0:	0005883a 	mov	r2,zero
    4ec4:	003a2206 	br	3750 <__alt_mem_Flash_flash_data+0xf4003750>
    4ec8:	030000b4 	movhi	r12,2
    4ecc:	633f9084 	addi	r12,r12,-446
    4ed0:	db003615 	stw	r12,216(sp)
    4ed4:	003ae506 	br	3a6c <__alt_mem_Flash_flash_data+0xf4003a6c>
    4ed8:	d8c02617 	ldw	r3,152(sp)
    4edc:	00bfff44 	movi	r2,-3
    4ee0:	18801516 	blt	r3,r2,4f38 <___svfprintf_internal_r+0x1cb4>
    4ee4:	48c01416 	blt	r9,r3,4f38 <___svfprintf_internal_r+0x1cb4>
    4ee8:	d8c03415 	stw	r3,208(sp)
    4eec:	040019c4 	movi	r16,103
    4ef0:	003f4906 	br	4c18 <__alt_mem_Flash_flash_data+0xf4004c18>
    4ef4:	05400b44 	movi	r21,45
    4ef8:	dd402785 	stb	r21,158(sp)
    4efc:	003b1006 	br	3b40 <__alt_mem_Flash_flash_data+0xf4003b40>
    4f00:	00c00b44 	movi	r3,45
    4f04:	d8802a15 	stw	r2,168(sp)
    4f08:	dc402d17 	ldw	r17,180(sp)
    4f0c:	d8c02785 	stb	r3,158(sp)
    4f10:	dcc02d15 	stw	r19,180(sp)
    4f14:	d8003215 	stw	zero,200(sp)
    4f18:	00800b44 	movi	r2,45
    4f1c:	003a0906 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    4f20:	010000b4 	movhi	r4,2
    4f24:	213f8c84 	addi	r4,r4,-462
    4f28:	d9002b15 	stw	r4,172(sp)
    4f2c:	003cc306 	br	423c <__alt_mem_Flash_flash_data+0xf400423c>
    4f30:	5005883a 	mov	r2,r10
    4f34:	003f2d06 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    4f38:	843fff84 	addi	r16,r16,-2
    4f3c:	1f3fffc4 	addi	fp,r3,-1
    4f40:	df002615 	stw	fp,152(sp)
    4f44:	dc0022c5 	stb	r16,139(sp)
    4f48:	e000a016 	blt	fp,zero,51cc <___svfprintf_internal_r+0x1f48>
    4f4c:	00800ac4 	movi	r2,43
    4f50:	d8802305 	stb	r2,140(sp)
    4f54:	00800244 	movi	r2,9
    4f58:	1700800e 	bge	r2,fp,515c <___svfprintf_internal_r+0x1ed8>
    4f5c:	dd4022c4 	addi	r21,sp,139
    4f60:	dc002b15 	stw	r16,172(sp)
    4f64:	4025883a 	mov	r18,r8
    4f68:	a821883a 	mov	r16,r21
    4f6c:	e009883a 	mov	r4,fp
    4f70:	01400284 	movi	r5,10
    4f74:	000ffb00 	call	ffb0 <__modsi3>
    4f78:	10800c04 	addi	r2,r2,48
    4f7c:	843fffc4 	addi	r16,r16,-1
    4f80:	e009883a 	mov	r4,fp
    4f84:	01400284 	movi	r5,10
    4f88:	80800005 	stb	r2,0(r16)
    4f8c:	000ff5c0 	call	ff5c <__divsi3>
    4f90:	1039883a 	mov	fp,r2
    4f94:	00800244 	movi	r2,9
    4f98:	173ff416 	blt	r2,fp,4f6c <__alt_mem_Flash_flash_data+0xf4004f6c>
    4f9c:	9011883a 	mov	r8,r18
    4fa0:	e0800c04 	addi	r2,fp,48
    4fa4:	8025883a 	mov	r18,r16
    4fa8:	913fffc4 	addi	r4,r18,-1
    4fac:	90bfffc5 	stb	r2,-1(r18)
    4fb0:	dc002b17 	ldw	r16,172(sp)
    4fb4:	25408e2e 	bgeu	r4,r21,51f0 <___svfprintf_internal_r+0x1f6c>
    4fb8:	d9402384 	addi	r5,sp,142
    4fbc:	2c8bc83a 	sub	r5,r5,r18
    4fc0:	d8c02344 	addi	r3,sp,141
    4fc4:	a94b883a 	add	r5,r21,r5
    4fc8:	00000106 	br	4fd0 <___svfprintf_internal_r+0x1d4c>
    4fcc:	20800003 	ldbu	r2,0(r4)
    4fd0:	18800005 	stb	r2,0(r3)
    4fd4:	18c00044 	addi	r3,r3,1
    4fd8:	21000044 	addi	r4,r4,1
    4fdc:	197ffb1e 	bne	r3,r5,4fcc <__alt_mem_Flash_flash_data+0xf4004fcc>
    4fe0:	d8802304 	addi	r2,sp,140
    4fe4:	1485c83a 	sub	r2,r2,r18
    4fe8:	d8c02344 	addi	r3,sp,141
    4fec:	1885883a 	add	r2,r3,r2
    4ff0:	dac03317 	ldw	r11,204(sp)
    4ff4:	156bc83a 	sub	r21,r2,r21
    4ff8:	dd403a15 	stw	r21,232(sp)
    4ffc:	00800044 	movi	r2,1
    5000:	5d65883a 	add	r18,r11,r21
    5004:	12c0770e 	bge	r2,r11,51e4 <___svfprintf_internal_r+0x1f60>
    5008:	94800044 	addi	r18,r18,1
    500c:	9005883a 	mov	r2,r18
    5010:	90007216 	blt	r18,zero,51dc <___svfprintf_internal_r+0x1f58>
    5014:	d8003415 	stw	zero,208(sp)
    5018:	003f0706 	br	4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    501c:	da402a15 	stw	r9,168(sp)
    5020:	dd402783 	ldbu	r21,158(sp)
    5024:	4825883a 	mov	r18,r9
    5028:	dcc02d15 	stw	r19,180(sp)
    502c:	d8003215 	stw	zero,200(sp)
    5030:	d8003415 	stw	zero,208(sp)
    5034:	0039bf06 	br	3734 <__alt_mem_Flash_flash_data+0xf4003734>
    5038:	483eb21e 	bne	r9,zero,4b04 <__alt_mem_Flash_flash_data+0xf4004b04>
    503c:	9013883a 	mov	r9,r18
    5040:	003eb006 	br	4b04 <__alt_mem_Flash_flash_data+0xf4004b04>
    5044:	d9002f17 	ldw	r4,188(sp)
    5048:	b80b883a 	mov	r5,r23
    504c:	b00d883a 	mov	r6,r22
    5050:	000c3e00 	call	c3e0 <__ssprint_r>
    5054:	1039531e 	bne	r2,zero,35a4 <__alt_mem_Flash_flash_data+0xf40035a4>
    5058:	dc002617 	ldw	r16,152(sp)
    505c:	d8c02017 	ldw	r3,128(sp)
    5060:	d8801f17 	ldw	r2,124(sp)
    5064:	da000404 	addi	r8,sp,16
    5068:	003e7106 	br	4a30 <__alt_mem_Flash_flash_data+0xf4004a30>
    506c:	00c00b44 	movi	r3,45
    5070:	64a0003c 	xorhi	r18,r12,32768
    5074:	d8c02a05 	stb	r3,168(sp)
    5078:	003ea806 	br	4b1c <__alt_mem_Flash_flash_data+0xf4004b1c>
    507c:	4f000044 	addi	fp,r9,1
    5080:	003ead06 	br	4b38 <__alt_mem_Flash_flash_data+0xf4004b38>
    5084:	d8c03417 	ldw	r3,208(sp)
    5088:	00c0410e 	bge	zero,r3,5190 <___svfprintf_internal_r+0x1f0c>
    508c:	04800044 	movi	r18,1
    5090:	dac03317 	ldw	r11,204(sp)
    5094:	92e5883a 	add	r18,r18,r11
    5098:	9005883a 	mov	r2,r18
    509c:	903ee60e 	bge	r18,zero,4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    50a0:	0005883a 	mov	r2,zero
    50a4:	003ee406 	br	4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    50a8:	d8c02617 	ldw	r3,152(sp)
    50ac:	d8c03415 	stw	r3,208(sp)
    50b0:	00c0310e 	bge	zero,r3,5178 <___svfprintf_internal_r+0x1ef4>
    50b4:	48001f1e 	bne	r9,zero,5134 <___svfprintf_internal_r+0x1eb0>
    50b8:	8c40004c 	andi	r17,r17,1
    50bc:	88001d1e 	bne	r17,zero,5134 <___svfprintf_internal_r+0x1eb0>
    50c0:	1805883a 	mov	r2,r3
    50c4:	183edb0e 	bge	r3,zero,4c34 <__alt_mem_Flash_flash_data+0xf4004c34>
    50c8:	0005883a 	mov	r2,zero
    50cc:	003ed906 	br	4c34 <__alt_mem_Flash_flash_data+0xf4004c34>
    50d0:	d8802117 	ldw	r2,132(sp)
    50d4:	003ec506 	br	4bec <__alt_mem_Flash_flash_data+0xf4004bec>
    50d8:	d9003717 	ldw	r4,220(sp)
    50dc:	900b883a 	mov	r5,r18
    50e0:	000d883a 	mov	r6,zero
    50e4:	000f883a 	mov	r7,zero
    50e8:	da004015 	stw	r8,256(sp)
    50ec:	da403f15 	stw	r9,252(sp)
    50f0:	da803e15 	stw	r10,248(sp)
    50f4:	00111840 	call	11184 <__eqdf2>
    50f8:	da004017 	ldw	r8,256(sp)
    50fc:	da403f17 	ldw	r9,252(sp)
    5100:	da803e17 	ldw	r10,248(sp)
    5104:	103f2c26 	beq	r2,zero,4db8 <__alt_mem_Flash_flash_data+0xf4004db8>
    5108:	00800044 	movi	r2,1
    510c:	1707c83a 	sub	r3,r2,fp
    5110:	d8c02615 	stw	r3,152(sp)
    5114:	003f2906 	br	4dbc <__alt_mem_Flash_flash_data+0xf4004dbc>
    5118:	db003417 	ldw	r12,208(sp)
    511c:	64800044 	addi	r18,r12,1
    5120:	9005883a 	mov	r2,r18
    5124:	903ec40e 	bge	r18,zero,4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    5128:	003fdd06 	br	50a0 <__alt_mem_Flash_flash_data+0xf40050a0>
    512c:	0005883a 	mov	r2,zero
    5130:	003f5c06 	br	4ea4 <__alt_mem_Flash_flash_data+0xf4004ea4>
    5134:	dac03417 	ldw	r11,208(sp)
    5138:	4a400044 	addi	r9,r9,1
    513c:	5a65883a 	add	r18,r11,r9
    5140:	9005883a 	mov	r2,r18
    5144:	903ebc0e 	bge	r18,zero,4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    5148:	003fd506 	br	50a0 <__alt_mem_Flash_flash_data+0xf40050a0>
    514c:	008000b4 	movhi	r2,2
    5150:	10bf8c84 	addi	r2,r2,-462
    5154:	d8802b15 	stw	r2,172(sp)
    5158:	003d2b06 	br	4608 <__alt_mem_Flash_flash_data+0xf4004608>
    515c:	00800c04 	movi	r2,48
    5160:	e0c00c04 	addi	r3,fp,48
    5164:	d8802345 	stb	r2,141(sp)
    5168:	d8c02385 	stb	r3,142(sp)
    516c:	d88023c4 	addi	r2,sp,143
    5170:	dd4022c4 	addi	r21,sp,139
    5174:	003f9e06 	br	4ff0 <__alt_mem_Flash_flash_data+0xf4004ff0>
    5178:	4800081e 	bne	r9,zero,519c <___svfprintf_internal_r+0x1f18>
    517c:	8c40004c 	andi	r17,r17,1
    5180:	8800061e 	bne	r17,zero,519c <___svfprintf_internal_r+0x1f18>
    5184:	00800044 	movi	r2,1
    5188:	1025883a 	mov	r18,r2
    518c:	003eaa06 	br	4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    5190:	04800084 	movi	r18,2
    5194:	90e5c83a 	sub	r18,r18,r3
    5198:	003fbd06 	br	5090 <__alt_mem_Flash_flash_data+0xf4005090>
    519c:	4c800084 	addi	r18,r9,2
    51a0:	9005883a 	mov	r2,r18
    51a4:	903ea40e 	bge	r18,zero,4c38 <__alt_mem_Flash_flash_data+0xf4004c38>
    51a8:	003fbd06 	br	50a0 <__alt_mem_Flash_flash_data+0xf40050a0>
    51ac:	dac02d17 	ldw	r11,180(sp)
    51b0:	5a400017 	ldw	r9,0(r11)
    51b4:	5ac00104 	addi	r11,r11,4
    51b8:	dac02d15 	stw	r11,180(sp)
    51bc:	483e410e 	bge	r9,zero,4ac4 <__alt_mem_Flash_flash_data+0xf4004ac4>
    51c0:	027fffc4 	movi	r9,-1
    51c4:	1c000047 	ldb	r16,1(r3)
    51c8:	00388406 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    51cc:	00800b44 	movi	r2,45
    51d0:	0739c83a 	sub	fp,zero,fp
    51d4:	d8802305 	stb	r2,140(sp)
    51d8:	003f5e06 	br	4f54 <__alt_mem_Flash_flash_data+0xf4004f54>
    51dc:	0005883a 	mov	r2,zero
    51e0:	003f8c06 	br	5014 <__alt_mem_Flash_flash_data+0xf4005014>
    51e4:	88a2703a 	and	r17,r17,r2
    51e8:	883f8826 	beq	r17,zero,500c <__alt_mem_Flash_flash_data+0xf400500c>
    51ec:	003f8606 	br	5008 <__alt_mem_Flash_flash_data+0xf4005008>
    51f0:	d8802344 	addi	r2,sp,141
    51f4:	003f7e06 	br	4ff0 <__alt_mem_Flash_flash_data+0xf4004ff0>
    51f8:	d8c02617 	ldw	r3,152(sp)
    51fc:	003f4f06 	br	4f3c <__alt_mem_Flash_flash_data+0xf4004f3c>
    5200:	dac02f17 	ldw	r11,188(sp)
    5204:	00800304 	movi	r2,12
    5208:	58800015 	stw	r2,0(r11)
    520c:	00bfffc4 	movi	r2,-1
    5210:	0038e806 	br	35b4 <__alt_mem_Flash_flash_data+0xf40035b4>

00005214 <___vfprintf_internal_r>:
    5214:	deffb604 	addi	sp,sp,-296
    5218:	dfc04915 	stw	ra,292(sp)
    521c:	ddc04715 	stw	r23,284(sp)
    5220:	dd804615 	stw	r22,280(sp)
    5224:	282f883a 	mov	r23,r5
    5228:	202d883a 	mov	r22,r4
    522c:	d9802a15 	stw	r6,168(sp)
    5230:	d9c02d15 	stw	r7,180(sp)
    5234:	df004815 	stw	fp,288(sp)
    5238:	dd404515 	stw	r21,276(sp)
    523c:	dd004415 	stw	r20,272(sp)
    5240:	dcc04315 	stw	r19,268(sp)
    5244:	dc804215 	stw	r18,264(sp)
    5248:	dc404115 	stw	r17,260(sp)
    524c:	dc004015 	stw	r16,256(sp)
    5250:	0009dfc0 	call	9dfc <_localeconv_r>
    5254:	10800017 	ldw	r2,0(r2)
    5258:	1009883a 	mov	r4,r2
    525c:	d8803515 	stw	r2,212(sp)
    5260:	00031ec0 	call	31ec <strlen>
    5264:	d8803815 	stw	r2,224(sp)
    5268:	b0000226 	beq	r22,zero,5274 <___vfprintf_internal_r+0x60>
    526c:	b0800e17 	ldw	r2,56(r22)
    5270:	1000e126 	beq	r2,zero,55f8 <___vfprintf_internal_r+0x3e4>
    5274:	b880030b 	ldhu	r2,12(r23)
    5278:	10c8000c 	andi	r3,r2,8192
    527c:	1800061e 	bne	r3,zero,5298 <___vfprintf_internal_r+0x84>
    5280:	b9001917 	ldw	r4,100(r23)
    5284:	00f7ffc4 	movi	r3,-8193
    5288:	10880014 	ori	r2,r2,8192
    528c:	20c6703a 	and	r3,r4,r3
    5290:	b880030d 	sth	r2,12(r23)
    5294:	b8c01915 	stw	r3,100(r23)
    5298:	10c0020c 	andi	r3,r2,8
    529c:	1800a726 	beq	r3,zero,553c <___vfprintf_internal_r+0x328>
    52a0:	b8c00417 	ldw	r3,16(r23)
    52a4:	1800a526 	beq	r3,zero,553c <___vfprintf_internal_r+0x328>
    52a8:	1080068c 	andi	r2,r2,26
    52ac:	00c00284 	movi	r3,10
    52b0:	10c0aa26 	beq	r2,r3,555c <___vfprintf_internal_r+0x348>
    52b4:	dac01e04 	addi	r11,sp,120
    52b8:	db001dc4 	addi	r12,sp,119
    52bc:	d8800404 	addi	r2,sp,16
    52c0:	050000b4 	movhi	r20,2
    52c4:	dac02815 	stw	r11,160(sp)
    52c8:	5b17c83a 	sub	r11,r11,r12
    52cc:	a53f9484 	addi	r20,r20,-430
    52d0:	db002915 	stw	r12,164(sp)
    52d4:	d8801e15 	stw	r2,120(sp)
    52d8:	d8002015 	stw	zero,128(sp)
    52dc:	d8001f15 	stw	zero,124(sp)
    52e0:	d8003315 	stw	zero,204(sp)
    52e4:	d8003715 	stw	zero,220(sp)
    52e8:	d8003915 	stw	zero,228(sp)
    52ec:	1011883a 	mov	r8,r2
    52f0:	d8003b15 	stw	zero,236(sp)
    52f4:	d8003a15 	stw	zero,232(sp)
    52f8:	d8002f15 	stw	zero,188(sp)
    52fc:	dac03c15 	stw	r11,240(sp)
    5300:	db002a17 	ldw	r12,168(sp)
    5304:	60800007 	ldb	r2,0(r12)
    5308:	1000be26 	beq	r2,zero,5604 <___vfprintf_internal_r+0x3f0>
    530c:	00c00944 	movi	r3,37
    5310:	10c0bc26 	beq	r2,r3,5604 <___vfprintf_internal_r+0x3f0>
    5314:	6021883a 	mov	r16,r12
    5318:	00000106 	br	5320 <___vfprintf_internal_r+0x10c>
    531c:	10c08426 	beq	r2,r3,5530 <___vfprintf_internal_r+0x31c>
    5320:	84000044 	addi	r16,r16,1
    5324:	80800007 	ldb	r2,0(r16)
    5328:	103ffc1e 	bne	r2,zero,531c <__alt_mem_Flash_flash_data+0xf400531c>
    532c:	dac02a17 	ldw	r11,168(sp)
    5330:	82e3c83a 	sub	r17,r16,r11
    5334:	88000f26 	beq	r17,zero,5374 <___vfprintf_internal_r+0x160>
    5338:	d8c02017 	ldw	r3,128(sp)
    533c:	d8801f17 	ldw	r2,124(sp)
    5340:	dac02a17 	ldw	r11,168(sp)
    5344:	1c47883a 	add	r3,r3,r17
    5348:	10800044 	addi	r2,r2,1
    534c:	d8c02015 	stw	r3,128(sp)
    5350:	42c00015 	stw	r11,0(r8)
    5354:	44400115 	stw	r17,4(r8)
    5358:	d8801f15 	stw	r2,124(sp)
    535c:	00c001c4 	movi	r3,7
    5360:	18809316 	blt	r3,r2,55b0 <___vfprintf_internal_r+0x39c>
    5364:	42000204 	addi	r8,r8,8
    5368:	db002f17 	ldw	r12,188(sp)
    536c:	6459883a 	add	r12,r12,r17
    5370:	db002f15 	stw	r12,188(sp)
    5374:	80800007 	ldb	r2,0(r16)
    5378:	10009426 	beq	r2,zero,55cc <___vfprintf_internal_r+0x3b8>
    537c:	80800044 	addi	r2,r16,1
    5380:	84000047 	ldb	r16,1(r16)
    5384:	d8002785 	stb	zero,158(sp)
    5388:	000d883a 	mov	r6,zero
    538c:	027fffc4 	movi	r9,-1
    5390:	d8002e15 	stw	zero,184(sp)
    5394:	0023883a 	mov	r17,zero
    5398:	01001604 	movi	r4,88
    539c:	01400244 	movi	r5,9
    53a0:	02800a84 	movi	r10,42
    53a4:	01c01b04 	movi	r7,108
    53a8:	10c00044 	addi	r3,r2,1
    53ac:	80bff804 	addi	r2,r16,-32
    53b0:	2082cd36 	bltu	r4,r2,5ee8 <___vfprintf_internal_r+0xcd4>
    53b4:	100490ba 	slli	r2,r2,2
    53b8:	02c00034 	movhi	r11,0
    53bc:	5ad4f304 	addi	r11,r11,21452
    53c0:	12c5883a 	add	r2,r2,r11
    53c4:	10800017 	ldw	r2,0(r2)
    53c8:	1000683a 	jmp	r2
    53cc:	00005d00 	call	5d0 <moveUp+0x48>
    53d0:	00005ee8 	cmpgeui	zero,zero,379
    53d4:	00005ee8 	cmpgeui	zero,zero,379
    53d8:	00005e50 	cmplti	zero,zero,377
    53dc:	00005ee8 	cmpgeui	zero,zero,379
    53e0:	00005ee8 	cmpgeui	zero,zero,379
    53e4:	00005ee8 	cmpgeui	zero,zero,379
    53e8:	00005ee8 	cmpgeui	zero,zero,379
    53ec:	00005ee8 	cmpgeui	zero,zero,379
    53f0:	00005ee8 	cmpgeui	zero,zero,379
    53f4:	00005d20 	cmpeqi	zero,zero,372
    53f8:	00005d4c 	andi	zero,zero,373
    53fc:	00005ee8 	cmpgeui	zero,zero,379
    5400:	0000560c 	andi	zero,zero,344
    5404:	0000561c 	xori	zero,zero,344
    5408:	00005ee8 	cmpgeui	zero,zero,379
    540c:	0000565c 	xori	zero,zero,345
    5410:	0000566c 	andhi	zero,zero,345
    5414:	0000566c 	andhi	zero,zero,345
    5418:	0000566c 	andhi	zero,zero,345
    541c:	0000566c 	andhi	zero,zero,345
    5420:	0000566c 	andhi	zero,zero,345
    5424:	0000566c 	andhi	zero,zero,345
    5428:	0000566c 	andhi	zero,zero,345
    542c:	0000566c 	andhi	zero,zero,345
    5430:	0000566c 	andhi	zero,zero,345
    5434:	00005ee8 	cmpgeui	zero,zero,379
    5438:	00005ee8 	cmpgeui	zero,zero,379
    543c:	00005ee8 	cmpgeui	zero,zero,379
    5440:	00005ee8 	cmpgeui	zero,zero,379
    5444:	00005ee8 	cmpgeui	zero,zero,379
    5448:	00005ee8 	cmpgeui	zero,zero,379
    544c:	00005ee8 	cmpgeui	zero,zero,379
    5450:	00005ee8 	cmpgeui	zero,zero,379
    5454:	00005ee8 	cmpgeui	zero,zero,379
    5458:	00005ee8 	cmpgeui	zero,zero,379
    545c:	000056a0 	cmpeqi	zero,zero,346
    5460:	00005b10 	cmplti	zero,zero,364
    5464:	00005ee8 	cmpgeui	zero,zero,379
    5468:	00005b10 	cmplti	zero,zero,364
    546c:	00005ee8 	cmpgeui	zero,zero,379
    5470:	00005ee8 	cmpgeui	zero,zero,379
    5474:	00005ee8 	cmpgeui	zero,zero,379
    5478:	00005ee8 	cmpgeui	zero,zero,379
    547c:	00005bfc 	xorhi	zero,zero,367
    5480:	00005ee8 	cmpgeui	zero,zero,379
    5484:	00005ee8 	cmpgeui	zero,zero,379
    5488:	00005aa4 	muli	zero,zero,362
    548c:	00005ee8 	cmpgeui	zero,zero,379
    5490:	00005ee8 	cmpgeui	zero,zero,379
    5494:	00005ee8 	cmpgeui	zero,zero,379
    5498:	00005ee8 	cmpgeui	zero,zero,379
    549c:	00005ee8 	cmpgeui	zero,zero,379
    54a0:	00005ae0 	cmpeqi	zero,zero,363
    54a4:	00005ee8 	cmpgeui	zero,zero,379
    54a8:	00005ee8 	cmpgeui	zero,zero,379
    54ac:	00005ca4 	muli	zero,zero,370
    54b0:	00005ee8 	cmpgeui	zero,zero,379
    54b4:	00005ee8 	cmpgeui	zero,zero,379
    54b8:	00005ee8 	cmpgeui	zero,zero,379
    54bc:	00005ee8 	cmpgeui	zero,zero,379
    54c0:	00005ee8 	cmpgeui	zero,zero,379
    54c4:	00005ee8 	cmpgeui	zero,zero,379
    54c8:	00005ee8 	cmpgeui	zero,zero,379
    54cc:	00005ee8 	cmpgeui	zero,zero,379
    54d0:	00005ee8 	cmpgeui	zero,zero,379
    54d4:	00005ee8 	cmpgeui	zero,zero,379
    54d8:	00005d5c 	xori	zero,zero,373
    54dc:	00005c0c 	andi	zero,zero,368
    54e0:	00005b10 	cmplti	zero,zero,364
    54e4:	00005b10 	cmplti	zero,zero,364
    54e8:	00005b10 	cmplti	zero,zero,364
    54ec:	00005c4c 	andi	zero,zero,369
    54f0:	00005c0c 	andi	zero,zero,368
    54f4:	00005ee8 	cmpgeui	zero,zero,379
    54f8:	00005ee8 	cmpgeui	zero,zero,379
    54fc:	00005c5c 	xori	zero,zero,369
    5500:	00005ee8 	cmpgeui	zero,zero,379
    5504:	00005c70 	cmpltui	zero,zero,369
    5508:	00005eac 	andhi	zero,zero,378
    550c:	00005bb4 	movhi	zero,366
    5510:	00005e60 	cmpeqi	zero,zero,377
    5514:	00005ee8 	cmpgeui	zero,zero,379
    5518:	00005d9c 	xori	zero,zero,374
    551c:	00005ee8 	cmpgeui	zero,zero,379
    5520:	00005e70 	cmpltui	zero,zero,377
    5524:	00005ee8 	cmpgeui	zero,zero,379
    5528:	00005ee8 	cmpgeui	zero,zero,379
    552c:	00005e10 	cmplti	zero,zero,376
    5530:	db002a17 	ldw	r12,168(sp)
    5534:	8323c83a 	sub	r17,r16,r12
    5538:	003f7e06 	br	5334 <__alt_mem_Flash_flash_data+0xf4005334>
    553c:	b009883a 	mov	r4,r22
    5540:	b80b883a 	mov	r5,r23
    5544:	00072440 	call	7244 <__swsetup_r>
    5548:	10000c1e 	bne	r2,zero,557c <___vfprintf_internal_r+0x368>
    554c:	b880030b 	ldhu	r2,12(r23)
    5550:	00c00284 	movi	r3,10
    5554:	1080068c 	andi	r2,r2,26
    5558:	10ff561e 	bne	r2,r3,52b4 <__alt_mem_Flash_flash_data+0xf40052b4>
    555c:	b880038f 	ldh	r2,14(r23)
    5560:	103f5416 	blt	r2,zero,52b4 <__alt_mem_Flash_flash_data+0xf40052b4>
    5564:	d9802a17 	ldw	r6,168(sp)
    5568:	d9c02d17 	ldw	r7,180(sp)
    556c:	b009883a 	mov	r4,r22
    5570:	b80b883a 	mov	r5,r23
    5574:	00071880 	call	7188 <__sbprintf>
    5578:	00000106 	br	5580 <___vfprintf_internal_r+0x36c>
    557c:	00bfffc4 	movi	r2,-1
    5580:	dfc04917 	ldw	ra,292(sp)
    5584:	df004817 	ldw	fp,288(sp)
    5588:	ddc04717 	ldw	r23,284(sp)
    558c:	dd804617 	ldw	r22,280(sp)
    5590:	dd404517 	ldw	r21,276(sp)
    5594:	dd004417 	ldw	r20,272(sp)
    5598:	dcc04317 	ldw	r19,268(sp)
    559c:	dc804217 	ldw	r18,264(sp)
    55a0:	dc404117 	ldw	r17,260(sp)
    55a4:	dc004017 	ldw	r16,256(sp)
    55a8:	dec04a04 	addi	sp,sp,296
    55ac:	f800283a 	ret
    55b0:	b009883a 	mov	r4,r22
    55b4:	b80b883a 	mov	r5,r23
    55b8:	d9801e04 	addi	r6,sp,120
    55bc:	000d6e00 	call	d6e0 <__sprint_r>
    55c0:	1000081e 	bne	r2,zero,55e4 <___vfprintf_internal_r+0x3d0>
    55c4:	da000404 	addi	r8,sp,16
    55c8:	003f6706 	br	5368 <__alt_mem_Flash_flash_data+0xf4005368>
    55cc:	d8802017 	ldw	r2,128(sp)
    55d0:	10000426 	beq	r2,zero,55e4 <___vfprintf_internal_r+0x3d0>
    55d4:	b009883a 	mov	r4,r22
    55d8:	b80b883a 	mov	r5,r23
    55dc:	d9801e04 	addi	r6,sp,120
    55e0:	000d6e00 	call	d6e0 <__sprint_r>
    55e4:	b880030b 	ldhu	r2,12(r23)
    55e8:	1080100c 	andi	r2,r2,64
    55ec:	103fe31e 	bne	r2,zero,557c <__alt_mem_Flash_flash_data+0xf400557c>
    55f0:	d8802f17 	ldw	r2,188(sp)
    55f4:	003fe206 	br	5580 <__alt_mem_Flash_flash_data+0xf4005580>
    55f8:	b009883a 	mov	r4,r22
    55fc:	00092a40 	call	92a4 <__sinit>
    5600:	003f1c06 	br	5274 <__alt_mem_Flash_flash_data+0xf4005274>
    5604:	dc002a17 	ldw	r16,168(sp)
    5608:	003f5a06 	br	5374 <__alt_mem_Flash_flash_data+0xf4005374>
    560c:	1805883a 	mov	r2,r3
    5610:	8c400114 	ori	r17,r17,4
    5614:	1c000007 	ldb	r16,0(r3)
    5618:	003f6306 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    561c:	1c000007 	ldb	r16,0(r3)
    5620:	18800044 	addi	r2,r3,1
    5624:	8286ad26 	beq	r16,r10,70dc <___vfprintf_internal_r+0x1ec8>
    5628:	82fff404 	addi	r11,r16,-48
    562c:	1007883a 	mov	r3,r2
    5630:	0013883a 	mov	r9,zero
    5634:	2aff5d36 	bltu	r5,r11,53ac <__alt_mem_Flash_flash_data+0xf40053ac>
    5638:	1c000007 	ldb	r16,0(r3)
    563c:	4a4002a4 	muli	r9,r9,10
    5640:	18c00044 	addi	r3,r3,1
    5644:	5a53883a 	add	r9,r11,r9
    5648:	82fff404 	addi	r11,r16,-48
    564c:	2afffa2e 	bgeu	r5,r11,5638 <__alt_mem_Flash_flash_data+0xf4005638>
    5650:	483f560e 	bge	r9,zero,53ac <__alt_mem_Flash_flash_data+0xf40053ac>
    5654:	027fffc4 	movi	r9,-1
    5658:	003f5406 	br	53ac <__alt_mem_Flash_flash_data+0xf40053ac>
    565c:	8c402014 	ori	r17,r17,128
    5660:	1805883a 	mov	r2,r3
    5664:	1c000007 	ldb	r16,0(r3)
    5668:	003f4f06 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    566c:	1805883a 	mov	r2,r3
    5670:	d8002e15 	stw	zero,184(sp)
    5674:	82fff404 	addi	r11,r16,-48
    5678:	0019883a 	mov	r12,zero
    567c:	14000007 	ldb	r16,0(r2)
    5680:	630002a4 	muli	r12,r12,10
    5684:	18c00044 	addi	r3,r3,1
    5688:	1805883a 	mov	r2,r3
    568c:	62d9883a 	add	r12,r12,r11
    5690:	82fff404 	addi	r11,r16,-48
    5694:	2afff92e 	bgeu	r5,r11,567c <__alt_mem_Flash_flash_data+0xf400567c>
    5698:	db002e15 	stw	r12,184(sp)
    569c:	003f4306 	br	53ac <__alt_mem_Flash_flash_data+0xf40053ac>
    56a0:	8c400414 	ori	r17,r17,16
    56a4:	d8c02a15 	stw	r3,168(sp)
    56a8:	d9802785 	stb	r6,158(sp)
    56ac:	8880080c 	andi	r2,r17,32
    56b0:	d8c02d17 	ldw	r3,180(sp)
    56b4:	10015a26 	beq	r2,zero,5c20 <___vfprintf_internal_r+0xa0c>
    56b8:	db002d17 	ldw	r12,180(sp)
    56bc:	18800117 	ldw	r2,4(r3)
    56c0:	1cc00017 	ldw	r19,0(r3)
    56c4:	63000204 	addi	r12,r12,8
    56c8:	db002d15 	stw	r12,180(sp)
    56cc:	1039883a 	mov	fp,r2
    56d0:	10044516 	blt	r2,zero,67e8 <___vfprintf_internal_r+0x15d4>
    56d4:	dd402783 	ldbu	r21,158(sp)
    56d8:	da403215 	stw	r9,200(sp)
    56dc:	00800044 	movi	r2,1
    56e0:	9f06b03a 	or	r3,r19,fp
    56e4:	48000216 	blt	r9,zero,56f0 <___vfprintf_internal_r+0x4dc>
    56e8:	013fdfc4 	movi	r4,-129
    56ec:	8922703a 	and	r17,r17,r4
    56f0:	1802071e 	bne	r3,zero,5f10 <___vfprintf_internal_r+0xcfc>
    56f4:	4802fa26 	beq	r9,zero,62e0 <___vfprintf_internal_r+0x10cc>
    56f8:	10803fcc 	andi	r2,r2,255
    56fc:	00c00044 	movi	r3,1
    5700:	10c22926 	beq	r2,r3,5fa8 <___vfprintf_internal_r+0xd94>
    5704:	00c00084 	movi	r3,2
    5708:	10c31726 	beq	r2,r3,6368 <___vfprintf_internal_r+0x1154>
    570c:	d8c01e04 	addi	r3,sp,120
    5710:	9808d0fa 	srli	r4,r19,3
    5714:	e00a977a 	slli	r5,fp,29
    5718:	e038d0fa 	srli	fp,fp,3
    571c:	9cc001cc 	andi	r19,r19,7
    5720:	98800c04 	addi	r2,r19,48
    5724:	18ffffc4 	addi	r3,r3,-1
    5728:	2926b03a 	or	r19,r5,r4
    572c:	18800005 	stb	r2,0(r3)
    5730:	9f08b03a 	or	r4,r19,fp
    5734:	203ff61e 	bne	r4,zero,5710 <__alt_mem_Flash_flash_data+0xf4005710>
    5738:	8900004c 	andi	r4,r17,1
    573c:	d8c03115 	stw	r3,196(sp)
    5740:	2003931e 	bne	r4,zero,6590 <___vfprintf_internal_r+0x137c>
    5744:	dac02817 	ldw	r11,160(sp)
    5748:	58e5c83a 	sub	r18,r11,r3
    574c:	9005883a 	mov	r2,r18
    5750:	9240010e 	bge	r18,r9,5758 <___vfprintf_internal_r+0x544>
    5754:	4805883a 	mov	r2,r9
    5758:	d8802b15 	stw	r2,172(sp)
    575c:	d8003415 	stw	zero,208(sp)
    5760:	a8803fcc 	andi	r2,r21,255
    5764:	1080201c 	xori	r2,r2,128
    5768:	10bfe004 	addi	r2,r2,-128
    576c:	10000326 	beq	r2,zero,577c <___vfprintf_internal_r+0x568>
    5770:	db002b17 	ldw	r12,172(sp)
    5774:	63000044 	addi	r12,r12,1
    5778:	db002b15 	stw	r12,172(sp)
    577c:	88c0008c 	andi	r3,r17,2
    5780:	d8c02c15 	stw	r3,176(sp)
    5784:	18000326 	beq	r3,zero,5794 <___vfprintf_internal_r+0x580>
    5788:	dac02b17 	ldw	r11,172(sp)
    578c:	5ac00084 	addi	r11,r11,2
    5790:	dac02b15 	stw	r11,172(sp)
    5794:	8b00210c 	andi	r12,r17,132
    5798:	db003015 	stw	r12,192(sp)
    579c:	6001da1e 	bne	r12,zero,5f08 <___vfprintf_internal_r+0xcf4>
    57a0:	dac02e17 	ldw	r11,184(sp)
    57a4:	db002b17 	ldw	r12,172(sp)
    57a8:	5b39c83a 	sub	fp,r11,r12
    57ac:	0701d60e 	bge	zero,fp,5f08 <___vfprintf_internal_r+0xcf4>
    57b0:	02400404 	movi	r9,16
    57b4:	d8c02017 	ldw	r3,128(sp)
    57b8:	d8801f17 	ldw	r2,124(sp)
    57bc:	4f053c0e 	bge	r9,fp,6cb0 <___vfprintf_internal_r+0x1a9c>
    57c0:	014000b4 	movhi	r5,2
    57c4:	297f9884 	addi	r5,r5,-414
    57c8:	d9403615 	stw	r5,216(sp)
    57cc:	482b883a 	mov	r21,r9
    57d0:	04c001c4 	movi	r19,7
    57d4:	00000306 	br	57e4 <___vfprintf_internal_r+0x5d0>
    57d8:	e73ffc04 	addi	fp,fp,-16
    57dc:	42000204 	addi	r8,r8,8
    57e0:	af00130e 	bge	r21,fp,5830 <___vfprintf_internal_r+0x61c>
    57e4:	02c000b4 	movhi	r11,2
    57e8:	18c00404 	addi	r3,r3,16
    57ec:	10800044 	addi	r2,r2,1
    57f0:	5aff9884 	addi	r11,r11,-414
    57f4:	42c00015 	stw	r11,0(r8)
    57f8:	45400115 	stw	r21,4(r8)
    57fc:	d8c02015 	stw	r3,128(sp)
    5800:	d8801f15 	stw	r2,124(sp)
    5804:	98bff40e 	bge	r19,r2,57d8 <__alt_mem_Flash_flash_data+0xf40057d8>
    5808:	b009883a 	mov	r4,r22
    580c:	b80b883a 	mov	r5,r23
    5810:	d9801e04 	addi	r6,sp,120
    5814:	000d6e00 	call	d6e0 <__sprint_r>
    5818:	103f721e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    581c:	e73ffc04 	addi	fp,fp,-16
    5820:	d8c02017 	ldw	r3,128(sp)
    5824:	d8801f17 	ldw	r2,124(sp)
    5828:	da000404 	addi	r8,sp,16
    582c:	af3fed16 	blt	r21,fp,57e4 <__alt_mem_Flash_flash_data+0xf40057e4>
    5830:	db003617 	ldw	r12,216(sp)
    5834:	e0c7883a 	add	r3,fp,r3
    5838:	10800044 	addi	r2,r2,1
    583c:	43000015 	stw	r12,0(r8)
    5840:	47000115 	stw	fp,4(r8)
    5844:	d8c02015 	stw	r3,128(sp)
    5848:	d8801f15 	stw	r2,124(sp)
    584c:	010001c4 	movi	r4,7
    5850:	20830e16 	blt	r4,r2,648c <___vfprintf_internal_r+0x1278>
    5854:	d8802787 	ldb	r2,158(sp)
    5858:	42000204 	addi	r8,r8,8
    585c:	10000c26 	beq	r2,zero,5890 <___vfprintf_internal_r+0x67c>
    5860:	d8801f17 	ldw	r2,124(sp)
    5864:	d9002784 	addi	r4,sp,158
    5868:	18c00044 	addi	r3,r3,1
    586c:	10800044 	addi	r2,r2,1
    5870:	41000015 	stw	r4,0(r8)
    5874:	01000044 	movi	r4,1
    5878:	41000115 	stw	r4,4(r8)
    587c:	d8c02015 	stw	r3,128(sp)
    5880:	d8801f15 	stw	r2,124(sp)
    5884:	010001c4 	movi	r4,7
    5888:	2082a716 	blt	r4,r2,6328 <___vfprintf_internal_r+0x1114>
    588c:	42000204 	addi	r8,r8,8
    5890:	dac02c17 	ldw	r11,176(sp)
    5894:	58000c26 	beq	r11,zero,58c8 <___vfprintf_internal_r+0x6b4>
    5898:	d8801f17 	ldw	r2,124(sp)
    589c:	d9002704 	addi	r4,sp,156
    58a0:	18c00084 	addi	r3,r3,2
    58a4:	10800044 	addi	r2,r2,1
    58a8:	41000015 	stw	r4,0(r8)
    58ac:	01000084 	movi	r4,2
    58b0:	41000115 	stw	r4,4(r8)
    58b4:	d8c02015 	stw	r3,128(sp)
    58b8:	d8801f15 	stw	r2,124(sp)
    58bc:	010001c4 	movi	r4,7
    58c0:	2082a116 	blt	r4,r2,6348 <___vfprintf_internal_r+0x1134>
    58c4:	42000204 	addi	r8,r8,8
    58c8:	db003017 	ldw	r12,192(sp)
    58cc:	00802004 	movi	r2,128
    58d0:	60820326 	beq	r12,r2,60e0 <___vfprintf_internal_r+0xecc>
    58d4:	db003217 	ldw	r12,200(sp)
    58d8:	64abc83a 	sub	r21,r12,r18
    58dc:	0540260e 	bge	zero,r21,5978 <___vfprintf_internal_r+0x764>
    58e0:	07000404 	movi	fp,16
    58e4:	d8801f17 	ldw	r2,124(sp)
    58e8:	e544570e 	bge	fp,r21,6a48 <___vfprintf_internal_r+0x1834>
    58ec:	014000b4 	movhi	r5,2
    58f0:	297f9484 	addi	r5,r5,-430
    58f4:	d9402c15 	stw	r5,176(sp)
    58f8:	04c001c4 	movi	r19,7
    58fc:	00000306 	br	590c <___vfprintf_internal_r+0x6f8>
    5900:	ad7ffc04 	addi	r21,r21,-16
    5904:	42000204 	addi	r8,r8,8
    5908:	e540110e 	bge	fp,r21,5950 <___vfprintf_internal_r+0x73c>
    590c:	18c00404 	addi	r3,r3,16
    5910:	10800044 	addi	r2,r2,1
    5914:	45000015 	stw	r20,0(r8)
    5918:	47000115 	stw	fp,4(r8)
    591c:	d8c02015 	stw	r3,128(sp)
    5920:	d8801f15 	stw	r2,124(sp)
    5924:	98bff60e 	bge	r19,r2,5900 <__alt_mem_Flash_flash_data+0xf4005900>
    5928:	b009883a 	mov	r4,r22
    592c:	b80b883a 	mov	r5,r23
    5930:	d9801e04 	addi	r6,sp,120
    5934:	000d6e00 	call	d6e0 <__sprint_r>
    5938:	103f2a1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    593c:	ad7ffc04 	addi	r21,r21,-16
    5940:	d8c02017 	ldw	r3,128(sp)
    5944:	d8801f17 	ldw	r2,124(sp)
    5948:	da000404 	addi	r8,sp,16
    594c:	e57fef16 	blt	fp,r21,590c <__alt_mem_Flash_flash_data+0xf400590c>
    5950:	dac02c17 	ldw	r11,176(sp)
    5954:	1d47883a 	add	r3,r3,r21
    5958:	10800044 	addi	r2,r2,1
    595c:	42c00015 	stw	r11,0(r8)
    5960:	45400115 	stw	r21,4(r8)
    5964:	d8c02015 	stw	r3,128(sp)
    5968:	d8801f15 	stw	r2,124(sp)
    596c:	010001c4 	movi	r4,7
    5970:	20826516 	blt	r4,r2,6308 <___vfprintf_internal_r+0x10f4>
    5974:	42000204 	addi	r8,r8,8
    5978:	8880400c 	andi	r2,r17,256
    597c:	1001901e 	bne	r2,zero,5fc0 <___vfprintf_internal_r+0xdac>
    5980:	d8801f17 	ldw	r2,124(sp)
    5984:	db003117 	ldw	r12,196(sp)
    5988:	1c87883a 	add	r3,r3,r18
    598c:	10800044 	addi	r2,r2,1
    5990:	43000015 	stw	r12,0(r8)
    5994:	44800115 	stw	r18,4(r8)
    5998:	d8c02015 	stw	r3,128(sp)
    599c:	d8801f15 	stw	r2,124(sp)
    59a0:	010001c4 	movi	r4,7
    59a4:	20824016 	blt	r4,r2,62a8 <___vfprintf_internal_r+0x1094>
    59a8:	42000204 	addi	r8,r8,8
    59ac:	8c40010c 	andi	r17,r17,4
    59b0:	88003126 	beq	r17,zero,5a78 <___vfprintf_internal_r+0x864>
    59b4:	db002e17 	ldw	r12,184(sp)
    59b8:	dac02b17 	ldw	r11,172(sp)
    59bc:	62e1c83a 	sub	r16,r12,r11
    59c0:	04002d0e 	bge	zero,r16,5a78 <___vfprintf_internal_r+0x864>
    59c4:	04400404 	movi	r17,16
    59c8:	d8801f17 	ldw	r2,124(sp)
    59cc:	8c05150e 	bge	r17,r16,6e24 <___vfprintf_internal_r+0x1c10>
    59d0:	010000b4 	movhi	r4,2
    59d4:	213f9884 	addi	r4,r4,-414
    59d8:	d9003615 	stw	r4,216(sp)
    59dc:	048001c4 	movi	r18,7
    59e0:	00000306 	br	59f0 <___vfprintf_internal_r+0x7dc>
    59e4:	843ffc04 	addi	r16,r16,-16
    59e8:	42000204 	addi	r8,r8,8
    59ec:	8c00130e 	bge	r17,r16,5a3c <___vfprintf_internal_r+0x828>
    59f0:	014000b4 	movhi	r5,2
    59f4:	18c00404 	addi	r3,r3,16
    59f8:	10800044 	addi	r2,r2,1
    59fc:	297f9884 	addi	r5,r5,-414
    5a00:	41400015 	stw	r5,0(r8)
    5a04:	44400115 	stw	r17,4(r8)
    5a08:	d8c02015 	stw	r3,128(sp)
    5a0c:	d8801f15 	stw	r2,124(sp)
    5a10:	90bff40e 	bge	r18,r2,59e4 <__alt_mem_Flash_flash_data+0xf40059e4>
    5a14:	b009883a 	mov	r4,r22
    5a18:	b80b883a 	mov	r5,r23
    5a1c:	d9801e04 	addi	r6,sp,120
    5a20:	000d6e00 	call	d6e0 <__sprint_r>
    5a24:	103eef1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    5a28:	843ffc04 	addi	r16,r16,-16
    5a2c:	d8c02017 	ldw	r3,128(sp)
    5a30:	d8801f17 	ldw	r2,124(sp)
    5a34:	da000404 	addi	r8,sp,16
    5a38:	8c3fed16 	blt	r17,r16,59f0 <__alt_mem_Flash_flash_data+0xf40059f0>
    5a3c:	dac03617 	ldw	r11,216(sp)
    5a40:	1c07883a 	add	r3,r3,r16
    5a44:	10800044 	addi	r2,r2,1
    5a48:	42c00015 	stw	r11,0(r8)
    5a4c:	44000115 	stw	r16,4(r8)
    5a50:	d8c02015 	stw	r3,128(sp)
    5a54:	d8801f15 	stw	r2,124(sp)
    5a58:	010001c4 	movi	r4,7
    5a5c:	2080060e 	bge	r4,r2,5a78 <___vfprintf_internal_r+0x864>
    5a60:	b009883a 	mov	r4,r22
    5a64:	b80b883a 	mov	r5,r23
    5a68:	d9801e04 	addi	r6,sp,120
    5a6c:	000d6e00 	call	d6e0 <__sprint_r>
    5a70:	103edc1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    5a74:	d8c02017 	ldw	r3,128(sp)
    5a78:	d8802b17 	ldw	r2,172(sp)
    5a7c:	db002e17 	ldw	r12,184(sp)
    5a80:	1300010e 	bge	r2,r12,5a88 <___vfprintf_internal_r+0x874>
    5a84:	6005883a 	mov	r2,r12
    5a88:	dac02f17 	ldw	r11,188(sp)
    5a8c:	5897883a 	add	r11,r11,r2
    5a90:	dac02f15 	stw	r11,188(sp)
    5a94:	18020c1e 	bne	r3,zero,62c8 <___vfprintf_internal_r+0x10b4>
    5a98:	d8001f15 	stw	zero,124(sp)
    5a9c:	da000404 	addi	r8,sp,16
    5aa0:	003e1706 	br	5300 <__alt_mem_Flash_flash_data+0xf4005300>
    5aa4:	8c400414 	ori	r17,r17,16
    5aa8:	d8c02a15 	stw	r3,168(sp)
    5aac:	8880080c 	andi	r2,r17,32
    5ab0:	10010126 	beq	r2,zero,5eb8 <___vfprintf_internal_r+0xca4>
    5ab4:	db002d17 	ldw	r12,180(sp)
    5ab8:	0005883a 	mov	r2,zero
    5abc:	64c00017 	ldw	r19,0(r12)
    5ac0:	67000117 	ldw	fp,4(r12)
    5ac4:	63000204 	addi	r12,r12,8
    5ac8:	db002d15 	stw	r12,180(sp)
    5acc:	9f06b03a 	or	r3,r19,fp
    5ad0:	d8002785 	stb	zero,158(sp)
    5ad4:	da403215 	stw	r9,200(sp)
    5ad8:	002b883a 	mov	r21,zero
    5adc:	003f0106 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    5ae0:	8c400414 	ori	r17,r17,16
    5ae4:	d8c02a15 	stw	r3,168(sp)
    5ae8:	8880080c 	andi	r2,r17,32
    5aec:	1000e326 	beq	r2,zero,5e7c <___vfprintf_internal_r+0xc68>
    5af0:	dac02d17 	ldw	r11,180(sp)
    5af4:	00800044 	movi	r2,1
    5af8:	5cc00017 	ldw	r19,0(r11)
    5afc:	5f000117 	ldw	fp,4(r11)
    5b00:	5ac00204 	addi	r11,r11,8
    5b04:	dac02d15 	stw	r11,180(sp)
    5b08:	9f06b03a 	or	r3,r19,fp
    5b0c:	003ff006 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    5b10:	db002d17 	ldw	r12,180(sp)
    5b14:	dac02d17 	ldw	r11,180(sp)
    5b18:	d8c02a15 	stw	r3,168(sp)
    5b1c:	63000017 	ldw	r12,0(r12)
    5b20:	5ac00117 	ldw	r11,4(r11)
    5b24:	d9802785 	stb	r6,158(sp)
    5b28:	6009883a 	mov	r4,r12
    5b2c:	580b883a 	mov	r5,r11
    5b30:	db003715 	stw	r12,220(sp)
    5b34:	da003f15 	stw	r8,252(sp)
    5b38:	da403e15 	stw	r9,248(sp)
    5b3c:	dac03915 	stw	r11,228(sp)
    5b40:	000c1380 	call	c138 <__fpclassifyd>
    5b44:	db002d17 	ldw	r12,180(sp)
    5b48:	04800044 	movi	r18,1
    5b4c:	da003f17 	ldw	r8,252(sp)
    5b50:	64c00204 	addi	r19,r12,8
    5b54:	da403e17 	ldw	r9,248(sp)
    5b58:	d9003717 	ldw	r4,220(sp)
    5b5c:	d9403917 	ldw	r5,228(sp)
    5b60:	14832b1e 	bne	r2,r18,6810 <___vfprintf_internal_r+0x15fc>
    5b64:	000d883a 	mov	r6,zero
    5b68:	000f883a 	mov	r7,zero
    5b6c:	00112e80 	call	112e8 <__ledf2>
    5b70:	da003f17 	ldw	r8,252(sp)
    5b74:	1004b716 	blt	r2,zero,6e54 <___vfprintf_internal_r+0x1c40>
    5b78:	dd402783 	ldbu	r21,158(sp)
    5b7c:	008011c4 	movi	r2,71
    5b80:	14040e0e 	bge	r2,r16,6bbc <___vfprintf_internal_r+0x19a8>
    5b84:	00c000b4 	movhi	r3,2
    5b88:	18ff7d04 	addi	r3,r3,-524
    5b8c:	d8c03115 	stw	r3,196(sp)
    5b90:	02c000c4 	movi	r11,3
    5b94:	00bfdfc4 	movi	r2,-129
    5b98:	dac02b15 	stw	r11,172(sp)
    5b9c:	88a2703a 	and	r17,r17,r2
    5ba0:	dcc02d15 	stw	r19,180(sp)
    5ba4:	5825883a 	mov	r18,r11
    5ba8:	d8003215 	stw	zero,200(sp)
    5bac:	d8003415 	stw	zero,208(sp)
    5bb0:	003eeb06 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    5bb4:	db002d17 	ldw	r12,180(sp)
    5bb8:	00800c04 	movi	r2,48
    5bbc:	d8802705 	stb	r2,156(sp)
    5bc0:	64c00017 	ldw	r19,0(r12)
    5bc4:	00801e04 	movi	r2,120
    5bc8:	d8802745 	stb	r2,157(sp)
    5bcc:	008000b4 	movhi	r2,2
    5bd0:	10bf8504 	addi	r2,r2,-492
    5bd4:	63000104 	addi	r12,r12,4
    5bd8:	d8c02a15 	stw	r3,168(sp)
    5bdc:	d8803b15 	stw	r2,236(sp)
    5be0:	0039883a 	mov	fp,zero
    5be4:	8c400094 	ori	r17,r17,2
    5be8:	db002d15 	stw	r12,180(sp)
    5bec:	00800084 	movi	r2,2
    5bf0:	04001e04 	movi	r16,120
    5bf4:	9807883a 	mov	r3,r19
    5bf8:	003fb506 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    5bfc:	8c400214 	ori	r17,r17,8
    5c00:	1805883a 	mov	r2,r3
    5c04:	1c000007 	ldb	r16,0(r3)
    5c08:	003de706 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5c0c:	d8c02a15 	stw	r3,168(sp)
    5c10:	d9802785 	stb	r6,158(sp)
    5c14:	8880080c 	andi	r2,r17,32
    5c18:	d8c02d17 	ldw	r3,180(sp)
    5c1c:	103ea61e 	bne	r2,zero,56b8 <__alt_mem_Flash_flash_data+0xf40056b8>
    5c20:	8880040c 	andi	r2,r17,16
    5c24:	1002221e 	bne	r2,zero,64b0 <___vfprintf_internal_r+0x129c>
    5c28:	8880100c 	andi	r2,r17,64
    5c2c:	10022026 	beq	r2,zero,64b0 <___vfprintf_internal_r+0x129c>
    5c30:	1cc0000f 	ldh	r19,0(r3)
    5c34:	db002d17 	ldw	r12,180(sp)
    5c38:	9839d7fa 	srai	fp,r19,31
    5c3c:	63000104 	addi	r12,r12,4
    5c40:	db002d15 	stw	r12,180(sp)
    5c44:	e005883a 	mov	r2,fp
    5c48:	003ea106 	br	56d0 <__alt_mem_Flash_flash_data+0xf40056d0>
    5c4c:	8c401014 	ori	r17,r17,64
    5c50:	1805883a 	mov	r2,r3
    5c54:	1c000007 	ldb	r16,0(r3)
    5c58:	003dd306 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5c5c:	1c000007 	ldb	r16,0(r3)
    5c60:	81c3e926 	beq	r16,r7,6c08 <___vfprintf_internal_r+0x19f4>
    5c64:	8c400414 	ori	r17,r17,16
    5c68:	1805883a 	mov	r2,r3
    5c6c:	003dce06 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5c70:	d8c02a15 	stw	r3,168(sp)
    5c74:	d9802785 	stb	r6,158(sp)
    5c78:	8880080c 	andi	r2,r17,32
    5c7c:	10034726 	beq	r2,zero,699c <___vfprintf_internal_r+0x1788>
    5c80:	db002d17 	ldw	r12,180(sp)
    5c84:	dac02f17 	ldw	r11,188(sp)
    5c88:	60800017 	ldw	r2,0(r12)
    5c8c:	5807d7fa 	srai	r3,r11,31
    5c90:	63000104 	addi	r12,r12,4
    5c94:	db002d15 	stw	r12,180(sp)
    5c98:	12c00015 	stw	r11,0(r2)
    5c9c:	10c00115 	stw	r3,4(r2)
    5ca0:	003d9706 	br	5300 <__alt_mem_Flash_flash_data+0xf4005300>
    5ca4:	030000b4 	movhi	r12,2
    5ca8:	633f8004 	addi	r12,r12,-512
    5cac:	d8c02a15 	stw	r3,168(sp)
    5cb0:	d9802785 	stb	r6,158(sp)
    5cb4:	db003b15 	stw	r12,236(sp)
    5cb8:	88c0080c 	andi	r3,r17,32
    5cbc:	d8802d17 	ldw	r2,180(sp)
    5cc0:	18005b26 	beq	r3,zero,5e30 <___vfprintf_internal_r+0xc1c>
    5cc4:	dac02d17 	ldw	r11,180(sp)
    5cc8:	14c00017 	ldw	r19,0(r2)
    5ccc:	17000117 	ldw	fp,4(r2)
    5cd0:	5ac00204 	addi	r11,r11,8
    5cd4:	dac02d15 	stw	r11,180(sp)
    5cd8:	8880004c 	andi	r2,r17,1
    5cdc:	10022926 	beq	r2,zero,6584 <___vfprintf_internal_r+0x1370>
    5ce0:	9f06b03a 	or	r3,r19,fp
    5ce4:	18032b26 	beq	r3,zero,6994 <___vfprintf_internal_r+0x1780>
    5ce8:	00800c04 	movi	r2,48
    5cec:	d8802705 	stb	r2,156(sp)
    5cf0:	dc002745 	stb	r16,157(sp)
    5cf4:	8c400094 	ori	r17,r17,2
    5cf8:	00800084 	movi	r2,2
    5cfc:	003f7406 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    5d00:	30803fcc 	andi	r2,r6,255
    5d04:	1080201c 	xori	r2,r2,128
    5d08:	10bfe004 	addi	r2,r2,-128
    5d0c:	1003351e 	bne	r2,zero,69e4 <___vfprintf_internal_r+0x17d0>
    5d10:	1805883a 	mov	r2,r3
    5d14:	01800804 	movi	r6,32
    5d18:	1c000007 	ldb	r16,0(r3)
    5d1c:	003da206 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5d20:	dac02d17 	ldw	r11,180(sp)
    5d24:	db002d17 	ldw	r12,180(sp)
    5d28:	5ac00017 	ldw	r11,0(r11)
    5d2c:	dac02e15 	stw	r11,184(sp)
    5d30:	62c00104 	addi	r11,r12,4
    5d34:	db002e17 	ldw	r12,184(sp)
    5d38:	6003ad16 	blt	r12,zero,6bf0 <___vfprintf_internal_r+0x19dc>
    5d3c:	dac02d15 	stw	r11,180(sp)
    5d40:	1805883a 	mov	r2,r3
    5d44:	1c000007 	ldb	r16,0(r3)
    5d48:	003d9706 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5d4c:	1805883a 	mov	r2,r3
    5d50:	01800ac4 	movi	r6,43
    5d54:	1c000007 	ldb	r16,0(r3)
    5d58:	003d9306 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5d5c:	db002d17 	ldw	r12,180(sp)
    5d60:	d8c02a15 	stw	r3,168(sp)
    5d64:	00c00044 	movi	r3,1
    5d68:	60800017 	ldw	r2,0(r12)
    5d6c:	63000104 	addi	r12,r12,4
    5d70:	d8c02b15 	stw	r3,172(sp)
    5d74:	d8002785 	stb	zero,158(sp)
    5d78:	d8801405 	stb	r2,80(sp)
    5d7c:	db002d15 	stw	r12,180(sp)
    5d80:	dac01404 	addi	r11,sp,80
    5d84:	1825883a 	mov	r18,r3
    5d88:	d8003215 	stw	zero,200(sp)
    5d8c:	d8003415 	stw	zero,208(sp)
    5d90:	dac03115 	stw	r11,196(sp)
    5d94:	0005883a 	mov	r2,zero
    5d98:	003e7806 	br	577c <__alt_mem_Flash_flash_data+0xf400577c>
    5d9c:	dac02d17 	ldw	r11,180(sp)
    5da0:	db002d17 	ldw	r12,180(sp)
    5da4:	d8c02a15 	stw	r3,168(sp)
    5da8:	5ac00017 	ldw	r11,0(r11)
    5dac:	d8002785 	stb	zero,158(sp)
    5db0:	64c00104 	addi	r19,r12,4
    5db4:	dac03115 	stw	r11,196(sp)
    5db8:	5803fe26 	beq	r11,zero,6db4 <___vfprintf_internal_r+0x1ba0>
    5dbc:	d9003117 	ldw	r4,196(sp)
    5dc0:	4803b416 	blt	r9,zero,6c94 <___vfprintf_internal_r+0x1a80>
    5dc4:	480d883a 	mov	r6,r9
    5dc8:	000b883a 	mov	r5,zero
    5dcc:	da003f15 	stw	r8,252(sp)
    5dd0:	da403e15 	stw	r9,248(sp)
    5dd4:	000a7900 	call	a790 <memchr>
    5dd8:	da003f17 	ldw	r8,252(sp)
    5ddc:	da403e17 	ldw	r9,248(sp)
    5de0:	10043026 	beq	r2,zero,6ea4 <___vfprintf_internal_r+0x1c90>
    5de4:	d8c03117 	ldw	r3,196(sp)
    5de8:	10e5c83a 	sub	r18,r2,r3
    5dec:	4c836b16 	blt	r9,r18,6b9c <___vfprintf_internal_r+0x1988>
    5df0:	9005883a 	mov	r2,r18
    5df4:	9003ac16 	blt	r18,zero,6ca8 <___vfprintf_internal_r+0x1a94>
    5df8:	dd402783 	ldbu	r21,158(sp)
    5dfc:	d8802b15 	stw	r2,172(sp)
    5e00:	dcc02d15 	stw	r19,180(sp)
    5e04:	d8003215 	stw	zero,200(sp)
    5e08:	d8003415 	stw	zero,208(sp)
    5e0c:	003e5406 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    5e10:	008000b4 	movhi	r2,2
    5e14:	10bf8504 	addi	r2,r2,-492
    5e18:	d8c02a15 	stw	r3,168(sp)
    5e1c:	d8803b15 	stw	r2,236(sp)
    5e20:	d9802785 	stb	r6,158(sp)
    5e24:	88c0080c 	andi	r3,r17,32
    5e28:	d8802d17 	ldw	r2,180(sp)
    5e2c:	183fa51e 	bne	r3,zero,5cc4 <__alt_mem_Flash_flash_data+0xf4005cc4>
    5e30:	88c0040c 	andi	r3,r17,16
    5e34:	1802ee26 	beq	r3,zero,69f0 <___vfprintf_internal_r+0x17dc>
    5e38:	db002d17 	ldw	r12,180(sp)
    5e3c:	14c00017 	ldw	r19,0(r2)
    5e40:	0039883a 	mov	fp,zero
    5e44:	63000104 	addi	r12,r12,4
    5e48:	db002d15 	stw	r12,180(sp)
    5e4c:	003fa206 	br	5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    5e50:	8c400054 	ori	r17,r17,1
    5e54:	1805883a 	mov	r2,r3
    5e58:	1c000007 	ldb	r16,0(r3)
    5e5c:	003d5206 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5e60:	8c400814 	ori	r17,r17,32
    5e64:	1805883a 	mov	r2,r3
    5e68:	1c000007 	ldb	r16,0(r3)
    5e6c:	003d4e06 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    5e70:	d8c02a15 	stw	r3,168(sp)
    5e74:	8880080c 	andi	r2,r17,32
    5e78:	103f1d1e 	bne	r2,zero,5af0 <__alt_mem_Flash_flash_data+0xf4005af0>
    5e7c:	8880040c 	andi	r2,r17,16
    5e80:	1001b81e 	bne	r2,zero,6564 <___vfprintf_internal_r+0x1350>
    5e84:	8880100c 	andi	r2,r17,64
    5e88:	1001b626 	beq	r2,zero,6564 <___vfprintf_internal_r+0x1350>
    5e8c:	dac02d17 	ldw	r11,180(sp)
    5e90:	0039883a 	mov	fp,zero
    5e94:	00800044 	movi	r2,1
    5e98:	5cc0000b 	ldhu	r19,0(r11)
    5e9c:	5ac00104 	addi	r11,r11,4
    5ea0:	dac02d15 	stw	r11,180(sp)
    5ea4:	9807883a 	mov	r3,r19
    5ea8:	003f0906 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    5eac:	d8c02a15 	stw	r3,168(sp)
    5eb0:	8880080c 	andi	r2,r17,32
    5eb4:	103eff1e 	bne	r2,zero,5ab4 <__alt_mem_Flash_flash_data+0xf4005ab4>
    5eb8:	8880040c 	andi	r2,r17,16
    5ebc:	1001a11e 	bne	r2,zero,6544 <___vfprintf_internal_r+0x1330>
    5ec0:	8880100c 	andi	r2,r17,64
    5ec4:	10019f26 	beq	r2,zero,6544 <___vfprintf_internal_r+0x1330>
    5ec8:	db002d17 	ldw	r12,180(sp)
    5ecc:	0039883a 	mov	fp,zero
    5ed0:	0005883a 	mov	r2,zero
    5ed4:	64c0000b 	ldhu	r19,0(r12)
    5ed8:	63000104 	addi	r12,r12,4
    5edc:	db002d15 	stw	r12,180(sp)
    5ee0:	9807883a 	mov	r3,r19
    5ee4:	003efa06 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    5ee8:	d8c02a15 	stw	r3,168(sp)
    5eec:	d9802785 	stb	r6,158(sp)
    5ef0:	803db626 	beq	r16,zero,55cc <__alt_mem_Flash_flash_data+0xf40055cc>
    5ef4:	00c00044 	movi	r3,1
    5ef8:	d8c02b15 	stw	r3,172(sp)
    5efc:	dc001405 	stb	r16,80(sp)
    5f00:	d8002785 	stb	zero,158(sp)
    5f04:	003f9e06 	br	5d80 <__alt_mem_Flash_flash_data+0xf4005d80>
    5f08:	d8c02017 	ldw	r3,128(sp)
    5f0c:	003e5306 	br	585c <__alt_mem_Flash_flash_data+0xf400585c>
    5f10:	10803fcc 	andi	r2,r2,255
    5f14:	00c00044 	movi	r3,1
    5f18:	10fdfa1e 	bne	r2,r3,5704 <__alt_mem_Flash_flash_data+0xf4005704>
    5f1c:	e000021e 	bne	fp,zero,5f28 <___vfprintf_internal_r+0xd14>
    5f20:	00800244 	movi	r2,9
    5f24:	14c0202e 	bgeu	r2,r19,5fa8 <___vfprintf_internal_r+0xd94>
    5f28:	dc002b15 	stw	r16,172(sp)
    5f2c:	dc402c15 	stw	r17,176(sp)
    5f30:	9821883a 	mov	r16,r19
    5f34:	e023883a 	mov	r17,fp
    5f38:	dc801e04 	addi	r18,sp,120
    5f3c:	4827883a 	mov	r19,r9
    5f40:	4039883a 	mov	fp,r8
    5f44:	8009883a 	mov	r4,r16
    5f48:	880b883a 	mov	r5,r17
    5f4c:	01800284 	movi	r6,10
    5f50:	000f883a 	mov	r7,zero
    5f54:	000f9600 	call	f960 <__umoddi3>
    5f58:	10800c04 	addi	r2,r2,48
    5f5c:	94bfffc4 	addi	r18,r18,-1
    5f60:	8009883a 	mov	r4,r16
    5f64:	880b883a 	mov	r5,r17
    5f68:	01800284 	movi	r6,10
    5f6c:	000f883a 	mov	r7,zero
    5f70:	90800005 	stb	r2,0(r18)
    5f74:	000f3a00 	call	f3a0 <__udivdi3>
    5f78:	1021883a 	mov	r16,r2
    5f7c:	10c4b03a 	or	r2,r2,r3
    5f80:	1823883a 	mov	r17,r3
    5f84:	103fef1e 	bne	r2,zero,5f44 <__alt_mem_Flash_flash_data+0xf4005f44>
    5f88:	dac02817 	ldw	r11,160(sp)
    5f8c:	dc803115 	stw	r18,196(sp)
    5f90:	dc002b17 	ldw	r16,172(sp)
    5f94:	dc402c17 	ldw	r17,176(sp)
    5f98:	9813883a 	mov	r9,r19
    5f9c:	e011883a 	mov	r8,fp
    5fa0:	5ca5c83a 	sub	r18,r11,r18
    5fa4:	003de906 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    5fa8:	9cc00c04 	addi	r19,r19,48
    5fac:	d8c01dc4 	addi	r3,sp,119
    5fb0:	dcc01dc5 	stb	r19,119(sp)
    5fb4:	dc803c17 	ldw	r18,240(sp)
    5fb8:	d8c03115 	stw	r3,196(sp)
    5fbc:	003de306 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    5fc0:	00801944 	movi	r2,101
    5fc4:	1400710e 	bge	r2,r16,618c <___vfprintf_internal_r+0xf78>
    5fc8:	d9003717 	ldw	r4,220(sp)
    5fcc:	d9403917 	ldw	r5,228(sp)
    5fd0:	000d883a 	mov	r6,zero
    5fd4:	000f883a 	mov	r7,zero
    5fd8:	d8c03d15 	stw	r3,244(sp)
    5fdc:	da003f15 	stw	r8,252(sp)
    5fe0:	00111840 	call	11184 <__eqdf2>
    5fe4:	d8c03d17 	ldw	r3,244(sp)
    5fe8:	da003f17 	ldw	r8,252(sp)
    5fec:	1000ef1e 	bne	r2,zero,63ac <___vfprintf_internal_r+0x1198>
    5ff0:	d8801f17 	ldw	r2,124(sp)
    5ff4:	010000b4 	movhi	r4,2
    5ff8:	213f8c04 	addi	r4,r4,-464
    5ffc:	18c00044 	addi	r3,r3,1
    6000:	10800044 	addi	r2,r2,1
    6004:	41000015 	stw	r4,0(r8)
    6008:	01000044 	movi	r4,1
    600c:	41000115 	stw	r4,4(r8)
    6010:	d8c02015 	stw	r3,128(sp)
    6014:	d8801f15 	stw	r2,124(sp)
    6018:	010001c4 	movi	r4,7
    601c:	20828e16 	blt	r4,r2,6a58 <___vfprintf_internal_r+0x1844>
    6020:	42000204 	addi	r8,r8,8
    6024:	d8802617 	ldw	r2,152(sp)
    6028:	dac03317 	ldw	r11,204(sp)
    602c:	12c00216 	blt	r2,r11,6038 <___vfprintf_internal_r+0xe24>
    6030:	8880004c 	andi	r2,r17,1
    6034:	103e5d26 	beq	r2,zero,59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    6038:	db003817 	ldw	r12,224(sp)
    603c:	d8801f17 	ldw	r2,124(sp)
    6040:	dac03517 	ldw	r11,212(sp)
    6044:	1b07883a 	add	r3,r3,r12
    6048:	10800044 	addi	r2,r2,1
    604c:	42c00015 	stw	r11,0(r8)
    6050:	43000115 	stw	r12,4(r8)
    6054:	d8c02015 	stw	r3,128(sp)
    6058:	d8801f15 	stw	r2,124(sp)
    605c:	010001c4 	movi	r4,7
    6060:	2082ed16 	blt	r4,r2,6c18 <___vfprintf_internal_r+0x1a04>
    6064:	42000204 	addi	r8,r8,8
    6068:	db003317 	ldw	r12,204(sp)
    606c:	643fffc4 	addi	r16,r12,-1
    6070:	043e4e0e 	bge	zero,r16,59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    6074:	04800404 	movi	r18,16
    6078:	d8801f17 	ldw	r2,124(sp)
    607c:	94007e0e 	bge	r18,r16,6278 <___vfprintf_internal_r+0x1064>
    6080:	014000b4 	movhi	r5,2
    6084:	297f9484 	addi	r5,r5,-430
    6088:	d9402c15 	stw	r5,176(sp)
    608c:	054001c4 	movi	r21,7
    6090:	00000306 	br	60a0 <___vfprintf_internal_r+0xe8c>
    6094:	42000204 	addi	r8,r8,8
    6098:	843ffc04 	addi	r16,r16,-16
    609c:	9400790e 	bge	r18,r16,6284 <___vfprintf_internal_r+0x1070>
    60a0:	18c00404 	addi	r3,r3,16
    60a4:	10800044 	addi	r2,r2,1
    60a8:	45000015 	stw	r20,0(r8)
    60ac:	44800115 	stw	r18,4(r8)
    60b0:	d8c02015 	stw	r3,128(sp)
    60b4:	d8801f15 	stw	r2,124(sp)
    60b8:	a8bff60e 	bge	r21,r2,6094 <__alt_mem_Flash_flash_data+0xf4006094>
    60bc:	b009883a 	mov	r4,r22
    60c0:	b80b883a 	mov	r5,r23
    60c4:	d9801e04 	addi	r6,sp,120
    60c8:	000d6e00 	call	d6e0 <__sprint_r>
    60cc:	103d451e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    60d0:	d8c02017 	ldw	r3,128(sp)
    60d4:	d8801f17 	ldw	r2,124(sp)
    60d8:	da000404 	addi	r8,sp,16
    60dc:	003fee06 	br	6098 <__alt_mem_Flash_flash_data+0xf4006098>
    60e0:	dac02e17 	ldw	r11,184(sp)
    60e4:	db002b17 	ldw	r12,172(sp)
    60e8:	5b2bc83a 	sub	r21,r11,r12
    60ec:	057df90e 	bge	zero,r21,58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    60f0:	07000404 	movi	fp,16
    60f4:	d8801f17 	ldw	r2,124(sp)
    60f8:	e543640e 	bge	fp,r21,6e8c <___vfprintf_internal_r+0x1c78>
    60fc:	014000b4 	movhi	r5,2
    6100:	297f9484 	addi	r5,r5,-430
    6104:	d9402c15 	stw	r5,176(sp)
    6108:	04c001c4 	movi	r19,7
    610c:	00000306 	br	611c <___vfprintf_internal_r+0xf08>
    6110:	ad7ffc04 	addi	r21,r21,-16
    6114:	42000204 	addi	r8,r8,8
    6118:	e540110e 	bge	fp,r21,6160 <___vfprintf_internal_r+0xf4c>
    611c:	18c00404 	addi	r3,r3,16
    6120:	10800044 	addi	r2,r2,1
    6124:	45000015 	stw	r20,0(r8)
    6128:	47000115 	stw	fp,4(r8)
    612c:	d8c02015 	stw	r3,128(sp)
    6130:	d8801f15 	stw	r2,124(sp)
    6134:	98bff60e 	bge	r19,r2,6110 <__alt_mem_Flash_flash_data+0xf4006110>
    6138:	b009883a 	mov	r4,r22
    613c:	b80b883a 	mov	r5,r23
    6140:	d9801e04 	addi	r6,sp,120
    6144:	000d6e00 	call	d6e0 <__sprint_r>
    6148:	103d261e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    614c:	ad7ffc04 	addi	r21,r21,-16
    6150:	d8c02017 	ldw	r3,128(sp)
    6154:	d8801f17 	ldw	r2,124(sp)
    6158:	da000404 	addi	r8,sp,16
    615c:	e57fef16 	blt	fp,r21,611c <__alt_mem_Flash_flash_data+0xf400611c>
    6160:	dac02c17 	ldw	r11,176(sp)
    6164:	1d47883a 	add	r3,r3,r21
    6168:	10800044 	addi	r2,r2,1
    616c:	42c00015 	stw	r11,0(r8)
    6170:	45400115 	stw	r21,4(r8)
    6174:	d8c02015 	stw	r3,128(sp)
    6178:	d8801f15 	stw	r2,124(sp)
    617c:	010001c4 	movi	r4,7
    6180:	20819116 	blt	r4,r2,67c8 <___vfprintf_internal_r+0x15b4>
    6184:	42000204 	addi	r8,r8,8
    6188:	003dd206 	br	58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    618c:	db003317 	ldw	r12,204(sp)
    6190:	00800044 	movi	r2,1
    6194:	18c00044 	addi	r3,r3,1
    6198:	1301530e 	bge	r2,r12,66e8 <___vfprintf_internal_r+0x14d4>
    619c:	dc001f17 	ldw	r16,124(sp)
    61a0:	dac03117 	ldw	r11,196(sp)
    61a4:	00800044 	movi	r2,1
    61a8:	84000044 	addi	r16,r16,1
    61ac:	40800115 	stw	r2,4(r8)
    61b0:	42c00015 	stw	r11,0(r8)
    61b4:	d8c02015 	stw	r3,128(sp)
    61b8:	dc001f15 	stw	r16,124(sp)
    61bc:	008001c4 	movi	r2,7
    61c0:	14016b16 	blt	r2,r16,6770 <___vfprintf_internal_r+0x155c>
    61c4:	42000204 	addi	r8,r8,8
    61c8:	db003817 	ldw	r12,224(sp)
    61cc:	dac03517 	ldw	r11,212(sp)
    61d0:	84000044 	addi	r16,r16,1
    61d4:	1b07883a 	add	r3,r3,r12
    61d8:	42c00015 	stw	r11,0(r8)
    61dc:	43000115 	stw	r12,4(r8)
    61e0:	d8c02015 	stw	r3,128(sp)
    61e4:	dc001f15 	stw	r16,124(sp)
    61e8:	008001c4 	movi	r2,7
    61ec:	14016916 	blt	r2,r16,6794 <___vfprintf_internal_r+0x1580>
    61f0:	44800204 	addi	r18,r8,8
    61f4:	d9003717 	ldw	r4,220(sp)
    61f8:	d9403917 	ldw	r5,228(sp)
    61fc:	000d883a 	mov	r6,zero
    6200:	000f883a 	mov	r7,zero
    6204:	d8c03d15 	stw	r3,244(sp)
    6208:	00111840 	call	11184 <__eqdf2>
    620c:	d8c03d17 	ldw	r3,244(sp)
    6210:	db003317 	ldw	r12,204(sp)
    6214:	1000ad26 	beq	r2,zero,64cc <___vfprintf_internal_r+0x12b8>
    6218:	dac03117 	ldw	r11,196(sp)
    621c:	60bfffc4 	addi	r2,r12,-1
    6220:	1887883a 	add	r3,r3,r2
    6224:	59000044 	addi	r4,r11,1
    6228:	84000044 	addi	r16,r16,1
    622c:	90800115 	stw	r2,4(r18)
    6230:	91000015 	stw	r4,0(r18)
    6234:	d8c02015 	stw	r3,128(sp)
    6238:	dc001f15 	stw	r16,124(sp)
    623c:	008001c4 	movi	r2,7
    6240:	14014216 	blt	r2,r16,674c <___vfprintf_internal_r+0x1538>
    6244:	94800204 	addi	r18,r18,8
    6248:	dac03a17 	ldw	r11,232(sp)
    624c:	dd4022c4 	addi	r21,sp,139
    6250:	84000044 	addi	r16,r16,1
    6254:	1ac7883a 	add	r3,r3,r11
    6258:	95400015 	stw	r21,0(r18)
    625c:	92c00115 	stw	r11,4(r18)
    6260:	d8c02015 	stw	r3,128(sp)
    6264:	dc001f15 	stw	r16,124(sp)
    6268:	008001c4 	movi	r2,7
    626c:	14000e16 	blt	r2,r16,62a8 <___vfprintf_internal_r+0x1094>
    6270:	92000204 	addi	r8,r18,8
    6274:	003dcd06 	br	59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    6278:	010000b4 	movhi	r4,2
    627c:	213f9484 	addi	r4,r4,-430
    6280:	d9002c15 	stw	r4,176(sp)
    6284:	dac02c17 	ldw	r11,176(sp)
    6288:	1c07883a 	add	r3,r3,r16
    628c:	44000115 	stw	r16,4(r8)
    6290:	42c00015 	stw	r11,0(r8)
    6294:	10800044 	addi	r2,r2,1
    6298:	d8c02015 	stw	r3,128(sp)
    629c:	d8801f15 	stw	r2,124(sp)
    62a0:	010001c4 	movi	r4,7
    62a4:	20bdc00e 	bge	r4,r2,59a8 <__alt_mem_Flash_flash_data+0xf40059a8>
    62a8:	b009883a 	mov	r4,r22
    62ac:	b80b883a 	mov	r5,r23
    62b0:	d9801e04 	addi	r6,sp,120
    62b4:	000d6e00 	call	d6e0 <__sprint_r>
    62b8:	103cca1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    62bc:	d8c02017 	ldw	r3,128(sp)
    62c0:	da000404 	addi	r8,sp,16
    62c4:	003db906 	br	59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    62c8:	b009883a 	mov	r4,r22
    62cc:	b80b883a 	mov	r5,r23
    62d0:	d9801e04 	addi	r6,sp,120
    62d4:	000d6e00 	call	d6e0 <__sprint_r>
    62d8:	103def26 	beq	r2,zero,5a98 <__alt_mem_Flash_flash_data+0xf4005a98>
    62dc:	003cc106 	br	55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    62e0:	10803fcc 	andi	r2,r2,255
    62e4:	1000651e 	bne	r2,zero,647c <___vfprintf_internal_r+0x1268>
    62e8:	8880004c 	andi	r2,r17,1
    62ec:	10013226 	beq	r2,zero,67b8 <___vfprintf_internal_r+0x15a4>
    62f0:	00800c04 	movi	r2,48
    62f4:	d8c01dc4 	addi	r3,sp,119
    62f8:	d8801dc5 	stb	r2,119(sp)
    62fc:	dc803c17 	ldw	r18,240(sp)
    6300:	d8c03115 	stw	r3,196(sp)
    6304:	003d1106 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    6308:	b009883a 	mov	r4,r22
    630c:	b80b883a 	mov	r5,r23
    6310:	d9801e04 	addi	r6,sp,120
    6314:	000d6e00 	call	d6e0 <__sprint_r>
    6318:	103cb21e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    631c:	d8c02017 	ldw	r3,128(sp)
    6320:	da000404 	addi	r8,sp,16
    6324:	003d9406 	br	5978 <__alt_mem_Flash_flash_data+0xf4005978>
    6328:	b009883a 	mov	r4,r22
    632c:	b80b883a 	mov	r5,r23
    6330:	d9801e04 	addi	r6,sp,120
    6334:	000d6e00 	call	d6e0 <__sprint_r>
    6338:	103caa1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    633c:	d8c02017 	ldw	r3,128(sp)
    6340:	da000404 	addi	r8,sp,16
    6344:	003d5206 	br	5890 <__alt_mem_Flash_flash_data+0xf4005890>
    6348:	b009883a 	mov	r4,r22
    634c:	b80b883a 	mov	r5,r23
    6350:	d9801e04 	addi	r6,sp,120
    6354:	000d6e00 	call	d6e0 <__sprint_r>
    6358:	103ca21e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    635c:	d8c02017 	ldw	r3,128(sp)
    6360:	da000404 	addi	r8,sp,16
    6364:	003d5806 	br	58c8 <__alt_mem_Flash_flash_data+0xf40058c8>
    6368:	d9403b17 	ldw	r5,236(sp)
    636c:	d8c01e04 	addi	r3,sp,120
    6370:	988003cc 	andi	r2,r19,15
    6374:	e008973a 	slli	r4,fp,28
    6378:	2885883a 	add	r2,r5,r2
    637c:	9826d13a 	srli	r19,r19,4
    6380:	10800003 	ldbu	r2,0(r2)
    6384:	e038d13a 	srli	fp,fp,4
    6388:	18ffffc4 	addi	r3,r3,-1
    638c:	24e6b03a 	or	r19,r4,r19
    6390:	18800005 	stb	r2,0(r3)
    6394:	9f04b03a 	or	r2,r19,fp
    6398:	103ff51e 	bne	r2,zero,6370 <__alt_mem_Flash_flash_data+0xf4006370>
    639c:	db002817 	ldw	r12,160(sp)
    63a0:	d8c03115 	stw	r3,196(sp)
    63a4:	60e5c83a 	sub	r18,r12,r3
    63a8:	003ce806 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    63ac:	dc002617 	ldw	r16,152(sp)
    63b0:	0401b10e 	bge	zero,r16,6a78 <___vfprintf_internal_r+0x1864>
    63b4:	db003117 	ldw	r12,196(sp)
    63b8:	dac03317 	ldw	r11,204(sp)
    63bc:	62e1883a 	add	r16,r12,r11
    63c0:	db003417 	ldw	r12,208(sp)
    63c4:	5825883a 	mov	r18,r11
    63c8:	62c0010e 	bge	r12,r11,63d0 <___vfprintf_internal_r+0x11bc>
    63cc:	6025883a 	mov	r18,r12
    63d0:	04800b0e 	bge	zero,r18,6400 <___vfprintf_internal_r+0x11ec>
    63d4:	d8801f17 	ldw	r2,124(sp)
    63d8:	dac03117 	ldw	r11,196(sp)
    63dc:	1c87883a 	add	r3,r3,r18
    63e0:	10800044 	addi	r2,r2,1
    63e4:	42c00015 	stw	r11,0(r8)
    63e8:	44800115 	stw	r18,4(r8)
    63ec:	d8c02015 	stw	r3,128(sp)
    63f0:	d8801f15 	stw	r2,124(sp)
    63f4:	010001c4 	movi	r4,7
    63f8:	20824f16 	blt	r4,r2,6d38 <___vfprintf_internal_r+0x1b24>
    63fc:	42000204 	addi	r8,r8,8
    6400:	90024b16 	blt	r18,zero,6d30 <___vfprintf_internal_r+0x1b1c>
    6404:	db003417 	ldw	r12,208(sp)
    6408:	64a5c83a 	sub	r18,r12,r18
    640c:	0480730e 	bge	zero,r18,65dc <___vfprintf_internal_r+0x13c8>
    6410:	05400404 	movi	r21,16
    6414:	d8801f17 	ldw	r2,124(sp)
    6418:	ac817d0e 	bge	r21,r18,6a10 <___vfprintf_internal_r+0x17fc>
    641c:	014000b4 	movhi	r5,2
    6420:	297f9484 	addi	r5,r5,-430
    6424:	d9402c15 	stw	r5,176(sp)
    6428:	070001c4 	movi	fp,7
    642c:	00000306 	br	643c <___vfprintf_internal_r+0x1228>
    6430:	42000204 	addi	r8,r8,8
    6434:	94bffc04 	addi	r18,r18,-16
    6438:	ac81780e 	bge	r21,r18,6a1c <___vfprintf_internal_r+0x1808>
    643c:	18c00404 	addi	r3,r3,16
    6440:	10800044 	addi	r2,r2,1
    6444:	45000015 	stw	r20,0(r8)
    6448:	45400115 	stw	r21,4(r8)
    644c:	d8c02015 	stw	r3,128(sp)
    6450:	d8801f15 	stw	r2,124(sp)
    6454:	e0bff60e 	bge	fp,r2,6430 <__alt_mem_Flash_flash_data+0xf4006430>
    6458:	b009883a 	mov	r4,r22
    645c:	b80b883a 	mov	r5,r23
    6460:	d9801e04 	addi	r6,sp,120
    6464:	000d6e00 	call	d6e0 <__sprint_r>
    6468:	103c5e1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    646c:	d8c02017 	ldw	r3,128(sp)
    6470:	d8801f17 	ldw	r2,124(sp)
    6474:	da000404 	addi	r8,sp,16
    6478:	003fee06 	br	6434 <__alt_mem_Flash_flash_data+0xf4006434>
    647c:	dac01e04 	addi	r11,sp,120
    6480:	0025883a 	mov	r18,zero
    6484:	dac03115 	stw	r11,196(sp)
    6488:	003cb006 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    648c:	b009883a 	mov	r4,r22
    6490:	b80b883a 	mov	r5,r23
    6494:	d9801e04 	addi	r6,sp,120
    6498:	000d6e00 	call	d6e0 <__sprint_r>
    649c:	103c511e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    64a0:	d8c02017 	ldw	r3,128(sp)
    64a4:	d8802787 	ldb	r2,158(sp)
    64a8:	da000404 	addi	r8,sp,16
    64ac:	003ceb06 	br	585c <__alt_mem_Flash_flash_data+0xf400585c>
    64b0:	1cc00017 	ldw	r19,0(r3)
    64b4:	dac02d17 	ldw	r11,180(sp)
    64b8:	9839d7fa 	srai	fp,r19,31
    64bc:	5ac00104 	addi	r11,r11,4
    64c0:	dac02d15 	stw	r11,180(sp)
    64c4:	e005883a 	mov	r2,fp
    64c8:	003c8106 	br	56d0 <__alt_mem_Flash_flash_data+0xf40056d0>
    64cc:	657fffc4 	addi	r21,r12,-1
    64d0:	057f5d0e 	bge	zero,r21,6248 <__alt_mem_Flash_flash_data+0xf4006248>
    64d4:	07000404 	movi	fp,16
    64d8:	e540900e 	bge	fp,r21,671c <___vfprintf_internal_r+0x1508>
    64dc:	010000b4 	movhi	r4,2
    64e0:	213f9484 	addi	r4,r4,-430
    64e4:	d9002c15 	stw	r4,176(sp)
    64e8:	01c001c4 	movi	r7,7
    64ec:	00000306 	br	64fc <___vfprintf_internal_r+0x12e8>
    64f0:	94800204 	addi	r18,r18,8
    64f4:	ad7ffc04 	addi	r21,r21,-16
    64f8:	e5408b0e 	bge	fp,r21,6728 <___vfprintf_internal_r+0x1514>
    64fc:	18c00404 	addi	r3,r3,16
    6500:	84000044 	addi	r16,r16,1
    6504:	95000015 	stw	r20,0(r18)
    6508:	97000115 	stw	fp,4(r18)
    650c:	d8c02015 	stw	r3,128(sp)
    6510:	dc001f15 	stw	r16,124(sp)
    6514:	3c3ff60e 	bge	r7,r16,64f0 <__alt_mem_Flash_flash_data+0xf40064f0>
    6518:	b009883a 	mov	r4,r22
    651c:	b80b883a 	mov	r5,r23
    6520:	d9801e04 	addi	r6,sp,120
    6524:	d9c03d15 	stw	r7,244(sp)
    6528:	000d6e00 	call	d6e0 <__sprint_r>
    652c:	d9c03d17 	ldw	r7,244(sp)
    6530:	103c2c1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6534:	d8c02017 	ldw	r3,128(sp)
    6538:	dc001f17 	ldw	r16,124(sp)
    653c:	dc800404 	addi	r18,sp,16
    6540:	003fec06 	br	64f4 <__alt_mem_Flash_flash_data+0xf40064f4>
    6544:	dac02d17 	ldw	r11,180(sp)
    6548:	0039883a 	mov	fp,zero
    654c:	0005883a 	mov	r2,zero
    6550:	5cc00017 	ldw	r19,0(r11)
    6554:	5ac00104 	addi	r11,r11,4
    6558:	dac02d15 	stw	r11,180(sp)
    655c:	9807883a 	mov	r3,r19
    6560:	003d5b06 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    6564:	db002d17 	ldw	r12,180(sp)
    6568:	0039883a 	mov	fp,zero
    656c:	00800044 	movi	r2,1
    6570:	64c00017 	ldw	r19,0(r12)
    6574:	63000104 	addi	r12,r12,4
    6578:	db002d15 	stw	r12,180(sp)
    657c:	9807883a 	mov	r3,r19
    6580:	003d5306 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    6584:	00800084 	movi	r2,2
    6588:	9f06b03a 	or	r3,r19,fp
    658c:	003d5006 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    6590:	10803fcc 	andi	r2,r2,255
    6594:	1080201c 	xori	r2,r2,128
    6598:	10bfe004 	addi	r2,r2,-128
    659c:	01000c04 	movi	r4,48
    65a0:	1101a526 	beq	r2,r4,6c38 <___vfprintf_internal_r+0x1a24>
    65a4:	dac03117 	ldw	r11,196(sp)
    65a8:	db002817 	ldw	r12,160(sp)
    65ac:	193fffc5 	stb	r4,-1(r3)
    65b0:	5affffc4 	addi	r11,r11,-1
    65b4:	dac03115 	stw	r11,196(sp)
    65b8:	62e5c83a 	sub	r18,r12,r11
    65bc:	003c6306 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    65c0:	b009883a 	mov	r4,r22
    65c4:	b80b883a 	mov	r5,r23
    65c8:	d9801e04 	addi	r6,sp,120
    65cc:	000d6e00 	call	d6e0 <__sprint_r>
    65d0:	103c041e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    65d4:	d8c02017 	ldw	r3,128(sp)
    65d8:	da000404 	addi	r8,sp,16
    65dc:	db003117 	ldw	r12,196(sp)
    65e0:	dac03417 	ldw	r11,208(sp)
    65e4:	d8802617 	ldw	r2,152(sp)
    65e8:	62e5883a 	add	r18,r12,r11
    65ec:	db003317 	ldw	r12,204(sp)
    65f0:	13000216 	blt	r2,r12,65fc <___vfprintf_internal_r+0x13e8>
    65f4:	8900004c 	andi	r4,r17,1
    65f8:	20000c26 	beq	r4,zero,662c <___vfprintf_internal_r+0x1418>
    65fc:	dac03817 	ldw	r11,224(sp)
    6600:	d9001f17 	ldw	r4,124(sp)
    6604:	db003517 	ldw	r12,212(sp)
    6608:	1ac7883a 	add	r3,r3,r11
    660c:	21000044 	addi	r4,r4,1
    6610:	43000015 	stw	r12,0(r8)
    6614:	42c00115 	stw	r11,4(r8)
    6618:	d8c02015 	stw	r3,128(sp)
    661c:	d9001f15 	stw	r4,124(sp)
    6620:	014001c4 	movi	r5,7
    6624:	2901cc16 	blt	r5,r4,6d58 <___vfprintf_internal_r+0x1b44>
    6628:	42000204 	addi	r8,r8,8
    662c:	dac03317 	ldw	r11,204(sp)
    6630:	8489c83a 	sub	r4,r16,r18
    6634:	5885c83a 	sub	r2,r11,r2
    6638:	1021883a 	mov	r16,r2
    663c:	2080010e 	bge	r4,r2,6644 <___vfprintf_internal_r+0x1430>
    6640:	2021883a 	mov	r16,r4
    6644:	04000a0e 	bge	zero,r16,6670 <___vfprintf_internal_r+0x145c>
    6648:	d9001f17 	ldw	r4,124(sp)
    664c:	1c07883a 	add	r3,r3,r16
    6650:	44800015 	stw	r18,0(r8)
    6654:	21000044 	addi	r4,r4,1
    6658:	44000115 	stw	r16,4(r8)
    665c:	d8c02015 	stw	r3,128(sp)
    6660:	d9001f15 	stw	r4,124(sp)
    6664:	014001c4 	movi	r5,7
    6668:	2901e316 	blt	r5,r4,6df8 <___vfprintf_internal_r+0x1be4>
    666c:	42000204 	addi	r8,r8,8
    6670:	8001df16 	blt	r16,zero,6df0 <___vfprintf_internal_r+0x1bdc>
    6674:	1421c83a 	sub	r16,r2,r16
    6678:	043ccc0e 	bge	zero,r16,59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    667c:	04800404 	movi	r18,16
    6680:	d8801f17 	ldw	r2,124(sp)
    6684:	943efc0e 	bge	r18,r16,6278 <__alt_mem_Flash_flash_data+0xf4006278>
    6688:	014000b4 	movhi	r5,2
    668c:	297f9484 	addi	r5,r5,-430
    6690:	d9402c15 	stw	r5,176(sp)
    6694:	054001c4 	movi	r21,7
    6698:	00000306 	br	66a8 <___vfprintf_internal_r+0x1494>
    669c:	42000204 	addi	r8,r8,8
    66a0:	843ffc04 	addi	r16,r16,-16
    66a4:	943ef70e 	bge	r18,r16,6284 <__alt_mem_Flash_flash_data+0xf4006284>
    66a8:	18c00404 	addi	r3,r3,16
    66ac:	10800044 	addi	r2,r2,1
    66b0:	45000015 	stw	r20,0(r8)
    66b4:	44800115 	stw	r18,4(r8)
    66b8:	d8c02015 	stw	r3,128(sp)
    66bc:	d8801f15 	stw	r2,124(sp)
    66c0:	a8bff60e 	bge	r21,r2,669c <__alt_mem_Flash_flash_data+0xf400669c>
    66c4:	b009883a 	mov	r4,r22
    66c8:	b80b883a 	mov	r5,r23
    66cc:	d9801e04 	addi	r6,sp,120
    66d0:	000d6e00 	call	d6e0 <__sprint_r>
    66d4:	103bc31e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    66d8:	d8c02017 	ldw	r3,128(sp)
    66dc:	d8801f17 	ldw	r2,124(sp)
    66e0:	da000404 	addi	r8,sp,16
    66e4:	003fee06 	br	66a0 <__alt_mem_Flash_flash_data+0xf40066a0>
    66e8:	8888703a 	and	r4,r17,r2
    66ec:	203eab1e 	bne	r4,zero,619c <__alt_mem_Flash_flash_data+0xf400619c>
    66f0:	dc001f17 	ldw	r16,124(sp)
    66f4:	db003117 	ldw	r12,196(sp)
    66f8:	40800115 	stw	r2,4(r8)
    66fc:	84000044 	addi	r16,r16,1
    6700:	43000015 	stw	r12,0(r8)
    6704:	d8c02015 	stw	r3,128(sp)
    6708:	dc001f15 	stw	r16,124(sp)
    670c:	008001c4 	movi	r2,7
    6710:	14000e16 	blt	r2,r16,674c <___vfprintf_internal_r+0x1538>
    6714:	44800204 	addi	r18,r8,8
    6718:	003ecb06 	br	6248 <__alt_mem_Flash_flash_data+0xf4006248>
    671c:	008000b4 	movhi	r2,2
    6720:	10bf9484 	addi	r2,r2,-430
    6724:	d8802c15 	stw	r2,176(sp)
    6728:	dac02c17 	ldw	r11,176(sp)
    672c:	1d47883a 	add	r3,r3,r21
    6730:	84000044 	addi	r16,r16,1
    6734:	92c00015 	stw	r11,0(r18)
    6738:	95400115 	stw	r21,4(r18)
    673c:	d8c02015 	stw	r3,128(sp)
    6740:	dc001f15 	stw	r16,124(sp)
    6744:	008001c4 	movi	r2,7
    6748:	143ebe0e 	bge	r2,r16,6244 <__alt_mem_Flash_flash_data+0xf4006244>
    674c:	b009883a 	mov	r4,r22
    6750:	b80b883a 	mov	r5,r23
    6754:	d9801e04 	addi	r6,sp,120
    6758:	000d6e00 	call	d6e0 <__sprint_r>
    675c:	103ba11e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6760:	d8c02017 	ldw	r3,128(sp)
    6764:	dc001f17 	ldw	r16,124(sp)
    6768:	dc800404 	addi	r18,sp,16
    676c:	003eb606 	br	6248 <__alt_mem_Flash_flash_data+0xf4006248>
    6770:	b009883a 	mov	r4,r22
    6774:	b80b883a 	mov	r5,r23
    6778:	d9801e04 	addi	r6,sp,120
    677c:	000d6e00 	call	d6e0 <__sprint_r>
    6780:	103b981e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6784:	d8c02017 	ldw	r3,128(sp)
    6788:	dc001f17 	ldw	r16,124(sp)
    678c:	da000404 	addi	r8,sp,16
    6790:	003e8d06 	br	61c8 <__alt_mem_Flash_flash_data+0xf40061c8>
    6794:	b009883a 	mov	r4,r22
    6798:	b80b883a 	mov	r5,r23
    679c:	d9801e04 	addi	r6,sp,120
    67a0:	000d6e00 	call	d6e0 <__sprint_r>
    67a4:	103b8f1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    67a8:	d8c02017 	ldw	r3,128(sp)
    67ac:	dc001f17 	ldw	r16,124(sp)
    67b0:	dc800404 	addi	r18,sp,16
    67b4:	003e8f06 	br	61f4 <__alt_mem_Flash_flash_data+0xf40061f4>
    67b8:	db001e04 	addi	r12,sp,120
    67bc:	0025883a 	mov	r18,zero
    67c0:	db003115 	stw	r12,196(sp)
    67c4:	003be106 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    67c8:	b009883a 	mov	r4,r22
    67cc:	b80b883a 	mov	r5,r23
    67d0:	d9801e04 	addi	r6,sp,120
    67d4:	000d6e00 	call	d6e0 <__sprint_r>
    67d8:	103b821e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    67dc:	d8c02017 	ldw	r3,128(sp)
    67e0:	da000404 	addi	r8,sp,16
    67e4:	003c3b06 	br	58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    67e8:	04e7c83a 	sub	r19,zero,r19
    67ec:	9804c03a 	cmpne	r2,r19,zero
    67f0:	0739c83a 	sub	fp,zero,fp
    67f4:	e0b9c83a 	sub	fp,fp,r2
    67f8:	05400b44 	movi	r21,45
    67fc:	dd402785 	stb	r21,158(sp)
    6800:	da403215 	stw	r9,200(sp)
    6804:	00800044 	movi	r2,1
    6808:	9f06b03a 	or	r3,r19,fp
    680c:	003bb506 	br	56e4 <__alt_mem_Flash_flash_data+0xf40056e4>
    6810:	da003f15 	stw	r8,252(sp)
    6814:	da403e15 	stw	r9,248(sp)
    6818:	000c1380 	call	c138 <__fpclassifyd>
    681c:	da003f17 	ldw	r8,252(sp)
    6820:	da403e17 	ldw	r9,248(sp)
    6824:	1000ce26 	beq	r2,zero,6b60 <___vfprintf_internal_r+0x194c>
    6828:	057ff7c4 	movi	r21,-33
    682c:	00bfffc4 	movi	r2,-1
    6830:	856a703a 	and	r21,r16,r21
    6834:	4881e826 	beq	r9,r2,6fd8 <___vfprintf_internal_r+0x1dc4>
    6838:	008011c4 	movi	r2,71
    683c:	a881e326 	beq	r21,r2,6fcc <___vfprintf_internal_r+0x1db8>
    6840:	db003917 	ldw	r12,228(sp)
    6844:	8ac04014 	ori	r11,r17,256
    6848:	dac02d15 	stw	r11,180(sp)
    684c:	6001ed16 	blt	r12,zero,7004 <___vfprintf_internal_r+0x1df0>
    6850:	dc803917 	ldw	r18,228(sp)
    6854:	d8002b05 	stb	zero,172(sp)
    6858:	00801984 	movi	r2,102
    685c:	80811826 	beq	r16,r2,6cc0 <___vfprintf_internal_r+0x1aac>
    6860:	00801184 	movi	r2,70
    6864:	80811626 	beq	r16,r2,6cc0 <___vfprintf_internal_r+0x1aac>
    6868:	00801144 	movi	r2,69
    686c:	a881e926 	beq	r21,r2,7014 <___vfprintf_internal_r+0x1e00>
    6870:	4839883a 	mov	fp,r9
    6874:	d8802604 	addi	r2,sp,152
    6878:	d8800115 	stw	r2,4(sp)
    687c:	d9403717 	ldw	r5,220(sp)
    6880:	d8802504 	addi	r2,sp,148
    6884:	d8800215 	stw	r2,8(sp)
    6888:	d8802104 	addi	r2,sp,132
    688c:	df000015 	stw	fp,0(sp)
    6890:	d8800315 	stw	r2,12(sp)
    6894:	b009883a 	mov	r4,r22
    6898:	900d883a 	mov	r6,r18
    689c:	01c00084 	movi	r7,2
    68a0:	da003f15 	stw	r8,252(sp)
    68a4:	da403e15 	stw	r9,248(sp)
    68a8:	00075980 	call	7598 <_dtoa_r>
    68ac:	d8803115 	stw	r2,196(sp)
    68b0:	008019c4 	movi	r2,103
    68b4:	da003f17 	ldw	r8,252(sp)
    68b8:	da403e17 	ldw	r9,248(sp)
    68bc:	80800226 	beq	r16,r2,68c8 <___vfprintf_internal_r+0x16b4>
    68c0:	008011c4 	movi	r2,71
    68c4:	8081101e 	bne	r16,r2,6d08 <___vfprintf_internal_r+0x1af4>
    68c8:	8880004c 	andi	r2,r17,1
    68cc:	1001dd26 	beq	r2,zero,7044 <___vfprintf_internal_r+0x1e30>
    68d0:	db003117 	ldw	r12,196(sp)
    68d4:	6715883a 	add	r10,r12,fp
    68d8:	d9003717 	ldw	r4,220(sp)
    68dc:	900b883a 	mov	r5,r18
    68e0:	000d883a 	mov	r6,zero
    68e4:	000f883a 	mov	r7,zero
    68e8:	da003f15 	stw	r8,252(sp)
    68ec:	da403e15 	stw	r9,248(sp)
    68f0:	da803d15 	stw	r10,244(sp)
    68f4:	00111840 	call	11184 <__eqdf2>
    68f8:	da003f17 	ldw	r8,252(sp)
    68fc:	da403e17 	ldw	r9,248(sp)
    6900:	da803d17 	ldw	r10,244(sp)
    6904:	10016526 	beq	r2,zero,6e9c <___vfprintf_internal_r+0x1c88>
    6908:	d8802117 	ldw	r2,132(sp)
    690c:	1280062e 	bgeu	r2,r10,6928 <___vfprintf_internal_r+0x1714>
    6910:	01000c04 	movi	r4,48
    6914:	10c00044 	addi	r3,r2,1
    6918:	d8c02115 	stw	r3,132(sp)
    691c:	11000005 	stb	r4,0(r2)
    6920:	d8802117 	ldw	r2,132(sp)
    6924:	12bffb36 	bltu	r2,r10,6914 <__alt_mem_Flash_flash_data+0xf4006914>
    6928:	db003117 	ldw	r12,196(sp)
    692c:	1305c83a 	sub	r2,r2,r12
    6930:	d8803315 	stw	r2,204(sp)
    6934:	008011c4 	movi	r2,71
    6938:	a8814d26 	beq	r21,r2,6e70 <___vfprintf_internal_r+0x1c5c>
    693c:	00801944 	movi	r2,101
    6940:	1402060e 	bge	r2,r16,715c <___vfprintf_internal_r+0x1f48>
    6944:	00801984 	movi	r2,102
    6948:	8081b426 	beq	r16,r2,701c <___vfprintf_internal_r+0x1e08>
    694c:	db002617 	ldw	r12,152(sp)
    6950:	db003415 	stw	r12,208(sp)
    6954:	db003417 	ldw	r12,208(sp)
    6958:	dac03317 	ldw	r11,204(sp)
    695c:	62c1a016 	blt	r12,r11,6fe0 <___vfprintf_internal_r+0x1dcc>
    6960:	8c40004c 	andi	r17,r17,1
    6964:	8801bf1e 	bne	r17,zero,7064 <___vfprintf_internal_r+0x1e50>
    6968:	6005883a 	mov	r2,r12
    696c:	6001b316 	blt	r12,zero,703c <___vfprintf_internal_r+0x1e28>
    6970:	dc803417 	ldw	r18,208(sp)
    6974:	df002b07 	ldb	fp,172(sp)
    6978:	e0012e1e 	bne	fp,zero,6e34 <___vfprintf_internal_r+0x1c20>
    697c:	dc402d17 	ldw	r17,180(sp)
    6980:	dd402783 	ldbu	r21,158(sp)
    6984:	d8802b15 	stw	r2,172(sp)
    6988:	dcc02d15 	stw	r19,180(sp)
    698c:	d8003215 	stw	zero,200(sp)
    6990:	003b7306 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    6994:	00800084 	movi	r2,2
    6998:	003c4d06 	br	5ad0 <__alt_mem_Flash_flash_data+0xf4005ad0>
    699c:	8880040c 	andi	r2,r17,16
    69a0:	1000091e 	bne	r2,zero,69c8 <___vfprintf_internal_r+0x17b4>
    69a4:	8c40100c 	andi	r17,r17,64
    69a8:	88000726 	beq	r17,zero,69c8 <___vfprintf_internal_r+0x17b4>
    69ac:	db002d17 	ldw	r12,180(sp)
    69b0:	dac02f17 	ldw	r11,188(sp)
    69b4:	60800017 	ldw	r2,0(r12)
    69b8:	63000104 	addi	r12,r12,4
    69bc:	db002d15 	stw	r12,180(sp)
    69c0:	12c0000d 	sth	r11,0(r2)
    69c4:	003a4e06 	br	5300 <__alt_mem_Flash_flash_data+0xf4005300>
    69c8:	db002d17 	ldw	r12,180(sp)
    69cc:	dac02f17 	ldw	r11,188(sp)
    69d0:	60800017 	ldw	r2,0(r12)
    69d4:	63000104 	addi	r12,r12,4
    69d8:	db002d15 	stw	r12,180(sp)
    69dc:	12c00015 	stw	r11,0(r2)
    69e0:	003a4706 	br	5300 <__alt_mem_Flash_flash_data+0xf4005300>
    69e4:	1c000007 	ldb	r16,0(r3)
    69e8:	1805883a 	mov	r2,r3
    69ec:	003a6e06 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    69f0:	88c0100c 	andi	r3,r17,64
    69f4:	18006b26 	beq	r3,zero,6ba4 <___vfprintf_internal_r+0x1990>
    69f8:	dac02d17 	ldw	r11,180(sp)
    69fc:	14c0000b 	ldhu	r19,0(r2)
    6a00:	0039883a 	mov	fp,zero
    6a04:	5ac00104 	addi	r11,r11,4
    6a08:	dac02d15 	stw	r11,180(sp)
    6a0c:	003cb206 	br	5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    6a10:	010000b4 	movhi	r4,2
    6a14:	213f9484 	addi	r4,r4,-430
    6a18:	d9002c15 	stw	r4,176(sp)
    6a1c:	dac02c17 	ldw	r11,176(sp)
    6a20:	1c87883a 	add	r3,r3,r18
    6a24:	10800044 	addi	r2,r2,1
    6a28:	42c00015 	stw	r11,0(r8)
    6a2c:	44800115 	stw	r18,4(r8)
    6a30:	d8c02015 	stw	r3,128(sp)
    6a34:	d8801f15 	stw	r2,124(sp)
    6a38:	010001c4 	movi	r4,7
    6a3c:	20bee016 	blt	r4,r2,65c0 <__alt_mem_Flash_flash_data+0xf40065c0>
    6a40:	42000204 	addi	r8,r8,8
    6a44:	003ee506 	br	65dc <__alt_mem_Flash_flash_data+0xf40065dc>
    6a48:	010000b4 	movhi	r4,2
    6a4c:	213f9484 	addi	r4,r4,-430
    6a50:	d9002c15 	stw	r4,176(sp)
    6a54:	003bbe06 	br	5950 <__alt_mem_Flash_flash_data+0xf4005950>
    6a58:	b009883a 	mov	r4,r22
    6a5c:	b80b883a 	mov	r5,r23
    6a60:	d9801e04 	addi	r6,sp,120
    6a64:	000d6e00 	call	d6e0 <__sprint_r>
    6a68:	103ade1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6a6c:	d8c02017 	ldw	r3,128(sp)
    6a70:	da000404 	addi	r8,sp,16
    6a74:	003d6b06 	br	6024 <__alt_mem_Flash_flash_data+0xf4006024>
    6a78:	d8801f17 	ldw	r2,124(sp)
    6a7c:	030000b4 	movhi	r12,2
    6a80:	01000044 	movi	r4,1
    6a84:	18c00044 	addi	r3,r3,1
    6a88:	10800044 	addi	r2,r2,1
    6a8c:	633f8c04 	addi	r12,r12,-464
    6a90:	41000115 	stw	r4,4(r8)
    6a94:	43000015 	stw	r12,0(r8)
    6a98:	d8c02015 	stw	r3,128(sp)
    6a9c:	d8801f15 	stw	r2,124(sp)
    6aa0:	010001c4 	movi	r4,7
    6aa4:	20804916 	blt	r4,r2,6bcc <___vfprintf_internal_r+0x19b8>
    6aa8:	42000204 	addi	r8,r8,8
    6aac:	8000041e 	bne	r16,zero,6ac0 <___vfprintf_internal_r+0x18ac>
    6ab0:	dac03317 	ldw	r11,204(sp)
    6ab4:	5800021e 	bne	r11,zero,6ac0 <___vfprintf_internal_r+0x18ac>
    6ab8:	8880004c 	andi	r2,r17,1
    6abc:	103bbb26 	beq	r2,zero,59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    6ac0:	db003817 	ldw	r12,224(sp)
    6ac4:	d8801f17 	ldw	r2,124(sp)
    6ac8:	dac03517 	ldw	r11,212(sp)
    6acc:	1b07883a 	add	r3,r3,r12
    6ad0:	10800044 	addi	r2,r2,1
    6ad4:	42c00015 	stw	r11,0(r8)
    6ad8:	43000115 	stw	r12,4(r8)
    6adc:	d8c02015 	stw	r3,128(sp)
    6ae0:	d8801f15 	stw	r2,124(sp)
    6ae4:	010001c4 	movi	r4,7
    6ae8:	20812e16 	blt	r4,r2,6fa4 <___vfprintf_internal_r+0x1d90>
    6aec:	42000204 	addi	r8,r8,8
    6af0:	0421c83a 	sub	r16,zero,r16
    6af4:	04005c0e 	bge	zero,r16,6c68 <___vfprintf_internal_r+0x1a54>
    6af8:	04800404 	movi	r18,16
    6afc:	94009f0e 	bge	r18,r16,6d7c <___vfprintf_internal_r+0x1b68>
    6b00:	010000b4 	movhi	r4,2
    6b04:	213f9484 	addi	r4,r4,-430
    6b08:	d9002c15 	stw	r4,176(sp)
    6b0c:	054001c4 	movi	r21,7
    6b10:	00000306 	br	6b20 <___vfprintf_internal_r+0x190c>
    6b14:	42000204 	addi	r8,r8,8
    6b18:	843ffc04 	addi	r16,r16,-16
    6b1c:	94009a0e 	bge	r18,r16,6d88 <___vfprintf_internal_r+0x1b74>
    6b20:	18c00404 	addi	r3,r3,16
    6b24:	10800044 	addi	r2,r2,1
    6b28:	45000015 	stw	r20,0(r8)
    6b2c:	44800115 	stw	r18,4(r8)
    6b30:	d8c02015 	stw	r3,128(sp)
    6b34:	d8801f15 	stw	r2,124(sp)
    6b38:	a8bff60e 	bge	r21,r2,6b14 <__alt_mem_Flash_flash_data+0xf4006b14>
    6b3c:	b009883a 	mov	r4,r22
    6b40:	b80b883a 	mov	r5,r23
    6b44:	d9801e04 	addi	r6,sp,120
    6b48:	000d6e00 	call	d6e0 <__sprint_r>
    6b4c:	103aa51e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6b50:	d8c02017 	ldw	r3,128(sp)
    6b54:	d8801f17 	ldw	r2,124(sp)
    6b58:	da000404 	addi	r8,sp,16
    6b5c:	003fee06 	br	6b18 <__alt_mem_Flash_flash_data+0xf4006b18>
    6b60:	008011c4 	movi	r2,71
    6b64:	1400be16 	blt	r2,r16,6e60 <___vfprintf_internal_r+0x1c4c>
    6b68:	030000b4 	movhi	r12,2
    6b6c:	633f7e04 	addi	r12,r12,-520
    6b70:	db003115 	stw	r12,196(sp)
    6b74:	00c000c4 	movi	r3,3
    6b78:	00bfdfc4 	movi	r2,-129
    6b7c:	d8c02b15 	stw	r3,172(sp)
    6b80:	88a2703a 	and	r17,r17,r2
    6b84:	dd402783 	ldbu	r21,158(sp)
    6b88:	dcc02d15 	stw	r19,180(sp)
    6b8c:	1825883a 	mov	r18,r3
    6b90:	d8003215 	stw	zero,200(sp)
    6b94:	d8003415 	stw	zero,208(sp)
    6b98:	003af106 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    6b9c:	4825883a 	mov	r18,r9
    6ba0:	003c9306 	br	5df0 <__alt_mem_Flash_flash_data+0xf4005df0>
    6ba4:	db002d17 	ldw	r12,180(sp)
    6ba8:	14c00017 	ldw	r19,0(r2)
    6bac:	0039883a 	mov	fp,zero
    6bb0:	63000104 	addi	r12,r12,4
    6bb4:	db002d15 	stw	r12,180(sp)
    6bb8:	003c4706 	br	5cd8 <__alt_mem_Flash_flash_data+0xf4005cd8>
    6bbc:	008000b4 	movhi	r2,2
    6bc0:	10bf7c04 	addi	r2,r2,-528
    6bc4:	d8803115 	stw	r2,196(sp)
    6bc8:	003bf106 	br	5b90 <__alt_mem_Flash_flash_data+0xf4005b90>
    6bcc:	b009883a 	mov	r4,r22
    6bd0:	b80b883a 	mov	r5,r23
    6bd4:	d9801e04 	addi	r6,sp,120
    6bd8:	000d6e00 	call	d6e0 <__sprint_r>
    6bdc:	103a811e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6be0:	dc002617 	ldw	r16,152(sp)
    6be4:	d8c02017 	ldw	r3,128(sp)
    6be8:	da000404 	addi	r8,sp,16
    6bec:	003faf06 	br	6aac <__alt_mem_Flash_flash_data+0xf4006aac>
    6bf0:	db002e17 	ldw	r12,184(sp)
    6bf4:	1805883a 	mov	r2,r3
    6bf8:	dac02d15 	stw	r11,180(sp)
    6bfc:	0319c83a 	sub	r12,zero,r12
    6c00:	db002e15 	stw	r12,184(sp)
    6c04:	003a8206 	br	5610 <__alt_mem_Flash_flash_data+0xf4005610>
    6c08:	18800044 	addi	r2,r3,1
    6c0c:	8c400814 	ori	r17,r17,32
    6c10:	1c000047 	ldb	r16,1(r3)
    6c14:	0039e406 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    6c18:	b009883a 	mov	r4,r22
    6c1c:	b80b883a 	mov	r5,r23
    6c20:	d9801e04 	addi	r6,sp,120
    6c24:	000d6e00 	call	d6e0 <__sprint_r>
    6c28:	103a6e1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6c2c:	d8c02017 	ldw	r3,128(sp)
    6c30:	da000404 	addi	r8,sp,16
    6c34:	003d0c06 	br	6068 <__alt_mem_Flash_flash_data+0xf4006068>
    6c38:	db002817 	ldw	r12,160(sp)
    6c3c:	d8c03117 	ldw	r3,196(sp)
    6c40:	60e5c83a 	sub	r18,r12,r3
    6c44:	003ac106 	br	574c <__alt_mem_Flash_flash_data+0xf400574c>
    6c48:	b009883a 	mov	r4,r22
    6c4c:	b80b883a 	mov	r5,r23
    6c50:	d9801e04 	addi	r6,sp,120
    6c54:	000d6e00 	call	d6e0 <__sprint_r>
    6c58:	103a621e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6c5c:	d8c02017 	ldw	r3,128(sp)
    6c60:	d8801f17 	ldw	r2,124(sp)
    6c64:	da000404 	addi	r8,sp,16
    6c68:	db003317 	ldw	r12,204(sp)
    6c6c:	dac03117 	ldw	r11,196(sp)
    6c70:	10800044 	addi	r2,r2,1
    6c74:	1b07883a 	add	r3,r3,r12
    6c78:	42c00015 	stw	r11,0(r8)
    6c7c:	43000115 	stw	r12,4(r8)
    6c80:	d8c02015 	stw	r3,128(sp)
    6c84:	d8801f15 	stw	r2,124(sp)
    6c88:	010001c4 	movi	r4,7
    6c8c:	20bb460e 	bge	r4,r2,59a8 <__alt_mem_Flash_flash_data+0xf40059a8>
    6c90:	003d8506 	br	62a8 <__alt_mem_Flash_flash_data+0xf40062a8>
    6c94:	da003f15 	stw	r8,252(sp)
    6c98:	00031ec0 	call	31ec <strlen>
    6c9c:	1025883a 	mov	r18,r2
    6ca0:	da003f17 	ldw	r8,252(sp)
    6ca4:	903c540e 	bge	r18,zero,5df8 <__alt_mem_Flash_flash_data+0xf4005df8>
    6ca8:	0005883a 	mov	r2,zero
    6cac:	003c5206 	br	5df8 <__alt_mem_Flash_flash_data+0xf4005df8>
    6cb0:	010000b4 	movhi	r4,2
    6cb4:	213f9884 	addi	r4,r4,-414
    6cb8:	d9003615 	stw	r4,216(sp)
    6cbc:	003adc06 	br	5830 <__alt_mem_Flash_flash_data+0xf4005830>
    6cc0:	d8802604 	addi	r2,sp,152
    6cc4:	d8800115 	stw	r2,4(sp)
    6cc8:	d9403717 	ldw	r5,220(sp)
    6ccc:	d8802504 	addi	r2,sp,148
    6cd0:	d8800215 	stw	r2,8(sp)
    6cd4:	d8802104 	addi	r2,sp,132
    6cd8:	da400015 	stw	r9,0(sp)
    6cdc:	d8800315 	stw	r2,12(sp)
    6ce0:	b009883a 	mov	r4,r22
    6ce4:	900d883a 	mov	r6,r18
    6ce8:	01c000c4 	movi	r7,3
    6cec:	da003f15 	stw	r8,252(sp)
    6cf0:	da403e15 	stw	r9,248(sp)
    6cf4:	00075980 	call	7598 <_dtoa_r>
    6cf8:	da403e17 	ldw	r9,248(sp)
    6cfc:	da003f17 	ldw	r8,252(sp)
    6d00:	d8803115 	stw	r2,196(sp)
    6d04:	4839883a 	mov	fp,r9
    6d08:	dac03117 	ldw	r11,196(sp)
    6d0c:	00801184 	movi	r2,70
    6d10:	5f15883a 	add	r10,r11,fp
    6d14:	a8bef01e 	bne	r21,r2,68d8 <__alt_mem_Flash_flash_data+0xf40068d8>
    6d18:	59000007 	ldb	r4,0(r11)
    6d1c:	00800c04 	movi	r2,48
    6d20:	2080d526 	beq	r4,r2,7078 <___vfprintf_internal_r+0x1e64>
    6d24:	d8c02617 	ldw	r3,152(sp)
    6d28:	50d5883a 	add	r10,r10,r3
    6d2c:	003eea06 	br	68d8 <__alt_mem_Flash_flash_data+0xf40068d8>
    6d30:	0025883a 	mov	r18,zero
    6d34:	003db306 	br	6404 <__alt_mem_Flash_flash_data+0xf4006404>
    6d38:	b009883a 	mov	r4,r22
    6d3c:	b80b883a 	mov	r5,r23
    6d40:	d9801e04 	addi	r6,sp,120
    6d44:	000d6e00 	call	d6e0 <__sprint_r>
    6d48:	103a261e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6d4c:	d8c02017 	ldw	r3,128(sp)
    6d50:	da000404 	addi	r8,sp,16
    6d54:	003daa06 	br	6400 <__alt_mem_Flash_flash_data+0xf4006400>
    6d58:	b009883a 	mov	r4,r22
    6d5c:	b80b883a 	mov	r5,r23
    6d60:	d9801e04 	addi	r6,sp,120
    6d64:	000d6e00 	call	d6e0 <__sprint_r>
    6d68:	103a1e1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6d6c:	d8802617 	ldw	r2,152(sp)
    6d70:	d8c02017 	ldw	r3,128(sp)
    6d74:	da000404 	addi	r8,sp,16
    6d78:	003e2c06 	br	662c <__alt_mem_Flash_flash_data+0xf400662c>
    6d7c:	030000b4 	movhi	r12,2
    6d80:	633f9484 	addi	r12,r12,-430
    6d84:	db002c15 	stw	r12,176(sp)
    6d88:	dac02c17 	ldw	r11,176(sp)
    6d8c:	1c07883a 	add	r3,r3,r16
    6d90:	10800044 	addi	r2,r2,1
    6d94:	42c00015 	stw	r11,0(r8)
    6d98:	44000115 	stw	r16,4(r8)
    6d9c:	d8c02015 	stw	r3,128(sp)
    6da0:	d8801f15 	stw	r2,124(sp)
    6da4:	010001c4 	movi	r4,7
    6da8:	20bfa716 	blt	r4,r2,6c48 <__alt_mem_Flash_flash_data+0xf4006c48>
    6dac:	42000204 	addi	r8,r8,8
    6db0:	003fad06 	br	6c68 <__alt_mem_Flash_flash_data+0xf4006c68>
    6db4:	00800184 	movi	r2,6
    6db8:	1240012e 	bgeu	r2,r9,6dc0 <___vfprintf_internal_r+0x1bac>
    6dbc:	1013883a 	mov	r9,r2
    6dc0:	4825883a 	mov	r18,r9
    6dc4:	4805883a 	mov	r2,r9
    6dc8:	4800c216 	blt	r9,zero,70d4 <___vfprintf_internal_r+0x1ec0>
    6dcc:	d8802b15 	stw	r2,172(sp)
    6dd0:	008000b4 	movhi	r2,2
    6dd4:	10bf8a04 	addi	r2,r2,-472
    6dd8:	d8803115 	stw	r2,196(sp)
    6ddc:	dcc02d15 	stw	r19,180(sp)
    6de0:	d8003215 	stw	zero,200(sp)
    6de4:	d8003415 	stw	zero,208(sp)
    6de8:	0005883a 	mov	r2,zero
    6dec:	003a6306 	br	577c <__alt_mem_Flash_flash_data+0xf400577c>
    6df0:	0021883a 	mov	r16,zero
    6df4:	003e1f06 	br	6674 <__alt_mem_Flash_flash_data+0xf4006674>
    6df8:	b009883a 	mov	r4,r22
    6dfc:	b80b883a 	mov	r5,r23
    6e00:	d9801e04 	addi	r6,sp,120
    6e04:	000d6e00 	call	d6e0 <__sprint_r>
    6e08:	1039f61e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6e0c:	d8802617 	ldw	r2,152(sp)
    6e10:	db003317 	ldw	r12,204(sp)
    6e14:	d8c02017 	ldw	r3,128(sp)
    6e18:	da000404 	addi	r8,sp,16
    6e1c:	6085c83a 	sub	r2,r12,r2
    6e20:	003e1306 	br	6670 <__alt_mem_Flash_flash_data+0xf4006670>
    6e24:	030000b4 	movhi	r12,2
    6e28:	633f9884 	addi	r12,r12,-414
    6e2c:	db003615 	stw	r12,216(sp)
    6e30:	003b0206 	br	5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    6e34:	00c00b44 	movi	r3,45
    6e38:	d8802b15 	stw	r2,172(sp)
    6e3c:	dc402d17 	ldw	r17,180(sp)
    6e40:	d8c02785 	stb	r3,158(sp)
    6e44:	dcc02d15 	stw	r19,180(sp)
    6e48:	d8003215 	stw	zero,200(sp)
    6e4c:	00800b44 	movi	r2,45
    6e50:	003a4706 	br	5770 <__alt_mem_Flash_flash_data+0xf4005770>
    6e54:	05400b44 	movi	r21,45
    6e58:	dd402785 	stb	r21,158(sp)
    6e5c:	003b4706 	br	5b7c <__alt_mem_Flash_flash_data+0xf4005b7c>
    6e60:	008000b4 	movhi	r2,2
    6e64:	10bf7f04 	addi	r2,r2,-516
    6e68:	d8803115 	stw	r2,196(sp)
    6e6c:	003f4106 	br	6b74 <__alt_mem_Flash_flash_data+0xf4006b74>
    6e70:	d8c02617 	ldw	r3,152(sp)
    6e74:	00bfff44 	movi	r2,-3
    6e78:	18801116 	blt	r3,r2,6ec0 <___vfprintf_internal_r+0x1cac>
    6e7c:	48c01016 	blt	r9,r3,6ec0 <___vfprintf_internal_r+0x1cac>
    6e80:	d8c03415 	stw	r3,208(sp)
    6e84:	040019c4 	movi	r16,103
    6e88:	003eb206 	br	6954 <__alt_mem_Flash_flash_data+0xf4006954>
    6e8c:	010000b4 	movhi	r4,2
    6e90:	213f9484 	addi	r4,r4,-430
    6e94:	d9002c15 	stw	r4,176(sp)
    6e98:	003cb106 	br	6160 <__alt_mem_Flash_flash_data+0xf4006160>
    6e9c:	5005883a 	mov	r2,r10
    6ea0:	003ea106 	br	6928 <__alt_mem_Flash_flash_data+0xf4006928>
    6ea4:	da402b15 	stw	r9,172(sp)
    6ea8:	dd402783 	ldbu	r21,158(sp)
    6eac:	4825883a 	mov	r18,r9
    6eb0:	dcc02d15 	stw	r19,180(sp)
    6eb4:	d8003215 	stw	zero,200(sp)
    6eb8:	d8003415 	stw	zero,208(sp)
    6ebc:	003a2806 	br	5760 <__alt_mem_Flash_flash_data+0xf4005760>
    6ec0:	843fff84 	addi	r16,r16,-2
    6ec4:	1f3fffc4 	addi	fp,r3,-1
    6ec8:	df002615 	stw	fp,152(sp)
    6ecc:	dc0022c5 	stb	r16,139(sp)
    6ed0:	e0009816 	blt	fp,zero,7134 <___vfprintf_internal_r+0x1f20>
    6ed4:	00800ac4 	movi	r2,43
    6ed8:	d8802305 	stb	r2,140(sp)
    6edc:	00800244 	movi	r2,9
    6ee0:	1700750e 	bge	r2,fp,70b8 <___vfprintf_internal_r+0x1ea4>
    6ee4:	dd4022c4 	addi	r21,sp,139
    6ee8:	dc002c15 	stw	r16,176(sp)
    6eec:	4025883a 	mov	r18,r8
    6ef0:	a821883a 	mov	r16,r21
    6ef4:	e009883a 	mov	r4,fp
    6ef8:	01400284 	movi	r5,10
    6efc:	000ffb00 	call	ffb0 <__modsi3>
    6f00:	10800c04 	addi	r2,r2,48
    6f04:	843fffc4 	addi	r16,r16,-1
    6f08:	e009883a 	mov	r4,fp
    6f0c:	01400284 	movi	r5,10
    6f10:	80800005 	stb	r2,0(r16)
    6f14:	000ff5c0 	call	ff5c <__divsi3>
    6f18:	1039883a 	mov	fp,r2
    6f1c:	00800244 	movi	r2,9
    6f20:	173ff416 	blt	r2,fp,6ef4 <__alt_mem_Flash_flash_data+0xf4006ef4>
    6f24:	9011883a 	mov	r8,r18
    6f28:	e0800c04 	addi	r2,fp,48
    6f2c:	8025883a 	mov	r18,r16
    6f30:	913fffc4 	addi	r4,r18,-1
    6f34:	90bfffc5 	stb	r2,-1(r18)
    6f38:	dc002c17 	ldw	r16,176(sp)
    6f3c:	2540852e 	bgeu	r4,r21,7154 <___vfprintf_internal_r+0x1f40>
    6f40:	d9402384 	addi	r5,sp,142
    6f44:	2c8bc83a 	sub	r5,r5,r18
    6f48:	d8c02344 	addi	r3,sp,141
    6f4c:	a94b883a 	add	r5,r21,r5
    6f50:	00000106 	br	6f58 <___vfprintf_internal_r+0x1d44>
    6f54:	20800003 	ldbu	r2,0(r4)
    6f58:	18800005 	stb	r2,0(r3)
    6f5c:	18c00044 	addi	r3,r3,1
    6f60:	21000044 	addi	r4,r4,1
    6f64:	197ffb1e 	bne	r3,r5,6f54 <__alt_mem_Flash_flash_data+0xf4006f54>
    6f68:	d8802304 	addi	r2,sp,140
    6f6c:	1485c83a 	sub	r2,r2,r18
    6f70:	d8c02344 	addi	r3,sp,141
    6f74:	1885883a 	add	r2,r3,r2
    6f78:	dac03317 	ldw	r11,204(sp)
    6f7c:	156bc83a 	sub	r21,r2,r21
    6f80:	dd403a15 	stw	r21,232(sp)
    6f84:	00800044 	movi	r2,1
    6f88:	5d65883a 	add	r18,r11,r21
    6f8c:	12c0660e 	bge	r2,r11,7128 <___vfprintf_internal_r+0x1f14>
    6f90:	94800044 	addi	r18,r18,1
    6f94:	9005883a 	mov	r2,r18
    6f98:	90006116 	blt	r18,zero,7120 <___vfprintf_internal_r+0x1f0c>
    6f9c:	d8003415 	stw	zero,208(sp)
    6fa0:	003e7406 	br	6974 <__alt_mem_Flash_flash_data+0xf4006974>
    6fa4:	b009883a 	mov	r4,r22
    6fa8:	b80b883a 	mov	r5,r23
    6fac:	d9801e04 	addi	r6,sp,120
    6fb0:	000d6e00 	call	d6e0 <__sprint_r>
    6fb4:	10398b1e 	bne	r2,zero,55e4 <__alt_mem_Flash_flash_data+0xf40055e4>
    6fb8:	dc002617 	ldw	r16,152(sp)
    6fbc:	d8c02017 	ldw	r3,128(sp)
    6fc0:	d8801f17 	ldw	r2,124(sp)
    6fc4:	da000404 	addi	r8,sp,16
    6fc8:	003ec906 	br	6af0 <__alt_mem_Flash_flash_data+0xf4006af0>
    6fcc:	483e1c1e 	bne	r9,zero,6840 <__alt_mem_Flash_flash_data+0xf4006840>
    6fd0:	9013883a 	mov	r9,r18
    6fd4:	003e1a06 	br	6840 <__alt_mem_Flash_flash_data+0xf4006840>
    6fd8:	02400184 	movi	r9,6
    6fdc:	003e1806 	br	6840 <__alt_mem_Flash_flash_data+0xf4006840>
    6fe0:	d8c03417 	ldw	r3,208(sp)
    6fe4:	00c04b0e 	bge	zero,r3,7114 <___vfprintf_internal_r+0x1f00>
    6fe8:	04800044 	movi	r18,1
    6fec:	dac03317 	ldw	r11,204(sp)
    6ff0:	92e5883a 	add	r18,r18,r11
    6ff4:	9005883a 	mov	r2,r18
    6ff8:	903e5e0e 	bge	r18,zero,6974 <__alt_mem_Flash_flash_data+0xf4006974>
    6ffc:	0005883a 	mov	r2,zero
    7000:	003e5c06 	br	6974 <__alt_mem_Flash_flash_data+0xf4006974>
    7004:	00c00b44 	movi	r3,45
    7008:	64a0003c 	xorhi	r18,r12,32768
    700c:	d8c02b05 	stb	r3,172(sp)
    7010:	003e1106 	br	6858 <__alt_mem_Flash_flash_data+0xf4006858>
    7014:	4f000044 	addi	fp,r9,1
    7018:	003e1606 	br	6874 <__alt_mem_Flash_flash_data+0xf4006874>
    701c:	d8c02617 	ldw	r3,152(sp)
    7020:	d8c03415 	stw	r3,208(sp)
    7024:	00c0350e 	bge	zero,r3,70fc <___vfprintf_internal_r+0x1ee8>
    7028:	4800081e 	bne	r9,zero,704c <___vfprintf_internal_r+0x1e38>
    702c:	8c40004c 	andi	r17,r17,1
    7030:	8800061e 	bne	r17,zero,704c <___vfprintf_internal_r+0x1e38>
    7034:	1805883a 	mov	r2,r3
    7038:	183e4d0e 	bge	r3,zero,6970 <__alt_mem_Flash_flash_data+0xf4006970>
    703c:	0005883a 	mov	r2,zero
    7040:	003e4b06 	br	6970 <__alt_mem_Flash_flash_data+0xf4006970>
    7044:	d8802117 	ldw	r2,132(sp)
    7048:	003e3706 	br	6928 <__alt_mem_Flash_flash_data+0xf4006928>
    704c:	dac03417 	ldw	r11,208(sp)
    7050:	4a400044 	addi	r9,r9,1
    7054:	5a65883a 	add	r18,r11,r9
    7058:	9005883a 	mov	r2,r18
    705c:	903e450e 	bge	r18,zero,6974 <__alt_mem_Flash_flash_data+0xf4006974>
    7060:	003fe606 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7064:	db003417 	ldw	r12,208(sp)
    7068:	64800044 	addi	r18,r12,1
    706c:	9005883a 	mov	r2,r18
    7070:	903e400e 	bge	r18,zero,6974 <__alt_mem_Flash_flash_data+0xf4006974>
    7074:	003fe106 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7078:	d9003717 	ldw	r4,220(sp)
    707c:	900b883a 	mov	r5,r18
    7080:	000d883a 	mov	r6,zero
    7084:	000f883a 	mov	r7,zero
    7088:	da003f15 	stw	r8,252(sp)
    708c:	da403e15 	stw	r9,248(sp)
    7090:	da803d15 	stw	r10,244(sp)
    7094:	00111840 	call	11184 <__eqdf2>
    7098:	da003f17 	ldw	r8,252(sp)
    709c:	da403e17 	ldw	r9,248(sp)
    70a0:	da803d17 	ldw	r10,244(sp)
    70a4:	103f1f26 	beq	r2,zero,6d24 <__alt_mem_Flash_flash_data+0xf4006d24>
    70a8:	00800044 	movi	r2,1
    70ac:	1707c83a 	sub	r3,r2,fp
    70b0:	d8c02615 	stw	r3,152(sp)
    70b4:	003f1c06 	br	6d28 <__alt_mem_Flash_flash_data+0xf4006d28>
    70b8:	00800c04 	movi	r2,48
    70bc:	e0c00c04 	addi	r3,fp,48
    70c0:	d8802345 	stb	r2,141(sp)
    70c4:	d8c02385 	stb	r3,142(sp)
    70c8:	d88023c4 	addi	r2,sp,143
    70cc:	dd4022c4 	addi	r21,sp,139
    70d0:	003fa906 	br	6f78 <__alt_mem_Flash_flash_data+0xf4006f78>
    70d4:	0005883a 	mov	r2,zero
    70d8:	003f3c06 	br	6dcc <__alt_mem_Flash_flash_data+0xf4006dcc>
    70dc:	dac02d17 	ldw	r11,180(sp)
    70e0:	5a400017 	ldw	r9,0(r11)
    70e4:	5ac00104 	addi	r11,r11,4
    70e8:	dac02d15 	stw	r11,180(sp)
    70ec:	483ec80e 	bge	r9,zero,6c10 <__alt_mem_Flash_flash_data+0xf4006c10>
    70f0:	027fffc4 	movi	r9,-1
    70f4:	1c000047 	ldb	r16,1(r3)
    70f8:	0038ab06 	br	53a8 <__alt_mem_Flash_flash_data+0xf40053a8>
    70fc:	4800111e 	bne	r9,zero,7144 <___vfprintf_internal_r+0x1f30>
    7100:	8c40004c 	andi	r17,r17,1
    7104:	88000f1e 	bne	r17,zero,7144 <___vfprintf_internal_r+0x1f30>
    7108:	00800044 	movi	r2,1
    710c:	1025883a 	mov	r18,r2
    7110:	003e1806 	br	6974 <__alt_mem_Flash_flash_data+0xf4006974>
    7114:	04800084 	movi	r18,2
    7118:	90e5c83a 	sub	r18,r18,r3
    711c:	003fb306 	br	6fec <__alt_mem_Flash_flash_data+0xf4006fec>
    7120:	0005883a 	mov	r2,zero
    7124:	003f9d06 	br	6f9c <__alt_mem_Flash_flash_data+0xf4006f9c>
    7128:	88a2703a 	and	r17,r17,r2
    712c:	883f9926 	beq	r17,zero,6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    7130:	003f9706 	br	6f90 <__alt_mem_Flash_flash_data+0xf4006f90>
    7134:	00800b44 	movi	r2,45
    7138:	0739c83a 	sub	fp,zero,fp
    713c:	d8802305 	stb	r2,140(sp)
    7140:	003f6606 	br	6edc <__alt_mem_Flash_flash_data+0xf4006edc>
    7144:	4c800084 	addi	r18,r9,2
    7148:	9005883a 	mov	r2,r18
    714c:	903e090e 	bge	r18,zero,6974 <__alt_mem_Flash_flash_data+0xf4006974>
    7150:	003faa06 	br	6ffc <__alt_mem_Flash_flash_data+0xf4006ffc>
    7154:	d8802344 	addi	r2,sp,141
    7158:	003f8706 	br	6f78 <__alt_mem_Flash_flash_data+0xf4006f78>
    715c:	d8c02617 	ldw	r3,152(sp)
    7160:	003f5806 	br	6ec4 <__alt_mem_Flash_flash_data+0xf4006ec4>

00007164 <__vfprintf_internal>:
    7164:	2007883a 	mov	r3,r4
    7168:	010000b4 	movhi	r4,2
    716c:	21089604 	addi	r4,r4,8792
    7170:	21000017 	ldw	r4,0(r4)
    7174:	2805883a 	mov	r2,r5
    7178:	300f883a 	mov	r7,r6
    717c:	180b883a 	mov	r5,r3
    7180:	100d883a 	mov	r6,r2
    7184:	00052141 	jmpi	5214 <___vfprintf_internal_r>

00007188 <__sbprintf>:
    7188:	2880030b 	ldhu	r2,12(r5)
    718c:	2ac01917 	ldw	r11,100(r5)
    7190:	2a80038b 	ldhu	r10,14(r5)
    7194:	2a400717 	ldw	r9,28(r5)
    7198:	2a000917 	ldw	r8,36(r5)
    719c:	defee204 	addi	sp,sp,-1144
    71a0:	00c10004 	movi	r3,1024
    71a4:	dc011a15 	stw	r16,1128(sp)
    71a8:	10bfff4c 	andi	r2,r2,65533
    71ac:	2821883a 	mov	r16,r5
    71b0:	d8cb883a 	add	r5,sp,r3
    71b4:	dc811c15 	stw	r18,1136(sp)
    71b8:	dc411b15 	stw	r17,1132(sp)
    71bc:	dfc11d15 	stw	ra,1140(sp)
    71c0:	2025883a 	mov	r18,r4
    71c4:	d881030d 	sth	r2,1036(sp)
    71c8:	dac11915 	stw	r11,1124(sp)
    71cc:	da81038d 	sth	r10,1038(sp)
    71d0:	da410715 	stw	r9,1052(sp)
    71d4:	da010915 	stw	r8,1060(sp)
    71d8:	dec10015 	stw	sp,1024(sp)
    71dc:	dec10415 	stw	sp,1040(sp)
    71e0:	d8c10215 	stw	r3,1032(sp)
    71e4:	d8c10515 	stw	r3,1044(sp)
    71e8:	d8010615 	stw	zero,1048(sp)
    71ec:	00052140 	call	5214 <___vfprintf_internal_r>
    71f0:	1023883a 	mov	r17,r2
    71f4:	10000416 	blt	r2,zero,7208 <__sbprintf+0x80>
    71f8:	9009883a 	mov	r4,r18
    71fc:	d9410004 	addi	r5,sp,1024
    7200:	0008ec80 	call	8ec8 <_fflush_r>
    7204:	10000d1e 	bne	r2,zero,723c <__sbprintf+0xb4>
    7208:	d8c1030b 	ldhu	r3,1036(sp)
    720c:	18c0100c 	andi	r3,r3,64
    7210:	18000326 	beq	r3,zero,7220 <__sbprintf+0x98>
    7214:	8080030b 	ldhu	r2,12(r16)
    7218:	10801014 	ori	r2,r2,64
    721c:	8080030d 	sth	r2,12(r16)
    7220:	8805883a 	mov	r2,r17
    7224:	dfc11d17 	ldw	ra,1140(sp)
    7228:	dc811c17 	ldw	r18,1136(sp)
    722c:	dc411b17 	ldw	r17,1132(sp)
    7230:	dc011a17 	ldw	r16,1128(sp)
    7234:	dec11e04 	addi	sp,sp,1144
    7238:	f800283a 	ret
    723c:	047fffc4 	movi	r17,-1
    7240:	003ff106 	br	7208 <__alt_mem_Flash_flash_data+0xf4007208>

00007244 <__swsetup_r>:
    7244:	008000b4 	movhi	r2,2
    7248:	defffd04 	addi	sp,sp,-12
    724c:	10889604 	addi	r2,r2,8792
    7250:	dc400115 	stw	r17,4(sp)
    7254:	2023883a 	mov	r17,r4
    7258:	11000017 	ldw	r4,0(r2)
    725c:	dc000015 	stw	r16,0(sp)
    7260:	dfc00215 	stw	ra,8(sp)
    7264:	2821883a 	mov	r16,r5
    7268:	20000226 	beq	r4,zero,7274 <__swsetup_r+0x30>
    726c:	20c00e17 	ldw	r3,56(r4)
    7270:	18003126 	beq	r3,zero,7338 <__swsetup_r+0xf4>
    7274:	8080030b 	ldhu	r2,12(r16)
    7278:	10c0020c 	andi	r3,r2,8
    727c:	100d883a 	mov	r6,r2
    7280:	18000f26 	beq	r3,zero,72c0 <__swsetup_r+0x7c>
    7284:	80c00417 	ldw	r3,16(r16)
    7288:	18001526 	beq	r3,zero,72e0 <__swsetup_r+0x9c>
    728c:	1100004c 	andi	r4,r2,1
    7290:	20001c1e 	bne	r4,zero,7304 <__swsetup_r+0xc0>
    7294:	1080008c 	andi	r2,r2,2
    7298:	1000291e 	bne	r2,zero,7340 <__swsetup_r+0xfc>
    729c:	80800517 	ldw	r2,20(r16)
    72a0:	80800215 	stw	r2,8(r16)
    72a4:	18001c26 	beq	r3,zero,7318 <__swsetup_r+0xd4>
    72a8:	0005883a 	mov	r2,zero
    72ac:	dfc00217 	ldw	ra,8(sp)
    72b0:	dc400117 	ldw	r17,4(sp)
    72b4:	dc000017 	ldw	r16,0(sp)
    72b8:	dec00304 	addi	sp,sp,12
    72bc:	f800283a 	ret
    72c0:	3080040c 	andi	r2,r6,16
    72c4:	10002e26 	beq	r2,zero,7380 <__swsetup_r+0x13c>
    72c8:	3080010c 	andi	r2,r6,4
    72cc:	10001e1e 	bne	r2,zero,7348 <__swsetup_r+0x104>
    72d0:	80c00417 	ldw	r3,16(r16)
    72d4:	30800214 	ori	r2,r6,8
    72d8:	8080030d 	sth	r2,12(r16)
    72dc:	183feb1e 	bne	r3,zero,728c <__alt_mem_Flash_flash_data+0xf400728c>
    72e0:	1140a00c 	andi	r5,r2,640
    72e4:	01008004 	movi	r4,512
    72e8:	293fe826 	beq	r5,r4,728c <__alt_mem_Flash_flash_data+0xf400728c>
    72ec:	8809883a 	mov	r4,r17
    72f0:	800b883a 	mov	r5,r16
    72f4:	0009e300 	call	9e30 <__smakebuf_r>
    72f8:	8080030b 	ldhu	r2,12(r16)
    72fc:	80c00417 	ldw	r3,16(r16)
    7300:	003fe206 	br	728c <__alt_mem_Flash_flash_data+0xf400728c>
    7304:	80800517 	ldw	r2,20(r16)
    7308:	80000215 	stw	zero,8(r16)
    730c:	0085c83a 	sub	r2,zero,r2
    7310:	80800615 	stw	r2,24(r16)
    7314:	183fe41e 	bne	r3,zero,72a8 <__alt_mem_Flash_flash_data+0xf40072a8>
    7318:	80c0030b 	ldhu	r3,12(r16)
    731c:	0005883a 	mov	r2,zero
    7320:	1900200c 	andi	r4,r3,128
    7324:	203fe126 	beq	r4,zero,72ac <__alt_mem_Flash_flash_data+0xf40072ac>
    7328:	18c01014 	ori	r3,r3,64
    732c:	80c0030d 	sth	r3,12(r16)
    7330:	00bfffc4 	movi	r2,-1
    7334:	003fdd06 	br	72ac <__alt_mem_Flash_flash_data+0xf40072ac>
    7338:	00092a40 	call	92a4 <__sinit>
    733c:	003fcd06 	br	7274 <__alt_mem_Flash_flash_data+0xf4007274>
    7340:	0005883a 	mov	r2,zero
    7344:	003fd606 	br	72a0 <__alt_mem_Flash_flash_data+0xf40072a0>
    7348:	81400c17 	ldw	r5,48(r16)
    734c:	28000626 	beq	r5,zero,7368 <__swsetup_r+0x124>
    7350:	80801004 	addi	r2,r16,64
    7354:	28800326 	beq	r5,r2,7364 <__swsetup_r+0x120>
    7358:	8809883a 	mov	r4,r17
    735c:	00094180 	call	9418 <_free_r>
    7360:	8180030b 	ldhu	r6,12(r16)
    7364:	80000c15 	stw	zero,48(r16)
    7368:	80c00417 	ldw	r3,16(r16)
    736c:	00bff6c4 	movi	r2,-37
    7370:	118c703a 	and	r6,r2,r6
    7374:	80000115 	stw	zero,4(r16)
    7378:	80c00015 	stw	r3,0(r16)
    737c:	003fd506 	br	72d4 <__alt_mem_Flash_flash_data+0xf40072d4>
    7380:	00800244 	movi	r2,9
    7384:	88800015 	stw	r2,0(r17)
    7388:	30801014 	ori	r2,r6,64
    738c:	8080030d 	sth	r2,12(r16)
    7390:	00bfffc4 	movi	r2,-1
    7394:	003fc506 	br	72ac <__alt_mem_Flash_flash_data+0xf40072ac>

00007398 <quorem>:
    7398:	defff704 	addi	sp,sp,-36
    739c:	dc800215 	stw	r18,8(sp)
    73a0:	20800417 	ldw	r2,16(r4)
    73a4:	2c800417 	ldw	r18,16(r5)
    73a8:	dfc00815 	stw	ra,32(sp)
    73ac:	ddc00715 	stw	r23,28(sp)
    73b0:	dd800615 	stw	r22,24(sp)
    73b4:	dd400515 	stw	r21,20(sp)
    73b8:	dd000415 	stw	r20,16(sp)
    73bc:	dcc00315 	stw	r19,12(sp)
    73c0:	dc400115 	stw	r17,4(sp)
    73c4:	dc000015 	stw	r16,0(sp)
    73c8:	14807116 	blt	r2,r18,7590 <quorem+0x1f8>
    73cc:	94bfffc4 	addi	r18,r18,-1
    73d0:	94ad883a 	add	r22,r18,r18
    73d4:	b5ad883a 	add	r22,r22,r22
    73d8:	2c400504 	addi	r17,r5,20
    73dc:	8da9883a 	add	r20,r17,r22
    73e0:	25400504 	addi	r21,r4,20
    73e4:	282f883a 	mov	r23,r5
    73e8:	adad883a 	add	r22,r21,r22
    73ec:	a1400017 	ldw	r5,0(r20)
    73f0:	2021883a 	mov	r16,r4
    73f4:	b1000017 	ldw	r4,0(r22)
    73f8:	29400044 	addi	r5,r5,1
    73fc:	001000c0 	call	1000c <__udivsi3>
    7400:	1027883a 	mov	r19,r2
    7404:	10002c26 	beq	r2,zero,74b8 <quorem+0x120>
    7408:	a813883a 	mov	r9,r21
    740c:	8811883a 	mov	r8,r17
    7410:	0009883a 	mov	r4,zero
    7414:	000d883a 	mov	r6,zero
    7418:	41c00017 	ldw	r7,0(r8)
    741c:	49400017 	ldw	r5,0(r9)
    7420:	42000104 	addi	r8,r8,4
    7424:	38bfffcc 	andi	r2,r7,65535
    7428:	14c5383a 	mul	r2,r2,r19
    742c:	380ed43a 	srli	r7,r7,16
    7430:	28ffffcc 	andi	r3,r5,65535
    7434:	2085883a 	add	r2,r4,r2
    7438:	1008d43a 	srli	r4,r2,16
    743c:	3ccf383a 	mul	r7,r7,r19
    7440:	198d883a 	add	r6,r3,r6
    7444:	10ffffcc 	andi	r3,r2,65535
    7448:	30c7c83a 	sub	r3,r6,r3
    744c:	280ad43a 	srli	r5,r5,16
    7450:	21c9883a 	add	r4,r4,r7
    7454:	180dd43a 	srai	r6,r3,16
    7458:	20bfffcc 	andi	r2,r4,65535
    745c:	288bc83a 	sub	r5,r5,r2
    7460:	298b883a 	add	r5,r5,r6
    7464:	280e943a 	slli	r7,r5,16
    7468:	18ffffcc 	andi	r3,r3,65535
    746c:	2008d43a 	srli	r4,r4,16
    7470:	38ceb03a 	or	r7,r7,r3
    7474:	49c00015 	stw	r7,0(r9)
    7478:	280dd43a 	srai	r6,r5,16
    747c:	4a400104 	addi	r9,r9,4
    7480:	a23fe52e 	bgeu	r20,r8,7418 <__alt_mem_Flash_flash_data+0xf4007418>
    7484:	b0800017 	ldw	r2,0(r22)
    7488:	10000b1e 	bne	r2,zero,74b8 <quorem+0x120>
    748c:	b0bfff04 	addi	r2,r22,-4
    7490:	a880082e 	bgeu	r21,r2,74b4 <quorem+0x11c>
    7494:	b0ffff17 	ldw	r3,-4(r22)
    7498:	18000326 	beq	r3,zero,74a8 <quorem+0x110>
    749c:	00000506 	br	74b4 <quorem+0x11c>
    74a0:	10c00017 	ldw	r3,0(r2)
    74a4:	1800031e 	bne	r3,zero,74b4 <quorem+0x11c>
    74a8:	10bfff04 	addi	r2,r2,-4
    74ac:	94bfffc4 	addi	r18,r18,-1
    74b0:	a8bffb36 	bltu	r21,r2,74a0 <__alt_mem_Flash_flash_data+0xf40074a0>
    74b4:	84800415 	stw	r18,16(r16)
    74b8:	8009883a 	mov	r4,r16
    74bc:	b80b883a 	mov	r5,r23
    74c0:	000b5040 	call	b504 <__mcmp>
    74c4:	10002616 	blt	r2,zero,7560 <quorem+0x1c8>
    74c8:	9cc00044 	addi	r19,r19,1
    74cc:	a80d883a 	mov	r6,r21
    74d0:	000b883a 	mov	r5,zero
    74d4:	31000017 	ldw	r4,0(r6)
    74d8:	88800017 	ldw	r2,0(r17)
    74dc:	31800104 	addi	r6,r6,4
    74e0:	20ffffcc 	andi	r3,r4,65535
    74e4:	194b883a 	add	r5,r3,r5
    74e8:	10ffffcc 	andi	r3,r2,65535
    74ec:	28c7c83a 	sub	r3,r5,r3
    74f0:	1004d43a 	srli	r2,r2,16
    74f4:	2008d43a 	srli	r4,r4,16
    74f8:	180bd43a 	srai	r5,r3,16
    74fc:	18ffffcc 	andi	r3,r3,65535
    7500:	2089c83a 	sub	r4,r4,r2
    7504:	2149883a 	add	r4,r4,r5
    7508:	2004943a 	slli	r2,r4,16
    750c:	8c400104 	addi	r17,r17,4
    7510:	200bd43a 	srai	r5,r4,16
    7514:	10c6b03a 	or	r3,r2,r3
    7518:	30ffff15 	stw	r3,-4(r6)
    751c:	a47fed2e 	bgeu	r20,r17,74d4 <__alt_mem_Flash_flash_data+0xf40074d4>
    7520:	9485883a 	add	r2,r18,r18
    7524:	1085883a 	add	r2,r2,r2
    7528:	a887883a 	add	r3,r21,r2
    752c:	18800017 	ldw	r2,0(r3)
    7530:	10000b1e 	bne	r2,zero,7560 <quorem+0x1c8>
    7534:	18bfff04 	addi	r2,r3,-4
    7538:	a880082e 	bgeu	r21,r2,755c <quorem+0x1c4>
    753c:	18ffff17 	ldw	r3,-4(r3)
    7540:	18000326 	beq	r3,zero,7550 <quorem+0x1b8>
    7544:	00000506 	br	755c <quorem+0x1c4>
    7548:	10c00017 	ldw	r3,0(r2)
    754c:	1800031e 	bne	r3,zero,755c <quorem+0x1c4>
    7550:	10bfff04 	addi	r2,r2,-4
    7554:	94bfffc4 	addi	r18,r18,-1
    7558:	a8bffb36 	bltu	r21,r2,7548 <__alt_mem_Flash_flash_data+0xf4007548>
    755c:	84800415 	stw	r18,16(r16)
    7560:	9805883a 	mov	r2,r19
    7564:	dfc00817 	ldw	ra,32(sp)
    7568:	ddc00717 	ldw	r23,28(sp)
    756c:	dd800617 	ldw	r22,24(sp)
    7570:	dd400517 	ldw	r21,20(sp)
    7574:	dd000417 	ldw	r20,16(sp)
    7578:	dcc00317 	ldw	r19,12(sp)
    757c:	dc800217 	ldw	r18,8(sp)
    7580:	dc400117 	ldw	r17,4(sp)
    7584:	dc000017 	ldw	r16,0(sp)
    7588:	dec00904 	addi	sp,sp,36
    758c:	f800283a 	ret
    7590:	0005883a 	mov	r2,zero
    7594:	003ff306 	br	7564 <__alt_mem_Flash_flash_data+0xf4007564>

00007598 <_dtoa_r>:
    7598:	20801017 	ldw	r2,64(r4)
    759c:	deffde04 	addi	sp,sp,-136
    75a0:	dd401d15 	stw	r21,116(sp)
    75a4:	dcc01b15 	stw	r19,108(sp)
    75a8:	dc801a15 	stw	r18,104(sp)
    75ac:	dc401915 	stw	r17,100(sp)
    75b0:	dc001815 	stw	r16,96(sp)
    75b4:	dfc02115 	stw	ra,132(sp)
    75b8:	df002015 	stw	fp,128(sp)
    75bc:	ddc01f15 	stw	r23,124(sp)
    75c0:	dd801e15 	stw	r22,120(sp)
    75c4:	dd001c15 	stw	r20,112(sp)
    75c8:	d9c00315 	stw	r7,12(sp)
    75cc:	2021883a 	mov	r16,r4
    75d0:	302b883a 	mov	r21,r6
    75d4:	2825883a 	mov	r18,r5
    75d8:	dc402417 	ldw	r17,144(sp)
    75dc:	3027883a 	mov	r19,r6
    75e0:	10000826 	beq	r2,zero,7604 <_dtoa_r+0x6c>
    75e4:	21801117 	ldw	r6,68(r4)
    75e8:	00c00044 	movi	r3,1
    75ec:	100b883a 	mov	r5,r2
    75f0:	1986983a 	sll	r3,r3,r6
    75f4:	11800115 	stw	r6,4(r2)
    75f8:	10c00215 	stw	r3,8(r2)
    75fc:	000acd80 	call	acd8 <_Bfree>
    7600:	80001015 	stw	zero,64(r16)
    7604:	a8002d16 	blt	r21,zero,76bc <_dtoa_r+0x124>
    7608:	88000015 	stw	zero,0(r17)
    760c:	a8dffc2c 	andhi	r3,r21,32752
    7610:	009ffc34 	movhi	r2,32752
    7614:	18801b26 	beq	r3,r2,7684 <_dtoa_r+0xec>
    7618:	9009883a 	mov	r4,r18
    761c:	980b883a 	mov	r5,r19
    7620:	000d883a 	mov	r6,zero
    7624:	000f883a 	mov	r7,zero
    7628:	00111840 	call	11184 <__eqdf2>
    762c:	10002a1e 	bne	r2,zero,76d8 <_dtoa_r+0x140>
    7630:	d8c02317 	ldw	r3,140(sp)
    7634:	d9002517 	ldw	r4,148(sp)
    7638:	00800044 	movi	r2,1
    763c:	18800015 	stw	r2,0(r3)
    7640:	2001a226 	beq	r4,zero,7ccc <_dtoa_r+0x734>
    7644:	008000b4 	movhi	r2,2
    7648:	10bf8c44 	addi	r2,r2,-463
    764c:	20800015 	stw	r2,0(r4)
    7650:	10bfffc4 	addi	r2,r2,-1
    7654:	dfc02117 	ldw	ra,132(sp)
    7658:	df002017 	ldw	fp,128(sp)
    765c:	ddc01f17 	ldw	r23,124(sp)
    7660:	dd801e17 	ldw	r22,120(sp)
    7664:	dd401d17 	ldw	r21,116(sp)
    7668:	dd001c17 	ldw	r20,112(sp)
    766c:	dcc01b17 	ldw	r19,108(sp)
    7670:	dc801a17 	ldw	r18,104(sp)
    7674:	dc401917 	ldw	r17,100(sp)
    7678:	dc001817 	ldw	r16,96(sp)
    767c:	dec02204 	addi	sp,sp,136
    7680:	f800283a 	ret
    7684:	d8c02317 	ldw	r3,140(sp)
    7688:	0089c3c4 	movi	r2,9999
    768c:	18800015 	stw	r2,0(r3)
    7690:	90017c26 	beq	r18,zero,7c84 <_dtoa_r+0x6ec>
    7694:	008000b4 	movhi	r2,2
    7698:	10bfa004 	addi	r2,r2,-384
    769c:	d9002517 	ldw	r4,148(sp)
    76a0:	203fec26 	beq	r4,zero,7654 <__alt_mem_Flash_flash_data+0xf4007654>
    76a4:	10c000c7 	ldb	r3,3(r2)
    76a8:	18017d1e 	bne	r3,zero,7ca0 <_dtoa_r+0x708>
    76ac:	10c000c4 	addi	r3,r2,3
    76b0:	d9802517 	ldw	r6,148(sp)
    76b4:	30c00015 	stw	r3,0(r6)
    76b8:	003fe606 	br	7654 <__alt_mem_Flash_flash_data+0xf4007654>
    76bc:	04e00034 	movhi	r19,32768
    76c0:	9cffffc4 	addi	r19,r19,-1
    76c4:	00800044 	movi	r2,1
    76c8:	ace6703a 	and	r19,r21,r19
    76cc:	88800015 	stw	r2,0(r17)
    76d0:	982b883a 	mov	r21,r19
    76d4:	003fcd06 	br	760c <__alt_mem_Flash_flash_data+0xf400760c>
    76d8:	d8800204 	addi	r2,sp,8
    76dc:	a822d53a 	srli	r17,r21,20
    76e0:	d8800015 	stw	r2,0(sp)
    76e4:	8009883a 	mov	r4,r16
    76e8:	900b883a 	mov	r5,r18
    76ec:	980d883a 	mov	r6,r19
    76f0:	d9c00104 	addi	r7,sp,4
    76f4:	000b8780 	call	b878 <__d2b>
    76f8:	1039883a 	mov	fp,r2
    76fc:	88016a1e 	bne	r17,zero,7ca8 <_dtoa_r+0x710>
    7700:	dd000217 	ldw	r20,8(sp)
    7704:	dc400117 	ldw	r17,4(sp)
    7708:	00befbc4 	movi	r2,-1041
    770c:	a463883a 	add	r17,r20,r17
    7710:	8882ea16 	blt	r17,r2,82bc <_dtoa_r+0xd24>
    7714:	00bf0384 	movi	r2,-1010
    7718:	1445c83a 	sub	r2,r2,r17
    771c:	89010484 	addi	r4,r17,1042
    7720:	a8aa983a 	sll	r21,r21,r2
    7724:	9108d83a 	srl	r4,r18,r4
    7728:	a908b03a 	or	r4,r21,r4
    772c:	00125140 	call	12514 <__floatunsidf>
    7730:	017f8434 	movhi	r5,65040
    7734:	01800044 	movi	r6,1
    7738:	1009883a 	mov	r4,r2
    773c:	194b883a 	add	r5,r3,r5
    7740:	8c7fffc4 	addi	r17,r17,-1
    7744:	d9800f15 	stw	r6,60(sp)
    7748:	000d883a 	mov	r6,zero
    774c:	01cffe34 	movhi	r7,16376
    7750:	0011aec0 	call	11aec <__subdf3>
    7754:	0198dbf4 	movhi	r6,25455
    7758:	01cff4f4 	movhi	r7,16339
    775c:	1009883a 	mov	r4,r2
    7760:	180b883a 	mov	r5,r3
    7764:	3190d844 	addi	r6,r6,17249
    7768:	39e1e9c4 	addi	r7,r7,-30809
    776c:	00113c80 	call	113c8 <__muldf3>
    7770:	01a2d874 	movhi	r6,35681
    7774:	01cff1f4 	movhi	r7,16327
    7778:	180b883a 	mov	r5,r3
    777c:	31b22cc4 	addi	r6,r6,-14157
    7780:	39e28a04 	addi	r7,r7,-30168
    7784:	1009883a 	mov	r4,r2
    7788:	001001c0 	call	1001c <__adddf3>
    778c:	8809883a 	mov	r4,r17
    7790:	102d883a 	mov	r22,r2
    7794:	182b883a 	mov	r21,r3
    7798:	00124440 	call	12444 <__floatsidf>
    779c:	019427f4 	movhi	r6,20639
    77a0:	01cff4f4 	movhi	r7,16339
    77a4:	1009883a 	mov	r4,r2
    77a8:	180b883a 	mov	r5,r3
    77ac:	319e7ec4 	addi	r6,r6,31227
    77b0:	39d104c4 	addi	r7,r7,17427
    77b4:	00113c80 	call	113c8 <__muldf3>
    77b8:	b009883a 	mov	r4,r22
    77bc:	a80b883a 	mov	r5,r21
    77c0:	100d883a 	mov	r6,r2
    77c4:	180f883a 	mov	r7,r3
    77c8:	001001c0 	call	1001c <__adddf3>
    77cc:	1009883a 	mov	r4,r2
    77d0:	180b883a 	mov	r5,r3
    77d4:	102d883a 	mov	r22,r2
    77d8:	182b883a 	mov	r21,r3
    77dc:	00123bc0 	call	123bc <__fixdfsi>
    77e0:	b009883a 	mov	r4,r22
    77e4:	a80b883a 	mov	r5,r21
    77e8:	000d883a 	mov	r6,zero
    77ec:	000f883a 	mov	r7,zero
    77f0:	d8800515 	stw	r2,20(sp)
    77f4:	00112e80 	call	112e8 <__ledf2>
    77f8:	10023116 	blt	r2,zero,80c0 <_dtoa_r+0xb28>
    77fc:	d8c00517 	ldw	r3,20(sp)
    7800:	00800584 	movi	r2,22
    7804:	10c21f36 	bltu	r2,r3,8084 <_dtoa_r+0xaec>
    7808:	180490fa 	slli	r2,r3,3
    780c:	00c000b4 	movhi	r3,2
    7810:	18ffbc04 	addi	r3,r3,-272
    7814:	1885883a 	add	r2,r3,r2
    7818:	11000017 	ldw	r4,0(r2)
    781c:	11400117 	ldw	r5,4(r2)
    7820:	900d883a 	mov	r6,r18
    7824:	980f883a 	mov	r7,r19
    7828:	00112080 	call	11208 <__gedf2>
    782c:	0082a70e 	bge	zero,r2,82cc <_dtoa_r+0xd34>
    7830:	d9000517 	ldw	r4,20(sp)
    7834:	d8000d15 	stw	zero,52(sp)
    7838:	213fffc4 	addi	r4,r4,-1
    783c:	d9000515 	stw	r4,20(sp)
    7840:	a463c83a 	sub	r17,r20,r17
    7844:	8dbfffc4 	addi	r22,r17,-1
    7848:	b0021916 	blt	r22,zero,80b0 <_dtoa_r+0xb18>
    784c:	d8000815 	stw	zero,32(sp)
    7850:	d8800517 	ldw	r2,20(sp)
    7854:	10020e16 	blt	r2,zero,8090 <_dtoa_r+0xaf8>
    7858:	b0ad883a 	add	r22,r22,r2
    785c:	d8800a15 	stw	r2,40(sp)
    7860:	d8000915 	stw	zero,36(sp)
    7864:	d8c00317 	ldw	r3,12(sp)
    7868:	00800244 	movi	r2,9
    786c:	10c11a36 	bltu	r2,r3,7cd8 <_dtoa_r+0x740>
    7870:	00800144 	movi	r2,5
    7874:	10c4fc0e 	bge	r2,r3,8c68 <_dtoa_r+0x16d0>
    7878:	18ffff04 	addi	r3,r3,-4
    787c:	d8c00315 	stw	r3,12(sp)
    7880:	0029883a 	mov	r20,zero
    7884:	d9800317 	ldw	r6,12(sp)
    7888:	008000c4 	movi	r2,3
    788c:	3083bd26 	beq	r6,r2,8784 <_dtoa_r+0x11ec>
    7890:	1183670e 	bge	r2,r6,8630 <_dtoa_r+0x1098>
    7894:	d8c00317 	ldw	r3,12(sp)
    7898:	00800104 	movi	r2,4
    789c:	1882e726 	beq	r3,r2,843c <_dtoa_r+0xea4>
    78a0:	00800144 	movi	r2,5
    78a4:	1884f21e 	bne	r3,r2,8c70 <_dtoa_r+0x16d8>
    78a8:	00800044 	movi	r2,1
    78ac:	d8800b15 	stw	r2,44(sp)
    78b0:	d8c02217 	ldw	r3,136(sp)
    78b4:	d9000517 	ldw	r4,20(sp)
    78b8:	1907883a 	add	r3,r3,r4
    78bc:	19800044 	addi	r6,r3,1
    78c0:	d8c00c15 	stw	r3,48(sp)
    78c4:	d9800615 	stw	r6,24(sp)
    78c8:	0183c30e 	bge	zero,r6,87d8 <_dtoa_r+0x1240>
    78cc:	d9800617 	ldw	r6,24(sp)
    78d0:	3023883a 	mov	r17,r6
    78d4:	80001115 	stw	zero,68(r16)
    78d8:	008005c4 	movi	r2,23
    78dc:	1184f62e 	bgeu	r2,r6,8cb8 <_dtoa_r+0x1720>
    78e0:	00c00044 	movi	r3,1
    78e4:	00800104 	movi	r2,4
    78e8:	1085883a 	add	r2,r2,r2
    78ec:	11000504 	addi	r4,r2,20
    78f0:	180b883a 	mov	r5,r3
    78f4:	18c00044 	addi	r3,r3,1
    78f8:	313ffb2e 	bgeu	r6,r4,78e8 <__alt_mem_Flash_flash_data+0xf40078e8>
    78fc:	81401115 	stw	r5,68(r16)
    7900:	8009883a 	mov	r4,r16
    7904:	000ac300 	call	ac30 <_Balloc>
    7908:	d8800715 	stw	r2,28(sp)
    790c:	80801015 	stw	r2,64(r16)
    7910:	00800384 	movi	r2,14
    7914:	1440fd36 	bltu	r2,r17,7d0c <_dtoa_r+0x774>
    7918:	a000fc26 	beq	r20,zero,7d0c <_dtoa_r+0x774>
    791c:	d8800517 	ldw	r2,20(sp)
    7920:	0083b90e 	bge	zero,r2,8808 <_dtoa_r+0x1270>
    7924:	d8c00517 	ldw	r3,20(sp)
    7928:	108003cc 	andi	r2,r2,15
    792c:	100490fa 	slli	r2,r2,3
    7930:	182fd13a 	srai	r23,r3,4
    7934:	00c000b4 	movhi	r3,2
    7938:	18ffbc04 	addi	r3,r3,-272
    793c:	1885883a 	add	r2,r3,r2
    7940:	b8c0040c 	andi	r3,r23,16
    7944:	12c00017 	ldw	r11,0(r2)
    7948:	12800117 	ldw	r10,4(r2)
    794c:	18039726 	beq	r3,zero,87ac <_dtoa_r+0x1214>
    7950:	008000b4 	movhi	r2,2
    7954:	10bfb204 	addi	r2,r2,-312
    7958:	11800817 	ldw	r6,32(r2)
    795c:	11c00917 	ldw	r7,36(r2)
    7960:	9009883a 	mov	r4,r18
    7964:	980b883a 	mov	r5,r19
    7968:	da801615 	stw	r10,88(sp)
    796c:	dac01515 	stw	r11,84(sp)
    7970:	00108b80 	call	108b8 <__divdf3>
    7974:	da801617 	ldw	r10,88(sp)
    7978:	dac01517 	ldw	r11,84(sp)
    797c:	bdc003cc 	andi	r23,r23,15
    7980:	044000c4 	movi	r17,3
    7984:	d8800e15 	stw	r2,56(sp)
    7988:	182b883a 	mov	r21,r3
    798c:	b8001126 	beq	r23,zero,79d4 <_dtoa_r+0x43c>
    7990:	050000b4 	movhi	r20,2
    7994:	a53fb204 	addi	r20,r20,-312
    7998:	5805883a 	mov	r2,r11
    799c:	5007883a 	mov	r3,r10
    79a0:	b980004c 	andi	r6,r23,1
    79a4:	1009883a 	mov	r4,r2
    79a8:	b82fd07a 	srai	r23,r23,1
    79ac:	180b883a 	mov	r5,r3
    79b0:	30000426 	beq	r6,zero,79c4 <_dtoa_r+0x42c>
    79b4:	a1800017 	ldw	r6,0(r20)
    79b8:	a1c00117 	ldw	r7,4(r20)
    79bc:	8c400044 	addi	r17,r17,1
    79c0:	00113c80 	call	113c8 <__muldf3>
    79c4:	a5000204 	addi	r20,r20,8
    79c8:	b83ff51e 	bne	r23,zero,79a0 <__alt_mem_Flash_flash_data+0xf40079a0>
    79cc:	1017883a 	mov	r11,r2
    79d0:	1815883a 	mov	r10,r3
    79d4:	d9000e17 	ldw	r4,56(sp)
    79d8:	a80b883a 	mov	r5,r21
    79dc:	580d883a 	mov	r6,r11
    79e0:	500f883a 	mov	r7,r10
    79e4:	00108b80 	call	108b8 <__divdf3>
    79e8:	1029883a 	mov	r20,r2
    79ec:	182b883a 	mov	r21,r3
    79f0:	d9800d17 	ldw	r6,52(sp)
    79f4:	30000626 	beq	r6,zero,7a10 <_dtoa_r+0x478>
    79f8:	a009883a 	mov	r4,r20
    79fc:	a80b883a 	mov	r5,r21
    7a00:	000d883a 	mov	r6,zero
    7a04:	01cffc34 	movhi	r7,16368
    7a08:	00112e80 	call	112e8 <__ledf2>
    7a0c:	10043216 	blt	r2,zero,8ad8 <_dtoa_r+0x1540>
    7a10:	8809883a 	mov	r4,r17
    7a14:	00124440 	call	12444 <__floatsidf>
    7a18:	1009883a 	mov	r4,r2
    7a1c:	180b883a 	mov	r5,r3
    7a20:	a00d883a 	mov	r6,r20
    7a24:	a80f883a 	mov	r7,r21
    7a28:	00113c80 	call	113c8 <__muldf3>
    7a2c:	000d883a 	mov	r6,zero
    7a30:	1009883a 	mov	r4,r2
    7a34:	180b883a 	mov	r5,r3
    7a38:	01d00734 	movhi	r7,16412
    7a3c:	001001c0 	call	1001c <__adddf3>
    7a40:	1023883a 	mov	r17,r2
    7a44:	d9800617 	ldw	r6,24(sp)
    7a48:	00bf3034 	movhi	r2,64704
    7a4c:	1885883a 	add	r2,r3,r2
    7a50:	d8800e15 	stw	r2,56(sp)
    7a54:	30032e26 	beq	r6,zero,8710 <_dtoa_r+0x1178>
    7a58:	d8c00517 	ldw	r3,20(sp)
    7a5c:	da800617 	ldw	r10,24(sp)
    7a60:	d8c01215 	stw	r3,72(sp)
    7a64:	d9000b17 	ldw	r4,44(sp)
    7a68:	2003b026 	beq	r4,zero,892c <_dtoa_r+0x1394>
    7a6c:	50bfffc4 	addi	r2,r10,-1
    7a70:	100490fa 	slli	r2,r2,3
    7a74:	00c000b4 	movhi	r3,2
    7a78:	18ffbc04 	addi	r3,r3,-272
    7a7c:	1885883a 	add	r2,r3,r2
    7a80:	11800017 	ldw	r6,0(r2)
    7a84:	11c00117 	ldw	r7,4(r2)
    7a88:	d8800717 	ldw	r2,28(sp)
    7a8c:	0009883a 	mov	r4,zero
    7a90:	014ff834 	movhi	r5,16352
    7a94:	da801615 	stw	r10,88(sp)
    7a98:	15c00044 	addi	r23,r2,1
    7a9c:	00108b80 	call	108b8 <__divdf3>
    7aa0:	d9c00e17 	ldw	r7,56(sp)
    7aa4:	880d883a 	mov	r6,r17
    7aa8:	1009883a 	mov	r4,r2
    7aac:	180b883a 	mov	r5,r3
    7ab0:	0011aec0 	call	11aec <__subdf3>
    7ab4:	a80b883a 	mov	r5,r21
    7ab8:	a009883a 	mov	r4,r20
    7abc:	d8c01015 	stw	r3,64(sp)
    7ac0:	d8800e15 	stw	r2,56(sp)
    7ac4:	00123bc0 	call	123bc <__fixdfsi>
    7ac8:	1009883a 	mov	r4,r2
    7acc:	d8801715 	stw	r2,92(sp)
    7ad0:	00124440 	call	12444 <__floatsidf>
    7ad4:	a009883a 	mov	r4,r20
    7ad8:	a80b883a 	mov	r5,r21
    7adc:	100d883a 	mov	r6,r2
    7ae0:	180f883a 	mov	r7,r3
    7ae4:	0011aec0 	call	11aec <__subdf3>
    7ae8:	da001717 	ldw	r8,92(sp)
    7aec:	1829883a 	mov	r20,r3
    7af0:	d8c00717 	ldw	r3,28(sp)
    7af4:	d9000e17 	ldw	r4,56(sp)
    7af8:	d9401017 	ldw	r5,64(sp)
    7afc:	42000c04 	addi	r8,r8,48
    7b00:	1023883a 	mov	r17,r2
    7b04:	1a000005 	stb	r8,0(r3)
    7b08:	880d883a 	mov	r6,r17
    7b0c:	a00f883a 	mov	r7,r20
    7b10:	402b883a 	mov	r21,r8
    7b14:	00112080 	call	11208 <__gedf2>
    7b18:	00844516 	blt	zero,r2,8c30 <_dtoa_r+0x1698>
    7b1c:	0009883a 	mov	r4,zero
    7b20:	014ffc34 	movhi	r5,16368
    7b24:	880d883a 	mov	r6,r17
    7b28:	a00f883a 	mov	r7,r20
    7b2c:	0011aec0 	call	11aec <__subdf3>
    7b30:	d9000e17 	ldw	r4,56(sp)
    7b34:	d9401017 	ldw	r5,64(sp)
    7b38:	100d883a 	mov	r6,r2
    7b3c:	180f883a 	mov	r7,r3
    7b40:	00112080 	call	11208 <__gedf2>
    7b44:	da801617 	ldw	r10,88(sp)
    7b48:	00843616 	blt	zero,r2,8c24 <_dtoa_r+0x168c>
    7b4c:	00800044 	movi	r2,1
    7b50:	12806e0e 	bge	r2,r10,7d0c <_dtoa_r+0x774>
    7b54:	d9000717 	ldw	r4,28(sp)
    7b58:	dd801315 	stw	r22,76(sp)
    7b5c:	dc001115 	stw	r16,68(sp)
    7b60:	2295883a 	add	r10,r4,r10
    7b64:	dcc01415 	stw	r19,80(sp)
    7b68:	502d883a 	mov	r22,r10
    7b6c:	dcc01017 	ldw	r19,64(sp)
    7b70:	b821883a 	mov	r16,r23
    7b74:	dc801015 	stw	r18,64(sp)
    7b78:	dc800e17 	ldw	r18,56(sp)
    7b7c:	00000906 	br	7ba4 <_dtoa_r+0x60c>
    7b80:	0011aec0 	call	11aec <__subdf3>
    7b84:	1009883a 	mov	r4,r2
    7b88:	180b883a 	mov	r5,r3
    7b8c:	900d883a 	mov	r6,r18
    7b90:	980f883a 	mov	r7,r19
    7b94:	00112e80 	call	112e8 <__ledf2>
    7b98:	10040e16 	blt	r2,zero,8bd4 <_dtoa_r+0x163c>
    7b9c:	b821883a 	mov	r16,r23
    7ba0:	bd841026 	beq	r23,r22,8be4 <_dtoa_r+0x164c>
    7ba4:	9009883a 	mov	r4,r18
    7ba8:	980b883a 	mov	r5,r19
    7bac:	000d883a 	mov	r6,zero
    7bb0:	01d00934 	movhi	r7,16420
    7bb4:	00113c80 	call	113c8 <__muldf3>
    7bb8:	000d883a 	mov	r6,zero
    7bbc:	01d00934 	movhi	r7,16420
    7bc0:	8809883a 	mov	r4,r17
    7bc4:	a00b883a 	mov	r5,r20
    7bc8:	1025883a 	mov	r18,r2
    7bcc:	1827883a 	mov	r19,r3
    7bd0:	00113c80 	call	113c8 <__muldf3>
    7bd4:	180b883a 	mov	r5,r3
    7bd8:	1009883a 	mov	r4,r2
    7bdc:	1823883a 	mov	r17,r3
    7be0:	1029883a 	mov	r20,r2
    7be4:	00123bc0 	call	123bc <__fixdfsi>
    7be8:	1009883a 	mov	r4,r2
    7bec:	102b883a 	mov	r21,r2
    7bf0:	00124440 	call	12444 <__floatsidf>
    7bf4:	a009883a 	mov	r4,r20
    7bf8:	880b883a 	mov	r5,r17
    7bfc:	100d883a 	mov	r6,r2
    7c00:	180f883a 	mov	r7,r3
    7c04:	0011aec0 	call	11aec <__subdf3>
    7c08:	ad400c04 	addi	r21,r21,48
    7c0c:	1009883a 	mov	r4,r2
    7c10:	180b883a 	mov	r5,r3
    7c14:	900d883a 	mov	r6,r18
    7c18:	980f883a 	mov	r7,r19
    7c1c:	85400005 	stb	r21,0(r16)
    7c20:	1023883a 	mov	r17,r2
    7c24:	1829883a 	mov	r20,r3
    7c28:	00112e80 	call	112e8 <__ledf2>
    7c2c:	bdc00044 	addi	r23,r23,1
    7c30:	0009883a 	mov	r4,zero
    7c34:	014ffc34 	movhi	r5,16368
    7c38:	880d883a 	mov	r6,r17
    7c3c:	a00f883a 	mov	r7,r20
    7c40:	103fcf0e 	bge	r2,zero,7b80 <__alt_mem_Flash_flash_data+0xf4007b80>
    7c44:	d9801217 	ldw	r6,72(sp)
    7c48:	dc001117 	ldw	r16,68(sp)
    7c4c:	d9800515 	stw	r6,20(sp)
    7c50:	8009883a 	mov	r4,r16
    7c54:	e00b883a 	mov	r5,fp
    7c58:	000acd80 	call	acd8 <_Bfree>
    7c5c:	d8c00517 	ldw	r3,20(sp)
    7c60:	d9002317 	ldw	r4,140(sp)
    7c64:	d9802517 	ldw	r6,148(sp)
    7c68:	b8000005 	stb	zero,0(r23)
    7c6c:	18800044 	addi	r2,r3,1
    7c70:	20800015 	stw	r2,0(r4)
    7c74:	30027226 	beq	r6,zero,8640 <_dtoa_r+0x10a8>
    7c78:	35c00015 	stw	r23,0(r6)
    7c7c:	d8800717 	ldw	r2,28(sp)
    7c80:	003e7406 	br	7654 <__alt_mem_Flash_flash_data+0xf4007654>
    7c84:	00800434 	movhi	r2,16
    7c88:	10bfffc4 	addi	r2,r2,-1
    7c8c:	a8aa703a 	and	r21,r21,r2
    7c90:	a83e801e 	bne	r21,zero,7694 <__alt_mem_Flash_flash_data+0xf4007694>
    7c94:	008000b4 	movhi	r2,2
    7c98:	10bf9d04 	addi	r2,r2,-396
    7c9c:	003e7f06 	br	769c <__alt_mem_Flash_flash_data+0xf400769c>
    7ca0:	10c00204 	addi	r3,r2,8
    7ca4:	003e8206 	br	76b0 <__alt_mem_Flash_flash_data+0xf40076b0>
    7ca8:	01400434 	movhi	r5,16
    7cac:	297fffc4 	addi	r5,r5,-1
    7cb0:	994a703a 	and	r5,r19,r5
    7cb4:	9009883a 	mov	r4,r18
    7cb8:	8c7f0044 	addi	r17,r17,-1023
    7cbc:	294ffc34 	orhi	r5,r5,16368
    7cc0:	dd000217 	ldw	r20,8(sp)
    7cc4:	d8000f15 	stw	zero,60(sp)
    7cc8:	003e9f06 	br	7748 <__alt_mem_Flash_flash_data+0xf4007748>
    7ccc:	008000b4 	movhi	r2,2
    7cd0:	10bf8c04 	addi	r2,r2,-464
    7cd4:	003e5f06 	br	7654 <__alt_mem_Flash_flash_data+0xf4007654>
    7cd8:	80001115 	stw	zero,68(r16)
    7cdc:	8009883a 	mov	r4,r16
    7ce0:	000b883a 	mov	r5,zero
    7ce4:	000ac300 	call	ac30 <_Balloc>
    7ce8:	01bfffc4 	movi	r6,-1
    7cec:	d8800715 	stw	r2,28(sp)
    7cf0:	80801015 	stw	r2,64(r16)
    7cf4:	00800044 	movi	r2,1
    7cf8:	d9800c15 	stw	r6,48(sp)
    7cfc:	d8800b15 	stw	r2,44(sp)
    7d00:	d9800615 	stw	r6,24(sp)
    7d04:	d8002215 	stw	zero,136(sp)
    7d08:	d8000315 	stw	zero,12(sp)
    7d0c:	d8800117 	ldw	r2,4(sp)
    7d10:	10008e16 	blt	r2,zero,7f4c <_dtoa_r+0x9b4>
    7d14:	d9000517 	ldw	r4,20(sp)
    7d18:	00c00384 	movi	r3,14
    7d1c:	19008b16 	blt	r3,r4,7f4c <_dtoa_r+0x9b4>
    7d20:	200490fa 	slli	r2,r4,3
    7d24:	00c000b4 	movhi	r3,2
    7d28:	d9802217 	ldw	r6,136(sp)
    7d2c:	18ffbc04 	addi	r3,r3,-272
    7d30:	1885883a 	add	r2,r3,r2
    7d34:	14400017 	ldw	r17,0(r2)
    7d38:	15000117 	ldw	r20,4(r2)
    7d3c:	3001c716 	blt	r6,zero,845c <_dtoa_r+0xec4>
    7d40:	880d883a 	mov	r6,r17
    7d44:	a00f883a 	mov	r7,r20
    7d48:	9009883a 	mov	r4,r18
    7d4c:	980b883a 	mov	r5,r19
    7d50:	00108b80 	call	108b8 <__divdf3>
    7d54:	180b883a 	mov	r5,r3
    7d58:	1009883a 	mov	r4,r2
    7d5c:	00123bc0 	call	123bc <__fixdfsi>
    7d60:	1009883a 	mov	r4,r2
    7d64:	102d883a 	mov	r22,r2
    7d68:	00124440 	call	12444 <__floatsidf>
    7d6c:	1009883a 	mov	r4,r2
    7d70:	180b883a 	mov	r5,r3
    7d74:	880d883a 	mov	r6,r17
    7d78:	a00f883a 	mov	r7,r20
    7d7c:	00113c80 	call	113c8 <__muldf3>
    7d80:	9009883a 	mov	r4,r18
    7d84:	980b883a 	mov	r5,r19
    7d88:	100d883a 	mov	r6,r2
    7d8c:	180f883a 	mov	r7,r3
    7d90:	0011aec0 	call	11aec <__subdf3>
    7d94:	d9000717 	ldw	r4,28(sp)
    7d98:	d9800617 	ldw	r6,24(sp)
    7d9c:	180b883a 	mov	r5,r3
    7da0:	b0c00c04 	addi	r3,r22,48
    7da4:	20c00005 	stb	r3,0(r4)
    7da8:	25c00044 	addi	r23,r4,1
    7dac:	01000044 	movi	r4,1
    7db0:	1011883a 	mov	r8,r2
    7db4:	2807883a 	mov	r3,r5
    7db8:	31003d26 	beq	r6,r4,7eb0 <_dtoa_r+0x918>
    7dbc:	000d883a 	mov	r6,zero
    7dc0:	01d00934 	movhi	r7,16420
    7dc4:	1009883a 	mov	r4,r2
    7dc8:	00113c80 	call	113c8 <__muldf3>
    7dcc:	1009883a 	mov	r4,r2
    7dd0:	180b883a 	mov	r5,r3
    7dd4:	000d883a 	mov	r6,zero
    7dd8:	000f883a 	mov	r7,zero
    7ddc:	1027883a 	mov	r19,r2
    7de0:	182b883a 	mov	r21,r3
    7de4:	00111840 	call	11184 <__eqdf2>
    7de8:	103f9926 	beq	r2,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    7dec:	d8c00617 	ldw	r3,24(sp)
    7df0:	d9000717 	ldw	r4,28(sp)
    7df4:	b825883a 	mov	r18,r23
    7df8:	18bfffc4 	addi	r2,r3,-1
    7dfc:	20ad883a 	add	r22,r4,r2
    7e00:	dc000315 	stw	r16,12(sp)
    7e04:	00000a06 	br	7e30 <_dtoa_r+0x898>
    7e08:	00113c80 	call	113c8 <__muldf3>
    7e0c:	1009883a 	mov	r4,r2
    7e10:	180b883a 	mov	r5,r3
    7e14:	000d883a 	mov	r6,zero
    7e18:	000f883a 	mov	r7,zero
    7e1c:	1027883a 	mov	r19,r2
    7e20:	182b883a 	mov	r21,r3
    7e24:	b825883a 	mov	r18,r23
    7e28:	00111840 	call	11184 <__eqdf2>
    7e2c:	10022626 	beq	r2,zero,86c8 <_dtoa_r+0x1130>
    7e30:	880d883a 	mov	r6,r17
    7e34:	a00f883a 	mov	r7,r20
    7e38:	9809883a 	mov	r4,r19
    7e3c:	a80b883a 	mov	r5,r21
    7e40:	00108b80 	call	108b8 <__divdf3>
    7e44:	180b883a 	mov	r5,r3
    7e48:	1009883a 	mov	r4,r2
    7e4c:	00123bc0 	call	123bc <__fixdfsi>
    7e50:	1009883a 	mov	r4,r2
    7e54:	1021883a 	mov	r16,r2
    7e58:	00124440 	call	12444 <__floatsidf>
    7e5c:	1009883a 	mov	r4,r2
    7e60:	180b883a 	mov	r5,r3
    7e64:	880d883a 	mov	r6,r17
    7e68:	a00f883a 	mov	r7,r20
    7e6c:	00113c80 	call	113c8 <__muldf3>
    7e70:	9809883a 	mov	r4,r19
    7e74:	a80b883a 	mov	r5,r21
    7e78:	100d883a 	mov	r6,r2
    7e7c:	180f883a 	mov	r7,r3
    7e80:	0011aec0 	call	11aec <__subdf3>
    7e84:	82000c04 	addi	r8,r16,48
    7e88:	92000005 	stb	r8,0(r18)
    7e8c:	1009883a 	mov	r4,r2
    7e90:	180b883a 	mov	r5,r3
    7e94:	000d883a 	mov	r6,zero
    7e98:	01d00934 	movhi	r7,16420
    7e9c:	1011883a 	mov	r8,r2
    7ea0:	bdc00044 	addi	r23,r23,1
    7ea4:	95bfd81e 	bne	r18,r22,7e08 <__alt_mem_Flash_flash_data+0xf4007e08>
    7ea8:	802d883a 	mov	r22,r16
    7eac:	dc000317 	ldw	r16,12(sp)
    7eb0:	4009883a 	mov	r4,r8
    7eb4:	180b883a 	mov	r5,r3
    7eb8:	400d883a 	mov	r6,r8
    7ebc:	180f883a 	mov	r7,r3
    7ec0:	001001c0 	call	1001c <__adddf3>
    7ec4:	8809883a 	mov	r4,r17
    7ec8:	a00b883a 	mov	r5,r20
    7ecc:	100d883a 	mov	r6,r2
    7ed0:	180f883a 	mov	r7,r3
    7ed4:	1027883a 	mov	r19,r2
    7ed8:	1825883a 	mov	r18,r3
    7edc:	00112e80 	call	112e8 <__ledf2>
    7ee0:	10000816 	blt	r2,zero,7f04 <_dtoa_r+0x96c>
    7ee4:	8809883a 	mov	r4,r17
    7ee8:	a00b883a 	mov	r5,r20
    7eec:	980d883a 	mov	r6,r19
    7ef0:	900f883a 	mov	r7,r18
    7ef4:	00111840 	call	11184 <__eqdf2>
    7ef8:	103f551e 	bne	r2,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    7efc:	b580004c 	andi	r22,r22,1
    7f00:	b03f5326 	beq	r22,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    7f04:	bd7fffc3 	ldbu	r21,-1(r23)
    7f08:	b8bfffc4 	addi	r2,r23,-1
    7f0c:	1007883a 	mov	r3,r2
    7f10:	01400e44 	movi	r5,57
    7f14:	d9800717 	ldw	r6,28(sp)
    7f18:	00000506 	br	7f30 <_dtoa_r+0x998>
    7f1c:	18ffffc4 	addi	r3,r3,-1
    7f20:	30825e26 	beq	r6,r2,889c <_dtoa_r+0x1304>
    7f24:	1d400003 	ldbu	r21,0(r3)
    7f28:	102f883a 	mov	r23,r2
    7f2c:	10bfffc4 	addi	r2,r2,-1
    7f30:	a9003fcc 	andi	r4,r21,255
    7f34:	2100201c 	xori	r4,r4,128
    7f38:	213fe004 	addi	r4,r4,-128
    7f3c:	217ff726 	beq	r4,r5,7f1c <__alt_mem_Flash_flash_data+0xf4007f1c>
    7f40:	aa000044 	addi	r8,r21,1
    7f44:	12000005 	stb	r8,0(r2)
    7f48:	003f4106 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    7f4c:	d8c00b17 	ldw	r3,44(sp)
    7f50:	18006726 	beq	r3,zero,80f0 <_dtoa_r+0xb58>
    7f54:	d9000317 	ldw	r4,12(sp)
    7f58:	00c00044 	movi	r3,1
    7f5c:	19016a0e 	bge	r3,r4,8508 <_dtoa_r+0xf70>
    7f60:	d8800617 	ldw	r2,24(sp)
    7f64:	d8c00917 	ldw	r3,36(sp)
    7f68:	157fffc4 	addi	r21,r2,-1
    7f6c:	1d420716 	blt	r3,r21,878c <_dtoa_r+0x11f4>
    7f70:	1d6bc83a 	sub	r21,r3,r21
    7f74:	d8800617 	ldw	r2,24(sp)
    7f78:	1002c716 	blt	r2,zero,8a98 <_dtoa_r+0x1500>
    7f7c:	dd000817 	ldw	r20,32(sp)
    7f80:	d8800617 	ldw	r2,24(sp)
    7f84:	d9800817 	ldw	r6,32(sp)
    7f88:	8009883a 	mov	r4,r16
    7f8c:	01400044 	movi	r5,1
    7f90:	308d883a 	add	r6,r6,r2
    7f94:	d9800815 	stw	r6,32(sp)
    7f98:	b0ad883a 	add	r22,r22,r2
    7f9c:	000b03c0 	call	b03c <__i2b>
    7fa0:	1023883a 	mov	r17,r2
    7fa4:	a0000826 	beq	r20,zero,7fc8 <_dtoa_r+0xa30>
    7fa8:	0580070e 	bge	zero,r22,7fc8 <_dtoa_r+0xa30>
    7fac:	b005883a 	mov	r2,r22
    7fb0:	a5812016 	blt	r20,r22,8434 <_dtoa_r+0xe9c>
    7fb4:	d8c00817 	ldw	r3,32(sp)
    7fb8:	a0a9c83a 	sub	r20,r20,r2
    7fbc:	b0adc83a 	sub	r22,r22,r2
    7fc0:	1887c83a 	sub	r3,r3,r2
    7fc4:	d8c00815 	stw	r3,32(sp)
    7fc8:	d9000917 	ldw	r4,36(sp)
    7fcc:	0100140e 	bge	zero,r4,8020 <_dtoa_r+0xa88>
    7fd0:	d9800b17 	ldw	r6,44(sp)
    7fd4:	3001e526 	beq	r6,zero,876c <_dtoa_r+0x11d4>
    7fd8:	05400e0e 	bge	zero,r21,8014 <_dtoa_r+0xa7c>
    7fdc:	880b883a 	mov	r5,r17
    7fe0:	8009883a 	mov	r4,r16
    7fe4:	a80d883a 	mov	r6,r21
    7fe8:	000b2740 	call	b274 <__pow5mult>
    7fec:	e00d883a 	mov	r6,fp
    7ff0:	8009883a 	mov	r4,r16
    7ff4:	100b883a 	mov	r5,r2
    7ff8:	1023883a 	mov	r17,r2
    7ffc:	000b0780 	call	b078 <__multiply>
    8000:	102f883a 	mov	r23,r2
    8004:	e00b883a 	mov	r5,fp
    8008:	8009883a 	mov	r4,r16
    800c:	000acd80 	call	acd8 <_Bfree>
    8010:	b839883a 	mov	fp,r23
    8014:	d8800917 	ldw	r2,36(sp)
    8018:	154dc83a 	sub	r6,r2,r21
    801c:	3001281e 	bne	r6,zero,84c0 <_dtoa_r+0xf28>
    8020:	05c00044 	movi	r23,1
    8024:	8009883a 	mov	r4,r16
    8028:	b80b883a 	mov	r5,r23
    802c:	000b03c0 	call	b03c <__i2b>
    8030:	d8c00a17 	ldw	r3,40(sp)
    8034:	102b883a 	mov	r21,r2
    8038:	00c0310e 	bge	zero,r3,8100 <_dtoa_r+0xb68>
    803c:	8009883a 	mov	r4,r16
    8040:	100b883a 	mov	r5,r2
    8044:	180d883a 	mov	r6,r3
    8048:	000b2740 	call	b274 <__pow5mult>
    804c:	d9000317 	ldw	r4,12(sp)
    8050:	102b883a 	mov	r21,r2
    8054:	b9011f0e 	bge	r23,r4,84d4 <_dtoa_r+0xf3c>
    8058:	0027883a 	mov	r19,zero
    805c:	a8800417 	ldw	r2,16(r21)
    8060:	10800104 	addi	r2,r2,4
    8064:	1085883a 	add	r2,r2,r2
    8068:	1085883a 	add	r2,r2,r2
    806c:	a885883a 	add	r2,r21,r2
    8070:	11000017 	ldw	r4,0(r2)
    8074:	000af240 	call	af24 <__hi0bits>
    8078:	00c00804 	movi	r3,32
    807c:	1885c83a 	sub	r2,r3,r2
    8080:	00002506 	br	8118 <_dtoa_r+0xb80>
    8084:	01800044 	movi	r6,1
    8088:	d9800d15 	stw	r6,52(sp)
    808c:	003dec06 	br	7840 <__alt_mem_Flash_flash_data+0xf4007840>
    8090:	d8c00817 	ldw	r3,32(sp)
    8094:	d9000517 	ldw	r4,20(sp)
    8098:	d8000a15 	stw	zero,40(sp)
    809c:	1907c83a 	sub	r3,r3,r4
    80a0:	010dc83a 	sub	r6,zero,r4
    80a4:	d8c00815 	stw	r3,32(sp)
    80a8:	d9800915 	stw	r6,36(sp)
    80ac:	003ded06 	br	7864 <__alt_mem_Flash_flash_data+0xf4007864>
    80b0:	05adc83a 	sub	r22,zero,r22
    80b4:	dd800815 	stw	r22,32(sp)
    80b8:	002d883a 	mov	r22,zero
    80bc:	003de406 	br	7850 <__alt_mem_Flash_flash_data+0xf4007850>
    80c0:	d9000517 	ldw	r4,20(sp)
    80c4:	00124440 	call	12444 <__floatsidf>
    80c8:	1009883a 	mov	r4,r2
    80cc:	180b883a 	mov	r5,r3
    80d0:	b00d883a 	mov	r6,r22
    80d4:	a80f883a 	mov	r7,r21
    80d8:	00111840 	call	11184 <__eqdf2>
    80dc:	103dc726 	beq	r2,zero,77fc <__alt_mem_Flash_flash_data+0xf40077fc>
    80e0:	d8800517 	ldw	r2,20(sp)
    80e4:	10bfffc4 	addi	r2,r2,-1
    80e8:	d8800515 	stw	r2,20(sp)
    80ec:	003dc306 	br	77fc <__alt_mem_Flash_flash_data+0xf40077fc>
    80f0:	dd400917 	ldw	r21,36(sp)
    80f4:	dd000817 	ldw	r20,32(sp)
    80f8:	0023883a 	mov	r17,zero
    80fc:	003fa906 	br	7fa4 <__alt_mem_Flash_flash_data+0xf4007fa4>
    8100:	d9800317 	ldw	r6,12(sp)
    8104:	b981670e 	bge	r23,r6,86a4 <_dtoa_r+0x110c>
    8108:	0027883a 	mov	r19,zero
    810c:	d8c00a17 	ldw	r3,40(sp)
    8110:	183fd21e 	bne	r3,zero,805c <__alt_mem_Flash_flash_data+0xf400805c>
    8114:	00800044 	movi	r2,1
    8118:	1585883a 	add	r2,r2,r22
    811c:	108007cc 	andi	r2,r2,31
    8120:	10005f26 	beq	r2,zero,82a0 <_dtoa_r+0xd08>
    8124:	00c00804 	movi	r3,32
    8128:	1887c83a 	sub	r3,r3,r2
    812c:	01000104 	movi	r4,4
    8130:	20c2dd0e 	bge	r4,r3,8ca8 <_dtoa_r+0x1710>
    8134:	d9000817 	ldw	r4,32(sp)
    8138:	00c00704 	movi	r3,28
    813c:	1885c83a 	sub	r2,r3,r2
    8140:	2089883a 	add	r4,r4,r2
    8144:	d9000815 	stw	r4,32(sp)
    8148:	a0a9883a 	add	r20,r20,r2
    814c:	b0ad883a 	add	r22,r22,r2
    8150:	d8800817 	ldw	r2,32(sp)
    8154:	0080050e 	bge	zero,r2,816c <_dtoa_r+0xbd4>
    8158:	e00b883a 	mov	r5,fp
    815c:	8009883a 	mov	r4,r16
    8160:	100d883a 	mov	r6,r2
    8164:	000b3b40 	call	b3b4 <__lshift>
    8168:	1039883a 	mov	fp,r2
    816c:	0580050e 	bge	zero,r22,8184 <_dtoa_r+0xbec>
    8170:	a80b883a 	mov	r5,r21
    8174:	8009883a 	mov	r4,r16
    8178:	b00d883a 	mov	r6,r22
    817c:	000b3b40 	call	b3b4 <__lshift>
    8180:	102b883a 	mov	r21,r2
    8184:	d8c00d17 	ldw	r3,52(sp)
    8188:	1801161e 	bne	r3,zero,85e4 <_dtoa_r+0x104c>
    818c:	d8c00617 	ldw	r3,24(sp)
    8190:	00c12d0e 	bge	zero,r3,8648 <_dtoa_r+0x10b0>
    8194:	d8c00b17 	ldw	r3,44(sp)
    8198:	1800571e 	bne	r3,zero,82f8 <_dtoa_r+0xd60>
    819c:	dc800717 	ldw	r18,28(sp)
    81a0:	dcc00617 	ldw	r19,24(sp)
    81a4:	9029883a 	mov	r20,r18
    81a8:	00000206 	br	81b4 <_dtoa_r+0xc1c>
    81ac:	000ad000 	call	ad00 <__multadd>
    81b0:	1039883a 	mov	fp,r2
    81b4:	e009883a 	mov	r4,fp
    81b8:	a80b883a 	mov	r5,r21
    81bc:	00073980 	call	7398 <quorem>
    81c0:	10800c04 	addi	r2,r2,48
    81c4:	90800005 	stb	r2,0(r18)
    81c8:	94800044 	addi	r18,r18,1
    81cc:	9507c83a 	sub	r3,r18,r20
    81d0:	8009883a 	mov	r4,r16
    81d4:	e00b883a 	mov	r5,fp
    81d8:	01800284 	movi	r6,10
    81dc:	000f883a 	mov	r7,zero
    81e0:	1cfff216 	blt	r3,r19,81ac <__alt_mem_Flash_flash_data+0xf40081ac>
    81e4:	1011883a 	mov	r8,r2
    81e8:	d8800617 	ldw	r2,24(sp)
    81ec:	00822e0e 	bge	zero,r2,8aa8 <_dtoa_r+0x1510>
    81f0:	d9000717 	ldw	r4,28(sp)
    81f4:	0025883a 	mov	r18,zero
    81f8:	20af883a 	add	r23,r4,r2
    81fc:	e00b883a 	mov	r5,fp
    8200:	01800044 	movi	r6,1
    8204:	8009883a 	mov	r4,r16
    8208:	da001715 	stw	r8,92(sp)
    820c:	000b3b40 	call	b3b4 <__lshift>
    8210:	1009883a 	mov	r4,r2
    8214:	a80b883a 	mov	r5,r21
    8218:	1039883a 	mov	fp,r2
    821c:	000b5040 	call	b504 <__mcmp>
    8220:	da001717 	ldw	r8,92(sp)
    8224:	00816e0e 	bge	zero,r2,87e0 <_dtoa_r+0x1248>
    8228:	b93fffc3 	ldbu	r4,-1(r23)
    822c:	b8bfffc4 	addi	r2,r23,-1
    8230:	1007883a 	mov	r3,r2
    8234:	01800e44 	movi	r6,57
    8238:	d9c00717 	ldw	r7,28(sp)
    823c:	00000506 	br	8254 <_dtoa_r+0xcbc>
    8240:	18ffffc4 	addi	r3,r3,-1
    8244:	38811926 	beq	r7,r2,86ac <_dtoa_r+0x1114>
    8248:	19000003 	ldbu	r4,0(r3)
    824c:	102f883a 	mov	r23,r2
    8250:	10bfffc4 	addi	r2,r2,-1
    8254:	21403fcc 	andi	r5,r4,255
    8258:	2940201c 	xori	r5,r5,128
    825c:	297fe004 	addi	r5,r5,-128
    8260:	29bff726 	beq	r5,r6,8240 <__alt_mem_Flash_flash_data+0xf4008240>
    8264:	21000044 	addi	r4,r4,1
    8268:	11000005 	stb	r4,0(r2)
    826c:	8009883a 	mov	r4,r16
    8270:	a80b883a 	mov	r5,r21
    8274:	000acd80 	call	acd8 <_Bfree>
    8278:	883e7526 	beq	r17,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    827c:	90000426 	beq	r18,zero,8290 <_dtoa_r+0xcf8>
    8280:	94400326 	beq	r18,r17,8290 <_dtoa_r+0xcf8>
    8284:	8009883a 	mov	r4,r16
    8288:	900b883a 	mov	r5,r18
    828c:	000acd80 	call	acd8 <_Bfree>
    8290:	8009883a 	mov	r4,r16
    8294:	880b883a 	mov	r5,r17
    8298:	000acd80 	call	acd8 <_Bfree>
    829c:	003e6c06 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    82a0:	00800704 	movi	r2,28
    82a4:	d9800817 	ldw	r6,32(sp)
    82a8:	a0a9883a 	add	r20,r20,r2
    82ac:	b0ad883a 	add	r22,r22,r2
    82b0:	308d883a 	add	r6,r6,r2
    82b4:	d9800815 	stw	r6,32(sp)
    82b8:	003fa506 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    82bc:	013efb84 	movi	r4,-1042
    82c0:	246bc83a 	sub	r21,r4,r17
    82c4:	9548983a 	sll	r4,r18,r21
    82c8:	003d1806 	br	772c <__alt_mem_Flash_flash_data+0xf400772c>
    82cc:	d8000d15 	stw	zero,52(sp)
    82d0:	003d5b06 	br	7840 <__alt_mem_Flash_flash_data+0xf4007840>
    82d4:	880b883a 	mov	r5,r17
    82d8:	8009883a 	mov	r4,r16
    82dc:	01800284 	movi	r6,10
    82e0:	000f883a 	mov	r7,zero
    82e4:	000ad000 	call	ad00 <__multadd>
    82e8:	1023883a 	mov	r17,r2
    82ec:	d8800c17 	ldw	r2,48(sp)
    82f0:	0082550e 	bge	zero,r2,8c48 <_dtoa_r+0x16b0>
    82f4:	d8800615 	stw	r2,24(sp)
    82f8:	0500050e 	bge	zero,r20,8310 <_dtoa_r+0xd78>
    82fc:	880b883a 	mov	r5,r17
    8300:	8009883a 	mov	r4,r16
    8304:	a00d883a 	mov	r6,r20
    8308:	000b3b40 	call	b3b4 <__lshift>
    830c:	1023883a 	mov	r17,r2
    8310:	98016a1e 	bne	r19,zero,88bc <_dtoa_r+0x1324>
    8314:	8829883a 	mov	r20,r17
    8318:	d9000617 	ldw	r4,24(sp)
    831c:	dcc00717 	ldw	r19,28(sp)
    8320:	9480004c 	andi	r18,r18,1
    8324:	20bfffc4 	addi	r2,r4,-1
    8328:	9885883a 	add	r2,r19,r2
    832c:	d8800415 	stw	r2,16(sp)
    8330:	dc800615 	stw	r18,24(sp)
    8334:	e009883a 	mov	r4,fp
    8338:	a80b883a 	mov	r5,r21
    833c:	00073980 	call	7398 <quorem>
    8340:	e009883a 	mov	r4,fp
    8344:	880b883a 	mov	r5,r17
    8348:	102f883a 	mov	r23,r2
    834c:	000b5040 	call	b504 <__mcmp>
    8350:	8009883a 	mov	r4,r16
    8354:	a80b883a 	mov	r5,r21
    8358:	a00d883a 	mov	r6,r20
    835c:	102d883a 	mov	r22,r2
    8360:	000b5640 	call	b564 <__mdiff>
    8364:	1007883a 	mov	r3,r2
    8368:	10800317 	ldw	r2,12(r2)
    836c:	bc800c04 	addi	r18,r23,48
    8370:	1000971e 	bne	r2,zero,85d0 <_dtoa_r+0x1038>
    8374:	180b883a 	mov	r5,r3
    8378:	e009883a 	mov	r4,fp
    837c:	d8c01515 	stw	r3,84(sp)
    8380:	000b5040 	call	b504 <__mcmp>
    8384:	d8c01517 	ldw	r3,84(sp)
    8388:	8009883a 	mov	r4,r16
    838c:	d8801515 	stw	r2,84(sp)
    8390:	180b883a 	mov	r5,r3
    8394:	000acd80 	call	acd8 <_Bfree>
    8398:	d8801517 	ldw	r2,84(sp)
    839c:	1000041e 	bne	r2,zero,83b0 <_dtoa_r+0xe18>
    83a0:	d9800317 	ldw	r6,12(sp)
    83a4:	3000021e 	bne	r6,zero,83b0 <_dtoa_r+0xe18>
    83a8:	d8c00617 	ldw	r3,24(sp)
    83ac:	18007626 	beq	r3,zero,8588 <_dtoa_r+0xff0>
    83b0:	b0005b16 	blt	r22,zero,8520 <_dtoa_r+0xf88>
    83b4:	b000041e 	bne	r22,zero,83c8 <_dtoa_r+0xe30>
    83b8:	d9000317 	ldw	r4,12(sp)
    83bc:	2000021e 	bne	r4,zero,83c8 <_dtoa_r+0xe30>
    83c0:	d8c00617 	ldw	r3,24(sp)
    83c4:	18005626 	beq	r3,zero,8520 <_dtoa_r+0xf88>
    83c8:	00814d16 	blt	zero,r2,8900 <_dtoa_r+0x1368>
    83cc:	d8c00417 	ldw	r3,16(sp)
    83d0:	9d800044 	addi	r22,r19,1
    83d4:	9c800005 	stb	r18,0(r19)
    83d8:	b02f883a 	mov	r23,r22
    83dc:	98c14c26 	beq	r19,r3,8910 <_dtoa_r+0x1378>
    83e0:	e00b883a 	mov	r5,fp
    83e4:	8009883a 	mov	r4,r16
    83e8:	01800284 	movi	r6,10
    83ec:	000f883a 	mov	r7,zero
    83f0:	000ad000 	call	ad00 <__multadd>
    83f4:	1039883a 	mov	fp,r2
    83f8:	8d006d26 	beq	r17,r20,85b0 <_dtoa_r+0x1018>
    83fc:	880b883a 	mov	r5,r17
    8400:	01800284 	movi	r6,10
    8404:	000f883a 	mov	r7,zero
    8408:	8009883a 	mov	r4,r16
    840c:	000ad000 	call	ad00 <__multadd>
    8410:	a00b883a 	mov	r5,r20
    8414:	8009883a 	mov	r4,r16
    8418:	01800284 	movi	r6,10
    841c:	000f883a 	mov	r7,zero
    8420:	1023883a 	mov	r17,r2
    8424:	000ad000 	call	ad00 <__multadd>
    8428:	1029883a 	mov	r20,r2
    842c:	b027883a 	mov	r19,r22
    8430:	003fc006 	br	8334 <__alt_mem_Flash_flash_data+0xf4008334>
    8434:	a005883a 	mov	r2,r20
    8438:	003ede06 	br	7fb4 <__alt_mem_Flash_flash_data+0xf4007fb4>
    843c:	01000044 	movi	r4,1
    8440:	d9000b15 	stw	r4,44(sp)
    8444:	d9802217 	ldw	r6,136(sp)
    8448:	0180dc0e 	bge	zero,r6,87bc <_dtoa_r+0x1224>
    844c:	3023883a 	mov	r17,r6
    8450:	d9800c15 	stw	r6,48(sp)
    8454:	d9800615 	stw	r6,24(sp)
    8458:	003d1e06 	br	78d4 <__alt_mem_Flash_flash_data+0xf40078d4>
    845c:	d8800617 	ldw	r2,24(sp)
    8460:	00be3716 	blt	zero,r2,7d40 <__alt_mem_Flash_flash_data+0xf4007d40>
    8464:	1000be1e 	bne	r2,zero,8760 <_dtoa_r+0x11c8>
    8468:	8809883a 	mov	r4,r17
    846c:	a00b883a 	mov	r5,r20
    8470:	000d883a 	mov	r6,zero
    8474:	01d00534 	movhi	r7,16404
    8478:	00113c80 	call	113c8 <__muldf3>
    847c:	1009883a 	mov	r4,r2
    8480:	180b883a 	mov	r5,r3
    8484:	900d883a 	mov	r6,r18
    8488:	980f883a 	mov	r7,r19
    848c:	00112080 	call	11208 <__gedf2>
    8490:	002b883a 	mov	r21,zero
    8494:	0023883a 	mov	r17,zero
    8498:	10007a16 	blt	r2,zero,8684 <_dtoa_r+0x10ec>
    849c:	d9002217 	ldw	r4,136(sp)
    84a0:	ddc00717 	ldw	r23,28(sp)
    84a4:	0108303a 	nor	r4,zero,r4
    84a8:	d9000515 	stw	r4,20(sp)
    84ac:	8009883a 	mov	r4,r16
    84b0:	a80b883a 	mov	r5,r21
    84b4:	000acd80 	call	acd8 <_Bfree>
    84b8:	883f751e 	bne	r17,zero,8290 <__alt_mem_Flash_flash_data+0xf4008290>
    84bc:	003de406 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    84c0:	e00b883a 	mov	r5,fp
    84c4:	8009883a 	mov	r4,r16
    84c8:	000b2740 	call	b274 <__pow5mult>
    84cc:	1039883a 	mov	fp,r2
    84d0:	003ed306 	br	8020 <__alt_mem_Flash_flash_data+0xf4008020>
    84d4:	903ee01e 	bne	r18,zero,8058 <__alt_mem_Flash_flash_data+0xf4008058>
    84d8:	00800434 	movhi	r2,16
    84dc:	10bfffc4 	addi	r2,r2,-1
    84e0:	9884703a 	and	r2,r19,r2
    84e4:	103f081e 	bne	r2,zero,8108 <__alt_mem_Flash_flash_data+0xf4008108>
    84e8:	9cdffc2c 	andhi	r19,r19,32752
    84ec:	983f0626 	beq	r19,zero,8108 <__alt_mem_Flash_flash_data+0xf4008108>
    84f0:	d8800817 	ldw	r2,32(sp)
    84f4:	b5800044 	addi	r22,r22,1
    84f8:	04c00044 	movi	r19,1
    84fc:	10800044 	addi	r2,r2,1
    8500:	d8800815 	stw	r2,32(sp)
    8504:	003f0106 	br	810c <__alt_mem_Flash_flash_data+0xf400810c>
    8508:	d9800f17 	ldw	r6,60(sp)
    850c:	30016826 	beq	r6,zero,8ab0 <_dtoa_r+0x1518>
    8510:	10810cc4 	addi	r2,r2,1075
    8514:	dd400917 	ldw	r21,36(sp)
    8518:	dd000817 	ldw	r20,32(sp)
    851c:	003e9906 	br	7f84 <__alt_mem_Flash_flash_data+0xf4007f84>
    8520:	9011883a 	mov	r8,r18
    8524:	4007883a 	mov	r3,r8
    8528:	e02d883a 	mov	r22,fp
    852c:	0080100e 	bge	zero,r2,8570 <_dtoa_r+0xfd8>
    8530:	01800044 	movi	r6,1
    8534:	8009883a 	mov	r4,r16
    8538:	e00b883a 	mov	r5,fp
    853c:	da001515 	stw	r8,84(sp)
    8540:	da001715 	stw	r8,92(sp)
    8544:	000b3b40 	call	b3b4 <__lshift>
    8548:	1009883a 	mov	r4,r2
    854c:	a80b883a 	mov	r5,r21
    8550:	102d883a 	mov	r22,r2
    8554:	000b5040 	call	b504 <__mcmp>
    8558:	d8c01517 	ldw	r3,84(sp)
    855c:	da001717 	ldw	r8,92(sp)
    8560:	0081a50e 	bge	zero,r2,8bf8 <_dtoa_r+0x1660>
    8564:	00800e44 	movi	r2,57
    8568:	40817b26 	beq	r8,r2,8b58 <_dtoa_r+0x15c0>
    856c:	40c00044 	addi	r3,r8,1
    8570:	8825883a 	mov	r18,r17
    8574:	9dc00044 	addi	r23,r19,1
    8578:	98c00005 	stb	r3,0(r19)
    857c:	a023883a 	mov	r17,r20
    8580:	b039883a 	mov	fp,r22
    8584:	003f3906 	br	826c <__alt_mem_Flash_flash_data+0xf400826c>
    8588:	00800e44 	movi	r2,57
    858c:	9011883a 	mov	r8,r18
    8590:	90817226 	beq	r18,r2,8b5c <_dtoa_r+0x15c4>
    8594:	0580010e 	bge	zero,r22,859c <_dtoa_r+0x1004>
    8598:	ba000c44 	addi	r8,r23,49
    859c:	8825883a 	mov	r18,r17
    85a0:	9dc00044 	addi	r23,r19,1
    85a4:	9a000005 	stb	r8,0(r19)
    85a8:	a023883a 	mov	r17,r20
    85ac:	003f2f06 	br	826c <__alt_mem_Flash_flash_data+0xf400826c>
    85b0:	880b883a 	mov	r5,r17
    85b4:	8009883a 	mov	r4,r16
    85b8:	01800284 	movi	r6,10
    85bc:	000f883a 	mov	r7,zero
    85c0:	000ad000 	call	ad00 <__multadd>
    85c4:	1023883a 	mov	r17,r2
    85c8:	1029883a 	mov	r20,r2
    85cc:	003f9706 	br	842c <__alt_mem_Flash_flash_data+0xf400842c>
    85d0:	8009883a 	mov	r4,r16
    85d4:	180b883a 	mov	r5,r3
    85d8:	000acd80 	call	acd8 <_Bfree>
    85dc:	00800044 	movi	r2,1
    85e0:	003f7306 	br	83b0 <__alt_mem_Flash_flash_data+0xf40083b0>
    85e4:	e009883a 	mov	r4,fp
    85e8:	a80b883a 	mov	r5,r21
    85ec:	000b5040 	call	b504 <__mcmp>
    85f0:	103ee60e 	bge	r2,zero,818c <__alt_mem_Flash_flash_data+0xf400818c>
    85f4:	8009883a 	mov	r4,r16
    85f8:	e00b883a 	mov	r5,fp
    85fc:	01800284 	movi	r6,10
    8600:	000f883a 	mov	r7,zero
    8604:	000ad000 	call	ad00 <__multadd>
    8608:	d9000517 	ldw	r4,20(sp)
    860c:	d9800b17 	ldw	r6,44(sp)
    8610:	1039883a 	mov	fp,r2
    8614:	213fffc4 	addi	r4,r4,-1
    8618:	d9000515 	stw	r4,20(sp)
    861c:	303f2d1e 	bne	r6,zero,82d4 <__alt_mem_Flash_flash_data+0xf40082d4>
    8620:	d9000c17 	ldw	r4,48(sp)
    8624:	0101780e 	bge	zero,r4,8c08 <_dtoa_r+0x1670>
    8628:	d9000615 	stw	r4,24(sp)
    862c:	003edb06 	br	819c <__alt_mem_Flash_flash_data+0xf400819c>
    8630:	00800084 	movi	r2,2
    8634:	30818e1e 	bne	r6,r2,8c70 <_dtoa_r+0x16d8>
    8638:	d8000b15 	stw	zero,44(sp)
    863c:	003f8106 	br	8444 <__alt_mem_Flash_flash_data+0xf4008444>
    8640:	d8800717 	ldw	r2,28(sp)
    8644:	003c0306 	br	7654 <__alt_mem_Flash_flash_data+0xf4007654>
    8648:	d9000317 	ldw	r4,12(sp)
    864c:	00800084 	movi	r2,2
    8650:	113ed00e 	bge	r2,r4,8194 <__alt_mem_Flash_flash_data+0xf4008194>
    8654:	d8c00617 	ldw	r3,24(sp)
    8658:	183f901e 	bne	r3,zero,849c <__alt_mem_Flash_flash_data+0xf400849c>
    865c:	a80b883a 	mov	r5,r21
    8660:	8009883a 	mov	r4,r16
    8664:	01800144 	movi	r6,5
    8668:	000f883a 	mov	r7,zero
    866c:	000ad000 	call	ad00 <__multadd>
    8670:	e009883a 	mov	r4,fp
    8674:	100b883a 	mov	r5,r2
    8678:	102b883a 	mov	r21,r2
    867c:	000b5040 	call	b504 <__mcmp>
    8680:	00bf860e 	bge	zero,r2,849c <__alt_mem_Flash_flash_data+0xf400849c>
    8684:	d9800717 	ldw	r6,28(sp)
    8688:	00800c44 	movi	r2,49
    868c:	30800005 	stb	r2,0(r6)
    8690:	d8800517 	ldw	r2,20(sp)
    8694:	35c00044 	addi	r23,r6,1
    8698:	10800044 	addi	r2,r2,1
    869c:	d8800515 	stw	r2,20(sp)
    86a0:	003f8206 	br	84ac <__alt_mem_Flash_flash_data+0xf40084ac>
    86a4:	903e981e 	bne	r18,zero,8108 <__alt_mem_Flash_flash_data+0xf4008108>
    86a8:	003f8b06 	br	84d8 <__alt_mem_Flash_flash_data+0xf40084d8>
    86ac:	d9800517 	ldw	r6,20(sp)
    86b0:	d8c00717 	ldw	r3,28(sp)
    86b4:	00800c44 	movi	r2,49
    86b8:	31800044 	addi	r6,r6,1
    86bc:	d9800515 	stw	r6,20(sp)
    86c0:	18800005 	stb	r2,0(r3)
    86c4:	003ee906 	br	826c <__alt_mem_Flash_flash_data+0xf400826c>
    86c8:	dc000317 	ldw	r16,12(sp)
    86cc:	003d6006 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    86d0:	8809883a 	mov	r4,r17
    86d4:	00124440 	call	12444 <__floatsidf>
    86d8:	a009883a 	mov	r4,r20
    86dc:	a80b883a 	mov	r5,r21
    86e0:	100d883a 	mov	r6,r2
    86e4:	180f883a 	mov	r7,r3
    86e8:	00113c80 	call	113c8 <__muldf3>
    86ec:	1009883a 	mov	r4,r2
    86f0:	180b883a 	mov	r5,r3
    86f4:	000d883a 	mov	r6,zero
    86f8:	01d00734 	movhi	r7,16412
    86fc:	001001c0 	call	1001c <__adddf3>
    8700:	1023883a 	mov	r17,r2
    8704:	00bf3034 	movhi	r2,64704
    8708:	1885883a 	add	r2,r3,r2
    870c:	d8800e15 	stw	r2,56(sp)
    8710:	a009883a 	mov	r4,r20
    8714:	a80b883a 	mov	r5,r21
    8718:	000d883a 	mov	r6,zero
    871c:	01d00534 	movhi	r7,16404
    8720:	0011aec0 	call	11aec <__subdf3>
    8724:	d9c00e17 	ldw	r7,56(sp)
    8728:	1009883a 	mov	r4,r2
    872c:	180b883a 	mov	r5,r3
    8730:	880d883a 	mov	r6,r17
    8734:	102b883a 	mov	r21,r2
    8738:	1829883a 	mov	r20,r3
    873c:	00112080 	call	11208 <__gedf2>
    8740:	00807716 	blt	zero,r2,8920 <_dtoa_r+0x1388>
    8744:	d8800e17 	ldw	r2,56(sp)
    8748:	a809883a 	mov	r4,r21
    874c:	a00b883a 	mov	r5,r20
    8750:	11e0003c 	xorhi	r7,r2,32768
    8754:	880d883a 	mov	r6,r17
    8758:	00112e80 	call	112e8 <__ledf2>
    875c:	103d6b0e 	bge	r2,zero,7d0c <__alt_mem_Flash_flash_data+0xf4007d0c>
    8760:	002b883a 	mov	r21,zero
    8764:	0023883a 	mov	r17,zero
    8768:	003f4c06 	br	849c <__alt_mem_Flash_flash_data+0xf400849c>
    876c:	d9800917 	ldw	r6,36(sp)
    8770:	e00b883a 	mov	r5,fp
    8774:	8009883a 	mov	r4,r16
    8778:	000b2740 	call	b274 <__pow5mult>
    877c:	1039883a 	mov	fp,r2
    8780:	003e2706 	br	8020 <__alt_mem_Flash_flash_data+0xf4008020>
    8784:	d8000b15 	stw	zero,44(sp)
    8788:	003c4906 	br	78b0 <__alt_mem_Flash_flash_data+0xf40078b0>
    878c:	d9000917 	ldw	r4,36(sp)
    8790:	d9800a17 	ldw	r6,40(sp)
    8794:	dd400915 	stw	r21,36(sp)
    8798:	a905c83a 	sub	r2,r21,r4
    879c:	308d883a 	add	r6,r6,r2
    87a0:	d9800a15 	stw	r6,40(sp)
    87a4:	002b883a 	mov	r21,zero
    87a8:	003df206 	br	7f74 <__alt_mem_Flash_flash_data+0xf4007f74>
    87ac:	dc800e15 	stw	r18,56(sp)
    87b0:	982b883a 	mov	r21,r19
    87b4:	04400084 	movi	r17,2
    87b8:	003c7406 	br	798c <__alt_mem_Flash_flash_data+0xf400798c>
    87bc:	04400044 	movi	r17,1
    87c0:	dc400c15 	stw	r17,48(sp)
    87c4:	dc400615 	stw	r17,24(sp)
    87c8:	dc402215 	stw	r17,136(sp)
    87cc:	80001115 	stw	zero,68(r16)
    87d0:	000b883a 	mov	r5,zero
    87d4:	003c4a06 	br	7900 <__alt_mem_Flash_flash_data+0xf4007900>
    87d8:	3023883a 	mov	r17,r6
    87dc:	003ffb06 	br	87cc <__alt_mem_Flash_flash_data+0xf40087cc>
    87e0:	1000021e 	bne	r2,zero,87ec <_dtoa_r+0x1254>
    87e4:	4200004c 	andi	r8,r8,1
    87e8:	403e8f1e 	bne	r8,zero,8228 <__alt_mem_Flash_flash_data+0xf4008228>
    87ec:	01000c04 	movi	r4,48
    87f0:	00000106 	br	87f8 <_dtoa_r+0x1260>
    87f4:	102f883a 	mov	r23,r2
    87f8:	b8bfffc4 	addi	r2,r23,-1
    87fc:	10c00007 	ldb	r3,0(r2)
    8800:	193ffc26 	beq	r3,r4,87f4 <__alt_mem_Flash_flash_data+0xf40087f4>
    8804:	003e9906 	br	826c <__alt_mem_Flash_flash_data+0xf400826c>
    8808:	d9000517 	ldw	r4,20(sp)
    880c:	012fc83a 	sub	r23,zero,r4
    8810:	b800ad26 	beq	r23,zero,8ac8 <_dtoa_r+0x1530>
    8814:	b88003cc 	andi	r2,r23,15
    8818:	100490fa 	slli	r2,r2,3
    881c:	00c000b4 	movhi	r3,2
    8820:	18ffbc04 	addi	r3,r3,-272
    8824:	1885883a 	add	r2,r3,r2
    8828:	11800017 	ldw	r6,0(r2)
    882c:	11c00117 	ldw	r7,4(r2)
    8830:	b82fd13a 	srai	r23,r23,4
    8834:	9009883a 	mov	r4,r18
    8838:	980b883a 	mov	r5,r19
    883c:	00113c80 	call	113c8 <__muldf3>
    8840:	1029883a 	mov	r20,r2
    8844:	182b883a 	mov	r21,r3
    8848:	b800f426 	beq	r23,zero,8c1c <_dtoa_r+0x1684>
    884c:	020000b4 	movhi	r8,2
    8850:	423fb204 	addi	r8,r8,-312
    8854:	8029883a 	mov	r20,r16
    8858:	04400084 	movi	r17,2
    885c:	4021883a 	mov	r16,r8
    8860:	b980004c 	andi	r6,r23,1
    8864:	1009883a 	mov	r4,r2
    8868:	b82fd07a 	srai	r23,r23,1
    886c:	180b883a 	mov	r5,r3
    8870:	30000426 	beq	r6,zero,8884 <_dtoa_r+0x12ec>
    8874:	81800017 	ldw	r6,0(r16)
    8878:	81c00117 	ldw	r7,4(r16)
    887c:	8c400044 	addi	r17,r17,1
    8880:	00113c80 	call	113c8 <__muldf3>
    8884:	84000204 	addi	r16,r16,8
    8888:	b83ff51e 	bne	r23,zero,8860 <__alt_mem_Flash_flash_data+0xf4008860>
    888c:	a021883a 	mov	r16,r20
    8890:	182b883a 	mov	r21,r3
    8894:	1029883a 	mov	r20,r2
    8898:	003c5506 	br	79f0 <__alt_mem_Flash_flash_data+0xf40079f0>
    889c:	d9800517 	ldw	r6,20(sp)
    88a0:	d9000717 	ldw	r4,28(sp)
    88a4:	00c00c04 	movi	r3,48
    88a8:	31800044 	addi	r6,r6,1
    88ac:	d9800515 	stw	r6,20(sp)
    88b0:	20c00005 	stb	r3,0(r4)
    88b4:	02000c44 	movi	r8,49
    88b8:	003da206 	br	7f44 <__alt_mem_Flash_flash_data+0xf4007f44>
    88bc:	89400117 	ldw	r5,4(r17)
    88c0:	8009883a 	mov	r4,r16
    88c4:	000ac300 	call	ac30 <_Balloc>
    88c8:	89800417 	ldw	r6,16(r17)
    88cc:	11000304 	addi	r4,r2,12
    88d0:	89400304 	addi	r5,r17,12
    88d4:	31800084 	addi	r6,r6,2
    88d8:	318d883a 	add	r6,r6,r6
    88dc:	318d883a 	add	r6,r6,r6
    88e0:	1027883a 	mov	r19,r2
    88e4:	000a8780 	call	a878 <memcpy>
    88e8:	8009883a 	mov	r4,r16
    88ec:	980b883a 	mov	r5,r19
    88f0:	01800044 	movi	r6,1
    88f4:	000b3b40 	call	b3b4 <__lshift>
    88f8:	1029883a 	mov	r20,r2
    88fc:	003e8606 	br	8318 <__alt_mem_Flash_flash_data+0xf4008318>
    8900:	00800e44 	movi	r2,57
    8904:	90809526 	beq	r18,r2,8b5c <_dtoa_r+0x15c4>
    8908:	92000044 	addi	r8,r18,1
    890c:	003f2306 	br	859c <__alt_mem_Flash_flash_data+0xf400859c>
    8910:	9011883a 	mov	r8,r18
    8914:	8825883a 	mov	r18,r17
    8918:	a023883a 	mov	r17,r20
    891c:	003e3706 	br	81fc <__alt_mem_Flash_flash_data+0xf40081fc>
    8920:	002b883a 	mov	r21,zero
    8924:	0023883a 	mov	r17,zero
    8928:	003f5606 	br	8684 <__alt_mem_Flash_flash_data+0xf4008684>
    892c:	51bfffc4 	addi	r6,r10,-1
    8930:	300490fa 	slli	r2,r6,3
    8934:	00c000b4 	movhi	r3,2
    8938:	18ffbc04 	addi	r3,r3,-272
    893c:	1885883a 	add	r2,r3,r2
    8940:	d9c00e17 	ldw	r7,56(sp)
    8944:	11000017 	ldw	r4,0(r2)
    8948:	11400117 	ldw	r5,4(r2)
    894c:	d8800717 	ldw	r2,28(sp)
    8950:	d9801015 	stw	r6,64(sp)
    8954:	880d883a 	mov	r6,r17
    8958:	da801615 	stw	r10,88(sp)
    895c:	15c00044 	addi	r23,r2,1
    8960:	00113c80 	call	113c8 <__muldf3>
    8964:	a80b883a 	mov	r5,r21
    8968:	a009883a 	mov	r4,r20
    896c:	d8c01115 	stw	r3,68(sp)
    8970:	d8800e15 	stw	r2,56(sp)
    8974:	00123bc0 	call	123bc <__fixdfsi>
    8978:	1009883a 	mov	r4,r2
    897c:	1023883a 	mov	r17,r2
    8980:	00124440 	call	12444 <__floatsidf>
    8984:	a009883a 	mov	r4,r20
    8988:	a80b883a 	mov	r5,r21
    898c:	100d883a 	mov	r6,r2
    8990:	180f883a 	mov	r7,r3
    8994:	0011aec0 	call	11aec <__subdf3>
    8998:	1813883a 	mov	r9,r3
    899c:	d8c00717 	ldw	r3,28(sp)
    89a0:	8c400c04 	addi	r17,r17,48
    89a4:	1011883a 	mov	r8,r2
    89a8:	1c400005 	stb	r17,0(r3)
    89ac:	da801617 	ldw	r10,88(sp)
    89b0:	00800044 	movi	r2,1
    89b4:	50802326 	beq	r10,r2,8a44 <_dtoa_r+0x14ac>
    89b8:	d8800717 	ldw	r2,28(sp)
    89bc:	b82b883a 	mov	r21,r23
    89c0:	dc001315 	stw	r16,76(sp)
    89c4:	12a9883a 	add	r20,r2,r10
    89c8:	4807883a 	mov	r3,r9
    89cc:	4005883a 	mov	r2,r8
    89d0:	dc801415 	stw	r18,80(sp)
    89d4:	000d883a 	mov	r6,zero
    89d8:	01d00934 	movhi	r7,16420
    89dc:	1009883a 	mov	r4,r2
    89e0:	180b883a 	mov	r5,r3
    89e4:	00113c80 	call	113c8 <__muldf3>
    89e8:	180b883a 	mov	r5,r3
    89ec:	1009883a 	mov	r4,r2
    89f0:	1821883a 	mov	r16,r3
    89f4:	1025883a 	mov	r18,r2
    89f8:	00123bc0 	call	123bc <__fixdfsi>
    89fc:	1009883a 	mov	r4,r2
    8a00:	1023883a 	mov	r17,r2
    8a04:	00124440 	call	12444 <__floatsidf>
    8a08:	9009883a 	mov	r4,r18
    8a0c:	800b883a 	mov	r5,r16
    8a10:	100d883a 	mov	r6,r2
    8a14:	180f883a 	mov	r7,r3
    8a18:	8c400c04 	addi	r17,r17,48
    8a1c:	0011aec0 	call	11aec <__subdf3>
    8a20:	ad400044 	addi	r21,r21,1
    8a24:	ac7fffc5 	stb	r17,-1(r21)
    8a28:	ad3fea1e 	bne	r21,r20,89d4 <__alt_mem_Flash_flash_data+0xf40089d4>
    8a2c:	1813883a 	mov	r9,r3
    8a30:	d8c01017 	ldw	r3,64(sp)
    8a34:	dc001317 	ldw	r16,76(sp)
    8a38:	dc801417 	ldw	r18,80(sp)
    8a3c:	1011883a 	mov	r8,r2
    8a40:	b8ef883a 	add	r23,r23,r3
    8a44:	d9000e17 	ldw	r4,56(sp)
    8a48:	d9401117 	ldw	r5,68(sp)
    8a4c:	000d883a 	mov	r6,zero
    8a50:	01cff834 	movhi	r7,16352
    8a54:	da001715 	stw	r8,92(sp)
    8a58:	da401515 	stw	r9,84(sp)
    8a5c:	001001c0 	call	1001c <__adddf3>
    8a60:	da001717 	ldw	r8,92(sp)
    8a64:	da401517 	ldw	r9,84(sp)
    8a68:	1009883a 	mov	r4,r2
    8a6c:	400d883a 	mov	r6,r8
    8a70:	480f883a 	mov	r7,r9
    8a74:	180b883a 	mov	r5,r3
    8a78:	00112e80 	call	112e8 <__ledf2>
    8a7c:	da001717 	ldw	r8,92(sp)
    8a80:	da401517 	ldw	r9,84(sp)
    8a84:	10003b0e 	bge	r2,zero,8b74 <_dtoa_r+0x15dc>
    8a88:	d9001217 	ldw	r4,72(sp)
    8a8c:	bd7fffc3 	ldbu	r21,-1(r23)
    8a90:	d9000515 	stw	r4,20(sp)
    8a94:	003d1c06 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8a98:	d8c00817 	ldw	r3,32(sp)
    8a9c:	18a9c83a 	sub	r20,r3,r2
    8aa0:	0005883a 	mov	r2,zero
    8aa4:	003d3706 	br	7f84 <__alt_mem_Flash_flash_data+0xf4007f84>
    8aa8:	00800044 	movi	r2,1
    8aac:	003dd006 	br	81f0 <__alt_mem_Flash_flash_data+0xf40081f0>
    8ab0:	d8c00217 	ldw	r3,8(sp)
    8ab4:	00800d84 	movi	r2,54
    8ab8:	dd400917 	ldw	r21,36(sp)
    8abc:	10c5c83a 	sub	r2,r2,r3
    8ac0:	dd000817 	ldw	r20,32(sp)
    8ac4:	003d2f06 	br	7f84 <__alt_mem_Flash_flash_data+0xf4007f84>
    8ac8:	9029883a 	mov	r20,r18
    8acc:	982b883a 	mov	r21,r19
    8ad0:	04400084 	movi	r17,2
    8ad4:	003bc606 	br	79f0 <__alt_mem_Flash_flash_data+0xf40079f0>
    8ad8:	d8800617 	ldw	r2,24(sp)
    8adc:	103efc26 	beq	r2,zero,86d0 <__alt_mem_Flash_flash_data+0xf40086d0>
    8ae0:	d8c00c17 	ldw	r3,48(sp)
    8ae4:	00fc890e 	bge	zero,r3,7d0c <__alt_mem_Flash_flash_data+0xf4007d0c>
    8ae8:	a80b883a 	mov	r5,r21
    8aec:	a009883a 	mov	r4,r20
    8af0:	000d883a 	mov	r6,zero
    8af4:	01d00934 	movhi	r7,16420
    8af8:	00113c80 	call	113c8 <__muldf3>
    8afc:	89000044 	addi	r4,r17,1
    8b00:	1029883a 	mov	r20,r2
    8b04:	182b883a 	mov	r21,r3
    8b08:	00124440 	call	12444 <__floatsidf>
    8b0c:	a009883a 	mov	r4,r20
    8b10:	a80b883a 	mov	r5,r21
    8b14:	100d883a 	mov	r6,r2
    8b18:	180f883a 	mov	r7,r3
    8b1c:	00113c80 	call	113c8 <__muldf3>
    8b20:	1009883a 	mov	r4,r2
    8b24:	180b883a 	mov	r5,r3
    8b28:	000d883a 	mov	r6,zero
    8b2c:	01d00734 	movhi	r7,16412
    8b30:	001001c0 	call	1001c <__adddf3>
    8b34:	d9000517 	ldw	r4,20(sp)
    8b38:	1023883a 	mov	r17,r2
    8b3c:	00bf3034 	movhi	r2,64704
    8b40:	213fffc4 	addi	r4,r4,-1
    8b44:	1885883a 	add	r2,r3,r2
    8b48:	d9001215 	stw	r4,72(sp)
    8b4c:	d8800e15 	stw	r2,56(sp)
    8b50:	da800c17 	ldw	r10,48(sp)
    8b54:	003bc306 	br	7a64 <__alt_mem_Flash_flash_data+0xf4007a64>
    8b58:	b039883a 	mov	fp,r22
    8b5c:	01000e44 	movi	r4,57
    8b60:	8825883a 	mov	r18,r17
    8b64:	9dc00044 	addi	r23,r19,1
    8b68:	99000005 	stb	r4,0(r19)
    8b6c:	a023883a 	mov	r17,r20
    8b70:	003dae06 	br	822c <__alt_mem_Flash_flash_data+0xf400822c>
    8b74:	d9800e17 	ldw	r6,56(sp)
    8b78:	d9c01117 	ldw	r7,68(sp)
    8b7c:	0009883a 	mov	r4,zero
    8b80:	014ff834 	movhi	r5,16352
    8b84:	da001715 	stw	r8,92(sp)
    8b88:	da401515 	stw	r9,84(sp)
    8b8c:	0011aec0 	call	11aec <__subdf3>
    8b90:	da001717 	ldw	r8,92(sp)
    8b94:	da401517 	ldw	r9,84(sp)
    8b98:	1009883a 	mov	r4,r2
    8b9c:	180b883a 	mov	r5,r3
    8ba0:	400d883a 	mov	r6,r8
    8ba4:	480f883a 	mov	r7,r9
    8ba8:	00112080 	call	11208 <__gedf2>
    8bac:	00bc570e 	bge	zero,r2,7d0c <__alt_mem_Flash_flash_data+0xf4007d0c>
    8bb0:	01000c04 	movi	r4,48
    8bb4:	00000106 	br	8bbc <_dtoa_r+0x1624>
    8bb8:	102f883a 	mov	r23,r2
    8bbc:	b8bfffc4 	addi	r2,r23,-1
    8bc0:	10c00007 	ldb	r3,0(r2)
    8bc4:	193ffc26 	beq	r3,r4,8bb8 <__alt_mem_Flash_flash_data+0xf4008bb8>
    8bc8:	d9801217 	ldw	r6,72(sp)
    8bcc:	d9800515 	stw	r6,20(sp)
    8bd0:	003c1f06 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    8bd4:	d8801217 	ldw	r2,72(sp)
    8bd8:	dc001117 	ldw	r16,68(sp)
    8bdc:	d8800515 	stw	r2,20(sp)
    8be0:	003cc906 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8be4:	dd801317 	ldw	r22,76(sp)
    8be8:	dc001117 	ldw	r16,68(sp)
    8bec:	dcc01417 	ldw	r19,80(sp)
    8bf0:	dc801017 	ldw	r18,64(sp)
    8bf4:	003c4506 	br	7d0c <__alt_mem_Flash_flash_data+0xf4007d0c>
    8bf8:	103e5d1e 	bne	r2,zero,8570 <__alt_mem_Flash_flash_data+0xf4008570>
    8bfc:	4080004c 	andi	r2,r8,1
    8c00:	103e5b26 	beq	r2,zero,8570 <__alt_mem_Flash_flash_data+0xf4008570>
    8c04:	003e5706 	br	8564 <__alt_mem_Flash_flash_data+0xf4008564>
    8c08:	d8c00317 	ldw	r3,12(sp)
    8c0c:	00800084 	movi	r2,2
    8c10:	10c00a16 	blt	r2,r3,8c3c <_dtoa_r+0x16a4>
    8c14:	d9000c17 	ldw	r4,48(sp)
    8c18:	003e8306 	br	8628 <__alt_mem_Flash_flash_data+0xf4008628>
    8c1c:	04400084 	movi	r17,2
    8c20:	003b7306 	br	79f0 <__alt_mem_Flash_flash_data+0xf40079f0>
    8c24:	d9801217 	ldw	r6,72(sp)
    8c28:	d9800515 	stw	r6,20(sp)
    8c2c:	003cb606 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    8c30:	d9001217 	ldw	r4,72(sp)
    8c34:	d9000515 	stw	r4,20(sp)
    8c38:	003c0506 	br	7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    8c3c:	d9800c17 	ldw	r6,48(sp)
    8c40:	d9800615 	stw	r6,24(sp)
    8c44:	003e8306 	br	8654 <__alt_mem_Flash_flash_data+0xf4008654>
    8c48:	d9800317 	ldw	r6,12(sp)
    8c4c:	00800084 	movi	r2,2
    8c50:	11800216 	blt	r2,r6,8c5c <_dtoa_r+0x16c4>
    8c54:	d8800c17 	ldw	r2,48(sp)
    8c58:	003da606 	br	82f4 <__alt_mem_Flash_flash_data+0xf40082f4>
    8c5c:	d8800c17 	ldw	r2,48(sp)
    8c60:	d8800615 	stw	r2,24(sp)
    8c64:	003e7b06 	br	8654 <__alt_mem_Flash_flash_data+0xf4008654>
    8c68:	05000044 	movi	r20,1
    8c6c:	003b0506 	br	7884 <__alt_mem_Flash_flash_data+0xf4007884>
    8c70:	8009883a 	mov	r4,r16
    8c74:	80001115 	stw	zero,68(r16)
    8c78:	000b883a 	mov	r5,zero
    8c7c:	000ac300 	call	ac30 <_Balloc>
    8c80:	d8800715 	stw	r2,28(sp)
    8c84:	d8c00717 	ldw	r3,28(sp)
    8c88:	00bfffc4 	movi	r2,-1
    8c8c:	01000044 	movi	r4,1
    8c90:	d8800c15 	stw	r2,48(sp)
    8c94:	80c01015 	stw	r3,64(r16)
    8c98:	d9000b15 	stw	r4,44(sp)
    8c9c:	d8800615 	stw	r2,24(sp)
    8ca0:	d8002215 	stw	zero,136(sp)
    8ca4:	003c1906 	br	7d0c <__alt_mem_Flash_flash_data+0xf4007d0c>
    8ca8:	193d2926 	beq	r3,r4,8150 <__alt_mem_Flash_flash_data+0xf4008150>
    8cac:	00c00f04 	movi	r3,60
    8cb0:	1885c83a 	sub	r2,r3,r2
    8cb4:	003d7b06 	br	82a4 <__alt_mem_Flash_flash_data+0xf40082a4>
    8cb8:	000b883a 	mov	r5,zero
    8cbc:	003b1006 	br	7900 <__alt_mem_Flash_flash_data+0xf4007900>

00008cc0 <__sflush_r>:
    8cc0:	2880030b 	ldhu	r2,12(r5)
    8cc4:	defffb04 	addi	sp,sp,-20
    8cc8:	dcc00315 	stw	r19,12(sp)
    8ccc:	dc400115 	stw	r17,4(sp)
    8cd0:	dfc00415 	stw	ra,16(sp)
    8cd4:	dc800215 	stw	r18,8(sp)
    8cd8:	dc000015 	stw	r16,0(sp)
    8cdc:	10c0020c 	andi	r3,r2,8
    8ce0:	2823883a 	mov	r17,r5
    8ce4:	2027883a 	mov	r19,r4
    8ce8:	1800311e 	bne	r3,zero,8db0 <__sflush_r+0xf0>
    8cec:	28c00117 	ldw	r3,4(r5)
    8cf0:	10820014 	ori	r2,r2,2048
    8cf4:	2880030d 	sth	r2,12(r5)
    8cf8:	00c04b0e 	bge	zero,r3,8e28 <__sflush_r+0x168>
    8cfc:	8a000a17 	ldw	r8,40(r17)
    8d00:	40002326 	beq	r8,zero,8d90 <__sflush_r+0xd0>
    8d04:	9c000017 	ldw	r16,0(r19)
    8d08:	10c4000c 	andi	r3,r2,4096
    8d0c:	98000015 	stw	zero,0(r19)
    8d10:	18004826 	beq	r3,zero,8e34 <__sflush_r+0x174>
    8d14:	89801417 	ldw	r6,80(r17)
    8d18:	10c0010c 	andi	r3,r2,4
    8d1c:	18000626 	beq	r3,zero,8d38 <__sflush_r+0x78>
    8d20:	88c00117 	ldw	r3,4(r17)
    8d24:	88800c17 	ldw	r2,48(r17)
    8d28:	30cdc83a 	sub	r6,r6,r3
    8d2c:	10000226 	beq	r2,zero,8d38 <__sflush_r+0x78>
    8d30:	88800f17 	ldw	r2,60(r17)
    8d34:	308dc83a 	sub	r6,r6,r2
    8d38:	89400717 	ldw	r5,28(r17)
    8d3c:	9809883a 	mov	r4,r19
    8d40:	000f883a 	mov	r7,zero
    8d44:	403ee83a 	callr	r8
    8d48:	00ffffc4 	movi	r3,-1
    8d4c:	10c04426 	beq	r2,r3,8e60 <__sflush_r+0x1a0>
    8d50:	88c0030b 	ldhu	r3,12(r17)
    8d54:	89000417 	ldw	r4,16(r17)
    8d58:	88000115 	stw	zero,4(r17)
    8d5c:	197dffcc 	andi	r5,r3,63487
    8d60:	8940030d 	sth	r5,12(r17)
    8d64:	89000015 	stw	r4,0(r17)
    8d68:	18c4000c 	andi	r3,r3,4096
    8d6c:	18002c1e 	bne	r3,zero,8e20 <__sflush_r+0x160>
    8d70:	89400c17 	ldw	r5,48(r17)
    8d74:	9c000015 	stw	r16,0(r19)
    8d78:	28000526 	beq	r5,zero,8d90 <__sflush_r+0xd0>
    8d7c:	88801004 	addi	r2,r17,64
    8d80:	28800226 	beq	r5,r2,8d8c <__sflush_r+0xcc>
    8d84:	9809883a 	mov	r4,r19
    8d88:	00094180 	call	9418 <_free_r>
    8d8c:	88000c15 	stw	zero,48(r17)
    8d90:	0005883a 	mov	r2,zero
    8d94:	dfc00417 	ldw	ra,16(sp)
    8d98:	dcc00317 	ldw	r19,12(sp)
    8d9c:	dc800217 	ldw	r18,8(sp)
    8da0:	dc400117 	ldw	r17,4(sp)
    8da4:	dc000017 	ldw	r16,0(sp)
    8da8:	dec00504 	addi	sp,sp,20
    8dac:	f800283a 	ret
    8db0:	2c800417 	ldw	r18,16(r5)
    8db4:	903ff626 	beq	r18,zero,8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8db8:	2c000017 	ldw	r16,0(r5)
    8dbc:	108000cc 	andi	r2,r2,3
    8dc0:	2c800015 	stw	r18,0(r5)
    8dc4:	84a1c83a 	sub	r16,r16,r18
    8dc8:	1000131e 	bne	r2,zero,8e18 <__sflush_r+0x158>
    8dcc:	28800517 	ldw	r2,20(r5)
    8dd0:	88800215 	stw	r2,8(r17)
    8dd4:	04000316 	blt	zero,r16,8de4 <__sflush_r+0x124>
    8dd8:	003fed06 	br	8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8ddc:	90a5883a 	add	r18,r18,r2
    8de0:	043feb0e 	bge	zero,r16,8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8de4:	88800917 	ldw	r2,36(r17)
    8de8:	89400717 	ldw	r5,28(r17)
    8dec:	800f883a 	mov	r7,r16
    8df0:	900d883a 	mov	r6,r18
    8df4:	9809883a 	mov	r4,r19
    8df8:	103ee83a 	callr	r2
    8dfc:	80a1c83a 	sub	r16,r16,r2
    8e00:	00bff616 	blt	zero,r2,8ddc <__alt_mem_Flash_flash_data+0xf4008ddc>
    8e04:	88c0030b 	ldhu	r3,12(r17)
    8e08:	00bfffc4 	movi	r2,-1
    8e0c:	18c01014 	ori	r3,r3,64
    8e10:	88c0030d 	sth	r3,12(r17)
    8e14:	003fdf06 	br	8d94 <__alt_mem_Flash_flash_data+0xf4008d94>
    8e18:	0005883a 	mov	r2,zero
    8e1c:	003fec06 	br	8dd0 <__alt_mem_Flash_flash_data+0xf4008dd0>
    8e20:	88801415 	stw	r2,80(r17)
    8e24:	003fd206 	br	8d70 <__alt_mem_Flash_flash_data+0xf4008d70>
    8e28:	28c00f17 	ldw	r3,60(r5)
    8e2c:	00ffb316 	blt	zero,r3,8cfc <__alt_mem_Flash_flash_data+0xf4008cfc>
    8e30:	003fd706 	br	8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8e34:	89400717 	ldw	r5,28(r17)
    8e38:	000d883a 	mov	r6,zero
    8e3c:	9809883a 	mov	r4,r19
    8e40:	01c00044 	movi	r7,1
    8e44:	403ee83a 	callr	r8
    8e48:	100d883a 	mov	r6,r2
    8e4c:	00bfffc4 	movi	r2,-1
    8e50:	30801426 	beq	r6,r2,8ea4 <__sflush_r+0x1e4>
    8e54:	8880030b 	ldhu	r2,12(r17)
    8e58:	8a000a17 	ldw	r8,40(r17)
    8e5c:	003fae06 	br	8d18 <__alt_mem_Flash_flash_data+0xf4008d18>
    8e60:	98c00017 	ldw	r3,0(r19)
    8e64:	183fba26 	beq	r3,zero,8d50 <__alt_mem_Flash_flash_data+0xf4008d50>
    8e68:	01000744 	movi	r4,29
    8e6c:	19000626 	beq	r3,r4,8e88 <__sflush_r+0x1c8>
    8e70:	01000584 	movi	r4,22
    8e74:	19000426 	beq	r3,r4,8e88 <__sflush_r+0x1c8>
    8e78:	88c0030b 	ldhu	r3,12(r17)
    8e7c:	18c01014 	ori	r3,r3,64
    8e80:	88c0030d 	sth	r3,12(r17)
    8e84:	003fc306 	br	8d94 <__alt_mem_Flash_flash_data+0xf4008d94>
    8e88:	8880030b 	ldhu	r2,12(r17)
    8e8c:	88c00417 	ldw	r3,16(r17)
    8e90:	88000115 	stw	zero,4(r17)
    8e94:	10bdffcc 	andi	r2,r2,63487
    8e98:	8880030d 	sth	r2,12(r17)
    8e9c:	88c00015 	stw	r3,0(r17)
    8ea0:	003fb306 	br	8d70 <__alt_mem_Flash_flash_data+0xf4008d70>
    8ea4:	98800017 	ldw	r2,0(r19)
    8ea8:	103fea26 	beq	r2,zero,8e54 <__alt_mem_Flash_flash_data+0xf4008e54>
    8eac:	00c00744 	movi	r3,29
    8eb0:	10c00226 	beq	r2,r3,8ebc <__sflush_r+0x1fc>
    8eb4:	00c00584 	movi	r3,22
    8eb8:	10ffd21e 	bne	r2,r3,8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    8ebc:	9c000015 	stw	r16,0(r19)
    8ec0:	0005883a 	mov	r2,zero
    8ec4:	003fb306 	br	8d94 <__alt_mem_Flash_flash_data+0xf4008d94>

00008ec8 <_fflush_r>:
    8ec8:	defffd04 	addi	sp,sp,-12
    8ecc:	dc000115 	stw	r16,4(sp)
    8ed0:	dfc00215 	stw	ra,8(sp)
    8ed4:	2021883a 	mov	r16,r4
    8ed8:	20000226 	beq	r4,zero,8ee4 <_fflush_r+0x1c>
    8edc:	20800e17 	ldw	r2,56(r4)
    8ee0:	10000c26 	beq	r2,zero,8f14 <_fflush_r+0x4c>
    8ee4:	2880030f 	ldh	r2,12(r5)
    8ee8:	1000051e 	bne	r2,zero,8f00 <_fflush_r+0x38>
    8eec:	0005883a 	mov	r2,zero
    8ef0:	dfc00217 	ldw	ra,8(sp)
    8ef4:	dc000117 	ldw	r16,4(sp)
    8ef8:	dec00304 	addi	sp,sp,12
    8efc:	f800283a 	ret
    8f00:	8009883a 	mov	r4,r16
    8f04:	dfc00217 	ldw	ra,8(sp)
    8f08:	dc000117 	ldw	r16,4(sp)
    8f0c:	dec00304 	addi	sp,sp,12
    8f10:	0008cc01 	jmpi	8cc0 <__sflush_r>
    8f14:	d9400015 	stw	r5,0(sp)
    8f18:	00092a40 	call	92a4 <__sinit>
    8f1c:	d9400017 	ldw	r5,0(sp)
    8f20:	003ff006 	br	8ee4 <__alt_mem_Flash_flash_data+0xf4008ee4>

00008f24 <fflush>:
    8f24:	20000526 	beq	r4,zero,8f3c <fflush+0x18>
    8f28:	008000b4 	movhi	r2,2
    8f2c:	10889604 	addi	r2,r2,8792
    8f30:	200b883a 	mov	r5,r4
    8f34:	11000017 	ldw	r4,0(r2)
    8f38:	0008ec81 	jmpi	8ec8 <_fflush_r>
    8f3c:	008000b4 	movhi	r2,2
    8f40:	10889504 	addi	r2,r2,8788
    8f44:	11000017 	ldw	r4,0(r2)
    8f48:	01400074 	movhi	r5,1
    8f4c:	2963b204 	addi	r5,r5,-28984
    8f50:	0009c8c1 	jmpi	9c8c <_fwalk_reent>

00008f54 <__fp_lock>:
    8f54:	0005883a 	mov	r2,zero
    8f58:	f800283a 	ret

00008f5c <__fp_unlock>:
    8f5c:	0005883a 	mov	r2,zero
    8f60:	f800283a 	ret

00008f64 <_cleanup_r>:
    8f64:	01400074 	movhi	r5,1
    8f68:	297b0704 	addi	r5,r5,-5092
    8f6c:	0009c8c1 	jmpi	9c8c <_fwalk_reent>

00008f70 <__sinit.part.1>:
    8f70:	defff704 	addi	sp,sp,-36
    8f74:	00c00074 	movhi	r3,1
    8f78:	dfc00815 	stw	ra,32(sp)
    8f7c:	ddc00715 	stw	r23,28(sp)
    8f80:	dd800615 	stw	r22,24(sp)
    8f84:	dd400515 	stw	r21,20(sp)
    8f88:	dd000415 	stw	r20,16(sp)
    8f8c:	dcc00315 	stw	r19,12(sp)
    8f90:	dc800215 	stw	r18,8(sp)
    8f94:	dc400115 	stw	r17,4(sp)
    8f98:	dc000015 	stw	r16,0(sp)
    8f9c:	18e3d904 	addi	r3,r3,-28828
    8fa0:	24000117 	ldw	r16,4(r4)
    8fa4:	20c00f15 	stw	r3,60(r4)
    8fa8:	2080bb04 	addi	r2,r4,748
    8fac:	00c000c4 	movi	r3,3
    8fb0:	20c0b915 	stw	r3,740(r4)
    8fb4:	2080ba15 	stw	r2,744(r4)
    8fb8:	2000b815 	stw	zero,736(r4)
    8fbc:	05c00204 	movi	r23,8
    8fc0:	00800104 	movi	r2,4
    8fc4:	2025883a 	mov	r18,r4
    8fc8:	b80d883a 	mov	r6,r23
    8fcc:	81001704 	addi	r4,r16,92
    8fd0:	000b883a 	mov	r5,zero
    8fd4:	80000015 	stw	zero,0(r16)
    8fd8:	80000115 	stw	zero,4(r16)
    8fdc:	80000215 	stw	zero,8(r16)
    8fe0:	8080030d 	sth	r2,12(r16)
    8fe4:	80001915 	stw	zero,100(r16)
    8fe8:	8000038d 	sth	zero,14(r16)
    8fec:	80000415 	stw	zero,16(r16)
    8ff0:	80000515 	stw	zero,20(r16)
    8ff4:	80000615 	stw	zero,24(r16)
    8ff8:	000ab0c0 	call	ab0c <memset>
    8ffc:	05800074 	movhi	r22,1
    9000:	94400217 	ldw	r17,8(r18)
    9004:	05400074 	movhi	r21,1
    9008:	05000074 	movhi	r20,1
    900c:	04c00074 	movhi	r19,1
    9010:	b5b08004 	addi	r22,r22,-15872
    9014:	ad709704 	addi	r21,r21,-15780
    9018:	a530b604 	addi	r20,r20,-15656
    901c:	9cf0cd04 	addi	r19,r19,-15564
    9020:	85800815 	stw	r22,32(r16)
    9024:	85400915 	stw	r21,36(r16)
    9028:	85000a15 	stw	r20,40(r16)
    902c:	84c00b15 	stw	r19,44(r16)
    9030:	84000715 	stw	r16,28(r16)
    9034:	00800284 	movi	r2,10
    9038:	8880030d 	sth	r2,12(r17)
    903c:	00800044 	movi	r2,1
    9040:	89001704 	addi	r4,r17,92
    9044:	b80d883a 	mov	r6,r23
    9048:	000b883a 	mov	r5,zero
    904c:	88000015 	stw	zero,0(r17)
    9050:	88000115 	stw	zero,4(r17)
    9054:	88000215 	stw	zero,8(r17)
    9058:	88001915 	stw	zero,100(r17)
    905c:	8880038d 	sth	r2,14(r17)
    9060:	88000415 	stw	zero,16(r17)
    9064:	88000515 	stw	zero,20(r17)
    9068:	88000615 	stw	zero,24(r17)
    906c:	000ab0c0 	call	ab0c <memset>
    9070:	94000317 	ldw	r16,12(r18)
    9074:	00800484 	movi	r2,18
    9078:	8c400715 	stw	r17,28(r17)
    907c:	8d800815 	stw	r22,32(r17)
    9080:	8d400915 	stw	r21,36(r17)
    9084:	8d000a15 	stw	r20,40(r17)
    9088:	8cc00b15 	stw	r19,44(r17)
    908c:	8080030d 	sth	r2,12(r16)
    9090:	00800084 	movi	r2,2
    9094:	80000015 	stw	zero,0(r16)
    9098:	80000115 	stw	zero,4(r16)
    909c:	80000215 	stw	zero,8(r16)
    90a0:	80001915 	stw	zero,100(r16)
    90a4:	8080038d 	sth	r2,14(r16)
    90a8:	80000415 	stw	zero,16(r16)
    90ac:	80000515 	stw	zero,20(r16)
    90b0:	80000615 	stw	zero,24(r16)
    90b4:	81001704 	addi	r4,r16,92
    90b8:	000b883a 	mov	r5,zero
    90bc:	b80d883a 	mov	r6,r23
    90c0:	000ab0c0 	call	ab0c <memset>
    90c4:	00800044 	movi	r2,1
    90c8:	84000715 	stw	r16,28(r16)
    90cc:	85800815 	stw	r22,32(r16)
    90d0:	85400915 	stw	r21,36(r16)
    90d4:	85000a15 	stw	r20,40(r16)
    90d8:	84c00b15 	stw	r19,44(r16)
    90dc:	90800e15 	stw	r2,56(r18)
    90e0:	dfc00817 	ldw	ra,32(sp)
    90e4:	ddc00717 	ldw	r23,28(sp)
    90e8:	dd800617 	ldw	r22,24(sp)
    90ec:	dd400517 	ldw	r21,20(sp)
    90f0:	dd000417 	ldw	r20,16(sp)
    90f4:	dcc00317 	ldw	r19,12(sp)
    90f8:	dc800217 	ldw	r18,8(sp)
    90fc:	dc400117 	ldw	r17,4(sp)
    9100:	dc000017 	ldw	r16,0(sp)
    9104:	dec00904 	addi	sp,sp,36
    9108:	f800283a 	ret

0000910c <__sfmoreglue>:
    910c:	defffc04 	addi	sp,sp,-16
    9110:	dc400115 	stw	r17,4(sp)
    9114:	2c7fffc4 	addi	r17,r5,-1
    9118:	8c401a24 	muli	r17,r17,104
    911c:	dc800215 	stw	r18,8(sp)
    9120:	2825883a 	mov	r18,r5
    9124:	89401d04 	addi	r5,r17,116
    9128:	dc000015 	stw	r16,0(sp)
    912c:	dfc00315 	stw	ra,12(sp)
    9130:	0009fe80 	call	9fe8 <_malloc_r>
    9134:	1021883a 	mov	r16,r2
    9138:	10000726 	beq	r2,zero,9158 <__sfmoreglue+0x4c>
    913c:	11000304 	addi	r4,r2,12
    9140:	10000015 	stw	zero,0(r2)
    9144:	14800115 	stw	r18,4(r2)
    9148:	11000215 	stw	r4,8(r2)
    914c:	000b883a 	mov	r5,zero
    9150:	89801a04 	addi	r6,r17,104
    9154:	000ab0c0 	call	ab0c <memset>
    9158:	8005883a 	mov	r2,r16
    915c:	dfc00317 	ldw	ra,12(sp)
    9160:	dc800217 	ldw	r18,8(sp)
    9164:	dc400117 	ldw	r17,4(sp)
    9168:	dc000017 	ldw	r16,0(sp)
    916c:	dec00404 	addi	sp,sp,16
    9170:	f800283a 	ret

00009174 <__sfp>:
    9174:	008000b4 	movhi	r2,2
    9178:	defffb04 	addi	sp,sp,-20
    917c:	10889504 	addi	r2,r2,8788
    9180:	dc800215 	stw	r18,8(sp)
    9184:	14800017 	ldw	r18,0(r2)
    9188:	dcc00315 	stw	r19,12(sp)
    918c:	dfc00415 	stw	ra,16(sp)
    9190:	90800e17 	ldw	r2,56(r18)
    9194:	dc400115 	stw	r17,4(sp)
    9198:	dc000015 	stw	r16,0(sp)
    919c:	2027883a 	mov	r19,r4
    91a0:	1000021e 	bne	r2,zero,91ac <__sfp+0x38>
    91a4:	9009883a 	mov	r4,r18
    91a8:	0008f700 	call	8f70 <__sinit.part.1>
    91ac:	9480b804 	addi	r18,r18,736
    91b0:	047fffc4 	movi	r17,-1
    91b4:	91400117 	ldw	r5,4(r18)
    91b8:	94000217 	ldw	r16,8(r18)
    91bc:	297fffc4 	addi	r5,r5,-1
    91c0:	28000a16 	blt	r5,zero,91ec <__sfp+0x78>
    91c4:	8080030f 	ldh	r2,12(r16)
    91c8:	10000c26 	beq	r2,zero,91fc <__sfp+0x88>
    91cc:	80c01d04 	addi	r3,r16,116
    91d0:	00000206 	br	91dc <__sfp+0x68>
    91d4:	18bfe60f 	ldh	r2,-104(r3)
    91d8:	10000826 	beq	r2,zero,91fc <__sfp+0x88>
    91dc:	297fffc4 	addi	r5,r5,-1
    91e0:	1c3ffd04 	addi	r16,r3,-12
    91e4:	18c01a04 	addi	r3,r3,104
    91e8:	2c7ffa1e 	bne	r5,r17,91d4 <__alt_mem_Flash_flash_data+0xf40091d4>
    91ec:	90800017 	ldw	r2,0(r18)
    91f0:	10001d26 	beq	r2,zero,9268 <__sfp+0xf4>
    91f4:	1025883a 	mov	r18,r2
    91f8:	003fee06 	br	91b4 <__alt_mem_Flash_flash_data+0xf40091b4>
    91fc:	00bfffc4 	movi	r2,-1
    9200:	8080038d 	sth	r2,14(r16)
    9204:	00800044 	movi	r2,1
    9208:	8080030d 	sth	r2,12(r16)
    920c:	80001915 	stw	zero,100(r16)
    9210:	80000015 	stw	zero,0(r16)
    9214:	80000215 	stw	zero,8(r16)
    9218:	80000115 	stw	zero,4(r16)
    921c:	80000415 	stw	zero,16(r16)
    9220:	80000515 	stw	zero,20(r16)
    9224:	80000615 	stw	zero,24(r16)
    9228:	81001704 	addi	r4,r16,92
    922c:	000b883a 	mov	r5,zero
    9230:	01800204 	movi	r6,8
    9234:	000ab0c0 	call	ab0c <memset>
    9238:	8005883a 	mov	r2,r16
    923c:	80000c15 	stw	zero,48(r16)
    9240:	80000d15 	stw	zero,52(r16)
    9244:	80001115 	stw	zero,68(r16)
    9248:	80001215 	stw	zero,72(r16)
    924c:	dfc00417 	ldw	ra,16(sp)
    9250:	dcc00317 	ldw	r19,12(sp)
    9254:	dc800217 	ldw	r18,8(sp)
    9258:	dc400117 	ldw	r17,4(sp)
    925c:	dc000017 	ldw	r16,0(sp)
    9260:	dec00504 	addi	sp,sp,20
    9264:	f800283a 	ret
    9268:	9809883a 	mov	r4,r19
    926c:	01400104 	movi	r5,4
    9270:	000910c0 	call	910c <__sfmoreglue>
    9274:	90800015 	stw	r2,0(r18)
    9278:	103fde1e 	bne	r2,zero,91f4 <__alt_mem_Flash_flash_data+0xf40091f4>
    927c:	00800304 	movi	r2,12
    9280:	98800015 	stw	r2,0(r19)
    9284:	0005883a 	mov	r2,zero
    9288:	003ff006 	br	924c <__alt_mem_Flash_flash_data+0xf400924c>

0000928c <_cleanup>:
    928c:	008000b4 	movhi	r2,2
    9290:	10889504 	addi	r2,r2,8788
    9294:	11000017 	ldw	r4,0(r2)
    9298:	01400074 	movhi	r5,1
    929c:	297b0704 	addi	r5,r5,-5092
    92a0:	0009c8c1 	jmpi	9c8c <_fwalk_reent>

000092a4 <__sinit>:
    92a4:	20800e17 	ldw	r2,56(r4)
    92a8:	10000126 	beq	r2,zero,92b0 <__sinit+0xc>
    92ac:	f800283a 	ret
    92b0:	0008f701 	jmpi	8f70 <__sinit.part.1>

000092b4 <__sfp_lock_acquire>:
    92b4:	f800283a 	ret

000092b8 <__sfp_lock_release>:
    92b8:	f800283a 	ret

000092bc <__sinit_lock_acquire>:
    92bc:	f800283a 	ret

000092c0 <__sinit_lock_release>:
    92c0:	f800283a 	ret

000092c4 <__fp_lock_all>:
    92c4:	008000b4 	movhi	r2,2
    92c8:	10889604 	addi	r2,r2,8792
    92cc:	11000017 	ldw	r4,0(r2)
    92d0:	01400074 	movhi	r5,1
    92d4:	2963d504 	addi	r5,r5,-28844
    92d8:	0009bc81 	jmpi	9bc8 <_fwalk>

000092dc <__fp_unlock_all>:
    92dc:	008000b4 	movhi	r2,2
    92e0:	10889604 	addi	r2,r2,8792
    92e4:	11000017 	ldw	r4,0(r2)
    92e8:	01400074 	movhi	r5,1
    92ec:	2963d704 	addi	r5,r5,-28836
    92f0:	0009bc81 	jmpi	9bc8 <_fwalk>

000092f4 <_malloc_trim_r>:
    92f4:	defffb04 	addi	sp,sp,-20
    92f8:	dcc00315 	stw	r19,12(sp)
    92fc:	04c000b4 	movhi	r19,2
    9300:	dc800215 	stw	r18,8(sp)
    9304:	dc400115 	stw	r17,4(sp)
    9308:	dc000015 	stw	r16,0(sp)
    930c:	dfc00415 	stw	ra,16(sp)
    9310:	2821883a 	mov	r16,r5
    9314:	9cc22004 	addi	r19,r19,2176
    9318:	2025883a 	mov	r18,r4
    931c:	00130f80 	call	130f8 <__malloc_lock>
    9320:	98800217 	ldw	r2,8(r19)
    9324:	14400117 	ldw	r17,4(r2)
    9328:	00bfff04 	movi	r2,-4
    932c:	88a2703a 	and	r17,r17,r2
    9330:	8c21c83a 	sub	r16,r17,r16
    9334:	8403fbc4 	addi	r16,r16,4079
    9338:	8020d33a 	srli	r16,r16,12
    933c:	0083ffc4 	movi	r2,4095
    9340:	843fffc4 	addi	r16,r16,-1
    9344:	8020933a 	slli	r16,r16,12
    9348:	1400060e 	bge	r2,r16,9364 <_malloc_trim_r+0x70>
    934c:	9009883a 	mov	r4,r18
    9350:	000b883a 	mov	r5,zero
    9354:	000c1ac0 	call	c1ac <_sbrk_r>
    9358:	98c00217 	ldw	r3,8(r19)
    935c:	1c47883a 	add	r3,r3,r17
    9360:	10c00a26 	beq	r2,r3,938c <_malloc_trim_r+0x98>
    9364:	9009883a 	mov	r4,r18
    9368:	00132180 	call	13218 <__malloc_unlock>
    936c:	0005883a 	mov	r2,zero
    9370:	dfc00417 	ldw	ra,16(sp)
    9374:	dcc00317 	ldw	r19,12(sp)
    9378:	dc800217 	ldw	r18,8(sp)
    937c:	dc400117 	ldw	r17,4(sp)
    9380:	dc000017 	ldw	r16,0(sp)
    9384:	dec00504 	addi	sp,sp,20
    9388:	f800283a 	ret
    938c:	9009883a 	mov	r4,r18
    9390:	040bc83a 	sub	r5,zero,r16
    9394:	000c1ac0 	call	c1ac <_sbrk_r>
    9398:	00ffffc4 	movi	r3,-1
    939c:	10c00d26 	beq	r2,r3,93d4 <_malloc_trim_r+0xe0>
    93a0:	00c000b4 	movhi	r3,2
    93a4:	18d0d204 	addi	r3,r3,17224
    93a8:	18800017 	ldw	r2,0(r3)
    93ac:	99000217 	ldw	r4,8(r19)
    93b0:	8c23c83a 	sub	r17,r17,r16
    93b4:	8c400054 	ori	r17,r17,1
    93b8:	1421c83a 	sub	r16,r2,r16
    93bc:	24400115 	stw	r17,4(r4)
    93c0:	9009883a 	mov	r4,r18
    93c4:	1c000015 	stw	r16,0(r3)
    93c8:	00132180 	call	13218 <__malloc_unlock>
    93cc:	00800044 	movi	r2,1
    93d0:	003fe706 	br	9370 <__alt_mem_Flash_flash_data+0xf4009370>
    93d4:	9009883a 	mov	r4,r18
    93d8:	000b883a 	mov	r5,zero
    93dc:	000c1ac0 	call	c1ac <_sbrk_r>
    93e0:	99000217 	ldw	r4,8(r19)
    93e4:	014003c4 	movi	r5,15
    93e8:	1107c83a 	sub	r3,r2,r4
    93ec:	28ffdd0e 	bge	r5,r3,9364 <__alt_mem_Flash_flash_data+0xf4009364>
    93f0:	014000b4 	movhi	r5,2
    93f4:	29489804 	addi	r5,r5,8800
    93f8:	29400017 	ldw	r5,0(r5)
    93fc:	18c00054 	ori	r3,r3,1
    9400:	20c00115 	stw	r3,4(r4)
    9404:	00c000b4 	movhi	r3,2
    9408:	1145c83a 	sub	r2,r2,r5
    940c:	18d0d204 	addi	r3,r3,17224
    9410:	18800015 	stw	r2,0(r3)
    9414:	003fd306 	br	9364 <__alt_mem_Flash_flash_data+0xf4009364>

00009418 <_free_r>:
    9418:	28004c26 	beq	r5,zero,954c <_free_r+0x134>
    941c:	defffd04 	addi	sp,sp,-12
    9420:	dc400115 	stw	r17,4(sp)
    9424:	dc000015 	stw	r16,0(sp)
    9428:	2023883a 	mov	r17,r4
    942c:	2821883a 	mov	r16,r5
    9430:	dfc00215 	stw	ra,8(sp)
    9434:	00130f80 	call	130f8 <__malloc_lock>
    9438:	813fff17 	ldw	r4,-4(r16)
    943c:	00bfff84 	movi	r2,-2
    9440:	024000b4 	movhi	r9,2
    9444:	81bffe04 	addi	r6,r16,-8
    9448:	2084703a 	and	r2,r4,r2
    944c:	4a422004 	addi	r9,r9,2176
    9450:	308b883a 	add	r5,r6,r2
    9454:	2a000117 	ldw	r8,4(r5)
    9458:	49c00217 	ldw	r7,8(r9)
    945c:	00ffff04 	movi	r3,-4
    9460:	40c6703a 	and	r3,r8,r3
    9464:	39405326 	beq	r7,r5,95b4 <_free_r+0x19c>
    9468:	28c00115 	stw	r3,4(r5)
    946c:	2100004c 	andi	r4,r4,1
    9470:	2000091e 	bne	r4,zero,9498 <_free_r+0x80>
    9474:	81fffe17 	ldw	r7,-8(r16)
    9478:	4a000204 	addi	r8,r9,8
    947c:	31cdc83a 	sub	r6,r6,r7
    9480:	31000217 	ldw	r4,8(r6)
    9484:	11c5883a 	add	r2,r2,r7
    9488:	22006126 	beq	r4,r8,9610 <_free_r+0x1f8>
    948c:	31c00317 	ldw	r7,12(r6)
    9490:	21c00315 	stw	r7,12(r4)
    9494:	39000215 	stw	r4,8(r7)
    9498:	28c9883a 	add	r4,r5,r3
    949c:	21c00117 	ldw	r7,4(r4)
    94a0:	39c0004c 	andi	r7,r7,1
    94a4:	38000d1e 	bne	r7,zero,94dc <_free_r+0xc4>
    94a8:	29000217 	ldw	r4,8(r5)
    94ac:	10c5883a 	add	r2,r2,r3
    94b0:	00c000b4 	movhi	r3,2
    94b4:	18c22204 	addi	r3,r3,2184
    94b8:	20c07526 	beq	r4,r3,9690 <_free_r+0x278>
    94bc:	29c00317 	ldw	r7,12(r5)
    94c0:	11400054 	ori	r5,r2,1
    94c4:	3087883a 	add	r3,r6,r2
    94c8:	21c00315 	stw	r7,12(r4)
    94cc:	39000215 	stw	r4,8(r7)
    94d0:	31400115 	stw	r5,4(r6)
    94d4:	18800015 	stw	r2,0(r3)
    94d8:	00000406 	br	94ec <_free_r+0xd4>
    94dc:	10c00054 	ori	r3,r2,1
    94e0:	30c00115 	stw	r3,4(r6)
    94e4:	3087883a 	add	r3,r6,r2
    94e8:	18800015 	stw	r2,0(r3)
    94ec:	00c07fc4 	movi	r3,511
    94f0:	18801736 	bltu	r3,r2,9550 <_free_r+0x138>
    94f4:	1004d0fa 	srli	r2,r2,3
    94f8:	01400044 	movi	r5,1
    94fc:	49000117 	ldw	r4,4(r9)
    9500:	1087883a 	add	r3,r2,r2
    9504:	18c7883a 	add	r3,r3,r3
    9508:	1005d0ba 	srai	r2,r2,2
    950c:	18c7883a 	add	r3,r3,r3
    9510:	1a47883a 	add	r3,r3,r9
    9514:	19c00217 	ldw	r7,8(r3)
    9518:	2884983a 	sll	r2,r5,r2
    951c:	30c00315 	stw	r3,12(r6)
    9520:	31c00215 	stw	r7,8(r6)
    9524:	1104b03a 	or	r2,r2,r4
    9528:	19800215 	stw	r6,8(r3)
    952c:	48800115 	stw	r2,4(r9)
    9530:	39800315 	stw	r6,12(r7)
    9534:	8809883a 	mov	r4,r17
    9538:	dfc00217 	ldw	ra,8(sp)
    953c:	dc400117 	ldw	r17,4(sp)
    9540:	dc000017 	ldw	r16,0(sp)
    9544:	dec00304 	addi	sp,sp,12
    9548:	00132181 	jmpi	13218 <__malloc_unlock>
    954c:	f800283a 	ret
    9550:	1006d27a 	srli	r3,r2,9
    9554:	01000104 	movi	r4,4
    9558:	20c04036 	bltu	r4,r3,965c <_free_r+0x244>
    955c:	1006d1ba 	srli	r3,r2,6
    9560:	19400e04 	addi	r5,r3,56
    9564:	2947883a 	add	r3,r5,r5
    9568:	18c7883a 	add	r3,r3,r3
    956c:	18c7883a 	add	r3,r3,r3
    9570:	1a49883a 	add	r4,r3,r9
    9574:	20c00217 	ldw	r3,8(r4)
    9578:	01c000b4 	movhi	r7,2
    957c:	39c22004 	addi	r7,r7,2176
    9580:	19003b26 	beq	r3,r4,9670 <_free_r+0x258>
    9584:	01ffff04 	movi	r7,-4
    9588:	19400117 	ldw	r5,4(r3)
    958c:	29ca703a 	and	r5,r5,r7
    9590:	1140022e 	bgeu	r2,r5,959c <_free_r+0x184>
    9594:	18c00217 	ldw	r3,8(r3)
    9598:	20fffb1e 	bne	r4,r3,9588 <__alt_mem_Flash_flash_data+0xf4009588>
    959c:	18800317 	ldw	r2,12(r3)
    95a0:	30800315 	stw	r2,12(r6)
    95a4:	30c00215 	stw	r3,8(r6)
    95a8:	11800215 	stw	r6,8(r2)
    95ac:	19800315 	stw	r6,12(r3)
    95b0:	003fe006 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    95b4:	2100004c 	andi	r4,r4,1
    95b8:	1885883a 	add	r2,r3,r2
    95bc:	2000071e 	bne	r4,zero,95dc <_free_r+0x1c4>
    95c0:	817ffe17 	ldw	r5,-8(r16)
    95c4:	314dc83a 	sub	r6,r6,r5
    95c8:	30c00317 	ldw	r3,12(r6)
    95cc:	31000217 	ldw	r4,8(r6)
    95d0:	1145883a 	add	r2,r2,r5
    95d4:	20c00315 	stw	r3,12(r4)
    95d8:	19000215 	stw	r4,8(r3)
    95dc:	10c00054 	ori	r3,r2,1
    95e0:	30c00115 	stw	r3,4(r6)
    95e4:	00c000b4 	movhi	r3,2
    95e8:	18c89904 	addi	r3,r3,8804
    95ec:	18c00017 	ldw	r3,0(r3)
    95f0:	49800215 	stw	r6,8(r9)
    95f4:	10ffcf36 	bltu	r2,r3,9534 <__alt_mem_Flash_flash_data+0xf4009534>
    95f8:	008000b4 	movhi	r2,2
    95fc:	1090b004 	addi	r2,r2,17088
    9600:	11400017 	ldw	r5,0(r2)
    9604:	8809883a 	mov	r4,r17
    9608:	00092f40 	call	92f4 <_malloc_trim_r>
    960c:	003fc906 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    9610:	28c9883a 	add	r4,r5,r3
    9614:	21000117 	ldw	r4,4(r4)
    9618:	2100004c 	andi	r4,r4,1
    961c:	20000a1e 	bne	r4,zero,9648 <_free_r+0x230>
    9620:	29000317 	ldw	r4,12(r5)
    9624:	29400217 	ldw	r5,8(r5)
    9628:	10c5883a 	add	r2,r2,r3
    962c:	10c00054 	ori	r3,r2,1
    9630:	29000315 	stw	r4,12(r5)
    9634:	21400215 	stw	r5,8(r4)
    9638:	30c00115 	stw	r3,4(r6)
    963c:	308d883a 	add	r6,r6,r2
    9640:	30800015 	stw	r2,0(r6)
    9644:	003fbb06 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    9648:	10c00054 	ori	r3,r2,1
    964c:	30c00115 	stw	r3,4(r6)
    9650:	308d883a 	add	r6,r6,r2
    9654:	30800015 	stw	r2,0(r6)
    9658:	003fb606 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    965c:	01000504 	movi	r4,20
    9660:	20c01436 	bltu	r4,r3,96b4 <_free_r+0x29c>
    9664:	194016c4 	addi	r5,r3,91
    9668:	2947883a 	add	r3,r5,r5
    966c:	003fbe06 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>
    9670:	280bd0ba 	srai	r5,r5,2
    9674:	00800044 	movi	r2,1
    9678:	39000117 	ldw	r4,4(r7)
    967c:	114a983a 	sll	r5,r2,r5
    9680:	1805883a 	mov	r2,r3
    9684:	2908b03a 	or	r4,r5,r4
    9688:	39000115 	stw	r4,4(r7)
    968c:	003fc406 	br	95a0 <__alt_mem_Flash_flash_data+0xf40095a0>
    9690:	49800515 	stw	r6,20(r9)
    9694:	49800415 	stw	r6,16(r9)
    9698:	10c00054 	ori	r3,r2,1
    969c:	31000315 	stw	r4,12(r6)
    96a0:	31000215 	stw	r4,8(r6)
    96a4:	30c00115 	stw	r3,4(r6)
    96a8:	308d883a 	add	r6,r6,r2
    96ac:	30800015 	stw	r2,0(r6)
    96b0:	003fa006 	br	9534 <__alt_mem_Flash_flash_data+0xf4009534>
    96b4:	01001504 	movi	r4,84
    96b8:	20c00436 	bltu	r4,r3,96cc <_free_r+0x2b4>
    96bc:	1006d33a 	srli	r3,r2,12
    96c0:	19401b84 	addi	r5,r3,110
    96c4:	2947883a 	add	r3,r5,r5
    96c8:	003fa706 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>
    96cc:	01005504 	movi	r4,340
    96d0:	20c00436 	bltu	r4,r3,96e4 <_free_r+0x2cc>
    96d4:	1006d3fa 	srli	r3,r2,15
    96d8:	19401dc4 	addi	r5,r3,119
    96dc:	2947883a 	add	r3,r5,r5
    96e0:	003fa106 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>
    96e4:	01015504 	movi	r4,1364
    96e8:	20c00436 	bltu	r4,r3,96fc <_free_r+0x2e4>
    96ec:	1006d4ba 	srli	r3,r2,18
    96f0:	19401f04 	addi	r5,r3,124
    96f4:	2947883a 	add	r3,r5,r5
    96f8:	003f9b06 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>
    96fc:	00c03f04 	movi	r3,252
    9700:	01401f84 	movi	r5,126
    9704:	003f9806 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>

00009708 <__sfvwrite_r>:
    9708:	30800217 	ldw	r2,8(r6)
    970c:	10006726 	beq	r2,zero,98ac <__sfvwrite_r+0x1a4>
    9710:	defff404 	addi	sp,sp,-48
    9714:	dd000615 	stw	r20,24(sp)
    9718:	2029883a 	mov	r20,r4
    971c:	2900030b 	ldhu	r4,12(r5)
    9720:	ddc00915 	stw	r23,36(sp)
    9724:	dc000215 	stw	r16,8(sp)
    9728:	dfc00b15 	stw	ra,44(sp)
    972c:	df000a15 	stw	fp,40(sp)
    9730:	dd800815 	stw	r22,32(sp)
    9734:	dd400715 	stw	r21,28(sp)
    9738:	dcc00515 	stw	r19,20(sp)
    973c:	dc800415 	stw	r18,16(sp)
    9740:	dc400315 	stw	r17,12(sp)
    9744:	2080020c 	andi	r2,r4,8
    9748:	2821883a 	mov	r16,r5
    974c:	302f883a 	mov	r23,r6
    9750:	10002726 	beq	r2,zero,97f0 <__sfvwrite_r+0xe8>
    9754:	28800417 	ldw	r2,16(r5)
    9758:	10002526 	beq	r2,zero,97f0 <__sfvwrite_r+0xe8>
    975c:	2080008c 	andi	r2,r4,2
    9760:	bc400017 	ldw	r17,0(r23)
    9764:	10002a26 	beq	r2,zero,9810 <__sfvwrite_r+0x108>
    9768:	05600034 	movhi	r21,32768
    976c:	0027883a 	mov	r19,zero
    9770:	0025883a 	mov	r18,zero
    9774:	ad7f0004 	addi	r21,r21,-1024
    9778:	980d883a 	mov	r6,r19
    977c:	a009883a 	mov	r4,r20
    9780:	90004626 	beq	r18,zero,989c <__sfvwrite_r+0x194>
    9784:	900f883a 	mov	r7,r18
    9788:	81400717 	ldw	r5,28(r16)
    978c:	ac80022e 	bgeu	r21,r18,9798 <__sfvwrite_r+0x90>
    9790:	01e00034 	movhi	r7,32768
    9794:	39ff0004 	addi	r7,r7,-1024
    9798:	80800917 	ldw	r2,36(r16)
    979c:	103ee83a 	callr	r2
    97a0:	0080520e 	bge	zero,r2,98ec <__sfvwrite_r+0x1e4>
    97a4:	b8c00217 	ldw	r3,8(r23)
    97a8:	98a7883a 	add	r19,r19,r2
    97ac:	90a5c83a 	sub	r18,r18,r2
    97b0:	1885c83a 	sub	r2,r3,r2
    97b4:	b8800215 	stw	r2,8(r23)
    97b8:	103fef1e 	bne	r2,zero,9778 <__alt_mem_Flash_flash_data+0xf4009778>
    97bc:	0005883a 	mov	r2,zero
    97c0:	dfc00b17 	ldw	ra,44(sp)
    97c4:	df000a17 	ldw	fp,40(sp)
    97c8:	ddc00917 	ldw	r23,36(sp)
    97cc:	dd800817 	ldw	r22,32(sp)
    97d0:	dd400717 	ldw	r21,28(sp)
    97d4:	dd000617 	ldw	r20,24(sp)
    97d8:	dcc00517 	ldw	r19,20(sp)
    97dc:	dc800417 	ldw	r18,16(sp)
    97e0:	dc400317 	ldw	r17,12(sp)
    97e4:	dc000217 	ldw	r16,8(sp)
    97e8:	dec00c04 	addi	sp,sp,48
    97ec:	f800283a 	ret
    97f0:	a009883a 	mov	r4,r20
    97f4:	800b883a 	mov	r5,r16
    97f8:	00072440 	call	7244 <__swsetup_r>
    97fc:	1000ec1e 	bne	r2,zero,9bb0 <__sfvwrite_r+0x4a8>
    9800:	8100030b 	ldhu	r4,12(r16)
    9804:	bc400017 	ldw	r17,0(r23)
    9808:	2080008c 	andi	r2,r4,2
    980c:	103fd61e 	bne	r2,zero,9768 <__alt_mem_Flash_flash_data+0xf4009768>
    9810:	2080004c 	andi	r2,r4,1
    9814:	10003a1e 	bne	r2,zero,9900 <__sfvwrite_r+0x1f8>
    9818:	0039883a 	mov	fp,zero
    981c:	0025883a 	mov	r18,zero
    9820:	90001a26 	beq	r18,zero,988c <__sfvwrite_r+0x184>
    9824:	2080800c 	andi	r2,r4,512
    9828:	85800217 	ldw	r22,8(r16)
    982c:	10007626 	beq	r2,zero,9a08 <__sfvwrite_r+0x300>
    9830:	b027883a 	mov	r19,r22
    9834:	95809436 	bltu	r18,r22,9a88 <__sfvwrite_r+0x380>
    9838:	2081200c 	andi	r2,r4,1152
    983c:	10009f1e 	bne	r2,zero,9abc <__sfvwrite_r+0x3b4>
    9840:	81000017 	ldw	r4,0(r16)
    9844:	e00b883a 	mov	r5,fp
    9848:	980d883a 	mov	r6,r19
    984c:	000a9b00 	call	a9b0 <memmove>
    9850:	81000217 	ldw	r4,8(r16)
    9854:	81400017 	ldw	r5,0(r16)
    9858:	9005883a 	mov	r2,r18
    985c:	2587c83a 	sub	r3,r4,r22
    9860:	2ce7883a 	add	r19,r5,r19
    9864:	80c00215 	stw	r3,8(r16)
    9868:	84c00015 	stw	r19,0(r16)
    986c:	b8c00217 	ldw	r3,8(r23)
    9870:	e0b9883a 	add	fp,fp,r2
    9874:	90a5c83a 	sub	r18,r18,r2
    9878:	1885c83a 	sub	r2,r3,r2
    987c:	b8800215 	stw	r2,8(r23)
    9880:	103fce26 	beq	r2,zero,97bc <__alt_mem_Flash_flash_data+0xf40097bc>
    9884:	8100030b 	ldhu	r4,12(r16)
    9888:	903fe61e 	bne	r18,zero,9824 <__alt_mem_Flash_flash_data+0xf4009824>
    988c:	8f000017 	ldw	fp,0(r17)
    9890:	8c800117 	ldw	r18,4(r17)
    9894:	8c400204 	addi	r17,r17,8
    9898:	003fe106 	br	9820 <__alt_mem_Flash_flash_data+0xf4009820>
    989c:	8cc00017 	ldw	r19,0(r17)
    98a0:	8c800117 	ldw	r18,4(r17)
    98a4:	8c400204 	addi	r17,r17,8
    98a8:	003fb306 	br	9778 <__alt_mem_Flash_flash_data+0xf4009778>
    98ac:	0005883a 	mov	r2,zero
    98b0:	f800283a 	ret
    98b4:	00a00034 	movhi	r2,32768
    98b8:	10bfffc4 	addi	r2,r2,-1
    98bc:	9009883a 	mov	r4,r18
    98c0:	1480012e 	bgeu	r2,r18,98c8 <__sfvwrite_r+0x1c0>
    98c4:	1009883a 	mov	r4,r2
    98c8:	980b883a 	mov	r5,r19
    98cc:	000ff5c0 	call	ff5c <__divsi3>
    98d0:	81400717 	ldw	r5,28(r16)
    98d4:	80c00917 	ldw	r3,36(r16)
    98d8:	988f383a 	mul	r7,r19,r2
    98dc:	a009883a 	mov	r4,r20
    98e0:	e00d883a 	mov	r6,fp
    98e4:	183ee83a 	callr	r3
    98e8:	00bfe016 	blt	zero,r2,986c <__alt_mem_Flash_flash_data+0xf400986c>
    98ec:	8080030b 	ldhu	r2,12(r16)
    98f0:	10801014 	ori	r2,r2,64
    98f4:	8080030d 	sth	r2,12(r16)
    98f8:	00bfffc4 	movi	r2,-1
    98fc:	003fb006 	br	97c0 <__alt_mem_Flash_flash_data+0xf40097c0>
    9900:	0027883a 	mov	r19,zero
    9904:	0011883a 	mov	r8,zero
    9908:	0039883a 	mov	fp,zero
    990c:	0025883a 	mov	r18,zero
    9910:	90001f26 	beq	r18,zero,9990 <__sfvwrite_r+0x288>
    9914:	40006026 	beq	r8,zero,9a98 <__sfvwrite_r+0x390>
    9918:	982b883a 	mov	r21,r19
    991c:	94c0012e 	bgeu	r18,r19,9924 <__sfvwrite_r+0x21c>
    9920:	902b883a 	mov	r21,r18
    9924:	81000017 	ldw	r4,0(r16)
    9928:	80800417 	ldw	r2,16(r16)
    992c:	a82d883a 	mov	r22,r21
    9930:	81800217 	ldw	r6,8(r16)
    9934:	81c00517 	ldw	r7,20(r16)
    9938:	1100022e 	bgeu	r2,r4,9944 <__sfvwrite_r+0x23c>
    993c:	31c7883a 	add	r3,r6,r7
    9940:	1d401816 	blt	r3,r21,99a4 <__sfvwrite_r+0x29c>
    9944:	a9c04416 	blt	r21,r7,9a58 <__sfvwrite_r+0x350>
    9948:	80800917 	ldw	r2,36(r16)
    994c:	81400717 	ldw	r5,28(r16)
    9950:	a009883a 	mov	r4,r20
    9954:	da000115 	stw	r8,4(sp)
    9958:	e00d883a 	mov	r6,fp
    995c:	103ee83a 	callr	r2
    9960:	102d883a 	mov	r22,r2
    9964:	da000117 	ldw	r8,4(sp)
    9968:	00bfe00e 	bge	zero,r2,98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    996c:	9da7c83a 	sub	r19,r19,r22
    9970:	98001f26 	beq	r19,zero,99f0 <__sfvwrite_r+0x2e8>
    9974:	b8800217 	ldw	r2,8(r23)
    9978:	e5b9883a 	add	fp,fp,r22
    997c:	95a5c83a 	sub	r18,r18,r22
    9980:	15adc83a 	sub	r22,r2,r22
    9984:	bd800215 	stw	r22,8(r23)
    9988:	b03f8c26 	beq	r22,zero,97bc <__alt_mem_Flash_flash_data+0xf40097bc>
    998c:	903fe11e 	bne	r18,zero,9914 <__alt_mem_Flash_flash_data+0xf4009914>
    9990:	8f000017 	ldw	fp,0(r17)
    9994:	8c800117 	ldw	r18,4(r17)
    9998:	0011883a 	mov	r8,zero
    999c:	8c400204 	addi	r17,r17,8
    99a0:	003fdb06 	br	9910 <__alt_mem_Flash_flash_data+0xf4009910>
    99a4:	180d883a 	mov	r6,r3
    99a8:	e00b883a 	mov	r5,fp
    99ac:	da000115 	stw	r8,4(sp)
    99b0:	d8c00015 	stw	r3,0(sp)
    99b4:	000a9b00 	call	a9b0 <memmove>
    99b8:	d8c00017 	ldw	r3,0(sp)
    99bc:	80800017 	ldw	r2,0(r16)
    99c0:	a009883a 	mov	r4,r20
    99c4:	800b883a 	mov	r5,r16
    99c8:	10c5883a 	add	r2,r2,r3
    99cc:	80800015 	stw	r2,0(r16)
    99d0:	d8c00015 	stw	r3,0(sp)
    99d4:	0008ec80 	call	8ec8 <_fflush_r>
    99d8:	d8c00017 	ldw	r3,0(sp)
    99dc:	da000117 	ldw	r8,4(sp)
    99e0:	103fc21e 	bne	r2,zero,98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    99e4:	182d883a 	mov	r22,r3
    99e8:	9da7c83a 	sub	r19,r19,r22
    99ec:	983fe11e 	bne	r19,zero,9974 <__alt_mem_Flash_flash_data+0xf4009974>
    99f0:	a009883a 	mov	r4,r20
    99f4:	800b883a 	mov	r5,r16
    99f8:	0008ec80 	call	8ec8 <_fflush_r>
    99fc:	103fbb1e 	bne	r2,zero,98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    9a00:	0011883a 	mov	r8,zero
    9a04:	003fdb06 	br	9974 <__alt_mem_Flash_flash_data+0xf4009974>
    9a08:	81000017 	ldw	r4,0(r16)
    9a0c:	80800417 	ldw	r2,16(r16)
    9a10:	11000236 	bltu	r2,r4,9a1c <__sfvwrite_r+0x314>
    9a14:	84c00517 	ldw	r19,20(r16)
    9a18:	94ffa62e 	bgeu	r18,r19,98b4 <__alt_mem_Flash_flash_data+0xf40098b4>
    9a1c:	9027883a 	mov	r19,r18
    9a20:	b480012e 	bgeu	r22,r18,9a28 <__sfvwrite_r+0x320>
    9a24:	b027883a 	mov	r19,r22
    9a28:	e00b883a 	mov	r5,fp
    9a2c:	980d883a 	mov	r6,r19
    9a30:	000a9b00 	call	a9b0 <memmove>
    9a34:	80800217 	ldw	r2,8(r16)
    9a38:	80c00017 	ldw	r3,0(r16)
    9a3c:	14c5c83a 	sub	r2,r2,r19
    9a40:	1cc7883a 	add	r3,r3,r19
    9a44:	80800215 	stw	r2,8(r16)
    9a48:	80c00015 	stw	r3,0(r16)
    9a4c:	10004326 	beq	r2,zero,9b5c <__sfvwrite_r+0x454>
    9a50:	9805883a 	mov	r2,r19
    9a54:	003f8506 	br	986c <__alt_mem_Flash_flash_data+0xf400986c>
    9a58:	a80d883a 	mov	r6,r21
    9a5c:	e00b883a 	mov	r5,fp
    9a60:	da000115 	stw	r8,4(sp)
    9a64:	000a9b00 	call	a9b0 <memmove>
    9a68:	80800217 	ldw	r2,8(r16)
    9a6c:	80c00017 	ldw	r3,0(r16)
    9a70:	da000117 	ldw	r8,4(sp)
    9a74:	1545c83a 	sub	r2,r2,r21
    9a78:	1d6b883a 	add	r21,r3,r21
    9a7c:	80800215 	stw	r2,8(r16)
    9a80:	85400015 	stw	r21,0(r16)
    9a84:	003fb906 	br	996c <__alt_mem_Flash_flash_data+0xf400996c>
    9a88:	81000017 	ldw	r4,0(r16)
    9a8c:	902d883a 	mov	r22,r18
    9a90:	9027883a 	mov	r19,r18
    9a94:	003f6b06 	br	9844 <__alt_mem_Flash_flash_data+0xf4009844>
    9a98:	e009883a 	mov	r4,fp
    9a9c:	01400284 	movi	r5,10
    9aa0:	900d883a 	mov	r6,r18
    9aa4:	000a7900 	call	a790 <memchr>
    9aa8:	10003e26 	beq	r2,zero,9ba4 <__sfvwrite_r+0x49c>
    9aac:	10800044 	addi	r2,r2,1
    9ab0:	1727c83a 	sub	r19,r2,fp
    9ab4:	02000044 	movi	r8,1
    9ab8:	003f9706 	br	9918 <__alt_mem_Flash_flash_data+0xf4009918>
    9abc:	80800517 	ldw	r2,20(r16)
    9ac0:	81400417 	ldw	r5,16(r16)
    9ac4:	80c00017 	ldw	r3,0(r16)
    9ac8:	10a7883a 	add	r19,r2,r2
    9acc:	9885883a 	add	r2,r19,r2
    9ad0:	1026d7fa 	srli	r19,r2,31
    9ad4:	196bc83a 	sub	r21,r3,r5
    9ad8:	a9800044 	addi	r6,r21,1
    9adc:	9885883a 	add	r2,r19,r2
    9ae0:	1027d07a 	srai	r19,r2,1
    9ae4:	3485883a 	add	r2,r6,r18
    9ae8:	980d883a 	mov	r6,r19
    9aec:	9880022e 	bgeu	r19,r2,9af8 <__sfvwrite_r+0x3f0>
    9af0:	1027883a 	mov	r19,r2
    9af4:	100d883a 	mov	r6,r2
    9af8:	2101000c 	andi	r4,r4,1024
    9afc:	20001c26 	beq	r4,zero,9b70 <__sfvwrite_r+0x468>
    9b00:	a009883a 	mov	r4,r20
    9b04:	300b883a 	mov	r5,r6
    9b08:	0009fe80 	call	9fe8 <_malloc_r>
    9b0c:	102d883a 	mov	r22,r2
    9b10:	10002926 	beq	r2,zero,9bb8 <__sfvwrite_r+0x4b0>
    9b14:	81400417 	ldw	r5,16(r16)
    9b18:	1009883a 	mov	r4,r2
    9b1c:	a80d883a 	mov	r6,r21
    9b20:	000a8780 	call	a878 <memcpy>
    9b24:	8080030b 	ldhu	r2,12(r16)
    9b28:	00fedfc4 	movi	r3,-1153
    9b2c:	10c4703a 	and	r2,r2,r3
    9b30:	10802014 	ori	r2,r2,128
    9b34:	8080030d 	sth	r2,12(r16)
    9b38:	b549883a 	add	r4,r22,r21
    9b3c:	9d4bc83a 	sub	r5,r19,r21
    9b40:	85800415 	stw	r22,16(r16)
    9b44:	84c00515 	stw	r19,20(r16)
    9b48:	81000015 	stw	r4,0(r16)
    9b4c:	902d883a 	mov	r22,r18
    9b50:	81400215 	stw	r5,8(r16)
    9b54:	9027883a 	mov	r19,r18
    9b58:	003f3a06 	br	9844 <__alt_mem_Flash_flash_data+0xf4009844>
    9b5c:	a009883a 	mov	r4,r20
    9b60:	800b883a 	mov	r5,r16
    9b64:	0008ec80 	call	8ec8 <_fflush_r>
    9b68:	103fb926 	beq	r2,zero,9a50 <__alt_mem_Flash_flash_data+0xf4009a50>
    9b6c:	003f5f06 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>
    9b70:	a009883a 	mov	r4,r20
    9b74:	000bbd00 	call	bbd0 <_realloc_r>
    9b78:	102d883a 	mov	r22,r2
    9b7c:	103fee1e 	bne	r2,zero,9b38 <__alt_mem_Flash_flash_data+0xf4009b38>
    9b80:	81400417 	ldw	r5,16(r16)
    9b84:	a009883a 	mov	r4,r20
    9b88:	00094180 	call	9418 <_free_r>
    9b8c:	8080030b 	ldhu	r2,12(r16)
    9b90:	00ffdfc4 	movi	r3,-129
    9b94:	1884703a 	and	r2,r3,r2
    9b98:	00c00304 	movi	r3,12
    9b9c:	a0c00015 	stw	r3,0(r20)
    9ba0:	003f5306 	br	98f0 <__alt_mem_Flash_flash_data+0xf40098f0>
    9ba4:	94c00044 	addi	r19,r18,1
    9ba8:	02000044 	movi	r8,1
    9bac:	003f5a06 	br	9918 <__alt_mem_Flash_flash_data+0xf4009918>
    9bb0:	00bfffc4 	movi	r2,-1
    9bb4:	003f0206 	br	97c0 <__alt_mem_Flash_flash_data+0xf40097c0>
    9bb8:	00800304 	movi	r2,12
    9bbc:	a0800015 	stw	r2,0(r20)
    9bc0:	8080030b 	ldhu	r2,12(r16)
    9bc4:	003f4a06 	br	98f0 <__alt_mem_Flash_flash_data+0xf40098f0>

00009bc8 <_fwalk>:
    9bc8:	defff704 	addi	sp,sp,-36
    9bcc:	dd000415 	stw	r20,16(sp)
    9bd0:	dfc00815 	stw	ra,32(sp)
    9bd4:	ddc00715 	stw	r23,28(sp)
    9bd8:	dd800615 	stw	r22,24(sp)
    9bdc:	dd400515 	stw	r21,20(sp)
    9be0:	dcc00315 	stw	r19,12(sp)
    9be4:	dc800215 	stw	r18,8(sp)
    9be8:	dc400115 	stw	r17,4(sp)
    9bec:	dc000015 	stw	r16,0(sp)
    9bf0:	2500b804 	addi	r20,r4,736
    9bf4:	a0002326 	beq	r20,zero,9c84 <_fwalk+0xbc>
    9bf8:	282b883a 	mov	r21,r5
    9bfc:	002f883a 	mov	r23,zero
    9c00:	05800044 	movi	r22,1
    9c04:	04ffffc4 	movi	r19,-1
    9c08:	a4400117 	ldw	r17,4(r20)
    9c0c:	a4800217 	ldw	r18,8(r20)
    9c10:	8c7fffc4 	addi	r17,r17,-1
    9c14:	88000d16 	blt	r17,zero,9c4c <_fwalk+0x84>
    9c18:	94000304 	addi	r16,r18,12
    9c1c:	94800384 	addi	r18,r18,14
    9c20:	80c0000b 	ldhu	r3,0(r16)
    9c24:	8c7fffc4 	addi	r17,r17,-1
    9c28:	813ffd04 	addi	r4,r16,-12
    9c2c:	b0c0042e 	bgeu	r22,r3,9c40 <_fwalk+0x78>
    9c30:	90c0000f 	ldh	r3,0(r18)
    9c34:	1cc00226 	beq	r3,r19,9c40 <_fwalk+0x78>
    9c38:	a83ee83a 	callr	r21
    9c3c:	b8aeb03a 	or	r23,r23,r2
    9c40:	84001a04 	addi	r16,r16,104
    9c44:	94801a04 	addi	r18,r18,104
    9c48:	8cfff51e 	bne	r17,r19,9c20 <__alt_mem_Flash_flash_data+0xf4009c20>
    9c4c:	a5000017 	ldw	r20,0(r20)
    9c50:	a03fed1e 	bne	r20,zero,9c08 <__alt_mem_Flash_flash_data+0xf4009c08>
    9c54:	b805883a 	mov	r2,r23
    9c58:	dfc00817 	ldw	ra,32(sp)
    9c5c:	ddc00717 	ldw	r23,28(sp)
    9c60:	dd800617 	ldw	r22,24(sp)
    9c64:	dd400517 	ldw	r21,20(sp)
    9c68:	dd000417 	ldw	r20,16(sp)
    9c6c:	dcc00317 	ldw	r19,12(sp)
    9c70:	dc800217 	ldw	r18,8(sp)
    9c74:	dc400117 	ldw	r17,4(sp)
    9c78:	dc000017 	ldw	r16,0(sp)
    9c7c:	dec00904 	addi	sp,sp,36
    9c80:	f800283a 	ret
    9c84:	002f883a 	mov	r23,zero
    9c88:	003ff206 	br	9c54 <__alt_mem_Flash_flash_data+0xf4009c54>

00009c8c <_fwalk_reent>:
    9c8c:	defff704 	addi	sp,sp,-36
    9c90:	dd400515 	stw	r21,20(sp)
    9c94:	dfc00815 	stw	ra,32(sp)
    9c98:	ddc00715 	stw	r23,28(sp)
    9c9c:	dd800615 	stw	r22,24(sp)
    9ca0:	dd000415 	stw	r20,16(sp)
    9ca4:	dcc00315 	stw	r19,12(sp)
    9ca8:	dc800215 	stw	r18,8(sp)
    9cac:	dc400115 	stw	r17,4(sp)
    9cb0:	dc000015 	stw	r16,0(sp)
    9cb4:	2540b804 	addi	r21,r4,736
    9cb8:	a8002326 	beq	r21,zero,9d48 <_fwalk_reent+0xbc>
    9cbc:	2829883a 	mov	r20,r5
    9cc0:	202d883a 	mov	r22,r4
    9cc4:	002f883a 	mov	r23,zero
    9cc8:	04c00044 	movi	r19,1
    9ccc:	04bfffc4 	movi	r18,-1
    9cd0:	ac400117 	ldw	r17,4(r21)
    9cd4:	ac000217 	ldw	r16,8(r21)
    9cd8:	8c7fffc4 	addi	r17,r17,-1
    9cdc:	88000c16 	blt	r17,zero,9d10 <_fwalk_reent+0x84>
    9ce0:	84000304 	addi	r16,r16,12
    9ce4:	80c0000b 	ldhu	r3,0(r16)
    9ce8:	8c7fffc4 	addi	r17,r17,-1
    9cec:	817ffd04 	addi	r5,r16,-12
    9cf0:	98c0052e 	bgeu	r19,r3,9d08 <_fwalk_reent+0x7c>
    9cf4:	80c0008f 	ldh	r3,2(r16)
    9cf8:	b009883a 	mov	r4,r22
    9cfc:	1c800226 	beq	r3,r18,9d08 <_fwalk_reent+0x7c>
    9d00:	a03ee83a 	callr	r20
    9d04:	b8aeb03a 	or	r23,r23,r2
    9d08:	84001a04 	addi	r16,r16,104
    9d0c:	8cbff51e 	bne	r17,r18,9ce4 <__alt_mem_Flash_flash_data+0xf4009ce4>
    9d10:	ad400017 	ldw	r21,0(r21)
    9d14:	a83fee1e 	bne	r21,zero,9cd0 <__alt_mem_Flash_flash_data+0xf4009cd0>
    9d18:	b805883a 	mov	r2,r23
    9d1c:	dfc00817 	ldw	ra,32(sp)
    9d20:	ddc00717 	ldw	r23,28(sp)
    9d24:	dd800617 	ldw	r22,24(sp)
    9d28:	dd400517 	ldw	r21,20(sp)
    9d2c:	dd000417 	ldw	r20,16(sp)
    9d30:	dcc00317 	ldw	r19,12(sp)
    9d34:	dc800217 	ldw	r18,8(sp)
    9d38:	dc400117 	ldw	r17,4(sp)
    9d3c:	dc000017 	ldw	r16,0(sp)
    9d40:	dec00904 	addi	sp,sp,36
    9d44:	f800283a 	ret
    9d48:	002f883a 	mov	r23,zero
    9d4c:	003ff206 	br	9d18 <__alt_mem_Flash_flash_data+0xf4009d18>

00009d50 <_setlocale_r>:
    9d50:	30001b26 	beq	r6,zero,9dc0 <_setlocale_r+0x70>
    9d54:	014000b4 	movhi	r5,2
    9d58:	defffe04 	addi	sp,sp,-8
    9d5c:	297fa204 	addi	r5,r5,-376
    9d60:	3009883a 	mov	r4,r6
    9d64:	dc000015 	stw	r16,0(sp)
    9d68:	dfc00115 	stw	ra,4(sp)
    9d6c:	3021883a 	mov	r16,r6
    9d70:	000c33c0 	call	c33c <strcmp>
    9d74:	1000061e 	bne	r2,zero,9d90 <_setlocale_r+0x40>
    9d78:	008000b4 	movhi	r2,2
    9d7c:	10bfa104 	addi	r2,r2,-380
    9d80:	dfc00117 	ldw	ra,4(sp)
    9d84:	dc000017 	ldw	r16,0(sp)
    9d88:	dec00204 	addi	sp,sp,8
    9d8c:	f800283a 	ret
    9d90:	014000b4 	movhi	r5,2
    9d94:	297fa104 	addi	r5,r5,-380
    9d98:	8009883a 	mov	r4,r16
    9d9c:	000c33c0 	call	c33c <strcmp>
    9da0:	103ff526 	beq	r2,zero,9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9da4:	014000b4 	movhi	r5,2
    9da8:	297f8404 	addi	r5,r5,-496
    9dac:	8009883a 	mov	r4,r16
    9db0:	000c33c0 	call	c33c <strcmp>
    9db4:	103ff026 	beq	r2,zero,9d78 <__alt_mem_Flash_flash_data+0xf4009d78>
    9db8:	0005883a 	mov	r2,zero
    9dbc:	003ff006 	br	9d80 <__alt_mem_Flash_flash_data+0xf4009d80>
    9dc0:	008000b4 	movhi	r2,2
    9dc4:	10bfa104 	addi	r2,r2,-380
    9dc8:	f800283a 	ret

00009dcc <__locale_charset>:
    9dcc:	008000b4 	movhi	r2,2
    9dd0:	10820a04 	addi	r2,r2,2088
    9dd4:	f800283a 	ret

00009dd8 <__locale_mb_cur_max>:
    9dd8:	008000b4 	movhi	r2,2
    9ddc:	10889704 	addi	r2,r2,8796
    9de0:	10800017 	ldw	r2,0(r2)
    9de4:	f800283a 	ret

00009de8 <__locale_msgcharset>:
    9de8:	008000b4 	movhi	r2,2
    9dec:	10820204 	addi	r2,r2,2056
    9df0:	f800283a 	ret

00009df4 <__locale_cjk_lang>:
    9df4:	0005883a 	mov	r2,zero
    9df8:	f800283a 	ret

00009dfc <_localeconv_r>:
    9dfc:	008000b4 	movhi	r2,2
    9e00:	10821204 	addi	r2,r2,2120
    9e04:	f800283a 	ret

00009e08 <setlocale>:
    9e08:	00c000b4 	movhi	r3,2
    9e0c:	18c89604 	addi	r3,r3,8792
    9e10:	2005883a 	mov	r2,r4
    9e14:	19000017 	ldw	r4,0(r3)
    9e18:	280d883a 	mov	r6,r5
    9e1c:	100b883a 	mov	r5,r2
    9e20:	0009d501 	jmpi	9d50 <_setlocale_r>

00009e24 <localeconv>:
    9e24:	008000b4 	movhi	r2,2
    9e28:	10821204 	addi	r2,r2,2120
    9e2c:	f800283a 	ret

00009e30 <__smakebuf_r>:
    9e30:	2880030b 	ldhu	r2,12(r5)
    9e34:	10c0008c 	andi	r3,r2,2
    9e38:	1800401e 	bne	r3,zero,9f3c <__smakebuf_r+0x10c>
    9e3c:	deffec04 	addi	sp,sp,-80
    9e40:	dc000f15 	stw	r16,60(sp)
    9e44:	2821883a 	mov	r16,r5
    9e48:	2940038f 	ldh	r5,14(r5)
    9e4c:	dc401015 	stw	r17,64(sp)
    9e50:	dfc01315 	stw	ra,76(sp)
    9e54:	dcc01215 	stw	r19,72(sp)
    9e58:	dc801115 	stw	r18,68(sp)
    9e5c:	2023883a 	mov	r17,r4
    9e60:	28001b16 	blt	r5,zero,9ed0 <__smakebuf_r+0xa0>
    9e64:	d80d883a 	mov	r6,sp
    9e68:	000ef000 	call	ef00 <_fstat_r>
    9e6c:	10001716 	blt	r2,zero,9ecc <__smakebuf_r+0x9c>
    9e70:	d8800117 	ldw	r2,4(sp)
    9e74:	00e00014 	movui	r3,32768
    9e78:	10bc000c 	andi	r2,r2,61440
    9e7c:	10c03726 	beq	r2,r3,9f5c <__smakebuf_r+0x12c>
    9e80:	80c0030b 	ldhu	r3,12(r16)
    9e84:	18c20014 	ori	r3,r3,2048
    9e88:	80c0030d 	sth	r3,12(r16)
    9e8c:	00c80004 	movi	r3,8192
    9e90:	10c03c1e 	bne	r2,r3,9f84 <__smakebuf_r+0x154>
    9e94:	8140038f 	ldh	r5,14(r16)
    9e98:	8809883a 	mov	r4,r17
    9e9c:	000ef580 	call	ef58 <_isatty_r>
    9ea0:	10004e26 	beq	r2,zero,9fdc <__smakebuf_r+0x1ac>
    9ea4:	8080030b 	ldhu	r2,12(r16)
    9ea8:	04c00044 	movi	r19,1
    9eac:	80c010c4 	addi	r3,r16,67
    9eb0:	14c4b03a 	or	r2,r2,r19
    9eb4:	8080030d 	sth	r2,12(r16)
    9eb8:	80c00015 	stw	r3,0(r16)
    9ebc:	80c00415 	stw	r3,16(r16)
    9ec0:	84c00515 	stw	r19,20(r16)
    9ec4:	04810004 	movi	r18,1024
    9ec8:	00000706 	br	9ee8 <__smakebuf_r+0xb8>
    9ecc:	8080030b 	ldhu	r2,12(r16)
    9ed0:	10c0200c 	andi	r3,r2,128
    9ed4:	18001f1e 	bne	r3,zero,9f54 <__smakebuf_r+0x124>
    9ed8:	04810004 	movi	r18,1024
    9edc:	10820014 	ori	r2,r2,2048
    9ee0:	8080030d 	sth	r2,12(r16)
    9ee4:	0027883a 	mov	r19,zero
    9ee8:	8809883a 	mov	r4,r17
    9eec:	900b883a 	mov	r5,r18
    9ef0:	0009fe80 	call	9fe8 <_malloc_r>
    9ef4:	10002e26 	beq	r2,zero,9fb0 <__smakebuf_r+0x180>
    9ef8:	80c0030b 	ldhu	r3,12(r16)
    9efc:	01000074 	movhi	r4,1
    9f00:	2123d904 	addi	r4,r4,-28828
    9f04:	89000f15 	stw	r4,60(r17)
    9f08:	18c02014 	ori	r3,r3,128
    9f0c:	80c0030d 	sth	r3,12(r16)
    9f10:	80800015 	stw	r2,0(r16)
    9f14:	80800415 	stw	r2,16(r16)
    9f18:	84800515 	stw	r18,20(r16)
    9f1c:	98001c1e 	bne	r19,zero,9f90 <__smakebuf_r+0x160>
    9f20:	dfc01317 	ldw	ra,76(sp)
    9f24:	dcc01217 	ldw	r19,72(sp)
    9f28:	dc801117 	ldw	r18,68(sp)
    9f2c:	dc401017 	ldw	r17,64(sp)
    9f30:	dc000f17 	ldw	r16,60(sp)
    9f34:	dec01404 	addi	sp,sp,80
    9f38:	f800283a 	ret
    9f3c:	288010c4 	addi	r2,r5,67
    9f40:	28800015 	stw	r2,0(r5)
    9f44:	28800415 	stw	r2,16(r5)
    9f48:	00800044 	movi	r2,1
    9f4c:	28800515 	stw	r2,20(r5)
    9f50:	f800283a 	ret
    9f54:	04801004 	movi	r18,64
    9f58:	003fe006 	br	9edc <__alt_mem_Flash_flash_data+0xf4009edc>
    9f5c:	81000a17 	ldw	r4,40(r16)
    9f60:	00c00074 	movhi	r3,1
    9f64:	18f0b604 	addi	r3,r3,-15656
    9f68:	20ffc51e 	bne	r4,r3,9e80 <__alt_mem_Flash_flash_data+0xf4009e80>
    9f6c:	80c0030b 	ldhu	r3,12(r16)
    9f70:	01010004 	movi	r4,1024
    9f74:	81001315 	stw	r4,76(r16)
    9f78:	1906b03a 	or	r3,r3,r4
    9f7c:	80c0030d 	sth	r3,12(r16)
    9f80:	003fc206 	br	9e8c <__alt_mem_Flash_flash_data+0xf4009e8c>
    9f84:	0027883a 	mov	r19,zero
    9f88:	04810004 	movi	r18,1024
    9f8c:	003fd606 	br	9ee8 <__alt_mem_Flash_flash_data+0xf4009ee8>
    9f90:	8140038f 	ldh	r5,14(r16)
    9f94:	8809883a 	mov	r4,r17
    9f98:	000ef580 	call	ef58 <_isatty_r>
    9f9c:	103fe026 	beq	r2,zero,9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    9fa0:	8080030b 	ldhu	r2,12(r16)
    9fa4:	10800054 	ori	r2,r2,1
    9fa8:	8080030d 	sth	r2,12(r16)
    9fac:	003fdc06 	br	9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    9fb0:	8080030b 	ldhu	r2,12(r16)
    9fb4:	10c0800c 	andi	r3,r2,512
    9fb8:	183fd91e 	bne	r3,zero,9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    9fbc:	10800094 	ori	r2,r2,2
    9fc0:	80c010c4 	addi	r3,r16,67
    9fc4:	8080030d 	sth	r2,12(r16)
    9fc8:	00800044 	movi	r2,1
    9fcc:	80c00015 	stw	r3,0(r16)
    9fd0:	80c00415 	stw	r3,16(r16)
    9fd4:	80800515 	stw	r2,20(r16)
    9fd8:	003fd106 	br	9f20 <__alt_mem_Flash_flash_data+0xf4009f20>
    9fdc:	04c00044 	movi	r19,1
    9fe0:	04810004 	movi	r18,1024
    9fe4:	003fc006 	br	9ee8 <__alt_mem_Flash_flash_data+0xf4009ee8>

00009fe8 <_malloc_r>:
    9fe8:	defff504 	addi	sp,sp,-44
    9fec:	dc800315 	stw	r18,12(sp)
    9ff0:	dfc00a15 	stw	ra,40(sp)
    9ff4:	df000915 	stw	fp,36(sp)
    9ff8:	ddc00815 	stw	r23,32(sp)
    9ffc:	dd800715 	stw	r22,28(sp)
    a000:	dd400615 	stw	r21,24(sp)
    a004:	dd000515 	stw	r20,20(sp)
    a008:	dcc00415 	stw	r19,16(sp)
    a00c:	dc400215 	stw	r17,8(sp)
    a010:	dc000115 	stw	r16,4(sp)
    a014:	288002c4 	addi	r2,r5,11
    a018:	00c00584 	movi	r3,22
    a01c:	2025883a 	mov	r18,r4
    a020:	18802a2e 	bgeu	r3,r2,a0cc <_malloc_r+0xe4>
    a024:	047ffe04 	movi	r17,-8
    a028:	1462703a 	and	r17,r2,r17
    a02c:	88009e16 	blt	r17,zero,a2a8 <_malloc_r+0x2c0>
    a030:	89409d36 	bltu	r17,r5,a2a8 <_malloc_r+0x2c0>
    a034:	00130f80 	call	130f8 <__malloc_lock>
    a038:	00807dc4 	movi	r2,503
    a03c:	14402736 	bltu	r2,r17,a0dc <_malloc_r+0xf4>
    a040:	8806d0fa 	srli	r3,r17,3
    a044:	04c000b4 	movhi	r19,2
    a048:	9cc22004 	addi	r19,r19,2176
    a04c:	18c5883a 	add	r2,r3,r3
    a050:	1085883a 	add	r2,r2,r2
    a054:	1085883a 	add	r2,r2,r2
    a058:	9885883a 	add	r2,r19,r2
    a05c:	14000317 	ldw	r16,12(r2)
    a060:	80814a26 	beq	r16,r2,a58c <_malloc_r+0x5a4>
    a064:	80c00117 	ldw	r3,4(r16)
    a068:	81000317 	ldw	r4,12(r16)
    a06c:	00bfff04 	movi	r2,-4
    a070:	1884703a 	and	r2,r3,r2
    a074:	81400217 	ldw	r5,8(r16)
    a078:	8085883a 	add	r2,r16,r2
    a07c:	10c00117 	ldw	r3,4(r2)
    a080:	29000315 	stw	r4,12(r5)
    a084:	21400215 	stw	r5,8(r4)
    a088:	18c00054 	ori	r3,r3,1
    a08c:	10c00115 	stw	r3,4(r2)
    a090:	9009883a 	mov	r4,r18
    a094:	00132180 	call	13218 <__malloc_unlock>
    a098:	80800204 	addi	r2,r16,8
    a09c:	dfc00a17 	ldw	ra,40(sp)
    a0a0:	df000917 	ldw	fp,36(sp)
    a0a4:	ddc00817 	ldw	r23,32(sp)
    a0a8:	dd800717 	ldw	r22,28(sp)
    a0ac:	dd400617 	ldw	r21,24(sp)
    a0b0:	dd000517 	ldw	r20,20(sp)
    a0b4:	dcc00417 	ldw	r19,16(sp)
    a0b8:	dc800317 	ldw	r18,12(sp)
    a0bc:	dc400217 	ldw	r17,8(sp)
    a0c0:	dc000117 	ldw	r16,4(sp)
    a0c4:	dec00b04 	addi	sp,sp,44
    a0c8:	f800283a 	ret
    a0cc:	04400404 	movi	r17,16
    a0d0:	89407536 	bltu	r17,r5,a2a8 <_malloc_r+0x2c0>
    a0d4:	00130f80 	call	130f8 <__malloc_lock>
    a0d8:	003fd906 	br	a040 <__alt_mem_Flash_flash_data+0xf400a040>
    a0dc:	8806d27a 	srli	r3,r17,9
    a0e0:	18007526 	beq	r3,zero,a2b8 <_malloc_r+0x2d0>
    a0e4:	00800104 	movi	r2,4
    a0e8:	10c0ef36 	bltu	r2,r3,a4a8 <_malloc_r+0x4c0>
    a0ec:	8806d1ba 	srli	r3,r17,6
    a0f0:	19c00e04 	addi	r7,r3,56
    a0f4:	39cb883a 	add	r5,r7,r7
    a0f8:	04c000b4 	movhi	r19,2
    a0fc:	294b883a 	add	r5,r5,r5
    a100:	9cc22004 	addi	r19,r19,2176
    a104:	294b883a 	add	r5,r5,r5
    a108:	994b883a 	add	r5,r19,r5
    a10c:	2c000317 	ldw	r16,12(r5)
    a110:	2c000e26 	beq	r5,r16,a14c <_malloc_r+0x164>
    a114:	80800117 	ldw	r2,4(r16)
    a118:	01bfff04 	movi	r6,-4
    a11c:	010003c4 	movi	r4,15
    a120:	1184703a 	and	r2,r2,r6
    a124:	1447c83a 	sub	r3,r2,r17
    a128:	20c00716 	blt	r4,r3,a148 <_malloc_r+0x160>
    a12c:	1800650e 	bge	r3,zero,a2c4 <_malloc_r+0x2dc>
    a130:	84000317 	ldw	r16,12(r16)
    a134:	2c000526 	beq	r5,r16,a14c <_malloc_r+0x164>
    a138:	80800117 	ldw	r2,4(r16)
    a13c:	1184703a 	and	r2,r2,r6
    a140:	1447c83a 	sub	r3,r2,r17
    a144:	20fff90e 	bge	r4,r3,a12c <__alt_mem_Flash_flash_data+0xf400a12c>
    a148:	39ffffc4 	addi	r7,r7,-1
    a14c:	38c00044 	addi	r3,r7,1
    a150:	018000b4 	movhi	r6,2
    a154:	9c000417 	ldw	r16,16(r19)
    a158:	31822004 	addi	r6,r6,2176
    a15c:	32400204 	addi	r9,r6,8
    a160:	82410326 	beq	r16,r9,a570 <_malloc_r+0x588>
    a164:	81000117 	ldw	r4,4(r16)
    a168:	00bfff04 	movi	r2,-4
    a16c:	208e703a 	and	r7,r4,r2
    a170:	3c45c83a 	sub	r2,r7,r17
    a174:	010003c4 	movi	r4,15
    a178:	2080ee16 	blt	r4,r2,a534 <_malloc_r+0x54c>
    a17c:	32400515 	stw	r9,20(r6)
    a180:	32400415 	stw	r9,16(r6)
    a184:	1000510e 	bge	r2,zero,a2cc <_malloc_r+0x2e4>
    a188:	00807fc4 	movi	r2,511
    a18c:	11c0ce36 	bltu	r2,r7,a4c8 <_malloc_r+0x4e0>
    a190:	3808d0fa 	srli	r4,r7,3
    a194:	01c00044 	movi	r7,1
    a198:	30800117 	ldw	r2,4(r6)
    a19c:	210b883a 	add	r5,r4,r4
    a1a0:	294b883a 	add	r5,r5,r5
    a1a4:	2009d0ba 	srai	r4,r4,2
    a1a8:	294b883a 	add	r5,r5,r5
    a1ac:	298b883a 	add	r5,r5,r6
    a1b0:	2a000217 	ldw	r8,8(r5)
    a1b4:	3908983a 	sll	r4,r7,r4
    a1b8:	81400315 	stw	r5,12(r16)
    a1bc:	82000215 	stw	r8,8(r16)
    a1c0:	2088b03a 	or	r4,r4,r2
    a1c4:	2c000215 	stw	r16,8(r5)
    a1c8:	31000115 	stw	r4,4(r6)
    a1cc:	44000315 	stw	r16,12(r8)
    a1d0:	1805d0ba 	srai	r2,r3,2
    a1d4:	01400044 	movi	r5,1
    a1d8:	288a983a 	sll	r5,r5,r2
    a1dc:	21404336 	bltu	r4,r5,a2ec <_malloc_r+0x304>
    a1e0:	2144703a 	and	r2,r4,r5
    a1e4:	10000a1e 	bne	r2,zero,a210 <_malloc_r+0x228>
    a1e8:	00bfff04 	movi	r2,-4
    a1ec:	294b883a 	add	r5,r5,r5
    a1f0:	1886703a 	and	r3,r3,r2
    a1f4:	2144703a 	and	r2,r4,r5
    a1f8:	18c00104 	addi	r3,r3,4
    a1fc:	1000041e 	bne	r2,zero,a210 <_malloc_r+0x228>
    a200:	294b883a 	add	r5,r5,r5
    a204:	2144703a 	and	r2,r4,r5
    a208:	18c00104 	addi	r3,r3,4
    a20c:	103ffc26 	beq	r2,zero,a200 <__alt_mem_Flash_flash_data+0xf400a200>
    a210:	023fff04 	movi	r8,-4
    a214:	01c003c4 	movi	r7,15
    a218:	18c5883a 	add	r2,r3,r3
    a21c:	1085883a 	add	r2,r2,r2
    a220:	1085883a 	add	r2,r2,r2
    a224:	9895883a 	add	r10,r19,r2
    a228:	52c00304 	addi	r11,r10,12
    a22c:	1819883a 	mov	r12,r3
    a230:	5c000017 	ldw	r16,0(r11)
    a234:	59bffd04 	addi	r6,r11,-12
    a238:	8180041e 	bne	r16,r6,a24c <_malloc_r+0x264>
    a23c:	0000ce06 	br	a578 <_malloc_r+0x590>
    a240:	2000d70e 	bge	r4,zero,a5a0 <_malloc_r+0x5b8>
    a244:	84000317 	ldw	r16,12(r16)
    a248:	8180cb26 	beq	r16,r6,a578 <_malloc_r+0x590>
    a24c:	80800117 	ldw	r2,4(r16)
    a250:	1204703a 	and	r2,r2,r8
    a254:	1449c83a 	sub	r4,r2,r17
    a258:	393ff90e 	bge	r7,r4,a240 <__alt_mem_Flash_flash_data+0xf400a240>
    a25c:	80800317 	ldw	r2,12(r16)
    a260:	80c00217 	ldw	r3,8(r16)
    a264:	89400054 	ori	r5,r17,1
    a268:	81400115 	stw	r5,4(r16)
    a26c:	18800315 	stw	r2,12(r3)
    a270:	10c00215 	stw	r3,8(r2)
    a274:	8463883a 	add	r17,r16,r17
    a278:	9c400515 	stw	r17,20(r19)
    a27c:	9c400415 	stw	r17,16(r19)
    a280:	20800054 	ori	r2,r4,1
    a284:	88800115 	stw	r2,4(r17)
    a288:	8a400315 	stw	r9,12(r17)
    a28c:	8a400215 	stw	r9,8(r17)
    a290:	8923883a 	add	r17,r17,r4
    a294:	89000015 	stw	r4,0(r17)
    a298:	9009883a 	mov	r4,r18
    a29c:	00132180 	call	13218 <__malloc_unlock>
    a2a0:	80800204 	addi	r2,r16,8
    a2a4:	003f7d06 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a2a8:	00800304 	movi	r2,12
    a2ac:	90800015 	stw	r2,0(r18)
    a2b0:	0005883a 	mov	r2,zero
    a2b4:	003f7906 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a2b8:	01401f84 	movi	r5,126
    a2bc:	01c00fc4 	movi	r7,63
    a2c0:	003f8d06 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a2c4:	81000317 	ldw	r4,12(r16)
    a2c8:	003f6a06 	br	a074 <__alt_mem_Flash_flash_data+0xf400a074>
    a2cc:	81c5883a 	add	r2,r16,r7
    a2d0:	10c00117 	ldw	r3,4(r2)
    a2d4:	9009883a 	mov	r4,r18
    a2d8:	18c00054 	ori	r3,r3,1
    a2dc:	10c00115 	stw	r3,4(r2)
    a2e0:	00132180 	call	13218 <__malloc_unlock>
    a2e4:	80800204 	addi	r2,r16,8
    a2e8:	003f6c06 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a2ec:	9c000217 	ldw	r16,8(r19)
    a2f0:	00bfff04 	movi	r2,-4
    a2f4:	85800117 	ldw	r22,4(r16)
    a2f8:	b0ac703a 	and	r22,r22,r2
    a2fc:	b4400336 	bltu	r22,r17,a30c <_malloc_r+0x324>
    a300:	b445c83a 	sub	r2,r22,r17
    a304:	00c003c4 	movi	r3,15
    a308:	18805d16 	blt	r3,r2,a480 <_malloc_r+0x498>
    a30c:	05c000b4 	movhi	r23,2
    a310:	008000b4 	movhi	r2,2
    a314:	bdc89804 	addi	r23,r23,8800
    a318:	1090b004 	addi	r2,r2,17088
    a31c:	15400017 	ldw	r21,0(r2)
    a320:	b9000017 	ldw	r4,0(r23)
    a324:	00ffffc4 	movi	r3,-1
    a328:	858d883a 	add	r6,r16,r22
    a32c:	8d6b883a 	add	r21,r17,r21
    a330:	20c0e426 	beq	r4,r3,a6c4 <_malloc_r+0x6dc>
    a334:	ad4403c4 	addi	r21,r21,4111
    a338:	00fc0004 	movi	r3,-4096
    a33c:	a8ea703a 	and	r21,r21,r3
    a340:	9009883a 	mov	r4,r18
    a344:	a80b883a 	mov	r5,r21
    a348:	d9800015 	stw	r6,0(sp)
    a34c:	000c1ac0 	call	c1ac <_sbrk_r>
    a350:	00ffffc4 	movi	r3,-1
    a354:	1029883a 	mov	r20,r2
    a358:	d9800017 	ldw	r6,0(sp)
    a35c:	10c0a426 	beq	r2,r3,a5f0 <_malloc_r+0x608>
    a360:	1180a236 	bltu	r2,r6,a5ec <_malloc_r+0x604>
    a364:	070000b4 	movhi	fp,2
    a368:	e710d204 	addi	fp,fp,17224
    a36c:	e0c00017 	ldw	r3,0(fp)
    a370:	a8c7883a 	add	r3,r21,r3
    a374:	e0c00015 	stw	r3,0(fp)
    a378:	3500da26 	beq	r6,r20,a6e4 <_malloc_r+0x6fc>
    a37c:	b9000017 	ldw	r4,0(r23)
    a380:	00bfffc4 	movi	r2,-1
    a384:	2080e426 	beq	r4,r2,a718 <_malloc_r+0x730>
    a388:	a185c83a 	sub	r2,r20,r6
    a38c:	1885883a 	add	r2,r3,r2
    a390:	e0800015 	stw	r2,0(fp)
    a394:	a0c001cc 	andi	r3,r20,7
    a398:	1800b526 	beq	r3,zero,a670 <_malloc_r+0x688>
    a39c:	a0e9c83a 	sub	r20,r20,r3
    a3a0:	00840204 	movi	r2,4104
    a3a4:	a5000204 	addi	r20,r20,8
    a3a8:	10c7c83a 	sub	r3,r2,r3
    a3ac:	a545883a 	add	r2,r20,r21
    a3b0:	1083ffcc 	andi	r2,r2,4095
    a3b4:	18abc83a 	sub	r21,r3,r2
    a3b8:	9009883a 	mov	r4,r18
    a3bc:	a80b883a 	mov	r5,r21
    a3c0:	000c1ac0 	call	c1ac <_sbrk_r>
    a3c4:	00ffffc4 	movi	r3,-1
    a3c8:	10c0d026 	beq	r2,r3,a70c <_malloc_r+0x724>
    a3cc:	1507c83a 	sub	r3,r2,r20
    a3d0:	a8c7883a 	add	r3,r21,r3
    a3d4:	18c00054 	ori	r3,r3,1
    a3d8:	e0800017 	ldw	r2,0(fp)
    a3dc:	9d000215 	stw	r20,8(r19)
    a3e0:	a0c00115 	stw	r3,4(r20)
    a3e4:	a887883a 	add	r3,r21,r2
    a3e8:	e0c00015 	stw	r3,0(fp)
    a3ec:	84c00e26 	beq	r16,r19,a428 <_malloc_r+0x440>
    a3f0:	018003c4 	movi	r6,15
    a3f4:	3580a02e 	bgeu	r6,r22,a678 <_malloc_r+0x690>
    a3f8:	81400117 	ldw	r5,4(r16)
    a3fc:	013ffe04 	movi	r4,-8
    a400:	b0bffd04 	addi	r2,r22,-12
    a404:	1104703a 	and	r2,r2,r4
    a408:	2900004c 	andi	r4,r5,1
    a40c:	1108b03a 	or	r4,r2,r4
    a410:	81000115 	stw	r4,4(r16)
    a414:	01400144 	movi	r5,5
    a418:	8089883a 	add	r4,r16,r2
    a41c:	21400115 	stw	r5,4(r4)
    a420:	21400215 	stw	r5,8(r4)
    a424:	3080c036 	bltu	r6,r2,a728 <_malloc_r+0x740>
    a428:	008000b4 	movhi	r2,2
    a42c:	1090af04 	addi	r2,r2,17084
    a430:	11000017 	ldw	r4,0(r2)
    a434:	20c0012e 	bgeu	r4,r3,a43c <_malloc_r+0x454>
    a438:	10c00015 	stw	r3,0(r2)
    a43c:	008000b4 	movhi	r2,2
    a440:	1090ae04 	addi	r2,r2,17080
    a444:	11000017 	ldw	r4,0(r2)
    a448:	9c000217 	ldw	r16,8(r19)
    a44c:	20c0012e 	bgeu	r4,r3,a454 <_malloc_r+0x46c>
    a450:	10c00015 	stw	r3,0(r2)
    a454:	80c00117 	ldw	r3,4(r16)
    a458:	00bfff04 	movi	r2,-4
    a45c:	1886703a 	and	r3,r3,r2
    a460:	1c45c83a 	sub	r2,r3,r17
    a464:	1c400236 	bltu	r3,r17,a470 <_malloc_r+0x488>
    a468:	00c003c4 	movi	r3,15
    a46c:	18800416 	blt	r3,r2,a480 <_malloc_r+0x498>
    a470:	9009883a 	mov	r4,r18
    a474:	00132180 	call	13218 <__malloc_unlock>
    a478:	0005883a 	mov	r2,zero
    a47c:	003f0706 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a480:	88c00054 	ori	r3,r17,1
    a484:	80c00115 	stw	r3,4(r16)
    a488:	8463883a 	add	r17,r16,r17
    a48c:	10800054 	ori	r2,r2,1
    a490:	9c400215 	stw	r17,8(r19)
    a494:	88800115 	stw	r2,4(r17)
    a498:	9009883a 	mov	r4,r18
    a49c:	00132180 	call	13218 <__malloc_unlock>
    a4a0:	80800204 	addi	r2,r16,8
    a4a4:	003efd06 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a4a8:	00800504 	movi	r2,20
    a4ac:	10c0482e 	bgeu	r2,r3,a5d0 <_malloc_r+0x5e8>
    a4b0:	00801504 	movi	r2,84
    a4b4:	10c06836 	bltu	r2,r3,a658 <_malloc_r+0x670>
    a4b8:	8806d33a 	srli	r3,r17,12
    a4bc:	19c01b84 	addi	r7,r3,110
    a4c0:	39cb883a 	add	r5,r7,r7
    a4c4:	003f0c06 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a4c8:	3804d27a 	srli	r2,r7,9
    a4cc:	01000104 	movi	r4,4
    a4d0:	2080422e 	bgeu	r4,r2,a5dc <_malloc_r+0x5f4>
    a4d4:	01000504 	movi	r4,20
    a4d8:	20807c36 	bltu	r4,r2,a6cc <_malloc_r+0x6e4>
    a4dc:	110016c4 	addi	r4,r2,91
    a4e0:	210b883a 	add	r5,r4,r4
    a4e4:	294b883a 	add	r5,r5,r5
    a4e8:	294b883a 	add	r5,r5,r5
    a4ec:	994b883a 	add	r5,r19,r5
    a4f0:	28800217 	ldw	r2,8(r5)
    a4f4:	020000b4 	movhi	r8,2
    a4f8:	42022004 	addi	r8,r8,2176
    a4fc:	11406326 	beq	r2,r5,a68c <_malloc_r+0x6a4>
    a500:	01bfff04 	movi	r6,-4
    a504:	11000117 	ldw	r4,4(r2)
    a508:	2188703a 	and	r4,r4,r6
    a50c:	3900022e 	bgeu	r7,r4,a518 <_malloc_r+0x530>
    a510:	10800217 	ldw	r2,8(r2)
    a514:	28bffb1e 	bne	r5,r2,a504 <__alt_mem_Flash_flash_data+0xf400a504>
    a518:	11800317 	ldw	r6,12(r2)
    a51c:	99000117 	ldw	r4,4(r19)
    a520:	81800315 	stw	r6,12(r16)
    a524:	80800215 	stw	r2,8(r16)
    a528:	34000215 	stw	r16,8(r6)
    a52c:	14000315 	stw	r16,12(r2)
    a530:	003f2706 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    a534:	88c00054 	ori	r3,r17,1
    a538:	80c00115 	stw	r3,4(r16)
    a53c:	8463883a 	add	r17,r16,r17
    a540:	34400515 	stw	r17,20(r6)
    a544:	34400415 	stw	r17,16(r6)
    a548:	10c00054 	ori	r3,r2,1
    a54c:	8a400315 	stw	r9,12(r17)
    a550:	8a400215 	stw	r9,8(r17)
    a554:	88c00115 	stw	r3,4(r17)
    a558:	88a3883a 	add	r17,r17,r2
    a55c:	88800015 	stw	r2,0(r17)
    a560:	9009883a 	mov	r4,r18
    a564:	00132180 	call	13218 <__malloc_unlock>
    a568:	80800204 	addi	r2,r16,8
    a56c:	003ecb06 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a570:	31000117 	ldw	r4,4(r6)
    a574:	003f1606 	br	a1d0 <__alt_mem_Flash_flash_data+0xf400a1d0>
    a578:	63000044 	addi	r12,r12,1
    a57c:	608000cc 	andi	r2,r12,3
    a580:	5ac00204 	addi	r11,r11,8
    a584:	103f2a1e 	bne	r2,zero,a230 <__alt_mem_Flash_flash_data+0xf400a230>
    a588:	00002106 	br	a610 <_malloc_r+0x628>
    a58c:	80800204 	addi	r2,r16,8
    a590:	84000517 	ldw	r16,20(r16)
    a594:	143eb31e 	bne	r2,r16,a064 <__alt_mem_Flash_flash_data+0xf400a064>
    a598:	18c00084 	addi	r3,r3,2
    a59c:	003eec06 	br	a150 <__alt_mem_Flash_flash_data+0xf400a150>
    a5a0:	8085883a 	add	r2,r16,r2
    a5a4:	10c00117 	ldw	r3,4(r2)
    a5a8:	81000317 	ldw	r4,12(r16)
    a5ac:	81400217 	ldw	r5,8(r16)
    a5b0:	18c00054 	ori	r3,r3,1
    a5b4:	10c00115 	stw	r3,4(r2)
    a5b8:	29000315 	stw	r4,12(r5)
    a5bc:	21400215 	stw	r5,8(r4)
    a5c0:	9009883a 	mov	r4,r18
    a5c4:	00132180 	call	13218 <__malloc_unlock>
    a5c8:	80800204 	addi	r2,r16,8
    a5cc:	003eb306 	br	a09c <__alt_mem_Flash_flash_data+0xf400a09c>
    a5d0:	19c016c4 	addi	r7,r3,91
    a5d4:	39cb883a 	add	r5,r7,r7
    a5d8:	003ec706 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a5dc:	3804d1ba 	srli	r2,r7,6
    a5e0:	11000e04 	addi	r4,r2,56
    a5e4:	210b883a 	add	r5,r4,r4
    a5e8:	003fbe06 	br	a4e4 <__alt_mem_Flash_flash_data+0xf400a4e4>
    a5ec:	84ff5d26 	beq	r16,r19,a364 <__alt_mem_Flash_flash_data+0xf400a364>
    a5f0:	9c000217 	ldw	r16,8(r19)
    a5f4:	00bfff04 	movi	r2,-4
    a5f8:	80c00117 	ldw	r3,4(r16)
    a5fc:	1886703a 	and	r3,r3,r2
    a600:	003f9706 	br	a460 <__alt_mem_Flash_flash_data+0xf400a460>
    a604:	52800017 	ldw	r10,0(r10)
    a608:	18ffffc4 	addi	r3,r3,-1
    a60c:	50805c1e 	bne	r10,r2,a780 <_malloc_r+0x798>
    a610:	190000cc 	andi	r4,r3,3
    a614:	50bffe04 	addi	r2,r10,-8
    a618:	203ffa1e 	bne	r4,zero,a604 <__alt_mem_Flash_flash_data+0xf400a604>
    a61c:	98800117 	ldw	r2,4(r19)
    a620:	0146303a 	nor	r3,zero,r5
    a624:	1884703a 	and	r2,r3,r2
    a628:	98800115 	stw	r2,4(r19)
    a62c:	294b883a 	add	r5,r5,r5
    a630:	117f2e36 	bltu	r2,r5,a2ec <__alt_mem_Flash_flash_data+0xf400a2ec>
    a634:	283f2d26 	beq	r5,zero,a2ec <__alt_mem_Flash_flash_data+0xf400a2ec>
    a638:	1146703a 	and	r3,r2,r5
    a63c:	1800521e 	bne	r3,zero,a788 <_malloc_r+0x7a0>
    a640:	6007883a 	mov	r3,r12
    a644:	294b883a 	add	r5,r5,r5
    a648:	1148703a 	and	r4,r2,r5
    a64c:	18c00104 	addi	r3,r3,4
    a650:	203ffc26 	beq	r4,zero,a644 <__alt_mem_Flash_flash_data+0xf400a644>
    a654:	003ef006 	br	a218 <__alt_mem_Flash_flash_data+0xf400a218>
    a658:	00805504 	movi	r2,340
    a65c:	10c01336 	bltu	r2,r3,a6ac <_malloc_r+0x6c4>
    a660:	8806d3fa 	srli	r3,r17,15
    a664:	19c01dc4 	addi	r7,r3,119
    a668:	39cb883a 	add	r5,r7,r7
    a66c:	003ea206 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a670:	00c40004 	movi	r3,4096
    a674:	003f4d06 	br	a3ac <__alt_mem_Flash_flash_data+0xf400a3ac>
    a678:	00800044 	movi	r2,1
    a67c:	a0800115 	stw	r2,4(r20)
    a680:	a021883a 	mov	r16,r20
    a684:	0007883a 	mov	r3,zero
    a688:	003f7506 	br	a460 <__alt_mem_Flash_flash_data+0xf400a460>
    a68c:	200bd0ba 	srai	r5,r4,2
    a690:	01800044 	movi	r6,1
    a694:	41000117 	ldw	r4,4(r8)
    a698:	314a983a 	sll	r5,r6,r5
    a69c:	100d883a 	mov	r6,r2
    a6a0:	2908b03a 	or	r4,r5,r4
    a6a4:	41000115 	stw	r4,4(r8)
    a6a8:	003f9d06 	br	a520 <__alt_mem_Flash_flash_data+0xf400a520>
    a6ac:	00815504 	movi	r2,1364
    a6b0:	10c01336 	bltu	r2,r3,a700 <_malloc_r+0x718>
    a6b4:	8806d4ba 	srli	r3,r17,18
    a6b8:	19c01f04 	addi	r7,r3,124
    a6bc:	39cb883a 	add	r5,r7,r7
    a6c0:	003e8d06 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a6c4:	ad400404 	addi	r21,r21,16
    a6c8:	003f1d06 	br	a340 <__alt_mem_Flash_flash_data+0xf400a340>
    a6cc:	01001504 	movi	r4,84
    a6d0:	20801c36 	bltu	r4,r2,a744 <_malloc_r+0x75c>
    a6d4:	3804d33a 	srli	r2,r7,12
    a6d8:	11001b84 	addi	r4,r2,110
    a6dc:	210b883a 	add	r5,r4,r4
    a6e0:	003f8006 	br	a4e4 <__alt_mem_Flash_flash_data+0xf400a4e4>
    a6e4:	3083ffcc 	andi	r2,r6,4095
    a6e8:	103f241e 	bne	r2,zero,a37c <__alt_mem_Flash_flash_data+0xf400a37c>
    a6ec:	99000217 	ldw	r4,8(r19)
    a6f0:	ad85883a 	add	r2,r21,r22
    a6f4:	10800054 	ori	r2,r2,1
    a6f8:	20800115 	stw	r2,4(r4)
    a6fc:	003f4a06 	br	a428 <__alt_mem_Flash_flash_data+0xf400a428>
    a700:	01403f04 	movi	r5,252
    a704:	01c01f84 	movi	r7,126
    a708:	003e7b06 	br	a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a70c:	00c00044 	movi	r3,1
    a710:	002b883a 	mov	r21,zero
    a714:	003f3006 	br	a3d8 <__alt_mem_Flash_flash_data+0xf400a3d8>
    a718:	008000b4 	movhi	r2,2
    a71c:	10889804 	addi	r2,r2,8800
    a720:	15000015 	stw	r20,0(r2)
    a724:	003f1b06 	br	a394 <__alt_mem_Flash_flash_data+0xf400a394>
    a728:	9009883a 	mov	r4,r18
    a72c:	81400204 	addi	r5,r16,8
    a730:	00094180 	call	9418 <_free_r>
    a734:	008000b4 	movhi	r2,2
    a738:	1090d204 	addi	r2,r2,17224
    a73c:	10c00017 	ldw	r3,0(r2)
    a740:	003f3906 	br	a428 <__alt_mem_Flash_flash_data+0xf400a428>
    a744:	01005504 	movi	r4,340
    a748:	20800436 	bltu	r4,r2,a75c <_malloc_r+0x774>
    a74c:	3804d3fa 	srli	r2,r7,15
    a750:	11001dc4 	addi	r4,r2,119
    a754:	210b883a 	add	r5,r4,r4
    a758:	003f6206 	br	a4e4 <__alt_mem_Flash_flash_data+0xf400a4e4>
    a75c:	01015504 	movi	r4,1364
    a760:	20800436 	bltu	r4,r2,a774 <_malloc_r+0x78c>
    a764:	3804d4ba 	srli	r2,r7,18
    a768:	11001f04 	addi	r4,r2,124
    a76c:	210b883a 	add	r5,r4,r4
    a770:	003f5c06 	br	a4e4 <__alt_mem_Flash_flash_data+0xf400a4e4>
    a774:	01403f04 	movi	r5,252
    a778:	01001f84 	movi	r4,126
    a77c:	003f5906 	br	a4e4 <__alt_mem_Flash_flash_data+0xf400a4e4>
    a780:	98800117 	ldw	r2,4(r19)
    a784:	003fa906 	br	a62c <__alt_mem_Flash_flash_data+0xf400a62c>
    a788:	6007883a 	mov	r3,r12
    a78c:	003ea206 	br	a218 <__alt_mem_Flash_flash_data+0xf400a218>

0000a790 <memchr>:
    a790:	208000cc 	andi	r2,r4,3
    a794:	280f883a 	mov	r7,r5
    a798:	10003526 	beq	r2,zero,a870 <memchr+0xe0>
    a79c:	30bfffc4 	addi	r2,r6,-1
    a7a0:	30001b26 	beq	r6,zero,a810 <memchr+0x80>
    a7a4:	21800003 	ldbu	r6,0(r4)
    a7a8:	28c03fcc 	andi	r3,r5,255
    a7ac:	30c01a26 	beq	r6,r3,a818 <memchr+0x88>
    a7b0:	180d883a 	mov	r6,r3
    a7b4:	00000406 	br	a7c8 <memchr+0x38>
    a7b8:	10001526 	beq	r2,zero,a810 <memchr+0x80>
    a7bc:	20c00003 	ldbu	r3,0(r4)
    a7c0:	10bfffc4 	addi	r2,r2,-1
    a7c4:	19801426 	beq	r3,r6,a818 <memchr+0x88>
    a7c8:	21000044 	addi	r4,r4,1
    a7cc:	20c000cc 	andi	r3,r4,3
    a7d0:	183ff91e 	bne	r3,zero,a7b8 <__alt_mem_Flash_flash_data+0xf400a7b8>
    a7d4:	024000c4 	movi	r9,3
    a7d8:	48801136 	bltu	r9,r2,a820 <memchr+0x90>
    a7dc:	10000c26 	beq	r2,zero,a810 <memchr+0x80>
    a7e0:	20c00003 	ldbu	r3,0(r4)
    a7e4:	29403fcc 	andi	r5,r5,255
    a7e8:	19400b26 	beq	r3,r5,a818 <memchr+0x88>
    a7ec:	20c00044 	addi	r3,r4,1
    a7f0:	2085883a 	add	r2,r4,r2
    a7f4:	39803fcc 	andi	r6,r7,255
    a7f8:	00000306 	br	a808 <memchr+0x78>
    a7fc:	18c00044 	addi	r3,r3,1
    a800:	197fffc3 	ldbu	r5,-1(r3)
    a804:	29800426 	beq	r5,r6,a818 <memchr+0x88>
    a808:	1809883a 	mov	r4,r3
    a80c:	18bffb1e 	bne	r3,r2,a7fc <__alt_mem_Flash_flash_data+0xf400a7fc>
    a810:	0005883a 	mov	r2,zero
    a814:	f800283a 	ret
    a818:	2005883a 	mov	r2,r4
    a81c:	f800283a 	ret
    a820:	28c03fcc 	andi	r3,r5,255
    a824:	1810923a 	slli	r8,r3,8
    a828:	02ffbff4 	movhi	r11,65279
    a82c:	02a02074 	movhi	r10,32897
    a830:	40c6b03a 	or	r3,r8,r3
    a834:	1810943a 	slli	r8,r3,16
    a838:	5affbfc4 	addi	r11,r11,-257
    a83c:	52a02004 	addi	r10,r10,-32640
    a840:	40d0b03a 	or	r8,r8,r3
    a844:	20c00017 	ldw	r3,0(r4)
    a848:	40c6f03a 	xor	r3,r8,r3
    a84c:	1acd883a 	add	r6,r3,r11
    a850:	00c6303a 	nor	r3,zero,r3
    a854:	30c6703a 	and	r3,r6,r3
    a858:	1a86703a 	and	r3,r3,r10
    a85c:	183fdf1e 	bne	r3,zero,a7dc <__alt_mem_Flash_flash_data+0xf400a7dc>
    a860:	10bfff04 	addi	r2,r2,-4
    a864:	21000104 	addi	r4,r4,4
    a868:	48bff636 	bltu	r9,r2,a844 <__alt_mem_Flash_flash_data+0xf400a844>
    a86c:	003fdb06 	br	a7dc <__alt_mem_Flash_flash_data+0xf400a7dc>
    a870:	3005883a 	mov	r2,r6
    a874:	003fd706 	br	a7d4 <__alt_mem_Flash_flash_data+0xf400a7d4>

0000a878 <memcpy>:
    a878:	deffff04 	addi	sp,sp,-4
    a87c:	dc000015 	stw	r16,0(sp)
    a880:	00c003c4 	movi	r3,15
    a884:	2005883a 	mov	r2,r4
    a888:	1980432e 	bgeu	r3,r6,a998 <memcpy+0x120>
    a88c:	2146b03a 	or	r3,r4,r5
    a890:	18c000cc 	andi	r3,r3,3
    a894:	1800421e 	bne	r3,zero,a9a0 <memcpy+0x128>
    a898:	343ffc04 	addi	r16,r6,-16
    a89c:	8020d13a 	srli	r16,r16,4
    a8a0:	28c00104 	addi	r3,r5,4
    a8a4:	23400104 	addi	r13,r4,4
    a8a8:	801e913a 	slli	r15,r16,4
    a8ac:	2b000204 	addi	r12,r5,8
    a8b0:	22c00204 	addi	r11,r4,8
    a8b4:	7bc00504 	addi	r15,r15,20
    a8b8:	2a800304 	addi	r10,r5,12
    a8bc:	22400304 	addi	r9,r4,12
    a8c0:	2bdf883a 	add	r15,r5,r15
    a8c4:	2811883a 	mov	r8,r5
    a8c8:	200f883a 	mov	r7,r4
    a8cc:	41000017 	ldw	r4,0(r8)
    a8d0:	39c00404 	addi	r7,r7,16
    a8d4:	18c00404 	addi	r3,r3,16
    a8d8:	393ffc15 	stw	r4,-16(r7)
    a8dc:	1bbffc17 	ldw	r14,-16(r3)
    a8e0:	6b400404 	addi	r13,r13,16
    a8e4:	5ac00404 	addi	r11,r11,16
    a8e8:	6bbffc15 	stw	r14,-16(r13)
    a8ec:	63800017 	ldw	r14,0(r12)
    a8f0:	4a400404 	addi	r9,r9,16
    a8f4:	42000404 	addi	r8,r8,16
    a8f8:	5bbffc15 	stw	r14,-16(r11)
    a8fc:	53800017 	ldw	r14,0(r10)
    a900:	63000404 	addi	r12,r12,16
    a904:	52800404 	addi	r10,r10,16
    a908:	4bbffc15 	stw	r14,-16(r9)
    a90c:	1bffef1e 	bne	r3,r15,a8cc <__alt_mem_Flash_flash_data+0xf400a8cc>
    a910:	81c00044 	addi	r7,r16,1
    a914:	380e913a 	slli	r7,r7,4
    a918:	310003cc 	andi	r4,r6,15
    a91c:	02c000c4 	movi	r11,3
    a920:	11c7883a 	add	r3,r2,r7
    a924:	29cb883a 	add	r5,r5,r7
    a928:	59001f2e 	bgeu	r11,r4,a9a8 <memcpy+0x130>
    a92c:	1813883a 	mov	r9,r3
    a930:	2811883a 	mov	r8,r5
    a934:	200f883a 	mov	r7,r4
    a938:	42800017 	ldw	r10,0(r8)
    a93c:	4a400104 	addi	r9,r9,4
    a940:	39ffff04 	addi	r7,r7,-4
    a944:	4abfff15 	stw	r10,-4(r9)
    a948:	42000104 	addi	r8,r8,4
    a94c:	59fffa36 	bltu	r11,r7,a938 <__alt_mem_Flash_flash_data+0xf400a938>
    a950:	213fff04 	addi	r4,r4,-4
    a954:	2008d0ba 	srli	r4,r4,2
    a958:	318000cc 	andi	r6,r6,3
    a95c:	21000044 	addi	r4,r4,1
    a960:	2109883a 	add	r4,r4,r4
    a964:	2109883a 	add	r4,r4,r4
    a968:	1907883a 	add	r3,r3,r4
    a96c:	290b883a 	add	r5,r5,r4
    a970:	30000626 	beq	r6,zero,a98c <memcpy+0x114>
    a974:	198d883a 	add	r6,r3,r6
    a978:	29c00003 	ldbu	r7,0(r5)
    a97c:	18c00044 	addi	r3,r3,1
    a980:	29400044 	addi	r5,r5,1
    a984:	19ffffc5 	stb	r7,-1(r3)
    a988:	19bffb1e 	bne	r3,r6,a978 <__alt_mem_Flash_flash_data+0xf400a978>
    a98c:	dc000017 	ldw	r16,0(sp)
    a990:	dec00104 	addi	sp,sp,4
    a994:	f800283a 	ret
    a998:	2007883a 	mov	r3,r4
    a99c:	003ff406 	br	a970 <__alt_mem_Flash_flash_data+0xf400a970>
    a9a0:	2007883a 	mov	r3,r4
    a9a4:	003ff306 	br	a974 <__alt_mem_Flash_flash_data+0xf400a974>
    a9a8:	200d883a 	mov	r6,r4
    a9ac:	003ff006 	br	a970 <__alt_mem_Flash_flash_data+0xf400a970>

0000a9b0 <memmove>:
    a9b0:	2005883a 	mov	r2,r4
    a9b4:	29000b2e 	bgeu	r5,r4,a9e4 <memmove+0x34>
    a9b8:	298f883a 	add	r7,r5,r6
    a9bc:	21c0092e 	bgeu	r4,r7,a9e4 <memmove+0x34>
    a9c0:	2187883a 	add	r3,r4,r6
    a9c4:	198bc83a 	sub	r5,r3,r6
    a9c8:	30004b26 	beq	r6,zero,aaf8 <memmove+0x148>
    a9cc:	39ffffc4 	addi	r7,r7,-1
    a9d0:	39000003 	ldbu	r4,0(r7)
    a9d4:	18ffffc4 	addi	r3,r3,-1
    a9d8:	19000005 	stb	r4,0(r3)
    a9dc:	197ffb1e 	bne	r3,r5,a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    a9e0:	f800283a 	ret
    a9e4:	00c003c4 	movi	r3,15
    a9e8:	1980412e 	bgeu	r3,r6,aaf0 <memmove+0x140>
    a9ec:	1146b03a 	or	r3,r2,r5
    a9f0:	18c000cc 	andi	r3,r3,3
    a9f4:	1800411e 	bne	r3,zero,aafc <memmove+0x14c>
    a9f8:	33fffc04 	addi	r15,r6,-16
    a9fc:	781ed13a 	srli	r15,r15,4
    aa00:	28c00104 	addi	r3,r5,4
    aa04:	13400104 	addi	r13,r2,4
    aa08:	781c913a 	slli	r14,r15,4
    aa0c:	2b000204 	addi	r12,r5,8
    aa10:	12c00204 	addi	r11,r2,8
    aa14:	73800504 	addi	r14,r14,20
    aa18:	2a800304 	addi	r10,r5,12
    aa1c:	12400304 	addi	r9,r2,12
    aa20:	2b9d883a 	add	r14,r5,r14
    aa24:	2811883a 	mov	r8,r5
    aa28:	100f883a 	mov	r7,r2
    aa2c:	41000017 	ldw	r4,0(r8)
    aa30:	39c00404 	addi	r7,r7,16
    aa34:	18c00404 	addi	r3,r3,16
    aa38:	393ffc15 	stw	r4,-16(r7)
    aa3c:	193ffc17 	ldw	r4,-16(r3)
    aa40:	6b400404 	addi	r13,r13,16
    aa44:	5ac00404 	addi	r11,r11,16
    aa48:	693ffc15 	stw	r4,-16(r13)
    aa4c:	61000017 	ldw	r4,0(r12)
    aa50:	4a400404 	addi	r9,r9,16
    aa54:	42000404 	addi	r8,r8,16
    aa58:	593ffc15 	stw	r4,-16(r11)
    aa5c:	51000017 	ldw	r4,0(r10)
    aa60:	63000404 	addi	r12,r12,16
    aa64:	52800404 	addi	r10,r10,16
    aa68:	493ffc15 	stw	r4,-16(r9)
    aa6c:	1bbfef1e 	bne	r3,r14,aa2c <__alt_mem_Flash_flash_data+0xf400aa2c>
    aa70:	79000044 	addi	r4,r15,1
    aa74:	2008913a 	slli	r4,r4,4
    aa78:	328003cc 	andi	r10,r6,15
    aa7c:	02c000c4 	movi	r11,3
    aa80:	1107883a 	add	r3,r2,r4
    aa84:	290b883a 	add	r5,r5,r4
    aa88:	5a801e2e 	bgeu	r11,r10,ab04 <memmove+0x154>
    aa8c:	1813883a 	mov	r9,r3
    aa90:	2811883a 	mov	r8,r5
    aa94:	500f883a 	mov	r7,r10
    aa98:	41000017 	ldw	r4,0(r8)
    aa9c:	4a400104 	addi	r9,r9,4
    aaa0:	39ffff04 	addi	r7,r7,-4
    aaa4:	493fff15 	stw	r4,-4(r9)
    aaa8:	42000104 	addi	r8,r8,4
    aaac:	59fffa36 	bltu	r11,r7,aa98 <__alt_mem_Flash_flash_data+0xf400aa98>
    aab0:	513fff04 	addi	r4,r10,-4
    aab4:	2008d0ba 	srli	r4,r4,2
    aab8:	318000cc 	andi	r6,r6,3
    aabc:	21000044 	addi	r4,r4,1
    aac0:	2109883a 	add	r4,r4,r4
    aac4:	2109883a 	add	r4,r4,r4
    aac8:	1907883a 	add	r3,r3,r4
    aacc:	290b883a 	add	r5,r5,r4
    aad0:	30000926 	beq	r6,zero,aaf8 <memmove+0x148>
    aad4:	198d883a 	add	r6,r3,r6
    aad8:	29c00003 	ldbu	r7,0(r5)
    aadc:	18c00044 	addi	r3,r3,1
    aae0:	29400044 	addi	r5,r5,1
    aae4:	19ffffc5 	stb	r7,-1(r3)
    aae8:	19bffb1e 	bne	r3,r6,aad8 <__alt_mem_Flash_flash_data+0xf400aad8>
    aaec:	f800283a 	ret
    aaf0:	1007883a 	mov	r3,r2
    aaf4:	003ff606 	br	aad0 <__alt_mem_Flash_flash_data+0xf400aad0>
    aaf8:	f800283a 	ret
    aafc:	1007883a 	mov	r3,r2
    ab00:	003ff406 	br	aad4 <__alt_mem_Flash_flash_data+0xf400aad4>
    ab04:	500d883a 	mov	r6,r10
    ab08:	003ff106 	br	aad0 <__alt_mem_Flash_flash_data+0xf400aad0>

0000ab0c <memset>:
    ab0c:	20c000cc 	andi	r3,r4,3
    ab10:	2005883a 	mov	r2,r4
    ab14:	18004326 	beq	r3,zero,ac24 <memset+0x118>
    ab18:	31ffffc4 	addi	r7,r6,-1
    ab1c:	30004026 	beq	r6,zero,ac20 <memset+0x114>
    ab20:	2813883a 	mov	r9,r5
    ab24:	200d883a 	mov	r6,r4
    ab28:	2007883a 	mov	r3,r4
    ab2c:	00000406 	br	ab40 <memset+0x34>
    ab30:	3a3fffc4 	addi	r8,r7,-1
    ab34:	31800044 	addi	r6,r6,1
    ab38:	38003926 	beq	r7,zero,ac20 <memset+0x114>
    ab3c:	400f883a 	mov	r7,r8
    ab40:	18c00044 	addi	r3,r3,1
    ab44:	32400005 	stb	r9,0(r6)
    ab48:	1a0000cc 	andi	r8,r3,3
    ab4c:	403ff81e 	bne	r8,zero,ab30 <__alt_mem_Flash_flash_data+0xf400ab30>
    ab50:	010000c4 	movi	r4,3
    ab54:	21c02d2e 	bgeu	r4,r7,ac0c <memset+0x100>
    ab58:	29803fcc 	andi	r6,r5,255
    ab5c:	3008923a 	slli	r4,r6,8
    ab60:	218cb03a 	or	r6,r4,r6
    ab64:	3008943a 	slli	r4,r6,16
    ab68:	218cb03a 	or	r6,r4,r6
    ab6c:	010003c4 	movi	r4,15
    ab70:	21c0182e 	bgeu	r4,r7,abd4 <memset+0xc8>
    ab74:	3b3ffc04 	addi	r12,r7,-16
    ab78:	6018d13a 	srli	r12,r12,4
    ab7c:	1a000104 	addi	r8,r3,4
    ab80:	1ac00204 	addi	r11,r3,8
    ab84:	6008913a 	slli	r4,r12,4
    ab88:	1a800304 	addi	r10,r3,12
    ab8c:	1813883a 	mov	r9,r3
    ab90:	21000504 	addi	r4,r4,20
    ab94:	1909883a 	add	r4,r3,r4
    ab98:	49800015 	stw	r6,0(r9)
    ab9c:	41800015 	stw	r6,0(r8)
    aba0:	59800015 	stw	r6,0(r11)
    aba4:	51800015 	stw	r6,0(r10)
    aba8:	42000404 	addi	r8,r8,16
    abac:	4a400404 	addi	r9,r9,16
    abb0:	5ac00404 	addi	r11,r11,16
    abb4:	52800404 	addi	r10,r10,16
    abb8:	413ff71e 	bne	r8,r4,ab98 <__alt_mem_Flash_flash_data+0xf400ab98>
    abbc:	63000044 	addi	r12,r12,1
    abc0:	6018913a 	slli	r12,r12,4
    abc4:	39c003cc 	andi	r7,r7,15
    abc8:	010000c4 	movi	r4,3
    abcc:	1b07883a 	add	r3,r3,r12
    abd0:	21c00e2e 	bgeu	r4,r7,ac0c <memset+0x100>
    abd4:	1813883a 	mov	r9,r3
    abd8:	3811883a 	mov	r8,r7
    abdc:	010000c4 	movi	r4,3
    abe0:	49800015 	stw	r6,0(r9)
    abe4:	423fff04 	addi	r8,r8,-4
    abe8:	4a400104 	addi	r9,r9,4
    abec:	223ffc36 	bltu	r4,r8,abe0 <__alt_mem_Flash_flash_data+0xf400abe0>
    abf0:	393fff04 	addi	r4,r7,-4
    abf4:	2008d0ba 	srli	r4,r4,2
    abf8:	39c000cc 	andi	r7,r7,3
    abfc:	21000044 	addi	r4,r4,1
    ac00:	2109883a 	add	r4,r4,r4
    ac04:	2109883a 	add	r4,r4,r4
    ac08:	1907883a 	add	r3,r3,r4
    ac0c:	38000426 	beq	r7,zero,ac20 <memset+0x114>
    ac10:	19cf883a 	add	r7,r3,r7
    ac14:	19400005 	stb	r5,0(r3)
    ac18:	18c00044 	addi	r3,r3,1
    ac1c:	19fffd1e 	bne	r3,r7,ac14 <__alt_mem_Flash_flash_data+0xf400ac14>
    ac20:	f800283a 	ret
    ac24:	2007883a 	mov	r3,r4
    ac28:	300f883a 	mov	r7,r6
    ac2c:	003fc806 	br	ab50 <__alt_mem_Flash_flash_data+0xf400ab50>

0000ac30 <_Balloc>:
    ac30:	20801317 	ldw	r2,76(r4)
    ac34:	defffc04 	addi	sp,sp,-16
    ac38:	dc400115 	stw	r17,4(sp)
    ac3c:	dc000015 	stw	r16,0(sp)
    ac40:	dfc00315 	stw	ra,12(sp)
    ac44:	dc800215 	stw	r18,8(sp)
    ac48:	2023883a 	mov	r17,r4
    ac4c:	2821883a 	mov	r16,r5
    ac50:	10000f26 	beq	r2,zero,ac90 <_Balloc+0x60>
    ac54:	8407883a 	add	r3,r16,r16
    ac58:	18c7883a 	add	r3,r3,r3
    ac5c:	10c7883a 	add	r3,r2,r3
    ac60:	18800017 	ldw	r2,0(r3)
    ac64:	10001126 	beq	r2,zero,acac <_Balloc+0x7c>
    ac68:	11000017 	ldw	r4,0(r2)
    ac6c:	19000015 	stw	r4,0(r3)
    ac70:	10000415 	stw	zero,16(r2)
    ac74:	10000315 	stw	zero,12(r2)
    ac78:	dfc00317 	ldw	ra,12(sp)
    ac7c:	dc800217 	ldw	r18,8(sp)
    ac80:	dc400117 	ldw	r17,4(sp)
    ac84:	dc000017 	ldw	r16,0(sp)
    ac88:	dec00404 	addi	sp,sp,16
    ac8c:	f800283a 	ret
    ac90:	01400104 	movi	r5,4
    ac94:	01800844 	movi	r6,33
    ac98:	000eb580 	call	eb58 <_calloc_r>
    ac9c:	88801315 	stw	r2,76(r17)
    aca0:	103fec1e 	bne	r2,zero,ac54 <__alt_mem_Flash_flash_data+0xf400ac54>
    aca4:	0005883a 	mov	r2,zero
    aca8:	003ff306 	br	ac78 <__alt_mem_Flash_flash_data+0xf400ac78>
    acac:	01400044 	movi	r5,1
    acb0:	2c24983a 	sll	r18,r5,r16
    acb4:	8809883a 	mov	r4,r17
    acb8:	91800144 	addi	r6,r18,5
    acbc:	318d883a 	add	r6,r6,r6
    acc0:	318d883a 	add	r6,r6,r6
    acc4:	000eb580 	call	eb58 <_calloc_r>
    acc8:	103ff626 	beq	r2,zero,aca4 <__alt_mem_Flash_flash_data+0xf400aca4>
    accc:	14000115 	stw	r16,4(r2)
    acd0:	14800215 	stw	r18,8(r2)
    acd4:	003fe606 	br	ac70 <__alt_mem_Flash_flash_data+0xf400ac70>

0000acd8 <_Bfree>:
    acd8:	28000826 	beq	r5,zero,acfc <_Bfree+0x24>
    acdc:	28c00117 	ldw	r3,4(r5)
    ace0:	20801317 	ldw	r2,76(r4)
    ace4:	18c7883a 	add	r3,r3,r3
    ace8:	18c7883a 	add	r3,r3,r3
    acec:	10c5883a 	add	r2,r2,r3
    acf0:	10c00017 	ldw	r3,0(r2)
    acf4:	28c00015 	stw	r3,0(r5)
    acf8:	11400015 	stw	r5,0(r2)
    acfc:	f800283a 	ret

0000ad00 <__multadd>:
    ad00:	defffa04 	addi	sp,sp,-24
    ad04:	dc000115 	stw	r16,4(sp)
    ad08:	2c000417 	ldw	r16,16(r5)
    ad0c:	dc800315 	stw	r18,12(sp)
    ad10:	dc400215 	stw	r17,8(sp)
    ad14:	dfc00515 	stw	ra,20(sp)
    ad18:	dcc00415 	stw	r19,16(sp)
    ad1c:	2823883a 	mov	r17,r5
    ad20:	2025883a 	mov	r18,r4
    ad24:	2a400504 	addi	r9,r5,20
    ad28:	0015883a 	mov	r10,zero
    ad2c:	4a000017 	ldw	r8,0(r9)
    ad30:	4a400104 	addi	r9,r9,4
    ad34:	52800044 	addi	r10,r10,1
    ad38:	40ffffcc 	andi	r3,r8,65535
    ad3c:	1987383a 	mul	r3,r3,r6
    ad40:	4010d43a 	srli	r8,r8,16
    ad44:	19cf883a 	add	r7,r3,r7
    ad48:	4191383a 	mul	r8,r8,r6
    ad4c:	3816d43a 	srli	r11,r7,16
    ad50:	38ffffcc 	andi	r3,r7,65535
    ad54:	5a0f883a 	add	r7,r11,r8
    ad58:	3810943a 	slli	r8,r7,16
    ad5c:	380ed43a 	srli	r7,r7,16
    ad60:	40c7883a 	add	r3,r8,r3
    ad64:	48ffff15 	stw	r3,-4(r9)
    ad68:	543ff016 	blt	r10,r16,ad2c <__alt_mem_Flash_flash_data+0xf400ad2c>
    ad6c:	38000926 	beq	r7,zero,ad94 <__multadd+0x94>
    ad70:	88800217 	ldw	r2,8(r17)
    ad74:	80800f0e 	bge	r16,r2,adb4 <__multadd+0xb4>
    ad78:	80800144 	addi	r2,r16,5
    ad7c:	1085883a 	add	r2,r2,r2
    ad80:	1085883a 	add	r2,r2,r2
    ad84:	8885883a 	add	r2,r17,r2
    ad88:	11c00015 	stw	r7,0(r2)
    ad8c:	84000044 	addi	r16,r16,1
    ad90:	8c000415 	stw	r16,16(r17)
    ad94:	8805883a 	mov	r2,r17
    ad98:	dfc00517 	ldw	ra,20(sp)
    ad9c:	dcc00417 	ldw	r19,16(sp)
    ada0:	dc800317 	ldw	r18,12(sp)
    ada4:	dc400217 	ldw	r17,8(sp)
    ada8:	dc000117 	ldw	r16,4(sp)
    adac:	dec00604 	addi	sp,sp,24
    adb0:	f800283a 	ret
    adb4:	89400117 	ldw	r5,4(r17)
    adb8:	9009883a 	mov	r4,r18
    adbc:	d9c00015 	stw	r7,0(sp)
    adc0:	29400044 	addi	r5,r5,1
    adc4:	000ac300 	call	ac30 <_Balloc>
    adc8:	89800417 	ldw	r6,16(r17)
    adcc:	11000304 	addi	r4,r2,12
    add0:	89400304 	addi	r5,r17,12
    add4:	31800084 	addi	r6,r6,2
    add8:	318d883a 	add	r6,r6,r6
    addc:	318d883a 	add	r6,r6,r6
    ade0:	1027883a 	mov	r19,r2
    ade4:	000a8780 	call	a878 <memcpy>
    ade8:	d9c00017 	ldw	r7,0(sp)
    adec:	88000a26 	beq	r17,zero,ae18 <__multadd+0x118>
    adf0:	89000117 	ldw	r4,4(r17)
    adf4:	90c01317 	ldw	r3,76(r18)
    adf8:	2109883a 	add	r4,r4,r4
    adfc:	2109883a 	add	r4,r4,r4
    ae00:	1907883a 	add	r3,r3,r4
    ae04:	18800017 	ldw	r2,0(r3)
    ae08:	88800015 	stw	r2,0(r17)
    ae0c:	1c400015 	stw	r17,0(r3)
    ae10:	9823883a 	mov	r17,r19
    ae14:	003fd806 	br	ad78 <__alt_mem_Flash_flash_data+0xf400ad78>
    ae18:	9823883a 	mov	r17,r19
    ae1c:	003fd606 	br	ad78 <__alt_mem_Flash_flash_data+0xf400ad78>

0000ae20 <__s2b>:
    ae20:	defff904 	addi	sp,sp,-28
    ae24:	dc400115 	stw	r17,4(sp)
    ae28:	dc000015 	stw	r16,0(sp)
    ae2c:	2023883a 	mov	r17,r4
    ae30:	2821883a 	mov	r16,r5
    ae34:	39000204 	addi	r4,r7,8
    ae38:	01400244 	movi	r5,9
    ae3c:	dcc00315 	stw	r19,12(sp)
    ae40:	dc800215 	stw	r18,8(sp)
    ae44:	dfc00615 	stw	ra,24(sp)
    ae48:	dd400515 	stw	r21,20(sp)
    ae4c:	dd000415 	stw	r20,16(sp)
    ae50:	3825883a 	mov	r18,r7
    ae54:	3027883a 	mov	r19,r6
    ae58:	000ff5c0 	call	ff5c <__divsi3>
    ae5c:	00c00044 	movi	r3,1
    ae60:	000b883a 	mov	r5,zero
    ae64:	1880030e 	bge	r3,r2,ae74 <__s2b+0x54>
    ae68:	18c7883a 	add	r3,r3,r3
    ae6c:	29400044 	addi	r5,r5,1
    ae70:	18bffd16 	blt	r3,r2,ae68 <__alt_mem_Flash_flash_data+0xf400ae68>
    ae74:	8809883a 	mov	r4,r17
    ae78:	000ac300 	call	ac30 <_Balloc>
    ae7c:	d8c00717 	ldw	r3,28(sp)
    ae80:	10c00515 	stw	r3,20(r2)
    ae84:	00c00044 	movi	r3,1
    ae88:	10c00415 	stw	r3,16(r2)
    ae8c:	00c00244 	movi	r3,9
    ae90:	1cc0210e 	bge	r3,r19,af18 <__s2b+0xf8>
    ae94:	80eb883a 	add	r21,r16,r3
    ae98:	a829883a 	mov	r20,r21
    ae9c:	84e1883a 	add	r16,r16,r19
    aea0:	a1c00007 	ldb	r7,0(r20)
    aea4:	8809883a 	mov	r4,r17
    aea8:	a5000044 	addi	r20,r20,1
    aeac:	100b883a 	mov	r5,r2
    aeb0:	01800284 	movi	r6,10
    aeb4:	39fff404 	addi	r7,r7,-48
    aeb8:	000ad000 	call	ad00 <__multadd>
    aebc:	a43ff81e 	bne	r20,r16,aea0 <__alt_mem_Flash_flash_data+0xf400aea0>
    aec0:	ace1883a 	add	r16,r21,r19
    aec4:	843ffe04 	addi	r16,r16,-8
    aec8:	9c800a0e 	bge	r19,r18,aef4 <__s2b+0xd4>
    aecc:	94e5c83a 	sub	r18,r18,r19
    aed0:	84a5883a 	add	r18,r16,r18
    aed4:	81c00007 	ldb	r7,0(r16)
    aed8:	8809883a 	mov	r4,r17
    aedc:	84000044 	addi	r16,r16,1
    aee0:	100b883a 	mov	r5,r2
    aee4:	01800284 	movi	r6,10
    aee8:	39fff404 	addi	r7,r7,-48
    aeec:	000ad000 	call	ad00 <__multadd>
    aef0:	84bff81e 	bne	r16,r18,aed4 <__alt_mem_Flash_flash_data+0xf400aed4>
    aef4:	dfc00617 	ldw	ra,24(sp)
    aef8:	dd400517 	ldw	r21,20(sp)
    aefc:	dd000417 	ldw	r20,16(sp)
    af00:	dcc00317 	ldw	r19,12(sp)
    af04:	dc800217 	ldw	r18,8(sp)
    af08:	dc400117 	ldw	r17,4(sp)
    af0c:	dc000017 	ldw	r16,0(sp)
    af10:	dec00704 	addi	sp,sp,28
    af14:	f800283a 	ret
    af18:	84000284 	addi	r16,r16,10
    af1c:	1827883a 	mov	r19,r3
    af20:	003fe906 	br	aec8 <__alt_mem_Flash_flash_data+0xf400aec8>

0000af24 <__hi0bits>:
    af24:	20bfffec 	andhi	r2,r4,65535
    af28:	1000141e 	bne	r2,zero,af7c <__hi0bits+0x58>
    af2c:	2008943a 	slli	r4,r4,16
    af30:	00800404 	movi	r2,16
    af34:	20ffc02c 	andhi	r3,r4,65280
    af38:	1800021e 	bne	r3,zero,af44 <__hi0bits+0x20>
    af3c:	2008923a 	slli	r4,r4,8
    af40:	10800204 	addi	r2,r2,8
    af44:	20fc002c 	andhi	r3,r4,61440
    af48:	1800021e 	bne	r3,zero,af54 <__hi0bits+0x30>
    af4c:	2008913a 	slli	r4,r4,4
    af50:	10800104 	addi	r2,r2,4
    af54:	20f0002c 	andhi	r3,r4,49152
    af58:	1800031e 	bne	r3,zero,af68 <__hi0bits+0x44>
    af5c:	2109883a 	add	r4,r4,r4
    af60:	10800084 	addi	r2,r2,2
    af64:	2109883a 	add	r4,r4,r4
    af68:	20000316 	blt	r4,zero,af78 <__hi0bits+0x54>
    af6c:	2110002c 	andhi	r4,r4,16384
    af70:	2000041e 	bne	r4,zero,af84 <__hi0bits+0x60>
    af74:	00800804 	movi	r2,32
    af78:	f800283a 	ret
    af7c:	0005883a 	mov	r2,zero
    af80:	003fec06 	br	af34 <__alt_mem_Flash_flash_data+0xf400af34>
    af84:	10800044 	addi	r2,r2,1
    af88:	f800283a 	ret

0000af8c <__lo0bits>:
    af8c:	20c00017 	ldw	r3,0(r4)
    af90:	188001cc 	andi	r2,r3,7
    af94:	10000826 	beq	r2,zero,afb8 <__lo0bits+0x2c>
    af98:	1880004c 	andi	r2,r3,1
    af9c:	1000211e 	bne	r2,zero,b024 <__lo0bits+0x98>
    afa0:	1880008c 	andi	r2,r3,2
    afa4:	1000211e 	bne	r2,zero,b02c <__lo0bits+0xa0>
    afa8:	1806d0ba 	srli	r3,r3,2
    afac:	00800084 	movi	r2,2
    afb0:	20c00015 	stw	r3,0(r4)
    afb4:	f800283a 	ret
    afb8:	18bfffcc 	andi	r2,r3,65535
    afbc:	10001326 	beq	r2,zero,b00c <__lo0bits+0x80>
    afc0:	0005883a 	mov	r2,zero
    afc4:	19403fcc 	andi	r5,r3,255
    afc8:	2800021e 	bne	r5,zero,afd4 <__lo0bits+0x48>
    afcc:	1806d23a 	srli	r3,r3,8
    afd0:	10800204 	addi	r2,r2,8
    afd4:	194003cc 	andi	r5,r3,15
    afd8:	2800021e 	bne	r5,zero,afe4 <__lo0bits+0x58>
    afdc:	1806d13a 	srli	r3,r3,4
    afe0:	10800104 	addi	r2,r2,4
    afe4:	194000cc 	andi	r5,r3,3
    afe8:	2800021e 	bne	r5,zero,aff4 <__lo0bits+0x68>
    afec:	1806d0ba 	srli	r3,r3,2
    aff0:	10800084 	addi	r2,r2,2
    aff4:	1940004c 	andi	r5,r3,1
    aff8:	2800081e 	bne	r5,zero,b01c <__lo0bits+0x90>
    affc:	1806d07a 	srli	r3,r3,1
    b000:	1800051e 	bne	r3,zero,b018 <__lo0bits+0x8c>
    b004:	00800804 	movi	r2,32
    b008:	f800283a 	ret
    b00c:	1806d43a 	srli	r3,r3,16
    b010:	00800404 	movi	r2,16
    b014:	003feb06 	br	afc4 <__alt_mem_Flash_flash_data+0xf400afc4>
    b018:	10800044 	addi	r2,r2,1
    b01c:	20c00015 	stw	r3,0(r4)
    b020:	f800283a 	ret
    b024:	0005883a 	mov	r2,zero
    b028:	f800283a 	ret
    b02c:	1806d07a 	srli	r3,r3,1
    b030:	00800044 	movi	r2,1
    b034:	20c00015 	stw	r3,0(r4)
    b038:	f800283a 	ret

0000b03c <__i2b>:
    b03c:	defffd04 	addi	sp,sp,-12
    b040:	dc000015 	stw	r16,0(sp)
    b044:	04000044 	movi	r16,1
    b048:	dc400115 	stw	r17,4(sp)
    b04c:	2823883a 	mov	r17,r5
    b050:	800b883a 	mov	r5,r16
    b054:	dfc00215 	stw	ra,8(sp)
    b058:	000ac300 	call	ac30 <_Balloc>
    b05c:	14400515 	stw	r17,20(r2)
    b060:	14000415 	stw	r16,16(r2)
    b064:	dfc00217 	ldw	ra,8(sp)
    b068:	dc400117 	ldw	r17,4(sp)
    b06c:	dc000017 	ldw	r16,0(sp)
    b070:	dec00304 	addi	sp,sp,12
    b074:	f800283a 	ret

0000b078 <__multiply>:
    b078:	defffa04 	addi	sp,sp,-24
    b07c:	dcc00315 	stw	r19,12(sp)
    b080:	dc800215 	stw	r18,8(sp)
    b084:	2cc00417 	ldw	r19,16(r5)
    b088:	34800417 	ldw	r18,16(r6)
    b08c:	dd000415 	stw	r20,16(sp)
    b090:	dc400115 	stw	r17,4(sp)
    b094:	dfc00515 	stw	ra,20(sp)
    b098:	dc000015 	stw	r16,0(sp)
    b09c:	2829883a 	mov	r20,r5
    b0a0:	3023883a 	mov	r17,r6
    b0a4:	9c807016 	blt	r19,r18,b268 <__multiply+0x1f0>
    b0a8:	9005883a 	mov	r2,r18
    b0ac:	9825883a 	mov	r18,r19
    b0b0:	1027883a 	mov	r19,r2
    b0b4:	a0800217 	ldw	r2,8(r20)
    b0b8:	94e1883a 	add	r16,r18,r19
    b0bc:	a1400117 	ldw	r5,4(r20)
    b0c0:	1400010e 	bge	r2,r16,b0c8 <__multiply+0x50>
    b0c4:	29400044 	addi	r5,r5,1
    b0c8:	000ac300 	call	ac30 <_Balloc>
    b0cc:	8417883a 	add	r11,r16,r16
    b0d0:	13000504 	addi	r12,r2,20
    b0d4:	5ad7883a 	add	r11,r11,r11
    b0d8:	62d7883a 	add	r11,r12,r11
    b0dc:	6007883a 	mov	r3,r12
    b0e0:	62c0032e 	bgeu	r12,r11,b0f0 <__multiply+0x78>
    b0e4:	18000015 	stw	zero,0(r3)
    b0e8:	18c00104 	addi	r3,r3,4
    b0ec:	1afffd36 	bltu	r3,r11,b0e4 <__alt_mem_Flash_flash_data+0xf400b0e4>
    b0f0:	9ce7883a 	add	r19,r19,r19
    b0f4:	94a5883a 	add	r18,r18,r18
    b0f8:	89800504 	addi	r6,r17,20
    b0fc:	9ce7883a 	add	r19,r19,r19
    b100:	a3800504 	addi	r14,r20,20
    b104:	94a5883a 	add	r18,r18,r18
    b108:	34db883a 	add	r13,r6,r19
    b10c:	7495883a 	add	r10,r14,r18
    b110:	3340422e 	bgeu	r6,r13,b21c <__multiply+0x1a4>
    b114:	34400017 	ldw	r17,0(r6)
    b118:	8cbfffcc 	andi	r18,r17,65535
    b11c:	90001b26 	beq	r18,zero,b18c <__multiply+0x114>
    b120:	6013883a 	mov	r9,r12
    b124:	7023883a 	mov	r17,r14
    b128:	0011883a 	mov	r8,zero
    b12c:	88c00017 	ldw	r3,0(r17)
    b130:	4bc00017 	ldw	r15,0(r9)
    b134:	8c400104 	addi	r17,r17,4
    b138:	19ffffcc 	andi	r7,r3,65535
    b13c:	3c8f383a 	mul	r7,r7,r18
    b140:	1808d43a 	srli	r4,r3,16
    b144:	797fffcc 	andi	r5,r15,65535
    b148:	29cb883a 	add	r5,r5,r7
    b14c:	2a0b883a 	add	r5,r5,r8
    b150:	2489383a 	mul	r4,r4,r18
    b154:	7806d43a 	srli	r3,r15,16
    b158:	2810d43a 	srli	r8,r5,16
    b15c:	297fffcc 	andi	r5,r5,65535
    b160:	1907883a 	add	r3,r3,r4
    b164:	1a07883a 	add	r3,r3,r8
    b168:	1808943a 	slli	r4,r3,16
    b16c:	480f883a 	mov	r7,r9
    b170:	1810d43a 	srli	r8,r3,16
    b174:	214ab03a 	or	r5,r4,r5
    b178:	49400015 	stw	r5,0(r9)
    b17c:	4a400104 	addi	r9,r9,4
    b180:	8abfea36 	bltu	r17,r10,b12c <__alt_mem_Flash_flash_data+0xf400b12c>
    b184:	3a000115 	stw	r8,4(r7)
    b188:	34400017 	ldw	r17,0(r6)
    b18c:	8822d43a 	srli	r17,r17,16
    b190:	88001f26 	beq	r17,zero,b210 <__multiply+0x198>
    b194:	60c00017 	ldw	r3,0(r12)
    b198:	7013883a 	mov	r9,r14
    b19c:	601f883a 	mov	r15,r12
    b1a0:	1811883a 	mov	r8,r3
    b1a4:	6027883a 	mov	r19,r12
    b1a8:	000f883a 	mov	r7,zero
    b1ac:	00000106 	br	b1b4 <__multiply+0x13c>
    b1b0:	9027883a 	mov	r19,r18
    b1b4:	4940000b 	ldhu	r5,0(r9)
    b1b8:	4010d43a 	srli	r8,r8,16
    b1bc:	193fffcc 	andi	r4,r3,65535
    b1c0:	2c4b383a 	mul	r5,r5,r17
    b1c4:	7bc00104 	addi	r15,r15,4
    b1c8:	4a400104 	addi	r9,r9,4
    b1cc:	2a0b883a 	add	r5,r5,r8
    b1d0:	29cb883a 	add	r5,r5,r7
    b1d4:	2806943a 	slli	r3,r5,16
    b1d8:	9c800104 	addi	r18,r19,4
    b1dc:	280ad43a 	srli	r5,r5,16
    b1e0:	1908b03a 	or	r4,r3,r4
    b1e4:	793fff15 	stw	r4,-4(r15)
    b1e8:	48ffff17 	ldw	r3,-4(r9)
    b1ec:	92000017 	ldw	r8,0(r18)
    b1f0:	1806d43a 	srli	r3,r3,16
    b1f4:	413fffcc 	andi	r4,r8,65535
    b1f8:	1c47383a 	mul	r3,r3,r17
    b1fc:	1907883a 	add	r3,r3,r4
    b200:	1947883a 	add	r3,r3,r5
    b204:	180ed43a 	srli	r7,r3,16
    b208:	4abfe936 	bltu	r9,r10,b1b0 <__alt_mem_Flash_flash_data+0xf400b1b0>
    b20c:	98c00115 	stw	r3,4(r19)
    b210:	31800104 	addi	r6,r6,4
    b214:	63000104 	addi	r12,r12,4
    b218:	337fbe36 	bltu	r6,r13,b114 <__alt_mem_Flash_flash_data+0xf400b114>
    b21c:	0400090e 	bge	zero,r16,b244 <__multiply+0x1cc>
    b220:	58ffff17 	ldw	r3,-4(r11)
    b224:	5affff04 	addi	r11,r11,-4
    b228:	18000326 	beq	r3,zero,b238 <__multiply+0x1c0>
    b22c:	00000506 	br	b244 <__multiply+0x1cc>
    b230:	58c00017 	ldw	r3,0(r11)
    b234:	1800031e 	bne	r3,zero,b244 <__multiply+0x1cc>
    b238:	843fffc4 	addi	r16,r16,-1
    b23c:	5affff04 	addi	r11,r11,-4
    b240:	803ffb1e 	bne	r16,zero,b230 <__alt_mem_Flash_flash_data+0xf400b230>
    b244:	14000415 	stw	r16,16(r2)
    b248:	dfc00517 	ldw	ra,20(sp)
    b24c:	dd000417 	ldw	r20,16(sp)
    b250:	dcc00317 	ldw	r19,12(sp)
    b254:	dc800217 	ldw	r18,8(sp)
    b258:	dc400117 	ldw	r17,4(sp)
    b25c:	dc000017 	ldw	r16,0(sp)
    b260:	dec00604 	addi	sp,sp,24
    b264:	f800283a 	ret
    b268:	3029883a 	mov	r20,r6
    b26c:	2823883a 	mov	r17,r5
    b270:	003f9006 	br	b0b4 <__alt_mem_Flash_flash_data+0xf400b0b4>

0000b274 <__pow5mult>:
    b274:	defffa04 	addi	sp,sp,-24
    b278:	dcc00315 	stw	r19,12(sp)
    b27c:	dc800215 	stw	r18,8(sp)
    b280:	dc000015 	stw	r16,0(sp)
    b284:	dfc00515 	stw	ra,20(sp)
    b288:	dd000415 	stw	r20,16(sp)
    b28c:	dc400115 	stw	r17,4(sp)
    b290:	308000cc 	andi	r2,r6,3
    b294:	3021883a 	mov	r16,r6
    b298:	2027883a 	mov	r19,r4
    b29c:	2825883a 	mov	r18,r5
    b2a0:	10002e1e 	bne	r2,zero,b35c <__pow5mult+0xe8>
    b2a4:	8021d0ba 	srai	r16,r16,2
    b2a8:	80001a26 	beq	r16,zero,b314 <__pow5mult+0xa0>
    b2ac:	9c401217 	ldw	r17,72(r19)
    b2b0:	8800061e 	bne	r17,zero,b2cc <__pow5mult+0x58>
    b2b4:	00003406 	br	b388 <__pow5mult+0x114>
    b2b8:	8021d07a 	srai	r16,r16,1
    b2bc:	80001526 	beq	r16,zero,b314 <__pow5mult+0xa0>
    b2c0:	88800017 	ldw	r2,0(r17)
    b2c4:	10001c26 	beq	r2,zero,b338 <__pow5mult+0xc4>
    b2c8:	1023883a 	mov	r17,r2
    b2cc:	80c0004c 	andi	r3,r16,1
    b2d0:	183ff926 	beq	r3,zero,b2b8 <__alt_mem_Flash_flash_data+0xf400b2b8>
    b2d4:	900b883a 	mov	r5,r18
    b2d8:	880d883a 	mov	r6,r17
    b2dc:	9809883a 	mov	r4,r19
    b2e0:	000b0780 	call	b078 <__multiply>
    b2e4:	90001b26 	beq	r18,zero,b354 <__pow5mult+0xe0>
    b2e8:	91c00117 	ldw	r7,4(r18)
    b2ec:	98c01317 	ldw	r3,76(r19)
    b2f0:	8021d07a 	srai	r16,r16,1
    b2f4:	39cf883a 	add	r7,r7,r7
    b2f8:	39cf883a 	add	r7,r7,r7
    b2fc:	19c7883a 	add	r3,r3,r7
    b300:	19000017 	ldw	r4,0(r3)
    b304:	91000015 	stw	r4,0(r18)
    b308:	1c800015 	stw	r18,0(r3)
    b30c:	1025883a 	mov	r18,r2
    b310:	803feb1e 	bne	r16,zero,b2c0 <__alt_mem_Flash_flash_data+0xf400b2c0>
    b314:	9005883a 	mov	r2,r18
    b318:	dfc00517 	ldw	ra,20(sp)
    b31c:	dd000417 	ldw	r20,16(sp)
    b320:	dcc00317 	ldw	r19,12(sp)
    b324:	dc800217 	ldw	r18,8(sp)
    b328:	dc400117 	ldw	r17,4(sp)
    b32c:	dc000017 	ldw	r16,0(sp)
    b330:	dec00604 	addi	sp,sp,24
    b334:	f800283a 	ret
    b338:	9809883a 	mov	r4,r19
    b33c:	880b883a 	mov	r5,r17
    b340:	880d883a 	mov	r6,r17
    b344:	000b0780 	call	b078 <__multiply>
    b348:	88800015 	stw	r2,0(r17)
    b34c:	10000015 	stw	zero,0(r2)
    b350:	003fdd06 	br	b2c8 <__alt_mem_Flash_flash_data+0xf400b2c8>
    b354:	1025883a 	mov	r18,r2
    b358:	003fd706 	br	b2b8 <__alt_mem_Flash_flash_data+0xf400b2b8>
    b35c:	10bfffc4 	addi	r2,r2,-1
    b360:	1085883a 	add	r2,r2,r2
    b364:	00c000b4 	movhi	r3,2
    b368:	18ffa504 	addi	r3,r3,-364
    b36c:	1085883a 	add	r2,r2,r2
    b370:	1885883a 	add	r2,r3,r2
    b374:	11800017 	ldw	r6,0(r2)
    b378:	000f883a 	mov	r7,zero
    b37c:	000ad000 	call	ad00 <__multadd>
    b380:	1025883a 	mov	r18,r2
    b384:	003fc706 	br	b2a4 <__alt_mem_Flash_flash_data+0xf400b2a4>
    b388:	05000044 	movi	r20,1
    b38c:	9809883a 	mov	r4,r19
    b390:	a00b883a 	mov	r5,r20
    b394:	000ac300 	call	ac30 <_Balloc>
    b398:	1023883a 	mov	r17,r2
    b39c:	00809c44 	movi	r2,625
    b3a0:	88800515 	stw	r2,20(r17)
    b3a4:	8d000415 	stw	r20,16(r17)
    b3a8:	9c401215 	stw	r17,72(r19)
    b3ac:	88000015 	stw	zero,0(r17)
    b3b0:	003fc606 	br	b2cc <__alt_mem_Flash_flash_data+0xf400b2cc>

0000b3b4 <__lshift>:
    b3b4:	defff904 	addi	sp,sp,-28
    b3b8:	dd000415 	stw	r20,16(sp)
    b3bc:	dcc00315 	stw	r19,12(sp)
    b3c0:	3029d17a 	srai	r20,r6,5
    b3c4:	2cc00417 	ldw	r19,16(r5)
    b3c8:	28800217 	ldw	r2,8(r5)
    b3cc:	dd400515 	stw	r21,20(sp)
    b3d0:	a4e7883a 	add	r19,r20,r19
    b3d4:	dc800215 	stw	r18,8(sp)
    b3d8:	dc400115 	stw	r17,4(sp)
    b3dc:	dc000015 	stw	r16,0(sp)
    b3e0:	dfc00615 	stw	ra,24(sp)
    b3e4:	9c000044 	addi	r16,r19,1
    b3e8:	2823883a 	mov	r17,r5
    b3ec:	302b883a 	mov	r21,r6
    b3f0:	2025883a 	mov	r18,r4
    b3f4:	29400117 	ldw	r5,4(r5)
    b3f8:	1400030e 	bge	r2,r16,b408 <__lshift+0x54>
    b3fc:	1085883a 	add	r2,r2,r2
    b400:	29400044 	addi	r5,r5,1
    b404:	143ffd16 	blt	r2,r16,b3fc <__alt_mem_Flash_flash_data+0xf400b3fc>
    b408:	9009883a 	mov	r4,r18
    b40c:	000ac300 	call	ac30 <_Balloc>
    b410:	11c00504 	addi	r7,r2,20
    b414:	0500090e 	bge	zero,r20,b43c <__lshift+0x88>
    b418:	3811883a 	mov	r8,r7
    b41c:	0007883a 	mov	r3,zero
    b420:	40000015 	stw	zero,0(r8)
    b424:	18c00044 	addi	r3,r3,1
    b428:	42000104 	addi	r8,r8,4
    b42c:	1d3ffc1e 	bne	r3,r20,b420 <__alt_mem_Flash_flash_data+0xf400b420>
    b430:	18c7883a 	add	r3,r3,r3
    b434:	18c7883a 	add	r3,r3,r3
    b438:	38cf883a 	add	r7,r7,r3
    b43c:	89000417 	ldw	r4,16(r17)
    b440:	88c00504 	addi	r3,r17,20
    b444:	a98007cc 	andi	r6,r21,31
    b448:	2109883a 	add	r4,r4,r4
    b44c:	2109883a 	add	r4,r4,r4
    b450:	1909883a 	add	r4,r3,r4
    b454:	30002326 	beq	r6,zero,b4e4 <__lshift+0x130>
    b458:	01400804 	movi	r5,32
    b45c:	298bc83a 	sub	r5,r5,r6
    b460:	0013883a 	mov	r9,zero
    b464:	1a000017 	ldw	r8,0(r3)
    b468:	3815883a 	mov	r10,r7
    b46c:	39c00104 	addi	r7,r7,4
    b470:	4190983a 	sll	r8,r8,r6
    b474:	18c00104 	addi	r3,r3,4
    b478:	4a10b03a 	or	r8,r9,r8
    b47c:	3a3fff15 	stw	r8,-4(r7)
    b480:	1a3fff17 	ldw	r8,-4(r3)
    b484:	4152d83a 	srl	r9,r8,r5
    b488:	193ff636 	bltu	r3,r4,b464 <__alt_mem_Flash_flash_data+0xf400b464>
    b48c:	52400115 	stw	r9,4(r10)
    b490:	48001a1e 	bne	r9,zero,b4fc <__lshift+0x148>
    b494:	843fffc4 	addi	r16,r16,-1
    b498:	14000415 	stw	r16,16(r2)
    b49c:	88000826 	beq	r17,zero,b4c0 <__lshift+0x10c>
    b4a0:	89000117 	ldw	r4,4(r17)
    b4a4:	90c01317 	ldw	r3,76(r18)
    b4a8:	2109883a 	add	r4,r4,r4
    b4ac:	2109883a 	add	r4,r4,r4
    b4b0:	1907883a 	add	r3,r3,r4
    b4b4:	19000017 	ldw	r4,0(r3)
    b4b8:	89000015 	stw	r4,0(r17)
    b4bc:	1c400015 	stw	r17,0(r3)
    b4c0:	dfc00617 	ldw	ra,24(sp)
    b4c4:	dd400517 	ldw	r21,20(sp)
    b4c8:	dd000417 	ldw	r20,16(sp)
    b4cc:	dcc00317 	ldw	r19,12(sp)
    b4d0:	dc800217 	ldw	r18,8(sp)
    b4d4:	dc400117 	ldw	r17,4(sp)
    b4d8:	dc000017 	ldw	r16,0(sp)
    b4dc:	dec00704 	addi	sp,sp,28
    b4e0:	f800283a 	ret
    b4e4:	19400017 	ldw	r5,0(r3)
    b4e8:	39c00104 	addi	r7,r7,4
    b4ec:	18c00104 	addi	r3,r3,4
    b4f0:	397fff15 	stw	r5,-4(r7)
    b4f4:	193ffb36 	bltu	r3,r4,b4e4 <__alt_mem_Flash_flash_data+0xf400b4e4>
    b4f8:	003fe606 	br	b494 <__alt_mem_Flash_flash_data+0xf400b494>
    b4fc:	9c000084 	addi	r16,r19,2
    b500:	003fe406 	br	b494 <__alt_mem_Flash_flash_data+0xf400b494>

0000b504 <__mcmp>:
    b504:	20800417 	ldw	r2,16(r4)
    b508:	28c00417 	ldw	r3,16(r5)
    b50c:	10c5c83a 	sub	r2,r2,r3
    b510:	1000111e 	bne	r2,zero,b558 <__mcmp+0x54>
    b514:	18c7883a 	add	r3,r3,r3
    b518:	18c7883a 	add	r3,r3,r3
    b51c:	21000504 	addi	r4,r4,20
    b520:	29400504 	addi	r5,r5,20
    b524:	20c5883a 	add	r2,r4,r3
    b528:	28cb883a 	add	r5,r5,r3
    b52c:	00000106 	br	b534 <__mcmp+0x30>
    b530:	20800a2e 	bgeu	r4,r2,b55c <__mcmp+0x58>
    b534:	10bfff04 	addi	r2,r2,-4
    b538:	297fff04 	addi	r5,r5,-4
    b53c:	11800017 	ldw	r6,0(r2)
    b540:	28c00017 	ldw	r3,0(r5)
    b544:	30fffa26 	beq	r6,r3,b530 <__alt_mem_Flash_flash_data+0xf400b530>
    b548:	30c00236 	bltu	r6,r3,b554 <__mcmp+0x50>
    b54c:	00800044 	movi	r2,1
    b550:	f800283a 	ret
    b554:	00bfffc4 	movi	r2,-1
    b558:	f800283a 	ret
    b55c:	0005883a 	mov	r2,zero
    b560:	f800283a 	ret

0000b564 <__mdiff>:
    b564:	defffb04 	addi	sp,sp,-20
    b568:	dc000015 	stw	r16,0(sp)
    b56c:	2821883a 	mov	r16,r5
    b570:	dcc00315 	stw	r19,12(sp)
    b574:	300b883a 	mov	r5,r6
    b578:	2027883a 	mov	r19,r4
    b57c:	8009883a 	mov	r4,r16
    b580:	dc800215 	stw	r18,8(sp)
    b584:	dfc00415 	stw	ra,16(sp)
    b588:	dc400115 	stw	r17,4(sp)
    b58c:	3025883a 	mov	r18,r6
    b590:	000b5040 	call	b504 <__mcmp>
    b594:	10005226 	beq	r2,zero,b6e0 <__mdiff+0x17c>
    b598:	10004c16 	blt	r2,zero,b6cc <__mdiff+0x168>
    b59c:	0023883a 	mov	r17,zero
    b5a0:	81400117 	ldw	r5,4(r16)
    b5a4:	9809883a 	mov	r4,r19
    b5a8:	000ac300 	call	ac30 <_Balloc>
    b5ac:	83400417 	ldw	r13,16(r16)
    b5b0:	93800417 	ldw	r14,16(r18)
    b5b4:	81000504 	addi	r4,r16,20
    b5b8:	6b59883a 	add	r12,r13,r13
    b5bc:	739d883a 	add	r14,r14,r14
    b5c0:	6319883a 	add	r12,r12,r12
    b5c4:	91800504 	addi	r6,r18,20
    b5c8:	739d883a 	add	r14,r14,r14
    b5cc:	14400315 	stw	r17,12(r2)
    b5d0:	2319883a 	add	r12,r4,r12
    b5d4:	339d883a 	add	r14,r6,r14
    b5d8:	12400504 	addi	r9,r2,20
    b5dc:	0007883a 	mov	r3,zero
    b5e0:	22000017 	ldw	r8,0(r4)
    b5e4:	32800017 	ldw	r10,0(r6)
    b5e8:	4ac00104 	addi	r11,r9,4
    b5ec:	41ffffcc 	andi	r7,r8,65535
    b5f0:	38c7883a 	add	r3,r7,r3
    b5f4:	51ffffcc 	andi	r7,r10,65535
    b5f8:	19cfc83a 	sub	r7,r3,r7
    b5fc:	4010d43a 	srli	r8,r8,16
    b600:	5014d43a 	srli	r10,r10,16
    b604:	3807d43a 	srai	r3,r7,16
    b608:	39ffffcc 	andi	r7,r7,65535
    b60c:	4291c83a 	sub	r8,r8,r10
    b610:	40c7883a 	add	r3,r8,r3
    b614:	1810943a 	slli	r8,r3,16
    b618:	31800104 	addi	r6,r6,4
    b61c:	21000104 	addi	r4,r4,4
    b620:	41ceb03a 	or	r7,r8,r7
    b624:	49c00015 	stw	r7,0(r9)
    b628:	1807d43a 	srai	r3,r3,16
    b62c:	580b883a 	mov	r5,r11
    b630:	5813883a 	mov	r9,r11
    b634:	33bfea36 	bltu	r6,r14,b5e0 <__alt_mem_Flash_flash_data+0xf400b5e0>
    b638:	2011883a 	mov	r8,r4
    b63c:	2300152e 	bgeu	r4,r12,b694 <__mdiff+0x130>
    b640:	21400017 	ldw	r5,0(r4)
    b644:	4a400104 	addi	r9,r9,4
    b648:	21000104 	addi	r4,r4,4
    b64c:	29ffffcc 	andi	r7,r5,65535
    b650:	38c7883a 	add	r3,r7,r3
    b654:	280ad43a 	srli	r5,r5,16
    b658:	180dd43a 	srai	r6,r3,16
    b65c:	19ffffcc 	andi	r7,r3,65535
    b660:	3147883a 	add	r3,r6,r5
    b664:	180a943a 	slli	r5,r3,16
    b668:	1807d43a 	srai	r3,r3,16
    b66c:	29ceb03a 	or	r7,r5,r7
    b670:	49ffff15 	stw	r7,-4(r9)
    b674:	233ff236 	bltu	r4,r12,b640 <__alt_mem_Flash_flash_data+0xf400b640>
    b678:	0206303a 	nor	r3,zero,r8
    b67c:	1b07883a 	add	r3,r3,r12
    b680:	1806d0ba 	srli	r3,r3,2
    b684:	18c00044 	addi	r3,r3,1
    b688:	18c7883a 	add	r3,r3,r3
    b68c:	18c7883a 	add	r3,r3,r3
    b690:	58cb883a 	add	r5,r11,r3
    b694:	28ffff04 	addi	r3,r5,-4
    b698:	3800041e 	bne	r7,zero,b6ac <__mdiff+0x148>
    b69c:	18ffff04 	addi	r3,r3,-4
    b6a0:	19000017 	ldw	r4,0(r3)
    b6a4:	6b7fffc4 	addi	r13,r13,-1
    b6a8:	203ffc26 	beq	r4,zero,b69c <__alt_mem_Flash_flash_data+0xf400b69c>
    b6ac:	13400415 	stw	r13,16(r2)
    b6b0:	dfc00417 	ldw	ra,16(sp)
    b6b4:	dcc00317 	ldw	r19,12(sp)
    b6b8:	dc800217 	ldw	r18,8(sp)
    b6bc:	dc400117 	ldw	r17,4(sp)
    b6c0:	dc000017 	ldw	r16,0(sp)
    b6c4:	dec00504 	addi	sp,sp,20
    b6c8:	f800283a 	ret
    b6cc:	8005883a 	mov	r2,r16
    b6d0:	04400044 	movi	r17,1
    b6d4:	9021883a 	mov	r16,r18
    b6d8:	1025883a 	mov	r18,r2
    b6dc:	003fb006 	br	b5a0 <__alt_mem_Flash_flash_data+0xf400b5a0>
    b6e0:	9809883a 	mov	r4,r19
    b6e4:	000b883a 	mov	r5,zero
    b6e8:	000ac300 	call	ac30 <_Balloc>
    b6ec:	00c00044 	movi	r3,1
    b6f0:	10c00415 	stw	r3,16(r2)
    b6f4:	10000515 	stw	zero,20(r2)
    b6f8:	003fed06 	br	b6b0 <__alt_mem_Flash_flash_data+0xf400b6b0>

0000b6fc <__ulp>:
    b6fc:	295ffc2c 	andhi	r5,r5,32752
    b700:	00bf3034 	movhi	r2,64704
    b704:	2887883a 	add	r3,r5,r2
    b708:	00c0020e 	bge	zero,r3,b714 <__ulp+0x18>
    b70c:	0005883a 	mov	r2,zero
    b710:	f800283a 	ret
    b714:	00c7c83a 	sub	r3,zero,r3
    b718:	180bd53a 	srai	r5,r3,20
    b71c:	008004c4 	movi	r2,19
    b720:	11400a0e 	bge	r2,r5,b74c <__ulp+0x50>
    b724:	00800c84 	movi	r2,50
    b728:	0007883a 	mov	r3,zero
    b72c:	11400516 	blt	r2,r5,b744 <__ulp+0x48>
    b730:	00800cc4 	movi	r2,51
    b734:	114bc83a 	sub	r5,r2,r5
    b738:	00800044 	movi	r2,1
    b73c:	1144983a 	sll	r2,r2,r5
    b740:	f800283a 	ret
    b744:	00800044 	movi	r2,1
    b748:	f800283a 	ret
    b74c:	00800234 	movhi	r2,8
    b750:	1147d83a 	sra	r3,r2,r5
    b754:	0005883a 	mov	r2,zero
    b758:	f800283a 	ret

0000b75c <__b2d>:
    b75c:	defffa04 	addi	sp,sp,-24
    b760:	dc000015 	stw	r16,0(sp)
    b764:	24000417 	ldw	r16,16(r4)
    b768:	dc400115 	stw	r17,4(sp)
    b76c:	24400504 	addi	r17,r4,20
    b770:	8421883a 	add	r16,r16,r16
    b774:	8421883a 	add	r16,r16,r16
    b778:	8c21883a 	add	r16,r17,r16
    b77c:	dc800215 	stw	r18,8(sp)
    b780:	84bfff17 	ldw	r18,-4(r16)
    b784:	dd000415 	stw	r20,16(sp)
    b788:	dcc00315 	stw	r19,12(sp)
    b78c:	9009883a 	mov	r4,r18
    b790:	2829883a 	mov	r20,r5
    b794:	dfc00515 	stw	ra,20(sp)
    b798:	000af240 	call	af24 <__hi0bits>
    b79c:	00c00804 	movi	r3,32
    b7a0:	1887c83a 	sub	r3,r3,r2
    b7a4:	a0c00015 	stw	r3,0(r20)
    b7a8:	00c00284 	movi	r3,10
    b7ac:	84ffff04 	addi	r19,r16,-4
    b7b0:	18801216 	blt	r3,r2,b7fc <__b2d+0xa0>
    b7b4:	014002c4 	movi	r5,11
    b7b8:	2889c83a 	sub	r4,r5,r2
    b7bc:	9106d83a 	srl	r3,r18,r4
    b7c0:	18cffc34 	orhi	r3,r3,16368
    b7c4:	8cc0282e 	bgeu	r17,r19,b868 <__b2d+0x10c>
    b7c8:	817ffe17 	ldw	r5,-8(r16)
    b7cc:	290ad83a 	srl	r5,r5,r4
    b7d0:	10800544 	addi	r2,r2,21
    b7d4:	9084983a 	sll	r2,r18,r2
    b7d8:	2884b03a 	or	r2,r5,r2
    b7dc:	dfc00517 	ldw	ra,20(sp)
    b7e0:	dd000417 	ldw	r20,16(sp)
    b7e4:	dcc00317 	ldw	r19,12(sp)
    b7e8:	dc800217 	ldw	r18,8(sp)
    b7ec:	dc400117 	ldw	r17,4(sp)
    b7f0:	dc000017 	ldw	r16,0(sp)
    b7f4:	dec00604 	addi	sp,sp,24
    b7f8:	f800283a 	ret
    b7fc:	113ffd44 	addi	r4,r2,-11
    b800:	8cc00f2e 	bgeu	r17,r19,b840 <__b2d+0xe4>
    b804:	81bffe04 	addi	r6,r16,-8
    b808:	817ffe17 	ldw	r5,-8(r16)
    b80c:	20001326 	beq	r4,zero,b85c <__b2d+0x100>
    b810:	00c00ac4 	movi	r3,43
    b814:	1885c83a 	sub	r2,r3,r2
    b818:	2886d83a 	srl	r3,r5,r2
    b81c:	9124983a 	sll	r18,r18,r4
    b820:	90e4b03a 	or	r18,r18,r3
    b824:	90cffc34 	orhi	r3,r18,16368
    b828:	8980112e 	bgeu	r17,r6,b870 <__b2d+0x114>
    b82c:	81bffd17 	ldw	r6,-12(r16)
    b830:	308cd83a 	srl	r6,r6,r2
    b834:	2904983a 	sll	r2,r5,r4
    b838:	1184b03a 	or	r2,r2,r6
    b83c:	003fe706 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b840:	20000526 	beq	r4,zero,b858 <__b2d+0xfc>
    b844:	9124983a 	sll	r18,r18,r4
    b848:	000d883a 	mov	r6,zero
    b84c:	000b883a 	mov	r5,zero
    b850:	90cffc34 	orhi	r3,r18,16368
    b854:	003ff706 	br	b834 <__alt_mem_Flash_flash_data+0xf400b834>
    b858:	000b883a 	mov	r5,zero
    b85c:	90cffc34 	orhi	r3,r18,16368
    b860:	2805883a 	mov	r2,r5
    b864:	003fdd06 	br	b7dc <__alt_mem_Flash_flash_data+0xf400b7dc>
    b868:	000b883a 	mov	r5,zero
    b86c:	003fd806 	br	b7d0 <__alt_mem_Flash_flash_data+0xf400b7d0>
    b870:	000d883a 	mov	r6,zero
    b874:	003fef06 	br	b834 <__alt_mem_Flash_flash_data+0xf400b834>

0000b878 <__d2b>:
    b878:	defff704 	addi	sp,sp,-36
    b87c:	dc000215 	stw	r16,8(sp)
    b880:	3021883a 	mov	r16,r6
    b884:	dc400315 	stw	r17,12(sp)
    b888:	8022907a 	slli	r17,r16,1
    b88c:	dd400715 	stw	r21,28(sp)
    b890:	282b883a 	mov	r21,r5
    b894:	01400044 	movi	r5,1
    b898:	dd000615 	stw	r20,24(sp)
    b89c:	dcc00515 	stw	r19,20(sp)
    b8a0:	dc800415 	stw	r18,16(sp)
    b8a4:	dfc00815 	stw	ra,32(sp)
    b8a8:	3829883a 	mov	r20,r7
    b8ac:	dc800917 	ldw	r18,36(sp)
    b8b0:	8822d57a 	srli	r17,r17,21
    b8b4:	000ac300 	call	ac30 <_Balloc>
    b8b8:	1027883a 	mov	r19,r2
    b8bc:	00800434 	movhi	r2,16
    b8c0:	10bfffc4 	addi	r2,r2,-1
    b8c4:	808c703a 	and	r6,r16,r2
    b8c8:	88000126 	beq	r17,zero,b8d0 <__d2b+0x58>
    b8cc:	31800434 	orhi	r6,r6,16
    b8d0:	d9800015 	stw	r6,0(sp)
    b8d4:	a8001f26 	beq	r21,zero,b954 <__d2b+0xdc>
    b8d8:	d9000104 	addi	r4,sp,4
    b8dc:	dd400115 	stw	r21,4(sp)
    b8e0:	000af8c0 	call	af8c <__lo0bits>
    b8e4:	d8c00017 	ldw	r3,0(sp)
    b8e8:	1000291e 	bne	r2,zero,b990 <__d2b+0x118>
    b8ec:	d9000117 	ldw	r4,4(sp)
    b8f0:	99000515 	stw	r4,20(r19)
    b8f4:	1820c03a 	cmpne	r16,r3,zero
    b8f8:	84000044 	addi	r16,r16,1
    b8fc:	98c00615 	stw	r3,24(r19)
    b900:	9c000415 	stw	r16,16(r19)
    b904:	88001b1e 	bne	r17,zero,b974 <__d2b+0xfc>
    b908:	800690ba 	slli	r3,r16,2
    b90c:	10bef384 	addi	r2,r2,-1074
    b910:	a0800015 	stw	r2,0(r20)
    b914:	98c5883a 	add	r2,r19,r3
    b918:	11000417 	ldw	r4,16(r2)
    b91c:	8020917a 	slli	r16,r16,5
    b920:	000af240 	call	af24 <__hi0bits>
    b924:	8085c83a 	sub	r2,r16,r2
    b928:	90800015 	stw	r2,0(r18)
    b92c:	9805883a 	mov	r2,r19
    b930:	dfc00817 	ldw	ra,32(sp)
    b934:	dd400717 	ldw	r21,28(sp)
    b938:	dd000617 	ldw	r20,24(sp)
    b93c:	dcc00517 	ldw	r19,20(sp)
    b940:	dc800417 	ldw	r18,16(sp)
    b944:	dc400317 	ldw	r17,12(sp)
    b948:	dc000217 	ldw	r16,8(sp)
    b94c:	dec00904 	addi	sp,sp,36
    b950:	f800283a 	ret
    b954:	d809883a 	mov	r4,sp
    b958:	000af8c0 	call	af8c <__lo0bits>
    b95c:	d8c00017 	ldw	r3,0(sp)
    b960:	04000044 	movi	r16,1
    b964:	9c000415 	stw	r16,16(r19)
    b968:	98c00515 	stw	r3,20(r19)
    b96c:	10800804 	addi	r2,r2,32
    b970:	883fe526 	beq	r17,zero,b908 <__alt_mem_Flash_flash_data+0xf400b908>
    b974:	8c7ef344 	addi	r17,r17,-1075
    b978:	88a3883a 	add	r17,r17,r2
    b97c:	00c00d44 	movi	r3,53
    b980:	a4400015 	stw	r17,0(r20)
    b984:	1885c83a 	sub	r2,r3,r2
    b988:	90800015 	stw	r2,0(r18)
    b98c:	003fe706 	br	b92c <__alt_mem_Flash_flash_data+0xf400b92c>
    b990:	01000804 	movi	r4,32
    b994:	2089c83a 	sub	r4,r4,r2
    b998:	1908983a 	sll	r4,r3,r4
    b99c:	d9400117 	ldw	r5,4(sp)
    b9a0:	1886d83a 	srl	r3,r3,r2
    b9a4:	2148b03a 	or	r4,r4,r5
    b9a8:	99000515 	stw	r4,20(r19)
    b9ac:	d8c00015 	stw	r3,0(sp)
    b9b0:	003fd006 	br	b8f4 <__alt_mem_Flash_flash_data+0xf400b8f4>

0000b9b4 <__ratio>:
    b9b4:	defff904 	addi	sp,sp,-28
    b9b8:	dc400315 	stw	r17,12(sp)
    b9bc:	2823883a 	mov	r17,r5
    b9c0:	d9400104 	addi	r5,sp,4
    b9c4:	dfc00615 	stw	ra,24(sp)
    b9c8:	dcc00515 	stw	r19,20(sp)
    b9cc:	dc800415 	stw	r18,16(sp)
    b9d0:	2027883a 	mov	r19,r4
    b9d4:	dc000215 	stw	r16,8(sp)
    b9d8:	000b75c0 	call	b75c <__b2d>
    b9dc:	8809883a 	mov	r4,r17
    b9e0:	d80b883a 	mov	r5,sp
    b9e4:	1025883a 	mov	r18,r2
    b9e8:	1821883a 	mov	r16,r3
    b9ec:	000b75c0 	call	b75c <__b2d>
    b9f0:	8a400417 	ldw	r9,16(r17)
    b9f4:	9a000417 	ldw	r8,16(r19)
    b9f8:	100d883a 	mov	r6,r2
    b9fc:	d8800017 	ldw	r2,0(sp)
    ba00:	4251c83a 	sub	r8,r8,r9
    ba04:	4012917a 	slli	r9,r8,5
    ba08:	da000117 	ldw	r8,4(sp)
    ba0c:	4091c83a 	sub	r8,r8,r2
    ba10:	4251883a 	add	r8,r8,r9
    ba14:	02000d0e 	bge	zero,r8,ba4c <__ratio+0x98>
    ba18:	4010953a 	slli	r8,r8,20
    ba1c:	4421883a 	add	r16,r8,r16
    ba20:	9009883a 	mov	r4,r18
    ba24:	800b883a 	mov	r5,r16
    ba28:	180f883a 	mov	r7,r3
    ba2c:	00108b80 	call	108b8 <__divdf3>
    ba30:	dfc00617 	ldw	ra,24(sp)
    ba34:	dcc00517 	ldw	r19,20(sp)
    ba38:	dc800417 	ldw	r18,16(sp)
    ba3c:	dc400317 	ldw	r17,12(sp)
    ba40:	dc000217 	ldw	r16,8(sp)
    ba44:	dec00704 	addi	sp,sp,28
    ba48:	f800283a 	ret
    ba4c:	4010953a 	slli	r8,r8,20
    ba50:	1a07c83a 	sub	r3,r3,r8
    ba54:	003ff206 	br	ba20 <__alt_mem_Flash_flash_data+0xf400ba20>

0000ba58 <_mprec_log10>:
    ba58:	defffe04 	addi	sp,sp,-8
    ba5c:	dc000015 	stw	r16,0(sp)
    ba60:	dfc00115 	stw	ra,4(sp)
    ba64:	008005c4 	movi	r2,23
    ba68:	2021883a 	mov	r16,r4
    ba6c:	11000d0e 	bge	r2,r4,baa4 <_mprec_log10+0x4c>
    ba70:	0005883a 	mov	r2,zero
    ba74:	00cffc34 	movhi	r3,16368
    ba78:	843fffc4 	addi	r16,r16,-1
    ba7c:	1009883a 	mov	r4,r2
    ba80:	180b883a 	mov	r5,r3
    ba84:	000d883a 	mov	r6,zero
    ba88:	01d00934 	movhi	r7,16420
    ba8c:	00113c80 	call	113c8 <__muldf3>
    ba90:	803ff91e 	bne	r16,zero,ba78 <__alt_mem_Flash_flash_data+0xf400ba78>
    ba94:	dfc00117 	ldw	ra,4(sp)
    ba98:	dc000017 	ldw	r16,0(sp)
    ba9c:	dec00204 	addi	sp,sp,8
    baa0:	f800283a 	ret
    baa4:	202090fa 	slli	r16,r4,3
    baa8:	008000b4 	movhi	r2,2
    baac:	10bfbc04 	addi	r2,r2,-272
    bab0:	1421883a 	add	r16,r2,r16
    bab4:	80800017 	ldw	r2,0(r16)
    bab8:	80c00117 	ldw	r3,4(r16)
    babc:	dfc00117 	ldw	ra,4(sp)
    bac0:	dc000017 	ldw	r16,0(sp)
    bac4:	dec00204 	addi	sp,sp,8
    bac8:	f800283a 	ret

0000bacc <__copybits>:
    bacc:	297fffc4 	addi	r5,r5,-1
    bad0:	280fd17a 	srai	r7,r5,5
    bad4:	30c00417 	ldw	r3,16(r6)
    bad8:	30800504 	addi	r2,r6,20
    badc:	39c00044 	addi	r7,r7,1
    bae0:	18c7883a 	add	r3,r3,r3
    bae4:	39cf883a 	add	r7,r7,r7
    bae8:	18c7883a 	add	r3,r3,r3
    baec:	39cf883a 	add	r7,r7,r7
    baf0:	10c7883a 	add	r3,r2,r3
    baf4:	21cf883a 	add	r7,r4,r7
    baf8:	10c00d2e 	bgeu	r2,r3,bb30 <__copybits+0x64>
    bafc:	200b883a 	mov	r5,r4
    bb00:	12000017 	ldw	r8,0(r2)
    bb04:	29400104 	addi	r5,r5,4
    bb08:	10800104 	addi	r2,r2,4
    bb0c:	2a3fff15 	stw	r8,-4(r5)
    bb10:	10fffb36 	bltu	r2,r3,bb00 <__alt_mem_Flash_flash_data+0xf400bb00>
    bb14:	1985c83a 	sub	r2,r3,r6
    bb18:	10bffac4 	addi	r2,r2,-21
    bb1c:	1004d0ba 	srli	r2,r2,2
    bb20:	10800044 	addi	r2,r2,1
    bb24:	1085883a 	add	r2,r2,r2
    bb28:	1085883a 	add	r2,r2,r2
    bb2c:	2089883a 	add	r4,r4,r2
    bb30:	21c0032e 	bgeu	r4,r7,bb40 <__copybits+0x74>
    bb34:	20000015 	stw	zero,0(r4)
    bb38:	21000104 	addi	r4,r4,4
    bb3c:	21fffd36 	bltu	r4,r7,bb34 <__alt_mem_Flash_flash_data+0xf400bb34>
    bb40:	f800283a 	ret

0000bb44 <__any_on>:
    bb44:	20c00417 	ldw	r3,16(r4)
    bb48:	2805d17a 	srai	r2,r5,5
    bb4c:	21000504 	addi	r4,r4,20
    bb50:	18800d0e 	bge	r3,r2,bb88 <__any_on+0x44>
    bb54:	18c7883a 	add	r3,r3,r3
    bb58:	18c7883a 	add	r3,r3,r3
    bb5c:	20c7883a 	add	r3,r4,r3
    bb60:	20c0192e 	bgeu	r4,r3,bbc8 <__any_on+0x84>
    bb64:	18bfff17 	ldw	r2,-4(r3)
    bb68:	18ffff04 	addi	r3,r3,-4
    bb6c:	1000041e 	bne	r2,zero,bb80 <__any_on+0x3c>
    bb70:	20c0142e 	bgeu	r4,r3,bbc4 <__any_on+0x80>
    bb74:	18ffff04 	addi	r3,r3,-4
    bb78:	19400017 	ldw	r5,0(r3)
    bb7c:	283ffc26 	beq	r5,zero,bb70 <__alt_mem_Flash_flash_data+0xf400bb70>
    bb80:	00800044 	movi	r2,1
    bb84:	f800283a 	ret
    bb88:	10c00a0e 	bge	r2,r3,bbb4 <__any_on+0x70>
    bb8c:	1085883a 	add	r2,r2,r2
    bb90:	1085883a 	add	r2,r2,r2
    bb94:	294007cc 	andi	r5,r5,31
    bb98:	2087883a 	add	r3,r4,r2
    bb9c:	283ff026 	beq	r5,zero,bb60 <__alt_mem_Flash_flash_data+0xf400bb60>
    bba0:	19800017 	ldw	r6,0(r3)
    bba4:	3144d83a 	srl	r2,r6,r5
    bba8:	114a983a 	sll	r5,r2,r5
    bbac:	29bff41e 	bne	r5,r6,bb80 <__alt_mem_Flash_flash_data+0xf400bb80>
    bbb0:	003feb06 	br	bb60 <__alt_mem_Flash_flash_data+0xf400bb60>
    bbb4:	1085883a 	add	r2,r2,r2
    bbb8:	1085883a 	add	r2,r2,r2
    bbbc:	2087883a 	add	r3,r4,r2
    bbc0:	003fe706 	br	bb60 <__alt_mem_Flash_flash_data+0xf400bb60>
    bbc4:	f800283a 	ret
    bbc8:	0005883a 	mov	r2,zero
    bbcc:	f800283a 	ret

0000bbd0 <_realloc_r>:
    bbd0:	defff604 	addi	sp,sp,-40
    bbd4:	dd000415 	stw	r20,16(sp)
    bbd8:	dc400115 	stw	r17,4(sp)
    bbdc:	dfc00915 	stw	ra,36(sp)
    bbe0:	df000815 	stw	fp,32(sp)
    bbe4:	ddc00715 	stw	r23,28(sp)
    bbe8:	dd800615 	stw	r22,24(sp)
    bbec:	dd400515 	stw	r21,20(sp)
    bbf0:	dcc00315 	stw	r19,12(sp)
    bbf4:	dc800215 	stw	r18,8(sp)
    bbf8:	dc000015 	stw	r16,0(sp)
    bbfc:	2829883a 	mov	r20,r5
    bc00:	3023883a 	mov	r17,r6
    bc04:	2800ad26 	beq	r5,zero,bebc <_realloc_r+0x2ec>
    bc08:	2025883a 	mov	r18,r4
    bc0c:	00130f80 	call	130f8 <__malloc_lock>
    bc10:	a0ffff17 	ldw	r3,-4(r20)
    bc14:	043fff04 	movi	r16,-4
    bc18:	890002c4 	addi	r4,r17,11
    bc1c:	01c00584 	movi	r7,22
    bc20:	a57ffe04 	addi	r21,r20,-8
    bc24:	1c20703a 	and	r16,r3,r16
    bc28:	39001d2e 	bgeu	r7,r4,bca0 <_realloc_r+0xd0>
    bc2c:	05bffe04 	movi	r22,-8
    bc30:	25ac703a 	and	r22,r4,r22
    bc34:	b00f883a 	mov	r7,r22
    bc38:	b0006516 	blt	r22,zero,bdd0 <_realloc_r+0x200>
    bc3c:	b4406436 	bltu	r22,r17,bdd0 <_realloc_r+0x200>
    bc40:	81c01a0e 	bge	r16,r7,bcac <_realloc_r+0xdc>
    bc44:	070000b4 	movhi	fp,2
    bc48:	e7022004 	addi	fp,fp,2176
    bc4c:	e1400217 	ldw	r5,8(fp)
    bc50:	ac11883a 	add	r8,r21,r16
    bc54:	2a006226 	beq	r5,r8,bde0 <_realloc_r+0x210>
    bc58:	41800117 	ldw	r6,4(r8)
    bc5c:	027fff84 	movi	r9,-2
    bc60:	3252703a 	and	r9,r6,r9
    bc64:	4253883a 	add	r9,r8,r9
    bc68:	49000117 	ldw	r4,4(r9)
    bc6c:	2100004c 	andi	r4,r4,1
    bc70:	2000281e 	bne	r4,zero,bd14 <_realloc_r+0x144>
    bc74:	00bfff04 	movi	r2,-4
    bc78:	3084703a 	and	r2,r6,r2
    bc7c:	1409883a 	add	r4,r2,r16
    bc80:	21c05e16 	blt	r4,r7,bdfc <_realloc_r+0x22c>
    bc84:	40800317 	ldw	r2,12(r8)
    bc88:	41400217 	ldw	r5,8(r8)
    bc8c:	a023883a 	mov	r17,r20
    bc90:	2021883a 	mov	r16,r4
    bc94:	28800315 	stw	r2,12(r5)
    bc98:	11400215 	stw	r5,8(r2)
    bc9c:	00000406 	br	bcb0 <_realloc_r+0xe0>
    bca0:	01c00404 	movi	r7,16
    bca4:	382d883a 	mov	r22,r7
    bca8:	003fe406 	br	bc3c <__alt_mem_Flash_flash_data+0xf400bc3c>
    bcac:	a023883a 	mov	r17,r20
    bcb0:	858fc83a 	sub	r7,r16,r22
    bcb4:	008003c4 	movi	r2,15
    bcb8:	18c0004c 	andi	r3,r3,1
    bcbc:	11c07236 	bltu	r2,r7,be88 <_realloc_r+0x2b8>
    bcc0:	1c06b03a 	or	r3,r3,r16
    bcc4:	a8c00115 	stw	r3,4(r21)
    bcc8:	ac21883a 	add	r16,r21,r16
    bccc:	80800117 	ldw	r2,4(r16)
    bcd0:	10800054 	ori	r2,r2,1
    bcd4:	80800115 	stw	r2,4(r16)
    bcd8:	9009883a 	mov	r4,r18
    bcdc:	00132180 	call	13218 <__malloc_unlock>
    bce0:	8805883a 	mov	r2,r17
    bce4:	dfc00917 	ldw	ra,36(sp)
    bce8:	df000817 	ldw	fp,32(sp)
    bcec:	ddc00717 	ldw	r23,28(sp)
    bcf0:	dd800617 	ldw	r22,24(sp)
    bcf4:	dd400517 	ldw	r21,20(sp)
    bcf8:	dd000417 	ldw	r20,16(sp)
    bcfc:	dcc00317 	ldw	r19,12(sp)
    bd00:	dc800217 	ldw	r18,8(sp)
    bd04:	dc400117 	ldw	r17,4(sp)
    bd08:	dc000017 	ldw	r16,0(sp)
    bd0c:	dec00a04 	addi	sp,sp,40
    bd10:	f800283a 	ret
    bd14:	18c0004c 	andi	r3,r3,1
    bd18:	1800081e 	bne	r3,zero,bd3c <_realloc_r+0x16c>
    bd1c:	a4fffe17 	ldw	r19,-8(r20)
    bd20:	00bfff04 	movi	r2,-4
    bd24:	ace7c83a 	sub	r19,r21,r19
    bd28:	98c00117 	ldw	r3,4(r19)
    bd2c:	1886703a 	and	r3,r3,r2
    bd30:	98000226 	beq	r19,zero,bd3c <_realloc_r+0x16c>
    bd34:	1c2f883a 	add	r23,r3,r16
    bd38:	b9c06d0e 	bge	r23,r7,bef0 <_realloc_r+0x320>
    bd3c:	880b883a 	mov	r5,r17
    bd40:	9009883a 	mov	r4,r18
    bd44:	0009fe80 	call	9fe8 <_malloc_r>
    bd48:	1023883a 	mov	r17,r2
    bd4c:	1000ef26 	beq	r2,zero,c10c <_realloc_r+0x53c>
    bd50:	a0ffff17 	ldw	r3,-4(r20)
    bd54:	113ffe04 	addi	r4,r2,-8
    bd58:	00bfff84 	movi	r2,-2
    bd5c:	1884703a 	and	r2,r3,r2
    bd60:	a885883a 	add	r2,r21,r2
    bd64:	2080bf26 	beq	r4,r2,c064 <_realloc_r+0x494>
    bd68:	81bfff04 	addi	r6,r16,-4
    bd6c:	00800904 	movi	r2,36
    bd70:	11808936 	bltu	r2,r6,bf98 <_realloc_r+0x3c8>
    bd74:	00c004c4 	movi	r3,19
    bd78:	19806c2e 	bgeu	r3,r6,bf2c <_realloc_r+0x35c>
    bd7c:	a0c00017 	ldw	r3,0(r20)
    bd80:	88c00015 	stw	r3,0(r17)
    bd84:	a0c00117 	ldw	r3,4(r20)
    bd88:	88c00115 	stw	r3,4(r17)
    bd8c:	00c006c4 	movi	r3,27
    bd90:	1980ac36 	bltu	r3,r6,c044 <_realloc_r+0x474>
    bd94:	88800204 	addi	r2,r17,8
    bd98:	a0c00204 	addi	r3,r20,8
    bd9c:	19000017 	ldw	r4,0(r3)
    bda0:	11000015 	stw	r4,0(r2)
    bda4:	19000117 	ldw	r4,4(r3)
    bda8:	11000115 	stw	r4,4(r2)
    bdac:	18c00217 	ldw	r3,8(r3)
    bdb0:	10c00215 	stw	r3,8(r2)
    bdb4:	a00b883a 	mov	r5,r20
    bdb8:	9009883a 	mov	r4,r18
    bdbc:	00094180 	call	9418 <_free_r>
    bdc0:	9009883a 	mov	r4,r18
    bdc4:	00132180 	call	13218 <__malloc_unlock>
    bdc8:	8805883a 	mov	r2,r17
    bdcc:	003fc506 	br	bce4 <__alt_mem_Flash_flash_data+0xf400bce4>
    bdd0:	00800304 	movi	r2,12
    bdd4:	90800015 	stw	r2,0(r18)
    bdd8:	0005883a 	mov	r2,zero
    bddc:	003fc106 	br	bce4 <__alt_mem_Flash_flash_data+0xf400bce4>
    bde0:	29800117 	ldw	r6,4(r5)
    bde4:	00bfff04 	movi	r2,-4
    bde8:	b1000404 	addi	r4,r22,16
    bdec:	3084703a 	and	r2,r6,r2
    bdf0:	140d883a 	add	r6,r2,r16
    bdf4:	31005b0e 	bge	r6,r4,bf64 <_realloc_r+0x394>
    bdf8:	2811883a 	mov	r8,r5
    bdfc:	18c0004c 	andi	r3,r3,1
    be00:	183fce1e 	bne	r3,zero,bd3c <__alt_mem_Flash_flash_data+0xf400bd3c>
    be04:	a4fffe17 	ldw	r19,-8(r20)
    be08:	00ffff04 	movi	r3,-4
    be0c:	ace7c83a 	sub	r19,r21,r19
    be10:	99000117 	ldw	r4,4(r19)
    be14:	20c6703a 	and	r3,r4,r3
    be18:	403fc526 	beq	r8,zero,bd30 <__alt_mem_Flash_flash_data+0xf400bd30>
    be1c:	1c2f883a 	add	r23,r3,r16
    be20:	b8af883a 	add	r23,r23,r2
    be24:	41406026 	beq	r8,r5,bfa8 <_realloc_r+0x3d8>
    be28:	b9ffc116 	blt	r23,r7,bd30 <__alt_mem_Flash_flash_data+0xf400bd30>
    be2c:	40c00217 	ldw	r3,8(r8)
    be30:	40800317 	ldw	r2,12(r8)
    be34:	81bfff04 	addi	r6,r16,-4
    be38:	01000904 	movi	r4,36
    be3c:	18800315 	stw	r2,12(r3)
    be40:	10c00215 	stw	r3,8(r2)
    be44:	99400217 	ldw	r5,8(r19)
    be48:	98c00317 	ldw	r3,12(r19)
    be4c:	9c400204 	addi	r17,r19,8
    be50:	28c00315 	stw	r3,12(r5)
    be54:	19400215 	stw	r5,8(r3)
    be58:	21802d36 	bltu	r4,r6,bf10 <_realloc_r+0x340>
    be5c:	008004c4 	movi	r2,19
    be60:	1180352e 	bgeu	r2,r6,bf38 <_realloc_r+0x368>
    be64:	a0800017 	ldw	r2,0(r20)
    be68:	98800215 	stw	r2,8(r19)
    be6c:	a0800117 	ldw	r2,4(r20)
    be70:	98800315 	stw	r2,12(r19)
    be74:	008006c4 	movi	r2,27
    be78:	11808036 	bltu	r2,r6,c07c <_realloc_r+0x4ac>
    be7c:	98c00404 	addi	r3,r19,16
    be80:	a5000204 	addi	r20,r20,8
    be84:	00002d06 	br	bf3c <_realloc_r+0x36c>
    be88:	1d86b03a 	or	r3,r3,r22
    be8c:	ad8b883a 	add	r5,r21,r22
    be90:	a8c00115 	stw	r3,4(r21)
    be94:	38800054 	ori	r2,r7,1
    be98:	28800115 	stw	r2,4(r5)
    be9c:	29cf883a 	add	r7,r5,r7
    bea0:	38800117 	ldw	r2,4(r7)
    bea4:	9009883a 	mov	r4,r18
    bea8:	29400204 	addi	r5,r5,8
    beac:	10800054 	ori	r2,r2,1
    beb0:	38800115 	stw	r2,4(r7)
    beb4:	00094180 	call	9418 <_free_r>
    beb8:	003f8706 	br	bcd8 <__alt_mem_Flash_flash_data+0xf400bcd8>
    bebc:	300b883a 	mov	r5,r6
    bec0:	dfc00917 	ldw	ra,36(sp)
    bec4:	df000817 	ldw	fp,32(sp)
    bec8:	ddc00717 	ldw	r23,28(sp)
    becc:	dd800617 	ldw	r22,24(sp)
    bed0:	dd400517 	ldw	r21,20(sp)
    bed4:	dd000417 	ldw	r20,16(sp)
    bed8:	dcc00317 	ldw	r19,12(sp)
    bedc:	dc800217 	ldw	r18,8(sp)
    bee0:	dc400117 	ldw	r17,4(sp)
    bee4:	dc000017 	ldw	r16,0(sp)
    bee8:	dec00a04 	addi	sp,sp,40
    beec:	0009fe81 	jmpi	9fe8 <_malloc_r>
    bef0:	98800317 	ldw	r2,12(r19)
    bef4:	98c00217 	ldw	r3,8(r19)
    bef8:	81bfff04 	addi	r6,r16,-4
    befc:	01000904 	movi	r4,36
    bf00:	18800315 	stw	r2,12(r3)
    bf04:	10c00215 	stw	r3,8(r2)
    bf08:	9c400204 	addi	r17,r19,8
    bf0c:	21bfd32e 	bgeu	r4,r6,be5c <__alt_mem_Flash_flash_data+0xf400be5c>
    bf10:	8809883a 	mov	r4,r17
    bf14:	a00b883a 	mov	r5,r20
    bf18:	000a9b00 	call	a9b0 <memmove>
    bf1c:	98c00117 	ldw	r3,4(r19)
    bf20:	b821883a 	mov	r16,r23
    bf24:	982b883a 	mov	r21,r19
    bf28:	003f6106 	br	bcb0 <__alt_mem_Flash_flash_data+0xf400bcb0>
    bf2c:	8805883a 	mov	r2,r17
    bf30:	a007883a 	mov	r3,r20
    bf34:	003f9906 	br	bd9c <__alt_mem_Flash_flash_data+0xf400bd9c>
    bf38:	8807883a 	mov	r3,r17
    bf3c:	a0800017 	ldw	r2,0(r20)
    bf40:	b821883a 	mov	r16,r23
    bf44:	982b883a 	mov	r21,r19
    bf48:	18800015 	stw	r2,0(r3)
    bf4c:	a0800117 	ldw	r2,4(r20)
    bf50:	18800115 	stw	r2,4(r3)
    bf54:	a0800217 	ldw	r2,8(r20)
    bf58:	18800215 	stw	r2,8(r3)
    bf5c:	98c00117 	ldw	r3,4(r19)
    bf60:	003f5306 	br	bcb0 <__alt_mem_Flash_flash_data+0xf400bcb0>
    bf64:	adab883a 	add	r21,r21,r22
    bf68:	3585c83a 	sub	r2,r6,r22
    bf6c:	e5400215 	stw	r21,8(fp)
    bf70:	10800054 	ori	r2,r2,1
    bf74:	a8800115 	stw	r2,4(r21)
    bf78:	a0bfff17 	ldw	r2,-4(r20)
    bf7c:	9009883a 	mov	r4,r18
    bf80:	1080004c 	andi	r2,r2,1
    bf84:	b0acb03a 	or	r22,r22,r2
    bf88:	a5bfff15 	stw	r22,-4(r20)
    bf8c:	00132180 	call	13218 <__malloc_unlock>
    bf90:	a005883a 	mov	r2,r20
    bf94:	003f5306 	br	bce4 <__alt_mem_Flash_flash_data+0xf400bce4>
    bf98:	8809883a 	mov	r4,r17
    bf9c:	a00b883a 	mov	r5,r20
    bfa0:	000a9b00 	call	a9b0 <memmove>
    bfa4:	003f8306 	br	bdb4 <__alt_mem_Flash_flash_data+0xf400bdb4>
    bfa8:	b0800404 	addi	r2,r22,16
    bfac:	b8bf6016 	blt	r23,r2,bd30 <__alt_mem_Flash_flash_data+0xf400bd30>
    bfb0:	98800317 	ldw	r2,12(r19)
    bfb4:	98c00217 	ldw	r3,8(r19)
    bfb8:	81bfff04 	addi	r6,r16,-4
    bfbc:	01000904 	movi	r4,36
    bfc0:	18800315 	stw	r2,12(r3)
    bfc4:	10c00215 	stw	r3,8(r2)
    bfc8:	9c400204 	addi	r17,r19,8
    bfcc:	21804336 	bltu	r4,r6,c0dc <_realloc_r+0x50c>
    bfd0:	008004c4 	movi	r2,19
    bfd4:	11803f2e 	bgeu	r2,r6,c0d4 <_realloc_r+0x504>
    bfd8:	a0800017 	ldw	r2,0(r20)
    bfdc:	98800215 	stw	r2,8(r19)
    bfe0:	a0800117 	ldw	r2,4(r20)
    bfe4:	98800315 	stw	r2,12(r19)
    bfe8:	008006c4 	movi	r2,27
    bfec:	11803f36 	bltu	r2,r6,c0ec <_realloc_r+0x51c>
    bff0:	98800404 	addi	r2,r19,16
    bff4:	a5000204 	addi	r20,r20,8
    bff8:	a0c00017 	ldw	r3,0(r20)
    bffc:	10c00015 	stw	r3,0(r2)
    c000:	a0c00117 	ldw	r3,4(r20)
    c004:	10c00115 	stw	r3,4(r2)
    c008:	a0c00217 	ldw	r3,8(r20)
    c00c:	10c00215 	stw	r3,8(r2)
    c010:	9d87883a 	add	r3,r19,r22
    c014:	bd85c83a 	sub	r2,r23,r22
    c018:	e0c00215 	stw	r3,8(fp)
    c01c:	10800054 	ori	r2,r2,1
    c020:	18800115 	stw	r2,4(r3)
    c024:	98800117 	ldw	r2,4(r19)
    c028:	9009883a 	mov	r4,r18
    c02c:	1080004c 	andi	r2,r2,1
    c030:	b0acb03a 	or	r22,r22,r2
    c034:	9d800115 	stw	r22,4(r19)
    c038:	00132180 	call	13218 <__malloc_unlock>
    c03c:	8805883a 	mov	r2,r17
    c040:	003f2806 	br	bce4 <__alt_mem_Flash_flash_data+0xf400bce4>
    c044:	a0c00217 	ldw	r3,8(r20)
    c048:	88c00215 	stw	r3,8(r17)
    c04c:	a0c00317 	ldw	r3,12(r20)
    c050:	88c00315 	stw	r3,12(r17)
    c054:	30801126 	beq	r6,r2,c09c <_realloc_r+0x4cc>
    c058:	88800404 	addi	r2,r17,16
    c05c:	a0c00404 	addi	r3,r20,16
    c060:	003f4e06 	br	bd9c <__alt_mem_Flash_flash_data+0xf400bd9c>
    c064:	893fff17 	ldw	r4,-4(r17)
    c068:	00bfff04 	movi	r2,-4
    c06c:	a023883a 	mov	r17,r20
    c070:	2084703a 	and	r2,r4,r2
    c074:	80a1883a 	add	r16,r16,r2
    c078:	003f0d06 	br	bcb0 <__alt_mem_Flash_flash_data+0xf400bcb0>
    c07c:	a0800217 	ldw	r2,8(r20)
    c080:	98800415 	stw	r2,16(r19)
    c084:	a0800317 	ldw	r2,12(r20)
    c088:	98800515 	stw	r2,20(r19)
    c08c:	31000a26 	beq	r6,r4,c0b8 <_realloc_r+0x4e8>
    c090:	98c00604 	addi	r3,r19,24
    c094:	a5000404 	addi	r20,r20,16
    c098:	003fa806 	br	bf3c <__alt_mem_Flash_flash_data+0xf400bf3c>
    c09c:	a1000417 	ldw	r4,16(r20)
    c0a0:	88800604 	addi	r2,r17,24
    c0a4:	a0c00604 	addi	r3,r20,24
    c0a8:	89000415 	stw	r4,16(r17)
    c0ac:	a1000517 	ldw	r4,20(r20)
    c0b0:	89000515 	stw	r4,20(r17)
    c0b4:	003f3906 	br	bd9c <__alt_mem_Flash_flash_data+0xf400bd9c>
    c0b8:	a0800417 	ldw	r2,16(r20)
    c0bc:	a5000604 	addi	r20,r20,24
    c0c0:	98c00804 	addi	r3,r19,32
    c0c4:	98800615 	stw	r2,24(r19)
    c0c8:	a0bfff17 	ldw	r2,-4(r20)
    c0cc:	98800715 	stw	r2,28(r19)
    c0d0:	003f9a06 	br	bf3c <__alt_mem_Flash_flash_data+0xf400bf3c>
    c0d4:	8805883a 	mov	r2,r17
    c0d8:	003fc706 	br	bff8 <__alt_mem_Flash_flash_data+0xf400bff8>
    c0dc:	8809883a 	mov	r4,r17
    c0e0:	a00b883a 	mov	r5,r20
    c0e4:	000a9b00 	call	a9b0 <memmove>
    c0e8:	003fc906 	br	c010 <__alt_mem_Flash_flash_data+0xf400c010>
    c0ec:	a0800217 	ldw	r2,8(r20)
    c0f0:	98800415 	stw	r2,16(r19)
    c0f4:	a0800317 	ldw	r2,12(r20)
    c0f8:	98800515 	stw	r2,20(r19)
    c0fc:	31000726 	beq	r6,r4,c11c <_realloc_r+0x54c>
    c100:	98800604 	addi	r2,r19,24
    c104:	a5000404 	addi	r20,r20,16
    c108:	003fbb06 	br	bff8 <__alt_mem_Flash_flash_data+0xf400bff8>
    c10c:	9009883a 	mov	r4,r18
    c110:	00132180 	call	13218 <__malloc_unlock>
    c114:	0005883a 	mov	r2,zero
    c118:	003ef206 	br	bce4 <__alt_mem_Flash_flash_data+0xf400bce4>
    c11c:	a0c00417 	ldw	r3,16(r20)
    c120:	a5000604 	addi	r20,r20,24
    c124:	98800804 	addi	r2,r19,32
    c128:	98c00615 	stw	r3,24(r19)
    c12c:	a0ffff17 	ldw	r3,-4(r20)
    c130:	98c00715 	stw	r3,28(r19)
    c134:	003fb006 	br	bff8 <__alt_mem_Flash_flash_data+0xf400bff8>

0000c138 <__fpclassifyd>:
    c138:	00a00034 	movhi	r2,32768
    c13c:	10bfffc4 	addi	r2,r2,-1
    c140:	2884703a 	and	r2,r5,r2
    c144:	10000726 	beq	r2,zero,c164 <__fpclassifyd+0x2c>
    c148:	00fffc34 	movhi	r3,65520
    c14c:	019ff834 	movhi	r6,32736
    c150:	28c7883a 	add	r3,r5,r3
    c154:	31bfffc4 	addi	r6,r6,-1
    c158:	30c00536 	bltu	r6,r3,c170 <__fpclassifyd+0x38>
    c15c:	00800104 	movi	r2,4
    c160:	f800283a 	ret
    c164:	2000021e 	bne	r4,zero,c170 <__fpclassifyd+0x38>
    c168:	00800084 	movi	r2,2
    c16c:	f800283a 	ret
    c170:	00dffc34 	movhi	r3,32752
    c174:	019ff834 	movhi	r6,32736
    c178:	28cb883a 	add	r5,r5,r3
    c17c:	31bfffc4 	addi	r6,r6,-1
    c180:	317ff62e 	bgeu	r6,r5,c15c <__alt_mem_Flash_flash_data+0xf400c15c>
    c184:	01400434 	movhi	r5,16
    c188:	297fffc4 	addi	r5,r5,-1
    c18c:	28800236 	bltu	r5,r2,c198 <__fpclassifyd+0x60>
    c190:	008000c4 	movi	r2,3
    c194:	f800283a 	ret
    c198:	10c00226 	beq	r2,r3,c1a4 <__fpclassifyd+0x6c>
    c19c:	0005883a 	mov	r2,zero
    c1a0:	f800283a 	ret
    c1a4:	2005003a 	cmpeq	r2,r4,zero
    c1a8:	f800283a 	ret

0000c1ac <_sbrk_r>:
    c1ac:	defffd04 	addi	sp,sp,-12
    c1b0:	dc000015 	stw	r16,0(sp)
    c1b4:	040000b4 	movhi	r16,2
    c1b8:	dc400115 	stw	r17,4(sp)
    c1bc:	8410b104 	addi	r16,r16,17092
    c1c0:	2023883a 	mov	r17,r4
    c1c4:	2809883a 	mov	r4,r5
    c1c8:	dfc00215 	stw	ra,8(sp)
    c1cc:	80000015 	stw	zero,0(r16)
    c1d0:	0012de40 	call	12de4 <sbrk>
    c1d4:	00ffffc4 	movi	r3,-1
    c1d8:	10c00526 	beq	r2,r3,c1f0 <_sbrk_r+0x44>
    c1dc:	dfc00217 	ldw	ra,8(sp)
    c1e0:	dc400117 	ldw	r17,4(sp)
    c1e4:	dc000017 	ldw	r16,0(sp)
    c1e8:	dec00304 	addi	sp,sp,12
    c1ec:	f800283a 	ret
    c1f0:	80c00017 	ldw	r3,0(r16)
    c1f4:	183ff926 	beq	r3,zero,c1dc <__alt_mem_Flash_flash_data+0xf400c1dc>
    c1f8:	88c00015 	stw	r3,0(r17)
    c1fc:	003ff706 	br	c1dc <__alt_mem_Flash_flash_data+0xf400c1dc>

0000c200 <__sread>:
    c200:	defffe04 	addi	sp,sp,-8
    c204:	dc000015 	stw	r16,0(sp)
    c208:	2821883a 	mov	r16,r5
    c20c:	2940038f 	ldh	r5,14(r5)
    c210:	dfc00115 	stw	ra,4(sp)
    c214:	000f0080 	call	f008 <_read_r>
    c218:	10000716 	blt	r2,zero,c238 <__sread+0x38>
    c21c:	80c01417 	ldw	r3,80(r16)
    c220:	1887883a 	add	r3,r3,r2
    c224:	80c01415 	stw	r3,80(r16)
    c228:	dfc00117 	ldw	ra,4(sp)
    c22c:	dc000017 	ldw	r16,0(sp)
    c230:	dec00204 	addi	sp,sp,8
    c234:	f800283a 	ret
    c238:	80c0030b 	ldhu	r3,12(r16)
    c23c:	18fbffcc 	andi	r3,r3,61439
    c240:	80c0030d 	sth	r3,12(r16)
    c244:	dfc00117 	ldw	ra,4(sp)
    c248:	dc000017 	ldw	r16,0(sp)
    c24c:	dec00204 	addi	sp,sp,8
    c250:	f800283a 	ret

0000c254 <__seofread>:
    c254:	0005883a 	mov	r2,zero
    c258:	f800283a 	ret

0000c25c <__swrite>:
    c25c:	2880030b 	ldhu	r2,12(r5)
    c260:	defffb04 	addi	sp,sp,-20
    c264:	dcc00315 	stw	r19,12(sp)
    c268:	dc800215 	stw	r18,8(sp)
    c26c:	dc400115 	stw	r17,4(sp)
    c270:	dc000015 	stw	r16,0(sp)
    c274:	dfc00415 	stw	ra,16(sp)
    c278:	10c0400c 	andi	r3,r2,256
    c27c:	2821883a 	mov	r16,r5
    c280:	2027883a 	mov	r19,r4
    c284:	3025883a 	mov	r18,r6
    c288:	3823883a 	mov	r17,r7
    c28c:	18000526 	beq	r3,zero,c2a4 <__swrite+0x48>
    c290:	2940038f 	ldh	r5,14(r5)
    c294:	000d883a 	mov	r6,zero
    c298:	01c00084 	movi	r7,2
    c29c:	000efac0 	call	efac <_lseek_r>
    c2a0:	8080030b 	ldhu	r2,12(r16)
    c2a4:	8140038f 	ldh	r5,14(r16)
    c2a8:	10bbffcc 	andi	r2,r2,61439
    c2ac:	9809883a 	mov	r4,r19
    c2b0:	900d883a 	mov	r6,r18
    c2b4:	880f883a 	mov	r7,r17
    c2b8:	8080030d 	sth	r2,12(r16)
    c2bc:	dfc00417 	ldw	ra,16(sp)
    c2c0:	dcc00317 	ldw	r19,12(sp)
    c2c4:	dc800217 	ldw	r18,8(sp)
    c2c8:	dc400117 	ldw	r17,4(sp)
    c2cc:	dc000017 	ldw	r16,0(sp)
    c2d0:	dec00504 	addi	sp,sp,20
    c2d4:	000eaa81 	jmpi	eaa8 <_write_r>

0000c2d8 <__sseek>:
    c2d8:	defffe04 	addi	sp,sp,-8
    c2dc:	dc000015 	stw	r16,0(sp)
    c2e0:	2821883a 	mov	r16,r5
    c2e4:	2940038f 	ldh	r5,14(r5)
    c2e8:	dfc00115 	stw	ra,4(sp)
    c2ec:	000efac0 	call	efac <_lseek_r>
    c2f0:	00ffffc4 	movi	r3,-1
    c2f4:	10c00826 	beq	r2,r3,c318 <__sseek+0x40>
    c2f8:	80c0030b 	ldhu	r3,12(r16)
    c2fc:	80801415 	stw	r2,80(r16)
    c300:	18c40014 	ori	r3,r3,4096
    c304:	80c0030d 	sth	r3,12(r16)
    c308:	dfc00117 	ldw	ra,4(sp)
    c30c:	dc000017 	ldw	r16,0(sp)
    c310:	dec00204 	addi	sp,sp,8
    c314:	f800283a 	ret
    c318:	80c0030b 	ldhu	r3,12(r16)
    c31c:	18fbffcc 	andi	r3,r3,61439
    c320:	80c0030d 	sth	r3,12(r16)
    c324:	dfc00117 	ldw	ra,4(sp)
    c328:	dc000017 	ldw	r16,0(sp)
    c32c:	dec00204 	addi	sp,sp,8
    c330:	f800283a 	ret

0000c334 <__sclose>:
    c334:	2940038f 	ldh	r5,14(r5)
    c338:	000eb041 	jmpi	eb04 <_close_r>

0000c33c <strcmp>:
    c33c:	2144b03a 	or	r2,r4,r5
    c340:	108000cc 	andi	r2,r2,3
    c344:	1000171e 	bne	r2,zero,c3a4 <strcmp+0x68>
    c348:	20800017 	ldw	r2,0(r4)
    c34c:	28c00017 	ldw	r3,0(r5)
    c350:	10c0141e 	bne	r2,r3,c3a4 <strcmp+0x68>
    c354:	027fbff4 	movhi	r9,65279
    c358:	4a7fbfc4 	addi	r9,r9,-257
    c35c:	0086303a 	nor	r3,zero,r2
    c360:	02202074 	movhi	r8,32897
    c364:	1245883a 	add	r2,r2,r9
    c368:	42202004 	addi	r8,r8,-32640
    c36c:	10c4703a 	and	r2,r2,r3
    c370:	1204703a 	and	r2,r2,r8
    c374:	10000226 	beq	r2,zero,c380 <strcmp+0x44>
    c378:	00001706 	br	c3d8 <strcmp+0x9c>
    c37c:	1000161e 	bne	r2,zero,c3d8 <strcmp+0x9c>
    c380:	21000104 	addi	r4,r4,4
    c384:	20c00017 	ldw	r3,0(r4)
    c388:	29400104 	addi	r5,r5,4
    c38c:	29800017 	ldw	r6,0(r5)
    c390:	1a4f883a 	add	r7,r3,r9
    c394:	00c4303a 	nor	r2,zero,r3
    c398:	3884703a 	and	r2,r7,r2
    c39c:	1204703a 	and	r2,r2,r8
    c3a0:	19bff626 	beq	r3,r6,c37c <__alt_mem_Flash_flash_data+0xf400c37c>
    c3a4:	20800007 	ldb	r2,0(r4)
    c3a8:	1000051e 	bne	r2,zero,c3c0 <strcmp+0x84>
    c3ac:	00000606 	br	c3c8 <strcmp+0x8c>
    c3b0:	21000044 	addi	r4,r4,1
    c3b4:	20800007 	ldb	r2,0(r4)
    c3b8:	29400044 	addi	r5,r5,1
    c3bc:	10000226 	beq	r2,zero,c3c8 <strcmp+0x8c>
    c3c0:	28c00007 	ldb	r3,0(r5)
    c3c4:	10fffa26 	beq	r2,r3,c3b0 <__alt_mem_Flash_flash_data+0xf400c3b0>
    c3c8:	20800003 	ldbu	r2,0(r4)
    c3cc:	28c00003 	ldbu	r3,0(r5)
    c3d0:	10c5c83a 	sub	r2,r2,r3
    c3d4:	f800283a 	ret
    c3d8:	0005883a 	mov	r2,zero
    c3dc:	f800283a 	ret

0000c3e0 <__ssprint_r>:
    c3e0:	30800217 	ldw	r2,8(r6)
    c3e4:	defff604 	addi	sp,sp,-40
    c3e8:	ddc00715 	stw	r23,28(sp)
    c3ec:	dc800215 	stw	r18,8(sp)
    c3f0:	dfc00915 	stw	ra,36(sp)
    c3f4:	df000815 	stw	fp,32(sp)
    c3f8:	dd800615 	stw	r22,24(sp)
    c3fc:	dd400515 	stw	r21,20(sp)
    c400:	dd000415 	stw	r20,16(sp)
    c404:	dcc00315 	stw	r19,12(sp)
    c408:	dc400115 	stw	r17,4(sp)
    c40c:	dc000015 	stw	r16,0(sp)
    c410:	3025883a 	mov	r18,r6
    c414:	35c00017 	ldw	r23,0(r6)
    c418:	10005626 	beq	r2,zero,c574 <__ssprint_r+0x194>
    c41c:	2027883a 	mov	r19,r4
    c420:	28800217 	ldw	r2,8(r5)
    c424:	29000017 	ldw	r4,0(r5)
    c428:	2823883a 	mov	r17,r5
    c42c:	0039883a 	mov	fp,zero
    c430:	0021883a 	mov	r16,zero
    c434:	80003926 	beq	r16,zero,c51c <__ssprint_r+0x13c>
    c438:	102b883a 	mov	r21,r2
    c43c:	102d883a 	mov	r22,r2
    c440:	80803a36 	bltu	r16,r2,c52c <__ssprint_r+0x14c>
    c444:	88c0030b 	ldhu	r3,12(r17)
    c448:	1881200c 	andi	r2,r3,1152
    c44c:	10002626 	beq	r2,zero,c4e8 <__ssprint_r+0x108>
    c450:	88800517 	ldw	r2,20(r17)
    c454:	89400417 	ldw	r5,16(r17)
    c458:	81c00044 	addi	r7,r16,1
    c45c:	108d883a 	add	r6,r2,r2
    c460:	3085883a 	add	r2,r6,r2
    c464:	100cd7fa 	srli	r6,r2,31
    c468:	216dc83a 	sub	r22,r4,r5
    c46c:	3d89883a 	add	r4,r7,r22
    c470:	3085883a 	add	r2,r6,r2
    c474:	102bd07a 	srai	r21,r2,1
    c478:	a80d883a 	mov	r6,r21
    c47c:	a900022e 	bgeu	r21,r4,c488 <__ssprint_r+0xa8>
    c480:	202b883a 	mov	r21,r4
    c484:	200d883a 	mov	r6,r4
    c488:	18c1000c 	andi	r3,r3,1024
    c48c:	9809883a 	mov	r4,r19
    c490:	18002926 	beq	r3,zero,c538 <__ssprint_r+0x158>
    c494:	300b883a 	mov	r5,r6
    c498:	0009fe80 	call	9fe8 <_malloc_r>
    c49c:	1029883a 	mov	r20,r2
    c4a0:	10002b26 	beq	r2,zero,c550 <__ssprint_r+0x170>
    c4a4:	89400417 	ldw	r5,16(r17)
    c4a8:	1009883a 	mov	r4,r2
    c4ac:	b00d883a 	mov	r6,r22
    c4b0:	000a8780 	call	a878 <memcpy>
    c4b4:	8880030b 	ldhu	r2,12(r17)
    c4b8:	00fedfc4 	movi	r3,-1153
    c4bc:	10c4703a 	and	r2,r2,r3
    c4c0:	10802014 	ori	r2,r2,128
    c4c4:	8880030d 	sth	r2,12(r17)
    c4c8:	a589883a 	add	r4,r20,r22
    c4cc:	adadc83a 	sub	r22,r21,r22
    c4d0:	8d400515 	stw	r21,20(r17)
    c4d4:	8d800215 	stw	r22,8(r17)
    c4d8:	8d000415 	stw	r20,16(r17)
    c4dc:	89000015 	stw	r4,0(r17)
    c4e0:	802b883a 	mov	r21,r16
    c4e4:	802d883a 	mov	r22,r16
    c4e8:	e00b883a 	mov	r5,fp
    c4ec:	b00d883a 	mov	r6,r22
    c4f0:	000a9b00 	call	a9b0 <memmove>
    c4f4:	88800217 	ldw	r2,8(r17)
    c4f8:	89000017 	ldw	r4,0(r17)
    c4fc:	90c00217 	ldw	r3,8(r18)
    c500:	1545c83a 	sub	r2,r2,r21
    c504:	2589883a 	add	r4,r4,r22
    c508:	88800215 	stw	r2,8(r17)
    c50c:	89000015 	stw	r4,0(r17)
    c510:	1c21c83a 	sub	r16,r3,r16
    c514:	94000215 	stw	r16,8(r18)
    c518:	80001626 	beq	r16,zero,c574 <__ssprint_r+0x194>
    c51c:	bf000017 	ldw	fp,0(r23)
    c520:	bc000117 	ldw	r16,4(r23)
    c524:	bdc00204 	addi	r23,r23,8
    c528:	003fc206 	br	c434 <__alt_mem_Flash_flash_data+0xf400c434>
    c52c:	802b883a 	mov	r21,r16
    c530:	802d883a 	mov	r22,r16
    c534:	003fec06 	br	c4e8 <__alt_mem_Flash_flash_data+0xf400c4e8>
    c538:	000bbd00 	call	bbd0 <_realloc_r>
    c53c:	1029883a 	mov	r20,r2
    c540:	103fe11e 	bne	r2,zero,c4c8 <__alt_mem_Flash_flash_data+0xf400c4c8>
    c544:	89400417 	ldw	r5,16(r17)
    c548:	9809883a 	mov	r4,r19
    c54c:	00094180 	call	9418 <_free_r>
    c550:	88c0030b 	ldhu	r3,12(r17)
    c554:	00800304 	movi	r2,12
    c558:	98800015 	stw	r2,0(r19)
    c55c:	18c01014 	ori	r3,r3,64
    c560:	88c0030d 	sth	r3,12(r17)
    c564:	00bfffc4 	movi	r2,-1
    c568:	90000215 	stw	zero,8(r18)
    c56c:	90000115 	stw	zero,4(r18)
    c570:	00000206 	br	c57c <__ssprint_r+0x19c>
    c574:	90000115 	stw	zero,4(r18)
    c578:	0005883a 	mov	r2,zero
    c57c:	dfc00917 	ldw	ra,36(sp)
    c580:	df000817 	ldw	fp,32(sp)
    c584:	ddc00717 	ldw	r23,28(sp)
    c588:	dd800617 	ldw	r22,24(sp)
    c58c:	dd400517 	ldw	r21,20(sp)
    c590:	dd000417 	ldw	r20,16(sp)
    c594:	dcc00317 	ldw	r19,12(sp)
    c598:	dc800217 	ldw	r18,8(sp)
    c59c:	dc400117 	ldw	r17,4(sp)
    c5a0:	dc000017 	ldw	r16,0(sp)
    c5a4:	dec00a04 	addi	sp,sp,40
    c5a8:	f800283a 	ret

0000c5ac <___svfiprintf_internal_r>:
    c5ac:	2880030b 	ldhu	r2,12(r5)
    c5b0:	deffc904 	addi	sp,sp,-220
    c5b4:	dd403215 	stw	r21,200(sp)
    c5b8:	dfc03615 	stw	ra,216(sp)
    c5bc:	df003515 	stw	fp,212(sp)
    c5c0:	ddc03415 	stw	r23,208(sp)
    c5c4:	dd803315 	stw	r22,204(sp)
    c5c8:	dd003115 	stw	r20,196(sp)
    c5cc:	dcc03015 	stw	r19,192(sp)
    c5d0:	dc802f15 	stw	r18,188(sp)
    c5d4:	dc402e15 	stw	r17,184(sp)
    c5d8:	dc002d15 	stw	r16,180(sp)
    c5dc:	d9402715 	stw	r5,156(sp)
    c5e0:	d9002915 	stw	r4,164(sp)
    c5e4:	1080200c 	andi	r2,r2,128
    c5e8:	d9c02315 	stw	r7,140(sp)
    c5ec:	302b883a 	mov	r21,r6
    c5f0:	10000226 	beq	r2,zero,c5fc <___svfiprintf_internal_r+0x50>
    c5f4:	28800417 	ldw	r2,16(r5)
    c5f8:	1003ce26 	beq	r2,zero,d534 <___svfiprintf_internal_r+0xf88>
    c5fc:	dac01a04 	addi	r11,sp,104
    c600:	da8019c4 	addi	r10,sp,103
    c604:	dc802917 	ldw	r18,164(sp)
    c608:	dd002717 	ldw	r20,156(sp)
    c60c:	04c000b4 	movhi	r19,2
    c610:	dac01e15 	stw	r11,120(sp)
    c614:	5a97c83a 	sub	r11,r11,r10
    c618:	9cffee04 	addi	r19,r19,-72
    c61c:	da801f15 	stw	r10,124(sp)
    c620:	dec01a15 	stw	sp,104(sp)
    c624:	d8001c15 	stw	zero,112(sp)
    c628:	d8001b15 	stw	zero,108(sp)
    c62c:	d811883a 	mov	r8,sp
    c630:	d8002a15 	stw	zero,168(sp)
    c634:	d8002415 	stw	zero,144(sp)
    c638:	dac02b15 	stw	r11,172(sp)
    c63c:	a8800007 	ldb	r2,0(r21)
    c640:	10026a26 	beq	r2,zero,cfec <___svfiprintf_internal_r+0xa40>
    c644:	01000944 	movi	r4,37
    c648:	11026826 	beq	r2,r4,cfec <___svfiprintf_internal_r+0xa40>
    c64c:	a805883a 	mov	r2,r21
    c650:	00000106 	br	c658 <___svfiprintf_internal_r+0xac>
    c654:	19000326 	beq	r3,r4,c664 <___svfiprintf_internal_r+0xb8>
    c658:	10800044 	addi	r2,r2,1
    c65c:	10c00007 	ldb	r3,0(r2)
    c660:	183ffc1e 	bne	r3,zero,c654 <__alt_mem_Flash_flash_data+0xf400c654>
    c664:	1561c83a 	sub	r16,r2,r21
    c668:	102d883a 	mov	r22,r2
    c66c:	80000e26 	beq	r16,zero,c6a8 <___svfiprintf_internal_r+0xfc>
    c670:	d8c01c17 	ldw	r3,112(sp)
    c674:	d8801b17 	ldw	r2,108(sp)
    c678:	45400015 	stw	r21,0(r8)
    c67c:	1c07883a 	add	r3,r3,r16
    c680:	10800044 	addi	r2,r2,1
    c684:	d8c01c15 	stw	r3,112(sp)
    c688:	44000115 	stw	r16,4(r8)
    c68c:	d8801b15 	stw	r2,108(sp)
    c690:	00c001c4 	movi	r3,7
    c694:	1882d816 	blt	r3,r2,d1f8 <___svfiprintf_internal_r+0xc4c>
    c698:	42000204 	addi	r8,r8,8
    c69c:	da802417 	ldw	r10,144(sp)
    c6a0:	5415883a 	add	r10,r10,r16
    c6a4:	da802415 	stw	r10,144(sp)
    c6a8:	b0800007 	ldb	r2,0(r22)
    c6ac:	10027526 	beq	r2,zero,d084 <___svfiprintf_internal_r+0xad8>
    c6b0:	b1000047 	ldb	r4,1(r22)
    c6b4:	b5400044 	addi	r21,r22,1
    c6b8:	d8001d85 	stb	zero,118(sp)
    c6bc:	000d883a 	mov	r6,zero
    c6c0:	043fffc4 	movi	r16,-1
    c6c4:	d8002115 	stw	zero,132(sp)
    c6c8:	0023883a 	mov	r17,zero
    c6cc:	00c01604 	movi	r3,88
    c6d0:	01400244 	movi	r5,9
    c6d4:	02400a84 	movi	r9,42
    c6d8:	01c01b04 	movi	r7,108
    c6dc:	ad400044 	addi	r21,r21,1
    c6e0:	20bff804 	addi	r2,r4,-32
    c6e4:	18819736 	bltu	r3,r2,cd44 <___svfiprintf_internal_r+0x798>
    c6e8:	100490ba 	slli	r2,r2,2
    c6ec:	02c00074 	movhi	r11,1
    c6f0:	5af1c004 	addi	r11,r11,-14592
    c6f4:	12c5883a 	add	r2,r2,r11
    c6f8:	10800017 	ldw	r2,0(r2)
    c6fc:	1000683a 	jmp	r2
    c700:	0000cc3c 	xorhi	zero,zero,816
    c704:	0000cd44 	movi	zero,821
    c708:	0000cd44 	movi	zero,821
    c70c:	0000cc30 	cmpltui	zero,zero,816
    c710:	0000cd44 	movi	zero,821
    c714:	0000cd44 	movi	zero,821
    c718:	0000cd44 	movi	zero,821
    c71c:	0000cd44 	movi	zero,821
    c720:	0000cd44 	movi	zero,821
    c724:	0000cd44 	movi	zero,821
    c728:	0000c95c 	xori	zero,zero,805
    c72c:	0000cd78 	rdprs	zero,zero,821
    c730:	0000cd44 	movi	zero,821
    c734:	0000c984 	movi	zero,806
    c738:	0000cd84 	movi	zero,822
    c73c:	0000cd44 	movi	zero,821
    c740:	0000cd6c 	andhi	zero,zero,821
    c744:	0000cd0c 	andi	zero,zero,820
    c748:	0000cd0c 	andi	zero,zero,820
    c74c:	0000cd0c 	andi	zero,zero,820
    c750:	0000cd0c 	andi	zero,zero,820
    c754:	0000cd0c 	andi	zero,zero,820
    c758:	0000cd0c 	andi	zero,zero,820
    c75c:	0000cd0c 	andi	zero,zero,820
    c760:	0000cd0c 	andi	zero,zero,820
    c764:	0000cd0c 	andi	zero,zero,820
    c768:	0000cd44 	movi	zero,821
    c76c:	0000cd44 	movi	zero,821
    c770:	0000cd44 	movi	zero,821
    c774:	0000cd44 	movi	zero,821
    c778:	0000cd44 	movi	zero,821
    c77c:	0000cd44 	movi	zero,821
    c780:	0000cd44 	movi	zero,821
    c784:	0000cd44 	movi	zero,821
    c788:	0000cd44 	movi	zero,821
    c78c:	0000cd44 	movi	zero,821
    c790:	0000cca4 	muli	zero,zero,818
    c794:	0000cd44 	movi	zero,821
    c798:	0000cd44 	movi	zero,821
    c79c:	0000cd44 	movi	zero,821
    c7a0:	0000cd44 	movi	zero,821
    c7a4:	0000cd44 	movi	zero,821
    c7a8:	0000cd44 	movi	zero,821
    c7ac:	0000cd44 	movi	zero,821
    c7b0:	0000cd44 	movi	zero,821
    c7b4:	0000cd44 	movi	zero,821
    c7b8:	0000cd44 	movi	zero,821
    c7bc:	0000c930 	cmpltui	zero,zero,804
    c7c0:	0000cd44 	movi	zero,821
    c7c4:	0000cd44 	movi	zero,821
    c7c8:	0000cd44 	movi	zero,821
    c7cc:	0000cd44 	movi	zero,821
    c7d0:	0000cd44 	movi	zero,821
    c7d4:	0000c864 	muli	zero,zero,801
    c7d8:	0000cd44 	movi	zero,821
    c7dc:	0000cd44 	movi	zero,821
    c7e0:	0000cb90 	cmplti	zero,zero,814
    c7e4:	0000cd44 	movi	zero,821
    c7e8:	0000cd44 	movi	zero,821
    c7ec:	0000cd44 	movi	zero,821
    c7f0:	0000cd44 	movi	zero,821
    c7f4:	0000cd44 	movi	zero,821
    c7f8:	0000cd44 	movi	zero,821
    c7fc:	0000cd44 	movi	zero,821
    c800:	0000cd44 	movi	zero,821
    c804:	0000cd44 	movi	zero,821
    c808:	0000cd44 	movi	zero,821
    c80c:	0000ca7c 	xorhi	zero,zero,809
    c810:	0000ca3c 	xorhi	zero,zero,808
    c814:	0000cd44 	movi	zero,821
    c818:	0000cd44 	movi	zero,821
    c81c:	0000cd44 	movi	zero,821
    c820:	0000cbec 	andhi	zero,zero,815
    c824:	0000ca3c 	xorhi	zero,zero,808
    c828:	0000cd44 	movi	zero,821
    c82c:	0000cd44 	movi	zero,821
    c830:	0000cbd8 	cmpnei	zero,zero,815
    c834:	0000cd44 	movi	zero,821
    c838:	0000cbf8 	rdprs	zero,zero,815
    c83c:	0000c934 	movhi	zero,804
    c840:	0000c9f8 	rdprs	zero,zero,807
    c844:	0000c9ec 	andhi	zero,zero,807
    c848:	0000cd44 	movi	zero,821
    c84c:	0000c990 	cmplti	zero,zero,806
    c850:	0000cd44 	movi	zero,821
    c854:	0000c868 	cmpgeui	zero,zero,801
    c858:	0000cd44 	movi	zero,821
    c85c:	0000cd44 	movi	zero,821
    c860:	0000cc58 	cmpnei	zero,zero,817
    c864:	8c400414 	ori	r17,r17,16
    c868:	8880080c 	andi	r2,r17,32
    c86c:	10029626 	beq	r2,zero,d2c8 <___svfiprintf_internal_r+0xd1c>
    c870:	da802317 	ldw	r10,140(sp)
    c874:	dac02317 	ldw	r11,140(sp)
    c878:	00800044 	movi	r2,1
    c87c:	52400017 	ldw	r9,0(r10)
    c880:	52800117 	ldw	r10,4(r10)
    c884:	5ac00204 	addi	r11,r11,8
    c888:	dac02315 	stw	r11,140(sp)
    c88c:	4a86b03a 	or	r3,r9,r10
    c890:	d8001d85 	stb	zero,118(sp)
    c894:	8039883a 	mov	fp,r16
    c898:	0017883a 	mov	r11,zero
    c89c:	80000216 	blt	r16,zero,c8a8 <___svfiprintf_internal_r+0x2fc>
    c8a0:	013fdfc4 	movi	r4,-129
    c8a4:	8922703a 	and	r17,r17,r4
    c8a8:	1801d21e 	bne	r3,zero,cff4 <___svfiprintf_internal_r+0xa48>
    c8ac:	80024626 	beq	r16,zero,d1c8 <___svfiprintf_internal_r+0xc1c>
    c8b0:	10803fcc 	andi	r2,r2,255
    c8b4:	00c00044 	movi	r3,1
    c8b8:	10c2b426 	beq	r2,r3,d38c <___svfiprintf_internal_r+0xde0>
    c8bc:	00c00084 	movi	r3,2
    c8c0:	10c25d26 	beq	r2,r3,d238 <___svfiprintf_internal_r+0xc8c>
    c8c4:	d8c01a04 	addi	r3,sp,104
    c8c8:	4808d0fa 	srli	r4,r9,3
    c8cc:	500a977a 	slli	r5,r10,29
    c8d0:	5014d0fa 	srli	r10,r10,3
    c8d4:	4a4001cc 	andi	r9,r9,7
    c8d8:	48800c04 	addi	r2,r9,48
    c8dc:	18ffffc4 	addi	r3,r3,-1
    c8e0:	2912b03a 	or	r9,r5,r4
    c8e4:	18800005 	stb	r2,0(r3)
    c8e8:	4a88b03a 	or	r4,r9,r10
    c8ec:	203ff61e 	bne	r4,zero,c8c8 <__alt_mem_Flash_flash_data+0xf400c8c8>
    c8f0:	8900004c 	andi	r4,r17,1
    c8f4:	d8c02615 	stw	r3,152(sp)
    c8f8:	2002961e 	bne	r4,zero,d354 <___svfiprintf_internal_r+0xda8>
    c8fc:	da801e17 	ldw	r10,120(sp)
    c900:	50f9c83a 	sub	fp,r10,r3
    c904:	df002015 	stw	fp,128(sp)
    c908:	e400010e 	bge	fp,r16,c910 <___svfiprintf_internal_r+0x364>
    c90c:	dc002015 	stw	r16,128(sp)
    c910:	5ac03fcc 	andi	r11,r11,255
    c914:	5ac0201c 	xori	r11,r11,128
    c918:	5affe004 	addi	r11,r11,-128
    c91c:	58006326 	beq	r11,zero,caac <___svfiprintf_internal_r+0x500>
    c920:	d8c02017 	ldw	r3,128(sp)
    c924:	18c00044 	addi	r3,r3,1
    c928:	d8c02015 	stw	r3,128(sp)
    c92c:	00005f06 	br	caac <___svfiprintf_internal_r+0x500>
    c930:	8c400414 	ori	r17,r17,16
    c934:	8880080c 	andi	r2,r17,32
    c938:	10027926 	beq	r2,zero,d320 <___svfiprintf_internal_r+0xd74>
    c93c:	dac02317 	ldw	r11,140(sp)
    c940:	0005883a 	mov	r2,zero
    c944:	5a400017 	ldw	r9,0(r11)
    c948:	5a800117 	ldw	r10,4(r11)
    c94c:	5ac00204 	addi	r11,r11,8
    c950:	dac02315 	stw	r11,140(sp)
    c954:	4a86b03a 	or	r3,r9,r10
    c958:	003fcd06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    c95c:	da802317 	ldw	r10,140(sp)
    c960:	dac02317 	ldw	r11,140(sp)
    c964:	52800017 	ldw	r10,0(r10)
    c968:	58800104 	addi	r2,r11,4
    c96c:	da802115 	stw	r10,132(sp)
    c970:	50028c0e 	bge	r10,zero,d3a4 <___svfiprintf_internal_r+0xdf8>
    c974:	da802117 	ldw	r10,132(sp)
    c978:	d8802315 	stw	r2,140(sp)
    c97c:	0295c83a 	sub	r10,zero,r10
    c980:	da802115 	stw	r10,132(sp)
    c984:	8c400114 	ori	r17,r17,4
    c988:	a9000007 	ldb	r4,0(r21)
    c98c:	003f5306 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    c990:	da802317 	ldw	r10,140(sp)
    c994:	dac02317 	ldw	r11,140(sp)
    c998:	d8001d85 	stb	zero,118(sp)
    c99c:	52800017 	ldw	r10,0(r10)
    c9a0:	5dc00104 	addi	r23,r11,4
    c9a4:	da802615 	stw	r10,152(sp)
    c9a8:	5002d626 	beq	r10,zero,d504 <___svfiprintf_internal_r+0xf58>
    c9ac:	d9002617 	ldw	r4,152(sp)
    c9b0:	8002cc16 	blt	r16,zero,d4e4 <___svfiprintf_internal_r+0xf38>
    c9b4:	000b883a 	mov	r5,zero
    c9b8:	800d883a 	mov	r6,r16
    c9bc:	da002c15 	stw	r8,176(sp)
    c9c0:	000a7900 	call	a790 <memchr>
    c9c4:	da002c17 	ldw	r8,176(sp)
    c9c8:	1002f026 	beq	r2,zero,d58c <___svfiprintf_internal_r+0xfe0>
    c9cc:	d8c02617 	ldw	r3,152(sp)
    c9d0:	10f9c83a 	sub	fp,r2,r3
    c9d4:	8700010e 	bge	r16,fp,c9dc <___svfiprintf_internal_r+0x430>
    c9d8:	8039883a 	mov	fp,r16
    c9dc:	dac01d83 	ldbu	r11,118(sp)
    c9e0:	ddc02315 	stw	r23,140(sp)
    c9e4:	0021883a 	mov	r16,zero
    c9e8:	003fc606 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    c9ec:	8c400814 	ori	r17,r17,32
    c9f0:	a9000007 	ldb	r4,0(r21)
    c9f4:	003f3906 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    c9f8:	da802317 	ldw	r10,140(sp)
    c9fc:	00800c04 	movi	r2,48
    ca00:	dac02317 	ldw	r11,140(sp)
    ca04:	52400017 	ldw	r9,0(r10)
    ca08:	d8801d05 	stb	r2,116(sp)
    ca0c:	00801e04 	movi	r2,120
    ca10:	d8801d45 	stb	r2,117(sp)
    ca14:	008000b4 	movhi	r2,2
    ca18:	10bf8504 	addi	r2,r2,-492
    ca1c:	5ac00104 	addi	r11,r11,4
    ca20:	d8802a15 	stw	r2,168(sp)
    ca24:	0015883a 	mov	r10,zero
    ca28:	8c400094 	ori	r17,r17,2
    ca2c:	dac02315 	stw	r11,140(sp)
    ca30:	00800084 	movi	r2,2
    ca34:	4807883a 	mov	r3,r9
    ca38:	003f9506 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    ca3c:	d9801d85 	stb	r6,118(sp)
    ca40:	8880080c 	andi	r2,r17,32
    ca44:	d8c02317 	ldw	r3,140(sp)
    ca48:	10009b26 	beq	r2,zero,ccb8 <___svfiprintf_internal_r+0x70c>
    ca4c:	dac02317 	ldw	r11,140(sp)
    ca50:	18800117 	ldw	r2,4(r3)
    ca54:	1a400017 	ldw	r9,0(r3)
    ca58:	5ac00204 	addi	r11,r11,8
    ca5c:	dac02315 	stw	r11,140(sp)
    ca60:	1015883a 	mov	r10,r2
    ca64:	10009f16 	blt	r2,zero,cce4 <___svfiprintf_internal_r+0x738>
    ca68:	dac01d83 	ldbu	r11,118(sp)
    ca6c:	8039883a 	mov	fp,r16
    ca70:	00800044 	movi	r2,1
    ca74:	4a86b03a 	or	r3,r9,r10
    ca78:	003f8806 	br	c89c <__alt_mem_Flash_flash_data+0xf400c89c>
    ca7c:	dac02317 	ldw	r11,140(sp)
    ca80:	00c00044 	movi	r3,1
    ca84:	da801004 	addi	r10,sp,64
    ca88:	58800017 	ldw	r2,0(r11)
    ca8c:	5ac00104 	addi	r11,r11,4
    ca90:	d8c02015 	stw	r3,128(sp)
    ca94:	d8001d85 	stb	zero,118(sp)
    ca98:	d8801005 	stb	r2,64(sp)
    ca9c:	dac02315 	stw	r11,140(sp)
    caa0:	1839883a 	mov	fp,r3
    caa4:	da802615 	stw	r10,152(sp)
    caa8:	0021883a 	mov	r16,zero
    caac:	8a80008c 	andi	r10,r17,2
    cab0:	da802215 	stw	r10,136(sp)
    cab4:	50000326 	beq	r10,zero,cac4 <___svfiprintf_internal_r+0x518>
    cab8:	dac02017 	ldw	r11,128(sp)
    cabc:	5ac00084 	addi	r11,r11,2
    cac0:	dac02015 	stw	r11,128(sp)
    cac4:	88c0210c 	andi	r3,r17,132
    cac8:	d8c02515 	stw	r3,148(sp)
    cacc:	1800bd1e 	bne	r3,zero,cdc4 <___svfiprintf_internal_r+0x818>
    cad0:	da802117 	ldw	r10,132(sp)
    cad4:	dac02017 	ldw	r11,128(sp)
    cad8:	52edc83a 	sub	r22,r10,r11
    cadc:	0580b90e 	bge	zero,r22,cdc4 <___svfiprintf_internal_r+0x818>
    cae0:	02400404 	movi	r9,16
    cae4:	d8c01c17 	ldw	r3,112(sp)
    cae8:	d8801b17 	ldw	r2,108(sp)
    caec:	4d829b0e 	bge	r9,r22,d55c <___svfiprintf_internal_r+0xfb0>
    caf0:	014000b4 	movhi	r5,2
    caf4:	297ff204 	addi	r5,r5,-56
    caf8:	d9402815 	stw	r5,160(sp)
    cafc:	05c001c4 	movi	r23,7
    cb00:	00000306 	br	cb10 <___svfiprintf_internal_r+0x564>
    cb04:	b5bffc04 	addi	r22,r22,-16
    cb08:	42000204 	addi	r8,r8,8
    cb0c:	4d80150e 	bge	r9,r22,cb64 <___svfiprintf_internal_r+0x5b8>
    cb10:	028000b4 	movhi	r10,2
    cb14:	18c00404 	addi	r3,r3,16
    cb18:	10800044 	addi	r2,r2,1
    cb1c:	52bff204 	addi	r10,r10,-56
    cb20:	42800015 	stw	r10,0(r8)
    cb24:	42400115 	stw	r9,4(r8)
    cb28:	d8c01c15 	stw	r3,112(sp)
    cb2c:	d8801b15 	stw	r2,108(sp)
    cb30:	b8bff40e 	bge	r23,r2,cb04 <__alt_mem_Flash_flash_data+0xf400cb04>
    cb34:	9009883a 	mov	r4,r18
    cb38:	a00b883a 	mov	r5,r20
    cb3c:	d9801a04 	addi	r6,sp,104
    cb40:	da402c15 	stw	r9,176(sp)
    cb44:	000c3e00 	call	c3e0 <__ssprint_r>
    cb48:	da402c17 	ldw	r9,176(sp)
    cb4c:	1001531e 	bne	r2,zero,d09c <___svfiprintf_internal_r+0xaf0>
    cb50:	b5bffc04 	addi	r22,r22,-16
    cb54:	d8c01c17 	ldw	r3,112(sp)
    cb58:	d8801b17 	ldw	r2,108(sp)
    cb5c:	d811883a 	mov	r8,sp
    cb60:	4dbfeb16 	blt	r9,r22,cb10 <__alt_mem_Flash_flash_data+0xf400cb10>
    cb64:	dac02817 	ldw	r11,160(sp)
    cb68:	b0c7883a 	add	r3,r22,r3
    cb6c:	10800044 	addi	r2,r2,1
    cb70:	42c00015 	stw	r11,0(r8)
    cb74:	45800115 	stw	r22,4(r8)
    cb78:	d8c01c15 	stw	r3,112(sp)
    cb7c:	d8801b15 	stw	r2,108(sp)
    cb80:	010001c4 	movi	r4,7
    cb84:	2081dd16 	blt	r4,r2,d2fc <___svfiprintf_internal_r+0xd50>
    cb88:	42000204 	addi	r8,r8,8
    cb8c:	00008f06 	br	cdcc <___svfiprintf_internal_r+0x820>
    cb90:	008000b4 	movhi	r2,2
    cb94:	10bf8004 	addi	r2,r2,-512
    cb98:	d8802a15 	stw	r2,168(sp)
    cb9c:	d9801d85 	stb	r6,118(sp)
    cba0:	8880080c 	andi	r2,r17,32
    cba4:	10003226 	beq	r2,zero,cc70 <___svfiprintf_internal_r+0x6c4>
    cba8:	da802317 	ldw	r10,140(sp)
    cbac:	dac02317 	ldw	r11,140(sp)
    cbb0:	52400017 	ldw	r9,0(r10)
    cbb4:	52800117 	ldw	r10,4(r10)
    cbb8:	5ac00204 	addi	r11,r11,8
    cbbc:	dac02315 	stw	r11,140(sp)
    cbc0:	8880004c 	andi	r2,r17,1
    cbc4:	10003426 	beq	r2,zero,cc98 <___svfiprintf_internal_r+0x6ec>
    cbc8:	4a86b03a 	or	r3,r9,r10
    cbcc:	1802231e 	bne	r3,zero,d45c <___svfiprintf_internal_r+0xeb0>
    cbd0:	00800084 	movi	r2,2
    cbd4:	003f2e06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    cbd8:	a9000007 	ldb	r4,0(r21)
    cbdc:	a805883a 	mov	r2,r21
    cbe0:	21c22426 	beq	r4,r7,d474 <___svfiprintf_internal_r+0xec8>
    cbe4:	8c400414 	ori	r17,r17,16
    cbe8:	003ebc06 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cbec:	8c401014 	ori	r17,r17,64
    cbf0:	a9000007 	ldb	r4,0(r21)
    cbf4:	003eb906 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cbf8:	d9801d85 	stb	r6,118(sp)
    cbfc:	8880080c 	andi	r2,r17,32
    cc00:	10020d1e 	bne	r2,zero,d438 <___svfiprintf_internal_r+0xe8c>
    cc04:	8880040c 	andi	r2,r17,16
    cc08:	10021e1e 	bne	r2,zero,d484 <___svfiprintf_internal_r+0xed8>
    cc0c:	8c40100c 	andi	r17,r17,64
    cc10:	88021c26 	beq	r17,zero,d484 <___svfiprintf_internal_r+0xed8>
    cc14:	dac02317 	ldw	r11,140(sp)
    cc18:	da802417 	ldw	r10,144(sp)
    cc1c:	58800017 	ldw	r2,0(r11)
    cc20:	5ac00104 	addi	r11,r11,4
    cc24:	dac02315 	stw	r11,140(sp)
    cc28:	1280000d 	sth	r10,0(r2)
    cc2c:	003e8306 	br	c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    cc30:	8c400054 	ori	r17,r17,1
    cc34:	a9000007 	ldb	r4,0(r21)
    cc38:	003ea806 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cc3c:	30803fcc 	andi	r2,r6,255
    cc40:	1080201c 	xori	r2,r2,128
    cc44:	10bfe004 	addi	r2,r2,-128
    cc48:	1001f91e 	bne	r2,zero,d430 <___svfiprintf_internal_r+0xe84>
    cc4c:	01800804 	movi	r6,32
    cc50:	a9000007 	ldb	r4,0(r21)
    cc54:	003ea106 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cc58:	008000b4 	movhi	r2,2
    cc5c:	10bf8504 	addi	r2,r2,-492
    cc60:	d8802a15 	stw	r2,168(sp)
    cc64:	d9801d85 	stb	r6,118(sp)
    cc68:	8880080c 	andi	r2,r17,32
    cc6c:	103fce1e 	bne	r2,zero,cba8 <__alt_mem_Flash_flash_data+0xf400cba8>
    cc70:	8880040c 	andi	r2,r17,16
    cc74:	1001e526 	beq	r2,zero,d40c <___svfiprintf_internal_r+0xe60>
    cc78:	da802317 	ldw	r10,140(sp)
    cc7c:	dac02317 	ldw	r11,140(sp)
    cc80:	52400017 	ldw	r9,0(r10)
    cc84:	8880004c 	andi	r2,r17,1
    cc88:	5ac00104 	addi	r11,r11,4
    cc8c:	dac02315 	stw	r11,140(sp)
    cc90:	0015883a 	mov	r10,zero
    cc94:	103fcc1e 	bne	r2,zero,cbc8 <__alt_mem_Flash_flash_data+0xf400cbc8>
    cc98:	00800084 	movi	r2,2
    cc9c:	4a86b03a 	or	r3,r9,r10
    cca0:	003efb06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    cca4:	8c400414 	ori	r17,r17,16
    cca8:	d9801d85 	stb	r6,118(sp)
    ccac:	8880080c 	andi	r2,r17,32
    ccb0:	d8c02317 	ldw	r3,140(sp)
    ccb4:	103f651e 	bne	r2,zero,ca4c <__alt_mem_Flash_flash_data+0xf400ca4c>
    ccb8:	8880040c 	andi	r2,r17,16
    ccbc:	1001c61e 	bne	r2,zero,d3d8 <___svfiprintf_internal_r+0xe2c>
    ccc0:	8880100c 	andi	r2,r17,64
    ccc4:	1001c426 	beq	r2,zero,d3d8 <___svfiprintf_internal_r+0xe2c>
    ccc8:	1a40000f 	ldh	r9,0(r3)
    cccc:	dac02317 	ldw	r11,140(sp)
    ccd0:	4815d7fa 	srai	r10,r9,31
    ccd4:	5ac00104 	addi	r11,r11,4
    ccd8:	dac02315 	stw	r11,140(sp)
    ccdc:	5005883a 	mov	r2,r10
    cce0:	103f610e 	bge	r2,zero,ca68 <__alt_mem_Flash_flash_data+0xf400ca68>
    cce4:	0253c83a 	sub	r9,zero,r9
    cce8:	4804c03a 	cmpne	r2,r9,zero
    ccec:	0295c83a 	sub	r10,zero,r10
    ccf0:	5095c83a 	sub	r10,r10,r2
    ccf4:	02c00b44 	movi	r11,45
    ccf8:	dac01d85 	stb	r11,118(sp)
    ccfc:	8039883a 	mov	fp,r16
    cd00:	00800044 	movi	r2,1
    cd04:	4a86b03a 	or	r3,r9,r10
    cd08:	003ee406 	br	c89c <__alt_mem_Flash_flash_data+0xf400c89c>
    cd0c:	a815883a 	mov	r10,r21
    cd10:	d8002115 	stw	zero,132(sp)
    cd14:	20bff404 	addi	r2,r4,-48
    cd18:	51000007 	ldb	r4,0(r10)
    cd1c:	da802117 	ldw	r10,132(sp)
    cd20:	ad400044 	addi	r21,r21,1
    cd24:	52c002a4 	muli	r11,r10,10
    cd28:	a815883a 	mov	r10,r21
    cd2c:	5885883a 	add	r2,r11,r2
    cd30:	d8802115 	stw	r2,132(sp)
    cd34:	20bff404 	addi	r2,r4,-48
    cd38:	28bff72e 	bgeu	r5,r2,cd18 <__alt_mem_Flash_flash_data+0xf400cd18>
    cd3c:	20bff804 	addi	r2,r4,-32
    cd40:	18be692e 	bgeu	r3,r2,c6e8 <__alt_mem_Flash_flash_data+0xf400c6e8>
    cd44:	d9801d85 	stb	r6,118(sp)
    cd48:	2000ce26 	beq	r4,zero,d084 <___svfiprintf_internal_r+0xad8>
    cd4c:	02800044 	movi	r10,1
    cd50:	dac01004 	addi	r11,sp,64
    cd54:	da802015 	stw	r10,128(sp)
    cd58:	d9001005 	stb	r4,64(sp)
    cd5c:	d8001d85 	stb	zero,118(sp)
    cd60:	5039883a 	mov	fp,r10
    cd64:	dac02615 	stw	r11,152(sp)
    cd68:	003f4f06 	br	caa8 <__alt_mem_Flash_flash_data+0xf400caa8>
    cd6c:	8c402014 	ori	r17,r17,128
    cd70:	a9000007 	ldb	r4,0(r21)
    cd74:	003e5906 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cd78:	01800ac4 	movi	r6,43
    cd7c:	a9000007 	ldb	r4,0(r21)
    cd80:	003e5606 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    cd84:	a9000007 	ldb	r4,0(r21)
    cd88:	aa800044 	addi	r10,r21,1
    cd8c:	22420626 	beq	r4,r9,d5a8 <___svfiprintf_internal_r+0xffc>
    cd90:	20bff404 	addi	r2,r4,-48
    cd94:	502b883a 	mov	r21,r10
    cd98:	0021883a 	mov	r16,zero
    cd9c:	28be5036 	bltu	r5,r2,c6e0 <__alt_mem_Flash_flash_data+0xf400c6e0>
    cda0:	a9000007 	ldb	r4,0(r21)
    cda4:	840002a4 	muli	r16,r16,10
    cda8:	ad400044 	addi	r21,r21,1
    cdac:	1421883a 	add	r16,r2,r16
    cdb0:	20bff404 	addi	r2,r4,-48
    cdb4:	28bffa2e 	bgeu	r5,r2,cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    cdb8:	803e490e 	bge	r16,zero,c6e0 <__alt_mem_Flash_flash_data+0xf400c6e0>
    cdbc:	043fffc4 	movi	r16,-1
    cdc0:	003e4706 	br	c6e0 <__alt_mem_Flash_flash_data+0xf400c6e0>
    cdc4:	d8c01c17 	ldw	r3,112(sp)
    cdc8:	d8801b17 	ldw	r2,108(sp)
    cdcc:	d9001d87 	ldb	r4,118(sp)
    cdd0:	20000b26 	beq	r4,zero,ce00 <___svfiprintf_internal_r+0x854>
    cdd4:	d9001d84 	addi	r4,sp,118
    cdd8:	18c00044 	addi	r3,r3,1
    cddc:	10800044 	addi	r2,r2,1
    cde0:	41000015 	stw	r4,0(r8)
    cde4:	01000044 	movi	r4,1
    cde8:	41000115 	stw	r4,4(r8)
    cdec:	d8c01c15 	stw	r3,112(sp)
    cdf0:	d8801b15 	stw	r2,108(sp)
    cdf4:	010001c4 	movi	r4,7
    cdf8:	20811e16 	blt	r4,r2,d274 <___svfiprintf_internal_r+0xcc8>
    cdfc:	42000204 	addi	r8,r8,8
    ce00:	da802217 	ldw	r10,136(sp)
    ce04:	50000b26 	beq	r10,zero,ce34 <___svfiprintf_internal_r+0x888>
    ce08:	d9001d04 	addi	r4,sp,116
    ce0c:	18c00084 	addi	r3,r3,2
    ce10:	10800044 	addi	r2,r2,1
    ce14:	41000015 	stw	r4,0(r8)
    ce18:	01000084 	movi	r4,2
    ce1c:	41000115 	stw	r4,4(r8)
    ce20:	d8c01c15 	stw	r3,112(sp)
    ce24:	d8801b15 	stw	r2,108(sp)
    ce28:	010001c4 	movi	r4,7
    ce2c:	20811a16 	blt	r4,r2,d298 <___svfiprintf_internal_r+0xcec>
    ce30:	42000204 	addi	r8,r8,8
    ce34:	dac02517 	ldw	r11,148(sp)
    ce38:	01002004 	movi	r4,128
    ce3c:	5900a826 	beq	r11,r4,d0e0 <___svfiprintf_internal_r+0xb34>
    ce40:	8721c83a 	sub	r16,r16,fp
    ce44:	0400260e 	bge	zero,r16,cee0 <___svfiprintf_internal_r+0x934>
    ce48:	01c00404 	movi	r7,16
    ce4c:	3c019d0e 	bge	r7,r16,d4c4 <___svfiprintf_internal_r+0xf18>
    ce50:	010000b4 	movhi	r4,2
    ce54:	213fee04 	addi	r4,r4,-72
    ce58:	d9002215 	stw	r4,136(sp)
    ce5c:	382f883a 	mov	r23,r7
    ce60:	058001c4 	movi	r22,7
    ce64:	00000306 	br	ce74 <___svfiprintf_internal_r+0x8c8>
    ce68:	843ffc04 	addi	r16,r16,-16
    ce6c:	42000204 	addi	r8,r8,8
    ce70:	bc00110e 	bge	r23,r16,ceb8 <___svfiprintf_internal_r+0x90c>
    ce74:	18c00404 	addi	r3,r3,16
    ce78:	10800044 	addi	r2,r2,1
    ce7c:	44c00015 	stw	r19,0(r8)
    ce80:	45c00115 	stw	r23,4(r8)
    ce84:	d8c01c15 	stw	r3,112(sp)
    ce88:	d8801b15 	stw	r2,108(sp)
    ce8c:	b0bff60e 	bge	r22,r2,ce68 <__alt_mem_Flash_flash_data+0xf400ce68>
    ce90:	9009883a 	mov	r4,r18
    ce94:	a00b883a 	mov	r5,r20
    ce98:	d9801a04 	addi	r6,sp,104
    ce9c:	000c3e00 	call	c3e0 <__ssprint_r>
    cea0:	10007e1e 	bne	r2,zero,d09c <___svfiprintf_internal_r+0xaf0>
    cea4:	843ffc04 	addi	r16,r16,-16
    cea8:	d8c01c17 	ldw	r3,112(sp)
    ceac:	d8801b17 	ldw	r2,108(sp)
    ceb0:	d811883a 	mov	r8,sp
    ceb4:	bc3fef16 	blt	r23,r16,ce74 <__alt_mem_Flash_flash_data+0xf400ce74>
    ceb8:	da802217 	ldw	r10,136(sp)
    cebc:	1c07883a 	add	r3,r3,r16
    cec0:	10800044 	addi	r2,r2,1
    cec4:	42800015 	stw	r10,0(r8)
    cec8:	44000115 	stw	r16,4(r8)
    cecc:	d8c01c15 	stw	r3,112(sp)
    ced0:	d8801b15 	stw	r2,108(sp)
    ced4:	010001c4 	movi	r4,7
    ced8:	2080ce16 	blt	r4,r2,d214 <___svfiprintf_internal_r+0xc68>
    cedc:	42000204 	addi	r8,r8,8
    cee0:	dac02617 	ldw	r11,152(sp)
    cee4:	1f07883a 	add	r3,r3,fp
    cee8:	10800044 	addi	r2,r2,1
    ceec:	42c00015 	stw	r11,0(r8)
    cef0:	47000115 	stw	fp,4(r8)
    cef4:	d8c01c15 	stw	r3,112(sp)
    cef8:	d8801b15 	stw	r2,108(sp)
    cefc:	010001c4 	movi	r4,7
    cf00:	2080a316 	blt	r4,r2,d190 <___svfiprintf_internal_r+0xbe4>
    cf04:	42000204 	addi	r8,r8,8
    cf08:	8c40010c 	andi	r17,r17,4
    cf0c:	88002b26 	beq	r17,zero,cfbc <___svfiprintf_internal_r+0xa10>
    cf10:	da802117 	ldw	r10,132(sp)
    cf14:	dac02017 	ldw	r11,128(sp)
    cf18:	52e1c83a 	sub	r16,r10,r11
    cf1c:	0400270e 	bge	zero,r16,cfbc <___svfiprintf_internal_r+0xa10>
    cf20:	04400404 	movi	r17,16
    cf24:	d8801b17 	ldw	r2,108(sp)
    cf28:	8c01900e 	bge	r17,r16,d56c <___svfiprintf_internal_r+0xfc0>
    cf2c:	014000b4 	movhi	r5,2
    cf30:	297ff204 	addi	r5,r5,-56
    cf34:	d9402815 	stw	r5,160(sp)
    cf38:	070001c4 	movi	fp,7
    cf3c:	00000306 	br	cf4c <___svfiprintf_internal_r+0x9a0>
    cf40:	843ffc04 	addi	r16,r16,-16
    cf44:	42000204 	addi	r8,r8,8
    cf48:	8c00130e 	bge	r17,r16,cf98 <___svfiprintf_internal_r+0x9ec>
    cf4c:	028000b4 	movhi	r10,2
    cf50:	18c00404 	addi	r3,r3,16
    cf54:	10800044 	addi	r2,r2,1
    cf58:	52bff204 	addi	r10,r10,-56
    cf5c:	42800015 	stw	r10,0(r8)
    cf60:	44400115 	stw	r17,4(r8)
    cf64:	d8c01c15 	stw	r3,112(sp)
    cf68:	d8801b15 	stw	r2,108(sp)
    cf6c:	e0bff40e 	bge	fp,r2,cf40 <__alt_mem_Flash_flash_data+0xf400cf40>
    cf70:	9009883a 	mov	r4,r18
    cf74:	a00b883a 	mov	r5,r20
    cf78:	d9801a04 	addi	r6,sp,104
    cf7c:	000c3e00 	call	c3e0 <__ssprint_r>
    cf80:	1000461e 	bne	r2,zero,d09c <___svfiprintf_internal_r+0xaf0>
    cf84:	843ffc04 	addi	r16,r16,-16
    cf88:	d8c01c17 	ldw	r3,112(sp)
    cf8c:	d8801b17 	ldw	r2,108(sp)
    cf90:	d811883a 	mov	r8,sp
    cf94:	8c3fed16 	blt	r17,r16,cf4c <__alt_mem_Flash_flash_data+0xf400cf4c>
    cf98:	dac02817 	ldw	r11,160(sp)
    cf9c:	1c07883a 	add	r3,r3,r16
    cfa0:	10800044 	addi	r2,r2,1
    cfa4:	42c00015 	stw	r11,0(r8)
    cfa8:	44000115 	stw	r16,4(r8)
    cfac:	d8c01c15 	stw	r3,112(sp)
    cfb0:	d8801b15 	stw	r2,108(sp)
    cfb4:	010001c4 	movi	r4,7
    cfb8:	2080fd16 	blt	r4,r2,d3b0 <___svfiprintf_internal_r+0xe04>
    cfbc:	dd802017 	ldw	r22,128(sp)
    cfc0:	da802117 	ldw	r10,132(sp)
    cfc4:	b280010e 	bge	r22,r10,cfcc <___svfiprintf_internal_r+0xa20>
    cfc8:	502d883a 	mov	r22,r10
    cfcc:	dac02417 	ldw	r11,144(sp)
    cfd0:	5d97883a 	add	r11,r11,r22
    cfd4:	dac02415 	stw	r11,144(sp)
    cfd8:	1800751e 	bne	r3,zero,d1b0 <___svfiprintf_internal_r+0xc04>
    cfdc:	a8800007 	ldb	r2,0(r21)
    cfe0:	d8001b15 	stw	zero,108(sp)
    cfe4:	d811883a 	mov	r8,sp
    cfe8:	103d961e 	bne	r2,zero,c644 <__alt_mem_Flash_flash_data+0xf400c644>
    cfec:	a82d883a 	mov	r22,r21
    cff0:	003dad06 	br	c6a8 <__alt_mem_Flash_flash_data+0xf400c6a8>
    cff4:	10803fcc 	andi	r2,r2,255
    cff8:	00c00044 	movi	r3,1
    cffc:	10fe2f1e 	bne	r2,r3,c8bc <__alt_mem_Flash_flash_data+0xf400c8bc>
    d000:	5000e026 	beq	r10,zero,d384 <___svfiprintf_internal_r+0xdd8>
    d004:	dc002015 	stw	r16,128(sp)
    d008:	dc402215 	stw	r17,136(sp)
    d00c:	dd801a04 	addi	r22,sp,104
    d010:	402f883a 	mov	r23,r8
    d014:	5839883a 	mov	fp,r11
    d018:	4821883a 	mov	r16,r9
    d01c:	5023883a 	mov	r17,r10
    d020:	8009883a 	mov	r4,r16
    d024:	880b883a 	mov	r5,r17
    d028:	01800284 	movi	r6,10
    d02c:	000f883a 	mov	r7,zero
    d030:	000f9600 	call	f960 <__umoddi3>
    d034:	10800c04 	addi	r2,r2,48
    d038:	b5bfffc4 	addi	r22,r22,-1
    d03c:	8009883a 	mov	r4,r16
    d040:	880b883a 	mov	r5,r17
    d044:	01800284 	movi	r6,10
    d048:	000f883a 	mov	r7,zero
    d04c:	b0800005 	stb	r2,0(r22)
    d050:	000f3a00 	call	f3a0 <__udivdi3>
    d054:	1021883a 	mov	r16,r2
    d058:	10c4b03a 	or	r2,r2,r3
    d05c:	1823883a 	mov	r17,r3
    d060:	103fef1e 	bne	r2,zero,d020 <__alt_mem_Flash_flash_data+0xf400d020>
    d064:	da801e17 	ldw	r10,120(sp)
    d068:	e017883a 	mov	r11,fp
    d06c:	dc002017 	ldw	r16,128(sp)
    d070:	dc402217 	ldw	r17,136(sp)
    d074:	b811883a 	mov	r8,r23
    d078:	dd802615 	stw	r22,152(sp)
    d07c:	55b9c83a 	sub	fp,r10,r22
    d080:	003e2006 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d084:	d8801c17 	ldw	r2,112(sp)
    d088:	10000426 	beq	r2,zero,d09c <___svfiprintf_internal_r+0xaf0>
    d08c:	d9002917 	ldw	r4,164(sp)
    d090:	d9402717 	ldw	r5,156(sp)
    d094:	d9801a04 	addi	r6,sp,104
    d098:	000c3e00 	call	c3e0 <__ssprint_r>
    d09c:	da802717 	ldw	r10,156(sp)
    d0a0:	5080030b 	ldhu	r2,12(r10)
    d0a4:	1080100c 	andi	r2,r2,64
    d0a8:	1000511e 	bne	r2,zero,d1f0 <___svfiprintf_internal_r+0xc44>
    d0ac:	d8802417 	ldw	r2,144(sp)
    d0b0:	dfc03617 	ldw	ra,216(sp)
    d0b4:	df003517 	ldw	fp,212(sp)
    d0b8:	ddc03417 	ldw	r23,208(sp)
    d0bc:	dd803317 	ldw	r22,204(sp)
    d0c0:	dd403217 	ldw	r21,200(sp)
    d0c4:	dd003117 	ldw	r20,196(sp)
    d0c8:	dcc03017 	ldw	r19,192(sp)
    d0cc:	dc802f17 	ldw	r18,188(sp)
    d0d0:	dc402e17 	ldw	r17,184(sp)
    d0d4:	dc002d17 	ldw	r16,180(sp)
    d0d8:	dec03704 	addi	sp,sp,220
    d0dc:	f800283a 	ret
    d0e0:	da802117 	ldw	r10,132(sp)
    d0e4:	dac02017 	ldw	r11,128(sp)
    d0e8:	52edc83a 	sub	r22,r10,r11
    d0ec:	05bf540e 	bge	zero,r22,ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d0f0:	02400404 	movi	r9,16
    d0f4:	4d81210e 	bge	r9,r22,d57c <___svfiprintf_internal_r+0xfd0>
    d0f8:	014000b4 	movhi	r5,2
    d0fc:	297fee04 	addi	r5,r5,-72
    d100:	d9402215 	stw	r5,136(sp)
    d104:	05c001c4 	movi	r23,7
    d108:	00000306 	br	d118 <___svfiprintf_internal_r+0xb6c>
    d10c:	b5bffc04 	addi	r22,r22,-16
    d110:	42000204 	addi	r8,r8,8
    d114:	4d80130e 	bge	r9,r22,d164 <___svfiprintf_internal_r+0xbb8>
    d118:	18c00404 	addi	r3,r3,16
    d11c:	10800044 	addi	r2,r2,1
    d120:	44c00015 	stw	r19,0(r8)
    d124:	42400115 	stw	r9,4(r8)
    d128:	d8c01c15 	stw	r3,112(sp)
    d12c:	d8801b15 	stw	r2,108(sp)
    d130:	b8bff60e 	bge	r23,r2,d10c <__alt_mem_Flash_flash_data+0xf400d10c>
    d134:	9009883a 	mov	r4,r18
    d138:	a00b883a 	mov	r5,r20
    d13c:	d9801a04 	addi	r6,sp,104
    d140:	da402c15 	stw	r9,176(sp)
    d144:	000c3e00 	call	c3e0 <__ssprint_r>
    d148:	da402c17 	ldw	r9,176(sp)
    d14c:	103fd31e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d150:	b5bffc04 	addi	r22,r22,-16
    d154:	d8c01c17 	ldw	r3,112(sp)
    d158:	d8801b17 	ldw	r2,108(sp)
    d15c:	d811883a 	mov	r8,sp
    d160:	4dbfed16 	blt	r9,r22,d118 <__alt_mem_Flash_flash_data+0xf400d118>
    d164:	da802217 	ldw	r10,136(sp)
    d168:	1d87883a 	add	r3,r3,r22
    d16c:	10800044 	addi	r2,r2,1
    d170:	42800015 	stw	r10,0(r8)
    d174:	45800115 	stw	r22,4(r8)
    d178:	d8c01c15 	stw	r3,112(sp)
    d17c:	d8801b15 	stw	r2,108(sp)
    d180:	010001c4 	movi	r4,7
    d184:	2080c616 	blt	r4,r2,d4a0 <___svfiprintf_internal_r+0xef4>
    d188:	42000204 	addi	r8,r8,8
    d18c:	003f2c06 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d190:	9009883a 	mov	r4,r18
    d194:	a00b883a 	mov	r5,r20
    d198:	d9801a04 	addi	r6,sp,104
    d19c:	000c3e00 	call	c3e0 <__ssprint_r>
    d1a0:	103fbe1e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d1a4:	d8c01c17 	ldw	r3,112(sp)
    d1a8:	d811883a 	mov	r8,sp
    d1ac:	003f5606 	br	cf08 <__alt_mem_Flash_flash_data+0xf400cf08>
    d1b0:	9009883a 	mov	r4,r18
    d1b4:	a00b883a 	mov	r5,r20
    d1b8:	d9801a04 	addi	r6,sp,104
    d1bc:	000c3e00 	call	c3e0 <__ssprint_r>
    d1c0:	103f8626 	beq	r2,zero,cfdc <__alt_mem_Flash_flash_data+0xf400cfdc>
    d1c4:	003fb506 	br	d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d1c8:	10803fcc 	andi	r2,r2,255
    d1cc:	10003b1e 	bne	r2,zero,d2bc <___svfiprintf_internal_r+0xd10>
    d1d0:	8880004c 	andi	r2,r17,1
    d1d4:	10007d26 	beq	r2,zero,d3cc <___svfiprintf_internal_r+0xe20>
    d1d8:	00800c04 	movi	r2,48
    d1dc:	d8c019c4 	addi	r3,sp,103
    d1e0:	d88019c5 	stb	r2,103(sp)
    d1e4:	df002b17 	ldw	fp,172(sp)
    d1e8:	d8c02615 	stw	r3,152(sp)
    d1ec:	003dc506 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d1f0:	00bfffc4 	movi	r2,-1
    d1f4:	003fae06 	br	d0b0 <__alt_mem_Flash_flash_data+0xf400d0b0>
    d1f8:	9009883a 	mov	r4,r18
    d1fc:	a00b883a 	mov	r5,r20
    d200:	d9801a04 	addi	r6,sp,104
    d204:	000c3e00 	call	c3e0 <__ssprint_r>
    d208:	103fa41e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d20c:	d811883a 	mov	r8,sp
    d210:	003d2206 	br	c69c <__alt_mem_Flash_flash_data+0xf400c69c>
    d214:	9009883a 	mov	r4,r18
    d218:	a00b883a 	mov	r5,r20
    d21c:	d9801a04 	addi	r6,sp,104
    d220:	000c3e00 	call	c3e0 <__ssprint_r>
    d224:	103f9d1e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d228:	d8c01c17 	ldw	r3,112(sp)
    d22c:	d8801b17 	ldw	r2,108(sp)
    d230:	d811883a 	mov	r8,sp
    d234:	003f2a06 	br	cee0 <__alt_mem_Flash_flash_data+0xf400cee0>
    d238:	d9402a17 	ldw	r5,168(sp)
    d23c:	d8c01a04 	addi	r3,sp,104
    d240:	488003cc 	andi	r2,r9,15
    d244:	5008973a 	slli	r4,r10,28
    d248:	2885883a 	add	r2,r5,r2
    d24c:	4812d13a 	srli	r9,r9,4
    d250:	10800003 	ldbu	r2,0(r2)
    d254:	5014d13a 	srli	r10,r10,4
    d258:	18ffffc4 	addi	r3,r3,-1
    d25c:	2252b03a 	or	r9,r4,r9
    d260:	18800005 	stb	r2,0(r3)
    d264:	4a84b03a 	or	r2,r9,r10
    d268:	103ff51e 	bne	r2,zero,d240 <__alt_mem_Flash_flash_data+0xf400d240>
    d26c:	d8c02615 	stw	r3,152(sp)
    d270:	003da206 	br	c8fc <__alt_mem_Flash_flash_data+0xf400c8fc>
    d274:	9009883a 	mov	r4,r18
    d278:	a00b883a 	mov	r5,r20
    d27c:	d9801a04 	addi	r6,sp,104
    d280:	000c3e00 	call	c3e0 <__ssprint_r>
    d284:	103f851e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d288:	d8c01c17 	ldw	r3,112(sp)
    d28c:	d8801b17 	ldw	r2,108(sp)
    d290:	d811883a 	mov	r8,sp
    d294:	003eda06 	br	ce00 <__alt_mem_Flash_flash_data+0xf400ce00>
    d298:	9009883a 	mov	r4,r18
    d29c:	a00b883a 	mov	r5,r20
    d2a0:	d9801a04 	addi	r6,sp,104
    d2a4:	000c3e00 	call	c3e0 <__ssprint_r>
    d2a8:	103f7c1e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d2ac:	d8c01c17 	ldw	r3,112(sp)
    d2b0:	d8801b17 	ldw	r2,108(sp)
    d2b4:	d811883a 	mov	r8,sp
    d2b8:	003ede06 	br	ce34 <__alt_mem_Flash_flash_data+0xf400ce34>
    d2bc:	da801a04 	addi	r10,sp,104
    d2c0:	da802615 	stw	r10,152(sp)
    d2c4:	003d8f06 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d2c8:	8880040c 	andi	r2,r17,16
    d2cc:	10004c1e 	bne	r2,zero,d400 <___svfiprintf_internal_r+0xe54>
    d2d0:	8880100c 	andi	r2,r17,64
    d2d4:	da802317 	ldw	r10,140(sp)
    d2d8:	10004a26 	beq	r2,zero,d404 <___svfiprintf_internal_r+0xe58>
    d2dc:	5240000b 	ldhu	r9,0(r10)
    d2e0:	dac02317 	ldw	r11,140(sp)
    d2e4:	0015883a 	mov	r10,zero
    d2e8:	00800044 	movi	r2,1
    d2ec:	5ac00104 	addi	r11,r11,4
    d2f0:	dac02315 	stw	r11,140(sp)
    d2f4:	4807883a 	mov	r3,r9
    d2f8:	003d6506 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    d2fc:	9009883a 	mov	r4,r18
    d300:	a00b883a 	mov	r5,r20
    d304:	d9801a04 	addi	r6,sp,104
    d308:	000c3e00 	call	c3e0 <__ssprint_r>
    d30c:	103f631e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d310:	d8c01c17 	ldw	r3,112(sp)
    d314:	d8801b17 	ldw	r2,108(sp)
    d318:	d811883a 	mov	r8,sp
    d31c:	003eab06 	br	cdcc <__alt_mem_Flash_flash_data+0xf400cdcc>
    d320:	8880040c 	andi	r2,r17,16
    d324:	1000331e 	bne	r2,zero,d3f4 <___svfiprintf_internal_r+0xe48>
    d328:	8880100c 	andi	r2,r17,64
    d32c:	da802317 	ldw	r10,140(sp)
    d330:	10003126 	beq	r2,zero,d3f8 <___svfiprintf_internal_r+0xe4c>
    d334:	5240000b 	ldhu	r9,0(r10)
    d338:	dac02317 	ldw	r11,140(sp)
    d33c:	0015883a 	mov	r10,zero
    d340:	0005883a 	mov	r2,zero
    d344:	5ac00104 	addi	r11,r11,4
    d348:	dac02315 	stw	r11,140(sp)
    d34c:	4807883a 	mov	r3,r9
    d350:	003d4f06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    d354:	10803fcc 	andi	r2,r2,255
    d358:	1080201c 	xori	r2,r2,128
    d35c:	10bfe004 	addi	r2,r2,-128
    d360:	01000c04 	movi	r4,48
    d364:	11005b26 	beq	r2,r4,d4d4 <___svfiprintf_internal_r+0xf28>
    d368:	da802617 	ldw	r10,152(sp)
    d36c:	d8801e17 	ldw	r2,120(sp)
    d370:	193fffc5 	stb	r4,-1(r3)
    d374:	52bfffc4 	addi	r10,r10,-1
    d378:	da802615 	stw	r10,152(sp)
    d37c:	12b9c83a 	sub	fp,r2,r10
    d380:	003d6006 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d384:	00800244 	movi	r2,9
    d388:	127f1e36 	bltu	r2,r9,d004 <__alt_mem_Flash_flash_data+0xf400d004>
    d38c:	4a400c04 	addi	r9,r9,48
    d390:	d8c019c4 	addi	r3,sp,103
    d394:	da4019c5 	stb	r9,103(sp)
    d398:	df002b17 	ldw	fp,172(sp)
    d39c:	d8c02615 	stw	r3,152(sp)
    d3a0:	003d5806 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d3a4:	d8802315 	stw	r2,140(sp)
    d3a8:	a9000007 	ldb	r4,0(r21)
    d3ac:	003ccb06 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    d3b0:	9009883a 	mov	r4,r18
    d3b4:	a00b883a 	mov	r5,r20
    d3b8:	d9801a04 	addi	r6,sp,104
    d3bc:	000c3e00 	call	c3e0 <__ssprint_r>
    d3c0:	103f361e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d3c4:	d8c01c17 	ldw	r3,112(sp)
    d3c8:	003efc06 	br	cfbc <__alt_mem_Flash_flash_data+0xf400cfbc>
    d3cc:	d8c01a04 	addi	r3,sp,104
    d3d0:	d8c02615 	stw	r3,152(sp)
    d3d4:	003d4b06 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d3d8:	da802317 	ldw	r10,140(sp)
    d3dc:	1a400017 	ldw	r9,0(r3)
    d3e0:	52800104 	addi	r10,r10,4
    d3e4:	da802315 	stw	r10,140(sp)
    d3e8:	4815d7fa 	srai	r10,r9,31
    d3ec:	5005883a 	mov	r2,r10
    d3f0:	003d9c06 	br	ca64 <__alt_mem_Flash_flash_data+0xf400ca64>
    d3f4:	da802317 	ldw	r10,140(sp)
    d3f8:	52400017 	ldw	r9,0(r10)
    d3fc:	003fce06 	br	d338 <__alt_mem_Flash_flash_data+0xf400d338>
    d400:	da802317 	ldw	r10,140(sp)
    d404:	52400017 	ldw	r9,0(r10)
    d408:	003fb506 	br	d2e0 <__alt_mem_Flash_flash_data+0xf400d2e0>
    d40c:	8880100c 	andi	r2,r17,64
    d410:	da802317 	ldw	r10,140(sp)
    d414:	103e1926 	beq	r2,zero,cc7c <__alt_mem_Flash_flash_data+0xf400cc7c>
    d418:	dac02317 	ldw	r11,140(sp)
    d41c:	5240000b 	ldhu	r9,0(r10)
    d420:	0015883a 	mov	r10,zero
    d424:	5ac00104 	addi	r11,r11,4
    d428:	dac02315 	stw	r11,140(sp)
    d42c:	003de406 	br	cbc0 <__alt_mem_Flash_flash_data+0xf400cbc0>
    d430:	a9000007 	ldb	r4,0(r21)
    d434:	003ca906 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    d438:	dac02317 	ldw	r11,140(sp)
    d43c:	da802417 	ldw	r10,144(sp)
    d440:	58800017 	ldw	r2,0(r11)
    d444:	5007d7fa 	srai	r3,r10,31
    d448:	5ac00104 	addi	r11,r11,4
    d44c:	dac02315 	stw	r11,140(sp)
    d450:	12800015 	stw	r10,0(r2)
    d454:	10c00115 	stw	r3,4(r2)
    d458:	003c7806 	br	c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    d45c:	00800c04 	movi	r2,48
    d460:	d8801d05 	stb	r2,116(sp)
    d464:	d9001d45 	stb	r4,117(sp)
    d468:	8c400094 	ori	r17,r17,2
    d46c:	00800084 	movi	r2,2
    d470:	003d0706 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    d474:	ad400044 	addi	r21,r21,1
    d478:	8c400814 	ori	r17,r17,32
    d47c:	11000047 	ldb	r4,1(r2)
    d480:	003c9606 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    d484:	dac02317 	ldw	r11,140(sp)
    d488:	da802417 	ldw	r10,144(sp)
    d48c:	58800017 	ldw	r2,0(r11)
    d490:	5ac00104 	addi	r11,r11,4
    d494:	dac02315 	stw	r11,140(sp)
    d498:	12800015 	stw	r10,0(r2)
    d49c:	003c6706 	br	c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    d4a0:	9009883a 	mov	r4,r18
    d4a4:	a00b883a 	mov	r5,r20
    d4a8:	d9801a04 	addi	r6,sp,104
    d4ac:	000c3e00 	call	c3e0 <__ssprint_r>
    d4b0:	103efa1e 	bne	r2,zero,d09c <__alt_mem_Flash_flash_data+0xf400d09c>
    d4b4:	d8c01c17 	ldw	r3,112(sp)
    d4b8:	d8801b17 	ldw	r2,108(sp)
    d4bc:	d811883a 	mov	r8,sp
    d4c0:	003e5f06 	br	ce40 <__alt_mem_Flash_flash_data+0xf400ce40>
    d4c4:	02c000b4 	movhi	r11,2
    d4c8:	5affee04 	addi	r11,r11,-72
    d4cc:	dac02215 	stw	r11,136(sp)
    d4d0:	003e7906 	br	ceb8 <__alt_mem_Flash_flash_data+0xf400ceb8>
    d4d4:	da801e17 	ldw	r10,120(sp)
    d4d8:	d8c02617 	ldw	r3,152(sp)
    d4dc:	50f9c83a 	sub	fp,r10,r3
    d4e0:	003d0806 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d4e4:	da002c15 	stw	r8,176(sp)
    d4e8:	00031ec0 	call	31ec <strlen>
    d4ec:	1039883a 	mov	fp,r2
    d4f0:	dac01d83 	ldbu	r11,118(sp)
    d4f4:	ddc02315 	stw	r23,140(sp)
    d4f8:	0021883a 	mov	r16,zero
    d4fc:	da002c17 	ldw	r8,176(sp)
    d500:	003d0006 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d504:	00800184 	movi	r2,6
    d508:	1400012e 	bgeu	r2,r16,d510 <___svfiprintf_internal_r+0xf64>
    d50c:	1021883a 	mov	r16,r2
    d510:	8039883a 	mov	fp,r16
    d514:	802d883a 	mov	r22,r16
    d518:	80002116 	blt	r16,zero,d5a0 <___svfiprintf_internal_r+0xff4>
    d51c:	008000b4 	movhi	r2,2
    d520:	10bf8a04 	addi	r2,r2,-472
    d524:	dd802015 	stw	r22,128(sp)
    d528:	ddc02315 	stw	r23,140(sp)
    d52c:	d8802615 	stw	r2,152(sp)
    d530:	003d5d06 	br	caa8 <__alt_mem_Flash_flash_data+0xf400caa8>
    d534:	04001004 	movi	r16,64
    d538:	800b883a 	mov	r5,r16
    d53c:	0009fe80 	call	9fe8 <_malloc_r>
    d540:	da802717 	ldw	r10,156(sp)
    d544:	50800015 	stw	r2,0(r10)
    d548:	50800415 	stw	r2,16(r10)
    d54c:	10002026 	beq	r2,zero,d5d0 <___svfiprintf_internal_r+0x1024>
    d550:	da802717 	ldw	r10,156(sp)
    d554:	54000515 	stw	r16,20(r10)
    d558:	003c2806 	br	c5fc <__alt_mem_Flash_flash_data+0xf400c5fc>
    d55c:	010000b4 	movhi	r4,2
    d560:	213ff204 	addi	r4,r4,-56
    d564:	d9002815 	stw	r4,160(sp)
    d568:	003d7e06 	br	cb64 <__alt_mem_Flash_flash_data+0xf400cb64>
    d56c:	010000b4 	movhi	r4,2
    d570:	213ff204 	addi	r4,r4,-56
    d574:	d9002815 	stw	r4,160(sp)
    d578:	003e8706 	br	cf98 <__alt_mem_Flash_flash_data+0xf400cf98>
    d57c:	010000b4 	movhi	r4,2
    d580:	213fee04 	addi	r4,r4,-72
    d584:	d9002215 	stw	r4,136(sp)
    d588:	003ef606 	br	d164 <__alt_mem_Flash_flash_data+0xf400d164>
    d58c:	8039883a 	mov	fp,r16
    d590:	dac01d83 	ldbu	r11,118(sp)
    d594:	ddc02315 	stw	r23,140(sp)
    d598:	0021883a 	mov	r16,zero
    d59c:	003cd906 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    d5a0:	002d883a 	mov	r22,zero
    d5a4:	003fdd06 	br	d51c <__alt_mem_Flash_flash_data+0xf400d51c>
    d5a8:	dac02317 	ldw	r11,140(sp)
    d5ac:	a805883a 	mov	r2,r21
    d5b0:	502b883a 	mov	r21,r10
    d5b4:	5c000017 	ldw	r16,0(r11)
    d5b8:	59000104 	addi	r4,r11,4
    d5bc:	d9002315 	stw	r4,140(sp)
    d5c0:	803fae0e 	bge	r16,zero,d47c <__alt_mem_Flash_flash_data+0xf400d47c>
    d5c4:	043fffc4 	movi	r16,-1
    d5c8:	11000047 	ldb	r4,1(r2)
    d5cc:	003c4306 	br	c6dc <__alt_mem_Flash_flash_data+0xf400c6dc>
    d5d0:	dac02917 	ldw	r11,164(sp)
    d5d4:	00800304 	movi	r2,12
    d5d8:	58800015 	stw	r2,0(r11)
    d5dc:	00bfffc4 	movi	r2,-1
    d5e0:	003eb306 	br	d0b0 <__alt_mem_Flash_flash_data+0xf400d0b0>

0000d5e4 <__sprint_r.part.0>:
    d5e4:	28801917 	ldw	r2,100(r5)
    d5e8:	defff604 	addi	sp,sp,-40
    d5ec:	dd400515 	stw	r21,20(sp)
    d5f0:	dcc00315 	stw	r19,12(sp)
    d5f4:	dfc00915 	stw	ra,36(sp)
    d5f8:	df000815 	stw	fp,32(sp)
    d5fc:	ddc00715 	stw	r23,28(sp)
    d600:	dd800615 	stw	r22,24(sp)
    d604:	dd000415 	stw	r20,16(sp)
    d608:	dc800215 	stw	r18,8(sp)
    d60c:	dc400115 	stw	r17,4(sp)
    d610:	dc000015 	stw	r16,0(sp)
    d614:	1088000c 	andi	r2,r2,8192
    d618:	2827883a 	mov	r19,r5
    d61c:	302b883a 	mov	r21,r6
    d620:	10002d26 	beq	r2,zero,d6d8 <__sprint_r.part.0+0xf4>
    d624:	30800217 	ldw	r2,8(r6)
    d628:	35800017 	ldw	r22,0(r6)
    d62c:	10002826 	beq	r2,zero,d6d0 <__sprint_r.part.0+0xec>
    d630:	2029883a 	mov	r20,r4
    d634:	b5c00104 	addi	r23,r22,4
    d638:	04bfffc4 	movi	r18,-1
    d63c:	bc400017 	ldw	r17,0(r23)
    d640:	b4000017 	ldw	r16,0(r22)
    d644:	0039883a 	mov	fp,zero
    d648:	8822d0ba 	srli	r17,r17,2
    d64c:	04400316 	blt	zero,r17,d65c <__sprint_r.part.0+0x78>
    d650:	00001806 	br	d6b4 <__sprint_r.part.0+0xd0>
    d654:	84000104 	addi	r16,r16,4
    d658:	8f001526 	beq	r17,fp,d6b0 <__sprint_r.part.0+0xcc>
    d65c:	81400017 	ldw	r5,0(r16)
    d660:	a009883a 	mov	r4,r20
    d664:	980d883a 	mov	r6,r19
    d668:	000ed200 	call	ed20 <_fputwc_r>
    d66c:	e7000044 	addi	fp,fp,1
    d670:	14bff81e 	bne	r2,r18,d654 <__alt_mem_Flash_flash_data+0xf400d654>
    d674:	9005883a 	mov	r2,r18
    d678:	a8000215 	stw	zero,8(r21)
    d67c:	a8000115 	stw	zero,4(r21)
    d680:	dfc00917 	ldw	ra,36(sp)
    d684:	df000817 	ldw	fp,32(sp)
    d688:	ddc00717 	ldw	r23,28(sp)
    d68c:	dd800617 	ldw	r22,24(sp)
    d690:	dd400517 	ldw	r21,20(sp)
    d694:	dd000417 	ldw	r20,16(sp)
    d698:	dcc00317 	ldw	r19,12(sp)
    d69c:	dc800217 	ldw	r18,8(sp)
    d6a0:	dc400117 	ldw	r17,4(sp)
    d6a4:	dc000017 	ldw	r16,0(sp)
    d6a8:	dec00a04 	addi	sp,sp,40
    d6ac:	f800283a 	ret
    d6b0:	a8800217 	ldw	r2,8(r21)
    d6b4:	8c63883a 	add	r17,r17,r17
    d6b8:	8c63883a 	add	r17,r17,r17
    d6bc:	1445c83a 	sub	r2,r2,r17
    d6c0:	a8800215 	stw	r2,8(r21)
    d6c4:	b5800204 	addi	r22,r22,8
    d6c8:	bdc00204 	addi	r23,r23,8
    d6cc:	103fdb1e 	bne	r2,zero,d63c <__alt_mem_Flash_flash_data+0xf400d63c>
    d6d0:	0005883a 	mov	r2,zero
    d6d4:	003fe806 	br	d678 <__alt_mem_Flash_flash_data+0xf400d678>
    d6d8:	00097080 	call	9708 <__sfvwrite_r>
    d6dc:	003fe606 	br	d678 <__alt_mem_Flash_flash_data+0xf400d678>

0000d6e0 <__sprint_r>:
    d6e0:	30c00217 	ldw	r3,8(r6)
    d6e4:	18000126 	beq	r3,zero,d6ec <__sprint_r+0xc>
    d6e8:	000d5e41 	jmpi	d5e4 <__sprint_r.part.0>
    d6ec:	30000115 	stw	zero,4(r6)
    d6f0:	0005883a 	mov	r2,zero
    d6f4:	f800283a 	ret

0000d6f8 <___vfiprintf_internal_r>:
    d6f8:	deffca04 	addi	sp,sp,-216
    d6fc:	dd803215 	stw	r22,200(sp)
    d700:	dd403115 	stw	r21,196(sp)
    d704:	dfc03515 	stw	ra,212(sp)
    d708:	df003415 	stw	fp,208(sp)
    d70c:	ddc03315 	stw	r23,204(sp)
    d710:	dd003015 	stw	r20,192(sp)
    d714:	dcc02f15 	stw	r19,188(sp)
    d718:	dc802e15 	stw	r18,184(sp)
    d71c:	dc402d15 	stw	r17,180(sp)
    d720:	dc002c15 	stw	r16,176(sp)
    d724:	d9002015 	stw	r4,128(sp)
    d728:	d9c02215 	stw	r7,136(sp)
    d72c:	282b883a 	mov	r21,r5
    d730:	302d883a 	mov	r22,r6
    d734:	20000226 	beq	r4,zero,d740 <___vfiprintf_internal_r+0x48>
    d738:	20800e17 	ldw	r2,56(r4)
    d73c:	1001b126 	beq	r2,zero,de04 <___vfiprintf_internal_r+0x70c>
    d740:	a880030b 	ldhu	r2,12(r21)
    d744:	10c8000c 	andi	r3,r2,8192
    d748:	1800061e 	bne	r3,zero,d764 <___vfiprintf_internal_r+0x6c>
    d74c:	a9001917 	ldw	r4,100(r21)
    d750:	00f7ffc4 	movi	r3,-8193
    d754:	10880014 	ori	r2,r2,8192
    d758:	20c6703a 	and	r3,r4,r3
    d75c:	a880030d 	sth	r2,12(r21)
    d760:	a8c01915 	stw	r3,100(r21)
    d764:	10c0020c 	andi	r3,r2,8
    d768:	18018926 	beq	r3,zero,dd90 <___vfiprintf_internal_r+0x698>
    d76c:	a8c00417 	ldw	r3,16(r21)
    d770:	18018726 	beq	r3,zero,dd90 <___vfiprintf_internal_r+0x698>
    d774:	1080068c 	andi	r2,r2,26
    d778:	00c00284 	movi	r3,10
    d77c:	10c18c26 	beq	r2,r3,ddb0 <___vfiprintf_internal_r+0x6b8>
    d780:	d8801a04 	addi	r2,sp,104
    d784:	d8c019c4 	addi	r3,sp,103
    d788:	070000b4 	movhi	fp,2
    d78c:	05c000b4 	movhi	r23,2
    d790:	10c9c83a 	sub	r4,r2,r3
    d794:	e73ffa04 	addi	fp,fp,-24
    d798:	bdfff604 	addi	r23,r23,-40
    d79c:	d8801e15 	stw	r2,120(sp)
    d7a0:	d8c01f15 	stw	r3,124(sp)
    d7a4:	dec01a15 	stw	sp,104(sp)
    d7a8:	d8001c15 	stw	zero,112(sp)
    d7ac:	d8001b15 	stw	zero,108(sp)
    d7b0:	d8002615 	stw	zero,152(sp)
    d7b4:	d8002315 	stw	zero,140(sp)
    d7b8:	d9002715 	stw	r4,156(sp)
    d7bc:	d811883a 	mov	r8,sp
    d7c0:	dd402115 	stw	r21,132(sp)
    d7c4:	b021883a 	mov	r16,r22
    d7c8:	80800007 	ldb	r2,0(r16)
    d7cc:	10037226 	beq	r2,zero,e598 <___vfiprintf_internal_r+0xea0>
    d7d0:	01000944 	movi	r4,37
    d7d4:	11037026 	beq	r2,r4,e598 <___vfiprintf_internal_r+0xea0>
    d7d8:	8005883a 	mov	r2,r16
    d7dc:	00000106 	br	d7e4 <___vfiprintf_internal_r+0xec>
    d7e0:	19000326 	beq	r3,r4,d7f0 <___vfiprintf_internal_r+0xf8>
    d7e4:	10800044 	addi	r2,r2,1
    d7e8:	10c00007 	ldb	r3,0(r2)
    d7ec:	183ffc1e 	bne	r3,zero,d7e0 <__alt_mem_Flash_flash_data+0xf400d7e0>
    d7f0:	1425c83a 	sub	r18,r2,r16
    d7f4:	1023883a 	mov	r17,r2
    d7f8:	90001026 	beq	r18,zero,d83c <___vfiprintf_internal_r+0x144>
    d7fc:	d8c01c17 	ldw	r3,112(sp)
    d800:	d8801b17 	ldw	r2,108(sp)
    d804:	44000015 	stw	r16,0(r8)
    d808:	90c7883a 	add	r3,r18,r3
    d80c:	10800044 	addi	r2,r2,1
    d810:	44800115 	stw	r18,4(r8)
    d814:	d8c01c15 	stw	r3,112(sp)
    d818:	d8801b15 	stw	r2,108(sp)
    d81c:	010001c4 	movi	r4,7
    d820:	2080750e 	bge	r4,r2,d9f8 <___vfiprintf_internal_r+0x300>
    d824:	18036f1e 	bne	r3,zero,e5e4 <___vfiprintf_internal_r+0xeec>
    d828:	d8802317 	ldw	r2,140(sp)
    d82c:	d8001b15 	stw	zero,108(sp)
    d830:	d811883a 	mov	r8,sp
    d834:	1485883a 	add	r2,r2,r18
    d838:	d8802315 	stw	r2,140(sp)
    d83c:	88800007 	ldb	r2,0(r17)
    d840:	10041026 	beq	r2,zero,e884 <___vfiprintf_internal_r+0x118c>
    d844:	88c00047 	ldb	r3,1(r17)
    d848:	88800044 	addi	r2,r17,1
    d84c:	d8001d85 	stb	zero,118(sp)
    d850:	000f883a 	mov	r7,zero
    d854:	027fffc4 	movi	r9,-1
    d858:	0025883a 	mov	r18,zero
    d85c:	002b883a 	mov	r21,zero
    d860:	01401604 	movi	r5,88
    d864:	01800244 	movi	r6,9
    d868:	03400a84 	movi	r13,42
    d86c:	03001b04 	movi	r12,108
    d870:	14000044 	addi	r16,r2,1
    d874:	18bff804 	addi	r2,r3,-32
    d878:	28825536 	bltu	r5,r2,e1d0 <___vfiprintf_internal_r+0xad8>
    d87c:	100490ba 	slli	r2,r2,2
    d880:	01000074 	movhi	r4,1
    d884:	21362504 	addi	r4,r4,-10092
    d888:	1105883a 	add	r2,r2,r4
    d88c:	10800017 	ldw	r2,0(r2)
    d890:	1000683a 	jmp	r2
    d894:	0000df94 	movui	zero,894
    d898:	0000e1d0 	cmplti	zero,zero,903
    d89c:	0000e1d0 	cmplti	zero,zero,903
    d8a0:	0000dfb4 	movhi	zero,894
    d8a4:	0000e1d0 	cmplti	zero,zero,903
    d8a8:	0000e1d0 	cmplti	zero,zero,903
    d8ac:	0000e1d0 	cmplti	zero,zero,903
    d8b0:	0000e1d0 	cmplti	zero,zero,903
    d8b4:	0000e1d0 	cmplti	zero,zero,903
    d8b8:	0000e1d0 	cmplti	zero,zero,903
    d8bc:	0000dfc4 	movi	zero,895
    d8c0:	0000dfe4 	muli	zero,zero,895
    d8c4:	0000e1d0 	cmplti	zero,zero,903
    d8c8:	0000de0c 	andi	zero,zero,888
    d8cc:	0000def8 	rdprs	zero,zero,891
    d8d0:	0000e1d0 	cmplti	zero,zero,903
    d8d4:	0000de78 	rdprs	zero,zero,889
    d8d8:	0000de88 	cmpgei	zero,zero,890
    d8dc:	0000de88 	cmpgei	zero,zero,890
    d8e0:	0000de88 	cmpgei	zero,zero,890
    d8e4:	0000de88 	cmpgei	zero,zero,890
    d8e8:	0000de88 	cmpgei	zero,zero,890
    d8ec:	0000de88 	cmpgei	zero,zero,890
    d8f0:	0000de88 	cmpgei	zero,zero,890
    d8f4:	0000de88 	cmpgei	zero,zero,890
    d8f8:	0000de88 	cmpgei	zero,zero,890
    d8fc:	0000e1d0 	cmplti	zero,zero,903
    d900:	0000e1d0 	cmplti	zero,zero,903
    d904:	0000e1d0 	cmplti	zero,zero,903
    d908:	0000e1d0 	cmplti	zero,zero,903
    d90c:	0000e1d0 	cmplti	zero,zero,903
    d910:	0000e1d0 	cmplti	zero,zero,903
    d914:	0000e1d0 	cmplti	zero,zero,903
    d918:	0000e1d0 	cmplti	zero,zero,903
    d91c:	0000e1d0 	cmplti	zero,zero,903
    d920:	0000e1d0 	cmplti	zero,zero,903
    d924:	0000deb4 	movhi	zero,890
    d928:	0000e1d0 	cmplti	zero,zero,903
    d92c:	0000e1d0 	cmplti	zero,zero,903
    d930:	0000e1d0 	cmplti	zero,zero,903
    d934:	0000e1d0 	cmplti	zero,zero,903
    d938:	0000e1d0 	cmplti	zero,zero,903
    d93c:	0000e1d0 	cmplti	zero,zero,903
    d940:	0000e1d0 	cmplti	zero,zero,903
    d944:	0000e1d0 	cmplti	zero,zero,903
    d948:	0000e1d0 	cmplti	zero,zero,903
    d94c:	0000e1d0 	cmplti	zero,zero,903
    d950:	0000da40 	call	da4 <gescoord+0x160>
    d954:	0000e1d0 	cmplti	zero,zero,903
    d958:	0000e1d0 	cmplti	zero,zero,903
    d95c:	0000e1d0 	cmplti	zero,zero,903
    d960:	0000e1d0 	cmplti	zero,zero,903
    d964:	0000e1d0 	cmplti	zero,zero,903
    d968:	0000da0c 	andi	zero,zero,872
    d96c:	0000e1d0 	cmplti	zero,zero,903
    d970:	0000e1d0 	cmplti	zero,zero,903
    d974:	0000e054 	movui	zero,897
    d978:	0000e1d0 	cmplti	zero,zero,903
    d97c:	0000e1d0 	cmplti	zero,zero,903
    d980:	0000e1d0 	cmplti	zero,zero,903
    d984:	0000e1d0 	cmplti	zero,zero,903
    d988:	0000e1d0 	cmplti	zero,zero,903
    d98c:	0000e1d0 	cmplti	zero,zero,903
    d990:	0000e1d0 	cmplti	zero,zero,903
    d994:	0000e1d0 	cmplti	zero,zero,903
    d998:	0000e1d0 	cmplti	zero,zero,903
    d99c:	0000e1d0 	cmplti	zero,zero,903
    d9a0:	0000dff4 	movhi	zero,895
    d9a4:	0000e020 	cmpeqi	zero,zero,896
    d9a8:	0000e1d0 	cmplti	zero,zero,903
    d9ac:	0000e1d0 	cmplti	zero,zero,903
    d9b0:	0000e1d0 	cmplti	zero,zero,903
    d9b4:	0000e0fc 	xorhi	zero,zero,899
    d9b8:	0000e020 	cmpeqi	zero,zero,896
    d9bc:	0000e1d0 	cmplti	zero,zero,903
    d9c0:	0000e1d0 	cmplti	zero,zero,903
    d9c4:	0000e10c 	andi	zero,zero,900
    d9c8:	0000e1d0 	cmplti	zero,zero,903
    d9cc:	0000df38 	rdprs	zero,zero,892
    d9d0:	0000da44 	movi	zero,873
    d9d4:	0000e120 	cmpeqi	zero,zero,900
    d9d8:	0000e160 	cmpeqi	zero,zero,901
    d9dc:	0000e1d0 	cmplti	zero,zero,903
    d9e0:	0000e0a8 	cmpgeui	zero,zero,898
    d9e4:	0000e1d0 	cmplti	zero,zero,903
    d9e8:	0000da10 	cmplti	zero,zero,872
    d9ec:	0000e1d0 	cmplti	zero,zero,903
    d9f0:	0000e1d0 	cmplti	zero,zero,903
    d9f4:	0000e170 	cmpltui	zero,zero,901
    d9f8:	42000204 	addi	r8,r8,8
    d9fc:	d8802317 	ldw	r2,140(sp)
    da00:	1485883a 	add	r2,r2,r18
    da04:	d8802315 	stw	r2,140(sp)
    da08:	003f8c06 	br	d83c <__alt_mem_Flash_flash_data+0xf400d83c>
    da0c:	ad400414 	ori	r21,r21,16
    da10:	a880080c 	andi	r2,r21,32
    da14:	1001e61e 	bne	r2,zero,e1b0 <___vfiprintf_internal_r+0xab8>
    da18:	a880040c 	andi	r2,r21,16
    da1c:	10034726 	beq	r2,zero,e73c <___vfiprintf_internal_r+0x1044>
    da20:	d8802217 	ldw	r2,136(sp)
    da24:	001b883a 	mov	r13,zero
    da28:	15800017 	ldw	r22,0(r2)
    da2c:	10800104 	addi	r2,r2,4
    da30:	d8802215 	stw	r2,136(sp)
    da34:	b009883a 	mov	r4,r22
    da38:	00800044 	movi	r2,1
    da3c:	00000c06 	br	da70 <___vfiprintf_internal_r+0x378>
    da40:	ad400414 	ori	r21,r21,16
    da44:	a880080c 	andi	r2,r21,32
    da48:	1001491e 	bne	r2,zero,df70 <___vfiprintf_internal_r+0x878>
    da4c:	a880040c 	andi	r2,r21,16
    da50:	10032d26 	beq	r2,zero,e708 <___vfiprintf_internal_r+0x1010>
    da54:	d9002217 	ldw	r4,136(sp)
    da58:	001b883a 	mov	r13,zero
    da5c:	0005883a 	mov	r2,zero
    da60:	25800017 	ldw	r22,0(r4)
    da64:	21000104 	addi	r4,r4,4
    da68:	d9002215 	stw	r4,136(sp)
    da6c:	b009883a 	mov	r4,r22
    da70:	d8001d85 	stb	zero,118(sp)
    da74:	4827883a 	mov	r19,r9
    da78:	001d883a 	mov	r14,zero
    da7c:	48000216 	blt	r9,zero,da88 <___vfiprintf_internal_r+0x390>
    da80:	00ffdfc4 	movi	r3,-129
    da84:	a8ea703a 	and	r21,r21,r3
    da88:	2002071e 	bne	r4,zero,e2a8 <___vfiprintf_internal_r+0xbb0>
    da8c:	4802ad26 	beq	r9,zero,e544 <___vfiprintf_internal_r+0xe4c>
    da90:	10803fcc 	andi	r2,r2,255
    da94:	00c00044 	movi	r3,1
    da98:	10c22b26 	beq	r2,r3,e348 <___vfiprintf_internal_r+0xc50>
    da9c:	00c00084 	movi	r3,2
    daa0:	dd001a04 	addi	r20,sp,104
    daa4:	10c0dd1e 	bne	r2,r3,de1c <___vfiprintf_internal_r+0x724>
    daa8:	d9002617 	ldw	r4,152(sp)
    daac:	b08003cc 	andi	r2,r22,15
    dab0:	6806973a 	slli	r3,r13,28
    dab4:	2085883a 	add	r2,r4,r2
    dab8:	b02cd13a 	srli	r22,r22,4
    dabc:	10800003 	ldbu	r2,0(r2)
    dac0:	681ad13a 	srli	r13,r13,4
    dac4:	a53fffc4 	addi	r20,r20,-1
    dac8:	1dacb03a 	or	r22,r3,r22
    dacc:	a0800005 	stb	r2,0(r20)
    dad0:	b344b03a 	or	r2,r22,r13
    dad4:	103ff51e 	bne	r2,zero,daac <__alt_mem_Flash_flash_data+0xf400daac>
    dad8:	d9001e17 	ldw	r4,120(sp)
    dadc:	2527c83a 	sub	r19,r4,r20
    dae0:	9823883a 	mov	r17,r19
    dae4:	9a40010e 	bge	r19,r9,daec <___vfiprintf_internal_r+0x3f4>
    dae8:	4823883a 	mov	r17,r9
    daec:	73803fcc 	andi	r14,r14,255
    daf0:	7380201c 	xori	r14,r14,128
    daf4:	73bfe004 	addi	r14,r14,-128
    daf8:	70000126 	beq	r14,zero,db00 <___vfiprintf_internal_r+0x408>
    dafc:	8c400044 	addi	r17,r17,1
    db00:	ab40008c 	andi	r13,r21,2
    db04:	68000126 	beq	r13,zero,db0c <___vfiprintf_internal_r+0x414>
    db08:	8c400084 	addi	r17,r17,2
    db0c:	ad80210c 	andi	r22,r21,132
    db10:	b001c51e 	bne	r22,zero,e228 <___vfiprintf_internal_r+0xb30>
    db14:	9447c83a 	sub	r3,r18,r17
    db18:	00c1c30e 	bge	zero,r3,e228 <___vfiprintf_internal_r+0xb30>
    db1c:	01c00404 	movi	r7,16
    db20:	d8801c17 	ldw	r2,112(sp)
    db24:	38c37b0e 	bge	r7,r3,e914 <___vfiprintf_internal_r+0x121c>
    db28:	010000b4 	movhi	r4,2
    db2c:	213ffa04 	addi	r4,r4,-24
    db30:	dc002915 	stw	r16,164(sp)
    db34:	d9801b17 	ldw	r6,108(sp)
    db38:	d9002415 	stw	r4,144(sp)
    db3c:	03c001c4 	movi	r15,7
    db40:	da402515 	stw	r9,148(sp)
    db44:	db402815 	stw	r13,160(sp)
    db48:	1821883a 	mov	r16,r3
    db4c:	00000506 	br	db64 <___vfiprintf_internal_r+0x46c>
    db50:	31400084 	addi	r5,r6,2
    db54:	42000204 	addi	r8,r8,8
    db58:	200d883a 	mov	r6,r4
    db5c:	843ffc04 	addi	r16,r16,-16
    db60:	3c000d0e 	bge	r7,r16,db98 <___vfiprintf_internal_r+0x4a0>
    db64:	10800404 	addi	r2,r2,16
    db68:	31000044 	addi	r4,r6,1
    db6c:	47000015 	stw	fp,0(r8)
    db70:	41c00115 	stw	r7,4(r8)
    db74:	d8801c15 	stw	r2,112(sp)
    db78:	d9001b15 	stw	r4,108(sp)
    db7c:	793ff40e 	bge	r15,r4,db50 <__alt_mem_Flash_flash_data+0xf400db50>
    db80:	10019b1e 	bne	r2,zero,e1f0 <___vfiprintf_internal_r+0xaf8>
    db84:	843ffc04 	addi	r16,r16,-16
    db88:	000d883a 	mov	r6,zero
    db8c:	01400044 	movi	r5,1
    db90:	d811883a 	mov	r8,sp
    db94:	3c3ff316 	blt	r7,r16,db64 <__alt_mem_Flash_flash_data+0xf400db64>
    db98:	8007883a 	mov	r3,r16
    db9c:	da402517 	ldw	r9,148(sp)
    dba0:	db402817 	ldw	r13,160(sp)
    dba4:	dc002917 	ldw	r16,164(sp)
    dba8:	d9002417 	ldw	r4,144(sp)
    dbac:	1885883a 	add	r2,r3,r2
    dbb0:	40c00115 	stw	r3,4(r8)
    dbb4:	41000015 	stw	r4,0(r8)
    dbb8:	d8801c15 	stw	r2,112(sp)
    dbbc:	d9401b15 	stw	r5,108(sp)
    dbc0:	00c001c4 	movi	r3,7
    dbc4:	19426a16 	blt	r3,r5,e570 <___vfiprintf_internal_r+0xe78>
    dbc8:	d8c01d87 	ldb	r3,118(sp)
    dbcc:	42000204 	addi	r8,r8,8
    dbd0:	29000044 	addi	r4,r5,1
    dbd4:	1801991e 	bne	r3,zero,e23c <___vfiprintf_internal_r+0xb44>
    dbd8:	68000c26 	beq	r13,zero,dc0c <___vfiprintf_internal_r+0x514>
    dbdc:	d8c01d04 	addi	r3,sp,116
    dbe0:	10800084 	addi	r2,r2,2
    dbe4:	40c00015 	stw	r3,0(r8)
    dbe8:	00c00084 	movi	r3,2
    dbec:	40c00115 	stw	r3,4(r8)
    dbf0:	d8801c15 	stw	r2,112(sp)
    dbf4:	d9001b15 	stw	r4,108(sp)
    dbf8:	00c001c4 	movi	r3,7
    dbfc:	19024c16 	blt	r3,r4,e530 <___vfiprintf_internal_r+0xe38>
    dc00:	200b883a 	mov	r5,r4
    dc04:	42000204 	addi	r8,r8,8
    dc08:	21000044 	addi	r4,r4,1
    dc0c:	00c02004 	movi	r3,128
    dc10:	b0c20126 	beq	r22,r3,e418 <___vfiprintf_internal_r+0xd20>
    dc14:	4cedc83a 	sub	r22,r9,r19
    dc18:	0580230e 	bge	zero,r22,dca8 <___vfiprintf_internal_r+0x5b0>
    dc1c:	01c00404 	movi	r7,16
    dc20:	3d83140e 	bge	r7,r22,e874 <___vfiprintf_internal_r+0x117c>
    dc24:	010000b4 	movhi	r4,2
    dc28:	213ff604 	addi	r4,r4,-40
    dc2c:	d9002415 	stw	r4,144(sp)
    dc30:	034001c4 	movi	r13,7
    dc34:	00000506 	br	dc4c <___vfiprintf_internal_r+0x554>
    dc38:	29000084 	addi	r4,r5,2
    dc3c:	42000204 	addi	r8,r8,8
    dc40:	180b883a 	mov	r5,r3
    dc44:	b5bffc04 	addi	r22,r22,-16
    dc48:	3d800d0e 	bge	r7,r22,dc80 <___vfiprintf_internal_r+0x588>
    dc4c:	10800404 	addi	r2,r2,16
    dc50:	28c00044 	addi	r3,r5,1
    dc54:	45c00015 	stw	r23,0(r8)
    dc58:	41c00115 	stw	r7,4(r8)
    dc5c:	d8801c15 	stw	r2,112(sp)
    dc60:	d8c01b15 	stw	r3,108(sp)
    dc64:	68fff40e 	bge	r13,r3,dc38 <__alt_mem_Flash_flash_data+0xf400dc38>
    dc68:	1001811e 	bne	r2,zero,e270 <___vfiprintf_internal_r+0xb78>
    dc6c:	b5bffc04 	addi	r22,r22,-16
    dc70:	01000044 	movi	r4,1
    dc74:	000b883a 	mov	r5,zero
    dc78:	d811883a 	mov	r8,sp
    dc7c:	3dbff316 	blt	r7,r22,dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    dc80:	d8c02417 	ldw	r3,144(sp)
    dc84:	1585883a 	add	r2,r2,r22
    dc88:	45800115 	stw	r22,4(r8)
    dc8c:	40c00015 	stw	r3,0(r8)
    dc90:	d8801c15 	stw	r2,112(sp)
    dc94:	d9001b15 	stw	r4,108(sp)
    dc98:	00c001c4 	movi	r3,7
    dc9c:	1901d016 	blt	r3,r4,e3e0 <___vfiprintf_internal_r+0xce8>
    dca0:	42000204 	addi	r8,r8,8
    dca4:	21000044 	addi	r4,r4,1
    dca8:	14c5883a 	add	r2,r2,r19
    dcac:	45000015 	stw	r20,0(r8)
    dcb0:	44c00115 	stw	r19,4(r8)
    dcb4:	d8801c15 	stw	r2,112(sp)
    dcb8:	d9001b15 	stw	r4,108(sp)
    dcbc:	00c001c4 	movi	r3,7
    dcc0:	1901cf0e 	bge	r3,r4,e400 <___vfiprintf_internal_r+0xd08>
    dcc4:	1002361e 	bne	r2,zero,e5a0 <___vfiprintf_internal_r+0xea8>
    dcc8:	d8001b15 	stw	zero,108(sp)
    dccc:	aac0010c 	andi	r11,r21,4
    dcd0:	58002826 	beq	r11,zero,dd74 <___vfiprintf_internal_r+0x67c>
    dcd4:	9467c83a 	sub	r19,r18,r17
    dcd8:	d811883a 	mov	r8,sp
    dcdc:	04c3340e 	bge	zero,r19,e9b0 <___vfiprintf_internal_r+0x12b8>
    dce0:	01c00404 	movi	r7,16
    dce4:	3cc31b0e 	bge	r7,r19,e954 <___vfiprintf_internal_r+0x125c>
    dce8:	00c000b4 	movhi	r3,2
    dcec:	18fffa04 	addi	r3,r3,-24
    dcf0:	d9001b17 	ldw	r4,108(sp)
    dcf4:	d8c02415 	stw	r3,144(sp)
    dcf8:	382b883a 	mov	r21,r7
    dcfc:	050001c4 	movi	r20,7
    dd00:	dd802017 	ldw	r22,128(sp)
    dd04:	00000506 	br	dd1c <___vfiprintf_internal_r+0x624>
    dd08:	21400084 	addi	r5,r4,2
    dd0c:	42000204 	addi	r8,r8,8
    dd10:	1809883a 	mov	r4,r3
    dd14:	9cfffc04 	addi	r19,r19,-16
    dd18:	acc00d0e 	bge	r21,r19,dd50 <___vfiprintf_internal_r+0x658>
    dd1c:	10800404 	addi	r2,r2,16
    dd20:	20c00044 	addi	r3,r4,1
    dd24:	47000015 	stw	fp,0(r8)
    dd28:	45400115 	stw	r21,4(r8)
    dd2c:	d8801c15 	stw	r2,112(sp)
    dd30:	d8c01b15 	stw	r3,108(sp)
    dd34:	a0fff40e 	bge	r20,r3,dd08 <__alt_mem_Flash_flash_data+0xf400dd08>
    dd38:	10019f1e 	bne	r2,zero,e3b8 <___vfiprintf_internal_r+0xcc0>
    dd3c:	9cfffc04 	addi	r19,r19,-16
    dd40:	01400044 	movi	r5,1
    dd44:	0009883a 	mov	r4,zero
    dd48:	d811883a 	mov	r8,sp
    dd4c:	acfff316 	blt	r21,r19,dd1c <__alt_mem_Flash_flash_data+0xf400dd1c>
    dd50:	d8c02417 	ldw	r3,144(sp)
    dd54:	14c5883a 	add	r2,r2,r19
    dd58:	44c00115 	stw	r19,4(r8)
    dd5c:	40c00015 	stw	r3,0(r8)
    dd60:	d8801c15 	stw	r2,112(sp)
    dd64:	d9401b15 	stw	r5,108(sp)
    dd68:	00c001c4 	movi	r3,7
    dd6c:	1941810e 	bge	r3,r5,e374 <___vfiprintf_internal_r+0xc7c>
    dd70:	10017a1e 	bne	r2,zero,e35c <___vfiprintf_internal_r+0xc64>
    dd74:	8c82a416 	blt	r17,r18,e808 <___vfiprintf_internal_r+0x1110>
    dd78:	d9002317 	ldw	r4,140(sp)
    dd7c:	2449883a 	add	r4,r4,r17
    dd80:	d9002315 	stw	r4,140(sp)
    dd84:	d8001b15 	stw	zero,108(sp)
    dd88:	d811883a 	mov	r8,sp
    dd8c:	003e8e06 	br	d7c8 <__alt_mem_Flash_flash_data+0xf400d7c8>
    dd90:	d9002017 	ldw	r4,128(sp)
    dd94:	a80b883a 	mov	r5,r21
    dd98:	00072440 	call	7244 <__swsetup_r>
    dd9c:	10000c1e 	bne	r2,zero,ddd0 <___vfiprintf_internal_r+0x6d8>
    dda0:	a880030b 	ldhu	r2,12(r21)
    dda4:	00c00284 	movi	r3,10
    dda8:	1080068c 	andi	r2,r2,26
    ddac:	10fe741e 	bne	r2,r3,d780 <__alt_mem_Flash_flash_data+0xf400d780>
    ddb0:	a880038f 	ldh	r2,14(r21)
    ddb4:	103e7216 	blt	r2,zero,d780 <__alt_mem_Flash_flash_data+0xf400d780>
    ddb8:	d9002017 	ldw	r4,128(sp)
    ddbc:	d9c02217 	ldw	r7,136(sp)
    ddc0:	a80b883a 	mov	r5,r21
    ddc4:	b00d883a 	mov	r6,r22
    ddc8:	000e9ec0 	call	e9ec <__sbprintf>
    ddcc:	00000106 	br	ddd4 <___vfiprintf_internal_r+0x6dc>
    ddd0:	00bfffc4 	movi	r2,-1
    ddd4:	dfc03517 	ldw	ra,212(sp)
    ddd8:	df003417 	ldw	fp,208(sp)
    dddc:	ddc03317 	ldw	r23,204(sp)
    dde0:	dd803217 	ldw	r22,200(sp)
    dde4:	dd403117 	ldw	r21,196(sp)
    dde8:	dd003017 	ldw	r20,192(sp)
    ddec:	dcc02f17 	ldw	r19,188(sp)
    ddf0:	dc802e17 	ldw	r18,184(sp)
    ddf4:	dc402d17 	ldw	r17,180(sp)
    ddf8:	dc002c17 	ldw	r16,176(sp)
    ddfc:	dec03604 	addi	sp,sp,216
    de00:	f800283a 	ret
    de04:	00092a40 	call	92a4 <__sinit>
    de08:	003e4d06 	br	d740 <__alt_mem_Flash_flash_data+0xf400d740>
    de0c:	8005883a 	mov	r2,r16
    de10:	ad400114 	ori	r21,r21,4
    de14:	80c00007 	ldb	r3,0(r16)
    de18:	003e9506 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    de1c:	b006d0fa 	srli	r3,r22,3
    de20:	6808977a 	slli	r4,r13,29
    de24:	681ad0fa 	srli	r13,r13,3
    de28:	b58001cc 	andi	r22,r22,7
    de2c:	b0800c04 	addi	r2,r22,48
    de30:	a53fffc4 	addi	r20,r20,-1
    de34:	20ecb03a 	or	r22,r4,r3
    de38:	a0800005 	stb	r2,0(r20)
    de3c:	b346b03a 	or	r3,r22,r13
    de40:	183ff61e 	bne	r3,zero,de1c <__alt_mem_Flash_flash_data+0xf400de1c>
    de44:	a8c0004c 	andi	r3,r21,1
    de48:	a009883a 	mov	r4,r20
    de4c:	18013b26 	beq	r3,zero,e33c <___vfiprintf_internal_r+0xc44>
    de50:	10803fcc 	andi	r2,r2,255
    de54:	1080201c 	xori	r2,r2,128
    de58:	10bfe004 	addi	r2,r2,-128
    de5c:	00c00c04 	movi	r3,48
    de60:	10ff1d26 	beq	r2,r3,dad8 <__alt_mem_Flash_flash_data+0xf400dad8>
    de64:	d8801e17 	ldw	r2,120(sp)
    de68:	a53fffc4 	addi	r20,r20,-1
    de6c:	20ffffc5 	stb	r3,-1(r4)
    de70:	1527c83a 	sub	r19,r2,r20
    de74:	003f1a06 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    de78:	ad402014 	ori	r21,r21,128
    de7c:	8005883a 	mov	r2,r16
    de80:	80c00007 	ldb	r3,0(r16)
    de84:	003e7a06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    de88:	8005883a 	mov	r2,r16
    de8c:	0025883a 	mov	r18,zero
    de90:	193ff404 	addi	r4,r3,-48
    de94:	10c00007 	ldb	r3,0(r2)
    de98:	948002a4 	muli	r18,r18,10
    de9c:	84000044 	addi	r16,r16,1
    dea0:	8005883a 	mov	r2,r16
    dea4:	9125883a 	add	r18,r18,r4
    dea8:	193ff404 	addi	r4,r3,-48
    deac:	313ff92e 	bgeu	r6,r4,de94 <__alt_mem_Flash_flash_data+0xf400de94>
    deb0:	003e7006 	br	d874 <__alt_mem_Flash_flash_data+0xf400d874>
    deb4:	ad400414 	ori	r21,r21,16
    deb8:	d9c01d85 	stb	r7,118(sp)
    debc:	a880080c 	andi	r2,r21,32
    dec0:	d8c02217 	ldw	r3,136(sp)
    dec4:	10005a26 	beq	r2,zero,e030 <___vfiprintf_internal_r+0x938>
    dec8:	d9002217 	ldw	r4,136(sp)
    decc:	18800117 	ldw	r2,4(r3)
    ded0:	1d800017 	ldw	r22,0(r3)
    ded4:	21000204 	addi	r4,r4,8
    ded8:	d9002215 	stw	r4,136(sp)
    dedc:	101b883a 	mov	r13,r2
    dee0:	1001f416 	blt	r2,zero,e6b4 <___vfiprintf_internal_r+0xfbc>
    dee4:	db801d83 	ldbu	r14,118(sp)
    dee8:	4827883a 	mov	r19,r9
    deec:	00800044 	movi	r2,1
    def0:	b348b03a 	or	r4,r22,r13
    def4:	003ee106 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    def8:	80c00007 	ldb	r3,0(r16)
    defc:	80800044 	addi	r2,r16,1
    df00:	1b42a326 	beq	r3,r13,e990 <___vfiprintf_internal_r+0x1298>
    df04:	193ff404 	addi	r4,r3,-48
    df08:	1021883a 	mov	r16,r2
    df0c:	0013883a 	mov	r9,zero
    df10:	313e5836 	bltu	r6,r4,d874 <__alt_mem_Flash_flash_data+0xf400d874>
    df14:	80c00007 	ldb	r3,0(r16)
    df18:	4a4002a4 	muli	r9,r9,10
    df1c:	84000044 	addi	r16,r16,1
    df20:	2253883a 	add	r9,r4,r9
    df24:	193ff404 	addi	r4,r3,-48
    df28:	313ffa2e 	bgeu	r6,r4,df14 <__alt_mem_Flash_flash_data+0xf400df14>
    df2c:	483e510e 	bge	r9,zero,d874 <__alt_mem_Flash_flash_data+0xf400d874>
    df30:	027fffc4 	movi	r9,-1
    df34:	003e4f06 	br	d874 <__alt_mem_Flash_flash_data+0xf400d874>
    df38:	d9c01d85 	stb	r7,118(sp)
    df3c:	a880080c 	andi	r2,r21,32
    df40:	10020826 	beq	r2,zero,e764 <___vfiprintf_internal_r+0x106c>
    df44:	d8c02217 	ldw	r3,136(sp)
    df48:	d9002317 	ldw	r4,140(sp)
    df4c:	18800017 	ldw	r2,0(r3)
    df50:	2007d7fa 	srai	r3,r4,31
    df54:	d9002217 	ldw	r4,136(sp)
    df58:	10c00115 	stw	r3,4(r2)
    df5c:	21000104 	addi	r4,r4,4
    df60:	d9002215 	stw	r4,136(sp)
    df64:	d9002317 	ldw	r4,140(sp)
    df68:	11000015 	stw	r4,0(r2)
    df6c:	003e1606 	br	d7c8 <__alt_mem_Flash_flash_data+0xf400d7c8>
    df70:	d8802217 	ldw	r2,136(sp)
    df74:	d8c02217 	ldw	r3,136(sp)
    df78:	15800017 	ldw	r22,0(r2)
    df7c:	13400117 	ldw	r13,4(r2)
    df80:	18c00204 	addi	r3,r3,8
    df84:	0005883a 	mov	r2,zero
    df88:	d8c02215 	stw	r3,136(sp)
    df8c:	b348b03a 	or	r4,r22,r13
    df90:	003eb706 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    df94:	38803fcc 	andi	r2,r7,255
    df98:	1080201c 	xori	r2,r2,128
    df9c:	10bfe004 	addi	r2,r2,-128
    dfa0:	1001e31e 	bne	r2,zero,e730 <___vfiprintf_internal_r+0x1038>
    dfa4:	8005883a 	mov	r2,r16
    dfa8:	01c00804 	movi	r7,32
    dfac:	80c00007 	ldb	r3,0(r16)
    dfb0:	003e2f06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    dfb4:	ad400054 	ori	r21,r21,1
    dfb8:	8005883a 	mov	r2,r16
    dfbc:	80c00007 	ldb	r3,0(r16)
    dfc0:	003e2b06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    dfc4:	d8c02217 	ldw	r3,136(sp)
    dfc8:	1c800017 	ldw	r18,0(r3)
    dfcc:	18c00104 	addi	r3,r3,4
    dfd0:	90023816 	blt	r18,zero,e8b4 <___vfiprintf_internal_r+0x11bc>
    dfd4:	d8c02215 	stw	r3,136(sp)
    dfd8:	8005883a 	mov	r2,r16
    dfdc:	80c00007 	ldb	r3,0(r16)
    dfe0:	003e2306 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    dfe4:	8005883a 	mov	r2,r16
    dfe8:	01c00ac4 	movi	r7,43
    dfec:	80c00007 	ldb	r3,0(r16)
    dff0:	003e1f06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    dff4:	d8c02217 	ldw	r3,136(sp)
    dff8:	04400044 	movi	r17,1
    dffc:	d8001d85 	stb	zero,118(sp)
    e000:	18800017 	ldw	r2,0(r3)
    e004:	18c00104 	addi	r3,r3,4
    e008:	d8c02215 	stw	r3,136(sp)
    e00c:	d8801005 	stb	r2,64(sp)
    e010:	8827883a 	mov	r19,r17
    e014:	dd001004 	addi	r20,sp,64
    e018:	0013883a 	mov	r9,zero
    e01c:	003eb806 	br	db00 <__alt_mem_Flash_flash_data+0xf400db00>
    e020:	d9c01d85 	stb	r7,118(sp)
    e024:	a880080c 	andi	r2,r21,32
    e028:	d8c02217 	ldw	r3,136(sp)
    e02c:	103fa61e 	bne	r2,zero,dec8 <__alt_mem_Flash_flash_data+0xf400dec8>
    e030:	a880040c 	andi	r2,r21,16
    e034:	1001dd26 	beq	r2,zero,e7ac <___vfiprintf_internal_r+0x10b4>
    e038:	1d800017 	ldw	r22,0(r3)
    e03c:	d8802217 	ldw	r2,136(sp)
    e040:	b01bd7fa 	srai	r13,r22,31
    e044:	10800104 	addi	r2,r2,4
    e048:	d8802215 	stw	r2,136(sp)
    e04c:	6805883a 	mov	r2,r13
    e050:	003fa306 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e054:	008000b4 	movhi	r2,2
    e058:	10bf8004 	addi	r2,r2,-512
    e05c:	d8802615 	stw	r2,152(sp)
    e060:	d9c01d85 	stb	r7,118(sp)
    e064:	a880080c 	andi	r2,r21,32
    e068:	10004726 	beq	r2,zero,e188 <___vfiprintf_internal_r+0xa90>
    e06c:	d9002217 	ldw	r4,136(sp)
    e070:	25800017 	ldw	r22,0(r4)
    e074:	23400117 	ldw	r13,4(r4)
    e078:	21000204 	addi	r4,r4,8
    e07c:	d9002215 	stw	r4,136(sp)
    e080:	a880004c 	andi	r2,r21,1
    e084:	10014e26 	beq	r2,zero,e5c0 <___vfiprintf_internal_r+0xec8>
    e088:	b348b03a 	or	r4,r22,r13
    e08c:	20019c26 	beq	r4,zero,e700 <___vfiprintf_internal_r+0x1008>
    e090:	00800c04 	movi	r2,48
    e094:	d8801d05 	stb	r2,116(sp)
    e098:	d8c01d45 	stb	r3,117(sp)
    e09c:	ad400094 	ori	r21,r21,2
    e0a0:	00800084 	movi	r2,2
    e0a4:	003e7206 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e0a8:	d8c02217 	ldw	r3,136(sp)
    e0ac:	d8001d85 	stb	zero,118(sp)
    e0b0:	1d000017 	ldw	r20,0(r3)
    e0b4:	1d800104 	addi	r22,r3,4
    e0b8:	a0021c26 	beq	r20,zero,e92c <___vfiprintf_internal_r+0x1234>
    e0bc:	a009883a 	mov	r4,r20
    e0c0:	48020016 	blt	r9,zero,e8c4 <___vfiprintf_internal_r+0x11cc>
    e0c4:	480d883a 	mov	r6,r9
    e0c8:	000b883a 	mov	r5,zero
    e0cc:	da002a15 	stw	r8,168(sp)
    e0d0:	da402b15 	stw	r9,172(sp)
    e0d4:	000a7900 	call	a790 <memchr>
    e0d8:	da002a17 	ldw	r8,168(sp)
    e0dc:	da402b17 	ldw	r9,172(sp)
    e0e0:	10022226 	beq	r2,zero,e96c <___vfiprintf_internal_r+0x1274>
    e0e4:	1527c83a 	sub	r19,r2,r20
    e0e8:	4cc1c916 	blt	r9,r19,e810 <___vfiprintf_internal_r+0x1118>
    e0ec:	db801d83 	ldbu	r14,118(sp)
    e0f0:	dd802215 	stw	r22,136(sp)
    e0f4:	0013883a 	mov	r9,zero
    e0f8:	003e7906 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e0fc:	ad401014 	ori	r21,r21,64
    e100:	8005883a 	mov	r2,r16
    e104:	80c00007 	ldb	r3,0(r16)
    e108:	003dd906 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e10c:	80c00007 	ldb	r3,0(r16)
    e110:	8005883a 	mov	r2,r16
    e114:	1b01e326 	beq	r3,r12,e8a4 <___vfiprintf_internal_r+0x11ac>
    e118:	ad400414 	ori	r21,r21,16
    e11c:	003dd406 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e120:	d9002217 	ldw	r4,136(sp)
    e124:	00800c04 	movi	r2,48
    e128:	d8801d05 	stb	r2,116(sp)
    e12c:	25800017 	ldw	r22,0(r4)
    e130:	00801e04 	movi	r2,120
    e134:	d8801d45 	stb	r2,117(sp)
    e138:	008000b4 	movhi	r2,2
    e13c:	21000104 	addi	r4,r4,4
    e140:	10bf8504 	addi	r2,r2,-492
    e144:	d9002215 	stw	r4,136(sp)
    e148:	d8802615 	stw	r2,152(sp)
    e14c:	001b883a 	mov	r13,zero
    e150:	ad400094 	ori	r21,r21,2
    e154:	00800084 	movi	r2,2
    e158:	b009883a 	mov	r4,r22
    e15c:	003e4406 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e160:	ad400814 	ori	r21,r21,32
    e164:	8005883a 	mov	r2,r16
    e168:	80c00007 	ldb	r3,0(r16)
    e16c:	003dc006 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e170:	008000b4 	movhi	r2,2
    e174:	10bf8504 	addi	r2,r2,-492
    e178:	d8802615 	stw	r2,152(sp)
    e17c:	d9c01d85 	stb	r7,118(sp)
    e180:	a880080c 	andi	r2,r21,32
    e184:	103fb91e 	bne	r2,zero,e06c <__alt_mem_Flash_flash_data+0xf400e06c>
    e188:	a880040c 	andi	r2,r21,16
    e18c:	10010f1e 	bne	r2,zero,e5cc <___vfiprintf_internal_r+0xed4>
    e190:	a880100c 	andi	r2,r21,64
    e194:	10010d26 	beq	r2,zero,e5cc <___vfiprintf_internal_r+0xed4>
    e198:	d9002217 	ldw	r4,136(sp)
    e19c:	001b883a 	mov	r13,zero
    e1a0:	2580000b 	ldhu	r22,0(r4)
    e1a4:	21000104 	addi	r4,r4,4
    e1a8:	d9002215 	stw	r4,136(sp)
    e1ac:	003fb406 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e1b0:	d9002217 	ldw	r4,136(sp)
    e1b4:	00800044 	movi	r2,1
    e1b8:	25800017 	ldw	r22,0(r4)
    e1bc:	23400117 	ldw	r13,4(r4)
    e1c0:	21000204 	addi	r4,r4,8
    e1c4:	d9002215 	stw	r4,136(sp)
    e1c8:	b348b03a 	or	r4,r22,r13
    e1cc:	003e2806 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e1d0:	d9c01d85 	stb	r7,118(sp)
    e1d4:	1801ab26 	beq	r3,zero,e884 <___vfiprintf_internal_r+0x118c>
    e1d8:	04400044 	movi	r17,1
    e1dc:	d8c01005 	stb	r3,64(sp)
    e1e0:	d8001d85 	stb	zero,118(sp)
    e1e4:	8827883a 	mov	r19,r17
    e1e8:	dd001004 	addi	r20,sp,64
    e1ec:	003f8a06 	br	e018 <__alt_mem_Flash_flash_data+0xf400e018>
    e1f0:	d9002017 	ldw	r4,128(sp)
    e1f4:	d9402117 	ldw	r5,132(sp)
    e1f8:	d9801a04 	addi	r6,sp,104
    e1fc:	d9c02b15 	stw	r7,172(sp)
    e200:	dbc02a15 	stw	r15,168(sp)
    e204:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e208:	d9c02b17 	ldw	r7,172(sp)
    e20c:	dbc02a17 	ldw	r15,168(sp)
    e210:	1000631e 	bne	r2,zero,e3a0 <___vfiprintf_internal_r+0xca8>
    e214:	d9801b17 	ldw	r6,108(sp)
    e218:	d8801c17 	ldw	r2,112(sp)
    e21c:	d811883a 	mov	r8,sp
    e220:	31400044 	addi	r5,r6,1
    e224:	003e4d06 	br	db5c <__alt_mem_Flash_flash_data+0xf400db5c>
    e228:	d9401b17 	ldw	r5,108(sp)
    e22c:	d8801c17 	ldw	r2,112(sp)
    e230:	29000044 	addi	r4,r5,1
    e234:	d8c01d87 	ldb	r3,118(sp)
    e238:	183e6726 	beq	r3,zero,dbd8 <__alt_mem_Flash_flash_data+0xf400dbd8>
    e23c:	00c00044 	movi	r3,1
    e240:	d9401d84 	addi	r5,sp,118
    e244:	10c5883a 	add	r2,r2,r3
    e248:	41400015 	stw	r5,0(r8)
    e24c:	40c00115 	stw	r3,4(r8)
    e250:	d8801c15 	stw	r2,112(sp)
    e254:	d9001b15 	stw	r4,108(sp)
    e258:	014001c4 	movi	r5,7
    e25c:	2900ab16 	blt	r5,r4,e50c <___vfiprintf_internal_r+0xe14>
    e260:	200b883a 	mov	r5,r4
    e264:	42000204 	addi	r8,r8,8
    e268:	21000044 	addi	r4,r4,1
    e26c:	003e5a06 	br	dbd8 <__alt_mem_Flash_flash_data+0xf400dbd8>
    e270:	d9002017 	ldw	r4,128(sp)
    e274:	d9402117 	ldw	r5,132(sp)
    e278:	d9801a04 	addi	r6,sp,104
    e27c:	d9c02b15 	stw	r7,172(sp)
    e280:	db402a15 	stw	r13,168(sp)
    e284:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e288:	d9c02b17 	ldw	r7,172(sp)
    e28c:	db402a17 	ldw	r13,168(sp)
    e290:	1000431e 	bne	r2,zero,e3a0 <___vfiprintf_internal_r+0xca8>
    e294:	d9401b17 	ldw	r5,108(sp)
    e298:	d8801c17 	ldw	r2,112(sp)
    e29c:	d811883a 	mov	r8,sp
    e2a0:	29000044 	addi	r4,r5,1
    e2a4:	003e6706 	br	dc44 <__alt_mem_Flash_flash_data+0xf400dc44>
    e2a8:	10803fcc 	andi	r2,r2,255
    e2ac:	00c00044 	movi	r3,1
    e2b0:	10fdfa1e 	bne	r2,r3,da9c <__alt_mem_Flash_flash_data+0xf400da9c>
    e2b4:	6800021e 	bne	r13,zero,e2c0 <___vfiprintf_internal_r+0xbc8>
    e2b8:	00800244 	movi	r2,9
    e2bc:	1580222e 	bgeu	r2,r22,e348 <___vfiprintf_internal_r+0xc50>
    e2c0:	dc802415 	stw	r18,144(sp)
    e2c4:	dc002515 	stw	r16,148(sp)
    e2c8:	dc401a04 	addi	r17,sp,104
    e2cc:	b021883a 	mov	r16,r22
    e2d0:	4827883a 	mov	r19,r9
    e2d4:	4029883a 	mov	r20,r8
    e2d8:	702d883a 	mov	r22,r14
    e2dc:	6825883a 	mov	r18,r13
    e2e0:	8009883a 	mov	r4,r16
    e2e4:	900b883a 	mov	r5,r18
    e2e8:	01800284 	movi	r6,10
    e2ec:	000f883a 	mov	r7,zero
    e2f0:	000f9600 	call	f960 <__umoddi3>
    e2f4:	10800c04 	addi	r2,r2,48
    e2f8:	8c7fffc4 	addi	r17,r17,-1
    e2fc:	8009883a 	mov	r4,r16
    e300:	900b883a 	mov	r5,r18
    e304:	01800284 	movi	r6,10
    e308:	000f883a 	mov	r7,zero
    e30c:	88800005 	stb	r2,0(r17)
    e310:	000f3a00 	call	f3a0 <__udivdi3>
    e314:	1021883a 	mov	r16,r2
    e318:	10c4b03a 	or	r2,r2,r3
    e31c:	1825883a 	mov	r18,r3
    e320:	103fef1e 	bne	r2,zero,e2e0 <__alt_mem_Flash_flash_data+0xf400e2e0>
    e324:	dc802417 	ldw	r18,144(sp)
    e328:	dc002517 	ldw	r16,148(sp)
    e32c:	a011883a 	mov	r8,r20
    e330:	9813883a 	mov	r9,r19
    e334:	b01d883a 	mov	r14,r22
    e338:	8829883a 	mov	r20,r17
    e33c:	d8c01e17 	ldw	r3,120(sp)
    e340:	1d27c83a 	sub	r19,r3,r20
    e344:	003de606 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e348:	b5800c04 	addi	r22,r22,48
    e34c:	dd8019c5 	stb	r22,103(sp)
    e350:	dcc02717 	ldw	r19,156(sp)
    e354:	dd0019c4 	addi	r20,sp,103
    e358:	003de106 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e35c:	d9002017 	ldw	r4,128(sp)
    e360:	d9402117 	ldw	r5,132(sp)
    e364:	d9801a04 	addi	r6,sp,104
    e368:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e36c:	10000c1e 	bne	r2,zero,e3a0 <___vfiprintf_internal_r+0xca8>
    e370:	d8801c17 	ldw	r2,112(sp)
    e374:	8c80010e 	bge	r17,r18,e37c <___vfiprintf_internal_r+0xc84>
    e378:	9023883a 	mov	r17,r18
    e37c:	d8c02317 	ldw	r3,140(sp)
    e380:	1c47883a 	add	r3,r3,r17
    e384:	d8c02315 	stw	r3,140(sp)
    e388:	103e7e26 	beq	r2,zero,dd84 <__alt_mem_Flash_flash_data+0xf400dd84>
    e38c:	d9002017 	ldw	r4,128(sp)
    e390:	d9402117 	ldw	r5,132(sp)
    e394:	d9801a04 	addi	r6,sp,104
    e398:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e39c:	103e7926 	beq	r2,zero,dd84 <__alt_mem_Flash_flash_data+0xf400dd84>
    e3a0:	dd402117 	ldw	r21,132(sp)
    e3a4:	a880030b 	ldhu	r2,12(r21)
    e3a8:	1080100c 	andi	r2,r2,64
    e3ac:	103e881e 	bne	r2,zero,ddd0 <__alt_mem_Flash_flash_data+0xf400ddd0>
    e3b0:	d8802317 	ldw	r2,140(sp)
    e3b4:	003e8706 	br	ddd4 <__alt_mem_Flash_flash_data+0xf400ddd4>
    e3b8:	d9402117 	ldw	r5,132(sp)
    e3bc:	b009883a 	mov	r4,r22
    e3c0:	d9801a04 	addi	r6,sp,104
    e3c4:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e3c8:	103ff51e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e3cc:	d9001b17 	ldw	r4,108(sp)
    e3d0:	d8801c17 	ldw	r2,112(sp)
    e3d4:	d811883a 	mov	r8,sp
    e3d8:	21400044 	addi	r5,r4,1
    e3dc:	003e4d06 	br	dd14 <__alt_mem_Flash_flash_data+0xf400dd14>
    e3e0:	1000aa1e 	bne	r2,zero,e68c <___vfiprintf_internal_r+0xf94>
    e3e4:	00c00044 	movi	r3,1
    e3e8:	9805883a 	mov	r2,r19
    e3ec:	dd000015 	stw	r20,0(sp)
    e3f0:	dcc00115 	stw	r19,4(sp)
    e3f4:	dcc01c15 	stw	r19,112(sp)
    e3f8:	d8c01b15 	stw	r3,108(sp)
    e3fc:	d811883a 	mov	r8,sp
    e400:	42000204 	addi	r8,r8,8
    e404:	aac0010c 	andi	r11,r21,4
    e408:	583fda26 	beq	r11,zero,e374 <__alt_mem_Flash_flash_data+0xf400e374>
    e40c:	9467c83a 	sub	r19,r18,r17
    e410:	04fe3316 	blt	zero,r19,dce0 <__alt_mem_Flash_flash_data+0xf400dce0>
    e414:	003fd706 	br	e374 <__alt_mem_Flash_flash_data+0xf400e374>
    e418:	946dc83a 	sub	r22,r18,r17
    e41c:	05bdfd0e 	bge	zero,r22,dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    e420:	00c000b4 	movhi	r3,2
    e424:	18fff604 	addi	r3,r3,-40
    e428:	01c00404 	movi	r7,16
    e42c:	d8c02415 	stw	r3,144(sp)
    e430:	3d81530e 	bge	r7,r22,e980 <___vfiprintf_internal_r+0x1288>
    e434:	8007883a 	mov	r3,r16
    e438:	034001c4 	movi	r13,7
    e43c:	b021883a 	mov	r16,r22
    e440:	da402515 	stw	r9,148(sp)
    e444:	182d883a 	mov	r22,r3
    e448:	00000506 	br	e460 <___vfiprintf_internal_r+0xd68>
    e44c:	29800084 	addi	r6,r5,2
    e450:	42000204 	addi	r8,r8,8
    e454:	180b883a 	mov	r5,r3
    e458:	843ffc04 	addi	r16,r16,-16
    e45c:	3c000d0e 	bge	r7,r16,e494 <___vfiprintf_internal_r+0xd9c>
    e460:	10800404 	addi	r2,r2,16
    e464:	28c00044 	addi	r3,r5,1
    e468:	45c00015 	stw	r23,0(r8)
    e46c:	41c00115 	stw	r7,4(r8)
    e470:	d8801c15 	stw	r2,112(sp)
    e474:	d8c01b15 	stw	r3,108(sp)
    e478:	68fff40e 	bge	r13,r3,e44c <__alt_mem_Flash_flash_data+0xf400e44c>
    e47c:	1000151e 	bne	r2,zero,e4d4 <___vfiprintf_internal_r+0xddc>
    e480:	843ffc04 	addi	r16,r16,-16
    e484:	01800044 	movi	r6,1
    e488:	000b883a 	mov	r5,zero
    e48c:	d811883a 	mov	r8,sp
    e490:	3c3ff316 	blt	r7,r16,e460 <__alt_mem_Flash_flash_data+0xf400e460>
    e494:	da402517 	ldw	r9,148(sp)
    e498:	b007883a 	mov	r3,r22
    e49c:	802d883a 	mov	r22,r16
    e4a0:	1821883a 	mov	r16,r3
    e4a4:	d8c02417 	ldw	r3,144(sp)
    e4a8:	1585883a 	add	r2,r2,r22
    e4ac:	45800115 	stw	r22,4(r8)
    e4b0:	40c00015 	stw	r3,0(r8)
    e4b4:	d8801c15 	stw	r2,112(sp)
    e4b8:	d9801b15 	stw	r6,108(sp)
    e4bc:	00c001c4 	movi	r3,7
    e4c0:	19806d16 	blt	r3,r6,e678 <___vfiprintf_internal_r+0xf80>
    e4c4:	42000204 	addi	r8,r8,8
    e4c8:	31000044 	addi	r4,r6,1
    e4cc:	300b883a 	mov	r5,r6
    e4d0:	003dd006 	br	dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    e4d4:	d9002017 	ldw	r4,128(sp)
    e4d8:	d9402117 	ldw	r5,132(sp)
    e4dc:	d9801a04 	addi	r6,sp,104
    e4e0:	d9c02b15 	stw	r7,172(sp)
    e4e4:	db402a15 	stw	r13,168(sp)
    e4e8:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e4ec:	d9c02b17 	ldw	r7,172(sp)
    e4f0:	db402a17 	ldw	r13,168(sp)
    e4f4:	103faa1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e4f8:	d9401b17 	ldw	r5,108(sp)
    e4fc:	d8801c17 	ldw	r2,112(sp)
    e500:	d811883a 	mov	r8,sp
    e504:	29800044 	addi	r6,r5,1
    e508:	003fd306 	br	e458 <__alt_mem_Flash_flash_data+0xf400e458>
    e50c:	1000401e 	bne	r2,zero,e610 <___vfiprintf_internal_r+0xf18>
    e510:	68003b26 	beq	r13,zero,e600 <___vfiprintf_internal_r+0xf08>
    e514:	d9001d04 	addi	r4,sp,116
    e518:	00800084 	movi	r2,2
    e51c:	d9000015 	stw	r4,0(sp)
    e520:	d8800115 	stw	r2,4(sp)
    e524:	1809883a 	mov	r4,r3
    e528:	d811883a 	mov	r8,sp
    e52c:	003db406 	br	dc00 <__alt_mem_Flash_flash_data+0xf400dc00>
    e530:	1000451e 	bne	r2,zero,e648 <___vfiprintf_internal_r+0xf50>
    e534:	01000044 	movi	r4,1
    e538:	000b883a 	mov	r5,zero
    e53c:	d811883a 	mov	r8,sp
    e540:	003db206 	br	dc0c <__alt_mem_Flash_flash_data+0xf400dc0c>
    e544:	10803fcc 	andi	r2,r2,255
    e548:	1000071e 	bne	r2,zero,e568 <___vfiprintf_internal_r+0xe70>
    e54c:	a880004c 	andi	r2,r21,1
    e550:	10000526 	beq	r2,zero,e568 <___vfiprintf_internal_r+0xe70>
    e554:	00800c04 	movi	r2,48
    e558:	d88019c5 	stb	r2,103(sp)
    e55c:	dcc02717 	ldw	r19,156(sp)
    e560:	dd0019c4 	addi	r20,sp,103
    e564:	003d5e06 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e568:	dd001a04 	addi	r20,sp,104
    e56c:	003d5c06 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e570:	1000971e 	bne	r2,zero,e7d0 <___vfiprintf_internal_r+0x10d8>
    e574:	d8c01d87 	ldb	r3,118(sp)
    e578:	18005826 	beq	r3,zero,e6dc <___vfiprintf_internal_r+0xfe4>
    e57c:	00800044 	movi	r2,1
    e580:	d8c01d84 	addi	r3,sp,118
    e584:	1009883a 	mov	r4,r2
    e588:	d8c00015 	stw	r3,0(sp)
    e58c:	d8800115 	stw	r2,4(sp)
    e590:	d811883a 	mov	r8,sp
    e594:	003f3206 	br	e260 <__alt_mem_Flash_flash_data+0xf400e260>
    e598:	8023883a 	mov	r17,r16
    e59c:	003ca706 	br	d83c <__alt_mem_Flash_flash_data+0xf400d83c>
    e5a0:	d9002017 	ldw	r4,128(sp)
    e5a4:	d9402117 	ldw	r5,132(sp)
    e5a8:	d9801a04 	addi	r6,sp,104
    e5ac:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e5b0:	103f7b1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e5b4:	d8801c17 	ldw	r2,112(sp)
    e5b8:	d811883a 	mov	r8,sp
    e5bc:	003f9106 	br	e404 <__alt_mem_Flash_flash_data+0xf400e404>
    e5c0:	00800084 	movi	r2,2
    e5c4:	b348b03a 	or	r4,r22,r13
    e5c8:	003d2906 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e5cc:	d8802217 	ldw	r2,136(sp)
    e5d0:	001b883a 	mov	r13,zero
    e5d4:	15800017 	ldw	r22,0(r2)
    e5d8:	10800104 	addi	r2,r2,4
    e5dc:	d8802215 	stw	r2,136(sp)
    e5e0:	003ea706 	br	e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e5e4:	d9002017 	ldw	r4,128(sp)
    e5e8:	d9402117 	ldw	r5,132(sp)
    e5ec:	d9801a04 	addi	r6,sp,104
    e5f0:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e5f4:	103f6a1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e5f8:	d811883a 	mov	r8,sp
    e5fc:	003cff06 	br	d9fc <__alt_mem_Flash_flash_data+0xf400d9fc>
    e600:	000b883a 	mov	r5,zero
    e604:	1809883a 	mov	r4,r3
    e608:	d811883a 	mov	r8,sp
    e60c:	003d7f06 	br	dc0c <__alt_mem_Flash_flash_data+0xf400dc0c>
    e610:	d9002017 	ldw	r4,128(sp)
    e614:	d9402117 	ldw	r5,132(sp)
    e618:	d9801a04 	addi	r6,sp,104
    e61c:	da402b15 	stw	r9,172(sp)
    e620:	db402a15 	stw	r13,168(sp)
    e624:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e628:	da402b17 	ldw	r9,172(sp)
    e62c:	db402a17 	ldw	r13,168(sp)
    e630:	103f5b1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e634:	d9401b17 	ldw	r5,108(sp)
    e638:	d8801c17 	ldw	r2,112(sp)
    e63c:	d811883a 	mov	r8,sp
    e640:	29000044 	addi	r4,r5,1
    e644:	003d6406 	br	dbd8 <__alt_mem_Flash_flash_data+0xf400dbd8>
    e648:	d9002017 	ldw	r4,128(sp)
    e64c:	d9402117 	ldw	r5,132(sp)
    e650:	d9801a04 	addi	r6,sp,104
    e654:	da402b15 	stw	r9,172(sp)
    e658:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e65c:	da402b17 	ldw	r9,172(sp)
    e660:	103f4f1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e664:	d9401b17 	ldw	r5,108(sp)
    e668:	d8801c17 	ldw	r2,112(sp)
    e66c:	d811883a 	mov	r8,sp
    e670:	29000044 	addi	r4,r5,1
    e674:	003d6506 	br	dc0c <__alt_mem_Flash_flash_data+0xf400dc0c>
    e678:	10009a1e 	bne	r2,zero,e8e4 <___vfiprintf_internal_r+0x11ec>
    e67c:	01000044 	movi	r4,1
    e680:	000b883a 	mov	r5,zero
    e684:	d811883a 	mov	r8,sp
    e688:	003d6206 	br	dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    e68c:	d9002017 	ldw	r4,128(sp)
    e690:	d9402117 	ldw	r5,132(sp)
    e694:	d9801a04 	addi	r6,sp,104
    e698:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e69c:	103f401e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e6a0:	d9001b17 	ldw	r4,108(sp)
    e6a4:	d8801c17 	ldw	r2,112(sp)
    e6a8:	d811883a 	mov	r8,sp
    e6ac:	21000044 	addi	r4,r4,1
    e6b0:	003d7d06 	br	dca8 <__alt_mem_Flash_flash_data+0xf400dca8>
    e6b4:	05adc83a 	sub	r22,zero,r22
    e6b8:	b004c03a 	cmpne	r2,r22,zero
    e6bc:	035bc83a 	sub	r13,zero,r13
    e6c0:	689bc83a 	sub	r13,r13,r2
    e6c4:	03800b44 	movi	r14,45
    e6c8:	db801d85 	stb	r14,118(sp)
    e6cc:	4827883a 	mov	r19,r9
    e6d0:	00800044 	movi	r2,1
    e6d4:	b348b03a 	or	r4,r22,r13
    e6d8:	003ce806 	br	da7c <__alt_mem_Flash_flash_data+0xf400da7c>
    e6dc:	000b883a 	mov	r5,zero
    e6e0:	01000044 	movi	r4,1
    e6e4:	d811883a 	mov	r8,sp
    e6e8:	683d4826 	beq	r13,zero,dc0c <__alt_mem_Flash_flash_data+0xf400dc0c>
    e6ec:	00800084 	movi	r2,2
    e6f0:	d8c01d04 	addi	r3,sp,116
    e6f4:	d8c00015 	stw	r3,0(sp)
    e6f8:	d8800115 	stw	r2,4(sp)
    e6fc:	003d4006 	br	dc00 <__alt_mem_Flash_flash_data+0xf400dc00>
    e700:	00800084 	movi	r2,2
    e704:	003cda06 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e708:	a880100c 	andi	r2,r21,64
    e70c:	10004226 	beq	r2,zero,e818 <___vfiprintf_internal_r+0x1120>
    e710:	d8802217 	ldw	r2,136(sp)
    e714:	001b883a 	mov	r13,zero
    e718:	1580000b 	ldhu	r22,0(r2)
    e71c:	10800104 	addi	r2,r2,4
    e720:	d8802215 	stw	r2,136(sp)
    e724:	b009883a 	mov	r4,r22
    e728:	0005883a 	mov	r2,zero
    e72c:	003cd006 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e730:	80c00007 	ldb	r3,0(r16)
    e734:	8005883a 	mov	r2,r16
    e738:	003c4d06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e73c:	a880100c 	andi	r2,r21,64
    e740:	10004426 	beq	r2,zero,e854 <___vfiprintf_internal_r+0x115c>
    e744:	d8c02217 	ldw	r3,136(sp)
    e748:	001b883a 	mov	r13,zero
    e74c:	00800044 	movi	r2,1
    e750:	1d80000b 	ldhu	r22,0(r3)
    e754:	18c00104 	addi	r3,r3,4
    e758:	d8c02215 	stw	r3,136(sp)
    e75c:	b009883a 	mov	r4,r22
    e760:	003cc306 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e764:	a880040c 	andi	r2,r21,16
    e768:	1000091e 	bne	r2,zero,e790 <___vfiprintf_internal_r+0x1098>
    e76c:	aac0100c 	andi	r11,r21,64
    e770:	58000726 	beq	r11,zero,e790 <___vfiprintf_internal_r+0x1098>
    e774:	d8c02217 	ldw	r3,136(sp)
    e778:	d9002317 	ldw	r4,140(sp)
    e77c:	18800017 	ldw	r2,0(r3)
    e780:	18c00104 	addi	r3,r3,4
    e784:	d8c02215 	stw	r3,136(sp)
    e788:	1100000d 	sth	r4,0(r2)
    e78c:	003c0e06 	br	d7c8 <__alt_mem_Flash_flash_data+0xf400d7c8>
    e790:	d8c02217 	ldw	r3,136(sp)
    e794:	d9002317 	ldw	r4,140(sp)
    e798:	18800017 	ldw	r2,0(r3)
    e79c:	18c00104 	addi	r3,r3,4
    e7a0:	d8c02215 	stw	r3,136(sp)
    e7a4:	11000015 	stw	r4,0(r2)
    e7a8:	003c0706 	br	d7c8 <__alt_mem_Flash_flash_data+0xf400d7c8>
    e7ac:	a880100c 	andi	r2,r21,64
    e7b0:	10002126 	beq	r2,zero,e838 <___vfiprintf_internal_r+0x1140>
    e7b4:	1d80000f 	ldh	r22,0(r3)
    e7b8:	d8c02217 	ldw	r3,136(sp)
    e7bc:	b01bd7fa 	srai	r13,r22,31
    e7c0:	18c00104 	addi	r3,r3,4
    e7c4:	d8c02215 	stw	r3,136(sp)
    e7c8:	6805883a 	mov	r2,r13
    e7cc:	003dc406 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e7d0:	d9002017 	ldw	r4,128(sp)
    e7d4:	d9402117 	ldw	r5,132(sp)
    e7d8:	d9801a04 	addi	r6,sp,104
    e7dc:	da402b15 	stw	r9,172(sp)
    e7e0:	db402a15 	stw	r13,168(sp)
    e7e4:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e7e8:	da402b17 	ldw	r9,172(sp)
    e7ec:	db402a17 	ldw	r13,168(sp)
    e7f0:	103eeb1e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e7f4:	d9401b17 	ldw	r5,108(sp)
    e7f8:	d8801c17 	ldw	r2,112(sp)
    e7fc:	d811883a 	mov	r8,sp
    e800:	29000044 	addi	r4,r5,1
    e804:	003e8b06 	br	e234 <__alt_mem_Flash_flash_data+0xf400e234>
    e808:	9023883a 	mov	r17,r18
    e80c:	003d5a06 	br	dd78 <__alt_mem_Flash_flash_data+0xf400dd78>
    e810:	4827883a 	mov	r19,r9
    e814:	003e3506 	br	e0ec <__alt_mem_Flash_flash_data+0xf400e0ec>
    e818:	d8c02217 	ldw	r3,136(sp)
    e81c:	001b883a 	mov	r13,zero
    e820:	0005883a 	mov	r2,zero
    e824:	1d800017 	ldw	r22,0(r3)
    e828:	18c00104 	addi	r3,r3,4
    e82c:	d8c02215 	stw	r3,136(sp)
    e830:	b009883a 	mov	r4,r22
    e834:	003c8e06 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e838:	1d800017 	ldw	r22,0(r3)
    e83c:	d9002217 	ldw	r4,136(sp)
    e840:	b01bd7fa 	srai	r13,r22,31
    e844:	21000104 	addi	r4,r4,4
    e848:	d9002215 	stw	r4,136(sp)
    e84c:	6805883a 	mov	r2,r13
    e850:	003da306 	br	dee0 <__alt_mem_Flash_flash_data+0xf400dee0>
    e854:	d9002217 	ldw	r4,136(sp)
    e858:	001b883a 	mov	r13,zero
    e85c:	00800044 	movi	r2,1
    e860:	25800017 	ldw	r22,0(r4)
    e864:	21000104 	addi	r4,r4,4
    e868:	d9002215 	stw	r4,136(sp)
    e86c:	b009883a 	mov	r4,r22
    e870:	003c7f06 	br	da70 <__alt_mem_Flash_flash_data+0xf400da70>
    e874:	00c000b4 	movhi	r3,2
    e878:	18fff604 	addi	r3,r3,-40
    e87c:	d8c02415 	stw	r3,144(sp)
    e880:	003cff06 	br	dc80 <__alt_mem_Flash_flash_data+0xf400dc80>
    e884:	d8801c17 	ldw	r2,112(sp)
    e888:	dd402117 	ldw	r21,132(sp)
    e88c:	103ec526 	beq	r2,zero,e3a4 <__alt_mem_Flash_flash_data+0xf400e3a4>
    e890:	d9002017 	ldw	r4,128(sp)
    e894:	a80b883a 	mov	r5,r21
    e898:	d9801a04 	addi	r6,sp,104
    e89c:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e8a0:	003ec006 	br	e3a4 <__alt_mem_Flash_flash_data+0xf400e3a4>
    e8a4:	80800044 	addi	r2,r16,1
    e8a8:	ad400814 	ori	r21,r21,32
    e8ac:	80c00047 	ldb	r3,1(r16)
    e8b0:	003bef06 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e8b4:	04a5c83a 	sub	r18,zero,r18
    e8b8:	8005883a 	mov	r2,r16
    e8bc:	d8c02215 	stw	r3,136(sp)
    e8c0:	003d5306 	br	de10 <__alt_mem_Flash_flash_data+0xf400de10>
    e8c4:	da002a15 	stw	r8,168(sp)
    e8c8:	00031ec0 	call	31ec <strlen>
    e8cc:	1027883a 	mov	r19,r2
    e8d0:	db801d83 	ldbu	r14,118(sp)
    e8d4:	dd802215 	stw	r22,136(sp)
    e8d8:	0013883a 	mov	r9,zero
    e8dc:	da002a17 	ldw	r8,168(sp)
    e8e0:	003c7f06 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e8e4:	d9002017 	ldw	r4,128(sp)
    e8e8:	d9402117 	ldw	r5,132(sp)
    e8ec:	d9801a04 	addi	r6,sp,104
    e8f0:	da402b15 	stw	r9,172(sp)
    e8f4:	000d5e40 	call	d5e4 <__sprint_r.part.0>
    e8f8:	da402b17 	ldw	r9,172(sp)
    e8fc:	103ea81e 	bne	r2,zero,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e900:	d9401b17 	ldw	r5,108(sp)
    e904:	d8801c17 	ldw	r2,112(sp)
    e908:	d811883a 	mov	r8,sp
    e90c:	29000044 	addi	r4,r5,1
    e910:	003cc006 	br	dc14 <__alt_mem_Flash_flash_data+0xf400dc14>
    e914:	d9401b17 	ldw	r5,108(sp)
    e918:	010000b4 	movhi	r4,2
    e91c:	213ffa04 	addi	r4,r4,-24
    e920:	d9002415 	stw	r4,144(sp)
    e924:	29400044 	addi	r5,r5,1
    e928:	003c9f06 	br	dba8 <__alt_mem_Flash_flash_data+0xf400dba8>
    e92c:	00800184 	movi	r2,6
    e930:	1240012e 	bgeu	r2,r9,e938 <___vfiprintf_internal_r+0x1240>
    e934:	1013883a 	mov	r9,r2
    e938:	4827883a 	mov	r19,r9
    e93c:	4823883a 	mov	r17,r9
    e940:	48001116 	blt	r9,zero,e988 <___vfiprintf_internal_r+0x1290>
    e944:	050000b4 	movhi	r20,2
    e948:	dd802215 	stw	r22,136(sp)
    e94c:	a53f8a04 	addi	r20,r20,-472
    e950:	003db106 	br	e018 <__alt_mem_Flash_flash_data+0xf400e018>
    e954:	d9401b17 	ldw	r5,108(sp)
    e958:	010000b4 	movhi	r4,2
    e95c:	213ffa04 	addi	r4,r4,-24
    e960:	d9002415 	stw	r4,144(sp)
    e964:	29400044 	addi	r5,r5,1
    e968:	003cf906 	br	dd50 <__alt_mem_Flash_flash_data+0xf400dd50>
    e96c:	4827883a 	mov	r19,r9
    e970:	db801d83 	ldbu	r14,118(sp)
    e974:	dd802215 	stw	r22,136(sp)
    e978:	0013883a 	mov	r9,zero
    e97c:	003c5806 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    e980:	200d883a 	mov	r6,r4
    e984:	003ec706 	br	e4a4 <__alt_mem_Flash_flash_data+0xf400e4a4>
    e988:	0023883a 	mov	r17,zero
    e98c:	003fed06 	br	e944 <__alt_mem_Flash_flash_data+0xf400e944>
    e990:	d9002217 	ldw	r4,136(sp)
    e994:	22400017 	ldw	r9,0(r4)
    e998:	20c00104 	addi	r3,r4,4
    e99c:	d8c02215 	stw	r3,136(sp)
    e9a0:	483fc20e 	bge	r9,zero,e8ac <__alt_mem_Flash_flash_data+0xf400e8ac>
    e9a4:	027fffc4 	movi	r9,-1
    e9a8:	80c00047 	ldb	r3,1(r16)
    e9ac:	003bb006 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    e9b0:	8c80010e 	bge	r17,r18,e9b8 <___vfiprintf_internal_r+0x12c0>
    e9b4:	9023883a 	mov	r17,r18
    e9b8:	d8802317 	ldw	r2,140(sp)
    e9bc:	1445883a 	add	r2,r2,r17
    e9c0:	d8802315 	stw	r2,140(sp)
    e9c4:	003cef06 	br	dd84 <__alt_mem_Flash_flash_data+0xf400dd84>

0000e9c8 <__vfiprintf_internal>:
    e9c8:	2007883a 	mov	r3,r4
    e9cc:	010000b4 	movhi	r4,2
    e9d0:	21089604 	addi	r4,r4,8792
    e9d4:	21000017 	ldw	r4,0(r4)
    e9d8:	2805883a 	mov	r2,r5
    e9dc:	300f883a 	mov	r7,r6
    e9e0:	180b883a 	mov	r5,r3
    e9e4:	100d883a 	mov	r6,r2
    e9e8:	000d6f81 	jmpi	d6f8 <___vfiprintf_internal_r>

0000e9ec <__sbprintf>:
    e9ec:	2880030b 	ldhu	r2,12(r5)
    e9f0:	2ac01917 	ldw	r11,100(r5)
    e9f4:	2a80038b 	ldhu	r10,14(r5)
    e9f8:	2a400717 	ldw	r9,28(r5)
    e9fc:	2a000917 	ldw	r8,36(r5)
    ea00:	defee204 	addi	sp,sp,-1144
    ea04:	00c10004 	movi	r3,1024
    ea08:	dc011a15 	stw	r16,1128(sp)
    ea0c:	10bfff4c 	andi	r2,r2,65533
    ea10:	2821883a 	mov	r16,r5
    ea14:	d8cb883a 	add	r5,sp,r3
    ea18:	dc811c15 	stw	r18,1136(sp)
    ea1c:	dc411b15 	stw	r17,1132(sp)
    ea20:	dfc11d15 	stw	ra,1140(sp)
    ea24:	2025883a 	mov	r18,r4
    ea28:	d881030d 	sth	r2,1036(sp)
    ea2c:	dac11915 	stw	r11,1124(sp)
    ea30:	da81038d 	sth	r10,1038(sp)
    ea34:	da410715 	stw	r9,1052(sp)
    ea38:	da010915 	stw	r8,1060(sp)
    ea3c:	dec10015 	stw	sp,1024(sp)
    ea40:	dec10415 	stw	sp,1040(sp)
    ea44:	d8c10215 	stw	r3,1032(sp)
    ea48:	d8c10515 	stw	r3,1044(sp)
    ea4c:	d8010615 	stw	zero,1048(sp)
    ea50:	000d6f80 	call	d6f8 <___vfiprintf_internal_r>
    ea54:	1023883a 	mov	r17,r2
    ea58:	10000416 	blt	r2,zero,ea6c <__sbprintf+0x80>
    ea5c:	9009883a 	mov	r4,r18
    ea60:	d9410004 	addi	r5,sp,1024
    ea64:	0008ec80 	call	8ec8 <_fflush_r>
    ea68:	10000d1e 	bne	r2,zero,eaa0 <__sbprintf+0xb4>
    ea6c:	d8c1030b 	ldhu	r3,1036(sp)
    ea70:	18c0100c 	andi	r3,r3,64
    ea74:	18000326 	beq	r3,zero,ea84 <__sbprintf+0x98>
    ea78:	8080030b 	ldhu	r2,12(r16)
    ea7c:	10801014 	ori	r2,r2,64
    ea80:	8080030d 	sth	r2,12(r16)
    ea84:	8805883a 	mov	r2,r17
    ea88:	dfc11d17 	ldw	ra,1140(sp)
    ea8c:	dc811c17 	ldw	r18,1136(sp)
    ea90:	dc411b17 	ldw	r17,1132(sp)
    ea94:	dc011a17 	ldw	r16,1128(sp)
    ea98:	dec11e04 	addi	sp,sp,1144
    ea9c:	f800283a 	ret
    eaa0:	047fffc4 	movi	r17,-1
    eaa4:	003ff106 	br	ea6c <__alt_mem_Flash_flash_data+0xf400ea6c>

0000eaa8 <_write_r>:
    eaa8:	defffd04 	addi	sp,sp,-12
    eaac:	dc000015 	stw	r16,0(sp)
    eab0:	040000b4 	movhi	r16,2
    eab4:	dc400115 	stw	r17,4(sp)
    eab8:	8410b104 	addi	r16,r16,17092
    eabc:	2023883a 	mov	r17,r4
    eac0:	2809883a 	mov	r4,r5
    eac4:	300b883a 	mov	r5,r6
    eac8:	380d883a 	mov	r6,r7
    eacc:	dfc00215 	stw	ra,8(sp)
    ead0:	80000015 	stw	zero,0(r16)
    ead4:	0012ee40 	call	12ee4 <write>
    ead8:	00ffffc4 	movi	r3,-1
    eadc:	10c00526 	beq	r2,r3,eaf4 <_write_r+0x4c>
    eae0:	dfc00217 	ldw	ra,8(sp)
    eae4:	dc400117 	ldw	r17,4(sp)
    eae8:	dc000017 	ldw	r16,0(sp)
    eaec:	dec00304 	addi	sp,sp,12
    eaf0:	f800283a 	ret
    eaf4:	80c00017 	ldw	r3,0(r16)
    eaf8:	183ff926 	beq	r3,zero,eae0 <__alt_mem_Flash_flash_data+0xf400eae0>
    eafc:	88c00015 	stw	r3,0(r17)
    eb00:	003ff706 	br	eae0 <__alt_mem_Flash_flash_data+0xf400eae0>

0000eb04 <_close_r>:
    eb04:	defffd04 	addi	sp,sp,-12
    eb08:	dc000015 	stw	r16,0(sp)
    eb0c:	040000b4 	movhi	r16,2
    eb10:	dc400115 	stw	r17,4(sp)
    eb14:	8410b104 	addi	r16,r16,17092
    eb18:	2023883a 	mov	r17,r4
    eb1c:	2809883a 	mov	r4,r5
    eb20:	dfc00215 	stw	ra,8(sp)
    eb24:	80000015 	stw	zero,0(r16)
    eb28:	001266c0 	call	1266c <close>
    eb2c:	00ffffc4 	movi	r3,-1
    eb30:	10c00526 	beq	r2,r3,eb48 <_close_r+0x44>
    eb34:	dfc00217 	ldw	ra,8(sp)
    eb38:	dc400117 	ldw	r17,4(sp)
    eb3c:	dc000017 	ldw	r16,0(sp)
    eb40:	dec00304 	addi	sp,sp,12
    eb44:	f800283a 	ret
    eb48:	80c00017 	ldw	r3,0(r16)
    eb4c:	183ff926 	beq	r3,zero,eb34 <__alt_mem_Flash_flash_data+0xf400eb34>
    eb50:	88c00015 	stw	r3,0(r17)
    eb54:	003ff706 	br	eb34 <__alt_mem_Flash_flash_data+0xf400eb34>

0000eb58 <_calloc_r>:
    eb58:	298b383a 	mul	r5,r5,r6
    eb5c:	defffe04 	addi	sp,sp,-8
    eb60:	dc000015 	stw	r16,0(sp)
    eb64:	dfc00115 	stw	ra,4(sp)
    eb68:	0009fe80 	call	9fe8 <_malloc_r>
    eb6c:	1021883a 	mov	r16,r2
    eb70:	10002826 	beq	r2,zero,ec14 <_calloc_r+0xbc>
    eb74:	11bfff17 	ldw	r6,-4(r2)
    eb78:	00bfff04 	movi	r2,-4
    eb7c:	00c00904 	movi	r3,36
    eb80:	308c703a 	and	r6,r6,r2
    eb84:	308d883a 	add	r6,r6,r2
    eb88:	19801436 	bltu	r3,r6,ebdc <_calloc_r+0x84>
    eb8c:	008004c4 	movi	r2,19
    eb90:	11800936 	bltu	r2,r6,ebb8 <_calloc_r+0x60>
    eb94:	8005883a 	mov	r2,r16
    eb98:	10000015 	stw	zero,0(r2)
    eb9c:	10000115 	stw	zero,4(r2)
    eba0:	10000215 	stw	zero,8(r2)
    eba4:	8005883a 	mov	r2,r16
    eba8:	dfc00117 	ldw	ra,4(sp)
    ebac:	dc000017 	ldw	r16,0(sp)
    ebb0:	dec00204 	addi	sp,sp,8
    ebb4:	f800283a 	ret
    ebb8:	80000015 	stw	zero,0(r16)
    ebbc:	80000115 	stw	zero,4(r16)
    ebc0:	008006c4 	movi	r2,27
    ebc4:	11800d2e 	bgeu	r2,r6,ebfc <_calloc_r+0xa4>
    ebc8:	80000215 	stw	zero,8(r16)
    ebcc:	80000315 	stw	zero,12(r16)
    ebd0:	30c00c26 	beq	r6,r3,ec04 <_calloc_r+0xac>
    ebd4:	80800404 	addi	r2,r16,16
    ebd8:	003fef06 	br	eb98 <__alt_mem_Flash_flash_data+0xf400eb98>
    ebdc:	8009883a 	mov	r4,r16
    ebe0:	000b883a 	mov	r5,zero
    ebe4:	000ab0c0 	call	ab0c <memset>
    ebe8:	8005883a 	mov	r2,r16
    ebec:	dfc00117 	ldw	ra,4(sp)
    ebf0:	dc000017 	ldw	r16,0(sp)
    ebf4:	dec00204 	addi	sp,sp,8
    ebf8:	f800283a 	ret
    ebfc:	80800204 	addi	r2,r16,8
    ec00:	003fe506 	br	eb98 <__alt_mem_Flash_flash_data+0xf400eb98>
    ec04:	80000415 	stw	zero,16(r16)
    ec08:	80800604 	addi	r2,r16,24
    ec0c:	80000515 	stw	zero,20(r16)
    ec10:	003fe106 	br	eb98 <__alt_mem_Flash_flash_data+0xf400eb98>
    ec14:	0005883a 	mov	r2,zero
    ec18:	003fe306 	br	eba8 <__alt_mem_Flash_flash_data+0xf400eba8>

0000ec1c <_fclose_r>:
    ec1c:	28003926 	beq	r5,zero,ed04 <_fclose_r+0xe8>
    ec20:	defffc04 	addi	sp,sp,-16
    ec24:	dc400115 	stw	r17,4(sp)
    ec28:	dc000015 	stw	r16,0(sp)
    ec2c:	dfc00315 	stw	ra,12(sp)
    ec30:	dc800215 	stw	r18,8(sp)
    ec34:	2023883a 	mov	r17,r4
    ec38:	2821883a 	mov	r16,r5
    ec3c:	20000226 	beq	r4,zero,ec48 <_fclose_r+0x2c>
    ec40:	20800e17 	ldw	r2,56(r4)
    ec44:	10002726 	beq	r2,zero,ece4 <_fclose_r+0xc8>
    ec48:	8080030f 	ldh	r2,12(r16)
    ec4c:	1000071e 	bne	r2,zero,ec6c <_fclose_r+0x50>
    ec50:	0005883a 	mov	r2,zero
    ec54:	dfc00317 	ldw	ra,12(sp)
    ec58:	dc800217 	ldw	r18,8(sp)
    ec5c:	dc400117 	ldw	r17,4(sp)
    ec60:	dc000017 	ldw	r16,0(sp)
    ec64:	dec00404 	addi	sp,sp,16
    ec68:	f800283a 	ret
    ec6c:	8809883a 	mov	r4,r17
    ec70:	800b883a 	mov	r5,r16
    ec74:	0008cc00 	call	8cc0 <__sflush_r>
    ec78:	1025883a 	mov	r18,r2
    ec7c:	80800b17 	ldw	r2,44(r16)
    ec80:	10000426 	beq	r2,zero,ec94 <_fclose_r+0x78>
    ec84:	81400717 	ldw	r5,28(r16)
    ec88:	8809883a 	mov	r4,r17
    ec8c:	103ee83a 	callr	r2
    ec90:	10001616 	blt	r2,zero,ecec <_fclose_r+0xd0>
    ec94:	8080030b 	ldhu	r2,12(r16)
    ec98:	1080200c 	andi	r2,r2,128
    ec9c:	1000151e 	bne	r2,zero,ecf4 <_fclose_r+0xd8>
    eca0:	81400c17 	ldw	r5,48(r16)
    eca4:	28000526 	beq	r5,zero,ecbc <_fclose_r+0xa0>
    eca8:	80801004 	addi	r2,r16,64
    ecac:	28800226 	beq	r5,r2,ecb8 <_fclose_r+0x9c>
    ecb0:	8809883a 	mov	r4,r17
    ecb4:	00094180 	call	9418 <_free_r>
    ecb8:	80000c15 	stw	zero,48(r16)
    ecbc:	81401117 	ldw	r5,68(r16)
    ecc0:	28000326 	beq	r5,zero,ecd0 <_fclose_r+0xb4>
    ecc4:	8809883a 	mov	r4,r17
    ecc8:	00094180 	call	9418 <_free_r>
    eccc:	80001115 	stw	zero,68(r16)
    ecd0:	00092b40 	call	92b4 <__sfp_lock_acquire>
    ecd4:	8000030d 	sth	zero,12(r16)
    ecd8:	00092b80 	call	92b8 <__sfp_lock_release>
    ecdc:	9005883a 	mov	r2,r18
    ece0:	003fdc06 	br	ec54 <__alt_mem_Flash_flash_data+0xf400ec54>
    ece4:	00092a40 	call	92a4 <__sinit>
    ece8:	003fd706 	br	ec48 <__alt_mem_Flash_flash_data+0xf400ec48>
    ecec:	04bfffc4 	movi	r18,-1
    ecf0:	003fe806 	br	ec94 <__alt_mem_Flash_flash_data+0xf400ec94>
    ecf4:	81400417 	ldw	r5,16(r16)
    ecf8:	8809883a 	mov	r4,r17
    ecfc:	00094180 	call	9418 <_free_r>
    ed00:	003fe706 	br	eca0 <__alt_mem_Flash_flash_data+0xf400eca0>
    ed04:	0005883a 	mov	r2,zero
    ed08:	f800283a 	ret

0000ed0c <fclose>:
    ed0c:	008000b4 	movhi	r2,2
    ed10:	10889604 	addi	r2,r2,8792
    ed14:	200b883a 	mov	r5,r4
    ed18:	11000017 	ldw	r4,0(r2)
    ed1c:	000ec1c1 	jmpi	ec1c <_fclose_r>

0000ed20 <_fputwc_r>:
    ed20:	3080030b 	ldhu	r2,12(r6)
    ed24:	defff804 	addi	sp,sp,-32
    ed28:	dcc00415 	stw	r19,16(sp)
    ed2c:	dc800315 	stw	r18,12(sp)
    ed30:	dc000115 	stw	r16,4(sp)
    ed34:	dfc00715 	stw	ra,28(sp)
    ed38:	dd400615 	stw	r21,24(sp)
    ed3c:	dd000515 	stw	r20,20(sp)
    ed40:	dc400215 	stw	r17,8(sp)
    ed44:	10c8000c 	andi	r3,r2,8192
    ed48:	3021883a 	mov	r16,r6
    ed4c:	2027883a 	mov	r19,r4
    ed50:	2825883a 	mov	r18,r5
    ed54:	1800051e 	bne	r3,zero,ed6c <_fputwc_r+0x4c>
    ed58:	30c01917 	ldw	r3,100(r6)
    ed5c:	10880014 	ori	r2,r2,8192
    ed60:	3080030d 	sth	r2,12(r6)
    ed64:	18880014 	ori	r2,r3,8192
    ed68:	30801915 	stw	r2,100(r6)
    ed6c:	0009dd80 	call	9dd8 <__locale_mb_cur_max>
    ed70:	00c00044 	movi	r3,1
    ed74:	10c03e26 	beq	r2,r3,ee70 <_fputwc_r+0x150>
    ed78:	9809883a 	mov	r4,r19
    ed7c:	d80b883a 	mov	r5,sp
    ed80:	900d883a 	mov	r6,r18
    ed84:	81c01704 	addi	r7,r16,92
    ed88:	000f1b80 	call	f1b8 <_wcrtomb_r>
    ed8c:	1029883a 	mov	r20,r2
    ed90:	00bfffc4 	movi	r2,-1
    ed94:	a0802026 	beq	r20,r2,ee18 <_fputwc_r+0xf8>
    ed98:	d9400003 	ldbu	r5,0(sp)
    ed9c:	a0001c26 	beq	r20,zero,ee10 <_fputwc_r+0xf0>
    eda0:	0023883a 	mov	r17,zero
    eda4:	05400284 	movi	r21,10
    eda8:	00000906 	br	edd0 <_fputwc_r+0xb0>
    edac:	80800017 	ldw	r2,0(r16)
    edb0:	11400005 	stb	r5,0(r2)
    edb4:	80c00017 	ldw	r3,0(r16)
    edb8:	18c00044 	addi	r3,r3,1
    edbc:	80c00015 	stw	r3,0(r16)
    edc0:	8c400044 	addi	r17,r17,1
    edc4:	dc45883a 	add	r2,sp,r17
    edc8:	8d00112e 	bgeu	r17,r20,ee10 <_fputwc_r+0xf0>
    edcc:	11400003 	ldbu	r5,0(r2)
    edd0:	80c00217 	ldw	r3,8(r16)
    edd4:	18ffffc4 	addi	r3,r3,-1
    edd8:	80c00215 	stw	r3,8(r16)
    eddc:	183ff30e 	bge	r3,zero,edac <__alt_mem_Flash_flash_data+0xf400edac>
    ede0:	80800617 	ldw	r2,24(r16)
    ede4:	18801916 	blt	r3,r2,ee4c <_fputwc_r+0x12c>
    ede8:	80800017 	ldw	r2,0(r16)
    edec:	11400005 	stb	r5,0(r2)
    edf0:	80800017 	ldw	r2,0(r16)
    edf4:	10c00003 	ldbu	r3,0(r2)
    edf8:	10800044 	addi	r2,r2,1
    edfc:	1d402326 	beq	r3,r21,ee8c <_fputwc_r+0x16c>
    ee00:	80800015 	stw	r2,0(r16)
    ee04:	8c400044 	addi	r17,r17,1
    ee08:	dc45883a 	add	r2,sp,r17
    ee0c:	8d3fef36 	bltu	r17,r20,edcc <__alt_mem_Flash_flash_data+0xf400edcc>
    ee10:	9005883a 	mov	r2,r18
    ee14:	00000406 	br	ee28 <_fputwc_r+0x108>
    ee18:	80c0030b 	ldhu	r3,12(r16)
    ee1c:	a005883a 	mov	r2,r20
    ee20:	18c01014 	ori	r3,r3,64
    ee24:	80c0030d 	sth	r3,12(r16)
    ee28:	dfc00717 	ldw	ra,28(sp)
    ee2c:	dd400617 	ldw	r21,24(sp)
    ee30:	dd000517 	ldw	r20,20(sp)
    ee34:	dcc00417 	ldw	r19,16(sp)
    ee38:	dc800317 	ldw	r18,12(sp)
    ee3c:	dc400217 	ldw	r17,8(sp)
    ee40:	dc000117 	ldw	r16,4(sp)
    ee44:	dec00804 	addi	sp,sp,32
    ee48:	f800283a 	ret
    ee4c:	9809883a 	mov	r4,r19
    ee50:	29403fcc 	andi	r5,r5,255
    ee54:	800d883a 	mov	r6,r16
    ee58:	000f0640 	call	f064 <__swbuf_r>
    ee5c:	10bfffe0 	cmpeqi	r2,r2,-1
    ee60:	10803fcc 	andi	r2,r2,255
    ee64:	103fd626 	beq	r2,zero,edc0 <__alt_mem_Flash_flash_data+0xf400edc0>
    ee68:	00bfffc4 	movi	r2,-1
    ee6c:	003fee06 	br	ee28 <__alt_mem_Flash_flash_data+0xf400ee28>
    ee70:	90ffffc4 	addi	r3,r18,-1
    ee74:	01003f84 	movi	r4,254
    ee78:	20ffbf36 	bltu	r4,r3,ed78 <__alt_mem_Flash_flash_data+0xf400ed78>
    ee7c:	900b883a 	mov	r5,r18
    ee80:	dc800005 	stb	r18,0(sp)
    ee84:	1029883a 	mov	r20,r2
    ee88:	003fc506 	br	eda0 <__alt_mem_Flash_flash_data+0xf400eda0>
    ee8c:	9809883a 	mov	r4,r19
    ee90:	a80b883a 	mov	r5,r21
    ee94:	800d883a 	mov	r6,r16
    ee98:	000f0640 	call	f064 <__swbuf_r>
    ee9c:	10bfffe0 	cmpeqi	r2,r2,-1
    eea0:	003fef06 	br	ee60 <__alt_mem_Flash_flash_data+0xf400ee60>

0000eea4 <fputwc>:
    eea4:	008000b4 	movhi	r2,2
    eea8:	defffc04 	addi	sp,sp,-16
    eeac:	10889604 	addi	r2,r2,8792
    eeb0:	dc000115 	stw	r16,4(sp)
    eeb4:	14000017 	ldw	r16,0(r2)
    eeb8:	dc400215 	stw	r17,8(sp)
    eebc:	dfc00315 	stw	ra,12(sp)
    eec0:	2023883a 	mov	r17,r4
    eec4:	280d883a 	mov	r6,r5
    eec8:	80000626 	beq	r16,zero,eee4 <fputwc+0x40>
    eecc:	80800e17 	ldw	r2,56(r16)
    eed0:	1000041e 	bne	r2,zero,eee4 <fputwc+0x40>
    eed4:	8009883a 	mov	r4,r16
    eed8:	d9400015 	stw	r5,0(sp)
    eedc:	00092a40 	call	92a4 <__sinit>
    eee0:	d9800017 	ldw	r6,0(sp)
    eee4:	8009883a 	mov	r4,r16
    eee8:	880b883a 	mov	r5,r17
    eeec:	dfc00317 	ldw	ra,12(sp)
    eef0:	dc400217 	ldw	r17,8(sp)
    eef4:	dc000117 	ldw	r16,4(sp)
    eef8:	dec00404 	addi	sp,sp,16
    eefc:	000ed201 	jmpi	ed20 <_fputwc_r>

0000ef00 <_fstat_r>:
    ef00:	defffd04 	addi	sp,sp,-12
    ef04:	dc000015 	stw	r16,0(sp)
    ef08:	040000b4 	movhi	r16,2
    ef0c:	dc400115 	stw	r17,4(sp)
    ef10:	8410b104 	addi	r16,r16,17092
    ef14:	2023883a 	mov	r17,r4
    ef18:	2809883a 	mov	r4,r5
    ef1c:	300b883a 	mov	r5,r6
    ef20:	dfc00215 	stw	ra,8(sp)
    ef24:	80000015 	stw	zero,0(r16)
    ef28:	00127b80 	call	127b8 <fstat>
    ef2c:	00ffffc4 	movi	r3,-1
    ef30:	10c00526 	beq	r2,r3,ef48 <_fstat_r+0x48>
    ef34:	dfc00217 	ldw	ra,8(sp)
    ef38:	dc400117 	ldw	r17,4(sp)
    ef3c:	dc000017 	ldw	r16,0(sp)
    ef40:	dec00304 	addi	sp,sp,12
    ef44:	f800283a 	ret
    ef48:	80c00017 	ldw	r3,0(r16)
    ef4c:	183ff926 	beq	r3,zero,ef34 <__alt_mem_Flash_flash_data+0xf400ef34>
    ef50:	88c00015 	stw	r3,0(r17)
    ef54:	003ff706 	br	ef34 <__alt_mem_Flash_flash_data+0xf400ef34>

0000ef58 <_isatty_r>:
    ef58:	defffd04 	addi	sp,sp,-12
    ef5c:	dc000015 	stw	r16,0(sp)
    ef60:	040000b4 	movhi	r16,2
    ef64:	dc400115 	stw	r17,4(sp)
    ef68:	8410b104 	addi	r16,r16,17092
    ef6c:	2023883a 	mov	r17,r4
    ef70:	2809883a 	mov	r4,r5
    ef74:	dfc00215 	stw	ra,8(sp)
    ef78:	80000015 	stw	zero,0(r16)
    ef7c:	00128b80 	call	128b8 <isatty>
    ef80:	00ffffc4 	movi	r3,-1
    ef84:	10c00526 	beq	r2,r3,ef9c <_isatty_r+0x44>
    ef88:	dfc00217 	ldw	ra,8(sp)
    ef8c:	dc400117 	ldw	r17,4(sp)
    ef90:	dc000017 	ldw	r16,0(sp)
    ef94:	dec00304 	addi	sp,sp,12
    ef98:	f800283a 	ret
    ef9c:	80c00017 	ldw	r3,0(r16)
    efa0:	183ff926 	beq	r3,zero,ef88 <__alt_mem_Flash_flash_data+0xf400ef88>
    efa4:	88c00015 	stw	r3,0(r17)
    efa8:	003ff706 	br	ef88 <__alt_mem_Flash_flash_data+0xf400ef88>

0000efac <_lseek_r>:
    efac:	defffd04 	addi	sp,sp,-12
    efb0:	dc000015 	stw	r16,0(sp)
    efb4:	040000b4 	movhi	r16,2
    efb8:	dc400115 	stw	r17,4(sp)
    efbc:	8410b104 	addi	r16,r16,17092
    efc0:	2023883a 	mov	r17,r4
    efc4:	2809883a 	mov	r4,r5
    efc8:	300b883a 	mov	r5,r6
    efcc:	380d883a 	mov	r6,r7
    efd0:	dfc00215 	stw	ra,8(sp)
    efd4:	80000015 	stw	zero,0(r16)
    efd8:	0012a900 	call	12a90 <lseek>
    efdc:	00ffffc4 	movi	r3,-1
    efe0:	10c00526 	beq	r2,r3,eff8 <_lseek_r+0x4c>
    efe4:	dfc00217 	ldw	ra,8(sp)
    efe8:	dc400117 	ldw	r17,4(sp)
    efec:	dc000017 	ldw	r16,0(sp)
    eff0:	dec00304 	addi	sp,sp,12
    eff4:	f800283a 	ret
    eff8:	80c00017 	ldw	r3,0(r16)
    effc:	183ff926 	beq	r3,zero,efe4 <__alt_mem_Flash_flash_data+0xf400efe4>
    f000:	88c00015 	stw	r3,0(r17)
    f004:	003ff706 	br	efe4 <__alt_mem_Flash_flash_data+0xf400efe4>

0000f008 <_read_r>:
    f008:	defffd04 	addi	sp,sp,-12
    f00c:	dc000015 	stw	r16,0(sp)
    f010:	040000b4 	movhi	r16,2
    f014:	dc400115 	stw	r17,4(sp)
    f018:	8410b104 	addi	r16,r16,17092
    f01c:	2023883a 	mov	r17,r4
    f020:	2809883a 	mov	r4,r5
    f024:	300b883a 	mov	r5,r6
    f028:	380d883a 	mov	r6,r7
    f02c:	dfc00215 	stw	ra,8(sp)
    f030:	80000015 	stw	zero,0(r16)
    f034:	0012c880 	call	12c88 <read>
    f038:	00ffffc4 	movi	r3,-1
    f03c:	10c00526 	beq	r2,r3,f054 <_read_r+0x4c>
    f040:	dfc00217 	ldw	ra,8(sp)
    f044:	dc400117 	ldw	r17,4(sp)
    f048:	dc000017 	ldw	r16,0(sp)
    f04c:	dec00304 	addi	sp,sp,12
    f050:	f800283a 	ret
    f054:	80c00017 	ldw	r3,0(r16)
    f058:	183ff926 	beq	r3,zero,f040 <__alt_mem_Flash_flash_data+0xf400f040>
    f05c:	88c00015 	stw	r3,0(r17)
    f060:	003ff706 	br	f040 <__alt_mem_Flash_flash_data+0xf400f040>

0000f064 <__swbuf_r>:
    f064:	defffc04 	addi	sp,sp,-16
    f068:	dc800215 	stw	r18,8(sp)
    f06c:	dc400115 	stw	r17,4(sp)
    f070:	dc000015 	stw	r16,0(sp)
    f074:	dfc00315 	stw	ra,12(sp)
    f078:	2025883a 	mov	r18,r4
    f07c:	2823883a 	mov	r17,r5
    f080:	3021883a 	mov	r16,r6
    f084:	20000226 	beq	r4,zero,f090 <__swbuf_r+0x2c>
    f088:	20800e17 	ldw	r2,56(r4)
    f08c:	10004126 	beq	r2,zero,f194 <__swbuf_r+0x130>
    f090:	80c00617 	ldw	r3,24(r16)
    f094:	8180030b 	ldhu	r6,12(r16)
    f098:	80c00215 	stw	r3,8(r16)
    f09c:	30c0020c 	andi	r3,r6,8
    f0a0:	18003526 	beq	r3,zero,f178 <__swbuf_r+0x114>
    f0a4:	80c00417 	ldw	r3,16(r16)
    f0a8:	18003326 	beq	r3,zero,f178 <__swbuf_r+0x114>
    f0ac:	3088000c 	andi	r2,r6,8192
    f0b0:	8c403fcc 	andi	r17,r17,255
    f0b4:	10001726 	beq	r2,zero,f114 <__swbuf_r+0xb0>
    f0b8:	80800017 	ldw	r2,0(r16)
    f0bc:	81000517 	ldw	r4,20(r16)
    f0c0:	10c7c83a 	sub	r3,r2,r3
    f0c4:	19001d0e 	bge	r3,r4,f13c <__swbuf_r+0xd8>
    f0c8:	18c00044 	addi	r3,r3,1
    f0cc:	81400217 	ldw	r5,8(r16)
    f0d0:	11000044 	addi	r4,r2,1
    f0d4:	81000015 	stw	r4,0(r16)
    f0d8:	297fffc4 	addi	r5,r5,-1
    f0dc:	81400215 	stw	r5,8(r16)
    f0e0:	14400005 	stb	r17,0(r2)
    f0e4:	80800517 	ldw	r2,20(r16)
    f0e8:	10c01d26 	beq	r2,r3,f160 <__swbuf_r+0xfc>
    f0ec:	8080030b 	ldhu	r2,12(r16)
    f0f0:	1080004c 	andi	r2,r2,1
    f0f4:	1000181e 	bne	r2,zero,f158 <__swbuf_r+0xf4>
    f0f8:	8805883a 	mov	r2,r17
    f0fc:	dfc00317 	ldw	ra,12(sp)
    f100:	dc800217 	ldw	r18,8(sp)
    f104:	dc400117 	ldw	r17,4(sp)
    f108:	dc000017 	ldw	r16,0(sp)
    f10c:	dec00404 	addi	sp,sp,16
    f110:	f800283a 	ret
    f114:	81001917 	ldw	r4,100(r16)
    f118:	00b7ffc4 	movi	r2,-8193
    f11c:	31880014 	ori	r6,r6,8192
    f120:	2084703a 	and	r2,r4,r2
    f124:	80801915 	stw	r2,100(r16)
    f128:	80800017 	ldw	r2,0(r16)
    f12c:	81000517 	ldw	r4,20(r16)
    f130:	8180030d 	sth	r6,12(r16)
    f134:	10c7c83a 	sub	r3,r2,r3
    f138:	193fe316 	blt	r3,r4,f0c8 <__alt_mem_Flash_flash_data+0xf400f0c8>
    f13c:	9009883a 	mov	r4,r18
    f140:	800b883a 	mov	r5,r16
    f144:	0008ec80 	call	8ec8 <_fflush_r>
    f148:	1000091e 	bne	r2,zero,f170 <__swbuf_r+0x10c>
    f14c:	80800017 	ldw	r2,0(r16)
    f150:	00c00044 	movi	r3,1
    f154:	003fdd06 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f158:	00800284 	movi	r2,10
    f15c:	88bfe61e 	bne	r17,r2,f0f8 <__alt_mem_Flash_flash_data+0xf400f0f8>
    f160:	9009883a 	mov	r4,r18
    f164:	800b883a 	mov	r5,r16
    f168:	0008ec80 	call	8ec8 <_fflush_r>
    f16c:	103fe226 	beq	r2,zero,f0f8 <__alt_mem_Flash_flash_data+0xf400f0f8>
    f170:	00bfffc4 	movi	r2,-1
    f174:	003fe106 	br	f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f178:	9009883a 	mov	r4,r18
    f17c:	800b883a 	mov	r5,r16
    f180:	00072440 	call	7244 <__swsetup_r>
    f184:	103ffa1e 	bne	r2,zero,f170 <__alt_mem_Flash_flash_data+0xf400f170>
    f188:	8180030b 	ldhu	r6,12(r16)
    f18c:	80c00417 	ldw	r3,16(r16)
    f190:	003fc606 	br	f0ac <__alt_mem_Flash_flash_data+0xf400f0ac>
    f194:	00092a40 	call	92a4 <__sinit>
    f198:	003fbd06 	br	f090 <__alt_mem_Flash_flash_data+0xf400f090>

0000f19c <__swbuf>:
    f19c:	00c000b4 	movhi	r3,2
    f1a0:	18c89604 	addi	r3,r3,8792
    f1a4:	2005883a 	mov	r2,r4
    f1a8:	19000017 	ldw	r4,0(r3)
    f1ac:	280d883a 	mov	r6,r5
    f1b0:	100b883a 	mov	r5,r2
    f1b4:	000f0641 	jmpi	f064 <__swbuf_r>

0000f1b8 <_wcrtomb_r>:
    f1b8:	defff604 	addi	sp,sp,-40
    f1bc:	008000b4 	movhi	r2,2
    f1c0:	dc800815 	stw	r18,32(sp)
    f1c4:	dc400715 	stw	r17,28(sp)
    f1c8:	dc000615 	stw	r16,24(sp)
    f1cc:	10889a04 	addi	r2,r2,8808
    f1d0:	dfc00915 	stw	ra,36(sp)
    f1d4:	2021883a 	mov	r16,r4
    f1d8:	3823883a 	mov	r17,r7
    f1dc:	14800017 	ldw	r18,0(r2)
    f1e0:	28001426 	beq	r5,zero,f234 <_wcrtomb_r+0x7c>
    f1e4:	d9400415 	stw	r5,16(sp)
    f1e8:	d9800515 	stw	r6,20(sp)
    f1ec:	0009dcc0 	call	9dcc <__locale_charset>
    f1f0:	d9400417 	ldw	r5,16(sp)
    f1f4:	d9800517 	ldw	r6,20(sp)
    f1f8:	8009883a 	mov	r4,r16
    f1fc:	dc400015 	stw	r17,0(sp)
    f200:	100f883a 	mov	r7,r2
    f204:	903ee83a 	callr	r18
    f208:	00ffffc4 	movi	r3,-1
    f20c:	10c0031e 	bne	r2,r3,f21c <_wcrtomb_r+0x64>
    f210:	88000015 	stw	zero,0(r17)
    f214:	00c02284 	movi	r3,138
    f218:	80c00015 	stw	r3,0(r16)
    f21c:	dfc00917 	ldw	ra,36(sp)
    f220:	dc800817 	ldw	r18,32(sp)
    f224:	dc400717 	ldw	r17,28(sp)
    f228:	dc000617 	ldw	r16,24(sp)
    f22c:	dec00a04 	addi	sp,sp,40
    f230:	f800283a 	ret
    f234:	0009dcc0 	call	9dcc <__locale_charset>
    f238:	8009883a 	mov	r4,r16
    f23c:	dc400015 	stw	r17,0(sp)
    f240:	d9400104 	addi	r5,sp,4
    f244:	000d883a 	mov	r6,zero
    f248:	100f883a 	mov	r7,r2
    f24c:	903ee83a 	callr	r18
    f250:	003fed06 	br	f208 <__alt_mem_Flash_flash_data+0xf400f208>

0000f254 <wcrtomb>:
    f254:	defff604 	addi	sp,sp,-40
    f258:	008000b4 	movhi	r2,2
    f25c:	dc800615 	stw	r18,24(sp)
    f260:	dc400515 	stw	r17,20(sp)
    f264:	dc000415 	stw	r16,16(sp)
    f268:	10889604 	addi	r2,r2,8792
    f26c:	dfc00915 	stw	ra,36(sp)
    f270:	dd000815 	stw	r20,32(sp)
    f274:	dcc00715 	stw	r19,28(sp)
    f278:	2021883a 	mov	r16,r4
    f27c:	3025883a 	mov	r18,r6
    f280:	14400017 	ldw	r17,0(r2)
    f284:	20001826 	beq	r4,zero,f2e8 <wcrtomb+0x94>
    f288:	008000b4 	movhi	r2,2
    f28c:	10889a04 	addi	r2,r2,8808
    f290:	15000017 	ldw	r20,0(r2)
    f294:	2827883a 	mov	r19,r5
    f298:	0009dcc0 	call	9dcc <__locale_charset>
    f29c:	8809883a 	mov	r4,r17
    f2a0:	dc800015 	stw	r18,0(sp)
    f2a4:	800b883a 	mov	r5,r16
    f2a8:	980d883a 	mov	r6,r19
    f2ac:	100f883a 	mov	r7,r2
    f2b0:	a03ee83a 	callr	r20
    f2b4:	00ffffc4 	movi	r3,-1
    f2b8:	10c0031e 	bne	r2,r3,f2c8 <wcrtomb+0x74>
    f2bc:	90000015 	stw	zero,0(r18)
    f2c0:	00c02284 	movi	r3,138
    f2c4:	88c00015 	stw	r3,0(r17)
    f2c8:	dfc00917 	ldw	ra,36(sp)
    f2cc:	dd000817 	ldw	r20,32(sp)
    f2d0:	dcc00717 	ldw	r19,28(sp)
    f2d4:	dc800617 	ldw	r18,24(sp)
    f2d8:	dc400517 	ldw	r17,20(sp)
    f2dc:	dc000417 	ldw	r16,16(sp)
    f2e0:	dec00a04 	addi	sp,sp,40
    f2e4:	f800283a 	ret
    f2e8:	008000b4 	movhi	r2,2
    f2ec:	10889a04 	addi	r2,r2,8808
    f2f0:	14000017 	ldw	r16,0(r2)
    f2f4:	0009dcc0 	call	9dcc <__locale_charset>
    f2f8:	8809883a 	mov	r4,r17
    f2fc:	dc800015 	stw	r18,0(sp)
    f300:	d9400104 	addi	r5,sp,4
    f304:	000d883a 	mov	r6,zero
    f308:	100f883a 	mov	r7,r2
    f30c:	803ee83a 	callr	r16
    f310:	003fe806 	br	f2b4 <__alt_mem_Flash_flash_data+0xf400f2b4>

0000f314 <__ascii_wctomb>:
    f314:	28000526 	beq	r5,zero,f32c <__ascii_wctomb+0x18>
    f318:	00803fc4 	movi	r2,255
    f31c:	11800536 	bltu	r2,r6,f334 <__ascii_wctomb+0x20>
    f320:	29800005 	stb	r6,0(r5)
    f324:	00800044 	movi	r2,1
    f328:	f800283a 	ret
    f32c:	0005883a 	mov	r2,zero
    f330:	f800283a 	ret
    f334:	00802284 	movi	r2,138
    f338:	20800015 	stw	r2,0(r4)
    f33c:	00bfffc4 	movi	r2,-1
    f340:	f800283a 	ret

0000f344 <_wctomb_r>:
    f344:	008000b4 	movhi	r2,2
    f348:	defff904 	addi	sp,sp,-28
    f34c:	10889a04 	addi	r2,r2,8808
    f350:	dfc00615 	stw	ra,24(sp)
    f354:	dc400515 	stw	r17,20(sp)
    f358:	dc000415 	stw	r16,16(sp)
    f35c:	3823883a 	mov	r17,r7
    f360:	14000017 	ldw	r16,0(r2)
    f364:	d9000115 	stw	r4,4(sp)
    f368:	d9400215 	stw	r5,8(sp)
    f36c:	d9800315 	stw	r6,12(sp)
    f370:	0009dcc0 	call	9dcc <__locale_charset>
    f374:	d9000117 	ldw	r4,4(sp)
    f378:	d9400217 	ldw	r5,8(sp)
    f37c:	d9800317 	ldw	r6,12(sp)
    f380:	dc400015 	stw	r17,0(sp)
    f384:	100f883a 	mov	r7,r2
    f388:	803ee83a 	callr	r16
    f38c:	dfc00617 	ldw	ra,24(sp)
    f390:	dc400517 	ldw	r17,20(sp)
    f394:	dc000417 	ldw	r16,16(sp)
    f398:	dec00704 	addi	sp,sp,28
    f39c:	f800283a 	ret

0000f3a0 <__udivdi3>:
    f3a0:	defff504 	addi	sp,sp,-44
    f3a4:	dcc00415 	stw	r19,16(sp)
    f3a8:	dc000115 	stw	r16,4(sp)
    f3ac:	dfc00a15 	stw	ra,40(sp)
    f3b0:	df000915 	stw	fp,36(sp)
    f3b4:	ddc00815 	stw	r23,32(sp)
    f3b8:	dd800715 	stw	r22,28(sp)
    f3bc:	dd400615 	stw	r21,24(sp)
    f3c0:	dd000515 	stw	r20,20(sp)
    f3c4:	dc800315 	stw	r18,12(sp)
    f3c8:	dc400215 	stw	r17,8(sp)
    f3cc:	2027883a 	mov	r19,r4
    f3d0:	2821883a 	mov	r16,r5
    f3d4:	3800421e 	bne	r7,zero,f4e0 <__udivdi3+0x140>
    f3d8:	3025883a 	mov	r18,r6
    f3dc:	2023883a 	mov	r17,r4
    f3e0:	2980542e 	bgeu	r5,r6,f534 <__udivdi3+0x194>
    f3e4:	00bfffd4 	movui	r2,65535
    f3e8:	282d883a 	mov	r22,r5
    f3ec:	1180a836 	bltu	r2,r6,f690 <__udivdi3+0x2f0>
    f3f0:	00803fc4 	movi	r2,255
    f3f4:	1181422e 	bgeu	r2,r6,f900 <__udivdi3+0x560>
    f3f8:	00800204 	movi	r2,8
    f3fc:	1007883a 	mov	r3,r2
    f400:	3084d83a 	srl	r2,r6,r2
    f404:	010000b4 	movhi	r4,2
    f408:	213ffe04 	addi	r4,r4,-8
    f40c:	2085883a 	add	r2,r4,r2
    f410:	10800003 	ldbu	r2,0(r2)
    f414:	10c7883a 	add	r3,r2,r3
    f418:	00800804 	movi	r2,32
    f41c:	10c5c83a 	sub	r2,r2,r3
    f420:	10000526 	beq	r2,zero,f438 <__udivdi3+0x98>
    f424:	80a0983a 	sll	r16,r16,r2
    f428:	98c6d83a 	srl	r3,r19,r3
    f42c:	30a4983a 	sll	r18,r6,r2
    f430:	98a2983a 	sll	r17,r19,r2
    f434:	80ecb03a 	or	r22,r16,r3
    f438:	902ad43a 	srli	r21,r18,16
    f43c:	b009883a 	mov	r4,r22
    f440:	953fffcc 	andi	r20,r18,65535
    f444:	a80b883a 	mov	r5,r21
    f448:	00100140 	call	10014 <__umodsi3>
    f44c:	b009883a 	mov	r4,r22
    f450:	a80b883a 	mov	r5,r21
    f454:	1027883a 	mov	r19,r2
    f458:	001000c0 	call	1000c <__udivsi3>
    f45c:	1021883a 	mov	r16,r2
    f460:	8806d43a 	srli	r3,r17,16
    f464:	9804943a 	slli	r2,r19,16
    f468:	8527383a 	mul	r19,r16,r20
    f46c:	10c4b03a 	or	r2,r2,r3
    f470:	14c0052e 	bgeu	r2,r19,f488 <__udivdi3+0xe8>
    f474:	1485883a 	add	r2,r2,r18
    f478:	80ffffc4 	addi	r3,r16,-1
    f47c:	14800136 	bltu	r2,r18,f484 <__udivdi3+0xe4>
    f480:	14c13436 	bltu	r2,r19,f954 <__udivdi3+0x5b4>
    f484:	1821883a 	mov	r16,r3
    f488:	14e7c83a 	sub	r19,r2,r19
    f48c:	9809883a 	mov	r4,r19
    f490:	a80b883a 	mov	r5,r21
    f494:	00100140 	call	10014 <__umodsi3>
    f498:	102d883a 	mov	r22,r2
    f49c:	9809883a 	mov	r4,r19
    f4a0:	a80b883a 	mov	r5,r21
    f4a4:	001000c0 	call	1000c <__udivsi3>
    f4a8:	b02c943a 	slli	r22,r22,16
    f4ac:	1529383a 	mul	r20,r2,r20
    f4b0:	8c7fffcc 	andi	r17,r17,65535
    f4b4:	b462b03a 	or	r17,r22,r17
    f4b8:	8d00052e 	bgeu	r17,r20,f4d0 <__udivdi3+0x130>
    f4bc:	8ca3883a 	add	r17,r17,r18
    f4c0:	10ffffc4 	addi	r3,r2,-1
    f4c4:	8c80f636 	bltu	r17,r18,f8a0 <__udivdi3+0x500>
    f4c8:	8d00f52e 	bgeu	r17,r20,f8a0 <__udivdi3+0x500>
    f4cc:	10bfff84 	addi	r2,r2,-2
    f4d0:	8020943a 	slli	r16,r16,16
    f4d4:	0007883a 	mov	r3,zero
    f4d8:	1404b03a 	or	r2,r2,r16
    f4dc:	00005b06 	br	f64c <__udivdi3+0x2ac>
    f4e0:	29c05836 	bltu	r5,r7,f644 <__udivdi3+0x2a4>
    f4e4:	00bfffd4 	movui	r2,65535
    f4e8:	11c0642e 	bgeu	r2,r7,f67c <__udivdi3+0x2dc>
    f4ec:	00804034 	movhi	r2,256
    f4f0:	10bfffc4 	addi	r2,r2,-1
    f4f4:	11c0f32e 	bgeu	r2,r7,f8c4 <__udivdi3+0x524>
    f4f8:	00c00604 	movi	r3,24
    f4fc:	180b883a 	mov	r5,r3
    f500:	38c6d83a 	srl	r3,r7,r3
    f504:	008000b4 	movhi	r2,2
    f508:	10bffe04 	addi	r2,r2,-8
    f50c:	10c7883a 	add	r3,r2,r3
    f510:	18c00003 	ldbu	r3,0(r3)
    f514:	01000804 	movi	r4,32
    f518:	1947883a 	add	r3,r3,r5
    f51c:	20e5c83a 	sub	r18,r4,r3
    f520:	9000661e 	bne	r18,zero,f6bc <__udivdi3+0x31c>
    f524:	3c00f936 	bltu	r7,r16,f90c <__udivdi3+0x56c>
    f528:	9985403a 	cmpgeu	r2,r19,r6
    f52c:	0007883a 	mov	r3,zero
    f530:	00004606 	br	f64c <__udivdi3+0x2ac>
    f534:	3000041e 	bne	r6,zero,f548 <__udivdi3+0x1a8>
    f538:	01000044 	movi	r4,1
    f53c:	000b883a 	mov	r5,zero
    f540:	001000c0 	call	1000c <__udivsi3>
    f544:	1025883a 	mov	r18,r2
    f548:	00bfffd4 	movui	r2,65535
    f54c:	1480562e 	bgeu	r2,r18,f6a8 <__udivdi3+0x308>
    f550:	00804034 	movhi	r2,256
    f554:	10bfffc4 	addi	r2,r2,-1
    f558:	1480e32e 	bgeu	r2,r18,f8e8 <__udivdi3+0x548>
    f55c:	00800604 	movi	r2,24
    f560:	1007883a 	mov	r3,r2
    f564:	9084d83a 	srl	r2,r18,r2
    f568:	010000b4 	movhi	r4,2
    f56c:	213ffe04 	addi	r4,r4,-8
    f570:	2085883a 	add	r2,r4,r2
    f574:	10800003 	ldbu	r2,0(r2)
    f578:	10c5883a 	add	r2,r2,r3
    f57c:	00c00804 	movi	r3,32
    f580:	1887c83a 	sub	r3,r3,r2
    f584:	1800911e 	bne	r3,zero,f7cc <__udivdi3+0x42c>
    f588:	9028d43a 	srli	r20,r18,16
    f58c:	84a1c83a 	sub	r16,r16,r18
    f590:	957fffcc 	andi	r21,r18,65535
    f594:	00c00044 	movi	r3,1
    f598:	8009883a 	mov	r4,r16
    f59c:	a00b883a 	mov	r5,r20
    f5a0:	d8c00015 	stw	r3,0(sp)
    f5a4:	00100140 	call	10014 <__umodsi3>
    f5a8:	8009883a 	mov	r4,r16
    f5ac:	a00b883a 	mov	r5,r20
    f5b0:	1027883a 	mov	r19,r2
    f5b4:	001000c0 	call	1000c <__udivsi3>
    f5b8:	1021883a 	mov	r16,r2
    f5bc:	880cd43a 	srli	r6,r17,16
    f5c0:	9804943a 	slli	r2,r19,16
    f5c4:	8567383a 	mul	r19,r16,r21
    f5c8:	d8c00017 	ldw	r3,0(sp)
    f5cc:	1188b03a 	or	r4,r2,r6
    f5d0:	24c0052e 	bgeu	r4,r19,f5e8 <__udivdi3+0x248>
    f5d4:	2489883a 	add	r4,r4,r18
    f5d8:	80bfffc4 	addi	r2,r16,-1
    f5dc:	24800136 	bltu	r4,r18,f5e4 <__udivdi3+0x244>
    f5e0:	24c0d936 	bltu	r4,r19,f948 <__udivdi3+0x5a8>
    f5e4:	1021883a 	mov	r16,r2
    f5e8:	24e7c83a 	sub	r19,r4,r19
    f5ec:	9809883a 	mov	r4,r19
    f5f0:	a00b883a 	mov	r5,r20
    f5f4:	d8c00015 	stw	r3,0(sp)
    f5f8:	00100140 	call	10014 <__umodsi3>
    f5fc:	102d883a 	mov	r22,r2
    f600:	9809883a 	mov	r4,r19
    f604:	a00b883a 	mov	r5,r20
    f608:	001000c0 	call	1000c <__udivsi3>
    f60c:	b02c943a 	slli	r22,r22,16
    f610:	156b383a 	mul	r21,r2,r21
    f614:	8c7fffcc 	andi	r17,r17,65535
    f618:	b462b03a 	or	r17,r22,r17
    f61c:	d8c00017 	ldw	r3,0(sp)
    f620:	8d40052e 	bgeu	r17,r21,f638 <__udivdi3+0x298>
    f624:	8ca3883a 	add	r17,r17,r18
    f628:	113fffc4 	addi	r4,r2,-1
    f62c:	8c809a36 	bltu	r17,r18,f898 <__udivdi3+0x4f8>
    f630:	8d40992e 	bgeu	r17,r21,f898 <__udivdi3+0x4f8>
    f634:	10bfff84 	addi	r2,r2,-2
    f638:	8020943a 	slli	r16,r16,16
    f63c:	1404b03a 	or	r2,r2,r16
    f640:	00000206 	br	f64c <__udivdi3+0x2ac>
    f644:	0007883a 	mov	r3,zero
    f648:	0005883a 	mov	r2,zero
    f64c:	dfc00a17 	ldw	ra,40(sp)
    f650:	df000917 	ldw	fp,36(sp)
    f654:	ddc00817 	ldw	r23,32(sp)
    f658:	dd800717 	ldw	r22,28(sp)
    f65c:	dd400617 	ldw	r21,24(sp)
    f660:	dd000517 	ldw	r20,20(sp)
    f664:	dcc00417 	ldw	r19,16(sp)
    f668:	dc800317 	ldw	r18,12(sp)
    f66c:	dc400217 	ldw	r17,8(sp)
    f670:	dc000117 	ldw	r16,4(sp)
    f674:	dec00b04 	addi	sp,sp,44
    f678:	f800283a 	ret
    f67c:	00803fc4 	movi	r2,255
    f680:	11c0932e 	bgeu	r2,r7,f8d0 <__udivdi3+0x530>
    f684:	00c00204 	movi	r3,8
    f688:	180b883a 	mov	r5,r3
    f68c:	003f9c06 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f690:	00804034 	movhi	r2,256
    f694:	10bfffc4 	addi	r2,r2,-1
    f698:	1180902e 	bgeu	r2,r6,f8dc <__udivdi3+0x53c>
    f69c:	00800604 	movi	r2,24
    f6a0:	1007883a 	mov	r3,r2
    f6a4:	003f5606 	br	f400 <__alt_mem_Flash_flash_data+0xf400f400>
    f6a8:	00803fc4 	movi	r2,255
    f6ac:	1480912e 	bgeu	r2,r18,f8f4 <__udivdi3+0x554>
    f6b0:	00800204 	movi	r2,8
    f6b4:	1007883a 	mov	r3,r2
    f6b8:	003faa06 	br	f564 <__alt_mem_Flash_flash_data+0xf400f564>
    f6bc:	30eed83a 	srl	r23,r6,r3
    f6c0:	3c8e983a 	sll	r7,r7,r18
    f6c4:	80f8d83a 	srl	fp,r16,r3
    f6c8:	98c6d83a 	srl	r3,r19,r3
    f6cc:	3deeb03a 	or	r23,r7,r23
    f6d0:	b828d43a 	srli	r20,r23,16
    f6d4:	84a0983a 	sll	r16,r16,r18
    f6d8:	e009883a 	mov	r4,fp
    f6dc:	a00b883a 	mov	r5,r20
    f6e0:	80e2b03a 	or	r17,r16,r3
    f6e4:	34aa983a 	sll	r21,r6,r18
    f6e8:	00100140 	call	10014 <__umodsi3>
    f6ec:	e009883a 	mov	r4,fp
    f6f0:	a00b883a 	mov	r5,r20
    f6f4:	102d883a 	mov	r22,r2
    f6f8:	001000c0 	call	1000c <__udivsi3>
    f6fc:	1021883a 	mov	r16,r2
    f700:	bf3fffcc 	andi	fp,r23,65535
    f704:	b004943a 	slli	r2,r22,16
    f708:	8808d43a 	srli	r4,r17,16
    f70c:	872d383a 	mul	r22,r16,fp
    f710:	1104b03a 	or	r2,r2,r4
    f714:	1580042e 	bgeu	r2,r22,f728 <__udivdi3+0x388>
    f718:	15c5883a 	add	r2,r2,r23
    f71c:	80ffffc4 	addi	r3,r16,-1
    f720:	15c0812e 	bgeu	r2,r23,f928 <__udivdi3+0x588>
    f724:	1821883a 	mov	r16,r3
    f728:	15adc83a 	sub	r22,r2,r22
    f72c:	b009883a 	mov	r4,r22
    f730:	a00b883a 	mov	r5,r20
    f734:	00100140 	call	10014 <__umodsi3>
    f738:	a00b883a 	mov	r5,r20
    f73c:	b009883a 	mov	r4,r22
    f740:	d8800015 	stw	r2,0(sp)
    f744:	001000c0 	call	1000c <__udivsi3>
    f748:	d8c00017 	ldw	r3,0(sp)
    f74c:	170b383a 	mul	r5,r2,fp
    f750:	8c7fffcc 	andi	r17,r17,65535
    f754:	1806943a 	slli	r3,r3,16
    f758:	1c46b03a 	or	r3,r3,r17
    f75c:	1940042e 	bgeu	r3,r5,f770 <__udivdi3+0x3d0>
    f760:	1dc7883a 	add	r3,r3,r23
    f764:	113fffc4 	addi	r4,r2,-1
    f768:	1dc06b2e 	bgeu	r3,r23,f918 <__udivdi3+0x578>
    f76c:	2005883a 	mov	r2,r4
    f770:	8020943a 	slli	r16,r16,16
    f774:	a9ffffcc 	andi	r7,r21,65535
    f778:	a82ad43a 	srli	r21,r21,16
    f77c:	1404b03a 	or	r2,r2,r16
    f780:	113fffcc 	andi	r4,r2,65535
    f784:	100cd43a 	srli	r6,r2,16
    f788:	21d3383a 	mul	r9,r4,r7
    f78c:	2549383a 	mul	r4,r4,r21
    f790:	31cf383a 	mul	r7,r6,r7
    f794:	4810d43a 	srli	r8,r9,16
    f798:	1947c83a 	sub	r3,r3,r5
    f79c:	3909883a 	add	r4,r7,r4
    f7a0:	2209883a 	add	r4,r4,r8
    f7a4:	354d383a 	mul	r6,r6,r21
    f7a8:	21c0022e 	bgeu	r4,r7,f7b4 <__udivdi3+0x414>
    f7ac:	01400074 	movhi	r5,1
    f7b0:	314d883a 	add	r6,r6,r5
    f7b4:	202ad43a 	srli	r21,r4,16
    f7b8:	354d883a 	add	r6,r6,r21
    f7bc:	19803f36 	bltu	r3,r6,f8bc <__udivdi3+0x51c>
    f7c0:	19803926 	beq	r3,r6,f8a8 <__udivdi3+0x508>
    f7c4:	0007883a 	mov	r3,zero
    f7c8:	003fa006 	br	f64c <__alt_mem_Flash_flash_data+0xf400f64c>
    f7cc:	90e4983a 	sll	r18,r18,r3
    f7d0:	80aad83a 	srl	r21,r16,r2
    f7d4:	80e0983a 	sll	r16,r16,r3
    f7d8:	9028d43a 	srli	r20,r18,16
    f7dc:	9884d83a 	srl	r2,r19,r2
    f7e0:	a809883a 	mov	r4,r21
    f7e4:	a00b883a 	mov	r5,r20
    f7e8:	80acb03a 	or	r22,r16,r2
    f7ec:	98e2983a 	sll	r17,r19,r3
    f7f0:	00100140 	call	10014 <__umodsi3>
    f7f4:	a809883a 	mov	r4,r21
    f7f8:	a00b883a 	mov	r5,r20
    f7fc:	1021883a 	mov	r16,r2
    f800:	001000c0 	call	1000c <__udivsi3>
    f804:	957fffcc 	andi	r21,r18,65535
    f808:	8020943a 	slli	r16,r16,16
    f80c:	b00ad43a 	srli	r5,r22,16
    f810:	1567383a 	mul	r19,r2,r21
    f814:	102f883a 	mov	r23,r2
    f818:	8148b03a 	or	r4,r16,r5
    f81c:	24c0062e 	bgeu	r4,r19,f838 <__udivdi3+0x498>
    f820:	2489883a 	add	r4,r4,r18
    f824:	10bfffc4 	addi	r2,r2,-1
    f828:	24804536 	bltu	r4,r18,f940 <__udivdi3+0x5a0>
    f82c:	24c0442e 	bgeu	r4,r19,f940 <__udivdi3+0x5a0>
    f830:	bdffff84 	addi	r23,r23,-2
    f834:	2489883a 	add	r4,r4,r18
    f838:	24e7c83a 	sub	r19,r4,r19
    f83c:	9809883a 	mov	r4,r19
    f840:	a00b883a 	mov	r5,r20
    f844:	00100140 	call	10014 <__umodsi3>
    f848:	1021883a 	mov	r16,r2
    f84c:	9809883a 	mov	r4,r19
    f850:	a00b883a 	mov	r5,r20
    f854:	001000c0 	call	1000c <__udivsi3>
    f858:	8020943a 	slli	r16,r16,16
    f85c:	1007883a 	mov	r3,r2
    f860:	1545383a 	mul	r2,r2,r21
    f864:	b13fffcc 	andi	r4,r22,65535
    f868:	8108b03a 	or	r4,r16,r4
    f86c:	2080062e 	bgeu	r4,r2,f888 <__udivdi3+0x4e8>
    f870:	2489883a 	add	r4,r4,r18
    f874:	197fffc4 	addi	r5,r3,-1
    f878:	24802f36 	bltu	r4,r18,f938 <__udivdi3+0x598>
    f87c:	20802e2e 	bgeu	r4,r2,f938 <__udivdi3+0x598>
    f880:	18ffff84 	addi	r3,r3,-2
    f884:	2489883a 	add	r4,r4,r18
    f888:	b82e943a 	slli	r23,r23,16
    f88c:	20a1c83a 	sub	r16,r4,r2
    f890:	1dc6b03a 	or	r3,r3,r23
    f894:	003f4006 	br	f598 <__alt_mem_Flash_flash_data+0xf400f598>
    f898:	2005883a 	mov	r2,r4
    f89c:	003f6606 	br	f638 <__alt_mem_Flash_flash_data+0xf400f638>
    f8a0:	1805883a 	mov	r2,r3
    f8a4:	003f0a06 	br	f4d0 <__alt_mem_Flash_flash_data+0xf400f4d0>
    f8a8:	2006943a 	slli	r3,r4,16
    f8ac:	9c88983a 	sll	r4,r19,r18
    f8b0:	4a7fffcc 	andi	r9,r9,65535
    f8b4:	1a47883a 	add	r3,r3,r9
    f8b8:	20ffc22e 	bgeu	r4,r3,f7c4 <__alt_mem_Flash_flash_data+0xf400f7c4>
    f8bc:	10bfffc4 	addi	r2,r2,-1
    f8c0:	003fc006 	br	f7c4 <__alt_mem_Flash_flash_data+0xf400f7c4>
    f8c4:	00c00404 	movi	r3,16
    f8c8:	180b883a 	mov	r5,r3
    f8cc:	003f0c06 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f8d0:	0007883a 	mov	r3,zero
    f8d4:	000b883a 	mov	r5,zero
    f8d8:	003f0906 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f8dc:	00800404 	movi	r2,16
    f8e0:	1007883a 	mov	r3,r2
    f8e4:	003ec606 	br	f400 <__alt_mem_Flash_flash_data+0xf400f400>
    f8e8:	00800404 	movi	r2,16
    f8ec:	1007883a 	mov	r3,r2
    f8f0:	003f1c06 	br	f564 <__alt_mem_Flash_flash_data+0xf400f564>
    f8f4:	0005883a 	mov	r2,zero
    f8f8:	0007883a 	mov	r3,zero
    f8fc:	003f1906 	br	f564 <__alt_mem_Flash_flash_data+0xf400f564>
    f900:	0005883a 	mov	r2,zero
    f904:	0007883a 	mov	r3,zero
    f908:	003ebd06 	br	f400 <__alt_mem_Flash_flash_data+0xf400f400>
    f90c:	0007883a 	mov	r3,zero
    f910:	00800044 	movi	r2,1
    f914:	003f4d06 	br	f64c <__alt_mem_Flash_flash_data+0xf400f64c>
    f918:	197f942e 	bgeu	r3,r5,f76c <__alt_mem_Flash_flash_data+0xf400f76c>
    f91c:	10bfff84 	addi	r2,r2,-2
    f920:	1dc7883a 	add	r3,r3,r23
    f924:	003f9206 	br	f770 <__alt_mem_Flash_flash_data+0xf400f770>
    f928:	15bf7e2e 	bgeu	r2,r22,f724 <__alt_mem_Flash_flash_data+0xf400f724>
    f92c:	843fff84 	addi	r16,r16,-2
    f930:	15c5883a 	add	r2,r2,r23
    f934:	003f7c06 	br	f728 <__alt_mem_Flash_flash_data+0xf400f728>
    f938:	2807883a 	mov	r3,r5
    f93c:	003fd206 	br	f888 <__alt_mem_Flash_flash_data+0xf400f888>
    f940:	102f883a 	mov	r23,r2
    f944:	003fbc06 	br	f838 <__alt_mem_Flash_flash_data+0xf400f838>
    f948:	843fff84 	addi	r16,r16,-2
    f94c:	2489883a 	add	r4,r4,r18
    f950:	003f2506 	br	f5e8 <__alt_mem_Flash_flash_data+0xf400f5e8>
    f954:	843fff84 	addi	r16,r16,-2
    f958:	1485883a 	add	r2,r2,r18
    f95c:	003eca06 	br	f488 <__alt_mem_Flash_flash_data+0xf400f488>

0000f960 <__umoddi3>:
    f960:	defff404 	addi	sp,sp,-48
    f964:	ddc00915 	stw	r23,36(sp)
    f968:	dc400315 	stw	r17,12(sp)
    f96c:	dc000215 	stw	r16,8(sp)
    f970:	dfc00b15 	stw	ra,44(sp)
    f974:	df000a15 	stw	fp,40(sp)
    f978:	dd800815 	stw	r22,32(sp)
    f97c:	dd400715 	stw	r21,28(sp)
    f980:	dd000615 	stw	r20,24(sp)
    f984:	dcc00515 	stw	r19,20(sp)
    f988:	dc800415 	stw	r18,16(sp)
    f98c:	2021883a 	mov	r16,r4
    f990:	2823883a 	mov	r17,r5
    f994:	282f883a 	mov	r23,r5
    f998:	3800381e 	bne	r7,zero,fa7c <__umoddi3+0x11c>
    f99c:	3027883a 	mov	r19,r6
    f9a0:	2029883a 	mov	r20,r4
    f9a4:	29804e2e 	bgeu	r5,r6,fae0 <__umoddi3+0x180>
    f9a8:	00bfffd4 	movui	r2,65535
    f9ac:	11809c36 	bltu	r2,r6,fc20 <__umoddi3+0x2c0>
    f9b0:	00803fc4 	movi	r2,255
    f9b4:	11813b2e 	bgeu	r2,r6,fea4 <__umoddi3+0x544>
    f9b8:	01400204 	movi	r5,8
    f9bc:	2805883a 	mov	r2,r5
    f9c0:	314ad83a 	srl	r5,r6,r5
    f9c4:	00c000b4 	movhi	r3,2
    f9c8:	18fffe04 	addi	r3,r3,-8
    f9cc:	194b883a 	add	r5,r3,r5
    f9d0:	29000003 	ldbu	r4,0(r5)
    f9d4:	2089883a 	add	r4,r4,r2
    f9d8:	00800804 	movi	r2,32
    f9dc:	1105c83a 	sub	r2,r2,r4
    f9e0:	1000ec26 	beq	r2,zero,fd94 <__umoddi3+0x434>
    f9e4:	88a2983a 	sll	r17,r17,r2
    f9e8:	8108d83a 	srl	r4,r16,r4
    f9ec:	30a6983a 	sll	r19,r6,r2
    f9f0:	80a8983a 	sll	r20,r16,r2
    f9f4:	1025883a 	mov	r18,r2
    f9f8:	892eb03a 	or	r23,r17,r4
    f9fc:	982cd43a 	srli	r22,r19,16
    fa00:	b809883a 	mov	r4,r23
    fa04:	9d7fffcc 	andi	r21,r19,65535
    fa08:	b00b883a 	mov	r5,r22
    fa0c:	00100140 	call	10014 <__umodsi3>
    fa10:	b809883a 	mov	r4,r23
    fa14:	b00b883a 	mov	r5,r22
    fa18:	1021883a 	mov	r16,r2
    fa1c:	001000c0 	call	1000c <__udivsi3>
    fa20:	8020943a 	slli	r16,r16,16
    fa24:	a00cd43a 	srli	r6,r20,16
    fa28:	1545383a 	mul	r2,r2,r21
    fa2c:	8188b03a 	or	r4,r16,r6
    fa30:	2080042e 	bgeu	r4,r2,fa44 <__umoddi3+0xe4>
    fa34:	24c9883a 	add	r4,r4,r19
    fa38:	24c00236 	bltu	r4,r19,fa44 <__umoddi3+0xe4>
    fa3c:	2080012e 	bgeu	r4,r2,fa44 <__umoddi3+0xe4>
    fa40:	24c9883a 	add	r4,r4,r19
    fa44:	20a3c83a 	sub	r17,r4,r2
    fa48:	8809883a 	mov	r4,r17
    fa4c:	b00b883a 	mov	r5,r22
    fa50:	00100140 	call	10014 <__umodsi3>
    fa54:	8809883a 	mov	r4,r17
    fa58:	b00b883a 	mov	r5,r22
    fa5c:	1021883a 	mov	r16,r2
    fa60:	001000c0 	call	1000c <__udivsi3>
    fa64:	8006943a 	slli	r3,r16,16
    fa68:	1545383a 	mul	r2,r2,r21
    fa6c:	a13fffcc 	andi	r4,r20,65535
    fa70:	1906b03a 	or	r3,r3,r4
    fa74:	1880532e 	bgeu	r3,r2,fbc4 <__umoddi3+0x264>
    fa78:	00004e06 	br	fbb4 <__umoddi3+0x254>
    fa7c:	29c05536 	bltu	r5,r7,fbd4 <__umoddi3+0x274>
    fa80:	00bfffd4 	movui	r2,65535
    fa84:	11c0612e 	bgeu	r2,r7,fc0c <__umoddi3+0x2ac>
    fa88:	00804034 	movhi	r2,256
    fa8c:	10bfffc4 	addi	r2,r2,-1
    fa90:	11c0f82e 	bgeu	r2,r7,fe74 <__umoddi3+0x514>
    fa94:	01400604 	movi	r5,24
    fa98:	282b883a 	mov	r21,r5
    fa9c:	394ad83a 	srl	r5,r7,r5
    faa0:	00c000b4 	movhi	r3,2
    faa4:	18fffe04 	addi	r3,r3,-8
    faa8:	194b883a 	add	r5,r3,r5
    faac:	28800003 	ldbu	r2,0(r5)
    fab0:	00c00804 	movi	r3,32
    fab4:	156b883a 	add	r21,r2,r21
    fab8:	1d69c83a 	sub	r20,r3,r21
    fabc:	a000631e 	bne	r20,zero,fc4c <__umoddi3+0x2ec>
    fac0:	3c400136 	bltu	r7,r17,fac8 <__umoddi3+0x168>
    fac4:	81810436 	bltu	r16,r6,fed8 <__umoddi3+0x578>
    fac8:	8185c83a 	sub	r2,r16,r6
    facc:	89e3c83a 	sub	r17,r17,r7
    fad0:	8087803a 	cmpltu	r3,r16,r2
    fad4:	88efc83a 	sub	r23,r17,r3
    fad8:	b807883a 	mov	r3,r23
    fadc:	00003f06 	br	fbdc <__umoddi3+0x27c>
    fae0:	3000041e 	bne	r6,zero,faf4 <__umoddi3+0x194>
    fae4:	01000044 	movi	r4,1
    fae8:	000b883a 	mov	r5,zero
    faec:	001000c0 	call	1000c <__udivsi3>
    faf0:	1027883a 	mov	r19,r2
    faf4:	00bfffd4 	movui	r2,65535
    faf8:	14c04f2e 	bgeu	r2,r19,fc38 <__umoddi3+0x2d8>
    fafc:	00804034 	movhi	r2,256
    fb00:	10bfffc4 	addi	r2,r2,-1
    fb04:	14c0e42e 	bgeu	r2,r19,fe98 <__umoddi3+0x538>
    fb08:	00800604 	movi	r2,24
    fb0c:	1007883a 	mov	r3,r2
    fb10:	9884d83a 	srl	r2,r19,r2
    fb14:	010000b4 	movhi	r4,2
    fb18:	213ffe04 	addi	r4,r4,-8
    fb1c:	2085883a 	add	r2,r4,r2
    fb20:	11000003 	ldbu	r4,0(r2)
    fb24:	00800804 	movi	r2,32
    fb28:	20c7883a 	add	r3,r4,r3
    fb2c:	10c5c83a 	sub	r2,r2,r3
    fb30:	10009a1e 	bne	r2,zero,fd9c <__umoddi3+0x43c>
    fb34:	982cd43a 	srli	r22,r19,16
    fb38:	8ce3c83a 	sub	r17,r17,r19
    fb3c:	9c3fffcc 	andi	r16,r19,65535
    fb40:	0025883a 	mov	r18,zero
    fb44:	8809883a 	mov	r4,r17
    fb48:	b00b883a 	mov	r5,r22
    fb4c:	00100140 	call	10014 <__umodsi3>
    fb50:	8809883a 	mov	r4,r17
    fb54:	b00b883a 	mov	r5,r22
    fb58:	102b883a 	mov	r21,r2
    fb5c:	001000c0 	call	1000c <__udivsi3>
    fb60:	a806943a 	slli	r3,r21,16
    fb64:	a008d43a 	srli	r4,r20,16
    fb68:	1405383a 	mul	r2,r2,r16
    fb6c:	190cb03a 	or	r6,r3,r4
    fb70:	3080032e 	bgeu	r6,r2,fb80 <__umoddi3+0x220>
    fb74:	34cd883a 	add	r6,r6,r19
    fb78:	34c00136 	bltu	r6,r19,fb80 <__umoddi3+0x220>
    fb7c:	3080d436 	bltu	r6,r2,fed0 <__umoddi3+0x570>
    fb80:	30abc83a 	sub	r21,r6,r2
    fb84:	a809883a 	mov	r4,r21
    fb88:	b00b883a 	mov	r5,r22
    fb8c:	00100140 	call	10014 <__umodsi3>
    fb90:	1023883a 	mov	r17,r2
    fb94:	a809883a 	mov	r4,r21
    fb98:	b00b883a 	mov	r5,r22
    fb9c:	001000c0 	call	1000c <__udivsi3>
    fba0:	8822943a 	slli	r17,r17,16
    fba4:	1405383a 	mul	r2,r2,r16
    fba8:	a13fffcc 	andi	r4,r20,65535
    fbac:	8906b03a 	or	r3,r17,r4
    fbb0:	1880042e 	bgeu	r3,r2,fbc4 <__umoddi3+0x264>
    fbb4:	1cc7883a 	add	r3,r3,r19
    fbb8:	1cc00236 	bltu	r3,r19,fbc4 <__umoddi3+0x264>
    fbbc:	1880012e 	bgeu	r3,r2,fbc4 <__umoddi3+0x264>
    fbc0:	1cc7883a 	add	r3,r3,r19
    fbc4:	1887c83a 	sub	r3,r3,r2
    fbc8:	1c84d83a 	srl	r2,r3,r18
    fbcc:	0007883a 	mov	r3,zero
    fbd0:	00000206 	br	fbdc <__umoddi3+0x27c>
    fbd4:	2005883a 	mov	r2,r4
    fbd8:	2807883a 	mov	r3,r5
    fbdc:	dfc00b17 	ldw	ra,44(sp)
    fbe0:	df000a17 	ldw	fp,40(sp)
    fbe4:	ddc00917 	ldw	r23,36(sp)
    fbe8:	dd800817 	ldw	r22,32(sp)
    fbec:	dd400717 	ldw	r21,28(sp)
    fbf0:	dd000617 	ldw	r20,24(sp)
    fbf4:	dcc00517 	ldw	r19,20(sp)
    fbf8:	dc800417 	ldw	r18,16(sp)
    fbfc:	dc400317 	ldw	r17,12(sp)
    fc00:	dc000217 	ldw	r16,8(sp)
    fc04:	dec00c04 	addi	sp,sp,48
    fc08:	f800283a 	ret
    fc0c:	00803fc4 	movi	r2,255
    fc10:	11c0952e 	bgeu	r2,r7,fe68 <__umoddi3+0x508>
    fc14:	01400204 	movi	r5,8
    fc18:	282b883a 	mov	r21,r5
    fc1c:	003f9f06 	br	fa9c <__alt_mem_Flash_flash_data+0xf400fa9c>
    fc20:	00804034 	movhi	r2,256
    fc24:	10bfffc4 	addi	r2,r2,-1
    fc28:	1180952e 	bgeu	r2,r6,fe80 <__umoddi3+0x520>
    fc2c:	01400604 	movi	r5,24
    fc30:	2805883a 	mov	r2,r5
    fc34:	003f6206 	br	f9c0 <__alt_mem_Flash_flash_data+0xf400f9c0>
    fc38:	00803fc4 	movi	r2,255
    fc3c:	14c0932e 	bgeu	r2,r19,fe8c <__umoddi3+0x52c>
    fc40:	00800204 	movi	r2,8
    fc44:	1007883a 	mov	r3,r2
    fc48:	003fb106 	br	fb10 <__alt_mem_Flash_flash_data+0xf400fb10>
    fc4c:	3548d83a 	srl	r4,r6,r21
    fc50:	3d0e983a 	sll	r7,r7,r20
    fc54:	8d10983a 	sll	r8,r17,r20
    fc58:	8d6cd83a 	srl	r22,r17,r21
    fc5c:	3922b03a 	or	r17,r7,r4
    fc60:	882ed43a 	srli	r23,r17,16
    fc64:	8564d83a 	srl	r18,r16,r21
    fc68:	b009883a 	mov	r4,r22
    fc6c:	b80b883a 	mov	r5,r23
    fc70:	44a4b03a 	or	r18,r8,r18
    fc74:	3526983a 	sll	r19,r6,r20
    fc78:	00100140 	call	10014 <__umodsi3>
    fc7c:	b009883a 	mov	r4,r22
    fc80:	b80b883a 	mov	r5,r23
    fc84:	1039883a 	mov	fp,r2
    fc88:	001000c0 	call	1000c <__udivsi3>
    fc8c:	102d883a 	mov	r22,r2
    fc90:	8a3fffcc 	andi	r8,r17,65535
    fc94:	e004943a 	slli	r2,fp,16
    fc98:	900cd43a 	srli	r6,r18,16
    fc9c:	b239383a 	mul	fp,r22,r8
    fca0:	8520983a 	sll	r16,r16,r20
    fca4:	118ab03a 	or	r5,r2,r6
    fca8:	2f00042e 	bgeu	r5,fp,fcbc <__umoddi3+0x35c>
    fcac:	2c4b883a 	add	r5,r5,r17
    fcb0:	b0bfffc4 	addi	r2,r22,-1
    fcb4:	2c40822e 	bgeu	r5,r17,fec0 <__umoddi3+0x560>
    fcb8:	102d883a 	mov	r22,r2
    fcbc:	2f39c83a 	sub	fp,r5,fp
    fcc0:	e009883a 	mov	r4,fp
    fcc4:	b80b883a 	mov	r5,r23
    fcc8:	da000115 	stw	r8,4(sp)
    fccc:	00100140 	call	10014 <__umodsi3>
    fcd0:	e009883a 	mov	r4,fp
    fcd4:	b80b883a 	mov	r5,r23
    fcd8:	d8800015 	stw	r2,0(sp)
    fcdc:	001000c0 	call	1000c <__udivsi3>
    fce0:	d9800017 	ldw	r6,0(sp)
    fce4:	da000117 	ldw	r8,4(sp)
    fce8:	94bfffcc 	andi	r18,r18,65535
    fcec:	300c943a 	slli	r6,r6,16
    fcf0:	1209383a 	mul	r4,r2,r8
    fcf4:	3490b03a 	or	r8,r6,r18
    fcf8:	4100042e 	bgeu	r8,r4,fd0c <__umoddi3+0x3ac>
    fcfc:	4451883a 	add	r8,r8,r17
    fd00:	10ffffc4 	addi	r3,r2,-1
    fd04:	44406a2e 	bgeu	r8,r17,feb0 <__umoddi3+0x550>
    fd08:	1805883a 	mov	r2,r3
    fd0c:	b012943a 	slli	r9,r22,16
    fd10:	9abfffcc 	andi	r10,r19,65535
    fd14:	980ed43a 	srli	r7,r19,16
    fd18:	124ab03a 	or	r5,r2,r9
    fd1c:	2a7fffcc 	andi	r9,r5,65535
    fd20:	280ad43a 	srli	r5,r5,16
    fd24:	4a8d383a 	mul	r6,r9,r10
    fd28:	49d3383a 	mul	r9,r9,r7
    fd2c:	2a95383a 	mul	r10,r5,r10
    fd30:	3004d43a 	srli	r2,r6,16
    fd34:	4111c83a 	sub	r8,r8,r4
    fd38:	5253883a 	add	r9,r10,r9
    fd3c:	4893883a 	add	r9,r9,r2
    fd40:	29cb383a 	mul	r5,r5,r7
    fd44:	4a80022e 	bgeu	r9,r10,fd50 <__umoddi3+0x3f0>
    fd48:	00800074 	movhi	r2,1
    fd4c:	288b883a 	add	r5,r5,r2
    fd50:	4808d43a 	srli	r4,r9,16
    fd54:	4812943a 	slli	r9,r9,16
    fd58:	31bfffcc 	andi	r6,r6,65535
    fd5c:	290b883a 	add	r5,r5,r4
    fd60:	498d883a 	add	r6,r9,r6
    fd64:	41403a36 	bltu	r8,r5,fe50 <__umoddi3+0x4f0>
    fd68:	41405d26 	beq	r8,r5,fee0 <__umoddi3+0x580>
    fd6c:	4149c83a 	sub	r4,r8,r5
    fd70:	300f883a 	mov	r7,r6
    fd74:	81cfc83a 	sub	r7,r16,r7
    fd78:	81c7803a 	cmpltu	r3,r16,r7
    fd7c:	20c7c83a 	sub	r3,r4,r3
    fd80:	1d44983a 	sll	r2,r3,r21
    fd84:	3d0ed83a 	srl	r7,r7,r20
    fd88:	1d06d83a 	srl	r3,r3,r20
    fd8c:	11c4b03a 	or	r2,r2,r7
    fd90:	003f9206 	br	fbdc <__alt_mem_Flash_flash_data+0xf400fbdc>
    fd94:	0025883a 	mov	r18,zero
    fd98:	003f1806 	br	f9fc <__alt_mem_Flash_flash_data+0xf400f9fc>
    fd9c:	98a6983a 	sll	r19,r19,r2
    fda0:	88e8d83a 	srl	r20,r17,r3
    fda4:	80c6d83a 	srl	r3,r16,r3
    fda8:	982cd43a 	srli	r22,r19,16
    fdac:	88a2983a 	sll	r17,r17,r2
    fdb0:	a009883a 	mov	r4,r20
    fdb4:	b00b883a 	mov	r5,r22
    fdb8:	88eab03a 	or	r21,r17,r3
    fdbc:	1025883a 	mov	r18,r2
    fdc0:	00100140 	call	10014 <__umodsi3>
    fdc4:	a009883a 	mov	r4,r20
    fdc8:	b00b883a 	mov	r5,r22
    fdcc:	1023883a 	mov	r17,r2
    fdd0:	001000c0 	call	1000c <__udivsi3>
    fdd4:	9f3fffcc 	andi	fp,r19,65535
    fdd8:	8822943a 	slli	r17,r17,16
    fddc:	a80ad43a 	srli	r5,r21,16
    fde0:	1705383a 	mul	r2,r2,fp
    fde4:	84a8983a 	sll	r20,r16,r18
    fde8:	8948b03a 	or	r4,r17,r5
    fdec:	2080042e 	bgeu	r4,r2,fe00 <__umoddi3+0x4a0>
    fdf0:	24c9883a 	add	r4,r4,r19
    fdf4:	24c00236 	bltu	r4,r19,fe00 <__umoddi3+0x4a0>
    fdf8:	2080012e 	bgeu	r4,r2,fe00 <__umoddi3+0x4a0>
    fdfc:	24c9883a 	add	r4,r4,r19
    fe00:	20afc83a 	sub	r23,r4,r2
    fe04:	b809883a 	mov	r4,r23
    fe08:	b00b883a 	mov	r5,r22
    fe0c:	00100140 	call	10014 <__umodsi3>
    fe10:	1023883a 	mov	r17,r2
    fe14:	b809883a 	mov	r4,r23
    fe18:	b00b883a 	mov	r5,r22
    fe1c:	001000c0 	call	1000c <__udivsi3>
    fe20:	8822943a 	slli	r17,r17,16
    fe24:	1705383a 	mul	r2,r2,fp
    fe28:	a93fffcc 	andi	r4,r21,65535
    fe2c:	8908b03a 	or	r4,r17,r4
    fe30:	2080042e 	bgeu	r4,r2,fe44 <__umoddi3+0x4e4>
    fe34:	24c9883a 	add	r4,r4,r19
    fe38:	24c00236 	bltu	r4,r19,fe44 <__umoddi3+0x4e4>
    fe3c:	2080012e 	bgeu	r4,r2,fe44 <__umoddi3+0x4e4>
    fe40:	24c9883a 	add	r4,r4,r19
    fe44:	20a3c83a 	sub	r17,r4,r2
    fe48:	e021883a 	mov	r16,fp
    fe4c:	003f3d06 	br	fb44 <__alt_mem_Flash_flash_data+0xf400fb44>
    fe50:	34cfc83a 	sub	r7,r6,r19
    fe54:	2c4bc83a 	sub	r5,r5,r17
    fe58:	31cd803a 	cmpltu	r6,r6,r7
    fe5c:	298dc83a 	sub	r6,r5,r6
    fe60:	4189c83a 	sub	r4,r8,r6
    fe64:	003fc306 	br	fd74 <__alt_mem_Flash_flash_data+0xf400fd74>
    fe68:	000b883a 	mov	r5,zero
    fe6c:	002b883a 	mov	r21,zero
    fe70:	003f0a06 	br	fa9c <__alt_mem_Flash_flash_data+0xf400fa9c>
    fe74:	01400404 	movi	r5,16
    fe78:	282b883a 	mov	r21,r5
    fe7c:	003f0706 	br	fa9c <__alt_mem_Flash_flash_data+0xf400fa9c>
    fe80:	01400404 	movi	r5,16
    fe84:	2805883a 	mov	r2,r5
    fe88:	003ecd06 	br	f9c0 <__alt_mem_Flash_flash_data+0xf400f9c0>
    fe8c:	0005883a 	mov	r2,zero
    fe90:	0007883a 	mov	r3,zero
    fe94:	003f1e06 	br	fb10 <__alt_mem_Flash_flash_data+0xf400fb10>
    fe98:	00800404 	movi	r2,16
    fe9c:	1007883a 	mov	r3,r2
    fea0:	003f1b06 	br	fb10 <__alt_mem_Flash_flash_data+0xf400fb10>
    fea4:	000b883a 	mov	r5,zero
    fea8:	0005883a 	mov	r2,zero
    feac:	003ec406 	br	f9c0 <__alt_mem_Flash_flash_data+0xf400f9c0>
    feb0:	413f952e 	bgeu	r8,r4,fd08 <__alt_mem_Flash_flash_data+0xf400fd08>
    feb4:	10bfff84 	addi	r2,r2,-2
    feb8:	4451883a 	add	r8,r8,r17
    febc:	003f9306 	br	fd0c <__alt_mem_Flash_flash_data+0xf400fd0c>
    fec0:	2f3f7d2e 	bgeu	r5,fp,fcb8 <__alt_mem_Flash_flash_data+0xf400fcb8>
    fec4:	b5bfff84 	addi	r22,r22,-2
    fec8:	2c4b883a 	add	r5,r5,r17
    fecc:	003f7b06 	br	fcbc <__alt_mem_Flash_flash_data+0xf400fcbc>
    fed0:	34cd883a 	add	r6,r6,r19
    fed4:	003f2a06 	br	fb80 <__alt_mem_Flash_flash_data+0xf400fb80>
    fed8:	8005883a 	mov	r2,r16
    fedc:	003efe06 	br	fad8 <__alt_mem_Flash_flash_data+0xf400fad8>
    fee0:	81bfdb36 	bltu	r16,r6,fe50 <__alt_mem_Flash_flash_data+0xf400fe50>
    fee4:	300f883a 	mov	r7,r6
    fee8:	0009883a 	mov	r4,zero
    feec:	003fa106 	br	fd74 <__alt_mem_Flash_flash_data+0xf400fd74>

0000fef0 <udivmodsi4>:
    fef0:	2900182e 	bgeu	r5,r4,ff54 <udivmodsi4+0x64>
    fef4:	28001716 	blt	r5,zero,ff54 <udivmodsi4+0x64>
    fef8:	00800804 	movi	r2,32
    fefc:	00c00044 	movi	r3,1
    ff00:	00000206 	br	ff0c <udivmodsi4+0x1c>
    ff04:	10001126 	beq	r2,zero,ff4c <udivmodsi4+0x5c>
    ff08:	28000516 	blt	r5,zero,ff20 <udivmodsi4+0x30>
    ff0c:	294b883a 	add	r5,r5,r5
    ff10:	10bfffc4 	addi	r2,r2,-1
    ff14:	18c7883a 	add	r3,r3,r3
    ff18:	293ffa36 	bltu	r5,r4,ff04 <__alt_mem_Flash_flash_data+0xf400ff04>
    ff1c:	18000b26 	beq	r3,zero,ff4c <udivmodsi4+0x5c>
    ff20:	0005883a 	mov	r2,zero
    ff24:	21400236 	bltu	r4,r5,ff30 <udivmodsi4+0x40>
    ff28:	2149c83a 	sub	r4,r4,r5
    ff2c:	10c4b03a 	or	r2,r2,r3
    ff30:	1806d07a 	srli	r3,r3,1
    ff34:	280ad07a 	srli	r5,r5,1
    ff38:	183ffa1e 	bne	r3,zero,ff24 <__alt_mem_Flash_flash_data+0xf400ff24>
    ff3c:	3000011e 	bne	r6,zero,ff44 <udivmodsi4+0x54>
    ff40:	f800283a 	ret
    ff44:	2005883a 	mov	r2,r4
    ff48:	f800283a 	ret
    ff4c:	0005883a 	mov	r2,zero
    ff50:	003ffa06 	br	ff3c <__alt_mem_Flash_flash_data+0xf400ff3c>
    ff54:	00c00044 	movi	r3,1
    ff58:	003ff106 	br	ff20 <__alt_mem_Flash_flash_data+0xf400ff20>

0000ff5c <__divsi3>:
    ff5c:	defffe04 	addi	sp,sp,-8
    ff60:	dfc00115 	stw	ra,4(sp)
    ff64:	dc000015 	stw	r16,0(sp)
    ff68:	20000b16 	blt	r4,zero,ff98 <__divsi3+0x3c>
    ff6c:	0021883a 	mov	r16,zero
    ff70:	28000c16 	blt	r5,zero,ffa4 <__divsi3+0x48>
    ff74:	000d883a 	mov	r6,zero
    ff78:	000fef00 	call	fef0 <udivmodsi4>
    ff7c:	0407c83a 	sub	r3,zero,r16
    ff80:	1884f03a 	xor	r2,r3,r2
    ff84:	1405883a 	add	r2,r2,r16
    ff88:	dfc00117 	ldw	ra,4(sp)
    ff8c:	dc000017 	ldw	r16,0(sp)
    ff90:	dec00204 	addi	sp,sp,8
    ff94:	f800283a 	ret
    ff98:	0109c83a 	sub	r4,zero,r4
    ff9c:	04000044 	movi	r16,1
    ffa0:	283ff40e 	bge	r5,zero,ff74 <__alt_mem_Flash_flash_data+0xf400ff74>
    ffa4:	014bc83a 	sub	r5,zero,r5
    ffa8:	8400005c 	xori	r16,r16,1
    ffac:	003ff106 	br	ff74 <__alt_mem_Flash_flash_data+0xf400ff74>

0000ffb0 <__modsi3>:
    ffb0:	defffd04 	addi	sp,sp,-12
    ffb4:	dfc00215 	stw	ra,8(sp)
    ffb8:	dc400115 	stw	r17,4(sp)
    ffbc:	dc000015 	stw	r16,0(sp)
    ffc0:	20000c16 	blt	r4,zero,fff4 <__modsi3+0x44>
    ffc4:	0023883a 	mov	r17,zero
    ffc8:	0021883a 	mov	r16,zero
    ffcc:	28000d16 	blt	r5,zero,10004 <__modsi3+0x54>
    ffd0:	01800044 	movi	r6,1
    ffd4:	000fef00 	call	fef0 <udivmodsi4>
    ffd8:	1404f03a 	xor	r2,r2,r16
    ffdc:	8885883a 	add	r2,r17,r2
    ffe0:	dfc00217 	ldw	ra,8(sp)
    ffe4:	dc400117 	ldw	r17,4(sp)
    ffe8:	dc000017 	ldw	r16,0(sp)
    ffec:	dec00304 	addi	sp,sp,12
    fff0:	f800283a 	ret
    fff4:	0109c83a 	sub	r4,zero,r4
    fff8:	04400044 	movi	r17,1
    fffc:	043fffc4 	movi	r16,-1
   10000:	283ff30e 	bge	r5,zero,ffd0 <__alt_mem_Flash_flash_data+0xf400ffd0>
   10004:	014bc83a 	sub	r5,zero,r5
   10008:	003ff106 	br	ffd0 <__alt_mem_Flash_flash_data+0xf400ffd0>

0001000c <__udivsi3>:
   1000c:	000d883a 	mov	r6,zero
   10010:	000fef01 	jmpi	fef0 <udivmodsi4>

00010014 <__umodsi3>:
   10014:	01800044 	movi	r6,1
   10018:	000fef01 	jmpi	fef0 <udivmodsi4>

0001001c <__adddf3>:
   1001c:	02000434 	movhi	r8,16
   10020:	423fffc4 	addi	r8,r8,-1
   10024:	defffb04 	addi	sp,sp,-20
   10028:	2a12703a 	and	r9,r5,r8
   1002c:	2806d7fa 	srli	r3,r5,31
   10030:	3a10703a 	and	r8,r7,r8
   10034:	3804d53a 	srli	r2,r7,20
   10038:	3014d77a 	srli	r10,r6,29
   1003c:	dc000015 	stw	r16,0(sp)
   10040:	481290fa 	slli	r9,r9,3
   10044:	2820d53a 	srli	r16,r5,20
   10048:	401090fa 	slli	r8,r8,3
   1004c:	200ad77a 	srli	r5,r4,29
   10050:	380ed7fa 	srli	r7,r7,31
   10054:	dc800215 	stw	r18,8(sp)
   10058:	dc400115 	stw	r17,4(sp)
   1005c:	dfc00415 	stw	ra,16(sp)
   10060:	dcc00315 	stw	r19,12(sp)
   10064:	1c803fcc 	andi	r18,r3,255
   10068:	8401ffcc 	andi	r16,r16,2047
   1006c:	494ab03a 	or	r5,r9,r5
   10070:	202290fa 	slli	r17,r4,3
   10074:	1081ffcc 	andi	r2,r2,2047
   10078:	4290b03a 	or	r8,r8,r10
   1007c:	300c90fa 	slli	r6,r6,3
   10080:	91c07026 	beq	r18,r7,10244 <__adddf3+0x228>
   10084:	8087c83a 	sub	r3,r16,r2
   10088:	00c0b30e 	bge	zero,r3,10358 <__adddf3+0x33c>
   1008c:	10002a1e 	bne	r2,zero,10138 <__adddf3+0x11c>
   10090:	4184b03a 	or	r2,r8,r6
   10094:	1000991e 	bne	r2,zero,102fc <__adddf3+0x2e0>
   10098:	888001cc 	andi	r2,r17,7
   1009c:	10005b26 	beq	r2,zero,1020c <__adddf3+0x1f0>
   100a0:	88c003cc 	andi	r3,r17,15
   100a4:	00800104 	movi	r2,4
   100a8:	18805826 	beq	r3,r2,1020c <__adddf3+0x1f0>
   100ac:	89800104 	addi	r6,r17,4
   100b0:	3463803a 	cmpltu	r17,r6,r17
   100b4:	2c4b883a 	add	r5,r5,r17
   100b8:	2880202c 	andhi	r2,r5,128
   100bc:	9007883a 	mov	r3,r18
   100c0:	3023883a 	mov	r17,r6
   100c4:	10005426 	beq	r2,zero,10218 <__adddf3+0x1fc>
   100c8:	84000044 	addi	r16,r16,1
   100cc:	0081ffc4 	movi	r2,2047
   100d0:	8080c126 	beq	r16,r2,103d8 <__adddf3+0x3bc>
   100d4:	013fe034 	movhi	r4,65408
   100d8:	213fffc4 	addi	r4,r4,-1
   100dc:	290a703a 	and	r5,r5,r4
   100e0:	2804977a 	slli	r2,r5,29
   100e4:	280a927a 	slli	r5,r5,9
   100e8:	8822d0fa 	srli	r17,r17,3
   100ec:	8401ffcc 	andi	r16,r16,2047
   100f0:	2808d33a 	srli	r4,r5,12
   100f4:	1444b03a 	or	r2,r2,r17
   100f8:	8401ffcc 	andi	r16,r16,2047
   100fc:	800a953a 	slli	r5,r16,20
   10100:	18c03fcc 	andi	r3,r3,255
   10104:	04000434 	movhi	r16,16
   10108:	180697fa 	slli	r3,r3,31
   1010c:	843fffc4 	addi	r16,r16,-1
   10110:	2420703a 	and	r16,r4,r16
   10114:	8160b03a 	or	r16,r16,r5
   10118:	80c6b03a 	or	r3,r16,r3
   1011c:	dfc00417 	ldw	ra,16(sp)
   10120:	dcc00317 	ldw	r19,12(sp)
   10124:	dc800217 	ldw	r18,8(sp)
   10128:	dc400117 	ldw	r17,4(sp)
   1012c:	dc000017 	ldw	r16,0(sp)
   10130:	dec00504 	addi	sp,sp,20
   10134:	f800283a 	ret
   10138:	0081ffc4 	movi	r2,2047
   1013c:	80bfd626 	beq	r16,r2,10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10140:	42002034 	orhi	r8,r8,128
   10144:	00800e04 	movi	r2,56
   10148:	10c0a616 	blt	r2,r3,103e4 <__adddf3+0x3c8>
   1014c:	008007c4 	movi	r2,31
   10150:	10c0c916 	blt	r2,r3,10478 <__adddf3+0x45c>
   10154:	00800804 	movi	r2,32
   10158:	10c5c83a 	sub	r2,r2,r3
   1015c:	408e983a 	sll	r7,r8,r2
   10160:	30c8d83a 	srl	r4,r6,r3
   10164:	3084983a 	sll	r2,r6,r2
   10168:	40c6d83a 	srl	r3,r8,r3
   1016c:	390cb03a 	or	r6,r7,r4
   10170:	1004c03a 	cmpne	r2,r2,zero
   10174:	308cb03a 	or	r6,r6,r2
   10178:	898dc83a 	sub	r6,r17,r6
   1017c:	89a3803a 	cmpltu	r17,r17,r6
   10180:	28cbc83a 	sub	r5,r5,r3
   10184:	2c4bc83a 	sub	r5,r5,r17
   10188:	3023883a 	mov	r17,r6
   1018c:	2880202c 	andhi	r2,r5,128
   10190:	10006d26 	beq	r2,zero,10348 <__adddf3+0x32c>
   10194:	04c02034 	movhi	r19,128
   10198:	9cffffc4 	addi	r19,r19,-1
   1019c:	2ce6703a 	and	r19,r5,r19
   101a0:	98007e26 	beq	r19,zero,1039c <__adddf3+0x380>
   101a4:	9809883a 	mov	r4,r19
   101a8:	00125b80 	call	125b8 <__clzsi2>
   101ac:	10fffe04 	addi	r3,r2,-8
   101b0:	010007c4 	movi	r4,31
   101b4:	20c07f16 	blt	r4,r3,103b4 <__adddf3+0x398>
   101b8:	01400a04 	movi	r5,40
   101bc:	2885c83a 	sub	r2,r5,r2
   101c0:	888ad83a 	srl	r5,r17,r2
   101c4:	98e6983a 	sll	r19,r19,r3
   101c8:	88e2983a 	sll	r17,r17,r3
   101cc:	2ce6b03a 	or	r19,r5,r19
   101d0:	1c007c16 	blt	r3,r16,103c4 <__adddf3+0x3a8>
   101d4:	1c21c83a 	sub	r16,r3,r16
   101d8:	81400044 	addi	r5,r16,1
   101dc:	00c007c4 	movi	r3,31
   101e0:	19409816 	blt	r3,r5,10444 <__adddf3+0x428>
   101e4:	1c21c83a 	sub	r16,r3,r16
   101e8:	8c08983a 	sll	r4,r17,r16
   101ec:	8946d83a 	srl	r3,r17,r5
   101f0:	9c20983a 	sll	r16,r19,r16
   101f4:	2008c03a 	cmpne	r4,r4,zero
   101f8:	994ad83a 	srl	r5,r19,r5
   101fc:	1c06b03a 	or	r3,r3,r16
   10200:	1922b03a 	or	r17,r3,r4
   10204:	0021883a 	mov	r16,zero
   10208:	003fa306 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   1020c:	2880202c 	andhi	r2,r5,128
   10210:	9007883a 	mov	r3,r18
   10214:	103fac1e 	bne	r2,zero,100c8 <__alt_mem_Flash_flash_data+0xf40100c8>
   10218:	2804977a 	slli	r2,r5,29
   1021c:	8822d0fa 	srli	r17,r17,3
   10220:	0101ffc4 	movi	r4,2047
   10224:	280ad0fa 	srli	r5,r5,3
   10228:	1444b03a 	or	r2,r2,r17
   1022c:	81002c26 	beq	r16,r4,102e0 <__adddf3+0x2c4>
   10230:	8120703a 	and	r16,r16,r4
   10234:	01000434 	movhi	r4,16
   10238:	213fffc4 	addi	r4,r4,-1
   1023c:	2908703a 	and	r4,r5,r4
   10240:	003fad06 	br	100f8 <__alt_mem_Flash_flash_data+0xf40100f8>
   10244:	8089c83a 	sub	r4,r16,r2
   10248:	01006a0e 	bge	zero,r4,103f4 <__adddf3+0x3d8>
   1024c:	10003326 	beq	r2,zero,1031c <__adddf3+0x300>
   10250:	0081ffc4 	movi	r2,2047
   10254:	80bf9026 	beq	r16,r2,10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10258:	42002034 	orhi	r8,r8,128
   1025c:	00800e04 	movi	r2,56
   10260:	1100b116 	blt	r2,r4,10528 <__adddf3+0x50c>
   10264:	008007c4 	movi	r2,31
   10268:	1100e216 	blt	r2,r4,105f4 <__adddf3+0x5d8>
   1026c:	00800804 	movi	r2,32
   10270:	1105c83a 	sub	r2,r2,r4
   10274:	4092983a 	sll	r9,r8,r2
   10278:	310ed83a 	srl	r7,r6,r4
   1027c:	3084983a 	sll	r2,r6,r2
   10280:	4110d83a 	srl	r8,r8,r4
   10284:	49ccb03a 	or	r6,r9,r7
   10288:	1004c03a 	cmpne	r2,r2,zero
   1028c:	308cb03a 	or	r6,r6,r2
   10290:	344d883a 	add	r6,r6,r17
   10294:	3463803a 	cmpltu	r17,r6,r17
   10298:	414b883a 	add	r5,r8,r5
   1029c:	2c4b883a 	add	r5,r5,r17
   102a0:	3023883a 	mov	r17,r6
   102a4:	2880202c 	andhi	r2,r5,128
   102a8:	10002726 	beq	r2,zero,10348 <__adddf3+0x32c>
   102ac:	84000044 	addi	r16,r16,1
   102b0:	0081ffc4 	movi	r2,2047
   102b4:	8080ae26 	beq	r16,r2,10570 <__adddf3+0x554>
   102b8:	00bfe034 	movhi	r2,65408
   102bc:	10bfffc4 	addi	r2,r2,-1
   102c0:	288a703a 	and	r5,r5,r2
   102c4:	880cd07a 	srli	r6,r17,1
   102c8:	280897fa 	slli	r4,r5,31
   102cc:	88c0004c 	andi	r3,r17,1
   102d0:	30e2b03a 	or	r17,r6,r3
   102d4:	280ad07a 	srli	r5,r5,1
   102d8:	8922b03a 	or	r17,r17,r4
   102dc:	003f6e06 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   102e0:	1148b03a 	or	r4,r2,r5
   102e4:	20003c26 	beq	r4,zero,103d8 <__adddf3+0x3bc>
   102e8:	29000234 	orhi	r4,r5,8
   102ec:	01400434 	movhi	r5,16
   102f0:	297fffc4 	addi	r5,r5,-1
   102f4:	2148703a 	and	r4,r4,r5
   102f8:	003f7f06 	br	100f8 <__alt_mem_Flash_flash_data+0xf40100f8>
   102fc:	18ffffc4 	addi	r3,r3,-1
   10300:	18004d1e 	bne	r3,zero,10438 <__adddf3+0x41c>
   10304:	898dc83a 	sub	r6,r17,r6
   10308:	89a3803a 	cmpltu	r17,r17,r6
   1030c:	2a0bc83a 	sub	r5,r5,r8
   10310:	2c4bc83a 	sub	r5,r5,r17
   10314:	3023883a 	mov	r17,r6
   10318:	003f9c06 	br	1018c <__alt_mem_Flash_flash_data+0xf401018c>
   1031c:	4184b03a 	or	r2,r8,r6
   10320:	103f5d26 	beq	r2,zero,10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10324:	213fffc4 	addi	r4,r4,-1
   10328:	203fd926 	beq	r4,zero,10290 <__alt_mem_Flash_flash_data+0xf4010290>
   1032c:	0081ffc4 	movi	r2,2047
   10330:	80bfca1e 	bne	r16,r2,1025c <__alt_mem_Flash_flash_data+0xf401025c>
   10334:	003f5806 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10338:	10c8b03a 	or	r4,r2,r3
   1033c:	20008b26 	beq	r4,zero,1056c <__adddf3+0x550>
   10340:	100b883a 	mov	r5,r2
   10344:	1823883a 	mov	r17,r3
   10348:	888001cc 	andi	r2,r17,7
   1034c:	103f541e 	bne	r2,zero,100a0 <__alt_mem_Flash_flash_data+0xf40100a0>
   10350:	9007883a 	mov	r3,r18
   10354:	003fb006 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   10358:	1800531e 	bne	r3,zero,104a8 <__adddf3+0x48c>
   1035c:	80800044 	addi	r2,r16,1
   10360:	1081ffcc 	andi	r2,r2,2047
   10364:	00c00044 	movi	r3,1
   10368:	1880990e 	bge	r3,r2,105d0 <__adddf3+0x5b4>
   1036c:	8985c83a 	sub	r2,r17,r6
   10370:	8887803a 	cmpltu	r3,r17,r2
   10374:	2a27c83a 	sub	r19,r5,r8
   10378:	98e7c83a 	sub	r19,r19,r3
   1037c:	98c0202c 	andhi	r3,r19,128
   10380:	18006226 	beq	r3,zero,1050c <__adddf3+0x4f0>
   10384:	3463c83a 	sub	r17,r6,r17
   10388:	4151c83a 	sub	r8,r8,r5
   1038c:	344d803a 	cmpltu	r6,r6,r17
   10390:	41a7c83a 	sub	r19,r8,r6
   10394:	3825883a 	mov	r18,r7
   10398:	983f821e 	bne	r19,zero,101a4 <__alt_mem_Flash_flash_data+0xf40101a4>
   1039c:	8809883a 	mov	r4,r17
   103a0:	00125b80 	call	125b8 <__clzsi2>
   103a4:	10800804 	addi	r2,r2,32
   103a8:	10fffe04 	addi	r3,r2,-8
   103ac:	010007c4 	movi	r4,31
   103b0:	20ff810e 	bge	r4,r3,101b8 <__alt_mem_Flash_flash_data+0xf40101b8>
   103b4:	14fff604 	addi	r19,r2,-40
   103b8:	8ce6983a 	sll	r19,r17,r19
   103bc:	0023883a 	mov	r17,zero
   103c0:	1c3f840e 	bge	r3,r16,101d4 <__alt_mem_Flash_flash_data+0xf40101d4>
   103c4:	017fe034 	movhi	r5,65408
   103c8:	297fffc4 	addi	r5,r5,-1
   103cc:	80e1c83a 	sub	r16,r16,r3
   103d0:	994a703a 	and	r5,r19,r5
   103d4:	003f3006 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   103d8:	0009883a 	mov	r4,zero
   103dc:	0005883a 	mov	r2,zero
   103e0:	003f4506 	br	100f8 <__alt_mem_Flash_flash_data+0xf40100f8>
   103e4:	418cb03a 	or	r6,r8,r6
   103e8:	300cc03a 	cmpne	r6,r6,zero
   103ec:	0007883a 	mov	r3,zero
   103f0:	003f6106 	br	10178 <__alt_mem_Flash_flash_data+0xf4010178>
   103f4:	2000921e 	bne	r4,zero,10640 <__adddf3+0x624>
   103f8:	80800044 	addi	r2,r16,1
   103fc:	11c1ffcc 	andi	r7,r2,2047
   10400:	01000044 	movi	r4,1
   10404:	21c0610e 	bge	r4,r7,1058c <__adddf3+0x570>
   10408:	0101ffc4 	movi	r4,2047
   1040c:	1100a326 	beq	r2,r4,1069c <__adddf3+0x680>
   10410:	344d883a 	add	r6,r6,r17
   10414:	3463803a 	cmpltu	r17,r6,r17
   10418:	414b883a 	add	r5,r8,r5
   1041c:	2c4b883a 	add	r5,r5,r17
   10420:	282297fa 	slli	r17,r5,31
   10424:	300cd07a 	srli	r6,r6,1
   10428:	280ad07a 	srli	r5,r5,1
   1042c:	1021883a 	mov	r16,r2
   10430:	89a2b03a 	or	r17,r17,r6
   10434:	003f1806 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10438:	0081ffc4 	movi	r2,2047
   1043c:	80bf411e 	bne	r16,r2,10144 <__alt_mem_Flash_flash_data+0xf4010144>
   10440:	003f1506 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10444:	80bff844 	addi	r2,r16,-31
   10448:	00c00804 	movi	r3,32
   1044c:	9884d83a 	srl	r2,r19,r2
   10450:	28c04a26 	beq	r5,r3,1057c <__adddf3+0x560>
   10454:	00c00fc4 	movi	r3,63
   10458:	1c21c83a 	sub	r16,r3,r16
   1045c:	9c26983a 	sll	r19,r19,r16
   10460:	9c62b03a 	or	r17,r19,r17
   10464:	8822c03a 	cmpne	r17,r17,zero
   10468:	88a2b03a 	or	r17,r17,r2
   1046c:	000b883a 	mov	r5,zero
   10470:	0021883a 	mov	r16,zero
   10474:	003fb406 	br	10348 <__alt_mem_Flash_flash_data+0xf4010348>
   10478:	18bff804 	addi	r2,r3,-32
   1047c:	01000804 	movi	r4,32
   10480:	4084d83a 	srl	r2,r8,r2
   10484:	19003f26 	beq	r3,r4,10584 <__adddf3+0x568>
   10488:	01001004 	movi	r4,64
   1048c:	20c7c83a 	sub	r3,r4,r3
   10490:	40d0983a 	sll	r8,r8,r3
   10494:	418cb03a 	or	r6,r8,r6
   10498:	300cc03a 	cmpne	r6,r6,zero
   1049c:	308cb03a 	or	r6,r6,r2
   104a0:	0007883a 	mov	r3,zero
   104a4:	003f3406 	br	10178 <__alt_mem_Flash_flash_data+0xf4010178>
   104a8:	80002326 	beq	r16,zero,10538 <__adddf3+0x51c>
   104ac:	0101ffc4 	movi	r4,2047
   104b0:	11005e26 	beq	r2,r4,1062c <__adddf3+0x610>
   104b4:	00c7c83a 	sub	r3,zero,r3
   104b8:	29402034 	orhi	r5,r5,128
   104bc:	01000e04 	movi	r4,56
   104c0:	20c07216 	blt	r4,r3,1068c <__adddf3+0x670>
   104c4:	010007c4 	movi	r4,31
   104c8:	20c0ce16 	blt	r4,r3,10804 <__adddf3+0x7e8>
   104cc:	01000804 	movi	r4,32
   104d0:	20c9c83a 	sub	r4,r4,r3
   104d4:	2914983a 	sll	r10,r5,r4
   104d8:	88d2d83a 	srl	r9,r17,r3
   104dc:	8908983a 	sll	r4,r17,r4
   104e0:	28c6d83a 	srl	r3,r5,r3
   104e4:	5262b03a 	or	r17,r10,r9
   104e8:	2008c03a 	cmpne	r4,r4,zero
   104ec:	8922b03a 	or	r17,r17,r4
   104f0:	3463c83a 	sub	r17,r6,r17
   104f4:	40c7c83a 	sub	r3,r8,r3
   104f8:	344d803a 	cmpltu	r6,r6,r17
   104fc:	198bc83a 	sub	r5,r3,r6
   10500:	1021883a 	mov	r16,r2
   10504:	3825883a 	mov	r18,r7
   10508:	003f2006 	br	1018c <__alt_mem_Flash_flash_data+0xf401018c>
   1050c:	9886b03a 	or	r3,r19,r2
   10510:	1800141e 	bne	r3,zero,10564 <__adddf3+0x548>
   10514:	0007883a 	mov	r3,zero
   10518:	000b883a 	mov	r5,zero
   1051c:	0023883a 	mov	r17,zero
   10520:	0021883a 	mov	r16,zero
   10524:	003f3c06 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   10528:	418cb03a 	or	r6,r8,r6
   1052c:	300cc03a 	cmpne	r6,r6,zero
   10530:	0011883a 	mov	r8,zero
   10534:	003f5606 	br	10290 <__alt_mem_Flash_flash_data+0xf4010290>
   10538:	2c48b03a 	or	r4,r5,r17
   1053c:	20003b26 	beq	r4,zero,1062c <__adddf3+0x610>
   10540:	00c6303a 	nor	r3,zero,r3
   10544:	1800371e 	bne	r3,zero,10624 <__adddf3+0x608>
   10548:	3463c83a 	sub	r17,r6,r17
   1054c:	414bc83a 	sub	r5,r8,r5
   10550:	344d803a 	cmpltu	r6,r6,r17
   10554:	298bc83a 	sub	r5,r5,r6
   10558:	1021883a 	mov	r16,r2
   1055c:	3825883a 	mov	r18,r7
   10560:	003f0a06 	br	1018c <__alt_mem_Flash_flash_data+0xf401018c>
   10564:	1023883a 	mov	r17,r2
   10568:	003f0d06 	br	101a0 <__alt_mem_Flash_flash_data+0xf40101a0>
   1056c:	0007883a 	mov	r3,zero
   10570:	000b883a 	mov	r5,zero
   10574:	0023883a 	mov	r17,zero
   10578:	003f2706 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   1057c:	0027883a 	mov	r19,zero
   10580:	003fb706 	br	10460 <__alt_mem_Flash_flash_data+0xf4010460>
   10584:	0011883a 	mov	r8,zero
   10588:	003fc206 	br	10494 <__alt_mem_Flash_flash_data+0xf4010494>
   1058c:	2c44b03a 	or	r2,r5,r17
   10590:	8000871e 	bne	r16,zero,107b0 <__adddf3+0x794>
   10594:	1000b126 	beq	r2,zero,1085c <__adddf3+0x840>
   10598:	4184b03a 	or	r2,r8,r6
   1059c:	103ebe26 	beq	r2,zero,10098 <__alt_mem_Flash_flash_data+0xf4010098>
   105a0:	3445883a 	add	r2,r6,r17
   105a4:	1463803a 	cmpltu	r17,r2,r17
   105a8:	414b883a 	add	r5,r8,r5
   105ac:	2c4b883a 	add	r5,r5,r17
   105b0:	28c0202c 	andhi	r3,r5,128
   105b4:	1023883a 	mov	r17,r2
   105b8:	183f6326 	beq	r3,zero,10348 <__alt_mem_Flash_flash_data+0xf4010348>
   105bc:	00bfe034 	movhi	r2,65408
   105c0:	10bfffc4 	addi	r2,r2,-1
   105c4:	2021883a 	mov	r16,r4
   105c8:	288a703a 	and	r5,r5,r2
   105cc:	003eb206 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   105d0:	2c44b03a 	or	r2,r5,r17
   105d4:	8000251e 	bne	r16,zero,1066c <__adddf3+0x650>
   105d8:	10004b1e 	bne	r2,zero,10708 <__adddf3+0x6ec>
   105dc:	4184b03a 	or	r2,r8,r6
   105e0:	103fe226 	beq	r2,zero,1056c <__alt_mem_Flash_flash_data+0xf401056c>
   105e4:	400b883a 	mov	r5,r8
   105e8:	3023883a 	mov	r17,r6
   105ec:	3825883a 	mov	r18,r7
   105f0:	003ea906 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   105f4:	20bff804 	addi	r2,r4,-32
   105f8:	01c00804 	movi	r7,32
   105fc:	4084d83a 	srl	r2,r8,r2
   10600:	21c07e26 	beq	r4,r7,107fc <__adddf3+0x7e0>
   10604:	01c01004 	movi	r7,64
   10608:	3909c83a 	sub	r4,r7,r4
   1060c:	4110983a 	sll	r8,r8,r4
   10610:	418cb03a 	or	r6,r8,r6
   10614:	300cc03a 	cmpne	r6,r6,zero
   10618:	308cb03a 	or	r6,r6,r2
   1061c:	0011883a 	mov	r8,zero
   10620:	003f1b06 	br	10290 <__alt_mem_Flash_flash_data+0xf4010290>
   10624:	0101ffc4 	movi	r4,2047
   10628:	113fa41e 	bne	r2,r4,104bc <__alt_mem_Flash_flash_data+0xf40104bc>
   1062c:	400b883a 	mov	r5,r8
   10630:	3023883a 	mov	r17,r6
   10634:	1021883a 	mov	r16,r2
   10638:	3825883a 	mov	r18,r7
   1063c:	003e9606 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10640:	80001a1e 	bne	r16,zero,106ac <__adddf3+0x690>
   10644:	2c4eb03a 	or	r7,r5,r17
   10648:	38005526 	beq	r7,zero,107a0 <__adddf3+0x784>
   1064c:	0108303a 	nor	r4,zero,r4
   10650:	2000511e 	bne	r4,zero,10798 <__adddf3+0x77c>
   10654:	89a3883a 	add	r17,r17,r6
   10658:	414b883a 	add	r5,r8,r5
   1065c:	898d803a 	cmpltu	r6,r17,r6
   10660:	298b883a 	add	r5,r5,r6
   10664:	1021883a 	mov	r16,r2
   10668:	003f0e06 	br	102a4 <__alt_mem_Flash_flash_data+0xf40102a4>
   1066c:	1000341e 	bne	r2,zero,10740 <__adddf3+0x724>
   10670:	4184b03a 	or	r2,r8,r6
   10674:	10006f26 	beq	r2,zero,10834 <__adddf3+0x818>
   10678:	400b883a 	mov	r5,r8
   1067c:	3023883a 	mov	r17,r6
   10680:	3825883a 	mov	r18,r7
   10684:	0401ffc4 	movi	r16,2047
   10688:	003e8306 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   1068c:	2c62b03a 	or	r17,r5,r17
   10690:	8822c03a 	cmpne	r17,r17,zero
   10694:	0007883a 	mov	r3,zero
   10698:	003f9506 	br	104f0 <__alt_mem_Flash_flash_data+0xf40104f0>
   1069c:	1021883a 	mov	r16,r2
   106a0:	000b883a 	mov	r5,zero
   106a4:	0023883a 	mov	r17,zero
   106a8:	003edb06 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   106ac:	01c1ffc4 	movi	r7,2047
   106b0:	11c03b26 	beq	r2,r7,107a0 <__adddf3+0x784>
   106b4:	0109c83a 	sub	r4,zero,r4
   106b8:	29402034 	orhi	r5,r5,128
   106bc:	01c00e04 	movi	r7,56
   106c0:	39006216 	blt	r7,r4,1084c <__adddf3+0x830>
   106c4:	01c007c4 	movi	r7,31
   106c8:	39006b16 	blt	r7,r4,10878 <__adddf3+0x85c>
   106cc:	01c00804 	movi	r7,32
   106d0:	390fc83a 	sub	r7,r7,r4
   106d4:	29d4983a 	sll	r10,r5,r7
   106d8:	8912d83a 	srl	r9,r17,r4
   106dc:	89ce983a 	sll	r7,r17,r7
   106e0:	2908d83a 	srl	r4,r5,r4
   106e4:	5262b03a 	or	r17,r10,r9
   106e8:	380ac03a 	cmpne	r5,r7,zero
   106ec:	8962b03a 	or	r17,r17,r5
   106f0:	89a3883a 	add	r17,r17,r6
   106f4:	2211883a 	add	r8,r4,r8
   106f8:	898d803a 	cmpltu	r6,r17,r6
   106fc:	418b883a 	add	r5,r8,r6
   10700:	1021883a 	mov	r16,r2
   10704:	003ee706 	br	102a4 <__alt_mem_Flash_flash_data+0xf40102a4>
   10708:	4184b03a 	or	r2,r8,r6
   1070c:	103e6226 	beq	r2,zero,10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10710:	8987c83a 	sub	r3,r17,r6
   10714:	88c9803a 	cmpltu	r4,r17,r3
   10718:	2a05c83a 	sub	r2,r5,r8
   1071c:	1105c83a 	sub	r2,r2,r4
   10720:	1100202c 	andhi	r4,r2,128
   10724:	203f0426 	beq	r4,zero,10338 <__alt_mem_Flash_flash_data+0xf4010338>
   10728:	3463c83a 	sub	r17,r6,r17
   1072c:	414bc83a 	sub	r5,r8,r5
   10730:	344d803a 	cmpltu	r6,r6,r17
   10734:	298bc83a 	sub	r5,r5,r6
   10738:	3825883a 	mov	r18,r7
   1073c:	003e5606 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10740:	4184b03a 	or	r2,r8,r6
   10744:	10002b26 	beq	r2,zero,107f4 <__adddf3+0x7d8>
   10748:	2804d0fa 	srli	r2,r5,3
   1074c:	8822d0fa 	srli	r17,r17,3
   10750:	280a977a 	slli	r5,r5,29
   10754:	10c0022c 	andhi	r3,r2,8
   10758:	2c62b03a 	or	r17,r5,r17
   1075c:	18000826 	beq	r3,zero,10780 <__adddf3+0x764>
   10760:	4008d0fa 	srli	r4,r8,3
   10764:	20c0022c 	andhi	r3,r4,8
   10768:	1800051e 	bne	r3,zero,10780 <__adddf3+0x764>
   1076c:	300cd0fa 	srli	r6,r6,3
   10770:	4010977a 	slli	r8,r8,29
   10774:	2005883a 	mov	r2,r4
   10778:	3825883a 	mov	r18,r7
   1077c:	41a2b03a 	or	r17,r8,r6
   10780:	880ad77a 	srli	r5,r17,29
   10784:	100490fa 	slli	r2,r2,3
   10788:	882290fa 	slli	r17,r17,3
   1078c:	0401ffc4 	movi	r16,2047
   10790:	288ab03a 	or	r5,r5,r2
   10794:	003e4006 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10798:	01c1ffc4 	movi	r7,2047
   1079c:	11ffc71e 	bne	r2,r7,106bc <__alt_mem_Flash_flash_data+0xf40106bc>
   107a0:	400b883a 	mov	r5,r8
   107a4:	3023883a 	mov	r17,r6
   107a8:	1021883a 	mov	r16,r2
   107ac:	003e3a06 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   107b0:	10002d26 	beq	r2,zero,10868 <__adddf3+0x84c>
   107b4:	4184b03a 	or	r2,r8,r6
   107b8:	10000e26 	beq	r2,zero,107f4 <__adddf3+0x7d8>
   107bc:	2804d0fa 	srli	r2,r5,3
   107c0:	8822d0fa 	srli	r17,r17,3
   107c4:	280a977a 	slli	r5,r5,29
   107c8:	10c0022c 	andhi	r3,r2,8
   107cc:	2c62b03a 	or	r17,r5,r17
   107d0:	183feb26 	beq	r3,zero,10780 <__alt_mem_Flash_flash_data+0xf4010780>
   107d4:	4008d0fa 	srli	r4,r8,3
   107d8:	20c0022c 	andhi	r3,r4,8
   107dc:	183fe81e 	bne	r3,zero,10780 <__alt_mem_Flash_flash_data+0xf4010780>
   107e0:	300cd0fa 	srli	r6,r6,3
   107e4:	4010977a 	slli	r8,r8,29
   107e8:	2005883a 	mov	r2,r4
   107ec:	41a2b03a 	or	r17,r8,r6
   107f0:	003fe306 	br	10780 <__alt_mem_Flash_flash_data+0xf4010780>
   107f4:	0401ffc4 	movi	r16,2047
   107f8:	003e2706 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   107fc:	0011883a 	mov	r8,zero
   10800:	003f8306 	br	10610 <__alt_mem_Flash_flash_data+0xf4010610>
   10804:	193ff804 	addi	r4,r3,-32
   10808:	02400804 	movi	r9,32
   1080c:	2908d83a 	srl	r4,r5,r4
   10810:	1a402526 	beq	r3,r9,108a8 <__adddf3+0x88c>
   10814:	02401004 	movi	r9,64
   10818:	48c7c83a 	sub	r3,r9,r3
   1081c:	28ca983a 	sll	r5,r5,r3
   10820:	2c62b03a 	or	r17,r5,r17
   10824:	8822c03a 	cmpne	r17,r17,zero
   10828:	8922b03a 	or	r17,r17,r4
   1082c:	0007883a 	mov	r3,zero
   10830:	003f2f06 	br	104f0 <__alt_mem_Flash_flash_data+0xf40104f0>
   10834:	01402034 	movhi	r5,128
   10838:	0007883a 	mov	r3,zero
   1083c:	297fffc4 	addi	r5,r5,-1
   10840:	047ffe04 	movi	r17,-8
   10844:	0401ffc4 	movi	r16,2047
   10848:	003e7306 	br	10218 <__alt_mem_Flash_flash_data+0xf4010218>
   1084c:	2c62b03a 	or	r17,r5,r17
   10850:	8822c03a 	cmpne	r17,r17,zero
   10854:	0009883a 	mov	r4,zero
   10858:	003fa506 	br	106f0 <__alt_mem_Flash_flash_data+0xf40106f0>
   1085c:	400b883a 	mov	r5,r8
   10860:	3023883a 	mov	r17,r6
   10864:	003e0c06 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10868:	400b883a 	mov	r5,r8
   1086c:	3023883a 	mov	r17,r6
   10870:	0401ffc4 	movi	r16,2047
   10874:	003e0806 	br	10098 <__alt_mem_Flash_flash_data+0xf4010098>
   10878:	21fff804 	addi	r7,r4,-32
   1087c:	02400804 	movi	r9,32
   10880:	29ced83a 	srl	r7,r5,r7
   10884:	22400a26 	beq	r4,r9,108b0 <__adddf3+0x894>
   10888:	02401004 	movi	r9,64
   1088c:	4909c83a 	sub	r4,r9,r4
   10890:	290a983a 	sll	r5,r5,r4
   10894:	2c62b03a 	or	r17,r5,r17
   10898:	8822c03a 	cmpne	r17,r17,zero
   1089c:	89e2b03a 	or	r17,r17,r7
   108a0:	0009883a 	mov	r4,zero
   108a4:	003f9206 	br	106f0 <__alt_mem_Flash_flash_data+0xf40106f0>
   108a8:	000b883a 	mov	r5,zero
   108ac:	003fdc06 	br	10820 <__alt_mem_Flash_flash_data+0xf4010820>
   108b0:	000b883a 	mov	r5,zero
   108b4:	003ff706 	br	10894 <__alt_mem_Flash_flash_data+0xf4010894>

000108b8 <__divdf3>:
   108b8:	defff204 	addi	sp,sp,-56
   108bc:	dd000815 	stw	r20,32(sp)
   108c0:	2828d53a 	srli	r20,r5,20
   108c4:	dd800a15 	stw	r22,40(sp)
   108c8:	282cd7fa 	srli	r22,r5,31
   108cc:	dc000415 	stw	r16,16(sp)
   108d0:	04000434 	movhi	r16,16
   108d4:	df000c15 	stw	fp,48(sp)
   108d8:	dcc00715 	stw	r19,28(sp)
   108dc:	dc800615 	stw	r18,24(sp)
   108e0:	dc400515 	stw	r17,20(sp)
   108e4:	843fffc4 	addi	r16,r16,-1
   108e8:	dfc00d15 	stw	ra,52(sp)
   108ec:	ddc00b15 	stw	r23,44(sp)
   108f0:	dd400915 	stw	r21,36(sp)
   108f4:	a501ffcc 	andi	r20,r20,2047
   108f8:	2025883a 	mov	r18,r4
   108fc:	2027883a 	mov	r19,r4
   10900:	2c22703a 	and	r17,r5,r16
   10904:	b7003fcc 	andi	fp,r22,255
   10908:	a0005e26 	beq	r20,zero,10a84 <__divdf3+0x1cc>
   1090c:	0081ffc4 	movi	r2,2047
   10910:	a0803526 	beq	r20,r2,109e8 <__divdf3+0x130>
   10914:	8c000434 	orhi	r16,r17,16
   10918:	2004d77a 	srli	r2,r4,29
   1091c:	802090fa 	slli	r16,r16,3
   10920:	202690fa 	slli	r19,r4,3
   10924:	a53f0044 	addi	r20,r20,-1023
   10928:	80a2b03a 	or	r17,r16,r2
   1092c:	0025883a 	mov	r18,zero
   10930:	0011883a 	mov	r8,zero
   10934:	380ad53a 	srli	r5,r7,20
   10938:	382ed7fa 	srli	r23,r7,31
   1093c:	04000434 	movhi	r16,16
   10940:	843fffc4 	addi	r16,r16,-1
   10944:	2941ffcc 	andi	r5,r5,2047
   10948:	302b883a 	mov	r21,r6
   1094c:	3c20703a 	and	r16,r7,r16
   10950:	ba403fcc 	andi	r9,r23,255
   10954:	28006726 	beq	r5,zero,10af4 <__divdf3+0x23c>
   10958:	0081ffc4 	movi	r2,2047
   1095c:	28805f26 	beq	r5,r2,10adc <__divdf3+0x224>
   10960:	84000434 	orhi	r16,r16,16
   10964:	3004d77a 	srli	r2,r6,29
   10968:	802090fa 	slli	r16,r16,3
   1096c:	302a90fa 	slli	r21,r6,3
   10970:	297f0044 	addi	r5,r5,-1023
   10974:	80a0b03a 	or	r16,r16,r2
   10978:	000f883a 	mov	r7,zero
   1097c:	3c86b03a 	or	r3,r7,r18
   10980:	180690ba 	slli	r3,r3,2
   10984:	00800074 	movhi	r2,1
   10988:	10826a04 	addi	r2,r2,2472
   1098c:	1887883a 	add	r3,r3,r2
   10990:	18c00017 	ldw	r3,0(r3)
   10994:	b5c8f03a 	xor	r4,r22,r23
   10998:	200d883a 	mov	r6,r4
   1099c:	24803fcc 	andi	r18,r4,255
   109a0:	a169c83a 	sub	r20,r20,r5
   109a4:	1800683a 	jmp	r3
   109a8:	00010bf0 	cmpltui	zero,zero,1071
   109ac:	00010a20 	cmpeqi	zero,zero,1064
   109b0:	00010bb4 	movhi	zero,1070
   109b4:	00010a04 	movi	zero,1064
   109b8:	00010bb4 	movhi	zero,1070
   109bc:	00010b88 	cmpgei	zero,zero,1070
   109c0:	00010bb4 	movhi	zero,1070
   109c4:	00010a04 	movi	zero,1064
   109c8:	00010a20 	cmpeqi	zero,zero,1064
   109cc:	00010a20 	cmpeqi	zero,zero,1064
   109d0:	00010b88 	cmpgei	zero,zero,1070
   109d4:	00010a04 	movi	zero,1064
   109d8:	00010a14 	movui	zero,1064
   109dc:	00010a14 	movui	zero,1064
   109e0:	00010a14 	movui	zero,1064
   109e4:	00010bc4 	movi	zero,1071
   109e8:	8904b03a 	or	r2,r17,r4
   109ec:	1000631e 	bne	r2,zero,10b7c <__divdf3+0x2c4>
   109f0:	04800204 	movi	r18,8
   109f4:	0023883a 	mov	r17,zero
   109f8:	0027883a 	mov	r19,zero
   109fc:	02000084 	movi	r8,2
   10a00:	003fcc06 	br	10934 <__alt_mem_Flash_flash_data+0xf4010934>
   10a04:	8023883a 	mov	r17,r16
   10a08:	a827883a 	mov	r19,r21
   10a0c:	4839883a 	mov	fp,r9
   10a10:	3811883a 	mov	r8,r7
   10a14:	00800084 	movi	r2,2
   10a18:	40812a1e 	bne	r8,r2,10ec4 <__divdf3+0x60c>
   10a1c:	e025883a 	mov	r18,fp
   10a20:	9180004c 	andi	r6,r18,1
   10a24:	0101ffc4 	movi	r4,2047
   10a28:	000b883a 	mov	r5,zero
   10a2c:	0027883a 	mov	r19,zero
   10a30:	2008953a 	slli	r4,r4,20
   10a34:	30c03fcc 	andi	r3,r6,255
   10a38:	04000434 	movhi	r16,16
   10a3c:	180697fa 	slli	r3,r3,31
   10a40:	843fffc4 	addi	r16,r16,-1
   10a44:	2c20703a 	and	r16,r5,r16
   10a48:	8120b03a 	or	r16,r16,r4
   10a4c:	80c6b03a 	or	r3,r16,r3
   10a50:	9805883a 	mov	r2,r19
   10a54:	dfc00d17 	ldw	ra,52(sp)
   10a58:	df000c17 	ldw	fp,48(sp)
   10a5c:	ddc00b17 	ldw	r23,44(sp)
   10a60:	dd800a17 	ldw	r22,40(sp)
   10a64:	dd400917 	ldw	r21,36(sp)
   10a68:	dd000817 	ldw	r20,32(sp)
   10a6c:	dcc00717 	ldw	r19,28(sp)
   10a70:	dc800617 	ldw	r18,24(sp)
   10a74:	dc400517 	ldw	r17,20(sp)
   10a78:	dc000417 	ldw	r16,16(sp)
   10a7c:	dec00e04 	addi	sp,sp,56
   10a80:	f800283a 	ret
   10a84:	8904b03a 	or	r2,r17,r4
   10a88:	10003726 	beq	r2,zero,10b68 <__divdf3+0x2b0>
   10a8c:	88011c26 	beq	r17,zero,10f00 <__divdf3+0x648>
   10a90:	8809883a 	mov	r4,r17
   10a94:	d9800315 	stw	r6,12(sp)
   10a98:	d9c00115 	stw	r7,4(sp)
   10a9c:	00125b80 	call	125b8 <__clzsi2>
   10aa0:	d9800317 	ldw	r6,12(sp)
   10aa4:	d9c00117 	ldw	r7,4(sp)
   10aa8:	1007883a 	mov	r3,r2
   10aac:	01000a04 	movi	r4,40
   10ab0:	1cfffe04 	addi	r19,r3,-8
   10ab4:	20c9c83a 	sub	r4,r4,r3
   10ab8:	8cca983a 	sll	r5,r17,r19
   10abc:	9108d83a 	srl	r4,r18,r4
   10ac0:	94e6983a 	sll	r19,r18,r19
   10ac4:	2162b03a 	or	r17,r4,r5
   10ac8:	053f0344 	movi	r20,-1011
   10acc:	a0e9c83a 	sub	r20,r20,r3
   10ad0:	0025883a 	mov	r18,zero
   10ad4:	0011883a 	mov	r8,zero
   10ad8:	003f9606 	br	10934 <__alt_mem_Flash_flash_data+0xf4010934>
   10adc:	8184b03a 	or	r2,r16,r6
   10ae0:	10001f1e 	bne	r2,zero,10b60 <__divdf3+0x2a8>
   10ae4:	0021883a 	mov	r16,zero
   10ae8:	002b883a 	mov	r21,zero
   10aec:	01c00084 	movi	r7,2
   10af0:	003fa206 	br	1097c <__alt_mem_Flash_flash_data+0xf401097c>
   10af4:	8184b03a 	or	r2,r16,r6
   10af8:	10001526 	beq	r2,zero,10b50 <__divdf3+0x298>
   10afc:	80010c26 	beq	r16,zero,10f30 <__divdf3+0x678>
   10b00:	8009883a 	mov	r4,r16
   10b04:	d9800315 	stw	r6,12(sp)
   10b08:	da000215 	stw	r8,8(sp)
   10b0c:	da400015 	stw	r9,0(sp)
   10b10:	00125b80 	call	125b8 <__clzsi2>
   10b14:	d9800317 	ldw	r6,12(sp)
   10b18:	da000217 	ldw	r8,8(sp)
   10b1c:	da400017 	ldw	r9,0(sp)
   10b20:	1007883a 	mov	r3,r2
   10b24:	01000a04 	movi	r4,40
   10b28:	1d7ffe04 	addi	r21,r3,-8
   10b2c:	20c9c83a 	sub	r4,r4,r3
   10b30:	8560983a 	sll	r16,r16,r21
   10b34:	3108d83a 	srl	r4,r6,r4
   10b38:	356a983a 	sll	r21,r6,r21
   10b3c:	2420b03a 	or	r16,r4,r16
   10b40:	017f0344 	movi	r5,-1011
   10b44:	28cbc83a 	sub	r5,r5,r3
   10b48:	000f883a 	mov	r7,zero
   10b4c:	003f8b06 	br	1097c <__alt_mem_Flash_flash_data+0xf401097c>
   10b50:	0021883a 	mov	r16,zero
   10b54:	002b883a 	mov	r21,zero
   10b58:	01c00044 	movi	r7,1
   10b5c:	003f8706 	br	1097c <__alt_mem_Flash_flash_data+0xf401097c>
   10b60:	01c000c4 	movi	r7,3
   10b64:	003f8506 	br	1097c <__alt_mem_Flash_flash_data+0xf401097c>
   10b68:	04800104 	movi	r18,4
   10b6c:	0023883a 	mov	r17,zero
   10b70:	0027883a 	mov	r19,zero
   10b74:	02000044 	movi	r8,1
   10b78:	003f6e06 	br	10934 <__alt_mem_Flash_flash_data+0xf4010934>
   10b7c:	04800304 	movi	r18,12
   10b80:	020000c4 	movi	r8,3
   10b84:	003f6b06 	br	10934 <__alt_mem_Flash_flash_data+0xf4010934>
   10b88:	01400434 	movhi	r5,16
   10b8c:	000d883a 	mov	r6,zero
   10b90:	297fffc4 	addi	r5,r5,-1
   10b94:	04ffffc4 	movi	r19,-1
   10b98:	0101ffc4 	movi	r4,2047
   10b9c:	003fa406 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   10ba0:	043f0084 	movi	r16,-1022
   10ba4:	8521c83a 	sub	r16,r16,r20
   10ba8:	00800e04 	movi	r2,56
   10bac:	1401200e 	bge	r2,r16,11030 <__divdf3+0x778>
   10bb0:	9180004c 	andi	r6,r18,1
   10bb4:	0009883a 	mov	r4,zero
   10bb8:	000b883a 	mov	r5,zero
   10bbc:	0027883a 	mov	r19,zero
   10bc0:	003f9b06 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   10bc4:	8880022c 	andhi	r2,r17,8
   10bc8:	1000c726 	beq	r2,zero,10ee8 <__divdf3+0x630>
   10bcc:	8080022c 	andhi	r2,r16,8
   10bd0:	1000c51e 	bne	r2,zero,10ee8 <__divdf3+0x630>
   10bd4:	00800434 	movhi	r2,16
   10bd8:	81400234 	orhi	r5,r16,8
   10bdc:	10bfffc4 	addi	r2,r2,-1
   10be0:	b80d883a 	mov	r6,r23
   10be4:	288a703a 	and	r5,r5,r2
   10be8:	a827883a 	mov	r19,r21
   10bec:	003fea06 	br	10b98 <__alt_mem_Flash_flash_data+0xf4010b98>
   10bf0:	8440ea36 	bltu	r16,r17,10f9c <__divdf3+0x6e4>
   10bf4:	8c00e826 	beq	r17,r16,10f98 <__divdf3+0x6e0>
   10bf8:	a53fffc4 	addi	r20,r20,-1
   10bfc:	882d883a 	mov	r22,r17
   10c00:	000d883a 	mov	r6,zero
   10c04:	a804d63a 	srli	r2,r21,24
   10c08:	8020923a 	slli	r16,r16,8
   10c0c:	b009883a 	mov	r4,r22
   10c10:	d9800315 	stw	r6,12(sp)
   10c14:	1420b03a 	or	r16,r2,r16
   10c18:	802ed43a 	srli	r23,r16,16
   10c1c:	873fffcc 	andi	fp,r16,65535
   10c20:	a82a923a 	slli	r21,r21,8
   10c24:	b80b883a 	mov	r5,r23
   10c28:	001000c0 	call	1000c <__udivsi3>
   10c2c:	b009883a 	mov	r4,r22
   10c30:	b80b883a 	mov	r5,r23
   10c34:	1023883a 	mov	r17,r2
   10c38:	00100140 	call	10014 <__umodsi3>
   10c3c:	1004943a 	slli	r2,r2,16
   10c40:	9808d43a 	srli	r4,r19,16
   10c44:	8f2d383a 	mul	r22,r17,fp
   10c48:	d9800317 	ldw	r6,12(sp)
   10c4c:	1106b03a 	or	r3,r2,r4
   10c50:	1d80062e 	bgeu	r3,r22,10c6c <__divdf3+0x3b4>
   10c54:	1c07883a 	add	r3,r3,r16
   10c58:	88bfffc4 	addi	r2,r17,-1
   10c5c:	1c00dc36 	bltu	r3,r16,10fd0 <__divdf3+0x718>
   10c60:	1d80db2e 	bgeu	r3,r22,10fd0 <__divdf3+0x718>
   10c64:	8c7fff84 	addi	r17,r17,-2
   10c68:	1c07883a 	add	r3,r3,r16
   10c6c:	1dadc83a 	sub	r22,r3,r22
   10c70:	b009883a 	mov	r4,r22
   10c74:	b80b883a 	mov	r5,r23
   10c78:	d9800315 	stw	r6,12(sp)
   10c7c:	001000c0 	call	1000c <__udivsi3>
   10c80:	b009883a 	mov	r4,r22
   10c84:	b80b883a 	mov	r5,r23
   10c88:	d8800015 	stw	r2,0(sp)
   10c8c:	00100140 	call	10014 <__umodsi3>
   10c90:	da400017 	ldw	r9,0(sp)
   10c94:	1004943a 	slli	r2,r2,16
   10c98:	9cffffcc 	andi	r19,r19,65535
   10c9c:	4f07383a 	mul	r3,r9,fp
   10ca0:	14c8b03a 	or	r4,r2,r19
   10ca4:	d9800317 	ldw	r6,12(sp)
   10ca8:	20c0062e 	bgeu	r4,r3,10cc4 <__divdf3+0x40c>
   10cac:	2409883a 	add	r4,r4,r16
   10cb0:	48bfffc4 	addi	r2,r9,-1
   10cb4:	2400c436 	bltu	r4,r16,10fc8 <__divdf3+0x710>
   10cb8:	20c0c32e 	bgeu	r4,r3,10fc8 <__divdf3+0x710>
   10cbc:	4a7fff84 	addi	r9,r9,-2
   10cc0:	2409883a 	add	r4,r4,r16
   10cc4:	8822943a 	slli	r17,r17,16
   10cc8:	a80ed43a 	srli	r7,r21,16
   10ccc:	aa3fffcc 	andi	r8,r21,65535
   10cd0:	4c62b03a 	or	r17,r9,r17
   10cd4:	8816d43a 	srli	r11,r17,16
   10cd8:	897fffcc 	andi	r5,r17,65535
   10cdc:	2a15383a 	mul	r10,r5,r8
   10ce0:	5a19383a 	mul	r12,r11,r8
   10ce4:	29cb383a 	mul	r5,r5,r7
   10ce8:	5012d43a 	srli	r9,r10,16
   10cec:	20c5c83a 	sub	r2,r4,r3
   10cf0:	614b883a 	add	r5,r12,r5
   10cf4:	2a4b883a 	add	r5,r5,r9
   10cf8:	59c7383a 	mul	r3,r11,r7
   10cfc:	2b00022e 	bgeu	r5,r12,10d08 <__divdf3+0x450>
   10d00:	01000074 	movhi	r4,1
   10d04:	1907883a 	add	r3,r3,r4
   10d08:	2808d43a 	srli	r4,r5,16
   10d0c:	280a943a 	slli	r5,r5,16
   10d10:	54ffffcc 	andi	r19,r10,65535
   10d14:	1907883a 	add	r3,r3,r4
   10d18:	2ccb883a 	add	r5,r5,r19
   10d1c:	10c09336 	bltu	r2,r3,10f6c <__divdf3+0x6b4>
   10d20:	10c0ad26 	beq	r2,r3,10fd8 <__divdf3+0x720>
   10d24:	10c7c83a 	sub	r3,r2,r3
   10d28:	3167c83a 	sub	r19,r6,r5
   10d2c:	34ed803a 	cmpltu	r22,r6,r19
   10d30:	1dadc83a 	sub	r22,r3,r22
   10d34:	b400b226 	beq	r22,r16,11000 <__divdf3+0x748>
   10d38:	b009883a 	mov	r4,r22
   10d3c:	b80b883a 	mov	r5,r23
   10d40:	d9c00115 	stw	r7,4(sp)
   10d44:	da000215 	stw	r8,8(sp)
   10d48:	001000c0 	call	1000c <__udivsi3>
   10d4c:	b009883a 	mov	r4,r22
   10d50:	b80b883a 	mov	r5,r23
   10d54:	d8800315 	stw	r2,12(sp)
   10d58:	00100140 	call	10014 <__umodsi3>
   10d5c:	d9800317 	ldw	r6,12(sp)
   10d60:	1004943a 	slli	r2,r2,16
   10d64:	9808d43a 	srli	r4,r19,16
   10d68:	372d383a 	mul	r22,r6,fp
   10d6c:	d9c00117 	ldw	r7,4(sp)
   10d70:	1106b03a 	or	r3,r2,r4
   10d74:	da000217 	ldw	r8,8(sp)
   10d78:	1d80062e 	bgeu	r3,r22,10d94 <__divdf3+0x4dc>
   10d7c:	1c07883a 	add	r3,r3,r16
   10d80:	30bfffc4 	addi	r2,r6,-1
   10d84:	1c00a036 	bltu	r3,r16,11008 <__divdf3+0x750>
   10d88:	1d809f2e 	bgeu	r3,r22,11008 <__divdf3+0x750>
   10d8c:	31bfff84 	addi	r6,r6,-2
   10d90:	1c07883a 	add	r3,r3,r16
   10d94:	1dadc83a 	sub	r22,r3,r22
   10d98:	b009883a 	mov	r4,r22
   10d9c:	b80b883a 	mov	r5,r23
   10da0:	d9800315 	stw	r6,12(sp)
   10da4:	d9c00115 	stw	r7,4(sp)
   10da8:	da000215 	stw	r8,8(sp)
   10dac:	001000c0 	call	1000c <__udivsi3>
   10db0:	b009883a 	mov	r4,r22
   10db4:	b80b883a 	mov	r5,r23
   10db8:	d8800015 	stw	r2,0(sp)
   10dbc:	00100140 	call	10014 <__umodsi3>
   10dc0:	da400017 	ldw	r9,0(sp)
   10dc4:	1004943a 	slli	r2,r2,16
   10dc8:	993fffcc 	andi	r4,r19,65535
   10dcc:	4f39383a 	mul	fp,r9,fp
   10dd0:	1106b03a 	or	r3,r2,r4
   10dd4:	d9800317 	ldw	r6,12(sp)
   10dd8:	d9c00117 	ldw	r7,4(sp)
   10ddc:	da000217 	ldw	r8,8(sp)
   10de0:	1f00062e 	bgeu	r3,fp,10dfc <__divdf3+0x544>
   10de4:	1c07883a 	add	r3,r3,r16
   10de8:	48bfffc4 	addi	r2,r9,-1
   10dec:	1c008836 	bltu	r3,r16,11010 <__divdf3+0x758>
   10df0:	1f00872e 	bgeu	r3,fp,11010 <__divdf3+0x758>
   10df4:	4a7fff84 	addi	r9,r9,-2
   10df8:	1c07883a 	add	r3,r3,r16
   10dfc:	3008943a 	slli	r4,r6,16
   10e00:	1f07c83a 	sub	r3,r3,fp
   10e04:	4926b03a 	or	r19,r9,r4
   10e08:	993fffcc 	andi	r4,r19,65535
   10e0c:	980cd43a 	srli	r6,r19,16
   10e10:	220b383a 	mul	r5,r4,r8
   10e14:	21c5383a 	mul	r2,r4,r7
   10e18:	3211383a 	mul	r8,r6,r8
   10e1c:	2808d43a 	srli	r4,r5,16
   10e20:	31cf383a 	mul	r7,r6,r7
   10e24:	4085883a 	add	r2,r8,r2
   10e28:	1105883a 	add	r2,r2,r4
   10e2c:	1200022e 	bgeu	r2,r8,10e38 <__divdf3+0x580>
   10e30:	01000074 	movhi	r4,1
   10e34:	390f883a 	add	r7,r7,r4
   10e38:	1008d43a 	srli	r4,r2,16
   10e3c:	1004943a 	slli	r2,r2,16
   10e40:	297fffcc 	andi	r5,r5,65535
   10e44:	390f883a 	add	r7,r7,r4
   10e48:	1145883a 	add	r2,r2,r5
   10e4c:	19c06536 	bltu	r3,r7,10fe4 <__divdf3+0x72c>
   10e50:	19c09f26 	beq	r3,r7,110d0 <__divdf3+0x818>
   10e54:	9cc00054 	ori	r19,r19,1
   10e58:	a100ffc4 	addi	r4,r20,1023
   10e5c:	013f500e 	bge	zero,r4,10ba0 <__alt_mem_Flash_flash_data+0xf4010ba0>
   10e60:	988001cc 	andi	r2,r19,7
   10e64:	10000726 	beq	r2,zero,10e84 <__divdf3+0x5cc>
   10e68:	98c003cc 	andi	r3,r19,15
   10e6c:	00800104 	movi	r2,4
   10e70:	18800426 	beq	r3,r2,10e84 <__divdf3+0x5cc>
   10e74:	9885883a 	add	r2,r19,r2
   10e78:	14e1803a 	cmpltu	r16,r2,r19
   10e7c:	8c23883a 	add	r17,r17,r16
   10e80:	1027883a 	mov	r19,r2
   10e84:	8880402c 	andhi	r2,r17,256
   10e88:	10000426 	beq	r2,zero,10e9c <__divdf3+0x5e4>
   10e8c:	00bfc034 	movhi	r2,65280
   10e90:	10bfffc4 	addi	r2,r2,-1
   10e94:	a1010004 	addi	r4,r20,1024
   10e98:	88a2703a 	and	r17,r17,r2
   10e9c:	0081ff84 	movi	r2,2046
   10ea0:	113edf16 	blt	r2,r4,10a20 <__alt_mem_Flash_flash_data+0xf4010a20>
   10ea4:	9826d0fa 	srli	r19,r19,3
   10ea8:	8804977a 	slli	r2,r17,29
   10eac:	8820927a 	slli	r16,r17,9
   10eb0:	2101ffcc 	andi	r4,r4,2047
   10eb4:	14e6b03a 	or	r19,r2,r19
   10eb8:	800ad33a 	srli	r5,r16,12
   10ebc:	9180004c 	andi	r6,r18,1
   10ec0:	003edb06 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   10ec4:	008000c4 	movi	r2,3
   10ec8:	4080a826 	beq	r8,r2,1116c <__divdf3+0x8b4>
   10ecc:	00800044 	movi	r2,1
   10ed0:	4080551e 	bne	r8,r2,11028 <__divdf3+0x770>
   10ed4:	e00d883a 	mov	r6,fp
   10ed8:	0009883a 	mov	r4,zero
   10edc:	000b883a 	mov	r5,zero
   10ee0:	0027883a 	mov	r19,zero
   10ee4:	003ed206 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   10ee8:	00800434 	movhi	r2,16
   10eec:	89400234 	orhi	r5,r17,8
   10ef0:	10bfffc4 	addi	r2,r2,-1
   10ef4:	b00d883a 	mov	r6,r22
   10ef8:	288a703a 	and	r5,r5,r2
   10efc:	003f2606 	br	10b98 <__alt_mem_Flash_flash_data+0xf4010b98>
   10f00:	d9800315 	stw	r6,12(sp)
   10f04:	d9c00115 	stw	r7,4(sp)
   10f08:	00125b80 	call	125b8 <__clzsi2>
   10f0c:	10c00804 	addi	r3,r2,32
   10f10:	010009c4 	movi	r4,39
   10f14:	d9800317 	ldw	r6,12(sp)
   10f18:	d9c00117 	ldw	r7,4(sp)
   10f1c:	20fee30e 	bge	r4,r3,10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10f20:	117ffe04 	addi	r5,r2,-8
   10f24:	9162983a 	sll	r17,r18,r5
   10f28:	0027883a 	mov	r19,zero
   10f2c:	003ee606 	br	10ac8 <__alt_mem_Flash_flash_data+0xf4010ac8>
   10f30:	3009883a 	mov	r4,r6
   10f34:	d9800315 	stw	r6,12(sp)
   10f38:	da000215 	stw	r8,8(sp)
   10f3c:	da400015 	stw	r9,0(sp)
   10f40:	00125b80 	call	125b8 <__clzsi2>
   10f44:	10c00804 	addi	r3,r2,32
   10f48:	010009c4 	movi	r4,39
   10f4c:	d9800317 	ldw	r6,12(sp)
   10f50:	da000217 	ldw	r8,8(sp)
   10f54:	da400017 	ldw	r9,0(sp)
   10f58:	20fef20e 	bge	r4,r3,10b24 <__alt_mem_Flash_flash_data+0xf4010b24>
   10f5c:	10bffe04 	addi	r2,r2,-8
   10f60:	a8a0983a 	sll	r16,r21,r2
   10f64:	002b883a 	mov	r21,zero
   10f68:	003ef506 	br	10b40 <__alt_mem_Flash_flash_data+0xf4010b40>
   10f6c:	354d883a 	add	r6,r6,r21
   10f70:	3549803a 	cmpltu	r4,r6,r21
   10f74:	2409883a 	add	r4,r4,r16
   10f78:	2089883a 	add	r4,r4,r2
   10f7c:	88bfffc4 	addi	r2,r17,-1
   10f80:	81000c2e 	bgeu	r16,r4,10fb4 <__divdf3+0x6fc>
   10f84:	20c04436 	bltu	r4,r3,11098 <__divdf3+0x7e0>
   10f88:	19006f26 	beq	r3,r4,11148 <__divdf3+0x890>
   10f8c:	20c7c83a 	sub	r3,r4,r3
   10f90:	1023883a 	mov	r17,r2
   10f94:	003f6406 	br	10d28 <__alt_mem_Flash_flash_data+0xf4010d28>
   10f98:	9d7f1736 	bltu	r19,r21,10bf8 <__alt_mem_Flash_flash_data+0xf4010bf8>
   10f9c:	9806d07a 	srli	r3,r19,1
   10fa0:	880497fa 	slli	r2,r17,31
   10fa4:	980c97fa 	slli	r6,r19,31
   10fa8:	882cd07a 	srli	r22,r17,1
   10fac:	18a6b03a 	or	r19,r3,r2
   10fb0:	003f1406 	br	10c04 <__alt_mem_Flash_flash_data+0xf4010c04>
   10fb4:	243ff51e 	bne	r4,r16,10f8c <__alt_mem_Flash_flash_data+0xf4010f8c>
   10fb8:	357ff22e 	bgeu	r6,r21,10f84 <__alt_mem_Flash_flash_data+0xf4010f84>
   10fbc:	80c7c83a 	sub	r3,r16,r3
   10fc0:	1023883a 	mov	r17,r2
   10fc4:	003f5806 	br	10d28 <__alt_mem_Flash_flash_data+0xf4010d28>
   10fc8:	1013883a 	mov	r9,r2
   10fcc:	003f3d06 	br	10cc4 <__alt_mem_Flash_flash_data+0xf4010cc4>
   10fd0:	1023883a 	mov	r17,r2
   10fd4:	003f2506 	br	10c6c <__alt_mem_Flash_flash_data+0xf4010c6c>
   10fd8:	317fe436 	bltu	r6,r5,10f6c <__alt_mem_Flash_flash_data+0xf4010f6c>
   10fdc:	0007883a 	mov	r3,zero
   10fe0:	003f5106 	br	10d28 <__alt_mem_Flash_flash_data+0xf4010d28>
   10fe4:	1c07883a 	add	r3,r3,r16
   10fe8:	993fffc4 	addi	r4,r19,-1
   10fec:	1c000a2e 	bgeu	r3,r16,11018 <__divdf3+0x760>
   10ff0:	2027883a 	mov	r19,r4
   10ff4:	19ff971e 	bne	r3,r7,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10ff8:	a8bf961e 	bne	r21,r2,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   10ffc:	003f9606 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   11000:	04ffffc4 	movi	r19,-1
   11004:	003f9406 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   11008:	100d883a 	mov	r6,r2
   1100c:	003f6106 	br	10d94 <__alt_mem_Flash_flash_data+0xf4010d94>
   11010:	1013883a 	mov	r9,r2
   11014:	003f7906 	br	10dfc <__alt_mem_Flash_flash_data+0xf4010dfc>
   11018:	19c02636 	bltu	r3,r7,110b4 <__divdf3+0x7fc>
   1101c:	38c04d26 	beq	r7,r3,11154 <__divdf3+0x89c>
   11020:	2027883a 	mov	r19,r4
   11024:	003f8b06 	br	10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   11028:	e025883a 	mov	r18,fp
   1102c:	003f8a06 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   11030:	008007c4 	movi	r2,31
   11034:	14002a16 	blt	r2,r16,110e0 <__divdf3+0x828>
   11038:	a5010784 	addi	r20,r20,1054
   1103c:	8d04983a 	sll	r2,r17,r20
   11040:	9c06d83a 	srl	r3,r19,r16
   11044:	9d28983a 	sll	r20,r19,r20
   11048:	8c20d83a 	srl	r16,r17,r16
   1104c:	1886b03a 	or	r3,r3,r2
   11050:	a004c03a 	cmpne	r2,r20,zero
   11054:	1884b03a 	or	r2,r3,r2
   11058:	10c001cc 	andi	r3,r2,7
   1105c:	18000726 	beq	r3,zero,1107c <__divdf3+0x7c4>
   11060:	110003cc 	andi	r4,r2,15
   11064:	00c00104 	movi	r3,4
   11068:	20c00426 	beq	r4,r3,1107c <__divdf3+0x7c4>
   1106c:	10c00104 	addi	r3,r2,4
   11070:	1885803a 	cmpltu	r2,r3,r2
   11074:	80a1883a 	add	r16,r16,r2
   11078:	1805883a 	mov	r2,r3
   1107c:	80c0202c 	andhi	r3,r16,128
   11080:	18002d26 	beq	r3,zero,11138 <__divdf3+0x880>
   11084:	9180004c 	andi	r6,r18,1
   11088:	01000044 	movi	r4,1
   1108c:	000b883a 	mov	r5,zero
   11090:	0027883a 	mov	r19,zero
   11094:	003e6606 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   11098:	354d883a 	add	r6,r6,r21
   1109c:	356d803a 	cmpltu	r22,r6,r21
   110a0:	b42d883a 	add	r22,r22,r16
   110a4:	b12d883a 	add	r22,r22,r4
   110a8:	8c7fff84 	addi	r17,r17,-2
   110ac:	b0c7c83a 	sub	r3,r22,r3
   110b0:	003f1d06 	br	10d28 <__alt_mem_Flash_flash_data+0xf4010d28>
   110b4:	ad4b883a 	add	r5,r21,r21
   110b8:	2d6b803a 	cmpltu	r21,r5,r21
   110bc:	ac2b883a 	add	r21,r21,r16
   110c0:	1d47883a 	add	r3,r3,r21
   110c4:	993fff84 	addi	r4,r19,-2
   110c8:	282b883a 	mov	r21,r5
   110cc:	003fc806 	br	10ff0 <__alt_mem_Flash_flash_data+0xf4010ff0>
   110d0:	103fc41e 	bne	r2,zero,10fe4 <__alt_mem_Flash_flash_data+0xf4010fe4>
   110d4:	002b883a 	mov	r21,zero
   110d8:	a8bf5e1e 	bne	r21,r2,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   110dc:	003f5e06 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   110e0:	00bef884 	movi	r2,-1054
   110e4:	1505c83a 	sub	r2,r2,r20
   110e8:	00c00804 	movi	r3,32
   110ec:	8884d83a 	srl	r2,r17,r2
   110f0:	80c01c26 	beq	r16,r3,11164 <__divdf3+0x8ac>
   110f4:	a0c10f84 	addi	r3,r20,1086
   110f8:	88c6983a 	sll	r3,r17,r3
   110fc:	1cc6b03a 	or	r3,r3,r19
   11100:	1806c03a 	cmpne	r3,r3,zero
   11104:	1884b03a 	or	r2,r3,r2
   11108:	140001cc 	andi	r16,r2,7
   1110c:	8000061e 	bne	r16,zero,11128 <__divdf3+0x870>
   11110:	000b883a 	mov	r5,zero
   11114:	1004d0fa 	srli	r2,r2,3
   11118:	9180004c 	andi	r6,r18,1
   1111c:	0009883a 	mov	r4,zero
   11120:	1426b03a 	or	r19,r2,r16
   11124:	003e4206 	br	10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   11128:	110003cc 	andi	r4,r2,15
   1112c:	00c00104 	movi	r3,4
   11130:	0021883a 	mov	r16,zero
   11134:	20ffcd1e 	bne	r4,r3,1106c <__alt_mem_Flash_flash_data+0xf401106c>
   11138:	800a927a 	slli	r5,r16,9
   1113c:	8020977a 	slli	r16,r16,29
   11140:	280ad33a 	srli	r5,r5,12
   11144:	003ff306 	br	11114 <__alt_mem_Flash_flash_data+0xf4011114>
   11148:	317fd336 	bltu	r6,r5,11098 <__alt_mem_Flash_flash_data+0xf4011098>
   1114c:	1023883a 	mov	r17,r2
   11150:	003fa206 	br	10fdc <__alt_mem_Flash_flash_data+0xf4010fdc>
   11154:	a8bfd736 	bltu	r21,r2,110b4 <__alt_mem_Flash_flash_data+0xf40110b4>
   11158:	2027883a 	mov	r19,r4
   1115c:	a8bf3d1e 	bne	r21,r2,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
   11160:	003f3d06 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   11164:	0007883a 	mov	r3,zero
   11168:	003fe406 	br	110fc <__alt_mem_Flash_flash_data+0xf40110fc>
   1116c:	00800434 	movhi	r2,16
   11170:	89400234 	orhi	r5,r17,8
   11174:	10bfffc4 	addi	r2,r2,-1
   11178:	e00d883a 	mov	r6,fp
   1117c:	288a703a 	and	r5,r5,r2
   11180:	003e8506 	br	10b98 <__alt_mem_Flash_flash_data+0xf4010b98>

00011184 <__eqdf2>:
   11184:	2804d53a 	srli	r2,r5,20
   11188:	3806d53a 	srli	r3,r7,20
   1118c:	02000434 	movhi	r8,16
   11190:	423fffc4 	addi	r8,r8,-1
   11194:	1081ffcc 	andi	r2,r2,2047
   11198:	0241ffc4 	movi	r9,2047
   1119c:	2a14703a 	and	r10,r5,r8
   111a0:	18c1ffcc 	andi	r3,r3,2047
   111a4:	3a10703a 	and	r8,r7,r8
   111a8:	280ad7fa 	srli	r5,r5,31
   111ac:	380ed7fa 	srli	r7,r7,31
   111b0:	12400f26 	beq	r2,r9,111f0 <__eqdf2+0x6c>
   111b4:	0241ffc4 	movi	r9,2047
   111b8:	1a400326 	beq	r3,r9,111c8 <__eqdf2+0x44>
   111bc:	10c00526 	beq	r2,r3,111d4 <__eqdf2+0x50>
   111c0:	00800044 	movi	r2,1
   111c4:	f800283a 	ret
   111c8:	4192b03a 	or	r9,r8,r6
   111cc:	483ffc1e 	bne	r9,zero,111c0 <__alt_mem_Flash_flash_data+0xf40111c0>
   111d0:	10fffb1e 	bne	r2,r3,111c0 <__alt_mem_Flash_flash_data+0xf40111c0>
   111d4:	523ffa1e 	bne	r10,r8,111c0 <__alt_mem_Flash_flash_data+0xf40111c0>
   111d8:	21bff91e 	bne	r4,r6,111c0 <__alt_mem_Flash_flash_data+0xf40111c0>
   111dc:	29c00826 	beq	r5,r7,11200 <__eqdf2+0x7c>
   111e0:	103ff71e 	bne	r2,zero,111c0 <__alt_mem_Flash_flash_data+0xf40111c0>
   111e4:	5104b03a 	or	r2,r10,r4
   111e8:	1004c03a 	cmpne	r2,r2,zero
   111ec:	f800283a 	ret
   111f0:	5112b03a 	or	r9,r10,r4
   111f4:	483fef26 	beq	r9,zero,111b4 <__alt_mem_Flash_flash_data+0xf40111b4>
   111f8:	00800044 	movi	r2,1
   111fc:	f800283a 	ret
   11200:	0005883a 	mov	r2,zero
   11204:	f800283a 	ret

00011208 <__gedf2>:
   11208:	2804d53a 	srli	r2,r5,20
   1120c:	3806d53a 	srli	r3,r7,20
   11210:	02000434 	movhi	r8,16
   11214:	423fffc4 	addi	r8,r8,-1
   11218:	0241ffc4 	movi	r9,2047
   1121c:	1081ffcc 	andi	r2,r2,2047
   11220:	2a14703a 	and	r10,r5,r8
   11224:	1a46703a 	and	r3,r3,r9
   11228:	3a10703a 	and	r8,r7,r8
   1122c:	280ad7fa 	srli	r5,r5,31
   11230:	380ed7fa 	srli	r7,r7,31
   11234:	12400b26 	beq	r2,r9,11264 <__gedf2+0x5c>
   11238:	1a401626 	beq	r3,r9,11294 <__gedf2+0x8c>
   1123c:	10000c1e 	bne	r2,zero,11270 <__gedf2+0x68>
   11240:	5112b03a 	or	r9,r10,r4
   11244:	4813003a 	cmpeq	r9,r9,zero
   11248:	4817883a 	mov	r11,r9
   1124c:	18000c1e 	bne	r3,zero,11280 <__gedf2+0x78>
   11250:	4198b03a 	or	r12,r8,r6
   11254:	60000a1e 	bne	r12,zero,11280 <__gedf2+0x78>
   11258:	48001326 	beq	r9,zero,112a8 <__gedf2+0xa0>
   1125c:	0005883a 	mov	r2,zero
   11260:	f800283a 	ret
   11264:	5112b03a 	or	r9,r10,r4
   11268:	4800191e 	bne	r9,zero,112d0 <__gedf2+0xc8>
   1126c:	18800926 	beq	r3,r2,11294 <__gedf2+0x8c>
   11270:	18000b1e 	bne	r3,zero,112a0 <__gedf2+0x98>
   11274:	4192b03a 	or	r9,r8,r6
   11278:	0017883a 	mov	r11,zero
   1127c:	48000a26 	beq	r9,zero,112a8 <__gedf2+0xa0>
   11280:	39c03fcc 	andi	r7,r7,255
   11284:	58000726 	beq	r11,zero,112a4 <__gedf2+0x9c>
   11288:	3800081e 	bne	r7,zero,112ac <__gedf2+0xa4>
   1128c:	00bfffc4 	movi	r2,-1
   11290:	f800283a 	ret
   11294:	4192b03a 	or	r9,r8,r6
   11298:	48000d1e 	bne	r9,zero,112d0 <__gedf2+0xc8>
   1129c:	103fe826 	beq	r2,zero,11240 <__alt_mem_Flash_flash_data+0xf4011240>
   112a0:	39c03fcc 	andi	r7,r7,255
   112a4:	29c00326 	beq	r5,r7,112b4 <__gedf2+0xac>
   112a8:	283ff81e 	bne	r5,zero,1128c <__alt_mem_Flash_flash_data+0xf401128c>
   112ac:	00800044 	movi	r2,1
   112b0:	f800283a 	ret
   112b4:	18bffc16 	blt	r3,r2,112a8 <__alt_mem_Flash_flash_data+0xf40112a8>
   112b8:	10c00316 	blt	r2,r3,112c8 <__gedf2+0xc0>
   112bc:	42bffa36 	bltu	r8,r10,112a8 <__alt_mem_Flash_flash_data+0xf40112a8>
   112c0:	52000526 	beq	r10,r8,112d8 <__gedf2+0xd0>
   112c4:	523fe52e 	bgeu	r10,r8,1125c <__alt_mem_Flash_flash_data+0xf401125c>
   112c8:	283ff026 	beq	r5,zero,1128c <__alt_mem_Flash_flash_data+0xf401128c>
   112cc:	003ff706 	br	112ac <__alt_mem_Flash_flash_data+0xf40112ac>
   112d0:	00bfff84 	movi	r2,-2
   112d4:	f800283a 	ret
   112d8:	313ff336 	bltu	r6,r4,112a8 <__alt_mem_Flash_flash_data+0xf40112a8>
   112dc:	21bfdf2e 	bgeu	r4,r6,1125c <__alt_mem_Flash_flash_data+0xf401125c>
   112e0:	283fea26 	beq	r5,zero,1128c <__alt_mem_Flash_flash_data+0xf401128c>
   112e4:	003ff106 	br	112ac <__alt_mem_Flash_flash_data+0xf40112ac>

000112e8 <__ledf2>:
   112e8:	2804d53a 	srli	r2,r5,20
   112ec:	3810d53a 	srli	r8,r7,20
   112f0:	00c00434 	movhi	r3,16
   112f4:	18ffffc4 	addi	r3,r3,-1
   112f8:	0241ffc4 	movi	r9,2047
   112fc:	1081ffcc 	andi	r2,r2,2047
   11300:	28d4703a 	and	r10,r5,r3
   11304:	4250703a 	and	r8,r8,r9
   11308:	38c6703a 	and	r3,r7,r3
   1130c:	280ad7fa 	srli	r5,r5,31
   11310:	380ed7fa 	srli	r7,r7,31
   11314:	12400b26 	beq	r2,r9,11344 <__ledf2+0x5c>
   11318:	42401926 	beq	r8,r9,11380 <__ledf2+0x98>
   1131c:	10000c1e 	bne	r2,zero,11350 <__ledf2+0x68>
   11320:	5112b03a 	or	r9,r10,r4
   11324:	4813003a 	cmpeq	r9,r9,zero
   11328:	4817883a 	mov	r11,r9
   1132c:	40000f26 	beq	r8,zero,1136c <__ledf2+0x84>
   11330:	39c03fcc 	andi	r7,r7,255
   11334:	58001826 	beq	r11,zero,11398 <__ledf2+0xb0>
   11338:	38000a1e 	bne	r7,zero,11364 <__ledf2+0x7c>
   1133c:	00bfffc4 	movi	r2,-1
   11340:	f800283a 	ret
   11344:	5112b03a 	or	r9,r10,r4
   11348:	48000f1e 	bne	r9,zero,11388 <__ledf2+0xa0>
   1134c:	40800c26 	beq	r8,r2,11380 <__ledf2+0x98>
   11350:	4000101e 	bne	r8,zero,11394 <__ledf2+0xac>
   11354:	1992b03a 	or	r9,r3,r6
   11358:	0017883a 	mov	r11,zero
   1135c:	483ff41e 	bne	r9,zero,11330 <__alt_mem_Flash_flash_data+0xf4011330>
   11360:	283ff61e 	bne	r5,zero,1133c <__alt_mem_Flash_flash_data+0xf401133c>
   11364:	00800044 	movi	r2,1
   11368:	f800283a 	ret
   1136c:	1998b03a 	or	r12,r3,r6
   11370:	603fef1e 	bne	r12,zero,11330 <__alt_mem_Flash_flash_data+0xf4011330>
   11374:	483ffa26 	beq	r9,zero,11360 <__alt_mem_Flash_flash_data+0xf4011360>
   11378:	0005883a 	mov	r2,zero
   1137c:	f800283a 	ret
   11380:	1992b03a 	or	r9,r3,r6
   11384:	48000226 	beq	r9,zero,11390 <__ledf2+0xa8>
   11388:	00800084 	movi	r2,2
   1138c:	f800283a 	ret
   11390:	103fe326 	beq	r2,zero,11320 <__alt_mem_Flash_flash_data+0xf4011320>
   11394:	39c03fcc 	andi	r7,r7,255
   11398:	29fff11e 	bne	r5,r7,11360 <__alt_mem_Flash_flash_data+0xf4011360>
   1139c:	40bff016 	blt	r8,r2,11360 <__alt_mem_Flash_flash_data+0xf4011360>
   113a0:	12000316 	blt	r2,r8,113b0 <__ledf2+0xc8>
   113a4:	1abfee36 	bltu	r3,r10,11360 <__alt_mem_Flash_flash_data+0xf4011360>
   113a8:	50c00326 	beq	r10,r3,113b8 <__ledf2+0xd0>
   113ac:	50fff22e 	bgeu	r10,r3,11378 <__alt_mem_Flash_flash_data+0xf4011378>
   113b0:	283fe226 	beq	r5,zero,1133c <__alt_mem_Flash_flash_data+0xf401133c>
   113b4:	003feb06 	br	11364 <__alt_mem_Flash_flash_data+0xf4011364>
   113b8:	313fe936 	bltu	r6,r4,11360 <__alt_mem_Flash_flash_data+0xf4011360>
   113bc:	21bfee2e 	bgeu	r4,r6,11378 <__alt_mem_Flash_flash_data+0xf4011378>
   113c0:	283fde26 	beq	r5,zero,1133c <__alt_mem_Flash_flash_data+0xf401133c>
   113c4:	003fe706 	br	11364 <__alt_mem_Flash_flash_data+0xf4011364>

000113c8 <__muldf3>:
   113c8:	defff204 	addi	sp,sp,-56
   113cc:	2804d53a 	srli	r2,r5,20
   113d0:	dd800a15 	stw	r22,40(sp)
   113d4:	282cd7fa 	srli	r22,r5,31
   113d8:	dc000415 	stw	r16,16(sp)
   113dc:	04000434 	movhi	r16,16
   113e0:	df000c15 	stw	fp,48(sp)
   113e4:	dd000815 	stw	r20,32(sp)
   113e8:	dcc00715 	stw	r19,28(sp)
   113ec:	dc800615 	stw	r18,24(sp)
   113f0:	dc400515 	stw	r17,20(sp)
   113f4:	843fffc4 	addi	r16,r16,-1
   113f8:	dfc00d15 	stw	ra,52(sp)
   113fc:	ddc00b15 	stw	r23,44(sp)
   11400:	dd400915 	stw	r21,36(sp)
   11404:	1501ffcc 	andi	r20,r2,2047
   11408:	2023883a 	mov	r17,r4
   1140c:	2025883a 	mov	r18,r4
   11410:	2c20703a 	and	r16,r5,r16
   11414:	b027883a 	mov	r19,r22
   11418:	b7003fcc 	andi	fp,r22,255
   1141c:	a0005926 	beq	r20,zero,11584 <__muldf3+0x1bc>
   11420:	0081ffc4 	movi	r2,2047
   11424:	a0803426 	beq	r20,r2,114f8 <__muldf3+0x130>
   11428:	84000434 	orhi	r16,r16,16
   1142c:	2004d77a 	srli	r2,r4,29
   11430:	802090fa 	slli	r16,r16,3
   11434:	202490fa 	slli	r18,r4,3
   11438:	a53f0044 	addi	r20,r20,-1023
   1143c:	80a0b03a 	or	r16,r16,r2
   11440:	002b883a 	mov	r21,zero
   11444:	0015883a 	mov	r10,zero
   11448:	3812d53a 	srli	r9,r7,20
   1144c:	3806d7fa 	srli	r3,r7,31
   11450:	02000434 	movhi	r8,16
   11454:	423fffc4 	addi	r8,r8,-1
   11458:	4941ffcc 	andi	r5,r9,2047
   1145c:	302f883a 	mov	r23,r6
   11460:	3a22703a 	and	r17,r7,r8
   11464:	1ac03fcc 	andi	r11,r3,255
   11468:	28006226 	beq	r5,zero,115f4 <__muldf3+0x22c>
   1146c:	0081ffc4 	movi	r2,2047
   11470:	28805a26 	beq	r5,r2,115dc <__muldf3+0x214>
   11474:	8a000434 	orhi	r8,r17,16
   11478:	3004d77a 	srli	r2,r6,29
   1147c:	401090fa 	slli	r8,r8,3
   11480:	302e90fa 	slli	r23,r6,3
   11484:	297f0044 	addi	r5,r5,-1023
   11488:	40a2b03a 	or	r17,r8,r2
   1148c:	0013883a 	mov	r9,zero
   11490:	4d4cb03a 	or	r6,r9,r21
   11494:	300c90ba 	slli	r6,r6,2
   11498:	02000074 	movhi	r8,1
   1149c:	42052e04 	addi	r8,r8,5304
   114a0:	320d883a 	add	r6,r6,r8
   114a4:	31800017 	ldw	r6,0(r6)
   114a8:	a14b883a 	add	r5,r20,r5
   114ac:	1dacf03a 	xor	r22,r3,r22
   114b0:	2b000044 	addi	r12,r5,1
   114b4:	3000683a 	jmp	r6
   114b8:	000116f4 	movhi	zero,1115
   114bc:	000116e0 	cmpeqi	zero,zero,1115
   114c0:	000116e0 	cmpeqi	zero,zero,1115
   114c4:	000116cc 	andi	zero,zero,1115
   114c8:	00011514 	movui	zero,1108
   114cc:	00011514 	movui	zero,1108
   114d0:	000116b4 	movhi	zero,1114
   114d4:	000116cc 	andi	zero,zero,1115
   114d8:	00011514 	movui	zero,1108
   114dc:	000116b4 	movhi	zero,1114
   114e0:	00011514 	movui	zero,1108
   114e4:	000116cc 	andi	zero,zero,1115
   114e8:	00011518 	cmpnei	zero,zero,1108
   114ec:	00011518 	cmpnei	zero,zero,1108
   114f0:	00011518 	cmpnei	zero,zero,1108
   114f4:	000118f0 	cmpltui	zero,zero,1123
   114f8:	8104b03a 	or	r2,r16,r4
   114fc:	10006a1e 	bne	r2,zero,116a8 <__muldf3+0x2e0>
   11500:	05400204 	movi	r21,8
   11504:	0021883a 	mov	r16,zero
   11508:	0025883a 	mov	r18,zero
   1150c:	02800084 	movi	r10,2
   11510:	003fcd06 	br	11448 <__alt_mem_Flash_flash_data+0xf4011448>
   11514:	b039883a 	mov	fp,r22
   11518:	00800084 	movi	r2,2
   1151c:	50804e1e 	bne	r10,r2,11658 <__muldf3+0x290>
   11520:	e4c0004c 	andi	r19,fp,1
   11524:	0101ffc4 	movi	r4,2047
   11528:	0021883a 	mov	r16,zero
   1152c:	0025883a 	mov	r18,zero
   11530:	2008953a 	slli	r4,r4,20
   11534:	98c03fcc 	andi	r3,r19,255
   11538:	01400434 	movhi	r5,16
   1153c:	297fffc4 	addi	r5,r5,-1
   11540:	180697fa 	slli	r3,r3,31
   11544:	8160703a 	and	r16,r16,r5
   11548:	8120b03a 	or	r16,r16,r4
   1154c:	80c6b03a 	or	r3,r16,r3
   11550:	9005883a 	mov	r2,r18
   11554:	dfc00d17 	ldw	ra,52(sp)
   11558:	df000c17 	ldw	fp,48(sp)
   1155c:	ddc00b17 	ldw	r23,44(sp)
   11560:	dd800a17 	ldw	r22,40(sp)
   11564:	dd400917 	ldw	r21,36(sp)
   11568:	dd000817 	ldw	r20,32(sp)
   1156c:	dcc00717 	ldw	r19,28(sp)
   11570:	dc800617 	ldw	r18,24(sp)
   11574:	dc400517 	ldw	r17,20(sp)
   11578:	dc000417 	ldw	r16,16(sp)
   1157c:	dec00e04 	addi	sp,sp,56
   11580:	f800283a 	ret
   11584:	8104b03a 	or	r2,r16,r4
   11588:	10004226 	beq	r2,zero,11694 <__muldf3+0x2cc>
   1158c:	8000f926 	beq	r16,zero,11974 <__muldf3+0x5ac>
   11590:	8009883a 	mov	r4,r16
   11594:	d9800315 	stw	r6,12(sp)
   11598:	d9c00015 	stw	r7,0(sp)
   1159c:	00125b80 	call	125b8 <__clzsi2>
   115a0:	d9800317 	ldw	r6,12(sp)
   115a4:	d9c00017 	ldw	r7,0(sp)
   115a8:	1007883a 	mov	r3,r2
   115ac:	01000a04 	movi	r4,40
   115b0:	18bffe04 	addi	r2,r3,-8
   115b4:	20c9c83a 	sub	r4,r4,r3
   115b8:	80a0983a 	sll	r16,r16,r2
   115bc:	8908d83a 	srl	r4,r17,r4
   115c0:	88a4983a 	sll	r18,r17,r2
   115c4:	2420b03a 	or	r16,r4,r16
   115c8:	017f0344 	movi	r5,-1011
   115cc:	28e9c83a 	sub	r20,r5,r3
   115d0:	002b883a 	mov	r21,zero
   115d4:	0015883a 	mov	r10,zero
   115d8:	003f9b06 	br	11448 <__alt_mem_Flash_flash_data+0xf4011448>
   115dc:	8984b03a 	or	r2,r17,r6
   115e0:	10002a1e 	bne	r2,zero,1168c <__muldf3+0x2c4>
   115e4:	0023883a 	mov	r17,zero
   115e8:	002f883a 	mov	r23,zero
   115ec:	02400084 	movi	r9,2
   115f0:	003fa706 	br	11490 <__alt_mem_Flash_flash_data+0xf4011490>
   115f4:	8984b03a 	or	r2,r17,r6
   115f8:	10002026 	beq	r2,zero,1167c <__muldf3+0x2b4>
   115fc:	8800cc26 	beq	r17,zero,11930 <__muldf3+0x568>
   11600:	8809883a 	mov	r4,r17
   11604:	d8c00215 	stw	r3,8(sp)
   11608:	d9800315 	stw	r6,12(sp)
   1160c:	da800015 	stw	r10,0(sp)
   11610:	dac00115 	stw	r11,4(sp)
   11614:	00125b80 	call	125b8 <__clzsi2>
   11618:	d8c00217 	ldw	r3,8(sp)
   1161c:	d9800317 	ldw	r6,12(sp)
   11620:	da800017 	ldw	r10,0(sp)
   11624:	dac00117 	ldw	r11,4(sp)
   11628:	1009883a 	mov	r4,r2
   1162c:	01400a04 	movi	r5,40
   11630:	25fffe04 	addi	r23,r4,-8
   11634:	290bc83a 	sub	r5,r5,r4
   11638:	8dd0983a 	sll	r8,r17,r23
   1163c:	314ad83a 	srl	r5,r6,r5
   11640:	35ee983a 	sll	r23,r6,r23
   11644:	2a22b03a 	or	r17,r5,r8
   11648:	017f0344 	movi	r5,-1011
   1164c:	290bc83a 	sub	r5,r5,r4
   11650:	0013883a 	mov	r9,zero
   11654:	003f8e06 	br	11490 <__alt_mem_Flash_flash_data+0xf4011490>
   11658:	008000c4 	movi	r2,3
   1165c:	50811d26 	beq	r10,r2,11ad4 <__muldf3+0x70c>
   11660:	00800044 	movi	r2,1
   11664:	5080e01e 	bne	r10,r2,119e8 <__muldf3+0x620>
   11668:	e0a6703a 	and	r19,fp,r2
   1166c:	0009883a 	mov	r4,zero
   11670:	0021883a 	mov	r16,zero
   11674:	0025883a 	mov	r18,zero
   11678:	003fad06 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   1167c:	0023883a 	mov	r17,zero
   11680:	002f883a 	mov	r23,zero
   11684:	02400044 	movi	r9,1
   11688:	003f8106 	br	11490 <__alt_mem_Flash_flash_data+0xf4011490>
   1168c:	024000c4 	movi	r9,3
   11690:	003f7f06 	br	11490 <__alt_mem_Flash_flash_data+0xf4011490>
   11694:	05400104 	movi	r21,4
   11698:	0021883a 	mov	r16,zero
   1169c:	0025883a 	mov	r18,zero
   116a0:	02800044 	movi	r10,1
   116a4:	003f6806 	br	11448 <__alt_mem_Flash_flash_data+0xf4011448>
   116a8:	05400304 	movi	r21,12
   116ac:	028000c4 	movi	r10,3
   116b0:	003f6506 	br	11448 <__alt_mem_Flash_flash_data+0xf4011448>
   116b4:	04000434 	movhi	r16,16
   116b8:	0027883a 	mov	r19,zero
   116bc:	843fffc4 	addi	r16,r16,-1
   116c0:	04bfffc4 	movi	r18,-1
   116c4:	0101ffc4 	movi	r4,2047
   116c8:	003f9906 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   116cc:	8821883a 	mov	r16,r17
   116d0:	b825883a 	mov	r18,r23
   116d4:	5839883a 	mov	fp,r11
   116d8:	4815883a 	mov	r10,r9
   116dc:	003f8e06 	br	11518 <__alt_mem_Flash_flash_data+0xf4011518>
   116e0:	8821883a 	mov	r16,r17
   116e4:	b825883a 	mov	r18,r23
   116e8:	b039883a 	mov	fp,r22
   116ec:	4815883a 	mov	r10,r9
   116f0:	003f8906 	br	11518 <__alt_mem_Flash_flash_data+0xf4011518>
   116f4:	b80cd43a 	srli	r6,r23,16
   116f8:	9006d43a 	srli	r3,r18,16
   116fc:	90bfffcc 	andi	r2,r18,65535
   11700:	bdffffcc 	andi	r23,r23,65535
   11704:	b891383a 	mul	r8,r23,r2
   11708:	b8c9383a 	mul	r4,r23,r3
   1170c:	309b383a 	mul	r13,r6,r2
   11710:	400ed43a 	srli	r7,r8,16
   11714:	30df383a 	mul	r15,r6,r3
   11718:	235b883a 	add	r13,r4,r13
   1171c:	69db883a 	add	r13,r13,r7
   11720:	6900022e 	bgeu	r13,r4,1172c <__muldf3+0x364>
   11724:	01000074 	movhi	r4,1
   11728:	791f883a 	add	r15,r15,r4
   1172c:	8828d43a 	srli	r20,r17,16
   11730:	8c7fffcc 	andi	r17,r17,65535
   11734:	888f383a 	mul	r7,r17,r2
   11738:	88d3383a 	mul	r9,r17,r3
   1173c:	a0a5383a 	mul	r18,r20,r2
   11740:	3816d43a 	srli	r11,r7,16
   11744:	6814943a 	slli	r10,r13,16
   11748:	4ca5883a 	add	r18,r9,r18
   1174c:	423fffcc 	andi	r8,r8,65535
   11750:	92e5883a 	add	r18,r18,r11
   11754:	6808d43a 	srli	r4,r13,16
   11758:	5215883a 	add	r10,r10,r8
   1175c:	a0c7383a 	mul	r3,r20,r3
   11760:	9240022e 	bgeu	r18,r9,1176c <__muldf3+0x3a4>
   11764:	00800074 	movhi	r2,1
   11768:	1887883a 	add	r3,r3,r2
   1176c:	802ad43a 	srli	r21,r16,16
   11770:	80bfffcc 	andi	r2,r16,65535
   11774:	b893383a 	mul	r9,r23,r2
   11778:	3091383a 	mul	r8,r6,r2
   1177c:	bd6f383a 	mul	r23,r23,r21
   11780:	9026943a 	slli	r19,r18,16
   11784:	481ad43a 	srli	r13,r9,16
   11788:	9024d43a 	srli	r18,r18,16
   1178c:	39ffffcc 	andi	r7,r7,65535
   11790:	ba11883a 	add	r8,r23,r8
   11794:	99e7883a 	add	r19,r19,r7
   11798:	4351883a 	add	r8,r8,r13
   1179c:	1c97883a 	add	r11,r3,r18
   117a0:	354d383a 	mul	r6,r6,r21
   117a4:	9925883a 	add	r18,r19,r4
   117a8:	45c0022e 	bgeu	r8,r23,117b4 <__muldf3+0x3ec>
   117ac:	00c00074 	movhi	r3,1
   117b0:	30cd883a 	add	r6,r6,r3
   117b4:	8889383a 	mul	r4,r17,r2
   117b8:	8d63383a 	mul	r17,r17,r21
   117bc:	a085383a 	mul	r2,r20,r2
   117c0:	200ed43a 	srli	r7,r4,16
   117c4:	401cd43a 	srli	r14,r8,16
   117c8:	401a943a 	slli	r13,r8,16
   117cc:	8885883a 	add	r2,r17,r2
   117d0:	4a3fffcc 	andi	r8,r9,65535
   117d4:	11c5883a 	add	r2,r2,r7
   117d8:	339d883a 	add	r14,r6,r14
   117dc:	6a11883a 	add	r8,r13,r8
   117e0:	a561383a 	mul	r16,r20,r21
   117e4:	1440022e 	bgeu	r2,r17,117f0 <__muldf3+0x428>
   117e8:	00c00074 	movhi	r3,1
   117ec:	80e1883a 	add	r16,r16,r3
   117f0:	1006943a 	slli	r3,r2,16
   117f4:	213fffcc 	andi	r4,r4,65535
   117f8:	93db883a 	add	r13,r18,r15
   117fc:	1909883a 	add	r4,r3,r4
   11800:	22c7883a 	add	r3,r4,r11
   11804:	6cd3803a 	cmpltu	r9,r13,r19
   11808:	6a09883a 	add	r4,r13,r8
   1180c:	1a5b883a 	add	r13,r3,r9
   11810:	2211803a 	cmpltu	r8,r4,r8
   11814:	734d883a 	add	r6,r14,r13
   11818:	100ed43a 	srli	r7,r2,16
   1181c:	6a53803a 	cmpltu	r9,r13,r9
   11820:	3205883a 	add	r2,r6,r8
   11824:	1ac7803a 	cmpltu	r3,r3,r11
   11828:	1211803a 	cmpltu	r8,r2,r8
   1182c:	48c6b03a 	or	r3,r9,r3
   11830:	338d803a 	cmpltu	r6,r6,r14
   11834:	19c7883a 	add	r3,r3,r7
   11838:	418cb03a 	or	r6,r8,r6
   1183c:	1987883a 	add	r3,r3,r6
   11840:	2024927a 	slli	r18,r4,9
   11844:	1c07883a 	add	r3,r3,r16
   11848:	1806927a 	slli	r3,r3,9
   1184c:	1020d5fa 	srli	r16,r2,23
   11850:	2008d5fa 	srli	r4,r4,23
   11854:	9294b03a 	or	r10,r18,r10
   11858:	1004927a 	slli	r2,r2,9
   1185c:	5024c03a 	cmpne	r18,r10,zero
   11860:	1c20b03a 	or	r16,r3,r16
   11864:	9108b03a 	or	r4,r18,r4
   11868:	80c0402c 	andhi	r3,r16,256
   1186c:	20a4b03a 	or	r18,r4,r2
   11870:	18000726 	beq	r3,zero,11890 <__muldf3+0x4c8>
   11874:	9006d07a 	srli	r3,r18,1
   11878:	800897fa 	slli	r4,r16,31
   1187c:	9080004c 	andi	r2,r18,1
   11880:	8020d07a 	srli	r16,r16,1
   11884:	10c4b03a 	or	r2,r2,r3
   11888:	1124b03a 	or	r18,r2,r4
   1188c:	600b883a 	mov	r5,r12
   11890:	2900ffc4 	addi	r4,r5,1023
   11894:	01004b0e 	bge	zero,r4,119c4 <__muldf3+0x5fc>
   11898:	908001cc 	andi	r2,r18,7
   1189c:	10000726 	beq	r2,zero,118bc <__muldf3+0x4f4>
   118a0:	90c003cc 	andi	r3,r18,15
   118a4:	00800104 	movi	r2,4
   118a8:	18800426 	beq	r3,r2,118bc <__muldf3+0x4f4>
   118ac:	9087883a 	add	r3,r18,r2
   118b0:	1c85803a 	cmpltu	r2,r3,r18
   118b4:	80a1883a 	add	r16,r16,r2
   118b8:	1825883a 	mov	r18,r3
   118bc:	8080402c 	andhi	r2,r16,256
   118c0:	10000426 	beq	r2,zero,118d4 <__muldf3+0x50c>
   118c4:	00bfc034 	movhi	r2,65280
   118c8:	10bfffc4 	addi	r2,r2,-1
   118cc:	29010004 	addi	r4,r5,1024
   118d0:	80a0703a 	and	r16,r16,r2
   118d4:	0081ff84 	movi	r2,2046
   118d8:	1100320e 	bge	r2,r4,119a4 <__muldf3+0x5dc>
   118dc:	b4c0004c 	andi	r19,r22,1
   118e0:	0101ffc4 	movi	r4,2047
   118e4:	0021883a 	mov	r16,zero
   118e8:	0025883a 	mov	r18,zero
   118ec:	003f1006 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   118f0:	8080022c 	andhi	r2,r16,8
   118f4:	10000926 	beq	r2,zero,1191c <__muldf3+0x554>
   118f8:	8880022c 	andhi	r2,r17,8
   118fc:	1000071e 	bne	r2,zero,1191c <__muldf3+0x554>
   11900:	00800434 	movhi	r2,16
   11904:	8c000234 	orhi	r16,r17,8
   11908:	10bfffc4 	addi	r2,r2,-1
   1190c:	1827883a 	mov	r19,r3
   11910:	80a0703a 	and	r16,r16,r2
   11914:	b825883a 	mov	r18,r23
   11918:	003f6a06 	br	116c4 <__alt_mem_Flash_flash_data+0xf40116c4>
   1191c:	00800434 	movhi	r2,16
   11920:	84000234 	orhi	r16,r16,8
   11924:	10bfffc4 	addi	r2,r2,-1
   11928:	80a0703a 	and	r16,r16,r2
   1192c:	003f6506 	br	116c4 <__alt_mem_Flash_flash_data+0xf40116c4>
   11930:	3009883a 	mov	r4,r6
   11934:	d8c00215 	stw	r3,8(sp)
   11938:	d9800315 	stw	r6,12(sp)
   1193c:	da800015 	stw	r10,0(sp)
   11940:	dac00115 	stw	r11,4(sp)
   11944:	00125b80 	call	125b8 <__clzsi2>
   11948:	11000804 	addi	r4,r2,32
   1194c:	014009c4 	movi	r5,39
   11950:	d8c00217 	ldw	r3,8(sp)
   11954:	d9800317 	ldw	r6,12(sp)
   11958:	da800017 	ldw	r10,0(sp)
   1195c:	dac00117 	ldw	r11,4(sp)
   11960:	293f320e 	bge	r5,r4,1162c <__alt_mem_Flash_flash_data+0xf401162c>
   11964:	10bffe04 	addi	r2,r2,-8
   11968:	b8a2983a 	sll	r17,r23,r2
   1196c:	002f883a 	mov	r23,zero
   11970:	003f3506 	br	11648 <__alt_mem_Flash_flash_data+0xf4011648>
   11974:	d9800315 	stw	r6,12(sp)
   11978:	d9c00015 	stw	r7,0(sp)
   1197c:	00125b80 	call	125b8 <__clzsi2>
   11980:	10c00804 	addi	r3,r2,32
   11984:	010009c4 	movi	r4,39
   11988:	d9800317 	ldw	r6,12(sp)
   1198c:	d9c00017 	ldw	r7,0(sp)
   11990:	20ff060e 	bge	r4,r3,115ac <__alt_mem_Flash_flash_data+0xf40115ac>
   11994:	10bffe04 	addi	r2,r2,-8
   11998:	88a0983a 	sll	r16,r17,r2
   1199c:	0025883a 	mov	r18,zero
   119a0:	003f0906 	br	115c8 <__alt_mem_Flash_flash_data+0xf40115c8>
   119a4:	9004d0fa 	srli	r2,r18,3
   119a8:	8024977a 	slli	r18,r16,29
   119ac:	8020927a 	slli	r16,r16,9
   119b0:	2101ffcc 	andi	r4,r4,2047
   119b4:	90a4b03a 	or	r18,r18,r2
   119b8:	8020d33a 	srli	r16,r16,12
   119bc:	b4c0004c 	andi	r19,r22,1
   119c0:	003edb06 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   119c4:	00ff0084 	movi	r3,-1022
   119c8:	1947c83a 	sub	r3,r3,r5
   119cc:	00800e04 	movi	r2,56
   119d0:	10c0080e 	bge	r2,r3,119f4 <__muldf3+0x62c>
   119d4:	b4c0004c 	andi	r19,r22,1
   119d8:	0009883a 	mov	r4,zero
   119dc:	0021883a 	mov	r16,zero
   119e0:	0025883a 	mov	r18,zero
   119e4:	003ed206 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   119e8:	600b883a 	mov	r5,r12
   119ec:	e02d883a 	mov	r22,fp
   119f0:	003fa706 	br	11890 <__alt_mem_Flash_flash_data+0xf4011890>
   119f4:	008007c4 	movi	r2,31
   119f8:	10c01816 	blt	r2,r3,11a5c <__muldf3+0x694>
   119fc:	29410784 	addi	r5,r5,1054
   11a00:	8144983a 	sll	r2,r16,r5
   11a04:	90c8d83a 	srl	r4,r18,r3
   11a08:	914a983a 	sll	r5,r18,r5
   11a0c:	80c6d83a 	srl	r3,r16,r3
   11a10:	2088b03a 	or	r4,r4,r2
   11a14:	2804c03a 	cmpne	r2,r5,zero
   11a18:	2084b03a 	or	r2,r4,r2
   11a1c:	110001cc 	andi	r4,r2,7
   11a20:	20000726 	beq	r4,zero,11a40 <__muldf3+0x678>
   11a24:	114003cc 	andi	r5,r2,15
   11a28:	01000104 	movi	r4,4
   11a2c:	29000426 	beq	r5,r4,11a40 <__muldf3+0x678>
   11a30:	11000104 	addi	r4,r2,4
   11a34:	2085803a 	cmpltu	r2,r4,r2
   11a38:	1887883a 	add	r3,r3,r2
   11a3c:	2005883a 	mov	r2,r4
   11a40:	1900202c 	andhi	r4,r3,128
   11a44:	20001826 	beq	r4,zero,11aa8 <__muldf3+0x6e0>
   11a48:	b4c0004c 	andi	r19,r22,1
   11a4c:	01000044 	movi	r4,1
   11a50:	0021883a 	mov	r16,zero
   11a54:	0025883a 	mov	r18,zero
   11a58:	003eb506 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   11a5c:	00bef884 	movi	r2,-1054
   11a60:	1145c83a 	sub	r2,r2,r5
   11a64:	8088d83a 	srl	r4,r16,r2
   11a68:	00800804 	movi	r2,32
   11a6c:	18801726 	beq	r3,r2,11acc <__muldf3+0x704>
   11a70:	28810f84 	addi	r2,r5,1086
   11a74:	8084983a 	sll	r2,r16,r2
   11a78:	1484b03a 	or	r2,r2,r18
   11a7c:	1004c03a 	cmpne	r2,r2,zero
   11a80:	1104b03a 	or	r2,r2,r4
   11a84:	10c001cc 	andi	r3,r2,7
   11a88:	18000b1e 	bne	r3,zero,11ab8 <__muldf3+0x6f0>
   11a8c:	0021883a 	mov	r16,zero
   11a90:	1004d0fa 	srli	r2,r2,3
   11a94:	b4c0004c 	andi	r19,r22,1
   11a98:	0009883a 	mov	r4,zero
   11a9c:	10e4b03a 	or	r18,r2,r3
   11aa0:	003ea306 	br	11530 <__alt_mem_Flash_flash_data+0xf4011530>
   11aa4:	0007883a 	mov	r3,zero
   11aa8:	1820927a 	slli	r16,r3,9
   11aac:	1806977a 	slli	r3,r3,29
   11ab0:	8020d33a 	srli	r16,r16,12
   11ab4:	003ff606 	br	11a90 <__alt_mem_Flash_flash_data+0xf4011a90>
   11ab8:	110003cc 	andi	r4,r2,15
   11abc:	00c00104 	movi	r3,4
   11ac0:	20fff826 	beq	r4,r3,11aa4 <__alt_mem_Flash_flash_data+0xf4011aa4>
   11ac4:	0007883a 	mov	r3,zero
   11ac8:	003fd906 	br	11a30 <__alt_mem_Flash_flash_data+0xf4011a30>
   11acc:	0005883a 	mov	r2,zero
   11ad0:	003fe906 	br	11a78 <__alt_mem_Flash_flash_data+0xf4011a78>
   11ad4:	00800434 	movhi	r2,16
   11ad8:	84000234 	orhi	r16,r16,8
   11adc:	10bfffc4 	addi	r2,r2,-1
   11ae0:	e4c0004c 	andi	r19,fp,1
   11ae4:	80a0703a 	and	r16,r16,r2
   11ae8:	003ef606 	br	116c4 <__alt_mem_Flash_flash_data+0xf40116c4>

00011aec <__subdf3>:
   11aec:	00c00434 	movhi	r3,16
   11af0:	18ffffc4 	addi	r3,r3,-1
   11af4:	defffb04 	addi	sp,sp,-20
   11af8:	28d2703a 	and	r9,r5,r3
   11afc:	3814d53a 	srli	r10,r7,20
   11b00:	38c6703a 	and	r3,r7,r3
   11b04:	3004d77a 	srli	r2,r6,29
   11b08:	dc800215 	stw	r18,8(sp)
   11b0c:	dc000015 	stw	r16,0(sp)
   11b10:	2824d7fa 	srli	r18,r5,31
   11b14:	2820d53a 	srli	r16,r5,20
   11b18:	481290fa 	slli	r9,r9,3
   11b1c:	200ad77a 	srli	r5,r4,29
   11b20:	180690fa 	slli	r3,r3,3
   11b24:	dc400115 	stw	r17,4(sp)
   11b28:	dfc00415 	stw	ra,16(sp)
   11b2c:	202290fa 	slli	r17,r4,3
   11b30:	dcc00315 	stw	r19,12(sp)
   11b34:	5281ffcc 	andi	r10,r10,2047
   11b38:	0101ffc4 	movi	r4,2047
   11b3c:	9011883a 	mov	r8,r18
   11b40:	8401ffcc 	andi	r16,r16,2047
   11b44:	94803fcc 	andi	r18,r18,255
   11b48:	494ab03a 	or	r5,r9,r5
   11b4c:	380ed7fa 	srli	r7,r7,31
   11b50:	1886b03a 	or	r3,r3,r2
   11b54:	300c90fa 	slli	r6,r6,3
   11b58:	51009026 	beq	r10,r4,11d9c <__subdf3+0x2b0>
   11b5c:	39c0005c 	xori	r7,r7,1
   11b60:	8285c83a 	sub	r2,r16,r10
   11b64:	91c06f26 	beq	r18,r7,11d24 <__subdf3+0x238>
   11b68:	0080b10e 	bge	zero,r2,11e30 <__subdf3+0x344>
   11b6c:	50002a1e 	bne	r10,zero,11c18 <__subdf3+0x12c>
   11b70:	1988b03a 	or	r4,r3,r6
   11b74:	2000941e 	bne	r4,zero,11dc8 <__subdf3+0x2dc>
   11b78:	888001cc 	andi	r2,r17,7
   11b7c:	10005b26 	beq	r2,zero,11cec <__subdf3+0x200>
   11b80:	88c003cc 	andi	r3,r17,15
   11b84:	00800104 	movi	r2,4
   11b88:	18805826 	beq	r3,r2,11cec <__subdf3+0x200>
   11b8c:	88c00104 	addi	r3,r17,4
   11b90:	1c63803a 	cmpltu	r17,r3,r17
   11b94:	2c4b883a 	add	r5,r5,r17
   11b98:	2880202c 	andhi	r2,r5,128
   11b9c:	9200004c 	andi	r8,r18,1
   11ba0:	1823883a 	mov	r17,r3
   11ba4:	10005426 	beq	r2,zero,11cf8 <__subdf3+0x20c>
   11ba8:	84000044 	addi	r16,r16,1
   11bac:	0081ffc4 	movi	r2,2047
   11bb0:	8080bf26 	beq	r16,r2,11eb0 <__subdf3+0x3c4>
   11bb4:	013fe034 	movhi	r4,65408
   11bb8:	213fffc4 	addi	r4,r4,-1
   11bbc:	290a703a 	and	r5,r5,r4
   11bc0:	2804977a 	slli	r2,r5,29
   11bc4:	280a927a 	slli	r5,r5,9
   11bc8:	8822d0fa 	srli	r17,r17,3
   11bcc:	8401ffcc 	andi	r16,r16,2047
   11bd0:	2808d33a 	srli	r4,r5,12
   11bd4:	1444b03a 	or	r2,r2,r17
   11bd8:	8401ffcc 	andi	r16,r16,2047
   11bdc:	800a953a 	slli	r5,r16,20
   11be0:	40c03fcc 	andi	r3,r8,255
   11be4:	04000434 	movhi	r16,16
   11be8:	180697fa 	slli	r3,r3,31
   11bec:	843fffc4 	addi	r16,r16,-1
   11bf0:	2420703a 	and	r16,r4,r16
   11bf4:	8160b03a 	or	r16,r16,r5
   11bf8:	80c6b03a 	or	r3,r16,r3
   11bfc:	dfc00417 	ldw	ra,16(sp)
   11c00:	dcc00317 	ldw	r19,12(sp)
   11c04:	dc800217 	ldw	r18,8(sp)
   11c08:	dc400117 	ldw	r17,4(sp)
   11c0c:	dc000017 	ldw	r16,0(sp)
   11c10:	dec00504 	addi	sp,sp,20
   11c14:	f800283a 	ret
   11c18:	0101ffc4 	movi	r4,2047
   11c1c:	813fd626 	beq	r16,r4,11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11c20:	18c02034 	orhi	r3,r3,128
   11c24:	01000e04 	movi	r4,56
   11c28:	2080a416 	blt	r4,r2,11ebc <__subdf3+0x3d0>
   11c2c:	010007c4 	movi	r4,31
   11c30:	2080c716 	blt	r4,r2,11f50 <__subdf3+0x464>
   11c34:	01000804 	movi	r4,32
   11c38:	2089c83a 	sub	r4,r4,r2
   11c3c:	1910983a 	sll	r8,r3,r4
   11c40:	308ed83a 	srl	r7,r6,r2
   11c44:	3108983a 	sll	r4,r6,r4
   11c48:	1884d83a 	srl	r2,r3,r2
   11c4c:	41ccb03a 	or	r6,r8,r7
   11c50:	2008c03a 	cmpne	r4,r4,zero
   11c54:	310cb03a 	or	r6,r6,r4
   11c58:	898dc83a 	sub	r6,r17,r6
   11c5c:	89a3803a 	cmpltu	r17,r17,r6
   11c60:	288bc83a 	sub	r5,r5,r2
   11c64:	2c4bc83a 	sub	r5,r5,r17
   11c68:	3023883a 	mov	r17,r6
   11c6c:	2880202c 	andhi	r2,r5,128
   11c70:	10006b26 	beq	r2,zero,11e20 <__subdf3+0x334>
   11c74:	04c02034 	movhi	r19,128
   11c78:	9cffffc4 	addi	r19,r19,-1
   11c7c:	2ce6703a 	and	r19,r5,r19
   11c80:	98007c26 	beq	r19,zero,11e74 <__subdf3+0x388>
   11c84:	9809883a 	mov	r4,r19
   11c88:	00125b80 	call	125b8 <__clzsi2>
   11c8c:	10fffe04 	addi	r3,r2,-8
   11c90:	010007c4 	movi	r4,31
   11c94:	20c07d16 	blt	r4,r3,11e8c <__subdf3+0x3a0>
   11c98:	01400a04 	movi	r5,40
   11c9c:	2885c83a 	sub	r2,r5,r2
   11ca0:	888ad83a 	srl	r5,r17,r2
   11ca4:	98e6983a 	sll	r19,r19,r3
   11ca8:	88e2983a 	sll	r17,r17,r3
   11cac:	2ce6b03a 	or	r19,r5,r19
   11cb0:	1c007a16 	blt	r3,r16,11e9c <__subdf3+0x3b0>
   11cb4:	1c21c83a 	sub	r16,r3,r16
   11cb8:	81400044 	addi	r5,r16,1
   11cbc:	00c007c4 	movi	r3,31
   11cc0:	19409616 	blt	r3,r5,11f1c <__subdf3+0x430>
   11cc4:	1c21c83a 	sub	r16,r3,r16
   11cc8:	8c08983a 	sll	r4,r17,r16
   11ccc:	8946d83a 	srl	r3,r17,r5
   11cd0:	9c20983a 	sll	r16,r19,r16
   11cd4:	2008c03a 	cmpne	r4,r4,zero
   11cd8:	994ad83a 	srl	r5,r19,r5
   11cdc:	1c06b03a 	or	r3,r3,r16
   11ce0:	1922b03a 	or	r17,r3,r4
   11ce4:	0021883a 	mov	r16,zero
   11ce8:	003fa306 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11cec:	2880202c 	andhi	r2,r5,128
   11cf0:	9200004c 	andi	r8,r18,1
   11cf4:	103fac1e 	bne	r2,zero,11ba8 <__alt_mem_Flash_flash_data+0xf4011ba8>
   11cf8:	2804977a 	slli	r2,r5,29
   11cfc:	8822d0fa 	srli	r17,r17,3
   11d00:	00c1ffc4 	movi	r3,2047
   11d04:	280ad0fa 	srli	r5,r5,3
   11d08:	1444b03a 	or	r2,r2,r17
   11d0c:	80c02726 	beq	r16,r3,11dac <__subdf3+0x2c0>
   11d10:	01000434 	movhi	r4,16
   11d14:	213fffc4 	addi	r4,r4,-1
   11d18:	80e0703a 	and	r16,r16,r3
   11d1c:	2908703a 	and	r4,r5,r4
   11d20:	003fad06 	br	11bd8 <__alt_mem_Flash_flash_data+0xf4011bd8>
   11d24:	0080690e 	bge	zero,r2,11ecc <__subdf3+0x3e0>
   11d28:	50002f26 	beq	r10,zero,11de8 <__subdf3+0x2fc>
   11d2c:	0101ffc4 	movi	r4,2047
   11d30:	813f9126 	beq	r16,r4,11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11d34:	18c02034 	orhi	r3,r3,128
   11d38:	01000e04 	movi	r4,56
   11d3c:	2080b00e 	bge	r4,r2,12000 <__subdf3+0x514>
   11d40:	198cb03a 	or	r6,r3,r6
   11d44:	300ec03a 	cmpne	r7,r6,zero
   11d48:	0005883a 	mov	r2,zero
   11d4c:	3c4f883a 	add	r7,r7,r17
   11d50:	3c63803a 	cmpltu	r17,r7,r17
   11d54:	114b883a 	add	r5,r2,r5
   11d58:	2c4b883a 	add	r5,r5,r17
   11d5c:	3823883a 	mov	r17,r7
   11d60:	2880202c 	andhi	r2,r5,128
   11d64:	10002e26 	beq	r2,zero,11e20 <__subdf3+0x334>
   11d68:	84000044 	addi	r16,r16,1
   11d6c:	0081ffc4 	movi	r2,2047
   11d70:	8080de26 	beq	r16,r2,120ec <__subdf3+0x600>
   11d74:	00bfe034 	movhi	r2,65408
   11d78:	10bfffc4 	addi	r2,r2,-1
   11d7c:	288a703a 	and	r5,r5,r2
   11d80:	880cd07a 	srli	r6,r17,1
   11d84:	280897fa 	slli	r4,r5,31
   11d88:	88c0004c 	andi	r3,r17,1
   11d8c:	30e2b03a 	or	r17,r6,r3
   11d90:	280ad07a 	srli	r5,r5,1
   11d94:	8922b03a 	or	r17,r17,r4
   11d98:	003f7706 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11d9c:	1984b03a 	or	r2,r3,r6
   11da0:	103f6e26 	beq	r2,zero,11b5c <__alt_mem_Flash_flash_data+0xf4011b5c>
   11da4:	39c03fcc 	andi	r7,r7,255
   11da8:	003f6d06 	br	11b60 <__alt_mem_Flash_flash_data+0xf4011b60>
   11dac:	1146b03a 	or	r3,r2,r5
   11db0:	18003f26 	beq	r3,zero,11eb0 <__subdf3+0x3c4>
   11db4:	00c00434 	movhi	r3,16
   11db8:	29000234 	orhi	r4,r5,8
   11dbc:	18ffffc4 	addi	r3,r3,-1
   11dc0:	20c8703a 	and	r4,r4,r3
   11dc4:	003f8406 	br	11bd8 <__alt_mem_Flash_flash_data+0xf4011bd8>
   11dc8:	10bfffc4 	addi	r2,r2,-1
   11dcc:	1000501e 	bne	r2,zero,11f10 <__subdf3+0x424>
   11dd0:	898fc83a 	sub	r7,r17,r6
   11dd4:	89e3803a 	cmpltu	r17,r17,r7
   11dd8:	28cbc83a 	sub	r5,r5,r3
   11ddc:	2c4bc83a 	sub	r5,r5,r17
   11de0:	3823883a 	mov	r17,r7
   11de4:	003fa106 	br	11c6c <__alt_mem_Flash_flash_data+0xf4011c6c>
   11de8:	1988b03a 	or	r4,r3,r6
   11dec:	203f6226 	beq	r4,zero,11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11df0:	10bfffc4 	addi	r2,r2,-1
   11df4:	10009b1e 	bne	r2,zero,12064 <__subdf3+0x578>
   11df8:	344d883a 	add	r6,r6,r17
   11dfc:	3463803a 	cmpltu	r17,r6,r17
   11e00:	194b883a 	add	r5,r3,r5
   11e04:	2c4b883a 	add	r5,r5,r17
   11e08:	3023883a 	mov	r17,r6
   11e0c:	003fd406 	br	11d60 <__alt_mem_Flash_flash_data+0xf4011d60>
   11e10:	1106b03a 	or	r3,r2,r4
   11e14:	1800b426 	beq	r3,zero,120e8 <__subdf3+0x5fc>
   11e18:	100b883a 	mov	r5,r2
   11e1c:	2023883a 	mov	r17,r4
   11e20:	888001cc 	andi	r2,r17,7
   11e24:	103f561e 	bne	r2,zero,11b80 <__alt_mem_Flash_flash_data+0xf4011b80>
   11e28:	9200004c 	andi	r8,r18,1
   11e2c:	003fb206 	br	11cf8 <__alt_mem_Flash_flash_data+0xf4011cf8>
   11e30:	1000531e 	bne	r2,zero,11f80 <__subdf3+0x494>
   11e34:	80800044 	addi	r2,r16,1
   11e38:	1081ffcc 	andi	r2,r2,2047
   11e3c:	01000044 	movi	r4,1
   11e40:	2080a00e 	bge	r4,r2,120c4 <__subdf3+0x5d8>
   11e44:	8985c83a 	sub	r2,r17,r6
   11e48:	8889803a 	cmpltu	r4,r17,r2
   11e4c:	28e7c83a 	sub	r19,r5,r3
   11e50:	9927c83a 	sub	r19,r19,r4
   11e54:	9900202c 	andhi	r4,r19,128
   11e58:	20006226 	beq	r4,zero,11fe4 <__subdf3+0x4f8>
   11e5c:	3463c83a 	sub	r17,r6,r17
   11e60:	194bc83a 	sub	r5,r3,r5
   11e64:	344d803a 	cmpltu	r6,r6,r17
   11e68:	29a7c83a 	sub	r19,r5,r6
   11e6c:	3825883a 	mov	r18,r7
   11e70:	983f841e 	bne	r19,zero,11c84 <__alt_mem_Flash_flash_data+0xf4011c84>
   11e74:	8809883a 	mov	r4,r17
   11e78:	00125b80 	call	125b8 <__clzsi2>
   11e7c:	10800804 	addi	r2,r2,32
   11e80:	10fffe04 	addi	r3,r2,-8
   11e84:	010007c4 	movi	r4,31
   11e88:	20ff830e 	bge	r4,r3,11c98 <__alt_mem_Flash_flash_data+0xf4011c98>
   11e8c:	14fff604 	addi	r19,r2,-40
   11e90:	8ce6983a 	sll	r19,r17,r19
   11e94:	0023883a 	mov	r17,zero
   11e98:	1c3f860e 	bge	r3,r16,11cb4 <__alt_mem_Flash_flash_data+0xf4011cb4>
   11e9c:	017fe034 	movhi	r5,65408
   11ea0:	297fffc4 	addi	r5,r5,-1
   11ea4:	80e1c83a 	sub	r16,r16,r3
   11ea8:	994a703a 	and	r5,r19,r5
   11eac:	003f3206 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11eb0:	0009883a 	mov	r4,zero
   11eb4:	0005883a 	mov	r2,zero
   11eb8:	003f4706 	br	11bd8 <__alt_mem_Flash_flash_data+0xf4011bd8>
   11ebc:	198cb03a 	or	r6,r3,r6
   11ec0:	300cc03a 	cmpne	r6,r6,zero
   11ec4:	0005883a 	mov	r2,zero
   11ec8:	003f6306 	br	11c58 <__alt_mem_Flash_flash_data+0xf4011c58>
   11ecc:	10009d1e 	bne	r2,zero,12144 <__subdf3+0x658>
   11ed0:	81c00044 	addi	r7,r16,1
   11ed4:	3881ffcc 	andi	r2,r7,2047
   11ed8:	02400044 	movi	r9,1
   11edc:	4880680e 	bge	r9,r2,12080 <__subdf3+0x594>
   11ee0:	0081ffc4 	movi	r2,2047
   11ee4:	3880ae26 	beq	r7,r2,121a0 <__subdf3+0x6b4>
   11ee8:	344d883a 	add	r6,r6,r17
   11eec:	3463803a 	cmpltu	r17,r6,r17
   11ef0:	194b883a 	add	r5,r3,r5
   11ef4:	2c4b883a 	add	r5,r5,r17
   11ef8:	282297fa 	slli	r17,r5,31
   11efc:	300cd07a 	srli	r6,r6,1
   11f00:	280ad07a 	srli	r5,r5,1
   11f04:	3821883a 	mov	r16,r7
   11f08:	89a2b03a 	or	r17,r17,r6
   11f0c:	003f1a06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11f10:	0101ffc4 	movi	r4,2047
   11f14:	813f431e 	bne	r16,r4,11c24 <__alt_mem_Flash_flash_data+0xf4011c24>
   11f18:	003f1706 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   11f1c:	80bff844 	addi	r2,r16,-31
   11f20:	00c00804 	movi	r3,32
   11f24:	9884d83a 	srl	r2,r19,r2
   11f28:	28c05126 	beq	r5,r3,12070 <__subdf3+0x584>
   11f2c:	00c00fc4 	movi	r3,63
   11f30:	1c21c83a 	sub	r16,r3,r16
   11f34:	9c26983a 	sll	r19,r19,r16
   11f38:	9c62b03a 	or	r17,r19,r17
   11f3c:	8822c03a 	cmpne	r17,r17,zero
   11f40:	88a2b03a 	or	r17,r17,r2
   11f44:	000b883a 	mov	r5,zero
   11f48:	0021883a 	mov	r16,zero
   11f4c:	003fb406 	br	11e20 <__alt_mem_Flash_flash_data+0xf4011e20>
   11f50:	113ff804 	addi	r4,r2,-32
   11f54:	01c00804 	movi	r7,32
   11f58:	1908d83a 	srl	r4,r3,r4
   11f5c:	11c04626 	beq	r2,r7,12078 <__subdf3+0x58c>
   11f60:	01c01004 	movi	r7,64
   11f64:	3885c83a 	sub	r2,r7,r2
   11f68:	1884983a 	sll	r2,r3,r2
   11f6c:	118cb03a 	or	r6,r2,r6
   11f70:	300cc03a 	cmpne	r6,r6,zero
   11f74:	310cb03a 	or	r6,r6,r4
   11f78:	0005883a 	mov	r2,zero
   11f7c:	003f3606 	br	11c58 <__alt_mem_Flash_flash_data+0xf4011c58>
   11f80:	80002b26 	beq	r16,zero,12030 <__subdf3+0x544>
   11f84:	0101ffc4 	movi	r4,2047
   11f88:	51006926 	beq	r10,r4,12130 <__subdf3+0x644>
   11f8c:	0085c83a 	sub	r2,zero,r2
   11f90:	29402034 	orhi	r5,r5,128
   11f94:	01000e04 	movi	r4,56
   11f98:	20807d16 	blt	r4,r2,12190 <__subdf3+0x6a4>
   11f9c:	010007c4 	movi	r4,31
   11fa0:	2080d916 	blt	r4,r2,12308 <__subdf3+0x81c>
   11fa4:	01000804 	movi	r4,32
   11fa8:	2089c83a 	sub	r4,r4,r2
   11fac:	2912983a 	sll	r9,r5,r4
   11fb0:	8890d83a 	srl	r8,r17,r2
   11fb4:	8908983a 	sll	r4,r17,r4
   11fb8:	2884d83a 	srl	r2,r5,r2
   11fbc:	4a22b03a 	or	r17,r9,r8
   11fc0:	2008c03a 	cmpne	r4,r4,zero
   11fc4:	8922b03a 	or	r17,r17,r4
   11fc8:	3463c83a 	sub	r17,r6,r17
   11fcc:	1885c83a 	sub	r2,r3,r2
   11fd0:	344d803a 	cmpltu	r6,r6,r17
   11fd4:	118bc83a 	sub	r5,r2,r6
   11fd8:	5021883a 	mov	r16,r10
   11fdc:	3825883a 	mov	r18,r7
   11fe0:	003f2206 	br	11c6c <__alt_mem_Flash_flash_data+0xf4011c6c>
   11fe4:	9886b03a 	or	r3,r19,r2
   11fe8:	18001c1e 	bne	r3,zero,1205c <__subdf3+0x570>
   11fec:	0011883a 	mov	r8,zero
   11ff0:	000b883a 	mov	r5,zero
   11ff4:	0023883a 	mov	r17,zero
   11ff8:	0021883a 	mov	r16,zero
   11ffc:	003f3e06 	br	11cf8 <__alt_mem_Flash_flash_data+0xf4011cf8>
   12000:	010007c4 	movi	r4,31
   12004:	20803c16 	blt	r4,r2,120f8 <__subdf3+0x60c>
   12008:	01000804 	movi	r4,32
   1200c:	2089c83a 	sub	r4,r4,r2
   12010:	1912983a 	sll	r9,r3,r4
   12014:	308ed83a 	srl	r7,r6,r2
   12018:	3108983a 	sll	r4,r6,r4
   1201c:	1884d83a 	srl	r2,r3,r2
   12020:	49ceb03a 	or	r7,r9,r7
   12024:	2008c03a 	cmpne	r4,r4,zero
   12028:	390eb03a 	or	r7,r7,r4
   1202c:	003f4706 	br	11d4c <__alt_mem_Flash_flash_data+0xf4011d4c>
   12030:	2c48b03a 	or	r4,r5,r17
   12034:	20003e26 	beq	r4,zero,12130 <__subdf3+0x644>
   12038:	0084303a 	nor	r2,zero,r2
   1203c:	10003a1e 	bne	r2,zero,12128 <__subdf3+0x63c>
   12040:	3463c83a 	sub	r17,r6,r17
   12044:	194bc83a 	sub	r5,r3,r5
   12048:	344d803a 	cmpltu	r6,r6,r17
   1204c:	298bc83a 	sub	r5,r5,r6
   12050:	5021883a 	mov	r16,r10
   12054:	3825883a 	mov	r18,r7
   12058:	003f0406 	br	11c6c <__alt_mem_Flash_flash_data+0xf4011c6c>
   1205c:	1023883a 	mov	r17,r2
   12060:	003f0706 	br	11c80 <__alt_mem_Flash_flash_data+0xf4011c80>
   12064:	0101ffc4 	movi	r4,2047
   12068:	813f331e 	bne	r16,r4,11d38 <__alt_mem_Flash_flash_data+0xf4011d38>
   1206c:	003ec206 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12070:	0027883a 	mov	r19,zero
   12074:	003fb006 	br	11f38 <__alt_mem_Flash_flash_data+0xf4011f38>
   12078:	0005883a 	mov	r2,zero
   1207c:	003fbb06 	br	11f6c <__alt_mem_Flash_flash_data+0xf4011f6c>
   12080:	2c44b03a 	or	r2,r5,r17
   12084:	80008b1e 	bne	r16,zero,122b4 <__subdf3+0x7c8>
   12088:	1000b526 	beq	r2,zero,12360 <__subdf3+0x874>
   1208c:	1984b03a 	or	r2,r3,r6
   12090:	103eb926 	beq	r2,zero,11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12094:	3449883a 	add	r4,r6,r17
   12098:	2463803a 	cmpltu	r17,r4,r17
   1209c:	194b883a 	add	r5,r3,r5
   120a0:	2c4b883a 	add	r5,r5,r17
   120a4:	2880202c 	andhi	r2,r5,128
   120a8:	2023883a 	mov	r17,r4
   120ac:	103f5c26 	beq	r2,zero,11e20 <__alt_mem_Flash_flash_data+0xf4011e20>
   120b0:	00bfe034 	movhi	r2,65408
   120b4:	10bfffc4 	addi	r2,r2,-1
   120b8:	4821883a 	mov	r16,r9
   120bc:	288a703a 	and	r5,r5,r2
   120c0:	003ead06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   120c4:	2c44b03a 	or	r2,r5,r17
   120c8:	8000291e 	bne	r16,zero,12170 <__subdf3+0x684>
   120cc:	10004f1e 	bne	r2,zero,1220c <__subdf3+0x720>
   120d0:	1984b03a 	or	r2,r3,r6
   120d4:	10000426 	beq	r2,zero,120e8 <__subdf3+0x5fc>
   120d8:	180b883a 	mov	r5,r3
   120dc:	3023883a 	mov	r17,r6
   120e0:	3825883a 	mov	r18,r7
   120e4:	003ea406 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   120e8:	0011883a 	mov	r8,zero
   120ec:	000b883a 	mov	r5,zero
   120f0:	0023883a 	mov	r17,zero
   120f4:	003f0006 	br	11cf8 <__alt_mem_Flash_flash_data+0xf4011cf8>
   120f8:	11fff804 	addi	r7,r2,-32
   120fc:	19c8d83a 	srl	r4,r3,r7
   12100:	01c00804 	movi	r7,32
   12104:	11c07e26 	beq	r2,r7,12300 <__subdf3+0x814>
   12108:	01c01004 	movi	r7,64
   1210c:	3885c83a 	sub	r2,r7,r2
   12110:	1884983a 	sll	r2,r3,r2
   12114:	118cb03a 	or	r6,r2,r6
   12118:	300ec03a 	cmpne	r7,r6,zero
   1211c:	390eb03a 	or	r7,r7,r4
   12120:	0005883a 	mov	r2,zero
   12124:	003f0906 	br	11d4c <__alt_mem_Flash_flash_data+0xf4011d4c>
   12128:	0101ffc4 	movi	r4,2047
   1212c:	513f991e 	bne	r10,r4,11f94 <__alt_mem_Flash_flash_data+0xf4011f94>
   12130:	180b883a 	mov	r5,r3
   12134:	3023883a 	mov	r17,r6
   12138:	5021883a 	mov	r16,r10
   1213c:	3825883a 	mov	r18,r7
   12140:	003e8d06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12144:	80001a1e 	bne	r16,zero,121b0 <__subdf3+0x6c4>
   12148:	2c48b03a 	or	r4,r5,r17
   1214c:	20005526 	beq	r4,zero,122a4 <__subdf3+0x7b8>
   12150:	0084303a 	nor	r2,zero,r2
   12154:	1000511e 	bne	r2,zero,1229c <__subdf3+0x7b0>
   12158:	89a3883a 	add	r17,r17,r6
   1215c:	194b883a 	add	r5,r3,r5
   12160:	898d803a 	cmpltu	r6,r17,r6
   12164:	298b883a 	add	r5,r5,r6
   12168:	5021883a 	mov	r16,r10
   1216c:	003efc06 	br	11d60 <__alt_mem_Flash_flash_data+0xf4011d60>
   12170:	1000341e 	bne	r2,zero,12244 <__subdf3+0x758>
   12174:	1984b03a 	or	r2,r3,r6
   12178:	10006f26 	beq	r2,zero,12338 <__subdf3+0x84c>
   1217c:	180b883a 	mov	r5,r3
   12180:	3023883a 	mov	r17,r6
   12184:	3825883a 	mov	r18,r7
   12188:	0401ffc4 	movi	r16,2047
   1218c:	003e7a06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12190:	2c62b03a 	or	r17,r5,r17
   12194:	8822c03a 	cmpne	r17,r17,zero
   12198:	0005883a 	mov	r2,zero
   1219c:	003f8a06 	br	11fc8 <__alt_mem_Flash_flash_data+0xf4011fc8>
   121a0:	3821883a 	mov	r16,r7
   121a4:	000b883a 	mov	r5,zero
   121a8:	0023883a 	mov	r17,zero
   121ac:	003ed206 	br	11cf8 <__alt_mem_Flash_flash_data+0xf4011cf8>
   121b0:	0101ffc4 	movi	r4,2047
   121b4:	51003b26 	beq	r10,r4,122a4 <__subdf3+0x7b8>
   121b8:	0085c83a 	sub	r2,zero,r2
   121bc:	29402034 	orhi	r5,r5,128
   121c0:	01000e04 	movi	r4,56
   121c4:	20806216 	blt	r4,r2,12350 <__subdf3+0x864>
   121c8:	010007c4 	movi	r4,31
   121cc:	20806b16 	blt	r4,r2,1237c <__subdf3+0x890>
   121d0:	01000804 	movi	r4,32
   121d4:	2089c83a 	sub	r4,r4,r2
   121d8:	2912983a 	sll	r9,r5,r4
   121dc:	888ed83a 	srl	r7,r17,r2
   121e0:	8908983a 	sll	r4,r17,r4
   121e4:	2884d83a 	srl	r2,r5,r2
   121e8:	49e2b03a 	or	r17,r9,r7
   121ec:	2008c03a 	cmpne	r4,r4,zero
   121f0:	8922b03a 	or	r17,r17,r4
   121f4:	89a3883a 	add	r17,r17,r6
   121f8:	10c5883a 	add	r2,r2,r3
   121fc:	898d803a 	cmpltu	r6,r17,r6
   12200:	118b883a 	add	r5,r2,r6
   12204:	5021883a 	mov	r16,r10
   12208:	003ed506 	br	11d60 <__alt_mem_Flash_flash_data+0xf4011d60>
   1220c:	1984b03a 	or	r2,r3,r6
   12210:	103e5926 	beq	r2,zero,11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12214:	8989c83a 	sub	r4,r17,r6
   12218:	8911803a 	cmpltu	r8,r17,r4
   1221c:	28c5c83a 	sub	r2,r5,r3
   12220:	1205c83a 	sub	r2,r2,r8
   12224:	1200202c 	andhi	r8,r2,128
   12228:	403ef926 	beq	r8,zero,11e10 <__alt_mem_Flash_flash_data+0xf4011e10>
   1222c:	3463c83a 	sub	r17,r6,r17
   12230:	194bc83a 	sub	r5,r3,r5
   12234:	344d803a 	cmpltu	r6,r6,r17
   12238:	298bc83a 	sub	r5,r5,r6
   1223c:	3825883a 	mov	r18,r7
   12240:	003e4d06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12244:	1984b03a 	or	r2,r3,r6
   12248:	10002b26 	beq	r2,zero,122f8 <__subdf3+0x80c>
   1224c:	2808d0fa 	srli	r4,r5,3
   12250:	8822d0fa 	srli	r17,r17,3
   12254:	280a977a 	slli	r5,r5,29
   12258:	2080022c 	andhi	r2,r4,8
   1225c:	2c62b03a 	or	r17,r5,r17
   12260:	10000826 	beq	r2,zero,12284 <__subdf3+0x798>
   12264:	1810d0fa 	srli	r8,r3,3
   12268:	4080022c 	andhi	r2,r8,8
   1226c:	1000051e 	bne	r2,zero,12284 <__subdf3+0x798>
   12270:	300cd0fa 	srli	r6,r6,3
   12274:	1804977a 	slli	r2,r3,29
   12278:	4009883a 	mov	r4,r8
   1227c:	3825883a 	mov	r18,r7
   12280:	11a2b03a 	or	r17,r2,r6
   12284:	880ad77a 	srli	r5,r17,29
   12288:	200890fa 	slli	r4,r4,3
   1228c:	882290fa 	slli	r17,r17,3
   12290:	0401ffc4 	movi	r16,2047
   12294:	290ab03a 	or	r5,r5,r4
   12298:	003e3706 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   1229c:	0101ffc4 	movi	r4,2047
   122a0:	513fc71e 	bne	r10,r4,121c0 <__alt_mem_Flash_flash_data+0xf40121c0>
   122a4:	180b883a 	mov	r5,r3
   122a8:	3023883a 	mov	r17,r6
   122ac:	5021883a 	mov	r16,r10
   122b0:	003e3106 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   122b4:	10002d26 	beq	r2,zero,1236c <__subdf3+0x880>
   122b8:	1984b03a 	or	r2,r3,r6
   122bc:	10000e26 	beq	r2,zero,122f8 <__subdf3+0x80c>
   122c0:	2808d0fa 	srli	r4,r5,3
   122c4:	8822d0fa 	srli	r17,r17,3
   122c8:	280a977a 	slli	r5,r5,29
   122cc:	2080022c 	andhi	r2,r4,8
   122d0:	2c62b03a 	or	r17,r5,r17
   122d4:	103feb26 	beq	r2,zero,12284 <__alt_mem_Flash_flash_data+0xf4012284>
   122d8:	180ed0fa 	srli	r7,r3,3
   122dc:	3880022c 	andhi	r2,r7,8
   122e0:	103fe81e 	bne	r2,zero,12284 <__alt_mem_Flash_flash_data+0xf4012284>
   122e4:	300cd0fa 	srli	r6,r6,3
   122e8:	1804977a 	slli	r2,r3,29
   122ec:	3809883a 	mov	r4,r7
   122f0:	11a2b03a 	or	r17,r2,r6
   122f4:	003fe306 	br	12284 <__alt_mem_Flash_flash_data+0xf4012284>
   122f8:	0401ffc4 	movi	r16,2047
   122fc:	003e1e06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   12300:	0005883a 	mov	r2,zero
   12304:	003f8306 	br	12114 <__alt_mem_Flash_flash_data+0xf4012114>
   12308:	113ff804 	addi	r4,r2,-32
   1230c:	02000804 	movi	r8,32
   12310:	2908d83a 	srl	r4,r5,r4
   12314:	12002526 	beq	r2,r8,123ac <__subdf3+0x8c0>
   12318:	02001004 	movi	r8,64
   1231c:	4085c83a 	sub	r2,r8,r2
   12320:	288a983a 	sll	r5,r5,r2
   12324:	2c62b03a 	or	r17,r5,r17
   12328:	8822c03a 	cmpne	r17,r17,zero
   1232c:	8922b03a 	or	r17,r17,r4
   12330:	0005883a 	mov	r2,zero
   12334:	003f2406 	br	11fc8 <__alt_mem_Flash_flash_data+0xf4011fc8>
   12338:	01402034 	movhi	r5,128
   1233c:	0011883a 	mov	r8,zero
   12340:	297fffc4 	addi	r5,r5,-1
   12344:	047ffe04 	movi	r17,-8
   12348:	0401ffc4 	movi	r16,2047
   1234c:	003e6a06 	br	11cf8 <__alt_mem_Flash_flash_data+0xf4011cf8>
   12350:	2c62b03a 	or	r17,r5,r17
   12354:	8822c03a 	cmpne	r17,r17,zero
   12358:	0005883a 	mov	r2,zero
   1235c:	003fa506 	br	121f4 <__alt_mem_Flash_flash_data+0xf40121f4>
   12360:	180b883a 	mov	r5,r3
   12364:	3023883a 	mov	r17,r6
   12368:	003e0306 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   1236c:	180b883a 	mov	r5,r3
   12370:	3023883a 	mov	r17,r6
   12374:	0401ffc4 	movi	r16,2047
   12378:	003dff06 	br	11b78 <__alt_mem_Flash_flash_data+0xf4011b78>
   1237c:	113ff804 	addi	r4,r2,-32
   12380:	01c00804 	movi	r7,32
   12384:	2908d83a 	srl	r4,r5,r4
   12388:	11c00a26 	beq	r2,r7,123b4 <__subdf3+0x8c8>
   1238c:	01c01004 	movi	r7,64
   12390:	3885c83a 	sub	r2,r7,r2
   12394:	288a983a 	sll	r5,r5,r2
   12398:	2c62b03a 	or	r17,r5,r17
   1239c:	8822c03a 	cmpne	r17,r17,zero
   123a0:	8922b03a 	or	r17,r17,r4
   123a4:	0005883a 	mov	r2,zero
   123a8:	003f9206 	br	121f4 <__alt_mem_Flash_flash_data+0xf40121f4>
   123ac:	000b883a 	mov	r5,zero
   123b0:	003fdc06 	br	12324 <__alt_mem_Flash_flash_data+0xf4012324>
   123b4:	000b883a 	mov	r5,zero
   123b8:	003ff706 	br	12398 <__alt_mem_Flash_flash_data+0xf4012398>

000123bc <__fixdfsi>:
   123bc:	2806d53a 	srli	r3,r5,20
   123c0:	00800434 	movhi	r2,16
   123c4:	10bfffc4 	addi	r2,r2,-1
   123c8:	18c1ffcc 	andi	r3,r3,2047
   123cc:	0180ff84 	movi	r6,1022
   123d0:	2884703a 	and	r2,r5,r2
   123d4:	280ad7fa 	srli	r5,r5,31
   123d8:	30c0130e 	bge	r6,r3,12428 <__fixdfsi+0x6c>
   123dc:	01810744 	movi	r6,1053
   123e0:	30c00d16 	blt	r6,r3,12418 <__fixdfsi+0x5c>
   123e4:	01810cc4 	movi	r6,1075
   123e8:	30cdc83a 	sub	r6,r6,r3
   123ec:	01c007c4 	movi	r7,31
   123f0:	10800434 	orhi	r2,r2,16
   123f4:	39800e0e 	bge	r7,r6,12430 <__fixdfsi+0x74>
   123f8:	010104c4 	movi	r4,1043
   123fc:	20c7c83a 	sub	r3,r4,r3
   12400:	10c6d83a 	srl	r3,r2,r3
   12404:	29403fcc 	andi	r5,r5,255
   12408:	0145c83a 	sub	r2,zero,r5
   1240c:	1884f03a 	xor	r2,r3,r2
   12410:	1145883a 	add	r2,r2,r5
   12414:	f800283a 	ret
   12418:	00a00034 	movhi	r2,32768
   1241c:	10bfffc4 	addi	r2,r2,-1
   12420:	2885883a 	add	r2,r5,r2
   12424:	f800283a 	ret
   12428:	0005883a 	mov	r2,zero
   1242c:	f800283a 	ret
   12430:	18fefb44 	addi	r3,r3,-1043
   12434:	2188d83a 	srl	r4,r4,r6
   12438:	10c6983a 	sll	r3,r2,r3
   1243c:	20c6b03a 	or	r3,r4,r3
   12440:	003ff006 	br	12404 <__alt_mem_Flash_flash_data+0xf4012404>

00012444 <__floatsidf>:
   12444:	defffd04 	addi	sp,sp,-12
   12448:	dc400115 	stw	r17,4(sp)
   1244c:	dfc00215 	stw	ra,8(sp)
   12450:	dc000015 	stw	r16,0(sp)
   12454:	2023883a 	mov	r17,r4
   12458:	20001426 	beq	r4,zero,124ac <__floatsidf+0x68>
   1245c:	2020d7fa 	srli	r16,r4,31
   12460:	80000126 	beq	r16,zero,12468 <__floatsidf+0x24>
   12464:	0123c83a 	sub	r17,zero,r4
   12468:	8809883a 	mov	r4,r17
   1246c:	00125b80 	call	125b8 <__clzsi2>
   12470:	01410784 	movi	r5,1054
   12474:	00c00284 	movi	r3,10
   12478:	288bc83a 	sub	r5,r5,r2
   1247c:	18801c16 	blt	r3,r2,124f0 <__floatsidf+0xac>
   12480:	00c002c4 	movi	r3,11
   12484:	1887c83a 	sub	r3,r3,r2
   12488:	88c8d83a 	srl	r4,r17,r3
   1248c:	00c00434 	movhi	r3,16
   12490:	18ffffc4 	addi	r3,r3,-1
   12494:	10800544 	addi	r2,r2,21
   12498:	20c8703a 	and	r4,r4,r3
   1249c:	8884983a 	sll	r2,r17,r2
   124a0:	28c1ffcc 	andi	r3,r5,2047
   124a4:	800d883a 	mov	r6,r16
   124a8:	00000406 	br	124bc <__floatsidf+0x78>
   124ac:	000d883a 	mov	r6,zero
   124b0:	0007883a 	mov	r3,zero
   124b4:	0009883a 	mov	r4,zero
   124b8:	0005883a 	mov	r2,zero
   124bc:	180a953a 	slli	r5,r3,20
   124c0:	31803fcc 	andi	r6,r6,255
   124c4:	00c00434 	movhi	r3,16
   124c8:	300c97fa 	slli	r6,r6,31
   124cc:	18ffffc4 	addi	r3,r3,-1
   124d0:	20c6703a 	and	r3,r4,r3
   124d4:	1946b03a 	or	r3,r3,r5
   124d8:	1986b03a 	or	r3,r3,r6
   124dc:	dfc00217 	ldw	ra,8(sp)
   124e0:	dc400117 	ldw	r17,4(sp)
   124e4:	dc000017 	ldw	r16,0(sp)
   124e8:	dec00304 	addi	sp,sp,12
   124ec:	f800283a 	ret
   124f0:	10fffd44 	addi	r3,r2,-11
   124f4:	88c8983a 	sll	r4,r17,r3
   124f8:	00800434 	movhi	r2,16
   124fc:	10bfffc4 	addi	r2,r2,-1
   12500:	2088703a 	and	r4,r4,r2
   12504:	28c1ffcc 	andi	r3,r5,2047
   12508:	800d883a 	mov	r6,r16
   1250c:	0005883a 	mov	r2,zero
   12510:	003fea06 	br	124bc <__alt_mem_Flash_flash_data+0xf40124bc>

00012514 <__floatunsidf>:
   12514:	defffe04 	addi	sp,sp,-8
   12518:	dc000015 	stw	r16,0(sp)
   1251c:	dfc00115 	stw	ra,4(sp)
   12520:	2021883a 	mov	r16,r4
   12524:	20001026 	beq	r4,zero,12568 <__floatunsidf+0x54>
   12528:	00125b80 	call	125b8 <__clzsi2>
   1252c:	01410784 	movi	r5,1054
   12530:	100d883a 	mov	r6,r2
   12534:	288bc83a 	sub	r5,r5,r2
   12538:	00800284 	movi	r2,10
   1253c:	11801616 	blt	r2,r6,12598 <__floatunsidf+0x84>
   12540:	008002c4 	movi	r2,11
   12544:	1185c83a 	sub	r2,r2,r6
   12548:	8084d83a 	srl	r2,r16,r2
   1254c:	00c00434 	movhi	r3,16
   12550:	31c00544 	addi	r7,r6,21
   12554:	18ffffc4 	addi	r3,r3,-1
   12558:	81e0983a 	sll	r16,r16,r7
   1255c:	10cc703a 	and	r6,r2,r3
   12560:	2941ffcc 	andi	r5,r5,2047
   12564:	00000206 	br	12570 <__floatunsidf+0x5c>
   12568:	000b883a 	mov	r5,zero
   1256c:	000d883a 	mov	r6,zero
   12570:	280a953a 	slli	r5,r5,20
   12574:	00c00434 	movhi	r3,16
   12578:	18ffffc4 	addi	r3,r3,-1
   1257c:	30c6703a 	and	r3,r6,r3
   12580:	8005883a 	mov	r2,r16
   12584:	1946b03a 	or	r3,r3,r5
   12588:	dfc00117 	ldw	ra,4(sp)
   1258c:	dc000017 	ldw	r16,0(sp)
   12590:	dec00204 	addi	sp,sp,8
   12594:	f800283a 	ret
   12598:	31bffd44 	addi	r6,r6,-11
   1259c:	818c983a 	sll	r6,r16,r6
   125a0:	00800434 	movhi	r2,16
   125a4:	10bfffc4 	addi	r2,r2,-1
   125a8:	2941ffcc 	andi	r5,r5,2047
   125ac:	0021883a 	mov	r16,zero
   125b0:	308c703a 	and	r6,r6,r2
   125b4:	003fee06 	br	12570 <__alt_mem_Flash_flash_data+0xf4012570>

000125b8 <__clzsi2>:
   125b8:	00bfffd4 	movui	r2,65535
   125bc:	11000b36 	bltu	r2,r4,125ec <__clzsi2+0x34>
   125c0:	00803fc4 	movi	r2,255
   125c4:	1100122e 	bgeu	r2,r4,12610 <__clzsi2+0x58>
   125c8:	00c00204 	movi	r3,8
   125cc:	01400604 	movi	r5,24
   125d0:	20c8d83a 	srl	r4,r4,r3
   125d4:	008000b4 	movhi	r2,2
   125d8:	10bffe04 	addi	r2,r2,-8
   125dc:	1109883a 	add	r4,r2,r4
   125e0:	20800003 	ldbu	r2,0(r4)
   125e4:	2885c83a 	sub	r2,r5,r2
   125e8:	f800283a 	ret
   125ec:	00804034 	movhi	r2,256
   125f0:	10bfffc4 	addi	r2,r2,-1
   125f4:	11000336 	bltu	r2,r4,12604 <__clzsi2+0x4c>
   125f8:	00c00404 	movi	r3,16
   125fc:	180b883a 	mov	r5,r3
   12600:	003ff306 	br	125d0 <__alt_mem_Flash_flash_data+0xf40125d0>
   12604:	00c00604 	movi	r3,24
   12608:	01400204 	movi	r5,8
   1260c:	003ff006 	br	125d0 <__alt_mem_Flash_flash_data+0xf40125d0>
   12610:	0007883a 	mov	r3,zero
   12614:	01400804 	movi	r5,32
   12618:	003fed06 	br	125d0 <__alt_mem_Flash_flash_data+0xf40125d0>

0001261c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1261c:	defffe04 	addi	sp,sp,-8
   12620:	dfc00115 	stw	ra,4(sp)
   12624:	df000015 	stw	fp,0(sp)
   12628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1262c:	008000b4 	movhi	r2,2
   12630:	1088a004 	addi	r2,r2,8832
   12634:	10800017 	ldw	r2,0(r2)
   12638:	10000526 	beq	r2,zero,12650 <alt_get_errno+0x34>
   1263c:	008000b4 	movhi	r2,2
   12640:	1088a004 	addi	r2,r2,8832
   12644:	10800017 	ldw	r2,0(r2)
   12648:	103ee83a 	callr	r2
   1264c:	00000206 	br	12658 <alt_get_errno+0x3c>
   12650:	008000b4 	movhi	r2,2
   12654:	1090b104 	addi	r2,r2,17092
}
   12658:	e037883a 	mov	sp,fp
   1265c:	dfc00117 	ldw	ra,4(sp)
   12660:	df000017 	ldw	fp,0(sp)
   12664:	dec00204 	addi	sp,sp,8
   12668:	f800283a 	ret

0001266c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1266c:	defffb04 	addi	sp,sp,-20
   12670:	dfc00415 	stw	ra,16(sp)
   12674:	df000315 	stw	fp,12(sp)
   12678:	df000304 	addi	fp,sp,12
   1267c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12680:	e0bfff17 	ldw	r2,-4(fp)
   12684:	10000616 	blt	r2,zero,126a0 <close+0x34>
   12688:	e0bfff17 	ldw	r2,-4(fp)
   1268c:	10c00324 	muli	r3,r2,12
   12690:	008000b4 	movhi	r2,2
   12694:	10832c04 	addi	r2,r2,3248
   12698:	1885883a 	add	r2,r3,r2
   1269c:	00000106 	br	126a4 <close+0x38>
   126a0:	0005883a 	mov	r2,zero
   126a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   126a8:	e0bffd17 	ldw	r2,-12(fp)
   126ac:	10001926 	beq	r2,zero,12714 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   126b0:	e0bffd17 	ldw	r2,-12(fp)
   126b4:	10800017 	ldw	r2,0(r2)
   126b8:	10800417 	ldw	r2,16(r2)
   126bc:	10000626 	beq	r2,zero,126d8 <close+0x6c>
   126c0:	e0bffd17 	ldw	r2,-12(fp)
   126c4:	10800017 	ldw	r2,0(r2)
   126c8:	10800417 	ldw	r2,16(r2)
   126cc:	e13ffd17 	ldw	r4,-12(fp)
   126d0:	103ee83a 	callr	r2
   126d4:	00000106 	br	126dc <close+0x70>
   126d8:	0005883a 	mov	r2,zero
   126dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   126e0:	e13fff17 	ldw	r4,-4(fp)
   126e4:	0012d840 	call	12d84 <alt_release_fd>
    if (rval < 0)
   126e8:	e0bffe17 	ldw	r2,-8(fp)
   126ec:	1000070e 	bge	r2,zero,1270c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   126f0:	001261c0 	call	1261c <alt_get_errno>
   126f4:	1007883a 	mov	r3,r2
   126f8:	e0bffe17 	ldw	r2,-8(fp)
   126fc:	0085c83a 	sub	r2,zero,r2
   12700:	18800015 	stw	r2,0(r3)
      return -1;
   12704:	00bfffc4 	movi	r2,-1
   12708:	00000706 	br	12728 <close+0xbc>
    }
    return 0;
   1270c:	0005883a 	mov	r2,zero
   12710:	00000506 	br	12728 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12714:	001261c0 	call	1261c <alt_get_errno>
   12718:	1007883a 	mov	r3,r2
   1271c:	00801444 	movi	r2,81
   12720:	18800015 	stw	r2,0(r3)
    return -1;
   12724:	00bfffc4 	movi	r2,-1
  }
}
   12728:	e037883a 	mov	sp,fp
   1272c:	dfc00117 	ldw	ra,4(sp)
   12730:	df000017 	ldw	fp,0(sp)
   12734:	dec00204 	addi	sp,sp,8
   12738:	f800283a 	ret

0001273c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1273c:	defffc04 	addi	sp,sp,-16
   12740:	df000315 	stw	fp,12(sp)
   12744:	df000304 	addi	fp,sp,12
   12748:	e13ffd15 	stw	r4,-12(fp)
   1274c:	e17ffe15 	stw	r5,-8(fp)
   12750:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12754:	e0bfff17 	ldw	r2,-4(fp)
}
   12758:	e037883a 	mov	sp,fp
   1275c:	df000017 	ldw	fp,0(sp)
   12760:	dec00104 	addi	sp,sp,4
   12764:	f800283a 	ret

00012768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12768:	defffe04 	addi	sp,sp,-8
   1276c:	dfc00115 	stw	ra,4(sp)
   12770:	df000015 	stw	fp,0(sp)
   12774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12778:	008000b4 	movhi	r2,2
   1277c:	1088a004 	addi	r2,r2,8832
   12780:	10800017 	ldw	r2,0(r2)
   12784:	10000526 	beq	r2,zero,1279c <alt_get_errno+0x34>
   12788:	008000b4 	movhi	r2,2
   1278c:	1088a004 	addi	r2,r2,8832
   12790:	10800017 	ldw	r2,0(r2)
   12794:	103ee83a 	callr	r2
   12798:	00000206 	br	127a4 <alt_get_errno+0x3c>
   1279c:	008000b4 	movhi	r2,2
   127a0:	1090b104 	addi	r2,r2,17092
}
   127a4:	e037883a 	mov	sp,fp
   127a8:	dfc00117 	ldw	ra,4(sp)
   127ac:	df000017 	ldw	fp,0(sp)
   127b0:	dec00204 	addi	sp,sp,8
   127b4:	f800283a 	ret

000127b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   127b8:	defffb04 	addi	sp,sp,-20
   127bc:	dfc00415 	stw	ra,16(sp)
   127c0:	df000315 	stw	fp,12(sp)
   127c4:	df000304 	addi	fp,sp,12
   127c8:	e13ffe15 	stw	r4,-8(fp)
   127cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   127d0:	e0bffe17 	ldw	r2,-8(fp)
   127d4:	10000616 	blt	r2,zero,127f0 <fstat+0x38>
   127d8:	e0bffe17 	ldw	r2,-8(fp)
   127dc:	10c00324 	muli	r3,r2,12
   127e0:	008000b4 	movhi	r2,2
   127e4:	10832c04 	addi	r2,r2,3248
   127e8:	1885883a 	add	r2,r3,r2
   127ec:	00000106 	br	127f4 <fstat+0x3c>
   127f0:	0005883a 	mov	r2,zero
   127f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   127f8:	e0bffd17 	ldw	r2,-12(fp)
   127fc:	10001026 	beq	r2,zero,12840 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12800:	e0bffd17 	ldw	r2,-12(fp)
   12804:	10800017 	ldw	r2,0(r2)
   12808:	10800817 	ldw	r2,32(r2)
   1280c:	10000726 	beq	r2,zero,1282c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   12810:	e0bffd17 	ldw	r2,-12(fp)
   12814:	10800017 	ldw	r2,0(r2)
   12818:	10800817 	ldw	r2,32(r2)
   1281c:	e13ffd17 	ldw	r4,-12(fp)
   12820:	e17fff17 	ldw	r5,-4(fp)
   12824:	103ee83a 	callr	r2
   12828:	00000a06 	br	12854 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1282c:	e0bfff17 	ldw	r2,-4(fp)
   12830:	00c80004 	movi	r3,8192
   12834:	10c00115 	stw	r3,4(r2)
      return 0;
   12838:	0005883a 	mov	r2,zero
   1283c:	00000506 	br	12854 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12840:	00127680 	call	12768 <alt_get_errno>
   12844:	1007883a 	mov	r3,r2
   12848:	00801444 	movi	r2,81
   1284c:	18800015 	stw	r2,0(r3)
    return -1;
   12850:	00bfffc4 	movi	r2,-1
  }
}
   12854:	e037883a 	mov	sp,fp
   12858:	dfc00117 	ldw	ra,4(sp)
   1285c:	df000017 	ldw	fp,0(sp)
   12860:	dec00204 	addi	sp,sp,8
   12864:	f800283a 	ret

00012868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12868:	defffe04 	addi	sp,sp,-8
   1286c:	dfc00115 	stw	ra,4(sp)
   12870:	df000015 	stw	fp,0(sp)
   12874:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12878:	008000b4 	movhi	r2,2
   1287c:	1088a004 	addi	r2,r2,8832
   12880:	10800017 	ldw	r2,0(r2)
   12884:	10000526 	beq	r2,zero,1289c <alt_get_errno+0x34>
   12888:	008000b4 	movhi	r2,2
   1288c:	1088a004 	addi	r2,r2,8832
   12890:	10800017 	ldw	r2,0(r2)
   12894:	103ee83a 	callr	r2
   12898:	00000206 	br	128a4 <alt_get_errno+0x3c>
   1289c:	008000b4 	movhi	r2,2
   128a0:	1090b104 	addi	r2,r2,17092
}
   128a4:	e037883a 	mov	sp,fp
   128a8:	dfc00117 	ldw	ra,4(sp)
   128ac:	df000017 	ldw	fp,0(sp)
   128b0:	dec00204 	addi	sp,sp,8
   128b4:	f800283a 	ret

000128b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   128b8:	deffed04 	addi	sp,sp,-76
   128bc:	dfc01215 	stw	ra,72(sp)
   128c0:	df001115 	stw	fp,68(sp)
   128c4:	df001104 	addi	fp,sp,68
   128c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   128cc:	e0bfff17 	ldw	r2,-4(fp)
   128d0:	10000616 	blt	r2,zero,128ec <isatty+0x34>
   128d4:	e0bfff17 	ldw	r2,-4(fp)
   128d8:	10c00324 	muli	r3,r2,12
   128dc:	008000b4 	movhi	r2,2
   128e0:	10832c04 	addi	r2,r2,3248
   128e4:	1885883a 	add	r2,r3,r2
   128e8:	00000106 	br	128f0 <isatty+0x38>
   128ec:	0005883a 	mov	r2,zero
   128f0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   128f4:	e0bfef17 	ldw	r2,-68(fp)
   128f8:	10000e26 	beq	r2,zero,12934 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   128fc:	e0bfef17 	ldw	r2,-68(fp)
   12900:	10800017 	ldw	r2,0(r2)
   12904:	10800817 	ldw	r2,32(r2)
   12908:	1000021e 	bne	r2,zero,12914 <isatty+0x5c>
    {
      return 1;
   1290c:	00800044 	movi	r2,1
   12910:	00000d06 	br	12948 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   12914:	e0bff004 	addi	r2,fp,-64
   12918:	e13fff17 	ldw	r4,-4(fp)
   1291c:	100b883a 	mov	r5,r2
   12920:	00127b80 	call	127b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   12924:	e0bff117 	ldw	r2,-60(fp)
   12928:	10880020 	cmpeqi	r2,r2,8192
   1292c:	10803fcc 	andi	r2,r2,255
   12930:	00000506 	br	12948 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12934:	00128680 	call	12868 <alt_get_errno>
   12938:	1007883a 	mov	r3,r2
   1293c:	00801444 	movi	r2,81
   12940:	18800015 	stw	r2,0(r3)
    return 0;
   12944:	0005883a 	mov	r2,zero
  }
}
   12948:	e037883a 	mov	sp,fp
   1294c:	dfc00117 	ldw	ra,4(sp)
   12950:	df000017 	ldw	fp,0(sp)
   12954:	dec00204 	addi	sp,sp,8
   12958:	f800283a 	ret

0001295c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1295c:	defffc04 	addi	sp,sp,-16
   12960:	df000315 	stw	fp,12(sp)
   12964:	df000304 	addi	fp,sp,12
   12968:	e13ffd15 	stw	r4,-12(fp)
   1296c:	e17ffe15 	stw	r5,-8(fp)
   12970:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   12974:	e0fffe17 	ldw	r3,-8(fp)
   12978:	e0bffd17 	ldw	r2,-12(fp)
   1297c:	18800c26 	beq	r3,r2,129b0 <alt_load_section+0x54>
  {
    while( to != end )
   12980:	00000806 	br	129a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   12984:	e0bffe17 	ldw	r2,-8(fp)
   12988:	10c00104 	addi	r3,r2,4
   1298c:	e0fffe15 	stw	r3,-8(fp)
   12990:	e0fffd17 	ldw	r3,-12(fp)
   12994:	19000104 	addi	r4,r3,4
   12998:	e13ffd15 	stw	r4,-12(fp)
   1299c:	18c00017 	ldw	r3,0(r3)
   129a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   129a4:	e0fffe17 	ldw	r3,-8(fp)
   129a8:	e0bfff17 	ldw	r2,-4(fp)
   129ac:	18bff51e 	bne	r3,r2,12984 <__alt_mem_Flash_flash_data+0xf4012984>
    {
      *to++ = *from++;
    }
  }
}
   129b0:	e037883a 	mov	sp,fp
   129b4:	df000017 	ldw	fp,0(sp)
   129b8:	dec00104 	addi	sp,sp,4
   129bc:	f800283a 	ret

000129c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   129c0:	defffe04 	addi	sp,sp,-8
   129c4:	dfc00115 	stw	ra,4(sp)
   129c8:	df000015 	stw	fp,0(sp)
   129cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   129d0:	010000b4 	movhi	r4,2
   129d4:	2108c404 	addi	r4,r4,8976
   129d8:	014000b4 	movhi	r5,2
   129dc:	2940f904 	addi	r5,r5,996
   129e0:	018000b4 	movhi	r6,2
   129e4:	3188c404 	addi	r6,r6,8976
   129e8:	001295c0 	call	1295c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   129ec:	01000034 	movhi	r4,0
   129f0:	21000804 	addi	r4,r4,32
   129f4:	01400034 	movhi	r5,0
   129f8:	29400804 	addi	r5,r5,32
   129fc:	01800034 	movhi	r6,0
   12a00:	31809104 	addi	r6,r6,580
   12a04:	001295c0 	call	1295c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   12a08:	010000b4 	movhi	r4,2
   12a0c:	213e0804 	addi	r4,r4,-2016
   12a10:	014000b4 	movhi	r5,2
   12a14:	297e0804 	addi	r5,r5,-2016
   12a18:	018000b4 	movhi	r6,2
   12a1c:	3180f904 	addi	r6,r6,996
   12a20:	001295c0 	call	1295c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12a24:	001e4680 	call	1e468 <alt_dcache_flush_all>
  alt_icache_flush_all();
   12a28:	001e6c00 	call	1e6c0 <alt_icache_flush_all>
}
   12a2c:	e037883a 	mov	sp,fp
   12a30:	dfc00117 	ldw	ra,4(sp)
   12a34:	df000017 	ldw	fp,0(sp)
   12a38:	dec00204 	addi	sp,sp,8
   12a3c:	f800283a 	ret

00012a40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a40:	defffe04 	addi	sp,sp,-8
   12a44:	dfc00115 	stw	ra,4(sp)
   12a48:	df000015 	stw	fp,0(sp)
   12a4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12a50:	008000b4 	movhi	r2,2
   12a54:	1088a004 	addi	r2,r2,8832
   12a58:	10800017 	ldw	r2,0(r2)
   12a5c:	10000526 	beq	r2,zero,12a74 <alt_get_errno+0x34>
   12a60:	008000b4 	movhi	r2,2
   12a64:	1088a004 	addi	r2,r2,8832
   12a68:	10800017 	ldw	r2,0(r2)
   12a6c:	103ee83a 	callr	r2
   12a70:	00000206 	br	12a7c <alt_get_errno+0x3c>
   12a74:	008000b4 	movhi	r2,2
   12a78:	1090b104 	addi	r2,r2,17092
}
   12a7c:	e037883a 	mov	sp,fp
   12a80:	dfc00117 	ldw	ra,4(sp)
   12a84:	df000017 	ldw	fp,0(sp)
   12a88:	dec00204 	addi	sp,sp,8
   12a8c:	f800283a 	ret

00012a90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12a90:	defff904 	addi	sp,sp,-28
   12a94:	dfc00615 	stw	ra,24(sp)
   12a98:	df000515 	stw	fp,20(sp)
   12a9c:	df000504 	addi	fp,sp,20
   12aa0:	e13ffd15 	stw	r4,-12(fp)
   12aa4:	e17ffe15 	stw	r5,-8(fp)
   12aa8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   12aac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12ab0:	e0bffd17 	ldw	r2,-12(fp)
   12ab4:	10000616 	blt	r2,zero,12ad0 <lseek+0x40>
   12ab8:	e0bffd17 	ldw	r2,-12(fp)
   12abc:	10c00324 	muli	r3,r2,12
   12ac0:	008000b4 	movhi	r2,2
   12ac4:	10832c04 	addi	r2,r2,3248
   12ac8:	1885883a 	add	r2,r3,r2
   12acc:	00000106 	br	12ad4 <lseek+0x44>
   12ad0:	0005883a 	mov	r2,zero
   12ad4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   12ad8:	e0bffc17 	ldw	r2,-16(fp)
   12adc:	10001026 	beq	r2,zero,12b20 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12ae0:	e0bffc17 	ldw	r2,-16(fp)
   12ae4:	10800017 	ldw	r2,0(r2)
   12ae8:	10800717 	ldw	r2,28(r2)
   12aec:	10000926 	beq	r2,zero,12b14 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12af0:	e0bffc17 	ldw	r2,-16(fp)
   12af4:	10800017 	ldw	r2,0(r2)
   12af8:	10800717 	ldw	r2,28(r2)
   12afc:	e13ffc17 	ldw	r4,-16(fp)
   12b00:	e17ffe17 	ldw	r5,-8(fp)
   12b04:	e1bfff17 	ldw	r6,-4(fp)
   12b08:	103ee83a 	callr	r2
   12b0c:	e0bffb15 	stw	r2,-20(fp)
   12b10:	00000506 	br	12b28 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   12b14:	00bfde84 	movi	r2,-134
   12b18:	e0bffb15 	stw	r2,-20(fp)
   12b1c:	00000206 	br	12b28 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   12b20:	00bfebc4 	movi	r2,-81
   12b24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   12b28:	e0bffb17 	ldw	r2,-20(fp)
   12b2c:	1000070e 	bge	r2,zero,12b4c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   12b30:	0012a400 	call	12a40 <alt_get_errno>
   12b34:	1007883a 	mov	r3,r2
   12b38:	e0bffb17 	ldw	r2,-20(fp)
   12b3c:	0085c83a 	sub	r2,zero,r2
   12b40:	18800015 	stw	r2,0(r3)
    rc = -1;
   12b44:	00bfffc4 	movi	r2,-1
   12b48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   12b4c:	e0bffb17 	ldw	r2,-20(fp)
}
   12b50:	e037883a 	mov	sp,fp
   12b54:	dfc00117 	ldw	ra,4(sp)
   12b58:	df000017 	ldw	fp,0(sp)
   12b5c:	dec00204 	addi	sp,sp,8
   12b60:	f800283a 	ret

00012b64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12b64:	defff904 	addi	sp,sp,-28
   12b68:	dfc00615 	stw	ra,24(sp)
   12b6c:	df000515 	stw	fp,20(sp)
   12b70:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12b74:	0009883a 	mov	r4,zero
   12b78:	001bb380 	call	1bb38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12b7c:	0013b540 	call	13b54 <OSInit>
   12b80:	01000044 	movi	r4,1
   12b84:	001924c0 	call	1924c <OSSemCreate>
   12b88:	1007883a 	mov	r3,r2
   12b8c:	008000b4 	movhi	r2,2
   12b90:	1090b704 	addi	r2,r2,17116
   12b94:	10c00015 	stw	r3,0(r2)
   12b98:	01000044 	movi	r4,1
   12b9c:	001924c0 	call	1924c <OSSemCreate>
   12ba0:	1007883a 	mov	r3,r2
   12ba4:	008000b4 	movhi	r2,2
   12ba8:	1090b904 	addi	r2,r2,17124
   12bac:	10c00015 	stw	r3,0(r2)
   12bb0:	008000b4 	movhi	r2,2
   12bb4:	1090b204 	addi	r2,r2,17096
   12bb8:	e0bffc15 	stw	r2,-16(fp)
   12bbc:	00800044 	movi	r2,1
   12bc0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   12bc4:	e0bffd0b 	ldhu	r2,-12(fp)
   12bc8:	1009883a 	mov	r4,r2
   12bcc:	001924c0 	call	1924c <OSSemCreate>
   12bd0:	1007883a 	mov	r3,r2
   12bd4:	e0bffc17 	ldw	r2,-16(fp)
   12bd8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12bdc:	001bb6c0 	call	1bb6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   12be0:	010000b4 	movhi	r4,2
   12be4:	21004104 	addi	r4,r4,260
   12be8:	014000b4 	movhi	r5,2
   12bec:	29404104 	addi	r5,r5,260
   12bf0:	018000b4 	movhi	r6,2
   12bf4:	31804104 	addi	r6,r6,260
   12bf8:	001e7b00 	call	1e7b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12bfc:	001e5780 	call	1e578 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   12c00:	010000b4 	movhi	r4,2
   12c04:	21397504 	addi	r4,r4,-6700
   12c08:	001f4740 	call	1f474 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12c0c:	d1282b17 	ldw	r4,-24404(gp)
   12c10:	d0e82c17 	ldw	r3,-24400(gp)
   12c14:	d0a82d17 	ldw	r2,-24396(gp)
   12c18:	180b883a 	mov	r5,r3
   12c1c:	100d883a 	mov	r6,r2
   12c20:	00024700 	call	2470 <main>
   12c24:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   12c28:	01000044 	movi	r4,1
   12c2c:	001266c0 	call	1266c <close>
  exit (result);
   12c30:	e13ffb17 	ldw	r4,-20(fp)
   12c34:	001f4880 	call	1f488 <exit>

00012c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c38:	defffe04 	addi	sp,sp,-8
   12c3c:	dfc00115 	stw	ra,4(sp)
   12c40:	df000015 	stw	fp,0(sp)
   12c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12c48:	008000b4 	movhi	r2,2
   12c4c:	1088a004 	addi	r2,r2,8832
   12c50:	10800017 	ldw	r2,0(r2)
   12c54:	10000526 	beq	r2,zero,12c6c <alt_get_errno+0x34>
   12c58:	008000b4 	movhi	r2,2
   12c5c:	1088a004 	addi	r2,r2,8832
   12c60:	10800017 	ldw	r2,0(r2)
   12c64:	103ee83a 	callr	r2
   12c68:	00000206 	br	12c74 <alt_get_errno+0x3c>
   12c6c:	008000b4 	movhi	r2,2
   12c70:	1090b104 	addi	r2,r2,17092
}
   12c74:	e037883a 	mov	sp,fp
   12c78:	dfc00117 	ldw	ra,4(sp)
   12c7c:	df000017 	ldw	fp,0(sp)
   12c80:	dec00204 	addi	sp,sp,8
   12c84:	f800283a 	ret

00012c88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   12c88:	defff904 	addi	sp,sp,-28
   12c8c:	dfc00615 	stw	ra,24(sp)
   12c90:	df000515 	stw	fp,20(sp)
   12c94:	df000504 	addi	fp,sp,20
   12c98:	e13ffd15 	stw	r4,-12(fp)
   12c9c:	e17ffe15 	stw	r5,-8(fp)
   12ca0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12ca4:	e0bffd17 	ldw	r2,-12(fp)
   12ca8:	10000616 	blt	r2,zero,12cc4 <read+0x3c>
   12cac:	e0bffd17 	ldw	r2,-12(fp)
   12cb0:	10c00324 	muli	r3,r2,12
   12cb4:	008000b4 	movhi	r2,2
   12cb8:	10832c04 	addi	r2,r2,3248
   12cbc:	1885883a 	add	r2,r3,r2
   12cc0:	00000106 	br	12cc8 <read+0x40>
   12cc4:	0005883a 	mov	r2,zero
   12cc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12ccc:	e0bffb17 	ldw	r2,-20(fp)
   12cd0:	10002226 	beq	r2,zero,12d5c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12cd4:	e0bffb17 	ldw	r2,-20(fp)
   12cd8:	10800217 	ldw	r2,8(r2)
   12cdc:	108000cc 	andi	r2,r2,3
   12ce0:	10800060 	cmpeqi	r2,r2,1
   12ce4:	1000181e 	bne	r2,zero,12d48 <read+0xc0>
        (fd->dev->read))
   12ce8:	e0bffb17 	ldw	r2,-20(fp)
   12cec:	10800017 	ldw	r2,0(r2)
   12cf0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   12cf4:	10001426 	beq	r2,zero,12d48 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12cf8:	e0bffb17 	ldw	r2,-20(fp)
   12cfc:	10800017 	ldw	r2,0(r2)
   12d00:	10800517 	ldw	r2,20(r2)
   12d04:	e0ffff17 	ldw	r3,-4(fp)
   12d08:	e13ffb17 	ldw	r4,-20(fp)
   12d0c:	e17ffe17 	ldw	r5,-8(fp)
   12d10:	180d883a 	mov	r6,r3
   12d14:	103ee83a 	callr	r2
   12d18:	e0bffc15 	stw	r2,-16(fp)
   12d1c:	e0bffc17 	ldw	r2,-16(fp)
   12d20:	1000070e 	bge	r2,zero,12d40 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   12d24:	0012c380 	call	12c38 <alt_get_errno>
   12d28:	1007883a 	mov	r3,r2
   12d2c:	e0bffc17 	ldw	r2,-16(fp)
   12d30:	0085c83a 	sub	r2,zero,r2
   12d34:	18800015 	stw	r2,0(r3)
          return -1;
   12d38:	00bfffc4 	movi	r2,-1
   12d3c:	00000c06 	br	12d70 <read+0xe8>
        }
        return rval;
   12d40:	e0bffc17 	ldw	r2,-16(fp)
   12d44:	00000a06 	br	12d70 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12d48:	0012c380 	call	12c38 <alt_get_errno>
   12d4c:	1007883a 	mov	r3,r2
   12d50:	00800344 	movi	r2,13
   12d54:	18800015 	stw	r2,0(r3)
   12d58:	00000406 	br	12d6c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12d5c:	0012c380 	call	12c38 <alt_get_errno>
   12d60:	1007883a 	mov	r3,r2
   12d64:	00801444 	movi	r2,81
   12d68:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12d6c:	00bfffc4 	movi	r2,-1
}
   12d70:	e037883a 	mov	sp,fp
   12d74:	dfc00117 	ldw	ra,4(sp)
   12d78:	df000017 	ldw	fp,0(sp)
   12d7c:	dec00204 	addi	sp,sp,8
   12d80:	f800283a 	ret

00012d84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12d84:	defffe04 	addi	sp,sp,-8
   12d88:	df000115 	stw	fp,4(sp)
   12d8c:	df000104 	addi	fp,sp,4
   12d90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   12d94:	e0bfff17 	ldw	r2,-4(fp)
   12d98:	108000d0 	cmplti	r2,r2,3
   12d9c:	10000d1e 	bne	r2,zero,12dd4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12da0:	008000b4 	movhi	r2,2
   12da4:	10832c04 	addi	r2,r2,3248
   12da8:	e0ffff17 	ldw	r3,-4(fp)
   12dac:	18c00324 	muli	r3,r3,12
   12db0:	18c00204 	addi	r3,r3,8
   12db4:	10c5883a 	add	r2,r2,r3
   12db8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12dbc:	008000b4 	movhi	r2,2
   12dc0:	10832c04 	addi	r2,r2,3248
   12dc4:	e0ffff17 	ldw	r3,-4(fp)
   12dc8:	18c00324 	muli	r3,r3,12
   12dcc:	10c5883a 	add	r2,r2,r3
   12dd0:	10000015 	stw	zero,0(r2)
  }
}
   12dd4:	e037883a 	mov	sp,fp
   12dd8:	df000017 	ldw	fp,0(sp)
   12ddc:	dec00104 	addi	sp,sp,4
   12de0:	f800283a 	ret

00012de4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12de4:	defff904 	addi	sp,sp,-28
   12de8:	df000615 	stw	fp,24(sp)
   12dec:	df000604 	addi	fp,sp,24
   12df0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12df4:	0005303a 	rdctl	r2,status
   12df8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dfc:	e0fffc17 	ldw	r3,-16(fp)
   12e00:	00bfff84 	movi	r2,-2
   12e04:	1884703a 	and	r2,r3,r2
   12e08:	1001703a 	wrctl	status,r2
  
  return context;
   12e0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12e10:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12e14:	d0a01917 	ldw	r2,-32668(gp)
   12e18:	10c000c4 	addi	r3,r2,3
   12e1c:	00bfff04 	movi	r2,-4
   12e20:	1884703a 	and	r2,r3,r2
   12e24:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12e28:	d0e01917 	ldw	r3,-32668(gp)
   12e2c:	e0bfff17 	ldw	r2,-4(fp)
   12e30:	1887883a 	add	r3,r3,r2
   12e34:	00810034 	movhi	r2,1024
   12e38:	10800004 	addi	r2,r2,0
   12e3c:	10c0062e 	bgeu	r2,r3,12e58 <sbrk+0x74>
   12e40:	e0bffa17 	ldw	r2,-24(fp)
   12e44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e48:	e0bffd17 	ldw	r2,-12(fp)
   12e4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12e50:	00bfffc4 	movi	r2,-1
   12e54:	00000b06 	br	12e84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   12e58:	d0a01917 	ldw	r2,-32668(gp)
   12e5c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   12e60:	d0e01917 	ldw	r3,-32668(gp)
   12e64:	e0bfff17 	ldw	r2,-4(fp)
   12e68:	1885883a 	add	r2,r3,r2
   12e6c:	d0a01915 	stw	r2,-32668(gp)
   12e70:	e0bffa17 	ldw	r2,-24(fp)
   12e74:	e0bffe15 	stw	r2,-8(fp)
   12e78:	e0bffe17 	ldw	r2,-8(fp)
   12e7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   12e80:	e0bffb17 	ldw	r2,-20(fp)
} 
   12e84:	e037883a 	mov	sp,fp
   12e88:	df000017 	ldw	fp,0(sp)
   12e8c:	dec00104 	addi	sp,sp,4
   12e90:	f800283a 	ret

00012e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12e94:	defffe04 	addi	sp,sp,-8
   12e98:	dfc00115 	stw	ra,4(sp)
   12e9c:	df000015 	stw	fp,0(sp)
   12ea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12ea4:	008000b4 	movhi	r2,2
   12ea8:	1088a004 	addi	r2,r2,8832
   12eac:	10800017 	ldw	r2,0(r2)
   12eb0:	10000526 	beq	r2,zero,12ec8 <alt_get_errno+0x34>
   12eb4:	008000b4 	movhi	r2,2
   12eb8:	1088a004 	addi	r2,r2,8832
   12ebc:	10800017 	ldw	r2,0(r2)
   12ec0:	103ee83a 	callr	r2
   12ec4:	00000206 	br	12ed0 <alt_get_errno+0x3c>
   12ec8:	008000b4 	movhi	r2,2
   12ecc:	1090b104 	addi	r2,r2,17092
}
   12ed0:	e037883a 	mov	sp,fp
   12ed4:	dfc00117 	ldw	ra,4(sp)
   12ed8:	df000017 	ldw	fp,0(sp)
   12edc:	dec00204 	addi	sp,sp,8
   12ee0:	f800283a 	ret

00012ee4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12ee4:	defff904 	addi	sp,sp,-28
   12ee8:	dfc00615 	stw	ra,24(sp)
   12eec:	df000515 	stw	fp,20(sp)
   12ef0:	df000504 	addi	fp,sp,20
   12ef4:	e13ffd15 	stw	r4,-12(fp)
   12ef8:	e17ffe15 	stw	r5,-8(fp)
   12efc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12f00:	e0bffd17 	ldw	r2,-12(fp)
   12f04:	10000616 	blt	r2,zero,12f20 <write+0x3c>
   12f08:	e0bffd17 	ldw	r2,-12(fp)
   12f0c:	10c00324 	muli	r3,r2,12
   12f10:	008000b4 	movhi	r2,2
   12f14:	10832c04 	addi	r2,r2,3248
   12f18:	1885883a 	add	r2,r3,r2
   12f1c:	00000106 	br	12f24 <write+0x40>
   12f20:	0005883a 	mov	r2,zero
   12f24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   12f28:	e0bffb17 	ldw	r2,-20(fp)
   12f2c:	10002126 	beq	r2,zero,12fb4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12f30:	e0bffb17 	ldw	r2,-20(fp)
   12f34:	10800217 	ldw	r2,8(r2)
   12f38:	108000cc 	andi	r2,r2,3
   12f3c:	10001826 	beq	r2,zero,12fa0 <write+0xbc>
   12f40:	e0bffb17 	ldw	r2,-20(fp)
   12f44:	10800017 	ldw	r2,0(r2)
   12f48:	10800617 	ldw	r2,24(r2)
   12f4c:	10001426 	beq	r2,zero,12fa0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12f50:	e0bffb17 	ldw	r2,-20(fp)
   12f54:	10800017 	ldw	r2,0(r2)
   12f58:	10800617 	ldw	r2,24(r2)
   12f5c:	e0ffff17 	ldw	r3,-4(fp)
   12f60:	e13ffb17 	ldw	r4,-20(fp)
   12f64:	e17ffe17 	ldw	r5,-8(fp)
   12f68:	180d883a 	mov	r6,r3
   12f6c:	103ee83a 	callr	r2
   12f70:	e0bffc15 	stw	r2,-16(fp)
   12f74:	e0bffc17 	ldw	r2,-16(fp)
   12f78:	1000070e 	bge	r2,zero,12f98 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   12f7c:	0012e940 	call	12e94 <alt_get_errno>
   12f80:	1007883a 	mov	r3,r2
   12f84:	e0bffc17 	ldw	r2,-16(fp)
   12f88:	0085c83a 	sub	r2,zero,r2
   12f8c:	18800015 	stw	r2,0(r3)
        return -1;
   12f90:	00bfffc4 	movi	r2,-1
   12f94:	00000c06 	br	12fc8 <write+0xe4>
      }
      return rval;
   12f98:	e0bffc17 	ldw	r2,-16(fp)
   12f9c:	00000a06 	br	12fc8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12fa0:	0012e940 	call	12e94 <alt_get_errno>
   12fa4:	1007883a 	mov	r3,r2
   12fa8:	00800344 	movi	r2,13
   12fac:	18800015 	stw	r2,0(r3)
   12fb0:	00000406 	br	12fc4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12fb4:	0012e940 	call	12e94 <alt_get_errno>
   12fb8:	1007883a 	mov	r3,r2
   12fbc:	00801444 	movi	r2,81
   12fc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12fc4:	00bfffc4 	movi	r2,-1
}
   12fc8:	e037883a 	mov	sp,fp
   12fcc:	dfc00117 	ldw	ra,4(sp)
   12fd0:	df000017 	ldw	fp,0(sp)
   12fd4:	dec00204 	addi	sp,sp,8
   12fd8:	f800283a 	ret

00012fdc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   12fdc:	deffdf04 	addi	sp,sp,-132
   12fe0:	dfc02015 	stw	ra,128(sp)
   12fe4:	df001f15 	stw	fp,124(sp)
   12fe8:	df001f04 	addi	fp,sp,124
   12fec:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   12ff0:	e0bfe204 	addi	r2,fp,-120
   12ff4:	01003fc4 	movi	r4,255
   12ff8:	100b883a 	mov	r5,r2
   12ffc:	001b4000 	call	1b400 <OSTaskQuery>
   13000:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13004:	e0bffe83 	ldbu	r2,-6(fp)
   13008:	10803fcc 	andi	r2,r2,255
   1300c:	10000126 	beq	r2,zero,13014 <__env_lock+0x38>
    return;
   13010:	00001d06 	br	13088 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   13014:	e0bfee83 	ldbu	r2,-70(fp)
   13018:	10803fcc 	andi	r2,r2,255
   1301c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   13020:	d0e82f17 	ldw	r3,-24388(gp)
   13024:	e0bffd04 	addi	r2,fp,-12
   13028:	1809883a 	mov	r4,r3
   1302c:	100b883a 	mov	r5,r2
   13030:	0019a980 	call	19a98 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   13034:	e0bffe43 	ldbu	r2,-7(fp)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	10000726 	beq	r2,zero,1305c <__env_lock+0x80>
   13040:	d0a01a17 	ldw	r2,-32664(gp)
   13044:	e0ffe117 	ldw	r3,-124(fp)
   13048:	1880041e 	bne	r3,r2,1305c <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   1304c:	d0a82e17 	ldw	r2,-24392(gp)
   13050:	10800044 	addi	r2,r2,1
   13054:	d0a82e15 	stw	r2,-24392(gp)
   13058:	00000a06 	br	13084 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   1305c:	d0e82f17 	ldw	r3,-24388(gp)
   13060:	e0bffe84 	addi	r2,fp,-6
   13064:	1809883a 	mov	r4,r3
   13068:	000b883a 	mov	r5,zero
   1306c:	100d883a 	mov	r6,r2
   13070:	00195b40 	call	195b4 <OSSemPend>
    locks  = 1;
   13074:	00800044 	movi	r2,1
   13078:	d0a82e15 	stw	r2,-24392(gp)
    lockid = id;
   1307c:	e0bfe117 	ldw	r2,-124(fp)
   13080:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13084:	0001883a 	nop
}
   13088:	e037883a 	mov	sp,fp
   1308c:	dfc00117 	ldw	ra,4(sp)
   13090:	df000017 	ldw	fp,0(sp)
   13094:	dec00204 	addi	sp,sp,8
   13098:	f800283a 	ret

0001309c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1309c:	defffd04 	addi	sp,sp,-12
   130a0:	dfc00215 	stw	ra,8(sp)
   130a4:	df000115 	stw	fp,4(sp)
   130a8:	df000104 	addi	fp,sp,4
   130ac:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   130b0:	d0a82e17 	ldw	r2,-24392(gp)
   130b4:	1000011e 	bne	r2,zero,130bc <__env_unlock+0x20>
    return;
   130b8:	00000a06 	br	130e4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   130bc:	d0a82e17 	ldw	r2,-24392(gp)
   130c0:	10bfffc4 	addi	r2,r2,-1
   130c4:	d0a82e15 	stw	r2,-24392(gp)
   130c8:	d0a82e17 	ldw	r2,-24392(gp)
   130cc:	1000051e 	bne	r2,zero,130e4 <__env_unlock+0x48>
  {
    lockid = -1;
   130d0:	00bfffc4 	movi	r2,-1
   130d4:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
   130d8:	d0a82f17 	ldw	r2,-24388(gp)
   130dc:	1009883a 	mov	r4,r2
   130e0:	00199880 	call	19988 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   130e4:	e037883a 	mov	sp,fp
   130e8:	dfc00117 	ldw	ra,4(sp)
   130ec:	df000017 	ldw	fp,0(sp)
   130f0:	dec00204 	addi	sp,sp,8
   130f4:	f800283a 	ret

000130f8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   130f8:	deffdb04 	addi	sp,sp,-148
   130fc:	dfc02415 	stw	ra,144(sp)
   13100:	df002315 	stw	fp,140(sp)
   13104:	df002304 	addi	fp,sp,140
   13108:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1310c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   13110:	008000b4 	movhi	r2,2
   13114:	1090ba44 	addi	r2,r2,17129
   13118:	10800003 	ldbu	r2,0(r2)
   1311c:	10803fcc 	andi	r2,r2,255
   13120:	10800060 	cmpeqi	r2,r2,1
   13124:	1000011e 	bne	r2,zero,1312c <__malloc_lock+0x34>
      return;
   13128:	00003606 	br	13204 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1312c:	e0bfe204 	addi	r2,fp,-120
   13130:	01003fc4 	movi	r4,255
   13134:	100b883a 	mov	r5,r2
   13138:	001b4000 	call	1b400 <OSTaskQuery>
   1313c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13140:	e0bffe83 	ldbu	r2,-6(fp)
   13144:	10803fcc 	andi	r2,r2,255
   13148:	10000126 	beq	r2,zero,13150 <__malloc_lock+0x58>
    return;
   1314c:	00002d06 	br	13204 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   13150:	e0bfee83 	ldbu	r2,-70(fp)
   13154:	10803fcc 	andi	r2,r2,255
   13158:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   1315c:	d0e83117 	ldw	r3,-24380(gp)
   13160:	e0bffd04 	addi	r2,fp,-12
   13164:	1809883a 	mov	r4,r3
   13168:	100b883a 	mov	r5,r2
   1316c:	0019a980 	call	19a98 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13170:	0005303a 	rdctl	r2,status
   13174:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13178:	e0ffdf17 	ldw	r3,-132(fp)
   1317c:	00bfff84 	movi	r2,-2
   13180:	1884703a 	and	r2,r3,r2
   13184:	1001703a 	wrctl	status,r2
  
  return context;
   13188:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   1318c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   13190:	e0bffd0b 	ldhu	r2,-12(fp)
   13194:	10bfffcc 	andi	r2,r2,65535
   13198:	10000b1e 	bne	r2,zero,131c8 <__malloc_lock+0xd0>
   1319c:	d0a01b17 	ldw	r2,-32660(gp)
   131a0:	e0ffde17 	ldw	r3,-136(fp)
   131a4:	1880081e 	bne	r3,r2,131c8 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   131a8:	d0a83017 	ldw	r2,-24384(gp)
   131ac:	10800044 	addi	r2,r2,1
   131b0:	d0a83015 	stw	r2,-24384(gp)
   131b4:	e0bfdd17 	ldw	r2,-140(fp)
   131b8:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131bc:	e0bfe017 	ldw	r2,-128(fp)
   131c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   131c4:	00000e06 	br	13200 <__malloc_lock+0x108>
   131c8:	e0bfdd17 	ldw	r2,-140(fp)
   131cc:	e0bfe115 	stw	r2,-124(fp)
   131d0:	e0bfe117 	ldw	r2,-124(fp)
   131d4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   131d8:	d0e83117 	ldw	r3,-24380(gp)
   131dc:	e0bffe84 	addi	r2,fp,-6
   131e0:	1809883a 	mov	r4,r3
   131e4:	000b883a 	mov	r5,zero
   131e8:	100d883a 	mov	r6,r2
   131ec:	00195b40 	call	195b4 <OSSemPend>
    locks  = 1;
   131f0:	00800044 	movi	r2,1
   131f4:	d0a83015 	stw	r2,-24384(gp)
    lockid = id;
   131f8:	e0bfde17 	ldw	r2,-136(fp)
   131fc:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13200:	0001883a 	nop
}
   13204:	e037883a 	mov	sp,fp
   13208:	dfc00117 	ldw	ra,4(sp)
   1320c:	df000017 	ldw	fp,0(sp)
   13210:	dec00204 	addi	sp,sp,8
   13214:	f800283a 	ret

00013218 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13218:	defff804 	addi	sp,sp,-32
   1321c:	dfc00715 	stw	ra,28(sp)
   13220:	df000615 	stw	fp,24(sp)
   13224:	df000604 	addi	fp,sp,24
   13228:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1322c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13230:	008000b4 	movhi	r2,2
   13234:	1090ba44 	addi	r2,r2,17129
   13238:	10800003 	ldbu	r2,0(r2)
   1323c:	10803fcc 	andi	r2,r2,255
   13240:	10800060 	cmpeqi	r2,r2,1
   13244:	1000011e 	bne	r2,zero,1324c <__malloc_unlock+0x34>
      return;
   13248:	00002206 	br	132d4 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1324c:	0005303a 	rdctl	r2,status
   13250:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13254:	e0fffb17 	ldw	r3,-20(fp)
   13258:	00bfff84 	movi	r2,-2
   1325c:	1884703a 	and	r2,r3,r2
   13260:	1001703a 	wrctl	status,r2
  
  return context;
   13264:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   13268:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   1326c:	d0a83017 	ldw	r2,-24384(gp)
   13270:	1000051e 	bne	r2,zero,13288 <__malloc_unlock+0x70>
   13274:	e0bffa17 	ldw	r2,-24(fp)
   13278:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1327c:	e0bffc17 	ldw	r2,-16(fp)
   13280:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13284:	00001306 	br	132d4 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13288:	d0a83017 	ldw	r2,-24384(gp)
   1328c:	10bfffc4 	addi	r2,r2,-1
   13290:	d0a83015 	stw	r2,-24384(gp)
   13294:	d0a83017 	ldw	r2,-24384(gp)
   13298:	10000a1e 	bne	r2,zero,132c4 <__malloc_unlock+0xac>
  {
    lockid = -1;
   1329c:	00bfffc4 	movi	r2,-1
   132a0:	d0a01b15 	stw	r2,-32660(gp)
   132a4:	e0bffa17 	ldw	r2,-24(fp)
   132a8:	e0bffd15 	stw	r2,-12(fp)
   132ac:	e0bffd17 	ldw	r2,-12(fp)
   132b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   132b4:	d0a83117 	ldw	r2,-24380(gp)
   132b8:	1009883a 	mov	r4,r2
   132bc:	00199880 	call	19988 <OSSemPost>
   132c0:	00000406 	br	132d4 <__malloc_unlock+0xbc>
   132c4:	e0bffa17 	ldw	r2,-24(fp)
   132c8:	e0bffe15 	stw	r2,-8(fp)
   132cc:	e0bffe17 	ldw	r2,-8(fp)
   132d0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   132d4:	e037883a 	mov	sp,fp
   132d8:	dfc00117 	ldw	ra,4(sp)
   132dc:	df000017 	ldw	fp,0(sp)
   132e0:	dec00204 	addi	sp,sp,8
   132e4:	f800283a 	ret

000132e8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   132e8:	defff704 	addi	sp,sp,-36
   132ec:	dfc00815 	stw	ra,32(sp)
   132f0:	df000715 	stw	fp,28(sp)
   132f4:	df000704 	addi	fp,sp,28
   132f8:	e13ffd15 	stw	r4,-12(fp)
   132fc:	e17ffe15 	stw	r5,-8(fp)
   13300:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13304:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13308:	e0bfff17 	ldw	r2,-4(fp)
   1330c:	1000021e 	bne	r2,zero,13318 <OSEventNameGet+0x30>
        return (0);
   13310:	0005883a 	mov	r2,zero
   13314:	00003706 	br	133f4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	1000051e 	bne	r2,zero,13334 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	00c00104 	movi	r3,4
   13328:	10c00005 	stb	r3,0(r2)
        return (0);
   1332c:	0005883a 	mov	r2,zero
   13330:	00003006 	br	133f4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13334:	e0bffe17 	ldw	r2,-8(fp)
   13338:	1000051e 	bne	r2,zero,13350 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1333c:	e0bfff17 	ldw	r2,-4(fp)
   13340:	00c00304 	movi	r3,12
   13344:	10c00005 	stb	r3,0(r2)
        return (0);
   13348:	0005883a 	mov	r2,zero
   1334c:	00002906 	br	133f4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13350:	d0a84003 	ldbu	r2,-24320(gp)
   13354:	10803fcc 	andi	r2,r2,255
   13358:	10000526 	beq	r2,zero,13370 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   1335c:	e0bfff17 	ldw	r2,-4(fp)
   13360:	00c00444 	movi	r3,17
   13364:	10c00005 	stb	r3,0(r2)
        return (0);
   13368:	0005883a 	mov	r2,zero
   1336c:	00002106 	br	133f4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13370:	e0bffd17 	ldw	r2,-12(fp)
   13374:	10800003 	ldbu	r2,0(r2)
   13378:	10803fcc 	andi	r2,r2,255
   1337c:	10bfffc4 	addi	r2,r2,-1
   13380:	10800128 	cmpgeui	r2,r2,4
   13384:	10000526 	beq	r2,zero,1339c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13388:	e0bfff17 	ldw	r2,-4(fp)
   1338c:	00c00044 	movi	r3,1
   13390:	10c00005 	stb	r3,0(r2)
             return (0);
   13394:	0005883a 	mov	r2,zero
   13398:	00001606 	br	133f4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1339c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133a0:	0005303a 	rdctl	r2,status
   133a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133a8:	e0fffb17 	ldw	r3,-20(fp)
   133ac:	00bfff84 	movi	r2,-2
   133b0:	1884703a 	and	r2,r3,r2
   133b4:	1001703a 	wrctl	status,r2
  
  return context;
   133b8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   133bc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	10800384 	addi	r2,r2,14
   133c8:	e13ffe17 	ldw	r4,-8(fp)
   133cc:	100b883a 	mov	r5,r2
   133d0:	0014d3c0 	call	14d3c <OS_StrCopy>
   133d4:	e0bffa05 	stb	r2,-24(fp)
   133d8:	e0bff917 	ldw	r2,-28(fp)
   133dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133e0:	e0bffc17 	ldw	r2,-16(fp)
   133e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   133e8:	e0bfff17 	ldw	r2,-4(fp)
   133ec:	10000005 	stb	zero,0(r2)
    return (len);
   133f0:	e0bffa03 	ldbu	r2,-24(fp)
}
   133f4:	e037883a 	mov	sp,fp
   133f8:	dfc00117 	ldw	ra,4(sp)
   133fc:	df000017 	ldw	fp,0(sp)
   13400:	dec00204 	addi	sp,sp,8
   13404:	f800283a 	ret

00013408 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13408:	defff604 	addi	sp,sp,-40
   1340c:	dfc00915 	stw	ra,36(sp)
   13410:	df000815 	stw	fp,32(sp)
   13414:	df000804 	addi	fp,sp,32
   13418:	e13ffd15 	stw	r4,-12(fp)
   1341c:	e17ffe15 	stw	r5,-8(fp)
   13420:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13424:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13428:	e0bfff17 	ldw	r2,-4(fp)
   1342c:	1000011e 	bne	r2,zero,13434 <OSEventNameSet+0x2c>
        return;
   13430:	00003f06 	br	13530 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	1000041e 	bne	r2,zero,1344c <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	00c00104 	movi	r3,4
   13444:	10c00005 	stb	r3,0(r2)
        return;
   13448:	00003906 	br	13530 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1344c:	e0bffe17 	ldw	r2,-8(fp)
   13450:	1000041e 	bne	r2,zero,13464 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13454:	e0bfff17 	ldw	r2,-4(fp)
   13458:	00c00304 	movi	r3,12
   1345c:	10c00005 	stb	r3,0(r2)
        return;
   13460:	00003306 	br	13530 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13464:	d0a84003 	ldbu	r2,-24320(gp)
   13468:	10803fcc 	andi	r2,r2,255
   1346c:	10000426 	beq	r2,zero,13480 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   13470:	e0bfff17 	ldw	r2,-4(fp)
   13474:	00c00484 	movi	r3,18
   13478:	10c00005 	stb	r3,0(r2)
        return;
   1347c:	00002c06 	br	13530 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   13480:	e0bffd17 	ldw	r2,-12(fp)
   13484:	10800003 	ldbu	r2,0(r2)
   13488:	10803fcc 	andi	r2,r2,255
   1348c:	10bfffc4 	addi	r2,r2,-1
   13490:	10800128 	cmpgeui	r2,r2,4
   13494:	10000426 	beq	r2,zero,134a8 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13498:	e0bfff17 	ldw	r2,-4(fp)
   1349c:	00c00044 	movi	r3,1
   134a0:	10c00005 	stb	r3,0(r2)
             return;
   134a4:	00002206 	br	13530 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   134a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134ac:	0005303a 	rdctl	r2,status
   134b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b4:	e0fffa17 	ldw	r3,-24(fp)
   134b8:	00bfff84 	movi	r2,-2
   134bc:	1884703a 	and	r2,r3,r2
   134c0:	1001703a 	wrctl	status,r2
  
  return context;
   134c4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   134c8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   134cc:	e13ffe17 	ldw	r4,-8(fp)
   134d0:	0014db00 	call	14db0 <OS_StrLen>
   134d4:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   134d8:	e0bff903 	ldbu	r2,-28(fp)
   134dc:	10800830 	cmpltui	r2,r2,32
   134e0:	1000081e 	bne	r2,zero,13504 <OSEventNameSet+0xfc>
   134e4:	e0bff817 	ldw	r2,-32(fp)
   134e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134ec:	e0bffb17 	ldw	r2,-20(fp)
   134f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   134f4:	e0bfff17 	ldw	r2,-4(fp)
   134f8:	00c002c4 	movi	r3,11
   134fc:	10c00005 	stb	r3,0(r2)
        return;
   13500:	00000b06 	br	13530 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13504:	e0bffd17 	ldw	r2,-12(fp)
   13508:	10800384 	addi	r2,r2,14
   1350c:	1009883a 	mov	r4,r2
   13510:	e17ffe17 	ldw	r5,-8(fp)
   13514:	0014d3c0 	call	14d3c <OS_StrCopy>
   13518:	e0bff817 	ldw	r2,-32(fp)
   1351c:	e0bffc15 	stw	r2,-16(fp)
   13520:	e0bffc17 	ldw	r2,-16(fp)
   13524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	10000005 	stb	zero,0(r2)
}
   13530:	e037883a 	mov	sp,fp
   13534:	dfc00117 	ldw	ra,4(sp)
   13538:	df000017 	ldw	fp,0(sp)
   1353c:	dec00204 	addi	sp,sp,8
   13540:	f800283a 	ret

00013544 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   13544:	deffed04 	addi	sp,sp,-76
   13548:	dfc01215 	stw	ra,72(sp)
   1354c:	df001115 	stw	fp,68(sp)
   13550:	df001104 	addi	fp,sp,68
   13554:	e13ffc15 	stw	r4,-16(fp)
   13558:	e17ffd15 	stw	r5,-12(fp)
   1355c:	e1bffe15 	stw	r6,-8(fp)
   13560:	3805883a 	mov	r2,r7
   13564:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13568:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   1356c:	e0800217 	ldw	r2,8(fp)
   13570:	1000021e 	bne	r2,zero,1357c <OSEventPendMulti+0x38>
        return (0);
   13574:	0005883a 	mov	r2,zero
   13578:	00017106 	br	13b40 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1357c:	e0bffc17 	ldw	r2,-16(fp)
   13580:	1000051e 	bne	r2,zero,13598 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   13584:	e0800217 	ldw	r2,8(fp)
   13588:	00c00104 	movi	r3,4
   1358c:	10c00005 	stb	r3,0(r2)
        return (0);
   13590:	0005883a 	mov	r2,zero
   13594:	00016a06 	br	13b40 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13598:	e0bffd17 	ldw	r2,-12(fp)
   1359c:	1000051e 	bne	r2,zero,135b4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   135a0:	e0800217 	ldw	r2,8(fp)
   135a4:	00c00104 	movi	r3,4
   135a8:	10c00005 	stb	r3,0(r2)
        return (0);
   135ac:	0005883a 	mov	r2,zero
   135b0:	00016306 	br	13b40 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   135b4:	e0bffe17 	ldw	r2,-8(fp)
   135b8:	1000051e 	bne	r2,zero,135d0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   135bc:	e0800217 	ldw	r2,8(fp)
   135c0:	00c00104 	movi	r3,4
   135c4:	10c00005 	stb	r3,0(r2)
        return (0);
   135c8:	0005883a 	mov	r2,zero
   135cc:	00015c06 	br	13b40 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   135d0:	e0bffd17 	ldw	r2,-12(fp)
   135d4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   135d8:	e0bffc17 	ldw	r2,-16(fp)
   135dc:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   135e0:	e0bfef17 	ldw	r2,-68(fp)
   135e4:	10800017 	ldw	r2,0(r2)
   135e8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   135ec:	00001906 	br	13654 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   135f0:	e0bff017 	ldw	r2,-64(fp)
   135f4:	10800003 	ldbu	r2,0(r2)
   135f8:	10803fcc 	andi	r2,r2,255
   135fc:	10c000a0 	cmpeqi	r3,r2,2
   13600:	1800091e 	bne	r3,zero,13628 <OSEventPendMulti+0xe4>
   13604:	10c000e0 	cmpeqi	r3,r2,3
   13608:	1800091e 	bne	r3,zero,13630 <OSEventPendMulti+0xec>
   1360c:	10800060 	cmpeqi	r2,r2,1
   13610:	1000091e 	bne	r2,zero,13638 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   13614:	e0800217 	ldw	r2,8(fp)
   13618:	00c00044 	movi	r3,1
   1361c:	10c00005 	stb	r3,0(r2)
                 return (0);
   13620:	0005883a 	mov	r2,zero
   13624:	00014606 	br	13b40 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13628:	0001883a 	nop
   1362c:	00000306 	br	1363c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13630:	0001883a 	nop
   13634:	00000106 	br	1363c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13638:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   1363c:	e0bfef17 	ldw	r2,-68(fp)
   13640:	10800104 	addi	r2,r2,4
   13644:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13648:	e0bfef17 	ldw	r2,-68(fp)
   1364c:	10800017 	ldw	r2,0(r2)
   13650:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   13654:	e0bff017 	ldw	r2,-64(fp)
   13658:	103fe51e 	bne	r2,zero,135f0 <__alt_mem_Flash_flash_data+0xf40135f0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   1365c:	d0a84003 	ldbu	r2,-24320(gp)
   13660:	10803fcc 	andi	r2,r2,255
   13664:	10000526 	beq	r2,zero,1367c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13668:	e0800217 	ldw	r2,8(fp)
   1366c:	00c00084 	movi	r3,2
   13670:	10c00005 	stb	r3,0(r2)
        return (0);
   13674:	0005883a 	mov	r2,zero
   13678:	00013106 	br	13b40 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1367c:	d0a83203 	ldbu	r2,-24376(gp)
   13680:	10803fcc 	andi	r2,r2,255
   13684:	10000526 	beq	r2,zero,1369c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13688:	e0800217 	ldw	r2,8(fp)
   1368c:	00c00344 	movi	r3,13
   13690:	10c00005 	stb	r3,0(r2)
        return (0);
   13694:	0005883a 	mov	r2,zero
   13698:	00012906 	br	13b40 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1369c:	0005303a 	rdctl	r2,status
   136a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136a4:	e0fff517 	ldw	r3,-44(fp)
   136a8:	00bfff84 	movi	r2,-2
   136ac:	1884703a 	and	r2,r3,r2
   136b0:	1001703a 	wrctl	status,r2
  
  return context;
   136b4:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   136b8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   136bc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   136c0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   136c4:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   136c8:	e0bffc17 	ldw	r2,-16(fp)
   136cc:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   136d0:	e0bfef17 	ldw	r2,-68(fp)
   136d4:	10800017 	ldw	r2,0(r2)
   136d8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   136dc:	00008106 	br	138e4 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   136e0:	e0bff017 	ldw	r2,-64(fp)
   136e4:	10800003 	ldbu	r2,0(r2)
   136e8:	10803fcc 	andi	r2,r2,255
   136ec:	10c000a0 	cmpeqi	r3,r2,2
   136f0:	18003c1e 	bne	r3,zero,137e4 <OSEventPendMulti+0x2a0>
   136f4:	10c000e0 	cmpeqi	r3,r2,3
   136f8:	1800031e 	bne	r3,zero,13708 <OSEventPendMulti+0x1c4>
   136fc:	10800060 	cmpeqi	r2,r2,1
   13700:	10001e1e 	bne	r2,zero,1377c <OSEventPendMulti+0x238>
   13704:	00006606 	br	138a0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13708:	e0bff017 	ldw	r2,-64(fp)
   1370c:	1080020b 	ldhu	r2,8(r2)
   13710:	10bfffcc 	andi	r2,r2,65535
   13714:	10001526 	beq	r2,zero,1376c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13718:	e0bff017 	ldw	r2,-64(fp)
   1371c:	1080020b 	ldhu	r2,8(r2)
   13720:	10bfffc4 	addi	r2,r2,-1
   13724:	1007883a 	mov	r3,r2
   13728:	e0bff017 	ldw	r2,-64(fp)
   1372c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13730:	e0bffd17 	ldw	r2,-12(fp)
   13734:	10c00104 	addi	r3,r2,4
   13738:	e0fffd15 	stw	r3,-12(fp)
   1373c:	e0fff017 	ldw	r3,-64(fp)
   13740:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   13744:	00800044 	movi	r2,1
   13748:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	10c00104 	addi	r3,r2,4
   13754:	e0fffe15 	stw	r3,-8(fp)
   13758:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   1375c:	e0bff18b 	ldhu	r2,-58(fp)
   13760:	10800044 	addi	r2,r2,1
   13764:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13768:	00005806 	br	138cc <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   1376c:	e0bff203 	ldbu	r2,-56(fp)
   13770:	10800054 	ori	r2,r2,1
   13774:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13778:	00005406 	br	138cc <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1377c:	e0bff017 	ldw	r2,-64(fp)
   13780:	10800117 	ldw	r2,4(r2)
   13784:	10001326 	beq	r2,zero,137d4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13788:	e0bffe17 	ldw	r2,-8(fp)
   1378c:	10c00104 	addi	r3,r2,4
   13790:	e0fffe15 	stw	r3,-8(fp)
   13794:	e0fff017 	ldw	r3,-64(fp)
   13798:	18c00117 	ldw	r3,4(r3)
   1379c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   137a0:	e0bff017 	ldw	r2,-64(fp)
   137a4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   137a8:	e0bffd17 	ldw	r2,-12(fp)
   137ac:	10c00104 	addi	r3,r2,4
   137b0:	e0fffd15 	stw	r3,-12(fp)
   137b4:	e0fff017 	ldw	r3,-64(fp)
   137b8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   137bc:	00800044 	movi	r2,1
   137c0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   137c4:	e0bff18b 	ldhu	r2,-58(fp)
   137c8:	10800044 	addi	r2,r2,1
   137cc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   137d0:	00003e06 	br	138cc <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   137d4:	e0bff203 	ldbu	r2,-56(fp)
   137d8:	10800094 	ori	r2,r2,2
   137dc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   137e0:	00003a06 	br	138cc <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   137e4:	e0bff017 	ldw	r2,-64(fp)
   137e8:	10800117 	ldw	r2,4(r2)
   137ec:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   137f0:	e0bff417 	ldw	r2,-48(fp)
   137f4:	1080058b 	ldhu	r2,22(r2)
   137f8:	10bfffcc 	andi	r2,r2,65535
   137fc:	10002426 	beq	r2,zero,13890 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   13800:	e0bffe17 	ldw	r2,-8(fp)
   13804:	10c00104 	addi	r3,r2,4
   13808:	e0fffe15 	stw	r3,-8(fp)
   1380c:	e0fff417 	ldw	r3,-48(fp)
   13810:	18c00417 	ldw	r3,16(r3)
   13814:	19400104 	addi	r5,r3,4
   13818:	e13ff417 	ldw	r4,-48(fp)
   1381c:	21400415 	stw	r5,16(r4)
   13820:	18c00017 	ldw	r3,0(r3)
   13824:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   13828:	e0bff417 	ldw	r2,-48(fp)
   1382c:	10c00417 	ldw	r3,16(r2)
   13830:	e0bff417 	ldw	r2,-48(fp)
   13834:	10800217 	ldw	r2,8(r2)
   13838:	1880041e 	bne	r3,r2,1384c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   1383c:	e0bff417 	ldw	r2,-48(fp)
   13840:	10c00117 	ldw	r3,4(r2)
   13844:	e0bff417 	ldw	r2,-48(fp)
   13848:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   1384c:	e0bff417 	ldw	r2,-48(fp)
   13850:	1080058b 	ldhu	r2,22(r2)
   13854:	10bfffc4 	addi	r2,r2,-1
   13858:	1007883a 	mov	r3,r2
   1385c:	e0bff417 	ldw	r2,-48(fp)
   13860:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   13864:	e0bffd17 	ldw	r2,-12(fp)
   13868:	10c00104 	addi	r3,r2,4
   1386c:	e0fffd15 	stw	r3,-12(fp)
   13870:	e0fff017 	ldw	r3,-64(fp)
   13874:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   13878:	00800044 	movi	r2,1
   1387c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13880:	e0bff18b 	ldhu	r2,-58(fp)
   13884:	10800044 	addi	r2,r2,1
   13888:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1388c:	00000f06 	br	138cc <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   13890:	e0bff203 	ldbu	r2,-56(fp)
   13894:	10800114 	ori	r2,r2,4
   13898:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1389c:	00000b06 	br	138cc <OSEventPendMulti+0x388>
   138a0:	e0bff317 	ldw	r2,-52(fp)
   138a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138a8:	e0bff617 	ldw	r2,-40(fp)
   138ac:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   138b0:	e0bffd17 	ldw	r2,-12(fp)
   138b4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   138b8:	e0800217 	ldw	r2,8(fp)
   138bc:	00c00044 	movi	r3,1
   138c0:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   138c4:	e0bff18b 	ldhu	r2,-58(fp)
   138c8:	00009d06 	br	13b40 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   138cc:	e0bfef17 	ldw	r2,-68(fp)
   138d0:	10800104 	addi	r2,r2,4
   138d4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   138d8:	e0bfef17 	ldw	r2,-68(fp)
   138dc:	10800017 	ldw	r2,0(r2)
   138e0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   138e4:	e0bff017 	ldw	r2,-64(fp)
   138e8:	103f7d1e 	bne	r2,zero,136e0 <__alt_mem_Flash_flash_data+0xf40136e0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   138ec:	e0bff103 	ldbu	r2,-60(fp)
   138f0:	10800058 	cmpnei	r2,r2,1
   138f4:	10000a1e 	bne	r2,zero,13920 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   138f8:	e0bffd17 	ldw	r2,-12(fp)
   138fc:	10000015 	stw	zero,0(r2)
   13900:	e0bff317 	ldw	r2,-52(fp)
   13904:	e0bff715 	stw	r2,-36(fp)
   13908:	e0bff717 	ldw	r2,-36(fp)
   1390c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   13910:	e0800217 	ldw	r2,8(fp)
   13914:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   13918:	e0bff18b 	ldhu	r2,-58(fp)
   1391c:	00008806 	br	13b40 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   13920:	d0a84117 	ldw	r2,-24316(gp)
   13924:	d0e84117 	ldw	r3,-24316(gp)
   13928:	19000c03 	ldbu	r4,48(r3)
   1392c:	e0fff203 	ldbu	r3,-56(fp)
   13930:	20c6b03a 	or	r3,r4,r3
   13934:	1809883a 	mov	r4,r3
   13938:	00ffe004 	movi	r3,-128
   1393c:	20c6b03a 	or	r3,r4,r3
   13940:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13944:	d0a84117 	ldw	r2,-24316(gp)
   13948:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   1394c:	d0a84117 	ldw	r2,-24316(gp)
   13950:	e0ffff0b 	ldhu	r3,-4(fp)
   13954:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   13958:	e13ffc17 	ldw	r4,-16(fp)
   1395c:	001448c0 	call	1448c <OS_EventTaskWaitMulti>
   13960:	e0bff317 	ldw	r2,-52(fp)
   13964:	e0bff815 	stw	r2,-32(fp)
   13968:	e0bff817 	ldw	r2,-32(fp)
   1396c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   13970:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13974:	0005303a 	rdctl	r2,status
   13978:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1397c:	e0fff917 	ldw	r3,-28(fp)
   13980:	00bfff84 	movi	r2,-2
   13984:	1884703a 	and	r2,r3,r2
   13988:	1001703a 	wrctl	status,r2
  
  return context;
   1398c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13990:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   13994:	d0a84117 	ldw	r2,-24316(gp)
   13998:	10800c43 	ldbu	r2,49(r2)
   1399c:	10803fcc 	andi	r2,r2,255
   139a0:	10000226 	beq	r2,zero,139ac <OSEventPendMulti+0x468>
   139a4:	108000a0 	cmpeqi	r2,r2,2
   139a8:	10001826 	beq	r2,zero,13a0c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   139ac:	d0a84117 	ldw	r2,-24316(gp)
   139b0:	10800717 	ldw	r2,28(r2)
   139b4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   139b8:	e0bff017 	ldw	r2,-64(fp)
   139bc:	10000b26 	beq	r2,zero,139ec <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   139c0:	e0bffd17 	ldw	r2,-12(fp)
   139c4:	10c00104 	addi	r3,r2,4
   139c8:	e0fffd15 	stw	r3,-12(fp)
   139cc:	e0fff017 	ldw	r3,-64(fp)
   139d0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   139d4:	e0bffd17 	ldw	r2,-12(fp)
   139d8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   139dc:	e0bff18b 	ldhu	r2,-58(fp)
   139e0:	10800044 	addi	r2,r2,1
   139e4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   139e8:	00000d06 	br	13a20 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   139ec:	d0a84117 	ldw	r2,-24316(gp)
   139f0:	00c00044 	movi	r3,1
   139f4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   139f8:	d0a84117 	ldw	r2,-24316(gp)
   139fc:	1009883a 	mov	r4,r2
   13a00:	e17ffc17 	ldw	r5,-16(fp)
   13a04:	001468c0 	call	1468c <OS_EventTaskRemoveMulti>
             }
			 break;
   13a08:	00000506 	br	13a20 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   13a0c:	d0a84117 	ldw	r2,-24316(gp)
   13a10:	1009883a 	mov	r4,r2
   13a14:	e17ffc17 	ldw	r5,-16(fp)
   13a18:	001468c0 	call	1468c <OS_EventTaskRemoveMulti>
             break;
   13a1c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   13a20:	d0a84117 	ldw	r2,-24316(gp)
   13a24:	10800c43 	ldbu	r2,49(r2)
   13a28:	10803fcc 	andi	r2,r2,255
   13a2c:	10000326 	beq	r2,zero,13a3c <OSEventPendMulti+0x4f8>
   13a30:	108000a0 	cmpeqi	r2,r2,2
   13a34:	1000231e 	bne	r2,zero,13ac4 <OSEventPendMulti+0x580>
   13a38:	00002a06 	br	13ae4 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   13a3c:	e0bff017 	ldw	r2,-64(fp)
   13a40:	10800003 	ldbu	r2,0(r2)
   13a44:	10803fcc 	andi	r2,r2,255
   13a48:	0080100e 	bge	zero,r2,13a8c <OSEventPendMulti+0x548>
   13a4c:	10c000d0 	cmplti	r3,r2,3
   13a50:	1800071e 	bne	r3,zero,13a70 <OSEventPendMulti+0x52c>
   13a54:	108000e0 	cmpeqi	r2,r2,3
   13a58:	10000c26 	beq	r2,zero,13a8c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	10c00104 	addi	r3,r2,4
   13a64:	e0fffe15 	stw	r3,-8(fp)
   13a68:	10000015 	stw	zero,0(r2)
                      break;
   13a6c:	00001206 	br	13ab8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   13a70:	e0bffe17 	ldw	r2,-8(fp)
   13a74:	10c00104 	addi	r3,r2,4
   13a78:	e0fffe15 	stw	r3,-8(fp)
   13a7c:	d0e84117 	ldw	r3,-24316(gp)
   13a80:	18c00917 	ldw	r3,36(r3)
   13a84:	10c00015 	stw	r3,0(r2)
                      break;
   13a88:	00000b06 	br	13ab8 <OSEventPendMulti+0x574>
   13a8c:	e0bff317 	ldw	r2,-52(fp)
   13a90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a94:	e0bffa17 	ldw	r2,-24(fp)
   13a98:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   13a9c:	e0bffd17 	ldw	r2,-12(fp)
   13aa0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   13aa4:	e0800217 	ldw	r2,8(fp)
   13aa8:	00c00044 	movi	r3,1
   13aac:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   13ab0:	e0bff18b 	ldhu	r2,-58(fp)
   13ab4:	00002206 	br	13b40 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   13ab8:	e0800217 	ldw	r2,8(fp)
   13abc:	10000005 	stb	zero,0(r2)
             break;
   13ac0:	00001006 	br	13b04 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   13ac4:	e0bffe17 	ldw	r2,-8(fp)
   13ac8:	10c00104 	addi	r3,r2,4
   13acc:	e0fffe15 	stw	r3,-8(fp)
   13ad0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   13ad4:	e0800217 	ldw	r2,8(fp)
   13ad8:	00c00384 	movi	r3,14
   13adc:	10c00005 	stb	r3,0(r2)
             break;
   13ae0:	00000806 	br	13b04 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   13ae4:	e0bffe17 	ldw	r2,-8(fp)
   13ae8:	10c00104 	addi	r3,r2,4
   13aec:	e0fffe15 	stw	r3,-8(fp)
   13af0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   13af4:	e0800217 	ldw	r2,8(fp)
   13af8:	00c00284 	movi	r3,10
   13afc:	10c00005 	stb	r3,0(r2)
             break;
   13b00:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   13b04:	d0a84117 	ldw	r2,-24316(gp)
   13b08:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   13b0c:	d0a84117 	ldw	r2,-24316(gp)
   13b10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   13b14:	d0a84117 	ldw	r2,-24316(gp)
   13b18:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13b1c:	d0a84117 	ldw	r2,-24316(gp)
   13b20:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   13b24:	d0a84117 	ldw	r2,-24316(gp)
   13b28:	10000915 	stw	zero,36(r2)
   13b2c:	e0bff317 	ldw	r2,-52(fp)
   13b30:	e0bffb15 	stw	r2,-20(fp)
   13b34:	e0bffb17 	ldw	r2,-20(fp)
   13b38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   13b3c:	e0bff18b 	ldhu	r2,-58(fp)
}
   13b40:	e037883a 	mov	sp,fp
   13b44:	dfc00117 	ldw	ra,4(sp)
   13b48:	df000017 	ldw	fp,0(sp)
   13b4c:	dec00204 	addi	sp,sp,8
   13b50:	f800283a 	ret

00013b54 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   13b54:	defffe04 	addi	sp,sp,-8
   13b58:	dfc00115 	stw	ra,4(sp)
   13b5c:	df000015 	stw	fp,0(sp)
   13b60:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   13b64:	001f0c80 	call	1f0c8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   13b68:	00148c80 	call	148c8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   13b6c:	001490c0 	call	1490c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   13b70:	0014a6c0 	call	14a6c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   13b74:	00147ec0 	call	147ec <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   13b78:	00169ec0 	call	169ec <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   13b7c:	0017ebc0 	call	17ebc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   13b80:	00190f00 	call	190f0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   13b84:	00149740 	call	14974 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   13b88:	00149f00 	call	149f0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   13b8c:	001f0e40 	call	1f0e4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   13b90:	00152d80 	call	152d8 <OSDebugInit>
#endif
}
   13b94:	e037883a 	mov	sp,fp
   13b98:	dfc00117 	ldw	ra,4(sp)
   13b9c:	df000017 	ldw	fp,0(sp)
   13ba0:	dec00204 	addi	sp,sp,8
   13ba4:	f800283a 	ret

00013ba8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   13ba8:	defffc04 	addi	sp,sp,-16
   13bac:	df000315 	stw	fp,12(sp)
   13bb0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13bb4:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   13bb8:	d0a83243 	ldbu	r2,-24375(gp)
   13bbc:	10803fcc 	andi	r2,r2,255
   13bc0:	10800058 	cmpnei	r2,r2,1
   13bc4:	1000131e 	bne	r2,zero,13c14 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bc8:	0005303a 	rdctl	r2,status
   13bcc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bd0:	e0fffe17 	ldw	r3,-8(fp)
   13bd4:	00bfff84 	movi	r2,-2
   13bd8:	1884703a 	and	r2,r3,r2
   13bdc:	1001703a 	wrctl	status,r2
  
  return context;
   13be0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13be4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   13be8:	d0a84003 	ldbu	r2,-24320(gp)
   13bec:	10803fcc 	andi	r2,r2,255
   13bf0:	10803fe0 	cmpeqi	r2,r2,255
   13bf4:	1000031e 	bne	r2,zero,13c04 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   13bf8:	d0a84003 	ldbu	r2,-24320(gp)
   13bfc:	10800044 	addi	r2,r2,1
   13c00:	d0a84005 	stb	r2,-24320(gp)
   13c04:	e0bffd17 	ldw	r2,-12(fp)
   13c08:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c0c:	e0bfff17 	ldw	r2,-4(fp)
   13c10:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   13c14:	e037883a 	mov	sp,fp
   13c18:	df000017 	ldw	fp,0(sp)
   13c1c:	dec00104 	addi	sp,sp,4
   13c20:	f800283a 	ret

00013c24 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   13c24:	defffb04 	addi	sp,sp,-20
   13c28:	dfc00415 	stw	ra,16(sp)
   13c2c:	df000315 	stw	fp,12(sp)
   13c30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c34:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   13c38:	d0a83243 	ldbu	r2,-24375(gp)
   13c3c:	10803fcc 	andi	r2,r2,255
   13c40:	10800058 	cmpnei	r2,r2,1
   13c44:	10002f1e 	bne	r2,zero,13d04 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c48:	0005303a 	rdctl	r2,status
   13c4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c50:	e0fffe17 	ldw	r3,-8(fp)
   13c54:	00bfff84 	movi	r2,-2
   13c58:	1884703a 	and	r2,r3,r2
   13c5c:	1001703a 	wrctl	status,r2
  
  return context;
   13c60:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13c64:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   13c68:	d0a84003 	ldbu	r2,-24320(gp)
   13c6c:	10803fcc 	andi	r2,r2,255
   13c70:	10000326 	beq	r2,zero,13c80 <OSIntExit+0x5c>
            OSIntNesting--;
   13c74:	d0a84003 	ldbu	r2,-24320(gp)
   13c78:	10bfffc4 	addi	r2,r2,-1
   13c7c:	d0a84005 	stb	r2,-24320(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   13c80:	d0a84003 	ldbu	r2,-24320(gp)
   13c84:	10803fcc 	andi	r2,r2,255
   13c88:	10001a1e 	bne	r2,zero,13cf4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   13c8c:	d0a83203 	ldbu	r2,-24376(gp)
   13c90:	10803fcc 	andi	r2,r2,255
   13c94:	1000171e 	bne	r2,zero,13cf4 <OSIntExit+0xd0>
                OS_SchedNew();
   13c98:	0014ccc0 	call	14ccc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   13c9c:	d0e83403 	ldbu	r3,-24368(gp)
   13ca0:	d0a83443 	ldbu	r2,-24367(gp)
   13ca4:	18c03fcc 	andi	r3,r3,255
   13ca8:	10803fcc 	andi	r2,r2,255
   13cac:	18801126 	beq	r3,r2,13cf4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   13cb0:	d0a83403 	ldbu	r2,-24368(gp)
   13cb4:	10c03fcc 	andi	r3,r2,255
   13cb8:	00800134 	movhi	r2,4
   13cbc:	10956904 	addi	r2,r2,21924
   13cc0:	18c7883a 	add	r3,r3,r3
   13cc4:	18c7883a 	add	r3,r3,r3
   13cc8:	10c5883a 	add	r2,r2,r3
   13ccc:	10800017 	ldw	r2,0(r2)
   13cd0:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   13cd4:	d0a83c17 	ldw	r2,-24336(gp)
   13cd8:	10c00e17 	ldw	r3,56(r2)
   13cdc:	18c00044 	addi	r3,r3,1
   13ce0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   13ce4:	d0a83717 	ldw	r2,-24356(gp)
   13ce8:	10800044 	addi	r2,r2,1
   13cec:	d0a83715 	stw	r2,-24356(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   13cf0:	001ee080 	call	1ee08 <OSCtxSw>
   13cf4:	e0bffd17 	ldw	r2,-12(fp)
   13cf8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cfc:	e0bfff17 	ldw	r2,-4(fp)
   13d00:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13d04:	e037883a 	mov	sp,fp
   13d08:	dfc00117 	ldw	ra,4(sp)
   13d0c:	df000017 	ldw	fp,0(sp)
   13d10:	dec00204 	addi	sp,sp,8
   13d14:	f800283a 	ret

00013d18 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   13d18:	defffc04 	addi	sp,sp,-16
   13d1c:	df000315 	stw	fp,12(sp)
   13d20:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d24:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   13d28:	d0a83243 	ldbu	r2,-24375(gp)
   13d2c:	10803fcc 	andi	r2,r2,255
   13d30:	10800058 	cmpnei	r2,r2,1
   13d34:	1000161e 	bne	r2,zero,13d90 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d38:	0005303a 	rdctl	r2,status
   13d3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d40:	e0fffe17 	ldw	r3,-8(fp)
   13d44:	00bfff84 	movi	r2,-2
   13d48:	1884703a 	and	r2,r3,r2
   13d4c:	1001703a 	wrctl	status,r2
  
  return context;
   13d50:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   13d54:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   13d58:	d0a84003 	ldbu	r2,-24320(gp)
   13d5c:	10803fcc 	andi	r2,r2,255
   13d60:	1000071e 	bne	r2,zero,13d80 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   13d64:	d0a83203 	ldbu	r2,-24376(gp)
   13d68:	10803fcc 	andi	r2,r2,255
   13d6c:	10803fe0 	cmpeqi	r2,r2,255
   13d70:	1000031e 	bne	r2,zero,13d80 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   13d74:	d0a83203 	ldbu	r2,-24376(gp)
   13d78:	10800044 	addi	r2,r2,1
   13d7c:	d0a83205 	stb	r2,-24376(gp)
   13d80:	e0bffd17 	ldw	r2,-12(fp)
   13d84:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d88:	e0bfff17 	ldw	r2,-4(fp)
   13d8c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   13d90:	e037883a 	mov	sp,fp
   13d94:	df000017 	ldw	fp,0(sp)
   13d98:	dec00104 	addi	sp,sp,4
   13d9c:	f800283a 	ret

00013da0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   13da0:	defff804 	addi	sp,sp,-32
   13da4:	dfc00715 	stw	ra,28(sp)
   13da8:	df000615 	stw	fp,24(sp)
   13dac:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13db0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   13db4:	d0a83243 	ldbu	r2,-24375(gp)
   13db8:	10803fcc 	andi	r2,r2,255
   13dbc:	10800058 	cmpnei	r2,r2,1
   13dc0:	1000281e 	bne	r2,zero,13e64 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dc4:	0005303a 	rdctl	r2,status
   13dc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dcc:	e0fffb17 	ldw	r3,-20(fp)
   13dd0:	00bfff84 	movi	r2,-2
   13dd4:	1884703a 	and	r2,r3,r2
   13dd8:	1001703a 	wrctl	status,r2
  
  return context;
   13ddc:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   13de0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   13de4:	d0a83203 	ldbu	r2,-24376(gp)
   13de8:	10803fcc 	andi	r2,r2,255
   13dec:	10001926 	beq	r2,zero,13e54 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   13df0:	d0a83203 	ldbu	r2,-24376(gp)
   13df4:	10bfffc4 	addi	r2,r2,-1
   13df8:	d0a83205 	stb	r2,-24376(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   13dfc:	d0a83203 	ldbu	r2,-24376(gp)
   13e00:	10803fcc 	andi	r2,r2,255
   13e04:	10000e1e 	bne	r2,zero,13e40 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   13e08:	d0a84003 	ldbu	r2,-24320(gp)
   13e0c:	10803fcc 	andi	r2,r2,255
   13e10:	1000061e 	bne	r2,zero,13e2c <OSSchedUnlock+0x8c>
   13e14:	e0bffa17 	ldw	r2,-24(fp)
   13e18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   13e24:	0014c000 	call	14c00 <OS_Sched>
   13e28:	00000e06 	br	13e64 <OSSchedUnlock+0xc4>
   13e2c:	e0bffa17 	ldw	r2,-24(fp)
   13e30:	e0bffd15 	stw	r2,-12(fp)
   13e34:	e0bffd17 	ldw	r2,-12(fp)
   13e38:	1001703a 	wrctl	status,r2
   13e3c:	00000906 	br	13e64 <OSSchedUnlock+0xc4>
   13e40:	e0bffa17 	ldw	r2,-24(fp)
   13e44:	e0bffe15 	stw	r2,-8(fp)
   13e48:	e0bffe17 	ldw	r2,-8(fp)
   13e4c:	1001703a 	wrctl	status,r2
   13e50:	00000406 	br	13e64 <OSSchedUnlock+0xc4>
   13e54:	e0bffa17 	ldw	r2,-24(fp)
   13e58:	e0bfff15 	stw	r2,-4(fp)
   13e5c:	e0bfff17 	ldw	r2,-4(fp)
   13e60:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   13e64:	e037883a 	mov	sp,fp
   13e68:	dfc00117 	ldw	ra,4(sp)
   13e6c:	df000017 	ldw	fp,0(sp)
   13e70:	dec00204 	addi	sp,sp,8
   13e74:	f800283a 	ret

00013e78 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   13e78:	defffe04 	addi	sp,sp,-8
   13e7c:	dfc00115 	stw	ra,4(sp)
   13e80:	df000015 	stw	fp,0(sp)
   13e84:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   13e88:	d0a83243 	ldbu	r2,-24375(gp)
   13e8c:	10803fcc 	andi	r2,r2,255
   13e90:	10000f1e 	bne	r2,zero,13ed0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   13e94:	0014ccc0 	call	14ccc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   13e98:	d0a83403 	ldbu	r2,-24368(gp)
   13e9c:	d0a83445 	stb	r2,-24367(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   13ea0:	d0a83403 	ldbu	r2,-24368(gp)
   13ea4:	10c03fcc 	andi	r3,r2,255
   13ea8:	00800134 	movhi	r2,4
   13eac:	10956904 	addi	r2,r2,21924
   13eb0:	18c7883a 	add	r3,r3,r3
   13eb4:	18c7883a 	add	r3,r3,r3
   13eb8:	10c5883a 	add	r2,r2,r3
   13ebc:	10800017 	ldw	r2,0(r2)
   13ec0:	d0a83c15 	stw	r2,-24336(gp)
        OSTCBCur      = OSTCBHighRdy;
   13ec4:	d0a83c17 	ldw	r2,-24336(gp)
   13ec8:	d0a84115 	stw	r2,-24316(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   13ecc:	001ee940 	call	1ee94 <OSStartHighRdy>
    }
}
   13ed0:	e037883a 	mov	sp,fp
   13ed4:	dfc00117 	ldw	ra,4(sp)
   13ed8:	df000017 	ldw	fp,0(sp)
   13edc:	dec00204 	addi	sp,sp,8
   13ee0:	f800283a 	ret

00013ee4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   13ee4:	defff904 	addi	sp,sp,-28
   13ee8:	dfc00615 	stw	ra,24(sp)
   13eec:	df000515 	stw	fp,20(sp)
   13ef0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13ef4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   13ef8:	01000084 	movi	r4,2
   13efc:	001b5980 	call	1b598 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f00:	0005303a 	rdctl	r2,status
   13f04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f08:	e0fffc17 	ldw	r3,-16(fp)
   13f0c:	00bfff84 	movi	r2,-2
   13f10:	1884703a 	and	r2,r3,r2
   13f14:	1001703a 	wrctl	status,r2
  
  return context;
   13f18:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   13f1c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   13f20:	d0283315 	stw	zero,-24372(gp)
   13f24:	e0bffb17 	ldw	r2,-20(fp)
   13f28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f2c:	e0bffd17 	ldw	r2,-12(fp)
   13f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   13f34:	0009883a 	mov	r4,zero
   13f38:	001b5980 	call	1b598 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f3c:	0005303a 	rdctl	r2,status
   13f40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f44:	e0fffe17 	ldw	r3,-8(fp)
   13f48:	00bfff84 	movi	r2,-2
   13f4c:	1884703a 	and	r2,r3,r2
   13f50:	1001703a 	wrctl	status,r2
  
  return context;
   13f54:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   13f58:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   13f5c:	d0a83317 	ldw	r2,-24372(gp)
   13f60:	d0a83815 	stw	r2,-24352(gp)
    OSStatRdy    = OS_TRUE;
   13f64:	00800044 	movi	r2,1
   13f68:	d0a84405 	stb	r2,-24304(gp)
   13f6c:	e0bffb17 	ldw	r2,-20(fp)
   13f70:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f74:	e0bfff17 	ldw	r2,-4(fp)
   13f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13f7c:	e037883a 	mov	sp,fp
   13f80:	dfc00117 	ldw	ra,4(sp)
   13f84:	df000017 	ldw	fp,0(sp)
   13f88:	dec00204 	addi	sp,sp,8
   13f8c:	f800283a 	ret

00013f90 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   13f90:	defff704 	addi	sp,sp,-36
   13f94:	dfc00815 	stw	ra,32(sp)
   13f98:	df000715 	stw	fp,28(sp)
   13f9c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13fa0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   13fa4:	001f0ac0 	call	1f0ac <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fa8:	0005303a 	rdctl	r2,status
   13fac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fb0:	e0fffc17 	ldw	r3,-16(fp)
   13fb4:	00bfff84 	movi	r2,-2
   13fb8:	1884703a 	and	r2,r3,r2
   13fbc:	1001703a 	wrctl	status,r2
  
  return context;
   13fc0:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   13fc4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   13fc8:	d0a84217 	ldw	r2,-24312(gp)
   13fcc:	10800044 	addi	r2,r2,1
   13fd0:	d0a84215 	stw	r2,-24312(gp)
   13fd4:	e0bffb17 	ldw	r2,-20(fp)
   13fd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fdc:	e0bffd17 	ldw	r2,-12(fp)
   13fe0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   13fe4:	d0a83243 	ldbu	r2,-24375(gp)
   13fe8:	10803fcc 	andi	r2,r2,255
   13fec:	10800058 	cmpnei	r2,r2,1
   13ff0:	1000691e 	bne	r2,zero,14198 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   13ff4:	d0a83603 	ldbu	r2,-24360(gp)
   13ff8:	10803fcc 	andi	r2,r2,255
   13ffc:	10c00060 	cmpeqi	r3,r2,1
   14000:	1800061e 	bne	r3,zero,1401c <OSTimeTick+0x8c>
   14004:	10c000a0 	cmpeqi	r3,r2,2
   14008:	1800061e 	bne	r3,zero,14024 <OSTimeTick+0x94>
   1400c:	10000a1e 	bne	r2,zero,14038 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   14010:	00800044 	movi	r2,1
   14014:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14018:	00000b06 	br	14048 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1401c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   14020:	00000906 	br	14048 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   14024:	00800044 	movi	r2,1
   14028:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1402c:	00800044 	movi	r2,1
   14030:	d0a83605 	stb	r2,-24360(gp)
                 break;
   14034:	00000406 	br	14048 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   14038:	00800044 	movi	r2,1
   1403c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   14040:	d0283605 	stb	zero,-24360(gp)
                 break;
   14044:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14048:	e0bffa03 	ldbu	r2,-24(fp)
   1404c:	1000011e 	bne	r2,zero,14054 <OSTimeTick+0xc4>
            return;
   14050:	00005106 	br	14198 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   14054:	d0a83517 	ldw	r2,-24364(gp)
   14058:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1405c:	00004906 	br	14184 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14060:	0005303a 	rdctl	r2,status
   14064:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14068:	e0fffe17 	ldw	r3,-8(fp)
   1406c:	00bfff84 	movi	r2,-2
   14070:	1884703a 	and	r2,r3,r2
   14074:	1001703a 	wrctl	status,r2
  
  return context;
   14078:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   1407c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   14080:	e0bff917 	ldw	r2,-28(fp)
   14084:	10800b8b 	ldhu	r2,46(r2)
   14088:	10bfffcc 	andi	r2,r2,65535
   1408c:	10003626 	beq	r2,zero,14168 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   14090:	e0bff917 	ldw	r2,-28(fp)
   14094:	10800b8b 	ldhu	r2,46(r2)
   14098:	10bfffc4 	addi	r2,r2,-1
   1409c:	1007883a 	mov	r3,r2
   140a0:	e0bff917 	ldw	r2,-28(fp)
   140a4:	10c00b8d 	sth	r3,46(r2)
   140a8:	e0bff917 	ldw	r2,-28(fp)
   140ac:	10800b8b 	ldhu	r2,46(r2)
   140b0:	10bfffcc 	andi	r2,r2,65535
   140b4:	10002c1e 	bne	r2,zero,14168 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   140b8:	e0bff917 	ldw	r2,-28(fp)
   140bc:	10800c03 	ldbu	r2,48(r2)
   140c0:	10803fcc 	andi	r2,r2,255
   140c4:	10800dcc 	andi	r2,r2,55
   140c8:	10000b26 	beq	r2,zero,140f8 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   140cc:	e0bff917 	ldw	r2,-28(fp)
   140d0:	10c00c03 	ldbu	r3,48(r2)
   140d4:	00bff204 	movi	r2,-56
   140d8:	1884703a 	and	r2,r3,r2
   140dc:	1007883a 	mov	r3,r2
   140e0:	e0bff917 	ldw	r2,-28(fp)
   140e4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   140e8:	e0bff917 	ldw	r2,-28(fp)
   140ec:	00c00044 	movi	r3,1
   140f0:	10c00c45 	stb	r3,49(r2)
   140f4:	00000206 	br	14100 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   140f8:	e0bff917 	ldw	r2,-28(fp)
   140fc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   14100:	e0bff917 	ldw	r2,-28(fp)
   14104:	10800c03 	ldbu	r2,48(r2)
   14108:	10803fcc 	andi	r2,r2,255
   1410c:	1080020c 	andi	r2,r2,8
   14110:	1000151e 	bne	r2,zero,14168 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14114:	e0bff917 	ldw	r2,-28(fp)
   14118:	10c00d83 	ldbu	r3,54(r2)
   1411c:	d0a83e03 	ldbu	r2,-24328(gp)
   14120:	1884b03a 	or	r2,r3,r2
   14124:	d0a83e05 	stb	r2,-24328(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14128:	e0bff917 	ldw	r2,-28(fp)
   1412c:	10800d03 	ldbu	r2,52(r2)
   14130:	10c03fcc 	andi	r3,r2,255
   14134:	e0bff917 	ldw	r2,-28(fp)
   14138:	10800d03 	ldbu	r2,52(r2)
   1413c:	11003fcc 	andi	r4,r2,255
   14140:	d0a83e44 	addi	r2,gp,-24327
   14144:	2085883a 	add	r2,r4,r2
   14148:	11000003 	ldbu	r4,0(r2)
   1414c:	e0bff917 	ldw	r2,-28(fp)
   14150:	10800d43 	ldbu	r2,53(r2)
   14154:	2084b03a 	or	r2,r4,r2
   14158:	1009883a 	mov	r4,r2
   1415c:	d0a83e44 	addi	r2,gp,-24327
   14160:	1885883a 	add	r2,r3,r2
   14164:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14168:	e0bff917 	ldw	r2,-28(fp)
   1416c:	10800517 	ldw	r2,20(r2)
   14170:	e0bff915 	stw	r2,-28(fp)
   14174:	e0bffb17 	ldw	r2,-20(fp)
   14178:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1417c:	e0bfff17 	ldw	r2,-4(fp)
   14180:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14184:	e0bff917 	ldw	r2,-28(fp)
   14188:	10800c83 	ldbu	r2,50(r2)
   1418c:	10803fcc 	andi	r2,r2,255
   14190:	10800518 	cmpnei	r2,r2,20
   14194:	103fb21e 	bne	r2,zero,14060 <__alt_mem_Flash_flash_data+0xf4014060>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   14198:	e037883a 	mov	sp,fp
   1419c:	dfc00117 	ldw	ra,4(sp)
   141a0:	df000017 	ldw	fp,0(sp)
   141a4:	dec00204 	addi	sp,sp,8
   141a8:	f800283a 	ret

000141ac <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   141ac:	deffff04 	addi	sp,sp,-4
   141b0:	df000015 	stw	fp,0(sp)
   141b4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   141b8:	00804784 	movi	r2,286
}
   141bc:	e037883a 	mov	sp,fp
   141c0:	df000017 	ldw	fp,0(sp)
   141c4:	dec00104 	addi	sp,sp,4
   141c8:	f800283a 	ret

000141cc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   141cc:	deffff04 	addi	sp,sp,-4
   141d0:	df000015 	stw	fp,0(sp)
   141d4:	d839883a 	mov	fp,sp
}
   141d8:	e037883a 	mov	sp,fp
   141dc:	df000017 	ldw	fp,0(sp)
   141e0:	dec00104 	addi	sp,sp,4
   141e4:	f800283a 	ret

000141e8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   141e8:	defff804 	addi	sp,sp,-32
   141ec:	dfc00715 	stw	ra,28(sp)
   141f0:	df000615 	stw	fp,24(sp)
   141f4:	df000604 	addi	fp,sp,24
   141f8:	e13ffc15 	stw	r4,-16(fp)
   141fc:	e17ffd15 	stw	r5,-12(fp)
   14200:	3007883a 	mov	r3,r6
   14204:	3805883a 	mov	r2,r7
   14208:	e0fffe05 	stb	r3,-8(fp)
   1420c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14210:	e0bffc17 	ldw	r2,-16(fp)
   14214:	10800283 	ldbu	r2,10(r2)
   14218:	10c03fcc 	andi	r3,r2,255
   1421c:	008000b4 	movhi	r2,2
   14220:	10804504 	addi	r2,r2,276
   14224:	10c5883a 	add	r2,r2,r3
   14228:	10800003 	ldbu	r2,0(r2)
   1422c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14230:	e0bffa03 	ldbu	r2,-24(fp)
   14234:	e0fffc17 	ldw	r3,-16(fp)
   14238:	1885883a 	add	r2,r3,r2
   1423c:	10800204 	addi	r2,r2,8
   14240:	108000c3 	ldbu	r2,3(r2)
   14244:	10c03fcc 	andi	r3,r2,255
   14248:	008000b4 	movhi	r2,2
   1424c:	10804504 	addi	r2,r2,276
   14250:	10c5883a 	add	r2,r2,r3
   14254:	10800003 	ldbu	r2,0(r2)
   14258:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   1425c:	e0bffa03 	ldbu	r2,-24(fp)
   14260:	100490fa 	slli	r2,r2,3
   14264:	1007883a 	mov	r3,r2
   14268:	e0bffa43 	ldbu	r2,-23(fp)
   1426c:	1885883a 	add	r2,r3,r2
   14270:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   14274:	e0fffa83 	ldbu	r3,-22(fp)
   14278:	00800134 	movhi	r2,4
   1427c:	10956904 	addi	r2,r2,21924
   14280:	18c7883a 	add	r3,r3,r3
   14284:	18c7883a 	add	r3,r3,r3
   14288:	10c5883a 	add	r2,r2,r3
   1428c:	10800017 	ldw	r2,0(r2)
   14290:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   14294:	e0bffb17 	ldw	r2,-20(fp)
   14298:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   1429c:	e0bffb17 	ldw	r2,-20(fp)
   142a0:	e0fffd17 	ldw	r3,-12(fp)
   142a4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   142a8:	e0bffb17 	ldw	r2,-20(fp)
   142ac:	10800c03 	ldbu	r2,48(r2)
   142b0:	1007883a 	mov	r3,r2
   142b4:	e0bffe03 	ldbu	r2,-8(fp)
   142b8:	0084303a 	nor	r2,zero,r2
   142bc:	1884703a 	and	r2,r3,r2
   142c0:	1007883a 	mov	r3,r2
   142c4:	e0bffb17 	ldw	r2,-20(fp)
   142c8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   142cc:	e0bffb17 	ldw	r2,-20(fp)
   142d0:	e0ffff03 	ldbu	r3,-4(fp)
   142d4:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   142d8:	e0bffb17 	ldw	r2,-20(fp)
   142dc:	10800c03 	ldbu	r2,48(r2)
   142e0:	10803fcc 	andi	r2,r2,255
   142e4:	1080020c 	andi	r2,r2,8
   142e8:	1000111e 	bne	r2,zero,14330 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   142ec:	e0bffb17 	ldw	r2,-20(fp)
   142f0:	10c00d83 	ldbu	r3,54(r2)
   142f4:	d0a83e03 	ldbu	r2,-24328(gp)
   142f8:	1884b03a 	or	r2,r3,r2
   142fc:	d0a83e05 	stb	r2,-24328(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14300:	e0fffa03 	ldbu	r3,-24(fp)
   14304:	e13ffa03 	ldbu	r4,-24(fp)
   14308:	d0a83e44 	addi	r2,gp,-24327
   1430c:	2085883a 	add	r2,r4,r2
   14310:	11000003 	ldbu	r4,0(r2)
   14314:	e0bffb17 	ldw	r2,-20(fp)
   14318:	10800d43 	ldbu	r2,53(r2)
   1431c:	2084b03a 	or	r2,r4,r2
   14320:	1009883a 	mov	r4,r2
   14324:	d0a83e44 	addi	r2,gp,-24327
   14328:	1885883a 	add	r2,r3,r2
   1432c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14330:	e13ffb17 	ldw	r4,-20(fp)
   14334:	e17ffc17 	ldw	r5,-16(fp)
   14338:	00145d80 	call	145d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   1433c:	e0bffb17 	ldw	r2,-20(fp)
   14340:	10800817 	ldw	r2,32(r2)
   14344:	10000826 	beq	r2,zero,14368 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14348:	e0bffb17 	ldw	r2,-20(fp)
   1434c:	10800817 	ldw	r2,32(r2)
   14350:	e13ffb17 	ldw	r4,-20(fp)
   14354:	100b883a 	mov	r5,r2
   14358:	001468c0 	call	1468c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   1435c:	e0bffb17 	ldw	r2,-20(fp)
   14360:	e0fffc17 	ldw	r3,-16(fp)
   14364:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14368:	e0bffa83 	ldbu	r2,-22(fp)
}
   1436c:	e037883a 	mov	sp,fp
   14370:	dfc00117 	ldw	ra,4(sp)
   14374:	df000017 	ldw	fp,0(sp)
   14378:	dec00204 	addi	sp,sp,8
   1437c:	f800283a 	ret

00014380 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14380:	defffd04 	addi	sp,sp,-12
   14384:	df000215 	stw	fp,8(sp)
   14388:	df000204 	addi	fp,sp,8
   1438c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14390:	d0a84117 	ldw	r2,-24316(gp)
   14394:	e0ffff17 	ldw	r3,-4(fp)
   14398:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   1439c:	d0a84117 	ldw	r2,-24316(gp)
   143a0:	10800d03 	ldbu	r2,52(r2)
   143a4:	10803fcc 	andi	r2,r2,255
   143a8:	d0e84117 	ldw	r3,-24316(gp)
   143ac:	18c00d03 	ldbu	r3,52(r3)
   143b0:	18c03fcc 	andi	r3,r3,255
   143b4:	e13fff17 	ldw	r4,-4(fp)
   143b8:	20c7883a 	add	r3,r4,r3
   143bc:	18c00204 	addi	r3,r3,8
   143c0:	190000c3 	ldbu	r4,3(r3)
   143c4:	d0e84117 	ldw	r3,-24316(gp)
   143c8:	18c00d43 	ldbu	r3,53(r3)
   143cc:	20c6b03a 	or	r3,r4,r3
   143d0:	1809883a 	mov	r4,r3
   143d4:	e0ffff17 	ldw	r3,-4(fp)
   143d8:	1885883a 	add	r2,r3,r2
   143dc:	10800204 	addi	r2,r2,8
   143e0:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   143e4:	e0bfff17 	ldw	r2,-4(fp)
   143e8:	10c00283 	ldbu	r3,10(r2)
   143ec:	d0a84117 	ldw	r2,-24316(gp)
   143f0:	10800d83 	ldbu	r2,54(r2)
   143f4:	1884b03a 	or	r2,r3,r2
   143f8:	1007883a 	mov	r3,r2
   143fc:	e0bfff17 	ldw	r2,-4(fp)
   14400:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14404:	d0a84117 	ldw	r2,-24316(gp)
   14408:	10800d03 	ldbu	r2,52(r2)
   1440c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14410:	e0fffe03 	ldbu	r3,-8(fp)
   14414:	e13ffe03 	ldbu	r4,-8(fp)
   14418:	d0a83e44 	addi	r2,gp,-24327
   1441c:	2085883a 	add	r2,r4,r2
   14420:	10800003 	ldbu	r2,0(r2)
   14424:	1009883a 	mov	r4,r2
   14428:	d0a84117 	ldw	r2,-24316(gp)
   1442c:	10800d43 	ldbu	r2,53(r2)
   14430:	0084303a 	nor	r2,zero,r2
   14434:	2084703a 	and	r2,r4,r2
   14438:	1009883a 	mov	r4,r2
   1443c:	d0a83e44 	addi	r2,gp,-24327
   14440:	1885883a 	add	r2,r3,r2
   14444:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14448:	e0fffe03 	ldbu	r3,-8(fp)
   1444c:	d0a83e44 	addi	r2,gp,-24327
   14450:	1885883a 	add	r2,r3,r2
   14454:	10800003 	ldbu	r2,0(r2)
   14458:	10803fcc 	andi	r2,r2,255
   1445c:	1000071e 	bne	r2,zero,1447c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14460:	d0a84117 	ldw	r2,-24316(gp)
   14464:	10800d83 	ldbu	r2,54(r2)
   14468:	0084303a 	nor	r2,zero,r2
   1446c:	1007883a 	mov	r3,r2
   14470:	d0a83e03 	ldbu	r2,-24328(gp)
   14474:	1884703a 	and	r2,r3,r2
   14478:	d0a83e05 	stb	r2,-24328(gp)
    }
}
   1447c:	e037883a 	mov	sp,fp
   14480:	df000017 	ldw	fp,0(sp)
   14484:	dec00104 	addi	sp,sp,4
   14488:	f800283a 	ret

0001448c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1448c:	defffb04 	addi	sp,sp,-20
   14490:	df000415 	stw	fp,16(sp)
   14494:	df000404 	addi	fp,sp,16
   14498:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1449c:	d0a84117 	ldw	r2,-24316(gp)
   144a0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   144a4:	d0a84117 	ldw	r2,-24316(gp)
   144a8:	e0ffff17 	ldw	r3,-4(fp)
   144ac:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   144b0:	e0bfff17 	ldw	r2,-4(fp)
   144b4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   144b8:	e0bffc17 	ldw	r2,-16(fp)
   144bc:	10800017 	ldw	r2,0(r2)
   144c0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   144c4:	00002006 	br	14548 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   144c8:	d0a84117 	ldw	r2,-24316(gp)
   144cc:	10800d03 	ldbu	r2,52(r2)
   144d0:	10803fcc 	andi	r2,r2,255
   144d4:	d0e84117 	ldw	r3,-24316(gp)
   144d8:	18c00d03 	ldbu	r3,52(r3)
   144dc:	18c03fcc 	andi	r3,r3,255
   144e0:	e13ffd17 	ldw	r4,-12(fp)
   144e4:	20c7883a 	add	r3,r4,r3
   144e8:	18c00204 	addi	r3,r3,8
   144ec:	190000c3 	ldbu	r4,3(r3)
   144f0:	d0e84117 	ldw	r3,-24316(gp)
   144f4:	18c00d43 	ldbu	r3,53(r3)
   144f8:	20c6b03a 	or	r3,r4,r3
   144fc:	1809883a 	mov	r4,r3
   14500:	e0fffd17 	ldw	r3,-12(fp)
   14504:	1885883a 	add	r2,r3,r2
   14508:	10800204 	addi	r2,r2,8
   1450c:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14510:	e0bffd17 	ldw	r2,-12(fp)
   14514:	10c00283 	ldbu	r3,10(r2)
   14518:	d0a84117 	ldw	r2,-24316(gp)
   1451c:	10800d83 	ldbu	r2,54(r2)
   14520:	1884b03a 	or	r2,r3,r2
   14524:	1007883a 	mov	r3,r2
   14528:	e0bffd17 	ldw	r2,-12(fp)
   1452c:	10c00285 	stb	r3,10(r2)
        pevents++;
   14530:	e0bffc17 	ldw	r2,-16(fp)
   14534:	10800104 	addi	r2,r2,4
   14538:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1453c:	e0bffc17 	ldw	r2,-16(fp)
   14540:	10800017 	ldw	r2,0(r2)
   14544:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14548:	e0bffd17 	ldw	r2,-12(fp)
   1454c:	103fde1e 	bne	r2,zero,144c8 <__alt_mem_Flash_flash_data+0xf40144c8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14550:	d0a84117 	ldw	r2,-24316(gp)
   14554:	10800d03 	ldbu	r2,52(r2)
   14558:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1455c:	e0fffe03 	ldbu	r3,-8(fp)
   14560:	e13ffe03 	ldbu	r4,-8(fp)
   14564:	d0a83e44 	addi	r2,gp,-24327
   14568:	2085883a 	add	r2,r4,r2
   1456c:	10800003 	ldbu	r2,0(r2)
   14570:	1009883a 	mov	r4,r2
   14574:	d0a84117 	ldw	r2,-24316(gp)
   14578:	10800d43 	ldbu	r2,53(r2)
   1457c:	0084303a 	nor	r2,zero,r2
   14580:	2084703a 	and	r2,r4,r2
   14584:	1009883a 	mov	r4,r2
   14588:	d0a83e44 	addi	r2,gp,-24327
   1458c:	1885883a 	add	r2,r3,r2
   14590:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14594:	e0fffe03 	ldbu	r3,-8(fp)
   14598:	d0a83e44 	addi	r2,gp,-24327
   1459c:	1885883a 	add	r2,r3,r2
   145a0:	10800003 	ldbu	r2,0(r2)
   145a4:	10803fcc 	andi	r2,r2,255
   145a8:	1000071e 	bne	r2,zero,145c8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   145ac:	d0a84117 	ldw	r2,-24316(gp)
   145b0:	10800d83 	ldbu	r2,54(r2)
   145b4:	0084303a 	nor	r2,zero,r2
   145b8:	1007883a 	mov	r3,r2
   145bc:	d0a83e03 	ldbu	r2,-24328(gp)
   145c0:	1884703a 	and	r2,r3,r2
   145c4:	d0a83e05 	stb	r2,-24328(gp)
    }
}
   145c8:	e037883a 	mov	sp,fp
   145cc:	df000017 	ldw	fp,0(sp)
   145d0:	dec00104 	addi	sp,sp,4
   145d4:	f800283a 	ret

000145d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   145d8:	defffc04 	addi	sp,sp,-16
   145dc:	df000315 	stw	fp,12(sp)
   145e0:	df000304 	addi	fp,sp,12
   145e4:	e13ffe15 	stw	r4,-8(fp)
   145e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   145ec:	e0bffe17 	ldw	r2,-8(fp)
   145f0:	10800d03 	ldbu	r2,52(r2)
   145f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   145f8:	e0bffd03 	ldbu	r2,-12(fp)
   145fc:	e0fffd03 	ldbu	r3,-12(fp)
   14600:	e13fff17 	ldw	r4,-4(fp)
   14604:	20c7883a 	add	r3,r4,r3
   14608:	18c00204 	addi	r3,r3,8
   1460c:	18c000c3 	ldbu	r3,3(r3)
   14610:	1809883a 	mov	r4,r3
   14614:	e0fffe17 	ldw	r3,-8(fp)
   14618:	18c00d43 	ldbu	r3,53(r3)
   1461c:	00c6303a 	nor	r3,zero,r3
   14620:	20c6703a 	and	r3,r4,r3
   14624:	1809883a 	mov	r4,r3
   14628:	e0ffff17 	ldw	r3,-4(fp)
   1462c:	1885883a 	add	r2,r3,r2
   14630:	10800204 	addi	r2,r2,8
   14634:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14638:	e0bffd03 	ldbu	r2,-12(fp)
   1463c:	e0ffff17 	ldw	r3,-4(fp)
   14640:	1885883a 	add	r2,r3,r2
   14644:	10800204 	addi	r2,r2,8
   14648:	108000c3 	ldbu	r2,3(r2)
   1464c:	10803fcc 	andi	r2,r2,255
   14650:	10000a1e 	bne	r2,zero,1467c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14654:	e0bfff17 	ldw	r2,-4(fp)
   14658:	10800283 	ldbu	r2,10(r2)
   1465c:	1007883a 	mov	r3,r2
   14660:	e0bffe17 	ldw	r2,-8(fp)
   14664:	10800d83 	ldbu	r2,54(r2)
   14668:	0084303a 	nor	r2,zero,r2
   1466c:	1884703a 	and	r2,r3,r2
   14670:	1007883a 	mov	r3,r2
   14674:	e0bfff17 	ldw	r2,-4(fp)
   14678:	10c00285 	stb	r3,10(r2)
    }
}
   1467c:	e037883a 	mov	sp,fp
   14680:	df000017 	ldw	fp,0(sp)
   14684:	dec00104 	addi	sp,sp,4
   14688:	f800283a 	ret

0001468c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1468c:	defffa04 	addi	sp,sp,-24
   14690:	df000515 	stw	fp,20(sp)
   14694:	df000504 	addi	fp,sp,20
   14698:	e13ffe15 	stw	r4,-8(fp)
   1469c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   146a0:	e0bffe17 	ldw	r2,-8(fp)
   146a4:	10800d03 	ldbu	r2,52(r2)
   146a8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   146ac:	e0bffe17 	ldw	r2,-8(fp)
   146b0:	10800d83 	ldbu	r2,54(r2)
   146b4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   146b8:	e0bffe17 	ldw	r2,-8(fp)
   146bc:	10800d43 	ldbu	r2,53(r2)
   146c0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   146c4:	e0bfff17 	ldw	r2,-4(fp)
   146c8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   146cc:	e0bffb17 	ldw	r2,-20(fp)
   146d0:	10800017 	ldw	r2,0(r2)
   146d4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   146d8:	00002506 	br	14770 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   146dc:	e0bffd03 	ldbu	r2,-12(fp)
   146e0:	e0fffd03 	ldbu	r3,-12(fp)
   146e4:	e13ffc17 	ldw	r4,-16(fp)
   146e8:	20c7883a 	add	r3,r4,r3
   146ec:	18c00204 	addi	r3,r3,8
   146f0:	18c000c3 	ldbu	r3,3(r3)
   146f4:	1809883a 	mov	r4,r3
   146f8:	e0fffd83 	ldbu	r3,-10(fp)
   146fc:	00c6303a 	nor	r3,zero,r3
   14700:	20c6703a 	and	r3,r4,r3
   14704:	1809883a 	mov	r4,r3
   14708:	e0fffc17 	ldw	r3,-16(fp)
   1470c:	1885883a 	add	r2,r3,r2
   14710:	10800204 	addi	r2,r2,8
   14714:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   14718:	e0bffd03 	ldbu	r2,-12(fp)
   1471c:	e0fffc17 	ldw	r3,-16(fp)
   14720:	1885883a 	add	r2,r3,r2
   14724:	10800204 	addi	r2,r2,8
   14728:	108000c3 	ldbu	r2,3(r2)
   1472c:	10803fcc 	andi	r2,r2,255
   14730:	1000091e 	bne	r2,zero,14758 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14734:	e0bffc17 	ldw	r2,-16(fp)
   14738:	10800283 	ldbu	r2,10(r2)
   1473c:	1007883a 	mov	r3,r2
   14740:	e0bffd43 	ldbu	r2,-11(fp)
   14744:	0084303a 	nor	r2,zero,r2
   14748:	1884703a 	and	r2,r3,r2
   1474c:	1007883a 	mov	r3,r2
   14750:	e0bffc17 	ldw	r2,-16(fp)
   14754:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   14758:	e0bffb17 	ldw	r2,-20(fp)
   1475c:	10800104 	addi	r2,r2,4
   14760:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14764:	e0bffb17 	ldw	r2,-20(fp)
   14768:	10800017 	ldw	r2,0(r2)
   1476c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14770:	e0bffc17 	ldw	r2,-16(fp)
   14774:	103fd91e 	bne	r2,zero,146dc <__alt_mem_Flash_flash_data+0xf40146dc>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   14778:	e037883a 	mov	sp,fp
   1477c:	df000017 	ldw	fp,0(sp)
   14780:	dec00104 	addi	sp,sp,4
   14784:	f800283a 	ret

00014788 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14788:	defffc04 	addi	sp,sp,-16
   1478c:	df000315 	stw	fp,12(sp)
   14790:	df000304 	addi	fp,sp,12
   14794:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14798:	e0bfff17 	ldw	r2,-4(fp)
   1479c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   147a0:	e0bfff17 	ldw	r2,-4(fp)
   147a4:	108002c4 	addi	r2,r2,11
   147a8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147ac:	e03ffe05 	stb	zero,-8(fp)
   147b0:	00000706 	br	147d0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   147b4:	e0bffd17 	ldw	r2,-12(fp)
   147b8:	10c00044 	addi	r3,r2,1
   147bc:	e0fffd15 	stw	r3,-12(fp)
   147c0:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   147c4:	e0bffe03 	ldbu	r2,-8(fp)
   147c8:	10800044 	addi	r2,r2,1
   147cc:	e0bffe05 	stb	r2,-8(fp)
   147d0:	e0bffe03 	ldbu	r2,-8(fp)
   147d4:	108000f0 	cmpltui	r2,r2,3
   147d8:	103ff61e 	bne	r2,zero,147b4 <__alt_mem_Flash_flash_data+0xf40147b4>
        *ptbl++ = 0;
    }
}
   147dc:	e037883a 	mov	sp,fp
   147e0:	df000017 	ldw	fp,0(sp)
   147e4:	dec00104 	addi	sp,sp,4
   147e8:	f800283a 	ret

000147ec <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   147ec:	defffb04 	addi	sp,sp,-20
   147f0:	dfc00415 	stw	ra,16(sp)
   147f4:	df000315 	stw	fp,12(sp)
   147f8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   147fc:	01000134 	movhi	r4,4
   14800:	21115504 	addi	r4,r4,17748
   14804:	0142d004 	movi	r5,2880
   14808:	0014b4c0 	call	14b4c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1480c:	00800134 	movhi	r2,4
   14810:	10915504 	addi	r2,r2,17748
   14814:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   14818:	00800134 	movhi	r2,4
   1481c:	10916104 	addi	r2,r2,17796
   14820:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   14824:	e03ffd0d 	sth	zero,-12(fp)
   14828:	00001306 	br	14878 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1482c:	e0bffe17 	ldw	r2,-8(fp)
   14830:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   14834:	e0bffe17 	ldw	r2,-8(fp)
   14838:	e0ffff17 	ldw	r3,-4(fp)
   1483c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   14840:	e0bffe17 	ldw	r2,-8(fp)
   14844:	00c00fc4 	movi	r3,63
   14848:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1484c:	e0bffe17 	ldw	r2,-8(fp)
   14850:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   14854:	e0bffe17 	ldw	r2,-8(fp)
   14858:	10800c04 	addi	r2,r2,48
   1485c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   14860:	e0bfff17 	ldw	r2,-4(fp)
   14864:	10800c04 	addi	r2,r2,48
   14868:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1486c:	e0bffd0b 	ldhu	r2,-12(fp)
   14870:	10800044 	addi	r2,r2,1
   14874:	e0bffd0d 	sth	r2,-12(fp)
   14878:	e0bffd0b 	ldhu	r2,-12(fp)
   1487c:	10800ef0 	cmpltui	r2,r2,59
   14880:	103fea1e 	bne	r2,zero,1482c <__alt_mem_Flash_flash_data+0xf401482c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   14884:	e0bffe17 	ldw	r2,-8(fp)
   14888:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1488c:	e0bffe17 	ldw	r2,-8(fp)
   14890:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   14894:	e0bffe17 	ldw	r2,-8(fp)
   14898:	00c00fc4 	movi	r3,63
   1489c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   148a0:	e0bffe17 	ldw	r2,-8(fp)
   148a4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   148a8:	00800134 	movhi	r2,4
   148ac:	10915504 	addi	r2,r2,17748
   148b0:	d0a83f15 	stw	r2,-24324(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   148b4:	e037883a 	mov	sp,fp
   148b8:	dfc00117 	ldw	ra,4(sp)
   148bc:	df000017 	ldw	fp,0(sp)
   148c0:	dec00204 	addi	sp,sp,8
   148c4:	f800283a 	ret

000148c8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   148c8:	deffff04 	addi	sp,sp,-4
   148cc:	df000015 	stw	fp,0(sp)
   148d0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   148d4:	d0284215 	stw	zero,-24312(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   148d8:	d0284005 	stb	zero,-24320(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   148dc:	d0283205 	stb	zero,-24376(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   148e0:	d0283a45 	stb	zero,-24343(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   148e4:	d0283245 	stb	zero,-24375(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   148e8:	d0283715 	stw	zero,-24356(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   148ec:	d0283315 	stw	zero,-24372(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   148f0:	d0284515 	stw	zero,-24300(gp)
    OSIdleCtrMax  = 0L;
   148f4:	d0283815 	stw	zero,-24352(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   148f8:	d0284405 	stb	zero,-24304(gp)
#endif
}
   148fc:	e037883a 	mov	sp,fp
   14900:	df000017 	ldw	fp,0(sp)
   14904:	dec00104 	addi	sp,sp,4
   14908:	f800283a 	ret

0001490c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1490c:	defffd04 	addi	sp,sp,-12
   14910:	df000215 	stw	fp,8(sp)
   14914:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   14918:	d0283e05 	stb	zero,-24328(gp)
    prdytbl       = &OSRdyTbl[0];
   1491c:	d0a83e44 	addi	r2,gp,-24327
   14920:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   14924:	e03ffe05 	stb	zero,-8(fp)
   14928:	00000706 	br	14948 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1492c:	e0bfff17 	ldw	r2,-4(fp)
   14930:	10c00044 	addi	r3,r2,1
   14934:	e0ffff15 	stw	r3,-4(fp)
   14938:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1493c:	e0bffe03 	ldbu	r2,-8(fp)
   14940:	10800044 	addi	r2,r2,1
   14944:	e0bffe05 	stb	r2,-8(fp)
   14948:	e0bffe03 	ldbu	r2,-8(fp)
   1494c:	108000f0 	cmpltui	r2,r2,3
   14950:	103ff61e 	bne	r2,zero,1492c <__alt_mem_Flash_flash_data+0xf401492c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   14954:	d0283445 	stb	zero,-24367(gp)
    OSPrioHighRdy = 0;
   14958:	d0283405 	stb	zero,-24368(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   1495c:	d0283c15 	stw	zero,-24336(gp)
    OSTCBCur      = (OS_TCB *)0;
   14960:	d0284115 	stw	zero,-24316(gp)
}
   14964:	e037883a 	mov	sp,fp
   14968:	df000017 	ldw	fp,0(sp)
   1496c:	dec00104 	addi	sp,sp,4
   14970:	f800283a 	ret

00014974 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   14974:	defff804 	addi	sp,sp,-32
   14978:	dfc00715 	stw	ra,28(sp)
   1497c:	df000615 	stw	fp,24(sp)
   14980:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   14984:	00bfffd4 	movui	r2,65535
   14988:	d8800015 	stw	r2,0(sp)
   1498c:	00800134 	movhi	r2,4
   14990:	108f5504 	addi	r2,r2,15700
   14994:	d8800115 	stw	r2,4(sp)
   14998:	00808004 	movi	r2,512
   1499c:	d8800215 	stw	r2,8(sp)
   149a0:	d8000315 	stw	zero,12(sp)
   149a4:	008000c4 	movi	r2,3
   149a8:	d8800415 	stw	r2,16(sp)
   149ac:	01000074 	movhi	r4,1
   149b0:	21138104 	addi	r4,r4,19972
   149b4:	000b883a 	mov	r5,zero
   149b8:	01800134 	movhi	r6,4
   149bc:	31915404 	addi	r6,r6,17744
   149c0:	01c00504 	movi	r7,20
   149c4:	001a3a00 	call	1a3a0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   149c8:	01000504 	movi	r4,20
   149cc:	014000b4 	movhi	r5,2
   149d0:	29408504 	addi	r5,r5,532
   149d4:	e1bfff04 	addi	r6,fp,-4
   149d8:	001ac6c0 	call	1ac6c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   149dc:	e037883a 	mov	sp,fp
   149e0:	dfc00117 	ldw	ra,4(sp)
   149e4:	df000017 	ldw	fp,0(sp)
   149e8:	dec00204 	addi	sp,sp,8
   149ec:	f800283a 	ret

000149f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   149f0:	defff804 	addi	sp,sp,-32
   149f4:	dfc00715 	stw	ra,28(sp)
   149f8:	df000615 	stw	fp,24(sp)
   149fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   14a00:	00bfff94 	movui	r2,65534
   14a04:	d8800015 	stw	r2,0(sp)
   14a08:	00800134 	movhi	r2,4
   14a0c:	108cdd04 	addi	r2,r2,13172
   14a10:	d8800115 	stw	r2,4(sp)
   14a14:	00808004 	movi	r2,512
   14a18:	d8800215 	stw	r2,8(sp)
   14a1c:	d8000315 	stw	zero,12(sp)
   14a20:	008000c4 	movi	r2,3
   14a24:	d8800415 	stw	r2,16(sp)
   14a28:	01000074 	movhi	r4,1
   14a2c:	21139804 	addi	r4,r4,20064
   14a30:	000b883a 	mov	r5,zero
   14a34:	01800134 	movhi	r6,4
   14a38:	318edc04 	addi	r6,r6,15216
   14a3c:	01c004c4 	movi	r7,19
   14a40:	001a3a00 	call	1a3a0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   14a44:	010004c4 	movi	r4,19
   14a48:	014000b4 	movhi	r5,2
   14a4c:	29408904 	addi	r5,r5,548
   14a50:	e1bfff04 	addi	r6,fp,-4
   14a54:	001ac6c0 	call	1ac6c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   14a58:	e037883a 	mov	sp,fp
   14a5c:	dfc00117 	ldw	ra,4(sp)
   14a60:	df000017 	ldw	fp,0(sp)
   14a64:	dec00204 	addi	sp,sp,8
   14a68:	f800283a 	ret

00014a6c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   14a6c:	defffb04 	addi	sp,sp,-20
   14a70:	dfc00415 	stw	ra,16(sp)
   14a74:	df000315 	stw	fp,12(sp)
   14a78:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   14a7c:	01000134 	movhi	r4,4
   14a80:	21142504 	addi	r4,r4,20628
   14a84:	01414404 	movi	r5,1296
   14a88:	0014b4c0 	call	14b4c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   14a8c:	01000134 	movhi	r4,4
   14a90:	21156904 	addi	r4,r4,21924
   14a94:	01401504 	movi	r5,84
   14a98:	0014b4c0 	call	14b4c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   14a9c:	00800134 	movhi	r2,4
   14aa0:	10942504 	addi	r2,r2,20628
   14aa4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   14aa8:	00800134 	movhi	r2,4
   14aac:	10944004 	addi	r2,r2,20736
   14ab0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14ab4:	e03ffd05 	stb	zero,-12(fp)
   14ab8:	00001106 	br	14b00 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   14abc:	e0bffe17 	ldw	r2,-8(fp)
   14ac0:	e0ffff17 	ldw	r3,-4(fp)
   14ac4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   14ac8:	e0bffe17 	ldw	r2,-8(fp)
   14acc:	00c00fc4 	movi	r3,63
   14ad0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14ad4:	e0bffe17 	ldw	r2,-8(fp)
   14ad8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   14adc:	e0bffe17 	ldw	r2,-8(fp)
   14ae0:	10801b04 	addi	r2,r2,108
   14ae4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   14ae8:	e0bfff17 	ldw	r2,-4(fp)
   14aec:	10801b04 	addi	r2,r2,108
   14af0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   14af4:	e0bffd03 	ldbu	r2,-12(fp)
   14af8:	10800044 	addi	r2,r2,1
   14afc:	e0bffd05 	stb	r2,-12(fp)
   14b00:	e0bffd03 	ldbu	r2,-12(fp)
   14b04:	108002f0 	cmpltui	r2,r2,11
   14b08:	103fec1e 	bne	r2,zero,14abc <__alt_mem_Flash_flash_data+0xf4014abc>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   14b0c:	e0bffe17 	ldw	r2,-8(fp)
   14b10:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   14b14:	e0bffe17 	ldw	r2,-8(fp)
   14b18:	00c00fc4 	movi	r3,63
   14b1c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   14b20:	e0bffe17 	ldw	r2,-8(fp)
   14b24:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   14b28:	d0283515 	stw	zero,-24364(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   14b2c:	00800134 	movhi	r2,4
   14b30:	10942504 	addi	r2,r2,20628
   14b34:	d0a83915 	stw	r2,-24348(gp)
}
   14b38:	e037883a 	mov	sp,fp
   14b3c:	dfc00117 	ldw	ra,4(sp)
   14b40:	df000017 	ldw	fp,0(sp)
   14b44:	dec00204 	addi	sp,sp,8
   14b48:	f800283a 	ret

00014b4c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   14b4c:	defffd04 	addi	sp,sp,-12
   14b50:	df000215 	stw	fp,8(sp)
   14b54:	df000204 	addi	fp,sp,8
   14b58:	e13ffe15 	stw	r4,-8(fp)
   14b5c:	2805883a 	mov	r2,r5
   14b60:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14b64:	00000706 	br	14b84 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   14b68:	e0bffe17 	ldw	r2,-8(fp)
   14b6c:	10c00044 	addi	r3,r2,1
   14b70:	e0fffe15 	stw	r3,-8(fp)
   14b74:	10000005 	stb	zero,0(r2)
        size--;
   14b78:	e0bfff0b 	ldhu	r2,-4(fp)
   14b7c:	10bfffc4 	addi	r2,r2,-1
   14b80:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   14b84:	e0bfff0b 	ldhu	r2,-4(fp)
   14b88:	103ff71e 	bne	r2,zero,14b68 <__alt_mem_Flash_flash_data+0xf4014b68>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   14b8c:	e037883a 	mov	sp,fp
   14b90:	df000017 	ldw	fp,0(sp)
   14b94:	dec00104 	addi	sp,sp,4
   14b98:	f800283a 	ret

00014b9c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   14b9c:	defffc04 	addi	sp,sp,-16
   14ba0:	df000315 	stw	fp,12(sp)
   14ba4:	df000304 	addi	fp,sp,12
   14ba8:	e13ffd15 	stw	r4,-12(fp)
   14bac:	e17ffe15 	stw	r5,-8(fp)
   14bb0:	3005883a 	mov	r2,r6
   14bb4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   14bb8:	00000b06 	br	14be8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   14bbc:	e0bffd17 	ldw	r2,-12(fp)
   14bc0:	10c00044 	addi	r3,r2,1
   14bc4:	e0fffd15 	stw	r3,-12(fp)
   14bc8:	e0fffe17 	ldw	r3,-8(fp)
   14bcc:	19000044 	addi	r4,r3,1
   14bd0:	e13ffe15 	stw	r4,-8(fp)
   14bd4:	18c00003 	ldbu	r3,0(r3)
   14bd8:	10c00005 	stb	r3,0(r2)
        size--;
   14bdc:	e0bfff0b 	ldhu	r2,-4(fp)
   14be0:	10bfffc4 	addi	r2,r2,-1
   14be4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   14be8:	e0bfff0b 	ldhu	r2,-4(fp)
   14bec:	103ff31e 	bne	r2,zero,14bbc <__alt_mem_Flash_flash_data+0xf4014bbc>
        *pdest++ = *psrc++;
        size--;
    }
}
   14bf0:	e037883a 	mov	sp,fp
   14bf4:	df000017 	ldw	fp,0(sp)
   14bf8:	dec00104 	addi	sp,sp,4
   14bfc:	f800283a 	ret

00014c00 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   14c00:	defffb04 	addi	sp,sp,-20
   14c04:	dfc00415 	stw	ra,16(sp)
   14c08:	df000315 	stw	fp,12(sp)
   14c0c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14c10:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c14:	0005303a 	rdctl	r2,status
   14c18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c1c:	e0fffe17 	ldw	r3,-8(fp)
   14c20:	00bfff84 	movi	r2,-2
   14c24:	1884703a 	and	r2,r3,r2
   14c28:	1001703a 	wrctl	status,r2
  
  return context;
   14c2c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14c30:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   14c34:	d0a84003 	ldbu	r2,-24320(gp)
   14c38:	10803fcc 	andi	r2,r2,255
   14c3c:	10001a1e 	bne	r2,zero,14ca8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   14c40:	d0a83203 	ldbu	r2,-24376(gp)
   14c44:	10803fcc 	andi	r2,r2,255
   14c48:	1000171e 	bne	r2,zero,14ca8 <OS_Sched+0xa8>
            OS_SchedNew();
   14c4c:	0014ccc0 	call	14ccc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   14c50:	d0e83403 	ldbu	r3,-24368(gp)
   14c54:	d0a83443 	ldbu	r2,-24367(gp)
   14c58:	18c03fcc 	andi	r3,r3,255
   14c5c:	10803fcc 	andi	r2,r2,255
   14c60:	18801126 	beq	r3,r2,14ca8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   14c64:	d0a83403 	ldbu	r2,-24368(gp)
   14c68:	10c03fcc 	andi	r3,r2,255
   14c6c:	00800134 	movhi	r2,4
   14c70:	10956904 	addi	r2,r2,21924
   14c74:	18c7883a 	add	r3,r3,r3
   14c78:	18c7883a 	add	r3,r3,r3
   14c7c:	10c5883a 	add	r2,r2,r3
   14c80:	10800017 	ldw	r2,0(r2)
   14c84:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   14c88:	d0a83c17 	ldw	r2,-24336(gp)
   14c8c:	10c00e17 	ldw	r3,56(r2)
   14c90:	18c00044 	addi	r3,r3,1
   14c94:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   14c98:	d0a83717 	ldw	r2,-24356(gp)
   14c9c:	10800044 	addi	r2,r2,1
   14ca0:	d0a83715 	stw	r2,-24356(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   14ca4:	001ee080 	call	1ee08 <OSCtxSw>
   14ca8:	e0bffd17 	ldw	r2,-12(fp)
   14cac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cb0:	e0bfff17 	ldw	r2,-4(fp)
   14cb4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   14cb8:	e037883a 	mov	sp,fp
   14cbc:	dfc00117 	ldw	ra,4(sp)
   14cc0:	df000017 	ldw	fp,0(sp)
   14cc4:	dec00204 	addi	sp,sp,8
   14cc8:	f800283a 	ret

00014ccc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   14ccc:	defffe04 	addi	sp,sp,-8
   14cd0:	df000115 	stw	fp,4(sp)
   14cd4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   14cd8:	d0a83e03 	ldbu	r2,-24328(gp)
   14cdc:	10c03fcc 	andi	r3,r2,255
   14ce0:	008000b4 	movhi	r2,2
   14ce4:	10804504 	addi	r2,r2,276
   14ce8:	10c5883a 	add	r2,r2,r3
   14cec:	10800003 	ldbu	r2,0(r2)
   14cf0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   14cf4:	e0bfff03 	ldbu	r2,-4(fp)
   14cf8:	100490fa 	slli	r2,r2,3
   14cfc:	1009883a 	mov	r4,r2
   14d00:	e0ffff03 	ldbu	r3,-4(fp)
   14d04:	d0a83e44 	addi	r2,gp,-24327
   14d08:	1885883a 	add	r2,r3,r2
   14d0c:	10800003 	ldbu	r2,0(r2)
   14d10:	10c03fcc 	andi	r3,r2,255
   14d14:	008000b4 	movhi	r2,2
   14d18:	10804504 	addi	r2,r2,276
   14d1c:	10c5883a 	add	r2,r2,r3
   14d20:	10800003 	ldbu	r2,0(r2)
   14d24:	2085883a 	add	r2,r4,r2
   14d28:	d0a83405 	stb	r2,-24368(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   14d2c:	e037883a 	mov	sp,fp
   14d30:	df000017 	ldw	fp,0(sp)
   14d34:	dec00104 	addi	sp,sp,4
   14d38:	f800283a 	ret

00014d3c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   14d3c:	defffc04 	addi	sp,sp,-16
   14d40:	df000315 	stw	fp,12(sp)
   14d44:	df000304 	addi	fp,sp,12
   14d48:	e13ffe15 	stw	r4,-8(fp)
   14d4c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   14d50:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   14d54:	00000b06 	br	14d84 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   14d58:	e0bffe17 	ldw	r2,-8(fp)
   14d5c:	10c00044 	addi	r3,r2,1
   14d60:	e0fffe15 	stw	r3,-8(fp)
   14d64:	e0ffff17 	ldw	r3,-4(fp)
   14d68:	19000044 	addi	r4,r3,1
   14d6c:	e13fff15 	stw	r4,-4(fp)
   14d70:	18c00003 	ldbu	r3,0(r3)
   14d74:	10c00005 	stb	r3,0(r2)
        len++;
   14d78:	e0bffd03 	ldbu	r2,-12(fp)
   14d7c:	10800044 	addi	r2,r2,1
   14d80:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14d84:	e0bfff17 	ldw	r2,-4(fp)
   14d88:	10800003 	ldbu	r2,0(r2)
   14d8c:	10803fcc 	andi	r2,r2,255
   14d90:	103ff11e 	bne	r2,zero,14d58 <__alt_mem_Flash_flash_data+0xf4014d58>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   14d94:	e0bffe17 	ldw	r2,-8(fp)
   14d98:	10000005 	stb	zero,0(r2)
    return (len);
   14d9c:	e0bffd03 	ldbu	r2,-12(fp)
}
   14da0:	e037883a 	mov	sp,fp
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00104 	addi	sp,sp,4
   14dac:	f800283a 	ret

00014db0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   14db0:	defffd04 	addi	sp,sp,-12
   14db4:	df000215 	stw	fp,8(sp)
   14db8:	df000204 	addi	fp,sp,8
   14dbc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   14dc0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   14dc4:	00000606 	br	14de0 <OS_StrLen+0x30>
        psrc++;
   14dc8:	e0bfff17 	ldw	r2,-4(fp)
   14dcc:	10800044 	addi	r2,r2,1
   14dd0:	e0bfff15 	stw	r2,-4(fp)
        len++;
   14dd4:	e0bffe03 	ldbu	r2,-8(fp)
   14dd8:	10800044 	addi	r2,r2,1
   14ddc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   14de0:	e0bfff17 	ldw	r2,-4(fp)
   14de4:	10800003 	ldbu	r2,0(r2)
   14de8:	10803fcc 	andi	r2,r2,255
   14dec:	103ff61e 	bne	r2,zero,14dc8 <__alt_mem_Flash_flash_data+0xf4014dc8>
        psrc++;
        len++;
    }
    return (len);
   14df0:	e0bffe03 	ldbu	r2,-8(fp)
}
   14df4:	e037883a 	mov	sp,fp
   14df8:	df000017 	ldw	fp,0(sp)
   14dfc:	dec00104 	addi	sp,sp,4
   14e00:	f800283a 	ret

00014e04 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   14e04:	defffa04 	addi	sp,sp,-24
   14e08:	dfc00515 	stw	ra,20(sp)
   14e0c:	df000415 	stw	fp,16(sp)
   14e10:	df000404 	addi	fp,sp,16
   14e14:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e18:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e1c:	0005303a 	rdctl	r2,status
   14e20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e24:	e0fffd17 	ldw	r3,-12(fp)
   14e28:	00bfff84 	movi	r2,-2
   14e2c:	1884703a 	and	r2,r3,r2
   14e30:	1001703a 	wrctl	status,r2
  
  return context;
   14e34:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   14e38:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   14e3c:	d0a83317 	ldw	r2,-24372(gp)
   14e40:	10800044 	addi	r2,r2,1
   14e44:	d0a83315 	stw	r2,-24372(gp)
   14e48:	e0bffc17 	ldw	r2,-16(fp)
   14e4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e50:	e0bffe17 	ldw	r2,-8(fp)
   14e54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   14e58:	001f1000 	call	1f100 <OSTaskIdleHook>
    }
   14e5c:	003fef06 	br	14e1c <__alt_mem_Flash_flash_data+0xf4014e1c>

00014e60 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   14e60:	defff804 	addi	sp,sp,-32
   14e64:	dfc00715 	stw	ra,28(sp)
   14e68:	df000615 	stw	fp,24(sp)
   14e6c:	dc400515 	stw	r17,20(sp)
   14e70:	dc000415 	stw	r16,16(sp)
   14e74:	df000604 	addi	fp,sp,24
   14e78:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e7c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14e80:	00000206 	br	14e8c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   14e84:	01000044 	movi	r4,1
   14e88:	001b5980 	call	1b598 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   14e8c:	d0a84403 	ldbu	r2,-24304(gp)
   14e90:	10803fcc 	andi	r2,r2,255
   14e94:	103ffb26 	beq	r2,zero,14e84 <__alt_mem_Flash_flash_data+0xf4014e84>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   14e98:	d0e83817 	ldw	r3,-24352(gp)
   14e9c:	00947b34 	movhi	r2,20972
   14ea0:	10a147c4 	addi	r2,r2,-31457
   14ea4:	1888383a 	mulxuu	r4,r3,r2
   14ea8:	1885383a 	mul	r2,r3,r2
   14eac:	1021883a 	mov	r16,r2
   14eb0:	2023883a 	mov	r17,r4
   14eb4:	8804d17a 	srli	r2,r17,5
   14eb8:	d0a83815 	stw	r2,-24352(gp)
    if (OSIdleCtrMax == 0L) {
   14ebc:	d0a83817 	ldw	r2,-24352(gp)
   14ec0:	1000031e 	bne	r2,zero,14ed0 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   14ec4:	d0283a05 	stb	zero,-24344(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   14ec8:	01003fc4 	movi	r4,255
   14ecc:	001b1ec0 	call	1b1ec <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ed0:	0005303a 	rdctl	r2,status
   14ed4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ed8:	e0fffb17 	ldw	r3,-20(fp)
   14edc:	00bfff84 	movi	r2,-2
   14ee0:	1884703a 	and	r2,r3,r2
   14ee4:	1001703a 	wrctl	status,r2
  
  return context;
   14ee8:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   14eec:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   14ef0:	d0a83317 	ldw	r2,-24372(gp)
   14ef4:	d0a84515 	stw	r2,-24300(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   14ef8:	d0283315 	stw	zero,-24372(gp)
   14efc:	e0bffa17 	ldw	r2,-24(fp)
   14f00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f04:	e0bffc17 	ldw	r2,-16(fp)
   14f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   14f0c:	d0e84517 	ldw	r3,-24300(gp)
   14f10:	d0a83817 	ldw	r2,-24352(gp)
   14f14:	1885203a 	divu	r2,r3,r2
   14f18:	1007883a 	mov	r3,r2
   14f1c:	00801904 	movi	r2,100
   14f20:	10c5c83a 	sub	r2,r2,r3
   14f24:	d0a83a05 	stb	r2,-24344(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   14f28:	001f0900 	call	1f090 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   14f2c:	0014f3c0 	call	14f3c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   14f30:	0009883a 	mov	r4,zero
   14f34:	001b5980 	call	1b598 <OSTimeDly>
    }
   14f38:	003fe506 	br	14ed0 <__alt_mem_Flash_flash_data+0xf4014ed0>

00014f3c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   14f3c:	defffa04 	addi	sp,sp,-24
   14f40:	dfc00515 	stw	ra,20(sp)
   14f44:	df000415 	stw	fp,16(sp)
   14f48:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14f4c:	e03ffc05 	stb	zero,-16(fp)
   14f50:	00002406 	br	14fe4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   14f54:	e0fffc03 	ldbu	r3,-16(fp)
   14f58:	e0bffe04 	addi	r2,fp,-8
   14f5c:	1809883a 	mov	r4,r3
   14f60:	100b883a 	mov	r5,r2
   14f64:	001b0240 	call	1b024 <OSTaskStkChk>
   14f68:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   14f6c:	e0bffc43 	ldbu	r2,-15(fp)
   14f70:	1000191e 	bne	r2,zero,14fd8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   14f74:	e0fffc03 	ldbu	r3,-16(fp)
   14f78:	00800134 	movhi	r2,4
   14f7c:	10956904 	addi	r2,r2,21924
   14f80:	18c7883a 	add	r3,r3,r3
   14f84:	18c7883a 	add	r3,r3,r3
   14f88:	10c5883a 	add	r2,r2,r3
   14f8c:	10800017 	ldw	r2,0(r2)
   14f90:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   14f94:	e0bffd17 	ldw	r2,-12(fp)
   14f98:	10000f26 	beq	r2,zero,14fd8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   14f9c:	e0bffd17 	ldw	r2,-12(fp)
   14fa0:	10800060 	cmpeqi	r2,r2,1
   14fa4:	10000c1e 	bne	r2,zero,14fd8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   14fa8:	e0bffd17 	ldw	r2,-12(fp)
   14fac:	10c00217 	ldw	r3,8(r2)
   14fb0:	e0bffd17 	ldw	r2,-12(fp)
   14fb4:	10800317 	ldw	r2,12(r2)
   14fb8:	1085883a 	add	r2,r2,r2
   14fbc:	1085883a 	add	r2,r2,r2
   14fc0:	1887883a 	add	r3,r3,r2
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   14fcc:	e0ffff17 	ldw	r3,-4(fp)
   14fd0:	e0bffd17 	ldw	r2,-12(fp)
   14fd4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   14fd8:	e0bffc03 	ldbu	r2,-16(fp)
   14fdc:	10800044 	addi	r2,r2,1
   14fe0:	e0bffc05 	stb	r2,-16(fp)
   14fe4:	e0bffc03 	ldbu	r2,-16(fp)
   14fe8:	10800570 	cmpltui	r2,r2,21
   14fec:	103fd91e 	bne	r2,zero,14f54 <__alt_mem_Flash_flash_data+0xf4014f54>
#endif
                }
            }
        }
    }
}
   14ff0:	e037883a 	mov	sp,fp
   14ff4:	dfc00117 	ldw	ra,4(sp)
   14ff8:	df000017 	ldw	fp,0(sp)
   14ffc:	dec00204 	addi	sp,sp,8
   15000:	f800283a 	ret

00015004 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   15004:	defff204 	addi	sp,sp,-56
   15008:	dfc00d15 	stw	ra,52(sp)
   1500c:	df000c15 	stw	fp,48(sp)
   15010:	df000c04 	addi	fp,sp,48
   15014:	e17ffc15 	stw	r5,-16(fp)
   15018:	e1bffd15 	stw	r6,-12(fp)
   1501c:	3807883a 	mov	r3,r7
   15020:	e0800417 	ldw	r2,16(fp)
   15024:	e13ffb05 	stb	r4,-20(fp)
   15028:	e0fffe0d 	sth	r3,-8(fp)
   1502c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15030:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15034:	0005303a 	rdctl	r2,status
   15038:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1503c:	e0fff617 	ldw	r3,-40(fp)
   15040:	00bfff84 	movi	r2,-2
   15044:	1884703a 	and	r2,r3,r2
   15048:	1001703a 	wrctl	status,r2
  
  return context;
   1504c:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   15050:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   15054:	d0a83917 	ldw	r2,-24348(gp)
   15058:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   1505c:	e0bff517 	ldw	r2,-44(fp)
   15060:	10009326 	beq	r2,zero,152b0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   15064:	e0bff517 	ldw	r2,-44(fp)
   15068:	10800517 	ldw	r2,20(r2)
   1506c:	d0a83915 	stw	r2,-24348(gp)
   15070:	e0bff417 	ldw	r2,-48(fp)
   15074:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15078:	e0bff717 	ldw	r2,-36(fp)
   1507c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   15080:	e0bff517 	ldw	r2,-44(fp)
   15084:	e0fffc17 	ldw	r3,-16(fp)
   15088:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   1508c:	e0bff517 	ldw	r2,-44(fp)
   15090:	e0fffb03 	ldbu	r3,-20(fp)
   15094:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   15098:	e0bff517 	ldw	r2,-44(fp)
   1509c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   150a0:	e0bff517 	ldw	r2,-44(fp)
   150a4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   150a8:	e0bff517 	ldw	r2,-44(fp)
   150ac:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   150b0:	e0bff517 	ldw	r2,-44(fp)
   150b4:	e0c00317 	ldw	r3,12(fp)
   150b8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   150bc:	e0bff517 	ldw	r2,-44(fp)
   150c0:	e0c00217 	ldw	r3,8(fp)
   150c4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   150c8:	e0bff517 	ldw	r2,-44(fp)
   150cc:	e0fffd17 	ldw	r3,-12(fp)
   150d0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   150d4:	e0bff517 	ldw	r2,-44(fp)
   150d8:	e0ffff0b 	ldhu	r3,-4(fp)
   150dc:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   150e0:	e0bff517 	ldw	r2,-44(fp)
   150e4:	e0fffe0b 	ldhu	r3,-8(fp)
   150e8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   150ec:	e0bff517 	ldw	r2,-44(fp)
   150f0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   150f4:	e0bffb03 	ldbu	r2,-20(fp)
   150f8:	1004d0fa 	srli	r2,r2,3
   150fc:	1007883a 	mov	r3,r2
   15100:	e0bff517 	ldw	r2,-44(fp)
   15104:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15108:	e0bffb03 	ldbu	r2,-20(fp)
   1510c:	108001cc 	andi	r2,r2,7
   15110:	1007883a 	mov	r3,r2
   15114:	e0bff517 	ldw	r2,-44(fp)
   15118:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   1511c:	e0bff517 	ldw	r2,-44(fp)
   15120:	10800d03 	ldbu	r2,52(r2)
   15124:	10803fcc 	andi	r2,r2,255
   15128:	00c00044 	movi	r3,1
   1512c:	1884983a 	sll	r2,r3,r2
   15130:	1007883a 	mov	r3,r2
   15134:	e0bff517 	ldw	r2,-44(fp)
   15138:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   1513c:	e0bff517 	ldw	r2,-44(fp)
   15140:	10800cc3 	ldbu	r2,51(r2)
   15144:	10803fcc 	andi	r2,r2,255
   15148:	00c00044 	movi	r3,1
   1514c:	1884983a 	sll	r2,r3,r2
   15150:	1007883a 	mov	r3,r2
   15154:	e0bff517 	ldw	r2,-44(fp)
   15158:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   1515c:	e0bff517 	ldw	r2,-44(fp)
   15160:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   15164:	e0bff517 	ldw	r2,-44(fp)
   15168:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   1516c:	e0bff517 	ldw	r2,-44(fp)
   15170:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   15174:	e0bff517 	ldw	r2,-44(fp)
   15178:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   1517c:	e0bff517 	ldw	r2,-44(fp)
   15180:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   15184:	e0bff517 	ldw	r2,-44(fp)
   15188:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   1518c:	e0bff517 	ldw	r2,-44(fp)
   15190:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   15194:	e0bff517 	ldw	r2,-44(fp)
   15198:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   1519c:	e0bff517 	ldw	r2,-44(fp)
   151a0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   151a4:	e0bff517 	ldw	r2,-44(fp)
   151a8:	00c00fc4 	movi	r3,63
   151ac:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   151b0:	e0bff517 	ldw	r2,-44(fp)
   151b4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   151b8:	e13ff517 	ldw	r4,-44(fp)
   151bc:	001f11c0 	call	1f11c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   151c0:	e13ff517 	ldw	r4,-44(fp)
   151c4:	001f0340 	call	1f034 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151c8:	0005303a 	rdctl	r2,status
   151cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151d0:	e0fff817 	ldw	r3,-32(fp)
   151d4:	00bfff84 	movi	r2,-2
   151d8:	1884703a 	and	r2,r3,r2
   151dc:	1001703a 	wrctl	status,r2
  
  return context;
   151e0:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   151e4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   151e8:	e0fffb03 	ldbu	r3,-20(fp)
   151ec:	00800134 	movhi	r2,4
   151f0:	10956904 	addi	r2,r2,21924
   151f4:	18c7883a 	add	r3,r3,r3
   151f8:	18c7883a 	add	r3,r3,r3
   151fc:	10c5883a 	add	r2,r2,r3
   15200:	e0fff517 	ldw	r3,-44(fp)
   15204:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15208:	d0e83517 	ldw	r3,-24364(gp)
   1520c:	e0bff517 	ldw	r2,-44(fp)
   15210:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   15214:	e0bff517 	ldw	r2,-44(fp)
   15218:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1521c:	d0a83517 	ldw	r2,-24364(gp)
   15220:	10000326 	beq	r2,zero,15230 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   15224:	d0a83517 	ldw	r2,-24364(gp)
   15228:	e0fff517 	ldw	r3,-44(fp)
   1522c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15230:	e0bff517 	ldw	r2,-44(fp)
   15234:	d0a83515 	stw	r2,-24364(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15238:	e0bff517 	ldw	r2,-44(fp)
   1523c:	10c00d83 	ldbu	r3,54(r2)
   15240:	d0a83e03 	ldbu	r2,-24328(gp)
   15244:	1884b03a 	or	r2,r3,r2
   15248:	d0a83e05 	stb	r2,-24328(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1524c:	e0bff517 	ldw	r2,-44(fp)
   15250:	10800d03 	ldbu	r2,52(r2)
   15254:	10c03fcc 	andi	r3,r2,255
   15258:	e0bff517 	ldw	r2,-44(fp)
   1525c:	10800d03 	ldbu	r2,52(r2)
   15260:	11003fcc 	andi	r4,r2,255
   15264:	d0a83e44 	addi	r2,gp,-24327
   15268:	2085883a 	add	r2,r4,r2
   1526c:	11000003 	ldbu	r4,0(r2)
   15270:	e0bff517 	ldw	r2,-44(fp)
   15274:	10800d43 	ldbu	r2,53(r2)
   15278:	2084b03a 	or	r2,r4,r2
   1527c:	1009883a 	mov	r4,r2
   15280:	d0a83e44 	addi	r2,gp,-24327
   15284:	1885883a 	add	r2,r3,r2
   15288:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1528c:	d0a83a43 	ldbu	r2,-24343(gp)
   15290:	10800044 	addi	r2,r2,1
   15294:	d0a83a45 	stb	r2,-24343(gp)
   15298:	e0bff417 	ldw	r2,-48(fp)
   1529c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a0:	e0bff917 	ldw	r2,-28(fp)
   152a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   152a8:	0005883a 	mov	r2,zero
   152ac:	00000506 	br	152c4 <OS_TCBInit+0x2c0>
   152b0:	e0bff417 	ldw	r2,-48(fp)
   152b4:	e0bffa15 	stw	r2,-24(fp)
   152b8:	e0bffa17 	ldw	r2,-24(fp)
   152bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   152c0:	00801084 	movi	r2,66
}
   152c4:	e037883a 	mov	sp,fp
   152c8:	dfc00117 	ldw	ra,4(sp)
   152cc:	df000017 	ldw	fp,0(sp)
   152d0:	dec00204 	addi	sp,sp,8
   152d4:	f800283a 	ret

000152d8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   152d8:	defffe04 	addi	sp,sp,-8
   152dc:	df000115 	stw	fp,4(sp)
   152e0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   152e4:	d0a01c04 	addi	r2,gp,-32656
   152e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   152ec:	d0a01d04 	addi	r2,gp,-32652
   152f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   152f4:	d0a01e84 	addi	r2,gp,-32646
   152f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   152fc:	d0a01f04 	addi	r2,gp,-32644
   15300:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   15304:	d0a01e04 	addi	r2,gp,-32648
   15308:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1530c:	d0a01f84 	addi	r2,gp,-32642
   15310:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   15314:	d0a02004 	addi	r2,gp,-32640
   15318:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1531c:	d0a02084 	addi	r2,gp,-32638
   15320:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   15324:	d0a02104 	addi	r2,gp,-32636
   15328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1532c:	d0a02184 	addi	r2,gp,-32634
   15330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   15334:	d0a02204 	addi	r2,gp,-32632
   15338:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1533c:	d0a02284 	addi	r2,gp,-32630
   15340:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   15344:	d0a02304 	addi	r2,gp,-32628
   15348:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1534c:	d0a02384 	addi	r2,gp,-32626
   15350:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   15354:	d0a02404 	addi	r2,gp,-32624
   15358:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1535c:	d0a02484 	addi	r2,gp,-32622
   15360:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   15364:	d0a02504 	addi	r2,gp,-32620
   15368:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1536c:	d0a02584 	addi	r2,gp,-32618
   15370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   15374:	d0a02604 	addi	r2,gp,-32616
   15378:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1537c:	d0a02684 	addi	r2,gp,-32614
   15380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   15384:	d0a02704 	addi	r2,gp,-32612
   15388:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1538c:	d0a02784 	addi	r2,gp,-32610
   15390:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   15394:	d0a02804 	addi	r2,gp,-32608
   15398:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1539c:	d0a02884 	addi	r2,gp,-32606
   153a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   153a4:	d0a02904 	addi	r2,gp,-32604
   153a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   153ac:	d0a02984 	addi	r2,gp,-32602
   153b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   153b4:	d0a02a04 	addi	r2,gp,-32600
   153b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   153bc:	d0a02a84 	addi	r2,gp,-32598
   153c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   153c4:	d0a02b04 	addi	r2,gp,-32596
   153c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   153cc:	d0a02b84 	addi	r2,gp,-32594
   153d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   153d4:	d0a02c04 	addi	r2,gp,-32592
   153d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   153dc:	d0a02c84 	addi	r2,gp,-32590
   153e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   153e4:	d0a02d04 	addi	r2,gp,-32588
   153e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   153ec:	d0a02d84 	addi	r2,gp,-32586
   153f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   153f4:	d0a02e04 	addi	r2,gp,-32584
   153f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   153fc:	d0a02e84 	addi	r2,gp,-32582
   15400:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   15404:	d0a02f04 	addi	r2,gp,-32580
   15408:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1540c:	d0a02f84 	addi	r2,gp,-32578
   15410:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   15414:	d0a03004 	addi	r2,gp,-32576
   15418:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1541c:	d0a03084 	addi	r2,gp,-32574
   15420:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   15424:	d0a03104 	addi	r2,gp,-32572
   15428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1542c:	d0a03184 	addi	r2,gp,-32570
   15430:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   15434:	d0a03204 	addi	r2,gp,-32568
   15438:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1543c:	d0a03284 	addi	r2,gp,-32566
   15440:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   15444:	d0a03304 	addi	r2,gp,-32564
   15448:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1544c:	d0a03804 	addi	r2,gp,-32544
   15450:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15454:	e037883a 	mov	sp,fp
   15458:	df000017 	ldw	fp,0(sp)
   1545c:	dec00104 	addi	sp,sp,4
   15460:	f800283a 	ret

00015464 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15464:	defff204 	addi	sp,sp,-56
   15468:	df000d15 	stw	fp,52(sp)
   1546c:	df000d04 	addi	fp,sp,52
   15470:	e13ffc15 	stw	r4,-16(fp)
   15474:	2807883a 	mov	r3,r5
   15478:	3005883a 	mov	r2,r6
   1547c:	e1ffff15 	stw	r7,-4(fp)
   15480:	e0fffd0d 	sth	r3,-12(fp)
   15484:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15488:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1548c:	e0bfff17 	ldw	r2,-4(fp)
   15490:	1000021e 	bne	r2,zero,1549c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15494:	0005883a 	mov	r2,zero
   15498:	0000b006 	br	1575c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1549c:	e0bffc17 	ldw	r2,-16(fp)
   154a0:	1000051e 	bne	r2,zero,154b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   154a4:	e0bfff17 	ldw	r2,-4(fp)
   154a8:	00c01b84 	movi	r3,110
   154ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   154b0:	0005883a 	mov	r2,zero
   154b4:	0000a906 	br	1575c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   154b8:	e0bffc17 	ldw	r2,-16(fp)
   154bc:	10800003 	ldbu	r2,0(r2)
   154c0:	10803fcc 	andi	r2,r2,255
   154c4:	10800160 	cmpeqi	r2,r2,5
   154c8:	1000051e 	bne	r2,zero,154e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   154cc:	e0bfff17 	ldw	r2,-4(fp)
   154d0:	00c00044 	movi	r3,1
   154d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   154d8:	0005883a 	mov	r2,zero
   154dc:	00009f06 	br	1575c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   154e0:	e0fffe03 	ldbu	r3,-8(fp)
   154e4:	00bfe004 	movi	r2,-128
   154e8:	1884703a 	and	r2,r3,r2
   154ec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   154f0:	e0bff503 	ldbu	r2,-44(fp)
   154f4:	10000626 	beq	r2,zero,15510 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   154f8:	e0bffe03 	ldbu	r2,-8(fp)
   154fc:	10801fcc 	andi	r2,r2,127
   15500:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15504:	00800044 	movi	r2,1
   15508:	e0bff385 	stb	r2,-50(fp)
   1550c:	00000106 	br	15514 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   15510:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15514:	e0bfff17 	ldw	r2,-4(fp)
   15518:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1551c:	0005303a 	rdctl	r2,status
   15520:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15524:	e0fff617 	ldw	r3,-40(fp)
   15528:	00bfff84 	movi	r2,-2
   1552c:	1884703a 	and	r2,r3,r2
   15530:	1001703a 	wrctl	status,r2
  
  return context;
   15534:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   15538:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1553c:	e0bffe03 	ldbu	r2,-8(fp)
   15540:	10c00060 	cmpeqi	r3,r2,1
   15544:	18005f1e 	bne	r3,zero,156c4 <OSFlagAccept+0x260>
   15548:	10c00088 	cmpgei	r3,r2,2
   1554c:	1800021e 	bne	r3,zero,15558 <OSFlagAccept+0xf4>
   15550:	10003f26 	beq	r2,zero,15650 <OSFlagAccept+0x1ec>
   15554:	00007706 	br	15734 <OSFlagAccept+0x2d0>
   15558:	10c000a0 	cmpeqi	r3,r2,2
   1555c:	1800031e 	bne	r3,zero,1556c <OSFlagAccept+0x108>
   15560:	108000e0 	cmpeqi	r2,r2,3
   15564:	10001e1e 	bne	r2,zero,155e0 <OSFlagAccept+0x17c>
   15568:	00007206 	br	15734 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1556c:	e0bffc17 	ldw	r2,-16(fp)
   15570:	10c0020b 	ldhu	r3,8(r2)
   15574:	e0bffd0b 	ldhu	r2,-12(fp)
   15578:	1884703a 	and	r2,r3,r2
   1557c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15580:	e0fff30b 	ldhu	r3,-52(fp)
   15584:	e0bffd0b 	ldhu	r2,-12(fp)
   15588:	18800d1e 	bne	r3,r2,155c0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1558c:	e0bff383 	ldbu	r2,-50(fp)
   15590:	10800058 	cmpnei	r2,r2,1
   15594:	10000d1e 	bne	r2,zero,155cc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15598:	e0bffc17 	ldw	r2,-16(fp)
   1559c:	1080020b 	ldhu	r2,8(r2)
   155a0:	1007883a 	mov	r3,r2
   155a4:	e0bff30b 	ldhu	r2,-52(fp)
   155a8:	0084303a 	nor	r2,zero,r2
   155ac:	1884703a 	and	r2,r3,r2
   155b0:	1007883a 	mov	r3,r2
   155b4:	e0bffc17 	ldw	r2,-16(fp)
   155b8:	10c0020d 	sth	r3,8(r2)
   155bc:	00000306 	br	155cc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   155c0:	e0bfff17 	ldw	r2,-4(fp)
   155c4:	00c01c04 	movi	r3,112
   155c8:	10c00005 	stb	r3,0(r2)
   155cc:	e0bff417 	ldw	r2,-48(fp)
   155d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155d4:	e0bff717 	ldw	r2,-36(fp)
   155d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   155dc:	00005e06 	br	15758 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   155e0:	e0bffc17 	ldw	r2,-16(fp)
   155e4:	10c0020b 	ldhu	r3,8(r2)
   155e8:	e0bffd0b 	ldhu	r2,-12(fp)
   155ec:	1884703a 	and	r2,r3,r2
   155f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   155f4:	e0bff30b 	ldhu	r2,-52(fp)
   155f8:	10000d26 	beq	r2,zero,15630 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   155fc:	e0bff383 	ldbu	r2,-50(fp)
   15600:	10800058 	cmpnei	r2,r2,1
   15604:	10000d1e 	bne	r2,zero,1563c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15608:	e0bffc17 	ldw	r2,-16(fp)
   1560c:	1080020b 	ldhu	r2,8(r2)
   15610:	1007883a 	mov	r3,r2
   15614:	e0bff30b 	ldhu	r2,-52(fp)
   15618:	0084303a 	nor	r2,zero,r2
   1561c:	1884703a 	and	r2,r3,r2
   15620:	1007883a 	mov	r3,r2
   15624:	e0bffc17 	ldw	r2,-16(fp)
   15628:	10c0020d 	sth	r3,8(r2)
   1562c:	00000306 	br	1563c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15630:	e0bfff17 	ldw	r2,-4(fp)
   15634:	00c01c04 	movi	r3,112
   15638:	10c00005 	stb	r3,0(r2)
   1563c:	e0bff417 	ldw	r2,-48(fp)
   15640:	e0bff815 	stw	r2,-32(fp)
   15644:	e0bff817 	ldw	r2,-32(fp)
   15648:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1564c:	00004206 	br	15758 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15650:	e0bffc17 	ldw	r2,-16(fp)
   15654:	1080020b 	ldhu	r2,8(r2)
   15658:	0084303a 	nor	r2,zero,r2
   1565c:	1007883a 	mov	r3,r2
   15660:	e0bffd0b 	ldhu	r2,-12(fp)
   15664:	1884703a 	and	r2,r3,r2
   15668:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1566c:	e0fff30b 	ldhu	r3,-52(fp)
   15670:	e0bffd0b 	ldhu	r2,-12(fp)
   15674:	18800b1e 	bne	r3,r2,156a4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15678:	e0bff383 	ldbu	r2,-50(fp)
   1567c:	10800058 	cmpnei	r2,r2,1
   15680:	10000b1e 	bne	r2,zero,156b0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15684:	e0bffc17 	ldw	r2,-16(fp)
   15688:	10c0020b 	ldhu	r3,8(r2)
   1568c:	e0bff30b 	ldhu	r2,-52(fp)
   15690:	1884b03a 	or	r2,r3,r2
   15694:	1007883a 	mov	r3,r2
   15698:	e0bffc17 	ldw	r2,-16(fp)
   1569c:	10c0020d 	sth	r3,8(r2)
   156a0:	00000306 	br	156b0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   156a4:	e0bfff17 	ldw	r2,-4(fp)
   156a8:	00c01c04 	movi	r3,112
   156ac:	10c00005 	stb	r3,0(r2)
   156b0:	e0bff417 	ldw	r2,-48(fp)
   156b4:	e0bff915 	stw	r2,-28(fp)
   156b8:	e0bff917 	ldw	r2,-28(fp)
   156bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   156c0:	00002506 	br	15758 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   156c4:	e0bffc17 	ldw	r2,-16(fp)
   156c8:	1080020b 	ldhu	r2,8(r2)
   156cc:	0084303a 	nor	r2,zero,r2
   156d0:	1007883a 	mov	r3,r2
   156d4:	e0bffd0b 	ldhu	r2,-12(fp)
   156d8:	1884703a 	and	r2,r3,r2
   156dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   156e0:	e0bff30b 	ldhu	r2,-52(fp)
   156e4:	10000b26 	beq	r2,zero,15714 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   156e8:	e0bff383 	ldbu	r2,-50(fp)
   156ec:	10800058 	cmpnei	r2,r2,1
   156f0:	10000b1e 	bne	r2,zero,15720 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   156f4:	e0bffc17 	ldw	r2,-16(fp)
   156f8:	10c0020b 	ldhu	r3,8(r2)
   156fc:	e0bff30b 	ldhu	r2,-52(fp)
   15700:	1884b03a 	or	r2,r3,r2
   15704:	1007883a 	mov	r3,r2
   15708:	e0bffc17 	ldw	r2,-16(fp)
   1570c:	10c0020d 	sth	r3,8(r2)
   15710:	00000306 	br	15720 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	00c01c04 	movi	r3,112
   1571c:	10c00005 	stb	r3,0(r2)
   15720:	e0bff417 	ldw	r2,-48(fp)
   15724:	e0bffa15 	stw	r2,-24(fp)
   15728:	e0bffa17 	ldw	r2,-24(fp)
   1572c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15730:	00000906 	br	15758 <OSFlagAccept+0x2f4>
   15734:	e0bff417 	ldw	r2,-48(fp)
   15738:	e0bffb15 	stw	r2,-20(fp)
   1573c:	e0bffb17 	ldw	r2,-20(fp)
   15740:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15744:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	00c01bc4 	movi	r3,111
   15750:	10c00005 	stb	r3,0(r2)
             break;
   15754:	0001883a 	nop
    }
    return (flags_rdy);
   15758:	e0bff30b 	ldhu	r2,-52(fp)
}
   1575c:	e037883a 	mov	sp,fp
   15760:	df000017 	ldw	fp,0(sp)
   15764:	dec00104 	addi	sp,sp,4
   15768:	f800283a 	ret

0001576c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1576c:	defff804 	addi	sp,sp,-32
   15770:	df000715 	stw	fp,28(sp)
   15774:	df000704 	addi	fp,sp,28
   15778:	2005883a 	mov	r2,r4
   1577c:	e17fff15 	stw	r5,-4(fp)
   15780:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15784:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15788:	e0bfff17 	ldw	r2,-4(fp)
   1578c:	1000021e 	bne	r2,zero,15798 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   15790:	0005883a 	mov	r2,zero
   15794:	00003b06 	br	15884 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   15798:	008000b4 	movhi	r2,2
   1579c:	1090c804 	addi	r2,r2,17184
   157a0:	10800003 	ldbu	r2,0(r2)
   157a4:	10803fcc 	andi	r2,r2,255
   157a8:	10000526 	beq	r2,zero,157c0 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   157ac:	e0bfff17 	ldw	r2,-4(fp)
   157b0:	00c00404 	movi	r3,16
   157b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   157b8:	0005883a 	mov	r2,zero
   157bc:	00003106 	br	15884 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157c0:	0005303a 	rdctl	r2,status
   157c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157c8:	e0fffb17 	ldw	r3,-20(fp)
   157cc:	00bfff84 	movi	r2,-2
   157d0:	1884703a 	and	r2,r3,r2
   157d4:	1001703a 	wrctl	status,r2
  
  return context;
   157d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   157dc:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   157e0:	008000b4 	movhi	r2,2
   157e4:	1090cb04 	addi	r2,r2,17196
   157e8:	10800017 	ldw	r2,0(r2)
   157ec:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   157f0:	e0bffa17 	ldw	r2,-24(fp)
   157f4:	10001b26 	beq	r2,zero,15864 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   157f8:	008000b4 	movhi	r2,2
   157fc:	1090cb04 	addi	r2,r2,17196
   15800:	10800017 	ldw	r2,0(r2)
   15804:	10c00117 	ldw	r3,4(r2)
   15808:	008000b4 	movhi	r2,2
   1580c:	1090cb04 	addi	r2,r2,17196
   15810:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   15814:	e0bffa17 	ldw	r2,-24(fp)
   15818:	00c00144 	movi	r3,5
   1581c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   15820:	e0bffa17 	ldw	r2,-24(fp)
   15824:	e0fffe0b 	ldhu	r3,-8(fp)
   15828:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1582c:	e0bffa17 	ldw	r2,-24(fp)
   15830:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   15834:	e0bffa17 	ldw	r2,-24(fp)
   15838:	00c00fc4 	movi	r3,63
   1583c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15840:	e0bffa17 	ldw	r2,-24(fp)
   15844:	100002c5 	stb	zero,11(r2)
   15848:	e0bff917 	ldw	r2,-28(fp)
   1584c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15850:	e0bffc17 	ldw	r2,-16(fp)
   15854:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   15858:	e0bfff17 	ldw	r2,-4(fp)
   1585c:	10000005 	stb	zero,0(r2)
   15860:	00000706 	br	15880 <OSFlagCreate+0x114>
   15864:	e0bff917 	ldw	r2,-28(fp)
   15868:	e0bffd15 	stw	r2,-12(fp)
   1586c:	e0bffd17 	ldw	r2,-12(fp)
   15870:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   15874:	e0bfff17 	ldw	r2,-4(fp)
   15878:	00c01c84 	movi	r3,114
   1587c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   15880:	e0bffa17 	ldw	r2,-24(fp)
}
   15884:	e037883a 	mov	sp,fp
   15888:	df000017 	ldw	fp,0(sp)
   1588c:	dec00104 	addi	sp,sp,4
   15890:	f800283a 	ret

00015894 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   15894:	defff204 	addi	sp,sp,-56
   15898:	dfc00d15 	stw	ra,52(sp)
   1589c:	df000c15 	stw	fp,48(sp)
   158a0:	df000c04 	addi	fp,sp,48
   158a4:	e13ffd15 	stw	r4,-12(fp)
   158a8:	2805883a 	mov	r2,r5
   158ac:	e1bfff15 	stw	r6,-4(fp)
   158b0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   158b4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   158b8:	e0bfff17 	ldw	r2,-4(fp)
   158bc:	1000021e 	bne	r2,zero,158c8 <OSFlagDel+0x34>
        return (pgrp);
   158c0:	e0bffd17 	ldw	r2,-12(fp)
   158c4:	00008a06 	br	15af0 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   158c8:	e0bffd17 	ldw	r2,-12(fp)
   158cc:	1000051e 	bne	r2,zero,158e4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   158d0:	e0bfff17 	ldw	r2,-4(fp)
   158d4:	00c01b84 	movi	r3,110
   158d8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   158dc:	e0bffd17 	ldw	r2,-12(fp)
   158e0:	00008306 	br	15af0 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   158e4:	008000b4 	movhi	r2,2
   158e8:	1090c804 	addi	r2,r2,17184
   158ec:	10800003 	ldbu	r2,0(r2)
   158f0:	10803fcc 	andi	r2,r2,255
   158f4:	10000526 	beq	r2,zero,1590c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   158f8:	e0bfff17 	ldw	r2,-4(fp)
   158fc:	00c003c4 	movi	r3,15
   15900:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	00007906 	br	15af0 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1590c:	e0bffd17 	ldw	r2,-12(fp)
   15910:	10800003 	ldbu	r2,0(r2)
   15914:	10803fcc 	andi	r2,r2,255
   15918:	10800160 	cmpeqi	r2,r2,5
   1591c:	1000051e 	bne	r2,zero,15934 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   15920:	e0bfff17 	ldw	r2,-4(fp)
   15924:	00c00044 	movi	r3,1
   15928:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1592c:	e0bffd17 	ldw	r2,-12(fp)
   15930:	00006f06 	br	15af0 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15934:	0005303a 	rdctl	r2,status
   15938:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1593c:	e0fff817 	ldw	r3,-32(fp)
   15940:	00bfff84 	movi	r2,-2
   15944:	1884703a 	and	r2,r3,r2
   15948:	1001703a 	wrctl	status,r2
  
  return context;
   1594c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15950:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   15954:	e0bffd17 	ldw	r2,-12(fp)
   15958:	10800117 	ldw	r2,4(r2)
   1595c:	10000326 	beq	r2,zero,1596c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15960:	00800044 	movi	r2,1
   15964:	e0bff405 	stb	r2,-48(fp)
   15968:	00000106 	br	15970 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1596c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   15970:	e0bffe03 	ldbu	r2,-8(fp)
   15974:	10000326 	beq	r2,zero,15984 <OSFlagDel+0xf0>
   15978:	10800060 	cmpeqi	r2,r2,1
   1597c:	1000271e 	bne	r2,zero,15a1c <OSFlagDel+0x188>
   15980:	00005006 	br	15ac4 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   15984:	e0bff403 	ldbu	r2,-48(fp)
   15988:	10001a1e 	bne	r2,zero,159f4 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1598c:	e0bffd17 	ldw	r2,-12(fp)
   15990:	00c00fc4 	movi	r3,63
   15994:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15998:	e0bffd17 	ldw	r2,-12(fp)
   1599c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   159a0:	e0bffd17 	ldw	r2,-12(fp)
   159a4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   159a8:	008000b4 	movhi	r2,2
   159ac:	1090cb04 	addi	r2,r2,17196
   159b0:	10c00017 	ldw	r3,0(r2)
   159b4:	e0bffd17 	ldw	r2,-12(fp)
   159b8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   159bc:	e0bffd17 	ldw	r2,-12(fp)
   159c0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   159c4:	008000b4 	movhi	r2,2
   159c8:	1090cb04 	addi	r2,r2,17196
   159cc:	e0fffd17 	ldw	r3,-12(fp)
   159d0:	10c00015 	stw	r3,0(r2)
   159d4:	e0bff717 	ldw	r2,-36(fp)
   159d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159dc:	e0bff917 	ldw	r2,-28(fp)
   159e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   159e4:	e0bfff17 	ldw	r2,-4(fp)
   159e8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   159ec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   159f0:	00003e06 	br	15aec <OSFlagDel+0x258>
   159f4:	e0bff717 	ldw	r2,-36(fp)
   159f8:	e0bffa15 	stw	r2,-24(fp)
   159fc:	e0bffa17 	ldw	r2,-24(fp)
   15a00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   15a04:	e0bfff17 	ldw	r2,-4(fp)
   15a08:	00c01244 	movi	r3,73
   15a0c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   15a10:	e0bffd17 	ldw	r2,-12(fp)
   15a14:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15a18:	00003406 	br	15aec <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   15a1c:	e0bffd17 	ldw	r2,-12(fp)
   15a20:	10800117 	ldw	r2,4(r2)
   15a24:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a28:	00000606 	br	15a44 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   15a2c:	e13ff517 	ldw	r4,-44(fp)
   15a30:	000b883a 	mov	r5,zero
   15a34:	0016ad00 	call	16ad0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   15a38:	e0bff517 	ldw	r2,-44(fp)
   15a3c:	10800017 	ldw	r2,0(r2)
   15a40:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   15a44:	e0bff517 	ldw	r2,-44(fp)
   15a48:	103ff81e 	bne	r2,zero,15a2c <__alt_mem_Flash_flash_data+0xf4015a2c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   15a4c:	e0bffd17 	ldw	r2,-12(fp)
   15a50:	00c00fc4 	movi	r3,63
   15a54:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   15a58:	e0bffd17 	ldw	r2,-12(fp)
   15a5c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   15a60:	e0bffd17 	ldw	r2,-12(fp)
   15a64:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   15a68:	008000b4 	movhi	r2,2
   15a6c:	1090cb04 	addi	r2,r2,17196
   15a70:	10c00017 	ldw	r3,0(r2)
   15a74:	e0bffd17 	ldw	r2,-12(fp)
   15a78:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   15a7c:	e0bffd17 	ldw	r2,-12(fp)
   15a80:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   15a84:	008000b4 	movhi	r2,2
   15a88:	1090cb04 	addi	r2,r2,17196
   15a8c:	e0fffd17 	ldw	r3,-12(fp)
   15a90:	10c00015 	stw	r3,0(r2)
   15a94:	e0bff717 	ldw	r2,-36(fp)
   15a98:	e0bffb15 	stw	r2,-20(fp)
   15a9c:	e0bffb17 	ldw	r2,-20(fp)
   15aa0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15aa4:	e0bff403 	ldbu	r2,-48(fp)
   15aa8:	10800058 	cmpnei	r2,r2,1
   15aac:	1000011e 	bne	r2,zero,15ab4 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15ab0:	0014c000 	call	14c00 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   15abc:	e03ff615 	stw	zero,-40(fp)
             break;
   15ac0:	00000a06 	br	15aec <OSFlagDel+0x258>
   15ac4:	e0bff717 	ldw	r2,-36(fp)
   15ac8:	e0bffc15 	stw	r2,-16(fp)
   15acc:	e0bffc17 	ldw	r2,-16(fp)
   15ad0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   15ad4:	e0bfff17 	ldw	r2,-4(fp)
   15ad8:	00c001c4 	movi	r3,7
   15adc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   15ae0:	e0bffd17 	ldw	r2,-12(fp)
   15ae4:	e0bff615 	stw	r2,-40(fp)
             break;
   15ae8:	0001883a 	nop
    }
    return (pgrp_return);
   15aec:	e0bff617 	ldw	r2,-40(fp)
}
   15af0:	e037883a 	mov	sp,fp
   15af4:	dfc00117 	ldw	ra,4(sp)
   15af8:	df000017 	ldw	fp,0(sp)
   15afc:	dec00204 	addi	sp,sp,8
   15b00:	f800283a 	ret

00015b04 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15b04:	defff604 	addi	sp,sp,-40
   15b08:	dfc00915 	stw	ra,36(sp)
   15b0c:	df000815 	stw	fp,32(sp)
   15b10:	df000804 	addi	fp,sp,32
   15b14:	e13ffd15 	stw	r4,-12(fp)
   15b18:	e17ffe15 	stw	r5,-8(fp)
   15b1c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15b20:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15b24:	e0bfff17 	ldw	r2,-4(fp)
   15b28:	1000021e 	bne	r2,zero,15b34 <OSFlagNameGet+0x30>
        return (0);
   15b2c:	0005883a 	mov	r2,zero
   15b30:	00003b06 	br	15c20 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15b34:	e0bffd17 	ldw	r2,-12(fp)
   15b38:	1000051e 	bne	r2,zero,15b50 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15b3c:	e0bfff17 	ldw	r2,-4(fp)
   15b40:	00c01b84 	movi	r3,110
   15b44:	10c00005 	stb	r3,0(r2)
        return (0);
   15b48:	0005883a 	mov	r2,zero
   15b4c:	00003406 	br	15c20 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15b50:	e0bffe17 	ldw	r2,-8(fp)
   15b54:	1000051e 	bne	r2,zero,15b6c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	00c00304 	movi	r3,12
   15b60:	10c00005 	stb	r3,0(r2)
        return (0);
   15b64:	0005883a 	mov	r2,zero
   15b68:	00002d06 	br	15c20 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15b6c:	008000b4 	movhi	r2,2
   15b70:	1090c804 	addi	r2,r2,17184
   15b74:	10800003 	ldbu	r2,0(r2)
   15b78:	10803fcc 	andi	r2,r2,255
   15b7c:	10000526 	beq	r2,zero,15b94 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   15b80:	e0bfff17 	ldw	r2,-4(fp)
   15b84:	00c00444 	movi	r3,17
   15b88:	10c00005 	stb	r3,0(r2)
        return (0);
   15b8c:	0005883a 	mov	r2,zero
   15b90:	00002306 	br	15c20 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b94:	0005303a 	rdctl	r2,status
   15b98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b9c:	e0fffa17 	ldw	r3,-24(fp)
   15ba0:	00bfff84 	movi	r2,-2
   15ba4:	1884703a 	and	r2,r3,r2
   15ba8:	1001703a 	wrctl	status,r2
  
  return context;
   15bac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15bb0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15bb4:	e0bffd17 	ldw	r2,-12(fp)
   15bb8:	10800003 	ldbu	r2,0(r2)
   15bbc:	10803fcc 	andi	r2,r2,255
   15bc0:	10800160 	cmpeqi	r2,r2,5
   15bc4:	1000091e 	bne	r2,zero,15bec <OSFlagNameGet+0xe8>
   15bc8:	e0bff817 	ldw	r2,-32(fp)
   15bcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15bd0:	e0bffb17 	ldw	r2,-20(fp)
   15bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15bd8:	e0bfff17 	ldw	r2,-4(fp)
   15bdc:	00c00044 	movi	r3,1
   15be0:	10c00005 	stb	r3,0(r2)
        return (0);
   15be4:	0005883a 	mov	r2,zero
   15be8:	00000d06 	br	15c20 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   15bec:	e0bffd17 	ldw	r2,-12(fp)
   15bf0:	10800284 	addi	r2,r2,10
   15bf4:	e13ffe17 	ldw	r4,-8(fp)
   15bf8:	100b883a 	mov	r5,r2
   15bfc:	0014d3c0 	call	14d3c <OS_StrCopy>
   15c00:	e0bff905 	stb	r2,-28(fp)
   15c04:	e0bff817 	ldw	r2,-32(fp)
   15c08:	e0bffc15 	stw	r2,-16(fp)
   15c0c:	e0bffc17 	ldw	r2,-16(fp)
   15c10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15c14:	e0bfff17 	ldw	r2,-4(fp)
   15c18:	10000005 	stb	zero,0(r2)
    return (len);
   15c1c:	e0bff903 	ldbu	r2,-28(fp)
}
   15c20:	e037883a 	mov	sp,fp
   15c24:	dfc00117 	ldw	ra,4(sp)
   15c28:	df000017 	ldw	fp,0(sp)
   15c2c:	dec00204 	addi	sp,sp,8
   15c30:	f800283a 	ret

00015c34 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   15c34:	defff504 	addi	sp,sp,-44
   15c38:	dfc00a15 	stw	ra,40(sp)
   15c3c:	df000915 	stw	fp,36(sp)
   15c40:	df000904 	addi	fp,sp,36
   15c44:	e13ffd15 	stw	r4,-12(fp)
   15c48:	e17ffe15 	stw	r5,-8(fp)
   15c4c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15c50:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15c54:	e0bfff17 	ldw	r2,-4(fp)
   15c58:	1000011e 	bne	r2,zero,15c60 <OSFlagNameSet+0x2c>
        return;
   15c5c:	00004406 	br	15d70 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   15c60:	e0bffd17 	ldw	r2,-12(fp)
   15c64:	1000041e 	bne	r2,zero,15c78 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15c68:	e0bfff17 	ldw	r2,-4(fp)
   15c6c:	00c01b84 	movi	r3,110
   15c70:	10c00005 	stb	r3,0(r2)
        return;
   15c74:	00003e06 	br	15d70 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15c78:	e0bffe17 	ldw	r2,-8(fp)
   15c7c:	1000041e 	bne	r2,zero,15c90 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   15c80:	e0bfff17 	ldw	r2,-4(fp)
   15c84:	00c00304 	movi	r3,12
   15c88:	10c00005 	stb	r3,0(r2)
        return;
   15c8c:	00003806 	br	15d70 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15c90:	008000b4 	movhi	r2,2
   15c94:	1090c804 	addi	r2,r2,17184
   15c98:	10800003 	ldbu	r2,0(r2)
   15c9c:	10803fcc 	andi	r2,r2,255
   15ca0:	10000426 	beq	r2,zero,15cb4 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   15ca4:	e0bfff17 	ldw	r2,-4(fp)
   15ca8:	00c00484 	movi	r3,18
   15cac:	10c00005 	stb	r3,0(r2)
        return;
   15cb0:	00002f06 	br	15d70 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cb4:	0005303a 	rdctl	r2,status
   15cb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cbc:	e0fff917 	ldw	r3,-28(fp)
   15cc0:	00bfff84 	movi	r2,-2
   15cc4:	1884703a 	and	r2,r3,r2
   15cc8:	1001703a 	wrctl	status,r2
  
  return context;
   15ccc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15cd0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   15cd4:	e0bffd17 	ldw	r2,-12(fp)
   15cd8:	10800003 	ldbu	r2,0(r2)
   15cdc:	10803fcc 	andi	r2,r2,255
   15ce0:	10800160 	cmpeqi	r2,r2,5
   15ce4:	1000081e 	bne	r2,zero,15d08 <OSFlagNameSet+0xd4>
   15ce8:	e0bff717 	ldw	r2,-36(fp)
   15cec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cf0:	e0bffa17 	ldw	r2,-24(fp)
   15cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   15cf8:	e0bfff17 	ldw	r2,-4(fp)
   15cfc:	00c00044 	movi	r3,1
   15d00:	10c00005 	stb	r3,0(r2)
        return;
   15d04:	00001a06 	br	15d70 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15d08:	e13ffe17 	ldw	r4,-8(fp)
   15d0c:	0014db00 	call	14db0 <OS_StrLen>
   15d10:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   15d14:	e0bff803 	ldbu	r2,-32(fp)
   15d18:	10800830 	cmpltui	r2,r2,32
   15d1c:	1000081e 	bne	r2,zero,15d40 <OSFlagNameSet+0x10c>
   15d20:	e0bff717 	ldw	r2,-36(fp)
   15d24:	e0bffb15 	stw	r2,-20(fp)
   15d28:	e0bffb17 	ldw	r2,-20(fp)
   15d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   15d30:	e0bfff17 	ldw	r2,-4(fp)
   15d34:	00c01cc4 	movi	r3,115
   15d38:	10c00005 	stb	r3,0(r2)
        return;
   15d3c:	00000c06 	br	15d70 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   15d40:	e0bffd17 	ldw	r2,-12(fp)
   15d44:	10800284 	addi	r2,r2,10
   15d48:	1009883a 	mov	r4,r2
   15d4c:	e17ffe17 	ldw	r5,-8(fp)
   15d50:	0014d3c0 	call	14d3c <OS_StrCopy>
   15d54:	e0bff717 	ldw	r2,-36(fp)
   15d58:	e0bffc15 	stw	r2,-16(fp)
   15d5c:	e0bffc17 	ldw	r2,-16(fp)
   15d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15d64:	e0bfff17 	ldw	r2,-4(fp)
   15d68:	10000005 	stb	zero,0(r2)
    return;
   15d6c:	0001883a 	nop
}
   15d70:	e037883a 	mov	sp,fp
   15d74:	dfc00117 	ldw	ra,4(sp)
   15d78:	df000017 	ldw	fp,0(sp)
   15d7c:	dec00204 	addi	sp,sp,8
   15d80:	f800283a 	ret

00015d84 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   15d84:	deffe204 	addi	sp,sp,-120
   15d88:	dfc01d15 	stw	ra,116(sp)
   15d8c:	df001c15 	stw	fp,112(sp)
   15d90:	df001c04 	addi	fp,sp,112
   15d94:	e13ffc15 	stw	r4,-16(fp)
   15d98:	2809883a 	mov	r4,r5
   15d9c:	3007883a 	mov	r3,r6
   15da0:	3805883a 	mov	r2,r7
   15da4:	e13ffd0d 	sth	r4,-12(fp)
   15da8:	e0fffe05 	stb	r3,-8(fp)
   15dac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15db0:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15db4:	e0800217 	ldw	r2,8(fp)
   15db8:	1000021e 	bne	r2,zero,15dc4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   15dbc:	0005883a 	mov	r2,zero
   15dc0:	00016706 	br	16360 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15dc4:	e0bffc17 	ldw	r2,-16(fp)
   15dc8:	1000051e 	bne	r2,zero,15de0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15dcc:	e0800217 	ldw	r2,8(fp)
   15dd0:	00c01b84 	movi	r3,110
   15dd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15dd8:	0005883a 	mov	r2,zero
   15ddc:	00016006 	br	16360 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15de0:	008000b4 	movhi	r2,2
   15de4:	1090c804 	addi	r2,r2,17184
   15de8:	10800003 	ldbu	r2,0(r2)
   15dec:	10803fcc 	andi	r2,r2,255
   15df0:	10000526 	beq	r2,zero,15e08 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   15df4:	e0800217 	ldw	r2,8(fp)
   15df8:	00c00084 	movi	r3,2
   15dfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e00:	0005883a 	mov	r2,zero
   15e04:	00015606 	br	16360 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   15e08:	008000b4 	movhi	r2,2
   15e0c:	1090ba04 	addi	r2,r2,17128
   15e10:	10800003 	ldbu	r2,0(r2)
   15e14:	10803fcc 	andi	r2,r2,255
   15e18:	10000526 	beq	r2,zero,15e30 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   15e1c:	e0800217 	ldw	r2,8(fp)
   15e20:	00c00344 	movi	r3,13
   15e24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e28:	0005883a 	mov	r2,zero
   15e2c:	00014c06 	br	16360 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15e30:	e0bffc17 	ldw	r2,-16(fp)
   15e34:	10800003 	ldbu	r2,0(r2)
   15e38:	10803fcc 	andi	r2,r2,255
   15e3c:	10800160 	cmpeqi	r2,r2,5
   15e40:	1000051e 	bne	r2,zero,15e58 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   15e44:	e0800217 	ldw	r2,8(fp)
   15e48:	00c00044 	movi	r3,1
   15e4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e50:	0005883a 	mov	r2,zero
   15e54:	00014206 	br	16360 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15e58:	e0fffe03 	ldbu	r3,-8(fp)
   15e5c:	00bfe004 	movi	r2,-128
   15e60:	1884703a 	and	r2,r3,r2
   15e64:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   15e68:	e0bfe703 	ldbu	r2,-100(fp)
   15e6c:	10000626 	beq	r2,zero,15e88 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   15e70:	e0bffe03 	ldbu	r2,-8(fp)
   15e74:	10801fcc 	andi	r2,r2,127
   15e78:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15e7c:	00800044 	movi	r2,1
   15e80:	e0bfe505 	stb	r2,-108(fp)
   15e84:	00000106 	br	15e8c <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   15e88:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e8c:	0005303a 	rdctl	r2,status
   15e90:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e94:	e0ffe917 	ldw	r3,-92(fp)
   15e98:	00bfff84 	movi	r2,-2
   15e9c:	1884703a 	and	r2,r3,r2
   15ea0:	1001703a 	wrctl	status,r2
  
  return context;
   15ea4:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   15ea8:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   15eac:	e0bffe03 	ldbu	r2,-8(fp)
   15eb0:	10c00060 	cmpeqi	r3,r2,1
   15eb4:	1800921e 	bne	r3,zero,16100 <OSFlagPend+0x37c>
   15eb8:	10c00088 	cmpgei	r3,r2,2
   15ebc:	1800021e 	bne	r3,zero,15ec8 <OSFlagPend+0x144>
   15ec0:	10006126 	beq	r2,zero,16048 <OSFlagPend+0x2c4>
   15ec4:	0000bb06 	br	161b4 <OSFlagPend+0x430>
   15ec8:	10c000a0 	cmpeqi	r3,r2,2
   15ecc:	1800031e 	bne	r3,zero,15edc <OSFlagPend+0x158>
   15ed0:	108000e0 	cmpeqi	r2,r2,3
   15ed4:	10002f1e 	bne	r2,zero,15f94 <OSFlagPend+0x210>
   15ed8:	0000b606 	br	161b4 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   15edc:	e0bffc17 	ldw	r2,-16(fp)
   15ee0:	10c0020b 	ldhu	r3,8(r2)
   15ee4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ee8:	1884703a 	and	r2,r3,r2
   15eec:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ef0:	e0ffe78b 	ldhu	r3,-98(fp)
   15ef4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ef8:	1880191e 	bne	r3,r2,15f60 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15efc:	e0bfe503 	ldbu	r2,-108(fp)
   15f00:	10800058 	cmpnei	r2,r2,1
   15f04:	1000091e 	bne	r2,zero,15f2c <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15f08:	e0bffc17 	ldw	r2,-16(fp)
   15f0c:	1080020b 	ldhu	r2,8(r2)
   15f10:	1007883a 	mov	r3,r2
   15f14:	e0bfe78b 	ldhu	r2,-98(fp)
   15f18:	0084303a 	nor	r2,zero,r2
   15f1c:	1884703a 	and	r2,r3,r2
   15f20:	1007883a 	mov	r3,r2
   15f24:	e0bffc17 	ldw	r2,-16(fp)
   15f28:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15f2c:	008000b4 	movhi	r2,2
   15f30:	1090c904 	addi	r2,r2,17188
   15f34:	10800017 	ldw	r2,0(r2)
   15f38:	e0ffe78b 	ldhu	r3,-98(fp)
   15f3c:	10c00b0d 	sth	r3,44(r2)
   15f40:	e0bfe617 	ldw	r2,-104(fp)
   15f44:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f48:	e0bfea17 	ldw	r2,-88(fp)
   15f4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   15f50:	e0800217 	ldw	r2,8(fp)
   15f54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   15f58:	e0bfe78b 	ldhu	r2,-98(fp)
   15f5c:	00010006 	br	16360 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   15f60:	e1bffd0b 	ldhu	r6,-12(fp)
   15f64:	e0fffe03 	ldbu	r3,-8(fp)
   15f68:	e0bfff0b 	ldhu	r2,-4(fp)
   15f6c:	e17ff704 	addi	r5,fp,-36
   15f70:	d8800015 	stw	r2,0(sp)
   15f74:	e13ffc17 	ldw	r4,-16(fp)
   15f78:	180f883a 	mov	r7,r3
   15f7c:	00168280 	call	16828 <OS_FlagBlock>
   15f80:	e0bfe617 	ldw	r2,-104(fp)
   15f84:	e0bfeb15 	stw	r2,-84(fp)
   15f88:	e0bfeb17 	ldw	r2,-84(fp)
   15f8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   15f90:	00009206 	br	161dc <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   15f94:	e0bffc17 	ldw	r2,-16(fp)
   15f98:	10c0020b 	ldhu	r3,8(r2)
   15f9c:	e0bffd0b 	ldhu	r2,-12(fp)
   15fa0:	1884703a 	and	r2,r3,r2
   15fa4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15fa8:	e0bfe78b 	ldhu	r2,-98(fp)
   15fac:	10001926 	beq	r2,zero,16014 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15fb0:	e0bfe503 	ldbu	r2,-108(fp)
   15fb4:	10800058 	cmpnei	r2,r2,1
   15fb8:	1000091e 	bne	r2,zero,15fe0 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15fbc:	e0bffc17 	ldw	r2,-16(fp)
   15fc0:	1080020b 	ldhu	r2,8(r2)
   15fc4:	1007883a 	mov	r3,r2
   15fc8:	e0bfe78b 	ldhu	r2,-98(fp)
   15fcc:	0084303a 	nor	r2,zero,r2
   15fd0:	1884703a 	and	r2,r3,r2
   15fd4:	1007883a 	mov	r3,r2
   15fd8:	e0bffc17 	ldw	r2,-16(fp)
   15fdc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   15fe0:	008000b4 	movhi	r2,2
   15fe4:	1090c904 	addi	r2,r2,17188
   15fe8:	10800017 	ldw	r2,0(r2)
   15fec:	e0ffe78b 	ldhu	r3,-98(fp)
   15ff0:	10c00b0d 	sth	r3,44(r2)
   15ff4:	e0bfe617 	ldw	r2,-104(fp)
   15ff8:	e0bfec15 	stw	r2,-80(fp)
   15ffc:	e0bfec17 	ldw	r2,-80(fp)
   16000:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16004:	e0800217 	ldw	r2,8(fp)
   16008:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1600c:	e0bfe78b 	ldhu	r2,-98(fp)
   16010:	0000d306 	br	16360 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16014:	e1bffd0b 	ldhu	r6,-12(fp)
   16018:	e0fffe03 	ldbu	r3,-8(fp)
   1601c:	e0bfff0b 	ldhu	r2,-4(fp)
   16020:	e17ff704 	addi	r5,fp,-36
   16024:	d8800015 	stw	r2,0(sp)
   16028:	e13ffc17 	ldw	r4,-16(fp)
   1602c:	180f883a 	mov	r7,r3
   16030:	00168280 	call	16828 <OS_FlagBlock>
   16034:	e0bfe617 	ldw	r2,-104(fp)
   16038:	e0bfed15 	stw	r2,-76(fp)
   1603c:	e0bfed17 	ldw	r2,-76(fp)
   16040:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16044:	00006506 	br	161dc <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16048:	e0bffc17 	ldw	r2,-16(fp)
   1604c:	1080020b 	ldhu	r2,8(r2)
   16050:	0084303a 	nor	r2,zero,r2
   16054:	1007883a 	mov	r3,r2
   16058:	e0bffd0b 	ldhu	r2,-12(fp)
   1605c:	1884703a 	and	r2,r3,r2
   16060:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16064:	e0ffe78b 	ldhu	r3,-98(fp)
   16068:	e0bffd0b 	ldhu	r2,-12(fp)
   1606c:	1880171e 	bne	r3,r2,160cc <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16070:	e0bfe503 	ldbu	r2,-108(fp)
   16074:	10800058 	cmpnei	r2,r2,1
   16078:	1000071e 	bne	r2,zero,16098 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1607c:	e0bffc17 	ldw	r2,-16(fp)
   16080:	10c0020b 	ldhu	r3,8(r2)
   16084:	e0bfe78b 	ldhu	r2,-98(fp)
   16088:	1884b03a 	or	r2,r3,r2
   1608c:	1007883a 	mov	r3,r2
   16090:	e0bffc17 	ldw	r2,-16(fp)
   16094:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16098:	008000b4 	movhi	r2,2
   1609c:	1090c904 	addi	r2,r2,17188
   160a0:	10800017 	ldw	r2,0(r2)
   160a4:	e0ffe78b 	ldhu	r3,-98(fp)
   160a8:	10c00b0d 	sth	r3,44(r2)
   160ac:	e0bfe617 	ldw	r2,-104(fp)
   160b0:	e0bfee15 	stw	r2,-72(fp)
   160b4:	e0bfee17 	ldw	r2,-72(fp)
   160b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   160bc:	e0800217 	ldw	r2,8(fp)
   160c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   160c4:	e0bfe78b 	ldhu	r2,-98(fp)
   160c8:	0000a506 	br	16360 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   160cc:	e1bffd0b 	ldhu	r6,-12(fp)
   160d0:	e0fffe03 	ldbu	r3,-8(fp)
   160d4:	e0bfff0b 	ldhu	r2,-4(fp)
   160d8:	e17ff704 	addi	r5,fp,-36
   160dc:	d8800015 	stw	r2,0(sp)
   160e0:	e13ffc17 	ldw	r4,-16(fp)
   160e4:	180f883a 	mov	r7,r3
   160e8:	00168280 	call	16828 <OS_FlagBlock>
   160ec:	e0bfe617 	ldw	r2,-104(fp)
   160f0:	e0bfef15 	stw	r2,-68(fp)
   160f4:	e0bfef17 	ldw	r2,-68(fp)
   160f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   160fc:	00003706 	br	161dc <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   16100:	e0bffc17 	ldw	r2,-16(fp)
   16104:	1080020b 	ldhu	r2,8(r2)
   16108:	0084303a 	nor	r2,zero,r2
   1610c:	1007883a 	mov	r3,r2
   16110:	e0bffd0b 	ldhu	r2,-12(fp)
   16114:	1884703a 	and	r2,r3,r2
   16118:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1611c:	e0bfe78b 	ldhu	r2,-98(fp)
   16120:	10001726 	beq	r2,zero,16180 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16124:	e0bfe503 	ldbu	r2,-108(fp)
   16128:	10800058 	cmpnei	r2,r2,1
   1612c:	1000071e 	bne	r2,zero,1614c <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16130:	e0bffc17 	ldw	r2,-16(fp)
   16134:	10c0020b 	ldhu	r3,8(r2)
   16138:	e0bfe78b 	ldhu	r2,-98(fp)
   1613c:	1884b03a 	or	r2,r3,r2
   16140:	1007883a 	mov	r3,r2
   16144:	e0bffc17 	ldw	r2,-16(fp)
   16148:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1614c:	008000b4 	movhi	r2,2
   16150:	1090c904 	addi	r2,r2,17188
   16154:	10800017 	ldw	r2,0(r2)
   16158:	e0ffe78b 	ldhu	r3,-98(fp)
   1615c:	10c00b0d 	sth	r3,44(r2)
   16160:	e0bfe617 	ldw	r2,-104(fp)
   16164:	e0bff015 	stw	r2,-64(fp)
   16168:	e0bff017 	ldw	r2,-64(fp)
   1616c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16170:	e0800217 	ldw	r2,8(fp)
   16174:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16178:	e0bfe78b 	ldhu	r2,-98(fp)
   1617c:	00007806 	br	16360 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16180:	e1bffd0b 	ldhu	r6,-12(fp)
   16184:	e0fffe03 	ldbu	r3,-8(fp)
   16188:	e0bfff0b 	ldhu	r2,-4(fp)
   1618c:	e17ff704 	addi	r5,fp,-36
   16190:	d8800015 	stw	r2,0(sp)
   16194:	e13ffc17 	ldw	r4,-16(fp)
   16198:	180f883a 	mov	r7,r3
   1619c:	00168280 	call	16828 <OS_FlagBlock>
   161a0:	e0bfe617 	ldw	r2,-104(fp)
   161a4:	e0bff115 	stw	r2,-60(fp)
   161a8:	e0bff117 	ldw	r2,-60(fp)
   161ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   161b0:	00000a06 	br	161dc <OSFlagPend+0x458>
   161b4:	e0bfe617 	ldw	r2,-104(fp)
   161b8:	e0bff215 	stw	r2,-56(fp)
   161bc:	e0bff217 	ldw	r2,-56(fp)
   161c0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   161c4:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   161c8:	e0800217 	ldw	r2,8(fp)
   161cc:	00c01bc4 	movi	r3,111
   161d0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   161d4:	e0bfe78b 	ldhu	r2,-98(fp)
   161d8:	00006106 	br	16360 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   161dc:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161e0:	0005303a 	rdctl	r2,status
   161e4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161e8:	e0fff317 	ldw	r3,-52(fp)
   161ec:	00bfff84 	movi	r2,-2
   161f0:	1884703a 	and	r2,r3,r2
   161f4:	1001703a 	wrctl	status,r2
  
  return context;
   161f8:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   161fc:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   16200:	008000b4 	movhi	r2,2
   16204:	1090c904 	addi	r2,r2,17188
   16208:	10800017 	ldw	r2,0(r2)
   1620c:	10800c43 	ldbu	r2,49(r2)
   16210:	10803fcc 	andi	r2,r2,255
   16214:	10002226 	beq	r2,zero,162a0 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16218:	008000b4 	movhi	r2,2
   1621c:	1090c904 	addi	r2,r2,17188
   16220:	10800017 	ldw	r2,0(r2)
   16224:	10800c43 	ldbu	r2,49(r2)
   16228:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1622c:	008000b4 	movhi	r2,2
   16230:	1090c904 	addi	r2,r2,17188
   16234:	10800017 	ldw	r2,0(r2)
   16238:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1623c:	e0bff704 	addi	r2,fp,-36
   16240:	1009883a 	mov	r4,r2
   16244:	0016be00 	call	16be0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16248:	008000b4 	movhi	r2,2
   1624c:	1090c904 	addi	r2,r2,17188
   16250:	10800017 	ldw	r2,0(r2)
   16254:	10000c05 	stb	zero,48(r2)
   16258:	e0bfe617 	ldw	r2,-104(fp)
   1625c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16260:	e0bff417 	ldw	r2,-48(fp)
   16264:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16268:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   1626c:	e0bfe803 	ldbu	r2,-96(fp)
   16270:	108000a0 	cmpeqi	r2,r2,2
   16274:	10000426 	beq	r2,zero,16288 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16278:	e0800217 	ldw	r2,8(fp)
   1627c:	00c00384 	movi	r3,14
   16280:	10c00005 	stb	r3,0(r2)
                 break;
   16284:	00000406 	br	16298 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16288:	e0800217 	ldw	r2,8(fp)
   1628c:	00c00284 	movi	r3,10
   16290:	10c00005 	stb	r3,0(r2)
                 break;
   16294:	0001883a 	nop
        }
        return (flags_rdy);
   16298:	e0bfe78b 	ldhu	r2,-98(fp)
   1629c:	00003006 	br	16360 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   162a0:	008000b4 	movhi	r2,2
   162a4:	1090c904 	addi	r2,r2,17188
   162a8:	10800017 	ldw	r2,0(r2)
   162ac:	10800b0b 	ldhu	r2,44(r2)
   162b0:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   162b4:	e0bfe503 	ldbu	r2,-108(fp)
   162b8:	10800058 	cmpnei	r2,r2,1
   162bc:	1000211e 	bne	r2,zero,16344 <OSFlagPend+0x5c0>
        switch (wait_type) {
   162c0:	e0bffe03 	ldbu	r2,-8(fp)
   162c4:	10001616 	blt	r2,zero,16320 <OSFlagPend+0x59c>
   162c8:	10c00090 	cmplti	r3,r2,2
   162cc:	18000c1e 	bne	r3,zero,16300 <OSFlagPend+0x57c>
   162d0:	10800108 	cmpgei	r2,r2,4
   162d4:	1000121e 	bne	r2,zero,16320 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   162d8:	e0bffc17 	ldw	r2,-16(fp)
   162dc:	1080020b 	ldhu	r2,8(r2)
   162e0:	1007883a 	mov	r3,r2
   162e4:	e0bfe78b 	ldhu	r2,-98(fp)
   162e8:	0084303a 	nor	r2,zero,r2
   162ec:	1884703a 	and	r2,r3,r2
   162f0:	1007883a 	mov	r3,r2
   162f4:	e0bffc17 	ldw	r2,-16(fp)
   162f8:	10c0020d 	sth	r3,8(r2)
                 break;
   162fc:	00001106 	br	16344 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16300:	e0bffc17 	ldw	r2,-16(fp)
   16304:	10c0020b 	ldhu	r3,8(r2)
   16308:	e0bfe78b 	ldhu	r2,-98(fp)
   1630c:	1884b03a 	or	r2,r3,r2
   16310:	1007883a 	mov	r3,r2
   16314:	e0bffc17 	ldw	r2,-16(fp)
   16318:	10c0020d 	sth	r3,8(r2)
                 break;
   1631c:	00000906 	br	16344 <OSFlagPend+0x5c0>
   16320:	e0bfe617 	ldw	r2,-104(fp)
   16324:	e0bff515 	stw	r2,-44(fp)
   16328:	e0bff517 	ldw	r2,-44(fp)
   1632c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16330:	e0800217 	ldw	r2,8(fp)
   16334:	00c01bc4 	movi	r3,111
   16338:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1633c:	0005883a 	mov	r2,zero
   16340:	00000706 	br	16360 <OSFlagPend+0x5dc>
   16344:	e0bfe617 	ldw	r2,-104(fp)
   16348:	e0bff615 	stw	r2,-40(fp)
   1634c:	e0bff617 	ldw	r2,-40(fp)
   16350:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16354:	e0800217 	ldw	r2,8(fp)
   16358:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1635c:	e0bfe78b 	ldhu	r2,-98(fp)
}
   16360:	e037883a 	mov	sp,fp
   16364:	dfc00117 	ldw	ra,4(sp)
   16368:	df000017 	ldw	fp,0(sp)
   1636c:	dec00204 	addi	sp,sp,8
   16370:	f800283a 	ret

00016374 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   16374:	defffb04 	addi	sp,sp,-20
   16378:	df000415 	stw	fp,16(sp)
   1637c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16380:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16384:	0005303a 	rdctl	r2,status
   16388:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1638c:	e0fffe17 	ldw	r3,-8(fp)
   16390:	00bfff84 	movi	r2,-2
   16394:	1884703a 	and	r2,r3,r2
   16398:	1001703a 	wrctl	status,r2
  
  return context;
   1639c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   163a0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   163a4:	008000b4 	movhi	r2,2
   163a8:	1090c904 	addi	r2,r2,17188
   163ac:	10800017 	ldw	r2,0(r2)
   163b0:	10800b0b 	ldhu	r2,44(r2)
   163b4:	e0bffd0d 	sth	r2,-12(fp)
   163b8:	e0bffc17 	ldw	r2,-16(fp)
   163bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163c0:	e0bfff17 	ldw	r2,-4(fp)
   163c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   163c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   163cc:	e037883a 	mov	sp,fp
   163d0:	df000017 	ldw	fp,0(sp)
   163d4:	dec00104 	addi	sp,sp,4
   163d8:	f800283a 	ret

000163dc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   163dc:	deffef04 	addi	sp,sp,-68
   163e0:	dfc01015 	stw	ra,64(sp)
   163e4:	df000f15 	stw	fp,60(sp)
   163e8:	df000f04 	addi	fp,sp,60
   163ec:	e13ffc15 	stw	r4,-16(fp)
   163f0:	2807883a 	mov	r3,r5
   163f4:	3005883a 	mov	r2,r6
   163f8:	e1ffff15 	stw	r7,-4(fp)
   163fc:	e0fffd0d 	sth	r3,-12(fp)
   16400:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   16404:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16408:	e0bfff17 	ldw	r2,-4(fp)
   1640c:	1000021e 	bne	r2,zero,16418 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   16410:	0005883a 	mov	r2,zero
   16414:	0000ce06 	br	16750 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16418:	e0bffc17 	ldw	r2,-16(fp)
   1641c:	1000051e 	bne	r2,zero,16434 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16420:	e0bfff17 	ldw	r2,-4(fp)
   16424:	00c01b84 	movi	r3,110
   16428:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1642c:	0005883a 	mov	r2,zero
   16430:	0000c706 	br	16750 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   16434:	e0bffc17 	ldw	r2,-16(fp)
   16438:	10800003 	ldbu	r2,0(r2)
   1643c:	10803fcc 	andi	r2,r2,255
   16440:	10800160 	cmpeqi	r2,r2,5
   16444:	1000051e 	bne	r2,zero,1645c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16448:	e0bfff17 	ldw	r2,-4(fp)
   1644c:	00c00044 	movi	r3,1
   16450:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16454:	0005883a 	mov	r2,zero
   16458:	0000bd06 	br	16750 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1645c:	0005303a 	rdctl	r2,status
   16460:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16464:	e0fff617 	ldw	r3,-40(fp)
   16468:	00bfff84 	movi	r2,-2
   1646c:	1884703a 	and	r2,r3,r2
   16470:	1001703a 	wrctl	status,r2
  
  return context;
   16474:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16478:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1647c:	e0bffe03 	ldbu	r2,-8(fp)
   16480:	10000326 	beq	r2,zero,16490 <OSFlagPost+0xb4>
   16484:	10800060 	cmpeqi	r2,r2,1
   16488:	10000b1e 	bne	r2,zero,164b8 <OSFlagPost+0xdc>
   1648c:	00001206 	br	164d8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16490:	e0bffc17 	ldw	r2,-16(fp)
   16494:	1080020b 	ldhu	r2,8(r2)
   16498:	1007883a 	mov	r3,r2
   1649c:	e0bffd0b 	ldhu	r2,-12(fp)
   164a0:	0084303a 	nor	r2,zero,r2
   164a4:	1884703a 	and	r2,r3,r2
   164a8:	1007883a 	mov	r3,r2
   164ac:	e0bffc17 	ldw	r2,-16(fp)
   164b0:	10c0020d 	sth	r3,8(r2)
             break;
   164b4:	00001106 	br	164fc <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   164b8:	e0bffc17 	ldw	r2,-16(fp)
   164bc:	10c0020b 	ldhu	r3,8(r2)
   164c0:	e0bffd0b 	ldhu	r2,-12(fp)
   164c4:	1884b03a 	or	r2,r3,r2
   164c8:	1007883a 	mov	r3,r2
   164cc:	e0bffc17 	ldw	r2,-16(fp)
   164d0:	10c0020d 	sth	r3,8(r2)
             break;
   164d4:	00000906 	br	164fc <OSFlagPost+0x120>
   164d8:	e0bff317 	ldw	r2,-52(fp)
   164dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164e0:	e0bff717 	ldw	r2,-36(fp)
   164e4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   164e8:	e0bfff17 	ldw	r2,-4(fp)
   164ec:	00c01c44 	movi	r3,113
   164f0:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   164f4:	0005883a 	mov	r2,zero
   164f8:	00009506 	br	16750 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   164fc:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16500:	e0bffc17 	ldw	r2,-16(fp)
   16504:	10800117 	ldw	r2,4(r2)
   16508:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1650c:	00007406 	br	166e0 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   16510:	e0bff117 	ldw	r2,-60(fp)
   16514:	10800483 	ldbu	r2,18(r2)
   16518:	10803fcc 	andi	r2,r2,255
   1651c:	10c00060 	cmpeqi	r3,r2,1
   16520:	18004d1e 	bne	r3,zero,16658 <OSFlagPost+0x27c>
   16524:	10c00088 	cmpgei	r3,r2,2
   16528:	1800021e 	bne	r3,zero,16534 <OSFlagPost+0x158>
   1652c:	10003126 	beq	r2,zero,165f4 <OSFlagPost+0x218>
   16530:	00005f06 	br	166b0 <OSFlagPost+0x2d4>
   16534:	10c000a0 	cmpeqi	r3,r2,2
   16538:	1800031e 	bne	r3,zero,16548 <OSFlagPost+0x16c>
   1653c:	108000e0 	cmpeqi	r2,r2,3
   16540:	1000181e 	bne	r2,zero,165a4 <OSFlagPost+0x1c8>
   16544:	00005a06 	br	166b0 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16548:	e0bffc17 	ldw	r2,-16(fp)
   1654c:	10c0020b 	ldhu	r3,8(r2)
   16550:	e0bff117 	ldw	r2,-60(fp)
   16554:	1080040b 	ldhu	r2,16(r2)
   16558:	1884703a 	and	r2,r3,r2
   1655c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16560:	e0bff117 	ldw	r2,-60(fp)
   16564:	1080040b 	ldhu	r2,16(r2)
   16568:	10ffffcc 	andi	r3,r2,65535
   1656c:	e0bff40b 	ldhu	r2,-48(fp)
   16570:	18800b1e 	bne	r3,r2,165a0 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16574:	e0bff40b 	ldhu	r2,-48(fp)
   16578:	e13ff117 	ldw	r4,-60(fp)
   1657c:	100b883a 	mov	r5,r2
   16580:	0016ad00 	call	16ad0 <OS_FlagTaskRdy>
   16584:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16588:	e0bff483 	ldbu	r2,-46(fp)
   1658c:	10800058 	cmpnei	r2,r2,1
   16590:	1000031e 	bne	r2,zero,165a0 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16594:	00800044 	movi	r2,1
   16598:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1659c:	00004d06 	br	166d4 <OSFlagPost+0x2f8>
   165a0:	00004c06 	br	166d4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   165a4:	e0bffc17 	ldw	r2,-16(fp)
   165a8:	10c0020b 	ldhu	r3,8(r2)
   165ac:	e0bff117 	ldw	r2,-60(fp)
   165b0:	1080040b 	ldhu	r2,16(r2)
   165b4:	1884703a 	and	r2,r3,r2
   165b8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   165bc:	e0bff40b 	ldhu	r2,-48(fp)
   165c0:	10000b26 	beq	r2,zero,165f0 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   165c4:	e0bff40b 	ldhu	r2,-48(fp)
   165c8:	e13ff117 	ldw	r4,-60(fp)
   165cc:	100b883a 	mov	r5,r2
   165d0:	0016ad00 	call	16ad0 <OS_FlagTaskRdy>
   165d4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   165d8:	e0bff483 	ldbu	r2,-46(fp)
   165dc:	10800058 	cmpnei	r2,r2,1
   165e0:	1000031e 	bne	r2,zero,165f0 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   165e4:	00800044 	movi	r2,1
   165e8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   165ec:	00003906 	br	166d4 <OSFlagPost+0x2f8>
   165f0:	00003806 	br	166d4 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   165f4:	e0bffc17 	ldw	r2,-16(fp)
   165f8:	1080020b 	ldhu	r2,8(r2)
   165fc:	0084303a 	nor	r2,zero,r2
   16600:	1007883a 	mov	r3,r2
   16604:	e0bff117 	ldw	r2,-60(fp)
   16608:	1080040b 	ldhu	r2,16(r2)
   1660c:	1884703a 	and	r2,r3,r2
   16610:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16614:	e0bff117 	ldw	r2,-60(fp)
   16618:	1080040b 	ldhu	r2,16(r2)
   1661c:	10ffffcc 	andi	r3,r2,65535
   16620:	e0bff40b 	ldhu	r2,-48(fp)
   16624:	18800b1e 	bne	r3,r2,16654 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16628:	e0bff40b 	ldhu	r2,-48(fp)
   1662c:	e13ff117 	ldw	r4,-60(fp)
   16630:	100b883a 	mov	r5,r2
   16634:	0016ad00 	call	16ad0 <OS_FlagTaskRdy>
   16638:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1663c:	e0bff483 	ldbu	r2,-46(fp)
   16640:	10800058 	cmpnei	r2,r2,1
   16644:	1000031e 	bne	r2,zero,16654 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16648:	00800044 	movi	r2,1
   1664c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16650:	00002006 	br	166d4 <OSFlagPost+0x2f8>
   16654:	00001f06 	br	166d4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16658:	e0bffc17 	ldw	r2,-16(fp)
   1665c:	1080020b 	ldhu	r2,8(r2)
   16660:	0084303a 	nor	r2,zero,r2
   16664:	1007883a 	mov	r3,r2
   16668:	e0bff117 	ldw	r2,-60(fp)
   1666c:	1080040b 	ldhu	r2,16(r2)
   16670:	1884703a 	and	r2,r3,r2
   16674:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16678:	e0bff40b 	ldhu	r2,-48(fp)
   1667c:	10000b26 	beq	r2,zero,166ac <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16680:	e0bff40b 	ldhu	r2,-48(fp)
   16684:	e13ff117 	ldw	r4,-60(fp)
   16688:	100b883a 	mov	r5,r2
   1668c:	0016ad00 	call	16ad0 <OS_FlagTaskRdy>
   16690:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16694:	e0bff483 	ldbu	r2,-46(fp)
   16698:	10800058 	cmpnei	r2,r2,1
   1669c:	1000031e 	bne	r2,zero,166ac <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   166a0:	00800044 	movi	r2,1
   166a4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   166a8:	00000a06 	br	166d4 <OSFlagPost+0x2f8>
   166ac:	00000906 	br	166d4 <OSFlagPost+0x2f8>
   166b0:	e0bff317 	ldw	r2,-52(fp)
   166b4:	e0bff815 	stw	r2,-32(fp)
   166b8:	e0bff817 	ldw	r2,-32(fp)
   166bc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   166c0:	e0bfff17 	ldw	r2,-4(fp)
   166c4:	00c01bc4 	movi	r3,111
   166c8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   166cc:	0005883a 	mov	r2,zero
   166d0:	00001f06 	br	16750 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   166d4:	e0bff117 	ldw	r2,-60(fp)
   166d8:	10800017 	ldw	r2,0(r2)
   166dc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   166e0:	e0bff117 	ldw	r2,-60(fp)
   166e4:	103f8a1e 	bne	r2,zero,16510 <__alt_mem_Flash_flash_data+0xf4016510>
   166e8:	e0bff317 	ldw	r2,-52(fp)
   166ec:	e0bff915 	stw	r2,-28(fp)
   166f0:	e0bff917 	ldw	r2,-28(fp)
   166f4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   166f8:	e0bff203 	ldbu	r2,-56(fp)
   166fc:	10800058 	cmpnei	r2,r2,1
   16700:	1000011e 	bne	r2,zero,16708 <OSFlagPost+0x32c>
        OS_Sched();
   16704:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16708:	0005303a 	rdctl	r2,status
   1670c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16710:	e0fffa17 	ldw	r3,-24(fp)
   16714:	00bfff84 	movi	r2,-2
   16718:	1884703a 	and	r2,r3,r2
   1671c:	1001703a 	wrctl	status,r2
  
  return context;
   16720:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16724:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16728:	e0bffc17 	ldw	r2,-16(fp)
   1672c:	1080020b 	ldhu	r2,8(r2)
   16730:	e0bff50d 	sth	r2,-44(fp)
   16734:	e0bff317 	ldw	r2,-52(fp)
   16738:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1673c:	e0bffb17 	ldw	r2,-20(fp)
   16740:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16744:	e0bfff17 	ldw	r2,-4(fp)
   16748:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1674c:	e0bff50b 	ldhu	r2,-44(fp)
}
   16750:	e037883a 	mov	sp,fp
   16754:	dfc00117 	ldw	ra,4(sp)
   16758:	df000017 	ldw	fp,0(sp)
   1675c:	dec00204 	addi	sp,sp,8
   16760:	f800283a 	ret

00016764 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16764:	defff904 	addi	sp,sp,-28
   16768:	df000615 	stw	fp,24(sp)
   1676c:	df000604 	addi	fp,sp,24
   16770:	e13ffe15 	stw	r4,-8(fp)
   16774:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   16778:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1677c:	e0bfff17 	ldw	r2,-4(fp)
   16780:	1000021e 	bne	r2,zero,1678c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16784:	0005883a 	mov	r2,zero
   16788:	00002306 	br	16818 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1678c:	e0bffe17 	ldw	r2,-8(fp)
   16790:	1000051e 	bne	r2,zero,167a8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16794:	e0bfff17 	ldw	r2,-4(fp)
   16798:	00c01b84 	movi	r3,110
   1679c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   167a0:	0005883a 	mov	r2,zero
   167a4:	00001c06 	br	16818 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   167a8:	e0bffe17 	ldw	r2,-8(fp)
   167ac:	10800003 	ldbu	r2,0(r2)
   167b0:	10803fcc 	andi	r2,r2,255
   167b4:	10800160 	cmpeqi	r2,r2,5
   167b8:	1000051e 	bne	r2,zero,167d0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   167bc:	e0bfff17 	ldw	r2,-4(fp)
   167c0:	00c00044 	movi	r3,1
   167c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   167c8:	0005883a 	mov	r2,zero
   167cc:	00001206 	br	16818 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167d0:	0005303a 	rdctl	r2,status
   167d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167d8:	e0fffc17 	ldw	r3,-16(fp)
   167dc:	00bfff84 	movi	r2,-2
   167e0:	1884703a 	and	r2,r3,r2
   167e4:	1001703a 	wrctl	status,r2
  
  return context;
   167e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   167ec:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   167f0:	e0bffe17 	ldw	r2,-8(fp)
   167f4:	1080020b 	ldhu	r2,8(r2)
   167f8:	e0bffb0d 	sth	r2,-20(fp)
   167fc:	e0bffa17 	ldw	r2,-24(fp)
   16800:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16804:	e0bffd17 	ldw	r2,-12(fp)
   16808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1680c:	e0bfff17 	ldw	r2,-4(fp)
   16810:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   16814:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16818:	e037883a 	mov	sp,fp
   1681c:	df000017 	ldw	fp,0(sp)
   16820:	dec00104 	addi	sp,sp,4
   16824:	f800283a 	ret

00016828 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   16828:	defff804 	addi	sp,sp,-32
   1682c:	df000715 	stw	fp,28(sp)
   16830:	df000704 	addi	fp,sp,28
   16834:	e13ffb15 	stw	r4,-20(fp)
   16838:	e17ffc15 	stw	r5,-16(fp)
   1683c:	3009883a 	mov	r4,r6
   16840:	3807883a 	mov	r3,r7
   16844:	e0800117 	ldw	r2,4(fp)
   16848:	e13ffd0d 	sth	r4,-12(fp)
   1684c:	e0fffe05 	stb	r3,-8(fp)
   16850:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   16854:	008000b4 	movhi	r2,2
   16858:	1090c904 	addi	r2,r2,17188
   1685c:	10c00017 	ldw	r3,0(r2)
   16860:	008000b4 	movhi	r2,2
   16864:	1090c904 	addi	r2,r2,17188
   16868:	10800017 	ldw	r2,0(r2)
   1686c:	10800c03 	ldbu	r2,48(r2)
   16870:	10800814 	ori	r2,r2,32
   16874:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   16878:	008000b4 	movhi	r2,2
   1687c:	1090c904 	addi	r2,r2,17188
   16880:	10800017 	ldw	r2,0(r2)
   16884:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   16888:	008000b4 	movhi	r2,2
   1688c:	1090c904 	addi	r2,r2,17188
   16890:	10800017 	ldw	r2,0(r2)
   16894:	e0ffff0b 	ldhu	r3,-4(fp)
   16898:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1689c:	008000b4 	movhi	r2,2
   168a0:	1090c904 	addi	r2,r2,17188
   168a4:	10800017 	ldw	r2,0(r2)
   168a8:	e0fffc17 	ldw	r3,-16(fp)
   168ac:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   168b0:	e0bffc17 	ldw	r2,-16(fp)
   168b4:	e0fffd0b 	ldhu	r3,-12(fp)
   168b8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   168bc:	e0bffc17 	ldw	r2,-16(fp)
   168c0:	e0fffe03 	ldbu	r3,-8(fp)
   168c4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   168c8:	008000b4 	movhi	r2,2
   168cc:	1090c904 	addi	r2,r2,17188
   168d0:	10c00017 	ldw	r3,0(r2)
   168d4:	e0bffc17 	ldw	r2,-16(fp)
   168d8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   168dc:	e0bffb17 	ldw	r2,-20(fp)
   168e0:	10c00117 	ldw	r3,4(r2)
   168e4:	e0bffc17 	ldw	r2,-16(fp)
   168e8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   168ec:	e0bffc17 	ldw	r2,-16(fp)
   168f0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   168f4:	e0bffc17 	ldw	r2,-16(fp)
   168f8:	e0fffb17 	ldw	r3,-20(fp)
   168fc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16900:	e0bffb17 	ldw	r2,-20(fp)
   16904:	10800117 	ldw	r2,4(r2)
   16908:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1690c:	e0bff917 	ldw	r2,-28(fp)
   16910:	10000326 	beq	r2,zero,16920 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   16914:	e0bff917 	ldw	r2,-28(fp)
   16918:	e0fffc17 	ldw	r3,-16(fp)
   1691c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   16920:	e0bffb17 	ldw	r2,-20(fp)
   16924:	e0fffc17 	ldw	r3,-16(fp)
   16928:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1692c:	008000b4 	movhi	r2,2
   16930:	1090c904 	addi	r2,r2,17188
   16934:	10800017 	ldw	r2,0(r2)
   16938:	10800d03 	ldbu	r2,52(r2)
   1693c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16940:	e0fffa03 	ldbu	r3,-24(fp)
   16944:	e13ffa03 	ldbu	r4,-24(fp)
   16948:	008000b4 	movhi	r2,2
   1694c:	1090c644 	addi	r2,r2,17177
   16950:	1105883a 	add	r2,r2,r4
   16954:	10800003 	ldbu	r2,0(r2)
   16958:	1009883a 	mov	r4,r2
   1695c:	008000b4 	movhi	r2,2
   16960:	1090c904 	addi	r2,r2,17188
   16964:	10800017 	ldw	r2,0(r2)
   16968:	10800d43 	ldbu	r2,53(r2)
   1696c:	0084303a 	nor	r2,zero,r2
   16970:	2084703a 	and	r2,r4,r2
   16974:	1009883a 	mov	r4,r2
   16978:	008000b4 	movhi	r2,2
   1697c:	1090c644 	addi	r2,r2,17177
   16980:	10c5883a 	add	r2,r2,r3
   16984:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   16988:	e0fffa03 	ldbu	r3,-24(fp)
   1698c:	008000b4 	movhi	r2,2
   16990:	1090c644 	addi	r2,r2,17177
   16994:	10c5883a 	add	r2,r2,r3
   16998:	10800003 	ldbu	r2,0(r2)
   1699c:	10803fcc 	andi	r2,r2,255
   169a0:	10000e1e 	bne	r2,zero,169dc <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   169a4:	008000b4 	movhi	r2,2
   169a8:	1090c904 	addi	r2,r2,17188
   169ac:	10800017 	ldw	r2,0(r2)
   169b0:	10800d83 	ldbu	r2,54(r2)
   169b4:	0084303a 	nor	r2,zero,r2
   169b8:	1007883a 	mov	r3,r2
   169bc:	008000b4 	movhi	r2,2
   169c0:	1090c604 	addi	r2,r2,17176
   169c4:	10800003 	ldbu	r2,0(r2)
   169c8:	1884703a 	and	r2,r3,r2
   169cc:	1007883a 	mov	r3,r2
   169d0:	008000b4 	movhi	r2,2
   169d4:	1090c604 	addi	r2,r2,17176
   169d8:	10c00005 	stb	r3,0(r2)
    }
}
   169dc:	e037883a 	mov	sp,fp
   169e0:	df000017 	ldw	fp,0(sp)
   169e4:	dec00104 	addi	sp,sp,4
   169e8:	f800283a 	ret

000169ec <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   169ec:	defffb04 	addi	sp,sp,-20
   169f0:	dfc00415 	stw	ra,16(sp)
   169f4:	df000315 	stw	fp,12(sp)
   169f8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   169fc:	01000134 	movhi	r4,4
   16a00:	2108f504 	addi	r4,r4,9172
   16a04:	0140dc04 	movi	r5,880
   16a08:	0014b4c0 	call	14b4c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   16a0c:	00800134 	movhi	r2,4
   16a10:	1088f504 	addi	r2,r2,9172
   16a14:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   16a18:	00800134 	movhi	r2,4
   16a1c:	10890004 	addi	r2,r2,9216
   16a20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16a24:	e03ffd0d 	sth	zero,-12(fp)
   16a28:	00001306 	br	16a78 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16a2c:	e0bffe17 	ldw	r2,-8(fp)
   16a30:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   16a34:	e0bffe17 	ldw	r2,-8(fp)
   16a38:	e0ffff17 	ldw	r3,-4(fp)
   16a3c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   16a40:	e0bffe17 	ldw	r2,-8(fp)
   16a44:	00c00fc4 	movi	r3,63
   16a48:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16a4c:	e0bffe17 	ldw	r2,-8(fp)
   16a50:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   16a54:	e0bffe17 	ldw	r2,-8(fp)
   16a58:	10800b04 	addi	r2,r2,44
   16a5c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   16a60:	e0bfff17 	ldw	r2,-4(fp)
   16a64:	10800b04 	addi	r2,r2,44
   16a68:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   16a6c:	e0bffd0b 	ldhu	r2,-12(fp)
   16a70:	10800044 	addi	r2,r2,1
   16a74:	e0bffd0d 	sth	r2,-12(fp)
   16a78:	e0bffd0b 	ldhu	r2,-12(fp)
   16a7c:	108004f0 	cmpltui	r2,r2,19
   16a80:	103fea1e 	bne	r2,zero,16a2c <__alt_mem_Flash_flash_data+0xf4016a2c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16a84:	e0bffe17 	ldw	r2,-8(fp)
   16a88:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   16a8c:	e0bffe17 	ldw	r2,-8(fp)
   16a90:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   16a94:	e0bffe17 	ldw	r2,-8(fp)
   16a98:	00c00fc4 	movi	r3,63
   16a9c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   16aa0:	e0bffe17 	ldw	r2,-8(fp)
   16aa4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   16aa8:	008000b4 	movhi	r2,2
   16aac:	1090cb04 	addi	r2,r2,17196
   16ab0:	00c00134 	movhi	r3,4
   16ab4:	18c8f504 	addi	r3,r3,9172
   16ab8:	10c00015 	stw	r3,0(r2)
#endif
}
   16abc:	e037883a 	mov	sp,fp
   16ac0:	dfc00117 	ldw	ra,4(sp)
   16ac4:	df000017 	ldw	fp,0(sp)
   16ac8:	dec00204 	addi	sp,sp,8
   16acc:	f800283a 	ret

00016ad0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   16ad0:	defffa04 	addi	sp,sp,-24
   16ad4:	dfc00515 	stw	ra,20(sp)
   16ad8:	df000415 	stw	fp,16(sp)
   16adc:	df000404 	addi	fp,sp,16
   16ae0:	e13ffe15 	stw	r4,-8(fp)
   16ae4:	2805883a 	mov	r2,r5
   16ae8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   16aec:	e0bffe17 	ldw	r2,-8(fp)
   16af0:	10800217 	ldw	r2,8(r2)
   16af4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   16af8:	e0bffd17 	ldw	r2,-12(fp)
   16afc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   16b00:	e0bffd17 	ldw	r2,-12(fp)
   16b04:	e0ffff0b 	ldhu	r3,-4(fp)
   16b08:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   16b0c:	e0bffd17 	ldw	r2,-12(fp)
   16b10:	10c00c03 	ldbu	r3,48(r2)
   16b14:	00bff7c4 	movi	r2,-33
   16b18:	1884703a 	and	r2,r3,r2
   16b1c:	1007883a 	mov	r3,r2
   16b20:	e0bffd17 	ldw	r2,-12(fp)
   16b24:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   16b28:	e0bffd17 	ldw	r2,-12(fp)
   16b2c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   16b30:	e0bffd17 	ldw	r2,-12(fp)
   16b34:	10800c03 	ldbu	r2,48(r2)
   16b38:	10803fcc 	andi	r2,r2,255
   16b3c:	10001f1e 	bne	r2,zero,16bbc <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   16b40:	e0bffd17 	ldw	r2,-12(fp)
   16b44:	10c00d83 	ldbu	r3,54(r2)
   16b48:	008000b4 	movhi	r2,2
   16b4c:	1090c604 	addi	r2,r2,17176
   16b50:	10800003 	ldbu	r2,0(r2)
   16b54:	1884b03a 	or	r2,r3,r2
   16b58:	1007883a 	mov	r3,r2
   16b5c:	008000b4 	movhi	r2,2
   16b60:	1090c604 	addi	r2,r2,17176
   16b64:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   16b68:	e0bffd17 	ldw	r2,-12(fp)
   16b6c:	10800d03 	ldbu	r2,52(r2)
   16b70:	10c03fcc 	andi	r3,r2,255
   16b74:	e0bffd17 	ldw	r2,-12(fp)
   16b78:	10800d03 	ldbu	r2,52(r2)
   16b7c:	11003fcc 	andi	r4,r2,255
   16b80:	008000b4 	movhi	r2,2
   16b84:	1090c644 	addi	r2,r2,17177
   16b88:	1105883a 	add	r2,r2,r4
   16b8c:	11000003 	ldbu	r4,0(r2)
   16b90:	e0bffd17 	ldw	r2,-12(fp)
   16b94:	10800d43 	ldbu	r2,53(r2)
   16b98:	2084b03a 	or	r2,r4,r2
   16b9c:	1009883a 	mov	r4,r2
   16ba0:	008000b4 	movhi	r2,2
   16ba4:	1090c644 	addi	r2,r2,17177
   16ba8:	10c5883a 	add	r2,r2,r3
   16bac:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   16bb0:	00800044 	movi	r2,1
   16bb4:	e0bffc05 	stb	r2,-16(fp)
   16bb8:	00000106 	br	16bc0 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   16bbc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   16bc0:	e13ffe17 	ldw	r4,-8(fp)
   16bc4:	0016be00 	call	16be0 <OS_FlagUnlink>
    return (sched);
   16bc8:	e0bffc03 	ldbu	r2,-16(fp)
}
   16bcc:	e037883a 	mov	sp,fp
   16bd0:	dfc00117 	ldw	ra,4(sp)
   16bd4:	df000017 	ldw	fp,0(sp)
   16bd8:	dec00204 	addi	sp,sp,8
   16bdc:	f800283a 	ret

00016be0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   16be0:	defffa04 	addi	sp,sp,-24
   16be4:	df000515 	stw	fp,20(sp)
   16be8:	df000504 	addi	fp,sp,20
   16bec:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   16bf0:	e0bfff17 	ldw	r2,-4(fp)
   16bf4:	10800117 	ldw	r2,4(r2)
   16bf8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   16bfc:	e0bfff17 	ldw	r2,-4(fp)
   16c00:	10800017 	ldw	r2,0(r2)
   16c04:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   16c08:	e0bffb17 	ldw	r2,-20(fp)
   16c0c:	10000b1e 	bne	r2,zero,16c3c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   16c10:	e0bfff17 	ldw	r2,-4(fp)
   16c14:	10800317 	ldw	r2,12(r2)
   16c18:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   16c1c:	e0bffd17 	ldw	r2,-12(fp)
   16c20:	e0fffc17 	ldw	r3,-16(fp)
   16c24:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   16c28:	e0bffc17 	ldw	r2,-16(fp)
   16c2c:	10000b26 	beq	r2,zero,16c5c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   16c30:	e0bffc17 	ldw	r2,-16(fp)
   16c34:	10000115 	stw	zero,4(r2)
   16c38:	00000806 	br	16c5c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   16c3c:	e0bffb17 	ldw	r2,-20(fp)
   16c40:	e0fffc17 	ldw	r3,-16(fp)
   16c44:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   16c48:	e0bffc17 	ldw	r2,-16(fp)
   16c4c:	10000326 	beq	r2,zero,16c5c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   16c50:	e0bffc17 	ldw	r2,-16(fp)
   16c54:	e0fffb17 	ldw	r3,-20(fp)
   16c58:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   16c5c:	e0bfff17 	ldw	r2,-4(fp)
   16c60:	10800217 	ldw	r2,8(r2)
   16c64:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   16c68:	e0bffe17 	ldw	r2,-8(fp)
   16c6c:	10000a15 	stw	zero,40(r2)
#endif
}
   16c70:	e037883a 	mov	sp,fp
   16c74:	df000017 	ldw	fp,0(sp)
   16c78:	dec00104 	addi	sp,sp,4
   16c7c:	f800283a 	ret

00016c80 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   16c80:	defffa04 	addi	sp,sp,-24
   16c84:	df000515 	stw	fp,20(sp)
   16c88:	df000504 	addi	fp,sp,20
   16c8c:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   16c90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   16c94:	e0bfff17 	ldw	r2,-4(fp)
   16c98:	1000021e 	bne	r2,zero,16ca4 <OSMboxAccept+0x24>
        return ((void *)0);
   16c9c:	0005883a 	mov	r2,zero
   16ca0:	00001906 	br	16d08 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   16ca4:	e0bfff17 	ldw	r2,-4(fp)
   16ca8:	10800003 	ldbu	r2,0(r2)
   16cac:	10803fcc 	andi	r2,r2,255
   16cb0:	10800060 	cmpeqi	r2,r2,1
   16cb4:	1000021e 	bne	r2,zero,16cc0 <OSMboxAccept+0x40>
        return ((void *)0);
   16cb8:	0005883a 	mov	r2,zero
   16cbc:	00001206 	br	16d08 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cc0:	0005303a 	rdctl	r2,status
   16cc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cc8:	e0fffd17 	ldw	r3,-12(fp)
   16ccc:	00bfff84 	movi	r2,-2
   16cd0:	1884703a 	and	r2,r3,r2
   16cd4:	1001703a 	wrctl	status,r2
  
  return context;
   16cd8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16cdc:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   16ce0:	e0bfff17 	ldw	r2,-4(fp)
   16ce4:	10800117 	ldw	r2,4(r2)
   16ce8:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   16cec:	e0bfff17 	ldw	r2,-4(fp)
   16cf0:	10000115 	stw	zero,4(r2)
   16cf4:	e0bffb17 	ldw	r2,-20(fp)
   16cf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cfc:	e0bffe17 	ldw	r2,-8(fp)
   16d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   16d04:	e0bffc17 	ldw	r2,-16(fp)
}
   16d08:	e037883a 	mov	sp,fp
   16d0c:	df000017 	ldw	fp,0(sp)
   16d10:	dec00104 	addi	sp,sp,4
   16d14:	f800283a 	ret

00016d18 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   16d18:	defff904 	addi	sp,sp,-28
   16d1c:	dfc00615 	stw	ra,24(sp)
   16d20:	df000515 	stw	fp,20(sp)
   16d24:	df000504 	addi	fp,sp,20
   16d28:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16d2c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   16d30:	008000b4 	movhi	r2,2
   16d34:	1090c804 	addi	r2,r2,17184
   16d38:	10800003 	ldbu	r2,0(r2)
   16d3c:	10803fcc 	andi	r2,r2,255
   16d40:	10000226 	beq	r2,zero,16d4c <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16d44:	0005883a 	mov	r2,zero
   16d48:	00002d06 	br	16e00 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d4c:	0005303a 	rdctl	r2,status
   16d50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d54:	e0fffd17 	ldw	r3,-12(fp)
   16d58:	00bfff84 	movi	r2,-2
   16d5c:	1884703a 	and	r2,r3,r2
   16d60:	1001703a 	wrctl	status,r2
  
  return context;
   16d64:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16d68:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   16d6c:	008000b4 	movhi	r2,2
   16d70:	1090c704 	addi	r2,r2,17180
   16d74:	10800017 	ldw	r2,0(r2)
   16d78:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   16d7c:	008000b4 	movhi	r2,2
   16d80:	1090c704 	addi	r2,r2,17180
   16d84:	10800017 	ldw	r2,0(r2)
   16d88:	10000726 	beq	r2,zero,16da8 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   16d8c:	008000b4 	movhi	r2,2
   16d90:	1090c704 	addi	r2,r2,17180
   16d94:	10800017 	ldw	r2,0(r2)
   16d98:	10c00117 	ldw	r3,4(r2)
   16d9c:	008000b4 	movhi	r2,2
   16da0:	1090c704 	addi	r2,r2,17180
   16da4:	10c00015 	stw	r3,0(r2)
   16da8:	e0bffb17 	ldw	r2,-20(fp)
   16dac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16db0:	e0bffe17 	ldw	r2,-8(fp)
   16db4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   16db8:	e0bffc17 	ldw	r2,-16(fp)
   16dbc:	10000f26 	beq	r2,zero,16dfc <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   16dc0:	e0bffc17 	ldw	r2,-16(fp)
   16dc4:	00c00044 	movi	r3,1
   16dc8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   16dcc:	e0bffc17 	ldw	r2,-16(fp)
   16dd0:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   16dd4:	e0bffc17 	ldw	r2,-16(fp)
   16dd8:	e0ffff17 	ldw	r3,-4(fp)
   16ddc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   16de0:	e0bffc17 	ldw	r2,-16(fp)
   16de4:	00c00fc4 	movi	r3,63
   16de8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16dec:	e0bffc17 	ldw	r2,-16(fp)
   16df0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   16df4:	e13ffc17 	ldw	r4,-16(fp)
   16df8:	00147880 	call	14788 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   16dfc:	e0bffc17 	ldw	r2,-16(fp)
}
   16e00:	e037883a 	mov	sp,fp
   16e04:	dfc00117 	ldw	ra,4(sp)
   16e08:	df000017 	ldw	fp,0(sp)
   16e0c:	dec00204 	addi	sp,sp,8
   16e10:	f800283a 	ret

00016e14 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16e14:	defff304 	addi	sp,sp,-52
   16e18:	dfc00c15 	stw	ra,48(sp)
   16e1c:	df000b15 	stw	fp,44(sp)
   16e20:	df000b04 	addi	fp,sp,44
   16e24:	e13ffd15 	stw	r4,-12(fp)
   16e28:	2805883a 	mov	r2,r5
   16e2c:	e1bfff15 	stw	r6,-4(fp)
   16e30:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16e34:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16e38:	e0bfff17 	ldw	r2,-4(fp)
   16e3c:	1000021e 	bne	r2,zero,16e48 <OSMboxDel+0x34>
        return (pevent);
   16e40:	e0bffd17 	ldw	r2,-12(fp)
   16e44:	00008806 	br	17068 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16e48:	e0bffd17 	ldw	r2,-12(fp)
   16e4c:	1000051e 	bne	r2,zero,16e64 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16e50:	e0bfff17 	ldw	r2,-4(fp)
   16e54:	00c00104 	movi	r3,4
   16e58:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16e5c:	e0bffd17 	ldw	r2,-12(fp)
   16e60:	00008106 	br	17068 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   16e64:	e0bffd17 	ldw	r2,-12(fp)
   16e68:	10800003 	ldbu	r2,0(r2)
   16e6c:	10803fcc 	andi	r2,r2,255
   16e70:	10800060 	cmpeqi	r2,r2,1
   16e74:	1000051e 	bne	r2,zero,16e8c <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16e78:	e0bfff17 	ldw	r2,-4(fp)
   16e7c:	00c00044 	movi	r3,1
   16e80:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16e84:	e0bffd17 	ldw	r2,-12(fp)
   16e88:	00007706 	br	17068 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16e8c:	008000b4 	movhi	r2,2
   16e90:	1090c804 	addi	r2,r2,17184
   16e94:	10800003 	ldbu	r2,0(r2)
   16e98:	10803fcc 	andi	r2,r2,255
   16e9c:	10000526 	beq	r2,zero,16eb4 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16ea0:	e0bfff17 	ldw	r2,-4(fp)
   16ea4:	00c003c4 	movi	r3,15
   16ea8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16eac:	e0bffd17 	ldw	r2,-12(fp)
   16eb0:	00006d06 	br	17068 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16eb4:	0005303a 	rdctl	r2,status
   16eb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ebc:	e0fff817 	ldw	r3,-32(fp)
   16ec0:	00bfff84 	movi	r2,-2
   16ec4:	1884703a 	and	r2,r3,r2
   16ec8:	1001703a 	wrctl	status,r2
  
  return context;
   16ecc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16ed0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   16ed4:	e0bffd17 	ldw	r2,-12(fp)
   16ed8:	10800283 	ldbu	r2,10(r2)
   16edc:	10803fcc 	andi	r2,r2,255
   16ee0:	10000326 	beq	r2,zero,16ef0 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16ee4:	00800044 	movi	r2,1
   16ee8:	e0bff505 	stb	r2,-44(fp)
   16eec:	00000106 	br	16ef4 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16ef0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16ef4:	e0bffe03 	ldbu	r2,-8(fp)
   16ef8:	10000326 	beq	r2,zero,16f08 <OSMboxDel+0xf4>
   16efc:	10800060 	cmpeqi	r2,r2,1
   16f00:	10002c1e 	bne	r2,zero,16fb4 <OSMboxDel+0x1a0>
   16f04:	00004d06 	br	1703c <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   16f08:	e0bff503 	ldbu	r2,-44(fp)
   16f0c:	10001a1e 	bne	r2,zero,16f78 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16f10:	e0bffd17 	ldw	r2,-12(fp)
   16f14:	00c00fc4 	movi	r3,63
   16f18:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16f1c:	e0bffd17 	ldw	r2,-12(fp)
   16f20:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   16f24:	e0bffd17 	ldw	r2,-12(fp)
   16f28:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   16f2c:	008000b4 	movhi	r2,2
   16f30:	1090c704 	addi	r2,r2,17180
   16f34:	10c00017 	ldw	r3,0(r2)
   16f38:	e0bffd17 	ldw	r2,-12(fp)
   16f3c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   16f40:	e0bffd17 	ldw	r2,-12(fp)
   16f44:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   16f48:	008000b4 	movhi	r2,2
   16f4c:	1090c704 	addi	r2,r2,17180
   16f50:	e0fffd17 	ldw	r3,-12(fp)
   16f54:	10c00015 	stw	r3,0(r2)
   16f58:	e0bff717 	ldw	r2,-36(fp)
   16f5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f60:	e0bff917 	ldw	r2,-28(fp)
   16f64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   16f68:	e0bfff17 	ldw	r2,-4(fp)
   16f6c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   16f70:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   16f74:	00003b06 	br	17064 <OSMboxDel+0x250>
   16f78:	e0bff717 	ldw	r2,-36(fp)
   16f7c:	e0bffa15 	stw	r2,-24(fp)
   16f80:	e0bffa17 	ldw	r2,-24(fp)
   16f84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   16f88:	e0bfff17 	ldw	r2,-4(fp)
   16f8c:	00c01244 	movi	r3,73
   16f90:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   16f94:	e0bffd17 	ldw	r2,-12(fp)
   16f98:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16f9c:	00003106 	br	17064 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   16fa0:	e13ffd17 	ldw	r4,-12(fp)
   16fa4:	000b883a 	mov	r5,zero
   16fa8:	01800084 	movi	r6,2
   16fac:	000f883a 	mov	r7,zero
   16fb0:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   16fb4:	e0bffd17 	ldw	r2,-12(fp)
   16fb8:	10800283 	ldbu	r2,10(r2)
   16fbc:	10803fcc 	andi	r2,r2,255
   16fc0:	103ff71e 	bne	r2,zero,16fa0 <__alt_mem_Flash_flash_data+0xf4016fa0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16fc4:	e0bffd17 	ldw	r2,-12(fp)
   16fc8:	00c00fc4 	movi	r3,63
   16fcc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16fd8:	e0bffd17 	ldw	r2,-12(fp)
   16fdc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16fe0:	008000b4 	movhi	r2,2
   16fe4:	1090c704 	addi	r2,r2,17180
   16fe8:	10c00017 	ldw	r3,0(r2)
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16ff4:	e0bffd17 	ldw	r2,-12(fp)
   16ff8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16ffc:	008000b4 	movhi	r2,2
   17000:	1090c704 	addi	r2,r2,17180
   17004:	e0fffd17 	ldw	r3,-12(fp)
   17008:	10c00015 	stw	r3,0(r2)
   1700c:	e0bff717 	ldw	r2,-36(fp)
   17010:	e0bffb15 	stw	r2,-20(fp)
   17014:	e0bffb17 	ldw	r2,-20(fp)
   17018:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1701c:	e0bff503 	ldbu	r2,-44(fp)
   17020:	10800058 	cmpnei	r2,r2,1
   17024:	1000011e 	bne	r2,zero,1702c <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17028:	0014c000 	call	14c00 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   1702c:	e0bfff17 	ldw	r2,-4(fp)
   17030:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   17034:	e03ff615 	stw	zero,-40(fp)
             break;
   17038:	00000a06 	br	17064 <OSMboxDel+0x250>
   1703c:	e0bff717 	ldw	r2,-36(fp)
   17040:	e0bffc15 	stw	r2,-16(fp)
   17044:	e0bffc17 	ldw	r2,-16(fp)
   17048:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   1704c:	e0bfff17 	ldw	r2,-4(fp)
   17050:	00c001c4 	movi	r3,7
   17054:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   17058:	e0bffd17 	ldw	r2,-12(fp)
   1705c:	e0bff615 	stw	r2,-40(fp)
             break;
   17060:	0001883a 	nop
    }
    return (pevent_return);
   17064:	e0bff617 	ldw	r2,-40(fp)
}
   17068:	e037883a 	mov	sp,fp
   1706c:	dfc00117 	ldw	ra,4(sp)
   17070:	df000017 	ldw	fp,0(sp)
   17074:	dec00204 	addi	sp,sp,8
   17078:	f800283a 	ret

0001707c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1707c:	defff404 	addi	sp,sp,-48
   17080:	dfc00b15 	stw	ra,44(sp)
   17084:	df000a15 	stw	fp,40(sp)
   17088:	df000a04 	addi	fp,sp,40
   1708c:	e13ffd15 	stw	r4,-12(fp)
   17090:	2805883a 	mov	r2,r5
   17094:	e1bfff15 	stw	r6,-4(fp)
   17098:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1709c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   170a0:	e0bfff17 	ldw	r2,-4(fp)
   170a4:	1000021e 	bne	r2,zero,170b0 <OSMboxPend+0x34>
        return ((void *)0);
   170a8:	0005883a 	mov	r2,zero
   170ac:	00009706 	br	1730c <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   170b0:	e0bffd17 	ldw	r2,-12(fp)
   170b4:	1000051e 	bne	r2,zero,170cc <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   170b8:	e0bfff17 	ldw	r2,-4(fp)
   170bc:	00c00104 	movi	r3,4
   170c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   170c4:	0005883a 	mov	r2,zero
   170c8:	00009006 	br	1730c <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   170cc:	e0bffd17 	ldw	r2,-12(fp)
   170d0:	10800003 	ldbu	r2,0(r2)
   170d4:	10803fcc 	andi	r2,r2,255
   170d8:	10800060 	cmpeqi	r2,r2,1
   170dc:	1000051e 	bne	r2,zero,170f4 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   170e0:	e0bfff17 	ldw	r2,-4(fp)
   170e4:	00c00044 	movi	r3,1
   170e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   170ec:	0005883a 	mov	r2,zero
   170f0:	00008606 	br	1730c <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   170f4:	008000b4 	movhi	r2,2
   170f8:	1090c804 	addi	r2,r2,17184
   170fc:	10800003 	ldbu	r2,0(r2)
   17100:	10803fcc 	andi	r2,r2,255
   17104:	10000526 	beq	r2,zero,1711c <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   17108:	e0bfff17 	ldw	r2,-4(fp)
   1710c:	00c00084 	movi	r3,2
   17110:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17114:	0005883a 	mov	r2,zero
   17118:	00007c06 	br	1730c <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1711c:	008000b4 	movhi	r2,2
   17120:	1090ba04 	addi	r2,r2,17128
   17124:	10800003 	ldbu	r2,0(r2)
   17128:	10803fcc 	andi	r2,r2,255
   1712c:	10000526 	beq	r2,zero,17144 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   17130:	e0bfff17 	ldw	r2,-4(fp)
   17134:	00c00344 	movi	r3,13
   17138:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1713c:	0005883a 	mov	r2,zero
   17140:	00007206 	br	1730c <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17144:	0005303a 	rdctl	r2,status
   17148:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1714c:	e0fff817 	ldw	r3,-32(fp)
   17150:	00bfff84 	movi	r2,-2
   17154:	1884703a 	and	r2,r3,r2
   17158:	1001703a 	wrctl	status,r2
  
  return context;
   1715c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17160:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   17164:	e0bffd17 	ldw	r2,-12(fp)
   17168:	10800117 	ldw	r2,4(r2)
   1716c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   17170:	e0bff617 	ldw	r2,-40(fp)
   17174:	10000a26 	beq	r2,zero,171a0 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   17178:	e0bffd17 	ldw	r2,-12(fp)
   1717c:	10000115 	stw	zero,4(r2)
   17180:	e0bff717 	ldw	r2,-36(fp)
   17184:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17188:	e0bff917 	ldw	r2,-28(fp)
   1718c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17190:	e0bfff17 	ldw	r2,-4(fp)
   17194:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   17198:	e0bff617 	ldw	r2,-40(fp)
   1719c:	00005b06 	br	1730c <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   171a0:	008000b4 	movhi	r2,2
   171a4:	1090c904 	addi	r2,r2,17188
   171a8:	10c00017 	ldw	r3,0(r2)
   171ac:	008000b4 	movhi	r2,2
   171b0:	1090c904 	addi	r2,r2,17188
   171b4:	10800017 	ldw	r2,0(r2)
   171b8:	10800c03 	ldbu	r2,48(r2)
   171bc:	10800094 	ori	r2,r2,2
   171c0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   171c4:	008000b4 	movhi	r2,2
   171c8:	1090c904 	addi	r2,r2,17188
   171cc:	10800017 	ldw	r2,0(r2)
   171d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   171d4:	008000b4 	movhi	r2,2
   171d8:	1090c904 	addi	r2,r2,17188
   171dc:	10800017 	ldw	r2,0(r2)
   171e0:	e0fffe0b 	ldhu	r3,-8(fp)
   171e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   171e8:	e13ffd17 	ldw	r4,-12(fp)
   171ec:	00143800 	call	14380 <OS_EventTaskWait>
   171f0:	e0bff717 	ldw	r2,-36(fp)
   171f4:	e0bffa15 	stw	r2,-24(fp)
   171f8:	e0bffa17 	ldw	r2,-24(fp)
   171fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   17200:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17204:	0005303a 	rdctl	r2,status
   17208:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1720c:	e0fffb17 	ldw	r3,-20(fp)
   17210:	00bfff84 	movi	r2,-2
   17214:	1884703a 	and	r2,r3,r2
   17218:	1001703a 	wrctl	status,r2
  
  return context;
   1721c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   17220:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17224:	008000b4 	movhi	r2,2
   17228:	1090c904 	addi	r2,r2,17188
   1722c:	10800017 	ldw	r2,0(r2)
   17230:	10800c43 	ldbu	r2,49(r2)
   17234:	10803fcc 	andi	r2,r2,255
   17238:	10000326 	beq	r2,zero,17248 <OSMboxPend+0x1cc>
   1723c:	108000a0 	cmpeqi	r2,r2,2
   17240:	1000091e 	bne	r2,zero,17268 <OSMboxPend+0x1ec>
   17244:	00000d06 	br	1727c <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   17248:	008000b4 	movhi	r2,2
   1724c:	1090c904 	addi	r2,r2,17188
   17250:	10800017 	ldw	r2,0(r2)
   17254:	10800917 	ldw	r2,36(r2)
   17258:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   1725c:	e0bfff17 	ldw	r2,-4(fp)
   17260:	10000005 	stb	zero,0(r2)
             break;
   17264:	00001006 	br	172a8 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17268:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1726c:	e0bfff17 	ldw	r2,-4(fp)
   17270:	00c00384 	movi	r3,14
   17274:	10c00005 	stb	r3,0(r2)
             break;
   17278:	00000b06 	br	172a8 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1727c:	008000b4 	movhi	r2,2
   17280:	1090c904 	addi	r2,r2,17188
   17284:	10800017 	ldw	r2,0(r2)
   17288:	1009883a 	mov	r4,r2
   1728c:	e17ffd17 	ldw	r5,-12(fp)
   17290:	00145d80 	call	145d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   17294:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17298:	e0bfff17 	ldw	r2,-4(fp)
   1729c:	00c00284 	movi	r3,10
   172a0:	10c00005 	stb	r3,0(r2)
             break;
   172a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   172a8:	008000b4 	movhi	r2,2
   172ac:	1090c904 	addi	r2,r2,17188
   172b0:	10800017 	ldw	r2,0(r2)
   172b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   172b8:	008000b4 	movhi	r2,2
   172bc:	1090c904 	addi	r2,r2,17188
   172c0:	10800017 	ldw	r2,0(r2)
   172c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   172c8:	008000b4 	movhi	r2,2
   172cc:	1090c904 	addi	r2,r2,17188
   172d0:	10800017 	ldw	r2,0(r2)
   172d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   172d8:	008000b4 	movhi	r2,2
   172dc:	1090c904 	addi	r2,r2,17188
   172e0:	10800017 	ldw	r2,0(r2)
   172e4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   172e8:	008000b4 	movhi	r2,2
   172ec:	1090c904 	addi	r2,r2,17188
   172f0:	10800017 	ldw	r2,0(r2)
   172f4:	10000915 	stw	zero,36(r2)
   172f8:	e0bff717 	ldw	r2,-36(fp)
   172fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17300:	e0bffc17 	ldw	r2,-16(fp)
   17304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17308:	e0bff617 	ldw	r2,-40(fp)
}
   1730c:	e037883a 	mov	sp,fp
   17310:	dfc00117 	ldw	ra,4(sp)
   17314:	df000017 	ldw	fp,0(sp)
   17318:	dec00204 	addi	sp,sp,8
   1731c:	f800283a 	ret

00017320 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17320:	defff604 	addi	sp,sp,-40
   17324:	dfc00915 	stw	ra,36(sp)
   17328:	df000815 	stw	fp,32(sp)
   1732c:	df000804 	addi	fp,sp,32
   17330:	e13ffd15 	stw	r4,-12(fp)
   17334:	2805883a 	mov	r2,r5
   17338:	e1bfff15 	stw	r6,-4(fp)
   1733c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17340:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17344:	e0bfff17 	ldw	r2,-4(fp)
   17348:	1000021e 	bne	r2,zero,17354 <OSMboxPendAbort+0x34>
        return (0);
   1734c:	0005883a 	mov	r2,zero
   17350:	00004906 	br	17478 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17354:	e0bffd17 	ldw	r2,-12(fp)
   17358:	1000051e 	bne	r2,zero,17370 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1735c:	e0bfff17 	ldw	r2,-4(fp)
   17360:	00c00104 	movi	r3,4
   17364:	10c00005 	stb	r3,0(r2)
        return (0);
   17368:	0005883a 	mov	r2,zero
   1736c:	00004206 	br	17478 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17370:	e0bffd17 	ldw	r2,-12(fp)
   17374:	10800003 	ldbu	r2,0(r2)
   17378:	10803fcc 	andi	r2,r2,255
   1737c:	10800060 	cmpeqi	r2,r2,1
   17380:	1000051e 	bne	r2,zero,17398 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17384:	e0bfff17 	ldw	r2,-4(fp)
   17388:	00c00044 	movi	r3,1
   1738c:	10c00005 	stb	r3,0(r2)
        return (0);
   17390:	0005883a 	mov	r2,zero
   17394:	00003806 	br	17478 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17398:	0005303a 	rdctl	r2,status
   1739c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173a0:	e0fffa17 	ldw	r3,-24(fp)
   173a4:	00bfff84 	movi	r2,-2
   173a8:	1884703a 	and	r2,r3,r2
   173ac:	1001703a 	wrctl	status,r2
  
  return context;
   173b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   173b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   173b8:	e0bffd17 	ldw	r2,-12(fp)
   173bc:	10800283 	ldbu	r2,10(r2)
   173c0:	10803fcc 	andi	r2,r2,255
   173c4:	10002526 	beq	r2,zero,1745c <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   173c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   173cc:	e0bffe03 	ldbu	r2,-8(fp)
   173d0:	10800060 	cmpeqi	r2,r2,1
   173d4:	10000e26 	beq	r2,zero,17410 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   173d8:	00000806 	br	173fc <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   173dc:	e13ffd17 	ldw	r4,-12(fp)
   173e0:	000b883a 	mov	r5,zero
   173e4:	01800084 	movi	r6,2
   173e8:	01c00084 	movi	r7,2
   173ec:	00141e80 	call	141e8 <OS_EventTaskRdy>
                     nbr_tasks++;
   173f0:	e0bff803 	ldbu	r2,-32(fp)
   173f4:	10800044 	addi	r2,r2,1
   173f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   173fc:	e0bffd17 	ldw	r2,-12(fp)
   17400:	10800283 	ldbu	r2,10(r2)
   17404:	10803fcc 	andi	r2,r2,255
   17408:	103ff41e 	bne	r2,zero,173dc <__alt_mem_Flash_flash_data+0xf40173dc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1740c:	00000906 	br	17434 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17410:	e13ffd17 	ldw	r4,-12(fp)
   17414:	000b883a 	mov	r5,zero
   17418:	01800084 	movi	r6,2
   1741c:	01c00084 	movi	r7,2
   17420:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 nbr_tasks++;
   17424:	e0bff803 	ldbu	r2,-32(fp)
   17428:	10800044 	addi	r2,r2,1
   1742c:	e0bff805 	stb	r2,-32(fp)
                 break;
   17430:	0001883a 	nop
   17434:	e0bff917 	ldw	r2,-28(fp)
   17438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1743c:	e0bffb17 	ldw	r2,-20(fp)
   17440:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17444:	0014c000 	call	14c00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17448:	e0bfff17 	ldw	r2,-4(fp)
   1744c:	00c00384 	movi	r3,14
   17450:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17454:	e0bff803 	ldbu	r2,-32(fp)
   17458:	00000706 	br	17478 <OSMboxPendAbort+0x158>
   1745c:	e0bff917 	ldw	r2,-28(fp)
   17460:	e0bffc15 	stw	r2,-16(fp)
   17464:	e0bffc17 	ldw	r2,-16(fp)
   17468:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1746c:	e0bfff17 	ldw	r2,-4(fp)
   17470:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   17474:	0005883a 	mov	r2,zero
}
   17478:	e037883a 	mov	sp,fp
   1747c:	dfc00117 	ldw	ra,4(sp)
   17480:	df000017 	ldw	fp,0(sp)
   17484:	dec00204 	addi	sp,sp,8
   17488:	f800283a 	ret

0001748c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   1748c:	defff704 	addi	sp,sp,-36
   17490:	dfc00815 	stw	ra,32(sp)
   17494:	df000715 	stw	fp,28(sp)
   17498:	df000704 	addi	fp,sp,28
   1749c:	e13ffe15 	stw	r4,-8(fp)
   174a0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   174a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   174a8:	e0bffe17 	ldw	r2,-8(fp)
   174ac:	1000021e 	bne	r2,zero,174b8 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   174b0:	00800104 	movi	r2,4
   174b4:	00003406 	br	17588 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   174b8:	e0bfff17 	ldw	r2,-4(fp)
   174bc:	1000021e 	bne	r2,zero,174c8 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   174c0:	008000c4 	movi	r2,3
   174c4:	00003006 	br	17588 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   174c8:	e0bffe17 	ldw	r2,-8(fp)
   174cc:	10800003 	ldbu	r2,0(r2)
   174d0:	10803fcc 	andi	r2,r2,255
   174d4:	10800060 	cmpeqi	r2,r2,1
   174d8:	1000021e 	bne	r2,zero,174e4 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   174dc:	00800044 	movi	r2,1
   174e0:	00002906 	br	17588 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174e4:	0005303a 	rdctl	r2,status
   174e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174ec:	e0fffa17 	ldw	r3,-24(fp)
   174f0:	00bfff84 	movi	r2,-2
   174f4:	1884703a 	and	r2,r3,r2
   174f8:	1001703a 	wrctl	status,r2
  
  return context;
   174fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17500:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17504:	e0bffe17 	ldw	r2,-8(fp)
   17508:	10800283 	ldbu	r2,10(r2)
   1750c:	10803fcc 	andi	r2,r2,255
   17510:	10000c26 	beq	r2,zero,17544 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17514:	e13ffe17 	ldw	r4,-8(fp)
   17518:	e17fff17 	ldw	r5,-4(fp)
   1751c:	01800084 	movi	r6,2
   17520:	000f883a 	mov	r7,zero
   17524:	00141e80 	call	141e8 <OS_EventTaskRdy>
   17528:	e0bff917 	ldw	r2,-28(fp)
   1752c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17530:	e0bffb17 	ldw	r2,-20(fp)
   17534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17538:	0014c000 	call	14c00 <OS_Sched>
        return (OS_ERR_NONE);
   1753c:	0005883a 	mov	r2,zero
   17540:	00001106 	br	17588 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17544:	e0bffe17 	ldw	r2,-8(fp)
   17548:	10800117 	ldw	r2,4(r2)
   1754c:	10000626 	beq	r2,zero,17568 <OSMboxPost+0xdc>
   17550:	e0bff917 	ldw	r2,-28(fp)
   17554:	e0bffc15 	stw	r2,-16(fp)
   17558:	e0bffc17 	ldw	r2,-16(fp)
   1755c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17560:	00800504 	movi	r2,20
   17564:	00000806 	br	17588 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17568:	e0bffe17 	ldw	r2,-8(fp)
   1756c:	e0ffff17 	ldw	r3,-4(fp)
   17570:	10c00115 	stw	r3,4(r2)
   17574:	e0bff917 	ldw	r2,-28(fp)
   17578:	e0bffd15 	stw	r2,-12(fp)
   1757c:	e0bffd17 	ldw	r2,-12(fp)
   17580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17584:	0005883a 	mov	r2,zero
}
   17588:	e037883a 	mov	sp,fp
   1758c:	dfc00117 	ldw	ra,4(sp)
   17590:	df000017 	ldw	fp,0(sp)
   17594:	dec00204 	addi	sp,sp,8
   17598:	f800283a 	ret

0001759c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1759c:	defff604 	addi	sp,sp,-40
   175a0:	dfc00915 	stw	ra,36(sp)
   175a4:	df000815 	stw	fp,32(sp)
   175a8:	df000804 	addi	fp,sp,32
   175ac:	e13ffd15 	stw	r4,-12(fp)
   175b0:	e17ffe15 	stw	r5,-8(fp)
   175b4:	3005883a 	mov	r2,r6
   175b8:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   175bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   175c0:	e0bffd17 	ldw	r2,-12(fp)
   175c4:	1000021e 	bne	r2,zero,175d0 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   175c8:	00800104 	movi	r2,4
   175cc:	00004506 	br	176e4 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   175d0:	e0bffe17 	ldw	r2,-8(fp)
   175d4:	1000021e 	bne	r2,zero,175e0 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   175d8:	008000c4 	movi	r2,3
   175dc:	00004106 	br	176e4 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   175e0:	e0bffd17 	ldw	r2,-12(fp)
   175e4:	10800003 	ldbu	r2,0(r2)
   175e8:	10803fcc 	andi	r2,r2,255
   175ec:	10800060 	cmpeqi	r2,r2,1
   175f0:	1000021e 	bne	r2,zero,175fc <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   175f4:	00800044 	movi	r2,1
   175f8:	00003a06 	br	176e4 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175fc:	0005303a 	rdctl	r2,status
   17600:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17604:	e0fff917 	ldw	r3,-28(fp)
   17608:	00bfff84 	movi	r2,-2
   1760c:	1884703a 	and	r2,r3,r2
   17610:	1001703a 	wrctl	status,r2
  
  return context;
   17614:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17618:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   1761c:	e0bffd17 	ldw	r2,-12(fp)
   17620:	10800283 	ldbu	r2,10(r2)
   17624:	10803fcc 	andi	r2,r2,255
   17628:	10001d26 	beq	r2,zero,176a0 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1762c:	e0bfff03 	ldbu	r2,-4(fp)
   17630:	1080004c 	andi	r2,r2,1
   17634:	10000b26 	beq	r2,zero,17664 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17638:	00000506 	br	17650 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   1763c:	e13ffd17 	ldw	r4,-12(fp)
   17640:	e17ffe17 	ldw	r5,-8(fp)
   17644:	01800084 	movi	r6,2
   17648:	000f883a 	mov	r7,zero
   1764c:	00141e80 	call	141e8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17650:	e0bffd17 	ldw	r2,-12(fp)
   17654:	10800283 	ldbu	r2,10(r2)
   17658:	10803fcc 	andi	r2,r2,255
   1765c:	103ff71e 	bne	r2,zero,1763c <__alt_mem_Flash_flash_data+0xf401763c>
   17660:	00000506 	br	17678 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17664:	e13ffd17 	ldw	r4,-12(fp)
   17668:	e17ffe17 	ldw	r5,-8(fp)
   1766c:	01800084 	movi	r6,2
   17670:	000f883a 	mov	r7,zero
   17674:	00141e80 	call	141e8 <OS_EventTaskRdy>
   17678:	e0bff817 	ldw	r2,-32(fp)
   1767c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17680:	e0bffa17 	ldw	r2,-24(fp)
   17684:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17688:	e0bfff03 	ldbu	r2,-4(fp)
   1768c:	1080010c 	andi	r2,r2,4
   17690:	1000011e 	bne	r2,zero,17698 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   17694:	0014c000 	call	14c00 <OS_Sched>
        }
        return (OS_ERR_NONE);
   17698:	0005883a 	mov	r2,zero
   1769c:	00001106 	br	176e4 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   176a0:	e0bffd17 	ldw	r2,-12(fp)
   176a4:	10800117 	ldw	r2,4(r2)
   176a8:	10000626 	beq	r2,zero,176c4 <OSMboxPostOpt+0x128>
   176ac:	e0bff817 	ldw	r2,-32(fp)
   176b0:	e0bffb15 	stw	r2,-20(fp)
   176b4:	e0bffb17 	ldw	r2,-20(fp)
   176b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   176bc:	00800504 	movi	r2,20
   176c0:	00000806 	br	176e4 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   176c4:	e0bffd17 	ldw	r2,-12(fp)
   176c8:	e0fffe17 	ldw	r3,-8(fp)
   176cc:	10c00115 	stw	r3,4(r2)
   176d0:	e0bff817 	ldw	r2,-32(fp)
   176d4:	e0bffc15 	stw	r2,-16(fp)
   176d8:	e0bffc17 	ldw	r2,-16(fp)
   176dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   176e0:	0005883a 	mov	r2,zero
}
   176e4:	e037883a 	mov	sp,fp
   176e8:	dfc00117 	ldw	ra,4(sp)
   176ec:	df000017 	ldw	fp,0(sp)
   176f0:	dec00204 	addi	sp,sp,8
   176f4:	f800283a 	ret

000176f8 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   176f8:	defff704 	addi	sp,sp,-36
   176fc:	df000815 	stw	fp,32(sp)
   17700:	df000804 	addi	fp,sp,32
   17704:	e13ffe15 	stw	r4,-8(fp)
   17708:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1770c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17710:	e0bffe17 	ldw	r2,-8(fp)
   17714:	1000021e 	bne	r2,zero,17720 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17718:	00800104 	movi	r2,4
   1771c:	00003606 	br	177f8 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   17720:	e0bfff17 	ldw	r2,-4(fp)
   17724:	1000021e 	bne	r2,zero,17730 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   17728:	00800244 	movi	r2,9
   1772c:	00003206 	br	177f8 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17730:	e0bffe17 	ldw	r2,-8(fp)
   17734:	10800003 	ldbu	r2,0(r2)
   17738:	10803fcc 	andi	r2,r2,255
   1773c:	10800060 	cmpeqi	r2,r2,1
   17740:	1000021e 	bne	r2,zero,1774c <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   17744:	00800044 	movi	r2,1
   17748:	00002b06 	br	177f8 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1774c:	0005303a 	rdctl	r2,status
   17750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17754:	e0fffc17 	ldw	r3,-16(fp)
   17758:	00bfff84 	movi	r2,-2
   1775c:	1884703a 	and	r2,r3,r2
   17760:	1001703a 	wrctl	status,r2
  
  return context;
   17764:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17768:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   1776c:	e0bffe17 	ldw	r2,-8(fp)
   17770:	10c00283 	ldbu	r3,10(r2)
   17774:	e0bfff17 	ldw	r2,-4(fp)
   17778:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   1777c:	e0bffe17 	ldw	r2,-8(fp)
   17780:	108002c4 	addi	r2,r2,11
   17784:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   17788:	e0bfff17 	ldw	r2,-4(fp)
   1778c:	10800104 	addi	r2,r2,4
   17790:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17794:	e03ff805 	stb	zero,-32(fp)
   17798:	00000b06 	br	177c8 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   1779c:	e0bffa17 	ldw	r2,-24(fp)
   177a0:	10c00044 	addi	r3,r2,1
   177a4:	e0fffa15 	stw	r3,-24(fp)
   177a8:	e0fff917 	ldw	r3,-28(fp)
   177ac:	19000044 	addi	r4,r3,1
   177b0:	e13ff915 	stw	r4,-28(fp)
   177b4:	18c00003 	ldbu	r3,0(r3)
   177b8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   177bc:	e0bff803 	ldbu	r2,-32(fp)
   177c0:	10800044 	addi	r2,r2,1
   177c4:	e0bff805 	stb	r2,-32(fp)
   177c8:	e0bff803 	ldbu	r2,-32(fp)
   177cc:	108000f0 	cmpltui	r2,r2,3
   177d0:	103ff21e 	bne	r2,zero,1779c <__alt_mem_Flash_flash_data+0xf401779c>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   177d4:	e0bffe17 	ldw	r2,-8(fp)
   177d8:	10c00117 	ldw	r3,4(r2)
   177dc:	e0bfff17 	ldw	r2,-4(fp)
   177e0:	10c00015 	stw	r3,0(r2)
   177e4:	e0bffb17 	ldw	r2,-20(fp)
   177e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177ec:	e0bffd17 	ldw	r2,-12(fp)
   177f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   177f4:	0005883a 	mov	r2,zero
}
   177f8:	e037883a 	mov	sp,fp
   177fc:	df000017 	ldw	fp,0(sp)
   17800:	dec00104 	addi	sp,sp,4
   17804:	f800283a 	ret

00017808 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   17808:	defff404 	addi	sp,sp,-48
   1780c:	df000b15 	stw	fp,44(sp)
   17810:	df000b04 	addi	fp,sp,44
   17814:	e13ffc15 	stw	r4,-16(fp)
   17818:	e17ffd15 	stw	r5,-12(fp)
   1781c:	e1bffe15 	stw	r6,-8(fp)
   17820:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17824:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17828:	e0bfff17 	ldw	r2,-4(fp)
   1782c:	1000021e 	bne	r2,zero,17838 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   17830:	0005883a 	mov	r2,zero
   17834:	00006d06 	br	179ec <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17838:	e0bffc17 	ldw	r2,-16(fp)
   1783c:	1000051e 	bne	r2,zero,17854 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17840:	e0bfff17 	ldw	r2,-4(fp)
   17844:	00c01884 	movi	r3,98
   17848:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1784c:	0005883a 	mov	r2,zero
   17850:	00006606 	br	179ec <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   17854:	e0bffc17 	ldw	r2,-16(fp)
   17858:	108000cc 	andi	r2,r2,3
   1785c:	10000526 	beq	r2,zero,17874 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   17860:	e0bfff17 	ldw	r2,-4(fp)
   17864:	00c01884 	movi	r3,98
   17868:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1786c:	0005883a 	mov	r2,zero
   17870:	00005e06 	br	179ec <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   17874:	e0bffd17 	ldw	r2,-12(fp)
   17878:	108000a8 	cmpgeui	r2,r2,2
   1787c:	1000051e 	bne	r2,zero,17894 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   17880:	e0bfff17 	ldw	r2,-4(fp)
   17884:	00c016c4 	movi	r3,91
   17888:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1788c:	0005883a 	mov	r2,zero
   17890:	00005606 	br	179ec <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   17894:	e0bffe17 	ldw	r2,-8(fp)
   17898:	10800128 	cmpgeui	r2,r2,4
   1789c:	1000051e 	bne	r2,zero,178b4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   178a0:	e0bfff17 	ldw	r2,-4(fp)
   178a4:	00c01704 	movi	r3,92
   178a8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   178ac:	0005883a 	mov	r2,zero
   178b0:	00004e06 	br	179ec <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178b4:	0005303a 	rdctl	r2,status
   178b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178bc:	e0fffa17 	ldw	r3,-24(fp)
   178c0:	00bfff84 	movi	r2,-2
   178c4:	1884703a 	and	r2,r3,r2
   178c8:	1001703a 	wrctl	status,r2
  
  return context;
   178cc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   178d0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   178d4:	008000b4 	movhi	r2,2
   178d8:	1090c304 	addi	r2,r2,17164
   178dc:	10800017 	ldw	r2,0(r2)
   178e0:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   178e4:	008000b4 	movhi	r2,2
   178e8:	1090c304 	addi	r2,r2,17164
   178ec:	10800017 	ldw	r2,0(r2)
   178f0:	10000726 	beq	r2,zero,17910 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   178f4:	008000b4 	movhi	r2,2
   178f8:	1090c304 	addi	r2,r2,17164
   178fc:	10800017 	ldw	r2,0(r2)
   17900:	10c00117 	ldw	r3,4(r2)
   17904:	008000b4 	movhi	r2,2
   17908:	1090c304 	addi	r2,r2,17164
   1790c:	10c00015 	stw	r3,0(r2)
   17910:	e0bff817 	ldw	r2,-32(fp)
   17914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17918:	e0bffb17 	ldw	r2,-20(fp)
   1791c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   17920:	e0bff917 	ldw	r2,-28(fp)
   17924:	1000051e 	bne	r2,zero,1793c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   17928:	e0bfff17 	ldw	r2,-4(fp)
   1792c:	00c01684 	movi	r3,90
   17930:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17934:	0005883a 	mov	r2,zero
   17938:	00002c06 	br	179ec <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1793c:	e0bffc17 	ldw	r2,-16(fp)
   17940:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   17944:	e0fffc17 	ldw	r3,-16(fp)
   17948:	e0bffe17 	ldw	r2,-8(fp)
   1794c:	1885883a 	add	r2,r3,r2
   17950:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   17954:	e03ff715 	stw	zero,-36(fp)
   17958:	00000c06 	br	1798c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1795c:	e0bff617 	ldw	r2,-40(fp)
   17960:	e0fff517 	ldw	r3,-44(fp)
   17964:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   17968:	e0bff517 	ldw	r2,-44(fp)
   1796c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   17970:	e0fff517 	ldw	r3,-44(fp)
   17974:	e0bffe17 	ldw	r2,-8(fp)
   17978:	1885883a 	add	r2,r3,r2
   1797c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   17980:	e0bff717 	ldw	r2,-36(fp)
   17984:	10800044 	addi	r2,r2,1
   17988:	e0bff715 	stw	r2,-36(fp)
   1798c:	e0bffd17 	ldw	r2,-12(fp)
   17990:	10bfffc4 	addi	r2,r2,-1
   17994:	e0fff717 	ldw	r3,-36(fp)
   17998:	18bff036 	bltu	r3,r2,1795c <__alt_mem_Flash_flash_data+0xf401795c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1799c:	e0bff617 	ldw	r2,-40(fp)
   179a0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   179a4:	e0bff917 	ldw	r2,-28(fp)
   179a8:	e0fffc17 	ldw	r3,-16(fp)
   179ac:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   179b0:	e0bff917 	ldw	r2,-28(fp)
   179b4:	e0fffc17 	ldw	r3,-16(fp)
   179b8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   179bc:	e0bff917 	ldw	r2,-28(fp)
   179c0:	e0fffd17 	ldw	r3,-12(fp)
   179c4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   179c8:	e0bff917 	ldw	r2,-28(fp)
   179cc:	e0fffd17 	ldw	r3,-12(fp)
   179d0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   179d4:	e0bff917 	ldw	r2,-28(fp)
   179d8:	e0fffe17 	ldw	r3,-8(fp)
   179dc:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   179e0:	e0bfff17 	ldw	r2,-4(fp)
   179e4:	10000005 	stb	zero,0(r2)
    return (pmem);
   179e8:	e0bff917 	ldw	r2,-28(fp)
}
   179ec:	e037883a 	mov	sp,fp
   179f0:	df000017 	ldw	fp,0(sp)
   179f4:	dec00104 	addi	sp,sp,4
   179f8:	f800283a 	ret

000179fc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   179fc:	defff804 	addi	sp,sp,-32
   17a00:	df000715 	stw	fp,28(sp)
   17a04:	df000704 	addi	fp,sp,28
   17a08:	e13ffe15 	stw	r4,-8(fp)
   17a0c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17a10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17a14:	e0bfff17 	ldw	r2,-4(fp)
   17a18:	1000021e 	bne	r2,zero,17a24 <OSMemGet+0x28>
        return ((void *)0);
   17a1c:	0005883a 	mov	r2,zero
   17a20:	00002e06 	br	17adc <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   17a24:	e0bffe17 	ldw	r2,-8(fp)
   17a28:	1000051e 	bne	r2,zero,17a40 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17a2c:	e0bfff17 	ldw	r2,-4(fp)
   17a30:	00c01804 	movi	r3,96
   17a34:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17a38:	0005883a 	mov	r2,zero
   17a3c:	00002706 	br	17adc <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a40:	0005303a 	rdctl	r2,status
   17a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a48:	e0fffb17 	ldw	r3,-20(fp)
   17a4c:	00bfff84 	movi	r2,-2
   17a50:	1884703a 	and	r2,r3,r2
   17a54:	1001703a 	wrctl	status,r2
  
  return context;
   17a58:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17a5c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   17a60:	e0bffe17 	ldw	r2,-8(fp)
   17a64:	10800417 	ldw	r2,16(r2)
   17a68:	10001426 	beq	r2,zero,17abc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   17a6c:	e0bffe17 	ldw	r2,-8(fp)
   17a70:	10800117 	ldw	r2,4(r2)
   17a74:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   17a78:	e0bffa17 	ldw	r2,-24(fp)
   17a7c:	10c00017 	ldw	r3,0(r2)
   17a80:	e0bffe17 	ldw	r2,-8(fp)
   17a84:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   17a88:	e0bffe17 	ldw	r2,-8(fp)
   17a8c:	10800417 	ldw	r2,16(r2)
   17a90:	10ffffc4 	addi	r3,r2,-1
   17a94:	e0bffe17 	ldw	r2,-8(fp)
   17a98:	10c00415 	stw	r3,16(r2)
   17a9c:	e0bff917 	ldw	r2,-28(fp)
   17aa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17aa4:	e0bffc17 	ldw	r2,-16(fp)
   17aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   17aac:	e0bfff17 	ldw	r2,-4(fp)
   17ab0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   17ab4:	e0bffa17 	ldw	r2,-24(fp)
   17ab8:	00000806 	br	17adc <OSMemGet+0xe0>
   17abc:	e0bff917 	ldw	r2,-28(fp)
   17ac0:	e0bffd15 	stw	r2,-12(fp)
   17ac4:	e0bffd17 	ldw	r2,-12(fp)
   17ac8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   17acc:	e0bfff17 	ldw	r2,-4(fp)
   17ad0:	00c01744 	movi	r3,93
   17ad4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   17ad8:	0005883a 	mov	r2,zero
}
   17adc:	e037883a 	mov	sp,fp
   17ae0:	df000017 	ldw	fp,0(sp)
   17ae4:	dec00104 	addi	sp,sp,4
   17ae8:	f800283a 	ret

00017aec <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17aec:	defff704 	addi	sp,sp,-36
   17af0:	dfc00815 	stw	ra,32(sp)
   17af4:	df000715 	stw	fp,28(sp)
   17af8:	df000704 	addi	fp,sp,28
   17afc:	e13ffd15 	stw	r4,-12(fp)
   17b00:	e17ffe15 	stw	r5,-8(fp)
   17b04:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17b08:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17b0c:	e0bfff17 	ldw	r2,-4(fp)
   17b10:	1000021e 	bne	r2,zero,17b1c <OSMemNameGet+0x30>
        return (0);
   17b14:	0005883a 	mov	r2,zero
   17b18:	00002d06 	br	17bd0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17b1c:	e0bffd17 	ldw	r2,-12(fp)
   17b20:	1000051e 	bne	r2,zero,17b38 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17b24:	e0bfff17 	ldw	r2,-4(fp)
   17b28:	00c01804 	movi	r3,96
   17b2c:	10c00005 	stb	r3,0(r2)
        return (0);
   17b30:	0005883a 	mov	r2,zero
   17b34:	00002606 	br	17bd0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17b38:	e0bffe17 	ldw	r2,-8(fp)
   17b3c:	1000051e 	bne	r2,zero,17b54 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17b40:	e0bfff17 	ldw	r2,-4(fp)
   17b44:	00c00304 	movi	r3,12
   17b48:	10c00005 	stb	r3,0(r2)
        return (0);
   17b4c:	0005883a 	mov	r2,zero
   17b50:	00001f06 	br	17bd0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17b54:	008000b4 	movhi	r2,2
   17b58:	1090c804 	addi	r2,r2,17184
   17b5c:	10800003 	ldbu	r2,0(r2)
   17b60:	10803fcc 	andi	r2,r2,255
   17b64:	10000526 	beq	r2,zero,17b7c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   17b68:	e0bfff17 	ldw	r2,-4(fp)
   17b6c:	00c00444 	movi	r3,17
   17b70:	10c00005 	stb	r3,0(r2)
        return (0);
   17b74:	0005883a 	mov	r2,zero
   17b78:	00001506 	br	17bd0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b7c:	0005303a 	rdctl	r2,status
   17b80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b84:	e0fffb17 	ldw	r3,-20(fp)
   17b88:	00bfff84 	movi	r2,-2
   17b8c:	1884703a 	and	r2,r3,r2
   17b90:	1001703a 	wrctl	status,r2
  
  return context;
   17b94:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17b98:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   17b9c:	e0bffd17 	ldw	r2,-12(fp)
   17ba0:	10800504 	addi	r2,r2,20
   17ba4:	e13ffe17 	ldw	r4,-8(fp)
   17ba8:	100b883a 	mov	r5,r2
   17bac:	0014d3c0 	call	14d3c <OS_StrCopy>
   17bb0:	e0bffa05 	stb	r2,-24(fp)
   17bb4:	e0bff917 	ldw	r2,-28(fp)
   17bb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17bbc:	e0bffc17 	ldw	r2,-16(fp)
   17bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17bc4:	e0bfff17 	ldw	r2,-4(fp)
   17bc8:	10000005 	stb	zero,0(r2)
    return (len);
   17bcc:	e0bffa03 	ldbu	r2,-24(fp)
}
   17bd0:	e037883a 	mov	sp,fp
   17bd4:	dfc00117 	ldw	ra,4(sp)
   17bd8:	df000017 	ldw	fp,0(sp)
   17bdc:	dec00204 	addi	sp,sp,8
   17be0:	f800283a 	ret

00017be4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17be4:	defff604 	addi	sp,sp,-40
   17be8:	dfc00915 	stw	ra,36(sp)
   17bec:	df000815 	stw	fp,32(sp)
   17bf0:	df000804 	addi	fp,sp,32
   17bf4:	e13ffd15 	stw	r4,-12(fp)
   17bf8:	e17ffe15 	stw	r5,-8(fp)
   17bfc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17c00:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17c04:	e0bfff17 	ldw	r2,-4(fp)
   17c08:	1000011e 	bne	r2,zero,17c10 <OSMemNameSet+0x2c>
        return;
   17c0c:	00003606 	br	17ce8 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   17c10:	e0bffd17 	ldw	r2,-12(fp)
   17c14:	1000041e 	bne	r2,zero,17c28 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   17c18:	e0bfff17 	ldw	r2,-4(fp)
   17c1c:	00c01804 	movi	r3,96
   17c20:	10c00005 	stb	r3,0(r2)
        return;
   17c24:	00003006 	br	17ce8 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17c28:	e0bffe17 	ldw	r2,-8(fp)
   17c2c:	1000041e 	bne	r2,zero,17c40 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   17c30:	e0bfff17 	ldw	r2,-4(fp)
   17c34:	00c00304 	movi	r3,12
   17c38:	10c00005 	stb	r3,0(r2)
        return;
   17c3c:	00002a06 	br	17ce8 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17c40:	008000b4 	movhi	r2,2
   17c44:	1090c804 	addi	r2,r2,17184
   17c48:	10800003 	ldbu	r2,0(r2)
   17c4c:	10803fcc 	andi	r2,r2,255
   17c50:	10000426 	beq	r2,zero,17c64 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   17c54:	e0bfff17 	ldw	r2,-4(fp)
   17c58:	00c00484 	movi	r3,18
   17c5c:	10c00005 	stb	r3,0(r2)
        return;
   17c60:	00002106 	br	17ce8 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c64:	0005303a 	rdctl	r2,status
   17c68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c6c:	e0fffa17 	ldw	r3,-24(fp)
   17c70:	00bfff84 	movi	r2,-2
   17c74:	1884703a 	and	r2,r3,r2
   17c78:	1001703a 	wrctl	status,r2
  
  return context;
   17c7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17c80:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   17c84:	e13ffe17 	ldw	r4,-8(fp)
   17c88:	0014db00 	call	14db0 <OS_StrLen>
   17c8c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17c90:	e0bff903 	ldbu	r2,-28(fp)
   17c94:	10800830 	cmpltui	r2,r2,32
   17c98:	1000081e 	bne	r2,zero,17cbc <OSMemNameSet+0xd8>
   17c9c:	e0bff817 	ldw	r2,-32(fp)
   17ca0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ca4:	e0bffb17 	ldw	r2,-20(fp)
   17ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17cac:	e0bfff17 	ldw	r2,-4(fp)
   17cb0:	00c018c4 	movi	r3,99
   17cb4:	10c00005 	stb	r3,0(r2)
        return;
   17cb8:	00000b06 	br	17ce8 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17cbc:	e0bffd17 	ldw	r2,-12(fp)
   17cc0:	10800504 	addi	r2,r2,20
   17cc4:	1009883a 	mov	r4,r2
   17cc8:	e17ffe17 	ldw	r5,-8(fp)
   17ccc:	0014d3c0 	call	14d3c <OS_StrCopy>
   17cd0:	e0bff817 	ldw	r2,-32(fp)
   17cd4:	e0bffc15 	stw	r2,-16(fp)
   17cd8:	e0bffc17 	ldw	r2,-16(fp)
   17cdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17ce0:	e0bfff17 	ldw	r2,-4(fp)
   17ce4:	10000005 	stb	zero,0(r2)
}
   17ce8:	e037883a 	mov	sp,fp
   17cec:	dfc00117 	ldw	ra,4(sp)
   17cf0:	df000017 	ldw	fp,0(sp)
   17cf4:	dec00204 	addi	sp,sp,8
   17cf8:	f800283a 	ret

00017cfc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   17cfc:	defff904 	addi	sp,sp,-28
   17d00:	df000615 	stw	fp,24(sp)
   17d04:	df000604 	addi	fp,sp,24
   17d08:	e13ffe15 	stw	r4,-8(fp)
   17d0c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17d10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17d14:	e0bffe17 	ldw	r2,-8(fp)
   17d18:	1000021e 	bne	r2,zero,17d24 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17d1c:	00801804 	movi	r2,96
   17d20:	00002806 	br	17dc4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   17d24:	e0bfff17 	ldw	r2,-4(fp)
   17d28:	1000021e 	bne	r2,zero,17d34 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   17d2c:	008017c4 	movi	r2,95
   17d30:	00002406 	br	17dc4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d34:	0005303a 	rdctl	r2,status
   17d38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d3c:	e0fffb17 	ldw	r3,-20(fp)
   17d40:	00bfff84 	movi	r2,-2
   17d44:	1884703a 	and	r2,r3,r2
   17d48:	1001703a 	wrctl	status,r2
  
  return context;
   17d4c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17d50:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   17d54:	e0bffe17 	ldw	r2,-8(fp)
   17d58:	10c00417 	ldw	r3,16(r2)
   17d5c:	e0bffe17 	ldw	r2,-8(fp)
   17d60:	10800317 	ldw	r2,12(r2)
   17d64:	18800636 	bltu	r3,r2,17d80 <OSMemPut+0x84>
   17d68:	e0bffa17 	ldw	r2,-24(fp)
   17d6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d70:	e0bffc17 	ldw	r2,-16(fp)
   17d74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   17d78:	00801784 	movi	r2,94
   17d7c:	00001106 	br	17dc4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17d80:	e0bffe17 	ldw	r2,-8(fp)
   17d84:	10c00117 	ldw	r3,4(r2)
   17d88:	e0bfff17 	ldw	r2,-4(fp)
   17d8c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17d90:	e0bffe17 	ldw	r2,-8(fp)
   17d94:	e0ffff17 	ldw	r3,-4(fp)
   17d98:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   17d9c:	e0bffe17 	ldw	r2,-8(fp)
   17da0:	10800417 	ldw	r2,16(r2)
   17da4:	10c00044 	addi	r3,r2,1
   17da8:	e0bffe17 	ldw	r2,-8(fp)
   17dac:	10c00415 	stw	r3,16(r2)
   17db0:	e0bffa17 	ldw	r2,-24(fp)
   17db4:	e0bffd15 	stw	r2,-12(fp)
   17db8:	e0bffd17 	ldw	r2,-12(fp)
   17dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17dc0:	0005883a 	mov	r2,zero
}
   17dc4:	e037883a 	mov	sp,fp
   17dc8:	df000017 	ldw	fp,0(sp)
   17dcc:	dec00104 	addi	sp,sp,4
   17dd0:	f800283a 	ret

00017dd4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17dd4:	defffa04 	addi	sp,sp,-24
   17dd8:	df000515 	stw	fp,20(sp)
   17ddc:	df000504 	addi	fp,sp,20
   17de0:	e13ffe15 	stw	r4,-8(fp)
   17de4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17de8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   17dec:	e0bffe17 	ldw	r2,-8(fp)
   17df0:	1000021e 	bne	r2,zero,17dfc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   17df4:	00801804 	movi	r2,96
   17df8:	00002c06 	br	17eac <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   17dfc:	e0bfff17 	ldw	r2,-4(fp)
   17e00:	1000021e 	bne	r2,zero,17e0c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   17e04:	00801844 	movi	r2,97
   17e08:	00002806 	br	17eac <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e0c:	0005303a 	rdctl	r2,status
   17e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e14:	e0fffc17 	ldw	r3,-16(fp)
   17e18:	00bfff84 	movi	r2,-2
   17e1c:	1884703a 	and	r2,r3,r2
   17e20:	1001703a 	wrctl	status,r2
  
  return context;
   17e24:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17e28:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   17e2c:	e0bffe17 	ldw	r2,-8(fp)
   17e30:	10c00017 	ldw	r3,0(r2)
   17e34:	e0bfff17 	ldw	r2,-4(fp)
   17e38:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   17e3c:	e0bffe17 	ldw	r2,-8(fp)
   17e40:	10c00117 	ldw	r3,4(r2)
   17e44:	e0bfff17 	ldw	r2,-4(fp)
   17e48:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   17e4c:	e0bffe17 	ldw	r2,-8(fp)
   17e50:	10c00217 	ldw	r3,8(r2)
   17e54:	e0bfff17 	ldw	r2,-4(fp)
   17e58:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   17e5c:	e0bffe17 	ldw	r2,-8(fp)
   17e60:	10c00317 	ldw	r3,12(r2)
   17e64:	e0bfff17 	ldw	r2,-4(fp)
   17e68:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   17e6c:	e0bffe17 	ldw	r2,-8(fp)
   17e70:	10c00417 	ldw	r3,16(r2)
   17e74:	e0bfff17 	ldw	r2,-4(fp)
   17e78:	10c00415 	stw	r3,16(r2)
   17e7c:	e0bffb17 	ldw	r2,-20(fp)
   17e80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e84:	e0bffd17 	ldw	r2,-12(fp)
   17e88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   17e8c:	e0bfff17 	ldw	r2,-4(fp)
   17e90:	10c00317 	ldw	r3,12(r2)
   17e94:	e0bfff17 	ldw	r2,-4(fp)
   17e98:	10800417 	ldw	r2,16(r2)
   17e9c:	1887c83a 	sub	r3,r3,r2
   17ea0:	e0bfff17 	ldw	r2,-4(fp)
   17ea4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17ea8:	0005883a 	mov	r2,zero
}
   17eac:	e037883a 	mov	sp,fp
   17eb0:	df000017 	ldw	fp,0(sp)
   17eb4:	dec00104 	addi	sp,sp,4
   17eb8:	f800283a 	ret

00017ebc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   17ebc:	defffc04 	addi	sp,sp,-16
   17ec0:	dfc00315 	stw	ra,12(sp)
   17ec4:	df000215 	stw	fp,8(sp)
   17ec8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   17ecc:	01000134 	movhi	r4,4
   17ed0:	2109d104 	addi	r4,r4,10052
   17ed4:	01430c04 	movi	r5,3120
   17ed8:	0014b4c0 	call	14b4c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   17edc:	00800134 	movhi	r2,4
   17ee0:	1089d104 	addi	r2,r2,10052
   17ee4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17ee8:	e03fff0d 	sth	zero,-4(fp)
   17eec:	00001306 	br	17f3c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17ef0:	e0bfff0b 	ldhu	r2,-4(fp)
   17ef4:	10800044 	addi	r2,r2,1
   17ef8:	10c00d24 	muli	r3,r2,52
   17efc:	00800134 	movhi	r2,4
   17f00:	1089d104 	addi	r2,r2,10052
   17f04:	1887883a 	add	r3,r3,r2
   17f08:	e0bffe17 	ldw	r2,-8(fp)
   17f0c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17f10:	e0bffe17 	ldw	r2,-8(fp)
   17f14:	00c00fc4 	movi	r3,63
   17f18:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   17f1c:	e0bffe17 	ldw	r2,-8(fp)
   17f20:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   17f24:	e0bffe17 	ldw	r2,-8(fp)
   17f28:	10800d04 	addi	r2,r2,52
   17f2c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17f30:	e0bfff0b 	ldhu	r2,-4(fp)
   17f34:	10800044 	addi	r2,r2,1
   17f38:	e0bfff0d 	sth	r2,-4(fp)
   17f3c:	e0bfff0b 	ldhu	r2,-4(fp)
   17f40:	10800ef0 	cmpltui	r2,r2,59
   17f44:	103fea1e 	bne	r2,zero,17ef0 <__alt_mem_Flash_flash_data+0xf4017ef0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   17f48:	e0bffe17 	ldw	r2,-8(fp)
   17f4c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   17f50:	e0bffe17 	ldw	r2,-8(fp)
   17f54:	00c00fc4 	movi	r3,63
   17f58:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   17f5c:	e0bffe17 	ldw	r2,-8(fp)
   17f60:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17f64:	008000b4 	movhi	r2,2
   17f68:	1090c304 	addi	r2,r2,17164
   17f6c:	00c00134 	movhi	r3,4
   17f70:	18c9d104 	addi	r3,r3,10052
   17f74:	10c00015 	stw	r3,0(r2)
#endif
}
   17f78:	e037883a 	mov	sp,fp
   17f7c:	dfc00117 	ldw	ra,4(sp)
   17f80:	df000017 	ldw	fp,0(sp)
   17f84:	dec00204 	addi	sp,sp,8
   17f88:	f800283a 	ret

00017f8c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17f8c:	defff804 	addi	sp,sp,-32
   17f90:	df000715 	stw	fp,28(sp)
   17f94:	df000704 	addi	fp,sp,28
   17f98:	e13ffe15 	stw	r4,-8(fp)
   17f9c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17fa0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17fa4:	e0bfff17 	ldw	r2,-4(fp)
   17fa8:	1000021e 	bne	r2,zero,17fb4 <OSQAccept+0x28>
        return ((void *)0);
   17fac:	0005883a 	mov	r2,zero
   17fb0:	00004206 	br	180bc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17fb4:	e0bffe17 	ldw	r2,-8(fp)
   17fb8:	1000051e 	bne	r2,zero,17fd0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17fbc:	e0bfff17 	ldw	r2,-4(fp)
   17fc0:	00c00104 	movi	r3,4
   17fc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17fc8:	0005883a 	mov	r2,zero
   17fcc:	00003b06 	br	180bc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17fd0:	e0bffe17 	ldw	r2,-8(fp)
   17fd4:	10800003 	ldbu	r2,0(r2)
   17fd8:	10803fcc 	andi	r2,r2,255
   17fdc:	108000a0 	cmpeqi	r2,r2,2
   17fe0:	1000051e 	bne	r2,zero,17ff8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17fe4:	e0bfff17 	ldw	r2,-4(fp)
   17fe8:	00c00044 	movi	r3,1
   17fec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17ff0:	0005883a 	mov	r2,zero
   17ff4:	00003106 	br	180bc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ff8:	0005303a 	rdctl	r2,status
   17ffc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18000:	e0fffc17 	ldw	r3,-16(fp)
   18004:	00bfff84 	movi	r2,-2
   18008:	1884703a 	and	r2,r3,r2
   1800c:	1001703a 	wrctl	status,r2
  
  return context;
   18010:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18014:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18018:	e0bffe17 	ldw	r2,-8(fp)
   1801c:	10800117 	ldw	r2,4(r2)
   18020:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18024:	e0bffb17 	ldw	r2,-20(fp)
   18028:	1080058b 	ldhu	r2,22(r2)
   1802c:	10bfffcc 	andi	r2,r2,65535
   18030:	10001926 	beq	r2,zero,18098 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   18034:	e0bffb17 	ldw	r2,-20(fp)
   18038:	10800417 	ldw	r2,16(r2)
   1803c:	11000104 	addi	r4,r2,4
   18040:	e0fffb17 	ldw	r3,-20(fp)
   18044:	19000415 	stw	r4,16(r3)
   18048:	10800017 	ldw	r2,0(r2)
   1804c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18050:	e0bffb17 	ldw	r2,-20(fp)
   18054:	1080058b 	ldhu	r2,22(r2)
   18058:	10bfffc4 	addi	r2,r2,-1
   1805c:	1007883a 	mov	r3,r2
   18060:	e0bffb17 	ldw	r2,-20(fp)
   18064:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18068:	e0bffb17 	ldw	r2,-20(fp)
   1806c:	10c00417 	ldw	r3,16(r2)
   18070:	e0bffb17 	ldw	r2,-20(fp)
   18074:	10800217 	ldw	r2,8(r2)
   18078:	1880041e 	bne	r3,r2,1808c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1807c:	e0bffb17 	ldw	r2,-20(fp)
   18080:	10c00117 	ldw	r3,4(r2)
   18084:	e0bffb17 	ldw	r2,-20(fp)
   18088:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1808c:	e0bfff17 	ldw	r2,-4(fp)
   18090:	10000005 	stb	zero,0(r2)
   18094:	00000406 	br	180a8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   18098:	e0bfff17 	ldw	r2,-4(fp)
   1809c:	00c007c4 	movi	r3,31
   180a0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   180a4:	e03ff915 	stw	zero,-28(fp)
   180a8:	e0bffa17 	ldw	r2,-24(fp)
   180ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180b0:	e0bffd17 	ldw	r2,-12(fp)
   180b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   180b8:	e0bff917 	ldw	r2,-28(fp)
}
   180bc:	e037883a 	mov	sp,fp
   180c0:	df000017 	ldw	fp,0(sp)
   180c4:	dec00104 	addi	sp,sp,4
   180c8:	f800283a 	ret

000180cc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   180cc:	defff404 	addi	sp,sp,-48
   180d0:	dfc00b15 	stw	ra,44(sp)
   180d4:	df000a15 	stw	fp,40(sp)
   180d8:	df000a04 	addi	fp,sp,40
   180dc:	e13ffe15 	stw	r4,-8(fp)
   180e0:	2805883a 	mov	r2,r5
   180e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   180e8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   180ec:	008000b4 	movhi	r2,2
   180f0:	1090c804 	addi	r2,r2,17184
   180f4:	10800003 	ldbu	r2,0(r2)
   180f8:	10803fcc 	andi	r2,r2,255
   180fc:	10000226 	beq	r2,zero,18108 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   18100:	0005883a 	mov	r2,zero
   18104:	00006b06 	br	182b4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18108:	0005303a 	rdctl	r2,status
   1810c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18110:	e0fff917 	ldw	r3,-28(fp)
   18114:	00bfff84 	movi	r2,-2
   18118:	1884703a 	and	r2,r3,r2
   1811c:	1001703a 	wrctl	status,r2
  
  return context;
   18120:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18124:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   18128:	008000b4 	movhi	r2,2
   1812c:	1090c704 	addi	r2,r2,17180
   18130:	10800017 	ldw	r2,0(r2)
   18134:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   18138:	008000b4 	movhi	r2,2
   1813c:	1090c704 	addi	r2,r2,17180
   18140:	10800017 	ldw	r2,0(r2)
   18144:	10000726 	beq	r2,zero,18164 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18148:	008000b4 	movhi	r2,2
   1814c:	1090c704 	addi	r2,r2,17180
   18150:	10800017 	ldw	r2,0(r2)
   18154:	10c00117 	ldw	r3,4(r2)
   18158:	008000b4 	movhi	r2,2
   1815c:	1090c704 	addi	r2,r2,17180
   18160:	10c00015 	stw	r3,0(r2)
   18164:	e0bff717 	ldw	r2,-36(fp)
   18168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1816c:	e0bffa17 	ldw	r2,-24(fp)
   18170:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   18174:	e0bff617 	ldw	r2,-40(fp)
   18178:	10004d26 	beq	r2,zero,182b0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1817c:	0005303a 	rdctl	r2,status
   18180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18184:	e0fffb17 	ldw	r3,-20(fp)
   18188:	00bfff84 	movi	r2,-2
   1818c:	1884703a 	and	r2,r3,r2
   18190:	1001703a 	wrctl	status,r2
  
  return context;
   18194:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   18198:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1819c:	008000b4 	movhi	r2,2
   181a0:	1090c504 	addi	r2,r2,17172
   181a4:	10800017 	ldw	r2,0(r2)
   181a8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   181ac:	e0bff817 	ldw	r2,-32(fp)
   181b0:	10003126 	beq	r2,zero,18278 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   181b4:	008000b4 	movhi	r2,2
   181b8:	1090c504 	addi	r2,r2,17172
   181bc:	10800017 	ldw	r2,0(r2)
   181c0:	10c00017 	ldw	r3,0(r2)
   181c4:	008000b4 	movhi	r2,2
   181c8:	1090c504 	addi	r2,r2,17172
   181cc:	10c00015 	stw	r3,0(r2)
   181d0:	e0bff717 	ldw	r2,-36(fp)
   181d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181d8:	e0bffc17 	ldw	r2,-16(fp)
   181dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   181e0:	e0bff817 	ldw	r2,-32(fp)
   181e4:	e0fffe17 	ldw	r3,-8(fp)
   181e8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   181ec:	e0bfff0b 	ldhu	r2,-4(fp)
   181f0:	1085883a 	add	r2,r2,r2
   181f4:	1085883a 	add	r2,r2,r2
   181f8:	1007883a 	mov	r3,r2
   181fc:	e0bffe17 	ldw	r2,-8(fp)
   18200:	10c7883a 	add	r3,r2,r3
   18204:	e0bff817 	ldw	r2,-32(fp)
   18208:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1820c:	e0bff817 	ldw	r2,-32(fp)
   18210:	e0fffe17 	ldw	r3,-8(fp)
   18214:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   18218:	e0bff817 	ldw	r2,-32(fp)
   1821c:	e0fffe17 	ldw	r3,-8(fp)
   18220:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   18224:	e0bff817 	ldw	r2,-32(fp)
   18228:	e0ffff0b 	ldhu	r3,-4(fp)
   1822c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   18230:	e0bff817 	ldw	r2,-32(fp)
   18234:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   18238:	e0bff617 	ldw	r2,-40(fp)
   1823c:	00c00084 	movi	r3,2
   18240:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   18244:	e0bff617 	ldw	r2,-40(fp)
   18248:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1824c:	e0bff617 	ldw	r2,-40(fp)
   18250:	e0fff817 	ldw	r3,-32(fp)
   18254:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   18258:	e0bff617 	ldw	r2,-40(fp)
   1825c:	00c00fc4 	movi	r3,63
   18260:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   18264:	e0bff617 	ldw	r2,-40(fp)
   18268:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1826c:	e13ff617 	ldw	r4,-40(fp)
   18270:	00147880 	call	14788 <OS_EventWaitListInit>
   18274:	00000e06 	br	182b0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   18278:	008000b4 	movhi	r2,2
   1827c:	1090c704 	addi	r2,r2,17180
   18280:	10c00017 	ldw	r3,0(r2)
   18284:	e0bff617 	ldw	r2,-40(fp)
   18288:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1828c:	008000b4 	movhi	r2,2
   18290:	1090c704 	addi	r2,r2,17180
   18294:	e0fff617 	ldw	r3,-40(fp)
   18298:	10c00015 	stw	r3,0(r2)
   1829c:	e0bff717 	ldw	r2,-36(fp)
   182a0:	e0bffd15 	stw	r2,-12(fp)
   182a4:	e0bffd17 	ldw	r2,-12(fp)
   182a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   182ac:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   182b0:	e0bff617 	ldw	r2,-40(fp)
}
   182b4:	e037883a 	mov	sp,fp
   182b8:	dfc00117 	ldw	ra,4(sp)
   182bc:	df000017 	ldw	fp,0(sp)
   182c0:	dec00204 	addi	sp,sp,8
   182c4:	f800283a 	ret

000182c8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   182c8:	defff204 	addi	sp,sp,-56
   182cc:	dfc00d15 	stw	ra,52(sp)
   182d0:	df000c15 	stw	fp,48(sp)
   182d4:	df000c04 	addi	fp,sp,48
   182d8:	e13ffd15 	stw	r4,-12(fp)
   182dc:	2805883a 	mov	r2,r5
   182e0:	e1bfff15 	stw	r6,-4(fp)
   182e4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   182e8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   182ec:	e0bfff17 	ldw	r2,-4(fp)
   182f0:	1000021e 	bne	r2,zero,182fc <OSQDel+0x34>
        return (pevent);
   182f4:	e0bffd17 	ldw	r2,-12(fp)
   182f8:	0000a006 	br	1857c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   182fc:	e0bffd17 	ldw	r2,-12(fp)
   18300:	1000051e 	bne	r2,zero,18318 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18304:	e0bfff17 	ldw	r2,-4(fp)
   18308:	00c00104 	movi	r3,4
   1830c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18310:	e0bffd17 	ldw	r2,-12(fp)
   18314:	00009906 	br	1857c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18318:	e0bffd17 	ldw	r2,-12(fp)
   1831c:	10800003 	ldbu	r2,0(r2)
   18320:	10803fcc 	andi	r2,r2,255
   18324:	108000a0 	cmpeqi	r2,r2,2
   18328:	1000051e 	bne	r2,zero,18340 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1832c:	e0bfff17 	ldw	r2,-4(fp)
   18330:	00c00044 	movi	r3,1
   18334:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18338:	e0bffd17 	ldw	r2,-12(fp)
   1833c:	00008f06 	br	1857c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18340:	008000b4 	movhi	r2,2
   18344:	1090c804 	addi	r2,r2,17184
   18348:	10800003 	ldbu	r2,0(r2)
   1834c:	10803fcc 	andi	r2,r2,255
   18350:	10000526 	beq	r2,zero,18368 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	00c003c4 	movi	r3,15
   1835c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18360:	e0bffd17 	ldw	r2,-12(fp)
   18364:	00008506 	br	1857c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18368:	0005303a 	rdctl	r2,status
   1836c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18370:	e0fff817 	ldw	r3,-32(fp)
   18374:	00bfff84 	movi	r2,-2
   18378:	1884703a 	and	r2,r3,r2
   1837c:	1001703a 	wrctl	status,r2
  
  return context;
   18380:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18384:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   18388:	e0bffd17 	ldw	r2,-12(fp)
   1838c:	10800283 	ldbu	r2,10(r2)
   18390:	10803fcc 	andi	r2,r2,255
   18394:	10000326 	beq	r2,zero,183a4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18398:	00800044 	movi	r2,1
   1839c:	e0bff405 	stb	r2,-48(fp)
   183a0:	00000106 	br	183a8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   183a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   183a8:	e0bffe03 	ldbu	r2,-8(fp)
   183ac:	10000326 	beq	r2,zero,183bc <OSQDel+0xf4>
   183b0:	10800060 	cmpeqi	r2,r2,1
   183b4:	1000381e 	bne	r2,zero,18498 <OSQDel+0x1d0>
   183b8:	00006506 	br	18550 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   183bc:	e0bff403 	ldbu	r2,-48(fp)
   183c0:	1000261e 	bne	r2,zero,1845c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   183c4:	e0bffd17 	ldw	r2,-12(fp)
   183c8:	00c00fc4 	movi	r3,63
   183cc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   183d0:	e0bffd17 	ldw	r2,-12(fp)
   183d4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   183d8:	e0bffd17 	ldw	r2,-12(fp)
   183dc:	10800117 	ldw	r2,4(r2)
   183e0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   183e4:	008000b4 	movhi	r2,2
   183e8:	1090c504 	addi	r2,r2,17172
   183ec:	10c00017 	ldw	r3,0(r2)
   183f0:	e0bff717 	ldw	r2,-36(fp)
   183f4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   183f8:	008000b4 	movhi	r2,2
   183fc:	1090c504 	addi	r2,r2,17172
   18400:	e0fff717 	ldw	r3,-36(fp)
   18404:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18408:	e0bffd17 	ldw	r2,-12(fp)
   1840c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18410:	008000b4 	movhi	r2,2
   18414:	1090c704 	addi	r2,r2,17180
   18418:	10c00017 	ldw	r3,0(r2)
   1841c:	e0bffd17 	ldw	r2,-12(fp)
   18420:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18424:	e0bffd17 	ldw	r2,-12(fp)
   18428:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1842c:	008000b4 	movhi	r2,2
   18430:	1090c704 	addi	r2,r2,17180
   18434:	e0fffd17 	ldw	r3,-12(fp)
   18438:	10c00015 	stw	r3,0(r2)
   1843c:	e0bff617 	ldw	r2,-40(fp)
   18440:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18444:	e0bff917 	ldw	r2,-28(fp)
   18448:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   18454:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   18458:	00004706 	br	18578 <OSQDel+0x2b0>
   1845c:	e0bff617 	ldw	r2,-40(fp)
   18460:	e0bffa15 	stw	r2,-24(fp)
   18464:	e0bffa17 	ldw	r2,-24(fp)
   18468:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1846c:	e0bfff17 	ldw	r2,-4(fp)
   18470:	00c01244 	movi	r3,73
   18474:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   18478:	e0bffd17 	ldw	r2,-12(fp)
   1847c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   18480:	00003d06 	br	18578 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   18484:	e13ffd17 	ldw	r4,-12(fp)
   18488:	000b883a 	mov	r5,zero
   1848c:	01800104 	movi	r6,4
   18490:	000f883a 	mov	r7,zero
   18494:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   18498:	e0bffd17 	ldw	r2,-12(fp)
   1849c:	10800283 	ldbu	r2,10(r2)
   184a0:	10803fcc 	andi	r2,r2,255
   184a4:	103ff71e 	bne	r2,zero,18484 <__alt_mem_Flash_flash_data+0xf4018484>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   184a8:	e0bffd17 	ldw	r2,-12(fp)
   184ac:	00c00fc4 	movi	r3,63
   184b0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   184b4:	e0bffd17 	ldw	r2,-12(fp)
   184b8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   184bc:	e0bffd17 	ldw	r2,-12(fp)
   184c0:	10800117 	ldw	r2,4(r2)
   184c4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   184c8:	008000b4 	movhi	r2,2
   184cc:	1090c504 	addi	r2,r2,17172
   184d0:	10c00017 	ldw	r3,0(r2)
   184d4:	e0bff717 	ldw	r2,-36(fp)
   184d8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   184dc:	008000b4 	movhi	r2,2
   184e0:	1090c504 	addi	r2,r2,17172
   184e4:	e0fff717 	ldw	r3,-36(fp)
   184e8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   184ec:	e0bffd17 	ldw	r2,-12(fp)
   184f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   184f4:	008000b4 	movhi	r2,2
   184f8:	1090c704 	addi	r2,r2,17180
   184fc:	10c00017 	ldw	r3,0(r2)
   18500:	e0bffd17 	ldw	r2,-12(fp)
   18504:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18508:	e0bffd17 	ldw	r2,-12(fp)
   1850c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18510:	008000b4 	movhi	r2,2
   18514:	1090c704 	addi	r2,r2,17180
   18518:	e0fffd17 	ldw	r3,-12(fp)
   1851c:	10c00015 	stw	r3,0(r2)
   18520:	e0bff617 	ldw	r2,-40(fp)
   18524:	e0bffb15 	stw	r2,-20(fp)
   18528:	e0bffb17 	ldw	r2,-20(fp)
   1852c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18530:	e0bff403 	ldbu	r2,-48(fp)
   18534:	10800058 	cmpnei	r2,r2,1
   18538:	1000011e 	bne	r2,zero,18540 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1853c:	0014c000 	call	14c00 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18540:	e0bfff17 	ldw	r2,-4(fp)
   18544:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   18548:	e03ff515 	stw	zero,-44(fp)
             break;
   1854c:	00000a06 	br	18578 <OSQDel+0x2b0>
   18550:	e0bff617 	ldw	r2,-40(fp)
   18554:	e0bffc15 	stw	r2,-16(fp)
   18558:	e0bffc17 	ldw	r2,-16(fp)
   1855c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18560:	e0bfff17 	ldw	r2,-4(fp)
   18564:	00c001c4 	movi	r3,7
   18568:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1856c:	e0bffd17 	ldw	r2,-12(fp)
   18570:	e0bff515 	stw	r2,-44(fp)
             break;
   18574:	0001883a 	nop
    }
    return (pevent_return);
   18578:	e0bff517 	ldw	r2,-44(fp)
}
   1857c:	e037883a 	mov	sp,fp
   18580:	dfc00117 	ldw	ra,4(sp)
   18584:	df000017 	ldw	fp,0(sp)
   18588:	dec00204 	addi	sp,sp,8
   1858c:	f800283a 	ret

00018590 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   18590:	defffa04 	addi	sp,sp,-24
   18594:	df000515 	stw	fp,20(sp)
   18598:	df000504 	addi	fp,sp,20
   1859c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   185a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   185a4:	e0bfff17 	ldw	r2,-4(fp)
   185a8:	1000021e 	bne	r2,zero,185b4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   185ac:	00800104 	movi	r2,4
   185b0:	00002106 	br	18638 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   185b4:	e0bfff17 	ldw	r2,-4(fp)
   185b8:	10800003 	ldbu	r2,0(r2)
   185bc:	10803fcc 	andi	r2,r2,255
   185c0:	108000a0 	cmpeqi	r2,r2,2
   185c4:	1000021e 	bne	r2,zero,185d0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   185c8:	00800044 	movi	r2,1
   185cc:	00001a06 	br	18638 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185d0:	0005303a 	rdctl	r2,status
   185d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185d8:	e0fffd17 	ldw	r3,-12(fp)
   185dc:	00bfff84 	movi	r2,-2
   185e0:	1884703a 	and	r2,r3,r2
   185e4:	1001703a 	wrctl	status,r2
  
  return context;
   185e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   185ec:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   185f0:	e0bfff17 	ldw	r2,-4(fp)
   185f4:	10800117 	ldw	r2,4(r2)
   185f8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   185fc:	e0bffc17 	ldw	r2,-16(fp)
   18600:	10c00117 	ldw	r3,4(r2)
   18604:	e0bffc17 	ldw	r2,-16(fp)
   18608:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1860c:	e0bffc17 	ldw	r2,-16(fp)
   18610:	10c00117 	ldw	r3,4(r2)
   18614:	e0bffc17 	ldw	r2,-16(fp)
   18618:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1861c:	e0bffc17 	ldw	r2,-16(fp)
   18620:	1000058d 	sth	zero,22(r2)
   18624:	e0bffb17 	ldw	r2,-20(fp)
   18628:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1862c:	e0bffe17 	ldw	r2,-8(fp)
   18630:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18634:	0005883a 	mov	r2,zero
}
   18638:	e037883a 	mov	sp,fp
   1863c:	df000017 	ldw	fp,0(sp)
   18640:	dec00104 	addi	sp,sp,4
   18644:	f800283a 	ret

00018648 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18648:	defff304 	addi	sp,sp,-52
   1864c:	dfc00c15 	stw	ra,48(sp)
   18650:	df000b15 	stw	fp,44(sp)
   18654:	df000b04 	addi	fp,sp,44
   18658:	e13ffd15 	stw	r4,-12(fp)
   1865c:	2805883a 	mov	r2,r5
   18660:	e1bfff15 	stw	r6,-4(fp)
   18664:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18668:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1866c:	e0bfff17 	ldw	r2,-4(fp)
   18670:	1000021e 	bne	r2,zero,1867c <OSQPend+0x34>
        return ((void *)0);
   18674:	0005883a 	mov	r2,zero
   18678:	0000ad06 	br	18930 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1867c:	e0bffd17 	ldw	r2,-12(fp)
   18680:	1000051e 	bne	r2,zero,18698 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18684:	e0bfff17 	ldw	r2,-4(fp)
   18688:	00c00104 	movi	r3,4
   1868c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18690:	0005883a 	mov	r2,zero
   18694:	0000a606 	br	18930 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   18698:	e0bffd17 	ldw	r2,-12(fp)
   1869c:	10800003 	ldbu	r2,0(r2)
   186a0:	10803fcc 	andi	r2,r2,255
   186a4:	108000a0 	cmpeqi	r2,r2,2
   186a8:	1000051e 	bne	r2,zero,186c0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   186ac:	e0bfff17 	ldw	r2,-4(fp)
   186b0:	00c00044 	movi	r3,1
   186b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186b8:	0005883a 	mov	r2,zero
   186bc:	00009c06 	br	18930 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   186c0:	008000b4 	movhi	r2,2
   186c4:	1090c804 	addi	r2,r2,17184
   186c8:	10800003 	ldbu	r2,0(r2)
   186cc:	10803fcc 	andi	r2,r2,255
   186d0:	10000526 	beq	r2,zero,186e8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   186d4:	e0bfff17 	ldw	r2,-4(fp)
   186d8:	00c00084 	movi	r3,2
   186dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   186e0:	0005883a 	mov	r2,zero
   186e4:	00009206 	br	18930 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   186e8:	008000b4 	movhi	r2,2
   186ec:	1090ba04 	addi	r2,r2,17128
   186f0:	10800003 	ldbu	r2,0(r2)
   186f4:	10803fcc 	andi	r2,r2,255
   186f8:	10000526 	beq	r2,zero,18710 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   186fc:	e0bfff17 	ldw	r2,-4(fp)
   18700:	00c00344 	movi	r3,13
   18704:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18708:	0005883a 	mov	r2,zero
   1870c:	00008806 	br	18930 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18710:	0005303a 	rdctl	r2,status
   18714:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18718:	e0fff817 	ldw	r3,-32(fp)
   1871c:	00bfff84 	movi	r2,-2
   18720:	1884703a 	and	r2,r3,r2
   18724:	1001703a 	wrctl	status,r2
  
  return context;
   18728:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1872c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18730:	e0bffd17 	ldw	r2,-12(fp)
   18734:	10800117 	ldw	r2,4(r2)
   18738:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1873c:	e0bff717 	ldw	r2,-36(fp)
   18740:	1080058b 	ldhu	r2,22(r2)
   18744:	10bfffcc 	andi	r2,r2,65535
   18748:	10001e26 	beq	r2,zero,187c4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1874c:	e0bff717 	ldw	r2,-36(fp)
   18750:	10800417 	ldw	r2,16(r2)
   18754:	11000104 	addi	r4,r2,4
   18758:	e0fff717 	ldw	r3,-36(fp)
   1875c:	19000415 	stw	r4,16(r3)
   18760:	10800017 	ldw	r2,0(r2)
   18764:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   18768:	e0bff717 	ldw	r2,-36(fp)
   1876c:	1080058b 	ldhu	r2,22(r2)
   18770:	10bfffc4 	addi	r2,r2,-1
   18774:	1007883a 	mov	r3,r2
   18778:	e0bff717 	ldw	r2,-36(fp)
   1877c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18780:	e0bff717 	ldw	r2,-36(fp)
   18784:	10c00417 	ldw	r3,16(r2)
   18788:	e0bff717 	ldw	r2,-36(fp)
   1878c:	10800217 	ldw	r2,8(r2)
   18790:	1880041e 	bne	r3,r2,187a4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   18794:	e0bff717 	ldw	r2,-36(fp)
   18798:	10c00117 	ldw	r3,4(r2)
   1879c:	e0bff717 	ldw	r2,-36(fp)
   187a0:	10c00415 	stw	r3,16(r2)
   187a4:	e0bff617 	ldw	r2,-40(fp)
   187a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187ac:	e0bff917 	ldw	r2,-28(fp)
   187b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   187b4:	e0bfff17 	ldw	r2,-4(fp)
   187b8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   187bc:	e0bff517 	ldw	r2,-44(fp)
   187c0:	00005b06 	br	18930 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   187c4:	008000b4 	movhi	r2,2
   187c8:	1090c904 	addi	r2,r2,17188
   187cc:	10c00017 	ldw	r3,0(r2)
   187d0:	008000b4 	movhi	r2,2
   187d4:	1090c904 	addi	r2,r2,17188
   187d8:	10800017 	ldw	r2,0(r2)
   187dc:	10800c03 	ldbu	r2,48(r2)
   187e0:	10800114 	ori	r2,r2,4
   187e4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   187e8:	008000b4 	movhi	r2,2
   187ec:	1090c904 	addi	r2,r2,17188
   187f0:	10800017 	ldw	r2,0(r2)
   187f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   187f8:	008000b4 	movhi	r2,2
   187fc:	1090c904 	addi	r2,r2,17188
   18800:	10800017 	ldw	r2,0(r2)
   18804:	e0fffe0b 	ldhu	r3,-8(fp)
   18808:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1880c:	e13ffd17 	ldw	r4,-12(fp)
   18810:	00143800 	call	14380 <OS_EventTaskWait>
   18814:	e0bff617 	ldw	r2,-40(fp)
   18818:	e0bffa15 	stw	r2,-24(fp)
   1881c:	e0bffa17 	ldw	r2,-24(fp)
   18820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   18824:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18828:	0005303a 	rdctl	r2,status
   1882c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18830:	e0fffb17 	ldw	r3,-20(fp)
   18834:	00bfff84 	movi	r2,-2
   18838:	1884703a 	and	r2,r3,r2
   1883c:	1001703a 	wrctl	status,r2
  
  return context;
   18840:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   18844:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   18848:	008000b4 	movhi	r2,2
   1884c:	1090c904 	addi	r2,r2,17188
   18850:	10800017 	ldw	r2,0(r2)
   18854:	10800c43 	ldbu	r2,49(r2)
   18858:	10803fcc 	andi	r2,r2,255
   1885c:	10000326 	beq	r2,zero,1886c <OSQPend+0x224>
   18860:	108000a0 	cmpeqi	r2,r2,2
   18864:	1000091e 	bne	r2,zero,1888c <OSQPend+0x244>
   18868:	00000d06 	br	188a0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1886c:	008000b4 	movhi	r2,2
   18870:	1090c904 	addi	r2,r2,17188
   18874:	10800017 	ldw	r2,0(r2)
   18878:	10800917 	ldw	r2,36(r2)
   1887c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   18880:	e0bfff17 	ldw	r2,-4(fp)
   18884:	10000005 	stb	zero,0(r2)
             break;
   18888:	00001006 	br	188cc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1888c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18890:	e0bfff17 	ldw	r2,-4(fp)
   18894:	00c00384 	movi	r3,14
   18898:	10c00005 	stb	r3,0(r2)
             break;
   1889c:	00000b06 	br	188cc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   188a0:	008000b4 	movhi	r2,2
   188a4:	1090c904 	addi	r2,r2,17188
   188a8:	10800017 	ldw	r2,0(r2)
   188ac:	1009883a 	mov	r4,r2
   188b0:	e17ffd17 	ldw	r5,-12(fp)
   188b4:	00145d80 	call	145d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   188b8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   188bc:	e0bfff17 	ldw	r2,-4(fp)
   188c0:	00c00284 	movi	r3,10
   188c4:	10c00005 	stb	r3,0(r2)
             break;
   188c8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   188cc:	008000b4 	movhi	r2,2
   188d0:	1090c904 	addi	r2,r2,17188
   188d4:	10800017 	ldw	r2,0(r2)
   188d8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   188dc:	008000b4 	movhi	r2,2
   188e0:	1090c904 	addi	r2,r2,17188
   188e4:	10800017 	ldw	r2,0(r2)
   188e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   188ec:	008000b4 	movhi	r2,2
   188f0:	1090c904 	addi	r2,r2,17188
   188f4:	10800017 	ldw	r2,0(r2)
   188f8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   188fc:	008000b4 	movhi	r2,2
   18900:	1090c904 	addi	r2,r2,17188
   18904:	10800017 	ldw	r2,0(r2)
   18908:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1890c:	008000b4 	movhi	r2,2
   18910:	1090c904 	addi	r2,r2,17188
   18914:	10800017 	ldw	r2,0(r2)
   18918:	10000915 	stw	zero,36(r2)
   1891c:	e0bff617 	ldw	r2,-40(fp)
   18920:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18924:	e0bffc17 	ldw	r2,-16(fp)
   18928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1892c:	e0bff517 	ldw	r2,-44(fp)
}
   18930:	e037883a 	mov	sp,fp
   18934:	dfc00117 	ldw	ra,4(sp)
   18938:	df000017 	ldw	fp,0(sp)
   1893c:	dec00204 	addi	sp,sp,8
   18940:	f800283a 	ret

00018944 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18944:	defff604 	addi	sp,sp,-40
   18948:	dfc00915 	stw	ra,36(sp)
   1894c:	df000815 	stw	fp,32(sp)
   18950:	df000804 	addi	fp,sp,32
   18954:	e13ffd15 	stw	r4,-12(fp)
   18958:	2805883a 	mov	r2,r5
   1895c:	e1bfff15 	stw	r6,-4(fp)
   18960:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18964:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18968:	e0bfff17 	ldw	r2,-4(fp)
   1896c:	1000021e 	bne	r2,zero,18978 <OSQPendAbort+0x34>
        return (0);
   18970:	0005883a 	mov	r2,zero
   18974:	00004906 	br	18a9c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18978:	e0bffd17 	ldw	r2,-12(fp)
   1897c:	1000051e 	bne	r2,zero,18994 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18980:	e0bfff17 	ldw	r2,-4(fp)
   18984:	00c00104 	movi	r3,4
   18988:	10c00005 	stb	r3,0(r2)
        return (0);
   1898c:	0005883a 	mov	r2,zero
   18990:	00004206 	br	18a9c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18994:	e0bffd17 	ldw	r2,-12(fp)
   18998:	10800003 	ldbu	r2,0(r2)
   1899c:	10803fcc 	andi	r2,r2,255
   189a0:	108000a0 	cmpeqi	r2,r2,2
   189a4:	1000051e 	bne	r2,zero,189bc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   189a8:	e0bfff17 	ldw	r2,-4(fp)
   189ac:	00c00044 	movi	r3,1
   189b0:	10c00005 	stb	r3,0(r2)
        return (0);
   189b4:	0005883a 	mov	r2,zero
   189b8:	00003806 	br	18a9c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189bc:	0005303a 	rdctl	r2,status
   189c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189c4:	e0fffa17 	ldw	r3,-24(fp)
   189c8:	00bfff84 	movi	r2,-2
   189cc:	1884703a 	and	r2,r3,r2
   189d0:	1001703a 	wrctl	status,r2
  
  return context;
   189d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   189d8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   189dc:	e0bffd17 	ldw	r2,-12(fp)
   189e0:	10800283 	ldbu	r2,10(r2)
   189e4:	10803fcc 	andi	r2,r2,255
   189e8:	10002526 	beq	r2,zero,18a80 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   189ec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   189f0:	e0bffe03 	ldbu	r2,-8(fp)
   189f4:	10800060 	cmpeqi	r2,r2,1
   189f8:	10000e26 	beq	r2,zero,18a34 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   189fc:	00000806 	br	18a20 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18a00:	e13ffd17 	ldw	r4,-12(fp)
   18a04:	000b883a 	mov	r5,zero
   18a08:	01800104 	movi	r6,4
   18a0c:	01c00084 	movi	r7,2
   18a10:	00141e80 	call	141e8 <OS_EventTaskRdy>
                     nbr_tasks++;
   18a14:	e0bff803 	ldbu	r2,-32(fp)
   18a18:	10800044 	addi	r2,r2,1
   18a1c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   18a20:	e0bffd17 	ldw	r2,-12(fp)
   18a24:	10800283 	ldbu	r2,10(r2)
   18a28:	10803fcc 	andi	r2,r2,255
   18a2c:	103ff41e 	bne	r2,zero,18a00 <__alt_mem_Flash_flash_data+0xf4018a00>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   18a30:	00000906 	br	18a58 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   18a34:	e13ffd17 	ldw	r4,-12(fp)
   18a38:	000b883a 	mov	r5,zero
   18a3c:	01800104 	movi	r6,4
   18a40:	01c00084 	movi	r7,2
   18a44:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 nbr_tasks++;
   18a48:	e0bff803 	ldbu	r2,-32(fp)
   18a4c:	10800044 	addi	r2,r2,1
   18a50:	e0bff805 	stb	r2,-32(fp)
                 break;
   18a54:	0001883a 	nop
   18a58:	e0bff917 	ldw	r2,-28(fp)
   18a5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a60:	e0bffb17 	ldw	r2,-20(fp)
   18a64:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   18a68:	0014c000 	call	14c00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18a6c:	e0bfff17 	ldw	r2,-4(fp)
   18a70:	00c00384 	movi	r3,14
   18a74:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   18a78:	e0bff803 	ldbu	r2,-32(fp)
   18a7c:	00000706 	br	18a9c <OSQPendAbort+0x158>
   18a80:	e0bff917 	ldw	r2,-28(fp)
   18a84:	e0bffc15 	stw	r2,-16(fp)
   18a88:	e0bffc17 	ldw	r2,-16(fp)
   18a8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18a90:	e0bfff17 	ldw	r2,-4(fp)
   18a94:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   18a98:	0005883a 	mov	r2,zero
}
   18a9c:	e037883a 	mov	sp,fp
   18aa0:	dfc00117 	ldw	ra,4(sp)
   18aa4:	df000017 	ldw	fp,0(sp)
   18aa8:	dec00204 	addi	sp,sp,8
   18aac:	f800283a 	ret

00018ab0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   18ab0:	defff604 	addi	sp,sp,-40
   18ab4:	dfc00915 	stw	ra,36(sp)
   18ab8:	df000815 	stw	fp,32(sp)
   18abc:	df000804 	addi	fp,sp,32
   18ac0:	e13ffe15 	stw	r4,-8(fp)
   18ac4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18ac8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18acc:	e0bffe17 	ldw	r2,-8(fp)
   18ad0:	1000021e 	bne	r2,zero,18adc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18ad4:	00800104 	movi	r2,4
   18ad8:	00004a06 	br	18c04 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18adc:	e0bffe17 	ldw	r2,-8(fp)
   18ae0:	10800003 	ldbu	r2,0(r2)
   18ae4:	10803fcc 	andi	r2,r2,255
   18ae8:	108000a0 	cmpeqi	r2,r2,2
   18aec:	1000021e 	bne	r2,zero,18af8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   18af0:	00800044 	movi	r2,1
   18af4:	00004306 	br	18c04 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18af8:	0005303a 	rdctl	r2,status
   18afc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b00:	e0fffa17 	ldw	r3,-24(fp)
   18b04:	00bfff84 	movi	r2,-2
   18b08:	1884703a 	and	r2,r3,r2
   18b0c:	1001703a 	wrctl	status,r2
  
  return context;
   18b10:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18b14:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   18b18:	e0bffe17 	ldw	r2,-8(fp)
   18b1c:	10800283 	ldbu	r2,10(r2)
   18b20:	10803fcc 	andi	r2,r2,255
   18b24:	10000c26 	beq	r2,zero,18b58 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18b28:	e13ffe17 	ldw	r4,-8(fp)
   18b2c:	e17fff17 	ldw	r5,-4(fp)
   18b30:	01800104 	movi	r6,4
   18b34:	000f883a 	mov	r7,zero
   18b38:	00141e80 	call	141e8 <OS_EventTaskRdy>
   18b3c:	e0bff817 	ldw	r2,-32(fp)
   18b40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b44:	e0bffb17 	ldw	r2,-20(fp)
   18b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   18b4c:	0014c000 	call	14c00 <OS_Sched>
        return (OS_ERR_NONE);
   18b50:	0005883a 	mov	r2,zero
   18b54:	00002b06 	br	18c04 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   18b58:	e0bffe17 	ldw	r2,-8(fp)
   18b5c:	10800117 	ldw	r2,4(r2)
   18b60:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   18b64:	e0bff917 	ldw	r2,-28(fp)
   18b68:	10c0058b 	ldhu	r3,22(r2)
   18b6c:	e0bff917 	ldw	r2,-28(fp)
   18b70:	1080050b 	ldhu	r2,20(r2)
   18b74:	18ffffcc 	andi	r3,r3,65535
   18b78:	10bfffcc 	andi	r2,r2,65535
   18b7c:	18800636 	bltu	r3,r2,18b98 <OSQPost+0xe8>
   18b80:	e0bff817 	ldw	r2,-32(fp)
   18b84:	e0bffc15 	stw	r2,-16(fp)
   18b88:	e0bffc17 	ldw	r2,-16(fp)
   18b8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18b90:	00800784 	movi	r2,30
   18b94:	00001b06 	br	18c04 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   18b98:	e0bff917 	ldw	r2,-28(fp)
   18b9c:	10800317 	ldw	r2,12(r2)
   18ba0:	11000104 	addi	r4,r2,4
   18ba4:	e0fff917 	ldw	r3,-28(fp)
   18ba8:	19000315 	stw	r4,12(r3)
   18bac:	e0ffff17 	ldw	r3,-4(fp)
   18bb0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   18bb4:	e0bff917 	ldw	r2,-28(fp)
   18bb8:	1080058b 	ldhu	r2,22(r2)
   18bbc:	10800044 	addi	r2,r2,1
   18bc0:	1007883a 	mov	r3,r2
   18bc4:	e0bff917 	ldw	r2,-28(fp)
   18bc8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   18bcc:	e0bff917 	ldw	r2,-28(fp)
   18bd0:	10c00317 	ldw	r3,12(r2)
   18bd4:	e0bff917 	ldw	r2,-28(fp)
   18bd8:	10800217 	ldw	r2,8(r2)
   18bdc:	1880041e 	bne	r3,r2,18bf0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   18be0:	e0bff917 	ldw	r2,-28(fp)
   18be4:	10c00117 	ldw	r3,4(r2)
   18be8:	e0bff917 	ldw	r2,-28(fp)
   18bec:	10c00315 	stw	r3,12(r2)
   18bf0:	e0bff817 	ldw	r2,-32(fp)
   18bf4:	e0bffd15 	stw	r2,-12(fp)
   18bf8:	e0bffd17 	ldw	r2,-12(fp)
   18bfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18c00:	0005883a 	mov	r2,zero
}
   18c04:	e037883a 	mov	sp,fp
   18c08:	dfc00117 	ldw	ra,4(sp)
   18c0c:	df000017 	ldw	fp,0(sp)
   18c10:	dec00204 	addi	sp,sp,8
   18c14:	f800283a 	ret

00018c18 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   18c18:	defff604 	addi	sp,sp,-40
   18c1c:	dfc00915 	stw	ra,36(sp)
   18c20:	df000815 	stw	fp,32(sp)
   18c24:	df000804 	addi	fp,sp,32
   18c28:	e13ffe15 	stw	r4,-8(fp)
   18c2c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18c30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18c34:	e0bffe17 	ldw	r2,-8(fp)
   18c38:	1000021e 	bne	r2,zero,18c44 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18c3c:	00800104 	movi	r2,4
   18c40:	00004c06 	br	18d74 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18c44:	e0bffe17 	ldw	r2,-8(fp)
   18c48:	10800003 	ldbu	r2,0(r2)
   18c4c:	10803fcc 	andi	r2,r2,255
   18c50:	108000a0 	cmpeqi	r2,r2,2
   18c54:	1000021e 	bne	r2,zero,18c60 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   18c58:	00800044 	movi	r2,1
   18c5c:	00004506 	br	18d74 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c60:	0005303a 	rdctl	r2,status
   18c64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c68:	e0fffa17 	ldw	r3,-24(fp)
   18c6c:	00bfff84 	movi	r2,-2
   18c70:	1884703a 	and	r2,r3,r2
   18c74:	1001703a 	wrctl	status,r2
  
  return context;
   18c78:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   18c7c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   18c80:	e0bffe17 	ldw	r2,-8(fp)
   18c84:	10800283 	ldbu	r2,10(r2)
   18c88:	10803fcc 	andi	r2,r2,255
   18c8c:	10000c26 	beq	r2,zero,18cc0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18c90:	e13ffe17 	ldw	r4,-8(fp)
   18c94:	e17fff17 	ldw	r5,-4(fp)
   18c98:	01800104 	movi	r6,4
   18c9c:	000f883a 	mov	r7,zero
   18ca0:	00141e80 	call	141e8 <OS_EventTaskRdy>
   18ca4:	e0bff817 	ldw	r2,-32(fp)
   18ca8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cac:	e0bffb17 	ldw	r2,-20(fp)
   18cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18cb4:	0014c000 	call	14c00 <OS_Sched>
        return (OS_ERR_NONE);
   18cb8:	0005883a 	mov	r2,zero
   18cbc:	00002d06 	br	18d74 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18cc0:	e0bffe17 	ldw	r2,-8(fp)
   18cc4:	10800117 	ldw	r2,4(r2)
   18cc8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18ccc:	e0bff917 	ldw	r2,-28(fp)
   18cd0:	10c0058b 	ldhu	r3,22(r2)
   18cd4:	e0bff917 	ldw	r2,-28(fp)
   18cd8:	1080050b 	ldhu	r2,20(r2)
   18cdc:	18ffffcc 	andi	r3,r3,65535
   18ce0:	10bfffcc 	andi	r2,r2,65535
   18ce4:	18800636 	bltu	r3,r2,18d00 <OSQPostFront+0xe8>
   18ce8:	e0bff817 	ldw	r2,-32(fp)
   18cec:	e0bffc15 	stw	r2,-16(fp)
   18cf0:	e0bffc17 	ldw	r2,-16(fp)
   18cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18cf8:	00800784 	movi	r2,30
   18cfc:	00001d06 	br	18d74 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   18d00:	e0bff917 	ldw	r2,-28(fp)
   18d04:	10c00417 	ldw	r3,16(r2)
   18d08:	e0bff917 	ldw	r2,-28(fp)
   18d0c:	10800117 	ldw	r2,4(r2)
   18d10:	1880041e 	bne	r3,r2,18d24 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   18d14:	e0bff917 	ldw	r2,-28(fp)
   18d18:	10c00217 	ldw	r3,8(r2)
   18d1c:	e0bff917 	ldw	r2,-28(fp)
   18d20:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   18d24:	e0bff917 	ldw	r2,-28(fp)
   18d28:	10800417 	ldw	r2,16(r2)
   18d2c:	10ffff04 	addi	r3,r2,-4
   18d30:	e0bff917 	ldw	r2,-28(fp)
   18d34:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   18d38:	e0bff917 	ldw	r2,-28(fp)
   18d3c:	10800417 	ldw	r2,16(r2)
   18d40:	e0ffff17 	ldw	r3,-4(fp)
   18d44:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18d48:	e0bff917 	ldw	r2,-28(fp)
   18d4c:	1080058b 	ldhu	r2,22(r2)
   18d50:	10800044 	addi	r2,r2,1
   18d54:	1007883a 	mov	r3,r2
   18d58:	e0bff917 	ldw	r2,-28(fp)
   18d5c:	10c0058d 	sth	r3,22(r2)
   18d60:	e0bff817 	ldw	r2,-32(fp)
   18d64:	e0bffd15 	stw	r2,-12(fp)
   18d68:	e0bffd17 	ldw	r2,-12(fp)
   18d6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18d70:	0005883a 	mov	r2,zero
}
   18d74:	e037883a 	mov	sp,fp
   18d78:	dfc00117 	ldw	ra,4(sp)
   18d7c:	df000017 	ldw	fp,0(sp)
   18d80:	dec00204 	addi	sp,sp,8
   18d84:	f800283a 	ret

00018d88 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   18d88:	defff504 	addi	sp,sp,-44
   18d8c:	dfc00a15 	stw	ra,40(sp)
   18d90:	df000915 	stw	fp,36(sp)
   18d94:	df000904 	addi	fp,sp,36
   18d98:	e13ffd15 	stw	r4,-12(fp)
   18d9c:	e17ffe15 	stw	r5,-8(fp)
   18da0:	3005883a 	mov	r2,r6
   18da4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18da8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18dac:	e0bffd17 	ldw	r2,-12(fp)
   18db0:	1000021e 	bne	r2,zero,18dbc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18db4:	00800104 	movi	r2,4
   18db8:	00007106 	br	18f80 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18dbc:	e0bffd17 	ldw	r2,-12(fp)
   18dc0:	10800003 	ldbu	r2,0(r2)
   18dc4:	10803fcc 	andi	r2,r2,255
   18dc8:	108000a0 	cmpeqi	r2,r2,2
   18dcc:	1000021e 	bne	r2,zero,18dd8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18dd0:	00800044 	movi	r2,1
   18dd4:	00006a06 	br	18f80 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18dd8:	0005303a 	rdctl	r2,status
   18ddc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18de0:	e0fff917 	ldw	r3,-28(fp)
   18de4:	00bfff84 	movi	r2,-2
   18de8:	1884703a 	and	r2,r3,r2
   18dec:	1001703a 	wrctl	status,r2
  
  return context;
   18df0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18df4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   18df8:	e0bffd17 	ldw	r2,-12(fp)
   18dfc:	10800283 	ldbu	r2,10(r2)
   18e00:	10803fcc 	andi	r2,r2,255
   18e04:	10001d26 	beq	r2,zero,18e7c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   18e08:	e0bfff03 	ldbu	r2,-4(fp)
   18e0c:	1080004c 	andi	r2,r2,1
   18e10:	10000b26 	beq	r2,zero,18e40 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   18e14:	00000506 	br	18e2c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18e18:	e13ffd17 	ldw	r4,-12(fp)
   18e1c:	e17ffe17 	ldw	r5,-8(fp)
   18e20:	01800104 	movi	r6,4
   18e24:	000f883a 	mov	r7,zero
   18e28:	00141e80 	call	141e8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   18e2c:	e0bffd17 	ldw	r2,-12(fp)
   18e30:	10800283 	ldbu	r2,10(r2)
   18e34:	10803fcc 	andi	r2,r2,255
   18e38:	103ff71e 	bne	r2,zero,18e18 <__alt_mem_Flash_flash_data+0xf4018e18>
   18e3c:	00000506 	br	18e54 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18e40:	e13ffd17 	ldw	r4,-12(fp)
   18e44:	e17ffe17 	ldw	r5,-8(fp)
   18e48:	01800104 	movi	r6,4
   18e4c:	000f883a 	mov	r7,zero
   18e50:	00141e80 	call	141e8 <OS_EventTaskRdy>
   18e54:	e0bff717 	ldw	r2,-36(fp)
   18e58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e5c:	e0bffa17 	ldw	r2,-24(fp)
   18e60:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18e64:	e0bfff03 	ldbu	r2,-4(fp)
   18e68:	1080010c 	andi	r2,r2,4
   18e6c:	1000011e 	bne	r2,zero,18e74 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   18e70:	0014c000 	call	14c00 <OS_Sched>
        }
        return (OS_ERR_NONE);
   18e74:	0005883a 	mov	r2,zero
   18e78:	00004106 	br	18f80 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18e7c:	e0bffd17 	ldw	r2,-12(fp)
   18e80:	10800117 	ldw	r2,4(r2)
   18e84:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18e88:	e0bff817 	ldw	r2,-32(fp)
   18e8c:	10c0058b 	ldhu	r3,22(r2)
   18e90:	e0bff817 	ldw	r2,-32(fp)
   18e94:	1080050b 	ldhu	r2,20(r2)
   18e98:	18ffffcc 	andi	r3,r3,65535
   18e9c:	10bfffcc 	andi	r2,r2,65535
   18ea0:	18800636 	bltu	r3,r2,18ebc <OSQPostOpt+0x134>
   18ea4:	e0bff717 	ldw	r2,-36(fp)
   18ea8:	e0bffb15 	stw	r2,-20(fp)
   18eac:	e0bffb17 	ldw	r2,-20(fp)
   18eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18eb4:	00800784 	movi	r2,30
   18eb8:	00003106 	br	18f80 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18ebc:	e0bfff03 	ldbu	r2,-4(fp)
   18ec0:	1080008c 	andi	r2,r2,2
   18ec4:	10001326 	beq	r2,zero,18f14 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   18ec8:	e0bff817 	ldw	r2,-32(fp)
   18ecc:	10c00417 	ldw	r3,16(r2)
   18ed0:	e0bff817 	ldw	r2,-32(fp)
   18ed4:	10800117 	ldw	r2,4(r2)
   18ed8:	1880041e 	bne	r3,r2,18eec <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18edc:	e0bff817 	ldw	r2,-32(fp)
   18ee0:	10c00217 	ldw	r3,8(r2)
   18ee4:	e0bff817 	ldw	r2,-32(fp)
   18ee8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18eec:	e0bff817 	ldw	r2,-32(fp)
   18ef0:	10800417 	ldw	r2,16(r2)
   18ef4:	10ffff04 	addi	r3,r2,-4
   18ef8:	e0bff817 	ldw	r2,-32(fp)
   18efc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   18f00:	e0bff817 	ldw	r2,-32(fp)
   18f04:	10800417 	ldw	r2,16(r2)
   18f08:	e0fffe17 	ldw	r3,-8(fp)
   18f0c:	10c00015 	stw	r3,0(r2)
   18f10:	00001006 	br	18f54 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   18f14:	e0bff817 	ldw	r2,-32(fp)
   18f18:	10800317 	ldw	r2,12(r2)
   18f1c:	11000104 	addi	r4,r2,4
   18f20:	e0fff817 	ldw	r3,-32(fp)
   18f24:	19000315 	stw	r4,12(r3)
   18f28:	e0fffe17 	ldw	r3,-8(fp)
   18f2c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   18f30:	e0bff817 	ldw	r2,-32(fp)
   18f34:	10c00317 	ldw	r3,12(r2)
   18f38:	e0bff817 	ldw	r2,-32(fp)
   18f3c:	10800217 	ldw	r2,8(r2)
   18f40:	1880041e 	bne	r3,r2,18f54 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   18f44:	e0bff817 	ldw	r2,-32(fp)
   18f48:	10c00117 	ldw	r3,4(r2)
   18f4c:	e0bff817 	ldw	r2,-32(fp)
   18f50:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   18f54:	e0bff817 	ldw	r2,-32(fp)
   18f58:	1080058b 	ldhu	r2,22(r2)
   18f5c:	10800044 	addi	r2,r2,1
   18f60:	1007883a 	mov	r3,r2
   18f64:	e0bff817 	ldw	r2,-32(fp)
   18f68:	10c0058d 	sth	r3,22(r2)
   18f6c:	e0bff717 	ldw	r2,-36(fp)
   18f70:	e0bffc15 	stw	r2,-16(fp)
   18f74:	e0bffc17 	ldw	r2,-16(fp)
   18f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18f7c:	0005883a 	mov	r2,zero
}
   18f80:	e037883a 	mov	sp,fp
   18f84:	dfc00117 	ldw	ra,4(sp)
   18f88:	df000017 	ldw	fp,0(sp)
   18f8c:	dec00204 	addi	sp,sp,8
   18f90:	f800283a 	ret

00018f94 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18f94:	defff604 	addi	sp,sp,-40
   18f98:	df000915 	stw	fp,36(sp)
   18f9c:	df000904 	addi	fp,sp,36
   18fa0:	e13ffe15 	stw	r4,-8(fp)
   18fa4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18fa8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18fac:	e0bffe17 	ldw	r2,-8(fp)
   18fb0:	1000021e 	bne	r2,zero,18fbc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18fb4:	00800104 	movi	r2,4
   18fb8:	00004906 	br	190e0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18fbc:	e0bfff17 	ldw	r2,-4(fp)
   18fc0:	1000021e 	bne	r2,zero,18fcc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18fc4:	00800244 	movi	r2,9
   18fc8:	00004506 	br	190e0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18fcc:	e0bffe17 	ldw	r2,-8(fp)
   18fd0:	10800003 	ldbu	r2,0(r2)
   18fd4:	10803fcc 	andi	r2,r2,255
   18fd8:	108000a0 	cmpeqi	r2,r2,2
   18fdc:	1000021e 	bne	r2,zero,18fe8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18fe0:	00800044 	movi	r2,1
   18fe4:	00003e06 	br	190e0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18fe8:	0005303a 	rdctl	r2,status
   18fec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ff0:	e0fffc17 	ldw	r3,-16(fp)
   18ff4:	00bfff84 	movi	r2,-2
   18ff8:	1884703a 	and	r2,r3,r2
   18ffc:	1001703a 	wrctl	status,r2
  
  return context;
   19000:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19004:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   19008:	e0bffe17 	ldw	r2,-8(fp)
   1900c:	10c00283 	ldbu	r3,10(r2)
   19010:	e0bfff17 	ldw	r2,-4(fp)
   19014:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   19018:	e0bffe17 	ldw	r2,-8(fp)
   1901c:	108002c4 	addi	r2,r2,11
   19020:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   19024:	e0bfff17 	ldw	r2,-4(fp)
   19028:	10800204 	addi	r2,r2,8
   1902c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19030:	e03ff705 	stb	zero,-36(fp)
   19034:	00000b06 	br	19064 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   19038:	e0bff917 	ldw	r2,-28(fp)
   1903c:	10c00044 	addi	r3,r2,1
   19040:	e0fff915 	stw	r3,-28(fp)
   19044:	e0fff817 	ldw	r3,-32(fp)
   19048:	19000044 	addi	r4,r3,1
   1904c:	e13ff815 	stw	r4,-32(fp)
   19050:	18c00003 	ldbu	r3,0(r3)
   19054:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19058:	e0bff703 	ldbu	r2,-36(fp)
   1905c:	10800044 	addi	r2,r2,1
   19060:	e0bff705 	stb	r2,-36(fp)
   19064:	e0bff703 	ldbu	r2,-36(fp)
   19068:	108000f0 	cmpltui	r2,r2,3
   1906c:	103ff21e 	bne	r2,zero,19038 <__alt_mem_Flash_flash_data+0xf4019038>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   19070:	e0bffe17 	ldw	r2,-8(fp)
   19074:	10800117 	ldw	r2,4(r2)
   19078:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   1907c:	e0bffb17 	ldw	r2,-20(fp)
   19080:	1080058b 	ldhu	r2,22(r2)
   19084:	10bfffcc 	andi	r2,r2,65535
   19088:	10000626 	beq	r2,zero,190a4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1908c:	e0bffb17 	ldw	r2,-20(fp)
   19090:	10800417 	ldw	r2,16(r2)
   19094:	10c00017 	ldw	r3,0(r2)
   19098:	e0bfff17 	ldw	r2,-4(fp)
   1909c:	10c00015 	stw	r3,0(r2)
   190a0:	00000206 	br	190ac <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   190a4:	e0bfff17 	ldw	r2,-4(fp)
   190a8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   190ac:	e0bffb17 	ldw	r2,-20(fp)
   190b0:	10c0058b 	ldhu	r3,22(r2)
   190b4:	e0bfff17 	ldw	r2,-4(fp)
   190b8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   190bc:	e0bffb17 	ldw	r2,-20(fp)
   190c0:	10c0050b 	ldhu	r3,20(r2)
   190c4:	e0bfff17 	ldw	r2,-4(fp)
   190c8:	10c0018d 	sth	r3,6(r2)
   190cc:	e0bffa17 	ldw	r2,-24(fp)
   190d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190d4:	e0bffd17 	ldw	r2,-12(fp)
   190d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   190dc:	0005883a 	mov	r2,zero
}
   190e0:	e037883a 	mov	sp,fp
   190e4:	df000017 	ldw	fp,0(sp)
   190e8:	dec00104 	addi	sp,sp,4
   190ec:	f800283a 	ret

000190f0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   190f0:	defffb04 	addi	sp,sp,-20
   190f4:	dfc00415 	stw	ra,16(sp)
   190f8:	df000315 	stw	fp,12(sp)
   190fc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   19100:	01000134 	movhi	r4,4
   19104:	210edd04 	addi	r4,r4,15220
   19108:	01407804 	movi	r5,480
   1910c:	0014b4c0 	call	14b4c <OS_MemClr>
    pq1 = &OSQTbl[0];
   19110:	00800134 	movhi	r2,4
   19114:	108edd04 	addi	r2,r2,15220
   19118:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1911c:	00800134 	movhi	r2,4
   19120:	108ee304 	addi	r2,r2,15244
   19124:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19128:	e03ffd0d 	sth	zero,-12(fp)
   1912c:	00000c06 	br	19160 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   19130:	e0bffe17 	ldw	r2,-8(fp)
   19134:	e0ffff17 	ldw	r3,-4(fp)
   19138:	10c00015 	stw	r3,0(r2)
        pq1++;
   1913c:	e0bffe17 	ldw	r2,-8(fp)
   19140:	10800604 	addi	r2,r2,24
   19144:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   19148:	e0bfff17 	ldw	r2,-4(fp)
   1914c:	10800604 	addi	r2,r2,24
   19150:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19154:	e0bffd0b 	ldhu	r2,-12(fp)
   19158:	10800044 	addi	r2,r2,1
   1915c:	e0bffd0d 	sth	r2,-12(fp)
   19160:	e0bffd0b 	ldhu	r2,-12(fp)
   19164:	108004f0 	cmpltui	r2,r2,19
   19168:	103ff11e 	bne	r2,zero,19130 <__alt_mem_Flash_flash_data+0xf4019130>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1916c:	e0bffe17 	ldw	r2,-8(fp)
   19170:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   19174:	008000b4 	movhi	r2,2
   19178:	1090c504 	addi	r2,r2,17172
   1917c:	00c00134 	movhi	r3,4
   19180:	18cedd04 	addi	r3,r3,15220
   19184:	10c00015 	stw	r3,0(r2)
#endif
}
   19188:	e037883a 	mov	sp,fp
   1918c:	dfc00117 	ldw	ra,4(sp)
   19190:	df000017 	ldw	fp,0(sp)
   19194:	dec00204 	addi	sp,sp,8
   19198:	f800283a 	ret

0001919c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1919c:	defffa04 	addi	sp,sp,-24
   191a0:	df000515 	stw	fp,20(sp)
   191a4:	df000504 	addi	fp,sp,20
   191a8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   191ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   191b0:	e0bfff17 	ldw	r2,-4(fp)
   191b4:	1000021e 	bne	r2,zero,191c0 <OSSemAccept+0x24>
        return (0);
   191b8:	0005883a 	mov	r2,zero
   191bc:	00001f06 	br	1923c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   191c0:	e0bfff17 	ldw	r2,-4(fp)
   191c4:	10800003 	ldbu	r2,0(r2)
   191c8:	10803fcc 	andi	r2,r2,255
   191cc:	108000e0 	cmpeqi	r2,r2,3
   191d0:	1000021e 	bne	r2,zero,191dc <OSSemAccept+0x40>
        return (0);
   191d4:	0005883a 	mov	r2,zero
   191d8:	00001806 	br	1923c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191dc:	0005303a 	rdctl	r2,status
   191e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191e4:	e0fffd17 	ldw	r3,-12(fp)
   191e8:	00bfff84 	movi	r2,-2
   191ec:	1884703a 	and	r2,r3,r2
   191f0:	1001703a 	wrctl	status,r2
  
  return context;
   191f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   191f8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   191fc:	e0bfff17 	ldw	r2,-4(fp)
   19200:	1080020b 	ldhu	r2,8(r2)
   19204:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   19208:	e0bffc0b 	ldhu	r2,-16(fp)
   1920c:	10000626 	beq	r2,zero,19228 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   19210:	e0bfff17 	ldw	r2,-4(fp)
   19214:	1080020b 	ldhu	r2,8(r2)
   19218:	10bfffc4 	addi	r2,r2,-1
   1921c:	1007883a 	mov	r3,r2
   19220:	e0bfff17 	ldw	r2,-4(fp)
   19224:	10c0020d 	sth	r3,8(r2)
   19228:	e0bffb17 	ldw	r2,-20(fp)
   1922c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19230:	e0bffe17 	ldw	r2,-8(fp)
   19234:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   19238:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1923c:	e037883a 	mov	sp,fp
   19240:	df000017 	ldw	fp,0(sp)
   19244:	dec00104 	addi	sp,sp,4
   19248:	f800283a 	ret

0001924c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1924c:	defff904 	addi	sp,sp,-28
   19250:	dfc00615 	stw	ra,24(sp)
   19254:	df000515 	stw	fp,20(sp)
   19258:	df000504 	addi	fp,sp,20
   1925c:	2005883a 	mov	r2,r4
   19260:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19264:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19268:	008000b4 	movhi	r2,2
   1926c:	1090c804 	addi	r2,r2,17184
   19270:	10800003 	ldbu	r2,0(r2)
   19274:	10803fcc 	andi	r2,r2,255
   19278:	10000226 	beq	r2,zero,19284 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1927c:	0005883a 	mov	r2,zero
   19280:	00002d06 	br	19338 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19284:	0005303a 	rdctl	r2,status
   19288:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1928c:	e0fffd17 	ldw	r3,-12(fp)
   19290:	00bfff84 	movi	r2,-2
   19294:	1884703a 	and	r2,r3,r2
   19298:	1001703a 	wrctl	status,r2
  
  return context;
   1929c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   192a0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   192a4:	008000b4 	movhi	r2,2
   192a8:	1090c704 	addi	r2,r2,17180
   192ac:	10800017 	ldw	r2,0(r2)
   192b0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   192b4:	008000b4 	movhi	r2,2
   192b8:	1090c704 	addi	r2,r2,17180
   192bc:	10800017 	ldw	r2,0(r2)
   192c0:	10000726 	beq	r2,zero,192e0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   192c4:	008000b4 	movhi	r2,2
   192c8:	1090c704 	addi	r2,r2,17180
   192cc:	10800017 	ldw	r2,0(r2)
   192d0:	10c00117 	ldw	r3,4(r2)
   192d4:	008000b4 	movhi	r2,2
   192d8:	1090c704 	addi	r2,r2,17180
   192dc:	10c00015 	stw	r3,0(r2)
   192e0:	e0bffb17 	ldw	r2,-20(fp)
   192e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   192e8:	e0bffe17 	ldw	r2,-8(fp)
   192ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   192f0:	e0bffc17 	ldw	r2,-16(fp)
   192f4:	10000f26 	beq	r2,zero,19334 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   192f8:	e0bffc17 	ldw	r2,-16(fp)
   192fc:	00c000c4 	movi	r3,3
   19300:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   19304:	e0bffc17 	ldw	r2,-16(fp)
   19308:	e0ffff0b 	ldhu	r3,-4(fp)
   1930c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   19310:	e0bffc17 	ldw	r2,-16(fp)
   19314:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   19318:	e0bffc17 	ldw	r2,-16(fp)
   1931c:	00c00fc4 	movi	r3,63
   19320:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   19324:	e0bffc17 	ldw	r2,-16(fp)
   19328:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1932c:	e13ffc17 	ldw	r4,-16(fp)
   19330:	00147880 	call	14788 <OS_EventWaitListInit>
    }
    return (pevent);
   19334:	e0bffc17 	ldw	r2,-16(fp)
}
   19338:	e037883a 	mov	sp,fp
   1933c:	dfc00117 	ldw	ra,4(sp)
   19340:	df000017 	ldw	fp,0(sp)
   19344:	dec00204 	addi	sp,sp,8
   19348:	f800283a 	ret

0001934c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1934c:	defff304 	addi	sp,sp,-52
   19350:	dfc00c15 	stw	ra,48(sp)
   19354:	df000b15 	stw	fp,44(sp)
   19358:	df000b04 	addi	fp,sp,44
   1935c:	e13ffd15 	stw	r4,-12(fp)
   19360:	2805883a 	mov	r2,r5
   19364:	e1bfff15 	stw	r6,-4(fp)
   19368:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1936c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19370:	e0bfff17 	ldw	r2,-4(fp)
   19374:	1000021e 	bne	r2,zero,19380 <OSSemDel+0x34>
        return (pevent);
   19378:	e0bffd17 	ldw	r2,-12(fp)
   1937c:	00008806 	br	195a0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19380:	e0bffd17 	ldw	r2,-12(fp)
   19384:	1000051e 	bne	r2,zero,1939c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19388:	e0bfff17 	ldw	r2,-4(fp)
   1938c:	00c00104 	movi	r3,4
   19390:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19394:	e0bffd17 	ldw	r2,-12(fp)
   19398:	00008106 	br	195a0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1939c:	e0bffd17 	ldw	r2,-12(fp)
   193a0:	10800003 	ldbu	r2,0(r2)
   193a4:	10803fcc 	andi	r2,r2,255
   193a8:	108000e0 	cmpeqi	r2,r2,3
   193ac:	1000051e 	bne	r2,zero,193c4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   193b0:	e0bfff17 	ldw	r2,-4(fp)
   193b4:	00c00044 	movi	r3,1
   193b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   193bc:	e0bffd17 	ldw	r2,-12(fp)
   193c0:	00007706 	br	195a0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   193c4:	008000b4 	movhi	r2,2
   193c8:	1090c804 	addi	r2,r2,17184
   193cc:	10800003 	ldbu	r2,0(r2)
   193d0:	10803fcc 	andi	r2,r2,255
   193d4:	10000526 	beq	r2,zero,193ec <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   193d8:	e0bfff17 	ldw	r2,-4(fp)
   193dc:	00c003c4 	movi	r3,15
   193e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   193e4:	e0bffd17 	ldw	r2,-12(fp)
   193e8:	00006d06 	br	195a0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193ec:	0005303a 	rdctl	r2,status
   193f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193f4:	e0fff817 	ldw	r3,-32(fp)
   193f8:	00bfff84 	movi	r2,-2
   193fc:	1884703a 	and	r2,r3,r2
   19400:	1001703a 	wrctl	status,r2
  
  return context;
   19404:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19408:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1940c:	e0bffd17 	ldw	r2,-12(fp)
   19410:	10800283 	ldbu	r2,10(r2)
   19414:	10803fcc 	andi	r2,r2,255
   19418:	10000326 	beq	r2,zero,19428 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1941c:	00800044 	movi	r2,1
   19420:	e0bff505 	stb	r2,-44(fp)
   19424:	00000106 	br	1942c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   19428:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1942c:	e0bffe03 	ldbu	r2,-8(fp)
   19430:	10000326 	beq	r2,zero,19440 <OSSemDel+0xf4>
   19434:	10800060 	cmpeqi	r2,r2,1
   19438:	10002c1e 	bne	r2,zero,194ec <OSSemDel+0x1a0>
   1943c:	00004d06 	br	19574 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   19440:	e0bff503 	ldbu	r2,-44(fp)
   19444:	10001a1e 	bne	r2,zero,194b0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   19448:	e0bffd17 	ldw	r2,-12(fp)
   1944c:	00c00fc4 	movi	r3,63
   19450:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   19454:	e0bffd17 	ldw	r2,-12(fp)
   19458:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1945c:	e0bffd17 	ldw	r2,-12(fp)
   19460:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19464:	008000b4 	movhi	r2,2
   19468:	1090c704 	addi	r2,r2,17180
   1946c:	10c00017 	ldw	r3,0(r2)
   19470:	e0bffd17 	ldw	r2,-12(fp)
   19474:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   19478:	e0bffd17 	ldw	r2,-12(fp)
   1947c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19480:	008000b4 	movhi	r2,2
   19484:	1090c704 	addi	r2,r2,17180
   19488:	e0fffd17 	ldw	r3,-12(fp)
   1948c:	10c00015 	stw	r3,0(r2)
   19490:	e0bff717 	ldw	r2,-36(fp)
   19494:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19498:	e0bff917 	ldw	r2,-28(fp)
   1949c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   194a0:	e0bfff17 	ldw	r2,-4(fp)
   194a4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   194a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   194ac:	00003b06 	br	1959c <OSSemDel+0x250>
   194b0:	e0bff717 	ldw	r2,-36(fp)
   194b4:	e0bffa15 	stw	r2,-24(fp)
   194b8:	e0bffa17 	ldw	r2,-24(fp)
   194bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   194c0:	e0bfff17 	ldw	r2,-4(fp)
   194c4:	00c01244 	movi	r3,73
   194c8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   194cc:	e0bffd17 	ldw	r2,-12(fp)
   194d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   194d4:	00003106 	br	1959c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   194d8:	e13ffd17 	ldw	r4,-12(fp)
   194dc:	000b883a 	mov	r5,zero
   194e0:	01800044 	movi	r6,1
   194e4:	000f883a 	mov	r7,zero
   194e8:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   194ec:	e0bffd17 	ldw	r2,-12(fp)
   194f0:	10800283 	ldbu	r2,10(r2)
   194f4:	10803fcc 	andi	r2,r2,255
   194f8:	103ff71e 	bne	r2,zero,194d8 <__alt_mem_Flash_flash_data+0xf40194d8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   194fc:	e0bffd17 	ldw	r2,-12(fp)
   19500:	00c00fc4 	movi	r3,63
   19504:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19508:	e0bffd17 	ldw	r2,-12(fp)
   1950c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19510:	e0bffd17 	ldw	r2,-12(fp)
   19514:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19518:	008000b4 	movhi	r2,2
   1951c:	1090c704 	addi	r2,r2,17180
   19520:	10c00017 	ldw	r3,0(r2)
   19524:	e0bffd17 	ldw	r2,-12(fp)
   19528:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1952c:	e0bffd17 	ldw	r2,-12(fp)
   19530:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19534:	008000b4 	movhi	r2,2
   19538:	1090c704 	addi	r2,r2,17180
   1953c:	e0fffd17 	ldw	r3,-12(fp)
   19540:	10c00015 	stw	r3,0(r2)
   19544:	e0bff717 	ldw	r2,-36(fp)
   19548:	e0bffb15 	stw	r2,-20(fp)
   1954c:	e0bffb17 	ldw	r2,-20(fp)
   19550:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19554:	e0bff503 	ldbu	r2,-44(fp)
   19558:	10800058 	cmpnei	r2,r2,1
   1955c:	1000011e 	bne	r2,zero,19564 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19560:	0014c000 	call	14c00 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19564:	e0bfff17 	ldw	r2,-4(fp)
   19568:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1956c:	e03ff615 	stw	zero,-40(fp)
             break;
   19570:	00000a06 	br	1959c <OSSemDel+0x250>
   19574:	e0bff717 	ldw	r2,-36(fp)
   19578:	e0bffc15 	stw	r2,-16(fp)
   1957c:	e0bffc17 	ldw	r2,-16(fp)
   19580:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19584:	e0bfff17 	ldw	r2,-4(fp)
   19588:	00c001c4 	movi	r3,7
   1958c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19590:	e0bffd17 	ldw	r2,-12(fp)
   19594:	e0bff615 	stw	r2,-40(fp)
             break;
   19598:	0001883a 	nop
    }
    return (pevent_return);
   1959c:	e0bff617 	ldw	r2,-40(fp)
}
   195a0:	e037883a 	mov	sp,fp
   195a4:	dfc00117 	ldw	ra,4(sp)
   195a8:	df000017 	ldw	fp,0(sp)
   195ac:	dec00204 	addi	sp,sp,8
   195b0:	f800283a 	ret

000195b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   195b4:	defff504 	addi	sp,sp,-44
   195b8:	dfc00a15 	stw	ra,40(sp)
   195bc:	df000915 	stw	fp,36(sp)
   195c0:	df000904 	addi	fp,sp,36
   195c4:	e13ffd15 	stw	r4,-12(fp)
   195c8:	2805883a 	mov	r2,r5
   195cc:	e1bfff15 	stw	r6,-4(fp)
   195d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   195d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   195d8:	e0bfff17 	ldw	r2,-4(fp)
   195dc:	1000011e 	bne	r2,zero,195e4 <OSSemPend+0x30>
        return;
   195e0:	00008906 	br	19808 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   195e4:	e0bffd17 	ldw	r2,-12(fp)
   195e8:	1000041e 	bne	r2,zero,195fc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   195ec:	e0bfff17 	ldw	r2,-4(fp)
   195f0:	00c00104 	movi	r3,4
   195f4:	10c00005 	stb	r3,0(r2)
        return;
   195f8:	00008306 	br	19808 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   195fc:	e0bffd17 	ldw	r2,-12(fp)
   19600:	10800003 	ldbu	r2,0(r2)
   19604:	10803fcc 	andi	r2,r2,255
   19608:	108000e0 	cmpeqi	r2,r2,3
   1960c:	1000041e 	bne	r2,zero,19620 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   19610:	e0bfff17 	ldw	r2,-4(fp)
   19614:	00c00044 	movi	r3,1
   19618:	10c00005 	stb	r3,0(r2)
        return;
   1961c:	00007a06 	br	19808 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   19620:	008000b4 	movhi	r2,2
   19624:	1090c804 	addi	r2,r2,17184
   19628:	10800003 	ldbu	r2,0(r2)
   1962c:	10803fcc 	andi	r2,r2,255
   19630:	10000426 	beq	r2,zero,19644 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19634:	e0bfff17 	ldw	r2,-4(fp)
   19638:	00c00084 	movi	r3,2
   1963c:	10c00005 	stb	r3,0(r2)
        return;
   19640:	00007106 	br	19808 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   19644:	008000b4 	movhi	r2,2
   19648:	1090ba04 	addi	r2,r2,17128
   1964c:	10800003 	ldbu	r2,0(r2)
   19650:	10803fcc 	andi	r2,r2,255
   19654:	10000426 	beq	r2,zero,19668 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   19658:	e0bfff17 	ldw	r2,-4(fp)
   1965c:	00c00344 	movi	r3,13
   19660:	10c00005 	stb	r3,0(r2)
        return;
   19664:	00006806 	br	19808 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19668:	0005303a 	rdctl	r2,status
   1966c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19670:	e0fff817 	ldw	r3,-32(fp)
   19674:	00bfff84 	movi	r2,-2
   19678:	1884703a 	and	r2,r3,r2
   1967c:	1001703a 	wrctl	status,r2
  
  return context;
   19680:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19684:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   19688:	e0bffd17 	ldw	r2,-12(fp)
   1968c:	1080020b 	ldhu	r2,8(r2)
   19690:	10bfffcc 	andi	r2,r2,65535
   19694:	10000d26 	beq	r2,zero,196cc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   19698:	e0bffd17 	ldw	r2,-12(fp)
   1969c:	1080020b 	ldhu	r2,8(r2)
   196a0:	10bfffc4 	addi	r2,r2,-1
   196a4:	1007883a 	mov	r3,r2
   196a8:	e0bffd17 	ldw	r2,-12(fp)
   196ac:	10c0020d 	sth	r3,8(r2)
   196b0:	e0bff717 	ldw	r2,-36(fp)
   196b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   196b8:	e0bff917 	ldw	r2,-28(fp)
   196bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   196c0:	e0bfff17 	ldw	r2,-4(fp)
   196c4:	10000005 	stb	zero,0(r2)
        return;
   196c8:	00004f06 	br	19808 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   196cc:	008000b4 	movhi	r2,2
   196d0:	1090c904 	addi	r2,r2,17188
   196d4:	10c00017 	ldw	r3,0(r2)
   196d8:	008000b4 	movhi	r2,2
   196dc:	1090c904 	addi	r2,r2,17188
   196e0:	10800017 	ldw	r2,0(r2)
   196e4:	10800c03 	ldbu	r2,48(r2)
   196e8:	10800054 	ori	r2,r2,1
   196ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   196f0:	008000b4 	movhi	r2,2
   196f4:	1090c904 	addi	r2,r2,17188
   196f8:	10800017 	ldw	r2,0(r2)
   196fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19700:	008000b4 	movhi	r2,2
   19704:	1090c904 	addi	r2,r2,17188
   19708:	10800017 	ldw	r2,0(r2)
   1970c:	e0fffe0b 	ldhu	r3,-8(fp)
   19710:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   19714:	e13ffd17 	ldw	r4,-12(fp)
   19718:	00143800 	call	14380 <OS_EventTaskWait>
   1971c:	e0bff717 	ldw	r2,-36(fp)
   19720:	e0bffa15 	stw	r2,-24(fp)
   19724:	e0bffa17 	ldw	r2,-24(fp)
   19728:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1972c:	0014c000 	call	14c00 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19730:	0005303a 	rdctl	r2,status
   19734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19738:	e0fffb17 	ldw	r3,-20(fp)
   1973c:	00bfff84 	movi	r2,-2
   19740:	1884703a 	and	r2,r3,r2
   19744:	1001703a 	wrctl	status,r2
  
  return context;
   19748:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1974c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   19750:	008000b4 	movhi	r2,2
   19754:	1090c904 	addi	r2,r2,17188
   19758:	10800017 	ldw	r2,0(r2)
   1975c:	10800c43 	ldbu	r2,49(r2)
   19760:	10803fcc 	andi	r2,r2,255
   19764:	10000326 	beq	r2,zero,19774 <OSSemPend+0x1c0>
   19768:	108000a0 	cmpeqi	r2,r2,2
   1976c:	1000041e 	bne	r2,zero,19780 <OSSemPend+0x1cc>
   19770:	00000706 	br	19790 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   19774:	e0bfff17 	ldw	r2,-4(fp)
   19778:	10000005 	stb	zero,0(r2)
             break;
   1977c:	00000e06 	br	197b8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19780:	e0bfff17 	ldw	r2,-4(fp)
   19784:	00c00384 	movi	r3,14
   19788:	10c00005 	stb	r3,0(r2)
             break;
   1978c:	00000a06 	br	197b8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   19790:	008000b4 	movhi	r2,2
   19794:	1090c904 	addi	r2,r2,17188
   19798:	10800017 	ldw	r2,0(r2)
   1979c:	1009883a 	mov	r4,r2
   197a0:	e17ffd17 	ldw	r5,-12(fp)
   197a4:	00145d80 	call	145d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   197a8:	e0bfff17 	ldw	r2,-4(fp)
   197ac:	00c00284 	movi	r3,10
   197b0:	10c00005 	stb	r3,0(r2)
             break;
   197b4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   197b8:	008000b4 	movhi	r2,2
   197bc:	1090c904 	addi	r2,r2,17188
   197c0:	10800017 	ldw	r2,0(r2)
   197c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   197c8:	008000b4 	movhi	r2,2
   197cc:	1090c904 	addi	r2,r2,17188
   197d0:	10800017 	ldw	r2,0(r2)
   197d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   197d8:	008000b4 	movhi	r2,2
   197dc:	1090c904 	addi	r2,r2,17188
   197e0:	10800017 	ldw	r2,0(r2)
   197e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   197e8:	008000b4 	movhi	r2,2
   197ec:	1090c904 	addi	r2,r2,17188
   197f0:	10800017 	ldw	r2,0(r2)
   197f4:	10000815 	stw	zero,32(r2)
   197f8:	e0bff717 	ldw	r2,-36(fp)
   197fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19800:	e0bffc17 	ldw	r2,-16(fp)
   19804:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   19808:	e037883a 	mov	sp,fp
   1980c:	dfc00117 	ldw	ra,4(sp)
   19810:	df000017 	ldw	fp,0(sp)
   19814:	dec00204 	addi	sp,sp,8
   19818:	f800283a 	ret

0001981c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1981c:	defff604 	addi	sp,sp,-40
   19820:	dfc00915 	stw	ra,36(sp)
   19824:	df000815 	stw	fp,32(sp)
   19828:	df000804 	addi	fp,sp,32
   1982c:	e13ffd15 	stw	r4,-12(fp)
   19830:	2805883a 	mov	r2,r5
   19834:	e1bfff15 	stw	r6,-4(fp)
   19838:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1983c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19840:	e0bfff17 	ldw	r2,-4(fp)
   19844:	1000021e 	bne	r2,zero,19850 <OSSemPendAbort+0x34>
        return (0);
   19848:	0005883a 	mov	r2,zero
   1984c:	00004906 	br	19974 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19850:	e0bffd17 	ldw	r2,-12(fp)
   19854:	1000051e 	bne	r2,zero,1986c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19858:	e0bfff17 	ldw	r2,-4(fp)
   1985c:	00c00104 	movi	r3,4
   19860:	10c00005 	stb	r3,0(r2)
        return (0);
   19864:	0005883a 	mov	r2,zero
   19868:	00004206 	br	19974 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1986c:	e0bffd17 	ldw	r2,-12(fp)
   19870:	10800003 	ldbu	r2,0(r2)
   19874:	10803fcc 	andi	r2,r2,255
   19878:	108000e0 	cmpeqi	r2,r2,3
   1987c:	1000051e 	bne	r2,zero,19894 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19880:	e0bfff17 	ldw	r2,-4(fp)
   19884:	00c00044 	movi	r3,1
   19888:	10c00005 	stb	r3,0(r2)
        return (0);
   1988c:	0005883a 	mov	r2,zero
   19890:	00003806 	br	19974 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19894:	0005303a 	rdctl	r2,status
   19898:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1989c:	e0fffa17 	ldw	r3,-24(fp)
   198a0:	00bfff84 	movi	r2,-2
   198a4:	1884703a 	and	r2,r3,r2
   198a8:	1001703a 	wrctl	status,r2
  
  return context;
   198ac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   198b0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   198b4:	e0bffd17 	ldw	r2,-12(fp)
   198b8:	10800283 	ldbu	r2,10(r2)
   198bc:	10803fcc 	andi	r2,r2,255
   198c0:	10002526 	beq	r2,zero,19958 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   198c4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   198c8:	e0bffe03 	ldbu	r2,-8(fp)
   198cc:	10800060 	cmpeqi	r2,r2,1
   198d0:	10000e26 	beq	r2,zero,1990c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   198d4:	00000806 	br	198f8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   198d8:	e13ffd17 	ldw	r4,-12(fp)
   198dc:	000b883a 	mov	r5,zero
   198e0:	01800044 	movi	r6,1
   198e4:	01c00084 	movi	r7,2
   198e8:	00141e80 	call	141e8 <OS_EventTaskRdy>
                     nbr_tasks++;
   198ec:	e0bff803 	ldbu	r2,-32(fp)
   198f0:	10800044 	addi	r2,r2,1
   198f4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   198f8:	e0bffd17 	ldw	r2,-12(fp)
   198fc:	10800283 	ldbu	r2,10(r2)
   19900:	10803fcc 	andi	r2,r2,255
   19904:	103ff41e 	bne	r2,zero,198d8 <__alt_mem_Flash_flash_data+0xf40198d8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19908:	00000906 	br	19930 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1990c:	e13ffd17 	ldw	r4,-12(fp)
   19910:	000b883a 	mov	r5,zero
   19914:	01800044 	movi	r6,1
   19918:	01c00084 	movi	r7,2
   1991c:	00141e80 	call	141e8 <OS_EventTaskRdy>
                 nbr_tasks++;
   19920:	e0bff803 	ldbu	r2,-32(fp)
   19924:	10800044 	addi	r2,r2,1
   19928:	e0bff805 	stb	r2,-32(fp)
                 break;
   1992c:	0001883a 	nop
   19930:	e0bff917 	ldw	r2,-28(fp)
   19934:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19938:	e0bffb17 	ldw	r2,-20(fp)
   1993c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19940:	0014c000 	call	14c00 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19944:	e0bfff17 	ldw	r2,-4(fp)
   19948:	00c00384 	movi	r3,14
   1994c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19950:	e0bff803 	ldbu	r2,-32(fp)
   19954:	00000706 	br	19974 <OSSemPendAbort+0x158>
   19958:	e0bff917 	ldw	r2,-28(fp)
   1995c:	e0bffc15 	stw	r2,-16(fp)
   19960:	e0bffc17 	ldw	r2,-16(fp)
   19964:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   19968:	e0bfff17 	ldw	r2,-4(fp)
   1996c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   19970:	0005883a 	mov	r2,zero
}
   19974:	e037883a 	mov	sp,fp
   19978:	dfc00117 	ldw	ra,4(sp)
   1997c:	df000017 	ldw	fp,0(sp)
   19980:	dec00204 	addi	sp,sp,8
   19984:	f800283a 	ret

00019988 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   19988:	defff804 	addi	sp,sp,-32
   1998c:	dfc00715 	stw	ra,28(sp)
   19990:	df000615 	stw	fp,24(sp)
   19994:	df000604 	addi	fp,sp,24
   19998:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1999c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   199a0:	e0bfff17 	ldw	r2,-4(fp)
   199a4:	1000021e 	bne	r2,zero,199b0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   199a8:	00800104 	movi	r2,4
   199ac:	00003506 	br	19a84 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   199b0:	e0bfff17 	ldw	r2,-4(fp)
   199b4:	10800003 	ldbu	r2,0(r2)
   199b8:	10803fcc 	andi	r2,r2,255
   199bc:	108000e0 	cmpeqi	r2,r2,3
   199c0:	1000021e 	bne	r2,zero,199cc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   199c4:	00800044 	movi	r2,1
   199c8:	00002e06 	br	19a84 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   199cc:	0005303a 	rdctl	r2,status
   199d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   199d4:	e0fffb17 	ldw	r3,-20(fp)
   199d8:	00bfff84 	movi	r2,-2
   199dc:	1884703a 	and	r2,r3,r2
   199e0:	1001703a 	wrctl	status,r2
  
  return context;
   199e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   199e8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   199ec:	e0bfff17 	ldw	r2,-4(fp)
   199f0:	10800283 	ldbu	r2,10(r2)
   199f4:	10803fcc 	andi	r2,r2,255
   199f8:	10000c26 	beq	r2,zero,19a2c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   199fc:	e13fff17 	ldw	r4,-4(fp)
   19a00:	000b883a 	mov	r5,zero
   19a04:	01800044 	movi	r6,1
   19a08:	000f883a 	mov	r7,zero
   19a0c:	00141e80 	call	141e8 <OS_EventTaskRdy>
   19a10:	e0bffa17 	ldw	r2,-24(fp)
   19a14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a18:	e0bffc17 	ldw	r2,-16(fp)
   19a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19a20:	0014c000 	call	14c00 <OS_Sched>
        return (OS_ERR_NONE);
   19a24:	0005883a 	mov	r2,zero
   19a28:	00001606 	br	19a84 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   19a2c:	e0bfff17 	ldw	r2,-4(fp)
   19a30:	1080020b 	ldhu	r2,8(r2)
   19a34:	10ffffcc 	andi	r3,r2,65535
   19a38:	00bfffd4 	movui	r2,65535
   19a3c:	18800c26 	beq	r3,r2,19a70 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19a40:	e0bfff17 	ldw	r2,-4(fp)
   19a44:	1080020b 	ldhu	r2,8(r2)
   19a48:	10800044 	addi	r2,r2,1
   19a4c:	1007883a 	mov	r3,r2
   19a50:	e0bfff17 	ldw	r2,-4(fp)
   19a54:	10c0020d 	sth	r3,8(r2)
   19a58:	e0bffa17 	ldw	r2,-24(fp)
   19a5c:	e0bffd15 	stw	r2,-12(fp)
   19a60:	e0bffd17 	ldw	r2,-12(fp)
   19a64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   19a68:	0005883a 	mov	r2,zero
   19a6c:	00000506 	br	19a84 <OSSemPost+0xfc>
   19a70:	e0bffa17 	ldw	r2,-24(fp)
   19a74:	e0bffe15 	stw	r2,-8(fp)
   19a78:	e0bffe17 	ldw	r2,-8(fp)
   19a7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   19a80:	00800c84 	movi	r2,50
}
   19a84:	e037883a 	mov	sp,fp
   19a88:	dfc00117 	ldw	ra,4(sp)
   19a8c:	df000017 	ldw	fp,0(sp)
   19a90:	dec00204 	addi	sp,sp,8
   19a94:	f800283a 	ret

00019a98 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   19a98:	defff704 	addi	sp,sp,-36
   19a9c:	df000815 	stw	fp,32(sp)
   19aa0:	df000804 	addi	fp,sp,32
   19aa4:	e13ffe15 	stw	r4,-8(fp)
   19aa8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19aac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19ab0:	e0bffe17 	ldw	r2,-8(fp)
   19ab4:	1000021e 	bne	r2,zero,19ac0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   19ab8:	00800104 	movi	r2,4
   19abc:	00003606 	br	19b98 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   19ac0:	e0bfff17 	ldw	r2,-4(fp)
   19ac4:	1000021e 	bne	r2,zero,19ad0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   19ac8:	00800244 	movi	r2,9
   19acc:	00003206 	br	19b98 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   19ad0:	e0bffe17 	ldw	r2,-8(fp)
   19ad4:	10800003 	ldbu	r2,0(r2)
   19ad8:	10803fcc 	andi	r2,r2,255
   19adc:	108000e0 	cmpeqi	r2,r2,3
   19ae0:	1000021e 	bne	r2,zero,19aec <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   19ae4:	00800044 	movi	r2,1
   19ae8:	00002b06 	br	19b98 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19aec:	0005303a 	rdctl	r2,status
   19af0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19af4:	e0fffc17 	ldw	r3,-16(fp)
   19af8:	00bfff84 	movi	r2,-2
   19afc:	1884703a 	and	r2,r3,r2
   19b00:	1001703a 	wrctl	status,r2
  
  return context;
   19b04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   19b08:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   19b0c:	e0bffe17 	ldw	r2,-8(fp)
   19b10:	10c00283 	ldbu	r3,10(r2)
   19b14:	e0bfff17 	ldw	r2,-4(fp)
   19b18:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   19b1c:	e0bffe17 	ldw	r2,-8(fp)
   19b20:	108002c4 	addi	r2,r2,11
   19b24:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   19b28:	e0bfff17 	ldw	r2,-4(fp)
   19b2c:	10800084 	addi	r2,r2,2
   19b30:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19b34:	e03ffa05 	stb	zero,-24(fp)
   19b38:	00000b06 	br	19b68 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   19b3c:	e0bff917 	ldw	r2,-28(fp)
   19b40:	10c00044 	addi	r3,r2,1
   19b44:	e0fff915 	stw	r3,-28(fp)
   19b48:	e0fff817 	ldw	r3,-32(fp)
   19b4c:	19000044 	addi	r4,r3,1
   19b50:	e13ff815 	stw	r4,-32(fp)
   19b54:	18c00003 	ldbu	r3,0(r3)
   19b58:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19b5c:	e0bffa03 	ldbu	r2,-24(fp)
   19b60:	10800044 	addi	r2,r2,1
   19b64:	e0bffa05 	stb	r2,-24(fp)
   19b68:	e0bffa03 	ldbu	r2,-24(fp)
   19b6c:	108000f0 	cmpltui	r2,r2,3
   19b70:	103ff21e 	bne	r2,zero,19b3c <__alt_mem_Flash_flash_data+0xf4019b3c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   19b74:	e0bffe17 	ldw	r2,-8(fp)
   19b78:	10c0020b 	ldhu	r3,8(r2)
   19b7c:	e0bfff17 	ldw	r2,-4(fp)
   19b80:	10c0000d 	sth	r3,0(r2)
   19b84:	e0bffb17 	ldw	r2,-20(fp)
   19b88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b8c:	e0bffd17 	ldw	r2,-12(fp)
   19b90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19b94:	0005883a 	mov	r2,zero
}
   19b98:	e037883a 	mov	sp,fp
   19b9c:	df000017 	ldw	fp,0(sp)
   19ba0:	dec00104 	addi	sp,sp,4
   19ba4:	f800283a 	ret

00019ba8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   19ba8:	defff904 	addi	sp,sp,-28
   19bac:	df000615 	stw	fp,24(sp)
   19bb0:	df000604 	addi	fp,sp,24
   19bb4:	e13ffd15 	stw	r4,-12(fp)
   19bb8:	2805883a 	mov	r2,r5
   19bbc:	e1bfff15 	stw	r6,-4(fp)
   19bc0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19bc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19bc8:	e0bfff17 	ldw	r2,-4(fp)
   19bcc:	1000011e 	bne	r2,zero,19bd4 <OSSemSet+0x2c>
        return;
   19bd0:	00003006 	br	19c94 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19bd4:	e0bffd17 	ldw	r2,-12(fp)
   19bd8:	1000041e 	bne	r2,zero,19bec <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19bdc:	e0bfff17 	ldw	r2,-4(fp)
   19be0:	00c00104 	movi	r3,4
   19be4:	10c00005 	stb	r3,0(r2)
        return;
   19be8:	00002a06 	br	19c94 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19bec:	e0bffd17 	ldw	r2,-12(fp)
   19bf0:	10800003 	ldbu	r2,0(r2)
   19bf4:	10803fcc 	andi	r2,r2,255
   19bf8:	108000e0 	cmpeqi	r2,r2,3
   19bfc:	1000041e 	bne	r2,zero,19c10 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   19c00:	e0bfff17 	ldw	r2,-4(fp)
   19c04:	00c00044 	movi	r3,1
   19c08:	10c00005 	stb	r3,0(r2)
        return;
   19c0c:	00002106 	br	19c94 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19c10:	0005303a 	rdctl	r2,status
   19c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19c18:	e0fffb17 	ldw	r3,-20(fp)
   19c1c:	00bfff84 	movi	r2,-2
   19c20:	1884703a 	and	r2,r3,r2
   19c24:	1001703a 	wrctl	status,r2
  
  return context;
   19c28:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   19c2c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   19c30:	e0bfff17 	ldw	r2,-4(fp)
   19c34:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   19c38:	e0bffd17 	ldw	r2,-12(fp)
   19c3c:	1080020b 	ldhu	r2,8(r2)
   19c40:	10bfffcc 	andi	r2,r2,65535
   19c44:	10000426 	beq	r2,zero,19c58 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   19c48:	e0bffd17 	ldw	r2,-12(fp)
   19c4c:	e0fffe0b 	ldhu	r3,-8(fp)
   19c50:	10c0020d 	sth	r3,8(r2)
   19c54:	00000b06 	br	19c84 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   19c58:	e0bffd17 	ldw	r2,-12(fp)
   19c5c:	10800283 	ldbu	r2,10(r2)
   19c60:	10803fcc 	andi	r2,r2,255
   19c64:	1000041e 	bne	r2,zero,19c78 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   19c68:	e0bffd17 	ldw	r2,-12(fp)
   19c6c:	e0fffe0b 	ldhu	r3,-8(fp)
   19c70:	10c0020d 	sth	r3,8(r2)
   19c74:	00000306 	br	19c84 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   19c78:	e0bfff17 	ldw	r2,-4(fp)
   19c7c:	00c01244 	movi	r3,73
   19c80:	10c00005 	stb	r3,0(r2)
   19c84:	e0bffa17 	ldw	r2,-24(fp)
   19c88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c8c:	e0bffc17 	ldw	r2,-16(fp)
   19c90:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   19c94:	e037883a 	mov	sp,fp
   19c98:	df000017 	ldw	fp,0(sp)
   19c9c:	dec00104 	addi	sp,sp,4
   19ca0:	f800283a 	ret

00019ca4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   19ca4:	defff104 	addi	sp,sp,-60
   19ca8:	dfc00e15 	stw	ra,56(sp)
   19cac:	df000d15 	stw	fp,52(sp)
   19cb0:	df000d04 	addi	fp,sp,52
   19cb4:	2007883a 	mov	r3,r4
   19cb8:	2805883a 	mov	r2,r5
   19cbc:	e0fffe05 	stb	r3,-8(fp)
   19cc0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   19cc4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   19cc8:	e0bffe03 	ldbu	r2,-8(fp)
   19ccc:	10800530 	cmpltui	r2,r2,20
   19cd0:	1000051e 	bne	r2,zero,19ce8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   19cd4:	e0bffe03 	ldbu	r2,-8(fp)
   19cd8:	10803fe0 	cmpeqi	r2,r2,255
   19cdc:	1000021e 	bne	r2,zero,19ce8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   19ce0:	00800a84 	movi	r2,42
   19ce4:	00013a06 	br	1a1d0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   19ce8:	e0bfff03 	ldbu	r2,-4(fp)
   19cec:	10800530 	cmpltui	r2,r2,20
   19cf0:	1000021e 	bne	r2,zero,19cfc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   19cf4:	00800a84 	movi	r2,42
   19cf8:	00013506 	br	1a1d0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19cfc:	0005303a 	rdctl	r2,status
   19d00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d04:	e0fff917 	ldw	r3,-28(fp)
   19d08:	00bfff84 	movi	r2,-2
   19d0c:	1884703a 	and	r2,r3,r2
   19d10:	1001703a 	wrctl	status,r2
  
  return context;
   19d14:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19d18:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   19d1c:	e0ffff03 	ldbu	r3,-4(fp)
   19d20:	00800134 	movhi	r2,4
   19d24:	10956904 	addi	r2,r2,21924
   19d28:	18c7883a 	add	r3,r3,r3
   19d2c:	18c7883a 	add	r3,r3,r3
   19d30:	10c5883a 	add	r2,r2,r3
   19d34:	10800017 	ldw	r2,0(r2)
   19d38:	10000626 	beq	r2,zero,19d54 <OSTaskChangePrio+0xb0>
   19d3c:	e0bff517 	ldw	r2,-44(fp)
   19d40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d44:	e0bffa17 	ldw	r2,-24(fp)
   19d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   19d4c:	00800a04 	movi	r2,40
   19d50:	00011f06 	br	1a1d0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   19d54:	e0bffe03 	ldbu	r2,-8(fp)
   19d58:	10803fd8 	cmpnei	r2,r2,255
   19d5c:	1000051e 	bne	r2,zero,19d74 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   19d60:	008000b4 	movhi	r2,2
   19d64:	1090c904 	addi	r2,r2,17188
   19d68:	10800017 	ldw	r2,0(r2)
   19d6c:	10800c83 	ldbu	r2,50(r2)
   19d70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   19d74:	e0fffe03 	ldbu	r3,-8(fp)
   19d78:	00800134 	movhi	r2,4
   19d7c:	10956904 	addi	r2,r2,21924
   19d80:	18c7883a 	add	r3,r3,r3
   19d84:	18c7883a 	add	r3,r3,r3
   19d88:	10c5883a 	add	r2,r2,r3
   19d8c:	10800017 	ldw	r2,0(r2)
   19d90:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   19d94:	e0bff617 	ldw	r2,-40(fp)
   19d98:	1000061e 	bne	r2,zero,19db4 <OSTaskChangePrio+0x110>
   19d9c:	e0bff517 	ldw	r2,-44(fp)
   19da0:	e0bffb15 	stw	r2,-20(fp)
   19da4:	e0bffb17 	ldw	r2,-20(fp)
   19da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   19dac:	00800a44 	movi	r2,41
   19db0:	00010706 	br	1a1d0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   19db4:	e0bff617 	ldw	r2,-40(fp)
   19db8:	10800058 	cmpnei	r2,r2,1
   19dbc:	1000061e 	bne	r2,zero,19dd8 <OSTaskChangePrio+0x134>
   19dc0:	e0bff517 	ldw	r2,-44(fp)
   19dc4:	e0bffc15 	stw	r2,-16(fp)
   19dc8:	e0bffc17 	ldw	r2,-16(fp)
   19dcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   19dd0:	008010c4 	movi	r2,67
   19dd4:	0000fe06 	br	1a1d0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   19dd8:	e0bfff03 	ldbu	r2,-4(fp)
   19ddc:	1004d0fa 	srli	r2,r2,3
   19de0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   19de4:	e0bfff03 	ldbu	r2,-4(fp)
   19de8:	108001cc 	andi	r2,r2,7
   19dec:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   19df0:	e0bff703 	ldbu	r2,-36(fp)
   19df4:	00c00044 	movi	r3,1
   19df8:	1884983a 	sll	r2,r3,r2
   19dfc:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   19e00:	e0bff743 	ldbu	r2,-35(fp)
   19e04:	00c00044 	movi	r3,1
   19e08:	1884983a 	sll	r2,r3,r2
   19e0c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   19e10:	e0fffe03 	ldbu	r3,-8(fp)
   19e14:	00800134 	movhi	r2,4
   19e18:	10956904 	addi	r2,r2,21924
   19e1c:	18c7883a 	add	r3,r3,r3
   19e20:	18c7883a 	add	r3,r3,r3
   19e24:	10c5883a 	add	r2,r2,r3
   19e28:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   19e2c:	e0ffff03 	ldbu	r3,-4(fp)
   19e30:	00800134 	movhi	r2,4
   19e34:	10956904 	addi	r2,r2,21924
   19e38:	18c7883a 	add	r3,r3,r3
   19e3c:	18c7883a 	add	r3,r3,r3
   19e40:	10c5883a 	add	r2,r2,r3
   19e44:	e0fff617 	ldw	r3,-40(fp)
   19e48:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   19e4c:	e0bff617 	ldw	r2,-40(fp)
   19e50:	10800d03 	ldbu	r2,52(r2)
   19e54:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19e58:	e0bff617 	ldw	r2,-40(fp)
   19e5c:	10800d83 	ldbu	r2,54(r2)
   19e60:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19e64:	e0bff617 	ldw	r2,-40(fp)
   19e68:	10800d43 	ldbu	r2,53(r2)
   19e6c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   19e70:	e0fff803 	ldbu	r3,-32(fp)
   19e74:	008000b4 	movhi	r2,2
   19e78:	1090c644 	addi	r2,r2,17177
   19e7c:	10c5883a 	add	r2,r2,r3
   19e80:	10c00003 	ldbu	r3,0(r2)
   19e84:	e0bff883 	ldbu	r2,-30(fp)
   19e88:	1884703a 	and	r2,r3,r2
   19e8c:	10803fcc 	andi	r2,r2,255
   19e90:	10003726 	beq	r2,zero,19f70 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   19e94:	e0fff803 	ldbu	r3,-32(fp)
   19e98:	e13ff803 	ldbu	r4,-32(fp)
   19e9c:	008000b4 	movhi	r2,2
   19ea0:	1090c644 	addi	r2,r2,17177
   19ea4:	1105883a 	add	r2,r2,r4
   19ea8:	10800003 	ldbu	r2,0(r2)
   19eac:	1009883a 	mov	r4,r2
   19eb0:	e0bff883 	ldbu	r2,-30(fp)
   19eb4:	0084303a 	nor	r2,zero,r2
   19eb8:	2084703a 	and	r2,r4,r2
   19ebc:	1009883a 	mov	r4,r2
   19ec0:	008000b4 	movhi	r2,2
   19ec4:	1090c644 	addi	r2,r2,17177
   19ec8:	10c5883a 	add	r2,r2,r3
   19ecc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   19ed0:	e0fff803 	ldbu	r3,-32(fp)
   19ed4:	008000b4 	movhi	r2,2
   19ed8:	1090c644 	addi	r2,r2,17177
   19edc:	10c5883a 	add	r2,r2,r3
   19ee0:	10800003 	ldbu	r2,0(r2)
   19ee4:	10803fcc 	andi	r2,r2,255
   19ee8:	10000b1e 	bne	r2,zero,19f18 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   19eec:	e0bff843 	ldbu	r2,-31(fp)
   19ef0:	0084303a 	nor	r2,zero,r2
   19ef4:	1007883a 	mov	r3,r2
   19ef8:	008000b4 	movhi	r2,2
   19efc:	1090c604 	addi	r2,r2,17176
   19f00:	10800003 	ldbu	r2,0(r2)
   19f04:	1884703a 	and	r2,r3,r2
   19f08:	1007883a 	mov	r3,r2
   19f0c:	008000b4 	movhi	r2,2
   19f10:	1090c604 	addi	r2,r2,17176
   19f14:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   19f18:	008000b4 	movhi	r2,2
   19f1c:	1090c604 	addi	r2,r2,17176
   19f20:	10c00003 	ldbu	r3,0(r2)
   19f24:	e0bff783 	ldbu	r2,-34(fp)
   19f28:	1884b03a 	or	r2,r3,r2
   19f2c:	1007883a 	mov	r3,r2
   19f30:	008000b4 	movhi	r2,2
   19f34:	1090c604 	addi	r2,r2,17176
   19f38:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   19f3c:	e0fff703 	ldbu	r3,-36(fp)
   19f40:	e13ff703 	ldbu	r4,-36(fp)
   19f44:	008000b4 	movhi	r2,2
   19f48:	1090c644 	addi	r2,r2,17177
   19f4c:	1105883a 	add	r2,r2,r4
   19f50:	11000003 	ldbu	r4,0(r2)
   19f54:	e0bff7c3 	ldbu	r2,-33(fp)
   19f58:	2084b03a 	or	r2,r4,r2
   19f5c:	1009883a 	mov	r4,r2
   19f60:	008000b4 	movhi	r2,2
   19f64:	1090c644 	addi	r2,r2,17177
   19f68:	10c5883a 	add	r2,r2,r3
   19f6c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   19f70:	e0bff617 	ldw	r2,-40(fp)
   19f74:	10800717 	ldw	r2,28(r2)
   19f78:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   19f7c:	e0bff317 	ldw	r2,-52(fp)
   19f80:	10003326 	beq	r2,zero,1a050 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19f84:	e0bff803 	ldbu	r2,-32(fp)
   19f88:	e0fff803 	ldbu	r3,-32(fp)
   19f8c:	e13ff317 	ldw	r4,-52(fp)
   19f90:	20c7883a 	add	r3,r4,r3
   19f94:	18c00204 	addi	r3,r3,8
   19f98:	18c000c3 	ldbu	r3,3(r3)
   19f9c:	1809883a 	mov	r4,r3
   19fa0:	e0fff883 	ldbu	r3,-30(fp)
   19fa4:	00c6303a 	nor	r3,zero,r3
   19fa8:	20c6703a 	and	r3,r4,r3
   19fac:	1809883a 	mov	r4,r3
   19fb0:	e0fff317 	ldw	r3,-52(fp)
   19fb4:	1885883a 	add	r2,r3,r2
   19fb8:	10800204 	addi	r2,r2,8
   19fbc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19fc0:	e0bff803 	ldbu	r2,-32(fp)
   19fc4:	e0fff317 	ldw	r3,-52(fp)
   19fc8:	1885883a 	add	r2,r3,r2
   19fcc:	10800204 	addi	r2,r2,8
   19fd0:	108000c3 	ldbu	r2,3(r2)
   19fd4:	10803fcc 	andi	r2,r2,255
   19fd8:	1000091e 	bne	r2,zero,1a000 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   19fdc:	e0bff317 	ldw	r2,-52(fp)
   19fe0:	10800283 	ldbu	r2,10(r2)
   19fe4:	1007883a 	mov	r3,r2
   19fe8:	e0bff843 	ldbu	r2,-31(fp)
   19fec:	0084303a 	nor	r2,zero,r2
   19ff0:	1884703a 	and	r2,r3,r2
   19ff4:	1007883a 	mov	r3,r2
   19ff8:	e0bff317 	ldw	r2,-52(fp)
   19ffc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1a000:	e0bff317 	ldw	r2,-52(fp)
   1a004:	10c00283 	ldbu	r3,10(r2)
   1a008:	e0bff783 	ldbu	r2,-34(fp)
   1a00c:	1884b03a 	or	r2,r3,r2
   1a010:	1007883a 	mov	r3,r2
   1a014:	e0bff317 	ldw	r2,-52(fp)
   1a018:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1a01c:	e0bff703 	ldbu	r2,-36(fp)
   1a020:	e0fff703 	ldbu	r3,-36(fp)
   1a024:	e13ff317 	ldw	r4,-52(fp)
   1a028:	20c7883a 	add	r3,r4,r3
   1a02c:	18c00204 	addi	r3,r3,8
   1a030:	190000c3 	ldbu	r4,3(r3)
   1a034:	e0fff7c3 	ldbu	r3,-33(fp)
   1a038:	20c6b03a 	or	r3,r4,r3
   1a03c:	1809883a 	mov	r4,r3
   1a040:	e0fff317 	ldw	r3,-52(fp)
   1a044:	1885883a 	add	r2,r3,r2
   1a048:	10800204 	addi	r2,r2,8
   1a04c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1a050:	e0bff617 	ldw	r2,-40(fp)
   1a054:	10800817 	ldw	r2,32(r2)
   1a058:	10004226 	beq	r2,zero,1a164 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1a05c:	e0bff617 	ldw	r2,-40(fp)
   1a060:	10800817 	ldw	r2,32(r2)
   1a064:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1a068:	e0bff417 	ldw	r2,-48(fp)
   1a06c:	10800017 	ldw	r2,0(r2)
   1a070:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1a074:	00003906 	br	1a15c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1a078:	e0bff803 	ldbu	r2,-32(fp)
   1a07c:	e0fff803 	ldbu	r3,-32(fp)
   1a080:	e13ff317 	ldw	r4,-52(fp)
   1a084:	20c7883a 	add	r3,r4,r3
   1a088:	18c00204 	addi	r3,r3,8
   1a08c:	18c000c3 	ldbu	r3,3(r3)
   1a090:	1809883a 	mov	r4,r3
   1a094:	e0fff883 	ldbu	r3,-30(fp)
   1a098:	00c6303a 	nor	r3,zero,r3
   1a09c:	20c6703a 	and	r3,r4,r3
   1a0a0:	1809883a 	mov	r4,r3
   1a0a4:	e0fff317 	ldw	r3,-52(fp)
   1a0a8:	1885883a 	add	r2,r3,r2
   1a0ac:	10800204 	addi	r2,r2,8
   1a0b0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1a0b4:	e0bff803 	ldbu	r2,-32(fp)
   1a0b8:	e0fff317 	ldw	r3,-52(fp)
   1a0bc:	1885883a 	add	r2,r3,r2
   1a0c0:	10800204 	addi	r2,r2,8
   1a0c4:	108000c3 	ldbu	r2,3(r2)
   1a0c8:	10803fcc 	andi	r2,r2,255
   1a0cc:	1000091e 	bne	r2,zero,1a0f4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1a0d0:	e0bff317 	ldw	r2,-52(fp)
   1a0d4:	10800283 	ldbu	r2,10(r2)
   1a0d8:	1007883a 	mov	r3,r2
   1a0dc:	e0bff843 	ldbu	r2,-31(fp)
   1a0e0:	0084303a 	nor	r2,zero,r2
   1a0e4:	1884703a 	and	r2,r3,r2
   1a0e8:	1007883a 	mov	r3,r2
   1a0ec:	e0bff317 	ldw	r2,-52(fp)
   1a0f0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1a0f4:	e0bff317 	ldw	r2,-52(fp)
   1a0f8:	10c00283 	ldbu	r3,10(r2)
   1a0fc:	e0bff783 	ldbu	r2,-34(fp)
   1a100:	1884b03a 	or	r2,r3,r2
   1a104:	1007883a 	mov	r3,r2
   1a108:	e0bff317 	ldw	r2,-52(fp)
   1a10c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1a110:	e0bff703 	ldbu	r2,-36(fp)
   1a114:	e0fff703 	ldbu	r3,-36(fp)
   1a118:	e13ff317 	ldw	r4,-52(fp)
   1a11c:	20c7883a 	add	r3,r4,r3
   1a120:	18c00204 	addi	r3,r3,8
   1a124:	190000c3 	ldbu	r4,3(r3)
   1a128:	e0fff7c3 	ldbu	r3,-33(fp)
   1a12c:	20c6b03a 	or	r3,r4,r3
   1a130:	1809883a 	mov	r4,r3
   1a134:	e0fff317 	ldw	r3,-52(fp)
   1a138:	1885883a 	add	r2,r3,r2
   1a13c:	10800204 	addi	r2,r2,8
   1a140:	110000c5 	stb	r4,3(r2)
            pevents++;
   1a144:	e0bff417 	ldw	r2,-48(fp)
   1a148:	10800104 	addi	r2,r2,4
   1a14c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1a150:	e0bff417 	ldw	r2,-48(fp)
   1a154:	10800017 	ldw	r2,0(r2)
   1a158:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1a15c:	e0bff317 	ldw	r2,-52(fp)
   1a160:	103fc51e 	bne	r2,zero,1a078 <__alt_mem_Flash_flash_data+0xf401a078>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1a164:	e0bff617 	ldw	r2,-40(fp)
   1a168:	e0ffff03 	ldbu	r3,-4(fp)
   1a16c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1a170:	e0bff617 	ldw	r2,-40(fp)
   1a174:	e0fff703 	ldbu	r3,-36(fp)
   1a178:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1a17c:	e0bff617 	ldw	r2,-40(fp)
   1a180:	e0fff743 	ldbu	r3,-35(fp)
   1a184:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1a188:	e0bff617 	ldw	r2,-40(fp)
   1a18c:	e0fff783 	ldbu	r3,-34(fp)
   1a190:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1a194:	e0bff617 	ldw	r2,-40(fp)
   1a198:	e0fff7c3 	ldbu	r3,-33(fp)
   1a19c:	10c00d45 	stb	r3,53(r2)
   1a1a0:	e0bff517 	ldw	r2,-44(fp)
   1a1a4:	e0bffd15 	stw	r2,-12(fp)
   1a1a8:	e0bffd17 	ldw	r2,-12(fp)
   1a1ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a1b0:	008000b4 	movhi	r2,2
   1a1b4:	1090ba44 	addi	r2,r2,17129
   1a1b8:	10800003 	ldbu	r2,0(r2)
   1a1bc:	10803fcc 	andi	r2,r2,255
   1a1c0:	10800058 	cmpnei	r2,r2,1
   1a1c4:	1000011e 	bne	r2,zero,1a1cc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1a1c8:	0014c000 	call	14c00 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a1cc:	0005883a 	mov	r2,zero
}
   1a1d0:	e037883a 	mov	sp,fp
   1a1d4:	dfc00117 	ldw	ra,4(sp)
   1a1d8:	df000017 	ldw	fp,0(sp)
   1a1dc:	dec00204 	addi	sp,sp,8
   1a1e0:	f800283a 	ret

0001a1e4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1a1e4:	deffee04 	addi	sp,sp,-72
   1a1e8:	dfc01115 	stw	ra,68(sp)
   1a1ec:	df001015 	stw	fp,64(sp)
   1a1f0:	df001004 	addi	fp,sp,64
   1a1f4:	e13ffc15 	stw	r4,-16(fp)
   1a1f8:	e17ffd15 	stw	r5,-12(fp)
   1a1fc:	e1bffe15 	stw	r6,-8(fp)
   1a200:	3805883a 	mov	r2,r7
   1a204:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a208:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a20c:	e0bfff03 	ldbu	r2,-4(fp)
   1a210:	10800570 	cmpltui	r2,r2,21
   1a214:	1000021e 	bne	r2,zero,1a220 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1a218:	00800a84 	movi	r2,42
   1a21c:	00005b06 	br	1a38c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a220:	0005303a 	rdctl	r2,status
   1a224:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a228:	e0fff617 	ldw	r3,-40(fp)
   1a22c:	00bfff84 	movi	r2,-2
   1a230:	1884703a 	and	r2,r3,r2
   1a234:	1001703a 	wrctl	status,r2
  
  return context;
   1a238:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a23c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a240:	008000b4 	movhi	r2,2
   1a244:	1090c804 	addi	r2,r2,17184
   1a248:	10800003 	ldbu	r2,0(r2)
   1a24c:	10803fcc 	andi	r2,r2,255
   1a250:	10000626 	beq	r2,zero,1a26c <OSTaskCreate+0x88>
   1a254:	e0bff317 	ldw	r2,-52(fp)
   1a258:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a25c:	e0bff717 	ldw	r2,-36(fp)
   1a260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a264:	00800f04 	movi	r2,60
   1a268:	00004806 	br	1a38c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a26c:	e0ffff03 	ldbu	r3,-4(fp)
   1a270:	00800134 	movhi	r2,4
   1a274:	10956904 	addi	r2,r2,21924
   1a278:	18c7883a 	add	r3,r3,r3
   1a27c:	18c7883a 	add	r3,r3,r3
   1a280:	10c5883a 	add	r2,r2,r3
   1a284:	10800017 	ldw	r2,0(r2)
   1a288:	10003b1e 	bne	r2,zero,1a378 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a28c:	e0ffff03 	ldbu	r3,-4(fp)
   1a290:	00800134 	movhi	r2,4
   1a294:	10956904 	addi	r2,r2,21924
   1a298:	18c7883a 	add	r3,r3,r3
   1a29c:	18c7883a 	add	r3,r3,r3
   1a2a0:	10c5883a 	add	r2,r2,r3
   1a2a4:	00c00044 	movi	r3,1
   1a2a8:	10c00015 	stw	r3,0(r2)
   1a2ac:	e0bff317 	ldw	r2,-52(fp)
   1a2b0:	e0bff815 	stw	r2,-32(fp)
   1a2b4:	e0bff817 	ldw	r2,-32(fp)
   1a2b8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1a2bc:	e13ffc17 	ldw	r4,-16(fp)
   1a2c0:	e17ffd17 	ldw	r5,-12(fp)
   1a2c4:	e1bffe17 	ldw	r6,-8(fp)
   1a2c8:	000f883a 	mov	r7,zero
   1a2cc:	001eed80 	call	1eed8 <OSTaskStkInit>
   1a2d0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1a2d4:	e0bfff03 	ldbu	r2,-4(fp)
   1a2d8:	d8000015 	stw	zero,0(sp)
   1a2dc:	d8000115 	stw	zero,4(sp)
   1a2e0:	d8000215 	stw	zero,8(sp)
   1a2e4:	1009883a 	mov	r4,r2
   1a2e8:	e17ff417 	ldw	r5,-48(fp)
   1a2ec:	000d883a 	mov	r6,zero
   1a2f0:	000f883a 	mov	r7,zero
   1a2f4:	00150040 	call	15004 <OS_TCBInit>
   1a2f8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1a2fc:	e0bff503 	ldbu	r2,-44(fp)
   1a300:	1000081e 	bne	r2,zero,1a324 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1a304:	008000b4 	movhi	r2,2
   1a308:	1090ba44 	addi	r2,r2,17129
   1a30c:	10800003 	ldbu	r2,0(r2)
   1a310:	10803fcc 	andi	r2,r2,255
   1a314:	10800058 	cmpnei	r2,r2,1
   1a318:	1000151e 	bne	r2,zero,1a370 <OSTaskCreate+0x18c>
                OS_Sched();
   1a31c:	0014c000 	call	14c00 <OS_Sched>
   1a320:	00001306 	br	1a370 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a324:	0005303a 	rdctl	r2,status
   1a328:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a32c:	e0fff917 	ldw	r3,-28(fp)
   1a330:	00bfff84 	movi	r2,-2
   1a334:	1884703a 	and	r2,r3,r2
   1a338:	1001703a 	wrctl	status,r2
  
  return context;
   1a33c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a340:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1a344:	e0ffff03 	ldbu	r3,-4(fp)
   1a348:	00800134 	movhi	r2,4
   1a34c:	10956904 	addi	r2,r2,21924
   1a350:	18c7883a 	add	r3,r3,r3
   1a354:	18c7883a 	add	r3,r3,r3
   1a358:	10c5883a 	add	r2,r2,r3
   1a35c:	10000015 	stw	zero,0(r2)
   1a360:	e0bff317 	ldw	r2,-52(fp)
   1a364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a368:	e0bffa17 	ldw	r2,-24(fp)
   1a36c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a370:	e0bff503 	ldbu	r2,-44(fp)
   1a374:	00000506 	br	1a38c <OSTaskCreate+0x1a8>
   1a378:	e0bff317 	ldw	r2,-52(fp)
   1a37c:	e0bffb15 	stw	r2,-20(fp)
   1a380:	e0bffb17 	ldw	r2,-20(fp)
   1a384:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a388:	00800a04 	movi	r2,40
}
   1a38c:	e037883a 	mov	sp,fp
   1a390:	dfc00117 	ldw	ra,4(sp)
   1a394:	df000017 	ldw	fp,0(sp)
   1a398:	dec00204 	addi	sp,sp,8
   1a39c:	f800283a 	ret

0001a3a0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1a3a0:	deffec04 	addi	sp,sp,-80
   1a3a4:	dfc01315 	stw	ra,76(sp)
   1a3a8:	df001215 	stw	fp,72(sp)
   1a3ac:	df001204 	addi	fp,sp,72
   1a3b0:	e13ffa15 	stw	r4,-24(fp)
   1a3b4:	e17ffb15 	stw	r5,-20(fp)
   1a3b8:	e1bffc15 	stw	r6,-16(fp)
   1a3bc:	3809883a 	mov	r4,r7
   1a3c0:	e0c00217 	ldw	r3,8(fp)
   1a3c4:	e0800617 	ldw	r2,24(fp)
   1a3c8:	e13ffd05 	stb	r4,-12(fp)
   1a3cc:	e0fffe0d 	sth	r3,-8(fp)
   1a3d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1a3d4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1a3d8:	e0bffd03 	ldbu	r2,-12(fp)
   1a3dc:	10800570 	cmpltui	r2,r2,21
   1a3e0:	1000021e 	bne	r2,zero,1a3ec <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1a3e4:	00800a84 	movi	r2,42
   1a3e8:	00006306 	br	1a578 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a3ec:	0005303a 	rdctl	r2,status
   1a3f0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a3f4:	e0fff417 	ldw	r3,-48(fp)
   1a3f8:	00bfff84 	movi	r2,-2
   1a3fc:	1884703a 	and	r2,r3,r2
   1a400:	1001703a 	wrctl	status,r2
  
  return context;
   1a404:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a408:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1a40c:	008000b4 	movhi	r2,2
   1a410:	1090c804 	addi	r2,r2,17184
   1a414:	10800003 	ldbu	r2,0(r2)
   1a418:	10803fcc 	andi	r2,r2,255
   1a41c:	10000626 	beq	r2,zero,1a438 <OSTaskCreateExt+0x98>
   1a420:	e0bff117 	ldw	r2,-60(fp)
   1a424:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a428:	e0bff517 	ldw	r2,-44(fp)
   1a42c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1a430:	00800f04 	movi	r2,60
   1a434:	00005006 	br	1a578 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1a438:	e0fffd03 	ldbu	r3,-12(fp)
   1a43c:	00800134 	movhi	r2,4
   1a440:	10956904 	addi	r2,r2,21924
   1a444:	18c7883a 	add	r3,r3,r3
   1a448:	18c7883a 	add	r3,r3,r3
   1a44c:	10c5883a 	add	r2,r2,r3
   1a450:	10800017 	ldw	r2,0(r2)
   1a454:	1000431e 	bne	r2,zero,1a564 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1a458:	e0fffd03 	ldbu	r3,-12(fp)
   1a45c:	00800134 	movhi	r2,4
   1a460:	10956904 	addi	r2,r2,21924
   1a464:	18c7883a 	add	r3,r3,r3
   1a468:	18c7883a 	add	r3,r3,r3
   1a46c:	10c5883a 	add	r2,r2,r3
   1a470:	00c00044 	movi	r3,1
   1a474:	10c00015 	stw	r3,0(r2)
   1a478:	e0bff117 	ldw	r2,-60(fp)
   1a47c:	e0bff615 	stw	r2,-40(fp)
   1a480:	e0bff617 	ldw	r2,-40(fp)
   1a484:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1a488:	e0bfff0b 	ldhu	r2,-4(fp)
   1a48c:	e1000317 	ldw	r4,12(fp)
   1a490:	e1400417 	ldw	r5,16(fp)
   1a494:	100d883a 	mov	r6,r2
   1a498:	001b52c0 	call	1b52c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1a49c:	e0bfff0b 	ldhu	r2,-4(fp)
   1a4a0:	e13ffa17 	ldw	r4,-24(fp)
   1a4a4:	e17ffb17 	ldw	r5,-20(fp)
   1a4a8:	e1bffc17 	ldw	r6,-16(fp)
   1a4ac:	100f883a 	mov	r7,r2
   1a4b0:	001eed80 	call	1eed8 <OSTaskStkInit>
   1a4b4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1a4b8:	e13ffd03 	ldbu	r4,-12(fp)
   1a4bc:	e1fffe0b 	ldhu	r7,-8(fp)
   1a4c0:	e0bfff0b 	ldhu	r2,-4(fp)
   1a4c4:	e0c00417 	ldw	r3,16(fp)
   1a4c8:	d8c00015 	stw	r3,0(sp)
   1a4cc:	e0c00517 	ldw	r3,20(fp)
   1a4d0:	d8c00115 	stw	r3,4(sp)
   1a4d4:	d8800215 	stw	r2,8(sp)
   1a4d8:	e17ff217 	ldw	r5,-56(fp)
   1a4dc:	e1800317 	ldw	r6,12(fp)
   1a4e0:	00150040 	call	15004 <OS_TCBInit>
   1a4e4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1a4e8:	e0bff303 	ldbu	r2,-52(fp)
   1a4ec:	1000081e 	bne	r2,zero,1a510 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1a4f0:	008000b4 	movhi	r2,2
   1a4f4:	1090ba44 	addi	r2,r2,17129
   1a4f8:	10800003 	ldbu	r2,0(r2)
   1a4fc:	10803fcc 	andi	r2,r2,255
   1a500:	10800058 	cmpnei	r2,r2,1
   1a504:	1000151e 	bne	r2,zero,1a55c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1a508:	0014c000 	call	14c00 <OS_Sched>
   1a50c:	00001306 	br	1a55c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a510:	0005303a 	rdctl	r2,status
   1a514:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a518:	e0fff717 	ldw	r3,-36(fp)
   1a51c:	00bfff84 	movi	r2,-2
   1a520:	1884703a 	and	r2,r3,r2
   1a524:	1001703a 	wrctl	status,r2
  
  return context;
   1a528:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1a52c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1a530:	e0fffd03 	ldbu	r3,-12(fp)
   1a534:	00800134 	movhi	r2,4
   1a538:	10956904 	addi	r2,r2,21924
   1a53c:	18c7883a 	add	r3,r3,r3
   1a540:	18c7883a 	add	r3,r3,r3
   1a544:	10c5883a 	add	r2,r2,r3
   1a548:	10000015 	stw	zero,0(r2)
   1a54c:	e0bff117 	ldw	r2,-60(fp)
   1a550:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a554:	e0bff817 	ldw	r2,-32(fp)
   1a558:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1a55c:	e0bff303 	ldbu	r2,-52(fp)
   1a560:	00000506 	br	1a578 <OSTaskCreateExt+0x1d8>
   1a564:	e0bff117 	ldw	r2,-60(fp)
   1a568:	e0bff915 	stw	r2,-28(fp)
   1a56c:	e0bff917 	ldw	r2,-28(fp)
   1a570:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1a574:	00800a04 	movi	r2,40
}
   1a578:	e037883a 	mov	sp,fp
   1a57c:	dfc00117 	ldw	ra,4(sp)
   1a580:	df000017 	ldw	fp,0(sp)
   1a584:	dec00204 	addi	sp,sp,8
   1a588:	f800283a 	ret

0001a58c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1a58c:	defff404 	addi	sp,sp,-48
   1a590:	dfc00b15 	stw	ra,44(sp)
   1a594:	df000a15 	stw	fp,40(sp)
   1a598:	df000a04 	addi	fp,sp,40
   1a59c:	2005883a 	mov	r2,r4
   1a5a0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1a5a4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1a5a8:	008000b4 	movhi	r2,2
   1a5ac:	1090c804 	addi	r2,r2,17184
   1a5b0:	10800003 	ldbu	r2,0(r2)
   1a5b4:	10803fcc 	andi	r2,r2,255
   1a5b8:	10000226 	beq	r2,zero,1a5c4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1a5bc:	00801004 	movi	r2,64
   1a5c0:	0000e506 	br	1a958 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1a5c4:	e0bfff03 	ldbu	r2,-4(fp)
   1a5c8:	10800518 	cmpnei	r2,r2,20
   1a5cc:	1000021e 	bne	r2,zero,1a5d8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a5d0:	00800f84 	movi	r2,62
   1a5d4:	0000e006 	br	1a958 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1a5d8:	e0bfff03 	ldbu	r2,-4(fp)
   1a5dc:	10800530 	cmpltui	r2,r2,20
   1a5e0:	1000051e 	bne	r2,zero,1a5f8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1a5e4:	e0bfff03 	ldbu	r2,-4(fp)
   1a5e8:	10803fe0 	cmpeqi	r2,r2,255
   1a5ec:	1000021e 	bne	r2,zero,1a5f8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1a5f0:	00800a84 	movi	r2,42
   1a5f4:	0000d806 	br	1a958 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a5f8:	0005303a 	rdctl	r2,status
   1a5fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a600:	e0fff917 	ldw	r3,-28(fp)
   1a604:	00bfff84 	movi	r2,-2
   1a608:	1884703a 	and	r2,r3,r2
   1a60c:	1001703a 	wrctl	status,r2
  
  return context;
   1a610:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1a614:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1a618:	e0bfff03 	ldbu	r2,-4(fp)
   1a61c:	10803fd8 	cmpnei	r2,r2,255
   1a620:	1000051e 	bne	r2,zero,1a638 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1a624:	008000b4 	movhi	r2,2
   1a628:	1090c904 	addi	r2,r2,17188
   1a62c:	10800017 	ldw	r2,0(r2)
   1a630:	10800c83 	ldbu	r2,50(r2)
   1a634:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a638:	e0ffff03 	ldbu	r3,-4(fp)
   1a63c:	00800134 	movhi	r2,4
   1a640:	10956904 	addi	r2,r2,21924
   1a644:	18c7883a 	add	r3,r3,r3
   1a648:	18c7883a 	add	r3,r3,r3
   1a64c:	10c5883a 	add	r2,r2,r3
   1a650:	10800017 	ldw	r2,0(r2)
   1a654:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1a658:	e0bff717 	ldw	r2,-36(fp)
   1a65c:	1000061e 	bne	r2,zero,1a678 <OSTaskDel+0xec>
   1a660:	e0bff617 	ldw	r2,-40(fp)
   1a664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a668:	e0bffa17 	ldw	r2,-24(fp)
   1a66c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a670:	008010c4 	movi	r2,67
   1a674:	0000b806 	br	1a958 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1a678:	e0bff717 	ldw	r2,-36(fp)
   1a67c:	10800058 	cmpnei	r2,r2,1
   1a680:	1000061e 	bne	r2,zero,1a69c <OSTaskDel+0x110>
   1a684:	e0bff617 	ldw	r2,-40(fp)
   1a688:	e0bffb15 	stw	r2,-20(fp)
   1a68c:	e0bffb17 	ldw	r2,-20(fp)
   1a690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a694:	00800f44 	movi	r2,61
   1a698:	0000af06 	br	1a958 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1a69c:	e0bff717 	ldw	r2,-36(fp)
   1a6a0:	10800d03 	ldbu	r2,52(r2)
   1a6a4:	10c03fcc 	andi	r3,r2,255
   1a6a8:	e0bff717 	ldw	r2,-36(fp)
   1a6ac:	10800d03 	ldbu	r2,52(r2)
   1a6b0:	11003fcc 	andi	r4,r2,255
   1a6b4:	008000b4 	movhi	r2,2
   1a6b8:	1090c644 	addi	r2,r2,17177
   1a6bc:	1105883a 	add	r2,r2,r4
   1a6c0:	10800003 	ldbu	r2,0(r2)
   1a6c4:	1009883a 	mov	r4,r2
   1a6c8:	e0bff717 	ldw	r2,-36(fp)
   1a6cc:	10800d43 	ldbu	r2,53(r2)
   1a6d0:	0084303a 	nor	r2,zero,r2
   1a6d4:	2084703a 	and	r2,r4,r2
   1a6d8:	1009883a 	mov	r4,r2
   1a6dc:	008000b4 	movhi	r2,2
   1a6e0:	1090c644 	addi	r2,r2,17177
   1a6e4:	10c5883a 	add	r2,r2,r3
   1a6e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1a6ec:	e0bff717 	ldw	r2,-36(fp)
   1a6f0:	10800d03 	ldbu	r2,52(r2)
   1a6f4:	10c03fcc 	andi	r3,r2,255
   1a6f8:	008000b4 	movhi	r2,2
   1a6fc:	1090c644 	addi	r2,r2,17177
   1a700:	10c5883a 	add	r2,r2,r3
   1a704:	10800003 	ldbu	r2,0(r2)
   1a708:	10803fcc 	andi	r2,r2,255
   1a70c:	10000c1e 	bne	r2,zero,1a740 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1a710:	e0bff717 	ldw	r2,-36(fp)
   1a714:	10800d83 	ldbu	r2,54(r2)
   1a718:	0084303a 	nor	r2,zero,r2
   1a71c:	1007883a 	mov	r3,r2
   1a720:	008000b4 	movhi	r2,2
   1a724:	1090c604 	addi	r2,r2,17176
   1a728:	10800003 	ldbu	r2,0(r2)
   1a72c:	1884703a 	and	r2,r3,r2
   1a730:	1007883a 	mov	r3,r2
   1a734:	008000b4 	movhi	r2,2
   1a738:	1090c604 	addi	r2,r2,17176
   1a73c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1a740:	e0bff717 	ldw	r2,-36(fp)
   1a744:	10800717 	ldw	r2,28(r2)
   1a748:	10000526 	beq	r2,zero,1a760 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1a74c:	e0bff717 	ldw	r2,-36(fp)
   1a750:	10800717 	ldw	r2,28(r2)
   1a754:	e13ff717 	ldw	r4,-36(fp)
   1a758:	100b883a 	mov	r5,r2
   1a75c:	00145d80 	call	145d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1a760:	e0bff717 	ldw	r2,-36(fp)
   1a764:	10800817 	ldw	r2,32(r2)
   1a768:	10000526 	beq	r2,zero,1a780 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1a76c:	e0bff717 	ldw	r2,-36(fp)
   1a770:	10800817 	ldw	r2,32(r2)
   1a774:	e13ff717 	ldw	r4,-36(fp)
   1a778:	100b883a 	mov	r5,r2
   1a77c:	001468c0 	call	1468c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1a780:	e0bff717 	ldw	r2,-36(fp)
   1a784:	10800a17 	ldw	r2,40(r2)
   1a788:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1a78c:	e0bff817 	ldw	r2,-32(fp)
   1a790:	10000226 	beq	r2,zero,1a79c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1a794:	e13ff817 	ldw	r4,-32(fp)
   1a798:	0016be00 	call	16be0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1a79c:	e0bff717 	ldw	r2,-36(fp)
   1a7a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1a7a4:	e0bff717 	ldw	r2,-36(fp)
   1a7a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1a7ac:	e0bff717 	ldw	r2,-36(fp)
   1a7b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1a7b4:	008000b4 	movhi	r2,2
   1a7b8:	1090ba04 	addi	r2,r2,17128
   1a7bc:	10800003 	ldbu	r2,0(r2)
   1a7c0:	10803fcc 	andi	r2,r2,255
   1a7c4:	10803fe0 	cmpeqi	r2,r2,255
   1a7c8:	1000081e 	bne	r2,zero,1a7ec <OSTaskDel+0x260>
        OSLockNesting++;
   1a7cc:	008000b4 	movhi	r2,2
   1a7d0:	1090ba04 	addi	r2,r2,17128
   1a7d4:	10800003 	ldbu	r2,0(r2)
   1a7d8:	10800044 	addi	r2,r2,1
   1a7dc:	1007883a 	mov	r3,r2
   1a7e0:	008000b4 	movhi	r2,2
   1a7e4:	1090ba04 	addi	r2,r2,17128
   1a7e8:	10c00005 	stb	r3,0(r2)
   1a7ec:	e0bff617 	ldw	r2,-40(fp)
   1a7f0:	e0bffc15 	stw	r2,-16(fp)
   1a7f4:	e0bffc17 	ldw	r2,-16(fp)
   1a7f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1a7fc:	00141cc0 	call	141cc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a800:	0005303a 	rdctl	r2,status
   1a804:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a808:	e0fffd17 	ldw	r3,-12(fp)
   1a80c:	00bfff84 	movi	r2,-2
   1a810:	1884703a 	and	r2,r3,r2
   1a814:	1001703a 	wrctl	status,r2
  
  return context;
   1a818:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1a81c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1a820:	008000b4 	movhi	r2,2
   1a824:	1090ba04 	addi	r2,r2,17128
   1a828:	10800003 	ldbu	r2,0(r2)
   1a82c:	10803fcc 	andi	r2,r2,255
   1a830:	10000826 	beq	r2,zero,1a854 <OSTaskDel+0x2c8>
        OSLockNesting--;
   1a834:	008000b4 	movhi	r2,2
   1a838:	1090ba04 	addi	r2,r2,17128
   1a83c:	10800003 	ldbu	r2,0(r2)
   1a840:	10bfffc4 	addi	r2,r2,-1
   1a844:	1007883a 	mov	r3,r2
   1a848:	008000b4 	movhi	r2,2
   1a84c:	1090ba04 	addi	r2,r2,17128
   1a850:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1a854:	e13ff717 	ldw	r4,-36(fp)
   1a858:	001f0540 	call	1f054 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1a85c:	008000b4 	movhi	r2,2
   1a860:	1090c244 	addi	r2,r2,17161
   1a864:	10800003 	ldbu	r2,0(r2)
   1a868:	10bfffc4 	addi	r2,r2,-1
   1a86c:	1007883a 	mov	r3,r2
   1a870:	008000b4 	movhi	r2,2
   1a874:	1090c244 	addi	r2,r2,17161
   1a878:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1a87c:	e0ffff03 	ldbu	r3,-4(fp)
   1a880:	00800134 	movhi	r2,4
   1a884:	10956904 	addi	r2,r2,21924
   1a888:	18c7883a 	add	r3,r3,r3
   1a88c:	18c7883a 	add	r3,r3,r3
   1a890:	10c5883a 	add	r2,r2,r3
   1a894:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1a898:	e0bff717 	ldw	r2,-36(fp)
   1a89c:	10800617 	ldw	r2,24(r2)
   1a8a0:	1000091e 	bne	r2,zero,1a8c8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1a8a4:	e0bff717 	ldw	r2,-36(fp)
   1a8a8:	10800517 	ldw	r2,20(r2)
   1a8ac:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1a8b0:	e0bff717 	ldw	r2,-36(fp)
   1a8b4:	10c00517 	ldw	r3,20(r2)
   1a8b8:	008000b4 	movhi	r2,2
   1a8bc:	1090bd04 	addi	r2,r2,17140
   1a8c0:	10c00015 	stw	r3,0(r2)
   1a8c4:	00000a06 	br	1a8f0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1a8c8:	e0bff717 	ldw	r2,-36(fp)
   1a8cc:	10800617 	ldw	r2,24(r2)
   1a8d0:	e0fff717 	ldw	r3,-36(fp)
   1a8d4:	18c00517 	ldw	r3,20(r3)
   1a8d8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1a8dc:	e0bff717 	ldw	r2,-36(fp)
   1a8e0:	10800517 	ldw	r2,20(r2)
   1a8e4:	e0fff717 	ldw	r3,-36(fp)
   1a8e8:	18c00617 	ldw	r3,24(r3)
   1a8ec:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1a8f0:	008000b4 	movhi	r2,2
   1a8f4:	1090c104 	addi	r2,r2,17156
   1a8f8:	10c00017 	ldw	r3,0(r2)
   1a8fc:	e0bff717 	ldw	r2,-36(fp)
   1a900:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1a904:	008000b4 	movhi	r2,2
   1a908:	1090c104 	addi	r2,r2,17156
   1a90c:	e0fff717 	ldw	r3,-36(fp)
   1a910:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1a914:	e0bff717 	ldw	r2,-36(fp)
   1a918:	00c00fc4 	movi	r3,63
   1a91c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1a920:	e0bff717 	ldw	r2,-36(fp)
   1a924:	10001345 	stb	zero,77(r2)
   1a928:	e0bff617 	ldw	r2,-40(fp)
   1a92c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a930:	e0bffe17 	ldw	r2,-8(fp)
   1a934:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a938:	008000b4 	movhi	r2,2
   1a93c:	1090ba44 	addi	r2,r2,17129
   1a940:	10800003 	ldbu	r2,0(r2)
   1a944:	10803fcc 	andi	r2,r2,255
   1a948:	10800058 	cmpnei	r2,r2,1
   1a94c:	1000011e 	bne	r2,zero,1a954 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1a950:	0014c000 	call	14c00 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a954:	0005883a 	mov	r2,zero
}
   1a958:	e037883a 	mov	sp,fp
   1a95c:	dfc00117 	ldw	ra,4(sp)
   1a960:	df000017 	ldw	fp,0(sp)
   1a964:	dec00204 	addi	sp,sp,8
   1a968:	f800283a 	ret

0001a96c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1a96c:	defff504 	addi	sp,sp,-44
   1a970:	df000a15 	stw	fp,40(sp)
   1a974:	df000a04 	addi	fp,sp,40
   1a978:	2005883a 	mov	r2,r4
   1a97c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a980:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1a984:	e0bfff03 	ldbu	r2,-4(fp)
   1a988:	10800518 	cmpnei	r2,r2,20
   1a98c:	1000021e 	bne	r2,zero,1a998 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a990:	00800f84 	movi	r2,62
   1a994:	00004706 	br	1aab4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a998:	e0bfff03 	ldbu	r2,-4(fp)
   1a99c:	10800530 	cmpltui	r2,r2,20
   1a9a0:	1000051e 	bne	r2,zero,1a9b8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1a9a4:	e0bfff03 	ldbu	r2,-4(fp)
   1a9a8:	10803fe0 	cmpeqi	r2,r2,255
   1a9ac:	1000021e 	bne	r2,zero,1a9b8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1a9b0:	00800a84 	movi	r2,42
   1a9b4:	00003f06 	br	1aab4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1a9b8:	e0bfff03 	ldbu	r2,-4(fp)
   1a9bc:	10803fd8 	cmpnei	r2,r2,255
   1a9c0:	1000131e 	bne	r2,zero,1aa10 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a9c4:	0005303a 	rdctl	r2,status
   1a9c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9cc:	e0fff917 	ldw	r3,-28(fp)
   1a9d0:	00bfff84 	movi	r2,-2
   1a9d4:	1884703a 	and	r2,r3,r2
   1a9d8:	1001703a 	wrctl	status,r2
  
  return context;
   1a9dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1a9e0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1a9e4:	008000b4 	movhi	r2,2
   1a9e8:	1090c904 	addi	r2,r2,17188
   1a9ec:	10800017 	ldw	r2,0(r2)
   1a9f0:	10800dc3 	ldbu	r2,55(r2)
   1a9f4:	e0bff705 	stb	r2,-36(fp)
   1a9f8:	e0bff617 	ldw	r2,-40(fp)
   1a9fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa00:	e0bffa17 	ldw	r2,-24(fp)
   1aa04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1aa08:	e0bff703 	ldbu	r2,-36(fp)
   1aa0c:	00002906 	br	1aab4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa10:	0005303a 	rdctl	r2,status
   1aa14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa18:	e0fffb17 	ldw	r3,-20(fp)
   1aa1c:	00bfff84 	movi	r2,-2
   1aa20:	1884703a 	and	r2,r3,r2
   1aa24:	1001703a 	wrctl	status,r2
  
  return context;
   1aa28:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1aa2c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1aa30:	e0ffff03 	ldbu	r3,-4(fp)
   1aa34:	00800134 	movhi	r2,4
   1aa38:	10956904 	addi	r2,r2,21924
   1aa3c:	18c7883a 	add	r3,r3,r3
   1aa40:	18c7883a 	add	r3,r3,r3
   1aa44:	10c5883a 	add	r2,r2,r3
   1aa48:	10800017 	ldw	r2,0(r2)
   1aa4c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1aa50:	e0bff817 	ldw	r2,-32(fp)
   1aa54:	1000061e 	bne	r2,zero,1aa70 <OSTaskDelReq+0x104>
   1aa58:	e0bff617 	ldw	r2,-40(fp)
   1aa5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa60:	e0bffc17 	ldw	r2,-16(fp)
   1aa64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1aa68:	008010c4 	movi	r2,67
   1aa6c:	00001106 	br	1aab4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1aa70:	e0bff817 	ldw	r2,-32(fp)
   1aa74:	10800058 	cmpnei	r2,r2,1
   1aa78:	1000061e 	bne	r2,zero,1aa94 <OSTaskDelReq+0x128>
   1aa7c:	e0bff617 	ldw	r2,-40(fp)
   1aa80:	e0bffd15 	stw	r2,-12(fp)
   1aa84:	e0bffd17 	ldw	r2,-12(fp)
   1aa88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1aa8c:	00800f44 	movi	r2,61
   1aa90:	00000806 	br	1aab4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1aa94:	e0bff817 	ldw	r2,-32(fp)
   1aa98:	00c00fc4 	movi	r3,63
   1aa9c:	10c00dc5 	stb	r3,55(r2)
   1aaa0:	e0bff617 	ldw	r2,-40(fp)
   1aaa4:	e0bffe15 	stw	r2,-8(fp)
   1aaa8:	e0bffe17 	ldw	r2,-8(fp)
   1aaac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1aab0:	0005883a 	mov	r2,zero
}
   1aab4:	e037883a 	mov	sp,fp
   1aab8:	df000017 	ldw	fp,0(sp)
   1aabc:	dec00104 	addi	sp,sp,4
   1aac0:	f800283a 	ret

0001aac4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1aac4:	defff404 	addi	sp,sp,-48
   1aac8:	dfc00b15 	stw	ra,44(sp)
   1aacc:	df000a15 	stw	fp,40(sp)
   1aad0:	df000a04 	addi	fp,sp,40
   1aad4:	2005883a 	mov	r2,r4
   1aad8:	e17ffe15 	stw	r5,-8(fp)
   1aadc:	e1bfff15 	stw	r6,-4(fp)
   1aae0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1aae4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1aae8:	e0bfff17 	ldw	r2,-4(fp)
   1aaec:	1000021e 	bne	r2,zero,1aaf8 <OSTaskNameGet+0x34>
        return (0);
   1aaf0:	0005883a 	mov	r2,zero
   1aaf4:	00005806 	br	1ac58 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1aaf8:	e0bffd03 	ldbu	r2,-12(fp)
   1aafc:	10800570 	cmpltui	r2,r2,21
   1ab00:	1000081e 	bne	r2,zero,1ab24 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1ab04:	e0bffd03 	ldbu	r2,-12(fp)
   1ab08:	10803fe0 	cmpeqi	r2,r2,255
   1ab0c:	1000051e 	bne	r2,zero,1ab24 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1ab10:	e0bfff17 	ldw	r2,-4(fp)
   1ab14:	00c00a84 	movi	r3,42
   1ab18:	10c00005 	stb	r3,0(r2)
            return (0);
   1ab1c:	0005883a 	mov	r2,zero
   1ab20:	00004d06 	br	1ac58 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1ab24:	e0bffe17 	ldw	r2,-8(fp)
   1ab28:	1000051e 	bne	r2,zero,1ab40 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1ab2c:	e0bfff17 	ldw	r2,-4(fp)
   1ab30:	00c00304 	movi	r3,12
   1ab34:	10c00005 	stb	r3,0(r2)
        return (0);
   1ab38:	0005883a 	mov	r2,zero
   1ab3c:	00004606 	br	1ac58 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1ab40:	008000b4 	movhi	r2,2
   1ab44:	1090c804 	addi	r2,r2,17184
   1ab48:	10800003 	ldbu	r2,0(r2)
   1ab4c:	10803fcc 	andi	r2,r2,255
   1ab50:	10000526 	beq	r2,zero,1ab68 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1ab54:	e0bfff17 	ldw	r2,-4(fp)
   1ab58:	00c00444 	movi	r3,17
   1ab5c:	10c00005 	stb	r3,0(r2)
        return (0);
   1ab60:	0005883a 	mov	r2,zero
   1ab64:	00003c06 	br	1ac58 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab68:	0005303a 	rdctl	r2,status
   1ab6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab70:	e0fff917 	ldw	r3,-28(fp)
   1ab74:	00bfff84 	movi	r2,-2
   1ab78:	1884703a 	and	r2,r3,r2
   1ab7c:	1001703a 	wrctl	status,r2
  
  return context;
   1ab80:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1ab84:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1ab88:	e0bffd03 	ldbu	r2,-12(fp)
   1ab8c:	10803fd8 	cmpnei	r2,r2,255
   1ab90:	1000051e 	bne	r2,zero,1aba8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1ab94:	008000b4 	movhi	r2,2
   1ab98:	1090c904 	addi	r2,r2,17188
   1ab9c:	10800017 	ldw	r2,0(r2)
   1aba0:	10800c83 	ldbu	r2,50(r2)
   1aba4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1aba8:	e0fffd03 	ldbu	r3,-12(fp)
   1abac:	00800134 	movhi	r2,4
   1abb0:	10956904 	addi	r2,r2,21924
   1abb4:	18c7883a 	add	r3,r3,r3
   1abb8:	18c7883a 	add	r3,r3,r3
   1abbc:	10c5883a 	add	r2,r2,r3
   1abc0:	10800017 	ldw	r2,0(r2)
   1abc4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1abc8:	e0bff717 	ldw	r2,-36(fp)
   1abcc:	1000091e 	bne	r2,zero,1abf4 <OSTaskNameGet+0x130>
   1abd0:	e0bff617 	ldw	r2,-40(fp)
   1abd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1abd8:	e0bffa17 	ldw	r2,-24(fp)
   1abdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1abe0:	e0bfff17 	ldw	r2,-4(fp)
   1abe4:	00c010c4 	movi	r3,67
   1abe8:	10c00005 	stb	r3,0(r2)
        return (0);
   1abec:	0005883a 	mov	r2,zero
   1abf0:	00001906 	br	1ac58 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1abf4:	e0bff717 	ldw	r2,-36(fp)
   1abf8:	10800058 	cmpnei	r2,r2,1
   1abfc:	1000091e 	bne	r2,zero,1ac24 <OSTaskNameGet+0x160>
   1ac00:	e0bff617 	ldw	r2,-40(fp)
   1ac04:	e0bffb15 	stw	r2,-20(fp)
   1ac08:	e0bffb17 	ldw	r2,-20(fp)
   1ac0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ac10:	e0bfff17 	ldw	r2,-4(fp)
   1ac14:	00c010c4 	movi	r3,67
   1ac18:	10c00005 	stb	r3,0(r2)
        return (0);
   1ac1c:	0005883a 	mov	r2,zero
   1ac20:	00000d06 	br	1ac58 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1ac24:	e0bff717 	ldw	r2,-36(fp)
   1ac28:	10801304 	addi	r2,r2,76
   1ac2c:	e13ffe17 	ldw	r4,-8(fp)
   1ac30:	100b883a 	mov	r5,r2
   1ac34:	0014d3c0 	call	14d3c <OS_StrCopy>
   1ac38:	e0bff805 	stb	r2,-32(fp)
   1ac3c:	e0bff617 	ldw	r2,-40(fp)
   1ac40:	e0bffc15 	stw	r2,-16(fp)
   1ac44:	e0bffc17 	ldw	r2,-16(fp)
   1ac48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ac4c:	e0bfff17 	ldw	r2,-4(fp)
   1ac50:	10000005 	stb	zero,0(r2)
    return (len);
   1ac54:	e0bff803 	ldbu	r2,-32(fp)
}
   1ac58:	e037883a 	mov	sp,fp
   1ac5c:	dfc00117 	ldw	ra,4(sp)
   1ac60:	df000017 	ldw	fp,0(sp)
   1ac64:	dec00204 	addi	sp,sp,8
   1ac68:	f800283a 	ret

0001ac6c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1ac6c:	defff304 	addi	sp,sp,-52
   1ac70:	dfc00c15 	stw	ra,48(sp)
   1ac74:	df000b15 	stw	fp,44(sp)
   1ac78:	df000b04 	addi	fp,sp,44
   1ac7c:	2005883a 	mov	r2,r4
   1ac80:	e17ffe15 	stw	r5,-8(fp)
   1ac84:	e1bfff15 	stw	r6,-4(fp)
   1ac88:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1ac8c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1ac90:	e0bfff17 	ldw	r2,-4(fp)
   1ac94:	1000011e 	bne	r2,zero,1ac9c <OSTaskNameSet+0x30>
        return;
   1ac98:	00005f06 	br	1ae18 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1ac9c:	e0bffd03 	ldbu	r2,-12(fp)
   1aca0:	10800570 	cmpltui	r2,r2,21
   1aca4:	1000071e 	bne	r2,zero,1acc4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1aca8:	e0bffd03 	ldbu	r2,-12(fp)
   1acac:	10803fe0 	cmpeqi	r2,r2,255
   1acb0:	1000041e 	bne	r2,zero,1acc4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1acb4:	e0bfff17 	ldw	r2,-4(fp)
   1acb8:	00c00a84 	movi	r3,42
   1acbc:	10c00005 	stb	r3,0(r2)
            return;
   1acc0:	00005506 	br	1ae18 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1acc4:	e0bffe17 	ldw	r2,-8(fp)
   1acc8:	1000041e 	bne	r2,zero,1acdc <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1accc:	e0bfff17 	ldw	r2,-4(fp)
   1acd0:	00c00304 	movi	r3,12
   1acd4:	10c00005 	stb	r3,0(r2)
        return;
   1acd8:	00004f06 	br	1ae18 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1acdc:	008000b4 	movhi	r2,2
   1ace0:	1090c804 	addi	r2,r2,17184
   1ace4:	10800003 	ldbu	r2,0(r2)
   1ace8:	10803fcc 	andi	r2,r2,255
   1acec:	10000426 	beq	r2,zero,1ad00 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1acf0:	e0bfff17 	ldw	r2,-4(fp)
   1acf4:	00c00484 	movi	r3,18
   1acf8:	10c00005 	stb	r3,0(r2)
        return;
   1acfc:	00004606 	br	1ae18 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad00:	0005303a 	rdctl	r2,status
   1ad04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad08:	e0fff817 	ldw	r3,-32(fp)
   1ad0c:	00bfff84 	movi	r2,-2
   1ad10:	1884703a 	and	r2,r3,r2
   1ad14:	1001703a 	wrctl	status,r2
  
  return context;
   1ad18:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1ad1c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1ad20:	e0bffd03 	ldbu	r2,-12(fp)
   1ad24:	10803fd8 	cmpnei	r2,r2,255
   1ad28:	1000051e 	bne	r2,zero,1ad40 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1ad2c:	008000b4 	movhi	r2,2
   1ad30:	1090c904 	addi	r2,r2,17188
   1ad34:	10800017 	ldw	r2,0(r2)
   1ad38:	10800c83 	ldbu	r2,50(r2)
   1ad3c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ad40:	e0fffd03 	ldbu	r3,-12(fp)
   1ad44:	00800134 	movhi	r2,4
   1ad48:	10956904 	addi	r2,r2,21924
   1ad4c:	18c7883a 	add	r3,r3,r3
   1ad50:	18c7883a 	add	r3,r3,r3
   1ad54:	10c5883a 	add	r2,r2,r3
   1ad58:	10800017 	ldw	r2,0(r2)
   1ad5c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1ad60:	e0bff617 	ldw	r2,-40(fp)
   1ad64:	1000081e 	bne	r2,zero,1ad88 <OSTaskNameSet+0x11c>
   1ad68:	e0bff517 	ldw	r2,-44(fp)
   1ad6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad70:	e0bff917 	ldw	r2,-28(fp)
   1ad74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ad78:	e0bfff17 	ldw	r2,-4(fp)
   1ad7c:	00c010c4 	movi	r3,67
   1ad80:	10c00005 	stb	r3,0(r2)
        return;
   1ad84:	00002406 	br	1ae18 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1ad88:	e0bff617 	ldw	r2,-40(fp)
   1ad8c:	10800058 	cmpnei	r2,r2,1
   1ad90:	1000081e 	bne	r2,zero,1adb4 <OSTaskNameSet+0x148>
   1ad94:	e0bff517 	ldw	r2,-44(fp)
   1ad98:	e0bffa15 	stw	r2,-24(fp)
   1ad9c:	e0bffa17 	ldw	r2,-24(fp)
   1ada0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ada4:	e0bfff17 	ldw	r2,-4(fp)
   1ada8:	00c010c4 	movi	r3,67
   1adac:	10c00005 	stb	r3,0(r2)
        return;
   1adb0:	00001906 	br	1ae18 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1adb4:	e13ffe17 	ldw	r4,-8(fp)
   1adb8:	0014db00 	call	14db0 <OS_StrLen>
   1adbc:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1adc0:	e0bff703 	ldbu	r2,-36(fp)
   1adc4:	10800830 	cmpltui	r2,r2,32
   1adc8:	1000081e 	bne	r2,zero,1adec <OSTaskNameSet+0x180>
   1adcc:	e0bff517 	ldw	r2,-44(fp)
   1add0:	e0bffb15 	stw	r2,-20(fp)
   1add4:	e0bffb17 	ldw	r2,-20(fp)
   1add8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1addc:	e0bfff17 	ldw	r2,-4(fp)
   1ade0:	00c01044 	movi	r3,65
   1ade4:	10c00005 	stb	r3,0(r2)
        return;
   1ade8:	00000b06 	br	1ae18 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1adec:	e0bff617 	ldw	r2,-40(fp)
   1adf0:	10801304 	addi	r2,r2,76
   1adf4:	1009883a 	mov	r4,r2
   1adf8:	e17ffe17 	ldw	r5,-8(fp)
   1adfc:	0014d3c0 	call	14d3c <OS_StrCopy>
   1ae00:	e0bff517 	ldw	r2,-44(fp)
   1ae04:	e0bffc15 	stw	r2,-16(fp)
   1ae08:	e0bffc17 	ldw	r2,-16(fp)
   1ae0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ae10:	e0bfff17 	ldw	r2,-4(fp)
   1ae14:	10000005 	stb	zero,0(r2)
}
   1ae18:	e037883a 	mov	sp,fp
   1ae1c:	dfc00117 	ldw	ra,4(sp)
   1ae20:	df000017 	ldw	fp,0(sp)
   1ae24:	dec00204 	addi	sp,sp,8
   1ae28:	f800283a 	ret

0001ae2c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1ae2c:	defff404 	addi	sp,sp,-48
   1ae30:	dfc00b15 	stw	ra,44(sp)
   1ae34:	df000a15 	stw	fp,40(sp)
   1ae38:	df000a04 	addi	fp,sp,40
   1ae3c:	2005883a 	mov	r2,r4
   1ae40:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1ae44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1ae48:	e0bfff03 	ldbu	r2,-4(fp)
   1ae4c:	10800530 	cmpltui	r2,r2,20
   1ae50:	1000021e 	bne	r2,zero,1ae5c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1ae54:	00800a84 	movi	r2,42
   1ae58:	00006d06 	br	1b010 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae5c:	0005303a 	rdctl	r2,status
   1ae60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae64:	e0fff817 	ldw	r3,-32(fp)
   1ae68:	00bfff84 	movi	r2,-2
   1ae6c:	1884703a 	and	r2,r3,r2
   1ae70:	1001703a 	wrctl	status,r2
  
  return context;
   1ae74:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ae78:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1ae7c:	e0ffff03 	ldbu	r3,-4(fp)
   1ae80:	00800134 	movhi	r2,4
   1ae84:	10956904 	addi	r2,r2,21924
   1ae88:	18c7883a 	add	r3,r3,r3
   1ae8c:	18c7883a 	add	r3,r3,r3
   1ae90:	10c5883a 	add	r2,r2,r3
   1ae94:	10800017 	ldw	r2,0(r2)
   1ae98:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1ae9c:	e0bff717 	ldw	r2,-36(fp)
   1aea0:	1000061e 	bne	r2,zero,1aebc <OSTaskResume+0x90>
   1aea4:	e0bff617 	ldw	r2,-40(fp)
   1aea8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aeac:	e0bff917 	ldw	r2,-28(fp)
   1aeb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1aeb4:	00801184 	movi	r2,70
   1aeb8:	00005506 	br	1b010 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1aebc:	e0bff717 	ldw	r2,-36(fp)
   1aec0:	10800058 	cmpnei	r2,r2,1
   1aec4:	1000061e 	bne	r2,zero,1aee0 <OSTaskResume+0xb4>
   1aec8:	e0bff617 	ldw	r2,-40(fp)
   1aecc:	e0bffa15 	stw	r2,-24(fp)
   1aed0:	e0bffa17 	ldw	r2,-24(fp)
   1aed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1aed8:	008010c4 	movi	r2,67
   1aedc:	00004c06 	br	1b010 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1aee0:	e0bff717 	ldw	r2,-36(fp)
   1aee4:	10800c03 	ldbu	r2,48(r2)
   1aee8:	10803fcc 	andi	r2,r2,255
   1aeec:	1080020c 	andi	r2,r2,8
   1aef0:	10004226 	beq	r2,zero,1affc <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1aef4:	e0bff717 	ldw	r2,-36(fp)
   1aef8:	10c00c03 	ldbu	r3,48(r2)
   1aefc:	00bffdc4 	movi	r2,-9
   1af00:	1884703a 	and	r2,r3,r2
   1af04:	1007883a 	mov	r3,r2
   1af08:	e0bff717 	ldw	r2,-36(fp)
   1af0c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1af10:	e0bff717 	ldw	r2,-36(fp)
   1af14:	10800c03 	ldbu	r2,48(r2)
   1af18:	10803fcc 	andi	r2,r2,255
   1af1c:	1000311e 	bne	r2,zero,1afe4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1af20:	e0bff717 	ldw	r2,-36(fp)
   1af24:	10800b8b 	ldhu	r2,46(r2)
   1af28:	10bfffcc 	andi	r2,r2,65535
   1af2c:	1000281e 	bne	r2,zero,1afd0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1af30:	e0bff717 	ldw	r2,-36(fp)
   1af34:	10c00d83 	ldbu	r3,54(r2)
   1af38:	008000b4 	movhi	r2,2
   1af3c:	1090c604 	addi	r2,r2,17176
   1af40:	10800003 	ldbu	r2,0(r2)
   1af44:	1884b03a 	or	r2,r3,r2
   1af48:	1007883a 	mov	r3,r2
   1af4c:	008000b4 	movhi	r2,2
   1af50:	1090c604 	addi	r2,r2,17176
   1af54:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1af58:	e0bff717 	ldw	r2,-36(fp)
   1af5c:	10800d03 	ldbu	r2,52(r2)
   1af60:	10c03fcc 	andi	r3,r2,255
   1af64:	e0bff717 	ldw	r2,-36(fp)
   1af68:	10800d03 	ldbu	r2,52(r2)
   1af6c:	11003fcc 	andi	r4,r2,255
   1af70:	008000b4 	movhi	r2,2
   1af74:	1090c644 	addi	r2,r2,17177
   1af78:	1105883a 	add	r2,r2,r4
   1af7c:	11000003 	ldbu	r4,0(r2)
   1af80:	e0bff717 	ldw	r2,-36(fp)
   1af84:	10800d43 	ldbu	r2,53(r2)
   1af88:	2084b03a 	or	r2,r4,r2
   1af8c:	1009883a 	mov	r4,r2
   1af90:	008000b4 	movhi	r2,2
   1af94:	1090c644 	addi	r2,r2,17177
   1af98:	10c5883a 	add	r2,r2,r3
   1af9c:	11000005 	stb	r4,0(r2)
   1afa0:	e0bff617 	ldw	r2,-40(fp)
   1afa4:	e0bffb15 	stw	r2,-20(fp)
   1afa8:	e0bffb17 	ldw	r2,-20(fp)
   1afac:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1afb0:	008000b4 	movhi	r2,2
   1afb4:	1090ba44 	addi	r2,r2,17129
   1afb8:	10800003 	ldbu	r2,0(r2)
   1afbc:	10803fcc 	andi	r2,r2,255
   1afc0:	10800058 	cmpnei	r2,r2,1
   1afc4:	10000b1e 	bne	r2,zero,1aff4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1afc8:	0014c000 	call	14c00 <OS_Sched>
   1afcc:	00000906 	br	1aff4 <OSTaskResume+0x1c8>
   1afd0:	e0bff617 	ldw	r2,-40(fp)
   1afd4:	e0bffc15 	stw	r2,-16(fp)
   1afd8:	e0bffc17 	ldw	r2,-16(fp)
   1afdc:	1001703a 	wrctl	status,r2
   1afe0:	00000406 	br	1aff4 <OSTaskResume+0x1c8>
   1afe4:	e0bff617 	ldw	r2,-40(fp)
   1afe8:	e0bffd15 	stw	r2,-12(fp)
   1afec:	e0bffd17 	ldw	r2,-12(fp)
   1aff0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1aff4:	0005883a 	mov	r2,zero
   1aff8:	00000506 	br	1b010 <OSTaskResume+0x1e4>
   1affc:	e0bff617 	ldw	r2,-40(fp)
   1b000:	e0bffe15 	stw	r2,-8(fp)
   1b004:	e0bffe17 	ldw	r2,-8(fp)
   1b008:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1b00c:	00801104 	movi	r2,68
}
   1b010:	e037883a 	mov	sp,fp
   1b014:	dfc00117 	ldw	ra,4(sp)
   1b018:	df000017 	ldw	fp,0(sp)
   1b01c:	dec00204 	addi	sp,sp,8
   1b020:	f800283a 	ret

0001b024 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1b024:	defff304 	addi	sp,sp,-52
   1b028:	df000c15 	stw	fp,48(sp)
   1b02c:	df000c04 	addi	fp,sp,48
   1b030:	2005883a 	mov	r2,r4
   1b034:	e17fff15 	stw	r5,-4(fp)
   1b038:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1b03c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1b040:	e0bffe03 	ldbu	r2,-8(fp)
   1b044:	10800570 	cmpltui	r2,r2,21
   1b048:	1000051e 	bne	r2,zero,1b060 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1b04c:	e0bffe03 	ldbu	r2,-8(fp)
   1b050:	10803fe0 	cmpeqi	r2,r2,255
   1b054:	1000021e 	bne	r2,zero,1b060 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1b058:	00800a84 	movi	r2,42
   1b05c:	00005f06 	br	1b1dc <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1b060:	e0bfff17 	ldw	r2,-4(fp)
   1b064:	1000021e 	bne	r2,zero,1b070 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1b068:	00800244 	movi	r2,9
   1b06c:	00005b06 	br	1b1dc <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1b070:	e0bfff17 	ldw	r2,-4(fp)
   1b074:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1b078:	e0bfff17 	ldw	r2,-4(fp)
   1b07c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b080:	0005303a 	rdctl	r2,status
   1b084:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b088:	e0fff917 	ldw	r3,-28(fp)
   1b08c:	00bfff84 	movi	r2,-2
   1b090:	1884703a 	and	r2,r3,r2
   1b094:	1001703a 	wrctl	status,r2
  
  return context;
   1b098:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1b09c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1b0a0:	e0bffe03 	ldbu	r2,-8(fp)
   1b0a4:	10803fd8 	cmpnei	r2,r2,255
   1b0a8:	1000051e 	bne	r2,zero,1b0c0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b0ac:	008000b4 	movhi	r2,2
   1b0b0:	1090c904 	addi	r2,r2,17188
   1b0b4:	10800017 	ldw	r2,0(r2)
   1b0b8:	10800c83 	ldbu	r2,50(r2)
   1b0bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b0c0:	e0fffe03 	ldbu	r3,-8(fp)
   1b0c4:	00800134 	movhi	r2,4
   1b0c8:	10956904 	addi	r2,r2,21924
   1b0cc:	18c7883a 	add	r3,r3,r3
   1b0d0:	18c7883a 	add	r3,r3,r3
   1b0d4:	10c5883a 	add	r2,r2,r3
   1b0d8:	10800017 	ldw	r2,0(r2)
   1b0dc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1b0e0:	e0bff717 	ldw	r2,-36(fp)
   1b0e4:	1000061e 	bne	r2,zero,1b100 <OSTaskStkChk+0xdc>
   1b0e8:	e0bff617 	ldw	r2,-40(fp)
   1b0ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0f0:	e0bffa17 	ldw	r2,-24(fp)
   1b0f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b0f8:	008010c4 	movi	r2,67
   1b0fc:	00003706 	br	1b1dc <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b100:	e0bff717 	ldw	r2,-36(fp)
   1b104:	10800058 	cmpnei	r2,r2,1
   1b108:	1000061e 	bne	r2,zero,1b124 <OSTaskStkChk+0x100>
   1b10c:	e0bff617 	ldw	r2,-40(fp)
   1b110:	e0bffb15 	stw	r2,-20(fp)
   1b114:	e0bffb17 	ldw	r2,-20(fp)
   1b118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b11c:	008010c4 	movi	r2,67
   1b120:	00002e06 	br	1b1dc <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1b124:	e0bff717 	ldw	r2,-36(fp)
   1b128:	1080040b 	ldhu	r2,16(r2)
   1b12c:	10bfffcc 	andi	r2,r2,65535
   1b130:	1080004c 	andi	r2,r2,1
   1b134:	1000061e 	bne	r2,zero,1b150 <OSTaskStkChk+0x12c>
   1b138:	e0bff617 	ldw	r2,-40(fp)
   1b13c:	e0bffc15 	stw	r2,-16(fp)
   1b140:	e0bffc17 	ldw	r2,-16(fp)
   1b144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1b148:	00801144 	movi	r2,69
   1b14c:	00002306 	br	1b1dc <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1b150:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1b154:	e0bff717 	ldw	r2,-36(fp)
   1b158:	10800317 	ldw	r2,12(r2)
   1b15c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1b160:	e0bff717 	ldw	r2,-36(fp)
   1b164:	10800217 	ldw	r2,8(r2)
   1b168:	e0bff415 	stw	r2,-48(fp)
   1b16c:	e0bff617 	ldw	r2,-40(fp)
   1b170:	e0bffd15 	stw	r2,-12(fp)
   1b174:	e0bffd17 	ldw	r2,-12(fp)
   1b178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b17c:	00000306 	br	1b18c <OSTaskStkChk+0x168>
        nfree++;
   1b180:	e0bff517 	ldw	r2,-44(fp)
   1b184:	10800044 	addi	r2,r2,1
   1b188:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1b18c:	e0bff417 	ldw	r2,-48(fp)
   1b190:	10c00104 	addi	r3,r2,4
   1b194:	e0fff415 	stw	r3,-48(fp)
   1b198:	10800017 	ldw	r2,0(r2)
   1b19c:	103ff826 	beq	r2,zero,1b180 <__alt_mem_Flash_flash_data+0xf401b180>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1b1a0:	e0bff517 	ldw	r2,-44(fp)
   1b1a4:	1085883a 	add	r2,r2,r2
   1b1a8:	1085883a 	add	r2,r2,r2
   1b1ac:	1007883a 	mov	r3,r2
   1b1b0:	e0bfff17 	ldw	r2,-4(fp)
   1b1b4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1b1b8:	e0fff817 	ldw	r3,-32(fp)
   1b1bc:	e0bff517 	ldw	r2,-44(fp)
   1b1c0:	1885c83a 	sub	r2,r3,r2
   1b1c4:	1085883a 	add	r2,r2,r2
   1b1c8:	1085883a 	add	r2,r2,r2
   1b1cc:	1007883a 	mov	r3,r2
   1b1d0:	e0bfff17 	ldw	r2,-4(fp)
   1b1d4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1b1d8:	0005883a 	mov	r2,zero
}
   1b1dc:	e037883a 	mov	sp,fp
   1b1e0:	df000017 	ldw	fp,0(sp)
   1b1e4:	dec00104 	addi	sp,sp,4
   1b1e8:	f800283a 	ret

0001b1ec <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1b1ec:	defff504 	addi	sp,sp,-44
   1b1f0:	dfc00a15 	stw	ra,40(sp)
   1b1f4:	df000915 	stw	fp,36(sp)
   1b1f8:	df000904 	addi	fp,sp,36
   1b1fc:	2005883a 	mov	r2,r4
   1b200:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b204:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1b208:	e0bfff03 	ldbu	r2,-4(fp)
   1b20c:	10800518 	cmpnei	r2,r2,20
   1b210:	1000021e 	bne	r2,zero,1b21c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1b214:	008011c4 	movi	r2,71
   1b218:	00007406 	br	1b3ec <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b21c:	e0bfff03 	ldbu	r2,-4(fp)
   1b220:	10800530 	cmpltui	r2,r2,20
   1b224:	1000051e 	bne	r2,zero,1b23c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1b228:	e0bfff03 	ldbu	r2,-4(fp)
   1b22c:	10803fe0 	cmpeqi	r2,r2,255
   1b230:	1000021e 	bne	r2,zero,1b23c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1b234:	00800a84 	movi	r2,42
   1b238:	00006c06 	br	1b3ec <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b23c:	0005303a 	rdctl	r2,status
   1b240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b244:	e0fffb17 	ldw	r3,-20(fp)
   1b248:	00bfff84 	movi	r2,-2
   1b24c:	1884703a 	and	r2,r3,r2
   1b250:	1001703a 	wrctl	status,r2
  
  return context;
   1b254:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1b258:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1b25c:	e0bfff03 	ldbu	r2,-4(fp)
   1b260:	10803fd8 	cmpnei	r2,r2,255
   1b264:	1000081e 	bne	r2,zero,1b288 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1b268:	008000b4 	movhi	r2,2
   1b26c:	1090c904 	addi	r2,r2,17188
   1b270:	10800017 	ldw	r2,0(r2)
   1b274:	10800c83 	ldbu	r2,50(r2)
   1b278:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1b27c:	00800044 	movi	r2,1
   1b280:	e0bff705 	stb	r2,-36(fp)
   1b284:	00000b06 	br	1b2b4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1b288:	008000b4 	movhi	r2,2
   1b28c:	1090c904 	addi	r2,r2,17188
   1b290:	10800017 	ldw	r2,0(r2)
   1b294:	10800c83 	ldbu	r2,50(r2)
   1b298:	10c03fcc 	andi	r3,r2,255
   1b29c:	e0bfff03 	ldbu	r2,-4(fp)
   1b2a0:	1880031e 	bne	r3,r2,1b2b0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1b2a4:	00800044 	movi	r2,1
   1b2a8:	e0bff705 	stb	r2,-36(fp)
   1b2ac:	00000106 	br	1b2b4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1b2b0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b2b4:	e0ffff03 	ldbu	r3,-4(fp)
   1b2b8:	00800134 	movhi	r2,4
   1b2bc:	10956904 	addi	r2,r2,21924
   1b2c0:	18c7883a 	add	r3,r3,r3
   1b2c4:	18c7883a 	add	r3,r3,r3
   1b2c8:	10c5883a 	add	r2,r2,r3
   1b2cc:	10800017 	ldw	r2,0(r2)
   1b2d0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1b2d4:	e0bff917 	ldw	r2,-28(fp)
   1b2d8:	1000061e 	bne	r2,zero,1b2f4 <OSTaskSuspend+0x108>
   1b2dc:	e0bff817 	ldw	r2,-32(fp)
   1b2e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2e4:	e0bffc17 	ldw	r2,-16(fp)
   1b2e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1b2ec:	00801204 	movi	r2,72
   1b2f0:	00003e06 	br	1b3ec <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1b2f4:	e0bff917 	ldw	r2,-28(fp)
   1b2f8:	10800058 	cmpnei	r2,r2,1
   1b2fc:	1000061e 	bne	r2,zero,1b318 <OSTaskSuspend+0x12c>
   1b300:	e0bff817 	ldw	r2,-32(fp)
   1b304:	e0bffd15 	stw	r2,-12(fp)
   1b308:	e0bffd17 	ldw	r2,-12(fp)
   1b30c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b310:	008010c4 	movi	r2,67
   1b314:	00003506 	br	1b3ec <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1b318:	e0bff917 	ldw	r2,-28(fp)
   1b31c:	10800d03 	ldbu	r2,52(r2)
   1b320:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1b324:	e0fffa03 	ldbu	r3,-24(fp)
   1b328:	e13ffa03 	ldbu	r4,-24(fp)
   1b32c:	008000b4 	movhi	r2,2
   1b330:	1090c644 	addi	r2,r2,17177
   1b334:	1105883a 	add	r2,r2,r4
   1b338:	10800003 	ldbu	r2,0(r2)
   1b33c:	1009883a 	mov	r4,r2
   1b340:	e0bff917 	ldw	r2,-28(fp)
   1b344:	10800d43 	ldbu	r2,53(r2)
   1b348:	0084303a 	nor	r2,zero,r2
   1b34c:	2084703a 	and	r2,r4,r2
   1b350:	1009883a 	mov	r4,r2
   1b354:	008000b4 	movhi	r2,2
   1b358:	1090c644 	addi	r2,r2,17177
   1b35c:	10c5883a 	add	r2,r2,r3
   1b360:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1b364:	e0fffa03 	ldbu	r3,-24(fp)
   1b368:	008000b4 	movhi	r2,2
   1b36c:	1090c644 	addi	r2,r2,17177
   1b370:	10c5883a 	add	r2,r2,r3
   1b374:	10800003 	ldbu	r2,0(r2)
   1b378:	10803fcc 	andi	r2,r2,255
   1b37c:	10000c1e 	bne	r2,zero,1b3b0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1b380:	e0bff917 	ldw	r2,-28(fp)
   1b384:	10800d83 	ldbu	r2,54(r2)
   1b388:	0084303a 	nor	r2,zero,r2
   1b38c:	1007883a 	mov	r3,r2
   1b390:	008000b4 	movhi	r2,2
   1b394:	1090c604 	addi	r2,r2,17176
   1b398:	10800003 	ldbu	r2,0(r2)
   1b39c:	1884703a 	and	r2,r3,r2
   1b3a0:	1007883a 	mov	r3,r2
   1b3a4:	008000b4 	movhi	r2,2
   1b3a8:	1090c604 	addi	r2,r2,17176
   1b3ac:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1b3b0:	e0bff917 	ldw	r2,-28(fp)
   1b3b4:	10800c03 	ldbu	r2,48(r2)
   1b3b8:	10800214 	ori	r2,r2,8
   1b3bc:	1007883a 	mov	r3,r2
   1b3c0:	e0bff917 	ldw	r2,-28(fp)
   1b3c4:	10c00c05 	stb	r3,48(r2)
   1b3c8:	e0bff817 	ldw	r2,-32(fp)
   1b3cc:	e0bffe15 	stw	r2,-8(fp)
   1b3d0:	e0bffe17 	ldw	r2,-8(fp)
   1b3d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1b3d8:	e0bff703 	ldbu	r2,-36(fp)
   1b3dc:	10800058 	cmpnei	r2,r2,1
   1b3e0:	1000011e 	bne	r2,zero,1b3e8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1b3e4:	0014c000 	call	14c00 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b3e8:	0005883a 	mov	r2,zero
}
   1b3ec:	e037883a 	mov	sp,fp
   1b3f0:	dfc00117 	ldw	ra,4(sp)
   1b3f4:	df000017 	ldw	fp,0(sp)
   1b3f8:	dec00204 	addi	sp,sp,8
   1b3fc:	f800283a 	ret

0001b400 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1b400:	defff604 	addi	sp,sp,-40
   1b404:	dfc00915 	stw	ra,36(sp)
   1b408:	df000815 	stw	fp,32(sp)
   1b40c:	df000804 	addi	fp,sp,32
   1b410:	2005883a 	mov	r2,r4
   1b414:	e17fff15 	stw	r5,-4(fp)
   1b418:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b41c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1b420:	e0bffe03 	ldbu	r2,-8(fp)
   1b424:	10800570 	cmpltui	r2,r2,21
   1b428:	1000051e 	bne	r2,zero,1b440 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1b42c:	e0bffe03 	ldbu	r2,-8(fp)
   1b430:	10803fe0 	cmpeqi	r2,r2,255
   1b434:	1000021e 	bne	r2,zero,1b440 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1b438:	00800a84 	movi	r2,42
   1b43c:	00003606 	br	1b518 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1b440:	e0bfff17 	ldw	r2,-4(fp)
   1b444:	1000021e 	bne	r2,zero,1b450 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1b448:	00800244 	movi	r2,9
   1b44c:	00003206 	br	1b518 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b450:	0005303a 	rdctl	r2,status
   1b454:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b458:	e0fffa17 	ldw	r3,-24(fp)
   1b45c:	00bfff84 	movi	r2,-2
   1b460:	1884703a 	and	r2,r3,r2
   1b464:	1001703a 	wrctl	status,r2
  
  return context;
   1b468:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b46c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1b470:	e0bffe03 	ldbu	r2,-8(fp)
   1b474:	10803fd8 	cmpnei	r2,r2,255
   1b478:	1000051e 	bne	r2,zero,1b490 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1b47c:	008000b4 	movhi	r2,2
   1b480:	1090c904 	addi	r2,r2,17188
   1b484:	10800017 	ldw	r2,0(r2)
   1b488:	10800c83 	ldbu	r2,50(r2)
   1b48c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b490:	e0fffe03 	ldbu	r3,-8(fp)
   1b494:	00800134 	movhi	r2,4
   1b498:	10956904 	addi	r2,r2,21924
   1b49c:	18c7883a 	add	r3,r3,r3
   1b4a0:	18c7883a 	add	r3,r3,r3
   1b4a4:	10c5883a 	add	r2,r2,r3
   1b4a8:	10800017 	ldw	r2,0(r2)
   1b4ac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1b4b0:	e0bff917 	ldw	r2,-28(fp)
   1b4b4:	1000061e 	bne	r2,zero,1b4d0 <OSTaskQuery+0xd0>
   1b4b8:	e0bff817 	ldw	r2,-32(fp)
   1b4bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b4c0:	e0bffb17 	ldw	r2,-20(fp)
   1b4c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1b4c8:	00800a44 	movi	r2,41
   1b4cc:	00001206 	br	1b518 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1b4d0:	e0bff917 	ldw	r2,-28(fp)
   1b4d4:	10800058 	cmpnei	r2,r2,1
   1b4d8:	1000061e 	bne	r2,zero,1b4f4 <OSTaskQuery+0xf4>
   1b4dc:	e0bff817 	ldw	r2,-32(fp)
   1b4e0:	e0bffc15 	stw	r2,-16(fp)
   1b4e4:	e0bffc17 	ldw	r2,-16(fp)
   1b4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b4ec:	008010c4 	movi	r2,67
   1b4f0:	00000906 	br	1b518 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1b4f4:	e13fff17 	ldw	r4,-4(fp)
   1b4f8:	e17ff917 	ldw	r5,-28(fp)
   1b4fc:	01801b04 	movi	r6,108
   1b500:	0014b9c0 	call	14b9c <OS_MemCopy>
   1b504:	e0bff817 	ldw	r2,-32(fp)
   1b508:	e0bffd15 	stw	r2,-12(fp)
   1b50c:	e0bffd17 	ldw	r2,-12(fp)
   1b510:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b514:	0005883a 	mov	r2,zero
}
   1b518:	e037883a 	mov	sp,fp
   1b51c:	dfc00117 	ldw	ra,4(sp)
   1b520:	df000017 	ldw	fp,0(sp)
   1b524:	dec00204 	addi	sp,sp,8
   1b528:	f800283a 	ret

0001b52c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1b52c:	defffc04 	addi	sp,sp,-16
   1b530:	df000315 	stw	fp,12(sp)
   1b534:	df000304 	addi	fp,sp,12
   1b538:	e13ffd15 	stw	r4,-12(fp)
   1b53c:	e17ffe15 	stw	r5,-8(fp)
   1b540:	3005883a 	mov	r2,r6
   1b544:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1b548:	e0bfff0b 	ldhu	r2,-4(fp)
   1b54c:	1080004c 	andi	r2,r2,1
   1b550:	10000d26 	beq	r2,zero,1b588 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1b554:	e0bfff0b 	ldhu	r2,-4(fp)
   1b558:	1080008c 	andi	r2,r2,2
   1b55c:	10000a26 	beq	r2,zero,1b588 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b560:	00000706 	br	1b580 <OS_TaskStkClr+0x54>
                size--;
   1b564:	e0bffe17 	ldw	r2,-8(fp)
   1b568:	10bfffc4 	addi	r2,r2,-1
   1b56c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1b570:	e0bffd17 	ldw	r2,-12(fp)
   1b574:	10c00104 	addi	r3,r2,4
   1b578:	e0fffd15 	stw	r3,-12(fp)
   1b57c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1b580:	e0bffe17 	ldw	r2,-8(fp)
   1b584:	103ff71e 	bne	r2,zero,1b564 <__alt_mem_Flash_flash_data+0xf401b564>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1b588:	e037883a 	mov	sp,fp
   1b58c:	df000017 	ldw	fp,0(sp)
   1b590:	dec00104 	addi	sp,sp,4
   1b594:	f800283a 	ret

0001b598 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1b598:	defff904 	addi	sp,sp,-28
   1b59c:	dfc00615 	stw	ra,24(sp)
   1b5a0:	df000515 	stw	fp,20(sp)
   1b5a4:	df000504 	addi	fp,sp,20
   1b5a8:	2005883a 	mov	r2,r4
   1b5ac:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b5b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b5b4:	008000b4 	movhi	r2,2
   1b5b8:	1090c804 	addi	r2,r2,17184
   1b5bc:	10800003 	ldbu	r2,0(r2)
   1b5c0:	10803fcc 	andi	r2,r2,255
   1b5c4:	10000126 	beq	r2,zero,1b5cc <OSTimeDly+0x34>
        return;
   1b5c8:	00004006 	br	1b6cc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1b5cc:	e0bfff0b 	ldhu	r2,-4(fp)
   1b5d0:	10003e26 	beq	r2,zero,1b6cc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b5d4:	0005303a 	rdctl	r2,status
   1b5d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b5dc:	e0fffd17 	ldw	r3,-12(fp)
   1b5e0:	00bfff84 	movi	r2,-2
   1b5e4:	1884703a 	and	r2,r3,r2
   1b5e8:	1001703a 	wrctl	status,r2
  
  return context;
   1b5ec:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1b5f0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1b5f4:	008000b4 	movhi	r2,2
   1b5f8:	1090c904 	addi	r2,r2,17188
   1b5fc:	10800017 	ldw	r2,0(r2)
   1b600:	10800d03 	ldbu	r2,52(r2)
   1b604:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1b608:	e0fffc03 	ldbu	r3,-16(fp)
   1b60c:	e13ffc03 	ldbu	r4,-16(fp)
   1b610:	008000b4 	movhi	r2,2
   1b614:	1090c644 	addi	r2,r2,17177
   1b618:	1105883a 	add	r2,r2,r4
   1b61c:	10800003 	ldbu	r2,0(r2)
   1b620:	1009883a 	mov	r4,r2
   1b624:	008000b4 	movhi	r2,2
   1b628:	1090c904 	addi	r2,r2,17188
   1b62c:	10800017 	ldw	r2,0(r2)
   1b630:	10800d43 	ldbu	r2,53(r2)
   1b634:	0084303a 	nor	r2,zero,r2
   1b638:	2084703a 	and	r2,r4,r2
   1b63c:	1009883a 	mov	r4,r2
   1b640:	008000b4 	movhi	r2,2
   1b644:	1090c644 	addi	r2,r2,17177
   1b648:	10c5883a 	add	r2,r2,r3
   1b64c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1b650:	e0fffc03 	ldbu	r3,-16(fp)
   1b654:	008000b4 	movhi	r2,2
   1b658:	1090c644 	addi	r2,r2,17177
   1b65c:	10c5883a 	add	r2,r2,r3
   1b660:	10800003 	ldbu	r2,0(r2)
   1b664:	10803fcc 	andi	r2,r2,255
   1b668:	10000e1e 	bne	r2,zero,1b6a4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1b66c:	008000b4 	movhi	r2,2
   1b670:	1090c904 	addi	r2,r2,17188
   1b674:	10800017 	ldw	r2,0(r2)
   1b678:	10800d83 	ldbu	r2,54(r2)
   1b67c:	0084303a 	nor	r2,zero,r2
   1b680:	1007883a 	mov	r3,r2
   1b684:	008000b4 	movhi	r2,2
   1b688:	1090c604 	addi	r2,r2,17176
   1b68c:	10800003 	ldbu	r2,0(r2)
   1b690:	1884703a 	and	r2,r3,r2
   1b694:	1007883a 	mov	r3,r2
   1b698:	008000b4 	movhi	r2,2
   1b69c:	1090c604 	addi	r2,r2,17176
   1b6a0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1b6a4:	008000b4 	movhi	r2,2
   1b6a8:	1090c904 	addi	r2,r2,17188
   1b6ac:	10800017 	ldw	r2,0(r2)
   1b6b0:	e0ffff0b 	ldhu	r3,-4(fp)
   1b6b4:	10c00b8d 	sth	r3,46(r2)
   1b6b8:	e0bffb17 	ldw	r2,-20(fp)
   1b6bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6c0:	e0bffe17 	ldw	r2,-8(fp)
   1b6c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1b6c8:	0014c000 	call	14c00 <OS_Sched>
    }
}
   1b6cc:	e037883a 	mov	sp,fp
   1b6d0:	dfc00117 	ldw	ra,4(sp)
   1b6d4:	df000017 	ldw	fp,0(sp)
   1b6d8:	dec00204 	addi	sp,sp,8
   1b6dc:	f800283a 	ret

0001b6e0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1b6e0:	defff804 	addi	sp,sp,-32
   1b6e4:	dfc00715 	stw	ra,28(sp)
   1b6e8:	df000615 	stw	fp,24(sp)
   1b6ec:	df000604 	addi	fp,sp,24
   1b6f0:	2015883a 	mov	r10,r4
   1b6f4:	2809883a 	mov	r4,r5
   1b6f8:	3007883a 	mov	r3,r6
   1b6fc:	3805883a 	mov	r2,r7
   1b700:	e2bffc05 	stb	r10,-16(fp)
   1b704:	e13ffd05 	stb	r4,-12(fp)
   1b708:	e0fffe05 	stb	r3,-8(fp)
   1b70c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b710:	008000b4 	movhi	r2,2
   1b714:	1090c804 	addi	r2,r2,17184
   1b718:	10800003 	ldbu	r2,0(r2)
   1b71c:	10803fcc 	andi	r2,r2,255
   1b720:	10000226 	beq	r2,zero,1b72c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1b724:	00801544 	movi	r2,85
   1b728:	00004206 	br	1b834 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1b72c:	e0bffc03 	ldbu	r2,-16(fp)
   1b730:	1000081e 	bne	r2,zero,1b754 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1b734:	e0bffd03 	ldbu	r2,-12(fp)
   1b738:	1000061e 	bne	r2,zero,1b754 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1b73c:	e0bffe03 	ldbu	r2,-8(fp)
   1b740:	1000041e 	bne	r2,zero,1b754 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1b744:	e0bfff0b 	ldhu	r2,-4(fp)
   1b748:	1000021e 	bne	r2,zero,1b754 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1b74c:	00801504 	movi	r2,84
   1b750:	00003806 	br	1b834 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1b754:	e0bffd03 	ldbu	r2,-12(fp)
   1b758:	10800f30 	cmpltui	r2,r2,60
   1b75c:	1000021e 	bne	r2,zero,1b768 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1b760:	00801444 	movi	r2,81
   1b764:	00003306 	br	1b834 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1b768:	e0bffe03 	ldbu	r2,-8(fp)
   1b76c:	10800f30 	cmpltui	r2,r2,60
   1b770:	1000021e 	bne	r2,zero,1b77c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1b774:	00801484 	movi	r2,82
   1b778:	00002e06 	br	1b834 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1b77c:	e0bfff0b 	ldhu	r2,-4(fp)
   1b780:	1080fa30 	cmpltui	r2,r2,1000
   1b784:	1000021e 	bne	r2,zero,1b790 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1b788:	008014c4 	movi	r2,83
   1b78c:	00002906 	br	1b834 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b790:	e0bffc03 	ldbu	r2,-16(fp)
   1b794:	10c38424 	muli	r3,r2,3600
   1b798:	e0bffd03 	ldbu	r2,-12(fp)
   1b79c:	10800f24 	muli	r2,r2,60
   1b7a0:	1887883a 	add	r3,r3,r2
   1b7a4:	e0bffe03 	ldbu	r2,-8(fp)
   1b7a8:	1885883a 	add	r2,r3,r2
   1b7ac:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1b7b0:	e0bfff0b 	ldhu	r2,-4(fp)
   1b7b4:	10800f84 	addi	r2,r2,62
   1b7b8:	100690fa 	slli	r3,r2,3
   1b7bc:	008418b4 	movhi	r2,4194
   1b7c0:	109374c4 	addi	r2,r2,19923
   1b7c4:	188a383a 	mulxuu	r5,r3,r2
   1b7c8:	1885383a 	mul	r2,r3,r2
   1b7cc:	1011883a 	mov	r8,r2
   1b7d0:	2813883a 	mov	r9,r5
   1b7d4:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1b7d8:	2085883a 	add	r2,r4,r2
   1b7dc:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1b7e0:	e0bffb17 	ldw	r2,-20(fp)
   1b7e4:	1004d43a 	srli	r2,r2,16
   1b7e8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1b7ec:	e0bffb17 	ldw	r2,-20(fp)
   1b7f0:	10bfffcc 	andi	r2,r2,65535
   1b7f4:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1b7f8:	e0bffb17 	ldw	r2,-20(fp)
   1b7fc:	10bfffcc 	andi	r2,r2,65535
   1b800:	1009883a 	mov	r4,r2
   1b804:	001b5980 	call	1b598 <OSTimeDly>
    while (loops > 0) {
   1b808:	00000706 	br	1b828 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1b80c:	01200014 	movui	r4,32768
   1b810:	001b5980 	call	1b598 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1b814:	01200014 	movui	r4,32768
   1b818:	001b5980 	call	1b598 <OSTimeDly>
        loops--;
   1b81c:	e0bffa0b 	ldhu	r2,-24(fp)
   1b820:	10bfffc4 	addi	r2,r2,-1
   1b824:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1b828:	e0bffa0b 	ldhu	r2,-24(fp)
   1b82c:	103ff71e 	bne	r2,zero,1b80c <__alt_mem_Flash_flash_data+0xf401b80c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1b830:	0005883a 	mov	r2,zero
}
   1b834:	e037883a 	mov	sp,fp
   1b838:	dfc00117 	ldw	ra,4(sp)
   1b83c:	df000017 	ldw	fp,0(sp)
   1b840:	dec00204 	addi	sp,sp,8
   1b844:	f800283a 	ret

0001b848 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1b848:	defff504 	addi	sp,sp,-44
   1b84c:	dfc00a15 	stw	ra,40(sp)
   1b850:	df000915 	stw	fp,36(sp)
   1b854:	df000904 	addi	fp,sp,36
   1b858:	2005883a 	mov	r2,r4
   1b85c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b860:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1b864:	e0bfff03 	ldbu	r2,-4(fp)
   1b868:	10800530 	cmpltui	r2,r2,20
   1b86c:	1000021e 	bne	r2,zero,1b878 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b870:	00800a84 	movi	r2,42
   1b874:	00006b06 	br	1ba24 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b878:	0005303a 	rdctl	r2,status
   1b87c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b880:	e0fff917 	ldw	r3,-28(fp)
   1b884:	00bfff84 	movi	r2,-2
   1b888:	1884703a 	and	r2,r3,r2
   1b88c:	1001703a 	wrctl	status,r2
  
  return context;
   1b890:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1b894:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1b898:	e0ffff03 	ldbu	r3,-4(fp)
   1b89c:	00800134 	movhi	r2,4
   1b8a0:	10956904 	addi	r2,r2,21924
   1b8a4:	18c7883a 	add	r3,r3,r3
   1b8a8:	18c7883a 	add	r3,r3,r3
   1b8ac:	10c5883a 	add	r2,r2,r3
   1b8b0:	10800017 	ldw	r2,0(r2)
   1b8b4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1b8b8:	e0bff817 	ldw	r2,-32(fp)
   1b8bc:	1000061e 	bne	r2,zero,1b8d8 <OSTimeDlyResume+0x90>
   1b8c0:	e0bff717 	ldw	r2,-36(fp)
   1b8c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8c8:	e0bffa17 	ldw	r2,-24(fp)
   1b8cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b8d0:	008010c4 	movi	r2,67
   1b8d4:	00005306 	br	1ba24 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b8d8:	e0bff817 	ldw	r2,-32(fp)
   1b8dc:	10800058 	cmpnei	r2,r2,1
   1b8e0:	1000061e 	bne	r2,zero,1b8fc <OSTimeDlyResume+0xb4>
   1b8e4:	e0bff717 	ldw	r2,-36(fp)
   1b8e8:	e0bffb15 	stw	r2,-20(fp)
   1b8ec:	e0bffb17 	ldw	r2,-20(fp)
   1b8f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b8f4:	008010c4 	movi	r2,67
   1b8f8:	00004a06 	br	1ba24 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1b8fc:	e0bff817 	ldw	r2,-32(fp)
   1b900:	10800b8b 	ldhu	r2,46(r2)
   1b904:	10bfffcc 	andi	r2,r2,65535
   1b908:	1000061e 	bne	r2,zero,1b924 <OSTimeDlyResume+0xdc>
   1b90c:	e0bff717 	ldw	r2,-36(fp)
   1b910:	e0bffc15 	stw	r2,-16(fp)
   1b914:	e0bffc17 	ldw	r2,-16(fp)
   1b918:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1b91c:	00801404 	movi	r2,80
   1b920:	00004006 	br	1ba24 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1b924:	e0bff817 	ldw	r2,-32(fp)
   1b928:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1b92c:	e0bff817 	ldw	r2,-32(fp)
   1b930:	10800c03 	ldbu	r2,48(r2)
   1b934:	10803fcc 	andi	r2,r2,255
   1b938:	10800dcc 	andi	r2,r2,55
   1b93c:	10000b26 	beq	r2,zero,1b96c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1b940:	e0bff817 	ldw	r2,-32(fp)
   1b944:	10c00c03 	ldbu	r3,48(r2)
   1b948:	00bff204 	movi	r2,-56
   1b94c:	1884703a 	and	r2,r3,r2
   1b950:	1007883a 	mov	r3,r2
   1b954:	e0bff817 	ldw	r2,-32(fp)
   1b958:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1b95c:	e0bff817 	ldw	r2,-32(fp)
   1b960:	00c00044 	movi	r3,1
   1b964:	10c00c45 	stb	r3,49(r2)
   1b968:	00000206 	br	1b974 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1b96c:	e0bff817 	ldw	r2,-32(fp)
   1b970:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1b974:	e0bff817 	ldw	r2,-32(fp)
   1b978:	10800c03 	ldbu	r2,48(r2)
   1b97c:	10803fcc 	andi	r2,r2,255
   1b980:	1080020c 	andi	r2,r2,8
   1b984:	1000221e 	bne	r2,zero,1ba10 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1b988:	e0bff817 	ldw	r2,-32(fp)
   1b98c:	10c00d83 	ldbu	r3,54(r2)
   1b990:	008000b4 	movhi	r2,2
   1b994:	1090c604 	addi	r2,r2,17176
   1b998:	10800003 	ldbu	r2,0(r2)
   1b99c:	1884b03a 	or	r2,r3,r2
   1b9a0:	1007883a 	mov	r3,r2
   1b9a4:	008000b4 	movhi	r2,2
   1b9a8:	1090c604 	addi	r2,r2,17176
   1b9ac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b9b0:	e0bff817 	ldw	r2,-32(fp)
   1b9b4:	10800d03 	ldbu	r2,52(r2)
   1b9b8:	10c03fcc 	andi	r3,r2,255
   1b9bc:	e0bff817 	ldw	r2,-32(fp)
   1b9c0:	10800d03 	ldbu	r2,52(r2)
   1b9c4:	11003fcc 	andi	r4,r2,255
   1b9c8:	008000b4 	movhi	r2,2
   1b9cc:	1090c644 	addi	r2,r2,17177
   1b9d0:	1105883a 	add	r2,r2,r4
   1b9d4:	11000003 	ldbu	r4,0(r2)
   1b9d8:	e0bff817 	ldw	r2,-32(fp)
   1b9dc:	10800d43 	ldbu	r2,53(r2)
   1b9e0:	2084b03a 	or	r2,r4,r2
   1b9e4:	1009883a 	mov	r4,r2
   1b9e8:	008000b4 	movhi	r2,2
   1b9ec:	1090c644 	addi	r2,r2,17177
   1b9f0:	10c5883a 	add	r2,r2,r3
   1b9f4:	11000005 	stb	r4,0(r2)
   1b9f8:	e0bff717 	ldw	r2,-36(fp)
   1b9fc:	e0bffd15 	stw	r2,-12(fp)
   1ba00:	e0bffd17 	ldw	r2,-12(fp)
   1ba04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1ba08:	0014c000 	call	14c00 <OS_Sched>
   1ba0c:	00000406 	br	1ba20 <OSTimeDlyResume+0x1d8>
   1ba10:	e0bff717 	ldw	r2,-36(fp)
   1ba14:	e0bffe15 	stw	r2,-8(fp)
   1ba18:	e0bffe17 	ldw	r2,-8(fp)
   1ba1c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1ba20:	0005883a 	mov	r2,zero
}
   1ba24:	e037883a 	mov	sp,fp
   1ba28:	dfc00117 	ldw	ra,4(sp)
   1ba2c:	df000017 	ldw	fp,0(sp)
   1ba30:	dec00204 	addi	sp,sp,8
   1ba34:	f800283a 	ret

0001ba38 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1ba38:	defffb04 	addi	sp,sp,-20
   1ba3c:	df000415 	stw	fp,16(sp)
   1ba40:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ba44:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba48:	0005303a 	rdctl	r2,status
   1ba4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba50:	e0fffe17 	ldw	r3,-8(fp)
   1ba54:	00bfff84 	movi	r2,-2
   1ba58:	1884703a 	and	r2,r3,r2
   1ba5c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba60:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1ba64:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1ba68:	008000b4 	movhi	r2,2
   1ba6c:	1090ca04 	addi	r2,r2,17192
   1ba70:	10800017 	ldw	r2,0(r2)
   1ba74:	e0bffd15 	stw	r2,-12(fp)
   1ba78:	e0bffc17 	ldw	r2,-16(fp)
   1ba7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba80:	e0bfff17 	ldw	r2,-4(fp)
   1ba84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1ba88:	e0bffd17 	ldw	r2,-12(fp)
}
   1ba8c:	e037883a 	mov	sp,fp
   1ba90:	df000017 	ldw	fp,0(sp)
   1ba94:	dec00104 	addi	sp,sp,4
   1ba98:	f800283a 	ret

0001ba9c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1ba9c:	defffb04 	addi	sp,sp,-20
   1baa0:	df000415 	stw	fp,16(sp)
   1baa4:	df000404 	addi	fp,sp,16
   1baa8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1baac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bab0:	0005303a 	rdctl	r2,status
   1bab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bab8:	e0fffd17 	ldw	r3,-12(fp)
   1babc:	00bfff84 	movi	r2,-2
   1bac0:	1884703a 	and	r2,r3,r2
   1bac4:	1001703a 	wrctl	status,r2
  
  return context;
   1bac8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1bacc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1bad0:	008000b4 	movhi	r2,2
   1bad4:	1090ca04 	addi	r2,r2,17192
   1bad8:	e0ffff17 	ldw	r3,-4(fp)
   1badc:	10c00015 	stw	r3,0(r2)
   1bae0:	e0bffc17 	ldw	r2,-16(fp)
   1bae4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bae8:	e0bffe17 	ldw	r2,-8(fp)
   1baec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1baf0:	e037883a 	mov	sp,fp
   1baf4:	df000017 	ldw	fp,0(sp)
   1baf8:	dec00104 	addi	sp,sp,4
   1bafc:	f800283a 	ret

0001bb00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1bb00:	defffd04 	addi	sp,sp,-12
   1bb04:	dfc00215 	stw	ra,8(sp)
   1bb08:	df000115 	stw	fp,4(sp)
   1bb0c:	df000104 	addi	fp,sp,4
   1bb10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1bb14:	e13fff17 	ldw	r4,-4(fp)
   1bb18:	014000b4 	movhi	r5,2
   1bb1c:	29489d04 	addi	r5,r5,8820
   1bb20:	001e4d40 	call	1e4d4 <alt_dev_llist_insert>
}
   1bb24:	e037883a 	mov	sp,fp
   1bb28:	dfc00117 	ldw	ra,4(sp)
   1bb2c:	df000017 	ldw	fp,0(sp)
   1bb30:	dec00204 	addi	sp,sp,8
   1bb34:	f800283a 	ret

0001bb38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1bb38:	defffd04 	addi	sp,sp,-12
   1bb3c:	dfc00215 	stw	ra,8(sp)
   1bb40:	df000115 	stw	fp,4(sp)
   1bb44:	df000104 	addi	fp,sp,4
   1bb48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1bb4c:	001ede80 	call	1ede8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1bb50:	00800044 	movi	r2,1
   1bb54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1bb58:	e037883a 	mov	sp,fp
   1bb5c:	dfc00117 	ldw	ra,4(sp)
   1bb60:	df000017 	ldw	fp,0(sp)
   1bb64:	dec00204 	addi	sp,sp,8
   1bb68:	f800283a 	ret

0001bb6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1bb6c:	defffd04 	addi	sp,sp,-12
   1bb70:	dfc00215 	stw	ra,8(sp)
   1bb74:	df000115 	stw	fp,4(sp)
   1bb78:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1bb7c:	01040034 	movhi	r4,4096
   1bb80:	21080004 	addi	r4,r4,8192
   1bb84:	000b883a 	mov	r5,zero
   1bb88:	000d883a 	mov	r6,zero
   1bb8c:	01c00204 	movi	r7,8
   1bb90:	001cce00 	call	1cce0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1bb94:	010000b4 	movhi	r4,2
   1bb98:	21039604 	addi	r4,r4,3672
   1bb9c:	000b883a 	mov	r5,zero
   1bba0:	01800204 	movi	r6,8
   1bba4:	001c0a80 	call	1c0a8 <altera_avalon_jtag_uart_init>
   1bba8:	010000b4 	movhi	r4,2
   1bbac:	21038c04 	addi	r4,r4,3632
   1bbb0:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1bbb4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1bbb8:	010000b4 	movhi	r4,2
   1bbbc:	2107a704 	addi	r4,r4,7836
   1bbc0:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1bbc4:	010000b4 	movhi	r4,2
   1bbc8:	2107b304 	addi	r4,r4,7884
   1bbcc:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1bbd0:	010000b4 	movhi	r4,2
   1bbd4:	2107bf04 	addi	r4,r4,7932
   1bbd8:	001ce100 	call	1ce10 <alt_up_character_lcd_init>
   1bbdc:	010000b4 	movhi	r4,2
   1bbe0:	2107bf04 	addi	r4,r4,7932
   1bbe4:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1bbe8:	010000b4 	movhi	r4,2
   1bbec:	2107ca04 	addi	r4,r4,7976
   1bbf0:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1bbf4:	010000b4 	movhi	r4,2
   1bbf8:	2107d504 	addi	r4,r4,8020
   1bbfc:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1bc00:	010000b4 	movhi	r4,2
   1bc04:	2107e004 	addi	r4,r4,8064
   1bc08:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1bc0c:	010000b4 	movhi	r4,2
   1bc10:	2107eb04 	addi	r4,r4,8108
   1bc14:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1bc18:	010000b4 	movhi	r4,2
   1bc1c:	2107f604 	addi	r4,r4,8152
   1bc20:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1bc24:	010000b4 	movhi	r4,2
   1bc28:	21080104 	addi	r4,r4,8196
   1bc2c:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1bc30:	010000b4 	movhi	r4,2
   1bc34:	21080c04 	addi	r4,r4,8240
   1bc38:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1bc3c:	010000b4 	movhi	r4,2
   1bc40:	21081704 	addi	r4,r4,8284
   1bc44:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1bc48:	010000b4 	movhi	r4,2
   1bc4c:	21082204 	addi	r4,r4,8328
   1bc50:	001d7280 	call	1d728 <alt_up_ps2_init>
   1bc54:	010000b4 	movhi	r4,2
   1bc58:	21082204 	addi	r4,r4,8328
   1bc5c:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1bc60:	010000b4 	movhi	r4,2
   1bc64:	21083004 	addi	r4,r4,8384
   1bc68:	001d7280 	call	1d728 <alt_up_ps2_init>
   1bc6c:	010000b4 	movhi	r4,2
   1bc70:	21083004 	addi	r4,r4,8384
   1bc74:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1bc78:	010000b4 	movhi	r4,2
   1bc7c:	21083e04 	addi	r4,r4,8440
   1bc80:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1bc84:	010000b4 	movhi	r4,2
   1bc88:	21084904 	addi	r4,r4,8484
   1bc8c:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1bc90:	008000b4 	movhi	r2,2
   1bc94:	10885604 	addi	r2,r2,8536
   1bc98:	10800a17 	ldw	r2,40(r2)
   1bc9c:	10800104 	addi	r2,r2,4
   1bca0:	10800017 	ldw	r2,0(r2)
   1bca4:	10ffffcc 	andi	r3,r2,65535
   1bca8:	008000b4 	movhi	r2,2
   1bcac:	10885604 	addi	r2,r2,8536
   1bcb0:	10c00c15 	stw	r3,48(r2)
   1bcb4:	008000b4 	movhi	r2,2
   1bcb8:	10885604 	addi	r2,r2,8536
   1bcbc:	10800a17 	ldw	r2,40(r2)
   1bcc0:	10800104 	addi	r2,r2,4
   1bcc4:	10800017 	ldw	r2,0(r2)
   1bcc8:	1006d43a 	srli	r3,r2,16
   1bccc:	008000b4 	movhi	r2,2
   1bcd0:	10885604 	addi	r2,r2,8536
   1bcd4:	10c00d15 	stw	r3,52(r2)
   1bcd8:	008000b4 	movhi	r2,2
   1bcdc:	10885604 	addi	r2,r2,8536
   1bce0:	10800c17 	ldw	r2,48(r2)
   1bce4:	10801068 	cmpgeui	r2,r2,65
   1bce8:	1000081e 	bne	r2,zero,1bd0c <alt_sys_init+0x1a0>
   1bcec:	008000b4 	movhi	r2,2
   1bcf0:	10885604 	addi	r2,r2,8536
   1bcf4:	00c00fc4 	movi	r3,63
   1bcf8:	10c00f15 	stw	r3,60(r2)
   1bcfc:	008000b4 	movhi	r2,2
   1bd00:	10885604 	addi	r2,r2,8536
   1bd04:	00c00184 	movi	r3,6
   1bd08:	10c01015 	stw	r3,64(r2)
   1bd0c:	008000b4 	movhi	r2,2
   1bd10:	10885604 	addi	r2,r2,8536
   1bd14:	10800d17 	ldw	r2,52(r2)
   1bd18:	10800868 	cmpgeui	r2,r2,33
   1bd1c:	1000041e 	bne	r2,zero,1bd30 <alt_sys_init+0x1c4>
   1bd20:	008000b4 	movhi	r2,2
   1bd24:	10885604 	addi	r2,r2,8536
   1bd28:	00c007c4 	movi	r3,31
   1bd2c:	10c01115 	stw	r3,68(r2)
   1bd30:	010000b4 	movhi	r4,2
   1bd34:	21085604 	addi	r4,r4,8536
   1bd38:	001e0400 	call	1e040 <alt_up_char_buffer_init>
   1bd3c:	010000b4 	movhi	r4,2
   1bd40:	21085604 	addi	r4,r4,8536
   1bd44:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1bd48:	008000b4 	movhi	r2,2
   1bd4c:	10886804 	addi	r2,r2,8608
   1bd50:	10800a17 	ldw	r2,40(r2)
   1bd54:	10800017 	ldw	r2,0(r2)
   1bd58:	1007883a 	mov	r3,r2
   1bd5c:	008000b4 	movhi	r2,2
   1bd60:	10886804 	addi	r2,r2,8608
   1bd64:	10c00b15 	stw	r3,44(r2)
   1bd68:	008000b4 	movhi	r2,2
   1bd6c:	10886804 	addi	r2,r2,8608
   1bd70:	10800a17 	ldw	r2,40(r2)
   1bd74:	10800104 	addi	r2,r2,4
   1bd78:	10800017 	ldw	r2,0(r2)
   1bd7c:	1007883a 	mov	r3,r2
   1bd80:	008000b4 	movhi	r2,2
   1bd84:	10886804 	addi	r2,r2,8608
   1bd88:	10c00c15 	stw	r3,48(r2)
   1bd8c:	008000b4 	movhi	r2,2
   1bd90:	10886804 	addi	r2,r2,8608
   1bd94:	10800a17 	ldw	r2,40(r2)
   1bd98:	10800204 	addi	r2,r2,8
   1bd9c:	10800017 	ldw	r2,0(r2)
   1bda0:	10ffffcc 	andi	r3,r2,65535
   1bda4:	008000b4 	movhi	r2,2
   1bda8:	10886804 	addi	r2,r2,8608
   1bdac:	10c00f15 	stw	r3,60(r2)
   1bdb0:	008000b4 	movhi	r2,2
   1bdb4:	10886804 	addi	r2,r2,8608
   1bdb8:	10800a17 	ldw	r2,40(r2)
   1bdbc:	10800204 	addi	r2,r2,8
   1bdc0:	10800017 	ldw	r2,0(r2)
   1bdc4:	1006d43a 	srli	r3,r2,16
   1bdc8:	008000b4 	movhi	r2,2
   1bdcc:	10886804 	addi	r2,r2,8608
   1bdd0:	10c01015 	stw	r3,64(r2)
   1bdd4:	008000b4 	movhi	r2,2
   1bdd8:	10886804 	addi	r2,r2,8608
   1bddc:	10800a17 	ldw	r2,40(r2)
   1bde0:	10800304 	addi	r2,r2,12
   1bde4:	10800017 	ldw	r2,0(r2)
   1bde8:	1005d07a 	srai	r2,r2,1
   1bdec:	10c0004c 	andi	r3,r2,1
   1bdf0:	008000b4 	movhi	r2,2
   1bdf4:	10886804 	addi	r2,r2,8608
   1bdf8:	10c00d15 	stw	r3,52(r2)
   1bdfc:	008000b4 	movhi	r2,2
   1be00:	10886804 	addi	r2,r2,8608
   1be04:	10800a17 	ldw	r2,40(r2)
   1be08:	10800304 	addi	r2,r2,12
   1be0c:	10800017 	ldw	r2,0(r2)
   1be10:	1005d13a 	srai	r2,r2,4
   1be14:	10c003cc 	andi	r3,r2,15
   1be18:	008000b4 	movhi	r2,2
   1be1c:	10886804 	addi	r2,r2,8608
   1be20:	10c00e15 	stw	r3,56(r2)
   1be24:	008000b4 	movhi	r2,2
   1be28:	10886804 	addi	r2,r2,8608
   1be2c:	10800a17 	ldw	r2,40(r2)
   1be30:	10800304 	addi	r2,r2,12
   1be34:	10800017 	ldw	r2,0(r2)
   1be38:	1005d43a 	srai	r2,r2,16
   1be3c:	e0bfff05 	stb	r2,-4(fp)
   1be40:	008000b4 	movhi	r2,2
   1be44:	10886804 	addi	r2,r2,8608
   1be48:	10800a17 	ldw	r2,40(r2)
   1be4c:	10800304 	addi	r2,r2,12
   1be50:	10800017 	ldw	r2,0(r2)
   1be54:	1004d63a 	srli	r2,r2,24
   1be58:	e0bfff45 	stb	r2,-3(fp)
   1be5c:	008000b4 	movhi	r2,2
   1be60:	10886804 	addi	r2,r2,8608
   1be64:	10800e17 	ldw	r2,56(r2)
   1be68:	10800058 	cmpnei	r2,r2,1
   1be6c:	1000041e 	bne	r2,zero,1be80 <alt_sys_init+0x314>
   1be70:	008000b4 	movhi	r2,2
   1be74:	10886804 	addi	r2,r2,8608
   1be78:	10001115 	stw	zero,68(r2)
   1be7c:	00000e06 	br	1beb8 <alt_sys_init+0x34c>
   1be80:	008000b4 	movhi	r2,2
   1be84:	10886804 	addi	r2,r2,8608
   1be88:	10800e17 	ldw	r2,56(r2)
   1be8c:	10800098 	cmpnei	r2,r2,2
   1be90:	1000051e 	bne	r2,zero,1bea8 <alt_sys_init+0x33c>
   1be94:	008000b4 	movhi	r2,2
   1be98:	10886804 	addi	r2,r2,8608
   1be9c:	00c00044 	movi	r3,1
   1bea0:	10c01115 	stw	r3,68(r2)
   1bea4:	00000406 	br	1beb8 <alt_sys_init+0x34c>
   1bea8:	008000b4 	movhi	r2,2
   1beac:	10886804 	addi	r2,r2,8608
   1beb0:	00c00084 	movi	r3,2
   1beb4:	10c01115 	stw	r3,68(r2)
   1beb8:	e0bfff03 	ldbu	r2,-4(fp)
   1bebc:	00c00804 	movi	r3,32
   1bec0:	1885c83a 	sub	r2,r3,r2
   1bec4:	00ffffc4 	movi	r3,-1
   1bec8:	1886d83a 	srl	r3,r3,r2
   1becc:	008000b4 	movhi	r2,2
   1bed0:	10886804 	addi	r2,r2,8608
   1bed4:	10c01215 	stw	r3,72(r2)
   1bed8:	e0ffff03 	ldbu	r3,-4(fp)
   1bedc:	008000b4 	movhi	r2,2
   1bee0:	10886804 	addi	r2,r2,8608
   1bee4:	10801117 	ldw	r2,68(r2)
   1bee8:	1887883a 	add	r3,r3,r2
   1beec:	008000b4 	movhi	r2,2
   1bef0:	10886804 	addi	r2,r2,8608
   1bef4:	10c01315 	stw	r3,76(r2)
   1bef8:	e0bfff43 	ldbu	r2,-3(fp)
   1befc:	00c00804 	movi	r3,32
   1bf00:	1885c83a 	sub	r2,r3,r2
   1bf04:	00ffffc4 	movi	r3,-1
   1bf08:	1886d83a 	srl	r3,r3,r2
   1bf0c:	008000b4 	movhi	r2,2
   1bf10:	10886804 	addi	r2,r2,8608
   1bf14:	10c01415 	stw	r3,80(r2)
   1bf18:	010000b4 	movhi	r4,2
   1bf1c:	21086804 	addi	r4,r4,8608
   1bf20:	001bb000 	call	1bb00 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1bf24:	010000b4 	movhi	r4,2
   1bf28:	21087d04 	addi	r4,r4,8692
   1bf2c:	001bb000 	call	1bb00 <alt_dev_reg>
}
   1bf30:	e037883a 	mov	sp,fp
   1bf34:	dfc00117 	ldw	ra,4(sp)
   1bf38:	df000017 	ldw	fp,0(sp)
   1bf3c:	dec00204 	addi	sp,sp,8
   1bf40:	f800283a 	ret

0001bf44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1bf44:	defffa04 	addi	sp,sp,-24
   1bf48:	dfc00515 	stw	ra,20(sp)
   1bf4c:	df000415 	stw	fp,16(sp)
   1bf50:	df000404 	addi	fp,sp,16
   1bf54:	e13ffd15 	stw	r4,-12(fp)
   1bf58:	e17ffe15 	stw	r5,-8(fp)
   1bf5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bf60:	e0bffd17 	ldw	r2,-12(fp)
   1bf64:	10800017 	ldw	r2,0(r2)
   1bf68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1bf6c:	e0bffc17 	ldw	r2,-16(fp)
   1bf70:	10c00a04 	addi	r3,r2,40
   1bf74:	e0bffd17 	ldw	r2,-12(fp)
   1bf78:	10800217 	ldw	r2,8(r2)
   1bf7c:	1809883a 	mov	r4,r3
   1bf80:	e17ffe17 	ldw	r5,-8(fp)
   1bf84:	e1bfff17 	ldw	r6,-4(fp)
   1bf88:	100f883a 	mov	r7,r2
   1bf8c:	001c6f40 	call	1c6f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1bf90:	e037883a 	mov	sp,fp
   1bf94:	dfc00117 	ldw	ra,4(sp)
   1bf98:	df000017 	ldw	fp,0(sp)
   1bf9c:	dec00204 	addi	sp,sp,8
   1bfa0:	f800283a 	ret

0001bfa4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1bfa4:	defffa04 	addi	sp,sp,-24
   1bfa8:	dfc00515 	stw	ra,20(sp)
   1bfac:	df000415 	stw	fp,16(sp)
   1bfb0:	df000404 	addi	fp,sp,16
   1bfb4:	e13ffd15 	stw	r4,-12(fp)
   1bfb8:	e17ffe15 	stw	r5,-8(fp)
   1bfbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bfc0:	e0bffd17 	ldw	r2,-12(fp)
   1bfc4:	10800017 	ldw	r2,0(r2)
   1bfc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1bfcc:	e0bffc17 	ldw	r2,-16(fp)
   1bfd0:	10c00a04 	addi	r3,r2,40
   1bfd4:	e0bffd17 	ldw	r2,-12(fp)
   1bfd8:	10800217 	ldw	r2,8(r2)
   1bfdc:	1809883a 	mov	r4,r3
   1bfe0:	e17ffe17 	ldw	r5,-8(fp)
   1bfe4:	e1bfff17 	ldw	r6,-4(fp)
   1bfe8:	100f883a 	mov	r7,r2
   1bfec:	001c9a80 	call	1c9a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1bff0:	e037883a 	mov	sp,fp
   1bff4:	dfc00117 	ldw	ra,4(sp)
   1bff8:	df000017 	ldw	fp,0(sp)
   1bffc:	dec00204 	addi	sp,sp,8
   1c000:	f800283a 	ret

0001c004 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c004:	defffc04 	addi	sp,sp,-16
   1c008:	dfc00315 	stw	ra,12(sp)
   1c00c:	df000215 	stw	fp,8(sp)
   1c010:	df000204 	addi	fp,sp,8
   1c014:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c018:	e0bfff17 	ldw	r2,-4(fp)
   1c01c:	10800017 	ldw	r2,0(r2)
   1c020:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c024:	e0bffe17 	ldw	r2,-8(fp)
   1c028:	10c00a04 	addi	r3,r2,40
   1c02c:	e0bfff17 	ldw	r2,-4(fp)
   1c030:	10800217 	ldw	r2,8(r2)
   1c034:	1809883a 	mov	r4,r3
   1c038:	100b883a 	mov	r5,r2
   1c03c:	001c5a00 	call	1c5a0 <altera_avalon_jtag_uart_close>
}
   1c040:	e037883a 	mov	sp,fp
   1c044:	dfc00117 	ldw	ra,4(sp)
   1c048:	df000017 	ldw	fp,0(sp)
   1c04c:	dec00204 	addi	sp,sp,8
   1c050:	f800283a 	ret

0001c054 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c054:	defffa04 	addi	sp,sp,-24
   1c058:	dfc00515 	stw	ra,20(sp)
   1c05c:	df000415 	stw	fp,16(sp)
   1c060:	df000404 	addi	fp,sp,16
   1c064:	e13ffd15 	stw	r4,-12(fp)
   1c068:	e17ffe15 	stw	r5,-8(fp)
   1c06c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c070:	e0bffd17 	ldw	r2,-12(fp)
   1c074:	10800017 	ldw	r2,0(r2)
   1c078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c07c:	e0bffc17 	ldw	r2,-16(fp)
   1c080:	10800a04 	addi	r2,r2,40
   1c084:	1009883a 	mov	r4,r2
   1c088:	e17ffe17 	ldw	r5,-8(fp)
   1c08c:	e1bfff17 	ldw	r6,-4(fp)
   1c090:	001c6080 	call	1c608 <altera_avalon_jtag_uart_ioctl>
}
   1c094:	e037883a 	mov	sp,fp
   1c098:	dfc00117 	ldw	ra,4(sp)
   1c09c:	df000017 	ldw	fp,0(sp)
   1c0a0:	dec00204 	addi	sp,sp,8
   1c0a4:	f800283a 	ret

0001c0a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1c0a8:	defff104 	addi	sp,sp,-60
   1c0ac:	dfc00e15 	stw	ra,56(sp)
   1c0b0:	df000d15 	stw	fp,52(sp)
   1c0b4:	df000d04 	addi	fp,sp,52
   1c0b8:	e13ff915 	stw	r4,-28(fp)
   1c0bc:	e17ffa15 	stw	r5,-24(fp)
   1c0c0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1c0c4:	e0bff917 	ldw	r2,-28(fp)
   1c0c8:	10800c04 	addi	r2,r2,48
   1c0cc:	e0bff315 	stw	r2,-52(fp)
   1c0d0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1c0d4:	e0fff40b 	ldhu	r3,-48(fp)
   1c0d8:	e0bff884 	addi	r2,fp,-30
   1c0dc:	1809883a 	mov	r4,r3
   1c0e0:	100b883a 	mov	r5,r2
   1c0e4:	001576c0 	call	1576c <OSFlagCreate>
   1c0e8:	1007883a 	mov	r3,r2
   1c0ec:	e0bff317 	ldw	r2,-52(fp)
   1c0f0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1c0f4:	e0bff917 	ldw	r2,-28(fp)
   1c0f8:	10800a04 	addi	r2,r2,40
   1c0fc:	e0bff515 	stw	r2,-44(fp)
   1c100:	00800044 	movi	r2,1
   1c104:	e0bff60d 	sth	r2,-40(fp)
   1c108:	e0bff60b 	ldhu	r2,-40(fp)
   1c10c:	1009883a 	mov	r4,r2
   1c110:	001924c0 	call	1924c <OSSemCreate>
   1c114:	1007883a 	mov	r3,r2
   1c118:	e0bff517 	ldw	r2,-44(fp)
   1c11c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1c120:	e0bff917 	ldw	r2,-28(fp)
   1c124:	10800b04 	addi	r2,r2,44
   1c128:	e0bff715 	stw	r2,-36(fp)
   1c12c:	00800044 	movi	r2,1
   1c130:	e0bff80d 	sth	r2,-32(fp)
   1c134:	e0bff80b 	ldhu	r2,-32(fp)
   1c138:	1009883a 	mov	r4,r2
   1c13c:	001924c0 	call	1924c <OSSemCreate>
   1c140:	1007883a 	mov	r3,r2
   1c144:	e0bff717 	ldw	r2,-36(fp)
   1c148:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c14c:	e0bff917 	ldw	r2,-28(fp)
   1c150:	00c00044 	movi	r3,1
   1c154:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1c158:	e0bff917 	ldw	r2,-28(fp)
   1c15c:	10800017 	ldw	r2,0(r2)
   1c160:	10800104 	addi	r2,r2,4
   1c164:	1007883a 	mov	r3,r2
   1c168:	e0bff917 	ldw	r2,-28(fp)
   1c16c:	10800817 	ldw	r2,32(r2)
   1c170:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1c174:	e0bffb17 	ldw	r2,-20(fp)
   1c178:	1009883a 	mov	r4,r2
   1c17c:	e17ff917 	ldw	r5,-28(fp)
   1c180:	018000b4 	movhi	r6,2
   1c184:	31b07a04 	addi	r6,r6,-15896
   1c188:	001e8280 	call	1e828 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1c18c:	e0bff917 	ldw	r2,-28(fp)
   1c190:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1c194:	e0bff917 	ldw	r2,-28(fp)
   1c198:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c19c:	008000b4 	movhi	r2,2
   1c1a0:	1090cf04 	addi	r2,r2,17212
   1c1a4:	10800017 	ldw	r2,0(r2)
   1c1a8:	1809883a 	mov	r4,r3
   1c1ac:	100b883a 	mov	r5,r2
   1c1b0:	018000b4 	movhi	r6,2
   1c1b4:	31b12404 	addi	r6,r6,-15216
   1c1b8:	e1fff917 	ldw	r7,-28(fp)
   1c1bc:	001e3280 	call	1e328 <alt_alarm_start>
   1c1c0:	1000040e 	bge	r2,zero,1c1d4 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c1c4:	e0fff917 	ldw	r3,-28(fp)
   1c1c8:	00a00034 	movhi	r2,32768
   1c1cc:	10bfffc4 	addi	r2,r2,-1
   1c1d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c1d4:	e037883a 	mov	sp,fp
   1c1d8:	dfc00117 	ldw	ra,4(sp)
   1c1dc:	df000017 	ldw	fp,0(sp)
   1c1e0:	dec00204 	addi	sp,sp,8
   1c1e4:	f800283a 	ret

0001c1e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c1e8:	defff104 	addi	sp,sp,-60
   1c1ec:	dfc00e15 	stw	ra,56(sp)
   1c1f0:	df000d15 	stw	fp,52(sp)
   1c1f4:	df000d04 	addi	fp,sp,52
   1c1f8:	e13ffe15 	stw	r4,-8(fp)
   1c1fc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c200:	e0bffe17 	ldw	r2,-8(fp)
   1c204:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1c208:	e0bff517 	ldw	r2,-44(fp)
   1c20c:	10800017 	ldw	r2,0(r2)
   1c210:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c214:	e0bff617 	ldw	r2,-40(fp)
   1c218:	10800104 	addi	r2,r2,4
   1c21c:	10800037 	ldwio	r2,0(r2)
   1c220:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c224:	e0bff717 	ldw	r2,-36(fp)
   1c228:	1080c00c 	andi	r2,r2,768
   1c22c:	1000011e 	bne	r2,zero,1c234 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1c230:	00009206 	br	1c47c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1c234:	e0bff717 	ldw	r2,-36(fp)
   1c238:	1080400c 	andi	r2,r2,256
   1c23c:	10004726 	beq	r2,zero,1c35c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1c240:	00800074 	movhi	r2,1
   1c244:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c248:	e0bff517 	ldw	r2,-44(fp)
   1c24c:	10800d17 	ldw	r2,52(r2)
   1c250:	10800044 	addi	r2,r2,1
   1c254:	1081ffcc 	andi	r2,r2,2047
   1c258:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1c25c:	e0bff517 	ldw	r2,-44(fp)
   1c260:	10c00e17 	ldw	r3,56(r2)
   1c264:	e0bff817 	ldw	r2,-32(fp)
   1c268:	1880011e 	bne	r3,r2,1c270 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1c26c:	00002906 	br	1c314 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1c270:	e0bff617 	ldw	r2,-40(fp)
   1c274:	10800037 	ldwio	r2,0(r2)
   1c278:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1c27c:	e0bff317 	ldw	r2,-52(fp)
   1c280:	10a0000c 	andi	r2,r2,32768
   1c284:	1000011e 	bne	r2,zero,1c28c <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1c288:	00002206 	br	1c314 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1c28c:	e0bff517 	ldw	r2,-44(fp)
   1c290:	10800d17 	ldw	r2,52(r2)
   1c294:	e0fff317 	ldw	r3,-52(fp)
   1c298:	1809883a 	mov	r4,r3
   1c29c:	e0fff517 	ldw	r3,-44(fp)
   1c2a0:	1885883a 	add	r2,r3,r2
   1c2a4:	10801104 	addi	r2,r2,68
   1c2a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c2ac:	e0bff517 	ldw	r2,-44(fp)
   1c2b0:	10800d17 	ldw	r2,52(r2)
   1c2b4:	10800044 	addi	r2,r2,1
   1c2b8:	10c1ffcc 	andi	r3,r2,2047
   1c2bc:	e0bff517 	ldw	r2,-44(fp)
   1c2c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1c2c4:	e0bff517 	ldw	r2,-44(fp)
   1c2c8:	10800c17 	ldw	r2,48(r2)
   1c2cc:	e0bff915 	stw	r2,-28(fp)
   1c2d0:	00800044 	movi	r2,1
   1c2d4:	e0bffa0d 	sth	r2,-24(fp)
   1c2d8:	00800044 	movi	r2,1
   1c2dc:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c2e0:	008000b4 	movhi	r2,2
   1c2e4:	1090ba44 	addi	r2,r2,17129
   1c2e8:	10800003 	ldbu	r2,0(r2)
   1c2ec:	10803fcc 	andi	r2,r2,255
   1c2f0:	103fd526 	beq	r2,zero,1c248 <__alt_mem_Flash_flash_data+0xf401c248>
  {
    OSFlagPost (group, flags, opt, &err);
   1c2f4:	e17ffa0b 	ldhu	r5,-24(fp)
   1c2f8:	e0fffa83 	ldbu	r3,-22(fp)
   1c2fc:	e0bffcc4 	addi	r2,fp,-13
   1c300:	e13ff917 	ldw	r4,-28(fp)
   1c304:	180d883a 	mov	r6,r3
   1c308:	100f883a 	mov	r7,r2
   1c30c:	00163dc0 	call	163dc <OSFlagPost>
      }
   1c310:	003fcd06 	br	1c248 <__alt_mem_Flash_flash_data+0xf401c248>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1c314:	e0bff317 	ldw	r2,-52(fp)
   1c318:	10bfffec 	andhi	r2,r2,65535
   1c31c:	10000f26 	beq	r2,zero,1c35c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c320:	e0bff517 	ldw	r2,-44(fp)
   1c324:	10c00817 	ldw	r3,32(r2)
   1c328:	00bfff84 	movi	r2,-2
   1c32c:	1886703a 	and	r3,r3,r2
   1c330:	e0bff517 	ldw	r2,-44(fp)
   1c334:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1c338:	e0bff617 	ldw	r2,-40(fp)
   1c33c:	10800104 	addi	r2,r2,4
   1c340:	1007883a 	mov	r3,r2
   1c344:	e0bff517 	ldw	r2,-44(fp)
   1c348:	10800817 	ldw	r2,32(r2)
   1c34c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c350:	e0bff617 	ldw	r2,-40(fp)
   1c354:	10800104 	addi	r2,r2,4
   1c358:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1c35c:	e0bff717 	ldw	r2,-36(fp)
   1c360:	1080800c 	andi	r2,r2,512
   1c364:	10004426 	beq	r2,zero,1c478 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1c368:	e0bff717 	ldw	r2,-36(fp)
   1c36c:	1004d43a 	srli	r2,r2,16
   1c370:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c374:	00002706 	br	1c414 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1c378:	e0bff617 	ldw	r2,-40(fp)
   1c37c:	e0fff517 	ldw	r3,-44(fp)
   1c380:	18c01017 	ldw	r3,64(r3)
   1c384:	e13ff517 	ldw	r4,-44(fp)
   1c388:	20c7883a 	add	r3,r4,r3
   1c38c:	18c21104 	addi	r3,r3,2116
   1c390:	18c00003 	ldbu	r3,0(r3)
   1c394:	18c03fcc 	andi	r3,r3,255
   1c398:	18c0201c 	xori	r3,r3,128
   1c39c:	18ffe004 	addi	r3,r3,-128
   1c3a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c3a4:	e0bff517 	ldw	r2,-44(fp)
   1c3a8:	10801017 	ldw	r2,64(r2)
   1c3ac:	10800044 	addi	r2,r2,1
   1c3b0:	10c1ffcc 	andi	r3,r2,2047
   1c3b4:	e0bff517 	ldw	r2,-44(fp)
   1c3b8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1c3bc:	e0bff517 	ldw	r2,-44(fp)
   1c3c0:	10800c17 	ldw	r2,48(r2)
   1c3c4:	e0bffb15 	stw	r2,-20(fp)
   1c3c8:	00800084 	movi	r2,2
   1c3cc:	e0bffc0d 	sth	r2,-16(fp)
   1c3d0:	00800044 	movi	r2,1
   1c3d4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c3d8:	008000b4 	movhi	r2,2
   1c3dc:	1090ba44 	addi	r2,r2,17129
   1c3e0:	10800003 	ldbu	r2,0(r2)
   1c3e4:	10803fcc 	andi	r2,r2,255
   1c3e8:	10000726 	beq	r2,zero,1c408 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1c3ec:	e17ffc0b 	ldhu	r5,-16(fp)
   1c3f0:	e0fffc83 	ldbu	r3,-14(fp)
   1c3f4:	e0bffd04 	addi	r2,fp,-12
   1c3f8:	e13ffb17 	ldw	r4,-20(fp)
   1c3fc:	180d883a 	mov	r6,r3
   1c400:	100f883a 	mov	r7,r2
   1c404:	00163dc0 	call	163dc <OSFlagPost>

        space--;
   1c408:	e0bff417 	ldw	r2,-48(fp)
   1c40c:	10bfffc4 	addi	r2,r2,-1
   1c410:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c414:	e0bff417 	ldw	r2,-48(fp)
   1c418:	10000526 	beq	r2,zero,1c430 <altera_avalon_jtag_uart_irq+0x248>
   1c41c:	e0bff517 	ldw	r2,-44(fp)
   1c420:	10c01017 	ldw	r3,64(r2)
   1c424:	e0bff517 	ldw	r2,-44(fp)
   1c428:	10800f17 	ldw	r2,60(r2)
   1c42c:	18bfd21e 	bne	r3,r2,1c378 <__alt_mem_Flash_flash_data+0xf401c378>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c430:	e0bff417 	ldw	r2,-48(fp)
   1c434:	10001026 	beq	r2,zero,1c478 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c438:	e0bff517 	ldw	r2,-44(fp)
   1c43c:	10c00817 	ldw	r3,32(r2)
   1c440:	00bfff44 	movi	r2,-3
   1c444:	1886703a 	and	r3,r3,r2
   1c448:	e0bff517 	ldw	r2,-44(fp)
   1c44c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c450:	e0bff517 	ldw	r2,-44(fp)
   1c454:	10800017 	ldw	r2,0(r2)
   1c458:	10800104 	addi	r2,r2,4
   1c45c:	1007883a 	mov	r3,r2
   1c460:	e0bff517 	ldw	r2,-44(fp)
   1c464:	10800817 	ldw	r2,32(r2)
   1c468:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c46c:	e0bff617 	ldw	r2,-40(fp)
   1c470:	10800104 	addi	r2,r2,4
   1c474:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c478:	003f6606 	br	1c214 <__alt_mem_Flash_flash_data+0xf401c214>
}
   1c47c:	e037883a 	mov	sp,fp
   1c480:	dfc00117 	ldw	ra,4(sp)
   1c484:	df000017 	ldw	fp,0(sp)
   1c488:	dec00204 	addi	sp,sp,8
   1c48c:	f800283a 	ret

0001c490 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c490:	defff904 	addi	sp,sp,-28
   1c494:	dfc00615 	stw	ra,24(sp)
   1c498:	df000515 	stw	fp,20(sp)
   1c49c:	df000504 	addi	fp,sp,20
   1c4a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c4a4:	e0bfff17 	ldw	r2,-4(fp)
   1c4a8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c4ac:	e0bffb17 	ldw	r2,-20(fp)
   1c4b0:	10800017 	ldw	r2,0(r2)
   1c4b4:	10800104 	addi	r2,r2,4
   1c4b8:	10800037 	ldwio	r2,0(r2)
   1c4bc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c4c0:	e0bffc17 	ldw	r2,-16(fp)
   1c4c4:	1081000c 	andi	r2,r2,1024
   1c4c8:	10000b26 	beq	r2,zero,1c4f8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c4cc:	e0bffb17 	ldw	r2,-20(fp)
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	10800104 	addi	r2,r2,4
   1c4d8:	1007883a 	mov	r3,r2
   1c4dc:	e0bffb17 	ldw	r2,-20(fp)
   1c4e0:	10800817 	ldw	r2,32(r2)
   1c4e4:	10810014 	ori	r2,r2,1024
   1c4e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1c4ec:	e0bffb17 	ldw	r2,-20(fp)
   1c4f0:	10000915 	stw	zero,36(r2)
   1c4f4:	00002206 	br	1c580 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c4f8:	e0bffb17 	ldw	r2,-20(fp)
   1c4fc:	10c00917 	ldw	r3,36(r2)
   1c500:	00a00034 	movhi	r2,32768
   1c504:	10bfff04 	addi	r2,r2,-4
   1c508:	10c01d36 	bltu	r2,r3,1c580 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1c50c:	e0bffb17 	ldw	r2,-20(fp)
   1c510:	10800917 	ldw	r2,36(r2)
   1c514:	10c00044 	addi	r3,r2,1
   1c518:	e0bffb17 	ldw	r2,-20(fp)
   1c51c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1c520:	e0bffb17 	ldw	r2,-20(fp)
   1c524:	10c00917 	ldw	r3,36(r2)
   1c528:	e0bffb17 	ldw	r2,-20(fp)
   1c52c:	10800117 	ldw	r2,4(r2)
   1c530:	18801336 	bltu	r3,r2,1c580 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1c534:	e0bffb17 	ldw	r2,-20(fp)
   1c538:	10800c17 	ldw	r2,48(r2)
   1c53c:	e0bffd15 	stw	r2,-12(fp)
   1c540:	00800104 	movi	r2,4
   1c544:	e0bffe0d 	sth	r2,-8(fp)
   1c548:	00800044 	movi	r2,1
   1c54c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c550:	008000b4 	movhi	r2,2
   1c554:	1090ba44 	addi	r2,r2,17129
   1c558:	10800003 	ldbu	r2,0(r2)
   1c55c:	10803fcc 	andi	r2,r2,255
   1c560:	10000726 	beq	r2,zero,1c580 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1c564:	e17ffe0b 	ldhu	r5,-8(fp)
   1c568:	e0fffe83 	ldbu	r3,-6(fp)
   1c56c:	e0bffec4 	addi	r2,fp,-5
   1c570:	e13ffd17 	ldw	r4,-12(fp)
   1c574:	180d883a 	mov	r6,r3
   1c578:	100f883a 	mov	r7,r2
   1c57c:	00163dc0 	call	163dc <OSFlagPost>
   1c580:	008000b4 	movhi	r2,2
   1c584:	1090cf04 	addi	r2,r2,17212
   1c588:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1c58c:	e037883a 	mov	sp,fp
   1c590:	dfc00117 	ldw	ra,4(sp)
   1c594:	df000017 	ldw	fp,0(sp)
   1c598:	dec00204 	addi	sp,sp,8
   1c59c:	f800283a 	ret

0001c5a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c5a0:	defffd04 	addi	sp,sp,-12
   1c5a4:	df000215 	stw	fp,8(sp)
   1c5a8:	df000204 	addi	fp,sp,8
   1c5ac:	e13ffe15 	stw	r4,-8(fp)
   1c5b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c5b4:	00000506 	br	1c5cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1c5b8:	e0bfff17 	ldw	r2,-4(fp)
   1c5bc:	1090000c 	andi	r2,r2,16384
   1c5c0:	10000226 	beq	r2,zero,1c5cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1c5c4:	00bffd44 	movi	r2,-11
   1c5c8:	00000b06 	br	1c5f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c5cc:	e0bffe17 	ldw	r2,-8(fp)
   1c5d0:	10c01017 	ldw	r3,64(r2)
   1c5d4:	e0bffe17 	ldw	r2,-8(fp)
   1c5d8:	10800f17 	ldw	r2,60(r2)
   1c5dc:	18800526 	beq	r3,r2,1c5f4 <altera_avalon_jtag_uart_close+0x54>
   1c5e0:	e0bffe17 	ldw	r2,-8(fp)
   1c5e4:	10c00917 	ldw	r3,36(r2)
   1c5e8:	e0bffe17 	ldw	r2,-8(fp)
   1c5ec:	10800117 	ldw	r2,4(r2)
   1c5f0:	18bff136 	bltu	r3,r2,1c5b8 <__alt_mem_Flash_flash_data+0xf401c5b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c5f4:	0005883a 	mov	r2,zero
}
   1c5f8:	e037883a 	mov	sp,fp
   1c5fc:	df000017 	ldw	fp,0(sp)
   1c600:	dec00104 	addi	sp,sp,4
   1c604:	f800283a 	ret

0001c608 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c608:	defffa04 	addi	sp,sp,-24
   1c60c:	df000515 	stw	fp,20(sp)
   1c610:	df000504 	addi	fp,sp,20
   1c614:	e13ffd15 	stw	r4,-12(fp)
   1c618:	e17ffe15 	stw	r5,-8(fp)
   1c61c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1c620:	00bff9c4 	movi	r2,-25
   1c624:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1c628:	e0bffe17 	ldw	r2,-8(fp)
   1c62c:	10da8060 	cmpeqi	r3,r2,27137
   1c630:	1800031e 	bne	r3,zero,1c640 <altera_avalon_jtag_uart_ioctl+0x38>
   1c634:	109a80a0 	cmpeqi	r2,r2,27138
   1c638:	1000191e 	bne	r2,zero,1c6a0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1c63c:	00002806 	br	1c6e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c640:	e0bffd17 	ldw	r2,-12(fp)
   1c644:	10c00117 	ldw	r3,4(r2)
   1c648:	00a00034 	movhi	r2,32768
   1c64c:	10bfffc4 	addi	r2,r2,-1
   1c650:	18801226 	beq	r3,r2,1c69c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1c654:	e0bfff17 	ldw	r2,-4(fp)
   1c658:	10800017 	ldw	r2,0(r2)
   1c65c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c660:	e0bffc17 	ldw	r2,-16(fp)
   1c664:	10800090 	cmplti	r2,r2,2
   1c668:	1000061e 	bne	r2,zero,1c684 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c66c:	e0fffc17 	ldw	r3,-16(fp)
   1c670:	00a00034 	movhi	r2,32768
   1c674:	10bfffc4 	addi	r2,r2,-1
   1c678:	18800226 	beq	r3,r2,1c684 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c67c:	e0bffc17 	ldw	r2,-16(fp)
   1c680:	00000206 	br	1c68c <altera_avalon_jtag_uart_ioctl+0x84>
   1c684:	00a00034 	movhi	r2,32768
   1c688:	10bfff84 	addi	r2,r2,-2
   1c68c:	e0fffd17 	ldw	r3,-12(fp)
   1c690:	18800115 	stw	r2,4(r3)
      rc = 0;
   1c694:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c698:	00001106 	br	1c6e0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1c69c:	00001006 	br	1c6e0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c6a0:	e0bffd17 	ldw	r2,-12(fp)
   1c6a4:	10c00117 	ldw	r3,4(r2)
   1c6a8:	00a00034 	movhi	r2,32768
   1c6ac:	10bfffc4 	addi	r2,r2,-1
   1c6b0:	18800a26 	beq	r3,r2,1c6dc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c6b4:	e0bffd17 	ldw	r2,-12(fp)
   1c6b8:	10c00917 	ldw	r3,36(r2)
   1c6bc:	e0bffd17 	ldw	r2,-12(fp)
   1c6c0:	10800117 	ldw	r2,4(r2)
   1c6c4:	1885803a 	cmpltu	r2,r3,r2
   1c6c8:	10c03fcc 	andi	r3,r2,255
   1c6cc:	e0bfff17 	ldw	r2,-4(fp)
   1c6d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1c6d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c6d8:	00000006 	br	1c6dc <altera_avalon_jtag_uart_ioctl+0xd4>
   1c6dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1c6e0:	e0bffb17 	ldw	r2,-20(fp)
}
   1c6e4:	e037883a 	mov	sp,fp
   1c6e8:	df000017 	ldw	fp,0(sp)
   1c6ec:	dec00104 	addi	sp,sp,4
   1c6f0:	f800283a 	ret

0001c6f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1c6f4:	deffec04 	addi	sp,sp,-80
   1c6f8:	dfc01315 	stw	ra,76(sp)
   1c6fc:	df001215 	stw	fp,72(sp)
   1c700:	df001204 	addi	fp,sp,72
   1c704:	e13ffc15 	stw	r4,-16(fp)
   1c708:	e17ffd15 	stw	r5,-12(fp)
   1c70c:	e1bffe15 	stw	r6,-8(fp)
   1c710:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1c714:	e0bffd17 	ldw	r2,-12(fp)
   1c718:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1c71c:	e0bffc17 	ldw	r2,-16(fp)
   1c720:	10800a17 	ldw	r2,40(r2)
   1c724:	e0bff415 	stw	r2,-48(fp)
   1c728:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1c72c:	e0fff50b 	ldhu	r3,-44(fp)
   1c730:	e0bffb04 	addi	r2,fp,-20
   1c734:	e13ff417 	ldw	r4,-48(fp)
   1c738:	180b883a 	mov	r5,r3
   1c73c:	100d883a 	mov	r6,r2
   1c740:	00195b40 	call	195b4 <OSSemPend>

  while (space > 0)
   1c744:	00006506 	br	1c8dc <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1c748:	e0bffc17 	ldw	r2,-16(fp)
   1c74c:	10800d17 	ldw	r2,52(r2)
   1c750:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1c754:	e0bffc17 	ldw	r2,-16(fp)
   1c758:	10800e17 	ldw	r2,56(r2)
   1c75c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1c760:	e0fff117 	ldw	r3,-60(fp)
   1c764:	e0bff217 	ldw	r2,-56(fp)
   1c768:	18800536 	bltu	r3,r2,1c780 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1c76c:	e0fff117 	ldw	r3,-60(fp)
   1c770:	e0bff217 	ldw	r2,-56(fp)
   1c774:	1885c83a 	sub	r2,r3,r2
   1c778:	e0bff015 	stw	r2,-64(fp)
   1c77c:	00000406 	br	1c790 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1c780:	00c20004 	movi	r3,2048
   1c784:	e0bff217 	ldw	r2,-56(fp)
   1c788:	1885c83a 	sub	r2,r3,r2
   1c78c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1c790:	e0bff017 	ldw	r2,-64(fp)
   1c794:	1000011e 	bne	r2,zero,1c79c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1c798:	00001d06 	br	1c810 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1c79c:	e0fffe17 	ldw	r3,-8(fp)
   1c7a0:	e0bff017 	ldw	r2,-64(fp)
   1c7a4:	1880022e 	bgeu	r3,r2,1c7b0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1c7a8:	e0bffe17 	ldw	r2,-8(fp)
   1c7ac:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1c7b0:	e0bff217 	ldw	r2,-56(fp)
   1c7b4:	10801104 	addi	r2,r2,68
   1c7b8:	e0fffc17 	ldw	r3,-16(fp)
   1c7bc:	1885883a 	add	r2,r3,r2
   1c7c0:	e13fef17 	ldw	r4,-68(fp)
   1c7c4:	100b883a 	mov	r5,r2
   1c7c8:	e1bff017 	ldw	r6,-64(fp)
   1c7cc:	000a8780 	call	a878 <memcpy>
      ptr   += n;
   1c7d0:	e0ffef17 	ldw	r3,-68(fp)
   1c7d4:	e0bff017 	ldw	r2,-64(fp)
   1c7d8:	1885883a 	add	r2,r3,r2
   1c7dc:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1c7e0:	e0fffe17 	ldw	r3,-8(fp)
   1c7e4:	e0bff017 	ldw	r2,-64(fp)
   1c7e8:	1885c83a 	sub	r2,r3,r2
   1c7ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c7f0:	e0fff217 	ldw	r3,-56(fp)
   1c7f4:	e0bff017 	ldw	r2,-64(fp)
   1c7f8:	1885883a 	add	r2,r3,r2
   1c7fc:	10c1ffcc 	andi	r3,r2,2047
   1c800:	e0bffc17 	ldw	r2,-16(fp)
   1c804:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1c808:	e0bffe17 	ldw	r2,-8(fp)
   1c80c:	00bfce16 	blt	zero,r2,1c748 <__alt_mem_Flash_flash_data+0xf401c748>

    /* If we read any data then return it */
    if (ptr != buffer)
   1c810:	e0ffef17 	ldw	r3,-68(fp)
   1c814:	e0bffd17 	ldw	r2,-12(fp)
   1c818:	18800126 	beq	r3,r2,1c820 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1c81c:	00003106 	br	1c8e4 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1c820:	e0bfff17 	ldw	r2,-4(fp)
   1c824:	1090000c 	andi	r2,r2,16384
   1c828:	10000126 	beq	r2,zero,1c830 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1c82c:	00002d06 	br	1c8e4 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1c830:	008000b4 	movhi	r2,2
   1c834:	1090ba44 	addi	r2,r2,17129
   1c838:	10800003 	ldbu	r2,0(r2)
   1c83c:	10803fcc 	andi	r2,r2,255
   1c840:	10800058 	cmpnei	r2,r2,1
   1c844:	1000161e 	bne	r2,zero,1c8a0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1c848:	e0bffc17 	ldw	r2,-16(fp)
   1c84c:	10800c17 	ldw	r2,48(r2)
   1c850:	e0bff615 	stw	r2,-40(fp)
   1c854:	00800144 	movi	r2,5
   1c858:	e0bff70d 	sth	r2,-36(fp)
   1c85c:	00bfe0c4 	movi	r2,-125
   1c860:	e0bff785 	stb	r2,-34(fp)
   1c864:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c868:	008000b4 	movhi	r2,2
   1c86c:	1090ba44 	addi	r2,r2,17129
   1c870:	10800003 	ldbu	r2,0(r2)
   1c874:	10803fcc 	andi	r2,r2,255
   1c878:	10001326 	beq	r2,zero,1c8c8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c87c:	e17ff70b 	ldhu	r5,-36(fp)
   1c880:	e1bff783 	ldbu	r6,-34(fp)
   1c884:	e0fff80b 	ldhu	r3,-32(fp)
   1c888:	e0bffb44 	addi	r2,fp,-19
   1c88c:	d8800015 	stw	r2,0(sp)
   1c890:	e13ff617 	ldw	r4,-40(fp)
   1c894:	180f883a 	mov	r7,r3
   1c898:	0015d840 	call	15d84 <OSFlagPend>
   1c89c:	00000a06 	br	1c8c8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1c8a0:	0001883a 	nop
   1c8a4:	e0bffc17 	ldw	r2,-16(fp)
   1c8a8:	10c00d17 	ldw	r3,52(r2)
   1c8ac:	e0bff117 	ldw	r2,-60(fp)
   1c8b0:	1880051e 	bne	r3,r2,1c8c8 <altera_avalon_jtag_uart_read+0x1d4>
   1c8b4:	e0bffc17 	ldw	r2,-16(fp)
   1c8b8:	10c00917 	ldw	r3,36(r2)
   1c8bc:	e0bffc17 	ldw	r2,-16(fp)
   1c8c0:	10800117 	ldw	r2,4(r2)
   1c8c4:	18bff736 	bltu	r3,r2,1c8a4 <__alt_mem_Flash_flash_data+0xf401c8a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1c8c8:	e0bffc17 	ldw	r2,-16(fp)
   1c8cc:	10c00d17 	ldw	r3,52(r2)
   1c8d0:	e0bff117 	ldw	r2,-60(fp)
   1c8d4:	1880011e 	bne	r3,r2,1c8dc <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1c8d8:	00000206 	br	1c8e4 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c8dc:	e0bffe17 	ldw	r2,-8(fp)
   1c8e0:	00bf9916 	blt	zero,r2,1c748 <__alt_mem_Flash_flash_data+0xf401c748>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1c8e4:	e0bffc17 	ldw	r2,-16(fp)
   1c8e8:	10800a17 	ldw	r2,40(r2)
   1c8ec:	1009883a 	mov	r4,r2
   1c8f0:	00199880 	call	19988 <OSSemPost>

  if (ptr != buffer)
   1c8f4:	e0ffef17 	ldw	r3,-68(fp)
   1c8f8:	e0bffd17 	ldw	r2,-12(fp)
   1c8fc:	18801826 	beq	r3,r2,1c960 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c900:	0005303a 	rdctl	r2,status
   1c904:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c908:	e0fff917 	ldw	r3,-28(fp)
   1c90c:	00bfff84 	movi	r2,-2
   1c910:	1884703a 	and	r2,r3,r2
   1c914:	1001703a 	wrctl	status,r2
  
  return context;
   1c918:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1c91c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c920:	e0bffc17 	ldw	r2,-16(fp)
   1c924:	10800817 	ldw	r2,32(r2)
   1c928:	10c00054 	ori	r3,r2,1
   1c92c:	e0bffc17 	ldw	r2,-16(fp)
   1c930:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c934:	e0bffc17 	ldw	r2,-16(fp)
   1c938:	10800017 	ldw	r2,0(r2)
   1c93c:	10800104 	addi	r2,r2,4
   1c940:	1007883a 	mov	r3,r2
   1c944:	e0bffc17 	ldw	r2,-16(fp)
   1c948:	10800817 	ldw	r2,32(r2)
   1c94c:	18800035 	stwio	r2,0(r3)
   1c950:	e0bff317 	ldw	r2,-52(fp)
   1c954:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c958:	e0bffa17 	ldw	r2,-24(fp)
   1c95c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1c960:	e0ffef17 	ldw	r3,-68(fp)
   1c964:	e0bffd17 	ldw	r2,-12(fp)
   1c968:	18800426 	beq	r3,r2,1c97c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1c96c:	e0ffef17 	ldw	r3,-68(fp)
   1c970:	e0bffd17 	ldw	r2,-12(fp)
   1c974:	1885c83a 	sub	r2,r3,r2
   1c978:	00000606 	br	1c994 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1c97c:	e0bfff17 	ldw	r2,-4(fp)
   1c980:	1090000c 	andi	r2,r2,16384
   1c984:	10000226 	beq	r2,zero,1c990 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1c988:	00bffd44 	movi	r2,-11
   1c98c:	00000106 	br	1c994 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1c990:	00bffec4 	movi	r2,-5
}
   1c994:	e037883a 	mov	sp,fp
   1c998:	dfc00117 	ldw	ra,4(sp)
   1c99c:	df000017 	ldw	fp,0(sp)
   1c9a0:	dec00204 	addi	sp,sp,8
   1c9a4:	f800283a 	ret

0001c9a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1c9a8:	deffed04 	addi	sp,sp,-76
   1c9ac:	dfc01215 	stw	ra,72(sp)
   1c9b0:	df001115 	stw	fp,68(sp)
   1c9b4:	df001104 	addi	fp,sp,68
   1c9b8:	e13ffc15 	stw	r4,-16(fp)
   1c9bc:	e17ffd15 	stw	r5,-12(fp)
   1c9c0:	e1bffe15 	stw	r6,-8(fp)
   1c9c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1c9c8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1c9cc:	e0bffd17 	ldw	r2,-12(fp)
   1c9d0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1c9d4:	e0bffc17 	ldw	r2,-16(fp)
   1c9d8:	10800b17 	ldw	r2,44(r2)
   1c9dc:	e0bff515 	stw	r2,-44(fp)
   1c9e0:	e03ff60d 	sth	zero,-40(fp)
   1c9e4:	e0fff60b 	ldhu	r3,-40(fp)
   1c9e8:	e0bffbc4 	addi	r2,fp,-17
   1c9ec:	e13ff517 	ldw	r4,-44(fp)
   1c9f0:	180b883a 	mov	r5,r3
   1c9f4:	100d883a 	mov	r6,r2
   1c9f8:	00195b40 	call	195b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c9fc:	00003806 	br	1cae0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1ca00:	e0bffc17 	ldw	r2,-16(fp)
   1ca04:	10800f17 	ldw	r2,60(r2)
   1ca08:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1ca0c:	e0bffc17 	ldw	r2,-16(fp)
   1ca10:	10801017 	ldw	r2,64(r2)
   1ca14:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1ca18:	e0fff317 	ldw	r3,-52(fp)
   1ca1c:	e0bff017 	ldw	r2,-64(fp)
   1ca20:	1880062e 	bgeu	r3,r2,1ca3c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1ca24:	e0fff017 	ldw	r3,-64(fp)
   1ca28:	e0bff317 	ldw	r2,-52(fp)
   1ca2c:	1885c83a 	sub	r2,r3,r2
   1ca30:	10bfffc4 	addi	r2,r2,-1
   1ca34:	e0bff115 	stw	r2,-60(fp)
   1ca38:	00000b06 	br	1ca68 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1ca3c:	e0bff017 	ldw	r2,-64(fp)
   1ca40:	10000526 	beq	r2,zero,1ca58 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1ca44:	00c20004 	movi	r3,2048
   1ca48:	e0bff317 	ldw	r2,-52(fp)
   1ca4c:	1885c83a 	sub	r2,r3,r2
   1ca50:	e0bff115 	stw	r2,-60(fp)
   1ca54:	00000406 	br	1ca68 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1ca58:	00c1ffc4 	movi	r3,2047
   1ca5c:	e0bff317 	ldw	r2,-52(fp)
   1ca60:	1885c83a 	sub	r2,r3,r2
   1ca64:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1ca68:	e0bff117 	ldw	r2,-60(fp)
   1ca6c:	1000011e 	bne	r2,zero,1ca74 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1ca70:	00001d06 	br	1cae8 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1ca74:	e0fffe17 	ldw	r3,-8(fp)
   1ca78:	e0bff117 	ldw	r2,-60(fp)
   1ca7c:	1880022e 	bgeu	r3,r2,1ca88 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1ca80:	e0bffe17 	ldw	r2,-8(fp)
   1ca84:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1ca88:	e0bff317 	ldw	r2,-52(fp)
   1ca8c:	10821104 	addi	r2,r2,2116
   1ca90:	e0fffc17 	ldw	r3,-16(fp)
   1ca94:	1885883a 	add	r2,r3,r2
   1ca98:	1009883a 	mov	r4,r2
   1ca9c:	e17ffd17 	ldw	r5,-12(fp)
   1caa0:	e1bff117 	ldw	r6,-60(fp)
   1caa4:	000a8780 	call	a878 <memcpy>
      ptr   += n;
   1caa8:	e0fffd17 	ldw	r3,-12(fp)
   1caac:	e0bff117 	ldw	r2,-60(fp)
   1cab0:	1885883a 	add	r2,r3,r2
   1cab4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1cab8:	e0fffe17 	ldw	r3,-8(fp)
   1cabc:	e0bff117 	ldw	r2,-60(fp)
   1cac0:	1885c83a 	sub	r2,r3,r2
   1cac4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cac8:	e0fff317 	ldw	r3,-52(fp)
   1cacc:	e0bff117 	ldw	r2,-60(fp)
   1cad0:	1885883a 	add	r2,r3,r2
   1cad4:	10c1ffcc 	andi	r3,r2,2047
   1cad8:	e0bffc17 	ldw	r2,-16(fp)
   1cadc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1cae0:	e0bffe17 	ldw	r2,-8(fp)
   1cae4:	00bfc616 	blt	zero,r2,1ca00 <__alt_mem_Flash_flash_data+0xf401ca00>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cae8:	0005303a 	rdctl	r2,status
   1caec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1caf0:	e0fff717 	ldw	r3,-36(fp)
   1caf4:	00bfff84 	movi	r2,-2
   1caf8:	1884703a 	and	r2,r3,r2
   1cafc:	1001703a 	wrctl	status,r2
  
  return context;
   1cb00:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1cb04:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1cb08:	e0bffc17 	ldw	r2,-16(fp)
   1cb0c:	10800817 	ldw	r2,32(r2)
   1cb10:	10c00094 	ori	r3,r2,2
   1cb14:	e0bffc17 	ldw	r2,-16(fp)
   1cb18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cb1c:	e0bffc17 	ldw	r2,-16(fp)
   1cb20:	10800017 	ldw	r2,0(r2)
   1cb24:	10800104 	addi	r2,r2,4
   1cb28:	1007883a 	mov	r3,r2
   1cb2c:	e0bffc17 	ldw	r2,-16(fp)
   1cb30:	10800817 	ldw	r2,32(r2)
   1cb34:	18800035 	stwio	r2,0(r3)
   1cb38:	e0bff417 	ldw	r2,-48(fp)
   1cb3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb40:	e0bff817 	ldw	r2,-32(fp)
   1cb44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1cb48:	e0bffe17 	ldw	r2,-8(fp)
   1cb4c:	00802e0e 	bge	zero,r2,1cc08 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1cb50:	e0bfff17 	ldw	r2,-4(fp)
   1cb54:	1090000c 	andi	r2,r2,16384
   1cb58:	10000126 	beq	r2,zero,1cb60 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1cb5c:	00002c06 	br	1cc10 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1cb60:	008000b4 	movhi	r2,2
   1cb64:	1090ba44 	addi	r2,r2,17129
   1cb68:	10800003 	ldbu	r2,0(r2)
   1cb6c:	10803fcc 	andi	r2,r2,255
   1cb70:	10800058 	cmpnei	r2,r2,1
   1cb74:	1000161e 	bne	r2,zero,1cbd0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1cb78:	e0bffc17 	ldw	r2,-16(fp)
   1cb7c:	10800c17 	ldw	r2,48(r2)
   1cb80:	e0bff915 	stw	r2,-28(fp)
   1cb84:	00800184 	movi	r2,6
   1cb88:	e0bffa0d 	sth	r2,-24(fp)
   1cb8c:	00bfe0c4 	movi	r2,-125
   1cb90:	e0bffa85 	stb	r2,-22(fp)
   1cb94:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1cb98:	008000b4 	movhi	r2,2
   1cb9c:	1090ba44 	addi	r2,r2,17129
   1cba0:	10800003 	ldbu	r2,0(r2)
   1cba4:	10803fcc 	andi	r2,r2,255
   1cba8:	10001326 	beq	r2,zero,1cbf8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1cbac:	e17ffa0b 	ldhu	r5,-24(fp)
   1cbb0:	e1bffa83 	ldbu	r6,-22(fp)
   1cbb4:	e0fffb0b 	ldhu	r3,-20(fp)
   1cbb8:	e0bffb84 	addi	r2,fp,-18
   1cbbc:	d8800015 	stw	r2,0(sp)
   1cbc0:	e13ff917 	ldw	r4,-28(fp)
   1cbc4:	180f883a 	mov	r7,r3
   1cbc8:	0015d840 	call	15d84 <OSFlagPend>
   1cbcc:	00000a06 	br	1cbf8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1cbd0:	0001883a 	nop
   1cbd4:	e0bffc17 	ldw	r2,-16(fp)
   1cbd8:	10c01017 	ldw	r3,64(r2)
   1cbdc:	e0bff017 	ldw	r2,-64(fp)
   1cbe0:	1880051e 	bne	r3,r2,1cbf8 <altera_avalon_jtag_uart_write+0x250>
   1cbe4:	e0bffc17 	ldw	r2,-16(fp)
   1cbe8:	10c00917 	ldw	r3,36(r2)
   1cbec:	e0bffc17 	ldw	r2,-16(fp)
   1cbf0:	10800117 	ldw	r2,4(r2)
   1cbf4:	18bff736 	bltu	r3,r2,1cbd4 <__alt_mem_Flash_flash_data+0xf401cbd4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1cbf8:	e0bffc17 	ldw	r2,-16(fp)
   1cbfc:	10800917 	ldw	r2,36(r2)
   1cc00:	10000126 	beq	r2,zero,1cc08 <altera_avalon_jtag_uart_write+0x260>
         break;
   1cc04:	00000206 	br	1cc10 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1cc08:	e0bffe17 	ldw	r2,-8(fp)
   1cc0c:	00bf7b16 	blt	zero,r2,1c9fc <__alt_mem_Flash_flash_data+0xf401c9fc>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1cc10:	e0bffc17 	ldw	r2,-16(fp)
   1cc14:	10800b17 	ldw	r2,44(r2)
   1cc18:	1009883a 	mov	r4,r2
   1cc1c:	00199880 	call	19988 <OSSemPost>

  if (ptr != start)
   1cc20:	e0fffd17 	ldw	r3,-12(fp)
   1cc24:	e0bff217 	ldw	r2,-56(fp)
   1cc28:	18800426 	beq	r3,r2,1cc3c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1cc2c:	e0fffd17 	ldw	r3,-12(fp)
   1cc30:	e0bff217 	ldw	r2,-56(fp)
   1cc34:	1885c83a 	sub	r2,r3,r2
   1cc38:	00000606 	br	1cc54 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1cc3c:	e0bfff17 	ldw	r2,-4(fp)
   1cc40:	1090000c 	andi	r2,r2,16384
   1cc44:	10000226 	beq	r2,zero,1cc50 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1cc48:	00bffd44 	movi	r2,-11
   1cc4c:	00000106 	br	1cc54 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1cc50:	00bffec4 	movi	r2,-5
}
   1cc54:	e037883a 	mov	sp,fp
   1cc58:	dfc00117 	ldw	ra,4(sp)
   1cc5c:	df000017 	ldw	fp,0(sp)
   1cc60:	dec00204 	addi	sp,sp,8
   1cc64:	f800283a 	ret

0001cc68 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1cc68:	defff904 	addi	sp,sp,-28
   1cc6c:	dfc00615 	stw	ra,24(sp)
   1cc70:	df000515 	stw	fp,20(sp)
   1cc74:	df000504 	addi	fp,sp,20
   1cc78:	e13ffe15 	stw	r4,-8(fp)
   1cc7c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1cc80:	0007883a 	mov	r3,zero
   1cc84:	e0bffe17 	ldw	r2,-8(fp)
   1cc88:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1cc8c:	e0bffe17 	ldw	r2,-8(fp)
   1cc90:	10800104 	addi	r2,r2,4
   1cc94:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cc98:	0005303a 	rdctl	r2,status
   1cc9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cca0:	e0fffc17 	ldw	r3,-16(fp)
   1cca4:	00bfff84 	movi	r2,-2
   1cca8:	1884703a 	and	r2,r3,r2
   1ccac:	1001703a 	wrctl	status,r2
  
  return context;
   1ccb0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1ccb4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1ccb8:	001ece40 	call	1ece4 <alt_tick>
   1ccbc:	e0bffb17 	ldw	r2,-20(fp)
   1ccc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ccc4:	e0bffd17 	ldw	r2,-12(fp)
   1ccc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1cccc:	e037883a 	mov	sp,fp
   1ccd0:	dfc00117 	ldw	ra,4(sp)
   1ccd4:	df000017 	ldw	fp,0(sp)
   1ccd8:	dec00204 	addi	sp,sp,8
   1ccdc:	f800283a 	ret

0001cce0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1cce0:	defff904 	addi	sp,sp,-28
   1cce4:	dfc00615 	stw	ra,24(sp)
   1cce8:	df000515 	stw	fp,20(sp)
   1ccec:	df000504 	addi	fp,sp,20
   1ccf0:	e13ffc15 	stw	r4,-16(fp)
   1ccf4:	e17ffd15 	stw	r5,-12(fp)
   1ccf8:	e1bffe15 	stw	r6,-8(fp)
   1ccfc:	e1ffff15 	stw	r7,-4(fp)
   1cd00:	e0bfff17 	ldw	r2,-4(fp)
   1cd04:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1cd08:	008000b4 	movhi	r2,2
   1cd0c:	1090cf04 	addi	r2,r2,17212
   1cd10:	10800017 	ldw	r2,0(r2)
   1cd14:	1000041e 	bne	r2,zero,1cd28 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1cd18:	008000b4 	movhi	r2,2
   1cd1c:	1090cf04 	addi	r2,r2,17212
   1cd20:	e0fffb17 	ldw	r3,-20(fp)
   1cd24:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1cd28:	e0bffc17 	ldw	r2,-16(fp)
   1cd2c:	10800104 	addi	r2,r2,4
   1cd30:	00c001c4 	movi	r3,7
   1cd34:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1cd38:	e13ffe17 	ldw	r4,-8(fp)
   1cd3c:	e17ffc17 	ldw	r5,-16(fp)
   1cd40:	018000b4 	movhi	r6,2
   1cd44:	31b31a04 	addi	r6,r6,-13208
   1cd48:	001e8280 	call	1e828 <alt_irq_register>
#endif  
}
   1cd4c:	e037883a 	mov	sp,fp
   1cd50:	dfc00117 	ldw	ra,4(sp)
   1cd54:	df000017 	ldw	fp,0(sp)
   1cd58:	dec00204 	addi	sp,sp,8
   1cd5c:	f800283a 	ret

0001cd60 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1cd60:	defffc04 	addi	sp,sp,-16
   1cd64:	df000315 	stw	fp,12(sp)
   1cd68:	df000304 	addi	fp,sp,12
   1cd6c:	e13ffe15 	stw	r4,-8(fp)
   1cd70:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1cd74:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1cd78:	e0bfff17 	ldw	r2,-4(fp)
   1cd7c:	1000061e 	bne	r2,zero,1cd98 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1cd80:	e0bffe17 	ldw	r2,-8(fp)
   1cd84:	1007883a 	mov	r3,r2
   1cd88:	e0bffd03 	ldbu	r2,-12(fp)
   1cd8c:	1884b03a 	or	r2,r3,r2
   1cd90:	e0bffd05 	stb	r2,-12(fp)
   1cd94:	00000806 	br	1cdb8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1cd98:	e0bffe17 	ldw	r2,-8(fp)
   1cd9c:	1007883a 	mov	r3,r2
   1cda0:	e0bffd03 	ldbu	r2,-12(fp)
   1cda4:	1884b03a 	or	r2,r3,r2
   1cda8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1cdac:	e0bffd03 	ldbu	r2,-12(fp)
   1cdb0:	10801014 	ori	r2,r2,64
   1cdb4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1cdb8:	e0fffd03 	ldbu	r3,-12(fp)
   1cdbc:	00bfe004 	movi	r2,-128
   1cdc0:	1884b03a 	or	r2,r3,r2
}
   1cdc4:	e037883a 	mov	sp,fp
   1cdc8:	df000017 	ldw	fp,0(sp)
   1cdcc:	dec00104 	addi	sp,sp,4
   1cdd0:	f800283a 	ret

0001cdd4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1cdd4:	defffd04 	addi	sp,sp,-12
   1cdd8:	df000215 	stw	fp,8(sp)
   1cddc:	df000204 	addi	fp,sp,8
   1cde0:	e13ffe15 	stw	r4,-8(fp)
   1cde4:	2805883a 	mov	r2,r5
   1cde8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1cdec:	e0bffe17 	ldw	r2,-8(fp)
   1cdf0:	10800a17 	ldw	r2,40(r2)
   1cdf4:	1007883a 	mov	r3,r2
   1cdf8:	e0bfff03 	ldbu	r2,-4(fp)
   1cdfc:	18800025 	stbio	r2,0(r3)
}
   1ce00:	e037883a 	mov	sp,fp
   1ce04:	df000017 	ldw	fp,0(sp)
   1ce08:	dec00104 	addi	sp,sp,4
   1ce0c:	f800283a 	ret

0001ce10 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1ce10:	defffe04 	addi	sp,sp,-8
   1ce14:	df000115 	stw	fp,4(sp)
   1ce18:	df000104 	addi	fp,sp,4
   1ce1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1ce20:	e0bfff17 	ldw	r2,-4(fp)
   1ce24:	10800a17 	ldw	r2,40(r2)
   1ce28:	1007883a 	mov	r3,r2
   1ce2c:	00800044 	movi	r2,1
   1ce30:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1ce34:	e037883a 	mov	sp,fp
   1ce38:	df000017 	ldw	fp,0(sp)
   1ce3c:	dec00104 	addi	sp,sp,4
   1ce40:	f800283a 	ret

0001ce44 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1ce44:	defffc04 	addi	sp,sp,-16
   1ce48:	dfc00315 	stw	ra,12(sp)
   1ce4c:	df000215 	stw	fp,8(sp)
   1ce50:	df000204 	addi	fp,sp,8
   1ce54:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1ce58:	e13fff17 	ldw	r4,-4(fp)
   1ce5c:	014000b4 	movhi	r5,2
   1ce60:	29489d04 	addi	r5,r5,8820
   1ce64:	001e6300 	call	1e630 <alt_find_dev>
   1ce68:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ce6c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ce70:	e037883a 	mov	sp,fp
   1ce74:	dfc00117 	ldw	ra,4(sp)
   1ce78:	df000017 	ldw	fp,0(sp)
   1ce7c:	dec00204 	addi	sp,sp,8
   1ce80:	f800283a 	ret

0001ce84 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1ce84:	defffb04 	addi	sp,sp,-20
   1ce88:	df000415 	stw	fp,16(sp)
   1ce8c:	df000404 	addi	fp,sp,16
   1ce90:	e13ffd15 	stw	r4,-12(fp)
   1ce94:	e17ffe15 	stw	r5,-8(fp)
   1ce98:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1ce9c:	e03ffc15 	stw	zero,-16(fp)
   1cea0:	00000f06 	br	1cee0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1cea4:	e0bffd17 	ldw	r2,-12(fp)
   1cea8:	10800a17 	ldw	r2,40(r2)
   1ceac:	10800044 	addi	r2,r2,1
   1ceb0:	1009883a 	mov	r4,r2
   1ceb4:	e0fffe17 	ldw	r3,-8(fp)
   1ceb8:	e0bffc17 	ldw	r2,-16(fp)
   1cebc:	1885883a 	add	r2,r3,r2
   1cec0:	10800003 	ldbu	r2,0(r2)
   1cec4:	10803fcc 	andi	r2,r2,255
   1cec8:	1080201c 	xori	r2,r2,128
   1cecc:	10bfe004 	addi	r2,r2,-128
   1ced0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1ced4:	e0bffc17 	ldw	r2,-16(fp)
   1ced8:	10800044 	addi	r2,r2,1
   1cedc:	e0bffc15 	stw	r2,-16(fp)
   1cee0:	e0fffc17 	ldw	r3,-16(fp)
   1cee4:	e0bfff17 	ldw	r2,-4(fp)
   1cee8:	18bfee36 	bltu	r3,r2,1cea4 <__alt_mem_Flash_flash_data+0xf401cea4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1ceec:	e037883a 	mov	sp,fp
   1cef0:	df000017 	ldw	fp,0(sp)
   1cef4:	dec00104 	addi	sp,sp,4
   1cef8:	f800283a 	ret

0001cefc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1cefc:	defffd04 	addi	sp,sp,-12
   1cf00:	df000215 	stw	fp,8(sp)
   1cf04:	df000204 	addi	fp,sp,8
   1cf08:	e13ffe15 	stw	r4,-8(fp)
   1cf0c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1cf10:	00000d06 	br	1cf48 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1cf14:	e0bffe17 	ldw	r2,-8(fp)
   1cf18:	10800a17 	ldw	r2,40(r2)
   1cf1c:	10800044 	addi	r2,r2,1
   1cf20:	1007883a 	mov	r3,r2
   1cf24:	e0bfff17 	ldw	r2,-4(fp)
   1cf28:	10800003 	ldbu	r2,0(r2)
   1cf2c:	10803fcc 	andi	r2,r2,255
   1cf30:	1080201c 	xori	r2,r2,128
   1cf34:	10bfe004 	addi	r2,r2,-128
   1cf38:	18800025 	stbio	r2,0(r3)
		++ptr;
   1cf3c:	e0bfff17 	ldw	r2,-4(fp)
   1cf40:	10800044 	addi	r2,r2,1
   1cf44:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1cf48:	e0bfff17 	ldw	r2,-4(fp)
   1cf4c:	10800003 	ldbu	r2,0(r2)
   1cf50:	10803fcc 	andi	r2,r2,255
   1cf54:	1080201c 	xori	r2,r2,128
   1cf58:	10bfe004 	addi	r2,r2,-128
   1cf5c:	103fed1e 	bne	r2,zero,1cf14 <__alt_mem_Flash_flash_data+0xf401cf14>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1cf60:	e037883a 	mov	sp,fp
   1cf64:	df000017 	ldw	fp,0(sp)
   1cf68:	dec00104 	addi	sp,sp,4
   1cf6c:	f800283a 	ret

0001cf70 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1cf70:	defffb04 	addi	sp,sp,-20
   1cf74:	dfc00415 	stw	ra,16(sp)
   1cf78:	df000315 	stw	fp,12(sp)
   1cf7c:	df000304 	addi	fp,sp,12
   1cf80:	e13ffd15 	stw	r4,-12(fp)
   1cf84:	e17ffe15 	stw	r5,-8(fp)
   1cf88:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1cf8c:	e0bffd17 	ldw	r2,-12(fp)
   1cf90:	10c00017 	ldw	r3,0(r2)
   1cf94:	e0bfff17 	ldw	r2,-4(fp)
   1cf98:	1809883a 	mov	r4,r3
   1cf9c:	e17ffe17 	ldw	r5,-8(fp)
   1cfa0:	100d883a 	mov	r6,r2
   1cfa4:	001ce840 	call	1ce84 <alt_up_character_lcd_write>
	return 0;
   1cfa8:	0005883a 	mov	r2,zero
}
   1cfac:	e037883a 	mov	sp,fp
   1cfb0:	dfc00117 	ldw	ra,4(sp)
   1cfb4:	df000017 	ldw	fp,0(sp)
   1cfb8:	dec00204 	addi	sp,sp,8
   1cfbc:	f800283a 	ret

0001cfc0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1cfc0:	defffa04 	addi	sp,sp,-24
   1cfc4:	dfc00515 	stw	ra,20(sp)
   1cfc8:	df000415 	stw	fp,16(sp)
   1cfcc:	df000404 	addi	fp,sp,16
   1cfd0:	e13ffd15 	stw	r4,-12(fp)
   1cfd4:	e17ffe15 	stw	r5,-8(fp)
   1cfd8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1cfdc:	e0bffe17 	ldw	r2,-8(fp)
   1cfe0:	10800a28 	cmpgeui	r2,r2,40
   1cfe4:	1000031e 	bne	r2,zero,1cff4 <alt_up_character_lcd_set_cursor_pos+0x34>
   1cfe8:	e0bfff17 	ldw	r2,-4(fp)
   1cfec:	108000b0 	cmpltui	r2,r2,2
   1cff0:	1000021e 	bne	r2,zero,1cffc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1cff4:	00bfffc4 	movi	r2,-1
   1cff8:	00000906 	br	1d020 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1cffc:	e13ffe17 	ldw	r4,-8(fp)
   1d000:	e17fff17 	ldw	r5,-4(fp)
   1d004:	001cd600 	call	1cd60 <get_DDRAM_addr>
   1d008:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d00c:	e0bffc03 	ldbu	r2,-16(fp)
   1d010:	e13ffd17 	ldw	r4,-12(fp)
   1d014:	100b883a 	mov	r5,r2
   1d018:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
	return 0;
   1d01c:	0005883a 	mov	r2,zero
}
   1d020:	e037883a 	mov	sp,fp
   1d024:	dfc00117 	ldw	ra,4(sp)
   1d028:	df000017 	ldw	fp,0(sp)
   1d02c:	dec00204 	addi	sp,sp,8
   1d030:	f800283a 	ret

0001d034 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d034:	defffb04 	addi	sp,sp,-20
   1d038:	dfc00415 	stw	ra,16(sp)
   1d03c:	df000315 	stw	fp,12(sp)
   1d040:	df000304 	addi	fp,sp,12
   1d044:	e13ffe15 	stw	r4,-8(fp)
   1d048:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d04c:	e0bfff17 	ldw	r2,-4(fp)
   1d050:	1000011e 	bne	r2,zero,1d058 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1d054:	00001406 	br	1d0a8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d058:	e0bfff17 	ldw	r2,-4(fp)
   1d05c:	0080020e 	bge	zero,r2,1d068 <alt_up_character_lcd_shift_cursor+0x34>
   1d060:	00800504 	movi	r2,20
   1d064:	00000106 	br	1d06c <alt_up_character_lcd_shift_cursor+0x38>
   1d068:	00800404 	movi	r2,16
   1d06c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d070:	e0bfff17 	ldw	r2,-4(fp)
   1d074:	1000010e 	bge	r2,zero,1d07c <alt_up_character_lcd_shift_cursor+0x48>
   1d078:	0085c83a 	sub	r2,zero,r2
   1d07c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d080:	00000406 	br	1d094 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d084:	e0bffd43 	ldbu	r2,-11(fp)
   1d088:	e13ffe17 	ldw	r4,-8(fp)
   1d08c:	100b883a 	mov	r5,r2
   1d090:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d094:	e0bffd03 	ldbu	r2,-12(fp)
   1d098:	10ffffc4 	addi	r3,r2,-1
   1d09c:	e0fffd05 	stb	r3,-12(fp)
   1d0a0:	10803fcc 	andi	r2,r2,255
   1d0a4:	103ff71e 	bne	r2,zero,1d084 <__alt_mem_Flash_flash_data+0xf401d084>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d0a8:	e037883a 	mov	sp,fp
   1d0ac:	dfc00117 	ldw	ra,4(sp)
   1d0b0:	df000017 	ldw	fp,0(sp)
   1d0b4:	dec00204 	addi	sp,sp,8
   1d0b8:	f800283a 	ret

0001d0bc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d0bc:	defffb04 	addi	sp,sp,-20
   1d0c0:	dfc00415 	stw	ra,16(sp)
   1d0c4:	df000315 	stw	fp,12(sp)
   1d0c8:	df000304 	addi	fp,sp,12
   1d0cc:	e13ffe15 	stw	r4,-8(fp)
   1d0d0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d0d4:	e0bfff17 	ldw	r2,-4(fp)
   1d0d8:	1000011e 	bne	r2,zero,1d0e0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1d0dc:	00001406 	br	1d130 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d0e0:	e0bfff17 	ldw	r2,-4(fp)
   1d0e4:	0080020e 	bge	zero,r2,1d0f0 <alt_up_character_lcd_shift_display+0x34>
   1d0e8:	00800704 	movi	r2,28
   1d0ec:	00000106 	br	1d0f4 <alt_up_character_lcd_shift_display+0x38>
   1d0f0:	00800604 	movi	r2,24
   1d0f4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d0f8:	e0bfff17 	ldw	r2,-4(fp)
   1d0fc:	1000010e 	bge	r2,zero,1d104 <alt_up_character_lcd_shift_display+0x48>
   1d100:	0085c83a 	sub	r2,zero,r2
   1d104:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d108:	00000406 	br	1d11c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d10c:	e0bffd43 	ldbu	r2,-11(fp)
   1d110:	e13ffe17 	ldw	r4,-8(fp)
   1d114:	100b883a 	mov	r5,r2
   1d118:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d11c:	e0bffd03 	ldbu	r2,-12(fp)
   1d120:	10ffffc4 	addi	r3,r2,-1
   1d124:	e0fffd05 	stb	r3,-12(fp)
   1d128:	10803fcc 	andi	r2,r2,255
   1d12c:	103ff71e 	bne	r2,zero,1d10c <__alt_mem_Flash_flash_data+0xf401d10c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1d130:	e037883a 	mov	sp,fp
   1d134:	dfc00117 	ldw	ra,4(sp)
   1d138:	df000017 	ldw	fp,0(sp)
   1d13c:	dec00204 	addi	sp,sp,8
   1d140:	f800283a 	ret

0001d144 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1d144:	defffa04 	addi	sp,sp,-24
   1d148:	dfc00515 	stw	ra,20(sp)
   1d14c:	df000415 	stw	fp,16(sp)
   1d150:	df000404 	addi	fp,sp,16
   1d154:	e13ffd15 	stw	r4,-12(fp)
   1d158:	e17ffe15 	stw	r5,-8(fp)
   1d15c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d160:	e0bffe17 	ldw	r2,-8(fp)
   1d164:	10800a28 	cmpgeui	r2,r2,40
   1d168:	1000031e 	bne	r2,zero,1d178 <alt_up_character_lcd_erase_pos+0x34>
   1d16c:	e0bfff17 	ldw	r2,-4(fp)
   1d170:	108000b0 	cmpltui	r2,r2,2
   1d174:	1000021e 	bne	r2,zero,1d180 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1d178:	00bfffc4 	movi	r2,-1
   1d17c:	00000f06 	br	1d1bc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d180:	e13ffe17 	ldw	r4,-8(fp)
   1d184:	e17fff17 	ldw	r5,-4(fp)
   1d188:	001cd600 	call	1cd60 <get_DDRAM_addr>
   1d18c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d190:	e0bffc03 	ldbu	r2,-16(fp)
   1d194:	e13ffd17 	ldw	r4,-12(fp)
   1d198:	100b883a 	mov	r5,r2
   1d19c:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1d1a0:	e0bffd17 	ldw	r2,-12(fp)
   1d1a4:	10800a17 	ldw	r2,40(r2)
   1d1a8:	10800044 	addi	r2,r2,1
   1d1ac:	1007883a 	mov	r3,r2
   1d1b0:	00800084 	movi	r2,2
   1d1b4:	18800025 	stbio	r2,0(r3)
	return 0;
   1d1b8:	0005883a 	mov	r2,zero
}
   1d1bc:	e037883a 	mov	sp,fp
   1d1c0:	dfc00117 	ldw	ra,4(sp)
   1d1c4:	df000017 	ldw	fp,0(sp)
   1d1c8:	dec00204 	addi	sp,sp,8
   1d1cc:	f800283a 	ret

0001d1d0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1d1d0:	defffd04 	addi	sp,sp,-12
   1d1d4:	dfc00215 	stw	ra,8(sp)
   1d1d8:	df000115 	stw	fp,4(sp)
   1d1dc:	df000104 	addi	fp,sp,4
   1d1e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1d1e4:	e13fff17 	ldw	r4,-4(fp)
   1d1e8:	01400304 	movi	r5,12
   1d1ec:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
}
   1d1f0:	e037883a 	mov	sp,fp
   1d1f4:	dfc00117 	ldw	ra,4(sp)
   1d1f8:	df000017 	ldw	fp,0(sp)
   1d1fc:	dec00204 	addi	sp,sp,8
   1d200:	f800283a 	ret

0001d204 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1d204:	defffd04 	addi	sp,sp,-12
   1d208:	dfc00215 	stw	ra,8(sp)
   1d20c:	df000115 	stw	fp,4(sp)
   1d210:	df000104 	addi	fp,sp,4
   1d214:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1d218:	e13fff17 	ldw	r4,-4(fp)
   1d21c:	014003c4 	movi	r5,15
   1d220:	001cdd40 	call	1cdd4 <alt_up_character_lcd_send_cmd>
}
   1d224:	e037883a 	mov	sp,fp
   1d228:	dfc00117 	ldw	ra,4(sp)
   1d22c:	df000017 	ldw	fp,0(sp)
   1d230:	dec00204 	addi	sp,sp,8
   1d234:	f800283a 	ret

0001d238 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1d238:	defffd04 	addi	sp,sp,-12
   1d23c:	df000215 	stw	fp,8(sp)
   1d240:	df000204 	addi	fp,sp,8
   1d244:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d248:	e0bfff17 	ldw	r2,-4(fp)
   1d24c:	10800a17 	ldw	r2,40(r2)
   1d250:	10800104 	addi	r2,r2,4
   1d254:	10800037 	ldwio	r2,0(r2)
   1d258:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1d25c:	e0bffe17 	ldw	r2,-8(fp)
   1d260:	10800054 	ori	r2,r2,1
   1d264:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d268:	e0bfff17 	ldw	r2,-4(fp)
   1d26c:	10800a17 	ldw	r2,40(r2)
   1d270:	10800104 	addi	r2,r2,4
   1d274:	1007883a 	mov	r3,r2
   1d278:	e0bffe17 	ldw	r2,-8(fp)
   1d27c:	18800035 	stwio	r2,0(r3)
}
   1d280:	e037883a 	mov	sp,fp
   1d284:	df000017 	ldw	fp,0(sp)
   1d288:	dec00104 	addi	sp,sp,4
   1d28c:	f800283a 	ret

0001d290 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1d290:	defffd04 	addi	sp,sp,-12
   1d294:	df000215 	stw	fp,8(sp)
   1d298:	df000204 	addi	fp,sp,8
   1d29c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d2a0:	e0bfff17 	ldw	r2,-4(fp)
   1d2a4:	10800a17 	ldw	r2,40(r2)
   1d2a8:	10800104 	addi	r2,r2,4
   1d2ac:	10800037 	ldwio	r2,0(r2)
   1d2b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1d2b4:	e0fffe17 	ldw	r3,-8(fp)
   1d2b8:	00bfff84 	movi	r2,-2
   1d2bc:	1884703a 	and	r2,r3,r2
   1d2c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1d2c4:	e0bfff17 	ldw	r2,-4(fp)
   1d2c8:	10800a17 	ldw	r2,40(r2)
   1d2cc:	10800104 	addi	r2,r2,4
   1d2d0:	1007883a 	mov	r3,r2
   1d2d4:	e0bffe17 	ldw	r2,-8(fp)
   1d2d8:	18800035 	stwio	r2,0(r3)
}
   1d2dc:	e037883a 	mov	sp,fp
   1d2e0:	df000017 	ldw	fp,0(sp)
   1d2e4:	dec00104 	addi	sp,sp,4
   1d2e8:	f800283a 	ret

0001d2ec <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1d2ec:	defffd04 	addi	sp,sp,-12
   1d2f0:	df000215 	stw	fp,8(sp)
   1d2f4:	df000204 	addi	fp,sp,8
   1d2f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d2fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1d300:	e0bfff17 	ldw	r2,-4(fp)
   1d304:	10800a17 	ldw	r2,40(r2)
   1d308:	10800084 	addi	r2,r2,2
   1d30c:	1080002b 	ldhuio	r2,0(r2)
   1d310:	10bfffcc 	andi	r2,r2,65535
   1d314:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1d318:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d31c:	e037883a 	mov	sp,fp
   1d320:	df000017 	ldw	fp,0(sp)
   1d324:	dec00104 	addi	sp,sp,4
   1d328:	f800283a 	ret

0001d32c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1d32c:	defffd04 	addi	sp,sp,-12
   1d330:	df000215 	stw	fp,8(sp)
   1d334:	df000204 	addi	fp,sp,8
   1d338:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1d33c:	e0bfff17 	ldw	r2,-4(fp)
   1d340:	10800a17 	ldw	r2,40(r2)
   1d344:	10800104 	addi	r2,r2,4
   1d348:	10800037 	ldwio	r2,0(r2)
   1d34c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1d350:	e0bffe17 	ldw	r2,-8(fp)
   1d354:	1004d43a 	srli	r2,r2,16
}
   1d358:	e037883a 	mov	sp,fp
   1d35c:	df000017 	ldw	fp,0(sp)
   1d360:	dec00104 	addi	sp,sp,4
   1d364:	f800283a 	ret

0001d368 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1d368:	defffd04 	addi	sp,sp,-12
   1d36c:	df000215 	stw	fp,8(sp)
   1d370:	df000204 	addi	fp,sp,8
   1d374:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1d378:	e0bfff17 	ldw	r2,-4(fp)
   1d37c:	1080800c 	andi	r2,r2,512
   1d380:	1004d27a 	srli	r2,r2,9
   1d384:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1d388:	e0bffe17 	ldw	r2,-8(fp)
   1d38c:	10000226 	beq	r2,zero,1d398 <alt_up_irda_check_parity+0x30>
   1d390:	00bfffc4 	movi	r2,-1
   1d394:	00000106 	br	1d39c <alt_up_irda_check_parity+0x34>
   1d398:	0005883a 	mov	r2,zero
}
   1d39c:	e037883a 	mov	sp,fp
   1d3a0:	df000017 	ldw	fp,0(sp)
   1d3a4:	dec00104 	addi	sp,sp,4
   1d3a8:	f800283a 	ret

0001d3ac <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1d3ac:	defffd04 	addi	sp,sp,-12
   1d3b0:	df000215 	stw	fp,8(sp)
   1d3b4:	df000204 	addi	fp,sp,8
   1d3b8:	e13ffe15 	stw	r4,-8(fp)
   1d3bc:	2805883a 	mov	r2,r5
   1d3c0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1d3c4:	e0bffe17 	ldw	r2,-8(fp)
   1d3c8:	10800a17 	ldw	r2,40(r2)
   1d3cc:	1007883a 	mov	r3,r2
   1d3d0:	e0bfff03 	ldbu	r2,-4(fp)
   1d3d4:	18800035 	stwio	r2,0(r3)
	return 0;
   1d3d8:	0005883a 	mov	r2,zero
}
   1d3dc:	e037883a 	mov	sp,fp
   1d3e0:	df000017 	ldw	fp,0(sp)
   1d3e4:	dec00104 	addi	sp,sp,4
   1d3e8:	f800283a 	ret

0001d3ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1d3ec:	defffa04 	addi	sp,sp,-24
   1d3f0:	dfc00515 	stw	ra,20(sp)
   1d3f4:	df000415 	stw	fp,16(sp)
   1d3f8:	df000404 	addi	fp,sp,16
   1d3fc:	e13ffd15 	stw	r4,-12(fp)
   1d400:	e17ffe15 	stw	r5,-8(fp)
   1d404:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1d408:	e0bffd17 	ldw	r2,-12(fp)
   1d40c:	10800a17 	ldw	r2,40(r2)
   1d410:	10800037 	ldwio	r2,0(r2)
   1d414:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1d418:	e0bffc17 	ldw	r2,-16(fp)
   1d41c:	1007883a 	mov	r3,r2
   1d420:	e0bffe17 	ldw	r2,-8(fp)
   1d424:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1d428:	e13ffc17 	ldw	r4,-16(fp)
   1d42c:	001d3680 	call	1d368 <alt_up_irda_check_parity>
   1d430:	1007883a 	mov	r3,r2
   1d434:	e0bfff17 	ldw	r2,-4(fp)
   1d438:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1d43c:	e0bffc17 	ldw	r2,-16(fp)
   1d440:	10a0000c 	andi	r2,r2,32768
   1d444:	1004d3fa 	srli	r2,r2,15
   1d448:	10bfffc4 	addi	r2,r2,-1
}
   1d44c:	e037883a 	mov	sp,fp
   1d450:	dfc00117 	ldw	ra,4(sp)
   1d454:	df000017 	ldw	fp,0(sp)
   1d458:	dec00204 	addi	sp,sp,8
   1d45c:	f800283a 	ret

0001d460 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d460:	defff804 	addi	sp,sp,-32
   1d464:	dfc00715 	stw	ra,28(sp)
   1d468:	df000615 	stw	fp,24(sp)
   1d46c:	df000604 	addi	fp,sp,24
   1d470:	e13ffd15 	stw	r4,-12(fp)
   1d474:	e17ffe15 	stw	r5,-8(fp)
   1d478:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d47c:	e0bffd17 	ldw	r2,-12(fp)
   1d480:	10800017 	ldw	r2,0(r2)
   1d484:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d488:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d48c:	00000e06 	br	1d4c8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1d490:	e0bffe17 	ldw	r2,-8(fp)
   1d494:	10c00044 	addi	r3,r2,1
   1d498:	e0fffe15 	stw	r3,-8(fp)
   1d49c:	e0fffc04 	addi	r3,fp,-16
   1d4a0:	e13ffb17 	ldw	r4,-20(fp)
   1d4a4:	100b883a 	mov	r5,r2
   1d4a8:	180d883a 	mov	r6,r3
   1d4ac:	001d3ec0 	call	1d3ec <alt_up_irda_read_data>
   1d4b0:	1000041e 	bne	r2,zero,1d4c4 <alt_up_irda_read_fd+0x64>
			count++;
   1d4b4:	e0bffa17 	ldw	r2,-24(fp)
   1d4b8:	10800044 	addi	r2,r2,1
   1d4bc:	e0bffa15 	stw	r2,-24(fp)
   1d4c0:	00000106 	br	1d4c8 <alt_up_irda_read_fd+0x68>
		else
			break;
   1d4c4:	00000406 	br	1d4d8 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d4c8:	e0bfff17 	ldw	r2,-4(fp)
   1d4cc:	10ffffc4 	addi	r3,r2,-1
   1d4d0:	e0ffff15 	stw	r3,-4(fp)
   1d4d4:	103fee1e 	bne	r2,zero,1d490 <__alt_mem_Flash_flash_data+0xf401d490>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1d4d8:	e0bffa17 	ldw	r2,-24(fp)
}
   1d4dc:	e037883a 	mov	sp,fp
   1d4e0:	dfc00117 	ldw	ra,4(sp)
   1d4e4:	df000017 	ldw	fp,0(sp)
   1d4e8:	dec00204 	addi	sp,sp,8
   1d4ec:	f800283a 	ret

0001d4f0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d4f0:	defff904 	addi	sp,sp,-28
   1d4f4:	dfc00615 	stw	ra,24(sp)
   1d4f8:	df000515 	stw	fp,20(sp)
   1d4fc:	df000504 	addi	fp,sp,20
   1d500:	e13ffd15 	stw	r4,-12(fp)
   1d504:	e17ffe15 	stw	r5,-8(fp)
   1d508:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d50c:	e0bffd17 	ldw	r2,-12(fp)
   1d510:	10800017 	ldw	r2,0(r2)
   1d514:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d518:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d51c:	00000e06 	br	1d558 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1d520:	e0bffe17 	ldw	r2,-8(fp)
   1d524:	10c00044 	addi	r3,r2,1
   1d528:	e0fffe15 	stw	r3,-8(fp)
   1d52c:	10800003 	ldbu	r2,0(r2)
   1d530:	10803fcc 	andi	r2,r2,255
   1d534:	e13ffc17 	ldw	r4,-16(fp)
   1d538:	100b883a 	mov	r5,r2
   1d53c:	001d3ac0 	call	1d3ac <alt_up_irda_write_data>
   1d540:	1000041e 	bne	r2,zero,1d554 <alt_up_irda_write_fd+0x64>
			count++;
   1d544:	e0bffb17 	ldw	r2,-20(fp)
   1d548:	10800044 	addi	r2,r2,1
   1d54c:	e0bffb15 	stw	r2,-20(fp)
   1d550:	00000106 	br	1d558 <alt_up_irda_write_fd+0x68>
		else
			break;
   1d554:	00000406 	br	1d568 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d558:	e0bfff17 	ldw	r2,-4(fp)
   1d55c:	10ffffc4 	addi	r3,r2,-1
   1d560:	e0ffff15 	stw	r3,-4(fp)
   1d564:	103fee1e 	bne	r2,zero,1d520 <__alt_mem_Flash_flash_data+0xf401d520>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1d568:	e0bffb17 	ldw	r2,-20(fp)
}
   1d56c:	e037883a 	mov	sp,fp
   1d570:	dfc00117 	ldw	ra,4(sp)
   1d574:	df000017 	ldw	fp,0(sp)
   1d578:	dec00204 	addi	sp,sp,8
   1d57c:	f800283a 	ret

0001d580 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1d580:	defffc04 	addi	sp,sp,-16
   1d584:	dfc00315 	stw	ra,12(sp)
   1d588:	df000215 	stw	fp,8(sp)
   1d58c:	df000204 	addi	fp,sp,8
   1d590:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1d594:	e13fff17 	ldw	r4,-4(fp)
   1d598:	014000b4 	movhi	r5,2
   1d59c:	29489d04 	addi	r5,r5,8820
   1d5a0:	001e6300 	call	1e630 <alt_find_dev>
   1d5a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d5a8:	e0bffe17 	ldw	r2,-8(fp)
}
   1d5ac:	e037883a 	mov	sp,fp
   1d5b0:	dfc00117 	ldw	ra,4(sp)
   1d5b4:	df000017 	ldw	fp,0(sp)
   1d5b8:	dec00204 	addi	sp,sp,8
   1d5bc:	f800283a 	ret

0001d5c0 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1d5c0:	defffc04 	addi	sp,sp,-16
   1d5c4:	dfc00315 	stw	ra,12(sp)
   1d5c8:	df000215 	stw	fp,8(sp)
   1d5cc:	df000204 	addi	fp,sp,8
   1d5d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1d5d4:	e13fff17 	ldw	r4,-4(fp)
   1d5d8:	014000b4 	movhi	r5,2
   1d5dc:	29489d04 	addi	r5,r5,8820
   1d5e0:	001e6300 	call	1e630 <alt_find_dev>
   1d5e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d5e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1d5ec:	e037883a 	mov	sp,fp
   1d5f0:	dfc00117 	ldw	ra,4(sp)
   1d5f4:	df000017 	ldw	fp,0(sp)
   1d5f8:	dec00204 	addi	sp,sp,8
   1d5fc:	f800283a 	ret

0001d600 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1d600:	defffd04 	addi	sp,sp,-12
   1d604:	df000215 	stw	fp,8(sp)
   1d608:	df000204 	addi	fp,sp,8
   1d60c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1d610:	e0bfff17 	ldw	r2,-4(fp)
   1d614:	1080400c 	andi	r2,r2,256
   1d618:	1004d23a 	srli	r2,r2,8
   1d61c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1d620:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d624:	e037883a 	mov	sp,fp
   1d628:	df000017 	ldw	fp,0(sp)
   1d62c:	dec00104 	addi	sp,sp,4
   1d630:	f800283a 	ret

0001d634 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1d634:	defffd04 	addi	sp,sp,-12
   1d638:	df000215 	stw	fp,8(sp)
   1d63c:	df000204 	addi	fp,sp,8
   1d640:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1d644:	e0bfff17 	ldw	r2,-4(fp)
   1d648:	1080004c 	andi	r2,r2,1
   1d64c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d650:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d654:	e037883a 	mov	sp,fp
   1d658:	df000017 	ldw	fp,0(sp)
   1d65c:	dec00104 	addi	sp,sp,4
   1d660:	f800283a 	ret

0001d664 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1d664:	defffd04 	addi	sp,sp,-12
   1d668:	df000215 	stw	fp,8(sp)
   1d66c:	df000204 	addi	fp,sp,8
   1d670:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1d674:	e0bfff17 	ldw	r2,-4(fp)
   1d678:	1081000c 	andi	r2,r2,1024
   1d67c:	1004d2ba 	srli	r2,r2,10
   1d680:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d684:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d688:	e037883a 	mov	sp,fp
   1d68c:	df000017 	ldw	fp,0(sp)
   1d690:	dec00104 	addi	sp,sp,4
   1d694:	f800283a 	ret

0001d698 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1d698:	defffd04 	addi	sp,sp,-12
   1d69c:	df000215 	stw	fp,8(sp)
   1d6a0:	df000204 	addi	fp,sp,8
   1d6a4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1d6a8:	e0bfff17 	ldw	r2,-4(fp)
   1d6ac:	1004d43a 	srli	r2,r2,16
   1d6b0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1d6b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d6b8:	e037883a 	mov	sp,fp
   1d6bc:	df000017 	ldw	fp,0(sp)
   1d6c0:	dec00104 	addi	sp,sp,4
   1d6c4:	f800283a 	ret

0001d6c8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1d6c8:	defffd04 	addi	sp,sp,-12
   1d6cc:	df000215 	stw	fp,8(sp)
   1d6d0:	df000204 	addi	fp,sp,8
   1d6d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1d6d8:	e0bfff17 	ldw	r2,-4(fp)
   1d6dc:	10a0000c 	andi	r2,r2,32768
   1d6e0:	1004d3fa 	srli	r2,r2,15
   1d6e4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1d6e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d6ec:	e037883a 	mov	sp,fp
   1d6f0:	df000017 	ldw	fp,0(sp)
   1d6f4:	dec00104 	addi	sp,sp,4
   1d6f8:	f800283a 	ret

0001d6fc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1d6fc:	defffd04 	addi	sp,sp,-12
   1d700:	df000215 	stw	fp,8(sp)
   1d704:	df000204 	addi	fp,sp,8
   1d708:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1d70c:	e0bfff17 	ldw	r2,-4(fp)
   1d710:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1d714:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d718:	e037883a 	mov	sp,fp
   1d71c:	df000017 	ldw	fp,0(sp)
   1d720:	dec00104 	addi	sp,sp,4
   1d724:	f800283a 	ret

0001d728 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1d728:	defffb04 	addi	sp,sp,-20
   1d72c:	dfc00415 	stw	ra,16(sp)
   1d730:	df000315 	stw	fp,12(sp)
   1d734:	df000304 	addi	fp,sp,12
   1d738:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1d73c:	e13fff17 	ldw	r4,-4(fp)
   1d740:	01403fc4 	movi	r5,255
   1d744:	001d9840 	call	1d984 <alt_up_ps2_write_data_byte_with_ack>
   1d748:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1d74c:	e0bffd17 	ldw	r2,-12(fp)
   1d750:	1000211e 	bne	r2,zero,1d7d8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d754:	e0bffe04 	addi	r2,fp,-8
   1d758:	e13fff17 	ldw	r4,-4(fp)
   1d75c:	100b883a 	mov	r5,r2
   1d760:	001d9e80 	call	1d9e8 <alt_up_ps2_read_data_byte_timeout>
   1d764:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1d768:	e0bffd17 	ldw	r2,-12(fp)
   1d76c:	10001a1e 	bne	r2,zero,1d7d8 <alt_up_ps2_init+0xb0>
   1d770:	e0bffe03 	ldbu	r2,-8(fp)
   1d774:	10803fcc 	andi	r2,r2,255
   1d778:	10802a98 	cmpnei	r2,r2,170
   1d77c:	1000161e 	bne	r2,zero,1d7d8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d780:	e0bffe04 	addi	r2,fp,-8
   1d784:	e13fff17 	ldw	r4,-4(fp)
   1d788:	100b883a 	mov	r5,r2
   1d78c:	001d9e80 	call	1d9e8 <alt_up_ps2_read_data_byte_timeout>
   1d790:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1d794:	e0bffd17 	ldw	r2,-12(fp)
   1d798:	10bfe318 	cmpnei	r2,r2,-116
   1d79c:	1000041e 	bne	r2,zero,1d7b0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1d7a0:	e0bfff17 	ldw	r2,-4(fp)
   1d7a4:	00c00044 	movi	r3,1
   1d7a8:	10c00d15 	stw	r3,52(r2)
   1d7ac:	00000a06 	br	1d7d8 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1d7b0:	e0bffd17 	ldw	r2,-12(fp)
   1d7b4:	1000081e 	bne	r2,zero,1d7d8 <alt_up_ps2_init+0xb0>
   1d7b8:	e0bffe03 	ldbu	r2,-8(fp)
   1d7bc:	10803fcc 	andi	r2,r2,255
   1d7c0:	1000051e 	bne	r2,zero,1d7d8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1d7c4:	e0bfff17 	ldw	r2,-4(fp)
   1d7c8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1d7cc:	e13fff17 	ldw	r4,-4(fp)
   1d7d0:	01403d04 	movi	r5,244
   1d7d4:	001d8a00 	call	1d8a0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1d7d8:	e037883a 	mov	sp,fp
   1d7dc:	dfc00117 	ldw	ra,4(sp)
   1d7e0:	df000017 	ldw	fp,0(sp)
   1d7e4:	dec00204 	addi	sp,sp,8
   1d7e8:	f800283a 	ret

0001d7ec <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d7ec:	defffd04 	addi	sp,sp,-12
   1d7f0:	df000215 	stw	fp,8(sp)
   1d7f4:	df000204 	addi	fp,sp,8
   1d7f8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d7fc:	e0bfff17 	ldw	r2,-4(fp)
   1d800:	10800a17 	ldw	r2,40(r2)
   1d804:	10800104 	addi	r2,r2,4
   1d808:	10800037 	ldwio	r2,0(r2)
   1d80c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d810:	e0bffe17 	ldw	r2,-8(fp)
   1d814:	10800054 	ori	r2,r2,1
   1d818:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d81c:	e0bfff17 	ldw	r2,-4(fp)
   1d820:	10800a17 	ldw	r2,40(r2)
   1d824:	10800104 	addi	r2,r2,4
   1d828:	1007883a 	mov	r3,r2
   1d82c:	e0bffe17 	ldw	r2,-8(fp)
   1d830:	18800035 	stwio	r2,0(r3)
}
   1d834:	e037883a 	mov	sp,fp
   1d838:	df000017 	ldw	fp,0(sp)
   1d83c:	dec00104 	addi	sp,sp,4
   1d840:	f800283a 	ret

0001d844 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d844:	defffd04 	addi	sp,sp,-12
   1d848:	df000215 	stw	fp,8(sp)
   1d84c:	df000204 	addi	fp,sp,8
   1d850:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d854:	e0bfff17 	ldw	r2,-4(fp)
   1d858:	10800a17 	ldw	r2,40(r2)
   1d85c:	10800104 	addi	r2,r2,4
   1d860:	10800037 	ldwio	r2,0(r2)
   1d864:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d868:	e0fffe17 	ldw	r3,-8(fp)
   1d86c:	00bfff84 	movi	r2,-2
   1d870:	1884703a 	and	r2,r3,r2
   1d874:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d878:	e0bfff17 	ldw	r2,-4(fp)
   1d87c:	10800a17 	ldw	r2,40(r2)
   1d880:	10800104 	addi	r2,r2,4
   1d884:	1007883a 	mov	r3,r2
   1d888:	e0bffe17 	ldw	r2,-8(fp)
   1d88c:	18800035 	stwio	r2,0(r3)
}
   1d890:	e037883a 	mov	sp,fp
   1d894:	df000017 	ldw	fp,0(sp)
   1d898:	dec00104 	addi	sp,sp,4
   1d89c:	f800283a 	ret

0001d8a0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d8a0:	defffb04 	addi	sp,sp,-20
   1d8a4:	dfc00415 	stw	ra,16(sp)
   1d8a8:	df000315 	stw	fp,12(sp)
   1d8ac:	df000304 	addi	fp,sp,12
   1d8b0:	e13ffe15 	stw	r4,-8(fp)
   1d8b4:	2805883a 	mov	r2,r5
   1d8b8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1d8bc:	e0bffe17 	ldw	r2,-8(fp)
   1d8c0:	10800a17 	ldw	r2,40(r2)
   1d8c4:	1007883a 	mov	r3,r2
   1d8c8:	e0bfff03 	ldbu	r2,-4(fp)
   1d8cc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1d8d0:	e0bffe17 	ldw	r2,-8(fp)
   1d8d4:	10800a17 	ldw	r2,40(r2)
   1d8d8:	10800104 	addi	r2,r2,4
   1d8dc:	10800037 	ldwio	r2,0(r2)
   1d8e0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1d8e4:	e13ffd17 	ldw	r4,-12(fp)
   1d8e8:	001d6640 	call	1d664 <read_CE_bit>
   1d8ec:	10803fcc 	andi	r2,r2,255
   1d8f0:	10000226 	beq	r2,zero,1d8fc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1d8f4:	00bffec4 	movi	r2,-5
   1d8f8:	00000106 	br	1d900 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1d8fc:	0005883a 	mov	r2,zero
}
   1d900:	e037883a 	mov	sp,fp
   1d904:	dfc00117 	ldw	ra,4(sp)
   1d908:	df000017 	ldw	fp,0(sp)
   1d90c:	dec00204 	addi	sp,sp,8
   1d910:	f800283a 	ret

0001d914 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1d914:	defffc04 	addi	sp,sp,-16
   1d918:	dfc00315 	stw	ra,12(sp)
   1d91c:	df000215 	stw	fp,8(sp)
   1d920:	df000204 	addi	fp,sp,8
   1d924:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1d928:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1d92c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1d930:	e0bffe44 	addi	r2,fp,-7
   1d934:	e13fff17 	ldw	r4,-4(fp)
   1d938:	100b883a 	mov	r5,r2
   1d93c:	001d9e80 	call	1d9e8 <alt_up_ps2_read_data_byte_timeout>
   1d940:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1d944:	e0bffe03 	ldbu	r2,-8(fp)
   1d948:	1000061e 	bne	r2,zero,1d964 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1d94c:	e0bffe43 	ldbu	r2,-7(fp)
   1d950:	10803fcc 	andi	r2,r2,255
   1d954:	10803e98 	cmpnei	r2,r2,250
   1d958:	1000041e 	bne	r2,zero,1d96c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1d95c:	0005883a 	mov	r2,zero
   1d960:	00000306 	br	1d970 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1d964:	e0bffe03 	ldbu	r2,-8(fp)
   1d968:	00000106 	br	1d970 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1d96c:	003ff006 	br	1d930 <__alt_mem_Flash_flash_data+0xf401d930>
	return -ETIMEDOUT;
}
   1d970:	e037883a 	mov	sp,fp
   1d974:	dfc00117 	ldw	ra,4(sp)
   1d978:	df000017 	ldw	fp,0(sp)
   1d97c:	dec00204 	addi	sp,sp,8
   1d980:	f800283a 	ret

0001d984 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d984:	defffa04 	addi	sp,sp,-24
   1d988:	dfc00515 	stw	ra,20(sp)
   1d98c:	df000415 	stw	fp,16(sp)
   1d990:	df000404 	addi	fp,sp,16
   1d994:	e13ffe15 	stw	r4,-8(fp)
   1d998:	2805883a 	mov	r2,r5
   1d99c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1d9a0:	e0bfff03 	ldbu	r2,-4(fp)
   1d9a4:	e13ffe17 	ldw	r4,-8(fp)
   1d9a8:	100b883a 	mov	r5,r2
   1d9ac:	001d8a00 	call	1d8a0 <alt_up_ps2_write_data_byte>
   1d9b0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1d9b4:	e0bffc17 	ldw	r2,-16(fp)
   1d9b8:	10000226 	beq	r2,zero,1d9c4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1d9bc:	e0bffc17 	ldw	r2,-16(fp)
   1d9c0:	00000406 	br	1d9d4 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1d9c4:	e13ffe17 	ldw	r4,-8(fp)
   1d9c8:	001d9140 	call	1d914 <alt_up_ps2_wait_for_ack>
   1d9cc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1d9d0:	e0bffd17 	ldw	r2,-12(fp)
}
   1d9d4:	e037883a 	mov	sp,fp
   1d9d8:	dfc00117 	ldw	ra,4(sp)
   1d9dc:	df000017 	ldw	fp,0(sp)
   1d9e0:	dec00204 	addi	sp,sp,8
   1d9e4:	f800283a 	ret

0001d9e8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1d9e8:	defffa04 	addi	sp,sp,-24
   1d9ec:	dfc00515 	stw	ra,20(sp)
   1d9f0:	df000415 	stw	fp,16(sp)
   1d9f4:	df000404 	addi	fp,sp,16
   1d9f8:	e13ffe15 	stw	r4,-8(fp)
   1d9fc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1da00:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1da04:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1da08:	e0bffc17 	ldw	r2,-16(fp)
   1da0c:	10800044 	addi	r2,r2,1
   1da10:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1da14:	e0bffe17 	ldw	r2,-8(fp)
   1da18:	10800a17 	ldw	r2,40(r2)
   1da1c:	10800037 	ldwio	r2,0(r2)
   1da20:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1da24:	e13ffd17 	ldw	r4,-12(fp)
   1da28:	001d6c80 	call	1d6c8 <read_data_valid>
   1da2c:	10803fcc 	andi	r2,r2,255
   1da30:	10000726 	beq	r2,zero,1da50 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1da34:	e13ffd17 	ldw	r4,-12(fp)
   1da38:	001d6fc0 	call	1d6fc <read_data_byte>
   1da3c:	1007883a 	mov	r3,r2
   1da40:	e0bfff17 	ldw	r2,-4(fp)
   1da44:	10c00005 	stb	r3,0(r2)
			return 0;
   1da48:	0005883a 	mov	r2,zero
   1da4c:	00000a06 	br	1da78 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1da50:	e0bffe17 	ldw	r2,-8(fp)
   1da54:	10800c17 	ldw	r2,48(r2)
   1da58:	10000626 	beq	r2,zero,1da74 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1da5c:	e0bffe17 	ldw	r2,-8(fp)
   1da60:	10c00c17 	ldw	r3,48(r2)
   1da64:	e0bffc17 	ldw	r2,-16(fp)
   1da68:	1880022e 	bgeu	r3,r2,1da74 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1da6c:	00bfe304 	movi	r2,-116
   1da70:	00000106 	br	1da78 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1da74:	003fe406 	br	1da08 <__alt_mem_Flash_flash_data+0xf401da08>
}
   1da78:	e037883a 	mov	sp,fp
   1da7c:	dfc00117 	ldw	ra,4(sp)
   1da80:	df000017 	ldw	fp,0(sp)
   1da84:	dec00204 	addi	sp,sp,8
   1da88:	f800283a 	ret

0001da8c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1da8c:	defffb04 	addi	sp,sp,-20
   1da90:	dfc00415 	stw	ra,16(sp)
   1da94:	df000315 	stw	fp,12(sp)
   1da98:	df000304 	addi	fp,sp,12
   1da9c:	e13ffe15 	stw	r4,-8(fp)
   1daa0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1daa4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1daa8:	e0bffe17 	ldw	r2,-8(fp)
   1daac:	10800a17 	ldw	r2,40(r2)
   1dab0:	10800037 	ldwio	r2,0(r2)
   1dab4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1dab8:	e13ffd17 	ldw	r4,-12(fp)
   1dabc:	001d6c80 	call	1d6c8 <read_data_valid>
   1dac0:	10803fcc 	andi	r2,r2,255
   1dac4:	10000726 	beq	r2,zero,1dae4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1dac8:	e13ffd17 	ldw	r4,-12(fp)
   1dacc:	001d6fc0 	call	1d6fc <read_data_byte>
   1dad0:	1007883a 	mov	r3,r2
   1dad4:	e0bfff17 	ldw	r2,-4(fp)
   1dad8:	10c00005 	stb	r3,0(r2)
		return 0;
   1dadc:	0005883a 	mov	r2,zero
   1dae0:	00000106 	br	1dae8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1dae4:	00bfffc4 	movi	r2,-1
}
   1dae8:	e037883a 	mov	sp,fp
   1daec:	dfc00117 	ldw	ra,4(sp)
   1daf0:	df000017 	ldw	fp,0(sp)
   1daf4:	dec00204 	addi	sp,sp,8
   1daf8:	f800283a 	ret

0001dafc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1dafc:	defffb04 	addi	sp,sp,-20
   1db00:	dfc00415 	stw	ra,16(sp)
   1db04:	df000315 	stw	fp,12(sp)
   1db08:	df000304 	addi	fp,sp,12
   1db0c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1db10:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1db14:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1db18:	e0bfff17 	ldw	r2,-4(fp)
   1db1c:	10800a17 	ldw	r2,40(r2)
   1db20:	10800037 	ldwio	r2,0(r2)
   1db24:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1db28:	e13ffe17 	ldw	r4,-8(fp)
   1db2c:	001d6980 	call	1d698 <read_num_bytes_available>
   1db30:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1db34:	e0bffd0b 	ldhu	r2,-12(fp)
   1db38:	103ff71e 	bne	r2,zero,1db18 <__alt_mem_Flash_flash_data+0xf401db18>
}
   1db3c:	e037883a 	mov	sp,fp
   1db40:	dfc00117 	ldw	ra,4(sp)
   1db44:	df000017 	ldw	fp,0(sp)
   1db48:	dec00204 	addi	sp,sp,8
   1db4c:	f800283a 	ret

0001db50 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1db50:	defff804 	addi	sp,sp,-32
   1db54:	dfc00715 	stw	ra,28(sp)
   1db58:	df000615 	stw	fp,24(sp)
   1db5c:	df000604 	addi	fp,sp,24
   1db60:	e13ffd15 	stw	r4,-12(fp)
   1db64:	e17ffe15 	stw	r5,-8(fp)
   1db68:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1db6c:	e0bffd17 	ldw	r2,-12(fp)
   1db70:	10800017 	ldw	r2,0(r2)
   1db74:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1db78:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1db7c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1db80:	e0fffc17 	ldw	r3,-16(fp)
   1db84:	e0bfff17 	ldw	r2,-4(fp)
   1db88:	18bffd16 	blt	r3,r2,1db80 <__alt_mem_Flash_flash_data+0xf401db80>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1db8c:	e0bffe17 	ldw	r2,-8(fp)
   1db90:	10c00044 	addi	r3,r2,1
   1db94:	e0fffe15 	stw	r3,-8(fp)
   1db98:	e13ffa17 	ldw	r4,-24(fp)
   1db9c:	100b883a 	mov	r5,r2
   1dba0:	001d9e80 	call	1d9e8 <alt_up_ps2_read_data_byte_timeout>
   1dba4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1dba8:	e0bffb17 	ldw	r2,-20(fp)
   1dbac:	10000226 	beq	r2,zero,1dbb8 <alt_up_ps2_read_fd+0x68>
			return count;
   1dbb0:	e0bffc17 	ldw	r2,-16(fp)
   1dbb4:	00000406 	br	1dbc8 <alt_up_ps2_read_fd+0x78>
		count++;
   1dbb8:	e0bffc17 	ldw	r2,-16(fp)
   1dbbc:	10800044 	addi	r2,r2,1
   1dbc0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1dbc4:	e0bffc17 	ldw	r2,-16(fp)
}
   1dbc8:	e037883a 	mov	sp,fp
   1dbcc:	dfc00117 	ldw	ra,4(sp)
   1dbd0:	df000017 	ldw	fp,0(sp)
   1dbd4:	dec00204 	addi	sp,sp,8
   1dbd8:	f800283a 	ret

0001dbdc <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1dbdc:	defff804 	addi	sp,sp,-32
   1dbe0:	dfc00715 	stw	ra,28(sp)
   1dbe4:	df000615 	stw	fp,24(sp)
   1dbe8:	df000604 	addi	fp,sp,24
   1dbec:	e13ffd15 	stw	r4,-12(fp)
   1dbf0:	e17ffe15 	stw	r5,-8(fp)
   1dbf4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1dbf8:	e0bffd17 	ldw	r2,-12(fp)
   1dbfc:	10800017 	ldw	r2,0(r2)
   1dc00:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1dc04:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1dc08:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1dc0c:	00001006 	br	1dc50 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1dc10:	e0bffe17 	ldw	r2,-8(fp)
   1dc14:	10c00044 	addi	r3,r2,1
   1dc18:	e0fffe15 	stw	r3,-8(fp)
   1dc1c:	10800003 	ldbu	r2,0(r2)
   1dc20:	10803fcc 	andi	r2,r2,255
   1dc24:	e13ffb17 	ldw	r4,-20(fp)
   1dc28:	100b883a 	mov	r5,r2
   1dc2c:	001d8a00 	call	1d8a0 <alt_up_ps2_write_data_byte>
   1dc30:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1dc34:	e0bffc17 	ldw	r2,-16(fp)
   1dc38:	10000226 	beq	r2,zero,1dc44 <alt_up_ps2_write_fd+0x68>
			return count;
   1dc3c:	e0bffa17 	ldw	r2,-24(fp)
   1dc40:	00000706 	br	1dc60 <alt_up_ps2_write_fd+0x84>
		count++;
   1dc44:	e0bffa17 	ldw	r2,-24(fp)
   1dc48:	10800044 	addi	r2,r2,1
   1dc4c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1dc50:	e0fffa17 	ldw	r3,-24(fp)
   1dc54:	e0bfff17 	ldw	r2,-4(fp)
   1dc58:	18bfed16 	blt	r3,r2,1dc10 <__alt_mem_Flash_flash_data+0xf401dc10>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1dc5c:	e0bffa17 	ldw	r2,-24(fp)
}
   1dc60:	e037883a 	mov	sp,fp
   1dc64:	dfc00117 	ldw	ra,4(sp)
   1dc68:	df000017 	ldw	fp,0(sp)
   1dc6c:	dec00204 	addi	sp,sp,8
   1dc70:	f800283a 	ret

0001dc74 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1dc74:	defffc04 	addi	sp,sp,-16
   1dc78:	dfc00315 	stw	ra,12(sp)
   1dc7c:	df000215 	stw	fp,8(sp)
   1dc80:	df000204 	addi	fp,sp,8
   1dc84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1dc88:	e13fff17 	ldw	r4,-4(fp)
   1dc8c:	014000b4 	movhi	r5,2
   1dc90:	29489d04 	addi	r5,r5,8820
   1dc94:	001e6300 	call	1e630 <alt_find_dev>
   1dc98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1dc9c:	e0bffe17 	ldw	r2,-8(fp)
}
   1dca0:	e037883a 	mov	sp,fp
   1dca4:	dfc00117 	ldw	ra,4(sp)
   1dca8:	df000017 	ldw	fp,0(sp)
   1dcac:	dec00204 	addi	sp,sp,8
   1dcb0:	f800283a 	ret

0001dcb4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1dcb4:	defffd04 	addi	sp,sp,-12
   1dcb8:	df000215 	stw	fp,8(sp)
   1dcbc:	df000204 	addi	fp,sp,8
   1dcc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1dcc4:	e0bfff17 	ldw	r2,-4(fp)
   1dcc8:	10800a17 	ldw	r2,40(r2)
   1dccc:	10800104 	addi	r2,r2,4
   1dcd0:	10800037 	ldwio	r2,0(r2)
   1dcd4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1dcd8:	e0bffe17 	ldw	r2,-8(fp)
   1dcdc:	10800054 	ori	r2,r2,1
   1dce0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1dce4:	e0bfff17 	ldw	r2,-4(fp)
   1dce8:	10800a17 	ldw	r2,40(r2)
   1dcec:	10800104 	addi	r2,r2,4
   1dcf0:	1007883a 	mov	r3,r2
   1dcf4:	e0bffe17 	ldw	r2,-8(fp)
   1dcf8:	18800035 	stwio	r2,0(r3)
}
   1dcfc:	e037883a 	mov	sp,fp
   1dd00:	df000017 	ldw	fp,0(sp)
   1dd04:	dec00104 	addi	sp,sp,4
   1dd08:	f800283a 	ret

0001dd0c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1dd0c:	defffd04 	addi	sp,sp,-12
   1dd10:	df000215 	stw	fp,8(sp)
   1dd14:	df000204 	addi	fp,sp,8
   1dd18:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1dd1c:	e0bfff17 	ldw	r2,-4(fp)
   1dd20:	10800a17 	ldw	r2,40(r2)
   1dd24:	10800104 	addi	r2,r2,4
   1dd28:	10800037 	ldwio	r2,0(r2)
   1dd2c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1dd30:	e0fffe17 	ldw	r3,-8(fp)
   1dd34:	00bfff84 	movi	r2,-2
   1dd38:	1884703a 	and	r2,r3,r2
   1dd3c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1dd40:	e0bfff17 	ldw	r2,-4(fp)
   1dd44:	10800a17 	ldw	r2,40(r2)
   1dd48:	10800104 	addi	r2,r2,4
   1dd4c:	1007883a 	mov	r3,r2
   1dd50:	e0bffe17 	ldw	r2,-8(fp)
   1dd54:	18800035 	stwio	r2,0(r3)
}
   1dd58:	e037883a 	mov	sp,fp
   1dd5c:	df000017 	ldw	fp,0(sp)
   1dd60:	dec00104 	addi	sp,sp,4
   1dd64:	f800283a 	ret

0001dd68 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1dd68:	defffd04 	addi	sp,sp,-12
   1dd6c:	df000215 	stw	fp,8(sp)
   1dd70:	df000204 	addi	fp,sp,8
   1dd74:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1dd78:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1dd7c:	e0bfff17 	ldw	r2,-4(fp)
   1dd80:	10800a17 	ldw	r2,40(r2)
   1dd84:	10800084 	addi	r2,r2,2
   1dd88:	1080002b 	ldhuio	r2,0(r2)
   1dd8c:	10bfffcc 	andi	r2,r2,65535
   1dd90:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1dd94:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1dd98:	e037883a 	mov	sp,fp
   1dd9c:	df000017 	ldw	fp,0(sp)
   1dda0:	dec00104 	addi	sp,sp,4
   1dda4:	f800283a 	ret

0001dda8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1dda8:	defffd04 	addi	sp,sp,-12
   1ddac:	df000215 	stw	fp,8(sp)
   1ddb0:	df000204 	addi	fp,sp,8
   1ddb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ddb8:	e0bfff17 	ldw	r2,-4(fp)
   1ddbc:	10800a17 	ldw	r2,40(r2)
   1ddc0:	10800104 	addi	r2,r2,4
   1ddc4:	10800037 	ldwio	r2,0(r2)
   1ddc8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1ddcc:	e0bffe17 	ldw	r2,-8(fp)
   1ddd0:	1004d43a 	srli	r2,r2,16
}
   1ddd4:	e037883a 	mov	sp,fp
   1ddd8:	df000017 	ldw	fp,0(sp)
   1dddc:	dec00104 	addi	sp,sp,4
   1dde0:	f800283a 	ret

0001dde4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1dde4:	defffd04 	addi	sp,sp,-12
   1dde8:	df000215 	stw	fp,8(sp)
   1ddec:	df000204 	addi	fp,sp,8
   1ddf0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1ddf4:	e0bfff17 	ldw	r2,-4(fp)
   1ddf8:	1080800c 	andi	r2,r2,512
   1ddfc:	1004d27a 	srli	r2,r2,9
   1de00:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1de04:	e0bffe17 	ldw	r2,-8(fp)
   1de08:	10000226 	beq	r2,zero,1de14 <alt_up_rs232_check_parity+0x30>
   1de0c:	00bfffc4 	movi	r2,-1
   1de10:	00000106 	br	1de18 <alt_up_rs232_check_parity+0x34>
   1de14:	0005883a 	mov	r2,zero
}
   1de18:	e037883a 	mov	sp,fp
   1de1c:	df000017 	ldw	fp,0(sp)
   1de20:	dec00104 	addi	sp,sp,4
   1de24:	f800283a 	ret

0001de28 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1de28:	defffd04 	addi	sp,sp,-12
   1de2c:	df000215 	stw	fp,8(sp)
   1de30:	df000204 	addi	fp,sp,8
   1de34:	e13ffe15 	stw	r4,-8(fp)
   1de38:	2805883a 	mov	r2,r5
   1de3c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1de40:	e0bffe17 	ldw	r2,-8(fp)
   1de44:	10800a17 	ldw	r2,40(r2)
   1de48:	1007883a 	mov	r3,r2
   1de4c:	e0bfff03 	ldbu	r2,-4(fp)
   1de50:	18800035 	stwio	r2,0(r3)
	return 0;
   1de54:	0005883a 	mov	r2,zero
}
   1de58:	e037883a 	mov	sp,fp
   1de5c:	df000017 	ldw	fp,0(sp)
   1de60:	dec00104 	addi	sp,sp,4
   1de64:	f800283a 	ret

0001de68 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1de68:	defffa04 	addi	sp,sp,-24
   1de6c:	dfc00515 	stw	ra,20(sp)
   1de70:	df000415 	stw	fp,16(sp)
   1de74:	df000404 	addi	fp,sp,16
   1de78:	e13ffd15 	stw	r4,-12(fp)
   1de7c:	e17ffe15 	stw	r5,-8(fp)
   1de80:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1de84:	e0bffd17 	ldw	r2,-12(fp)
   1de88:	10800a17 	ldw	r2,40(r2)
   1de8c:	10800037 	ldwio	r2,0(r2)
   1de90:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1de94:	e0bffc17 	ldw	r2,-16(fp)
   1de98:	1007883a 	mov	r3,r2
   1de9c:	e0bffe17 	ldw	r2,-8(fp)
   1dea0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1dea4:	e13ffc17 	ldw	r4,-16(fp)
   1dea8:	001dde40 	call	1dde4 <alt_up_rs232_check_parity>
   1deac:	1007883a 	mov	r3,r2
   1deb0:	e0bfff17 	ldw	r2,-4(fp)
   1deb4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1deb8:	e0bffc17 	ldw	r2,-16(fp)
   1debc:	10a0000c 	andi	r2,r2,32768
   1dec0:	1004d3fa 	srli	r2,r2,15
   1dec4:	10bfffc4 	addi	r2,r2,-1
}
   1dec8:	e037883a 	mov	sp,fp
   1decc:	dfc00117 	ldw	ra,4(sp)
   1ded0:	df000017 	ldw	fp,0(sp)
   1ded4:	dec00204 	addi	sp,sp,8
   1ded8:	f800283a 	ret

0001dedc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1dedc:	defff804 	addi	sp,sp,-32
   1dee0:	dfc00715 	stw	ra,28(sp)
   1dee4:	df000615 	stw	fp,24(sp)
   1dee8:	df000604 	addi	fp,sp,24
   1deec:	e13ffd15 	stw	r4,-12(fp)
   1def0:	e17ffe15 	stw	r5,-8(fp)
   1def4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1def8:	e0bffd17 	ldw	r2,-12(fp)
   1defc:	10800017 	ldw	r2,0(r2)
   1df00:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1df04:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1df08:	00000e06 	br	1df44 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1df0c:	e0bffe17 	ldw	r2,-8(fp)
   1df10:	10c00044 	addi	r3,r2,1
   1df14:	e0fffe15 	stw	r3,-8(fp)
   1df18:	e0fffc04 	addi	r3,fp,-16
   1df1c:	e13ffb17 	ldw	r4,-20(fp)
   1df20:	100b883a 	mov	r5,r2
   1df24:	180d883a 	mov	r6,r3
   1df28:	001de680 	call	1de68 <alt_up_rs232_read_data>
   1df2c:	1000041e 	bne	r2,zero,1df40 <alt_up_rs232_read_fd+0x64>
			count++;
   1df30:	e0bffa17 	ldw	r2,-24(fp)
   1df34:	10800044 	addi	r2,r2,1
   1df38:	e0bffa15 	stw	r2,-24(fp)
   1df3c:	00000106 	br	1df44 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1df40:	00000406 	br	1df54 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1df44:	e0bfff17 	ldw	r2,-4(fp)
   1df48:	10ffffc4 	addi	r3,r2,-1
   1df4c:	e0ffff15 	stw	r3,-4(fp)
   1df50:	103fee1e 	bne	r2,zero,1df0c <__alt_mem_Flash_flash_data+0xf401df0c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1df54:	e0bffa17 	ldw	r2,-24(fp)
}
   1df58:	e037883a 	mov	sp,fp
   1df5c:	dfc00117 	ldw	ra,4(sp)
   1df60:	df000017 	ldw	fp,0(sp)
   1df64:	dec00204 	addi	sp,sp,8
   1df68:	f800283a 	ret

0001df6c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1df6c:	defff904 	addi	sp,sp,-28
   1df70:	dfc00615 	stw	ra,24(sp)
   1df74:	df000515 	stw	fp,20(sp)
   1df78:	df000504 	addi	fp,sp,20
   1df7c:	e13ffd15 	stw	r4,-12(fp)
   1df80:	e17ffe15 	stw	r5,-8(fp)
   1df84:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1df88:	e0bffd17 	ldw	r2,-12(fp)
   1df8c:	10800017 	ldw	r2,0(r2)
   1df90:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1df94:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1df98:	00000f06 	br	1dfd8 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1df9c:	e0bffe17 	ldw	r2,-8(fp)
   1dfa0:	10800003 	ldbu	r2,0(r2)
   1dfa4:	10803fcc 	andi	r2,r2,255
   1dfa8:	e13ffc17 	ldw	r4,-16(fp)
   1dfac:	100b883a 	mov	r5,r2
   1dfb0:	001de280 	call	1de28 <alt_up_rs232_write_data>
   1dfb4:	1000071e 	bne	r2,zero,1dfd4 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1dfb8:	e0bffb17 	ldw	r2,-20(fp)
   1dfbc:	10800044 	addi	r2,r2,1
   1dfc0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1dfc4:	e0bffe17 	ldw	r2,-8(fp)
   1dfc8:	10800044 	addi	r2,r2,1
   1dfcc:	e0bffe15 	stw	r2,-8(fp)
   1dfd0:	00000106 	br	1dfd8 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1dfd4:	00000406 	br	1dfe8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1dfd8:	e0bfff17 	ldw	r2,-4(fp)
   1dfdc:	10ffffc4 	addi	r3,r2,-1
   1dfe0:	e0ffff15 	stw	r3,-4(fp)
   1dfe4:	103fed1e 	bne	r2,zero,1df9c <__alt_mem_Flash_flash_data+0xf401df9c>
			ptr++;
		}
		else
			break;
	}
	return count;
   1dfe8:	e0bffb17 	ldw	r2,-20(fp)
}
   1dfec:	e037883a 	mov	sp,fp
   1dff0:	dfc00117 	ldw	ra,4(sp)
   1dff4:	df000017 	ldw	fp,0(sp)
   1dff8:	dec00204 	addi	sp,sp,8
   1dffc:	f800283a 	ret

0001e000 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1e000:	defffc04 	addi	sp,sp,-16
   1e004:	dfc00315 	stw	ra,12(sp)
   1e008:	df000215 	stw	fp,8(sp)
   1e00c:	df000204 	addi	fp,sp,8
   1e010:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1e014:	e13fff17 	ldw	r4,-4(fp)
   1e018:	014000b4 	movhi	r5,2
   1e01c:	29489d04 	addi	r5,r5,8820
   1e020:	001e6300 	call	1e630 <alt_find_dev>
   1e024:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e028:	e0bffe17 	ldw	r2,-8(fp)
}
   1e02c:	e037883a 	mov	sp,fp
   1e030:	dfc00117 	ldw	ra,4(sp)
   1e034:	df000017 	ldw	fp,0(sp)
   1e038:	dec00204 	addi	sp,sp,8
   1e03c:	f800283a 	ret

0001e040 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1e040:	defffc04 	addi	sp,sp,-16
   1e044:	dfc00315 	stw	ra,12(sp)
   1e048:	df000215 	stw	fp,8(sp)
   1e04c:	df000204 	addi	fp,sp,8
   1e050:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1e054:	e0bfff17 	ldw	r2,-4(fp)
   1e058:	10800217 	ldw	r2,8(r2)
   1e05c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1e060:	00000b06 	br	1e090 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1e064:	e13ffe17 	ldw	r4,-8(fp)
   1e068:	014000b4 	movhi	r5,2
   1e06c:	2940f104 	addi	r5,r5,964
   1e070:	000c33c0 	call	c33c <strcmp>
   1e074:	1000031e 	bne	r2,zero,1e084 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1e078:	e0bffe17 	ldw	r2,-8(fp)
   1e07c:	10000005 	stb	zero,0(r2)
			break;
   1e080:	00000906 	br	1e0a8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1e084:	e0bffe17 	ldw	r2,-8(fp)
   1e088:	10800044 	addi	r2,r2,1
   1e08c:	e0bffe15 	stw	r2,-8(fp)
   1e090:	e0bffe17 	ldw	r2,-8(fp)
   1e094:	10800003 	ldbu	r2,0(r2)
   1e098:	10803fcc 	andi	r2,r2,255
   1e09c:	1080201c 	xori	r2,r2,128
   1e0a0:	10bfe004 	addi	r2,r2,-128
   1e0a4:	103fef1e 	bne	r2,zero,1e064 <__alt_mem_Flash_flash_data+0xf401e064>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1e0a8:	0001883a 	nop
}
   1e0ac:	e037883a 	mov	sp,fp
   1e0b0:	dfc00117 	ldw	ra,4(sp)
   1e0b4:	df000017 	ldw	fp,0(sp)
   1e0b8:	dec00204 	addi	sp,sp,8
   1e0bc:	f800283a 	ret

0001e0c0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1e0c0:	defffc04 	addi	sp,sp,-16
   1e0c4:	dfc00315 	stw	ra,12(sp)
   1e0c8:	df000215 	stw	fp,8(sp)
   1e0cc:	df000204 	addi	fp,sp,8
   1e0d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1e0d4:	e13fff17 	ldw	r4,-4(fp)
   1e0d8:	014000b4 	movhi	r5,2
   1e0dc:	29489d04 	addi	r5,r5,8820
   1e0e0:	001e6300 	call	1e630 <alt_find_dev>
   1e0e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e0e8:	e0bffe17 	ldw	r2,-8(fp)
}
   1e0ec:	e037883a 	mov	sp,fp
   1e0f0:	dfc00117 	ldw	ra,4(sp)
   1e0f4:	df000017 	ldw	fp,0(sp)
   1e0f8:	dec00204 	addi	sp,sp,8
   1e0fc:	f800283a 	ret

0001e100 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1e100:	defffa04 	addi	sp,sp,-24
   1e104:	df000515 	stw	fp,20(sp)
   1e108:	df000504 	addi	fp,sp,20
   1e10c:	e13ffc15 	stw	r4,-16(fp)
   1e110:	2805883a 	mov	r2,r5
   1e114:	e1bffe15 	stw	r6,-8(fp)
   1e118:	e1ffff15 	stw	r7,-4(fp)
   1e11c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e120:	e0bffc17 	ldw	r2,-16(fp)
   1e124:	10800c17 	ldw	r2,48(r2)
   1e128:	e0fffe17 	ldw	r3,-8(fp)
   1e12c:	1880042e 	bgeu	r3,r2,1e140 <alt_up_char_buffer_draw+0x40>
   1e130:	e0bffc17 	ldw	r2,-16(fp)
   1e134:	10800d17 	ldw	r2,52(r2)
   1e138:	e0ffff17 	ldw	r3,-4(fp)
   1e13c:	18800236 	bltu	r3,r2,1e148 <alt_up_char_buffer_draw+0x48>
		return -1;
   1e140:	00bfffc4 	movi	r2,-1
   1e144:	00001d06 	br	1e1bc <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1e148:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1e14c:	e0bffc17 	ldw	r2,-16(fp)
   1e150:	10c00f17 	ldw	r3,60(r2)
   1e154:	e0bffe17 	ldw	r2,-8(fp)
   1e158:	1884703a 	and	r2,r3,r2
   1e15c:	e0fffc17 	ldw	r3,-16(fp)
   1e160:	18c00e17 	ldw	r3,56(r3)
   1e164:	10c4983a 	sll	r2,r2,r3
   1e168:	e0fffb17 	ldw	r3,-20(fp)
   1e16c:	1884b03a 	or	r2,r3,r2
   1e170:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1e174:	e0bffc17 	ldw	r2,-16(fp)
   1e178:	10c01117 	ldw	r3,68(r2)
   1e17c:	e0bfff17 	ldw	r2,-4(fp)
   1e180:	1884703a 	and	r2,r3,r2
   1e184:	e0fffc17 	ldw	r3,-16(fp)
   1e188:	18c01017 	ldw	r3,64(r3)
   1e18c:	10c4983a 	sll	r2,r2,r3
   1e190:	e0fffb17 	ldw	r3,-20(fp)
   1e194:	1884b03a 	or	r2,r3,r2
   1e198:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1e19c:	e0bffc17 	ldw	r2,-16(fp)
   1e1a0:	10c00b17 	ldw	r3,44(r2)
   1e1a4:	e0bffb17 	ldw	r2,-20(fp)
   1e1a8:	1885883a 	add	r2,r3,r2
   1e1ac:	1007883a 	mov	r3,r2
   1e1b0:	e0bffd03 	ldbu	r2,-12(fp)
   1e1b4:	18800025 	stbio	r2,0(r3)

	return 0;
   1e1b8:	0005883a 	mov	r2,zero
}
   1e1bc:	e037883a 	mov	sp,fp
   1e1c0:	df000017 	ldw	fp,0(sp)
   1e1c4:	dec00104 	addi	sp,sp,4
   1e1c8:	f800283a 	ret

0001e1cc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1e1cc:	defffa04 	addi	sp,sp,-24
   1e1d0:	df000515 	stw	fp,20(sp)
   1e1d4:	df000504 	addi	fp,sp,20
   1e1d8:	e13ffc15 	stw	r4,-16(fp)
   1e1dc:	e17ffd15 	stw	r5,-12(fp)
   1e1e0:	e1bffe15 	stw	r6,-8(fp)
   1e1e4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1e1e8:	e0bffc17 	ldw	r2,-16(fp)
   1e1ec:	10800c17 	ldw	r2,48(r2)
   1e1f0:	e0fffe17 	ldw	r3,-8(fp)
   1e1f4:	1880042e 	bgeu	r3,r2,1e208 <alt_up_char_buffer_string+0x3c>
   1e1f8:	e0bffc17 	ldw	r2,-16(fp)
   1e1fc:	10800d17 	ldw	r2,52(r2)
   1e200:	e0ffff17 	ldw	r3,-4(fp)
   1e204:	18800236 	bltu	r3,r2,1e210 <alt_up_char_buffer_string+0x44>
		return -1;
   1e208:	00bfffc4 	movi	r2,-1
   1e20c:	00002b06 	br	1e2bc <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1e210:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1e214:	e0bffc17 	ldw	r2,-16(fp)
   1e218:	10801017 	ldw	r2,64(r2)
   1e21c:	1007883a 	mov	r3,r2
   1e220:	e0bfff17 	ldw	r2,-4(fp)
   1e224:	10c6983a 	sll	r3,r2,r3
   1e228:	e0bffe17 	ldw	r2,-8(fp)
   1e22c:	1885883a 	add	r2,r3,r2
   1e230:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1e234:	00001a06 	br	1e2a0 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1e238:	e0bffc17 	ldw	r2,-16(fp)
   1e23c:	10c00b17 	ldw	r3,44(r2)
   1e240:	e0bffb17 	ldw	r2,-20(fp)
   1e244:	1885883a 	add	r2,r3,r2
   1e248:	1007883a 	mov	r3,r2
   1e24c:	e0bffd17 	ldw	r2,-12(fp)
   1e250:	10800003 	ldbu	r2,0(r2)
   1e254:	10803fcc 	andi	r2,r2,255
   1e258:	1080201c 	xori	r2,r2,128
   1e25c:	10bfe004 	addi	r2,r2,-128
   1e260:	18800025 	stbio	r2,0(r3)
		++ptr;
   1e264:	e0bffd17 	ldw	r2,-12(fp)
   1e268:	10800044 	addi	r2,r2,1
   1e26c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1e270:	e0bffe17 	ldw	r2,-8(fp)
   1e274:	10800044 	addi	r2,r2,1
   1e278:	e0bffe15 	stw	r2,-8(fp)
   1e27c:	e0bffc17 	ldw	r2,-16(fp)
   1e280:	10800c17 	ldw	r2,48(r2)
   1e284:	e0fffe17 	ldw	r3,-8(fp)
   1e288:	18800236 	bltu	r3,r2,1e294 <alt_up_char_buffer_string+0xc8>
			return -1;
   1e28c:	00bfffc4 	movi	r2,-1
   1e290:	00000a06 	br	1e2bc <alt_up_char_buffer_string+0xf0>
		++offset;
   1e294:	e0bffb17 	ldw	r2,-20(fp)
   1e298:	10800044 	addi	r2,r2,1
   1e29c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1e2a0:	e0bffd17 	ldw	r2,-12(fp)
   1e2a4:	10800003 	ldbu	r2,0(r2)
   1e2a8:	10803fcc 	andi	r2,r2,255
   1e2ac:	1080201c 	xori	r2,r2,128
   1e2b0:	10bfe004 	addi	r2,r2,-128
   1e2b4:	103fe01e 	bne	r2,zero,1e238 <__alt_mem_Flash_flash_data+0xf401e238>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1e2b8:	0005883a 	mov	r2,zero
}
   1e2bc:	e037883a 	mov	sp,fp
   1e2c0:	df000017 	ldw	fp,0(sp)
   1e2c4:	dec00104 	addi	sp,sp,4
   1e2c8:	f800283a 	ret

0001e2cc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1e2cc:	defffe04 	addi	sp,sp,-8
   1e2d0:	df000115 	stw	fp,4(sp)
   1e2d4:	df000104 	addi	fp,sp,4
   1e2d8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1e2dc:	e0bfff17 	ldw	r2,-4(fp)
   1e2e0:	10800a17 	ldw	r2,40(r2)
   1e2e4:	10800084 	addi	r2,r2,2
   1e2e8:	1007883a 	mov	r3,r2
   1e2ec:	00800044 	movi	r2,1
   1e2f0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1e2f4:	0001883a 	nop
   1e2f8:	e0bfff17 	ldw	r2,-4(fp)
   1e2fc:	10800a17 	ldw	r2,40(r2)
   1e300:	10800084 	addi	r2,r2,2
   1e304:	10800023 	ldbuio	r2,0(r2)
   1e308:	10803fcc 	andi	r2,r2,255
   1e30c:	1080004c 	andi	r2,r2,1
   1e310:	103ff91e 	bne	r2,zero,1e2f8 <__alt_mem_Flash_flash_data+0xf401e2f8>
	return 0;
   1e314:	0005883a 	mov	r2,zero
}
   1e318:	e037883a 	mov	sp,fp
   1e31c:	df000017 	ldw	fp,0(sp)
   1e320:	dec00104 	addi	sp,sp,4
   1e324:	f800283a 	ret

0001e328 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1e328:	defff504 	addi	sp,sp,-44
   1e32c:	df000a15 	stw	fp,40(sp)
   1e330:	df000a04 	addi	fp,sp,40
   1e334:	e13ffc15 	stw	r4,-16(fp)
   1e338:	e17ffd15 	stw	r5,-12(fp)
   1e33c:	e1bffe15 	stw	r6,-8(fp)
   1e340:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1e344:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e348:	008000b4 	movhi	r2,2
   1e34c:	1090cf04 	addi	r2,r2,17212
   1e350:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1e354:	10003f26 	beq	r2,zero,1e454 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1e358:	e0bffc17 	ldw	r2,-16(fp)
   1e35c:	10003b26 	beq	r2,zero,1e44c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1e360:	e0bffc17 	ldw	r2,-16(fp)
   1e364:	e0fffe17 	ldw	r3,-8(fp)
   1e368:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1e36c:	e0bffc17 	ldw	r2,-16(fp)
   1e370:	e0ffff17 	ldw	r3,-4(fp)
   1e374:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e378:	0005303a 	rdctl	r2,status
   1e37c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e380:	e0fff817 	ldw	r3,-32(fp)
   1e384:	00bfff84 	movi	r2,-2
   1e388:	1884703a 	and	r2,r3,r2
   1e38c:	1001703a 	wrctl	status,r2
  
  return context;
   1e390:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1e394:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1e398:	008000b4 	movhi	r2,2
   1e39c:	1090d004 	addi	r2,r2,17216
   1e3a0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1e3a4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1e3a8:	e0fffd17 	ldw	r3,-12(fp)
   1e3ac:	e0bff617 	ldw	r2,-40(fp)
   1e3b0:	1885883a 	add	r2,r3,r2
   1e3b4:	10c00044 	addi	r3,r2,1
   1e3b8:	e0bffc17 	ldw	r2,-16(fp)
   1e3bc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1e3c0:	e0bffc17 	ldw	r2,-16(fp)
   1e3c4:	10c00217 	ldw	r3,8(r2)
   1e3c8:	e0bff617 	ldw	r2,-40(fp)
   1e3cc:	1880042e 	bgeu	r3,r2,1e3e0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1e3d0:	e0bffc17 	ldw	r2,-16(fp)
   1e3d4:	00c00044 	movi	r3,1
   1e3d8:	10c00405 	stb	r3,16(r2)
   1e3dc:	00000206 	br	1e3e8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1e3e0:	e0bffc17 	ldw	r2,-16(fp)
   1e3e4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1e3e8:	e0fffc17 	ldw	r3,-16(fp)
   1e3ec:	008000b4 	movhi	r2,2
   1e3f0:	1088c204 	addi	r2,r2,8968
   1e3f4:	e0bff915 	stw	r2,-28(fp)
   1e3f8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e3fc:	e0bffa17 	ldw	r2,-24(fp)
   1e400:	e0fff917 	ldw	r3,-28(fp)
   1e404:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e408:	e0bff917 	ldw	r2,-28(fp)
   1e40c:	10c00017 	ldw	r3,0(r2)
   1e410:	e0bffa17 	ldw	r2,-24(fp)
   1e414:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e418:	e0bff917 	ldw	r2,-28(fp)
   1e41c:	10800017 	ldw	r2,0(r2)
   1e420:	e0fffa17 	ldw	r3,-24(fp)
   1e424:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e428:	e0bff917 	ldw	r2,-28(fp)
   1e42c:	e0fffa17 	ldw	r3,-24(fp)
   1e430:	10c00015 	stw	r3,0(r2)
   1e434:	e0bff717 	ldw	r2,-36(fp)
   1e438:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e43c:	e0bffb17 	ldw	r2,-20(fp)
   1e440:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1e444:	0005883a 	mov	r2,zero
   1e448:	00000306 	br	1e458 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1e44c:	00bffa84 	movi	r2,-22
   1e450:	00000106 	br	1e458 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1e454:	00bfde84 	movi	r2,-134
  }
}
   1e458:	e037883a 	mov	sp,fp
   1e45c:	df000017 	ldw	fp,0(sp)
   1e460:	dec00104 	addi	sp,sp,4
   1e464:	f800283a 	ret

0001e468 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1e468:	deffff04 	addi	sp,sp,-4
   1e46c:	df000015 	stw	fp,0(sp)
   1e470:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1e474:	e037883a 	mov	sp,fp
   1e478:	df000017 	ldw	fp,0(sp)
   1e47c:	dec00104 	addi	sp,sp,4
   1e480:	f800283a 	ret

0001e484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e484:	defffe04 	addi	sp,sp,-8
   1e488:	dfc00115 	stw	ra,4(sp)
   1e48c:	df000015 	stw	fp,0(sp)
   1e490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e494:	008000b4 	movhi	r2,2
   1e498:	1088a004 	addi	r2,r2,8832
   1e49c:	10800017 	ldw	r2,0(r2)
   1e4a0:	10000526 	beq	r2,zero,1e4b8 <alt_get_errno+0x34>
   1e4a4:	008000b4 	movhi	r2,2
   1e4a8:	1088a004 	addi	r2,r2,8832
   1e4ac:	10800017 	ldw	r2,0(r2)
   1e4b0:	103ee83a 	callr	r2
   1e4b4:	00000206 	br	1e4c0 <alt_get_errno+0x3c>
   1e4b8:	008000b4 	movhi	r2,2
   1e4bc:	1090b104 	addi	r2,r2,17092
}
   1e4c0:	e037883a 	mov	sp,fp
   1e4c4:	dfc00117 	ldw	ra,4(sp)
   1e4c8:	df000017 	ldw	fp,0(sp)
   1e4cc:	dec00204 	addi	sp,sp,8
   1e4d0:	f800283a 	ret

0001e4d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1e4d4:	defffa04 	addi	sp,sp,-24
   1e4d8:	dfc00515 	stw	ra,20(sp)
   1e4dc:	df000415 	stw	fp,16(sp)
   1e4e0:	df000404 	addi	fp,sp,16
   1e4e4:	e13ffe15 	stw	r4,-8(fp)
   1e4e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1e4ec:	e0bffe17 	ldw	r2,-8(fp)
   1e4f0:	10000326 	beq	r2,zero,1e500 <alt_dev_llist_insert+0x2c>
   1e4f4:	e0bffe17 	ldw	r2,-8(fp)
   1e4f8:	10800217 	ldw	r2,8(r2)
   1e4fc:	1000061e 	bne	r2,zero,1e518 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1e500:	001e4840 	call	1e484 <alt_get_errno>
   1e504:	1007883a 	mov	r3,r2
   1e508:	00800584 	movi	r2,22
   1e50c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1e510:	00bffa84 	movi	r2,-22
   1e514:	00001306 	br	1e564 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1e518:	e0bffe17 	ldw	r2,-8(fp)
   1e51c:	e0ffff17 	ldw	r3,-4(fp)
   1e520:	e0fffc15 	stw	r3,-16(fp)
   1e524:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1e528:	e0bffd17 	ldw	r2,-12(fp)
   1e52c:	e0fffc17 	ldw	r3,-16(fp)
   1e530:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1e534:	e0bffc17 	ldw	r2,-16(fp)
   1e538:	10c00017 	ldw	r3,0(r2)
   1e53c:	e0bffd17 	ldw	r2,-12(fp)
   1e540:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1e544:	e0bffc17 	ldw	r2,-16(fp)
   1e548:	10800017 	ldw	r2,0(r2)
   1e54c:	e0fffd17 	ldw	r3,-12(fp)
   1e550:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1e554:	e0bffc17 	ldw	r2,-16(fp)
   1e558:	e0fffd17 	ldw	r3,-12(fp)
   1e55c:	10c00015 	stw	r3,0(r2)

  return 0;  
   1e560:	0005883a 	mov	r2,zero
}
   1e564:	e037883a 	mov	sp,fp
   1e568:	dfc00117 	ldw	ra,4(sp)
   1e56c:	df000017 	ldw	fp,0(sp)
   1e570:	dec00204 	addi	sp,sp,8
   1e574:	f800283a 	ret

0001e578 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1e578:	defffd04 	addi	sp,sp,-12
   1e57c:	dfc00215 	stw	ra,8(sp)
   1e580:	df000115 	stw	fp,4(sp)
   1e584:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e588:	008000b4 	movhi	r2,2
   1e58c:	10be0704 	addi	r2,r2,-2020
   1e590:	e0bfff15 	stw	r2,-4(fp)
   1e594:	00000606 	br	1e5b0 <_do_ctors+0x38>
        (*ctor) (); 
   1e598:	e0bfff17 	ldw	r2,-4(fp)
   1e59c:	10800017 	ldw	r2,0(r2)
   1e5a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1e5a4:	e0bfff17 	ldw	r2,-4(fp)
   1e5a8:	10bfff04 	addi	r2,r2,-4
   1e5ac:	e0bfff15 	stw	r2,-4(fp)
   1e5b0:	e0ffff17 	ldw	r3,-4(fp)
   1e5b4:	008000b4 	movhi	r2,2
   1e5b8:	10be0804 	addi	r2,r2,-2016
   1e5bc:	18bff62e 	bgeu	r3,r2,1e598 <__alt_mem_Flash_flash_data+0xf401e598>
        (*ctor) (); 
}
   1e5c0:	e037883a 	mov	sp,fp
   1e5c4:	dfc00117 	ldw	ra,4(sp)
   1e5c8:	df000017 	ldw	fp,0(sp)
   1e5cc:	dec00204 	addi	sp,sp,8
   1e5d0:	f800283a 	ret

0001e5d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1e5d4:	defffd04 	addi	sp,sp,-12
   1e5d8:	dfc00215 	stw	ra,8(sp)
   1e5dc:	df000115 	stw	fp,4(sp)
   1e5e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e5e4:	008000b4 	movhi	r2,2
   1e5e8:	10be0704 	addi	r2,r2,-2020
   1e5ec:	e0bfff15 	stw	r2,-4(fp)
   1e5f0:	00000606 	br	1e60c <_do_dtors+0x38>
        (*dtor) (); 
   1e5f4:	e0bfff17 	ldw	r2,-4(fp)
   1e5f8:	10800017 	ldw	r2,0(r2)
   1e5fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1e600:	e0bfff17 	ldw	r2,-4(fp)
   1e604:	10bfff04 	addi	r2,r2,-4
   1e608:	e0bfff15 	stw	r2,-4(fp)
   1e60c:	e0ffff17 	ldw	r3,-4(fp)
   1e610:	008000b4 	movhi	r2,2
   1e614:	10be0804 	addi	r2,r2,-2016
   1e618:	18bff62e 	bgeu	r3,r2,1e5f4 <__alt_mem_Flash_flash_data+0xf401e5f4>
        (*dtor) (); 
}
   1e61c:	e037883a 	mov	sp,fp
   1e620:	dfc00117 	ldw	ra,4(sp)
   1e624:	df000017 	ldw	fp,0(sp)
   1e628:	dec00204 	addi	sp,sp,8
   1e62c:	f800283a 	ret

0001e630 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1e630:	defffa04 	addi	sp,sp,-24
   1e634:	dfc00515 	stw	ra,20(sp)
   1e638:	df000415 	stw	fp,16(sp)
   1e63c:	df000404 	addi	fp,sp,16
   1e640:	e13ffe15 	stw	r4,-8(fp)
   1e644:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1e648:	e0bfff17 	ldw	r2,-4(fp)
   1e64c:	10800017 	ldw	r2,0(r2)
   1e650:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1e654:	e13ffe17 	ldw	r4,-8(fp)
   1e658:	00031ec0 	call	31ec <strlen>
   1e65c:	10800044 	addi	r2,r2,1
   1e660:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e664:	00000d06 	br	1e69c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1e668:	e0bffc17 	ldw	r2,-16(fp)
   1e66c:	10c00217 	ldw	r3,8(r2)
   1e670:	e0bffd17 	ldw	r2,-12(fp)
   1e674:	1809883a 	mov	r4,r3
   1e678:	e17ffe17 	ldw	r5,-8(fp)
   1e67c:	100d883a 	mov	r6,r2
   1e680:	001f4c00 	call	1f4c0 <memcmp>
   1e684:	1000021e 	bne	r2,zero,1e690 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1e688:	e0bffc17 	ldw	r2,-16(fp)
   1e68c:	00000706 	br	1e6ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1e690:	e0bffc17 	ldw	r2,-16(fp)
   1e694:	10800017 	ldw	r2,0(r2)
   1e698:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1e69c:	e0fffc17 	ldw	r3,-16(fp)
   1e6a0:	e0bfff17 	ldw	r2,-4(fp)
   1e6a4:	18bff01e 	bne	r3,r2,1e668 <__alt_mem_Flash_flash_data+0xf401e668>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1e6a8:	0005883a 	mov	r2,zero
}
   1e6ac:	e037883a 	mov	sp,fp
   1e6b0:	dfc00117 	ldw	ra,4(sp)
   1e6b4:	df000017 	ldw	fp,0(sp)
   1e6b8:	dec00204 	addi	sp,sp,8
   1e6bc:	f800283a 	ret

0001e6c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1e6c0:	defffe04 	addi	sp,sp,-8
   1e6c4:	dfc00115 	stw	ra,4(sp)
   1e6c8:	df000015 	stw	fp,0(sp)
   1e6cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1e6d0:	0009883a 	mov	r4,zero
   1e6d4:	01440004 	movi	r5,4096
   1e6d8:	001f34c0 	call	1f34c <alt_icache_flush>
#endif
}
   1e6dc:	e037883a 	mov	sp,fp
   1e6e0:	dfc00117 	ldw	ra,4(sp)
   1e6e4:	df000017 	ldw	fp,0(sp)
   1e6e8:	dec00204 	addi	sp,sp,8
   1e6ec:	f800283a 	ret

0001e6f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1e6f0:	defff904 	addi	sp,sp,-28
   1e6f4:	dfc00615 	stw	ra,24(sp)
   1e6f8:	df000515 	stw	fp,20(sp)
   1e6fc:	df000504 	addi	fp,sp,20
   1e700:	e13ffc15 	stw	r4,-16(fp)
   1e704:	e17ffd15 	stw	r5,-12(fp)
   1e708:	e1bffe15 	stw	r6,-8(fp)
   1e70c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1e710:	e13ffd17 	ldw	r4,-12(fp)
   1e714:	e17ffe17 	ldw	r5,-8(fp)
   1e718:	e1bfff17 	ldw	r6,-4(fp)
   1e71c:	001eaf40 	call	1eaf4 <open>
   1e720:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1e724:	e0bffb17 	ldw	r2,-20(fp)
   1e728:	10001c16 	blt	r2,zero,1e79c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1e72c:	008000b4 	movhi	r2,2
   1e730:	10832c04 	addi	r2,r2,3248
   1e734:	e0fffb17 	ldw	r3,-20(fp)
   1e738:	18c00324 	muli	r3,r3,12
   1e73c:	10c5883a 	add	r2,r2,r3
   1e740:	10c00017 	ldw	r3,0(r2)
   1e744:	e0bffc17 	ldw	r2,-16(fp)
   1e748:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1e74c:	008000b4 	movhi	r2,2
   1e750:	10832c04 	addi	r2,r2,3248
   1e754:	e0fffb17 	ldw	r3,-20(fp)
   1e758:	18c00324 	muli	r3,r3,12
   1e75c:	18c00104 	addi	r3,r3,4
   1e760:	10c5883a 	add	r2,r2,r3
   1e764:	10c00017 	ldw	r3,0(r2)
   1e768:	e0bffc17 	ldw	r2,-16(fp)
   1e76c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1e770:	008000b4 	movhi	r2,2
   1e774:	10832c04 	addi	r2,r2,3248
   1e778:	e0fffb17 	ldw	r3,-20(fp)
   1e77c:	18c00324 	muli	r3,r3,12
   1e780:	18c00204 	addi	r3,r3,8
   1e784:	10c5883a 	add	r2,r2,r3
   1e788:	10c00017 	ldw	r3,0(r2)
   1e78c:	e0bffc17 	ldw	r2,-16(fp)
   1e790:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1e794:	e13ffb17 	ldw	r4,-20(fp)
   1e798:	0012d840 	call	12d84 <alt_release_fd>
  }
} 
   1e79c:	e037883a 	mov	sp,fp
   1e7a0:	dfc00117 	ldw	ra,4(sp)
   1e7a4:	df000017 	ldw	fp,0(sp)
   1e7a8:	dec00204 	addi	sp,sp,8
   1e7ac:	f800283a 	ret

0001e7b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1e7b0:	defffb04 	addi	sp,sp,-20
   1e7b4:	dfc00415 	stw	ra,16(sp)
   1e7b8:	df000315 	stw	fp,12(sp)
   1e7bc:	df000304 	addi	fp,sp,12
   1e7c0:	e13ffd15 	stw	r4,-12(fp)
   1e7c4:	e17ffe15 	stw	r5,-8(fp)
   1e7c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1e7cc:	010000b4 	movhi	r4,2
   1e7d0:	21032f04 	addi	r4,r4,3260
   1e7d4:	e17ffd17 	ldw	r5,-12(fp)
   1e7d8:	01800044 	movi	r6,1
   1e7dc:	01c07fc4 	movi	r7,511
   1e7e0:	001e6f00 	call	1e6f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1e7e4:	010000b4 	movhi	r4,2
   1e7e8:	21032c04 	addi	r4,r4,3248
   1e7ec:	e17ffe17 	ldw	r5,-8(fp)
   1e7f0:	000d883a 	mov	r6,zero
   1e7f4:	01c07fc4 	movi	r7,511
   1e7f8:	001e6f00 	call	1e6f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1e7fc:	010000b4 	movhi	r4,2
   1e800:	21033204 	addi	r4,r4,3272
   1e804:	e17fff17 	ldw	r5,-4(fp)
   1e808:	01800044 	movi	r6,1
   1e80c:	01c07fc4 	movi	r7,511
   1e810:	001e6f00 	call	1e6f0 <alt_open_fd>
}  
   1e814:	e037883a 	mov	sp,fp
   1e818:	dfc00117 	ldw	ra,4(sp)
   1e81c:	df000017 	ldw	fp,0(sp)
   1e820:	dec00204 	addi	sp,sp,8
   1e824:	f800283a 	ret

0001e828 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1e828:	defff004 	addi	sp,sp,-64
   1e82c:	df000f15 	stw	fp,60(sp)
   1e830:	df000f04 	addi	fp,sp,60
   1e834:	e13ffd15 	stw	r4,-12(fp)
   1e838:	e17ffe15 	stw	r5,-8(fp)
   1e83c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1e840:	00bffa84 	movi	r2,-22
   1e844:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1e848:	e0bffd17 	ldw	r2,-12(fp)
   1e84c:	10800828 	cmpgeui	r2,r2,32
   1e850:	10005c1e 	bne	r2,zero,1e9c4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e854:	0005303a 	rdctl	r2,status
   1e858:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e85c:	e0fff317 	ldw	r3,-52(fp)
   1e860:	00bfff84 	movi	r2,-2
   1e864:	1884703a 	and	r2,r3,r2
   1e868:	1001703a 	wrctl	status,r2
  
  return context;
   1e86c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1e870:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1e874:	00800134 	movhi	r2,4
   1e878:	10957e04 	addi	r2,r2,22008
   1e87c:	e0fffd17 	ldw	r3,-12(fp)
   1e880:	180690fa 	slli	r3,r3,3
   1e884:	10c5883a 	add	r2,r2,r3
   1e888:	e0ffff17 	ldw	r3,-4(fp)
   1e88c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1e890:	00800134 	movhi	r2,4
   1e894:	10957e04 	addi	r2,r2,22008
   1e898:	e0fffd17 	ldw	r3,-12(fp)
   1e89c:	180690fa 	slli	r3,r3,3
   1e8a0:	18c00104 	addi	r3,r3,4
   1e8a4:	10c5883a 	add	r2,r2,r3
   1e8a8:	e0fffe17 	ldw	r3,-8(fp)
   1e8ac:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1e8b0:	e0bfff17 	ldw	r2,-4(fp)
   1e8b4:	10001f26 	beq	r2,zero,1e934 <alt_irq_register+0x10c>
   1e8b8:	e0bffd17 	ldw	r2,-12(fp)
   1e8bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e8c0:	0005303a 	rdctl	r2,status
   1e8c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e8c8:	e0fff517 	ldw	r3,-44(fp)
   1e8cc:	00bfff84 	movi	r2,-2
   1e8d0:	1884703a 	and	r2,r3,r2
   1e8d4:	1001703a 	wrctl	status,r2
  
  return context;
   1e8d8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e8dc:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1e8e0:	e0bff417 	ldw	r2,-48(fp)
   1e8e4:	00c00044 	movi	r3,1
   1e8e8:	1884983a 	sll	r2,r3,r2
   1e8ec:	1007883a 	mov	r3,r2
   1e8f0:	008000b4 	movhi	r2,2
   1e8f4:	1090ce04 	addi	r2,r2,17208
   1e8f8:	10800017 	ldw	r2,0(r2)
   1e8fc:	1886b03a 	or	r3,r3,r2
   1e900:	008000b4 	movhi	r2,2
   1e904:	1090ce04 	addi	r2,r2,17208
   1e908:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e90c:	008000b4 	movhi	r2,2
   1e910:	1090ce04 	addi	r2,r2,17208
   1e914:	10800017 	ldw	r2,0(r2)
   1e918:	100170fa 	wrctl	ienable,r2
   1e91c:	e0bff617 	ldw	r2,-40(fp)
   1e920:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e924:	e0bff717 	ldw	r2,-36(fp)
   1e928:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e92c:	0005883a 	mov	r2,zero
   1e930:	00001f06 	br	1e9b0 <alt_irq_register+0x188>
   1e934:	e0bffd17 	ldw	r2,-12(fp)
   1e938:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e93c:	0005303a 	rdctl	r2,status
   1e940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e944:	e0fff917 	ldw	r3,-28(fp)
   1e948:	00bfff84 	movi	r2,-2
   1e94c:	1884703a 	and	r2,r3,r2
   1e950:	1001703a 	wrctl	status,r2
  
  return context;
   1e954:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e958:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1e95c:	e0bff817 	ldw	r2,-32(fp)
   1e960:	00c00044 	movi	r3,1
   1e964:	1884983a 	sll	r2,r3,r2
   1e968:	0084303a 	nor	r2,zero,r2
   1e96c:	1007883a 	mov	r3,r2
   1e970:	008000b4 	movhi	r2,2
   1e974:	1090ce04 	addi	r2,r2,17208
   1e978:	10800017 	ldw	r2,0(r2)
   1e97c:	1886703a 	and	r3,r3,r2
   1e980:	008000b4 	movhi	r2,2
   1e984:	1090ce04 	addi	r2,r2,17208
   1e988:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e98c:	008000b4 	movhi	r2,2
   1e990:	1090ce04 	addi	r2,r2,17208
   1e994:	10800017 	ldw	r2,0(r2)
   1e998:	100170fa 	wrctl	ienable,r2
   1e99c:	e0bffa17 	ldw	r2,-24(fp)
   1e9a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e9a4:	e0bffb17 	ldw	r2,-20(fp)
   1e9a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e9ac:	0005883a 	mov	r2,zero
   1e9b0:	e0bff115 	stw	r2,-60(fp)
   1e9b4:	e0bff217 	ldw	r2,-56(fp)
   1e9b8:	e0bffc15 	stw	r2,-16(fp)
   1e9bc:	e0bffc17 	ldw	r2,-16(fp)
   1e9c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1e9c4:	e0bff117 	ldw	r2,-60(fp)
}
   1e9c8:	e037883a 	mov	sp,fp
   1e9cc:	df000017 	ldw	fp,0(sp)
   1e9d0:	dec00104 	addi	sp,sp,4
   1e9d4:	f800283a 	ret

0001e9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e9d8:	defffe04 	addi	sp,sp,-8
   1e9dc:	dfc00115 	stw	ra,4(sp)
   1e9e0:	df000015 	stw	fp,0(sp)
   1e9e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e9e8:	008000b4 	movhi	r2,2
   1e9ec:	1088a004 	addi	r2,r2,8832
   1e9f0:	10800017 	ldw	r2,0(r2)
   1e9f4:	10000526 	beq	r2,zero,1ea0c <alt_get_errno+0x34>
   1e9f8:	008000b4 	movhi	r2,2
   1e9fc:	1088a004 	addi	r2,r2,8832
   1ea00:	10800017 	ldw	r2,0(r2)
   1ea04:	103ee83a 	callr	r2
   1ea08:	00000206 	br	1ea14 <alt_get_errno+0x3c>
   1ea0c:	008000b4 	movhi	r2,2
   1ea10:	1090b104 	addi	r2,r2,17092
}
   1ea14:	e037883a 	mov	sp,fp
   1ea18:	dfc00117 	ldw	ra,4(sp)
   1ea1c:	df000017 	ldw	fp,0(sp)
   1ea20:	dec00204 	addi	sp,sp,8
   1ea24:	f800283a 	ret

0001ea28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1ea28:	defffd04 	addi	sp,sp,-12
   1ea2c:	df000215 	stw	fp,8(sp)
   1ea30:	df000204 	addi	fp,sp,8
   1ea34:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1ea38:	e0bfff17 	ldw	r2,-4(fp)
   1ea3c:	10800217 	ldw	r2,8(r2)
   1ea40:	10d00034 	orhi	r3,r2,16384
   1ea44:	e0bfff17 	ldw	r2,-4(fp)
   1ea48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1ea4c:	e03ffe15 	stw	zero,-8(fp)
   1ea50:	00001d06 	br	1eac8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1ea54:	008000b4 	movhi	r2,2
   1ea58:	10832c04 	addi	r2,r2,3248
   1ea5c:	e0fffe17 	ldw	r3,-8(fp)
   1ea60:	18c00324 	muli	r3,r3,12
   1ea64:	10c5883a 	add	r2,r2,r3
   1ea68:	10c00017 	ldw	r3,0(r2)
   1ea6c:	e0bfff17 	ldw	r2,-4(fp)
   1ea70:	10800017 	ldw	r2,0(r2)
   1ea74:	1880111e 	bne	r3,r2,1eabc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1ea78:	008000b4 	movhi	r2,2
   1ea7c:	10832c04 	addi	r2,r2,3248
   1ea80:	e0fffe17 	ldw	r3,-8(fp)
   1ea84:	18c00324 	muli	r3,r3,12
   1ea88:	18c00204 	addi	r3,r3,8
   1ea8c:	10c5883a 	add	r2,r2,r3
   1ea90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1ea94:	1000090e 	bge	r2,zero,1eabc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1ea98:	e0bffe17 	ldw	r2,-8(fp)
   1ea9c:	10c00324 	muli	r3,r2,12
   1eaa0:	008000b4 	movhi	r2,2
   1eaa4:	10832c04 	addi	r2,r2,3248
   1eaa8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1eaac:	e0bfff17 	ldw	r2,-4(fp)
   1eab0:	18800226 	beq	r3,r2,1eabc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1eab4:	00bffcc4 	movi	r2,-13
   1eab8:	00000a06 	br	1eae4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1eabc:	e0bffe17 	ldw	r2,-8(fp)
   1eac0:	10800044 	addi	r2,r2,1
   1eac4:	e0bffe15 	stw	r2,-8(fp)
   1eac8:	008000b4 	movhi	r2,2
   1eacc:	10889f04 	addi	r2,r2,8828
   1ead0:	10800017 	ldw	r2,0(r2)
   1ead4:	1007883a 	mov	r3,r2
   1ead8:	e0bffe17 	ldw	r2,-8(fp)
   1eadc:	18bfdd2e 	bgeu	r3,r2,1ea54 <__alt_mem_Flash_flash_data+0xf401ea54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1eae0:	0005883a 	mov	r2,zero
}
   1eae4:	e037883a 	mov	sp,fp
   1eae8:	df000017 	ldw	fp,0(sp)
   1eaec:	dec00104 	addi	sp,sp,4
   1eaf0:	f800283a 	ret

0001eaf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1eaf4:	defff604 	addi	sp,sp,-40
   1eaf8:	dfc00915 	stw	ra,36(sp)
   1eafc:	df000815 	stw	fp,32(sp)
   1eb00:	df000804 	addi	fp,sp,32
   1eb04:	e13ffd15 	stw	r4,-12(fp)
   1eb08:	e17ffe15 	stw	r5,-8(fp)
   1eb0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1eb10:	00bfffc4 	movi	r2,-1
   1eb14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1eb18:	00bffb44 	movi	r2,-19
   1eb1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1eb20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1eb24:	e13ffd17 	ldw	r4,-12(fp)
   1eb28:	014000b4 	movhi	r5,2
   1eb2c:	29489d04 	addi	r5,r5,8820
   1eb30:	001e6300 	call	1e630 <alt_find_dev>
   1eb34:	e0bff815 	stw	r2,-32(fp)
   1eb38:	e0bff817 	ldw	r2,-32(fp)
   1eb3c:	1000051e 	bne	r2,zero,1eb54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1eb40:	e13ffd17 	ldw	r4,-12(fp)
   1eb44:	001f13c0 	call	1f13c <alt_find_file>
   1eb48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1eb4c:	00800044 	movi	r2,1
   1eb50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1eb54:	e0bff817 	ldw	r2,-32(fp)
   1eb58:	10002926 	beq	r2,zero,1ec00 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1eb5c:	e13ff817 	ldw	r4,-32(fp)
   1eb60:	001f2500 	call	1f250 <alt_get_fd>
   1eb64:	e0bff915 	stw	r2,-28(fp)
   1eb68:	e0bff917 	ldw	r2,-28(fp)
   1eb6c:	1000030e 	bge	r2,zero,1eb7c <open+0x88>
    {
      status = index;
   1eb70:	e0bff917 	ldw	r2,-28(fp)
   1eb74:	e0bffa15 	stw	r2,-24(fp)
   1eb78:	00002306 	br	1ec08 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1eb7c:	e0bff917 	ldw	r2,-28(fp)
   1eb80:	10c00324 	muli	r3,r2,12
   1eb84:	008000b4 	movhi	r2,2
   1eb88:	10832c04 	addi	r2,r2,3248
   1eb8c:	1885883a 	add	r2,r3,r2
   1eb90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1eb94:	e0fffe17 	ldw	r3,-8(fp)
   1eb98:	00900034 	movhi	r2,16384
   1eb9c:	10bfffc4 	addi	r2,r2,-1
   1eba0:	1886703a 	and	r3,r3,r2
   1eba4:	e0bffc17 	ldw	r2,-16(fp)
   1eba8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1ebac:	e0bffb17 	ldw	r2,-20(fp)
   1ebb0:	1000051e 	bne	r2,zero,1ebc8 <open+0xd4>
   1ebb4:	e13ffc17 	ldw	r4,-16(fp)
   1ebb8:	001ea280 	call	1ea28 <alt_file_locked>
   1ebbc:	e0bffa15 	stw	r2,-24(fp)
   1ebc0:	e0bffa17 	ldw	r2,-24(fp)
   1ebc4:	10001016 	blt	r2,zero,1ec08 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1ebc8:	e0bff817 	ldw	r2,-32(fp)
   1ebcc:	10800317 	ldw	r2,12(r2)
   1ebd0:	10000826 	beq	r2,zero,1ebf4 <open+0x100>
   1ebd4:	e0bff817 	ldw	r2,-32(fp)
   1ebd8:	10800317 	ldw	r2,12(r2)
   1ebdc:	e13ffc17 	ldw	r4,-16(fp)
   1ebe0:	e17ffd17 	ldw	r5,-12(fp)
   1ebe4:	e1bffe17 	ldw	r6,-8(fp)
   1ebe8:	e1ffff17 	ldw	r7,-4(fp)
   1ebec:	103ee83a 	callr	r2
   1ebf0:	00000106 	br	1ebf8 <open+0x104>
   1ebf4:	0005883a 	mov	r2,zero
   1ebf8:	e0bffa15 	stw	r2,-24(fp)
   1ebfc:	00000206 	br	1ec08 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ec00:	00bffb44 	movi	r2,-19
   1ec04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ec08:	e0bffa17 	ldw	r2,-24(fp)
   1ec0c:	1000090e 	bge	r2,zero,1ec34 <open+0x140>
  {
    alt_release_fd (index);  
   1ec10:	e13ff917 	ldw	r4,-28(fp)
   1ec14:	0012d840 	call	12d84 <alt_release_fd>
    ALT_ERRNO = -status;
   1ec18:	001e9d80 	call	1e9d8 <alt_get_errno>
   1ec1c:	1007883a 	mov	r3,r2
   1ec20:	e0bffa17 	ldw	r2,-24(fp)
   1ec24:	0085c83a 	sub	r2,zero,r2
   1ec28:	18800015 	stw	r2,0(r3)
    return -1;
   1ec2c:	00bfffc4 	movi	r2,-1
   1ec30:	00000106 	br	1ec38 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1ec34:	e0bff917 	ldw	r2,-28(fp)
}
   1ec38:	e037883a 	mov	sp,fp
   1ec3c:	dfc00117 	ldw	ra,4(sp)
   1ec40:	df000017 	ldw	fp,0(sp)
   1ec44:	dec00204 	addi	sp,sp,8
   1ec48:	f800283a 	ret

0001ec4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ec4c:	defffa04 	addi	sp,sp,-24
   1ec50:	df000515 	stw	fp,20(sp)
   1ec54:	df000504 	addi	fp,sp,20
   1ec58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ec5c:	0005303a 	rdctl	r2,status
   1ec60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ec64:	e0fffc17 	ldw	r3,-16(fp)
   1ec68:	00bfff84 	movi	r2,-2
   1ec6c:	1884703a 	and	r2,r3,r2
   1ec70:	1001703a 	wrctl	status,r2
  
  return context;
   1ec74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ec78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ec7c:	e0bfff17 	ldw	r2,-4(fp)
   1ec80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ec84:	e0bffd17 	ldw	r2,-12(fp)
   1ec88:	10800017 	ldw	r2,0(r2)
   1ec8c:	e0fffd17 	ldw	r3,-12(fp)
   1ec90:	18c00117 	ldw	r3,4(r3)
   1ec94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ec98:	e0bffd17 	ldw	r2,-12(fp)
   1ec9c:	10800117 	ldw	r2,4(r2)
   1eca0:	e0fffd17 	ldw	r3,-12(fp)
   1eca4:	18c00017 	ldw	r3,0(r3)
   1eca8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1ecac:	e0bffd17 	ldw	r2,-12(fp)
   1ecb0:	e0fffd17 	ldw	r3,-12(fp)
   1ecb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1ecb8:	e0bffd17 	ldw	r2,-12(fp)
   1ecbc:	e0fffd17 	ldw	r3,-12(fp)
   1ecc0:	10c00015 	stw	r3,0(r2)
   1ecc4:	e0bffb17 	ldw	r2,-20(fp)
   1ecc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eccc:	e0bffe17 	ldw	r2,-8(fp)
   1ecd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1ecd4:	e037883a 	mov	sp,fp
   1ecd8:	df000017 	ldw	fp,0(sp)
   1ecdc:	dec00104 	addi	sp,sp,4
   1ece0:	f800283a 	ret

0001ece4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1ece4:	defffb04 	addi	sp,sp,-20
   1ece8:	dfc00415 	stw	ra,16(sp)
   1ecec:	df000315 	stw	fp,12(sp)
   1ecf0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1ecf4:	d0a03a17 	ldw	r2,-32536(gp)
   1ecf8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1ecfc:	d0a84817 	ldw	r2,-24288(gp)
   1ed00:	10800044 	addi	r2,r2,1
   1ed04:	d0a84815 	stw	r2,-24288(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1ed08:	00002e06 	br	1edc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1ed0c:	e0bffd17 	ldw	r2,-12(fp)
   1ed10:	10800017 	ldw	r2,0(r2)
   1ed14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1ed18:	e0bffd17 	ldw	r2,-12(fp)
   1ed1c:	10800403 	ldbu	r2,16(r2)
   1ed20:	10803fcc 	andi	r2,r2,255
   1ed24:	10000426 	beq	r2,zero,1ed38 <alt_tick+0x54>
   1ed28:	d0a84817 	ldw	r2,-24288(gp)
   1ed2c:	1000021e 	bne	r2,zero,1ed38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1ed30:	e0bffd17 	ldw	r2,-12(fp)
   1ed34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1ed38:	e0bffd17 	ldw	r2,-12(fp)
   1ed3c:	10800217 	ldw	r2,8(r2)
   1ed40:	d0e84817 	ldw	r3,-24288(gp)
   1ed44:	18801d36 	bltu	r3,r2,1edbc <alt_tick+0xd8>
   1ed48:	e0bffd17 	ldw	r2,-12(fp)
   1ed4c:	10800403 	ldbu	r2,16(r2)
   1ed50:	10803fcc 	andi	r2,r2,255
   1ed54:	1000191e 	bne	r2,zero,1edbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1ed58:	e0bffd17 	ldw	r2,-12(fp)
   1ed5c:	10800317 	ldw	r2,12(r2)
   1ed60:	e0fffd17 	ldw	r3,-12(fp)
   1ed64:	18c00517 	ldw	r3,20(r3)
   1ed68:	1809883a 	mov	r4,r3
   1ed6c:	103ee83a 	callr	r2
   1ed70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1ed74:	e0bfff17 	ldw	r2,-4(fp)
   1ed78:	1000031e 	bne	r2,zero,1ed88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1ed7c:	e13ffd17 	ldw	r4,-12(fp)
   1ed80:	001ec4c0 	call	1ec4c <alt_alarm_stop>
   1ed84:	00000d06 	br	1edbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1ed88:	e0bffd17 	ldw	r2,-12(fp)
   1ed8c:	10c00217 	ldw	r3,8(r2)
   1ed90:	e0bfff17 	ldw	r2,-4(fp)
   1ed94:	1887883a 	add	r3,r3,r2
   1ed98:	e0bffd17 	ldw	r2,-12(fp)
   1ed9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1eda0:	e0bffd17 	ldw	r2,-12(fp)
   1eda4:	10c00217 	ldw	r3,8(r2)
   1eda8:	d0a84817 	ldw	r2,-24288(gp)
   1edac:	1880032e 	bgeu	r3,r2,1edbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1edb0:	e0bffd17 	ldw	r2,-12(fp)
   1edb4:	00c00044 	movi	r3,1
   1edb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1edbc:	e0bffe17 	ldw	r2,-8(fp)
   1edc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1edc4:	e0fffd17 	ldw	r3,-12(fp)
   1edc8:	d0a03a04 	addi	r2,gp,-32536
   1edcc:	18bfcf1e 	bne	r3,r2,1ed0c <__alt_mem_Flash_flash_data+0xf401ed0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1edd0:	0013f900 	call	13f90 <OSTimeTick>
}
   1edd4:	e037883a 	mov	sp,fp
   1edd8:	dfc00117 	ldw	ra,4(sp)
   1eddc:	df000017 	ldw	fp,0(sp)
   1ede0:	dec00204 	addi	sp,sp,8
   1ede4:	f800283a 	ret

0001ede8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ede8:	deffff04 	addi	sp,sp,-4
   1edec:	df000015 	stw	fp,0(sp)
   1edf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1edf4:	000170fa 	wrctl	ienable,zero
}
   1edf8:	e037883a 	mov	sp,fp
   1edfc:	df000017 	ldw	fp,0(sp)
   1ee00:	dec00104 	addi	sp,sp,4
   1ee04:	f800283a 	ret

0001ee08 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1ee08:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1ee0c:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1ee10:	d1284117 	ldw	r4,-24316(gp)

      stw ra,  0(sp)
   1ee14:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1ee18:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1ee1c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1ee20:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1ee24:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1ee28:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1ee2c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1ee30:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1ee34:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1ee38:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1ee3c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1ee40:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1ee44:	001f0740 	call	1f074 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1ee48:	d1283c17 	ldw	r4,-24336(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1ee4c:	d1683407 	ldb	r5,-24368(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1ee50:	d1284115 	stw	r4,-24316(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1ee54:	d1683445 	stb	r5,-24367(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1ee58:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1ee5c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1ee60:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1ee64:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1ee68:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1ee6c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1ee70:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1ee74:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1ee78:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1ee7c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1ee80:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1ee84:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1ee88:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1ee8c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1ee90:	f800283a 	ret

0001ee94 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1ee94:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1ee98:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1ee9c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1eea0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1eea4:	001f0740 	call	1f074 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1eea8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1eeac:	d4a83245 	stb	r18,-24375(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1eeb0:	003fe506 	br	1ee48 <__alt_mem_Flash_flash_data+0xf401ee48>

0001eeb4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1eeb4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1eeb8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1eebc:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1eec0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1eec4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1eec8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1eecc:	dec00204 	addi	sp,sp,8

      callr r2
   1eed0:	103ee83a 	callr	r2

      nop
   1eed4:	0001883a 	nop

0001eed8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1eed8:	defff704 	addi	sp,sp,-36
   1eedc:	dfc00815 	stw	ra,32(sp)
   1eee0:	df000715 	stw	fp,28(sp)
   1eee4:	df000704 	addi	fp,sp,28
   1eee8:	e13ffc15 	stw	r4,-16(fp)
   1eeec:	e17ffd15 	stw	r5,-12(fp)
   1eef0:	e1bffe15 	stw	r6,-8(fp)
   1eef4:	3805883a 	mov	r2,r7
   1eef8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1eefc:	e0fffe17 	ldw	r3,-8(fp)
   1ef00:	00bfff04 	movi	r2,-4
   1ef04:	1884703a 	and	r2,r3,r2
   1ef08:	10bef704 	addi	r2,r2,-1060
   1ef0c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ef10:	e13ff917 	ldw	r4,-28(fp)
   1ef14:	000b883a 	mov	r5,zero
   1ef18:	01810904 	movi	r6,1060
   1ef1c:	000ab0c0 	call	ab0c <memset>
   1ef20:	e0bff917 	ldw	r2,-28(fp)
   1ef24:	10c0bb04 	addi	r3,r2,748
   1ef28:	e0bff917 	ldw	r2,-28(fp)
   1ef2c:	10c00115 	stw	r3,4(r2)
   1ef30:	e0bff917 	ldw	r2,-28(fp)
   1ef34:	10c0d504 	addi	r3,r2,852
   1ef38:	e0bff917 	ldw	r2,-28(fp)
   1ef3c:	10c00215 	stw	r3,8(r2)
   1ef40:	e0bff917 	ldw	r2,-28(fp)
   1ef44:	10c0ef04 	addi	r3,r2,956
   1ef48:	e0bff917 	ldw	r2,-28(fp)
   1ef4c:	10c00315 	stw	r3,12(r2)
   1ef50:	e0fff917 	ldw	r3,-28(fp)
   1ef54:	008000b4 	movhi	r2,2
   1ef58:	1080f804 	addi	r2,r2,992
   1ef5c:	18800d15 	stw	r2,52(r3)
   1ef60:	e0bff917 	ldw	r2,-28(fp)
   1ef64:	00c00044 	movi	r3,1
   1ef68:	10c02915 	stw	r3,164(r2)
   1ef6c:	10002a15 	stw	zero,168(r2)
   1ef70:	e0bff917 	ldw	r2,-28(fp)
   1ef74:	00ccc384 	movi	r3,13070
   1ef78:	10c02b0d 	sth	r3,172(r2)
   1ef7c:	e0bff917 	ldw	r2,-28(fp)
   1ef80:	00eaf344 	movi	r3,-21555
   1ef84:	10c02b8d 	sth	r3,174(r2)
   1ef88:	e0bff917 	ldw	r2,-28(fp)
   1ef8c:	00c48d04 	movi	r3,4660
   1ef90:	10c02c0d 	sth	r3,176(r2)
   1ef94:	e0bff917 	ldw	r2,-28(fp)
   1ef98:	00f99b44 	movi	r3,-6547
   1ef9c:	10c02c8d 	sth	r3,178(r2)
   1efa0:	e0bff917 	ldw	r2,-28(fp)
   1efa4:	00f7bb04 	movi	r3,-8468
   1efa8:	10c02d0d 	sth	r3,180(r2)
   1efac:	e0bff917 	ldw	r2,-28(fp)
   1efb0:	00c00144 	movi	r3,5
   1efb4:	10c02d8d 	sth	r3,182(r2)
   1efb8:	e0bff917 	ldw	r2,-28(fp)
   1efbc:	00c002c4 	movi	r3,11
   1efc0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1efc4:	e0bff917 	ldw	r2,-28(fp)
   1efc8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1efcc:	e0bffa17 	ldw	r2,-24(fp)
   1efd0:	10bff304 	addi	r2,r2,-52
   1efd4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1efd8:	e0bffb17 	ldw	r2,-20(fp)
   1efdc:	10800c04 	addi	r2,r2,48
   1efe0:	e0fffc17 	ldw	r3,-16(fp)
   1efe4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1efe8:	e0bffb17 	ldw	r2,-20(fp)
   1efec:	10800b04 	addi	r2,r2,44
   1eff0:	e0fffd17 	ldw	r3,-12(fp)
   1eff4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1eff8:	e0bffb17 	ldw	r2,-20(fp)
   1effc:	10800a04 	addi	r2,r2,40
   1f000:	e0fff917 	ldw	r3,-28(fp)
   1f004:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1f008:	008000b4 	movhi	r2,2
   1f00c:	10bbad04 	addi	r2,r2,-4428
   1f010:	10c00104 	addi	r3,r2,4
   1f014:	e0bffb17 	ldw	r2,-20(fp)
   1f018:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1f01c:	e0bffb17 	ldw	r2,-20(fp)
}
   1f020:	e037883a 	mov	sp,fp
   1f024:	dfc00117 	ldw	ra,4(sp)
   1f028:	df000017 	ldw	fp,0(sp)
   1f02c:	dec00204 	addi	sp,sp,8
   1f030:	f800283a 	ret

0001f034 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1f034:	defffe04 	addi	sp,sp,-8
   1f038:	df000115 	stw	fp,4(sp)
   1f03c:	df000104 	addi	fp,sp,4
   1f040:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1f044:	e037883a 	mov	sp,fp
   1f048:	df000017 	ldw	fp,0(sp)
   1f04c:	dec00104 	addi	sp,sp,4
   1f050:	f800283a 	ret

0001f054 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1f054:	defffe04 	addi	sp,sp,-8
   1f058:	df000115 	stw	fp,4(sp)
   1f05c:	df000104 	addi	fp,sp,4
   1f060:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1f064:	e037883a 	mov	sp,fp
   1f068:	df000017 	ldw	fp,0(sp)
   1f06c:	dec00104 	addi	sp,sp,4
   1f070:	f800283a 	ret

0001f074 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1f074:	deffff04 	addi	sp,sp,-4
   1f078:	df000015 	stw	fp,0(sp)
   1f07c:	d839883a 	mov	fp,sp
}
   1f080:	e037883a 	mov	sp,fp
   1f084:	df000017 	ldw	fp,0(sp)
   1f088:	dec00104 	addi	sp,sp,4
   1f08c:	f800283a 	ret

0001f090 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1f090:	deffff04 	addi	sp,sp,-4
   1f094:	df000015 	stw	fp,0(sp)
   1f098:	d839883a 	mov	fp,sp
}
   1f09c:	e037883a 	mov	sp,fp
   1f0a0:	df000017 	ldw	fp,0(sp)
   1f0a4:	dec00104 	addi	sp,sp,4
   1f0a8:	f800283a 	ret

0001f0ac <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1f0ac:	deffff04 	addi	sp,sp,-4
   1f0b0:	df000015 	stw	fp,0(sp)
   1f0b4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1f0b8:	e037883a 	mov	sp,fp
   1f0bc:	df000017 	ldw	fp,0(sp)
   1f0c0:	dec00104 	addi	sp,sp,4
   1f0c4:	f800283a 	ret

0001f0c8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1f0c8:	deffff04 	addi	sp,sp,-4
   1f0cc:	df000015 	stw	fp,0(sp)
   1f0d0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1f0d4:	e037883a 	mov	sp,fp
   1f0d8:	df000017 	ldw	fp,0(sp)
   1f0dc:	dec00104 	addi	sp,sp,4
   1f0e0:	f800283a 	ret

0001f0e4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1f0e4:	deffff04 	addi	sp,sp,-4
   1f0e8:	df000015 	stw	fp,0(sp)
   1f0ec:	d839883a 	mov	fp,sp
}
   1f0f0:	e037883a 	mov	sp,fp
   1f0f4:	df000017 	ldw	fp,0(sp)
   1f0f8:	dec00104 	addi	sp,sp,4
   1f0fc:	f800283a 	ret

0001f100 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1f100:	deffff04 	addi	sp,sp,-4
   1f104:	df000015 	stw	fp,0(sp)
   1f108:	d839883a 	mov	fp,sp
}
   1f10c:	e037883a 	mov	sp,fp
   1f110:	df000017 	ldw	fp,0(sp)
   1f114:	dec00104 	addi	sp,sp,4
   1f118:	f800283a 	ret

0001f11c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1f11c:	defffe04 	addi	sp,sp,-8
   1f120:	df000115 	stw	fp,4(sp)
   1f124:	df000104 	addi	fp,sp,4
   1f128:	e13fff15 	stw	r4,-4(fp)
}
   1f12c:	e037883a 	mov	sp,fp
   1f130:	df000017 	ldw	fp,0(sp)
   1f134:	dec00104 	addi	sp,sp,4
   1f138:	f800283a 	ret

0001f13c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1f13c:	defffb04 	addi	sp,sp,-20
   1f140:	dfc00415 	stw	ra,16(sp)
   1f144:	df000315 	stw	fp,12(sp)
   1f148:	df000304 	addi	fp,sp,12
   1f14c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1f150:	008000b4 	movhi	r2,2
   1f154:	10889b04 	addi	r2,r2,8812
   1f158:	10800017 	ldw	r2,0(r2)
   1f15c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f160:	00003106 	br	1f228 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1f164:	e0bffd17 	ldw	r2,-12(fp)
   1f168:	10800217 	ldw	r2,8(r2)
   1f16c:	1009883a 	mov	r4,r2
   1f170:	00031ec0 	call	31ec <strlen>
   1f174:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1f178:	e0bffd17 	ldw	r2,-12(fp)
   1f17c:	10c00217 	ldw	r3,8(r2)
   1f180:	e0bffe17 	ldw	r2,-8(fp)
   1f184:	10bfffc4 	addi	r2,r2,-1
   1f188:	1885883a 	add	r2,r3,r2
   1f18c:	10800003 	ldbu	r2,0(r2)
   1f190:	10803fcc 	andi	r2,r2,255
   1f194:	1080201c 	xori	r2,r2,128
   1f198:	10bfe004 	addi	r2,r2,-128
   1f19c:	10800bd8 	cmpnei	r2,r2,47
   1f1a0:	1000031e 	bne	r2,zero,1f1b0 <alt_find_file+0x74>
    {
      len -= 1;
   1f1a4:	e0bffe17 	ldw	r2,-8(fp)
   1f1a8:	10bfffc4 	addi	r2,r2,-1
   1f1ac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f1b0:	e0bffe17 	ldw	r2,-8(fp)
   1f1b4:	e0ffff17 	ldw	r3,-4(fp)
   1f1b8:	1885883a 	add	r2,r3,r2
   1f1bc:	10800003 	ldbu	r2,0(r2)
   1f1c0:	10803fcc 	andi	r2,r2,255
   1f1c4:	1080201c 	xori	r2,r2,128
   1f1c8:	10bfe004 	addi	r2,r2,-128
   1f1cc:	10800be0 	cmpeqi	r2,r2,47
   1f1d0:	1000081e 	bne	r2,zero,1f1f4 <alt_find_file+0xb8>
   1f1d4:	e0bffe17 	ldw	r2,-8(fp)
   1f1d8:	e0ffff17 	ldw	r3,-4(fp)
   1f1dc:	1885883a 	add	r2,r3,r2
   1f1e0:	10800003 	ldbu	r2,0(r2)
   1f1e4:	10803fcc 	andi	r2,r2,255
   1f1e8:	1080201c 	xori	r2,r2,128
   1f1ec:	10bfe004 	addi	r2,r2,-128
   1f1f0:	10000a1e 	bne	r2,zero,1f21c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1f1f4:	e0bffd17 	ldw	r2,-12(fp)
   1f1f8:	10c00217 	ldw	r3,8(r2)
   1f1fc:	e0bffe17 	ldw	r2,-8(fp)
   1f200:	1809883a 	mov	r4,r3
   1f204:	e17fff17 	ldw	r5,-4(fp)
   1f208:	100d883a 	mov	r6,r2
   1f20c:	001f4c00 	call	1f4c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1f210:	1000021e 	bne	r2,zero,1f21c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1f214:	e0bffd17 	ldw	r2,-12(fp)
   1f218:	00000806 	br	1f23c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1f21c:	e0bffd17 	ldw	r2,-12(fp)
   1f220:	10800017 	ldw	r2,0(r2)
   1f224:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1f228:	e0fffd17 	ldw	r3,-12(fp)
   1f22c:	008000b4 	movhi	r2,2
   1f230:	10889b04 	addi	r2,r2,8812
   1f234:	18bfcb1e 	bne	r3,r2,1f164 <__alt_mem_Flash_flash_data+0xf401f164>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1f238:	0005883a 	mov	r2,zero
}
   1f23c:	e037883a 	mov	sp,fp
   1f240:	dfc00117 	ldw	ra,4(sp)
   1f244:	df000017 	ldw	fp,0(sp)
   1f248:	dec00204 	addi	sp,sp,8
   1f24c:	f800283a 	ret

0001f250 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1f250:	defff904 	addi	sp,sp,-28
   1f254:	dfc00615 	stw	ra,24(sp)
   1f258:	df000515 	stw	fp,20(sp)
   1f25c:	df000504 	addi	fp,sp,20
   1f260:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1f264:	00bffa04 	movi	r2,-24
   1f268:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1f26c:	008000b4 	movhi	r2,2
   1f270:	1090b204 	addi	r2,r2,17096
   1f274:	10800017 	ldw	r2,0(r2)
   1f278:	e0bffd15 	stw	r2,-12(fp)
   1f27c:	e03ffe0d 	sth	zero,-8(fp)
   1f280:	e0fffe0b 	ldhu	r3,-8(fp)
   1f284:	e0bffe84 	addi	r2,fp,-6
   1f288:	e13ffd17 	ldw	r4,-12(fp)
   1f28c:	180b883a 	mov	r5,r3
   1f290:	100d883a 	mov	r6,r2
   1f294:	00195b40 	call	195b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f298:	e03ffb15 	stw	zero,-20(fp)
   1f29c:	00001d06 	br	1f314 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1f2a0:	008000b4 	movhi	r2,2
   1f2a4:	10832c04 	addi	r2,r2,3248
   1f2a8:	e0fffb17 	ldw	r3,-20(fp)
   1f2ac:	18c00324 	muli	r3,r3,12
   1f2b0:	10c5883a 	add	r2,r2,r3
   1f2b4:	10800017 	ldw	r2,0(r2)
   1f2b8:	1000131e 	bne	r2,zero,1f308 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1f2bc:	008000b4 	movhi	r2,2
   1f2c0:	10832c04 	addi	r2,r2,3248
   1f2c4:	e0fffb17 	ldw	r3,-20(fp)
   1f2c8:	18c00324 	muli	r3,r3,12
   1f2cc:	10c5883a 	add	r2,r2,r3
   1f2d0:	e0ffff17 	ldw	r3,-4(fp)
   1f2d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1f2d8:	008000b4 	movhi	r2,2
   1f2dc:	10889f04 	addi	r2,r2,8828
   1f2e0:	10c00017 	ldw	r3,0(r2)
   1f2e4:	e0bffb17 	ldw	r2,-20(fp)
   1f2e8:	1880040e 	bge	r3,r2,1f2fc <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1f2ec:	008000b4 	movhi	r2,2
   1f2f0:	10889f04 	addi	r2,r2,8828
   1f2f4:	e0fffb17 	ldw	r3,-20(fp)
   1f2f8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1f2fc:	e0bffb17 	ldw	r2,-20(fp)
   1f300:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1f304:	00000606 	br	1f320 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1f308:	e0bffb17 	ldw	r2,-20(fp)
   1f30c:	10800044 	addi	r2,r2,1
   1f310:	e0bffb15 	stw	r2,-20(fp)
   1f314:	e0bffb17 	ldw	r2,-20(fp)
   1f318:	10800810 	cmplti	r2,r2,32
   1f31c:	103fe01e 	bne	r2,zero,1f2a0 <__alt_mem_Flash_flash_data+0xf401f2a0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1f320:	008000b4 	movhi	r2,2
   1f324:	1090b204 	addi	r2,r2,17096
   1f328:	10800017 	ldw	r2,0(r2)
   1f32c:	1009883a 	mov	r4,r2
   1f330:	00199880 	call	19988 <OSSemPost>

  return rc;
   1f334:	e0bffc17 	ldw	r2,-16(fp)
}
   1f338:	e037883a 	mov	sp,fp
   1f33c:	dfc00117 	ldw	ra,4(sp)
   1f340:	df000017 	ldw	fp,0(sp)
   1f344:	dec00204 	addi	sp,sp,8
   1f348:	f800283a 	ret

0001f34c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1f34c:	defffb04 	addi	sp,sp,-20
   1f350:	df000415 	stw	fp,16(sp)
   1f354:	df000404 	addi	fp,sp,16
   1f358:	e13ffe15 	stw	r4,-8(fp)
   1f35c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1f360:	e0bfff17 	ldw	r2,-4(fp)
   1f364:	10840070 	cmpltui	r2,r2,4097
   1f368:	1000021e 	bne	r2,zero,1f374 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1f36c:	00840004 	movi	r2,4096
   1f370:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1f374:	e0fffe17 	ldw	r3,-8(fp)
   1f378:	e0bfff17 	ldw	r2,-4(fp)
   1f37c:	1885883a 	add	r2,r3,r2
   1f380:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f384:	e0bffe17 	ldw	r2,-8(fp)
   1f388:	e0bffc15 	stw	r2,-16(fp)
   1f38c:	00000506 	br	1f3a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1f390:	e0bffc17 	ldw	r2,-16(fp)
   1f394:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1f398:	e0bffc17 	ldw	r2,-16(fp)
   1f39c:	10800804 	addi	r2,r2,32
   1f3a0:	e0bffc15 	stw	r2,-16(fp)
   1f3a4:	e0fffc17 	ldw	r3,-16(fp)
   1f3a8:	e0bffd17 	ldw	r2,-12(fp)
   1f3ac:	18bff836 	bltu	r3,r2,1f390 <__alt_mem_Flash_flash_data+0xf401f390>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1f3b0:	e0bffe17 	ldw	r2,-8(fp)
   1f3b4:	108007cc 	andi	r2,r2,31
   1f3b8:	10000226 	beq	r2,zero,1f3c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1f3bc:	e0bffc17 	ldw	r2,-16(fp)
   1f3c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1f3c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1f3c8:	e037883a 	mov	sp,fp
   1f3cc:	df000017 	ldw	fp,0(sp)
   1f3d0:	dec00104 	addi	sp,sp,4
   1f3d4:	f800283a 	ret

0001f3d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1f3d8:	defffe04 	addi	sp,sp,-8
   1f3dc:	df000115 	stw	fp,4(sp)
   1f3e0:	df000104 	addi	fp,sp,4
   1f3e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1f3e8:	e0bfff17 	ldw	r2,-4(fp)
   1f3ec:	10bffe84 	addi	r2,r2,-6
   1f3f0:	10c00428 	cmpgeui	r3,r2,16
   1f3f4:	18001a1e 	bne	r3,zero,1f460 <alt_exception_cause_generated_bad_addr+0x88>
   1f3f8:	100690ba 	slli	r3,r2,2
   1f3fc:	008000b4 	movhi	r2,2
   1f400:	10bd0404 	addi	r2,r2,-3056
   1f404:	1885883a 	add	r2,r3,r2
   1f408:	10800017 	ldw	r2,0(r2)
   1f40c:	1000683a 	jmp	r2
   1f410:	0001f450 	cmplti	zero,zero,2001
   1f414:	0001f450 	cmplti	zero,zero,2001
   1f418:	0001f460 	cmpeqi	zero,zero,2001
   1f41c:	0001f460 	cmpeqi	zero,zero,2001
   1f420:	0001f460 	cmpeqi	zero,zero,2001
   1f424:	0001f450 	cmplti	zero,zero,2001
   1f428:	0001f458 	cmpnei	zero,zero,2001
   1f42c:	0001f460 	cmpeqi	zero,zero,2001
   1f430:	0001f450 	cmplti	zero,zero,2001
   1f434:	0001f450 	cmplti	zero,zero,2001
   1f438:	0001f460 	cmpeqi	zero,zero,2001
   1f43c:	0001f450 	cmplti	zero,zero,2001
   1f440:	0001f458 	cmpnei	zero,zero,2001
   1f444:	0001f460 	cmpeqi	zero,zero,2001
   1f448:	0001f460 	cmpeqi	zero,zero,2001
   1f44c:	0001f450 	cmplti	zero,zero,2001
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1f450:	00800044 	movi	r2,1
   1f454:	00000306 	br	1f464 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1f458:	0005883a 	mov	r2,zero
   1f45c:	00000106 	br	1f464 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1f460:	0005883a 	mov	r2,zero
  }
}
   1f464:	e037883a 	mov	sp,fp
   1f468:	df000017 	ldw	fp,0(sp)
   1f46c:	dec00104 	addi	sp,sp,4
   1f470:	f800283a 	ret

0001f474 <atexit>:
   1f474:	200b883a 	mov	r5,r4
   1f478:	000d883a 	mov	r6,zero
   1f47c:	0009883a 	mov	r4,zero
   1f480:	000f883a 	mov	r7,zero
   1f484:	001f53c1 	jmpi	1f53c <__register_exitproc>

0001f488 <exit>:
   1f488:	defffe04 	addi	sp,sp,-8
   1f48c:	000b883a 	mov	r5,zero
   1f490:	dc000015 	stw	r16,0(sp)
   1f494:	dfc00115 	stw	ra,4(sp)
   1f498:	2021883a 	mov	r16,r4
   1f49c:	001f6500 	call	1f650 <__call_exitprocs>
   1f4a0:	008000b4 	movhi	r2,2
   1f4a4:	10889504 	addi	r2,r2,8788
   1f4a8:	11000017 	ldw	r4,0(r2)
   1f4ac:	20800f17 	ldw	r2,60(r4)
   1f4b0:	10000126 	beq	r2,zero,1f4b8 <exit+0x30>
   1f4b4:	103ee83a 	callr	r2
   1f4b8:	8009883a 	mov	r4,r16
   1f4bc:	001f7e40 	call	1f7e4 <_exit>

0001f4c0 <memcmp>:
   1f4c0:	01c000c4 	movi	r7,3
   1f4c4:	3980192e 	bgeu	r7,r6,1f52c <memcmp+0x6c>
   1f4c8:	2144b03a 	or	r2,r4,r5
   1f4cc:	11c4703a 	and	r2,r2,r7
   1f4d0:	10000f26 	beq	r2,zero,1f510 <memcmp+0x50>
   1f4d4:	20800003 	ldbu	r2,0(r4)
   1f4d8:	28c00003 	ldbu	r3,0(r5)
   1f4dc:	10c0151e 	bne	r2,r3,1f534 <memcmp+0x74>
   1f4e0:	31bfff84 	addi	r6,r6,-2
   1f4e4:	01ffffc4 	movi	r7,-1
   1f4e8:	00000406 	br	1f4fc <memcmp+0x3c>
   1f4ec:	20800003 	ldbu	r2,0(r4)
   1f4f0:	28c00003 	ldbu	r3,0(r5)
   1f4f4:	31bfffc4 	addi	r6,r6,-1
   1f4f8:	10c00e1e 	bne	r2,r3,1f534 <memcmp+0x74>
   1f4fc:	21000044 	addi	r4,r4,1
   1f500:	29400044 	addi	r5,r5,1
   1f504:	31fff91e 	bne	r6,r7,1f4ec <__alt_mem_Flash_flash_data+0xf401f4ec>
   1f508:	0005883a 	mov	r2,zero
   1f50c:	f800283a 	ret
   1f510:	20c00017 	ldw	r3,0(r4)
   1f514:	28800017 	ldw	r2,0(r5)
   1f518:	1880041e 	bne	r3,r2,1f52c <memcmp+0x6c>
   1f51c:	31bfff04 	addi	r6,r6,-4
   1f520:	21000104 	addi	r4,r4,4
   1f524:	29400104 	addi	r5,r5,4
   1f528:	39bff936 	bltu	r7,r6,1f510 <__alt_mem_Flash_flash_data+0xf401f510>
   1f52c:	303fe91e 	bne	r6,zero,1f4d4 <__alt_mem_Flash_flash_data+0xf401f4d4>
   1f530:	003ff506 	br	1f508 <__alt_mem_Flash_flash_data+0xf401f508>
   1f534:	10c5c83a 	sub	r2,r2,r3
   1f538:	f800283a 	ret

0001f53c <__register_exitproc>:
   1f53c:	008000b4 	movhi	r2,2
   1f540:	defffa04 	addi	sp,sp,-24
   1f544:	10889504 	addi	r2,r2,8788
   1f548:	dc000315 	stw	r16,12(sp)
   1f54c:	14000017 	ldw	r16,0(r2)
   1f550:	dc400415 	stw	r17,16(sp)
   1f554:	dfc00515 	stw	ra,20(sp)
   1f558:	80805217 	ldw	r2,328(r16)
   1f55c:	2023883a 	mov	r17,r4
   1f560:	10003626 	beq	r2,zero,1f63c <__register_exitproc+0x100>
   1f564:	10c00117 	ldw	r3,4(r2)
   1f568:	010007c4 	movi	r4,31
   1f56c:	20c00e16 	blt	r4,r3,1f5a8 <__register_exitproc+0x6c>
   1f570:	1a400044 	addi	r9,r3,1
   1f574:	8800211e 	bne	r17,zero,1f5fc <__register_exitproc+0xc0>
   1f578:	18c00084 	addi	r3,r3,2
   1f57c:	18c7883a 	add	r3,r3,r3
   1f580:	18c7883a 	add	r3,r3,r3
   1f584:	12400115 	stw	r9,4(r2)
   1f588:	10c7883a 	add	r3,r2,r3
   1f58c:	19400015 	stw	r5,0(r3)
   1f590:	0005883a 	mov	r2,zero
   1f594:	dfc00517 	ldw	ra,20(sp)
   1f598:	dc400417 	ldw	r17,16(sp)
   1f59c:	dc000317 	ldw	r16,12(sp)
   1f5a0:	dec00604 	addi	sp,sp,24
   1f5a4:	f800283a 	ret
   1f5a8:	00800034 	movhi	r2,0
   1f5ac:	10800004 	addi	r2,r2,0
   1f5b0:	10002526 	beq	r2,zero,1f648 <__register_exitproc+0x10c>
   1f5b4:	01006404 	movi	r4,400
   1f5b8:	d9400015 	stw	r5,0(sp)
   1f5bc:	d9800115 	stw	r6,4(sp)
   1f5c0:	d9c00215 	stw	r7,8(sp)
   1f5c4:	00000000 	call	0 <__alt_mem_SDRAM>
   1f5c8:	d9400017 	ldw	r5,0(sp)
   1f5cc:	d9800117 	ldw	r6,4(sp)
   1f5d0:	d9c00217 	ldw	r7,8(sp)
   1f5d4:	10001c26 	beq	r2,zero,1f648 <__register_exitproc+0x10c>
   1f5d8:	80c05217 	ldw	r3,328(r16)
   1f5dc:	10000115 	stw	zero,4(r2)
   1f5e0:	02400044 	movi	r9,1
   1f5e4:	10c00015 	stw	r3,0(r2)
   1f5e8:	80805215 	stw	r2,328(r16)
   1f5ec:	10006215 	stw	zero,392(r2)
   1f5f0:	10006315 	stw	zero,396(r2)
   1f5f4:	0007883a 	mov	r3,zero
   1f5f8:	883fdf26 	beq	r17,zero,1f578 <__alt_mem_Flash_flash_data+0xf401f578>
   1f5fc:	18d1883a 	add	r8,r3,r3
   1f600:	4211883a 	add	r8,r8,r8
   1f604:	1211883a 	add	r8,r2,r8
   1f608:	41802215 	stw	r6,136(r8)
   1f60c:	01000044 	movi	r4,1
   1f610:	11806217 	ldw	r6,392(r2)
   1f614:	20c8983a 	sll	r4,r4,r3
   1f618:	310cb03a 	or	r6,r6,r4
   1f61c:	11806215 	stw	r6,392(r2)
   1f620:	41c04215 	stw	r7,264(r8)
   1f624:	01800084 	movi	r6,2
   1f628:	89bfd31e 	bne	r17,r6,1f578 <__alt_mem_Flash_flash_data+0xf401f578>
   1f62c:	11806317 	ldw	r6,396(r2)
   1f630:	3108b03a 	or	r4,r6,r4
   1f634:	11006315 	stw	r4,396(r2)
   1f638:	003fcf06 	br	1f578 <__alt_mem_Flash_flash_data+0xf401f578>
   1f63c:	80805304 	addi	r2,r16,332
   1f640:	80805215 	stw	r2,328(r16)
   1f644:	003fc706 	br	1f564 <__alt_mem_Flash_flash_data+0xf401f564>
   1f648:	00bfffc4 	movi	r2,-1
   1f64c:	003fd106 	br	1f594 <__alt_mem_Flash_flash_data+0xf401f594>

0001f650 <__call_exitprocs>:
   1f650:	008000b4 	movhi	r2,2
   1f654:	10889504 	addi	r2,r2,8788
   1f658:	10800017 	ldw	r2,0(r2)
   1f65c:	defff404 	addi	sp,sp,-48
   1f660:	dd800815 	stw	r22,32(sp)
   1f664:	d8800015 	stw	r2,0(sp)
   1f668:	10805204 	addi	r2,r2,328
   1f66c:	dd000615 	stw	r20,24(sp)
   1f670:	dc800415 	stw	r18,16(sp)
   1f674:	dfc00b15 	stw	ra,44(sp)
   1f678:	df000a15 	stw	fp,40(sp)
   1f67c:	ddc00915 	stw	r23,36(sp)
   1f680:	dd400715 	stw	r21,28(sp)
   1f684:	dcc00515 	stw	r19,20(sp)
   1f688:	dc400315 	stw	r17,12(sp)
   1f68c:	dc000215 	stw	r16,8(sp)
   1f690:	2025883a 	mov	r18,r4
   1f694:	2829883a 	mov	r20,r5
   1f698:	d8800115 	stw	r2,4(sp)
   1f69c:	05bfffc4 	movi	r22,-1
   1f6a0:	d8800017 	ldw	r2,0(sp)
   1f6a4:	14c05217 	ldw	r19,328(r2)
   1f6a8:	98001d26 	beq	r19,zero,1f720 <__call_exitprocs+0xd0>
   1f6ac:	dd400117 	ldw	r21,4(sp)
   1f6b0:	98800117 	ldw	r2,4(r19)
   1f6b4:	173fffc4 	addi	fp,r2,-1
   1f6b8:	e0000d16 	blt	fp,zero,1f6f0 <__call_exitprocs+0xa0>
   1f6bc:	14000044 	addi	r16,r2,1
   1f6c0:	8421883a 	add	r16,r16,r16
   1f6c4:	8421883a 	add	r16,r16,r16
   1f6c8:	84402004 	addi	r17,r16,128
   1f6cc:	9c63883a 	add	r17,r19,r17
   1f6d0:	9c21883a 	add	r16,r19,r16
   1f6d4:	a0001e26 	beq	r20,zero,1f750 <__call_exitprocs+0x100>
   1f6d8:	80804017 	ldw	r2,256(r16)
   1f6dc:	15001c26 	beq	r2,r20,1f750 <__call_exitprocs+0x100>
   1f6e0:	e73fffc4 	addi	fp,fp,-1
   1f6e4:	843fff04 	addi	r16,r16,-4
   1f6e8:	8c7fff04 	addi	r17,r17,-4
   1f6ec:	e5bff91e 	bne	fp,r22,1f6d4 <__alt_mem_Flash_flash_data+0xf401f6d4>
   1f6f0:	00800034 	movhi	r2,0
   1f6f4:	10800004 	addi	r2,r2,0
   1f6f8:	10000926 	beq	r2,zero,1f720 <__call_exitprocs+0xd0>
   1f6fc:	98800117 	ldw	r2,4(r19)
   1f700:	1000311e 	bne	r2,zero,1f7c8 <__call_exitprocs+0x178>
   1f704:	98800017 	ldw	r2,0(r19)
   1f708:	10003426 	beq	r2,zero,1f7dc <__call_exitprocs+0x18c>
   1f70c:	9809883a 	mov	r4,r19
   1f710:	a8800015 	stw	r2,0(r21)
   1f714:	00000000 	call	0 <__alt_mem_SDRAM>
   1f718:	acc00017 	ldw	r19,0(r21)
   1f71c:	983fe41e 	bne	r19,zero,1f6b0 <__alt_mem_Flash_flash_data+0xf401f6b0>
   1f720:	dfc00b17 	ldw	ra,44(sp)
   1f724:	df000a17 	ldw	fp,40(sp)
   1f728:	ddc00917 	ldw	r23,36(sp)
   1f72c:	dd800817 	ldw	r22,32(sp)
   1f730:	dd400717 	ldw	r21,28(sp)
   1f734:	dd000617 	ldw	r20,24(sp)
   1f738:	dcc00517 	ldw	r19,20(sp)
   1f73c:	dc800417 	ldw	r18,16(sp)
   1f740:	dc400317 	ldw	r17,12(sp)
   1f744:	dc000217 	ldw	r16,8(sp)
   1f748:	dec00c04 	addi	sp,sp,48
   1f74c:	f800283a 	ret
   1f750:	98800117 	ldw	r2,4(r19)
   1f754:	80c00017 	ldw	r3,0(r16)
   1f758:	10bfffc4 	addi	r2,r2,-1
   1f75c:	17001526 	beq	r2,fp,1f7b4 <__call_exitprocs+0x164>
   1f760:	80000015 	stw	zero,0(r16)
   1f764:	183fde26 	beq	r3,zero,1f6e0 <__alt_mem_Flash_flash_data+0xf401f6e0>
   1f768:	00800044 	movi	r2,1
   1f76c:	1708983a 	sll	r4,r2,fp
   1f770:	98806217 	ldw	r2,392(r19)
   1f774:	9dc00117 	ldw	r23,4(r19)
   1f778:	2084703a 	and	r2,r4,r2
   1f77c:	1000061e 	bne	r2,zero,1f798 <__call_exitprocs+0x148>
   1f780:	183ee83a 	callr	r3
   1f784:	98800117 	ldw	r2,4(r19)
   1f788:	15ffc51e 	bne	r2,r23,1f6a0 <__alt_mem_Flash_flash_data+0xf401f6a0>
   1f78c:	a8800017 	ldw	r2,0(r21)
   1f790:	14ffd326 	beq	r2,r19,1f6e0 <__alt_mem_Flash_flash_data+0xf401f6e0>
   1f794:	003fc206 	br	1f6a0 <__alt_mem_Flash_flash_data+0xf401f6a0>
   1f798:	98806317 	ldw	r2,396(r19)
   1f79c:	2084703a 	and	r2,r4,r2
   1f7a0:	1000061e 	bne	r2,zero,1f7bc <__call_exitprocs+0x16c>
   1f7a4:	89400017 	ldw	r5,0(r17)
   1f7a8:	9009883a 	mov	r4,r18
   1f7ac:	183ee83a 	callr	r3
   1f7b0:	003ff406 	br	1f784 <__alt_mem_Flash_flash_data+0xf401f784>
   1f7b4:	9f000115 	stw	fp,4(r19)
   1f7b8:	003fea06 	br	1f764 <__alt_mem_Flash_flash_data+0xf401f764>
   1f7bc:	89000017 	ldw	r4,0(r17)
   1f7c0:	183ee83a 	callr	r3
   1f7c4:	003fef06 	br	1f784 <__alt_mem_Flash_flash_data+0xf401f784>
   1f7c8:	98800017 	ldw	r2,0(r19)
   1f7cc:	982b883a 	mov	r21,r19
   1f7d0:	1027883a 	mov	r19,r2
   1f7d4:	983fb61e 	bne	r19,zero,1f6b0 <__alt_mem_Flash_flash_data+0xf401f6b0>
   1f7d8:	003fd106 	br	1f720 <__alt_mem_Flash_flash_data+0xf401f720>
   1f7dc:	0005883a 	mov	r2,zero
   1f7e0:	003ffa06 	br	1f7cc <__alt_mem_Flash_flash_data+0xf401f7cc>

0001f7e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1f7e4:	defffd04 	addi	sp,sp,-12
   1f7e8:	df000215 	stw	fp,8(sp)
   1f7ec:	df000204 	addi	fp,sp,8
   1f7f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1f7f4:	008000b4 	movhi	r2,2
   1f7f8:	1090ba44 	addi	r2,r2,17129
   1f7fc:	10000005 	stb	zero,0(r2)
   1f800:	e0bfff17 	ldw	r2,-4(fp)
   1f804:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1f808:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1f80c:	10000226 	beq	r2,zero,1f818 <_exit+0x34>
    ALT_SIM_FAIL();
   1f810:	002af070 	cmpltui	zero,zero,43969
   1f814:	00000106 	br	1f81c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1f818:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1f81c:	003fff06 	br	1f81c <__alt_mem_Flash_flash_data+0xf401f81c>
