
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00020e68 memsz 0x00020e68 flags r-x
    LOAD off    0x00021e88 vaddr 0x00020e88 paddr 0x00022db4 align 2**12
         filesz 0x00001f2c memsz 0x00001f2c flags rw-
    LOAD off    0x00024ce0 vaddr 0x00024ce0 paddr 0x00024ce0 align 2**12
         filesz 0x00000000 memsz 0x000254d0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ff44  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d00  00020188  00020188  00021188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f2c  00020e88  00022db4  00021e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000254d0  00024ce0  00024ce0  00024ce0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0004a1b0  0004a1b0  00023db4  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00023db4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023db4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00023dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00035048  00000000  00000000  00024f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c25f  00000000  00000000  00059fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000108ef  00000000  00000000  0006623f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004084  00000000  00000000  00076b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005784  00000000  00000000  0007abb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b16c  00000000  00000000  00080338  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009b4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001990  00000000  00000000  0009b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a309c  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a30a2  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a30a7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a30a8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a30a9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a30ad  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a30b1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a30b5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a30be  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a30c7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a30d0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a30db  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a3139  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000adcfe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00020188 l    d  .rodata	00000000 .rodata
00020e88 l    d  .rwdata	00000000 .rwdata
00024ce0 l    d  .bss	00000000 .bss
0004a1b0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000208d6 l     O .rodata	00000010 zeroes.4240
000208e6 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
000208f6 l     O .rodata	00000010 zeroes.4255
00007af0 l     F .text	000000bc __sbprintf
00020906 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007d00 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000098bc l     F .text	00000008 __fp_lock
000098c4 l     F .text	00000008 __fp_unlock
000098d8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00020e88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000212cc l     O .rwdata	00000020 lc_ctype_charset
000212ac l     O .rwdata	00000020 lc_message_charset
000212ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00020938 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020a5c l     O .rodata	00000010 zeroes.4184
00020a6c l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000df4c l     F .text	000000fc __sprint_r.part.0
00020a8c l     O .rodata	00000010 blanks.4199
00020a7c l     O .rodata	00000010 zeroes.4200
0000f354 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010858 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00012f84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000130a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000130d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000131d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000132c4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000133a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000135a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022d28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000137fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022d2c l     O .rwdata	00000004 lockid
00024d88 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00022d30 l     O .rwdata	00000004 lockid
00024d90 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00015230 l     F .text	00000044 OS_InitMisc
00015274 l     F .text	00000068 OS_InitRdyList
000153d4 l     F .text	000000e0 OS_InitTCBList
00015154 l     F .text	000000dc OS_InitEventList
000152dc l     F .text	0000007c OS_InitTaskIdle
00015358 l     F .text	0000007c OS_InitTaskStat
00015634 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00017438 l     F .text	00000110 OS_FlagTaskRdy
00017190 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001c468 l     F .text	00000038 alt_dev_reg
000218d4 l     O .rwdata	0000106c JTAG_UART
00022940 l     O .rwdata	00000030 AV_Config
00022970 l     O .rwdata	00000030 Audio_Subsystem_Audio
000229a0 l     O .rwdata	0000002c Char_LCD_16x2
000229cc l     O .rwdata	0000002c IrDA
000229f8 l     O .rwdata	0000002c Expansion_JP5
00022a24 l     O .rwdata	0000002c Green_LEDs
00022a50 l     O .rwdata	0000002c HEX3_HEX0
00022a7c l     O .rwdata	0000002c HEX7_HEX4
00022aa8 l     O .rwdata	0000002c Pushbuttons
00022ad4 l     O .rwdata	0000002c Red_LEDs
00022b00 l     O .rwdata	0000002c Slider_Switches
00022b2c l     O .rwdata	00000038 PS2_Port
00022b64 l     O .rwdata	00000038 PS2_Port_Dual
00022b9c l     O .rwdata	0000002c Serial_Port
00022bc8 l     O .rwdata	00000034 USB
00022bfc l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00022c44 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00022c98 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001cb50 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001cdf8 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001d5d0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001edec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001f058 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001f340 l     F .text	00000050 alt_get_errno
0001f390 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024df4 g     O .bss	00000004 alt_instruction_exception_handler
0000c3c0 g     F .text	00000074 _mprec_log10
00022d7e g     O .rwdata	00000002 OSTaskNameSize
0000c4ac g     F .text	0000008c __any_on
0000f8c0 g     F .text	00000054 _isatty_r
00020944 g     O .rodata	00000028 __mprec_tinytens
000134cc g     F .text	000000d4 alt_main
000039d4 g     F .text	000000a8 _puts_r
0004a0b0 g     O .bss	00000100 alt_irq
0001e1ac g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000f914 g     F .text	0000005c _lseek_r
00018824 g     F .text	000000d0 OS_MemInit
00022db4 g       *ABS*	00000000 __flash_rwdata_start
0001c404 g     F .text	00000064 OSTimeSet
0001d73c g     F .text	0000003c alt_up_character_lcd_send_cmd
00011aec g     F .text	00000084 .hidden __eqdf2
00013eac g     F .text	00000610 OSEventPendMulti
0004a1b0 g       *ABS*	00000000 __alt_heap_start
0001f99c g     F .text	00000020 OSTaskCreateHook
00003998 g     F .text	0000003c printf
00022d56 g     O .rwdata	00000002 OSMboxEn
00024d10 g     O .bss	00000004 random
00014510 g     F .text	0000007c OSIntEnter
0000fb20 g     F .text	0000009c _wcrtomb_r
0000cc40 g     F .text	0000005c __sseek
00009c0c g     F .text	00000010 __sinit
0001eb34 g     F .text	00000100 alt_up_char_buffer_string
0000f9cc g     F .text	00000138 __swbuf_r
0001dfcc g     F .text	00000034 read_CE_bit
00022d66 g     O .rwdata	00000002 OSQEn
000019f4 g     F .text	000002a0 Tutorial
0000a6b8 g     F .text	0000007c _setlocale_r
00009a74 g     F .text	00000068 __sfmoreglue
00013b80 g     F .text	000000d0 __malloc_unlock
0001f9f8 g     F .text	0000001c OSTaskStatHook
0001e350 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001e844 g     F .text	00000090 alt_up_rs232_read_fd
00024d98 g     O .bss	00000001 OSLockNesting
000023f8 g     F .text	000000ec menu
00022da4 g     O .rwdata	00000002 OSDataSize
00024d99 g     O .bss	00000001 OSRunning
0001ea68 g     F .text	000000cc alt_up_char_buffer_draw
00024e20 g     O .bss	00009c40 Singleplayer_stk
00024ce0 g     O .bss	00000004 counter3
0000b318 g     F .text	0000015c memmove
0001fa30 g     F .text	0000001c OSInitHookBegin
00022d9c g     O .rwdata	00000002 OSTmrSize
00009bf4 g     F .text	00000018 _cleanup
0000b598 g     F .text	000000a8 _Balloc
00022cd0 g     O .rwdata	00000004 gameModeMenu
00024d9c g     O .bss	00000004 OSIdleCtr
00011b70 g     F .text	000000e0 .hidden __gtdf2
00022cd8 g     O .rwdata	00000004 xRechts
0001f750 g     F .text	00000020 altera_nios2_gen2_irq_init
0001f81c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001d6c8 g     F .text	00000074 get_DDRAM_addr
0001596c g     F .text	000002d4 OS_TCBInit
00022ce8 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
00022da2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00022d42 g     O .rwdata	00000002 OSEventSize
00024da0 g     O .bss	00000001 OSPrioHighRdy
0000f868 g     F .text	00000058 _fstat_r
0001f9bc g     F .text	00000020 OSTaskDelHook
00024d74 g     O .bss	00000004 errno
0000cbbc g     F .text	00000008 __seofread
0001f7fc g       .text	00000000 OSStartHighRdy
00024d14 g     O .bss	00000004 pixel_buffer_y
0001ad08 g     F .text	000001ec OSTaskCreateExt
0000cf14 g     F .text	00001038 ___svfiprintf_internal_r
00016cdc g     F .text	00000068 OSFlagPendGetFlagsRdy
00022d82 g     O .rwdata	00000002 OSTaskStatStkSize
00015dcc g     F .text	00000308 OSFlagAccept
00018ef8 g     F .text	000000b8 OSQFlush
000188f4 g     F .text	00000140 OSQAccept
00024d80 g     O .bss	00000004 alt_argv
00001764 g     F .text	00000290 endTutorial
00024d18 g     O .bss	00000004 score1
0002acc4 g       *ABS*	00000000 _gp
0001ab4c g     F .text	000001bc OSTaskCreate
0001a60c g     F .text	00000540 OSTaskChangePrio
00024d94 g     O .bss	00000004 alt_heapsem
000031b0 g     F .text	0000003c del_middenlijn
00015c40 g     F .text	0000018c OSDebugInit
0001aef4 g     F .text	000003e0 OSTaskDel
00022cdc g     O .rwdata	00000004 xBoven
00021754 g     O .rwdata	00000180 alt_fd_list
00022cf0 g     O .rwdata	00000004 onePress
00046e8c g     O .bss	00000370 OSFlagTbl
00014f40 g     F .text	000000b4 OS_EventTaskRemove
0001ef98 g     F .text	00000090 alt_find_dev
0000b1e0 g     F .text	00000138 memcpy
00022d6c g     O .rwdata	00000002 OSRdyTblSize
0001d8d8 g     F .text	00000050 alt_up_character_lcd_write_fd
0001ec34 g     F .text	0000005c alt_up_char_buffer_clear
000098cc g     F .text	0000000c _cleanup_r
00012dac g     F .text	000000d0 .hidden __floatsidf
0001f118 g     F .text	00000078 alt_io_redirect
00011c50 g     F .text	000000e0 .hidden __ltdf2
00020188 g       *ABS*	00000000 __DTOR_END__
0001de58 g     F .text	00000090 alt_up_irda_write_fd
0001e7d0 g     F .text	00000074 alt_up_rs232_read_data
00003a7c g     F .text	00000014 puts
0001fd40 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013c50 g     F .text	00000120 OSEventNameGet
00022d50 g     O .rwdata	00000002 OSFlagMax
0000caa0 g     F .text	00000074 __fpclassifyd
00024d4c g     O .bss	00000004 last
0000c31c g     F .text	000000a4 __ratio
0001458c g     F .text	000000f4 OSIntExit
0000f330 g     F .text	00000024 __vfiprintf_internal
00022d8a g     O .rwdata	00000002 OSTCBSize
00024da1 g     O .bss	00000001 OSPrioCur
0001dc54 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001d05c g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000396c g     F .text	0000002c _printf_r
00010974 g     F .text	00000008 .hidden __udivsi3
00013220 g     F .text	000000a4 isatty
00022d70 g     O .rwdata	00000002 OSStkWidth
00020994 g     O .rodata	000000c8 __mprec_tens
00022d64 g     O .rwdata	00000002 OSPtrSize
0000a734 g     F .text	0000000c __locale_charset
00022d44 g     O .rwdata	00000002 OSEventTblSize
0001dbf8 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00022ce4 g     O .rwdata	00000004 xMenu
0001f770 g       .text	00000000 OSCtxSw
0001fcb4 g     F .text	0000008c alt_icache_flush
00024d70 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00024da4 g     O .bss	00000004 OSTCBList
00024ce4 g     O .bss	00000004 gpio_dev
00022ccc g     O .rwdata	00000004 leven
00024d78 g     O .bss	00000004 alt_fd_list_lock
00022d00 g     O .rwdata	00000004 __mb_cur_max
0000a764 g     F .text	0000000c _localeconv_r
0000b9a4 g     F .text	0000003c __i2b
0000a070 g     F .text	000004c0 __sfvwrite_r
000471fc g     O .bss	00000c30 OSMemTbl
00024da8 g     O .bss	00000001 OSTickStepState
0000cb14 g     F .text	00000054 _sbrk_r
0002ea60 g     O .bss	00002004 menu_stk
00022d68 g     O .rwdata	00000002 OSQMax
00047e2c g     O .bss	00000800 OSTaskStatStk
00018454 g     F .text	000000f8 OSMemNameGet
00022d48 g     O .rwdata	00000002 OSFlagEn
0000f970 g     F .text	0000005c _read_r
00022d8e g     O .rwdata	00000002 OSTimeTickHookEn
00019418 g     F .text	00000168 OSQPost
00017548 g     F .text	000000a0 OS_FlagUnlink
00022d20 g     O .rwdata	00000004 alt_max_fd
0001e74c g     F .text	00000044 alt_up_rs232_check_parity
00015504 g     F .text	00000064 OS_MemCopy
00015568 g     F .text	000000cc OS_Sched
0000f584 g     F .text	000000f0 _fclose_r
00018364 g     F .text	000000f0 OSMemGet
00018060 g     F .text	00000110 OSMboxQuery
0001b5d4 g     F .text	000001c0 OSTaskNameSet
0001e000 g     F .text	00000030 read_num_bytes_available
0000988c g     F .text	00000030 fflush
00024d6c g     O .bss	00000004 __malloc_max_sbrked_mem
00024dac g     O .bss	00000004 OSCtxSwCtr
0001fa14 g     F .text	0000001c OSTimeTickHook
0001f190 g     F .text	000001b0 alt_irq_register
00022d52 g     O .rwdata	00000002 OSFlagNameSize
0001df68 g     F .text	00000034 read_RI_bit
00014ff4 g     F .text	000000fc OS_EventTaskRemoveMulti
00024ce8 g     O .bss	00000004 controllerSem
00010984 g     F .text	0000089c .hidden __adddf3
00014df4 g     F .text	0000014c OS_EventTaskWaitMulti
0000c0c4 g     F .text	0000011c __b2d
00022d6a g     O .rwdata	00000002 OSQSize
000102c8 g     F .text	00000590 .hidden __umoddi3
000133f8 g     F .text	000000d4 lseek
00019f1c g     F .text	00000268 OSSemPend
00022cf8 g     O .rwdata	00000004 _global_impure_ptr
0000c538 g     F .text	00000568 _realloc_r
00024d48 g     O .bss	00000004 vorige
00022d54 g     O .rwdata	00000002 OSLowestPrio
0004a1b0 g       *ABS*	00000000 __bss_end
0001fa84 g     F .text	00000020 OSTCBInitHook
00022d9a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001f64c g     F .text	00000104 alt_tick
00017df4 g     F .text	00000110 OSMboxPost
00024cec g     O .bss	00000004 counter1
0000fd08 g     F .text	000005c0 .hidden __udivdi3
0000f688 g     F .text	00000184 _fputwc_r
00022d3c g     O .rwdata	00000002 OSEventEn
0002096c g     O .rodata	00000028 __mprec_bigtens
0000b788 g     F .text	00000104 __s2b
00022d96 g     O .rwdata	00000002 OSTmrCfgNameSize
00001030 g     F .text	00000040 dakjeOmlaag
00012e7c g     F .text	000000a4 .hidden __floatunsidf
0000be6c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001e064 g     F .text	0000002c read_data_byte
000023ac g     F .text	0000004c terugMenu
00009c2c g     F .text	00000018 __fp_lock_all
00017354 g     F .text	000000e4 OS_FlagInit
0001f5b4 g     F .text	00000098 alt_alarm_stop
00024cf0 g     O .bss	00000004 Flags_Games
0001df9c g     F .text	00000030 read_RE_bit
00022d78 g     O .rwdata	00000002 OSTaskIdleStkSize
00024de8 g     O .bss	00000004 alt_irq_active
00019b04 g     F .text	000000b0 OSSemAccept
000030b8 g     F .text	00000090 VGA_text
00018664 g     F .text	000000d8 OSMemPut
00024d1c g     O .bss	00000004 pixel_buffer_x
00018170 g     F .text	000001f4 OSMemCreate
00024db0 g     O .bss	00000004 OSIdleCtrMax
00030a64 g     O .bss	00002004 controller1_stk
0001dc94 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002172c g     O .rwdata	00000028 alt_dev_null
00022d8c g     O .rwdata	00000002 OSTicksPerSec
00024d20 g     O .bss	00000004 Flags_Highscores
0001db6c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001df28 g     F .text	00000040 alt_up_parallel_port_open_dev
0001f770 g       .text	00000000 OSIntCtxSw
0001e208 g     F .text	00000074 alt_up_ps2_write_data_byte
00000e74 g     F .text	0000017c endGame
0001edd0 g     F .text	0000001c alt_dcache_flush_all
0000b88c g     F .text	00000068 __hi0bits
00012d24 g     F .text	00000088 .hidden __fixdfsi
00000ff0 g     F .text	00000040 dakjeOmhoog
00024db4 g     O .bss	00000004 OSTCBFreeList
00022db4 g       *ABS*	00000000 __ram_rwdata_end
0001a184 g     F .text	0000016c OSSemPendAbort
00022d18 g     O .rwdata	00000008 alt_dev_list
0001384c g     F .text	000000f8 write
00032a68 g     O .bss	00002004 Tutorial_stk
00022d90 g     O .rwdata	00000002 OSVersionNbr
00020e88 g       *ABS*	00000000 __ram_rodata_end
00013120 g     F .text	000000b0 fstat
0001e8d4 g     F .text	00000094 alt_up_rs232_write_fd
000024e4 g     F .text	0000049c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011c50 g     F .text	000000e0 .hidden __ledf2
00022d38 g     O .rwdata	00000004 OSEndiannessTest
0000bbdc g     F .text	00000140 __pow5mult
0000e060 g     F .text	000012d0 ___vfiprintf_internal_r
00024d64 g     O .bss	00000004 __nlocale_changed
0001097c g     F .text	00000008 .hidden __umodsi3
00022d4a g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
0004a1b0 g       *ABS*	00000000 end
0001e544 g     F .text	00000098 alt_up_ps2_write_fd
0001dcd0 g     F .text	00000044 alt_up_irda_check_parity
0001e9a8 g     F .text	00000080 alt_up_char_buffer_init
00002b40 g     F .text	00000238 teken_menu
0001ca10 g     F .text	00000140 altera_avalon_jtag_uart_init
000157c8 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	000004b8 Game
00022cc8 g     O .rwdata	00000004 check
00020188 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001d648 g     F .text	00000080 alt_avalon_timer_sc_init
00012f20 g     F .text	00000064 .hidden __clzsi2
0001d310 g     F .text	000002c0 altera_avalon_jtag_uart_write
00009c1c g     F .text	00000004 __sfp_lock_acquire
0000b0f8 g     F .text	000000e8 memchr
000154b4 g     F .text	00000050 OS_MemClr
0001d7ec g     F .text	00000078 alt_up_character_lcd_write
00005b7c g     F .text	00001f50 ___vfprintf_internal_r
0001f840 g     F .text	0000015c OSTaskStkInit
00003a90 g     F .text	00000058 _sprintf_r
00009d80 g     F .text	000002f0 _free_r
0000a740 g     F .text	00000010 __locale_mb_cur_max
00014b50 g     F .text	00000198 OS_EventTaskRdy
0001ffb8 g     F .text	00000194 __call_exitprocs
00024db8 g     O .bss	00000001 OSCPUUsage
00024d60 g     O .bss	00000004 __mlocale_changed
00022d04 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0000325c g     F .text	0000003c deleteNummer
00024dec g     O .bss	00000004 _alt_tick_rate
00018fb0 g     F .text	000002fc OSQPend
00034a6c g     O .bss	00002004 newHighscores_stk
0001bf00 g     F .text	00000148 OSTimeDly
00036a70 g     O .bss	00002004 controller2_stk
0000bd1c g     F .text	00000150 __lshift
00024df0 g     O .bss	00000004 _alt_nticks
000135f0 g     F .text	000000fc read
0001c4d4 g     F .text	000003d8 alt_sys_init
0001da24 g     F .text	00000088 alt_up_character_lcd_shift_display
0000cd48 g     F .text	000001cc __ssprint_r
0001fea4 g     F .text	00000114 __register_exitproc
00024db9 g     O .bss	00000001 OSTaskCtr
0001e464 g     F .text	00000054 alt_up_ps2_clear_fifo
0001e710 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00024d08 g     O .bss	00000004 score2
00024cf4 g     O .bss	00000004 MailBox2
00003004 g     F .text	000000b4 VGA_box
0001c048 g     F .text	00000168 OSTimeDlyHMSM
000011fc g     F .text	00000414 Singleplayer
0000b9e0 g     F .text	000001fc __multiply
0001daac g     F .text	0000008c alt_up_character_lcd_erase_pos
0001cf08 g     F .text	00000068 altera_avalon_jtag_uart_close
00020e88 g       *ABS*	00000000 __ram_rwdata_start
00020188 g       *ABS*	00000000 __ram_rodata_start
00024df8 g     O .bss	00000028 __malloc_current_mallinfo
00022d3e g     O .rwdata	00000002 OSEventMax
0000c1e0 g     F .text	0000013c __d2b
0001a2f0 g     F .text	00000110 OSSemPost
00014708 g     F .text	000000d8 OSSchedUnlock
00003148 g     F .text	00000068 draw_middenlijn
0001c8ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001fbb8 g     F .text	000000fc alt_get_fd
00024dbc g     O .bss	00000004 OSMemFreeList
0001484c g     F .text	000000ac OSStatInit
000170cc g     F .text	000000c4 OSFlagQuery
00022d74 g     O .rwdata	00000002 OSTaskCreateExtEn
0000f46c g     F .text	00000054 _close_r
0001fe28 g     F .text	0000007c memcmp
00014b34 g     F .text	0000001c OS_Dummy
0001c96c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0004a1b0 g       *ABS*	00000000 __alt_stack_base
0001c9bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00024d50 g     O .bss	00000004 changed
0001dba0 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00007bac g     F .text	00000154 __swsetup_r
00038a74 g     O .bss	00002004 Highscores_stk
0004862c g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
00011220 g     F .text	000008cc .hidden __divdf3
00009adc g     F .text	00000118 __sfp
0000c434 g     F .text	00000078 __copybits
00021324 g     O .rwdata	00000408 __malloc_av_
00024d24 g     O .bss	00000004 ALT_y
00009c28 g     F .text	00000004 __sinit_lock_release
00024dc0 g     O .bss	00000004 OSTCBHighRdy
00011d30 g     F .text	00000724 .hidden __muldf3
0000cb68 g     F .text	00000054 __sread
00024dc4 g     O .bss	00000004 OSQFreeList
0001e674 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001faa4 g     F .text	00000114 alt_find_file
0001ee3c g     F .text	000000a4 alt_dev_llist_insert
00013a60 g     F .text	00000120 __malloc_lock
0001374c g     F .text	000000b0 sbrk
00003bec g     F .text	00001f90 ___svfprintf_internal_r
00024d28 g     O .bss	00000004 ALT_inc_y
00013d70 g     F .text	0000013c OSEventNameSet
00009830 g     F .text	0000005c _fflush_r
0000f4c0 g     F .text	000000c4 _calloc_r
00024dc8 g     O .bss	00000001 OSRdyGrp
00024ce0 g       *ABS*	00000000 __bss_start
0000b474 g     F .text	00000124 memset
00002d78 g     F .text	0000028c main
00024d84 g     O .bss	00000004 alt_envp
00024d68 g     O .bss	00000004 __malloc_max_total_mem
0001ea28 g     F .text	00000040 alt_up_char_buffer_open_dev
0001c90c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000fb04 g     F .text	0000001c __swbuf
00020bb8 g     O .rodata	00000100 OSUnMapTbl
00022d6e g     O .rwdata	00000002 OSSemEn
0001d99c g     F .text	00000088 alt_up_character_lcd_shift_cursor
00016d44 g     F .text	00000388 OSFlagPost
0000cc9c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000f674 g     F .text	00000014 fclose
00014ce8 g     F .text	0000010c OS_EventTaskWait
0001e3f4 g     F .text	00000070 alt_up_ps2_read_data_byte
00024d58 g     O .bss	00000004 timeout
000158a4 g     F .text	000000c8 OS_TaskStatStkChk
0001b2d4 g     F .text	00000158 OSTaskDelReq
00007f00 g     F .text	00001728 _dtoa_r
0000a950 g     F .text	000007a8 _malloc_r
0000fc7c g     F .text	00000030 __ascii_wctomb
00022d24 g     O .rwdata	00000004 alt_errno
000147e0 g     F .text	0000006c OSStart
00024d2c g     O .bss	00000004 Flags_newHighscores
00013a04 g     F .text	0000005c __env_unlock
0000a530 g     F .text	000000c4 _fwalk
0001b794 g     F .text	000001f8 OSTaskResume
0001873c g     F .text	000000e8 OSMemQuery
00022d80 g     O .rwdata	00000002 OSTaskStatEn
0003aa78 g     O .bss	00009c40 Game_stk
0001dd14 g     F .text	00000040 alt_up_irda_write_data
00022d5a g     O .rwdata	00000002 OSMemMax
00019580 g     F .text	00000170 OSQPostFront
0001e5dc g     F .text	00000040 alt_up_ps2_open_dev
000108c4 g     F .text	00000054 .hidden __divsi3
00024dc9 g     O .bss	00000003 OSRdyTbl
00022d34 g     O .rwdata	00000002 OSDebugEn
0001d7ac g     F .text	00000040 alt_up_character_lcd_open_dev
00009c5c g     F .text	00000124 _malloc_trim_r
0001e154 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00020188 g       *ABS*	00000000 __CTOR_END__
00022d4c g     O .rwdata	00000002 OSFlagNodeSize
00022d94 g     O .rwdata	00000002 OSTmrCfgMax
0001d778 g     F .text	00000034 alt_up_character_lcd_init
0000cca4 g     F .text	000000a4 strcmp
00018a34 g     F .text	000001fc OSQCreate
0001b42c g     F .text	000001a8 OSTaskNameGet
00020188 g       *ABS*	00000000 __flash_rodata_start
000196f0 g     F .text	0000020c OSQPostOpt
000148f8 g     F .text	0000021c OSTimeTick
00022d7c g     O .rwdata	00000002 OSTaskMax
00020188 g       *ABS*	00000000 __DTOR_LIST__
00019bb4 g     F .text	00000100 OSSemCreate
00022da0 g     O .rwdata	00000002 OSTmrWheelSize
0001e968 g     F .text	00000040 alt_up_rs232_open_dev
00024d30 g     O .bss	00000004 gameSem
00011aec g     F .text	00000084 .hidden __nedf2
00022d76 g     O .rwdata	00000002 OSTaskDelEn
0001a400 g     F .text	00000110 OSSemQuery
00018c30 g     F .text	000002c8 OSQDel
000192ac g     F .text	0000016c OSQPendAbort
0001c4a0 g     F .text	00000034 alt_irq_init
000136ec g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001e030 g     F .text	00000034 read_data_valid
00003ae8 g     F .text	0000006c sprintf
0001db38 g     F .text	00000034 alt_up_character_lcd_cursor_off
00020a9c g     O .rodata	00000100 .hidden __clz_tab
00001c94 g     F .text	00000498 newHighscores
00024d5c g     O .bss	00000004 _PathLocale
0001e2ec g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001fddc g     F .text	00000014 atexit
0000212c g     F .text	000001b0 endHighscores
000031ec g     F .text	00000070 del_number
0000f410 g     F .text	0000005c _write_r
00014680 g     F .text	00000088 OSSchedLock
0000a770 g     F .text	0000001c setlocale
000160d4 g     F .text	00000128 OSFlagCreate
00022cfc g     O .rwdata	00000004 _impure_ptr
00024d7c g     O .bss	00000004 alt_argc
00009628 g     F .text	00000208 __sflush_r
0001ef3c g     F .text	0000005c _do_dtors
0000a75c g     F .text	00000008 __locale_cjk_lang
00022d46 g     O .rwdata	00000002 OSEventMultiEn
00024d34 g     O .bss	00000004 newHighscoreSelect
000161fc g     F .text	00000270 OSFlagDel
00024dcc g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00017c88 g     F .text	0000016c OSMboxPendAbort
0000c064 g     F .text	00000060 __ulp
00022d92 g     O .rwdata	00000002 OSTmrEn
000166ec g     F .text	000005f0 OSFlagPend
00009c44 g     F .text	00000018 __fp_unlock_all
00022d10 g     O .rwdata	00000008 alt_fs_list
000156a4 g     F .text	00000074 OS_StrCopy
0001e61c g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001e790 g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
00022d5c g     O .rwdata	00000002 OSMemNameSize
00024d38 g     O .bss	00000004 ALT_x1
0001fa4c g     F .text	0000001c OSInitHookEnd
000446b8 g     O .bss	000007d0 Messages
00003298 g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
00022d88 g     O .rwdata	00000002 OSTCBPrioTblMax
0000a78c g     F .text	0000000c localeconv
00022d84 g     O .rwdata	00000002 OSTaskStatStkChkEn
00017680 g     F .text	000000fc OSMboxCreate
00022d58 g     O .rwdata	00000002 OSMemEn
00022cc4 g     O .rwdata	00000004 first
00022d62 g     O .rwdata	00000002 OSMutexEn
00024d0c g     O .bss	00000004 score3
00022db4 g       *ABS*	00000000 _edata
00022cf4 g     O .rwdata	00000004 interval_timer_ptr
0004a1b0 g       *ABS*	00000000 _end
00024dd0 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001cf70 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001c1b0 g     F .text	000001f0 OSTimeDlyResume
0001659c g     F .text	00000150 OSFlagNameSet
000029c0 g     F .text	000000a0 clearText
000179e4 g     F .text	000002a4 OSMboxPend
0001b98c g     F .text	000001c8 OSTaskStkChk
00022d5e g     O .rwdata	00000002 OSMemSize
0000cbc4 g     F .text	0000007c __swrite
00022d08 g     O .rwdata	00000004 __malloc_trim_threshold
0000a750 g     F .text	0000000c __locale_msgcharset
00024dd4 g     O .bss	00000004 OSTCBCur
0001fdf0 g     F .text	00000038 exit
0000390c g     F .text	00000060 checkIDScore
0001dd54 g     F .text	00000074 alt_up_irda_read_data
00022d60 g     O .rwdata	00000002 OSMemTblSize
0000a5f4 g     F .text	000000c4 _fwalk_reent
0001e090 g     F .text	000000c4 alt_up_ps2_init
0000becc g     F .text	00000198 __mdiff
00010918 g     F .text	0000005c .hidden __modsi3
00044e88 g     O .bss	00002004 menu_stk2
000175e8 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00009c20 g     F .text	00000004 __sfp_lock_release
000144bc g     F .text	00000054 OSInit
0001bd68 g     F .text	0000012c OSTaskQuery
0001d864 g     F .text	00000074 alt_up_character_lcd_string
00019a58 g     F .text	000000ac OS_QInit
00015718 g     F .text	00000054 OS_StrLen
0001dee8 g     F .text	00000040 alt_up_irda_open_dev
0001854c g     F .text	00000118 OSMemNameSet
00000c44 g     F .text	00000230 gescoord
00022d7a g     O .rwdata	00000002 OSTaskProfileEn
00001610 g     F .text	00000154 tutorialUitleg
00024dd8 g     O .bss	00000004 OSTime
00024cf8 g     O .bss	00000004 Flags
00002a60 g     F .text	00000058 tekenBox
0004880c g     O .bss	00000800 OSTaskIdleStk
0002014c g     F .text	0000003c _exit
00024d3c g     O .bss	00000004 ALT_inc_x
00017f04 g     F .text	0000015c OSMboxPostOpt
0001ec90 g     F .text	00000140 alt_alarm_start
0001646c g     F .text	00000130 OSFlagNameGet
0001c3a0 g     F .text	00000064 OSTimeGet
0000a798 g     F .text	000001b8 __smakebuf_r
0001e27c g     F .text	00000070 alt_up_ps2_wait_for_ack
00003b54 g     F .text	00000098 strlen
0001f9dc g     F .text	0000001c OSTaskSwHook
0001f45c g     F .text	00000158 open
0004900c g     O .bss	00000b40 OSEventTbl
00011b70 g     F .text	000000e0 .hidden __gedf2
00049b4c g     O .bss	00000510 OSTCBTbl
0001a510 g     F .text	000000fc OSSemSet
00022cec g     O .rwdata	00000004 eenkeer
00002980 g     F .text	00000040 clearScreen
00022d0c g     O .rwdata	00000004 __wctomb
0000e048 g     F .text	00000018 __sprint_r
00024d40 g     O .bss	00000004 ALT_x2
0001f028 g     F .text	00000030 alt_icache_flush_all
000022dc g     F .text	000000d0 Highscores
0001d928 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00022da8 g     O .rwdata	00000004 alt_priority_mask
00019cb4 g     F .text	00000268 OSSemDel
00024ddc g     O .bss	00000004 OSFlagFreeList
00022d40 g     O .rwdata	00000002 OSEventNameSize
0001777c g     F .text	00000268 OSMboxDel
00007acc g     F .text	00000024 __vfprintf_internal
00024de0 g     O .bss	00000001 OSStatRdy
00024cfc g     O .bss	00000004 MailBox
0004a05c g     O .bss	00000054 OSTCBPrioTbl
0000fcac g     F .text	0000005c _wctomb_r
00013944 g     F .text	000000c0 __env_lock
0001e4b8 g     F .text	0000008c alt_up_ps2_read_fd
00022d86 g     O .rwdata	00000002 OSTaskSwHookEn
00022cd4 g     O .rwdata	00000004 xLinks
00012454 g     F .text	000008d0 .hidden __subdf3
0001ddc8 g     F .text	00000090 alt_up_irda_read_fd
0000b8f4 g     F .text	000000b0 __lo0bits
00022dac g     O .rwdata	00000008 alt_alarm_list
00022d4e g     O .rwdata	00000002 OSFlagWidth
0001eee0 g     F .text	0000005c _do_ctors
0001e6d0 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000fbbc g     F .text	000000c0 wcrtomb
00012fd4 g     F .text	000000d0 close
00024d8c g     O .bss	00000004 alt_envsem
00024de4 g     O .bss	00000004 OSIdleCtrRun
00022ce0 g     O .rwdata	00000004 xOnder
00014b14 g     F .text	00000020 OSVersion
00022d98 g     O .rwdata	00000002 OSTmrCfgWheelSize
00013328 g     F .text	00000080 alt_load
0001be94 g     F .text	0000006c OS_TaskStkClr
00002ab8 g     F .text	00000088 tekenBox2
00022d72 g     O .rwdata	00000002 OSTaskCreateEn
00024d54 g     O .bss	00000004 menuSem
000150f0 g     F .text	00000064 OS_EventWaitListInit
0000f80c g     F .text	0000005c fputwc
0001fa68 g     F .text	0000001c OSTaskIdleHook
00024d44 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
00009c24 g     F .text	00000004 __sinit_lock_acquire
0000b668 g     F .text	00000120 __multadd
00001070 g     F .text	0000018c endSingleplayer
0001bb54 g     F .text	00000214 OSTaskSuspend
0000b640 g     F .text	00000028 _Bfree
00024d00 g     O .bss	00000004 counter2
00024d04 g     O .bss	00000004 Flags_Tutorial
0001576c g     F .text	0000005c OS_TaskIdle
00022d9e g     O .rwdata	00000002 OSTmrTblSize
000198fc g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00145100 	call	14510 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800174 	movhi	r2,5
 140:	10a82c04 	addi	r2,r2,-24400
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800174 	movhi	r2,5
 158:	10a82c04 	addi	r2,r2,-24400
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	001458c0 	call	1458c <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a84c17 	ldw	r2,-24272(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a84c17 	ldw	r2,-24272(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6ab3114 	ori	gp,gp,44228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10933814 	ori	r2,r2,19680

    movhi r3, %hi(__bss_end)
     25c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
     260:	18e86c14 	ori	r3,r3,41392

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00133280 	call	13328 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00134cc0 	call	134cc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e80d17 	ldw	r3,-24524(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	00166ec0 	call	166ec <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e80d17 	ldw	r3,-24524(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	00166ec0 	call	166ec <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e80e17 	ldw	r3,-24520(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	0017df40 	call	17df4 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e80d17 	ldw	r3,-24524(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	00166ec0 	call	166ec <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e80c17 	ldw	r3,-24528(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	0017df40 	call	17df4 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001bf000 	call	1bf00 <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	21006204 	addi	r4,r4,392
     3b8:	001df280 	call	1df28 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	21006704 	addi	r4,r4,412
     3c8:	001df280 	call	1df28 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	21006d04 	addi	r4,r4,436
     3d8:	001df280 	call	1df28 <alt_up_parallel_port_open_dev>
     3dc:	d0a80815 	stw	r2,-24544(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a80817 	ldw	r2,-24544(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a80817 	ldw	r2,-24544(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	00030040 	call	3004 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	00030040 	call	3004 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	00030040 	call	3004 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	00030040 	call	3004 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	00030040 	call	3004 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	00030040 	call	3004 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81615 	stw	r2,-24488(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81415 	stw	r2,-24496(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	00030040 	call	3004 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e80b17 	ldw	r3,-24532(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	00166ec0 	call	166ec <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e80e17 	ldw	r3,-24520(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	00179e40 	call	179e4 <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e80c17 	ldw	r3,-24528(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	00179e40 	call	179e4 <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81517 	ldw	r3,-24492(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	00032980 	call	3298 <draw_number>
			}
			if (score2 == i) {
     864:	d0e81117 	ldw	r3,-24508(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	00032980 	call	3298 <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81517 	ldw	r2,-24492(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81117 	ldw	r2,-24508(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281515 	stw	zero,-24492(gp)
				score2 =0;
     898:	d0281115 	stw	zero,-24508(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	00031480 	call	3148 <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000231e 	bne	r2,zero,950 <Game+0x1c4>
			del_middenlijn();
     8c4:	00031b00 	call	31b0 <del_middenlijn>

			VGA_box(300, balkje2->Hoogte, 305, balkje2->Hoogte + 50, blauw);
     8c8:	e0bffb17 	ldw	r2,-20(fp)
     8cc:	11400017 	ldw	r5,0(r2)
     8d0:	e0bffb17 	ldw	r2,-20(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	10c00c84 	addi	r3,r2,50
     8dc:	00803fc4 	movi	r2,255
     8e0:	d8800015 	stw	r2,0(sp)
     8e4:	01004b04 	movi	r4,300
     8e8:	01804c44 	movi	r6,305
     8ec:	180f883a 	mov	r7,r3
     8f0:	00030040 	call	3004 <VGA_box>

			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8f4:	01000504 	movi	r4,20
     8f8:	01400504 	movi	r5,20
     8fc:	018000b4 	movhi	r6,2
     900:	31807204 	addi	r6,r6,456
     904:	00030b80 	call	30b8 <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     908:	0009883a 	mov	r4,zero
     90c:	01400044 	movi	r5,1
     910:	000d883a 	mov	r6,zero
     914:	000f883a 	mov	r7,zero
     918:	001c0480 	call	1c048 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     91c:	01000504 	movi	r4,20
     920:	01400504 	movi	r5,20
     924:	018000b4 	movhi	r6,2
     928:	31807c04 	addi	r6,r6,496
     92c:	00030b80 	call	30b8 <VGA_text>



			del_number(1);
     930:	01000044 	movi	r4,1
     934:	00031ec0 	call	31ec <del_number>
			del_number(2);
     938:	01000084 	movi	r4,2
     93c:	00031ec0 	call	31ec <del_number>

			score1 = 0;
     940:	d0281515 	stw	zero,-24492(gp)
			score2 = 0;
     944:	d0281115 	stw	zero,-24508(gp)

			i = 0;
     948:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     94c:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     950:	010000c4 	movi	r4,3
     954:	000039c0 	call	39c <controller>
     958:	10800058 	cmpnei	r2,r2,1
     95c:	1000a41e 	bne	r2,zero,bf0 <Game+0x464>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     960:	d1281d17 	ldw	r4,-24460(gp)
     964:	d1681817 	ldw	r5,-24480(gp)
     968:	d0a81d17 	ldw	r2,-24460(gp)
     96c:	10c00144 	addi	r3,r2,5
     970:	d0a81817 	ldw	r2,-24480(gp)
     974:	10800144 	addi	r2,r2,5
     978:	d8000015 	stw	zero,0(sp)
     97c:	180d883a 	mov	r6,r3
     980:	100f883a 	mov	r7,r2
     984:	00030040 	call	3004 <VGA_box>
			if (first == 1) {
     988:	d0a00017 	ldw	r2,-32768(gp)
     98c:	10800058 	cmpnei	r2,r2,1
     990:	10000f1e 	bne	r2,zero,9d0 <Game+0x244>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     994:	d0a81d17 	ldw	r2,-24460(gp)
     998:	10c02804 	addi	r3,r2,160
     99c:	d0a81e17 	ldw	r2,-24456(gp)
     9a0:	1885883a 	add	r2,r3,r2
     9a4:	d0a81d15 	stw	r2,-24460(gp)
				ALT_x2 += ALT_inc_x;
     9a8:	d0e81f17 	ldw	r3,-24452(gp)
     9ac:	d0a81e17 	ldw	r2,-24456(gp)
     9b0:	1885883a 	add	r2,r3,r2
     9b4:	d0a81f15 	stw	r2,-24452(gp)
				ALT_y += ALT_inc_y;
     9b8:	d0e81817 	ldw	r3,-24480(gp)
     9bc:	d0a81917 	ldw	r2,-24476(gp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	d0a81815 	stw	r2,-24480(gp)
				first = 0;
     9c8:	d0200015 	stw	zero,-32768(gp)
     9cc:	00000c06 	br	a00 <Game+0x274>
			} else {
				ALT_x1 += ALT_inc_x;
     9d0:	d0e81d17 	ldw	r3,-24460(gp)
     9d4:	d0a81e17 	ldw	r2,-24456(gp)
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	d0a81d15 	stw	r2,-24460(gp)
				ALT_x2 += ALT_inc_x;
     9e0:	d0e81f17 	ldw	r3,-24452(gp)
     9e4:	d0a81e17 	ldw	r2,-24456(gp)
     9e8:	1885883a 	add	r2,r3,r2
     9ec:	d0a81f15 	stw	r2,-24452(gp)
				ALT_y += ALT_inc_y;
     9f0:	d0e81817 	ldw	r3,-24480(gp)
     9f4:	d0a81917 	ldw	r2,-24476(gp)
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	d0a81815 	stw	r2,-24480(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     a00:	d1281d17 	ldw	r4,-24460(gp)
     a04:	d1681817 	ldw	r5,-24480(gp)
     a08:	d0a81d17 	ldw	r2,-24460(gp)
     a0c:	11800144 	addi	r6,r2,5
     a10:	d0a81817 	ldw	r2,-24480(gp)
     a14:	10c00144 	addi	r3,r2,5
     a18:	00804034 	movhi	r2,256
     a1c:	10bfffc4 	addi	r2,r2,-1
     a20:	d8800015 	stw	r2,0(sp)
     a24:	180f883a 	mov	r7,r3
     a28:	00030040 	call	3004 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a2c:	d0e81817 	ldw	r3,-24480(gp)
     a30:	d0a81417 	ldw	r2,-24496(gp)
     a34:	18800326 	beq	r3,r2,a44 <Game+0x2b8>
     a38:	d0a81817 	ldw	r2,-24480(gp)
     a3c:	10800118 	cmpnei	r2,r2,4
     a40:	1000031e 	bne	r2,zero,a50 <Game+0x2c4>
				ALT_inc_y = -(ALT_inc_y);
     a44:	d0a81917 	ldw	r2,-24476(gp)
     a48:	0085c83a 	sub	r2,zero,r2
     a4c:	d0a81915 	stw	r2,-24476(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a50:	d0a81d17 	ldw	r2,-24460(gp)
     a54:	1000071e 	bne	r2,zero,a74 <Game+0x2e8>
				score2++;
     a58:	d0a81117 	ldw	r2,-24508(gp)
     a5c:	10800044 	addi	r2,r2,1
     a60:	d0a81115 	stw	r2,-24508(gp)
				gescoord(2);
     a64:	01000084 	movi	r4,2
     a68:	0000c440 	call	c44 <gescoord>
				del_number(2);
     a6c:	01000084 	movi	r4,2
     a70:	00031ec0 	call	31ec <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a74:	d0e81f17 	ldw	r3,-24452(gp)
     a78:	d0a81617 	ldw	r2,-24488(gp)
     a7c:	1880071e 	bne	r3,r2,a9c <Game+0x310>
				score1++;
     a80:	d0a81517 	ldw	r2,-24492(gp)
     a84:	10800044 	addi	r2,r2,1
     a88:	d0a81515 	stw	r2,-24492(gp)
				gescoord(1);
     a8c:	01000044 	movi	r4,1
     a90:	0000c440 	call	c44 <gescoord>
				del_number(1);
     a94:	01000044 	movi	r4,1
     a98:	00031ec0 	call	31ec <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a9c:	d0a81d17 	ldw	r2,-24460(gp)
     aa0:	10800558 	cmpnei	r2,r2,21
     aa4:	10000d1e 	bne	r2,zero,adc <Game+0x350>
     aa8:	e0bffa17 	ldw	r2,-24(fp)
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	10fffe84 	addi	r3,r2,-6
     ab4:	d0a81817 	ldw	r2,-24480(gp)
     ab8:	1880080e 	bge	r3,r2,adc <Game+0x350>
     abc:	e0bffa17 	ldw	r2,-24(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	10800c84 	addi	r2,r2,50
     ac8:	d0e81817 	ldw	r3,-24480(gp)
     acc:	1880030e 	bge	r3,r2,adc <Game+0x350>
				ALT_inc_x = -(ALT_inc_x);
     ad0:	d0a81e17 	ldw	r2,-24456(gp)
     ad4:	0085c83a 	sub	r2,zero,r2
     ad8:	d0a81e15 	stw	r2,-24456(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     adc:	d0a81d17 	ldw	r2,-24460(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	1000081e 	bne	r2,zero,b08 <Game+0x37c>
     ae8:	d0a81d17 	ldw	r2,-24460(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000051e 	bne	r2,zero,b08 <Game+0x37c>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10fffe84 	addi	r3,r2,-6
     b00:	d0a81817 	ldw	r2,-24480(gp)
     b04:	18800b26 	beq	r3,r2,b34 <Game+0x3a8>
     b08:	d0a81d17 	ldw	r2,-24460(gp)
     b0c:	10800548 	cmpgei	r2,r2,21
     b10:	10000b1e 	bne	r2,zero,b40 <Game+0x3b4>
     b14:	d0a81d17 	ldw	r2,-24460(gp)
     b18:	108003d0 	cmplti	r2,r2,15
     b1c:	1000081e 	bne	r2,zero,b40 <Game+0x3b4>
     b20:	e0bffa17 	ldw	r2,-24(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10c00c84 	addi	r3,r2,50
     b2c:	d0a81817 	ldw	r2,-24480(gp)
     b30:	1880031e 	bne	r3,r2,b40 <Game+0x3b4>
				ALT_inc_y = -(ALT_inc_y);
     b34:	d0a81917 	ldw	r2,-24476(gp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	d0a81915 	stw	r2,-24476(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b40:	d0a81f17 	ldw	r2,-24452(gp)
     b44:	10804ad8 	cmpnei	r2,r2,299
     b48:	10000d1e 	bne	r2,zero,b80 <Game+0x3f4>
     b4c:	e0bffb17 	ldw	r2,-20(fp)
     b50:	10800017 	ldw	r2,0(r2)
     b54:	10fffe84 	addi	r3,r2,-6
     b58:	d0a81817 	ldw	r2,-24480(gp)
     b5c:	1880080e 	bge	r3,r2,b80 <Game+0x3f4>
     b60:	e0bffb17 	ldw	r2,-20(fp)
     b64:	10800017 	ldw	r2,0(r2)
     b68:	10800c84 	addi	r2,r2,50
     b6c:	d0e81817 	ldw	r3,-24480(gp)
     b70:	1880030e 	bge	r3,r2,b80 <Game+0x3f4>
				ALT_inc_x = -(ALT_inc_x);
     b74:	d0a81e17 	ldw	r2,-24456(gp)
     b78:	0085c83a 	sub	r2,zero,r2
     b7c:	d0a81e15 	stw	r2,-24456(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b80:	d0a81f17 	ldw	r2,-24452(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	1000081e 	bne	r2,zero,bac <Game+0x420>
     b8c:	d0a81f17 	ldw	r2,-24452(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000051e 	bne	r2,zero,bac <Game+0x420>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10fffe84 	addi	r3,r2,-6
     ba4:	d0a81817 	ldw	r2,-24480(gp)
     ba8:	18800b26 	beq	r3,r2,bd8 <Game+0x44c>
     bac:	d0a81f17 	ldw	r2,-24452(gp)
     bb0:	10804c88 	cmpgei	r2,r2,306
     bb4:	10000b1e 	bne	r2,zero,be4 <Game+0x458>
     bb8:	d0a81f17 	ldw	r2,-24452(gp)
     bbc:	10804b10 	cmplti	r2,r2,300
     bc0:	1000081e 	bne	r2,zero,be4 <Game+0x458>
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	10800017 	ldw	r2,0(r2)
     bcc:	10c00c84 	addi	r3,r2,50
     bd0:	d0a81817 	ldw	r2,-24480(gp)
     bd4:	1880031e 	bne	r3,r2,be4 <Game+0x458>
				ALT_inc_y = -(ALT_inc_y);
     bd8:	d0a81917 	ldw	r2,-24476(gp)
     bdc:	0085c83a 	sub	r2,zero,r2
     be0:	d0a81915 	stw	r2,-24476(gp)
			}



			OSTimeDly(1);
     be4:	01000044 	movi	r4,1
     be8:	001bf000 	call	1bf00 <OSTimeDly>
     bec:	00001406 	br	c40 <Game+0x4b4>

		} else if (controller(3) == 2) {
     bf0:	010000c4 	movi	r4,3
     bf4:	000039c0 	call	39c <controller>
     bf8:	10800098 	cmpnei	r2,r2,2
     bfc:	1000031e 	bne	r2,zero,c0c <Game+0x480>
			//links
			endGame(2);
     c00:	01000084 	movi	r4,2
     c04:	0000e740 	call	e74 <endGame>
     c08:	00000d06 	br	c40 <Game+0x4b4>
		}else if(controller(3) == 3){
     c0c:	010000c4 	movi	r4,3
     c10:	000039c0 	call	39c <controller>
     c14:	108000d8 	cmpnei	r2,r2,3
     c18:	1000031e 	bne	r2,zero,c28 <Game+0x49c>
			//rechts
			endGame(1);
     c1c:	01000044 	movi	r4,1
     c20:	0000e740 	call	e74 <endGame>
     c24:	00000606 	br	c40 <Game+0x4b4>
		} else if(controller(2) != 2){
     c28:	01000084 	movi	r4,2
     c2c:	000039c0 	call	39c <controller>
     c30:	108000a0 	cmpeqi	r2,r2,2
     c34:	1000021e 	bne	r2,zero,c40 <Game+0x4b4>
			endGame(1);
     c38:	01000044 	movi	r4,1
     c3c:	0000e740 	call	e74 <endGame>
		}

	}
     c40:	003eea06 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c44 <gescoord>:
}

void gescoord(int ID){
     c44:	defffc04 	addi	sp,sp,-16
     c48:	dfc00315 	stw	ra,12(sp)
     c4c:	df000215 	stw	fp,8(sp)
     c50:	df000204 	addi	fp,sp,8
     c54:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c58:	d1281d17 	ldw	r4,-24460(gp)
     c5c:	d1681817 	ldw	r5,-24480(gp)
     c60:	d0a81d17 	ldw	r2,-24460(gp)
     c64:	10c00144 	addi	r3,r2,5
     c68:	d0a81817 	ldw	r2,-24480(gp)
     c6c:	10800144 	addi	r2,r2,5
     c70:	d8000015 	stw	zero,0(sp)
     c74:	180d883a 	mov	r6,r3
     c78:	100f883a 	mov	r7,r2
     c7c:	00030040 	call	3004 <VGA_box>

	first = 1;
     c80:	00800044 	movi	r2,1
     c84:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c88:	e0bfff17 	ldw	r2,-4(fp)
     c8c:	10800058 	cmpnei	r2,r2,1
     c90:	1000251e 	bne	r2,zero,d28 <gescoord+0xe4>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c94:	01000784 	movi	r4,30
     c98:	01400644 	movi	r5,25
     c9c:	018000b4 	movhi	r6,2
     ca0:	31808604 	addi	r6,r6,536
     ca4:	00030b80 	call	30b8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     ca8:	0009883a 	mov	r4,zero
     cac:	000b883a 	mov	r5,zero
     cb0:	018008c4 	movi	r6,35
     cb4:	000f883a 	mov	r7,zero
     cb8:	001c0480 	call	1c048 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     cbc:	01000784 	movi	r4,30
     cc0:	01400644 	movi	r5,25
     cc4:	018000b4 	movhi	r6,2
     cc8:	31808d04 	addi	r6,r6,564
     ccc:	00030b80 	call	30b8 <VGA_text>
		ALT_x1 = 0;
     cd0:	d0281d15 	stw	zero,-24460(gp)
		ALT_x2 = 165;
     cd4:	00802944 	movi	r2,165
     cd8:	d0a81f15 	stw	r2,-24452(gp)
		ALT_y = 100;
     cdc:	00801904 	movi	r2,100
     ce0:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = -1;
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	d0a81e15 	stw	r2,-24456(gp)
		if(random == 1){
     cec:	d0a81317 	ldw	r2,-24500(gp)
     cf0:	10800058 	cmpnei	r2,r2,1
     cf4:	1000041e 	bne	r2,zero,d08 <gescoord+0xc4>
			ALT_inc_y = -1;
     cf8:	00bfffc4 	movi	r2,-1
     cfc:	d0a81915 	stw	r2,-24476(gp)
			random = 0;
     d00:	d0281315 	stw	zero,-24500(gp)
     d04:	00000706 	br	d24 <gescoord+0xe0>
		}else if(random == 0){
     d08:	d0a81317 	ldw	r2,-24500(gp)
     d0c:	1000051e 	bne	r2,zero,d24 <gescoord+0xe0>
			ALT_inc_y = 1;
     d10:	00800044 	movi	r2,1
     d14:	d0a81915 	stw	r2,-24476(gp)
			random = 1;
     d18:	00800044 	movi	r2,1
     d1c:	d0a81315 	stw	r2,-24500(gp)
     d20:	00004f06 	br	e60 <gescoord+0x21c>
     d24:	00004e06 	br	e60 <gescoord+0x21c>
		}
	}else if(ID == 2){
     d28:	e0bfff17 	ldw	r2,-4(fp)
     d2c:	10800098 	cmpnei	r2,r2,2
     d30:	1000251e 	bne	r2,zero,dc8 <gescoord+0x184>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     d34:	01000784 	movi	r4,30
     d38:	01400644 	movi	r5,25
     d3c:	018000b4 	movhi	r6,2
     d40:	31809404 	addi	r6,r6,592
     d44:	00030b80 	call	30b8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d48:	0009883a 	mov	r4,zero
     d4c:	000b883a 	mov	r5,zero
     d50:	018008c4 	movi	r6,35
     d54:	000f883a 	mov	r7,zero
     d58:	001c0480 	call	1c048 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d5c:	01000784 	movi	r4,30
     d60:	01400644 	movi	r5,25
     d64:	018000b4 	movhi	r6,2
     d68:	31808d04 	addi	r6,r6,564
     d6c:	00030b80 	call	30b8 <VGA_text>
		ALT_x1 = 0;
     d70:	d0281d15 	stw	zero,-24460(gp)
		ALT_x2 = 165;
     d74:	00802944 	movi	r2,165
     d78:	d0a81f15 	stw	r2,-24452(gp)
		ALT_y = 100;
     d7c:	00801904 	movi	r2,100
     d80:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = 1;
     d84:	00800044 	movi	r2,1
     d88:	d0a81e15 	stw	r2,-24456(gp)
		if(random == 1){
     d8c:	d0a81317 	ldw	r2,-24500(gp)
     d90:	10800058 	cmpnei	r2,r2,1
     d94:	1000041e 	bne	r2,zero,da8 <gescoord+0x164>
			ALT_inc_y = 1;
     d98:	00800044 	movi	r2,1
     d9c:	d0a81915 	stw	r2,-24476(gp)
			random = 0;
     da0:	d0281315 	stw	zero,-24500(gp)
     da4:	00000706 	br	dc4 <gescoord+0x180>
		}else if(random == 0){
     da8:	d0a81317 	ldw	r2,-24500(gp)
     dac:	1000051e 	bne	r2,zero,dc4 <gescoord+0x180>
			ALT_inc_y = -1;
     db0:	00bfffc4 	movi	r2,-1
     db4:	d0a81915 	stw	r2,-24476(gp)
			random = 1;
     db8:	00800044 	movi	r2,1
     dbc:	d0a81315 	stw	r2,-24500(gp)
     dc0:	00002706 	br	e60 <gescoord+0x21c>
     dc4:	00002606 	br	e60 <gescoord+0x21c>
		}
	}else if(ID == 3){
     dc8:	e0bfff17 	ldw	r2,-4(fp)
     dcc:	108000d8 	cmpnei	r2,r2,3
     dd0:	1000231e 	bne	r2,zero,e60 <gescoord+0x21c>
		VGA_text(30, 25, "De computer heeft gescoord!");
     dd4:	01000784 	movi	r4,30
     dd8:	01400644 	movi	r5,25
     ddc:	018000b4 	movhi	r6,2
     de0:	31809b04 	addi	r6,r6,620
     de4:	00030b80 	call	30b8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     de8:	0009883a 	mov	r4,zero
     dec:	000b883a 	mov	r5,zero
     df0:	018008c4 	movi	r6,35
     df4:	000f883a 	mov	r7,zero
     df8:	001c0480 	call	1c048 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     dfc:	01000784 	movi	r4,30
     e00:	01400644 	movi	r5,25
     e04:	018000b4 	movhi	r6,2
     e08:	3180a204 	addi	r6,r6,648
     e0c:	00030b80 	call	30b8 <VGA_text>
		ALT_x1 = 0;
     e10:	d0281d15 	stw	zero,-24460(gp)
		ALT_x2 = 165;
     e14:	00802944 	movi	r2,165
     e18:	d0a81f15 	stw	r2,-24452(gp)
		ALT_y = 100;
     e1c:	00801904 	movi	r2,100
     e20:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = -1;
     e24:	00bfffc4 	movi	r2,-1
     e28:	d0a81e15 	stw	r2,-24456(gp)
		if(random == 1){
     e2c:	d0a81317 	ldw	r2,-24500(gp)
     e30:	10800058 	cmpnei	r2,r2,1
     e34:	1000041e 	bne	r2,zero,e48 <gescoord+0x204>
			ALT_inc_y = 1;
     e38:	00800044 	movi	r2,1
     e3c:	d0a81915 	stw	r2,-24476(gp)
			random = 0;
     e40:	d0281315 	stw	zero,-24500(gp)
     e44:	00000606 	br	e60 <gescoord+0x21c>
		}else if(random == 0){
     e48:	d0a81317 	ldw	r2,-24500(gp)
     e4c:	1000041e 	bne	r2,zero,e60 <gescoord+0x21c>
			ALT_inc_y = -1;
     e50:	00bfffc4 	movi	r2,-1
     e54:	d0a81915 	stw	r2,-24476(gp)
			random = 1;
     e58:	00800044 	movi	r2,1
     e5c:	d0a81315 	stw	r2,-24500(gp)
		}
	}

}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <endGame>:

void endGame(int ID) {
     e74:	defffb04 	addi	sp,sp,-20
     e78:	dfc00415 	stw	ra,16(sp)
     e7c:	df000315 	stw	fp,12(sp)
     e80:	df000304 	addi	fp,sp,12
     e84:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e88:	010000b4 	movhi	r4,2
     e8c:	2100a904 	addi	r4,r4,676
     e90:	0003a7c0 	call	3a7c <puts>

	clearScreen();
     e94:	00029800 	call	2980 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e98:	d0a80d17 	ldw	r2,-24524(gp)
     e9c:	1009883a 	mov	r4,r2
     ea0:	01400304 	movi	r5,12
     ea4:	01800044 	movi	r6,1
     ea8:	e1fffe04 	addi	r7,fp,-8
     eac:	0016d440 	call	16d44 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     eb0:	d0a80b17 	ldw	r2,-24532(gp)
     eb4:	1009883a 	mov	r4,r2
     eb8:	01400084 	movi	r5,2
     ebc:	01800044 	movi	r6,1
     ec0:	e1fffe04 	addi	r7,fp,-8
     ec4:	0016d440 	call	16d44 <OSFlagPost>


	if(ID == 1){
     ec8:	e0bfff17 	ldw	r2,-4(fp)
     ecc:	10800058 	cmpnei	r2,r2,1
     ed0:	1000101e 	bne	r2,zero,f14 <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     ed4:	010008c4 	movi	r4,35
     ed8:	01400644 	movi	r5,25
     edc:	018000b4 	movhi	r6,2
     ee0:	3180ac04 	addi	r6,r6,688
     ee4:	00030b80 	call	30b8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     ee8:	0009883a 	mov	r4,zero
     eec:	000b883a 	mov	r5,zero
     ef0:	01800a04 	movi	r6,40
     ef4:	000f883a 	mov	r7,zero
     ef8:	001c0480 	call	1c048 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     efc:	010008c4 	movi	r4,35
     f00:	01400644 	movi	r5,25
     f04:	018000b4 	movhi	r6,2
     f08:	3180b004 	addi	r6,r6,704
     f0c:	00030b80 	call	30b8 <VGA_text>
     f10:	00001206 	br	f5c <endGame+0xe8>
	} else if(ID == 2){
     f14:	e0bfff17 	ldw	r2,-4(fp)
     f18:	10800098 	cmpnei	r2,r2,2
     f1c:	10000f1e 	bne	r2,zero,f5c <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     f20:	010008c4 	movi	r4,35
     f24:	01400644 	movi	r5,25
     f28:	018000b4 	movhi	r6,2
     f2c:	3180b404 	addi	r6,r6,720
     f30:	00030b80 	call	30b8 <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     f34:	0009883a 	mov	r4,zero
     f38:	000b883a 	mov	r5,zero
     f3c:	01800a04 	movi	r6,40
     f40:	000f883a 	mov	r7,zero
     f44:	001c0480 	call	1c048 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f48:	010008c4 	movi	r4,35
     f4c:	01400644 	movi	r5,25
     f50:	018000b4 	movhi	r6,2
     f54:	3180b004 	addi	r6,r6,704
     f58:	00030b80 	call	30b8 <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f5c:	d0a80d17 	ldw	r2,-24524(gp)
     f60:	1009883a 	mov	r4,r2
     f64:	01400444 	movi	r5,17
     f68:	000d883a 	mov	r6,zero
     f6c:	e1fffe04 	addi	r7,fp,-8
     f70:	0016d440 	call	16d44 <OSFlagPost>

	teken_menu(2);
     f74:	01000084 	movi	r4,2
     f78:	0002b400 	call	2b40 <teken_menu>
	deleteNummer();
     f7c:	000325c0 	call	325c <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f80:	d1281d17 	ldw	r4,-24460(gp)
     f84:	d1681817 	ldw	r5,-24480(gp)
     f88:	d0a81d17 	ldw	r2,-24460(gp)
     f8c:	10c00144 	addi	r3,r2,5
     f90:	d0a81817 	ldw	r2,-24480(gp)
     f94:	10800144 	addi	r2,r2,5
     f98:	d8000015 	stw	zero,0(sp)
     f9c:	180d883a 	mov	r6,r3
     fa0:	100f883a 	mov	r7,r2
     fa4:	00030040 	call	3004 <VGA_box>

	ALT_x1 = 0;
     fa8:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
     fac:	00802944 	movi	r2,165
     fb0:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
     fb4:	00801904 	movi	r2,100
     fb8:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
     fbc:	00800044 	movi	r2,1
     fc0:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
     fc4:	00800044 	movi	r2,1
     fc8:	d0a81915 	stw	r2,-24476(gp)

	check = 1;
     fcc:	00800044 	movi	r2,1
     fd0:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     fd4:	00800044 	movi	r2,1
     fd8:	d0a00015 	stw	r2,-32768(gp)

}
     fdc:	e037883a 	mov	sp,fp
     fe0:	dfc00117 	ldw	ra,4(sp)
     fe4:	df000017 	ldw	fp,0(sp)
     fe8:	dec00204 	addi	sp,sp,8
     fec:	f800283a 	ret

00000ff0 <dakjeOmhoog>:

void dakjeOmhoog(int omhoogX, int omhoogY){
     ff0:	defffc04 	addi	sp,sp,-16
     ff4:	dfc00315 	stw	ra,12(sp)
     ff8:	df000215 	stw	fp,8(sp)
     ffc:	df000204 	addi	fp,sp,8
    1000:	e13ffe15 	stw	r4,-8(fp)
    1004:	e17fff15 	stw	r5,-4(fp)
	VGA_text(omhoogX, omhoogY, "/\\"); //= dakje omhoog
    1008:	e13ffe17 	ldw	r4,-8(fp)
    100c:	e17fff17 	ldw	r5,-4(fp)
    1010:	018000b4 	movhi	r6,2
    1014:	3180b804 	addi	r6,r6,736
    1018:	00030b80 	call	30b8 <VGA_text>
}
    101c:	e037883a 	mov	sp,fp
    1020:	dfc00117 	ldw	ra,4(sp)
    1024:	df000017 	ldw	fp,0(sp)
    1028:	dec00204 	addi	sp,sp,8
    102c:	f800283a 	ret

00001030 <dakjeOmlaag>:

void dakjeOmlaag(int omlaagX, int omlaagY){
    1030:	defffc04 	addi	sp,sp,-16
    1034:	dfc00315 	stw	ra,12(sp)
    1038:	df000215 	stw	fp,8(sp)
    103c:	df000204 	addi	fp,sp,8
    1040:	e13ffe15 	stw	r4,-8(fp)
    1044:	e17fff15 	stw	r5,-4(fp)
	VGA_text(omlaagX, omlaagY, "\\/"); //= dakje omlaag
    1048:	e13ffe17 	ldw	r4,-8(fp)
    104c:	e17fff17 	ldw	r5,-4(fp)
    1050:	018000b4 	movhi	r6,2
    1054:	3180b904 	addi	r6,r6,740
    1058:	00030b80 	call	30b8 <VGA_text>
}
    105c:	e037883a 	mov	sp,fp
    1060:	dfc00117 	ldw	ra,4(sp)
    1064:	df000017 	ldw	fp,0(sp)
    1068:	dec00204 	addi	sp,sp,8
    106c:	f800283a 	ret

00001070 <endSingleplayer>:

void endSingleplayer(){
    1070:	defffc04 	addi	sp,sp,-16
    1074:	dfc00315 	stw	ra,12(sp)
    1078:	df000215 	stw	fp,8(sp)
    107c:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
    1080:	010000b4 	movhi	r4,2
    1084:	2100ba04 	addi	r4,r4,744
    1088:	0003a7c0 	call	3a7c <puts>

	clearScreen();
    108c:	00029800 	call	2980 <clearScreen>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    1090:	d0a80d17 	ldw	r2,-24524(gp)
    1094:	1009883a 	mov	r4,r2
    1098:	01400104 	movi	r5,4
    109c:	01800044 	movi	r6,1
    10a0:	e1ffff04 	addi	r7,fp,-4
    10a4:	0016d440 	call	16d44 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
    10a8:	010008c4 	movi	r4,35
    10ac:	01400644 	movi	r5,25
    10b0:	018000b4 	movhi	r6,2
    10b4:	3180bf04 	addi	r6,r6,764
    10b8:	00030b80 	call	30b8 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    10bc:	0009883a 	mov	r4,zero
    10c0:	000b883a 	mov	r5,zero
    10c4:	01800a04 	movi	r6,40
    10c8:	000f883a 	mov	r7,zero
    10cc:	001c0480 	call	1c048 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    10d0:	010008c4 	movi	r4,35
    10d4:	01400644 	movi	r5,25
    10d8:	018000b4 	movhi	r6,2
    10dc:	3180c204 	addi	r6,r6,776
    10e0:	00030b80 	call	30b8 <VGA_text>


	VGA_text(6,5, "           ");
    10e4:	01000184 	movi	r4,6
    10e8:	01400144 	movi	r5,5
    10ec:	018000b4 	movhi	r6,2
    10f0:	3180c504 	addi	r6,r6,788
    10f4:	00030b80 	call	30b8 <VGA_text>

	printf("Score is: %d", score3);
    10f8:	d0a81217 	ldw	r2,-24504(gp)
    10fc:	010000b4 	movhi	r4,2
    1100:	2100c804 	addi	r4,r4,800
    1104:	100b883a 	mov	r5,r2
    1108:	00039980 	call	3998 <printf>
	
	if(score3 > 0){
    110c:	d0a81217 	ldw	r2,-24504(gp)
    1110:	00800e0e 	bge	zero,r2,114c <endSingleplayer+0xdc>

		clearScreen();
    1114:	00029800 	call	2980 <clearScreen>
		OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    1118:	d0a80b17 	ldw	r2,-24532(gp)
    111c:	1009883a 	mov	r4,r2
    1120:	01400804 	movi	r5,32
    1124:	01800044 	movi	r6,1
    1128:	e1ffff04 	addi	r7,fp,-4
    112c:	0016d440 	call	16d44 <OSFlagPost>
		OSFlagPost(Flags_newHighscores, newHighscores_Flag, OS_FLAG_CLR, &err);
    1130:	d0a81a17 	ldw	r2,-24472(gp)
    1134:	1009883a 	mov	r4,r2
    1138:	01404004 	movi	r5,256
    113c:	000d883a 	mov	r6,zero
    1140:	e1ffff04 	addi	r7,fp,-4
    1144:	0016d440 	call	16d44 <OSFlagPost>
    1148:	00002706 	br	11e8 <endSingleplayer+0x178>
		//knop links is bevestig van alle 3 letters in 1 keer
		//knop rechts is letter naar rechts, ook naar bevestig, eenmaal op bevestig en druk nogmaals op rechts, opnieuw bij de meeste linkse letter.



		teken_menu(1);
    114c:	01000044 	movi	r4,1
    1150:	0002b400 	call	2b40 <teken_menu>

		VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1154:	d8000015 	stw	zero,0(sp)
    1158:	01004f04 	movi	r4,316
    115c:	01400104 	movi	r5,4
    1160:	01804fc4 	movi	r6,319
    1164:	01c03ac4 	movi	r7,235
    1168:	00030040 	call	3004 <VGA_box>

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    116c:	d1281d17 	ldw	r4,-24460(gp)
    1170:	d1681817 	ldw	r5,-24480(gp)
    1174:	d0a81d17 	ldw	r2,-24460(gp)
    1178:	10c00144 	addi	r3,r2,5
    117c:	d0a81817 	ldw	r2,-24480(gp)
    1180:	10800144 	addi	r2,r2,5
    1184:	d8000015 	stw	zero,0(sp)
    1188:	180d883a 	mov	r6,r3
    118c:	100f883a 	mov	r7,r2
    1190:	00030040 	call	3004 <VGA_box>
		deleteNummer();
    1194:	000325c0 	call	325c <deleteNummer>


		ALT_x1 = 0;
    1198:	d0281d15 	stw	zero,-24460(gp)
		ALT_x2 = 165;
    119c:	00802944 	movi	r2,165
    11a0:	d0a81f15 	stw	r2,-24452(gp)
		ALT_y = 100;
    11a4:	00801904 	movi	r2,100
    11a8:	d0a81815 	stw	r2,-24480(gp)
		ALT_inc_x = -1;
    11ac:	00bfffc4 	movi	r2,-1
    11b0:	d0a81e15 	stw	r2,-24456(gp)
		ALT_inc_y = 1;
    11b4:	00800044 	movi	r2,1
    11b8:	d0a81915 	stw	r2,-24476(gp)
	
		leven = beginLevens;
    11bc:	008000c4 	movi	r2,3
    11c0:	d0a00215 	stw	r2,-32760(gp)
		score3 = 0;
    11c4:	d0281215 	stw	zero,-24504(gp)
		first = 1;
    11c8:	00800044 	movi	r2,1
    11cc:	d0a00015 	stw	r2,-32768(gp)
	
		OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    11d0:	d0a80d17 	ldw	r2,-24524(gp)
    11d4:	1009883a 	mov	r4,r2
    11d8:	01400444 	movi	r5,17
    11dc:	000d883a 	mov	r6,zero
    11e0:	e1ffff04 	addi	r7,fp,-4
    11e4:	0016d440 	call	16d44 <OSFlagPost>
	

	}

}
    11e8:	e037883a 	mov	sp,fp
    11ec:	dfc00117 	ldw	ra,4(sp)
    11f0:	df000017 	ldw	fp,0(sp)
    11f4:	dec00204 	addi	sp,sp,8
    11f8:	f800283a 	ret

000011fc <Singleplayer>:

void Singleplayer(void* pdata){
    11fc:	defff704 	addi	sp,sp,-36
    1200:	dfc00815 	stw	ra,32(sp)
    1204:	df000715 	stw	fp,28(sp)
    1208:	df000704 	addi	fp,sp,28
    120c:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1210:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
    1214:	00802944 	movi	r2,165
    1218:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
    121c:	00801904 	movi	r2,100
    1220:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    1224:	00bfffc4 	movi	r2,-1
    1228:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
    122c:	00800044 	movi	r2,1
    1230:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 315;
    1234:	00804ec4 	movi	r2,315
    1238:	d0a81615 	stw	r2,-24488(gp)
	pixel_buffer_y = 230;
    123c:	00803984 	movi	r2,230
    1240:	d0a81415 	stw	r2,-24496(gp)
	char levens[10];

	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1244:	d0e80b17 	ldw	r3,-24532(gp)
    1248:	e0bffc04 	addi	r2,fp,-16
    124c:	d8800015 	stw	r2,0(sp)
    1250:	1809883a 	mov	r4,r3
    1254:	01400804 	movi	r5,32
    1258:	000d883a 	mov	r6,zero
    125c:	000f883a 	mov	r7,zero
    1260:	00166ec0 	call	166ec <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    1264:	d0e80e17 	ldw	r3,-24520(gp)
    1268:	e0bffc04 	addi	r2,fp,-16
    126c:	1809883a 	mov	r4,r3
    1270:	000b883a 	mov	r5,zero
    1274:	100d883a 	mov	r6,r2
    1278:	00179e40 	call	179e4 <OSMboxPend>
    127c:	e0bffb15 	stw	r2,-20(fp)
		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);




		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1280:	d1281d17 	ldw	r4,-24460(gp)
    1284:	d1681817 	ldw	r5,-24480(gp)
    1288:	d0a81d17 	ldw	r2,-24460(gp)
    128c:	10c00144 	addi	r3,r2,5
    1290:	d0a81817 	ldw	r2,-24480(gp)
    1294:	10800144 	addi	r2,r2,5
    1298:	d8000015 	stw	zero,0(sp)
    129c:	180d883a 	mov	r6,r3
    12a0:	100f883a 	mov	r7,r2
    12a4:	00030040 	call	3004 <VGA_box>

		if (first == 1) {
    12a8:	d0a00017 	ldw	r2,-32768(gp)
    12ac:	10800058 	cmpnei	r2,r2,1
    12b0:	1000201e 	bne	r2,zero,1334 <Singleplayer+0x138>
			printf("FIRST");
    12b4:	010000b4 	movhi	r4,2
    12b8:	2100cc04 	addi	r4,r4,816
    12bc:	00039980 	call	3998 <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    12c0:	d0a81d17 	ldw	r2,-24460(gp)
    12c4:	10c02804 	addi	r3,r2,160
    12c8:	d0a81e17 	ldw	r2,-24456(gp)
    12cc:	1885883a 	add	r2,r3,r2
    12d0:	d0a81d15 	stw	r2,-24460(gp)
			ALT_x2 += ALT_inc_x;
    12d4:	d0e81f17 	ldw	r3,-24452(gp)
    12d8:	d0a81e17 	ldw	r2,-24456(gp)
    12dc:	1885883a 	add	r2,r3,r2
    12e0:	d0a81f15 	stw	r2,-24452(gp)
			ALT_y += ALT_inc_y;
    12e4:	d0e81817 	ldw	r3,-24480(gp)
    12e8:	d0a81917 	ldw	r2,-24476(gp)
    12ec:	1885883a 	add	r2,r3,r2
    12f0:	d0a81815 	stw	r2,-24480(gp)

			del_middenlijn();
    12f4:	00031b00 	call	31b0 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    12f8:	0081a5c4 	movi	r2,1687
    12fc:	d8800015 	stw	r2,0(sp)
    1300:	01004f04 	movi	r4,316
    1304:	000b883a 	mov	r5,zero
    1308:	01804fc4 	movi	r6,319
    130c:	01c03bc4 	movi	r7,239
    1310:	00030040 	call	3004 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1314:	d8000015 	stw	zero,0(sp)
    1318:	01004b04 	movi	r4,300
    131c:	01400104 	movi	r5,4
    1320:	01804c44 	movi	r6,305
    1324:	01c03ac4 	movi	r7,235
    1328:	00030040 	call	3004 <VGA_box>

			first = 0;
    132c:	d0200015 	stw	zero,-32768(gp)
    1330:	00000c06 	br	1364 <Singleplayer+0x168>
		} else {
			ALT_x1 += ALT_inc_x;
    1334:	d0e81d17 	ldw	r3,-24460(gp)
    1338:	d0a81e17 	ldw	r2,-24456(gp)
    133c:	1885883a 	add	r2,r3,r2
    1340:	d0a81d15 	stw	r2,-24460(gp)
			ALT_x2 += ALT_inc_x;
    1344:	d0e81f17 	ldw	r3,-24452(gp)
    1348:	d0a81e17 	ldw	r2,-24456(gp)
    134c:	1885883a 	add	r2,r3,r2
    1350:	d0a81f15 	stw	r2,-24452(gp)
			ALT_y += ALT_inc_y;
    1354:	d0e81817 	ldw	r3,-24480(gp)
    1358:	d0a81917 	ldw	r2,-24476(gp)
    135c:	1885883a 	add	r2,r3,r2
    1360:	d0a81815 	stw	r2,-24480(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1364:	d0e81817 	ldw	r3,-24480(gp)
    1368:	d0a81417 	ldw	r2,-24496(gp)
    136c:	18800326 	beq	r3,r2,137c <Singleplayer+0x180>
    1370:	d0a81817 	ldw	r2,-24480(gp)
    1374:	10800118 	cmpnei	r2,r2,4
    1378:	1000031e 	bne	r2,zero,1388 <Singleplayer+0x18c>
			ALT_inc_y = -(ALT_inc_y);
    137c:	d0a81917 	ldw	r2,-24476(gp)
    1380:	0085c83a 	sub	r2,zero,r2
    1384:	d0a81915 	stw	r2,-24476(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1388:	d0e81f17 	ldw	r3,-24452(gp)
    138c:	d0a81617 	ldw	r2,-24488(gp)
    1390:	1880071e 	bne	r3,r2,13b0 <Singleplayer+0x1b4>
			ALT_inc_x = -(ALT_inc_x);
    1394:	d0a81e17 	ldw	r2,-24456(gp)
    1398:	0085c83a 	sub	r2,zero,r2
    139c:	d0a81e15 	stw	r2,-24456(gp)
			deleteNummer();
    13a0:	000325c0 	call	325c <deleteNummer>
			score3++;
    13a4:	d0a81217 	ldw	r2,-24504(gp)
    13a8:	10800044 	addi	r2,r2,1
    13ac:	d0a81215 	stw	r2,-24504(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    13b0:	d1281d17 	ldw	r4,-24460(gp)
    13b4:	d1681817 	ldw	r5,-24480(gp)
    13b8:	d0a81d17 	ldw	r2,-24460(gp)
    13bc:	11800144 	addi	r6,r2,5
    13c0:	d0a81817 	ldw	r2,-24480(gp)
    13c4:	10c00144 	addi	r3,r2,5
    13c8:	00804034 	movhi	r2,256
    13cc:	10bfffc4 	addi	r2,r2,-1
    13d0:	d8800015 	stw	r2,0(sp)
    13d4:	180f883a 	mov	r7,r3
    13d8:	00030040 	call	3004 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    13dc:	d0a81d17 	ldw	r2,-24460(gp)
    13e0:	1000051e 	bne	r2,zero,13f8 <Singleplayer+0x1fc>
			leven--;
    13e4:	d0a00217 	ldw	r2,-32760(gp)
    13e8:	10bfffc4 	addi	r2,r2,-1
    13ec:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    13f0:	010000c4 	movi	r4,3
    13f4:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    13f8:	d0a81d17 	ldw	r2,-24460(gp)
    13fc:	10800558 	cmpnei	r2,r2,21
    1400:	10000c1e 	bne	r2,zero,1434 <Singleplayer+0x238>
    1404:	e0bffb17 	ldw	r2,-20(fp)
    1408:	10c00017 	ldw	r3,0(r2)
    140c:	d0a81817 	ldw	r2,-24480(gp)
    1410:	1880080e 	bge	r3,r2,1434 <Singleplayer+0x238>
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	10800017 	ldw	r2,0(r2)
    141c:	10800c84 	addi	r2,r2,50
    1420:	d0e81817 	ldw	r3,-24480(gp)
    1424:	1880030e 	bge	r3,r2,1434 <Singleplayer+0x238>
			ALT_inc_x = -(ALT_inc_x);
    1428:	d0a81e17 	ldw	r2,-24456(gp)
    142c:	0085c83a 	sub	r2,zero,r2
    1430:	d0a81e15 	stw	r2,-24456(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1434:	d0a81d17 	ldw	r2,-24460(gp)
    1438:	10800608 	cmpgei	r2,r2,24
    143c:	10000a1e 	bne	r2,zero,1468 <Singleplayer+0x26c>
    1440:	d0a81d17 	ldw	r2,-24460(gp)
    1444:	10800590 	cmplti	r2,r2,22
    1448:	1000071e 	bne	r2,zero,1468 <Singleplayer+0x26c>
    144c:	e0bffb17 	ldw	r2,-20(fp)
    1450:	10c00017 	ldw	r3,0(r2)
    1454:	d0a81817 	ldw	r2,-24480(gp)
    1458:	1880031e 	bne	r3,r2,1468 <Singleplayer+0x26c>
			ALT_inc_y = -(ALT_inc_y);
    145c:	d0a81917 	ldw	r2,-24476(gp)
    1460:	0085c83a 	sub	r2,zero,r2
    1464:	d0a81915 	stw	r2,-24476(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1468:	d0a81d17 	ldw	r2,-24460(gp)
    146c:	10800608 	cmpgei	r2,r2,24
    1470:	10000b1e 	bne	r2,zero,14a0 <Singleplayer+0x2a4>
    1474:	d0a81d17 	ldw	r2,-24460(gp)
    1478:	10800590 	cmplti	r2,r2,22
    147c:	1000081e 	bne	r2,zero,14a0 <Singleplayer+0x2a4>
    1480:	e0bffb17 	ldw	r2,-20(fp)
    1484:	10800017 	ldw	r2,0(r2)
    1488:	10c00c84 	addi	r3,r2,50
    148c:	d0a81817 	ldw	r2,-24480(gp)
    1490:	1880031e 	bne	r3,r2,14a0 <Singleplayer+0x2a4>
			ALT_inc_y = -(ALT_inc_y);
    1494:	d0a81917 	ldw	r2,-24476(gp)
    1498:	0085c83a 	sub	r2,zero,r2
    149c:	d0a81915 	stw	r2,-24476(gp)
		}


		sprintf(levens, "LEVENS: %d", leven);
    14a0:	d0a00217 	ldw	r2,-32760(gp)
    14a4:	e0fffc44 	addi	r3,fp,-15
    14a8:	1809883a 	mov	r4,r3
    14ac:	014000b4 	movhi	r5,2
    14b0:	2940ce04 	addi	r5,r5,824
    14b4:	100d883a 	mov	r6,r2
    14b8:	0003ae80 	call	3ae8 <sprintf>
		VGA_text(6,5, levens);
    14bc:	e0bffc44 	addi	r2,fp,-15
    14c0:	01000184 	movi	r4,6
    14c4:	01400144 	movi	r5,5
    14c8:	100d883a 	mov	r6,r2
    14cc:	00030b80 	call	30b8 <VGA_text>
		OSTimeDly(1);
    14d0:	01000044 	movi	r4,1
    14d4:	001bf000 	call	1bf00 <OSTimeDly>

		for (i = 0; i <= 999; i++) {
    14d8:	e03ffa15 	stw	zero,-24(fp)
    14dc:	00004806 	br	1600 <Singleplayer+0x404>

			if(score3 == i){
    14e0:	d0e81217 	ldw	r3,-24504(gp)
    14e4:	e0bffa17 	ldw	r2,-24(fp)
    14e8:	18803c1e 	bne	r3,r2,15dc <Singleplayer+0x3e0>

				if (score3 >= 0 && score3 <= 9){
    14ec:	d0a81217 	ldw	r2,-24504(gp)
    14f0:	10000716 	blt	r2,zero,1510 <Singleplayer+0x314>
    14f4:	d0a81217 	ldw	r2,-24504(gp)
    14f8:	10800288 	cmpgei	r2,r2,10
    14fc:	1000041e 	bne	r2,zero,1510 <Singleplayer+0x314>
					draw_number(i, 3);
    1500:	e13ffa17 	ldw	r4,-24(fp)
    1504:	014000c4 	movi	r5,3
    1508:	00032980 	call	3298 <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    150c:	00003306 	br	15dc <Singleplayer+0x3e0>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1510:	d0a81217 	ldw	r2,-24504(gp)
    1514:	10800290 	cmplti	r2,r2,10
    1518:	1000121e 	bne	r2,zero,1564 <Singleplayer+0x368>
    151c:	d0a81217 	ldw	r2,-24504(gp)
    1520:	10801908 	cmpgei	r2,r2,100
    1524:	10000f1e 	bne	r2,zero,1564 <Singleplayer+0x368>
					draw_number(i /10 , 2);
    1528:	e0fffa17 	ldw	r3,-24(fp)
    152c:	00800284 	movi	r2,10
    1530:	1885283a 	div	r2,r3,r2
    1534:	1009883a 	mov	r4,r2
    1538:	01400084 	movi	r5,2
    153c:	00032980 	call	3298 <draw_number>
					draw_number(i %10, 3);
    1540:	e0bffa17 	ldw	r2,-24(fp)
    1544:	00c00284 	movi	r3,10
    1548:	10c7283a 	div	r3,r2,r3
    154c:	18c002a4 	muli	r3,r3,10
    1550:	10c5c83a 	sub	r2,r2,r3
    1554:	1009883a 	mov	r4,r2
    1558:	014000c4 	movi	r5,3
    155c:	00032980 	call	3298 <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1560:	00001e06 	br	15dc <Singleplayer+0x3e0>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1564:	d0a81217 	ldw	r2,-24504(gp)
    1568:	10801910 	cmplti	r2,r2,100
    156c:	10001b1e 	bne	r2,zero,15dc <Singleplayer+0x3e0>
    1570:	d0a81217 	ldw	r2,-24504(gp)
    1574:	1080fa08 	cmpgei	r2,r2,1000
    1578:	1000181e 	bne	r2,zero,15dc <Singleplayer+0x3e0>
					draw_number(i /100 , 1);
    157c:	e0fffa17 	ldw	r3,-24(fp)
    1580:	00801904 	movi	r2,100
    1584:	1885283a 	div	r2,r3,r2
    1588:	1009883a 	mov	r4,r2
    158c:	01400044 	movi	r5,1
    1590:	00032980 	call	3298 <draw_number>
					draw_number(i /10 %10, 2);
    1594:	e0fffa17 	ldw	r3,-24(fp)
    1598:	00800284 	movi	r2,10
    159c:	1885283a 	div	r2,r3,r2
    15a0:	00c00284 	movi	r3,10
    15a4:	10c7283a 	div	r3,r2,r3
    15a8:	18c002a4 	muli	r3,r3,10
    15ac:	10c5c83a 	sub	r2,r2,r3
    15b0:	1009883a 	mov	r4,r2
    15b4:	01400084 	movi	r5,2
    15b8:	00032980 	call	3298 <draw_number>
					draw_number(i %10, 3);
    15bc:	e0bffa17 	ldw	r2,-24(fp)
    15c0:	00c00284 	movi	r3,10
    15c4:	10c7283a 	div	r3,r2,r3
    15c8:	18c002a4 	muli	r3,r3,10
    15cc:	10c5c83a 	sub	r2,r2,r3
    15d0:	1009883a 	mov	r4,r2
    15d4:	014000c4 	movi	r5,3
    15d8:	00032980 	call	3298 <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    15dc:	d0a81217 	ldw	r2,-24504(gp)
    15e0:	1080f9e0 	cmpeqi	r2,r2,999
    15e4:	1000021e 	bne	r2,zero,15f0 <Singleplayer+0x3f4>
    15e8:	d0a00217 	ldw	r2,-32760(gp)
    15ec:	1000011e 	bne	r2,zero,15f4 <Singleplayer+0x3f8>
				endSingleplayer();
    15f0:	00010700 	call	1070 <endSingleplayer>

		sprintf(levens, "LEVENS: %d", leven);
		VGA_text(6,5, levens);
		OSTimeDly(1);

		for (i = 0; i <= 999; i++) {
    15f4:	e0bffa17 	ldw	r2,-24(fp)
    15f8:	10800044 	addi	r2,r2,1
    15fc:	e0bffa15 	stw	r2,-24(fp)
    1600:	e0bffa17 	ldw	r2,-24(fp)
    1604:	1080fa10 	cmplti	r2,r2,1000
    1608:	103fb51e 	bne	r2,zero,14e0 <__alt_mem_Flash_flash_data+0xf40014e0>





	}
    160c:	003f0d06 	br	1244 <__alt_mem_Flash_flash_data+0xf4001244>

00001610 <tutorialUitleg>:
	
}

void tutorialUitleg(){
    1610:	defffe04 	addi	sp,sp,-8
    1614:	dfc00115 	stw	ra,4(sp)
    1618:	df000015 	stw	fp,0(sp)
    161c:	d839883a 	mov	fp,sp
	INT8U err;
	
	VGA_text(10, 5, "Er zijn twee soorten spellen: Singleplayer en Multiplayer.");
    1620:	01000284 	movi	r4,10
    1624:	01400144 	movi	r5,5
    1628:	018000b4 	movhi	r6,2
    162c:	3180d104 	addi	r6,r6,836
    1630:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 7, "In Singleplayer speel je tegen de computer, waarbij je");
    1634:	01000284 	movi	r4,10
    1638:	014001c4 	movi	r5,7
    163c:	018000b4 	movhi	r6,2
    1640:	3180e004 	addi	r6,r6,896
    1644:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 8, "zoveel mogelijk aantal punten moet bereiken door de bal");
    1648:	01000284 	movi	r4,10
    164c:	01400204 	movi	r5,8
    1650:	018000b4 	movhi	r6,2
    1654:	3180ee04 	addi	r6,r6,952
    1658:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 9, "tegen de muur te kaatsen. Hierbij heb je 3 levens.");
    165c:	01000284 	movi	r4,10
    1660:	01400244 	movi	r5,9
    1664:	018000b4 	movhi	r6,2
    1668:	3180fc04 	addi	r6,r6,1008
    166c:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 11, "In Multiplayer gaat het er om dat je de bal in het doel");
    1670:	01000284 	movi	r4,10
    1674:	014002c4 	movi	r5,11
    1678:	018000b4 	movhi	r6,2
    167c:	31810904 	addi	r6,r6,1060
    1680:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 12, "van de tegenstander krijgt. Het doel bevindt zich achter");
    1684:	01000284 	movi	r4,10
    1688:	01400304 	movi	r5,12
    168c:	018000b4 	movhi	r6,2
    1690:	31811704 	addi	r6,r6,1116
    1694:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 13, "het balkje van de tegenstander. Wanneer je scoort krijg je");
    1698:	01000284 	movi	r4,10
    169c:	01400344 	movi	r5,13
    16a0:	018000b4 	movhi	r6,2
    16a4:	31812604 	addi	r6,r6,1176
    16a8:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 14, "1 punt.");
    16ac:	01000284 	movi	r4,10
    16b0:	01400384 	movi	r5,14
    16b4:	018000b4 	movhi	r6,2
    16b8:	31813504 	addi	r6,r6,1236
    16bc:	00030b80 	call	30b8 <VGA_text>
	
	VGA_text(10, 38, "De besturing gaat als volgt:");
    16c0:	01000284 	movi	r4,10
    16c4:	01400984 	movi	r5,38
    16c8:	018000b4 	movhi	r6,2
    16cc:	31813704 	addi	r6,r6,1244
    16d0:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 40, "De linker balk wordt bestuurd door het op en neer bewegen");
    16d4:	01000284 	movi	r4,10
    16d8:	01400a04 	movi	r5,40
    16dc:	018000b4 	movhi	r6,2
    16e0:	31813f04 	addi	r6,r6,1276
    16e4:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 41, "van switch 17. Bij de multiplayer wordt ook nog vereist om");
    16e8:	01000284 	movi	r4,10
    16ec:	01400a44 	movi	r5,41
    16f0:	018000b4 	movhi	r6,2
    16f4:	31814e04 	addi	r6,r6,1336
    16f8:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 42, "de linker knop in te houden, anders ben je af. Dit geldt ook");
    16fc:	01000284 	movi	r4,10
    1700:	01400a84 	movi	r5,42
    1704:	018000b4 	movhi	r6,2
    1708:	31815d04 	addi	r6,r6,1396
    170c:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 43, "voor de rechter knop voor de rechter balk.");
    1710:	01000284 	movi	r4,10
    1714:	01400ac4 	movi	r5,43
    1718:	018000b4 	movhi	r6,2
    171c:	31816d04 	addi	r6,r6,1460
    1720:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 45, "De rechter balk wordt bestuurd KEY3 en KEY2. KEY3 = omlaag,");
    1724:	01000284 	movi	r4,10
    1728:	01400b44 	movi	r5,45
    172c:	018000b4 	movhi	r6,2
    1730:	31817804 	addi	r6,r6,1504
    1734:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 46, "KEY2 = omhoog.");
    1738:	01000284 	movi	r4,10
    173c:	01400b84 	movi	r5,46
    1740:	018000b4 	movhi	r6,2
    1744:	31818704 	addi	r6,r6,1564
    1748:	00030b80 	call	30b8 <VGA_text>
	
	terugMenu();
    174c:	00023ac0 	call	23ac <terugMenu>
}
    1750:	e037883a 	mov	sp,fp
    1754:	dfc00117 	ldw	ra,4(sp)
    1758:	df000017 	ldw	fp,0(sp)
    175c:	dec00204 	addi	sp,sp,8
    1760:	f800283a 	ret

00001764 <endTutorial>:

void endTutorial(){
    1764:	defffc04 	addi	sp,sp,-16
    1768:	dfc00315 	stw	ra,12(sp)
    176c:	df000215 	stw	fp,8(sp)
    1770:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Tutorial\n");
    1774:	010000b4 	movhi	r4,2
    1778:	21018b04 	addi	r4,r4,1580
    177c:	0003a7c0 	call	3a7c <puts>

	//clearScreen();
	VGA_text(10, 5, "                                                                              ");
    1780:	01000284 	movi	r4,10
    1784:	01400144 	movi	r5,5
    1788:	018000b4 	movhi	r6,2
    178c:	31818f04 	addi	r6,r6,1596
    1790:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 6, "                                                                              ");
    1794:	01000284 	movi	r4,10
    1798:	01400184 	movi	r5,6
    179c:	018000b4 	movhi	r6,2
    17a0:	31818f04 	addi	r6,r6,1596
    17a4:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 7, "                                                                              ");
    17a8:	01000284 	movi	r4,10
    17ac:	014001c4 	movi	r5,7
    17b0:	018000b4 	movhi	r6,2
    17b4:	31818f04 	addi	r6,r6,1596
    17b8:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 8, "                                                                              ");
    17bc:	01000284 	movi	r4,10
    17c0:	01400204 	movi	r5,8
    17c4:	018000b4 	movhi	r6,2
    17c8:	31818f04 	addi	r6,r6,1596
    17cc:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 9, "                                                                              ");
    17d0:	01000284 	movi	r4,10
    17d4:	01400244 	movi	r5,9
    17d8:	018000b4 	movhi	r6,2
    17dc:	31818f04 	addi	r6,r6,1596
    17e0:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 11, "                                                                              ");
    17e4:	01000284 	movi	r4,10
    17e8:	014002c4 	movi	r5,11
    17ec:	018000b4 	movhi	r6,2
    17f0:	31818f04 	addi	r6,r6,1596
    17f4:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 12, "                                                                              ");
    17f8:	01000284 	movi	r4,10
    17fc:	01400304 	movi	r5,12
    1800:	018000b4 	movhi	r6,2
    1804:	31818f04 	addi	r6,r6,1596
    1808:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 13, "                                                                              ");
    180c:	01000284 	movi	r4,10
    1810:	01400344 	movi	r5,13
    1814:	018000b4 	movhi	r6,2
    1818:	31818f04 	addi	r6,r6,1596
    181c:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 14, "                                                                              ");
    1820:	01000284 	movi	r4,10
    1824:	01400384 	movi	r5,14
    1828:	018000b4 	movhi	r6,2
    182c:	31818f04 	addi	r6,r6,1596
    1830:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 38, "                                                                              ");
    1834:	01000284 	movi	r4,10
    1838:	01400984 	movi	r5,38
    183c:	018000b4 	movhi	r6,2
    1840:	31818f04 	addi	r6,r6,1596
    1844:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 40, "                                                                              ");
    1848:	01000284 	movi	r4,10
    184c:	01400a04 	movi	r5,40
    1850:	018000b4 	movhi	r6,2
    1854:	31818f04 	addi	r6,r6,1596
    1858:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 41, "                                                                              ");
    185c:	01000284 	movi	r4,10
    1860:	01400a44 	movi	r5,41
    1864:	018000b4 	movhi	r6,2
    1868:	31818f04 	addi	r6,r6,1596
    186c:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 42, "                                                                              ");
    1870:	01000284 	movi	r4,10
    1874:	01400a84 	movi	r5,42
    1878:	018000b4 	movhi	r6,2
    187c:	31818f04 	addi	r6,r6,1596
    1880:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 43, "                                                                              ");
    1884:	01000284 	movi	r4,10
    1888:	01400ac4 	movi	r5,43
    188c:	018000b4 	movhi	r6,2
    1890:	31818f04 	addi	r6,r6,1596
    1894:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 45, "                                                                              ");
    1898:	01000284 	movi	r4,10
    189c:	01400b44 	movi	r5,45
    18a0:	018000b4 	movhi	r6,2
    18a4:	31818f04 	addi	r6,r6,1596
    18a8:	00030b80 	call	30b8 <VGA_text>
	VGA_text(10, 46, "                                                                              ");
    18ac:	01000284 	movi	r4,10
    18b0:	01400b84 	movi	r5,46
    18b4:	018000b4 	movhi	r6,2
    18b8:	31818f04 	addi	r6,r6,1596
    18bc:	00030b80 	call	30b8 <VGA_text>
	
	VGA_text(63, 56, "              ");
    18c0:	01000fc4 	movi	r4,63
    18c4:	01400e04 	movi	r5,56
    18c8:	018000b4 	movhi	r6,2
    18cc:	3181a304 	addi	r6,r6,1676
    18d0:	00030b80 	call	30b8 <VGA_text>
	VGA_text(63, 57, "               ");
    18d4:	01000fc4 	movi	r4,63
    18d8:	01400e44 	movi	r5,57
    18dc:	018000b4 	movhi	r6,2
    18e0:	3181a704 	addi	r6,r6,1692
    18e4:	00030b80 	call	30b8 <VGA_text>

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
    18e8:	d0a80d17 	ldw	r2,-24524(gp)
    18ec:	1009883a 	mov	r4,r2
    18f0:	01400104 	movi	r5,4
    18f4:	01800044 	movi	r6,1
    18f8:	e1ffff04 	addi	r7,fp,-4
    18fc:	0016d440 	call	16d44 <OSFlagPost>

	VGA_text(35, 25, "Einde Tutorial");
    1900:	010008c4 	movi	r4,35
    1904:	01400644 	movi	r5,25
    1908:	018000b4 	movhi	r6,2
    190c:	3181ab04 	addi	r6,r6,1708
    1910:	00030b80 	call	30b8 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1914:	0009883a 	mov	r4,zero
    1918:	000b883a 	mov	r5,zero
    191c:	01800a04 	movi	r6,40
    1920:	000f883a 	mov	r7,zero
    1924:	001c0480 	call	1c048 <OSTimeDlyHMSM>
	VGA_text(35, 25, "              ");
    1928:	010008c4 	movi	r4,35
    192c:	01400644 	movi	r5,25
    1930:	018000b4 	movhi	r6,2
    1934:	3181a304 	addi	r6,r6,1676
    1938:	00030b80 	call	30b8 <VGA_text>




	teken_menu(4);
    193c:	01000104 	movi	r4,4
    1940:	0002b400 	call	2b40 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    1944:	d8000015 	stw	zero,0(sp)
    1948:	01004f04 	movi	r4,316
    194c:	01400104 	movi	r5,4
    1950:	01804fc4 	movi	r6,319
    1954:	01c03ac4 	movi	r7,235
    1958:	00030040 	call	3004 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    195c:	d1281d17 	ldw	r4,-24460(gp)
    1960:	d1681817 	ldw	r5,-24480(gp)
    1964:	d0a81d17 	ldw	r2,-24460(gp)
    1968:	10c00144 	addi	r3,r2,5
    196c:	d0a81817 	ldw	r2,-24480(gp)
    1970:	10800144 	addi	r2,r2,5
    1974:	d8000015 	stw	zero,0(sp)
    1978:	180d883a 	mov	r6,r3
    197c:	100f883a 	mov	r7,r2
    1980:	00030040 	call	3004 <VGA_box>


	ALT_x1 = 0;
    1984:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
    1988:	00802944 	movi	r2,165
    198c:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
    1990:	00801904 	movi	r2,100
    1994:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    1998:	00bfffc4 	movi	r2,-1
    199c:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
    19a0:	00800044 	movi	r2,1
    19a4:	d0a81915 	stw	r2,-24476(gp)

	first = 1;
    19a8:	00800044 	movi	r2,1
    19ac:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    19b0:	d0a80d17 	ldw	r2,-24524(gp)
    19b4:	1009883a 	mov	r4,r2
    19b8:	01400444 	movi	r5,17
    19bc:	000d883a 	mov	r6,zero
    19c0:	e1ffff04 	addi	r7,fp,-4
    19c4:	0016d440 	call	16d44 <OSFlagPost>

	OSFlagPost(Flags_Tutorial, Tutorial_Flag, OS_FLAG_SET, &err);
    19c8:	d0a81017 	ldw	r2,-24512(gp)
    19cc:	1009883a 	mov	r4,r2
    19d0:	01401004 	movi	r5,64
    19d4:	01800044 	movi	r6,1
    19d8:	e1ffff04 	addi	r7,fp,-4
    19dc:	0016d440 	call	16d44 <OSFlagPost>

}
    19e0:	e037883a 	mov	sp,fp
    19e4:	dfc00117 	ldw	ra,4(sp)
    19e8:	df000017 	ldw	fp,0(sp)
    19ec:	dec00204 	addi	sp,sp,8
    19f0:	f800283a 	ret

000019f4 <Tutorial>:

void Tutorial(void* pdata){
    19f4:	defffa04 	addi	sp,sp,-24
    19f8:	dfc00515 	stw	ra,20(sp)
    19fc:	df000415 	stw	fp,16(sp)
    1a00:	df000404 	addi	fp,sp,16
    1a04:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1a08:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
    1a0c:	00802944 	movi	r2,165
    1a10:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
    1a14:	00801904 	movi	r2,100
    1a18:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = 1;
    1a1c:	00800044 	movi	r2,1
    1a20:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
    1a24:	00800044 	movi	r2,1
    1a28:	d0a81915 	stw	r2,-24476(gp)

	pixel_buffer_x = 315;
    1a2c:	00804ec4 	movi	r2,315
    1a30:	d0a81615 	stw	r2,-24488(gp)
	pixel_buffer_y = 230;
    1a34:	00803984 	movi	r2,230
    1a38:	d0a81415 	stw	r2,-24496(gp)
	int count;
	int q;
	Balk * balkje;
	
	while (1) {
		OSFlagPend(Flags_Tutorial, Tutorial_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1a3c:	d0e81017 	ldw	r3,-24512(gp)
    1a40:	e0bffe04 	addi	r2,fp,-8
    1a44:	d8800015 	stw	r2,0(sp)
    1a48:	1809883a 	mov	r4,r3
    1a4c:	01401004 	movi	r5,64
    1a50:	01800044 	movi	r6,1
    1a54:	000f883a 	mov	r7,zero
    1a58:	00166ec0 	call	166ec <OSFlagPend>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    1a5c:	d0e80e17 	ldw	r3,-24520(gp)
    1a60:	e0bffe04 	addi	r2,fp,-8
    1a64:	1809883a 	mov	r4,r3
    1a68:	000b883a 	mov	r5,zero
    1a6c:	100d883a 	mov	r6,r2
    1a70:	00179e40 	call	179e4 <OSMboxPend>
    1a74:	e0bffd15 	stw	r2,-12(fp)

		//printf("TUTORIAL SET\n");

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		tutorialUitleg();
    1a78:	00016100 	call	1610 <tutorialUitleg>
		
		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1a7c:	d1281d17 	ldw	r4,-24460(gp)
    1a80:	d1681817 	ldw	r5,-24480(gp)
    1a84:	d0a81d17 	ldw	r2,-24460(gp)
    1a88:	10c00144 	addi	r3,r2,5
    1a8c:	d0a81817 	ldw	r2,-24480(gp)
    1a90:	10800144 	addi	r2,r2,5
    1a94:	d8000015 	stw	zero,0(sp)
    1a98:	180d883a 	mov	r6,r3
    1a9c:	100f883a 	mov	r7,r2
    1aa0:	00030040 	call	3004 <VGA_box>


		if (first == 1) {
    1aa4:	d0a00017 	ldw	r2,-32768(gp)
    1aa8:	10800058 	cmpnei	r2,r2,1
    1aac:	10001d1e 	bne	r2,zero,1b24 <Tutorial+0x130>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    1ab0:	d0a81d17 	ldw	r2,-24460(gp)
    1ab4:	10c02804 	addi	r3,r2,160
    1ab8:	d0a81e17 	ldw	r2,-24456(gp)
    1abc:	1885883a 	add	r2,r3,r2
    1ac0:	d0a81d15 	stw	r2,-24460(gp)
			ALT_x2 += ALT_inc_x;
    1ac4:	d0e81f17 	ldw	r3,-24452(gp)
    1ac8:	d0a81e17 	ldw	r2,-24456(gp)
    1acc:	1885883a 	add	r2,r3,r2
    1ad0:	d0a81f15 	stw	r2,-24452(gp)
			ALT_y += ALT_inc_y;
    1ad4:	d0e81817 	ldw	r3,-24480(gp)
    1ad8:	d0a81917 	ldw	r2,-24476(gp)
    1adc:	1885883a 	add	r2,r3,r2
    1ae0:	d0a81815 	stw	r2,-24480(gp)

			del_middenlijn();
    1ae4:	00031b00 	call	31b0 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1ae8:	0081a5c4 	movi	r2,1687
    1aec:	d8800015 	stw	r2,0(sp)
    1af0:	01004f04 	movi	r4,316
    1af4:	000b883a 	mov	r5,zero
    1af8:	01804fc4 	movi	r6,319
    1afc:	01c03bc4 	movi	r7,239
    1b00:	00030040 	call	3004 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1b04:	d8000015 	stw	zero,0(sp)
    1b08:	01004b04 	movi	r4,300
    1b0c:	01400104 	movi	r5,4
    1b10:	01804c44 	movi	r6,305
    1b14:	01c03ac4 	movi	r7,235
    1b18:	00030040 	call	3004 <VGA_box>

			first = 0;
    1b1c:	d0200015 	stw	zero,-32768(gp)
    1b20:	00000c06 	br	1b54 <Tutorial+0x160>
		} else {
			ALT_x1 += ALT_inc_x;
    1b24:	d0e81d17 	ldw	r3,-24460(gp)
    1b28:	d0a81e17 	ldw	r2,-24456(gp)
    1b2c:	1885883a 	add	r2,r3,r2
    1b30:	d0a81d15 	stw	r2,-24460(gp)
			ALT_x2 += ALT_inc_x;
    1b34:	d0e81f17 	ldw	r3,-24452(gp)
    1b38:	d0a81e17 	ldw	r2,-24456(gp)
    1b3c:	1885883a 	add	r2,r3,r2
    1b40:	d0a81f15 	stw	r2,-24452(gp)
			ALT_y += ALT_inc_y;
    1b44:	d0e81817 	ldw	r3,-24480(gp)
    1b48:	d0a81917 	ldw	r2,-24476(gp)
    1b4c:	1885883a 	add	r2,r3,r2
    1b50:	d0a81815 	stw	r2,-24480(gp)
		



		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1b54:	d0e81817 	ldw	r3,-24480(gp)
    1b58:	d0a81417 	ldw	r2,-24496(gp)
    1b5c:	18800326 	beq	r3,r2,1b6c <Tutorial+0x178>
    1b60:	d0a81817 	ldw	r2,-24480(gp)
    1b64:	10800118 	cmpnei	r2,r2,4
    1b68:	1000031e 	bne	r2,zero,1b78 <Tutorial+0x184>
			ALT_inc_y = -(ALT_inc_y);
    1b6c:	d0a81917 	ldw	r2,-24476(gp)
    1b70:	0085c83a 	sub	r2,zero,r2
    1b74:	d0a81915 	stw	r2,-24476(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    1b78:	d0e81f17 	ldw	r3,-24452(gp)
    1b7c:	d0a81617 	ldw	r2,-24488(gp)
    1b80:	1880031e 	bne	r3,r2,1b90 <Tutorial+0x19c>
			ALT_inc_x = -(ALT_inc_x);
    1b84:	d0a81e17 	ldw	r2,-24456(gp)
    1b88:	0085c83a 	sub	r2,zero,r2
    1b8c:	d0a81e15 	stw	r2,-24456(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    1b90:	d1281d17 	ldw	r4,-24460(gp)
    1b94:	d1681817 	ldw	r5,-24480(gp)
    1b98:	d0a81d17 	ldw	r2,-24460(gp)
    1b9c:	11800144 	addi	r6,r2,5
    1ba0:	d0a81817 	ldw	r2,-24480(gp)
    1ba4:	10c00144 	addi	r3,r2,5
    1ba8:	00804034 	movhi	r2,256
    1bac:	10bfffc4 	addi	r2,r2,-1
    1bb0:	d8800015 	stw	r2,0(sp)
    1bb4:	180f883a 	mov	r7,r3
    1bb8:	00030040 	call	3004 <VGA_box>
		
		//links dood
		if (ALT_x1 == 0) {
    1bbc:	d0a81d17 	ldw	r2,-24460(gp)
    1bc0:	1000021e 	bne	r2,zero,1bcc <Tutorial+0x1d8>
			gescoord(3);
    1bc4:	010000c4 	movi	r4,3
    1bc8:	0000c440 	call	c44 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1bcc:	d0a81d17 	ldw	r2,-24460(gp)
    1bd0:	10800558 	cmpnei	r2,r2,21
    1bd4:	10000c1e 	bne	r2,zero,1c08 <Tutorial+0x214>
    1bd8:	e0bffd17 	ldw	r2,-12(fp)
    1bdc:	10c00017 	ldw	r3,0(r2)
    1be0:	d0a81817 	ldw	r2,-24480(gp)
    1be4:	1880080e 	bge	r3,r2,1c08 <Tutorial+0x214>
    1be8:	e0bffd17 	ldw	r2,-12(fp)
    1bec:	10800017 	ldw	r2,0(r2)
    1bf0:	10800c84 	addi	r2,r2,50
    1bf4:	d0e81817 	ldw	r3,-24480(gp)
    1bf8:	1880030e 	bge	r3,r2,1c08 <Tutorial+0x214>
			ALT_inc_x = -(ALT_inc_x);
    1bfc:	d0a81e17 	ldw	r2,-24456(gp)
    1c00:	0085c83a 	sub	r2,zero,r2
    1c04:	d0a81e15 	stw	r2,-24456(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1c08:	d0a81d17 	ldw	r2,-24460(gp)
    1c0c:	10800608 	cmpgei	r2,r2,24
    1c10:	10000a1e 	bne	r2,zero,1c3c <Tutorial+0x248>
    1c14:	d0a81d17 	ldw	r2,-24460(gp)
    1c18:	10800590 	cmplti	r2,r2,22
    1c1c:	1000071e 	bne	r2,zero,1c3c <Tutorial+0x248>
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	10c00017 	ldw	r3,0(r2)
    1c28:	d0a81817 	ldw	r2,-24480(gp)
    1c2c:	1880031e 	bne	r3,r2,1c3c <Tutorial+0x248>
			ALT_inc_y = -(ALT_inc_y);
    1c30:	d0a81917 	ldw	r2,-24476(gp)
    1c34:	0085c83a 	sub	r2,zero,r2
    1c38:	d0a81915 	stw	r2,-24476(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1c3c:	d0a81d17 	ldw	r2,-24460(gp)
    1c40:	10800608 	cmpgei	r2,r2,24
    1c44:	10000b1e 	bne	r2,zero,1c74 <Tutorial+0x280>
    1c48:	d0a81d17 	ldw	r2,-24460(gp)
    1c4c:	10800590 	cmplti	r2,r2,22
    1c50:	1000081e 	bne	r2,zero,1c74 <Tutorial+0x280>
    1c54:	e0bffd17 	ldw	r2,-12(fp)
    1c58:	10800017 	ldw	r2,0(r2)
    1c5c:	10c00c84 	addi	r3,r2,50
    1c60:	d0a81817 	ldw	r2,-24480(gp)
    1c64:	1880031e 	bne	r3,r2,1c74 <Tutorial+0x280>
			ALT_inc_y = -(ALT_inc_y);
    1c68:	d0a81917 	ldw	r2,-24476(gp)
    1c6c:	0085c83a 	sub	r2,zero,r2
    1c70:	d0a81915 	stw	r2,-24476(gp)
		}

		
		if (controller(3) == 3) {
    1c74:	010000c4 	movi	r4,3
    1c78:	000039c0 	call	39c <controller>
    1c7c:	108000d8 	cmpnei	r2,r2,3
    1c80:	1000011e 	bne	r2,zero,1c88 <Tutorial+0x294>
			endTutorial();
    1c84:	00017640 	call	1764 <endTutorial>
		}

		OSTimeDly(1);
    1c88:	01000044 	movi	r4,1
    1c8c:	001bf000 	call	1bf00 <OSTimeDly>


	}
    1c90:	003f6a06 	br	1a3c <__alt_mem_Flash_flash_data+0xf4001a3c>

00001c94 <newHighscores>:
	
}

void newHighscores(void *pdata){
    1c94:	defffb04 	addi	sp,sp,-20
    1c98:	dfc00415 	stw	ra,16(sp)
    1c9c:	df000315 	stw	fp,12(sp)
    1ca0:	df000304 	addi	fp,sp,12
    1ca4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	char a = 'A';
    1ca8:	00801044 	movi	r2,65
    1cac:	e0bffe05 	stb	r2,-8(fp)
	char b = 'B';
    1cb0:	00801084 	movi	r2,66
    1cb4:	e0bffe45 	stb	r2,-7(fp)
	char c = 'C';
    1cb8:	008010c4 	movi	r2,67
    1cbc:	e0bffe85 	stb	r2,-6(fp)
	newHighscoreSelect = 1;
    1cc0:	00800044 	movi	r2,1
    1cc4:	d0a81c15 	stw	r2,-24464(gp)
	while(1){
		OSFlagPend(Flags_newHighscores, newHighscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    1cc8:	d0e81a17 	ldw	r3,-24472(gp)
    1ccc:	e0bffec4 	addi	r2,fp,-5
    1cd0:	d8800015 	stw	r2,0(sp)
    1cd4:	1809883a 	mov	r4,r3
    1cd8:	01404004 	movi	r5,256
    1cdc:	01800044 	movi	r6,1
    1ce0:	000f883a 	mov	r7,zero
    1ce4:	00166ec0 	call	166ec <OSFlagPend>

		VGA_text(35, 15, "New Highscore!");
    1ce8:	010008c4 	movi	r4,35
    1cec:	014003c4 	movi	r5,15
    1cf0:	018000b4 	movhi	r6,2
    1cf4:	3181af04 	addi	r6,r6,1724
    1cf8:	00030b80 	call	30b8 <VGA_text>
		
		if (controller(3) == 2){
    1cfc:	010000c4 	movi	r4,3
    1d00:	000039c0 	call	39c <controller>
    1d04:	10800098 	cmpnei	r2,r2,2
    1d08:	1000151e 	bne	r2,zero,1d60 <newHighscores+0xcc>
			newHighscoreSelect++;
    1d0c:	d0a81c17 	ldw	r2,-24464(gp)
    1d10:	10800044 	addi	r2,r2,1
    1d14:	d0a81c15 	stw	r2,-24464(gp)
			VGA_box(16 * 4, 35 * 4, 20 * 4, 39 * 4, zwart);
    1d18:	d8000015 	stw	zero,0(sp)
    1d1c:	01001004 	movi	r4,64
    1d20:	01402304 	movi	r5,140
    1d24:	01801404 	movi	r6,80
    1d28:	01c02704 	movi	r7,156
    1d2c:	00030040 	call	3004 <VGA_box>
			VGA_box(26 * 4, 35 * 4, 30 * 4, 39 * 4, zwart);
    1d30:	d8000015 	stw	zero,0(sp)
    1d34:	01001a04 	movi	r4,104
    1d38:	01402304 	movi	r5,140
    1d3c:	01801e04 	movi	r6,120
    1d40:	01c02704 	movi	r7,156
    1d44:	00030040 	call	3004 <VGA_box>
			VGA_box(36 * 4, 35 * 4, 40 * 4, 39 * 4, zwart);
    1d48:	d8000015 	stw	zero,0(sp)
    1d4c:	01002404 	movi	r4,144
    1d50:	01402304 	movi	r5,140
    1d54:	01802804 	movi	r6,160
    1d58:	01c02704 	movi	r7,156
    1d5c:	00030040 	call	3004 <VGA_box>
		}
		if (newHighscoreSelect >= 5){
    1d60:	d0a81c17 	ldw	r2,-24464(gp)
    1d64:	10800150 	cmplti	r2,r2,5
    1d68:	1000021e 	bne	r2,zero,1d74 <newHighscores+0xe0>
			newHighscoreSelect = 1;
    1d6c:	00800044 	movi	r2,1
    1d70:	d0a81c15 	stw	r2,-24464(gp)
		}
		
		if(controller(2) == 1 && newHighscoreSelect == 1){
    1d74:	01000084 	movi	r4,2
    1d78:	000039c0 	call	39c <controller>
    1d7c:	10800058 	cmpnei	r2,r2,1
    1d80:	1000101e 	bne	r2,zero,1dc4 <newHighscores+0x130>
    1d84:	d0a81c17 	ldw	r2,-24464(gp)
    1d88:	10800058 	cmpnei	r2,r2,1
    1d8c:	10000d1e 	bne	r2,zero,1dc4 <newHighscores+0x130>
			if(a == 'Z' && controller(2) == 1){
    1d90:	e0bffe07 	ldb	r2,-8(fp)
    1d94:	10801698 	cmpnei	r2,r2,90
    1d98:	1000061e 	bne	r2,zero,1db4 <newHighscores+0x120>
    1d9c:	01000084 	movi	r4,2
    1da0:	000039c0 	call	39c <controller>
    1da4:	10800058 	cmpnei	r2,r2,1
    1da8:	1000021e 	bne	r2,zero,1db4 <newHighscores+0x120>
				a = 'A';
    1dac:	00801044 	movi	r2,65
    1db0:	e0bffe05 	stb	r2,-8(fp)
			}
			a++;
    1db4:	e0bffe03 	ldbu	r2,-8(fp)
    1db8:	10800044 	addi	r2,r2,1
    1dbc:	e0bffe05 	stb	r2,-8(fp)
    1dc0:	00001106 	br	1e08 <newHighscores+0x174>
		} else if (controller(2) == 0 && newHighscoreSelect == 1){
    1dc4:	01000084 	movi	r4,2
    1dc8:	000039c0 	call	39c <controller>
    1dcc:	10000e1e 	bne	r2,zero,1e08 <newHighscores+0x174>
    1dd0:	d0a81c17 	ldw	r2,-24464(gp)
    1dd4:	10800058 	cmpnei	r2,r2,1
    1dd8:	10000b1e 	bne	r2,zero,1e08 <newHighscores+0x174>
			if (a == 'A' && controller(2) == 0){
    1ddc:	e0bffe07 	ldb	r2,-8(fp)
    1de0:	10801058 	cmpnei	r2,r2,65
    1de4:	1000051e 	bne	r2,zero,1dfc <newHighscores+0x168>
    1de8:	01000084 	movi	r4,2
    1dec:	000039c0 	call	39c <controller>
    1df0:	1000021e 	bne	r2,zero,1dfc <newHighscores+0x168>
				a = 'Z';
    1df4:	00801684 	movi	r2,90
    1df8:	e0bffe05 	stb	r2,-8(fp)
			}
			a--;
    1dfc:	e0bffe03 	ldbu	r2,-8(fp)
    1e00:	10bfffc4 	addi	r2,r2,-1
    1e04:	e0bffe05 	stb	r2,-8(fp)
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 2){
    1e08:	01000084 	movi	r4,2
    1e0c:	000039c0 	call	39c <controller>
    1e10:	10800058 	cmpnei	r2,r2,1
    1e14:	1000101e 	bne	r2,zero,1e58 <newHighscores+0x1c4>
    1e18:	d0a81c17 	ldw	r2,-24464(gp)
    1e1c:	10800098 	cmpnei	r2,r2,2
    1e20:	10000d1e 	bne	r2,zero,1e58 <newHighscores+0x1c4>
			if(b == 'Z' && controller(2) == 1){
    1e24:	e0bffe47 	ldb	r2,-7(fp)
    1e28:	10801698 	cmpnei	r2,r2,90
    1e2c:	1000061e 	bne	r2,zero,1e48 <newHighscores+0x1b4>
    1e30:	01000084 	movi	r4,2
    1e34:	000039c0 	call	39c <controller>
    1e38:	10800058 	cmpnei	r2,r2,1
    1e3c:	1000021e 	bne	r2,zero,1e48 <newHighscores+0x1b4>
				b = 'A';
    1e40:	00801044 	movi	r2,65
    1e44:	e0bffe45 	stb	r2,-7(fp)
			}
			b++;
    1e48:	e0bffe43 	ldbu	r2,-7(fp)
    1e4c:	10800044 	addi	r2,r2,1
    1e50:	e0bffe45 	stb	r2,-7(fp)
    1e54:	00001106 	br	1e9c <newHighscores+0x208>
		} else if (controller(2) == 0 && newHighscoreSelect == 2){
    1e58:	01000084 	movi	r4,2
    1e5c:	000039c0 	call	39c <controller>
    1e60:	10000e1e 	bne	r2,zero,1e9c <newHighscores+0x208>
    1e64:	d0a81c17 	ldw	r2,-24464(gp)
    1e68:	10800098 	cmpnei	r2,r2,2
    1e6c:	10000b1e 	bne	r2,zero,1e9c <newHighscores+0x208>
			if(b == 'A' && controller(2) == 0){
    1e70:	e0bffe47 	ldb	r2,-7(fp)
    1e74:	10801058 	cmpnei	r2,r2,65
    1e78:	1000051e 	bne	r2,zero,1e90 <newHighscores+0x1fc>
    1e7c:	01000084 	movi	r4,2
    1e80:	000039c0 	call	39c <controller>
    1e84:	1000021e 	bne	r2,zero,1e90 <newHighscores+0x1fc>
				b = 'Z';
    1e88:	00801684 	movi	r2,90
    1e8c:	e0bffe45 	stb	r2,-7(fp)
			}
			b--;
    1e90:	e0bffe43 	ldbu	r2,-7(fp)
    1e94:	10bfffc4 	addi	r2,r2,-1
    1e98:	e0bffe45 	stb	r2,-7(fp)
		}
		
		if (controller(2) == 1 && newHighscoreSelect == 3){
    1e9c:	01000084 	movi	r4,2
    1ea0:	000039c0 	call	39c <controller>
    1ea4:	10800058 	cmpnei	r2,r2,1
    1ea8:	1000101e 	bne	r2,zero,1eec <newHighscores+0x258>
    1eac:	d0a81c17 	ldw	r2,-24464(gp)
    1eb0:	108000d8 	cmpnei	r2,r2,3
    1eb4:	10000d1e 	bne	r2,zero,1eec <newHighscores+0x258>
			if(c == 'Z' && controller(2) == 1){
    1eb8:	e0bffe87 	ldb	r2,-6(fp)
    1ebc:	10801698 	cmpnei	r2,r2,90
    1ec0:	1000061e 	bne	r2,zero,1edc <newHighscores+0x248>
    1ec4:	01000084 	movi	r4,2
    1ec8:	000039c0 	call	39c <controller>
    1ecc:	10800058 	cmpnei	r2,r2,1
    1ed0:	1000021e 	bne	r2,zero,1edc <newHighscores+0x248>
				c = 'A';
    1ed4:	00801044 	movi	r2,65
    1ed8:	e0bffe85 	stb	r2,-6(fp)
			}
			c++;
    1edc:	e0bffe83 	ldbu	r2,-6(fp)
    1ee0:	10800044 	addi	r2,r2,1
    1ee4:	e0bffe85 	stb	r2,-6(fp)
    1ee8:	00001206 	br	1f34 <newHighscores+0x2a0>
		} else if (controller(2) == 0 && newHighscoreSelect == 3){
    1eec:	01000084 	movi	r4,2
    1ef0:	000039c0 	call	39c <controller>
    1ef4:	10000f1e 	bne	r2,zero,1f34 <newHighscores+0x2a0>
    1ef8:	d0a81c17 	ldw	r2,-24464(gp)
    1efc:	108000d8 	cmpnei	r2,r2,3
    1f00:	10000c1e 	bne	r2,zero,1f34 <newHighscores+0x2a0>
			if(c == 'A' && controller(2) == 1){
    1f04:	e0bffe87 	ldb	r2,-6(fp)
    1f08:	10801058 	cmpnei	r2,r2,65
    1f0c:	1000061e 	bne	r2,zero,1f28 <newHighscores+0x294>
    1f10:	01000084 	movi	r4,2
    1f14:	000039c0 	call	39c <controller>
    1f18:	10800058 	cmpnei	r2,r2,1
    1f1c:	1000021e 	bne	r2,zero,1f28 <newHighscores+0x294>
				c = 'Z';
    1f20:	00801684 	movi	r2,90
    1f24:	e0bffe85 	stb	r2,-6(fp)
			}
			c--;
    1f28:	e0bffe83 	ldbu	r2,-6(fp)
    1f2c:	10bfffc4 	addi	r2,r2,-1
    1f30:	e0bffe85 	stb	r2,-6(fp)
		}		
		
		if (newHighscoreSelect == 1){
    1f34:	d0a81c17 	ldw	r2,-24464(gp)
    1f38:	10800058 	cmpnei	r2,r2,1
    1f3c:	1000091e 	bne	r2,zero,1f64 <newHighscores+0x2d0>
			VGA_box(16 * 4, 35 * 4, 20 * 4, 39 * 4, geel);
    1f40:	00804034 	movhi	r2,256
    1f44:	10bfc004 	addi	r2,r2,-256
    1f48:	d8800015 	stw	r2,0(sp)
    1f4c:	01001004 	movi	r4,64
    1f50:	01402304 	movi	r5,140
    1f54:	01801404 	movi	r6,80
    1f58:	01c02704 	movi	r7,156
    1f5c:	00030040 	call	3004 <VGA_box>
    1f60:	00001706 	br	1fc0 <newHighscores+0x32c>
		} else if (newHighscoreSelect == 2){
    1f64:	d0a81c17 	ldw	r2,-24464(gp)
    1f68:	10800098 	cmpnei	r2,r2,2
    1f6c:	1000091e 	bne	r2,zero,1f94 <newHighscores+0x300>
			VGA_box(26 * 4, 35 * 4, 30 * 4, 39 * 4, geel);
    1f70:	00804034 	movhi	r2,256
    1f74:	10bfc004 	addi	r2,r2,-256
    1f78:	d8800015 	stw	r2,0(sp)
    1f7c:	01001a04 	movi	r4,104
    1f80:	01402304 	movi	r5,140
    1f84:	01801e04 	movi	r6,120
    1f88:	01c02704 	movi	r7,156
    1f8c:	00030040 	call	3004 <VGA_box>
    1f90:	00000b06 	br	1fc0 <newHighscores+0x32c>
		} else if (newHighscoreSelect == 3){
    1f94:	d0a81c17 	ldw	r2,-24464(gp)
    1f98:	108000d8 	cmpnei	r2,r2,3
    1f9c:	1000081e 	bne	r2,zero,1fc0 <newHighscores+0x32c>
			VGA_box(36 * 4, 35 * 4, 40 * 4, 39 * 4, geel);
    1fa0:	00804034 	movhi	r2,256
    1fa4:	10bfc004 	addi	r2,r2,-256
    1fa8:	d8800015 	stw	r2,0(sp)
    1fac:	01002404 	movi	r4,144
    1fb0:	01402304 	movi	r5,140
    1fb4:	01802804 	movi	r6,160
    1fb8:	01c02704 	movi	r7,156
    1fbc:	00030040 	call	3004 <VGA_box>
		}
		
		dakjeOmhoog(20, 30);
    1fc0:	01000504 	movi	r4,20
    1fc4:	01400784 	movi	r5,30
    1fc8:	0000ff00 	call	ff0 <dakjeOmhoog>
		VGA_text(16 + 4, 35, a);
    1fcc:	e0bffe07 	ldb	r2,-8(fp)
    1fd0:	01000504 	movi	r4,20
    1fd4:	014008c4 	movi	r5,35
    1fd8:	100d883a 	mov	r6,r2
    1fdc:	00030b80 	call	30b8 <VGA_text>
		dakjeOmlaag(20, 40);
    1fe0:	01000504 	movi	r4,20
    1fe4:	01400a04 	movi	r5,40
    1fe8:	00010300 	call	1030 <dakjeOmlaag>
		
		dakjeOmhoog(30, 30);
    1fec:	01000784 	movi	r4,30
    1ff0:	01400784 	movi	r5,30
    1ff4:	0000ff00 	call	ff0 <dakjeOmhoog>
		VGA_text(26 + 4, 35, b);
    1ff8:	e0bffe47 	ldb	r2,-7(fp)
    1ffc:	01000784 	movi	r4,30
    2000:	014008c4 	movi	r5,35
    2004:	100d883a 	mov	r6,r2
    2008:	00030b80 	call	30b8 <VGA_text>
		dakjeOmlaag(30, 40);
    200c:	01000784 	movi	r4,30
    2010:	01400a04 	movi	r5,40
    2014:	00010300 	call	1030 <dakjeOmlaag>
		
		dakjeOmhoog(40, 30);
    2018:	01000a04 	movi	r4,40
    201c:	01400784 	movi	r5,30
    2020:	0000ff00 	call	ff0 <dakjeOmhoog>
		VGA_text(36 + 4, 35, c);
    2024:	e0bffe87 	ldb	r2,-6(fp)
    2028:	01000a04 	movi	r4,40
    202c:	014008c4 	movi	r5,35
    2030:	100d883a 	mov	r6,r2
    2034:	00030b80 	call	30b8 <VGA_text>
		dakjeOmlaag(40, 40);
    2038:	01000a04 	movi	r4,40
    203c:	01400a04 	movi	r5,40
    2040:	00010300 	call	1030 <dakjeOmlaag>
		
		VGA_text(50, 35, "Bevestig");
    2044:	01000c84 	movi	r4,50
    2048:	014008c4 	movi	r5,35
    204c:	018000b4 	movhi	r6,2
    2050:	3181b304 	addi	r6,r6,1740
    2054:	00030b80 	call	30b8 <VGA_text>
		


					//controller(3) == 3 ??	
		if (controller(3) == 2 && newHighscoreSelect == 4) {
    2058:	010000c4 	movi	r4,3
    205c:	000039c0 	call	39c <controller>
    2060:	10800098 	cmpnei	r2,r2,2
    2064:	10002e1e 	bne	r2,zero,2120 <newHighscores+0x48c>
    2068:	d0a81c17 	ldw	r2,-24464(gp)
    206c:	10800118 	cmpnei	r2,r2,4
    2070:	10002b1e 	bne	r2,zero,2120 <newHighscores+0x48c>
			//save highscores naar SD kaart
			
			teken_menu(3);
    2074:	010000c4 	movi	r4,3
    2078:	0002b400 	call	2b40 <teken_menu>

			VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    207c:	d8000015 	stw	zero,0(sp)
    2080:	01004f04 	movi	r4,316
    2084:	01400104 	movi	r5,4
    2088:	01804fc4 	movi	r6,319
    208c:	01c03ac4 	movi	r7,235
    2090:	00030040 	call	3004 <VGA_box>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2094:	d1281d17 	ldw	r4,-24460(gp)
    2098:	d1681817 	ldw	r5,-24480(gp)
    209c:	d0a81d17 	ldw	r2,-24460(gp)
    20a0:	10c00144 	addi	r3,r2,5
    20a4:	d0a81817 	ldw	r2,-24480(gp)
    20a8:	10800144 	addi	r2,r2,5
    20ac:	d8000015 	stw	zero,0(sp)
    20b0:	180d883a 	mov	r6,r3
    20b4:	100f883a 	mov	r7,r2
    20b8:	00030040 	call	3004 <VGA_box>


			ALT_x1 = 0;
    20bc:	d0281d15 	stw	zero,-24460(gp)
			ALT_x2 = 165;
    20c0:	00802944 	movi	r2,165
    20c4:	d0a81f15 	stw	r2,-24452(gp)
			ALT_y = 100;
    20c8:	00801904 	movi	r2,100
    20cc:	d0a81815 	stw	r2,-24480(gp)
			ALT_inc_x = -1;
    20d0:	00bfffc4 	movi	r2,-1
    20d4:	d0a81e15 	stw	r2,-24456(gp)
			ALT_inc_y = 1;
    20d8:	00800044 	movi	r2,1
    20dc:	d0a81915 	stw	r2,-24476(gp)

			first = 1;
    20e0:	00800044 	movi	r2,1
    20e4:	d0a00015 	stw	r2,-32768(gp)

			OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    20e8:	d0e80d17 	ldw	r3,-24524(gp)
    20ec:	e0bffec4 	addi	r2,fp,-5
    20f0:	1809883a 	mov	r4,r3
    20f4:	01400444 	movi	r5,17
    20f8:	000d883a 	mov	r6,zero
    20fc:	100f883a 	mov	r7,r2
    2100:	0016d440 	call	16d44 <OSFlagPost>

			OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_SET, &err);
    2104:	d0e81717 	ldw	r3,-24484(gp)
    2108:	e0bffec4 	addi	r2,fp,-5
    210c:	1809883a 	mov	r4,r3
    2110:	01402004 	movi	r5,128
    2114:	01800044 	movi	r6,1
    2118:	100f883a 	mov	r7,r2
    211c:	0016d440 	call	16d44 <OSFlagPost>
		}
		
		OSTimeDly(1);
    2120:	01000044 	movi	r4,1
    2124:	001bf000 	call	1bf00 <OSTimeDly>
		
	}
    2128:	003ee706 	br	1cc8 <__alt_mem_Flash_flash_data+0xf4001cc8>

0000212c <endHighscores>:
	
}

void endHighscores(){
    212c:	defffc04 	addi	sp,sp,-16
    2130:	dfc00315 	stw	ra,12(sp)
    2134:	df000215 	stw	fp,8(sp)
    2138:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Highscores\n");
    213c:	010000b4 	movhi	r4,2
    2140:	2101b604 	addi	r4,r4,1752
    2144:	0003a7c0 	call	3a7c <puts>

	//clearScreen();

	VGA_text(35, 18, "                 ");
    2148:	010008c4 	movi	r4,35
    214c:	01400484 	movi	r5,18
    2150:	018000b4 	movhi	r6,2
    2154:	3181ba04 	addi	r6,r6,1768
    2158:	00030b80 	call	30b8 <VGA_text>
	VGA_text(35, 20, "                 ");
    215c:	010008c4 	movi	r4,35
    2160:	01400504 	movi	r5,20
    2164:	018000b4 	movhi	r6,2
    2168:	3181ba04 	addi	r6,r6,1768
    216c:	00030b80 	call	30b8 <VGA_text>
	VGA_text(35, 22, "                 ");
    2170:	010008c4 	movi	r4,35
    2174:	01400584 	movi	r5,22
    2178:	018000b4 	movhi	r6,2
    217c:	3181ba04 	addi	r6,r6,1768
    2180:	00030b80 	call	30b8 <VGA_text>
	VGA_text(35, 24, "                 ");
    2184:	010008c4 	movi	r4,35
    2188:	01400604 	movi	r5,24
    218c:	018000b4 	movhi	r6,2
    2190:	3181ba04 	addi	r6,r6,1768
    2194:	00030b80 	call	30b8 <VGA_text>
	VGA_text(35, 26, "                 ");
    2198:	010008c4 	movi	r4,35
    219c:	01400684 	movi	r5,26
    21a0:	018000b4 	movhi	r6,2
    21a4:	3181ba04 	addi	r6,r6,1768
    21a8:	00030b80 	call	30b8 <VGA_text>
	
	VGA_text(63, 56, "              ");
    21ac:	01000fc4 	movi	r4,63
    21b0:	01400e04 	movi	r5,56
    21b4:	018000b4 	movhi	r6,2
    21b8:	3181a304 	addi	r6,r6,1676
    21bc:	00030b80 	call	30b8 <VGA_text>
	VGA_text(63, 57, "               ");
    21c0:	01000fc4 	movi	r4,63
    21c4:	01400e44 	movi	r5,57
    21c8:	018000b4 	movhi	r6,2
    21cc:	3181a704 	addi	r6,r6,1692
    21d0:	00030b80 	call	30b8 <VGA_text>
	
	VGA_text(35, 15, "                          ");
    21d4:	010008c4 	movi	r4,35
    21d8:	014003c4 	movi	r5,15
    21dc:	018000b4 	movhi	r6,2
    21e0:	3181bf04 	addi	r6,r6,1788
    21e4:	00030b80 	call	30b8 <VGA_text>
	VGA_text(35, 25, "Einde Highscores");
    21e8:	010008c4 	movi	r4,35
    21ec:	01400644 	movi	r5,25
    21f0:	018000b4 	movhi	r6,2
    21f4:	3181c604 	addi	r6,r6,1816
    21f8:	00030b80 	call	30b8 <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    21fc:	0009883a 	mov	r4,zero
    2200:	000b883a 	mov	r5,zero
    2204:	01800a04 	movi	r6,40
    2208:	000f883a 	mov	r7,zero
    220c:	001c0480 	call	1c048 <OSTimeDlyHMSM>
	VGA_text(35, 25, "                  ");
    2210:	010008c4 	movi	r4,35
    2214:	01400644 	movi	r5,25
    2218:	018000b4 	movhi	r6,2
    221c:	3181cb04 	addi	r6,r6,1836
    2220:	00030b80 	call	30b8 <VGA_text>




	teken_menu(3);
    2224:	010000c4 	movi	r4,3
    2228:	0002b400 	call	2b40 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer/tutorial balk weghalen voor de zekerheid
    222c:	d8000015 	stw	zero,0(sp)
    2230:	01004f04 	movi	r4,316
    2234:	01400104 	movi	r5,4
    2238:	01804fc4 	movi	r6,319
    223c:	01c03ac4 	movi	r7,235
    2240:	00030040 	call	3004 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    2244:	d1281d17 	ldw	r4,-24460(gp)
    2248:	d1681817 	ldw	r5,-24480(gp)
    224c:	d0a81d17 	ldw	r2,-24460(gp)
    2250:	10c00144 	addi	r3,r2,5
    2254:	d0a81817 	ldw	r2,-24480(gp)
    2258:	10800144 	addi	r2,r2,5
    225c:	d8000015 	stw	zero,0(sp)
    2260:	180d883a 	mov	r6,r3
    2264:	100f883a 	mov	r7,r2
    2268:	00030040 	call	3004 <VGA_box>


	ALT_x1 = 0;
    226c:	d0281d15 	stw	zero,-24460(gp)
	ALT_x2 = 165;
    2270:	00802944 	movi	r2,165
    2274:	d0a81f15 	stw	r2,-24452(gp)
	ALT_y = 100;
    2278:	00801904 	movi	r2,100
    227c:	d0a81815 	stw	r2,-24480(gp)
	ALT_inc_x = -1;
    2280:	00bfffc4 	movi	r2,-1
    2284:	d0a81e15 	stw	r2,-24456(gp)
	ALT_inc_y = 1;
    2288:	00800044 	movi	r2,1
    228c:	d0a81915 	stw	r2,-24476(gp)

	first = 1;
    2290:	00800044 	movi	r2,1
    2294:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    2298:	d0a80d17 	ldw	r2,-24524(gp)
    229c:	1009883a 	mov	r4,r2
    22a0:	01400444 	movi	r5,17
    22a4:	000d883a 	mov	r6,zero
    22a8:	e1ffff04 	addi	r7,fp,-4
    22ac:	0016d440 	call	16d44 <OSFlagPost>

	OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_SET, &err);
    22b0:	d0a81717 	ldw	r2,-24484(gp)
    22b4:	1009883a 	mov	r4,r2
    22b8:	01402004 	movi	r5,128
    22bc:	01800044 	movi	r6,1
    22c0:	e1ffff04 	addi	r7,fp,-4
    22c4:	0016d440 	call	16d44 <OSFlagPost>

}
    22c8:	e037883a 	mov	sp,fp
    22cc:	dfc00117 	ldw	ra,4(sp)
    22d0:	df000017 	ldw	fp,0(sp)
    22d4:	dec00204 	addi	sp,sp,8
    22d8:	f800283a 	ret

000022dc <Highscores>:

void Highscores(void* pdata){
    22dc:	defffb04 	addi	sp,sp,-20
    22e0:	dfc00415 	stw	ra,16(sp)
    22e4:	df000315 	stw	fp,12(sp)
    22e8:	df000304 	addi	fp,sp,12
    22ec:	e13fff15 	stw	r4,-4(fp)
	int ID;
	int count;
	int q;
	
	while(1){
		OSFlagPend(Flags_Highscores, Highscores_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
    22f0:	d0a81717 	ldw	r2,-24484(gp)
    22f4:	e0fffe04 	addi	r3,fp,-8
    22f8:	d8c00015 	stw	r3,0(sp)
    22fc:	1009883a 	mov	r4,r2
    2300:	01402004 	movi	r5,128
    2304:	01800044 	movi	r6,1
    2308:	000f883a 	mov	r7,zero
    230c:	00166ec0 	call	166ec <OSFlagPend>
		VGA_text(35, 15, "Highscores");
    2310:	010008c4 	movi	r4,35
    2314:	014003c4 	movi	r5,15
    2318:	018000b4 	movhi	r6,2
    231c:	3181d004 	addi	r6,r6,1856
    2320:	00030b80 	call	30b8 <VGA_text>
		
		// highscores 1 t/m 5
		VGA_text(35, 18, "1. <nummer 1>");
    2324:	010008c4 	movi	r4,35
    2328:	01400484 	movi	r5,18
    232c:	018000b4 	movhi	r6,2
    2330:	3181d304 	addi	r6,r6,1868
    2334:	00030b80 	call	30b8 <VGA_text>
		VGA_text(35, 20, "2. <nummer 2>");
    2338:	010008c4 	movi	r4,35
    233c:	01400504 	movi	r5,20
    2340:	018000b4 	movhi	r6,2
    2344:	3181d704 	addi	r6,r6,1884
    2348:	00030b80 	call	30b8 <VGA_text>
		VGA_text(35, 22, "3. <nummer 3>");
    234c:	010008c4 	movi	r4,35
    2350:	01400584 	movi	r5,22
    2354:	018000b4 	movhi	r6,2
    2358:	3181db04 	addi	r6,r6,1900
    235c:	00030b80 	call	30b8 <VGA_text>
		VGA_text(35, 24, "4. <nummer 4>");
    2360:	010008c4 	movi	r4,35
    2364:	01400604 	movi	r5,24
    2368:	018000b4 	movhi	r6,2
    236c:	3181df04 	addi	r6,r6,1916
    2370:	00030b80 	call	30b8 <VGA_text>
		VGA_text(35, 26, "5. <nummer 5>");
    2374:	010008c4 	movi	r4,35
    2378:	01400684 	movi	r5,26
    237c:	018000b4 	movhi	r6,2
    2380:	3181e304 	addi	r6,r6,1932
    2384:	00030b80 	call	30b8 <VGA_text>
		
		terugMenu();
    2388:	00023ac0 	call	23ac <terugMenu>
		
		
		if (controller(3) == 3) {
    238c:	010000c4 	movi	r4,3
    2390:	000039c0 	call	39c <controller>
    2394:	108000d8 	cmpnei	r2,r2,3
    2398:	1000011e 	bne	r2,zero,23a0 <Highscores+0xc4>
			endHighscores();
    239c:	000212c0 	call	212c <endHighscores>
		}
		
		OSTimeDly(1);
    23a0:	01000044 	movi	r4,1
    23a4:	001bf000 	call	1bf00 <OSTimeDly>
		
	}
    23a8:	003fd106 	br	22f0 <__alt_mem_Flash_flash_data+0xf40022f0>

000023ac <terugMenu>:
	
}

void terugMenu(){
    23ac:	defffe04 	addi	sp,sp,-8
    23b0:	dfc00115 	stw	ra,4(sp)
    23b4:	df000015 	stw	fp,0(sp)
    23b8:	d839883a 	mov	fp,sp
	
	INT8U err;
	
	VGA_text(63, 56, "Rechter knop =");
    23bc:	01000fc4 	movi	r4,63
    23c0:	01400e04 	movi	r5,56
    23c4:	018000b4 	movhi	r6,2
    23c8:	3181e704 	addi	r6,r6,1948
    23cc:	00030b80 	call	30b8 <VGA_text>
	VGA_text(63, 57, "terug naar menu");
    23d0:	01000fc4 	movi	r4,63
    23d4:	01400e44 	movi	r5,57
    23d8:	018000b4 	movhi	r6,2
    23dc:	3181eb04 	addi	r6,r6,1964
    23e0:	00030b80 	call	30b8 <VGA_text>
	
}
    23e4:	e037883a 	mov	sp,fp
    23e8:	dfc00117 	ldw	ra,4(sp)
    23ec:	df000017 	ldw	fp,0(sp)
    23f0:	dec00204 	addi	sp,sp,8
    23f4:	f800283a 	ret

000023f8 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    23f8:	defffa04 	addi	sp,sp,-24
    23fc:	dfc00515 	stw	ra,20(sp)
    2400:	df000415 	stw	fp,16(sp)
    2404:	df000404 	addi	fp,sp,16
    2408:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    240c:	e0bfff17 	ldw	r2,-4(fp)
    2410:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    2414:	0002b400 	call	2b40 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2418:	d0e80d17 	ldw	r3,-24524(gp)
    241c:	e0bffe04 	addi	r2,fp,-8
    2420:	d8800015 	stw	r2,0(sp)
    2424:	1809883a 	mov	r4,r3
    2428:	01400044 	movi	r5,1
    242c:	000d883a 	mov	r6,zero
    2430:	000f883a 	mov	r7,zero
    2434:	00166ec0 	call	166ec <OSFlagPend>

		if (controller(ID) == 1){
    2438:	e13ffd17 	ldw	r4,-12(fp)
    243c:	000039c0 	call	39c <controller>
    2440:	10800058 	cmpnei	r2,r2,1
    2444:	1000111e 	bne	r2,zero,248c <menu+0x94>
			if(changed != 0){
    2448:	d0a82317 	ldw	r2,-24436(gp)
    244c:	10000926 	beq	r2,zero,2474 <menu+0x7c>
				gameModeMenu++;
    2450:	d0a00317 	ldw	r2,-32756(gp)
    2454:	10800044 	addi	r2,r2,1
    2458:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    245c:	00800044 	movi	r2,1
    2460:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    2464:	d0282315 	stw	zero,-24436(gp)
				printf("heeft 1 gereturned \n");
    2468:	010000b4 	movhi	r4,2
    246c:	2101ef04 	addi	r4,r4,1980
    2470:	0003a7c0 	call	3a7c <puts>
			}
			if (gameModeMenu >= 5){
    2474:	d0a00317 	ldw	r2,-32756(gp)
    2478:	10800150 	cmplti	r2,r2,5
    247c:	1000161e 	bne	r2,zero,24d8 <menu+0xe0>
				gameModeMenu = 1;
    2480:	00800044 	movi	r2,1
    2484:	d0a00315 	stw	r2,-32756(gp)
    2488:	00001306 	br	24d8 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    248c:	e13ffd17 	ldw	r4,-12(fp)
    2490:	000039c0 	call	39c <controller>
    2494:	1000101e 	bne	r2,zero,24d8 <menu+0xe0>
			if(changed !=0){
    2498:	d0a82317 	ldw	r2,-24436(gp)
    249c:	10000a26 	beq	r2,zero,24c8 <menu+0xd0>
				gameModeMenu--;
    24a0:	d0a00317 	ldw	r2,-32756(gp)
    24a4:	10bfffc4 	addi	r2,r2,-1
    24a8:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    24ac:	d0282215 	stw	zero,-24440(gp)
				changed=0;
    24b0:	d0282315 	stw	zero,-24436(gp)
				eenkeer = 1;
    24b4:	00800044 	movi	r2,1
    24b8:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    24bc:	010000b4 	movhi	r4,2
    24c0:	2101f404 	addi	r4,r4,2000
    24c4:	0003a7c0 	call	3a7c <puts>
			}
			if (gameModeMenu <= 0){
    24c8:	d0a00317 	ldw	r2,-32756(gp)
    24cc:	00800216 	blt	zero,r2,24d8 <menu+0xe0>
				gameModeMenu = 4;
    24d0:	00800104 	movi	r2,4
    24d4:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    24d8:	01000504 	movi	r4,20
    24dc:	001bf000 	call	1bf00 <OSTimeDly>
	}
    24e0:	003fcd06 	br	2418 <__alt_mem_Flash_flash_data+0xf4002418>

000024e4 <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    24e4:	defffa04 	addi	sp,sp,-24
    24e8:	dfc00515 	stw	ra,20(sp)
    24ec:	df000415 	stw	fp,16(sp)
    24f0:	df000404 	addi	fp,sp,16
    24f4:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    24f8:	e0bfff17 	ldw	r2,-4(fp)
    24fc:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    2500:	d0e80d17 	ldw	r3,-24524(gp)
    2504:	e0bffe04 	addi	r2,fp,-8
    2508:	d8800015 	stw	r2,0(sp)
    250c:	1809883a 	mov	r4,r3
    2510:	01400404 	movi	r5,16
    2514:	000d883a 	mov	r6,zero
    2518:	000f883a 	mov	r7,zero
    251c:	00166ec0 	call	166ec <OSFlagPend>

		if (gameModeMenu == 1){
    2520:	d0a00317 	ldw	r2,-32756(gp)
    2524:	10800058 	cmpnei	r2,r2,1
    2528:	1000411e 	bne	r2,zero,2630 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    252c:	d0a00a17 	ldw	r2,-32728(gp)
    2530:	10800058 	cmpnei	r2,r2,1
    2534:	10001f1e 	bne	r2,zero,25b4 <selecteerMenu+0xd0>
				clearScreen();
    2538:	00029800 	call	2980 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    253c:	d0a00417 	ldw	r2,-32752(gp)
    2540:	1085883a 	add	r2,r2,r2
    2544:	1085883a 	add	r2,r2,r2
    2548:	1009883a 	mov	r4,r2
    254c:	d0a00617 	ldw	r2,-32744(gp)
    2550:	1085883a 	add	r2,r2,r2
    2554:	1085883a 	add	r2,r2,r2
    2558:	100b883a 	mov	r5,r2
    255c:	d0a00517 	ldw	r2,-32748(gp)
    2560:	1085883a 	add	r2,r2,r2
    2564:	1085883a 	add	r2,r2,r2
    2568:	100d883a 	mov	r6,r2
    256c:	d0a00717 	ldw	r2,-32740(gp)
    2570:	1085883a 	add	r2,r2,r2
    2574:	1085883a 	add	r2,r2,r2
    2578:	1007883a 	mov	r3,r2
    257c:	00be0014 	movui	r2,63488
    2580:	d8800015 	stw	r2,0(sp)
    2584:	180f883a 	mov	r7,r3
    2588:	00030040 	call	3004 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    258c:	d0e00817 	ldw	r3,-32736(gp)
    2590:	d0a00917 	ldw	r2,-32732(gp)
    2594:	1809883a 	mov	r4,r3
    2598:	100b883a 	mov	r5,r2
    259c:	018000b4 	movhi	r6,2
    25a0:	3181f904 	addi	r6,r6,2020
    25a4:	00030b80 	call	30b8 <VGA_text>
				eenkeer = 0;
    25a8:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    25ac:	00800044 	movi	r2,1
    25b0:	d0a82315 	stw	r2,-24436(gp)
			}
			if(controller(ID) == 2){
    25b4:	e13ffd17 	ldw	r4,-12(fp)
    25b8:	000039c0 	call	39c <controller>
    25bc:	10800098 	cmpnei	r2,r2,2
    25c0:	1000ec1e 	bne	r2,zero,2974 <selecteerMenu+0x490>
				clearScreen();
    25c4:	00029800 	call	2980 <clearScreen>
				clearText();
    25c8:	00029c00 	call	29c0 <clearText>
				printf("start Singleplayer\n");
    25cc:	010000b4 	movhi	r4,2
    25d0:	2101fd04 	addi	r4,r4,2036
    25d4:	0003a7c0 	call	3a7c <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    25d8:	d0e80d17 	ldw	r3,-24524(gp)
    25dc:	e0bffe04 	addi	r2,fp,-8
    25e0:	1809883a 	mov	r4,r3
    25e4:	01400104 	movi	r5,4
    25e8:	000d883a 	mov	r6,zero
    25ec:	100f883a 	mov	r7,r2
    25f0:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    25f4:	d0e80b17 	ldw	r3,-24532(gp)
    25f8:	e0bffe04 	addi	r2,fp,-8
    25fc:	1809883a 	mov	r4,r3
    2600:	01400804 	movi	r5,32
    2604:	000d883a 	mov	r6,zero
    2608:	100f883a 	mov	r7,r2
    260c:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2610:	d0e80d17 	ldw	r3,-24524(gp)
    2614:	e0bffe04 	addi	r2,fp,-8
    2618:	1809883a 	mov	r4,r3
    261c:	01400444 	movi	r5,17
    2620:	01800044 	movi	r6,1
    2624:	100f883a 	mov	r7,r2
    2628:	0016d440 	call	16d44 <OSFlagPost>
    262c:	0000d106 	br	2974 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 2){
    2630:	d0a00317 	ldw	r2,-32756(gp)
    2634:	10800098 	cmpnei	r2,r2,2
    2638:	1000481e 	bne	r2,zero,275c <selecteerMenu+0x278>
			if(eenkeer == 1){
    263c:	d0a00a17 	ldw	r2,-32728(gp)
    2640:	10800058 	cmpnei	r2,r2,1
    2644:	1000221e 	bne	r2,zero,26d0 <selecteerMenu+0x1ec>
				clearScreen();
    2648:	00029800 	call	2980 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    264c:	d0a00417 	ldw	r2,-32752(gp)
    2650:	1085883a 	add	r2,r2,r2
    2654:	1085883a 	add	r2,r2,r2
    2658:	1009883a 	mov	r4,r2
    265c:	d0a00617 	ldw	r2,-32744(gp)
    2660:	10800104 	addi	r2,r2,4
    2664:	1085883a 	add	r2,r2,r2
    2668:	1085883a 	add	r2,r2,r2
    266c:	100b883a 	mov	r5,r2
    2670:	d0a00517 	ldw	r2,-32748(gp)
    2674:	1085883a 	add	r2,r2,r2
    2678:	1085883a 	add	r2,r2,r2
    267c:	100d883a 	mov	r6,r2
    2680:	d0a00717 	ldw	r2,-32740(gp)
    2684:	10800104 	addi	r2,r2,4
    2688:	1085883a 	add	r2,r2,r2
    268c:	1085883a 	add	r2,r2,r2
    2690:	1007883a 	mov	r3,r2
    2694:	00be0014 	movui	r2,63488
    2698:	d8800015 	stw	r2,0(sp)
    269c:	180f883a 	mov	r7,r3
    26a0:	00030040 	call	3004 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    26a4:	d0e00817 	ldw	r3,-32736(gp)
    26a8:	d0a00917 	ldw	r2,-32732(gp)
    26ac:	10800104 	addi	r2,r2,4
    26b0:	1809883a 	mov	r4,r3
    26b4:	100b883a 	mov	r5,r2
    26b8:	018000b4 	movhi	r6,2
    26bc:	31820204 	addi	r6,r6,2056
    26c0:	00030b80 	call	30b8 <VGA_text>
				eenkeer = 0;
    26c4:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    26c8:	00800044 	movi	r2,1
    26cc:	d0a82315 	stw	r2,-24436(gp)
			}
			if(controller(ID) == 2 || controller(ID) == 1){
    26d0:	e13ffd17 	ldw	r4,-12(fp)
    26d4:	000039c0 	call	39c <controller>
    26d8:	108000a0 	cmpeqi	r2,r2,2
    26dc:	1000041e 	bne	r2,zero,26f0 <selecteerMenu+0x20c>
    26e0:	e13ffd17 	ldw	r4,-12(fp)
    26e4:	000039c0 	call	39c <controller>
    26e8:	10800058 	cmpnei	r2,r2,1
    26ec:	1000a11e 	bne	r2,zero,2974 <selecteerMenu+0x490>
				clearScreen();
    26f0:	00029800 	call	2980 <clearScreen>
				clearText();
    26f4:	00029c00 	call	29c0 <clearText>
				printf("start game\n");
    26f8:	010000b4 	movhi	r4,2
    26fc:	21020504 	addi	r4,r4,2068
    2700:	0003a7c0 	call	3a7c <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    2704:	d0e80d17 	ldw	r3,-24524(gp)
    2708:	e0bffe04 	addi	r2,fp,-8
    270c:	1809883a 	mov	r4,r3
    2710:	01400304 	movi	r5,12
    2714:	000d883a 	mov	r6,zero
    2718:	100f883a 	mov	r7,r2
    271c:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    2720:	d0e80b17 	ldw	r3,-24532(gp)
    2724:	e0bffe04 	addi	r2,fp,-8
    2728:	1809883a 	mov	r4,r3
    272c:	01400084 	movi	r5,2
    2730:	000d883a 	mov	r6,zero
    2734:	100f883a 	mov	r7,r2
    2738:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    273c:	d0e80d17 	ldw	r3,-24524(gp)
    2740:	e0bffe04 	addi	r2,fp,-8
    2744:	1809883a 	mov	r4,r3
    2748:	01400444 	movi	r5,17
    274c:	01800044 	movi	r6,1
    2750:	100f883a 	mov	r7,r2
    2754:	0016d440 	call	16d44 <OSFlagPost>
    2758:	00008606 	br	2974 <selecteerMenu+0x490>
			}

		} else if (gameModeMenu == 3){
    275c:	d0a00317 	ldw	r2,-32756(gp)
    2760:	108000d8 	cmpnei	r2,r2,3
    2764:	10003d1e 	bne	r2,zero,285c <selecteerMenu+0x378>
			if(eenkeer == 1){
    2768:	d0a00a17 	ldw	r2,-32728(gp)
    276c:	10800058 	cmpnei	r2,r2,1
    2770:	1000221e 	bne	r2,zero,27fc <selecteerMenu+0x318>
				clearScreen();
    2774:	00029800 	call	2980 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    2778:	d0a00417 	ldw	r2,-32752(gp)
    277c:	1085883a 	add	r2,r2,r2
    2780:	1085883a 	add	r2,r2,r2
    2784:	1009883a 	mov	r4,r2
    2788:	d0a00617 	ldw	r2,-32744(gp)
    278c:	10800204 	addi	r2,r2,8
    2790:	1085883a 	add	r2,r2,r2
    2794:	1085883a 	add	r2,r2,r2
    2798:	100b883a 	mov	r5,r2
    279c:	d0a00517 	ldw	r2,-32748(gp)
    27a0:	1085883a 	add	r2,r2,r2
    27a4:	1085883a 	add	r2,r2,r2
    27a8:	100d883a 	mov	r6,r2
    27ac:	d0a00717 	ldw	r2,-32740(gp)
    27b0:	10800204 	addi	r2,r2,8
    27b4:	1085883a 	add	r2,r2,r2
    27b8:	1085883a 	add	r2,r2,r2
    27bc:	1007883a 	mov	r3,r2
    27c0:	00be0014 	movui	r2,63488
    27c4:	d8800015 	stw	r2,0(sp)
    27c8:	180f883a 	mov	r7,r3
    27cc:	00030040 	call	3004 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    27d0:	d0e00817 	ldw	r3,-32736(gp)
    27d4:	d0a00917 	ldw	r2,-32732(gp)
    27d8:	10800204 	addi	r2,r2,8
    27dc:	1809883a 	mov	r4,r3
    27e0:	100b883a 	mov	r5,r2
    27e4:	018000b4 	movhi	r6,2
    27e8:	31820804 	addi	r6,r6,2080
    27ec:	00030b80 	call	30b8 <VGA_text>
				eenkeer = 0;
    27f0:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;				
    27f4:	00800044 	movi	r2,1
    27f8:	d0a82315 	stw	r2,-24436(gp)
			}
			if(controller(ID) == 2){
    27fc:	e13ffd17 	ldw	r4,-12(fp)
    2800:	000039c0 	call	39c <controller>
    2804:	10800098 	cmpnei	r2,r2,2
    2808:	10005a1e 	bne	r2,zero,2974 <selecteerMenu+0x490>
				clearScreen();
    280c:	00029800 	call	2980 <clearScreen>
				clearText();
    2810:	00029c00 	call	29c0 <clearText>
				printf("Start Highscores\n");
    2814:	010000b4 	movhi	r4,2
    2818:	21020b04 	addi	r4,r4,2092
    281c:	0003a7c0 	call	3a7c <puts>
				OSFlagPost(Flags_Highscores, Highscores_Flag, OS_FLAG_CLR, &err);
    2820:	d0e81717 	ldw	r3,-24484(gp)
    2824:	e0bffe04 	addi	r2,fp,-8
    2828:	1809883a 	mov	r4,r3
    282c:	01402004 	movi	r5,128
    2830:	000d883a 	mov	r6,zero
    2834:	100f883a 	mov	r7,r2
    2838:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    283c:	d0e80d17 	ldw	r3,-24524(gp)
    2840:	e0bffe04 	addi	r2,fp,-8
    2844:	1809883a 	mov	r4,r3
    2848:	01400444 	movi	r5,17
    284c:	01800044 	movi	r6,1
    2850:	100f883a 	mov	r7,r2
    2854:	0016d440 	call	16d44 <OSFlagPost>
    2858:	00004606 	br	2974 <selecteerMenu+0x490>
			}
		} else if (gameModeMenu == 4){
    285c:	d0a00317 	ldw	r2,-32756(gp)
    2860:	10800118 	cmpnei	r2,r2,4
    2864:	1000431e 	bne	r2,zero,2974 <selecteerMenu+0x490>
			if(eenkeer == 1){
    2868:	d0a00a17 	ldw	r2,-32728(gp)
    286c:	10800058 	cmpnei	r2,r2,1
    2870:	1000221e 	bne	r2,zero,28fc <selecteerMenu+0x418>
				clearScreen();
    2874:	00029800 	call	2980 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    2878:	d0a00417 	ldw	r2,-32752(gp)
    287c:	1085883a 	add	r2,r2,r2
    2880:	1085883a 	add	r2,r2,r2
    2884:	1009883a 	mov	r4,r2
    2888:	d0a00617 	ldw	r2,-32744(gp)
    288c:	10800304 	addi	r2,r2,12
    2890:	1085883a 	add	r2,r2,r2
    2894:	1085883a 	add	r2,r2,r2
    2898:	100b883a 	mov	r5,r2
    289c:	d0a00517 	ldw	r2,-32748(gp)
    28a0:	1085883a 	add	r2,r2,r2
    28a4:	1085883a 	add	r2,r2,r2
    28a8:	100d883a 	mov	r6,r2
    28ac:	d0a00717 	ldw	r2,-32740(gp)
    28b0:	10800304 	addi	r2,r2,12
    28b4:	1085883a 	add	r2,r2,r2
    28b8:	1085883a 	add	r2,r2,r2
    28bc:	1007883a 	mov	r3,r2
    28c0:	00be0014 	movui	r2,63488
    28c4:	d8800015 	stw	r2,0(sp)
    28c8:	180f883a 	mov	r7,r3
    28cc:	00030040 	call	3004 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    28d0:	d0e00817 	ldw	r3,-32736(gp)
    28d4:	d0a00917 	ldw	r2,-32732(gp)
    28d8:	10800304 	addi	r2,r2,12
    28dc:	1809883a 	mov	r4,r3
    28e0:	100b883a 	mov	r5,r2
    28e4:	018000b4 	movhi	r6,2
    28e8:	31821004 	addi	r6,r6,2112
    28ec:	00030b80 	call	30b8 <VGA_text>
				eenkeer = 0;
    28f0:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    28f4:	00800044 	movi	r2,1
    28f8:	d0a82315 	stw	r2,-24436(gp)

			}
			
			if(controller(ID) == 2){
    28fc:	e13ffd17 	ldw	r4,-12(fp)
    2900:	000039c0 	call	39c <controller>
    2904:	10800098 	cmpnei	r2,r2,2
    2908:	10001a1e 	bne	r2,zero,2974 <selecteerMenu+0x490>
				clearScreen();
    290c:	00029800 	call	2980 <clearScreen>
				clearText();
    2910:	00029c00 	call	29c0 <clearText>
				printf("Start Tutorial\n");
    2914:	010000b4 	movhi	r4,2
    2918:	21021304 	addi	r4,r4,2124
    291c:	0003a7c0 	call	3a7c <puts>
				OSFlagPost(Flags, C1_Flag, OS_FLAG_CLR, &err);
    2920:	d0e80d17 	ldw	r3,-24524(gp)
    2924:	e0bffe04 	addi	r2,fp,-8
    2928:	1809883a 	mov	r4,r3
    292c:	01400104 	movi	r5,4
    2930:	000d883a 	mov	r6,zero
    2934:	100f883a 	mov	r7,r2
    2938:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags_Tutorial,Tutorial_Flag, OS_FLAG_CLR, &err);
    293c:	d0e81017 	ldw	r3,-24512(gp)
    2940:	e0bffe04 	addi	r2,fp,-8
    2944:	1809883a 	mov	r4,r3
    2948:	01401004 	movi	r5,64
    294c:	000d883a 	mov	r6,zero
    2950:	100f883a 	mov	r7,r2
    2954:	0016d440 	call	16d44 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2958:	d0e80d17 	ldw	r3,-24524(gp)
    295c:	e0bffe04 	addi	r2,fp,-8
    2960:	1809883a 	mov	r4,r3
    2964:	01400444 	movi	r5,17
    2968:	01800044 	movi	r6,1
    296c:	100f883a 	mov	r7,r2
    2970:	0016d440 	call	16d44 <OSFlagPost>
			}
		}

		OSTimeDly(20);
    2974:	01000504 	movi	r4,20
    2978:	001bf000 	call	1bf00 <OSTimeDly>
	}
    297c:	003ee006 	br	2500 <__alt_mem_Flash_flash_data+0xf4002500>

00002980 <clearScreen>:
}

void clearScreen(){
    2980:	defffd04 	addi	sp,sp,-12
    2984:	dfc00215 	stw	ra,8(sp)
    2988:	df000115 	stw	fp,4(sp)
    298c:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    2990:	d8000015 	stw	zero,0(sp)
    2994:	01000644 	movi	r4,25
    2998:	01401184 	movi	r5,70
    299c:	01803204 	movi	r6,200
    29a0:	01c021c4 	movi	r7,135
    29a4:	00030040 	call	3004 <VGA_box>
	del_middenlijn();
    29a8:	00031b00 	call	31b0 <del_middenlijn>
}
    29ac:	e037883a 	mov	sp,fp
    29b0:	dfc00117 	ldw	ra,4(sp)
    29b4:	df000017 	ldw	fp,0(sp)
    29b8:	dec00204 	addi	sp,sp,8
    29bc:	f800283a 	ret

000029c0 <clearText>:

void clearText(){
    29c0:	defffe04 	addi	sp,sp,-8
    29c4:	dfc00115 	stw	ra,4(sp)
    29c8:	df000015 	stw	fp,0(sp)
    29cc:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    29d0:	d0e00817 	ldw	r3,-32736(gp)
    29d4:	d0a00917 	ldw	r2,-32732(gp)
    29d8:	1809883a 	mov	r4,r3
    29dc:	100b883a 	mov	r5,r2
    29e0:	018000b4 	movhi	r6,2
    29e4:	31821704 	addi	r6,r6,2140
    29e8:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    29ec:	d0e00817 	ldw	r3,-32736(gp)
    29f0:	d0a00917 	ldw	r2,-32732(gp)
    29f4:	10800104 	addi	r2,r2,4
    29f8:	1809883a 	mov	r4,r3
    29fc:	100b883a 	mov	r5,r2
    2a00:	018000b4 	movhi	r6,2
    2a04:	31821b04 	addi	r6,r6,2156
    2a08:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    2a0c:	d0e00817 	ldw	r3,-32736(gp)
    2a10:	d0a00917 	ldw	r2,-32732(gp)
    2a14:	10800204 	addi	r2,r2,8
    2a18:	1809883a 	mov	r4,r3
    2a1c:	100b883a 	mov	r5,r2
    2a20:	018000b4 	movhi	r6,2
    2a24:	31821e04 	addi	r6,r6,2168
    2a28:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    2a2c:	d0e00817 	ldw	r3,-32736(gp)
    2a30:	d0a00917 	ldw	r2,-32732(gp)
    2a34:	10800304 	addi	r2,r2,12
    2a38:	1809883a 	mov	r4,r3
    2a3c:	100b883a 	mov	r5,r2
    2a40:	018000b4 	movhi	r6,2
    2a44:	31822104 	addi	r6,r6,2180
    2a48:	00030b80 	call	30b8 <VGA_text>
}
    2a4c:	e037883a 	mov	sp,fp
    2a50:	dfc00117 	ldw	ra,4(sp)
    2a54:	df000017 	ldw	fp,0(sp)
    2a58:	dec00204 	addi	sp,sp,8
    2a5c:	f800283a 	ret

00002a60 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2a60:	defff804 	addi	sp,sp,-32
    2a64:	dfc00715 	stw	ra,28(sp)
    2a68:	df000615 	stw	fp,24(sp)
    2a6c:	df000604 	addi	fp,sp,24
    2a70:	e13ffb15 	stw	r4,-20(fp)
    2a74:	e17ffc15 	stw	r5,-16(fp)
    2a78:	e1bffd15 	stw	r6,-12(fp)
    2a7c:	e1fffe15 	stw	r7,-8(fp)
    2a80:	e0800217 	ldw	r2,8(fp)
    2a84:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2a88:	e0bfff0f 	ldh	r2,-4(fp)
    2a8c:	d8800015 	stw	r2,0(sp)
    2a90:	e13ffb17 	ldw	r4,-20(fp)
    2a94:	e17ffc17 	ldw	r5,-16(fp)
    2a98:	e1bffd17 	ldw	r6,-12(fp)
    2a9c:	e1fffe17 	ldw	r7,-8(fp)
    2aa0:	00030040 	call	3004 <VGA_box>
}
    2aa4:	e037883a 	mov	sp,fp
    2aa8:	dfc00117 	ldw	ra,4(sp)
    2aac:	df000017 	ldw	fp,0(sp)
    2ab0:	dec00204 	addi	sp,sp,8
    2ab4:	f800283a 	ret

00002ab8 <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    2ab8:	defff804 	addi	sp,sp,-32
    2abc:	dfc00715 	stw	ra,28(sp)
    2ac0:	df000615 	stw	fp,24(sp)
    2ac4:	df000604 	addi	fp,sp,24
    2ac8:	e13ffb15 	stw	r4,-20(fp)
    2acc:	e17ffc15 	stw	r5,-16(fp)
    2ad0:	e1bffd15 	stw	r6,-12(fp)
    2ad4:	e1fffe15 	stw	r7,-8(fp)
    2ad8:	e0800217 	ldw	r2,8(fp)
    2adc:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2ae0:	e0bffb17 	ldw	r2,-20(fp)
    2ae4:	10800044 	addi	r2,r2,1
    2ae8:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    2aec:	e0bffc17 	ldw	r2,-16(fp)
    2af0:	10800044 	addi	r2,r2,1
    2af4:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    2af8:	e0bffd17 	ldw	r2,-12(fp)
    2afc:	10bfffc4 	addi	r2,r2,-1
    2b00:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    2b04:	e0bffe17 	ldw	r2,-8(fp)
    2b08:	10bfffc4 	addi	r2,r2,-1
    2b0c:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2b10:	e0bfff0f 	ldh	r2,-4(fp)
    2b14:	d8800015 	stw	r2,0(sp)
    2b18:	e13ffb17 	ldw	r4,-20(fp)
    2b1c:	e17ffc17 	ldw	r5,-16(fp)
    2b20:	e1bffd17 	ldw	r6,-12(fp)
    2b24:	e1fffe17 	ldw	r7,-8(fp)
    2b28:	00030040 	call	3004 <VGA_box>
}
    2b2c:	e037883a 	mov	sp,fp
    2b30:	dfc00117 	ldw	ra,4(sp)
    2b34:	df000017 	ldw	fp,0(sp)
    2b38:	dec00204 	addi	sp,sp,8
    2b3c:	f800283a 	ret

00002b40 <teken_menu>:

void teken_menu(int ID){
    2b40:	defffc04 	addi	sp,sp,-16
    2b44:	dfc00315 	stw	ra,12(sp)
    2b48:	df000215 	stw	fp,8(sp)
    2b4c:	df000204 	addi	fp,sp,8
    2b50:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    2b54:	d0e00817 	ldw	r3,-32736(gp)
    2b58:	d0a00917 	ldw	r2,-32732(gp)
    2b5c:	1809883a 	mov	r4,r3
    2b60:	100b883a 	mov	r5,r2
    2b64:	018000b4 	movhi	r6,2
    2b68:	3181f904 	addi	r6,r6,2020
    2b6c:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    2b70:	d0e00817 	ldw	r3,-32736(gp)
    2b74:	d0a00917 	ldw	r2,-32732(gp)
    2b78:	10800104 	addi	r2,r2,4
    2b7c:	1809883a 	mov	r4,r3
    2b80:	100b883a 	mov	r5,r2
    2b84:	018000b4 	movhi	r6,2
    2b88:	31820204 	addi	r6,r6,2056
    2b8c:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    2b90:	d0e00817 	ldw	r3,-32736(gp)
    2b94:	d0a00917 	ldw	r2,-32732(gp)
    2b98:	10800204 	addi	r2,r2,8
    2b9c:	1809883a 	mov	r4,r3
    2ba0:	100b883a 	mov	r5,r2
    2ba4:	018000b4 	movhi	r6,2
    2ba8:	31820804 	addi	r6,r6,2080
    2bac:	00030b80 	call	30b8 <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    2bb0:	d0e00817 	ldw	r3,-32736(gp)
    2bb4:	d0a00917 	ldw	r2,-32732(gp)
    2bb8:	10800304 	addi	r2,r2,12
    2bbc:	1809883a 	mov	r4,r3
    2bc0:	100b883a 	mov	r5,r2
    2bc4:	018000b4 	movhi	r6,2
    2bc8:	31821004 	addi	r6,r6,2112
    2bcc:	00030b80 	call	30b8 <VGA_text>
	if(ID == 1){
    2bd0:	e0bfff17 	ldw	r2,-4(fp)
    2bd4:	10800058 	cmpnei	r2,r2,1
    2bd8:	1000151e 	bne	r2,zero,2c30 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2bdc:	d0a00417 	ldw	r2,-32752(gp)
    2be0:	1085883a 	add	r2,r2,r2
    2be4:	1085883a 	add	r2,r2,r2
    2be8:	1009883a 	mov	r4,r2
    2bec:	d0a00617 	ldw	r2,-32744(gp)
    2bf0:	1085883a 	add	r2,r2,r2
    2bf4:	1085883a 	add	r2,r2,r2
    2bf8:	100b883a 	mov	r5,r2
    2bfc:	d0a00517 	ldw	r2,-32748(gp)
    2c00:	1085883a 	add	r2,r2,r2
    2c04:	1085883a 	add	r2,r2,r2
    2c08:	100d883a 	mov	r6,r2
    2c0c:	d0a00717 	ldw	r2,-32740(gp)
    2c10:	1085883a 	add	r2,r2,r2
    2c14:	1085883a 	add	r2,r2,r2
    2c18:	1007883a 	mov	r3,r2
    2c1c:	00be0014 	movui	r2,63488
    2c20:	d8800015 	stw	r2,0(sp)
    2c24:	180f883a 	mov	r7,r3
    2c28:	00030040 	call	3004 <VGA_box>
    2c2c:	00004d06 	br	2d64 <teken_menu+0x224>
	}else if(ID == 2){
    2c30:	e0bfff17 	ldw	r2,-4(fp)
    2c34:	10800098 	cmpnei	r2,r2,2
    2c38:	1000171e 	bne	r2,zero,2c98 <teken_menu+0x158>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2c3c:	d0a00417 	ldw	r2,-32752(gp)
    2c40:	1085883a 	add	r2,r2,r2
    2c44:	1085883a 	add	r2,r2,r2
    2c48:	1009883a 	mov	r4,r2
    2c4c:	d0a00617 	ldw	r2,-32744(gp)
    2c50:	10800104 	addi	r2,r2,4
    2c54:	1085883a 	add	r2,r2,r2
    2c58:	1085883a 	add	r2,r2,r2
    2c5c:	100b883a 	mov	r5,r2
    2c60:	d0a00517 	ldw	r2,-32748(gp)
    2c64:	1085883a 	add	r2,r2,r2
    2c68:	1085883a 	add	r2,r2,r2
    2c6c:	100d883a 	mov	r6,r2
    2c70:	d0a00717 	ldw	r2,-32740(gp)
    2c74:	10800104 	addi	r2,r2,4
    2c78:	1085883a 	add	r2,r2,r2
    2c7c:	1085883a 	add	r2,r2,r2
    2c80:	1007883a 	mov	r3,r2
    2c84:	00be0014 	movui	r2,63488
    2c88:	d8800015 	stw	r2,0(sp)
    2c8c:	180f883a 	mov	r7,r3
    2c90:	00030040 	call	3004 <VGA_box>
    2c94:	00003306 	br	2d64 <teken_menu+0x224>
	}else if(ID == 3){
    2c98:	e0bfff17 	ldw	r2,-4(fp)
    2c9c:	108000d8 	cmpnei	r2,r2,3
    2ca0:	1000171e 	bne	r2,zero,2d00 <teken_menu+0x1c0>
		VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    2ca4:	d0a00417 	ldw	r2,-32752(gp)
    2ca8:	1085883a 	add	r2,r2,r2
    2cac:	1085883a 	add	r2,r2,r2
    2cb0:	1009883a 	mov	r4,r2
    2cb4:	d0a00617 	ldw	r2,-32744(gp)
    2cb8:	10800204 	addi	r2,r2,8
    2cbc:	1085883a 	add	r2,r2,r2
    2cc0:	1085883a 	add	r2,r2,r2
    2cc4:	100b883a 	mov	r5,r2
    2cc8:	d0a00517 	ldw	r2,-32748(gp)
    2ccc:	1085883a 	add	r2,r2,r2
    2cd0:	1085883a 	add	r2,r2,r2
    2cd4:	100d883a 	mov	r6,r2
    2cd8:	d0a00717 	ldw	r2,-32740(gp)
    2cdc:	10800204 	addi	r2,r2,8
    2ce0:	1085883a 	add	r2,r2,r2
    2ce4:	1085883a 	add	r2,r2,r2
    2ce8:	1007883a 	mov	r3,r2
    2cec:	00be0014 	movui	r2,63488
    2cf0:	d8800015 	stw	r2,0(sp)
    2cf4:	180f883a 	mov	r7,r3
    2cf8:	00030040 	call	3004 <VGA_box>
    2cfc:	00001906 	br	2d64 <teken_menu+0x224>
	}else if(ID == 4){
    2d00:	e0bfff17 	ldw	r2,-4(fp)
    2d04:	10800118 	cmpnei	r2,r2,4
    2d08:	1000161e 	bne	r2,zero,2d64 <teken_menu+0x224>
		VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    2d0c:	d0a00417 	ldw	r2,-32752(gp)
    2d10:	1085883a 	add	r2,r2,r2
    2d14:	1085883a 	add	r2,r2,r2
    2d18:	1009883a 	mov	r4,r2
    2d1c:	d0a00617 	ldw	r2,-32744(gp)
    2d20:	10800304 	addi	r2,r2,12
    2d24:	1085883a 	add	r2,r2,r2
    2d28:	1085883a 	add	r2,r2,r2
    2d2c:	100b883a 	mov	r5,r2
    2d30:	d0a00517 	ldw	r2,-32748(gp)
    2d34:	1085883a 	add	r2,r2,r2
    2d38:	1085883a 	add	r2,r2,r2
    2d3c:	100d883a 	mov	r6,r2
    2d40:	d0a00717 	ldw	r2,-32740(gp)
    2d44:	10800304 	addi	r2,r2,12
    2d48:	1085883a 	add	r2,r2,r2
    2d4c:	1085883a 	add	r2,r2,r2
    2d50:	1007883a 	mov	r3,r2
    2d54:	00be0014 	movui	r2,63488
    2d58:	d8800015 	stw	r2,0(sp)
    2d5c:	180f883a 	mov	r7,r3
    2d60:	00030040 	call	3004 <VGA_box>
	}


}
    2d64:	e037883a 	mov	sp,fp
    2d68:	dfc00117 	ldw	ra,4(sp)
    2d6c:	df000017 	ldw	fp,0(sp)
    2d70:	dec00204 	addi	sp,sp,8
    2d74:	f800283a 	ret

00002d78 <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    2d78:	defffb04 	addi	sp,sp,-20
    2d7c:	dfc00415 	stw	ra,16(sp)
    2d80:	df000315 	stw	fp,12(sp)
    2d84:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    2d88:	00144bc0 	call	144bc <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2d8c:	00800174 	movhi	r2,5
    2d90:	10814004 	addi	r2,r2,1280
    2d94:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    2d98:	d0a00c17 	ldw	r2,-32720(gp)
    2d9c:	10800204 	addi	r2,r2,8
    2da0:	e0fffe17 	ldw	r3,-8(fp)
    2da4:	18ffffcc 	andi	r3,r3,65535
    2da8:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    2dac:	d0a00c17 	ldw	r2,-32720(gp)
    2db0:	10800304 	addi	r2,r2,12
    2db4:	e0fffe17 	ldw	r3,-8(fp)
    2db8:	1806d43a 	srli	r3,r3,16
    2dbc:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    2dc0:	d0a00c17 	ldw	r2,-32720(gp)
    2dc4:	10800104 	addi	r2,r2,4
    2dc8:	00c001c4 	movi	r3,7
    2dcc:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    2dd0:	e0bfff04 	addi	r2,fp,-4
    2dd4:	01000304 	movi	r4,12
    2dd8:	100b883a 	mov	r5,r2
    2ddc:	00160d40 	call	160d4 <OSFlagCreate>
    2de0:	d0a80d15 	stw	r2,-24524(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    2de4:	e0bfff04 	addi	r2,fp,-4
    2de8:	01000884 	movi	r4,34
    2dec:	100b883a 	mov	r5,r2
    2df0:	00160d40 	call	160d4 <OSFlagCreate>
    2df4:	d0a80b15 	stw	r2,-24532(gp)
	Flags_Tutorial = OSFlagCreate(Tutorial_Flag, &err);
    2df8:	e0bfff04 	addi	r2,fp,-4
    2dfc:	01001004 	movi	r4,64
    2e00:	100b883a 	mov	r5,r2
    2e04:	00160d40 	call	160d4 <OSFlagCreate>
    2e08:	d0a81015 	stw	r2,-24512(gp)
	Flags_Highscores = OSFlagCreate(Highscores_Flag, &err);
    2e0c:	e0bfff04 	addi	r2,fp,-4
    2e10:	01002004 	movi	r4,128
    2e14:	100b883a 	mov	r5,r2
    2e18:	00160d40 	call	160d4 <OSFlagCreate>
    2e1c:	d0a81715 	stw	r2,-24484(gp)
	Flags_newHighscores = OSFlagCreate(newHighscores_Flag, &err);
    2e20:	e0bfff04 	addi	r2,fp,-4
    2e24:	01004004 	movi	r4,256
    2e28:	100b883a 	mov	r5,r2
    2e2c:	00160d40 	call	160d4 <OSFlagCreate>
    2e30:	d0a81a15 	stw	r2,-24472(gp)


	gameSem = OSSemCreate(0);
    2e34:	0009883a 	mov	r4,zero
    2e38:	0019bb40 	call	19bb4 <OSSemCreate>
    2e3c:	d0a81b15 	stw	r2,-24468(gp)
	controllerSem = OSSemCreate(0);
    2e40:	0009883a 	mov	r4,zero
    2e44:	0019bb40 	call	19bb4 <OSSemCreate>
    2e48:	d0a80915 	stw	r2,-24540(gp)

	MailBox = OSMboxCreate((void *)0);
    2e4c:	0009883a 	mov	r4,zero
    2e50:	00176800 	call	17680 <OSMboxCreate>
    2e54:	d0a80e15 	stw	r2,-24520(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2e58:	0009883a 	mov	r4,zero
    2e5c:	00176800 	call	17680 <OSMboxCreate>
    2e60:	d0a80c15 	stw	r2,-24528(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    2e64:	d8000015 	stw	zero,0(sp)
    2e68:	0009883a 	mov	r4,zero
    2e6c:	000b883a 	mov	r5,zero
    2e70:	01804fc4 	movi	r6,319
    2e74:	01c03bc4 	movi	r7,239
    2e78:	00030040 	call	3004 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    2e7c:	00803fc4 	movi	r2,255
    2e80:	d8800015 	stw	r2,0(sp)
    2e84:	010003c4 	movi	r4,15
    2e88:	01400c84 	movi	r5,50
    2e8c:	01800504 	movi	r6,20
    2e90:	01c01904 	movi	r7,100
    2e94:	00030040 	call	3004 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    2e98:	00803fc4 	movi	r2,255
    2e9c:	d8800015 	stw	r2,0(sp)
    2ea0:	01004b04 	movi	r4,300
    2ea4:	01400c84 	movi	r5,50
    2ea8:	01804c44 	movi	r6,305
    2eac:	01c01904 	movi	r7,100
    2eb0:	00030040 	call	3004 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    2eb4:	0081a5c4 	movi	r2,1687
    2eb8:	d8800015 	stw	r2,0(sp)
    2ebc:	0009883a 	mov	r4,zero
    2ec0:	000b883a 	mov	r5,zero
    2ec4:	01804fc4 	movi	r6,319
    2ec8:	01c000c4 	movi	r7,3
    2ecc:	00030040 	call	3004 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    2ed0:	0081a5c4 	movi	r2,1687
    2ed4:	d8800015 	stw	r2,0(sp)
    2ed8:	0009883a 	mov	r4,zero
    2edc:	01403b04 	movi	r5,236
    2ee0:	01804fc4 	movi	r6,319
    2ee4:	01c03bc4 	movi	r7,239
    2ee8:	00030040 	call	3004 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    2eec:	01000034 	movhi	r4,0
    2ef0:	2100a004 	addi	r4,r4,640
    2ef4:	01400044 	movi	r5,1
    2ef8:	018000f4 	movhi	r6,3
    2efc:	318a9904 	addi	r6,r6,10852
    2f00:	01c002c4 	movi	r7,11
    2f04:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    2f08:	01000034 	movhi	r4,0
    2f0c:	2100a004 	addi	r4,r4,640
    2f10:	01400084 	movi	r5,2
    2f14:	01800134 	movhi	r6,4
    2f18:	31a29c04 	addi	r6,r6,-30096
    2f1c:	01c00304 	movi	r7,12
    2f20:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    2f24:	01000034 	movhi	r4,0
    2f28:	2101e304 	addi	r4,r4,1932
    2f2c:	000b883a 	mov	r5,zero
    2f30:	01800134 	movhi	r6,4
    2f34:	31b29e04 	addi	r6,r6,-13704
    2f38:	01c00184 	movi	r7,6
    2f3c:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2f40:	01000034 	movhi	r4,0
    2f44:	21047f04 	addi	r4,r4,4604
    2f48:	000b883a 	mov	r5,zero
    2f4c:	018000b4 	movhi	r6,2
    2f50:	319b8804 	addi	r6,r6,28192
    2f54:	01c001c4 	movi	r7,7
    2f58:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(Tutorial,(void*) 0, &Tutorial_stk[TASK_STACKSIZE-1],Tutorial_PRIORITY);
    2f5c:	01000034 	movhi	r4,0
    2f60:	21067d04 	addi	r4,r4,6644
    2f64:	000b883a 	mov	r5,zero
    2f68:	018000f4 	movhi	r6,3
    2f6c:	31929a04 	addi	r6,r6,19048
    2f70:	01c00204 	movi	r7,8
    2f74:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(Highscores,(void*) 0, &Highscores_stk[TASK_STACKSIZE-1],Highscores_PRIORITY);
    2f78:	01000034 	movhi	r4,0
    2f7c:	2108b704 	addi	r4,r4,8924
    2f80:	000b883a 	mov	r5,zero
    2f84:	01800134 	movhi	r6,4
    2f88:	31aa9d04 	addi	r6,r6,-21900
    2f8c:	01c00344 	movi	r7,13
    2f90:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(newHighscores,(void*) 0, &newHighscores_stk[TASK_STACKSIZE-1],newHighscores_PRIORITY);
    2f94:	01000034 	movhi	r4,0
    2f98:	21072504 	addi	r4,r4,7316
    2f9c:	000b883a 	mov	r5,zero
    2fa0:	018000f4 	movhi	r6,3
    2fa4:	319a9b04 	addi	r6,r6,27244
    2fa8:	01c00384 	movi	r7,14
    2fac:	001ab4c0 	call	1ab4c <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2fb0:	01000034 	movhi	r4,0
    2fb4:	2108fe04 	addi	r4,r4,9208
    2fb8:	01400084 	movi	r5,2
    2fbc:	018000f4 	movhi	r6,3
    2fc0:	31829804 	addi	r6,r6,2656
    2fc4:	01c00244 	movi	r7,9
    2fc8:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    2fcc:	01000034 	movhi	r4,0
    2fd0:	21093904 	addi	r4,r4,9444
    2fd4:	014000c4 	movi	r5,3
    2fd8:	01800134 	movhi	r6,4
    2fdc:	319ba204 	addi	r6,r6,28296
    2fe0:	01c00284 	movi	r7,10
    2fe4:	001ab4c0 	call	1ab4c <OSTaskCreate>
	OSStart();
    2fe8:	00147e00 	call	147e0 <OSStart>
	return 0;
    2fec:	0005883a 	mov	r2,zero
}
    2ff0:	e037883a 	mov	sp,fp
    2ff4:	dfc00117 	ldw	ra,4(sp)
    2ff8:	df000017 	ldw	fp,0(sp)
    2ffc:	dec00204 	addi	sp,sp,8
    3000:	f800283a 	ret

00003004 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    3004:	defff604 	addi	sp,sp,-40
    3008:	df000915 	stw	fp,36(sp)
    300c:	df000904 	addi	fp,sp,36
    3010:	e13ffb15 	stw	r4,-20(fp)
    3014:	e17ffc15 	stw	r5,-16(fp)
    3018:	e1bffd15 	stw	r6,-12(fp)
    301c:	e1fffe15 	stw	r7,-8(fp)
    3020:	e0800117 	ldw	r2,4(fp)
    3024:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    3028:	00820034 	movhi	r2,2048
    302c:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    3030:	e0bffc17 	ldw	r2,-16(fp)
    3034:	e0bff715 	stw	r2,-36(fp)
    3038:	00001806 	br	309c <VGA_box+0x98>
	{
		col = x1;
    303c:	e0bffb17 	ldw	r2,-20(fp)
    3040:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    3044:	00000f06 	br	3084 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    3048:	e0bff717 	ldw	r2,-36(fp)
    304c:	1006927a 	slli	r3,r2,9
    3050:	e0bff817 	ldw	r2,-32(fp)
    3054:	1885883a 	add	r2,r3,r2
    3058:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    305c:	e0bffa17 	ldw	r2,-24(fp)
    3060:	1085883a 	add	r2,r2,r2
    3064:	1007883a 	mov	r3,r2
    3068:	e0bff917 	ldw	r2,-28(fp)
    306c:	10c5883a 	add	r2,r2,r3
    3070:	e0ffff0b 	ldhu	r3,-4(fp)
    3074:	10c0000d 	sth	r3,0(r2)
			++col;
    3078:	e0bff817 	ldw	r2,-32(fp)
    307c:	10800044 	addi	r2,r2,1
    3080:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    3084:	e0bff817 	ldw	r2,-32(fp)
    3088:	e0fffd17 	ldw	r3,-12(fp)
    308c:	18bfee0e 	bge	r3,r2,3048 <__alt_mem_Flash_flash_data+0xf4003048>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    3090:	e0bff717 	ldw	r2,-36(fp)
    3094:	10800044 	addi	r2,r2,1
    3098:	e0bff715 	stw	r2,-36(fp)
    309c:	e0bff717 	ldw	r2,-36(fp)
    30a0:	e0fffe17 	ldw	r3,-8(fp)
    30a4:	18bfe50e 	bge	r3,r2,303c <__alt_mem_Flash_flash_data+0xf400303c>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    30a8:	e037883a 	mov	sp,fp
    30ac:	df000017 	ldw	fp,0(sp)
    30b0:	dec00104 	addi	sp,sp,4
    30b4:	f800283a 	ret

000030b8 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    30b8:	defffa04 	addi	sp,sp,-24
    30bc:	df000515 	stw	fp,20(sp)
    30c0:	df000504 	addi	fp,sp,20
    30c4:	e13ffd15 	stw	r4,-12(fp)
    30c8:	e17ffe15 	stw	r5,-8(fp)
    30cc:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    30d0:	00824034 	movhi	r2,2304
    30d4:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    30d8:	e0bffe17 	ldw	r2,-8(fp)
    30dc:	100691fa 	slli	r3,r2,7
    30e0:	e0bffd17 	ldw	r2,-12(fp)
    30e4:	1885883a 	add	r2,r3,r2
    30e8:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    30ec:	00000c06 	br	3120 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    30f0:	e0bffb17 	ldw	r2,-20(fp)
    30f4:	e0fffc17 	ldw	r3,-16(fp)
    30f8:	1885883a 	add	r2,r3,r2
    30fc:	e0ffff17 	ldw	r3,-4(fp)
    3100:	18c00003 	ldbu	r3,0(r3)
    3104:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    3108:	e0bfff17 	ldw	r2,-4(fp)
    310c:	10800044 	addi	r2,r2,1
    3110:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    3114:	e0bffb17 	ldw	r2,-20(fp)
    3118:	10800044 	addi	r2,r2,1
    311c:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    3120:	e0bfff17 	ldw	r2,-4(fp)
    3124:	10800003 	ldbu	r2,0(r2)
    3128:	10803fcc 	andi	r2,r2,255
    312c:	1080201c 	xori	r2,r2,128
    3130:	10bfe004 	addi	r2,r2,-128
    3134:	103fee1e 	bne	r2,zero,30f0 <__alt_mem_Flash_flash_data+0xf40030f0>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    3138:	e037883a 	mov	sp,fp
    313c:	df000017 	ldw	fp,0(sp)
    3140:	dec00104 	addi	sp,sp,4
    3144:	f800283a 	ret

00003148 <draw_middenlijn>:

void draw_middenlijn(){
    3148:	defffc04 	addi	sp,sp,-16
    314c:	dfc00315 	stw	ra,12(sp)
    3150:	df000215 	stw	fp,8(sp)
    3154:	df000204 	addi	fp,sp,8
	int i = 0;
    3158:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    315c:	00000c06 	br	3190 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    3160:	e0bfff17 	ldw	r2,-4(fp)
    3164:	10c001c4 	addi	r3,r2,7
    3168:	0081a5c4 	movi	r2,1687
    316c:	d8800015 	stw	r2,0(sp)
    3170:	010027c4 	movi	r4,159
    3174:	e17fff17 	ldw	r5,-4(fp)
    3178:	01802804 	movi	r6,160
    317c:	180f883a 	mov	r7,r3
    3180:	00030040 	call	3004 <VGA_box>
		i = i + 11;
    3184:	e0bfff17 	ldw	r2,-4(fp)
    3188:	108002c4 	addi	r2,r2,11
    318c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    3190:	e0bfff17 	ldw	r2,-4(fp)
    3194:	10803c10 	cmplti	r2,r2,240
    3198:	103ff11e 	bne	r2,zero,3160 <__alt_mem_Flash_flash_data+0xf4003160>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    319c:	e037883a 	mov	sp,fp
    31a0:	dfc00117 	ldw	ra,4(sp)
    31a4:	df000017 	ldw	fp,0(sp)
    31a8:	dec00204 	addi	sp,sp,8
    31ac:	f800283a 	ret

000031b0 <del_middenlijn>:

void del_middenlijn(){
    31b0:	defffd04 	addi	sp,sp,-12
    31b4:	dfc00215 	stw	ra,8(sp)
    31b8:	df000115 	stw	fp,4(sp)
    31bc:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    31c0:	d8000015 	stw	zero,0(sp)
    31c4:	010027c4 	movi	r4,159
    31c8:	01400104 	movi	r5,4
    31cc:	01802804 	movi	r6,160
    31d0:	01c03ac4 	movi	r7,235
    31d4:	00030040 	call	3004 <VGA_box>
}
    31d8:	e037883a 	mov	sp,fp
    31dc:	dfc00117 	ldw	ra,4(sp)
    31e0:	df000017 	ldw	fp,0(sp)
    31e4:	dec00204 	addi	sp,sp,8
    31e8:	f800283a 	ret

000031ec <del_number>:

void del_number(int side){
    31ec:	defffc04 	addi	sp,sp,-16
    31f0:	dfc00315 	stw	ra,12(sp)
    31f4:	df000215 	stw	fp,8(sp)
    31f8:	df000204 	addi	fp,sp,8
    31fc:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    3200:	e0bfff17 	ldw	r2,-4(fp)
    3204:	10800058 	cmpnei	r2,r2,1
    3208:	1000061e 	bne	r2,zero,3224 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    320c:	d8000015 	stw	zero,0(sp)
    3210:	01001e04 	movi	r4,120
    3214:	01400504 	movi	r5,20
    3218:	01802304 	movi	r6,140
    321c:	01c00f04 	movi	r7,60
    3220:	00030040 	call	3004 <VGA_box>
	}
	if(side == 2){
    3224:	e0bfff17 	ldw	r2,-4(fp)
    3228:	10800098 	cmpnei	r2,r2,2
    322c:	1000061e 	bne	r2,zero,3248 <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    3230:	d8000015 	stw	zero,0(sp)
    3234:	01002d04 	movi	r4,180
    3238:	01400504 	movi	r5,20
    323c:	01803204 	movi	r6,200
    3240:	01c00f04 	movi	r7,60
    3244:	00030040 	call	3004 <VGA_box>
	}
}
    3248:	e037883a 	mov	sp,fp
    324c:	dfc00117 	ldw	ra,4(sp)
    3250:	df000017 	ldw	fp,0(sp)
    3254:	dec00204 	addi	sp,sp,8
    3258:	f800283a 	ret

0000325c <deleteNummer>:

void deleteNummer(){
    325c:	defffd04 	addi	sp,sp,-12
    3260:	dfc00215 	stw	ra,8(sp)
    3264:	df000115 	stw	fp,4(sp)
    3268:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    326c:	d8000015 	stw	zero,0(sp)
    3270:	01001e04 	movi	r4,120
    3274:	01400504 	movi	r5,20
    3278:	01803204 	movi	r6,200
    327c:	01c00f04 	movi	r7,60
    3280:	00030040 	call	3004 <VGA_box>
}
    3284:	e037883a 	mov	sp,fp
    3288:	dfc00117 	ldw	ra,4(sp)
    328c:	df000017 	ldw	fp,0(sp)
    3290:	dec00204 	addi	sp,sp,8
    3294:	f800283a 	ret

00003298 <draw_number>:

void draw_number(int nummer, int ID){
    3298:	defffa04 	addi	sp,sp,-24
    329c:	dfc00515 	stw	ra,20(sp)
    32a0:	df000415 	stw	fp,16(sp)
    32a4:	df000404 	addi	fp,sp,16
    32a8:	e13ffe15 	stw	r4,-8(fp)
    32ac:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    32b0:	e13fff17 	ldw	r4,-4(fp)
    32b4:	000390c0 	call	390c <checkIDScore>
    32b8:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    32bc:	e0bffe17 	ldw	r2,-8(fp)
    32c0:	10800058 	cmpnei	r2,r2,1
    32c4:	10000b1e 	bne	r2,zero,32f4 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    32c8:	e0bffd17 	ldw	r2,-12(fp)
    32cc:	11000244 	addi	r4,r2,9
    32d0:	e0bffd17 	ldw	r2,-12(fp)
    32d4:	10c00304 	addi	r3,r2,12
    32d8:	00bfffc4 	movi	r2,-1
    32dc:	d8800015 	stw	r2,0(sp)
    32e0:	01400504 	movi	r5,20
    32e4:	180d883a 	mov	r6,r3
    32e8:	01c00f04 	movi	r7,60
    32ec:	00030040 	call	3004 <VGA_box>
    32f0:	00018106 	br	38f8 <draw_number+0x660>
	}else if(nummer == 2){
    32f4:	e0bffe17 	ldw	r2,-8(fp)
    32f8:	10800098 	cmpnei	r2,r2,2
    32fc:	10002f1e 	bne	r2,zero,33bc <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3300:	e0bffd17 	ldw	r2,-12(fp)
    3304:	10c00504 	addi	r3,r2,20
    3308:	00bfffc4 	movi	r2,-1
    330c:	d8800015 	stw	r2,0(sp)
    3310:	e13ffd17 	ldw	r4,-12(fp)
    3314:	01400504 	movi	r5,20
    3318:	180d883a 	mov	r6,r3
    331c:	01c00584 	movi	r7,22
    3320:	00030040 	call	3004 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    3324:	e0bffd17 	ldw	r2,-12(fp)
    3328:	11000484 	addi	r4,r2,18
    332c:	e0bffd17 	ldw	r2,-12(fp)
    3330:	10c00504 	addi	r3,r2,20
    3334:	00bfffc4 	movi	r2,-1
    3338:	d8800015 	stw	r2,0(sp)
    333c:	01400584 	movi	r5,22
    3340:	180d883a 	mov	r6,r3
    3344:	01c00984 	movi	r7,38
    3348:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    334c:	e0bffd17 	ldw	r2,-12(fp)
    3350:	10c00504 	addi	r3,r2,20
    3354:	00bfffc4 	movi	r2,-1
    3358:	d8800015 	stw	r2,0(sp)
    335c:	e13ffd17 	ldw	r4,-12(fp)
    3360:	01400984 	movi	r5,38
    3364:	180d883a 	mov	r6,r3
    3368:	01c00a04 	movi	r7,40
    336c:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    3370:	e0bffd17 	ldw	r2,-12(fp)
    3374:	10c00084 	addi	r3,r2,2
    3378:	00bfffc4 	movi	r2,-1
    337c:	d8800015 	stw	r2,0(sp)
    3380:	e13ffd17 	ldw	r4,-12(fp)
    3384:	01400a04 	movi	r5,40
    3388:	180d883a 	mov	r6,r3
    338c:	01c00e84 	movi	r7,58
    3390:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3394:	e0bffd17 	ldw	r2,-12(fp)
    3398:	10c00504 	addi	r3,r2,20
    339c:	00bfffc4 	movi	r2,-1
    33a0:	d8800015 	stw	r2,0(sp)
    33a4:	e13ffd17 	ldw	r4,-12(fp)
    33a8:	01400e84 	movi	r5,58
    33ac:	180d883a 	mov	r6,r3
    33b0:	01c00f04 	movi	r7,60
    33b4:	00030040 	call	3004 <VGA_box>
    33b8:	00014f06 	br	38f8 <draw_number+0x660>
	}else if(nummer == 3){
    33bc:	e0bffe17 	ldw	r2,-8(fp)
    33c0:	108000d8 	cmpnei	r2,r2,3
    33c4:	1000261e 	bne	r2,zero,3460 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    33c8:	e0bffd17 	ldw	r2,-12(fp)
    33cc:	10c00504 	addi	r3,r2,20
    33d0:	00bfffc4 	movi	r2,-1
    33d4:	d8800015 	stw	r2,0(sp)
    33d8:	e13ffd17 	ldw	r4,-12(fp)
    33dc:	01400504 	movi	r5,20
    33e0:	180d883a 	mov	r6,r3
    33e4:	01c00584 	movi	r7,22
    33e8:	00030040 	call	3004 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    33ec:	e0bffd17 	ldw	r2,-12(fp)
    33f0:	11000484 	addi	r4,r2,18
    33f4:	e0bffd17 	ldw	r2,-12(fp)
    33f8:	10c00504 	addi	r3,r2,20
    33fc:	00bfffc4 	movi	r2,-1
    3400:	d8800015 	stw	r2,0(sp)
    3404:	01400584 	movi	r5,22
    3408:	180d883a 	mov	r6,r3
    340c:	01c00f04 	movi	r7,60
    3410:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    3414:	e0bffd17 	ldw	r2,-12(fp)
    3418:	10c00504 	addi	r3,r2,20
    341c:	00bfffc4 	movi	r2,-1
    3420:	d8800015 	stw	r2,0(sp)
    3424:	e13ffd17 	ldw	r4,-12(fp)
    3428:	014009c4 	movi	r5,39
    342c:	180d883a 	mov	r6,r3
    3430:	01c00a44 	movi	r7,41
    3434:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3438:	e0bffd17 	ldw	r2,-12(fp)
    343c:	10c00504 	addi	r3,r2,20
    3440:	00bfffc4 	movi	r2,-1
    3444:	d8800015 	stw	r2,0(sp)
    3448:	e13ffd17 	ldw	r4,-12(fp)
    344c:	01400e84 	movi	r5,58
    3450:	180d883a 	mov	r6,r3
    3454:	01c00f04 	movi	r7,60
    3458:	00030040 	call	3004 <VGA_box>
    345c:	00012606 	br	38f8 <draw_number+0x660>
	}else if(nummer == 4){
    3460:	e0bffe17 	ldw	r2,-8(fp)
    3464:	10800118 	cmpnei	r2,r2,4
    3468:	10001d1e 	bne	r2,zero,34e0 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    346c:	e0bffd17 	ldw	r2,-12(fp)
    3470:	10c00084 	addi	r3,r2,2
    3474:	00bfffc4 	movi	r2,-1
    3478:	d8800015 	stw	r2,0(sp)
    347c:	e13ffd17 	ldw	r4,-12(fp)
    3480:	01400504 	movi	r5,20
    3484:	180d883a 	mov	r6,r3
    3488:	01c00a04 	movi	r7,40
    348c:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3490:	e0bffd17 	ldw	r2,-12(fp)
    3494:	10c00504 	addi	r3,r2,20
    3498:	00bfffc4 	movi	r2,-1
    349c:	d8800015 	stw	r2,0(sp)
    34a0:	e13ffd17 	ldw	r4,-12(fp)
    34a4:	014009c4 	movi	r5,39
    34a8:	180d883a 	mov	r6,r3
    34ac:	01c00a44 	movi	r7,41
    34b0:	00030040 	call	3004 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    34b4:	e0bffd17 	ldw	r2,-12(fp)
    34b8:	11000484 	addi	r4,r2,18
    34bc:	e0bffd17 	ldw	r2,-12(fp)
    34c0:	10c00504 	addi	r3,r2,20
    34c4:	00bfffc4 	movi	r2,-1
    34c8:	d8800015 	stw	r2,0(sp)
    34cc:	01400504 	movi	r5,20
    34d0:	180d883a 	mov	r6,r3
    34d4:	01c00f04 	movi	r7,60
    34d8:	00030040 	call	3004 <VGA_box>
    34dc:	00010606 	br	38f8 <draw_number+0x660>
	}else if(nummer == 5){
    34e0:	e0bffe17 	ldw	r2,-8(fp)
    34e4:	10800158 	cmpnei	r2,r2,5
    34e8:	10002f1e 	bne	r2,zero,35a8 <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    34ec:	e0bffd17 	ldw	r2,-12(fp)
    34f0:	10c00504 	addi	r3,r2,20
    34f4:	00bfffc4 	movi	r2,-1
    34f8:	d8800015 	stw	r2,0(sp)
    34fc:	e13ffd17 	ldw	r4,-12(fp)
    3500:	01400504 	movi	r5,20
    3504:	180d883a 	mov	r6,r3
    3508:	01c00584 	movi	r7,22
    350c:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    3510:	e0bffd17 	ldw	r2,-12(fp)
    3514:	10c00084 	addi	r3,r2,2
    3518:	00bfffc4 	movi	r2,-1
    351c:	d8800015 	stw	r2,0(sp)
    3520:	e13ffd17 	ldw	r4,-12(fp)
    3524:	01400584 	movi	r5,22
    3528:	180d883a 	mov	r6,r3
    352c:	01c00984 	movi	r7,38
    3530:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    3534:	e0bffd17 	ldw	r2,-12(fp)
    3538:	10c00504 	addi	r3,r2,20
    353c:	00bfffc4 	movi	r2,-1
    3540:	d8800015 	stw	r2,0(sp)
    3544:	e13ffd17 	ldw	r4,-12(fp)
    3548:	01400984 	movi	r5,38
    354c:	180d883a 	mov	r6,r3
    3550:	01c00a04 	movi	r7,40
    3554:	00030040 	call	3004 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    3558:	e0bffd17 	ldw	r2,-12(fp)
    355c:	11000484 	addi	r4,r2,18
    3560:	e0bffd17 	ldw	r2,-12(fp)
    3564:	10c00504 	addi	r3,r2,20
    3568:	00bfffc4 	movi	r2,-1
    356c:	d8800015 	stw	r2,0(sp)
    3570:	01400a04 	movi	r5,40
    3574:	180d883a 	mov	r6,r3
    3578:	01c00e84 	movi	r7,58
    357c:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    3580:	e0bffd17 	ldw	r2,-12(fp)
    3584:	10c00504 	addi	r3,r2,20
    3588:	00bfffc4 	movi	r2,-1
    358c:	d8800015 	stw	r2,0(sp)
    3590:	e13ffd17 	ldw	r4,-12(fp)
    3594:	01400e84 	movi	r5,58
    3598:	180d883a 	mov	r6,r3
    359c:	01c00f04 	movi	r7,60
    35a0:	00030040 	call	3004 <VGA_box>
    35a4:	0000d406 	br	38f8 <draw_number+0x660>
	}else if(nummer == 6){
    35a8:	e0bffe17 	ldw	r2,-8(fp)
    35ac:	10800198 	cmpnei	r2,r2,6
    35b0:	10002f1e 	bne	r2,zero,3670 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    35b4:	e0bffd17 	ldw	r2,-12(fp)
    35b8:	10c00084 	addi	r3,r2,2
    35bc:	00bfffc4 	movi	r2,-1
    35c0:	d8800015 	stw	r2,0(sp)
    35c4:	e13ffd17 	ldw	r4,-12(fp)
    35c8:	01400504 	movi	r5,20
    35cc:	180d883a 	mov	r6,r3
    35d0:	01c00f04 	movi	r7,60
    35d4:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    35d8:	e0bffd17 	ldw	r2,-12(fp)
    35dc:	10c00504 	addi	r3,r2,20
    35e0:	00bfffc4 	movi	r2,-1
    35e4:	d8800015 	stw	r2,0(sp)
    35e8:	e13ffd17 	ldw	r4,-12(fp)
    35ec:	01400504 	movi	r5,20
    35f0:	180d883a 	mov	r6,r3
    35f4:	01c00584 	movi	r7,22
    35f8:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    35fc:	e0bffd17 	ldw	r2,-12(fp)
    3600:	10c00504 	addi	r3,r2,20
    3604:	00bfffc4 	movi	r2,-1
    3608:	d8800015 	stw	r2,0(sp)
    360c:	e13ffd17 	ldw	r4,-12(fp)
    3610:	01400e84 	movi	r5,58
    3614:	180d883a 	mov	r6,r3
    3618:	01c00f04 	movi	r7,60
    361c:	00030040 	call	3004 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    3620:	e0bffd17 	ldw	r2,-12(fp)
    3624:	11000484 	addi	r4,r2,18
    3628:	e0bffd17 	ldw	r2,-12(fp)
    362c:	10c00504 	addi	r3,r2,20
    3630:	00bfffc4 	movi	r2,-1
    3634:	d8800015 	stw	r2,0(sp)
    3638:	01400a04 	movi	r5,40
    363c:	180d883a 	mov	r6,r3
    3640:	01c00e84 	movi	r7,58
    3644:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3648:	e0bffd17 	ldw	r2,-12(fp)
    364c:	10c00504 	addi	r3,r2,20
    3650:	00bfffc4 	movi	r2,-1
    3654:	d8800015 	stw	r2,0(sp)
    3658:	e13ffd17 	ldw	r4,-12(fp)
    365c:	014009c4 	movi	r5,39
    3660:	180d883a 	mov	r6,r3
    3664:	01c00a44 	movi	r7,41
    3668:	00030040 	call	3004 <VGA_box>
    366c:	0000a206 	br	38f8 <draw_number+0x660>
	}else if(nummer == 7){
    3670:	e0bffe17 	ldw	r2,-8(fp)
    3674:	108001d8 	cmpnei	r2,r2,7
    3678:	1000141e 	bne	r2,zero,36cc <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    367c:	e0bffd17 	ldw	r2,-12(fp)
    3680:	11000484 	addi	r4,r2,18
    3684:	e0bffd17 	ldw	r2,-12(fp)
    3688:	10c00504 	addi	r3,r2,20
    368c:	00bfffc4 	movi	r2,-1
    3690:	d8800015 	stw	r2,0(sp)
    3694:	01400504 	movi	r5,20
    3698:	180d883a 	mov	r6,r3
    369c:	01c00f04 	movi	r7,60
    36a0:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    36a4:	e0bffd17 	ldw	r2,-12(fp)
    36a8:	10c00504 	addi	r3,r2,20
    36ac:	00bfffc4 	movi	r2,-1
    36b0:	d8800015 	stw	r2,0(sp)
    36b4:	e13ffd17 	ldw	r4,-12(fp)
    36b8:	01400504 	movi	r5,20
    36bc:	180d883a 	mov	r6,r3
    36c0:	01c00584 	movi	r7,22
    36c4:	00030040 	call	3004 <VGA_box>
    36c8:	00008b06 	br	38f8 <draw_number+0x660>
	}else if(nummer == 8){
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	10800218 	cmpnei	r2,r2,8
    36d4:	10002f1e 	bne	r2,zero,3794 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    36d8:	e0bffd17 	ldw	r2,-12(fp)
    36dc:	11000484 	addi	r4,r2,18
    36e0:	e0bffd17 	ldw	r2,-12(fp)
    36e4:	10c00504 	addi	r3,r2,20
    36e8:	00bfffc4 	movi	r2,-1
    36ec:	d8800015 	stw	r2,0(sp)
    36f0:	01400504 	movi	r5,20
    36f4:	180d883a 	mov	r6,r3
    36f8:	01c00f04 	movi	r7,60
    36fc:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    3700:	e0bffd17 	ldw	r2,-12(fp)
    3704:	10c00084 	addi	r3,r2,2
    3708:	00bfffc4 	movi	r2,-1
    370c:	d8800015 	stw	r2,0(sp)
    3710:	e13ffd17 	ldw	r4,-12(fp)
    3714:	01400504 	movi	r5,20
    3718:	180d883a 	mov	r6,r3
    371c:	01c00f04 	movi	r7,60
    3720:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10c00504 	addi	r3,r2,20
    372c:	00bfffc4 	movi	r2,-1
    3730:	d8800015 	stw	r2,0(sp)
    3734:	e13ffd17 	ldw	r4,-12(fp)
    3738:	01400504 	movi	r5,20
    373c:	180d883a 	mov	r6,r3
    3740:	01c00584 	movi	r7,22
    3744:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3748:	e0bffd17 	ldw	r2,-12(fp)
    374c:	10c00504 	addi	r3,r2,20
    3750:	00bfffc4 	movi	r2,-1
    3754:	d8800015 	stw	r2,0(sp)
    3758:	e13ffd17 	ldw	r4,-12(fp)
    375c:	014009c4 	movi	r5,39
    3760:	180d883a 	mov	r6,r3
    3764:	01c00a44 	movi	r7,41
    3768:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    376c:	e0bffd17 	ldw	r2,-12(fp)
    3770:	10c00504 	addi	r3,r2,20
    3774:	00bfffc4 	movi	r2,-1
    3778:	d8800015 	stw	r2,0(sp)
    377c:	e13ffd17 	ldw	r4,-12(fp)
    3780:	01400e84 	movi	r5,58
    3784:	180d883a 	mov	r6,r3
    3788:	01c00f04 	movi	r7,60
    378c:	00030040 	call	3004 <VGA_box>
    3790:	00005906 	br	38f8 <draw_number+0x660>
	}else if(nummer == 9){
    3794:	e0bffe17 	ldw	r2,-8(fp)
    3798:	10800258 	cmpnei	r2,r2,9
    379c:	10002f1e 	bne	r2,zero,385c <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    37a0:	e0bffd17 	ldw	r2,-12(fp)
    37a4:	11000484 	addi	r4,r2,18
    37a8:	e0bffd17 	ldw	r2,-12(fp)
    37ac:	10c00504 	addi	r3,r2,20
    37b0:	00bfffc4 	movi	r2,-1
    37b4:	d8800015 	stw	r2,0(sp)
    37b8:	01400504 	movi	r5,20
    37bc:	180d883a 	mov	r6,r3
    37c0:	01c00f04 	movi	r7,60
    37c4:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    37c8:	e0bffd17 	ldw	r2,-12(fp)
    37cc:	10c00084 	addi	r3,r2,2
    37d0:	00bfffc4 	movi	r2,-1
    37d4:	d8800015 	stw	r2,0(sp)
    37d8:	e13ffd17 	ldw	r4,-12(fp)
    37dc:	01400504 	movi	r5,20
    37e0:	180d883a 	mov	r6,r3
    37e4:	01c00a04 	movi	r7,40
    37e8:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    37ec:	e0bffd17 	ldw	r2,-12(fp)
    37f0:	10c00504 	addi	r3,r2,20
    37f4:	00bfffc4 	movi	r2,-1
    37f8:	d8800015 	stw	r2,0(sp)
    37fc:	e13ffd17 	ldw	r4,-12(fp)
    3800:	01400504 	movi	r5,20
    3804:	180d883a 	mov	r6,r3
    3808:	01c00584 	movi	r7,22
    380c:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    3810:	e0bffd17 	ldw	r2,-12(fp)
    3814:	10c00504 	addi	r3,r2,20
    3818:	00bfffc4 	movi	r2,-1
    381c:	d8800015 	stw	r2,0(sp)
    3820:	e13ffd17 	ldw	r4,-12(fp)
    3824:	014009c4 	movi	r5,39
    3828:	180d883a 	mov	r6,r3
    382c:	01c00a44 	movi	r7,41
    3830:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    3834:	e0bffd17 	ldw	r2,-12(fp)
    3838:	10c00504 	addi	r3,r2,20
    383c:	00bfffc4 	movi	r2,-1
    3840:	d8800015 	stw	r2,0(sp)
    3844:	e13ffd17 	ldw	r4,-12(fp)
    3848:	01400e84 	movi	r5,58
    384c:	180d883a 	mov	r6,r3
    3850:	01c00f04 	movi	r7,60
    3854:	00030040 	call	3004 <VGA_box>
    3858:	00002706 	br	38f8 <draw_number+0x660>
	}else if(nummer == 0){
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	1000251e 	bne	r2,zero,38f8 <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    3864:	e0bffd17 	ldw	r2,-12(fp)
    3868:	11000484 	addi	r4,r2,18
    386c:	e0bffd17 	ldw	r2,-12(fp)
    3870:	10c00504 	addi	r3,r2,20
    3874:	00bfffc4 	movi	r2,-1
    3878:	d8800015 	stw	r2,0(sp)
    387c:	01400504 	movi	r5,20
    3880:	180d883a 	mov	r6,r3
    3884:	01c00f04 	movi	r7,60
    3888:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    388c:	e0bffd17 	ldw	r2,-12(fp)
    3890:	10c00084 	addi	r3,r2,2
    3894:	00bfffc4 	movi	r2,-1
    3898:	d8800015 	stw	r2,0(sp)
    389c:	e13ffd17 	ldw	r4,-12(fp)
    38a0:	01400504 	movi	r5,20
    38a4:	180d883a 	mov	r6,r3
    38a8:	01c00f04 	movi	r7,60
    38ac:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    38b0:	e0bffd17 	ldw	r2,-12(fp)
    38b4:	10c00504 	addi	r3,r2,20
    38b8:	00bfffc4 	movi	r2,-1
    38bc:	d8800015 	stw	r2,0(sp)
    38c0:	e13ffd17 	ldw	r4,-12(fp)
    38c4:	01400504 	movi	r5,20
    38c8:	180d883a 	mov	r6,r3
    38cc:	01c00584 	movi	r7,22
    38d0:	00030040 	call	3004 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    38d4:	e0bffd17 	ldw	r2,-12(fp)
    38d8:	10c00504 	addi	r3,r2,20
    38dc:	00bfffc4 	movi	r2,-1
    38e0:	d8800015 	stw	r2,0(sp)
    38e4:	e13ffd17 	ldw	r4,-12(fp)
    38e8:	01400e84 	movi	r5,58
    38ec:	180d883a 	mov	r6,r3
    38f0:	01c00f04 	movi	r7,60
    38f4:	00030040 	call	3004 <VGA_box>
	}
}
    38f8:	e037883a 	mov	sp,fp
    38fc:	dfc00117 	ldw	ra,4(sp)
    3900:	df000017 	ldw	fp,0(sp)
    3904:	dec00204 	addi	sp,sp,8
    3908:	f800283a 	ret

0000390c <checkIDScore>:

int checkIDScore(int ID){
    390c:	defffe04 	addi	sp,sp,-8
    3910:	df000115 	stw	fp,4(sp)
    3914:	df000104 	addi	fp,sp,4
    3918:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    391c:	e0bfff17 	ldw	r2,-4(fp)
    3920:	10800058 	cmpnei	r2,r2,1
    3924:	1000021e 	bne	r2,zero,3930 <checkIDScore+0x24>
		return 120;
    3928:	00801e04 	movi	r2,120
    392c:	00000b06 	br	395c <checkIDScore+0x50>
	}else if(ID == 2){
    3930:	e0bfff17 	ldw	r2,-4(fp)
    3934:	10800098 	cmpnei	r2,r2,2
    3938:	1000021e 	bne	r2,zero,3944 <checkIDScore+0x38>
		return 150;
    393c:	00802584 	movi	r2,150
    3940:	00000606 	br	395c <checkIDScore+0x50>
	}else if(ID == 3){
    3944:	e0bfff17 	ldw	r2,-4(fp)
    3948:	108000d8 	cmpnei	r2,r2,3
    394c:	1000021e 	bne	r2,zero,3958 <checkIDScore+0x4c>
		return 180;
    3950:	00802d04 	movi	r2,180
    3954:	00000106 	br	395c <checkIDScore+0x50>
	}
	
	return 0;
    3958:	0005883a 	mov	r2,zero
}
    395c:	e037883a 	mov	sp,fp
    3960:	df000017 	ldw	fp,0(sp)
    3964:	dec00104 	addi	sp,sp,4
    3968:	f800283a 	ret

0000396c <_printf_r>:
    396c:	defffd04 	addi	sp,sp,-12
    3970:	dfc00015 	stw	ra,0(sp)
    3974:	d9800115 	stw	r6,4(sp)
    3978:	d9c00215 	stw	r7,8(sp)
    397c:	280d883a 	mov	r6,r5
    3980:	21400217 	ldw	r5,8(r4)
    3984:	d9c00104 	addi	r7,sp,4
    3988:	0005b7c0 	call	5b7c <___vfprintf_internal_r>
    398c:	dfc00017 	ldw	ra,0(sp)
    3990:	dec00304 	addi	sp,sp,12
    3994:	f800283a 	ret

00003998 <printf>:
    3998:	defffc04 	addi	sp,sp,-16
    399c:	dfc00015 	stw	ra,0(sp)
    39a0:	d9400115 	stw	r5,4(sp)
    39a4:	d9800215 	stw	r6,8(sp)
    39a8:	d9c00315 	stw	r7,12(sp)
    39ac:	008000b4 	movhi	r2,2
    39b0:	108b3f04 	addi	r2,r2,11516
    39b4:	10800017 	ldw	r2,0(r2)
    39b8:	200b883a 	mov	r5,r4
    39bc:	d9800104 	addi	r6,sp,4
    39c0:	11000217 	ldw	r4,8(r2)
    39c4:	0007acc0 	call	7acc <__vfprintf_internal>
    39c8:	dfc00017 	ldw	ra,0(sp)
    39cc:	dec00404 	addi	sp,sp,16
    39d0:	f800283a 	ret

000039d4 <_puts_r>:
    39d4:	defff604 	addi	sp,sp,-40
    39d8:	dc000715 	stw	r16,28(sp)
    39dc:	2021883a 	mov	r16,r4
    39e0:	2809883a 	mov	r4,r5
    39e4:	dc400815 	stw	r17,32(sp)
    39e8:	dfc00915 	stw	ra,36(sp)
    39ec:	2823883a 	mov	r17,r5
    39f0:	0003b540 	call	3b54 <strlen>
    39f4:	81400217 	ldw	r5,8(r16)
    39f8:	11000044 	addi	r4,r2,1
    39fc:	d8800115 	stw	r2,4(sp)
    3a00:	008000b4 	movhi	r2,2
    3a04:	2980030b 	ldhu	r6,12(r5)
    3a08:	10822404 	addi	r2,r2,2192
    3a0c:	d8800215 	stw	r2,8(sp)
    3a10:	00800044 	movi	r2,1
    3a14:	d8800315 	stw	r2,12(sp)
    3a18:	00800084 	movi	r2,2
    3a1c:	d8800515 	stw	r2,20(sp)
    3a20:	dc400015 	stw	r17,0(sp)
    3a24:	d9000615 	stw	r4,24(sp)
    3a28:	dec00415 	stw	sp,16(sp)
    3a2c:	3088000c 	andi	r2,r6,8192
    3a30:	1000061e 	bne	r2,zero,3a4c <_puts_r+0x78>
    3a34:	29001917 	ldw	r4,100(r5)
    3a38:	00b7ffc4 	movi	r2,-8193
    3a3c:	31880014 	ori	r6,r6,8192
    3a40:	2084703a 	and	r2,r4,r2
    3a44:	2980030d 	sth	r6,12(r5)
    3a48:	28801915 	stw	r2,100(r5)
    3a4c:	8009883a 	mov	r4,r16
    3a50:	d9800404 	addi	r6,sp,16
    3a54:	000a0700 	call	a070 <__sfvwrite_r>
    3a58:	1000061e 	bne	r2,zero,3a74 <_puts_r+0xa0>
    3a5c:	00800284 	movi	r2,10
    3a60:	dfc00917 	ldw	ra,36(sp)
    3a64:	dc400817 	ldw	r17,32(sp)
    3a68:	dc000717 	ldw	r16,28(sp)
    3a6c:	dec00a04 	addi	sp,sp,40
    3a70:	f800283a 	ret
    3a74:	00bfffc4 	movi	r2,-1
    3a78:	003ff906 	br	3a60 <__alt_mem_Flash_flash_data+0xf4003a60>

00003a7c <puts>:
    3a7c:	008000b4 	movhi	r2,2
    3a80:	108b3f04 	addi	r2,r2,11516
    3a84:	200b883a 	mov	r5,r4
    3a88:	11000017 	ldw	r4,0(r2)
    3a8c:	00039d41 	jmpi	39d4 <_puts_r>

00003a90 <_sprintf_r>:
    3a90:	deffe404 	addi	sp,sp,-112
    3a94:	2807883a 	mov	r3,r5
    3a98:	dfc01a15 	stw	ra,104(sp)
    3a9c:	d9c01b15 	stw	r7,108(sp)
    3aa0:	00a00034 	movhi	r2,32768
    3aa4:	10bfffc4 	addi	r2,r2,-1
    3aa8:	02008204 	movi	r8,520
    3aac:	d8800215 	stw	r2,8(sp)
    3ab0:	d8800515 	stw	r2,20(sp)
    3ab4:	d80b883a 	mov	r5,sp
    3ab8:	d9c01b04 	addi	r7,sp,108
    3abc:	00bfffc4 	movi	r2,-1
    3ac0:	d8c00015 	stw	r3,0(sp)
    3ac4:	d8c00415 	stw	r3,16(sp)
    3ac8:	da00030d 	sth	r8,12(sp)
    3acc:	d880038d 	sth	r2,14(sp)
    3ad0:	0003bec0 	call	3bec <___svfprintf_internal_r>
    3ad4:	d8c00017 	ldw	r3,0(sp)
    3ad8:	18000005 	stb	zero,0(r3)
    3adc:	dfc01a17 	ldw	ra,104(sp)
    3ae0:	dec01c04 	addi	sp,sp,112
    3ae4:	f800283a 	ret

00003ae8 <sprintf>:
    3ae8:	deffe304 	addi	sp,sp,-116
    3aec:	2007883a 	mov	r3,r4
    3af0:	dfc01a15 	stw	ra,104(sp)
    3af4:	d9801b15 	stw	r6,108(sp)
    3af8:	d9c01c15 	stw	r7,112(sp)
    3afc:	010000b4 	movhi	r4,2
    3b00:	210b3f04 	addi	r4,r4,11516
    3b04:	21000017 	ldw	r4,0(r4)
    3b08:	00a00034 	movhi	r2,32768
    3b0c:	10bfffc4 	addi	r2,r2,-1
    3b10:	280d883a 	mov	r6,r5
    3b14:	02008204 	movi	r8,520
    3b18:	d8800215 	stw	r2,8(sp)
    3b1c:	d8800515 	stw	r2,20(sp)
    3b20:	d80b883a 	mov	r5,sp
    3b24:	d9c01b04 	addi	r7,sp,108
    3b28:	00bfffc4 	movi	r2,-1
    3b2c:	d8c00015 	stw	r3,0(sp)
    3b30:	d8c00415 	stw	r3,16(sp)
    3b34:	da00030d 	sth	r8,12(sp)
    3b38:	d880038d 	sth	r2,14(sp)
    3b3c:	0003bec0 	call	3bec <___svfprintf_internal_r>
    3b40:	d8c00017 	ldw	r3,0(sp)
    3b44:	18000005 	stb	zero,0(r3)
    3b48:	dfc01a17 	ldw	ra,104(sp)
    3b4c:	dec01d04 	addi	sp,sp,116
    3b50:	f800283a 	ret

00003b54 <strlen>:
    3b54:	208000cc 	andi	r2,r4,3
    3b58:	10002026 	beq	r2,zero,3bdc <strlen+0x88>
    3b5c:	20800007 	ldb	r2,0(r4)
    3b60:	10002026 	beq	r2,zero,3be4 <strlen+0x90>
    3b64:	2005883a 	mov	r2,r4
    3b68:	00000206 	br	3b74 <strlen+0x20>
    3b6c:	10c00007 	ldb	r3,0(r2)
    3b70:	18001826 	beq	r3,zero,3bd4 <strlen+0x80>
    3b74:	10800044 	addi	r2,r2,1
    3b78:	10c000cc 	andi	r3,r2,3
    3b7c:	183ffb1e 	bne	r3,zero,3b6c <__alt_mem_Flash_flash_data+0xf4003b6c>
    3b80:	10c00017 	ldw	r3,0(r2)
    3b84:	01ffbff4 	movhi	r7,65279
    3b88:	39ffbfc4 	addi	r7,r7,-257
    3b8c:	00ca303a 	nor	r5,zero,r3
    3b90:	01a02074 	movhi	r6,32897
    3b94:	19c7883a 	add	r3,r3,r7
    3b98:	31a02004 	addi	r6,r6,-32640
    3b9c:	1946703a 	and	r3,r3,r5
    3ba0:	1986703a 	and	r3,r3,r6
    3ba4:	1800091e 	bne	r3,zero,3bcc <strlen+0x78>
    3ba8:	10800104 	addi	r2,r2,4
    3bac:	10c00017 	ldw	r3,0(r2)
    3bb0:	19cb883a 	add	r5,r3,r7
    3bb4:	00c6303a 	nor	r3,zero,r3
    3bb8:	28c6703a 	and	r3,r5,r3
    3bbc:	1986703a 	and	r3,r3,r6
    3bc0:	183ff926 	beq	r3,zero,3ba8 <__alt_mem_Flash_flash_data+0xf4003ba8>
    3bc4:	00000106 	br	3bcc <strlen+0x78>
    3bc8:	10800044 	addi	r2,r2,1
    3bcc:	10c00007 	ldb	r3,0(r2)
    3bd0:	183ffd1e 	bne	r3,zero,3bc8 <__alt_mem_Flash_flash_data+0xf4003bc8>
    3bd4:	1105c83a 	sub	r2,r2,r4
    3bd8:	f800283a 	ret
    3bdc:	2005883a 	mov	r2,r4
    3be0:	003fe706 	br	3b80 <__alt_mem_Flash_flash_data+0xf4003b80>
    3be4:	0005883a 	mov	r2,zero
    3be8:	f800283a 	ret

00003bec <___svfprintf_internal_r>:
    3bec:	deffb504 	addi	sp,sp,-300
    3bf0:	dfc04a15 	stw	ra,296(sp)
    3bf4:	ddc04815 	stw	r23,288(sp)
    3bf8:	d9002f15 	stw	r4,188(sp)
    3bfc:	282f883a 	mov	r23,r5
    3c00:	d9802915 	stw	r6,164(sp)
    3c04:	d9c02d15 	stw	r7,180(sp)
    3c08:	df004915 	stw	fp,292(sp)
    3c0c:	dd804715 	stw	r22,284(sp)
    3c10:	dd404615 	stw	r21,280(sp)
    3c14:	dd004515 	stw	r20,276(sp)
    3c18:	dcc04415 	stw	r19,272(sp)
    3c1c:	dc804315 	stw	r18,268(sp)
    3c20:	dc404215 	stw	r17,264(sp)
    3c24:	dc004115 	stw	r16,260(sp)
    3c28:	000a7640 	call	a764 <_localeconv_r>
    3c2c:	10800017 	ldw	r2,0(r2)
    3c30:	1009883a 	mov	r4,r2
    3c34:	d8803515 	stw	r2,212(sp)
    3c38:	0003b540 	call	3b54 <strlen>
    3c3c:	d8803915 	stw	r2,228(sp)
    3c40:	b880030b 	ldhu	r2,12(r23)
    3c44:	1080200c 	andi	r2,r2,128
    3c48:	10000226 	beq	r2,zero,3c54 <___svfprintf_internal_r+0x68>
    3c4c:	b8800417 	ldw	r2,16(r23)
    3c50:	10065f26 	beq	r2,zero,55d0 <___svfprintf_internal_r+0x19e4>
    3c54:	db001dc4 	addi	r12,sp,119
    3c58:	dd801e04 	addi	r22,sp,120
    3c5c:	d8800404 	addi	r2,sp,16
    3c60:	050000b4 	movhi	r20,2
    3c64:	b317c83a 	sub	r11,r22,r12
    3c68:	a5023584 	addi	r20,r20,2262
    3c6c:	db002815 	stw	r12,160(sp)
    3c70:	d8801e15 	stw	r2,120(sp)
    3c74:	d8002015 	stw	zero,128(sp)
    3c78:	d8001f15 	stw	zero,124(sp)
    3c7c:	d8003315 	stw	zero,204(sp)
    3c80:	d8003715 	stw	zero,220(sp)
    3c84:	d8003815 	stw	zero,224(sp)
    3c88:	1011883a 	mov	r8,r2
    3c8c:	d8003b15 	stw	zero,236(sp)
    3c90:	d8003a15 	stw	zero,232(sp)
    3c94:	d8003015 	stw	zero,192(sp)
    3c98:	dac03d15 	stw	r11,244(sp)
    3c9c:	db002917 	ldw	r12,164(sp)
    3ca0:	60800007 	ldb	r2,0(r12)
    3ca4:	1000ab26 	beq	r2,zero,3f54 <___svfprintf_internal_r+0x368>
    3ca8:	00c00944 	movi	r3,37
    3cac:	10c0a926 	beq	r2,r3,3f54 <___svfprintf_internal_r+0x368>
    3cb0:	6021883a 	mov	r16,r12
    3cb4:	00000106 	br	3cbc <___svfprintf_internal_r+0xd0>
    3cb8:	10c08426 	beq	r2,r3,3ecc <___svfprintf_internal_r+0x2e0>
    3cbc:	84000044 	addi	r16,r16,1
    3cc0:	80800007 	ldb	r2,0(r16)
    3cc4:	103ffc1e 	bne	r2,zero,3cb8 <__alt_mem_Flash_flash_data+0xf4003cb8>
    3cc8:	dac02917 	ldw	r11,164(sp)
    3ccc:	82e3c83a 	sub	r17,r16,r11
    3cd0:	88000f26 	beq	r17,zero,3d10 <___svfprintf_internal_r+0x124>
    3cd4:	d8c02017 	ldw	r3,128(sp)
    3cd8:	d8801f17 	ldw	r2,124(sp)
    3cdc:	dac02917 	ldw	r11,164(sp)
    3ce0:	1c47883a 	add	r3,r3,r17
    3ce4:	10800044 	addi	r2,r2,1
    3ce8:	d8c02015 	stw	r3,128(sp)
    3cec:	42c00015 	stw	r11,0(r8)
    3cf0:	44400115 	stw	r17,4(r8)
    3cf4:	d8801f15 	stw	r2,124(sp)
    3cf8:	00c001c4 	movi	r3,7
    3cfc:	18807616 	blt	r3,r2,3ed8 <___svfprintf_internal_r+0x2ec>
    3d00:	42000204 	addi	r8,r8,8
    3d04:	db003017 	ldw	r12,192(sp)
    3d08:	6459883a 	add	r12,r12,r17
    3d0c:	db003015 	stw	r12,192(sp)
    3d10:	80800007 	ldb	r2,0(r16)
    3d14:	10007726 	beq	r2,zero,3ef4 <___svfprintf_internal_r+0x308>
    3d18:	80800044 	addi	r2,r16,1
    3d1c:	84000047 	ldb	r16,1(r16)
    3d20:	d8002785 	stb	zero,158(sp)
    3d24:	000d883a 	mov	r6,zero
    3d28:	027fffc4 	movi	r9,-1
    3d2c:	d8002e15 	stw	zero,184(sp)
    3d30:	0023883a 	mov	r17,zero
    3d34:	01001604 	movi	r4,88
    3d38:	01400244 	movi	r5,9
    3d3c:	02800a84 	movi	r10,42
    3d40:	01c01b04 	movi	r7,108
    3d44:	10c00044 	addi	r3,r2,1
    3d48:	80bff804 	addi	r2,r16,-32
    3d4c:	2082e636 	bltu	r4,r2,48e8 <___svfprintf_internal_r+0xcfc>
    3d50:	100490ba 	slli	r2,r2,2
    3d54:	02c00034 	movhi	r11,0
    3d58:	5acf5a04 	addi	r11,r11,15720
    3d5c:	12c5883a 	add	r2,r2,r11
    3d60:	10800017 	ldw	r2,0(r2)
    3d64:	1000683a 	jmp	r2
    3d68:	000046c8 	cmpgei	zero,zero,283
    3d6c:	000048e8 	cmpgeui	zero,zero,291
    3d70:	000048e8 	cmpgeui	zero,zero,291
    3d74:	000046e8 	cmpgeui	zero,zero,283
    3d78:	000048e8 	cmpgeui	zero,zero,291
    3d7c:	000048e8 	cmpgeui	zero,zero,291
    3d80:	000048e8 	cmpgeui	zero,zero,291
    3d84:	000048e8 	cmpgeui	zero,zero,291
    3d88:	000048e8 	cmpgeui	zero,zero,291
    3d8c:	000048e8 	cmpgeui	zero,zero,291
    3d90:	000046f8 	rdprs	zero,zero,283
    3d94:	00004724 	muli	zero,zero,284
    3d98:	000048e8 	cmpgeui	zero,zero,291
    3d9c:	00003f5c 	xori	zero,zero,253
    3da0:	00003f6c 	andhi	zero,zero,253
    3da4:	000048e8 	cmpgeui	zero,zero,291
    3da8:	00003fac 	andhi	zero,zero,254
    3dac:	0000458c 	andi	zero,zero,278
    3db0:	0000458c 	andi	zero,zero,278
    3db4:	0000458c 	andi	zero,zero,278
    3db8:	0000458c 	andi	zero,zero,278
    3dbc:	0000458c 	andi	zero,zero,278
    3dc0:	0000458c 	andi	zero,zero,278
    3dc4:	0000458c 	andi	zero,zero,278
    3dc8:	0000458c 	andi	zero,zero,278
    3dcc:	0000458c 	andi	zero,zero,278
    3dd0:	000048e8 	cmpgeui	zero,zero,291
    3dd4:	000048e8 	cmpgeui	zero,zero,291
    3dd8:	000048e8 	cmpgeui	zero,zero,291
    3ddc:	000048e8 	cmpgeui	zero,zero,291
    3de0:	000048e8 	cmpgeui	zero,zero,291
    3de4:	000048e8 	cmpgeui	zero,zero,291
    3de8:	000048e8 	cmpgeui	zero,zero,291
    3dec:	000048e8 	cmpgeui	zero,zero,291
    3df0:	000048e8 	cmpgeui	zero,zero,291
    3df4:	000048e8 	cmpgeui	zero,zero,291
    3df8:	00003fbc 	xorhi	zero,zero,254
    3dfc:	0000443c 	xorhi	zero,zero,272
    3e00:	000048e8 	cmpgeui	zero,zero,291
    3e04:	0000443c 	xorhi	zero,zero,272
    3e08:	000048e8 	cmpgeui	zero,zero,291
    3e0c:	000048e8 	cmpgeui	zero,zero,291
    3e10:	000048e8 	cmpgeui	zero,zero,291
    3e14:	000048e8 	cmpgeui	zero,zero,291
    3e18:	000044e0 	cmpeqi	zero,zero,275
    3e1c:	000048e8 	cmpgeui	zero,zero,291
    3e20:	000048e8 	cmpgeui	zero,zero,291
    3e24:	0000487c 	xorhi	zero,zero,289
    3e28:	000048e8 	cmpgeui	zero,zero,291
    3e2c:	000048e8 	cmpgeui	zero,zero,291
    3e30:	000048e8 	cmpgeui	zero,zero,291
    3e34:	000048e8 	cmpgeui	zero,zero,291
    3e38:	000048e8 	cmpgeui	zero,zero,291
    3e3c:	000044f0 	cmpltui	zero,zero,275
    3e40:	000048e8 	cmpgeui	zero,zero,291
    3e44:	000048e8 	cmpgeui	zero,zero,291
    3e48:	00004530 	cmpltui	zero,zero,276
    3e4c:	000048e8 	cmpgeui	zero,zero,291
    3e50:	000048e8 	cmpgeui	zero,zero,291
    3e54:	000048e8 	cmpgeui	zero,zero,291
    3e58:	000048e8 	cmpgeui	zero,zero,291
    3e5c:	000048e8 	cmpgeui	zero,zero,291
    3e60:	000048e8 	cmpgeui	zero,zero,291
    3e64:	000048e8 	cmpgeui	zero,zero,291
    3e68:	000048e8 	cmpgeui	zero,zero,291
    3e6c:	000048e8 	cmpgeui	zero,zero,291
    3e70:	000048e8 	cmpgeui	zero,zero,291
    3e74:	000047d4 	movui	zero,287
    3e78:	00004814 	movui	zero,288
    3e7c:	0000443c 	xorhi	zero,zero,272
    3e80:	0000443c 	xorhi	zero,zero,272
    3e84:	0000443c 	xorhi	zero,zero,272
    3e88:	00004734 	movhi	zero,284
    3e8c:	00004814 	movui	zero,288
    3e90:	000048e8 	cmpgeui	zero,zero,291
    3e94:	000048e8 	cmpgeui	zero,zero,291
    3e98:	00004744 	movi	zero,285
    3e9c:	000048e8 	cmpgeui	zero,zero,291
    3ea0:	00004758 	cmpnei	zero,zero,285
    3ea4:	000048ac 	andhi	zero,zero,290
    3ea8:	0000478c 	andi	zero,zero,286
    3eac:	000045c0 	call	45c <controller+0xc0>
    3eb0:	000048e8 	cmpgeui	zero,zero,291
    3eb4:	000045d0 	cmplti	zero,zero,279
    3eb8:	000048e8 	cmpgeui	zero,zero,291
    3ebc:	00004648 	cmpgei	zero,zero,281
    3ec0:	000048e8 	cmpgeui	zero,zero,291
    3ec4:	000048e8 	cmpgeui	zero,zero,291
    3ec8:	00004688 	cmpgei	zero,zero,282
    3ecc:	db002917 	ldw	r12,164(sp)
    3ed0:	8323c83a 	sub	r17,r16,r12
    3ed4:	003f7e06 	br	3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    3ed8:	d9002f17 	ldw	r4,188(sp)
    3edc:	b80b883a 	mov	r5,r23
    3ee0:	b00d883a 	mov	r6,r22
    3ee4:	000cd480 	call	cd48 <__ssprint_r>
    3ee8:	1000081e 	bne	r2,zero,3f0c <___svfprintf_internal_r+0x320>
    3eec:	da000404 	addi	r8,sp,16
    3ef0:	003f8406 	br	3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    3ef4:	d8802017 	ldw	r2,128(sp)
    3ef8:	10000426 	beq	r2,zero,3f0c <___svfprintf_internal_r+0x320>
    3efc:	d9002f17 	ldw	r4,188(sp)
    3f00:	b80b883a 	mov	r5,r23
    3f04:	d9801e04 	addi	r6,sp,120
    3f08:	000cd480 	call	cd48 <__ssprint_r>
    3f0c:	b880030b 	ldhu	r2,12(r23)
    3f10:	1080100c 	andi	r2,r2,64
    3f14:	10000d1e 	bne	r2,zero,3f4c <___svfprintf_internal_r+0x360>
    3f18:	d8803017 	ldw	r2,192(sp)
    3f1c:	dfc04a17 	ldw	ra,296(sp)
    3f20:	df004917 	ldw	fp,292(sp)
    3f24:	ddc04817 	ldw	r23,288(sp)
    3f28:	dd804717 	ldw	r22,284(sp)
    3f2c:	dd404617 	ldw	r21,280(sp)
    3f30:	dd004517 	ldw	r20,276(sp)
    3f34:	dcc04417 	ldw	r19,272(sp)
    3f38:	dc804317 	ldw	r18,268(sp)
    3f3c:	dc404217 	ldw	r17,264(sp)
    3f40:	dc004117 	ldw	r16,260(sp)
    3f44:	dec04b04 	addi	sp,sp,300
    3f48:	f800283a 	ret
    3f4c:	00bfffc4 	movi	r2,-1
    3f50:	003ff206 	br	3f1c <__alt_mem_Flash_flash_data+0xf4003f1c>
    3f54:	dc002917 	ldw	r16,164(sp)
    3f58:	003f6d06 	br	3d10 <__alt_mem_Flash_flash_data+0xf4003d10>
    3f5c:	1805883a 	mov	r2,r3
    3f60:	8c400114 	ori	r17,r17,4
    3f64:	1c000007 	ldb	r16,0(r3)
    3f68:	003f7606 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    3f6c:	1c000007 	ldb	r16,0(r3)
    3f70:	18800044 	addi	r2,r3,1
    3f74:	8286e726 	beq	r16,r10,5b14 <___svfprintf_internal_r+0x1f28>
    3f78:	82fff404 	addi	r11,r16,-48
    3f7c:	1007883a 	mov	r3,r2
    3f80:	0013883a 	mov	r9,zero
    3f84:	2aff7036 	bltu	r5,r11,3d48 <__alt_mem_Flash_flash_data+0xf4003d48>
    3f88:	1c000007 	ldb	r16,0(r3)
    3f8c:	4a4002a4 	muli	r9,r9,10
    3f90:	18c00044 	addi	r3,r3,1
    3f94:	5a53883a 	add	r9,r11,r9
    3f98:	82fff404 	addi	r11,r16,-48
    3f9c:	2afffa2e 	bgeu	r5,r11,3f88 <__alt_mem_Flash_flash_data+0xf4003f88>
    3fa0:	483f690e 	bge	r9,zero,3d48 <__alt_mem_Flash_flash_data+0xf4003d48>
    3fa4:	027fffc4 	movi	r9,-1
    3fa8:	003f6706 	br	3d48 <__alt_mem_Flash_flash_data+0xf4003d48>
    3fac:	8c402014 	ori	r17,r17,128
    3fb0:	1805883a 	mov	r2,r3
    3fb4:	1c000007 	ldb	r16,0(r3)
    3fb8:	003f6206 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    3fbc:	8c400414 	ori	r17,r17,16
    3fc0:	d8c02915 	stw	r3,164(sp)
    3fc4:	d9802785 	stb	r6,158(sp)
    3fc8:	8880080c 	andi	r2,r17,32
    3fcc:	d8c02d17 	ldw	r3,180(sp)
    3fd0:	10021526 	beq	r2,zero,4828 <___svfprintf_internal_r+0xc3c>
    3fd4:	db002d17 	ldw	r12,180(sp)
    3fd8:	18800117 	ldw	r2,4(r3)
    3fdc:	1cc00017 	ldw	r19,0(r3)
    3fe0:	63000204 	addi	r12,r12,8
    3fe4:	db002d15 	stw	r12,180(sp)
    3fe8:	1039883a 	mov	fp,r2
    3fec:	10021916 	blt	r2,zero,4854 <___svfprintf_internal_r+0xc68>
    3ff0:	dd402783 	ldbu	r21,158(sp)
    3ff4:	da403215 	stw	r9,200(sp)
    3ff8:	00800044 	movi	r2,1
    3ffc:	9f06b03a 	or	r3,r19,fp
    4000:	48000216 	blt	r9,zero,400c <___svfprintf_internal_r+0x420>
    4004:	013fdfc4 	movi	r4,-129
    4008:	8922703a 	and	r17,r17,r4
    400c:	1802461e 	bne	r3,zero,4928 <___svfprintf_internal_r+0xd3c>
    4010:	48035426 	beq	r9,zero,4d64 <___svfprintf_internal_r+0x1178>
    4014:	10803fcc 	andi	r2,r2,255
    4018:	00c00044 	movi	r3,1
    401c:	10c26726 	beq	r2,r3,49bc <___svfprintf_internal_r+0xdd0>
    4020:	00c00084 	movi	r3,2
    4024:	10c2ea26 	beq	r2,r3,4bd0 <___svfprintf_internal_r+0xfe4>
    4028:	b007883a 	mov	r3,r22
    402c:	9808d0fa 	srli	r4,r19,3
    4030:	e00a977a 	slli	r5,fp,29
    4034:	e038d0fa 	srli	fp,fp,3
    4038:	9cc001cc 	andi	r19,r19,7
    403c:	98800c04 	addi	r2,r19,48
    4040:	18ffffc4 	addi	r3,r3,-1
    4044:	2926b03a 	or	r19,r5,r4
    4048:	18800005 	stb	r2,0(r3)
    404c:	9f08b03a 	or	r4,r19,fp
    4050:	203ff61e 	bne	r4,zero,402c <__alt_mem_Flash_flash_data+0xf400402c>
    4054:	8900004c 	andi	r4,r17,1
    4058:	d8c03115 	stw	r3,196(sp)
    405c:	2002ea26 	beq	r4,zero,4c08 <___svfprintf_internal_r+0x101c>
    4060:	10803fcc 	andi	r2,r2,255
    4064:	1080201c 	xori	r2,r2,128
    4068:	10bfe004 	addi	r2,r2,-128
    406c:	01000c04 	movi	r4,48
    4070:	11057526 	beq	r2,r4,5648 <___svfprintf_internal_r+0x1a5c>
    4074:	dac03117 	ldw	r11,196(sp)
    4078:	193fffc5 	stb	r4,-1(r3)
    407c:	5affffc4 	addi	r11,r11,-1
    4080:	dac03115 	stw	r11,196(sp)
    4084:	b2e5c83a 	sub	r18,r22,r11
    4088:	9005883a 	mov	r2,r18
    408c:	9240010e 	bge	r18,r9,4094 <___svfprintf_internal_r+0x4a8>
    4090:	4805883a 	mov	r2,r9
    4094:	d8802a15 	stw	r2,168(sp)
    4098:	d8003415 	stw	zero,208(sp)
    409c:	a8803fcc 	andi	r2,r21,255
    40a0:	1080201c 	xori	r2,r2,128
    40a4:	10bfe004 	addi	r2,r2,-128
    40a8:	10000326 	beq	r2,zero,40b8 <___svfprintf_internal_r+0x4cc>
    40ac:	d8c02a17 	ldw	r3,168(sp)
    40b0:	18c00044 	addi	r3,r3,1
    40b4:	d8c02a15 	stw	r3,168(sp)
    40b8:	8ac0008c 	andi	r11,r17,2
    40bc:	dac02b15 	stw	r11,172(sp)
    40c0:	58000326 	beq	r11,zero,40d0 <___svfprintf_internal_r+0x4e4>
    40c4:	db002a17 	ldw	r12,168(sp)
    40c8:	63000084 	addi	r12,r12,2
    40cc:	db002a15 	stw	r12,168(sp)
    40d0:	88c0210c 	andi	r3,r17,132
    40d4:	d8c02c15 	stw	r3,176(sp)
    40d8:	1802111e 	bne	r3,zero,4920 <___svfprintf_internal_r+0xd34>
    40dc:	dac02e17 	ldw	r11,184(sp)
    40e0:	db002a17 	ldw	r12,168(sp)
    40e4:	5b39c83a 	sub	fp,r11,r12
    40e8:	07020d0e 	bge	zero,fp,4920 <___svfprintf_internal_r+0xd34>
    40ec:	02400404 	movi	r9,16
    40f0:	d8c02017 	ldw	r3,128(sp)
    40f4:	d8801f17 	ldw	r2,124(sp)
    40f8:	4f058c0e 	bge	r9,fp,572c <___svfprintf_internal_r+0x1b40>
    40fc:	014000b4 	movhi	r5,2
    4100:	e009883a 	mov	r4,fp
    4104:	29423984 	addi	r5,r5,2278
    4108:	dc003c15 	stw	r16,240(sp)
    410c:	9039883a 	mov	fp,r18
    4110:	d9403615 	stw	r5,216(sp)
    4114:	8825883a 	mov	r18,r17
    4118:	482b883a 	mov	r21,r9
    411c:	04c001c4 	movi	r19,7
    4120:	dc002f17 	ldw	r16,188(sp)
    4124:	2023883a 	mov	r17,r4
    4128:	00000306 	br	4138 <___svfprintf_internal_r+0x54c>
    412c:	8c7ffc04 	addi	r17,r17,-16
    4130:	42000204 	addi	r8,r8,8
    4134:	ac40130e 	bge	r21,r17,4184 <___svfprintf_internal_r+0x598>
    4138:	02c000b4 	movhi	r11,2
    413c:	18c00404 	addi	r3,r3,16
    4140:	10800044 	addi	r2,r2,1
    4144:	5ac23984 	addi	r11,r11,2278
    4148:	42c00015 	stw	r11,0(r8)
    414c:	45400115 	stw	r21,4(r8)
    4150:	d8c02015 	stw	r3,128(sp)
    4154:	d8801f15 	stw	r2,124(sp)
    4158:	98bff40e 	bge	r19,r2,412c <__alt_mem_Flash_flash_data+0xf400412c>
    415c:	8009883a 	mov	r4,r16
    4160:	b80b883a 	mov	r5,r23
    4164:	b00d883a 	mov	r6,r22
    4168:	000cd480 	call	cd48 <__ssprint_r>
    416c:	103f671e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4170:	8c7ffc04 	addi	r17,r17,-16
    4174:	d8c02017 	ldw	r3,128(sp)
    4178:	d8801f17 	ldw	r2,124(sp)
    417c:	da000404 	addi	r8,sp,16
    4180:	ac7fed16 	blt	r21,r17,4138 <__alt_mem_Flash_flash_data+0xf4004138>
    4184:	dc003c17 	ldw	r16,240(sp)
    4188:	8809883a 	mov	r4,r17
    418c:	9023883a 	mov	r17,r18
    4190:	e025883a 	mov	r18,fp
    4194:	2039883a 	mov	fp,r4
    4198:	db003617 	ldw	r12,216(sp)
    419c:	e0c7883a 	add	r3,fp,r3
    41a0:	10800044 	addi	r2,r2,1
    41a4:	43000015 	stw	r12,0(r8)
    41a8:	47000115 	stw	fp,4(r8)
    41ac:	d8c02015 	stw	r3,128(sp)
    41b0:	d8801f15 	stw	r2,124(sp)
    41b4:	010001c4 	movi	r4,7
    41b8:	20834416 	blt	r4,r2,4ecc <___svfprintf_internal_r+0x12e0>
    41bc:	d8802787 	ldb	r2,158(sp)
    41c0:	42000204 	addi	r8,r8,8
    41c4:	10000c26 	beq	r2,zero,41f8 <___svfprintf_internal_r+0x60c>
    41c8:	d8801f17 	ldw	r2,124(sp)
    41cc:	d9002784 	addi	r4,sp,158
    41d0:	18c00044 	addi	r3,r3,1
    41d4:	10800044 	addi	r2,r2,1
    41d8:	41000015 	stw	r4,0(r8)
    41dc:	01000044 	movi	r4,1
    41e0:	41000115 	stw	r4,4(r8)
    41e4:	d8c02015 	stw	r3,128(sp)
    41e8:	d8801f15 	stw	r2,124(sp)
    41ec:	010001c4 	movi	r4,7
    41f0:	2082f616 	blt	r4,r2,4dcc <___svfprintf_internal_r+0x11e0>
    41f4:	42000204 	addi	r8,r8,8
    41f8:	dac02b17 	ldw	r11,172(sp)
    41fc:	58000c26 	beq	r11,zero,4230 <___svfprintf_internal_r+0x644>
    4200:	d8801f17 	ldw	r2,124(sp)
    4204:	d9002704 	addi	r4,sp,156
    4208:	18c00084 	addi	r3,r3,2
    420c:	10800044 	addi	r2,r2,1
    4210:	41000015 	stw	r4,0(r8)
    4214:	01000084 	movi	r4,2
    4218:	41000115 	stw	r4,4(r8)
    421c:	d8c02015 	stw	r3,128(sp)
    4220:	d8801f15 	stw	r2,124(sp)
    4224:	010001c4 	movi	r4,7
    4228:	2082e016 	blt	r4,r2,4dac <___svfprintf_internal_r+0x11c0>
    422c:	42000204 	addi	r8,r8,8
    4230:	db002c17 	ldw	r12,176(sp)
    4234:	00802004 	movi	r2,128
    4238:	60822f26 	beq	r12,r2,4af8 <___svfprintf_internal_r+0xf0c>
    423c:	db003217 	ldw	r12,200(sp)
    4240:	64abc83a 	sub	r21,r12,r18
    4244:	0540310e 	bge	zero,r21,430c <___svfprintf_internal_r+0x720>
    4248:	07000404 	movi	fp,16
    424c:	d8801f17 	ldw	r2,124(sp)
    4250:	e544270e 	bge	fp,r21,52f0 <___svfprintf_internal_r+0x1704>
    4254:	014000b4 	movhi	r5,2
    4258:	a809883a 	mov	r4,r21
    425c:	29423584 	addi	r5,r5,2262
    4260:	dc002c15 	stw	r16,176(sp)
    4264:	902b883a 	mov	r21,r18
    4268:	d9402b15 	stw	r5,172(sp)
    426c:	8825883a 	mov	r18,r17
    4270:	04c001c4 	movi	r19,7
    4274:	dc002f17 	ldw	r16,188(sp)
    4278:	2023883a 	mov	r17,r4
    427c:	00000306 	br	428c <___svfprintf_internal_r+0x6a0>
    4280:	8c7ffc04 	addi	r17,r17,-16
    4284:	42000204 	addi	r8,r8,8
    4288:	e440110e 	bge	fp,r17,42d0 <___svfprintf_internal_r+0x6e4>
    428c:	18c00404 	addi	r3,r3,16
    4290:	10800044 	addi	r2,r2,1
    4294:	45000015 	stw	r20,0(r8)
    4298:	47000115 	stw	fp,4(r8)
    429c:	d8c02015 	stw	r3,128(sp)
    42a0:	d8801f15 	stw	r2,124(sp)
    42a4:	98bff60e 	bge	r19,r2,4280 <__alt_mem_Flash_flash_data+0xf4004280>
    42a8:	8009883a 	mov	r4,r16
    42ac:	b80b883a 	mov	r5,r23
    42b0:	b00d883a 	mov	r6,r22
    42b4:	000cd480 	call	cd48 <__ssprint_r>
    42b8:	103f141e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    42bc:	8c7ffc04 	addi	r17,r17,-16
    42c0:	d8c02017 	ldw	r3,128(sp)
    42c4:	d8801f17 	ldw	r2,124(sp)
    42c8:	da000404 	addi	r8,sp,16
    42cc:	e47fef16 	blt	fp,r17,428c <__alt_mem_Flash_flash_data+0xf400428c>
    42d0:	dc002c17 	ldw	r16,176(sp)
    42d4:	8809883a 	mov	r4,r17
    42d8:	9023883a 	mov	r17,r18
    42dc:	a825883a 	mov	r18,r21
    42e0:	202b883a 	mov	r21,r4
    42e4:	dac02b17 	ldw	r11,172(sp)
    42e8:	1d47883a 	add	r3,r3,r21
    42ec:	10800044 	addi	r2,r2,1
    42f0:	42c00015 	stw	r11,0(r8)
    42f4:	45400115 	stw	r21,4(r8)
    42f8:	d8c02015 	stw	r3,128(sp)
    42fc:	d8801f15 	stw	r2,124(sp)
    4300:	010001c4 	movi	r4,7
    4304:	2082a116 	blt	r4,r2,4d8c <___svfprintf_internal_r+0x11a0>
    4308:	42000204 	addi	r8,r8,8
    430c:	8880400c 	andi	r2,r17,256
    4310:	1001b01e 	bne	r2,zero,49d4 <___svfprintf_internal_r+0xde8>
    4314:	d8801f17 	ldw	r2,124(sp)
    4318:	db003117 	ldw	r12,196(sp)
    431c:	1c87883a 	add	r3,r3,r18
    4320:	10800044 	addi	r2,r2,1
    4324:	43000015 	stw	r12,0(r8)
    4328:	44800115 	stw	r18,4(r8)
    432c:	d8c02015 	stw	r3,128(sp)
    4330:	d8801f15 	stw	r2,124(sp)
    4334:	010001c4 	movi	r4,7
    4338:	20828216 	blt	r4,r2,4d44 <___svfprintf_internal_r+0x1158>
    433c:	42000204 	addi	r8,r8,8
    4340:	8c40010c 	andi	r17,r17,4
    4344:	88003226 	beq	r17,zero,4410 <___svfprintf_internal_r+0x824>
    4348:	db002e17 	ldw	r12,184(sp)
    434c:	dac02a17 	ldw	r11,168(sp)
    4350:	62e1c83a 	sub	r16,r12,r11
    4354:	04002e0e 	bge	zero,r16,4410 <___svfprintf_internal_r+0x824>
    4358:	04400404 	movi	r17,16
    435c:	d8801f17 	ldw	r2,124(sp)
    4360:	8c05330e 	bge	r17,r16,5830 <___svfprintf_internal_r+0x1c44>
    4364:	010000b4 	movhi	r4,2
    4368:	21023984 	addi	r4,r4,2278
    436c:	d9003615 	stw	r4,216(sp)
    4370:	048001c4 	movi	r18,7
    4374:	dcc02f17 	ldw	r19,188(sp)
    4378:	00000306 	br	4388 <___svfprintf_internal_r+0x79c>
    437c:	843ffc04 	addi	r16,r16,-16
    4380:	42000204 	addi	r8,r8,8
    4384:	8c00130e 	bge	r17,r16,43d4 <___svfprintf_internal_r+0x7e8>
    4388:	014000b4 	movhi	r5,2
    438c:	18c00404 	addi	r3,r3,16
    4390:	10800044 	addi	r2,r2,1
    4394:	29423984 	addi	r5,r5,2278
    4398:	41400015 	stw	r5,0(r8)
    439c:	44400115 	stw	r17,4(r8)
    43a0:	d8c02015 	stw	r3,128(sp)
    43a4:	d8801f15 	stw	r2,124(sp)
    43a8:	90bff40e 	bge	r18,r2,437c <__alt_mem_Flash_flash_data+0xf400437c>
    43ac:	9809883a 	mov	r4,r19
    43b0:	b80b883a 	mov	r5,r23
    43b4:	b00d883a 	mov	r6,r22
    43b8:	000cd480 	call	cd48 <__ssprint_r>
    43bc:	103ed31e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    43c0:	843ffc04 	addi	r16,r16,-16
    43c4:	d8c02017 	ldw	r3,128(sp)
    43c8:	d8801f17 	ldw	r2,124(sp)
    43cc:	da000404 	addi	r8,sp,16
    43d0:	8c3fed16 	blt	r17,r16,4388 <__alt_mem_Flash_flash_data+0xf4004388>
    43d4:	dac03617 	ldw	r11,216(sp)
    43d8:	1c07883a 	add	r3,r3,r16
    43dc:	10800044 	addi	r2,r2,1
    43e0:	42c00015 	stw	r11,0(r8)
    43e4:	44000115 	stw	r16,4(r8)
    43e8:	d8c02015 	stw	r3,128(sp)
    43ec:	d8801f15 	stw	r2,124(sp)
    43f0:	010001c4 	movi	r4,7
    43f4:	2080060e 	bge	r4,r2,4410 <___svfprintf_internal_r+0x824>
    43f8:	d9002f17 	ldw	r4,188(sp)
    43fc:	b80b883a 	mov	r5,r23
    4400:	b00d883a 	mov	r6,r22
    4404:	000cd480 	call	cd48 <__ssprint_r>
    4408:	103ec01e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    440c:	d8c02017 	ldw	r3,128(sp)
    4410:	d8802a17 	ldw	r2,168(sp)
    4414:	db002e17 	ldw	r12,184(sp)
    4418:	1300010e 	bge	r2,r12,4420 <___svfprintf_internal_r+0x834>
    441c:	6005883a 	mov	r2,r12
    4420:	dac03017 	ldw	r11,192(sp)
    4424:	5897883a 	add	r11,r11,r2
    4428:	dac03015 	stw	r11,192(sp)
    442c:	1802331e 	bne	r3,zero,4cfc <___svfprintf_internal_r+0x1110>
    4430:	d8001f15 	stw	zero,124(sp)
    4434:	da000404 	addi	r8,sp,16
    4438:	003e1806 	br	3c9c <__alt_mem_Flash_flash_data+0xf4003c9c>
    443c:	db002d17 	ldw	r12,180(sp)
    4440:	dac02d17 	ldw	r11,180(sp)
    4444:	d8c02915 	stw	r3,164(sp)
    4448:	63000017 	ldw	r12,0(r12)
    444c:	5ac00117 	ldw	r11,4(r11)
    4450:	d9802785 	stb	r6,158(sp)
    4454:	6009883a 	mov	r4,r12
    4458:	580b883a 	mov	r5,r11
    445c:	db003715 	stw	r12,220(sp)
    4460:	da004015 	stw	r8,256(sp)
    4464:	da403f15 	stw	r9,252(sp)
    4468:	dac03815 	stw	r11,224(sp)
    446c:	000caa00 	call	caa0 <__fpclassifyd>
    4470:	db002d17 	ldw	r12,180(sp)
    4474:	04800044 	movi	r18,1
    4478:	da004017 	ldw	r8,256(sp)
    447c:	64c00204 	addi	r19,r12,8
    4480:	da403f17 	ldw	r9,252(sp)
    4484:	d9003717 	ldw	r4,220(sp)
    4488:	d9403817 	ldw	r5,224(sp)
    448c:	1483561e 	bne	r2,r18,51e8 <___svfprintf_internal_r+0x15fc>
    4490:	000d883a 	mov	r6,zero
    4494:	000f883a 	mov	r7,zero
    4498:	0011c500 	call	11c50 <__ledf2>
    449c:	da004017 	ldw	r8,256(sp)
    44a0:	1004ee16 	blt	r2,zero,585c <___svfprintf_internal_r+0x1c70>
    44a4:	dd402783 	ldbu	r21,158(sp)
    44a8:	008011c4 	movi	r2,71
    44ac:	1404440e 	bge	r2,r16,55c0 <___svfprintf_internal_r+0x19d4>
    44b0:	00c000b4 	movhi	r3,2
    44b4:	18c22604 	addi	r3,r3,2200
    44b8:	d8c03115 	stw	r3,196(sp)
    44bc:	02c000c4 	movi	r11,3
    44c0:	00bfdfc4 	movi	r2,-129
    44c4:	dac02a15 	stw	r11,168(sp)
    44c8:	88a2703a 	and	r17,r17,r2
    44cc:	dcc02d15 	stw	r19,180(sp)
    44d0:	5825883a 	mov	r18,r11
    44d4:	d8003215 	stw	zero,200(sp)
    44d8:	d8003415 	stw	zero,208(sp)
    44dc:	003eef06 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    44e0:	8c400214 	ori	r17,r17,8
    44e4:	1805883a 	mov	r2,r3
    44e8:	1c000007 	ldb	r16,0(r3)
    44ec:	003e1506 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    44f0:	8c400414 	ori	r17,r17,16
    44f4:	d8c02915 	stw	r3,164(sp)
    44f8:	88c0080c 	andi	r3,r17,32
    44fc:	d8802d17 	ldw	r2,180(sp)
    4500:	18005526 	beq	r3,zero,4658 <___svfprintf_internal_r+0xa6c>
    4504:	dac02d17 	ldw	r11,180(sp)
    4508:	14c00017 	ldw	r19,0(r2)
    450c:	17000117 	ldw	fp,4(r2)
    4510:	5ac00204 	addi	r11,r11,8
    4514:	dac02d15 	stw	r11,180(sp)
    4518:	00800044 	movi	r2,1
    451c:	9f06b03a 	or	r3,r19,fp
    4520:	d8002785 	stb	zero,158(sp)
    4524:	da403215 	stw	r9,200(sp)
    4528:	002b883a 	mov	r21,zero
    452c:	003eb406 	br	4000 <__alt_mem_Flash_flash_data+0xf4004000>
    4530:	030000b4 	movhi	r12,2
    4534:	63022904 	addi	r12,r12,2212
    4538:	d8c02915 	stw	r3,164(sp)
    453c:	d9802785 	stb	r6,158(sp)
    4540:	db003b15 	stw	r12,236(sp)
    4544:	88c0080c 	andi	r3,r17,32
    4548:	d8802d17 	ldw	r2,180(sp)
    454c:	18005626 	beq	r3,zero,46a8 <___svfprintf_internal_r+0xabc>
    4550:	dac02d17 	ldw	r11,180(sp)
    4554:	14c00017 	ldw	r19,0(r2)
    4558:	17000117 	ldw	fp,4(r2)
    455c:	5ac00204 	addi	r11,r11,8
    4560:	dac02d15 	stw	r11,180(sp)
    4564:	8880004c 	andi	r2,r17,1
    4568:	10029326 	beq	r2,zero,4fb8 <___svfprintf_internal_r+0x13cc>
    456c:	9f06b03a 	or	r3,r19,fp
    4570:	18033526 	beq	r3,zero,5248 <___svfprintf_internal_r+0x165c>
    4574:	00800c04 	movi	r2,48
    4578:	d8802705 	stb	r2,156(sp)
    457c:	dc002745 	stb	r16,157(sp)
    4580:	8c400094 	ori	r17,r17,2
    4584:	00800084 	movi	r2,2
    4588:	003fe506 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    458c:	1805883a 	mov	r2,r3
    4590:	d8002e15 	stw	zero,184(sp)
    4594:	82fff404 	addi	r11,r16,-48
    4598:	0019883a 	mov	r12,zero
    459c:	14000007 	ldb	r16,0(r2)
    45a0:	630002a4 	muli	r12,r12,10
    45a4:	18c00044 	addi	r3,r3,1
    45a8:	1805883a 	mov	r2,r3
    45ac:	62d9883a 	add	r12,r12,r11
    45b0:	82fff404 	addi	r11,r16,-48
    45b4:	2afff92e 	bgeu	r5,r11,459c <__alt_mem_Flash_flash_data+0xf400459c>
    45b8:	db002e15 	stw	r12,184(sp)
    45bc:	003de206 	br	3d48 <__alt_mem_Flash_flash_data+0xf4003d48>
    45c0:	8c400814 	ori	r17,r17,32
    45c4:	1805883a 	mov	r2,r3
    45c8:	1c000007 	ldb	r16,0(r3)
    45cc:	003ddd06 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    45d0:	dac02d17 	ldw	r11,180(sp)
    45d4:	db002d17 	ldw	r12,180(sp)
    45d8:	d8c02915 	stw	r3,164(sp)
    45dc:	5ac00017 	ldw	r11,0(r11)
    45e0:	d8002785 	stb	zero,158(sp)
    45e4:	64c00104 	addi	r19,r12,4
    45e8:	dac03115 	stw	r11,196(sp)
    45ec:	58048126 	beq	r11,zero,57f4 <___svfprintf_internal_r+0x1c08>
    45f0:	d9003117 	ldw	r4,196(sp)
    45f4:	48041716 	blt	r9,zero,5654 <___svfprintf_internal_r+0x1a68>
    45f8:	480d883a 	mov	r6,r9
    45fc:	000b883a 	mov	r5,zero
    4600:	da004015 	stw	r8,256(sp)
    4604:	da403f15 	stw	r9,252(sp)
    4608:	000b0f80 	call	b0f8 <memchr>
    460c:	da004017 	ldw	r8,256(sp)
    4610:	da403f17 	ldw	r9,252(sp)
    4614:	1004db26 	beq	r2,zero,5984 <___svfprintf_internal_r+0x1d98>
    4618:	d8c03117 	ldw	r3,196(sp)
    461c:	10e5c83a 	sub	r18,r2,r3
    4620:	4c80010e 	bge	r9,r18,4628 <___svfprintf_internal_r+0xa3c>
    4624:	4825883a 	mov	r18,r9
    4628:	9005883a 	mov	r2,r18
    462c:	90040e16 	blt	r18,zero,5668 <___svfprintf_internal_r+0x1a7c>
    4630:	dd402783 	ldbu	r21,158(sp)
    4634:	d8802a15 	stw	r2,168(sp)
    4638:	dcc02d15 	stw	r19,180(sp)
    463c:	d8003215 	stw	zero,200(sp)
    4640:	d8003415 	stw	zero,208(sp)
    4644:	003e9506 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    4648:	d8c02915 	stw	r3,164(sp)
    464c:	88c0080c 	andi	r3,r17,32
    4650:	d8802d17 	ldw	r2,180(sp)
    4654:	183fab1e 	bne	r3,zero,4504 <__alt_mem_Flash_flash_data+0xf4004504>
    4658:	88c0040c 	andi	r3,r17,16
    465c:	1802681e 	bne	r3,zero,5000 <___svfprintf_internal_r+0x1414>
    4660:	88c0100c 	andi	r3,r17,64
    4664:	18026626 	beq	r3,zero,5000 <___svfprintf_internal_r+0x1414>
    4668:	dac02d17 	ldw	r11,180(sp)
    466c:	14c0000b 	ldhu	r19,0(r2)
    4670:	0039883a 	mov	fp,zero
    4674:	5ac00104 	addi	r11,r11,4
    4678:	dac02d15 	stw	r11,180(sp)
    467c:	00800044 	movi	r2,1
    4680:	9807883a 	mov	r3,r19
    4684:	003fa606 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    4688:	008000b4 	movhi	r2,2
    468c:	10822e04 	addi	r2,r2,2232
    4690:	d8c02915 	stw	r3,164(sp)
    4694:	d8803b15 	stw	r2,236(sp)
    4698:	d9802785 	stb	r6,158(sp)
    469c:	88c0080c 	andi	r3,r17,32
    46a0:	d8802d17 	ldw	r2,180(sp)
    46a4:	183faa1e 	bne	r3,zero,4550 <__alt_mem_Flash_flash_data+0xf4004550>
    46a8:	88c0040c 	andi	r3,r17,16
    46ac:	1802e826 	beq	r3,zero,5250 <___svfprintf_internal_r+0x1664>
    46b0:	db002d17 	ldw	r12,180(sp)
    46b4:	14c00017 	ldw	r19,0(r2)
    46b8:	0039883a 	mov	fp,zero
    46bc:	63000104 	addi	r12,r12,4
    46c0:	db002d15 	stw	r12,180(sp)
    46c4:	003fa706 	br	4564 <__alt_mem_Flash_flash_data+0xf4004564>
    46c8:	30803fcc 	andi	r2,r6,255
    46cc:	1080201c 	xori	r2,r2,128
    46d0:	10bfe004 	addi	r2,r2,-128
    46d4:	1002d91e 	bne	r2,zero,523c <___svfprintf_internal_r+0x1650>
    46d8:	1805883a 	mov	r2,r3
    46dc:	01800804 	movi	r6,32
    46e0:	1c000007 	ldb	r16,0(r3)
    46e4:	003d9706 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    46e8:	8c400054 	ori	r17,r17,1
    46ec:	1805883a 	mov	r2,r3
    46f0:	1c000007 	ldb	r16,0(r3)
    46f4:	003d9306 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    46f8:	dac02d17 	ldw	r11,180(sp)
    46fc:	db002d17 	ldw	r12,180(sp)
    4700:	5ac00017 	ldw	r11,0(r11)
    4704:	dac02e15 	stw	r11,184(sp)
    4708:	62c00104 	addi	r11,r12,4
    470c:	db002e17 	ldw	r12,184(sp)
    4710:	60033e16 	blt	r12,zero,540c <___svfprintf_internal_r+0x1820>
    4714:	dac02d15 	stw	r11,180(sp)
    4718:	1805883a 	mov	r2,r3
    471c:	1c000007 	ldb	r16,0(r3)
    4720:	003d8806 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    4724:	1805883a 	mov	r2,r3
    4728:	01800ac4 	movi	r6,43
    472c:	1c000007 	ldb	r16,0(r3)
    4730:	003d8406 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    4734:	8c401014 	ori	r17,r17,64
    4738:	1805883a 	mov	r2,r3
    473c:	1c000007 	ldb	r16,0(r3)
    4740:	003d8006 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    4744:	1c000007 	ldb	r16,0(r3)
    4748:	81c33626 	beq	r16,r7,5424 <___svfprintf_internal_r+0x1838>
    474c:	8c400414 	ori	r17,r17,16
    4750:	1805883a 	mov	r2,r3
    4754:	003d7b06 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    4758:	d8c02915 	stw	r3,164(sp)
    475c:	d9802785 	stb	r6,158(sp)
    4760:	8880080c 	andi	r2,r17,32
    4764:	1002c226 	beq	r2,zero,5270 <___svfprintf_internal_r+0x1684>
    4768:	db002d17 	ldw	r12,180(sp)
    476c:	dac03017 	ldw	r11,192(sp)
    4770:	60800017 	ldw	r2,0(r12)
    4774:	5807d7fa 	srai	r3,r11,31
    4778:	63000104 	addi	r12,r12,4
    477c:	db002d15 	stw	r12,180(sp)
    4780:	12c00015 	stw	r11,0(r2)
    4784:	10c00115 	stw	r3,4(r2)
    4788:	003d4406 	br	3c9c <__alt_mem_Flash_flash_data+0xf4003c9c>
    478c:	db002d17 	ldw	r12,180(sp)
    4790:	00800c04 	movi	r2,48
    4794:	d8802705 	stb	r2,156(sp)
    4798:	64c00017 	ldw	r19,0(r12)
    479c:	00801e04 	movi	r2,120
    47a0:	d8802745 	stb	r2,157(sp)
    47a4:	008000b4 	movhi	r2,2
    47a8:	10822e04 	addi	r2,r2,2232
    47ac:	63000104 	addi	r12,r12,4
    47b0:	d8c02915 	stw	r3,164(sp)
    47b4:	d8803b15 	stw	r2,236(sp)
    47b8:	0039883a 	mov	fp,zero
    47bc:	8c400094 	ori	r17,r17,2
    47c0:	db002d15 	stw	r12,180(sp)
    47c4:	00800084 	movi	r2,2
    47c8:	04001e04 	movi	r16,120
    47cc:	9807883a 	mov	r3,r19
    47d0:	003f5306 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    47d4:	db002d17 	ldw	r12,180(sp)
    47d8:	d8c02915 	stw	r3,164(sp)
    47dc:	dac01404 	addi	r11,sp,80
    47e0:	60800017 	ldw	r2,0(r12)
    47e4:	00c00044 	movi	r3,1
    47e8:	63000104 	addi	r12,r12,4
    47ec:	d8801405 	stb	r2,80(sp)
    47f0:	d8c02a15 	stw	r3,168(sp)
    47f4:	d8002785 	stb	zero,158(sp)
    47f8:	db002d15 	stw	r12,180(sp)
    47fc:	1825883a 	mov	r18,r3
    4800:	d8003215 	stw	zero,200(sp)
    4804:	d8003415 	stw	zero,208(sp)
    4808:	dac03115 	stw	r11,196(sp)
    480c:	0005883a 	mov	r2,zero
    4810:	003e2906 	br	40b8 <__alt_mem_Flash_flash_data+0xf40040b8>
    4814:	d8c02915 	stw	r3,164(sp)
    4818:	d9802785 	stb	r6,158(sp)
    481c:	8880080c 	andi	r2,r17,32
    4820:	d8c02d17 	ldw	r3,180(sp)
    4824:	103deb1e 	bne	r2,zero,3fd4 <__alt_mem_Flash_flash_data+0xf4003fd4>
    4828:	8880040c 	andi	r2,r17,16
    482c:	1001e51e 	bne	r2,zero,4fc4 <___svfprintf_internal_r+0x13d8>
    4830:	8880100c 	andi	r2,r17,64
    4834:	1001e326 	beq	r2,zero,4fc4 <___svfprintf_internal_r+0x13d8>
    4838:	1cc0000f 	ldh	r19,0(r3)
    483c:	db002d17 	ldw	r12,180(sp)
    4840:	9839d7fa 	srai	fp,r19,31
    4844:	63000104 	addi	r12,r12,4
    4848:	db002d15 	stw	r12,180(sp)
    484c:	e005883a 	mov	r2,fp
    4850:	103de70e 	bge	r2,zero,3ff0 <__alt_mem_Flash_flash_data+0xf4003ff0>
    4854:	04e7c83a 	sub	r19,zero,r19
    4858:	9804c03a 	cmpne	r2,r19,zero
    485c:	0739c83a 	sub	fp,zero,fp
    4860:	e0b9c83a 	sub	fp,fp,r2
    4864:	05400b44 	movi	r21,45
    4868:	dd402785 	stb	r21,158(sp)
    486c:	da403215 	stw	r9,200(sp)
    4870:	00800044 	movi	r2,1
    4874:	9f06b03a 	or	r3,r19,fp
    4878:	003de106 	br	4000 <__alt_mem_Flash_flash_data+0xf4004000>
    487c:	8c400414 	ori	r17,r17,16
    4880:	d8c02915 	stw	r3,164(sp)
    4884:	8880080c 	andi	r2,r17,32
    4888:	10000b26 	beq	r2,zero,48b8 <___svfprintf_internal_r+0xccc>
    488c:	db002d17 	ldw	r12,180(sp)
    4890:	0005883a 	mov	r2,zero
    4894:	64c00017 	ldw	r19,0(r12)
    4898:	67000117 	ldw	fp,4(r12)
    489c:	63000204 	addi	r12,r12,8
    48a0:	db002d15 	stw	r12,180(sp)
    48a4:	9f06b03a 	or	r3,r19,fp
    48a8:	003f1d06 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    48ac:	d8c02915 	stw	r3,164(sp)
    48b0:	8880080c 	andi	r2,r17,32
    48b4:	103ff51e 	bne	r2,zero,488c <__alt_mem_Flash_flash_data+0xf400488c>
    48b8:	8880040c 	andi	r2,r17,16
    48bc:	1001c81e 	bne	r2,zero,4fe0 <___svfprintf_internal_r+0x13f4>
    48c0:	8880100c 	andi	r2,r17,64
    48c4:	1001c626 	beq	r2,zero,4fe0 <___svfprintf_internal_r+0x13f4>
    48c8:	db002d17 	ldw	r12,180(sp)
    48cc:	0039883a 	mov	fp,zero
    48d0:	0005883a 	mov	r2,zero
    48d4:	64c0000b 	ldhu	r19,0(r12)
    48d8:	63000104 	addi	r12,r12,4
    48dc:	db002d15 	stw	r12,180(sp)
    48e0:	9807883a 	mov	r3,r19
    48e4:	003f0e06 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    48e8:	d8c02915 	stw	r3,164(sp)
    48ec:	d9802785 	stb	r6,158(sp)
    48f0:	803d8026 	beq	r16,zero,3ef4 <__alt_mem_Flash_flash_data+0xf4003ef4>
    48f4:	02c00044 	movi	r11,1
    48f8:	db001404 	addi	r12,sp,80
    48fc:	dac02a15 	stw	r11,168(sp)
    4900:	dc001405 	stb	r16,80(sp)
    4904:	d8002785 	stb	zero,158(sp)
    4908:	5825883a 	mov	r18,r11
    490c:	d8003215 	stw	zero,200(sp)
    4910:	d8003415 	stw	zero,208(sp)
    4914:	db003115 	stw	r12,196(sp)
    4918:	0005883a 	mov	r2,zero
    491c:	003de606 	br	40b8 <__alt_mem_Flash_flash_data+0xf40040b8>
    4920:	d8c02017 	ldw	r3,128(sp)
    4924:	003e2706 	br	41c4 <__alt_mem_Flash_flash_data+0xf40041c4>
    4928:	10803fcc 	andi	r2,r2,255
    492c:	00c00044 	movi	r3,1
    4930:	10fdbb1e 	bne	r2,r3,4020 <__alt_mem_Flash_flash_data+0xf4004020>
    4934:	e000021e 	bne	fp,zero,4940 <___svfprintf_internal_r+0xd54>
    4938:	00800244 	movi	r2,9
    493c:	14c01f2e 	bgeu	r2,r19,49bc <___svfprintf_internal_r+0xdd0>
    4940:	dc002a15 	stw	r16,168(sp)
    4944:	dc402b15 	stw	r17,172(sp)
    4948:	9821883a 	mov	r16,r19
    494c:	e023883a 	mov	r17,fp
    4950:	b025883a 	mov	r18,r22
    4954:	4827883a 	mov	r19,r9
    4958:	4039883a 	mov	fp,r8
    495c:	8009883a 	mov	r4,r16
    4960:	880b883a 	mov	r5,r17
    4964:	01800284 	movi	r6,10
    4968:	000f883a 	mov	r7,zero
    496c:	00102c80 	call	102c8 <__umoddi3>
    4970:	10800c04 	addi	r2,r2,48
    4974:	94bfffc4 	addi	r18,r18,-1
    4978:	8009883a 	mov	r4,r16
    497c:	880b883a 	mov	r5,r17
    4980:	01800284 	movi	r6,10
    4984:	000f883a 	mov	r7,zero
    4988:	90800005 	stb	r2,0(r18)
    498c:	000fd080 	call	fd08 <__udivdi3>
    4990:	1021883a 	mov	r16,r2
    4994:	10c4b03a 	or	r2,r2,r3
    4998:	1823883a 	mov	r17,r3
    499c:	103fef1e 	bne	r2,zero,495c <__alt_mem_Flash_flash_data+0xf400495c>
    49a0:	dc803115 	stw	r18,196(sp)
    49a4:	dc002a17 	ldw	r16,168(sp)
    49a8:	dc402b17 	ldw	r17,172(sp)
    49ac:	9813883a 	mov	r9,r19
    49b0:	e011883a 	mov	r8,fp
    49b4:	b4a5c83a 	sub	r18,r22,r18
    49b8:	003db306 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    49bc:	9cc00c04 	addi	r19,r19,48
    49c0:	db001dc4 	addi	r12,sp,119
    49c4:	dcc01dc5 	stb	r19,119(sp)
    49c8:	dc803d17 	ldw	r18,244(sp)
    49cc:	db003115 	stw	r12,196(sp)
    49d0:	003dad06 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    49d4:	00801944 	movi	r2,101
    49d8:	14008d0e 	bge	r2,r16,4c10 <___svfprintf_internal_r+0x1024>
    49dc:	d9003717 	ldw	r4,220(sp)
    49e0:	d9403817 	ldw	r5,224(sp)
    49e4:	000d883a 	mov	r6,zero
    49e8:	000f883a 	mov	r7,zero
    49ec:	d8c03e15 	stw	r3,248(sp)
    49f0:	da004015 	stw	r8,256(sp)
    49f4:	0011aec0 	call	11aec <__eqdf2>
    49f8:	d8c03e17 	ldw	r3,248(sp)
    49fc:	da004017 	ldw	r8,256(sp)
    4a00:	1000fd1e 	bne	r2,zero,4df8 <___svfprintf_internal_r+0x120c>
    4a04:	d8801f17 	ldw	r2,124(sp)
    4a08:	010000b4 	movhi	r4,2
    4a0c:	21023504 	addi	r4,r4,2260
    4a10:	18c00044 	addi	r3,r3,1
    4a14:	10800044 	addi	r2,r2,1
    4a18:	41000015 	stw	r4,0(r8)
    4a1c:	01000044 	movi	r4,1
    4a20:	41000115 	stw	r4,4(r8)
    4a24:	d8c02015 	stw	r3,128(sp)
    4a28:	d8801f15 	stw	r2,124(sp)
    4a2c:	010001c4 	movi	r4,7
    4a30:	20823316 	blt	r4,r2,5300 <___svfprintf_internal_r+0x1714>
    4a34:	42000204 	addi	r8,r8,8
    4a38:	d8802617 	ldw	r2,152(sp)
    4a3c:	dac03317 	ldw	r11,204(sp)
    4a40:	12c00216 	blt	r2,r11,4a4c <___svfprintf_internal_r+0xe60>
    4a44:	8880004c 	andi	r2,r17,1
    4a48:	103e3d26 	beq	r2,zero,4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4a4c:	db003917 	ldw	r12,228(sp)
    4a50:	d8801f17 	ldw	r2,124(sp)
    4a54:	dac03517 	ldw	r11,212(sp)
    4a58:	1b07883a 	add	r3,r3,r12
    4a5c:	10800044 	addi	r2,r2,1
    4a60:	42c00015 	stw	r11,0(r8)
    4a64:	43000115 	stw	r12,4(r8)
    4a68:	d8c02015 	stw	r3,128(sp)
    4a6c:	d8801f15 	stw	r2,124(sp)
    4a70:	010001c4 	movi	r4,7
    4a74:	20826f16 	blt	r4,r2,5434 <___svfprintf_internal_r+0x1848>
    4a78:	42000204 	addi	r8,r8,8
    4a7c:	db003317 	ldw	r12,204(sp)
    4a80:	643fffc4 	addi	r16,r12,-1
    4a84:	043e2e0e 	bge	zero,r16,4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4a88:	04800404 	movi	r18,16
    4a8c:	d8801f17 	ldw	r2,124(sp)
    4a90:	9400a00e 	bge	r18,r16,4d14 <___svfprintf_internal_r+0x1128>
    4a94:	014000b4 	movhi	r5,2
    4a98:	29423584 	addi	r5,r5,2262
    4a9c:	d9402b15 	stw	r5,172(sp)
    4aa0:	054001c4 	movi	r21,7
    4aa4:	dcc02f17 	ldw	r19,188(sp)
    4aa8:	00000306 	br	4ab8 <___svfprintf_internal_r+0xecc>
    4aac:	42000204 	addi	r8,r8,8
    4ab0:	843ffc04 	addi	r16,r16,-16
    4ab4:	94009a0e 	bge	r18,r16,4d20 <___svfprintf_internal_r+0x1134>
    4ab8:	18c00404 	addi	r3,r3,16
    4abc:	10800044 	addi	r2,r2,1
    4ac0:	45000015 	stw	r20,0(r8)
    4ac4:	44800115 	stw	r18,4(r8)
    4ac8:	d8c02015 	stw	r3,128(sp)
    4acc:	d8801f15 	stw	r2,124(sp)
    4ad0:	a8bff60e 	bge	r21,r2,4aac <__alt_mem_Flash_flash_data+0xf4004aac>
    4ad4:	9809883a 	mov	r4,r19
    4ad8:	b80b883a 	mov	r5,r23
    4adc:	b00d883a 	mov	r6,r22
    4ae0:	000cd480 	call	cd48 <__ssprint_r>
    4ae4:	103d091e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4ae8:	d8c02017 	ldw	r3,128(sp)
    4aec:	d8801f17 	ldw	r2,124(sp)
    4af0:	da000404 	addi	r8,sp,16
    4af4:	003fee06 	br	4ab0 <__alt_mem_Flash_flash_data+0xf4004ab0>
    4af8:	dac02e17 	ldw	r11,184(sp)
    4afc:	db002a17 	ldw	r12,168(sp)
    4b00:	5b2bc83a 	sub	r21,r11,r12
    4b04:	057dcd0e 	bge	zero,r21,423c <__alt_mem_Flash_flash_data+0xf400423c>
    4b08:	07000404 	movi	fp,16
    4b0c:	d8801f17 	ldw	r2,124(sp)
    4b10:	e5435d0e 	bge	fp,r21,5888 <___svfprintf_internal_r+0x1c9c>
    4b14:	014000b4 	movhi	r5,2
    4b18:	a809883a 	mov	r4,r21
    4b1c:	29423584 	addi	r5,r5,2262
    4b20:	dc002c15 	stw	r16,176(sp)
    4b24:	902b883a 	mov	r21,r18
    4b28:	d9402b15 	stw	r5,172(sp)
    4b2c:	8825883a 	mov	r18,r17
    4b30:	04c001c4 	movi	r19,7
    4b34:	dc002f17 	ldw	r16,188(sp)
    4b38:	2023883a 	mov	r17,r4
    4b3c:	00000306 	br	4b4c <___svfprintf_internal_r+0xf60>
    4b40:	8c7ffc04 	addi	r17,r17,-16
    4b44:	42000204 	addi	r8,r8,8
    4b48:	e440110e 	bge	fp,r17,4b90 <___svfprintf_internal_r+0xfa4>
    4b4c:	18c00404 	addi	r3,r3,16
    4b50:	10800044 	addi	r2,r2,1
    4b54:	45000015 	stw	r20,0(r8)
    4b58:	47000115 	stw	fp,4(r8)
    4b5c:	d8c02015 	stw	r3,128(sp)
    4b60:	d8801f15 	stw	r2,124(sp)
    4b64:	98bff60e 	bge	r19,r2,4b40 <__alt_mem_Flash_flash_data+0xf4004b40>
    4b68:	8009883a 	mov	r4,r16
    4b6c:	b80b883a 	mov	r5,r23
    4b70:	b00d883a 	mov	r6,r22
    4b74:	000cd480 	call	cd48 <__ssprint_r>
    4b78:	103ce41e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4b7c:	8c7ffc04 	addi	r17,r17,-16
    4b80:	d8c02017 	ldw	r3,128(sp)
    4b84:	d8801f17 	ldw	r2,124(sp)
    4b88:	da000404 	addi	r8,sp,16
    4b8c:	e47fef16 	blt	fp,r17,4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    4b90:	dc002c17 	ldw	r16,176(sp)
    4b94:	8809883a 	mov	r4,r17
    4b98:	9023883a 	mov	r17,r18
    4b9c:	a825883a 	mov	r18,r21
    4ba0:	202b883a 	mov	r21,r4
    4ba4:	dac02b17 	ldw	r11,172(sp)
    4ba8:	1d47883a 	add	r3,r3,r21
    4bac:	10800044 	addi	r2,r2,1
    4bb0:	42c00015 	stw	r11,0(r8)
    4bb4:	45400115 	stw	r21,4(r8)
    4bb8:	d8c02015 	stw	r3,128(sp)
    4bbc:	d8801f15 	stw	r2,124(sp)
    4bc0:	010001c4 	movi	r4,7
    4bc4:	20818016 	blt	r4,r2,51c8 <___svfprintf_internal_r+0x15dc>
    4bc8:	42000204 	addi	r8,r8,8
    4bcc:	003d9b06 	br	423c <__alt_mem_Flash_flash_data+0xf400423c>
    4bd0:	d9403b17 	ldw	r5,236(sp)
    4bd4:	b007883a 	mov	r3,r22
    4bd8:	988003cc 	andi	r2,r19,15
    4bdc:	e008973a 	slli	r4,fp,28
    4be0:	2885883a 	add	r2,r5,r2
    4be4:	9826d13a 	srli	r19,r19,4
    4be8:	10800003 	ldbu	r2,0(r2)
    4bec:	e038d13a 	srli	fp,fp,4
    4bf0:	18ffffc4 	addi	r3,r3,-1
    4bf4:	24e6b03a 	or	r19,r4,r19
    4bf8:	18800005 	stb	r2,0(r3)
    4bfc:	9f04b03a 	or	r2,r19,fp
    4c00:	103ff51e 	bne	r2,zero,4bd8 <__alt_mem_Flash_flash_data+0xf4004bd8>
    4c04:	d8c03115 	stw	r3,196(sp)
    4c08:	b0e5c83a 	sub	r18,r22,r3
    4c0c:	003d1e06 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    4c10:	db003317 	ldw	r12,204(sp)
    4c14:	00800044 	movi	r2,1
    4c18:	18c00044 	addi	r3,r3,1
    4c1c:	13014b0e 	bge	r2,r12,514c <___svfprintf_internal_r+0x1560>
    4c20:	dc001f17 	ldw	r16,124(sp)
    4c24:	dac03117 	ldw	r11,196(sp)
    4c28:	00800044 	movi	r2,1
    4c2c:	84000044 	addi	r16,r16,1
    4c30:	40800115 	stw	r2,4(r8)
    4c34:	42c00015 	stw	r11,0(r8)
    4c38:	d8c02015 	stw	r3,128(sp)
    4c3c:	dc001f15 	stw	r16,124(sp)
    4c40:	008001c4 	movi	r2,7
    4c44:	14014e16 	blt	r2,r16,5180 <___svfprintf_internal_r+0x1594>
    4c48:	42000204 	addi	r8,r8,8
    4c4c:	db003917 	ldw	r12,228(sp)
    4c50:	dac03517 	ldw	r11,212(sp)
    4c54:	84000044 	addi	r16,r16,1
    4c58:	1b07883a 	add	r3,r3,r12
    4c5c:	42c00015 	stw	r11,0(r8)
    4c60:	43000115 	stw	r12,4(r8)
    4c64:	d8c02015 	stw	r3,128(sp)
    4c68:	dc001f15 	stw	r16,124(sp)
    4c6c:	008001c4 	movi	r2,7
    4c70:	14014c16 	blt	r2,r16,51a4 <___svfprintf_internal_r+0x15b8>
    4c74:	44800204 	addi	r18,r8,8
    4c78:	d9003717 	ldw	r4,220(sp)
    4c7c:	d9403817 	ldw	r5,224(sp)
    4c80:	000d883a 	mov	r6,zero
    4c84:	000f883a 	mov	r7,zero
    4c88:	d8c03e15 	stw	r3,248(sp)
    4c8c:	0011aec0 	call	11aec <__eqdf2>
    4c90:	d8c03e17 	ldw	r3,248(sp)
    4c94:	db003317 	ldw	r12,204(sp)
    4c98:	10009526 	beq	r2,zero,4ef0 <___svfprintf_internal_r+0x1304>
    4c9c:	dac03117 	ldw	r11,196(sp)
    4ca0:	60bfffc4 	addi	r2,r12,-1
    4ca4:	1887883a 	add	r3,r3,r2
    4ca8:	59000044 	addi	r4,r11,1
    4cac:	84000044 	addi	r16,r16,1
    4cb0:	90800115 	stw	r2,4(r18)
    4cb4:	91000015 	stw	r4,0(r18)
    4cb8:	d8c02015 	stw	r3,128(sp)
    4cbc:	dc001f15 	stw	r16,124(sp)
    4cc0:	008001c4 	movi	r2,7
    4cc4:	1400b316 	blt	r2,r16,4f94 <___svfprintf_internal_r+0x13a8>
    4cc8:	94800204 	addi	r18,r18,8
    4ccc:	dac03a17 	ldw	r11,232(sp)
    4cd0:	dd4022c4 	addi	r21,sp,139
    4cd4:	84000044 	addi	r16,r16,1
    4cd8:	1ac7883a 	add	r3,r3,r11
    4cdc:	95400015 	stw	r21,0(r18)
    4ce0:	92c00115 	stw	r11,4(r18)
    4ce4:	d8c02015 	stw	r3,128(sp)
    4ce8:	dc001f15 	stw	r16,124(sp)
    4cec:	008001c4 	movi	r2,7
    4cf0:	14001416 	blt	r2,r16,4d44 <___svfprintf_internal_r+0x1158>
    4cf4:	92000204 	addi	r8,r18,8
    4cf8:	003d9106 	br	4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4cfc:	d9002f17 	ldw	r4,188(sp)
    4d00:	b80b883a 	mov	r5,r23
    4d04:	b00d883a 	mov	r6,r22
    4d08:	000cd480 	call	cd48 <__ssprint_r>
    4d0c:	103dc826 	beq	r2,zero,4430 <__alt_mem_Flash_flash_data+0xf4004430>
    4d10:	003c7e06 	br	3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4d14:	010000b4 	movhi	r4,2
    4d18:	21023584 	addi	r4,r4,2262
    4d1c:	d9002b15 	stw	r4,172(sp)
    4d20:	dac02b17 	ldw	r11,172(sp)
    4d24:	1c07883a 	add	r3,r3,r16
    4d28:	44000115 	stw	r16,4(r8)
    4d2c:	42c00015 	stw	r11,0(r8)
    4d30:	10800044 	addi	r2,r2,1
    4d34:	d8c02015 	stw	r3,128(sp)
    4d38:	d8801f15 	stw	r2,124(sp)
    4d3c:	010001c4 	movi	r4,7
    4d40:	20bd7e0e 	bge	r4,r2,433c <__alt_mem_Flash_flash_data+0xf400433c>
    4d44:	d9002f17 	ldw	r4,188(sp)
    4d48:	b80b883a 	mov	r5,r23
    4d4c:	b00d883a 	mov	r6,r22
    4d50:	000cd480 	call	cd48 <__ssprint_r>
    4d54:	103c6d1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4d58:	d8c02017 	ldw	r3,128(sp)
    4d5c:	da000404 	addi	r8,sp,16
    4d60:	003d7706 	br	4340 <__alt_mem_Flash_flash_data+0xf4004340>
    4d64:	10803fcc 	andi	r2,r2,255
    4d68:	1000201e 	bne	r2,zero,4dec <___svfprintf_internal_r+0x1200>
    4d6c:	8880004c 	andi	r2,r17,1
    4d70:	10001e26 	beq	r2,zero,4dec <___svfprintf_internal_r+0x1200>
    4d74:	00800c04 	movi	r2,48
    4d78:	d8c01dc4 	addi	r3,sp,119
    4d7c:	d8801dc5 	stb	r2,119(sp)
    4d80:	dc803d17 	ldw	r18,244(sp)
    4d84:	d8c03115 	stw	r3,196(sp)
    4d88:	003cbf06 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    4d8c:	d9002f17 	ldw	r4,188(sp)
    4d90:	b80b883a 	mov	r5,r23
    4d94:	b00d883a 	mov	r6,r22
    4d98:	000cd480 	call	cd48 <__ssprint_r>
    4d9c:	103c5b1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4da0:	d8c02017 	ldw	r3,128(sp)
    4da4:	da000404 	addi	r8,sp,16
    4da8:	003d5806 	br	430c <__alt_mem_Flash_flash_data+0xf400430c>
    4dac:	d9002f17 	ldw	r4,188(sp)
    4db0:	b80b883a 	mov	r5,r23
    4db4:	b00d883a 	mov	r6,r22
    4db8:	000cd480 	call	cd48 <__ssprint_r>
    4dbc:	103c531e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4dc0:	d8c02017 	ldw	r3,128(sp)
    4dc4:	da000404 	addi	r8,sp,16
    4dc8:	003d1906 	br	4230 <__alt_mem_Flash_flash_data+0xf4004230>
    4dcc:	d9002f17 	ldw	r4,188(sp)
    4dd0:	b80b883a 	mov	r5,r23
    4dd4:	b00d883a 	mov	r6,r22
    4dd8:	000cd480 	call	cd48 <__ssprint_r>
    4ddc:	103c4b1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4de0:	d8c02017 	ldw	r3,128(sp)
    4de4:	da000404 	addi	r8,sp,16
    4de8:	003d0306 	br	41f8 <__alt_mem_Flash_flash_data+0xf40041f8>
    4dec:	0025883a 	mov	r18,zero
    4df0:	dd803115 	stw	r22,196(sp)
    4df4:	003ca406 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    4df8:	dc002617 	ldw	r16,152(sp)
    4dfc:	0401480e 	bge	zero,r16,5320 <___svfprintf_internal_r+0x1734>
    4e00:	db003117 	ldw	r12,196(sp)
    4e04:	dac03317 	ldw	r11,204(sp)
    4e08:	62e1883a 	add	r16,r12,r11
    4e0c:	db003417 	ldw	r12,208(sp)
    4e10:	5825883a 	mov	r18,r11
    4e14:	62c0010e 	bge	r12,r11,4e1c <___svfprintf_internal_r+0x1230>
    4e18:	6025883a 	mov	r18,r12
    4e1c:	04800b0e 	bge	zero,r18,4e4c <___svfprintf_internal_r+0x1260>
    4e20:	d8801f17 	ldw	r2,124(sp)
    4e24:	dac03117 	ldw	r11,196(sp)
    4e28:	1c87883a 	add	r3,r3,r18
    4e2c:	10800044 	addi	r2,r2,1
    4e30:	42c00015 	stw	r11,0(r8)
    4e34:	44800115 	stw	r18,4(r8)
    4e38:	d8c02015 	stw	r3,128(sp)
    4e3c:	d8801f15 	stw	r2,124(sp)
    4e40:	010001c4 	movi	r4,7
    4e44:	20823f16 	blt	r4,r2,5744 <___svfprintf_internal_r+0x1b58>
    4e48:	42000204 	addi	r8,r8,8
    4e4c:	90023b16 	blt	r18,zero,573c <___svfprintf_internal_r+0x1b50>
    4e50:	db003417 	ldw	r12,208(sp)
    4e54:	64a5c83a 	sub	r18,r12,r18
    4e58:	0480780e 	bge	zero,r18,503c <___svfprintf_internal_r+0x1450>
    4e5c:	05400404 	movi	r21,16
    4e60:	d8801f17 	ldw	r2,124(sp)
    4e64:	ac81140e 	bge	r21,r18,52b8 <___svfprintf_internal_r+0x16cc>
    4e68:	014000b4 	movhi	r5,2
    4e6c:	29423584 	addi	r5,r5,2262
    4e70:	d9402b15 	stw	r5,172(sp)
    4e74:	070001c4 	movi	fp,7
    4e78:	dcc02f17 	ldw	r19,188(sp)
    4e7c:	00000306 	br	4e8c <___svfprintf_internal_r+0x12a0>
    4e80:	42000204 	addi	r8,r8,8
    4e84:	94bffc04 	addi	r18,r18,-16
    4e88:	ac810e0e 	bge	r21,r18,52c4 <___svfprintf_internal_r+0x16d8>
    4e8c:	18c00404 	addi	r3,r3,16
    4e90:	10800044 	addi	r2,r2,1
    4e94:	45000015 	stw	r20,0(r8)
    4e98:	45400115 	stw	r21,4(r8)
    4e9c:	d8c02015 	stw	r3,128(sp)
    4ea0:	d8801f15 	stw	r2,124(sp)
    4ea4:	e0bff60e 	bge	fp,r2,4e80 <__alt_mem_Flash_flash_data+0xf4004e80>
    4ea8:	9809883a 	mov	r4,r19
    4eac:	b80b883a 	mov	r5,r23
    4eb0:	b00d883a 	mov	r6,r22
    4eb4:	000cd480 	call	cd48 <__ssprint_r>
    4eb8:	103c141e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4ebc:	d8c02017 	ldw	r3,128(sp)
    4ec0:	d8801f17 	ldw	r2,124(sp)
    4ec4:	da000404 	addi	r8,sp,16
    4ec8:	003fee06 	br	4e84 <__alt_mem_Flash_flash_data+0xf4004e84>
    4ecc:	d9002f17 	ldw	r4,188(sp)
    4ed0:	b80b883a 	mov	r5,r23
    4ed4:	b00d883a 	mov	r6,r22
    4ed8:	000cd480 	call	cd48 <__ssprint_r>
    4edc:	103c0b1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4ee0:	d8c02017 	ldw	r3,128(sp)
    4ee4:	d8802787 	ldb	r2,158(sp)
    4ee8:	da000404 	addi	r8,sp,16
    4eec:	003cb506 	br	41c4 <__alt_mem_Flash_flash_data+0xf40041c4>
    4ef0:	657fffc4 	addi	r21,r12,-1
    4ef4:	057f750e 	bge	zero,r21,4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4ef8:	07000404 	movi	fp,16
    4efc:	e542ed0e 	bge	fp,r21,5ab4 <___svfprintf_internal_r+0x1ec8>
    4f00:	010000b4 	movhi	r4,2
    4f04:	21023584 	addi	r4,r4,2262
    4f08:	d9002b15 	stw	r4,172(sp)
    4f0c:	01c001c4 	movi	r7,7
    4f10:	dcc02f17 	ldw	r19,188(sp)
    4f14:	00000306 	br	4f24 <___svfprintf_internal_r+0x1338>
    4f18:	ad7ffc04 	addi	r21,r21,-16
    4f1c:	94800204 	addi	r18,r18,8
    4f20:	e540130e 	bge	fp,r21,4f70 <___svfprintf_internal_r+0x1384>
    4f24:	18c00404 	addi	r3,r3,16
    4f28:	84000044 	addi	r16,r16,1
    4f2c:	95000015 	stw	r20,0(r18)
    4f30:	97000115 	stw	fp,4(r18)
    4f34:	d8c02015 	stw	r3,128(sp)
    4f38:	dc001f15 	stw	r16,124(sp)
    4f3c:	3c3ff60e 	bge	r7,r16,4f18 <__alt_mem_Flash_flash_data+0xf4004f18>
    4f40:	9809883a 	mov	r4,r19
    4f44:	b80b883a 	mov	r5,r23
    4f48:	b00d883a 	mov	r6,r22
    4f4c:	d9c03e15 	stw	r7,248(sp)
    4f50:	000cd480 	call	cd48 <__ssprint_r>
    4f54:	d9c03e17 	ldw	r7,248(sp)
    4f58:	103bec1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4f5c:	ad7ffc04 	addi	r21,r21,-16
    4f60:	d8c02017 	ldw	r3,128(sp)
    4f64:	dc001f17 	ldw	r16,124(sp)
    4f68:	dc800404 	addi	r18,sp,16
    4f6c:	e57fed16 	blt	fp,r21,4f24 <__alt_mem_Flash_flash_data+0xf4004f24>
    4f70:	dac02b17 	ldw	r11,172(sp)
    4f74:	1d47883a 	add	r3,r3,r21
    4f78:	84000044 	addi	r16,r16,1
    4f7c:	92c00015 	stw	r11,0(r18)
    4f80:	95400115 	stw	r21,4(r18)
    4f84:	d8c02015 	stw	r3,128(sp)
    4f88:	dc001f15 	stw	r16,124(sp)
    4f8c:	008001c4 	movi	r2,7
    4f90:	143f4d0e 	bge	r2,r16,4cc8 <__alt_mem_Flash_flash_data+0xf4004cc8>
    4f94:	d9002f17 	ldw	r4,188(sp)
    4f98:	b80b883a 	mov	r5,r23
    4f9c:	b00d883a 	mov	r6,r22
    4fa0:	000cd480 	call	cd48 <__ssprint_r>
    4fa4:	103bd91e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4fa8:	d8c02017 	ldw	r3,128(sp)
    4fac:	dc001f17 	ldw	r16,124(sp)
    4fb0:	dc800404 	addi	r18,sp,16
    4fb4:	003f4506 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    4fb8:	00800084 	movi	r2,2
    4fbc:	9f06b03a 	or	r3,r19,fp
    4fc0:	003d5706 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    4fc4:	1cc00017 	ldw	r19,0(r3)
    4fc8:	dac02d17 	ldw	r11,180(sp)
    4fcc:	9839d7fa 	srai	fp,r19,31
    4fd0:	5ac00104 	addi	r11,r11,4
    4fd4:	dac02d15 	stw	r11,180(sp)
    4fd8:	e005883a 	mov	r2,fp
    4fdc:	003c0306 	br	3fec <__alt_mem_Flash_flash_data+0xf4003fec>
    4fe0:	dac02d17 	ldw	r11,180(sp)
    4fe4:	0039883a 	mov	fp,zero
    4fe8:	0005883a 	mov	r2,zero
    4fec:	5cc00017 	ldw	r19,0(r11)
    4ff0:	5ac00104 	addi	r11,r11,4
    4ff4:	dac02d15 	stw	r11,180(sp)
    4ff8:	9807883a 	mov	r3,r19
    4ffc:	003d4806 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    5000:	db002d17 	ldw	r12,180(sp)
    5004:	14c00017 	ldw	r19,0(r2)
    5008:	0039883a 	mov	fp,zero
    500c:	63000104 	addi	r12,r12,4
    5010:	db002d15 	stw	r12,180(sp)
    5014:	00800044 	movi	r2,1
    5018:	9807883a 	mov	r3,r19
    501c:	003d4006 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    5020:	d9002f17 	ldw	r4,188(sp)
    5024:	b80b883a 	mov	r5,r23
    5028:	b00d883a 	mov	r6,r22
    502c:	000cd480 	call	cd48 <__ssprint_r>
    5030:	103bb61e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5034:	d8c02017 	ldw	r3,128(sp)
    5038:	da000404 	addi	r8,sp,16
    503c:	db003117 	ldw	r12,196(sp)
    5040:	dac03417 	ldw	r11,208(sp)
    5044:	d8802617 	ldw	r2,152(sp)
    5048:	62e5883a 	add	r18,r12,r11
    504c:	db003317 	ldw	r12,204(sp)
    5050:	13000216 	blt	r2,r12,505c <___svfprintf_internal_r+0x1470>
    5054:	8900004c 	andi	r4,r17,1
    5058:	20000c26 	beq	r4,zero,508c <___svfprintf_internal_r+0x14a0>
    505c:	dac03917 	ldw	r11,228(sp)
    5060:	d9001f17 	ldw	r4,124(sp)
    5064:	db003517 	ldw	r12,212(sp)
    5068:	1ac7883a 	add	r3,r3,r11
    506c:	21000044 	addi	r4,r4,1
    5070:	43000015 	stw	r12,0(r8)
    5074:	42c00115 	stw	r11,4(r8)
    5078:	d8c02015 	stw	r3,128(sp)
    507c:	d9001f15 	stw	r4,124(sp)
    5080:	014001c4 	movi	r5,7
    5084:	2901b716 	blt	r5,r4,5764 <___svfprintf_internal_r+0x1b78>
    5088:	42000204 	addi	r8,r8,8
    508c:	dac03317 	ldw	r11,204(sp)
    5090:	8489c83a 	sub	r4,r16,r18
    5094:	5885c83a 	sub	r2,r11,r2
    5098:	1021883a 	mov	r16,r2
    509c:	2080010e 	bge	r4,r2,50a4 <___svfprintf_internal_r+0x14b8>
    50a0:	2021883a 	mov	r16,r4
    50a4:	04000a0e 	bge	zero,r16,50d0 <___svfprintf_internal_r+0x14e4>
    50a8:	d9001f17 	ldw	r4,124(sp)
    50ac:	1c07883a 	add	r3,r3,r16
    50b0:	44800015 	stw	r18,0(r8)
    50b4:	21000044 	addi	r4,r4,1
    50b8:	44000115 	stw	r16,4(r8)
    50bc:	d8c02015 	stw	r3,128(sp)
    50c0:	d9001f15 	stw	r4,124(sp)
    50c4:	014001c4 	movi	r5,7
    50c8:	2901bf16 	blt	r5,r4,57c8 <___svfprintf_internal_r+0x1bdc>
    50cc:	42000204 	addi	r8,r8,8
    50d0:	8001bb16 	blt	r16,zero,57c0 <___svfprintf_internal_r+0x1bd4>
    50d4:	1421c83a 	sub	r16,r2,r16
    50d8:	043c990e 	bge	zero,r16,4340 <__alt_mem_Flash_flash_data+0xf4004340>
    50dc:	04800404 	movi	r18,16
    50e0:	d8801f17 	ldw	r2,124(sp)
    50e4:	943f0b0e 	bge	r18,r16,4d14 <__alt_mem_Flash_flash_data+0xf4004d14>
    50e8:	014000b4 	movhi	r5,2
    50ec:	29423584 	addi	r5,r5,2262
    50f0:	d9402b15 	stw	r5,172(sp)
    50f4:	054001c4 	movi	r21,7
    50f8:	dcc02f17 	ldw	r19,188(sp)
    50fc:	00000306 	br	510c <___svfprintf_internal_r+0x1520>
    5100:	42000204 	addi	r8,r8,8
    5104:	843ffc04 	addi	r16,r16,-16
    5108:	943f050e 	bge	r18,r16,4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    510c:	18c00404 	addi	r3,r3,16
    5110:	10800044 	addi	r2,r2,1
    5114:	45000015 	stw	r20,0(r8)
    5118:	44800115 	stw	r18,4(r8)
    511c:	d8c02015 	stw	r3,128(sp)
    5120:	d8801f15 	stw	r2,124(sp)
    5124:	a8bff60e 	bge	r21,r2,5100 <__alt_mem_Flash_flash_data+0xf4005100>
    5128:	9809883a 	mov	r4,r19
    512c:	b80b883a 	mov	r5,r23
    5130:	b00d883a 	mov	r6,r22
    5134:	000cd480 	call	cd48 <__ssprint_r>
    5138:	103b741e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    513c:	d8c02017 	ldw	r3,128(sp)
    5140:	d8801f17 	ldw	r2,124(sp)
    5144:	da000404 	addi	r8,sp,16
    5148:	003fee06 	br	5104 <__alt_mem_Flash_flash_data+0xf4005104>
    514c:	8888703a 	and	r4,r17,r2
    5150:	203eb31e 	bne	r4,zero,4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    5154:	dc001f17 	ldw	r16,124(sp)
    5158:	db003117 	ldw	r12,196(sp)
    515c:	40800115 	stw	r2,4(r8)
    5160:	84000044 	addi	r16,r16,1
    5164:	43000015 	stw	r12,0(r8)
    5168:	d8c02015 	stw	r3,128(sp)
    516c:	dc001f15 	stw	r16,124(sp)
    5170:	008001c4 	movi	r2,7
    5174:	143f8716 	blt	r2,r16,4f94 <__alt_mem_Flash_flash_data+0xf4004f94>
    5178:	44800204 	addi	r18,r8,8
    517c:	003ed306 	br	4ccc <__alt_mem_Flash_flash_data+0xf4004ccc>
    5180:	d9002f17 	ldw	r4,188(sp)
    5184:	b80b883a 	mov	r5,r23
    5188:	b00d883a 	mov	r6,r22
    518c:	000cd480 	call	cd48 <__ssprint_r>
    5190:	103b5e1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5194:	d8c02017 	ldw	r3,128(sp)
    5198:	dc001f17 	ldw	r16,124(sp)
    519c:	da000404 	addi	r8,sp,16
    51a0:	003eaa06 	br	4c4c <__alt_mem_Flash_flash_data+0xf4004c4c>
    51a4:	d9002f17 	ldw	r4,188(sp)
    51a8:	b80b883a 	mov	r5,r23
    51ac:	b00d883a 	mov	r6,r22
    51b0:	000cd480 	call	cd48 <__ssprint_r>
    51b4:	103b551e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    51b8:	d8c02017 	ldw	r3,128(sp)
    51bc:	dc001f17 	ldw	r16,124(sp)
    51c0:	dc800404 	addi	r18,sp,16
    51c4:	003eac06 	br	4c78 <__alt_mem_Flash_flash_data+0xf4004c78>
    51c8:	d9002f17 	ldw	r4,188(sp)
    51cc:	b80b883a 	mov	r5,r23
    51d0:	b00d883a 	mov	r6,r22
    51d4:	000cd480 	call	cd48 <__ssprint_r>
    51d8:	103b4c1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    51dc:	d8c02017 	ldw	r3,128(sp)
    51e0:	da000404 	addi	r8,sp,16
    51e4:	003c1506 	br	423c <__alt_mem_Flash_flash_data+0xf400423c>
    51e8:	da004015 	stw	r8,256(sp)
    51ec:	da403f15 	stw	r9,252(sp)
    51f0:	000caa00 	call	caa0 <__fpclassifyd>
    51f4:	da004017 	ldw	r8,256(sp)
    51f8:	da403f17 	ldw	r9,252(sp)
    51fc:	1000951e 	bne	r2,zero,5454 <___svfprintf_internal_r+0x1868>
    5200:	008011c4 	movi	r2,71
    5204:	1400fb16 	blt	r2,r16,55f4 <___svfprintf_internal_r+0x1a08>
    5208:	030000b4 	movhi	r12,2
    520c:	63022704 	addi	r12,r12,2204
    5210:	db003115 	stw	r12,196(sp)
    5214:	00c000c4 	movi	r3,3
    5218:	00bfdfc4 	movi	r2,-129
    521c:	d8c02a15 	stw	r3,168(sp)
    5220:	88a2703a 	and	r17,r17,r2
    5224:	dd402783 	ldbu	r21,158(sp)
    5228:	dcc02d15 	stw	r19,180(sp)
    522c:	1825883a 	mov	r18,r3
    5230:	d8003215 	stw	zero,200(sp)
    5234:	d8003415 	stw	zero,208(sp)
    5238:	003b9806 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    523c:	1c000007 	ldb	r16,0(r3)
    5240:	1805883a 	mov	r2,r3
    5244:	003abf06 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    5248:	00800084 	movi	r2,2
    524c:	003cb406 	br	4520 <__alt_mem_Flash_flash_data+0xf4004520>
    5250:	88c0100c 	andi	r3,r17,64
    5254:	1800f626 	beq	r3,zero,5630 <___svfprintf_internal_r+0x1a44>
    5258:	dac02d17 	ldw	r11,180(sp)
    525c:	14c0000b 	ldhu	r19,0(r2)
    5260:	0039883a 	mov	fp,zero
    5264:	5ac00104 	addi	r11,r11,4
    5268:	dac02d15 	stw	r11,180(sp)
    526c:	003cbd06 	br	4564 <__alt_mem_Flash_flash_data+0xf4004564>
    5270:	8880040c 	andi	r2,r17,16
    5274:	1000091e 	bne	r2,zero,529c <___svfprintf_internal_r+0x16b0>
    5278:	8c40100c 	andi	r17,r17,64
    527c:	88000726 	beq	r17,zero,529c <___svfprintf_internal_r+0x16b0>
    5280:	db002d17 	ldw	r12,180(sp)
    5284:	dac03017 	ldw	r11,192(sp)
    5288:	60800017 	ldw	r2,0(r12)
    528c:	63000104 	addi	r12,r12,4
    5290:	db002d15 	stw	r12,180(sp)
    5294:	12c0000d 	sth	r11,0(r2)
    5298:	003a8006 	br	3c9c <__alt_mem_Flash_flash_data+0xf4003c9c>
    529c:	db002d17 	ldw	r12,180(sp)
    52a0:	dac03017 	ldw	r11,192(sp)
    52a4:	60800017 	ldw	r2,0(r12)
    52a8:	63000104 	addi	r12,r12,4
    52ac:	db002d15 	stw	r12,180(sp)
    52b0:	12c00015 	stw	r11,0(r2)
    52b4:	003a7906 	br	3c9c <__alt_mem_Flash_flash_data+0xf4003c9c>
    52b8:	010000b4 	movhi	r4,2
    52bc:	21023584 	addi	r4,r4,2262
    52c0:	d9002b15 	stw	r4,172(sp)
    52c4:	dac02b17 	ldw	r11,172(sp)
    52c8:	1c87883a 	add	r3,r3,r18
    52cc:	10800044 	addi	r2,r2,1
    52d0:	42c00015 	stw	r11,0(r8)
    52d4:	44800115 	stw	r18,4(r8)
    52d8:	d8c02015 	stw	r3,128(sp)
    52dc:	d8801f15 	stw	r2,124(sp)
    52e0:	010001c4 	movi	r4,7
    52e4:	20bf4e16 	blt	r4,r2,5020 <__alt_mem_Flash_flash_data+0xf4005020>
    52e8:	42000204 	addi	r8,r8,8
    52ec:	003f5306 	br	503c <__alt_mem_Flash_flash_data+0xf400503c>
    52f0:	010000b4 	movhi	r4,2
    52f4:	21023584 	addi	r4,r4,2262
    52f8:	d9002b15 	stw	r4,172(sp)
    52fc:	003bf906 	br	42e4 <__alt_mem_Flash_flash_data+0xf40042e4>
    5300:	d9002f17 	ldw	r4,188(sp)
    5304:	b80b883a 	mov	r5,r23
    5308:	b00d883a 	mov	r6,r22
    530c:	000cd480 	call	cd48 <__ssprint_r>
    5310:	103afe1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5314:	d8c02017 	ldw	r3,128(sp)
    5318:	da000404 	addi	r8,sp,16
    531c:	003dc606 	br	4a38 <__alt_mem_Flash_flash_data+0xf4004a38>
    5320:	d8801f17 	ldw	r2,124(sp)
    5324:	030000b4 	movhi	r12,2
    5328:	01000044 	movi	r4,1
    532c:	18c00044 	addi	r3,r3,1
    5330:	10800044 	addi	r2,r2,1
    5334:	63023504 	addi	r12,r12,2260
    5338:	41000115 	stw	r4,4(r8)
    533c:	43000015 	stw	r12,0(r8)
    5340:	d8c02015 	stw	r3,128(sp)
    5344:	d8801f15 	stw	r2,124(sp)
    5348:	010001c4 	movi	r4,7
    534c:	2080ad16 	blt	r4,r2,5604 <___svfprintf_internal_r+0x1a18>
    5350:	42000204 	addi	r8,r8,8
    5354:	8000041e 	bne	r16,zero,5368 <___svfprintf_internal_r+0x177c>
    5358:	dac03317 	ldw	r11,204(sp)
    535c:	5800021e 	bne	r11,zero,5368 <___svfprintf_internal_r+0x177c>
    5360:	8880004c 	andi	r2,r17,1
    5364:	103bf626 	beq	r2,zero,4340 <__alt_mem_Flash_flash_data+0xf4004340>
    5368:	db003917 	ldw	r12,228(sp)
    536c:	d8801f17 	ldw	r2,124(sp)
    5370:	dac03517 	ldw	r11,212(sp)
    5374:	1b07883a 	add	r3,r3,r12
    5378:	10800044 	addi	r2,r2,1
    537c:	42c00015 	stw	r11,0(r8)
    5380:	43000115 	stw	r12,4(r8)
    5384:	d8c02015 	stw	r3,128(sp)
    5388:	d8801f15 	stw	r2,124(sp)
    538c:	010001c4 	movi	r4,7
    5390:	20818616 	blt	r4,r2,59ac <___svfprintf_internal_r+0x1dc0>
    5394:	42000204 	addi	r8,r8,8
    5398:	0421c83a 	sub	r16,zero,r16
    539c:	0400bc0e 	bge	zero,r16,5690 <___svfprintf_internal_r+0x1aa4>
    53a0:	04800404 	movi	r18,16
    53a4:	9400f80e 	bge	r18,r16,5788 <___svfprintf_internal_r+0x1b9c>
    53a8:	010000b4 	movhi	r4,2
    53ac:	21023584 	addi	r4,r4,2262
    53b0:	d9002b15 	stw	r4,172(sp)
    53b4:	054001c4 	movi	r21,7
    53b8:	dcc02f17 	ldw	r19,188(sp)
    53bc:	00000306 	br	53cc <___svfprintf_internal_r+0x17e0>
    53c0:	42000204 	addi	r8,r8,8
    53c4:	843ffc04 	addi	r16,r16,-16
    53c8:	9400f20e 	bge	r18,r16,5794 <___svfprintf_internal_r+0x1ba8>
    53cc:	18c00404 	addi	r3,r3,16
    53d0:	10800044 	addi	r2,r2,1
    53d4:	45000015 	stw	r20,0(r8)
    53d8:	44800115 	stw	r18,4(r8)
    53dc:	d8c02015 	stw	r3,128(sp)
    53e0:	d8801f15 	stw	r2,124(sp)
    53e4:	a8bff60e 	bge	r21,r2,53c0 <__alt_mem_Flash_flash_data+0xf40053c0>
    53e8:	9809883a 	mov	r4,r19
    53ec:	b80b883a 	mov	r5,r23
    53f0:	b00d883a 	mov	r6,r22
    53f4:	000cd480 	call	cd48 <__ssprint_r>
    53f8:	103ac41e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    53fc:	d8c02017 	ldw	r3,128(sp)
    5400:	d8801f17 	ldw	r2,124(sp)
    5404:	da000404 	addi	r8,sp,16
    5408:	003fee06 	br	53c4 <__alt_mem_Flash_flash_data+0xf40053c4>
    540c:	db002e17 	ldw	r12,184(sp)
    5410:	1805883a 	mov	r2,r3
    5414:	dac02d15 	stw	r11,180(sp)
    5418:	0319c83a 	sub	r12,zero,r12
    541c:	db002e15 	stw	r12,184(sp)
    5420:	003acf06 	br	3f60 <__alt_mem_Flash_flash_data+0xf4003f60>
    5424:	18800044 	addi	r2,r3,1
    5428:	8c400814 	ori	r17,r17,32
    542c:	1c000047 	ldb	r16,1(r3)
    5430:	003a4406 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    5434:	d9002f17 	ldw	r4,188(sp)
    5438:	b80b883a 	mov	r5,r23
    543c:	b00d883a 	mov	r6,r22
    5440:	000cd480 	call	cd48 <__ssprint_r>
    5444:	103ab11e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5448:	d8c02017 	ldw	r3,128(sp)
    544c:	da000404 	addi	r8,sp,16
    5450:	003d8a06 	br	4a7c <__alt_mem_Flash_flash_data+0xf4004a7c>
    5454:	057ff7c4 	movi	r21,-33
    5458:	00bfffc4 	movi	r2,-1
    545c:	856a703a 	and	r21,r16,r21
    5460:	48807126 	beq	r9,r2,5628 <___svfprintf_internal_r+0x1a3c>
    5464:	008011c4 	movi	r2,71
    5468:	a8814d26 	beq	r21,r2,59a0 <___svfprintf_internal_r+0x1db4>
    546c:	db003817 	ldw	r12,224(sp)
    5470:	8ac04014 	ori	r11,r17,256
    5474:	dac02d15 	stw	r11,180(sp)
    5478:	60015616 	blt	r12,zero,59d4 <___svfprintf_internal_r+0x1de8>
    547c:	dc803817 	ldw	r18,224(sp)
    5480:	d8002a05 	stb	zero,168(sp)
    5484:	00801984 	movi	r2,102
    5488:	80808c26 	beq	r16,r2,56bc <___svfprintf_internal_r+0x1ad0>
    548c:	00801184 	movi	r2,70
    5490:	80808a26 	beq	r16,r2,56bc <___svfprintf_internal_r+0x1ad0>
    5494:	00801144 	movi	r2,69
    5498:	a8815226 	beq	r21,r2,59e4 <___svfprintf_internal_r+0x1df8>
    549c:	4839883a 	mov	fp,r9
    54a0:	d8802604 	addi	r2,sp,152
    54a4:	d8800115 	stw	r2,4(sp)
    54a8:	d9002f17 	ldw	r4,188(sp)
    54ac:	d8802504 	addi	r2,sp,148
    54b0:	d9403717 	ldw	r5,220(sp)
    54b4:	d8800215 	stw	r2,8(sp)
    54b8:	d8802104 	addi	r2,sp,132
    54bc:	df000015 	stw	fp,0(sp)
    54c0:	d8800315 	stw	r2,12(sp)
    54c4:	900d883a 	mov	r6,r18
    54c8:	01c00084 	movi	r7,2
    54cc:	da004015 	stw	r8,256(sp)
    54d0:	da403f15 	stw	r9,252(sp)
    54d4:	0007f000 	call	7f00 <_dtoa_r>
    54d8:	d8803115 	stw	r2,196(sp)
    54dc:	008019c4 	movi	r2,103
    54e0:	da004017 	ldw	r8,256(sp)
    54e4:	da403f17 	ldw	r9,252(sp)
    54e8:	80800226 	beq	r16,r2,54f4 <___svfprintf_internal_r+0x1908>
    54ec:	008011c4 	movi	r2,71
    54f0:	8080841e 	bne	r16,r2,5704 <___svfprintf_internal_r+0x1b18>
    54f4:	8880004c 	andi	r2,r17,1
    54f8:	10014f26 	beq	r2,zero,5a38 <___svfprintf_internal_r+0x1e4c>
    54fc:	db003117 	ldw	r12,196(sp)
    5500:	6715883a 	add	r10,r12,fp
    5504:	d9003717 	ldw	r4,220(sp)
    5508:	900b883a 	mov	r5,r18
    550c:	000d883a 	mov	r6,zero
    5510:	000f883a 	mov	r7,zero
    5514:	da004015 	stw	r8,256(sp)
    5518:	da403f15 	stw	r9,252(sp)
    551c:	da803e15 	stw	r10,248(sp)
    5520:	0011aec0 	call	11aec <__eqdf2>
    5524:	da004017 	ldw	r8,256(sp)
    5528:	da403f17 	ldw	r9,252(sp)
    552c:	da803e17 	ldw	r10,248(sp)
    5530:	1000d926 	beq	r2,zero,5898 <___svfprintf_internal_r+0x1cac>
    5534:	d8802117 	ldw	r2,132(sp)
    5538:	1280062e 	bgeu	r2,r10,5554 <___svfprintf_internal_r+0x1968>
    553c:	01000c04 	movi	r4,48
    5540:	10c00044 	addi	r3,r2,1
    5544:	d8c02115 	stw	r3,132(sp)
    5548:	11000005 	stb	r4,0(r2)
    554c:	d8802117 	ldw	r2,132(sp)
    5550:	12bffb36 	bltu	r2,r10,5540 <__alt_mem_Flash_flash_data+0xf4005540>
    5554:	db003117 	ldw	r12,196(sp)
    5558:	1305c83a 	sub	r2,r2,r12
    555c:	d8803315 	stw	r2,204(sp)
    5560:	008011c4 	movi	r2,71
    5564:	a880b626 	beq	r21,r2,5840 <___svfprintf_internal_r+0x1c54>
    5568:	00801944 	movi	r2,101
    556c:	14017c0e 	bge	r2,r16,5b60 <___svfprintf_internal_r+0x1f74>
    5570:	00801984 	movi	r2,102
    5574:	80812626 	beq	r16,r2,5a10 <___svfprintf_internal_r+0x1e24>
    5578:	db002617 	ldw	r12,152(sp)
    557c:	db003415 	stw	r12,208(sp)
    5580:	db003417 	ldw	r12,208(sp)
    5584:	dac03317 	ldw	r11,204(sp)
    5588:	62c11816 	blt	r12,r11,59ec <___svfprintf_internal_r+0x1e00>
    558c:	8c40004c 	andi	r17,r17,1
    5590:	88013b1e 	bne	r17,zero,5a80 <___svfprintf_internal_r+0x1e94>
    5594:	6005883a 	mov	r2,r12
    5598:	60012516 	blt	r12,zero,5a30 <___svfprintf_internal_r+0x1e44>
    559c:	dc803417 	ldw	r18,208(sp)
    55a0:	df002a07 	ldb	fp,168(sp)
    55a4:	e000b01e 	bne	fp,zero,5868 <___svfprintf_internal_r+0x1c7c>
    55a8:	dc402d17 	ldw	r17,180(sp)
    55ac:	dd402783 	ldbu	r21,158(sp)
    55b0:	d8802a15 	stw	r2,168(sp)
    55b4:	dcc02d15 	stw	r19,180(sp)
    55b8:	d8003215 	stw	zero,200(sp)
    55bc:	003ab706 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    55c0:	008000b4 	movhi	r2,2
    55c4:	10822504 	addi	r2,r2,2196
    55c8:	d8803115 	stw	r2,196(sp)
    55cc:	003bbb06 	br	44bc <__alt_mem_Flash_flash_data+0xf40044bc>
    55d0:	d9002f17 	ldw	r4,188(sp)
    55d4:	04001004 	movi	r16,64
    55d8:	800b883a 	mov	r5,r16
    55dc:	000a9500 	call	a950 <_malloc_r>
    55e0:	b8800015 	stw	r2,0(r23)
    55e4:	b8800415 	stw	r2,16(r23)
    55e8:	10015f26 	beq	r2,zero,5b68 <___svfprintf_internal_r+0x1f7c>
    55ec:	bc000515 	stw	r16,20(r23)
    55f0:	00399806 	br	3c54 <__alt_mem_Flash_flash_data+0xf4003c54>
    55f4:	008000b4 	movhi	r2,2
    55f8:	10822804 	addi	r2,r2,2208
    55fc:	d8803115 	stw	r2,196(sp)
    5600:	003f0406 	br	5214 <__alt_mem_Flash_flash_data+0xf4005214>
    5604:	d9002f17 	ldw	r4,188(sp)
    5608:	b80b883a 	mov	r5,r23
    560c:	b00d883a 	mov	r6,r22
    5610:	000cd480 	call	cd48 <__ssprint_r>
    5614:	103a3d1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5618:	dc002617 	ldw	r16,152(sp)
    561c:	d8c02017 	ldw	r3,128(sp)
    5620:	da000404 	addi	r8,sp,16
    5624:	003f4b06 	br	5354 <__alt_mem_Flash_flash_data+0xf4005354>
    5628:	02400184 	movi	r9,6
    562c:	003f8f06 	br	546c <__alt_mem_Flash_flash_data+0xf400546c>
    5630:	db002d17 	ldw	r12,180(sp)
    5634:	14c00017 	ldw	r19,0(r2)
    5638:	0039883a 	mov	fp,zero
    563c:	63000104 	addi	r12,r12,4
    5640:	db002d15 	stw	r12,180(sp)
    5644:	003bc706 	br	4564 <__alt_mem_Flash_flash_data+0xf4004564>
    5648:	d8c03117 	ldw	r3,196(sp)
    564c:	b0e5c83a 	sub	r18,r22,r3
    5650:	003a8d06 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    5654:	da004015 	stw	r8,256(sp)
    5658:	0003b540 	call	3b54 <strlen>
    565c:	1025883a 	mov	r18,r2
    5660:	da004017 	ldw	r8,256(sp)
    5664:	903bf20e 	bge	r18,zero,4630 <__alt_mem_Flash_flash_data+0xf4004630>
    5668:	0005883a 	mov	r2,zero
    566c:	003bf006 	br	4630 <__alt_mem_Flash_flash_data+0xf4004630>
    5670:	d9002f17 	ldw	r4,188(sp)
    5674:	b80b883a 	mov	r5,r23
    5678:	b00d883a 	mov	r6,r22
    567c:	000cd480 	call	cd48 <__ssprint_r>
    5680:	103a221e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5684:	d8c02017 	ldw	r3,128(sp)
    5688:	d8801f17 	ldw	r2,124(sp)
    568c:	da000404 	addi	r8,sp,16
    5690:	db003317 	ldw	r12,204(sp)
    5694:	dac03117 	ldw	r11,196(sp)
    5698:	10800044 	addi	r2,r2,1
    569c:	1b07883a 	add	r3,r3,r12
    56a0:	42c00015 	stw	r11,0(r8)
    56a4:	43000115 	stw	r12,4(r8)
    56a8:	d8c02015 	stw	r3,128(sp)
    56ac:	d8801f15 	stw	r2,124(sp)
    56b0:	010001c4 	movi	r4,7
    56b4:	20bb210e 	bge	r4,r2,433c <__alt_mem_Flash_flash_data+0xf400433c>
    56b8:	003da206 	br	4d44 <__alt_mem_Flash_flash_data+0xf4004d44>
    56bc:	d8802604 	addi	r2,sp,152
    56c0:	d8800115 	stw	r2,4(sp)
    56c4:	d9002f17 	ldw	r4,188(sp)
    56c8:	d8802504 	addi	r2,sp,148
    56cc:	d9403717 	ldw	r5,220(sp)
    56d0:	d8800215 	stw	r2,8(sp)
    56d4:	d8802104 	addi	r2,sp,132
    56d8:	da400015 	stw	r9,0(sp)
    56dc:	d8800315 	stw	r2,12(sp)
    56e0:	900d883a 	mov	r6,r18
    56e4:	01c000c4 	movi	r7,3
    56e8:	da004015 	stw	r8,256(sp)
    56ec:	da403f15 	stw	r9,252(sp)
    56f0:	0007f000 	call	7f00 <_dtoa_r>
    56f4:	da403f17 	ldw	r9,252(sp)
    56f8:	da004017 	ldw	r8,256(sp)
    56fc:	d8803115 	stw	r2,196(sp)
    5700:	4839883a 	mov	fp,r9
    5704:	dac03117 	ldw	r11,196(sp)
    5708:	00801184 	movi	r2,70
    570c:	5f15883a 	add	r10,r11,fp
    5710:	a8bf7c1e 	bne	r21,r2,5504 <__alt_mem_Flash_flash_data+0xf4005504>
    5714:	59000007 	ldb	r4,0(r11)
    5718:	00800c04 	movi	r2,48
    571c:	2080c826 	beq	r4,r2,5a40 <___svfprintf_internal_r+0x1e54>
    5720:	d8c02617 	ldw	r3,152(sp)
    5724:	50d5883a 	add	r10,r10,r3
    5728:	003f7606 	br	5504 <__alt_mem_Flash_flash_data+0xf4005504>
    572c:	010000b4 	movhi	r4,2
    5730:	21023984 	addi	r4,r4,2278
    5734:	d9003615 	stw	r4,216(sp)
    5738:	003a9706 	br	4198 <__alt_mem_Flash_flash_data+0xf4004198>
    573c:	0025883a 	mov	r18,zero
    5740:	003dc306 	br	4e50 <__alt_mem_Flash_flash_data+0xf4004e50>
    5744:	d9002f17 	ldw	r4,188(sp)
    5748:	b80b883a 	mov	r5,r23
    574c:	b00d883a 	mov	r6,r22
    5750:	000cd480 	call	cd48 <__ssprint_r>
    5754:	1039ed1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5758:	d8c02017 	ldw	r3,128(sp)
    575c:	da000404 	addi	r8,sp,16
    5760:	003dba06 	br	4e4c <__alt_mem_Flash_flash_data+0xf4004e4c>
    5764:	d9002f17 	ldw	r4,188(sp)
    5768:	b80b883a 	mov	r5,r23
    576c:	b00d883a 	mov	r6,r22
    5770:	000cd480 	call	cd48 <__ssprint_r>
    5774:	1039e51e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    5778:	d8802617 	ldw	r2,152(sp)
    577c:	d8c02017 	ldw	r3,128(sp)
    5780:	da000404 	addi	r8,sp,16
    5784:	003e4106 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>
    5788:	030000b4 	movhi	r12,2
    578c:	63023584 	addi	r12,r12,2262
    5790:	db002b15 	stw	r12,172(sp)
    5794:	dac02b17 	ldw	r11,172(sp)
    5798:	1c07883a 	add	r3,r3,r16
    579c:	10800044 	addi	r2,r2,1
    57a0:	42c00015 	stw	r11,0(r8)
    57a4:	44000115 	stw	r16,4(r8)
    57a8:	d8c02015 	stw	r3,128(sp)
    57ac:	d8801f15 	stw	r2,124(sp)
    57b0:	010001c4 	movi	r4,7
    57b4:	20bfae16 	blt	r4,r2,5670 <__alt_mem_Flash_flash_data+0xf4005670>
    57b8:	42000204 	addi	r8,r8,8
    57bc:	003fb406 	br	5690 <__alt_mem_Flash_flash_data+0xf4005690>
    57c0:	0021883a 	mov	r16,zero
    57c4:	003e4306 	br	50d4 <__alt_mem_Flash_flash_data+0xf40050d4>
    57c8:	d9002f17 	ldw	r4,188(sp)
    57cc:	b80b883a 	mov	r5,r23
    57d0:	b00d883a 	mov	r6,r22
    57d4:	000cd480 	call	cd48 <__ssprint_r>
    57d8:	1039cc1e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    57dc:	d8802617 	ldw	r2,152(sp)
    57e0:	db003317 	ldw	r12,204(sp)
    57e4:	d8c02017 	ldw	r3,128(sp)
    57e8:	da000404 	addi	r8,sp,16
    57ec:	6085c83a 	sub	r2,r12,r2
    57f0:	003e3706 	br	50d0 <__alt_mem_Flash_flash_data+0xf40050d0>
    57f4:	00800184 	movi	r2,6
    57f8:	1240012e 	bgeu	r2,r9,5800 <___svfprintf_internal_r+0x1c14>
    57fc:	1013883a 	mov	r9,r2
    5800:	4825883a 	mov	r18,r9
    5804:	4805883a 	mov	r2,r9
    5808:	4800a216 	blt	r9,zero,5a94 <___svfprintf_internal_r+0x1ea8>
    580c:	d8802a15 	stw	r2,168(sp)
    5810:	008000b4 	movhi	r2,2
    5814:	10823304 	addi	r2,r2,2252
    5818:	d8803115 	stw	r2,196(sp)
    581c:	dcc02d15 	stw	r19,180(sp)
    5820:	d8003215 	stw	zero,200(sp)
    5824:	d8003415 	stw	zero,208(sp)
    5828:	0005883a 	mov	r2,zero
    582c:	003a2206 	br	40b8 <__alt_mem_Flash_flash_data+0xf40040b8>
    5830:	030000b4 	movhi	r12,2
    5834:	63023984 	addi	r12,r12,2278
    5838:	db003615 	stw	r12,216(sp)
    583c:	003ae506 	br	43d4 <__alt_mem_Flash_flash_data+0xf40043d4>
    5840:	d8c02617 	ldw	r3,152(sp)
    5844:	00bfff44 	movi	r2,-3
    5848:	18801516 	blt	r3,r2,58a0 <___svfprintf_internal_r+0x1cb4>
    584c:	48c01416 	blt	r9,r3,58a0 <___svfprintf_internal_r+0x1cb4>
    5850:	d8c03415 	stw	r3,208(sp)
    5854:	040019c4 	movi	r16,103
    5858:	003f4906 	br	5580 <__alt_mem_Flash_flash_data+0xf4005580>
    585c:	05400b44 	movi	r21,45
    5860:	dd402785 	stb	r21,158(sp)
    5864:	003b1006 	br	44a8 <__alt_mem_Flash_flash_data+0xf40044a8>
    5868:	00c00b44 	movi	r3,45
    586c:	d8802a15 	stw	r2,168(sp)
    5870:	dc402d17 	ldw	r17,180(sp)
    5874:	d8c02785 	stb	r3,158(sp)
    5878:	dcc02d15 	stw	r19,180(sp)
    587c:	d8003215 	stw	zero,200(sp)
    5880:	00800b44 	movi	r2,45
    5884:	003a0906 	br	40ac <__alt_mem_Flash_flash_data+0xf40040ac>
    5888:	010000b4 	movhi	r4,2
    588c:	21023584 	addi	r4,r4,2262
    5890:	d9002b15 	stw	r4,172(sp)
    5894:	003cc306 	br	4ba4 <__alt_mem_Flash_flash_data+0xf4004ba4>
    5898:	5005883a 	mov	r2,r10
    589c:	003f2d06 	br	5554 <__alt_mem_Flash_flash_data+0xf4005554>
    58a0:	843fff84 	addi	r16,r16,-2
    58a4:	1f3fffc4 	addi	fp,r3,-1
    58a8:	df002615 	stw	fp,152(sp)
    58ac:	dc0022c5 	stb	r16,139(sp)
    58b0:	e000a016 	blt	fp,zero,5b34 <___svfprintf_internal_r+0x1f48>
    58b4:	00800ac4 	movi	r2,43
    58b8:	d8802305 	stb	r2,140(sp)
    58bc:	00800244 	movi	r2,9
    58c0:	1700800e 	bge	r2,fp,5ac4 <___svfprintf_internal_r+0x1ed8>
    58c4:	dd4022c4 	addi	r21,sp,139
    58c8:	dc002b15 	stw	r16,172(sp)
    58cc:	4025883a 	mov	r18,r8
    58d0:	a821883a 	mov	r16,r21
    58d4:	e009883a 	mov	r4,fp
    58d8:	01400284 	movi	r5,10
    58dc:	00109180 	call	10918 <__modsi3>
    58e0:	10800c04 	addi	r2,r2,48
    58e4:	843fffc4 	addi	r16,r16,-1
    58e8:	e009883a 	mov	r4,fp
    58ec:	01400284 	movi	r5,10
    58f0:	80800005 	stb	r2,0(r16)
    58f4:	00108c40 	call	108c4 <__divsi3>
    58f8:	1039883a 	mov	fp,r2
    58fc:	00800244 	movi	r2,9
    5900:	173ff416 	blt	r2,fp,58d4 <__alt_mem_Flash_flash_data+0xf40058d4>
    5904:	9011883a 	mov	r8,r18
    5908:	e0800c04 	addi	r2,fp,48
    590c:	8025883a 	mov	r18,r16
    5910:	913fffc4 	addi	r4,r18,-1
    5914:	90bfffc5 	stb	r2,-1(r18)
    5918:	dc002b17 	ldw	r16,172(sp)
    591c:	25408e2e 	bgeu	r4,r21,5b58 <___svfprintf_internal_r+0x1f6c>
    5920:	d9402384 	addi	r5,sp,142
    5924:	2c8bc83a 	sub	r5,r5,r18
    5928:	d8c02344 	addi	r3,sp,141
    592c:	a94b883a 	add	r5,r21,r5
    5930:	00000106 	br	5938 <___svfprintf_internal_r+0x1d4c>
    5934:	20800003 	ldbu	r2,0(r4)
    5938:	18800005 	stb	r2,0(r3)
    593c:	18c00044 	addi	r3,r3,1
    5940:	21000044 	addi	r4,r4,1
    5944:	197ffb1e 	bne	r3,r5,5934 <__alt_mem_Flash_flash_data+0xf4005934>
    5948:	d8802304 	addi	r2,sp,140
    594c:	1485c83a 	sub	r2,r2,r18
    5950:	d8c02344 	addi	r3,sp,141
    5954:	1885883a 	add	r2,r3,r2
    5958:	dac03317 	ldw	r11,204(sp)
    595c:	156bc83a 	sub	r21,r2,r21
    5960:	dd403a15 	stw	r21,232(sp)
    5964:	00800044 	movi	r2,1
    5968:	5d65883a 	add	r18,r11,r21
    596c:	12c0770e 	bge	r2,r11,5b4c <___svfprintf_internal_r+0x1f60>
    5970:	94800044 	addi	r18,r18,1
    5974:	9005883a 	mov	r2,r18
    5978:	90007216 	blt	r18,zero,5b44 <___svfprintf_internal_r+0x1f58>
    597c:	d8003415 	stw	zero,208(sp)
    5980:	003f0706 	br	55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5984:	da402a15 	stw	r9,168(sp)
    5988:	dd402783 	ldbu	r21,158(sp)
    598c:	4825883a 	mov	r18,r9
    5990:	dcc02d15 	stw	r19,180(sp)
    5994:	d8003215 	stw	zero,200(sp)
    5998:	d8003415 	stw	zero,208(sp)
    599c:	0039bf06 	br	409c <__alt_mem_Flash_flash_data+0xf400409c>
    59a0:	483eb21e 	bne	r9,zero,546c <__alt_mem_Flash_flash_data+0xf400546c>
    59a4:	9013883a 	mov	r9,r18
    59a8:	003eb006 	br	546c <__alt_mem_Flash_flash_data+0xf400546c>
    59ac:	d9002f17 	ldw	r4,188(sp)
    59b0:	b80b883a 	mov	r5,r23
    59b4:	b00d883a 	mov	r6,r22
    59b8:	000cd480 	call	cd48 <__ssprint_r>
    59bc:	1039531e 	bne	r2,zero,3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    59c0:	dc002617 	ldw	r16,152(sp)
    59c4:	d8c02017 	ldw	r3,128(sp)
    59c8:	d8801f17 	ldw	r2,124(sp)
    59cc:	da000404 	addi	r8,sp,16
    59d0:	003e7106 	br	5398 <__alt_mem_Flash_flash_data+0xf4005398>
    59d4:	00c00b44 	movi	r3,45
    59d8:	64a0003c 	xorhi	r18,r12,32768
    59dc:	d8c02a05 	stb	r3,168(sp)
    59e0:	003ea806 	br	5484 <__alt_mem_Flash_flash_data+0xf4005484>
    59e4:	4f000044 	addi	fp,r9,1
    59e8:	003ead06 	br	54a0 <__alt_mem_Flash_flash_data+0xf40054a0>
    59ec:	d8c03417 	ldw	r3,208(sp)
    59f0:	00c0410e 	bge	zero,r3,5af8 <___svfprintf_internal_r+0x1f0c>
    59f4:	04800044 	movi	r18,1
    59f8:	dac03317 	ldw	r11,204(sp)
    59fc:	92e5883a 	add	r18,r18,r11
    5a00:	9005883a 	mov	r2,r18
    5a04:	903ee60e 	bge	r18,zero,55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5a08:	0005883a 	mov	r2,zero
    5a0c:	003ee406 	br	55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5a10:	d8c02617 	ldw	r3,152(sp)
    5a14:	d8c03415 	stw	r3,208(sp)
    5a18:	00c0310e 	bge	zero,r3,5ae0 <___svfprintf_internal_r+0x1ef4>
    5a1c:	48001f1e 	bne	r9,zero,5a9c <___svfprintf_internal_r+0x1eb0>
    5a20:	8c40004c 	andi	r17,r17,1
    5a24:	88001d1e 	bne	r17,zero,5a9c <___svfprintf_internal_r+0x1eb0>
    5a28:	1805883a 	mov	r2,r3
    5a2c:	183edb0e 	bge	r3,zero,559c <__alt_mem_Flash_flash_data+0xf400559c>
    5a30:	0005883a 	mov	r2,zero
    5a34:	003ed906 	br	559c <__alt_mem_Flash_flash_data+0xf400559c>
    5a38:	d8802117 	ldw	r2,132(sp)
    5a3c:	003ec506 	br	5554 <__alt_mem_Flash_flash_data+0xf4005554>
    5a40:	d9003717 	ldw	r4,220(sp)
    5a44:	900b883a 	mov	r5,r18
    5a48:	000d883a 	mov	r6,zero
    5a4c:	000f883a 	mov	r7,zero
    5a50:	da004015 	stw	r8,256(sp)
    5a54:	da403f15 	stw	r9,252(sp)
    5a58:	da803e15 	stw	r10,248(sp)
    5a5c:	0011aec0 	call	11aec <__eqdf2>
    5a60:	da004017 	ldw	r8,256(sp)
    5a64:	da403f17 	ldw	r9,252(sp)
    5a68:	da803e17 	ldw	r10,248(sp)
    5a6c:	103f2c26 	beq	r2,zero,5720 <__alt_mem_Flash_flash_data+0xf4005720>
    5a70:	00800044 	movi	r2,1
    5a74:	1707c83a 	sub	r3,r2,fp
    5a78:	d8c02615 	stw	r3,152(sp)
    5a7c:	003f2906 	br	5724 <__alt_mem_Flash_flash_data+0xf4005724>
    5a80:	db003417 	ldw	r12,208(sp)
    5a84:	64800044 	addi	r18,r12,1
    5a88:	9005883a 	mov	r2,r18
    5a8c:	903ec40e 	bge	r18,zero,55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5a90:	003fdd06 	br	5a08 <__alt_mem_Flash_flash_data+0xf4005a08>
    5a94:	0005883a 	mov	r2,zero
    5a98:	003f5c06 	br	580c <__alt_mem_Flash_flash_data+0xf400580c>
    5a9c:	dac03417 	ldw	r11,208(sp)
    5aa0:	4a400044 	addi	r9,r9,1
    5aa4:	5a65883a 	add	r18,r11,r9
    5aa8:	9005883a 	mov	r2,r18
    5aac:	903ebc0e 	bge	r18,zero,55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5ab0:	003fd506 	br	5a08 <__alt_mem_Flash_flash_data+0xf4005a08>
    5ab4:	008000b4 	movhi	r2,2
    5ab8:	10823584 	addi	r2,r2,2262
    5abc:	d8802b15 	stw	r2,172(sp)
    5ac0:	003d2b06 	br	4f70 <__alt_mem_Flash_flash_data+0xf4004f70>
    5ac4:	00800c04 	movi	r2,48
    5ac8:	e0c00c04 	addi	r3,fp,48
    5acc:	d8802345 	stb	r2,141(sp)
    5ad0:	d8c02385 	stb	r3,142(sp)
    5ad4:	d88023c4 	addi	r2,sp,143
    5ad8:	dd4022c4 	addi	r21,sp,139
    5adc:	003f9e06 	br	5958 <__alt_mem_Flash_flash_data+0xf4005958>
    5ae0:	4800081e 	bne	r9,zero,5b04 <___svfprintf_internal_r+0x1f18>
    5ae4:	8c40004c 	andi	r17,r17,1
    5ae8:	8800061e 	bne	r17,zero,5b04 <___svfprintf_internal_r+0x1f18>
    5aec:	00800044 	movi	r2,1
    5af0:	1025883a 	mov	r18,r2
    5af4:	003eaa06 	br	55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5af8:	04800084 	movi	r18,2
    5afc:	90e5c83a 	sub	r18,r18,r3
    5b00:	003fbd06 	br	59f8 <__alt_mem_Flash_flash_data+0xf40059f8>
    5b04:	4c800084 	addi	r18,r9,2
    5b08:	9005883a 	mov	r2,r18
    5b0c:	903ea40e 	bge	r18,zero,55a0 <__alt_mem_Flash_flash_data+0xf40055a0>
    5b10:	003fbd06 	br	5a08 <__alt_mem_Flash_flash_data+0xf4005a08>
    5b14:	dac02d17 	ldw	r11,180(sp)
    5b18:	5a400017 	ldw	r9,0(r11)
    5b1c:	5ac00104 	addi	r11,r11,4
    5b20:	dac02d15 	stw	r11,180(sp)
    5b24:	483e410e 	bge	r9,zero,542c <__alt_mem_Flash_flash_data+0xf400542c>
    5b28:	027fffc4 	movi	r9,-1
    5b2c:	1c000047 	ldb	r16,1(r3)
    5b30:	00388406 	br	3d44 <__alt_mem_Flash_flash_data+0xf4003d44>
    5b34:	00800b44 	movi	r2,45
    5b38:	0739c83a 	sub	fp,zero,fp
    5b3c:	d8802305 	stb	r2,140(sp)
    5b40:	003f5e06 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5b44:	0005883a 	mov	r2,zero
    5b48:	003f8c06 	br	597c <__alt_mem_Flash_flash_data+0xf400597c>
    5b4c:	88a2703a 	and	r17,r17,r2
    5b50:	883f8826 	beq	r17,zero,5974 <__alt_mem_Flash_flash_data+0xf4005974>
    5b54:	003f8606 	br	5970 <__alt_mem_Flash_flash_data+0xf4005970>
    5b58:	d8802344 	addi	r2,sp,141
    5b5c:	003f7e06 	br	5958 <__alt_mem_Flash_flash_data+0xf4005958>
    5b60:	d8c02617 	ldw	r3,152(sp)
    5b64:	003f4f06 	br	58a4 <__alt_mem_Flash_flash_data+0xf40058a4>
    5b68:	dac02f17 	ldw	r11,188(sp)
    5b6c:	00800304 	movi	r2,12
    5b70:	58800015 	stw	r2,0(r11)
    5b74:	00bfffc4 	movi	r2,-1
    5b78:	0038e806 	br	3f1c <__alt_mem_Flash_flash_data+0xf4003f1c>

00005b7c <___vfprintf_internal_r>:
    5b7c:	deffb604 	addi	sp,sp,-296
    5b80:	dfc04915 	stw	ra,292(sp)
    5b84:	ddc04715 	stw	r23,284(sp)
    5b88:	dd804615 	stw	r22,280(sp)
    5b8c:	282f883a 	mov	r23,r5
    5b90:	202d883a 	mov	r22,r4
    5b94:	d9802a15 	stw	r6,168(sp)
    5b98:	d9c02d15 	stw	r7,180(sp)
    5b9c:	df004815 	stw	fp,288(sp)
    5ba0:	dd404515 	stw	r21,276(sp)
    5ba4:	dd004415 	stw	r20,272(sp)
    5ba8:	dcc04315 	stw	r19,268(sp)
    5bac:	dc804215 	stw	r18,264(sp)
    5bb0:	dc404115 	stw	r17,260(sp)
    5bb4:	dc004015 	stw	r16,256(sp)
    5bb8:	000a7640 	call	a764 <_localeconv_r>
    5bbc:	10800017 	ldw	r2,0(r2)
    5bc0:	1009883a 	mov	r4,r2
    5bc4:	d8803515 	stw	r2,212(sp)
    5bc8:	0003b540 	call	3b54 <strlen>
    5bcc:	d8803815 	stw	r2,224(sp)
    5bd0:	b0000226 	beq	r22,zero,5bdc <___vfprintf_internal_r+0x60>
    5bd4:	b0800e17 	ldw	r2,56(r22)
    5bd8:	1000e126 	beq	r2,zero,5f60 <___vfprintf_internal_r+0x3e4>
    5bdc:	b880030b 	ldhu	r2,12(r23)
    5be0:	10c8000c 	andi	r3,r2,8192
    5be4:	1800061e 	bne	r3,zero,5c00 <___vfprintf_internal_r+0x84>
    5be8:	b9001917 	ldw	r4,100(r23)
    5bec:	00f7ffc4 	movi	r3,-8193
    5bf0:	10880014 	ori	r2,r2,8192
    5bf4:	20c6703a 	and	r3,r4,r3
    5bf8:	b880030d 	sth	r2,12(r23)
    5bfc:	b8c01915 	stw	r3,100(r23)
    5c00:	10c0020c 	andi	r3,r2,8
    5c04:	1800a726 	beq	r3,zero,5ea4 <___vfprintf_internal_r+0x328>
    5c08:	b8c00417 	ldw	r3,16(r23)
    5c0c:	1800a526 	beq	r3,zero,5ea4 <___vfprintf_internal_r+0x328>
    5c10:	1080068c 	andi	r2,r2,26
    5c14:	00c00284 	movi	r3,10
    5c18:	10c0aa26 	beq	r2,r3,5ec4 <___vfprintf_internal_r+0x348>
    5c1c:	dac01e04 	addi	r11,sp,120
    5c20:	db001dc4 	addi	r12,sp,119
    5c24:	d8800404 	addi	r2,sp,16
    5c28:	050000b4 	movhi	r20,2
    5c2c:	dac02815 	stw	r11,160(sp)
    5c30:	5b17c83a 	sub	r11,r11,r12
    5c34:	a5023d84 	addi	r20,r20,2294
    5c38:	db002915 	stw	r12,164(sp)
    5c3c:	d8801e15 	stw	r2,120(sp)
    5c40:	d8002015 	stw	zero,128(sp)
    5c44:	d8001f15 	stw	zero,124(sp)
    5c48:	d8003315 	stw	zero,204(sp)
    5c4c:	d8003715 	stw	zero,220(sp)
    5c50:	d8003915 	stw	zero,228(sp)
    5c54:	1011883a 	mov	r8,r2
    5c58:	d8003b15 	stw	zero,236(sp)
    5c5c:	d8003a15 	stw	zero,232(sp)
    5c60:	d8002f15 	stw	zero,188(sp)
    5c64:	dac03c15 	stw	r11,240(sp)
    5c68:	db002a17 	ldw	r12,168(sp)
    5c6c:	60800007 	ldb	r2,0(r12)
    5c70:	1000be26 	beq	r2,zero,5f6c <___vfprintf_internal_r+0x3f0>
    5c74:	00c00944 	movi	r3,37
    5c78:	10c0bc26 	beq	r2,r3,5f6c <___vfprintf_internal_r+0x3f0>
    5c7c:	6021883a 	mov	r16,r12
    5c80:	00000106 	br	5c88 <___vfprintf_internal_r+0x10c>
    5c84:	10c08426 	beq	r2,r3,5e98 <___vfprintf_internal_r+0x31c>
    5c88:	84000044 	addi	r16,r16,1
    5c8c:	80800007 	ldb	r2,0(r16)
    5c90:	103ffc1e 	bne	r2,zero,5c84 <__alt_mem_Flash_flash_data+0xf4005c84>
    5c94:	dac02a17 	ldw	r11,168(sp)
    5c98:	82e3c83a 	sub	r17,r16,r11
    5c9c:	88000f26 	beq	r17,zero,5cdc <___vfprintf_internal_r+0x160>
    5ca0:	d8c02017 	ldw	r3,128(sp)
    5ca4:	d8801f17 	ldw	r2,124(sp)
    5ca8:	dac02a17 	ldw	r11,168(sp)
    5cac:	1c47883a 	add	r3,r3,r17
    5cb0:	10800044 	addi	r2,r2,1
    5cb4:	d8c02015 	stw	r3,128(sp)
    5cb8:	42c00015 	stw	r11,0(r8)
    5cbc:	44400115 	stw	r17,4(r8)
    5cc0:	d8801f15 	stw	r2,124(sp)
    5cc4:	00c001c4 	movi	r3,7
    5cc8:	18809316 	blt	r3,r2,5f18 <___vfprintf_internal_r+0x39c>
    5ccc:	42000204 	addi	r8,r8,8
    5cd0:	db002f17 	ldw	r12,188(sp)
    5cd4:	6459883a 	add	r12,r12,r17
    5cd8:	db002f15 	stw	r12,188(sp)
    5cdc:	80800007 	ldb	r2,0(r16)
    5ce0:	10009426 	beq	r2,zero,5f34 <___vfprintf_internal_r+0x3b8>
    5ce4:	80800044 	addi	r2,r16,1
    5ce8:	84000047 	ldb	r16,1(r16)
    5cec:	d8002785 	stb	zero,158(sp)
    5cf0:	000d883a 	mov	r6,zero
    5cf4:	027fffc4 	movi	r9,-1
    5cf8:	d8002e15 	stw	zero,184(sp)
    5cfc:	0023883a 	mov	r17,zero
    5d00:	01001604 	movi	r4,88
    5d04:	01400244 	movi	r5,9
    5d08:	02800a84 	movi	r10,42
    5d0c:	01c01b04 	movi	r7,108
    5d10:	10c00044 	addi	r3,r2,1
    5d14:	80bff804 	addi	r2,r16,-32
    5d18:	2082cd36 	bltu	r4,r2,6850 <___vfprintf_internal_r+0xcd4>
    5d1c:	100490ba 	slli	r2,r2,2
    5d20:	02c00034 	movhi	r11,0
    5d24:	5ad74d04 	addi	r11,r11,23860
    5d28:	12c5883a 	add	r2,r2,r11
    5d2c:	10800017 	ldw	r2,0(r2)
    5d30:	1000683a 	jmp	r2
    5d34:	00006668 	cmpgeui	zero,zero,409
    5d38:	00006850 	cmplti	zero,zero,417
    5d3c:	00006850 	cmplti	zero,zero,417
    5d40:	000067b8 	rdprs	zero,zero,414
    5d44:	00006850 	cmplti	zero,zero,417
    5d48:	00006850 	cmplti	zero,zero,417
    5d4c:	00006850 	cmplti	zero,zero,417
    5d50:	00006850 	cmplti	zero,zero,417
    5d54:	00006850 	cmplti	zero,zero,417
    5d58:	00006850 	cmplti	zero,zero,417
    5d5c:	00006688 	cmpgei	zero,zero,410
    5d60:	000066b4 	movhi	zero,410
    5d64:	00006850 	cmplti	zero,zero,417
    5d68:	00005f74 	movhi	zero,381
    5d6c:	00005f84 	movi	zero,382
    5d70:	00006850 	cmplti	zero,zero,417
    5d74:	00005fc4 	movi	zero,383
    5d78:	00005fd4 	movui	zero,383
    5d7c:	00005fd4 	movui	zero,383
    5d80:	00005fd4 	movui	zero,383
    5d84:	00005fd4 	movui	zero,383
    5d88:	00005fd4 	movui	zero,383
    5d8c:	00005fd4 	movui	zero,383
    5d90:	00005fd4 	movui	zero,383
    5d94:	00005fd4 	movui	zero,383
    5d98:	00005fd4 	movui	zero,383
    5d9c:	00006850 	cmplti	zero,zero,417
    5da0:	00006850 	cmplti	zero,zero,417
    5da4:	00006850 	cmplti	zero,zero,417
    5da8:	00006850 	cmplti	zero,zero,417
    5dac:	00006850 	cmplti	zero,zero,417
    5db0:	00006850 	cmplti	zero,zero,417
    5db4:	00006850 	cmplti	zero,zero,417
    5db8:	00006850 	cmplti	zero,zero,417
    5dbc:	00006850 	cmplti	zero,zero,417
    5dc0:	00006850 	cmplti	zero,zero,417
    5dc4:	00006008 	cmpgei	zero,zero,384
    5dc8:	00006478 	rdprs	zero,zero,401
    5dcc:	00006850 	cmplti	zero,zero,417
    5dd0:	00006478 	rdprs	zero,zero,401
    5dd4:	00006850 	cmplti	zero,zero,417
    5dd8:	00006850 	cmplti	zero,zero,417
    5ddc:	00006850 	cmplti	zero,zero,417
    5de0:	00006850 	cmplti	zero,zero,417
    5de4:	00006564 	muli	zero,zero,405
    5de8:	00006850 	cmplti	zero,zero,417
    5dec:	00006850 	cmplti	zero,zero,417
    5df0:	0000640c 	andi	zero,zero,400
    5df4:	00006850 	cmplti	zero,zero,417
    5df8:	00006850 	cmplti	zero,zero,417
    5dfc:	00006850 	cmplti	zero,zero,417
    5e00:	00006850 	cmplti	zero,zero,417
    5e04:	00006850 	cmplti	zero,zero,417
    5e08:	00006448 	cmpgei	zero,zero,401
    5e0c:	00006850 	cmplti	zero,zero,417
    5e10:	00006850 	cmplti	zero,zero,417
    5e14:	0000660c 	andi	zero,zero,408
    5e18:	00006850 	cmplti	zero,zero,417
    5e1c:	00006850 	cmplti	zero,zero,417
    5e20:	00006850 	cmplti	zero,zero,417
    5e24:	00006850 	cmplti	zero,zero,417
    5e28:	00006850 	cmplti	zero,zero,417
    5e2c:	00006850 	cmplti	zero,zero,417
    5e30:	00006850 	cmplti	zero,zero,417
    5e34:	00006850 	cmplti	zero,zero,417
    5e38:	00006850 	cmplti	zero,zero,417
    5e3c:	00006850 	cmplti	zero,zero,417
    5e40:	000066c4 	movi	zero,411
    5e44:	00006574 	movhi	zero,405
    5e48:	00006478 	rdprs	zero,zero,401
    5e4c:	00006478 	rdprs	zero,zero,401
    5e50:	00006478 	rdprs	zero,zero,401
    5e54:	000065b4 	movhi	zero,406
    5e58:	00006574 	movhi	zero,405
    5e5c:	00006850 	cmplti	zero,zero,417
    5e60:	00006850 	cmplti	zero,zero,417
    5e64:	000065c4 	movi	zero,407
    5e68:	00006850 	cmplti	zero,zero,417
    5e6c:	000065d8 	cmpnei	zero,zero,407
    5e70:	00006814 	movui	zero,416
    5e74:	0000651c 	xori	zero,zero,404
    5e78:	000067c8 	cmpgei	zero,zero,415
    5e7c:	00006850 	cmplti	zero,zero,417
    5e80:	00006704 	movi	zero,412
    5e84:	00006850 	cmplti	zero,zero,417
    5e88:	000067d8 	cmpnei	zero,zero,415
    5e8c:	00006850 	cmplti	zero,zero,417
    5e90:	00006850 	cmplti	zero,zero,417
    5e94:	00006778 	rdprs	zero,zero,413
    5e98:	db002a17 	ldw	r12,168(sp)
    5e9c:	8323c83a 	sub	r17,r16,r12
    5ea0:	003f7e06 	br	5c9c <__alt_mem_Flash_flash_data+0xf4005c9c>
    5ea4:	b009883a 	mov	r4,r22
    5ea8:	b80b883a 	mov	r5,r23
    5eac:	0007bac0 	call	7bac <__swsetup_r>
    5eb0:	10000c1e 	bne	r2,zero,5ee4 <___vfprintf_internal_r+0x368>
    5eb4:	b880030b 	ldhu	r2,12(r23)
    5eb8:	00c00284 	movi	r3,10
    5ebc:	1080068c 	andi	r2,r2,26
    5ec0:	10ff561e 	bne	r2,r3,5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5ec4:	b880038f 	ldh	r2,14(r23)
    5ec8:	103f5416 	blt	r2,zero,5c1c <__alt_mem_Flash_flash_data+0xf4005c1c>
    5ecc:	d9802a17 	ldw	r6,168(sp)
    5ed0:	d9c02d17 	ldw	r7,180(sp)
    5ed4:	b009883a 	mov	r4,r22
    5ed8:	b80b883a 	mov	r5,r23
    5edc:	0007af00 	call	7af0 <__sbprintf>
    5ee0:	00000106 	br	5ee8 <___vfprintf_internal_r+0x36c>
    5ee4:	00bfffc4 	movi	r2,-1
    5ee8:	dfc04917 	ldw	ra,292(sp)
    5eec:	df004817 	ldw	fp,288(sp)
    5ef0:	ddc04717 	ldw	r23,284(sp)
    5ef4:	dd804617 	ldw	r22,280(sp)
    5ef8:	dd404517 	ldw	r21,276(sp)
    5efc:	dd004417 	ldw	r20,272(sp)
    5f00:	dcc04317 	ldw	r19,268(sp)
    5f04:	dc804217 	ldw	r18,264(sp)
    5f08:	dc404117 	ldw	r17,260(sp)
    5f0c:	dc004017 	ldw	r16,256(sp)
    5f10:	dec04a04 	addi	sp,sp,296
    5f14:	f800283a 	ret
    5f18:	b009883a 	mov	r4,r22
    5f1c:	b80b883a 	mov	r5,r23
    5f20:	d9801e04 	addi	r6,sp,120
    5f24:	000e0480 	call	e048 <__sprint_r>
    5f28:	1000081e 	bne	r2,zero,5f4c <___vfprintf_internal_r+0x3d0>
    5f2c:	da000404 	addi	r8,sp,16
    5f30:	003f6706 	br	5cd0 <__alt_mem_Flash_flash_data+0xf4005cd0>
    5f34:	d8802017 	ldw	r2,128(sp)
    5f38:	10000426 	beq	r2,zero,5f4c <___vfprintf_internal_r+0x3d0>
    5f3c:	b009883a 	mov	r4,r22
    5f40:	b80b883a 	mov	r5,r23
    5f44:	d9801e04 	addi	r6,sp,120
    5f48:	000e0480 	call	e048 <__sprint_r>
    5f4c:	b880030b 	ldhu	r2,12(r23)
    5f50:	1080100c 	andi	r2,r2,64
    5f54:	103fe31e 	bne	r2,zero,5ee4 <__alt_mem_Flash_flash_data+0xf4005ee4>
    5f58:	d8802f17 	ldw	r2,188(sp)
    5f5c:	003fe206 	br	5ee8 <__alt_mem_Flash_flash_data+0xf4005ee8>
    5f60:	b009883a 	mov	r4,r22
    5f64:	0009c0c0 	call	9c0c <__sinit>
    5f68:	003f1c06 	br	5bdc <__alt_mem_Flash_flash_data+0xf4005bdc>
    5f6c:	dc002a17 	ldw	r16,168(sp)
    5f70:	003f5a06 	br	5cdc <__alt_mem_Flash_flash_data+0xf4005cdc>
    5f74:	1805883a 	mov	r2,r3
    5f78:	8c400114 	ori	r17,r17,4
    5f7c:	1c000007 	ldb	r16,0(r3)
    5f80:	003f6306 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5f84:	1c000007 	ldb	r16,0(r3)
    5f88:	18800044 	addi	r2,r3,1
    5f8c:	8286ad26 	beq	r16,r10,7a44 <___vfprintf_internal_r+0x1ec8>
    5f90:	82fff404 	addi	r11,r16,-48
    5f94:	1007883a 	mov	r3,r2
    5f98:	0013883a 	mov	r9,zero
    5f9c:	2aff5d36 	bltu	r5,r11,5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    5fa0:	1c000007 	ldb	r16,0(r3)
    5fa4:	4a4002a4 	muli	r9,r9,10
    5fa8:	18c00044 	addi	r3,r3,1
    5fac:	5a53883a 	add	r9,r11,r9
    5fb0:	82fff404 	addi	r11,r16,-48
    5fb4:	2afffa2e 	bgeu	r5,r11,5fa0 <__alt_mem_Flash_flash_data+0xf4005fa0>
    5fb8:	483f560e 	bge	r9,zero,5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    5fbc:	027fffc4 	movi	r9,-1
    5fc0:	003f5406 	br	5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    5fc4:	8c402014 	ori	r17,r17,128
    5fc8:	1805883a 	mov	r2,r3
    5fcc:	1c000007 	ldb	r16,0(r3)
    5fd0:	003f4f06 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    5fd4:	1805883a 	mov	r2,r3
    5fd8:	d8002e15 	stw	zero,184(sp)
    5fdc:	82fff404 	addi	r11,r16,-48
    5fe0:	0019883a 	mov	r12,zero
    5fe4:	14000007 	ldb	r16,0(r2)
    5fe8:	630002a4 	muli	r12,r12,10
    5fec:	18c00044 	addi	r3,r3,1
    5ff0:	1805883a 	mov	r2,r3
    5ff4:	62d9883a 	add	r12,r12,r11
    5ff8:	82fff404 	addi	r11,r16,-48
    5ffc:	2afff92e 	bgeu	r5,r11,5fe4 <__alt_mem_Flash_flash_data+0xf4005fe4>
    6000:	db002e15 	stw	r12,184(sp)
    6004:	003f4306 	br	5d14 <__alt_mem_Flash_flash_data+0xf4005d14>
    6008:	8c400414 	ori	r17,r17,16
    600c:	d8c02a15 	stw	r3,168(sp)
    6010:	d9802785 	stb	r6,158(sp)
    6014:	8880080c 	andi	r2,r17,32
    6018:	d8c02d17 	ldw	r3,180(sp)
    601c:	10015a26 	beq	r2,zero,6588 <___vfprintf_internal_r+0xa0c>
    6020:	db002d17 	ldw	r12,180(sp)
    6024:	18800117 	ldw	r2,4(r3)
    6028:	1cc00017 	ldw	r19,0(r3)
    602c:	63000204 	addi	r12,r12,8
    6030:	db002d15 	stw	r12,180(sp)
    6034:	1039883a 	mov	fp,r2
    6038:	10044516 	blt	r2,zero,7150 <___vfprintf_internal_r+0x15d4>
    603c:	dd402783 	ldbu	r21,158(sp)
    6040:	da403215 	stw	r9,200(sp)
    6044:	00800044 	movi	r2,1
    6048:	9f06b03a 	or	r3,r19,fp
    604c:	48000216 	blt	r9,zero,6058 <___vfprintf_internal_r+0x4dc>
    6050:	013fdfc4 	movi	r4,-129
    6054:	8922703a 	and	r17,r17,r4
    6058:	1802071e 	bne	r3,zero,6878 <___vfprintf_internal_r+0xcfc>
    605c:	4802fa26 	beq	r9,zero,6c48 <___vfprintf_internal_r+0x10cc>
    6060:	10803fcc 	andi	r2,r2,255
    6064:	00c00044 	movi	r3,1
    6068:	10c22926 	beq	r2,r3,6910 <___vfprintf_internal_r+0xd94>
    606c:	00c00084 	movi	r3,2
    6070:	10c31726 	beq	r2,r3,6cd0 <___vfprintf_internal_r+0x1154>
    6074:	d8c01e04 	addi	r3,sp,120
    6078:	9808d0fa 	srli	r4,r19,3
    607c:	e00a977a 	slli	r5,fp,29
    6080:	e038d0fa 	srli	fp,fp,3
    6084:	9cc001cc 	andi	r19,r19,7
    6088:	98800c04 	addi	r2,r19,48
    608c:	18ffffc4 	addi	r3,r3,-1
    6090:	2926b03a 	or	r19,r5,r4
    6094:	18800005 	stb	r2,0(r3)
    6098:	9f08b03a 	or	r4,r19,fp
    609c:	203ff61e 	bne	r4,zero,6078 <__alt_mem_Flash_flash_data+0xf4006078>
    60a0:	8900004c 	andi	r4,r17,1
    60a4:	d8c03115 	stw	r3,196(sp)
    60a8:	2003931e 	bne	r4,zero,6ef8 <___vfprintf_internal_r+0x137c>
    60ac:	dac02817 	ldw	r11,160(sp)
    60b0:	58e5c83a 	sub	r18,r11,r3
    60b4:	9005883a 	mov	r2,r18
    60b8:	9240010e 	bge	r18,r9,60c0 <___vfprintf_internal_r+0x544>
    60bc:	4805883a 	mov	r2,r9
    60c0:	d8802b15 	stw	r2,172(sp)
    60c4:	d8003415 	stw	zero,208(sp)
    60c8:	a8803fcc 	andi	r2,r21,255
    60cc:	1080201c 	xori	r2,r2,128
    60d0:	10bfe004 	addi	r2,r2,-128
    60d4:	10000326 	beq	r2,zero,60e4 <___vfprintf_internal_r+0x568>
    60d8:	db002b17 	ldw	r12,172(sp)
    60dc:	63000044 	addi	r12,r12,1
    60e0:	db002b15 	stw	r12,172(sp)
    60e4:	88c0008c 	andi	r3,r17,2
    60e8:	d8c02c15 	stw	r3,176(sp)
    60ec:	18000326 	beq	r3,zero,60fc <___vfprintf_internal_r+0x580>
    60f0:	dac02b17 	ldw	r11,172(sp)
    60f4:	5ac00084 	addi	r11,r11,2
    60f8:	dac02b15 	stw	r11,172(sp)
    60fc:	8b00210c 	andi	r12,r17,132
    6100:	db003015 	stw	r12,192(sp)
    6104:	6001da1e 	bne	r12,zero,6870 <___vfprintf_internal_r+0xcf4>
    6108:	dac02e17 	ldw	r11,184(sp)
    610c:	db002b17 	ldw	r12,172(sp)
    6110:	5b39c83a 	sub	fp,r11,r12
    6114:	0701d60e 	bge	zero,fp,6870 <___vfprintf_internal_r+0xcf4>
    6118:	02400404 	movi	r9,16
    611c:	d8c02017 	ldw	r3,128(sp)
    6120:	d8801f17 	ldw	r2,124(sp)
    6124:	4f053c0e 	bge	r9,fp,7618 <___vfprintf_internal_r+0x1a9c>
    6128:	014000b4 	movhi	r5,2
    612c:	29424184 	addi	r5,r5,2310
    6130:	d9403615 	stw	r5,216(sp)
    6134:	482b883a 	mov	r21,r9
    6138:	04c001c4 	movi	r19,7
    613c:	00000306 	br	614c <___vfprintf_internal_r+0x5d0>
    6140:	e73ffc04 	addi	fp,fp,-16
    6144:	42000204 	addi	r8,r8,8
    6148:	af00130e 	bge	r21,fp,6198 <___vfprintf_internal_r+0x61c>
    614c:	02c000b4 	movhi	r11,2
    6150:	18c00404 	addi	r3,r3,16
    6154:	10800044 	addi	r2,r2,1
    6158:	5ac24184 	addi	r11,r11,2310
    615c:	42c00015 	stw	r11,0(r8)
    6160:	45400115 	stw	r21,4(r8)
    6164:	d8c02015 	stw	r3,128(sp)
    6168:	d8801f15 	stw	r2,124(sp)
    616c:	98bff40e 	bge	r19,r2,6140 <__alt_mem_Flash_flash_data+0xf4006140>
    6170:	b009883a 	mov	r4,r22
    6174:	b80b883a 	mov	r5,r23
    6178:	d9801e04 	addi	r6,sp,120
    617c:	000e0480 	call	e048 <__sprint_r>
    6180:	103f721e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6184:	e73ffc04 	addi	fp,fp,-16
    6188:	d8c02017 	ldw	r3,128(sp)
    618c:	d8801f17 	ldw	r2,124(sp)
    6190:	da000404 	addi	r8,sp,16
    6194:	af3fed16 	blt	r21,fp,614c <__alt_mem_Flash_flash_data+0xf400614c>
    6198:	db003617 	ldw	r12,216(sp)
    619c:	e0c7883a 	add	r3,fp,r3
    61a0:	10800044 	addi	r2,r2,1
    61a4:	43000015 	stw	r12,0(r8)
    61a8:	47000115 	stw	fp,4(r8)
    61ac:	d8c02015 	stw	r3,128(sp)
    61b0:	d8801f15 	stw	r2,124(sp)
    61b4:	010001c4 	movi	r4,7
    61b8:	20830e16 	blt	r4,r2,6df4 <___vfprintf_internal_r+0x1278>
    61bc:	d8802787 	ldb	r2,158(sp)
    61c0:	42000204 	addi	r8,r8,8
    61c4:	10000c26 	beq	r2,zero,61f8 <___vfprintf_internal_r+0x67c>
    61c8:	d8801f17 	ldw	r2,124(sp)
    61cc:	d9002784 	addi	r4,sp,158
    61d0:	18c00044 	addi	r3,r3,1
    61d4:	10800044 	addi	r2,r2,1
    61d8:	41000015 	stw	r4,0(r8)
    61dc:	01000044 	movi	r4,1
    61e0:	41000115 	stw	r4,4(r8)
    61e4:	d8c02015 	stw	r3,128(sp)
    61e8:	d8801f15 	stw	r2,124(sp)
    61ec:	010001c4 	movi	r4,7
    61f0:	2082a716 	blt	r4,r2,6c90 <___vfprintf_internal_r+0x1114>
    61f4:	42000204 	addi	r8,r8,8
    61f8:	dac02c17 	ldw	r11,176(sp)
    61fc:	58000c26 	beq	r11,zero,6230 <___vfprintf_internal_r+0x6b4>
    6200:	d8801f17 	ldw	r2,124(sp)
    6204:	d9002704 	addi	r4,sp,156
    6208:	18c00084 	addi	r3,r3,2
    620c:	10800044 	addi	r2,r2,1
    6210:	41000015 	stw	r4,0(r8)
    6214:	01000084 	movi	r4,2
    6218:	41000115 	stw	r4,4(r8)
    621c:	d8c02015 	stw	r3,128(sp)
    6220:	d8801f15 	stw	r2,124(sp)
    6224:	010001c4 	movi	r4,7
    6228:	2082a116 	blt	r4,r2,6cb0 <___vfprintf_internal_r+0x1134>
    622c:	42000204 	addi	r8,r8,8
    6230:	db003017 	ldw	r12,192(sp)
    6234:	00802004 	movi	r2,128
    6238:	60820326 	beq	r12,r2,6a48 <___vfprintf_internal_r+0xecc>
    623c:	db003217 	ldw	r12,200(sp)
    6240:	64abc83a 	sub	r21,r12,r18
    6244:	0540260e 	bge	zero,r21,62e0 <___vfprintf_internal_r+0x764>
    6248:	07000404 	movi	fp,16
    624c:	d8801f17 	ldw	r2,124(sp)
    6250:	e544570e 	bge	fp,r21,73b0 <___vfprintf_internal_r+0x1834>
    6254:	014000b4 	movhi	r5,2
    6258:	29423d84 	addi	r5,r5,2294
    625c:	d9402c15 	stw	r5,176(sp)
    6260:	04c001c4 	movi	r19,7
    6264:	00000306 	br	6274 <___vfprintf_internal_r+0x6f8>
    6268:	ad7ffc04 	addi	r21,r21,-16
    626c:	42000204 	addi	r8,r8,8
    6270:	e540110e 	bge	fp,r21,62b8 <___vfprintf_internal_r+0x73c>
    6274:	18c00404 	addi	r3,r3,16
    6278:	10800044 	addi	r2,r2,1
    627c:	45000015 	stw	r20,0(r8)
    6280:	47000115 	stw	fp,4(r8)
    6284:	d8c02015 	stw	r3,128(sp)
    6288:	d8801f15 	stw	r2,124(sp)
    628c:	98bff60e 	bge	r19,r2,6268 <__alt_mem_Flash_flash_data+0xf4006268>
    6290:	b009883a 	mov	r4,r22
    6294:	b80b883a 	mov	r5,r23
    6298:	d9801e04 	addi	r6,sp,120
    629c:	000e0480 	call	e048 <__sprint_r>
    62a0:	103f2a1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    62a4:	ad7ffc04 	addi	r21,r21,-16
    62a8:	d8c02017 	ldw	r3,128(sp)
    62ac:	d8801f17 	ldw	r2,124(sp)
    62b0:	da000404 	addi	r8,sp,16
    62b4:	e57fef16 	blt	fp,r21,6274 <__alt_mem_Flash_flash_data+0xf4006274>
    62b8:	dac02c17 	ldw	r11,176(sp)
    62bc:	1d47883a 	add	r3,r3,r21
    62c0:	10800044 	addi	r2,r2,1
    62c4:	42c00015 	stw	r11,0(r8)
    62c8:	45400115 	stw	r21,4(r8)
    62cc:	d8c02015 	stw	r3,128(sp)
    62d0:	d8801f15 	stw	r2,124(sp)
    62d4:	010001c4 	movi	r4,7
    62d8:	20826516 	blt	r4,r2,6c70 <___vfprintf_internal_r+0x10f4>
    62dc:	42000204 	addi	r8,r8,8
    62e0:	8880400c 	andi	r2,r17,256
    62e4:	1001901e 	bne	r2,zero,6928 <___vfprintf_internal_r+0xdac>
    62e8:	d8801f17 	ldw	r2,124(sp)
    62ec:	db003117 	ldw	r12,196(sp)
    62f0:	1c87883a 	add	r3,r3,r18
    62f4:	10800044 	addi	r2,r2,1
    62f8:	43000015 	stw	r12,0(r8)
    62fc:	44800115 	stw	r18,4(r8)
    6300:	d8c02015 	stw	r3,128(sp)
    6304:	d8801f15 	stw	r2,124(sp)
    6308:	010001c4 	movi	r4,7
    630c:	20824016 	blt	r4,r2,6c10 <___vfprintf_internal_r+0x1094>
    6310:	42000204 	addi	r8,r8,8
    6314:	8c40010c 	andi	r17,r17,4
    6318:	88003126 	beq	r17,zero,63e0 <___vfprintf_internal_r+0x864>
    631c:	db002e17 	ldw	r12,184(sp)
    6320:	dac02b17 	ldw	r11,172(sp)
    6324:	62e1c83a 	sub	r16,r12,r11
    6328:	04002d0e 	bge	zero,r16,63e0 <___vfprintf_internal_r+0x864>
    632c:	04400404 	movi	r17,16
    6330:	d8801f17 	ldw	r2,124(sp)
    6334:	8c05150e 	bge	r17,r16,778c <___vfprintf_internal_r+0x1c10>
    6338:	010000b4 	movhi	r4,2
    633c:	21024184 	addi	r4,r4,2310
    6340:	d9003615 	stw	r4,216(sp)
    6344:	048001c4 	movi	r18,7
    6348:	00000306 	br	6358 <___vfprintf_internal_r+0x7dc>
    634c:	843ffc04 	addi	r16,r16,-16
    6350:	42000204 	addi	r8,r8,8
    6354:	8c00130e 	bge	r17,r16,63a4 <___vfprintf_internal_r+0x828>
    6358:	014000b4 	movhi	r5,2
    635c:	18c00404 	addi	r3,r3,16
    6360:	10800044 	addi	r2,r2,1
    6364:	29424184 	addi	r5,r5,2310
    6368:	41400015 	stw	r5,0(r8)
    636c:	44400115 	stw	r17,4(r8)
    6370:	d8c02015 	stw	r3,128(sp)
    6374:	d8801f15 	stw	r2,124(sp)
    6378:	90bff40e 	bge	r18,r2,634c <__alt_mem_Flash_flash_data+0xf400634c>
    637c:	b009883a 	mov	r4,r22
    6380:	b80b883a 	mov	r5,r23
    6384:	d9801e04 	addi	r6,sp,120
    6388:	000e0480 	call	e048 <__sprint_r>
    638c:	103eef1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6390:	843ffc04 	addi	r16,r16,-16
    6394:	d8c02017 	ldw	r3,128(sp)
    6398:	d8801f17 	ldw	r2,124(sp)
    639c:	da000404 	addi	r8,sp,16
    63a0:	8c3fed16 	blt	r17,r16,6358 <__alt_mem_Flash_flash_data+0xf4006358>
    63a4:	dac03617 	ldw	r11,216(sp)
    63a8:	1c07883a 	add	r3,r3,r16
    63ac:	10800044 	addi	r2,r2,1
    63b0:	42c00015 	stw	r11,0(r8)
    63b4:	44000115 	stw	r16,4(r8)
    63b8:	d8c02015 	stw	r3,128(sp)
    63bc:	d8801f15 	stw	r2,124(sp)
    63c0:	010001c4 	movi	r4,7
    63c4:	2080060e 	bge	r4,r2,63e0 <___vfprintf_internal_r+0x864>
    63c8:	b009883a 	mov	r4,r22
    63cc:	b80b883a 	mov	r5,r23
    63d0:	d9801e04 	addi	r6,sp,120
    63d4:	000e0480 	call	e048 <__sprint_r>
    63d8:	103edc1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    63dc:	d8c02017 	ldw	r3,128(sp)
    63e0:	d8802b17 	ldw	r2,172(sp)
    63e4:	db002e17 	ldw	r12,184(sp)
    63e8:	1300010e 	bge	r2,r12,63f0 <___vfprintf_internal_r+0x874>
    63ec:	6005883a 	mov	r2,r12
    63f0:	dac02f17 	ldw	r11,188(sp)
    63f4:	5897883a 	add	r11,r11,r2
    63f8:	dac02f15 	stw	r11,188(sp)
    63fc:	18020c1e 	bne	r3,zero,6c30 <___vfprintf_internal_r+0x10b4>
    6400:	d8001f15 	stw	zero,124(sp)
    6404:	da000404 	addi	r8,sp,16
    6408:	003e1706 	br	5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    640c:	8c400414 	ori	r17,r17,16
    6410:	d8c02a15 	stw	r3,168(sp)
    6414:	8880080c 	andi	r2,r17,32
    6418:	10010126 	beq	r2,zero,6820 <___vfprintf_internal_r+0xca4>
    641c:	db002d17 	ldw	r12,180(sp)
    6420:	0005883a 	mov	r2,zero
    6424:	64c00017 	ldw	r19,0(r12)
    6428:	67000117 	ldw	fp,4(r12)
    642c:	63000204 	addi	r12,r12,8
    6430:	db002d15 	stw	r12,180(sp)
    6434:	9f06b03a 	or	r3,r19,fp
    6438:	d8002785 	stb	zero,158(sp)
    643c:	da403215 	stw	r9,200(sp)
    6440:	002b883a 	mov	r21,zero
    6444:	003f0106 	br	604c <__alt_mem_Flash_flash_data+0xf400604c>
    6448:	8c400414 	ori	r17,r17,16
    644c:	d8c02a15 	stw	r3,168(sp)
    6450:	8880080c 	andi	r2,r17,32
    6454:	1000e326 	beq	r2,zero,67e4 <___vfprintf_internal_r+0xc68>
    6458:	dac02d17 	ldw	r11,180(sp)
    645c:	00800044 	movi	r2,1
    6460:	5cc00017 	ldw	r19,0(r11)
    6464:	5f000117 	ldw	fp,4(r11)
    6468:	5ac00204 	addi	r11,r11,8
    646c:	dac02d15 	stw	r11,180(sp)
    6470:	9f06b03a 	or	r3,r19,fp
    6474:	003ff006 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6478:	db002d17 	ldw	r12,180(sp)
    647c:	dac02d17 	ldw	r11,180(sp)
    6480:	d8c02a15 	stw	r3,168(sp)
    6484:	63000017 	ldw	r12,0(r12)
    6488:	5ac00117 	ldw	r11,4(r11)
    648c:	d9802785 	stb	r6,158(sp)
    6490:	6009883a 	mov	r4,r12
    6494:	580b883a 	mov	r5,r11
    6498:	db003715 	stw	r12,220(sp)
    649c:	da003f15 	stw	r8,252(sp)
    64a0:	da403e15 	stw	r9,248(sp)
    64a4:	dac03915 	stw	r11,228(sp)
    64a8:	000caa00 	call	caa0 <__fpclassifyd>
    64ac:	db002d17 	ldw	r12,180(sp)
    64b0:	04800044 	movi	r18,1
    64b4:	da003f17 	ldw	r8,252(sp)
    64b8:	64c00204 	addi	r19,r12,8
    64bc:	da403e17 	ldw	r9,248(sp)
    64c0:	d9003717 	ldw	r4,220(sp)
    64c4:	d9403917 	ldw	r5,228(sp)
    64c8:	14832b1e 	bne	r2,r18,7178 <___vfprintf_internal_r+0x15fc>
    64cc:	000d883a 	mov	r6,zero
    64d0:	000f883a 	mov	r7,zero
    64d4:	0011c500 	call	11c50 <__ledf2>
    64d8:	da003f17 	ldw	r8,252(sp)
    64dc:	1004b716 	blt	r2,zero,77bc <___vfprintf_internal_r+0x1c40>
    64e0:	dd402783 	ldbu	r21,158(sp)
    64e4:	008011c4 	movi	r2,71
    64e8:	14040e0e 	bge	r2,r16,7524 <___vfprintf_internal_r+0x19a8>
    64ec:	00c000b4 	movhi	r3,2
    64f0:	18c22604 	addi	r3,r3,2200
    64f4:	d8c03115 	stw	r3,196(sp)
    64f8:	02c000c4 	movi	r11,3
    64fc:	00bfdfc4 	movi	r2,-129
    6500:	dac02b15 	stw	r11,172(sp)
    6504:	88a2703a 	and	r17,r17,r2
    6508:	dcc02d15 	stw	r19,180(sp)
    650c:	5825883a 	mov	r18,r11
    6510:	d8003215 	stw	zero,200(sp)
    6514:	d8003415 	stw	zero,208(sp)
    6518:	003eeb06 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>
    651c:	db002d17 	ldw	r12,180(sp)
    6520:	00800c04 	movi	r2,48
    6524:	d8802705 	stb	r2,156(sp)
    6528:	64c00017 	ldw	r19,0(r12)
    652c:	00801e04 	movi	r2,120
    6530:	d8802745 	stb	r2,157(sp)
    6534:	008000b4 	movhi	r2,2
    6538:	10822e04 	addi	r2,r2,2232
    653c:	63000104 	addi	r12,r12,4
    6540:	d8c02a15 	stw	r3,168(sp)
    6544:	d8803b15 	stw	r2,236(sp)
    6548:	0039883a 	mov	fp,zero
    654c:	8c400094 	ori	r17,r17,2
    6550:	db002d15 	stw	r12,180(sp)
    6554:	00800084 	movi	r2,2
    6558:	04001e04 	movi	r16,120
    655c:	9807883a 	mov	r3,r19
    6560:	003fb506 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6564:	8c400214 	ori	r17,r17,8
    6568:	1805883a 	mov	r2,r3
    656c:	1c000007 	ldb	r16,0(r3)
    6570:	003de706 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    6574:	d8c02a15 	stw	r3,168(sp)
    6578:	d9802785 	stb	r6,158(sp)
    657c:	8880080c 	andi	r2,r17,32
    6580:	d8c02d17 	ldw	r3,180(sp)
    6584:	103ea61e 	bne	r2,zero,6020 <__alt_mem_Flash_flash_data+0xf4006020>
    6588:	8880040c 	andi	r2,r17,16
    658c:	1002221e 	bne	r2,zero,6e18 <___vfprintf_internal_r+0x129c>
    6590:	8880100c 	andi	r2,r17,64
    6594:	10022026 	beq	r2,zero,6e18 <___vfprintf_internal_r+0x129c>
    6598:	1cc0000f 	ldh	r19,0(r3)
    659c:	db002d17 	ldw	r12,180(sp)
    65a0:	9839d7fa 	srai	fp,r19,31
    65a4:	63000104 	addi	r12,r12,4
    65a8:	db002d15 	stw	r12,180(sp)
    65ac:	e005883a 	mov	r2,fp
    65b0:	003ea106 	br	6038 <__alt_mem_Flash_flash_data+0xf4006038>
    65b4:	8c401014 	ori	r17,r17,64
    65b8:	1805883a 	mov	r2,r3
    65bc:	1c000007 	ldb	r16,0(r3)
    65c0:	003dd306 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    65c4:	1c000007 	ldb	r16,0(r3)
    65c8:	81c3e926 	beq	r16,r7,7570 <___vfprintf_internal_r+0x19f4>
    65cc:	8c400414 	ori	r17,r17,16
    65d0:	1805883a 	mov	r2,r3
    65d4:	003dce06 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    65d8:	d8c02a15 	stw	r3,168(sp)
    65dc:	d9802785 	stb	r6,158(sp)
    65e0:	8880080c 	andi	r2,r17,32
    65e4:	10034726 	beq	r2,zero,7304 <___vfprintf_internal_r+0x1788>
    65e8:	db002d17 	ldw	r12,180(sp)
    65ec:	dac02f17 	ldw	r11,188(sp)
    65f0:	60800017 	ldw	r2,0(r12)
    65f4:	5807d7fa 	srai	r3,r11,31
    65f8:	63000104 	addi	r12,r12,4
    65fc:	db002d15 	stw	r12,180(sp)
    6600:	12c00015 	stw	r11,0(r2)
    6604:	10c00115 	stw	r3,4(r2)
    6608:	003d9706 	br	5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    660c:	030000b4 	movhi	r12,2
    6610:	63022904 	addi	r12,r12,2212
    6614:	d8c02a15 	stw	r3,168(sp)
    6618:	d9802785 	stb	r6,158(sp)
    661c:	db003b15 	stw	r12,236(sp)
    6620:	88c0080c 	andi	r3,r17,32
    6624:	d8802d17 	ldw	r2,180(sp)
    6628:	18005b26 	beq	r3,zero,6798 <___vfprintf_internal_r+0xc1c>
    662c:	dac02d17 	ldw	r11,180(sp)
    6630:	14c00017 	ldw	r19,0(r2)
    6634:	17000117 	ldw	fp,4(r2)
    6638:	5ac00204 	addi	r11,r11,8
    663c:	dac02d15 	stw	r11,180(sp)
    6640:	8880004c 	andi	r2,r17,1
    6644:	10022926 	beq	r2,zero,6eec <___vfprintf_internal_r+0x1370>
    6648:	9f06b03a 	or	r3,r19,fp
    664c:	18032b26 	beq	r3,zero,72fc <___vfprintf_internal_r+0x1780>
    6650:	00800c04 	movi	r2,48
    6654:	d8802705 	stb	r2,156(sp)
    6658:	dc002745 	stb	r16,157(sp)
    665c:	8c400094 	ori	r17,r17,2
    6660:	00800084 	movi	r2,2
    6664:	003f7406 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6668:	30803fcc 	andi	r2,r6,255
    666c:	1080201c 	xori	r2,r2,128
    6670:	10bfe004 	addi	r2,r2,-128
    6674:	1003351e 	bne	r2,zero,734c <___vfprintf_internal_r+0x17d0>
    6678:	1805883a 	mov	r2,r3
    667c:	01800804 	movi	r6,32
    6680:	1c000007 	ldb	r16,0(r3)
    6684:	003da206 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    6688:	dac02d17 	ldw	r11,180(sp)
    668c:	db002d17 	ldw	r12,180(sp)
    6690:	5ac00017 	ldw	r11,0(r11)
    6694:	dac02e15 	stw	r11,184(sp)
    6698:	62c00104 	addi	r11,r12,4
    669c:	db002e17 	ldw	r12,184(sp)
    66a0:	6003ad16 	blt	r12,zero,7558 <___vfprintf_internal_r+0x19dc>
    66a4:	dac02d15 	stw	r11,180(sp)
    66a8:	1805883a 	mov	r2,r3
    66ac:	1c000007 	ldb	r16,0(r3)
    66b0:	003d9706 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    66b4:	1805883a 	mov	r2,r3
    66b8:	01800ac4 	movi	r6,43
    66bc:	1c000007 	ldb	r16,0(r3)
    66c0:	003d9306 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    66c4:	db002d17 	ldw	r12,180(sp)
    66c8:	d8c02a15 	stw	r3,168(sp)
    66cc:	00c00044 	movi	r3,1
    66d0:	60800017 	ldw	r2,0(r12)
    66d4:	63000104 	addi	r12,r12,4
    66d8:	d8c02b15 	stw	r3,172(sp)
    66dc:	d8002785 	stb	zero,158(sp)
    66e0:	d8801405 	stb	r2,80(sp)
    66e4:	db002d15 	stw	r12,180(sp)
    66e8:	dac01404 	addi	r11,sp,80
    66ec:	1825883a 	mov	r18,r3
    66f0:	d8003215 	stw	zero,200(sp)
    66f4:	d8003415 	stw	zero,208(sp)
    66f8:	dac03115 	stw	r11,196(sp)
    66fc:	0005883a 	mov	r2,zero
    6700:	003e7806 	br	60e4 <__alt_mem_Flash_flash_data+0xf40060e4>
    6704:	dac02d17 	ldw	r11,180(sp)
    6708:	db002d17 	ldw	r12,180(sp)
    670c:	d8c02a15 	stw	r3,168(sp)
    6710:	5ac00017 	ldw	r11,0(r11)
    6714:	d8002785 	stb	zero,158(sp)
    6718:	64c00104 	addi	r19,r12,4
    671c:	dac03115 	stw	r11,196(sp)
    6720:	5803fe26 	beq	r11,zero,771c <___vfprintf_internal_r+0x1ba0>
    6724:	d9003117 	ldw	r4,196(sp)
    6728:	4803b416 	blt	r9,zero,75fc <___vfprintf_internal_r+0x1a80>
    672c:	480d883a 	mov	r6,r9
    6730:	000b883a 	mov	r5,zero
    6734:	da003f15 	stw	r8,252(sp)
    6738:	da403e15 	stw	r9,248(sp)
    673c:	000b0f80 	call	b0f8 <memchr>
    6740:	da003f17 	ldw	r8,252(sp)
    6744:	da403e17 	ldw	r9,248(sp)
    6748:	10043026 	beq	r2,zero,780c <___vfprintf_internal_r+0x1c90>
    674c:	d8c03117 	ldw	r3,196(sp)
    6750:	10e5c83a 	sub	r18,r2,r3
    6754:	4c836b16 	blt	r9,r18,7504 <___vfprintf_internal_r+0x1988>
    6758:	9005883a 	mov	r2,r18
    675c:	9003ac16 	blt	r18,zero,7610 <___vfprintf_internal_r+0x1a94>
    6760:	dd402783 	ldbu	r21,158(sp)
    6764:	d8802b15 	stw	r2,172(sp)
    6768:	dcc02d15 	stw	r19,180(sp)
    676c:	d8003215 	stw	zero,200(sp)
    6770:	d8003415 	stw	zero,208(sp)
    6774:	003e5406 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>
    6778:	008000b4 	movhi	r2,2
    677c:	10822e04 	addi	r2,r2,2232
    6780:	d8c02a15 	stw	r3,168(sp)
    6784:	d8803b15 	stw	r2,236(sp)
    6788:	d9802785 	stb	r6,158(sp)
    678c:	88c0080c 	andi	r3,r17,32
    6790:	d8802d17 	ldw	r2,180(sp)
    6794:	183fa51e 	bne	r3,zero,662c <__alt_mem_Flash_flash_data+0xf400662c>
    6798:	88c0040c 	andi	r3,r17,16
    679c:	1802ee26 	beq	r3,zero,7358 <___vfprintf_internal_r+0x17dc>
    67a0:	db002d17 	ldw	r12,180(sp)
    67a4:	14c00017 	ldw	r19,0(r2)
    67a8:	0039883a 	mov	fp,zero
    67ac:	63000104 	addi	r12,r12,4
    67b0:	db002d15 	stw	r12,180(sp)
    67b4:	003fa206 	br	6640 <__alt_mem_Flash_flash_data+0xf4006640>
    67b8:	8c400054 	ori	r17,r17,1
    67bc:	1805883a 	mov	r2,r3
    67c0:	1c000007 	ldb	r16,0(r3)
    67c4:	003d5206 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    67c8:	8c400814 	ori	r17,r17,32
    67cc:	1805883a 	mov	r2,r3
    67d0:	1c000007 	ldb	r16,0(r3)
    67d4:	003d4e06 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    67d8:	d8c02a15 	stw	r3,168(sp)
    67dc:	8880080c 	andi	r2,r17,32
    67e0:	103f1d1e 	bne	r2,zero,6458 <__alt_mem_Flash_flash_data+0xf4006458>
    67e4:	8880040c 	andi	r2,r17,16
    67e8:	1001b81e 	bne	r2,zero,6ecc <___vfprintf_internal_r+0x1350>
    67ec:	8880100c 	andi	r2,r17,64
    67f0:	1001b626 	beq	r2,zero,6ecc <___vfprintf_internal_r+0x1350>
    67f4:	dac02d17 	ldw	r11,180(sp)
    67f8:	0039883a 	mov	fp,zero
    67fc:	00800044 	movi	r2,1
    6800:	5cc0000b 	ldhu	r19,0(r11)
    6804:	5ac00104 	addi	r11,r11,4
    6808:	dac02d15 	stw	r11,180(sp)
    680c:	9807883a 	mov	r3,r19
    6810:	003f0906 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6814:	d8c02a15 	stw	r3,168(sp)
    6818:	8880080c 	andi	r2,r17,32
    681c:	103eff1e 	bne	r2,zero,641c <__alt_mem_Flash_flash_data+0xf400641c>
    6820:	8880040c 	andi	r2,r17,16
    6824:	1001a11e 	bne	r2,zero,6eac <___vfprintf_internal_r+0x1330>
    6828:	8880100c 	andi	r2,r17,64
    682c:	10019f26 	beq	r2,zero,6eac <___vfprintf_internal_r+0x1330>
    6830:	db002d17 	ldw	r12,180(sp)
    6834:	0039883a 	mov	fp,zero
    6838:	0005883a 	mov	r2,zero
    683c:	64c0000b 	ldhu	r19,0(r12)
    6840:	63000104 	addi	r12,r12,4
    6844:	db002d15 	stw	r12,180(sp)
    6848:	9807883a 	mov	r3,r19
    684c:	003efa06 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6850:	d8c02a15 	stw	r3,168(sp)
    6854:	d9802785 	stb	r6,158(sp)
    6858:	803db626 	beq	r16,zero,5f34 <__alt_mem_Flash_flash_data+0xf4005f34>
    685c:	00c00044 	movi	r3,1
    6860:	d8c02b15 	stw	r3,172(sp)
    6864:	dc001405 	stb	r16,80(sp)
    6868:	d8002785 	stb	zero,158(sp)
    686c:	003f9e06 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    6870:	d8c02017 	ldw	r3,128(sp)
    6874:	003e5306 	br	61c4 <__alt_mem_Flash_flash_data+0xf40061c4>
    6878:	10803fcc 	andi	r2,r2,255
    687c:	00c00044 	movi	r3,1
    6880:	10fdfa1e 	bne	r2,r3,606c <__alt_mem_Flash_flash_data+0xf400606c>
    6884:	e000021e 	bne	fp,zero,6890 <___vfprintf_internal_r+0xd14>
    6888:	00800244 	movi	r2,9
    688c:	14c0202e 	bgeu	r2,r19,6910 <___vfprintf_internal_r+0xd94>
    6890:	dc002b15 	stw	r16,172(sp)
    6894:	dc402c15 	stw	r17,176(sp)
    6898:	9821883a 	mov	r16,r19
    689c:	e023883a 	mov	r17,fp
    68a0:	dc801e04 	addi	r18,sp,120
    68a4:	4827883a 	mov	r19,r9
    68a8:	4039883a 	mov	fp,r8
    68ac:	8009883a 	mov	r4,r16
    68b0:	880b883a 	mov	r5,r17
    68b4:	01800284 	movi	r6,10
    68b8:	000f883a 	mov	r7,zero
    68bc:	00102c80 	call	102c8 <__umoddi3>
    68c0:	10800c04 	addi	r2,r2,48
    68c4:	94bfffc4 	addi	r18,r18,-1
    68c8:	8009883a 	mov	r4,r16
    68cc:	880b883a 	mov	r5,r17
    68d0:	01800284 	movi	r6,10
    68d4:	000f883a 	mov	r7,zero
    68d8:	90800005 	stb	r2,0(r18)
    68dc:	000fd080 	call	fd08 <__udivdi3>
    68e0:	1021883a 	mov	r16,r2
    68e4:	10c4b03a 	or	r2,r2,r3
    68e8:	1823883a 	mov	r17,r3
    68ec:	103fef1e 	bne	r2,zero,68ac <__alt_mem_Flash_flash_data+0xf40068ac>
    68f0:	dac02817 	ldw	r11,160(sp)
    68f4:	dc803115 	stw	r18,196(sp)
    68f8:	dc002b17 	ldw	r16,172(sp)
    68fc:	dc402c17 	ldw	r17,176(sp)
    6900:	9813883a 	mov	r9,r19
    6904:	e011883a 	mov	r8,fp
    6908:	5ca5c83a 	sub	r18,r11,r18
    690c:	003de906 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6910:	9cc00c04 	addi	r19,r19,48
    6914:	d8c01dc4 	addi	r3,sp,119
    6918:	dcc01dc5 	stb	r19,119(sp)
    691c:	dc803c17 	ldw	r18,240(sp)
    6920:	d8c03115 	stw	r3,196(sp)
    6924:	003de306 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6928:	00801944 	movi	r2,101
    692c:	1400710e 	bge	r2,r16,6af4 <___vfprintf_internal_r+0xf78>
    6930:	d9003717 	ldw	r4,220(sp)
    6934:	d9403917 	ldw	r5,228(sp)
    6938:	000d883a 	mov	r6,zero
    693c:	000f883a 	mov	r7,zero
    6940:	d8c03d15 	stw	r3,244(sp)
    6944:	da003f15 	stw	r8,252(sp)
    6948:	0011aec0 	call	11aec <__eqdf2>
    694c:	d8c03d17 	ldw	r3,244(sp)
    6950:	da003f17 	ldw	r8,252(sp)
    6954:	1000ef1e 	bne	r2,zero,6d14 <___vfprintf_internal_r+0x1198>
    6958:	d8801f17 	ldw	r2,124(sp)
    695c:	010000b4 	movhi	r4,2
    6960:	21023504 	addi	r4,r4,2260
    6964:	18c00044 	addi	r3,r3,1
    6968:	10800044 	addi	r2,r2,1
    696c:	41000015 	stw	r4,0(r8)
    6970:	01000044 	movi	r4,1
    6974:	41000115 	stw	r4,4(r8)
    6978:	d8c02015 	stw	r3,128(sp)
    697c:	d8801f15 	stw	r2,124(sp)
    6980:	010001c4 	movi	r4,7
    6984:	20828e16 	blt	r4,r2,73c0 <___vfprintf_internal_r+0x1844>
    6988:	42000204 	addi	r8,r8,8
    698c:	d8802617 	ldw	r2,152(sp)
    6990:	dac03317 	ldw	r11,204(sp)
    6994:	12c00216 	blt	r2,r11,69a0 <___vfprintf_internal_r+0xe24>
    6998:	8880004c 	andi	r2,r17,1
    699c:	103e5d26 	beq	r2,zero,6314 <__alt_mem_Flash_flash_data+0xf4006314>
    69a0:	db003817 	ldw	r12,224(sp)
    69a4:	d8801f17 	ldw	r2,124(sp)
    69a8:	dac03517 	ldw	r11,212(sp)
    69ac:	1b07883a 	add	r3,r3,r12
    69b0:	10800044 	addi	r2,r2,1
    69b4:	42c00015 	stw	r11,0(r8)
    69b8:	43000115 	stw	r12,4(r8)
    69bc:	d8c02015 	stw	r3,128(sp)
    69c0:	d8801f15 	stw	r2,124(sp)
    69c4:	010001c4 	movi	r4,7
    69c8:	2082ed16 	blt	r4,r2,7580 <___vfprintf_internal_r+0x1a04>
    69cc:	42000204 	addi	r8,r8,8
    69d0:	db003317 	ldw	r12,204(sp)
    69d4:	643fffc4 	addi	r16,r12,-1
    69d8:	043e4e0e 	bge	zero,r16,6314 <__alt_mem_Flash_flash_data+0xf4006314>
    69dc:	04800404 	movi	r18,16
    69e0:	d8801f17 	ldw	r2,124(sp)
    69e4:	94007e0e 	bge	r18,r16,6be0 <___vfprintf_internal_r+0x1064>
    69e8:	014000b4 	movhi	r5,2
    69ec:	29423d84 	addi	r5,r5,2294
    69f0:	d9402c15 	stw	r5,176(sp)
    69f4:	054001c4 	movi	r21,7
    69f8:	00000306 	br	6a08 <___vfprintf_internal_r+0xe8c>
    69fc:	42000204 	addi	r8,r8,8
    6a00:	843ffc04 	addi	r16,r16,-16
    6a04:	9400790e 	bge	r18,r16,6bec <___vfprintf_internal_r+0x1070>
    6a08:	18c00404 	addi	r3,r3,16
    6a0c:	10800044 	addi	r2,r2,1
    6a10:	45000015 	stw	r20,0(r8)
    6a14:	44800115 	stw	r18,4(r8)
    6a18:	d8c02015 	stw	r3,128(sp)
    6a1c:	d8801f15 	stw	r2,124(sp)
    6a20:	a8bff60e 	bge	r21,r2,69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6a24:	b009883a 	mov	r4,r22
    6a28:	b80b883a 	mov	r5,r23
    6a2c:	d9801e04 	addi	r6,sp,120
    6a30:	000e0480 	call	e048 <__sprint_r>
    6a34:	103d451e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6a38:	d8c02017 	ldw	r3,128(sp)
    6a3c:	d8801f17 	ldw	r2,124(sp)
    6a40:	da000404 	addi	r8,sp,16
    6a44:	003fee06 	br	6a00 <__alt_mem_Flash_flash_data+0xf4006a00>
    6a48:	dac02e17 	ldw	r11,184(sp)
    6a4c:	db002b17 	ldw	r12,172(sp)
    6a50:	5b2bc83a 	sub	r21,r11,r12
    6a54:	057df90e 	bge	zero,r21,623c <__alt_mem_Flash_flash_data+0xf400623c>
    6a58:	07000404 	movi	fp,16
    6a5c:	d8801f17 	ldw	r2,124(sp)
    6a60:	e543640e 	bge	fp,r21,77f4 <___vfprintf_internal_r+0x1c78>
    6a64:	014000b4 	movhi	r5,2
    6a68:	29423d84 	addi	r5,r5,2294
    6a6c:	d9402c15 	stw	r5,176(sp)
    6a70:	04c001c4 	movi	r19,7
    6a74:	00000306 	br	6a84 <___vfprintf_internal_r+0xf08>
    6a78:	ad7ffc04 	addi	r21,r21,-16
    6a7c:	42000204 	addi	r8,r8,8
    6a80:	e540110e 	bge	fp,r21,6ac8 <___vfprintf_internal_r+0xf4c>
    6a84:	18c00404 	addi	r3,r3,16
    6a88:	10800044 	addi	r2,r2,1
    6a8c:	45000015 	stw	r20,0(r8)
    6a90:	47000115 	stw	fp,4(r8)
    6a94:	d8c02015 	stw	r3,128(sp)
    6a98:	d8801f15 	stw	r2,124(sp)
    6a9c:	98bff60e 	bge	r19,r2,6a78 <__alt_mem_Flash_flash_data+0xf4006a78>
    6aa0:	b009883a 	mov	r4,r22
    6aa4:	b80b883a 	mov	r5,r23
    6aa8:	d9801e04 	addi	r6,sp,120
    6aac:	000e0480 	call	e048 <__sprint_r>
    6ab0:	103d261e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6ab4:	ad7ffc04 	addi	r21,r21,-16
    6ab8:	d8c02017 	ldw	r3,128(sp)
    6abc:	d8801f17 	ldw	r2,124(sp)
    6ac0:	da000404 	addi	r8,sp,16
    6ac4:	e57fef16 	blt	fp,r21,6a84 <__alt_mem_Flash_flash_data+0xf4006a84>
    6ac8:	dac02c17 	ldw	r11,176(sp)
    6acc:	1d47883a 	add	r3,r3,r21
    6ad0:	10800044 	addi	r2,r2,1
    6ad4:	42c00015 	stw	r11,0(r8)
    6ad8:	45400115 	stw	r21,4(r8)
    6adc:	d8c02015 	stw	r3,128(sp)
    6ae0:	d8801f15 	stw	r2,124(sp)
    6ae4:	010001c4 	movi	r4,7
    6ae8:	20819116 	blt	r4,r2,7130 <___vfprintf_internal_r+0x15b4>
    6aec:	42000204 	addi	r8,r8,8
    6af0:	003dd206 	br	623c <__alt_mem_Flash_flash_data+0xf400623c>
    6af4:	db003317 	ldw	r12,204(sp)
    6af8:	00800044 	movi	r2,1
    6afc:	18c00044 	addi	r3,r3,1
    6b00:	1301530e 	bge	r2,r12,7050 <___vfprintf_internal_r+0x14d4>
    6b04:	dc001f17 	ldw	r16,124(sp)
    6b08:	dac03117 	ldw	r11,196(sp)
    6b0c:	00800044 	movi	r2,1
    6b10:	84000044 	addi	r16,r16,1
    6b14:	40800115 	stw	r2,4(r8)
    6b18:	42c00015 	stw	r11,0(r8)
    6b1c:	d8c02015 	stw	r3,128(sp)
    6b20:	dc001f15 	stw	r16,124(sp)
    6b24:	008001c4 	movi	r2,7
    6b28:	14016b16 	blt	r2,r16,70d8 <___vfprintf_internal_r+0x155c>
    6b2c:	42000204 	addi	r8,r8,8
    6b30:	db003817 	ldw	r12,224(sp)
    6b34:	dac03517 	ldw	r11,212(sp)
    6b38:	84000044 	addi	r16,r16,1
    6b3c:	1b07883a 	add	r3,r3,r12
    6b40:	42c00015 	stw	r11,0(r8)
    6b44:	43000115 	stw	r12,4(r8)
    6b48:	d8c02015 	stw	r3,128(sp)
    6b4c:	dc001f15 	stw	r16,124(sp)
    6b50:	008001c4 	movi	r2,7
    6b54:	14016916 	blt	r2,r16,70fc <___vfprintf_internal_r+0x1580>
    6b58:	44800204 	addi	r18,r8,8
    6b5c:	d9003717 	ldw	r4,220(sp)
    6b60:	d9403917 	ldw	r5,228(sp)
    6b64:	000d883a 	mov	r6,zero
    6b68:	000f883a 	mov	r7,zero
    6b6c:	d8c03d15 	stw	r3,244(sp)
    6b70:	0011aec0 	call	11aec <__eqdf2>
    6b74:	d8c03d17 	ldw	r3,244(sp)
    6b78:	db003317 	ldw	r12,204(sp)
    6b7c:	1000ad26 	beq	r2,zero,6e34 <___vfprintf_internal_r+0x12b8>
    6b80:	dac03117 	ldw	r11,196(sp)
    6b84:	60bfffc4 	addi	r2,r12,-1
    6b88:	1887883a 	add	r3,r3,r2
    6b8c:	59000044 	addi	r4,r11,1
    6b90:	84000044 	addi	r16,r16,1
    6b94:	90800115 	stw	r2,4(r18)
    6b98:	91000015 	stw	r4,0(r18)
    6b9c:	d8c02015 	stw	r3,128(sp)
    6ba0:	dc001f15 	stw	r16,124(sp)
    6ba4:	008001c4 	movi	r2,7
    6ba8:	14014216 	blt	r2,r16,70b4 <___vfprintf_internal_r+0x1538>
    6bac:	94800204 	addi	r18,r18,8
    6bb0:	dac03a17 	ldw	r11,232(sp)
    6bb4:	dd4022c4 	addi	r21,sp,139
    6bb8:	84000044 	addi	r16,r16,1
    6bbc:	1ac7883a 	add	r3,r3,r11
    6bc0:	95400015 	stw	r21,0(r18)
    6bc4:	92c00115 	stw	r11,4(r18)
    6bc8:	d8c02015 	stw	r3,128(sp)
    6bcc:	dc001f15 	stw	r16,124(sp)
    6bd0:	008001c4 	movi	r2,7
    6bd4:	14000e16 	blt	r2,r16,6c10 <___vfprintf_internal_r+0x1094>
    6bd8:	92000204 	addi	r8,r18,8
    6bdc:	003dcd06 	br	6314 <__alt_mem_Flash_flash_data+0xf4006314>
    6be0:	010000b4 	movhi	r4,2
    6be4:	21023d84 	addi	r4,r4,2294
    6be8:	d9002c15 	stw	r4,176(sp)
    6bec:	dac02c17 	ldw	r11,176(sp)
    6bf0:	1c07883a 	add	r3,r3,r16
    6bf4:	44000115 	stw	r16,4(r8)
    6bf8:	42c00015 	stw	r11,0(r8)
    6bfc:	10800044 	addi	r2,r2,1
    6c00:	d8c02015 	stw	r3,128(sp)
    6c04:	d8801f15 	stw	r2,124(sp)
    6c08:	010001c4 	movi	r4,7
    6c0c:	20bdc00e 	bge	r4,r2,6310 <__alt_mem_Flash_flash_data+0xf4006310>
    6c10:	b009883a 	mov	r4,r22
    6c14:	b80b883a 	mov	r5,r23
    6c18:	d9801e04 	addi	r6,sp,120
    6c1c:	000e0480 	call	e048 <__sprint_r>
    6c20:	103cca1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6c24:	d8c02017 	ldw	r3,128(sp)
    6c28:	da000404 	addi	r8,sp,16
    6c2c:	003db906 	br	6314 <__alt_mem_Flash_flash_data+0xf4006314>
    6c30:	b009883a 	mov	r4,r22
    6c34:	b80b883a 	mov	r5,r23
    6c38:	d9801e04 	addi	r6,sp,120
    6c3c:	000e0480 	call	e048 <__sprint_r>
    6c40:	103def26 	beq	r2,zero,6400 <__alt_mem_Flash_flash_data+0xf4006400>
    6c44:	003cc106 	br	5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6c48:	10803fcc 	andi	r2,r2,255
    6c4c:	1000651e 	bne	r2,zero,6de4 <___vfprintf_internal_r+0x1268>
    6c50:	8880004c 	andi	r2,r17,1
    6c54:	10013226 	beq	r2,zero,7120 <___vfprintf_internal_r+0x15a4>
    6c58:	00800c04 	movi	r2,48
    6c5c:	d8c01dc4 	addi	r3,sp,119
    6c60:	d8801dc5 	stb	r2,119(sp)
    6c64:	dc803c17 	ldw	r18,240(sp)
    6c68:	d8c03115 	stw	r3,196(sp)
    6c6c:	003d1106 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6c70:	b009883a 	mov	r4,r22
    6c74:	b80b883a 	mov	r5,r23
    6c78:	d9801e04 	addi	r6,sp,120
    6c7c:	000e0480 	call	e048 <__sprint_r>
    6c80:	103cb21e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6c84:	d8c02017 	ldw	r3,128(sp)
    6c88:	da000404 	addi	r8,sp,16
    6c8c:	003d9406 	br	62e0 <__alt_mem_Flash_flash_data+0xf40062e0>
    6c90:	b009883a 	mov	r4,r22
    6c94:	b80b883a 	mov	r5,r23
    6c98:	d9801e04 	addi	r6,sp,120
    6c9c:	000e0480 	call	e048 <__sprint_r>
    6ca0:	103caa1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6ca4:	d8c02017 	ldw	r3,128(sp)
    6ca8:	da000404 	addi	r8,sp,16
    6cac:	003d5206 	br	61f8 <__alt_mem_Flash_flash_data+0xf40061f8>
    6cb0:	b009883a 	mov	r4,r22
    6cb4:	b80b883a 	mov	r5,r23
    6cb8:	d9801e04 	addi	r6,sp,120
    6cbc:	000e0480 	call	e048 <__sprint_r>
    6cc0:	103ca21e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6cc4:	d8c02017 	ldw	r3,128(sp)
    6cc8:	da000404 	addi	r8,sp,16
    6ccc:	003d5806 	br	6230 <__alt_mem_Flash_flash_data+0xf4006230>
    6cd0:	d9403b17 	ldw	r5,236(sp)
    6cd4:	d8c01e04 	addi	r3,sp,120
    6cd8:	988003cc 	andi	r2,r19,15
    6cdc:	e008973a 	slli	r4,fp,28
    6ce0:	2885883a 	add	r2,r5,r2
    6ce4:	9826d13a 	srli	r19,r19,4
    6ce8:	10800003 	ldbu	r2,0(r2)
    6cec:	e038d13a 	srli	fp,fp,4
    6cf0:	18ffffc4 	addi	r3,r3,-1
    6cf4:	24e6b03a 	or	r19,r4,r19
    6cf8:	18800005 	stb	r2,0(r3)
    6cfc:	9f04b03a 	or	r2,r19,fp
    6d00:	103ff51e 	bne	r2,zero,6cd8 <__alt_mem_Flash_flash_data+0xf4006cd8>
    6d04:	db002817 	ldw	r12,160(sp)
    6d08:	d8c03115 	stw	r3,196(sp)
    6d0c:	60e5c83a 	sub	r18,r12,r3
    6d10:	003ce806 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6d14:	dc002617 	ldw	r16,152(sp)
    6d18:	0401b10e 	bge	zero,r16,73e0 <___vfprintf_internal_r+0x1864>
    6d1c:	db003117 	ldw	r12,196(sp)
    6d20:	dac03317 	ldw	r11,204(sp)
    6d24:	62e1883a 	add	r16,r12,r11
    6d28:	db003417 	ldw	r12,208(sp)
    6d2c:	5825883a 	mov	r18,r11
    6d30:	62c0010e 	bge	r12,r11,6d38 <___vfprintf_internal_r+0x11bc>
    6d34:	6025883a 	mov	r18,r12
    6d38:	04800b0e 	bge	zero,r18,6d68 <___vfprintf_internal_r+0x11ec>
    6d3c:	d8801f17 	ldw	r2,124(sp)
    6d40:	dac03117 	ldw	r11,196(sp)
    6d44:	1c87883a 	add	r3,r3,r18
    6d48:	10800044 	addi	r2,r2,1
    6d4c:	42c00015 	stw	r11,0(r8)
    6d50:	44800115 	stw	r18,4(r8)
    6d54:	d8c02015 	stw	r3,128(sp)
    6d58:	d8801f15 	stw	r2,124(sp)
    6d5c:	010001c4 	movi	r4,7
    6d60:	20824f16 	blt	r4,r2,76a0 <___vfprintf_internal_r+0x1b24>
    6d64:	42000204 	addi	r8,r8,8
    6d68:	90024b16 	blt	r18,zero,7698 <___vfprintf_internal_r+0x1b1c>
    6d6c:	db003417 	ldw	r12,208(sp)
    6d70:	64a5c83a 	sub	r18,r12,r18
    6d74:	0480730e 	bge	zero,r18,6f44 <___vfprintf_internal_r+0x13c8>
    6d78:	05400404 	movi	r21,16
    6d7c:	d8801f17 	ldw	r2,124(sp)
    6d80:	ac817d0e 	bge	r21,r18,7378 <___vfprintf_internal_r+0x17fc>
    6d84:	014000b4 	movhi	r5,2
    6d88:	29423d84 	addi	r5,r5,2294
    6d8c:	d9402c15 	stw	r5,176(sp)
    6d90:	070001c4 	movi	fp,7
    6d94:	00000306 	br	6da4 <___vfprintf_internal_r+0x1228>
    6d98:	42000204 	addi	r8,r8,8
    6d9c:	94bffc04 	addi	r18,r18,-16
    6da0:	ac81780e 	bge	r21,r18,7384 <___vfprintf_internal_r+0x1808>
    6da4:	18c00404 	addi	r3,r3,16
    6da8:	10800044 	addi	r2,r2,1
    6dac:	45000015 	stw	r20,0(r8)
    6db0:	45400115 	stw	r21,4(r8)
    6db4:	d8c02015 	stw	r3,128(sp)
    6db8:	d8801f15 	stw	r2,124(sp)
    6dbc:	e0bff60e 	bge	fp,r2,6d98 <__alt_mem_Flash_flash_data+0xf4006d98>
    6dc0:	b009883a 	mov	r4,r22
    6dc4:	b80b883a 	mov	r5,r23
    6dc8:	d9801e04 	addi	r6,sp,120
    6dcc:	000e0480 	call	e048 <__sprint_r>
    6dd0:	103c5e1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6dd4:	d8c02017 	ldw	r3,128(sp)
    6dd8:	d8801f17 	ldw	r2,124(sp)
    6ddc:	da000404 	addi	r8,sp,16
    6de0:	003fee06 	br	6d9c <__alt_mem_Flash_flash_data+0xf4006d9c>
    6de4:	dac01e04 	addi	r11,sp,120
    6de8:	0025883a 	mov	r18,zero
    6dec:	dac03115 	stw	r11,196(sp)
    6df0:	003cb006 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6df4:	b009883a 	mov	r4,r22
    6df8:	b80b883a 	mov	r5,r23
    6dfc:	d9801e04 	addi	r6,sp,120
    6e00:	000e0480 	call	e048 <__sprint_r>
    6e04:	103c511e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6e08:	d8c02017 	ldw	r3,128(sp)
    6e0c:	d8802787 	ldb	r2,158(sp)
    6e10:	da000404 	addi	r8,sp,16
    6e14:	003ceb06 	br	61c4 <__alt_mem_Flash_flash_data+0xf40061c4>
    6e18:	1cc00017 	ldw	r19,0(r3)
    6e1c:	dac02d17 	ldw	r11,180(sp)
    6e20:	9839d7fa 	srai	fp,r19,31
    6e24:	5ac00104 	addi	r11,r11,4
    6e28:	dac02d15 	stw	r11,180(sp)
    6e2c:	e005883a 	mov	r2,fp
    6e30:	003c8106 	br	6038 <__alt_mem_Flash_flash_data+0xf4006038>
    6e34:	657fffc4 	addi	r21,r12,-1
    6e38:	057f5d0e 	bge	zero,r21,6bb0 <__alt_mem_Flash_flash_data+0xf4006bb0>
    6e3c:	07000404 	movi	fp,16
    6e40:	e540900e 	bge	fp,r21,7084 <___vfprintf_internal_r+0x1508>
    6e44:	010000b4 	movhi	r4,2
    6e48:	21023d84 	addi	r4,r4,2294
    6e4c:	d9002c15 	stw	r4,176(sp)
    6e50:	01c001c4 	movi	r7,7
    6e54:	00000306 	br	6e64 <___vfprintf_internal_r+0x12e8>
    6e58:	94800204 	addi	r18,r18,8
    6e5c:	ad7ffc04 	addi	r21,r21,-16
    6e60:	e5408b0e 	bge	fp,r21,7090 <___vfprintf_internal_r+0x1514>
    6e64:	18c00404 	addi	r3,r3,16
    6e68:	84000044 	addi	r16,r16,1
    6e6c:	95000015 	stw	r20,0(r18)
    6e70:	97000115 	stw	fp,4(r18)
    6e74:	d8c02015 	stw	r3,128(sp)
    6e78:	dc001f15 	stw	r16,124(sp)
    6e7c:	3c3ff60e 	bge	r7,r16,6e58 <__alt_mem_Flash_flash_data+0xf4006e58>
    6e80:	b009883a 	mov	r4,r22
    6e84:	b80b883a 	mov	r5,r23
    6e88:	d9801e04 	addi	r6,sp,120
    6e8c:	d9c03d15 	stw	r7,244(sp)
    6e90:	000e0480 	call	e048 <__sprint_r>
    6e94:	d9c03d17 	ldw	r7,244(sp)
    6e98:	103c2c1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6e9c:	d8c02017 	ldw	r3,128(sp)
    6ea0:	dc001f17 	ldw	r16,124(sp)
    6ea4:	dc800404 	addi	r18,sp,16
    6ea8:	003fec06 	br	6e5c <__alt_mem_Flash_flash_data+0xf4006e5c>
    6eac:	dac02d17 	ldw	r11,180(sp)
    6eb0:	0039883a 	mov	fp,zero
    6eb4:	0005883a 	mov	r2,zero
    6eb8:	5cc00017 	ldw	r19,0(r11)
    6ebc:	5ac00104 	addi	r11,r11,4
    6ec0:	dac02d15 	stw	r11,180(sp)
    6ec4:	9807883a 	mov	r3,r19
    6ec8:	003d5b06 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6ecc:	db002d17 	ldw	r12,180(sp)
    6ed0:	0039883a 	mov	fp,zero
    6ed4:	00800044 	movi	r2,1
    6ed8:	64c00017 	ldw	r19,0(r12)
    6edc:	63000104 	addi	r12,r12,4
    6ee0:	db002d15 	stw	r12,180(sp)
    6ee4:	9807883a 	mov	r3,r19
    6ee8:	003d5306 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6eec:	00800084 	movi	r2,2
    6ef0:	9f06b03a 	or	r3,r19,fp
    6ef4:	003d5006 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    6ef8:	10803fcc 	andi	r2,r2,255
    6efc:	1080201c 	xori	r2,r2,128
    6f00:	10bfe004 	addi	r2,r2,-128
    6f04:	01000c04 	movi	r4,48
    6f08:	1101a526 	beq	r2,r4,75a0 <___vfprintf_internal_r+0x1a24>
    6f0c:	dac03117 	ldw	r11,196(sp)
    6f10:	db002817 	ldw	r12,160(sp)
    6f14:	193fffc5 	stb	r4,-1(r3)
    6f18:	5affffc4 	addi	r11,r11,-1
    6f1c:	dac03115 	stw	r11,196(sp)
    6f20:	62e5c83a 	sub	r18,r12,r11
    6f24:	003c6306 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    6f28:	b009883a 	mov	r4,r22
    6f2c:	b80b883a 	mov	r5,r23
    6f30:	d9801e04 	addi	r6,sp,120
    6f34:	000e0480 	call	e048 <__sprint_r>
    6f38:	103c041e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    6f3c:	d8c02017 	ldw	r3,128(sp)
    6f40:	da000404 	addi	r8,sp,16
    6f44:	db003117 	ldw	r12,196(sp)
    6f48:	dac03417 	ldw	r11,208(sp)
    6f4c:	d8802617 	ldw	r2,152(sp)
    6f50:	62e5883a 	add	r18,r12,r11
    6f54:	db003317 	ldw	r12,204(sp)
    6f58:	13000216 	blt	r2,r12,6f64 <___vfprintf_internal_r+0x13e8>
    6f5c:	8900004c 	andi	r4,r17,1
    6f60:	20000c26 	beq	r4,zero,6f94 <___vfprintf_internal_r+0x1418>
    6f64:	dac03817 	ldw	r11,224(sp)
    6f68:	d9001f17 	ldw	r4,124(sp)
    6f6c:	db003517 	ldw	r12,212(sp)
    6f70:	1ac7883a 	add	r3,r3,r11
    6f74:	21000044 	addi	r4,r4,1
    6f78:	43000015 	stw	r12,0(r8)
    6f7c:	42c00115 	stw	r11,4(r8)
    6f80:	d8c02015 	stw	r3,128(sp)
    6f84:	d9001f15 	stw	r4,124(sp)
    6f88:	014001c4 	movi	r5,7
    6f8c:	2901cc16 	blt	r5,r4,76c0 <___vfprintf_internal_r+0x1b44>
    6f90:	42000204 	addi	r8,r8,8
    6f94:	dac03317 	ldw	r11,204(sp)
    6f98:	8489c83a 	sub	r4,r16,r18
    6f9c:	5885c83a 	sub	r2,r11,r2
    6fa0:	1021883a 	mov	r16,r2
    6fa4:	2080010e 	bge	r4,r2,6fac <___vfprintf_internal_r+0x1430>
    6fa8:	2021883a 	mov	r16,r4
    6fac:	04000a0e 	bge	zero,r16,6fd8 <___vfprintf_internal_r+0x145c>
    6fb0:	d9001f17 	ldw	r4,124(sp)
    6fb4:	1c07883a 	add	r3,r3,r16
    6fb8:	44800015 	stw	r18,0(r8)
    6fbc:	21000044 	addi	r4,r4,1
    6fc0:	44000115 	stw	r16,4(r8)
    6fc4:	d8c02015 	stw	r3,128(sp)
    6fc8:	d9001f15 	stw	r4,124(sp)
    6fcc:	014001c4 	movi	r5,7
    6fd0:	2901e316 	blt	r5,r4,7760 <___vfprintf_internal_r+0x1be4>
    6fd4:	42000204 	addi	r8,r8,8
    6fd8:	8001df16 	blt	r16,zero,7758 <___vfprintf_internal_r+0x1bdc>
    6fdc:	1421c83a 	sub	r16,r2,r16
    6fe0:	043ccc0e 	bge	zero,r16,6314 <__alt_mem_Flash_flash_data+0xf4006314>
    6fe4:	04800404 	movi	r18,16
    6fe8:	d8801f17 	ldw	r2,124(sp)
    6fec:	943efc0e 	bge	r18,r16,6be0 <__alt_mem_Flash_flash_data+0xf4006be0>
    6ff0:	014000b4 	movhi	r5,2
    6ff4:	29423d84 	addi	r5,r5,2294
    6ff8:	d9402c15 	stw	r5,176(sp)
    6ffc:	054001c4 	movi	r21,7
    7000:	00000306 	br	7010 <___vfprintf_internal_r+0x1494>
    7004:	42000204 	addi	r8,r8,8
    7008:	843ffc04 	addi	r16,r16,-16
    700c:	943ef70e 	bge	r18,r16,6bec <__alt_mem_Flash_flash_data+0xf4006bec>
    7010:	18c00404 	addi	r3,r3,16
    7014:	10800044 	addi	r2,r2,1
    7018:	45000015 	stw	r20,0(r8)
    701c:	44800115 	stw	r18,4(r8)
    7020:	d8c02015 	stw	r3,128(sp)
    7024:	d8801f15 	stw	r2,124(sp)
    7028:	a8bff60e 	bge	r21,r2,7004 <__alt_mem_Flash_flash_data+0xf4007004>
    702c:	b009883a 	mov	r4,r22
    7030:	b80b883a 	mov	r5,r23
    7034:	d9801e04 	addi	r6,sp,120
    7038:	000e0480 	call	e048 <__sprint_r>
    703c:	103bc31e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7040:	d8c02017 	ldw	r3,128(sp)
    7044:	d8801f17 	ldw	r2,124(sp)
    7048:	da000404 	addi	r8,sp,16
    704c:	003fee06 	br	7008 <__alt_mem_Flash_flash_data+0xf4007008>
    7050:	8888703a 	and	r4,r17,r2
    7054:	203eab1e 	bne	r4,zero,6b04 <__alt_mem_Flash_flash_data+0xf4006b04>
    7058:	dc001f17 	ldw	r16,124(sp)
    705c:	db003117 	ldw	r12,196(sp)
    7060:	40800115 	stw	r2,4(r8)
    7064:	84000044 	addi	r16,r16,1
    7068:	43000015 	stw	r12,0(r8)
    706c:	d8c02015 	stw	r3,128(sp)
    7070:	dc001f15 	stw	r16,124(sp)
    7074:	008001c4 	movi	r2,7
    7078:	14000e16 	blt	r2,r16,70b4 <___vfprintf_internal_r+0x1538>
    707c:	44800204 	addi	r18,r8,8
    7080:	003ecb06 	br	6bb0 <__alt_mem_Flash_flash_data+0xf4006bb0>
    7084:	008000b4 	movhi	r2,2
    7088:	10823d84 	addi	r2,r2,2294
    708c:	d8802c15 	stw	r2,176(sp)
    7090:	dac02c17 	ldw	r11,176(sp)
    7094:	1d47883a 	add	r3,r3,r21
    7098:	84000044 	addi	r16,r16,1
    709c:	92c00015 	stw	r11,0(r18)
    70a0:	95400115 	stw	r21,4(r18)
    70a4:	d8c02015 	stw	r3,128(sp)
    70a8:	dc001f15 	stw	r16,124(sp)
    70ac:	008001c4 	movi	r2,7
    70b0:	143ebe0e 	bge	r2,r16,6bac <__alt_mem_Flash_flash_data+0xf4006bac>
    70b4:	b009883a 	mov	r4,r22
    70b8:	b80b883a 	mov	r5,r23
    70bc:	d9801e04 	addi	r6,sp,120
    70c0:	000e0480 	call	e048 <__sprint_r>
    70c4:	103ba11e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    70c8:	d8c02017 	ldw	r3,128(sp)
    70cc:	dc001f17 	ldw	r16,124(sp)
    70d0:	dc800404 	addi	r18,sp,16
    70d4:	003eb606 	br	6bb0 <__alt_mem_Flash_flash_data+0xf4006bb0>
    70d8:	b009883a 	mov	r4,r22
    70dc:	b80b883a 	mov	r5,r23
    70e0:	d9801e04 	addi	r6,sp,120
    70e4:	000e0480 	call	e048 <__sprint_r>
    70e8:	103b981e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    70ec:	d8c02017 	ldw	r3,128(sp)
    70f0:	dc001f17 	ldw	r16,124(sp)
    70f4:	da000404 	addi	r8,sp,16
    70f8:	003e8d06 	br	6b30 <__alt_mem_Flash_flash_data+0xf4006b30>
    70fc:	b009883a 	mov	r4,r22
    7100:	b80b883a 	mov	r5,r23
    7104:	d9801e04 	addi	r6,sp,120
    7108:	000e0480 	call	e048 <__sprint_r>
    710c:	103b8f1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7110:	d8c02017 	ldw	r3,128(sp)
    7114:	dc001f17 	ldw	r16,124(sp)
    7118:	dc800404 	addi	r18,sp,16
    711c:	003e8f06 	br	6b5c <__alt_mem_Flash_flash_data+0xf4006b5c>
    7120:	db001e04 	addi	r12,sp,120
    7124:	0025883a 	mov	r18,zero
    7128:	db003115 	stw	r12,196(sp)
    712c:	003be106 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    7130:	b009883a 	mov	r4,r22
    7134:	b80b883a 	mov	r5,r23
    7138:	d9801e04 	addi	r6,sp,120
    713c:	000e0480 	call	e048 <__sprint_r>
    7140:	103b821e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7144:	d8c02017 	ldw	r3,128(sp)
    7148:	da000404 	addi	r8,sp,16
    714c:	003c3b06 	br	623c <__alt_mem_Flash_flash_data+0xf400623c>
    7150:	04e7c83a 	sub	r19,zero,r19
    7154:	9804c03a 	cmpne	r2,r19,zero
    7158:	0739c83a 	sub	fp,zero,fp
    715c:	e0b9c83a 	sub	fp,fp,r2
    7160:	05400b44 	movi	r21,45
    7164:	dd402785 	stb	r21,158(sp)
    7168:	da403215 	stw	r9,200(sp)
    716c:	00800044 	movi	r2,1
    7170:	9f06b03a 	or	r3,r19,fp
    7174:	003bb506 	br	604c <__alt_mem_Flash_flash_data+0xf400604c>
    7178:	da003f15 	stw	r8,252(sp)
    717c:	da403e15 	stw	r9,248(sp)
    7180:	000caa00 	call	caa0 <__fpclassifyd>
    7184:	da003f17 	ldw	r8,252(sp)
    7188:	da403e17 	ldw	r9,248(sp)
    718c:	1000ce26 	beq	r2,zero,74c8 <___vfprintf_internal_r+0x194c>
    7190:	057ff7c4 	movi	r21,-33
    7194:	00bfffc4 	movi	r2,-1
    7198:	856a703a 	and	r21,r16,r21
    719c:	4881e826 	beq	r9,r2,7940 <___vfprintf_internal_r+0x1dc4>
    71a0:	008011c4 	movi	r2,71
    71a4:	a881e326 	beq	r21,r2,7934 <___vfprintf_internal_r+0x1db8>
    71a8:	db003917 	ldw	r12,228(sp)
    71ac:	8ac04014 	ori	r11,r17,256
    71b0:	dac02d15 	stw	r11,180(sp)
    71b4:	6001ed16 	blt	r12,zero,796c <___vfprintf_internal_r+0x1df0>
    71b8:	dc803917 	ldw	r18,228(sp)
    71bc:	d8002b05 	stb	zero,172(sp)
    71c0:	00801984 	movi	r2,102
    71c4:	80811826 	beq	r16,r2,7628 <___vfprintf_internal_r+0x1aac>
    71c8:	00801184 	movi	r2,70
    71cc:	80811626 	beq	r16,r2,7628 <___vfprintf_internal_r+0x1aac>
    71d0:	00801144 	movi	r2,69
    71d4:	a881e926 	beq	r21,r2,797c <___vfprintf_internal_r+0x1e00>
    71d8:	4839883a 	mov	fp,r9
    71dc:	d8802604 	addi	r2,sp,152
    71e0:	d8800115 	stw	r2,4(sp)
    71e4:	d9403717 	ldw	r5,220(sp)
    71e8:	d8802504 	addi	r2,sp,148
    71ec:	d8800215 	stw	r2,8(sp)
    71f0:	d8802104 	addi	r2,sp,132
    71f4:	df000015 	stw	fp,0(sp)
    71f8:	d8800315 	stw	r2,12(sp)
    71fc:	b009883a 	mov	r4,r22
    7200:	900d883a 	mov	r6,r18
    7204:	01c00084 	movi	r7,2
    7208:	da003f15 	stw	r8,252(sp)
    720c:	da403e15 	stw	r9,248(sp)
    7210:	0007f000 	call	7f00 <_dtoa_r>
    7214:	d8803115 	stw	r2,196(sp)
    7218:	008019c4 	movi	r2,103
    721c:	da003f17 	ldw	r8,252(sp)
    7220:	da403e17 	ldw	r9,248(sp)
    7224:	80800226 	beq	r16,r2,7230 <___vfprintf_internal_r+0x16b4>
    7228:	008011c4 	movi	r2,71
    722c:	8081101e 	bne	r16,r2,7670 <___vfprintf_internal_r+0x1af4>
    7230:	8880004c 	andi	r2,r17,1
    7234:	1001dd26 	beq	r2,zero,79ac <___vfprintf_internal_r+0x1e30>
    7238:	db003117 	ldw	r12,196(sp)
    723c:	6715883a 	add	r10,r12,fp
    7240:	d9003717 	ldw	r4,220(sp)
    7244:	900b883a 	mov	r5,r18
    7248:	000d883a 	mov	r6,zero
    724c:	000f883a 	mov	r7,zero
    7250:	da003f15 	stw	r8,252(sp)
    7254:	da403e15 	stw	r9,248(sp)
    7258:	da803d15 	stw	r10,244(sp)
    725c:	0011aec0 	call	11aec <__eqdf2>
    7260:	da003f17 	ldw	r8,252(sp)
    7264:	da403e17 	ldw	r9,248(sp)
    7268:	da803d17 	ldw	r10,244(sp)
    726c:	10016526 	beq	r2,zero,7804 <___vfprintf_internal_r+0x1c88>
    7270:	d8802117 	ldw	r2,132(sp)
    7274:	1280062e 	bgeu	r2,r10,7290 <___vfprintf_internal_r+0x1714>
    7278:	01000c04 	movi	r4,48
    727c:	10c00044 	addi	r3,r2,1
    7280:	d8c02115 	stw	r3,132(sp)
    7284:	11000005 	stb	r4,0(r2)
    7288:	d8802117 	ldw	r2,132(sp)
    728c:	12bffb36 	bltu	r2,r10,727c <__alt_mem_Flash_flash_data+0xf400727c>
    7290:	db003117 	ldw	r12,196(sp)
    7294:	1305c83a 	sub	r2,r2,r12
    7298:	d8803315 	stw	r2,204(sp)
    729c:	008011c4 	movi	r2,71
    72a0:	a8814d26 	beq	r21,r2,77d8 <___vfprintf_internal_r+0x1c5c>
    72a4:	00801944 	movi	r2,101
    72a8:	1402060e 	bge	r2,r16,7ac4 <___vfprintf_internal_r+0x1f48>
    72ac:	00801984 	movi	r2,102
    72b0:	8081b426 	beq	r16,r2,7984 <___vfprintf_internal_r+0x1e08>
    72b4:	db002617 	ldw	r12,152(sp)
    72b8:	db003415 	stw	r12,208(sp)
    72bc:	db003417 	ldw	r12,208(sp)
    72c0:	dac03317 	ldw	r11,204(sp)
    72c4:	62c1a016 	blt	r12,r11,7948 <___vfprintf_internal_r+0x1dcc>
    72c8:	8c40004c 	andi	r17,r17,1
    72cc:	8801bf1e 	bne	r17,zero,79cc <___vfprintf_internal_r+0x1e50>
    72d0:	6005883a 	mov	r2,r12
    72d4:	6001b316 	blt	r12,zero,79a4 <___vfprintf_internal_r+0x1e28>
    72d8:	dc803417 	ldw	r18,208(sp)
    72dc:	df002b07 	ldb	fp,172(sp)
    72e0:	e0012e1e 	bne	fp,zero,779c <___vfprintf_internal_r+0x1c20>
    72e4:	dc402d17 	ldw	r17,180(sp)
    72e8:	dd402783 	ldbu	r21,158(sp)
    72ec:	d8802b15 	stw	r2,172(sp)
    72f0:	dcc02d15 	stw	r19,180(sp)
    72f4:	d8003215 	stw	zero,200(sp)
    72f8:	003b7306 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>
    72fc:	00800084 	movi	r2,2
    7300:	003c4d06 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    7304:	8880040c 	andi	r2,r17,16
    7308:	1000091e 	bne	r2,zero,7330 <___vfprintf_internal_r+0x17b4>
    730c:	8c40100c 	andi	r17,r17,64
    7310:	88000726 	beq	r17,zero,7330 <___vfprintf_internal_r+0x17b4>
    7314:	db002d17 	ldw	r12,180(sp)
    7318:	dac02f17 	ldw	r11,188(sp)
    731c:	60800017 	ldw	r2,0(r12)
    7320:	63000104 	addi	r12,r12,4
    7324:	db002d15 	stw	r12,180(sp)
    7328:	12c0000d 	sth	r11,0(r2)
    732c:	003a4e06 	br	5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    7330:	db002d17 	ldw	r12,180(sp)
    7334:	dac02f17 	ldw	r11,188(sp)
    7338:	60800017 	ldw	r2,0(r12)
    733c:	63000104 	addi	r12,r12,4
    7340:	db002d15 	stw	r12,180(sp)
    7344:	12c00015 	stw	r11,0(r2)
    7348:	003a4706 	br	5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    734c:	1c000007 	ldb	r16,0(r3)
    7350:	1805883a 	mov	r2,r3
    7354:	003a6e06 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    7358:	88c0100c 	andi	r3,r17,64
    735c:	18006b26 	beq	r3,zero,750c <___vfprintf_internal_r+0x1990>
    7360:	dac02d17 	ldw	r11,180(sp)
    7364:	14c0000b 	ldhu	r19,0(r2)
    7368:	0039883a 	mov	fp,zero
    736c:	5ac00104 	addi	r11,r11,4
    7370:	dac02d15 	stw	r11,180(sp)
    7374:	003cb206 	br	6640 <__alt_mem_Flash_flash_data+0xf4006640>
    7378:	010000b4 	movhi	r4,2
    737c:	21023d84 	addi	r4,r4,2294
    7380:	d9002c15 	stw	r4,176(sp)
    7384:	dac02c17 	ldw	r11,176(sp)
    7388:	1c87883a 	add	r3,r3,r18
    738c:	10800044 	addi	r2,r2,1
    7390:	42c00015 	stw	r11,0(r8)
    7394:	44800115 	stw	r18,4(r8)
    7398:	d8c02015 	stw	r3,128(sp)
    739c:	d8801f15 	stw	r2,124(sp)
    73a0:	010001c4 	movi	r4,7
    73a4:	20bee016 	blt	r4,r2,6f28 <__alt_mem_Flash_flash_data+0xf4006f28>
    73a8:	42000204 	addi	r8,r8,8
    73ac:	003ee506 	br	6f44 <__alt_mem_Flash_flash_data+0xf4006f44>
    73b0:	010000b4 	movhi	r4,2
    73b4:	21023d84 	addi	r4,r4,2294
    73b8:	d9002c15 	stw	r4,176(sp)
    73bc:	003bbe06 	br	62b8 <__alt_mem_Flash_flash_data+0xf40062b8>
    73c0:	b009883a 	mov	r4,r22
    73c4:	b80b883a 	mov	r5,r23
    73c8:	d9801e04 	addi	r6,sp,120
    73cc:	000e0480 	call	e048 <__sprint_r>
    73d0:	103ade1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    73d4:	d8c02017 	ldw	r3,128(sp)
    73d8:	da000404 	addi	r8,sp,16
    73dc:	003d6b06 	br	698c <__alt_mem_Flash_flash_data+0xf400698c>
    73e0:	d8801f17 	ldw	r2,124(sp)
    73e4:	030000b4 	movhi	r12,2
    73e8:	01000044 	movi	r4,1
    73ec:	18c00044 	addi	r3,r3,1
    73f0:	10800044 	addi	r2,r2,1
    73f4:	63023504 	addi	r12,r12,2260
    73f8:	41000115 	stw	r4,4(r8)
    73fc:	43000015 	stw	r12,0(r8)
    7400:	d8c02015 	stw	r3,128(sp)
    7404:	d8801f15 	stw	r2,124(sp)
    7408:	010001c4 	movi	r4,7
    740c:	20804916 	blt	r4,r2,7534 <___vfprintf_internal_r+0x19b8>
    7410:	42000204 	addi	r8,r8,8
    7414:	8000041e 	bne	r16,zero,7428 <___vfprintf_internal_r+0x18ac>
    7418:	dac03317 	ldw	r11,204(sp)
    741c:	5800021e 	bne	r11,zero,7428 <___vfprintf_internal_r+0x18ac>
    7420:	8880004c 	andi	r2,r17,1
    7424:	103bbb26 	beq	r2,zero,6314 <__alt_mem_Flash_flash_data+0xf4006314>
    7428:	db003817 	ldw	r12,224(sp)
    742c:	d8801f17 	ldw	r2,124(sp)
    7430:	dac03517 	ldw	r11,212(sp)
    7434:	1b07883a 	add	r3,r3,r12
    7438:	10800044 	addi	r2,r2,1
    743c:	42c00015 	stw	r11,0(r8)
    7440:	43000115 	stw	r12,4(r8)
    7444:	d8c02015 	stw	r3,128(sp)
    7448:	d8801f15 	stw	r2,124(sp)
    744c:	010001c4 	movi	r4,7
    7450:	20812e16 	blt	r4,r2,790c <___vfprintf_internal_r+0x1d90>
    7454:	42000204 	addi	r8,r8,8
    7458:	0421c83a 	sub	r16,zero,r16
    745c:	04005c0e 	bge	zero,r16,75d0 <___vfprintf_internal_r+0x1a54>
    7460:	04800404 	movi	r18,16
    7464:	94009f0e 	bge	r18,r16,76e4 <___vfprintf_internal_r+0x1b68>
    7468:	010000b4 	movhi	r4,2
    746c:	21023d84 	addi	r4,r4,2294
    7470:	d9002c15 	stw	r4,176(sp)
    7474:	054001c4 	movi	r21,7
    7478:	00000306 	br	7488 <___vfprintf_internal_r+0x190c>
    747c:	42000204 	addi	r8,r8,8
    7480:	843ffc04 	addi	r16,r16,-16
    7484:	94009a0e 	bge	r18,r16,76f0 <___vfprintf_internal_r+0x1b74>
    7488:	18c00404 	addi	r3,r3,16
    748c:	10800044 	addi	r2,r2,1
    7490:	45000015 	stw	r20,0(r8)
    7494:	44800115 	stw	r18,4(r8)
    7498:	d8c02015 	stw	r3,128(sp)
    749c:	d8801f15 	stw	r2,124(sp)
    74a0:	a8bff60e 	bge	r21,r2,747c <__alt_mem_Flash_flash_data+0xf400747c>
    74a4:	b009883a 	mov	r4,r22
    74a8:	b80b883a 	mov	r5,r23
    74ac:	d9801e04 	addi	r6,sp,120
    74b0:	000e0480 	call	e048 <__sprint_r>
    74b4:	103aa51e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    74b8:	d8c02017 	ldw	r3,128(sp)
    74bc:	d8801f17 	ldw	r2,124(sp)
    74c0:	da000404 	addi	r8,sp,16
    74c4:	003fee06 	br	7480 <__alt_mem_Flash_flash_data+0xf4007480>
    74c8:	008011c4 	movi	r2,71
    74cc:	1400be16 	blt	r2,r16,77c8 <___vfprintf_internal_r+0x1c4c>
    74d0:	030000b4 	movhi	r12,2
    74d4:	63022704 	addi	r12,r12,2204
    74d8:	db003115 	stw	r12,196(sp)
    74dc:	00c000c4 	movi	r3,3
    74e0:	00bfdfc4 	movi	r2,-129
    74e4:	d8c02b15 	stw	r3,172(sp)
    74e8:	88a2703a 	and	r17,r17,r2
    74ec:	dd402783 	ldbu	r21,158(sp)
    74f0:	dcc02d15 	stw	r19,180(sp)
    74f4:	1825883a 	mov	r18,r3
    74f8:	d8003215 	stw	zero,200(sp)
    74fc:	d8003415 	stw	zero,208(sp)
    7500:	003af106 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>
    7504:	4825883a 	mov	r18,r9
    7508:	003c9306 	br	6758 <__alt_mem_Flash_flash_data+0xf4006758>
    750c:	db002d17 	ldw	r12,180(sp)
    7510:	14c00017 	ldw	r19,0(r2)
    7514:	0039883a 	mov	fp,zero
    7518:	63000104 	addi	r12,r12,4
    751c:	db002d15 	stw	r12,180(sp)
    7520:	003c4706 	br	6640 <__alt_mem_Flash_flash_data+0xf4006640>
    7524:	008000b4 	movhi	r2,2
    7528:	10822504 	addi	r2,r2,2196
    752c:	d8803115 	stw	r2,196(sp)
    7530:	003bf106 	br	64f8 <__alt_mem_Flash_flash_data+0xf40064f8>
    7534:	b009883a 	mov	r4,r22
    7538:	b80b883a 	mov	r5,r23
    753c:	d9801e04 	addi	r6,sp,120
    7540:	000e0480 	call	e048 <__sprint_r>
    7544:	103a811e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7548:	dc002617 	ldw	r16,152(sp)
    754c:	d8c02017 	ldw	r3,128(sp)
    7550:	da000404 	addi	r8,sp,16
    7554:	003faf06 	br	7414 <__alt_mem_Flash_flash_data+0xf4007414>
    7558:	db002e17 	ldw	r12,184(sp)
    755c:	1805883a 	mov	r2,r3
    7560:	dac02d15 	stw	r11,180(sp)
    7564:	0319c83a 	sub	r12,zero,r12
    7568:	db002e15 	stw	r12,184(sp)
    756c:	003a8206 	br	5f78 <__alt_mem_Flash_flash_data+0xf4005f78>
    7570:	18800044 	addi	r2,r3,1
    7574:	8c400814 	ori	r17,r17,32
    7578:	1c000047 	ldb	r16,1(r3)
    757c:	0039e406 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    7580:	b009883a 	mov	r4,r22
    7584:	b80b883a 	mov	r5,r23
    7588:	d9801e04 	addi	r6,sp,120
    758c:	000e0480 	call	e048 <__sprint_r>
    7590:	103a6e1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7594:	d8c02017 	ldw	r3,128(sp)
    7598:	da000404 	addi	r8,sp,16
    759c:	003d0c06 	br	69d0 <__alt_mem_Flash_flash_data+0xf40069d0>
    75a0:	db002817 	ldw	r12,160(sp)
    75a4:	d8c03117 	ldw	r3,196(sp)
    75a8:	60e5c83a 	sub	r18,r12,r3
    75ac:	003ac106 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>
    75b0:	b009883a 	mov	r4,r22
    75b4:	b80b883a 	mov	r5,r23
    75b8:	d9801e04 	addi	r6,sp,120
    75bc:	000e0480 	call	e048 <__sprint_r>
    75c0:	103a621e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    75c4:	d8c02017 	ldw	r3,128(sp)
    75c8:	d8801f17 	ldw	r2,124(sp)
    75cc:	da000404 	addi	r8,sp,16
    75d0:	db003317 	ldw	r12,204(sp)
    75d4:	dac03117 	ldw	r11,196(sp)
    75d8:	10800044 	addi	r2,r2,1
    75dc:	1b07883a 	add	r3,r3,r12
    75e0:	42c00015 	stw	r11,0(r8)
    75e4:	43000115 	stw	r12,4(r8)
    75e8:	d8c02015 	stw	r3,128(sp)
    75ec:	d8801f15 	stw	r2,124(sp)
    75f0:	010001c4 	movi	r4,7
    75f4:	20bb460e 	bge	r4,r2,6310 <__alt_mem_Flash_flash_data+0xf4006310>
    75f8:	003d8506 	br	6c10 <__alt_mem_Flash_flash_data+0xf4006c10>
    75fc:	da003f15 	stw	r8,252(sp)
    7600:	0003b540 	call	3b54 <strlen>
    7604:	1025883a 	mov	r18,r2
    7608:	da003f17 	ldw	r8,252(sp)
    760c:	903c540e 	bge	r18,zero,6760 <__alt_mem_Flash_flash_data+0xf4006760>
    7610:	0005883a 	mov	r2,zero
    7614:	003c5206 	br	6760 <__alt_mem_Flash_flash_data+0xf4006760>
    7618:	010000b4 	movhi	r4,2
    761c:	21024184 	addi	r4,r4,2310
    7620:	d9003615 	stw	r4,216(sp)
    7624:	003adc06 	br	6198 <__alt_mem_Flash_flash_data+0xf4006198>
    7628:	d8802604 	addi	r2,sp,152
    762c:	d8800115 	stw	r2,4(sp)
    7630:	d9403717 	ldw	r5,220(sp)
    7634:	d8802504 	addi	r2,sp,148
    7638:	d8800215 	stw	r2,8(sp)
    763c:	d8802104 	addi	r2,sp,132
    7640:	da400015 	stw	r9,0(sp)
    7644:	d8800315 	stw	r2,12(sp)
    7648:	b009883a 	mov	r4,r22
    764c:	900d883a 	mov	r6,r18
    7650:	01c000c4 	movi	r7,3
    7654:	da003f15 	stw	r8,252(sp)
    7658:	da403e15 	stw	r9,248(sp)
    765c:	0007f000 	call	7f00 <_dtoa_r>
    7660:	da403e17 	ldw	r9,248(sp)
    7664:	da003f17 	ldw	r8,252(sp)
    7668:	d8803115 	stw	r2,196(sp)
    766c:	4839883a 	mov	fp,r9
    7670:	dac03117 	ldw	r11,196(sp)
    7674:	00801184 	movi	r2,70
    7678:	5f15883a 	add	r10,r11,fp
    767c:	a8bef01e 	bne	r21,r2,7240 <__alt_mem_Flash_flash_data+0xf4007240>
    7680:	59000007 	ldb	r4,0(r11)
    7684:	00800c04 	movi	r2,48
    7688:	2080d526 	beq	r4,r2,79e0 <___vfprintf_internal_r+0x1e64>
    768c:	d8c02617 	ldw	r3,152(sp)
    7690:	50d5883a 	add	r10,r10,r3
    7694:	003eea06 	br	7240 <__alt_mem_Flash_flash_data+0xf4007240>
    7698:	0025883a 	mov	r18,zero
    769c:	003db306 	br	6d6c <__alt_mem_Flash_flash_data+0xf4006d6c>
    76a0:	b009883a 	mov	r4,r22
    76a4:	b80b883a 	mov	r5,r23
    76a8:	d9801e04 	addi	r6,sp,120
    76ac:	000e0480 	call	e048 <__sprint_r>
    76b0:	103a261e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    76b4:	d8c02017 	ldw	r3,128(sp)
    76b8:	da000404 	addi	r8,sp,16
    76bc:	003daa06 	br	6d68 <__alt_mem_Flash_flash_data+0xf4006d68>
    76c0:	b009883a 	mov	r4,r22
    76c4:	b80b883a 	mov	r5,r23
    76c8:	d9801e04 	addi	r6,sp,120
    76cc:	000e0480 	call	e048 <__sprint_r>
    76d0:	103a1e1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    76d4:	d8802617 	ldw	r2,152(sp)
    76d8:	d8c02017 	ldw	r3,128(sp)
    76dc:	da000404 	addi	r8,sp,16
    76e0:	003e2c06 	br	6f94 <__alt_mem_Flash_flash_data+0xf4006f94>
    76e4:	030000b4 	movhi	r12,2
    76e8:	63023d84 	addi	r12,r12,2294
    76ec:	db002c15 	stw	r12,176(sp)
    76f0:	dac02c17 	ldw	r11,176(sp)
    76f4:	1c07883a 	add	r3,r3,r16
    76f8:	10800044 	addi	r2,r2,1
    76fc:	42c00015 	stw	r11,0(r8)
    7700:	44000115 	stw	r16,4(r8)
    7704:	d8c02015 	stw	r3,128(sp)
    7708:	d8801f15 	stw	r2,124(sp)
    770c:	010001c4 	movi	r4,7
    7710:	20bfa716 	blt	r4,r2,75b0 <__alt_mem_Flash_flash_data+0xf40075b0>
    7714:	42000204 	addi	r8,r8,8
    7718:	003fad06 	br	75d0 <__alt_mem_Flash_flash_data+0xf40075d0>
    771c:	00800184 	movi	r2,6
    7720:	1240012e 	bgeu	r2,r9,7728 <___vfprintf_internal_r+0x1bac>
    7724:	1013883a 	mov	r9,r2
    7728:	4825883a 	mov	r18,r9
    772c:	4805883a 	mov	r2,r9
    7730:	4800c216 	blt	r9,zero,7a3c <___vfprintf_internal_r+0x1ec0>
    7734:	d8802b15 	stw	r2,172(sp)
    7738:	008000b4 	movhi	r2,2
    773c:	10823304 	addi	r2,r2,2252
    7740:	d8803115 	stw	r2,196(sp)
    7744:	dcc02d15 	stw	r19,180(sp)
    7748:	d8003215 	stw	zero,200(sp)
    774c:	d8003415 	stw	zero,208(sp)
    7750:	0005883a 	mov	r2,zero
    7754:	003a6306 	br	60e4 <__alt_mem_Flash_flash_data+0xf40060e4>
    7758:	0021883a 	mov	r16,zero
    775c:	003e1f06 	br	6fdc <__alt_mem_Flash_flash_data+0xf4006fdc>
    7760:	b009883a 	mov	r4,r22
    7764:	b80b883a 	mov	r5,r23
    7768:	d9801e04 	addi	r6,sp,120
    776c:	000e0480 	call	e048 <__sprint_r>
    7770:	1039f61e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7774:	d8802617 	ldw	r2,152(sp)
    7778:	db003317 	ldw	r12,204(sp)
    777c:	d8c02017 	ldw	r3,128(sp)
    7780:	da000404 	addi	r8,sp,16
    7784:	6085c83a 	sub	r2,r12,r2
    7788:	003e1306 	br	6fd8 <__alt_mem_Flash_flash_data+0xf4006fd8>
    778c:	030000b4 	movhi	r12,2
    7790:	63024184 	addi	r12,r12,2310
    7794:	db003615 	stw	r12,216(sp)
    7798:	003b0206 	br	63a4 <__alt_mem_Flash_flash_data+0xf40063a4>
    779c:	00c00b44 	movi	r3,45
    77a0:	d8802b15 	stw	r2,172(sp)
    77a4:	dc402d17 	ldw	r17,180(sp)
    77a8:	d8c02785 	stb	r3,158(sp)
    77ac:	dcc02d15 	stw	r19,180(sp)
    77b0:	d8003215 	stw	zero,200(sp)
    77b4:	00800b44 	movi	r2,45
    77b8:	003a4706 	br	60d8 <__alt_mem_Flash_flash_data+0xf40060d8>
    77bc:	05400b44 	movi	r21,45
    77c0:	dd402785 	stb	r21,158(sp)
    77c4:	003b4706 	br	64e4 <__alt_mem_Flash_flash_data+0xf40064e4>
    77c8:	008000b4 	movhi	r2,2
    77cc:	10822804 	addi	r2,r2,2208
    77d0:	d8803115 	stw	r2,196(sp)
    77d4:	003f4106 	br	74dc <__alt_mem_Flash_flash_data+0xf40074dc>
    77d8:	d8c02617 	ldw	r3,152(sp)
    77dc:	00bfff44 	movi	r2,-3
    77e0:	18801116 	blt	r3,r2,7828 <___vfprintf_internal_r+0x1cac>
    77e4:	48c01016 	blt	r9,r3,7828 <___vfprintf_internal_r+0x1cac>
    77e8:	d8c03415 	stw	r3,208(sp)
    77ec:	040019c4 	movi	r16,103
    77f0:	003eb206 	br	72bc <__alt_mem_Flash_flash_data+0xf40072bc>
    77f4:	010000b4 	movhi	r4,2
    77f8:	21023d84 	addi	r4,r4,2294
    77fc:	d9002c15 	stw	r4,176(sp)
    7800:	003cb106 	br	6ac8 <__alt_mem_Flash_flash_data+0xf4006ac8>
    7804:	5005883a 	mov	r2,r10
    7808:	003ea106 	br	7290 <__alt_mem_Flash_flash_data+0xf4007290>
    780c:	da402b15 	stw	r9,172(sp)
    7810:	dd402783 	ldbu	r21,158(sp)
    7814:	4825883a 	mov	r18,r9
    7818:	dcc02d15 	stw	r19,180(sp)
    781c:	d8003215 	stw	zero,200(sp)
    7820:	d8003415 	stw	zero,208(sp)
    7824:	003a2806 	br	60c8 <__alt_mem_Flash_flash_data+0xf40060c8>
    7828:	843fff84 	addi	r16,r16,-2
    782c:	1f3fffc4 	addi	fp,r3,-1
    7830:	df002615 	stw	fp,152(sp)
    7834:	dc0022c5 	stb	r16,139(sp)
    7838:	e0009816 	blt	fp,zero,7a9c <___vfprintf_internal_r+0x1f20>
    783c:	00800ac4 	movi	r2,43
    7840:	d8802305 	stb	r2,140(sp)
    7844:	00800244 	movi	r2,9
    7848:	1700750e 	bge	r2,fp,7a20 <___vfprintf_internal_r+0x1ea4>
    784c:	dd4022c4 	addi	r21,sp,139
    7850:	dc002c15 	stw	r16,176(sp)
    7854:	4025883a 	mov	r18,r8
    7858:	a821883a 	mov	r16,r21
    785c:	e009883a 	mov	r4,fp
    7860:	01400284 	movi	r5,10
    7864:	00109180 	call	10918 <__modsi3>
    7868:	10800c04 	addi	r2,r2,48
    786c:	843fffc4 	addi	r16,r16,-1
    7870:	e009883a 	mov	r4,fp
    7874:	01400284 	movi	r5,10
    7878:	80800005 	stb	r2,0(r16)
    787c:	00108c40 	call	108c4 <__divsi3>
    7880:	1039883a 	mov	fp,r2
    7884:	00800244 	movi	r2,9
    7888:	173ff416 	blt	r2,fp,785c <__alt_mem_Flash_flash_data+0xf400785c>
    788c:	9011883a 	mov	r8,r18
    7890:	e0800c04 	addi	r2,fp,48
    7894:	8025883a 	mov	r18,r16
    7898:	913fffc4 	addi	r4,r18,-1
    789c:	90bfffc5 	stb	r2,-1(r18)
    78a0:	dc002c17 	ldw	r16,176(sp)
    78a4:	2540852e 	bgeu	r4,r21,7abc <___vfprintf_internal_r+0x1f40>
    78a8:	d9402384 	addi	r5,sp,142
    78ac:	2c8bc83a 	sub	r5,r5,r18
    78b0:	d8c02344 	addi	r3,sp,141
    78b4:	a94b883a 	add	r5,r21,r5
    78b8:	00000106 	br	78c0 <___vfprintf_internal_r+0x1d44>
    78bc:	20800003 	ldbu	r2,0(r4)
    78c0:	18800005 	stb	r2,0(r3)
    78c4:	18c00044 	addi	r3,r3,1
    78c8:	21000044 	addi	r4,r4,1
    78cc:	197ffb1e 	bne	r3,r5,78bc <__alt_mem_Flash_flash_data+0xf40078bc>
    78d0:	d8802304 	addi	r2,sp,140
    78d4:	1485c83a 	sub	r2,r2,r18
    78d8:	d8c02344 	addi	r3,sp,141
    78dc:	1885883a 	add	r2,r3,r2
    78e0:	dac03317 	ldw	r11,204(sp)
    78e4:	156bc83a 	sub	r21,r2,r21
    78e8:	dd403a15 	stw	r21,232(sp)
    78ec:	00800044 	movi	r2,1
    78f0:	5d65883a 	add	r18,r11,r21
    78f4:	12c0660e 	bge	r2,r11,7a90 <___vfprintf_internal_r+0x1f14>
    78f8:	94800044 	addi	r18,r18,1
    78fc:	9005883a 	mov	r2,r18
    7900:	90006116 	blt	r18,zero,7a88 <___vfprintf_internal_r+0x1f0c>
    7904:	d8003415 	stw	zero,208(sp)
    7908:	003e7406 	br	72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    790c:	b009883a 	mov	r4,r22
    7910:	b80b883a 	mov	r5,r23
    7914:	d9801e04 	addi	r6,sp,120
    7918:	000e0480 	call	e048 <__sprint_r>
    791c:	10398b1e 	bne	r2,zero,5f4c <__alt_mem_Flash_flash_data+0xf4005f4c>
    7920:	dc002617 	ldw	r16,152(sp)
    7924:	d8c02017 	ldw	r3,128(sp)
    7928:	d8801f17 	ldw	r2,124(sp)
    792c:	da000404 	addi	r8,sp,16
    7930:	003ec906 	br	7458 <__alt_mem_Flash_flash_data+0xf4007458>
    7934:	483e1c1e 	bne	r9,zero,71a8 <__alt_mem_Flash_flash_data+0xf40071a8>
    7938:	9013883a 	mov	r9,r18
    793c:	003e1a06 	br	71a8 <__alt_mem_Flash_flash_data+0xf40071a8>
    7940:	02400184 	movi	r9,6
    7944:	003e1806 	br	71a8 <__alt_mem_Flash_flash_data+0xf40071a8>
    7948:	d8c03417 	ldw	r3,208(sp)
    794c:	00c04b0e 	bge	zero,r3,7a7c <___vfprintf_internal_r+0x1f00>
    7950:	04800044 	movi	r18,1
    7954:	dac03317 	ldw	r11,204(sp)
    7958:	92e5883a 	add	r18,r18,r11
    795c:	9005883a 	mov	r2,r18
    7960:	903e5e0e 	bge	r18,zero,72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    7964:	0005883a 	mov	r2,zero
    7968:	003e5c06 	br	72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    796c:	00c00b44 	movi	r3,45
    7970:	64a0003c 	xorhi	r18,r12,32768
    7974:	d8c02b05 	stb	r3,172(sp)
    7978:	003e1106 	br	71c0 <__alt_mem_Flash_flash_data+0xf40071c0>
    797c:	4f000044 	addi	fp,r9,1
    7980:	003e1606 	br	71dc <__alt_mem_Flash_flash_data+0xf40071dc>
    7984:	d8c02617 	ldw	r3,152(sp)
    7988:	d8c03415 	stw	r3,208(sp)
    798c:	00c0350e 	bge	zero,r3,7a64 <___vfprintf_internal_r+0x1ee8>
    7990:	4800081e 	bne	r9,zero,79b4 <___vfprintf_internal_r+0x1e38>
    7994:	8c40004c 	andi	r17,r17,1
    7998:	8800061e 	bne	r17,zero,79b4 <___vfprintf_internal_r+0x1e38>
    799c:	1805883a 	mov	r2,r3
    79a0:	183e4d0e 	bge	r3,zero,72d8 <__alt_mem_Flash_flash_data+0xf40072d8>
    79a4:	0005883a 	mov	r2,zero
    79a8:	003e4b06 	br	72d8 <__alt_mem_Flash_flash_data+0xf40072d8>
    79ac:	d8802117 	ldw	r2,132(sp)
    79b0:	003e3706 	br	7290 <__alt_mem_Flash_flash_data+0xf4007290>
    79b4:	dac03417 	ldw	r11,208(sp)
    79b8:	4a400044 	addi	r9,r9,1
    79bc:	5a65883a 	add	r18,r11,r9
    79c0:	9005883a 	mov	r2,r18
    79c4:	903e450e 	bge	r18,zero,72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    79c8:	003fe606 	br	7964 <__alt_mem_Flash_flash_data+0xf4007964>
    79cc:	db003417 	ldw	r12,208(sp)
    79d0:	64800044 	addi	r18,r12,1
    79d4:	9005883a 	mov	r2,r18
    79d8:	903e400e 	bge	r18,zero,72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    79dc:	003fe106 	br	7964 <__alt_mem_Flash_flash_data+0xf4007964>
    79e0:	d9003717 	ldw	r4,220(sp)
    79e4:	900b883a 	mov	r5,r18
    79e8:	000d883a 	mov	r6,zero
    79ec:	000f883a 	mov	r7,zero
    79f0:	da003f15 	stw	r8,252(sp)
    79f4:	da403e15 	stw	r9,248(sp)
    79f8:	da803d15 	stw	r10,244(sp)
    79fc:	0011aec0 	call	11aec <__eqdf2>
    7a00:	da003f17 	ldw	r8,252(sp)
    7a04:	da403e17 	ldw	r9,248(sp)
    7a08:	da803d17 	ldw	r10,244(sp)
    7a0c:	103f1f26 	beq	r2,zero,768c <__alt_mem_Flash_flash_data+0xf400768c>
    7a10:	00800044 	movi	r2,1
    7a14:	1707c83a 	sub	r3,r2,fp
    7a18:	d8c02615 	stw	r3,152(sp)
    7a1c:	003f1c06 	br	7690 <__alt_mem_Flash_flash_data+0xf4007690>
    7a20:	00800c04 	movi	r2,48
    7a24:	e0c00c04 	addi	r3,fp,48
    7a28:	d8802345 	stb	r2,141(sp)
    7a2c:	d8c02385 	stb	r3,142(sp)
    7a30:	d88023c4 	addi	r2,sp,143
    7a34:	dd4022c4 	addi	r21,sp,139
    7a38:	003fa906 	br	78e0 <__alt_mem_Flash_flash_data+0xf40078e0>
    7a3c:	0005883a 	mov	r2,zero
    7a40:	003f3c06 	br	7734 <__alt_mem_Flash_flash_data+0xf4007734>
    7a44:	dac02d17 	ldw	r11,180(sp)
    7a48:	5a400017 	ldw	r9,0(r11)
    7a4c:	5ac00104 	addi	r11,r11,4
    7a50:	dac02d15 	stw	r11,180(sp)
    7a54:	483ec80e 	bge	r9,zero,7578 <__alt_mem_Flash_flash_data+0xf4007578>
    7a58:	027fffc4 	movi	r9,-1
    7a5c:	1c000047 	ldb	r16,1(r3)
    7a60:	0038ab06 	br	5d10 <__alt_mem_Flash_flash_data+0xf4005d10>
    7a64:	4800111e 	bne	r9,zero,7aac <___vfprintf_internal_r+0x1f30>
    7a68:	8c40004c 	andi	r17,r17,1
    7a6c:	88000f1e 	bne	r17,zero,7aac <___vfprintf_internal_r+0x1f30>
    7a70:	00800044 	movi	r2,1
    7a74:	1025883a 	mov	r18,r2
    7a78:	003e1806 	br	72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    7a7c:	04800084 	movi	r18,2
    7a80:	90e5c83a 	sub	r18,r18,r3
    7a84:	003fb306 	br	7954 <__alt_mem_Flash_flash_data+0xf4007954>
    7a88:	0005883a 	mov	r2,zero
    7a8c:	003f9d06 	br	7904 <__alt_mem_Flash_flash_data+0xf4007904>
    7a90:	88a2703a 	and	r17,r17,r2
    7a94:	883f9926 	beq	r17,zero,78fc <__alt_mem_Flash_flash_data+0xf40078fc>
    7a98:	003f9706 	br	78f8 <__alt_mem_Flash_flash_data+0xf40078f8>
    7a9c:	00800b44 	movi	r2,45
    7aa0:	0739c83a 	sub	fp,zero,fp
    7aa4:	d8802305 	stb	r2,140(sp)
    7aa8:	003f6606 	br	7844 <__alt_mem_Flash_flash_data+0xf4007844>
    7aac:	4c800084 	addi	r18,r9,2
    7ab0:	9005883a 	mov	r2,r18
    7ab4:	903e090e 	bge	r18,zero,72dc <__alt_mem_Flash_flash_data+0xf40072dc>
    7ab8:	003faa06 	br	7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7abc:	d8802344 	addi	r2,sp,141
    7ac0:	003f8706 	br	78e0 <__alt_mem_Flash_flash_data+0xf40078e0>
    7ac4:	d8c02617 	ldw	r3,152(sp)
    7ac8:	003f5806 	br	782c <__alt_mem_Flash_flash_data+0xf400782c>

00007acc <__vfprintf_internal>:
    7acc:	2007883a 	mov	r3,r4
    7ad0:	010000b4 	movhi	r4,2
    7ad4:	210b3f04 	addi	r4,r4,11516
    7ad8:	21000017 	ldw	r4,0(r4)
    7adc:	2805883a 	mov	r2,r5
    7ae0:	300f883a 	mov	r7,r6
    7ae4:	180b883a 	mov	r5,r3
    7ae8:	100d883a 	mov	r6,r2
    7aec:	0005b7c1 	jmpi	5b7c <___vfprintf_internal_r>

00007af0 <__sbprintf>:
    7af0:	2880030b 	ldhu	r2,12(r5)
    7af4:	2ac01917 	ldw	r11,100(r5)
    7af8:	2a80038b 	ldhu	r10,14(r5)
    7afc:	2a400717 	ldw	r9,28(r5)
    7b00:	2a000917 	ldw	r8,36(r5)
    7b04:	defee204 	addi	sp,sp,-1144
    7b08:	00c10004 	movi	r3,1024
    7b0c:	dc011a15 	stw	r16,1128(sp)
    7b10:	10bfff4c 	andi	r2,r2,65533
    7b14:	2821883a 	mov	r16,r5
    7b18:	d8cb883a 	add	r5,sp,r3
    7b1c:	dc811c15 	stw	r18,1136(sp)
    7b20:	dc411b15 	stw	r17,1132(sp)
    7b24:	dfc11d15 	stw	ra,1140(sp)
    7b28:	2025883a 	mov	r18,r4
    7b2c:	d881030d 	sth	r2,1036(sp)
    7b30:	dac11915 	stw	r11,1124(sp)
    7b34:	da81038d 	sth	r10,1038(sp)
    7b38:	da410715 	stw	r9,1052(sp)
    7b3c:	da010915 	stw	r8,1060(sp)
    7b40:	dec10015 	stw	sp,1024(sp)
    7b44:	dec10415 	stw	sp,1040(sp)
    7b48:	d8c10215 	stw	r3,1032(sp)
    7b4c:	d8c10515 	stw	r3,1044(sp)
    7b50:	d8010615 	stw	zero,1048(sp)
    7b54:	0005b7c0 	call	5b7c <___vfprintf_internal_r>
    7b58:	1023883a 	mov	r17,r2
    7b5c:	10000416 	blt	r2,zero,7b70 <__sbprintf+0x80>
    7b60:	9009883a 	mov	r4,r18
    7b64:	d9410004 	addi	r5,sp,1024
    7b68:	00098300 	call	9830 <_fflush_r>
    7b6c:	10000d1e 	bne	r2,zero,7ba4 <__sbprintf+0xb4>
    7b70:	d8c1030b 	ldhu	r3,1036(sp)
    7b74:	18c0100c 	andi	r3,r3,64
    7b78:	18000326 	beq	r3,zero,7b88 <__sbprintf+0x98>
    7b7c:	8080030b 	ldhu	r2,12(r16)
    7b80:	10801014 	ori	r2,r2,64
    7b84:	8080030d 	sth	r2,12(r16)
    7b88:	8805883a 	mov	r2,r17
    7b8c:	dfc11d17 	ldw	ra,1140(sp)
    7b90:	dc811c17 	ldw	r18,1136(sp)
    7b94:	dc411b17 	ldw	r17,1132(sp)
    7b98:	dc011a17 	ldw	r16,1128(sp)
    7b9c:	dec11e04 	addi	sp,sp,1144
    7ba0:	f800283a 	ret
    7ba4:	047fffc4 	movi	r17,-1
    7ba8:	003ff106 	br	7b70 <__alt_mem_Flash_flash_data+0xf4007b70>

00007bac <__swsetup_r>:
    7bac:	008000b4 	movhi	r2,2
    7bb0:	defffd04 	addi	sp,sp,-12
    7bb4:	108b3f04 	addi	r2,r2,11516
    7bb8:	dc400115 	stw	r17,4(sp)
    7bbc:	2023883a 	mov	r17,r4
    7bc0:	11000017 	ldw	r4,0(r2)
    7bc4:	dc000015 	stw	r16,0(sp)
    7bc8:	dfc00215 	stw	ra,8(sp)
    7bcc:	2821883a 	mov	r16,r5
    7bd0:	20000226 	beq	r4,zero,7bdc <__swsetup_r+0x30>
    7bd4:	20c00e17 	ldw	r3,56(r4)
    7bd8:	18003126 	beq	r3,zero,7ca0 <__swsetup_r+0xf4>
    7bdc:	8080030b 	ldhu	r2,12(r16)
    7be0:	10c0020c 	andi	r3,r2,8
    7be4:	100d883a 	mov	r6,r2
    7be8:	18000f26 	beq	r3,zero,7c28 <__swsetup_r+0x7c>
    7bec:	80c00417 	ldw	r3,16(r16)
    7bf0:	18001526 	beq	r3,zero,7c48 <__swsetup_r+0x9c>
    7bf4:	1100004c 	andi	r4,r2,1
    7bf8:	20001c1e 	bne	r4,zero,7c6c <__swsetup_r+0xc0>
    7bfc:	1080008c 	andi	r2,r2,2
    7c00:	1000291e 	bne	r2,zero,7ca8 <__swsetup_r+0xfc>
    7c04:	80800517 	ldw	r2,20(r16)
    7c08:	80800215 	stw	r2,8(r16)
    7c0c:	18001c26 	beq	r3,zero,7c80 <__swsetup_r+0xd4>
    7c10:	0005883a 	mov	r2,zero
    7c14:	dfc00217 	ldw	ra,8(sp)
    7c18:	dc400117 	ldw	r17,4(sp)
    7c1c:	dc000017 	ldw	r16,0(sp)
    7c20:	dec00304 	addi	sp,sp,12
    7c24:	f800283a 	ret
    7c28:	3080040c 	andi	r2,r6,16
    7c2c:	10002e26 	beq	r2,zero,7ce8 <__swsetup_r+0x13c>
    7c30:	3080010c 	andi	r2,r6,4
    7c34:	10001e1e 	bne	r2,zero,7cb0 <__swsetup_r+0x104>
    7c38:	80c00417 	ldw	r3,16(r16)
    7c3c:	30800214 	ori	r2,r6,8
    7c40:	8080030d 	sth	r2,12(r16)
    7c44:	183feb1e 	bne	r3,zero,7bf4 <__alt_mem_Flash_flash_data+0xf4007bf4>
    7c48:	1140a00c 	andi	r5,r2,640
    7c4c:	01008004 	movi	r4,512
    7c50:	293fe826 	beq	r5,r4,7bf4 <__alt_mem_Flash_flash_data+0xf4007bf4>
    7c54:	8809883a 	mov	r4,r17
    7c58:	800b883a 	mov	r5,r16
    7c5c:	000a7980 	call	a798 <__smakebuf_r>
    7c60:	8080030b 	ldhu	r2,12(r16)
    7c64:	80c00417 	ldw	r3,16(r16)
    7c68:	003fe206 	br	7bf4 <__alt_mem_Flash_flash_data+0xf4007bf4>
    7c6c:	80800517 	ldw	r2,20(r16)
    7c70:	80000215 	stw	zero,8(r16)
    7c74:	0085c83a 	sub	r2,zero,r2
    7c78:	80800615 	stw	r2,24(r16)
    7c7c:	183fe41e 	bne	r3,zero,7c10 <__alt_mem_Flash_flash_data+0xf4007c10>
    7c80:	80c0030b 	ldhu	r3,12(r16)
    7c84:	0005883a 	mov	r2,zero
    7c88:	1900200c 	andi	r4,r3,128
    7c8c:	203fe126 	beq	r4,zero,7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    7c90:	18c01014 	ori	r3,r3,64
    7c94:	80c0030d 	sth	r3,12(r16)
    7c98:	00bfffc4 	movi	r2,-1
    7c9c:	003fdd06 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>
    7ca0:	0009c0c0 	call	9c0c <__sinit>
    7ca4:	003fcd06 	br	7bdc <__alt_mem_Flash_flash_data+0xf4007bdc>
    7ca8:	0005883a 	mov	r2,zero
    7cac:	003fd606 	br	7c08 <__alt_mem_Flash_flash_data+0xf4007c08>
    7cb0:	81400c17 	ldw	r5,48(r16)
    7cb4:	28000626 	beq	r5,zero,7cd0 <__swsetup_r+0x124>
    7cb8:	80801004 	addi	r2,r16,64
    7cbc:	28800326 	beq	r5,r2,7ccc <__swsetup_r+0x120>
    7cc0:	8809883a 	mov	r4,r17
    7cc4:	0009d800 	call	9d80 <_free_r>
    7cc8:	8180030b 	ldhu	r6,12(r16)
    7ccc:	80000c15 	stw	zero,48(r16)
    7cd0:	80c00417 	ldw	r3,16(r16)
    7cd4:	00bff6c4 	movi	r2,-37
    7cd8:	118c703a 	and	r6,r2,r6
    7cdc:	80000115 	stw	zero,4(r16)
    7ce0:	80c00015 	stw	r3,0(r16)
    7ce4:	003fd506 	br	7c3c <__alt_mem_Flash_flash_data+0xf4007c3c>
    7ce8:	00800244 	movi	r2,9
    7cec:	88800015 	stw	r2,0(r17)
    7cf0:	30801014 	ori	r2,r6,64
    7cf4:	8080030d 	sth	r2,12(r16)
    7cf8:	00bfffc4 	movi	r2,-1
    7cfc:	003fc506 	br	7c14 <__alt_mem_Flash_flash_data+0xf4007c14>

00007d00 <quorem>:
    7d00:	defff704 	addi	sp,sp,-36
    7d04:	dc800215 	stw	r18,8(sp)
    7d08:	20800417 	ldw	r2,16(r4)
    7d0c:	2c800417 	ldw	r18,16(r5)
    7d10:	dfc00815 	stw	ra,32(sp)
    7d14:	ddc00715 	stw	r23,28(sp)
    7d18:	dd800615 	stw	r22,24(sp)
    7d1c:	dd400515 	stw	r21,20(sp)
    7d20:	dd000415 	stw	r20,16(sp)
    7d24:	dcc00315 	stw	r19,12(sp)
    7d28:	dc400115 	stw	r17,4(sp)
    7d2c:	dc000015 	stw	r16,0(sp)
    7d30:	14807116 	blt	r2,r18,7ef8 <quorem+0x1f8>
    7d34:	94bfffc4 	addi	r18,r18,-1
    7d38:	94ad883a 	add	r22,r18,r18
    7d3c:	b5ad883a 	add	r22,r22,r22
    7d40:	2c400504 	addi	r17,r5,20
    7d44:	8da9883a 	add	r20,r17,r22
    7d48:	25400504 	addi	r21,r4,20
    7d4c:	282f883a 	mov	r23,r5
    7d50:	adad883a 	add	r22,r21,r22
    7d54:	a1400017 	ldw	r5,0(r20)
    7d58:	2021883a 	mov	r16,r4
    7d5c:	b1000017 	ldw	r4,0(r22)
    7d60:	29400044 	addi	r5,r5,1
    7d64:	00109740 	call	10974 <__udivsi3>
    7d68:	1027883a 	mov	r19,r2
    7d6c:	10002c26 	beq	r2,zero,7e20 <quorem+0x120>
    7d70:	a813883a 	mov	r9,r21
    7d74:	8811883a 	mov	r8,r17
    7d78:	0009883a 	mov	r4,zero
    7d7c:	000d883a 	mov	r6,zero
    7d80:	41c00017 	ldw	r7,0(r8)
    7d84:	49400017 	ldw	r5,0(r9)
    7d88:	42000104 	addi	r8,r8,4
    7d8c:	38bfffcc 	andi	r2,r7,65535
    7d90:	14c5383a 	mul	r2,r2,r19
    7d94:	380ed43a 	srli	r7,r7,16
    7d98:	28ffffcc 	andi	r3,r5,65535
    7d9c:	2085883a 	add	r2,r4,r2
    7da0:	1008d43a 	srli	r4,r2,16
    7da4:	3ccf383a 	mul	r7,r7,r19
    7da8:	198d883a 	add	r6,r3,r6
    7dac:	10ffffcc 	andi	r3,r2,65535
    7db0:	30c7c83a 	sub	r3,r6,r3
    7db4:	280ad43a 	srli	r5,r5,16
    7db8:	21c9883a 	add	r4,r4,r7
    7dbc:	180dd43a 	srai	r6,r3,16
    7dc0:	20bfffcc 	andi	r2,r4,65535
    7dc4:	288bc83a 	sub	r5,r5,r2
    7dc8:	298b883a 	add	r5,r5,r6
    7dcc:	280e943a 	slli	r7,r5,16
    7dd0:	18ffffcc 	andi	r3,r3,65535
    7dd4:	2008d43a 	srli	r4,r4,16
    7dd8:	38ceb03a 	or	r7,r7,r3
    7ddc:	49c00015 	stw	r7,0(r9)
    7de0:	280dd43a 	srai	r6,r5,16
    7de4:	4a400104 	addi	r9,r9,4
    7de8:	a23fe52e 	bgeu	r20,r8,7d80 <__alt_mem_Flash_flash_data+0xf4007d80>
    7dec:	b0800017 	ldw	r2,0(r22)
    7df0:	10000b1e 	bne	r2,zero,7e20 <quorem+0x120>
    7df4:	b0bfff04 	addi	r2,r22,-4
    7df8:	a880082e 	bgeu	r21,r2,7e1c <quorem+0x11c>
    7dfc:	b0ffff17 	ldw	r3,-4(r22)
    7e00:	18000326 	beq	r3,zero,7e10 <quorem+0x110>
    7e04:	00000506 	br	7e1c <quorem+0x11c>
    7e08:	10c00017 	ldw	r3,0(r2)
    7e0c:	1800031e 	bne	r3,zero,7e1c <quorem+0x11c>
    7e10:	10bfff04 	addi	r2,r2,-4
    7e14:	94bfffc4 	addi	r18,r18,-1
    7e18:	a8bffb36 	bltu	r21,r2,7e08 <__alt_mem_Flash_flash_data+0xf4007e08>
    7e1c:	84800415 	stw	r18,16(r16)
    7e20:	8009883a 	mov	r4,r16
    7e24:	b80b883a 	mov	r5,r23
    7e28:	000be6c0 	call	be6c <__mcmp>
    7e2c:	10002616 	blt	r2,zero,7ec8 <quorem+0x1c8>
    7e30:	9cc00044 	addi	r19,r19,1
    7e34:	a80d883a 	mov	r6,r21
    7e38:	000b883a 	mov	r5,zero
    7e3c:	31000017 	ldw	r4,0(r6)
    7e40:	88800017 	ldw	r2,0(r17)
    7e44:	31800104 	addi	r6,r6,4
    7e48:	20ffffcc 	andi	r3,r4,65535
    7e4c:	194b883a 	add	r5,r3,r5
    7e50:	10ffffcc 	andi	r3,r2,65535
    7e54:	28c7c83a 	sub	r3,r5,r3
    7e58:	1004d43a 	srli	r2,r2,16
    7e5c:	2008d43a 	srli	r4,r4,16
    7e60:	180bd43a 	srai	r5,r3,16
    7e64:	18ffffcc 	andi	r3,r3,65535
    7e68:	2089c83a 	sub	r4,r4,r2
    7e6c:	2149883a 	add	r4,r4,r5
    7e70:	2004943a 	slli	r2,r4,16
    7e74:	8c400104 	addi	r17,r17,4
    7e78:	200bd43a 	srai	r5,r4,16
    7e7c:	10c6b03a 	or	r3,r2,r3
    7e80:	30ffff15 	stw	r3,-4(r6)
    7e84:	a47fed2e 	bgeu	r20,r17,7e3c <__alt_mem_Flash_flash_data+0xf4007e3c>
    7e88:	9485883a 	add	r2,r18,r18
    7e8c:	1085883a 	add	r2,r2,r2
    7e90:	a887883a 	add	r3,r21,r2
    7e94:	18800017 	ldw	r2,0(r3)
    7e98:	10000b1e 	bne	r2,zero,7ec8 <quorem+0x1c8>
    7e9c:	18bfff04 	addi	r2,r3,-4
    7ea0:	a880082e 	bgeu	r21,r2,7ec4 <quorem+0x1c4>
    7ea4:	18ffff17 	ldw	r3,-4(r3)
    7ea8:	18000326 	beq	r3,zero,7eb8 <quorem+0x1b8>
    7eac:	00000506 	br	7ec4 <quorem+0x1c4>
    7eb0:	10c00017 	ldw	r3,0(r2)
    7eb4:	1800031e 	bne	r3,zero,7ec4 <quorem+0x1c4>
    7eb8:	10bfff04 	addi	r2,r2,-4
    7ebc:	94bfffc4 	addi	r18,r18,-1
    7ec0:	a8bffb36 	bltu	r21,r2,7eb0 <__alt_mem_Flash_flash_data+0xf4007eb0>
    7ec4:	84800415 	stw	r18,16(r16)
    7ec8:	9805883a 	mov	r2,r19
    7ecc:	dfc00817 	ldw	ra,32(sp)
    7ed0:	ddc00717 	ldw	r23,28(sp)
    7ed4:	dd800617 	ldw	r22,24(sp)
    7ed8:	dd400517 	ldw	r21,20(sp)
    7edc:	dd000417 	ldw	r20,16(sp)
    7ee0:	dcc00317 	ldw	r19,12(sp)
    7ee4:	dc800217 	ldw	r18,8(sp)
    7ee8:	dc400117 	ldw	r17,4(sp)
    7eec:	dc000017 	ldw	r16,0(sp)
    7ef0:	dec00904 	addi	sp,sp,36
    7ef4:	f800283a 	ret
    7ef8:	0005883a 	mov	r2,zero
    7efc:	003ff306 	br	7ecc <__alt_mem_Flash_flash_data+0xf4007ecc>

00007f00 <_dtoa_r>:
    7f00:	20801017 	ldw	r2,64(r4)
    7f04:	deffde04 	addi	sp,sp,-136
    7f08:	dd401d15 	stw	r21,116(sp)
    7f0c:	dcc01b15 	stw	r19,108(sp)
    7f10:	dc801a15 	stw	r18,104(sp)
    7f14:	dc401915 	stw	r17,100(sp)
    7f18:	dc001815 	stw	r16,96(sp)
    7f1c:	dfc02115 	stw	ra,132(sp)
    7f20:	df002015 	stw	fp,128(sp)
    7f24:	ddc01f15 	stw	r23,124(sp)
    7f28:	dd801e15 	stw	r22,120(sp)
    7f2c:	dd001c15 	stw	r20,112(sp)
    7f30:	d9c00315 	stw	r7,12(sp)
    7f34:	2021883a 	mov	r16,r4
    7f38:	302b883a 	mov	r21,r6
    7f3c:	2825883a 	mov	r18,r5
    7f40:	dc402417 	ldw	r17,144(sp)
    7f44:	3027883a 	mov	r19,r6
    7f48:	10000826 	beq	r2,zero,7f6c <_dtoa_r+0x6c>
    7f4c:	21801117 	ldw	r6,68(r4)
    7f50:	00c00044 	movi	r3,1
    7f54:	100b883a 	mov	r5,r2
    7f58:	1986983a 	sll	r3,r3,r6
    7f5c:	11800115 	stw	r6,4(r2)
    7f60:	10c00215 	stw	r3,8(r2)
    7f64:	000b6400 	call	b640 <_Bfree>
    7f68:	80001015 	stw	zero,64(r16)
    7f6c:	a8002d16 	blt	r21,zero,8024 <_dtoa_r+0x124>
    7f70:	88000015 	stw	zero,0(r17)
    7f74:	a8dffc2c 	andhi	r3,r21,32752
    7f78:	009ffc34 	movhi	r2,32752
    7f7c:	18801b26 	beq	r3,r2,7fec <_dtoa_r+0xec>
    7f80:	9009883a 	mov	r4,r18
    7f84:	980b883a 	mov	r5,r19
    7f88:	000d883a 	mov	r6,zero
    7f8c:	000f883a 	mov	r7,zero
    7f90:	0011aec0 	call	11aec <__eqdf2>
    7f94:	10002a1e 	bne	r2,zero,8040 <_dtoa_r+0x140>
    7f98:	d8c02317 	ldw	r3,140(sp)
    7f9c:	d9002517 	ldw	r4,148(sp)
    7fa0:	00800044 	movi	r2,1
    7fa4:	18800015 	stw	r2,0(r3)
    7fa8:	2001a226 	beq	r4,zero,8634 <_dtoa_r+0x734>
    7fac:	008000b4 	movhi	r2,2
    7fb0:	10823544 	addi	r2,r2,2261
    7fb4:	20800015 	stw	r2,0(r4)
    7fb8:	10bfffc4 	addi	r2,r2,-1
    7fbc:	dfc02117 	ldw	ra,132(sp)
    7fc0:	df002017 	ldw	fp,128(sp)
    7fc4:	ddc01f17 	ldw	r23,124(sp)
    7fc8:	dd801e17 	ldw	r22,120(sp)
    7fcc:	dd401d17 	ldw	r21,116(sp)
    7fd0:	dd001c17 	ldw	r20,112(sp)
    7fd4:	dcc01b17 	ldw	r19,108(sp)
    7fd8:	dc801a17 	ldw	r18,104(sp)
    7fdc:	dc401917 	ldw	r17,100(sp)
    7fe0:	dc001817 	ldw	r16,96(sp)
    7fe4:	dec02204 	addi	sp,sp,136
    7fe8:	f800283a 	ret
    7fec:	d8c02317 	ldw	r3,140(sp)
    7ff0:	0089c3c4 	movi	r2,9999
    7ff4:	18800015 	stw	r2,0(r3)
    7ff8:	90017c26 	beq	r18,zero,85ec <_dtoa_r+0x6ec>
    7ffc:	008000b4 	movhi	r2,2
    8000:	10824904 	addi	r2,r2,2340
    8004:	d9002517 	ldw	r4,148(sp)
    8008:	203fec26 	beq	r4,zero,7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    800c:	10c000c7 	ldb	r3,3(r2)
    8010:	18017d1e 	bne	r3,zero,8608 <_dtoa_r+0x708>
    8014:	10c000c4 	addi	r3,r2,3
    8018:	d9802517 	ldw	r6,148(sp)
    801c:	30c00015 	stw	r3,0(r6)
    8020:	003fe606 	br	7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    8024:	04e00034 	movhi	r19,32768
    8028:	9cffffc4 	addi	r19,r19,-1
    802c:	00800044 	movi	r2,1
    8030:	ace6703a 	and	r19,r21,r19
    8034:	88800015 	stw	r2,0(r17)
    8038:	982b883a 	mov	r21,r19
    803c:	003fcd06 	br	7f74 <__alt_mem_Flash_flash_data+0xf4007f74>
    8040:	d8800204 	addi	r2,sp,8
    8044:	a822d53a 	srli	r17,r21,20
    8048:	d8800015 	stw	r2,0(sp)
    804c:	8009883a 	mov	r4,r16
    8050:	900b883a 	mov	r5,r18
    8054:	980d883a 	mov	r6,r19
    8058:	d9c00104 	addi	r7,sp,4
    805c:	000c1e00 	call	c1e0 <__d2b>
    8060:	1039883a 	mov	fp,r2
    8064:	88016a1e 	bne	r17,zero,8610 <_dtoa_r+0x710>
    8068:	dd000217 	ldw	r20,8(sp)
    806c:	dc400117 	ldw	r17,4(sp)
    8070:	00befbc4 	movi	r2,-1041
    8074:	a463883a 	add	r17,r20,r17
    8078:	8882ea16 	blt	r17,r2,8c24 <_dtoa_r+0xd24>
    807c:	00bf0384 	movi	r2,-1010
    8080:	1445c83a 	sub	r2,r2,r17
    8084:	89010484 	addi	r4,r17,1042
    8088:	a8aa983a 	sll	r21,r21,r2
    808c:	9108d83a 	srl	r4,r18,r4
    8090:	a908b03a 	or	r4,r21,r4
    8094:	0012e7c0 	call	12e7c <__floatunsidf>
    8098:	017f8434 	movhi	r5,65040
    809c:	01800044 	movi	r6,1
    80a0:	1009883a 	mov	r4,r2
    80a4:	194b883a 	add	r5,r3,r5
    80a8:	8c7fffc4 	addi	r17,r17,-1
    80ac:	d9800f15 	stw	r6,60(sp)
    80b0:	000d883a 	mov	r6,zero
    80b4:	01cffe34 	movhi	r7,16376
    80b8:	00124540 	call	12454 <__subdf3>
    80bc:	0198dbf4 	movhi	r6,25455
    80c0:	01cff4f4 	movhi	r7,16339
    80c4:	1009883a 	mov	r4,r2
    80c8:	180b883a 	mov	r5,r3
    80cc:	3190d844 	addi	r6,r6,17249
    80d0:	39e1e9c4 	addi	r7,r7,-30809
    80d4:	0011d300 	call	11d30 <__muldf3>
    80d8:	01a2d874 	movhi	r6,35681
    80dc:	01cff1f4 	movhi	r7,16327
    80e0:	180b883a 	mov	r5,r3
    80e4:	31b22cc4 	addi	r6,r6,-14157
    80e8:	39e28a04 	addi	r7,r7,-30168
    80ec:	1009883a 	mov	r4,r2
    80f0:	00109840 	call	10984 <__adddf3>
    80f4:	8809883a 	mov	r4,r17
    80f8:	102d883a 	mov	r22,r2
    80fc:	182b883a 	mov	r21,r3
    8100:	0012dac0 	call	12dac <__floatsidf>
    8104:	019427f4 	movhi	r6,20639
    8108:	01cff4f4 	movhi	r7,16339
    810c:	1009883a 	mov	r4,r2
    8110:	180b883a 	mov	r5,r3
    8114:	319e7ec4 	addi	r6,r6,31227
    8118:	39d104c4 	addi	r7,r7,17427
    811c:	0011d300 	call	11d30 <__muldf3>
    8120:	b009883a 	mov	r4,r22
    8124:	a80b883a 	mov	r5,r21
    8128:	100d883a 	mov	r6,r2
    812c:	180f883a 	mov	r7,r3
    8130:	00109840 	call	10984 <__adddf3>
    8134:	1009883a 	mov	r4,r2
    8138:	180b883a 	mov	r5,r3
    813c:	102d883a 	mov	r22,r2
    8140:	182b883a 	mov	r21,r3
    8144:	0012d240 	call	12d24 <__fixdfsi>
    8148:	b009883a 	mov	r4,r22
    814c:	a80b883a 	mov	r5,r21
    8150:	000d883a 	mov	r6,zero
    8154:	000f883a 	mov	r7,zero
    8158:	d8800515 	stw	r2,20(sp)
    815c:	0011c500 	call	11c50 <__ledf2>
    8160:	10023116 	blt	r2,zero,8a28 <_dtoa_r+0xb28>
    8164:	d8c00517 	ldw	r3,20(sp)
    8168:	00800584 	movi	r2,22
    816c:	10c21f36 	bltu	r2,r3,89ec <_dtoa_r+0xaec>
    8170:	180490fa 	slli	r2,r3,3
    8174:	00c000b4 	movhi	r3,2
    8178:	18c26504 	addi	r3,r3,2452
    817c:	1885883a 	add	r2,r3,r2
    8180:	11000017 	ldw	r4,0(r2)
    8184:	11400117 	ldw	r5,4(r2)
    8188:	900d883a 	mov	r6,r18
    818c:	980f883a 	mov	r7,r19
    8190:	0011b700 	call	11b70 <__gedf2>
    8194:	0082a70e 	bge	zero,r2,8c34 <_dtoa_r+0xd34>
    8198:	d9000517 	ldw	r4,20(sp)
    819c:	d8000d15 	stw	zero,52(sp)
    81a0:	213fffc4 	addi	r4,r4,-1
    81a4:	d9000515 	stw	r4,20(sp)
    81a8:	a463c83a 	sub	r17,r20,r17
    81ac:	8dbfffc4 	addi	r22,r17,-1
    81b0:	b0021916 	blt	r22,zero,8a18 <_dtoa_r+0xb18>
    81b4:	d8000815 	stw	zero,32(sp)
    81b8:	d8800517 	ldw	r2,20(sp)
    81bc:	10020e16 	blt	r2,zero,89f8 <_dtoa_r+0xaf8>
    81c0:	b0ad883a 	add	r22,r22,r2
    81c4:	d8800a15 	stw	r2,40(sp)
    81c8:	d8000915 	stw	zero,36(sp)
    81cc:	d8c00317 	ldw	r3,12(sp)
    81d0:	00800244 	movi	r2,9
    81d4:	10c11a36 	bltu	r2,r3,8640 <_dtoa_r+0x740>
    81d8:	00800144 	movi	r2,5
    81dc:	10c4fc0e 	bge	r2,r3,95d0 <_dtoa_r+0x16d0>
    81e0:	18ffff04 	addi	r3,r3,-4
    81e4:	d8c00315 	stw	r3,12(sp)
    81e8:	0029883a 	mov	r20,zero
    81ec:	d9800317 	ldw	r6,12(sp)
    81f0:	008000c4 	movi	r2,3
    81f4:	3083bd26 	beq	r6,r2,90ec <_dtoa_r+0x11ec>
    81f8:	1183670e 	bge	r2,r6,8f98 <_dtoa_r+0x1098>
    81fc:	d8c00317 	ldw	r3,12(sp)
    8200:	00800104 	movi	r2,4
    8204:	1882e726 	beq	r3,r2,8da4 <_dtoa_r+0xea4>
    8208:	00800144 	movi	r2,5
    820c:	1884f21e 	bne	r3,r2,95d8 <_dtoa_r+0x16d8>
    8210:	00800044 	movi	r2,1
    8214:	d8800b15 	stw	r2,44(sp)
    8218:	d8c02217 	ldw	r3,136(sp)
    821c:	d9000517 	ldw	r4,20(sp)
    8220:	1907883a 	add	r3,r3,r4
    8224:	19800044 	addi	r6,r3,1
    8228:	d8c00c15 	stw	r3,48(sp)
    822c:	d9800615 	stw	r6,24(sp)
    8230:	0183c30e 	bge	zero,r6,9140 <_dtoa_r+0x1240>
    8234:	d9800617 	ldw	r6,24(sp)
    8238:	3023883a 	mov	r17,r6
    823c:	80001115 	stw	zero,68(r16)
    8240:	008005c4 	movi	r2,23
    8244:	1184f62e 	bgeu	r2,r6,9620 <_dtoa_r+0x1720>
    8248:	00c00044 	movi	r3,1
    824c:	00800104 	movi	r2,4
    8250:	1085883a 	add	r2,r2,r2
    8254:	11000504 	addi	r4,r2,20
    8258:	180b883a 	mov	r5,r3
    825c:	18c00044 	addi	r3,r3,1
    8260:	313ffb2e 	bgeu	r6,r4,8250 <__alt_mem_Flash_flash_data+0xf4008250>
    8264:	81401115 	stw	r5,68(r16)
    8268:	8009883a 	mov	r4,r16
    826c:	000b5980 	call	b598 <_Balloc>
    8270:	d8800715 	stw	r2,28(sp)
    8274:	80801015 	stw	r2,64(r16)
    8278:	00800384 	movi	r2,14
    827c:	1440fd36 	bltu	r2,r17,8674 <_dtoa_r+0x774>
    8280:	a000fc26 	beq	r20,zero,8674 <_dtoa_r+0x774>
    8284:	d8800517 	ldw	r2,20(sp)
    8288:	0083b90e 	bge	zero,r2,9170 <_dtoa_r+0x1270>
    828c:	d8c00517 	ldw	r3,20(sp)
    8290:	108003cc 	andi	r2,r2,15
    8294:	100490fa 	slli	r2,r2,3
    8298:	182fd13a 	srai	r23,r3,4
    829c:	00c000b4 	movhi	r3,2
    82a0:	18c26504 	addi	r3,r3,2452
    82a4:	1885883a 	add	r2,r3,r2
    82a8:	b8c0040c 	andi	r3,r23,16
    82ac:	12c00017 	ldw	r11,0(r2)
    82b0:	12800117 	ldw	r10,4(r2)
    82b4:	18039726 	beq	r3,zero,9114 <_dtoa_r+0x1214>
    82b8:	008000b4 	movhi	r2,2
    82bc:	10825b04 	addi	r2,r2,2412
    82c0:	11800817 	ldw	r6,32(r2)
    82c4:	11c00917 	ldw	r7,36(r2)
    82c8:	9009883a 	mov	r4,r18
    82cc:	980b883a 	mov	r5,r19
    82d0:	da801615 	stw	r10,88(sp)
    82d4:	dac01515 	stw	r11,84(sp)
    82d8:	00112200 	call	11220 <__divdf3>
    82dc:	da801617 	ldw	r10,88(sp)
    82e0:	dac01517 	ldw	r11,84(sp)
    82e4:	bdc003cc 	andi	r23,r23,15
    82e8:	044000c4 	movi	r17,3
    82ec:	d8800e15 	stw	r2,56(sp)
    82f0:	182b883a 	mov	r21,r3
    82f4:	b8001126 	beq	r23,zero,833c <_dtoa_r+0x43c>
    82f8:	050000b4 	movhi	r20,2
    82fc:	a5025b04 	addi	r20,r20,2412
    8300:	5805883a 	mov	r2,r11
    8304:	5007883a 	mov	r3,r10
    8308:	b980004c 	andi	r6,r23,1
    830c:	1009883a 	mov	r4,r2
    8310:	b82fd07a 	srai	r23,r23,1
    8314:	180b883a 	mov	r5,r3
    8318:	30000426 	beq	r6,zero,832c <_dtoa_r+0x42c>
    831c:	a1800017 	ldw	r6,0(r20)
    8320:	a1c00117 	ldw	r7,4(r20)
    8324:	8c400044 	addi	r17,r17,1
    8328:	0011d300 	call	11d30 <__muldf3>
    832c:	a5000204 	addi	r20,r20,8
    8330:	b83ff51e 	bne	r23,zero,8308 <__alt_mem_Flash_flash_data+0xf4008308>
    8334:	1017883a 	mov	r11,r2
    8338:	1815883a 	mov	r10,r3
    833c:	d9000e17 	ldw	r4,56(sp)
    8340:	a80b883a 	mov	r5,r21
    8344:	580d883a 	mov	r6,r11
    8348:	500f883a 	mov	r7,r10
    834c:	00112200 	call	11220 <__divdf3>
    8350:	1029883a 	mov	r20,r2
    8354:	182b883a 	mov	r21,r3
    8358:	d9800d17 	ldw	r6,52(sp)
    835c:	30000626 	beq	r6,zero,8378 <_dtoa_r+0x478>
    8360:	a009883a 	mov	r4,r20
    8364:	a80b883a 	mov	r5,r21
    8368:	000d883a 	mov	r6,zero
    836c:	01cffc34 	movhi	r7,16368
    8370:	0011c500 	call	11c50 <__ledf2>
    8374:	10043216 	blt	r2,zero,9440 <_dtoa_r+0x1540>
    8378:	8809883a 	mov	r4,r17
    837c:	0012dac0 	call	12dac <__floatsidf>
    8380:	1009883a 	mov	r4,r2
    8384:	180b883a 	mov	r5,r3
    8388:	a00d883a 	mov	r6,r20
    838c:	a80f883a 	mov	r7,r21
    8390:	0011d300 	call	11d30 <__muldf3>
    8394:	000d883a 	mov	r6,zero
    8398:	1009883a 	mov	r4,r2
    839c:	180b883a 	mov	r5,r3
    83a0:	01d00734 	movhi	r7,16412
    83a4:	00109840 	call	10984 <__adddf3>
    83a8:	1023883a 	mov	r17,r2
    83ac:	d9800617 	ldw	r6,24(sp)
    83b0:	00bf3034 	movhi	r2,64704
    83b4:	1885883a 	add	r2,r3,r2
    83b8:	d8800e15 	stw	r2,56(sp)
    83bc:	30032e26 	beq	r6,zero,9078 <_dtoa_r+0x1178>
    83c0:	d8c00517 	ldw	r3,20(sp)
    83c4:	da800617 	ldw	r10,24(sp)
    83c8:	d8c01215 	stw	r3,72(sp)
    83cc:	d9000b17 	ldw	r4,44(sp)
    83d0:	2003b026 	beq	r4,zero,9294 <_dtoa_r+0x1394>
    83d4:	50bfffc4 	addi	r2,r10,-1
    83d8:	100490fa 	slli	r2,r2,3
    83dc:	00c000b4 	movhi	r3,2
    83e0:	18c26504 	addi	r3,r3,2452
    83e4:	1885883a 	add	r2,r3,r2
    83e8:	11800017 	ldw	r6,0(r2)
    83ec:	11c00117 	ldw	r7,4(r2)
    83f0:	d8800717 	ldw	r2,28(sp)
    83f4:	0009883a 	mov	r4,zero
    83f8:	014ff834 	movhi	r5,16352
    83fc:	da801615 	stw	r10,88(sp)
    8400:	15c00044 	addi	r23,r2,1
    8404:	00112200 	call	11220 <__divdf3>
    8408:	d9c00e17 	ldw	r7,56(sp)
    840c:	880d883a 	mov	r6,r17
    8410:	1009883a 	mov	r4,r2
    8414:	180b883a 	mov	r5,r3
    8418:	00124540 	call	12454 <__subdf3>
    841c:	a80b883a 	mov	r5,r21
    8420:	a009883a 	mov	r4,r20
    8424:	d8c01015 	stw	r3,64(sp)
    8428:	d8800e15 	stw	r2,56(sp)
    842c:	0012d240 	call	12d24 <__fixdfsi>
    8430:	1009883a 	mov	r4,r2
    8434:	d8801715 	stw	r2,92(sp)
    8438:	0012dac0 	call	12dac <__floatsidf>
    843c:	a009883a 	mov	r4,r20
    8440:	a80b883a 	mov	r5,r21
    8444:	100d883a 	mov	r6,r2
    8448:	180f883a 	mov	r7,r3
    844c:	00124540 	call	12454 <__subdf3>
    8450:	da001717 	ldw	r8,92(sp)
    8454:	1829883a 	mov	r20,r3
    8458:	d8c00717 	ldw	r3,28(sp)
    845c:	d9000e17 	ldw	r4,56(sp)
    8460:	d9401017 	ldw	r5,64(sp)
    8464:	42000c04 	addi	r8,r8,48
    8468:	1023883a 	mov	r17,r2
    846c:	1a000005 	stb	r8,0(r3)
    8470:	880d883a 	mov	r6,r17
    8474:	a00f883a 	mov	r7,r20
    8478:	402b883a 	mov	r21,r8
    847c:	0011b700 	call	11b70 <__gedf2>
    8480:	00844516 	blt	zero,r2,9598 <_dtoa_r+0x1698>
    8484:	0009883a 	mov	r4,zero
    8488:	014ffc34 	movhi	r5,16368
    848c:	880d883a 	mov	r6,r17
    8490:	a00f883a 	mov	r7,r20
    8494:	00124540 	call	12454 <__subdf3>
    8498:	d9000e17 	ldw	r4,56(sp)
    849c:	d9401017 	ldw	r5,64(sp)
    84a0:	100d883a 	mov	r6,r2
    84a4:	180f883a 	mov	r7,r3
    84a8:	0011b700 	call	11b70 <__gedf2>
    84ac:	da801617 	ldw	r10,88(sp)
    84b0:	00843616 	blt	zero,r2,958c <_dtoa_r+0x168c>
    84b4:	00800044 	movi	r2,1
    84b8:	12806e0e 	bge	r2,r10,8674 <_dtoa_r+0x774>
    84bc:	d9000717 	ldw	r4,28(sp)
    84c0:	dd801315 	stw	r22,76(sp)
    84c4:	dc001115 	stw	r16,68(sp)
    84c8:	2295883a 	add	r10,r4,r10
    84cc:	dcc01415 	stw	r19,80(sp)
    84d0:	502d883a 	mov	r22,r10
    84d4:	dcc01017 	ldw	r19,64(sp)
    84d8:	b821883a 	mov	r16,r23
    84dc:	dc801015 	stw	r18,64(sp)
    84e0:	dc800e17 	ldw	r18,56(sp)
    84e4:	00000906 	br	850c <_dtoa_r+0x60c>
    84e8:	00124540 	call	12454 <__subdf3>
    84ec:	1009883a 	mov	r4,r2
    84f0:	180b883a 	mov	r5,r3
    84f4:	900d883a 	mov	r6,r18
    84f8:	980f883a 	mov	r7,r19
    84fc:	0011c500 	call	11c50 <__ledf2>
    8500:	10040e16 	blt	r2,zero,953c <_dtoa_r+0x163c>
    8504:	b821883a 	mov	r16,r23
    8508:	bd841026 	beq	r23,r22,954c <_dtoa_r+0x164c>
    850c:	9009883a 	mov	r4,r18
    8510:	980b883a 	mov	r5,r19
    8514:	000d883a 	mov	r6,zero
    8518:	01d00934 	movhi	r7,16420
    851c:	0011d300 	call	11d30 <__muldf3>
    8520:	000d883a 	mov	r6,zero
    8524:	01d00934 	movhi	r7,16420
    8528:	8809883a 	mov	r4,r17
    852c:	a00b883a 	mov	r5,r20
    8530:	1025883a 	mov	r18,r2
    8534:	1827883a 	mov	r19,r3
    8538:	0011d300 	call	11d30 <__muldf3>
    853c:	180b883a 	mov	r5,r3
    8540:	1009883a 	mov	r4,r2
    8544:	1823883a 	mov	r17,r3
    8548:	1029883a 	mov	r20,r2
    854c:	0012d240 	call	12d24 <__fixdfsi>
    8550:	1009883a 	mov	r4,r2
    8554:	102b883a 	mov	r21,r2
    8558:	0012dac0 	call	12dac <__floatsidf>
    855c:	a009883a 	mov	r4,r20
    8560:	880b883a 	mov	r5,r17
    8564:	100d883a 	mov	r6,r2
    8568:	180f883a 	mov	r7,r3
    856c:	00124540 	call	12454 <__subdf3>
    8570:	ad400c04 	addi	r21,r21,48
    8574:	1009883a 	mov	r4,r2
    8578:	180b883a 	mov	r5,r3
    857c:	900d883a 	mov	r6,r18
    8580:	980f883a 	mov	r7,r19
    8584:	85400005 	stb	r21,0(r16)
    8588:	1023883a 	mov	r17,r2
    858c:	1829883a 	mov	r20,r3
    8590:	0011c500 	call	11c50 <__ledf2>
    8594:	bdc00044 	addi	r23,r23,1
    8598:	0009883a 	mov	r4,zero
    859c:	014ffc34 	movhi	r5,16368
    85a0:	880d883a 	mov	r6,r17
    85a4:	a00f883a 	mov	r7,r20
    85a8:	103fcf0e 	bge	r2,zero,84e8 <__alt_mem_Flash_flash_data+0xf40084e8>
    85ac:	d9801217 	ldw	r6,72(sp)
    85b0:	dc001117 	ldw	r16,68(sp)
    85b4:	d9800515 	stw	r6,20(sp)
    85b8:	8009883a 	mov	r4,r16
    85bc:	e00b883a 	mov	r5,fp
    85c0:	000b6400 	call	b640 <_Bfree>
    85c4:	d8c00517 	ldw	r3,20(sp)
    85c8:	d9002317 	ldw	r4,140(sp)
    85cc:	d9802517 	ldw	r6,148(sp)
    85d0:	b8000005 	stb	zero,0(r23)
    85d4:	18800044 	addi	r2,r3,1
    85d8:	20800015 	stw	r2,0(r4)
    85dc:	30027226 	beq	r6,zero,8fa8 <_dtoa_r+0x10a8>
    85e0:	35c00015 	stw	r23,0(r6)
    85e4:	d8800717 	ldw	r2,28(sp)
    85e8:	003e7406 	br	7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    85ec:	00800434 	movhi	r2,16
    85f0:	10bfffc4 	addi	r2,r2,-1
    85f4:	a8aa703a 	and	r21,r21,r2
    85f8:	a83e801e 	bne	r21,zero,7ffc <__alt_mem_Flash_flash_data+0xf4007ffc>
    85fc:	008000b4 	movhi	r2,2
    8600:	10824604 	addi	r2,r2,2328
    8604:	003e7f06 	br	8004 <__alt_mem_Flash_flash_data+0xf4008004>
    8608:	10c00204 	addi	r3,r2,8
    860c:	003e8206 	br	8018 <__alt_mem_Flash_flash_data+0xf4008018>
    8610:	01400434 	movhi	r5,16
    8614:	297fffc4 	addi	r5,r5,-1
    8618:	994a703a 	and	r5,r19,r5
    861c:	9009883a 	mov	r4,r18
    8620:	8c7f0044 	addi	r17,r17,-1023
    8624:	294ffc34 	orhi	r5,r5,16368
    8628:	dd000217 	ldw	r20,8(sp)
    862c:	d8000f15 	stw	zero,60(sp)
    8630:	003e9f06 	br	80b0 <__alt_mem_Flash_flash_data+0xf40080b0>
    8634:	008000b4 	movhi	r2,2
    8638:	10823504 	addi	r2,r2,2260
    863c:	003e5f06 	br	7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    8640:	80001115 	stw	zero,68(r16)
    8644:	8009883a 	mov	r4,r16
    8648:	000b883a 	mov	r5,zero
    864c:	000b5980 	call	b598 <_Balloc>
    8650:	01bfffc4 	movi	r6,-1
    8654:	d8800715 	stw	r2,28(sp)
    8658:	80801015 	stw	r2,64(r16)
    865c:	00800044 	movi	r2,1
    8660:	d9800c15 	stw	r6,48(sp)
    8664:	d8800b15 	stw	r2,44(sp)
    8668:	d9800615 	stw	r6,24(sp)
    866c:	d8002215 	stw	zero,136(sp)
    8670:	d8000315 	stw	zero,12(sp)
    8674:	d8800117 	ldw	r2,4(sp)
    8678:	10008e16 	blt	r2,zero,88b4 <_dtoa_r+0x9b4>
    867c:	d9000517 	ldw	r4,20(sp)
    8680:	00c00384 	movi	r3,14
    8684:	19008b16 	blt	r3,r4,88b4 <_dtoa_r+0x9b4>
    8688:	200490fa 	slli	r2,r4,3
    868c:	00c000b4 	movhi	r3,2
    8690:	d9802217 	ldw	r6,136(sp)
    8694:	18c26504 	addi	r3,r3,2452
    8698:	1885883a 	add	r2,r3,r2
    869c:	14400017 	ldw	r17,0(r2)
    86a0:	15000117 	ldw	r20,4(r2)
    86a4:	3001c716 	blt	r6,zero,8dc4 <_dtoa_r+0xec4>
    86a8:	880d883a 	mov	r6,r17
    86ac:	a00f883a 	mov	r7,r20
    86b0:	9009883a 	mov	r4,r18
    86b4:	980b883a 	mov	r5,r19
    86b8:	00112200 	call	11220 <__divdf3>
    86bc:	180b883a 	mov	r5,r3
    86c0:	1009883a 	mov	r4,r2
    86c4:	0012d240 	call	12d24 <__fixdfsi>
    86c8:	1009883a 	mov	r4,r2
    86cc:	102d883a 	mov	r22,r2
    86d0:	0012dac0 	call	12dac <__floatsidf>
    86d4:	1009883a 	mov	r4,r2
    86d8:	180b883a 	mov	r5,r3
    86dc:	880d883a 	mov	r6,r17
    86e0:	a00f883a 	mov	r7,r20
    86e4:	0011d300 	call	11d30 <__muldf3>
    86e8:	9009883a 	mov	r4,r18
    86ec:	980b883a 	mov	r5,r19
    86f0:	100d883a 	mov	r6,r2
    86f4:	180f883a 	mov	r7,r3
    86f8:	00124540 	call	12454 <__subdf3>
    86fc:	d9000717 	ldw	r4,28(sp)
    8700:	d9800617 	ldw	r6,24(sp)
    8704:	180b883a 	mov	r5,r3
    8708:	b0c00c04 	addi	r3,r22,48
    870c:	20c00005 	stb	r3,0(r4)
    8710:	25c00044 	addi	r23,r4,1
    8714:	01000044 	movi	r4,1
    8718:	1011883a 	mov	r8,r2
    871c:	2807883a 	mov	r3,r5
    8720:	31003d26 	beq	r6,r4,8818 <_dtoa_r+0x918>
    8724:	000d883a 	mov	r6,zero
    8728:	01d00934 	movhi	r7,16420
    872c:	1009883a 	mov	r4,r2
    8730:	0011d300 	call	11d30 <__muldf3>
    8734:	1009883a 	mov	r4,r2
    8738:	180b883a 	mov	r5,r3
    873c:	000d883a 	mov	r6,zero
    8740:	000f883a 	mov	r7,zero
    8744:	1027883a 	mov	r19,r2
    8748:	182b883a 	mov	r21,r3
    874c:	0011aec0 	call	11aec <__eqdf2>
    8750:	103f9926 	beq	r2,zero,85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8754:	d8c00617 	ldw	r3,24(sp)
    8758:	d9000717 	ldw	r4,28(sp)
    875c:	b825883a 	mov	r18,r23
    8760:	18bfffc4 	addi	r2,r3,-1
    8764:	20ad883a 	add	r22,r4,r2
    8768:	dc000315 	stw	r16,12(sp)
    876c:	00000a06 	br	8798 <_dtoa_r+0x898>
    8770:	0011d300 	call	11d30 <__muldf3>
    8774:	1009883a 	mov	r4,r2
    8778:	180b883a 	mov	r5,r3
    877c:	000d883a 	mov	r6,zero
    8780:	000f883a 	mov	r7,zero
    8784:	1027883a 	mov	r19,r2
    8788:	182b883a 	mov	r21,r3
    878c:	b825883a 	mov	r18,r23
    8790:	0011aec0 	call	11aec <__eqdf2>
    8794:	10022626 	beq	r2,zero,9030 <_dtoa_r+0x1130>
    8798:	880d883a 	mov	r6,r17
    879c:	a00f883a 	mov	r7,r20
    87a0:	9809883a 	mov	r4,r19
    87a4:	a80b883a 	mov	r5,r21
    87a8:	00112200 	call	11220 <__divdf3>
    87ac:	180b883a 	mov	r5,r3
    87b0:	1009883a 	mov	r4,r2
    87b4:	0012d240 	call	12d24 <__fixdfsi>
    87b8:	1009883a 	mov	r4,r2
    87bc:	1021883a 	mov	r16,r2
    87c0:	0012dac0 	call	12dac <__floatsidf>
    87c4:	1009883a 	mov	r4,r2
    87c8:	180b883a 	mov	r5,r3
    87cc:	880d883a 	mov	r6,r17
    87d0:	a00f883a 	mov	r7,r20
    87d4:	0011d300 	call	11d30 <__muldf3>
    87d8:	9809883a 	mov	r4,r19
    87dc:	a80b883a 	mov	r5,r21
    87e0:	100d883a 	mov	r6,r2
    87e4:	180f883a 	mov	r7,r3
    87e8:	00124540 	call	12454 <__subdf3>
    87ec:	82000c04 	addi	r8,r16,48
    87f0:	92000005 	stb	r8,0(r18)
    87f4:	1009883a 	mov	r4,r2
    87f8:	180b883a 	mov	r5,r3
    87fc:	000d883a 	mov	r6,zero
    8800:	01d00934 	movhi	r7,16420
    8804:	1011883a 	mov	r8,r2
    8808:	bdc00044 	addi	r23,r23,1
    880c:	95bfd81e 	bne	r18,r22,8770 <__alt_mem_Flash_flash_data+0xf4008770>
    8810:	802d883a 	mov	r22,r16
    8814:	dc000317 	ldw	r16,12(sp)
    8818:	4009883a 	mov	r4,r8
    881c:	180b883a 	mov	r5,r3
    8820:	400d883a 	mov	r6,r8
    8824:	180f883a 	mov	r7,r3
    8828:	00109840 	call	10984 <__adddf3>
    882c:	8809883a 	mov	r4,r17
    8830:	a00b883a 	mov	r5,r20
    8834:	100d883a 	mov	r6,r2
    8838:	180f883a 	mov	r7,r3
    883c:	1027883a 	mov	r19,r2
    8840:	1825883a 	mov	r18,r3
    8844:	0011c500 	call	11c50 <__ledf2>
    8848:	10000816 	blt	r2,zero,886c <_dtoa_r+0x96c>
    884c:	8809883a 	mov	r4,r17
    8850:	a00b883a 	mov	r5,r20
    8854:	980d883a 	mov	r6,r19
    8858:	900f883a 	mov	r7,r18
    885c:	0011aec0 	call	11aec <__eqdf2>
    8860:	103f551e 	bne	r2,zero,85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8864:	b580004c 	andi	r22,r22,1
    8868:	b03f5326 	beq	r22,zero,85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    886c:	bd7fffc3 	ldbu	r21,-1(r23)
    8870:	b8bfffc4 	addi	r2,r23,-1
    8874:	1007883a 	mov	r3,r2
    8878:	01400e44 	movi	r5,57
    887c:	d9800717 	ldw	r6,28(sp)
    8880:	00000506 	br	8898 <_dtoa_r+0x998>
    8884:	18ffffc4 	addi	r3,r3,-1
    8888:	30825e26 	beq	r6,r2,9204 <_dtoa_r+0x1304>
    888c:	1d400003 	ldbu	r21,0(r3)
    8890:	102f883a 	mov	r23,r2
    8894:	10bfffc4 	addi	r2,r2,-1
    8898:	a9003fcc 	andi	r4,r21,255
    889c:	2100201c 	xori	r4,r4,128
    88a0:	213fe004 	addi	r4,r4,-128
    88a4:	217ff726 	beq	r4,r5,8884 <__alt_mem_Flash_flash_data+0xf4008884>
    88a8:	aa000044 	addi	r8,r21,1
    88ac:	12000005 	stb	r8,0(r2)
    88b0:	003f4106 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    88b4:	d8c00b17 	ldw	r3,44(sp)
    88b8:	18006726 	beq	r3,zero,8a58 <_dtoa_r+0xb58>
    88bc:	d9000317 	ldw	r4,12(sp)
    88c0:	00c00044 	movi	r3,1
    88c4:	19016a0e 	bge	r3,r4,8e70 <_dtoa_r+0xf70>
    88c8:	d8800617 	ldw	r2,24(sp)
    88cc:	d8c00917 	ldw	r3,36(sp)
    88d0:	157fffc4 	addi	r21,r2,-1
    88d4:	1d420716 	blt	r3,r21,90f4 <_dtoa_r+0x11f4>
    88d8:	1d6bc83a 	sub	r21,r3,r21
    88dc:	d8800617 	ldw	r2,24(sp)
    88e0:	1002c716 	blt	r2,zero,9400 <_dtoa_r+0x1500>
    88e4:	dd000817 	ldw	r20,32(sp)
    88e8:	d8800617 	ldw	r2,24(sp)
    88ec:	d9800817 	ldw	r6,32(sp)
    88f0:	8009883a 	mov	r4,r16
    88f4:	01400044 	movi	r5,1
    88f8:	308d883a 	add	r6,r6,r2
    88fc:	d9800815 	stw	r6,32(sp)
    8900:	b0ad883a 	add	r22,r22,r2
    8904:	000b9a40 	call	b9a4 <__i2b>
    8908:	1023883a 	mov	r17,r2
    890c:	a0000826 	beq	r20,zero,8930 <_dtoa_r+0xa30>
    8910:	0580070e 	bge	zero,r22,8930 <_dtoa_r+0xa30>
    8914:	b005883a 	mov	r2,r22
    8918:	a5812016 	blt	r20,r22,8d9c <_dtoa_r+0xe9c>
    891c:	d8c00817 	ldw	r3,32(sp)
    8920:	a0a9c83a 	sub	r20,r20,r2
    8924:	b0adc83a 	sub	r22,r22,r2
    8928:	1887c83a 	sub	r3,r3,r2
    892c:	d8c00815 	stw	r3,32(sp)
    8930:	d9000917 	ldw	r4,36(sp)
    8934:	0100140e 	bge	zero,r4,8988 <_dtoa_r+0xa88>
    8938:	d9800b17 	ldw	r6,44(sp)
    893c:	3001e526 	beq	r6,zero,90d4 <_dtoa_r+0x11d4>
    8940:	05400e0e 	bge	zero,r21,897c <_dtoa_r+0xa7c>
    8944:	880b883a 	mov	r5,r17
    8948:	8009883a 	mov	r4,r16
    894c:	a80d883a 	mov	r6,r21
    8950:	000bbdc0 	call	bbdc <__pow5mult>
    8954:	e00d883a 	mov	r6,fp
    8958:	8009883a 	mov	r4,r16
    895c:	100b883a 	mov	r5,r2
    8960:	1023883a 	mov	r17,r2
    8964:	000b9e00 	call	b9e0 <__multiply>
    8968:	102f883a 	mov	r23,r2
    896c:	e00b883a 	mov	r5,fp
    8970:	8009883a 	mov	r4,r16
    8974:	000b6400 	call	b640 <_Bfree>
    8978:	b839883a 	mov	fp,r23
    897c:	d8800917 	ldw	r2,36(sp)
    8980:	154dc83a 	sub	r6,r2,r21
    8984:	3001281e 	bne	r6,zero,8e28 <_dtoa_r+0xf28>
    8988:	05c00044 	movi	r23,1
    898c:	8009883a 	mov	r4,r16
    8990:	b80b883a 	mov	r5,r23
    8994:	000b9a40 	call	b9a4 <__i2b>
    8998:	d8c00a17 	ldw	r3,40(sp)
    899c:	102b883a 	mov	r21,r2
    89a0:	00c0310e 	bge	zero,r3,8a68 <_dtoa_r+0xb68>
    89a4:	8009883a 	mov	r4,r16
    89a8:	100b883a 	mov	r5,r2
    89ac:	180d883a 	mov	r6,r3
    89b0:	000bbdc0 	call	bbdc <__pow5mult>
    89b4:	d9000317 	ldw	r4,12(sp)
    89b8:	102b883a 	mov	r21,r2
    89bc:	b9011f0e 	bge	r23,r4,8e3c <_dtoa_r+0xf3c>
    89c0:	0027883a 	mov	r19,zero
    89c4:	a8800417 	ldw	r2,16(r21)
    89c8:	10800104 	addi	r2,r2,4
    89cc:	1085883a 	add	r2,r2,r2
    89d0:	1085883a 	add	r2,r2,r2
    89d4:	a885883a 	add	r2,r21,r2
    89d8:	11000017 	ldw	r4,0(r2)
    89dc:	000b88c0 	call	b88c <__hi0bits>
    89e0:	00c00804 	movi	r3,32
    89e4:	1885c83a 	sub	r2,r3,r2
    89e8:	00002506 	br	8a80 <_dtoa_r+0xb80>
    89ec:	01800044 	movi	r6,1
    89f0:	d9800d15 	stw	r6,52(sp)
    89f4:	003dec06 	br	81a8 <__alt_mem_Flash_flash_data+0xf40081a8>
    89f8:	d8c00817 	ldw	r3,32(sp)
    89fc:	d9000517 	ldw	r4,20(sp)
    8a00:	d8000a15 	stw	zero,40(sp)
    8a04:	1907c83a 	sub	r3,r3,r4
    8a08:	010dc83a 	sub	r6,zero,r4
    8a0c:	d8c00815 	stw	r3,32(sp)
    8a10:	d9800915 	stw	r6,36(sp)
    8a14:	003ded06 	br	81cc <__alt_mem_Flash_flash_data+0xf40081cc>
    8a18:	05adc83a 	sub	r22,zero,r22
    8a1c:	dd800815 	stw	r22,32(sp)
    8a20:	002d883a 	mov	r22,zero
    8a24:	003de406 	br	81b8 <__alt_mem_Flash_flash_data+0xf40081b8>
    8a28:	d9000517 	ldw	r4,20(sp)
    8a2c:	0012dac0 	call	12dac <__floatsidf>
    8a30:	1009883a 	mov	r4,r2
    8a34:	180b883a 	mov	r5,r3
    8a38:	b00d883a 	mov	r6,r22
    8a3c:	a80f883a 	mov	r7,r21
    8a40:	0011aec0 	call	11aec <__eqdf2>
    8a44:	103dc726 	beq	r2,zero,8164 <__alt_mem_Flash_flash_data+0xf4008164>
    8a48:	d8800517 	ldw	r2,20(sp)
    8a4c:	10bfffc4 	addi	r2,r2,-1
    8a50:	d8800515 	stw	r2,20(sp)
    8a54:	003dc306 	br	8164 <__alt_mem_Flash_flash_data+0xf4008164>
    8a58:	dd400917 	ldw	r21,36(sp)
    8a5c:	dd000817 	ldw	r20,32(sp)
    8a60:	0023883a 	mov	r17,zero
    8a64:	003fa906 	br	890c <__alt_mem_Flash_flash_data+0xf400890c>
    8a68:	d9800317 	ldw	r6,12(sp)
    8a6c:	b981670e 	bge	r23,r6,900c <_dtoa_r+0x110c>
    8a70:	0027883a 	mov	r19,zero
    8a74:	d8c00a17 	ldw	r3,40(sp)
    8a78:	183fd21e 	bne	r3,zero,89c4 <__alt_mem_Flash_flash_data+0xf40089c4>
    8a7c:	00800044 	movi	r2,1
    8a80:	1585883a 	add	r2,r2,r22
    8a84:	108007cc 	andi	r2,r2,31
    8a88:	10005f26 	beq	r2,zero,8c08 <_dtoa_r+0xd08>
    8a8c:	00c00804 	movi	r3,32
    8a90:	1887c83a 	sub	r3,r3,r2
    8a94:	01000104 	movi	r4,4
    8a98:	20c2dd0e 	bge	r4,r3,9610 <_dtoa_r+0x1710>
    8a9c:	d9000817 	ldw	r4,32(sp)
    8aa0:	00c00704 	movi	r3,28
    8aa4:	1885c83a 	sub	r2,r3,r2
    8aa8:	2089883a 	add	r4,r4,r2
    8aac:	d9000815 	stw	r4,32(sp)
    8ab0:	a0a9883a 	add	r20,r20,r2
    8ab4:	b0ad883a 	add	r22,r22,r2
    8ab8:	d8800817 	ldw	r2,32(sp)
    8abc:	0080050e 	bge	zero,r2,8ad4 <_dtoa_r+0xbd4>
    8ac0:	e00b883a 	mov	r5,fp
    8ac4:	8009883a 	mov	r4,r16
    8ac8:	100d883a 	mov	r6,r2
    8acc:	000bd1c0 	call	bd1c <__lshift>
    8ad0:	1039883a 	mov	fp,r2
    8ad4:	0580050e 	bge	zero,r22,8aec <_dtoa_r+0xbec>
    8ad8:	a80b883a 	mov	r5,r21
    8adc:	8009883a 	mov	r4,r16
    8ae0:	b00d883a 	mov	r6,r22
    8ae4:	000bd1c0 	call	bd1c <__lshift>
    8ae8:	102b883a 	mov	r21,r2
    8aec:	d8c00d17 	ldw	r3,52(sp)
    8af0:	1801161e 	bne	r3,zero,8f4c <_dtoa_r+0x104c>
    8af4:	d8c00617 	ldw	r3,24(sp)
    8af8:	00c12d0e 	bge	zero,r3,8fb0 <_dtoa_r+0x10b0>
    8afc:	d8c00b17 	ldw	r3,44(sp)
    8b00:	1800571e 	bne	r3,zero,8c60 <_dtoa_r+0xd60>
    8b04:	dc800717 	ldw	r18,28(sp)
    8b08:	dcc00617 	ldw	r19,24(sp)
    8b0c:	9029883a 	mov	r20,r18
    8b10:	00000206 	br	8b1c <_dtoa_r+0xc1c>
    8b14:	000b6680 	call	b668 <__multadd>
    8b18:	1039883a 	mov	fp,r2
    8b1c:	e009883a 	mov	r4,fp
    8b20:	a80b883a 	mov	r5,r21
    8b24:	0007d000 	call	7d00 <quorem>
    8b28:	10800c04 	addi	r2,r2,48
    8b2c:	90800005 	stb	r2,0(r18)
    8b30:	94800044 	addi	r18,r18,1
    8b34:	9507c83a 	sub	r3,r18,r20
    8b38:	8009883a 	mov	r4,r16
    8b3c:	e00b883a 	mov	r5,fp
    8b40:	01800284 	movi	r6,10
    8b44:	000f883a 	mov	r7,zero
    8b48:	1cfff216 	blt	r3,r19,8b14 <__alt_mem_Flash_flash_data+0xf4008b14>
    8b4c:	1011883a 	mov	r8,r2
    8b50:	d8800617 	ldw	r2,24(sp)
    8b54:	00822e0e 	bge	zero,r2,9410 <_dtoa_r+0x1510>
    8b58:	d9000717 	ldw	r4,28(sp)
    8b5c:	0025883a 	mov	r18,zero
    8b60:	20af883a 	add	r23,r4,r2
    8b64:	e00b883a 	mov	r5,fp
    8b68:	01800044 	movi	r6,1
    8b6c:	8009883a 	mov	r4,r16
    8b70:	da001715 	stw	r8,92(sp)
    8b74:	000bd1c0 	call	bd1c <__lshift>
    8b78:	1009883a 	mov	r4,r2
    8b7c:	a80b883a 	mov	r5,r21
    8b80:	1039883a 	mov	fp,r2
    8b84:	000be6c0 	call	be6c <__mcmp>
    8b88:	da001717 	ldw	r8,92(sp)
    8b8c:	00816e0e 	bge	zero,r2,9148 <_dtoa_r+0x1248>
    8b90:	b93fffc3 	ldbu	r4,-1(r23)
    8b94:	b8bfffc4 	addi	r2,r23,-1
    8b98:	1007883a 	mov	r3,r2
    8b9c:	01800e44 	movi	r6,57
    8ba0:	d9c00717 	ldw	r7,28(sp)
    8ba4:	00000506 	br	8bbc <_dtoa_r+0xcbc>
    8ba8:	18ffffc4 	addi	r3,r3,-1
    8bac:	38811926 	beq	r7,r2,9014 <_dtoa_r+0x1114>
    8bb0:	19000003 	ldbu	r4,0(r3)
    8bb4:	102f883a 	mov	r23,r2
    8bb8:	10bfffc4 	addi	r2,r2,-1
    8bbc:	21403fcc 	andi	r5,r4,255
    8bc0:	2940201c 	xori	r5,r5,128
    8bc4:	297fe004 	addi	r5,r5,-128
    8bc8:	29bff726 	beq	r5,r6,8ba8 <__alt_mem_Flash_flash_data+0xf4008ba8>
    8bcc:	21000044 	addi	r4,r4,1
    8bd0:	11000005 	stb	r4,0(r2)
    8bd4:	8009883a 	mov	r4,r16
    8bd8:	a80b883a 	mov	r5,r21
    8bdc:	000b6400 	call	b640 <_Bfree>
    8be0:	883e7526 	beq	r17,zero,85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8be4:	90000426 	beq	r18,zero,8bf8 <_dtoa_r+0xcf8>
    8be8:	94400326 	beq	r18,r17,8bf8 <_dtoa_r+0xcf8>
    8bec:	8009883a 	mov	r4,r16
    8bf0:	900b883a 	mov	r5,r18
    8bf4:	000b6400 	call	b640 <_Bfree>
    8bf8:	8009883a 	mov	r4,r16
    8bfc:	880b883a 	mov	r5,r17
    8c00:	000b6400 	call	b640 <_Bfree>
    8c04:	003e6c06 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8c08:	00800704 	movi	r2,28
    8c0c:	d9800817 	ldw	r6,32(sp)
    8c10:	a0a9883a 	add	r20,r20,r2
    8c14:	b0ad883a 	add	r22,r22,r2
    8c18:	308d883a 	add	r6,r6,r2
    8c1c:	d9800815 	stw	r6,32(sp)
    8c20:	003fa506 	br	8ab8 <__alt_mem_Flash_flash_data+0xf4008ab8>
    8c24:	013efb84 	movi	r4,-1042
    8c28:	246bc83a 	sub	r21,r4,r17
    8c2c:	9548983a 	sll	r4,r18,r21
    8c30:	003d1806 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    8c34:	d8000d15 	stw	zero,52(sp)
    8c38:	003d5b06 	br	81a8 <__alt_mem_Flash_flash_data+0xf40081a8>
    8c3c:	880b883a 	mov	r5,r17
    8c40:	8009883a 	mov	r4,r16
    8c44:	01800284 	movi	r6,10
    8c48:	000f883a 	mov	r7,zero
    8c4c:	000b6680 	call	b668 <__multadd>
    8c50:	1023883a 	mov	r17,r2
    8c54:	d8800c17 	ldw	r2,48(sp)
    8c58:	0082550e 	bge	zero,r2,95b0 <_dtoa_r+0x16b0>
    8c5c:	d8800615 	stw	r2,24(sp)
    8c60:	0500050e 	bge	zero,r20,8c78 <_dtoa_r+0xd78>
    8c64:	880b883a 	mov	r5,r17
    8c68:	8009883a 	mov	r4,r16
    8c6c:	a00d883a 	mov	r6,r20
    8c70:	000bd1c0 	call	bd1c <__lshift>
    8c74:	1023883a 	mov	r17,r2
    8c78:	98016a1e 	bne	r19,zero,9224 <_dtoa_r+0x1324>
    8c7c:	8829883a 	mov	r20,r17
    8c80:	d9000617 	ldw	r4,24(sp)
    8c84:	dcc00717 	ldw	r19,28(sp)
    8c88:	9480004c 	andi	r18,r18,1
    8c8c:	20bfffc4 	addi	r2,r4,-1
    8c90:	9885883a 	add	r2,r19,r2
    8c94:	d8800415 	stw	r2,16(sp)
    8c98:	dc800615 	stw	r18,24(sp)
    8c9c:	e009883a 	mov	r4,fp
    8ca0:	a80b883a 	mov	r5,r21
    8ca4:	0007d000 	call	7d00 <quorem>
    8ca8:	e009883a 	mov	r4,fp
    8cac:	880b883a 	mov	r5,r17
    8cb0:	102f883a 	mov	r23,r2
    8cb4:	000be6c0 	call	be6c <__mcmp>
    8cb8:	8009883a 	mov	r4,r16
    8cbc:	a80b883a 	mov	r5,r21
    8cc0:	a00d883a 	mov	r6,r20
    8cc4:	102d883a 	mov	r22,r2
    8cc8:	000becc0 	call	becc <__mdiff>
    8ccc:	1007883a 	mov	r3,r2
    8cd0:	10800317 	ldw	r2,12(r2)
    8cd4:	bc800c04 	addi	r18,r23,48
    8cd8:	1000971e 	bne	r2,zero,8f38 <_dtoa_r+0x1038>
    8cdc:	180b883a 	mov	r5,r3
    8ce0:	e009883a 	mov	r4,fp
    8ce4:	d8c01515 	stw	r3,84(sp)
    8ce8:	000be6c0 	call	be6c <__mcmp>
    8cec:	d8c01517 	ldw	r3,84(sp)
    8cf0:	8009883a 	mov	r4,r16
    8cf4:	d8801515 	stw	r2,84(sp)
    8cf8:	180b883a 	mov	r5,r3
    8cfc:	000b6400 	call	b640 <_Bfree>
    8d00:	d8801517 	ldw	r2,84(sp)
    8d04:	1000041e 	bne	r2,zero,8d18 <_dtoa_r+0xe18>
    8d08:	d9800317 	ldw	r6,12(sp)
    8d0c:	3000021e 	bne	r6,zero,8d18 <_dtoa_r+0xe18>
    8d10:	d8c00617 	ldw	r3,24(sp)
    8d14:	18007626 	beq	r3,zero,8ef0 <_dtoa_r+0xff0>
    8d18:	b0005b16 	blt	r22,zero,8e88 <_dtoa_r+0xf88>
    8d1c:	b000041e 	bne	r22,zero,8d30 <_dtoa_r+0xe30>
    8d20:	d9000317 	ldw	r4,12(sp)
    8d24:	2000021e 	bne	r4,zero,8d30 <_dtoa_r+0xe30>
    8d28:	d8c00617 	ldw	r3,24(sp)
    8d2c:	18005626 	beq	r3,zero,8e88 <_dtoa_r+0xf88>
    8d30:	00814d16 	blt	zero,r2,9268 <_dtoa_r+0x1368>
    8d34:	d8c00417 	ldw	r3,16(sp)
    8d38:	9d800044 	addi	r22,r19,1
    8d3c:	9c800005 	stb	r18,0(r19)
    8d40:	b02f883a 	mov	r23,r22
    8d44:	98c14c26 	beq	r19,r3,9278 <_dtoa_r+0x1378>
    8d48:	e00b883a 	mov	r5,fp
    8d4c:	8009883a 	mov	r4,r16
    8d50:	01800284 	movi	r6,10
    8d54:	000f883a 	mov	r7,zero
    8d58:	000b6680 	call	b668 <__multadd>
    8d5c:	1039883a 	mov	fp,r2
    8d60:	8d006d26 	beq	r17,r20,8f18 <_dtoa_r+0x1018>
    8d64:	880b883a 	mov	r5,r17
    8d68:	01800284 	movi	r6,10
    8d6c:	000f883a 	mov	r7,zero
    8d70:	8009883a 	mov	r4,r16
    8d74:	000b6680 	call	b668 <__multadd>
    8d78:	a00b883a 	mov	r5,r20
    8d7c:	8009883a 	mov	r4,r16
    8d80:	01800284 	movi	r6,10
    8d84:	000f883a 	mov	r7,zero
    8d88:	1023883a 	mov	r17,r2
    8d8c:	000b6680 	call	b668 <__multadd>
    8d90:	1029883a 	mov	r20,r2
    8d94:	b027883a 	mov	r19,r22
    8d98:	003fc006 	br	8c9c <__alt_mem_Flash_flash_data+0xf4008c9c>
    8d9c:	a005883a 	mov	r2,r20
    8da0:	003ede06 	br	891c <__alt_mem_Flash_flash_data+0xf400891c>
    8da4:	01000044 	movi	r4,1
    8da8:	d9000b15 	stw	r4,44(sp)
    8dac:	d9802217 	ldw	r6,136(sp)
    8db0:	0180dc0e 	bge	zero,r6,9124 <_dtoa_r+0x1224>
    8db4:	3023883a 	mov	r17,r6
    8db8:	d9800c15 	stw	r6,48(sp)
    8dbc:	d9800615 	stw	r6,24(sp)
    8dc0:	003d1e06 	br	823c <__alt_mem_Flash_flash_data+0xf400823c>
    8dc4:	d8800617 	ldw	r2,24(sp)
    8dc8:	00be3716 	blt	zero,r2,86a8 <__alt_mem_Flash_flash_data+0xf40086a8>
    8dcc:	1000be1e 	bne	r2,zero,90c8 <_dtoa_r+0x11c8>
    8dd0:	8809883a 	mov	r4,r17
    8dd4:	a00b883a 	mov	r5,r20
    8dd8:	000d883a 	mov	r6,zero
    8ddc:	01d00534 	movhi	r7,16404
    8de0:	0011d300 	call	11d30 <__muldf3>
    8de4:	1009883a 	mov	r4,r2
    8de8:	180b883a 	mov	r5,r3
    8dec:	900d883a 	mov	r6,r18
    8df0:	980f883a 	mov	r7,r19
    8df4:	0011b700 	call	11b70 <__gedf2>
    8df8:	002b883a 	mov	r21,zero
    8dfc:	0023883a 	mov	r17,zero
    8e00:	10007a16 	blt	r2,zero,8fec <_dtoa_r+0x10ec>
    8e04:	d9002217 	ldw	r4,136(sp)
    8e08:	ddc00717 	ldw	r23,28(sp)
    8e0c:	0108303a 	nor	r4,zero,r4
    8e10:	d9000515 	stw	r4,20(sp)
    8e14:	8009883a 	mov	r4,r16
    8e18:	a80b883a 	mov	r5,r21
    8e1c:	000b6400 	call	b640 <_Bfree>
    8e20:	883f751e 	bne	r17,zero,8bf8 <__alt_mem_Flash_flash_data+0xf4008bf8>
    8e24:	003de406 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8e28:	e00b883a 	mov	r5,fp
    8e2c:	8009883a 	mov	r4,r16
    8e30:	000bbdc0 	call	bbdc <__pow5mult>
    8e34:	1039883a 	mov	fp,r2
    8e38:	003ed306 	br	8988 <__alt_mem_Flash_flash_data+0xf4008988>
    8e3c:	903ee01e 	bne	r18,zero,89c0 <__alt_mem_Flash_flash_data+0xf40089c0>
    8e40:	00800434 	movhi	r2,16
    8e44:	10bfffc4 	addi	r2,r2,-1
    8e48:	9884703a 	and	r2,r19,r2
    8e4c:	103f081e 	bne	r2,zero,8a70 <__alt_mem_Flash_flash_data+0xf4008a70>
    8e50:	9cdffc2c 	andhi	r19,r19,32752
    8e54:	983f0626 	beq	r19,zero,8a70 <__alt_mem_Flash_flash_data+0xf4008a70>
    8e58:	d8800817 	ldw	r2,32(sp)
    8e5c:	b5800044 	addi	r22,r22,1
    8e60:	04c00044 	movi	r19,1
    8e64:	10800044 	addi	r2,r2,1
    8e68:	d8800815 	stw	r2,32(sp)
    8e6c:	003f0106 	br	8a74 <__alt_mem_Flash_flash_data+0xf4008a74>
    8e70:	d9800f17 	ldw	r6,60(sp)
    8e74:	30016826 	beq	r6,zero,9418 <_dtoa_r+0x1518>
    8e78:	10810cc4 	addi	r2,r2,1075
    8e7c:	dd400917 	ldw	r21,36(sp)
    8e80:	dd000817 	ldw	r20,32(sp)
    8e84:	003e9906 	br	88ec <__alt_mem_Flash_flash_data+0xf40088ec>
    8e88:	9011883a 	mov	r8,r18
    8e8c:	4007883a 	mov	r3,r8
    8e90:	e02d883a 	mov	r22,fp
    8e94:	0080100e 	bge	zero,r2,8ed8 <_dtoa_r+0xfd8>
    8e98:	01800044 	movi	r6,1
    8e9c:	8009883a 	mov	r4,r16
    8ea0:	e00b883a 	mov	r5,fp
    8ea4:	da001515 	stw	r8,84(sp)
    8ea8:	da001715 	stw	r8,92(sp)
    8eac:	000bd1c0 	call	bd1c <__lshift>
    8eb0:	1009883a 	mov	r4,r2
    8eb4:	a80b883a 	mov	r5,r21
    8eb8:	102d883a 	mov	r22,r2
    8ebc:	000be6c0 	call	be6c <__mcmp>
    8ec0:	d8c01517 	ldw	r3,84(sp)
    8ec4:	da001717 	ldw	r8,92(sp)
    8ec8:	0081a50e 	bge	zero,r2,9560 <_dtoa_r+0x1660>
    8ecc:	00800e44 	movi	r2,57
    8ed0:	40817b26 	beq	r8,r2,94c0 <_dtoa_r+0x15c0>
    8ed4:	40c00044 	addi	r3,r8,1
    8ed8:	8825883a 	mov	r18,r17
    8edc:	9dc00044 	addi	r23,r19,1
    8ee0:	98c00005 	stb	r3,0(r19)
    8ee4:	a023883a 	mov	r17,r20
    8ee8:	b039883a 	mov	fp,r22
    8eec:	003f3906 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>
    8ef0:	00800e44 	movi	r2,57
    8ef4:	9011883a 	mov	r8,r18
    8ef8:	90817226 	beq	r18,r2,94c4 <_dtoa_r+0x15c4>
    8efc:	0580010e 	bge	zero,r22,8f04 <_dtoa_r+0x1004>
    8f00:	ba000c44 	addi	r8,r23,49
    8f04:	8825883a 	mov	r18,r17
    8f08:	9dc00044 	addi	r23,r19,1
    8f0c:	9a000005 	stb	r8,0(r19)
    8f10:	a023883a 	mov	r17,r20
    8f14:	003f2f06 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>
    8f18:	880b883a 	mov	r5,r17
    8f1c:	8009883a 	mov	r4,r16
    8f20:	01800284 	movi	r6,10
    8f24:	000f883a 	mov	r7,zero
    8f28:	000b6680 	call	b668 <__multadd>
    8f2c:	1023883a 	mov	r17,r2
    8f30:	1029883a 	mov	r20,r2
    8f34:	003f9706 	br	8d94 <__alt_mem_Flash_flash_data+0xf4008d94>
    8f38:	8009883a 	mov	r4,r16
    8f3c:	180b883a 	mov	r5,r3
    8f40:	000b6400 	call	b640 <_Bfree>
    8f44:	00800044 	movi	r2,1
    8f48:	003f7306 	br	8d18 <__alt_mem_Flash_flash_data+0xf4008d18>
    8f4c:	e009883a 	mov	r4,fp
    8f50:	a80b883a 	mov	r5,r21
    8f54:	000be6c0 	call	be6c <__mcmp>
    8f58:	103ee60e 	bge	r2,zero,8af4 <__alt_mem_Flash_flash_data+0xf4008af4>
    8f5c:	8009883a 	mov	r4,r16
    8f60:	e00b883a 	mov	r5,fp
    8f64:	01800284 	movi	r6,10
    8f68:	000f883a 	mov	r7,zero
    8f6c:	000b6680 	call	b668 <__multadd>
    8f70:	d9000517 	ldw	r4,20(sp)
    8f74:	d9800b17 	ldw	r6,44(sp)
    8f78:	1039883a 	mov	fp,r2
    8f7c:	213fffc4 	addi	r4,r4,-1
    8f80:	d9000515 	stw	r4,20(sp)
    8f84:	303f2d1e 	bne	r6,zero,8c3c <__alt_mem_Flash_flash_data+0xf4008c3c>
    8f88:	d9000c17 	ldw	r4,48(sp)
    8f8c:	0101780e 	bge	zero,r4,9570 <_dtoa_r+0x1670>
    8f90:	d9000615 	stw	r4,24(sp)
    8f94:	003edb06 	br	8b04 <__alt_mem_Flash_flash_data+0xf4008b04>
    8f98:	00800084 	movi	r2,2
    8f9c:	30818e1e 	bne	r6,r2,95d8 <_dtoa_r+0x16d8>
    8fa0:	d8000b15 	stw	zero,44(sp)
    8fa4:	003f8106 	br	8dac <__alt_mem_Flash_flash_data+0xf4008dac>
    8fa8:	d8800717 	ldw	r2,28(sp)
    8fac:	003c0306 	br	7fbc <__alt_mem_Flash_flash_data+0xf4007fbc>
    8fb0:	d9000317 	ldw	r4,12(sp)
    8fb4:	00800084 	movi	r2,2
    8fb8:	113ed00e 	bge	r2,r4,8afc <__alt_mem_Flash_flash_data+0xf4008afc>
    8fbc:	d8c00617 	ldw	r3,24(sp)
    8fc0:	183f901e 	bne	r3,zero,8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    8fc4:	a80b883a 	mov	r5,r21
    8fc8:	8009883a 	mov	r4,r16
    8fcc:	01800144 	movi	r6,5
    8fd0:	000f883a 	mov	r7,zero
    8fd4:	000b6680 	call	b668 <__multadd>
    8fd8:	e009883a 	mov	r4,fp
    8fdc:	100b883a 	mov	r5,r2
    8fe0:	102b883a 	mov	r21,r2
    8fe4:	000be6c0 	call	be6c <__mcmp>
    8fe8:	00bf860e 	bge	zero,r2,8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    8fec:	d9800717 	ldw	r6,28(sp)
    8ff0:	00800c44 	movi	r2,49
    8ff4:	30800005 	stb	r2,0(r6)
    8ff8:	d8800517 	ldw	r2,20(sp)
    8ffc:	35c00044 	addi	r23,r6,1
    9000:	10800044 	addi	r2,r2,1
    9004:	d8800515 	stw	r2,20(sp)
    9008:	003f8206 	br	8e14 <__alt_mem_Flash_flash_data+0xf4008e14>
    900c:	903e981e 	bne	r18,zero,8a70 <__alt_mem_Flash_flash_data+0xf4008a70>
    9010:	003f8b06 	br	8e40 <__alt_mem_Flash_flash_data+0xf4008e40>
    9014:	d9800517 	ldw	r6,20(sp)
    9018:	d8c00717 	ldw	r3,28(sp)
    901c:	00800c44 	movi	r2,49
    9020:	31800044 	addi	r6,r6,1
    9024:	d9800515 	stw	r6,20(sp)
    9028:	18800005 	stb	r2,0(r3)
    902c:	003ee906 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>
    9030:	dc000317 	ldw	r16,12(sp)
    9034:	003d6006 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    9038:	8809883a 	mov	r4,r17
    903c:	0012dac0 	call	12dac <__floatsidf>
    9040:	a009883a 	mov	r4,r20
    9044:	a80b883a 	mov	r5,r21
    9048:	100d883a 	mov	r6,r2
    904c:	180f883a 	mov	r7,r3
    9050:	0011d300 	call	11d30 <__muldf3>
    9054:	1009883a 	mov	r4,r2
    9058:	180b883a 	mov	r5,r3
    905c:	000d883a 	mov	r6,zero
    9060:	01d00734 	movhi	r7,16412
    9064:	00109840 	call	10984 <__adddf3>
    9068:	1023883a 	mov	r17,r2
    906c:	00bf3034 	movhi	r2,64704
    9070:	1885883a 	add	r2,r3,r2
    9074:	d8800e15 	stw	r2,56(sp)
    9078:	a009883a 	mov	r4,r20
    907c:	a80b883a 	mov	r5,r21
    9080:	000d883a 	mov	r6,zero
    9084:	01d00534 	movhi	r7,16404
    9088:	00124540 	call	12454 <__subdf3>
    908c:	d9c00e17 	ldw	r7,56(sp)
    9090:	1009883a 	mov	r4,r2
    9094:	180b883a 	mov	r5,r3
    9098:	880d883a 	mov	r6,r17
    909c:	102b883a 	mov	r21,r2
    90a0:	1829883a 	mov	r20,r3
    90a4:	0011b700 	call	11b70 <__gedf2>
    90a8:	00807716 	blt	zero,r2,9288 <_dtoa_r+0x1388>
    90ac:	d8800e17 	ldw	r2,56(sp)
    90b0:	a809883a 	mov	r4,r21
    90b4:	a00b883a 	mov	r5,r20
    90b8:	11e0003c 	xorhi	r7,r2,32768
    90bc:	880d883a 	mov	r6,r17
    90c0:	0011c500 	call	11c50 <__ledf2>
    90c4:	103d6b0e 	bge	r2,zero,8674 <__alt_mem_Flash_flash_data+0xf4008674>
    90c8:	002b883a 	mov	r21,zero
    90cc:	0023883a 	mov	r17,zero
    90d0:	003f4c06 	br	8e04 <__alt_mem_Flash_flash_data+0xf4008e04>
    90d4:	d9800917 	ldw	r6,36(sp)
    90d8:	e00b883a 	mov	r5,fp
    90dc:	8009883a 	mov	r4,r16
    90e0:	000bbdc0 	call	bbdc <__pow5mult>
    90e4:	1039883a 	mov	fp,r2
    90e8:	003e2706 	br	8988 <__alt_mem_Flash_flash_data+0xf4008988>
    90ec:	d8000b15 	stw	zero,44(sp)
    90f0:	003c4906 	br	8218 <__alt_mem_Flash_flash_data+0xf4008218>
    90f4:	d9000917 	ldw	r4,36(sp)
    90f8:	d9800a17 	ldw	r6,40(sp)
    90fc:	dd400915 	stw	r21,36(sp)
    9100:	a905c83a 	sub	r2,r21,r4
    9104:	308d883a 	add	r6,r6,r2
    9108:	d9800a15 	stw	r6,40(sp)
    910c:	002b883a 	mov	r21,zero
    9110:	003df206 	br	88dc <__alt_mem_Flash_flash_data+0xf40088dc>
    9114:	dc800e15 	stw	r18,56(sp)
    9118:	982b883a 	mov	r21,r19
    911c:	04400084 	movi	r17,2
    9120:	003c7406 	br	82f4 <__alt_mem_Flash_flash_data+0xf40082f4>
    9124:	04400044 	movi	r17,1
    9128:	dc400c15 	stw	r17,48(sp)
    912c:	dc400615 	stw	r17,24(sp)
    9130:	dc402215 	stw	r17,136(sp)
    9134:	80001115 	stw	zero,68(r16)
    9138:	000b883a 	mov	r5,zero
    913c:	003c4a06 	br	8268 <__alt_mem_Flash_flash_data+0xf4008268>
    9140:	3023883a 	mov	r17,r6
    9144:	003ffb06 	br	9134 <__alt_mem_Flash_flash_data+0xf4009134>
    9148:	1000021e 	bne	r2,zero,9154 <_dtoa_r+0x1254>
    914c:	4200004c 	andi	r8,r8,1
    9150:	403e8f1e 	bne	r8,zero,8b90 <__alt_mem_Flash_flash_data+0xf4008b90>
    9154:	01000c04 	movi	r4,48
    9158:	00000106 	br	9160 <_dtoa_r+0x1260>
    915c:	102f883a 	mov	r23,r2
    9160:	b8bfffc4 	addi	r2,r23,-1
    9164:	10c00007 	ldb	r3,0(r2)
    9168:	193ffc26 	beq	r3,r4,915c <__alt_mem_Flash_flash_data+0xf400915c>
    916c:	003e9906 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>
    9170:	d9000517 	ldw	r4,20(sp)
    9174:	012fc83a 	sub	r23,zero,r4
    9178:	b800ad26 	beq	r23,zero,9430 <_dtoa_r+0x1530>
    917c:	b88003cc 	andi	r2,r23,15
    9180:	100490fa 	slli	r2,r2,3
    9184:	00c000b4 	movhi	r3,2
    9188:	18c26504 	addi	r3,r3,2452
    918c:	1885883a 	add	r2,r3,r2
    9190:	11800017 	ldw	r6,0(r2)
    9194:	11c00117 	ldw	r7,4(r2)
    9198:	b82fd13a 	srai	r23,r23,4
    919c:	9009883a 	mov	r4,r18
    91a0:	980b883a 	mov	r5,r19
    91a4:	0011d300 	call	11d30 <__muldf3>
    91a8:	1029883a 	mov	r20,r2
    91ac:	182b883a 	mov	r21,r3
    91b0:	b800f426 	beq	r23,zero,9584 <_dtoa_r+0x1684>
    91b4:	020000b4 	movhi	r8,2
    91b8:	42025b04 	addi	r8,r8,2412
    91bc:	8029883a 	mov	r20,r16
    91c0:	04400084 	movi	r17,2
    91c4:	4021883a 	mov	r16,r8
    91c8:	b980004c 	andi	r6,r23,1
    91cc:	1009883a 	mov	r4,r2
    91d0:	b82fd07a 	srai	r23,r23,1
    91d4:	180b883a 	mov	r5,r3
    91d8:	30000426 	beq	r6,zero,91ec <_dtoa_r+0x12ec>
    91dc:	81800017 	ldw	r6,0(r16)
    91e0:	81c00117 	ldw	r7,4(r16)
    91e4:	8c400044 	addi	r17,r17,1
    91e8:	0011d300 	call	11d30 <__muldf3>
    91ec:	84000204 	addi	r16,r16,8
    91f0:	b83ff51e 	bne	r23,zero,91c8 <__alt_mem_Flash_flash_data+0xf40091c8>
    91f4:	a021883a 	mov	r16,r20
    91f8:	182b883a 	mov	r21,r3
    91fc:	1029883a 	mov	r20,r2
    9200:	003c5506 	br	8358 <__alt_mem_Flash_flash_data+0xf4008358>
    9204:	d9800517 	ldw	r6,20(sp)
    9208:	d9000717 	ldw	r4,28(sp)
    920c:	00c00c04 	movi	r3,48
    9210:	31800044 	addi	r6,r6,1
    9214:	d9800515 	stw	r6,20(sp)
    9218:	20c00005 	stb	r3,0(r4)
    921c:	02000c44 	movi	r8,49
    9220:	003da206 	br	88ac <__alt_mem_Flash_flash_data+0xf40088ac>
    9224:	89400117 	ldw	r5,4(r17)
    9228:	8009883a 	mov	r4,r16
    922c:	000b5980 	call	b598 <_Balloc>
    9230:	89800417 	ldw	r6,16(r17)
    9234:	11000304 	addi	r4,r2,12
    9238:	89400304 	addi	r5,r17,12
    923c:	31800084 	addi	r6,r6,2
    9240:	318d883a 	add	r6,r6,r6
    9244:	318d883a 	add	r6,r6,r6
    9248:	1027883a 	mov	r19,r2
    924c:	000b1e00 	call	b1e0 <memcpy>
    9250:	8009883a 	mov	r4,r16
    9254:	980b883a 	mov	r5,r19
    9258:	01800044 	movi	r6,1
    925c:	000bd1c0 	call	bd1c <__lshift>
    9260:	1029883a 	mov	r20,r2
    9264:	003e8606 	br	8c80 <__alt_mem_Flash_flash_data+0xf4008c80>
    9268:	00800e44 	movi	r2,57
    926c:	90809526 	beq	r18,r2,94c4 <_dtoa_r+0x15c4>
    9270:	92000044 	addi	r8,r18,1
    9274:	003f2306 	br	8f04 <__alt_mem_Flash_flash_data+0xf4008f04>
    9278:	9011883a 	mov	r8,r18
    927c:	8825883a 	mov	r18,r17
    9280:	a023883a 	mov	r17,r20
    9284:	003e3706 	br	8b64 <__alt_mem_Flash_flash_data+0xf4008b64>
    9288:	002b883a 	mov	r21,zero
    928c:	0023883a 	mov	r17,zero
    9290:	003f5606 	br	8fec <__alt_mem_Flash_flash_data+0xf4008fec>
    9294:	51bfffc4 	addi	r6,r10,-1
    9298:	300490fa 	slli	r2,r6,3
    929c:	00c000b4 	movhi	r3,2
    92a0:	18c26504 	addi	r3,r3,2452
    92a4:	1885883a 	add	r2,r3,r2
    92a8:	d9c00e17 	ldw	r7,56(sp)
    92ac:	11000017 	ldw	r4,0(r2)
    92b0:	11400117 	ldw	r5,4(r2)
    92b4:	d8800717 	ldw	r2,28(sp)
    92b8:	d9801015 	stw	r6,64(sp)
    92bc:	880d883a 	mov	r6,r17
    92c0:	da801615 	stw	r10,88(sp)
    92c4:	15c00044 	addi	r23,r2,1
    92c8:	0011d300 	call	11d30 <__muldf3>
    92cc:	a80b883a 	mov	r5,r21
    92d0:	a009883a 	mov	r4,r20
    92d4:	d8c01115 	stw	r3,68(sp)
    92d8:	d8800e15 	stw	r2,56(sp)
    92dc:	0012d240 	call	12d24 <__fixdfsi>
    92e0:	1009883a 	mov	r4,r2
    92e4:	1023883a 	mov	r17,r2
    92e8:	0012dac0 	call	12dac <__floatsidf>
    92ec:	a009883a 	mov	r4,r20
    92f0:	a80b883a 	mov	r5,r21
    92f4:	100d883a 	mov	r6,r2
    92f8:	180f883a 	mov	r7,r3
    92fc:	00124540 	call	12454 <__subdf3>
    9300:	1813883a 	mov	r9,r3
    9304:	d8c00717 	ldw	r3,28(sp)
    9308:	8c400c04 	addi	r17,r17,48
    930c:	1011883a 	mov	r8,r2
    9310:	1c400005 	stb	r17,0(r3)
    9314:	da801617 	ldw	r10,88(sp)
    9318:	00800044 	movi	r2,1
    931c:	50802326 	beq	r10,r2,93ac <_dtoa_r+0x14ac>
    9320:	d8800717 	ldw	r2,28(sp)
    9324:	b82b883a 	mov	r21,r23
    9328:	dc001315 	stw	r16,76(sp)
    932c:	12a9883a 	add	r20,r2,r10
    9330:	4807883a 	mov	r3,r9
    9334:	4005883a 	mov	r2,r8
    9338:	dc801415 	stw	r18,80(sp)
    933c:	000d883a 	mov	r6,zero
    9340:	01d00934 	movhi	r7,16420
    9344:	1009883a 	mov	r4,r2
    9348:	180b883a 	mov	r5,r3
    934c:	0011d300 	call	11d30 <__muldf3>
    9350:	180b883a 	mov	r5,r3
    9354:	1009883a 	mov	r4,r2
    9358:	1821883a 	mov	r16,r3
    935c:	1025883a 	mov	r18,r2
    9360:	0012d240 	call	12d24 <__fixdfsi>
    9364:	1009883a 	mov	r4,r2
    9368:	1023883a 	mov	r17,r2
    936c:	0012dac0 	call	12dac <__floatsidf>
    9370:	9009883a 	mov	r4,r18
    9374:	800b883a 	mov	r5,r16
    9378:	100d883a 	mov	r6,r2
    937c:	180f883a 	mov	r7,r3
    9380:	8c400c04 	addi	r17,r17,48
    9384:	00124540 	call	12454 <__subdf3>
    9388:	ad400044 	addi	r21,r21,1
    938c:	ac7fffc5 	stb	r17,-1(r21)
    9390:	ad3fea1e 	bne	r21,r20,933c <__alt_mem_Flash_flash_data+0xf400933c>
    9394:	1813883a 	mov	r9,r3
    9398:	d8c01017 	ldw	r3,64(sp)
    939c:	dc001317 	ldw	r16,76(sp)
    93a0:	dc801417 	ldw	r18,80(sp)
    93a4:	1011883a 	mov	r8,r2
    93a8:	b8ef883a 	add	r23,r23,r3
    93ac:	d9000e17 	ldw	r4,56(sp)
    93b0:	d9401117 	ldw	r5,68(sp)
    93b4:	000d883a 	mov	r6,zero
    93b8:	01cff834 	movhi	r7,16352
    93bc:	da001715 	stw	r8,92(sp)
    93c0:	da401515 	stw	r9,84(sp)
    93c4:	00109840 	call	10984 <__adddf3>
    93c8:	da001717 	ldw	r8,92(sp)
    93cc:	da401517 	ldw	r9,84(sp)
    93d0:	1009883a 	mov	r4,r2
    93d4:	400d883a 	mov	r6,r8
    93d8:	480f883a 	mov	r7,r9
    93dc:	180b883a 	mov	r5,r3
    93e0:	0011c500 	call	11c50 <__ledf2>
    93e4:	da001717 	ldw	r8,92(sp)
    93e8:	da401517 	ldw	r9,84(sp)
    93ec:	10003b0e 	bge	r2,zero,94dc <_dtoa_r+0x15dc>
    93f0:	d9001217 	ldw	r4,72(sp)
    93f4:	bd7fffc3 	ldbu	r21,-1(r23)
    93f8:	d9000515 	stw	r4,20(sp)
    93fc:	003d1c06 	br	8870 <__alt_mem_Flash_flash_data+0xf4008870>
    9400:	d8c00817 	ldw	r3,32(sp)
    9404:	18a9c83a 	sub	r20,r3,r2
    9408:	0005883a 	mov	r2,zero
    940c:	003d3706 	br	88ec <__alt_mem_Flash_flash_data+0xf40088ec>
    9410:	00800044 	movi	r2,1
    9414:	003dd006 	br	8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    9418:	d8c00217 	ldw	r3,8(sp)
    941c:	00800d84 	movi	r2,54
    9420:	dd400917 	ldw	r21,36(sp)
    9424:	10c5c83a 	sub	r2,r2,r3
    9428:	dd000817 	ldw	r20,32(sp)
    942c:	003d2f06 	br	88ec <__alt_mem_Flash_flash_data+0xf40088ec>
    9430:	9029883a 	mov	r20,r18
    9434:	982b883a 	mov	r21,r19
    9438:	04400084 	movi	r17,2
    943c:	003bc606 	br	8358 <__alt_mem_Flash_flash_data+0xf4008358>
    9440:	d8800617 	ldw	r2,24(sp)
    9444:	103efc26 	beq	r2,zero,9038 <__alt_mem_Flash_flash_data+0xf4009038>
    9448:	d8c00c17 	ldw	r3,48(sp)
    944c:	00fc890e 	bge	zero,r3,8674 <__alt_mem_Flash_flash_data+0xf4008674>
    9450:	a80b883a 	mov	r5,r21
    9454:	a009883a 	mov	r4,r20
    9458:	000d883a 	mov	r6,zero
    945c:	01d00934 	movhi	r7,16420
    9460:	0011d300 	call	11d30 <__muldf3>
    9464:	89000044 	addi	r4,r17,1
    9468:	1029883a 	mov	r20,r2
    946c:	182b883a 	mov	r21,r3
    9470:	0012dac0 	call	12dac <__floatsidf>
    9474:	a009883a 	mov	r4,r20
    9478:	a80b883a 	mov	r5,r21
    947c:	100d883a 	mov	r6,r2
    9480:	180f883a 	mov	r7,r3
    9484:	0011d300 	call	11d30 <__muldf3>
    9488:	1009883a 	mov	r4,r2
    948c:	180b883a 	mov	r5,r3
    9490:	000d883a 	mov	r6,zero
    9494:	01d00734 	movhi	r7,16412
    9498:	00109840 	call	10984 <__adddf3>
    949c:	d9000517 	ldw	r4,20(sp)
    94a0:	1023883a 	mov	r17,r2
    94a4:	00bf3034 	movhi	r2,64704
    94a8:	213fffc4 	addi	r4,r4,-1
    94ac:	1885883a 	add	r2,r3,r2
    94b0:	d9001215 	stw	r4,72(sp)
    94b4:	d8800e15 	stw	r2,56(sp)
    94b8:	da800c17 	ldw	r10,48(sp)
    94bc:	003bc306 	br	83cc <__alt_mem_Flash_flash_data+0xf40083cc>
    94c0:	b039883a 	mov	fp,r22
    94c4:	01000e44 	movi	r4,57
    94c8:	8825883a 	mov	r18,r17
    94cc:	9dc00044 	addi	r23,r19,1
    94d0:	99000005 	stb	r4,0(r19)
    94d4:	a023883a 	mov	r17,r20
    94d8:	003dae06 	br	8b94 <__alt_mem_Flash_flash_data+0xf4008b94>
    94dc:	d9800e17 	ldw	r6,56(sp)
    94e0:	d9c01117 	ldw	r7,68(sp)
    94e4:	0009883a 	mov	r4,zero
    94e8:	014ff834 	movhi	r5,16352
    94ec:	da001715 	stw	r8,92(sp)
    94f0:	da401515 	stw	r9,84(sp)
    94f4:	00124540 	call	12454 <__subdf3>
    94f8:	da001717 	ldw	r8,92(sp)
    94fc:	da401517 	ldw	r9,84(sp)
    9500:	1009883a 	mov	r4,r2
    9504:	180b883a 	mov	r5,r3
    9508:	400d883a 	mov	r6,r8
    950c:	480f883a 	mov	r7,r9
    9510:	0011b700 	call	11b70 <__gedf2>
    9514:	00bc570e 	bge	zero,r2,8674 <__alt_mem_Flash_flash_data+0xf4008674>
    9518:	01000c04 	movi	r4,48
    951c:	00000106 	br	9524 <_dtoa_r+0x1624>
    9520:	102f883a 	mov	r23,r2
    9524:	b8bfffc4 	addi	r2,r23,-1
    9528:	10c00007 	ldb	r3,0(r2)
    952c:	193ffc26 	beq	r3,r4,9520 <__alt_mem_Flash_flash_data+0xf4009520>
    9530:	d9801217 	ldw	r6,72(sp)
    9534:	d9800515 	stw	r6,20(sp)
    9538:	003c1f06 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    953c:	d8801217 	ldw	r2,72(sp)
    9540:	dc001117 	ldw	r16,68(sp)
    9544:	d8800515 	stw	r2,20(sp)
    9548:	003cc906 	br	8870 <__alt_mem_Flash_flash_data+0xf4008870>
    954c:	dd801317 	ldw	r22,76(sp)
    9550:	dc001117 	ldw	r16,68(sp)
    9554:	dcc01417 	ldw	r19,80(sp)
    9558:	dc801017 	ldw	r18,64(sp)
    955c:	003c4506 	br	8674 <__alt_mem_Flash_flash_data+0xf4008674>
    9560:	103e5d1e 	bne	r2,zero,8ed8 <__alt_mem_Flash_flash_data+0xf4008ed8>
    9564:	4080004c 	andi	r2,r8,1
    9568:	103e5b26 	beq	r2,zero,8ed8 <__alt_mem_Flash_flash_data+0xf4008ed8>
    956c:	003e5706 	br	8ecc <__alt_mem_Flash_flash_data+0xf4008ecc>
    9570:	d8c00317 	ldw	r3,12(sp)
    9574:	00800084 	movi	r2,2
    9578:	10c00a16 	blt	r2,r3,95a4 <_dtoa_r+0x16a4>
    957c:	d9000c17 	ldw	r4,48(sp)
    9580:	003e8306 	br	8f90 <__alt_mem_Flash_flash_data+0xf4008f90>
    9584:	04400084 	movi	r17,2
    9588:	003b7306 	br	8358 <__alt_mem_Flash_flash_data+0xf4008358>
    958c:	d9801217 	ldw	r6,72(sp)
    9590:	d9800515 	stw	r6,20(sp)
    9594:	003cb606 	br	8870 <__alt_mem_Flash_flash_data+0xf4008870>
    9598:	d9001217 	ldw	r4,72(sp)
    959c:	d9000515 	stw	r4,20(sp)
    95a0:	003c0506 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    95a4:	d9800c17 	ldw	r6,48(sp)
    95a8:	d9800615 	stw	r6,24(sp)
    95ac:	003e8306 	br	8fbc <__alt_mem_Flash_flash_data+0xf4008fbc>
    95b0:	d9800317 	ldw	r6,12(sp)
    95b4:	00800084 	movi	r2,2
    95b8:	11800216 	blt	r2,r6,95c4 <_dtoa_r+0x16c4>
    95bc:	d8800c17 	ldw	r2,48(sp)
    95c0:	003da606 	br	8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    95c4:	d8800c17 	ldw	r2,48(sp)
    95c8:	d8800615 	stw	r2,24(sp)
    95cc:	003e7b06 	br	8fbc <__alt_mem_Flash_flash_data+0xf4008fbc>
    95d0:	05000044 	movi	r20,1
    95d4:	003b0506 	br	81ec <__alt_mem_Flash_flash_data+0xf40081ec>
    95d8:	8009883a 	mov	r4,r16
    95dc:	80001115 	stw	zero,68(r16)
    95e0:	000b883a 	mov	r5,zero
    95e4:	000b5980 	call	b598 <_Balloc>
    95e8:	d8800715 	stw	r2,28(sp)
    95ec:	d8c00717 	ldw	r3,28(sp)
    95f0:	00bfffc4 	movi	r2,-1
    95f4:	01000044 	movi	r4,1
    95f8:	d8800c15 	stw	r2,48(sp)
    95fc:	80c01015 	stw	r3,64(r16)
    9600:	d9000b15 	stw	r4,44(sp)
    9604:	d8800615 	stw	r2,24(sp)
    9608:	d8002215 	stw	zero,136(sp)
    960c:	003c1906 	br	8674 <__alt_mem_Flash_flash_data+0xf4008674>
    9610:	193d2926 	beq	r3,r4,8ab8 <__alt_mem_Flash_flash_data+0xf4008ab8>
    9614:	00c00f04 	movi	r3,60
    9618:	1885c83a 	sub	r2,r3,r2
    961c:	003d7b06 	br	8c0c <__alt_mem_Flash_flash_data+0xf4008c0c>
    9620:	000b883a 	mov	r5,zero
    9624:	003b1006 	br	8268 <__alt_mem_Flash_flash_data+0xf4008268>

00009628 <__sflush_r>:
    9628:	2880030b 	ldhu	r2,12(r5)
    962c:	defffb04 	addi	sp,sp,-20
    9630:	dcc00315 	stw	r19,12(sp)
    9634:	dc400115 	stw	r17,4(sp)
    9638:	dfc00415 	stw	ra,16(sp)
    963c:	dc800215 	stw	r18,8(sp)
    9640:	dc000015 	stw	r16,0(sp)
    9644:	10c0020c 	andi	r3,r2,8
    9648:	2823883a 	mov	r17,r5
    964c:	2027883a 	mov	r19,r4
    9650:	1800311e 	bne	r3,zero,9718 <__sflush_r+0xf0>
    9654:	28c00117 	ldw	r3,4(r5)
    9658:	10820014 	ori	r2,r2,2048
    965c:	2880030d 	sth	r2,12(r5)
    9660:	00c04b0e 	bge	zero,r3,9790 <__sflush_r+0x168>
    9664:	8a000a17 	ldw	r8,40(r17)
    9668:	40002326 	beq	r8,zero,96f8 <__sflush_r+0xd0>
    966c:	9c000017 	ldw	r16,0(r19)
    9670:	10c4000c 	andi	r3,r2,4096
    9674:	98000015 	stw	zero,0(r19)
    9678:	18004826 	beq	r3,zero,979c <__sflush_r+0x174>
    967c:	89801417 	ldw	r6,80(r17)
    9680:	10c0010c 	andi	r3,r2,4
    9684:	18000626 	beq	r3,zero,96a0 <__sflush_r+0x78>
    9688:	88c00117 	ldw	r3,4(r17)
    968c:	88800c17 	ldw	r2,48(r17)
    9690:	30cdc83a 	sub	r6,r6,r3
    9694:	10000226 	beq	r2,zero,96a0 <__sflush_r+0x78>
    9698:	88800f17 	ldw	r2,60(r17)
    969c:	308dc83a 	sub	r6,r6,r2
    96a0:	89400717 	ldw	r5,28(r17)
    96a4:	9809883a 	mov	r4,r19
    96a8:	000f883a 	mov	r7,zero
    96ac:	403ee83a 	callr	r8
    96b0:	00ffffc4 	movi	r3,-1
    96b4:	10c04426 	beq	r2,r3,97c8 <__sflush_r+0x1a0>
    96b8:	88c0030b 	ldhu	r3,12(r17)
    96bc:	89000417 	ldw	r4,16(r17)
    96c0:	88000115 	stw	zero,4(r17)
    96c4:	197dffcc 	andi	r5,r3,63487
    96c8:	8940030d 	sth	r5,12(r17)
    96cc:	89000015 	stw	r4,0(r17)
    96d0:	18c4000c 	andi	r3,r3,4096
    96d4:	18002c1e 	bne	r3,zero,9788 <__sflush_r+0x160>
    96d8:	89400c17 	ldw	r5,48(r17)
    96dc:	9c000015 	stw	r16,0(r19)
    96e0:	28000526 	beq	r5,zero,96f8 <__sflush_r+0xd0>
    96e4:	88801004 	addi	r2,r17,64
    96e8:	28800226 	beq	r5,r2,96f4 <__sflush_r+0xcc>
    96ec:	9809883a 	mov	r4,r19
    96f0:	0009d800 	call	9d80 <_free_r>
    96f4:	88000c15 	stw	zero,48(r17)
    96f8:	0005883a 	mov	r2,zero
    96fc:	dfc00417 	ldw	ra,16(sp)
    9700:	dcc00317 	ldw	r19,12(sp)
    9704:	dc800217 	ldw	r18,8(sp)
    9708:	dc400117 	ldw	r17,4(sp)
    970c:	dc000017 	ldw	r16,0(sp)
    9710:	dec00504 	addi	sp,sp,20
    9714:	f800283a 	ret
    9718:	2c800417 	ldw	r18,16(r5)
    971c:	903ff626 	beq	r18,zero,96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    9720:	2c000017 	ldw	r16,0(r5)
    9724:	108000cc 	andi	r2,r2,3
    9728:	2c800015 	stw	r18,0(r5)
    972c:	84a1c83a 	sub	r16,r16,r18
    9730:	1000131e 	bne	r2,zero,9780 <__sflush_r+0x158>
    9734:	28800517 	ldw	r2,20(r5)
    9738:	88800215 	stw	r2,8(r17)
    973c:	04000316 	blt	zero,r16,974c <__sflush_r+0x124>
    9740:	003fed06 	br	96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    9744:	90a5883a 	add	r18,r18,r2
    9748:	043feb0e 	bge	zero,r16,96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    974c:	88800917 	ldw	r2,36(r17)
    9750:	89400717 	ldw	r5,28(r17)
    9754:	800f883a 	mov	r7,r16
    9758:	900d883a 	mov	r6,r18
    975c:	9809883a 	mov	r4,r19
    9760:	103ee83a 	callr	r2
    9764:	80a1c83a 	sub	r16,r16,r2
    9768:	00bff616 	blt	zero,r2,9744 <__alt_mem_Flash_flash_data+0xf4009744>
    976c:	88c0030b 	ldhu	r3,12(r17)
    9770:	00bfffc4 	movi	r2,-1
    9774:	18c01014 	ori	r3,r3,64
    9778:	88c0030d 	sth	r3,12(r17)
    977c:	003fdf06 	br	96fc <__alt_mem_Flash_flash_data+0xf40096fc>
    9780:	0005883a 	mov	r2,zero
    9784:	003fec06 	br	9738 <__alt_mem_Flash_flash_data+0xf4009738>
    9788:	88801415 	stw	r2,80(r17)
    978c:	003fd206 	br	96d8 <__alt_mem_Flash_flash_data+0xf40096d8>
    9790:	28c00f17 	ldw	r3,60(r5)
    9794:	00ffb316 	blt	zero,r3,9664 <__alt_mem_Flash_flash_data+0xf4009664>
    9798:	003fd706 	br	96f8 <__alt_mem_Flash_flash_data+0xf40096f8>
    979c:	89400717 	ldw	r5,28(r17)
    97a0:	000d883a 	mov	r6,zero
    97a4:	9809883a 	mov	r4,r19
    97a8:	01c00044 	movi	r7,1
    97ac:	403ee83a 	callr	r8
    97b0:	100d883a 	mov	r6,r2
    97b4:	00bfffc4 	movi	r2,-1
    97b8:	30801426 	beq	r6,r2,980c <__sflush_r+0x1e4>
    97bc:	8880030b 	ldhu	r2,12(r17)
    97c0:	8a000a17 	ldw	r8,40(r17)
    97c4:	003fae06 	br	9680 <__alt_mem_Flash_flash_data+0xf4009680>
    97c8:	98c00017 	ldw	r3,0(r19)
    97cc:	183fba26 	beq	r3,zero,96b8 <__alt_mem_Flash_flash_data+0xf40096b8>
    97d0:	01000744 	movi	r4,29
    97d4:	19000626 	beq	r3,r4,97f0 <__sflush_r+0x1c8>
    97d8:	01000584 	movi	r4,22
    97dc:	19000426 	beq	r3,r4,97f0 <__sflush_r+0x1c8>
    97e0:	88c0030b 	ldhu	r3,12(r17)
    97e4:	18c01014 	ori	r3,r3,64
    97e8:	88c0030d 	sth	r3,12(r17)
    97ec:	003fc306 	br	96fc <__alt_mem_Flash_flash_data+0xf40096fc>
    97f0:	8880030b 	ldhu	r2,12(r17)
    97f4:	88c00417 	ldw	r3,16(r17)
    97f8:	88000115 	stw	zero,4(r17)
    97fc:	10bdffcc 	andi	r2,r2,63487
    9800:	8880030d 	sth	r2,12(r17)
    9804:	88c00015 	stw	r3,0(r17)
    9808:	003fb306 	br	96d8 <__alt_mem_Flash_flash_data+0xf40096d8>
    980c:	98800017 	ldw	r2,0(r19)
    9810:	103fea26 	beq	r2,zero,97bc <__alt_mem_Flash_flash_data+0xf40097bc>
    9814:	00c00744 	movi	r3,29
    9818:	10c00226 	beq	r2,r3,9824 <__sflush_r+0x1fc>
    981c:	00c00584 	movi	r3,22
    9820:	10ffd21e 	bne	r2,r3,976c <__alt_mem_Flash_flash_data+0xf400976c>
    9824:	9c000015 	stw	r16,0(r19)
    9828:	0005883a 	mov	r2,zero
    982c:	003fb306 	br	96fc <__alt_mem_Flash_flash_data+0xf40096fc>

00009830 <_fflush_r>:
    9830:	defffd04 	addi	sp,sp,-12
    9834:	dc000115 	stw	r16,4(sp)
    9838:	dfc00215 	stw	ra,8(sp)
    983c:	2021883a 	mov	r16,r4
    9840:	20000226 	beq	r4,zero,984c <_fflush_r+0x1c>
    9844:	20800e17 	ldw	r2,56(r4)
    9848:	10000c26 	beq	r2,zero,987c <_fflush_r+0x4c>
    984c:	2880030f 	ldh	r2,12(r5)
    9850:	1000051e 	bne	r2,zero,9868 <_fflush_r+0x38>
    9854:	0005883a 	mov	r2,zero
    9858:	dfc00217 	ldw	ra,8(sp)
    985c:	dc000117 	ldw	r16,4(sp)
    9860:	dec00304 	addi	sp,sp,12
    9864:	f800283a 	ret
    9868:	8009883a 	mov	r4,r16
    986c:	dfc00217 	ldw	ra,8(sp)
    9870:	dc000117 	ldw	r16,4(sp)
    9874:	dec00304 	addi	sp,sp,12
    9878:	00096281 	jmpi	9628 <__sflush_r>
    987c:	d9400015 	stw	r5,0(sp)
    9880:	0009c0c0 	call	9c0c <__sinit>
    9884:	d9400017 	ldw	r5,0(sp)
    9888:	003ff006 	br	984c <__alt_mem_Flash_flash_data+0xf400984c>

0000988c <fflush>:
    988c:	20000526 	beq	r4,zero,98a4 <fflush+0x18>
    9890:	008000b4 	movhi	r2,2
    9894:	108b3f04 	addi	r2,r2,11516
    9898:	200b883a 	mov	r5,r4
    989c:	11000017 	ldw	r4,0(r2)
    98a0:	00098301 	jmpi	9830 <_fflush_r>
    98a4:	008000b4 	movhi	r2,2
    98a8:	108b3e04 	addi	r2,r2,11512
    98ac:	11000017 	ldw	r4,0(r2)
    98b0:	01400074 	movhi	r5,1
    98b4:	29660c04 	addi	r5,r5,-26576
    98b8:	000a5f41 	jmpi	a5f4 <_fwalk_reent>

000098bc <__fp_lock>:
    98bc:	0005883a 	mov	r2,zero
    98c0:	f800283a 	ret

000098c4 <__fp_unlock>:
    98c4:	0005883a 	mov	r2,zero
    98c8:	f800283a 	ret

000098cc <_cleanup_r>:
    98cc:	01400074 	movhi	r5,1
    98d0:	297d6104 	addi	r5,r5,-2684
    98d4:	000a5f41 	jmpi	a5f4 <_fwalk_reent>

000098d8 <__sinit.part.1>:
    98d8:	defff704 	addi	sp,sp,-36
    98dc:	00c00074 	movhi	r3,1
    98e0:	dfc00815 	stw	ra,32(sp)
    98e4:	ddc00715 	stw	r23,28(sp)
    98e8:	dd800615 	stw	r22,24(sp)
    98ec:	dd400515 	stw	r21,20(sp)
    98f0:	dd000415 	stw	r20,16(sp)
    98f4:	dcc00315 	stw	r19,12(sp)
    98f8:	dc800215 	stw	r18,8(sp)
    98fc:	dc400115 	stw	r17,4(sp)
    9900:	dc000015 	stw	r16,0(sp)
    9904:	18e63304 	addi	r3,r3,-26420
    9908:	24000117 	ldw	r16,4(r4)
    990c:	20c00f15 	stw	r3,60(r4)
    9910:	2080bb04 	addi	r2,r4,748
    9914:	00c000c4 	movi	r3,3
    9918:	20c0b915 	stw	r3,740(r4)
    991c:	2080ba15 	stw	r2,744(r4)
    9920:	2000b815 	stw	zero,736(r4)
    9924:	05c00204 	movi	r23,8
    9928:	00800104 	movi	r2,4
    992c:	2025883a 	mov	r18,r4
    9930:	b80d883a 	mov	r6,r23
    9934:	81001704 	addi	r4,r16,92
    9938:	000b883a 	mov	r5,zero
    993c:	80000015 	stw	zero,0(r16)
    9940:	80000115 	stw	zero,4(r16)
    9944:	80000215 	stw	zero,8(r16)
    9948:	8080030d 	sth	r2,12(r16)
    994c:	80001915 	stw	zero,100(r16)
    9950:	8000038d 	sth	zero,14(r16)
    9954:	80000415 	stw	zero,16(r16)
    9958:	80000515 	stw	zero,20(r16)
    995c:	80000615 	stw	zero,24(r16)
    9960:	000b4740 	call	b474 <memset>
    9964:	05800074 	movhi	r22,1
    9968:	94400217 	ldw	r17,8(r18)
    996c:	05400074 	movhi	r21,1
    9970:	05000074 	movhi	r20,1
    9974:	04c00074 	movhi	r19,1
    9978:	b5b2da04 	addi	r22,r22,-13464
    997c:	ad72f104 	addi	r21,r21,-13372
    9980:	a5331004 	addi	r20,r20,-13248
    9984:	9cf32704 	addi	r19,r19,-13156
    9988:	85800815 	stw	r22,32(r16)
    998c:	85400915 	stw	r21,36(r16)
    9990:	85000a15 	stw	r20,40(r16)
    9994:	84c00b15 	stw	r19,44(r16)
    9998:	84000715 	stw	r16,28(r16)
    999c:	00800284 	movi	r2,10
    99a0:	8880030d 	sth	r2,12(r17)
    99a4:	00800044 	movi	r2,1
    99a8:	89001704 	addi	r4,r17,92
    99ac:	b80d883a 	mov	r6,r23
    99b0:	000b883a 	mov	r5,zero
    99b4:	88000015 	stw	zero,0(r17)
    99b8:	88000115 	stw	zero,4(r17)
    99bc:	88000215 	stw	zero,8(r17)
    99c0:	88001915 	stw	zero,100(r17)
    99c4:	8880038d 	sth	r2,14(r17)
    99c8:	88000415 	stw	zero,16(r17)
    99cc:	88000515 	stw	zero,20(r17)
    99d0:	88000615 	stw	zero,24(r17)
    99d4:	000b4740 	call	b474 <memset>
    99d8:	94000317 	ldw	r16,12(r18)
    99dc:	00800484 	movi	r2,18
    99e0:	8c400715 	stw	r17,28(r17)
    99e4:	8d800815 	stw	r22,32(r17)
    99e8:	8d400915 	stw	r21,36(r17)
    99ec:	8d000a15 	stw	r20,40(r17)
    99f0:	8cc00b15 	stw	r19,44(r17)
    99f4:	8080030d 	sth	r2,12(r16)
    99f8:	00800084 	movi	r2,2
    99fc:	80000015 	stw	zero,0(r16)
    9a00:	80000115 	stw	zero,4(r16)
    9a04:	80000215 	stw	zero,8(r16)
    9a08:	80001915 	stw	zero,100(r16)
    9a0c:	8080038d 	sth	r2,14(r16)
    9a10:	80000415 	stw	zero,16(r16)
    9a14:	80000515 	stw	zero,20(r16)
    9a18:	80000615 	stw	zero,24(r16)
    9a1c:	81001704 	addi	r4,r16,92
    9a20:	000b883a 	mov	r5,zero
    9a24:	b80d883a 	mov	r6,r23
    9a28:	000b4740 	call	b474 <memset>
    9a2c:	00800044 	movi	r2,1
    9a30:	84000715 	stw	r16,28(r16)
    9a34:	85800815 	stw	r22,32(r16)
    9a38:	85400915 	stw	r21,36(r16)
    9a3c:	85000a15 	stw	r20,40(r16)
    9a40:	84c00b15 	stw	r19,44(r16)
    9a44:	90800e15 	stw	r2,56(r18)
    9a48:	dfc00817 	ldw	ra,32(sp)
    9a4c:	ddc00717 	ldw	r23,28(sp)
    9a50:	dd800617 	ldw	r22,24(sp)
    9a54:	dd400517 	ldw	r21,20(sp)
    9a58:	dd000417 	ldw	r20,16(sp)
    9a5c:	dcc00317 	ldw	r19,12(sp)
    9a60:	dc800217 	ldw	r18,8(sp)
    9a64:	dc400117 	ldw	r17,4(sp)
    9a68:	dc000017 	ldw	r16,0(sp)
    9a6c:	dec00904 	addi	sp,sp,36
    9a70:	f800283a 	ret

00009a74 <__sfmoreglue>:
    9a74:	defffc04 	addi	sp,sp,-16
    9a78:	dc400115 	stw	r17,4(sp)
    9a7c:	2c7fffc4 	addi	r17,r5,-1
    9a80:	8c401a24 	muli	r17,r17,104
    9a84:	dc800215 	stw	r18,8(sp)
    9a88:	2825883a 	mov	r18,r5
    9a8c:	89401d04 	addi	r5,r17,116
    9a90:	dc000015 	stw	r16,0(sp)
    9a94:	dfc00315 	stw	ra,12(sp)
    9a98:	000a9500 	call	a950 <_malloc_r>
    9a9c:	1021883a 	mov	r16,r2
    9aa0:	10000726 	beq	r2,zero,9ac0 <__sfmoreglue+0x4c>
    9aa4:	11000304 	addi	r4,r2,12
    9aa8:	10000015 	stw	zero,0(r2)
    9aac:	14800115 	stw	r18,4(r2)
    9ab0:	11000215 	stw	r4,8(r2)
    9ab4:	000b883a 	mov	r5,zero
    9ab8:	89801a04 	addi	r6,r17,104
    9abc:	000b4740 	call	b474 <memset>
    9ac0:	8005883a 	mov	r2,r16
    9ac4:	dfc00317 	ldw	ra,12(sp)
    9ac8:	dc800217 	ldw	r18,8(sp)
    9acc:	dc400117 	ldw	r17,4(sp)
    9ad0:	dc000017 	ldw	r16,0(sp)
    9ad4:	dec00404 	addi	sp,sp,16
    9ad8:	f800283a 	ret

00009adc <__sfp>:
    9adc:	008000b4 	movhi	r2,2
    9ae0:	defffb04 	addi	sp,sp,-20
    9ae4:	108b3e04 	addi	r2,r2,11512
    9ae8:	dc800215 	stw	r18,8(sp)
    9aec:	14800017 	ldw	r18,0(r2)
    9af0:	dcc00315 	stw	r19,12(sp)
    9af4:	dfc00415 	stw	ra,16(sp)
    9af8:	90800e17 	ldw	r2,56(r18)
    9afc:	dc400115 	stw	r17,4(sp)
    9b00:	dc000015 	stw	r16,0(sp)
    9b04:	2027883a 	mov	r19,r4
    9b08:	1000021e 	bne	r2,zero,9b14 <__sfp+0x38>
    9b0c:	9009883a 	mov	r4,r18
    9b10:	00098d80 	call	98d8 <__sinit.part.1>
    9b14:	9480b804 	addi	r18,r18,736
    9b18:	047fffc4 	movi	r17,-1
    9b1c:	91400117 	ldw	r5,4(r18)
    9b20:	94000217 	ldw	r16,8(r18)
    9b24:	297fffc4 	addi	r5,r5,-1
    9b28:	28000a16 	blt	r5,zero,9b54 <__sfp+0x78>
    9b2c:	8080030f 	ldh	r2,12(r16)
    9b30:	10000c26 	beq	r2,zero,9b64 <__sfp+0x88>
    9b34:	80c01d04 	addi	r3,r16,116
    9b38:	00000206 	br	9b44 <__sfp+0x68>
    9b3c:	18bfe60f 	ldh	r2,-104(r3)
    9b40:	10000826 	beq	r2,zero,9b64 <__sfp+0x88>
    9b44:	297fffc4 	addi	r5,r5,-1
    9b48:	1c3ffd04 	addi	r16,r3,-12
    9b4c:	18c01a04 	addi	r3,r3,104
    9b50:	2c7ffa1e 	bne	r5,r17,9b3c <__alt_mem_Flash_flash_data+0xf4009b3c>
    9b54:	90800017 	ldw	r2,0(r18)
    9b58:	10001d26 	beq	r2,zero,9bd0 <__sfp+0xf4>
    9b5c:	1025883a 	mov	r18,r2
    9b60:	003fee06 	br	9b1c <__alt_mem_Flash_flash_data+0xf4009b1c>
    9b64:	00bfffc4 	movi	r2,-1
    9b68:	8080038d 	sth	r2,14(r16)
    9b6c:	00800044 	movi	r2,1
    9b70:	8080030d 	sth	r2,12(r16)
    9b74:	80001915 	stw	zero,100(r16)
    9b78:	80000015 	stw	zero,0(r16)
    9b7c:	80000215 	stw	zero,8(r16)
    9b80:	80000115 	stw	zero,4(r16)
    9b84:	80000415 	stw	zero,16(r16)
    9b88:	80000515 	stw	zero,20(r16)
    9b8c:	80000615 	stw	zero,24(r16)
    9b90:	81001704 	addi	r4,r16,92
    9b94:	000b883a 	mov	r5,zero
    9b98:	01800204 	movi	r6,8
    9b9c:	000b4740 	call	b474 <memset>
    9ba0:	8005883a 	mov	r2,r16
    9ba4:	80000c15 	stw	zero,48(r16)
    9ba8:	80000d15 	stw	zero,52(r16)
    9bac:	80001115 	stw	zero,68(r16)
    9bb0:	80001215 	stw	zero,72(r16)
    9bb4:	dfc00417 	ldw	ra,16(sp)
    9bb8:	dcc00317 	ldw	r19,12(sp)
    9bbc:	dc800217 	ldw	r18,8(sp)
    9bc0:	dc400117 	ldw	r17,4(sp)
    9bc4:	dc000017 	ldw	r16,0(sp)
    9bc8:	dec00504 	addi	sp,sp,20
    9bcc:	f800283a 	ret
    9bd0:	9809883a 	mov	r4,r19
    9bd4:	01400104 	movi	r5,4
    9bd8:	0009a740 	call	9a74 <__sfmoreglue>
    9bdc:	90800015 	stw	r2,0(r18)
    9be0:	103fde1e 	bne	r2,zero,9b5c <__alt_mem_Flash_flash_data+0xf4009b5c>
    9be4:	00800304 	movi	r2,12
    9be8:	98800015 	stw	r2,0(r19)
    9bec:	0005883a 	mov	r2,zero
    9bf0:	003ff006 	br	9bb4 <__alt_mem_Flash_flash_data+0xf4009bb4>

00009bf4 <_cleanup>:
    9bf4:	008000b4 	movhi	r2,2
    9bf8:	108b3e04 	addi	r2,r2,11512
    9bfc:	11000017 	ldw	r4,0(r2)
    9c00:	01400074 	movhi	r5,1
    9c04:	297d6104 	addi	r5,r5,-2684
    9c08:	000a5f41 	jmpi	a5f4 <_fwalk_reent>

00009c0c <__sinit>:
    9c0c:	20800e17 	ldw	r2,56(r4)
    9c10:	10000126 	beq	r2,zero,9c18 <__sinit+0xc>
    9c14:	f800283a 	ret
    9c18:	00098d81 	jmpi	98d8 <__sinit.part.1>

00009c1c <__sfp_lock_acquire>:
    9c1c:	f800283a 	ret

00009c20 <__sfp_lock_release>:
    9c20:	f800283a 	ret

00009c24 <__sinit_lock_acquire>:
    9c24:	f800283a 	ret

00009c28 <__sinit_lock_release>:
    9c28:	f800283a 	ret

00009c2c <__fp_lock_all>:
    9c2c:	008000b4 	movhi	r2,2
    9c30:	108b3f04 	addi	r2,r2,11516
    9c34:	11000017 	ldw	r4,0(r2)
    9c38:	01400074 	movhi	r5,1
    9c3c:	29662f04 	addi	r5,r5,-26436
    9c40:	000a5301 	jmpi	a530 <_fwalk>

00009c44 <__fp_unlock_all>:
    9c44:	008000b4 	movhi	r2,2
    9c48:	108b3f04 	addi	r2,r2,11516
    9c4c:	11000017 	ldw	r4,0(r2)
    9c50:	01400074 	movhi	r5,1
    9c54:	29663104 	addi	r5,r5,-26428
    9c58:	000a5301 	jmpi	a530 <_fwalk>

00009c5c <_malloc_trim_r>:
    9c5c:	defffb04 	addi	sp,sp,-20
    9c60:	dcc00315 	stw	r19,12(sp)
    9c64:	04c000b4 	movhi	r19,2
    9c68:	dc800215 	stw	r18,8(sp)
    9c6c:	dc400115 	stw	r17,4(sp)
    9c70:	dc000015 	stw	r16,0(sp)
    9c74:	dfc00415 	stw	ra,16(sp)
    9c78:	2821883a 	mov	r16,r5
    9c7c:	9cc4c904 	addi	r19,r19,4900
    9c80:	2025883a 	mov	r18,r4
    9c84:	0013a600 	call	13a60 <__malloc_lock>
    9c88:	98800217 	ldw	r2,8(r19)
    9c8c:	14400117 	ldw	r17,4(r2)
    9c90:	00bfff04 	movi	r2,-4
    9c94:	88a2703a 	and	r17,r17,r2
    9c98:	8c21c83a 	sub	r16,r17,r16
    9c9c:	8403fbc4 	addi	r16,r16,4079
    9ca0:	8020d33a 	srli	r16,r16,12
    9ca4:	0083ffc4 	movi	r2,4095
    9ca8:	843fffc4 	addi	r16,r16,-1
    9cac:	8020933a 	slli	r16,r16,12
    9cb0:	1400060e 	bge	r2,r16,9ccc <_malloc_trim_r+0x70>
    9cb4:	9009883a 	mov	r4,r18
    9cb8:	000b883a 	mov	r5,zero
    9cbc:	000cb140 	call	cb14 <_sbrk_r>
    9cc0:	98c00217 	ldw	r3,8(r19)
    9cc4:	1c47883a 	add	r3,r3,r17
    9cc8:	10c00a26 	beq	r2,r3,9cf4 <_malloc_trim_r+0x98>
    9ccc:	9009883a 	mov	r4,r18
    9cd0:	0013b800 	call	13b80 <__malloc_unlock>
    9cd4:	0005883a 	mov	r2,zero
    9cd8:	dfc00417 	ldw	ra,16(sp)
    9cdc:	dcc00317 	ldw	r19,12(sp)
    9ce0:	dc800217 	ldw	r18,8(sp)
    9ce4:	dc400117 	ldw	r17,4(sp)
    9ce8:	dc000017 	ldw	r16,0(sp)
    9cec:	dec00504 	addi	sp,sp,20
    9cf0:	f800283a 	ret
    9cf4:	9009883a 	mov	r4,r18
    9cf8:	040bc83a 	sub	r5,zero,r16
    9cfc:	000cb140 	call	cb14 <_sbrk_r>
    9d00:	00ffffc4 	movi	r3,-1
    9d04:	10c00d26 	beq	r2,r3,9d3c <_malloc_trim_r+0xe0>
    9d08:	00c000b4 	movhi	r3,2
    9d0c:	18d37e04 	addi	r3,r3,19960
    9d10:	18800017 	ldw	r2,0(r3)
    9d14:	99000217 	ldw	r4,8(r19)
    9d18:	8c23c83a 	sub	r17,r17,r16
    9d1c:	8c400054 	ori	r17,r17,1
    9d20:	1421c83a 	sub	r16,r2,r16
    9d24:	24400115 	stw	r17,4(r4)
    9d28:	9009883a 	mov	r4,r18
    9d2c:	1c000015 	stw	r16,0(r3)
    9d30:	0013b800 	call	13b80 <__malloc_unlock>
    9d34:	00800044 	movi	r2,1
    9d38:	003fe706 	br	9cd8 <__alt_mem_Flash_flash_data+0xf4009cd8>
    9d3c:	9009883a 	mov	r4,r18
    9d40:	000b883a 	mov	r5,zero
    9d44:	000cb140 	call	cb14 <_sbrk_r>
    9d48:	99000217 	ldw	r4,8(r19)
    9d4c:	014003c4 	movi	r5,15
    9d50:	1107c83a 	sub	r3,r2,r4
    9d54:	28ffdd0e 	bge	r5,r3,9ccc <__alt_mem_Flash_flash_data+0xf4009ccc>
    9d58:	014000b4 	movhi	r5,2
    9d5c:	294b4104 	addi	r5,r5,11524
    9d60:	29400017 	ldw	r5,0(r5)
    9d64:	18c00054 	ori	r3,r3,1
    9d68:	20c00115 	stw	r3,4(r4)
    9d6c:	00c000b4 	movhi	r3,2
    9d70:	1145c83a 	sub	r2,r2,r5
    9d74:	18d37e04 	addi	r3,r3,19960
    9d78:	18800015 	stw	r2,0(r3)
    9d7c:	003fd306 	br	9ccc <__alt_mem_Flash_flash_data+0xf4009ccc>

00009d80 <_free_r>:
    9d80:	28004c26 	beq	r5,zero,9eb4 <_free_r+0x134>
    9d84:	defffd04 	addi	sp,sp,-12
    9d88:	dc400115 	stw	r17,4(sp)
    9d8c:	dc000015 	stw	r16,0(sp)
    9d90:	2023883a 	mov	r17,r4
    9d94:	2821883a 	mov	r16,r5
    9d98:	dfc00215 	stw	ra,8(sp)
    9d9c:	0013a600 	call	13a60 <__malloc_lock>
    9da0:	813fff17 	ldw	r4,-4(r16)
    9da4:	00bfff84 	movi	r2,-2
    9da8:	024000b4 	movhi	r9,2
    9dac:	81bffe04 	addi	r6,r16,-8
    9db0:	2084703a 	and	r2,r4,r2
    9db4:	4a44c904 	addi	r9,r9,4900
    9db8:	308b883a 	add	r5,r6,r2
    9dbc:	2a000117 	ldw	r8,4(r5)
    9dc0:	49c00217 	ldw	r7,8(r9)
    9dc4:	00ffff04 	movi	r3,-4
    9dc8:	40c6703a 	and	r3,r8,r3
    9dcc:	39405326 	beq	r7,r5,9f1c <_free_r+0x19c>
    9dd0:	28c00115 	stw	r3,4(r5)
    9dd4:	2100004c 	andi	r4,r4,1
    9dd8:	2000091e 	bne	r4,zero,9e00 <_free_r+0x80>
    9ddc:	81fffe17 	ldw	r7,-8(r16)
    9de0:	4a000204 	addi	r8,r9,8
    9de4:	31cdc83a 	sub	r6,r6,r7
    9de8:	31000217 	ldw	r4,8(r6)
    9dec:	11c5883a 	add	r2,r2,r7
    9df0:	22006126 	beq	r4,r8,9f78 <_free_r+0x1f8>
    9df4:	31c00317 	ldw	r7,12(r6)
    9df8:	21c00315 	stw	r7,12(r4)
    9dfc:	39000215 	stw	r4,8(r7)
    9e00:	28c9883a 	add	r4,r5,r3
    9e04:	21c00117 	ldw	r7,4(r4)
    9e08:	39c0004c 	andi	r7,r7,1
    9e0c:	38000d1e 	bne	r7,zero,9e44 <_free_r+0xc4>
    9e10:	29000217 	ldw	r4,8(r5)
    9e14:	10c5883a 	add	r2,r2,r3
    9e18:	00c000b4 	movhi	r3,2
    9e1c:	18c4cb04 	addi	r3,r3,4908
    9e20:	20c07526 	beq	r4,r3,9ff8 <_free_r+0x278>
    9e24:	29c00317 	ldw	r7,12(r5)
    9e28:	11400054 	ori	r5,r2,1
    9e2c:	3087883a 	add	r3,r6,r2
    9e30:	21c00315 	stw	r7,12(r4)
    9e34:	39000215 	stw	r4,8(r7)
    9e38:	31400115 	stw	r5,4(r6)
    9e3c:	18800015 	stw	r2,0(r3)
    9e40:	00000406 	br	9e54 <_free_r+0xd4>
    9e44:	10c00054 	ori	r3,r2,1
    9e48:	30c00115 	stw	r3,4(r6)
    9e4c:	3087883a 	add	r3,r6,r2
    9e50:	18800015 	stw	r2,0(r3)
    9e54:	00c07fc4 	movi	r3,511
    9e58:	18801736 	bltu	r3,r2,9eb8 <_free_r+0x138>
    9e5c:	1004d0fa 	srli	r2,r2,3
    9e60:	01400044 	movi	r5,1
    9e64:	49000117 	ldw	r4,4(r9)
    9e68:	1087883a 	add	r3,r2,r2
    9e6c:	18c7883a 	add	r3,r3,r3
    9e70:	1005d0ba 	srai	r2,r2,2
    9e74:	18c7883a 	add	r3,r3,r3
    9e78:	1a47883a 	add	r3,r3,r9
    9e7c:	19c00217 	ldw	r7,8(r3)
    9e80:	2884983a 	sll	r2,r5,r2
    9e84:	30c00315 	stw	r3,12(r6)
    9e88:	31c00215 	stw	r7,8(r6)
    9e8c:	1104b03a 	or	r2,r2,r4
    9e90:	19800215 	stw	r6,8(r3)
    9e94:	48800115 	stw	r2,4(r9)
    9e98:	39800315 	stw	r6,12(r7)
    9e9c:	8809883a 	mov	r4,r17
    9ea0:	dfc00217 	ldw	ra,8(sp)
    9ea4:	dc400117 	ldw	r17,4(sp)
    9ea8:	dc000017 	ldw	r16,0(sp)
    9eac:	dec00304 	addi	sp,sp,12
    9eb0:	0013b801 	jmpi	13b80 <__malloc_unlock>
    9eb4:	f800283a 	ret
    9eb8:	1006d27a 	srli	r3,r2,9
    9ebc:	01000104 	movi	r4,4
    9ec0:	20c04036 	bltu	r4,r3,9fc4 <_free_r+0x244>
    9ec4:	1006d1ba 	srli	r3,r2,6
    9ec8:	19400e04 	addi	r5,r3,56
    9ecc:	2947883a 	add	r3,r5,r5
    9ed0:	18c7883a 	add	r3,r3,r3
    9ed4:	18c7883a 	add	r3,r3,r3
    9ed8:	1a49883a 	add	r4,r3,r9
    9edc:	20c00217 	ldw	r3,8(r4)
    9ee0:	01c000b4 	movhi	r7,2
    9ee4:	39c4c904 	addi	r7,r7,4900
    9ee8:	19003b26 	beq	r3,r4,9fd8 <_free_r+0x258>
    9eec:	01ffff04 	movi	r7,-4
    9ef0:	19400117 	ldw	r5,4(r3)
    9ef4:	29ca703a 	and	r5,r5,r7
    9ef8:	1140022e 	bgeu	r2,r5,9f04 <_free_r+0x184>
    9efc:	18c00217 	ldw	r3,8(r3)
    9f00:	20fffb1e 	bne	r4,r3,9ef0 <__alt_mem_Flash_flash_data+0xf4009ef0>
    9f04:	18800317 	ldw	r2,12(r3)
    9f08:	30800315 	stw	r2,12(r6)
    9f0c:	30c00215 	stw	r3,8(r6)
    9f10:	11800215 	stw	r6,8(r2)
    9f14:	19800315 	stw	r6,12(r3)
    9f18:	003fe006 	br	9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    9f1c:	2100004c 	andi	r4,r4,1
    9f20:	1885883a 	add	r2,r3,r2
    9f24:	2000071e 	bne	r4,zero,9f44 <_free_r+0x1c4>
    9f28:	817ffe17 	ldw	r5,-8(r16)
    9f2c:	314dc83a 	sub	r6,r6,r5
    9f30:	30c00317 	ldw	r3,12(r6)
    9f34:	31000217 	ldw	r4,8(r6)
    9f38:	1145883a 	add	r2,r2,r5
    9f3c:	20c00315 	stw	r3,12(r4)
    9f40:	19000215 	stw	r4,8(r3)
    9f44:	10c00054 	ori	r3,r2,1
    9f48:	30c00115 	stw	r3,4(r6)
    9f4c:	00c000b4 	movhi	r3,2
    9f50:	18cb4204 	addi	r3,r3,11528
    9f54:	18c00017 	ldw	r3,0(r3)
    9f58:	49800215 	stw	r6,8(r9)
    9f5c:	10ffcf36 	bltu	r2,r3,9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    9f60:	008000b4 	movhi	r2,2
    9f64:	10935c04 	addi	r2,r2,19824
    9f68:	11400017 	ldw	r5,0(r2)
    9f6c:	8809883a 	mov	r4,r17
    9f70:	0009c5c0 	call	9c5c <_malloc_trim_r>
    9f74:	003fc906 	br	9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    9f78:	28c9883a 	add	r4,r5,r3
    9f7c:	21000117 	ldw	r4,4(r4)
    9f80:	2100004c 	andi	r4,r4,1
    9f84:	20000a1e 	bne	r4,zero,9fb0 <_free_r+0x230>
    9f88:	29000317 	ldw	r4,12(r5)
    9f8c:	29400217 	ldw	r5,8(r5)
    9f90:	10c5883a 	add	r2,r2,r3
    9f94:	10c00054 	ori	r3,r2,1
    9f98:	29000315 	stw	r4,12(r5)
    9f9c:	21400215 	stw	r5,8(r4)
    9fa0:	30c00115 	stw	r3,4(r6)
    9fa4:	308d883a 	add	r6,r6,r2
    9fa8:	30800015 	stw	r2,0(r6)
    9fac:	003fbb06 	br	9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    9fb0:	10c00054 	ori	r3,r2,1
    9fb4:	30c00115 	stw	r3,4(r6)
    9fb8:	308d883a 	add	r6,r6,r2
    9fbc:	30800015 	stw	r2,0(r6)
    9fc0:	003fb606 	br	9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    9fc4:	01000504 	movi	r4,20
    9fc8:	20c01436 	bltu	r4,r3,a01c <_free_r+0x29c>
    9fcc:	194016c4 	addi	r5,r3,91
    9fd0:	2947883a 	add	r3,r5,r5
    9fd4:	003fbe06 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    9fd8:	280bd0ba 	srai	r5,r5,2
    9fdc:	00800044 	movi	r2,1
    9fe0:	39000117 	ldw	r4,4(r7)
    9fe4:	114a983a 	sll	r5,r2,r5
    9fe8:	1805883a 	mov	r2,r3
    9fec:	2908b03a 	or	r4,r5,r4
    9ff0:	39000115 	stw	r4,4(r7)
    9ff4:	003fc406 	br	9f08 <__alt_mem_Flash_flash_data+0xf4009f08>
    9ff8:	49800515 	stw	r6,20(r9)
    9ffc:	49800415 	stw	r6,16(r9)
    a000:	10c00054 	ori	r3,r2,1
    a004:	31000315 	stw	r4,12(r6)
    a008:	31000215 	stw	r4,8(r6)
    a00c:	30c00115 	stw	r3,4(r6)
    a010:	308d883a 	add	r6,r6,r2
    a014:	30800015 	stw	r2,0(r6)
    a018:	003fa006 	br	9e9c <__alt_mem_Flash_flash_data+0xf4009e9c>
    a01c:	01001504 	movi	r4,84
    a020:	20c00436 	bltu	r4,r3,a034 <_free_r+0x2b4>
    a024:	1006d33a 	srli	r3,r2,12
    a028:	19401b84 	addi	r5,r3,110
    a02c:	2947883a 	add	r3,r5,r5
    a030:	003fa706 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    a034:	01005504 	movi	r4,340
    a038:	20c00436 	bltu	r4,r3,a04c <_free_r+0x2cc>
    a03c:	1006d3fa 	srli	r3,r2,15
    a040:	19401dc4 	addi	r5,r3,119
    a044:	2947883a 	add	r3,r5,r5
    a048:	003fa106 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    a04c:	01015504 	movi	r4,1364
    a050:	20c00436 	bltu	r4,r3,a064 <_free_r+0x2e4>
    a054:	1006d4ba 	srli	r3,r2,18
    a058:	19401f04 	addi	r5,r3,124
    a05c:	2947883a 	add	r3,r5,r5
    a060:	003f9b06 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>
    a064:	00c03f04 	movi	r3,252
    a068:	01401f84 	movi	r5,126
    a06c:	003f9806 	br	9ed0 <__alt_mem_Flash_flash_data+0xf4009ed0>

0000a070 <__sfvwrite_r>:
    a070:	30800217 	ldw	r2,8(r6)
    a074:	10006726 	beq	r2,zero,a214 <__sfvwrite_r+0x1a4>
    a078:	defff404 	addi	sp,sp,-48
    a07c:	dd000615 	stw	r20,24(sp)
    a080:	2029883a 	mov	r20,r4
    a084:	2900030b 	ldhu	r4,12(r5)
    a088:	ddc00915 	stw	r23,36(sp)
    a08c:	dc000215 	stw	r16,8(sp)
    a090:	dfc00b15 	stw	ra,44(sp)
    a094:	df000a15 	stw	fp,40(sp)
    a098:	dd800815 	stw	r22,32(sp)
    a09c:	dd400715 	stw	r21,28(sp)
    a0a0:	dcc00515 	stw	r19,20(sp)
    a0a4:	dc800415 	stw	r18,16(sp)
    a0a8:	dc400315 	stw	r17,12(sp)
    a0ac:	2080020c 	andi	r2,r4,8
    a0b0:	2821883a 	mov	r16,r5
    a0b4:	302f883a 	mov	r23,r6
    a0b8:	10002726 	beq	r2,zero,a158 <__sfvwrite_r+0xe8>
    a0bc:	28800417 	ldw	r2,16(r5)
    a0c0:	10002526 	beq	r2,zero,a158 <__sfvwrite_r+0xe8>
    a0c4:	2080008c 	andi	r2,r4,2
    a0c8:	bc400017 	ldw	r17,0(r23)
    a0cc:	10002a26 	beq	r2,zero,a178 <__sfvwrite_r+0x108>
    a0d0:	05600034 	movhi	r21,32768
    a0d4:	0027883a 	mov	r19,zero
    a0d8:	0025883a 	mov	r18,zero
    a0dc:	ad7f0004 	addi	r21,r21,-1024
    a0e0:	980d883a 	mov	r6,r19
    a0e4:	a009883a 	mov	r4,r20
    a0e8:	90004626 	beq	r18,zero,a204 <__sfvwrite_r+0x194>
    a0ec:	900f883a 	mov	r7,r18
    a0f0:	81400717 	ldw	r5,28(r16)
    a0f4:	ac80022e 	bgeu	r21,r18,a100 <__sfvwrite_r+0x90>
    a0f8:	01e00034 	movhi	r7,32768
    a0fc:	39ff0004 	addi	r7,r7,-1024
    a100:	80800917 	ldw	r2,36(r16)
    a104:	103ee83a 	callr	r2
    a108:	0080520e 	bge	zero,r2,a254 <__sfvwrite_r+0x1e4>
    a10c:	b8c00217 	ldw	r3,8(r23)
    a110:	98a7883a 	add	r19,r19,r2
    a114:	90a5c83a 	sub	r18,r18,r2
    a118:	1885c83a 	sub	r2,r3,r2
    a11c:	b8800215 	stw	r2,8(r23)
    a120:	103fef1e 	bne	r2,zero,a0e0 <__alt_mem_Flash_flash_data+0xf400a0e0>
    a124:	0005883a 	mov	r2,zero
    a128:	dfc00b17 	ldw	ra,44(sp)
    a12c:	df000a17 	ldw	fp,40(sp)
    a130:	ddc00917 	ldw	r23,36(sp)
    a134:	dd800817 	ldw	r22,32(sp)
    a138:	dd400717 	ldw	r21,28(sp)
    a13c:	dd000617 	ldw	r20,24(sp)
    a140:	dcc00517 	ldw	r19,20(sp)
    a144:	dc800417 	ldw	r18,16(sp)
    a148:	dc400317 	ldw	r17,12(sp)
    a14c:	dc000217 	ldw	r16,8(sp)
    a150:	dec00c04 	addi	sp,sp,48
    a154:	f800283a 	ret
    a158:	a009883a 	mov	r4,r20
    a15c:	800b883a 	mov	r5,r16
    a160:	0007bac0 	call	7bac <__swsetup_r>
    a164:	1000ec1e 	bne	r2,zero,a518 <__sfvwrite_r+0x4a8>
    a168:	8100030b 	ldhu	r4,12(r16)
    a16c:	bc400017 	ldw	r17,0(r23)
    a170:	2080008c 	andi	r2,r4,2
    a174:	103fd61e 	bne	r2,zero,a0d0 <__alt_mem_Flash_flash_data+0xf400a0d0>
    a178:	2080004c 	andi	r2,r4,1
    a17c:	10003a1e 	bne	r2,zero,a268 <__sfvwrite_r+0x1f8>
    a180:	0039883a 	mov	fp,zero
    a184:	0025883a 	mov	r18,zero
    a188:	90001a26 	beq	r18,zero,a1f4 <__sfvwrite_r+0x184>
    a18c:	2080800c 	andi	r2,r4,512
    a190:	85800217 	ldw	r22,8(r16)
    a194:	10007626 	beq	r2,zero,a370 <__sfvwrite_r+0x300>
    a198:	b027883a 	mov	r19,r22
    a19c:	95809436 	bltu	r18,r22,a3f0 <__sfvwrite_r+0x380>
    a1a0:	2081200c 	andi	r2,r4,1152
    a1a4:	10009f1e 	bne	r2,zero,a424 <__sfvwrite_r+0x3b4>
    a1a8:	81000017 	ldw	r4,0(r16)
    a1ac:	e00b883a 	mov	r5,fp
    a1b0:	980d883a 	mov	r6,r19
    a1b4:	000b3180 	call	b318 <memmove>
    a1b8:	81000217 	ldw	r4,8(r16)
    a1bc:	81400017 	ldw	r5,0(r16)
    a1c0:	9005883a 	mov	r2,r18
    a1c4:	2587c83a 	sub	r3,r4,r22
    a1c8:	2ce7883a 	add	r19,r5,r19
    a1cc:	80c00215 	stw	r3,8(r16)
    a1d0:	84c00015 	stw	r19,0(r16)
    a1d4:	b8c00217 	ldw	r3,8(r23)
    a1d8:	e0b9883a 	add	fp,fp,r2
    a1dc:	90a5c83a 	sub	r18,r18,r2
    a1e0:	1885c83a 	sub	r2,r3,r2
    a1e4:	b8800215 	stw	r2,8(r23)
    a1e8:	103fce26 	beq	r2,zero,a124 <__alt_mem_Flash_flash_data+0xf400a124>
    a1ec:	8100030b 	ldhu	r4,12(r16)
    a1f0:	903fe61e 	bne	r18,zero,a18c <__alt_mem_Flash_flash_data+0xf400a18c>
    a1f4:	8f000017 	ldw	fp,0(r17)
    a1f8:	8c800117 	ldw	r18,4(r17)
    a1fc:	8c400204 	addi	r17,r17,8
    a200:	003fe106 	br	a188 <__alt_mem_Flash_flash_data+0xf400a188>
    a204:	8cc00017 	ldw	r19,0(r17)
    a208:	8c800117 	ldw	r18,4(r17)
    a20c:	8c400204 	addi	r17,r17,8
    a210:	003fb306 	br	a0e0 <__alt_mem_Flash_flash_data+0xf400a0e0>
    a214:	0005883a 	mov	r2,zero
    a218:	f800283a 	ret
    a21c:	00a00034 	movhi	r2,32768
    a220:	10bfffc4 	addi	r2,r2,-1
    a224:	9009883a 	mov	r4,r18
    a228:	1480012e 	bgeu	r2,r18,a230 <__sfvwrite_r+0x1c0>
    a22c:	1009883a 	mov	r4,r2
    a230:	980b883a 	mov	r5,r19
    a234:	00108c40 	call	108c4 <__divsi3>
    a238:	81400717 	ldw	r5,28(r16)
    a23c:	80c00917 	ldw	r3,36(r16)
    a240:	988f383a 	mul	r7,r19,r2
    a244:	a009883a 	mov	r4,r20
    a248:	e00d883a 	mov	r6,fp
    a24c:	183ee83a 	callr	r3
    a250:	00bfe016 	blt	zero,r2,a1d4 <__alt_mem_Flash_flash_data+0xf400a1d4>
    a254:	8080030b 	ldhu	r2,12(r16)
    a258:	10801014 	ori	r2,r2,64
    a25c:	8080030d 	sth	r2,12(r16)
    a260:	00bfffc4 	movi	r2,-1
    a264:	003fb006 	br	a128 <__alt_mem_Flash_flash_data+0xf400a128>
    a268:	0027883a 	mov	r19,zero
    a26c:	0011883a 	mov	r8,zero
    a270:	0039883a 	mov	fp,zero
    a274:	0025883a 	mov	r18,zero
    a278:	90001f26 	beq	r18,zero,a2f8 <__sfvwrite_r+0x288>
    a27c:	40006026 	beq	r8,zero,a400 <__sfvwrite_r+0x390>
    a280:	982b883a 	mov	r21,r19
    a284:	94c0012e 	bgeu	r18,r19,a28c <__sfvwrite_r+0x21c>
    a288:	902b883a 	mov	r21,r18
    a28c:	81000017 	ldw	r4,0(r16)
    a290:	80800417 	ldw	r2,16(r16)
    a294:	a82d883a 	mov	r22,r21
    a298:	81800217 	ldw	r6,8(r16)
    a29c:	81c00517 	ldw	r7,20(r16)
    a2a0:	1100022e 	bgeu	r2,r4,a2ac <__sfvwrite_r+0x23c>
    a2a4:	31c7883a 	add	r3,r6,r7
    a2a8:	1d401816 	blt	r3,r21,a30c <__sfvwrite_r+0x29c>
    a2ac:	a9c04416 	blt	r21,r7,a3c0 <__sfvwrite_r+0x350>
    a2b0:	80800917 	ldw	r2,36(r16)
    a2b4:	81400717 	ldw	r5,28(r16)
    a2b8:	a009883a 	mov	r4,r20
    a2bc:	da000115 	stw	r8,4(sp)
    a2c0:	e00d883a 	mov	r6,fp
    a2c4:	103ee83a 	callr	r2
    a2c8:	102d883a 	mov	r22,r2
    a2cc:	da000117 	ldw	r8,4(sp)
    a2d0:	00bfe00e 	bge	zero,r2,a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a2d4:	9da7c83a 	sub	r19,r19,r22
    a2d8:	98001f26 	beq	r19,zero,a358 <__sfvwrite_r+0x2e8>
    a2dc:	b8800217 	ldw	r2,8(r23)
    a2e0:	e5b9883a 	add	fp,fp,r22
    a2e4:	95a5c83a 	sub	r18,r18,r22
    a2e8:	15adc83a 	sub	r22,r2,r22
    a2ec:	bd800215 	stw	r22,8(r23)
    a2f0:	b03f8c26 	beq	r22,zero,a124 <__alt_mem_Flash_flash_data+0xf400a124>
    a2f4:	903fe11e 	bne	r18,zero,a27c <__alt_mem_Flash_flash_data+0xf400a27c>
    a2f8:	8f000017 	ldw	fp,0(r17)
    a2fc:	8c800117 	ldw	r18,4(r17)
    a300:	0011883a 	mov	r8,zero
    a304:	8c400204 	addi	r17,r17,8
    a308:	003fdb06 	br	a278 <__alt_mem_Flash_flash_data+0xf400a278>
    a30c:	180d883a 	mov	r6,r3
    a310:	e00b883a 	mov	r5,fp
    a314:	da000115 	stw	r8,4(sp)
    a318:	d8c00015 	stw	r3,0(sp)
    a31c:	000b3180 	call	b318 <memmove>
    a320:	d8c00017 	ldw	r3,0(sp)
    a324:	80800017 	ldw	r2,0(r16)
    a328:	a009883a 	mov	r4,r20
    a32c:	800b883a 	mov	r5,r16
    a330:	10c5883a 	add	r2,r2,r3
    a334:	80800015 	stw	r2,0(r16)
    a338:	d8c00015 	stw	r3,0(sp)
    a33c:	00098300 	call	9830 <_fflush_r>
    a340:	d8c00017 	ldw	r3,0(sp)
    a344:	da000117 	ldw	r8,4(sp)
    a348:	103fc21e 	bne	r2,zero,a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a34c:	182d883a 	mov	r22,r3
    a350:	9da7c83a 	sub	r19,r19,r22
    a354:	983fe11e 	bne	r19,zero,a2dc <__alt_mem_Flash_flash_data+0xf400a2dc>
    a358:	a009883a 	mov	r4,r20
    a35c:	800b883a 	mov	r5,r16
    a360:	00098300 	call	9830 <_fflush_r>
    a364:	103fbb1e 	bne	r2,zero,a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a368:	0011883a 	mov	r8,zero
    a36c:	003fdb06 	br	a2dc <__alt_mem_Flash_flash_data+0xf400a2dc>
    a370:	81000017 	ldw	r4,0(r16)
    a374:	80800417 	ldw	r2,16(r16)
    a378:	11000236 	bltu	r2,r4,a384 <__sfvwrite_r+0x314>
    a37c:	84c00517 	ldw	r19,20(r16)
    a380:	94ffa62e 	bgeu	r18,r19,a21c <__alt_mem_Flash_flash_data+0xf400a21c>
    a384:	9027883a 	mov	r19,r18
    a388:	b480012e 	bgeu	r22,r18,a390 <__sfvwrite_r+0x320>
    a38c:	b027883a 	mov	r19,r22
    a390:	e00b883a 	mov	r5,fp
    a394:	980d883a 	mov	r6,r19
    a398:	000b3180 	call	b318 <memmove>
    a39c:	80800217 	ldw	r2,8(r16)
    a3a0:	80c00017 	ldw	r3,0(r16)
    a3a4:	14c5c83a 	sub	r2,r2,r19
    a3a8:	1cc7883a 	add	r3,r3,r19
    a3ac:	80800215 	stw	r2,8(r16)
    a3b0:	80c00015 	stw	r3,0(r16)
    a3b4:	10004326 	beq	r2,zero,a4c4 <__sfvwrite_r+0x454>
    a3b8:	9805883a 	mov	r2,r19
    a3bc:	003f8506 	br	a1d4 <__alt_mem_Flash_flash_data+0xf400a1d4>
    a3c0:	a80d883a 	mov	r6,r21
    a3c4:	e00b883a 	mov	r5,fp
    a3c8:	da000115 	stw	r8,4(sp)
    a3cc:	000b3180 	call	b318 <memmove>
    a3d0:	80800217 	ldw	r2,8(r16)
    a3d4:	80c00017 	ldw	r3,0(r16)
    a3d8:	da000117 	ldw	r8,4(sp)
    a3dc:	1545c83a 	sub	r2,r2,r21
    a3e0:	1d6b883a 	add	r21,r3,r21
    a3e4:	80800215 	stw	r2,8(r16)
    a3e8:	85400015 	stw	r21,0(r16)
    a3ec:	003fb906 	br	a2d4 <__alt_mem_Flash_flash_data+0xf400a2d4>
    a3f0:	81000017 	ldw	r4,0(r16)
    a3f4:	902d883a 	mov	r22,r18
    a3f8:	9027883a 	mov	r19,r18
    a3fc:	003f6b06 	br	a1ac <__alt_mem_Flash_flash_data+0xf400a1ac>
    a400:	e009883a 	mov	r4,fp
    a404:	01400284 	movi	r5,10
    a408:	900d883a 	mov	r6,r18
    a40c:	000b0f80 	call	b0f8 <memchr>
    a410:	10003e26 	beq	r2,zero,a50c <__sfvwrite_r+0x49c>
    a414:	10800044 	addi	r2,r2,1
    a418:	1727c83a 	sub	r19,r2,fp
    a41c:	02000044 	movi	r8,1
    a420:	003f9706 	br	a280 <__alt_mem_Flash_flash_data+0xf400a280>
    a424:	80800517 	ldw	r2,20(r16)
    a428:	81400417 	ldw	r5,16(r16)
    a42c:	80c00017 	ldw	r3,0(r16)
    a430:	10a7883a 	add	r19,r2,r2
    a434:	9885883a 	add	r2,r19,r2
    a438:	1026d7fa 	srli	r19,r2,31
    a43c:	196bc83a 	sub	r21,r3,r5
    a440:	a9800044 	addi	r6,r21,1
    a444:	9885883a 	add	r2,r19,r2
    a448:	1027d07a 	srai	r19,r2,1
    a44c:	3485883a 	add	r2,r6,r18
    a450:	980d883a 	mov	r6,r19
    a454:	9880022e 	bgeu	r19,r2,a460 <__sfvwrite_r+0x3f0>
    a458:	1027883a 	mov	r19,r2
    a45c:	100d883a 	mov	r6,r2
    a460:	2101000c 	andi	r4,r4,1024
    a464:	20001c26 	beq	r4,zero,a4d8 <__sfvwrite_r+0x468>
    a468:	a009883a 	mov	r4,r20
    a46c:	300b883a 	mov	r5,r6
    a470:	000a9500 	call	a950 <_malloc_r>
    a474:	102d883a 	mov	r22,r2
    a478:	10002926 	beq	r2,zero,a520 <__sfvwrite_r+0x4b0>
    a47c:	81400417 	ldw	r5,16(r16)
    a480:	1009883a 	mov	r4,r2
    a484:	a80d883a 	mov	r6,r21
    a488:	000b1e00 	call	b1e0 <memcpy>
    a48c:	8080030b 	ldhu	r2,12(r16)
    a490:	00fedfc4 	movi	r3,-1153
    a494:	10c4703a 	and	r2,r2,r3
    a498:	10802014 	ori	r2,r2,128
    a49c:	8080030d 	sth	r2,12(r16)
    a4a0:	b549883a 	add	r4,r22,r21
    a4a4:	9d4bc83a 	sub	r5,r19,r21
    a4a8:	85800415 	stw	r22,16(r16)
    a4ac:	84c00515 	stw	r19,20(r16)
    a4b0:	81000015 	stw	r4,0(r16)
    a4b4:	902d883a 	mov	r22,r18
    a4b8:	81400215 	stw	r5,8(r16)
    a4bc:	9027883a 	mov	r19,r18
    a4c0:	003f3a06 	br	a1ac <__alt_mem_Flash_flash_data+0xf400a1ac>
    a4c4:	a009883a 	mov	r4,r20
    a4c8:	800b883a 	mov	r5,r16
    a4cc:	00098300 	call	9830 <_fflush_r>
    a4d0:	103fb926 	beq	r2,zero,a3b8 <__alt_mem_Flash_flash_data+0xf400a3b8>
    a4d4:	003f5f06 	br	a254 <__alt_mem_Flash_flash_data+0xf400a254>
    a4d8:	a009883a 	mov	r4,r20
    a4dc:	000c5380 	call	c538 <_realloc_r>
    a4e0:	102d883a 	mov	r22,r2
    a4e4:	103fee1e 	bne	r2,zero,a4a0 <__alt_mem_Flash_flash_data+0xf400a4a0>
    a4e8:	81400417 	ldw	r5,16(r16)
    a4ec:	a009883a 	mov	r4,r20
    a4f0:	0009d800 	call	9d80 <_free_r>
    a4f4:	8080030b 	ldhu	r2,12(r16)
    a4f8:	00ffdfc4 	movi	r3,-129
    a4fc:	1884703a 	and	r2,r3,r2
    a500:	00c00304 	movi	r3,12
    a504:	a0c00015 	stw	r3,0(r20)
    a508:	003f5306 	br	a258 <__alt_mem_Flash_flash_data+0xf400a258>
    a50c:	94c00044 	addi	r19,r18,1
    a510:	02000044 	movi	r8,1
    a514:	003f5a06 	br	a280 <__alt_mem_Flash_flash_data+0xf400a280>
    a518:	00bfffc4 	movi	r2,-1
    a51c:	003f0206 	br	a128 <__alt_mem_Flash_flash_data+0xf400a128>
    a520:	00800304 	movi	r2,12
    a524:	a0800015 	stw	r2,0(r20)
    a528:	8080030b 	ldhu	r2,12(r16)
    a52c:	003f4a06 	br	a258 <__alt_mem_Flash_flash_data+0xf400a258>

0000a530 <_fwalk>:
    a530:	defff704 	addi	sp,sp,-36
    a534:	dd000415 	stw	r20,16(sp)
    a538:	dfc00815 	stw	ra,32(sp)
    a53c:	ddc00715 	stw	r23,28(sp)
    a540:	dd800615 	stw	r22,24(sp)
    a544:	dd400515 	stw	r21,20(sp)
    a548:	dcc00315 	stw	r19,12(sp)
    a54c:	dc800215 	stw	r18,8(sp)
    a550:	dc400115 	stw	r17,4(sp)
    a554:	dc000015 	stw	r16,0(sp)
    a558:	2500b804 	addi	r20,r4,736
    a55c:	a0002326 	beq	r20,zero,a5ec <_fwalk+0xbc>
    a560:	282b883a 	mov	r21,r5
    a564:	002f883a 	mov	r23,zero
    a568:	05800044 	movi	r22,1
    a56c:	04ffffc4 	movi	r19,-1
    a570:	a4400117 	ldw	r17,4(r20)
    a574:	a4800217 	ldw	r18,8(r20)
    a578:	8c7fffc4 	addi	r17,r17,-1
    a57c:	88000d16 	blt	r17,zero,a5b4 <_fwalk+0x84>
    a580:	94000304 	addi	r16,r18,12
    a584:	94800384 	addi	r18,r18,14
    a588:	80c0000b 	ldhu	r3,0(r16)
    a58c:	8c7fffc4 	addi	r17,r17,-1
    a590:	813ffd04 	addi	r4,r16,-12
    a594:	b0c0042e 	bgeu	r22,r3,a5a8 <_fwalk+0x78>
    a598:	90c0000f 	ldh	r3,0(r18)
    a59c:	1cc00226 	beq	r3,r19,a5a8 <_fwalk+0x78>
    a5a0:	a83ee83a 	callr	r21
    a5a4:	b8aeb03a 	or	r23,r23,r2
    a5a8:	84001a04 	addi	r16,r16,104
    a5ac:	94801a04 	addi	r18,r18,104
    a5b0:	8cfff51e 	bne	r17,r19,a588 <__alt_mem_Flash_flash_data+0xf400a588>
    a5b4:	a5000017 	ldw	r20,0(r20)
    a5b8:	a03fed1e 	bne	r20,zero,a570 <__alt_mem_Flash_flash_data+0xf400a570>
    a5bc:	b805883a 	mov	r2,r23
    a5c0:	dfc00817 	ldw	ra,32(sp)
    a5c4:	ddc00717 	ldw	r23,28(sp)
    a5c8:	dd800617 	ldw	r22,24(sp)
    a5cc:	dd400517 	ldw	r21,20(sp)
    a5d0:	dd000417 	ldw	r20,16(sp)
    a5d4:	dcc00317 	ldw	r19,12(sp)
    a5d8:	dc800217 	ldw	r18,8(sp)
    a5dc:	dc400117 	ldw	r17,4(sp)
    a5e0:	dc000017 	ldw	r16,0(sp)
    a5e4:	dec00904 	addi	sp,sp,36
    a5e8:	f800283a 	ret
    a5ec:	002f883a 	mov	r23,zero
    a5f0:	003ff206 	br	a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>

0000a5f4 <_fwalk_reent>:
    a5f4:	defff704 	addi	sp,sp,-36
    a5f8:	dd400515 	stw	r21,20(sp)
    a5fc:	dfc00815 	stw	ra,32(sp)
    a600:	ddc00715 	stw	r23,28(sp)
    a604:	dd800615 	stw	r22,24(sp)
    a608:	dd000415 	stw	r20,16(sp)
    a60c:	dcc00315 	stw	r19,12(sp)
    a610:	dc800215 	stw	r18,8(sp)
    a614:	dc400115 	stw	r17,4(sp)
    a618:	dc000015 	stw	r16,0(sp)
    a61c:	2540b804 	addi	r21,r4,736
    a620:	a8002326 	beq	r21,zero,a6b0 <_fwalk_reent+0xbc>
    a624:	2829883a 	mov	r20,r5
    a628:	202d883a 	mov	r22,r4
    a62c:	002f883a 	mov	r23,zero
    a630:	04c00044 	movi	r19,1
    a634:	04bfffc4 	movi	r18,-1
    a638:	ac400117 	ldw	r17,4(r21)
    a63c:	ac000217 	ldw	r16,8(r21)
    a640:	8c7fffc4 	addi	r17,r17,-1
    a644:	88000c16 	blt	r17,zero,a678 <_fwalk_reent+0x84>
    a648:	84000304 	addi	r16,r16,12
    a64c:	80c0000b 	ldhu	r3,0(r16)
    a650:	8c7fffc4 	addi	r17,r17,-1
    a654:	817ffd04 	addi	r5,r16,-12
    a658:	98c0052e 	bgeu	r19,r3,a670 <_fwalk_reent+0x7c>
    a65c:	80c0008f 	ldh	r3,2(r16)
    a660:	b009883a 	mov	r4,r22
    a664:	1c800226 	beq	r3,r18,a670 <_fwalk_reent+0x7c>
    a668:	a03ee83a 	callr	r20
    a66c:	b8aeb03a 	or	r23,r23,r2
    a670:	84001a04 	addi	r16,r16,104
    a674:	8cbff51e 	bne	r17,r18,a64c <__alt_mem_Flash_flash_data+0xf400a64c>
    a678:	ad400017 	ldw	r21,0(r21)
    a67c:	a83fee1e 	bne	r21,zero,a638 <__alt_mem_Flash_flash_data+0xf400a638>
    a680:	b805883a 	mov	r2,r23
    a684:	dfc00817 	ldw	ra,32(sp)
    a688:	ddc00717 	ldw	r23,28(sp)
    a68c:	dd800617 	ldw	r22,24(sp)
    a690:	dd400517 	ldw	r21,20(sp)
    a694:	dd000417 	ldw	r20,16(sp)
    a698:	dcc00317 	ldw	r19,12(sp)
    a69c:	dc800217 	ldw	r18,8(sp)
    a6a0:	dc400117 	ldw	r17,4(sp)
    a6a4:	dc000017 	ldw	r16,0(sp)
    a6a8:	dec00904 	addi	sp,sp,36
    a6ac:	f800283a 	ret
    a6b0:	002f883a 	mov	r23,zero
    a6b4:	003ff206 	br	a680 <__alt_mem_Flash_flash_data+0xf400a680>

0000a6b8 <_setlocale_r>:
    a6b8:	30001b26 	beq	r6,zero,a728 <_setlocale_r+0x70>
    a6bc:	014000b4 	movhi	r5,2
    a6c0:	defffe04 	addi	sp,sp,-8
    a6c4:	29424b04 	addi	r5,r5,2348
    a6c8:	3009883a 	mov	r4,r6
    a6cc:	dc000015 	stw	r16,0(sp)
    a6d0:	dfc00115 	stw	ra,4(sp)
    a6d4:	3021883a 	mov	r16,r6
    a6d8:	000cca40 	call	cca4 <strcmp>
    a6dc:	1000061e 	bne	r2,zero,a6f8 <_setlocale_r+0x40>
    a6e0:	008000b4 	movhi	r2,2
    a6e4:	10824a04 	addi	r2,r2,2344
    a6e8:	dfc00117 	ldw	ra,4(sp)
    a6ec:	dc000017 	ldw	r16,0(sp)
    a6f0:	dec00204 	addi	sp,sp,8
    a6f4:	f800283a 	ret
    a6f8:	014000b4 	movhi	r5,2
    a6fc:	29424a04 	addi	r5,r5,2344
    a700:	8009883a 	mov	r4,r16
    a704:	000cca40 	call	cca4 <strcmp>
    a708:	103ff526 	beq	r2,zero,a6e0 <__alt_mem_Flash_flash_data+0xf400a6e0>
    a70c:	014000b4 	movhi	r5,2
    a710:	29422d04 	addi	r5,r5,2228
    a714:	8009883a 	mov	r4,r16
    a718:	000cca40 	call	cca4 <strcmp>
    a71c:	103ff026 	beq	r2,zero,a6e0 <__alt_mem_Flash_flash_data+0xf400a6e0>
    a720:	0005883a 	mov	r2,zero
    a724:	003ff006 	br	a6e8 <__alt_mem_Flash_flash_data+0xf400a6e8>
    a728:	008000b4 	movhi	r2,2
    a72c:	10824a04 	addi	r2,r2,2344
    a730:	f800283a 	ret

0000a734 <__locale_charset>:
    a734:	008000b4 	movhi	r2,2
    a738:	1084b304 	addi	r2,r2,4812
    a73c:	f800283a 	ret

0000a740 <__locale_mb_cur_max>:
    a740:	008000b4 	movhi	r2,2
    a744:	108b4004 	addi	r2,r2,11520
    a748:	10800017 	ldw	r2,0(r2)
    a74c:	f800283a 	ret

0000a750 <__locale_msgcharset>:
    a750:	008000b4 	movhi	r2,2
    a754:	1084ab04 	addi	r2,r2,4780
    a758:	f800283a 	ret

0000a75c <__locale_cjk_lang>:
    a75c:	0005883a 	mov	r2,zero
    a760:	f800283a 	ret

0000a764 <_localeconv_r>:
    a764:	008000b4 	movhi	r2,2
    a768:	1084bb04 	addi	r2,r2,4844
    a76c:	f800283a 	ret

0000a770 <setlocale>:
    a770:	00c000b4 	movhi	r3,2
    a774:	18cb3f04 	addi	r3,r3,11516
    a778:	2005883a 	mov	r2,r4
    a77c:	19000017 	ldw	r4,0(r3)
    a780:	280d883a 	mov	r6,r5
    a784:	100b883a 	mov	r5,r2
    a788:	000a6b81 	jmpi	a6b8 <_setlocale_r>

0000a78c <localeconv>:
    a78c:	008000b4 	movhi	r2,2
    a790:	1084bb04 	addi	r2,r2,4844
    a794:	f800283a 	ret

0000a798 <__smakebuf_r>:
    a798:	2880030b 	ldhu	r2,12(r5)
    a79c:	10c0008c 	andi	r3,r2,2
    a7a0:	1800401e 	bne	r3,zero,a8a4 <__smakebuf_r+0x10c>
    a7a4:	deffec04 	addi	sp,sp,-80
    a7a8:	dc000f15 	stw	r16,60(sp)
    a7ac:	2821883a 	mov	r16,r5
    a7b0:	2940038f 	ldh	r5,14(r5)
    a7b4:	dc401015 	stw	r17,64(sp)
    a7b8:	dfc01315 	stw	ra,76(sp)
    a7bc:	dcc01215 	stw	r19,72(sp)
    a7c0:	dc801115 	stw	r18,68(sp)
    a7c4:	2023883a 	mov	r17,r4
    a7c8:	28001b16 	blt	r5,zero,a838 <__smakebuf_r+0xa0>
    a7cc:	d80d883a 	mov	r6,sp
    a7d0:	000f8680 	call	f868 <_fstat_r>
    a7d4:	10001716 	blt	r2,zero,a834 <__smakebuf_r+0x9c>
    a7d8:	d8800117 	ldw	r2,4(sp)
    a7dc:	00e00014 	movui	r3,32768
    a7e0:	10bc000c 	andi	r2,r2,61440
    a7e4:	10c03726 	beq	r2,r3,a8c4 <__smakebuf_r+0x12c>
    a7e8:	80c0030b 	ldhu	r3,12(r16)
    a7ec:	18c20014 	ori	r3,r3,2048
    a7f0:	80c0030d 	sth	r3,12(r16)
    a7f4:	00c80004 	movi	r3,8192
    a7f8:	10c03c1e 	bne	r2,r3,a8ec <__smakebuf_r+0x154>
    a7fc:	8140038f 	ldh	r5,14(r16)
    a800:	8809883a 	mov	r4,r17
    a804:	000f8c00 	call	f8c0 <_isatty_r>
    a808:	10004e26 	beq	r2,zero,a944 <__smakebuf_r+0x1ac>
    a80c:	8080030b 	ldhu	r2,12(r16)
    a810:	04c00044 	movi	r19,1
    a814:	80c010c4 	addi	r3,r16,67
    a818:	14c4b03a 	or	r2,r2,r19
    a81c:	8080030d 	sth	r2,12(r16)
    a820:	80c00015 	stw	r3,0(r16)
    a824:	80c00415 	stw	r3,16(r16)
    a828:	84c00515 	stw	r19,20(r16)
    a82c:	04810004 	movi	r18,1024
    a830:	00000706 	br	a850 <__smakebuf_r+0xb8>
    a834:	8080030b 	ldhu	r2,12(r16)
    a838:	10c0200c 	andi	r3,r2,128
    a83c:	18001f1e 	bne	r3,zero,a8bc <__smakebuf_r+0x124>
    a840:	04810004 	movi	r18,1024
    a844:	10820014 	ori	r2,r2,2048
    a848:	8080030d 	sth	r2,12(r16)
    a84c:	0027883a 	mov	r19,zero
    a850:	8809883a 	mov	r4,r17
    a854:	900b883a 	mov	r5,r18
    a858:	000a9500 	call	a950 <_malloc_r>
    a85c:	10002e26 	beq	r2,zero,a918 <__smakebuf_r+0x180>
    a860:	80c0030b 	ldhu	r3,12(r16)
    a864:	01000074 	movhi	r4,1
    a868:	21263304 	addi	r4,r4,-26420
    a86c:	89000f15 	stw	r4,60(r17)
    a870:	18c02014 	ori	r3,r3,128
    a874:	80c0030d 	sth	r3,12(r16)
    a878:	80800015 	stw	r2,0(r16)
    a87c:	80800415 	stw	r2,16(r16)
    a880:	84800515 	stw	r18,20(r16)
    a884:	98001c1e 	bne	r19,zero,a8f8 <__smakebuf_r+0x160>
    a888:	dfc01317 	ldw	ra,76(sp)
    a88c:	dcc01217 	ldw	r19,72(sp)
    a890:	dc801117 	ldw	r18,68(sp)
    a894:	dc401017 	ldw	r17,64(sp)
    a898:	dc000f17 	ldw	r16,60(sp)
    a89c:	dec01404 	addi	sp,sp,80
    a8a0:	f800283a 	ret
    a8a4:	288010c4 	addi	r2,r5,67
    a8a8:	28800015 	stw	r2,0(r5)
    a8ac:	28800415 	stw	r2,16(r5)
    a8b0:	00800044 	movi	r2,1
    a8b4:	28800515 	stw	r2,20(r5)
    a8b8:	f800283a 	ret
    a8bc:	04801004 	movi	r18,64
    a8c0:	003fe006 	br	a844 <__alt_mem_Flash_flash_data+0xf400a844>
    a8c4:	81000a17 	ldw	r4,40(r16)
    a8c8:	00c00074 	movhi	r3,1
    a8cc:	18f31004 	addi	r3,r3,-13248
    a8d0:	20ffc51e 	bne	r4,r3,a7e8 <__alt_mem_Flash_flash_data+0xf400a7e8>
    a8d4:	80c0030b 	ldhu	r3,12(r16)
    a8d8:	01010004 	movi	r4,1024
    a8dc:	81001315 	stw	r4,76(r16)
    a8e0:	1906b03a 	or	r3,r3,r4
    a8e4:	80c0030d 	sth	r3,12(r16)
    a8e8:	003fc206 	br	a7f4 <__alt_mem_Flash_flash_data+0xf400a7f4>
    a8ec:	0027883a 	mov	r19,zero
    a8f0:	04810004 	movi	r18,1024
    a8f4:	003fd606 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>
    a8f8:	8140038f 	ldh	r5,14(r16)
    a8fc:	8809883a 	mov	r4,r17
    a900:	000f8c00 	call	f8c0 <_isatty_r>
    a904:	103fe026 	beq	r2,zero,a888 <__alt_mem_Flash_flash_data+0xf400a888>
    a908:	8080030b 	ldhu	r2,12(r16)
    a90c:	10800054 	ori	r2,r2,1
    a910:	8080030d 	sth	r2,12(r16)
    a914:	003fdc06 	br	a888 <__alt_mem_Flash_flash_data+0xf400a888>
    a918:	8080030b 	ldhu	r2,12(r16)
    a91c:	10c0800c 	andi	r3,r2,512
    a920:	183fd91e 	bne	r3,zero,a888 <__alt_mem_Flash_flash_data+0xf400a888>
    a924:	10800094 	ori	r2,r2,2
    a928:	80c010c4 	addi	r3,r16,67
    a92c:	8080030d 	sth	r2,12(r16)
    a930:	00800044 	movi	r2,1
    a934:	80c00015 	stw	r3,0(r16)
    a938:	80c00415 	stw	r3,16(r16)
    a93c:	80800515 	stw	r2,20(r16)
    a940:	003fd106 	br	a888 <__alt_mem_Flash_flash_data+0xf400a888>
    a944:	04c00044 	movi	r19,1
    a948:	04810004 	movi	r18,1024
    a94c:	003fc006 	br	a850 <__alt_mem_Flash_flash_data+0xf400a850>

0000a950 <_malloc_r>:
    a950:	defff504 	addi	sp,sp,-44
    a954:	dc800315 	stw	r18,12(sp)
    a958:	dfc00a15 	stw	ra,40(sp)
    a95c:	df000915 	stw	fp,36(sp)
    a960:	ddc00815 	stw	r23,32(sp)
    a964:	dd800715 	stw	r22,28(sp)
    a968:	dd400615 	stw	r21,24(sp)
    a96c:	dd000515 	stw	r20,20(sp)
    a970:	dcc00415 	stw	r19,16(sp)
    a974:	dc400215 	stw	r17,8(sp)
    a978:	dc000115 	stw	r16,4(sp)
    a97c:	288002c4 	addi	r2,r5,11
    a980:	00c00584 	movi	r3,22
    a984:	2025883a 	mov	r18,r4
    a988:	18802a2e 	bgeu	r3,r2,aa34 <_malloc_r+0xe4>
    a98c:	047ffe04 	movi	r17,-8
    a990:	1462703a 	and	r17,r2,r17
    a994:	88009e16 	blt	r17,zero,ac10 <_malloc_r+0x2c0>
    a998:	89409d36 	bltu	r17,r5,ac10 <_malloc_r+0x2c0>
    a99c:	0013a600 	call	13a60 <__malloc_lock>
    a9a0:	00807dc4 	movi	r2,503
    a9a4:	14402736 	bltu	r2,r17,aa44 <_malloc_r+0xf4>
    a9a8:	8806d0fa 	srli	r3,r17,3
    a9ac:	04c000b4 	movhi	r19,2
    a9b0:	9cc4c904 	addi	r19,r19,4900
    a9b4:	18c5883a 	add	r2,r3,r3
    a9b8:	1085883a 	add	r2,r2,r2
    a9bc:	1085883a 	add	r2,r2,r2
    a9c0:	9885883a 	add	r2,r19,r2
    a9c4:	14000317 	ldw	r16,12(r2)
    a9c8:	80814a26 	beq	r16,r2,aef4 <_malloc_r+0x5a4>
    a9cc:	80c00117 	ldw	r3,4(r16)
    a9d0:	81000317 	ldw	r4,12(r16)
    a9d4:	00bfff04 	movi	r2,-4
    a9d8:	1884703a 	and	r2,r3,r2
    a9dc:	81400217 	ldw	r5,8(r16)
    a9e0:	8085883a 	add	r2,r16,r2
    a9e4:	10c00117 	ldw	r3,4(r2)
    a9e8:	29000315 	stw	r4,12(r5)
    a9ec:	21400215 	stw	r5,8(r4)
    a9f0:	18c00054 	ori	r3,r3,1
    a9f4:	10c00115 	stw	r3,4(r2)
    a9f8:	9009883a 	mov	r4,r18
    a9fc:	0013b800 	call	13b80 <__malloc_unlock>
    aa00:	80800204 	addi	r2,r16,8
    aa04:	dfc00a17 	ldw	ra,40(sp)
    aa08:	df000917 	ldw	fp,36(sp)
    aa0c:	ddc00817 	ldw	r23,32(sp)
    aa10:	dd800717 	ldw	r22,28(sp)
    aa14:	dd400617 	ldw	r21,24(sp)
    aa18:	dd000517 	ldw	r20,20(sp)
    aa1c:	dcc00417 	ldw	r19,16(sp)
    aa20:	dc800317 	ldw	r18,12(sp)
    aa24:	dc400217 	ldw	r17,8(sp)
    aa28:	dc000117 	ldw	r16,4(sp)
    aa2c:	dec00b04 	addi	sp,sp,44
    aa30:	f800283a 	ret
    aa34:	04400404 	movi	r17,16
    aa38:	89407536 	bltu	r17,r5,ac10 <_malloc_r+0x2c0>
    aa3c:	0013a600 	call	13a60 <__malloc_lock>
    aa40:	003fd906 	br	a9a8 <__alt_mem_Flash_flash_data+0xf400a9a8>
    aa44:	8806d27a 	srli	r3,r17,9
    aa48:	18007526 	beq	r3,zero,ac20 <_malloc_r+0x2d0>
    aa4c:	00800104 	movi	r2,4
    aa50:	10c0ef36 	bltu	r2,r3,ae10 <_malloc_r+0x4c0>
    aa54:	8806d1ba 	srli	r3,r17,6
    aa58:	19c00e04 	addi	r7,r3,56
    aa5c:	39cb883a 	add	r5,r7,r7
    aa60:	04c000b4 	movhi	r19,2
    aa64:	294b883a 	add	r5,r5,r5
    aa68:	9cc4c904 	addi	r19,r19,4900
    aa6c:	294b883a 	add	r5,r5,r5
    aa70:	994b883a 	add	r5,r19,r5
    aa74:	2c000317 	ldw	r16,12(r5)
    aa78:	2c000e26 	beq	r5,r16,aab4 <_malloc_r+0x164>
    aa7c:	80800117 	ldw	r2,4(r16)
    aa80:	01bfff04 	movi	r6,-4
    aa84:	010003c4 	movi	r4,15
    aa88:	1184703a 	and	r2,r2,r6
    aa8c:	1447c83a 	sub	r3,r2,r17
    aa90:	20c00716 	blt	r4,r3,aab0 <_malloc_r+0x160>
    aa94:	1800650e 	bge	r3,zero,ac2c <_malloc_r+0x2dc>
    aa98:	84000317 	ldw	r16,12(r16)
    aa9c:	2c000526 	beq	r5,r16,aab4 <_malloc_r+0x164>
    aaa0:	80800117 	ldw	r2,4(r16)
    aaa4:	1184703a 	and	r2,r2,r6
    aaa8:	1447c83a 	sub	r3,r2,r17
    aaac:	20fff90e 	bge	r4,r3,aa94 <__alt_mem_Flash_flash_data+0xf400aa94>
    aab0:	39ffffc4 	addi	r7,r7,-1
    aab4:	38c00044 	addi	r3,r7,1
    aab8:	018000b4 	movhi	r6,2
    aabc:	9c000417 	ldw	r16,16(r19)
    aac0:	3184c904 	addi	r6,r6,4900
    aac4:	32400204 	addi	r9,r6,8
    aac8:	82410326 	beq	r16,r9,aed8 <_malloc_r+0x588>
    aacc:	81000117 	ldw	r4,4(r16)
    aad0:	00bfff04 	movi	r2,-4
    aad4:	208e703a 	and	r7,r4,r2
    aad8:	3c45c83a 	sub	r2,r7,r17
    aadc:	010003c4 	movi	r4,15
    aae0:	2080ee16 	blt	r4,r2,ae9c <_malloc_r+0x54c>
    aae4:	32400515 	stw	r9,20(r6)
    aae8:	32400415 	stw	r9,16(r6)
    aaec:	1000510e 	bge	r2,zero,ac34 <_malloc_r+0x2e4>
    aaf0:	00807fc4 	movi	r2,511
    aaf4:	11c0ce36 	bltu	r2,r7,ae30 <_malloc_r+0x4e0>
    aaf8:	3808d0fa 	srli	r4,r7,3
    aafc:	01c00044 	movi	r7,1
    ab00:	30800117 	ldw	r2,4(r6)
    ab04:	210b883a 	add	r5,r4,r4
    ab08:	294b883a 	add	r5,r5,r5
    ab0c:	2009d0ba 	srai	r4,r4,2
    ab10:	294b883a 	add	r5,r5,r5
    ab14:	298b883a 	add	r5,r5,r6
    ab18:	2a000217 	ldw	r8,8(r5)
    ab1c:	3908983a 	sll	r4,r7,r4
    ab20:	81400315 	stw	r5,12(r16)
    ab24:	82000215 	stw	r8,8(r16)
    ab28:	2088b03a 	or	r4,r4,r2
    ab2c:	2c000215 	stw	r16,8(r5)
    ab30:	31000115 	stw	r4,4(r6)
    ab34:	44000315 	stw	r16,12(r8)
    ab38:	1805d0ba 	srai	r2,r3,2
    ab3c:	01400044 	movi	r5,1
    ab40:	288a983a 	sll	r5,r5,r2
    ab44:	21404336 	bltu	r4,r5,ac54 <_malloc_r+0x304>
    ab48:	2144703a 	and	r2,r4,r5
    ab4c:	10000a1e 	bne	r2,zero,ab78 <_malloc_r+0x228>
    ab50:	00bfff04 	movi	r2,-4
    ab54:	294b883a 	add	r5,r5,r5
    ab58:	1886703a 	and	r3,r3,r2
    ab5c:	2144703a 	and	r2,r4,r5
    ab60:	18c00104 	addi	r3,r3,4
    ab64:	1000041e 	bne	r2,zero,ab78 <_malloc_r+0x228>
    ab68:	294b883a 	add	r5,r5,r5
    ab6c:	2144703a 	and	r2,r4,r5
    ab70:	18c00104 	addi	r3,r3,4
    ab74:	103ffc26 	beq	r2,zero,ab68 <__alt_mem_Flash_flash_data+0xf400ab68>
    ab78:	023fff04 	movi	r8,-4
    ab7c:	01c003c4 	movi	r7,15
    ab80:	18c5883a 	add	r2,r3,r3
    ab84:	1085883a 	add	r2,r2,r2
    ab88:	1085883a 	add	r2,r2,r2
    ab8c:	9895883a 	add	r10,r19,r2
    ab90:	52c00304 	addi	r11,r10,12
    ab94:	1819883a 	mov	r12,r3
    ab98:	5c000017 	ldw	r16,0(r11)
    ab9c:	59bffd04 	addi	r6,r11,-12
    aba0:	8180041e 	bne	r16,r6,abb4 <_malloc_r+0x264>
    aba4:	0000ce06 	br	aee0 <_malloc_r+0x590>
    aba8:	2000d70e 	bge	r4,zero,af08 <_malloc_r+0x5b8>
    abac:	84000317 	ldw	r16,12(r16)
    abb0:	8180cb26 	beq	r16,r6,aee0 <_malloc_r+0x590>
    abb4:	80800117 	ldw	r2,4(r16)
    abb8:	1204703a 	and	r2,r2,r8
    abbc:	1449c83a 	sub	r4,r2,r17
    abc0:	393ff90e 	bge	r7,r4,aba8 <__alt_mem_Flash_flash_data+0xf400aba8>
    abc4:	80800317 	ldw	r2,12(r16)
    abc8:	80c00217 	ldw	r3,8(r16)
    abcc:	89400054 	ori	r5,r17,1
    abd0:	81400115 	stw	r5,4(r16)
    abd4:	18800315 	stw	r2,12(r3)
    abd8:	10c00215 	stw	r3,8(r2)
    abdc:	8463883a 	add	r17,r16,r17
    abe0:	9c400515 	stw	r17,20(r19)
    abe4:	9c400415 	stw	r17,16(r19)
    abe8:	20800054 	ori	r2,r4,1
    abec:	88800115 	stw	r2,4(r17)
    abf0:	8a400315 	stw	r9,12(r17)
    abf4:	8a400215 	stw	r9,8(r17)
    abf8:	8923883a 	add	r17,r17,r4
    abfc:	89000015 	stw	r4,0(r17)
    ac00:	9009883a 	mov	r4,r18
    ac04:	0013b800 	call	13b80 <__malloc_unlock>
    ac08:	80800204 	addi	r2,r16,8
    ac0c:	003f7d06 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    ac10:	00800304 	movi	r2,12
    ac14:	90800015 	stw	r2,0(r18)
    ac18:	0005883a 	mov	r2,zero
    ac1c:	003f7906 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    ac20:	01401f84 	movi	r5,126
    ac24:	01c00fc4 	movi	r7,63
    ac28:	003f8d06 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    ac2c:	81000317 	ldw	r4,12(r16)
    ac30:	003f6a06 	br	a9dc <__alt_mem_Flash_flash_data+0xf400a9dc>
    ac34:	81c5883a 	add	r2,r16,r7
    ac38:	10c00117 	ldw	r3,4(r2)
    ac3c:	9009883a 	mov	r4,r18
    ac40:	18c00054 	ori	r3,r3,1
    ac44:	10c00115 	stw	r3,4(r2)
    ac48:	0013b800 	call	13b80 <__malloc_unlock>
    ac4c:	80800204 	addi	r2,r16,8
    ac50:	003f6c06 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    ac54:	9c000217 	ldw	r16,8(r19)
    ac58:	00bfff04 	movi	r2,-4
    ac5c:	85800117 	ldw	r22,4(r16)
    ac60:	b0ac703a 	and	r22,r22,r2
    ac64:	b4400336 	bltu	r22,r17,ac74 <_malloc_r+0x324>
    ac68:	b445c83a 	sub	r2,r22,r17
    ac6c:	00c003c4 	movi	r3,15
    ac70:	18805d16 	blt	r3,r2,ade8 <_malloc_r+0x498>
    ac74:	05c000b4 	movhi	r23,2
    ac78:	008000b4 	movhi	r2,2
    ac7c:	bdcb4104 	addi	r23,r23,11524
    ac80:	10935c04 	addi	r2,r2,19824
    ac84:	15400017 	ldw	r21,0(r2)
    ac88:	b9000017 	ldw	r4,0(r23)
    ac8c:	00ffffc4 	movi	r3,-1
    ac90:	858d883a 	add	r6,r16,r22
    ac94:	8d6b883a 	add	r21,r17,r21
    ac98:	20c0e426 	beq	r4,r3,b02c <_malloc_r+0x6dc>
    ac9c:	ad4403c4 	addi	r21,r21,4111
    aca0:	00fc0004 	movi	r3,-4096
    aca4:	a8ea703a 	and	r21,r21,r3
    aca8:	9009883a 	mov	r4,r18
    acac:	a80b883a 	mov	r5,r21
    acb0:	d9800015 	stw	r6,0(sp)
    acb4:	000cb140 	call	cb14 <_sbrk_r>
    acb8:	00ffffc4 	movi	r3,-1
    acbc:	1029883a 	mov	r20,r2
    acc0:	d9800017 	ldw	r6,0(sp)
    acc4:	10c0a426 	beq	r2,r3,af58 <_malloc_r+0x608>
    acc8:	1180a236 	bltu	r2,r6,af54 <_malloc_r+0x604>
    accc:	070000b4 	movhi	fp,2
    acd0:	e7137e04 	addi	fp,fp,19960
    acd4:	e0c00017 	ldw	r3,0(fp)
    acd8:	a8c7883a 	add	r3,r21,r3
    acdc:	e0c00015 	stw	r3,0(fp)
    ace0:	3500da26 	beq	r6,r20,b04c <_malloc_r+0x6fc>
    ace4:	b9000017 	ldw	r4,0(r23)
    ace8:	00bfffc4 	movi	r2,-1
    acec:	2080e426 	beq	r4,r2,b080 <_malloc_r+0x730>
    acf0:	a185c83a 	sub	r2,r20,r6
    acf4:	1885883a 	add	r2,r3,r2
    acf8:	e0800015 	stw	r2,0(fp)
    acfc:	a0c001cc 	andi	r3,r20,7
    ad00:	1800b526 	beq	r3,zero,afd8 <_malloc_r+0x688>
    ad04:	a0e9c83a 	sub	r20,r20,r3
    ad08:	00840204 	movi	r2,4104
    ad0c:	a5000204 	addi	r20,r20,8
    ad10:	10c7c83a 	sub	r3,r2,r3
    ad14:	a545883a 	add	r2,r20,r21
    ad18:	1083ffcc 	andi	r2,r2,4095
    ad1c:	18abc83a 	sub	r21,r3,r2
    ad20:	9009883a 	mov	r4,r18
    ad24:	a80b883a 	mov	r5,r21
    ad28:	000cb140 	call	cb14 <_sbrk_r>
    ad2c:	00ffffc4 	movi	r3,-1
    ad30:	10c0d026 	beq	r2,r3,b074 <_malloc_r+0x724>
    ad34:	1507c83a 	sub	r3,r2,r20
    ad38:	a8c7883a 	add	r3,r21,r3
    ad3c:	18c00054 	ori	r3,r3,1
    ad40:	e0800017 	ldw	r2,0(fp)
    ad44:	9d000215 	stw	r20,8(r19)
    ad48:	a0c00115 	stw	r3,4(r20)
    ad4c:	a887883a 	add	r3,r21,r2
    ad50:	e0c00015 	stw	r3,0(fp)
    ad54:	84c00e26 	beq	r16,r19,ad90 <_malloc_r+0x440>
    ad58:	018003c4 	movi	r6,15
    ad5c:	3580a02e 	bgeu	r6,r22,afe0 <_malloc_r+0x690>
    ad60:	81400117 	ldw	r5,4(r16)
    ad64:	013ffe04 	movi	r4,-8
    ad68:	b0bffd04 	addi	r2,r22,-12
    ad6c:	1104703a 	and	r2,r2,r4
    ad70:	2900004c 	andi	r4,r5,1
    ad74:	1108b03a 	or	r4,r2,r4
    ad78:	81000115 	stw	r4,4(r16)
    ad7c:	01400144 	movi	r5,5
    ad80:	8089883a 	add	r4,r16,r2
    ad84:	21400115 	stw	r5,4(r4)
    ad88:	21400215 	stw	r5,8(r4)
    ad8c:	3080c036 	bltu	r6,r2,b090 <_malloc_r+0x740>
    ad90:	008000b4 	movhi	r2,2
    ad94:	10935b04 	addi	r2,r2,19820
    ad98:	11000017 	ldw	r4,0(r2)
    ad9c:	20c0012e 	bgeu	r4,r3,ada4 <_malloc_r+0x454>
    ada0:	10c00015 	stw	r3,0(r2)
    ada4:	008000b4 	movhi	r2,2
    ada8:	10935a04 	addi	r2,r2,19816
    adac:	11000017 	ldw	r4,0(r2)
    adb0:	9c000217 	ldw	r16,8(r19)
    adb4:	20c0012e 	bgeu	r4,r3,adbc <_malloc_r+0x46c>
    adb8:	10c00015 	stw	r3,0(r2)
    adbc:	80c00117 	ldw	r3,4(r16)
    adc0:	00bfff04 	movi	r2,-4
    adc4:	1886703a 	and	r3,r3,r2
    adc8:	1c45c83a 	sub	r2,r3,r17
    adcc:	1c400236 	bltu	r3,r17,add8 <_malloc_r+0x488>
    add0:	00c003c4 	movi	r3,15
    add4:	18800416 	blt	r3,r2,ade8 <_malloc_r+0x498>
    add8:	9009883a 	mov	r4,r18
    addc:	0013b800 	call	13b80 <__malloc_unlock>
    ade0:	0005883a 	mov	r2,zero
    ade4:	003f0706 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    ade8:	88c00054 	ori	r3,r17,1
    adec:	80c00115 	stw	r3,4(r16)
    adf0:	8463883a 	add	r17,r16,r17
    adf4:	10800054 	ori	r2,r2,1
    adf8:	9c400215 	stw	r17,8(r19)
    adfc:	88800115 	stw	r2,4(r17)
    ae00:	9009883a 	mov	r4,r18
    ae04:	0013b800 	call	13b80 <__malloc_unlock>
    ae08:	80800204 	addi	r2,r16,8
    ae0c:	003efd06 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    ae10:	00800504 	movi	r2,20
    ae14:	10c0482e 	bgeu	r2,r3,af38 <_malloc_r+0x5e8>
    ae18:	00801504 	movi	r2,84
    ae1c:	10c06836 	bltu	r2,r3,afc0 <_malloc_r+0x670>
    ae20:	8806d33a 	srli	r3,r17,12
    ae24:	19c01b84 	addi	r7,r3,110
    ae28:	39cb883a 	add	r5,r7,r7
    ae2c:	003f0c06 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    ae30:	3804d27a 	srli	r2,r7,9
    ae34:	01000104 	movi	r4,4
    ae38:	2080422e 	bgeu	r4,r2,af44 <_malloc_r+0x5f4>
    ae3c:	01000504 	movi	r4,20
    ae40:	20807c36 	bltu	r4,r2,b034 <_malloc_r+0x6e4>
    ae44:	110016c4 	addi	r4,r2,91
    ae48:	210b883a 	add	r5,r4,r4
    ae4c:	294b883a 	add	r5,r5,r5
    ae50:	294b883a 	add	r5,r5,r5
    ae54:	994b883a 	add	r5,r19,r5
    ae58:	28800217 	ldw	r2,8(r5)
    ae5c:	020000b4 	movhi	r8,2
    ae60:	4204c904 	addi	r8,r8,4900
    ae64:	11406326 	beq	r2,r5,aff4 <_malloc_r+0x6a4>
    ae68:	01bfff04 	movi	r6,-4
    ae6c:	11000117 	ldw	r4,4(r2)
    ae70:	2188703a 	and	r4,r4,r6
    ae74:	3900022e 	bgeu	r7,r4,ae80 <_malloc_r+0x530>
    ae78:	10800217 	ldw	r2,8(r2)
    ae7c:	28bffb1e 	bne	r5,r2,ae6c <__alt_mem_Flash_flash_data+0xf400ae6c>
    ae80:	11800317 	ldw	r6,12(r2)
    ae84:	99000117 	ldw	r4,4(r19)
    ae88:	81800315 	stw	r6,12(r16)
    ae8c:	80800215 	stw	r2,8(r16)
    ae90:	34000215 	stw	r16,8(r6)
    ae94:	14000315 	stw	r16,12(r2)
    ae98:	003f2706 	br	ab38 <__alt_mem_Flash_flash_data+0xf400ab38>
    ae9c:	88c00054 	ori	r3,r17,1
    aea0:	80c00115 	stw	r3,4(r16)
    aea4:	8463883a 	add	r17,r16,r17
    aea8:	34400515 	stw	r17,20(r6)
    aeac:	34400415 	stw	r17,16(r6)
    aeb0:	10c00054 	ori	r3,r2,1
    aeb4:	8a400315 	stw	r9,12(r17)
    aeb8:	8a400215 	stw	r9,8(r17)
    aebc:	88c00115 	stw	r3,4(r17)
    aec0:	88a3883a 	add	r17,r17,r2
    aec4:	88800015 	stw	r2,0(r17)
    aec8:	9009883a 	mov	r4,r18
    aecc:	0013b800 	call	13b80 <__malloc_unlock>
    aed0:	80800204 	addi	r2,r16,8
    aed4:	003ecb06 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    aed8:	31000117 	ldw	r4,4(r6)
    aedc:	003f1606 	br	ab38 <__alt_mem_Flash_flash_data+0xf400ab38>
    aee0:	63000044 	addi	r12,r12,1
    aee4:	608000cc 	andi	r2,r12,3
    aee8:	5ac00204 	addi	r11,r11,8
    aeec:	103f2a1e 	bne	r2,zero,ab98 <__alt_mem_Flash_flash_data+0xf400ab98>
    aef0:	00002106 	br	af78 <_malloc_r+0x628>
    aef4:	80800204 	addi	r2,r16,8
    aef8:	84000517 	ldw	r16,20(r16)
    aefc:	143eb31e 	bne	r2,r16,a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    af00:	18c00084 	addi	r3,r3,2
    af04:	003eec06 	br	aab8 <__alt_mem_Flash_flash_data+0xf400aab8>
    af08:	8085883a 	add	r2,r16,r2
    af0c:	10c00117 	ldw	r3,4(r2)
    af10:	81000317 	ldw	r4,12(r16)
    af14:	81400217 	ldw	r5,8(r16)
    af18:	18c00054 	ori	r3,r3,1
    af1c:	10c00115 	stw	r3,4(r2)
    af20:	29000315 	stw	r4,12(r5)
    af24:	21400215 	stw	r5,8(r4)
    af28:	9009883a 	mov	r4,r18
    af2c:	0013b800 	call	13b80 <__malloc_unlock>
    af30:	80800204 	addi	r2,r16,8
    af34:	003eb306 	br	aa04 <__alt_mem_Flash_flash_data+0xf400aa04>
    af38:	19c016c4 	addi	r7,r3,91
    af3c:	39cb883a 	add	r5,r7,r7
    af40:	003ec706 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    af44:	3804d1ba 	srli	r2,r7,6
    af48:	11000e04 	addi	r4,r2,56
    af4c:	210b883a 	add	r5,r4,r4
    af50:	003fbe06 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    af54:	84ff5d26 	beq	r16,r19,accc <__alt_mem_Flash_flash_data+0xf400accc>
    af58:	9c000217 	ldw	r16,8(r19)
    af5c:	00bfff04 	movi	r2,-4
    af60:	80c00117 	ldw	r3,4(r16)
    af64:	1886703a 	and	r3,r3,r2
    af68:	003f9706 	br	adc8 <__alt_mem_Flash_flash_data+0xf400adc8>
    af6c:	52800017 	ldw	r10,0(r10)
    af70:	18ffffc4 	addi	r3,r3,-1
    af74:	50805c1e 	bne	r10,r2,b0e8 <_malloc_r+0x798>
    af78:	190000cc 	andi	r4,r3,3
    af7c:	50bffe04 	addi	r2,r10,-8
    af80:	203ffa1e 	bne	r4,zero,af6c <__alt_mem_Flash_flash_data+0xf400af6c>
    af84:	98800117 	ldw	r2,4(r19)
    af88:	0146303a 	nor	r3,zero,r5
    af8c:	1884703a 	and	r2,r3,r2
    af90:	98800115 	stw	r2,4(r19)
    af94:	294b883a 	add	r5,r5,r5
    af98:	117f2e36 	bltu	r2,r5,ac54 <__alt_mem_Flash_flash_data+0xf400ac54>
    af9c:	283f2d26 	beq	r5,zero,ac54 <__alt_mem_Flash_flash_data+0xf400ac54>
    afa0:	1146703a 	and	r3,r2,r5
    afa4:	1800521e 	bne	r3,zero,b0f0 <_malloc_r+0x7a0>
    afa8:	6007883a 	mov	r3,r12
    afac:	294b883a 	add	r5,r5,r5
    afb0:	1148703a 	and	r4,r2,r5
    afb4:	18c00104 	addi	r3,r3,4
    afb8:	203ffc26 	beq	r4,zero,afac <__alt_mem_Flash_flash_data+0xf400afac>
    afbc:	003ef006 	br	ab80 <__alt_mem_Flash_flash_data+0xf400ab80>
    afc0:	00805504 	movi	r2,340
    afc4:	10c01336 	bltu	r2,r3,b014 <_malloc_r+0x6c4>
    afc8:	8806d3fa 	srli	r3,r17,15
    afcc:	19c01dc4 	addi	r7,r3,119
    afd0:	39cb883a 	add	r5,r7,r7
    afd4:	003ea206 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    afd8:	00c40004 	movi	r3,4096
    afdc:	003f4d06 	br	ad14 <__alt_mem_Flash_flash_data+0xf400ad14>
    afe0:	00800044 	movi	r2,1
    afe4:	a0800115 	stw	r2,4(r20)
    afe8:	a021883a 	mov	r16,r20
    afec:	0007883a 	mov	r3,zero
    aff0:	003f7506 	br	adc8 <__alt_mem_Flash_flash_data+0xf400adc8>
    aff4:	200bd0ba 	srai	r5,r4,2
    aff8:	01800044 	movi	r6,1
    affc:	41000117 	ldw	r4,4(r8)
    b000:	314a983a 	sll	r5,r6,r5
    b004:	100d883a 	mov	r6,r2
    b008:	2908b03a 	or	r4,r5,r4
    b00c:	41000115 	stw	r4,4(r8)
    b010:	003f9d06 	br	ae88 <__alt_mem_Flash_flash_data+0xf400ae88>
    b014:	00815504 	movi	r2,1364
    b018:	10c01336 	bltu	r2,r3,b068 <_malloc_r+0x718>
    b01c:	8806d4ba 	srli	r3,r17,18
    b020:	19c01f04 	addi	r7,r3,124
    b024:	39cb883a 	add	r5,r7,r7
    b028:	003e8d06 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    b02c:	ad400404 	addi	r21,r21,16
    b030:	003f1d06 	br	aca8 <__alt_mem_Flash_flash_data+0xf400aca8>
    b034:	01001504 	movi	r4,84
    b038:	20801c36 	bltu	r4,r2,b0ac <_malloc_r+0x75c>
    b03c:	3804d33a 	srli	r2,r7,12
    b040:	11001b84 	addi	r4,r2,110
    b044:	210b883a 	add	r5,r4,r4
    b048:	003f8006 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b04c:	3083ffcc 	andi	r2,r6,4095
    b050:	103f241e 	bne	r2,zero,ace4 <__alt_mem_Flash_flash_data+0xf400ace4>
    b054:	99000217 	ldw	r4,8(r19)
    b058:	ad85883a 	add	r2,r21,r22
    b05c:	10800054 	ori	r2,r2,1
    b060:	20800115 	stw	r2,4(r4)
    b064:	003f4a06 	br	ad90 <__alt_mem_Flash_flash_data+0xf400ad90>
    b068:	01403f04 	movi	r5,252
    b06c:	01c01f84 	movi	r7,126
    b070:	003e7b06 	br	aa60 <__alt_mem_Flash_flash_data+0xf400aa60>
    b074:	00c00044 	movi	r3,1
    b078:	002b883a 	mov	r21,zero
    b07c:	003f3006 	br	ad40 <__alt_mem_Flash_flash_data+0xf400ad40>
    b080:	008000b4 	movhi	r2,2
    b084:	108b4104 	addi	r2,r2,11524
    b088:	15000015 	stw	r20,0(r2)
    b08c:	003f1b06 	br	acfc <__alt_mem_Flash_flash_data+0xf400acfc>
    b090:	9009883a 	mov	r4,r18
    b094:	81400204 	addi	r5,r16,8
    b098:	0009d800 	call	9d80 <_free_r>
    b09c:	008000b4 	movhi	r2,2
    b0a0:	10937e04 	addi	r2,r2,19960
    b0a4:	10c00017 	ldw	r3,0(r2)
    b0a8:	003f3906 	br	ad90 <__alt_mem_Flash_flash_data+0xf400ad90>
    b0ac:	01005504 	movi	r4,340
    b0b0:	20800436 	bltu	r4,r2,b0c4 <_malloc_r+0x774>
    b0b4:	3804d3fa 	srli	r2,r7,15
    b0b8:	11001dc4 	addi	r4,r2,119
    b0bc:	210b883a 	add	r5,r4,r4
    b0c0:	003f6206 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b0c4:	01015504 	movi	r4,1364
    b0c8:	20800436 	bltu	r4,r2,b0dc <_malloc_r+0x78c>
    b0cc:	3804d4ba 	srli	r2,r7,18
    b0d0:	11001f04 	addi	r4,r2,124
    b0d4:	210b883a 	add	r5,r4,r4
    b0d8:	003f5c06 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b0dc:	01403f04 	movi	r5,252
    b0e0:	01001f84 	movi	r4,126
    b0e4:	003f5906 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b0e8:	98800117 	ldw	r2,4(r19)
    b0ec:	003fa906 	br	af94 <__alt_mem_Flash_flash_data+0xf400af94>
    b0f0:	6007883a 	mov	r3,r12
    b0f4:	003ea206 	br	ab80 <__alt_mem_Flash_flash_data+0xf400ab80>

0000b0f8 <memchr>:
    b0f8:	208000cc 	andi	r2,r4,3
    b0fc:	280f883a 	mov	r7,r5
    b100:	10003526 	beq	r2,zero,b1d8 <memchr+0xe0>
    b104:	30bfffc4 	addi	r2,r6,-1
    b108:	30001b26 	beq	r6,zero,b178 <memchr+0x80>
    b10c:	21800003 	ldbu	r6,0(r4)
    b110:	28c03fcc 	andi	r3,r5,255
    b114:	30c01a26 	beq	r6,r3,b180 <memchr+0x88>
    b118:	180d883a 	mov	r6,r3
    b11c:	00000406 	br	b130 <memchr+0x38>
    b120:	10001526 	beq	r2,zero,b178 <memchr+0x80>
    b124:	20c00003 	ldbu	r3,0(r4)
    b128:	10bfffc4 	addi	r2,r2,-1
    b12c:	19801426 	beq	r3,r6,b180 <memchr+0x88>
    b130:	21000044 	addi	r4,r4,1
    b134:	20c000cc 	andi	r3,r4,3
    b138:	183ff91e 	bne	r3,zero,b120 <__alt_mem_Flash_flash_data+0xf400b120>
    b13c:	024000c4 	movi	r9,3
    b140:	48801136 	bltu	r9,r2,b188 <memchr+0x90>
    b144:	10000c26 	beq	r2,zero,b178 <memchr+0x80>
    b148:	20c00003 	ldbu	r3,0(r4)
    b14c:	29403fcc 	andi	r5,r5,255
    b150:	19400b26 	beq	r3,r5,b180 <memchr+0x88>
    b154:	20c00044 	addi	r3,r4,1
    b158:	2085883a 	add	r2,r4,r2
    b15c:	39803fcc 	andi	r6,r7,255
    b160:	00000306 	br	b170 <memchr+0x78>
    b164:	18c00044 	addi	r3,r3,1
    b168:	197fffc3 	ldbu	r5,-1(r3)
    b16c:	29800426 	beq	r5,r6,b180 <memchr+0x88>
    b170:	1809883a 	mov	r4,r3
    b174:	18bffb1e 	bne	r3,r2,b164 <__alt_mem_Flash_flash_data+0xf400b164>
    b178:	0005883a 	mov	r2,zero
    b17c:	f800283a 	ret
    b180:	2005883a 	mov	r2,r4
    b184:	f800283a 	ret
    b188:	28c03fcc 	andi	r3,r5,255
    b18c:	1810923a 	slli	r8,r3,8
    b190:	02ffbff4 	movhi	r11,65279
    b194:	02a02074 	movhi	r10,32897
    b198:	40c6b03a 	or	r3,r8,r3
    b19c:	1810943a 	slli	r8,r3,16
    b1a0:	5affbfc4 	addi	r11,r11,-257
    b1a4:	52a02004 	addi	r10,r10,-32640
    b1a8:	40d0b03a 	or	r8,r8,r3
    b1ac:	20c00017 	ldw	r3,0(r4)
    b1b0:	40c6f03a 	xor	r3,r8,r3
    b1b4:	1acd883a 	add	r6,r3,r11
    b1b8:	00c6303a 	nor	r3,zero,r3
    b1bc:	30c6703a 	and	r3,r6,r3
    b1c0:	1a86703a 	and	r3,r3,r10
    b1c4:	183fdf1e 	bne	r3,zero,b144 <__alt_mem_Flash_flash_data+0xf400b144>
    b1c8:	10bfff04 	addi	r2,r2,-4
    b1cc:	21000104 	addi	r4,r4,4
    b1d0:	48bff636 	bltu	r9,r2,b1ac <__alt_mem_Flash_flash_data+0xf400b1ac>
    b1d4:	003fdb06 	br	b144 <__alt_mem_Flash_flash_data+0xf400b144>
    b1d8:	3005883a 	mov	r2,r6
    b1dc:	003fd706 	br	b13c <__alt_mem_Flash_flash_data+0xf400b13c>

0000b1e0 <memcpy>:
    b1e0:	deffff04 	addi	sp,sp,-4
    b1e4:	dc000015 	stw	r16,0(sp)
    b1e8:	00c003c4 	movi	r3,15
    b1ec:	2005883a 	mov	r2,r4
    b1f0:	1980432e 	bgeu	r3,r6,b300 <memcpy+0x120>
    b1f4:	2146b03a 	or	r3,r4,r5
    b1f8:	18c000cc 	andi	r3,r3,3
    b1fc:	1800421e 	bne	r3,zero,b308 <memcpy+0x128>
    b200:	343ffc04 	addi	r16,r6,-16
    b204:	8020d13a 	srli	r16,r16,4
    b208:	28c00104 	addi	r3,r5,4
    b20c:	23400104 	addi	r13,r4,4
    b210:	801e913a 	slli	r15,r16,4
    b214:	2b000204 	addi	r12,r5,8
    b218:	22c00204 	addi	r11,r4,8
    b21c:	7bc00504 	addi	r15,r15,20
    b220:	2a800304 	addi	r10,r5,12
    b224:	22400304 	addi	r9,r4,12
    b228:	2bdf883a 	add	r15,r5,r15
    b22c:	2811883a 	mov	r8,r5
    b230:	200f883a 	mov	r7,r4
    b234:	41000017 	ldw	r4,0(r8)
    b238:	39c00404 	addi	r7,r7,16
    b23c:	18c00404 	addi	r3,r3,16
    b240:	393ffc15 	stw	r4,-16(r7)
    b244:	1bbffc17 	ldw	r14,-16(r3)
    b248:	6b400404 	addi	r13,r13,16
    b24c:	5ac00404 	addi	r11,r11,16
    b250:	6bbffc15 	stw	r14,-16(r13)
    b254:	63800017 	ldw	r14,0(r12)
    b258:	4a400404 	addi	r9,r9,16
    b25c:	42000404 	addi	r8,r8,16
    b260:	5bbffc15 	stw	r14,-16(r11)
    b264:	53800017 	ldw	r14,0(r10)
    b268:	63000404 	addi	r12,r12,16
    b26c:	52800404 	addi	r10,r10,16
    b270:	4bbffc15 	stw	r14,-16(r9)
    b274:	1bffef1e 	bne	r3,r15,b234 <__alt_mem_Flash_flash_data+0xf400b234>
    b278:	81c00044 	addi	r7,r16,1
    b27c:	380e913a 	slli	r7,r7,4
    b280:	310003cc 	andi	r4,r6,15
    b284:	02c000c4 	movi	r11,3
    b288:	11c7883a 	add	r3,r2,r7
    b28c:	29cb883a 	add	r5,r5,r7
    b290:	59001f2e 	bgeu	r11,r4,b310 <memcpy+0x130>
    b294:	1813883a 	mov	r9,r3
    b298:	2811883a 	mov	r8,r5
    b29c:	200f883a 	mov	r7,r4
    b2a0:	42800017 	ldw	r10,0(r8)
    b2a4:	4a400104 	addi	r9,r9,4
    b2a8:	39ffff04 	addi	r7,r7,-4
    b2ac:	4abfff15 	stw	r10,-4(r9)
    b2b0:	42000104 	addi	r8,r8,4
    b2b4:	59fffa36 	bltu	r11,r7,b2a0 <__alt_mem_Flash_flash_data+0xf400b2a0>
    b2b8:	213fff04 	addi	r4,r4,-4
    b2bc:	2008d0ba 	srli	r4,r4,2
    b2c0:	318000cc 	andi	r6,r6,3
    b2c4:	21000044 	addi	r4,r4,1
    b2c8:	2109883a 	add	r4,r4,r4
    b2cc:	2109883a 	add	r4,r4,r4
    b2d0:	1907883a 	add	r3,r3,r4
    b2d4:	290b883a 	add	r5,r5,r4
    b2d8:	30000626 	beq	r6,zero,b2f4 <memcpy+0x114>
    b2dc:	198d883a 	add	r6,r3,r6
    b2e0:	29c00003 	ldbu	r7,0(r5)
    b2e4:	18c00044 	addi	r3,r3,1
    b2e8:	29400044 	addi	r5,r5,1
    b2ec:	19ffffc5 	stb	r7,-1(r3)
    b2f0:	19bffb1e 	bne	r3,r6,b2e0 <__alt_mem_Flash_flash_data+0xf400b2e0>
    b2f4:	dc000017 	ldw	r16,0(sp)
    b2f8:	dec00104 	addi	sp,sp,4
    b2fc:	f800283a 	ret
    b300:	2007883a 	mov	r3,r4
    b304:	003ff406 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b308:	2007883a 	mov	r3,r4
    b30c:	003ff306 	br	b2dc <__alt_mem_Flash_flash_data+0xf400b2dc>
    b310:	200d883a 	mov	r6,r4
    b314:	003ff006 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>

0000b318 <memmove>:
    b318:	2005883a 	mov	r2,r4
    b31c:	29000b2e 	bgeu	r5,r4,b34c <memmove+0x34>
    b320:	298f883a 	add	r7,r5,r6
    b324:	21c0092e 	bgeu	r4,r7,b34c <memmove+0x34>
    b328:	2187883a 	add	r3,r4,r6
    b32c:	198bc83a 	sub	r5,r3,r6
    b330:	30004b26 	beq	r6,zero,b460 <memmove+0x148>
    b334:	39ffffc4 	addi	r7,r7,-1
    b338:	39000003 	ldbu	r4,0(r7)
    b33c:	18ffffc4 	addi	r3,r3,-1
    b340:	19000005 	stb	r4,0(r3)
    b344:	197ffb1e 	bne	r3,r5,b334 <__alt_mem_Flash_flash_data+0xf400b334>
    b348:	f800283a 	ret
    b34c:	00c003c4 	movi	r3,15
    b350:	1980412e 	bgeu	r3,r6,b458 <memmove+0x140>
    b354:	1146b03a 	or	r3,r2,r5
    b358:	18c000cc 	andi	r3,r3,3
    b35c:	1800411e 	bne	r3,zero,b464 <memmove+0x14c>
    b360:	33fffc04 	addi	r15,r6,-16
    b364:	781ed13a 	srli	r15,r15,4
    b368:	28c00104 	addi	r3,r5,4
    b36c:	13400104 	addi	r13,r2,4
    b370:	781c913a 	slli	r14,r15,4
    b374:	2b000204 	addi	r12,r5,8
    b378:	12c00204 	addi	r11,r2,8
    b37c:	73800504 	addi	r14,r14,20
    b380:	2a800304 	addi	r10,r5,12
    b384:	12400304 	addi	r9,r2,12
    b388:	2b9d883a 	add	r14,r5,r14
    b38c:	2811883a 	mov	r8,r5
    b390:	100f883a 	mov	r7,r2
    b394:	41000017 	ldw	r4,0(r8)
    b398:	39c00404 	addi	r7,r7,16
    b39c:	18c00404 	addi	r3,r3,16
    b3a0:	393ffc15 	stw	r4,-16(r7)
    b3a4:	193ffc17 	ldw	r4,-16(r3)
    b3a8:	6b400404 	addi	r13,r13,16
    b3ac:	5ac00404 	addi	r11,r11,16
    b3b0:	693ffc15 	stw	r4,-16(r13)
    b3b4:	61000017 	ldw	r4,0(r12)
    b3b8:	4a400404 	addi	r9,r9,16
    b3bc:	42000404 	addi	r8,r8,16
    b3c0:	593ffc15 	stw	r4,-16(r11)
    b3c4:	51000017 	ldw	r4,0(r10)
    b3c8:	63000404 	addi	r12,r12,16
    b3cc:	52800404 	addi	r10,r10,16
    b3d0:	493ffc15 	stw	r4,-16(r9)
    b3d4:	1bbfef1e 	bne	r3,r14,b394 <__alt_mem_Flash_flash_data+0xf400b394>
    b3d8:	79000044 	addi	r4,r15,1
    b3dc:	2008913a 	slli	r4,r4,4
    b3e0:	328003cc 	andi	r10,r6,15
    b3e4:	02c000c4 	movi	r11,3
    b3e8:	1107883a 	add	r3,r2,r4
    b3ec:	290b883a 	add	r5,r5,r4
    b3f0:	5a801e2e 	bgeu	r11,r10,b46c <memmove+0x154>
    b3f4:	1813883a 	mov	r9,r3
    b3f8:	2811883a 	mov	r8,r5
    b3fc:	500f883a 	mov	r7,r10
    b400:	41000017 	ldw	r4,0(r8)
    b404:	4a400104 	addi	r9,r9,4
    b408:	39ffff04 	addi	r7,r7,-4
    b40c:	493fff15 	stw	r4,-4(r9)
    b410:	42000104 	addi	r8,r8,4
    b414:	59fffa36 	bltu	r11,r7,b400 <__alt_mem_Flash_flash_data+0xf400b400>
    b418:	513fff04 	addi	r4,r10,-4
    b41c:	2008d0ba 	srli	r4,r4,2
    b420:	318000cc 	andi	r6,r6,3
    b424:	21000044 	addi	r4,r4,1
    b428:	2109883a 	add	r4,r4,r4
    b42c:	2109883a 	add	r4,r4,r4
    b430:	1907883a 	add	r3,r3,r4
    b434:	290b883a 	add	r5,r5,r4
    b438:	30000926 	beq	r6,zero,b460 <memmove+0x148>
    b43c:	198d883a 	add	r6,r3,r6
    b440:	29c00003 	ldbu	r7,0(r5)
    b444:	18c00044 	addi	r3,r3,1
    b448:	29400044 	addi	r5,r5,1
    b44c:	19ffffc5 	stb	r7,-1(r3)
    b450:	19bffb1e 	bne	r3,r6,b440 <__alt_mem_Flash_flash_data+0xf400b440>
    b454:	f800283a 	ret
    b458:	1007883a 	mov	r3,r2
    b45c:	003ff606 	br	b438 <__alt_mem_Flash_flash_data+0xf400b438>
    b460:	f800283a 	ret
    b464:	1007883a 	mov	r3,r2
    b468:	003ff406 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    b46c:	500d883a 	mov	r6,r10
    b470:	003ff106 	br	b438 <__alt_mem_Flash_flash_data+0xf400b438>

0000b474 <memset>:
    b474:	20c000cc 	andi	r3,r4,3
    b478:	2005883a 	mov	r2,r4
    b47c:	18004326 	beq	r3,zero,b58c <memset+0x118>
    b480:	31ffffc4 	addi	r7,r6,-1
    b484:	30004026 	beq	r6,zero,b588 <memset+0x114>
    b488:	2813883a 	mov	r9,r5
    b48c:	200d883a 	mov	r6,r4
    b490:	2007883a 	mov	r3,r4
    b494:	00000406 	br	b4a8 <memset+0x34>
    b498:	3a3fffc4 	addi	r8,r7,-1
    b49c:	31800044 	addi	r6,r6,1
    b4a0:	38003926 	beq	r7,zero,b588 <memset+0x114>
    b4a4:	400f883a 	mov	r7,r8
    b4a8:	18c00044 	addi	r3,r3,1
    b4ac:	32400005 	stb	r9,0(r6)
    b4b0:	1a0000cc 	andi	r8,r3,3
    b4b4:	403ff81e 	bne	r8,zero,b498 <__alt_mem_Flash_flash_data+0xf400b498>
    b4b8:	010000c4 	movi	r4,3
    b4bc:	21c02d2e 	bgeu	r4,r7,b574 <memset+0x100>
    b4c0:	29803fcc 	andi	r6,r5,255
    b4c4:	3008923a 	slli	r4,r6,8
    b4c8:	218cb03a 	or	r6,r4,r6
    b4cc:	3008943a 	slli	r4,r6,16
    b4d0:	218cb03a 	or	r6,r4,r6
    b4d4:	010003c4 	movi	r4,15
    b4d8:	21c0182e 	bgeu	r4,r7,b53c <memset+0xc8>
    b4dc:	3b3ffc04 	addi	r12,r7,-16
    b4e0:	6018d13a 	srli	r12,r12,4
    b4e4:	1a000104 	addi	r8,r3,4
    b4e8:	1ac00204 	addi	r11,r3,8
    b4ec:	6008913a 	slli	r4,r12,4
    b4f0:	1a800304 	addi	r10,r3,12
    b4f4:	1813883a 	mov	r9,r3
    b4f8:	21000504 	addi	r4,r4,20
    b4fc:	1909883a 	add	r4,r3,r4
    b500:	49800015 	stw	r6,0(r9)
    b504:	41800015 	stw	r6,0(r8)
    b508:	59800015 	stw	r6,0(r11)
    b50c:	51800015 	stw	r6,0(r10)
    b510:	42000404 	addi	r8,r8,16
    b514:	4a400404 	addi	r9,r9,16
    b518:	5ac00404 	addi	r11,r11,16
    b51c:	52800404 	addi	r10,r10,16
    b520:	413ff71e 	bne	r8,r4,b500 <__alt_mem_Flash_flash_data+0xf400b500>
    b524:	63000044 	addi	r12,r12,1
    b528:	6018913a 	slli	r12,r12,4
    b52c:	39c003cc 	andi	r7,r7,15
    b530:	010000c4 	movi	r4,3
    b534:	1b07883a 	add	r3,r3,r12
    b538:	21c00e2e 	bgeu	r4,r7,b574 <memset+0x100>
    b53c:	1813883a 	mov	r9,r3
    b540:	3811883a 	mov	r8,r7
    b544:	010000c4 	movi	r4,3
    b548:	49800015 	stw	r6,0(r9)
    b54c:	423fff04 	addi	r8,r8,-4
    b550:	4a400104 	addi	r9,r9,4
    b554:	223ffc36 	bltu	r4,r8,b548 <__alt_mem_Flash_flash_data+0xf400b548>
    b558:	393fff04 	addi	r4,r7,-4
    b55c:	2008d0ba 	srli	r4,r4,2
    b560:	39c000cc 	andi	r7,r7,3
    b564:	21000044 	addi	r4,r4,1
    b568:	2109883a 	add	r4,r4,r4
    b56c:	2109883a 	add	r4,r4,r4
    b570:	1907883a 	add	r3,r3,r4
    b574:	38000426 	beq	r7,zero,b588 <memset+0x114>
    b578:	19cf883a 	add	r7,r3,r7
    b57c:	19400005 	stb	r5,0(r3)
    b580:	18c00044 	addi	r3,r3,1
    b584:	19fffd1e 	bne	r3,r7,b57c <__alt_mem_Flash_flash_data+0xf400b57c>
    b588:	f800283a 	ret
    b58c:	2007883a 	mov	r3,r4
    b590:	300f883a 	mov	r7,r6
    b594:	003fc806 	br	b4b8 <__alt_mem_Flash_flash_data+0xf400b4b8>

0000b598 <_Balloc>:
    b598:	20801317 	ldw	r2,76(r4)
    b59c:	defffc04 	addi	sp,sp,-16
    b5a0:	dc400115 	stw	r17,4(sp)
    b5a4:	dc000015 	stw	r16,0(sp)
    b5a8:	dfc00315 	stw	ra,12(sp)
    b5ac:	dc800215 	stw	r18,8(sp)
    b5b0:	2023883a 	mov	r17,r4
    b5b4:	2821883a 	mov	r16,r5
    b5b8:	10000f26 	beq	r2,zero,b5f8 <_Balloc+0x60>
    b5bc:	8407883a 	add	r3,r16,r16
    b5c0:	18c7883a 	add	r3,r3,r3
    b5c4:	10c7883a 	add	r3,r2,r3
    b5c8:	18800017 	ldw	r2,0(r3)
    b5cc:	10001126 	beq	r2,zero,b614 <_Balloc+0x7c>
    b5d0:	11000017 	ldw	r4,0(r2)
    b5d4:	19000015 	stw	r4,0(r3)
    b5d8:	10000415 	stw	zero,16(r2)
    b5dc:	10000315 	stw	zero,12(r2)
    b5e0:	dfc00317 	ldw	ra,12(sp)
    b5e4:	dc800217 	ldw	r18,8(sp)
    b5e8:	dc400117 	ldw	r17,4(sp)
    b5ec:	dc000017 	ldw	r16,0(sp)
    b5f0:	dec00404 	addi	sp,sp,16
    b5f4:	f800283a 	ret
    b5f8:	01400104 	movi	r5,4
    b5fc:	01800844 	movi	r6,33
    b600:	000f4c00 	call	f4c0 <_calloc_r>
    b604:	88801315 	stw	r2,76(r17)
    b608:	103fec1e 	bne	r2,zero,b5bc <__alt_mem_Flash_flash_data+0xf400b5bc>
    b60c:	0005883a 	mov	r2,zero
    b610:	003ff306 	br	b5e0 <__alt_mem_Flash_flash_data+0xf400b5e0>
    b614:	01400044 	movi	r5,1
    b618:	2c24983a 	sll	r18,r5,r16
    b61c:	8809883a 	mov	r4,r17
    b620:	91800144 	addi	r6,r18,5
    b624:	318d883a 	add	r6,r6,r6
    b628:	318d883a 	add	r6,r6,r6
    b62c:	000f4c00 	call	f4c0 <_calloc_r>
    b630:	103ff626 	beq	r2,zero,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    b634:	14000115 	stw	r16,4(r2)
    b638:	14800215 	stw	r18,8(r2)
    b63c:	003fe606 	br	b5d8 <__alt_mem_Flash_flash_data+0xf400b5d8>

0000b640 <_Bfree>:
    b640:	28000826 	beq	r5,zero,b664 <_Bfree+0x24>
    b644:	28c00117 	ldw	r3,4(r5)
    b648:	20801317 	ldw	r2,76(r4)
    b64c:	18c7883a 	add	r3,r3,r3
    b650:	18c7883a 	add	r3,r3,r3
    b654:	10c5883a 	add	r2,r2,r3
    b658:	10c00017 	ldw	r3,0(r2)
    b65c:	28c00015 	stw	r3,0(r5)
    b660:	11400015 	stw	r5,0(r2)
    b664:	f800283a 	ret

0000b668 <__multadd>:
    b668:	defffa04 	addi	sp,sp,-24
    b66c:	dc000115 	stw	r16,4(sp)
    b670:	2c000417 	ldw	r16,16(r5)
    b674:	dc800315 	stw	r18,12(sp)
    b678:	dc400215 	stw	r17,8(sp)
    b67c:	dfc00515 	stw	ra,20(sp)
    b680:	dcc00415 	stw	r19,16(sp)
    b684:	2823883a 	mov	r17,r5
    b688:	2025883a 	mov	r18,r4
    b68c:	2a400504 	addi	r9,r5,20
    b690:	0015883a 	mov	r10,zero
    b694:	4a000017 	ldw	r8,0(r9)
    b698:	4a400104 	addi	r9,r9,4
    b69c:	52800044 	addi	r10,r10,1
    b6a0:	40ffffcc 	andi	r3,r8,65535
    b6a4:	1987383a 	mul	r3,r3,r6
    b6a8:	4010d43a 	srli	r8,r8,16
    b6ac:	19cf883a 	add	r7,r3,r7
    b6b0:	4191383a 	mul	r8,r8,r6
    b6b4:	3816d43a 	srli	r11,r7,16
    b6b8:	38ffffcc 	andi	r3,r7,65535
    b6bc:	5a0f883a 	add	r7,r11,r8
    b6c0:	3810943a 	slli	r8,r7,16
    b6c4:	380ed43a 	srli	r7,r7,16
    b6c8:	40c7883a 	add	r3,r8,r3
    b6cc:	48ffff15 	stw	r3,-4(r9)
    b6d0:	543ff016 	blt	r10,r16,b694 <__alt_mem_Flash_flash_data+0xf400b694>
    b6d4:	38000926 	beq	r7,zero,b6fc <__multadd+0x94>
    b6d8:	88800217 	ldw	r2,8(r17)
    b6dc:	80800f0e 	bge	r16,r2,b71c <__multadd+0xb4>
    b6e0:	80800144 	addi	r2,r16,5
    b6e4:	1085883a 	add	r2,r2,r2
    b6e8:	1085883a 	add	r2,r2,r2
    b6ec:	8885883a 	add	r2,r17,r2
    b6f0:	11c00015 	stw	r7,0(r2)
    b6f4:	84000044 	addi	r16,r16,1
    b6f8:	8c000415 	stw	r16,16(r17)
    b6fc:	8805883a 	mov	r2,r17
    b700:	dfc00517 	ldw	ra,20(sp)
    b704:	dcc00417 	ldw	r19,16(sp)
    b708:	dc800317 	ldw	r18,12(sp)
    b70c:	dc400217 	ldw	r17,8(sp)
    b710:	dc000117 	ldw	r16,4(sp)
    b714:	dec00604 	addi	sp,sp,24
    b718:	f800283a 	ret
    b71c:	89400117 	ldw	r5,4(r17)
    b720:	9009883a 	mov	r4,r18
    b724:	d9c00015 	stw	r7,0(sp)
    b728:	29400044 	addi	r5,r5,1
    b72c:	000b5980 	call	b598 <_Balloc>
    b730:	89800417 	ldw	r6,16(r17)
    b734:	11000304 	addi	r4,r2,12
    b738:	89400304 	addi	r5,r17,12
    b73c:	31800084 	addi	r6,r6,2
    b740:	318d883a 	add	r6,r6,r6
    b744:	318d883a 	add	r6,r6,r6
    b748:	1027883a 	mov	r19,r2
    b74c:	000b1e00 	call	b1e0 <memcpy>
    b750:	d9c00017 	ldw	r7,0(sp)
    b754:	88000a26 	beq	r17,zero,b780 <__multadd+0x118>
    b758:	89000117 	ldw	r4,4(r17)
    b75c:	90c01317 	ldw	r3,76(r18)
    b760:	2109883a 	add	r4,r4,r4
    b764:	2109883a 	add	r4,r4,r4
    b768:	1907883a 	add	r3,r3,r4
    b76c:	18800017 	ldw	r2,0(r3)
    b770:	88800015 	stw	r2,0(r17)
    b774:	1c400015 	stw	r17,0(r3)
    b778:	9823883a 	mov	r17,r19
    b77c:	003fd806 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>
    b780:	9823883a 	mov	r17,r19
    b784:	003fd606 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>

0000b788 <__s2b>:
    b788:	defff904 	addi	sp,sp,-28
    b78c:	dc400115 	stw	r17,4(sp)
    b790:	dc000015 	stw	r16,0(sp)
    b794:	2023883a 	mov	r17,r4
    b798:	2821883a 	mov	r16,r5
    b79c:	39000204 	addi	r4,r7,8
    b7a0:	01400244 	movi	r5,9
    b7a4:	dcc00315 	stw	r19,12(sp)
    b7a8:	dc800215 	stw	r18,8(sp)
    b7ac:	dfc00615 	stw	ra,24(sp)
    b7b0:	dd400515 	stw	r21,20(sp)
    b7b4:	dd000415 	stw	r20,16(sp)
    b7b8:	3825883a 	mov	r18,r7
    b7bc:	3027883a 	mov	r19,r6
    b7c0:	00108c40 	call	108c4 <__divsi3>
    b7c4:	00c00044 	movi	r3,1
    b7c8:	000b883a 	mov	r5,zero
    b7cc:	1880030e 	bge	r3,r2,b7dc <__s2b+0x54>
    b7d0:	18c7883a 	add	r3,r3,r3
    b7d4:	29400044 	addi	r5,r5,1
    b7d8:	18bffd16 	blt	r3,r2,b7d0 <__alt_mem_Flash_flash_data+0xf400b7d0>
    b7dc:	8809883a 	mov	r4,r17
    b7e0:	000b5980 	call	b598 <_Balloc>
    b7e4:	d8c00717 	ldw	r3,28(sp)
    b7e8:	10c00515 	stw	r3,20(r2)
    b7ec:	00c00044 	movi	r3,1
    b7f0:	10c00415 	stw	r3,16(r2)
    b7f4:	00c00244 	movi	r3,9
    b7f8:	1cc0210e 	bge	r3,r19,b880 <__s2b+0xf8>
    b7fc:	80eb883a 	add	r21,r16,r3
    b800:	a829883a 	mov	r20,r21
    b804:	84e1883a 	add	r16,r16,r19
    b808:	a1c00007 	ldb	r7,0(r20)
    b80c:	8809883a 	mov	r4,r17
    b810:	a5000044 	addi	r20,r20,1
    b814:	100b883a 	mov	r5,r2
    b818:	01800284 	movi	r6,10
    b81c:	39fff404 	addi	r7,r7,-48
    b820:	000b6680 	call	b668 <__multadd>
    b824:	a43ff81e 	bne	r20,r16,b808 <__alt_mem_Flash_flash_data+0xf400b808>
    b828:	ace1883a 	add	r16,r21,r19
    b82c:	843ffe04 	addi	r16,r16,-8
    b830:	9c800a0e 	bge	r19,r18,b85c <__s2b+0xd4>
    b834:	94e5c83a 	sub	r18,r18,r19
    b838:	84a5883a 	add	r18,r16,r18
    b83c:	81c00007 	ldb	r7,0(r16)
    b840:	8809883a 	mov	r4,r17
    b844:	84000044 	addi	r16,r16,1
    b848:	100b883a 	mov	r5,r2
    b84c:	01800284 	movi	r6,10
    b850:	39fff404 	addi	r7,r7,-48
    b854:	000b6680 	call	b668 <__multadd>
    b858:	84bff81e 	bne	r16,r18,b83c <__alt_mem_Flash_flash_data+0xf400b83c>
    b85c:	dfc00617 	ldw	ra,24(sp)
    b860:	dd400517 	ldw	r21,20(sp)
    b864:	dd000417 	ldw	r20,16(sp)
    b868:	dcc00317 	ldw	r19,12(sp)
    b86c:	dc800217 	ldw	r18,8(sp)
    b870:	dc400117 	ldw	r17,4(sp)
    b874:	dc000017 	ldw	r16,0(sp)
    b878:	dec00704 	addi	sp,sp,28
    b87c:	f800283a 	ret
    b880:	84000284 	addi	r16,r16,10
    b884:	1827883a 	mov	r19,r3
    b888:	003fe906 	br	b830 <__alt_mem_Flash_flash_data+0xf400b830>

0000b88c <__hi0bits>:
    b88c:	20bfffec 	andhi	r2,r4,65535
    b890:	1000141e 	bne	r2,zero,b8e4 <__hi0bits+0x58>
    b894:	2008943a 	slli	r4,r4,16
    b898:	00800404 	movi	r2,16
    b89c:	20ffc02c 	andhi	r3,r4,65280
    b8a0:	1800021e 	bne	r3,zero,b8ac <__hi0bits+0x20>
    b8a4:	2008923a 	slli	r4,r4,8
    b8a8:	10800204 	addi	r2,r2,8
    b8ac:	20fc002c 	andhi	r3,r4,61440
    b8b0:	1800021e 	bne	r3,zero,b8bc <__hi0bits+0x30>
    b8b4:	2008913a 	slli	r4,r4,4
    b8b8:	10800104 	addi	r2,r2,4
    b8bc:	20f0002c 	andhi	r3,r4,49152
    b8c0:	1800031e 	bne	r3,zero,b8d0 <__hi0bits+0x44>
    b8c4:	2109883a 	add	r4,r4,r4
    b8c8:	10800084 	addi	r2,r2,2
    b8cc:	2109883a 	add	r4,r4,r4
    b8d0:	20000316 	blt	r4,zero,b8e0 <__hi0bits+0x54>
    b8d4:	2110002c 	andhi	r4,r4,16384
    b8d8:	2000041e 	bne	r4,zero,b8ec <__hi0bits+0x60>
    b8dc:	00800804 	movi	r2,32
    b8e0:	f800283a 	ret
    b8e4:	0005883a 	mov	r2,zero
    b8e8:	003fec06 	br	b89c <__alt_mem_Flash_flash_data+0xf400b89c>
    b8ec:	10800044 	addi	r2,r2,1
    b8f0:	f800283a 	ret

0000b8f4 <__lo0bits>:
    b8f4:	20c00017 	ldw	r3,0(r4)
    b8f8:	188001cc 	andi	r2,r3,7
    b8fc:	10000826 	beq	r2,zero,b920 <__lo0bits+0x2c>
    b900:	1880004c 	andi	r2,r3,1
    b904:	1000211e 	bne	r2,zero,b98c <__lo0bits+0x98>
    b908:	1880008c 	andi	r2,r3,2
    b90c:	1000211e 	bne	r2,zero,b994 <__lo0bits+0xa0>
    b910:	1806d0ba 	srli	r3,r3,2
    b914:	00800084 	movi	r2,2
    b918:	20c00015 	stw	r3,0(r4)
    b91c:	f800283a 	ret
    b920:	18bfffcc 	andi	r2,r3,65535
    b924:	10001326 	beq	r2,zero,b974 <__lo0bits+0x80>
    b928:	0005883a 	mov	r2,zero
    b92c:	19403fcc 	andi	r5,r3,255
    b930:	2800021e 	bne	r5,zero,b93c <__lo0bits+0x48>
    b934:	1806d23a 	srli	r3,r3,8
    b938:	10800204 	addi	r2,r2,8
    b93c:	194003cc 	andi	r5,r3,15
    b940:	2800021e 	bne	r5,zero,b94c <__lo0bits+0x58>
    b944:	1806d13a 	srli	r3,r3,4
    b948:	10800104 	addi	r2,r2,4
    b94c:	194000cc 	andi	r5,r3,3
    b950:	2800021e 	bne	r5,zero,b95c <__lo0bits+0x68>
    b954:	1806d0ba 	srli	r3,r3,2
    b958:	10800084 	addi	r2,r2,2
    b95c:	1940004c 	andi	r5,r3,1
    b960:	2800081e 	bne	r5,zero,b984 <__lo0bits+0x90>
    b964:	1806d07a 	srli	r3,r3,1
    b968:	1800051e 	bne	r3,zero,b980 <__lo0bits+0x8c>
    b96c:	00800804 	movi	r2,32
    b970:	f800283a 	ret
    b974:	1806d43a 	srli	r3,r3,16
    b978:	00800404 	movi	r2,16
    b97c:	003feb06 	br	b92c <__alt_mem_Flash_flash_data+0xf400b92c>
    b980:	10800044 	addi	r2,r2,1
    b984:	20c00015 	stw	r3,0(r4)
    b988:	f800283a 	ret
    b98c:	0005883a 	mov	r2,zero
    b990:	f800283a 	ret
    b994:	1806d07a 	srli	r3,r3,1
    b998:	00800044 	movi	r2,1
    b99c:	20c00015 	stw	r3,0(r4)
    b9a0:	f800283a 	ret

0000b9a4 <__i2b>:
    b9a4:	defffd04 	addi	sp,sp,-12
    b9a8:	dc000015 	stw	r16,0(sp)
    b9ac:	04000044 	movi	r16,1
    b9b0:	dc400115 	stw	r17,4(sp)
    b9b4:	2823883a 	mov	r17,r5
    b9b8:	800b883a 	mov	r5,r16
    b9bc:	dfc00215 	stw	ra,8(sp)
    b9c0:	000b5980 	call	b598 <_Balloc>
    b9c4:	14400515 	stw	r17,20(r2)
    b9c8:	14000415 	stw	r16,16(r2)
    b9cc:	dfc00217 	ldw	ra,8(sp)
    b9d0:	dc400117 	ldw	r17,4(sp)
    b9d4:	dc000017 	ldw	r16,0(sp)
    b9d8:	dec00304 	addi	sp,sp,12
    b9dc:	f800283a 	ret

0000b9e0 <__multiply>:
    b9e0:	defffa04 	addi	sp,sp,-24
    b9e4:	dcc00315 	stw	r19,12(sp)
    b9e8:	dc800215 	stw	r18,8(sp)
    b9ec:	2cc00417 	ldw	r19,16(r5)
    b9f0:	34800417 	ldw	r18,16(r6)
    b9f4:	dd000415 	stw	r20,16(sp)
    b9f8:	dc400115 	stw	r17,4(sp)
    b9fc:	dfc00515 	stw	ra,20(sp)
    ba00:	dc000015 	stw	r16,0(sp)
    ba04:	2829883a 	mov	r20,r5
    ba08:	3023883a 	mov	r17,r6
    ba0c:	9c807016 	blt	r19,r18,bbd0 <__multiply+0x1f0>
    ba10:	9005883a 	mov	r2,r18
    ba14:	9825883a 	mov	r18,r19
    ba18:	1027883a 	mov	r19,r2
    ba1c:	a0800217 	ldw	r2,8(r20)
    ba20:	94e1883a 	add	r16,r18,r19
    ba24:	a1400117 	ldw	r5,4(r20)
    ba28:	1400010e 	bge	r2,r16,ba30 <__multiply+0x50>
    ba2c:	29400044 	addi	r5,r5,1
    ba30:	000b5980 	call	b598 <_Balloc>
    ba34:	8417883a 	add	r11,r16,r16
    ba38:	13000504 	addi	r12,r2,20
    ba3c:	5ad7883a 	add	r11,r11,r11
    ba40:	62d7883a 	add	r11,r12,r11
    ba44:	6007883a 	mov	r3,r12
    ba48:	62c0032e 	bgeu	r12,r11,ba58 <__multiply+0x78>
    ba4c:	18000015 	stw	zero,0(r3)
    ba50:	18c00104 	addi	r3,r3,4
    ba54:	1afffd36 	bltu	r3,r11,ba4c <__alt_mem_Flash_flash_data+0xf400ba4c>
    ba58:	9ce7883a 	add	r19,r19,r19
    ba5c:	94a5883a 	add	r18,r18,r18
    ba60:	89800504 	addi	r6,r17,20
    ba64:	9ce7883a 	add	r19,r19,r19
    ba68:	a3800504 	addi	r14,r20,20
    ba6c:	94a5883a 	add	r18,r18,r18
    ba70:	34db883a 	add	r13,r6,r19
    ba74:	7495883a 	add	r10,r14,r18
    ba78:	3340422e 	bgeu	r6,r13,bb84 <__multiply+0x1a4>
    ba7c:	34400017 	ldw	r17,0(r6)
    ba80:	8cbfffcc 	andi	r18,r17,65535
    ba84:	90001b26 	beq	r18,zero,baf4 <__multiply+0x114>
    ba88:	6013883a 	mov	r9,r12
    ba8c:	7023883a 	mov	r17,r14
    ba90:	0011883a 	mov	r8,zero
    ba94:	88c00017 	ldw	r3,0(r17)
    ba98:	4bc00017 	ldw	r15,0(r9)
    ba9c:	8c400104 	addi	r17,r17,4
    baa0:	19ffffcc 	andi	r7,r3,65535
    baa4:	3c8f383a 	mul	r7,r7,r18
    baa8:	1808d43a 	srli	r4,r3,16
    baac:	797fffcc 	andi	r5,r15,65535
    bab0:	29cb883a 	add	r5,r5,r7
    bab4:	2a0b883a 	add	r5,r5,r8
    bab8:	2489383a 	mul	r4,r4,r18
    babc:	7806d43a 	srli	r3,r15,16
    bac0:	2810d43a 	srli	r8,r5,16
    bac4:	297fffcc 	andi	r5,r5,65535
    bac8:	1907883a 	add	r3,r3,r4
    bacc:	1a07883a 	add	r3,r3,r8
    bad0:	1808943a 	slli	r4,r3,16
    bad4:	480f883a 	mov	r7,r9
    bad8:	1810d43a 	srli	r8,r3,16
    badc:	214ab03a 	or	r5,r4,r5
    bae0:	49400015 	stw	r5,0(r9)
    bae4:	4a400104 	addi	r9,r9,4
    bae8:	8abfea36 	bltu	r17,r10,ba94 <__alt_mem_Flash_flash_data+0xf400ba94>
    baec:	3a000115 	stw	r8,4(r7)
    baf0:	34400017 	ldw	r17,0(r6)
    baf4:	8822d43a 	srli	r17,r17,16
    baf8:	88001f26 	beq	r17,zero,bb78 <__multiply+0x198>
    bafc:	60c00017 	ldw	r3,0(r12)
    bb00:	7013883a 	mov	r9,r14
    bb04:	601f883a 	mov	r15,r12
    bb08:	1811883a 	mov	r8,r3
    bb0c:	6027883a 	mov	r19,r12
    bb10:	000f883a 	mov	r7,zero
    bb14:	00000106 	br	bb1c <__multiply+0x13c>
    bb18:	9027883a 	mov	r19,r18
    bb1c:	4940000b 	ldhu	r5,0(r9)
    bb20:	4010d43a 	srli	r8,r8,16
    bb24:	193fffcc 	andi	r4,r3,65535
    bb28:	2c4b383a 	mul	r5,r5,r17
    bb2c:	7bc00104 	addi	r15,r15,4
    bb30:	4a400104 	addi	r9,r9,4
    bb34:	2a0b883a 	add	r5,r5,r8
    bb38:	29cb883a 	add	r5,r5,r7
    bb3c:	2806943a 	slli	r3,r5,16
    bb40:	9c800104 	addi	r18,r19,4
    bb44:	280ad43a 	srli	r5,r5,16
    bb48:	1908b03a 	or	r4,r3,r4
    bb4c:	793fff15 	stw	r4,-4(r15)
    bb50:	48ffff17 	ldw	r3,-4(r9)
    bb54:	92000017 	ldw	r8,0(r18)
    bb58:	1806d43a 	srli	r3,r3,16
    bb5c:	413fffcc 	andi	r4,r8,65535
    bb60:	1c47383a 	mul	r3,r3,r17
    bb64:	1907883a 	add	r3,r3,r4
    bb68:	1947883a 	add	r3,r3,r5
    bb6c:	180ed43a 	srli	r7,r3,16
    bb70:	4abfe936 	bltu	r9,r10,bb18 <__alt_mem_Flash_flash_data+0xf400bb18>
    bb74:	98c00115 	stw	r3,4(r19)
    bb78:	31800104 	addi	r6,r6,4
    bb7c:	63000104 	addi	r12,r12,4
    bb80:	337fbe36 	bltu	r6,r13,ba7c <__alt_mem_Flash_flash_data+0xf400ba7c>
    bb84:	0400090e 	bge	zero,r16,bbac <__multiply+0x1cc>
    bb88:	58ffff17 	ldw	r3,-4(r11)
    bb8c:	5affff04 	addi	r11,r11,-4
    bb90:	18000326 	beq	r3,zero,bba0 <__multiply+0x1c0>
    bb94:	00000506 	br	bbac <__multiply+0x1cc>
    bb98:	58c00017 	ldw	r3,0(r11)
    bb9c:	1800031e 	bne	r3,zero,bbac <__multiply+0x1cc>
    bba0:	843fffc4 	addi	r16,r16,-1
    bba4:	5affff04 	addi	r11,r11,-4
    bba8:	803ffb1e 	bne	r16,zero,bb98 <__alt_mem_Flash_flash_data+0xf400bb98>
    bbac:	14000415 	stw	r16,16(r2)
    bbb0:	dfc00517 	ldw	ra,20(sp)
    bbb4:	dd000417 	ldw	r20,16(sp)
    bbb8:	dcc00317 	ldw	r19,12(sp)
    bbbc:	dc800217 	ldw	r18,8(sp)
    bbc0:	dc400117 	ldw	r17,4(sp)
    bbc4:	dc000017 	ldw	r16,0(sp)
    bbc8:	dec00604 	addi	sp,sp,24
    bbcc:	f800283a 	ret
    bbd0:	3029883a 	mov	r20,r6
    bbd4:	2823883a 	mov	r17,r5
    bbd8:	003f9006 	br	ba1c <__alt_mem_Flash_flash_data+0xf400ba1c>

0000bbdc <__pow5mult>:
    bbdc:	defffa04 	addi	sp,sp,-24
    bbe0:	dcc00315 	stw	r19,12(sp)
    bbe4:	dc800215 	stw	r18,8(sp)
    bbe8:	dc000015 	stw	r16,0(sp)
    bbec:	dfc00515 	stw	ra,20(sp)
    bbf0:	dd000415 	stw	r20,16(sp)
    bbf4:	dc400115 	stw	r17,4(sp)
    bbf8:	308000cc 	andi	r2,r6,3
    bbfc:	3021883a 	mov	r16,r6
    bc00:	2027883a 	mov	r19,r4
    bc04:	2825883a 	mov	r18,r5
    bc08:	10002e1e 	bne	r2,zero,bcc4 <__pow5mult+0xe8>
    bc0c:	8021d0ba 	srai	r16,r16,2
    bc10:	80001a26 	beq	r16,zero,bc7c <__pow5mult+0xa0>
    bc14:	9c401217 	ldw	r17,72(r19)
    bc18:	8800061e 	bne	r17,zero,bc34 <__pow5mult+0x58>
    bc1c:	00003406 	br	bcf0 <__pow5mult+0x114>
    bc20:	8021d07a 	srai	r16,r16,1
    bc24:	80001526 	beq	r16,zero,bc7c <__pow5mult+0xa0>
    bc28:	88800017 	ldw	r2,0(r17)
    bc2c:	10001c26 	beq	r2,zero,bca0 <__pow5mult+0xc4>
    bc30:	1023883a 	mov	r17,r2
    bc34:	80c0004c 	andi	r3,r16,1
    bc38:	183ff926 	beq	r3,zero,bc20 <__alt_mem_Flash_flash_data+0xf400bc20>
    bc3c:	900b883a 	mov	r5,r18
    bc40:	880d883a 	mov	r6,r17
    bc44:	9809883a 	mov	r4,r19
    bc48:	000b9e00 	call	b9e0 <__multiply>
    bc4c:	90001b26 	beq	r18,zero,bcbc <__pow5mult+0xe0>
    bc50:	91c00117 	ldw	r7,4(r18)
    bc54:	98c01317 	ldw	r3,76(r19)
    bc58:	8021d07a 	srai	r16,r16,1
    bc5c:	39cf883a 	add	r7,r7,r7
    bc60:	39cf883a 	add	r7,r7,r7
    bc64:	19c7883a 	add	r3,r3,r7
    bc68:	19000017 	ldw	r4,0(r3)
    bc6c:	91000015 	stw	r4,0(r18)
    bc70:	1c800015 	stw	r18,0(r3)
    bc74:	1025883a 	mov	r18,r2
    bc78:	803feb1e 	bne	r16,zero,bc28 <__alt_mem_Flash_flash_data+0xf400bc28>
    bc7c:	9005883a 	mov	r2,r18
    bc80:	dfc00517 	ldw	ra,20(sp)
    bc84:	dd000417 	ldw	r20,16(sp)
    bc88:	dcc00317 	ldw	r19,12(sp)
    bc8c:	dc800217 	ldw	r18,8(sp)
    bc90:	dc400117 	ldw	r17,4(sp)
    bc94:	dc000017 	ldw	r16,0(sp)
    bc98:	dec00604 	addi	sp,sp,24
    bc9c:	f800283a 	ret
    bca0:	9809883a 	mov	r4,r19
    bca4:	880b883a 	mov	r5,r17
    bca8:	880d883a 	mov	r6,r17
    bcac:	000b9e00 	call	b9e0 <__multiply>
    bcb0:	88800015 	stw	r2,0(r17)
    bcb4:	10000015 	stw	zero,0(r2)
    bcb8:	003fdd06 	br	bc30 <__alt_mem_Flash_flash_data+0xf400bc30>
    bcbc:	1025883a 	mov	r18,r2
    bcc0:	003fd706 	br	bc20 <__alt_mem_Flash_flash_data+0xf400bc20>
    bcc4:	10bfffc4 	addi	r2,r2,-1
    bcc8:	1085883a 	add	r2,r2,r2
    bccc:	00c000b4 	movhi	r3,2
    bcd0:	18c24e04 	addi	r3,r3,2360
    bcd4:	1085883a 	add	r2,r2,r2
    bcd8:	1885883a 	add	r2,r3,r2
    bcdc:	11800017 	ldw	r6,0(r2)
    bce0:	000f883a 	mov	r7,zero
    bce4:	000b6680 	call	b668 <__multadd>
    bce8:	1025883a 	mov	r18,r2
    bcec:	003fc706 	br	bc0c <__alt_mem_Flash_flash_data+0xf400bc0c>
    bcf0:	05000044 	movi	r20,1
    bcf4:	9809883a 	mov	r4,r19
    bcf8:	a00b883a 	mov	r5,r20
    bcfc:	000b5980 	call	b598 <_Balloc>
    bd00:	1023883a 	mov	r17,r2
    bd04:	00809c44 	movi	r2,625
    bd08:	88800515 	stw	r2,20(r17)
    bd0c:	8d000415 	stw	r20,16(r17)
    bd10:	9c401215 	stw	r17,72(r19)
    bd14:	88000015 	stw	zero,0(r17)
    bd18:	003fc606 	br	bc34 <__alt_mem_Flash_flash_data+0xf400bc34>

0000bd1c <__lshift>:
    bd1c:	defff904 	addi	sp,sp,-28
    bd20:	dd000415 	stw	r20,16(sp)
    bd24:	dcc00315 	stw	r19,12(sp)
    bd28:	3029d17a 	srai	r20,r6,5
    bd2c:	2cc00417 	ldw	r19,16(r5)
    bd30:	28800217 	ldw	r2,8(r5)
    bd34:	dd400515 	stw	r21,20(sp)
    bd38:	a4e7883a 	add	r19,r20,r19
    bd3c:	dc800215 	stw	r18,8(sp)
    bd40:	dc400115 	stw	r17,4(sp)
    bd44:	dc000015 	stw	r16,0(sp)
    bd48:	dfc00615 	stw	ra,24(sp)
    bd4c:	9c000044 	addi	r16,r19,1
    bd50:	2823883a 	mov	r17,r5
    bd54:	302b883a 	mov	r21,r6
    bd58:	2025883a 	mov	r18,r4
    bd5c:	29400117 	ldw	r5,4(r5)
    bd60:	1400030e 	bge	r2,r16,bd70 <__lshift+0x54>
    bd64:	1085883a 	add	r2,r2,r2
    bd68:	29400044 	addi	r5,r5,1
    bd6c:	143ffd16 	blt	r2,r16,bd64 <__alt_mem_Flash_flash_data+0xf400bd64>
    bd70:	9009883a 	mov	r4,r18
    bd74:	000b5980 	call	b598 <_Balloc>
    bd78:	11c00504 	addi	r7,r2,20
    bd7c:	0500090e 	bge	zero,r20,bda4 <__lshift+0x88>
    bd80:	3811883a 	mov	r8,r7
    bd84:	0007883a 	mov	r3,zero
    bd88:	40000015 	stw	zero,0(r8)
    bd8c:	18c00044 	addi	r3,r3,1
    bd90:	42000104 	addi	r8,r8,4
    bd94:	1d3ffc1e 	bne	r3,r20,bd88 <__alt_mem_Flash_flash_data+0xf400bd88>
    bd98:	18c7883a 	add	r3,r3,r3
    bd9c:	18c7883a 	add	r3,r3,r3
    bda0:	38cf883a 	add	r7,r7,r3
    bda4:	89000417 	ldw	r4,16(r17)
    bda8:	88c00504 	addi	r3,r17,20
    bdac:	a98007cc 	andi	r6,r21,31
    bdb0:	2109883a 	add	r4,r4,r4
    bdb4:	2109883a 	add	r4,r4,r4
    bdb8:	1909883a 	add	r4,r3,r4
    bdbc:	30002326 	beq	r6,zero,be4c <__lshift+0x130>
    bdc0:	01400804 	movi	r5,32
    bdc4:	298bc83a 	sub	r5,r5,r6
    bdc8:	0013883a 	mov	r9,zero
    bdcc:	1a000017 	ldw	r8,0(r3)
    bdd0:	3815883a 	mov	r10,r7
    bdd4:	39c00104 	addi	r7,r7,4
    bdd8:	4190983a 	sll	r8,r8,r6
    bddc:	18c00104 	addi	r3,r3,4
    bde0:	4a10b03a 	or	r8,r9,r8
    bde4:	3a3fff15 	stw	r8,-4(r7)
    bde8:	1a3fff17 	ldw	r8,-4(r3)
    bdec:	4152d83a 	srl	r9,r8,r5
    bdf0:	193ff636 	bltu	r3,r4,bdcc <__alt_mem_Flash_flash_data+0xf400bdcc>
    bdf4:	52400115 	stw	r9,4(r10)
    bdf8:	48001a1e 	bne	r9,zero,be64 <__lshift+0x148>
    bdfc:	843fffc4 	addi	r16,r16,-1
    be00:	14000415 	stw	r16,16(r2)
    be04:	88000826 	beq	r17,zero,be28 <__lshift+0x10c>
    be08:	89000117 	ldw	r4,4(r17)
    be0c:	90c01317 	ldw	r3,76(r18)
    be10:	2109883a 	add	r4,r4,r4
    be14:	2109883a 	add	r4,r4,r4
    be18:	1907883a 	add	r3,r3,r4
    be1c:	19000017 	ldw	r4,0(r3)
    be20:	89000015 	stw	r4,0(r17)
    be24:	1c400015 	stw	r17,0(r3)
    be28:	dfc00617 	ldw	ra,24(sp)
    be2c:	dd400517 	ldw	r21,20(sp)
    be30:	dd000417 	ldw	r20,16(sp)
    be34:	dcc00317 	ldw	r19,12(sp)
    be38:	dc800217 	ldw	r18,8(sp)
    be3c:	dc400117 	ldw	r17,4(sp)
    be40:	dc000017 	ldw	r16,0(sp)
    be44:	dec00704 	addi	sp,sp,28
    be48:	f800283a 	ret
    be4c:	19400017 	ldw	r5,0(r3)
    be50:	39c00104 	addi	r7,r7,4
    be54:	18c00104 	addi	r3,r3,4
    be58:	397fff15 	stw	r5,-4(r7)
    be5c:	193ffb36 	bltu	r3,r4,be4c <__alt_mem_Flash_flash_data+0xf400be4c>
    be60:	003fe606 	br	bdfc <__alt_mem_Flash_flash_data+0xf400bdfc>
    be64:	9c000084 	addi	r16,r19,2
    be68:	003fe406 	br	bdfc <__alt_mem_Flash_flash_data+0xf400bdfc>

0000be6c <__mcmp>:
    be6c:	20800417 	ldw	r2,16(r4)
    be70:	28c00417 	ldw	r3,16(r5)
    be74:	10c5c83a 	sub	r2,r2,r3
    be78:	1000111e 	bne	r2,zero,bec0 <__mcmp+0x54>
    be7c:	18c7883a 	add	r3,r3,r3
    be80:	18c7883a 	add	r3,r3,r3
    be84:	21000504 	addi	r4,r4,20
    be88:	29400504 	addi	r5,r5,20
    be8c:	20c5883a 	add	r2,r4,r3
    be90:	28cb883a 	add	r5,r5,r3
    be94:	00000106 	br	be9c <__mcmp+0x30>
    be98:	20800a2e 	bgeu	r4,r2,bec4 <__mcmp+0x58>
    be9c:	10bfff04 	addi	r2,r2,-4
    bea0:	297fff04 	addi	r5,r5,-4
    bea4:	11800017 	ldw	r6,0(r2)
    bea8:	28c00017 	ldw	r3,0(r5)
    beac:	30fffa26 	beq	r6,r3,be98 <__alt_mem_Flash_flash_data+0xf400be98>
    beb0:	30c00236 	bltu	r6,r3,bebc <__mcmp+0x50>
    beb4:	00800044 	movi	r2,1
    beb8:	f800283a 	ret
    bebc:	00bfffc4 	movi	r2,-1
    bec0:	f800283a 	ret
    bec4:	0005883a 	mov	r2,zero
    bec8:	f800283a 	ret

0000becc <__mdiff>:
    becc:	defffb04 	addi	sp,sp,-20
    bed0:	dc000015 	stw	r16,0(sp)
    bed4:	2821883a 	mov	r16,r5
    bed8:	dcc00315 	stw	r19,12(sp)
    bedc:	300b883a 	mov	r5,r6
    bee0:	2027883a 	mov	r19,r4
    bee4:	8009883a 	mov	r4,r16
    bee8:	dc800215 	stw	r18,8(sp)
    beec:	dfc00415 	stw	ra,16(sp)
    bef0:	dc400115 	stw	r17,4(sp)
    bef4:	3025883a 	mov	r18,r6
    bef8:	000be6c0 	call	be6c <__mcmp>
    befc:	10005226 	beq	r2,zero,c048 <__mdiff+0x17c>
    bf00:	10004c16 	blt	r2,zero,c034 <__mdiff+0x168>
    bf04:	0023883a 	mov	r17,zero
    bf08:	81400117 	ldw	r5,4(r16)
    bf0c:	9809883a 	mov	r4,r19
    bf10:	000b5980 	call	b598 <_Balloc>
    bf14:	83400417 	ldw	r13,16(r16)
    bf18:	93800417 	ldw	r14,16(r18)
    bf1c:	81000504 	addi	r4,r16,20
    bf20:	6b59883a 	add	r12,r13,r13
    bf24:	739d883a 	add	r14,r14,r14
    bf28:	6319883a 	add	r12,r12,r12
    bf2c:	91800504 	addi	r6,r18,20
    bf30:	739d883a 	add	r14,r14,r14
    bf34:	14400315 	stw	r17,12(r2)
    bf38:	2319883a 	add	r12,r4,r12
    bf3c:	339d883a 	add	r14,r6,r14
    bf40:	12400504 	addi	r9,r2,20
    bf44:	0007883a 	mov	r3,zero
    bf48:	22000017 	ldw	r8,0(r4)
    bf4c:	32800017 	ldw	r10,0(r6)
    bf50:	4ac00104 	addi	r11,r9,4
    bf54:	41ffffcc 	andi	r7,r8,65535
    bf58:	38c7883a 	add	r3,r7,r3
    bf5c:	51ffffcc 	andi	r7,r10,65535
    bf60:	19cfc83a 	sub	r7,r3,r7
    bf64:	4010d43a 	srli	r8,r8,16
    bf68:	5014d43a 	srli	r10,r10,16
    bf6c:	3807d43a 	srai	r3,r7,16
    bf70:	39ffffcc 	andi	r7,r7,65535
    bf74:	4291c83a 	sub	r8,r8,r10
    bf78:	40c7883a 	add	r3,r8,r3
    bf7c:	1810943a 	slli	r8,r3,16
    bf80:	31800104 	addi	r6,r6,4
    bf84:	21000104 	addi	r4,r4,4
    bf88:	41ceb03a 	or	r7,r8,r7
    bf8c:	49c00015 	stw	r7,0(r9)
    bf90:	1807d43a 	srai	r3,r3,16
    bf94:	580b883a 	mov	r5,r11
    bf98:	5813883a 	mov	r9,r11
    bf9c:	33bfea36 	bltu	r6,r14,bf48 <__alt_mem_Flash_flash_data+0xf400bf48>
    bfa0:	2011883a 	mov	r8,r4
    bfa4:	2300152e 	bgeu	r4,r12,bffc <__mdiff+0x130>
    bfa8:	21400017 	ldw	r5,0(r4)
    bfac:	4a400104 	addi	r9,r9,4
    bfb0:	21000104 	addi	r4,r4,4
    bfb4:	29ffffcc 	andi	r7,r5,65535
    bfb8:	38c7883a 	add	r3,r7,r3
    bfbc:	280ad43a 	srli	r5,r5,16
    bfc0:	180dd43a 	srai	r6,r3,16
    bfc4:	19ffffcc 	andi	r7,r3,65535
    bfc8:	3147883a 	add	r3,r6,r5
    bfcc:	180a943a 	slli	r5,r3,16
    bfd0:	1807d43a 	srai	r3,r3,16
    bfd4:	29ceb03a 	or	r7,r5,r7
    bfd8:	49ffff15 	stw	r7,-4(r9)
    bfdc:	233ff236 	bltu	r4,r12,bfa8 <__alt_mem_Flash_flash_data+0xf400bfa8>
    bfe0:	0206303a 	nor	r3,zero,r8
    bfe4:	1b07883a 	add	r3,r3,r12
    bfe8:	1806d0ba 	srli	r3,r3,2
    bfec:	18c00044 	addi	r3,r3,1
    bff0:	18c7883a 	add	r3,r3,r3
    bff4:	18c7883a 	add	r3,r3,r3
    bff8:	58cb883a 	add	r5,r11,r3
    bffc:	28ffff04 	addi	r3,r5,-4
    c000:	3800041e 	bne	r7,zero,c014 <__mdiff+0x148>
    c004:	18ffff04 	addi	r3,r3,-4
    c008:	19000017 	ldw	r4,0(r3)
    c00c:	6b7fffc4 	addi	r13,r13,-1
    c010:	203ffc26 	beq	r4,zero,c004 <__alt_mem_Flash_flash_data+0xf400c004>
    c014:	13400415 	stw	r13,16(r2)
    c018:	dfc00417 	ldw	ra,16(sp)
    c01c:	dcc00317 	ldw	r19,12(sp)
    c020:	dc800217 	ldw	r18,8(sp)
    c024:	dc400117 	ldw	r17,4(sp)
    c028:	dc000017 	ldw	r16,0(sp)
    c02c:	dec00504 	addi	sp,sp,20
    c030:	f800283a 	ret
    c034:	8005883a 	mov	r2,r16
    c038:	04400044 	movi	r17,1
    c03c:	9021883a 	mov	r16,r18
    c040:	1025883a 	mov	r18,r2
    c044:	003fb006 	br	bf08 <__alt_mem_Flash_flash_data+0xf400bf08>
    c048:	9809883a 	mov	r4,r19
    c04c:	000b883a 	mov	r5,zero
    c050:	000b5980 	call	b598 <_Balloc>
    c054:	00c00044 	movi	r3,1
    c058:	10c00415 	stw	r3,16(r2)
    c05c:	10000515 	stw	zero,20(r2)
    c060:	003fed06 	br	c018 <__alt_mem_Flash_flash_data+0xf400c018>

0000c064 <__ulp>:
    c064:	295ffc2c 	andhi	r5,r5,32752
    c068:	00bf3034 	movhi	r2,64704
    c06c:	2887883a 	add	r3,r5,r2
    c070:	00c0020e 	bge	zero,r3,c07c <__ulp+0x18>
    c074:	0005883a 	mov	r2,zero
    c078:	f800283a 	ret
    c07c:	00c7c83a 	sub	r3,zero,r3
    c080:	180bd53a 	srai	r5,r3,20
    c084:	008004c4 	movi	r2,19
    c088:	11400a0e 	bge	r2,r5,c0b4 <__ulp+0x50>
    c08c:	00800c84 	movi	r2,50
    c090:	0007883a 	mov	r3,zero
    c094:	11400516 	blt	r2,r5,c0ac <__ulp+0x48>
    c098:	00800cc4 	movi	r2,51
    c09c:	114bc83a 	sub	r5,r2,r5
    c0a0:	00800044 	movi	r2,1
    c0a4:	1144983a 	sll	r2,r2,r5
    c0a8:	f800283a 	ret
    c0ac:	00800044 	movi	r2,1
    c0b0:	f800283a 	ret
    c0b4:	00800234 	movhi	r2,8
    c0b8:	1147d83a 	sra	r3,r2,r5
    c0bc:	0005883a 	mov	r2,zero
    c0c0:	f800283a 	ret

0000c0c4 <__b2d>:
    c0c4:	defffa04 	addi	sp,sp,-24
    c0c8:	dc000015 	stw	r16,0(sp)
    c0cc:	24000417 	ldw	r16,16(r4)
    c0d0:	dc400115 	stw	r17,4(sp)
    c0d4:	24400504 	addi	r17,r4,20
    c0d8:	8421883a 	add	r16,r16,r16
    c0dc:	8421883a 	add	r16,r16,r16
    c0e0:	8c21883a 	add	r16,r17,r16
    c0e4:	dc800215 	stw	r18,8(sp)
    c0e8:	84bfff17 	ldw	r18,-4(r16)
    c0ec:	dd000415 	stw	r20,16(sp)
    c0f0:	dcc00315 	stw	r19,12(sp)
    c0f4:	9009883a 	mov	r4,r18
    c0f8:	2829883a 	mov	r20,r5
    c0fc:	dfc00515 	stw	ra,20(sp)
    c100:	000b88c0 	call	b88c <__hi0bits>
    c104:	00c00804 	movi	r3,32
    c108:	1887c83a 	sub	r3,r3,r2
    c10c:	a0c00015 	stw	r3,0(r20)
    c110:	00c00284 	movi	r3,10
    c114:	84ffff04 	addi	r19,r16,-4
    c118:	18801216 	blt	r3,r2,c164 <__b2d+0xa0>
    c11c:	014002c4 	movi	r5,11
    c120:	2889c83a 	sub	r4,r5,r2
    c124:	9106d83a 	srl	r3,r18,r4
    c128:	18cffc34 	orhi	r3,r3,16368
    c12c:	8cc0282e 	bgeu	r17,r19,c1d0 <__b2d+0x10c>
    c130:	817ffe17 	ldw	r5,-8(r16)
    c134:	290ad83a 	srl	r5,r5,r4
    c138:	10800544 	addi	r2,r2,21
    c13c:	9084983a 	sll	r2,r18,r2
    c140:	2884b03a 	or	r2,r5,r2
    c144:	dfc00517 	ldw	ra,20(sp)
    c148:	dd000417 	ldw	r20,16(sp)
    c14c:	dcc00317 	ldw	r19,12(sp)
    c150:	dc800217 	ldw	r18,8(sp)
    c154:	dc400117 	ldw	r17,4(sp)
    c158:	dc000017 	ldw	r16,0(sp)
    c15c:	dec00604 	addi	sp,sp,24
    c160:	f800283a 	ret
    c164:	113ffd44 	addi	r4,r2,-11
    c168:	8cc00f2e 	bgeu	r17,r19,c1a8 <__b2d+0xe4>
    c16c:	81bffe04 	addi	r6,r16,-8
    c170:	817ffe17 	ldw	r5,-8(r16)
    c174:	20001326 	beq	r4,zero,c1c4 <__b2d+0x100>
    c178:	00c00ac4 	movi	r3,43
    c17c:	1885c83a 	sub	r2,r3,r2
    c180:	2886d83a 	srl	r3,r5,r2
    c184:	9124983a 	sll	r18,r18,r4
    c188:	90e4b03a 	or	r18,r18,r3
    c18c:	90cffc34 	orhi	r3,r18,16368
    c190:	8980112e 	bgeu	r17,r6,c1d8 <__b2d+0x114>
    c194:	81bffd17 	ldw	r6,-12(r16)
    c198:	308cd83a 	srl	r6,r6,r2
    c19c:	2904983a 	sll	r2,r5,r4
    c1a0:	1184b03a 	or	r2,r2,r6
    c1a4:	003fe706 	br	c144 <__alt_mem_Flash_flash_data+0xf400c144>
    c1a8:	20000526 	beq	r4,zero,c1c0 <__b2d+0xfc>
    c1ac:	9124983a 	sll	r18,r18,r4
    c1b0:	000d883a 	mov	r6,zero
    c1b4:	000b883a 	mov	r5,zero
    c1b8:	90cffc34 	orhi	r3,r18,16368
    c1bc:	003ff706 	br	c19c <__alt_mem_Flash_flash_data+0xf400c19c>
    c1c0:	000b883a 	mov	r5,zero
    c1c4:	90cffc34 	orhi	r3,r18,16368
    c1c8:	2805883a 	mov	r2,r5
    c1cc:	003fdd06 	br	c144 <__alt_mem_Flash_flash_data+0xf400c144>
    c1d0:	000b883a 	mov	r5,zero
    c1d4:	003fd806 	br	c138 <__alt_mem_Flash_flash_data+0xf400c138>
    c1d8:	000d883a 	mov	r6,zero
    c1dc:	003fef06 	br	c19c <__alt_mem_Flash_flash_data+0xf400c19c>

0000c1e0 <__d2b>:
    c1e0:	defff704 	addi	sp,sp,-36
    c1e4:	dc000215 	stw	r16,8(sp)
    c1e8:	3021883a 	mov	r16,r6
    c1ec:	dc400315 	stw	r17,12(sp)
    c1f0:	8022907a 	slli	r17,r16,1
    c1f4:	dd400715 	stw	r21,28(sp)
    c1f8:	282b883a 	mov	r21,r5
    c1fc:	01400044 	movi	r5,1
    c200:	dd000615 	stw	r20,24(sp)
    c204:	dcc00515 	stw	r19,20(sp)
    c208:	dc800415 	stw	r18,16(sp)
    c20c:	dfc00815 	stw	ra,32(sp)
    c210:	3829883a 	mov	r20,r7
    c214:	dc800917 	ldw	r18,36(sp)
    c218:	8822d57a 	srli	r17,r17,21
    c21c:	000b5980 	call	b598 <_Balloc>
    c220:	1027883a 	mov	r19,r2
    c224:	00800434 	movhi	r2,16
    c228:	10bfffc4 	addi	r2,r2,-1
    c22c:	808c703a 	and	r6,r16,r2
    c230:	88000126 	beq	r17,zero,c238 <__d2b+0x58>
    c234:	31800434 	orhi	r6,r6,16
    c238:	d9800015 	stw	r6,0(sp)
    c23c:	a8001f26 	beq	r21,zero,c2bc <__d2b+0xdc>
    c240:	d9000104 	addi	r4,sp,4
    c244:	dd400115 	stw	r21,4(sp)
    c248:	000b8f40 	call	b8f4 <__lo0bits>
    c24c:	d8c00017 	ldw	r3,0(sp)
    c250:	1000291e 	bne	r2,zero,c2f8 <__d2b+0x118>
    c254:	d9000117 	ldw	r4,4(sp)
    c258:	99000515 	stw	r4,20(r19)
    c25c:	1820c03a 	cmpne	r16,r3,zero
    c260:	84000044 	addi	r16,r16,1
    c264:	98c00615 	stw	r3,24(r19)
    c268:	9c000415 	stw	r16,16(r19)
    c26c:	88001b1e 	bne	r17,zero,c2dc <__d2b+0xfc>
    c270:	800690ba 	slli	r3,r16,2
    c274:	10bef384 	addi	r2,r2,-1074
    c278:	a0800015 	stw	r2,0(r20)
    c27c:	98c5883a 	add	r2,r19,r3
    c280:	11000417 	ldw	r4,16(r2)
    c284:	8020917a 	slli	r16,r16,5
    c288:	000b88c0 	call	b88c <__hi0bits>
    c28c:	8085c83a 	sub	r2,r16,r2
    c290:	90800015 	stw	r2,0(r18)
    c294:	9805883a 	mov	r2,r19
    c298:	dfc00817 	ldw	ra,32(sp)
    c29c:	dd400717 	ldw	r21,28(sp)
    c2a0:	dd000617 	ldw	r20,24(sp)
    c2a4:	dcc00517 	ldw	r19,20(sp)
    c2a8:	dc800417 	ldw	r18,16(sp)
    c2ac:	dc400317 	ldw	r17,12(sp)
    c2b0:	dc000217 	ldw	r16,8(sp)
    c2b4:	dec00904 	addi	sp,sp,36
    c2b8:	f800283a 	ret
    c2bc:	d809883a 	mov	r4,sp
    c2c0:	000b8f40 	call	b8f4 <__lo0bits>
    c2c4:	d8c00017 	ldw	r3,0(sp)
    c2c8:	04000044 	movi	r16,1
    c2cc:	9c000415 	stw	r16,16(r19)
    c2d0:	98c00515 	stw	r3,20(r19)
    c2d4:	10800804 	addi	r2,r2,32
    c2d8:	883fe526 	beq	r17,zero,c270 <__alt_mem_Flash_flash_data+0xf400c270>
    c2dc:	8c7ef344 	addi	r17,r17,-1075
    c2e0:	88a3883a 	add	r17,r17,r2
    c2e4:	00c00d44 	movi	r3,53
    c2e8:	a4400015 	stw	r17,0(r20)
    c2ec:	1885c83a 	sub	r2,r3,r2
    c2f0:	90800015 	stw	r2,0(r18)
    c2f4:	003fe706 	br	c294 <__alt_mem_Flash_flash_data+0xf400c294>
    c2f8:	01000804 	movi	r4,32
    c2fc:	2089c83a 	sub	r4,r4,r2
    c300:	1908983a 	sll	r4,r3,r4
    c304:	d9400117 	ldw	r5,4(sp)
    c308:	1886d83a 	srl	r3,r3,r2
    c30c:	2148b03a 	or	r4,r4,r5
    c310:	99000515 	stw	r4,20(r19)
    c314:	d8c00015 	stw	r3,0(sp)
    c318:	003fd006 	br	c25c <__alt_mem_Flash_flash_data+0xf400c25c>

0000c31c <__ratio>:
    c31c:	defff904 	addi	sp,sp,-28
    c320:	dc400315 	stw	r17,12(sp)
    c324:	2823883a 	mov	r17,r5
    c328:	d9400104 	addi	r5,sp,4
    c32c:	dfc00615 	stw	ra,24(sp)
    c330:	dcc00515 	stw	r19,20(sp)
    c334:	dc800415 	stw	r18,16(sp)
    c338:	2027883a 	mov	r19,r4
    c33c:	dc000215 	stw	r16,8(sp)
    c340:	000c0c40 	call	c0c4 <__b2d>
    c344:	8809883a 	mov	r4,r17
    c348:	d80b883a 	mov	r5,sp
    c34c:	1025883a 	mov	r18,r2
    c350:	1821883a 	mov	r16,r3
    c354:	000c0c40 	call	c0c4 <__b2d>
    c358:	8a400417 	ldw	r9,16(r17)
    c35c:	9a000417 	ldw	r8,16(r19)
    c360:	100d883a 	mov	r6,r2
    c364:	d8800017 	ldw	r2,0(sp)
    c368:	4251c83a 	sub	r8,r8,r9
    c36c:	4012917a 	slli	r9,r8,5
    c370:	da000117 	ldw	r8,4(sp)
    c374:	4091c83a 	sub	r8,r8,r2
    c378:	4251883a 	add	r8,r8,r9
    c37c:	02000d0e 	bge	zero,r8,c3b4 <__ratio+0x98>
    c380:	4010953a 	slli	r8,r8,20
    c384:	4421883a 	add	r16,r8,r16
    c388:	9009883a 	mov	r4,r18
    c38c:	800b883a 	mov	r5,r16
    c390:	180f883a 	mov	r7,r3
    c394:	00112200 	call	11220 <__divdf3>
    c398:	dfc00617 	ldw	ra,24(sp)
    c39c:	dcc00517 	ldw	r19,20(sp)
    c3a0:	dc800417 	ldw	r18,16(sp)
    c3a4:	dc400317 	ldw	r17,12(sp)
    c3a8:	dc000217 	ldw	r16,8(sp)
    c3ac:	dec00704 	addi	sp,sp,28
    c3b0:	f800283a 	ret
    c3b4:	4010953a 	slli	r8,r8,20
    c3b8:	1a07c83a 	sub	r3,r3,r8
    c3bc:	003ff206 	br	c388 <__alt_mem_Flash_flash_data+0xf400c388>

0000c3c0 <_mprec_log10>:
    c3c0:	defffe04 	addi	sp,sp,-8
    c3c4:	dc000015 	stw	r16,0(sp)
    c3c8:	dfc00115 	stw	ra,4(sp)
    c3cc:	008005c4 	movi	r2,23
    c3d0:	2021883a 	mov	r16,r4
    c3d4:	11000d0e 	bge	r2,r4,c40c <_mprec_log10+0x4c>
    c3d8:	0005883a 	mov	r2,zero
    c3dc:	00cffc34 	movhi	r3,16368
    c3e0:	843fffc4 	addi	r16,r16,-1
    c3e4:	1009883a 	mov	r4,r2
    c3e8:	180b883a 	mov	r5,r3
    c3ec:	000d883a 	mov	r6,zero
    c3f0:	01d00934 	movhi	r7,16420
    c3f4:	0011d300 	call	11d30 <__muldf3>
    c3f8:	803ff91e 	bne	r16,zero,c3e0 <__alt_mem_Flash_flash_data+0xf400c3e0>
    c3fc:	dfc00117 	ldw	ra,4(sp)
    c400:	dc000017 	ldw	r16,0(sp)
    c404:	dec00204 	addi	sp,sp,8
    c408:	f800283a 	ret
    c40c:	202090fa 	slli	r16,r4,3
    c410:	008000b4 	movhi	r2,2
    c414:	10826504 	addi	r2,r2,2452
    c418:	1421883a 	add	r16,r2,r16
    c41c:	80800017 	ldw	r2,0(r16)
    c420:	80c00117 	ldw	r3,4(r16)
    c424:	dfc00117 	ldw	ra,4(sp)
    c428:	dc000017 	ldw	r16,0(sp)
    c42c:	dec00204 	addi	sp,sp,8
    c430:	f800283a 	ret

0000c434 <__copybits>:
    c434:	297fffc4 	addi	r5,r5,-1
    c438:	280fd17a 	srai	r7,r5,5
    c43c:	30c00417 	ldw	r3,16(r6)
    c440:	30800504 	addi	r2,r6,20
    c444:	39c00044 	addi	r7,r7,1
    c448:	18c7883a 	add	r3,r3,r3
    c44c:	39cf883a 	add	r7,r7,r7
    c450:	18c7883a 	add	r3,r3,r3
    c454:	39cf883a 	add	r7,r7,r7
    c458:	10c7883a 	add	r3,r2,r3
    c45c:	21cf883a 	add	r7,r4,r7
    c460:	10c00d2e 	bgeu	r2,r3,c498 <__copybits+0x64>
    c464:	200b883a 	mov	r5,r4
    c468:	12000017 	ldw	r8,0(r2)
    c46c:	29400104 	addi	r5,r5,4
    c470:	10800104 	addi	r2,r2,4
    c474:	2a3fff15 	stw	r8,-4(r5)
    c478:	10fffb36 	bltu	r2,r3,c468 <__alt_mem_Flash_flash_data+0xf400c468>
    c47c:	1985c83a 	sub	r2,r3,r6
    c480:	10bffac4 	addi	r2,r2,-21
    c484:	1004d0ba 	srli	r2,r2,2
    c488:	10800044 	addi	r2,r2,1
    c48c:	1085883a 	add	r2,r2,r2
    c490:	1085883a 	add	r2,r2,r2
    c494:	2089883a 	add	r4,r4,r2
    c498:	21c0032e 	bgeu	r4,r7,c4a8 <__copybits+0x74>
    c49c:	20000015 	stw	zero,0(r4)
    c4a0:	21000104 	addi	r4,r4,4
    c4a4:	21fffd36 	bltu	r4,r7,c49c <__alt_mem_Flash_flash_data+0xf400c49c>
    c4a8:	f800283a 	ret

0000c4ac <__any_on>:
    c4ac:	20c00417 	ldw	r3,16(r4)
    c4b0:	2805d17a 	srai	r2,r5,5
    c4b4:	21000504 	addi	r4,r4,20
    c4b8:	18800d0e 	bge	r3,r2,c4f0 <__any_on+0x44>
    c4bc:	18c7883a 	add	r3,r3,r3
    c4c0:	18c7883a 	add	r3,r3,r3
    c4c4:	20c7883a 	add	r3,r4,r3
    c4c8:	20c0192e 	bgeu	r4,r3,c530 <__any_on+0x84>
    c4cc:	18bfff17 	ldw	r2,-4(r3)
    c4d0:	18ffff04 	addi	r3,r3,-4
    c4d4:	1000041e 	bne	r2,zero,c4e8 <__any_on+0x3c>
    c4d8:	20c0142e 	bgeu	r4,r3,c52c <__any_on+0x80>
    c4dc:	18ffff04 	addi	r3,r3,-4
    c4e0:	19400017 	ldw	r5,0(r3)
    c4e4:	283ffc26 	beq	r5,zero,c4d8 <__alt_mem_Flash_flash_data+0xf400c4d8>
    c4e8:	00800044 	movi	r2,1
    c4ec:	f800283a 	ret
    c4f0:	10c00a0e 	bge	r2,r3,c51c <__any_on+0x70>
    c4f4:	1085883a 	add	r2,r2,r2
    c4f8:	1085883a 	add	r2,r2,r2
    c4fc:	294007cc 	andi	r5,r5,31
    c500:	2087883a 	add	r3,r4,r2
    c504:	283ff026 	beq	r5,zero,c4c8 <__alt_mem_Flash_flash_data+0xf400c4c8>
    c508:	19800017 	ldw	r6,0(r3)
    c50c:	3144d83a 	srl	r2,r6,r5
    c510:	114a983a 	sll	r5,r2,r5
    c514:	29bff41e 	bne	r5,r6,c4e8 <__alt_mem_Flash_flash_data+0xf400c4e8>
    c518:	003feb06 	br	c4c8 <__alt_mem_Flash_flash_data+0xf400c4c8>
    c51c:	1085883a 	add	r2,r2,r2
    c520:	1085883a 	add	r2,r2,r2
    c524:	2087883a 	add	r3,r4,r2
    c528:	003fe706 	br	c4c8 <__alt_mem_Flash_flash_data+0xf400c4c8>
    c52c:	f800283a 	ret
    c530:	0005883a 	mov	r2,zero
    c534:	f800283a 	ret

0000c538 <_realloc_r>:
    c538:	defff604 	addi	sp,sp,-40
    c53c:	dd000415 	stw	r20,16(sp)
    c540:	dc400115 	stw	r17,4(sp)
    c544:	dfc00915 	stw	ra,36(sp)
    c548:	df000815 	stw	fp,32(sp)
    c54c:	ddc00715 	stw	r23,28(sp)
    c550:	dd800615 	stw	r22,24(sp)
    c554:	dd400515 	stw	r21,20(sp)
    c558:	dcc00315 	stw	r19,12(sp)
    c55c:	dc800215 	stw	r18,8(sp)
    c560:	dc000015 	stw	r16,0(sp)
    c564:	2829883a 	mov	r20,r5
    c568:	3023883a 	mov	r17,r6
    c56c:	2800ad26 	beq	r5,zero,c824 <_realloc_r+0x2ec>
    c570:	2025883a 	mov	r18,r4
    c574:	0013a600 	call	13a60 <__malloc_lock>
    c578:	a0ffff17 	ldw	r3,-4(r20)
    c57c:	043fff04 	movi	r16,-4
    c580:	890002c4 	addi	r4,r17,11
    c584:	01c00584 	movi	r7,22
    c588:	a57ffe04 	addi	r21,r20,-8
    c58c:	1c20703a 	and	r16,r3,r16
    c590:	39001d2e 	bgeu	r7,r4,c608 <_realloc_r+0xd0>
    c594:	05bffe04 	movi	r22,-8
    c598:	25ac703a 	and	r22,r4,r22
    c59c:	b00f883a 	mov	r7,r22
    c5a0:	b0006516 	blt	r22,zero,c738 <_realloc_r+0x200>
    c5a4:	b4406436 	bltu	r22,r17,c738 <_realloc_r+0x200>
    c5a8:	81c01a0e 	bge	r16,r7,c614 <_realloc_r+0xdc>
    c5ac:	070000b4 	movhi	fp,2
    c5b0:	e704c904 	addi	fp,fp,4900
    c5b4:	e1400217 	ldw	r5,8(fp)
    c5b8:	ac11883a 	add	r8,r21,r16
    c5bc:	2a006226 	beq	r5,r8,c748 <_realloc_r+0x210>
    c5c0:	41800117 	ldw	r6,4(r8)
    c5c4:	027fff84 	movi	r9,-2
    c5c8:	3252703a 	and	r9,r6,r9
    c5cc:	4253883a 	add	r9,r8,r9
    c5d0:	49000117 	ldw	r4,4(r9)
    c5d4:	2100004c 	andi	r4,r4,1
    c5d8:	2000281e 	bne	r4,zero,c67c <_realloc_r+0x144>
    c5dc:	00bfff04 	movi	r2,-4
    c5e0:	3084703a 	and	r2,r6,r2
    c5e4:	1409883a 	add	r4,r2,r16
    c5e8:	21c05e16 	blt	r4,r7,c764 <_realloc_r+0x22c>
    c5ec:	40800317 	ldw	r2,12(r8)
    c5f0:	41400217 	ldw	r5,8(r8)
    c5f4:	a023883a 	mov	r17,r20
    c5f8:	2021883a 	mov	r16,r4
    c5fc:	28800315 	stw	r2,12(r5)
    c600:	11400215 	stw	r5,8(r2)
    c604:	00000406 	br	c618 <_realloc_r+0xe0>
    c608:	01c00404 	movi	r7,16
    c60c:	382d883a 	mov	r22,r7
    c610:	003fe406 	br	c5a4 <__alt_mem_Flash_flash_data+0xf400c5a4>
    c614:	a023883a 	mov	r17,r20
    c618:	858fc83a 	sub	r7,r16,r22
    c61c:	008003c4 	movi	r2,15
    c620:	18c0004c 	andi	r3,r3,1
    c624:	11c07236 	bltu	r2,r7,c7f0 <_realloc_r+0x2b8>
    c628:	1c06b03a 	or	r3,r3,r16
    c62c:	a8c00115 	stw	r3,4(r21)
    c630:	ac21883a 	add	r16,r21,r16
    c634:	80800117 	ldw	r2,4(r16)
    c638:	10800054 	ori	r2,r2,1
    c63c:	80800115 	stw	r2,4(r16)
    c640:	9009883a 	mov	r4,r18
    c644:	0013b800 	call	13b80 <__malloc_unlock>
    c648:	8805883a 	mov	r2,r17
    c64c:	dfc00917 	ldw	ra,36(sp)
    c650:	df000817 	ldw	fp,32(sp)
    c654:	ddc00717 	ldw	r23,28(sp)
    c658:	dd800617 	ldw	r22,24(sp)
    c65c:	dd400517 	ldw	r21,20(sp)
    c660:	dd000417 	ldw	r20,16(sp)
    c664:	dcc00317 	ldw	r19,12(sp)
    c668:	dc800217 	ldw	r18,8(sp)
    c66c:	dc400117 	ldw	r17,4(sp)
    c670:	dc000017 	ldw	r16,0(sp)
    c674:	dec00a04 	addi	sp,sp,40
    c678:	f800283a 	ret
    c67c:	18c0004c 	andi	r3,r3,1
    c680:	1800081e 	bne	r3,zero,c6a4 <_realloc_r+0x16c>
    c684:	a4fffe17 	ldw	r19,-8(r20)
    c688:	00bfff04 	movi	r2,-4
    c68c:	ace7c83a 	sub	r19,r21,r19
    c690:	98c00117 	ldw	r3,4(r19)
    c694:	1886703a 	and	r3,r3,r2
    c698:	98000226 	beq	r19,zero,c6a4 <_realloc_r+0x16c>
    c69c:	1c2f883a 	add	r23,r3,r16
    c6a0:	b9c06d0e 	bge	r23,r7,c858 <_realloc_r+0x320>
    c6a4:	880b883a 	mov	r5,r17
    c6a8:	9009883a 	mov	r4,r18
    c6ac:	000a9500 	call	a950 <_malloc_r>
    c6b0:	1023883a 	mov	r17,r2
    c6b4:	1000ef26 	beq	r2,zero,ca74 <_realloc_r+0x53c>
    c6b8:	a0ffff17 	ldw	r3,-4(r20)
    c6bc:	113ffe04 	addi	r4,r2,-8
    c6c0:	00bfff84 	movi	r2,-2
    c6c4:	1884703a 	and	r2,r3,r2
    c6c8:	a885883a 	add	r2,r21,r2
    c6cc:	2080bf26 	beq	r4,r2,c9cc <_realloc_r+0x494>
    c6d0:	81bfff04 	addi	r6,r16,-4
    c6d4:	00800904 	movi	r2,36
    c6d8:	11808936 	bltu	r2,r6,c900 <_realloc_r+0x3c8>
    c6dc:	00c004c4 	movi	r3,19
    c6e0:	19806c2e 	bgeu	r3,r6,c894 <_realloc_r+0x35c>
    c6e4:	a0c00017 	ldw	r3,0(r20)
    c6e8:	88c00015 	stw	r3,0(r17)
    c6ec:	a0c00117 	ldw	r3,4(r20)
    c6f0:	88c00115 	stw	r3,4(r17)
    c6f4:	00c006c4 	movi	r3,27
    c6f8:	1980ac36 	bltu	r3,r6,c9ac <_realloc_r+0x474>
    c6fc:	88800204 	addi	r2,r17,8
    c700:	a0c00204 	addi	r3,r20,8
    c704:	19000017 	ldw	r4,0(r3)
    c708:	11000015 	stw	r4,0(r2)
    c70c:	19000117 	ldw	r4,4(r3)
    c710:	11000115 	stw	r4,4(r2)
    c714:	18c00217 	ldw	r3,8(r3)
    c718:	10c00215 	stw	r3,8(r2)
    c71c:	a00b883a 	mov	r5,r20
    c720:	9009883a 	mov	r4,r18
    c724:	0009d800 	call	9d80 <_free_r>
    c728:	9009883a 	mov	r4,r18
    c72c:	0013b800 	call	13b80 <__malloc_unlock>
    c730:	8805883a 	mov	r2,r17
    c734:	003fc506 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    c738:	00800304 	movi	r2,12
    c73c:	90800015 	stw	r2,0(r18)
    c740:	0005883a 	mov	r2,zero
    c744:	003fc106 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    c748:	29800117 	ldw	r6,4(r5)
    c74c:	00bfff04 	movi	r2,-4
    c750:	b1000404 	addi	r4,r22,16
    c754:	3084703a 	and	r2,r6,r2
    c758:	140d883a 	add	r6,r2,r16
    c75c:	31005b0e 	bge	r6,r4,c8cc <_realloc_r+0x394>
    c760:	2811883a 	mov	r8,r5
    c764:	18c0004c 	andi	r3,r3,1
    c768:	183fce1e 	bne	r3,zero,c6a4 <__alt_mem_Flash_flash_data+0xf400c6a4>
    c76c:	a4fffe17 	ldw	r19,-8(r20)
    c770:	00ffff04 	movi	r3,-4
    c774:	ace7c83a 	sub	r19,r21,r19
    c778:	99000117 	ldw	r4,4(r19)
    c77c:	20c6703a 	and	r3,r4,r3
    c780:	403fc526 	beq	r8,zero,c698 <__alt_mem_Flash_flash_data+0xf400c698>
    c784:	1c2f883a 	add	r23,r3,r16
    c788:	b8af883a 	add	r23,r23,r2
    c78c:	41406026 	beq	r8,r5,c910 <_realloc_r+0x3d8>
    c790:	b9ffc116 	blt	r23,r7,c698 <__alt_mem_Flash_flash_data+0xf400c698>
    c794:	40c00217 	ldw	r3,8(r8)
    c798:	40800317 	ldw	r2,12(r8)
    c79c:	81bfff04 	addi	r6,r16,-4
    c7a0:	01000904 	movi	r4,36
    c7a4:	18800315 	stw	r2,12(r3)
    c7a8:	10c00215 	stw	r3,8(r2)
    c7ac:	99400217 	ldw	r5,8(r19)
    c7b0:	98c00317 	ldw	r3,12(r19)
    c7b4:	9c400204 	addi	r17,r19,8
    c7b8:	28c00315 	stw	r3,12(r5)
    c7bc:	19400215 	stw	r5,8(r3)
    c7c0:	21802d36 	bltu	r4,r6,c878 <_realloc_r+0x340>
    c7c4:	008004c4 	movi	r2,19
    c7c8:	1180352e 	bgeu	r2,r6,c8a0 <_realloc_r+0x368>
    c7cc:	a0800017 	ldw	r2,0(r20)
    c7d0:	98800215 	stw	r2,8(r19)
    c7d4:	a0800117 	ldw	r2,4(r20)
    c7d8:	98800315 	stw	r2,12(r19)
    c7dc:	008006c4 	movi	r2,27
    c7e0:	11808036 	bltu	r2,r6,c9e4 <_realloc_r+0x4ac>
    c7e4:	98c00404 	addi	r3,r19,16
    c7e8:	a5000204 	addi	r20,r20,8
    c7ec:	00002d06 	br	c8a4 <_realloc_r+0x36c>
    c7f0:	1d86b03a 	or	r3,r3,r22
    c7f4:	ad8b883a 	add	r5,r21,r22
    c7f8:	a8c00115 	stw	r3,4(r21)
    c7fc:	38800054 	ori	r2,r7,1
    c800:	28800115 	stw	r2,4(r5)
    c804:	29cf883a 	add	r7,r5,r7
    c808:	38800117 	ldw	r2,4(r7)
    c80c:	9009883a 	mov	r4,r18
    c810:	29400204 	addi	r5,r5,8
    c814:	10800054 	ori	r2,r2,1
    c818:	38800115 	stw	r2,4(r7)
    c81c:	0009d800 	call	9d80 <_free_r>
    c820:	003f8706 	br	c640 <__alt_mem_Flash_flash_data+0xf400c640>
    c824:	300b883a 	mov	r5,r6
    c828:	dfc00917 	ldw	ra,36(sp)
    c82c:	df000817 	ldw	fp,32(sp)
    c830:	ddc00717 	ldw	r23,28(sp)
    c834:	dd800617 	ldw	r22,24(sp)
    c838:	dd400517 	ldw	r21,20(sp)
    c83c:	dd000417 	ldw	r20,16(sp)
    c840:	dcc00317 	ldw	r19,12(sp)
    c844:	dc800217 	ldw	r18,8(sp)
    c848:	dc400117 	ldw	r17,4(sp)
    c84c:	dc000017 	ldw	r16,0(sp)
    c850:	dec00a04 	addi	sp,sp,40
    c854:	000a9501 	jmpi	a950 <_malloc_r>
    c858:	98800317 	ldw	r2,12(r19)
    c85c:	98c00217 	ldw	r3,8(r19)
    c860:	81bfff04 	addi	r6,r16,-4
    c864:	01000904 	movi	r4,36
    c868:	18800315 	stw	r2,12(r3)
    c86c:	10c00215 	stw	r3,8(r2)
    c870:	9c400204 	addi	r17,r19,8
    c874:	21bfd32e 	bgeu	r4,r6,c7c4 <__alt_mem_Flash_flash_data+0xf400c7c4>
    c878:	8809883a 	mov	r4,r17
    c87c:	a00b883a 	mov	r5,r20
    c880:	000b3180 	call	b318 <memmove>
    c884:	98c00117 	ldw	r3,4(r19)
    c888:	b821883a 	mov	r16,r23
    c88c:	982b883a 	mov	r21,r19
    c890:	003f6106 	br	c618 <__alt_mem_Flash_flash_data+0xf400c618>
    c894:	8805883a 	mov	r2,r17
    c898:	a007883a 	mov	r3,r20
    c89c:	003f9906 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    c8a0:	8807883a 	mov	r3,r17
    c8a4:	a0800017 	ldw	r2,0(r20)
    c8a8:	b821883a 	mov	r16,r23
    c8ac:	982b883a 	mov	r21,r19
    c8b0:	18800015 	stw	r2,0(r3)
    c8b4:	a0800117 	ldw	r2,4(r20)
    c8b8:	18800115 	stw	r2,4(r3)
    c8bc:	a0800217 	ldw	r2,8(r20)
    c8c0:	18800215 	stw	r2,8(r3)
    c8c4:	98c00117 	ldw	r3,4(r19)
    c8c8:	003f5306 	br	c618 <__alt_mem_Flash_flash_data+0xf400c618>
    c8cc:	adab883a 	add	r21,r21,r22
    c8d0:	3585c83a 	sub	r2,r6,r22
    c8d4:	e5400215 	stw	r21,8(fp)
    c8d8:	10800054 	ori	r2,r2,1
    c8dc:	a8800115 	stw	r2,4(r21)
    c8e0:	a0bfff17 	ldw	r2,-4(r20)
    c8e4:	9009883a 	mov	r4,r18
    c8e8:	1080004c 	andi	r2,r2,1
    c8ec:	b0acb03a 	or	r22,r22,r2
    c8f0:	a5bfff15 	stw	r22,-4(r20)
    c8f4:	0013b800 	call	13b80 <__malloc_unlock>
    c8f8:	a005883a 	mov	r2,r20
    c8fc:	003f5306 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    c900:	8809883a 	mov	r4,r17
    c904:	a00b883a 	mov	r5,r20
    c908:	000b3180 	call	b318 <memmove>
    c90c:	003f8306 	br	c71c <__alt_mem_Flash_flash_data+0xf400c71c>
    c910:	b0800404 	addi	r2,r22,16
    c914:	b8bf6016 	blt	r23,r2,c698 <__alt_mem_Flash_flash_data+0xf400c698>
    c918:	98800317 	ldw	r2,12(r19)
    c91c:	98c00217 	ldw	r3,8(r19)
    c920:	81bfff04 	addi	r6,r16,-4
    c924:	01000904 	movi	r4,36
    c928:	18800315 	stw	r2,12(r3)
    c92c:	10c00215 	stw	r3,8(r2)
    c930:	9c400204 	addi	r17,r19,8
    c934:	21804336 	bltu	r4,r6,ca44 <_realloc_r+0x50c>
    c938:	008004c4 	movi	r2,19
    c93c:	11803f2e 	bgeu	r2,r6,ca3c <_realloc_r+0x504>
    c940:	a0800017 	ldw	r2,0(r20)
    c944:	98800215 	stw	r2,8(r19)
    c948:	a0800117 	ldw	r2,4(r20)
    c94c:	98800315 	stw	r2,12(r19)
    c950:	008006c4 	movi	r2,27
    c954:	11803f36 	bltu	r2,r6,ca54 <_realloc_r+0x51c>
    c958:	98800404 	addi	r2,r19,16
    c95c:	a5000204 	addi	r20,r20,8
    c960:	a0c00017 	ldw	r3,0(r20)
    c964:	10c00015 	stw	r3,0(r2)
    c968:	a0c00117 	ldw	r3,4(r20)
    c96c:	10c00115 	stw	r3,4(r2)
    c970:	a0c00217 	ldw	r3,8(r20)
    c974:	10c00215 	stw	r3,8(r2)
    c978:	9d87883a 	add	r3,r19,r22
    c97c:	bd85c83a 	sub	r2,r23,r22
    c980:	e0c00215 	stw	r3,8(fp)
    c984:	10800054 	ori	r2,r2,1
    c988:	18800115 	stw	r2,4(r3)
    c98c:	98800117 	ldw	r2,4(r19)
    c990:	9009883a 	mov	r4,r18
    c994:	1080004c 	andi	r2,r2,1
    c998:	b0acb03a 	or	r22,r22,r2
    c99c:	9d800115 	stw	r22,4(r19)
    c9a0:	0013b800 	call	13b80 <__malloc_unlock>
    c9a4:	8805883a 	mov	r2,r17
    c9a8:	003f2806 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    c9ac:	a0c00217 	ldw	r3,8(r20)
    c9b0:	88c00215 	stw	r3,8(r17)
    c9b4:	a0c00317 	ldw	r3,12(r20)
    c9b8:	88c00315 	stw	r3,12(r17)
    c9bc:	30801126 	beq	r6,r2,ca04 <_realloc_r+0x4cc>
    c9c0:	88800404 	addi	r2,r17,16
    c9c4:	a0c00404 	addi	r3,r20,16
    c9c8:	003f4e06 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    c9cc:	893fff17 	ldw	r4,-4(r17)
    c9d0:	00bfff04 	movi	r2,-4
    c9d4:	a023883a 	mov	r17,r20
    c9d8:	2084703a 	and	r2,r4,r2
    c9dc:	80a1883a 	add	r16,r16,r2
    c9e0:	003f0d06 	br	c618 <__alt_mem_Flash_flash_data+0xf400c618>
    c9e4:	a0800217 	ldw	r2,8(r20)
    c9e8:	98800415 	stw	r2,16(r19)
    c9ec:	a0800317 	ldw	r2,12(r20)
    c9f0:	98800515 	stw	r2,20(r19)
    c9f4:	31000a26 	beq	r6,r4,ca20 <_realloc_r+0x4e8>
    c9f8:	98c00604 	addi	r3,r19,24
    c9fc:	a5000404 	addi	r20,r20,16
    ca00:	003fa806 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    ca04:	a1000417 	ldw	r4,16(r20)
    ca08:	88800604 	addi	r2,r17,24
    ca0c:	a0c00604 	addi	r3,r20,24
    ca10:	89000415 	stw	r4,16(r17)
    ca14:	a1000517 	ldw	r4,20(r20)
    ca18:	89000515 	stw	r4,20(r17)
    ca1c:	003f3906 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    ca20:	a0800417 	ldw	r2,16(r20)
    ca24:	a5000604 	addi	r20,r20,24
    ca28:	98c00804 	addi	r3,r19,32
    ca2c:	98800615 	stw	r2,24(r19)
    ca30:	a0bfff17 	ldw	r2,-4(r20)
    ca34:	98800715 	stw	r2,28(r19)
    ca38:	003f9a06 	br	c8a4 <__alt_mem_Flash_flash_data+0xf400c8a4>
    ca3c:	8805883a 	mov	r2,r17
    ca40:	003fc706 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>
    ca44:	8809883a 	mov	r4,r17
    ca48:	a00b883a 	mov	r5,r20
    ca4c:	000b3180 	call	b318 <memmove>
    ca50:	003fc906 	br	c978 <__alt_mem_Flash_flash_data+0xf400c978>
    ca54:	a0800217 	ldw	r2,8(r20)
    ca58:	98800415 	stw	r2,16(r19)
    ca5c:	a0800317 	ldw	r2,12(r20)
    ca60:	98800515 	stw	r2,20(r19)
    ca64:	31000726 	beq	r6,r4,ca84 <_realloc_r+0x54c>
    ca68:	98800604 	addi	r2,r19,24
    ca6c:	a5000404 	addi	r20,r20,16
    ca70:	003fbb06 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>
    ca74:	9009883a 	mov	r4,r18
    ca78:	0013b800 	call	13b80 <__malloc_unlock>
    ca7c:	0005883a 	mov	r2,zero
    ca80:	003ef206 	br	c64c <__alt_mem_Flash_flash_data+0xf400c64c>
    ca84:	a0c00417 	ldw	r3,16(r20)
    ca88:	a5000604 	addi	r20,r20,24
    ca8c:	98800804 	addi	r2,r19,32
    ca90:	98c00615 	stw	r3,24(r19)
    ca94:	a0ffff17 	ldw	r3,-4(r20)
    ca98:	98c00715 	stw	r3,28(r19)
    ca9c:	003fb006 	br	c960 <__alt_mem_Flash_flash_data+0xf400c960>

0000caa0 <__fpclassifyd>:
    caa0:	00a00034 	movhi	r2,32768
    caa4:	10bfffc4 	addi	r2,r2,-1
    caa8:	2884703a 	and	r2,r5,r2
    caac:	10000726 	beq	r2,zero,cacc <__fpclassifyd+0x2c>
    cab0:	00fffc34 	movhi	r3,65520
    cab4:	019ff834 	movhi	r6,32736
    cab8:	28c7883a 	add	r3,r5,r3
    cabc:	31bfffc4 	addi	r6,r6,-1
    cac0:	30c00536 	bltu	r6,r3,cad8 <__fpclassifyd+0x38>
    cac4:	00800104 	movi	r2,4
    cac8:	f800283a 	ret
    cacc:	2000021e 	bne	r4,zero,cad8 <__fpclassifyd+0x38>
    cad0:	00800084 	movi	r2,2
    cad4:	f800283a 	ret
    cad8:	00dffc34 	movhi	r3,32752
    cadc:	019ff834 	movhi	r6,32736
    cae0:	28cb883a 	add	r5,r5,r3
    cae4:	31bfffc4 	addi	r6,r6,-1
    cae8:	317ff62e 	bgeu	r6,r5,cac4 <__alt_mem_Flash_flash_data+0xf400cac4>
    caec:	01400434 	movhi	r5,16
    caf0:	297fffc4 	addi	r5,r5,-1
    caf4:	28800236 	bltu	r5,r2,cb00 <__fpclassifyd+0x60>
    caf8:	008000c4 	movi	r2,3
    cafc:	f800283a 	ret
    cb00:	10c00226 	beq	r2,r3,cb0c <__fpclassifyd+0x6c>
    cb04:	0005883a 	mov	r2,zero
    cb08:	f800283a 	ret
    cb0c:	2005003a 	cmpeq	r2,r4,zero
    cb10:	f800283a 	ret

0000cb14 <_sbrk_r>:
    cb14:	defffd04 	addi	sp,sp,-12
    cb18:	dc000015 	stw	r16,0(sp)
    cb1c:	040000b4 	movhi	r16,2
    cb20:	dc400115 	stw	r17,4(sp)
    cb24:	84135d04 	addi	r16,r16,19828
    cb28:	2023883a 	mov	r17,r4
    cb2c:	2809883a 	mov	r4,r5
    cb30:	dfc00215 	stw	ra,8(sp)
    cb34:	80000015 	stw	zero,0(r16)
    cb38:	001374c0 	call	1374c <sbrk>
    cb3c:	00ffffc4 	movi	r3,-1
    cb40:	10c00526 	beq	r2,r3,cb58 <_sbrk_r+0x44>
    cb44:	dfc00217 	ldw	ra,8(sp)
    cb48:	dc400117 	ldw	r17,4(sp)
    cb4c:	dc000017 	ldw	r16,0(sp)
    cb50:	dec00304 	addi	sp,sp,12
    cb54:	f800283a 	ret
    cb58:	80c00017 	ldw	r3,0(r16)
    cb5c:	183ff926 	beq	r3,zero,cb44 <__alt_mem_Flash_flash_data+0xf400cb44>
    cb60:	88c00015 	stw	r3,0(r17)
    cb64:	003ff706 	br	cb44 <__alt_mem_Flash_flash_data+0xf400cb44>

0000cb68 <__sread>:
    cb68:	defffe04 	addi	sp,sp,-8
    cb6c:	dc000015 	stw	r16,0(sp)
    cb70:	2821883a 	mov	r16,r5
    cb74:	2940038f 	ldh	r5,14(r5)
    cb78:	dfc00115 	stw	ra,4(sp)
    cb7c:	000f9700 	call	f970 <_read_r>
    cb80:	10000716 	blt	r2,zero,cba0 <__sread+0x38>
    cb84:	80c01417 	ldw	r3,80(r16)
    cb88:	1887883a 	add	r3,r3,r2
    cb8c:	80c01415 	stw	r3,80(r16)
    cb90:	dfc00117 	ldw	ra,4(sp)
    cb94:	dc000017 	ldw	r16,0(sp)
    cb98:	dec00204 	addi	sp,sp,8
    cb9c:	f800283a 	ret
    cba0:	80c0030b 	ldhu	r3,12(r16)
    cba4:	18fbffcc 	andi	r3,r3,61439
    cba8:	80c0030d 	sth	r3,12(r16)
    cbac:	dfc00117 	ldw	ra,4(sp)
    cbb0:	dc000017 	ldw	r16,0(sp)
    cbb4:	dec00204 	addi	sp,sp,8
    cbb8:	f800283a 	ret

0000cbbc <__seofread>:
    cbbc:	0005883a 	mov	r2,zero
    cbc0:	f800283a 	ret

0000cbc4 <__swrite>:
    cbc4:	2880030b 	ldhu	r2,12(r5)
    cbc8:	defffb04 	addi	sp,sp,-20
    cbcc:	dcc00315 	stw	r19,12(sp)
    cbd0:	dc800215 	stw	r18,8(sp)
    cbd4:	dc400115 	stw	r17,4(sp)
    cbd8:	dc000015 	stw	r16,0(sp)
    cbdc:	dfc00415 	stw	ra,16(sp)
    cbe0:	10c0400c 	andi	r3,r2,256
    cbe4:	2821883a 	mov	r16,r5
    cbe8:	2027883a 	mov	r19,r4
    cbec:	3025883a 	mov	r18,r6
    cbf0:	3823883a 	mov	r17,r7
    cbf4:	18000526 	beq	r3,zero,cc0c <__swrite+0x48>
    cbf8:	2940038f 	ldh	r5,14(r5)
    cbfc:	000d883a 	mov	r6,zero
    cc00:	01c00084 	movi	r7,2
    cc04:	000f9140 	call	f914 <_lseek_r>
    cc08:	8080030b 	ldhu	r2,12(r16)
    cc0c:	8140038f 	ldh	r5,14(r16)
    cc10:	10bbffcc 	andi	r2,r2,61439
    cc14:	9809883a 	mov	r4,r19
    cc18:	900d883a 	mov	r6,r18
    cc1c:	880f883a 	mov	r7,r17
    cc20:	8080030d 	sth	r2,12(r16)
    cc24:	dfc00417 	ldw	ra,16(sp)
    cc28:	dcc00317 	ldw	r19,12(sp)
    cc2c:	dc800217 	ldw	r18,8(sp)
    cc30:	dc400117 	ldw	r17,4(sp)
    cc34:	dc000017 	ldw	r16,0(sp)
    cc38:	dec00504 	addi	sp,sp,20
    cc3c:	000f4101 	jmpi	f410 <_write_r>

0000cc40 <__sseek>:
    cc40:	defffe04 	addi	sp,sp,-8
    cc44:	dc000015 	stw	r16,0(sp)
    cc48:	2821883a 	mov	r16,r5
    cc4c:	2940038f 	ldh	r5,14(r5)
    cc50:	dfc00115 	stw	ra,4(sp)
    cc54:	000f9140 	call	f914 <_lseek_r>
    cc58:	00ffffc4 	movi	r3,-1
    cc5c:	10c00826 	beq	r2,r3,cc80 <__sseek+0x40>
    cc60:	80c0030b 	ldhu	r3,12(r16)
    cc64:	80801415 	stw	r2,80(r16)
    cc68:	18c40014 	ori	r3,r3,4096
    cc6c:	80c0030d 	sth	r3,12(r16)
    cc70:	dfc00117 	ldw	ra,4(sp)
    cc74:	dc000017 	ldw	r16,0(sp)
    cc78:	dec00204 	addi	sp,sp,8
    cc7c:	f800283a 	ret
    cc80:	80c0030b 	ldhu	r3,12(r16)
    cc84:	18fbffcc 	andi	r3,r3,61439
    cc88:	80c0030d 	sth	r3,12(r16)
    cc8c:	dfc00117 	ldw	ra,4(sp)
    cc90:	dc000017 	ldw	r16,0(sp)
    cc94:	dec00204 	addi	sp,sp,8
    cc98:	f800283a 	ret

0000cc9c <__sclose>:
    cc9c:	2940038f 	ldh	r5,14(r5)
    cca0:	000f46c1 	jmpi	f46c <_close_r>

0000cca4 <strcmp>:
    cca4:	2144b03a 	or	r2,r4,r5
    cca8:	108000cc 	andi	r2,r2,3
    ccac:	1000171e 	bne	r2,zero,cd0c <strcmp+0x68>
    ccb0:	20800017 	ldw	r2,0(r4)
    ccb4:	28c00017 	ldw	r3,0(r5)
    ccb8:	10c0141e 	bne	r2,r3,cd0c <strcmp+0x68>
    ccbc:	027fbff4 	movhi	r9,65279
    ccc0:	4a7fbfc4 	addi	r9,r9,-257
    ccc4:	0086303a 	nor	r3,zero,r2
    ccc8:	02202074 	movhi	r8,32897
    cccc:	1245883a 	add	r2,r2,r9
    ccd0:	42202004 	addi	r8,r8,-32640
    ccd4:	10c4703a 	and	r2,r2,r3
    ccd8:	1204703a 	and	r2,r2,r8
    ccdc:	10000226 	beq	r2,zero,cce8 <strcmp+0x44>
    cce0:	00001706 	br	cd40 <strcmp+0x9c>
    cce4:	1000161e 	bne	r2,zero,cd40 <strcmp+0x9c>
    cce8:	21000104 	addi	r4,r4,4
    ccec:	20c00017 	ldw	r3,0(r4)
    ccf0:	29400104 	addi	r5,r5,4
    ccf4:	29800017 	ldw	r6,0(r5)
    ccf8:	1a4f883a 	add	r7,r3,r9
    ccfc:	00c4303a 	nor	r2,zero,r3
    cd00:	3884703a 	and	r2,r7,r2
    cd04:	1204703a 	and	r2,r2,r8
    cd08:	19bff626 	beq	r3,r6,cce4 <__alt_mem_Flash_flash_data+0xf400cce4>
    cd0c:	20800007 	ldb	r2,0(r4)
    cd10:	1000051e 	bne	r2,zero,cd28 <strcmp+0x84>
    cd14:	00000606 	br	cd30 <strcmp+0x8c>
    cd18:	21000044 	addi	r4,r4,1
    cd1c:	20800007 	ldb	r2,0(r4)
    cd20:	29400044 	addi	r5,r5,1
    cd24:	10000226 	beq	r2,zero,cd30 <strcmp+0x8c>
    cd28:	28c00007 	ldb	r3,0(r5)
    cd2c:	10fffa26 	beq	r2,r3,cd18 <__alt_mem_Flash_flash_data+0xf400cd18>
    cd30:	20800003 	ldbu	r2,0(r4)
    cd34:	28c00003 	ldbu	r3,0(r5)
    cd38:	10c5c83a 	sub	r2,r2,r3
    cd3c:	f800283a 	ret
    cd40:	0005883a 	mov	r2,zero
    cd44:	f800283a 	ret

0000cd48 <__ssprint_r>:
    cd48:	30800217 	ldw	r2,8(r6)
    cd4c:	defff604 	addi	sp,sp,-40
    cd50:	ddc00715 	stw	r23,28(sp)
    cd54:	dc800215 	stw	r18,8(sp)
    cd58:	dfc00915 	stw	ra,36(sp)
    cd5c:	df000815 	stw	fp,32(sp)
    cd60:	dd800615 	stw	r22,24(sp)
    cd64:	dd400515 	stw	r21,20(sp)
    cd68:	dd000415 	stw	r20,16(sp)
    cd6c:	dcc00315 	stw	r19,12(sp)
    cd70:	dc400115 	stw	r17,4(sp)
    cd74:	dc000015 	stw	r16,0(sp)
    cd78:	3025883a 	mov	r18,r6
    cd7c:	35c00017 	ldw	r23,0(r6)
    cd80:	10005626 	beq	r2,zero,cedc <__ssprint_r+0x194>
    cd84:	2027883a 	mov	r19,r4
    cd88:	28800217 	ldw	r2,8(r5)
    cd8c:	29000017 	ldw	r4,0(r5)
    cd90:	2823883a 	mov	r17,r5
    cd94:	0039883a 	mov	fp,zero
    cd98:	0021883a 	mov	r16,zero
    cd9c:	80003926 	beq	r16,zero,ce84 <__ssprint_r+0x13c>
    cda0:	102b883a 	mov	r21,r2
    cda4:	102d883a 	mov	r22,r2
    cda8:	80803a36 	bltu	r16,r2,ce94 <__ssprint_r+0x14c>
    cdac:	88c0030b 	ldhu	r3,12(r17)
    cdb0:	1881200c 	andi	r2,r3,1152
    cdb4:	10002626 	beq	r2,zero,ce50 <__ssprint_r+0x108>
    cdb8:	88800517 	ldw	r2,20(r17)
    cdbc:	89400417 	ldw	r5,16(r17)
    cdc0:	81c00044 	addi	r7,r16,1
    cdc4:	108d883a 	add	r6,r2,r2
    cdc8:	3085883a 	add	r2,r6,r2
    cdcc:	100cd7fa 	srli	r6,r2,31
    cdd0:	216dc83a 	sub	r22,r4,r5
    cdd4:	3d89883a 	add	r4,r7,r22
    cdd8:	3085883a 	add	r2,r6,r2
    cddc:	102bd07a 	srai	r21,r2,1
    cde0:	a80d883a 	mov	r6,r21
    cde4:	a900022e 	bgeu	r21,r4,cdf0 <__ssprint_r+0xa8>
    cde8:	202b883a 	mov	r21,r4
    cdec:	200d883a 	mov	r6,r4
    cdf0:	18c1000c 	andi	r3,r3,1024
    cdf4:	9809883a 	mov	r4,r19
    cdf8:	18002926 	beq	r3,zero,cea0 <__ssprint_r+0x158>
    cdfc:	300b883a 	mov	r5,r6
    ce00:	000a9500 	call	a950 <_malloc_r>
    ce04:	1029883a 	mov	r20,r2
    ce08:	10002b26 	beq	r2,zero,ceb8 <__ssprint_r+0x170>
    ce0c:	89400417 	ldw	r5,16(r17)
    ce10:	1009883a 	mov	r4,r2
    ce14:	b00d883a 	mov	r6,r22
    ce18:	000b1e00 	call	b1e0 <memcpy>
    ce1c:	8880030b 	ldhu	r2,12(r17)
    ce20:	00fedfc4 	movi	r3,-1153
    ce24:	10c4703a 	and	r2,r2,r3
    ce28:	10802014 	ori	r2,r2,128
    ce2c:	8880030d 	sth	r2,12(r17)
    ce30:	a589883a 	add	r4,r20,r22
    ce34:	adadc83a 	sub	r22,r21,r22
    ce38:	8d400515 	stw	r21,20(r17)
    ce3c:	8d800215 	stw	r22,8(r17)
    ce40:	8d000415 	stw	r20,16(r17)
    ce44:	89000015 	stw	r4,0(r17)
    ce48:	802b883a 	mov	r21,r16
    ce4c:	802d883a 	mov	r22,r16
    ce50:	e00b883a 	mov	r5,fp
    ce54:	b00d883a 	mov	r6,r22
    ce58:	000b3180 	call	b318 <memmove>
    ce5c:	88800217 	ldw	r2,8(r17)
    ce60:	89000017 	ldw	r4,0(r17)
    ce64:	90c00217 	ldw	r3,8(r18)
    ce68:	1545c83a 	sub	r2,r2,r21
    ce6c:	2589883a 	add	r4,r4,r22
    ce70:	88800215 	stw	r2,8(r17)
    ce74:	89000015 	stw	r4,0(r17)
    ce78:	1c21c83a 	sub	r16,r3,r16
    ce7c:	94000215 	stw	r16,8(r18)
    ce80:	80001626 	beq	r16,zero,cedc <__ssprint_r+0x194>
    ce84:	bf000017 	ldw	fp,0(r23)
    ce88:	bc000117 	ldw	r16,4(r23)
    ce8c:	bdc00204 	addi	r23,r23,8
    ce90:	003fc206 	br	cd9c <__alt_mem_Flash_flash_data+0xf400cd9c>
    ce94:	802b883a 	mov	r21,r16
    ce98:	802d883a 	mov	r22,r16
    ce9c:	003fec06 	br	ce50 <__alt_mem_Flash_flash_data+0xf400ce50>
    cea0:	000c5380 	call	c538 <_realloc_r>
    cea4:	1029883a 	mov	r20,r2
    cea8:	103fe11e 	bne	r2,zero,ce30 <__alt_mem_Flash_flash_data+0xf400ce30>
    ceac:	89400417 	ldw	r5,16(r17)
    ceb0:	9809883a 	mov	r4,r19
    ceb4:	0009d800 	call	9d80 <_free_r>
    ceb8:	88c0030b 	ldhu	r3,12(r17)
    cebc:	00800304 	movi	r2,12
    cec0:	98800015 	stw	r2,0(r19)
    cec4:	18c01014 	ori	r3,r3,64
    cec8:	88c0030d 	sth	r3,12(r17)
    cecc:	00bfffc4 	movi	r2,-1
    ced0:	90000215 	stw	zero,8(r18)
    ced4:	90000115 	stw	zero,4(r18)
    ced8:	00000206 	br	cee4 <__ssprint_r+0x19c>
    cedc:	90000115 	stw	zero,4(r18)
    cee0:	0005883a 	mov	r2,zero
    cee4:	dfc00917 	ldw	ra,36(sp)
    cee8:	df000817 	ldw	fp,32(sp)
    ceec:	ddc00717 	ldw	r23,28(sp)
    cef0:	dd800617 	ldw	r22,24(sp)
    cef4:	dd400517 	ldw	r21,20(sp)
    cef8:	dd000417 	ldw	r20,16(sp)
    cefc:	dcc00317 	ldw	r19,12(sp)
    cf00:	dc800217 	ldw	r18,8(sp)
    cf04:	dc400117 	ldw	r17,4(sp)
    cf08:	dc000017 	ldw	r16,0(sp)
    cf0c:	dec00a04 	addi	sp,sp,40
    cf10:	f800283a 	ret

0000cf14 <___svfiprintf_internal_r>:
    cf14:	2880030b 	ldhu	r2,12(r5)
    cf18:	deffc904 	addi	sp,sp,-220
    cf1c:	dd403215 	stw	r21,200(sp)
    cf20:	dfc03615 	stw	ra,216(sp)
    cf24:	df003515 	stw	fp,212(sp)
    cf28:	ddc03415 	stw	r23,208(sp)
    cf2c:	dd803315 	stw	r22,204(sp)
    cf30:	dd003115 	stw	r20,196(sp)
    cf34:	dcc03015 	stw	r19,192(sp)
    cf38:	dc802f15 	stw	r18,188(sp)
    cf3c:	dc402e15 	stw	r17,184(sp)
    cf40:	dc002d15 	stw	r16,180(sp)
    cf44:	d9402715 	stw	r5,156(sp)
    cf48:	d9002915 	stw	r4,164(sp)
    cf4c:	1080200c 	andi	r2,r2,128
    cf50:	d9c02315 	stw	r7,140(sp)
    cf54:	302b883a 	mov	r21,r6
    cf58:	10000226 	beq	r2,zero,cf64 <___svfiprintf_internal_r+0x50>
    cf5c:	28800417 	ldw	r2,16(r5)
    cf60:	1003ce26 	beq	r2,zero,de9c <___svfiprintf_internal_r+0xf88>
    cf64:	dac01a04 	addi	r11,sp,104
    cf68:	da8019c4 	addi	r10,sp,103
    cf6c:	dc802917 	ldw	r18,164(sp)
    cf70:	dd002717 	ldw	r20,156(sp)
    cf74:	04c000b4 	movhi	r19,2
    cf78:	dac01e15 	stw	r11,120(sp)
    cf7c:	5a97c83a 	sub	r11,r11,r10
    cf80:	9cc29704 	addi	r19,r19,2652
    cf84:	da801f15 	stw	r10,124(sp)
    cf88:	dec01a15 	stw	sp,104(sp)
    cf8c:	d8001c15 	stw	zero,112(sp)
    cf90:	d8001b15 	stw	zero,108(sp)
    cf94:	d811883a 	mov	r8,sp
    cf98:	d8002a15 	stw	zero,168(sp)
    cf9c:	d8002415 	stw	zero,144(sp)
    cfa0:	dac02b15 	stw	r11,172(sp)
    cfa4:	a8800007 	ldb	r2,0(r21)
    cfa8:	10026a26 	beq	r2,zero,d954 <___svfiprintf_internal_r+0xa40>
    cfac:	01000944 	movi	r4,37
    cfb0:	11026826 	beq	r2,r4,d954 <___svfiprintf_internal_r+0xa40>
    cfb4:	a805883a 	mov	r2,r21
    cfb8:	00000106 	br	cfc0 <___svfiprintf_internal_r+0xac>
    cfbc:	19000326 	beq	r3,r4,cfcc <___svfiprintf_internal_r+0xb8>
    cfc0:	10800044 	addi	r2,r2,1
    cfc4:	10c00007 	ldb	r3,0(r2)
    cfc8:	183ffc1e 	bne	r3,zero,cfbc <__alt_mem_Flash_flash_data+0xf400cfbc>
    cfcc:	1561c83a 	sub	r16,r2,r21
    cfd0:	102d883a 	mov	r22,r2
    cfd4:	80000e26 	beq	r16,zero,d010 <___svfiprintf_internal_r+0xfc>
    cfd8:	d8c01c17 	ldw	r3,112(sp)
    cfdc:	d8801b17 	ldw	r2,108(sp)
    cfe0:	45400015 	stw	r21,0(r8)
    cfe4:	1c07883a 	add	r3,r3,r16
    cfe8:	10800044 	addi	r2,r2,1
    cfec:	d8c01c15 	stw	r3,112(sp)
    cff0:	44000115 	stw	r16,4(r8)
    cff4:	d8801b15 	stw	r2,108(sp)
    cff8:	00c001c4 	movi	r3,7
    cffc:	1882d816 	blt	r3,r2,db60 <___svfiprintf_internal_r+0xc4c>
    d000:	42000204 	addi	r8,r8,8
    d004:	da802417 	ldw	r10,144(sp)
    d008:	5415883a 	add	r10,r10,r16
    d00c:	da802415 	stw	r10,144(sp)
    d010:	b0800007 	ldb	r2,0(r22)
    d014:	10027526 	beq	r2,zero,d9ec <___svfiprintf_internal_r+0xad8>
    d018:	b1000047 	ldb	r4,1(r22)
    d01c:	b5400044 	addi	r21,r22,1
    d020:	d8001d85 	stb	zero,118(sp)
    d024:	000d883a 	mov	r6,zero
    d028:	043fffc4 	movi	r16,-1
    d02c:	d8002115 	stw	zero,132(sp)
    d030:	0023883a 	mov	r17,zero
    d034:	00c01604 	movi	r3,88
    d038:	01400244 	movi	r5,9
    d03c:	02400a84 	movi	r9,42
    d040:	01c01b04 	movi	r7,108
    d044:	ad400044 	addi	r21,r21,1
    d048:	20bff804 	addi	r2,r4,-32
    d04c:	18819736 	bltu	r3,r2,d6ac <___svfiprintf_internal_r+0x798>
    d050:	100490ba 	slli	r2,r2,2
    d054:	02c00074 	movhi	r11,1
    d058:	5af41a04 	addi	r11,r11,-12184
    d05c:	12c5883a 	add	r2,r2,r11
    d060:	10800017 	ldw	r2,0(r2)
    d064:	1000683a 	jmp	r2
    d068:	0000d5a4 	muli	zero,zero,854
    d06c:	0000d6ac 	andhi	zero,zero,858
    d070:	0000d6ac 	andhi	zero,zero,858
    d074:	0000d598 	cmpnei	zero,zero,854
    d078:	0000d6ac 	andhi	zero,zero,858
    d07c:	0000d6ac 	andhi	zero,zero,858
    d080:	0000d6ac 	andhi	zero,zero,858
    d084:	0000d6ac 	andhi	zero,zero,858
    d088:	0000d6ac 	andhi	zero,zero,858
    d08c:	0000d6ac 	andhi	zero,zero,858
    d090:	0000d2c4 	movi	zero,843
    d094:	0000d6e0 	cmpeqi	zero,zero,859
    d098:	0000d6ac 	andhi	zero,zero,858
    d09c:	0000d2ec 	andhi	zero,zero,843
    d0a0:	0000d6ec 	andhi	zero,zero,859
    d0a4:	0000d6ac 	andhi	zero,zero,858
    d0a8:	0000d6d4 	movui	zero,859
    d0ac:	0000d674 	movhi	zero,857
    d0b0:	0000d674 	movhi	zero,857
    d0b4:	0000d674 	movhi	zero,857
    d0b8:	0000d674 	movhi	zero,857
    d0bc:	0000d674 	movhi	zero,857
    d0c0:	0000d674 	movhi	zero,857
    d0c4:	0000d674 	movhi	zero,857
    d0c8:	0000d674 	movhi	zero,857
    d0cc:	0000d674 	movhi	zero,857
    d0d0:	0000d6ac 	andhi	zero,zero,858
    d0d4:	0000d6ac 	andhi	zero,zero,858
    d0d8:	0000d6ac 	andhi	zero,zero,858
    d0dc:	0000d6ac 	andhi	zero,zero,858
    d0e0:	0000d6ac 	andhi	zero,zero,858
    d0e4:	0000d6ac 	andhi	zero,zero,858
    d0e8:	0000d6ac 	andhi	zero,zero,858
    d0ec:	0000d6ac 	andhi	zero,zero,858
    d0f0:	0000d6ac 	andhi	zero,zero,858
    d0f4:	0000d6ac 	andhi	zero,zero,858
    d0f8:	0000d60c 	andi	zero,zero,856
    d0fc:	0000d6ac 	andhi	zero,zero,858
    d100:	0000d6ac 	andhi	zero,zero,858
    d104:	0000d6ac 	andhi	zero,zero,858
    d108:	0000d6ac 	andhi	zero,zero,858
    d10c:	0000d6ac 	andhi	zero,zero,858
    d110:	0000d6ac 	andhi	zero,zero,858
    d114:	0000d6ac 	andhi	zero,zero,858
    d118:	0000d6ac 	andhi	zero,zero,858
    d11c:	0000d6ac 	andhi	zero,zero,858
    d120:	0000d6ac 	andhi	zero,zero,858
    d124:	0000d298 	cmpnei	zero,zero,842
    d128:	0000d6ac 	andhi	zero,zero,858
    d12c:	0000d6ac 	andhi	zero,zero,858
    d130:	0000d6ac 	andhi	zero,zero,858
    d134:	0000d6ac 	andhi	zero,zero,858
    d138:	0000d6ac 	andhi	zero,zero,858
    d13c:	0000d1cc 	andi	zero,zero,839
    d140:	0000d6ac 	andhi	zero,zero,858
    d144:	0000d6ac 	andhi	zero,zero,858
    d148:	0000d4f8 	rdprs	zero,zero,851
    d14c:	0000d6ac 	andhi	zero,zero,858
    d150:	0000d6ac 	andhi	zero,zero,858
    d154:	0000d6ac 	andhi	zero,zero,858
    d158:	0000d6ac 	andhi	zero,zero,858
    d15c:	0000d6ac 	andhi	zero,zero,858
    d160:	0000d6ac 	andhi	zero,zero,858
    d164:	0000d6ac 	andhi	zero,zero,858
    d168:	0000d6ac 	andhi	zero,zero,858
    d16c:	0000d6ac 	andhi	zero,zero,858
    d170:	0000d6ac 	andhi	zero,zero,858
    d174:	0000d3e4 	muli	zero,zero,847
    d178:	0000d3a4 	muli	zero,zero,846
    d17c:	0000d6ac 	andhi	zero,zero,858
    d180:	0000d6ac 	andhi	zero,zero,858
    d184:	0000d6ac 	andhi	zero,zero,858
    d188:	0000d554 	movui	zero,853
    d18c:	0000d3a4 	muli	zero,zero,846
    d190:	0000d6ac 	andhi	zero,zero,858
    d194:	0000d6ac 	andhi	zero,zero,858
    d198:	0000d540 	call	d54 <gescoord+0x110>
    d19c:	0000d6ac 	andhi	zero,zero,858
    d1a0:	0000d560 	cmpeqi	zero,zero,853
    d1a4:	0000d29c 	xori	zero,zero,842
    d1a8:	0000d360 	cmpeqi	zero,zero,845
    d1ac:	0000d354 	movui	zero,845
    d1b0:	0000d6ac 	andhi	zero,zero,858
    d1b4:	0000d2f8 	rdprs	zero,zero,843
    d1b8:	0000d6ac 	andhi	zero,zero,858
    d1bc:	0000d1d0 	cmplti	zero,zero,839
    d1c0:	0000d6ac 	andhi	zero,zero,858
    d1c4:	0000d6ac 	andhi	zero,zero,858
    d1c8:	0000d5c0 	call	d5c <gescoord+0x118>
    d1cc:	8c400414 	ori	r17,r17,16
    d1d0:	8880080c 	andi	r2,r17,32
    d1d4:	10029626 	beq	r2,zero,dc30 <___svfiprintf_internal_r+0xd1c>
    d1d8:	da802317 	ldw	r10,140(sp)
    d1dc:	dac02317 	ldw	r11,140(sp)
    d1e0:	00800044 	movi	r2,1
    d1e4:	52400017 	ldw	r9,0(r10)
    d1e8:	52800117 	ldw	r10,4(r10)
    d1ec:	5ac00204 	addi	r11,r11,8
    d1f0:	dac02315 	stw	r11,140(sp)
    d1f4:	4a86b03a 	or	r3,r9,r10
    d1f8:	d8001d85 	stb	zero,118(sp)
    d1fc:	8039883a 	mov	fp,r16
    d200:	0017883a 	mov	r11,zero
    d204:	80000216 	blt	r16,zero,d210 <___svfiprintf_internal_r+0x2fc>
    d208:	013fdfc4 	movi	r4,-129
    d20c:	8922703a 	and	r17,r17,r4
    d210:	1801d21e 	bne	r3,zero,d95c <___svfiprintf_internal_r+0xa48>
    d214:	80024626 	beq	r16,zero,db30 <___svfiprintf_internal_r+0xc1c>
    d218:	10803fcc 	andi	r2,r2,255
    d21c:	00c00044 	movi	r3,1
    d220:	10c2b426 	beq	r2,r3,dcf4 <___svfiprintf_internal_r+0xde0>
    d224:	00c00084 	movi	r3,2
    d228:	10c25d26 	beq	r2,r3,dba0 <___svfiprintf_internal_r+0xc8c>
    d22c:	d8c01a04 	addi	r3,sp,104
    d230:	4808d0fa 	srli	r4,r9,3
    d234:	500a977a 	slli	r5,r10,29
    d238:	5014d0fa 	srli	r10,r10,3
    d23c:	4a4001cc 	andi	r9,r9,7
    d240:	48800c04 	addi	r2,r9,48
    d244:	18ffffc4 	addi	r3,r3,-1
    d248:	2912b03a 	or	r9,r5,r4
    d24c:	18800005 	stb	r2,0(r3)
    d250:	4a88b03a 	or	r4,r9,r10
    d254:	203ff61e 	bne	r4,zero,d230 <__alt_mem_Flash_flash_data+0xf400d230>
    d258:	8900004c 	andi	r4,r17,1
    d25c:	d8c02615 	stw	r3,152(sp)
    d260:	2002961e 	bne	r4,zero,dcbc <___svfiprintf_internal_r+0xda8>
    d264:	da801e17 	ldw	r10,120(sp)
    d268:	50f9c83a 	sub	fp,r10,r3
    d26c:	df002015 	stw	fp,128(sp)
    d270:	e400010e 	bge	fp,r16,d278 <___svfiprintf_internal_r+0x364>
    d274:	dc002015 	stw	r16,128(sp)
    d278:	5ac03fcc 	andi	r11,r11,255
    d27c:	5ac0201c 	xori	r11,r11,128
    d280:	5affe004 	addi	r11,r11,-128
    d284:	58006326 	beq	r11,zero,d414 <___svfiprintf_internal_r+0x500>
    d288:	d8c02017 	ldw	r3,128(sp)
    d28c:	18c00044 	addi	r3,r3,1
    d290:	d8c02015 	stw	r3,128(sp)
    d294:	00005f06 	br	d414 <___svfiprintf_internal_r+0x500>
    d298:	8c400414 	ori	r17,r17,16
    d29c:	8880080c 	andi	r2,r17,32
    d2a0:	10027926 	beq	r2,zero,dc88 <___svfiprintf_internal_r+0xd74>
    d2a4:	dac02317 	ldw	r11,140(sp)
    d2a8:	0005883a 	mov	r2,zero
    d2ac:	5a400017 	ldw	r9,0(r11)
    d2b0:	5a800117 	ldw	r10,4(r11)
    d2b4:	5ac00204 	addi	r11,r11,8
    d2b8:	dac02315 	stw	r11,140(sp)
    d2bc:	4a86b03a 	or	r3,r9,r10
    d2c0:	003fcd06 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    d2c4:	da802317 	ldw	r10,140(sp)
    d2c8:	dac02317 	ldw	r11,140(sp)
    d2cc:	52800017 	ldw	r10,0(r10)
    d2d0:	58800104 	addi	r2,r11,4
    d2d4:	da802115 	stw	r10,132(sp)
    d2d8:	50028c0e 	bge	r10,zero,dd0c <___svfiprintf_internal_r+0xdf8>
    d2dc:	da802117 	ldw	r10,132(sp)
    d2e0:	d8802315 	stw	r2,140(sp)
    d2e4:	0295c83a 	sub	r10,zero,r10
    d2e8:	da802115 	stw	r10,132(sp)
    d2ec:	8c400114 	ori	r17,r17,4
    d2f0:	a9000007 	ldb	r4,0(r21)
    d2f4:	003f5306 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d2f8:	da802317 	ldw	r10,140(sp)
    d2fc:	dac02317 	ldw	r11,140(sp)
    d300:	d8001d85 	stb	zero,118(sp)
    d304:	52800017 	ldw	r10,0(r10)
    d308:	5dc00104 	addi	r23,r11,4
    d30c:	da802615 	stw	r10,152(sp)
    d310:	5002d626 	beq	r10,zero,de6c <___svfiprintf_internal_r+0xf58>
    d314:	d9002617 	ldw	r4,152(sp)
    d318:	8002cc16 	blt	r16,zero,de4c <___svfiprintf_internal_r+0xf38>
    d31c:	000b883a 	mov	r5,zero
    d320:	800d883a 	mov	r6,r16
    d324:	da002c15 	stw	r8,176(sp)
    d328:	000b0f80 	call	b0f8 <memchr>
    d32c:	da002c17 	ldw	r8,176(sp)
    d330:	1002f026 	beq	r2,zero,def4 <___svfiprintf_internal_r+0xfe0>
    d334:	d8c02617 	ldw	r3,152(sp)
    d338:	10f9c83a 	sub	fp,r2,r3
    d33c:	8700010e 	bge	r16,fp,d344 <___svfiprintf_internal_r+0x430>
    d340:	8039883a 	mov	fp,r16
    d344:	dac01d83 	ldbu	r11,118(sp)
    d348:	ddc02315 	stw	r23,140(sp)
    d34c:	0021883a 	mov	r16,zero
    d350:	003fc606 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    d354:	8c400814 	ori	r17,r17,32
    d358:	a9000007 	ldb	r4,0(r21)
    d35c:	003f3906 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d360:	da802317 	ldw	r10,140(sp)
    d364:	00800c04 	movi	r2,48
    d368:	dac02317 	ldw	r11,140(sp)
    d36c:	52400017 	ldw	r9,0(r10)
    d370:	d8801d05 	stb	r2,116(sp)
    d374:	00801e04 	movi	r2,120
    d378:	d8801d45 	stb	r2,117(sp)
    d37c:	008000b4 	movhi	r2,2
    d380:	10822e04 	addi	r2,r2,2232
    d384:	5ac00104 	addi	r11,r11,4
    d388:	d8802a15 	stw	r2,168(sp)
    d38c:	0015883a 	mov	r10,zero
    d390:	8c400094 	ori	r17,r17,2
    d394:	dac02315 	stw	r11,140(sp)
    d398:	00800084 	movi	r2,2
    d39c:	4807883a 	mov	r3,r9
    d3a0:	003f9506 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    d3a4:	d9801d85 	stb	r6,118(sp)
    d3a8:	8880080c 	andi	r2,r17,32
    d3ac:	d8c02317 	ldw	r3,140(sp)
    d3b0:	10009b26 	beq	r2,zero,d620 <___svfiprintf_internal_r+0x70c>
    d3b4:	dac02317 	ldw	r11,140(sp)
    d3b8:	18800117 	ldw	r2,4(r3)
    d3bc:	1a400017 	ldw	r9,0(r3)
    d3c0:	5ac00204 	addi	r11,r11,8
    d3c4:	dac02315 	stw	r11,140(sp)
    d3c8:	1015883a 	mov	r10,r2
    d3cc:	10009f16 	blt	r2,zero,d64c <___svfiprintf_internal_r+0x738>
    d3d0:	dac01d83 	ldbu	r11,118(sp)
    d3d4:	8039883a 	mov	fp,r16
    d3d8:	00800044 	movi	r2,1
    d3dc:	4a86b03a 	or	r3,r9,r10
    d3e0:	003f8806 	br	d204 <__alt_mem_Flash_flash_data+0xf400d204>
    d3e4:	dac02317 	ldw	r11,140(sp)
    d3e8:	00c00044 	movi	r3,1
    d3ec:	da801004 	addi	r10,sp,64
    d3f0:	58800017 	ldw	r2,0(r11)
    d3f4:	5ac00104 	addi	r11,r11,4
    d3f8:	d8c02015 	stw	r3,128(sp)
    d3fc:	d8001d85 	stb	zero,118(sp)
    d400:	d8801005 	stb	r2,64(sp)
    d404:	dac02315 	stw	r11,140(sp)
    d408:	1839883a 	mov	fp,r3
    d40c:	da802615 	stw	r10,152(sp)
    d410:	0021883a 	mov	r16,zero
    d414:	8a80008c 	andi	r10,r17,2
    d418:	da802215 	stw	r10,136(sp)
    d41c:	50000326 	beq	r10,zero,d42c <___svfiprintf_internal_r+0x518>
    d420:	dac02017 	ldw	r11,128(sp)
    d424:	5ac00084 	addi	r11,r11,2
    d428:	dac02015 	stw	r11,128(sp)
    d42c:	88c0210c 	andi	r3,r17,132
    d430:	d8c02515 	stw	r3,148(sp)
    d434:	1800bd1e 	bne	r3,zero,d72c <___svfiprintf_internal_r+0x818>
    d438:	da802117 	ldw	r10,132(sp)
    d43c:	dac02017 	ldw	r11,128(sp)
    d440:	52edc83a 	sub	r22,r10,r11
    d444:	0580b90e 	bge	zero,r22,d72c <___svfiprintf_internal_r+0x818>
    d448:	02400404 	movi	r9,16
    d44c:	d8c01c17 	ldw	r3,112(sp)
    d450:	d8801b17 	ldw	r2,108(sp)
    d454:	4d829b0e 	bge	r9,r22,dec4 <___svfiprintf_internal_r+0xfb0>
    d458:	014000b4 	movhi	r5,2
    d45c:	29429b04 	addi	r5,r5,2668
    d460:	d9402815 	stw	r5,160(sp)
    d464:	05c001c4 	movi	r23,7
    d468:	00000306 	br	d478 <___svfiprintf_internal_r+0x564>
    d46c:	b5bffc04 	addi	r22,r22,-16
    d470:	42000204 	addi	r8,r8,8
    d474:	4d80150e 	bge	r9,r22,d4cc <___svfiprintf_internal_r+0x5b8>
    d478:	028000b4 	movhi	r10,2
    d47c:	18c00404 	addi	r3,r3,16
    d480:	10800044 	addi	r2,r2,1
    d484:	52829b04 	addi	r10,r10,2668
    d488:	42800015 	stw	r10,0(r8)
    d48c:	42400115 	stw	r9,4(r8)
    d490:	d8c01c15 	stw	r3,112(sp)
    d494:	d8801b15 	stw	r2,108(sp)
    d498:	b8bff40e 	bge	r23,r2,d46c <__alt_mem_Flash_flash_data+0xf400d46c>
    d49c:	9009883a 	mov	r4,r18
    d4a0:	a00b883a 	mov	r5,r20
    d4a4:	d9801a04 	addi	r6,sp,104
    d4a8:	da402c15 	stw	r9,176(sp)
    d4ac:	000cd480 	call	cd48 <__ssprint_r>
    d4b0:	da402c17 	ldw	r9,176(sp)
    d4b4:	1001531e 	bne	r2,zero,da04 <___svfiprintf_internal_r+0xaf0>
    d4b8:	b5bffc04 	addi	r22,r22,-16
    d4bc:	d8c01c17 	ldw	r3,112(sp)
    d4c0:	d8801b17 	ldw	r2,108(sp)
    d4c4:	d811883a 	mov	r8,sp
    d4c8:	4dbfeb16 	blt	r9,r22,d478 <__alt_mem_Flash_flash_data+0xf400d478>
    d4cc:	dac02817 	ldw	r11,160(sp)
    d4d0:	b0c7883a 	add	r3,r22,r3
    d4d4:	10800044 	addi	r2,r2,1
    d4d8:	42c00015 	stw	r11,0(r8)
    d4dc:	45800115 	stw	r22,4(r8)
    d4e0:	d8c01c15 	stw	r3,112(sp)
    d4e4:	d8801b15 	stw	r2,108(sp)
    d4e8:	010001c4 	movi	r4,7
    d4ec:	2081dd16 	blt	r4,r2,dc64 <___svfiprintf_internal_r+0xd50>
    d4f0:	42000204 	addi	r8,r8,8
    d4f4:	00008f06 	br	d734 <___svfiprintf_internal_r+0x820>
    d4f8:	008000b4 	movhi	r2,2
    d4fc:	10822904 	addi	r2,r2,2212
    d500:	d8802a15 	stw	r2,168(sp)
    d504:	d9801d85 	stb	r6,118(sp)
    d508:	8880080c 	andi	r2,r17,32
    d50c:	10003226 	beq	r2,zero,d5d8 <___svfiprintf_internal_r+0x6c4>
    d510:	da802317 	ldw	r10,140(sp)
    d514:	dac02317 	ldw	r11,140(sp)
    d518:	52400017 	ldw	r9,0(r10)
    d51c:	52800117 	ldw	r10,4(r10)
    d520:	5ac00204 	addi	r11,r11,8
    d524:	dac02315 	stw	r11,140(sp)
    d528:	8880004c 	andi	r2,r17,1
    d52c:	10003426 	beq	r2,zero,d600 <___svfiprintf_internal_r+0x6ec>
    d530:	4a86b03a 	or	r3,r9,r10
    d534:	1802231e 	bne	r3,zero,ddc4 <___svfiprintf_internal_r+0xeb0>
    d538:	00800084 	movi	r2,2
    d53c:	003f2e06 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    d540:	a9000007 	ldb	r4,0(r21)
    d544:	a805883a 	mov	r2,r21
    d548:	21c22426 	beq	r4,r7,dddc <___svfiprintf_internal_r+0xec8>
    d54c:	8c400414 	ori	r17,r17,16
    d550:	003ebc06 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d554:	8c401014 	ori	r17,r17,64
    d558:	a9000007 	ldb	r4,0(r21)
    d55c:	003eb906 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d560:	d9801d85 	stb	r6,118(sp)
    d564:	8880080c 	andi	r2,r17,32
    d568:	10020d1e 	bne	r2,zero,dda0 <___svfiprintf_internal_r+0xe8c>
    d56c:	8880040c 	andi	r2,r17,16
    d570:	10021e1e 	bne	r2,zero,ddec <___svfiprintf_internal_r+0xed8>
    d574:	8c40100c 	andi	r17,r17,64
    d578:	88021c26 	beq	r17,zero,ddec <___svfiprintf_internal_r+0xed8>
    d57c:	dac02317 	ldw	r11,140(sp)
    d580:	da802417 	ldw	r10,144(sp)
    d584:	58800017 	ldw	r2,0(r11)
    d588:	5ac00104 	addi	r11,r11,4
    d58c:	dac02315 	stw	r11,140(sp)
    d590:	1280000d 	sth	r10,0(r2)
    d594:	003e8306 	br	cfa4 <__alt_mem_Flash_flash_data+0xf400cfa4>
    d598:	8c400054 	ori	r17,r17,1
    d59c:	a9000007 	ldb	r4,0(r21)
    d5a0:	003ea806 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d5a4:	30803fcc 	andi	r2,r6,255
    d5a8:	1080201c 	xori	r2,r2,128
    d5ac:	10bfe004 	addi	r2,r2,-128
    d5b0:	1001f91e 	bne	r2,zero,dd98 <___svfiprintf_internal_r+0xe84>
    d5b4:	01800804 	movi	r6,32
    d5b8:	a9000007 	ldb	r4,0(r21)
    d5bc:	003ea106 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d5c0:	008000b4 	movhi	r2,2
    d5c4:	10822e04 	addi	r2,r2,2232
    d5c8:	d8802a15 	stw	r2,168(sp)
    d5cc:	d9801d85 	stb	r6,118(sp)
    d5d0:	8880080c 	andi	r2,r17,32
    d5d4:	103fce1e 	bne	r2,zero,d510 <__alt_mem_Flash_flash_data+0xf400d510>
    d5d8:	8880040c 	andi	r2,r17,16
    d5dc:	1001e526 	beq	r2,zero,dd74 <___svfiprintf_internal_r+0xe60>
    d5e0:	da802317 	ldw	r10,140(sp)
    d5e4:	dac02317 	ldw	r11,140(sp)
    d5e8:	52400017 	ldw	r9,0(r10)
    d5ec:	8880004c 	andi	r2,r17,1
    d5f0:	5ac00104 	addi	r11,r11,4
    d5f4:	dac02315 	stw	r11,140(sp)
    d5f8:	0015883a 	mov	r10,zero
    d5fc:	103fcc1e 	bne	r2,zero,d530 <__alt_mem_Flash_flash_data+0xf400d530>
    d600:	00800084 	movi	r2,2
    d604:	4a86b03a 	or	r3,r9,r10
    d608:	003efb06 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    d60c:	8c400414 	ori	r17,r17,16
    d610:	d9801d85 	stb	r6,118(sp)
    d614:	8880080c 	andi	r2,r17,32
    d618:	d8c02317 	ldw	r3,140(sp)
    d61c:	103f651e 	bne	r2,zero,d3b4 <__alt_mem_Flash_flash_data+0xf400d3b4>
    d620:	8880040c 	andi	r2,r17,16
    d624:	1001c61e 	bne	r2,zero,dd40 <___svfiprintf_internal_r+0xe2c>
    d628:	8880100c 	andi	r2,r17,64
    d62c:	1001c426 	beq	r2,zero,dd40 <___svfiprintf_internal_r+0xe2c>
    d630:	1a40000f 	ldh	r9,0(r3)
    d634:	dac02317 	ldw	r11,140(sp)
    d638:	4815d7fa 	srai	r10,r9,31
    d63c:	5ac00104 	addi	r11,r11,4
    d640:	dac02315 	stw	r11,140(sp)
    d644:	5005883a 	mov	r2,r10
    d648:	103f610e 	bge	r2,zero,d3d0 <__alt_mem_Flash_flash_data+0xf400d3d0>
    d64c:	0253c83a 	sub	r9,zero,r9
    d650:	4804c03a 	cmpne	r2,r9,zero
    d654:	0295c83a 	sub	r10,zero,r10
    d658:	5095c83a 	sub	r10,r10,r2
    d65c:	02c00b44 	movi	r11,45
    d660:	dac01d85 	stb	r11,118(sp)
    d664:	8039883a 	mov	fp,r16
    d668:	00800044 	movi	r2,1
    d66c:	4a86b03a 	or	r3,r9,r10
    d670:	003ee406 	br	d204 <__alt_mem_Flash_flash_data+0xf400d204>
    d674:	a815883a 	mov	r10,r21
    d678:	d8002115 	stw	zero,132(sp)
    d67c:	20bff404 	addi	r2,r4,-48
    d680:	51000007 	ldb	r4,0(r10)
    d684:	da802117 	ldw	r10,132(sp)
    d688:	ad400044 	addi	r21,r21,1
    d68c:	52c002a4 	muli	r11,r10,10
    d690:	a815883a 	mov	r10,r21
    d694:	5885883a 	add	r2,r11,r2
    d698:	d8802115 	stw	r2,132(sp)
    d69c:	20bff404 	addi	r2,r4,-48
    d6a0:	28bff72e 	bgeu	r5,r2,d680 <__alt_mem_Flash_flash_data+0xf400d680>
    d6a4:	20bff804 	addi	r2,r4,-32
    d6a8:	18be692e 	bgeu	r3,r2,d050 <__alt_mem_Flash_flash_data+0xf400d050>
    d6ac:	d9801d85 	stb	r6,118(sp)
    d6b0:	2000ce26 	beq	r4,zero,d9ec <___svfiprintf_internal_r+0xad8>
    d6b4:	02800044 	movi	r10,1
    d6b8:	dac01004 	addi	r11,sp,64
    d6bc:	da802015 	stw	r10,128(sp)
    d6c0:	d9001005 	stb	r4,64(sp)
    d6c4:	d8001d85 	stb	zero,118(sp)
    d6c8:	5039883a 	mov	fp,r10
    d6cc:	dac02615 	stw	r11,152(sp)
    d6d0:	003f4f06 	br	d410 <__alt_mem_Flash_flash_data+0xf400d410>
    d6d4:	8c402014 	ori	r17,r17,128
    d6d8:	a9000007 	ldb	r4,0(r21)
    d6dc:	003e5906 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d6e0:	01800ac4 	movi	r6,43
    d6e4:	a9000007 	ldb	r4,0(r21)
    d6e8:	003e5606 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    d6ec:	a9000007 	ldb	r4,0(r21)
    d6f0:	aa800044 	addi	r10,r21,1
    d6f4:	22420626 	beq	r4,r9,df10 <___svfiprintf_internal_r+0xffc>
    d6f8:	20bff404 	addi	r2,r4,-48
    d6fc:	502b883a 	mov	r21,r10
    d700:	0021883a 	mov	r16,zero
    d704:	28be5036 	bltu	r5,r2,d048 <__alt_mem_Flash_flash_data+0xf400d048>
    d708:	a9000007 	ldb	r4,0(r21)
    d70c:	840002a4 	muli	r16,r16,10
    d710:	ad400044 	addi	r21,r21,1
    d714:	1421883a 	add	r16,r2,r16
    d718:	20bff404 	addi	r2,r4,-48
    d71c:	28bffa2e 	bgeu	r5,r2,d708 <__alt_mem_Flash_flash_data+0xf400d708>
    d720:	803e490e 	bge	r16,zero,d048 <__alt_mem_Flash_flash_data+0xf400d048>
    d724:	043fffc4 	movi	r16,-1
    d728:	003e4706 	br	d048 <__alt_mem_Flash_flash_data+0xf400d048>
    d72c:	d8c01c17 	ldw	r3,112(sp)
    d730:	d8801b17 	ldw	r2,108(sp)
    d734:	d9001d87 	ldb	r4,118(sp)
    d738:	20000b26 	beq	r4,zero,d768 <___svfiprintf_internal_r+0x854>
    d73c:	d9001d84 	addi	r4,sp,118
    d740:	18c00044 	addi	r3,r3,1
    d744:	10800044 	addi	r2,r2,1
    d748:	41000015 	stw	r4,0(r8)
    d74c:	01000044 	movi	r4,1
    d750:	41000115 	stw	r4,4(r8)
    d754:	d8c01c15 	stw	r3,112(sp)
    d758:	d8801b15 	stw	r2,108(sp)
    d75c:	010001c4 	movi	r4,7
    d760:	20811e16 	blt	r4,r2,dbdc <___svfiprintf_internal_r+0xcc8>
    d764:	42000204 	addi	r8,r8,8
    d768:	da802217 	ldw	r10,136(sp)
    d76c:	50000b26 	beq	r10,zero,d79c <___svfiprintf_internal_r+0x888>
    d770:	d9001d04 	addi	r4,sp,116
    d774:	18c00084 	addi	r3,r3,2
    d778:	10800044 	addi	r2,r2,1
    d77c:	41000015 	stw	r4,0(r8)
    d780:	01000084 	movi	r4,2
    d784:	41000115 	stw	r4,4(r8)
    d788:	d8c01c15 	stw	r3,112(sp)
    d78c:	d8801b15 	stw	r2,108(sp)
    d790:	010001c4 	movi	r4,7
    d794:	20811a16 	blt	r4,r2,dc00 <___svfiprintf_internal_r+0xcec>
    d798:	42000204 	addi	r8,r8,8
    d79c:	dac02517 	ldw	r11,148(sp)
    d7a0:	01002004 	movi	r4,128
    d7a4:	5900a826 	beq	r11,r4,da48 <___svfiprintf_internal_r+0xb34>
    d7a8:	8721c83a 	sub	r16,r16,fp
    d7ac:	0400260e 	bge	zero,r16,d848 <___svfiprintf_internal_r+0x934>
    d7b0:	01c00404 	movi	r7,16
    d7b4:	3c019d0e 	bge	r7,r16,de2c <___svfiprintf_internal_r+0xf18>
    d7b8:	010000b4 	movhi	r4,2
    d7bc:	21029704 	addi	r4,r4,2652
    d7c0:	d9002215 	stw	r4,136(sp)
    d7c4:	382f883a 	mov	r23,r7
    d7c8:	058001c4 	movi	r22,7
    d7cc:	00000306 	br	d7dc <___svfiprintf_internal_r+0x8c8>
    d7d0:	843ffc04 	addi	r16,r16,-16
    d7d4:	42000204 	addi	r8,r8,8
    d7d8:	bc00110e 	bge	r23,r16,d820 <___svfiprintf_internal_r+0x90c>
    d7dc:	18c00404 	addi	r3,r3,16
    d7e0:	10800044 	addi	r2,r2,1
    d7e4:	44c00015 	stw	r19,0(r8)
    d7e8:	45c00115 	stw	r23,4(r8)
    d7ec:	d8c01c15 	stw	r3,112(sp)
    d7f0:	d8801b15 	stw	r2,108(sp)
    d7f4:	b0bff60e 	bge	r22,r2,d7d0 <__alt_mem_Flash_flash_data+0xf400d7d0>
    d7f8:	9009883a 	mov	r4,r18
    d7fc:	a00b883a 	mov	r5,r20
    d800:	d9801a04 	addi	r6,sp,104
    d804:	000cd480 	call	cd48 <__ssprint_r>
    d808:	10007e1e 	bne	r2,zero,da04 <___svfiprintf_internal_r+0xaf0>
    d80c:	843ffc04 	addi	r16,r16,-16
    d810:	d8c01c17 	ldw	r3,112(sp)
    d814:	d8801b17 	ldw	r2,108(sp)
    d818:	d811883a 	mov	r8,sp
    d81c:	bc3fef16 	blt	r23,r16,d7dc <__alt_mem_Flash_flash_data+0xf400d7dc>
    d820:	da802217 	ldw	r10,136(sp)
    d824:	1c07883a 	add	r3,r3,r16
    d828:	10800044 	addi	r2,r2,1
    d82c:	42800015 	stw	r10,0(r8)
    d830:	44000115 	stw	r16,4(r8)
    d834:	d8c01c15 	stw	r3,112(sp)
    d838:	d8801b15 	stw	r2,108(sp)
    d83c:	010001c4 	movi	r4,7
    d840:	2080ce16 	blt	r4,r2,db7c <___svfiprintf_internal_r+0xc68>
    d844:	42000204 	addi	r8,r8,8
    d848:	dac02617 	ldw	r11,152(sp)
    d84c:	1f07883a 	add	r3,r3,fp
    d850:	10800044 	addi	r2,r2,1
    d854:	42c00015 	stw	r11,0(r8)
    d858:	47000115 	stw	fp,4(r8)
    d85c:	d8c01c15 	stw	r3,112(sp)
    d860:	d8801b15 	stw	r2,108(sp)
    d864:	010001c4 	movi	r4,7
    d868:	2080a316 	blt	r4,r2,daf8 <___svfiprintf_internal_r+0xbe4>
    d86c:	42000204 	addi	r8,r8,8
    d870:	8c40010c 	andi	r17,r17,4
    d874:	88002b26 	beq	r17,zero,d924 <___svfiprintf_internal_r+0xa10>
    d878:	da802117 	ldw	r10,132(sp)
    d87c:	dac02017 	ldw	r11,128(sp)
    d880:	52e1c83a 	sub	r16,r10,r11
    d884:	0400270e 	bge	zero,r16,d924 <___svfiprintf_internal_r+0xa10>
    d888:	04400404 	movi	r17,16
    d88c:	d8801b17 	ldw	r2,108(sp)
    d890:	8c01900e 	bge	r17,r16,ded4 <___svfiprintf_internal_r+0xfc0>
    d894:	014000b4 	movhi	r5,2
    d898:	29429b04 	addi	r5,r5,2668
    d89c:	d9402815 	stw	r5,160(sp)
    d8a0:	070001c4 	movi	fp,7
    d8a4:	00000306 	br	d8b4 <___svfiprintf_internal_r+0x9a0>
    d8a8:	843ffc04 	addi	r16,r16,-16
    d8ac:	42000204 	addi	r8,r8,8
    d8b0:	8c00130e 	bge	r17,r16,d900 <___svfiprintf_internal_r+0x9ec>
    d8b4:	028000b4 	movhi	r10,2
    d8b8:	18c00404 	addi	r3,r3,16
    d8bc:	10800044 	addi	r2,r2,1
    d8c0:	52829b04 	addi	r10,r10,2668
    d8c4:	42800015 	stw	r10,0(r8)
    d8c8:	44400115 	stw	r17,4(r8)
    d8cc:	d8c01c15 	stw	r3,112(sp)
    d8d0:	d8801b15 	stw	r2,108(sp)
    d8d4:	e0bff40e 	bge	fp,r2,d8a8 <__alt_mem_Flash_flash_data+0xf400d8a8>
    d8d8:	9009883a 	mov	r4,r18
    d8dc:	a00b883a 	mov	r5,r20
    d8e0:	d9801a04 	addi	r6,sp,104
    d8e4:	000cd480 	call	cd48 <__ssprint_r>
    d8e8:	1000461e 	bne	r2,zero,da04 <___svfiprintf_internal_r+0xaf0>
    d8ec:	843ffc04 	addi	r16,r16,-16
    d8f0:	d8c01c17 	ldw	r3,112(sp)
    d8f4:	d8801b17 	ldw	r2,108(sp)
    d8f8:	d811883a 	mov	r8,sp
    d8fc:	8c3fed16 	blt	r17,r16,d8b4 <__alt_mem_Flash_flash_data+0xf400d8b4>
    d900:	dac02817 	ldw	r11,160(sp)
    d904:	1c07883a 	add	r3,r3,r16
    d908:	10800044 	addi	r2,r2,1
    d90c:	42c00015 	stw	r11,0(r8)
    d910:	44000115 	stw	r16,4(r8)
    d914:	d8c01c15 	stw	r3,112(sp)
    d918:	d8801b15 	stw	r2,108(sp)
    d91c:	010001c4 	movi	r4,7
    d920:	2080fd16 	blt	r4,r2,dd18 <___svfiprintf_internal_r+0xe04>
    d924:	dd802017 	ldw	r22,128(sp)
    d928:	da802117 	ldw	r10,132(sp)
    d92c:	b280010e 	bge	r22,r10,d934 <___svfiprintf_internal_r+0xa20>
    d930:	502d883a 	mov	r22,r10
    d934:	dac02417 	ldw	r11,144(sp)
    d938:	5d97883a 	add	r11,r11,r22
    d93c:	dac02415 	stw	r11,144(sp)
    d940:	1800751e 	bne	r3,zero,db18 <___svfiprintf_internal_r+0xc04>
    d944:	a8800007 	ldb	r2,0(r21)
    d948:	d8001b15 	stw	zero,108(sp)
    d94c:	d811883a 	mov	r8,sp
    d950:	103d961e 	bne	r2,zero,cfac <__alt_mem_Flash_flash_data+0xf400cfac>
    d954:	a82d883a 	mov	r22,r21
    d958:	003dad06 	br	d010 <__alt_mem_Flash_flash_data+0xf400d010>
    d95c:	10803fcc 	andi	r2,r2,255
    d960:	00c00044 	movi	r3,1
    d964:	10fe2f1e 	bne	r2,r3,d224 <__alt_mem_Flash_flash_data+0xf400d224>
    d968:	5000e026 	beq	r10,zero,dcec <___svfiprintf_internal_r+0xdd8>
    d96c:	dc002015 	stw	r16,128(sp)
    d970:	dc402215 	stw	r17,136(sp)
    d974:	dd801a04 	addi	r22,sp,104
    d978:	402f883a 	mov	r23,r8
    d97c:	5839883a 	mov	fp,r11
    d980:	4821883a 	mov	r16,r9
    d984:	5023883a 	mov	r17,r10
    d988:	8009883a 	mov	r4,r16
    d98c:	880b883a 	mov	r5,r17
    d990:	01800284 	movi	r6,10
    d994:	000f883a 	mov	r7,zero
    d998:	00102c80 	call	102c8 <__umoddi3>
    d99c:	10800c04 	addi	r2,r2,48
    d9a0:	b5bfffc4 	addi	r22,r22,-1
    d9a4:	8009883a 	mov	r4,r16
    d9a8:	880b883a 	mov	r5,r17
    d9ac:	01800284 	movi	r6,10
    d9b0:	000f883a 	mov	r7,zero
    d9b4:	b0800005 	stb	r2,0(r22)
    d9b8:	000fd080 	call	fd08 <__udivdi3>
    d9bc:	1021883a 	mov	r16,r2
    d9c0:	10c4b03a 	or	r2,r2,r3
    d9c4:	1823883a 	mov	r17,r3
    d9c8:	103fef1e 	bne	r2,zero,d988 <__alt_mem_Flash_flash_data+0xf400d988>
    d9cc:	da801e17 	ldw	r10,120(sp)
    d9d0:	e017883a 	mov	r11,fp
    d9d4:	dc002017 	ldw	r16,128(sp)
    d9d8:	dc402217 	ldw	r17,136(sp)
    d9dc:	b811883a 	mov	r8,r23
    d9e0:	dd802615 	stw	r22,152(sp)
    d9e4:	55b9c83a 	sub	fp,r10,r22
    d9e8:	003e2006 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    d9ec:	d8801c17 	ldw	r2,112(sp)
    d9f0:	10000426 	beq	r2,zero,da04 <___svfiprintf_internal_r+0xaf0>
    d9f4:	d9002917 	ldw	r4,164(sp)
    d9f8:	d9402717 	ldw	r5,156(sp)
    d9fc:	d9801a04 	addi	r6,sp,104
    da00:	000cd480 	call	cd48 <__ssprint_r>
    da04:	da802717 	ldw	r10,156(sp)
    da08:	5080030b 	ldhu	r2,12(r10)
    da0c:	1080100c 	andi	r2,r2,64
    da10:	1000511e 	bne	r2,zero,db58 <___svfiprintf_internal_r+0xc44>
    da14:	d8802417 	ldw	r2,144(sp)
    da18:	dfc03617 	ldw	ra,216(sp)
    da1c:	df003517 	ldw	fp,212(sp)
    da20:	ddc03417 	ldw	r23,208(sp)
    da24:	dd803317 	ldw	r22,204(sp)
    da28:	dd403217 	ldw	r21,200(sp)
    da2c:	dd003117 	ldw	r20,196(sp)
    da30:	dcc03017 	ldw	r19,192(sp)
    da34:	dc802f17 	ldw	r18,188(sp)
    da38:	dc402e17 	ldw	r17,184(sp)
    da3c:	dc002d17 	ldw	r16,180(sp)
    da40:	dec03704 	addi	sp,sp,220
    da44:	f800283a 	ret
    da48:	da802117 	ldw	r10,132(sp)
    da4c:	dac02017 	ldw	r11,128(sp)
    da50:	52edc83a 	sub	r22,r10,r11
    da54:	05bf540e 	bge	zero,r22,d7a8 <__alt_mem_Flash_flash_data+0xf400d7a8>
    da58:	02400404 	movi	r9,16
    da5c:	4d81210e 	bge	r9,r22,dee4 <___svfiprintf_internal_r+0xfd0>
    da60:	014000b4 	movhi	r5,2
    da64:	29429704 	addi	r5,r5,2652
    da68:	d9402215 	stw	r5,136(sp)
    da6c:	05c001c4 	movi	r23,7
    da70:	00000306 	br	da80 <___svfiprintf_internal_r+0xb6c>
    da74:	b5bffc04 	addi	r22,r22,-16
    da78:	42000204 	addi	r8,r8,8
    da7c:	4d80130e 	bge	r9,r22,dacc <___svfiprintf_internal_r+0xbb8>
    da80:	18c00404 	addi	r3,r3,16
    da84:	10800044 	addi	r2,r2,1
    da88:	44c00015 	stw	r19,0(r8)
    da8c:	42400115 	stw	r9,4(r8)
    da90:	d8c01c15 	stw	r3,112(sp)
    da94:	d8801b15 	stw	r2,108(sp)
    da98:	b8bff60e 	bge	r23,r2,da74 <__alt_mem_Flash_flash_data+0xf400da74>
    da9c:	9009883a 	mov	r4,r18
    daa0:	a00b883a 	mov	r5,r20
    daa4:	d9801a04 	addi	r6,sp,104
    daa8:	da402c15 	stw	r9,176(sp)
    daac:	000cd480 	call	cd48 <__ssprint_r>
    dab0:	da402c17 	ldw	r9,176(sp)
    dab4:	103fd31e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    dab8:	b5bffc04 	addi	r22,r22,-16
    dabc:	d8c01c17 	ldw	r3,112(sp)
    dac0:	d8801b17 	ldw	r2,108(sp)
    dac4:	d811883a 	mov	r8,sp
    dac8:	4dbfed16 	blt	r9,r22,da80 <__alt_mem_Flash_flash_data+0xf400da80>
    dacc:	da802217 	ldw	r10,136(sp)
    dad0:	1d87883a 	add	r3,r3,r22
    dad4:	10800044 	addi	r2,r2,1
    dad8:	42800015 	stw	r10,0(r8)
    dadc:	45800115 	stw	r22,4(r8)
    dae0:	d8c01c15 	stw	r3,112(sp)
    dae4:	d8801b15 	stw	r2,108(sp)
    dae8:	010001c4 	movi	r4,7
    daec:	2080c616 	blt	r4,r2,de08 <___svfiprintf_internal_r+0xef4>
    daf0:	42000204 	addi	r8,r8,8
    daf4:	003f2c06 	br	d7a8 <__alt_mem_Flash_flash_data+0xf400d7a8>
    daf8:	9009883a 	mov	r4,r18
    dafc:	a00b883a 	mov	r5,r20
    db00:	d9801a04 	addi	r6,sp,104
    db04:	000cd480 	call	cd48 <__ssprint_r>
    db08:	103fbe1e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    db0c:	d8c01c17 	ldw	r3,112(sp)
    db10:	d811883a 	mov	r8,sp
    db14:	003f5606 	br	d870 <__alt_mem_Flash_flash_data+0xf400d870>
    db18:	9009883a 	mov	r4,r18
    db1c:	a00b883a 	mov	r5,r20
    db20:	d9801a04 	addi	r6,sp,104
    db24:	000cd480 	call	cd48 <__ssprint_r>
    db28:	103f8626 	beq	r2,zero,d944 <__alt_mem_Flash_flash_data+0xf400d944>
    db2c:	003fb506 	br	da04 <__alt_mem_Flash_flash_data+0xf400da04>
    db30:	10803fcc 	andi	r2,r2,255
    db34:	10003b1e 	bne	r2,zero,dc24 <___svfiprintf_internal_r+0xd10>
    db38:	8880004c 	andi	r2,r17,1
    db3c:	10007d26 	beq	r2,zero,dd34 <___svfiprintf_internal_r+0xe20>
    db40:	00800c04 	movi	r2,48
    db44:	d8c019c4 	addi	r3,sp,103
    db48:	d88019c5 	stb	r2,103(sp)
    db4c:	df002b17 	ldw	fp,172(sp)
    db50:	d8c02615 	stw	r3,152(sp)
    db54:	003dc506 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    db58:	00bfffc4 	movi	r2,-1
    db5c:	003fae06 	br	da18 <__alt_mem_Flash_flash_data+0xf400da18>
    db60:	9009883a 	mov	r4,r18
    db64:	a00b883a 	mov	r5,r20
    db68:	d9801a04 	addi	r6,sp,104
    db6c:	000cd480 	call	cd48 <__ssprint_r>
    db70:	103fa41e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    db74:	d811883a 	mov	r8,sp
    db78:	003d2206 	br	d004 <__alt_mem_Flash_flash_data+0xf400d004>
    db7c:	9009883a 	mov	r4,r18
    db80:	a00b883a 	mov	r5,r20
    db84:	d9801a04 	addi	r6,sp,104
    db88:	000cd480 	call	cd48 <__ssprint_r>
    db8c:	103f9d1e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    db90:	d8c01c17 	ldw	r3,112(sp)
    db94:	d8801b17 	ldw	r2,108(sp)
    db98:	d811883a 	mov	r8,sp
    db9c:	003f2a06 	br	d848 <__alt_mem_Flash_flash_data+0xf400d848>
    dba0:	d9402a17 	ldw	r5,168(sp)
    dba4:	d8c01a04 	addi	r3,sp,104
    dba8:	488003cc 	andi	r2,r9,15
    dbac:	5008973a 	slli	r4,r10,28
    dbb0:	2885883a 	add	r2,r5,r2
    dbb4:	4812d13a 	srli	r9,r9,4
    dbb8:	10800003 	ldbu	r2,0(r2)
    dbbc:	5014d13a 	srli	r10,r10,4
    dbc0:	18ffffc4 	addi	r3,r3,-1
    dbc4:	2252b03a 	or	r9,r4,r9
    dbc8:	18800005 	stb	r2,0(r3)
    dbcc:	4a84b03a 	or	r2,r9,r10
    dbd0:	103ff51e 	bne	r2,zero,dba8 <__alt_mem_Flash_flash_data+0xf400dba8>
    dbd4:	d8c02615 	stw	r3,152(sp)
    dbd8:	003da206 	br	d264 <__alt_mem_Flash_flash_data+0xf400d264>
    dbdc:	9009883a 	mov	r4,r18
    dbe0:	a00b883a 	mov	r5,r20
    dbe4:	d9801a04 	addi	r6,sp,104
    dbe8:	000cd480 	call	cd48 <__ssprint_r>
    dbec:	103f851e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    dbf0:	d8c01c17 	ldw	r3,112(sp)
    dbf4:	d8801b17 	ldw	r2,108(sp)
    dbf8:	d811883a 	mov	r8,sp
    dbfc:	003eda06 	br	d768 <__alt_mem_Flash_flash_data+0xf400d768>
    dc00:	9009883a 	mov	r4,r18
    dc04:	a00b883a 	mov	r5,r20
    dc08:	d9801a04 	addi	r6,sp,104
    dc0c:	000cd480 	call	cd48 <__ssprint_r>
    dc10:	103f7c1e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    dc14:	d8c01c17 	ldw	r3,112(sp)
    dc18:	d8801b17 	ldw	r2,108(sp)
    dc1c:	d811883a 	mov	r8,sp
    dc20:	003ede06 	br	d79c <__alt_mem_Flash_flash_data+0xf400d79c>
    dc24:	da801a04 	addi	r10,sp,104
    dc28:	da802615 	stw	r10,152(sp)
    dc2c:	003d8f06 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    dc30:	8880040c 	andi	r2,r17,16
    dc34:	10004c1e 	bne	r2,zero,dd68 <___svfiprintf_internal_r+0xe54>
    dc38:	8880100c 	andi	r2,r17,64
    dc3c:	da802317 	ldw	r10,140(sp)
    dc40:	10004a26 	beq	r2,zero,dd6c <___svfiprintf_internal_r+0xe58>
    dc44:	5240000b 	ldhu	r9,0(r10)
    dc48:	dac02317 	ldw	r11,140(sp)
    dc4c:	0015883a 	mov	r10,zero
    dc50:	00800044 	movi	r2,1
    dc54:	5ac00104 	addi	r11,r11,4
    dc58:	dac02315 	stw	r11,140(sp)
    dc5c:	4807883a 	mov	r3,r9
    dc60:	003d6506 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    dc64:	9009883a 	mov	r4,r18
    dc68:	a00b883a 	mov	r5,r20
    dc6c:	d9801a04 	addi	r6,sp,104
    dc70:	000cd480 	call	cd48 <__ssprint_r>
    dc74:	103f631e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    dc78:	d8c01c17 	ldw	r3,112(sp)
    dc7c:	d8801b17 	ldw	r2,108(sp)
    dc80:	d811883a 	mov	r8,sp
    dc84:	003eab06 	br	d734 <__alt_mem_Flash_flash_data+0xf400d734>
    dc88:	8880040c 	andi	r2,r17,16
    dc8c:	1000331e 	bne	r2,zero,dd5c <___svfiprintf_internal_r+0xe48>
    dc90:	8880100c 	andi	r2,r17,64
    dc94:	da802317 	ldw	r10,140(sp)
    dc98:	10003126 	beq	r2,zero,dd60 <___svfiprintf_internal_r+0xe4c>
    dc9c:	5240000b 	ldhu	r9,0(r10)
    dca0:	dac02317 	ldw	r11,140(sp)
    dca4:	0015883a 	mov	r10,zero
    dca8:	0005883a 	mov	r2,zero
    dcac:	5ac00104 	addi	r11,r11,4
    dcb0:	dac02315 	stw	r11,140(sp)
    dcb4:	4807883a 	mov	r3,r9
    dcb8:	003d4f06 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    dcbc:	10803fcc 	andi	r2,r2,255
    dcc0:	1080201c 	xori	r2,r2,128
    dcc4:	10bfe004 	addi	r2,r2,-128
    dcc8:	01000c04 	movi	r4,48
    dccc:	11005b26 	beq	r2,r4,de3c <___svfiprintf_internal_r+0xf28>
    dcd0:	da802617 	ldw	r10,152(sp)
    dcd4:	d8801e17 	ldw	r2,120(sp)
    dcd8:	193fffc5 	stb	r4,-1(r3)
    dcdc:	52bfffc4 	addi	r10,r10,-1
    dce0:	da802615 	stw	r10,152(sp)
    dce4:	12b9c83a 	sub	fp,r2,r10
    dce8:	003d6006 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    dcec:	00800244 	movi	r2,9
    dcf0:	127f1e36 	bltu	r2,r9,d96c <__alt_mem_Flash_flash_data+0xf400d96c>
    dcf4:	4a400c04 	addi	r9,r9,48
    dcf8:	d8c019c4 	addi	r3,sp,103
    dcfc:	da4019c5 	stb	r9,103(sp)
    dd00:	df002b17 	ldw	fp,172(sp)
    dd04:	d8c02615 	stw	r3,152(sp)
    dd08:	003d5806 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    dd0c:	d8802315 	stw	r2,140(sp)
    dd10:	a9000007 	ldb	r4,0(r21)
    dd14:	003ccb06 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    dd18:	9009883a 	mov	r4,r18
    dd1c:	a00b883a 	mov	r5,r20
    dd20:	d9801a04 	addi	r6,sp,104
    dd24:	000cd480 	call	cd48 <__ssprint_r>
    dd28:	103f361e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    dd2c:	d8c01c17 	ldw	r3,112(sp)
    dd30:	003efc06 	br	d924 <__alt_mem_Flash_flash_data+0xf400d924>
    dd34:	d8c01a04 	addi	r3,sp,104
    dd38:	d8c02615 	stw	r3,152(sp)
    dd3c:	003d4b06 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    dd40:	da802317 	ldw	r10,140(sp)
    dd44:	1a400017 	ldw	r9,0(r3)
    dd48:	52800104 	addi	r10,r10,4
    dd4c:	da802315 	stw	r10,140(sp)
    dd50:	4815d7fa 	srai	r10,r9,31
    dd54:	5005883a 	mov	r2,r10
    dd58:	003d9c06 	br	d3cc <__alt_mem_Flash_flash_data+0xf400d3cc>
    dd5c:	da802317 	ldw	r10,140(sp)
    dd60:	52400017 	ldw	r9,0(r10)
    dd64:	003fce06 	br	dca0 <__alt_mem_Flash_flash_data+0xf400dca0>
    dd68:	da802317 	ldw	r10,140(sp)
    dd6c:	52400017 	ldw	r9,0(r10)
    dd70:	003fb506 	br	dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    dd74:	8880100c 	andi	r2,r17,64
    dd78:	da802317 	ldw	r10,140(sp)
    dd7c:	103e1926 	beq	r2,zero,d5e4 <__alt_mem_Flash_flash_data+0xf400d5e4>
    dd80:	dac02317 	ldw	r11,140(sp)
    dd84:	5240000b 	ldhu	r9,0(r10)
    dd88:	0015883a 	mov	r10,zero
    dd8c:	5ac00104 	addi	r11,r11,4
    dd90:	dac02315 	stw	r11,140(sp)
    dd94:	003de406 	br	d528 <__alt_mem_Flash_flash_data+0xf400d528>
    dd98:	a9000007 	ldb	r4,0(r21)
    dd9c:	003ca906 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    dda0:	dac02317 	ldw	r11,140(sp)
    dda4:	da802417 	ldw	r10,144(sp)
    dda8:	58800017 	ldw	r2,0(r11)
    ddac:	5007d7fa 	srai	r3,r10,31
    ddb0:	5ac00104 	addi	r11,r11,4
    ddb4:	dac02315 	stw	r11,140(sp)
    ddb8:	12800015 	stw	r10,0(r2)
    ddbc:	10c00115 	stw	r3,4(r2)
    ddc0:	003c7806 	br	cfa4 <__alt_mem_Flash_flash_data+0xf400cfa4>
    ddc4:	00800c04 	movi	r2,48
    ddc8:	d8801d05 	stb	r2,116(sp)
    ddcc:	d9001d45 	stb	r4,117(sp)
    ddd0:	8c400094 	ori	r17,r17,2
    ddd4:	00800084 	movi	r2,2
    ddd8:	003d0706 	br	d1f8 <__alt_mem_Flash_flash_data+0xf400d1f8>
    dddc:	ad400044 	addi	r21,r21,1
    dde0:	8c400814 	ori	r17,r17,32
    dde4:	11000047 	ldb	r4,1(r2)
    dde8:	003c9606 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    ddec:	dac02317 	ldw	r11,140(sp)
    ddf0:	da802417 	ldw	r10,144(sp)
    ddf4:	58800017 	ldw	r2,0(r11)
    ddf8:	5ac00104 	addi	r11,r11,4
    ddfc:	dac02315 	stw	r11,140(sp)
    de00:	12800015 	stw	r10,0(r2)
    de04:	003c6706 	br	cfa4 <__alt_mem_Flash_flash_data+0xf400cfa4>
    de08:	9009883a 	mov	r4,r18
    de0c:	a00b883a 	mov	r5,r20
    de10:	d9801a04 	addi	r6,sp,104
    de14:	000cd480 	call	cd48 <__ssprint_r>
    de18:	103efa1e 	bne	r2,zero,da04 <__alt_mem_Flash_flash_data+0xf400da04>
    de1c:	d8c01c17 	ldw	r3,112(sp)
    de20:	d8801b17 	ldw	r2,108(sp)
    de24:	d811883a 	mov	r8,sp
    de28:	003e5f06 	br	d7a8 <__alt_mem_Flash_flash_data+0xf400d7a8>
    de2c:	02c000b4 	movhi	r11,2
    de30:	5ac29704 	addi	r11,r11,2652
    de34:	dac02215 	stw	r11,136(sp)
    de38:	003e7906 	br	d820 <__alt_mem_Flash_flash_data+0xf400d820>
    de3c:	da801e17 	ldw	r10,120(sp)
    de40:	d8c02617 	ldw	r3,152(sp)
    de44:	50f9c83a 	sub	fp,r10,r3
    de48:	003d0806 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    de4c:	da002c15 	stw	r8,176(sp)
    de50:	0003b540 	call	3b54 <strlen>
    de54:	1039883a 	mov	fp,r2
    de58:	dac01d83 	ldbu	r11,118(sp)
    de5c:	ddc02315 	stw	r23,140(sp)
    de60:	0021883a 	mov	r16,zero
    de64:	da002c17 	ldw	r8,176(sp)
    de68:	003d0006 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    de6c:	00800184 	movi	r2,6
    de70:	1400012e 	bgeu	r2,r16,de78 <___svfiprintf_internal_r+0xf64>
    de74:	1021883a 	mov	r16,r2
    de78:	8039883a 	mov	fp,r16
    de7c:	802d883a 	mov	r22,r16
    de80:	80002116 	blt	r16,zero,df08 <___svfiprintf_internal_r+0xff4>
    de84:	008000b4 	movhi	r2,2
    de88:	10823304 	addi	r2,r2,2252
    de8c:	dd802015 	stw	r22,128(sp)
    de90:	ddc02315 	stw	r23,140(sp)
    de94:	d8802615 	stw	r2,152(sp)
    de98:	003d5d06 	br	d410 <__alt_mem_Flash_flash_data+0xf400d410>
    de9c:	04001004 	movi	r16,64
    dea0:	800b883a 	mov	r5,r16
    dea4:	000a9500 	call	a950 <_malloc_r>
    dea8:	da802717 	ldw	r10,156(sp)
    deac:	50800015 	stw	r2,0(r10)
    deb0:	50800415 	stw	r2,16(r10)
    deb4:	10002026 	beq	r2,zero,df38 <___svfiprintf_internal_r+0x1024>
    deb8:	da802717 	ldw	r10,156(sp)
    debc:	54000515 	stw	r16,20(r10)
    dec0:	003c2806 	br	cf64 <__alt_mem_Flash_flash_data+0xf400cf64>
    dec4:	010000b4 	movhi	r4,2
    dec8:	21029b04 	addi	r4,r4,2668
    decc:	d9002815 	stw	r4,160(sp)
    ded0:	003d7e06 	br	d4cc <__alt_mem_Flash_flash_data+0xf400d4cc>
    ded4:	010000b4 	movhi	r4,2
    ded8:	21029b04 	addi	r4,r4,2668
    dedc:	d9002815 	stw	r4,160(sp)
    dee0:	003e8706 	br	d900 <__alt_mem_Flash_flash_data+0xf400d900>
    dee4:	010000b4 	movhi	r4,2
    dee8:	21029704 	addi	r4,r4,2652
    deec:	d9002215 	stw	r4,136(sp)
    def0:	003ef606 	br	dacc <__alt_mem_Flash_flash_data+0xf400dacc>
    def4:	8039883a 	mov	fp,r16
    def8:	dac01d83 	ldbu	r11,118(sp)
    defc:	ddc02315 	stw	r23,140(sp)
    df00:	0021883a 	mov	r16,zero
    df04:	003cd906 	br	d26c <__alt_mem_Flash_flash_data+0xf400d26c>
    df08:	002d883a 	mov	r22,zero
    df0c:	003fdd06 	br	de84 <__alt_mem_Flash_flash_data+0xf400de84>
    df10:	dac02317 	ldw	r11,140(sp)
    df14:	a805883a 	mov	r2,r21
    df18:	502b883a 	mov	r21,r10
    df1c:	5c000017 	ldw	r16,0(r11)
    df20:	59000104 	addi	r4,r11,4
    df24:	d9002315 	stw	r4,140(sp)
    df28:	803fae0e 	bge	r16,zero,dde4 <__alt_mem_Flash_flash_data+0xf400dde4>
    df2c:	043fffc4 	movi	r16,-1
    df30:	11000047 	ldb	r4,1(r2)
    df34:	003c4306 	br	d044 <__alt_mem_Flash_flash_data+0xf400d044>
    df38:	dac02917 	ldw	r11,164(sp)
    df3c:	00800304 	movi	r2,12
    df40:	58800015 	stw	r2,0(r11)
    df44:	00bfffc4 	movi	r2,-1
    df48:	003eb306 	br	da18 <__alt_mem_Flash_flash_data+0xf400da18>

0000df4c <__sprint_r.part.0>:
    df4c:	28801917 	ldw	r2,100(r5)
    df50:	defff604 	addi	sp,sp,-40
    df54:	dd400515 	stw	r21,20(sp)
    df58:	dcc00315 	stw	r19,12(sp)
    df5c:	dfc00915 	stw	ra,36(sp)
    df60:	df000815 	stw	fp,32(sp)
    df64:	ddc00715 	stw	r23,28(sp)
    df68:	dd800615 	stw	r22,24(sp)
    df6c:	dd000415 	stw	r20,16(sp)
    df70:	dc800215 	stw	r18,8(sp)
    df74:	dc400115 	stw	r17,4(sp)
    df78:	dc000015 	stw	r16,0(sp)
    df7c:	1088000c 	andi	r2,r2,8192
    df80:	2827883a 	mov	r19,r5
    df84:	302b883a 	mov	r21,r6
    df88:	10002d26 	beq	r2,zero,e040 <__sprint_r.part.0+0xf4>
    df8c:	30800217 	ldw	r2,8(r6)
    df90:	35800017 	ldw	r22,0(r6)
    df94:	10002826 	beq	r2,zero,e038 <__sprint_r.part.0+0xec>
    df98:	2029883a 	mov	r20,r4
    df9c:	b5c00104 	addi	r23,r22,4
    dfa0:	04bfffc4 	movi	r18,-1
    dfa4:	bc400017 	ldw	r17,0(r23)
    dfa8:	b4000017 	ldw	r16,0(r22)
    dfac:	0039883a 	mov	fp,zero
    dfb0:	8822d0ba 	srli	r17,r17,2
    dfb4:	04400316 	blt	zero,r17,dfc4 <__sprint_r.part.0+0x78>
    dfb8:	00001806 	br	e01c <__sprint_r.part.0+0xd0>
    dfbc:	84000104 	addi	r16,r16,4
    dfc0:	8f001526 	beq	r17,fp,e018 <__sprint_r.part.0+0xcc>
    dfc4:	81400017 	ldw	r5,0(r16)
    dfc8:	a009883a 	mov	r4,r20
    dfcc:	980d883a 	mov	r6,r19
    dfd0:	000f6880 	call	f688 <_fputwc_r>
    dfd4:	e7000044 	addi	fp,fp,1
    dfd8:	14bff81e 	bne	r2,r18,dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    dfdc:	9005883a 	mov	r2,r18
    dfe0:	a8000215 	stw	zero,8(r21)
    dfe4:	a8000115 	stw	zero,4(r21)
    dfe8:	dfc00917 	ldw	ra,36(sp)
    dfec:	df000817 	ldw	fp,32(sp)
    dff0:	ddc00717 	ldw	r23,28(sp)
    dff4:	dd800617 	ldw	r22,24(sp)
    dff8:	dd400517 	ldw	r21,20(sp)
    dffc:	dd000417 	ldw	r20,16(sp)
    e000:	dcc00317 	ldw	r19,12(sp)
    e004:	dc800217 	ldw	r18,8(sp)
    e008:	dc400117 	ldw	r17,4(sp)
    e00c:	dc000017 	ldw	r16,0(sp)
    e010:	dec00a04 	addi	sp,sp,40
    e014:	f800283a 	ret
    e018:	a8800217 	ldw	r2,8(r21)
    e01c:	8c63883a 	add	r17,r17,r17
    e020:	8c63883a 	add	r17,r17,r17
    e024:	1445c83a 	sub	r2,r2,r17
    e028:	a8800215 	stw	r2,8(r21)
    e02c:	b5800204 	addi	r22,r22,8
    e030:	bdc00204 	addi	r23,r23,8
    e034:	103fdb1e 	bne	r2,zero,dfa4 <__alt_mem_Flash_flash_data+0xf400dfa4>
    e038:	0005883a 	mov	r2,zero
    e03c:	003fe806 	br	dfe0 <__alt_mem_Flash_flash_data+0xf400dfe0>
    e040:	000a0700 	call	a070 <__sfvwrite_r>
    e044:	003fe606 	br	dfe0 <__alt_mem_Flash_flash_data+0xf400dfe0>

0000e048 <__sprint_r>:
    e048:	30c00217 	ldw	r3,8(r6)
    e04c:	18000126 	beq	r3,zero,e054 <__sprint_r+0xc>
    e050:	000df4c1 	jmpi	df4c <__sprint_r.part.0>
    e054:	30000115 	stw	zero,4(r6)
    e058:	0005883a 	mov	r2,zero
    e05c:	f800283a 	ret

0000e060 <___vfiprintf_internal_r>:
    e060:	deffca04 	addi	sp,sp,-216
    e064:	dd803215 	stw	r22,200(sp)
    e068:	dd403115 	stw	r21,196(sp)
    e06c:	dfc03515 	stw	ra,212(sp)
    e070:	df003415 	stw	fp,208(sp)
    e074:	ddc03315 	stw	r23,204(sp)
    e078:	dd003015 	stw	r20,192(sp)
    e07c:	dcc02f15 	stw	r19,188(sp)
    e080:	dc802e15 	stw	r18,184(sp)
    e084:	dc402d15 	stw	r17,180(sp)
    e088:	dc002c15 	stw	r16,176(sp)
    e08c:	d9002015 	stw	r4,128(sp)
    e090:	d9c02215 	stw	r7,136(sp)
    e094:	282b883a 	mov	r21,r5
    e098:	302d883a 	mov	r22,r6
    e09c:	20000226 	beq	r4,zero,e0a8 <___vfiprintf_internal_r+0x48>
    e0a0:	20800e17 	ldw	r2,56(r4)
    e0a4:	1001b126 	beq	r2,zero,e76c <___vfiprintf_internal_r+0x70c>
    e0a8:	a880030b 	ldhu	r2,12(r21)
    e0ac:	10c8000c 	andi	r3,r2,8192
    e0b0:	1800061e 	bne	r3,zero,e0cc <___vfiprintf_internal_r+0x6c>
    e0b4:	a9001917 	ldw	r4,100(r21)
    e0b8:	00f7ffc4 	movi	r3,-8193
    e0bc:	10880014 	ori	r2,r2,8192
    e0c0:	20c6703a 	and	r3,r4,r3
    e0c4:	a880030d 	sth	r2,12(r21)
    e0c8:	a8c01915 	stw	r3,100(r21)
    e0cc:	10c0020c 	andi	r3,r2,8
    e0d0:	18018926 	beq	r3,zero,e6f8 <___vfiprintf_internal_r+0x698>
    e0d4:	a8c00417 	ldw	r3,16(r21)
    e0d8:	18018726 	beq	r3,zero,e6f8 <___vfiprintf_internal_r+0x698>
    e0dc:	1080068c 	andi	r2,r2,26
    e0e0:	00c00284 	movi	r3,10
    e0e4:	10c18c26 	beq	r2,r3,e718 <___vfiprintf_internal_r+0x6b8>
    e0e8:	d8801a04 	addi	r2,sp,104
    e0ec:	d8c019c4 	addi	r3,sp,103
    e0f0:	070000b4 	movhi	fp,2
    e0f4:	05c000b4 	movhi	r23,2
    e0f8:	10c9c83a 	sub	r4,r2,r3
    e0fc:	e702a304 	addi	fp,fp,2700
    e100:	bdc29f04 	addi	r23,r23,2684
    e104:	d8801e15 	stw	r2,120(sp)
    e108:	d8c01f15 	stw	r3,124(sp)
    e10c:	dec01a15 	stw	sp,104(sp)
    e110:	d8001c15 	stw	zero,112(sp)
    e114:	d8001b15 	stw	zero,108(sp)
    e118:	d8002615 	stw	zero,152(sp)
    e11c:	d8002315 	stw	zero,140(sp)
    e120:	d9002715 	stw	r4,156(sp)
    e124:	d811883a 	mov	r8,sp
    e128:	dd402115 	stw	r21,132(sp)
    e12c:	b021883a 	mov	r16,r22
    e130:	80800007 	ldb	r2,0(r16)
    e134:	10037226 	beq	r2,zero,ef00 <___vfiprintf_internal_r+0xea0>
    e138:	01000944 	movi	r4,37
    e13c:	11037026 	beq	r2,r4,ef00 <___vfiprintf_internal_r+0xea0>
    e140:	8005883a 	mov	r2,r16
    e144:	00000106 	br	e14c <___vfiprintf_internal_r+0xec>
    e148:	19000326 	beq	r3,r4,e158 <___vfiprintf_internal_r+0xf8>
    e14c:	10800044 	addi	r2,r2,1
    e150:	10c00007 	ldb	r3,0(r2)
    e154:	183ffc1e 	bne	r3,zero,e148 <__alt_mem_Flash_flash_data+0xf400e148>
    e158:	1425c83a 	sub	r18,r2,r16
    e15c:	1023883a 	mov	r17,r2
    e160:	90001026 	beq	r18,zero,e1a4 <___vfiprintf_internal_r+0x144>
    e164:	d8c01c17 	ldw	r3,112(sp)
    e168:	d8801b17 	ldw	r2,108(sp)
    e16c:	44000015 	stw	r16,0(r8)
    e170:	90c7883a 	add	r3,r18,r3
    e174:	10800044 	addi	r2,r2,1
    e178:	44800115 	stw	r18,4(r8)
    e17c:	d8c01c15 	stw	r3,112(sp)
    e180:	d8801b15 	stw	r2,108(sp)
    e184:	010001c4 	movi	r4,7
    e188:	2080750e 	bge	r4,r2,e360 <___vfiprintf_internal_r+0x300>
    e18c:	18036f1e 	bne	r3,zero,ef4c <___vfiprintf_internal_r+0xeec>
    e190:	d8802317 	ldw	r2,140(sp)
    e194:	d8001b15 	stw	zero,108(sp)
    e198:	d811883a 	mov	r8,sp
    e19c:	1485883a 	add	r2,r2,r18
    e1a0:	d8802315 	stw	r2,140(sp)
    e1a4:	88800007 	ldb	r2,0(r17)
    e1a8:	10041026 	beq	r2,zero,f1ec <___vfiprintf_internal_r+0x118c>
    e1ac:	88c00047 	ldb	r3,1(r17)
    e1b0:	88800044 	addi	r2,r17,1
    e1b4:	d8001d85 	stb	zero,118(sp)
    e1b8:	000f883a 	mov	r7,zero
    e1bc:	027fffc4 	movi	r9,-1
    e1c0:	0025883a 	mov	r18,zero
    e1c4:	002b883a 	mov	r21,zero
    e1c8:	01401604 	movi	r5,88
    e1cc:	01800244 	movi	r6,9
    e1d0:	03400a84 	movi	r13,42
    e1d4:	03001b04 	movi	r12,108
    e1d8:	14000044 	addi	r16,r2,1
    e1dc:	18bff804 	addi	r2,r3,-32
    e1e0:	28825536 	bltu	r5,r2,eb38 <___vfiprintf_internal_r+0xad8>
    e1e4:	100490ba 	slli	r2,r2,2
    e1e8:	01000074 	movhi	r4,1
    e1ec:	21387f04 	addi	r4,r4,-7684
    e1f0:	1105883a 	add	r2,r2,r4
    e1f4:	10800017 	ldw	r2,0(r2)
    e1f8:	1000683a 	jmp	r2
    e1fc:	0000e8fc 	xorhi	zero,zero,931
    e200:	0000eb38 	rdprs	zero,zero,940
    e204:	0000eb38 	rdprs	zero,zero,940
    e208:	0000e91c 	xori	zero,zero,932
    e20c:	0000eb38 	rdprs	zero,zero,940
    e210:	0000eb38 	rdprs	zero,zero,940
    e214:	0000eb38 	rdprs	zero,zero,940
    e218:	0000eb38 	rdprs	zero,zero,940
    e21c:	0000eb38 	rdprs	zero,zero,940
    e220:	0000eb38 	rdprs	zero,zero,940
    e224:	0000e92c 	andhi	zero,zero,932
    e228:	0000e94c 	andi	zero,zero,933
    e22c:	0000eb38 	rdprs	zero,zero,940
    e230:	0000e774 	movhi	zero,925
    e234:	0000e860 	cmpeqi	zero,zero,929
    e238:	0000eb38 	rdprs	zero,zero,940
    e23c:	0000e7e0 	cmpeqi	zero,zero,927
    e240:	0000e7f0 	cmpltui	zero,zero,927
    e244:	0000e7f0 	cmpltui	zero,zero,927
    e248:	0000e7f0 	cmpltui	zero,zero,927
    e24c:	0000e7f0 	cmpltui	zero,zero,927
    e250:	0000e7f0 	cmpltui	zero,zero,927
    e254:	0000e7f0 	cmpltui	zero,zero,927
    e258:	0000e7f0 	cmpltui	zero,zero,927
    e25c:	0000e7f0 	cmpltui	zero,zero,927
    e260:	0000e7f0 	cmpltui	zero,zero,927
    e264:	0000eb38 	rdprs	zero,zero,940
    e268:	0000eb38 	rdprs	zero,zero,940
    e26c:	0000eb38 	rdprs	zero,zero,940
    e270:	0000eb38 	rdprs	zero,zero,940
    e274:	0000eb38 	rdprs	zero,zero,940
    e278:	0000eb38 	rdprs	zero,zero,940
    e27c:	0000eb38 	rdprs	zero,zero,940
    e280:	0000eb38 	rdprs	zero,zero,940
    e284:	0000eb38 	rdprs	zero,zero,940
    e288:	0000eb38 	rdprs	zero,zero,940
    e28c:	0000e81c 	xori	zero,zero,928
    e290:	0000eb38 	rdprs	zero,zero,940
    e294:	0000eb38 	rdprs	zero,zero,940
    e298:	0000eb38 	rdprs	zero,zero,940
    e29c:	0000eb38 	rdprs	zero,zero,940
    e2a0:	0000eb38 	rdprs	zero,zero,940
    e2a4:	0000eb38 	rdprs	zero,zero,940
    e2a8:	0000eb38 	rdprs	zero,zero,940
    e2ac:	0000eb38 	rdprs	zero,zero,940
    e2b0:	0000eb38 	rdprs	zero,zero,940
    e2b4:	0000eb38 	rdprs	zero,zero,940
    e2b8:	0000e3a8 	cmpgeui	zero,zero,910
    e2bc:	0000eb38 	rdprs	zero,zero,940
    e2c0:	0000eb38 	rdprs	zero,zero,940
    e2c4:	0000eb38 	rdprs	zero,zero,940
    e2c8:	0000eb38 	rdprs	zero,zero,940
    e2cc:	0000eb38 	rdprs	zero,zero,940
    e2d0:	0000e374 	movhi	zero,909
    e2d4:	0000eb38 	rdprs	zero,zero,940
    e2d8:	0000eb38 	rdprs	zero,zero,940
    e2dc:	0000e9bc 	xorhi	zero,zero,934
    e2e0:	0000eb38 	rdprs	zero,zero,940
    e2e4:	0000eb38 	rdprs	zero,zero,940
    e2e8:	0000eb38 	rdprs	zero,zero,940
    e2ec:	0000eb38 	rdprs	zero,zero,940
    e2f0:	0000eb38 	rdprs	zero,zero,940
    e2f4:	0000eb38 	rdprs	zero,zero,940
    e2f8:	0000eb38 	rdprs	zero,zero,940
    e2fc:	0000eb38 	rdprs	zero,zero,940
    e300:	0000eb38 	rdprs	zero,zero,940
    e304:	0000eb38 	rdprs	zero,zero,940
    e308:	0000e95c 	xori	zero,zero,933
    e30c:	0000e988 	cmpgei	zero,zero,934
    e310:	0000eb38 	rdprs	zero,zero,940
    e314:	0000eb38 	rdprs	zero,zero,940
    e318:	0000eb38 	rdprs	zero,zero,940
    e31c:	0000ea64 	muli	zero,zero,937
    e320:	0000e988 	cmpgei	zero,zero,934
    e324:	0000eb38 	rdprs	zero,zero,940
    e328:	0000eb38 	rdprs	zero,zero,940
    e32c:	0000ea74 	movhi	zero,937
    e330:	0000eb38 	rdprs	zero,zero,940
    e334:	0000e8a0 	cmpeqi	zero,zero,930
    e338:	0000e3ac 	andhi	zero,zero,910
    e33c:	0000ea88 	cmpgei	zero,zero,938
    e340:	0000eac8 	cmpgei	zero,zero,939
    e344:	0000eb38 	rdprs	zero,zero,940
    e348:	0000ea10 	cmplti	zero,zero,936
    e34c:	0000eb38 	rdprs	zero,zero,940
    e350:	0000e378 	rdprs	zero,zero,909
    e354:	0000eb38 	rdprs	zero,zero,940
    e358:	0000eb38 	rdprs	zero,zero,940
    e35c:	0000ead8 	cmpnei	zero,zero,939
    e360:	42000204 	addi	r8,r8,8
    e364:	d8802317 	ldw	r2,140(sp)
    e368:	1485883a 	add	r2,r2,r18
    e36c:	d8802315 	stw	r2,140(sp)
    e370:	003f8c06 	br	e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    e374:	ad400414 	ori	r21,r21,16
    e378:	a880080c 	andi	r2,r21,32
    e37c:	1001e61e 	bne	r2,zero,eb18 <___vfiprintf_internal_r+0xab8>
    e380:	a880040c 	andi	r2,r21,16
    e384:	10034726 	beq	r2,zero,f0a4 <___vfiprintf_internal_r+0x1044>
    e388:	d8802217 	ldw	r2,136(sp)
    e38c:	001b883a 	mov	r13,zero
    e390:	15800017 	ldw	r22,0(r2)
    e394:	10800104 	addi	r2,r2,4
    e398:	d8802215 	stw	r2,136(sp)
    e39c:	b009883a 	mov	r4,r22
    e3a0:	00800044 	movi	r2,1
    e3a4:	00000c06 	br	e3d8 <___vfiprintf_internal_r+0x378>
    e3a8:	ad400414 	ori	r21,r21,16
    e3ac:	a880080c 	andi	r2,r21,32
    e3b0:	1001491e 	bne	r2,zero,e8d8 <___vfiprintf_internal_r+0x878>
    e3b4:	a880040c 	andi	r2,r21,16
    e3b8:	10032d26 	beq	r2,zero,f070 <___vfiprintf_internal_r+0x1010>
    e3bc:	d9002217 	ldw	r4,136(sp)
    e3c0:	001b883a 	mov	r13,zero
    e3c4:	0005883a 	mov	r2,zero
    e3c8:	25800017 	ldw	r22,0(r4)
    e3cc:	21000104 	addi	r4,r4,4
    e3d0:	d9002215 	stw	r4,136(sp)
    e3d4:	b009883a 	mov	r4,r22
    e3d8:	d8001d85 	stb	zero,118(sp)
    e3dc:	4827883a 	mov	r19,r9
    e3e0:	001d883a 	mov	r14,zero
    e3e4:	48000216 	blt	r9,zero,e3f0 <___vfiprintf_internal_r+0x390>
    e3e8:	00ffdfc4 	movi	r3,-129
    e3ec:	a8ea703a 	and	r21,r21,r3
    e3f0:	2002071e 	bne	r4,zero,ec10 <___vfiprintf_internal_r+0xbb0>
    e3f4:	4802ad26 	beq	r9,zero,eeac <___vfiprintf_internal_r+0xe4c>
    e3f8:	10803fcc 	andi	r2,r2,255
    e3fc:	00c00044 	movi	r3,1
    e400:	10c22b26 	beq	r2,r3,ecb0 <___vfiprintf_internal_r+0xc50>
    e404:	00c00084 	movi	r3,2
    e408:	dd001a04 	addi	r20,sp,104
    e40c:	10c0dd1e 	bne	r2,r3,e784 <___vfiprintf_internal_r+0x724>
    e410:	d9002617 	ldw	r4,152(sp)
    e414:	b08003cc 	andi	r2,r22,15
    e418:	6806973a 	slli	r3,r13,28
    e41c:	2085883a 	add	r2,r4,r2
    e420:	b02cd13a 	srli	r22,r22,4
    e424:	10800003 	ldbu	r2,0(r2)
    e428:	681ad13a 	srli	r13,r13,4
    e42c:	a53fffc4 	addi	r20,r20,-1
    e430:	1dacb03a 	or	r22,r3,r22
    e434:	a0800005 	stb	r2,0(r20)
    e438:	b344b03a 	or	r2,r22,r13
    e43c:	103ff51e 	bne	r2,zero,e414 <__alt_mem_Flash_flash_data+0xf400e414>
    e440:	d9001e17 	ldw	r4,120(sp)
    e444:	2527c83a 	sub	r19,r4,r20
    e448:	9823883a 	mov	r17,r19
    e44c:	9a40010e 	bge	r19,r9,e454 <___vfiprintf_internal_r+0x3f4>
    e450:	4823883a 	mov	r17,r9
    e454:	73803fcc 	andi	r14,r14,255
    e458:	7380201c 	xori	r14,r14,128
    e45c:	73bfe004 	addi	r14,r14,-128
    e460:	70000126 	beq	r14,zero,e468 <___vfiprintf_internal_r+0x408>
    e464:	8c400044 	addi	r17,r17,1
    e468:	ab40008c 	andi	r13,r21,2
    e46c:	68000126 	beq	r13,zero,e474 <___vfiprintf_internal_r+0x414>
    e470:	8c400084 	addi	r17,r17,2
    e474:	ad80210c 	andi	r22,r21,132
    e478:	b001c51e 	bne	r22,zero,eb90 <___vfiprintf_internal_r+0xb30>
    e47c:	9447c83a 	sub	r3,r18,r17
    e480:	00c1c30e 	bge	zero,r3,eb90 <___vfiprintf_internal_r+0xb30>
    e484:	01c00404 	movi	r7,16
    e488:	d8801c17 	ldw	r2,112(sp)
    e48c:	38c37b0e 	bge	r7,r3,f27c <___vfiprintf_internal_r+0x121c>
    e490:	010000b4 	movhi	r4,2
    e494:	2102a304 	addi	r4,r4,2700
    e498:	dc002915 	stw	r16,164(sp)
    e49c:	d9801b17 	ldw	r6,108(sp)
    e4a0:	d9002415 	stw	r4,144(sp)
    e4a4:	03c001c4 	movi	r15,7
    e4a8:	da402515 	stw	r9,148(sp)
    e4ac:	db402815 	stw	r13,160(sp)
    e4b0:	1821883a 	mov	r16,r3
    e4b4:	00000506 	br	e4cc <___vfiprintf_internal_r+0x46c>
    e4b8:	31400084 	addi	r5,r6,2
    e4bc:	42000204 	addi	r8,r8,8
    e4c0:	200d883a 	mov	r6,r4
    e4c4:	843ffc04 	addi	r16,r16,-16
    e4c8:	3c000d0e 	bge	r7,r16,e500 <___vfiprintf_internal_r+0x4a0>
    e4cc:	10800404 	addi	r2,r2,16
    e4d0:	31000044 	addi	r4,r6,1
    e4d4:	47000015 	stw	fp,0(r8)
    e4d8:	41c00115 	stw	r7,4(r8)
    e4dc:	d8801c15 	stw	r2,112(sp)
    e4e0:	d9001b15 	stw	r4,108(sp)
    e4e4:	793ff40e 	bge	r15,r4,e4b8 <__alt_mem_Flash_flash_data+0xf400e4b8>
    e4e8:	10019b1e 	bne	r2,zero,eb58 <___vfiprintf_internal_r+0xaf8>
    e4ec:	843ffc04 	addi	r16,r16,-16
    e4f0:	000d883a 	mov	r6,zero
    e4f4:	01400044 	movi	r5,1
    e4f8:	d811883a 	mov	r8,sp
    e4fc:	3c3ff316 	blt	r7,r16,e4cc <__alt_mem_Flash_flash_data+0xf400e4cc>
    e500:	8007883a 	mov	r3,r16
    e504:	da402517 	ldw	r9,148(sp)
    e508:	db402817 	ldw	r13,160(sp)
    e50c:	dc002917 	ldw	r16,164(sp)
    e510:	d9002417 	ldw	r4,144(sp)
    e514:	1885883a 	add	r2,r3,r2
    e518:	40c00115 	stw	r3,4(r8)
    e51c:	41000015 	stw	r4,0(r8)
    e520:	d8801c15 	stw	r2,112(sp)
    e524:	d9401b15 	stw	r5,108(sp)
    e528:	00c001c4 	movi	r3,7
    e52c:	19426a16 	blt	r3,r5,eed8 <___vfiprintf_internal_r+0xe78>
    e530:	d8c01d87 	ldb	r3,118(sp)
    e534:	42000204 	addi	r8,r8,8
    e538:	29000044 	addi	r4,r5,1
    e53c:	1801991e 	bne	r3,zero,eba4 <___vfiprintf_internal_r+0xb44>
    e540:	68000c26 	beq	r13,zero,e574 <___vfiprintf_internal_r+0x514>
    e544:	d8c01d04 	addi	r3,sp,116
    e548:	10800084 	addi	r2,r2,2
    e54c:	40c00015 	stw	r3,0(r8)
    e550:	00c00084 	movi	r3,2
    e554:	40c00115 	stw	r3,4(r8)
    e558:	d8801c15 	stw	r2,112(sp)
    e55c:	d9001b15 	stw	r4,108(sp)
    e560:	00c001c4 	movi	r3,7
    e564:	19024c16 	blt	r3,r4,ee98 <___vfiprintf_internal_r+0xe38>
    e568:	200b883a 	mov	r5,r4
    e56c:	42000204 	addi	r8,r8,8
    e570:	21000044 	addi	r4,r4,1
    e574:	00c02004 	movi	r3,128
    e578:	b0c20126 	beq	r22,r3,ed80 <___vfiprintf_internal_r+0xd20>
    e57c:	4cedc83a 	sub	r22,r9,r19
    e580:	0580230e 	bge	zero,r22,e610 <___vfiprintf_internal_r+0x5b0>
    e584:	01c00404 	movi	r7,16
    e588:	3d83140e 	bge	r7,r22,f1dc <___vfiprintf_internal_r+0x117c>
    e58c:	010000b4 	movhi	r4,2
    e590:	21029f04 	addi	r4,r4,2684
    e594:	d9002415 	stw	r4,144(sp)
    e598:	034001c4 	movi	r13,7
    e59c:	00000506 	br	e5b4 <___vfiprintf_internal_r+0x554>
    e5a0:	29000084 	addi	r4,r5,2
    e5a4:	42000204 	addi	r8,r8,8
    e5a8:	180b883a 	mov	r5,r3
    e5ac:	b5bffc04 	addi	r22,r22,-16
    e5b0:	3d800d0e 	bge	r7,r22,e5e8 <___vfiprintf_internal_r+0x588>
    e5b4:	10800404 	addi	r2,r2,16
    e5b8:	28c00044 	addi	r3,r5,1
    e5bc:	45c00015 	stw	r23,0(r8)
    e5c0:	41c00115 	stw	r7,4(r8)
    e5c4:	d8801c15 	stw	r2,112(sp)
    e5c8:	d8c01b15 	stw	r3,108(sp)
    e5cc:	68fff40e 	bge	r13,r3,e5a0 <__alt_mem_Flash_flash_data+0xf400e5a0>
    e5d0:	1001811e 	bne	r2,zero,ebd8 <___vfiprintf_internal_r+0xb78>
    e5d4:	b5bffc04 	addi	r22,r22,-16
    e5d8:	01000044 	movi	r4,1
    e5dc:	000b883a 	mov	r5,zero
    e5e0:	d811883a 	mov	r8,sp
    e5e4:	3dbff316 	blt	r7,r22,e5b4 <__alt_mem_Flash_flash_data+0xf400e5b4>
    e5e8:	d8c02417 	ldw	r3,144(sp)
    e5ec:	1585883a 	add	r2,r2,r22
    e5f0:	45800115 	stw	r22,4(r8)
    e5f4:	40c00015 	stw	r3,0(r8)
    e5f8:	d8801c15 	stw	r2,112(sp)
    e5fc:	d9001b15 	stw	r4,108(sp)
    e600:	00c001c4 	movi	r3,7
    e604:	1901d016 	blt	r3,r4,ed48 <___vfiprintf_internal_r+0xce8>
    e608:	42000204 	addi	r8,r8,8
    e60c:	21000044 	addi	r4,r4,1
    e610:	14c5883a 	add	r2,r2,r19
    e614:	45000015 	stw	r20,0(r8)
    e618:	44c00115 	stw	r19,4(r8)
    e61c:	d8801c15 	stw	r2,112(sp)
    e620:	d9001b15 	stw	r4,108(sp)
    e624:	00c001c4 	movi	r3,7
    e628:	1901cf0e 	bge	r3,r4,ed68 <___vfiprintf_internal_r+0xd08>
    e62c:	1002361e 	bne	r2,zero,ef08 <___vfiprintf_internal_r+0xea8>
    e630:	d8001b15 	stw	zero,108(sp)
    e634:	aac0010c 	andi	r11,r21,4
    e638:	58002826 	beq	r11,zero,e6dc <___vfiprintf_internal_r+0x67c>
    e63c:	9467c83a 	sub	r19,r18,r17
    e640:	d811883a 	mov	r8,sp
    e644:	04c3340e 	bge	zero,r19,f318 <___vfiprintf_internal_r+0x12b8>
    e648:	01c00404 	movi	r7,16
    e64c:	3cc31b0e 	bge	r7,r19,f2bc <___vfiprintf_internal_r+0x125c>
    e650:	00c000b4 	movhi	r3,2
    e654:	18c2a304 	addi	r3,r3,2700
    e658:	d9001b17 	ldw	r4,108(sp)
    e65c:	d8c02415 	stw	r3,144(sp)
    e660:	382b883a 	mov	r21,r7
    e664:	050001c4 	movi	r20,7
    e668:	dd802017 	ldw	r22,128(sp)
    e66c:	00000506 	br	e684 <___vfiprintf_internal_r+0x624>
    e670:	21400084 	addi	r5,r4,2
    e674:	42000204 	addi	r8,r8,8
    e678:	1809883a 	mov	r4,r3
    e67c:	9cfffc04 	addi	r19,r19,-16
    e680:	acc00d0e 	bge	r21,r19,e6b8 <___vfiprintf_internal_r+0x658>
    e684:	10800404 	addi	r2,r2,16
    e688:	20c00044 	addi	r3,r4,1
    e68c:	47000015 	stw	fp,0(r8)
    e690:	45400115 	stw	r21,4(r8)
    e694:	d8801c15 	stw	r2,112(sp)
    e698:	d8c01b15 	stw	r3,108(sp)
    e69c:	a0fff40e 	bge	r20,r3,e670 <__alt_mem_Flash_flash_data+0xf400e670>
    e6a0:	10019f1e 	bne	r2,zero,ed20 <___vfiprintf_internal_r+0xcc0>
    e6a4:	9cfffc04 	addi	r19,r19,-16
    e6a8:	01400044 	movi	r5,1
    e6ac:	0009883a 	mov	r4,zero
    e6b0:	d811883a 	mov	r8,sp
    e6b4:	acfff316 	blt	r21,r19,e684 <__alt_mem_Flash_flash_data+0xf400e684>
    e6b8:	d8c02417 	ldw	r3,144(sp)
    e6bc:	14c5883a 	add	r2,r2,r19
    e6c0:	44c00115 	stw	r19,4(r8)
    e6c4:	40c00015 	stw	r3,0(r8)
    e6c8:	d8801c15 	stw	r2,112(sp)
    e6cc:	d9401b15 	stw	r5,108(sp)
    e6d0:	00c001c4 	movi	r3,7
    e6d4:	1941810e 	bge	r3,r5,ecdc <___vfiprintf_internal_r+0xc7c>
    e6d8:	10017a1e 	bne	r2,zero,ecc4 <___vfiprintf_internal_r+0xc64>
    e6dc:	8c82a416 	blt	r17,r18,f170 <___vfiprintf_internal_r+0x1110>
    e6e0:	d9002317 	ldw	r4,140(sp)
    e6e4:	2449883a 	add	r4,r4,r17
    e6e8:	d9002315 	stw	r4,140(sp)
    e6ec:	d8001b15 	stw	zero,108(sp)
    e6f0:	d811883a 	mov	r8,sp
    e6f4:	003e8e06 	br	e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e6f8:	d9002017 	ldw	r4,128(sp)
    e6fc:	a80b883a 	mov	r5,r21
    e700:	0007bac0 	call	7bac <__swsetup_r>
    e704:	10000c1e 	bne	r2,zero,e738 <___vfiprintf_internal_r+0x6d8>
    e708:	a880030b 	ldhu	r2,12(r21)
    e70c:	00c00284 	movi	r3,10
    e710:	1080068c 	andi	r2,r2,26
    e714:	10fe741e 	bne	r2,r3,e0e8 <__alt_mem_Flash_flash_data+0xf400e0e8>
    e718:	a880038f 	ldh	r2,14(r21)
    e71c:	103e7216 	blt	r2,zero,e0e8 <__alt_mem_Flash_flash_data+0xf400e0e8>
    e720:	d9002017 	ldw	r4,128(sp)
    e724:	d9c02217 	ldw	r7,136(sp)
    e728:	a80b883a 	mov	r5,r21
    e72c:	b00d883a 	mov	r6,r22
    e730:	000f3540 	call	f354 <__sbprintf>
    e734:	00000106 	br	e73c <___vfiprintf_internal_r+0x6dc>
    e738:	00bfffc4 	movi	r2,-1
    e73c:	dfc03517 	ldw	ra,212(sp)
    e740:	df003417 	ldw	fp,208(sp)
    e744:	ddc03317 	ldw	r23,204(sp)
    e748:	dd803217 	ldw	r22,200(sp)
    e74c:	dd403117 	ldw	r21,196(sp)
    e750:	dd003017 	ldw	r20,192(sp)
    e754:	dcc02f17 	ldw	r19,188(sp)
    e758:	dc802e17 	ldw	r18,184(sp)
    e75c:	dc402d17 	ldw	r17,180(sp)
    e760:	dc002c17 	ldw	r16,176(sp)
    e764:	dec03604 	addi	sp,sp,216
    e768:	f800283a 	ret
    e76c:	0009c0c0 	call	9c0c <__sinit>
    e770:	003e4d06 	br	e0a8 <__alt_mem_Flash_flash_data+0xf400e0a8>
    e774:	8005883a 	mov	r2,r16
    e778:	ad400114 	ori	r21,r21,4
    e77c:	80c00007 	ldb	r3,0(r16)
    e780:	003e9506 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e784:	b006d0fa 	srli	r3,r22,3
    e788:	6808977a 	slli	r4,r13,29
    e78c:	681ad0fa 	srli	r13,r13,3
    e790:	b58001cc 	andi	r22,r22,7
    e794:	b0800c04 	addi	r2,r22,48
    e798:	a53fffc4 	addi	r20,r20,-1
    e79c:	20ecb03a 	or	r22,r4,r3
    e7a0:	a0800005 	stb	r2,0(r20)
    e7a4:	b346b03a 	or	r3,r22,r13
    e7a8:	183ff61e 	bne	r3,zero,e784 <__alt_mem_Flash_flash_data+0xf400e784>
    e7ac:	a8c0004c 	andi	r3,r21,1
    e7b0:	a009883a 	mov	r4,r20
    e7b4:	18013b26 	beq	r3,zero,eca4 <___vfiprintf_internal_r+0xc44>
    e7b8:	10803fcc 	andi	r2,r2,255
    e7bc:	1080201c 	xori	r2,r2,128
    e7c0:	10bfe004 	addi	r2,r2,-128
    e7c4:	00c00c04 	movi	r3,48
    e7c8:	10ff1d26 	beq	r2,r3,e440 <__alt_mem_Flash_flash_data+0xf400e440>
    e7cc:	d8801e17 	ldw	r2,120(sp)
    e7d0:	a53fffc4 	addi	r20,r20,-1
    e7d4:	20ffffc5 	stb	r3,-1(r4)
    e7d8:	1527c83a 	sub	r19,r2,r20
    e7dc:	003f1a06 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    e7e0:	ad402014 	ori	r21,r21,128
    e7e4:	8005883a 	mov	r2,r16
    e7e8:	80c00007 	ldb	r3,0(r16)
    e7ec:	003e7a06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e7f0:	8005883a 	mov	r2,r16
    e7f4:	0025883a 	mov	r18,zero
    e7f8:	193ff404 	addi	r4,r3,-48
    e7fc:	10c00007 	ldb	r3,0(r2)
    e800:	948002a4 	muli	r18,r18,10
    e804:	84000044 	addi	r16,r16,1
    e808:	8005883a 	mov	r2,r16
    e80c:	9125883a 	add	r18,r18,r4
    e810:	193ff404 	addi	r4,r3,-48
    e814:	313ff92e 	bgeu	r6,r4,e7fc <__alt_mem_Flash_flash_data+0xf400e7fc>
    e818:	003e7006 	br	e1dc <__alt_mem_Flash_flash_data+0xf400e1dc>
    e81c:	ad400414 	ori	r21,r21,16
    e820:	d9c01d85 	stb	r7,118(sp)
    e824:	a880080c 	andi	r2,r21,32
    e828:	d8c02217 	ldw	r3,136(sp)
    e82c:	10005a26 	beq	r2,zero,e998 <___vfiprintf_internal_r+0x938>
    e830:	d9002217 	ldw	r4,136(sp)
    e834:	18800117 	ldw	r2,4(r3)
    e838:	1d800017 	ldw	r22,0(r3)
    e83c:	21000204 	addi	r4,r4,8
    e840:	d9002215 	stw	r4,136(sp)
    e844:	101b883a 	mov	r13,r2
    e848:	1001f416 	blt	r2,zero,f01c <___vfiprintf_internal_r+0xfbc>
    e84c:	db801d83 	ldbu	r14,118(sp)
    e850:	4827883a 	mov	r19,r9
    e854:	00800044 	movi	r2,1
    e858:	b348b03a 	or	r4,r22,r13
    e85c:	003ee106 	br	e3e4 <__alt_mem_Flash_flash_data+0xf400e3e4>
    e860:	80c00007 	ldb	r3,0(r16)
    e864:	80800044 	addi	r2,r16,1
    e868:	1b42a326 	beq	r3,r13,f2f8 <___vfiprintf_internal_r+0x1298>
    e86c:	193ff404 	addi	r4,r3,-48
    e870:	1021883a 	mov	r16,r2
    e874:	0013883a 	mov	r9,zero
    e878:	313e5836 	bltu	r6,r4,e1dc <__alt_mem_Flash_flash_data+0xf400e1dc>
    e87c:	80c00007 	ldb	r3,0(r16)
    e880:	4a4002a4 	muli	r9,r9,10
    e884:	84000044 	addi	r16,r16,1
    e888:	2253883a 	add	r9,r4,r9
    e88c:	193ff404 	addi	r4,r3,-48
    e890:	313ffa2e 	bgeu	r6,r4,e87c <__alt_mem_Flash_flash_data+0xf400e87c>
    e894:	483e510e 	bge	r9,zero,e1dc <__alt_mem_Flash_flash_data+0xf400e1dc>
    e898:	027fffc4 	movi	r9,-1
    e89c:	003e4f06 	br	e1dc <__alt_mem_Flash_flash_data+0xf400e1dc>
    e8a0:	d9c01d85 	stb	r7,118(sp)
    e8a4:	a880080c 	andi	r2,r21,32
    e8a8:	10020826 	beq	r2,zero,f0cc <___vfiprintf_internal_r+0x106c>
    e8ac:	d8c02217 	ldw	r3,136(sp)
    e8b0:	d9002317 	ldw	r4,140(sp)
    e8b4:	18800017 	ldw	r2,0(r3)
    e8b8:	2007d7fa 	srai	r3,r4,31
    e8bc:	d9002217 	ldw	r4,136(sp)
    e8c0:	10c00115 	stw	r3,4(r2)
    e8c4:	21000104 	addi	r4,r4,4
    e8c8:	d9002215 	stw	r4,136(sp)
    e8cc:	d9002317 	ldw	r4,140(sp)
    e8d0:	11000015 	stw	r4,0(r2)
    e8d4:	003e1606 	br	e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e8d8:	d8802217 	ldw	r2,136(sp)
    e8dc:	d8c02217 	ldw	r3,136(sp)
    e8e0:	15800017 	ldw	r22,0(r2)
    e8e4:	13400117 	ldw	r13,4(r2)
    e8e8:	18c00204 	addi	r3,r3,8
    e8ec:	0005883a 	mov	r2,zero
    e8f0:	d8c02215 	stw	r3,136(sp)
    e8f4:	b348b03a 	or	r4,r22,r13
    e8f8:	003eb706 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    e8fc:	38803fcc 	andi	r2,r7,255
    e900:	1080201c 	xori	r2,r2,128
    e904:	10bfe004 	addi	r2,r2,-128
    e908:	1001e31e 	bne	r2,zero,f098 <___vfiprintf_internal_r+0x1038>
    e90c:	8005883a 	mov	r2,r16
    e910:	01c00804 	movi	r7,32
    e914:	80c00007 	ldb	r3,0(r16)
    e918:	003e2f06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e91c:	ad400054 	ori	r21,r21,1
    e920:	8005883a 	mov	r2,r16
    e924:	80c00007 	ldb	r3,0(r16)
    e928:	003e2b06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e92c:	d8c02217 	ldw	r3,136(sp)
    e930:	1c800017 	ldw	r18,0(r3)
    e934:	18c00104 	addi	r3,r3,4
    e938:	90023816 	blt	r18,zero,f21c <___vfiprintf_internal_r+0x11bc>
    e93c:	d8c02215 	stw	r3,136(sp)
    e940:	8005883a 	mov	r2,r16
    e944:	80c00007 	ldb	r3,0(r16)
    e948:	003e2306 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e94c:	8005883a 	mov	r2,r16
    e950:	01c00ac4 	movi	r7,43
    e954:	80c00007 	ldb	r3,0(r16)
    e958:	003e1f06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    e95c:	d8c02217 	ldw	r3,136(sp)
    e960:	04400044 	movi	r17,1
    e964:	d8001d85 	stb	zero,118(sp)
    e968:	18800017 	ldw	r2,0(r3)
    e96c:	18c00104 	addi	r3,r3,4
    e970:	d8c02215 	stw	r3,136(sp)
    e974:	d8801005 	stb	r2,64(sp)
    e978:	8827883a 	mov	r19,r17
    e97c:	dd001004 	addi	r20,sp,64
    e980:	0013883a 	mov	r9,zero
    e984:	003eb806 	br	e468 <__alt_mem_Flash_flash_data+0xf400e468>
    e988:	d9c01d85 	stb	r7,118(sp)
    e98c:	a880080c 	andi	r2,r21,32
    e990:	d8c02217 	ldw	r3,136(sp)
    e994:	103fa61e 	bne	r2,zero,e830 <__alt_mem_Flash_flash_data+0xf400e830>
    e998:	a880040c 	andi	r2,r21,16
    e99c:	1001dd26 	beq	r2,zero,f114 <___vfiprintf_internal_r+0x10b4>
    e9a0:	1d800017 	ldw	r22,0(r3)
    e9a4:	d8802217 	ldw	r2,136(sp)
    e9a8:	b01bd7fa 	srai	r13,r22,31
    e9ac:	10800104 	addi	r2,r2,4
    e9b0:	d8802215 	stw	r2,136(sp)
    e9b4:	6805883a 	mov	r2,r13
    e9b8:	003fa306 	br	e848 <__alt_mem_Flash_flash_data+0xf400e848>
    e9bc:	008000b4 	movhi	r2,2
    e9c0:	10822904 	addi	r2,r2,2212
    e9c4:	d8802615 	stw	r2,152(sp)
    e9c8:	d9c01d85 	stb	r7,118(sp)
    e9cc:	a880080c 	andi	r2,r21,32
    e9d0:	10004726 	beq	r2,zero,eaf0 <___vfiprintf_internal_r+0xa90>
    e9d4:	d9002217 	ldw	r4,136(sp)
    e9d8:	25800017 	ldw	r22,0(r4)
    e9dc:	23400117 	ldw	r13,4(r4)
    e9e0:	21000204 	addi	r4,r4,8
    e9e4:	d9002215 	stw	r4,136(sp)
    e9e8:	a880004c 	andi	r2,r21,1
    e9ec:	10014e26 	beq	r2,zero,ef28 <___vfiprintf_internal_r+0xec8>
    e9f0:	b348b03a 	or	r4,r22,r13
    e9f4:	20019c26 	beq	r4,zero,f068 <___vfiprintf_internal_r+0x1008>
    e9f8:	00800c04 	movi	r2,48
    e9fc:	d8801d05 	stb	r2,116(sp)
    ea00:	d8c01d45 	stb	r3,117(sp)
    ea04:	ad400094 	ori	r21,r21,2
    ea08:	00800084 	movi	r2,2
    ea0c:	003e7206 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    ea10:	d8c02217 	ldw	r3,136(sp)
    ea14:	d8001d85 	stb	zero,118(sp)
    ea18:	1d000017 	ldw	r20,0(r3)
    ea1c:	1d800104 	addi	r22,r3,4
    ea20:	a0021c26 	beq	r20,zero,f294 <___vfiprintf_internal_r+0x1234>
    ea24:	a009883a 	mov	r4,r20
    ea28:	48020016 	blt	r9,zero,f22c <___vfiprintf_internal_r+0x11cc>
    ea2c:	480d883a 	mov	r6,r9
    ea30:	000b883a 	mov	r5,zero
    ea34:	da002a15 	stw	r8,168(sp)
    ea38:	da402b15 	stw	r9,172(sp)
    ea3c:	000b0f80 	call	b0f8 <memchr>
    ea40:	da002a17 	ldw	r8,168(sp)
    ea44:	da402b17 	ldw	r9,172(sp)
    ea48:	10022226 	beq	r2,zero,f2d4 <___vfiprintf_internal_r+0x1274>
    ea4c:	1527c83a 	sub	r19,r2,r20
    ea50:	4cc1c916 	blt	r9,r19,f178 <___vfiprintf_internal_r+0x1118>
    ea54:	db801d83 	ldbu	r14,118(sp)
    ea58:	dd802215 	stw	r22,136(sp)
    ea5c:	0013883a 	mov	r9,zero
    ea60:	003e7906 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    ea64:	ad401014 	ori	r21,r21,64
    ea68:	8005883a 	mov	r2,r16
    ea6c:	80c00007 	ldb	r3,0(r16)
    ea70:	003dd906 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    ea74:	80c00007 	ldb	r3,0(r16)
    ea78:	8005883a 	mov	r2,r16
    ea7c:	1b01e326 	beq	r3,r12,f20c <___vfiprintf_internal_r+0x11ac>
    ea80:	ad400414 	ori	r21,r21,16
    ea84:	003dd406 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    ea88:	d9002217 	ldw	r4,136(sp)
    ea8c:	00800c04 	movi	r2,48
    ea90:	d8801d05 	stb	r2,116(sp)
    ea94:	25800017 	ldw	r22,0(r4)
    ea98:	00801e04 	movi	r2,120
    ea9c:	d8801d45 	stb	r2,117(sp)
    eaa0:	008000b4 	movhi	r2,2
    eaa4:	21000104 	addi	r4,r4,4
    eaa8:	10822e04 	addi	r2,r2,2232
    eaac:	d9002215 	stw	r4,136(sp)
    eab0:	d8802615 	stw	r2,152(sp)
    eab4:	001b883a 	mov	r13,zero
    eab8:	ad400094 	ori	r21,r21,2
    eabc:	00800084 	movi	r2,2
    eac0:	b009883a 	mov	r4,r22
    eac4:	003e4406 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    eac8:	ad400814 	ori	r21,r21,32
    eacc:	8005883a 	mov	r2,r16
    ead0:	80c00007 	ldb	r3,0(r16)
    ead4:	003dc006 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    ead8:	008000b4 	movhi	r2,2
    eadc:	10822e04 	addi	r2,r2,2232
    eae0:	d8802615 	stw	r2,152(sp)
    eae4:	d9c01d85 	stb	r7,118(sp)
    eae8:	a880080c 	andi	r2,r21,32
    eaec:	103fb91e 	bne	r2,zero,e9d4 <__alt_mem_Flash_flash_data+0xf400e9d4>
    eaf0:	a880040c 	andi	r2,r21,16
    eaf4:	10010f1e 	bne	r2,zero,ef34 <___vfiprintf_internal_r+0xed4>
    eaf8:	a880100c 	andi	r2,r21,64
    eafc:	10010d26 	beq	r2,zero,ef34 <___vfiprintf_internal_r+0xed4>
    eb00:	d9002217 	ldw	r4,136(sp)
    eb04:	001b883a 	mov	r13,zero
    eb08:	2580000b 	ldhu	r22,0(r4)
    eb0c:	21000104 	addi	r4,r4,4
    eb10:	d9002215 	stw	r4,136(sp)
    eb14:	003fb406 	br	e9e8 <__alt_mem_Flash_flash_data+0xf400e9e8>
    eb18:	d9002217 	ldw	r4,136(sp)
    eb1c:	00800044 	movi	r2,1
    eb20:	25800017 	ldw	r22,0(r4)
    eb24:	23400117 	ldw	r13,4(r4)
    eb28:	21000204 	addi	r4,r4,8
    eb2c:	d9002215 	stw	r4,136(sp)
    eb30:	b348b03a 	or	r4,r22,r13
    eb34:	003e2806 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    eb38:	d9c01d85 	stb	r7,118(sp)
    eb3c:	1801ab26 	beq	r3,zero,f1ec <___vfiprintf_internal_r+0x118c>
    eb40:	04400044 	movi	r17,1
    eb44:	d8c01005 	stb	r3,64(sp)
    eb48:	d8001d85 	stb	zero,118(sp)
    eb4c:	8827883a 	mov	r19,r17
    eb50:	dd001004 	addi	r20,sp,64
    eb54:	003f8a06 	br	e980 <__alt_mem_Flash_flash_data+0xf400e980>
    eb58:	d9002017 	ldw	r4,128(sp)
    eb5c:	d9402117 	ldw	r5,132(sp)
    eb60:	d9801a04 	addi	r6,sp,104
    eb64:	d9c02b15 	stw	r7,172(sp)
    eb68:	dbc02a15 	stw	r15,168(sp)
    eb6c:	000df4c0 	call	df4c <__sprint_r.part.0>
    eb70:	d9c02b17 	ldw	r7,172(sp)
    eb74:	dbc02a17 	ldw	r15,168(sp)
    eb78:	1000631e 	bne	r2,zero,ed08 <___vfiprintf_internal_r+0xca8>
    eb7c:	d9801b17 	ldw	r6,108(sp)
    eb80:	d8801c17 	ldw	r2,112(sp)
    eb84:	d811883a 	mov	r8,sp
    eb88:	31400044 	addi	r5,r6,1
    eb8c:	003e4d06 	br	e4c4 <__alt_mem_Flash_flash_data+0xf400e4c4>
    eb90:	d9401b17 	ldw	r5,108(sp)
    eb94:	d8801c17 	ldw	r2,112(sp)
    eb98:	29000044 	addi	r4,r5,1
    eb9c:	d8c01d87 	ldb	r3,118(sp)
    eba0:	183e6726 	beq	r3,zero,e540 <__alt_mem_Flash_flash_data+0xf400e540>
    eba4:	00c00044 	movi	r3,1
    eba8:	d9401d84 	addi	r5,sp,118
    ebac:	10c5883a 	add	r2,r2,r3
    ebb0:	41400015 	stw	r5,0(r8)
    ebb4:	40c00115 	stw	r3,4(r8)
    ebb8:	d8801c15 	stw	r2,112(sp)
    ebbc:	d9001b15 	stw	r4,108(sp)
    ebc0:	014001c4 	movi	r5,7
    ebc4:	2900ab16 	blt	r5,r4,ee74 <___vfiprintf_internal_r+0xe14>
    ebc8:	200b883a 	mov	r5,r4
    ebcc:	42000204 	addi	r8,r8,8
    ebd0:	21000044 	addi	r4,r4,1
    ebd4:	003e5a06 	br	e540 <__alt_mem_Flash_flash_data+0xf400e540>
    ebd8:	d9002017 	ldw	r4,128(sp)
    ebdc:	d9402117 	ldw	r5,132(sp)
    ebe0:	d9801a04 	addi	r6,sp,104
    ebe4:	d9c02b15 	stw	r7,172(sp)
    ebe8:	db402a15 	stw	r13,168(sp)
    ebec:	000df4c0 	call	df4c <__sprint_r.part.0>
    ebf0:	d9c02b17 	ldw	r7,172(sp)
    ebf4:	db402a17 	ldw	r13,168(sp)
    ebf8:	1000431e 	bne	r2,zero,ed08 <___vfiprintf_internal_r+0xca8>
    ebfc:	d9401b17 	ldw	r5,108(sp)
    ec00:	d8801c17 	ldw	r2,112(sp)
    ec04:	d811883a 	mov	r8,sp
    ec08:	29000044 	addi	r4,r5,1
    ec0c:	003e6706 	br	e5ac <__alt_mem_Flash_flash_data+0xf400e5ac>
    ec10:	10803fcc 	andi	r2,r2,255
    ec14:	00c00044 	movi	r3,1
    ec18:	10fdfa1e 	bne	r2,r3,e404 <__alt_mem_Flash_flash_data+0xf400e404>
    ec1c:	6800021e 	bne	r13,zero,ec28 <___vfiprintf_internal_r+0xbc8>
    ec20:	00800244 	movi	r2,9
    ec24:	1580222e 	bgeu	r2,r22,ecb0 <___vfiprintf_internal_r+0xc50>
    ec28:	dc802415 	stw	r18,144(sp)
    ec2c:	dc002515 	stw	r16,148(sp)
    ec30:	dc401a04 	addi	r17,sp,104
    ec34:	b021883a 	mov	r16,r22
    ec38:	4827883a 	mov	r19,r9
    ec3c:	4029883a 	mov	r20,r8
    ec40:	702d883a 	mov	r22,r14
    ec44:	6825883a 	mov	r18,r13
    ec48:	8009883a 	mov	r4,r16
    ec4c:	900b883a 	mov	r5,r18
    ec50:	01800284 	movi	r6,10
    ec54:	000f883a 	mov	r7,zero
    ec58:	00102c80 	call	102c8 <__umoddi3>
    ec5c:	10800c04 	addi	r2,r2,48
    ec60:	8c7fffc4 	addi	r17,r17,-1
    ec64:	8009883a 	mov	r4,r16
    ec68:	900b883a 	mov	r5,r18
    ec6c:	01800284 	movi	r6,10
    ec70:	000f883a 	mov	r7,zero
    ec74:	88800005 	stb	r2,0(r17)
    ec78:	000fd080 	call	fd08 <__udivdi3>
    ec7c:	1021883a 	mov	r16,r2
    ec80:	10c4b03a 	or	r2,r2,r3
    ec84:	1825883a 	mov	r18,r3
    ec88:	103fef1e 	bne	r2,zero,ec48 <__alt_mem_Flash_flash_data+0xf400ec48>
    ec8c:	dc802417 	ldw	r18,144(sp)
    ec90:	dc002517 	ldw	r16,148(sp)
    ec94:	a011883a 	mov	r8,r20
    ec98:	9813883a 	mov	r9,r19
    ec9c:	b01d883a 	mov	r14,r22
    eca0:	8829883a 	mov	r20,r17
    eca4:	d8c01e17 	ldw	r3,120(sp)
    eca8:	1d27c83a 	sub	r19,r3,r20
    ecac:	003de606 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    ecb0:	b5800c04 	addi	r22,r22,48
    ecb4:	dd8019c5 	stb	r22,103(sp)
    ecb8:	dcc02717 	ldw	r19,156(sp)
    ecbc:	dd0019c4 	addi	r20,sp,103
    ecc0:	003de106 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    ecc4:	d9002017 	ldw	r4,128(sp)
    ecc8:	d9402117 	ldw	r5,132(sp)
    eccc:	d9801a04 	addi	r6,sp,104
    ecd0:	000df4c0 	call	df4c <__sprint_r.part.0>
    ecd4:	10000c1e 	bne	r2,zero,ed08 <___vfiprintf_internal_r+0xca8>
    ecd8:	d8801c17 	ldw	r2,112(sp)
    ecdc:	8c80010e 	bge	r17,r18,ece4 <___vfiprintf_internal_r+0xc84>
    ece0:	9023883a 	mov	r17,r18
    ece4:	d8c02317 	ldw	r3,140(sp)
    ece8:	1c47883a 	add	r3,r3,r17
    ecec:	d8c02315 	stw	r3,140(sp)
    ecf0:	103e7e26 	beq	r2,zero,e6ec <__alt_mem_Flash_flash_data+0xf400e6ec>
    ecf4:	d9002017 	ldw	r4,128(sp)
    ecf8:	d9402117 	ldw	r5,132(sp)
    ecfc:	d9801a04 	addi	r6,sp,104
    ed00:	000df4c0 	call	df4c <__sprint_r.part.0>
    ed04:	103e7926 	beq	r2,zero,e6ec <__alt_mem_Flash_flash_data+0xf400e6ec>
    ed08:	dd402117 	ldw	r21,132(sp)
    ed0c:	a880030b 	ldhu	r2,12(r21)
    ed10:	1080100c 	andi	r2,r2,64
    ed14:	103e881e 	bne	r2,zero,e738 <__alt_mem_Flash_flash_data+0xf400e738>
    ed18:	d8802317 	ldw	r2,140(sp)
    ed1c:	003e8706 	br	e73c <__alt_mem_Flash_flash_data+0xf400e73c>
    ed20:	d9402117 	ldw	r5,132(sp)
    ed24:	b009883a 	mov	r4,r22
    ed28:	d9801a04 	addi	r6,sp,104
    ed2c:	000df4c0 	call	df4c <__sprint_r.part.0>
    ed30:	103ff51e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    ed34:	d9001b17 	ldw	r4,108(sp)
    ed38:	d8801c17 	ldw	r2,112(sp)
    ed3c:	d811883a 	mov	r8,sp
    ed40:	21400044 	addi	r5,r4,1
    ed44:	003e4d06 	br	e67c <__alt_mem_Flash_flash_data+0xf400e67c>
    ed48:	1000aa1e 	bne	r2,zero,eff4 <___vfiprintf_internal_r+0xf94>
    ed4c:	00c00044 	movi	r3,1
    ed50:	9805883a 	mov	r2,r19
    ed54:	dd000015 	stw	r20,0(sp)
    ed58:	dcc00115 	stw	r19,4(sp)
    ed5c:	dcc01c15 	stw	r19,112(sp)
    ed60:	d8c01b15 	stw	r3,108(sp)
    ed64:	d811883a 	mov	r8,sp
    ed68:	42000204 	addi	r8,r8,8
    ed6c:	aac0010c 	andi	r11,r21,4
    ed70:	583fda26 	beq	r11,zero,ecdc <__alt_mem_Flash_flash_data+0xf400ecdc>
    ed74:	9467c83a 	sub	r19,r18,r17
    ed78:	04fe3316 	blt	zero,r19,e648 <__alt_mem_Flash_flash_data+0xf400e648>
    ed7c:	003fd706 	br	ecdc <__alt_mem_Flash_flash_data+0xf400ecdc>
    ed80:	946dc83a 	sub	r22,r18,r17
    ed84:	05bdfd0e 	bge	zero,r22,e57c <__alt_mem_Flash_flash_data+0xf400e57c>
    ed88:	00c000b4 	movhi	r3,2
    ed8c:	18c29f04 	addi	r3,r3,2684
    ed90:	01c00404 	movi	r7,16
    ed94:	d8c02415 	stw	r3,144(sp)
    ed98:	3d81530e 	bge	r7,r22,f2e8 <___vfiprintf_internal_r+0x1288>
    ed9c:	8007883a 	mov	r3,r16
    eda0:	034001c4 	movi	r13,7
    eda4:	b021883a 	mov	r16,r22
    eda8:	da402515 	stw	r9,148(sp)
    edac:	182d883a 	mov	r22,r3
    edb0:	00000506 	br	edc8 <___vfiprintf_internal_r+0xd68>
    edb4:	29800084 	addi	r6,r5,2
    edb8:	42000204 	addi	r8,r8,8
    edbc:	180b883a 	mov	r5,r3
    edc0:	843ffc04 	addi	r16,r16,-16
    edc4:	3c000d0e 	bge	r7,r16,edfc <___vfiprintf_internal_r+0xd9c>
    edc8:	10800404 	addi	r2,r2,16
    edcc:	28c00044 	addi	r3,r5,1
    edd0:	45c00015 	stw	r23,0(r8)
    edd4:	41c00115 	stw	r7,4(r8)
    edd8:	d8801c15 	stw	r2,112(sp)
    eddc:	d8c01b15 	stw	r3,108(sp)
    ede0:	68fff40e 	bge	r13,r3,edb4 <__alt_mem_Flash_flash_data+0xf400edb4>
    ede4:	1000151e 	bne	r2,zero,ee3c <___vfiprintf_internal_r+0xddc>
    ede8:	843ffc04 	addi	r16,r16,-16
    edec:	01800044 	movi	r6,1
    edf0:	000b883a 	mov	r5,zero
    edf4:	d811883a 	mov	r8,sp
    edf8:	3c3ff316 	blt	r7,r16,edc8 <__alt_mem_Flash_flash_data+0xf400edc8>
    edfc:	da402517 	ldw	r9,148(sp)
    ee00:	b007883a 	mov	r3,r22
    ee04:	802d883a 	mov	r22,r16
    ee08:	1821883a 	mov	r16,r3
    ee0c:	d8c02417 	ldw	r3,144(sp)
    ee10:	1585883a 	add	r2,r2,r22
    ee14:	45800115 	stw	r22,4(r8)
    ee18:	40c00015 	stw	r3,0(r8)
    ee1c:	d8801c15 	stw	r2,112(sp)
    ee20:	d9801b15 	stw	r6,108(sp)
    ee24:	00c001c4 	movi	r3,7
    ee28:	19806d16 	blt	r3,r6,efe0 <___vfiprintf_internal_r+0xf80>
    ee2c:	42000204 	addi	r8,r8,8
    ee30:	31000044 	addi	r4,r6,1
    ee34:	300b883a 	mov	r5,r6
    ee38:	003dd006 	br	e57c <__alt_mem_Flash_flash_data+0xf400e57c>
    ee3c:	d9002017 	ldw	r4,128(sp)
    ee40:	d9402117 	ldw	r5,132(sp)
    ee44:	d9801a04 	addi	r6,sp,104
    ee48:	d9c02b15 	stw	r7,172(sp)
    ee4c:	db402a15 	stw	r13,168(sp)
    ee50:	000df4c0 	call	df4c <__sprint_r.part.0>
    ee54:	d9c02b17 	ldw	r7,172(sp)
    ee58:	db402a17 	ldw	r13,168(sp)
    ee5c:	103faa1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    ee60:	d9401b17 	ldw	r5,108(sp)
    ee64:	d8801c17 	ldw	r2,112(sp)
    ee68:	d811883a 	mov	r8,sp
    ee6c:	29800044 	addi	r6,r5,1
    ee70:	003fd306 	br	edc0 <__alt_mem_Flash_flash_data+0xf400edc0>
    ee74:	1000401e 	bne	r2,zero,ef78 <___vfiprintf_internal_r+0xf18>
    ee78:	68003b26 	beq	r13,zero,ef68 <___vfiprintf_internal_r+0xf08>
    ee7c:	d9001d04 	addi	r4,sp,116
    ee80:	00800084 	movi	r2,2
    ee84:	d9000015 	stw	r4,0(sp)
    ee88:	d8800115 	stw	r2,4(sp)
    ee8c:	1809883a 	mov	r4,r3
    ee90:	d811883a 	mov	r8,sp
    ee94:	003db406 	br	e568 <__alt_mem_Flash_flash_data+0xf400e568>
    ee98:	1000451e 	bne	r2,zero,efb0 <___vfiprintf_internal_r+0xf50>
    ee9c:	01000044 	movi	r4,1
    eea0:	000b883a 	mov	r5,zero
    eea4:	d811883a 	mov	r8,sp
    eea8:	003db206 	br	e574 <__alt_mem_Flash_flash_data+0xf400e574>
    eeac:	10803fcc 	andi	r2,r2,255
    eeb0:	1000071e 	bne	r2,zero,eed0 <___vfiprintf_internal_r+0xe70>
    eeb4:	a880004c 	andi	r2,r21,1
    eeb8:	10000526 	beq	r2,zero,eed0 <___vfiprintf_internal_r+0xe70>
    eebc:	00800c04 	movi	r2,48
    eec0:	d88019c5 	stb	r2,103(sp)
    eec4:	dcc02717 	ldw	r19,156(sp)
    eec8:	dd0019c4 	addi	r20,sp,103
    eecc:	003d5e06 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    eed0:	dd001a04 	addi	r20,sp,104
    eed4:	003d5c06 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    eed8:	1000971e 	bne	r2,zero,f138 <___vfiprintf_internal_r+0x10d8>
    eedc:	d8c01d87 	ldb	r3,118(sp)
    eee0:	18005826 	beq	r3,zero,f044 <___vfiprintf_internal_r+0xfe4>
    eee4:	00800044 	movi	r2,1
    eee8:	d8c01d84 	addi	r3,sp,118
    eeec:	1009883a 	mov	r4,r2
    eef0:	d8c00015 	stw	r3,0(sp)
    eef4:	d8800115 	stw	r2,4(sp)
    eef8:	d811883a 	mov	r8,sp
    eefc:	003f3206 	br	ebc8 <__alt_mem_Flash_flash_data+0xf400ebc8>
    ef00:	8023883a 	mov	r17,r16
    ef04:	003ca706 	br	e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    ef08:	d9002017 	ldw	r4,128(sp)
    ef0c:	d9402117 	ldw	r5,132(sp)
    ef10:	d9801a04 	addi	r6,sp,104
    ef14:	000df4c0 	call	df4c <__sprint_r.part.0>
    ef18:	103f7b1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    ef1c:	d8801c17 	ldw	r2,112(sp)
    ef20:	d811883a 	mov	r8,sp
    ef24:	003f9106 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    ef28:	00800084 	movi	r2,2
    ef2c:	b348b03a 	or	r4,r22,r13
    ef30:	003d2906 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    ef34:	d8802217 	ldw	r2,136(sp)
    ef38:	001b883a 	mov	r13,zero
    ef3c:	15800017 	ldw	r22,0(r2)
    ef40:	10800104 	addi	r2,r2,4
    ef44:	d8802215 	stw	r2,136(sp)
    ef48:	003ea706 	br	e9e8 <__alt_mem_Flash_flash_data+0xf400e9e8>
    ef4c:	d9002017 	ldw	r4,128(sp)
    ef50:	d9402117 	ldw	r5,132(sp)
    ef54:	d9801a04 	addi	r6,sp,104
    ef58:	000df4c0 	call	df4c <__sprint_r.part.0>
    ef5c:	103f6a1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    ef60:	d811883a 	mov	r8,sp
    ef64:	003cff06 	br	e364 <__alt_mem_Flash_flash_data+0xf400e364>
    ef68:	000b883a 	mov	r5,zero
    ef6c:	1809883a 	mov	r4,r3
    ef70:	d811883a 	mov	r8,sp
    ef74:	003d7f06 	br	e574 <__alt_mem_Flash_flash_data+0xf400e574>
    ef78:	d9002017 	ldw	r4,128(sp)
    ef7c:	d9402117 	ldw	r5,132(sp)
    ef80:	d9801a04 	addi	r6,sp,104
    ef84:	da402b15 	stw	r9,172(sp)
    ef88:	db402a15 	stw	r13,168(sp)
    ef8c:	000df4c0 	call	df4c <__sprint_r.part.0>
    ef90:	da402b17 	ldw	r9,172(sp)
    ef94:	db402a17 	ldw	r13,168(sp)
    ef98:	103f5b1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    ef9c:	d9401b17 	ldw	r5,108(sp)
    efa0:	d8801c17 	ldw	r2,112(sp)
    efa4:	d811883a 	mov	r8,sp
    efa8:	29000044 	addi	r4,r5,1
    efac:	003d6406 	br	e540 <__alt_mem_Flash_flash_data+0xf400e540>
    efb0:	d9002017 	ldw	r4,128(sp)
    efb4:	d9402117 	ldw	r5,132(sp)
    efb8:	d9801a04 	addi	r6,sp,104
    efbc:	da402b15 	stw	r9,172(sp)
    efc0:	000df4c0 	call	df4c <__sprint_r.part.0>
    efc4:	da402b17 	ldw	r9,172(sp)
    efc8:	103f4f1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    efcc:	d9401b17 	ldw	r5,108(sp)
    efd0:	d8801c17 	ldw	r2,112(sp)
    efd4:	d811883a 	mov	r8,sp
    efd8:	29000044 	addi	r4,r5,1
    efdc:	003d6506 	br	e574 <__alt_mem_Flash_flash_data+0xf400e574>
    efe0:	10009a1e 	bne	r2,zero,f24c <___vfiprintf_internal_r+0x11ec>
    efe4:	01000044 	movi	r4,1
    efe8:	000b883a 	mov	r5,zero
    efec:	d811883a 	mov	r8,sp
    eff0:	003d6206 	br	e57c <__alt_mem_Flash_flash_data+0xf400e57c>
    eff4:	d9002017 	ldw	r4,128(sp)
    eff8:	d9402117 	ldw	r5,132(sp)
    effc:	d9801a04 	addi	r6,sp,104
    f000:	000df4c0 	call	df4c <__sprint_r.part.0>
    f004:	103f401e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    f008:	d9001b17 	ldw	r4,108(sp)
    f00c:	d8801c17 	ldw	r2,112(sp)
    f010:	d811883a 	mov	r8,sp
    f014:	21000044 	addi	r4,r4,1
    f018:	003d7d06 	br	e610 <__alt_mem_Flash_flash_data+0xf400e610>
    f01c:	05adc83a 	sub	r22,zero,r22
    f020:	b004c03a 	cmpne	r2,r22,zero
    f024:	035bc83a 	sub	r13,zero,r13
    f028:	689bc83a 	sub	r13,r13,r2
    f02c:	03800b44 	movi	r14,45
    f030:	db801d85 	stb	r14,118(sp)
    f034:	4827883a 	mov	r19,r9
    f038:	00800044 	movi	r2,1
    f03c:	b348b03a 	or	r4,r22,r13
    f040:	003ce806 	br	e3e4 <__alt_mem_Flash_flash_data+0xf400e3e4>
    f044:	000b883a 	mov	r5,zero
    f048:	01000044 	movi	r4,1
    f04c:	d811883a 	mov	r8,sp
    f050:	683d4826 	beq	r13,zero,e574 <__alt_mem_Flash_flash_data+0xf400e574>
    f054:	00800084 	movi	r2,2
    f058:	d8c01d04 	addi	r3,sp,116
    f05c:	d8c00015 	stw	r3,0(sp)
    f060:	d8800115 	stw	r2,4(sp)
    f064:	003d4006 	br	e568 <__alt_mem_Flash_flash_data+0xf400e568>
    f068:	00800084 	movi	r2,2
    f06c:	003cda06 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    f070:	a880100c 	andi	r2,r21,64
    f074:	10004226 	beq	r2,zero,f180 <___vfiprintf_internal_r+0x1120>
    f078:	d8802217 	ldw	r2,136(sp)
    f07c:	001b883a 	mov	r13,zero
    f080:	1580000b 	ldhu	r22,0(r2)
    f084:	10800104 	addi	r2,r2,4
    f088:	d8802215 	stw	r2,136(sp)
    f08c:	b009883a 	mov	r4,r22
    f090:	0005883a 	mov	r2,zero
    f094:	003cd006 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    f098:	80c00007 	ldb	r3,0(r16)
    f09c:	8005883a 	mov	r2,r16
    f0a0:	003c4d06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    f0a4:	a880100c 	andi	r2,r21,64
    f0a8:	10004426 	beq	r2,zero,f1bc <___vfiprintf_internal_r+0x115c>
    f0ac:	d8c02217 	ldw	r3,136(sp)
    f0b0:	001b883a 	mov	r13,zero
    f0b4:	00800044 	movi	r2,1
    f0b8:	1d80000b 	ldhu	r22,0(r3)
    f0bc:	18c00104 	addi	r3,r3,4
    f0c0:	d8c02215 	stw	r3,136(sp)
    f0c4:	b009883a 	mov	r4,r22
    f0c8:	003cc306 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    f0cc:	a880040c 	andi	r2,r21,16
    f0d0:	1000091e 	bne	r2,zero,f0f8 <___vfiprintf_internal_r+0x1098>
    f0d4:	aac0100c 	andi	r11,r21,64
    f0d8:	58000726 	beq	r11,zero,f0f8 <___vfiprintf_internal_r+0x1098>
    f0dc:	d8c02217 	ldw	r3,136(sp)
    f0e0:	d9002317 	ldw	r4,140(sp)
    f0e4:	18800017 	ldw	r2,0(r3)
    f0e8:	18c00104 	addi	r3,r3,4
    f0ec:	d8c02215 	stw	r3,136(sp)
    f0f0:	1100000d 	sth	r4,0(r2)
    f0f4:	003c0e06 	br	e130 <__alt_mem_Flash_flash_data+0xf400e130>
    f0f8:	d8c02217 	ldw	r3,136(sp)
    f0fc:	d9002317 	ldw	r4,140(sp)
    f100:	18800017 	ldw	r2,0(r3)
    f104:	18c00104 	addi	r3,r3,4
    f108:	d8c02215 	stw	r3,136(sp)
    f10c:	11000015 	stw	r4,0(r2)
    f110:	003c0706 	br	e130 <__alt_mem_Flash_flash_data+0xf400e130>
    f114:	a880100c 	andi	r2,r21,64
    f118:	10002126 	beq	r2,zero,f1a0 <___vfiprintf_internal_r+0x1140>
    f11c:	1d80000f 	ldh	r22,0(r3)
    f120:	d8c02217 	ldw	r3,136(sp)
    f124:	b01bd7fa 	srai	r13,r22,31
    f128:	18c00104 	addi	r3,r3,4
    f12c:	d8c02215 	stw	r3,136(sp)
    f130:	6805883a 	mov	r2,r13
    f134:	003dc406 	br	e848 <__alt_mem_Flash_flash_data+0xf400e848>
    f138:	d9002017 	ldw	r4,128(sp)
    f13c:	d9402117 	ldw	r5,132(sp)
    f140:	d9801a04 	addi	r6,sp,104
    f144:	da402b15 	stw	r9,172(sp)
    f148:	db402a15 	stw	r13,168(sp)
    f14c:	000df4c0 	call	df4c <__sprint_r.part.0>
    f150:	da402b17 	ldw	r9,172(sp)
    f154:	db402a17 	ldw	r13,168(sp)
    f158:	103eeb1e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    f15c:	d9401b17 	ldw	r5,108(sp)
    f160:	d8801c17 	ldw	r2,112(sp)
    f164:	d811883a 	mov	r8,sp
    f168:	29000044 	addi	r4,r5,1
    f16c:	003e8b06 	br	eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    f170:	9023883a 	mov	r17,r18
    f174:	003d5a06 	br	e6e0 <__alt_mem_Flash_flash_data+0xf400e6e0>
    f178:	4827883a 	mov	r19,r9
    f17c:	003e3506 	br	ea54 <__alt_mem_Flash_flash_data+0xf400ea54>
    f180:	d8c02217 	ldw	r3,136(sp)
    f184:	001b883a 	mov	r13,zero
    f188:	0005883a 	mov	r2,zero
    f18c:	1d800017 	ldw	r22,0(r3)
    f190:	18c00104 	addi	r3,r3,4
    f194:	d8c02215 	stw	r3,136(sp)
    f198:	b009883a 	mov	r4,r22
    f19c:	003c8e06 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    f1a0:	1d800017 	ldw	r22,0(r3)
    f1a4:	d9002217 	ldw	r4,136(sp)
    f1a8:	b01bd7fa 	srai	r13,r22,31
    f1ac:	21000104 	addi	r4,r4,4
    f1b0:	d9002215 	stw	r4,136(sp)
    f1b4:	6805883a 	mov	r2,r13
    f1b8:	003da306 	br	e848 <__alt_mem_Flash_flash_data+0xf400e848>
    f1bc:	d9002217 	ldw	r4,136(sp)
    f1c0:	001b883a 	mov	r13,zero
    f1c4:	00800044 	movi	r2,1
    f1c8:	25800017 	ldw	r22,0(r4)
    f1cc:	21000104 	addi	r4,r4,4
    f1d0:	d9002215 	stw	r4,136(sp)
    f1d4:	b009883a 	mov	r4,r22
    f1d8:	003c7f06 	br	e3d8 <__alt_mem_Flash_flash_data+0xf400e3d8>
    f1dc:	00c000b4 	movhi	r3,2
    f1e0:	18c29f04 	addi	r3,r3,2684
    f1e4:	d8c02415 	stw	r3,144(sp)
    f1e8:	003cff06 	br	e5e8 <__alt_mem_Flash_flash_data+0xf400e5e8>
    f1ec:	d8801c17 	ldw	r2,112(sp)
    f1f0:	dd402117 	ldw	r21,132(sp)
    f1f4:	103ec526 	beq	r2,zero,ed0c <__alt_mem_Flash_flash_data+0xf400ed0c>
    f1f8:	d9002017 	ldw	r4,128(sp)
    f1fc:	a80b883a 	mov	r5,r21
    f200:	d9801a04 	addi	r6,sp,104
    f204:	000df4c0 	call	df4c <__sprint_r.part.0>
    f208:	003ec006 	br	ed0c <__alt_mem_Flash_flash_data+0xf400ed0c>
    f20c:	80800044 	addi	r2,r16,1
    f210:	ad400814 	ori	r21,r21,32
    f214:	80c00047 	ldb	r3,1(r16)
    f218:	003bef06 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    f21c:	04a5c83a 	sub	r18,zero,r18
    f220:	8005883a 	mov	r2,r16
    f224:	d8c02215 	stw	r3,136(sp)
    f228:	003d5306 	br	e778 <__alt_mem_Flash_flash_data+0xf400e778>
    f22c:	da002a15 	stw	r8,168(sp)
    f230:	0003b540 	call	3b54 <strlen>
    f234:	1027883a 	mov	r19,r2
    f238:	db801d83 	ldbu	r14,118(sp)
    f23c:	dd802215 	stw	r22,136(sp)
    f240:	0013883a 	mov	r9,zero
    f244:	da002a17 	ldw	r8,168(sp)
    f248:	003c7f06 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    f24c:	d9002017 	ldw	r4,128(sp)
    f250:	d9402117 	ldw	r5,132(sp)
    f254:	d9801a04 	addi	r6,sp,104
    f258:	da402b15 	stw	r9,172(sp)
    f25c:	000df4c0 	call	df4c <__sprint_r.part.0>
    f260:	da402b17 	ldw	r9,172(sp)
    f264:	103ea81e 	bne	r2,zero,ed08 <__alt_mem_Flash_flash_data+0xf400ed08>
    f268:	d9401b17 	ldw	r5,108(sp)
    f26c:	d8801c17 	ldw	r2,112(sp)
    f270:	d811883a 	mov	r8,sp
    f274:	29000044 	addi	r4,r5,1
    f278:	003cc006 	br	e57c <__alt_mem_Flash_flash_data+0xf400e57c>
    f27c:	d9401b17 	ldw	r5,108(sp)
    f280:	010000b4 	movhi	r4,2
    f284:	2102a304 	addi	r4,r4,2700
    f288:	d9002415 	stw	r4,144(sp)
    f28c:	29400044 	addi	r5,r5,1
    f290:	003c9f06 	br	e510 <__alt_mem_Flash_flash_data+0xf400e510>
    f294:	00800184 	movi	r2,6
    f298:	1240012e 	bgeu	r2,r9,f2a0 <___vfiprintf_internal_r+0x1240>
    f29c:	1013883a 	mov	r9,r2
    f2a0:	4827883a 	mov	r19,r9
    f2a4:	4823883a 	mov	r17,r9
    f2a8:	48001116 	blt	r9,zero,f2f0 <___vfiprintf_internal_r+0x1290>
    f2ac:	050000b4 	movhi	r20,2
    f2b0:	dd802215 	stw	r22,136(sp)
    f2b4:	a5023304 	addi	r20,r20,2252
    f2b8:	003db106 	br	e980 <__alt_mem_Flash_flash_data+0xf400e980>
    f2bc:	d9401b17 	ldw	r5,108(sp)
    f2c0:	010000b4 	movhi	r4,2
    f2c4:	2102a304 	addi	r4,r4,2700
    f2c8:	d9002415 	stw	r4,144(sp)
    f2cc:	29400044 	addi	r5,r5,1
    f2d0:	003cf906 	br	e6b8 <__alt_mem_Flash_flash_data+0xf400e6b8>
    f2d4:	4827883a 	mov	r19,r9
    f2d8:	db801d83 	ldbu	r14,118(sp)
    f2dc:	dd802215 	stw	r22,136(sp)
    f2e0:	0013883a 	mov	r9,zero
    f2e4:	003c5806 	br	e448 <__alt_mem_Flash_flash_data+0xf400e448>
    f2e8:	200d883a 	mov	r6,r4
    f2ec:	003ec706 	br	ee0c <__alt_mem_Flash_flash_data+0xf400ee0c>
    f2f0:	0023883a 	mov	r17,zero
    f2f4:	003fed06 	br	f2ac <__alt_mem_Flash_flash_data+0xf400f2ac>
    f2f8:	d9002217 	ldw	r4,136(sp)
    f2fc:	22400017 	ldw	r9,0(r4)
    f300:	20c00104 	addi	r3,r4,4
    f304:	d8c02215 	stw	r3,136(sp)
    f308:	483fc20e 	bge	r9,zero,f214 <__alt_mem_Flash_flash_data+0xf400f214>
    f30c:	027fffc4 	movi	r9,-1
    f310:	80c00047 	ldb	r3,1(r16)
    f314:	003bb006 	br	e1d8 <__alt_mem_Flash_flash_data+0xf400e1d8>
    f318:	8c80010e 	bge	r17,r18,f320 <___vfiprintf_internal_r+0x12c0>
    f31c:	9023883a 	mov	r17,r18
    f320:	d8802317 	ldw	r2,140(sp)
    f324:	1445883a 	add	r2,r2,r17
    f328:	d8802315 	stw	r2,140(sp)
    f32c:	003cef06 	br	e6ec <__alt_mem_Flash_flash_data+0xf400e6ec>

0000f330 <__vfiprintf_internal>:
    f330:	2007883a 	mov	r3,r4
    f334:	010000b4 	movhi	r4,2
    f338:	210b3f04 	addi	r4,r4,11516
    f33c:	21000017 	ldw	r4,0(r4)
    f340:	2805883a 	mov	r2,r5
    f344:	300f883a 	mov	r7,r6
    f348:	180b883a 	mov	r5,r3
    f34c:	100d883a 	mov	r6,r2
    f350:	000e0601 	jmpi	e060 <___vfiprintf_internal_r>

0000f354 <__sbprintf>:
    f354:	2880030b 	ldhu	r2,12(r5)
    f358:	2ac01917 	ldw	r11,100(r5)
    f35c:	2a80038b 	ldhu	r10,14(r5)
    f360:	2a400717 	ldw	r9,28(r5)
    f364:	2a000917 	ldw	r8,36(r5)
    f368:	defee204 	addi	sp,sp,-1144
    f36c:	00c10004 	movi	r3,1024
    f370:	dc011a15 	stw	r16,1128(sp)
    f374:	10bfff4c 	andi	r2,r2,65533
    f378:	2821883a 	mov	r16,r5
    f37c:	d8cb883a 	add	r5,sp,r3
    f380:	dc811c15 	stw	r18,1136(sp)
    f384:	dc411b15 	stw	r17,1132(sp)
    f388:	dfc11d15 	stw	ra,1140(sp)
    f38c:	2025883a 	mov	r18,r4
    f390:	d881030d 	sth	r2,1036(sp)
    f394:	dac11915 	stw	r11,1124(sp)
    f398:	da81038d 	sth	r10,1038(sp)
    f39c:	da410715 	stw	r9,1052(sp)
    f3a0:	da010915 	stw	r8,1060(sp)
    f3a4:	dec10015 	stw	sp,1024(sp)
    f3a8:	dec10415 	stw	sp,1040(sp)
    f3ac:	d8c10215 	stw	r3,1032(sp)
    f3b0:	d8c10515 	stw	r3,1044(sp)
    f3b4:	d8010615 	stw	zero,1048(sp)
    f3b8:	000e0600 	call	e060 <___vfiprintf_internal_r>
    f3bc:	1023883a 	mov	r17,r2
    f3c0:	10000416 	blt	r2,zero,f3d4 <__sbprintf+0x80>
    f3c4:	9009883a 	mov	r4,r18
    f3c8:	d9410004 	addi	r5,sp,1024
    f3cc:	00098300 	call	9830 <_fflush_r>
    f3d0:	10000d1e 	bne	r2,zero,f408 <__sbprintf+0xb4>
    f3d4:	d8c1030b 	ldhu	r3,1036(sp)
    f3d8:	18c0100c 	andi	r3,r3,64
    f3dc:	18000326 	beq	r3,zero,f3ec <__sbprintf+0x98>
    f3e0:	8080030b 	ldhu	r2,12(r16)
    f3e4:	10801014 	ori	r2,r2,64
    f3e8:	8080030d 	sth	r2,12(r16)
    f3ec:	8805883a 	mov	r2,r17
    f3f0:	dfc11d17 	ldw	ra,1140(sp)
    f3f4:	dc811c17 	ldw	r18,1136(sp)
    f3f8:	dc411b17 	ldw	r17,1132(sp)
    f3fc:	dc011a17 	ldw	r16,1128(sp)
    f400:	dec11e04 	addi	sp,sp,1144
    f404:	f800283a 	ret
    f408:	047fffc4 	movi	r17,-1
    f40c:	003ff106 	br	f3d4 <__alt_mem_Flash_flash_data+0xf400f3d4>

0000f410 <_write_r>:
    f410:	defffd04 	addi	sp,sp,-12
    f414:	dc000015 	stw	r16,0(sp)
    f418:	040000b4 	movhi	r16,2
    f41c:	dc400115 	stw	r17,4(sp)
    f420:	84135d04 	addi	r16,r16,19828
    f424:	2023883a 	mov	r17,r4
    f428:	2809883a 	mov	r4,r5
    f42c:	300b883a 	mov	r5,r6
    f430:	380d883a 	mov	r6,r7
    f434:	dfc00215 	stw	ra,8(sp)
    f438:	80000015 	stw	zero,0(r16)
    f43c:	001384c0 	call	1384c <write>
    f440:	00ffffc4 	movi	r3,-1
    f444:	10c00526 	beq	r2,r3,f45c <_write_r+0x4c>
    f448:	dfc00217 	ldw	ra,8(sp)
    f44c:	dc400117 	ldw	r17,4(sp)
    f450:	dc000017 	ldw	r16,0(sp)
    f454:	dec00304 	addi	sp,sp,12
    f458:	f800283a 	ret
    f45c:	80c00017 	ldw	r3,0(r16)
    f460:	183ff926 	beq	r3,zero,f448 <__alt_mem_Flash_flash_data+0xf400f448>
    f464:	88c00015 	stw	r3,0(r17)
    f468:	003ff706 	br	f448 <__alt_mem_Flash_flash_data+0xf400f448>

0000f46c <_close_r>:
    f46c:	defffd04 	addi	sp,sp,-12
    f470:	dc000015 	stw	r16,0(sp)
    f474:	040000b4 	movhi	r16,2
    f478:	dc400115 	stw	r17,4(sp)
    f47c:	84135d04 	addi	r16,r16,19828
    f480:	2023883a 	mov	r17,r4
    f484:	2809883a 	mov	r4,r5
    f488:	dfc00215 	stw	ra,8(sp)
    f48c:	80000015 	stw	zero,0(r16)
    f490:	0012fd40 	call	12fd4 <close>
    f494:	00ffffc4 	movi	r3,-1
    f498:	10c00526 	beq	r2,r3,f4b0 <_close_r+0x44>
    f49c:	dfc00217 	ldw	ra,8(sp)
    f4a0:	dc400117 	ldw	r17,4(sp)
    f4a4:	dc000017 	ldw	r16,0(sp)
    f4a8:	dec00304 	addi	sp,sp,12
    f4ac:	f800283a 	ret
    f4b0:	80c00017 	ldw	r3,0(r16)
    f4b4:	183ff926 	beq	r3,zero,f49c <__alt_mem_Flash_flash_data+0xf400f49c>
    f4b8:	88c00015 	stw	r3,0(r17)
    f4bc:	003ff706 	br	f49c <__alt_mem_Flash_flash_data+0xf400f49c>

0000f4c0 <_calloc_r>:
    f4c0:	298b383a 	mul	r5,r5,r6
    f4c4:	defffe04 	addi	sp,sp,-8
    f4c8:	dc000015 	stw	r16,0(sp)
    f4cc:	dfc00115 	stw	ra,4(sp)
    f4d0:	000a9500 	call	a950 <_malloc_r>
    f4d4:	1021883a 	mov	r16,r2
    f4d8:	10002826 	beq	r2,zero,f57c <_calloc_r+0xbc>
    f4dc:	11bfff17 	ldw	r6,-4(r2)
    f4e0:	00bfff04 	movi	r2,-4
    f4e4:	00c00904 	movi	r3,36
    f4e8:	308c703a 	and	r6,r6,r2
    f4ec:	308d883a 	add	r6,r6,r2
    f4f0:	19801436 	bltu	r3,r6,f544 <_calloc_r+0x84>
    f4f4:	008004c4 	movi	r2,19
    f4f8:	11800936 	bltu	r2,r6,f520 <_calloc_r+0x60>
    f4fc:	8005883a 	mov	r2,r16
    f500:	10000015 	stw	zero,0(r2)
    f504:	10000115 	stw	zero,4(r2)
    f508:	10000215 	stw	zero,8(r2)
    f50c:	8005883a 	mov	r2,r16
    f510:	dfc00117 	ldw	ra,4(sp)
    f514:	dc000017 	ldw	r16,0(sp)
    f518:	dec00204 	addi	sp,sp,8
    f51c:	f800283a 	ret
    f520:	80000015 	stw	zero,0(r16)
    f524:	80000115 	stw	zero,4(r16)
    f528:	008006c4 	movi	r2,27
    f52c:	11800d2e 	bgeu	r2,r6,f564 <_calloc_r+0xa4>
    f530:	80000215 	stw	zero,8(r16)
    f534:	80000315 	stw	zero,12(r16)
    f538:	30c00c26 	beq	r6,r3,f56c <_calloc_r+0xac>
    f53c:	80800404 	addi	r2,r16,16
    f540:	003fef06 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f544:	8009883a 	mov	r4,r16
    f548:	000b883a 	mov	r5,zero
    f54c:	000b4740 	call	b474 <memset>
    f550:	8005883a 	mov	r2,r16
    f554:	dfc00117 	ldw	ra,4(sp)
    f558:	dc000017 	ldw	r16,0(sp)
    f55c:	dec00204 	addi	sp,sp,8
    f560:	f800283a 	ret
    f564:	80800204 	addi	r2,r16,8
    f568:	003fe506 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f56c:	80000415 	stw	zero,16(r16)
    f570:	80800604 	addi	r2,r16,24
    f574:	80000515 	stw	zero,20(r16)
    f578:	003fe106 	br	f500 <__alt_mem_Flash_flash_data+0xf400f500>
    f57c:	0005883a 	mov	r2,zero
    f580:	003fe306 	br	f510 <__alt_mem_Flash_flash_data+0xf400f510>

0000f584 <_fclose_r>:
    f584:	28003926 	beq	r5,zero,f66c <_fclose_r+0xe8>
    f588:	defffc04 	addi	sp,sp,-16
    f58c:	dc400115 	stw	r17,4(sp)
    f590:	dc000015 	stw	r16,0(sp)
    f594:	dfc00315 	stw	ra,12(sp)
    f598:	dc800215 	stw	r18,8(sp)
    f59c:	2023883a 	mov	r17,r4
    f5a0:	2821883a 	mov	r16,r5
    f5a4:	20000226 	beq	r4,zero,f5b0 <_fclose_r+0x2c>
    f5a8:	20800e17 	ldw	r2,56(r4)
    f5ac:	10002726 	beq	r2,zero,f64c <_fclose_r+0xc8>
    f5b0:	8080030f 	ldh	r2,12(r16)
    f5b4:	1000071e 	bne	r2,zero,f5d4 <_fclose_r+0x50>
    f5b8:	0005883a 	mov	r2,zero
    f5bc:	dfc00317 	ldw	ra,12(sp)
    f5c0:	dc800217 	ldw	r18,8(sp)
    f5c4:	dc400117 	ldw	r17,4(sp)
    f5c8:	dc000017 	ldw	r16,0(sp)
    f5cc:	dec00404 	addi	sp,sp,16
    f5d0:	f800283a 	ret
    f5d4:	8809883a 	mov	r4,r17
    f5d8:	800b883a 	mov	r5,r16
    f5dc:	00096280 	call	9628 <__sflush_r>
    f5e0:	1025883a 	mov	r18,r2
    f5e4:	80800b17 	ldw	r2,44(r16)
    f5e8:	10000426 	beq	r2,zero,f5fc <_fclose_r+0x78>
    f5ec:	81400717 	ldw	r5,28(r16)
    f5f0:	8809883a 	mov	r4,r17
    f5f4:	103ee83a 	callr	r2
    f5f8:	10001616 	blt	r2,zero,f654 <_fclose_r+0xd0>
    f5fc:	8080030b 	ldhu	r2,12(r16)
    f600:	1080200c 	andi	r2,r2,128
    f604:	1000151e 	bne	r2,zero,f65c <_fclose_r+0xd8>
    f608:	81400c17 	ldw	r5,48(r16)
    f60c:	28000526 	beq	r5,zero,f624 <_fclose_r+0xa0>
    f610:	80801004 	addi	r2,r16,64
    f614:	28800226 	beq	r5,r2,f620 <_fclose_r+0x9c>
    f618:	8809883a 	mov	r4,r17
    f61c:	0009d800 	call	9d80 <_free_r>
    f620:	80000c15 	stw	zero,48(r16)
    f624:	81401117 	ldw	r5,68(r16)
    f628:	28000326 	beq	r5,zero,f638 <_fclose_r+0xb4>
    f62c:	8809883a 	mov	r4,r17
    f630:	0009d800 	call	9d80 <_free_r>
    f634:	80001115 	stw	zero,68(r16)
    f638:	0009c1c0 	call	9c1c <__sfp_lock_acquire>
    f63c:	8000030d 	sth	zero,12(r16)
    f640:	0009c200 	call	9c20 <__sfp_lock_release>
    f644:	9005883a 	mov	r2,r18
    f648:	003fdc06 	br	f5bc <__alt_mem_Flash_flash_data+0xf400f5bc>
    f64c:	0009c0c0 	call	9c0c <__sinit>
    f650:	003fd706 	br	f5b0 <__alt_mem_Flash_flash_data+0xf400f5b0>
    f654:	04bfffc4 	movi	r18,-1
    f658:	003fe806 	br	f5fc <__alt_mem_Flash_flash_data+0xf400f5fc>
    f65c:	81400417 	ldw	r5,16(r16)
    f660:	8809883a 	mov	r4,r17
    f664:	0009d800 	call	9d80 <_free_r>
    f668:	003fe706 	br	f608 <__alt_mem_Flash_flash_data+0xf400f608>
    f66c:	0005883a 	mov	r2,zero
    f670:	f800283a 	ret

0000f674 <fclose>:
    f674:	008000b4 	movhi	r2,2
    f678:	108b3f04 	addi	r2,r2,11516
    f67c:	200b883a 	mov	r5,r4
    f680:	11000017 	ldw	r4,0(r2)
    f684:	000f5841 	jmpi	f584 <_fclose_r>

0000f688 <_fputwc_r>:
    f688:	3080030b 	ldhu	r2,12(r6)
    f68c:	defff804 	addi	sp,sp,-32
    f690:	dcc00415 	stw	r19,16(sp)
    f694:	dc800315 	stw	r18,12(sp)
    f698:	dc000115 	stw	r16,4(sp)
    f69c:	dfc00715 	stw	ra,28(sp)
    f6a0:	dd400615 	stw	r21,24(sp)
    f6a4:	dd000515 	stw	r20,20(sp)
    f6a8:	dc400215 	stw	r17,8(sp)
    f6ac:	10c8000c 	andi	r3,r2,8192
    f6b0:	3021883a 	mov	r16,r6
    f6b4:	2027883a 	mov	r19,r4
    f6b8:	2825883a 	mov	r18,r5
    f6bc:	1800051e 	bne	r3,zero,f6d4 <_fputwc_r+0x4c>
    f6c0:	30c01917 	ldw	r3,100(r6)
    f6c4:	10880014 	ori	r2,r2,8192
    f6c8:	3080030d 	sth	r2,12(r6)
    f6cc:	18880014 	ori	r2,r3,8192
    f6d0:	30801915 	stw	r2,100(r6)
    f6d4:	000a7400 	call	a740 <__locale_mb_cur_max>
    f6d8:	00c00044 	movi	r3,1
    f6dc:	10c03e26 	beq	r2,r3,f7d8 <_fputwc_r+0x150>
    f6e0:	9809883a 	mov	r4,r19
    f6e4:	d80b883a 	mov	r5,sp
    f6e8:	900d883a 	mov	r6,r18
    f6ec:	81c01704 	addi	r7,r16,92
    f6f0:	000fb200 	call	fb20 <_wcrtomb_r>
    f6f4:	1029883a 	mov	r20,r2
    f6f8:	00bfffc4 	movi	r2,-1
    f6fc:	a0802026 	beq	r20,r2,f780 <_fputwc_r+0xf8>
    f700:	d9400003 	ldbu	r5,0(sp)
    f704:	a0001c26 	beq	r20,zero,f778 <_fputwc_r+0xf0>
    f708:	0023883a 	mov	r17,zero
    f70c:	05400284 	movi	r21,10
    f710:	00000906 	br	f738 <_fputwc_r+0xb0>
    f714:	80800017 	ldw	r2,0(r16)
    f718:	11400005 	stb	r5,0(r2)
    f71c:	80c00017 	ldw	r3,0(r16)
    f720:	18c00044 	addi	r3,r3,1
    f724:	80c00015 	stw	r3,0(r16)
    f728:	8c400044 	addi	r17,r17,1
    f72c:	dc45883a 	add	r2,sp,r17
    f730:	8d00112e 	bgeu	r17,r20,f778 <_fputwc_r+0xf0>
    f734:	11400003 	ldbu	r5,0(r2)
    f738:	80c00217 	ldw	r3,8(r16)
    f73c:	18ffffc4 	addi	r3,r3,-1
    f740:	80c00215 	stw	r3,8(r16)
    f744:	183ff30e 	bge	r3,zero,f714 <__alt_mem_Flash_flash_data+0xf400f714>
    f748:	80800617 	ldw	r2,24(r16)
    f74c:	18801916 	blt	r3,r2,f7b4 <_fputwc_r+0x12c>
    f750:	80800017 	ldw	r2,0(r16)
    f754:	11400005 	stb	r5,0(r2)
    f758:	80800017 	ldw	r2,0(r16)
    f75c:	10c00003 	ldbu	r3,0(r2)
    f760:	10800044 	addi	r2,r2,1
    f764:	1d402326 	beq	r3,r21,f7f4 <_fputwc_r+0x16c>
    f768:	80800015 	stw	r2,0(r16)
    f76c:	8c400044 	addi	r17,r17,1
    f770:	dc45883a 	add	r2,sp,r17
    f774:	8d3fef36 	bltu	r17,r20,f734 <__alt_mem_Flash_flash_data+0xf400f734>
    f778:	9005883a 	mov	r2,r18
    f77c:	00000406 	br	f790 <_fputwc_r+0x108>
    f780:	80c0030b 	ldhu	r3,12(r16)
    f784:	a005883a 	mov	r2,r20
    f788:	18c01014 	ori	r3,r3,64
    f78c:	80c0030d 	sth	r3,12(r16)
    f790:	dfc00717 	ldw	ra,28(sp)
    f794:	dd400617 	ldw	r21,24(sp)
    f798:	dd000517 	ldw	r20,20(sp)
    f79c:	dcc00417 	ldw	r19,16(sp)
    f7a0:	dc800317 	ldw	r18,12(sp)
    f7a4:	dc400217 	ldw	r17,8(sp)
    f7a8:	dc000117 	ldw	r16,4(sp)
    f7ac:	dec00804 	addi	sp,sp,32
    f7b0:	f800283a 	ret
    f7b4:	9809883a 	mov	r4,r19
    f7b8:	29403fcc 	andi	r5,r5,255
    f7bc:	800d883a 	mov	r6,r16
    f7c0:	000f9cc0 	call	f9cc <__swbuf_r>
    f7c4:	10bfffe0 	cmpeqi	r2,r2,-1
    f7c8:	10803fcc 	andi	r2,r2,255
    f7cc:	103fd626 	beq	r2,zero,f728 <__alt_mem_Flash_flash_data+0xf400f728>
    f7d0:	00bfffc4 	movi	r2,-1
    f7d4:	003fee06 	br	f790 <__alt_mem_Flash_flash_data+0xf400f790>
    f7d8:	90ffffc4 	addi	r3,r18,-1
    f7dc:	01003f84 	movi	r4,254
    f7e0:	20ffbf36 	bltu	r4,r3,f6e0 <__alt_mem_Flash_flash_data+0xf400f6e0>
    f7e4:	900b883a 	mov	r5,r18
    f7e8:	dc800005 	stb	r18,0(sp)
    f7ec:	1029883a 	mov	r20,r2
    f7f0:	003fc506 	br	f708 <__alt_mem_Flash_flash_data+0xf400f708>
    f7f4:	9809883a 	mov	r4,r19
    f7f8:	a80b883a 	mov	r5,r21
    f7fc:	800d883a 	mov	r6,r16
    f800:	000f9cc0 	call	f9cc <__swbuf_r>
    f804:	10bfffe0 	cmpeqi	r2,r2,-1
    f808:	003fef06 	br	f7c8 <__alt_mem_Flash_flash_data+0xf400f7c8>

0000f80c <fputwc>:
    f80c:	008000b4 	movhi	r2,2
    f810:	defffc04 	addi	sp,sp,-16
    f814:	108b3f04 	addi	r2,r2,11516
    f818:	dc000115 	stw	r16,4(sp)
    f81c:	14000017 	ldw	r16,0(r2)
    f820:	dc400215 	stw	r17,8(sp)
    f824:	dfc00315 	stw	ra,12(sp)
    f828:	2023883a 	mov	r17,r4
    f82c:	280d883a 	mov	r6,r5
    f830:	80000626 	beq	r16,zero,f84c <fputwc+0x40>
    f834:	80800e17 	ldw	r2,56(r16)
    f838:	1000041e 	bne	r2,zero,f84c <fputwc+0x40>
    f83c:	8009883a 	mov	r4,r16
    f840:	d9400015 	stw	r5,0(sp)
    f844:	0009c0c0 	call	9c0c <__sinit>
    f848:	d9800017 	ldw	r6,0(sp)
    f84c:	8009883a 	mov	r4,r16
    f850:	880b883a 	mov	r5,r17
    f854:	dfc00317 	ldw	ra,12(sp)
    f858:	dc400217 	ldw	r17,8(sp)
    f85c:	dc000117 	ldw	r16,4(sp)
    f860:	dec00404 	addi	sp,sp,16
    f864:	000f6881 	jmpi	f688 <_fputwc_r>

0000f868 <_fstat_r>:
    f868:	defffd04 	addi	sp,sp,-12
    f86c:	dc000015 	stw	r16,0(sp)
    f870:	040000b4 	movhi	r16,2
    f874:	dc400115 	stw	r17,4(sp)
    f878:	84135d04 	addi	r16,r16,19828
    f87c:	2023883a 	mov	r17,r4
    f880:	2809883a 	mov	r4,r5
    f884:	300b883a 	mov	r5,r6
    f888:	dfc00215 	stw	ra,8(sp)
    f88c:	80000015 	stw	zero,0(r16)
    f890:	00131200 	call	13120 <fstat>
    f894:	00ffffc4 	movi	r3,-1
    f898:	10c00526 	beq	r2,r3,f8b0 <_fstat_r+0x48>
    f89c:	dfc00217 	ldw	ra,8(sp)
    f8a0:	dc400117 	ldw	r17,4(sp)
    f8a4:	dc000017 	ldw	r16,0(sp)
    f8a8:	dec00304 	addi	sp,sp,12
    f8ac:	f800283a 	ret
    f8b0:	80c00017 	ldw	r3,0(r16)
    f8b4:	183ff926 	beq	r3,zero,f89c <__alt_mem_Flash_flash_data+0xf400f89c>
    f8b8:	88c00015 	stw	r3,0(r17)
    f8bc:	003ff706 	br	f89c <__alt_mem_Flash_flash_data+0xf400f89c>

0000f8c0 <_isatty_r>:
    f8c0:	defffd04 	addi	sp,sp,-12
    f8c4:	dc000015 	stw	r16,0(sp)
    f8c8:	040000b4 	movhi	r16,2
    f8cc:	dc400115 	stw	r17,4(sp)
    f8d0:	84135d04 	addi	r16,r16,19828
    f8d4:	2023883a 	mov	r17,r4
    f8d8:	2809883a 	mov	r4,r5
    f8dc:	dfc00215 	stw	ra,8(sp)
    f8e0:	80000015 	stw	zero,0(r16)
    f8e4:	00132200 	call	13220 <isatty>
    f8e8:	00ffffc4 	movi	r3,-1
    f8ec:	10c00526 	beq	r2,r3,f904 <_isatty_r+0x44>
    f8f0:	dfc00217 	ldw	ra,8(sp)
    f8f4:	dc400117 	ldw	r17,4(sp)
    f8f8:	dc000017 	ldw	r16,0(sp)
    f8fc:	dec00304 	addi	sp,sp,12
    f900:	f800283a 	ret
    f904:	80c00017 	ldw	r3,0(r16)
    f908:	183ff926 	beq	r3,zero,f8f0 <__alt_mem_Flash_flash_data+0xf400f8f0>
    f90c:	88c00015 	stw	r3,0(r17)
    f910:	003ff706 	br	f8f0 <__alt_mem_Flash_flash_data+0xf400f8f0>

0000f914 <_lseek_r>:
    f914:	defffd04 	addi	sp,sp,-12
    f918:	dc000015 	stw	r16,0(sp)
    f91c:	040000b4 	movhi	r16,2
    f920:	dc400115 	stw	r17,4(sp)
    f924:	84135d04 	addi	r16,r16,19828
    f928:	2023883a 	mov	r17,r4
    f92c:	2809883a 	mov	r4,r5
    f930:	300b883a 	mov	r5,r6
    f934:	380d883a 	mov	r6,r7
    f938:	dfc00215 	stw	ra,8(sp)
    f93c:	80000015 	stw	zero,0(r16)
    f940:	00133f80 	call	133f8 <lseek>
    f944:	00ffffc4 	movi	r3,-1
    f948:	10c00526 	beq	r2,r3,f960 <_lseek_r+0x4c>
    f94c:	dfc00217 	ldw	ra,8(sp)
    f950:	dc400117 	ldw	r17,4(sp)
    f954:	dc000017 	ldw	r16,0(sp)
    f958:	dec00304 	addi	sp,sp,12
    f95c:	f800283a 	ret
    f960:	80c00017 	ldw	r3,0(r16)
    f964:	183ff926 	beq	r3,zero,f94c <__alt_mem_Flash_flash_data+0xf400f94c>
    f968:	88c00015 	stw	r3,0(r17)
    f96c:	003ff706 	br	f94c <__alt_mem_Flash_flash_data+0xf400f94c>

0000f970 <_read_r>:
    f970:	defffd04 	addi	sp,sp,-12
    f974:	dc000015 	stw	r16,0(sp)
    f978:	040000b4 	movhi	r16,2
    f97c:	dc400115 	stw	r17,4(sp)
    f980:	84135d04 	addi	r16,r16,19828
    f984:	2023883a 	mov	r17,r4
    f988:	2809883a 	mov	r4,r5
    f98c:	300b883a 	mov	r5,r6
    f990:	380d883a 	mov	r6,r7
    f994:	dfc00215 	stw	ra,8(sp)
    f998:	80000015 	stw	zero,0(r16)
    f99c:	00135f00 	call	135f0 <read>
    f9a0:	00ffffc4 	movi	r3,-1
    f9a4:	10c00526 	beq	r2,r3,f9bc <_read_r+0x4c>
    f9a8:	dfc00217 	ldw	ra,8(sp)
    f9ac:	dc400117 	ldw	r17,4(sp)
    f9b0:	dc000017 	ldw	r16,0(sp)
    f9b4:	dec00304 	addi	sp,sp,12
    f9b8:	f800283a 	ret
    f9bc:	80c00017 	ldw	r3,0(r16)
    f9c0:	183ff926 	beq	r3,zero,f9a8 <__alt_mem_Flash_flash_data+0xf400f9a8>
    f9c4:	88c00015 	stw	r3,0(r17)
    f9c8:	003ff706 	br	f9a8 <__alt_mem_Flash_flash_data+0xf400f9a8>

0000f9cc <__swbuf_r>:
    f9cc:	defffc04 	addi	sp,sp,-16
    f9d0:	dc800215 	stw	r18,8(sp)
    f9d4:	dc400115 	stw	r17,4(sp)
    f9d8:	dc000015 	stw	r16,0(sp)
    f9dc:	dfc00315 	stw	ra,12(sp)
    f9e0:	2025883a 	mov	r18,r4
    f9e4:	2823883a 	mov	r17,r5
    f9e8:	3021883a 	mov	r16,r6
    f9ec:	20000226 	beq	r4,zero,f9f8 <__swbuf_r+0x2c>
    f9f0:	20800e17 	ldw	r2,56(r4)
    f9f4:	10004126 	beq	r2,zero,fafc <__swbuf_r+0x130>
    f9f8:	80c00617 	ldw	r3,24(r16)
    f9fc:	8180030b 	ldhu	r6,12(r16)
    fa00:	80c00215 	stw	r3,8(r16)
    fa04:	30c0020c 	andi	r3,r6,8
    fa08:	18003526 	beq	r3,zero,fae0 <__swbuf_r+0x114>
    fa0c:	80c00417 	ldw	r3,16(r16)
    fa10:	18003326 	beq	r3,zero,fae0 <__swbuf_r+0x114>
    fa14:	3088000c 	andi	r2,r6,8192
    fa18:	8c403fcc 	andi	r17,r17,255
    fa1c:	10001726 	beq	r2,zero,fa7c <__swbuf_r+0xb0>
    fa20:	80800017 	ldw	r2,0(r16)
    fa24:	81000517 	ldw	r4,20(r16)
    fa28:	10c7c83a 	sub	r3,r2,r3
    fa2c:	19001d0e 	bge	r3,r4,faa4 <__swbuf_r+0xd8>
    fa30:	18c00044 	addi	r3,r3,1
    fa34:	81400217 	ldw	r5,8(r16)
    fa38:	11000044 	addi	r4,r2,1
    fa3c:	81000015 	stw	r4,0(r16)
    fa40:	297fffc4 	addi	r5,r5,-1
    fa44:	81400215 	stw	r5,8(r16)
    fa48:	14400005 	stb	r17,0(r2)
    fa4c:	80800517 	ldw	r2,20(r16)
    fa50:	10c01d26 	beq	r2,r3,fac8 <__swbuf_r+0xfc>
    fa54:	8080030b 	ldhu	r2,12(r16)
    fa58:	1080004c 	andi	r2,r2,1
    fa5c:	1000181e 	bne	r2,zero,fac0 <__swbuf_r+0xf4>
    fa60:	8805883a 	mov	r2,r17
    fa64:	dfc00317 	ldw	ra,12(sp)
    fa68:	dc800217 	ldw	r18,8(sp)
    fa6c:	dc400117 	ldw	r17,4(sp)
    fa70:	dc000017 	ldw	r16,0(sp)
    fa74:	dec00404 	addi	sp,sp,16
    fa78:	f800283a 	ret
    fa7c:	81001917 	ldw	r4,100(r16)
    fa80:	00b7ffc4 	movi	r2,-8193
    fa84:	31880014 	ori	r6,r6,8192
    fa88:	2084703a 	and	r2,r4,r2
    fa8c:	80801915 	stw	r2,100(r16)
    fa90:	80800017 	ldw	r2,0(r16)
    fa94:	81000517 	ldw	r4,20(r16)
    fa98:	8180030d 	sth	r6,12(r16)
    fa9c:	10c7c83a 	sub	r3,r2,r3
    faa0:	193fe316 	blt	r3,r4,fa30 <__alt_mem_Flash_flash_data+0xf400fa30>
    faa4:	9009883a 	mov	r4,r18
    faa8:	800b883a 	mov	r5,r16
    faac:	00098300 	call	9830 <_fflush_r>
    fab0:	1000091e 	bne	r2,zero,fad8 <__swbuf_r+0x10c>
    fab4:	80800017 	ldw	r2,0(r16)
    fab8:	00c00044 	movi	r3,1
    fabc:	003fdd06 	br	fa34 <__alt_mem_Flash_flash_data+0xf400fa34>
    fac0:	00800284 	movi	r2,10
    fac4:	88bfe61e 	bne	r17,r2,fa60 <__alt_mem_Flash_flash_data+0xf400fa60>
    fac8:	9009883a 	mov	r4,r18
    facc:	800b883a 	mov	r5,r16
    fad0:	00098300 	call	9830 <_fflush_r>
    fad4:	103fe226 	beq	r2,zero,fa60 <__alt_mem_Flash_flash_data+0xf400fa60>
    fad8:	00bfffc4 	movi	r2,-1
    fadc:	003fe106 	br	fa64 <__alt_mem_Flash_flash_data+0xf400fa64>
    fae0:	9009883a 	mov	r4,r18
    fae4:	800b883a 	mov	r5,r16
    fae8:	0007bac0 	call	7bac <__swsetup_r>
    faec:	103ffa1e 	bne	r2,zero,fad8 <__alt_mem_Flash_flash_data+0xf400fad8>
    faf0:	8180030b 	ldhu	r6,12(r16)
    faf4:	80c00417 	ldw	r3,16(r16)
    faf8:	003fc606 	br	fa14 <__alt_mem_Flash_flash_data+0xf400fa14>
    fafc:	0009c0c0 	call	9c0c <__sinit>
    fb00:	003fbd06 	br	f9f8 <__alt_mem_Flash_flash_data+0xf400f9f8>

0000fb04 <__swbuf>:
    fb04:	00c000b4 	movhi	r3,2
    fb08:	18cb3f04 	addi	r3,r3,11516
    fb0c:	2005883a 	mov	r2,r4
    fb10:	19000017 	ldw	r4,0(r3)
    fb14:	280d883a 	mov	r6,r5
    fb18:	100b883a 	mov	r5,r2
    fb1c:	000f9cc1 	jmpi	f9cc <__swbuf_r>

0000fb20 <_wcrtomb_r>:
    fb20:	defff604 	addi	sp,sp,-40
    fb24:	008000b4 	movhi	r2,2
    fb28:	dc800815 	stw	r18,32(sp)
    fb2c:	dc400715 	stw	r17,28(sp)
    fb30:	dc000615 	stw	r16,24(sp)
    fb34:	108b4304 	addi	r2,r2,11532
    fb38:	dfc00915 	stw	ra,36(sp)
    fb3c:	2021883a 	mov	r16,r4
    fb40:	3823883a 	mov	r17,r7
    fb44:	14800017 	ldw	r18,0(r2)
    fb48:	28001426 	beq	r5,zero,fb9c <_wcrtomb_r+0x7c>
    fb4c:	d9400415 	stw	r5,16(sp)
    fb50:	d9800515 	stw	r6,20(sp)
    fb54:	000a7340 	call	a734 <__locale_charset>
    fb58:	d9400417 	ldw	r5,16(sp)
    fb5c:	d9800517 	ldw	r6,20(sp)
    fb60:	8009883a 	mov	r4,r16
    fb64:	dc400015 	stw	r17,0(sp)
    fb68:	100f883a 	mov	r7,r2
    fb6c:	903ee83a 	callr	r18
    fb70:	00ffffc4 	movi	r3,-1
    fb74:	10c0031e 	bne	r2,r3,fb84 <_wcrtomb_r+0x64>
    fb78:	88000015 	stw	zero,0(r17)
    fb7c:	00c02284 	movi	r3,138
    fb80:	80c00015 	stw	r3,0(r16)
    fb84:	dfc00917 	ldw	ra,36(sp)
    fb88:	dc800817 	ldw	r18,32(sp)
    fb8c:	dc400717 	ldw	r17,28(sp)
    fb90:	dc000617 	ldw	r16,24(sp)
    fb94:	dec00a04 	addi	sp,sp,40
    fb98:	f800283a 	ret
    fb9c:	000a7340 	call	a734 <__locale_charset>
    fba0:	8009883a 	mov	r4,r16
    fba4:	dc400015 	stw	r17,0(sp)
    fba8:	d9400104 	addi	r5,sp,4
    fbac:	000d883a 	mov	r6,zero
    fbb0:	100f883a 	mov	r7,r2
    fbb4:	903ee83a 	callr	r18
    fbb8:	003fed06 	br	fb70 <__alt_mem_Flash_flash_data+0xf400fb70>

0000fbbc <wcrtomb>:
    fbbc:	defff604 	addi	sp,sp,-40
    fbc0:	008000b4 	movhi	r2,2
    fbc4:	dc800615 	stw	r18,24(sp)
    fbc8:	dc400515 	stw	r17,20(sp)
    fbcc:	dc000415 	stw	r16,16(sp)
    fbd0:	108b3f04 	addi	r2,r2,11516
    fbd4:	dfc00915 	stw	ra,36(sp)
    fbd8:	dd000815 	stw	r20,32(sp)
    fbdc:	dcc00715 	stw	r19,28(sp)
    fbe0:	2021883a 	mov	r16,r4
    fbe4:	3025883a 	mov	r18,r6
    fbe8:	14400017 	ldw	r17,0(r2)
    fbec:	20001826 	beq	r4,zero,fc50 <wcrtomb+0x94>
    fbf0:	008000b4 	movhi	r2,2
    fbf4:	108b4304 	addi	r2,r2,11532
    fbf8:	15000017 	ldw	r20,0(r2)
    fbfc:	2827883a 	mov	r19,r5
    fc00:	000a7340 	call	a734 <__locale_charset>
    fc04:	8809883a 	mov	r4,r17
    fc08:	dc800015 	stw	r18,0(sp)
    fc0c:	800b883a 	mov	r5,r16
    fc10:	980d883a 	mov	r6,r19
    fc14:	100f883a 	mov	r7,r2
    fc18:	a03ee83a 	callr	r20
    fc1c:	00ffffc4 	movi	r3,-1
    fc20:	10c0031e 	bne	r2,r3,fc30 <wcrtomb+0x74>
    fc24:	90000015 	stw	zero,0(r18)
    fc28:	00c02284 	movi	r3,138
    fc2c:	88c00015 	stw	r3,0(r17)
    fc30:	dfc00917 	ldw	ra,36(sp)
    fc34:	dd000817 	ldw	r20,32(sp)
    fc38:	dcc00717 	ldw	r19,28(sp)
    fc3c:	dc800617 	ldw	r18,24(sp)
    fc40:	dc400517 	ldw	r17,20(sp)
    fc44:	dc000417 	ldw	r16,16(sp)
    fc48:	dec00a04 	addi	sp,sp,40
    fc4c:	f800283a 	ret
    fc50:	008000b4 	movhi	r2,2
    fc54:	108b4304 	addi	r2,r2,11532
    fc58:	14000017 	ldw	r16,0(r2)
    fc5c:	000a7340 	call	a734 <__locale_charset>
    fc60:	8809883a 	mov	r4,r17
    fc64:	dc800015 	stw	r18,0(sp)
    fc68:	d9400104 	addi	r5,sp,4
    fc6c:	000d883a 	mov	r6,zero
    fc70:	100f883a 	mov	r7,r2
    fc74:	803ee83a 	callr	r16
    fc78:	003fe806 	br	fc1c <__alt_mem_Flash_flash_data+0xf400fc1c>

0000fc7c <__ascii_wctomb>:
    fc7c:	28000526 	beq	r5,zero,fc94 <__ascii_wctomb+0x18>
    fc80:	00803fc4 	movi	r2,255
    fc84:	11800536 	bltu	r2,r6,fc9c <__ascii_wctomb+0x20>
    fc88:	29800005 	stb	r6,0(r5)
    fc8c:	00800044 	movi	r2,1
    fc90:	f800283a 	ret
    fc94:	0005883a 	mov	r2,zero
    fc98:	f800283a 	ret
    fc9c:	00802284 	movi	r2,138
    fca0:	20800015 	stw	r2,0(r4)
    fca4:	00bfffc4 	movi	r2,-1
    fca8:	f800283a 	ret

0000fcac <_wctomb_r>:
    fcac:	008000b4 	movhi	r2,2
    fcb0:	defff904 	addi	sp,sp,-28
    fcb4:	108b4304 	addi	r2,r2,11532
    fcb8:	dfc00615 	stw	ra,24(sp)
    fcbc:	dc400515 	stw	r17,20(sp)
    fcc0:	dc000415 	stw	r16,16(sp)
    fcc4:	3823883a 	mov	r17,r7
    fcc8:	14000017 	ldw	r16,0(r2)
    fccc:	d9000115 	stw	r4,4(sp)
    fcd0:	d9400215 	stw	r5,8(sp)
    fcd4:	d9800315 	stw	r6,12(sp)
    fcd8:	000a7340 	call	a734 <__locale_charset>
    fcdc:	d9000117 	ldw	r4,4(sp)
    fce0:	d9400217 	ldw	r5,8(sp)
    fce4:	d9800317 	ldw	r6,12(sp)
    fce8:	dc400015 	stw	r17,0(sp)
    fcec:	100f883a 	mov	r7,r2
    fcf0:	803ee83a 	callr	r16
    fcf4:	dfc00617 	ldw	ra,24(sp)
    fcf8:	dc400517 	ldw	r17,20(sp)
    fcfc:	dc000417 	ldw	r16,16(sp)
    fd00:	dec00704 	addi	sp,sp,28
    fd04:	f800283a 	ret

0000fd08 <__udivdi3>:
    fd08:	defff504 	addi	sp,sp,-44
    fd0c:	dcc00415 	stw	r19,16(sp)
    fd10:	dc000115 	stw	r16,4(sp)
    fd14:	dfc00a15 	stw	ra,40(sp)
    fd18:	df000915 	stw	fp,36(sp)
    fd1c:	ddc00815 	stw	r23,32(sp)
    fd20:	dd800715 	stw	r22,28(sp)
    fd24:	dd400615 	stw	r21,24(sp)
    fd28:	dd000515 	stw	r20,20(sp)
    fd2c:	dc800315 	stw	r18,12(sp)
    fd30:	dc400215 	stw	r17,8(sp)
    fd34:	2027883a 	mov	r19,r4
    fd38:	2821883a 	mov	r16,r5
    fd3c:	3800421e 	bne	r7,zero,fe48 <__udivdi3+0x140>
    fd40:	3025883a 	mov	r18,r6
    fd44:	2023883a 	mov	r17,r4
    fd48:	2980542e 	bgeu	r5,r6,fe9c <__udivdi3+0x194>
    fd4c:	00bfffd4 	movui	r2,65535
    fd50:	282d883a 	mov	r22,r5
    fd54:	1180a836 	bltu	r2,r6,fff8 <__udivdi3+0x2f0>
    fd58:	00803fc4 	movi	r2,255
    fd5c:	1181422e 	bgeu	r2,r6,10268 <__udivdi3+0x560>
    fd60:	00800204 	movi	r2,8
    fd64:	1007883a 	mov	r3,r2
    fd68:	3084d83a 	srl	r2,r6,r2
    fd6c:	010000b4 	movhi	r4,2
    fd70:	2102a704 	addi	r4,r4,2716
    fd74:	2085883a 	add	r2,r4,r2
    fd78:	10800003 	ldbu	r2,0(r2)
    fd7c:	10c7883a 	add	r3,r2,r3
    fd80:	00800804 	movi	r2,32
    fd84:	10c5c83a 	sub	r2,r2,r3
    fd88:	10000526 	beq	r2,zero,fda0 <__udivdi3+0x98>
    fd8c:	80a0983a 	sll	r16,r16,r2
    fd90:	98c6d83a 	srl	r3,r19,r3
    fd94:	30a4983a 	sll	r18,r6,r2
    fd98:	98a2983a 	sll	r17,r19,r2
    fd9c:	80ecb03a 	or	r22,r16,r3
    fda0:	902ad43a 	srli	r21,r18,16
    fda4:	b009883a 	mov	r4,r22
    fda8:	953fffcc 	andi	r20,r18,65535
    fdac:	a80b883a 	mov	r5,r21
    fdb0:	001097c0 	call	1097c <__umodsi3>
    fdb4:	b009883a 	mov	r4,r22
    fdb8:	a80b883a 	mov	r5,r21
    fdbc:	1027883a 	mov	r19,r2
    fdc0:	00109740 	call	10974 <__udivsi3>
    fdc4:	1021883a 	mov	r16,r2
    fdc8:	8806d43a 	srli	r3,r17,16
    fdcc:	9804943a 	slli	r2,r19,16
    fdd0:	8527383a 	mul	r19,r16,r20
    fdd4:	10c4b03a 	or	r2,r2,r3
    fdd8:	14c0052e 	bgeu	r2,r19,fdf0 <__udivdi3+0xe8>
    fddc:	1485883a 	add	r2,r2,r18
    fde0:	80ffffc4 	addi	r3,r16,-1
    fde4:	14800136 	bltu	r2,r18,fdec <__udivdi3+0xe4>
    fde8:	14c13436 	bltu	r2,r19,102bc <__udivdi3+0x5b4>
    fdec:	1821883a 	mov	r16,r3
    fdf0:	14e7c83a 	sub	r19,r2,r19
    fdf4:	9809883a 	mov	r4,r19
    fdf8:	a80b883a 	mov	r5,r21
    fdfc:	001097c0 	call	1097c <__umodsi3>
    fe00:	102d883a 	mov	r22,r2
    fe04:	9809883a 	mov	r4,r19
    fe08:	a80b883a 	mov	r5,r21
    fe0c:	00109740 	call	10974 <__udivsi3>
    fe10:	b02c943a 	slli	r22,r22,16
    fe14:	1529383a 	mul	r20,r2,r20
    fe18:	8c7fffcc 	andi	r17,r17,65535
    fe1c:	b462b03a 	or	r17,r22,r17
    fe20:	8d00052e 	bgeu	r17,r20,fe38 <__udivdi3+0x130>
    fe24:	8ca3883a 	add	r17,r17,r18
    fe28:	10ffffc4 	addi	r3,r2,-1
    fe2c:	8c80f636 	bltu	r17,r18,10208 <__udivdi3+0x500>
    fe30:	8d00f52e 	bgeu	r17,r20,10208 <__udivdi3+0x500>
    fe34:	10bfff84 	addi	r2,r2,-2
    fe38:	8020943a 	slli	r16,r16,16
    fe3c:	0007883a 	mov	r3,zero
    fe40:	1404b03a 	or	r2,r2,r16
    fe44:	00005b06 	br	ffb4 <__udivdi3+0x2ac>
    fe48:	29c05836 	bltu	r5,r7,ffac <__udivdi3+0x2a4>
    fe4c:	00bfffd4 	movui	r2,65535
    fe50:	11c0642e 	bgeu	r2,r7,ffe4 <__udivdi3+0x2dc>
    fe54:	00804034 	movhi	r2,256
    fe58:	10bfffc4 	addi	r2,r2,-1
    fe5c:	11c0f32e 	bgeu	r2,r7,1022c <__udivdi3+0x524>
    fe60:	00c00604 	movi	r3,24
    fe64:	180b883a 	mov	r5,r3
    fe68:	38c6d83a 	srl	r3,r7,r3
    fe6c:	008000b4 	movhi	r2,2
    fe70:	1082a704 	addi	r2,r2,2716
    fe74:	10c7883a 	add	r3,r2,r3
    fe78:	18c00003 	ldbu	r3,0(r3)
    fe7c:	01000804 	movi	r4,32
    fe80:	1947883a 	add	r3,r3,r5
    fe84:	20e5c83a 	sub	r18,r4,r3
    fe88:	9000661e 	bne	r18,zero,10024 <__udivdi3+0x31c>
    fe8c:	3c00f936 	bltu	r7,r16,10274 <__udivdi3+0x56c>
    fe90:	9985403a 	cmpgeu	r2,r19,r6
    fe94:	0007883a 	mov	r3,zero
    fe98:	00004606 	br	ffb4 <__udivdi3+0x2ac>
    fe9c:	3000041e 	bne	r6,zero,feb0 <__udivdi3+0x1a8>
    fea0:	01000044 	movi	r4,1
    fea4:	000b883a 	mov	r5,zero
    fea8:	00109740 	call	10974 <__udivsi3>
    feac:	1025883a 	mov	r18,r2
    feb0:	00bfffd4 	movui	r2,65535
    feb4:	1480562e 	bgeu	r2,r18,10010 <__udivdi3+0x308>
    feb8:	00804034 	movhi	r2,256
    febc:	10bfffc4 	addi	r2,r2,-1
    fec0:	1480e32e 	bgeu	r2,r18,10250 <__udivdi3+0x548>
    fec4:	00800604 	movi	r2,24
    fec8:	1007883a 	mov	r3,r2
    fecc:	9084d83a 	srl	r2,r18,r2
    fed0:	010000b4 	movhi	r4,2
    fed4:	2102a704 	addi	r4,r4,2716
    fed8:	2085883a 	add	r2,r4,r2
    fedc:	10800003 	ldbu	r2,0(r2)
    fee0:	10c5883a 	add	r2,r2,r3
    fee4:	00c00804 	movi	r3,32
    fee8:	1887c83a 	sub	r3,r3,r2
    feec:	1800911e 	bne	r3,zero,10134 <__udivdi3+0x42c>
    fef0:	9028d43a 	srli	r20,r18,16
    fef4:	84a1c83a 	sub	r16,r16,r18
    fef8:	957fffcc 	andi	r21,r18,65535
    fefc:	00c00044 	movi	r3,1
    ff00:	8009883a 	mov	r4,r16
    ff04:	a00b883a 	mov	r5,r20
    ff08:	d8c00015 	stw	r3,0(sp)
    ff0c:	001097c0 	call	1097c <__umodsi3>
    ff10:	8009883a 	mov	r4,r16
    ff14:	a00b883a 	mov	r5,r20
    ff18:	1027883a 	mov	r19,r2
    ff1c:	00109740 	call	10974 <__udivsi3>
    ff20:	1021883a 	mov	r16,r2
    ff24:	880cd43a 	srli	r6,r17,16
    ff28:	9804943a 	slli	r2,r19,16
    ff2c:	8567383a 	mul	r19,r16,r21
    ff30:	d8c00017 	ldw	r3,0(sp)
    ff34:	1188b03a 	or	r4,r2,r6
    ff38:	24c0052e 	bgeu	r4,r19,ff50 <__udivdi3+0x248>
    ff3c:	2489883a 	add	r4,r4,r18
    ff40:	80bfffc4 	addi	r2,r16,-1
    ff44:	24800136 	bltu	r4,r18,ff4c <__udivdi3+0x244>
    ff48:	24c0d936 	bltu	r4,r19,102b0 <__udivdi3+0x5a8>
    ff4c:	1021883a 	mov	r16,r2
    ff50:	24e7c83a 	sub	r19,r4,r19
    ff54:	9809883a 	mov	r4,r19
    ff58:	a00b883a 	mov	r5,r20
    ff5c:	d8c00015 	stw	r3,0(sp)
    ff60:	001097c0 	call	1097c <__umodsi3>
    ff64:	102d883a 	mov	r22,r2
    ff68:	9809883a 	mov	r4,r19
    ff6c:	a00b883a 	mov	r5,r20
    ff70:	00109740 	call	10974 <__udivsi3>
    ff74:	b02c943a 	slli	r22,r22,16
    ff78:	156b383a 	mul	r21,r2,r21
    ff7c:	8c7fffcc 	andi	r17,r17,65535
    ff80:	b462b03a 	or	r17,r22,r17
    ff84:	d8c00017 	ldw	r3,0(sp)
    ff88:	8d40052e 	bgeu	r17,r21,ffa0 <__udivdi3+0x298>
    ff8c:	8ca3883a 	add	r17,r17,r18
    ff90:	113fffc4 	addi	r4,r2,-1
    ff94:	8c809a36 	bltu	r17,r18,10200 <__udivdi3+0x4f8>
    ff98:	8d40992e 	bgeu	r17,r21,10200 <__udivdi3+0x4f8>
    ff9c:	10bfff84 	addi	r2,r2,-2
    ffa0:	8020943a 	slli	r16,r16,16
    ffa4:	1404b03a 	or	r2,r2,r16
    ffa8:	00000206 	br	ffb4 <__udivdi3+0x2ac>
    ffac:	0007883a 	mov	r3,zero
    ffb0:	0005883a 	mov	r2,zero
    ffb4:	dfc00a17 	ldw	ra,40(sp)
    ffb8:	df000917 	ldw	fp,36(sp)
    ffbc:	ddc00817 	ldw	r23,32(sp)
    ffc0:	dd800717 	ldw	r22,28(sp)
    ffc4:	dd400617 	ldw	r21,24(sp)
    ffc8:	dd000517 	ldw	r20,20(sp)
    ffcc:	dcc00417 	ldw	r19,16(sp)
    ffd0:	dc800317 	ldw	r18,12(sp)
    ffd4:	dc400217 	ldw	r17,8(sp)
    ffd8:	dc000117 	ldw	r16,4(sp)
    ffdc:	dec00b04 	addi	sp,sp,44
    ffe0:	f800283a 	ret
    ffe4:	00803fc4 	movi	r2,255
    ffe8:	11c0932e 	bgeu	r2,r7,10238 <__udivdi3+0x530>
    ffec:	00c00204 	movi	r3,8
    fff0:	180b883a 	mov	r5,r3
    fff4:	003f9c06 	br	fe68 <__alt_mem_Flash_flash_data+0xf400fe68>
    fff8:	00804034 	movhi	r2,256
    fffc:	10bfffc4 	addi	r2,r2,-1
   10000:	1180902e 	bgeu	r2,r6,10244 <__udivdi3+0x53c>
   10004:	00800604 	movi	r2,24
   10008:	1007883a 	mov	r3,r2
   1000c:	003f5606 	br	fd68 <__alt_mem_Flash_flash_data+0xf400fd68>
   10010:	00803fc4 	movi	r2,255
   10014:	1480912e 	bgeu	r2,r18,1025c <__udivdi3+0x554>
   10018:	00800204 	movi	r2,8
   1001c:	1007883a 	mov	r3,r2
   10020:	003faa06 	br	fecc <__alt_mem_Flash_flash_data+0xf400fecc>
   10024:	30eed83a 	srl	r23,r6,r3
   10028:	3c8e983a 	sll	r7,r7,r18
   1002c:	80f8d83a 	srl	fp,r16,r3
   10030:	98c6d83a 	srl	r3,r19,r3
   10034:	3deeb03a 	or	r23,r7,r23
   10038:	b828d43a 	srli	r20,r23,16
   1003c:	84a0983a 	sll	r16,r16,r18
   10040:	e009883a 	mov	r4,fp
   10044:	a00b883a 	mov	r5,r20
   10048:	80e2b03a 	or	r17,r16,r3
   1004c:	34aa983a 	sll	r21,r6,r18
   10050:	001097c0 	call	1097c <__umodsi3>
   10054:	e009883a 	mov	r4,fp
   10058:	a00b883a 	mov	r5,r20
   1005c:	102d883a 	mov	r22,r2
   10060:	00109740 	call	10974 <__udivsi3>
   10064:	1021883a 	mov	r16,r2
   10068:	bf3fffcc 	andi	fp,r23,65535
   1006c:	b004943a 	slli	r2,r22,16
   10070:	8808d43a 	srli	r4,r17,16
   10074:	872d383a 	mul	r22,r16,fp
   10078:	1104b03a 	or	r2,r2,r4
   1007c:	1580042e 	bgeu	r2,r22,10090 <__udivdi3+0x388>
   10080:	15c5883a 	add	r2,r2,r23
   10084:	80ffffc4 	addi	r3,r16,-1
   10088:	15c0812e 	bgeu	r2,r23,10290 <__udivdi3+0x588>
   1008c:	1821883a 	mov	r16,r3
   10090:	15adc83a 	sub	r22,r2,r22
   10094:	b009883a 	mov	r4,r22
   10098:	a00b883a 	mov	r5,r20
   1009c:	001097c0 	call	1097c <__umodsi3>
   100a0:	a00b883a 	mov	r5,r20
   100a4:	b009883a 	mov	r4,r22
   100a8:	d8800015 	stw	r2,0(sp)
   100ac:	00109740 	call	10974 <__udivsi3>
   100b0:	d8c00017 	ldw	r3,0(sp)
   100b4:	170b383a 	mul	r5,r2,fp
   100b8:	8c7fffcc 	andi	r17,r17,65535
   100bc:	1806943a 	slli	r3,r3,16
   100c0:	1c46b03a 	or	r3,r3,r17
   100c4:	1940042e 	bgeu	r3,r5,100d8 <__udivdi3+0x3d0>
   100c8:	1dc7883a 	add	r3,r3,r23
   100cc:	113fffc4 	addi	r4,r2,-1
   100d0:	1dc06b2e 	bgeu	r3,r23,10280 <__udivdi3+0x578>
   100d4:	2005883a 	mov	r2,r4
   100d8:	8020943a 	slli	r16,r16,16
   100dc:	a9ffffcc 	andi	r7,r21,65535
   100e0:	a82ad43a 	srli	r21,r21,16
   100e4:	1404b03a 	or	r2,r2,r16
   100e8:	113fffcc 	andi	r4,r2,65535
   100ec:	100cd43a 	srli	r6,r2,16
   100f0:	21d3383a 	mul	r9,r4,r7
   100f4:	2549383a 	mul	r4,r4,r21
   100f8:	31cf383a 	mul	r7,r6,r7
   100fc:	4810d43a 	srli	r8,r9,16
   10100:	1947c83a 	sub	r3,r3,r5
   10104:	3909883a 	add	r4,r7,r4
   10108:	2209883a 	add	r4,r4,r8
   1010c:	354d383a 	mul	r6,r6,r21
   10110:	21c0022e 	bgeu	r4,r7,1011c <__udivdi3+0x414>
   10114:	01400074 	movhi	r5,1
   10118:	314d883a 	add	r6,r6,r5
   1011c:	202ad43a 	srli	r21,r4,16
   10120:	354d883a 	add	r6,r6,r21
   10124:	19803f36 	bltu	r3,r6,10224 <__udivdi3+0x51c>
   10128:	19803926 	beq	r3,r6,10210 <__udivdi3+0x508>
   1012c:	0007883a 	mov	r3,zero
   10130:	003fa006 	br	ffb4 <__alt_mem_Flash_flash_data+0xf400ffb4>
   10134:	90e4983a 	sll	r18,r18,r3
   10138:	80aad83a 	srl	r21,r16,r2
   1013c:	80e0983a 	sll	r16,r16,r3
   10140:	9028d43a 	srli	r20,r18,16
   10144:	9884d83a 	srl	r2,r19,r2
   10148:	a809883a 	mov	r4,r21
   1014c:	a00b883a 	mov	r5,r20
   10150:	80acb03a 	or	r22,r16,r2
   10154:	98e2983a 	sll	r17,r19,r3
   10158:	001097c0 	call	1097c <__umodsi3>
   1015c:	a809883a 	mov	r4,r21
   10160:	a00b883a 	mov	r5,r20
   10164:	1021883a 	mov	r16,r2
   10168:	00109740 	call	10974 <__udivsi3>
   1016c:	957fffcc 	andi	r21,r18,65535
   10170:	8020943a 	slli	r16,r16,16
   10174:	b00ad43a 	srli	r5,r22,16
   10178:	1567383a 	mul	r19,r2,r21
   1017c:	102f883a 	mov	r23,r2
   10180:	8148b03a 	or	r4,r16,r5
   10184:	24c0062e 	bgeu	r4,r19,101a0 <__udivdi3+0x498>
   10188:	2489883a 	add	r4,r4,r18
   1018c:	10bfffc4 	addi	r2,r2,-1
   10190:	24804536 	bltu	r4,r18,102a8 <__udivdi3+0x5a0>
   10194:	24c0442e 	bgeu	r4,r19,102a8 <__udivdi3+0x5a0>
   10198:	bdffff84 	addi	r23,r23,-2
   1019c:	2489883a 	add	r4,r4,r18
   101a0:	24e7c83a 	sub	r19,r4,r19
   101a4:	9809883a 	mov	r4,r19
   101a8:	a00b883a 	mov	r5,r20
   101ac:	001097c0 	call	1097c <__umodsi3>
   101b0:	1021883a 	mov	r16,r2
   101b4:	9809883a 	mov	r4,r19
   101b8:	a00b883a 	mov	r5,r20
   101bc:	00109740 	call	10974 <__udivsi3>
   101c0:	8020943a 	slli	r16,r16,16
   101c4:	1007883a 	mov	r3,r2
   101c8:	1545383a 	mul	r2,r2,r21
   101cc:	b13fffcc 	andi	r4,r22,65535
   101d0:	8108b03a 	or	r4,r16,r4
   101d4:	2080062e 	bgeu	r4,r2,101f0 <__udivdi3+0x4e8>
   101d8:	2489883a 	add	r4,r4,r18
   101dc:	197fffc4 	addi	r5,r3,-1
   101e0:	24802f36 	bltu	r4,r18,102a0 <__udivdi3+0x598>
   101e4:	20802e2e 	bgeu	r4,r2,102a0 <__udivdi3+0x598>
   101e8:	18ffff84 	addi	r3,r3,-2
   101ec:	2489883a 	add	r4,r4,r18
   101f0:	b82e943a 	slli	r23,r23,16
   101f4:	20a1c83a 	sub	r16,r4,r2
   101f8:	1dc6b03a 	or	r3,r3,r23
   101fc:	003f4006 	br	ff00 <__alt_mem_Flash_flash_data+0xf400ff00>
   10200:	2005883a 	mov	r2,r4
   10204:	003f6606 	br	ffa0 <__alt_mem_Flash_flash_data+0xf400ffa0>
   10208:	1805883a 	mov	r2,r3
   1020c:	003f0a06 	br	fe38 <__alt_mem_Flash_flash_data+0xf400fe38>
   10210:	2006943a 	slli	r3,r4,16
   10214:	9c88983a 	sll	r4,r19,r18
   10218:	4a7fffcc 	andi	r9,r9,65535
   1021c:	1a47883a 	add	r3,r3,r9
   10220:	20ffc22e 	bgeu	r4,r3,1012c <__alt_mem_Flash_flash_data+0xf401012c>
   10224:	10bfffc4 	addi	r2,r2,-1
   10228:	003fc006 	br	1012c <__alt_mem_Flash_flash_data+0xf401012c>
   1022c:	00c00404 	movi	r3,16
   10230:	180b883a 	mov	r5,r3
   10234:	003f0c06 	br	fe68 <__alt_mem_Flash_flash_data+0xf400fe68>
   10238:	0007883a 	mov	r3,zero
   1023c:	000b883a 	mov	r5,zero
   10240:	003f0906 	br	fe68 <__alt_mem_Flash_flash_data+0xf400fe68>
   10244:	00800404 	movi	r2,16
   10248:	1007883a 	mov	r3,r2
   1024c:	003ec606 	br	fd68 <__alt_mem_Flash_flash_data+0xf400fd68>
   10250:	00800404 	movi	r2,16
   10254:	1007883a 	mov	r3,r2
   10258:	003f1c06 	br	fecc <__alt_mem_Flash_flash_data+0xf400fecc>
   1025c:	0005883a 	mov	r2,zero
   10260:	0007883a 	mov	r3,zero
   10264:	003f1906 	br	fecc <__alt_mem_Flash_flash_data+0xf400fecc>
   10268:	0005883a 	mov	r2,zero
   1026c:	0007883a 	mov	r3,zero
   10270:	003ebd06 	br	fd68 <__alt_mem_Flash_flash_data+0xf400fd68>
   10274:	0007883a 	mov	r3,zero
   10278:	00800044 	movi	r2,1
   1027c:	003f4d06 	br	ffb4 <__alt_mem_Flash_flash_data+0xf400ffb4>
   10280:	197f942e 	bgeu	r3,r5,100d4 <__alt_mem_Flash_flash_data+0xf40100d4>
   10284:	10bfff84 	addi	r2,r2,-2
   10288:	1dc7883a 	add	r3,r3,r23
   1028c:	003f9206 	br	100d8 <__alt_mem_Flash_flash_data+0xf40100d8>
   10290:	15bf7e2e 	bgeu	r2,r22,1008c <__alt_mem_Flash_flash_data+0xf401008c>
   10294:	843fff84 	addi	r16,r16,-2
   10298:	15c5883a 	add	r2,r2,r23
   1029c:	003f7c06 	br	10090 <__alt_mem_Flash_flash_data+0xf4010090>
   102a0:	2807883a 	mov	r3,r5
   102a4:	003fd206 	br	101f0 <__alt_mem_Flash_flash_data+0xf40101f0>
   102a8:	102f883a 	mov	r23,r2
   102ac:	003fbc06 	br	101a0 <__alt_mem_Flash_flash_data+0xf40101a0>
   102b0:	843fff84 	addi	r16,r16,-2
   102b4:	2489883a 	add	r4,r4,r18
   102b8:	003f2506 	br	ff50 <__alt_mem_Flash_flash_data+0xf400ff50>
   102bc:	843fff84 	addi	r16,r16,-2
   102c0:	1485883a 	add	r2,r2,r18
   102c4:	003eca06 	br	fdf0 <__alt_mem_Flash_flash_data+0xf400fdf0>

000102c8 <__umoddi3>:
   102c8:	defff404 	addi	sp,sp,-48
   102cc:	ddc00915 	stw	r23,36(sp)
   102d0:	dc400315 	stw	r17,12(sp)
   102d4:	dc000215 	stw	r16,8(sp)
   102d8:	dfc00b15 	stw	ra,44(sp)
   102dc:	df000a15 	stw	fp,40(sp)
   102e0:	dd800815 	stw	r22,32(sp)
   102e4:	dd400715 	stw	r21,28(sp)
   102e8:	dd000615 	stw	r20,24(sp)
   102ec:	dcc00515 	stw	r19,20(sp)
   102f0:	dc800415 	stw	r18,16(sp)
   102f4:	2021883a 	mov	r16,r4
   102f8:	2823883a 	mov	r17,r5
   102fc:	282f883a 	mov	r23,r5
   10300:	3800381e 	bne	r7,zero,103e4 <__umoddi3+0x11c>
   10304:	3027883a 	mov	r19,r6
   10308:	2029883a 	mov	r20,r4
   1030c:	29804e2e 	bgeu	r5,r6,10448 <__umoddi3+0x180>
   10310:	00bfffd4 	movui	r2,65535
   10314:	11809c36 	bltu	r2,r6,10588 <__umoddi3+0x2c0>
   10318:	00803fc4 	movi	r2,255
   1031c:	11813b2e 	bgeu	r2,r6,1080c <__umoddi3+0x544>
   10320:	01400204 	movi	r5,8
   10324:	2805883a 	mov	r2,r5
   10328:	314ad83a 	srl	r5,r6,r5
   1032c:	00c000b4 	movhi	r3,2
   10330:	18c2a704 	addi	r3,r3,2716
   10334:	194b883a 	add	r5,r3,r5
   10338:	29000003 	ldbu	r4,0(r5)
   1033c:	2089883a 	add	r4,r4,r2
   10340:	00800804 	movi	r2,32
   10344:	1105c83a 	sub	r2,r2,r4
   10348:	1000ec26 	beq	r2,zero,106fc <__umoddi3+0x434>
   1034c:	88a2983a 	sll	r17,r17,r2
   10350:	8108d83a 	srl	r4,r16,r4
   10354:	30a6983a 	sll	r19,r6,r2
   10358:	80a8983a 	sll	r20,r16,r2
   1035c:	1025883a 	mov	r18,r2
   10360:	892eb03a 	or	r23,r17,r4
   10364:	982cd43a 	srli	r22,r19,16
   10368:	b809883a 	mov	r4,r23
   1036c:	9d7fffcc 	andi	r21,r19,65535
   10370:	b00b883a 	mov	r5,r22
   10374:	001097c0 	call	1097c <__umodsi3>
   10378:	b809883a 	mov	r4,r23
   1037c:	b00b883a 	mov	r5,r22
   10380:	1021883a 	mov	r16,r2
   10384:	00109740 	call	10974 <__udivsi3>
   10388:	8020943a 	slli	r16,r16,16
   1038c:	a00cd43a 	srli	r6,r20,16
   10390:	1545383a 	mul	r2,r2,r21
   10394:	8188b03a 	or	r4,r16,r6
   10398:	2080042e 	bgeu	r4,r2,103ac <__umoddi3+0xe4>
   1039c:	24c9883a 	add	r4,r4,r19
   103a0:	24c00236 	bltu	r4,r19,103ac <__umoddi3+0xe4>
   103a4:	2080012e 	bgeu	r4,r2,103ac <__umoddi3+0xe4>
   103a8:	24c9883a 	add	r4,r4,r19
   103ac:	20a3c83a 	sub	r17,r4,r2
   103b0:	8809883a 	mov	r4,r17
   103b4:	b00b883a 	mov	r5,r22
   103b8:	001097c0 	call	1097c <__umodsi3>
   103bc:	8809883a 	mov	r4,r17
   103c0:	b00b883a 	mov	r5,r22
   103c4:	1021883a 	mov	r16,r2
   103c8:	00109740 	call	10974 <__udivsi3>
   103cc:	8006943a 	slli	r3,r16,16
   103d0:	1545383a 	mul	r2,r2,r21
   103d4:	a13fffcc 	andi	r4,r20,65535
   103d8:	1906b03a 	or	r3,r3,r4
   103dc:	1880532e 	bgeu	r3,r2,1052c <__umoddi3+0x264>
   103e0:	00004e06 	br	1051c <__umoddi3+0x254>
   103e4:	29c05536 	bltu	r5,r7,1053c <__umoddi3+0x274>
   103e8:	00bfffd4 	movui	r2,65535
   103ec:	11c0612e 	bgeu	r2,r7,10574 <__umoddi3+0x2ac>
   103f0:	00804034 	movhi	r2,256
   103f4:	10bfffc4 	addi	r2,r2,-1
   103f8:	11c0f82e 	bgeu	r2,r7,107dc <__umoddi3+0x514>
   103fc:	01400604 	movi	r5,24
   10400:	282b883a 	mov	r21,r5
   10404:	394ad83a 	srl	r5,r7,r5
   10408:	00c000b4 	movhi	r3,2
   1040c:	18c2a704 	addi	r3,r3,2716
   10410:	194b883a 	add	r5,r3,r5
   10414:	28800003 	ldbu	r2,0(r5)
   10418:	00c00804 	movi	r3,32
   1041c:	156b883a 	add	r21,r2,r21
   10420:	1d69c83a 	sub	r20,r3,r21
   10424:	a000631e 	bne	r20,zero,105b4 <__umoddi3+0x2ec>
   10428:	3c400136 	bltu	r7,r17,10430 <__umoddi3+0x168>
   1042c:	81810436 	bltu	r16,r6,10840 <__umoddi3+0x578>
   10430:	8185c83a 	sub	r2,r16,r6
   10434:	89e3c83a 	sub	r17,r17,r7
   10438:	8087803a 	cmpltu	r3,r16,r2
   1043c:	88efc83a 	sub	r23,r17,r3
   10440:	b807883a 	mov	r3,r23
   10444:	00003f06 	br	10544 <__umoddi3+0x27c>
   10448:	3000041e 	bne	r6,zero,1045c <__umoddi3+0x194>
   1044c:	01000044 	movi	r4,1
   10450:	000b883a 	mov	r5,zero
   10454:	00109740 	call	10974 <__udivsi3>
   10458:	1027883a 	mov	r19,r2
   1045c:	00bfffd4 	movui	r2,65535
   10460:	14c04f2e 	bgeu	r2,r19,105a0 <__umoddi3+0x2d8>
   10464:	00804034 	movhi	r2,256
   10468:	10bfffc4 	addi	r2,r2,-1
   1046c:	14c0e42e 	bgeu	r2,r19,10800 <__umoddi3+0x538>
   10470:	00800604 	movi	r2,24
   10474:	1007883a 	mov	r3,r2
   10478:	9884d83a 	srl	r2,r19,r2
   1047c:	010000b4 	movhi	r4,2
   10480:	2102a704 	addi	r4,r4,2716
   10484:	2085883a 	add	r2,r4,r2
   10488:	11000003 	ldbu	r4,0(r2)
   1048c:	00800804 	movi	r2,32
   10490:	20c7883a 	add	r3,r4,r3
   10494:	10c5c83a 	sub	r2,r2,r3
   10498:	10009a1e 	bne	r2,zero,10704 <__umoddi3+0x43c>
   1049c:	982cd43a 	srli	r22,r19,16
   104a0:	8ce3c83a 	sub	r17,r17,r19
   104a4:	9c3fffcc 	andi	r16,r19,65535
   104a8:	0025883a 	mov	r18,zero
   104ac:	8809883a 	mov	r4,r17
   104b0:	b00b883a 	mov	r5,r22
   104b4:	001097c0 	call	1097c <__umodsi3>
   104b8:	8809883a 	mov	r4,r17
   104bc:	b00b883a 	mov	r5,r22
   104c0:	102b883a 	mov	r21,r2
   104c4:	00109740 	call	10974 <__udivsi3>
   104c8:	a806943a 	slli	r3,r21,16
   104cc:	a008d43a 	srli	r4,r20,16
   104d0:	1405383a 	mul	r2,r2,r16
   104d4:	190cb03a 	or	r6,r3,r4
   104d8:	3080032e 	bgeu	r6,r2,104e8 <__umoddi3+0x220>
   104dc:	34cd883a 	add	r6,r6,r19
   104e0:	34c00136 	bltu	r6,r19,104e8 <__umoddi3+0x220>
   104e4:	3080d436 	bltu	r6,r2,10838 <__umoddi3+0x570>
   104e8:	30abc83a 	sub	r21,r6,r2
   104ec:	a809883a 	mov	r4,r21
   104f0:	b00b883a 	mov	r5,r22
   104f4:	001097c0 	call	1097c <__umodsi3>
   104f8:	1023883a 	mov	r17,r2
   104fc:	a809883a 	mov	r4,r21
   10500:	b00b883a 	mov	r5,r22
   10504:	00109740 	call	10974 <__udivsi3>
   10508:	8822943a 	slli	r17,r17,16
   1050c:	1405383a 	mul	r2,r2,r16
   10510:	a13fffcc 	andi	r4,r20,65535
   10514:	8906b03a 	or	r3,r17,r4
   10518:	1880042e 	bgeu	r3,r2,1052c <__umoddi3+0x264>
   1051c:	1cc7883a 	add	r3,r3,r19
   10520:	1cc00236 	bltu	r3,r19,1052c <__umoddi3+0x264>
   10524:	1880012e 	bgeu	r3,r2,1052c <__umoddi3+0x264>
   10528:	1cc7883a 	add	r3,r3,r19
   1052c:	1887c83a 	sub	r3,r3,r2
   10530:	1c84d83a 	srl	r2,r3,r18
   10534:	0007883a 	mov	r3,zero
   10538:	00000206 	br	10544 <__umoddi3+0x27c>
   1053c:	2005883a 	mov	r2,r4
   10540:	2807883a 	mov	r3,r5
   10544:	dfc00b17 	ldw	ra,44(sp)
   10548:	df000a17 	ldw	fp,40(sp)
   1054c:	ddc00917 	ldw	r23,36(sp)
   10550:	dd800817 	ldw	r22,32(sp)
   10554:	dd400717 	ldw	r21,28(sp)
   10558:	dd000617 	ldw	r20,24(sp)
   1055c:	dcc00517 	ldw	r19,20(sp)
   10560:	dc800417 	ldw	r18,16(sp)
   10564:	dc400317 	ldw	r17,12(sp)
   10568:	dc000217 	ldw	r16,8(sp)
   1056c:	dec00c04 	addi	sp,sp,48
   10570:	f800283a 	ret
   10574:	00803fc4 	movi	r2,255
   10578:	11c0952e 	bgeu	r2,r7,107d0 <__umoddi3+0x508>
   1057c:	01400204 	movi	r5,8
   10580:	282b883a 	mov	r21,r5
   10584:	003f9f06 	br	10404 <__alt_mem_Flash_flash_data+0xf4010404>
   10588:	00804034 	movhi	r2,256
   1058c:	10bfffc4 	addi	r2,r2,-1
   10590:	1180952e 	bgeu	r2,r6,107e8 <__umoddi3+0x520>
   10594:	01400604 	movi	r5,24
   10598:	2805883a 	mov	r2,r5
   1059c:	003f6206 	br	10328 <__alt_mem_Flash_flash_data+0xf4010328>
   105a0:	00803fc4 	movi	r2,255
   105a4:	14c0932e 	bgeu	r2,r19,107f4 <__umoddi3+0x52c>
   105a8:	00800204 	movi	r2,8
   105ac:	1007883a 	mov	r3,r2
   105b0:	003fb106 	br	10478 <__alt_mem_Flash_flash_data+0xf4010478>
   105b4:	3548d83a 	srl	r4,r6,r21
   105b8:	3d0e983a 	sll	r7,r7,r20
   105bc:	8d10983a 	sll	r8,r17,r20
   105c0:	8d6cd83a 	srl	r22,r17,r21
   105c4:	3922b03a 	or	r17,r7,r4
   105c8:	882ed43a 	srli	r23,r17,16
   105cc:	8564d83a 	srl	r18,r16,r21
   105d0:	b009883a 	mov	r4,r22
   105d4:	b80b883a 	mov	r5,r23
   105d8:	44a4b03a 	or	r18,r8,r18
   105dc:	3526983a 	sll	r19,r6,r20
   105e0:	001097c0 	call	1097c <__umodsi3>
   105e4:	b009883a 	mov	r4,r22
   105e8:	b80b883a 	mov	r5,r23
   105ec:	1039883a 	mov	fp,r2
   105f0:	00109740 	call	10974 <__udivsi3>
   105f4:	102d883a 	mov	r22,r2
   105f8:	8a3fffcc 	andi	r8,r17,65535
   105fc:	e004943a 	slli	r2,fp,16
   10600:	900cd43a 	srli	r6,r18,16
   10604:	b239383a 	mul	fp,r22,r8
   10608:	8520983a 	sll	r16,r16,r20
   1060c:	118ab03a 	or	r5,r2,r6
   10610:	2f00042e 	bgeu	r5,fp,10624 <__umoddi3+0x35c>
   10614:	2c4b883a 	add	r5,r5,r17
   10618:	b0bfffc4 	addi	r2,r22,-1
   1061c:	2c40822e 	bgeu	r5,r17,10828 <__umoddi3+0x560>
   10620:	102d883a 	mov	r22,r2
   10624:	2f39c83a 	sub	fp,r5,fp
   10628:	e009883a 	mov	r4,fp
   1062c:	b80b883a 	mov	r5,r23
   10630:	da000115 	stw	r8,4(sp)
   10634:	001097c0 	call	1097c <__umodsi3>
   10638:	e009883a 	mov	r4,fp
   1063c:	b80b883a 	mov	r5,r23
   10640:	d8800015 	stw	r2,0(sp)
   10644:	00109740 	call	10974 <__udivsi3>
   10648:	d9800017 	ldw	r6,0(sp)
   1064c:	da000117 	ldw	r8,4(sp)
   10650:	94bfffcc 	andi	r18,r18,65535
   10654:	300c943a 	slli	r6,r6,16
   10658:	1209383a 	mul	r4,r2,r8
   1065c:	3490b03a 	or	r8,r6,r18
   10660:	4100042e 	bgeu	r8,r4,10674 <__umoddi3+0x3ac>
   10664:	4451883a 	add	r8,r8,r17
   10668:	10ffffc4 	addi	r3,r2,-1
   1066c:	44406a2e 	bgeu	r8,r17,10818 <__umoddi3+0x550>
   10670:	1805883a 	mov	r2,r3
   10674:	b012943a 	slli	r9,r22,16
   10678:	9abfffcc 	andi	r10,r19,65535
   1067c:	980ed43a 	srli	r7,r19,16
   10680:	124ab03a 	or	r5,r2,r9
   10684:	2a7fffcc 	andi	r9,r5,65535
   10688:	280ad43a 	srli	r5,r5,16
   1068c:	4a8d383a 	mul	r6,r9,r10
   10690:	49d3383a 	mul	r9,r9,r7
   10694:	2a95383a 	mul	r10,r5,r10
   10698:	3004d43a 	srli	r2,r6,16
   1069c:	4111c83a 	sub	r8,r8,r4
   106a0:	5253883a 	add	r9,r10,r9
   106a4:	4893883a 	add	r9,r9,r2
   106a8:	29cb383a 	mul	r5,r5,r7
   106ac:	4a80022e 	bgeu	r9,r10,106b8 <__umoddi3+0x3f0>
   106b0:	00800074 	movhi	r2,1
   106b4:	288b883a 	add	r5,r5,r2
   106b8:	4808d43a 	srli	r4,r9,16
   106bc:	4812943a 	slli	r9,r9,16
   106c0:	31bfffcc 	andi	r6,r6,65535
   106c4:	290b883a 	add	r5,r5,r4
   106c8:	498d883a 	add	r6,r9,r6
   106cc:	41403a36 	bltu	r8,r5,107b8 <__umoddi3+0x4f0>
   106d0:	41405d26 	beq	r8,r5,10848 <__umoddi3+0x580>
   106d4:	4149c83a 	sub	r4,r8,r5
   106d8:	300f883a 	mov	r7,r6
   106dc:	81cfc83a 	sub	r7,r16,r7
   106e0:	81c7803a 	cmpltu	r3,r16,r7
   106e4:	20c7c83a 	sub	r3,r4,r3
   106e8:	1d44983a 	sll	r2,r3,r21
   106ec:	3d0ed83a 	srl	r7,r7,r20
   106f0:	1d06d83a 	srl	r3,r3,r20
   106f4:	11c4b03a 	or	r2,r2,r7
   106f8:	003f9206 	br	10544 <__alt_mem_Flash_flash_data+0xf4010544>
   106fc:	0025883a 	mov	r18,zero
   10700:	003f1806 	br	10364 <__alt_mem_Flash_flash_data+0xf4010364>
   10704:	98a6983a 	sll	r19,r19,r2
   10708:	88e8d83a 	srl	r20,r17,r3
   1070c:	80c6d83a 	srl	r3,r16,r3
   10710:	982cd43a 	srli	r22,r19,16
   10714:	88a2983a 	sll	r17,r17,r2
   10718:	a009883a 	mov	r4,r20
   1071c:	b00b883a 	mov	r5,r22
   10720:	88eab03a 	or	r21,r17,r3
   10724:	1025883a 	mov	r18,r2
   10728:	001097c0 	call	1097c <__umodsi3>
   1072c:	a009883a 	mov	r4,r20
   10730:	b00b883a 	mov	r5,r22
   10734:	1023883a 	mov	r17,r2
   10738:	00109740 	call	10974 <__udivsi3>
   1073c:	9f3fffcc 	andi	fp,r19,65535
   10740:	8822943a 	slli	r17,r17,16
   10744:	a80ad43a 	srli	r5,r21,16
   10748:	1705383a 	mul	r2,r2,fp
   1074c:	84a8983a 	sll	r20,r16,r18
   10750:	8948b03a 	or	r4,r17,r5
   10754:	2080042e 	bgeu	r4,r2,10768 <__umoddi3+0x4a0>
   10758:	24c9883a 	add	r4,r4,r19
   1075c:	24c00236 	bltu	r4,r19,10768 <__umoddi3+0x4a0>
   10760:	2080012e 	bgeu	r4,r2,10768 <__umoddi3+0x4a0>
   10764:	24c9883a 	add	r4,r4,r19
   10768:	20afc83a 	sub	r23,r4,r2
   1076c:	b809883a 	mov	r4,r23
   10770:	b00b883a 	mov	r5,r22
   10774:	001097c0 	call	1097c <__umodsi3>
   10778:	1023883a 	mov	r17,r2
   1077c:	b809883a 	mov	r4,r23
   10780:	b00b883a 	mov	r5,r22
   10784:	00109740 	call	10974 <__udivsi3>
   10788:	8822943a 	slli	r17,r17,16
   1078c:	1705383a 	mul	r2,r2,fp
   10790:	a93fffcc 	andi	r4,r21,65535
   10794:	8908b03a 	or	r4,r17,r4
   10798:	2080042e 	bgeu	r4,r2,107ac <__umoddi3+0x4e4>
   1079c:	24c9883a 	add	r4,r4,r19
   107a0:	24c00236 	bltu	r4,r19,107ac <__umoddi3+0x4e4>
   107a4:	2080012e 	bgeu	r4,r2,107ac <__umoddi3+0x4e4>
   107a8:	24c9883a 	add	r4,r4,r19
   107ac:	20a3c83a 	sub	r17,r4,r2
   107b0:	e021883a 	mov	r16,fp
   107b4:	003f3d06 	br	104ac <__alt_mem_Flash_flash_data+0xf40104ac>
   107b8:	34cfc83a 	sub	r7,r6,r19
   107bc:	2c4bc83a 	sub	r5,r5,r17
   107c0:	31cd803a 	cmpltu	r6,r6,r7
   107c4:	298dc83a 	sub	r6,r5,r6
   107c8:	4189c83a 	sub	r4,r8,r6
   107cc:	003fc306 	br	106dc <__alt_mem_Flash_flash_data+0xf40106dc>
   107d0:	000b883a 	mov	r5,zero
   107d4:	002b883a 	mov	r21,zero
   107d8:	003f0a06 	br	10404 <__alt_mem_Flash_flash_data+0xf4010404>
   107dc:	01400404 	movi	r5,16
   107e0:	282b883a 	mov	r21,r5
   107e4:	003f0706 	br	10404 <__alt_mem_Flash_flash_data+0xf4010404>
   107e8:	01400404 	movi	r5,16
   107ec:	2805883a 	mov	r2,r5
   107f0:	003ecd06 	br	10328 <__alt_mem_Flash_flash_data+0xf4010328>
   107f4:	0005883a 	mov	r2,zero
   107f8:	0007883a 	mov	r3,zero
   107fc:	003f1e06 	br	10478 <__alt_mem_Flash_flash_data+0xf4010478>
   10800:	00800404 	movi	r2,16
   10804:	1007883a 	mov	r3,r2
   10808:	003f1b06 	br	10478 <__alt_mem_Flash_flash_data+0xf4010478>
   1080c:	000b883a 	mov	r5,zero
   10810:	0005883a 	mov	r2,zero
   10814:	003ec406 	br	10328 <__alt_mem_Flash_flash_data+0xf4010328>
   10818:	413f952e 	bgeu	r8,r4,10670 <__alt_mem_Flash_flash_data+0xf4010670>
   1081c:	10bfff84 	addi	r2,r2,-2
   10820:	4451883a 	add	r8,r8,r17
   10824:	003f9306 	br	10674 <__alt_mem_Flash_flash_data+0xf4010674>
   10828:	2f3f7d2e 	bgeu	r5,fp,10620 <__alt_mem_Flash_flash_data+0xf4010620>
   1082c:	b5bfff84 	addi	r22,r22,-2
   10830:	2c4b883a 	add	r5,r5,r17
   10834:	003f7b06 	br	10624 <__alt_mem_Flash_flash_data+0xf4010624>
   10838:	34cd883a 	add	r6,r6,r19
   1083c:	003f2a06 	br	104e8 <__alt_mem_Flash_flash_data+0xf40104e8>
   10840:	8005883a 	mov	r2,r16
   10844:	003efe06 	br	10440 <__alt_mem_Flash_flash_data+0xf4010440>
   10848:	81bfdb36 	bltu	r16,r6,107b8 <__alt_mem_Flash_flash_data+0xf40107b8>
   1084c:	300f883a 	mov	r7,r6
   10850:	0009883a 	mov	r4,zero
   10854:	003fa106 	br	106dc <__alt_mem_Flash_flash_data+0xf40106dc>

00010858 <udivmodsi4>:
   10858:	2900182e 	bgeu	r5,r4,108bc <udivmodsi4+0x64>
   1085c:	28001716 	blt	r5,zero,108bc <udivmodsi4+0x64>
   10860:	00800804 	movi	r2,32
   10864:	00c00044 	movi	r3,1
   10868:	00000206 	br	10874 <udivmodsi4+0x1c>
   1086c:	10001126 	beq	r2,zero,108b4 <udivmodsi4+0x5c>
   10870:	28000516 	blt	r5,zero,10888 <udivmodsi4+0x30>
   10874:	294b883a 	add	r5,r5,r5
   10878:	10bfffc4 	addi	r2,r2,-1
   1087c:	18c7883a 	add	r3,r3,r3
   10880:	293ffa36 	bltu	r5,r4,1086c <__alt_mem_Flash_flash_data+0xf401086c>
   10884:	18000b26 	beq	r3,zero,108b4 <udivmodsi4+0x5c>
   10888:	0005883a 	mov	r2,zero
   1088c:	21400236 	bltu	r4,r5,10898 <udivmodsi4+0x40>
   10890:	2149c83a 	sub	r4,r4,r5
   10894:	10c4b03a 	or	r2,r2,r3
   10898:	1806d07a 	srli	r3,r3,1
   1089c:	280ad07a 	srli	r5,r5,1
   108a0:	183ffa1e 	bne	r3,zero,1088c <__alt_mem_Flash_flash_data+0xf401088c>
   108a4:	3000011e 	bne	r6,zero,108ac <udivmodsi4+0x54>
   108a8:	f800283a 	ret
   108ac:	2005883a 	mov	r2,r4
   108b0:	f800283a 	ret
   108b4:	0005883a 	mov	r2,zero
   108b8:	003ffa06 	br	108a4 <__alt_mem_Flash_flash_data+0xf40108a4>
   108bc:	00c00044 	movi	r3,1
   108c0:	003ff106 	br	10888 <__alt_mem_Flash_flash_data+0xf4010888>

000108c4 <__divsi3>:
   108c4:	defffe04 	addi	sp,sp,-8
   108c8:	dfc00115 	stw	ra,4(sp)
   108cc:	dc000015 	stw	r16,0(sp)
   108d0:	20000b16 	blt	r4,zero,10900 <__divsi3+0x3c>
   108d4:	0021883a 	mov	r16,zero
   108d8:	28000c16 	blt	r5,zero,1090c <__divsi3+0x48>
   108dc:	000d883a 	mov	r6,zero
   108e0:	00108580 	call	10858 <udivmodsi4>
   108e4:	0407c83a 	sub	r3,zero,r16
   108e8:	1884f03a 	xor	r2,r3,r2
   108ec:	1405883a 	add	r2,r2,r16
   108f0:	dfc00117 	ldw	ra,4(sp)
   108f4:	dc000017 	ldw	r16,0(sp)
   108f8:	dec00204 	addi	sp,sp,8
   108fc:	f800283a 	ret
   10900:	0109c83a 	sub	r4,zero,r4
   10904:	04000044 	movi	r16,1
   10908:	283ff40e 	bge	r5,zero,108dc <__alt_mem_Flash_flash_data+0xf40108dc>
   1090c:	014bc83a 	sub	r5,zero,r5
   10910:	8400005c 	xori	r16,r16,1
   10914:	003ff106 	br	108dc <__alt_mem_Flash_flash_data+0xf40108dc>

00010918 <__modsi3>:
   10918:	defffd04 	addi	sp,sp,-12
   1091c:	dfc00215 	stw	ra,8(sp)
   10920:	dc400115 	stw	r17,4(sp)
   10924:	dc000015 	stw	r16,0(sp)
   10928:	20000c16 	blt	r4,zero,1095c <__modsi3+0x44>
   1092c:	0023883a 	mov	r17,zero
   10930:	0021883a 	mov	r16,zero
   10934:	28000d16 	blt	r5,zero,1096c <__modsi3+0x54>
   10938:	01800044 	movi	r6,1
   1093c:	00108580 	call	10858 <udivmodsi4>
   10940:	1404f03a 	xor	r2,r2,r16
   10944:	8885883a 	add	r2,r17,r2
   10948:	dfc00217 	ldw	ra,8(sp)
   1094c:	dc400117 	ldw	r17,4(sp)
   10950:	dc000017 	ldw	r16,0(sp)
   10954:	dec00304 	addi	sp,sp,12
   10958:	f800283a 	ret
   1095c:	0109c83a 	sub	r4,zero,r4
   10960:	04400044 	movi	r17,1
   10964:	043fffc4 	movi	r16,-1
   10968:	283ff30e 	bge	r5,zero,10938 <__alt_mem_Flash_flash_data+0xf4010938>
   1096c:	014bc83a 	sub	r5,zero,r5
   10970:	003ff106 	br	10938 <__alt_mem_Flash_flash_data+0xf4010938>

00010974 <__udivsi3>:
   10974:	000d883a 	mov	r6,zero
   10978:	00108581 	jmpi	10858 <udivmodsi4>

0001097c <__umodsi3>:
   1097c:	01800044 	movi	r6,1
   10980:	00108581 	jmpi	10858 <udivmodsi4>

00010984 <__adddf3>:
   10984:	02000434 	movhi	r8,16
   10988:	423fffc4 	addi	r8,r8,-1
   1098c:	defffb04 	addi	sp,sp,-20
   10990:	2a12703a 	and	r9,r5,r8
   10994:	2806d7fa 	srli	r3,r5,31
   10998:	3a10703a 	and	r8,r7,r8
   1099c:	3804d53a 	srli	r2,r7,20
   109a0:	3014d77a 	srli	r10,r6,29
   109a4:	dc000015 	stw	r16,0(sp)
   109a8:	481290fa 	slli	r9,r9,3
   109ac:	2820d53a 	srli	r16,r5,20
   109b0:	401090fa 	slli	r8,r8,3
   109b4:	200ad77a 	srli	r5,r4,29
   109b8:	380ed7fa 	srli	r7,r7,31
   109bc:	dc800215 	stw	r18,8(sp)
   109c0:	dc400115 	stw	r17,4(sp)
   109c4:	dfc00415 	stw	ra,16(sp)
   109c8:	dcc00315 	stw	r19,12(sp)
   109cc:	1c803fcc 	andi	r18,r3,255
   109d0:	8401ffcc 	andi	r16,r16,2047
   109d4:	494ab03a 	or	r5,r9,r5
   109d8:	202290fa 	slli	r17,r4,3
   109dc:	1081ffcc 	andi	r2,r2,2047
   109e0:	4290b03a 	or	r8,r8,r10
   109e4:	300c90fa 	slli	r6,r6,3
   109e8:	91c07026 	beq	r18,r7,10bac <__adddf3+0x228>
   109ec:	8087c83a 	sub	r3,r16,r2
   109f0:	00c0b30e 	bge	zero,r3,10cc0 <__adddf3+0x33c>
   109f4:	10002a1e 	bne	r2,zero,10aa0 <__adddf3+0x11c>
   109f8:	4184b03a 	or	r2,r8,r6
   109fc:	1000991e 	bne	r2,zero,10c64 <__adddf3+0x2e0>
   10a00:	888001cc 	andi	r2,r17,7
   10a04:	10005b26 	beq	r2,zero,10b74 <__adddf3+0x1f0>
   10a08:	88c003cc 	andi	r3,r17,15
   10a0c:	00800104 	movi	r2,4
   10a10:	18805826 	beq	r3,r2,10b74 <__adddf3+0x1f0>
   10a14:	89800104 	addi	r6,r17,4
   10a18:	3463803a 	cmpltu	r17,r6,r17
   10a1c:	2c4b883a 	add	r5,r5,r17
   10a20:	2880202c 	andhi	r2,r5,128
   10a24:	9007883a 	mov	r3,r18
   10a28:	3023883a 	mov	r17,r6
   10a2c:	10005426 	beq	r2,zero,10b80 <__adddf3+0x1fc>
   10a30:	84000044 	addi	r16,r16,1
   10a34:	0081ffc4 	movi	r2,2047
   10a38:	8080c126 	beq	r16,r2,10d40 <__adddf3+0x3bc>
   10a3c:	013fe034 	movhi	r4,65408
   10a40:	213fffc4 	addi	r4,r4,-1
   10a44:	290a703a 	and	r5,r5,r4
   10a48:	2804977a 	slli	r2,r5,29
   10a4c:	280a927a 	slli	r5,r5,9
   10a50:	8822d0fa 	srli	r17,r17,3
   10a54:	8401ffcc 	andi	r16,r16,2047
   10a58:	2808d33a 	srli	r4,r5,12
   10a5c:	1444b03a 	or	r2,r2,r17
   10a60:	8401ffcc 	andi	r16,r16,2047
   10a64:	800a953a 	slli	r5,r16,20
   10a68:	18c03fcc 	andi	r3,r3,255
   10a6c:	04000434 	movhi	r16,16
   10a70:	180697fa 	slli	r3,r3,31
   10a74:	843fffc4 	addi	r16,r16,-1
   10a78:	2420703a 	and	r16,r4,r16
   10a7c:	8160b03a 	or	r16,r16,r5
   10a80:	80c6b03a 	or	r3,r16,r3
   10a84:	dfc00417 	ldw	ra,16(sp)
   10a88:	dcc00317 	ldw	r19,12(sp)
   10a8c:	dc800217 	ldw	r18,8(sp)
   10a90:	dc400117 	ldw	r17,4(sp)
   10a94:	dc000017 	ldw	r16,0(sp)
   10a98:	dec00504 	addi	sp,sp,20
   10a9c:	f800283a 	ret
   10aa0:	0081ffc4 	movi	r2,2047
   10aa4:	80bfd626 	beq	r16,r2,10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10aa8:	42002034 	orhi	r8,r8,128
   10aac:	00800e04 	movi	r2,56
   10ab0:	10c0a616 	blt	r2,r3,10d4c <__adddf3+0x3c8>
   10ab4:	008007c4 	movi	r2,31
   10ab8:	10c0c916 	blt	r2,r3,10de0 <__adddf3+0x45c>
   10abc:	00800804 	movi	r2,32
   10ac0:	10c5c83a 	sub	r2,r2,r3
   10ac4:	408e983a 	sll	r7,r8,r2
   10ac8:	30c8d83a 	srl	r4,r6,r3
   10acc:	3084983a 	sll	r2,r6,r2
   10ad0:	40c6d83a 	srl	r3,r8,r3
   10ad4:	390cb03a 	or	r6,r7,r4
   10ad8:	1004c03a 	cmpne	r2,r2,zero
   10adc:	308cb03a 	or	r6,r6,r2
   10ae0:	898dc83a 	sub	r6,r17,r6
   10ae4:	89a3803a 	cmpltu	r17,r17,r6
   10ae8:	28cbc83a 	sub	r5,r5,r3
   10aec:	2c4bc83a 	sub	r5,r5,r17
   10af0:	3023883a 	mov	r17,r6
   10af4:	2880202c 	andhi	r2,r5,128
   10af8:	10006d26 	beq	r2,zero,10cb0 <__adddf3+0x32c>
   10afc:	04c02034 	movhi	r19,128
   10b00:	9cffffc4 	addi	r19,r19,-1
   10b04:	2ce6703a 	and	r19,r5,r19
   10b08:	98007e26 	beq	r19,zero,10d04 <__adddf3+0x380>
   10b0c:	9809883a 	mov	r4,r19
   10b10:	0012f200 	call	12f20 <__clzsi2>
   10b14:	10fffe04 	addi	r3,r2,-8
   10b18:	010007c4 	movi	r4,31
   10b1c:	20c07f16 	blt	r4,r3,10d1c <__adddf3+0x398>
   10b20:	01400a04 	movi	r5,40
   10b24:	2885c83a 	sub	r2,r5,r2
   10b28:	888ad83a 	srl	r5,r17,r2
   10b2c:	98e6983a 	sll	r19,r19,r3
   10b30:	88e2983a 	sll	r17,r17,r3
   10b34:	2ce6b03a 	or	r19,r5,r19
   10b38:	1c007c16 	blt	r3,r16,10d2c <__adddf3+0x3a8>
   10b3c:	1c21c83a 	sub	r16,r3,r16
   10b40:	81400044 	addi	r5,r16,1
   10b44:	00c007c4 	movi	r3,31
   10b48:	19409816 	blt	r3,r5,10dac <__adddf3+0x428>
   10b4c:	1c21c83a 	sub	r16,r3,r16
   10b50:	8c08983a 	sll	r4,r17,r16
   10b54:	8946d83a 	srl	r3,r17,r5
   10b58:	9c20983a 	sll	r16,r19,r16
   10b5c:	2008c03a 	cmpne	r4,r4,zero
   10b60:	994ad83a 	srl	r5,r19,r5
   10b64:	1c06b03a 	or	r3,r3,r16
   10b68:	1922b03a 	or	r17,r3,r4
   10b6c:	0021883a 	mov	r16,zero
   10b70:	003fa306 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10b74:	2880202c 	andhi	r2,r5,128
   10b78:	9007883a 	mov	r3,r18
   10b7c:	103fac1e 	bne	r2,zero,10a30 <__alt_mem_Flash_flash_data+0xf4010a30>
   10b80:	2804977a 	slli	r2,r5,29
   10b84:	8822d0fa 	srli	r17,r17,3
   10b88:	0101ffc4 	movi	r4,2047
   10b8c:	280ad0fa 	srli	r5,r5,3
   10b90:	1444b03a 	or	r2,r2,r17
   10b94:	81002c26 	beq	r16,r4,10c48 <__adddf3+0x2c4>
   10b98:	8120703a 	and	r16,r16,r4
   10b9c:	01000434 	movhi	r4,16
   10ba0:	213fffc4 	addi	r4,r4,-1
   10ba4:	2908703a 	and	r4,r5,r4
   10ba8:	003fad06 	br	10a60 <__alt_mem_Flash_flash_data+0xf4010a60>
   10bac:	8089c83a 	sub	r4,r16,r2
   10bb0:	01006a0e 	bge	zero,r4,10d5c <__adddf3+0x3d8>
   10bb4:	10003326 	beq	r2,zero,10c84 <__adddf3+0x300>
   10bb8:	0081ffc4 	movi	r2,2047
   10bbc:	80bf9026 	beq	r16,r2,10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10bc0:	42002034 	orhi	r8,r8,128
   10bc4:	00800e04 	movi	r2,56
   10bc8:	1100b116 	blt	r2,r4,10e90 <__adddf3+0x50c>
   10bcc:	008007c4 	movi	r2,31
   10bd0:	1100e216 	blt	r2,r4,10f5c <__adddf3+0x5d8>
   10bd4:	00800804 	movi	r2,32
   10bd8:	1105c83a 	sub	r2,r2,r4
   10bdc:	4092983a 	sll	r9,r8,r2
   10be0:	310ed83a 	srl	r7,r6,r4
   10be4:	3084983a 	sll	r2,r6,r2
   10be8:	4110d83a 	srl	r8,r8,r4
   10bec:	49ccb03a 	or	r6,r9,r7
   10bf0:	1004c03a 	cmpne	r2,r2,zero
   10bf4:	308cb03a 	or	r6,r6,r2
   10bf8:	344d883a 	add	r6,r6,r17
   10bfc:	3463803a 	cmpltu	r17,r6,r17
   10c00:	414b883a 	add	r5,r8,r5
   10c04:	2c4b883a 	add	r5,r5,r17
   10c08:	3023883a 	mov	r17,r6
   10c0c:	2880202c 	andhi	r2,r5,128
   10c10:	10002726 	beq	r2,zero,10cb0 <__adddf3+0x32c>
   10c14:	84000044 	addi	r16,r16,1
   10c18:	0081ffc4 	movi	r2,2047
   10c1c:	8080ae26 	beq	r16,r2,10ed8 <__adddf3+0x554>
   10c20:	00bfe034 	movhi	r2,65408
   10c24:	10bfffc4 	addi	r2,r2,-1
   10c28:	288a703a 	and	r5,r5,r2
   10c2c:	880cd07a 	srli	r6,r17,1
   10c30:	280897fa 	slli	r4,r5,31
   10c34:	88c0004c 	andi	r3,r17,1
   10c38:	30e2b03a 	or	r17,r6,r3
   10c3c:	280ad07a 	srli	r5,r5,1
   10c40:	8922b03a 	or	r17,r17,r4
   10c44:	003f6e06 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10c48:	1148b03a 	or	r4,r2,r5
   10c4c:	20003c26 	beq	r4,zero,10d40 <__adddf3+0x3bc>
   10c50:	29000234 	orhi	r4,r5,8
   10c54:	01400434 	movhi	r5,16
   10c58:	297fffc4 	addi	r5,r5,-1
   10c5c:	2148703a 	and	r4,r4,r5
   10c60:	003f7f06 	br	10a60 <__alt_mem_Flash_flash_data+0xf4010a60>
   10c64:	18ffffc4 	addi	r3,r3,-1
   10c68:	18004d1e 	bne	r3,zero,10da0 <__adddf3+0x41c>
   10c6c:	898dc83a 	sub	r6,r17,r6
   10c70:	89a3803a 	cmpltu	r17,r17,r6
   10c74:	2a0bc83a 	sub	r5,r5,r8
   10c78:	2c4bc83a 	sub	r5,r5,r17
   10c7c:	3023883a 	mov	r17,r6
   10c80:	003f9c06 	br	10af4 <__alt_mem_Flash_flash_data+0xf4010af4>
   10c84:	4184b03a 	or	r2,r8,r6
   10c88:	103f5d26 	beq	r2,zero,10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10c8c:	213fffc4 	addi	r4,r4,-1
   10c90:	203fd926 	beq	r4,zero,10bf8 <__alt_mem_Flash_flash_data+0xf4010bf8>
   10c94:	0081ffc4 	movi	r2,2047
   10c98:	80bfca1e 	bne	r16,r2,10bc4 <__alt_mem_Flash_flash_data+0xf4010bc4>
   10c9c:	003f5806 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10ca0:	10c8b03a 	or	r4,r2,r3
   10ca4:	20008b26 	beq	r4,zero,10ed4 <__adddf3+0x550>
   10ca8:	100b883a 	mov	r5,r2
   10cac:	1823883a 	mov	r17,r3
   10cb0:	888001cc 	andi	r2,r17,7
   10cb4:	103f541e 	bne	r2,zero,10a08 <__alt_mem_Flash_flash_data+0xf4010a08>
   10cb8:	9007883a 	mov	r3,r18
   10cbc:	003fb006 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10cc0:	1800531e 	bne	r3,zero,10e10 <__adddf3+0x48c>
   10cc4:	80800044 	addi	r2,r16,1
   10cc8:	1081ffcc 	andi	r2,r2,2047
   10ccc:	00c00044 	movi	r3,1
   10cd0:	1880990e 	bge	r3,r2,10f38 <__adddf3+0x5b4>
   10cd4:	8985c83a 	sub	r2,r17,r6
   10cd8:	8887803a 	cmpltu	r3,r17,r2
   10cdc:	2a27c83a 	sub	r19,r5,r8
   10ce0:	98e7c83a 	sub	r19,r19,r3
   10ce4:	98c0202c 	andhi	r3,r19,128
   10ce8:	18006226 	beq	r3,zero,10e74 <__adddf3+0x4f0>
   10cec:	3463c83a 	sub	r17,r6,r17
   10cf0:	4151c83a 	sub	r8,r8,r5
   10cf4:	344d803a 	cmpltu	r6,r6,r17
   10cf8:	41a7c83a 	sub	r19,r8,r6
   10cfc:	3825883a 	mov	r18,r7
   10d00:	983f821e 	bne	r19,zero,10b0c <__alt_mem_Flash_flash_data+0xf4010b0c>
   10d04:	8809883a 	mov	r4,r17
   10d08:	0012f200 	call	12f20 <__clzsi2>
   10d0c:	10800804 	addi	r2,r2,32
   10d10:	10fffe04 	addi	r3,r2,-8
   10d14:	010007c4 	movi	r4,31
   10d18:	20ff810e 	bge	r4,r3,10b20 <__alt_mem_Flash_flash_data+0xf4010b20>
   10d1c:	14fff604 	addi	r19,r2,-40
   10d20:	8ce6983a 	sll	r19,r17,r19
   10d24:	0023883a 	mov	r17,zero
   10d28:	1c3f840e 	bge	r3,r16,10b3c <__alt_mem_Flash_flash_data+0xf4010b3c>
   10d2c:	017fe034 	movhi	r5,65408
   10d30:	297fffc4 	addi	r5,r5,-1
   10d34:	80e1c83a 	sub	r16,r16,r3
   10d38:	994a703a 	and	r5,r19,r5
   10d3c:	003f3006 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10d40:	0009883a 	mov	r4,zero
   10d44:	0005883a 	mov	r2,zero
   10d48:	003f4506 	br	10a60 <__alt_mem_Flash_flash_data+0xf4010a60>
   10d4c:	418cb03a 	or	r6,r8,r6
   10d50:	300cc03a 	cmpne	r6,r6,zero
   10d54:	0007883a 	mov	r3,zero
   10d58:	003f6106 	br	10ae0 <__alt_mem_Flash_flash_data+0xf4010ae0>
   10d5c:	2000921e 	bne	r4,zero,10fa8 <__adddf3+0x624>
   10d60:	80800044 	addi	r2,r16,1
   10d64:	11c1ffcc 	andi	r7,r2,2047
   10d68:	01000044 	movi	r4,1
   10d6c:	21c0610e 	bge	r4,r7,10ef4 <__adddf3+0x570>
   10d70:	0101ffc4 	movi	r4,2047
   10d74:	1100a326 	beq	r2,r4,11004 <__adddf3+0x680>
   10d78:	344d883a 	add	r6,r6,r17
   10d7c:	3463803a 	cmpltu	r17,r6,r17
   10d80:	414b883a 	add	r5,r8,r5
   10d84:	2c4b883a 	add	r5,r5,r17
   10d88:	282297fa 	slli	r17,r5,31
   10d8c:	300cd07a 	srli	r6,r6,1
   10d90:	280ad07a 	srli	r5,r5,1
   10d94:	1021883a 	mov	r16,r2
   10d98:	89a2b03a 	or	r17,r17,r6
   10d9c:	003f1806 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10da0:	0081ffc4 	movi	r2,2047
   10da4:	80bf411e 	bne	r16,r2,10aac <__alt_mem_Flash_flash_data+0xf4010aac>
   10da8:	003f1506 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10dac:	80bff844 	addi	r2,r16,-31
   10db0:	00c00804 	movi	r3,32
   10db4:	9884d83a 	srl	r2,r19,r2
   10db8:	28c04a26 	beq	r5,r3,10ee4 <__adddf3+0x560>
   10dbc:	00c00fc4 	movi	r3,63
   10dc0:	1c21c83a 	sub	r16,r3,r16
   10dc4:	9c26983a 	sll	r19,r19,r16
   10dc8:	9c62b03a 	or	r17,r19,r17
   10dcc:	8822c03a 	cmpne	r17,r17,zero
   10dd0:	88a2b03a 	or	r17,r17,r2
   10dd4:	000b883a 	mov	r5,zero
   10dd8:	0021883a 	mov	r16,zero
   10ddc:	003fb406 	br	10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10de0:	18bff804 	addi	r2,r3,-32
   10de4:	01000804 	movi	r4,32
   10de8:	4084d83a 	srl	r2,r8,r2
   10dec:	19003f26 	beq	r3,r4,10eec <__adddf3+0x568>
   10df0:	01001004 	movi	r4,64
   10df4:	20c7c83a 	sub	r3,r4,r3
   10df8:	40d0983a 	sll	r8,r8,r3
   10dfc:	418cb03a 	or	r6,r8,r6
   10e00:	300cc03a 	cmpne	r6,r6,zero
   10e04:	308cb03a 	or	r6,r6,r2
   10e08:	0007883a 	mov	r3,zero
   10e0c:	003f3406 	br	10ae0 <__alt_mem_Flash_flash_data+0xf4010ae0>
   10e10:	80002326 	beq	r16,zero,10ea0 <__adddf3+0x51c>
   10e14:	0101ffc4 	movi	r4,2047
   10e18:	11005e26 	beq	r2,r4,10f94 <__adddf3+0x610>
   10e1c:	00c7c83a 	sub	r3,zero,r3
   10e20:	29402034 	orhi	r5,r5,128
   10e24:	01000e04 	movi	r4,56
   10e28:	20c07216 	blt	r4,r3,10ff4 <__adddf3+0x670>
   10e2c:	010007c4 	movi	r4,31
   10e30:	20c0ce16 	blt	r4,r3,1116c <__adddf3+0x7e8>
   10e34:	01000804 	movi	r4,32
   10e38:	20c9c83a 	sub	r4,r4,r3
   10e3c:	2914983a 	sll	r10,r5,r4
   10e40:	88d2d83a 	srl	r9,r17,r3
   10e44:	8908983a 	sll	r4,r17,r4
   10e48:	28c6d83a 	srl	r3,r5,r3
   10e4c:	5262b03a 	or	r17,r10,r9
   10e50:	2008c03a 	cmpne	r4,r4,zero
   10e54:	8922b03a 	or	r17,r17,r4
   10e58:	3463c83a 	sub	r17,r6,r17
   10e5c:	40c7c83a 	sub	r3,r8,r3
   10e60:	344d803a 	cmpltu	r6,r6,r17
   10e64:	198bc83a 	sub	r5,r3,r6
   10e68:	1021883a 	mov	r16,r2
   10e6c:	3825883a 	mov	r18,r7
   10e70:	003f2006 	br	10af4 <__alt_mem_Flash_flash_data+0xf4010af4>
   10e74:	9886b03a 	or	r3,r19,r2
   10e78:	1800141e 	bne	r3,zero,10ecc <__adddf3+0x548>
   10e7c:	0007883a 	mov	r3,zero
   10e80:	000b883a 	mov	r5,zero
   10e84:	0023883a 	mov	r17,zero
   10e88:	0021883a 	mov	r16,zero
   10e8c:	003f3c06 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10e90:	418cb03a 	or	r6,r8,r6
   10e94:	300cc03a 	cmpne	r6,r6,zero
   10e98:	0011883a 	mov	r8,zero
   10e9c:	003f5606 	br	10bf8 <__alt_mem_Flash_flash_data+0xf4010bf8>
   10ea0:	2c48b03a 	or	r4,r5,r17
   10ea4:	20003b26 	beq	r4,zero,10f94 <__adddf3+0x610>
   10ea8:	00c6303a 	nor	r3,zero,r3
   10eac:	1800371e 	bne	r3,zero,10f8c <__adddf3+0x608>
   10eb0:	3463c83a 	sub	r17,r6,r17
   10eb4:	414bc83a 	sub	r5,r8,r5
   10eb8:	344d803a 	cmpltu	r6,r6,r17
   10ebc:	298bc83a 	sub	r5,r5,r6
   10ec0:	1021883a 	mov	r16,r2
   10ec4:	3825883a 	mov	r18,r7
   10ec8:	003f0a06 	br	10af4 <__alt_mem_Flash_flash_data+0xf4010af4>
   10ecc:	1023883a 	mov	r17,r2
   10ed0:	003f0d06 	br	10b08 <__alt_mem_Flash_flash_data+0xf4010b08>
   10ed4:	0007883a 	mov	r3,zero
   10ed8:	000b883a 	mov	r5,zero
   10edc:	0023883a 	mov	r17,zero
   10ee0:	003f2706 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   10ee4:	0027883a 	mov	r19,zero
   10ee8:	003fb706 	br	10dc8 <__alt_mem_Flash_flash_data+0xf4010dc8>
   10eec:	0011883a 	mov	r8,zero
   10ef0:	003fc206 	br	10dfc <__alt_mem_Flash_flash_data+0xf4010dfc>
   10ef4:	2c44b03a 	or	r2,r5,r17
   10ef8:	8000871e 	bne	r16,zero,11118 <__adddf3+0x794>
   10efc:	1000b126 	beq	r2,zero,111c4 <__adddf3+0x840>
   10f00:	4184b03a 	or	r2,r8,r6
   10f04:	103ebe26 	beq	r2,zero,10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10f08:	3445883a 	add	r2,r6,r17
   10f0c:	1463803a 	cmpltu	r17,r2,r17
   10f10:	414b883a 	add	r5,r8,r5
   10f14:	2c4b883a 	add	r5,r5,r17
   10f18:	28c0202c 	andhi	r3,r5,128
   10f1c:	1023883a 	mov	r17,r2
   10f20:	183f6326 	beq	r3,zero,10cb0 <__alt_mem_Flash_flash_data+0xf4010cb0>
   10f24:	00bfe034 	movhi	r2,65408
   10f28:	10bfffc4 	addi	r2,r2,-1
   10f2c:	2021883a 	mov	r16,r4
   10f30:	288a703a 	and	r5,r5,r2
   10f34:	003eb206 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10f38:	2c44b03a 	or	r2,r5,r17
   10f3c:	8000251e 	bne	r16,zero,10fd4 <__adddf3+0x650>
   10f40:	10004b1e 	bne	r2,zero,11070 <__adddf3+0x6ec>
   10f44:	4184b03a 	or	r2,r8,r6
   10f48:	103fe226 	beq	r2,zero,10ed4 <__alt_mem_Flash_flash_data+0xf4010ed4>
   10f4c:	400b883a 	mov	r5,r8
   10f50:	3023883a 	mov	r17,r6
   10f54:	3825883a 	mov	r18,r7
   10f58:	003ea906 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10f5c:	20bff804 	addi	r2,r4,-32
   10f60:	01c00804 	movi	r7,32
   10f64:	4084d83a 	srl	r2,r8,r2
   10f68:	21c07e26 	beq	r4,r7,11164 <__adddf3+0x7e0>
   10f6c:	01c01004 	movi	r7,64
   10f70:	3909c83a 	sub	r4,r7,r4
   10f74:	4110983a 	sll	r8,r8,r4
   10f78:	418cb03a 	or	r6,r8,r6
   10f7c:	300cc03a 	cmpne	r6,r6,zero
   10f80:	308cb03a 	or	r6,r6,r2
   10f84:	0011883a 	mov	r8,zero
   10f88:	003f1b06 	br	10bf8 <__alt_mem_Flash_flash_data+0xf4010bf8>
   10f8c:	0101ffc4 	movi	r4,2047
   10f90:	113fa41e 	bne	r2,r4,10e24 <__alt_mem_Flash_flash_data+0xf4010e24>
   10f94:	400b883a 	mov	r5,r8
   10f98:	3023883a 	mov	r17,r6
   10f9c:	1021883a 	mov	r16,r2
   10fa0:	3825883a 	mov	r18,r7
   10fa4:	003e9606 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10fa8:	80001a1e 	bne	r16,zero,11014 <__adddf3+0x690>
   10fac:	2c4eb03a 	or	r7,r5,r17
   10fb0:	38005526 	beq	r7,zero,11108 <__adddf3+0x784>
   10fb4:	0108303a 	nor	r4,zero,r4
   10fb8:	2000511e 	bne	r4,zero,11100 <__adddf3+0x77c>
   10fbc:	89a3883a 	add	r17,r17,r6
   10fc0:	414b883a 	add	r5,r8,r5
   10fc4:	898d803a 	cmpltu	r6,r17,r6
   10fc8:	298b883a 	add	r5,r5,r6
   10fcc:	1021883a 	mov	r16,r2
   10fd0:	003f0e06 	br	10c0c <__alt_mem_Flash_flash_data+0xf4010c0c>
   10fd4:	1000341e 	bne	r2,zero,110a8 <__adddf3+0x724>
   10fd8:	4184b03a 	or	r2,r8,r6
   10fdc:	10006f26 	beq	r2,zero,1119c <__adddf3+0x818>
   10fe0:	400b883a 	mov	r5,r8
   10fe4:	3023883a 	mov	r17,r6
   10fe8:	3825883a 	mov	r18,r7
   10fec:	0401ffc4 	movi	r16,2047
   10ff0:	003e8306 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   10ff4:	2c62b03a 	or	r17,r5,r17
   10ff8:	8822c03a 	cmpne	r17,r17,zero
   10ffc:	0007883a 	mov	r3,zero
   11000:	003f9506 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   11004:	1021883a 	mov	r16,r2
   11008:	000b883a 	mov	r5,zero
   1100c:	0023883a 	mov	r17,zero
   11010:	003edb06 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   11014:	01c1ffc4 	movi	r7,2047
   11018:	11c03b26 	beq	r2,r7,11108 <__adddf3+0x784>
   1101c:	0109c83a 	sub	r4,zero,r4
   11020:	29402034 	orhi	r5,r5,128
   11024:	01c00e04 	movi	r7,56
   11028:	39006216 	blt	r7,r4,111b4 <__adddf3+0x830>
   1102c:	01c007c4 	movi	r7,31
   11030:	39006b16 	blt	r7,r4,111e0 <__adddf3+0x85c>
   11034:	01c00804 	movi	r7,32
   11038:	390fc83a 	sub	r7,r7,r4
   1103c:	29d4983a 	sll	r10,r5,r7
   11040:	8912d83a 	srl	r9,r17,r4
   11044:	89ce983a 	sll	r7,r17,r7
   11048:	2908d83a 	srl	r4,r5,r4
   1104c:	5262b03a 	or	r17,r10,r9
   11050:	380ac03a 	cmpne	r5,r7,zero
   11054:	8962b03a 	or	r17,r17,r5
   11058:	89a3883a 	add	r17,r17,r6
   1105c:	2211883a 	add	r8,r4,r8
   11060:	898d803a 	cmpltu	r6,r17,r6
   11064:	418b883a 	add	r5,r8,r6
   11068:	1021883a 	mov	r16,r2
   1106c:	003ee706 	br	10c0c <__alt_mem_Flash_flash_data+0xf4010c0c>
   11070:	4184b03a 	or	r2,r8,r6
   11074:	103e6226 	beq	r2,zero,10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   11078:	8987c83a 	sub	r3,r17,r6
   1107c:	88c9803a 	cmpltu	r4,r17,r3
   11080:	2a05c83a 	sub	r2,r5,r8
   11084:	1105c83a 	sub	r2,r2,r4
   11088:	1100202c 	andhi	r4,r2,128
   1108c:	203f0426 	beq	r4,zero,10ca0 <__alt_mem_Flash_flash_data+0xf4010ca0>
   11090:	3463c83a 	sub	r17,r6,r17
   11094:	414bc83a 	sub	r5,r8,r5
   11098:	344d803a 	cmpltu	r6,r6,r17
   1109c:	298bc83a 	sub	r5,r5,r6
   110a0:	3825883a 	mov	r18,r7
   110a4:	003e5606 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   110a8:	4184b03a 	or	r2,r8,r6
   110ac:	10002b26 	beq	r2,zero,1115c <__adddf3+0x7d8>
   110b0:	2804d0fa 	srli	r2,r5,3
   110b4:	8822d0fa 	srli	r17,r17,3
   110b8:	280a977a 	slli	r5,r5,29
   110bc:	10c0022c 	andhi	r3,r2,8
   110c0:	2c62b03a 	or	r17,r5,r17
   110c4:	18000826 	beq	r3,zero,110e8 <__adddf3+0x764>
   110c8:	4008d0fa 	srli	r4,r8,3
   110cc:	20c0022c 	andhi	r3,r4,8
   110d0:	1800051e 	bne	r3,zero,110e8 <__adddf3+0x764>
   110d4:	300cd0fa 	srli	r6,r6,3
   110d8:	4010977a 	slli	r8,r8,29
   110dc:	2005883a 	mov	r2,r4
   110e0:	3825883a 	mov	r18,r7
   110e4:	41a2b03a 	or	r17,r8,r6
   110e8:	880ad77a 	srli	r5,r17,29
   110ec:	100490fa 	slli	r2,r2,3
   110f0:	882290fa 	slli	r17,r17,3
   110f4:	0401ffc4 	movi	r16,2047
   110f8:	288ab03a 	or	r5,r5,r2
   110fc:	003e4006 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   11100:	01c1ffc4 	movi	r7,2047
   11104:	11ffc71e 	bne	r2,r7,11024 <__alt_mem_Flash_flash_data+0xf4011024>
   11108:	400b883a 	mov	r5,r8
   1110c:	3023883a 	mov	r17,r6
   11110:	1021883a 	mov	r16,r2
   11114:	003e3a06 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   11118:	10002d26 	beq	r2,zero,111d0 <__adddf3+0x84c>
   1111c:	4184b03a 	or	r2,r8,r6
   11120:	10000e26 	beq	r2,zero,1115c <__adddf3+0x7d8>
   11124:	2804d0fa 	srli	r2,r5,3
   11128:	8822d0fa 	srli	r17,r17,3
   1112c:	280a977a 	slli	r5,r5,29
   11130:	10c0022c 	andhi	r3,r2,8
   11134:	2c62b03a 	or	r17,r5,r17
   11138:	183feb26 	beq	r3,zero,110e8 <__alt_mem_Flash_flash_data+0xf40110e8>
   1113c:	4008d0fa 	srli	r4,r8,3
   11140:	20c0022c 	andhi	r3,r4,8
   11144:	183fe81e 	bne	r3,zero,110e8 <__alt_mem_Flash_flash_data+0xf40110e8>
   11148:	300cd0fa 	srli	r6,r6,3
   1114c:	4010977a 	slli	r8,r8,29
   11150:	2005883a 	mov	r2,r4
   11154:	41a2b03a 	or	r17,r8,r6
   11158:	003fe306 	br	110e8 <__alt_mem_Flash_flash_data+0xf40110e8>
   1115c:	0401ffc4 	movi	r16,2047
   11160:	003e2706 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   11164:	0011883a 	mov	r8,zero
   11168:	003f8306 	br	10f78 <__alt_mem_Flash_flash_data+0xf4010f78>
   1116c:	193ff804 	addi	r4,r3,-32
   11170:	02400804 	movi	r9,32
   11174:	2908d83a 	srl	r4,r5,r4
   11178:	1a402526 	beq	r3,r9,11210 <__adddf3+0x88c>
   1117c:	02401004 	movi	r9,64
   11180:	48c7c83a 	sub	r3,r9,r3
   11184:	28ca983a 	sll	r5,r5,r3
   11188:	2c62b03a 	or	r17,r5,r17
   1118c:	8822c03a 	cmpne	r17,r17,zero
   11190:	8922b03a 	or	r17,r17,r4
   11194:	0007883a 	mov	r3,zero
   11198:	003f2f06 	br	10e58 <__alt_mem_Flash_flash_data+0xf4010e58>
   1119c:	01402034 	movhi	r5,128
   111a0:	0007883a 	mov	r3,zero
   111a4:	297fffc4 	addi	r5,r5,-1
   111a8:	047ffe04 	movi	r17,-8
   111ac:	0401ffc4 	movi	r16,2047
   111b0:	003e7306 	br	10b80 <__alt_mem_Flash_flash_data+0xf4010b80>
   111b4:	2c62b03a 	or	r17,r5,r17
   111b8:	8822c03a 	cmpne	r17,r17,zero
   111bc:	0009883a 	mov	r4,zero
   111c0:	003fa506 	br	11058 <__alt_mem_Flash_flash_data+0xf4011058>
   111c4:	400b883a 	mov	r5,r8
   111c8:	3023883a 	mov	r17,r6
   111cc:	003e0c06 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   111d0:	400b883a 	mov	r5,r8
   111d4:	3023883a 	mov	r17,r6
   111d8:	0401ffc4 	movi	r16,2047
   111dc:	003e0806 	br	10a00 <__alt_mem_Flash_flash_data+0xf4010a00>
   111e0:	21fff804 	addi	r7,r4,-32
   111e4:	02400804 	movi	r9,32
   111e8:	29ced83a 	srl	r7,r5,r7
   111ec:	22400a26 	beq	r4,r9,11218 <__adddf3+0x894>
   111f0:	02401004 	movi	r9,64
   111f4:	4909c83a 	sub	r4,r9,r4
   111f8:	290a983a 	sll	r5,r5,r4
   111fc:	2c62b03a 	or	r17,r5,r17
   11200:	8822c03a 	cmpne	r17,r17,zero
   11204:	89e2b03a 	or	r17,r17,r7
   11208:	0009883a 	mov	r4,zero
   1120c:	003f9206 	br	11058 <__alt_mem_Flash_flash_data+0xf4011058>
   11210:	000b883a 	mov	r5,zero
   11214:	003fdc06 	br	11188 <__alt_mem_Flash_flash_data+0xf4011188>
   11218:	000b883a 	mov	r5,zero
   1121c:	003ff706 	br	111fc <__alt_mem_Flash_flash_data+0xf40111fc>

00011220 <__divdf3>:
   11220:	defff204 	addi	sp,sp,-56
   11224:	dd000815 	stw	r20,32(sp)
   11228:	2828d53a 	srli	r20,r5,20
   1122c:	dd800a15 	stw	r22,40(sp)
   11230:	282cd7fa 	srli	r22,r5,31
   11234:	dc000415 	stw	r16,16(sp)
   11238:	04000434 	movhi	r16,16
   1123c:	df000c15 	stw	fp,48(sp)
   11240:	dcc00715 	stw	r19,28(sp)
   11244:	dc800615 	stw	r18,24(sp)
   11248:	dc400515 	stw	r17,20(sp)
   1124c:	843fffc4 	addi	r16,r16,-1
   11250:	dfc00d15 	stw	ra,52(sp)
   11254:	ddc00b15 	stw	r23,44(sp)
   11258:	dd400915 	stw	r21,36(sp)
   1125c:	a501ffcc 	andi	r20,r20,2047
   11260:	2025883a 	mov	r18,r4
   11264:	2027883a 	mov	r19,r4
   11268:	2c22703a 	and	r17,r5,r16
   1126c:	b7003fcc 	andi	fp,r22,255
   11270:	a0005e26 	beq	r20,zero,113ec <__divdf3+0x1cc>
   11274:	0081ffc4 	movi	r2,2047
   11278:	a0803526 	beq	r20,r2,11350 <__divdf3+0x130>
   1127c:	8c000434 	orhi	r16,r17,16
   11280:	2004d77a 	srli	r2,r4,29
   11284:	802090fa 	slli	r16,r16,3
   11288:	202690fa 	slli	r19,r4,3
   1128c:	a53f0044 	addi	r20,r20,-1023
   11290:	80a2b03a 	or	r17,r16,r2
   11294:	0025883a 	mov	r18,zero
   11298:	0011883a 	mov	r8,zero
   1129c:	380ad53a 	srli	r5,r7,20
   112a0:	382ed7fa 	srli	r23,r7,31
   112a4:	04000434 	movhi	r16,16
   112a8:	843fffc4 	addi	r16,r16,-1
   112ac:	2941ffcc 	andi	r5,r5,2047
   112b0:	302b883a 	mov	r21,r6
   112b4:	3c20703a 	and	r16,r7,r16
   112b8:	ba403fcc 	andi	r9,r23,255
   112bc:	28006726 	beq	r5,zero,1145c <__divdf3+0x23c>
   112c0:	0081ffc4 	movi	r2,2047
   112c4:	28805f26 	beq	r5,r2,11444 <__divdf3+0x224>
   112c8:	84000434 	orhi	r16,r16,16
   112cc:	3004d77a 	srli	r2,r6,29
   112d0:	802090fa 	slli	r16,r16,3
   112d4:	302a90fa 	slli	r21,r6,3
   112d8:	297f0044 	addi	r5,r5,-1023
   112dc:	80a0b03a 	or	r16,r16,r2
   112e0:	000f883a 	mov	r7,zero
   112e4:	3c86b03a 	or	r3,r7,r18
   112e8:	180690ba 	slli	r3,r3,2
   112ec:	00800074 	movhi	r2,1
   112f0:	1084c404 	addi	r2,r2,4880
   112f4:	1887883a 	add	r3,r3,r2
   112f8:	18c00017 	ldw	r3,0(r3)
   112fc:	b5c8f03a 	xor	r4,r22,r23
   11300:	200d883a 	mov	r6,r4
   11304:	24803fcc 	andi	r18,r4,255
   11308:	a169c83a 	sub	r20,r20,r5
   1130c:	1800683a 	jmp	r3
   11310:	00011558 	cmpnei	zero,zero,1109
   11314:	00011388 	cmpgei	zero,zero,1102
   11318:	0001151c 	xori	zero,zero,1108
   1131c:	0001136c 	andhi	zero,zero,1101
   11320:	0001151c 	xori	zero,zero,1108
   11324:	000114f0 	cmpltui	zero,zero,1107
   11328:	0001151c 	xori	zero,zero,1108
   1132c:	0001136c 	andhi	zero,zero,1101
   11330:	00011388 	cmpgei	zero,zero,1102
   11334:	00011388 	cmpgei	zero,zero,1102
   11338:	000114f0 	cmpltui	zero,zero,1107
   1133c:	0001136c 	andhi	zero,zero,1101
   11340:	0001137c 	xorhi	zero,zero,1101
   11344:	0001137c 	xorhi	zero,zero,1101
   11348:	0001137c 	xorhi	zero,zero,1101
   1134c:	0001152c 	andhi	zero,zero,1108
   11350:	8904b03a 	or	r2,r17,r4
   11354:	1000631e 	bne	r2,zero,114e4 <__divdf3+0x2c4>
   11358:	04800204 	movi	r18,8
   1135c:	0023883a 	mov	r17,zero
   11360:	0027883a 	mov	r19,zero
   11364:	02000084 	movi	r8,2
   11368:	003fcc06 	br	1129c <__alt_mem_Flash_flash_data+0xf401129c>
   1136c:	8023883a 	mov	r17,r16
   11370:	a827883a 	mov	r19,r21
   11374:	4839883a 	mov	fp,r9
   11378:	3811883a 	mov	r8,r7
   1137c:	00800084 	movi	r2,2
   11380:	40812a1e 	bne	r8,r2,1182c <__divdf3+0x60c>
   11384:	e025883a 	mov	r18,fp
   11388:	9180004c 	andi	r6,r18,1
   1138c:	0101ffc4 	movi	r4,2047
   11390:	000b883a 	mov	r5,zero
   11394:	0027883a 	mov	r19,zero
   11398:	2008953a 	slli	r4,r4,20
   1139c:	30c03fcc 	andi	r3,r6,255
   113a0:	04000434 	movhi	r16,16
   113a4:	180697fa 	slli	r3,r3,31
   113a8:	843fffc4 	addi	r16,r16,-1
   113ac:	2c20703a 	and	r16,r5,r16
   113b0:	8120b03a 	or	r16,r16,r4
   113b4:	80c6b03a 	or	r3,r16,r3
   113b8:	9805883a 	mov	r2,r19
   113bc:	dfc00d17 	ldw	ra,52(sp)
   113c0:	df000c17 	ldw	fp,48(sp)
   113c4:	ddc00b17 	ldw	r23,44(sp)
   113c8:	dd800a17 	ldw	r22,40(sp)
   113cc:	dd400917 	ldw	r21,36(sp)
   113d0:	dd000817 	ldw	r20,32(sp)
   113d4:	dcc00717 	ldw	r19,28(sp)
   113d8:	dc800617 	ldw	r18,24(sp)
   113dc:	dc400517 	ldw	r17,20(sp)
   113e0:	dc000417 	ldw	r16,16(sp)
   113e4:	dec00e04 	addi	sp,sp,56
   113e8:	f800283a 	ret
   113ec:	8904b03a 	or	r2,r17,r4
   113f0:	10003726 	beq	r2,zero,114d0 <__divdf3+0x2b0>
   113f4:	88011c26 	beq	r17,zero,11868 <__divdf3+0x648>
   113f8:	8809883a 	mov	r4,r17
   113fc:	d9800315 	stw	r6,12(sp)
   11400:	d9c00115 	stw	r7,4(sp)
   11404:	0012f200 	call	12f20 <__clzsi2>
   11408:	d9800317 	ldw	r6,12(sp)
   1140c:	d9c00117 	ldw	r7,4(sp)
   11410:	1007883a 	mov	r3,r2
   11414:	01000a04 	movi	r4,40
   11418:	1cfffe04 	addi	r19,r3,-8
   1141c:	20c9c83a 	sub	r4,r4,r3
   11420:	8cca983a 	sll	r5,r17,r19
   11424:	9108d83a 	srl	r4,r18,r4
   11428:	94e6983a 	sll	r19,r18,r19
   1142c:	2162b03a 	or	r17,r4,r5
   11430:	053f0344 	movi	r20,-1011
   11434:	a0e9c83a 	sub	r20,r20,r3
   11438:	0025883a 	mov	r18,zero
   1143c:	0011883a 	mov	r8,zero
   11440:	003f9606 	br	1129c <__alt_mem_Flash_flash_data+0xf401129c>
   11444:	8184b03a 	or	r2,r16,r6
   11448:	10001f1e 	bne	r2,zero,114c8 <__divdf3+0x2a8>
   1144c:	0021883a 	mov	r16,zero
   11450:	002b883a 	mov	r21,zero
   11454:	01c00084 	movi	r7,2
   11458:	003fa206 	br	112e4 <__alt_mem_Flash_flash_data+0xf40112e4>
   1145c:	8184b03a 	or	r2,r16,r6
   11460:	10001526 	beq	r2,zero,114b8 <__divdf3+0x298>
   11464:	80010c26 	beq	r16,zero,11898 <__divdf3+0x678>
   11468:	8009883a 	mov	r4,r16
   1146c:	d9800315 	stw	r6,12(sp)
   11470:	da000215 	stw	r8,8(sp)
   11474:	da400015 	stw	r9,0(sp)
   11478:	0012f200 	call	12f20 <__clzsi2>
   1147c:	d9800317 	ldw	r6,12(sp)
   11480:	da000217 	ldw	r8,8(sp)
   11484:	da400017 	ldw	r9,0(sp)
   11488:	1007883a 	mov	r3,r2
   1148c:	01000a04 	movi	r4,40
   11490:	1d7ffe04 	addi	r21,r3,-8
   11494:	20c9c83a 	sub	r4,r4,r3
   11498:	8560983a 	sll	r16,r16,r21
   1149c:	3108d83a 	srl	r4,r6,r4
   114a0:	356a983a 	sll	r21,r6,r21
   114a4:	2420b03a 	or	r16,r4,r16
   114a8:	017f0344 	movi	r5,-1011
   114ac:	28cbc83a 	sub	r5,r5,r3
   114b0:	000f883a 	mov	r7,zero
   114b4:	003f8b06 	br	112e4 <__alt_mem_Flash_flash_data+0xf40112e4>
   114b8:	0021883a 	mov	r16,zero
   114bc:	002b883a 	mov	r21,zero
   114c0:	01c00044 	movi	r7,1
   114c4:	003f8706 	br	112e4 <__alt_mem_Flash_flash_data+0xf40112e4>
   114c8:	01c000c4 	movi	r7,3
   114cc:	003f8506 	br	112e4 <__alt_mem_Flash_flash_data+0xf40112e4>
   114d0:	04800104 	movi	r18,4
   114d4:	0023883a 	mov	r17,zero
   114d8:	0027883a 	mov	r19,zero
   114dc:	02000044 	movi	r8,1
   114e0:	003f6e06 	br	1129c <__alt_mem_Flash_flash_data+0xf401129c>
   114e4:	04800304 	movi	r18,12
   114e8:	020000c4 	movi	r8,3
   114ec:	003f6b06 	br	1129c <__alt_mem_Flash_flash_data+0xf401129c>
   114f0:	01400434 	movhi	r5,16
   114f4:	000d883a 	mov	r6,zero
   114f8:	297fffc4 	addi	r5,r5,-1
   114fc:	04ffffc4 	movi	r19,-1
   11500:	0101ffc4 	movi	r4,2047
   11504:	003fa406 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   11508:	043f0084 	movi	r16,-1022
   1150c:	8521c83a 	sub	r16,r16,r20
   11510:	00800e04 	movi	r2,56
   11514:	1401200e 	bge	r2,r16,11998 <__divdf3+0x778>
   11518:	9180004c 	andi	r6,r18,1
   1151c:	0009883a 	mov	r4,zero
   11520:	000b883a 	mov	r5,zero
   11524:	0027883a 	mov	r19,zero
   11528:	003f9b06 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   1152c:	8880022c 	andhi	r2,r17,8
   11530:	1000c726 	beq	r2,zero,11850 <__divdf3+0x630>
   11534:	8080022c 	andhi	r2,r16,8
   11538:	1000c51e 	bne	r2,zero,11850 <__divdf3+0x630>
   1153c:	00800434 	movhi	r2,16
   11540:	81400234 	orhi	r5,r16,8
   11544:	10bfffc4 	addi	r2,r2,-1
   11548:	b80d883a 	mov	r6,r23
   1154c:	288a703a 	and	r5,r5,r2
   11550:	a827883a 	mov	r19,r21
   11554:	003fea06 	br	11500 <__alt_mem_Flash_flash_data+0xf4011500>
   11558:	8440ea36 	bltu	r16,r17,11904 <__divdf3+0x6e4>
   1155c:	8c00e826 	beq	r17,r16,11900 <__divdf3+0x6e0>
   11560:	a53fffc4 	addi	r20,r20,-1
   11564:	882d883a 	mov	r22,r17
   11568:	000d883a 	mov	r6,zero
   1156c:	a804d63a 	srli	r2,r21,24
   11570:	8020923a 	slli	r16,r16,8
   11574:	b009883a 	mov	r4,r22
   11578:	d9800315 	stw	r6,12(sp)
   1157c:	1420b03a 	or	r16,r2,r16
   11580:	802ed43a 	srli	r23,r16,16
   11584:	873fffcc 	andi	fp,r16,65535
   11588:	a82a923a 	slli	r21,r21,8
   1158c:	b80b883a 	mov	r5,r23
   11590:	00109740 	call	10974 <__udivsi3>
   11594:	b009883a 	mov	r4,r22
   11598:	b80b883a 	mov	r5,r23
   1159c:	1023883a 	mov	r17,r2
   115a0:	001097c0 	call	1097c <__umodsi3>
   115a4:	1004943a 	slli	r2,r2,16
   115a8:	9808d43a 	srli	r4,r19,16
   115ac:	8f2d383a 	mul	r22,r17,fp
   115b0:	d9800317 	ldw	r6,12(sp)
   115b4:	1106b03a 	or	r3,r2,r4
   115b8:	1d80062e 	bgeu	r3,r22,115d4 <__divdf3+0x3b4>
   115bc:	1c07883a 	add	r3,r3,r16
   115c0:	88bfffc4 	addi	r2,r17,-1
   115c4:	1c00dc36 	bltu	r3,r16,11938 <__divdf3+0x718>
   115c8:	1d80db2e 	bgeu	r3,r22,11938 <__divdf3+0x718>
   115cc:	8c7fff84 	addi	r17,r17,-2
   115d0:	1c07883a 	add	r3,r3,r16
   115d4:	1dadc83a 	sub	r22,r3,r22
   115d8:	b009883a 	mov	r4,r22
   115dc:	b80b883a 	mov	r5,r23
   115e0:	d9800315 	stw	r6,12(sp)
   115e4:	00109740 	call	10974 <__udivsi3>
   115e8:	b009883a 	mov	r4,r22
   115ec:	b80b883a 	mov	r5,r23
   115f0:	d8800015 	stw	r2,0(sp)
   115f4:	001097c0 	call	1097c <__umodsi3>
   115f8:	da400017 	ldw	r9,0(sp)
   115fc:	1004943a 	slli	r2,r2,16
   11600:	9cffffcc 	andi	r19,r19,65535
   11604:	4f07383a 	mul	r3,r9,fp
   11608:	14c8b03a 	or	r4,r2,r19
   1160c:	d9800317 	ldw	r6,12(sp)
   11610:	20c0062e 	bgeu	r4,r3,1162c <__divdf3+0x40c>
   11614:	2409883a 	add	r4,r4,r16
   11618:	48bfffc4 	addi	r2,r9,-1
   1161c:	2400c436 	bltu	r4,r16,11930 <__divdf3+0x710>
   11620:	20c0c32e 	bgeu	r4,r3,11930 <__divdf3+0x710>
   11624:	4a7fff84 	addi	r9,r9,-2
   11628:	2409883a 	add	r4,r4,r16
   1162c:	8822943a 	slli	r17,r17,16
   11630:	a80ed43a 	srli	r7,r21,16
   11634:	aa3fffcc 	andi	r8,r21,65535
   11638:	4c62b03a 	or	r17,r9,r17
   1163c:	8816d43a 	srli	r11,r17,16
   11640:	897fffcc 	andi	r5,r17,65535
   11644:	2a15383a 	mul	r10,r5,r8
   11648:	5a19383a 	mul	r12,r11,r8
   1164c:	29cb383a 	mul	r5,r5,r7
   11650:	5012d43a 	srli	r9,r10,16
   11654:	20c5c83a 	sub	r2,r4,r3
   11658:	614b883a 	add	r5,r12,r5
   1165c:	2a4b883a 	add	r5,r5,r9
   11660:	59c7383a 	mul	r3,r11,r7
   11664:	2b00022e 	bgeu	r5,r12,11670 <__divdf3+0x450>
   11668:	01000074 	movhi	r4,1
   1166c:	1907883a 	add	r3,r3,r4
   11670:	2808d43a 	srli	r4,r5,16
   11674:	280a943a 	slli	r5,r5,16
   11678:	54ffffcc 	andi	r19,r10,65535
   1167c:	1907883a 	add	r3,r3,r4
   11680:	2ccb883a 	add	r5,r5,r19
   11684:	10c09336 	bltu	r2,r3,118d4 <__divdf3+0x6b4>
   11688:	10c0ad26 	beq	r2,r3,11940 <__divdf3+0x720>
   1168c:	10c7c83a 	sub	r3,r2,r3
   11690:	3167c83a 	sub	r19,r6,r5
   11694:	34ed803a 	cmpltu	r22,r6,r19
   11698:	1dadc83a 	sub	r22,r3,r22
   1169c:	b400b226 	beq	r22,r16,11968 <__divdf3+0x748>
   116a0:	b009883a 	mov	r4,r22
   116a4:	b80b883a 	mov	r5,r23
   116a8:	d9c00115 	stw	r7,4(sp)
   116ac:	da000215 	stw	r8,8(sp)
   116b0:	00109740 	call	10974 <__udivsi3>
   116b4:	b009883a 	mov	r4,r22
   116b8:	b80b883a 	mov	r5,r23
   116bc:	d8800315 	stw	r2,12(sp)
   116c0:	001097c0 	call	1097c <__umodsi3>
   116c4:	d9800317 	ldw	r6,12(sp)
   116c8:	1004943a 	slli	r2,r2,16
   116cc:	9808d43a 	srli	r4,r19,16
   116d0:	372d383a 	mul	r22,r6,fp
   116d4:	d9c00117 	ldw	r7,4(sp)
   116d8:	1106b03a 	or	r3,r2,r4
   116dc:	da000217 	ldw	r8,8(sp)
   116e0:	1d80062e 	bgeu	r3,r22,116fc <__divdf3+0x4dc>
   116e4:	1c07883a 	add	r3,r3,r16
   116e8:	30bfffc4 	addi	r2,r6,-1
   116ec:	1c00a036 	bltu	r3,r16,11970 <__divdf3+0x750>
   116f0:	1d809f2e 	bgeu	r3,r22,11970 <__divdf3+0x750>
   116f4:	31bfff84 	addi	r6,r6,-2
   116f8:	1c07883a 	add	r3,r3,r16
   116fc:	1dadc83a 	sub	r22,r3,r22
   11700:	b009883a 	mov	r4,r22
   11704:	b80b883a 	mov	r5,r23
   11708:	d9800315 	stw	r6,12(sp)
   1170c:	d9c00115 	stw	r7,4(sp)
   11710:	da000215 	stw	r8,8(sp)
   11714:	00109740 	call	10974 <__udivsi3>
   11718:	b009883a 	mov	r4,r22
   1171c:	b80b883a 	mov	r5,r23
   11720:	d8800015 	stw	r2,0(sp)
   11724:	001097c0 	call	1097c <__umodsi3>
   11728:	da400017 	ldw	r9,0(sp)
   1172c:	1004943a 	slli	r2,r2,16
   11730:	993fffcc 	andi	r4,r19,65535
   11734:	4f39383a 	mul	fp,r9,fp
   11738:	1106b03a 	or	r3,r2,r4
   1173c:	d9800317 	ldw	r6,12(sp)
   11740:	d9c00117 	ldw	r7,4(sp)
   11744:	da000217 	ldw	r8,8(sp)
   11748:	1f00062e 	bgeu	r3,fp,11764 <__divdf3+0x544>
   1174c:	1c07883a 	add	r3,r3,r16
   11750:	48bfffc4 	addi	r2,r9,-1
   11754:	1c008836 	bltu	r3,r16,11978 <__divdf3+0x758>
   11758:	1f00872e 	bgeu	r3,fp,11978 <__divdf3+0x758>
   1175c:	4a7fff84 	addi	r9,r9,-2
   11760:	1c07883a 	add	r3,r3,r16
   11764:	3008943a 	slli	r4,r6,16
   11768:	1f07c83a 	sub	r3,r3,fp
   1176c:	4926b03a 	or	r19,r9,r4
   11770:	993fffcc 	andi	r4,r19,65535
   11774:	980cd43a 	srli	r6,r19,16
   11778:	220b383a 	mul	r5,r4,r8
   1177c:	21c5383a 	mul	r2,r4,r7
   11780:	3211383a 	mul	r8,r6,r8
   11784:	2808d43a 	srli	r4,r5,16
   11788:	31cf383a 	mul	r7,r6,r7
   1178c:	4085883a 	add	r2,r8,r2
   11790:	1105883a 	add	r2,r2,r4
   11794:	1200022e 	bgeu	r2,r8,117a0 <__divdf3+0x580>
   11798:	01000074 	movhi	r4,1
   1179c:	390f883a 	add	r7,r7,r4
   117a0:	1008d43a 	srli	r4,r2,16
   117a4:	1004943a 	slli	r2,r2,16
   117a8:	297fffcc 	andi	r5,r5,65535
   117ac:	390f883a 	add	r7,r7,r4
   117b0:	1145883a 	add	r2,r2,r5
   117b4:	19c06536 	bltu	r3,r7,1194c <__divdf3+0x72c>
   117b8:	19c09f26 	beq	r3,r7,11a38 <__divdf3+0x818>
   117bc:	9cc00054 	ori	r19,r19,1
   117c0:	a100ffc4 	addi	r4,r20,1023
   117c4:	013f500e 	bge	zero,r4,11508 <__alt_mem_Flash_flash_data+0xf4011508>
   117c8:	988001cc 	andi	r2,r19,7
   117cc:	10000726 	beq	r2,zero,117ec <__divdf3+0x5cc>
   117d0:	98c003cc 	andi	r3,r19,15
   117d4:	00800104 	movi	r2,4
   117d8:	18800426 	beq	r3,r2,117ec <__divdf3+0x5cc>
   117dc:	9885883a 	add	r2,r19,r2
   117e0:	14e1803a 	cmpltu	r16,r2,r19
   117e4:	8c23883a 	add	r17,r17,r16
   117e8:	1027883a 	mov	r19,r2
   117ec:	8880402c 	andhi	r2,r17,256
   117f0:	10000426 	beq	r2,zero,11804 <__divdf3+0x5e4>
   117f4:	00bfc034 	movhi	r2,65280
   117f8:	10bfffc4 	addi	r2,r2,-1
   117fc:	a1010004 	addi	r4,r20,1024
   11800:	88a2703a 	and	r17,r17,r2
   11804:	0081ff84 	movi	r2,2046
   11808:	113edf16 	blt	r2,r4,11388 <__alt_mem_Flash_flash_data+0xf4011388>
   1180c:	9826d0fa 	srli	r19,r19,3
   11810:	8804977a 	slli	r2,r17,29
   11814:	8820927a 	slli	r16,r17,9
   11818:	2101ffcc 	andi	r4,r4,2047
   1181c:	14e6b03a 	or	r19,r2,r19
   11820:	800ad33a 	srli	r5,r16,12
   11824:	9180004c 	andi	r6,r18,1
   11828:	003edb06 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   1182c:	008000c4 	movi	r2,3
   11830:	4080a826 	beq	r8,r2,11ad4 <__divdf3+0x8b4>
   11834:	00800044 	movi	r2,1
   11838:	4080551e 	bne	r8,r2,11990 <__divdf3+0x770>
   1183c:	e00d883a 	mov	r6,fp
   11840:	0009883a 	mov	r4,zero
   11844:	000b883a 	mov	r5,zero
   11848:	0027883a 	mov	r19,zero
   1184c:	003ed206 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   11850:	00800434 	movhi	r2,16
   11854:	89400234 	orhi	r5,r17,8
   11858:	10bfffc4 	addi	r2,r2,-1
   1185c:	b00d883a 	mov	r6,r22
   11860:	288a703a 	and	r5,r5,r2
   11864:	003f2606 	br	11500 <__alt_mem_Flash_flash_data+0xf4011500>
   11868:	d9800315 	stw	r6,12(sp)
   1186c:	d9c00115 	stw	r7,4(sp)
   11870:	0012f200 	call	12f20 <__clzsi2>
   11874:	10c00804 	addi	r3,r2,32
   11878:	010009c4 	movi	r4,39
   1187c:	d9800317 	ldw	r6,12(sp)
   11880:	d9c00117 	ldw	r7,4(sp)
   11884:	20fee30e 	bge	r4,r3,11414 <__alt_mem_Flash_flash_data+0xf4011414>
   11888:	117ffe04 	addi	r5,r2,-8
   1188c:	9162983a 	sll	r17,r18,r5
   11890:	0027883a 	mov	r19,zero
   11894:	003ee606 	br	11430 <__alt_mem_Flash_flash_data+0xf4011430>
   11898:	3009883a 	mov	r4,r6
   1189c:	d9800315 	stw	r6,12(sp)
   118a0:	da000215 	stw	r8,8(sp)
   118a4:	da400015 	stw	r9,0(sp)
   118a8:	0012f200 	call	12f20 <__clzsi2>
   118ac:	10c00804 	addi	r3,r2,32
   118b0:	010009c4 	movi	r4,39
   118b4:	d9800317 	ldw	r6,12(sp)
   118b8:	da000217 	ldw	r8,8(sp)
   118bc:	da400017 	ldw	r9,0(sp)
   118c0:	20fef20e 	bge	r4,r3,1148c <__alt_mem_Flash_flash_data+0xf401148c>
   118c4:	10bffe04 	addi	r2,r2,-8
   118c8:	a8a0983a 	sll	r16,r21,r2
   118cc:	002b883a 	mov	r21,zero
   118d0:	003ef506 	br	114a8 <__alt_mem_Flash_flash_data+0xf40114a8>
   118d4:	354d883a 	add	r6,r6,r21
   118d8:	3549803a 	cmpltu	r4,r6,r21
   118dc:	2409883a 	add	r4,r4,r16
   118e0:	2089883a 	add	r4,r4,r2
   118e4:	88bfffc4 	addi	r2,r17,-1
   118e8:	81000c2e 	bgeu	r16,r4,1191c <__divdf3+0x6fc>
   118ec:	20c04436 	bltu	r4,r3,11a00 <__divdf3+0x7e0>
   118f0:	19006f26 	beq	r3,r4,11ab0 <__divdf3+0x890>
   118f4:	20c7c83a 	sub	r3,r4,r3
   118f8:	1023883a 	mov	r17,r2
   118fc:	003f6406 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>
   11900:	9d7f1736 	bltu	r19,r21,11560 <__alt_mem_Flash_flash_data+0xf4011560>
   11904:	9806d07a 	srli	r3,r19,1
   11908:	880497fa 	slli	r2,r17,31
   1190c:	980c97fa 	slli	r6,r19,31
   11910:	882cd07a 	srli	r22,r17,1
   11914:	18a6b03a 	or	r19,r3,r2
   11918:	003f1406 	br	1156c <__alt_mem_Flash_flash_data+0xf401156c>
   1191c:	243ff51e 	bne	r4,r16,118f4 <__alt_mem_Flash_flash_data+0xf40118f4>
   11920:	357ff22e 	bgeu	r6,r21,118ec <__alt_mem_Flash_flash_data+0xf40118ec>
   11924:	80c7c83a 	sub	r3,r16,r3
   11928:	1023883a 	mov	r17,r2
   1192c:	003f5806 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>
   11930:	1013883a 	mov	r9,r2
   11934:	003f3d06 	br	1162c <__alt_mem_Flash_flash_data+0xf401162c>
   11938:	1023883a 	mov	r17,r2
   1193c:	003f2506 	br	115d4 <__alt_mem_Flash_flash_data+0xf40115d4>
   11940:	317fe436 	bltu	r6,r5,118d4 <__alt_mem_Flash_flash_data+0xf40118d4>
   11944:	0007883a 	mov	r3,zero
   11948:	003f5106 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>
   1194c:	1c07883a 	add	r3,r3,r16
   11950:	993fffc4 	addi	r4,r19,-1
   11954:	1c000a2e 	bgeu	r3,r16,11980 <__divdf3+0x760>
   11958:	2027883a 	mov	r19,r4
   1195c:	19ff971e 	bne	r3,r7,117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11960:	a8bf961e 	bne	r21,r2,117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11964:	003f9606 	br	117c0 <__alt_mem_Flash_flash_data+0xf40117c0>
   11968:	04ffffc4 	movi	r19,-1
   1196c:	003f9406 	br	117c0 <__alt_mem_Flash_flash_data+0xf40117c0>
   11970:	100d883a 	mov	r6,r2
   11974:	003f6106 	br	116fc <__alt_mem_Flash_flash_data+0xf40116fc>
   11978:	1013883a 	mov	r9,r2
   1197c:	003f7906 	br	11764 <__alt_mem_Flash_flash_data+0xf4011764>
   11980:	19c02636 	bltu	r3,r7,11a1c <__divdf3+0x7fc>
   11984:	38c04d26 	beq	r7,r3,11abc <__divdf3+0x89c>
   11988:	2027883a 	mov	r19,r4
   1198c:	003f8b06 	br	117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11990:	e025883a 	mov	r18,fp
   11994:	003f8a06 	br	117c0 <__alt_mem_Flash_flash_data+0xf40117c0>
   11998:	008007c4 	movi	r2,31
   1199c:	14002a16 	blt	r2,r16,11a48 <__divdf3+0x828>
   119a0:	a5010784 	addi	r20,r20,1054
   119a4:	8d04983a 	sll	r2,r17,r20
   119a8:	9c06d83a 	srl	r3,r19,r16
   119ac:	9d28983a 	sll	r20,r19,r20
   119b0:	8c20d83a 	srl	r16,r17,r16
   119b4:	1886b03a 	or	r3,r3,r2
   119b8:	a004c03a 	cmpne	r2,r20,zero
   119bc:	1884b03a 	or	r2,r3,r2
   119c0:	10c001cc 	andi	r3,r2,7
   119c4:	18000726 	beq	r3,zero,119e4 <__divdf3+0x7c4>
   119c8:	110003cc 	andi	r4,r2,15
   119cc:	00c00104 	movi	r3,4
   119d0:	20c00426 	beq	r4,r3,119e4 <__divdf3+0x7c4>
   119d4:	10c00104 	addi	r3,r2,4
   119d8:	1885803a 	cmpltu	r2,r3,r2
   119dc:	80a1883a 	add	r16,r16,r2
   119e0:	1805883a 	mov	r2,r3
   119e4:	80c0202c 	andhi	r3,r16,128
   119e8:	18002d26 	beq	r3,zero,11aa0 <__divdf3+0x880>
   119ec:	9180004c 	andi	r6,r18,1
   119f0:	01000044 	movi	r4,1
   119f4:	000b883a 	mov	r5,zero
   119f8:	0027883a 	mov	r19,zero
   119fc:	003e6606 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   11a00:	354d883a 	add	r6,r6,r21
   11a04:	356d803a 	cmpltu	r22,r6,r21
   11a08:	b42d883a 	add	r22,r22,r16
   11a0c:	b12d883a 	add	r22,r22,r4
   11a10:	8c7fff84 	addi	r17,r17,-2
   11a14:	b0c7c83a 	sub	r3,r22,r3
   11a18:	003f1d06 	br	11690 <__alt_mem_Flash_flash_data+0xf4011690>
   11a1c:	ad4b883a 	add	r5,r21,r21
   11a20:	2d6b803a 	cmpltu	r21,r5,r21
   11a24:	ac2b883a 	add	r21,r21,r16
   11a28:	1d47883a 	add	r3,r3,r21
   11a2c:	993fff84 	addi	r4,r19,-2
   11a30:	282b883a 	mov	r21,r5
   11a34:	003fc806 	br	11958 <__alt_mem_Flash_flash_data+0xf4011958>
   11a38:	103fc41e 	bne	r2,zero,1194c <__alt_mem_Flash_flash_data+0xf401194c>
   11a3c:	002b883a 	mov	r21,zero
   11a40:	a8bf5e1e 	bne	r21,r2,117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11a44:	003f5e06 	br	117c0 <__alt_mem_Flash_flash_data+0xf40117c0>
   11a48:	00bef884 	movi	r2,-1054
   11a4c:	1505c83a 	sub	r2,r2,r20
   11a50:	00c00804 	movi	r3,32
   11a54:	8884d83a 	srl	r2,r17,r2
   11a58:	80c01c26 	beq	r16,r3,11acc <__divdf3+0x8ac>
   11a5c:	a0c10f84 	addi	r3,r20,1086
   11a60:	88c6983a 	sll	r3,r17,r3
   11a64:	1cc6b03a 	or	r3,r3,r19
   11a68:	1806c03a 	cmpne	r3,r3,zero
   11a6c:	1884b03a 	or	r2,r3,r2
   11a70:	140001cc 	andi	r16,r2,7
   11a74:	8000061e 	bne	r16,zero,11a90 <__divdf3+0x870>
   11a78:	000b883a 	mov	r5,zero
   11a7c:	1004d0fa 	srli	r2,r2,3
   11a80:	9180004c 	andi	r6,r18,1
   11a84:	0009883a 	mov	r4,zero
   11a88:	1426b03a 	or	r19,r2,r16
   11a8c:	003e4206 	br	11398 <__alt_mem_Flash_flash_data+0xf4011398>
   11a90:	110003cc 	andi	r4,r2,15
   11a94:	00c00104 	movi	r3,4
   11a98:	0021883a 	mov	r16,zero
   11a9c:	20ffcd1e 	bne	r4,r3,119d4 <__alt_mem_Flash_flash_data+0xf40119d4>
   11aa0:	800a927a 	slli	r5,r16,9
   11aa4:	8020977a 	slli	r16,r16,29
   11aa8:	280ad33a 	srli	r5,r5,12
   11aac:	003ff306 	br	11a7c <__alt_mem_Flash_flash_data+0xf4011a7c>
   11ab0:	317fd336 	bltu	r6,r5,11a00 <__alt_mem_Flash_flash_data+0xf4011a00>
   11ab4:	1023883a 	mov	r17,r2
   11ab8:	003fa206 	br	11944 <__alt_mem_Flash_flash_data+0xf4011944>
   11abc:	a8bfd736 	bltu	r21,r2,11a1c <__alt_mem_Flash_flash_data+0xf4011a1c>
   11ac0:	2027883a 	mov	r19,r4
   11ac4:	a8bf3d1e 	bne	r21,r2,117bc <__alt_mem_Flash_flash_data+0xf40117bc>
   11ac8:	003f3d06 	br	117c0 <__alt_mem_Flash_flash_data+0xf40117c0>
   11acc:	0007883a 	mov	r3,zero
   11ad0:	003fe406 	br	11a64 <__alt_mem_Flash_flash_data+0xf4011a64>
   11ad4:	00800434 	movhi	r2,16
   11ad8:	89400234 	orhi	r5,r17,8
   11adc:	10bfffc4 	addi	r2,r2,-1
   11ae0:	e00d883a 	mov	r6,fp
   11ae4:	288a703a 	and	r5,r5,r2
   11ae8:	003e8506 	br	11500 <__alt_mem_Flash_flash_data+0xf4011500>

00011aec <__eqdf2>:
   11aec:	2804d53a 	srli	r2,r5,20
   11af0:	3806d53a 	srli	r3,r7,20
   11af4:	02000434 	movhi	r8,16
   11af8:	423fffc4 	addi	r8,r8,-1
   11afc:	1081ffcc 	andi	r2,r2,2047
   11b00:	0241ffc4 	movi	r9,2047
   11b04:	2a14703a 	and	r10,r5,r8
   11b08:	18c1ffcc 	andi	r3,r3,2047
   11b0c:	3a10703a 	and	r8,r7,r8
   11b10:	280ad7fa 	srli	r5,r5,31
   11b14:	380ed7fa 	srli	r7,r7,31
   11b18:	12400f26 	beq	r2,r9,11b58 <__eqdf2+0x6c>
   11b1c:	0241ffc4 	movi	r9,2047
   11b20:	1a400326 	beq	r3,r9,11b30 <__eqdf2+0x44>
   11b24:	10c00526 	beq	r2,r3,11b3c <__eqdf2+0x50>
   11b28:	00800044 	movi	r2,1
   11b2c:	f800283a 	ret
   11b30:	4192b03a 	or	r9,r8,r6
   11b34:	483ffc1e 	bne	r9,zero,11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11b38:	10fffb1e 	bne	r2,r3,11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11b3c:	523ffa1e 	bne	r10,r8,11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11b40:	21bff91e 	bne	r4,r6,11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11b44:	29c00826 	beq	r5,r7,11b68 <__eqdf2+0x7c>
   11b48:	103ff71e 	bne	r2,zero,11b28 <__alt_mem_Flash_flash_data+0xf4011b28>
   11b4c:	5104b03a 	or	r2,r10,r4
   11b50:	1004c03a 	cmpne	r2,r2,zero
   11b54:	f800283a 	ret
   11b58:	5112b03a 	or	r9,r10,r4
   11b5c:	483fef26 	beq	r9,zero,11b1c <__alt_mem_Flash_flash_data+0xf4011b1c>
   11b60:	00800044 	movi	r2,1
   11b64:	f800283a 	ret
   11b68:	0005883a 	mov	r2,zero
   11b6c:	f800283a 	ret

00011b70 <__gedf2>:
   11b70:	2804d53a 	srli	r2,r5,20
   11b74:	3806d53a 	srli	r3,r7,20
   11b78:	02000434 	movhi	r8,16
   11b7c:	423fffc4 	addi	r8,r8,-1
   11b80:	0241ffc4 	movi	r9,2047
   11b84:	1081ffcc 	andi	r2,r2,2047
   11b88:	2a14703a 	and	r10,r5,r8
   11b8c:	1a46703a 	and	r3,r3,r9
   11b90:	3a10703a 	and	r8,r7,r8
   11b94:	280ad7fa 	srli	r5,r5,31
   11b98:	380ed7fa 	srli	r7,r7,31
   11b9c:	12400b26 	beq	r2,r9,11bcc <__gedf2+0x5c>
   11ba0:	1a401626 	beq	r3,r9,11bfc <__gedf2+0x8c>
   11ba4:	10000c1e 	bne	r2,zero,11bd8 <__gedf2+0x68>
   11ba8:	5112b03a 	or	r9,r10,r4
   11bac:	4813003a 	cmpeq	r9,r9,zero
   11bb0:	4817883a 	mov	r11,r9
   11bb4:	18000c1e 	bne	r3,zero,11be8 <__gedf2+0x78>
   11bb8:	4198b03a 	or	r12,r8,r6
   11bbc:	60000a1e 	bne	r12,zero,11be8 <__gedf2+0x78>
   11bc0:	48001326 	beq	r9,zero,11c10 <__gedf2+0xa0>
   11bc4:	0005883a 	mov	r2,zero
   11bc8:	f800283a 	ret
   11bcc:	5112b03a 	or	r9,r10,r4
   11bd0:	4800191e 	bne	r9,zero,11c38 <__gedf2+0xc8>
   11bd4:	18800926 	beq	r3,r2,11bfc <__gedf2+0x8c>
   11bd8:	18000b1e 	bne	r3,zero,11c08 <__gedf2+0x98>
   11bdc:	4192b03a 	or	r9,r8,r6
   11be0:	0017883a 	mov	r11,zero
   11be4:	48000a26 	beq	r9,zero,11c10 <__gedf2+0xa0>
   11be8:	39c03fcc 	andi	r7,r7,255
   11bec:	58000726 	beq	r11,zero,11c0c <__gedf2+0x9c>
   11bf0:	3800081e 	bne	r7,zero,11c14 <__gedf2+0xa4>
   11bf4:	00bfffc4 	movi	r2,-1
   11bf8:	f800283a 	ret
   11bfc:	4192b03a 	or	r9,r8,r6
   11c00:	48000d1e 	bne	r9,zero,11c38 <__gedf2+0xc8>
   11c04:	103fe826 	beq	r2,zero,11ba8 <__alt_mem_Flash_flash_data+0xf4011ba8>
   11c08:	39c03fcc 	andi	r7,r7,255
   11c0c:	29c00326 	beq	r5,r7,11c1c <__gedf2+0xac>
   11c10:	283ff81e 	bne	r5,zero,11bf4 <__alt_mem_Flash_flash_data+0xf4011bf4>
   11c14:	00800044 	movi	r2,1
   11c18:	f800283a 	ret
   11c1c:	18bffc16 	blt	r3,r2,11c10 <__alt_mem_Flash_flash_data+0xf4011c10>
   11c20:	10c00316 	blt	r2,r3,11c30 <__gedf2+0xc0>
   11c24:	42bffa36 	bltu	r8,r10,11c10 <__alt_mem_Flash_flash_data+0xf4011c10>
   11c28:	52000526 	beq	r10,r8,11c40 <__gedf2+0xd0>
   11c2c:	523fe52e 	bgeu	r10,r8,11bc4 <__alt_mem_Flash_flash_data+0xf4011bc4>
   11c30:	283ff026 	beq	r5,zero,11bf4 <__alt_mem_Flash_flash_data+0xf4011bf4>
   11c34:	003ff706 	br	11c14 <__alt_mem_Flash_flash_data+0xf4011c14>
   11c38:	00bfff84 	movi	r2,-2
   11c3c:	f800283a 	ret
   11c40:	313ff336 	bltu	r6,r4,11c10 <__alt_mem_Flash_flash_data+0xf4011c10>
   11c44:	21bfdf2e 	bgeu	r4,r6,11bc4 <__alt_mem_Flash_flash_data+0xf4011bc4>
   11c48:	283fea26 	beq	r5,zero,11bf4 <__alt_mem_Flash_flash_data+0xf4011bf4>
   11c4c:	003ff106 	br	11c14 <__alt_mem_Flash_flash_data+0xf4011c14>

00011c50 <__ledf2>:
   11c50:	2804d53a 	srli	r2,r5,20
   11c54:	3810d53a 	srli	r8,r7,20
   11c58:	00c00434 	movhi	r3,16
   11c5c:	18ffffc4 	addi	r3,r3,-1
   11c60:	0241ffc4 	movi	r9,2047
   11c64:	1081ffcc 	andi	r2,r2,2047
   11c68:	28d4703a 	and	r10,r5,r3
   11c6c:	4250703a 	and	r8,r8,r9
   11c70:	38c6703a 	and	r3,r7,r3
   11c74:	280ad7fa 	srli	r5,r5,31
   11c78:	380ed7fa 	srli	r7,r7,31
   11c7c:	12400b26 	beq	r2,r9,11cac <__ledf2+0x5c>
   11c80:	42401926 	beq	r8,r9,11ce8 <__ledf2+0x98>
   11c84:	10000c1e 	bne	r2,zero,11cb8 <__ledf2+0x68>
   11c88:	5112b03a 	or	r9,r10,r4
   11c8c:	4813003a 	cmpeq	r9,r9,zero
   11c90:	4817883a 	mov	r11,r9
   11c94:	40000f26 	beq	r8,zero,11cd4 <__ledf2+0x84>
   11c98:	39c03fcc 	andi	r7,r7,255
   11c9c:	58001826 	beq	r11,zero,11d00 <__ledf2+0xb0>
   11ca0:	38000a1e 	bne	r7,zero,11ccc <__ledf2+0x7c>
   11ca4:	00bfffc4 	movi	r2,-1
   11ca8:	f800283a 	ret
   11cac:	5112b03a 	or	r9,r10,r4
   11cb0:	48000f1e 	bne	r9,zero,11cf0 <__ledf2+0xa0>
   11cb4:	40800c26 	beq	r8,r2,11ce8 <__ledf2+0x98>
   11cb8:	4000101e 	bne	r8,zero,11cfc <__ledf2+0xac>
   11cbc:	1992b03a 	or	r9,r3,r6
   11cc0:	0017883a 	mov	r11,zero
   11cc4:	483ff41e 	bne	r9,zero,11c98 <__alt_mem_Flash_flash_data+0xf4011c98>
   11cc8:	283ff61e 	bne	r5,zero,11ca4 <__alt_mem_Flash_flash_data+0xf4011ca4>
   11ccc:	00800044 	movi	r2,1
   11cd0:	f800283a 	ret
   11cd4:	1998b03a 	or	r12,r3,r6
   11cd8:	603fef1e 	bne	r12,zero,11c98 <__alt_mem_Flash_flash_data+0xf4011c98>
   11cdc:	483ffa26 	beq	r9,zero,11cc8 <__alt_mem_Flash_flash_data+0xf4011cc8>
   11ce0:	0005883a 	mov	r2,zero
   11ce4:	f800283a 	ret
   11ce8:	1992b03a 	or	r9,r3,r6
   11cec:	48000226 	beq	r9,zero,11cf8 <__ledf2+0xa8>
   11cf0:	00800084 	movi	r2,2
   11cf4:	f800283a 	ret
   11cf8:	103fe326 	beq	r2,zero,11c88 <__alt_mem_Flash_flash_data+0xf4011c88>
   11cfc:	39c03fcc 	andi	r7,r7,255
   11d00:	29fff11e 	bne	r5,r7,11cc8 <__alt_mem_Flash_flash_data+0xf4011cc8>
   11d04:	40bff016 	blt	r8,r2,11cc8 <__alt_mem_Flash_flash_data+0xf4011cc8>
   11d08:	12000316 	blt	r2,r8,11d18 <__ledf2+0xc8>
   11d0c:	1abfee36 	bltu	r3,r10,11cc8 <__alt_mem_Flash_flash_data+0xf4011cc8>
   11d10:	50c00326 	beq	r10,r3,11d20 <__ledf2+0xd0>
   11d14:	50fff22e 	bgeu	r10,r3,11ce0 <__alt_mem_Flash_flash_data+0xf4011ce0>
   11d18:	283fe226 	beq	r5,zero,11ca4 <__alt_mem_Flash_flash_data+0xf4011ca4>
   11d1c:	003feb06 	br	11ccc <__alt_mem_Flash_flash_data+0xf4011ccc>
   11d20:	313fe936 	bltu	r6,r4,11cc8 <__alt_mem_Flash_flash_data+0xf4011cc8>
   11d24:	21bfee2e 	bgeu	r4,r6,11ce0 <__alt_mem_Flash_flash_data+0xf4011ce0>
   11d28:	283fde26 	beq	r5,zero,11ca4 <__alt_mem_Flash_flash_data+0xf4011ca4>
   11d2c:	003fe706 	br	11ccc <__alt_mem_Flash_flash_data+0xf4011ccc>

00011d30 <__muldf3>:
   11d30:	defff204 	addi	sp,sp,-56
   11d34:	2804d53a 	srli	r2,r5,20
   11d38:	dd800a15 	stw	r22,40(sp)
   11d3c:	282cd7fa 	srli	r22,r5,31
   11d40:	dc000415 	stw	r16,16(sp)
   11d44:	04000434 	movhi	r16,16
   11d48:	df000c15 	stw	fp,48(sp)
   11d4c:	dd000815 	stw	r20,32(sp)
   11d50:	dcc00715 	stw	r19,28(sp)
   11d54:	dc800615 	stw	r18,24(sp)
   11d58:	dc400515 	stw	r17,20(sp)
   11d5c:	843fffc4 	addi	r16,r16,-1
   11d60:	dfc00d15 	stw	ra,52(sp)
   11d64:	ddc00b15 	stw	r23,44(sp)
   11d68:	dd400915 	stw	r21,36(sp)
   11d6c:	1501ffcc 	andi	r20,r2,2047
   11d70:	2023883a 	mov	r17,r4
   11d74:	2025883a 	mov	r18,r4
   11d78:	2c20703a 	and	r16,r5,r16
   11d7c:	b027883a 	mov	r19,r22
   11d80:	b7003fcc 	andi	fp,r22,255
   11d84:	a0005926 	beq	r20,zero,11eec <__muldf3+0x1bc>
   11d88:	0081ffc4 	movi	r2,2047
   11d8c:	a0803426 	beq	r20,r2,11e60 <__muldf3+0x130>
   11d90:	84000434 	orhi	r16,r16,16
   11d94:	2004d77a 	srli	r2,r4,29
   11d98:	802090fa 	slli	r16,r16,3
   11d9c:	202490fa 	slli	r18,r4,3
   11da0:	a53f0044 	addi	r20,r20,-1023
   11da4:	80a0b03a 	or	r16,r16,r2
   11da8:	002b883a 	mov	r21,zero
   11dac:	0015883a 	mov	r10,zero
   11db0:	3812d53a 	srli	r9,r7,20
   11db4:	3806d7fa 	srli	r3,r7,31
   11db8:	02000434 	movhi	r8,16
   11dbc:	423fffc4 	addi	r8,r8,-1
   11dc0:	4941ffcc 	andi	r5,r9,2047
   11dc4:	302f883a 	mov	r23,r6
   11dc8:	3a22703a 	and	r17,r7,r8
   11dcc:	1ac03fcc 	andi	r11,r3,255
   11dd0:	28006226 	beq	r5,zero,11f5c <__muldf3+0x22c>
   11dd4:	0081ffc4 	movi	r2,2047
   11dd8:	28805a26 	beq	r5,r2,11f44 <__muldf3+0x214>
   11ddc:	8a000434 	orhi	r8,r17,16
   11de0:	3004d77a 	srli	r2,r6,29
   11de4:	401090fa 	slli	r8,r8,3
   11de8:	302e90fa 	slli	r23,r6,3
   11dec:	297f0044 	addi	r5,r5,-1023
   11df0:	40a2b03a 	or	r17,r8,r2
   11df4:	0013883a 	mov	r9,zero
   11df8:	4d4cb03a 	or	r6,r9,r21
   11dfc:	300c90ba 	slli	r6,r6,2
   11e00:	02000074 	movhi	r8,1
   11e04:	42078804 	addi	r8,r8,7712
   11e08:	320d883a 	add	r6,r6,r8
   11e0c:	31800017 	ldw	r6,0(r6)
   11e10:	a14b883a 	add	r5,r20,r5
   11e14:	1dacf03a 	xor	r22,r3,r22
   11e18:	2b000044 	addi	r12,r5,1
   11e1c:	3000683a 	jmp	r6
   11e20:	0001205c 	xori	zero,zero,1153
   11e24:	00012048 	cmpgei	zero,zero,1153
   11e28:	00012048 	cmpgei	zero,zero,1153
   11e2c:	00012034 	movhi	zero,1152
   11e30:	00011e7c 	xorhi	zero,zero,1145
   11e34:	00011e7c 	xorhi	zero,zero,1145
   11e38:	0001201c 	xori	zero,zero,1152
   11e3c:	00012034 	movhi	zero,1152
   11e40:	00011e7c 	xorhi	zero,zero,1145
   11e44:	0001201c 	xori	zero,zero,1152
   11e48:	00011e7c 	xorhi	zero,zero,1145
   11e4c:	00012034 	movhi	zero,1152
   11e50:	00011e80 	call	11e8 <endSingleplayer+0x178>
   11e54:	00011e80 	call	11e8 <endSingleplayer+0x178>
   11e58:	00011e80 	call	11e8 <endSingleplayer+0x178>
   11e5c:	00012258 	cmpnei	zero,zero,1161
   11e60:	8104b03a 	or	r2,r16,r4
   11e64:	10006a1e 	bne	r2,zero,12010 <__muldf3+0x2e0>
   11e68:	05400204 	movi	r21,8
   11e6c:	0021883a 	mov	r16,zero
   11e70:	0025883a 	mov	r18,zero
   11e74:	02800084 	movi	r10,2
   11e78:	003fcd06 	br	11db0 <__alt_mem_Flash_flash_data+0xf4011db0>
   11e7c:	b039883a 	mov	fp,r22
   11e80:	00800084 	movi	r2,2
   11e84:	50804e1e 	bne	r10,r2,11fc0 <__muldf3+0x290>
   11e88:	e4c0004c 	andi	r19,fp,1
   11e8c:	0101ffc4 	movi	r4,2047
   11e90:	0021883a 	mov	r16,zero
   11e94:	0025883a 	mov	r18,zero
   11e98:	2008953a 	slli	r4,r4,20
   11e9c:	98c03fcc 	andi	r3,r19,255
   11ea0:	01400434 	movhi	r5,16
   11ea4:	297fffc4 	addi	r5,r5,-1
   11ea8:	180697fa 	slli	r3,r3,31
   11eac:	8160703a 	and	r16,r16,r5
   11eb0:	8120b03a 	or	r16,r16,r4
   11eb4:	80c6b03a 	or	r3,r16,r3
   11eb8:	9005883a 	mov	r2,r18
   11ebc:	dfc00d17 	ldw	ra,52(sp)
   11ec0:	df000c17 	ldw	fp,48(sp)
   11ec4:	ddc00b17 	ldw	r23,44(sp)
   11ec8:	dd800a17 	ldw	r22,40(sp)
   11ecc:	dd400917 	ldw	r21,36(sp)
   11ed0:	dd000817 	ldw	r20,32(sp)
   11ed4:	dcc00717 	ldw	r19,28(sp)
   11ed8:	dc800617 	ldw	r18,24(sp)
   11edc:	dc400517 	ldw	r17,20(sp)
   11ee0:	dc000417 	ldw	r16,16(sp)
   11ee4:	dec00e04 	addi	sp,sp,56
   11ee8:	f800283a 	ret
   11eec:	8104b03a 	or	r2,r16,r4
   11ef0:	10004226 	beq	r2,zero,11ffc <__muldf3+0x2cc>
   11ef4:	8000f926 	beq	r16,zero,122dc <__muldf3+0x5ac>
   11ef8:	8009883a 	mov	r4,r16
   11efc:	d9800315 	stw	r6,12(sp)
   11f00:	d9c00015 	stw	r7,0(sp)
   11f04:	0012f200 	call	12f20 <__clzsi2>
   11f08:	d9800317 	ldw	r6,12(sp)
   11f0c:	d9c00017 	ldw	r7,0(sp)
   11f10:	1007883a 	mov	r3,r2
   11f14:	01000a04 	movi	r4,40
   11f18:	18bffe04 	addi	r2,r3,-8
   11f1c:	20c9c83a 	sub	r4,r4,r3
   11f20:	80a0983a 	sll	r16,r16,r2
   11f24:	8908d83a 	srl	r4,r17,r4
   11f28:	88a4983a 	sll	r18,r17,r2
   11f2c:	2420b03a 	or	r16,r4,r16
   11f30:	017f0344 	movi	r5,-1011
   11f34:	28e9c83a 	sub	r20,r5,r3
   11f38:	002b883a 	mov	r21,zero
   11f3c:	0015883a 	mov	r10,zero
   11f40:	003f9b06 	br	11db0 <__alt_mem_Flash_flash_data+0xf4011db0>
   11f44:	8984b03a 	or	r2,r17,r6
   11f48:	10002a1e 	bne	r2,zero,11ff4 <__muldf3+0x2c4>
   11f4c:	0023883a 	mov	r17,zero
   11f50:	002f883a 	mov	r23,zero
   11f54:	02400084 	movi	r9,2
   11f58:	003fa706 	br	11df8 <__alt_mem_Flash_flash_data+0xf4011df8>
   11f5c:	8984b03a 	or	r2,r17,r6
   11f60:	10002026 	beq	r2,zero,11fe4 <__muldf3+0x2b4>
   11f64:	8800cc26 	beq	r17,zero,12298 <__muldf3+0x568>
   11f68:	8809883a 	mov	r4,r17
   11f6c:	d8c00215 	stw	r3,8(sp)
   11f70:	d9800315 	stw	r6,12(sp)
   11f74:	da800015 	stw	r10,0(sp)
   11f78:	dac00115 	stw	r11,4(sp)
   11f7c:	0012f200 	call	12f20 <__clzsi2>
   11f80:	d8c00217 	ldw	r3,8(sp)
   11f84:	d9800317 	ldw	r6,12(sp)
   11f88:	da800017 	ldw	r10,0(sp)
   11f8c:	dac00117 	ldw	r11,4(sp)
   11f90:	1009883a 	mov	r4,r2
   11f94:	01400a04 	movi	r5,40
   11f98:	25fffe04 	addi	r23,r4,-8
   11f9c:	290bc83a 	sub	r5,r5,r4
   11fa0:	8dd0983a 	sll	r8,r17,r23
   11fa4:	314ad83a 	srl	r5,r6,r5
   11fa8:	35ee983a 	sll	r23,r6,r23
   11fac:	2a22b03a 	or	r17,r5,r8
   11fb0:	017f0344 	movi	r5,-1011
   11fb4:	290bc83a 	sub	r5,r5,r4
   11fb8:	0013883a 	mov	r9,zero
   11fbc:	003f8e06 	br	11df8 <__alt_mem_Flash_flash_data+0xf4011df8>
   11fc0:	008000c4 	movi	r2,3
   11fc4:	50811d26 	beq	r10,r2,1243c <__muldf3+0x70c>
   11fc8:	00800044 	movi	r2,1
   11fcc:	5080e01e 	bne	r10,r2,12350 <__muldf3+0x620>
   11fd0:	e0a6703a 	and	r19,fp,r2
   11fd4:	0009883a 	mov	r4,zero
   11fd8:	0021883a 	mov	r16,zero
   11fdc:	0025883a 	mov	r18,zero
   11fe0:	003fad06 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   11fe4:	0023883a 	mov	r17,zero
   11fe8:	002f883a 	mov	r23,zero
   11fec:	02400044 	movi	r9,1
   11ff0:	003f8106 	br	11df8 <__alt_mem_Flash_flash_data+0xf4011df8>
   11ff4:	024000c4 	movi	r9,3
   11ff8:	003f7f06 	br	11df8 <__alt_mem_Flash_flash_data+0xf4011df8>
   11ffc:	05400104 	movi	r21,4
   12000:	0021883a 	mov	r16,zero
   12004:	0025883a 	mov	r18,zero
   12008:	02800044 	movi	r10,1
   1200c:	003f6806 	br	11db0 <__alt_mem_Flash_flash_data+0xf4011db0>
   12010:	05400304 	movi	r21,12
   12014:	028000c4 	movi	r10,3
   12018:	003f6506 	br	11db0 <__alt_mem_Flash_flash_data+0xf4011db0>
   1201c:	04000434 	movhi	r16,16
   12020:	0027883a 	mov	r19,zero
   12024:	843fffc4 	addi	r16,r16,-1
   12028:	04bfffc4 	movi	r18,-1
   1202c:	0101ffc4 	movi	r4,2047
   12030:	003f9906 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   12034:	8821883a 	mov	r16,r17
   12038:	b825883a 	mov	r18,r23
   1203c:	5839883a 	mov	fp,r11
   12040:	4815883a 	mov	r10,r9
   12044:	003f8e06 	br	11e80 <__alt_mem_Flash_flash_data+0xf4011e80>
   12048:	8821883a 	mov	r16,r17
   1204c:	b825883a 	mov	r18,r23
   12050:	b039883a 	mov	fp,r22
   12054:	4815883a 	mov	r10,r9
   12058:	003f8906 	br	11e80 <__alt_mem_Flash_flash_data+0xf4011e80>
   1205c:	b80cd43a 	srli	r6,r23,16
   12060:	9006d43a 	srli	r3,r18,16
   12064:	90bfffcc 	andi	r2,r18,65535
   12068:	bdffffcc 	andi	r23,r23,65535
   1206c:	b891383a 	mul	r8,r23,r2
   12070:	b8c9383a 	mul	r4,r23,r3
   12074:	309b383a 	mul	r13,r6,r2
   12078:	400ed43a 	srli	r7,r8,16
   1207c:	30df383a 	mul	r15,r6,r3
   12080:	235b883a 	add	r13,r4,r13
   12084:	69db883a 	add	r13,r13,r7
   12088:	6900022e 	bgeu	r13,r4,12094 <__muldf3+0x364>
   1208c:	01000074 	movhi	r4,1
   12090:	791f883a 	add	r15,r15,r4
   12094:	8828d43a 	srli	r20,r17,16
   12098:	8c7fffcc 	andi	r17,r17,65535
   1209c:	888f383a 	mul	r7,r17,r2
   120a0:	88d3383a 	mul	r9,r17,r3
   120a4:	a0a5383a 	mul	r18,r20,r2
   120a8:	3816d43a 	srli	r11,r7,16
   120ac:	6814943a 	slli	r10,r13,16
   120b0:	4ca5883a 	add	r18,r9,r18
   120b4:	423fffcc 	andi	r8,r8,65535
   120b8:	92e5883a 	add	r18,r18,r11
   120bc:	6808d43a 	srli	r4,r13,16
   120c0:	5215883a 	add	r10,r10,r8
   120c4:	a0c7383a 	mul	r3,r20,r3
   120c8:	9240022e 	bgeu	r18,r9,120d4 <__muldf3+0x3a4>
   120cc:	00800074 	movhi	r2,1
   120d0:	1887883a 	add	r3,r3,r2
   120d4:	802ad43a 	srli	r21,r16,16
   120d8:	80bfffcc 	andi	r2,r16,65535
   120dc:	b893383a 	mul	r9,r23,r2
   120e0:	3091383a 	mul	r8,r6,r2
   120e4:	bd6f383a 	mul	r23,r23,r21
   120e8:	9026943a 	slli	r19,r18,16
   120ec:	481ad43a 	srli	r13,r9,16
   120f0:	9024d43a 	srli	r18,r18,16
   120f4:	39ffffcc 	andi	r7,r7,65535
   120f8:	ba11883a 	add	r8,r23,r8
   120fc:	99e7883a 	add	r19,r19,r7
   12100:	4351883a 	add	r8,r8,r13
   12104:	1c97883a 	add	r11,r3,r18
   12108:	354d383a 	mul	r6,r6,r21
   1210c:	9925883a 	add	r18,r19,r4
   12110:	45c0022e 	bgeu	r8,r23,1211c <__muldf3+0x3ec>
   12114:	00c00074 	movhi	r3,1
   12118:	30cd883a 	add	r6,r6,r3
   1211c:	8889383a 	mul	r4,r17,r2
   12120:	8d63383a 	mul	r17,r17,r21
   12124:	a085383a 	mul	r2,r20,r2
   12128:	200ed43a 	srli	r7,r4,16
   1212c:	401cd43a 	srli	r14,r8,16
   12130:	401a943a 	slli	r13,r8,16
   12134:	8885883a 	add	r2,r17,r2
   12138:	4a3fffcc 	andi	r8,r9,65535
   1213c:	11c5883a 	add	r2,r2,r7
   12140:	339d883a 	add	r14,r6,r14
   12144:	6a11883a 	add	r8,r13,r8
   12148:	a561383a 	mul	r16,r20,r21
   1214c:	1440022e 	bgeu	r2,r17,12158 <__muldf3+0x428>
   12150:	00c00074 	movhi	r3,1
   12154:	80e1883a 	add	r16,r16,r3
   12158:	1006943a 	slli	r3,r2,16
   1215c:	213fffcc 	andi	r4,r4,65535
   12160:	93db883a 	add	r13,r18,r15
   12164:	1909883a 	add	r4,r3,r4
   12168:	22c7883a 	add	r3,r4,r11
   1216c:	6cd3803a 	cmpltu	r9,r13,r19
   12170:	6a09883a 	add	r4,r13,r8
   12174:	1a5b883a 	add	r13,r3,r9
   12178:	2211803a 	cmpltu	r8,r4,r8
   1217c:	734d883a 	add	r6,r14,r13
   12180:	100ed43a 	srli	r7,r2,16
   12184:	6a53803a 	cmpltu	r9,r13,r9
   12188:	3205883a 	add	r2,r6,r8
   1218c:	1ac7803a 	cmpltu	r3,r3,r11
   12190:	1211803a 	cmpltu	r8,r2,r8
   12194:	48c6b03a 	or	r3,r9,r3
   12198:	338d803a 	cmpltu	r6,r6,r14
   1219c:	19c7883a 	add	r3,r3,r7
   121a0:	418cb03a 	or	r6,r8,r6
   121a4:	1987883a 	add	r3,r3,r6
   121a8:	2024927a 	slli	r18,r4,9
   121ac:	1c07883a 	add	r3,r3,r16
   121b0:	1806927a 	slli	r3,r3,9
   121b4:	1020d5fa 	srli	r16,r2,23
   121b8:	2008d5fa 	srli	r4,r4,23
   121bc:	9294b03a 	or	r10,r18,r10
   121c0:	1004927a 	slli	r2,r2,9
   121c4:	5024c03a 	cmpne	r18,r10,zero
   121c8:	1c20b03a 	or	r16,r3,r16
   121cc:	9108b03a 	or	r4,r18,r4
   121d0:	80c0402c 	andhi	r3,r16,256
   121d4:	20a4b03a 	or	r18,r4,r2
   121d8:	18000726 	beq	r3,zero,121f8 <__muldf3+0x4c8>
   121dc:	9006d07a 	srli	r3,r18,1
   121e0:	800897fa 	slli	r4,r16,31
   121e4:	9080004c 	andi	r2,r18,1
   121e8:	8020d07a 	srli	r16,r16,1
   121ec:	10c4b03a 	or	r2,r2,r3
   121f0:	1124b03a 	or	r18,r2,r4
   121f4:	600b883a 	mov	r5,r12
   121f8:	2900ffc4 	addi	r4,r5,1023
   121fc:	01004b0e 	bge	zero,r4,1232c <__muldf3+0x5fc>
   12200:	908001cc 	andi	r2,r18,7
   12204:	10000726 	beq	r2,zero,12224 <__muldf3+0x4f4>
   12208:	90c003cc 	andi	r3,r18,15
   1220c:	00800104 	movi	r2,4
   12210:	18800426 	beq	r3,r2,12224 <__muldf3+0x4f4>
   12214:	9087883a 	add	r3,r18,r2
   12218:	1c85803a 	cmpltu	r2,r3,r18
   1221c:	80a1883a 	add	r16,r16,r2
   12220:	1825883a 	mov	r18,r3
   12224:	8080402c 	andhi	r2,r16,256
   12228:	10000426 	beq	r2,zero,1223c <__muldf3+0x50c>
   1222c:	00bfc034 	movhi	r2,65280
   12230:	10bfffc4 	addi	r2,r2,-1
   12234:	29010004 	addi	r4,r5,1024
   12238:	80a0703a 	and	r16,r16,r2
   1223c:	0081ff84 	movi	r2,2046
   12240:	1100320e 	bge	r2,r4,1230c <__muldf3+0x5dc>
   12244:	b4c0004c 	andi	r19,r22,1
   12248:	0101ffc4 	movi	r4,2047
   1224c:	0021883a 	mov	r16,zero
   12250:	0025883a 	mov	r18,zero
   12254:	003f1006 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   12258:	8080022c 	andhi	r2,r16,8
   1225c:	10000926 	beq	r2,zero,12284 <__muldf3+0x554>
   12260:	8880022c 	andhi	r2,r17,8
   12264:	1000071e 	bne	r2,zero,12284 <__muldf3+0x554>
   12268:	00800434 	movhi	r2,16
   1226c:	8c000234 	orhi	r16,r17,8
   12270:	10bfffc4 	addi	r2,r2,-1
   12274:	1827883a 	mov	r19,r3
   12278:	80a0703a 	and	r16,r16,r2
   1227c:	b825883a 	mov	r18,r23
   12280:	003f6a06 	br	1202c <__alt_mem_Flash_flash_data+0xf401202c>
   12284:	00800434 	movhi	r2,16
   12288:	84000234 	orhi	r16,r16,8
   1228c:	10bfffc4 	addi	r2,r2,-1
   12290:	80a0703a 	and	r16,r16,r2
   12294:	003f6506 	br	1202c <__alt_mem_Flash_flash_data+0xf401202c>
   12298:	3009883a 	mov	r4,r6
   1229c:	d8c00215 	stw	r3,8(sp)
   122a0:	d9800315 	stw	r6,12(sp)
   122a4:	da800015 	stw	r10,0(sp)
   122a8:	dac00115 	stw	r11,4(sp)
   122ac:	0012f200 	call	12f20 <__clzsi2>
   122b0:	11000804 	addi	r4,r2,32
   122b4:	014009c4 	movi	r5,39
   122b8:	d8c00217 	ldw	r3,8(sp)
   122bc:	d9800317 	ldw	r6,12(sp)
   122c0:	da800017 	ldw	r10,0(sp)
   122c4:	dac00117 	ldw	r11,4(sp)
   122c8:	293f320e 	bge	r5,r4,11f94 <__alt_mem_Flash_flash_data+0xf4011f94>
   122cc:	10bffe04 	addi	r2,r2,-8
   122d0:	b8a2983a 	sll	r17,r23,r2
   122d4:	002f883a 	mov	r23,zero
   122d8:	003f3506 	br	11fb0 <__alt_mem_Flash_flash_data+0xf4011fb0>
   122dc:	d9800315 	stw	r6,12(sp)
   122e0:	d9c00015 	stw	r7,0(sp)
   122e4:	0012f200 	call	12f20 <__clzsi2>
   122e8:	10c00804 	addi	r3,r2,32
   122ec:	010009c4 	movi	r4,39
   122f0:	d9800317 	ldw	r6,12(sp)
   122f4:	d9c00017 	ldw	r7,0(sp)
   122f8:	20ff060e 	bge	r4,r3,11f14 <__alt_mem_Flash_flash_data+0xf4011f14>
   122fc:	10bffe04 	addi	r2,r2,-8
   12300:	88a0983a 	sll	r16,r17,r2
   12304:	0025883a 	mov	r18,zero
   12308:	003f0906 	br	11f30 <__alt_mem_Flash_flash_data+0xf4011f30>
   1230c:	9004d0fa 	srli	r2,r18,3
   12310:	8024977a 	slli	r18,r16,29
   12314:	8020927a 	slli	r16,r16,9
   12318:	2101ffcc 	andi	r4,r4,2047
   1231c:	90a4b03a 	or	r18,r18,r2
   12320:	8020d33a 	srli	r16,r16,12
   12324:	b4c0004c 	andi	r19,r22,1
   12328:	003edb06 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   1232c:	00ff0084 	movi	r3,-1022
   12330:	1947c83a 	sub	r3,r3,r5
   12334:	00800e04 	movi	r2,56
   12338:	10c0080e 	bge	r2,r3,1235c <__muldf3+0x62c>
   1233c:	b4c0004c 	andi	r19,r22,1
   12340:	0009883a 	mov	r4,zero
   12344:	0021883a 	mov	r16,zero
   12348:	0025883a 	mov	r18,zero
   1234c:	003ed206 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   12350:	600b883a 	mov	r5,r12
   12354:	e02d883a 	mov	r22,fp
   12358:	003fa706 	br	121f8 <__alt_mem_Flash_flash_data+0xf40121f8>
   1235c:	008007c4 	movi	r2,31
   12360:	10c01816 	blt	r2,r3,123c4 <__muldf3+0x694>
   12364:	29410784 	addi	r5,r5,1054
   12368:	8144983a 	sll	r2,r16,r5
   1236c:	90c8d83a 	srl	r4,r18,r3
   12370:	914a983a 	sll	r5,r18,r5
   12374:	80c6d83a 	srl	r3,r16,r3
   12378:	2088b03a 	or	r4,r4,r2
   1237c:	2804c03a 	cmpne	r2,r5,zero
   12380:	2084b03a 	or	r2,r4,r2
   12384:	110001cc 	andi	r4,r2,7
   12388:	20000726 	beq	r4,zero,123a8 <__muldf3+0x678>
   1238c:	114003cc 	andi	r5,r2,15
   12390:	01000104 	movi	r4,4
   12394:	29000426 	beq	r5,r4,123a8 <__muldf3+0x678>
   12398:	11000104 	addi	r4,r2,4
   1239c:	2085803a 	cmpltu	r2,r4,r2
   123a0:	1887883a 	add	r3,r3,r2
   123a4:	2005883a 	mov	r2,r4
   123a8:	1900202c 	andhi	r4,r3,128
   123ac:	20001826 	beq	r4,zero,12410 <__muldf3+0x6e0>
   123b0:	b4c0004c 	andi	r19,r22,1
   123b4:	01000044 	movi	r4,1
   123b8:	0021883a 	mov	r16,zero
   123bc:	0025883a 	mov	r18,zero
   123c0:	003eb506 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   123c4:	00bef884 	movi	r2,-1054
   123c8:	1145c83a 	sub	r2,r2,r5
   123cc:	8088d83a 	srl	r4,r16,r2
   123d0:	00800804 	movi	r2,32
   123d4:	18801726 	beq	r3,r2,12434 <__muldf3+0x704>
   123d8:	28810f84 	addi	r2,r5,1086
   123dc:	8084983a 	sll	r2,r16,r2
   123e0:	1484b03a 	or	r2,r2,r18
   123e4:	1004c03a 	cmpne	r2,r2,zero
   123e8:	1104b03a 	or	r2,r2,r4
   123ec:	10c001cc 	andi	r3,r2,7
   123f0:	18000b1e 	bne	r3,zero,12420 <__muldf3+0x6f0>
   123f4:	0021883a 	mov	r16,zero
   123f8:	1004d0fa 	srli	r2,r2,3
   123fc:	b4c0004c 	andi	r19,r22,1
   12400:	0009883a 	mov	r4,zero
   12404:	10e4b03a 	or	r18,r2,r3
   12408:	003ea306 	br	11e98 <__alt_mem_Flash_flash_data+0xf4011e98>
   1240c:	0007883a 	mov	r3,zero
   12410:	1820927a 	slli	r16,r3,9
   12414:	1806977a 	slli	r3,r3,29
   12418:	8020d33a 	srli	r16,r16,12
   1241c:	003ff606 	br	123f8 <__alt_mem_Flash_flash_data+0xf40123f8>
   12420:	110003cc 	andi	r4,r2,15
   12424:	00c00104 	movi	r3,4
   12428:	20fff826 	beq	r4,r3,1240c <__alt_mem_Flash_flash_data+0xf401240c>
   1242c:	0007883a 	mov	r3,zero
   12430:	003fd906 	br	12398 <__alt_mem_Flash_flash_data+0xf4012398>
   12434:	0005883a 	mov	r2,zero
   12438:	003fe906 	br	123e0 <__alt_mem_Flash_flash_data+0xf40123e0>
   1243c:	00800434 	movhi	r2,16
   12440:	84000234 	orhi	r16,r16,8
   12444:	10bfffc4 	addi	r2,r2,-1
   12448:	e4c0004c 	andi	r19,fp,1
   1244c:	80a0703a 	and	r16,r16,r2
   12450:	003ef606 	br	1202c <__alt_mem_Flash_flash_data+0xf401202c>

00012454 <__subdf3>:
   12454:	00c00434 	movhi	r3,16
   12458:	18ffffc4 	addi	r3,r3,-1
   1245c:	defffb04 	addi	sp,sp,-20
   12460:	28d2703a 	and	r9,r5,r3
   12464:	3814d53a 	srli	r10,r7,20
   12468:	38c6703a 	and	r3,r7,r3
   1246c:	3004d77a 	srli	r2,r6,29
   12470:	dc800215 	stw	r18,8(sp)
   12474:	dc000015 	stw	r16,0(sp)
   12478:	2824d7fa 	srli	r18,r5,31
   1247c:	2820d53a 	srli	r16,r5,20
   12480:	481290fa 	slli	r9,r9,3
   12484:	200ad77a 	srli	r5,r4,29
   12488:	180690fa 	slli	r3,r3,3
   1248c:	dc400115 	stw	r17,4(sp)
   12490:	dfc00415 	stw	ra,16(sp)
   12494:	202290fa 	slli	r17,r4,3
   12498:	dcc00315 	stw	r19,12(sp)
   1249c:	5281ffcc 	andi	r10,r10,2047
   124a0:	0101ffc4 	movi	r4,2047
   124a4:	9011883a 	mov	r8,r18
   124a8:	8401ffcc 	andi	r16,r16,2047
   124ac:	94803fcc 	andi	r18,r18,255
   124b0:	494ab03a 	or	r5,r9,r5
   124b4:	380ed7fa 	srli	r7,r7,31
   124b8:	1886b03a 	or	r3,r3,r2
   124bc:	300c90fa 	slli	r6,r6,3
   124c0:	51009026 	beq	r10,r4,12704 <__subdf3+0x2b0>
   124c4:	39c0005c 	xori	r7,r7,1
   124c8:	8285c83a 	sub	r2,r16,r10
   124cc:	91c06f26 	beq	r18,r7,1268c <__subdf3+0x238>
   124d0:	0080b10e 	bge	zero,r2,12798 <__subdf3+0x344>
   124d4:	50002a1e 	bne	r10,zero,12580 <__subdf3+0x12c>
   124d8:	1988b03a 	or	r4,r3,r6
   124dc:	2000941e 	bne	r4,zero,12730 <__subdf3+0x2dc>
   124e0:	888001cc 	andi	r2,r17,7
   124e4:	10005b26 	beq	r2,zero,12654 <__subdf3+0x200>
   124e8:	88c003cc 	andi	r3,r17,15
   124ec:	00800104 	movi	r2,4
   124f0:	18805826 	beq	r3,r2,12654 <__subdf3+0x200>
   124f4:	88c00104 	addi	r3,r17,4
   124f8:	1c63803a 	cmpltu	r17,r3,r17
   124fc:	2c4b883a 	add	r5,r5,r17
   12500:	2880202c 	andhi	r2,r5,128
   12504:	9200004c 	andi	r8,r18,1
   12508:	1823883a 	mov	r17,r3
   1250c:	10005426 	beq	r2,zero,12660 <__subdf3+0x20c>
   12510:	84000044 	addi	r16,r16,1
   12514:	0081ffc4 	movi	r2,2047
   12518:	8080bf26 	beq	r16,r2,12818 <__subdf3+0x3c4>
   1251c:	013fe034 	movhi	r4,65408
   12520:	213fffc4 	addi	r4,r4,-1
   12524:	290a703a 	and	r5,r5,r4
   12528:	2804977a 	slli	r2,r5,29
   1252c:	280a927a 	slli	r5,r5,9
   12530:	8822d0fa 	srli	r17,r17,3
   12534:	8401ffcc 	andi	r16,r16,2047
   12538:	2808d33a 	srli	r4,r5,12
   1253c:	1444b03a 	or	r2,r2,r17
   12540:	8401ffcc 	andi	r16,r16,2047
   12544:	800a953a 	slli	r5,r16,20
   12548:	40c03fcc 	andi	r3,r8,255
   1254c:	04000434 	movhi	r16,16
   12550:	180697fa 	slli	r3,r3,31
   12554:	843fffc4 	addi	r16,r16,-1
   12558:	2420703a 	and	r16,r4,r16
   1255c:	8160b03a 	or	r16,r16,r5
   12560:	80c6b03a 	or	r3,r16,r3
   12564:	dfc00417 	ldw	ra,16(sp)
   12568:	dcc00317 	ldw	r19,12(sp)
   1256c:	dc800217 	ldw	r18,8(sp)
   12570:	dc400117 	ldw	r17,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00504 	addi	sp,sp,20
   1257c:	f800283a 	ret
   12580:	0101ffc4 	movi	r4,2047
   12584:	813fd626 	beq	r16,r4,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12588:	18c02034 	orhi	r3,r3,128
   1258c:	01000e04 	movi	r4,56
   12590:	2080a416 	blt	r4,r2,12824 <__subdf3+0x3d0>
   12594:	010007c4 	movi	r4,31
   12598:	2080c716 	blt	r4,r2,128b8 <__subdf3+0x464>
   1259c:	01000804 	movi	r4,32
   125a0:	2089c83a 	sub	r4,r4,r2
   125a4:	1910983a 	sll	r8,r3,r4
   125a8:	308ed83a 	srl	r7,r6,r2
   125ac:	3108983a 	sll	r4,r6,r4
   125b0:	1884d83a 	srl	r2,r3,r2
   125b4:	41ccb03a 	or	r6,r8,r7
   125b8:	2008c03a 	cmpne	r4,r4,zero
   125bc:	310cb03a 	or	r6,r6,r4
   125c0:	898dc83a 	sub	r6,r17,r6
   125c4:	89a3803a 	cmpltu	r17,r17,r6
   125c8:	288bc83a 	sub	r5,r5,r2
   125cc:	2c4bc83a 	sub	r5,r5,r17
   125d0:	3023883a 	mov	r17,r6
   125d4:	2880202c 	andhi	r2,r5,128
   125d8:	10006b26 	beq	r2,zero,12788 <__subdf3+0x334>
   125dc:	04c02034 	movhi	r19,128
   125e0:	9cffffc4 	addi	r19,r19,-1
   125e4:	2ce6703a 	and	r19,r5,r19
   125e8:	98007c26 	beq	r19,zero,127dc <__subdf3+0x388>
   125ec:	9809883a 	mov	r4,r19
   125f0:	0012f200 	call	12f20 <__clzsi2>
   125f4:	10fffe04 	addi	r3,r2,-8
   125f8:	010007c4 	movi	r4,31
   125fc:	20c07d16 	blt	r4,r3,127f4 <__subdf3+0x3a0>
   12600:	01400a04 	movi	r5,40
   12604:	2885c83a 	sub	r2,r5,r2
   12608:	888ad83a 	srl	r5,r17,r2
   1260c:	98e6983a 	sll	r19,r19,r3
   12610:	88e2983a 	sll	r17,r17,r3
   12614:	2ce6b03a 	or	r19,r5,r19
   12618:	1c007a16 	blt	r3,r16,12804 <__subdf3+0x3b0>
   1261c:	1c21c83a 	sub	r16,r3,r16
   12620:	81400044 	addi	r5,r16,1
   12624:	00c007c4 	movi	r3,31
   12628:	19409616 	blt	r3,r5,12884 <__subdf3+0x430>
   1262c:	1c21c83a 	sub	r16,r3,r16
   12630:	8c08983a 	sll	r4,r17,r16
   12634:	8946d83a 	srl	r3,r17,r5
   12638:	9c20983a 	sll	r16,r19,r16
   1263c:	2008c03a 	cmpne	r4,r4,zero
   12640:	994ad83a 	srl	r5,r19,r5
   12644:	1c06b03a 	or	r3,r3,r16
   12648:	1922b03a 	or	r17,r3,r4
   1264c:	0021883a 	mov	r16,zero
   12650:	003fa306 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12654:	2880202c 	andhi	r2,r5,128
   12658:	9200004c 	andi	r8,r18,1
   1265c:	103fac1e 	bne	r2,zero,12510 <__alt_mem_Flash_flash_data+0xf4012510>
   12660:	2804977a 	slli	r2,r5,29
   12664:	8822d0fa 	srli	r17,r17,3
   12668:	00c1ffc4 	movi	r3,2047
   1266c:	280ad0fa 	srli	r5,r5,3
   12670:	1444b03a 	or	r2,r2,r17
   12674:	80c02726 	beq	r16,r3,12714 <__subdf3+0x2c0>
   12678:	01000434 	movhi	r4,16
   1267c:	213fffc4 	addi	r4,r4,-1
   12680:	80e0703a 	and	r16,r16,r3
   12684:	2908703a 	and	r4,r5,r4
   12688:	003fad06 	br	12540 <__alt_mem_Flash_flash_data+0xf4012540>
   1268c:	0080690e 	bge	zero,r2,12834 <__subdf3+0x3e0>
   12690:	50002f26 	beq	r10,zero,12750 <__subdf3+0x2fc>
   12694:	0101ffc4 	movi	r4,2047
   12698:	813f9126 	beq	r16,r4,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   1269c:	18c02034 	orhi	r3,r3,128
   126a0:	01000e04 	movi	r4,56
   126a4:	2080b00e 	bge	r4,r2,12968 <__subdf3+0x514>
   126a8:	198cb03a 	or	r6,r3,r6
   126ac:	300ec03a 	cmpne	r7,r6,zero
   126b0:	0005883a 	mov	r2,zero
   126b4:	3c4f883a 	add	r7,r7,r17
   126b8:	3c63803a 	cmpltu	r17,r7,r17
   126bc:	114b883a 	add	r5,r2,r5
   126c0:	2c4b883a 	add	r5,r5,r17
   126c4:	3823883a 	mov	r17,r7
   126c8:	2880202c 	andhi	r2,r5,128
   126cc:	10002e26 	beq	r2,zero,12788 <__subdf3+0x334>
   126d0:	84000044 	addi	r16,r16,1
   126d4:	0081ffc4 	movi	r2,2047
   126d8:	8080de26 	beq	r16,r2,12a54 <__subdf3+0x600>
   126dc:	00bfe034 	movhi	r2,65408
   126e0:	10bfffc4 	addi	r2,r2,-1
   126e4:	288a703a 	and	r5,r5,r2
   126e8:	880cd07a 	srli	r6,r17,1
   126ec:	280897fa 	slli	r4,r5,31
   126f0:	88c0004c 	andi	r3,r17,1
   126f4:	30e2b03a 	or	r17,r6,r3
   126f8:	280ad07a 	srli	r5,r5,1
   126fc:	8922b03a 	or	r17,r17,r4
   12700:	003f7706 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12704:	1984b03a 	or	r2,r3,r6
   12708:	103f6e26 	beq	r2,zero,124c4 <__alt_mem_Flash_flash_data+0xf40124c4>
   1270c:	39c03fcc 	andi	r7,r7,255
   12710:	003f6d06 	br	124c8 <__alt_mem_Flash_flash_data+0xf40124c8>
   12714:	1146b03a 	or	r3,r2,r5
   12718:	18003f26 	beq	r3,zero,12818 <__subdf3+0x3c4>
   1271c:	00c00434 	movhi	r3,16
   12720:	29000234 	orhi	r4,r5,8
   12724:	18ffffc4 	addi	r3,r3,-1
   12728:	20c8703a 	and	r4,r4,r3
   1272c:	003f8406 	br	12540 <__alt_mem_Flash_flash_data+0xf4012540>
   12730:	10bfffc4 	addi	r2,r2,-1
   12734:	1000501e 	bne	r2,zero,12878 <__subdf3+0x424>
   12738:	898fc83a 	sub	r7,r17,r6
   1273c:	89e3803a 	cmpltu	r17,r17,r7
   12740:	28cbc83a 	sub	r5,r5,r3
   12744:	2c4bc83a 	sub	r5,r5,r17
   12748:	3823883a 	mov	r17,r7
   1274c:	003fa106 	br	125d4 <__alt_mem_Flash_flash_data+0xf40125d4>
   12750:	1988b03a 	or	r4,r3,r6
   12754:	203f6226 	beq	r4,zero,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12758:	10bfffc4 	addi	r2,r2,-1
   1275c:	10009b1e 	bne	r2,zero,129cc <__subdf3+0x578>
   12760:	344d883a 	add	r6,r6,r17
   12764:	3463803a 	cmpltu	r17,r6,r17
   12768:	194b883a 	add	r5,r3,r5
   1276c:	2c4b883a 	add	r5,r5,r17
   12770:	3023883a 	mov	r17,r6
   12774:	003fd406 	br	126c8 <__alt_mem_Flash_flash_data+0xf40126c8>
   12778:	1106b03a 	or	r3,r2,r4
   1277c:	1800b426 	beq	r3,zero,12a50 <__subdf3+0x5fc>
   12780:	100b883a 	mov	r5,r2
   12784:	2023883a 	mov	r17,r4
   12788:	888001cc 	andi	r2,r17,7
   1278c:	103f561e 	bne	r2,zero,124e8 <__alt_mem_Flash_flash_data+0xf40124e8>
   12790:	9200004c 	andi	r8,r18,1
   12794:	003fb206 	br	12660 <__alt_mem_Flash_flash_data+0xf4012660>
   12798:	1000531e 	bne	r2,zero,128e8 <__subdf3+0x494>
   1279c:	80800044 	addi	r2,r16,1
   127a0:	1081ffcc 	andi	r2,r2,2047
   127a4:	01000044 	movi	r4,1
   127a8:	2080a00e 	bge	r4,r2,12a2c <__subdf3+0x5d8>
   127ac:	8985c83a 	sub	r2,r17,r6
   127b0:	8889803a 	cmpltu	r4,r17,r2
   127b4:	28e7c83a 	sub	r19,r5,r3
   127b8:	9927c83a 	sub	r19,r19,r4
   127bc:	9900202c 	andhi	r4,r19,128
   127c0:	20006226 	beq	r4,zero,1294c <__subdf3+0x4f8>
   127c4:	3463c83a 	sub	r17,r6,r17
   127c8:	194bc83a 	sub	r5,r3,r5
   127cc:	344d803a 	cmpltu	r6,r6,r17
   127d0:	29a7c83a 	sub	r19,r5,r6
   127d4:	3825883a 	mov	r18,r7
   127d8:	983f841e 	bne	r19,zero,125ec <__alt_mem_Flash_flash_data+0xf40125ec>
   127dc:	8809883a 	mov	r4,r17
   127e0:	0012f200 	call	12f20 <__clzsi2>
   127e4:	10800804 	addi	r2,r2,32
   127e8:	10fffe04 	addi	r3,r2,-8
   127ec:	010007c4 	movi	r4,31
   127f0:	20ff830e 	bge	r4,r3,12600 <__alt_mem_Flash_flash_data+0xf4012600>
   127f4:	14fff604 	addi	r19,r2,-40
   127f8:	8ce6983a 	sll	r19,r17,r19
   127fc:	0023883a 	mov	r17,zero
   12800:	1c3f860e 	bge	r3,r16,1261c <__alt_mem_Flash_flash_data+0xf401261c>
   12804:	017fe034 	movhi	r5,65408
   12808:	297fffc4 	addi	r5,r5,-1
   1280c:	80e1c83a 	sub	r16,r16,r3
   12810:	994a703a 	and	r5,r19,r5
   12814:	003f3206 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12818:	0009883a 	mov	r4,zero
   1281c:	0005883a 	mov	r2,zero
   12820:	003f4706 	br	12540 <__alt_mem_Flash_flash_data+0xf4012540>
   12824:	198cb03a 	or	r6,r3,r6
   12828:	300cc03a 	cmpne	r6,r6,zero
   1282c:	0005883a 	mov	r2,zero
   12830:	003f6306 	br	125c0 <__alt_mem_Flash_flash_data+0xf40125c0>
   12834:	10009d1e 	bne	r2,zero,12aac <__subdf3+0x658>
   12838:	81c00044 	addi	r7,r16,1
   1283c:	3881ffcc 	andi	r2,r7,2047
   12840:	02400044 	movi	r9,1
   12844:	4880680e 	bge	r9,r2,129e8 <__subdf3+0x594>
   12848:	0081ffc4 	movi	r2,2047
   1284c:	3880ae26 	beq	r7,r2,12b08 <__subdf3+0x6b4>
   12850:	344d883a 	add	r6,r6,r17
   12854:	3463803a 	cmpltu	r17,r6,r17
   12858:	194b883a 	add	r5,r3,r5
   1285c:	2c4b883a 	add	r5,r5,r17
   12860:	282297fa 	slli	r17,r5,31
   12864:	300cd07a 	srli	r6,r6,1
   12868:	280ad07a 	srli	r5,r5,1
   1286c:	3821883a 	mov	r16,r7
   12870:	89a2b03a 	or	r17,r17,r6
   12874:	003f1a06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12878:	0101ffc4 	movi	r4,2047
   1287c:	813f431e 	bne	r16,r4,1258c <__alt_mem_Flash_flash_data+0xf401258c>
   12880:	003f1706 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12884:	80bff844 	addi	r2,r16,-31
   12888:	00c00804 	movi	r3,32
   1288c:	9884d83a 	srl	r2,r19,r2
   12890:	28c05126 	beq	r5,r3,129d8 <__subdf3+0x584>
   12894:	00c00fc4 	movi	r3,63
   12898:	1c21c83a 	sub	r16,r3,r16
   1289c:	9c26983a 	sll	r19,r19,r16
   128a0:	9c62b03a 	or	r17,r19,r17
   128a4:	8822c03a 	cmpne	r17,r17,zero
   128a8:	88a2b03a 	or	r17,r17,r2
   128ac:	000b883a 	mov	r5,zero
   128b0:	0021883a 	mov	r16,zero
   128b4:	003fb406 	br	12788 <__alt_mem_Flash_flash_data+0xf4012788>
   128b8:	113ff804 	addi	r4,r2,-32
   128bc:	01c00804 	movi	r7,32
   128c0:	1908d83a 	srl	r4,r3,r4
   128c4:	11c04626 	beq	r2,r7,129e0 <__subdf3+0x58c>
   128c8:	01c01004 	movi	r7,64
   128cc:	3885c83a 	sub	r2,r7,r2
   128d0:	1884983a 	sll	r2,r3,r2
   128d4:	118cb03a 	or	r6,r2,r6
   128d8:	300cc03a 	cmpne	r6,r6,zero
   128dc:	310cb03a 	or	r6,r6,r4
   128e0:	0005883a 	mov	r2,zero
   128e4:	003f3606 	br	125c0 <__alt_mem_Flash_flash_data+0xf40125c0>
   128e8:	80002b26 	beq	r16,zero,12998 <__subdf3+0x544>
   128ec:	0101ffc4 	movi	r4,2047
   128f0:	51006926 	beq	r10,r4,12a98 <__subdf3+0x644>
   128f4:	0085c83a 	sub	r2,zero,r2
   128f8:	29402034 	orhi	r5,r5,128
   128fc:	01000e04 	movi	r4,56
   12900:	20807d16 	blt	r4,r2,12af8 <__subdf3+0x6a4>
   12904:	010007c4 	movi	r4,31
   12908:	2080d916 	blt	r4,r2,12c70 <__subdf3+0x81c>
   1290c:	01000804 	movi	r4,32
   12910:	2089c83a 	sub	r4,r4,r2
   12914:	2912983a 	sll	r9,r5,r4
   12918:	8890d83a 	srl	r8,r17,r2
   1291c:	8908983a 	sll	r4,r17,r4
   12920:	2884d83a 	srl	r2,r5,r2
   12924:	4a22b03a 	or	r17,r9,r8
   12928:	2008c03a 	cmpne	r4,r4,zero
   1292c:	8922b03a 	or	r17,r17,r4
   12930:	3463c83a 	sub	r17,r6,r17
   12934:	1885c83a 	sub	r2,r3,r2
   12938:	344d803a 	cmpltu	r6,r6,r17
   1293c:	118bc83a 	sub	r5,r2,r6
   12940:	5021883a 	mov	r16,r10
   12944:	3825883a 	mov	r18,r7
   12948:	003f2206 	br	125d4 <__alt_mem_Flash_flash_data+0xf40125d4>
   1294c:	9886b03a 	or	r3,r19,r2
   12950:	18001c1e 	bne	r3,zero,129c4 <__subdf3+0x570>
   12954:	0011883a 	mov	r8,zero
   12958:	000b883a 	mov	r5,zero
   1295c:	0023883a 	mov	r17,zero
   12960:	0021883a 	mov	r16,zero
   12964:	003f3e06 	br	12660 <__alt_mem_Flash_flash_data+0xf4012660>
   12968:	010007c4 	movi	r4,31
   1296c:	20803c16 	blt	r4,r2,12a60 <__subdf3+0x60c>
   12970:	01000804 	movi	r4,32
   12974:	2089c83a 	sub	r4,r4,r2
   12978:	1912983a 	sll	r9,r3,r4
   1297c:	308ed83a 	srl	r7,r6,r2
   12980:	3108983a 	sll	r4,r6,r4
   12984:	1884d83a 	srl	r2,r3,r2
   12988:	49ceb03a 	or	r7,r9,r7
   1298c:	2008c03a 	cmpne	r4,r4,zero
   12990:	390eb03a 	or	r7,r7,r4
   12994:	003f4706 	br	126b4 <__alt_mem_Flash_flash_data+0xf40126b4>
   12998:	2c48b03a 	or	r4,r5,r17
   1299c:	20003e26 	beq	r4,zero,12a98 <__subdf3+0x644>
   129a0:	0084303a 	nor	r2,zero,r2
   129a4:	10003a1e 	bne	r2,zero,12a90 <__subdf3+0x63c>
   129a8:	3463c83a 	sub	r17,r6,r17
   129ac:	194bc83a 	sub	r5,r3,r5
   129b0:	344d803a 	cmpltu	r6,r6,r17
   129b4:	298bc83a 	sub	r5,r5,r6
   129b8:	5021883a 	mov	r16,r10
   129bc:	3825883a 	mov	r18,r7
   129c0:	003f0406 	br	125d4 <__alt_mem_Flash_flash_data+0xf40125d4>
   129c4:	1023883a 	mov	r17,r2
   129c8:	003f0706 	br	125e8 <__alt_mem_Flash_flash_data+0xf40125e8>
   129cc:	0101ffc4 	movi	r4,2047
   129d0:	813f331e 	bne	r16,r4,126a0 <__alt_mem_Flash_flash_data+0xf40126a0>
   129d4:	003ec206 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   129d8:	0027883a 	mov	r19,zero
   129dc:	003fb006 	br	128a0 <__alt_mem_Flash_flash_data+0xf40128a0>
   129e0:	0005883a 	mov	r2,zero
   129e4:	003fbb06 	br	128d4 <__alt_mem_Flash_flash_data+0xf40128d4>
   129e8:	2c44b03a 	or	r2,r5,r17
   129ec:	80008b1e 	bne	r16,zero,12c1c <__subdf3+0x7c8>
   129f0:	1000b526 	beq	r2,zero,12cc8 <__subdf3+0x874>
   129f4:	1984b03a 	or	r2,r3,r6
   129f8:	103eb926 	beq	r2,zero,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   129fc:	3449883a 	add	r4,r6,r17
   12a00:	2463803a 	cmpltu	r17,r4,r17
   12a04:	194b883a 	add	r5,r3,r5
   12a08:	2c4b883a 	add	r5,r5,r17
   12a0c:	2880202c 	andhi	r2,r5,128
   12a10:	2023883a 	mov	r17,r4
   12a14:	103f5c26 	beq	r2,zero,12788 <__alt_mem_Flash_flash_data+0xf4012788>
   12a18:	00bfe034 	movhi	r2,65408
   12a1c:	10bfffc4 	addi	r2,r2,-1
   12a20:	4821883a 	mov	r16,r9
   12a24:	288a703a 	and	r5,r5,r2
   12a28:	003ead06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12a2c:	2c44b03a 	or	r2,r5,r17
   12a30:	8000291e 	bne	r16,zero,12ad8 <__subdf3+0x684>
   12a34:	10004f1e 	bne	r2,zero,12b74 <__subdf3+0x720>
   12a38:	1984b03a 	or	r2,r3,r6
   12a3c:	10000426 	beq	r2,zero,12a50 <__subdf3+0x5fc>
   12a40:	180b883a 	mov	r5,r3
   12a44:	3023883a 	mov	r17,r6
   12a48:	3825883a 	mov	r18,r7
   12a4c:	003ea406 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12a50:	0011883a 	mov	r8,zero
   12a54:	000b883a 	mov	r5,zero
   12a58:	0023883a 	mov	r17,zero
   12a5c:	003f0006 	br	12660 <__alt_mem_Flash_flash_data+0xf4012660>
   12a60:	11fff804 	addi	r7,r2,-32
   12a64:	19c8d83a 	srl	r4,r3,r7
   12a68:	01c00804 	movi	r7,32
   12a6c:	11c07e26 	beq	r2,r7,12c68 <__subdf3+0x814>
   12a70:	01c01004 	movi	r7,64
   12a74:	3885c83a 	sub	r2,r7,r2
   12a78:	1884983a 	sll	r2,r3,r2
   12a7c:	118cb03a 	or	r6,r2,r6
   12a80:	300ec03a 	cmpne	r7,r6,zero
   12a84:	390eb03a 	or	r7,r7,r4
   12a88:	0005883a 	mov	r2,zero
   12a8c:	003f0906 	br	126b4 <__alt_mem_Flash_flash_data+0xf40126b4>
   12a90:	0101ffc4 	movi	r4,2047
   12a94:	513f991e 	bne	r10,r4,128fc <__alt_mem_Flash_flash_data+0xf40128fc>
   12a98:	180b883a 	mov	r5,r3
   12a9c:	3023883a 	mov	r17,r6
   12aa0:	5021883a 	mov	r16,r10
   12aa4:	3825883a 	mov	r18,r7
   12aa8:	003e8d06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12aac:	80001a1e 	bne	r16,zero,12b18 <__subdf3+0x6c4>
   12ab0:	2c48b03a 	or	r4,r5,r17
   12ab4:	20005526 	beq	r4,zero,12c0c <__subdf3+0x7b8>
   12ab8:	0084303a 	nor	r2,zero,r2
   12abc:	1000511e 	bne	r2,zero,12c04 <__subdf3+0x7b0>
   12ac0:	89a3883a 	add	r17,r17,r6
   12ac4:	194b883a 	add	r5,r3,r5
   12ac8:	898d803a 	cmpltu	r6,r17,r6
   12acc:	298b883a 	add	r5,r5,r6
   12ad0:	5021883a 	mov	r16,r10
   12ad4:	003efc06 	br	126c8 <__alt_mem_Flash_flash_data+0xf40126c8>
   12ad8:	1000341e 	bne	r2,zero,12bac <__subdf3+0x758>
   12adc:	1984b03a 	or	r2,r3,r6
   12ae0:	10006f26 	beq	r2,zero,12ca0 <__subdf3+0x84c>
   12ae4:	180b883a 	mov	r5,r3
   12ae8:	3023883a 	mov	r17,r6
   12aec:	3825883a 	mov	r18,r7
   12af0:	0401ffc4 	movi	r16,2047
   12af4:	003e7a06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12af8:	2c62b03a 	or	r17,r5,r17
   12afc:	8822c03a 	cmpne	r17,r17,zero
   12b00:	0005883a 	mov	r2,zero
   12b04:	003f8a06 	br	12930 <__alt_mem_Flash_flash_data+0xf4012930>
   12b08:	3821883a 	mov	r16,r7
   12b0c:	000b883a 	mov	r5,zero
   12b10:	0023883a 	mov	r17,zero
   12b14:	003ed206 	br	12660 <__alt_mem_Flash_flash_data+0xf4012660>
   12b18:	0101ffc4 	movi	r4,2047
   12b1c:	51003b26 	beq	r10,r4,12c0c <__subdf3+0x7b8>
   12b20:	0085c83a 	sub	r2,zero,r2
   12b24:	29402034 	orhi	r5,r5,128
   12b28:	01000e04 	movi	r4,56
   12b2c:	20806216 	blt	r4,r2,12cb8 <__subdf3+0x864>
   12b30:	010007c4 	movi	r4,31
   12b34:	20806b16 	blt	r4,r2,12ce4 <__subdf3+0x890>
   12b38:	01000804 	movi	r4,32
   12b3c:	2089c83a 	sub	r4,r4,r2
   12b40:	2912983a 	sll	r9,r5,r4
   12b44:	888ed83a 	srl	r7,r17,r2
   12b48:	8908983a 	sll	r4,r17,r4
   12b4c:	2884d83a 	srl	r2,r5,r2
   12b50:	49e2b03a 	or	r17,r9,r7
   12b54:	2008c03a 	cmpne	r4,r4,zero
   12b58:	8922b03a 	or	r17,r17,r4
   12b5c:	89a3883a 	add	r17,r17,r6
   12b60:	10c5883a 	add	r2,r2,r3
   12b64:	898d803a 	cmpltu	r6,r17,r6
   12b68:	118b883a 	add	r5,r2,r6
   12b6c:	5021883a 	mov	r16,r10
   12b70:	003ed506 	br	126c8 <__alt_mem_Flash_flash_data+0xf40126c8>
   12b74:	1984b03a 	or	r2,r3,r6
   12b78:	103e5926 	beq	r2,zero,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12b7c:	8989c83a 	sub	r4,r17,r6
   12b80:	8911803a 	cmpltu	r8,r17,r4
   12b84:	28c5c83a 	sub	r2,r5,r3
   12b88:	1205c83a 	sub	r2,r2,r8
   12b8c:	1200202c 	andhi	r8,r2,128
   12b90:	403ef926 	beq	r8,zero,12778 <__alt_mem_Flash_flash_data+0xf4012778>
   12b94:	3463c83a 	sub	r17,r6,r17
   12b98:	194bc83a 	sub	r5,r3,r5
   12b9c:	344d803a 	cmpltu	r6,r6,r17
   12ba0:	298bc83a 	sub	r5,r5,r6
   12ba4:	3825883a 	mov	r18,r7
   12ba8:	003e4d06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12bac:	1984b03a 	or	r2,r3,r6
   12bb0:	10002b26 	beq	r2,zero,12c60 <__subdf3+0x80c>
   12bb4:	2808d0fa 	srli	r4,r5,3
   12bb8:	8822d0fa 	srli	r17,r17,3
   12bbc:	280a977a 	slli	r5,r5,29
   12bc0:	2080022c 	andhi	r2,r4,8
   12bc4:	2c62b03a 	or	r17,r5,r17
   12bc8:	10000826 	beq	r2,zero,12bec <__subdf3+0x798>
   12bcc:	1810d0fa 	srli	r8,r3,3
   12bd0:	4080022c 	andhi	r2,r8,8
   12bd4:	1000051e 	bne	r2,zero,12bec <__subdf3+0x798>
   12bd8:	300cd0fa 	srli	r6,r6,3
   12bdc:	1804977a 	slli	r2,r3,29
   12be0:	4009883a 	mov	r4,r8
   12be4:	3825883a 	mov	r18,r7
   12be8:	11a2b03a 	or	r17,r2,r6
   12bec:	880ad77a 	srli	r5,r17,29
   12bf0:	200890fa 	slli	r4,r4,3
   12bf4:	882290fa 	slli	r17,r17,3
   12bf8:	0401ffc4 	movi	r16,2047
   12bfc:	290ab03a 	or	r5,r5,r4
   12c00:	003e3706 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12c04:	0101ffc4 	movi	r4,2047
   12c08:	513fc71e 	bne	r10,r4,12b28 <__alt_mem_Flash_flash_data+0xf4012b28>
   12c0c:	180b883a 	mov	r5,r3
   12c10:	3023883a 	mov	r17,r6
   12c14:	5021883a 	mov	r16,r10
   12c18:	003e3106 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12c1c:	10002d26 	beq	r2,zero,12cd4 <__subdf3+0x880>
   12c20:	1984b03a 	or	r2,r3,r6
   12c24:	10000e26 	beq	r2,zero,12c60 <__subdf3+0x80c>
   12c28:	2808d0fa 	srli	r4,r5,3
   12c2c:	8822d0fa 	srli	r17,r17,3
   12c30:	280a977a 	slli	r5,r5,29
   12c34:	2080022c 	andhi	r2,r4,8
   12c38:	2c62b03a 	or	r17,r5,r17
   12c3c:	103feb26 	beq	r2,zero,12bec <__alt_mem_Flash_flash_data+0xf4012bec>
   12c40:	180ed0fa 	srli	r7,r3,3
   12c44:	3880022c 	andhi	r2,r7,8
   12c48:	103fe81e 	bne	r2,zero,12bec <__alt_mem_Flash_flash_data+0xf4012bec>
   12c4c:	300cd0fa 	srli	r6,r6,3
   12c50:	1804977a 	slli	r2,r3,29
   12c54:	3809883a 	mov	r4,r7
   12c58:	11a2b03a 	or	r17,r2,r6
   12c5c:	003fe306 	br	12bec <__alt_mem_Flash_flash_data+0xf4012bec>
   12c60:	0401ffc4 	movi	r16,2047
   12c64:	003e1e06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12c68:	0005883a 	mov	r2,zero
   12c6c:	003f8306 	br	12a7c <__alt_mem_Flash_flash_data+0xf4012a7c>
   12c70:	113ff804 	addi	r4,r2,-32
   12c74:	02000804 	movi	r8,32
   12c78:	2908d83a 	srl	r4,r5,r4
   12c7c:	12002526 	beq	r2,r8,12d14 <__subdf3+0x8c0>
   12c80:	02001004 	movi	r8,64
   12c84:	4085c83a 	sub	r2,r8,r2
   12c88:	288a983a 	sll	r5,r5,r2
   12c8c:	2c62b03a 	or	r17,r5,r17
   12c90:	8822c03a 	cmpne	r17,r17,zero
   12c94:	8922b03a 	or	r17,r17,r4
   12c98:	0005883a 	mov	r2,zero
   12c9c:	003f2406 	br	12930 <__alt_mem_Flash_flash_data+0xf4012930>
   12ca0:	01402034 	movhi	r5,128
   12ca4:	0011883a 	mov	r8,zero
   12ca8:	297fffc4 	addi	r5,r5,-1
   12cac:	047ffe04 	movi	r17,-8
   12cb0:	0401ffc4 	movi	r16,2047
   12cb4:	003e6a06 	br	12660 <__alt_mem_Flash_flash_data+0xf4012660>
   12cb8:	2c62b03a 	or	r17,r5,r17
   12cbc:	8822c03a 	cmpne	r17,r17,zero
   12cc0:	0005883a 	mov	r2,zero
   12cc4:	003fa506 	br	12b5c <__alt_mem_Flash_flash_data+0xf4012b5c>
   12cc8:	180b883a 	mov	r5,r3
   12ccc:	3023883a 	mov	r17,r6
   12cd0:	003e0306 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12cd4:	180b883a 	mov	r5,r3
   12cd8:	3023883a 	mov	r17,r6
   12cdc:	0401ffc4 	movi	r16,2047
   12ce0:	003dff06 	br	124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
   12ce4:	113ff804 	addi	r4,r2,-32
   12ce8:	01c00804 	movi	r7,32
   12cec:	2908d83a 	srl	r4,r5,r4
   12cf0:	11c00a26 	beq	r2,r7,12d1c <__subdf3+0x8c8>
   12cf4:	01c01004 	movi	r7,64
   12cf8:	3885c83a 	sub	r2,r7,r2
   12cfc:	288a983a 	sll	r5,r5,r2
   12d00:	2c62b03a 	or	r17,r5,r17
   12d04:	8822c03a 	cmpne	r17,r17,zero
   12d08:	8922b03a 	or	r17,r17,r4
   12d0c:	0005883a 	mov	r2,zero
   12d10:	003f9206 	br	12b5c <__alt_mem_Flash_flash_data+0xf4012b5c>
   12d14:	000b883a 	mov	r5,zero
   12d18:	003fdc06 	br	12c8c <__alt_mem_Flash_flash_data+0xf4012c8c>
   12d1c:	000b883a 	mov	r5,zero
   12d20:	003ff706 	br	12d00 <__alt_mem_Flash_flash_data+0xf4012d00>

00012d24 <__fixdfsi>:
   12d24:	2806d53a 	srli	r3,r5,20
   12d28:	00800434 	movhi	r2,16
   12d2c:	10bfffc4 	addi	r2,r2,-1
   12d30:	18c1ffcc 	andi	r3,r3,2047
   12d34:	0180ff84 	movi	r6,1022
   12d38:	2884703a 	and	r2,r5,r2
   12d3c:	280ad7fa 	srli	r5,r5,31
   12d40:	30c0130e 	bge	r6,r3,12d90 <__fixdfsi+0x6c>
   12d44:	01810744 	movi	r6,1053
   12d48:	30c00d16 	blt	r6,r3,12d80 <__fixdfsi+0x5c>
   12d4c:	01810cc4 	movi	r6,1075
   12d50:	30cdc83a 	sub	r6,r6,r3
   12d54:	01c007c4 	movi	r7,31
   12d58:	10800434 	orhi	r2,r2,16
   12d5c:	39800e0e 	bge	r7,r6,12d98 <__fixdfsi+0x74>
   12d60:	010104c4 	movi	r4,1043
   12d64:	20c7c83a 	sub	r3,r4,r3
   12d68:	10c6d83a 	srl	r3,r2,r3
   12d6c:	29403fcc 	andi	r5,r5,255
   12d70:	0145c83a 	sub	r2,zero,r5
   12d74:	1884f03a 	xor	r2,r3,r2
   12d78:	1145883a 	add	r2,r2,r5
   12d7c:	f800283a 	ret
   12d80:	00a00034 	movhi	r2,32768
   12d84:	10bfffc4 	addi	r2,r2,-1
   12d88:	2885883a 	add	r2,r5,r2
   12d8c:	f800283a 	ret
   12d90:	0005883a 	mov	r2,zero
   12d94:	f800283a 	ret
   12d98:	18fefb44 	addi	r3,r3,-1043
   12d9c:	2188d83a 	srl	r4,r4,r6
   12da0:	10c6983a 	sll	r3,r2,r3
   12da4:	20c6b03a 	or	r3,r4,r3
   12da8:	003ff006 	br	12d6c <__alt_mem_Flash_flash_data+0xf4012d6c>

00012dac <__floatsidf>:
   12dac:	defffd04 	addi	sp,sp,-12
   12db0:	dc400115 	stw	r17,4(sp)
   12db4:	dfc00215 	stw	ra,8(sp)
   12db8:	dc000015 	stw	r16,0(sp)
   12dbc:	2023883a 	mov	r17,r4
   12dc0:	20001426 	beq	r4,zero,12e14 <__floatsidf+0x68>
   12dc4:	2020d7fa 	srli	r16,r4,31
   12dc8:	80000126 	beq	r16,zero,12dd0 <__floatsidf+0x24>
   12dcc:	0123c83a 	sub	r17,zero,r4
   12dd0:	8809883a 	mov	r4,r17
   12dd4:	0012f200 	call	12f20 <__clzsi2>
   12dd8:	01410784 	movi	r5,1054
   12ddc:	00c00284 	movi	r3,10
   12de0:	288bc83a 	sub	r5,r5,r2
   12de4:	18801c16 	blt	r3,r2,12e58 <__floatsidf+0xac>
   12de8:	00c002c4 	movi	r3,11
   12dec:	1887c83a 	sub	r3,r3,r2
   12df0:	88c8d83a 	srl	r4,r17,r3
   12df4:	00c00434 	movhi	r3,16
   12df8:	18ffffc4 	addi	r3,r3,-1
   12dfc:	10800544 	addi	r2,r2,21
   12e00:	20c8703a 	and	r4,r4,r3
   12e04:	8884983a 	sll	r2,r17,r2
   12e08:	28c1ffcc 	andi	r3,r5,2047
   12e0c:	800d883a 	mov	r6,r16
   12e10:	00000406 	br	12e24 <__floatsidf+0x78>
   12e14:	000d883a 	mov	r6,zero
   12e18:	0007883a 	mov	r3,zero
   12e1c:	0009883a 	mov	r4,zero
   12e20:	0005883a 	mov	r2,zero
   12e24:	180a953a 	slli	r5,r3,20
   12e28:	31803fcc 	andi	r6,r6,255
   12e2c:	00c00434 	movhi	r3,16
   12e30:	300c97fa 	slli	r6,r6,31
   12e34:	18ffffc4 	addi	r3,r3,-1
   12e38:	20c6703a 	and	r3,r4,r3
   12e3c:	1946b03a 	or	r3,r3,r5
   12e40:	1986b03a 	or	r3,r3,r6
   12e44:	dfc00217 	ldw	ra,8(sp)
   12e48:	dc400117 	ldw	r17,4(sp)
   12e4c:	dc000017 	ldw	r16,0(sp)
   12e50:	dec00304 	addi	sp,sp,12
   12e54:	f800283a 	ret
   12e58:	10fffd44 	addi	r3,r2,-11
   12e5c:	88c8983a 	sll	r4,r17,r3
   12e60:	00800434 	movhi	r2,16
   12e64:	10bfffc4 	addi	r2,r2,-1
   12e68:	2088703a 	and	r4,r4,r2
   12e6c:	28c1ffcc 	andi	r3,r5,2047
   12e70:	800d883a 	mov	r6,r16
   12e74:	0005883a 	mov	r2,zero
   12e78:	003fea06 	br	12e24 <__alt_mem_Flash_flash_data+0xf4012e24>

00012e7c <__floatunsidf>:
   12e7c:	defffe04 	addi	sp,sp,-8
   12e80:	dc000015 	stw	r16,0(sp)
   12e84:	dfc00115 	stw	ra,4(sp)
   12e88:	2021883a 	mov	r16,r4
   12e8c:	20001026 	beq	r4,zero,12ed0 <__floatunsidf+0x54>
   12e90:	0012f200 	call	12f20 <__clzsi2>
   12e94:	01410784 	movi	r5,1054
   12e98:	100d883a 	mov	r6,r2
   12e9c:	288bc83a 	sub	r5,r5,r2
   12ea0:	00800284 	movi	r2,10
   12ea4:	11801616 	blt	r2,r6,12f00 <__floatunsidf+0x84>
   12ea8:	008002c4 	movi	r2,11
   12eac:	1185c83a 	sub	r2,r2,r6
   12eb0:	8084d83a 	srl	r2,r16,r2
   12eb4:	00c00434 	movhi	r3,16
   12eb8:	31c00544 	addi	r7,r6,21
   12ebc:	18ffffc4 	addi	r3,r3,-1
   12ec0:	81e0983a 	sll	r16,r16,r7
   12ec4:	10cc703a 	and	r6,r2,r3
   12ec8:	2941ffcc 	andi	r5,r5,2047
   12ecc:	00000206 	br	12ed8 <__floatunsidf+0x5c>
   12ed0:	000b883a 	mov	r5,zero
   12ed4:	000d883a 	mov	r6,zero
   12ed8:	280a953a 	slli	r5,r5,20
   12edc:	00c00434 	movhi	r3,16
   12ee0:	18ffffc4 	addi	r3,r3,-1
   12ee4:	30c6703a 	and	r3,r6,r3
   12ee8:	8005883a 	mov	r2,r16
   12eec:	1946b03a 	or	r3,r3,r5
   12ef0:	dfc00117 	ldw	ra,4(sp)
   12ef4:	dc000017 	ldw	r16,0(sp)
   12ef8:	dec00204 	addi	sp,sp,8
   12efc:	f800283a 	ret
   12f00:	31bffd44 	addi	r6,r6,-11
   12f04:	818c983a 	sll	r6,r16,r6
   12f08:	00800434 	movhi	r2,16
   12f0c:	10bfffc4 	addi	r2,r2,-1
   12f10:	2941ffcc 	andi	r5,r5,2047
   12f14:	0021883a 	mov	r16,zero
   12f18:	308c703a 	and	r6,r6,r2
   12f1c:	003fee06 	br	12ed8 <__alt_mem_Flash_flash_data+0xf4012ed8>

00012f20 <__clzsi2>:
   12f20:	00bfffd4 	movui	r2,65535
   12f24:	11000b36 	bltu	r2,r4,12f54 <__clzsi2+0x34>
   12f28:	00803fc4 	movi	r2,255
   12f2c:	1100122e 	bgeu	r2,r4,12f78 <__clzsi2+0x58>
   12f30:	00c00204 	movi	r3,8
   12f34:	01400604 	movi	r5,24
   12f38:	20c8d83a 	srl	r4,r4,r3
   12f3c:	008000b4 	movhi	r2,2
   12f40:	1082a704 	addi	r2,r2,2716
   12f44:	1109883a 	add	r4,r2,r4
   12f48:	20800003 	ldbu	r2,0(r4)
   12f4c:	2885c83a 	sub	r2,r5,r2
   12f50:	f800283a 	ret
   12f54:	00804034 	movhi	r2,256
   12f58:	10bfffc4 	addi	r2,r2,-1
   12f5c:	11000336 	bltu	r2,r4,12f6c <__clzsi2+0x4c>
   12f60:	00c00404 	movi	r3,16
   12f64:	180b883a 	mov	r5,r3
   12f68:	003ff306 	br	12f38 <__alt_mem_Flash_flash_data+0xf4012f38>
   12f6c:	00c00604 	movi	r3,24
   12f70:	01400204 	movi	r5,8
   12f74:	003ff006 	br	12f38 <__alt_mem_Flash_flash_data+0xf4012f38>
   12f78:	0007883a 	mov	r3,zero
   12f7c:	01400804 	movi	r5,32
   12f80:	003fed06 	br	12f38 <__alt_mem_Flash_flash_data+0xf4012f38>

00012f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f84:	defffe04 	addi	sp,sp,-8
   12f88:	dfc00115 	stw	ra,4(sp)
   12f8c:	df000015 	stw	fp,0(sp)
   12f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f94:	008000b4 	movhi	r2,2
   12f98:	108b4904 	addi	r2,r2,11556
   12f9c:	10800017 	ldw	r2,0(r2)
   12fa0:	10000526 	beq	r2,zero,12fb8 <alt_get_errno+0x34>
   12fa4:	008000b4 	movhi	r2,2
   12fa8:	108b4904 	addi	r2,r2,11556
   12fac:	10800017 	ldw	r2,0(r2)
   12fb0:	103ee83a 	callr	r2
   12fb4:	00000206 	br	12fc0 <alt_get_errno+0x3c>
   12fb8:	008000b4 	movhi	r2,2
   12fbc:	10935d04 	addi	r2,r2,19828
}
   12fc0:	e037883a 	mov	sp,fp
   12fc4:	dfc00117 	ldw	ra,4(sp)
   12fc8:	df000017 	ldw	fp,0(sp)
   12fcc:	dec00204 	addi	sp,sp,8
   12fd0:	f800283a 	ret

00012fd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12fd4:	defffb04 	addi	sp,sp,-20
   12fd8:	dfc00415 	stw	ra,16(sp)
   12fdc:	df000315 	stw	fp,12(sp)
   12fe0:	df000304 	addi	fp,sp,12
   12fe4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12fe8:	e0bfff17 	ldw	r2,-4(fp)
   12fec:	10000616 	blt	r2,zero,13008 <close+0x34>
   12ff0:	e0bfff17 	ldw	r2,-4(fp)
   12ff4:	10c00324 	muli	r3,r2,12
   12ff8:	008000b4 	movhi	r2,2
   12ffc:	1085d504 	addi	r2,r2,5972
   13000:	1885883a 	add	r2,r3,r2
   13004:	00000106 	br	1300c <close+0x38>
   13008:	0005883a 	mov	r2,zero
   1300c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13010:	e0bffd17 	ldw	r2,-12(fp)
   13014:	10001926 	beq	r2,zero,1307c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13018:	e0bffd17 	ldw	r2,-12(fp)
   1301c:	10800017 	ldw	r2,0(r2)
   13020:	10800417 	ldw	r2,16(r2)
   13024:	10000626 	beq	r2,zero,13040 <close+0x6c>
   13028:	e0bffd17 	ldw	r2,-12(fp)
   1302c:	10800017 	ldw	r2,0(r2)
   13030:	10800417 	ldw	r2,16(r2)
   13034:	e13ffd17 	ldw	r4,-12(fp)
   13038:	103ee83a 	callr	r2
   1303c:	00000106 	br	13044 <close+0x70>
   13040:	0005883a 	mov	r2,zero
   13044:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13048:	e13fff17 	ldw	r4,-4(fp)
   1304c:	00136ec0 	call	136ec <alt_release_fd>
    if (rval < 0)
   13050:	e0bffe17 	ldw	r2,-8(fp)
   13054:	1000070e 	bge	r2,zero,13074 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13058:	0012f840 	call	12f84 <alt_get_errno>
   1305c:	1007883a 	mov	r3,r2
   13060:	e0bffe17 	ldw	r2,-8(fp)
   13064:	0085c83a 	sub	r2,zero,r2
   13068:	18800015 	stw	r2,0(r3)
      return -1;
   1306c:	00bfffc4 	movi	r2,-1
   13070:	00000706 	br	13090 <close+0xbc>
    }
    return 0;
   13074:	0005883a 	mov	r2,zero
   13078:	00000506 	br	13090 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1307c:	0012f840 	call	12f84 <alt_get_errno>
   13080:	1007883a 	mov	r3,r2
   13084:	00801444 	movi	r2,81
   13088:	18800015 	stw	r2,0(r3)
    return -1;
   1308c:	00bfffc4 	movi	r2,-1
  }
}
   13090:	e037883a 	mov	sp,fp
   13094:	dfc00117 	ldw	ra,4(sp)
   13098:	df000017 	ldw	fp,0(sp)
   1309c:	dec00204 	addi	sp,sp,8
   130a0:	f800283a 	ret

000130a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   130a4:	defffc04 	addi	sp,sp,-16
   130a8:	df000315 	stw	fp,12(sp)
   130ac:	df000304 	addi	fp,sp,12
   130b0:	e13ffd15 	stw	r4,-12(fp)
   130b4:	e17ffe15 	stw	r5,-8(fp)
   130b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   130bc:	e0bfff17 	ldw	r2,-4(fp)
}
   130c0:	e037883a 	mov	sp,fp
   130c4:	df000017 	ldw	fp,0(sp)
   130c8:	dec00104 	addi	sp,sp,4
   130cc:	f800283a 	ret

000130d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   130d0:	defffe04 	addi	sp,sp,-8
   130d4:	dfc00115 	stw	ra,4(sp)
   130d8:	df000015 	stw	fp,0(sp)
   130dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   130e0:	008000b4 	movhi	r2,2
   130e4:	108b4904 	addi	r2,r2,11556
   130e8:	10800017 	ldw	r2,0(r2)
   130ec:	10000526 	beq	r2,zero,13104 <alt_get_errno+0x34>
   130f0:	008000b4 	movhi	r2,2
   130f4:	108b4904 	addi	r2,r2,11556
   130f8:	10800017 	ldw	r2,0(r2)
   130fc:	103ee83a 	callr	r2
   13100:	00000206 	br	1310c <alt_get_errno+0x3c>
   13104:	008000b4 	movhi	r2,2
   13108:	10935d04 	addi	r2,r2,19828
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13120:	defffb04 	addi	sp,sp,-20
   13124:	dfc00415 	stw	ra,16(sp)
   13128:	df000315 	stw	fp,12(sp)
   1312c:	df000304 	addi	fp,sp,12
   13130:	e13ffe15 	stw	r4,-8(fp)
   13134:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13138:	e0bffe17 	ldw	r2,-8(fp)
   1313c:	10000616 	blt	r2,zero,13158 <fstat+0x38>
   13140:	e0bffe17 	ldw	r2,-8(fp)
   13144:	10c00324 	muli	r3,r2,12
   13148:	008000b4 	movhi	r2,2
   1314c:	1085d504 	addi	r2,r2,5972
   13150:	1885883a 	add	r2,r3,r2
   13154:	00000106 	br	1315c <fstat+0x3c>
   13158:	0005883a 	mov	r2,zero
   1315c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13160:	e0bffd17 	ldw	r2,-12(fp)
   13164:	10001026 	beq	r2,zero,131a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	10800017 	ldw	r2,0(r2)
   13170:	10800817 	ldw	r2,32(r2)
   13174:	10000726 	beq	r2,zero,13194 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13178:	e0bffd17 	ldw	r2,-12(fp)
   1317c:	10800017 	ldw	r2,0(r2)
   13180:	10800817 	ldw	r2,32(r2)
   13184:	e13ffd17 	ldw	r4,-12(fp)
   13188:	e17fff17 	ldw	r5,-4(fp)
   1318c:	103ee83a 	callr	r2
   13190:	00000a06 	br	131bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13194:	e0bfff17 	ldw	r2,-4(fp)
   13198:	00c80004 	movi	r3,8192
   1319c:	10c00115 	stw	r3,4(r2)
      return 0;
   131a0:	0005883a 	mov	r2,zero
   131a4:	00000506 	br	131bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   131a8:	00130d00 	call	130d0 <alt_get_errno>
   131ac:	1007883a 	mov	r3,r2
   131b0:	00801444 	movi	r2,81
   131b4:	18800015 	stw	r2,0(r3)
    return -1;
   131b8:	00bfffc4 	movi	r2,-1
  }
}
   131bc:	e037883a 	mov	sp,fp
   131c0:	dfc00117 	ldw	ra,4(sp)
   131c4:	df000017 	ldw	fp,0(sp)
   131c8:	dec00204 	addi	sp,sp,8
   131cc:	f800283a 	ret

000131d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131d0:	defffe04 	addi	sp,sp,-8
   131d4:	dfc00115 	stw	ra,4(sp)
   131d8:	df000015 	stw	fp,0(sp)
   131dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131e0:	008000b4 	movhi	r2,2
   131e4:	108b4904 	addi	r2,r2,11556
   131e8:	10800017 	ldw	r2,0(r2)
   131ec:	10000526 	beq	r2,zero,13204 <alt_get_errno+0x34>
   131f0:	008000b4 	movhi	r2,2
   131f4:	108b4904 	addi	r2,r2,11556
   131f8:	10800017 	ldw	r2,0(r2)
   131fc:	103ee83a 	callr	r2
   13200:	00000206 	br	1320c <alt_get_errno+0x3c>
   13204:	008000b4 	movhi	r2,2
   13208:	10935d04 	addi	r2,r2,19828
}
   1320c:	e037883a 	mov	sp,fp
   13210:	dfc00117 	ldw	ra,4(sp)
   13214:	df000017 	ldw	fp,0(sp)
   13218:	dec00204 	addi	sp,sp,8
   1321c:	f800283a 	ret

00013220 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13220:	deffed04 	addi	sp,sp,-76
   13224:	dfc01215 	stw	ra,72(sp)
   13228:	df001115 	stw	fp,68(sp)
   1322c:	df001104 	addi	fp,sp,68
   13230:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13234:	e0bfff17 	ldw	r2,-4(fp)
   13238:	10000616 	blt	r2,zero,13254 <isatty+0x34>
   1323c:	e0bfff17 	ldw	r2,-4(fp)
   13240:	10c00324 	muli	r3,r2,12
   13244:	008000b4 	movhi	r2,2
   13248:	1085d504 	addi	r2,r2,5972
   1324c:	1885883a 	add	r2,r3,r2
   13250:	00000106 	br	13258 <isatty+0x38>
   13254:	0005883a 	mov	r2,zero
   13258:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1325c:	e0bfef17 	ldw	r2,-68(fp)
   13260:	10000e26 	beq	r2,zero,1329c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13264:	e0bfef17 	ldw	r2,-68(fp)
   13268:	10800017 	ldw	r2,0(r2)
   1326c:	10800817 	ldw	r2,32(r2)
   13270:	1000021e 	bne	r2,zero,1327c <isatty+0x5c>
    {
      return 1;
   13274:	00800044 	movi	r2,1
   13278:	00000d06 	br	132b0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1327c:	e0bff004 	addi	r2,fp,-64
   13280:	e13fff17 	ldw	r4,-4(fp)
   13284:	100b883a 	mov	r5,r2
   13288:	00131200 	call	13120 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1328c:	e0bff117 	ldw	r2,-60(fp)
   13290:	10880020 	cmpeqi	r2,r2,8192
   13294:	10803fcc 	andi	r2,r2,255
   13298:	00000506 	br	132b0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1329c:	00131d00 	call	131d0 <alt_get_errno>
   132a0:	1007883a 	mov	r3,r2
   132a4:	00801444 	movi	r2,81
   132a8:	18800015 	stw	r2,0(r3)
    return 0;
   132ac:	0005883a 	mov	r2,zero
  }
}
   132b0:	e037883a 	mov	sp,fp
   132b4:	dfc00117 	ldw	ra,4(sp)
   132b8:	df000017 	ldw	fp,0(sp)
   132bc:	dec00204 	addi	sp,sp,8
   132c0:	f800283a 	ret

000132c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   132c4:	defffc04 	addi	sp,sp,-16
   132c8:	df000315 	stw	fp,12(sp)
   132cc:	df000304 	addi	fp,sp,12
   132d0:	e13ffd15 	stw	r4,-12(fp)
   132d4:	e17ffe15 	stw	r5,-8(fp)
   132d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   132dc:	e0fffe17 	ldw	r3,-8(fp)
   132e0:	e0bffd17 	ldw	r2,-12(fp)
   132e4:	18800c26 	beq	r3,r2,13318 <alt_load_section+0x54>
  {
    while( to != end )
   132e8:	00000806 	br	1330c <alt_load_section+0x48>
    {
      *to++ = *from++;
   132ec:	e0bffe17 	ldw	r2,-8(fp)
   132f0:	10c00104 	addi	r3,r2,4
   132f4:	e0fffe15 	stw	r3,-8(fp)
   132f8:	e0fffd17 	ldw	r3,-12(fp)
   132fc:	19000104 	addi	r4,r3,4
   13300:	e13ffd15 	stw	r4,-12(fp)
   13304:	18c00017 	ldw	r3,0(r3)
   13308:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1330c:	e0fffe17 	ldw	r3,-8(fp)
   13310:	e0bfff17 	ldw	r2,-4(fp)
   13314:	18bff51e 	bne	r3,r2,132ec <__alt_mem_Flash_flash_data+0xf40132ec>
    {
      *to++ = *from++;
    }
  }
}
   13318:	e037883a 	mov	sp,fp
   1331c:	df000017 	ldw	fp,0(sp)
   13320:	dec00104 	addi	sp,sp,4
   13324:	f800283a 	ret

00013328 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13328:	defffe04 	addi	sp,sp,-8
   1332c:	dfc00115 	stw	ra,4(sp)
   13330:	df000015 	stw	fp,0(sp)
   13334:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13338:	010000b4 	movhi	r4,2
   1333c:	210b6d04 	addi	r4,r4,11700
   13340:	014000b4 	movhi	r5,2
   13344:	2943a204 	addi	r5,r5,3720
   13348:	018000b4 	movhi	r6,2
   1334c:	318b6d04 	addi	r6,r6,11700
   13350:	00132c40 	call	132c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13354:	01000034 	movhi	r4,0
   13358:	21000804 	addi	r4,r4,32
   1335c:	01400034 	movhi	r5,0
   13360:	29400804 	addi	r5,r5,32
   13364:	01800034 	movhi	r6,0
   13368:	31809104 	addi	r6,r6,580
   1336c:	00132c40 	call	132c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13370:	010000b4 	movhi	r4,2
   13374:	21006204 	addi	r4,r4,392
   13378:	014000b4 	movhi	r5,2
   1337c:	29406204 	addi	r5,r5,392
   13380:	018000b4 	movhi	r6,2
   13384:	3183a204 	addi	r6,r6,3720
   13388:	00132c40 	call	132c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1338c:	001edd00 	call	1edd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13390:	001f0280 	call	1f028 <alt_icache_flush_all>
}
   13394:	e037883a 	mov	sp,fp
   13398:	dfc00117 	ldw	ra,4(sp)
   1339c:	df000017 	ldw	fp,0(sp)
   133a0:	dec00204 	addi	sp,sp,8
   133a4:	f800283a 	ret

000133a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133a8:	defffe04 	addi	sp,sp,-8
   133ac:	dfc00115 	stw	ra,4(sp)
   133b0:	df000015 	stw	fp,0(sp)
   133b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133b8:	008000b4 	movhi	r2,2
   133bc:	108b4904 	addi	r2,r2,11556
   133c0:	10800017 	ldw	r2,0(r2)
   133c4:	10000526 	beq	r2,zero,133dc <alt_get_errno+0x34>
   133c8:	008000b4 	movhi	r2,2
   133cc:	108b4904 	addi	r2,r2,11556
   133d0:	10800017 	ldw	r2,0(r2)
   133d4:	103ee83a 	callr	r2
   133d8:	00000206 	br	133e4 <alt_get_errno+0x3c>
   133dc:	008000b4 	movhi	r2,2
   133e0:	10935d04 	addi	r2,r2,19828
}
   133e4:	e037883a 	mov	sp,fp
   133e8:	dfc00117 	ldw	ra,4(sp)
   133ec:	df000017 	ldw	fp,0(sp)
   133f0:	dec00204 	addi	sp,sp,8
   133f4:	f800283a 	ret

000133f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   133f8:	defff904 	addi	sp,sp,-28
   133fc:	dfc00615 	stw	ra,24(sp)
   13400:	df000515 	stw	fp,20(sp)
   13404:	df000504 	addi	fp,sp,20
   13408:	e13ffd15 	stw	r4,-12(fp)
   1340c:	e17ffe15 	stw	r5,-8(fp)
   13410:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13414:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13418:	e0bffd17 	ldw	r2,-12(fp)
   1341c:	10000616 	blt	r2,zero,13438 <lseek+0x40>
   13420:	e0bffd17 	ldw	r2,-12(fp)
   13424:	10c00324 	muli	r3,r2,12
   13428:	008000b4 	movhi	r2,2
   1342c:	1085d504 	addi	r2,r2,5972
   13430:	1885883a 	add	r2,r3,r2
   13434:	00000106 	br	1343c <lseek+0x44>
   13438:	0005883a 	mov	r2,zero
   1343c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13440:	e0bffc17 	ldw	r2,-16(fp)
   13444:	10001026 	beq	r2,zero,13488 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13448:	e0bffc17 	ldw	r2,-16(fp)
   1344c:	10800017 	ldw	r2,0(r2)
   13450:	10800717 	ldw	r2,28(r2)
   13454:	10000926 	beq	r2,zero,1347c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13458:	e0bffc17 	ldw	r2,-16(fp)
   1345c:	10800017 	ldw	r2,0(r2)
   13460:	10800717 	ldw	r2,28(r2)
   13464:	e13ffc17 	ldw	r4,-16(fp)
   13468:	e17ffe17 	ldw	r5,-8(fp)
   1346c:	e1bfff17 	ldw	r6,-4(fp)
   13470:	103ee83a 	callr	r2
   13474:	e0bffb15 	stw	r2,-20(fp)
   13478:	00000506 	br	13490 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1347c:	00bfde84 	movi	r2,-134
   13480:	e0bffb15 	stw	r2,-20(fp)
   13484:	00000206 	br	13490 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   13488:	00bfebc4 	movi	r2,-81
   1348c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13490:	e0bffb17 	ldw	r2,-20(fp)
   13494:	1000070e 	bge	r2,zero,134b4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13498:	00133a80 	call	133a8 <alt_get_errno>
   1349c:	1007883a 	mov	r3,r2
   134a0:	e0bffb17 	ldw	r2,-20(fp)
   134a4:	0085c83a 	sub	r2,zero,r2
   134a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   134ac:	00bfffc4 	movi	r2,-1
   134b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   134b4:	e0bffb17 	ldw	r2,-20(fp)
}
   134b8:	e037883a 	mov	sp,fp
   134bc:	dfc00117 	ldw	ra,4(sp)
   134c0:	df000017 	ldw	fp,0(sp)
   134c4:	dec00204 	addi	sp,sp,8
   134c8:	f800283a 	ret

000134cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   134cc:	defff904 	addi	sp,sp,-28
   134d0:	dfc00615 	stw	ra,24(sp)
   134d4:	df000515 	stw	fp,20(sp)
   134d8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   134dc:	0009883a 	mov	r4,zero
   134e0:	001c4a00 	call	1c4a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   134e4:	00144bc0 	call	144bc <OSInit>
   134e8:	01000044 	movi	r4,1
   134ec:	0019bb40 	call	19bb4 <OSSemCreate>
   134f0:	1007883a 	mov	r3,r2
   134f4:	008000b4 	movhi	r2,2
   134f8:	10936304 	addi	r2,r2,19852
   134fc:	10c00015 	stw	r3,0(r2)
   13500:	01000044 	movi	r4,1
   13504:	0019bb40 	call	19bb4 <OSSemCreate>
   13508:	1007883a 	mov	r3,r2
   1350c:	008000b4 	movhi	r2,2
   13510:	10936504 	addi	r2,r2,19860
   13514:	10c00015 	stw	r3,0(r2)
   13518:	008000b4 	movhi	r2,2
   1351c:	10935e04 	addi	r2,r2,19832
   13520:	e0bffc15 	stw	r2,-16(fp)
   13524:	00800044 	movi	r2,1
   13528:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1352c:	e0bffd0b 	ldhu	r2,-12(fp)
   13530:	1009883a 	mov	r4,r2
   13534:	0019bb40 	call	19bb4 <OSSemCreate>
   13538:	1007883a 	mov	r3,r2
   1353c:	e0bffc17 	ldw	r2,-16(fp)
   13540:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13544:	001c4d40 	call	1c4d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13548:	010000b4 	movhi	r4,2
   1354c:	2102ea04 	addi	r4,r4,2984
   13550:	014000b4 	movhi	r5,2
   13554:	2942ea04 	addi	r5,r5,2984
   13558:	018000b4 	movhi	r6,2
   1355c:	3182ea04 	addi	r6,r6,2984
   13560:	001f1180 	call	1f118 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13564:	001eee00 	call	1eee0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13568:	010000b4 	movhi	r4,2
   1356c:	213bcf04 	addi	r4,r4,-4292
   13570:	001fddc0 	call	1fddc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13574:	d1282e17 	ldw	r4,-24392(gp)
   13578:	d0e82f17 	ldw	r3,-24388(gp)
   1357c:	d0a83017 	ldw	r2,-24384(gp)
   13580:	180b883a 	mov	r5,r3
   13584:	100d883a 	mov	r6,r2
   13588:	0002d780 	call	2d78 <main>
   1358c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   13590:	01000044 	movi	r4,1
   13594:	0012fd40 	call	12fd4 <close>
  exit (result);
   13598:	e13ffb17 	ldw	r4,-20(fp)
   1359c:	001fdf00 	call	1fdf0 <exit>

000135a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135a0:	defffe04 	addi	sp,sp,-8
   135a4:	dfc00115 	stw	ra,4(sp)
   135a8:	df000015 	stw	fp,0(sp)
   135ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135b0:	008000b4 	movhi	r2,2
   135b4:	108b4904 	addi	r2,r2,11556
   135b8:	10800017 	ldw	r2,0(r2)
   135bc:	10000526 	beq	r2,zero,135d4 <alt_get_errno+0x34>
   135c0:	008000b4 	movhi	r2,2
   135c4:	108b4904 	addi	r2,r2,11556
   135c8:	10800017 	ldw	r2,0(r2)
   135cc:	103ee83a 	callr	r2
   135d0:	00000206 	br	135dc <alt_get_errno+0x3c>
   135d4:	008000b4 	movhi	r2,2
   135d8:	10935d04 	addi	r2,r2,19828
}
   135dc:	e037883a 	mov	sp,fp
   135e0:	dfc00117 	ldw	ra,4(sp)
   135e4:	df000017 	ldw	fp,0(sp)
   135e8:	dec00204 	addi	sp,sp,8
   135ec:	f800283a 	ret

000135f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   135f0:	defff904 	addi	sp,sp,-28
   135f4:	dfc00615 	stw	ra,24(sp)
   135f8:	df000515 	stw	fp,20(sp)
   135fc:	df000504 	addi	fp,sp,20
   13600:	e13ffd15 	stw	r4,-12(fp)
   13604:	e17ffe15 	stw	r5,-8(fp)
   13608:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1360c:	e0bffd17 	ldw	r2,-12(fp)
   13610:	10000616 	blt	r2,zero,1362c <read+0x3c>
   13614:	e0bffd17 	ldw	r2,-12(fp)
   13618:	10c00324 	muli	r3,r2,12
   1361c:	008000b4 	movhi	r2,2
   13620:	1085d504 	addi	r2,r2,5972
   13624:	1885883a 	add	r2,r3,r2
   13628:	00000106 	br	13630 <read+0x40>
   1362c:	0005883a 	mov	r2,zero
   13630:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13634:	e0bffb17 	ldw	r2,-20(fp)
   13638:	10002226 	beq	r2,zero,136c4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1363c:	e0bffb17 	ldw	r2,-20(fp)
   13640:	10800217 	ldw	r2,8(r2)
   13644:	108000cc 	andi	r2,r2,3
   13648:	10800060 	cmpeqi	r2,r2,1
   1364c:	1000181e 	bne	r2,zero,136b0 <read+0xc0>
        (fd->dev->read))
   13650:	e0bffb17 	ldw	r2,-20(fp)
   13654:	10800017 	ldw	r2,0(r2)
   13658:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1365c:	10001426 	beq	r2,zero,136b0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13660:	e0bffb17 	ldw	r2,-20(fp)
   13664:	10800017 	ldw	r2,0(r2)
   13668:	10800517 	ldw	r2,20(r2)
   1366c:	e0ffff17 	ldw	r3,-4(fp)
   13670:	e13ffb17 	ldw	r4,-20(fp)
   13674:	e17ffe17 	ldw	r5,-8(fp)
   13678:	180d883a 	mov	r6,r3
   1367c:	103ee83a 	callr	r2
   13680:	e0bffc15 	stw	r2,-16(fp)
   13684:	e0bffc17 	ldw	r2,-16(fp)
   13688:	1000070e 	bge	r2,zero,136a8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1368c:	00135a00 	call	135a0 <alt_get_errno>
   13690:	1007883a 	mov	r3,r2
   13694:	e0bffc17 	ldw	r2,-16(fp)
   13698:	0085c83a 	sub	r2,zero,r2
   1369c:	18800015 	stw	r2,0(r3)
          return -1;
   136a0:	00bfffc4 	movi	r2,-1
   136a4:	00000c06 	br	136d8 <read+0xe8>
        }
        return rval;
   136a8:	e0bffc17 	ldw	r2,-16(fp)
   136ac:	00000a06 	br	136d8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   136b0:	00135a00 	call	135a0 <alt_get_errno>
   136b4:	1007883a 	mov	r3,r2
   136b8:	00800344 	movi	r2,13
   136bc:	18800015 	stw	r2,0(r3)
   136c0:	00000406 	br	136d4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   136c4:	00135a00 	call	135a0 <alt_get_errno>
   136c8:	1007883a 	mov	r3,r2
   136cc:	00801444 	movi	r2,81
   136d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   136d4:	00bfffc4 	movi	r2,-1
}
   136d8:	e037883a 	mov	sp,fp
   136dc:	dfc00117 	ldw	ra,4(sp)
   136e0:	df000017 	ldw	fp,0(sp)
   136e4:	dec00204 	addi	sp,sp,8
   136e8:	f800283a 	ret

000136ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   136ec:	defffe04 	addi	sp,sp,-8
   136f0:	df000115 	stw	fp,4(sp)
   136f4:	df000104 	addi	fp,sp,4
   136f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   136fc:	e0bfff17 	ldw	r2,-4(fp)
   13700:	108000d0 	cmplti	r2,r2,3
   13704:	10000d1e 	bne	r2,zero,1373c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13708:	008000b4 	movhi	r2,2
   1370c:	1085d504 	addi	r2,r2,5972
   13710:	e0ffff17 	ldw	r3,-4(fp)
   13714:	18c00324 	muli	r3,r3,12
   13718:	18c00204 	addi	r3,r3,8
   1371c:	10c5883a 	add	r2,r2,r3
   13720:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13724:	008000b4 	movhi	r2,2
   13728:	1085d504 	addi	r2,r2,5972
   1372c:	e0ffff17 	ldw	r3,-4(fp)
   13730:	18c00324 	muli	r3,r3,12
   13734:	10c5883a 	add	r2,r2,r3
   13738:	10000015 	stw	zero,0(r2)
  }
}
   1373c:	e037883a 	mov	sp,fp
   13740:	df000017 	ldw	fp,0(sp)
   13744:	dec00104 	addi	sp,sp,4
   13748:	f800283a 	ret

0001374c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1374c:	defff904 	addi	sp,sp,-28
   13750:	df000615 	stw	fp,24(sp)
   13754:	df000604 	addi	fp,sp,24
   13758:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1375c:	0005303a 	rdctl	r2,status
   13760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13764:	e0fffc17 	ldw	r3,-16(fp)
   13768:	00bfff84 	movi	r2,-2
   1376c:	1884703a 	and	r2,r3,r2
   13770:	1001703a 	wrctl	status,r2
  
  return context;
   13774:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13778:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1377c:	d0a01917 	ldw	r2,-32668(gp)
   13780:	10c000c4 	addi	r3,r2,3
   13784:	00bfff04 	movi	r2,-4
   13788:	1884703a 	and	r2,r3,r2
   1378c:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13790:	d0e01917 	ldw	r3,-32668(gp)
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	1887883a 	add	r3,r3,r2
   1379c:	00810034 	movhi	r2,1024
   137a0:	10800004 	addi	r2,r2,0
   137a4:	10c0062e 	bgeu	r2,r3,137c0 <sbrk+0x74>
   137a8:	e0bffa17 	ldw	r2,-24(fp)
   137ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137b0:	e0bffd17 	ldw	r2,-12(fp)
   137b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   137b8:	00bfffc4 	movi	r2,-1
   137bc:	00000b06 	br	137ec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   137c0:	d0a01917 	ldw	r2,-32668(gp)
   137c4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   137c8:	d0e01917 	ldw	r3,-32668(gp)
   137cc:	e0bfff17 	ldw	r2,-4(fp)
   137d0:	1885883a 	add	r2,r3,r2
   137d4:	d0a01915 	stw	r2,-32668(gp)
   137d8:	e0bffa17 	ldw	r2,-24(fp)
   137dc:	e0bffe15 	stw	r2,-8(fp)
   137e0:	e0bffe17 	ldw	r2,-8(fp)
   137e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   137e8:	e0bffb17 	ldw	r2,-20(fp)
} 
   137ec:	e037883a 	mov	sp,fp
   137f0:	df000017 	ldw	fp,0(sp)
   137f4:	dec00104 	addi	sp,sp,4
   137f8:	f800283a 	ret

000137fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137fc:	defffe04 	addi	sp,sp,-8
   13800:	dfc00115 	stw	ra,4(sp)
   13804:	df000015 	stw	fp,0(sp)
   13808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1380c:	008000b4 	movhi	r2,2
   13810:	108b4904 	addi	r2,r2,11556
   13814:	10800017 	ldw	r2,0(r2)
   13818:	10000526 	beq	r2,zero,13830 <alt_get_errno+0x34>
   1381c:	008000b4 	movhi	r2,2
   13820:	108b4904 	addi	r2,r2,11556
   13824:	10800017 	ldw	r2,0(r2)
   13828:	103ee83a 	callr	r2
   1382c:	00000206 	br	13838 <alt_get_errno+0x3c>
   13830:	008000b4 	movhi	r2,2
   13834:	10935d04 	addi	r2,r2,19828
}
   13838:	e037883a 	mov	sp,fp
   1383c:	dfc00117 	ldw	ra,4(sp)
   13840:	df000017 	ldw	fp,0(sp)
   13844:	dec00204 	addi	sp,sp,8
   13848:	f800283a 	ret

0001384c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1384c:	defff904 	addi	sp,sp,-28
   13850:	dfc00615 	stw	ra,24(sp)
   13854:	df000515 	stw	fp,20(sp)
   13858:	df000504 	addi	fp,sp,20
   1385c:	e13ffd15 	stw	r4,-12(fp)
   13860:	e17ffe15 	stw	r5,-8(fp)
   13864:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	10000616 	blt	r2,zero,13888 <write+0x3c>
   13870:	e0bffd17 	ldw	r2,-12(fp)
   13874:	10c00324 	muli	r3,r2,12
   13878:	008000b4 	movhi	r2,2
   1387c:	1085d504 	addi	r2,r2,5972
   13880:	1885883a 	add	r2,r3,r2
   13884:	00000106 	br	1388c <write+0x40>
   13888:	0005883a 	mov	r2,zero
   1388c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13890:	e0bffb17 	ldw	r2,-20(fp)
   13894:	10002126 	beq	r2,zero,1391c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13898:	e0bffb17 	ldw	r2,-20(fp)
   1389c:	10800217 	ldw	r2,8(r2)
   138a0:	108000cc 	andi	r2,r2,3
   138a4:	10001826 	beq	r2,zero,13908 <write+0xbc>
   138a8:	e0bffb17 	ldw	r2,-20(fp)
   138ac:	10800017 	ldw	r2,0(r2)
   138b0:	10800617 	ldw	r2,24(r2)
   138b4:	10001426 	beq	r2,zero,13908 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   138b8:	e0bffb17 	ldw	r2,-20(fp)
   138bc:	10800017 	ldw	r2,0(r2)
   138c0:	10800617 	ldw	r2,24(r2)
   138c4:	e0ffff17 	ldw	r3,-4(fp)
   138c8:	e13ffb17 	ldw	r4,-20(fp)
   138cc:	e17ffe17 	ldw	r5,-8(fp)
   138d0:	180d883a 	mov	r6,r3
   138d4:	103ee83a 	callr	r2
   138d8:	e0bffc15 	stw	r2,-16(fp)
   138dc:	e0bffc17 	ldw	r2,-16(fp)
   138e0:	1000070e 	bge	r2,zero,13900 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   138e4:	00137fc0 	call	137fc <alt_get_errno>
   138e8:	1007883a 	mov	r3,r2
   138ec:	e0bffc17 	ldw	r2,-16(fp)
   138f0:	0085c83a 	sub	r2,zero,r2
   138f4:	18800015 	stw	r2,0(r3)
        return -1;
   138f8:	00bfffc4 	movi	r2,-1
   138fc:	00000c06 	br	13930 <write+0xe4>
      }
      return rval;
   13900:	e0bffc17 	ldw	r2,-16(fp)
   13904:	00000a06 	br	13930 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13908:	00137fc0 	call	137fc <alt_get_errno>
   1390c:	1007883a 	mov	r3,r2
   13910:	00800344 	movi	r2,13
   13914:	18800015 	stw	r2,0(r3)
   13918:	00000406 	br	1392c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1391c:	00137fc0 	call	137fc <alt_get_errno>
   13920:	1007883a 	mov	r3,r2
   13924:	00801444 	movi	r2,81
   13928:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1392c:	00bfffc4 	movi	r2,-1
}
   13930:	e037883a 	mov	sp,fp
   13934:	dfc00117 	ldw	ra,4(sp)
   13938:	df000017 	ldw	fp,0(sp)
   1393c:	dec00204 	addi	sp,sp,8
   13940:	f800283a 	ret

00013944 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   13944:	deffdf04 	addi	sp,sp,-132
   13948:	dfc02015 	stw	ra,128(sp)
   1394c:	df001f15 	stw	fp,124(sp)
   13950:	df001f04 	addi	fp,sp,124
   13954:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13958:	e0bfe204 	addi	r2,fp,-120
   1395c:	01003fc4 	movi	r4,255
   13960:	100b883a 	mov	r5,r2
   13964:	001bd680 	call	1bd68 <OSTaskQuery>
   13968:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1396c:	e0bffe83 	ldbu	r2,-6(fp)
   13970:	10803fcc 	andi	r2,r2,255
   13974:	10000126 	beq	r2,zero,1397c <__env_lock+0x38>
    return;
   13978:	00001d06 	br	139f0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   1397c:	e0bfee83 	ldbu	r2,-70(fp)
   13980:	10803fcc 	andi	r2,r2,255
   13984:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   13988:	d0e83217 	ldw	r3,-24376(gp)
   1398c:	e0bffd04 	addi	r2,fp,-12
   13990:	1809883a 	mov	r4,r3
   13994:	100b883a 	mov	r5,r2
   13998:	001a4000 	call	1a400 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1399c:	e0bffe43 	ldbu	r2,-7(fp)
   139a0:	10803fcc 	andi	r2,r2,255
   139a4:	10000726 	beq	r2,zero,139c4 <__env_lock+0x80>
   139a8:	d0a01a17 	ldw	r2,-32664(gp)
   139ac:	e0ffe117 	ldw	r3,-124(fp)
   139b0:	1880041e 	bne	r3,r2,139c4 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   139b4:	d0a83117 	ldw	r2,-24380(gp)
   139b8:	10800044 	addi	r2,r2,1
   139bc:	d0a83115 	stw	r2,-24380(gp)
   139c0:	00000a06 	br	139ec <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   139c4:	d0e83217 	ldw	r3,-24376(gp)
   139c8:	e0bffe84 	addi	r2,fp,-6
   139cc:	1809883a 	mov	r4,r3
   139d0:	000b883a 	mov	r5,zero
   139d4:	100d883a 	mov	r6,r2
   139d8:	0019f1c0 	call	19f1c <OSSemPend>
    locks  = 1;
   139dc:	00800044 	movi	r2,1
   139e0:	d0a83115 	stw	r2,-24380(gp)
    lockid = id;
   139e4:	e0bfe117 	ldw	r2,-124(fp)
   139e8:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   139ec:	0001883a 	nop
}
   139f0:	e037883a 	mov	sp,fp
   139f4:	dfc00117 	ldw	ra,4(sp)
   139f8:	df000017 	ldw	fp,0(sp)
   139fc:	dec00204 	addi	sp,sp,8
   13a00:	f800283a 	ret

00013a04 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   13a04:	defffd04 	addi	sp,sp,-12
   13a08:	dfc00215 	stw	ra,8(sp)
   13a0c:	df000115 	stw	fp,4(sp)
   13a10:	df000104 	addi	fp,sp,4
   13a14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   13a18:	d0a83117 	ldw	r2,-24380(gp)
   13a1c:	1000011e 	bne	r2,zero,13a24 <__env_unlock+0x20>
    return;
   13a20:	00000a06 	br	13a4c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   13a24:	d0a83117 	ldw	r2,-24380(gp)
   13a28:	10bfffc4 	addi	r2,r2,-1
   13a2c:	d0a83115 	stw	r2,-24380(gp)
   13a30:	d0a83117 	ldw	r2,-24380(gp)
   13a34:	1000051e 	bne	r2,zero,13a4c <__env_unlock+0x48>
  {
    lockid = -1;
   13a38:	00bfffc4 	movi	r2,-1
   13a3c:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
   13a40:	d0a83217 	ldw	r2,-24376(gp)
   13a44:	1009883a 	mov	r4,r2
   13a48:	001a2f00 	call	1a2f0 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13a4c:	e037883a 	mov	sp,fp
   13a50:	dfc00117 	ldw	ra,4(sp)
   13a54:	df000017 	ldw	fp,0(sp)
   13a58:	dec00204 	addi	sp,sp,8
   13a5c:	f800283a 	ret

00013a60 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   13a60:	deffdb04 	addi	sp,sp,-148
   13a64:	dfc02415 	stw	ra,144(sp)
   13a68:	df002315 	stw	fp,140(sp)
   13a6c:	df002304 	addi	fp,sp,140
   13a70:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a74:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   13a78:	008000b4 	movhi	r2,2
   13a7c:	10936644 	addi	r2,r2,19865
   13a80:	10800003 	ldbu	r2,0(r2)
   13a84:	10803fcc 	andi	r2,r2,255
   13a88:	10800060 	cmpeqi	r2,r2,1
   13a8c:	1000011e 	bne	r2,zero,13a94 <__malloc_lock+0x34>
      return;
   13a90:	00003606 	br	13b6c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13a94:	e0bfe204 	addi	r2,fp,-120
   13a98:	01003fc4 	movi	r4,255
   13a9c:	100b883a 	mov	r5,r2
   13aa0:	001bd680 	call	1bd68 <OSTaskQuery>
   13aa4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13aa8:	e0bffe83 	ldbu	r2,-6(fp)
   13aac:	10803fcc 	andi	r2,r2,255
   13ab0:	10000126 	beq	r2,zero,13ab8 <__malloc_lock+0x58>
    return;
   13ab4:	00002d06 	br	13b6c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   13ab8:	e0bfee83 	ldbu	r2,-70(fp)
   13abc:	10803fcc 	andi	r2,r2,255
   13ac0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13ac4:	d0e83417 	ldw	r3,-24368(gp)
   13ac8:	e0bffd04 	addi	r2,fp,-12
   13acc:	1809883a 	mov	r4,r3
   13ad0:	100b883a 	mov	r5,r2
   13ad4:	001a4000 	call	1a400 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ad8:	0005303a 	rdctl	r2,status
   13adc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ae0:	e0ffdf17 	ldw	r3,-132(fp)
   13ae4:	00bfff84 	movi	r2,-2
   13ae8:	1884703a 	and	r2,r3,r2
   13aec:	1001703a 	wrctl	status,r2
  
  return context;
   13af0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   13af4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   13af8:	e0bffd0b 	ldhu	r2,-12(fp)
   13afc:	10bfffcc 	andi	r2,r2,65535
   13b00:	10000b1e 	bne	r2,zero,13b30 <__malloc_lock+0xd0>
   13b04:	d0a01b17 	ldw	r2,-32660(gp)
   13b08:	e0ffde17 	ldw	r3,-136(fp)
   13b0c:	1880081e 	bne	r3,r2,13b30 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   13b10:	d0a83317 	ldw	r2,-24372(gp)
   13b14:	10800044 	addi	r2,r2,1
   13b18:	d0a83315 	stw	r2,-24372(gp)
   13b1c:	e0bfdd17 	ldw	r2,-140(fp)
   13b20:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b24:	e0bfe017 	ldw	r2,-128(fp)
   13b28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   13b2c:	00000e06 	br	13b68 <__malloc_lock+0x108>
   13b30:	e0bfdd17 	ldw	r2,-140(fp)
   13b34:	e0bfe115 	stw	r2,-124(fp)
   13b38:	e0bfe117 	ldw	r2,-124(fp)
   13b3c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13b40:	d0e83417 	ldw	r3,-24368(gp)
   13b44:	e0bffe84 	addi	r2,fp,-6
   13b48:	1809883a 	mov	r4,r3
   13b4c:	000b883a 	mov	r5,zero
   13b50:	100d883a 	mov	r6,r2
   13b54:	0019f1c0 	call	19f1c <OSSemPend>
    locks  = 1;
   13b58:	00800044 	movi	r2,1
   13b5c:	d0a83315 	stw	r2,-24372(gp)
    lockid = id;
   13b60:	e0bfde17 	ldw	r2,-136(fp)
   13b64:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13b68:	0001883a 	nop
}
   13b6c:	e037883a 	mov	sp,fp
   13b70:	dfc00117 	ldw	ra,4(sp)
   13b74:	df000017 	ldw	fp,0(sp)
   13b78:	dec00204 	addi	sp,sp,8
   13b7c:	f800283a 	ret

00013b80 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13b80:	defff804 	addi	sp,sp,-32
   13b84:	dfc00715 	stw	ra,28(sp)
   13b88:	df000615 	stw	fp,24(sp)
   13b8c:	df000604 	addi	fp,sp,24
   13b90:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b94:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13b98:	008000b4 	movhi	r2,2
   13b9c:	10936644 	addi	r2,r2,19865
   13ba0:	10800003 	ldbu	r2,0(r2)
   13ba4:	10803fcc 	andi	r2,r2,255
   13ba8:	10800060 	cmpeqi	r2,r2,1
   13bac:	1000011e 	bne	r2,zero,13bb4 <__malloc_unlock+0x34>
      return;
   13bb0:	00002206 	br	13c3c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bb4:	0005303a 	rdctl	r2,status
   13bb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bbc:	e0fffb17 	ldw	r3,-20(fp)
   13bc0:	00bfff84 	movi	r2,-2
   13bc4:	1884703a 	and	r2,r3,r2
   13bc8:	1001703a 	wrctl	status,r2
  
  return context;
   13bcc:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   13bd0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13bd4:	d0a83317 	ldw	r2,-24372(gp)
   13bd8:	1000051e 	bne	r2,zero,13bf0 <__malloc_unlock+0x70>
   13bdc:	e0bffa17 	ldw	r2,-24(fp)
   13be0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13be4:	e0bffc17 	ldw	r2,-16(fp)
   13be8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13bec:	00001306 	br	13c3c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13bf0:	d0a83317 	ldw	r2,-24372(gp)
   13bf4:	10bfffc4 	addi	r2,r2,-1
   13bf8:	d0a83315 	stw	r2,-24372(gp)
   13bfc:	d0a83317 	ldw	r2,-24372(gp)
   13c00:	10000a1e 	bne	r2,zero,13c2c <__malloc_unlock+0xac>
  {
    lockid = -1;
   13c04:	00bfffc4 	movi	r2,-1
   13c08:	d0a01b15 	stw	r2,-32660(gp)
   13c0c:	e0bffa17 	ldw	r2,-24(fp)
   13c10:	e0bffd15 	stw	r2,-12(fp)
   13c14:	e0bffd17 	ldw	r2,-12(fp)
   13c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   13c1c:	d0a83417 	ldw	r2,-24368(gp)
   13c20:	1009883a 	mov	r4,r2
   13c24:	001a2f00 	call	1a2f0 <OSSemPost>
   13c28:	00000406 	br	13c3c <__malloc_unlock+0xbc>
   13c2c:	e0bffa17 	ldw	r2,-24(fp)
   13c30:	e0bffe15 	stw	r2,-8(fp)
   13c34:	e0bffe17 	ldw	r2,-8(fp)
   13c38:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13c3c:	e037883a 	mov	sp,fp
   13c40:	dfc00117 	ldw	ra,4(sp)
   13c44:	df000017 	ldw	fp,0(sp)
   13c48:	dec00204 	addi	sp,sp,8
   13c4c:	f800283a 	ret

00013c50 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13c50:	defff704 	addi	sp,sp,-36
   13c54:	dfc00815 	stw	ra,32(sp)
   13c58:	df000715 	stw	fp,28(sp)
   13c5c:	df000704 	addi	fp,sp,28
   13c60:	e13ffd15 	stw	r4,-12(fp)
   13c64:	e17ffe15 	stw	r5,-8(fp)
   13c68:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13c6c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13c70:	e0bfff17 	ldw	r2,-4(fp)
   13c74:	1000021e 	bne	r2,zero,13c80 <OSEventNameGet+0x30>
        return (0);
   13c78:	0005883a 	mov	r2,zero
   13c7c:	00003706 	br	13d5c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	1000051e 	bne	r2,zero,13c9c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13c88:	e0bfff17 	ldw	r2,-4(fp)
   13c8c:	00c00104 	movi	r3,4
   13c90:	10c00005 	stb	r3,0(r2)
        return (0);
   13c94:	0005883a 	mov	r2,zero
   13c98:	00003006 	br	13d5c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13c9c:	e0bffe17 	ldw	r2,-8(fp)
   13ca0:	1000051e 	bne	r2,zero,13cb8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13ca4:	e0bfff17 	ldw	r2,-4(fp)
   13ca8:	00c00304 	movi	r3,12
   13cac:	10c00005 	stb	r3,0(r2)
        return (0);
   13cb0:	0005883a 	mov	r2,zero
   13cb4:	00002906 	br	13d5c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13cb8:	d0a84303 	ldbu	r2,-24308(gp)
   13cbc:	10803fcc 	andi	r2,r2,255
   13cc0:	10000526 	beq	r2,zero,13cd8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13cc4:	e0bfff17 	ldw	r2,-4(fp)
   13cc8:	00c00444 	movi	r3,17
   13ccc:	10c00005 	stb	r3,0(r2)
        return (0);
   13cd0:	0005883a 	mov	r2,zero
   13cd4:	00002106 	br	13d5c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13cd8:	e0bffd17 	ldw	r2,-12(fp)
   13cdc:	10800003 	ldbu	r2,0(r2)
   13ce0:	10803fcc 	andi	r2,r2,255
   13ce4:	10bfffc4 	addi	r2,r2,-1
   13ce8:	10800128 	cmpgeui	r2,r2,4
   13cec:	10000526 	beq	r2,zero,13d04 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13cf0:	e0bfff17 	ldw	r2,-4(fp)
   13cf4:	00c00044 	movi	r3,1
   13cf8:	10c00005 	stb	r3,0(r2)
             return (0);
   13cfc:	0005883a 	mov	r2,zero
   13d00:	00001606 	br	13d5c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13d04:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d08:	0005303a 	rdctl	r2,status
   13d0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d10:	e0fffb17 	ldw	r3,-20(fp)
   13d14:	00bfff84 	movi	r2,-2
   13d18:	1884703a 	and	r2,r3,r2
   13d1c:	1001703a 	wrctl	status,r2
  
  return context;
   13d20:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13d24:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13d28:	e0bffd17 	ldw	r2,-12(fp)
   13d2c:	10800384 	addi	r2,r2,14
   13d30:	e13ffe17 	ldw	r4,-8(fp)
   13d34:	100b883a 	mov	r5,r2
   13d38:	00156a40 	call	156a4 <OS_StrCopy>
   13d3c:	e0bffa05 	stb	r2,-24(fp)
   13d40:	e0bff917 	ldw	r2,-28(fp)
   13d44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d48:	e0bffc17 	ldw	r2,-16(fp)
   13d4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13d50:	e0bfff17 	ldw	r2,-4(fp)
   13d54:	10000005 	stb	zero,0(r2)
    return (len);
   13d58:	e0bffa03 	ldbu	r2,-24(fp)
}
   13d5c:	e037883a 	mov	sp,fp
   13d60:	dfc00117 	ldw	ra,4(sp)
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00204 	addi	sp,sp,8
   13d6c:	f800283a 	ret

00013d70 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13d70:	defff604 	addi	sp,sp,-40
   13d74:	dfc00915 	stw	ra,36(sp)
   13d78:	df000815 	stw	fp,32(sp)
   13d7c:	df000804 	addi	fp,sp,32
   13d80:	e13ffd15 	stw	r4,-12(fp)
   13d84:	e17ffe15 	stw	r5,-8(fp)
   13d88:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13d90:	e0bfff17 	ldw	r2,-4(fp)
   13d94:	1000011e 	bne	r2,zero,13d9c <OSEventNameSet+0x2c>
        return;
   13d98:	00003f06 	br	13e98 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	1000041e 	bne	r2,zero,13db4 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13da4:	e0bfff17 	ldw	r2,-4(fp)
   13da8:	00c00104 	movi	r3,4
   13dac:	10c00005 	stb	r3,0(r2)
        return;
   13db0:	00003906 	br	13e98 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13db4:	e0bffe17 	ldw	r2,-8(fp)
   13db8:	1000041e 	bne	r2,zero,13dcc <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13dbc:	e0bfff17 	ldw	r2,-4(fp)
   13dc0:	00c00304 	movi	r3,12
   13dc4:	10c00005 	stb	r3,0(r2)
        return;
   13dc8:	00003306 	br	13e98 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13dcc:	d0a84303 	ldbu	r2,-24308(gp)
   13dd0:	10803fcc 	andi	r2,r2,255
   13dd4:	10000426 	beq	r2,zero,13de8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   13dd8:	e0bfff17 	ldw	r2,-4(fp)
   13ddc:	00c00484 	movi	r3,18
   13de0:	10c00005 	stb	r3,0(r2)
        return;
   13de4:	00002c06 	br	13e98 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   13de8:	e0bffd17 	ldw	r2,-12(fp)
   13dec:	10800003 	ldbu	r2,0(r2)
   13df0:	10803fcc 	andi	r2,r2,255
   13df4:	10bfffc4 	addi	r2,r2,-1
   13df8:	10800128 	cmpgeui	r2,r2,4
   13dfc:	10000426 	beq	r2,zero,13e10 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13e00:	e0bfff17 	ldw	r2,-4(fp)
   13e04:	00c00044 	movi	r3,1
   13e08:	10c00005 	stb	r3,0(r2)
             return;
   13e0c:	00002206 	br	13e98 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13e10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e14:	0005303a 	rdctl	r2,status
   13e18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e1c:	e0fffa17 	ldw	r3,-24(fp)
   13e20:	00bfff84 	movi	r2,-2
   13e24:	1884703a 	and	r2,r3,r2
   13e28:	1001703a 	wrctl	status,r2
  
  return context;
   13e2c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   13e30:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   13e34:	e13ffe17 	ldw	r4,-8(fp)
   13e38:	00157180 	call	15718 <OS_StrLen>
   13e3c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13e40:	e0bff903 	ldbu	r2,-28(fp)
   13e44:	10800830 	cmpltui	r2,r2,32
   13e48:	1000081e 	bne	r2,zero,13e6c <OSEventNameSet+0xfc>
   13e4c:	e0bff817 	ldw	r2,-32(fp)
   13e50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e54:	e0bffb17 	ldw	r2,-20(fp)
   13e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13e5c:	e0bfff17 	ldw	r2,-4(fp)
   13e60:	00c002c4 	movi	r3,11
   13e64:	10c00005 	stb	r3,0(r2)
        return;
   13e68:	00000b06 	br	13e98 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13e6c:	e0bffd17 	ldw	r2,-12(fp)
   13e70:	10800384 	addi	r2,r2,14
   13e74:	1009883a 	mov	r4,r2
   13e78:	e17ffe17 	ldw	r5,-8(fp)
   13e7c:	00156a40 	call	156a4 <OS_StrCopy>
   13e80:	e0bff817 	ldw	r2,-32(fp)
   13e84:	e0bffc15 	stw	r2,-16(fp)
   13e88:	e0bffc17 	ldw	r2,-16(fp)
   13e8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13e90:	e0bfff17 	ldw	r2,-4(fp)
   13e94:	10000005 	stb	zero,0(r2)
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   13eac:	deffed04 	addi	sp,sp,-76
   13eb0:	dfc01215 	stw	ra,72(sp)
   13eb4:	df001115 	stw	fp,68(sp)
   13eb8:	df001104 	addi	fp,sp,68
   13ebc:	e13ffc15 	stw	r4,-16(fp)
   13ec0:	e17ffd15 	stw	r5,-12(fp)
   13ec4:	e1bffe15 	stw	r6,-8(fp)
   13ec8:	3805883a 	mov	r2,r7
   13ecc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13ed0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13ed4:	e0800217 	ldw	r2,8(fp)
   13ed8:	1000021e 	bne	r2,zero,13ee4 <OSEventPendMulti+0x38>
        return (0);
   13edc:	0005883a 	mov	r2,zero
   13ee0:	00017106 	br	144a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13ee4:	e0bffc17 	ldw	r2,-16(fp)
   13ee8:	1000051e 	bne	r2,zero,13f00 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   13eec:	e0800217 	ldw	r2,8(fp)
   13ef0:	00c00104 	movi	r3,4
   13ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   13ef8:	0005883a 	mov	r2,zero
   13efc:	00016a06 	br	144a8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13f00:	e0bffd17 	ldw	r2,-12(fp)
   13f04:	1000051e 	bne	r2,zero,13f1c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   13f08:	e0800217 	ldw	r2,8(fp)
   13f0c:	00c00104 	movi	r3,4
   13f10:	10c00005 	stb	r3,0(r2)
        return (0);
   13f14:	0005883a 	mov	r2,zero
   13f18:	00016306 	br	144a8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	1000051e 	bne	r2,zero,13f38 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13f24:	e0800217 	ldw	r2,8(fp)
   13f28:	00c00104 	movi	r3,4
   13f2c:	10c00005 	stb	r3,0(r2)
        return (0);
   13f30:	0005883a 	mov	r2,zero
   13f34:	00015c06 	br	144a8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   13f38:	e0bffd17 	ldw	r2,-12(fp)
   13f3c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13f40:	e0bffc17 	ldw	r2,-16(fp)
   13f44:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13f48:	e0bfef17 	ldw	r2,-68(fp)
   13f4c:	10800017 	ldw	r2,0(r2)
   13f50:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13f54:	00001906 	br	13fbc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13f58:	e0bff017 	ldw	r2,-64(fp)
   13f5c:	10800003 	ldbu	r2,0(r2)
   13f60:	10803fcc 	andi	r2,r2,255
   13f64:	10c000a0 	cmpeqi	r3,r2,2
   13f68:	1800091e 	bne	r3,zero,13f90 <OSEventPendMulti+0xe4>
   13f6c:	10c000e0 	cmpeqi	r3,r2,3
   13f70:	1800091e 	bne	r3,zero,13f98 <OSEventPendMulti+0xec>
   13f74:	10800060 	cmpeqi	r2,r2,1
   13f78:	1000091e 	bne	r2,zero,13fa0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   13f7c:	e0800217 	ldw	r2,8(fp)
   13f80:	00c00044 	movi	r3,1
   13f84:	10c00005 	stb	r3,0(r2)
                 return (0);
   13f88:	0005883a 	mov	r2,zero
   13f8c:	00014606 	br	144a8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13f90:	0001883a 	nop
   13f94:	00000306 	br	13fa4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13f98:	0001883a 	nop
   13f9c:	00000106 	br	13fa4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13fa0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13fa4:	e0bfef17 	ldw	r2,-68(fp)
   13fa8:	10800104 	addi	r2,r2,4
   13fac:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13fb0:	e0bfef17 	ldw	r2,-68(fp)
   13fb4:	10800017 	ldw	r2,0(r2)
   13fb8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   13fbc:	e0bff017 	ldw	r2,-64(fp)
   13fc0:	103fe51e 	bne	r2,zero,13f58 <__alt_mem_Flash_flash_data+0xf4013f58>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13fc4:	d0a84303 	ldbu	r2,-24308(gp)
   13fc8:	10803fcc 	andi	r2,r2,255
   13fcc:	10000526 	beq	r2,zero,13fe4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13fd0:	e0800217 	ldw	r2,8(fp)
   13fd4:	00c00084 	movi	r3,2
   13fd8:	10c00005 	stb	r3,0(r2)
        return (0);
   13fdc:	0005883a 	mov	r2,zero
   13fe0:	00013106 	br	144a8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13fe4:	d0a83503 	ldbu	r2,-24364(gp)
   13fe8:	10803fcc 	andi	r2,r2,255
   13fec:	10000526 	beq	r2,zero,14004 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13ff0:	e0800217 	ldw	r2,8(fp)
   13ff4:	00c00344 	movi	r3,13
   13ff8:	10c00005 	stb	r3,0(r2)
        return (0);
   13ffc:	0005883a 	mov	r2,zero
   14000:	00012906 	br	144a8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14004:	0005303a 	rdctl	r2,status
   14008:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1400c:	e0fff517 	ldw	r3,-44(fp)
   14010:	00bfff84 	movi	r2,-2
   14014:	1884703a 	and	r2,r3,r2
   14018:	1001703a 	wrctl	status,r2
  
  return context;
   1401c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14020:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   14024:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   14028:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1402c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   14030:	e0bffc17 	ldw	r2,-16(fp)
   14034:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   14038:	e0bfef17 	ldw	r2,-68(fp)
   1403c:	10800017 	ldw	r2,0(r2)
   14040:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   14044:	00008106 	br	1424c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   14048:	e0bff017 	ldw	r2,-64(fp)
   1404c:	10800003 	ldbu	r2,0(r2)
   14050:	10803fcc 	andi	r2,r2,255
   14054:	10c000a0 	cmpeqi	r3,r2,2
   14058:	18003c1e 	bne	r3,zero,1414c <OSEventPendMulti+0x2a0>
   1405c:	10c000e0 	cmpeqi	r3,r2,3
   14060:	1800031e 	bne	r3,zero,14070 <OSEventPendMulti+0x1c4>
   14064:	10800060 	cmpeqi	r2,r2,1
   14068:	10001e1e 	bne	r2,zero,140e4 <OSEventPendMulti+0x238>
   1406c:	00006606 	br	14208 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   14070:	e0bff017 	ldw	r2,-64(fp)
   14074:	1080020b 	ldhu	r2,8(r2)
   14078:	10bfffcc 	andi	r2,r2,65535
   1407c:	10001526 	beq	r2,zero,140d4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   14080:	e0bff017 	ldw	r2,-64(fp)
   14084:	1080020b 	ldhu	r2,8(r2)
   14088:	10bfffc4 	addi	r2,r2,-1
   1408c:	1007883a 	mov	r3,r2
   14090:	e0bff017 	ldw	r2,-64(fp)
   14094:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   14098:	e0bffd17 	ldw	r2,-12(fp)
   1409c:	10c00104 	addi	r3,r2,4
   140a0:	e0fffd15 	stw	r3,-12(fp)
   140a4:	e0fff017 	ldw	r3,-64(fp)
   140a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   140ac:	00800044 	movi	r2,1
   140b0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   140b4:	e0bffe17 	ldw	r2,-8(fp)
   140b8:	10c00104 	addi	r3,r2,4
   140bc:	e0fffe15 	stw	r3,-8(fp)
   140c0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   140c4:	e0bff18b 	ldhu	r2,-58(fp)
   140c8:	10800044 	addi	r2,r2,1
   140cc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   140d0:	00005806 	br	14234 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   140d4:	e0bff203 	ldbu	r2,-56(fp)
   140d8:	10800054 	ori	r2,r2,1
   140dc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   140e0:	00005406 	br	14234 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   140e4:	e0bff017 	ldw	r2,-64(fp)
   140e8:	10800117 	ldw	r2,4(r2)
   140ec:	10001326 	beq	r2,zero,1413c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   140f0:	e0bffe17 	ldw	r2,-8(fp)
   140f4:	10c00104 	addi	r3,r2,4
   140f8:	e0fffe15 	stw	r3,-8(fp)
   140fc:	e0fff017 	ldw	r3,-64(fp)
   14100:	18c00117 	ldw	r3,4(r3)
   14104:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   14108:	e0bff017 	ldw	r2,-64(fp)
   1410c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   14110:	e0bffd17 	ldw	r2,-12(fp)
   14114:	10c00104 	addi	r3,r2,4
   14118:	e0fffd15 	stw	r3,-12(fp)
   1411c:	e0fff017 	ldw	r3,-64(fp)
   14120:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   14124:	00800044 	movi	r2,1
   14128:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1412c:	e0bff18b 	ldhu	r2,-58(fp)
   14130:	10800044 	addi	r2,r2,1
   14134:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   14138:	00003e06 	br	14234 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1413c:	e0bff203 	ldbu	r2,-56(fp)
   14140:	10800094 	ori	r2,r2,2
   14144:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14148:	00003a06 	br	14234 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1414c:	e0bff017 	ldw	r2,-64(fp)
   14150:	10800117 	ldw	r2,4(r2)
   14154:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   14158:	e0bff417 	ldw	r2,-48(fp)
   1415c:	1080058b 	ldhu	r2,22(r2)
   14160:	10bfffcc 	andi	r2,r2,65535
   14164:	10002426 	beq	r2,zero,141f8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   14168:	e0bffe17 	ldw	r2,-8(fp)
   1416c:	10c00104 	addi	r3,r2,4
   14170:	e0fffe15 	stw	r3,-8(fp)
   14174:	e0fff417 	ldw	r3,-48(fp)
   14178:	18c00417 	ldw	r3,16(r3)
   1417c:	19400104 	addi	r5,r3,4
   14180:	e13ff417 	ldw	r4,-48(fp)
   14184:	21400415 	stw	r5,16(r4)
   14188:	18c00017 	ldw	r3,0(r3)
   1418c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   14190:	e0bff417 	ldw	r2,-48(fp)
   14194:	10c00417 	ldw	r3,16(r2)
   14198:	e0bff417 	ldw	r2,-48(fp)
   1419c:	10800217 	ldw	r2,8(r2)
   141a0:	1880041e 	bne	r3,r2,141b4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   141a4:	e0bff417 	ldw	r2,-48(fp)
   141a8:	10c00117 	ldw	r3,4(r2)
   141ac:	e0bff417 	ldw	r2,-48(fp)
   141b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   141b4:	e0bff417 	ldw	r2,-48(fp)
   141b8:	1080058b 	ldhu	r2,22(r2)
   141bc:	10bfffc4 	addi	r2,r2,-1
   141c0:	1007883a 	mov	r3,r2
   141c4:	e0bff417 	ldw	r2,-48(fp)
   141c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   141cc:	e0bffd17 	ldw	r2,-12(fp)
   141d0:	10c00104 	addi	r3,r2,4
   141d4:	e0fffd15 	stw	r3,-12(fp)
   141d8:	e0fff017 	ldw	r3,-64(fp)
   141dc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   141e0:	00800044 	movi	r2,1
   141e4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   141e8:	e0bff18b 	ldhu	r2,-58(fp)
   141ec:	10800044 	addi	r2,r2,1
   141f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   141f4:	00000f06 	br	14234 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   141f8:	e0bff203 	ldbu	r2,-56(fp)
   141fc:	10800114 	ori	r2,r2,4
   14200:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14204:	00000b06 	br	14234 <OSEventPendMulti+0x388>
   14208:	e0bff317 	ldw	r2,-52(fp)
   1420c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14210:	e0bff617 	ldw	r2,-40(fp)
   14214:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   14218:	e0bffd17 	ldw	r2,-12(fp)
   1421c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   14220:	e0800217 	ldw	r2,8(fp)
   14224:	00c00044 	movi	r3,1
   14228:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1422c:	e0bff18b 	ldhu	r2,-58(fp)
   14230:	00009d06 	br	144a8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   14234:	e0bfef17 	ldw	r2,-68(fp)
   14238:	10800104 	addi	r2,r2,4
   1423c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14240:	e0bfef17 	ldw	r2,-68(fp)
   14244:	10800017 	ldw	r2,0(r2)
   14248:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1424c:	e0bff017 	ldw	r2,-64(fp)
   14250:	103f7d1e 	bne	r2,zero,14048 <__alt_mem_Flash_flash_data+0xf4014048>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   14254:	e0bff103 	ldbu	r2,-60(fp)
   14258:	10800058 	cmpnei	r2,r2,1
   1425c:	10000a1e 	bne	r2,zero,14288 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   14260:	e0bffd17 	ldw	r2,-12(fp)
   14264:	10000015 	stw	zero,0(r2)
   14268:	e0bff317 	ldw	r2,-52(fp)
   1426c:	e0bff715 	stw	r2,-36(fp)
   14270:	e0bff717 	ldw	r2,-36(fp)
   14274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   14278:	e0800217 	ldw	r2,8(fp)
   1427c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   14280:	e0bff18b 	ldhu	r2,-58(fp)
   14284:	00008806 	br	144a8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   14288:	d0a84417 	ldw	r2,-24304(gp)
   1428c:	d0e84417 	ldw	r3,-24304(gp)
   14290:	19000c03 	ldbu	r4,48(r3)
   14294:	e0fff203 	ldbu	r3,-56(fp)
   14298:	20c6b03a 	or	r3,r4,r3
   1429c:	1809883a 	mov	r4,r3
   142a0:	00ffe004 	movi	r3,-128
   142a4:	20c6b03a 	or	r3,r4,r3
   142a8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   142ac:	d0a84417 	ldw	r2,-24304(gp)
   142b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   142b4:	d0a84417 	ldw	r2,-24304(gp)
   142b8:	e0ffff0b 	ldhu	r3,-4(fp)
   142bc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   142c0:	e13ffc17 	ldw	r4,-16(fp)
   142c4:	0014df40 	call	14df4 <OS_EventTaskWaitMulti>
   142c8:	e0bff317 	ldw	r2,-52(fp)
   142cc:	e0bff815 	stw	r2,-32(fp)
   142d0:	e0bff817 	ldw	r2,-32(fp)
   142d4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   142d8:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142dc:	0005303a 	rdctl	r2,status
   142e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142e4:	e0fff917 	ldw	r3,-28(fp)
   142e8:	00bfff84 	movi	r2,-2
   142ec:	1884703a 	and	r2,r3,r2
   142f0:	1001703a 	wrctl	status,r2
  
  return context;
   142f4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   142f8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   142fc:	d0a84417 	ldw	r2,-24304(gp)
   14300:	10800c43 	ldbu	r2,49(r2)
   14304:	10803fcc 	andi	r2,r2,255
   14308:	10000226 	beq	r2,zero,14314 <OSEventPendMulti+0x468>
   1430c:	108000a0 	cmpeqi	r2,r2,2
   14310:	10001826 	beq	r2,zero,14374 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   14314:	d0a84417 	ldw	r2,-24304(gp)
   14318:	10800717 	ldw	r2,28(r2)
   1431c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   14320:	e0bff017 	ldw	r2,-64(fp)
   14324:	10000b26 	beq	r2,zero,14354 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   14328:	e0bffd17 	ldw	r2,-12(fp)
   1432c:	10c00104 	addi	r3,r2,4
   14330:	e0fffd15 	stw	r3,-12(fp)
   14334:	e0fff017 	ldw	r3,-64(fp)
   14338:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   14344:	e0bff18b 	ldhu	r2,-58(fp)
   14348:	10800044 	addi	r2,r2,1
   1434c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   14350:	00000d06 	br	14388 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   14354:	d0a84417 	ldw	r2,-24304(gp)
   14358:	00c00044 	movi	r3,1
   1435c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14360:	d0a84417 	ldw	r2,-24304(gp)
   14364:	1009883a 	mov	r4,r2
   14368:	e17ffc17 	ldw	r5,-16(fp)
   1436c:	0014ff40 	call	14ff4 <OS_EventTaskRemoveMulti>
             }
			 break;
   14370:	00000506 	br	14388 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14374:	d0a84417 	ldw	r2,-24304(gp)
   14378:	1009883a 	mov	r4,r2
   1437c:	e17ffc17 	ldw	r5,-16(fp)
   14380:	0014ff40 	call	14ff4 <OS_EventTaskRemoveMulti>
             break;
   14384:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   14388:	d0a84417 	ldw	r2,-24304(gp)
   1438c:	10800c43 	ldbu	r2,49(r2)
   14390:	10803fcc 	andi	r2,r2,255
   14394:	10000326 	beq	r2,zero,143a4 <OSEventPendMulti+0x4f8>
   14398:	108000a0 	cmpeqi	r2,r2,2
   1439c:	1000231e 	bne	r2,zero,1442c <OSEventPendMulti+0x580>
   143a0:	00002a06 	br	1444c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   143a4:	e0bff017 	ldw	r2,-64(fp)
   143a8:	10800003 	ldbu	r2,0(r2)
   143ac:	10803fcc 	andi	r2,r2,255
   143b0:	0080100e 	bge	zero,r2,143f4 <OSEventPendMulti+0x548>
   143b4:	10c000d0 	cmplti	r3,r2,3
   143b8:	1800071e 	bne	r3,zero,143d8 <OSEventPendMulti+0x52c>
   143bc:	108000e0 	cmpeqi	r2,r2,3
   143c0:	10000c26 	beq	r2,zero,143f4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   143c4:	e0bffe17 	ldw	r2,-8(fp)
   143c8:	10c00104 	addi	r3,r2,4
   143cc:	e0fffe15 	stw	r3,-8(fp)
   143d0:	10000015 	stw	zero,0(r2)
                      break;
   143d4:	00001206 	br	14420 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   143d8:	e0bffe17 	ldw	r2,-8(fp)
   143dc:	10c00104 	addi	r3,r2,4
   143e0:	e0fffe15 	stw	r3,-8(fp)
   143e4:	d0e84417 	ldw	r3,-24304(gp)
   143e8:	18c00917 	ldw	r3,36(r3)
   143ec:	10c00015 	stw	r3,0(r2)
                      break;
   143f0:	00000b06 	br	14420 <OSEventPendMulti+0x574>
   143f4:	e0bff317 	ldw	r2,-52(fp)
   143f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143fc:	e0bffa17 	ldw	r2,-24(fp)
   14400:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   14404:	e0bffd17 	ldw	r2,-12(fp)
   14408:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1440c:	e0800217 	ldw	r2,8(fp)
   14410:	00c00044 	movi	r3,1
   14414:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   14418:	e0bff18b 	ldhu	r2,-58(fp)
   1441c:	00002206 	br	144a8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   14420:	e0800217 	ldw	r2,8(fp)
   14424:	10000005 	stb	zero,0(r2)
             break;
   14428:	00001006 	br	1446c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1442c:	e0bffe17 	ldw	r2,-8(fp)
   14430:	10c00104 	addi	r3,r2,4
   14434:	e0fffe15 	stw	r3,-8(fp)
   14438:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1443c:	e0800217 	ldw	r2,8(fp)
   14440:	00c00384 	movi	r3,14
   14444:	10c00005 	stb	r3,0(r2)
             break;
   14448:	00000806 	br	1446c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1444c:	e0bffe17 	ldw	r2,-8(fp)
   14450:	10c00104 	addi	r3,r2,4
   14454:	e0fffe15 	stw	r3,-8(fp)
   14458:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1445c:	e0800217 	ldw	r2,8(fp)
   14460:	00c00284 	movi	r3,10
   14464:	10c00005 	stb	r3,0(r2)
             break;
   14468:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1446c:	d0a84417 	ldw	r2,-24304(gp)
   14470:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   14474:	d0a84417 	ldw	r2,-24304(gp)
   14478:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1447c:	d0a84417 	ldw	r2,-24304(gp)
   14480:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14484:	d0a84417 	ldw	r2,-24304(gp)
   14488:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1448c:	d0a84417 	ldw	r2,-24304(gp)
   14490:	10000915 	stw	zero,36(r2)
   14494:	e0bff317 	ldw	r2,-52(fp)
   14498:	e0bffb15 	stw	r2,-20(fp)
   1449c:	e0bffb17 	ldw	r2,-20(fp)
   144a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   144a4:	e0bff18b 	ldhu	r2,-58(fp)
}
   144a8:	e037883a 	mov	sp,fp
   144ac:	dfc00117 	ldw	ra,4(sp)
   144b0:	df000017 	ldw	fp,0(sp)
   144b4:	dec00204 	addi	sp,sp,8
   144b8:	f800283a 	ret

000144bc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   144bc:	defffe04 	addi	sp,sp,-8
   144c0:	dfc00115 	stw	ra,4(sp)
   144c4:	df000015 	stw	fp,0(sp)
   144c8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   144cc:	001fa300 	call	1fa30 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   144d0:	00152300 	call	15230 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   144d4:	00152740 	call	15274 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   144d8:	00153d40 	call	153d4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   144dc:	00151540 	call	15154 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   144e0:	00173540 	call	17354 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   144e4:	00188240 	call	18824 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   144e8:	0019a580 	call	19a58 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   144ec:	00152dc0 	call	152dc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   144f0:	00153580 	call	15358 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   144f4:	001fa4c0 	call	1fa4c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   144f8:	0015c400 	call	15c40 <OSDebugInit>
#endif
}
   144fc:	e037883a 	mov	sp,fp
   14500:	dfc00117 	ldw	ra,4(sp)
   14504:	df000017 	ldw	fp,0(sp)
   14508:	dec00204 	addi	sp,sp,8
   1450c:	f800283a 	ret

00014510 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   14510:	defffc04 	addi	sp,sp,-16
   14514:	df000315 	stw	fp,12(sp)
   14518:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1451c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   14520:	d0a83543 	ldbu	r2,-24363(gp)
   14524:	10803fcc 	andi	r2,r2,255
   14528:	10800058 	cmpnei	r2,r2,1
   1452c:	1000131e 	bne	r2,zero,1457c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14530:	0005303a 	rdctl	r2,status
   14534:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14538:	e0fffe17 	ldw	r3,-8(fp)
   1453c:	00bfff84 	movi	r2,-2
   14540:	1884703a 	and	r2,r3,r2
   14544:	1001703a 	wrctl	status,r2
  
  return context;
   14548:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1454c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   14550:	d0a84303 	ldbu	r2,-24308(gp)
   14554:	10803fcc 	andi	r2,r2,255
   14558:	10803fe0 	cmpeqi	r2,r2,255
   1455c:	1000031e 	bne	r2,zero,1456c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   14560:	d0a84303 	ldbu	r2,-24308(gp)
   14564:	10800044 	addi	r2,r2,1
   14568:	d0a84305 	stb	r2,-24308(gp)
   1456c:	e0bffd17 	ldw	r2,-12(fp)
   14570:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14574:	e0bfff17 	ldw	r2,-4(fp)
   14578:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   1457c:	e037883a 	mov	sp,fp
   14580:	df000017 	ldw	fp,0(sp)
   14584:	dec00104 	addi	sp,sp,4
   14588:	f800283a 	ret

0001458c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1458c:	defffb04 	addi	sp,sp,-20
   14590:	dfc00415 	stw	ra,16(sp)
   14594:	df000315 	stw	fp,12(sp)
   14598:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1459c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   145a0:	d0a83543 	ldbu	r2,-24363(gp)
   145a4:	10803fcc 	andi	r2,r2,255
   145a8:	10800058 	cmpnei	r2,r2,1
   145ac:	10002f1e 	bne	r2,zero,1466c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145b0:	0005303a 	rdctl	r2,status
   145b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145b8:	e0fffe17 	ldw	r3,-8(fp)
   145bc:	00bfff84 	movi	r2,-2
   145c0:	1884703a 	and	r2,r3,r2
   145c4:	1001703a 	wrctl	status,r2
  
  return context;
   145c8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   145cc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   145d0:	d0a84303 	ldbu	r2,-24308(gp)
   145d4:	10803fcc 	andi	r2,r2,255
   145d8:	10000326 	beq	r2,zero,145e8 <OSIntExit+0x5c>
            OSIntNesting--;
   145dc:	d0a84303 	ldbu	r2,-24308(gp)
   145e0:	10bfffc4 	addi	r2,r2,-1
   145e4:	d0a84305 	stb	r2,-24308(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   145e8:	d0a84303 	ldbu	r2,-24308(gp)
   145ec:	10803fcc 	andi	r2,r2,255
   145f0:	10001a1e 	bne	r2,zero,1465c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   145f4:	d0a83503 	ldbu	r2,-24364(gp)
   145f8:	10803fcc 	andi	r2,r2,255
   145fc:	1000171e 	bne	r2,zero,1465c <OSIntExit+0xd0>
                OS_SchedNew();
   14600:	00156340 	call	15634 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   14604:	d0e83703 	ldbu	r3,-24356(gp)
   14608:	d0a83743 	ldbu	r2,-24355(gp)
   1460c:	18c03fcc 	andi	r3,r3,255
   14610:	10803fcc 	andi	r2,r2,255
   14614:	18801126 	beq	r3,r2,1465c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   14618:	d0a83703 	ldbu	r2,-24356(gp)
   1461c:	10c03fcc 	andi	r3,r2,255
   14620:	00800174 	movhi	r2,5
   14624:	10a81704 	addi	r2,r2,-24484
   14628:	18c7883a 	add	r3,r3,r3
   1462c:	18c7883a 	add	r3,r3,r3
   14630:	10c5883a 	add	r2,r2,r3
   14634:	10800017 	ldw	r2,0(r2)
   14638:	d0a83f15 	stw	r2,-24324(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1463c:	d0a83f17 	ldw	r2,-24324(gp)
   14640:	10c00e17 	ldw	r3,56(r2)
   14644:	18c00044 	addi	r3,r3,1
   14648:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1464c:	d0a83a17 	ldw	r2,-24344(gp)
   14650:	10800044 	addi	r2,r2,1
   14654:	d0a83a15 	stw	r2,-24344(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   14658:	001f7700 	call	1f770 <OSCtxSw>
   1465c:	e0bffd17 	ldw	r2,-12(fp)
   14660:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14664:	e0bfff17 	ldw	r2,-4(fp)
   14668:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1466c:	e037883a 	mov	sp,fp
   14670:	dfc00117 	ldw	ra,4(sp)
   14674:	df000017 	ldw	fp,0(sp)
   14678:	dec00204 	addi	sp,sp,8
   1467c:	f800283a 	ret

00014680 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   14680:	defffc04 	addi	sp,sp,-16
   14684:	df000315 	stw	fp,12(sp)
   14688:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1468c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   14690:	d0a83543 	ldbu	r2,-24363(gp)
   14694:	10803fcc 	andi	r2,r2,255
   14698:	10800058 	cmpnei	r2,r2,1
   1469c:	1000161e 	bne	r2,zero,146f8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146a0:	0005303a 	rdctl	r2,status
   146a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146a8:	e0fffe17 	ldw	r3,-8(fp)
   146ac:	00bfff84 	movi	r2,-2
   146b0:	1884703a 	and	r2,r3,r2
   146b4:	1001703a 	wrctl	status,r2
  
  return context;
   146b8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   146bc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   146c0:	d0a84303 	ldbu	r2,-24308(gp)
   146c4:	10803fcc 	andi	r2,r2,255
   146c8:	1000071e 	bne	r2,zero,146e8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   146cc:	d0a83503 	ldbu	r2,-24364(gp)
   146d0:	10803fcc 	andi	r2,r2,255
   146d4:	10803fe0 	cmpeqi	r2,r2,255
   146d8:	1000031e 	bne	r2,zero,146e8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   146dc:	d0a83503 	ldbu	r2,-24364(gp)
   146e0:	10800044 	addi	r2,r2,1
   146e4:	d0a83505 	stb	r2,-24364(gp)
   146e8:	e0bffd17 	ldw	r2,-12(fp)
   146ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146f0:	e0bfff17 	ldw	r2,-4(fp)
   146f4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   146f8:	e037883a 	mov	sp,fp
   146fc:	df000017 	ldw	fp,0(sp)
   14700:	dec00104 	addi	sp,sp,4
   14704:	f800283a 	ret

00014708 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   14708:	defff804 	addi	sp,sp,-32
   1470c:	dfc00715 	stw	ra,28(sp)
   14710:	df000615 	stw	fp,24(sp)
   14714:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14718:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1471c:	d0a83543 	ldbu	r2,-24363(gp)
   14720:	10803fcc 	andi	r2,r2,255
   14724:	10800058 	cmpnei	r2,r2,1
   14728:	1000281e 	bne	r2,zero,147cc <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1472c:	0005303a 	rdctl	r2,status
   14730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14734:	e0fffb17 	ldw	r3,-20(fp)
   14738:	00bfff84 	movi	r2,-2
   1473c:	1884703a 	and	r2,r3,r2
   14740:	1001703a 	wrctl	status,r2
  
  return context;
   14744:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14748:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1474c:	d0a83503 	ldbu	r2,-24364(gp)
   14750:	10803fcc 	andi	r2,r2,255
   14754:	10001926 	beq	r2,zero,147bc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   14758:	d0a83503 	ldbu	r2,-24364(gp)
   1475c:	10bfffc4 	addi	r2,r2,-1
   14760:	d0a83505 	stb	r2,-24364(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   14764:	d0a83503 	ldbu	r2,-24364(gp)
   14768:	10803fcc 	andi	r2,r2,255
   1476c:	10000e1e 	bne	r2,zero,147a8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   14770:	d0a84303 	ldbu	r2,-24308(gp)
   14774:	10803fcc 	andi	r2,r2,255
   14778:	1000061e 	bne	r2,zero,14794 <OSSchedUnlock+0x8c>
   1477c:	e0bffa17 	ldw	r2,-24(fp)
   14780:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14784:	e0bffc17 	ldw	r2,-16(fp)
   14788:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   1478c:	00155680 	call	15568 <OS_Sched>
   14790:	00000e06 	br	147cc <OSSchedUnlock+0xc4>
   14794:	e0bffa17 	ldw	r2,-24(fp)
   14798:	e0bffd15 	stw	r2,-12(fp)
   1479c:	e0bffd17 	ldw	r2,-12(fp)
   147a0:	1001703a 	wrctl	status,r2
   147a4:	00000906 	br	147cc <OSSchedUnlock+0xc4>
   147a8:	e0bffa17 	ldw	r2,-24(fp)
   147ac:	e0bffe15 	stw	r2,-8(fp)
   147b0:	e0bffe17 	ldw	r2,-8(fp)
   147b4:	1001703a 	wrctl	status,r2
   147b8:	00000406 	br	147cc <OSSchedUnlock+0xc4>
   147bc:	e0bffa17 	ldw	r2,-24(fp)
   147c0:	e0bfff15 	stw	r2,-4(fp)
   147c4:	e0bfff17 	ldw	r2,-4(fp)
   147c8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   147cc:	e037883a 	mov	sp,fp
   147d0:	dfc00117 	ldw	ra,4(sp)
   147d4:	df000017 	ldw	fp,0(sp)
   147d8:	dec00204 	addi	sp,sp,8
   147dc:	f800283a 	ret

000147e0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   147e0:	defffe04 	addi	sp,sp,-8
   147e4:	dfc00115 	stw	ra,4(sp)
   147e8:	df000015 	stw	fp,0(sp)
   147ec:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   147f0:	d0a83543 	ldbu	r2,-24363(gp)
   147f4:	10803fcc 	andi	r2,r2,255
   147f8:	10000f1e 	bne	r2,zero,14838 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   147fc:	00156340 	call	15634 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   14800:	d0a83703 	ldbu	r2,-24356(gp)
   14804:	d0a83745 	stb	r2,-24355(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   14808:	d0a83703 	ldbu	r2,-24356(gp)
   1480c:	10c03fcc 	andi	r3,r2,255
   14810:	00800174 	movhi	r2,5
   14814:	10a81704 	addi	r2,r2,-24484
   14818:	18c7883a 	add	r3,r3,r3
   1481c:	18c7883a 	add	r3,r3,r3
   14820:	10c5883a 	add	r2,r2,r3
   14824:	10800017 	ldw	r2,0(r2)
   14828:	d0a83f15 	stw	r2,-24324(gp)
        OSTCBCur      = OSTCBHighRdy;
   1482c:	d0a83f17 	ldw	r2,-24324(gp)
   14830:	d0a84415 	stw	r2,-24304(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   14834:	001f7fc0 	call	1f7fc <OSStartHighRdy>
    }
}
   14838:	e037883a 	mov	sp,fp
   1483c:	dfc00117 	ldw	ra,4(sp)
   14840:	df000017 	ldw	fp,0(sp)
   14844:	dec00204 	addi	sp,sp,8
   14848:	f800283a 	ret

0001484c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1484c:	defff904 	addi	sp,sp,-28
   14850:	dfc00615 	stw	ra,24(sp)
   14854:	df000515 	stw	fp,20(sp)
   14858:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1485c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   14860:	01000084 	movi	r4,2
   14864:	001bf000 	call	1bf00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14868:	0005303a 	rdctl	r2,status
   1486c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14870:	e0fffc17 	ldw	r3,-16(fp)
   14874:	00bfff84 	movi	r2,-2
   14878:	1884703a 	and	r2,r3,r2
   1487c:	1001703a 	wrctl	status,r2
  
  return context;
   14880:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   14884:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   14888:	d0283615 	stw	zero,-24360(gp)
   1488c:	e0bffb17 	ldw	r2,-20(fp)
   14890:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14894:	e0bffd17 	ldw	r2,-12(fp)
   14898:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1489c:	0009883a 	mov	r4,zero
   148a0:	001bf000 	call	1bf00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148a4:	0005303a 	rdctl	r2,status
   148a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148ac:	e0fffe17 	ldw	r3,-8(fp)
   148b0:	00bfff84 	movi	r2,-2
   148b4:	1884703a 	and	r2,r3,r2
   148b8:	1001703a 	wrctl	status,r2
  
  return context;
   148bc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   148c0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   148c4:	d0a83617 	ldw	r2,-24360(gp)
   148c8:	d0a83b15 	stw	r2,-24340(gp)
    OSStatRdy    = OS_TRUE;
   148cc:	00800044 	movi	r2,1
   148d0:	d0a84705 	stb	r2,-24292(gp)
   148d4:	e0bffb17 	ldw	r2,-20(fp)
   148d8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148dc:	e0bfff17 	ldw	r2,-4(fp)
   148e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   148e4:	e037883a 	mov	sp,fp
   148e8:	dfc00117 	ldw	ra,4(sp)
   148ec:	df000017 	ldw	fp,0(sp)
   148f0:	dec00204 	addi	sp,sp,8
   148f4:	f800283a 	ret

000148f8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   148f8:	defff704 	addi	sp,sp,-36
   148fc:	dfc00815 	stw	ra,32(sp)
   14900:	df000715 	stw	fp,28(sp)
   14904:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14908:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1490c:	001fa140 	call	1fa14 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14910:	0005303a 	rdctl	r2,status
   14914:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14918:	e0fffc17 	ldw	r3,-16(fp)
   1491c:	00bfff84 	movi	r2,-2
   14920:	1884703a 	and	r2,r3,r2
   14924:	1001703a 	wrctl	status,r2
  
  return context;
   14928:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1492c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   14930:	d0a84517 	ldw	r2,-24300(gp)
   14934:	10800044 	addi	r2,r2,1
   14938:	d0a84515 	stw	r2,-24300(gp)
   1493c:	e0bffb17 	ldw	r2,-20(fp)
   14940:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14944:	e0bffd17 	ldw	r2,-12(fp)
   14948:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1494c:	d0a83543 	ldbu	r2,-24363(gp)
   14950:	10803fcc 	andi	r2,r2,255
   14954:	10800058 	cmpnei	r2,r2,1
   14958:	1000691e 	bne	r2,zero,14b00 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1495c:	d0a83903 	ldbu	r2,-24348(gp)
   14960:	10803fcc 	andi	r2,r2,255
   14964:	10c00060 	cmpeqi	r3,r2,1
   14968:	1800061e 	bne	r3,zero,14984 <OSTimeTick+0x8c>
   1496c:	10c000a0 	cmpeqi	r3,r2,2
   14970:	1800061e 	bne	r3,zero,1498c <OSTimeTick+0x94>
   14974:	10000a1e 	bne	r2,zero,149a0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   14978:	00800044 	movi	r2,1
   1497c:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14980:	00000b06 	br	149b0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   14984:	e03ffa05 	stb	zero,-24(fp)
                 break;
   14988:	00000906 	br	149b0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   1498c:	00800044 	movi	r2,1
   14990:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   14994:	00800044 	movi	r2,1
   14998:	d0a83905 	stb	r2,-24348(gp)
                 break;
   1499c:	00000406 	br	149b0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   149a0:	00800044 	movi	r2,1
   149a4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   149a8:	d0283905 	stb	zero,-24348(gp)
                 break;
   149ac:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   149b0:	e0bffa03 	ldbu	r2,-24(fp)
   149b4:	1000011e 	bne	r2,zero,149bc <OSTimeTick+0xc4>
            return;
   149b8:	00005106 	br	14b00 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   149bc:	d0a83817 	ldw	r2,-24352(gp)
   149c0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   149c4:	00004906 	br	14aec <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149c8:	0005303a 	rdctl	r2,status
   149cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149d0:	e0fffe17 	ldw	r3,-8(fp)
   149d4:	00bfff84 	movi	r2,-2
   149d8:	1884703a 	and	r2,r3,r2
   149dc:	1001703a 	wrctl	status,r2
  
  return context;
   149e0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   149e4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   149e8:	e0bff917 	ldw	r2,-28(fp)
   149ec:	10800b8b 	ldhu	r2,46(r2)
   149f0:	10bfffcc 	andi	r2,r2,65535
   149f4:	10003626 	beq	r2,zero,14ad0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   149f8:	e0bff917 	ldw	r2,-28(fp)
   149fc:	10800b8b 	ldhu	r2,46(r2)
   14a00:	10bfffc4 	addi	r2,r2,-1
   14a04:	1007883a 	mov	r3,r2
   14a08:	e0bff917 	ldw	r2,-28(fp)
   14a0c:	10c00b8d 	sth	r3,46(r2)
   14a10:	e0bff917 	ldw	r2,-28(fp)
   14a14:	10800b8b 	ldhu	r2,46(r2)
   14a18:	10bfffcc 	andi	r2,r2,65535
   14a1c:	10002c1e 	bne	r2,zero,14ad0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   14a20:	e0bff917 	ldw	r2,-28(fp)
   14a24:	10800c03 	ldbu	r2,48(r2)
   14a28:	10803fcc 	andi	r2,r2,255
   14a2c:	10800dcc 	andi	r2,r2,55
   14a30:	10000b26 	beq	r2,zero,14a60 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   14a34:	e0bff917 	ldw	r2,-28(fp)
   14a38:	10c00c03 	ldbu	r3,48(r2)
   14a3c:	00bff204 	movi	r2,-56
   14a40:	1884703a 	and	r2,r3,r2
   14a44:	1007883a 	mov	r3,r2
   14a48:	e0bff917 	ldw	r2,-28(fp)
   14a4c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   14a50:	e0bff917 	ldw	r2,-28(fp)
   14a54:	00c00044 	movi	r3,1
   14a58:	10c00c45 	stb	r3,49(r2)
   14a5c:	00000206 	br	14a68 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14a60:	e0bff917 	ldw	r2,-28(fp)
   14a64:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   14a68:	e0bff917 	ldw	r2,-28(fp)
   14a6c:	10800c03 	ldbu	r2,48(r2)
   14a70:	10803fcc 	andi	r2,r2,255
   14a74:	1080020c 	andi	r2,r2,8
   14a78:	1000151e 	bne	r2,zero,14ad0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14a7c:	e0bff917 	ldw	r2,-28(fp)
   14a80:	10c00d83 	ldbu	r3,54(r2)
   14a84:	d0a84103 	ldbu	r2,-24316(gp)
   14a88:	1884b03a 	or	r2,r3,r2
   14a8c:	d0a84105 	stb	r2,-24316(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14a90:	e0bff917 	ldw	r2,-28(fp)
   14a94:	10800d03 	ldbu	r2,52(r2)
   14a98:	10c03fcc 	andi	r3,r2,255
   14a9c:	e0bff917 	ldw	r2,-28(fp)
   14aa0:	10800d03 	ldbu	r2,52(r2)
   14aa4:	11003fcc 	andi	r4,r2,255
   14aa8:	d0a84144 	addi	r2,gp,-24315
   14aac:	2085883a 	add	r2,r4,r2
   14ab0:	11000003 	ldbu	r4,0(r2)
   14ab4:	e0bff917 	ldw	r2,-28(fp)
   14ab8:	10800d43 	ldbu	r2,53(r2)
   14abc:	2084b03a 	or	r2,r4,r2
   14ac0:	1009883a 	mov	r4,r2
   14ac4:	d0a84144 	addi	r2,gp,-24315
   14ac8:	1885883a 	add	r2,r3,r2
   14acc:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14ad0:	e0bff917 	ldw	r2,-28(fp)
   14ad4:	10800517 	ldw	r2,20(r2)
   14ad8:	e0bff915 	stw	r2,-28(fp)
   14adc:	e0bffb17 	ldw	r2,-20(fp)
   14ae0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14aec:	e0bff917 	ldw	r2,-28(fp)
   14af0:	10800c83 	ldbu	r2,50(r2)
   14af4:	10803fcc 	andi	r2,r2,255
   14af8:	10800518 	cmpnei	r2,r2,20
   14afc:	103fb21e 	bne	r2,zero,149c8 <__alt_mem_Flash_flash_data+0xf40149c8>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   14b00:	e037883a 	mov	sp,fp
   14b04:	dfc00117 	ldw	ra,4(sp)
   14b08:	df000017 	ldw	fp,0(sp)
   14b0c:	dec00204 	addi	sp,sp,8
   14b10:	f800283a 	ret

00014b14 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   14b14:	deffff04 	addi	sp,sp,-4
   14b18:	df000015 	stw	fp,0(sp)
   14b1c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   14b20:	00804784 	movi	r2,286
}
   14b24:	e037883a 	mov	sp,fp
   14b28:	df000017 	ldw	fp,0(sp)
   14b2c:	dec00104 	addi	sp,sp,4
   14b30:	f800283a 	ret

00014b34 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   14b34:	deffff04 	addi	sp,sp,-4
   14b38:	df000015 	stw	fp,0(sp)
   14b3c:	d839883a 	mov	fp,sp
}
   14b40:	e037883a 	mov	sp,fp
   14b44:	df000017 	ldw	fp,0(sp)
   14b48:	dec00104 	addi	sp,sp,4
   14b4c:	f800283a 	ret

00014b50 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14b50:	defff804 	addi	sp,sp,-32
   14b54:	dfc00715 	stw	ra,28(sp)
   14b58:	df000615 	stw	fp,24(sp)
   14b5c:	df000604 	addi	fp,sp,24
   14b60:	e13ffc15 	stw	r4,-16(fp)
   14b64:	e17ffd15 	stw	r5,-12(fp)
   14b68:	3007883a 	mov	r3,r6
   14b6c:	3805883a 	mov	r2,r7
   14b70:	e0fffe05 	stb	r3,-8(fp)
   14b74:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14b78:	e0bffc17 	ldw	r2,-16(fp)
   14b7c:	10800283 	ldbu	r2,10(r2)
   14b80:	10c03fcc 	andi	r3,r2,255
   14b84:	008000b4 	movhi	r2,2
   14b88:	1082ee04 	addi	r2,r2,3000
   14b8c:	10c5883a 	add	r2,r2,r3
   14b90:	10800003 	ldbu	r2,0(r2)
   14b94:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14b98:	e0bffa03 	ldbu	r2,-24(fp)
   14b9c:	e0fffc17 	ldw	r3,-16(fp)
   14ba0:	1885883a 	add	r2,r3,r2
   14ba4:	10800204 	addi	r2,r2,8
   14ba8:	108000c3 	ldbu	r2,3(r2)
   14bac:	10c03fcc 	andi	r3,r2,255
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	1082ee04 	addi	r2,r2,3000
   14bb8:	10c5883a 	add	r2,r2,r3
   14bbc:	10800003 	ldbu	r2,0(r2)
   14bc0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14bc4:	e0bffa03 	ldbu	r2,-24(fp)
   14bc8:	100490fa 	slli	r2,r2,3
   14bcc:	1007883a 	mov	r3,r2
   14bd0:	e0bffa43 	ldbu	r2,-23(fp)
   14bd4:	1885883a 	add	r2,r3,r2
   14bd8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   14bdc:	e0fffa83 	ldbu	r3,-22(fp)
   14be0:	00800174 	movhi	r2,5
   14be4:	10a81704 	addi	r2,r2,-24484
   14be8:	18c7883a 	add	r3,r3,r3
   14bec:	18c7883a 	add	r3,r3,r3
   14bf0:	10c5883a 	add	r2,r2,r3
   14bf4:	10800017 	ldw	r2,0(r2)
   14bf8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   14bfc:	e0bffb17 	ldw	r2,-20(fp)
   14c00:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14c04:	e0bffb17 	ldw	r2,-20(fp)
   14c08:	e0fffd17 	ldw	r3,-12(fp)
   14c0c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14c10:	e0bffb17 	ldw	r2,-20(fp)
   14c14:	10800c03 	ldbu	r2,48(r2)
   14c18:	1007883a 	mov	r3,r2
   14c1c:	e0bffe03 	ldbu	r2,-8(fp)
   14c20:	0084303a 	nor	r2,zero,r2
   14c24:	1884703a 	and	r2,r3,r2
   14c28:	1007883a 	mov	r3,r2
   14c2c:	e0bffb17 	ldw	r2,-20(fp)
   14c30:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14c34:	e0bffb17 	ldw	r2,-20(fp)
   14c38:	e0ffff03 	ldbu	r3,-4(fp)
   14c3c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14c40:	e0bffb17 	ldw	r2,-20(fp)
   14c44:	10800c03 	ldbu	r2,48(r2)
   14c48:	10803fcc 	andi	r2,r2,255
   14c4c:	1080020c 	andi	r2,r2,8
   14c50:	1000111e 	bne	r2,zero,14c98 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14c54:	e0bffb17 	ldw	r2,-20(fp)
   14c58:	10c00d83 	ldbu	r3,54(r2)
   14c5c:	d0a84103 	ldbu	r2,-24316(gp)
   14c60:	1884b03a 	or	r2,r3,r2
   14c64:	d0a84105 	stb	r2,-24316(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14c68:	e0fffa03 	ldbu	r3,-24(fp)
   14c6c:	e13ffa03 	ldbu	r4,-24(fp)
   14c70:	d0a84144 	addi	r2,gp,-24315
   14c74:	2085883a 	add	r2,r4,r2
   14c78:	11000003 	ldbu	r4,0(r2)
   14c7c:	e0bffb17 	ldw	r2,-20(fp)
   14c80:	10800d43 	ldbu	r2,53(r2)
   14c84:	2084b03a 	or	r2,r4,r2
   14c88:	1009883a 	mov	r4,r2
   14c8c:	d0a84144 	addi	r2,gp,-24315
   14c90:	1885883a 	add	r2,r3,r2
   14c94:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14c98:	e13ffb17 	ldw	r4,-20(fp)
   14c9c:	e17ffc17 	ldw	r5,-16(fp)
   14ca0:	0014f400 	call	14f40 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14ca4:	e0bffb17 	ldw	r2,-20(fp)
   14ca8:	10800817 	ldw	r2,32(r2)
   14cac:	10000826 	beq	r2,zero,14cd0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14cb0:	e0bffb17 	ldw	r2,-20(fp)
   14cb4:	10800817 	ldw	r2,32(r2)
   14cb8:	e13ffb17 	ldw	r4,-20(fp)
   14cbc:	100b883a 	mov	r5,r2
   14cc0:	0014ff40 	call	14ff4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14cc4:	e0bffb17 	ldw	r2,-20(fp)
   14cc8:	e0fffc17 	ldw	r3,-16(fp)
   14ccc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14cd0:	e0bffa83 	ldbu	r2,-22(fp)
}
   14cd4:	e037883a 	mov	sp,fp
   14cd8:	dfc00117 	ldw	ra,4(sp)
   14cdc:	df000017 	ldw	fp,0(sp)
   14ce0:	dec00204 	addi	sp,sp,8
   14ce4:	f800283a 	ret

00014ce8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14ce8:	defffd04 	addi	sp,sp,-12
   14cec:	df000215 	stw	fp,8(sp)
   14cf0:	df000204 	addi	fp,sp,8
   14cf4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14cf8:	d0a84417 	ldw	r2,-24304(gp)
   14cfc:	e0ffff17 	ldw	r3,-4(fp)
   14d00:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14d04:	d0a84417 	ldw	r2,-24304(gp)
   14d08:	10800d03 	ldbu	r2,52(r2)
   14d0c:	10803fcc 	andi	r2,r2,255
   14d10:	d0e84417 	ldw	r3,-24304(gp)
   14d14:	18c00d03 	ldbu	r3,52(r3)
   14d18:	18c03fcc 	andi	r3,r3,255
   14d1c:	e13fff17 	ldw	r4,-4(fp)
   14d20:	20c7883a 	add	r3,r4,r3
   14d24:	18c00204 	addi	r3,r3,8
   14d28:	190000c3 	ldbu	r4,3(r3)
   14d2c:	d0e84417 	ldw	r3,-24304(gp)
   14d30:	18c00d43 	ldbu	r3,53(r3)
   14d34:	20c6b03a 	or	r3,r4,r3
   14d38:	1809883a 	mov	r4,r3
   14d3c:	e0ffff17 	ldw	r3,-4(fp)
   14d40:	1885883a 	add	r2,r3,r2
   14d44:	10800204 	addi	r2,r2,8
   14d48:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14d4c:	e0bfff17 	ldw	r2,-4(fp)
   14d50:	10c00283 	ldbu	r3,10(r2)
   14d54:	d0a84417 	ldw	r2,-24304(gp)
   14d58:	10800d83 	ldbu	r2,54(r2)
   14d5c:	1884b03a 	or	r2,r3,r2
   14d60:	1007883a 	mov	r3,r2
   14d64:	e0bfff17 	ldw	r2,-4(fp)
   14d68:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14d6c:	d0a84417 	ldw	r2,-24304(gp)
   14d70:	10800d03 	ldbu	r2,52(r2)
   14d74:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14d78:	e0fffe03 	ldbu	r3,-8(fp)
   14d7c:	e13ffe03 	ldbu	r4,-8(fp)
   14d80:	d0a84144 	addi	r2,gp,-24315
   14d84:	2085883a 	add	r2,r4,r2
   14d88:	10800003 	ldbu	r2,0(r2)
   14d8c:	1009883a 	mov	r4,r2
   14d90:	d0a84417 	ldw	r2,-24304(gp)
   14d94:	10800d43 	ldbu	r2,53(r2)
   14d98:	0084303a 	nor	r2,zero,r2
   14d9c:	2084703a 	and	r2,r4,r2
   14da0:	1009883a 	mov	r4,r2
   14da4:	d0a84144 	addi	r2,gp,-24315
   14da8:	1885883a 	add	r2,r3,r2
   14dac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14db0:	e0fffe03 	ldbu	r3,-8(fp)
   14db4:	d0a84144 	addi	r2,gp,-24315
   14db8:	1885883a 	add	r2,r3,r2
   14dbc:	10800003 	ldbu	r2,0(r2)
   14dc0:	10803fcc 	andi	r2,r2,255
   14dc4:	1000071e 	bne	r2,zero,14de4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14dc8:	d0a84417 	ldw	r2,-24304(gp)
   14dcc:	10800d83 	ldbu	r2,54(r2)
   14dd0:	0084303a 	nor	r2,zero,r2
   14dd4:	1007883a 	mov	r3,r2
   14dd8:	d0a84103 	ldbu	r2,-24316(gp)
   14ddc:	1884703a 	and	r2,r3,r2
   14de0:	d0a84105 	stb	r2,-24316(gp)
    }
}
   14de4:	e037883a 	mov	sp,fp
   14de8:	df000017 	ldw	fp,0(sp)
   14dec:	dec00104 	addi	sp,sp,4
   14df0:	f800283a 	ret

00014df4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   14df4:	defffb04 	addi	sp,sp,-20
   14df8:	df000415 	stw	fp,16(sp)
   14dfc:	df000404 	addi	fp,sp,16
   14e00:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   14e04:	d0a84417 	ldw	r2,-24304(gp)
   14e08:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   14e0c:	d0a84417 	ldw	r2,-24304(gp)
   14e10:	e0ffff17 	ldw	r3,-4(fp)
   14e14:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14e20:	e0bffc17 	ldw	r2,-16(fp)
   14e24:	10800017 	ldw	r2,0(r2)
   14e28:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14e2c:	00002006 	br	14eb0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14e30:	d0a84417 	ldw	r2,-24304(gp)
   14e34:	10800d03 	ldbu	r2,52(r2)
   14e38:	10803fcc 	andi	r2,r2,255
   14e3c:	d0e84417 	ldw	r3,-24304(gp)
   14e40:	18c00d03 	ldbu	r3,52(r3)
   14e44:	18c03fcc 	andi	r3,r3,255
   14e48:	e13ffd17 	ldw	r4,-12(fp)
   14e4c:	20c7883a 	add	r3,r4,r3
   14e50:	18c00204 	addi	r3,r3,8
   14e54:	190000c3 	ldbu	r4,3(r3)
   14e58:	d0e84417 	ldw	r3,-24304(gp)
   14e5c:	18c00d43 	ldbu	r3,53(r3)
   14e60:	20c6b03a 	or	r3,r4,r3
   14e64:	1809883a 	mov	r4,r3
   14e68:	e0fffd17 	ldw	r3,-12(fp)
   14e6c:	1885883a 	add	r2,r3,r2
   14e70:	10800204 	addi	r2,r2,8
   14e74:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14e78:	e0bffd17 	ldw	r2,-12(fp)
   14e7c:	10c00283 	ldbu	r3,10(r2)
   14e80:	d0a84417 	ldw	r2,-24304(gp)
   14e84:	10800d83 	ldbu	r2,54(r2)
   14e88:	1884b03a 	or	r2,r3,r2
   14e8c:	1007883a 	mov	r3,r2
   14e90:	e0bffd17 	ldw	r2,-12(fp)
   14e94:	10c00285 	stb	r3,10(r2)
        pevents++;
   14e98:	e0bffc17 	ldw	r2,-16(fp)
   14e9c:	10800104 	addi	r2,r2,4
   14ea0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14ea4:	e0bffc17 	ldw	r2,-16(fp)
   14ea8:	10800017 	ldw	r2,0(r2)
   14eac:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14eb0:	e0bffd17 	ldw	r2,-12(fp)
   14eb4:	103fde1e 	bne	r2,zero,14e30 <__alt_mem_Flash_flash_data+0xf4014e30>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14eb8:	d0a84417 	ldw	r2,-24304(gp)
   14ebc:	10800d03 	ldbu	r2,52(r2)
   14ec0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14ec4:	e0fffe03 	ldbu	r3,-8(fp)
   14ec8:	e13ffe03 	ldbu	r4,-8(fp)
   14ecc:	d0a84144 	addi	r2,gp,-24315
   14ed0:	2085883a 	add	r2,r4,r2
   14ed4:	10800003 	ldbu	r2,0(r2)
   14ed8:	1009883a 	mov	r4,r2
   14edc:	d0a84417 	ldw	r2,-24304(gp)
   14ee0:	10800d43 	ldbu	r2,53(r2)
   14ee4:	0084303a 	nor	r2,zero,r2
   14ee8:	2084703a 	and	r2,r4,r2
   14eec:	1009883a 	mov	r4,r2
   14ef0:	d0a84144 	addi	r2,gp,-24315
   14ef4:	1885883a 	add	r2,r3,r2
   14ef8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14efc:	e0fffe03 	ldbu	r3,-8(fp)
   14f00:	d0a84144 	addi	r2,gp,-24315
   14f04:	1885883a 	add	r2,r3,r2
   14f08:	10800003 	ldbu	r2,0(r2)
   14f0c:	10803fcc 	andi	r2,r2,255
   14f10:	1000071e 	bne	r2,zero,14f30 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14f14:	d0a84417 	ldw	r2,-24304(gp)
   14f18:	10800d83 	ldbu	r2,54(r2)
   14f1c:	0084303a 	nor	r2,zero,r2
   14f20:	1007883a 	mov	r3,r2
   14f24:	d0a84103 	ldbu	r2,-24316(gp)
   14f28:	1884703a 	and	r2,r3,r2
   14f2c:	d0a84105 	stb	r2,-24316(gp)
    }
}
   14f30:	e037883a 	mov	sp,fp
   14f34:	df000017 	ldw	fp,0(sp)
   14f38:	dec00104 	addi	sp,sp,4
   14f3c:	f800283a 	ret

00014f40 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14f40:	defffc04 	addi	sp,sp,-16
   14f44:	df000315 	stw	fp,12(sp)
   14f48:	df000304 	addi	fp,sp,12
   14f4c:	e13ffe15 	stw	r4,-8(fp)
   14f50:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14f54:	e0bffe17 	ldw	r2,-8(fp)
   14f58:	10800d03 	ldbu	r2,52(r2)
   14f5c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14f60:	e0bffd03 	ldbu	r2,-12(fp)
   14f64:	e0fffd03 	ldbu	r3,-12(fp)
   14f68:	e13fff17 	ldw	r4,-4(fp)
   14f6c:	20c7883a 	add	r3,r4,r3
   14f70:	18c00204 	addi	r3,r3,8
   14f74:	18c000c3 	ldbu	r3,3(r3)
   14f78:	1809883a 	mov	r4,r3
   14f7c:	e0fffe17 	ldw	r3,-8(fp)
   14f80:	18c00d43 	ldbu	r3,53(r3)
   14f84:	00c6303a 	nor	r3,zero,r3
   14f88:	20c6703a 	and	r3,r4,r3
   14f8c:	1809883a 	mov	r4,r3
   14f90:	e0ffff17 	ldw	r3,-4(fp)
   14f94:	1885883a 	add	r2,r3,r2
   14f98:	10800204 	addi	r2,r2,8
   14f9c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14fa0:	e0bffd03 	ldbu	r2,-12(fp)
   14fa4:	e0ffff17 	ldw	r3,-4(fp)
   14fa8:	1885883a 	add	r2,r3,r2
   14fac:	10800204 	addi	r2,r2,8
   14fb0:	108000c3 	ldbu	r2,3(r2)
   14fb4:	10803fcc 	andi	r2,r2,255
   14fb8:	10000a1e 	bne	r2,zero,14fe4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14fbc:	e0bfff17 	ldw	r2,-4(fp)
   14fc0:	10800283 	ldbu	r2,10(r2)
   14fc4:	1007883a 	mov	r3,r2
   14fc8:	e0bffe17 	ldw	r2,-8(fp)
   14fcc:	10800d83 	ldbu	r2,54(r2)
   14fd0:	0084303a 	nor	r2,zero,r2
   14fd4:	1884703a 	and	r2,r3,r2
   14fd8:	1007883a 	mov	r3,r2
   14fdc:	e0bfff17 	ldw	r2,-4(fp)
   14fe0:	10c00285 	stb	r3,10(r2)
    }
}
   14fe4:	e037883a 	mov	sp,fp
   14fe8:	df000017 	ldw	fp,0(sp)
   14fec:	dec00104 	addi	sp,sp,4
   14ff0:	f800283a 	ret

00014ff4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14ff4:	defffa04 	addi	sp,sp,-24
   14ff8:	df000515 	stw	fp,20(sp)
   14ffc:	df000504 	addi	fp,sp,20
   15000:	e13ffe15 	stw	r4,-8(fp)
   15004:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   15008:	e0bffe17 	ldw	r2,-8(fp)
   1500c:	10800d03 	ldbu	r2,52(r2)
   15010:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   15014:	e0bffe17 	ldw	r2,-8(fp)
   15018:	10800d83 	ldbu	r2,54(r2)
   1501c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   15020:	e0bffe17 	ldw	r2,-8(fp)
   15024:	10800d43 	ldbu	r2,53(r2)
   15028:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1502c:	e0bfff17 	ldw	r2,-4(fp)
   15030:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   15034:	e0bffb17 	ldw	r2,-20(fp)
   15038:	10800017 	ldw	r2,0(r2)
   1503c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   15040:	00002506 	br	150d8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   15044:	e0bffd03 	ldbu	r2,-12(fp)
   15048:	e0fffd03 	ldbu	r3,-12(fp)
   1504c:	e13ffc17 	ldw	r4,-16(fp)
   15050:	20c7883a 	add	r3,r4,r3
   15054:	18c00204 	addi	r3,r3,8
   15058:	18c000c3 	ldbu	r3,3(r3)
   1505c:	1809883a 	mov	r4,r3
   15060:	e0fffd83 	ldbu	r3,-10(fp)
   15064:	00c6303a 	nor	r3,zero,r3
   15068:	20c6703a 	and	r3,r4,r3
   1506c:	1809883a 	mov	r4,r3
   15070:	e0fffc17 	ldw	r3,-16(fp)
   15074:	1885883a 	add	r2,r3,r2
   15078:	10800204 	addi	r2,r2,8
   1507c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   15080:	e0bffd03 	ldbu	r2,-12(fp)
   15084:	e0fffc17 	ldw	r3,-16(fp)
   15088:	1885883a 	add	r2,r3,r2
   1508c:	10800204 	addi	r2,r2,8
   15090:	108000c3 	ldbu	r2,3(r2)
   15094:	10803fcc 	andi	r2,r2,255
   15098:	1000091e 	bne	r2,zero,150c0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1509c:	e0bffc17 	ldw	r2,-16(fp)
   150a0:	10800283 	ldbu	r2,10(r2)
   150a4:	1007883a 	mov	r3,r2
   150a8:	e0bffd43 	ldbu	r2,-11(fp)
   150ac:	0084303a 	nor	r2,zero,r2
   150b0:	1884703a 	and	r2,r3,r2
   150b4:	1007883a 	mov	r3,r2
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   150c0:	e0bffb17 	ldw	r2,-20(fp)
   150c4:	10800104 	addi	r2,r2,4
   150c8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   150cc:	e0bffb17 	ldw	r2,-20(fp)
   150d0:	10800017 	ldw	r2,0(r2)
   150d4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   150d8:	e0bffc17 	ldw	r2,-16(fp)
   150dc:	103fd91e 	bne	r2,zero,15044 <__alt_mem_Flash_flash_data+0xf4015044>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   150e0:	e037883a 	mov	sp,fp
   150e4:	df000017 	ldw	fp,0(sp)
   150e8:	dec00104 	addi	sp,sp,4
   150ec:	f800283a 	ret

000150f0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   150f0:	defffc04 	addi	sp,sp,-16
   150f4:	df000315 	stw	fp,12(sp)
   150f8:	df000304 	addi	fp,sp,12
   150fc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   15100:	e0bfff17 	ldw	r2,-4(fp)
   15104:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   15108:	e0bfff17 	ldw	r2,-4(fp)
   1510c:	108002c4 	addi	r2,r2,11
   15110:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15114:	e03ffe05 	stb	zero,-8(fp)
   15118:	00000706 	br	15138 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1511c:	e0bffd17 	ldw	r2,-12(fp)
   15120:	10c00044 	addi	r3,r2,1
   15124:	e0fffd15 	stw	r3,-12(fp)
   15128:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1512c:	e0bffe03 	ldbu	r2,-8(fp)
   15130:	10800044 	addi	r2,r2,1
   15134:	e0bffe05 	stb	r2,-8(fp)
   15138:	e0bffe03 	ldbu	r2,-8(fp)
   1513c:	108000f0 	cmpltui	r2,r2,3
   15140:	103ff61e 	bne	r2,zero,1511c <__alt_mem_Flash_flash_data+0xf401511c>
        *ptbl++ = 0;
    }
}
   15144:	e037883a 	mov	sp,fp
   15148:	df000017 	ldw	fp,0(sp)
   1514c:	dec00104 	addi	sp,sp,4
   15150:	f800283a 	ret

00015154 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   15154:	defffb04 	addi	sp,sp,-20
   15158:	dfc00415 	stw	ra,16(sp)
   1515c:	df000315 	stw	fp,12(sp)
   15160:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   15164:	01000174 	movhi	r4,5
   15168:	21240304 	addi	r4,r4,-28660
   1516c:	0142d004 	movi	r5,2880
   15170:	00154b40 	call	154b4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   15174:	00800174 	movhi	r2,5
   15178:	10a40304 	addi	r2,r2,-28660
   1517c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   15180:	00800174 	movhi	r2,5
   15184:	10a40f04 	addi	r2,r2,-28612
   15188:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1518c:	e03ffd0d 	sth	zero,-12(fp)
   15190:	00001306 	br	151e0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15194:	e0bffe17 	ldw	r2,-8(fp)
   15198:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1519c:	e0bffe17 	ldw	r2,-8(fp)
   151a0:	e0ffff17 	ldw	r3,-4(fp)
   151a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   151a8:	e0bffe17 	ldw	r2,-8(fp)
   151ac:	00c00fc4 	movi	r3,63
   151b0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   151b4:	e0bffe17 	ldw	r2,-8(fp)
   151b8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   151bc:	e0bffe17 	ldw	r2,-8(fp)
   151c0:	10800c04 	addi	r2,r2,48
   151c4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   151c8:	e0bfff17 	ldw	r2,-4(fp)
   151cc:	10800c04 	addi	r2,r2,48
   151d0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   151d4:	e0bffd0b 	ldhu	r2,-12(fp)
   151d8:	10800044 	addi	r2,r2,1
   151dc:	e0bffd0d 	sth	r2,-12(fp)
   151e0:	e0bffd0b 	ldhu	r2,-12(fp)
   151e4:	10800ef0 	cmpltui	r2,r2,59
   151e8:	103fea1e 	bne	r2,zero,15194 <__alt_mem_Flash_flash_data+0xf4015194>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   151ec:	e0bffe17 	ldw	r2,-8(fp)
   151f0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   151f4:	e0bffe17 	ldw	r2,-8(fp)
   151f8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   151fc:	e0bffe17 	ldw	r2,-8(fp)
   15200:	00c00fc4 	movi	r3,63
   15204:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   15208:	e0bffe17 	ldw	r2,-8(fp)
   1520c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   15210:	00800174 	movhi	r2,5
   15214:	10a40304 	addi	r2,r2,-28660
   15218:	d0a84215 	stw	r2,-24312(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1521c:	e037883a 	mov	sp,fp
   15220:	dfc00117 	ldw	ra,4(sp)
   15224:	df000017 	ldw	fp,0(sp)
   15228:	dec00204 	addi	sp,sp,8
   1522c:	f800283a 	ret

00015230 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   15230:	deffff04 	addi	sp,sp,-4
   15234:	df000015 	stw	fp,0(sp)
   15238:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1523c:	d0284515 	stw	zero,-24300(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   15240:	d0284305 	stb	zero,-24308(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   15244:	d0283505 	stb	zero,-24364(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   15248:	d0283d45 	stb	zero,-24331(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1524c:	d0283545 	stb	zero,-24363(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   15250:	d0283a15 	stw	zero,-24344(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   15254:	d0283615 	stw	zero,-24360(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   15258:	d0284815 	stw	zero,-24288(gp)
    OSIdleCtrMax  = 0L;
   1525c:	d0283b15 	stw	zero,-24340(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   15260:	d0284705 	stb	zero,-24292(gp)
#endif
}
   15264:	e037883a 	mov	sp,fp
   15268:	df000017 	ldw	fp,0(sp)
   1526c:	dec00104 	addi	sp,sp,4
   15270:	f800283a 	ret

00015274 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   15274:	defffd04 	addi	sp,sp,-12
   15278:	df000215 	stw	fp,8(sp)
   1527c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   15280:	d0284105 	stb	zero,-24316(gp)
    prdytbl       = &OSRdyTbl[0];
   15284:	d0a84144 	addi	r2,gp,-24315
   15288:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1528c:	e03ffe05 	stb	zero,-8(fp)
   15290:	00000706 	br	152b0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   15294:	e0bfff17 	ldw	r2,-4(fp)
   15298:	10c00044 	addi	r3,r2,1
   1529c:	e0ffff15 	stw	r3,-4(fp)
   152a0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   152a4:	e0bffe03 	ldbu	r2,-8(fp)
   152a8:	10800044 	addi	r2,r2,1
   152ac:	e0bffe05 	stb	r2,-8(fp)
   152b0:	e0bffe03 	ldbu	r2,-8(fp)
   152b4:	108000f0 	cmpltui	r2,r2,3
   152b8:	103ff61e 	bne	r2,zero,15294 <__alt_mem_Flash_flash_data+0xf4015294>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   152bc:	d0283745 	stb	zero,-24355(gp)
    OSPrioHighRdy = 0;
   152c0:	d0283705 	stb	zero,-24356(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   152c4:	d0283f15 	stw	zero,-24324(gp)
    OSTCBCur      = (OS_TCB *)0;
   152c8:	d0284415 	stw	zero,-24304(gp)
}
   152cc:	e037883a 	mov	sp,fp
   152d0:	df000017 	ldw	fp,0(sp)
   152d4:	dec00104 	addi	sp,sp,4
   152d8:	f800283a 	ret

000152dc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   152dc:	defff804 	addi	sp,sp,-32
   152e0:	dfc00715 	stw	ra,28(sp)
   152e4:	df000615 	stw	fp,24(sp)
   152e8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   152ec:	00bfffd4 	movui	r2,65535
   152f0:	d8800015 	stw	r2,0(sp)
   152f4:	00800174 	movhi	r2,5
   152f8:	10a20304 	addi	r2,r2,-30708
   152fc:	d8800115 	stw	r2,4(sp)
   15300:	00808004 	movi	r2,512
   15304:	d8800215 	stw	r2,8(sp)
   15308:	d8000315 	stw	zero,12(sp)
   1530c:	008000c4 	movi	r2,3
   15310:	d8800415 	stw	r2,16(sp)
   15314:	01000074 	movhi	r4,1
   15318:	2115db04 	addi	r4,r4,22380
   1531c:	000b883a 	mov	r5,zero
   15320:	01800174 	movhi	r6,5
   15324:	31a40204 	addi	r6,r6,-28664
   15328:	01c00504 	movi	r7,20
   1532c:	001ad080 	call	1ad08 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   15330:	01000504 	movi	r4,20
   15334:	014000b4 	movhi	r5,2
   15338:	29432e04 	addi	r5,r5,3256
   1533c:	e1bfff04 	addi	r6,fp,-4
   15340:	001b5d40 	call	1b5d4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   15344:	e037883a 	mov	sp,fp
   15348:	dfc00117 	ldw	ra,4(sp)
   1534c:	df000017 	ldw	fp,0(sp)
   15350:	dec00204 	addi	sp,sp,8
   15354:	f800283a 	ret

00015358 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   15358:	defff804 	addi	sp,sp,-32
   1535c:	dfc00715 	stw	ra,28(sp)
   15360:	df000615 	stw	fp,24(sp)
   15364:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   15368:	00bfff94 	movui	r2,65534
   1536c:	d8800015 	stw	r2,0(sp)
   15370:	00800134 	movhi	r2,4
   15374:	109f8b04 	addi	r2,r2,32300
   15378:	d8800115 	stw	r2,4(sp)
   1537c:	00808004 	movi	r2,512
   15380:	d8800215 	stw	r2,8(sp)
   15384:	d8000315 	stw	zero,12(sp)
   15388:	008000c4 	movi	r2,3
   1538c:	d8800415 	stw	r2,16(sp)
   15390:	01000074 	movhi	r4,1
   15394:	2115f204 	addi	r4,r4,22472
   15398:	000b883a 	mov	r5,zero
   1539c:	01800174 	movhi	r6,5
   153a0:	31a18a04 	addi	r6,r6,-31192
   153a4:	01c004c4 	movi	r7,19
   153a8:	001ad080 	call	1ad08 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   153ac:	010004c4 	movi	r4,19
   153b0:	014000b4 	movhi	r5,2
   153b4:	29433204 	addi	r5,r5,3272
   153b8:	e1bfff04 	addi	r6,fp,-4
   153bc:	001b5d40 	call	1b5d4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   153c0:	e037883a 	mov	sp,fp
   153c4:	dfc00117 	ldw	ra,4(sp)
   153c8:	df000017 	ldw	fp,0(sp)
   153cc:	dec00204 	addi	sp,sp,8
   153d0:	f800283a 	ret

000153d4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   153d4:	defffb04 	addi	sp,sp,-20
   153d8:	dfc00415 	stw	ra,16(sp)
   153dc:	df000315 	stw	fp,12(sp)
   153e0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   153e4:	01000174 	movhi	r4,5
   153e8:	2126d304 	addi	r4,r4,-25780
   153ec:	01414404 	movi	r5,1296
   153f0:	00154b40 	call	154b4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   153f4:	01000174 	movhi	r4,5
   153f8:	21281704 	addi	r4,r4,-24484
   153fc:	01401504 	movi	r5,84
   15400:	00154b40 	call	154b4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   15404:	00800174 	movhi	r2,5
   15408:	10a6d304 	addi	r2,r2,-25780
   1540c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   15410:	00800174 	movhi	r2,5
   15414:	10a6ee04 	addi	r2,r2,-25672
   15418:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1541c:	e03ffd05 	stb	zero,-12(fp)
   15420:	00001106 	br	15468 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   15424:	e0bffe17 	ldw	r2,-8(fp)
   15428:	e0ffff17 	ldw	r3,-4(fp)
   1542c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   15430:	e0bffe17 	ldw	r2,-8(fp)
   15434:	00c00fc4 	movi	r3,63
   15438:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1543c:	e0bffe17 	ldw	r2,-8(fp)
   15440:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   15444:	e0bffe17 	ldw	r2,-8(fp)
   15448:	10801b04 	addi	r2,r2,108
   1544c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   15450:	e0bfff17 	ldw	r2,-4(fp)
   15454:	10801b04 	addi	r2,r2,108
   15458:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1545c:	e0bffd03 	ldbu	r2,-12(fp)
   15460:	10800044 	addi	r2,r2,1
   15464:	e0bffd05 	stb	r2,-12(fp)
   15468:	e0bffd03 	ldbu	r2,-12(fp)
   1546c:	108002f0 	cmpltui	r2,r2,11
   15470:	103fec1e 	bne	r2,zero,15424 <__alt_mem_Flash_flash_data+0xf4015424>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   15474:	e0bffe17 	ldw	r2,-8(fp)
   15478:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1547c:	e0bffe17 	ldw	r2,-8(fp)
   15480:	00c00fc4 	movi	r3,63
   15484:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   15488:	e0bffe17 	ldw	r2,-8(fp)
   1548c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   15490:	d0283815 	stw	zero,-24352(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   15494:	00800174 	movhi	r2,5
   15498:	10a6d304 	addi	r2,r2,-25780
   1549c:	d0a83c15 	stw	r2,-24336(gp)
}
   154a0:	e037883a 	mov	sp,fp
   154a4:	dfc00117 	ldw	ra,4(sp)
   154a8:	df000017 	ldw	fp,0(sp)
   154ac:	dec00204 	addi	sp,sp,8
   154b0:	f800283a 	ret

000154b4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   154b4:	defffd04 	addi	sp,sp,-12
   154b8:	df000215 	stw	fp,8(sp)
   154bc:	df000204 	addi	fp,sp,8
   154c0:	e13ffe15 	stw	r4,-8(fp)
   154c4:	2805883a 	mov	r2,r5
   154c8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   154cc:	00000706 	br	154ec <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   154d0:	e0bffe17 	ldw	r2,-8(fp)
   154d4:	10c00044 	addi	r3,r2,1
   154d8:	e0fffe15 	stw	r3,-8(fp)
   154dc:	10000005 	stb	zero,0(r2)
        size--;
   154e0:	e0bfff0b 	ldhu	r2,-4(fp)
   154e4:	10bfffc4 	addi	r2,r2,-1
   154e8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   154ec:	e0bfff0b 	ldhu	r2,-4(fp)
   154f0:	103ff71e 	bne	r2,zero,154d0 <__alt_mem_Flash_flash_data+0xf40154d0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   154f4:	e037883a 	mov	sp,fp
   154f8:	df000017 	ldw	fp,0(sp)
   154fc:	dec00104 	addi	sp,sp,4
   15500:	f800283a 	ret

00015504 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   15504:	defffc04 	addi	sp,sp,-16
   15508:	df000315 	stw	fp,12(sp)
   1550c:	df000304 	addi	fp,sp,12
   15510:	e13ffd15 	stw	r4,-12(fp)
   15514:	e17ffe15 	stw	r5,-8(fp)
   15518:	3005883a 	mov	r2,r6
   1551c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   15520:	00000b06 	br	15550 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   15524:	e0bffd17 	ldw	r2,-12(fp)
   15528:	10c00044 	addi	r3,r2,1
   1552c:	e0fffd15 	stw	r3,-12(fp)
   15530:	e0fffe17 	ldw	r3,-8(fp)
   15534:	19000044 	addi	r4,r3,1
   15538:	e13ffe15 	stw	r4,-8(fp)
   1553c:	18c00003 	ldbu	r3,0(r3)
   15540:	10c00005 	stb	r3,0(r2)
        size--;
   15544:	e0bfff0b 	ldhu	r2,-4(fp)
   15548:	10bfffc4 	addi	r2,r2,-1
   1554c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   15550:	e0bfff0b 	ldhu	r2,-4(fp)
   15554:	103ff31e 	bne	r2,zero,15524 <__alt_mem_Flash_flash_data+0xf4015524>
        *pdest++ = *psrc++;
        size--;
    }
}
   15558:	e037883a 	mov	sp,fp
   1555c:	df000017 	ldw	fp,0(sp)
   15560:	dec00104 	addi	sp,sp,4
   15564:	f800283a 	ret

00015568 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   15568:	defffb04 	addi	sp,sp,-20
   1556c:	dfc00415 	stw	ra,16(sp)
   15570:	df000315 	stw	fp,12(sp)
   15574:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15578:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1557c:	0005303a 	rdctl	r2,status
   15580:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15584:	e0fffe17 	ldw	r3,-8(fp)
   15588:	00bfff84 	movi	r2,-2
   1558c:	1884703a 	and	r2,r3,r2
   15590:	1001703a 	wrctl	status,r2
  
  return context;
   15594:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15598:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1559c:	d0a84303 	ldbu	r2,-24308(gp)
   155a0:	10803fcc 	andi	r2,r2,255
   155a4:	10001a1e 	bne	r2,zero,15610 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   155a8:	d0a83503 	ldbu	r2,-24364(gp)
   155ac:	10803fcc 	andi	r2,r2,255
   155b0:	1000171e 	bne	r2,zero,15610 <OS_Sched+0xa8>
            OS_SchedNew();
   155b4:	00156340 	call	15634 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   155b8:	d0e83703 	ldbu	r3,-24356(gp)
   155bc:	d0a83743 	ldbu	r2,-24355(gp)
   155c0:	18c03fcc 	andi	r3,r3,255
   155c4:	10803fcc 	andi	r2,r2,255
   155c8:	18801126 	beq	r3,r2,15610 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   155cc:	d0a83703 	ldbu	r2,-24356(gp)
   155d0:	10c03fcc 	andi	r3,r2,255
   155d4:	00800174 	movhi	r2,5
   155d8:	10a81704 	addi	r2,r2,-24484
   155dc:	18c7883a 	add	r3,r3,r3
   155e0:	18c7883a 	add	r3,r3,r3
   155e4:	10c5883a 	add	r2,r2,r3
   155e8:	10800017 	ldw	r2,0(r2)
   155ec:	d0a83f15 	stw	r2,-24324(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   155f0:	d0a83f17 	ldw	r2,-24324(gp)
   155f4:	10c00e17 	ldw	r3,56(r2)
   155f8:	18c00044 	addi	r3,r3,1
   155fc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   15600:	d0a83a17 	ldw	r2,-24344(gp)
   15604:	10800044 	addi	r2,r2,1
   15608:	d0a83a15 	stw	r2,-24344(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1560c:	001f7700 	call	1f770 <OSCtxSw>
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15618:	e0bfff17 	ldw	r2,-4(fp)
   1561c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   15620:	e037883a 	mov	sp,fp
   15624:	dfc00117 	ldw	ra,4(sp)
   15628:	df000017 	ldw	fp,0(sp)
   1562c:	dec00204 	addi	sp,sp,8
   15630:	f800283a 	ret

00015634 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   15634:	defffe04 	addi	sp,sp,-8
   15638:	df000115 	stw	fp,4(sp)
   1563c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   15640:	d0a84103 	ldbu	r2,-24316(gp)
   15644:	10c03fcc 	andi	r3,r2,255
   15648:	008000b4 	movhi	r2,2
   1564c:	1082ee04 	addi	r2,r2,3000
   15650:	10c5883a 	add	r2,r2,r3
   15654:	10800003 	ldbu	r2,0(r2)
   15658:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1565c:	e0bfff03 	ldbu	r2,-4(fp)
   15660:	100490fa 	slli	r2,r2,3
   15664:	1009883a 	mov	r4,r2
   15668:	e0ffff03 	ldbu	r3,-4(fp)
   1566c:	d0a84144 	addi	r2,gp,-24315
   15670:	1885883a 	add	r2,r3,r2
   15674:	10800003 	ldbu	r2,0(r2)
   15678:	10c03fcc 	andi	r3,r2,255
   1567c:	008000b4 	movhi	r2,2
   15680:	1082ee04 	addi	r2,r2,3000
   15684:	10c5883a 	add	r2,r2,r3
   15688:	10800003 	ldbu	r2,0(r2)
   1568c:	2085883a 	add	r2,r4,r2
   15690:	d0a83705 	stb	r2,-24356(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   15694:	e037883a 	mov	sp,fp
   15698:	df000017 	ldw	fp,0(sp)
   1569c:	dec00104 	addi	sp,sp,4
   156a0:	f800283a 	ret

000156a4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   156a4:	defffc04 	addi	sp,sp,-16
   156a8:	df000315 	stw	fp,12(sp)
   156ac:	df000304 	addi	fp,sp,12
   156b0:	e13ffe15 	stw	r4,-8(fp)
   156b4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   156b8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   156bc:	00000b06 	br	156ec <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   156c0:	e0bffe17 	ldw	r2,-8(fp)
   156c4:	10c00044 	addi	r3,r2,1
   156c8:	e0fffe15 	stw	r3,-8(fp)
   156cc:	e0ffff17 	ldw	r3,-4(fp)
   156d0:	19000044 	addi	r4,r3,1
   156d4:	e13fff15 	stw	r4,-4(fp)
   156d8:	18c00003 	ldbu	r3,0(r3)
   156dc:	10c00005 	stb	r3,0(r2)
        len++;
   156e0:	e0bffd03 	ldbu	r2,-12(fp)
   156e4:	10800044 	addi	r2,r2,1
   156e8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   156ec:	e0bfff17 	ldw	r2,-4(fp)
   156f0:	10800003 	ldbu	r2,0(r2)
   156f4:	10803fcc 	andi	r2,r2,255
   156f8:	103ff11e 	bne	r2,zero,156c0 <__alt_mem_Flash_flash_data+0xf40156c0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   156fc:	e0bffe17 	ldw	r2,-8(fp)
   15700:	10000005 	stb	zero,0(r2)
    return (len);
   15704:	e0bffd03 	ldbu	r2,-12(fp)
}
   15708:	e037883a 	mov	sp,fp
   1570c:	df000017 	ldw	fp,0(sp)
   15710:	dec00104 	addi	sp,sp,4
   15714:	f800283a 	ret

00015718 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   15718:	defffd04 	addi	sp,sp,-12
   1571c:	df000215 	stw	fp,8(sp)
   15720:	df000204 	addi	fp,sp,8
   15724:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   15728:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1572c:	00000606 	br	15748 <OS_StrLen+0x30>
        psrc++;
   15730:	e0bfff17 	ldw	r2,-4(fp)
   15734:	10800044 	addi	r2,r2,1
   15738:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1573c:	e0bffe03 	ldbu	r2,-8(fp)
   15740:	10800044 	addi	r2,r2,1
   15744:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   15748:	e0bfff17 	ldw	r2,-4(fp)
   1574c:	10800003 	ldbu	r2,0(r2)
   15750:	10803fcc 	andi	r2,r2,255
   15754:	103ff61e 	bne	r2,zero,15730 <__alt_mem_Flash_flash_data+0xf4015730>
        psrc++;
        len++;
    }
    return (len);
   15758:	e0bffe03 	ldbu	r2,-8(fp)
}
   1575c:	e037883a 	mov	sp,fp
   15760:	df000017 	ldw	fp,0(sp)
   15764:	dec00104 	addi	sp,sp,4
   15768:	f800283a 	ret

0001576c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1576c:	defffa04 	addi	sp,sp,-24
   15770:	dfc00515 	stw	ra,20(sp)
   15774:	df000415 	stw	fp,16(sp)
   15778:	df000404 	addi	fp,sp,16
   1577c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15780:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15784:	0005303a 	rdctl	r2,status
   15788:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1578c:	e0fffd17 	ldw	r3,-12(fp)
   15790:	00bfff84 	movi	r2,-2
   15794:	1884703a 	and	r2,r3,r2
   15798:	1001703a 	wrctl	status,r2
  
  return context;
   1579c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   157a0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   157a4:	d0a83617 	ldw	r2,-24360(gp)
   157a8:	10800044 	addi	r2,r2,1
   157ac:	d0a83615 	stw	r2,-24360(gp)
   157b0:	e0bffc17 	ldw	r2,-16(fp)
   157b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157b8:	e0bffe17 	ldw	r2,-8(fp)
   157bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   157c0:	001fa680 	call	1fa68 <OSTaskIdleHook>
    }
   157c4:	003fef06 	br	15784 <__alt_mem_Flash_flash_data+0xf4015784>

000157c8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   157c8:	defff804 	addi	sp,sp,-32
   157cc:	dfc00715 	stw	ra,28(sp)
   157d0:	df000615 	stw	fp,24(sp)
   157d4:	dc400515 	stw	r17,20(sp)
   157d8:	dc000415 	stw	r16,16(sp)
   157dc:	df000604 	addi	fp,sp,24
   157e0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   157e4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   157e8:	00000206 	br	157f4 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   157ec:	01000044 	movi	r4,1
   157f0:	001bf000 	call	1bf00 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   157f4:	d0a84703 	ldbu	r2,-24292(gp)
   157f8:	10803fcc 	andi	r2,r2,255
   157fc:	103ffb26 	beq	r2,zero,157ec <__alt_mem_Flash_flash_data+0xf40157ec>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   15800:	d0e83b17 	ldw	r3,-24340(gp)
   15804:	00947b34 	movhi	r2,20972
   15808:	10a147c4 	addi	r2,r2,-31457
   1580c:	1888383a 	mulxuu	r4,r3,r2
   15810:	1885383a 	mul	r2,r3,r2
   15814:	1021883a 	mov	r16,r2
   15818:	2023883a 	mov	r17,r4
   1581c:	8804d17a 	srli	r2,r17,5
   15820:	d0a83b15 	stw	r2,-24340(gp)
    if (OSIdleCtrMax == 0L) {
   15824:	d0a83b17 	ldw	r2,-24340(gp)
   15828:	1000031e 	bne	r2,zero,15838 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1582c:	d0283d05 	stb	zero,-24332(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   15830:	01003fc4 	movi	r4,255
   15834:	001bb540 	call	1bb54 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15838:	0005303a 	rdctl	r2,status
   1583c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15840:	e0fffb17 	ldw	r3,-20(fp)
   15844:	00bfff84 	movi	r2,-2
   15848:	1884703a 	and	r2,r3,r2
   1584c:	1001703a 	wrctl	status,r2
  
  return context;
   15850:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   15854:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   15858:	d0a83617 	ldw	r2,-24360(gp)
   1585c:	d0a84815 	stw	r2,-24288(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   15860:	d0283615 	stw	zero,-24360(gp)
   15864:	e0bffa17 	ldw	r2,-24(fp)
   15868:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1586c:	e0bffc17 	ldw	r2,-16(fp)
   15870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   15874:	d0e84817 	ldw	r3,-24288(gp)
   15878:	d0a83b17 	ldw	r2,-24340(gp)
   1587c:	1885203a 	divu	r2,r3,r2
   15880:	1007883a 	mov	r3,r2
   15884:	00801904 	movi	r2,100
   15888:	10c5c83a 	sub	r2,r2,r3
   1588c:	d0a83d05 	stb	r2,-24332(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   15890:	001f9f80 	call	1f9f8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   15894:	00158a40 	call	158a4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   15898:	0009883a 	mov	r4,zero
   1589c:	001bf000 	call	1bf00 <OSTimeDly>
    }
   158a0:	003fe506 	br	15838 <__alt_mem_Flash_flash_data+0xf4015838>

000158a4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   158a4:	defffa04 	addi	sp,sp,-24
   158a8:	dfc00515 	stw	ra,20(sp)
   158ac:	df000415 	stw	fp,16(sp)
   158b0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   158b4:	e03ffc05 	stb	zero,-16(fp)
   158b8:	00002406 	br	1594c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   158bc:	e0fffc03 	ldbu	r3,-16(fp)
   158c0:	e0bffe04 	addi	r2,fp,-8
   158c4:	1809883a 	mov	r4,r3
   158c8:	100b883a 	mov	r5,r2
   158cc:	001b98c0 	call	1b98c <OSTaskStkChk>
   158d0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   158d4:	e0bffc43 	ldbu	r2,-15(fp)
   158d8:	1000191e 	bne	r2,zero,15940 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   158dc:	e0fffc03 	ldbu	r3,-16(fp)
   158e0:	00800174 	movhi	r2,5
   158e4:	10a81704 	addi	r2,r2,-24484
   158e8:	18c7883a 	add	r3,r3,r3
   158ec:	18c7883a 	add	r3,r3,r3
   158f0:	10c5883a 	add	r2,r2,r3
   158f4:	10800017 	ldw	r2,0(r2)
   158f8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   158fc:	e0bffd17 	ldw	r2,-12(fp)
   15900:	10000f26 	beq	r2,zero,15940 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   15904:	e0bffd17 	ldw	r2,-12(fp)
   15908:	10800060 	cmpeqi	r2,r2,1
   1590c:	10000c1e 	bne	r2,zero,15940 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   15910:	e0bffd17 	ldw	r2,-12(fp)
   15914:	10c00217 	ldw	r3,8(r2)
   15918:	e0bffd17 	ldw	r2,-12(fp)
   1591c:	10800317 	ldw	r2,12(r2)
   15920:	1085883a 	add	r2,r2,r2
   15924:	1085883a 	add	r2,r2,r2
   15928:	1887883a 	add	r3,r3,r2
   1592c:	e0bffd17 	ldw	r2,-12(fp)
   15930:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   15934:	e0ffff17 	ldw	r3,-4(fp)
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   15940:	e0bffc03 	ldbu	r2,-16(fp)
   15944:	10800044 	addi	r2,r2,1
   15948:	e0bffc05 	stb	r2,-16(fp)
   1594c:	e0bffc03 	ldbu	r2,-16(fp)
   15950:	10800570 	cmpltui	r2,r2,21
   15954:	103fd91e 	bne	r2,zero,158bc <__alt_mem_Flash_flash_data+0xf40158bc>
#endif
                }
            }
        }
    }
}
   15958:	e037883a 	mov	sp,fp
   1595c:	dfc00117 	ldw	ra,4(sp)
   15960:	df000017 	ldw	fp,0(sp)
   15964:	dec00204 	addi	sp,sp,8
   15968:	f800283a 	ret

0001596c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1596c:	defff204 	addi	sp,sp,-56
   15970:	dfc00d15 	stw	ra,52(sp)
   15974:	df000c15 	stw	fp,48(sp)
   15978:	df000c04 	addi	fp,sp,48
   1597c:	e17ffc15 	stw	r5,-16(fp)
   15980:	e1bffd15 	stw	r6,-12(fp)
   15984:	3807883a 	mov	r3,r7
   15988:	e0800417 	ldw	r2,16(fp)
   1598c:	e13ffb05 	stb	r4,-20(fp)
   15990:	e0fffe0d 	sth	r3,-8(fp)
   15994:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15998:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1599c:	0005303a 	rdctl	r2,status
   159a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159a4:	e0fff617 	ldw	r3,-40(fp)
   159a8:	00bfff84 	movi	r2,-2
   159ac:	1884703a 	and	r2,r3,r2
   159b0:	1001703a 	wrctl	status,r2
  
  return context;
   159b4:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   159b8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   159bc:	d0a83c17 	ldw	r2,-24336(gp)
   159c0:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   159c4:	e0bff517 	ldw	r2,-44(fp)
   159c8:	10009326 	beq	r2,zero,15c18 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   159cc:	e0bff517 	ldw	r2,-44(fp)
   159d0:	10800517 	ldw	r2,20(r2)
   159d4:	d0a83c15 	stw	r2,-24336(gp)
   159d8:	e0bff417 	ldw	r2,-48(fp)
   159dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159e0:	e0bff717 	ldw	r2,-36(fp)
   159e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   159e8:	e0bff517 	ldw	r2,-44(fp)
   159ec:	e0fffc17 	ldw	r3,-16(fp)
   159f0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   159f4:	e0bff517 	ldw	r2,-44(fp)
   159f8:	e0fffb03 	ldbu	r3,-20(fp)
   159fc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   15a00:	e0bff517 	ldw	r2,-44(fp)
   15a04:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   15a08:	e0bff517 	ldw	r2,-44(fp)
   15a0c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   15a10:	e0bff517 	ldw	r2,-44(fp)
   15a14:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   15a18:	e0bff517 	ldw	r2,-44(fp)
   15a1c:	e0c00317 	ldw	r3,12(fp)
   15a20:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   15a24:	e0bff517 	ldw	r2,-44(fp)
   15a28:	e0c00217 	ldw	r3,8(fp)
   15a2c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   15a30:	e0bff517 	ldw	r2,-44(fp)
   15a34:	e0fffd17 	ldw	r3,-12(fp)
   15a38:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   15a3c:	e0bff517 	ldw	r2,-44(fp)
   15a40:	e0ffff0b 	ldhu	r3,-4(fp)
   15a44:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   15a48:	e0bff517 	ldw	r2,-44(fp)
   15a4c:	e0fffe0b 	ldhu	r3,-8(fp)
   15a50:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   15a54:	e0bff517 	ldw	r2,-44(fp)
   15a58:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   15a5c:	e0bffb03 	ldbu	r2,-20(fp)
   15a60:	1004d0fa 	srli	r2,r2,3
   15a64:	1007883a 	mov	r3,r2
   15a68:	e0bff517 	ldw	r2,-44(fp)
   15a6c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15a70:	e0bffb03 	ldbu	r2,-20(fp)
   15a74:	108001cc 	andi	r2,r2,7
   15a78:	1007883a 	mov	r3,r2
   15a7c:	e0bff517 	ldw	r2,-44(fp)
   15a80:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   15a84:	e0bff517 	ldw	r2,-44(fp)
   15a88:	10800d03 	ldbu	r2,52(r2)
   15a8c:	10803fcc 	andi	r2,r2,255
   15a90:	00c00044 	movi	r3,1
   15a94:	1884983a 	sll	r2,r3,r2
   15a98:	1007883a 	mov	r3,r2
   15a9c:	e0bff517 	ldw	r2,-44(fp)
   15aa0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   15aa4:	e0bff517 	ldw	r2,-44(fp)
   15aa8:	10800cc3 	ldbu	r2,51(r2)
   15aac:	10803fcc 	andi	r2,r2,255
   15ab0:	00c00044 	movi	r3,1
   15ab4:	1884983a 	sll	r2,r3,r2
   15ab8:	1007883a 	mov	r3,r2
   15abc:	e0bff517 	ldw	r2,-44(fp)
   15ac0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   15ac4:	e0bff517 	ldw	r2,-44(fp)
   15ac8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   15acc:	e0bff517 	ldw	r2,-44(fp)
   15ad0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   15ad4:	e0bff517 	ldw	r2,-44(fp)
   15ad8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   15adc:	e0bff517 	ldw	r2,-44(fp)
   15ae0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   15ae4:	e0bff517 	ldw	r2,-44(fp)
   15ae8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   15aec:	e0bff517 	ldw	r2,-44(fp)
   15af0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   15af4:	e0bff517 	ldw	r2,-44(fp)
   15af8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   15afc:	e0bff517 	ldw	r2,-44(fp)
   15b00:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   15b04:	e0bff517 	ldw	r2,-44(fp)
   15b08:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   15b0c:	e0bff517 	ldw	r2,-44(fp)
   15b10:	00c00fc4 	movi	r3,63
   15b14:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15b18:	e0bff517 	ldw	r2,-44(fp)
   15b1c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15b20:	e13ff517 	ldw	r4,-44(fp)
   15b24:	001fa840 	call	1fa84 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15b28:	e13ff517 	ldw	r4,-44(fp)
   15b2c:	001f99c0 	call	1f99c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b30:	0005303a 	rdctl	r2,status
   15b34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b38:	e0fff817 	ldw	r3,-32(fp)
   15b3c:	00bfff84 	movi	r2,-2
   15b40:	1884703a 	and	r2,r3,r2
   15b44:	1001703a 	wrctl	status,r2
  
  return context;
   15b48:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   15b4c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15b50:	e0fffb03 	ldbu	r3,-20(fp)
   15b54:	00800174 	movhi	r2,5
   15b58:	10a81704 	addi	r2,r2,-24484
   15b5c:	18c7883a 	add	r3,r3,r3
   15b60:	18c7883a 	add	r3,r3,r3
   15b64:	10c5883a 	add	r2,r2,r3
   15b68:	e0fff517 	ldw	r3,-44(fp)
   15b6c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15b70:	d0e83817 	ldw	r3,-24352(gp)
   15b74:	e0bff517 	ldw	r2,-44(fp)
   15b78:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   15b7c:	e0bff517 	ldw	r2,-44(fp)
   15b80:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15b84:	d0a83817 	ldw	r2,-24352(gp)
   15b88:	10000326 	beq	r2,zero,15b98 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   15b8c:	d0a83817 	ldw	r2,-24352(gp)
   15b90:	e0fff517 	ldw	r3,-44(fp)
   15b94:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15b98:	e0bff517 	ldw	r2,-44(fp)
   15b9c:	d0a83815 	stw	r2,-24352(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15ba0:	e0bff517 	ldw	r2,-44(fp)
   15ba4:	10c00d83 	ldbu	r3,54(r2)
   15ba8:	d0a84103 	ldbu	r2,-24316(gp)
   15bac:	1884b03a 	or	r2,r3,r2
   15bb0:	d0a84105 	stb	r2,-24316(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15bb4:	e0bff517 	ldw	r2,-44(fp)
   15bb8:	10800d03 	ldbu	r2,52(r2)
   15bbc:	10c03fcc 	andi	r3,r2,255
   15bc0:	e0bff517 	ldw	r2,-44(fp)
   15bc4:	10800d03 	ldbu	r2,52(r2)
   15bc8:	11003fcc 	andi	r4,r2,255
   15bcc:	d0a84144 	addi	r2,gp,-24315
   15bd0:	2085883a 	add	r2,r4,r2
   15bd4:	11000003 	ldbu	r4,0(r2)
   15bd8:	e0bff517 	ldw	r2,-44(fp)
   15bdc:	10800d43 	ldbu	r2,53(r2)
   15be0:	2084b03a 	or	r2,r4,r2
   15be4:	1009883a 	mov	r4,r2
   15be8:	d0a84144 	addi	r2,gp,-24315
   15bec:	1885883a 	add	r2,r3,r2
   15bf0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   15bf4:	d0a83d43 	ldbu	r2,-24331(gp)
   15bf8:	10800044 	addi	r2,r2,1
   15bfc:	d0a83d45 	stb	r2,-24331(gp)
   15c00:	e0bff417 	ldw	r2,-48(fp)
   15c04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c08:	e0bff917 	ldw	r2,-28(fp)
   15c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15c10:	0005883a 	mov	r2,zero
   15c14:	00000506 	br	15c2c <OS_TCBInit+0x2c0>
   15c18:	e0bff417 	ldw	r2,-48(fp)
   15c1c:	e0bffa15 	stw	r2,-24(fp)
   15c20:	e0bffa17 	ldw	r2,-24(fp)
   15c24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15c28:	00801084 	movi	r2,66
}
   15c2c:	e037883a 	mov	sp,fp
   15c30:	dfc00117 	ldw	ra,4(sp)
   15c34:	df000017 	ldw	fp,0(sp)
   15c38:	dec00204 	addi	sp,sp,8
   15c3c:	f800283a 	ret

00015c40 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15c40:	defffe04 	addi	sp,sp,-8
   15c44:	df000115 	stw	fp,4(sp)
   15c48:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   15c4c:	d0a01c04 	addi	r2,gp,-32656
   15c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15c54:	d0a01d04 	addi	r2,gp,-32652
   15c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   15c5c:	d0a01e84 	addi	r2,gp,-32646
   15c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15c64:	d0a01f04 	addi	r2,gp,-32644
   15c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   15c6c:	d0a01e04 	addi	r2,gp,-32648
   15c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15c74:	d0a01f84 	addi	r2,gp,-32642
   15c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   15c7c:	d0a02004 	addi	r2,gp,-32640
   15c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15c84:	d0a02084 	addi	r2,gp,-32638
   15c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   15c8c:	d0a02104 	addi	r2,gp,-32636
   15c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15c94:	d0a02184 	addi	r2,gp,-32634
   15c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   15c9c:	d0a02204 	addi	r2,gp,-32632
   15ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15ca4:	d0a02284 	addi	r2,gp,-32630
   15ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   15cac:	d0a02304 	addi	r2,gp,-32628
   15cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15cb4:	d0a02384 	addi	r2,gp,-32626
   15cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   15cbc:	d0a02404 	addi	r2,gp,-32624
   15cc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15cc4:	d0a02484 	addi	r2,gp,-32622
   15cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   15ccc:	d0a02504 	addi	r2,gp,-32620
   15cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15cd4:	d0a02584 	addi	r2,gp,-32618
   15cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   15cdc:	d0a02604 	addi	r2,gp,-32616
   15ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   15ce4:	d0a02684 	addi	r2,gp,-32614
   15ce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   15cec:	d0a02704 	addi	r2,gp,-32612
   15cf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   15cf4:	d0a02784 	addi	r2,gp,-32610
   15cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   15cfc:	d0a02804 	addi	r2,gp,-32608
   15d00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   15d04:	d0a02884 	addi	r2,gp,-32606
   15d08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   15d0c:	d0a02904 	addi	r2,gp,-32604
   15d10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15d14:	d0a02984 	addi	r2,gp,-32602
   15d18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   15d1c:	d0a02a04 	addi	r2,gp,-32600
   15d20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15d24:	d0a02a84 	addi	r2,gp,-32598
   15d28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   15d2c:	d0a02b04 	addi	r2,gp,-32596
   15d30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15d34:	d0a02b84 	addi	r2,gp,-32594
   15d38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   15d3c:	d0a02c04 	addi	r2,gp,-32592
   15d40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15d44:	d0a02c84 	addi	r2,gp,-32590
   15d48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   15d4c:	d0a02d04 	addi	r2,gp,-32588
   15d50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15d54:	d0a02d84 	addi	r2,gp,-32586
   15d58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   15d5c:	d0a02e04 	addi	r2,gp,-32584
   15d60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15d64:	d0a02e84 	addi	r2,gp,-32582
   15d68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   15d6c:	d0a02f04 	addi	r2,gp,-32580
   15d70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15d74:	d0a02f84 	addi	r2,gp,-32578
   15d78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   15d7c:	d0a03004 	addi	r2,gp,-32576
   15d80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15d84:	d0a03084 	addi	r2,gp,-32574
   15d88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   15d8c:	d0a03104 	addi	r2,gp,-32572
   15d90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15d94:	d0a03184 	addi	r2,gp,-32570
   15d98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   15d9c:	d0a03204 	addi	r2,gp,-32568
   15da0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15da4:	d0a03284 	addi	r2,gp,-32566
   15da8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   15dac:	d0a03304 	addi	r2,gp,-32564
   15db0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15db4:	d0a03804 	addi	r2,gp,-32544
   15db8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15dbc:	e037883a 	mov	sp,fp
   15dc0:	df000017 	ldw	fp,0(sp)
   15dc4:	dec00104 	addi	sp,sp,4
   15dc8:	f800283a 	ret

00015dcc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15dcc:	defff204 	addi	sp,sp,-56
   15dd0:	df000d15 	stw	fp,52(sp)
   15dd4:	df000d04 	addi	fp,sp,52
   15dd8:	e13ffc15 	stw	r4,-16(fp)
   15ddc:	2807883a 	mov	r3,r5
   15de0:	3005883a 	mov	r2,r6
   15de4:	e1ffff15 	stw	r7,-4(fp)
   15de8:	e0fffd0d 	sth	r3,-12(fp)
   15dec:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15df0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15df4:	e0bfff17 	ldw	r2,-4(fp)
   15df8:	1000021e 	bne	r2,zero,15e04 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15dfc:	0005883a 	mov	r2,zero
   15e00:	0000b006 	br	160c4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15e04:	e0bffc17 	ldw	r2,-16(fp)
   15e08:	1000051e 	bne	r2,zero,15e20 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15e0c:	e0bfff17 	ldw	r2,-4(fp)
   15e10:	00c01b84 	movi	r3,110
   15e14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e18:	0005883a 	mov	r2,zero
   15e1c:	0000a906 	br	160c4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15e20:	e0bffc17 	ldw	r2,-16(fp)
   15e24:	10800003 	ldbu	r2,0(r2)
   15e28:	10803fcc 	andi	r2,r2,255
   15e2c:	10800160 	cmpeqi	r2,r2,5
   15e30:	1000051e 	bne	r2,zero,15e48 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15e34:	e0bfff17 	ldw	r2,-4(fp)
   15e38:	00c00044 	movi	r3,1
   15e3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15e40:	0005883a 	mov	r2,zero
   15e44:	00009f06 	br	160c4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15e48:	e0fffe03 	ldbu	r3,-8(fp)
   15e4c:	00bfe004 	movi	r2,-128
   15e50:	1884703a 	and	r2,r3,r2
   15e54:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   15e58:	e0bff503 	ldbu	r2,-44(fp)
   15e5c:	10000626 	beq	r2,zero,15e78 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15e60:	e0bffe03 	ldbu	r2,-8(fp)
   15e64:	10801fcc 	andi	r2,r2,127
   15e68:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15e6c:	00800044 	movi	r2,1
   15e70:	e0bff385 	stb	r2,-50(fp)
   15e74:	00000106 	br	15e7c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   15e78:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15e7c:	e0bfff17 	ldw	r2,-4(fp)
   15e80:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e84:	0005303a 	rdctl	r2,status
   15e88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e8c:	e0fff617 	ldw	r3,-40(fp)
   15e90:	00bfff84 	movi	r2,-2
   15e94:	1884703a 	and	r2,r3,r2
   15e98:	1001703a 	wrctl	status,r2
  
  return context;
   15e9c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   15ea0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15ea4:	e0bffe03 	ldbu	r2,-8(fp)
   15ea8:	10c00060 	cmpeqi	r3,r2,1
   15eac:	18005f1e 	bne	r3,zero,1602c <OSFlagAccept+0x260>
   15eb0:	10c00088 	cmpgei	r3,r2,2
   15eb4:	1800021e 	bne	r3,zero,15ec0 <OSFlagAccept+0xf4>
   15eb8:	10003f26 	beq	r2,zero,15fb8 <OSFlagAccept+0x1ec>
   15ebc:	00007706 	br	1609c <OSFlagAccept+0x2d0>
   15ec0:	10c000a0 	cmpeqi	r3,r2,2
   15ec4:	1800031e 	bne	r3,zero,15ed4 <OSFlagAccept+0x108>
   15ec8:	108000e0 	cmpeqi	r2,r2,3
   15ecc:	10001e1e 	bne	r2,zero,15f48 <OSFlagAccept+0x17c>
   15ed0:	00007206 	br	1609c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15ed4:	e0bffc17 	ldw	r2,-16(fp)
   15ed8:	10c0020b 	ldhu	r3,8(r2)
   15edc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ee0:	1884703a 	and	r2,r3,r2
   15ee4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ee8:	e0fff30b 	ldhu	r3,-52(fp)
   15eec:	e0bffd0b 	ldhu	r2,-12(fp)
   15ef0:	18800d1e 	bne	r3,r2,15f28 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ef4:	e0bff383 	ldbu	r2,-50(fp)
   15ef8:	10800058 	cmpnei	r2,r2,1
   15efc:	10000d1e 	bne	r2,zero,15f34 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15f00:	e0bffc17 	ldw	r2,-16(fp)
   15f04:	1080020b 	ldhu	r2,8(r2)
   15f08:	1007883a 	mov	r3,r2
   15f0c:	e0bff30b 	ldhu	r2,-52(fp)
   15f10:	0084303a 	nor	r2,zero,r2
   15f14:	1884703a 	and	r2,r3,r2
   15f18:	1007883a 	mov	r3,r2
   15f1c:	e0bffc17 	ldw	r2,-16(fp)
   15f20:	10c0020d 	sth	r3,8(r2)
   15f24:	00000306 	br	15f34 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15f28:	e0bfff17 	ldw	r2,-4(fp)
   15f2c:	00c01c04 	movi	r3,112
   15f30:	10c00005 	stb	r3,0(r2)
   15f34:	e0bff417 	ldw	r2,-48(fp)
   15f38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f3c:	e0bff717 	ldw	r2,-36(fp)
   15f40:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15f44:	00005e06 	br	160c0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15f48:	e0bffc17 	ldw	r2,-16(fp)
   15f4c:	10c0020b 	ldhu	r3,8(r2)
   15f50:	e0bffd0b 	ldhu	r2,-12(fp)
   15f54:	1884703a 	and	r2,r3,r2
   15f58:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15f5c:	e0bff30b 	ldhu	r2,-52(fp)
   15f60:	10000d26 	beq	r2,zero,15f98 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f64:	e0bff383 	ldbu	r2,-50(fp)
   15f68:	10800058 	cmpnei	r2,r2,1
   15f6c:	10000d1e 	bne	r2,zero,15fa4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15f70:	e0bffc17 	ldw	r2,-16(fp)
   15f74:	1080020b 	ldhu	r2,8(r2)
   15f78:	1007883a 	mov	r3,r2
   15f7c:	e0bff30b 	ldhu	r2,-52(fp)
   15f80:	0084303a 	nor	r2,zero,r2
   15f84:	1884703a 	and	r2,r3,r2
   15f88:	1007883a 	mov	r3,r2
   15f8c:	e0bffc17 	ldw	r2,-16(fp)
   15f90:	10c0020d 	sth	r3,8(r2)
   15f94:	00000306 	br	15fa4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15f98:	e0bfff17 	ldw	r2,-4(fp)
   15f9c:	00c01c04 	movi	r3,112
   15fa0:	10c00005 	stb	r3,0(r2)
   15fa4:	e0bff417 	ldw	r2,-48(fp)
   15fa8:	e0bff815 	stw	r2,-32(fp)
   15fac:	e0bff817 	ldw	r2,-32(fp)
   15fb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15fb4:	00004206 	br	160c0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	1080020b 	ldhu	r2,8(r2)
   15fc0:	0084303a 	nor	r2,zero,r2
   15fc4:	1007883a 	mov	r3,r2
   15fc8:	e0bffd0b 	ldhu	r2,-12(fp)
   15fcc:	1884703a 	and	r2,r3,r2
   15fd0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15fd4:	e0fff30b 	ldhu	r3,-52(fp)
   15fd8:	e0bffd0b 	ldhu	r2,-12(fp)
   15fdc:	18800b1e 	bne	r3,r2,1600c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15fe0:	e0bff383 	ldbu	r2,-50(fp)
   15fe4:	10800058 	cmpnei	r2,r2,1
   15fe8:	10000b1e 	bne	r2,zero,16018 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15fec:	e0bffc17 	ldw	r2,-16(fp)
   15ff0:	10c0020b 	ldhu	r3,8(r2)
   15ff4:	e0bff30b 	ldhu	r2,-52(fp)
   15ff8:	1884b03a 	or	r2,r3,r2
   15ffc:	1007883a 	mov	r3,r2
   16000:	e0bffc17 	ldw	r2,-16(fp)
   16004:	10c0020d 	sth	r3,8(r2)
   16008:	00000306 	br	16018 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1600c:	e0bfff17 	ldw	r2,-4(fp)
   16010:	00c01c04 	movi	r3,112
   16014:	10c00005 	stb	r3,0(r2)
   16018:	e0bff417 	ldw	r2,-48(fp)
   1601c:	e0bff915 	stw	r2,-28(fp)
   16020:	e0bff917 	ldw	r2,-28(fp)
   16024:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16028:	00002506 	br	160c0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1602c:	e0bffc17 	ldw	r2,-16(fp)
   16030:	1080020b 	ldhu	r2,8(r2)
   16034:	0084303a 	nor	r2,zero,r2
   16038:	1007883a 	mov	r3,r2
   1603c:	e0bffd0b 	ldhu	r2,-12(fp)
   16040:	1884703a 	and	r2,r3,r2
   16044:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16048:	e0bff30b 	ldhu	r2,-52(fp)
   1604c:	10000b26 	beq	r2,zero,1607c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16050:	e0bff383 	ldbu	r2,-50(fp)
   16054:	10800058 	cmpnei	r2,r2,1
   16058:	10000b1e 	bne	r2,zero,16088 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1605c:	e0bffc17 	ldw	r2,-16(fp)
   16060:	10c0020b 	ldhu	r3,8(r2)
   16064:	e0bff30b 	ldhu	r2,-52(fp)
   16068:	1884b03a 	or	r2,r3,r2
   1606c:	1007883a 	mov	r3,r2
   16070:	e0bffc17 	ldw	r2,-16(fp)
   16074:	10c0020d 	sth	r3,8(r2)
   16078:	00000306 	br	16088 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1607c:	e0bfff17 	ldw	r2,-4(fp)
   16080:	00c01c04 	movi	r3,112
   16084:	10c00005 	stb	r3,0(r2)
   16088:	e0bff417 	ldw	r2,-48(fp)
   1608c:	e0bffa15 	stw	r2,-24(fp)
   16090:	e0bffa17 	ldw	r2,-24(fp)
   16094:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   16098:	00000906 	br	160c0 <OSFlagAccept+0x2f4>
   1609c:	e0bff417 	ldw	r2,-48(fp)
   160a0:	e0bffb15 	stw	r2,-20(fp)
   160a4:	e0bffb17 	ldw	r2,-20(fp)
   160a8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   160ac:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   160b0:	e0bfff17 	ldw	r2,-4(fp)
   160b4:	00c01bc4 	movi	r3,111
   160b8:	10c00005 	stb	r3,0(r2)
             break;
   160bc:	0001883a 	nop
    }
    return (flags_rdy);
   160c0:	e0bff30b 	ldhu	r2,-52(fp)
}
   160c4:	e037883a 	mov	sp,fp
   160c8:	df000017 	ldw	fp,0(sp)
   160cc:	dec00104 	addi	sp,sp,4
   160d0:	f800283a 	ret

000160d4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   160d4:	defff804 	addi	sp,sp,-32
   160d8:	df000715 	stw	fp,28(sp)
   160dc:	df000704 	addi	fp,sp,28
   160e0:	2005883a 	mov	r2,r4
   160e4:	e17fff15 	stw	r5,-4(fp)
   160e8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   160ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   160f0:	e0bfff17 	ldw	r2,-4(fp)
   160f4:	1000021e 	bne	r2,zero,16100 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   160f8:	0005883a 	mov	r2,zero
   160fc:	00003b06 	br	161ec <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   16100:	008000b4 	movhi	r2,2
   16104:	10937404 	addi	r2,r2,19920
   16108:	10800003 	ldbu	r2,0(r2)
   1610c:	10803fcc 	andi	r2,r2,255
   16110:	10000526 	beq	r2,zero,16128 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   16114:	e0bfff17 	ldw	r2,-4(fp)
   16118:	00c00404 	movi	r3,16
   1611c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   16120:	0005883a 	mov	r2,zero
   16124:	00003106 	br	161ec <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16128:	0005303a 	rdctl	r2,status
   1612c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16130:	e0fffb17 	ldw	r3,-20(fp)
   16134:	00bfff84 	movi	r2,-2
   16138:	1884703a 	and	r2,r3,r2
   1613c:	1001703a 	wrctl	status,r2
  
  return context;
   16140:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16144:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   16148:	008000b4 	movhi	r2,2
   1614c:	10937704 	addi	r2,r2,19932
   16150:	10800017 	ldw	r2,0(r2)
   16154:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   16158:	e0bffa17 	ldw	r2,-24(fp)
   1615c:	10001b26 	beq	r2,zero,161cc <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   16160:	008000b4 	movhi	r2,2
   16164:	10937704 	addi	r2,r2,19932
   16168:	10800017 	ldw	r2,0(r2)
   1616c:	10c00117 	ldw	r3,4(r2)
   16170:	008000b4 	movhi	r2,2
   16174:	10937704 	addi	r2,r2,19932
   16178:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1617c:	e0bffa17 	ldw	r2,-24(fp)
   16180:	00c00144 	movi	r3,5
   16184:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   16188:	e0bffa17 	ldw	r2,-24(fp)
   1618c:	e0fffe0b 	ldhu	r3,-8(fp)
   16190:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   16194:	e0bffa17 	ldw	r2,-24(fp)
   16198:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1619c:	e0bffa17 	ldw	r2,-24(fp)
   161a0:	00c00fc4 	movi	r3,63
   161a4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   161a8:	e0bffa17 	ldw	r2,-24(fp)
   161ac:	100002c5 	stb	zero,11(r2)
   161b0:	e0bff917 	ldw	r2,-28(fp)
   161b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161b8:	e0bffc17 	ldw	r2,-16(fp)
   161bc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   161c0:	e0bfff17 	ldw	r2,-4(fp)
   161c4:	10000005 	stb	zero,0(r2)
   161c8:	00000706 	br	161e8 <OSFlagCreate+0x114>
   161cc:	e0bff917 	ldw	r2,-28(fp)
   161d0:	e0bffd15 	stw	r2,-12(fp)
   161d4:	e0bffd17 	ldw	r2,-12(fp)
   161d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   161dc:	e0bfff17 	ldw	r2,-4(fp)
   161e0:	00c01c84 	movi	r3,114
   161e4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   161e8:	e0bffa17 	ldw	r2,-24(fp)
}
   161ec:	e037883a 	mov	sp,fp
   161f0:	df000017 	ldw	fp,0(sp)
   161f4:	dec00104 	addi	sp,sp,4
   161f8:	f800283a 	ret

000161fc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   161fc:	defff204 	addi	sp,sp,-56
   16200:	dfc00d15 	stw	ra,52(sp)
   16204:	df000c15 	stw	fp,48(sp)
   16208:	df000c04 	addi	fp,sp,48
   1620c:	e13ffd15 	stw	r4,-12(fp)
   16210:	2805883a 	mov	r2,r5
   16214:	e1bfff15 	stw	r6,-4(fp)
   16218:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1621c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16220:	e0bfff17 	ldw	r2,-4(fp)
   16224:	1000021e 	bne	r2,zero,16230 <OSFlagDel+0x34>
        return (pgrp);
   16228:	e0bffd17 	ldw	r2,-12(fp)
   1622c:	00008a06 	br	16458 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16230:	e0bffd17 	ldw	r2,-12(fp)
   16234:	1000051e 	bne	r2,zero,1624c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16238:	e0bfff17 	ldw	r2,-4(fp)
   1623c:	00c01b84 	movi	r3,110
   16240:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16244:	e0bffd17 	ldw	r2,-12(fp)
   16248:	00008306 	br	16458 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1624c:	008000b4 	movhi	r2,2
   16250:	10937404 	addi	r2,r2,19920
   16254:	10800003 	ldbu	r2,0(r2)
   16258:	10803fcc 	andi	r2,r2,255
   1625c:	10000526 	beq	r2,zero,16274 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   16260:	e0bfff17 	ldw	r2,-4(fp)
   16264:	00c003c4 	movi	r3,15
   16268:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1626c:	e0bffd17 	ldw	r2,-12(fp)
   16270:	00007906 	br	16458 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   16274:	e0bffd17 	ldw	r2,-12(fp)
   16278:	10800003 	ldbu	r2,0(r2)
   1627c:	10803fcc 	andi	r2,r2,255
   16280:	10800160 	cmpeqi	r2,r2,5
   16284:	1000051e 	bne	r2,zero,1629c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   16288:	e0bfff17 	ldw	r2,-4(fp)
   1628c:	00c00044 	movi	r3,1
   16290:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16294:	e0bffd17 	ldw	r2,-12(fp)
   16298:	00006f06 	br	16458 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1629c:	0005303a 	rdctl	r2,status
   162a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   162a4:	e0fff817 	ldw	r3,-32(fp)
   162a8:	00bfff84 	movi	r2,-2
   162ac:	1884703a 	and	r2,r3,r2
   162b0:	1001703a 	wrctl	status,r2
  
  return context;
   162b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   162b8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   162bc:	e0bffd17 	ldw	r2,-12(fp)
   162c0:	10800117 	ldw	r2,4(r2)
   162c4:	10000326 	beq	r2,zero,162d4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   162c8:	00800044 	movi	r2,1
   162cc:	e0bff405 	stb	r2,-48(fp)
   162d0:	00000106 	br	162d8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   162d4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   162d8:	e0bffe03 	ldbu	r2,-8(fp)
   162dc:	10000326 	beq	r2,zero,162ec <OSFlagDel+0xf0>
   162e0:	10800060 	cmpeqi	r2,r2,1
   162e4:	1000271e 	bne	r2,zero,16384 <OSFlagDel+0x188>
   162e8:	00005006 	br	1642c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   162ec:	e0bff403 	ldbu	r2,-48(fp)
   162f0:	10001a1e 	bne	r2,zero,1635c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   162f4:	e0bffd17 	ldw	r2,-12(fp)
   162f8:	00c00fc4 	movi	r3,63
   162fc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   16300:	e0bffd17 	ldw	r2,-12(fp)
   16304:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16308:	e0bffd17 	ldw	r2,-12(fp)
   1630c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   16310:	008000b4 	movhi	r2,2
   16314:	10937704 	addi	r2,r2,19932
   16318:	10c00017 	ldw	r3,0(r2)
   1631c:	e0bffd17 	ldw	r2,-12(fp)
   16320:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   16324:	e0bffd17 	ldw	r2,-12(fp)
   16328:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1632c:	008000b4 	movhi	r2,2
   16330:	10937704 	addi	r2,r2,19932
   16334:	e0fffd17 	ldw	r3,-12(fp)
   16338:	10c00015 	stw	r3,0(r2)
   1633c:	e0bff717 	ldw	r2,-36(fp)
   16340:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16344:	e0bff917 	ldw	r2,-28(fp)
   16348:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1634c:	e0bfff17 	ldw	r2,-4(fp)
   16350:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   16354:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   16358:	00003e06 	br	16454 <OSFlagDel+0x258>
   1635c:	e0bff717 	ldw	r2,-36(fp)
   16360:	e0bffa15 	stw	r2,-24(fp)
   16364:	e0bffa17 	ldw	r2,-24(fp)
   16368:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1636c:	e0bfff17 	ldw	r2,-4(fp)
   16370:	00c01244 	movi	r3,73
   16374:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   16378:	e0bffd17 	ldw	r2,-12(fp)
   1637c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16380:	00003406 	br	16454 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16384:	e0bffd17 	ldw	r2,-12(fp)
   16388:	10800117 	ldw	r2,4(r2)
   1638c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   16390:	00000606 	br	163ac <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   16394:	e13ff517 	ldw	r4,-44(fp)
   16398:	000b883a 	mov	r5,zero
   1639c:	00174380 	call	17438 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   163a0:	e0bff517 	ldw	r2,-44(fp)
   163a4:	10800017 	ldw	r2,0(r2)
   163a8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   163ac:	e0bff517 	ldw	r2,-44(fp)
   163b0:	103ff81e 	bne	r2,zero,16394 <__alt_mem_Flash_flash_data+0xf4016394>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   163b4:	e0bffd17 	ldw	r2,-12(fp)
   163b8:	00c00fc4 	movi	r3,63
   163bc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   163c0:	e0bffd17 	ldw	r2,-12(fp)
   163c4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   163c8:	e0bffd17 	ldw	r2,-12(fp)
   163cc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   163d0:	008000b4 	movhi	r2,2
   163d4:	10937704 	addi	r2,r2,19932
   163d8:	10c00017 	ldw	r3,0(r2)
   163dc:	e0bffd17 	ldw	r2,-12(fp)
   163e0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   163e4:	e0bffd17 	ldw	r2,-12(fp)
   163e8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   163ec:	008000b4 	movhi	r2,2
   163f0:	10937704 	addi	r2,r2,19932
   163f4:	e0fffd17 	ldw	r3,-12(fp)
   163f8:	10c00015 	stw	r3,0(r2)
   163fc:	e0bff717 	ldw	r2,-36(fp)
   16400:	e0bffb15 	stw	r2,-20(fp)
   16404:	e0bffb17 	ldw	r2,-20(fp)
   16408:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1640c:	e0bff403 	ldbu	r2,-48(fp)
   16410:	10800058 	cmpnei	r2,r2,1
   16414:	1000011e 	bne	r2,zero,1641c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16418:	00155680 	call	15568 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1641c:	e0bfff17 	ldw	r2,-4(fp)
   16420:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   16424:	e03ff615 	stw	zero,-40(fp)
             break;
   16428:	00000a06 	br	16454 <OSFlagDel+0x258>
   1642c:	e0bff717 	ldw	r2,-36(fp)
   16430:	e0bffc15 	stw	r2,-16(fp)
   16434:	e0bffc17 	ldw	r2,-16(fp)
   16438:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1643c:	e0bfff17 	ldw	r2,-4(fp)
   16440:	00c001c4 	movi	r3,7
   16444:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   16448:	e0bffd17 	ldw	r2,-12(fp)
   1644c:	e0bff615 	stw	r2,-40(fp)
             break;
   16450:	0001883a 	nop
    }
    return (pgrp_return);
   16454:	e0bff617 	ldw	r2,-40(fp)
}
   16458:	e037883a 	mov	sp,fp
   1645c:	dfc00117 	ldw	ra,4(sp)
   16460:	df000017 	ldw	fp,0(sp)
   16464:	dec00204 	addi	sp,sp,8
   16468:	f800283a 	ret

0001646c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1646c:	defff604 	addi	sp,sp,-40
   16470:	dfc00915 	stw	ra,36(sp)
   16474:	df000815 	stw	fp,32(sp)
   16478:	df000804 	addi	fp,sp,32
   1647c:	e13ffd15 	stw	r4,-12(fp)
   16480:	e17ffe15 	stw	r5,-8(fp)
   16484:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16488:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1648c:	e0bfff17 	ldw	r2,-4(fp)
   16490:	1000021e 	bne	r2,zero,1649c <OSFlagNameGet+0x30>
        return (0);
   16494:	0005883a 	mov	r2,zero
   16498:	00003b06 	br	16588 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1649c:	e0bffd17 	ldw	r2,-12(fp)
   164a0:	1000051e 	bne	r2,zero,164b8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   164a4:	e0bfff17 	ldw	r2,-4(fp)
   164a8:	00c01b84 	movi	r3,110
   164ac:	10c00005 	stb	r3,0(r2)
        return (0);
   164b0:	0005883a 	mov	r2,zero
   164b4:	00003406 	br	16588 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   164b8:	e0bffe17 	ldw	r2,-8(fp)
   164bc:	1000051e 	bne	r2,zero,164d4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   164c0:	e0bfff17 	ldw	r2,-4(fp)
   164c4:	00c00304 	movi	r3,12
   164c8:	10c00005 	stb	r3,0(r2)
        return (0);
   164cc:	0005883a 	mov	r2,zero
   164d0:	00002d06 	br	16588 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   164d4:	008000b4 	movhi	r2,2
   164d8:	10937404 	addi	r2,r2,19920
   164dc:	10800003 	ldbu	r2,0(r2)
   164e0:	10803fcc 	andi	r2,r2,255
   164e4:	10000526 	beq	r2,zero,164fc <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   164e8:	e0bfff17 	ldw	r2,-4(fp)
   164ec:	00c00444 	movi	r3,17
   164f0:	10c00005 	stb	r3,0(r2)
        return (0);
   164f4:	0005883a 	mov	r2,zero
   164f8:	00002306 	br	16588 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164fc:	0005303a 	rdctl	r2,status
   16500:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16504:	e0fffa17 	ldw	r3,-24(fp)
   16508:	00bfff84 	movi	r2,-2
   1650c:	1884703a 	and	r2,r3,r2
   16510:	1001703a 	wrctl	status,r2
  
  return context;
   16514:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16518:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1651c:	e0bffd17 	ldw	r2,-12(fp)
   16520:	10800003 	ldbu	r2,0(r2)
   16524:	10803fcc 	andi	r2,r2,255
   16528:	10800160 	cmpeqi	r2,r2,5
   1652c:	1000091e 	bne	r2,zero,16554 <OSFlagNameGet+0xe8>
   16530:	e0bff817 	ldw	r2,-32(fp)
   16534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16538:	e0bffb17 	ldw	r2,-20(fp)
   1653c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   16540:	e0bfff17 	ldw	r2,-4(fp)
   16544:	00c00044 	movi	r3,1
   16548:	10c00005 	stb	r3,0(r2)
        return (0);
   1654c:	0005883a 	mov	r2,zero
   16550:	00000d06 	br	16588 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   16554:	e0bffd17 	ldw	r2,-12(fp)
   16558:	10800284 	addi	r2,r2,10
   1655c:	e13ffe17 	ldw	r4,-8(fp)
   16560:	100b883a 	mov	r5,r2
   16564:	00156a40 	call	156a4 <OS_StrCopy>
   16568:	e0bff905 	stb	r2,-28(fp)
   1656c:	e0bff817 	ldw	r2,-32(fp)
   16570:	e0bffc15 	stw	r2,-16(fp)
   16574:	e0bffc17 	ldw	r2,-16(fp)
   16578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1657c:	e0bfff17 	ldw	r2,-4(fp)
   16580:	10000005 	stb	zero,0(r2)
    return (len);
   16584:	e0bff903 	ldbu	r2,-28(fp)
}
   16588:	e037883a 	mov	sp,fp
   1658c:	dfc00117 	ldw	ra,4(sp)
   16590:	df000017 	ldw	fp,0(sp)
   16594:	dec00204 	addi	sp,sp,8
   16598:	f800283a 	ret

0001659c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1659c:	defff504 	addi	sp,sp,-44
   165a0:	dfc00a15 	stw	ra,40(sp)
   165a4:	df000915 	stw	fp,36(sp)
   165a8:	df000904 	addi	fp,sp,36
   165ac:	e13ffd15 	stw	r4,-12(fp)
   165b0:	e17ffe15 	stw	r5,-8(fp)
   165b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   165b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   165bc:	e0bfff17 	ldw	r2,-4(fp)
   165c0:	1000011e 	bne	r2,zero,165c8 <OSFlagNameSet+0x2c>
        return;
   165c4:	00004406 	br	166d8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   165c8:	e0bffd17 	ldw	r2,-12(fp)
   165cc:	1000041e 	bne	r2,zero,165e0 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   165d0:	e0bfff17 	ldw	r2,-4(fp)
   165d4:	00c01b84 	movi	r3,110
   165d8:	10c00005 	stb	r3,0(r2)
        return;
   165dc:	00003e06 	br	166d8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   165e0:	e0bffe17 	ldw	r2,-8(fp)
   165e4:	1000041e 	bne	r2,zero,165f8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   165e8:	e0bfff17 	ldw	r2,-4(fp)
   165ec:	00c00304 	movi	r3,12
   165f0:	10c00005 	stb	r3,0(r2)
        return;
   165f4:	00003806 	br	166d8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   165f8:	008000b4 	movhi	r2,2
   165fc:	10937404 	addi	r2,r2,19920
   16600:	10800003 	ldbu	r2,0(r2)
   16604:	10803fcc 	andi	r2,r2,255
   16608:	10000426 	beq	r2,zero,1661c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1660c:	e0bfff17 	ldw	r2,-4(fp)
   16610:	00c00484 	movi	r3,18
   16614:	10c00005 	stb	r3,0(r2)
        return;
   16618:	00002f06 	br	166d8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1661c:	0005303a 	rdctl	r2,status
   16620:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16624:	e0fff917 	ldw	r3,-28(fp)
   16628:	00bfff84 	movi	r2,-2
   1662c:	1884703a 	and	r2,r3,r2
   16630:	1001703a 	wrctl	status,r2
  
  return context;
   16634:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   16638:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	10800003 	ldbu	r2,0(r2)
   16644:	10803fcc 	andi	r2,r2,255
   16648:	10800160 	cmpeqi	r2,r2,5
   1664c:	1000081e 	bne	r2,zero,16670 <OSFlagNameSet+0xd4>
   16650:	e0bff717 	ldw	r2,-36(fp)
   16654:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16658:	e0bffa17 	ldw	r2,-24(fp)
   1665c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   16660:	e0bfff17 	ldw	r2,-4(fp)
   16664:	00c00044 	movi	r3,1
   16668:	10c00005 	stb	r3,0(r2)
        return;
   1666c:	00001a06 	br	166d8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16670:	e13ffe17 	ldw	r4,-8(fp)
   16674:	00157180 	call	15718 <OS_StrLen>
   16678:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1667c:	e0bff803 	ldbu	r2,-32(fp)
   16680:	10800830 	cmpltui	r2,r2,32
   16684:	1000081e 	bne	r2,zero,166a8 <OSFlagNameSet+0x10c>
   16688:	e0bff717 	ldw	r2,-36(fp)
   1668c:	e0bffb15 	stw	r2,-20(fp)
   16690:	e0bffb17 	ldw	r2,-20(fp)
   16694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   16698:	e0bfff17 	ldw	r2,-4(fp)
   1669c:	00c01cc4 	movi	r3,115
   166a0:	10c00005 	stb	r3,0(r2)
        return;
   166a4:	00000c06 	br	166d8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   166a8:	e0bffd17 	ldw	r2,-12(fp)
   166ac:	10800284 	addi	r2,r2,10
   166b0:	1009883a 	mov	r4,r2
   166b4:	e17ffe17 	ldw	r5,-8(fp)
   166b8:	00156a40 	call	156a4 <OS_StrCopy>
   166bc:	e0bff717 	ldw	r2,-36(fp)
   166c0:	e0bffc15 	stw	r2,-16(fp)
   166c4:	e0bffc17 	ldw	r2,-16(fp)
   166c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   166cc:	e0bfff17 	ldw	r2,-4(fp)
   166d0:	10000005 	stb	zero,0(r2)
    return;
   166d4:	0001883a 	nop
}
   166d8:	e037883a 	mov	sp,fp
   166dc:	dfc00117 	ldw	ra,4(sp)
   166e0:	df000017 	ldw	fp,0(sp)
   166e4:	dec00204 	addi	sp,sp,8
   166e8:	f800283a 	ret

000166ec <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   166ec:	deffe204 	addi	sp,sp,-120
   166f0:	dfc01d15 	stw	ra,116(sp)
   166f4:	df001c15 	stw	fp,112(sp)
   166f8:	df001c04 	addi	fp,sp,112
   166fc:	e13ffc15 	stw	r4,-16(fp)
   16700:	2809883a 	mov	r4,r5
   16704:	3007883a 	mov	r3,r6
   16708:	3805883a 	mov	r2,r7
   1670c:	e13ffd0d 	sth	r4,-12(fp)
   16710:	e0fffe05 	stb	r3,-8(fp)
   16714:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16718:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1671c:	e0800217 	ldw	r2,8(fp)
   16720:	1000021e 	bne	r2,zero,1672c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   16724:	0005883a 	mov	r2,zero
   16728:	00016706 	br	16cc8 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1672c:	e0bffc17 	ldw	r2,-16(fp)
   16730:	1000051e 	bne	r2,zero,16748 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16734:	e0800217 	ldw	r2,8(fp)
   16738:	00c01b84 	movi	r3,110
   1673c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16740:	0005883a 	mov	r2,zero
   16744:	00016006 	br	16cc8 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16748:	008000b4 	movhi	r2,2
   1674c:	10937404 	addi	r2,r2,19920
   16750:	10800003 	ldbu	r2,0(r2)
   16754:	10803fcc 	andi	r2,r2,255
   16758:	10000526 	beq	r2,zero,16770 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1675c:	e0800217 	ldw	r2,8(fp)
   16760:	00c00084 	movi	r3,2
   16764:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16768:	0005883a 	mov	r2,zero
   1676c:	00015606 	br	16cc8 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   16770:	008000b4 	movhi	r2,2
   16774:	10936604 	addi	r2,r2,19864
   16778:	10800003 	ldbu	r2,0(r2)
   1677c:	10803fcc 	andi	r2,r2,255
   16780:	10000526 	beq	r2,zero,16798 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   16784:	e0800217 	ldw	r2,8(fp)
   16788:	00c00344 	movi	r3,13
   1678c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16790:	0005883a 	mov	r2,zero
   16794:	00014c06 	br	16cc8 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   16798:	e0bffc17 	ldw	r2,-16(fp)
   1679c:	10800003 	ldbu	r2,0(r2)
   167a0:	10803fcc 	andi	r2,r2,255
   167a4:	10800160 	cmpeqi	r2,r2,5
   167a8:	1000051e 	bne	r2,zero,167c0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   167ac:	e0800217 	ldw	r2,8(fp)
   167b0:	00c00044 	movi	r3,1
   167b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   167b8:	0005883a 	mov	r2,zero
   167bc:	00014206 	br	16cc8 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   167c0:	e0fffe03 	ldbu	r3,-8(fp)
   167c4:	00bfe004 	movi	r2,-128
   167c8:	1884703a 	and	r2,r3,r2
   167cc:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   167d0:	e0bfe703 	ldbu	r2,-100(fp)
   167d4:	10000626 	beq	r2,zero,167f0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   167d8:	e0bffe03 	ldbu	r2,-8(fp)
   167dc:	10801fcc 	andi	r2,r2,127
   167e0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   167e4:	00800044 	movi	r2,1
   167e8:	e0bfe505 	stb	r2,-108(fp)
   167ec:	00000106 	br	167f4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   167f0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167f4:	0005303a 	rdctl	r2,status
   167f8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167fc:	e0ffe917 	ldw	r3,-92(fp)
   16800:	00bfff84 	movi	r2,-2
   16804:	1884703a 	and	r2,r3,r2
   16808:	1001703a 	wrctl	status,r2
  
  return context;
   1680c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16810:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   16814:	e0bffe03 	ldbu	r2,-8(fp)
   16818:	10c00060 	cmpeqi	r3,r2,1
   1681c:	1800921e 	bne	r3,zero,16a68 <OSFlagPend+0x37c>
   16820:	10c00088 	cmpgei	r3,r2,2
   16824:	1800021e 	bne	r3,zero,16830 <OSFlagPend+0x144>
   16828:	10006126 	beq	r2,zero,169b0 <OSFlagPend+0x2c4>
   1682c:	0000bb06 	br	16b1c <OSFlagPend+0x430>
   16830:	10c000a0 	cmpeqi	r3,r2,2
   16834:	1800031e 	bne	r3,zero,16844 <OSFlagPend+0x158>
   16838:	108000e0 	cmpeqi	r2,r2,3
   1683c:	10002f1e 	bne	r2,zero,168fc <OSFlagPend+0x210>
   16840:	0000b606 	br	16b1c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   16844:	e0bffc17 	ldw	r2,-16(fp)
   16848:	10c0020b 	ldhu	r3,8(r2)
   1684c:	e0bffd0b 	ldhu	r2,-12(fp)
   16850:	1884703a 	and	r2,r3,r2
   16854:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   16858:	e0ffe78b 	ldhu	r3,-98(fp)
   1685c:	e0bffd0b 	ldhu	r2,-12(fp)
   16860:	1880191e 	bne	r3,r2,168c8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16864:	e0bfe503 	ldbu	r2,-108(fp)
   16868:	10800058 	cmpnei	r2,r2,1
   1686c:	1000091e 	bne	r2,zero,16894 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   16870:	e0bffc17 	ldw	r2,-16(fp)
   16874:	1080020b 	ldhu	r2,8(r2)
   16878:	1007883a 	mov	r3,r2
   1687c:	e0bfe78b 	ldhu	r2,-98(fp)
   16880:	0084303a 	nor	r2,zero,r2
   16884:	1884703a 	and	r2,r3,r2
   16888:	1007883a 	mov	r3,r2
   1688c:	e0bffc17 	ldw	r2,-16(fp)
   16890:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16894:	008000b4 	movhi	r2,2
   16898:	10937504 	addi	r2,r2,19924
   1689c:	10800017 	ldw	r2,0(r2)
   168a0:	e0ffe78b 	ldhu	r3,-98(fp)
   168a4:	10c00b0d 	sth	r3,44(r2)
   168a8:	e0bfe617 	ldw	r2,-104(fp)
   168ac:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168b0:	e0bfea17 	ldw	r2,-88(fp)
   168b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   168b8:	e0800217 	ldw	r2,8(fp)
   168bc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   168c0:	e0bfe78b 	ldhu	r2,-98(fp)
   168c4:	00010006 	br	16cc8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   168c8:	e1bffd0b 	ldhu	r6,-12(fp)
   168cc:	e0fffe03 	ldbu	r3,-8(fp)
   168d0:	e0bfff0b 	ldhu	r2,-4(fp)
   168d4:	e17ff704 	addi	r5,fp,-36
   168d8:	d8800015 	stw	r2,0(sp)
   168dc:	e13ffc17 	ldw	r4,-16(fp)
   168e0:	180f883a 	mov	r7,r3
   168e4:	00171900 	call	17190 <OS_FlagBlock>
   168e8:	e0bfe617 	ldw	r2,-104(fp)
   168ec:	e0bfeb15 	stw	r2,-84(fp)
   168f0:	e0bfeb17 	ldw	r2,-84(fp)
   168f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   168f8:	00009206 	br	16b44 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   168fc:	e0bffc17 	ldw	r2,-16(fp)
   16900:	10c0020b 	ldhu	r3,8(r2)
   16904:	e0bffd0b 	ldhu	r2,-12(fp)
   16908:	1884703a 	and	r2,r3,r2
   1690c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   16910:	e0bfe78b 	ldhu	r2,-98(fp)
   16914:	10001926 	beq	r2,zero,1697c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16918:	e0bfe503 	ldbu	r2,-108(fp)
   1691c:	10800058 	cmpnei	r2,r2,1
   16920:	1000091e 	bne	r2,zero,16948 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   16924:	e0bffc17 	ldw	r2,-16(fp)
   16928:	1080020b 	ldhu	r2,8(r2)
   1692c:	1007883a 	mov	r3,r2
   16930:	e0bfe78b 	ldhu	r2,-98(fp)
   16934:	0084303a 	nor	r2,zero,r2
   16938:	1884703a 	and	r2,r3,r2
   1693c:	1007883a 	mov	r3,r2
   16940:	e0bffc17 	ldw	r2,-16(fp)
   16944:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16948:	008000b4 	movhi	r2,2
   1694c:	10937504 	addi	r2,r2,19924
   16950:	10800017 	ldw	r2,0(r2)
   16954:	e0ffe78b 	ldhu	r3,-98(fp)
   16958:	10c00b0d 	sth	r3,44(r2)
   1695c:	e0bfe617 	ldw	r2,-104(fp)
   16960:	e0bfec15 	stw	r2,-80(fp)
   16964:	e0bfec17 	ldw	r2,-80(fp)
   16968:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1696c:	e0800217 	ldw	r2,8(fp)
   16970:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16974:	e0bfe78b 	ldhu	r2,-98(fp)
   16978:	0000d306 	br	16cc8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1697c:	e1bffd0b 	ldhu	r6,-12(fp)
   16980:	e0fffe03 	ldbu	r3,-8(fp)
   16984:	e0bfff0b 	ldhu	r2,-4(fp)
   16988:	e17ff704 	addi	r5,fp,-36
   1698c:	d8800015 	stw	r2,0(sp)
   16990:	e13ffc17 	ldw	r4,-16(fp)
   16994:	180f883a 	mov	r7,r3
   16998:	00171900 	call	17190 <OS_FlagBlock>
   1699c:	e0bfe617 	ldw	r2,-104(fp)
   169a0:	e0bfed15 	stw	r2,-76(fp)
   169a4:	e0bfed17 	ldw	r2,-76(fp)
   169a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   169ac:	00006506 	br	16b44 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   169b0:	e0bffc17 	ldw	r2,-16(fp)
   169b4:	1080020b 	ldhu	r2,8(r2)
   169b8:	0084303a 	nor	r2,zero,r2
   169bc:	1007883a 	mov	r3,r2
   169c0:	e0bffd0b 	ldhu	r2,-12(fp)
   169c4:	1884703a 	and	r2,r3,r2
   169c8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   169cc:	e0ffe78b 	ldhu	r3,-98(fp)
   169d0:	e0bffd0b 	ldhu	r2,-12(fp)
   169d4:	1880171e 	bne	r3,r2,16a34 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   169d8:	e0bfe503 	ldbu	r2,-108(fp)
   169dc:	10800058 	cmpnei	r2,r2,1
   169e0:	1000071e 	bne	r2,zero,16a00 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10c0020b 	ldhu	r3,8(r2)
   169ec:	e0bfe78b 	ldhu	r2,-98(fp)
   169f0:	1884b03a 	or	r2,r3,r2
   169f4:	1007883a 	mov	r3,r2
   169f8:	e0bffc17 	ldw	r2,-16(fp)
   169fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16a00:	008000b4 	movhi	r2,2
   16a04:	10937504 	addi	r2,r2,19924
   16a08:	10800017 	ldw	r2,0(r2)
   16a0c:	e0ffe78b 	ldhu	r3,-98(fp)
   16a10:	10c00b0d 	sth	r3,44(r2)
   16a14:	e0bfe617 	ldw	r2,-104(fp)
   16a18:	e0bfee15 	stw	r2,-72(fp)
   16a1c:	e0bfee17 	ldw	r2,-72(fp)
   16a20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16a24:	e0800217 	ldw	r2,8(fp)
   16a28:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16a2c:	e0bfe78b 	ldhu	r2,-98(fp)
   16a30:	0000a506 	br	16cc8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16a34:	e1bffd0b 	ldhu	r6,-12(fp)
   16a38:	e0fffe03 	ldbu	r3,-8(fp)
   16a3c:	e0bfff0b 	ldhu	r2,-4(fp)
   16a40:	e17ff704 	addi	r5,fp,-36
   16a44:	d8800015 	stw	r2,0(sp)
   16a48:	e13ffc17 	ldw	r4,-16(fp)
   16a4c:	180f883a 	mov	r7,r3
   16a50:	00171900 	call	17190 <OS_FlagBlock>
   16a54:	e0bfe617 	ldw	r2,-104(fp)
   16a58:	e0bfef15 	stw	r2,-68(fp)
   16a5c:	e0bfef17 	ldw	r2,-68(fp)
   16a60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16a64:	00003706 	br	16b44 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   16a68:	e0bffc17 	ldw	r2,-16(fp)
   16a6c:	1080020b 	ldhu	r2,8(r2)
   16a70:	0084303a 	nor	r2,zero,r2
   16a74:	1007883a 	mov	r3,r2
   16a78:	e0bffd0b 	ldhu	r2,-12(fp)
   16a7c:	1884703a 	and	r2,r3,r2
   16a80:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16a84:	e0bfe78b 	ldhu	r2,-98(fp)
   16a88:	10001726 	beq	r2,zero,16ae8 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16a8c:	e0bfe503 	ldbu	r2,-108(fp)
   16a90:	10800058 	cmpnei	r2,r2,1
   16a94:	1000071e 	bne	r2,zero,16ab4 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16a98:	e0bffc17 	ldw	r2,-16(fp)
   16a9c:	10c0020b 	ldhu	r3,8(r2)
   16aa0:	e0bfe78b 	ldhu	r2,-98(fp)
   16aa4:	1884b03a 	or	r2,r3,r2
   16aa8:	1007883a 	mov	r3,r2
   16aac:	e0bffc17 	ldw	r2,-16(fp)
   16ab0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16ab4:	008000b4 	movhi	r2,2
   16ab8:	10937504 	addi	r2,r2,19924
   16abc:	10800017 	ldw	r2,0(r2)
   16ac0:	e0ffe78b 	ldhu	r3,-98(fp)
   16ac4:	10c00b0d 	sth	r3,44(r2)
   16ac8:	e0bfe617 	ldw	r2,-104(fp)
   16acc:	e0bff015 	stw	r2,-64(fp)
   16ad0:	e0bff017 	ldw	r2,-64(fp)
   16ad4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16ad8:	e0800217 	ldw	r2,8(fp)
   16adc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16ae0:	e0bfe78b 	ldhu	r2,-98(fp)
   16ae4:	00007806 	br	16cc8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16ae8:	e1bffd0b 	ldhu	r6,-12(fp)
   16aec:	e0fffe03 	ldbu	r3,-8(fp)
   16af0:	e0bfff0b 	ldhu	r2,-4(fp)
   16af4:	e17ff704 	addi	r5,fp,-36
   16af8:	d8800015 	stw	r2,0(sp)
   16afc:	e13ffc17 	ldw	r4,-16(fp)
   16b00:	180f883a 	mov	r7,r3
   16b04:	00171900 	call	17190 <OS_FlagBlock>
   16b08:	e0bfe617 	ldw	r2,-104(fp)
   16b0c:	e0bff115 	stw	r2,-60(fp)
   16b10:	e0bff117 	ldw	r2,-60(fp)
   16b14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16b18:	00000a06 	br	16b44 <OSFlagPend+0x458>
   16b1c:	e0bfe617 	ldw	r2,-104(fp)
   16b20:	e0bff215 	stw	r2,-56(fp)
   16b24:	e0bff217 	ldw	r2,-56(fp)
   16b28:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   16b2c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   16b30:	e0800217 	ldw	r2,8(fp)
   16b34:	00c01bc4 	movi	r3,111
   16b38:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   16b3c:	e0bfe78b 	ldhu	r2,-98(fp)
   16b40:	00006106 	br	16cc8 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   16b44:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b48:	0005303a 	rdctl	r2,status
   16b4c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b50:	e0fff317 	ldw	r3,-52(fp)
   16b54:	00bfff84 	movi	r2,-2
   16b58:	1884703a 	and	r2,r3,r2
   16b5c:	1001703a 	wrctl	status,r2
  
  return context;
   16b60:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   16b64:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   16b68:	008000b4 	movhi	r2,2
   16b6c:	10937504 	addi	r2,r2,19924
   16b70:	10800017 	ldw	r2,0(r2)
   16b74:	10800c43 	ldbu	r2,49(r2)
   16b78:	10803fcc 	andi	r2,r2,255
   16b7c:	10002226 	beq	r2,zero,16c08 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16b80:	008000b4 	movhi	r2,2
   16b84:	10937504 	addi	r2,r2,19924
   16b88:	10800017 	ldw	r2,0(r2)
   16b8c:	10800c43 	ldbu	r2,49(r2)
   16b90:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16b94:	008000b4 	movhi	r2,2
   16b98:	10937504 	addi	r2,r2,19924
   16b9c:	10800017 	ldw	r2,0(r2)
   16ba0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   16ba4:	e0bff704 	addi	r2,fp,-36
   16ba8:	1009883a 	mov	r4,r2
   16bac:	00175480 	call	17548 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16bb0:	008000b4 	movhi	r2,2
   16bb4:	10937504 	addi	r2,r2,19924
   16bb8:	10800017 	ldw	r2,0(r2)
   16bbc:	10000c05 	stb	zero,48(r2)
   16bc0:	e0bfe617 	ldw	r2,-104(fp)
   16bc4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16bc8:	e0bff417 	ldw	r2,-48(fp)
   16bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16bd0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   16bd4:	e0bfe803 	ldbu	r2,-96(fp)
   16bd8:	108000a0 	cmpeqi	r2,r2,2
   16bdc:	10000426 	beq	r2,zero,16bf0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16be0:	e0800217 	ldw	r2,8(fp)
   16be4:	00c00384 	movi	r3,14
   16be8:	10c00005 	stb	r3,0(r2)
                 break;
   16bec:	00000406 	br	16c00 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16bf0:	e0800217 	ldw	r2,8(fp)
   16bf4:	00c00284 	movi	r3,10
   16bf8:	10c00005 	stb	r3,0(r2)
                 break;
   16bfc:	0001883a 	nop
        }
        return (flags_rdy);
   16c00:	e0bfe78b 	ldhu	r2,-98(fp)
   16c04:	00003006 	br	16cc8 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   16c08:	008000b4 	movhi	r2,2
   16c0c:	10937504 	addi	r2,r2,19924
   16c10:	10800017 	ldw	r2,0(r2)
   16c14:	10800b0b 	ldhu	r2,44(r2)
   16c18:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   16c1c:	e0bfe503 	ldbu	r2,-108(fp)
   16c20:	10800058 	cmpnei	r2,r2,1
   16c24:	1000211e 	bne	r2,zero,16cac <OSFlagPend+0x5c0>
        switch (wait_type) {
   16c28:	e0bffe03 	ldbu	r2,-8(fp)
   16c2c:	10001616 	blt	r2,zero,16c88 <OSFlagPend+0x59c>
   16c30:	10c00090 	cmplti	r3,r2,2
   16c34:	18000c1e 	bne	r3,zero,16c68 <OSFlagPend+0x57c>
   16c38:	10800108 	cmpgei	r2,r2,4
   16c3c:	1000121e 	bne	r2,zero,16c88 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16c40:	e0bffc17 	ldw	r2,-16(fp)
   16c44:	1080020b 	ldhu	r2,8(r2)
   16c48:	1007883a 	mov	r3,r2
   16c4c:	e0bfe78b 	ldhu	r2,-98(fp)
   16c50:	0084303a 	nor	r2,zero,r2
   16c54:	1884703a 	and	r2,r3,r2
   16c58:	1007883a 	mov	r3,r2
   16c5c:	e0bffc17 	ldw	r2,-16(fp)
   16c60:	10c0020d 	sth	r3,8(r2)
                 break;
   16c64:	00001106 	br	16cac <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16c68:	e0bffc17 	ldw	r2,-16(fp)
   16c6c:	10c0020b 	ldhu	r3,8(r2)
   16c70:	e0bfe78b 	ldhu	r2,-98(fp)
   16c74:	1884b03a 	or	r2,r3,r2
   16c78:	1007883a 	mov	r3,r2
   16c7c:	e0bffc17 	ldw	r2,-16(fp)
   16c80:	10c0020d 	sth	r3,8(r2)
                 break;
   16c84:	00000906 	br	16cac <OSFlagPend+0x5c0>
   16c88:	e0bfe617 	ldw	r2,-104(fp)
   16c8c:	e0bff515 	stw	r2,-44(fp)
   16c90:	e0bff517 	ldw	r2,-44(fp)
   16c94:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16c98:	e0800217 	ldw	r2,8(fp)
   16c9c:	00c01bc4 	movi	r3,111
   16ca0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16ca4:	0005883a 	mov	r2,zero
   16ca8:	00000706 	br	16cc8 <OSFlagPend+0x5dc>
   16cac:	e0bfe617 	ldw	r2,-104(fp)
   16cb0:	e0bff615 	stw	r2,-40(fp)
   16cb4:	e0bff617 	ldw	r2,-40(fp)
   16cb8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16cbc:	e0800217 	ldw	r2,8(fp)
   16cc0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   16cc4:	e0bfe78b 	ldhu	r2,-98(fp)
}
   16cc8:	e037883a 	mov	sp,fp
   16ccc:	dfc00117 	ldw	ra,4(sp)
   16cd0:	df000017 	ldw	fp,0(sp)
   16cd4:	dec00204 	addi	sp,sp,8
   16cd8:	f800283a 	ret

00016cdc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   16cdc:	defffb04 	addi	sp,sp,-20
   16ce0:	df000415 	stw	fp,16(sp)
   16ce4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16ce8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cec:	0005303a 	rdctl	r2,status
   16cf0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cf4:	e0fffe17 	ldw	r3,-8(fp)
   16cf8:	00bfff84 	movi	r2,-2
   16cfc:	1884703a 	and	r2,r3,r2
   16d00:	1001703a 	wrctl	status,r2
  
  return context;
   16d04:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16d08:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   16d0c:	008000b4 	movhi	r2,2
   16d10:	10937504 	addi	r2,r2,19924
   16d14:	10800017 	ldw	r2,0(r2)
   16d18:	10800b0b 	ldhu	r2,44(r2)
   16d1c:	e0bffd0d 	sth	r2,-12(fp)
   16d20:	e0bffc17 	ldw	r2,-16(fp)
   16d24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d28:	e0bfff17 	ldw	r2,-4(fp)
   16d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16d30:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16d34:	e037883a 	mov	sp,fp
   16d38:	df000017 	ldw	fp,0(sp)
   16d3c:	dec00104 	addi	sp,sp,4
   16d40:	f800283a 	ret

00016d44 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16d44:	deffef04 	addi	sp,sp,-68
   16d48:	dfc01015 	stw	ra,64(sp)
   16d4c:	df000f15 	stw	fp,60(sp)
   16d50:	df000f04 	addi	fp,sp,60
   16d54:	e13ffc15 	stw	r4,-16(fp)
   16d58:	2807883a 	mov	r3,r5
   16d5c:	3005883a 	mov	r2,r6
   16d60:	e1ffff15 	stw	r7,-4(fp)
   16d64:	e0fffd0d 	sth	r3,-12(fp)
   16d68:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   16d6c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16d70:	e0bfff17 	ldw	r2,-4(fp)
   16d74:	1000021e 	bne	r2,zero,16d80 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   16d78:	0005883a 	mov	r2,zero
   16d7c:	0000ce06 	br	170b8 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16d80:	e0bffc17 	ldw	r2,-16(fp)
   16d84:	1000051e 	bne	r2,zero,16d9c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16d88:	e0bfff17 	ldw	r2,-4(fp)
   16d8c:	00c01b84 	movi	r3,110
   16d90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16d94:	0005883a 	mov	r2,zero
   16d98:	0000c706 	br	170b8 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   16d9c:	e0bffc17 	ldw	r2,-16(fp)
   16da0:	10800003 	ldbu	r2,0(r2)
   16da4:	10803fcc 	andi	r2,r2,255
   16da8:	10800160 	cmpeqi	r2,r2,5
   16dac:	1000051e 	bne	r2,zero,16dc4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16db0:	e0bfff17 	ldw	r2,-4(fp)
   16db4:	00c00044 	movi	r3,1
   16db8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16dbc:	0005883a 	mov	r2,zero
   16dc0:	0000bd06 	br	170b8 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16dc4:	0005303a 	rdctl	r2,status
   16dc8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16dcc:	e0fff617 	ldw	r3,-40(fp)
   16dd0:	00bfff84 	movi	r2,-2
   16dd4:	1884703a 	and	r2,r3,r2
   16dd8:	1001703a 	wrctl	status,r2
  
  return context;
   16ddc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16de0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   16de4:	e0bffe03 	ldbu	r2,-8(fp)
   16de8:	10000326 	beq	r2,zero,16df8 <OSFlagPost+0xb4>
   16dec:	10800060 	cmpeqi	r2,r2,1
   16df0:	10000b1e 	bne	r2,zero,16e20 <OSFlagPost+0xdc>
   16df4:	00001206 	br	16e40 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16df8:	e0bffc17 	ldw	r2,-16(fp)
   16dfc:	1080020b 	ldhu	r2,8(r2)
   16e00:	1007883a 	mov	r3,r2
   16e04:	e0bffd0b 	ldhu	r2,-12(fp)
   16e08:	0084303a 	nor	r2,zero,r2
   16e0c:	1884703a 	and	r2,r3,r2
   16e10:	1007883a 	mov	r3,r2
   16e14:	e0bffc17 	ldw	r2,-16(fp)
   16e18:	10c0020d 	sth	r3,8(r2)
             break;
   16e1c:	00001106 	br	16e64 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16e20:	e0bffc17 	ldw	r2,-16(fp)
   16e24:	10c0020b 	ldhu	r3,8(r2)
   16e28:	e0bffd0b 	ldhu	r2,-12(fp)
   16e2c:	1884b03a 	or	r2,r3,r2
   16e30:	1007883a 	mov	r3,r2
   16e34:	e0bffc17 	ldw	r2,-16(fp)
   16e38:	10c0020d 	sth	r3,8(r2)
             break;
   16e3c:	00000906 	br	16e64 <OSFlagPost+0x120>
   16e40:	e0bff317 	ldw	r2,-52(fp)
   16e44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e48:	e0bff717 	ldw	r2,-36(fp)
   16e4c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16e50:	e0bfff17 	ldw	r2,-4(fp)
   16e54:	00c01c44 	movi	r3,113
   16e58:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   16e5c:	0005883a 	mov	r2,zero
   16e60:	00009506 	br	170b8 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16e64:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16e68:	e0bffc17 	ldw	r2,-16(fp)
   16e6c:	10800117 	ldw	r2,4(r2)
   16e70:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16e74:	00007406 	br	17048 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   16e78:	e0bff117 	ldw	r2,-60(fp)
   16e7c:	10800483 	ldbu	r2,18(r2)
   16e80:	10803fcc 	andi	r2,r2,255
   16e84:	10c00060 	cmpeqi	r3,r2,1
   16e88:	18004d1e 	bne	r3,zero,16fc0 <OSFlagPost+0x27c>
   16e8c:	10c00088 	cmpgei	r3,r2,2
   16e90:	1800021e 	bne	r3,zero,16e9c <OSFlagPost+0x158>
   16e94:	10003126 	beq	r2,zero,16f5c <OSFlagPost+0x218>
   16e98:	00005f06 	br	17018 <OSFlagPost+0x2d4>
   16e9c:	10c000a0 	cmpeqi	r3,r2,2
   16ea0:	1800031e 	bne	r3,zero,16eb0 <OSFlagPost+0x16c>
   16ea4:	108000e0 	cmpeqi	r2,r2,3
   16ea8:	1000181e 	bne	r2,zero,16f0c <OSFlagPost+0x1c8>
   16eac:	00005a06 	br	17018 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16eb0:	e0bffc17 	ldw	r2,-16(fp)
   16eb4:	10c0020b 	ldhu	r3,8(r2)
   16eb8:	e0bff117 	ldw	r2,-60(fp)
   16ebc:	1080040b 	ldhu	r2,16(r2)
   16ec0:	1884703a 	and	r2,r3,r2
   16ec4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16ec8:	e0bff117 	ldw	r2,-60(fp)
   16ecc:	1080040b 	ldhu	r2,16(r2)
   16ed0:	10ffffcc 	andi	r3,r2,65535
   16ed4:	e0bff40b 	ldhu	r2,-48(fp)
   16ed8:	18800b1e 	bne	r3,r2,16f08 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16edc:	e0bff40b 	ldhu	r2,-48(fp)
   16ee0:	e13ff117 	ldw	r4,-60(fp)
   16ee4:	100b883a 	mov	r5,r2
   16ee8:	00174380 	call	17438 <OS_FlagTaskRdy>
   16eec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16ef0:	e0bff483 	ldbu	r2,-46(fp)
   16ef4:	10800058 	cmpnei	r2,r2,1
   16ef8:	1000031e 	bne	r2,zero,16f08 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16efc:	00800044 	movi	r2,1
   16f00:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16f04:	00004d06 	br	1703c <OSFlagPost+0x2f8>
   16f08:	00004c06 	br	1703c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16f0c:	e0bffc17 	ldw	r2,-16(fp)
   16f10:	10c0020b 	ldhu	r3,8(r2)
   16f14:	e0bff117 	ldw	r2,-60(fp)
   16f18:	1080040b 	ldhu	r2,16(r2)
   16f1c:	1884703a 	and	r2,r3,r2
   16f20:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16f24:	e0bff40b 	ldhu	r2,-48(fp)
   16f28:	10000b26 	beq	r2,zero,16f58 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16f2c:	e0bff40b 	ldhu	r2,-48(fp)
   16f30:	e13ff117 	ldw	r4,-60(fp)
   16f34:	100b883a 	mov	r5,r2
   16f38:	00174380 	call	17438 <OS_FlagTaskRdy>
   16f3c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16f40:	e0bff483 	ldbu	r2,-46(fp)
   16f44:	10800058 	cmpnei	r2,r2,1
   16f48:	1000031e 	bne	r2,zero,16f58 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16f4c:	00800044 	movi	r2,1
   16f50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16f54:	00003906 	br	1703c <OSFlagPost+0x2f8>
   16f58:	00003806 	br	1703c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16f5c:	e0bffc17 	ldw	r2,-16(fp)
   16f60:	1080020b 	ldhu	r2,8(r2)
   16f64:	0084303a 	nor	r2,zero,r2
   16f68:	1007883a 	mov	r3,r2
   16f6c:	e0bff117 	ldw	r2,-60(fp)
   16f70:	1080040b 	ldhu	r2,16(r2)
   16f74:	1884703a 	and	r2,r3,r2
   16f78:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16f7c:	e0bff117 	ldw	r2,-60(fp)
   16f80:	1080040b 	ldhu	r2,16(r2)
   16f84:	10ffffcc 	andi	r3,r2,65535
   16f88:	e0bff40b 	ldhu	r2,-48(fp)
   16f8c:	18800b1e 	bne	r3,r2,16fbc <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16f90:	e0bff40b 	ldhu	r2,-48(fp)
   16f94:	e13ff117 	ldw	r4,-60(fp)
   16f98:	100b883a 	mov	r5,r2
   16f9c:	00174380 	call	17438 <OS_FlagTaskRdy>
   16fa0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16fa4:	e0bff483 	ldbu	r2,-46(fp)
   16fa8:	10800058 	cmpnei	r2,r2,1
   16fac:	1000031e 	bne	r2,zero,16fbc <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16fb0:	00800044 	movi	r2,1
   16fb4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16fb8:	00002006 	br	1703c <OSFlagPost+0x2f8>
   16fbc:	00001f06 	br	1703c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16fc0:	e0bffc17 	ldw	r2,-16(fp)
   16fc4:	1080020b 	ldhu	r2,8(r2)
   16fc8:	0084303a 	nor	r2,zero,r2
   16fcc:	1007883a 	mov	r3,r2
   16fd0:	e0bff117 	ldw	r2,-60(fp)
   16fd4:	1080040b 	ldhu	r2,16(r2)
   16fd8:	1884703a 	and	r2,r3,r2
   16fdc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16fe0:	e0bff40b 	ldhu	r2,-48(fp)
   16fe4:	10000b26 	beq	r2,zero,17014 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16fe8:	e0bff40b 	ldhu	r2,-48(fp)
   16fec:	e13ff117 	ldw	r4,-60(fp)
   16ff0:	100b883a 	mov	r5,r2
   16ff4:	00174380 	call	17438 <OS_FlagTaskRdy>
   16ff8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   16ffc:	e0bff483 	ldbu	r2,-46(fp)
   17000:	10800058 	cmpnei	r2,r2,1
   17004:	1000031e 	bne	r2,zero,17014 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   17008:	00800044 	movi	r2,1
   1700c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   17010:	00000a06 	br	1703c <OSFlagPost+0x2f8>
   17014:	00000906 	br	1703c <OSFlagPost+0x2f8>
   17018:	e0bff317 	ldw	r2,-52(fp)
   1701c:	e0bff815 	stw	r2,-32(fp)
   17020:	e0bff817 	ldw	r2,-32(fp)
   17024:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   17028:	e0bfff17 	ldw	r2,-4(fp)
   1702c:	00c01bc4 	movi	r3,111
   17030:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   17034:	0005883a 	mov	r2,zero
   17038:	00001f06 	br	170b8 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1703c:	e0bff117 	ldw	r2,-60(fp)
   17040:	10800017 	ldw	r2,0(r2)
   17044:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   17048:	e0bff117 	ldw	r2,-60(fp)
   1704c:	103f8a1e 	bne	r2,zero,16e78 <__alt_mem_Flash_flash_data+0xf4016e78>
   17050:	e0bff317 	ldw	r2,-52(fp)
   17054:	e0bff915 	stw	r2,-28(fp)
   17058:	e0bff917 	ldw	r2,-28(fp)
   1705c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   17060:	e0bff203 	ldbu	r2,-56(fp)
   17064:	10800058 	cmpnei	r2,r2,1
   17068:	1000011e 	bne	r2,zero,17070 <OSFlagPost+0x32c>
        OS_Sched();
   1706c:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17070:	0005303a 	rdctl	r2,status
   17074:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17078:	e0fffa17 	ldw	r3,-24(fp)
   1707c:	00bfff84 	movi	r2,-2
   17080:	1884703a 	and	r2,r3,r2
   17084:	1001703a 	wrctl	status,r2
  
  return context;
   17088:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1708c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   17090:	e0bffc17 	ldw	r2,-16(fp)
   17094:	1080020b 	ldhu	r2,8(r2)
   17098:	e0bff50d 	sth	r2,-44(fp)
   1709c:	e0bff317 	ldw	r2,-52(fp)
   170a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170a4:	e0bffb17 	ldw	r2,-20(fp)
   170a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   170ac:	e0bfff17 	ldw	r2,-4(fp)
   170b0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   170b4:	e0bff50b 	ldhu	r2,-44(fp)
}
   170b8:	e037883a 	mov	sp,fp
   170bc:	dfc00117 	ldw	ra,4(sp)
   170c0:	df000017 	ldw	fp,0(sp)
   170c4:	dec00204 	addi	sp,sp,8
   170c8:	f800283a 	ret

000170cc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   170cc:	defff904 	addi	sp,sp,-28
   170d0:	df000615 	stw	fp,24(sp)
   170d4:	df000604 	addi	fp,sp,24
   170d8:	e13ffe15 	stw	r4,-8(fp)
   170dc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   170e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   170e4:	e0bfff17 	ldw	r2,-4(fp)
   170e8:	1000021e 	bne	r2,zero,170f4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   170ec:	0005883a 	mov	r2,zero
   170f0:	00002306 	br	17180 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   170f4:	e0bffe17 	ldw	r2,-8(fp)
   170f8:	1000051e 	bne	r2,zero,17110 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   170fc:	e0bfff17 	ldw	r2,-4(fp)
   17100:	00c01b84 	movi	r3,110
   17104:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17108:	0005883a 	mov	r2,zero
   1710c:	00001c06 	br	17180 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   17110:	e0bffe17 	ldw	r2,-8(fp)
   17114:	10800003 	ldbu	r2,0(r2)
   17118:	10803fcc 	andi	r2,r2,255
   1711c:	10800160 	cmpeqi	r2,r2,5
   17120:	1000051e 	bne	r2,zero,17138 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17124:	e0bfff17 	ldw	r2,-4(fp)
   17128:	00c00044 	movi	r3,1
   1712c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   17130:	0005883a 	mov	r2,zero
   17134:	00001206 	br	17180 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17138:	0005303a 	rdctl	r2,status
   1713c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17140:	e0fffc17 	ldw	r3,-16(fp)
   17144:	00bfff84 	movi	r2,-2
   17148:	1884703a 	and	r2,r3,r2
   1714c:	1001703a 	wrctl	status,r2
  
  return context;
   17150:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17154:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   17158:	e0bffe17 	ldw	r2,-8(fp)
   1715c:	1080020b 	ldhu	r2,8(r2)
   17160:	e0bffb0d 	sth	r2,-20(fp)
   17164:	e0bffa17 	ldw	r2,-24(fp)
   17168:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1716c:	e0bffd17 	ldw	r2,-12(fp)
   17170:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17174:	e0bfff17 	ldw	r2,-4(fp)
   17178:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1717c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   17180:	e037883a 	mov	sp,fp
   17184:	df000017 	ldw	fp,0(sp)
   17188:	dec00104 	addi	sp,sp,4
   1718c:	f800283a 	ret

00017190 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   17190:	defff804 	addi	sp,sp,-32
   17194:	df000715 	stw	fp,28(sp)
   17198:	df000704 	addi	fp,sp,28
   1719c:	e13ffb15 	stw	r4,-20(fp)
   171a0:	e17ffc15 	stw	r5,-16(fp)
   171a4:	3009883a 	mov	r4,r6
   171a8:	3807883a 	mov	r3,r7
   171ac:	e0800117 	ldw	r2,4(fp)
   171b0:	e13ffd0d 	sth	r4,-12(fp)
   171b4:	e0fffe05 	stb	r3,-8(fp)
   171b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   171bc:	008000b4 	movhi	r2,2
   171c0:	10937504 	addi	r2,r2,19924
   171c4:	10c00017 	ldw	r3,0(r2)
   171c8:	008000b4 	movhi	r2,2
   171cc:	10937504 	addi	r2,r2,19924
   171d0:	10800017 	ldw	r2,0(r2)
   171d4:	10800c03 	ldbu	r2,48(r2)
   171d8:	10800814 	ori	r2,r2,32
   171dc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   171e0:	008000b4 	movhi	r2,2
   171e4:	10937504 	addi	r2,r2,19924
   171e8:	10800017 	ldw	r2,0(r2)
   171ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   171f0:	008000b4 	movhi	r2,2
   171f4:	10937504 	addi	r2,r2,19924
   171f8:	10800017 	ldw	r2,0(r2)
   171fc:	e0ffff0b 	ldhu	r3,-4(fp)
   17200:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   17204:	008000b4 	movhi	r2,2
   17208:	10937504 	addi	r2,r2,19924
   1720c:	10800017 	ldw	r2,0(r2)
   17210:	e0fffc17 	ldw	r3,-16(fp)
   17214:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   17218:	e0bffc17 	ldw	r2,-16(fp)
   1721c:	e0fffd0b 	ldhu	r3,-12(fp)
   17220:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   17224:	e0bffc17 	ldw	r2,-16(fp)
   17228:	e0fffe03 	ldbu	r3,-8(fp)
   1722c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   17230:	008000b4 	movhi	r2,2
   17234:	10937504 	addi	r2,r2,19924
   17238:	10c00017 	ldw	r3,0(r2)
   1723c:	e0bffc17 	ldw	r2,-16(fp)
   17240:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   17244:	e0bffb17 	ldw	r2,-20(fp)
   17248:	10c00117 	ldw	r3,4(r2)
   1724c:	e0bffc17 	ldw	r2,-16(fp)
   17250:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   17254:	e0bffc17 	ldw	r2,-16(fp)
   17258:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1725c:	e0bffc17 	ldw	r2,-16(fp)
   17260:	e0fffb17 	ldw	r3,-20(fp)
   17264:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   17268:	e0bffb17 	ldw	r2,-20(fp)
   1726c:	10800117 	ldw	r2,4(r2)
   17270:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   17274:	e0bff917 	ldw	r2,-28(fp)
   17278:	10000326 	beq	r2,zero,17288 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1727c:	e0bff917 	ldw	r2,-28(fp)
   17280:	e0fffc17 	ldw	r3,-16(fp)
   17284:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   17288:	e0bffb17 	ldw	r2,-20(fp)
   1728c:	e0fffc17 	ldw	r3,-16(fp)
   17290:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   17294:	008000b4 	movhi	r2,2
   17298:	10937504 	addi	r2,r2,19924
   1729c:	10800017 	ldw	r2,0(r2)
   172a0:	10800d03 	ldbu	r2,52(r2)
   172a4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   172a8:	e0fffa03 	ldbu	r3,-24(fp)
   172ac:	e13ffa03 	ldbu	r4,-24(fp)
   172b0:	008000b4 	movhi	r2,2
   172b4:	10937244 	addi	r2,r2,19913
   172b8:	1105883a 	add	r2,r2,r4
   172bc:	10800003 	ldbu	r2,0(r2)
   172c0:	1009883a 	mov	r4,r2
   172c4:	008000b4 	movhi	r2,2
   172c8:	10937504 	addi	r2,r2,19924
   172cc:	10800017 	ldw	r2,0(r2)
   172d0:	10800d43 	ldbu	r2,53(r2)
   172d4:	0084303a 	nor	r2,zero,r2
   172d8:	2084703a 	and	r2,r4,r2
   172dc:	1009883a 	mov	r4,r2
   172e0:	008000b4 	movhi	r2,2
   172e4:	10937244 	addi	r2,r2,19913
   172e8:	10c5883a 	add	r2,r2,r3
   172ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   172f0:	e0fffa03 	ldbu	r3,-24(fp)
   172f4:	008000b4 	movhi	r2,2
   172f8:	10937244 	addi	r2,r2,19913
   172fc:	10c5883a 	add	r2,r2,r3
   17300:	10800003 	ldbu	r2,0(r2)
   17304:	10803fcc 	andi	r2,r2,255
   17308:	10000e1e 	bne	r2,zero,17344 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1730c:	008000b4 	movhi	r2,2
   17310:	10937504 	addi	r2,r2,19924
   17314:	10800017 	ldw	r2,0(r2)
   17318:	10800d83 	ldbu	r2,54(r2)
   1731c:	0084303a 	nor	r2,zero,r2
   17320:	1007883a 	mov	r3,r2
   17324:	008000b4 	movhi	r2,2
   17328:	10937204 	addi	r2,r2,19912
   1732c:	10800003 	ldbu	r2,0(r2)
   17330:	1884703a 	and	r2,r3,r2
   17334:	1007883a 	mov	r3,r2
   17338:	008000b4 	movhi	r2,2
   1733c:	10937204 	addi	r2,r2,19912
   17340:	10c00005 	stb	r3,0(r2)
    }
}
   17344:	e037883a 	mov	sp,fp
   17348:	df000017 	ldw	fp,0(sp)
   1734c:	dec00104 	addi	sp,sp,4
   17350:	f800283a 	ret

00017354 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   17354:	defffb04 	addi	sp,sp,-20
   17358:	dfc00415 	stw	ra,16(sp)
   1735c:	df000315 	stw	fp,12(sp)
   17360:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   17364:	01000134 	movhi	r4,4
   17368:	211ba304 	addi	r4,r4,28300
   1736c:	0140dc04 	movi	r5,880
   17370:	00154b40 	call	154b4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   17374:	00800134 	movhi	r2,4
   17378:	109ba304 	addi	r2,r2,28300
   1737c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   17380:	00800134 	movhi	r2,4
   17384:	109bae04 	addi	r2,r2,28344
   17388:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1738c:	e03ffd0d 	sth	zero,-12(fp)
   17390:	00001306 	br	173e0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   17394:	e0bffe17 	ldw	r2,-8(fp)
   17398:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1739c:	e0bffe17 	ldw	r2,-8(fp)
   173a0:	e0ffff17 	ldw	r3,-4(fp)
   173a4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   173a8:	e0bffe17 	ldw	r2,-8(fp)
   173ac:	00c00fc4 	movi	r3,63
   173b0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   173b4:	e0bffe17 	ldw	r2,-8(fp)
   173b8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   173bc:	e0bffe17 	ldw	r2,-8(fp)
   173c0:	10800b04 	addi	r2,r2,44
   173c4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   173c8:	e0bfff17 	ldw	r2,-4(fp)
   173cc:	10800b04 	addi	r2,r2,44
   173d0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   173d4:	e0bffd0b 	ldhu	r2,-12(fp)
   173d8:	10800044 	addi	r2,r2,1
   173dc:	e0bffd0d 	sth	r2,-12(fp)
   173e0:	e0bffd0b 	ldhu	r2,-12(fp)
   173e4:	108004f0 	cmpltui	r2,r2,19
   173e8:	103fea1e 	bne	r2,zero,17394 <__alt_mem_Flash_flash_data+0xf4017394>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   173ec:	e0bffe17 	ldw	r2,-8(fp)
   173f0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   173f4:	e0bffe17 	ldw	r2,-8(fp)
   173f8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   173fc:	e0bffe17 	ldw	r2,-8(fp)
   17400:	00c00fc4 	movi	r3,63
   17404:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   17408:	e0bffe17 	ldw	r2,-8(fp)
   1740c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   17410:	008000b4 	movhi	r2,2
   17414:	10937704 	addi	r2,r2,19932
   17418:	00c00134 	movhi	r3,4
   1741c:	18dba304 	addi	r3,r3,28300
   17420:	10c00015 	stw	r3,0(r2)
#endif
}
   17424:	e037883a 	mov	sp,fp
   17428:	dfc00117 	ldw	ra,4(sp)
   1742c:	df000017 	ldw	fp,0(sp)
   17430:	dec00204 	addi	sp,sp,8
   17434:	f800283a 	ret

00017438 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   17438:	defffa04 	addi	sp,sp,-24
   1743c:	dfc00515 	stw	ra,20(sp)
   17440:	df000415 	stw	fp,16(sp)
   17444:	df000404 	addi	fp,sp,16
   17448:	e13ffe15 	stw	r4,-8(fp)
   1744c:	2805883a 	mov	r2,r5
   17450:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   17454:	e0bffe17 	ldw	r2,-8(fp)
   17458:	10800217 	ldw	r2,8(r2)
   1745c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   17460:	e0bffd17 	ldw	r2,-12(fp)
   17464:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   17468:	e0bffd17 	ldw	r2,-12(fp)
   1746c:	e0ffff0b 	ldhu	r3,-4(fp)
   17470:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   17474:	e0bffd17 	ldw	r2,-12(fp)
   17478:	10c00c03 	ldbu	r3,48(r2)
   1747c:	00bff7c4 	movi	r2,-33
   17480:	1884703a 	and	r2,r3,r2
   17484:	1007883a 	mov	r3,r2
   17488:	e0bffd17 	ldw	r2,-12(fp)
   1748c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   17490:	e0bffd17 	ldw	r2,-12(fp)
   17494:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   17498:	e0bffd17 	ldw	r2,-12(fp)
   1749c:	10800c03 	ldbu	r2,48(r2)
   174a0:	10803fcc 	andi	r2,r2,255
   174a4:	10001f1e 	bne	r2,zero,17524 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   174a8:	e0bffd17 	ldw	r2,-12(fp)
   174ac:	10c00d83 	ldbu	r3,54(r2)
   174b0:	008000b4 	movhi	r2,2
   174b4:	10937204 	addi	r2,r2,19912
   174b8:	10800003 	ldbu	r2,0(r2)
   174bc:	1884b03a 	or	r2,r3,r2
   174c0:	1007883a 	mov	r3,r2
   174c4:	008000b4 	movhi	r2,2
   174c8:	10937204 	addi	r2,r2,19912
   174cc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   174d0:	e0bffd17 	ldw	r2,-12(fp)
   174d4:	10800d03 	ldbu	r2,52(r2)
   174d8:	10c03fcc 	andi	r3,r2,255
   174dc:	e0bffd17 	ldw	r2,-12(fp)
   174e0:	10800d03 	ldbu	r2,52(r2)
   174e4:	11003fcc 	andi	r4,r2,255
   174e8:	008000b4 	movhi	r2,2
   174ec:	10937244 	addi	r2,r2,19913
   174f0:	1105883a 	add	r2,r2,r4
   174f4:	11000003 	ldbu	r4,0(r2)
   174f8:	e0bffd17 	ldw	r2,-12(fp)
   174fc:	10800d43 	ldbu	r2,53(r2)
   17500:	2084b03a 	or	r2,r4,r2
   17504:	1009883a 	mov	r4,r2
   17508:	008000b4 	movhi	r2,2
   1750c:	10937244 	addi	r2,r2,19913
   17510:	10c5883a 	add	r2,r2,r3
   17514:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   17518:	00800044 	movi	r2,1
   1751c:	e0bffc05 	stb	r2,-16(fp)
   17520:	00000106 	br	17528 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   17524:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   17528:	e13ffe17 	ldw	r4,-8(fp)
   1752c:	00175480 	call	17548 <OS_FlagUnlink>
    return (sched);
   17530:	e0bffc03 	ldbu	r2,-16(fp)
}
   17534:	e037883a 	mov	sp,fp
   17538:	dfc00117 	ldw	ra,4(sp)
   1753c:	df000017 	ldw	fp,0(sp)
   17540:	dec00204 	addi	sp,sp,8
   17544:	f800283a 	ret

00017548 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   17548:	defffa04 	addi	sp,sp,-24
   1754c:	df000515 	stw	fp,20(sp)
   17550:	df000504 	addi	fp,sp,20
   17554:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   17558:	e0bfff17 	ldw	r2,-4(fp)
   1755c:	10800117 	ldw	r2,4(r2)
   17560:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   17564:	e0bfff17 	ldw	r2,-4(fp)
   17568:	10800017 	ldw	r2,0(r2)
   1756c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   17570:	e0bffb17 	ldw	r2,-20(fp)
   17574:	10000b1e 	bne	r2,zero,175a4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	10800317 	ldw	r2,12(r2)
   17580:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   17584:	e0bffd17 	ldw	r2,-12(fp)
   17588:	e0fffc17 	ldw	r3,-16(fp)
   1758c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   17590:	e0bffc17 	ldw	r2,-16(fp)
   17594:	10000b26 	beq	r2,zero,175c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   17598:	e0bffc17 	ldw	r2,-16(fp)
   1759c:	10000115 	stw	zero,4(r2)
   175a0:	00000806 	br	175c4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   175a4:	e0bffb17 	ldw	r2,-20(fp)
   175a8:	e0fffc17 	ldw	r3,-16(fp)
   175ac:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   175b0:	e0bffc17 	ldw	r2,-16(fp)
   175b4:	10000326 	beq	r2,zero,175c4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   175b8:	e0bffc17 	ldw	r2,-16(fp)
   175bc:	e0fffb17 	ldw	r3,-20(fp)
   175c0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   175c4:	e0bfff17 	ldw	r2,-4(fp)
   175c8:	10800217 	ldw	r2,8(r2)
   175cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   175d0:	e0bffe17 	ldw	r2,-8(fp)
   175d4:	10000a15 	stw	zero,40(r2)
#endif
}
   175d8:	e037883a 	mov	sp,fp
   175dc:	df000017 	ldw	fp,0(sp)
   175e0:	dec00104 	addi	sp,sp,4
   175e4:	f800283a 	ret

000175e8 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   175e8:	defffa04 	addi	sp,sp,-24
   175ec:	df000515 	stw	fp,20(sp)
   175f0:	df000504 	addi	fp,sp,20
   175f4:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   175f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   175fc:	e0bfff17 	ldw	r2,-4(fp)
   17600:	1000021e 	bne	r2,zero,1760c <OSMboxAccept+0x24>
        return ((void *)0);
   17604:	0005883a 	mov	r2,zero
   17608:	00001906 	br	17670 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   1760c:	e0bfff17 	ldw	r2,-4(fp)
   17610:	10800003 	ldbu	r2,0(r2)
   17614:	10803fcc 	andi	r2,r2,255
   17618:	10800060 	cmpeqi	r2,r2,1
   1761c:	1000021e 	bne	r2,zero,17628 <OSMboxAccept+0x40>
        return ((void *)0);
   17620:	0005883a 	mov	r2,zero
   17624:	00001206 	br	17670 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17628:	0005303a 	rdctl	r2,status
   1762c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17630:	e0fffd17 	ldw	r3,-12(fp)
   17634:	00bfff84 	movi	r2,-2
   17638:	1884703a 	and	r2,r3,r2
   1763c:	1001703a 	wrctl	status,r2
  
  return context;
   17640:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17644:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   17648:	e0bfff17 	ldw	r2,-4(fp)
   1764c:	10800117 	ldw	r2,4(r2)
   17650:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   17654:	e0bfff17 	ldw	r2,-4(fp)
   17658:	10000115 	stw	zero,4(r2)
   1765c:	e0bffb17 	ldw	r2,-20(fp)
   17660:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17664:	e0bffe17 	ldw	r2,-8(fp)
   17668:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   1766c:	e0bffc17 	ldw	r2,-16(fp)
}
   17670:	e037883a 	mov	sp,fp
   17674:	df000017 	ldw	fp,0(sp)
   17678:	dec00104 	addi	sp,sp,4
   1767c:	f800283a 	ret

00017680 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   17680:	defff904 	addi	sp,sp,-28
   17684:	dfc00615 	stw	ra,24(sp)
   17688:	df000515 	stw	fp,20(sp)
   1768c:	df000504 	addi	fp,sp,20
   17690:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17694:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17698:	008000b4 	movhi	r2,2
   1769c:	10937404 	addi	r2,r2,19920
   176a0:	10800003 	ldbu	r2,0(r2)
   176a4:	10803fcc 	andi	r2,r2,255
   176a8:	10000226 	beq	r2,zero,176b4 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   176ac:	0005883a 	mov	r2,zero
   176b0:	00002d06 	br	17768 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176b4:	0005303a 	rdctl	r2,status
   176b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176bc:	e0fffd17 	ldw	r3,-12(fp)
   176c0:	00bfff84 	movi	r2,-2
   176c4:	1884703a 	and	r2,r3,r2
   176c8:	1001703a 	wrctl	status,r2
  
  return context;
   176cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   176d0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   176d4:	008000b4 	movhi	r2,2
   176d8:	10937304 	addi	r2,r2,19916
   176dc:	10800017 	ldw	r2,0(r2)
   176e0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   176e4:	008000b4 	movhi	r2,2
   176e8:	10937304 	addi	r2,r2,19916
   176ec:	10800017 	ldw	r2,0(r2)
   176f0:	10000726 	beq	r2,zero,17710 <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   176f4:	008000b4 	movhi	r2,2
   176f8:	10937304 	addi	r2,r2,19916
   176fc:	10800017 	ldw	r2,0(r2)
   17700:	10c00117 	ldw	r3,4(r2)
   17704:	008000b4 	movhi	r2,2
   17708:	10937304 	addi	r2,r2,19916
   1770c:	10c00015 	stw	r3,0(r2)
   17710:	e0bffb17 	ldw	r2,-20(fp)
   17714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17718:	e0bffe17 	ldw	r2,-8(fp)
   1771c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   17720:	e0bffc17 	ldw	r2,-16(fp)
   17724:	10000f26 	beq	r2,zero,17764 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   17728:	e0bffc17 	ldw	r2,-16(fp)
   1772c:	00c00044 	movi	r3,1
   17730:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   17734:	e0bffc17 	ldw	r2,-16(fp)
   17738:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   1773c:	e0bffc17 	ldw	r2,-16(fp)
   17740:	e0ffff17 	ldw	r3,-4(fp)
   17744:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   17748:	e0bffc17 	ldw	r2,-16(fp)
   1774c:	00c00fc4 	movi	r3,63
   17750:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   17754:	e0bffc17 	ldw	r2,-16(fp)
   17758:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   1775c:	e13ffc17 	ldw	r4,-16(fp)
   17760:	00150f00 	call	150f0 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   17764:	e0bffc17 	ldw	r2,-16(fp)
}
   17768:	e037883a 	mov	sp,fp
   1776c:	dfc00117 	ldw	ra,4(sp)
   17770:	df000017 	ldw	fp,0(sp)
   17774:	dec00204 	addi	sp,sp,8
   17778:	f800283a 	ret

0001777c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1777c:	defff304 	addi	sp,sp,-52
   17780:	dfc00c15 	stw	ra,48(sp)
   17784:	df000b15 	stw	fp,44(sp)
   17788:	df000b04 	addi	fp,sp,44
   1778c:	e13ffd15 	stw	r4,-12(fp)
   17790:	2805883a 	mov	r2,r5
   17794:	e1bfff15 	stw	r6,-4(fp)
   17798:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1779c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   177a0:	e0bfff17 	ldw	r2,-4(fp)
   177a4:	1000021e 	bne	r2,zero,177b0 <OSMboxDel+0x34>
        return (pevent);
   177a8:	e0bffd17 	ldw	r2,-12(fp)
   177ac:	00008806 	br	179d0 <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   177b0:	e0bffd17 	ldw	r2,-12(fp)
   177b4:	1000051e 	bne	r2,zero,177cc <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   177b8:	e0bfff17 	ldw	r2,-4(fp)
   177bc:	00c00104 	movi	r3,4
   177c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   177c4:	e0bffd17 	ldw	r2,-12(fp)
   177c8:	00008106 	br	179d0 <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   177cc:	e0bffd17 	ldw	r2,-12(fp)
   177d0:	10800003 	ldbu	r2,0(r2)
   177d4:	10803fcc 	andi	r2,r2,255
   177d8:	10800060 	cmpeqi	r2,r2,1
   177dc:	1000051e 	bne	r2,zero,177f4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   177e0:	e0bfff17 	ldw	r2,-4(fp)
   177e4:	00c00044 	movi	r3,1
   177e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   177ec:	e0bffd17 	ldw	r2,-12(fp)
   177f0:	00007706 	br	179d0 <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   177f4:	008000b4 	movhi	r2,2
   177f8:	10937404 	addi	r2,r2,19920
   177fc:	10800003 	ldbu	r2,0(r2)
   17800:	10803fcc 	andi	r2,r2,255
   17804:	10000526 	beq	r2,zero,1781c <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17808:	e0bfff17 	ldw	r2,-4(fp)
   1780c:	00c003c4 	movi	r3,15
   17810:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17814:	e0bffd17 	ldw	r2,-12(fp)
   17818:	00006d06 	br	179d0 <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1781c:	0005303a 	rdctl	r2,status
   17820:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17824:	e0fff817 	ldw	r3,-32(fp)
   17828:	00bfff84 	movi	r2,-2
   1782c:	1884703a 	and	r2,r3,r2
   17830:	1001703a 	wrctl	status,r2
  
  return context;
   17834:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17838:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   1783c:	e0bffd17 	ldw	r2,-12(fp)
   17840:	10800283 	ldbu	r2,10(r2)
   17844:	10803fcc 	andi	r2,r2,255
   17848:	10000326 	beq	r2,zero,17858 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1784c:	00800044 	movi	r2,1
   17850:	e0bff505 	stb	r2,-44(fp)
   17854:	00000106 	br	1785c <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   17858:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1785c:	e0bffe03 	ldbu	r2,-8(fp)
   17860:	10000326 	beq	r2,zero,17870 <OSMboxDel+0xf4>
   17864:	10800060 	cmpeqi	r2,r2,1
   17868:	10002c1e 	bne	r2,zero,1791c <OSMboxDel+0x1a0>
   1786c:	00004d06 	br	179a4 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   17870:	e0bff503 	ldbu	r2,-44(fp)
   17874:	10001a1e 	bne	r2,zero,178e0 <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   17878:	e0bffd17 	ldw	r2,-12(fp)
   1787c:	00c00fc4 	movi	r3,63
   17880:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17884:	e0bffd17 	ldw	r2,-12(fp)
   17888:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   1788c:	e0bffd17 	ldw	r2,-12(fp)
   17890:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   17894:	008000b4 	movhi	r2,2
   17898:	10937304 	addi	r2,r2,19916
   1789c:	10c00017 	ldw	r3,0(r2)
   178a0:	e0bffd17 	ldw	r2,-12(fp)
   178a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   178a8:	e0bffd17 	ldw	r2,-12(fp)
   178ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   178b0:	008000b4 	movhi	r2,2
   178b4:	10937304 	addi	r2,r2,19916
   178b8:	e0fffd17 	ldw	r3,-12(fp)
   178bc:	10c00015 	stw	r3,0(r2)
   178c0:	e0bff717 	ldw	r2,-36(fp)
   178c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178c8:	e0bff917 	ldw	r2,-28(fp)
   178cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   178d0:	e0bfff17 	ldw	r2,-4(fp)
   178d4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   178d8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   178dc:	00003b06 	br	179cc <OSMboxDel+0x250>
   178e0:	e0bff717 	ldw	r2,-36(fp)
   178e4:	e0bffa15 	stw	r2,-24(fp)
   178e8:	e0bffa17 	ldw	r2,-24(fp)
   178ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   178f0:	e0bfff17 	ldw	r2,-4(fp)
   178f4:	00c01244 	movi	r3,73
   178f8:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   178fc:	e0bffd17 	ldw	r2,-12(fp)
   17900:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   17904:	00003106 	br	179cc <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17908:	e13ffd17 	ldw	r4,-12(fp)
   1790c:	000b883a 	mov	r5,zero
   17910:	01800084 	movi	r6,2
   17914:	000f883a 	mov	r7,zero
   17918:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   1791c:	e0bffd17 	ldw	r2,-12(fp)
   17920:	10800283 	ldbu	r2,10(r2)
   17924:	10803fcc 	andi	r2,r2,255
   17928:	103ff71e 	bne	r2,zero,17908 <__alt_mem_Flash_flash_data+0xf4017908>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1792c:	e0bffd17 	ldw	r2,-12(fp)
   17930:	00c00fc4 	movi	r3,63
   17934:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17938:	e0bffd17 	ldw	r2,-12(fp)
   1793c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17940:	e0bffd17 	ldw	r2,-12(fp)
   17944:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   17948:	008000b4 	movhi	r2,2
   1794c:	10937304 	addi	r2,r2,19916
   17950:	10c00017 	ldw	r3,0(r2)
   17954:	e0bffd17 	ldw	r2,-12(fp)
   17958:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1795c:	e0bffd17 	ldw	r2,-12(fp)
   17960:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   17964:	008000b4 	movhi	r2,2
   17968:	10937304 	addi	r2,r2,19916
   1796c:	e0fffd17 	ldw	r3,-12(fp)
   17970:	10c00015 	stw	r3,0(r2)
   17974:	e0bff717 	ldw	r2,-36(fp)
   17978:	e0bffb15 	stw	r2,-20(fp)
   1797c:	e0bffb17 	ldw	r2,-20(fp)
   17980:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17984:	e0bff503 	ldbu	r2,-44(fp)
   17988:	10800058 	cmpnei	r2,r2,1
   1798c:	1000011e 	bne	r2,zero,17994 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17990:	00155680 	call	15568 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   17994:	e0bfff17 	ldw	r2,-4(fp)
   17998:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   1799c:	e03ff615 	stw	zero,-40(fp)
             break;
   179a0:	00000a06 	br	179cc <OSMboxDel+0x250>
   179a4:	e0bff717 	ldw	r2,-36(fp)
   179a8:	e0bffc15 	stw	r2,-16(fp)
   179ac:	e0bffc17 	ldw	r2,-16(fp)
   179b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   179b4:	e0bfff17 	ldw	r2,-4(fp)
   179b8:	00c001c4 	movi	r3,7
   179bc:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   179c0:	e0bffd17 	ldw	r2,-12(fp)
   179c4:	e0bff615 	stw	r2,-40(fp)
             break;
   179c8:	0001883a 	nop
    }
    return (pevent_return);
   179cc:	e0bff617 	ldw	r2,-40(fp)
}
   179d0:	e037883a 	mov	sp,fp
   179d4:	dfc00117 	ldw	ra,4(sp)
   179d8:	df000017 	ldw	fp,0(sp)
   179dc:	dec00204 	addi	sp,sp,8
   179e0:	f800283a 	ret

000179e4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   179e4:	defff404 	addi	sp,sp,-48
   179e8:	dfc00b15 	stw	ra,44(sp)
   179ec:	df000a15 	stw	fp,40(sp)
   179f0:	df000a04 	addi	fp,sp,40
   179f4:	e13ffd15 	stw	r4,-12(fp)
   179f8:	2805883a 	mov	r2,r5
   179fc:	e1bfff15 	stw	r6,-4(fp)
   17a00:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17a04:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17a08:	e0bfff17 	ldw	r2,-4(fp)
   17a0c:	1000021e 	bne	r2,zero,17a18 <OSMboxPend+0x34>
        return ((void *)0);
   17a10:	0005883a 	mov	r2,zero
   17a14:	00009706 	br	17c74 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17a18:	e0bffd17 	ldw	r2,-12(fp)
   17a1c:	1000051e 	bne	r2,zero,17a34 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17a20:	e0bfff17 	ldw	r2,-4(fp)
   17a24:	00c00104 	movi	r3,4
   17a28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17a2c:	0005883a 	mov	r2,zero
   17a30:	00009006 	br	17c74 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17a34:	e0bffd17 	ldw	r2,-12(fp)
   17a38:	10800003 	ldbu	r2,0(r2)
   17a3c:	10803fcc 	andi	r2,r2,255
   17a40:	10800060 	cmpeqi	r2,r2,1
   17a44:	1000051e 	bne	r2,zero,17a5c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17a48:	e0bfff17 	ldw	r2,-4(fp)
   17a4c:	00c00044 	movi	r3,1
   17a50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17a54:	0005883a 	mov	r2,zero
   17a58:	00008606 	br	17c74 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   17a5c:	008000b4 	movhi	r2,2
   17a60:	10937404 	addi	r2,r2,19920
   17a64:	10800003 	ldbu	r2,0(r2)
   17a68:	10803fcc 	andi	r2,r2,255
   17a6c:	10000526 	beq	r2,zero,17a84 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   17a70:	e0bfff17 	ldw	r2,-4(fp)
   17a74:	00c00084 	movi	r3,2
   17a78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17a7c:	0005883a 	mov	r2,zero
   17a80:	00007c06 	br	17c74 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   17a84:	008000b4 	movhi	r2,2
   17a88:	10936604 	addi	r2,r2,19864
   17a8c:	10800003 	ldbu	r2,0(r2)
   17a90:	10803fcc 	andi	r2,r2,255
   17a94:	10000526 	beq	r2,zero,17aac <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   17a98:	e0bfff17 	ldw	r2,-4(fp)
   17a9c:	00c00344 	movi	r3,13
   17aa0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17aa4:	0005883a 	mov	r2,zero
   17aa8:	00007206 	br	17c74 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17aac:	0005303a 	rdctl	r2,status
   17ab0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ab4:	e0fff817 	ldw	r3,-32(fp)
   17ab8:	00bfff84 	movi	r2,-2
   17abc:	1884703a 	and	r2,r3,r2
   17ac0:	1001703a 	wrctl	status,r2
  
  return context;
   17ac4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17ac8:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   17acc:	e0bffd17 	ldw	r2,-12(fp)
   17ad0:	10800117 	ldw	r2,4(r2)
   17ad4:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   17ad8:	e0bff617 	ldw	r2,-40(fp)
   17adc:	10000a26 	beq	r2,zero,17b08 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   17ae0:	e0bffd17 	ldw	r2,-12(fp)
   17ae4:	10000115 	stw	zero,4(r2)
   17ae8:	e0bff717 	ldw	r2,-36(fp)
   17aec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17af0:	e0bff917 	ldw	r2,-28(fp)
   17af4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   17af8:	e0bfff17 	ldw	r2,-4(fp)
   17afc:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   17b00:	e0bff617 	ldw	r2,-40(fp)
   17b04:	00005b06 	br	17c74 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   17b08:	008000b4 	movhi	r2,2
   17b0c:	10937504 	addi	r2,r2,19924
   17b10:	10c00017 	ldw	r3,0(r2)
   17b14:	008000b4 	movhi	r2,2
   17b18:	10937504 	addi	r2,r2,19924
   17b1c:	10800017 	ldw	r2,0(r2)
   17b20:	10800c03 	ldbu	r2,48(r2)
   17b24:	10800094 	ori	r2,r2,2
   17b28:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17b2c:	008000b4 	movhi	r2,2
   17b30:	10937504 	addi	r2,r2,19924
   17b34:	10800017 	ldw	r2,0(r2)
   17b38:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   17b3c:	008000b4 	movhi	r2,2
   17b40:	10937504 	addi	r2,r2,19924
   17b44:	10800017 	ldw	r2,0(r2)
   17b48:	e0fffe0b 	ldhu	r3,-8(fp)
   17b4c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   17b50:	e13ffd17 	ldw	r4,-12(fp)
   17b54:	0014ce80 	call	14ce8 <OS_EventTaskWait>
   17b58:	e0bff717 	ldw	r2,-36(fp)
   17b5c:	e0bffa15 	stw	r2,-24(fp)
   17b60:	e0bffa17 	ldw	r2,-24(fp)
   17b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   17b68:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b6c:	0005303a 	rdctl	r2,status
   17b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b74:	e0fffb17 	ldw	r3,-20(fp)
   17b78:	00bfff84 	movi	r2,-2
   17b7c:	1884703a 	and	r2,r3,r2
   17b80:	1001703a 	wrctl	status,r2
  
  return context;
   17b84:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   17b88:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17b8c:	008000b4 	movhi	r2,2
   17b90:	10937504 	addi	r2,r2,19924
   17b94:	10800017 	ldw	r2,0(r2)
   17b98:	10800c43 	ldbu	r2,49(r2)
   17b9c:	10803fcc 	andi	r2,r2,255
   17ba0:	10000326 	beq	r2,zero,17bb0 <OSMboxPend+0x1cc>
   17ba4:	108000a0 	cmpeqi	r2,r2,2
   17ba8:	1000091e 	bne	r2,zero,17bd0 <OSMboxPend+0x1ec>
   17bac:	00000d06 	br	17be4 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   17bb0:	008000b4 	movhi	r2,2
   17bb4:	10937504 	addi	r2,r2,19924
   17bb8:	10800017 	ldw	r2,0(r2)
   17bbc:	10800917 	ldw	r2,36(r2)
   17bc0:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   17bc4:	e0bfff17 	ldw	r2,-4(fp)
   17bc8:	10000005 	stb	zero,0(r2)
             break;
   17bcc:	00001006 	br	17c10 <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   17bd0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17bd4:	e0bfff17 	ldw	r2,-4(fp)
   17bd8:	00c00384 	movi	r3,14
   17bdc:	10c00005 	stb	r3,0(r2)
             break;
   17be0:	00000b06 	br	17c10 <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   17be4:	008000b4 	movhi	r2,2
   17be8:	10937504 	addi	r2,r2,19924
   17bec:	10800017 	ldw	r2,0(r2)
   17bf0:	1009883a 	mov	r4,r2
   17bf4:	e17ffd17 	ldw	r5,-12(fp)
   17bf8:	0014f400 	call	14f40 <OS_EventTaskRemove>
             pmsg = (void *)0;
   17bfc:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17c00:	e0bfff17 	ldw	r2,-4(fp)
   17c04:	00c00284 	movi	r3,10
   17c08:	10c00005 	stb	r3,0(r2)
             break;
   17c0c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   17c10:	008000b4 	movhi	r2,2
   17c14:	10937504 	addi	r2,r2,19924
   17c18:	10800017 	ldw	r2,0(r2)
   17c1c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   17c20:	008000b4 	movhi	r2,2
   17c24:	10937504 	addi	r2,r2,19924
   17c28:	10800017 	ldw	r2,0(r2)
   17c2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   17c30:	008000b4 	movhi	r2,2
   17c34:	10937504 	addi	r2,r2,19924
   17c38:	10800017 	ldw	r2,0(r2)
   17c3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   17c40:	008000b4 	movhi	r2,2
   17c44:	10937504 	addi	r2,r2,19924
   17c48:	10800017 	ldw	r2,0(r2)
   17c4c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   17c50:	008000b4 	movhi	r2,2
   17c54:	10937504 	addi	r2,r2,19924
   17c58:	10800017 	ldw	r2,0(r2)
   17c5c:	10000915 	stw	zero,36(r2)
   17c60:	e0bff717 	ldw	r2,-36(fp)
   17c64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c68:	e0bffc17 	ldw	r2,-16(fp)
   17c6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   17c70:	e0bff617 	ldw	r2,-40(fp)
}
   17c74:	e037883a 	mov	sp,fp
   17c78:	dfc00117 	ldw	ra,4(sp)
   17c7c:	df000017 	ldw	fp,0(sp)
   17c80:	dec00204 	addi	sp,sp,8
   17c84:	f800283a 	ret

00017c88 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17c88:	defff604 	addi	sp,sp,-40
   17c8c:	dfc00915 	stw	ra,36(sp)
   17c90:	df000815 	stw	fp,32(sp)
   17c94:	df000804 	addi	fp,sp,32
   17c98:	e13ffd15 	stw	r4,-12(fp)
   17c9c:	2805883a 	mov	r2,r5
   17ca0:	e1bfff15 	stw	r6,-4(fp)
   17ca4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17ca8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17cac:	e0bfff17 	ldw	r2,-4(fp)
   17cb0:	1000021e 	bne	r2,zero,17cbc <OSMboxPendAbort+0x34>
        return (0);
   17cb4:	0005883a 	mov	r2,zero
   17cb8:	00004906 	br	17de0 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17cbc:	e0bffd17 	ldw	r2,-12(fp)
   17cc0:	1000051e 	bne	r2,zero,17cd8 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17cc4:	e0bfff17 	ldw	r2,-4(fp)
   17cc8:	00c00104 	movi	r3,4
   17ccc:	10c00005 	stb	r3,0(r2)
        return (0);
   17cd0:	0005883a 	mov	r2,zero
   17cd4:	00004206 	br	17de0 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   17cd8:	e0bffd17 	ldw	r2,-12(fp)
   17cdc:	10800003 	ldbu	r2,0(r2)
   17ce0:	10803fcc 	andi	r2,r2,255
   17ce4:	10800060 	cmpeqi	r2,r2,1
   17ce8:	1000051e 	bne	r2,zero,17d00 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17cec:	e0bfff17 	ldw	r2,-4(fp)
   17cf0:	00c00044 	movi	r3,1
   17cf4:	10c00005 	stb	r3,0(r2)
        return (0);
   17cf8:	0005883a 	mov	r2,zero
   17cfc:	00003806 	br	17de0 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d00:	0005303a 	rdctl	r2,status
   17d04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d08:	e0fffa17 	ldw	r3,-24(fp)
   17d0c:	00bfff84 	movi	r2,-2
   17d10:	1884703a 	and	r2,r3,r2
   17d14:	1001703a 	wrctl	status,r2
  
  return context;
   17d18:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17d1c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   17d20:	e0bffd17 	ldw	r2,-12(fp)
   17d24:	10800283 	ldbu	r2,10(r2)
   17d28:	10803fcc 	andi	r2,r2,255
   17d2c:	10002526 	beq	r2,zero,17dc4 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   17d30:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   17d34:	e0bffe03 	ldbu	r2,-8(fp)
   17d38:	10800060 	cmpeqi	r2,r2,1
   17d3c:	10000e26 	beq	r2,zero,17d78 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17d40:	00000806 	br	17d64 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17d44:	e13ffd17 	ldw	r4,-12(fp)
   17d48:	000b883a 	mov	r5,zero
   17d4c:	01800084 	movi	r6,2
   17d50:	01c00084 	movi	r7,2
   17d54:	0014b500 	call	14b50 <OS_EventTaskRdy>
                     nbr_tasks++;
   17d58:	e0bff803 	ldbu	r2,-32(fp)
   17d5c:	10800044 	addi	r2,r2,1
   17d60:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   17d64:	e0bffd17 	ldw	r2,-12(fp)
   17d68:	10800283 	ldbu	r2,10(r2)
   17d6c:	10803fcc 	andi	r2,r2,255
   17d70:	103ff41e 	bne	r2,zero,17d44 <__alt_mem_Flash_flash_data+0xf4017d44>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   17d74:	00000906 	br	17d9c <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   17d78:	e13ffd17 	ldw	r4,-12(fp)
   17d7c:	000b883a 	mov	r5,zero
   17d80:	01800084 	movi	r6,2
   17d84:	01c00084 	movi	r7,2
   17d88:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 nbr_tasks++;
   17d8c:	e0bff803 	ldbu	r2,-32(fp)
   17d90:	10800044 	addi	r2,r2,1
   17d94:	e0bff805 	stb	r2,-32(fp)
                 break;
   17d98:	0001883a 	nop
   17d9c:	e0bff917 	ldw	r2,-28(fp)
   17da0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17da4:	e0bffb17 	ldw	r2,-20(fp)
   17da8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   17dac:	00155680 	call	15568 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   17db0:	e0bfff17 	ldw	r2,-4(fp)
   17db4:	00c00384 	movi	r3,14
   17db8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17dbc:	e0bff803 	ldbu	r2,-32(fp)
   17dc0:	00000706 	br	17de0 <OSMboxPendAbort+0x158>
   17dc4:	e0bff917 	ldw	r2,-28(fp)
   17dc8:	e0bffc15 	stw	r2,-16(fp)
   17dcc:	e0bffc17 	ldw	r2,-16(fp)
   17dd0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17dd4:	e0bfff17 	ldw	r2,-4(fp)
   17dd8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   17ddc:	0005883a 	mov	r2,zero
}
   17de0:	e037883a 	mov	sp,fp
   17de4:	dfc00117 	ldw	ra,4(sp)
   17de8:	df000017 	ldw	fp,0(sp)
   17dec:	dec00204 	addi	sp,sp,8
   17df0:	f800283a 	ret

00017df4 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   17df4:	defff704 	addi	sp,sp,-36
   17df8:	dfc00815 	stw	ra,32(sp)
   17dfc:	df000715 	stw	fp,28(sp)
   17e00:	df000704 	addi	fp,sp,28
   17e04:	e13ffe15 	stw	r4,-8(fp)
   17e08:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17e0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17e10:	e0bffe17 	ldw	r2,-8(fp)
   17e14:	1000021e 	bne	r2,zero,17e20 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   17e18:	00800104 	movi	r2,4
   17e1c:	00003406 	br	17ef0 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17e20:	e0bfff17 	ldw	r2,-4(fp)
   17e24:	1000021e 	bne	r2,zero,17e30 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   17e28:	008000c4 	movi	r2,3
   17e2c:	00003006 	br	17ef0 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17e30:	e0bffe17 	ldw	r2,-8(fp)
   17e34:	10800003 	ldbu	r2,0(r2)
   17e38:	10803fcc 	andi	r2,r2,255
   17e3c:	10800060 	cmpeqi	r2,r2,1
   17e40:	1000021e 	bne	r2,zero,17e4c <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   17e44:	00800044 	movi	r2,1
   17e48:	00002906 	br	17ef0 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e4c:	0005303a 	rdctl	r2,status
   17e50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e54:	e0fffa17 	ldw	r3,-24(fp)
   17e58:	00bfff84 	movi	r2,-2
   17e5c:	1884703a 	and	r2,r3,r2
   17e60:	1001703a 	wrctl	status,r2
  
  return context;
   17e64:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   17e68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17e6c:	e0bffe17 	ldw	r2,-8(fp)
   17e70:	10800283 	ldbu	r2,10(r2)
   17e74:	10803fcc 	andi	r2,r2,255
   17e78:	10000c26 	beq	r2,zero,17eac <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17e7c:	e13ffe17 	ldw	r4,-8(fp)
   17e80:	e17fff17 	ldw	r5,-4(fp)
   17e84:	01800084 	movi	r6,2
   17e88:	000f883a 	mov	r7,zero
   17e8c:	0014b500 	call	14b50 <OS_EventTaskRdy>
   17e90:	e0bff917 	ldw	r2,-28(fp)
   17e94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e98:	e0bffb17 	ldw	r2,-20(fp)
   17e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   17ea0:	00155680 	call	15568 <OS_Sched>
        return (OS_ERR_NONE);
   17ea4:	0005883a 	mov	r2,zero
   17ea8:	00001106 	br	17ef0 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   17eac:	e0bffe17 	ldw	r2,-8(fp)
   17eb0:	10800117 	ldw	r2,4(r2)
   17eb4:	10000626 	beq	r2,zero,17ed0 <OSMboxPost+0xdc>
   17eb8:	e0bff917 	ldw	r2,-28(fp)
   17ebc:	e0bffc15 	stw	r2,-16(fp)
   17ec0:	e0bffc17 	ldw	r2,-16(fp)
   17ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   17ec8:	00800504 	movi	r2,20
   17ecc:	00000806 	br	17ef0 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   17ed0:	e0bffe17 	ldw	r2,-8(fp)
   17ed4:	e0ffff17 	ldw	r3,-4(fp)
   17ed8:	10c00115 	stw	r3,4(r2)
   17edc:	e0bff917 	ldw	r2,-28(fp)
   17ee0:	e0bffd15 	stw	r2,-12(fp)
   17ee4:	e0bffd17 	ldw	r2,-12(fp)
   17ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17eec:	0005883a 	mov	r2,zero
}
   17ef0:	e037883a 	mov	sp,fp
   17ef4:	dfc00117 	ldw	ra,4(sp)
   17ef8:	df000017 	ldw	fp,0(sp)
   17efc:	dec00204 	addi	sp,sp,8
   17f00:	f800283a 	ret

00017f04 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   17f04:	defff604 	addi	sp,sp,-40
   17f08:	dfc00915 	stw	ra,36(sp)
   17f0c:	df000815 	stw	fp,32(sp)
   17f10:	df000804 	addi	fp,sp,32
   17f14:	e13ffd15 	stw	r4,-12(fp)
   17f18:	e17ffe15 	stw	r5,-8(fp)
   17f1c:	3005883a 	mov	r2,r6
   17f20:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17f24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17f28:	e0bffd17 	ldw	r2,-12(fp)
   17f2c:	1000021e 	bne	r2,zero,17f38 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   17f30:	00800104 	movi	r2,4
   17f34:	00004506 	br	1804c <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   17f38:	e0bffe17 	ldw	r2,-8(fp)
   17f3c:	1000021e 	bne	r2,zero,17f48 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   17f40:	008000c4 	movi	r2,3
   17f44:	00004106 	br	1804c <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   17f48:	e0bffd17 	ldw	r2,-12(fp)
   17f4c:	10800003 	ldbu	r2,0(r2)
   17f50:	10803fcc 	andi	r2,r2,255
   17f54:	10800060 	cmpeqi	r2,r2,1
   17f58:	1000021e 	bne	r2,zero,17f64 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   17f5c:	00800044 	movi	r2,1
   17f60:	00003a06 	br	1804c <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f64:	0005303a 	rdctl	r2,status
   17f68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f6c:	e0fff917 	ldw	r3,-28(fp)
   17f70:	00bfff84 	movi	r2,-2
   17f74:	1884703a 	and	r2,r3,r2
   17f78:	1001703a 	wrctl	status,r2
  
  return context;
   17f7c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17f80:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   17f84:	e0bffd17 	ldw	r2,-12(fp)
   17f88:	10800283 	ldbu	r2,10(r2)
   17f8c:	10803fcc 	andi	r2,r2,255
   17f90:	10001d26 	beq	r2,zero,18008 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   17f94:	e0bfff03 	ldbu	r2,-4(fp)
   17f98:	1080004c 	andi	r2,r2,1
   17f9c:	10000b26 	beq	r2,zero,17fcc <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17fa0:	00000506 	br	17fb8 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17fa4:	e13ffd17 	ldw	r4,-12(fp)
   17fa8:	e17ffe17 	ldw	r5,-8(fp)
   17fac:	01800084 	movi	r6,2
   17fb0:	000f883a 	mov	r7,zero
   17fb4:	0014b500 	call	14b50 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   17fb8:	e0bffd17 	ldw	r2,-12(fp)
   17fbc:	10800283 	ldbu	r2,10(r2)
   17fc0:	10803fcc 	andi	r2,r2,255
   17fc4:	103ff71e 	bne	r2,zero,17fa4 <__alt_mem_Flash_flash_data+0xf4017fa4>
   17fc8:	00000506 	br	17fe0 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   17fcc:	e13ffd17 	ldw	r4,-12(fp)
   17fd0:	e17ffe17 	ldw	r5,-8(fp)
   17fd4:	01800084 	movi	r6,2
   17fd8:	000f883a 	mov	r7,zero
   17fdc:	0014b500 	call	14b50 <OS_EventTaskRdy>
   17fe0:	e0bff817 	ldw	r2,-32(fp)
   17fe4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fe8:	e0bffa17 	ldw	r2,-24(fp)
   17fec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   17ff0:	e0bfff03 	ldbu	r2,-4(fp)
   17ff4:	1080010c 	andi	r2,r2,4
   17ff8:	1000011e 	bne	r2,zero,18000 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   17ffc:	00155680 	call	15568 <OS_Sched>
        }
        return (OS_ERR_NONE);
   18000:	0005883a 	mov	r2,zero
   18004:	00001106 	br	1804c <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   18008:	e0bffd17 	ldw	r2,-12(fp)
   1800c:	10800117 	ldw	r2,4(r2)
   18010:	10000626 	beq	r2,zero,1802c <OSMboxPostOpt+0x128>
   18014:	e0bff817 	ldw	r2,-32(fp)
   18018:	e0bffb15 	stw	r2,-20(fp)
   1801c:	e0bffb17 	ldw	r2,-20(fp)
   18020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   18024:	00800504 	movi	r2,20
   18028:	00000806 	br	1804c <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1802c:	e0bffd17 	ldw	r2,-12(fp)
   18030:	e0fffe17 	ldw	r3,-8(fp)
   18034:	10c00115 	stw	r3,4(r2)
   18038:	e0bff817 	ldw	r2,-32(fp)
   1803c:	e0bffc15 	stw	r2,-16(fp)
   18040:	e0bffc17 	ldw	r2,-16(fp)
   18044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18048:	0005883a 	mov	r2,zero
}
   1804c:	e037883a 	mov	sp,fp
   18050:	dfc00117 	ldw	ra,4(sp)
   18054:	df000017 	ldw	fp,0(sp)
   18058:	dec00204 	addi	sp,sp,8
   1805c:	f800283a 	ret

00018060 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   18060:	defff704 	addi	sp,sp,-36
   18064:	df000815 	stw	fp,32(sp)
   18068:	df000804 	addi	fp,sp,32
   1806c:	e13ffe15 	stw	r4,-8(fp)
   18070:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18074:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18078:	e0bffe17 	ldw	r2,-8(fp)
   1807c:	1000021e 	bne	r2,zero,18088 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18080:	00800104 	movi	r2,4
   18084:	00003606 	br	18160 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   18088:	e0bfff17 	ldw	r2,-4(fp)
   1808c:	1000021e 	bne	r2,zero,18098 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18090:	00800244 	movi	r2,9
   18094:	00003206 	br	18160 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   18098:	e0bffe17 	ldw	r2,-8(fp)
   1809c:	10800003 	ldbu	r2,0(r2)
   180a0:	10803fcc 	andi	r2,r2,255
   180a4:	10800060 	cmpeqi	r2,r2,1
   180a8:	1000021e 	bne	r2,zero,180b4 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   180ac:	00800044 	movi	r2,1
   180b0:	00002b06 	br	18160 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180b4:	0005303a 	rdctl	r2,status
   180b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180bc:	e0fffc17 	ldw	r3,-16(fp)
   180c0:	00bfff84 	movi	r2,-2
   180c4:	1884703a 	and	r2,r3,r2
   180c8:	1001703a 	wrctl	status,r2
  
  return context;
   180cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   180d0:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   180d4:	e0bffe17 	ldw	r2,-8(fp)
   180d8:	10c00283 	ldbu	r3,10(r2)
   180dc:	e0bfff17 	ldw	r2,-4(fp)
   180e0:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   180e4:	e0bffe17 	ldw	r2,-8(fp)
   180e8:	108002c4 	addi	r2,r2,11
   180ec:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   180f0:	e0bfff17 	ldw	r2,-4(fp)
   180f4:	10800104 	addi	r2,r2,4
   180f8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   180fc:	e03ff805 	stb	zero,-32(fp)
   18100:	00000b06 	br	18130 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   18104:	e0bffa17 	ldw	r2,-24(fp)
   18108:	10c00044 	addi	r3,r2,1
   1810c:	e0fffa15 	stw	r3,-24(fp)
   18110:	e0fff917 	ldw	r3,-28(fp)
   18114:	19000044 	addi	r4,r3,1
   18118:	e13ff915 	stw	r4,-28(fp)
   1811c:	18c00003 	ldbu	r3,0(r3)
   18120:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18124:	e0bff803 	ldbu	r2,-32(fp)
   18128:	10800044 	addi	r2,r2,1
   1812c:	e0bff805 	stb	r2,-32(fp)
   18130:	e0bff803 	ldbu	r2,-32(fp)
   18134:	108000f0 	cmpltui	r2,r2,3
   18138:	103ff21e 	bne	r2,zero,18104 <__alt_mem_Flash_flash_data+0xf4018104>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   1813c:	e0bffe17 	ldw	r2,-8(fp)
   18140:	10c00117 	ldw	r3,4(r2)
   18144:	e0bfff17 	ldw	r2,-4(fp)
   18148:	10c00015 	stw	r3,0(r2)
   1814c:	e0bffb17 	ldw	r2,-20(fp)
   18150:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18154:	e0bffd17 	ldw	r2,-12(fp)
   18158:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1815c:	0005883a 	mov	r2,zero
}
   18160:	e037883a 	mov	sp,fp
   18164:	df000017 	ldw	fp,0(sp)
   18168:	dec00104 	addi	sp,sp,4
   1816c:	f800283a 	ret

00018170 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   18170:	defff404 	addi	sp,sp,-48
   18174:	df000b15 	stw	fp,44(sp)
   18178:	df000b04 	addi	fp,sp,44
   1817c:	e13ffc15 	stw	r4,-16(fp)
   18180:	e17ffd15 	stw	r5,-12(fp)
   18184:	e1bffe15 	stw	r6,-8(fp)
   18188:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1818c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   18190:	e0bfff17 	ldw	r2,-4(fp)
   18194:	1000021e 	bne	r2,zero,181a0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   18198:	0005883a 	mov	r2,zero
   1819c:	00006d06 	br	18354 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   181a0:	e0bffc17 	ldw	r2,-16(fp)
   181a4:	1000051e 	bne	r2,zero,181bc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   181a8:	e0bfff17 	ldw	r2,-4(fp)
   181ac:	00c01884 	movi	r3,98
   181b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   181b4:	0005883a 	mov	r2,zero
   181b8:	00006606 	br	18354 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   181bc:	e0bffc17 	ldw	r2,-16(fp)
   181c0:	108000cc 	andi	r2,r2,3
   181c4:	10000526 	beq	r2,zero,181dc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   181c8:	e0bfff17 	ldw	r2,-4(fp)
   181cc:	00c01884 	movi	r3,98
   181d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   181d4:	0005883a 	mov	r2,zero
   181d8:	00005e06 	br	18354 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   181dc:	e0bffd17 	ldw	r2,-12(fp)
   181e0:	108000a8 	cmpgeui	r2,r2,2
   181e4:	1000051e 	bne	r2,zero,181fc <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   181e8:	e0bfff17 	ldw	r2,-4(fp)
   181ec:	00c016c4 	movi	r3,91
   181f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   181f4:	0005883a 	mov	r2,zero
   181f8:	00005606 	br	18354 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   181fc:	e0bffe17 	ldw	r2,-8(fp)
   18200:	10800128 	cmpgeui	r2,r2,4
   18204:	1000051e 	bne	r2,zero,1821c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   18208:	e0bfff17 	ldw	r2,-4(fp)
   1820c:	00c01704 	movi	r3,92
   18210:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   18214:	0005883a 	mov	r2,zero
   18218:	00004e06 	br	18354 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1821c:	0005303a 	rdctl	r2,status
   18220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18224:	e0fffa17 	ldw	r3,-24(fp)
   18228:	00bfff84 	movi	r2,-2
   1822c:	1884703a 	and	r2,r3,r2
   18230:	1001703a 	wrctl	status,r2
  
  return context;
   18234:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18238:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1823c:	008000b4 	movhi	r2,2
   18240:	10936f04 	addi	r2,r2,19900
   18244:	10800017 	ldw	r2,0(r2)
   18248:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1824c:	008000b4 	movhi	r2,2
   18250:	10936f04 	addi	r2,r2,19900
   18254:	10800017 	ldw	r2,0(r2)
   18258:	10000726 	beq	r2,zero,18278 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1825c:	008000b4 	movhi	r2,2
   18260:	10936f04 	addi	r2,r2,19900
   18264:	10800017 	ldw	r2,0(r2)
   18268:	10c00117 	ldw	r3,4(r2)
   1826c:	008000b4 	movhi	r2,2
   18270:	10936f04 	addi	r2,r2,19900
   18274:	10c00015 	stw	r3,0(r2)
   18278:	e0bff817 	ldw	r2,-32(fp)
   1827c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18280:	e0bffb17 	ldw	r2,-20(fp)
   18284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   18288:	e0bff917 	ldw	r2,-28(fp)
   1828c:	1000051e 	bne	r2,zero,182a4 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   18290:	e0bfff17 	ldw	r2,-4(fp)
   18294:	00c01684 	movi	r3,90
   18298:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1829c:	0005883a 	mov	r2,zero
   182a0:	00002c06 	br	18354 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   182a4:	e0bffc17 	ldw	r2,-16(fp)
   182a8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   182ac:	e0fffc17 	ldw	r3,-16(fp)
   182b0:	e0bffe17 	ldw	r2,-8(fp)
   182b4:	1885883a 	add	r2,r3,r2
   182b8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   182bc:	e03ff715 	stw	zero,-36(fp)
   182c0:	00000c06 	br	182f4 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   182c4:	e0bff617 	ldw	r2,-40(fp)
   182c8:	e0fff517 	ldw	r3,-44(fp)
   182cc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   182d0:	e0bff517 	ldw	r2,-44(fp)
   182d4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   182d8:	e0fff517 	ldw	r3,-44(fp)
   182dc:	e0bffe17 	ldw	r2,-8(fp)
   182e0:	1885883a 	add	r2,r3,r2
   182e4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   182e8:	e0bff717 	ldw	r2,-36(fp)
   182ec:	10800044 	addi	r2,r2,1
   182f0:	e0bff715 	stw	r2,-36(fp)
   182f4:	e0bffd17 	ldw	r2,-12(fp)
   182f8:	10bfffc4 	addi	r2,r2,-1
   182fc:	e0fff717 	ldw	r3,-36(fp)
   18300:	18bff036 	bltu	r3,r2,182c4 <__alt_mem_Flash_flash_data+0xf40182c4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   18304:	e0bff617 	ldw	r2,-40(fp)
   18308:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1830c:	e0bff917 	ldw	r2,-28(fp)
   18310:	e0fffc17 	ldw	r3,-16(fp)
   18314:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   18318:	e0bff917 	ldw	r2,-28(fp)
   1831c:	e0fffc17 	ldw	r3,-16(fp)
   18320:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   18324:	e0bff917 	ldw	r2,-28(fp)
   18328:	e0fffd17 	ldw	r3,-12(fp)
   1832c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   18330:	e0bff917 	ldw	r2,-28(fp)
   18334:	e0fffd17 	ldw	r3,-12(fp)
   18338:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1833c:	e0bff917 	ldw	r2,-28(fp)
   18340:	e0fffe17 	ldw	r3,-8(fp)
   18344:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   18348:	e0bfff17 	ldw	r2,-4(fp)
   1834c:	10000005 	stb	zero,0(r2)
    return (pmem);
   18350:	e0bff917 	ldw	r2,-28(fp)
}
   18354:	e037883a 	mov	sp,fp
   18358:	df000017 	ldw	fp,0(sp)
   1835c:	dec00104 	addi	sp,sp,4
   18360:	f800283a 	ret

00018364 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   18364:	defff804 	addi	sp,sp,-32
   18368:	df000715 	stw	fp,28(sp)
   1836c:	df000704 	addi	fp,sp,28
   18370:	e13ffe15 	stw	r4,-8(fp)
   18374:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18378:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1837c:	e0bfff17 	ldw	r2,-4(fp)
   18380:	1000021e 	bne	r2,zero,1838c <OSMemGet+0x28>
        return ((void *)0);
   18384:	0005883a 	mov	r2,zero
   18388:	00002e06 	br	18444 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1838c:	e0bffe17 	ldw	r2,-8(fp)
   18390:	1000051e 	bne	r2,zero,183a8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   18394:	e0bfff17 	ldw	r2,-4(fp)
   18398:	00c01804 	movi	r3,96
   1839c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   183a0:	0005883a 	mov	r2,zero
   183a4:	00002706 	br	18444 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   183a8:	0005303a 	rdctl	r2,status
   183ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   183b0:	e0fffb17 	ldw	r3,-20(fp)
   183b4:	00bfff84 	movi	r2,-2
   183b8:	1884703a 	and	r2,r3,r2
   183bc:	1001703a 	wrctl	status,r2
  
  return context;
   183c0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   183c4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   183c8:	e0bffe17 	ldw	r2,-8(fp)
   183cc:	10800417 	ldw	r2,16(r2)
   183d0:	10001426 	beq	r2,zero,18424 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   183d4:	e0bffe17 	ldw	r2,-8(fp)
   183d8:	10800117 	ldw	r2,4(r2)
   183dc:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   183e0:	e0bffa17 	ldw	r2,-24(fp)
   183e4:	10c00017 	ldw	r3,0(r2)
   183e8:	e0bffe17 	ldw	r2,-8(fp)
   183ec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   183f0:	e0bffe17 	ldw	r2,-8(fp)
   183f4:	10800417 	ldw	r2,16(r2)
   183f8:	10ffffc4 	addi	r3,r2,-1
   183fc:	e0bffe17 	ldw	r2,-8(fp)
   18400:	10c00415 	stw	r3,16(r2)
   18404:	e0bff917 	ldw	r2,-28(fp)
   18408:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1840c:	e0bffc17 	ldw	r2,-16(fp)
   18410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   18414:	e0bfff17 	ldw	r2,-4(fp)
   18418:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1841c:	e0bffa17 	ldw	r2,-24(fp)
   18420:	00000806 	br	18444 <OSMemGet+0xe0>
   18424:	e0bff917 	ldw	r2,-28(fp)
   18428:	e0bffd15 	stw	r2,-12(fp)
   1842c:	e0bffd17 	ldw	r2,-12(fp)
   18430:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   18434:	e0bfff17 	ldw	r2,-4(fp)
   18438:	00c01744 	movi	r3,93
   1843c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   18440:	0005883a 	mov	r2,zero
}
   18444:	e037883a 	mov	sp,fp
   18448:	df000017 	ldw	fp,0(sp)
   1844c:	dec00104 	addi	sp,sp,4
   18450:	f800283a 	ret

00018454 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   18454:	defff704 	addi	sp,sp,-36
   18458:	dfc00815 	stw	ra,32(sp)
   1845c:	df000715 	stw	fp,28(sp)
   18460:	df000704 	addi	fp,sp,28
   18464:	e13ffd15 	stw	r4,-12(fp)
   18468:	e17ffe15 	stw	r5,-8(fp)
   1846c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18470:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18474:	e0bfff17 	ldw	r2,-4(fp)
   18478:	1000021e 	bne	r2,zero,18484 <OSMemNameGet+0x30>
        return (0);
   1847c:	0005883a 	mov	r2,zero
   18480:	00002d06 	br	18538 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   18484:	e0bffd17 	ldw	r2,-12(fp)
   18488:	1000051e 	bne	r2,zero,184a0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1848c:	e0bfff17 	ldw	r2,-4(fp)
   18490:	00c01804 	movi	r3,96
   18494:	10c00005 	stb	r3,0(r2)
        return (0);
   18498:	0005883a 	mov	r2,zero
   1849c:	00002606 	br	18538 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   184a0:	e0bffe17 	ldw	r2,-8(fp)
   184a4:	1000051e 	bne	r2,zero,184bc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   184a8:	e0bfff17 	ldw	r2,-4(fp)
   184ac:	00c00304 	movi	r3,12
   184b0:	10c00005 	stb	r3,0(r2)
        return (0);
   184b4:	0005883a 	mov	r2,zero
   184b8:	00001f06 	br	18538 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   184bc:	008000b4 	movhi	r2,2
   184c0:	10937404 	addi	r2,r2,19920
   184c4:	10800003 	ldbu	r2,0(r2)
   184c8:	10803fcc 	andi	r2,r2,255
   184cc:	10000526 	beq	r2,zero,184e4 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   184d0:	e0bfff17 	ldw	r2,-4(fp)
   184d4:	00c00444 	movi	r3,17
   184d8:	10c00005 	stb	r3,0(r2)
        return (0);
   184dc:	0005883a 	mov	r2,zero
   184e0:	00001506 	br	18538 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   184e4:	0005303a 	rdctl	r2,status
   184e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   184ec:	e0fffb17 	ldw	r3,-20(fp)
   184f0:	00bfff84 	movi	r2,-2
   184f4:	1884703a 	and	r2,r3,r2
   184f8:	1001703a 	wrctl	status,r2
  
  return context;
   184fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   18500:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   18504:	e0bffd17 	ldw	r2,-12(fp)
   18508:	10800504 	addi	r2,r2,20
   1850c:	e13ffe17 	ldw	r4,-8(fp)
   18510:	100b883a 	mov	r5,r2
   18514:	00156a40 	call	156a4 <OS_StrCopy>
   18518:	e0bffa05 	stb	r2,-24(fp)
   1851c:	e0bff917 	ldw	r2,-28(fp)
   18520:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18524:	e0bffc17 	ldw	r2,-16(fp)
   18528:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1852c:	e0bfff17 	ldw	r2,-4(fp)
   18530:	10000005 	stb	zero,0(r2)
    return (len);
   18534:	e0bffa03 	ldbu	r2,-24(fp)
}
   18538:	e037883a 	mov	sp,fp
   1853c:	dfc00117 	ldw	ra,4(sp)
   18540:	df000017 	ldw	fp,0(sp)
   18544:	dec00204 	addi	sp,sp,8
   18548:	f800283a 	ret

0001854c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1854c:	defff604 	addi	sp,sp,-40
   18550:	dfc00915 	stw	ra,36(sp)
   18554:	df000815 	stw	fp,32(sp)
   18558:	df000804 	addi	fp,sp,32
   1855c:	e13ffd15 	stw	r4,-12(fp)
   18560:	e17ffe15 	stw	r5,-8(fp)
   18564:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18568:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1856c:	e0bfff17 	ldw	r2,-4(fp)
   18570:	1000011e 	bne	r2,zero,18578 <OSMemNameSet+0x2c>
        return;
   18574:	00003606 	br	18650 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   18578:	e0bffd17 	ldw	r2,-12(fp)
   1857c:	1000041e 	bne	r2,zero,18590 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   18580:	e0bfff17 	ldw	r2,-4(fp)
   18584:	00c01804 	movi	r3,96
   18588:	10c00005 	stb	r3,0(r2)
        return;
   1858c:	00003006 	br	18650 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   18590:	e0bffe17 	ldw	r2,-8(fp)
   18594:	1000041e 	bne	r2,zero,185a8 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   18598:	e0bfff17 	ldw	r2,-4(fp)
   1859c:	00c00304 	movi	r3,12
   185a0:	10c00005 	stb	r3,0(r2)
        return;
   185a4:	00002a06 	br	18650 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   185a8:	008000b4 	movhi	r2,2
   185ac:	10937404 	addi	r2,r2,19920
   185b0:	10800003 	ldbu	r2,0(r2)
   185b4:	10803fcc 	andi	r2,r2,255
   185b8:	10000426 	beq	r2,zero,185cc <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   185bc:	e0bfff17 	ldw	r2,-4(fp)
   185c0:	00c00484 	movi	r3,18
   185c4:	10c00005 	stb	r3,0(r2)
        return;
   185c8:	00002106 	br	18650 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185cc:	0005303a 	rdctl	r2,status
   185d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185d4:	e0fffa17 	ldw	r3,-24(fp)
   185d8:	00bfff84 	movi	r2,-2
   185dc:	1884703a 	and	r2,r3,r2
   185e0:	1001703a 	wrctl	status,r2
  
  return context;
   185e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   185e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   185ec:	e13ffe17 	ldw	r4,-8(fp)
   185f0:	00157180 	call	15718 <OS_StrLen>
   185f4:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   185f8:	e0bff903 	ldbu	r2,-28(fp)
   185fc:	10800830 	cmpltui	r2,r2,32
   18600:	1000081e 	bne	r2,zero,18624 <OSMemNameSet+0xd8>
   18604:	e0bff817 	ldw	r2,-32(fp)
   18608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1860c:	e0bffb17 	ldw	r2,-20(fp)
   18610:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   18614:	e0bfff17 	ldw	r2,-4(fp)
   18618:	00c018c4 	movi	r3,99
   1861c:	10c00005 	stb	r3,0(r2)
        return;
   18620:	00000b06 	br	18650 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	10800504 	addi	r2,r2,20
   1862c:	1009883a 	mov	r4,r2
   18630:	e17ffe17 	ldw	r5,-8(fp)
   18634:	00156a40 	call	156a4 <OS_StrCopy>
   18638:	e0bff817 	ldw	r2,-32(fp)
   1863c:	e0bffc15 	stw	r2,-16(fp)
   18640:	e0bffc17 	ldw	r2,-16(fp)
   18644:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18648:	e0bfff17 	ldw	r2,-4(fp)
   1864c:	10000005 	stb	zero,0(r2)
}
   18650:	e037883a 	mov	sp,fp
   18654:	dfc00117 	ldw	ra,4(sp)
   18658:	df000017 	ldw	fp,0(sp)
   1865c:	dec00204 	addi	sp,sp,8
   18660:	f800283a 	ret

00018664 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   18664:	defff904 	addi	sp,sp,-28
   18668:	df000615 	stw	fp,24(sp)
   1866c:	df000604 	addi	fp,sp,24
   18670:	e13ffe15 	stw	r4,-8(fp)
   18674:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18678:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1867c:	e0bffe17 	ldw	r2,-8(fp)
   18680:	1000021e 	bne	r2,zero,1868c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   18684:	00801804 	movi	r2,96
   18688:	00002806 	br	1872c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1868c:	e0bfff17 	ldw	r2,-4(fp)
   18690:	1000021e 	bne	r2,zero,1869c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   18694:	008017c4 	movi	r2,95
   18698:	00002406 	br	1872c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1869c:	0005303a 	rdctl	r2,status
   186a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186a4:	e0fffb17 	ldw	r3,-20(fp)
   186a8:	00bfff84 	movi	r2,-2
   186ac:	1884703a 	and	r2,r3,r2
   186b0:	1001703a 	wrctl	status,r2
  
  return context;
   186b4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   186b8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   186bc:	e0bffe17 	ldw	r2,-8(fp)
   186c0:	10c00417 	ldw	r3,16(r2)
   186c4:	e0bffe17 	ldw	r2,-8(fp)
   186c8:	10800317 	ldw	r2,12(r2)
   186cc:	18800636 	bltu	r3,r2,186e8 <OSMemPut+0x84>
   186d0:	e0bffa17 	ldw	r2,-24(fp)
   186d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186d8:	e0bffc17 	ldw	r2,-16(fp)
   186dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   186e0:	00801784 	movi	r2,94
   186e4:	00001106 	br	1872c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   186e8:	e0bffe17 	ldw	r2,-8(fp)
   186ec:	10c00117 	ldw	r3,4(r2)
   186f0:	e0bfff17 	ldw	r2,-4(fp)
   186f4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   186f8:	e0bffe17 	ldw	r2,-8(fp)
   186fc:	e0ffff17 	ldw	r3,-4(fp)
   18700:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   18704:	e0bffe17 	ldw	r2,-8(fp)
   18708:	10800417 	ldw	r2,16(r2)
   1870c:	10c00044 	addi	r3,r2,1
   18710:	e0bffe17 	ldw	r2,-8(fp)
   18714:	10c00415 	stw	r3,16(r2)
   18718:	e0bffa17 	ldw	r2,-24(fp)
   1871c:	e0bffd15 	stw	r2,-12(fp)
   18720:	e0bffd17 	ldw	r2,-12(fp)
   18724:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   18728:	0005883a 	mov	r2,zero
}
   1872c:	e037883a 	mov	sp,fp
   18730:	df000017 	ldw	fp,0(sp)
   18734:	dec00104 	addi	sp,sp,4
   18738:	f800283a 	ret

0001873c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1873c:	defffa04 	addi	sp,sp,-24
   18740:	df000515 	stw	fp,20(sp)
   18744:	df000504 	addi	fp,sp,20
   18748:	e13ffe15 	stw	r4,-8(fp)
   1874c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18750:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   18754:	e0bffe17 	ldw	r2,-8(fp)
   18758:	1000021e 	bne	r2,zero,18764 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1875c:	00801804 	movi	r2,96
   18760:	00002c06 	br	18814 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   18764:	e0bfff17 	ldw	r2,-4(fp)
   18768:	1000021e 	bne	r2,zero,18774 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1876c:	00801844 	movi	r2,97
   18770:	00002806 	br	18814 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18774:	0005303a 	rdctl	r2,status
   18778:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1877c:	e0fffc17 	ldw	r3,-16(fp)
   18780:	00bfff84 	movi	r2,-2
   18784:	1884703a 	and	r2,r3,r2
   18788:	1001703a 	wrctl	status,r2
  
  return context;
   1878c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18790:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   18794:	e0bffe17 	ldw	r2,-8(fp)
   18798:	10c00017 	ldw	r3,0(r2)
   1879c:	e0bfff17 	ldw	r2,-4(fp)
   187a0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   187a4:	e0bffe17 	ldw	r2,-8(fp)
   187a8:	10c00117 	ldw	r3,4(r2)
   187ac:	e0bfff17 	ldw	r2,-4(fp)
   187b0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   187b4:	e0bffe17 	ldw	r2,-8(fp)
   187b8:	10c00217 	ldw	r3,8(r2)
   187bc:	e0bfff17 	ldw	r2,-4(fp)
   187c0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   187c4:	e0bffe17 	ldw	r2,-8(fp)
   187c8:	10c00317 	ldw	r3,12(r2)
   187cc:	e0bfff17 	ldw	r2,-4(fp)
   187d0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   187d4:	e0bffe17 	ldw	r2,-8(fp)
   187d8:	10c00417 	ldw	r3,16(r2)
   187dc:	e0bfff17 	ldw	r2,-4(fp)
   187e0:	10c00415 	stw	r3,16(r2)
   187e4:	e0bffb17 	ldw	r2,-20(fp)
   187e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187ec:	e0bffd17 	ldw	r2,-12(fp)
   187f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   187f4:	e0bfff17 	ldw	r2,-4(fp)
   187f8:	10c00317 	ldw	r3,12(r2)
   187fc:	e0bfff17 	ldw	r2,-4(fp)
   18800:	10800417 	ldw	r2,16(r2)
   18804:	1887c83a 	sub	r3,r3,r2
   18808:	e0bfff17 	ldw	r2,-4(fp)
   1880c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   18810:	0005883a 	mov	r2,zero
}
   18814:	e037883a 	mov	sp,fp
   18818:	df000017 	ldw	fp,0(sp)
   1881c:	dec00104 	addi	sp,sp,4
   18820:	f800283a 	ret

00018824 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   18824:	defffc04 	addi	sp,sp,-16
   18828:	dfc00315 	stw	ra,12(sp)
   1882c:	df000215 	stw	fp,8(sp)
   18830:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   18834:	01000134 	movhi	r4,4
   18838:	211c7f04 	addi	r4,r4,29180
   1883c:	01430c04 	movi	r5,3120
   18840:	00154b40 	call	154b4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   18844:	00800134 	movhi	r2,4
   18848:	109c7f04 	addi	r2,r2,29180
   1884c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   18850:	e03fff0d 	sth	zero,-4(fp)
   18854:	00001306 	br	188a4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   18858:	e0bfff0b 	ldhu	r2,-4(fp)
   1885c:	10800044 	addi	r2,r2,1
   18860:	10c00d24 	muli	r3,r2,52
   18864:	00800134 	movhi	r2,4
   18868:	109c7f04 	addi	r2,r2,29180
   1886c:	1887883a 	add	r3,r3,r2
   18870:	e0bffe17 	ldw	r2,-8(fp)
   18874:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   18878:	e0bffe17 	ldw	r2,-8(fp)
   1887c:	00c00fc4 	movi	r3,63
   18880:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   18884:	e0bffe17 	ldw	r2,-8(fp)
   18888:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1888c:	e0bffe17 	ldw	r2,-8(fp)
   18890:	10800d04 	addi	r2,r2,52
   18894:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   18898:	e0bfff0b 	ldhu	r2,-4(fp)
   1889c:	10800044 	addi	r2,r2,1
   188a0:	e0bfff0d 	sth	r2,-4(fp)
   188a4:	e0bfff0b 	ldhu	r2,-4(fp)
   188a8:	10800ef0 	cmpltui	r2,r2,59
   188ac:	103fea1e 	bne	r2,zero,18858 <__alt_mem_Flash_flash_data+0xf4018858>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   188b0:	e0bffe17 	ldw	r2,-8(fp)
   188b4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   188b8:	e0bffe17 	ldw	r2,-8(fp)
   188bc:	00c00fc4 	movi	r3,63
   188c0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   188c4:	e0bffe17 	ldw	r2,-8(fp)
   188c8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   188cc:	008000b4 	movhi	r2,2
   188d0:	10936f04 	addi	r2,r2,19900
   188d4:	00c00134 	movhi	r3,4
   188d8:	18dc7f04 	addi	r3,r3,29180
   188dc:	10c00015 	stw	r3,0(r2)
#endif
}
   188e0:	e037883a 	mov	sp,fp
   188e4:	dfc00117 	ldw	ra,4(sp)
   188e8:	df000017 	ldw	fp,0(sp)
   188ec:	dec00204 	addi	sp,sp,8
   188f0:	f800283a 	ret

000188f4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   188f4:	defff804 	addi	sp,sp,-32
   188f8:	df000715 	stw	fp,28(sp)
   188fc:	df000704 	addi	fp,sp,28
   18900:	e13ffe15 	stw	r4,-8(fp)
   18904:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18908:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1890c:	e0bfff17 	ldw	r2,-4(fp)
   18910:	1000021e 	bne	r2,zero,1891c <OSQAccept+0x28>
        return ((void *)0);
   18914:	0005883a 	mov	r2,zero
   18918:	00004206 	br	18a24 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1891c:	e0bffe17 	ldw	r2,-8(fp)
   18920:	1000051e 	bne	r2,zero,18938 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   18924:	e0bfff17 	ldw	r2,-4(fp)
   18928:	00c00104 	movi	r3,4
   1892c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18930:	0005883a 	mov	r2,zero
   18934:	00003b06 	br	18a24 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   18938:	e0bffe17 	ldw	r2,-8(fp)
   1893c:	10800003 	ldbu	r2,0(r2)
   18940:	10803fcc 	andi	r2,r2,255
   18944:	108000a0 	cmpeqi	r2,r2,2
   18948:	1000051e 	bne	r2,zero,18960 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1894c:	e0bfff17 	ldw	r2,-4(fp)
   18950:	00c00044 	movi	r3,1
   18954:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18958:	0005883a 	mov	r2,zero
   1895c:	00003106 	br	18a24 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18960:	0005303a 	rdctl	r2,status
   18964:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18968:	e0fffc17 	ldw	r3,-16(fp)
   1896c:	00bfff84 	movi	r2,-2
   18970:	1884703a 	and	r2,r3,r2
   18974:	1001703a 	wrctl	status,r2
  
  return context;
   18978:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1897c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18980:	e0bffe17 	ldw	r2,-8(fp)
   18984:	10800117 	ldw	r2,4(r2)
   18988:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1898c:	e0bffb17 	ldw	r2,-20(fp)
   18990:	1080058b 	ldhu	r2,22(r2)
   18994:	10bfffcc 	andi	r2,r2,65535
   18998:	10001926 	beq	r2,zero,18a00 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1899c:	e0bffb17 	ldw	r2,-20(fp)
   189a0:	10800417 	ldw	r2,16(r2)
   189a4:	11000104 	addi	r4,r2,4
   189a8:	e0fffb17 	ldw	r3,-20(fp)
   189ac:	19000415 	stw	r4,16(r3)
   189b0:	10800017 	ldw	r2,0(r2)
   189b4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   189b8:	e0bffb17 	ldw	r2,-20(fp)
   189bc:	1080058b 	ldhu	r2,22(r2)
   189c0:	10bfffc4 	addi	r2,r2,-1
   189c4:	1007883a 	mov	r3,r2
   189c8:	e0bffb17 	ldw	r2,-20(fp)
   189cc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   189d0:	e0bffb17 	ldw	r2,-20(fp)
   189d4:	10c00417 	ldw	r3,16(r2)
   189d8:	e0bffb17 	ldw	r2,-20(fp)
   189dc:	10800217 	ldw	r2,8(r2)
   189e0:	1880041e 	bne	r3,r2,189f4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   189e4:	e0bffb17 	ldw	r2,-20(fp)
   189e8:	10c00117 	ldw	r3,4(r2)
   189ec:	e0bffb17 	ldw	r2,-20(fp)
   189f0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   189f4:	e0bfff17 	ldw	r2,-4(fp)
   189f8:	10000005 	stb	zero,0(r2)
   189fc:	00000406 	br	18a10 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   18a00:	e0bfff17 	ldw	r2,-4(fp)
   18a04:	00c007c4 	movi	r3,31
   18a08:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   18a0c:	e03ff915 	stw	zero,-28(fp)
   18a10:	e0bffa17 	ldw	r2,-24(fp)
   18a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a18:	e0bffd17 	ldw	r2,-12(fp)
   18a1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   18a20:	e0bff917 	ldw	r2,-28(fp)
}
   18a24:	e037883a 	mov	sp,fp
   18a28:	df000017 	ldw	fp,0(sp)
   18a2c:	dec00104 	addi	sp,sp,4
   18a30:	f800283a 	ret

00018a34 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   18a34:	defff404 	addi	sp,sp,-48
   18a38:	dfc00b15 	stw	ra,44(sp)
   18a3c:	df000a15 	stw	fp,40(sp)
   18a40:	df000a04 	addi	fp,sp,40
   18a44:	e13ffe15 	stw	r4,-8(fp)
   18a48:	2805883a 	mov	r2,r5
   18a4c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18a50:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   18a54:	008000b4 	movhi	r2,2
   18a58:	10937404 	addi	r2,r2,19920
   18a5c:	10800003 	ldbu	r2,0(r2)
   18a60:	10803fcc 	andi	r2,r2,255
   18a64:	10000226 	beq	r2,zero,18a70 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   18a68:	0005883a 	mov	r2,zero
   18a6c:	00006b06 	br	18c1c <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a70:	0005303a 	rdctl	r2,status
   18a74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a78:	e0fff917 	ldw	r3,-28(fp)
   18a7c:	00bfff84 	movi	r2,-2
   18a80:	1884703a 	and	r2,r3,r2
   18a84:	1001703a 	wrctl	status,r2
  
  return context;
   18a88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18a8c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   18a90:	008000b4 	movhi	r2,2
   18a94:	10937304 	addi	r2,r2,19916
   18a98:	10800017 	ldw	r2,0(r2)
   18a9c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   18aa0:	008000b4 	movhi	r2,2
   18aa4:	10937304 	addi	r2,r2,19916
   18aa8:	10800017 	ldw	r2,0(r2)
   18aac:	10000726 	beq	r2,zero,18acc <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18ab0:	008000b4 	movhi	r2,2
   18ab4:	10937304 	addi	r2,r2,19916
   18ab8:	10800017 	ldw	r2,0(r2)
   18abc:	10c00117 	ldw	r3,4(r2)
   18ac0:	008000b4 	movhi	r2,2
   18ac4:	10937304 	addi	r2,r2,19916
   18ac8:	10c00015 	stw	r3,0(r2)
   18acc:	e0bff717 	ldw	r2,-36(fp)
   18ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ad4:	e0bffa17 	ldw	r2,-24(fp)
   18ad8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   18adc:	e0bff617 	ldw	r2,-40(fp)
   18ae0:	10004d26 	beq	r2,zero,18c18 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ae4:	0005303a 	rdctl	r2,status
   18ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18aec:	e0fffb17 	ldw	r3,-20(fp)
   18af0:	00bfff84 	movi	r2,-2
   18af4:	1884703a 	and	r2,r3,r2
   18af8:	1001703a 	wrctl	status,r2
  
  return context;
   18afc:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   18b00:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   18b04:	008000b4 	movhi	r2,2
   18b08:	10937104 	addi	r2,r2,19908
   18b0c:	10800017 	ldw	r2,0(r2)
   18b10:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   18b14:	e0bff817 	ldw	r2,-32(fp)
   18b18:	10003126 	beq	r2,zero,18be0 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   18b1c:	008000b4 	movhi	r2,2
   18b20:	10937104 	addi	r2,r2,19908
   18b24:	10800017 	ldw	r2,0(r2)
   18b28:	10c00017 	ldw	r3,0(r2)
   18b2c:	008000b4 	movhi	r2,2
   18b30:	10937104 	addi	r2,r2,19908
   18b34:	10c00015 	stw	r3,0(r2)
   18b38:	e0bff717 	ldw	r2,-36(fp)
   18b3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b40:	e0bffc17 	ldw	r2,-16(fp)
   18b44:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   18b48:	e0bff817 	ldw	r2,-32(fp)
   18b4c:	e0fffe17 	ldw	r3,-8(fp)
   18b50:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   18b54:	e0bfff0b 	ldhu	r2,-4(fp)
   18b58:	1085883a 	add	r2,r2,r2
   18b5c:	1085883a 	add	r2,r2,r2
   18b60:	1007883a 	mov	r3,r2
   18b64:	e0bffe17 	ldw	r2,-8(fp)
   18b68:	10c7883a 	add	r3,r2,r3
   18b6c:	e0bff817 	ldw	r2,-32(fp)
   18b70:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   18b74:	e0bff817 	ldw	r2,-32(fp)
   18b78:	e0fffe17 	ldw	r3,-8(fp)
   18b7c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   18b80:	e0bff817 	ldw	r2,-32(fp)
   18b84:	e0fffe17 	ldw	r3,-8(fp)
   18b88:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   18b8c:	e0bff817 	ldw	r2,-32(fp)
   18b90:	e0ffff0b 	ldhu	r3,-4(fp)
   18b94:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   18b98:	e0bff817 	ldw	r2,-32(fp)
   18b9c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   18ba0:	e0bff617 	ldw	r2,-40(fp)
   18ba4:	00c00084 	movi	r3,2
   18ba8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   18bac:	e0bff617 	ldw	r2,-40(fp)
   18bb0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   18bb4:	e0bff617 	ldw	r2,-40(fp)
   18bb8:	e0fff817 	ldw	r3,-32(fp)
   18bbc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   18bc0:	e0bff617 	ldw	r2,-40(fp)
   18bc4:	00c00fc4 	movi	r3,63
   18bc8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   18bcc:	e0bff617 	ldw	r2,-40(fp)
   18bd0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   18bd4:	e13ff617 	ldw	r4,-40(fp)
   18bd8:	00150f00 	call	150f0 <OS_EventWaitListInit>
   18bdc:	00000e06 	br	18c18 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   18be0:	008000b4 	movhi	r2,2
   18be4:	10937304 	addi	r2,r2,19916
   18be8:	10c00017 	ldw	r3,0(r2)
   18bec:	e0bff617 	ldw	r2,-40(fp)
   18bf0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   18bf4:	008000b4 	movhi	r2,2
   18bf8:	10937304 	addi	r2,r2,19916
   18bfc:	e0fff617 	ldw	r3,-40(fp)
   18c00:	10c00015 	stw	r3,0(r2)
   18c04:	e0bff717 	ldw	r2,-36(fp)
   18c08:	e0bffd15 	stw	r2,-12(fp)
   18c0c:	e0bffd17 	ldw	r2,-12(fp)
   18c10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   18c14:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   18c18:	e0bff617 	ldw	r2,-40(fp)
}
   18c1c:	e037883a 	mov	sp,fp
   18c20:	dfc00117 	ldw	ra,4(sp)
   18c24:	df000017 	ldw	fp,0(sp)
   18c28:	dec00204 	addi	sp,sp,8
   18c2c:	f800283a 	ret

00018c30 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18c30:	defff204 	addi	sp,sp,-56
   18c34:	dfc00d15 	stw	ra,52(sp)
   18c38:	df000c15 	stw	fp,48(sp)
   18c3c:	df000c04 	addi	fp,sp,48
   18c40:	e13ffd15 	stw	r4,-12(fp)
   18c44:	2805883a 	mov	r2,r5
   18c48:	e1bfff15 	stw	r6,-4(fp)
   18c4c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18c50:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18c54:	e0bfff17 	ldw	r2,-4(fp)
   18c58:	1000021e 	bne	r2,zero,18c64 <OSQDel+0x34>
        return (pevent);
   18c5c:	e0bffd17 	ldw	r2,-12(fp)
   18c60:	0000a006 	br	18ee4 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18c64:	e0bffd17 	ldw	r2,-12(fp)
   18c68:	1000051e 	bne	r2,zero,18c80 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18c6c:	e0bfff17 	ldw	r2,-4(fp)
   18c70:	00c00104 	movi	r3,4
   18c74:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18c78:	e0bffd17 	ldw	r2,-12(fp)
   18c7c:	00009906 	br	18ee4 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18c80:	e0bffd17 	ldw	r2,-12(fp)
   18c84:	10800003 	ldbu	r2,0(r2)
   18c88:	10803fcc 	andi	r2,r2,255
   18c8c:	108000a0 	cmpeqi	r2,r2,2
   18c90:	1000051e 	bne	r2,zero,18ca8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18c94:	e0bfff17 	ldw	r2,-4(fp)
   18c98:	00c00044 	movi	r3,1
   18c9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18ca0:	e0bffd17 	ldw	r2,-12(fp)
   18ca4:	00008f06 	br	18ee4 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18ca8:	008000b4 	movhi	r2,2
   18cac:	10937404 	addi	r2,r2,19920
   18cb0:	10800003 	ldbu	r2,0(r2)
   18cb4:	10803fcc 	andi	r2,r2,255
   18cb8:	10000526 	beq	r2,zero,18cd0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   18cbc:	e0bfff17 	ldw	r2,-4(fp)
   18cc0:	00c003c4 	movi	r3,15
   18cc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18cc8:	e0bffd17 	ldw	r2,-12(fp)
   18ccc:	00008506 	br	18ee4 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18cd0:	0005303a 	rdctl	r2,status
   18cd4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cd8:	e0fff817 	ldw	r3,-32(fp)
   18cdc:	00bfff84 	movi	r2,-2
   18ce0:	1884703a 	and	r2,r3,r2
   18ce4:	1001703a 	wrctl	status,r2
  
  return context;
   18ce8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   18cec:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   18cf0:	e0bffd17 	ldw	r2,-12(fp)
   18cf4:	10800283 	ldbu	r2,10(r2)
   18cf8:	10803fcc 	andi	r2,r2,255
   18cfc:	10000326 	beq	r2,zero,18d0c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18d00:	00800044 	movi	r2,1
   18d04:	e0bff405 	stb	r2,-48(fp)
   18d08:	00000106 	br	18d10 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18d0c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   18d10:	e0bffe03 	ldbu	r2,-8(fp)
   18d14:	10000326 	beq	r2,zero,18d24 <OSQDel+0xf4>
   18d18:	10800060 	cmpeqi	r2,r2,1
   18d1c:	1000381e 	bne	r2,zero,18e00 <OSQDel+0x1d0>
   18d20:	00006506 	br	18eb8 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   18d24:	e0bff403 	ldbu	r2,-48(fp)
   18d28:	1000261e 	bne	r2,zero,18dc4 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18d2c:	e0bffd17 	ldw	r2,-12(fp)
   18d30:	00c00fc4 	movi	r3,63
   18d34:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18d38:	e0bffd17 	ldw	r2,-12(fp)
   18d3c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   18d40:	e0bffd17 	ldw	r2,-12(fp)
   18d44:	10800117 	ldw	r2,4(r2)
   18d48:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   18d4c:	008000b4 	movhi	r2,2
   18d50:	10937104 	addi	r2,r2,19908
   18d54:	10c00017 	ldw	r3,0(r2)
   18d58:	e0bff717 	ldw	r2,-36(fp)
   18d5c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   18d60:	008000b4 	movhi	r2,2
   18d64:	10937104 	addi	r2,r2,19908
   18d68:	e0fff717 	ldw	r3,-36(fp)
   18d6c:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18d70:	e0bffd17 	ldw	r2,-12(fp)
   18d74:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18d78:	008000b4 	movhi	r2,2
   18d7c:	10937304 	addi	r2,r2,19916
   18d80:	10c00017 	ldw	r3,0(r2)
   18d84:	e0bffd17 	ldw	r2,-12(fp)
   18d88:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18d8c:	e0bffd17 	ldw	r2,-12(fp)
   18d90:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18d94:	008000b4 	movhi	r2,2
   18d98:	10937304 	addi	r2,r2,19916
   18d9c:	e0fffd17 	ldw	r3,-12(fp)
   18da0:	10c00015 	stw	r3,0(r2)
   18da4:	e0bff617 	ldw	r2,-40(fp)
   18da8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dac:	e0bff917 	ldw	r2,-28(fp)
   18db0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18db4:	e0bfff17 	ldw	r2,-4(fp)
   18db8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   18dbc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   18dc0:	00004706 	br	18ee0 <OSQDel+0x2b0>
   18dc4:	e0bff617 	ldw	r2,-40(fp)
   18dc8:	e0bffa15 	stw	r2,-24(fp)
   18dcc:	e0bffa17 	ldw	r2,-24(fp)
   18dd0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18dd4:	e0bfff17 	ldw	r2,-4(fp)
   18dd8:	00c01244 	movi	r3,73
   18ddc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   18de0:	e0bffd17 	ldw	r2,-12(fp)
   18de4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   18de8:	00003d06 	br	18ee0 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   18dec:	e13ffd17 	ldw	r4,-12(fp)
   18df0:	000b883a 	mov	r5,zero
   18df4:	01800104 	movi	r6,4
   18df8:	000f883a 	mov	r7,zero
   18dfc:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   18e00:	e0bffd17 	ldw	r2,-12(fp)
   18e04:	10800283 	ldbu	r2,10(r2)
   18e08:	10803fcc 	andi	r2,r2,255
   18e0c:	103ff71e 	bne	r2,zero,18dec <__alt_mem_Flash_flash_data+0xf4018dec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   18e10:	e0bffd17 	ldw	r2,-12(fp)
   18e14:	00c00fc4 	movi	r3,63
   18e18:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18e1c:	e0bffd17 	ldw	r2,-12(fp)
   18e20:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   18e24:	e0bffd17 	ldw	r2,-12(fp)
   18e28:	10800117 	ldw	r2,4(r2)
   18e2c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   18e30:	008000b4 	movhi	r2,2
   18e34:	10937104 	addi	r2,r2,19908
   18e38:	10c00017 	ldw	r3,0(r2)
   18e3c:	e0bff717 	ldw	r2,-36(fp)
   18e40:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18e44:	008000b4 	movhi	r2,2
   18e48:	10937104 	addi	r2,r2,19908
   18e4c:	e0fff717 	ldw	r3,-36(fp)
   18e50:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18e54:	e0bffd17 	ldw	r2,-12(fp)
   18e58:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18e5c:	008000b4 	movhi	r2,2
   18e60:	10937304 	addi	r2,r2,19916
   18e64:	10c00017 	ldw	r3,0(r2)
   18e68:	e0bffd17 	ldw	r2,-12(fp)
   18e6c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18e70:	e0bffd17 	ldw	r2,-12(fp)
   18e74:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18e78:	008000b4 	movhi	r2,2
   18e7c:	10937304 	addi	r2,r2,19916
   18e80:	e0fffd17 	ldw	r3,-12(fp)
   18e84:	10c00015 	stw	r3,0(r2)
   18e88:	e0bff617 	ldw	r2,-40(fp)
   18e8c:	e0bffb15 	stw	r2,-20(fp)
   18e90:	e0bffb17 	ldw	r2,-20(fp)
   18e94:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18e98:	e0bff403 	ldbu	r2,-48(fp)
   18e9c:	10800058 	cmpnei	r2,r2,1
   18ea0:	1000011e 	bne	r2,zero,18ea8 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18ea4:	00155680 	call	15568 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18ea8:	e0bfff17 	ldw	r2,-4(fp)
   18eac:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   18eb0:	e03ff515 	stw	zero,-44(fp)
             break;
   18eb4:	00000a06 	br	18ee0 <OSQDel+0x2b0>
   18eb8:	e0bff617 	ldw	r2,-40(fp)
   18ebc:	e0bffc15 	stw	r2,-16(fp)
   18ec0:	e0bffc17 	ldw	r2,-16(fp)
   18ec4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18ec8:	e0bfff17 	ldw	r2,-4(fp)
   18ecc:	00c001c4 	movi	r3,7
   18ed0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18ed4:	e0bffd17 	ldw	r2,-12(fp)
   18ed8:	e0bff515 	stw	r2,-44(fp)
             break;
   18edc:	0001883a 	nop
    }
    return (pevent_return);
   18ee0:	e0bff517 	ldw	r2,-44(fp)
}
   18ee4:	e037883a 	mov	sp,fp
   18ee8:	dfc00117 	ldw	ra,4(sp)
   18eec:	df000017 	ldw	fp,0(sp)
   18ef0:	dec00204 	addi	sp,sp,8
   18ef4:	f800283a 	ret

00018ef8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   18ef8:	defffa04 	addi	sp,sp,-24
   18efc:	df000515 	stw	fp,20(sp)
   18f00:	df000504 	addi	fp,sp,20
   18f04:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18f08:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18f0c:	e0bfff17 	ldw	r2,-4(fp)
   18f10:	1000021e 	bne	r2,zero,18f1c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   18f14:	00800104 	movi	r2,4
   18f18:	00002106 	br	18fa0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18f1c:	e0bfff17 	ldw	r2,-4(fp)
   18f20:	10800003 	ldbu	r2,0(r2)
   18f24:	10803fcc 	andi	r2,r2,255
   18f28:	108000a0 	cmpeqi	r2,r2,2
   18f2c:	1000021e 	bne	r2,zero,18f38 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   18f30:	00800044 	movi	r2,1
   18f34:	00001a06 	br	18fa0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18f38:	0005303a 	rdctl	r2,status
   18f3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18f40:	e0fffd17 	ldw	r3,-12(fp)
   18f44:	00bfff84 	movi	r2,-2
   18f48:	1884703a 	and	r2,r3,r2
   18f4c:	1001703a 	wrctl	status,r2
  
  return context;
   18f50:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18f54:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   18f58:	e0bfff17 	ldw	r2,-4(fp)
   18f5c:	10800117 	ldw	r2,4(r2)
   18f60:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   18f64:	e0bffc17 	ldw	r2,-16(fp)
   18f68:	10c00117 	ldw	r3,4(r2)
   18f6c:	e0bffc17 	ldw	r2,-16(fp)
   18f70:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   18f74:	e0bffc17 	ldw	r2,-16(fp)
   18f78:	10c00117 	ldw	r3,4(r2)
   18f7c:	e0bffc17 	ldw	r2,-16(fp)
   18f80:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   18f84:	e0bffc17 	ldw	r2,-16(fp)
   18f88:	1000058d 	sth	zero,22(r2)
   18f8c:	e0bffb17 	ldw	r2,-20(fp)
   18f90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18f94:	e0bffe17 	ldw	r2,-8(fp)
   18f98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18f9c:	0005883a 	mov	r2,zero
}
   18fa0:	e037883a 	mov	sp,fp
   18fa4:	df000017 	ldw	fp,0(sp)
   18fa8:	dec00104 	addi	sp,sp,4
   18fac:	f800283a 	ret

00018fb0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   18fb0:	defff304 	addi	sp,sp,-52
   18fb4:	dfc00c15 	stw	ra,48(sp)
   18fb8:	df000b15 	stw	fp,44(sp)
   18fbc:	df000b04 	addi	fp,sp,44
   18fc0:	e13ffd15 	stw	r4,-12(fp)
   18fc4:	2805883a 	mov	r2,r5
   18fc8:	e1bfff15 	stw	r6,-4(fp)
   18fcc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18fd0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18fd4:	e0bfff17 	ldw	r2,-4(fp)
   18fd8:	1000021e 	bne	r2,zero,18fe4 <OSQPend+0x34>
        return ((void *)0);
   18fdc:	0005883a 	mov	r2,zero
   18fe0:	0000ad06 	br	19298 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   18fe4:	e0bffd17 	ldw	r2,-12(fp)
   18fe8:	1000051e 	bne	r2,zero,19000 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18fec:	e0bfff17 	ldw	r2,-4(fp)
   18ff0:	00c00104 	movi	r3,4
   18ff4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   18ff8:	0005883a 	mov	r2,zero
   18ffc:	0000a606 	br	19298 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   19000:	e0bffd17 	ldw	r2,-12(fp)
   19004:	10800003 	ldbu	r2,0(r2)
   19008:	10803fcc 	andi	r2,r2,255
   1900c:	108000a0 	cmpeqi	r2,r2,2
   19010:	1000051e 	bne	r2,zero,19028 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19014:	e0bfff17 	ldw	r2,-4(fp)
   19018:	00c00044 	movi	r3,1
   1901c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19020:	0005883a 	mov	r2,zero
   19024:	00009c06 	br	19298 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   19028:	008000b4 	movhi	r2,2
   1902c:	10937404 	addi	r2,r2,19920
   19030:	10800003 	ldbu	r2,0(r2)
   19034:	10803fcc 	andi	r2,r2,255
   19038:	10000526 	beq	r2,zero,19050 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1903c:	e0bfff17 	ldw	r2,-4(fp)
   19040:	00c00084 	movi	r3,2
   19044:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19048:	0005883a 	mov	r2,zero
   1904c:	00009206 	br	19298 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   19050:	008000b4 	movhi	r2,2
   19054:	10936604 	addi	r2,r2,19864
   19058:	10800003 	ldbu	r2,0(r2)
   1905c:	10803fcc 	andi	r2,r2,255
   19060:	10000526 	beq	r2,zero,19078 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   19064:	e0bfff17 	ldw	r2,-4(fp)
   19068:	00c00344 	movi	r3,13
   1906c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   19070:	0005883a 	mov	r2,zero
   19074:	00008806 	br	19298 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19078:	0005303a 	rdctl	r2,status
   1907c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19080:	e0fff817 	ldw	r3,-32(fp)
   19084:	00bfff84 	movi	r2,-2
   19088:	1884703a 	and	r2,r3,r2
   1908c:	1001703a 	wrctl	status,r2
  
  return context;
   19090:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19094:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   19098:	e0bffd17 	ldw	r2,-12(fp)
   1909c:	10800117 	ldw	r2,4(r2)
   190a0:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   190a4:	e0bff717 	ldw	r2,-36(fp)
   190a8:	1080058b 	ldhu	r2,22(r2)
   190ac:	10bfffcc 	andi	r2,r2,65535
   190b0:	10001e26 	beq	r2,zero,1912c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   190b4:	e0bff717 	ldw	r2,-36(fp)
   190b8:	10800417 	ldw	r2,16(r2)
   190bc:	11000104 	addi	r4,r2,4
   190c0:	e0fff717 	ldw	r3,-36(fp)
   190c4:	19000415 	stw	r4,16(r3)
   190c8:	10800017 	ldw	r2,0(r2)
   190cc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   190d0:	e0bff717 	ldw	r2,-36(fp)
   190d4:	1080058b 	ldhu	r2,22(r2)
   190d8:	10bfffc4 	addi	r2,r2,-1
   190dc:	1007883a 	mov	r3,r2
   190e0:	e0bff717 	ldw	r2,-36(fp)
   190e4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   190e8:	e0bff717 	ldw	r2,-36(fp)
   190ec:	10c00417 	ldw	r3,16(r2)
   190f0:	e0bff717 	ldw	r2,-36(fp)
   190f4:	10800217 	ldw	r2,8(r2)
   190f8:	1880041e 	bne	r3,r2,1910c <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   190fc:	e0bff717 	ldw	r2,-36(fp)
   19100:	10c00117 	ldw	r3,4(r2)
   19104:	e0bff717 	ldw	r2,-36(fp)
   19108:	10c00415 	stw	r3,16(r2)
   1910c:	e0bff617 	ldw	r2,-40(fp)
   19110:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19114:	e0bff917 	ldw	r2,-28(fp)
   19118:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1911c:	e0bfff17 	ldw	r2,-4(fp)
   19120:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   19124:	e0bff517 	ldw	r2,-44(fp)
   19128:	00005b06 	br	19298 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1912c:	008000b4 	movhi	r2,2
   19130:	10937504 	addi	r2,r2,19924
   19134:	10c00017 	ldw	r3,0(r2)
   19138:	008000b4 	movhi	r2,2
   1913c:	10937504 	addi	r2,r2,19924
   19140:	10800017 	ldw	r2,0(r2)
   19144:	10800c03 	ldbu	r2,48(r2)
   19148:	10800114 	ori	r2,r2,4
   1914c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   19150:	008000b4 	movhi	r2,2
   19154:	10937504 	addi	r2,r2,19924
   19158:	10800017 	ldw	r2,0(r2)
   1915c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   19160:	008000b4 	movhi	r2,2
   19164:	10937504 	addi	r2,r2,19924
   19168:	10800017 	ldw	r2,0(r2)
   1916c:	e0fffe0b 	ldhu	r3,-8(fp)
   19170:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   19174:	e13ffd17 	ldw	r4,-12(fp)
   19178:	0014ce80 	call	14ce8 <OS_EventTaskWait>
   1917c:	e0bff617 	ldw	r2,-40(fp)
   19180:	e0bffa15 	stw	r2,-24(fp)
   19184:	e0bffa17 	ldw	r2,-24(fp)
   19188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1918c:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19190:	0005303a 	rdctl	r2,status
   19194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19198:	e0fffb17 	ldw	r3,-20(fp)
   1919c:	00bfff84 	movi	r2,-2
   191a0:	1884703a 	and	r2,r3,r2
   191a4:	1001703a 	wrctl	status,r2
  
  return context;
   191a8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   191ac:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   191b0:	008000b4 	movhi	r2,2
   191b4:	10937504 	addi	r2,r2,19924
   191b8:	10800017 	ldw	r2,0(r2)
   191bc:	10800c43 	ldbu	r2,49(r2)
   191c0:	10803fcc 	andi	r2,r2,255
   191c4:	10000326 	beq	r2,zero,191d4 <OSQPend+0x224>
   191c8:	108000a0 	cmpeqi	r2,r2,2
   191cc:	1000091e 	bne	r2,zero,191f4 <OSQPend+0x244>
   191d0:	00000d06 	br	19208 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   191d4:	008000b4 	movhi	r2,2
   191d8:	10937504 	addi	r2,r2,19924
   191dc:	10800017 	ldw	r2,0(r2)
   191e0:	10800917 	ldw	r2,36(r2)
   191e4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   191e8:	e0bfff17 	ldw	r2,-4(fp)
   191ec:	10000005 	stb	zero,0(r2)
             break;
   191f0:	00001006 	br	19234 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   191f4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   191f8:	e0bfff17 	ldw	r2,-4(fp)
   191fc:	00c00384 	movi	r3,14
   19200:	10c00005 	stb	r3,0(r2)
             break;
   19204:	00000b06 	br	19234 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   19208:	008000b4 	movhi	r2,2
   1920c:	10937504 	addi	r2,r2,19924
   19210:	10800017 	ldw	r2,0(r2)
   19214:	1009883a 	mov	r4,r2
   19218:	e17ffd17 	ldw	r5,-12(fp)
   1921c:	0014f400 	call	14f40 <OS_EventTaskRemove>
             pmsg = (void *)0;
   19220:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   19224:	e0bfff17 	ldw	r2,-4(fp)
   19228:	00c00284 	movi	r3,10
   1922c:	10c00005 	stb	r3,0(r2)
             break;
   19230:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   19234:	008000b4 	movhi	r2,2
   19238:	10937504 	addi	r2,r2,19924
   1923c:	10800017 	ldw	r2,0(r2)
   19240:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   19244:	008000b4 	movhi	r2,2
   19248:	10937504 	addi	r2,r2,19924
   1924c:	10800017 	ldw	r2,0(r2)
   19250:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   19254:	008000b4 	movhi	r2,2
   19258:	10937504 	addi	r2,r2,19924
   1925c:	10800017 	ldw	r2,0(r2)
   19260:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   19264:	008000b4 	movhi	r2,2
   19268:	10937504 	addi	r2,r2,19924
   1926c:	10800017 	ldw	r2,0(r2)
   19270:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   19274:	008000b4 	movhi	r2,2
   19278:	10937504 	addi	r2,r2,19924
   1927c:	10800017 	ldw	r2,0(r2)
   19280:	10000915 	stw	zero,36(r2)
   19284:	e0bff617 	ldw	r2,-40(fp)
   19288:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1928c:	e0bffc17 	ldw	r2,-16(fp)
   19290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   19294:	e0bff517 	ldw	r2,-44(fp)
}
   19298:	e037883a 	mov	sp,fp
   1929c:	dfc00117 	ldw	ra,4(sp)
   192a0:	df000017 	ldw	fp,0(sp)
   192a4:	dec00204 	addi	sp,sp,8
   192a8:	f800283a 	ret

000192ac <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   192ac:	defff604 	addi	sp,sp,-40
   192b0:	dfc00915 	stw	ra,36(sp)
   192b4:	df000815 	stw	fp,32(sp)
   192b8:	df000804 	addi	fp,sp,32
   192bc:	e13ffd15 	stw	r4,-12(fp)
   192c0:	2805883a 	mov	r2,r5
   192c4:	e1bfff15 	stw	r6,-4(fp)
   192c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   192cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   192d0:	e0bfff17 	ldw	r2,-4(fp)
   192d4:	1000021e 	bne	r2,zero,192e0 <OSQPendAbort+0x34>
        return (0);
   192d8:	0005883a 	mov	r2,zero
   192dc:	00004906 	br	19404 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   192e0:	e0bffd17 	ldw	r2,-12(fp)
   192e4:	1000051e 	bne	r2,zero,192fc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   192e8:	e0bfff17 	ldw	r2,-4(fp)
   192ec:	00c00104 	movi	r3,4
   192f0:	10c00005 	stb	r3,0(r2)
        return (0);
   192f4:	0005883a 	mov	r2,zero
   192f8:	00004206 	br	19404 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   192fc:	e0bffd17 	ldw	r2,-12(fp)
   19300:	10800003 	ldbu	r2,0(r2)
   19304:	10803fcc 	andi	r2,r2,255
   19308:	108000a0 	cmpeqi	r2,r2,2
   1930c:	1000051e 	bne	r2,zero,19324 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19310:	e0bfff17 	ldw	r2,-4(fp)
   19314:	00c00044 	movi	r3,1
   19318:	10c00005 	stb	r3,0(r2)
        return (0);
   1931c:	0005883a 	mov	r2,zero
   19320:	00003806 	br	19404 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19324:	0005303a 	rdctl	r2,status
   19328:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1932c:	e0fffa17 	ldw	r3,-24(fp)
   19330:	00bfff84 	movi	r2,-2
   19334:	1884703a 	and	r2,r3,r2
   19338:	1001703a 	wrctl	status,r2
  
  return context;
   1933c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   19340:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   19344:	e0bffd17 	ldw	r2,-12(fp)
   19348:	10800283 	ldbu	r2,10(r2)
   1934c:	10803fcc 	andi	r2,r2,255
   19350:	10002526 	beq	r2,zero,193e8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   19354:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   19358:	e0bffe03 	ldbu	r2,-8(fp)
   1935c:	10800060 	cmpeqi	r2,r2,1
   19360:	10000e26 	beq	r2,zero,1939c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19364:	00000806 	br	19388 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   19368:	e13ffd17 	ldw	r4,-12(fp)
   1936c:	000b883a 	mov	r5,zero
   19370:	01800104 	movi	r6,4
   19374:	01c00084 	movi	r7,2
   19378:	0014b500 	call	14b50 <OS_EventTaskRdy>
                     nbr_tasks++;
   1937c:	e0bff803 	ldbu	r2,-32(fp)
   19380:	10800044 	addi	r2,r2,1
   19384:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   19388:	e0bffd17 	ldw	r2,-12(fp)
   1938c:	10800283 	ldbu	r2,10(r2)
   19390:	10803fcc 	andi	r2,r2,255
   19394:	103ff41e 	bne	r2,zero,19368 <__alt_mem_Flash_flash_data+0xf4019368>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   19398:	00000906 	br	193c0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1939c:	e13ffd17 	ldw	r4,-12(fp)
   193a0:	000b883a 	mov	r5,zero
   193a4:	01800104 	movi	r6,4
   193a8:	01c00084 	movi	r7,2
   193ac:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 nbr_tasks++;
   193b0:	e0bff803 	ldbu	r2,-32(fp)
   193b4:	10800044 	addi	r2,r2,1
   193b8:	e0bff805 	stb	r2,-32(fp)
                 break;
   193bc:	0001883a 	nop
   193c0:	e0bff917 	ldw	r2,-28(fp)
   193c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193c8:	e0bffb17 	ldw	r2,-20(fp)
   193cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   193d0:	00155680 	call	15568 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   193d4:	e0bfff17 	ldw	r2,-4(fp)
   193d8:	00c00384 	movi	r3,14
   193dc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   193e0:	e0bff803 	ldbu	r2,-32(fp)
   193e4:	00000706 	br	19404 <OSQPendAbort+0x158>
   193e8:	e0bff917 	ldw	r2,-28(fp)
   193ec:	e0bffc15 	stw	r2,-16(fp)
   193f0:	e0bffc17 	ldw	r2,-16(fp)
   193f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   193f8:	e0bfff17 	ldw	r2,-4(fp)
   193fc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   19400:	0005883a 	mov	r2,zero
}
   19404:	e037883a 	mov	sp,fp
   19408:	dfc00117 	ldw	ra,4(sp)
   1940c:	df000017 	ldw	fp,0(sp)
   19410:	dec00204 	addi	sp,sp,8
   19414:	f800283a 	ret

00019418 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   19418:	defff604 	addi	sp,sp,-40
   1941c:	dfc00915 	stw	ra,36(sp)
   19420:	df000815 	stw	fp,32(sp)
   19424:	df000804 	addi	fp,sp,32
   19428:	e13ffe15 	stw	r4,-8(fp)
   1942c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19430:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19434:	e0bffe17 	ldw	r2,-8(fp)
   19438:	1000021e 	bne	r2,zero,19444 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1943c:	00800104 	movi	r2,4
   19440:	00004a06 	br	1956c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19444:	e0bffe17 	ldw	r2,-8(fp)
   19448:	10800003 	ldbu	r2,0(r2)
   1944c:	10803fcc 	andi	r2,r2,255
   19450:	108000a0 	cmpeqi	r2,r2,2
   19454:	1000021e 	bne	r2,zero,19460 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   19458:	00800044 	movi	r2,1
   1945c:	00004306 	br	1956c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19460:	0005303a 	rdctl	r2,status
   19464:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19468:	e0fffa17 	ldw	r3,-24(fp)
   1946c:	00bfff84 	movi	r2,-2
   19470:	1884703a 	and	r2,r3,r2
   19474:	1001703a 	wrctl	status,r2
  
  return context;
   19478:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1947c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   19480:	e0bffe17 	ldw	r2,-8(fp)
   19484:	10800283 	ldbu	r2,10(r2)
   19488:	10803fcc 	andi	r2,r2,255
   1948c:	10000c26 	beq	r2,zero,194c0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19490:	e13ffe17 	ldw	r4,-8(fp)
   19494:	e17fff17 	ldw	r5,-4(fp)
   19498:	01800104 	movi	r6,4
   1949c:	000f883a 	mov	r7,zero
   194a0:	0014b500 	call	14b50 <OS_EventTaskRdy>
   194a4:	e0bff817 	ldw	r2,-32(fp)
   194a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   194ac:	e0bffb17 	ldw	r2,-20(fp)
   194b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   194b4:	00155680 	call	15568 <OS_Sched>
        return (OS_ERR_NONE);
   194b8:	0005883a 	mov	r2,zero
   194bc:	00002b06 	br	1956c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   194c0:	e0bffe17 	ldw	r2,-8(fp)
   194c4:	10800117 	ldw	r2,4(r2)
   194c8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   194cc:	e0bff917 	ldw	r2,-28(fp)
   194d0:	10c0058b 	ldhu	r3,22(r2)
   194d4:	e0bff917 	ldw	r2,-28(fp)
   194d8:	1080050b 	ldhu	r2,20(r2)
   194dc:	18ffffcc 	andi	r3,r3,65535
   194e0:	10bfffcc 	andi	r2,r2,65535
   194e4:	18800636 	bltu	r3,r2,19500 <OSQPost+0xe8>
   194e8:	e0bff817 	ldw	r2,-32(fp)
   194ec:	e0bffc15 	stw	r2,-16(fp)
   194f0:	e0bffc17 	ldw	r2,-16(fp)
   194f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   194f8:	00800784 	movi	r2,30
   194fc:	00001b06 	br	1956c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   19500:	e0bff917 	ldw	r2,-28(fp)
   19504:	10800317 	ldw	r2,12(r2)
   19508:	11000104 	addi	r4,r2,4
   1950c:	e0fff917 	ldw	r3,-28(fp)
   19510:	19000315 	stw	r4,12(r3)
   19514:	e0ffff17 	ldw	r3,-4(fp)
   19518:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1951c:	e0bff917 	ldw	r2,-28(fp)
   19520:	1080058b 	ldhu	r2,22(r2)
   19524:	10800044 	addi	r2,r2,1
   19528:	1007883a 	mov	r3,r2
   1952c:	e0bff917 	ldw	r2,-28(fp)
   19530:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   19534:	e0bff917 	ldw	r2,-28(fp)
   19538:	10c00317 	ldw	r3,12(r2)
   1953c:	e0bff917 	ldw	r2,-28(fp)
   19540:	10800217 	ldw	r2,8(r2)
   19544:	1880041e 	bne	r3,r2,19558 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   19548:	e0bff917 	ldw	r2,-28(fp)
   1954c:	10c00117 	ldw	r3,4(r2)
   19550:	e0bff917 	ldw	r2,-28(fp)
   19554:	10c00315 	stw	r3,12(r2)
   19558:	e0bff817 	ldw	r2,-32(fp)
   1955c:	e0bffd15 	stw	r2,-12(fp)
   19560:	e0bffd17 	ldw	r2,-12(fp)
   19564:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19568:	0005883a 	mov	r2,zero
}
   1956c:	e037883a 	mov	sp,fp
   19570:	dfc00117 	ldw	ra,4(sp)
   19574:	df000017 	ldw	fp,0(sp)
   19578:	dec00204 	addi	sp,sp,8
   1957c:	f800283a 	ret

00019580 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   19580:	defff604 	addi	sp,sp,-40
   19584:	dfc00915 	stw	ra,36(sp)
   19588:	df000815 	stw	fp,32(sp)
   1958c:	df000804 	addi	fp,sp,32
   19590:	e13ffe15 	stw	r4,-8(fp)
   19594:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19598:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1959c:	e0bffe17 	ldw	r2,-8(fp)
   195a0:	1000021e 	bne	r2,zero,195ac <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   195a4:	00800104 	movi	r2,4
   195a8:	00004c06 	br	196dc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   195ac:	e0bffe17 	ldw	r2,-8(fp)
   195b0:	10800003 	ldbu	r2,0(r2)
   195b4:	10803fcc 	andi	r2,r2,255
   195b8:	108000a0 	cmpeqi	r2,r2,2
   195bc:	1000021e 	bne	r2,zero,195c8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   195c0:	00800044 	movi	r2,1
   195c4:	00004506 	br	196dc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   195c8:	0005303a 	rdctl	r2,status
   195cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   195d0:	e0fffa17 	ldw	r3,-24(fp)
   195d4:	00bfff84 	movi	r2,-2
   195d8:	1884703a 	and	r2,r3,r2
   195dc:	1001703a 	wrctl	status,r2
  
  return context;
   195e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   195e4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   195e8:	e0bffe17 	ldw	r2,-8(fp)
   195ec:	10800283 	ldbu	r2,10(r2)
   195f0:	10803fcc 	andi	r2,r2,255
   195f4:	10000c26 	beq	r2,zero,19628 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   195f8:	e13ffe17 	ldw	r4,-8(fp)
   195fc:	e17fff17 	ldw	r5,-4(fp)
   19600:	01800104 	movi	r6,4
   19604:	000f883a 	mov	r7,zero
   19608:	0014b500 	call	14b50 <OS_EventTaskRdy>
   1960c:	e0bff817 	ldw	r2,-32(fp)
   19610:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19614:	e0bffb17 	ldw	r2,-20(fp)
   19618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1961c:	00155680 	call	15568 <OS_Sched>
        return (OS_ERR_NONE);
   19620:	0005883a 	mov	r2,zero
   19624:	00002d06 	br	196dc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   19628:	e0bffe17 	ldw	r2,-8(fp)
   1962c:	10800117 	ldw	r2,4(r2)
   19630:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   19634:	e0bff917 	ldw	r2,-28(fp)
   19638:	10c0058b 	ldhu	r3,22(r2)
   1963c:	e0bff917 	ldw	r2,-28(fp)
   19640:	1080050b 	ldhu	r2,20(r2)
   19644:	18ffffcc 	andi	r3,r3,65535
   19648:	10bfffcc 	andi	r2,r2,65535
   1964c:	18800636 	bltu	r3,r2,19668 <OSQPostFront+0xe8>
   19650:	e0bff817 	ldw	r2,-32(fp)
   19654:	e0bffc15 	stw	r2,-16(fp)
   19658:	e0bffc17 	ldw	r2,-16(fp)
   1965c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   19660:	00800784 	movi	r2,30
   19664:	00001d06 	br	196dc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   19668:	e0bff917 	ldw	r2,-28(fp)
   1966c:	10c00417 	ldw	r3,16(r2)
   19670:	e0bff917 	ldw	r2,-28(fp)
   19674:	10800117 	ldw	r2,4(r2)
   19678:	1880041e 	bne	r3,r2,1968c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1967c:	e0bff917 	ldw	r2,-28(fp)
   19680:	10c00217 	ldw	r3,8(r2)
   19684:	e0bff917 	ldw	r2,-28(fp)
   19688:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1968c:	e0bff917 	ldw	r2,-28(fp)
   19690:	10800417 	ldw	r2,16(r2)
   19694:	10ffff04 	addi	r3,r2,-4
   19698:	e0bff917 	ldw	r2,-28(fp)
   1969c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   196a0:	e0bff917 	ldw	r2,-28(fp)
   196a4:	10800417 	ldw	r2,16(r2)
   196a8:	e0ffff17 	ldw	r3,-4(fp)
   196ac:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   196b0:	e0bff917 	ldw	r2,-28(fp)
   196b4:	1080058b 	ldhu	r2,22(r2)
   196b8:	10800044 	addi	r2,r2,1
   196bc:	1007883a 	mov	r3,r2
   196c0:	e0bff917 	ldw	r2,-28(fp)
   196c4:	10c0058d 	sth	r3,22(r2)
   196c8:	e0bff817 	ldw	r2,-32(fp)
   196cc:	e0bffd15 	stw	r2,-12(fp)
   196d0:	e0bffd17 	ldw	r2,-12(fp)
   196d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   196d8:	0005883a 	mov	r2,zero
}
   196dc:	e037883a 	mov	sp,fp
   196e0:	dfc00117 	ldw	ra,4(sp)
   196e4:	df000017 	ldw	fp,0(sp)
   196e8:	dec00204 	addi	sp,sp,8
   196ec:	f800283a 	ret

000196f0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   196f0:	defff504 	addi	sp,sp,-44
   196f4:	dfc00a15 	stw	ra,40(sp)
   196f8:	df000915 	stw	fp,36(sp)
   196fc:	df000904 	addi	fp,sp,36
   19700:	e13ffd15 	stw	r4,-12(fp)
   19704:	e17ffe15 	stw	r5,-8(fp)
   19708:	3005883a 	mov	r2,r6
   1970c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19710:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19714:	e0bffd17 	ldw	r2,-12(fp)
   19718:	1000021e 	bne	r2,zero,19724 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1971c:	00800104 	movi	r2,4
   19720:	00007106 	br	198e8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   19724:	e0bffd17 	ldw	r2,-12(fp)
   19728:	10800003 	ldbu	r2,0(r2)
   1972c:	10803fcc 	andi	r2,r2,255
   19730:	108000a0 	cmpeqi	r2,r2,2
   19734:	1000021e 	bne	r2,zero,19740 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   19738:	00800044 	movi	r2,1
   1973c:	00006a06 	br	198e8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19740:	0005303a 	rdctl	r2,status
   19744:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19748:	e0fff917 	ldw	r3,-28(fp)
   1974c:	00bfff84 	movi	r2,-2
   19750:	1884703a 	and	r2,r3,r2
   19754:	1001703a 	wrctl	status,r2
  
  return context;
   19758:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1975c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   19760:	e0bffd17 	ldw	r2,-12(fp)
   19764:	10800283 	ldbu	r2,10(r2)
   19768:	10803fcc 	andi	r2,r2,255
   1976c:	10001d26 	beq	r2,zero,197e4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   19770:	e0bfff03 	ldbu	r2,-4(fp)
   19774:	1080004c 	andi	r2,r2,1
   19778:	10000b26 	beq	r2,zero,197a8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1977c:	00000506 	br	19794 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   19780:	e13ffd17 	ldw	r4,-12(fp)
   19784:	e17ffe17 	ldw	r5,-8(fp)
   19788:	01800104 	movi	r6,4
   1978c:	000f883a 	mov	r7,zero
   19790:	0014b500 	call	14b50 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   19794:	e0bffd17 	ldw	r2,-12(fp)
   19798:	10800283 	ldbu	r2,10(r2)
   1979c:	10803fcc 	andi	r2,r2,255
   197a0:	103ff71e 	bne	r2,zero,19780 <__alt_mem_Flash_flash_data+0xf4019780>
   197a4:	00000506 	br	197bc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   197a8:	e13ffd17 	ldw	r4,-12(fp)
   197ac:	e17ffe17 	ldw	r5,-8(fp)
   197b0:	01800104 	movi	r6,4
   197b4:	000f883a 	mov	r7,zero
   197b8:	0014b500 	call	14b50 <OS_EventTaskRdy>
   197bc:	e0bff717 	ldw	r2,-36(fp)
   197c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197c4:	e0bffa17 	ldw	r2,-24(fp)
   197c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   197cc:	e0bfff03 	ldbu	r2,-4(fp)
   197d0:	1080010c 	andi	r2,r2,4
   197d4:	1000011e 	bne	r2,zero,197dc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   197d8:	00155680 	call	15568 <OS_Sched>
        }
        return (OS_ERR_NONE);
   197dc:	0005883a 	mov	r2,zero
   197e0:	00004106 	br	198e8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   197e4:	e0bffd17 	ldw	r2,-12(fp)
   197e8:	10800117 	ldw	r2,4(r2)
   197ec:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   197f0:	e0bff817 	ldw	r2,-32(fp)
   197f4:	10c0058b 	ldhu	r3,22(r2)
   197f8:	e0bff817 	ldw	r2,-32(fp)
   197fc:	1080050b 	ldhu	r2,20(r2)
   19800:	18ffffcc 	andi	r3,r3,65535
   19804:	10bfffcc 	andi	r2,r2,65535
   19808:	18800636 	bltu	r3,r2,19824 <OSQPostOpt+0x134>
   1980c:	e0bff717 	ldw	r2,-36(fp)
   19810:	e0bffb15 	stw	r2,-20(fp)
   19814:	e0bffb17 	ldw	r2,-20(fp)
   19818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1981c:	00800784 	movi	r2,30
   19820:	00003106 	br	198e8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   19824:	e0bfff03 	ldbu	r2,-4(fp)
   19828:	1080008c 	andi	r2,r2,2
   1982c:	10001326 	beq	r2,zero,1987c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   19830:	e0bff817 	ldw	r2,-32(fp)
   19834:	10c00417 	ldw	r3,16(r2)
   19838:	e0bff817 	ldw	r2,-32(fp)
   1983c:	10800117 	ldw	r2,4(r2)
   19840:	1880041e 	bne	r3,r2,19854 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   19844:	e0bff817 	ldw	r2,-32(fp)
   19848:	10c00217 	ldw	r3,8(r2)
   1984c:	e0bff817 	ldw	r2,-32(fp)
   19850:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   19854:	e0bff817 	ldw	r2,-32(fp)
   19858:	10800417 	ldw	r2,16(r2)
   1985c:	10ffff04 	addi	r3,r2,-4
   19860:	e0bff817 	ldw	r2,-32(fp)
   19864:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   19868:	e0bff817 	ldw	r2,-32(fp)
   1986c:	10800417 	ldw	r2,16(r2)
   19870:	e0fffe17 	ldw	r3,-8(fp)
   19874:	10c00015 	stw	r3,0(r2)
   19878:	00001006 	br	198bc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1987c:	e0bff817 	ldw	r2,-32(fp)
   19880:	10800317 	ldw	r2,12(r2)
   19884:	11000104 	addi	r4,r2,4
   19888:	e0fff817 	ldw	r3,-32(fp)
   1988c:	19000315 	stw	r4,12(r3)
   19890:	e0fffe17 	ldw	r3,-8(fp)
   19894:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   19898:	e0bff817 	ldw	r2,-32(fp)
   1989c:	10c00317 	ldw	r3,12(r2)
   198a0:	e0bff817 	ldw	r2,-32(fp)
   198a4:	10800217 	ldw	r2,8(r2)
   198a8:	1880041e 	bne	r3,r2,198bc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   198ac:	e0bff817 	ldw	r2,-32(fp)
   198b0:	10c00117 	ldw	r3,4(r2)
   198b4:	e0bff817 	ldw	r2,-32(fp)
   198b8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   198bc:	e0bff817 	ldw	r2,-32(fp)
   198c0:	1080058b 	ldhu	r2,22(r2)
   198c4:	10800044 	addi	r2,r2,1
   198c8:	1007883a 	mov	r3,r2
   198cc:	e0bff817 	ldw	r2,-32(fp)
   198d0:	10c0058d 	sth	r3,22(r2)
   198d4:	e0bff717 	ldw	r2,-36(fp)
   198d8:	e0bffc15 	stw	r2,-16(fp)
   198dc:	e0bffc17 	ldw	r2,-16(fp)
   198e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   198e4:	0005883a 	mov	r2,zero
}
   198e8:	e037883a 	mov	sp,fp
   198ec:	dfc00117 	ldw	ra,4(sp)
   198f0:	df000017 	ldw	fp,0(sp)
   198f4:	dec00204 	addi	sp,sp,8
   198f8:	f800283a 	ret

000198fc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   198fc:	defff604 	addi	sp,sp,-40
   19900:	df000915 	stw	fp,36(sp)
   19904:	df000904 	addi	fp,sp,36
   19908:	e13ffe15 	stw	r4,-8(fp)
   1990c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19910:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   19914:	e0bffe17 	ldw	r2,-8(fp)
   19918:	1000021e 	bne	r2,zero,19924 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1991c:	00800104 	movi	r2,4
   19920:	00004906 	br	19a48 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   19924:	e0bfff17 	ldw	r2,-4(fp)
   19928:	1000021e 	bne	r2,zero,19934 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1992c:	00800244 	movi	r2,9
   19930:	00004506 	br	19a48 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   19934:	e0bffe17 	ldw	r2,-8(fp)
   19938:	10800003 	ldbu	r2,0(r2)
   1993c:	10803fcc 	andi	r2,r2,255
   19940:	108000a0 	cmpeqi	r2,r2,2
   19944:	1000021e 	bne	r2,zero,19950 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   19948:	00800044 	movi	r2,1
   1994c:	00003e06 	br	19a48 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19950:	0005303a 	rdctl	r2,status
   19954:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19958:	e0fffc17 	ldw	r3,-16(fp)
   1995c:	00bfff84 	movi	r2,-2
   19960:	1884703a 	and	r2,r3,r2
   19964:	1001703a 	wrctl	status,r2
  
  return context;
   19968:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1996c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   19970:	e0bffe17 	ldw	r2,-8(fp)
   19974:	10c00283 	ldbu	r3,10(r2)
   19978:	e0bfff17 	ldw	r2,-4(fp)
   1997c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   19980:	e0bffe17 	ldw	r2,-8(fp)
   19984:	108002c4 	addi	r2,r2,11
   19988:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1998c:	e0bfff17 	ldw	r2,-4(fp)
   19990:	10800204 	addi	r2,r2,8
   19994:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19998:	e03ff705 	stb	zero,-36(fp)
   1999c:	00000b06 	br	199cc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   199a0:	e0bff917 	ldw	r2,-28(fp)
   199a4:	10c00044 	addi	r3,r2,1
   199a8:	e0fff915 	stw	r3,-28(fp)
   199ac:	e0fff817 	ldw	r3,-32(fp)
   199b0:	19000044 	addi	r4,r3,1
   199b4:	e13ff815 	stw	r4,-32(fp)
   199b8:	18c00003 	ldbu	r3,0(r3)
   199bc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   199c0:	e0bff703 	ldbu	r2,-36(fp)
   199c4:	10800044 	addi	r2,r2,1
   199c8:	e0bff705 	stb	r2,-36(fp)
   199cc:	e0bff703 	ldbu	r2,-36(fp)
   199d0:	108000f0 	cmpltui	r2,r2,3
   199d4:	103ff21e 	bne	r2,zero,199a0 <__alt_mem_Flash_flash_data+0xf40199a0>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   199d8:	e0bffe17 	ldw	r2,-8(fp)
   199dc:	10800117 	ldw	r2,4(r2)
   199e0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   199e4:	e0bffb17 	ldw	r2,-20(fp)
   199e8:	1080058b 	ldhu	r2,22(r2)
   199ec:	10bfffcc 	andi	r2,r2,65535
   199f0:	10000626 	beq	r2,zero,19a0c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   199f4:	e0bffb17 	ldw	r2,-20(fp)
   199f8:	10800417 	ldw	r2,16(r2)
   199fc:	10c00017 	ldw	r3,0(r2)
   19a00:	e0bfff17 	ldw	r2,-4(fp)
   19a04:	10c00015 	stw	r3,0(r2)
   19a08:	00000206 	br	19a14 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   19a0c:	e0bfff17 	ldw	r2,-4(fp)
   19a10:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   19a14:	e0bffb17 	ldw	r2,-20(fp)
   19a18:	10c0058b 	ldhu	r3,22(r2)
   19a1c:	e0bfff17 	ldw	r2,-4(fp)
   19a20:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   19a24:	e0bffb17 	ldw	r2,-20(fp)
   19a28:	10c0050b 	ldhu	r3,20(r2)
   19a2c:	e0bfff17 	ldw	r2,-4(fp)
   19a30:	10c0018d 	sth	r3,6(r2)
   19a34:	e0bffa17 	ldw	r2,-24(fp)
   19a38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19a3c:	e0bffd17 	ldw	r2,-12(fp)
   19a40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19a44:	0005883a 	mov	r2,zero
}
   19a48:	e037883a 	mov	sp,fp
   19a4c:	df000017 	ldw	fp,0(sp)
   19a50:	dec00104 	addi	sp,sp,4
   19a54:	f800283a 	ret

00019a58 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   19a58:	defffb04 	addi	sp,sp,-20
   19a5c:	dfc00415 	stw	ra,16(sp)
   19a60:	df000315 	stw	fp,12(sp)
   19a64:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   19a68:	01000174 	movhi	r4,5
   19a6c:	21218b04 	addi	r4,r4,-31188
   19a70:	01407804 	movi	r5,480
   19a74:	00154b40 	call	154b4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   19a78:	00800174 	movhi	r2,5
   19a7c:	10a18b04 	addi	r2,r2,-31188
   19a80:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   19a84:	00800174 	movhi	r2,5
   19a88:	10a19104 	addi	r2,r2,-31164
   19a8c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19a90:	e03ffd0d 	sth	zero,-12(fp)
   19a94:	00000c06 	br	19ac8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   19a98:	e0bffe17 	ldw	r2,-8(fp)
   19a9c:	e0ffff17 	ldw	r3,-4(fp)
   19aa0:	10c00015 	stw	r3,0(r2)
        pq1++;
   19aa4:	e0bffe17 	ldw	r2,-8(fp)
   19aa8:	10800604 	addi	r2,r2,24
   19aac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   19ab0:	e0bfff17 	ldw	r2,-4(fp)
   19ab4:	10800604 	addi	r2,r2,24
   19ab8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   19abc:	e0bffd0b 	ldhu	r2,-12(fp)
   19ac0:	10800044 	addi	r2,r2,1
   19ac4:	e0bffd0d 	sth	r2,-12(fp)
   19ac8:	e0bffd0b 	ldhu	r2,-12(fp)
   19acc:	108004f0 	cmpltui	r2,r2,19
   19ad0:	103ff11e 	bne	r2,zero,19a98 <__alt_mem_Flash_flash_data+0xf4019a98>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   19ad4:	e0bffe17 	ldw	r2,-8(fp)
   19ad8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   19adc:	008000b4 	movhi	r2,2
   19ae0:	10937104 	addi	r2,r2,19908
   19ae4:	00c00174 	movhi	r3,5
   19ae8:	18e18b04 	addi	r3,r3,-31188
   19aec:	10c00015 	stw	r3,0(r2)
#endif
}
   19af0:	e037883a 	mov	sp,fp
   19af4:	dfc00117 	ldw	ra,4(sp)
   19af8:	df000017 	ldw	fp,0(sp)
   19afc:	dec00204 	addi	sp,sp,8
   19b00:	f800283a 	ret

00019b04 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   19b04:	defffa04 	addi	sp,sp,-24
   19b08:	df000515 	stw	fp,20(sp)
   19b0c:	df000504 	addi	fp,sp,20
   19b10:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19b14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19b18:	e0bfff17 	ldw	r2,-4(fp)
   19b1c:	1000021e 	bne	r2,zero,19b28 <OSSemAccept+0x24>
        return (0);
   19b20:	0005883a 	mov	r2,zero
   19b24:	00001f06 	br	19ba4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19b28:	e0bfff17 	ldw	r2,-4(fp)
   19b2c:	10800003 	ldbu	r2,0(r2)
   19b30:	10803fcc 	andi	r2,r2,255
   19b34:	108000e0 	cmpeqi	r2,r2,3
   19b38:	1000021e 	bne	r2,zero,19b44 <OSSemAccept+0x40>
        return (0);
   19b3c:	0005883a 	mov	r2,zero
   19b40:	00001806 	br	19ba4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b44:	0005303a 	rdctl	r2,status
   19b48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19b4c:	e0fffd17 	ldw	r3,-12(fp)
   19b50:	00bfff84 	movi	r2,-2
   19b54:	1884703a 	and	r2,r3,r2
   19b58:	1001703a 	wrctl	status,r2
  
  return context;
   19b5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19b60:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   19b64:	e0bfff17 	ldw	r2,-4(fp)
   19b68:	1080020b 	ldhu	r2,8(r2)
   19b6c:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   19b70:	e0bffc0b 	ldhu	r2,-16(fp)
   19b74:	10000626 	beq	r2,zero,19b90 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   19b78:	e0bfff17 	ldw	r2,-4(fp)
   19b7c:	1080020b 	ldhu	r2,8(r2)
   19b80:	10bfffc4 	addi	r2,r2,-1
   19b84:	1007883a 	mov	r3,r2
   19b88:	e0bfff17 	ldw	r2,-4(fp)
   19b8c:	10c0020d 	sth	r3,8(r2)
   19b90:	e0bffb17 	ldw	r2,-20(fp)
   19b94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b98:	e0bffe17 	ldw	r2,-8(fp)
   19b9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   19ba0:	e0bffc0b 	ldhu	r2,-16(fp)
}
   19ba4:	e037883a 	mov	sp,fp
   19ba8:	df000017 	ldw	fp,0(sp)
   19bac:	dec00104 	addi	sp,sp,4
   19bb0:	f800283a 	ret

00019bb4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   19bb4:	defff904 	addi	sp,sp,-28
   19bb8:	dfc00615 	stw	ra,24(sp)
   19bbc:	df000515 	stw	fp,20(sp)
   19bc0:	df000504 	addi	fp,sp,20
   19bc4:	2005883a 	mov	r2,r4
   19bc8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19bcc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19bd0:	008000b4 	movhi	r2,2
   19bd4:	10937404 	addi	r2,r2,19920
   19bd8:	10800003 	ldbu	r2,0(r2)
   19bdc:	10803fcc 	andi	r2,r2,255
   19be0:	10000226 	beq	r2,zero,19bec <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   19be4:	0005883a 	mov	r2,zero
   19be8:	00002d06 	br	19ca0 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19bec:	0005303a 	rdctl	r2,status
   19bf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19bf4:	e0fffd17 	ldw	r3,-12(fp)
   19bf8:	00bfff84 	movi	r2,-2
   19bfc:	1884703a 	and	r2,r3,r2
   19c00:	1001703a 	wrctl	status,r2
  
  return context;
   19c04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   19c08:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   19c0c:	008000b4 	movhi	r2,2
   19c10:	10937304 	addi	r2,r2,19916
   19c14:	10800017 	ldw	r2,0(r2)
   19c18:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   19c1c:	008000b4 	movhi	r2,2
   19c20:	10937304 	addi	r2,r2,19916
   19c24:	10800017 	ldw	r2,0(r2)
   19c28:	10000726 	beq	r2,zero,19c48 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   19c2c:	008000b4 	movhi	r2,2
   19c30:	10937304 	addi	r2,r2,19916
   19c34:	10800017 	ldw	r2,0(r2)
   19c38:	10c00117 	ldw	r3,4(r2)
   19c3c:	008000b4 	movhi	r2,2
   19c40:	10937304 	addi	r2,r2,19916
   19c44:	10c00015 	stw	r3,0(r2)
   19c48:	e0bffb17 	ldw	r2,-20(fp)
   19c4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19c50:	e0bffe17 	ldw	r2,-8(fp)
   19c54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   19c58:	e0bffc17 	ldw	r2,-16(fp)
   19c5c:	10000f26 	beq	r2,zero,19c9c <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   19c60:	e0bffc17 	ldw	r2,-16(fp)
   19c64:	00c000c4 	movi	r3,3
   19c68:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   19c6c:	e0bffc17 	ldw	r2,-16(fp)
   19c70:	e0ffff0b 	ldhu	r3,-4(fp)
   19c74:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   19c78:	e0bffc17 	ldw	r2,-16(fp)
   19c7c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   19c80:	e0bffc17 	ldw	r2,-16(fp)
   19c84:	00c00fc4 	movi	r3,63
   19c88:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   19c8c:	e0bffc17 	ldw	r2,-16(fp)
   19c90:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   19c94:	e13ffc17 	ldw	r4,-16(fp)
   19c98:	00150f00 	call	150f0 <OS_EventWaitListInit>
    }
    return (pevent);
   19c9c:	e0bffc17 	ldw	r2,-16(fp)
}
   19ca0:	e037883a 	mov	sp,fp
   19ca4:	dfc00117 	ldw	ra,4(sp)
   19ca8:	df000017 	ldw	fp,0(sp)
   19cac:	dec00204 	addi	sp,sp,8
   19cb0:	f800283a 	ret

00019cb4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19cb4:	defff304 	addi	sp,sp,-52
   19cb8:	dfc00c15 	stw	ra,48(sp)
   19cbc:	df000b15 	stw	fp,44(sp)
   19cc0:	df000b04 	addi	fp,sp,44
   19cc4:	e13ffd15 	stw	r4,-12(fp)
   19cc8:	2805883a 	mov	r2,r5
   19ccc:	e1bfff15 	stw	r6,-4(fp)
   19cd0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19cd4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   19cd8:	e0bfff17 	ldw	r2,-4(fp)
   19cdc:	1000021e 	bne	r2,zero,19ce8 <OSSemDel+0x34>
        return (pevent);
   19ce0:	e0bffd17 	ldw	r2,-12(fp)
   19ce4:	00008806 	br	19f08 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   19ce8:	e0bffd17 	ldw	r2,-12(fp)
   19cec:	1000051e 	bne	r2,zero,19d04 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   19cf0:	e0bfff17 	ldw	r2,-4(fp)
   19cf4:	00c00104 	movi	r3,4
   19cf8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19cfc:	e0bffd17 	ldw	r2,-12(fp)
   19d00:	00008106 	br	19f08 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   19d04:	e0bffd17 	ldw	r2,-12(fp)
   19d08:	10800003 	ldbu	r2,0(r2)
   19d0c:	10803fcc 	andi	r2,r2,255
   19d10:	108000e0 	cmpeqi	r2,r2,3
   19d14:	1000051e 	bne	r2,zero,19d2c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19d18:	e0bfff17 	ldw	r2,-4(fp)
   19d1c:	00c00044 	movi	r3,1
   19d20:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19d24:	e0bffd17 	ldw	r2,-12(fp)
   19d28:	00007706 	br	19f08 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   19d2c:	008000b4 	movhi	r2,2
   19d30:	10937404 	addi	r2,r2,19920
   19d34:	10800003 	ldbu	r2,0(r2)
   19d38:	10803fcc 	andi	r2,r2,255
   19d3c:	10000526 	beq	r2,zero,19d54 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   19d40:	e0bfff17 	ldw	r2,-4(fp)
   19d44:	00c003c4 	movi	r3,15
   19d48:	10c00005 	stb	r3,0(r2)
        return (pevent);
   19d4c:	e0bffd17 	ldw	r2,-12(fp)
   19d50:	00006d06 	br	19f08 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d54:	0005303a 	rdctl	r2,status
   19d58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d5c:	e0fff817 	ldw	r3,-32(fp)
   19d60:	00bfff84 	movi	r2,-2
   19d64:	1884703a 	and	r2,r3,r2
   19d68:	1001703a 	wrctl	status,r2
  
  return context;
   19d6c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19d70:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   19d74:	e0bffd17 	ldw	r2,-12(fp)
   19d78:	10800283 	ldbu	r2,10(r2)
   19d7c:	10803fcc 	andi	r2,r2,255
   19d80:	10000326 	beq	r2,zero,19d90 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   19d84:	00800044 	movi	r2,1
   19d88:	e0bff505 	stb	r2,-44(fp)
   19d8c:	00000106 	br	19d94 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   19d90:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   19d94:	e0bffe03 	ldbu	r2,-8(fp)
   19d98:	10000326 	beq	r2,zero,19da8 <OSSemDel+0xf4>
   19d9c:	10800060 	cmpeqi	r2,r2,1
   19da0:	10002c1e 	bne	r2,zero,19e54 <OSSemDel+0x1a0>
   19da4:	00004d06 	br	19edc <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   19da8:	e0bff503 	ldbu	r2,-44(fp)
   19dac:	10001a1e 	bne	r2,zero,19e18 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   19db0:	e0bffd17 	ldw	r2,-12(fp)
   19db4:	00c00fc4 	movi	r3,63
   19db8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   19dbc:	e0bffd17 	ldw	r2,-12(fp)
   19dc0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19dc4:	e0bffd17 	ldw	r2,-12(fp)
   19dc8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   19dcc:	008000b4 	movhi	r2,2
   19dd0:	10937304 	addi	r2,r2,19916
   19dd4:	10c00017 	ldw	r3,0(r2)
   19dd8:	e0bffd17 	ldw	r2,-12(fp)
   19ddc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   19de0:	e0bffd17 	ldw	r2,-12(fp)
   19de4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   19de8:	008000b4 	movhi	r2,2
   19dec:	10937304 	addi	r2,r2,19916
   19df0:	e0fffd17 	ldw	r3,-12(fp)
   19df4:	10c00015 	stw	r3,0(r2)
   19df8:	e0bff717 	ldw	r2,-36(fp)
   19dfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19e00:	e0bff917 	ldw	r2,-28(fp)
   19e04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   19e08:	e0bfff17 	ldw	r2,-4(fp)
   19e0c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   19e10:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   19e14:	00003b06 	br	19f04 <OSSemDel+0x250>
   19e18:	e0bff717 	ldw	r2,-36(fp)
   19e1c:	e0bffa15 	stw	r2,-24(fp)
   19e20:	e0bffa17 	ldw	r2,-24(fp)
   19e24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   19e28:	e0bfff17 	ldw	r2,-4(fp)
   19e2c:	00c01244 	movi	r3,73
   19e30:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   19e34:	e0bffd17 	ldw	r2,-12(fp)
   19e38:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   19e3c:	00003106 	br	19f04 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   19e40:	e13ffd17 	ldw	r4,-12(fp)
   19e44:	000b883a 	mov	r5,zero
   19e48:	01800044 	movi	r6,1
   19e4c:	000f883a 	mov	r7,zero
   19e50:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   19e54:	e0bffd17 	ldw	r2,-12(fp)
   19e58:	10800283 	ldbu	r2,10(r2)
   19e5c:	10803fcc 	andi	r2,r2,255
   19e60:	103ff71e 	bne	r2,zero,19e40 <__alt_mem_Flash_flash_data+0xf4019e40>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   19e64:	e0bffd17 	ldw	r2,-12(fp)
   19e68:	00c00fc4 	movi	r3,63
   19e6c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   19e70:	e0bffd17 	ldw	r2,-12(fp)
   19e74:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19e78:	e0bffd17 	ldw	r2,-12(fp)
   19e7c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   19e80:	008000b4 	movhi	r2,2
   19e84:	10937304 	addi	r2,r2,19916
   19e88:	10c00017 	ldw	r3,0(r2)
   19e8c:	e0bffd17 	ldw	r2,-12(fp)
   19e90:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   19e94:	e0bffd17 	ldw	r2,-12(fp)
   19e98:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   19e9c:	008000b4 	movhi	r2,2
   19ea0:	10937304 	addi	r2,r2,19916
   19ea4:	e0fffd17 	ldw	r3,-12(fp)
   19ea8:	10c00015 	stw	r3,0(r2)
   19eac:	e0bff717 	ldw	r2,-36(fp)
   19eb0:	e0bffb15 	stw	r2,-20(fp)
   19eb4:	e0bffb17 	ldw	r2,-20(fp)
   19eb8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   19ebc:	e0bff503 	ldbu	r2,-44(fp)
   19ec0:	10800058 	cmpnei	r2,r2,1
   19ec4:	1000011e 	bne	r2,zero,19ecc <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   19ec8:	00155680 	call	15568 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   19ecc:	e0bfff17 	ldw	r2,-4(fp)
   19ed0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   19ed4:	e03ff615 	stw	zero,-40(fp)
             break;
   19ed8:	00000a06 	br	19f04 <OSSemDel+0x250>
   19edc:	e0bff717 	ldw	r2,-36(fp)
   19ee0:	e0bffc15 	stw	r2,-16(fp)
   19ee4:	e0bffc17 	ldw	r2,-16(fp)
   19ee8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   19eec:	e0bfff17 	ldw	r2,-4(fp)
   19ef0:	00c001c4 	movi	r3,7
   19ef4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   19ef8:	e0bffd17 	ldw	r2,-12(fp)
   19efc:	e0bff615 	stw	r2,-40(fp)
             break;
   19f00:	0001883a 	nop
    }
    return (pevent_return);
   19f04:	e0bff617 	ldw	r2,-40(fp)
}
   19f08:	e037883a 	mov	sp,fp
   19f0c:	dfc00117 	ldw	ra,4(sp)
   19f10:	df000017 	ldw	fp,0(sp)
   19f14:	dec00204 	addi	sp,sp,8
   19f18:	f800283a 	ret

00019f1c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19f1c:	defff504 	addi	sp,sp,-44
   19f20:	dfc00a15 	stw	ra,40(sp)
   19f24:	df000915 	stw	fp,36(sp)
   19f28:	df000904 	addi	fp,sp,36
   19f2c:	e13ffd15 	stw	r4,-12(fp)
   19f30:	2805883a 	mov	r2,r5
   19f34:	e1bfff15 	stw	r6,-4(fp)
   19f38:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19f3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19f40:	e0bfff17 	ldw	r2,-4(fp)
   19f44:	1000011e 	bne	r2,zero,19f4c <OSSemPend+0x30>
        return;
   19f48:	00008906 	br	1a170 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19f4c:	e0bffd17 	ldw	r2,-12(fp)
   19f50:	1000041e 	bne	r2,zero,19f64 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   19f54:	e0bfff17 	ldw	r2,-4(fp)
   19f58:	00c00104 	movi	r3,4
   19f5c:	10c00005 	stb	r3,0(r2)
        return;
   19f60:	00008306 	br	1a170 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19f64:	e0bffd17 	ldw	r2,-12(fp)
   19f68:	10800003 	ldbu	r2,0(r2)
   19f6c:	10803fcc 	andi	r2,r2,255
   19f70:	108000e0 	cmpeqi	r2,r2,3
   19f74:	1000041e 	bne	r2,zero,19f88 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   19f78:	e0bfff17 	ldw	r2,-4(fp)
   19f7c:	00c00044 	movi	r3,1
   19f80:	10c00005 	stb	r3,0(r2)
        return;
   19f84:	00007a06 	br	1a170 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   19f88:	008000b4 	movhi	r2,2
   19f8c:	10937404 	addi	r2,r2,19920
   19f90:	10800003 	ldbu	r2,0(r2)
   19f94:	10803fcc 	andi	r2,r2,255
   19f98:	10000426 	beq	r2,zero,19fac <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19f9c:	e0bfff17 	ldw	r2,-4(fp)
   19fa0:	00c00084 	movi	r3,2
   19fa4:	10c00005 	stb	r3,0(r2)
        return;
   19fa8:	00007106 	br	1a170 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   19fac:	008000b4 	movhi	r2,2
   19fb0:	10936604 	addi	r2,r2,19864
   19fb4:	10800003 	ldbu	r2,0(r2)
   19fb8:	10803fcc 	andi	r2,r2,255
   19fbc:	10000426 	beq	r2,zero,19fd0 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   19fc0:	e0bfff17 	ldw	r2,-4(fp)
   19fc4:	00c00344 	movi	r3,13
   19fc8:	10c00005 	stb	r3,0(r2)
        return;
   19fcc:	00006806 	br	1a170 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19fd0:	0005303a 	rdctl	r2,status
   19fd4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19fd8:	e0fff817 	ldw	r3,-32(fp)
   19fdc:	00bfff84 	movi	r2,-2
   19fe0:	1884703a 	and	r2,r3,r2
   19fe4:	1001703a 	wrctl	status,r2
  
  return context;
   19fe8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   19fec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   19ff0:	e0bffd17 	ldw	r2,-12(fp)
   19ff4:	1080020b 	ldhu	r2,8(r2)
   19ff8:	10bfffcc 	andi	r2,r2,65535
   19ffc:	10000d26 	beq	r2,zero,1a034 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1a000:	e0bffd17 	ldw	r2,-12(fp)
   1a004:	1080020b 	ldhu	r2,8(r2)
   1a008:	10bfffc4 	addi	r2,r2,-1
   1a00c:	1007883a 	mov	r3,r2
   1a010:	e0bffd17 	ldw	r2,-12(fp)
   1a014:	10c0020d 	sth	r3,8(r2)
   1a018:	e0bff717 	ldw	r2,-36(fp)
   1a01c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a020:	e0bff917 	ldw	r2,-28(fp)
   1a024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1a028:	e0bfff17 	ldw	r2,-4(fp)
   1a02c:	10000005 	stb	zero,0(r2)
        return;
   1a030:	00004f06 	br	1a170 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1a034:	008000b4 	movhi	r2,2
   1a038:	10937504 	addi	r2,r2,19924
   1a03c:	10c00017 	ldw	r3,0(r2)
   1a040:	008000b4 	movhi	r2,2
   1a044:	10937504 	addi	r2,r2,19924
   1a048:	10800017 	ldw	r2,0(r2)
   1a04c:	10800c03 	ldbu	r2,48(r2)
   1a050:	10800054 	ori	r2,r2,1
   1a054:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1a058:	008000b4 	movhi	r2,2
   1a05c:	10937504 	addi	r2,r2,19924
   1a060:	10800017 	ldw	r2,0(r2)
   1a064:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1a068:	008000b4 	movhi	r2,2
   1a06c:	10937504 	addi	r2,r2,19924
   1a070:	10800017 	ldw	r2,0(r2)
   1a074:	e0fffe0b 	ldhu	r3,-8(fp)
   1a078:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1a07c:	e13ffd17 	ldw	r4,-12(fp)
   1a080:	0014ce80 	call	14ce8 <OS_EventTaskWait>
   1a084:	e0bff717 	ldw	r2,-36(fp)
   1a088:	e0bffa15 	stw	r2,-24(fp)
   1a08c:	e0bffa17 	ldw	r2,-24(fp)
   1a090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1a094:	00155680 	call	15568 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a098:	0005303a 	rdctl	r2,status
   1a09c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a0a0:	e0fffb17 	ldw	r3,-20(fp)
   1a0a4:	00bfff84 	movi	r2,-2
   1a0a8:	1884703a 	and	r2,r3,r2
   1a0ac:	1001703a 	wrctl	status,r2
  
  return context;
   1a0b0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1a0b4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1a0b8:	008000b4 	movhi	r2,2
   1a0bc:	10937504 	addi	r2,r2,19924
   1a0c0:	10800017 	ldw	r2,0(r2)
   1a0c4:	10800c43 	ldbu	r2,49(r2)
   1a0c8:	10803fcc 	andi	r2,r2,255
   1a0cc:	10000326 	beq	r2,zero,1a0dc <OSSemPend+0x1c0>
   1a0d0:	108000a0 	cmpeqi	r2,r2,2
   1a0d4:	1000041e 	bne	r2,zero,1a0e8 <OSSemPend+0x1cc>
   1a0d8:	00000706 	br	1a0f8 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1a0dc:	e0bfff17 	ldw	r2,-4(fp)
   1a0e0:	10000005 	stb	zero,0(r2)
             break;
   1a0e4:	00000e06 	br	1a120 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1a0e8:	e0bfff17 	ldw	r2,-4(fp)
   1a0ec:	00c00384 	movi	r3,14
   1a0f0:	10c00005 	stb	r3,0(r2)
             break;
   1a0f4:	00000a06 	br	1a120 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1a0f8:	008000b4 	movhi	r2,2
   1a0fc:	10937504 	addi	r2,r2,19924
   1a100:	10800017 	ldw	r2,0(r2)
   1a104:	1009883a 	mov	r4,r2
   1a108:	e17ffd17 	ldw	r5,-12(fp)
   1a10c:	0014f400 	call	14f40 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1a110:	e0bfff17 	ldw	r2,-4(fp)
   1a114:	00c00284 	movi	r3,10
   1a118:	10c00005 	stb	r3,0(r2)
             break;
   1a11c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1a120:	008000b4 	movhi	r2,2
   1a124:	10937504 	addi	r2,r2,19924
   1a128:	10800017 	ldw	r2,0(r2)
   1a12c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1a130:	008000b4 	movhi	r2,2
   1a134:	10937504 	addi	r2,r2,19924
   1a138:	10800017 	ldw	r2,0(r2)
   1a13c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1a140:	008000b4 	movhi	r2,2
   1a144:	10937504 	addi	r2,r2,19924
   1a148:	10800017 	ldw	r2,0(r2)
   1a14c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1a150:	008000b4 	movhi	r2,2
   1a154:	10937504 	addi	r2,r2,19924
   1a158:	10800017 	ldw	r2,0(r2)
   1a15c:	10000815 	stw	zero,32(r2)
   1a160:	e0bff717 	ldw	r2,-36(fp)
   1a164:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a168:	e0bffc17 	ldw	r2,-16(fp)
   1a16c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   1a170:	e037883a 	mov	sp,fp
   1a174:	dfc00117 	ldw	ra,4(sp)
   1a178:	df000017 	ldw	fp,0(sp)
   1a17c:	dec00204 	addi	sp,sp,8
   1a180:	f800283a 	ret

0001a184 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1a184:	defff604 	addi	sp,sp,-40
   1a188:	dfc00915 	stw	ra,36(sp)
   1a18c:	df000815 	stw	fp,32(sp)
   1a190:	df000804 	addi	fp,sp,32
   1a194:	e13ffd15 	stw	r4,-12(fp)
   1a198:	2805883a 	mov	r2,r5
   1a19c:	e1bfff15 	stw	r6,-4(fp)
   1a1a0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a1a4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1a1a8:	e0bfff17 	ldw	r2,-4(fp)
   1a1ac:	1000021e 	bne	r2,zero,1a1b8 <OSSemPendAbort+0x34>
        return (0);
   1a1b0:	0005883a 	mov	r2,zero
   1a1b4:	00004906 	br	1a2dc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a1b8:	e0bffd17 	ldw	r2,-12(fp)
   1a1bc:	1000051e 	bne	r2,zero,1a1d4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1a1c0:	e0bfff17 	ldw	r2,-4(fp)
   1a1c4:	00c00104 	movi	r3,4
   1a1c8:	10c00005 	stb	r3,0(r2)
        return (0);
   1a1cc:	0005883a 	mov	r2,zero
   1a1d0:	00004206 	br	1a2dc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a1d4:	e0bffd17 	ldw	r2,-12(fp)
   1a1d8:	10800003 	ldbu	r2,0(r2)
   1a1dc:	10803fcc 	andi	r2,r2,255
   1a1e0:	108000e0 	cmpeqi	r2,r2,3
   1a1e4:	1000051e 	bne	r2,zero,1a1fc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1a1e8:	e0bfff17 	ldw	r2,-4(fp)
   1a1ec:	00c00044 	movi	r3,1
   1a1f0:	10c00005 	stb	r3,0(r2)
        return (0);
   1a1f4:	0005883a 	mov	r2,zero
   1a1f8:	00003806 	br	1a2dc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1fc:	0005303a 	rdctl	r2,status
   1a200:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a204:	e0fffa17 	ldw	r3,-24(fp)
   1a208:	00bfff84 	movi	r2,-2
   1a20c:	1884703a 	and	r2,r3,r2
   1a210:	1001703a 	wrctl	status,r2
  
  return context;
   1a214:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1a218:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1a21c:	e0bffd17 	ldw	r2,-12(fp)
   1a220:	10800283 	ldbu	r2,10(r2)
   1a224:	10803fcc 	andi	r2,r2,255
   1a228:	10002526 	beq	r2,zero,1a2c0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1a22c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1a230:	e0bffe03 	ldbu	r2,-8(fp)
   1a234:	10800060 	cmpeqi	r2,r2,1
   1a238:	10000e26 	beq	r2,zero,1a274 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1a23c:	00000806 	br	1a260 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1a240:	e13ffd17 	ldw	r4,-12(fp)
   1a244:	000b883a 	mov	r5,zero
   1a248:	01800044 	movi	r6,1
   1a24c:	01c00084 	movi	r7,2
   1a250:	0014b500 	call	14b50 <OS_EventTaskRdy>
                     nbr_tasks++;
   1a254:	e0bff803 	ldbu	r2,-32(fp)
   1a258:	10800044 	addi	r2,r2,1
   1a25c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1a260:	e0bffd17 	ldw	r2,-12(fp)
   1a264:	10800283 	ldbu	r2,10(r2)
   1a268:	10803fcc 	andi	r2,r2,255
   1a26c:	103ff41e 	bne	r2,zero,1a240 <__alt_mem_Flash_flash_data+0xf401a240>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1a270:	00000906 	br	1a298 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1a274:	e13ffd17 	ldw	r4,-12(fp)
   1a278:	000b883a 	mov	r5,zero
   1a27c:	01800044 	movi	r6,1
   1a280:	01c00084 	movi	r7,2
   1a284:	0014b500 	call	14b50 <OS_EventTaskRdy>
                 nbr_tasks++;
   1a288:	e0bff803 	ldbu	r2,-32(fp)
   1a28c:	10800044 	addi	r2,r2,1
   1a290:	e0bff805 	stb	r2,-32(fp)
                 break;
   1a294:	0001883a 	nop
   1a298:	e0bff917 	ldw	r2,-28(fp)
   1a29c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2a0:	e0bffb17 	ldw	r2,-20(fp)
   1a2a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1a2a8:	00155680 	call	15568 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1a2ac:	e0bfff17 	ldw	r2,-4(fp)
   1a2b0:	00c00384 	movi	r3,14
   1a2b4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1a2b8:	e0bff803 	ldbu	r2,-32(fp)
   1a2bc:	00000706 	br	1a2dc <OSSemPendAbort+0x158>
   1a2c0:	e0bff917 	ldw	r2,-28(fp)
   1a2c4:	e0bffc15 	stw	r2,-16(fp)
   1a2c8:	e0bffc17 	ldw	r2,-16(fp)
   1a2cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a2d0:	e0bfff17 	ldw	r2,-4(fp)
   1a2d4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1a2d8:	0005883a 	mov	r2,zero
}
   1a2dc:	e037883a 	mov	sp,fp
   1a2e0:	dfc00117 	ldw	ra,4(sp)
   1a2e4:	df000017 	ldw	fp,0(sp)
   1a2e8:	dec00204 	addi	sp,sp,8
   1a2ec:	f800283a 	ret

0001a2f0 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1a2f0:	defff804 	addi	sp,sp,-32
   1a2f4:	dfc00715 	stw	ra,28(sp)
   1a2f8:	df000615 	stw	fp,24(sp)
   1a2fc:	df000604 	addi	fp,sp,24
   1a300:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a304:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a308:	e0bfff17 	ldw	r2,-4(fp)
   1a30c:	1000021e 	bne	r2,zero,1a318 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a310:	00800104 	movi	r2,4
   1a314:	00003506 	br	1a3ec <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a318:	e0bfff17 	ldw	r2,-4(fp)
   1a31c:	10800003 	ldbu	r2,0(r2)
   1a320:	10803fcc 	andi	r2,r2,255
   1a324:	108000e0 	cmpeqi	r2,r2,3
   1a328:	1000021e 	bne	r2,zero,1a334 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1a32c:	00800044 	movi	r2,1
   1a330:	00002e06 	br	1a3ec <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a334:	0005303a 	rdctl	r2,status
   1a338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a33c:	e0fffb17 	ldw	r3,-20(fp)
   1a340:	00bfff84 	movi	r2,-2
   1a344:	1884703a 	and	r2,r3,r2
   1a348:	1001703a 	wrctl	status,r2
  
  return context;
   1a34c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a350:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1a354:	e0bfff17 	ldw	r2,-4(fp)
   1a358:	10800283 	ldbu	r2,10(r2)
   1a35c:	10803fcc 	andi	r2,r2,255
   1a360:	10000c26 	beq	r2,zero,1a394 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1a364:	e13fff17 	ldw	r4,-4(fp)
   1a368:	000b883a 	mov	r5,zero
   1a36c:	01800044 	movi	r6,1
   1a370:	000f883a 	mov	r7,zero
   1a374:	0014b500 	call	14b50 <OS_EventTaskRdy>
   1a378:	e0bffa17 	ldw	r2,-24(fp)
   1a37c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a380:	e0bffc17 	ldw	r2,-16(fp)
   1a384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1a388:	00155680 	call	15568 <OS_Sched>
        return (OS_ERR_NONE);
   1a38c:	0005883a 	mov	r2,zero
   1a390:	00001606 	br	1a3ec <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1a394:	e0bfff17 	ldw	r2,-4(fp)
   1a398:	1080020b 	ldhu	r2,8(r2)
   1a39c:	10ffffcc 	andi	r3,r2,65535
   1a3a0:	00bfffd4 	movui	r2,65535
   1a3a4:	18800c26 	beq	r3,r2,1a3d8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1a3a8:	e0bfff17 	ldw	r2,-4(fp)
   1a3ac:	1080020b 	ldhu	r2,8(r2)
   1a3b0:	10800044 	addi	r2,r2,1
   1a3b4:	1007883a 	mov	r3,r2
   1a3b8:	e0bfff17 	ldw	r2,-4(fp)
   1a3bc:	10c0020d 	sth	r3,8(r2)
   1a3c0:	e0bffa17 	ldw	r2,-24(fp)
   1a3c4:	e0bffd15 	stw	r2,-12(fp)
   1a3c8:	e0bffd17 	ldw	r2,-12(fp)
   1a3cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1a3d0:	0005883a 	mov	r2,zero
   1a3d4:	00000506 	br	1a3ec <OSSemPost+0xfc>
   1a3d8:	e0bffa17 	ldw	r2,-24(fp)
   1a3dc:	e0bffe15 	stw	r2,-8(fp)
   1a3e0:	e0bffe17 	ldw	r2,-8(fp)
   1a3e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1a3e8:	00800c84 	movi	r2,50
}
   1a3ec:	e037883a 	mov	sp,fp
   1a3f0:	dfc00117 	ldw	ra,4(sp)
   1a3f4:	df000017 	ldw	fp,0(sp)
   1a3f8:	dec00204 	addi	sp,sp,8
   1a3fc:	f800283a 	ret

0001a400 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1a400:	defff704 	addi	sp,sp,-36
   1a404:	df000815 	stw	fp,32(sp)
   1a408:	df000804 	addi	fp,sp,32
   1a40c:	e13ffe15 	stw	r4,-8(fp)
   1a410:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1a414:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1a418:	e0bffe17 	ldw	r2,-8(fp)
   1a41c:	1000021e 	bne	r2,zero,1a428 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1a420:	00800104 	movi	r2,4
   1a424:	00003606 	br	1a500 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1a428:	e0bfff17 	ldw	r2,-4(fp)
   1a42c:	1000021e 	bne	r2,zero,1a438 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1a430:	00800244 	movi	r2,9
   1a434:	00003206 	br	1a500 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1a438:	e0bffe17 	ldw	r2,-8(fp)
   1a43c:	10800003 	ldbu	r2,0(r2)
   1a440:	10803fcc 	andi	r2,r2,255
   1a444:	108000e0 	cmpeqi	r2,r2,3
   1a448:	1000021e 	bne	r2,zero,1a454 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1a44c:	00800044 	movi	r2,1
   1a450:	00002b06 	br	1a500 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a454:	0005303a 	rdctl	r2,status
   1a458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a45c:	e0fffc17 	ldw	r3,-16(fp)
   1a460:	00bfff84 	movi	r2,-2
   1a464:	1884703a 	and	r2,r3,r2
   1a468:	1001703a 	wrctl	status,r2
  
  return context;
   1a46c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a470:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1a474:	e0bffe17 	ldw	r2,-8(fp)
   1a478:	10c00283 	ldbu	r3,10(r2)
   1a47c:	e0bfff17 	ldw	r2,-4(fp)
   1a480:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1a484:	e0bffe17 	ldw	r2,-8(fp)
   1a488:	108002c4 	addi	r2,r2,11
   1a48c:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1a490:	e0bfff17 	ldw	r2,-4(fp)
   1a494:	10800084 	addi	r2,r2,2
   1a498:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a49c:	e03ffa05 	stb	zero,-24(fp)
   1a4a0:	00000b06 	br	1a4d0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1a4a4:	e0bff917 	ldw	r2,-28(fp)
   1a4a8:	10c00044 	addi	r3,r2,1
   1a4ac:	e0fff915 	stw	r3,-28(fp)
   1a4b0:	e0fff817 	ldw	r3,-32(fp)
   1a4b4:	19000044 	addi	r4,r3,1
   1a4b8:	e13ff815 	stw	r4,-32(fp)
   1a4bc:	18c00003 	ldbu	r3,0(r3)
   1a4c0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1a4c4:	e0bffa03 	ldbu	r2,-24(fp)
   1a4c8:	10800044 	addi	r2,r2,1
   1a4cc:	e0bffa05 	stb	r2,-24(fp)
   1a4d0:	e0bffa03 	ldbu	r2,-24(fp)
   1a4d4:	108000f0 	cmpltui	r2,r2,3
   1a4d8:	103ff21e 	bne	r2,zero,1a4a4 <__alt_mem_Flash_flash_data+0xf401a4a4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1a4dc:	e0bffe17 	ldw	r2,-8(fp)
   1a4e0:	10c0020b 	ldhu	r3,8(r2)
   1a4e4:	e0bfff17 	ldw	r2,-4(fp)
   1a4e8:	10c0000d 	sth	r3,0(r2)
   1a4ec:	e0bffb17 	ldw	r2,-20(fp)
   1a4f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4f4:	e0bffd17 	ldw	r2,-12(fp)
   1a4f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a4fc:	0005883a 	mov	r2,zero
}
   1a500:	e037883a 	mov	sp,fp
   1a504:	df000017 	ldw	fp,0(sp)
   1a508:	dec00104 	addi	sp,sp,4
   1a50c:	f800283a 	ret

0001a510 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1a510:	defff904 	addi	sp,sp,-28
   1a514:	df000615 	stw	fp,24(sp)
   1a518:	df000604 	addi	fp,sp,24
   1a51c:	e13ffd15 	stw	r4,-12(fp)
   1a520:	2805883a 	mov	r2,r5
   1a524:	e1bfff15 	stw	r6,-4(fp)
   1a528:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1a52c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1a530:	e0bfff17 	ldw	r2,-4(fp)
   1a534:	1000011e 	bne	r2,zero,1a53c <OSSemSet+0x2c>
        return;
   1a538:	00003006 	br	1a5fc <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1a53c:	e0bffd17 	ldw	r2,-12(fp)
   1a540:	1000041e 	bne	r2,zero,1a554 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1a544:	e0bfff17 	ldw	r2,-4(fp)
   1a548:	00c00104 	movi	r3,4
   1a54c:	10c00005 	stb	r3,0(r2)
        return;
   1a550:	00002a06 	br	1a5fc <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1a554:	e0bffd17 	ldw	r2,-12(fp)
   1a558:	10800003 	ldbu	r2,0(r2)
   1a55c:	10803fcc 	andi	r2,r2,255
   1a560:	108000e0 	cmpeqi	r2,r2,3
   1a564:	1000041e 	bne	r2,zero,1a578 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1a568:	e0bfff17 	ldw	r2,-4(fp)
   1a56c:	00c00044 	movi	r3,1
   1a570:	10c00005 	stb	r3,0(r2)
        return;
   1a574:	00002106 	br	1a5fc <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a578:	0005303a 	rdctl	r2,status
   1a57c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a580:	e0fffb17 	ldw	r3,-20(fp)
   1a584:	00bfff84 	movi	r2,-2
   1a588:	1884703a 	and	r2,r3,r2
   1a58c:	1001703a 	wrctl	status,r2
  
  return context;
   1a590:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1a594:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1a598:	e0bfff17 	ldw	r2,-4(fp)
   1a59c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1a5a0:	e0bffd17 	ldw	r2,-12(fp)
   1a5a4:	1080020b 	ldhu	r2,8(r2)
   1a5a8:	10bfffcc 	andi	r2,r2,65535
   1a5ac:	10000426 	beq	r2,zero,1a5c0 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1a5b0:	e0bffd17 	ldw	r2,-12(fp)
   1a5b4:	e0fffe0b 	ldhu	r3,-8(fp)
   1a5b8:	10c0020d 	sth	r3,8(r2)
   1a5bc:	00000b06 	br	1a5ec <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1a5c0:	e0bffd17 	ldw	r2,-12(fp)
   1a5c4:	10800283 	ldbu	r2,10(r2)
   1a5c8:	10803fcc 	andi	r2,r2,255
   1a5cc:	1000041e 	bne	r2,zero,1a5e0 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1a5d0:	e0bffd17 	ldw	r2,-12(fp)
   1a5d4:	e0fffe0b 	ldhu	r3,-8(fp)
   1a5d8:	10c0020d 	sth	r3,8(r2)
   1a5dc:	00000306 	br	1a5ec <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1a5e0:	e0bfff17 	ldw	r2,-4(fp)
   1a5e4:	00c01244 	movi	r3,73
   1a5e8:	10c00005 	stb	r3,0(r2)
   1a5ec:	e0bffa17 	ldw	r2,-24(fp)
   1a5f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a5f4:	e0bffc17 	ldw	r2,-16(fp)
   1a5f8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   1a5fc:	e037883a 	mov	sp,fp
   1a600:	df000017 	ldw	fp,0(sp)
   1a604:	dec00104 	addi	sp,sp,4
   1a608:	f800283a 	ret

0001a60c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1a60c:	defff104 	addi	sp,sp,-60
   1a610:	dfc00e15 	stw	ra,56(sp)
   1a614:	df000d15 	stw	fp,52(sp)
   1a618:	df000d04 	addi	fp,sp,52
   1a61c:	2007883a 	mov	r3,r4
   1a620:	2805883a 	mov	r2,r5
   1a624:	e0fffe05 	stb	r3,-8(fp)
   1a628:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1a62c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1a630:	e0bffe03 	ldbu	r2,-8(fp)
   1a634:	10800530 	cmpltui	r2,r2,20
   1a638:	1000051e 	bne	r2,zero,1a650 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1a63c:	e0bffe03 	ldbu	r2,-8(fp)
   1a640:	10803fe0 	cmpeqi	r2,r2,255
   1a644:	1000021e 	bne	r2,zero,1a650 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1a648:	00800a84 	movi	r2,42
   1a64c:	00013a06 	br	1ab38 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1a650:	e0bfff03 	ldbu	r2,-4(fp)
   1a654:	10800530 	cmpltui	r2,r2,20
   1a658:	1000021e 	bne	r2,zero,1a664 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1a65c:	00800a84 	movi	r2,42
   1a660:	00013506 	br	1ab38 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a664:	0005303a 	rdctl	r2,status
   1a668:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a66c:	e0fff917 	ldw	r3,-28(fp)
   1a670:	00bfff84 	movi	r2,-2
   1a674:	1884703a 	and	r2,r3,r2
   1a678:	1001703a 	wrctl	status,r2
  
  return context;
   1a67c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a680:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1a684:	e0ffff03 	ldbu	r3,-4(fp)
   1a688:	00800174 	movhi	r2,5
   1a68c:	10a81704 	addi	r2,r2,-24484
   1a690:	18c7883a 	add	r3,r3,r3
   1a694:	18c7883a 	add	r3,r3,r3
   1a698:	10c5883a 	add	r2,r2,r3
   1a69c:	10800017 	ldw	r2,0(r2)
   1a6a0:	10000626 	beq	r2,zero,1a6bc <OSTaskChangePrio+0xb0>
   1a6a4:	e0bff517 	ldw	r2,-44(fp)
   1a6a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a6ac:	e0bffa17 	ldw	r2,-24(fp)
   1a6b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1a6b4:	00800a04 	movi	r2,40
   1a6b8:	00011f06 	br	1ab38 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1a6bc:	e0bffe03 	ldbu	r2,-8(fp)
   1a6c0:	10803fd8 	cmpnei	r2,r2,255
   1a6c4:	1000051e 	bne	r2,zero,1a6dc <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1a6c8:	008000b4 	movhi	r2,2
   1a6cc:	10937504 	addi	r2,r2,19924
   1a6d0:	10800017 	ldw	r2,0(r2)
   1a6d4:	10800c83 	ldbu	r2,50(r2)
   1a6d8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1a6dc:	e0fffe03 	ldbu	r3,-8(fp)
   1a6e0:	00800174 	movhi	r2,5
   1a6e4:	10a81704 	addi	r2,r2,-24484
   1a6e8:	18c7883a 	add	r3,r3,r3
   1a6ec:	18c7883a 	add	r3,r3,r3
   1a6f0:	10c5883a 	add	r2,r2,r3
   1a6f4:	10800017 	ldw	r2,0(r2)
   1a6f8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1a6fc:	e0bff617 	ldw	r2,-40(fp)
   1a700:	1000061e 	bne	r2,zero,1a71c <OSTaskChangePrio+0x110>
   1a704:	e0bff517 	ldw	r2,-44(fp)
   1a708:	e0bffb15 	stw	r2,-20(fp)
   1a70c:	e0bffb17 	ldw	r2,-20(fp)
   1a710:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1a714:	00800a44 	movi	r2,41
   1a718:	00010706 	br	1ab38 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1a71c:	e0bff617 	ldw	r2,-40(fp)
   1a720:	10800058 	cmpnei	r2,r2,1
   1a724:	1000061e 	bne	r2,zero,1a740 <OSTaskChangePrio+0x134>
   1a728:	e0bff517 	ldw	r2,-44(fp)
   1a72c:	e0bffc15 	stw	r2,-16(fp)
   1a730:	e0bffc17 	ldw	r2,-16(fp)
   1a734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1a738:	008010c4 	movi	r2,67
   1a73c:	0000fe06 	br	1ab38 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1a740:	e0bfff03 	ldbu	r2,-4(fp)
   1a744:	1004d0fa 	srli	r2,r2,3
   1a748:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1a74c:	e0bfff03 	ldbu	r2,-4(fp)
   1a750:	108001cc 	andi	r2,r2,7
   1a754:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1a758:	e0bff703 	ldbu	r2,-36(fp)
   1a75c:	00c00044 	movi	r3,1
   1a760:	1884983a 	sll	r2,r3,r2
   1a764:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1a768:	e0bff743 	ldbu	r2,-35(fp)
   1a76c:	00c00044 	movi	r3,1
   1a770:	1884983a 	sll	r2,r3,r2
   1a774:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1a778:	e0fffe03 	ldbu	r3,-8(fp)
   1a77c:	00800174 	movhi	r2,5
   1a780:	10a81704 	addi	r2,r2,-24484
   1a784:	18c7883a 	add	r3,r3,r3
   1a788:	18c7883a 	add	r3,r3,r3
   1a78c:	10c5883a 	add	r2,r2,r3
   1a790:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1a794:	e0ffff03 	ldbu	r3,-4(fp)
   1a798:	00800174 	movhi	r2,5
   1a79c:	10a81704 	addi	r2,r2,-24484
   1a7a0:	18c7883a 	add	r3,r3,r3
   1a7a4:	18c7883a 	add	r3,r3,r3
   1a7a8:	10c5883a 	add	r2,r2,r3
   1a7ac:	e0fff617 	ldw	r3,-40(fp)
   1a7b0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1a7b4:	e0bff617 	ldw	r2,-40(fp)
   1a7b8:	10800d03 	ldbu	r2,52(r2)
   1a7bc:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1a7c0:	e0bff617 	ldw	r2,-40(fp)
   1a7c4:	10800d83 	ldbu	r2,54(r2)
   1a7c8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1a7cc:	e0bff617 	ldw	r2,-40(fp)
   1a7d0:	10800d43 	ldbu	r2,53(r2)
   1a7d4:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1a7d8:	e0fff803 	ldbu	r3,-32(fp)
   1a7dc:	008000b4 	movhi	r2,2
   1a7e0:	10937244 	addi	r2,r2,19913
   1a7e4:	10c5883a 	add	r2,r2,r3
   1a7e8:	10c00003 	ldbu	r3,0(r2)
   1a7ec:	e0bff883 	ldbu	r2,-30(fp)
   1a7f0:	1884703a 	and	r2,r3,r2
   1a7f4:	10803fcc 	andi	r2,r2,255
   1a7f8:	10003726 	beq	r2,zero,1a8d8 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   1a7fc:	e0fff803 	ldbu	r3,-32(fp)
   1a800:	e13ff803 	ldbu	r4,-32(fp)
   1a804:	008000b4 	movhi	r2,2
   1a808:	10937244 	addi	r2,r2,19913
   1a80c:	1105883a 	add	r2,r2,r4
   1a810:	10800003 	ldbu	r2,0(r2)
   1a814:	1009883a 	mov	r4,r2
   1a818:	e0bff883 	ldbu	r2,-30(fp)
   1a81c:	0084303a 	nor	r2,zero,r2
   1a820:	2084703a 	and	r2,r4,r2
   1a824:	1009883a 	mov	r4,r2
   1a828:	008000b4 	movhi	r2,2
   1a82c:	10937244 	addi	r2,r2,19913
   1a830:	10c5883a 	add	r2,r2,r3
   1a834:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1a838:	e0fff803 	ldbu	r3,-32(fp)
   1a83c:	008000b4 	movhi	r2,2
   1a840:	10937244 	addi	r2,r2,19913
   1a844:	10c5883a 	add	r2,r2,r3
   1a848:	10800003 	ldbu	r2,0(r2)
   1a84c:	10803fcc 	andi	r2,r2,255
   1a850:	10000b1e 	bne	r2,zero,1a880 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   1a854:	e0bff843 	ldbu	r2,-31(fp)
   1a858:	0084303a 	nor	r2,zero,r2
   1a85c:	1007883a 	mov	r3,r2
   1a860:	008000b4 	movhi	r2,2
   1a864:	10937204 	addi	r2,r2,19912
   1a868:	10800003 	ldbu	r2,0(r2)
   1a86c:	1884703a 	and	r2,r3,r2
   1a870:	1007883a 	mov	r3,r2
   1a874:	008000b4 	movhi	r2,2
   1a878:	10937204 	addi	r2,r2,19912
   1a87c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1a880:	008000b4 	movhi	r2,2
   1a884:	10937204 	addi	r2,r2,19912
   1a888:	10c00003 	ldbu	r3,0(r2)
   1a88c:	e0bff783 	ldbu	r2,-34(fp)
   1a890:	1884b03a 	or	r2,r3,r2
   1a894:	1007883a 	mov	r3,r2
   1a898:	008000b4 	movhi	r2,2
   1a89c:	10937204 	addi	r2,r2,19912
   1a8a0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1a8a4:	e0fff703 	ldbu	r3,-36(fp)
   1a8a8:	e13ff703 	ldbu	r4,-36(fp)
   1a8ac:	008000b4 	movhi	r2,2
   1a8b0:	10937244 	addi	r2,r2,19913
   1a8b4:	1105883a 	add	r2,r2,r4
   1a8b8:	11000003 	ldbu	r4,0(r2)
   1a8bc:	e0bff7c3 	ldbu	r2,-33(fp)
   1a8c0:	2084b03a 	or	r2,r4,r2
   1a8c4:	1009883a 	mov	r4,r2
   1a8c8:	008000b4 	movhi	r2,2
   1a8cc:	10937244 	addi	r2,r2,19913
   1a8d0:	10c5883a 	add	r2,r2,r3
   1a8d4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1a8d8:	e0bff617 	ldw	r2,-40(fp)
   1a8dc:	10800717 	ldw	r2,28(r2)
   1a8e0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1a8e4:	e0bff317 	ldw	r2,-52(fp)
   1a8e8:	10003326 	beq	r2,zero,1a9b8 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1a8ec:	e0bff803 	ldbu	r2,-32(fp)
   1a8f0:	e0fff803 	ldbu	r3,-32(fp)
   1a8f4:	e13ff317 	ldw	r4,-52(fp)
   1a8f8:	20c7883a 	add	r3,r4,r3
   1a8fc:	18c00204 	addi	r3,r3,8
   1a900:	18c000c3 	ldbu	r3,3(r3)
   1a904:	1809883a 	mov	r4,r3
   1a908:	e0fff883 	ldbu	r3,-30(fp)
   1a90c:	00c6303a 	nor	r3,zero,r3
   1a910:	20c6703a 	and	r3,r4,r3
   1a914:	1809883a 	mov	r4,r3
   1a918:	e0fff317 	ldw	r3,-52(fp)
   1a91c:	1885883a 	add	r2,r3,r2
   1a920:	10800204 	addi	r2,r2,8
   1a924:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1a928:	e0bff803 	ldbu	r2,-32(fp)
   1a92c:	e0fff317 	ldw	r3,-52(fp)
   1a930:	1885883a 	add	r2,r3,r2
   1a934:	10800204 	addi	r2,r2,8
   1a938:	108000c3 	ldbu	r2,3(r2)
   1a93c:	10803fcc 	andi	r2,r2,255
   1a940:	1000091e 	bne	r2,zero,1a968 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   1a944:	e0bff317 	ldw	r2,-52(fp)
   1a948:	10800283 	ldbu	r2,10(r2)
   1a94c:	1007883a 	mov	r3,r2
   1a950:	e0bff843 	ldbu	r2,-31(fp)
   1a954:	0084303a 	nor	r2,zero,r2
   1a958:	1884703a 	and	r2,r3,r2
   1a95c:	1007883a 	mov	r3,r2
   1a960:	e0bff317 	ldw	r2,-52(fp)
   1a964:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1a968:	e0bff317 	ldw	r2,-52(fp)
   1a96c:	10c00283 	ldbu	r3,10(r2)
   1a970:	e0bff783 	ldbu	r2,-34(fp)
   1a974:	1884b03a 	or	r2,r3,r2
   1a978:	1007883a 	mov	r3,r2
   1a97c:	e0bff317 	ldw	r2,-52(fp)
   1a980:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1a984:	e0bff703 	ldbu	r2,-36(fp)
   1a988:	e0fff703 	ldbu	r3,-36(fp)
   1a98c:	e13ff317 	ldw	r4,-52(fp)
   1a990:	20c7883a 	add	r3,r4,r3
   1a994:	18c00204 	addi	r3,r3,8
   1a998:	190000c3 	ldbu	r4,3(r3)
   1a99c:	e0fff7c3 	ldbu	r3,-33(fp)
   1a9a0:	20c6b03a 	or	r3,r4,r3
   1a9a4:	1809883a 	mov	r4,r3
   1a9a8:	e0fff317 	ldw	r3,-52(fp)
   1a9ac:	1885883a 	add	r2,r3,r2
   1a9b0:	10800204 	addi	r2,r2,8
   1a9b4:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1a9b8:	e0bff617 	ldw	r2,-40(fp)
   1a9bc:	10800817 	ldw	r2,32(r2)
   1a9c0:	10004226 	beq	r2,zero,1aacc <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1a9c4:	e0bff617 	ldw	r2,-40(fp)
   1a9c8:	10800817 	ldw	r2,32(r2)
   1a9cc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1a9d0:	e0bff417 	ldw	r2,-48(fp)
   1a9d4:	10800017 	ldw	r2,0(r2)
   1a9d8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1a9dc:	00003906 	br	1aac4 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1a9e0:	e0bff803 	ldbu	r2,-32(fp)
   1a9e4:	e0fff803 	ldbu	r3,-32(fp)
   1a9e8:	e13ff317 	ldw	r4,-52(fp)
   1a9ec:	20c7883a 	add	r3,r4,r3
   1a9f0:	18c00204 	addi	r3,r3,8
   1a9f4:	18c000c3 	ldbu	r3,3(r3)
   1a9f8:	1809883a 	mov	r4,r3
   1a9fc:	e0fff883 	ldbu	r3,-30(fp)
   1aa00:	00c6303a 	nor	r3,zero,r3
   1aa04:	20c6703a 	and	r3,r4,r3
   1aa08:	1809883a 	mov	r4,r3
   1aa0c:	e0fff317 	ldw	r3,-52(fp)
   1aa10:	1885883a 	add	r2,r3,r2
   1aa14:	10800204 	addi	r2,r2,8
   1aa18:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1aa1c:	e0bff803 	ldbu	r2,-32(fp)
   1aa20:	e0fff317 	ldw	r3,-52(fp)
   1aa24:	1885883a 	add	r2,r3,r2
   1aa28:	10800204 	addi	r2,r2,8
   1aa2c:	108000c3 	ldbu	r2,3(r2)
   1aa30:	10803fcc 	andi	r2,r2,255
   1aa34:	1000091e 	bne	r2,zero,1aa5c <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1aa38:	e0bff317 	ldw	r2,-52(fp)
   1aa3c:	10800283 	ldbu	r2,10(r2)
   1aa40:	1007883a 	mov	r3,r2
   1aa44:	e0bff843 	ldbu	r2,-31(fp)
   1aa48:	0084303a 	nor	r2,zero,r2
   1aa4c:	1884703a 	and	r2,r3,r2
   1aa50:	1007883a 	mov	r3,r2
   1aa54:	e0bff317 	ldw	r2,-52(fp)
   1aa58:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1aa5c:	e0bff317 	ldw	r2,-52(fp)
   1aa60:	10c00283 	ldbu	r3,10(r2)
   1aa64:	e0bff783 	ldbu	r2,-34(fp)
   1aa68:	1884b03a 	or	r2,r3,r2
   1aa6c:	1007883a 	mov	r3,r2
   1aa70:	e0bff317 	ldw	r2,-52(fp)
   1aa74:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1aa78:	e0bff703 	ldbu	r2,-36(fp)
   1aa7c:	e0fff703 	ldbu	r3,-36(fp)
   1aa80:	e13ff317 	ldw	r4,-52(fp)
   1aa84:	20c7883a 	add	r3,r4,r3
   1aa88:	18c00204 	addi	r3,r3,8
   1aa8c:	190000c3 	ldbu	r4,3(r3)
   1aa90:	e0fff7c3 	ldbu	r3,-33(fp)
   1aa94:	20c6b03a 	or	r3,r4,r3
   1aa98:	1809883a 	mov	r4,r3
   1aa9c:	e0fff317 	ldw	r3,-52(fp)
   1aaa0:	1885883a 	add	r2,r3,r2
   1aaa4:	10800204 	addi	r2,r2,8
   1aaa8:	110000c5 	stb	r4,3(r2)
            pevents++;
   1aaac:	e0bff417 	ldw	r2,-48(fp)
   1aab0:	10800104 	addi	r2,r2,4
   1aab4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1aab8:	e0bff417 	ldw	r2,-48(fp)
   1aabc:	10800017 	ldw	r2,0(r2)
   1aac0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1aac4:	e0bff317 	ldw	r2,-52(fp)
   1aac8:	103fc51e 	bne	r2,zero,1a9e0 <__alt_mem_Flash_flash_data+0xf401a9e0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1aacc:	e0bff617 	ldw	r2,-40(fp)
   1aad0:	e0ffff03 	ldbu	r3,-4(fp)
   1aad4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1aad8:	e0bff617 	ldw	r2,-40(fp)
   1aadc:	e0fff703 	ldbu	r3,-36(fp)
   1aae0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1aae4:	e0bff617 	ldw	r2,-40(fp)
   1aae8:	e0fff743 	ldbu	r3,-35(fp)
   1aaec:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1aaf0:	e0bff617 	ldw	r2,-40(fp)
   1aaf4:	e0fff783 	ldbu	r3,-34(fp)
   1aaf8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1aafc:	e0bff617 	ldw	r2,-40(fp)
   1ab00:	e0fff7c3 	ldbu	r3,-33(fp)
   1ab04:	10c00d45 	stb	r3,53(r2)
   1ab08:	e0bff517 	ldw	r2,-44(fp)
   1ab0c:	e0bffd15 	stw	r2,-12(fp)
   1ab10:	e0bffd17 	ldw	r2,-12(fp)
   1ab14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1ab18:	008000b4 	movhi	r2,2
   1ab1c:	10936644 	addi	r2,r2,19865
   1ab20:	10800003 	ldbu	r2,0(r2)
   1ab24:	10803fcc 	andi	r2,r2,255
   1ab28:	10800058 	cmpnei	r2,r2,1
   1ab2c:	1000011e 	bne	r2,zero,1ab34 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   1ab30:	00155680 	call	15568 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ab34:	0005883a 	mov	r2,zero
}
   1ab38:	e037883a 	mov	sp,fp
   1ab3c:	dfc00117 	ldw	ra,4(sp)
   1ab40:	df000017 	ldw	fp,0(sp)
   1ab44:	dec00204 	addi	sp,sp,8
   1ab48:	f800283a 	ret

0001ab4c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1ab4c:	deffee04 	addi	sp,sp,-72
   1ab50:	dfc01115 	stw	ra,68(sp)
   1ab54:	df001015 	stw	fp,64(sp)
   1ab58:	df001004 	addi	fp,sp,64
   1ab5c:	e13ffc15 	stw	r4,-16(fp)
   1ab60:	e17ffd15 	stw	r5,-12(fp)
   1ab64:	e1bffe15 	stw	r6,-8(fp)
   1ab68:	3805883a 	mov	r2,r7
   1ab6c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1ab70:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1ab74:	e0bfff03 	ldbu	r2,-4(fp)
   1ab78:	10800570 	cmpltui	r2,r2,21
   1ab7c:	1000021e 	bne	r2,zero,1ab88 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1ab80:	00800a84 	movi	r2,42
   1ab84:	00005b06 	br	1acf4 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab88:	0005303a 	rdctl	r2,status
   1ab8c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab90:	e0fff617 	ldw	r3,-40(fp)
   1ab94:	00bfff84 	movi	r2,-2
   1ab98:	1884703a 	and	r2,r3,r2
   1ab9c:	1001703a 	wrctl	status,r2
  
  return context;
   1aba0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1aba4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1aba8:	008000b4 	movhi	r2,2
   1abac:	10937404 	addi	r2,r2,19920
   1abb0:	10800003 	ldbu	r2,0(r2)
   1abb4:	10803fcc 	andi	r2,r2,255
   1abb8:	10000626 	beq	r2,zero,1abd4 <OSTaskCreate+0x88>
   1abbc:	e0bff317 	ldw	r2,-52(fp)
   1abc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1abc4:	e0bff717 	ldw	r2,-36(fp)
   1abc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1abcc:	00800f04 	movi	r2,60
   1abd0:	00004806 	br	1acf4 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1abd4:	e0ffff03 	ldbu	r3,-4(fp)
   1abd8:	00800174 	movhi	r2,5
   1abdc:	10a81704 	addi	r2,r2,-24484
   1abe0:	18c7883a 	add	r3,r3,r3
   1abe4:	18c7883a 	add	r3,r3,r3
   1abe8:	10c5883a 	add	r2,r2,r3
   1abec:	10800017 	ldw	r2,0(r2)
   1abf0:	10003b1e 	bne	r2,zero,1ace0 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1abf4:	e0ffff03 	ldbu	r3,-4(fp)
   1abf8:	00800174 	movhi	r2,5
   1abfc:	10a81704 	addi	r2,r2,-24484
   1ac00:	18c7883a 	add	r3,r3,r3
   1ac04:	18c7883a 	add	r3,r3,r3
   1ac08:	10c5883a 	add	r2,r2,r3
   1ac0c:	00c00044 	movi	r3,1
   1ac10:	10c00015 	stw	r3,0(r2)
   1ac14:	e0bff317 	ldw	r2,-52(fp)
   1ac18:	e0bff815 	stw	r2,-32(fp)
   1ac1c:	e0bff817 	ldw	r2,-32(fp)
   1ac20:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1ac24:	e13ffc17 	ldw	r4,-16(fp)
   1ac28:	e17ffd17 	ldw	r5,-12(fp)
   1ac2c:	e1bffe17 	ldw	r6,-8(fp)
   1ac30:	000f883a 	mov	r7,zero
   1ac34:	001f8400 	call	1f840 <OSTaskStkInit>
   1ac38:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1ac3c:	e0bfff03 	ldbu	r2,-4(fp)
   1ac40:	d8000015 	stw	zero,0(sp)
   1ac44:	d8000115 	stw	zero,4(sp)
   1ac48:	d8000215 	stw	zero,8(sp)
   1ac4c:	1009883a 	mov	r4,r2
   1ac50:	e17ff417 	ldw	r5,-48(fp)
   1ac54:	000d883a 	mov	r6,zero
   1ac58:	000f883a 	mov	r7,zero
   1ac5c:	001596c0 	call	1596c <OS_TCBInit>
   1ac60:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1ac64:	e0bff503 	ldbu	r2,-44(fp)
   1ac68:	1000081e 	bne	r2,zero,1ac8c <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1ac6c:	008000b4 	movhi	r2,2
   1ac70:	10936644 	addi	r2,r2,19865
   1ac74:	10800003 	ldbu	r2,0(r2)
   1ac78:	10803fcc 	andi	r2,r2,255
   1ac7c:	10800058 	cmpnei	r2,r2,1
   1ac80:	1000151e 	bne	r2,zero,1acd8 <OSTaskCreate+0x18c>
                OS_Sched();
   1ac84:	00155680 	call	15568 <OS_Sched>
   1ac88:	00001306 	br	1acd8 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ac8c:	0005303a 	rdctl	r2,status
   1ac90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ac94:	e0fff917 	ldw	r3,-28(fp)
   1ac98:	00bfff84 	movi	r2,-2
   1ac9c:	1884703a 	and	r2,r3,r2
   1aca0:	1001703a 	wrctl	status,r2
  
  return context;
   1aca4:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1aca8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1acac:	e0ffff03 	ldbu	r3,-4(fp)
   1acb0:	00800174 	movhi	r2,5
   1acb4:	10a81704 	addi	r2,r2,-24484
   1acb8:	18c7883a 	add	r3,r3,r3
   1acbc:	18c7883a 	add	r3,r3,r3
   1acc0:	10c5883a 	add	r2,r2,r3
   1acc4:	10000015 	stw	zero,0(r2)
   1acc8:	e0bff317 	ldw	r2,-52(fp)
   1accc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1acd0:	e0bffa17 	ldw	r2,-24(fp)
   1acd4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1acd8:	e0bff503 	ldbu	r2,-44(fp)
   1acdc:	00000506 	br	1acf4 <OSTaskCreate+0x1a8>
   1ace0:	e0bff317 	ldw	r2,-52(fp)
   1ace4:	e0bffb15 	stw	r2,-20(fp)
   1ace8:	e0bffb17 	ldw	r2,-20(fp)
   1acec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1acf0:	00800a04 	movi	r2,40
}
   1acf4:	e037883a 	mov	sp,fp
   1acf8:	dfc00117 	ldw	ra,4(sp)
   1acfc:	df000017 	ldw	fp,0(sp)
   1ad00:	dec00204 	addi	sp,sp,8
   1ad04:	f800283a 	ret

0001ad08 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1ad08:	deffec04 	addi	sp,sp,-80
   1ad0c:	dfc01315 	stw	ra,76(sp)
   1ad10:	df001215 	stw	fp,72(sp)
   1ad14:	df001204 	addi	fp,sp,72
   1ad18:	e13ffa15 	stw	r4,-24(fp)
   1ad1c:	e17ffb15 	stw	r5,-20(fp)
   1ad20:	e1bffc15 	stw	r6,-16(fp)
   1ad24:	3809883a 	mov	r4,r7
   1ad28:	e0c00217 	ldw	r3,8(fp)
   1ad2c:	e0800617 	ldw	r2,24(fp)
   1ad30:	e13ffd05 	stb	r4,-12(fp)
   1ad34:	e0fffe0d 	sth	r3,-8(fp)
   1ad38:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1ad3c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1ad40:	e0bffd03 	ldbu	r2,-12(fp)
   1ad44:	10800570 	cmpltui	r2,r2,21
   1ad48:	1000021e 	bne	r2,zero,1ad54 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1ad4c:	00800a84 	movi	r2,42
   1ad50:	00006306 	br	1aee0 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad54:	0005303a 	rdctl	r2,status
   1ad58:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad5c:	e0fff417 	ldw	r3,-48(fp)
   1ad60:	00bfff84 	movi	r2,-2
   1ad64:	1884703a 	and	r2,r3,r2
   1ad68:	1001703a 	wrctl	status,r2
  
  return context;
   1ad6c:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ad70:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1ad74:	008000b4 	movhi	r2,2
   1ad78:	10937404 	addi	r2,r2,19920
   1ad7c:	10800003 	ldbu	r2,0(r2)
   1ad80:	10803fcc 	andi	r2,r2,255
   1ad84:	10000626 	beq	r2,zero,1ada0 <OSTaskCreateExt+0x98>
   1ad88:	e0bff117 	ldw	r2,-60(fp)
   1ad8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad90:	e0bff517 	ldw	r2,-44(fp)
   1ad94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1ad98:	00800f04 	movi	r2,60
   1ad9c:	00005006 	br	1aee0 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1ada0:	e0fffd03 	ldbu	r3,-12(fp)
   1ada4:	00800174 	movhi	r2,5
   1ada8:	10a81704 	addi	r2,r2,-24484
   1adac:	18c7883a 	add	r3,r3,r3
   1adb0:	18c7883a 	add	r3,r3,r3
   1adb4:	10c5883a 	add	r2,r2,r3
   1adb8:	10800017 	ldw	r2,0(r2)
   1adbc:	1000431e 	bne	r2,zero,1aecc <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1adc0:	e0fffd03 	ldbu	r3,-12(fp)
   1adc4:	00800174 	movhi	r2,5
   1adc8:	10a81704 	addi	r2,r2,-24484
   1adcc:	18c7883a 	add	r3,r3,r3
   1add0:	18c7883a 	add	r3,r3,r3
   1add4:	10c5883a 	add	r2,r2,r3
   1add8:	00c00044 	movi	r3,1
   1addc:	10c00015 	stw	r3,0(r2)
   1ade0:	e0bff117 	ldw	r2,-60(fp)
   1ade4:	e0bff615 	stw	r2,-40(fp)
   1ade8:	e0bff617 	ldw	r2,-40(fp)
   1adec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1adf0:	e0bfff0b 	ldhu	r2,-4(fp)
   1adf4:	e1000317 	ldw	r4,12(fp)
   1adf8:	e1400417 	ldw	r5,16(fp)
   1adfc:	100d883a 	mov	r6,r2
   1ae00:	001be940 	call	1be94 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1ae04:	e0bfff0b 	ldhu	r2,-4(fp)
   1ae08:	e13ffa17 	ldw	r4,-24(fp)
   1ae0c:	e17ffb17 	ldw	r5,-20(fp)
   1ae10:	e1bffc17 	ldw	r6,-16(fp)
   1ae14:	100f883a 	mov	r7,r2
   1ae18:	001f8400 	call	1f840 <OSTaskStkInit>
   1ae1c:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1ae20:	e13ffd03 	ldbu	r4,-12(fp)
   1ae24:	e1fffe0b 	ldhu	r7,-8(fp)
   1ae28:	e0bfff0b 	ldhu	r2,-4(fp)
   1ae2c:	e0c00417 	ldw	r3,16(fp)
   1ae30:	d8c00015 	stw	r3,0(sp)
   1ae34:	e0c00517 	ldw	r3,20(fp)
   1ae38:	d8c00115 	stw	r3,4(sp)
   1ae3c:	d8800215 	stw	r2,8(sp)
   1ae40:	e17ff217 	ldw	r5,-56(fp)
   1ae44:	e1800317 	ldw	r6,12(fp)
   1ae48:	001596c0 	call	1596c <OS_TCBInit>
   1ae4c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1ae50:	e0bff303 	ldbu	r2,-52(fp)
   1ae54:	1000081e 	bne	r2,zero,1ae78 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1ae58:	008000b4 	movhi	r2,2
   1ae5c:	10936644 	addi	r2,r2,19865
   1ae60:	10800003 	ldbu	r2,0(r2)
   1ae64:	10803fcc 	andi	r2,r2,255
   1ae68:	10800058 	cmpnei	r2,r2,1
   1ae6c:	1000151e 	bne	r2,zero,1aec4 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   1ae70:	00155680 	call	15568 <OS_Sched>
   1ae74:	00001306 	br	1aec4 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae78:	0005303a 	rdctl	r2,status
   1ae7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae80:	e0fff717 	ldw	r3,-36(fp)
   1ae84:	00bfff84 	movi	r2,-2
   1ae88:	1884703a 	and	r2,r3,r2
   1ae8c:	1001703a 	wrctl	status,r2
  
  return context;
   1ae90:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1ae94:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1ae98:	e0fffd03 	ldbu	r3,-12(fp)
   1ae9c:	00800174 	movhi	r2,5
   1aea0:	10a81704 	addi	r2,r2,-24484
   1aea4:	18c7883a 	add	r3,r3,r3
   1aea8:	18c7883a 	add	r3,r3,r3
   1aeac:	10c5883a 	add	r2,r2,r3
   1aeb0:	10000015 	stw	zero,0(r2)
   1aeb4:	e0bff117 	ldw	r2,-60(fp)
   1aeb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aebc:	e0bff817 	ldw	r2,-32(fp)
   1aec0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1aec4:	e0bff303 	ldbu	r2,-52(fp)
   1aec8:	00000506 	br	1aee0 <OSTaskCreateExt+0x1d8>
   1aecc:	e0bff117 	ldw	r2,-60(fp)
   1aed0:	e0bff915 	stw	r2,-28(fp)
   1aed4:	e0bff917 	ldw	r2,-28(fp)
   1aed8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1aedc:	00800a04 	movi	r2,40
}
   1aee0:	e037883a 	mov	sp,fp
   1aee4:	dfc00117 	ldw	ra,4(sp)
   1aee8:	df000017 	ldw	fp,0(sp)
   1aeec:	dec00204 	addi	sp,sp,8
   1aef0:	f800283a 	ret

0001aef4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1aef4:	defff404 	addi	sp,sp,-48
   1aef8:	dfc00b15 	stw	ra,44(sp)
   1aefc:	df000a15 	stw	fp,40(sp)
   1af00:	df000a04 	addi	fp,sp,40
   1af04:	2005883a 	mov	r2,r4
   1af08:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1af0c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1af10:	008000b4 	movhi	r2,2
   1af14:	10937404 	addi	r2,r2,19920
   1af18:	10800003 	ldbu	r2,0(r2)
   1af1c:	10803fcc 	andi	r2,r2,255
   1af20:	10000226 	beq	r2,zero,1af2c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   1af24:	00801004 	movi	r2,64
   1af28:	0000e506 	br	1b2c0 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1af2c:	e0bfff03 	ldbu	r2,-4(fp)
   1af30:	10800518 	cmpnei	r2,r2,20
   1af34:	1000021e 	bne	r2,zero,1af40 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   1af38:	00800f84 	movi	r2,62
   1af3c:	0000e006 	br	1b2c0 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1af40:	e0bfff03 	ldbu	r2,-4(fp)
   1af44:	10800530 	cmpltui	r2,r2,20
   1af48:	1000051e 	bne	r2,zero,1af60 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   1af4c:	e0bfff03 	ldbu	r2,-4(fp)
   1af50:	10803fe0 	cmpeqi	r2,r2,255
   1af54:	1000021e 	bne	r2,zero,1af60 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1af58:	00800a84 	movi	r2,42
   1af5c:	0000d806 	br	1b2c0 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1af60:	0005303a 	rdctl	r2,status
   1af64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af68:	e0fff917 	ldw	r3,-28(fp)
   1af6c:	00bfff84 	movi	r2,-2
   1af70:	1884703a 	and	r2,r3,r2
   1af74:	1001703a 	wrctl	status,r2
  
  return context;
   1af78:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1af7c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1af80:	e0bfff03 	ldbu	r2,-4(fp)
   1af84:	10803fd8 	cmpnei	r2,r2,255
   1af88:	1000051e 	bne	r2,zero,1afa0 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1af8c:	008000b4 	movhi	r2,2
   1af90:	10937504 	addi	r2,r2,19924
   1af94:	10800017 	ldw	r2,0(r2)
   1af98:	10800c83 	ldbu	r2,50(r2)
   1af9c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1afa0:	e0ffff03 	ldbu	r3,-4(fp)
   1afa4:	00800174 	movhi	r2,5
   1afa8:	10a81704 	addi	r2,r2,-24484
   1afac:	18c7883a 	add	r3,r3,r3
   1afb0:	18c7883a 	add	r3,r3,r3
   1afb4:	10c5883a 	add	r2,r2,r3
   1afb8:	10800017 	ldw	r2,0(r2)
   1afbc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1afc0:	e0bff717 	ldw	r2,-36(fp)
   1afc4:	1000061e 	bne	r2,zero,1afe0 <OSTaskDel+0xec>
   1afc8:	e0bff617 	ldw	r2,-40(fp)
   1afcc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1afd0:	e0bffa17 	ldw	r2,-24(fp)
   1afd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1afd8:	008010c4 	movi	r2,67
   1afdc:	0000b806 	br	1b2c0 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1afe0:	e0bff717 	ldw	r2,-36(fp)
   1afe4:	10800058 	cmpnei	r2,r2,1
   1afe8:	1000061e 	bne	r2,zero,1b004 <OSTaskDel+0x110>
   1afec:	e0bff617 	ldw	r2,-40(fp)
   1aff0:	e0bffb15 	stw	r2,-20(fp)
   1aff4:	e0bffb17 	ldw	r2,-20(fp)
   1aff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1affc:	00800f44 	movi	r2,61
   1b000:	0000af06 	br	1b2c0 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1b004:	e0bff717 	ldw	r2,-36(fp)
   1b008:	10800d03 	ldbu	r2,52(r2)
   1b00c:	10c03fcc 	andi	r3,r2,255
   1b010:	e0bff717 	ldw	r2,-36(fp)
   1b014:	10800d03 	ldbu	r2,52(r2)
   1b018:	11003fcc 	andi	r4,r2,255
   1b01c:	008000b4 	movhi	r2,2
   1b020:	10937244 	addi	r2,r2,19913
   1b024:	1105883a 	add	r2,r2,r4
   1b028:	10800003 	ldbu	r2,0(r2)
   1b02c:	1009883a 	mov	r4,r2
   1b030:	e0bff717 	ldw	r2,-36(fp)
   1b034:	10800d43 	ldbu	r2,53(r2)
   1b038:	0084303a 	nor	r2,zero,r2
   1b03c:	2084703a 	and	r2,r4,r2
   1b040:	1009883a 	mov	r4,r2
   1b044:	008000b4 	movhi	r2,2
   1b048:	10937244 	addi	r2,r2,19913
   1b04c:	10c5883a 	add	r2,r2,r3
   1b050:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1b054:	e0bff717 	ldw	r2,-36(fp)
   1b058:	10800d03 	ldbu	r2,52(r2)
   1b05c:	10c03fcc 	andi	r3,r2,255
   1b060:	008000b4 	movhi	r2,2
   1b064:	10937244 	addi	r2,r2,19913
   1b068:	10c5883a 	add	r2,r2,r3
   1b06c:	10800003 	ldbu	r2,0(r2)
   1b070:	10803fcc 	andi	r2,r2,255
   1b074:	10000c1e 	bne	r2,zero,1b0a8 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1b078:	e0bff717 	ldw	r2,-36(fp)
   1b07c:	10800d83 	ldbu	r2,54(r2)
   1b080:	0084303a 	nor	r2,zero,r2
   1b084:	1007883a 	mov	r3,r2
   1b088:	008000b4 	movhi	r2,2
   1b08c:	10937204 	addi	r2,r2,19912
   1b090:	10800003 	ldbu	r2,0(r2)
   1b094:	1884703a 	and	r2,r3,r2
   1b098:	1007883a 	mov	r3,r2
   1b09c:	008000b4 	movhi	r2,2
   1b0a0:	10937204 	addi	r2,r2,19912
   1b0a4:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1b0a8:	e0bff717 	ldw	r2,-36(fp)
   1b0ac:	10800717 	ldw	r2,28(r2)
   1b0b0:	10000526 	beq	r2,zero,1b0c8 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1b0b4:	e0bff717 	ldw	r2,-36(fp)
   1b0b8:	10800717 	ldw	r2,28(r2)
   1b0bc:	e13ff717 	ldw	r4,-36(fp)
   1b0c0:	100b883a 	mov	r5,r2
   1b0c4:	0014f400 	call	14f40 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1b0c8:	e0bff717 	ldw	r2,-36(fp)
   1b0cc:	10800817 	ldw	r2,32(r2)
   1b0d0:	10000526 	beq	r2,zero,1b0e8 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1b0d4:	e0bff717 	ldw	r2,-36(fp)
   1b0d8:	10800817 	ldw	r2,32(r2)
   1b0dc:	e13ff717 	ldw	r4,-36(fp)
   1b0e0:	100b883a 	mov	r5,r2
   1b0e4:	0014ff40 	call	14ff4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1b0e8:	e0bff717 	ldw	r2,-36(fp)
   1b0ec:	10800a17 	ldw	r2,40(r2)
   1b0f0:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1b0f4:	e0bff817 	ldw	r2,-32(fp)
   1b0f8:	10000226 	beq	r2,zero,1b104 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1b0fc:	e13ff817 	ldw	r4,-32(fp)
   1b100:	00175480 	call	17548 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1b104:	e0bff717 	ldw	r2,-36(fp)
   1b108:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1b10c:	e0bff717 	ldw	r2,-36(fp)
   1b110:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1b114:	e0bff717 	ldw	r2,-36(fp)
   1b118:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1b11c:	008000b4 	movhi	r2,2
   1b120:	10936604 	addi	r2,r2,19864
   1b124:	10800003 	ldbu	r2,0(r2)
   1b128:	10803fcc 	andi	r2,r2,255
   1b12c:	10803fe0 	cmpeqi	r2,r2,255
   1b130:	1000081e 	bne	r2,zero,1b154 <OSTaskDel+0x260>
        OSLockNesting++;
   1b134:	008000b4 	movhi	r2,2
   1b138:	10936604 	addi	r2,r2,19864
   1b13c:	10800003 	ldbu	r2,0(r2)
   1b140:	10800044 	addi	r2,r2,1
   1b144:	1007883a 	mov	r3,r2
   1b148:	008000b4 	movhi	r2,2
   1b14c:	10936604 	addi	r2,r2,19864
   1b150:	10c00005 	stb	r3,0(r2)
   1b154:	e0bff617 	ldw	r2,-40(fp)
   1b158:	e0bffc15 	stw	r2,-16(fp)
   1b15c:	e0bffc17 	ldw	r2,-16(fp)
   1b160:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1b164:	0014b340 	call	14b34 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b168:	0005303a 	rdctl	r2,status
   1b16c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b170:	e0fffd17 	ldw	r3,-12(fp)
   1b174:	00bfff84 	movi	r2,-2
   1b178:	1884703a 	and	r2,r3,r2
   1b17c:	1001703a 	wrctl	status,r2
  
  return context;
   1b180:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1b184:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1b188:	008000b4 	movhi	r2,2
   1b18c:	10936604 	addi	r2,r2,19864
   1b190:	10800003 	ldbu	r2,0(r2)
   1b194:	10803fcc 	andi	r2,r2,255
   1b198:	10000826 	beq	r2,zero,1b1bc <OSTaskDel+0x2c8>
        OSLockNesting--;
   1b19c:	008000b4 	movhi	r2,2
   1b1a0:	10936604 	addi	r2,r2,19864
   1b1a4:	10800003 	ldbu	r2,0(r2)
   1b1a8:	10bfffc4 	addi	r2,r2,-1
   1b1ac:	1007883a 	mov	r3,r2
   1b1b0:	008000b4 	movhi	r2,2
   1b1b4:	10936604 	addi	r2,r2,19864
   1b1b8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1b1bc:	e13ff717 	ldw	r4,-36(fp)
   1b1c0:	001f9bc0 	call	1f9bc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1b1c4:	008000b4 	movhi	r2,2
   1b1c8:	10936e44 	addi	r2,r2,19897
   1b1cc:	10800003 	ldbu	r2,0(r2)
   1b1d0:	10bfffc4 	addi	r2,r2,-1
   1b1d4:	1007883a 	mov	r3,r2
   1b1d8:	008000b4 	movhi	r2,2
   1b1dc:	10936e44 	addi	r2,r2,19897
   1b1e0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1b1e4:	e0ffff03 	ldbu	r3,-4(fp)
   1b1e8:	00800174 	movhi	r2,5
   1b1ec:	10a81704 	addi	r2,r2,-24484
   1b1f0:	18c7883a 	add	r3,r3,r3
   1b1f4:	18c7883a 	add	r3,r3,r3
   1b1f8:	10c5883a 	add	r2,r2,r3
   1b1fc:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1b200:	e0bff717 	ldw	r2,-36(fp)
   1b204:	10800617 	ldw	r2,24(r2)
   1b208:	1000091e 	bne	r2,zero,1b230 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1b20c:	e0bff717 	ldw	r2,-36(fp)
   1b210:	10800517 	ldw	r2,20(r2)
   1b214:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1b218:	e0bff717 	ldw	r2,-36(fp)
   1b21c:	10c00517 	ldw	r3,20(r2)
   1b220:	008000b4 	movhi	r2,2
   1b224:	10936904 	addi	r2,r2,19876
   1b228:	10c00015 	stw	r3,0(r2)
   1b22c:	00000a06 	br	1b258 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1b230:	e0bff717 	ldw	r2,-36(fp)
   1b234:	10800617 	ldw	r2,24(r2)
   1b238:	e0fff717 	ldw	r3,-36(fp)
   1b23c:	18c00517 	ldw	r3,20(r3)
   1b240:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1b244:	e0bff717 	ldw	r2,-36(fp)
   1b248:	10800517 	ldw	r2,20(r2)
   1b24c:	e0fff717 	ldw	r3,-36(fp)
   1b250:	18c00617 	ldw	r3,24(r3)
   1b254:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1b258:	008000b4 	movhi	r2,2
   1b25c:	10936d04 	addi	r2,r2,19892
   1b260:	10c00017 	ldw	r3,0(r2)
   1b264:	e0bff717 	ldw	r2,-36(fp)
   1b268:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1b26c:	008000b4 	movhi	r2,2
   1b270:	10936d04 	addi	r2,r2,19892
   1b274:	e0fff717 	ldw	r3,-36(fp)
   1b278:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1b27c:	e0bff717 	ldw	r2,-36(fp)
   1b280:	00c00fc4 	movi	r3,63
   1b284:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1b288:	e0bff717 	ldw	r2,-36(fp)
   1b28c:	10001345 	stb	zero,77(r2)
   1b290:	e0bff617 	ldw	r2,-40(fp)
   1b294:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b298:	e0bffe17 	ldw	r2,-8(fp)
   1b29c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1b2a0:	008000b4 	movhi	r2,2
   1b2a4:	10936644 	addi	r2,r2,19865
   1b2a8:	10800003 	ldbu	r2,0(r2)
   1b2ac:	10803fcc 	andi	r2,r2,255
   1b2b0:	10800058 	cmpnei	r2,r2,1
   1b2b4:	1000011e 	bne	r2,zero,1b2bc <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   1b2b8:	00155680 	call	15568 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1b2bc:	0005883a 	mov	r2,zero
}
   1b2c0:	e037883a 	mov	sp,fp
   1b2c4:	dfc00117 	ldw	ra,4(sp)
   1b2c8:	df000017 	ldw	fp,0(sp)
   1b2cc:	dec00204 	addi	sp,sp,8
   1b2d0:	f800283a 	ret

0001b2d4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1b2d4:	defff504 	addi	sp,sp,-44
   1b2d8:	df000a15 	stw	fp,40(sp)
   1b2dc:	df000a04 	addi	fp,sp,40
   1b2e0:	2005883a 	mov	r2,r4
   1b2e4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b2e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1b2ec:	e0bfff03 	ldbu	r2,-4(fp)
   1b2f0:	10800518 	cmpnei	r2,r2,20
   1b2f4:	1000021e 	bne	r2,zero,1b300 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1b2f8:	00800f84 	movi	r2,62
   1b2fc:	00004706 	br	1b41c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1b300:	e0bfff03 	ldbu	r2,-4(fp)
   1b304:	10800530 	cmpltui	r2,r2,20
   1b308:	1000051e 	bne	r2,zero,1b320 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1b30c:	e0bfff03 	ldbu	r2,-4(fp)
   1b310:	10803fe0 	cmpeqi	r2,r2,255
   1b314:	1000021e 	bne	r2,zero,1b320 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1b318:	00800a84 	movi	r2,42
   1b31c:	00003f06 	br	1b41c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1b320:	e0bfff03 	ldbu	r2,-4(fp)
   1b324:	10803fd8 	cmpnei	r2,r2,255
   1b328:	1000131e 	bne	r2,zero,1b378 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b32c:	0005303a 	rdctl	r2,status
   1b330:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b334:	e0fff917 	ldw	r3,-28(fp)
   1b338:	00bfff84 	movi	r2,-2
   1b33c:	1884703a 	and	r2,r3,r2
   1b340:	1001703a 	wrctl	status,r2
  
  return context;
   1b344:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1b348:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1b34c:	008000b4 	movhi	r2,2
   1b350:	10937504 	addi	r2,r2,19924
   1b354:	10800017 	ldw	r2,0(r2)
   1b358:	10800dc3 	ldbu	r2,55(r2)
   1b35c:	e0bff705 	stb	r2,-36(fp)
   1b360:	e0bff617 	ldw	r2,-40(fp)
   1b364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b368:	e0bffa17 	ldw	r2,-24(fp)
   1b36c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1b370:	e0bff703 	ldbu	r2,-36(fp)
   1b374:	00002906 	br	1b41c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b378:	0005303a 	rdctl	r2,status
   1b37c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b380:	e0fffb17 	ldw	r3,-20(fp)
   1b384:	00bfff84 	movi	r2,-2
   1b388:	1884703a 	and	r2,r3,r2
   1b38c:	1001703a 	wrctl	status,r2
  
  return context;
   1b390:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1b394:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1b398:	e0ffff03 	ldbu	r3,-4(fp)
   1b39c:	00800174 	movhi	r2,5
   1b3a0:	10a81704 	addi	r2,r2,-24484
   1b3a4:	18c7883a 	add	r3,r3,r3
   1b3a8:	18c7883a 	add	r3,r3,r3
   1b3ac:	10c5883a 	add	r2,r2,r3
   1b3b0:	10800017 	ldw	r2,0(r2)
   1b3b4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1b3b8:	e0bff817 	ldw	r2,-32(fp)
   1b3bc:	1000061e 	bne	r2,zero,1b3d8 <OSTaskDelReq+0x104>
   1b3c0:	e0bff617 	ldw	r2,-40(fp)
   1b3c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3c8:	e0bffc17 	ldw	r2,-16(fp)
   1b3cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1b3d0:	008010c4 	movi	r2,67
   1b3d4:	00001106 	br	1b41c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1b3d8:	e0bff817 	ldw	r2,-32(fp)
   1b3dc:	10800058 	cmpnei	r2,r2,1
   1b3e0:	1000061e 	bne	r2,zero,1b3fc <OSTaskDelReq+0x128>
   1b3e4:	e0bff617 	ldw	r2,-40(fp)
   1b3e8:	e0bffd15 	stw	r2,-12(fp)
   1b3ec:	e0bffd17 	ldw	r2,-12(fp)
   1b3f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1b3f4:	00800f44 	movi	r2,61
   1b3f8:	00000806 	br	1b41c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1b3fc:	e0bff817 	ldw	r2,-32(fp)
   1b400:	00c00fc4 	movi	r3,63
   1b404:	10c00dc5 	stb	r3,55(r2)
   1b408:	e0bff617 	ldw	r2,-40(fp)
   1b40c:	e0bffe15 	stw	r2,-8(fp)
   1b410:	e0bffe17 	ldw	r2,-8(fp)
   1b414:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1b418:	0005883a 	mov	r2,zero
}
   1b41c:	e037883a 	mov	sp,fp
   1b420:	df000017 	ldw	fp,0(sp)
   1b424:	dec00104 	addi	sp,sp,4
   1b428:	f800283a 	ret

0001b42c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1b42c:	defff404 	addi	sp,sp,-48
   1b430:	dfc00b15 	stw	ra,44(sp)
   1b434:	df000a15 	stw	fp,40(sp)
   1b438:	df000a04 	addi	fp,sp,40
   1b43c:	2005883a 	mov	r2,r4
   1b440:	e17ffe15 	stw	r5,-8(fp)
   1b444:	e1bfff15 	stw	r6,-4(fp)
   1b448:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1b44c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1b450:	e0bfff17 	ldw	r2,-4(fp)
   1b454:	1000021e 	bne	r2,zero,1b460 <OSTaskNameGet+0x34>
        return (0);
   1b458:	0005883a 	mov	r2,zero
   1b45c:	00005806 	br	1b5c0 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1b460:	e0bffd03 	ldbu	r2,-12(fp)
   1b464:	10800570 	cmpltui	r2,r2,21
   1b468:	1000081e 	bne	r2,zero,1b48c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1b46c:	e0bffd03 	ldbu	r2,-12(fp)
   1b470:	10803fe0 	cmpeqi	r2,r2,255
   1b474:	1000051e 	bne	r2,zero,1b48c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1b478:	e0bfff17 	ldw	r2,-4(fp)
   1b47c:	00c00a84 	movi	r3,42
   1b480:	10c00005 	stb	r3,0(r2)
            return (0);
   1b484:	0005883a 	mov	r2,zero
   1b488:	00004d06 	br	1b5c0 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1b48c:	e0bffe17 	ldw	r2,-8(fp)
   1b490:	1000051e 	bne	r2,zero,1b4a8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1b494:	e0bfff17 	ldw	r2,-4(fp)
   1b498:	00c00304 	movi	r3,12
   1b49c:	10c00005 	stb	r3,0(r2)
        return (0);
   1b4a0:	0005883a 	mov	r2,zero
   1b4a4:	00004606 	br	1b5c0 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1b4a8:	008000b4 	movhi	r2,2
   1b4ac:	10937404 	addi	r2,r2,19920
   1b4b0:	10800003 	ldbu	r2,0(r2)
   1b4b4:	10803fcc 	andi	r2,r2,255
   1b4b8:	10000526 	beq	r2,zero,1b4d0 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   1b4bc:	e0bfff17 	ldw	r2,-4(fp)
   1b4c0:	00c00444 	movi	r3,17
   1b4c4:	10c00005 	stb	r3,0(r2)
        return (0);
   1b4c8:	0005883a 	mov	r2,zero
   1b4cc:	00003c06 	br	1b5c0 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b4d0:	0005303a 	rdctl	r2,status
   1b4d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b4d8:	e0fff917 	ldw	r3,-28(fp)
   1b4dc:	00bfff84 	movi	r2,-2
   1b4e0:	1884703a 	and	r2,r3,r2
   1b4e4:	1001703a 	wrctl	status,r2
  
  return context;
   1b4e8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1b4ec:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1b4f0:	e0bffd03 	ldbu	r2,-12(fp)
   1b4f4:	10803fd8 	cmpnei	r2,r2,255
   1b4f8:	1000051e 	bne	r2,zero,1b510 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   1b4fc:	008000b4 	movhi	r2,2
   1b500:	10937504 	addi	r2,r2,19924
   1b504:	10800017 	ldw	r2,0(r2)
   1b508:	10800c83 	ldbu	r2,50(r2)
   1b50c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b510:	e0fffd03 	ldbu	r3,-12(fp)
   1b514:	00800174 	movhi	r2,5
   1b518:	10a81704 	addi	r2,r2,-24484
   1b51c:	18c7883a 	add	r3,r3,r3
   1b520:	18c7883a 	add	r3,r3,r3
   1b524:	10c5883a 	add	r2,r2,r3
   1b528:	10800017 	ldw	r2,0(r2)
   1b52c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1b530:	e0bff717 	ldw	r2,-36(fp)
   1b534:	1000091e 	bne	r2,zero,1b55c <OSTaskNameGet+0x130>
   1b538:	e0bff617 	ldw	r2,-40(fp)
   1b53c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b540:	e0bffa17 	ldw	r2,-24(fp)
   1b544:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b548:	e0bfff17 	ldw	r2,-4(fp)
   1b54c:	00c010c4 	movi	r3,67
   1b550:	10c00005 	stb	r3,0(r2)
        return (0);
   1b554:	0005883a 	mov	r2,zero
   1b558:	00001906 	br	1b5c0 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1b55c:	e0bff717 	ldw	r2,-36(fp)
   1b560:	10800058 	cmpnei	r2,r2,1
   1b564:	1000091e 	bne	r2,zero,1b58c <OSTaskNameGet+0x160>
   1b568:	e0bff617 	ldw	r2,-40(fp)
   1b56c:	e0bffb15 	stw	r2,-20(fp)
   1b570:	e0bffb17 	ldw	r2,-20(fp)
   1b574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b578:	e0bfff17 	ldw	r2,-4(fp)
   1b57c:	00c010c4 	movi	r3,67
   1b580:	10c00005 	stb	r3,0(r2)
        return (0);
   1b584:	0005883a 	mov	r2,zero
   1b588:	00000d06 	br	1b5c0 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1b58c:	e0bff717 	ldw	r2,-36(fp)
   1b590:	10801304 	addi	r2,r2,76
   1b594:	e13ffe17 	ldw	r4,-8(fp)
   1b598:	100b883a 	mov	r5,r2
   1b59c:	00156a40 	call	156a4 <OS_StrCopy>
   1b5a0:	e0bff805 	stb	r2,-32(fp)
   1b5a4:	e0bff617 	ldw	r2,-40(fp)
   1b5a8:	e0bffc15 	stw	r2,-16(fp)
   1b5ac:	e0bffc17 	ldw	r2,-16(fp)
   1b5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b5b4:	e0bfff17 	ldw	r2,-4(fp)
   1b5b8:	10000005 	stb	zero,0(r2)
    return (len);
   1b5bc:	e0bff803 	ldbu	r2,-32(fp)
}
   1b5c0:	e037883a 	mov	sp,fp
   1b5c4:	dfc00117 	ldw	ra,4(sp)
   1b5c8:	df000017 	ldw	fp,0(sp)
   1b5cc:	dec00204 	addi	sp,sp,8
   1b5d0:	f800283a 	ret

0001b5d4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1b5d4:	defff304 	addi	sp,sp,-52
   1b5d8:	dfc00c15 	stw	ra,48(sp)
   1b5dc:	df000b15 	stw	fp,44(sp)
   1b5e0:	df000b04 	addi	fp,sp,44
   1b5e4:	2005883a 	mov	r2,r4
   1b5e8:	e17ffe15 	stw	r5,-8(fp)
   1b5ec:	e1bfff15 	stw	r6,-4(fp)
   1b5f0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1b5f4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1b5f8:	e0bfff17 	ldw	r2,-4(fp)
   1b5fc:	1000011e 	bne	r2,zero,1b604 <OSTaskNameSet+0x30>
        return;
   1b600:	00005f06 	br	1b780 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1b604:	e0bffd03 	ldbu	r2,-12(fp)
   1b608:	10800570 	cmpltui	r2,r2,21
   1b60c:	1000071e 	bne	r2,zero,1b62c <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1b610:	e0bffd03 	ldbu	r2,-12(fp)
   1b614:	10803fe0 	cmpeqi	r2,r2,255
   1b618:	1000041e 	bne	r2,zero,1b62c <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1b61c:	e0bfff17 	ldw	r2,-4(fp)
   1b620:	00c00a84 	movi	r3,42
   1b624:	10c00005 	stb	r3,0(r2)
            return;
   1b628:	00005506 	br	1b780 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1b62c:	e0bffe17 	ldw	r2,-8(fp)
   1b630:	1000041e 	bne	r2,zero,1b644 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1b634:	e0bfff17 	ldw	r2,-4(fp)
   1b638:	00c00304 	movi	r3,12
   1b63c:	10c00005 	stb	r3,0(r2)
        return;
   1b640:	00004f06 	br	1b780 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1b644:	008000b4 	movhi	r2,2
   1b648:	10937404 	addi	r2,r2,19920
   1b64c:	10800003 	ldbu	r2,0(r2)
   1b650:	10803fcc 	andi	r2,r2,255
   1b654:	10000426 	beq	r2,zero,1b668 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1b658:	e0bfff17 	ldw	r2,-4(fp)
   1b65c:	00c00484 	movi	r3,18
   1b660:	10c00005 	stb	r3,0(r2)
        return;
   1b664:	00004606 	br	1b780 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b668:	0005303a 	rdctl	r2,status
   1b66c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b670:	e0fff817 	ldw	r3,-32(fp)
   1b674:	00bfff84 	movi	r2,-2
   1b678:	1884703a 	and	r2,r3,r2
   1b67c:	1001703a 	wrctl	status,r2
  
  return context;
   1b680:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1b684:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1b688:	e0bffd03 	ldbu	r2,-12(fp)
   1b68c:	10803fd8 	cmpnei	r2,r2,255
   1b690:	1000051e 	bne	r2,zero,1b6a8 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1b694:	008000b4 	movhi	r2,2
   1b698:	10937504 	addi	r2,r2,19924
   1b69c:	10800017 	ldw	r2,0(r2)
   1b6a0:	10800c83 	ldbu	r2,50(r2)
   1b6a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1b6a8:	e0fffd03 	ldbu	r3,-12(fp)
   1b6ac:	00800174 	movhi	r2,5
   1b6b0:	10a81704 	addi	r2,r2,-24484
   1b6b4:	18c7883a 	add	r3,r3,r3
   1b6b8:	18c7883a 	add	r3,r3,r3
   1b6bc:	10c5883a 	add	r2,r2,r3
   1b6c0:	10800017 	ldw	r2,0(r2)
   1b6c4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1b6c8:	e0bff617 	ldw	r2,-40(fp)
   1b6cc:	1000081e 	bne	r2,zero,1b6f0 <OSTaskNameSet+0x11c>
   1b6d0:	e0bff517 	ldw	r2,-44(fp)
   1b6d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6d8:	e0bff917 	ldw	r2,-28(fp)
   1b6dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b6e0:	e0bfff17 	ldw	r2,-4(fp)
   1b6e4:	00c010c4 	movi	r3,67
   1b6e8:	10c00005 	stb	r3,0(r2)
        return;
   1b6ec:	00002406 	br	1b780 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1b6f0:	e0bff617 	ldw	r2,-40(fp)
   1b6f4:	10800058 	cmpnei	r2,r2,1
   1b6f8:	1000081e 	bne	r2,zero,1b71c <OSTaskNameSet+0x148>
   1b6fc:	e0bff517 	ldw	r2,-44(fp)
   1b700:	e0bffa15 	stw	r2,-24(fp)
   1b704:	e0bffa17 	ldw	r2,-24(fp)
   1b708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1b70c:	e0bfff17 	ldw	r2,-4(fp)
   1b710:	00c010c4 	movi	r3,67
   1b714:	10c00005 	stb	r3,0(r2)
        return;
   1b718:	00001906 	br	1b780 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1b71c:	e13ffe17 	ldw	r4,-8(fp)
   1b720:	00157180 	call	15718 <OS_StrLen>
   1b724:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1b728:	e0bff703 	ldbu	r2,-36(fp)
   1b72c:	10800830 	cmpltui	r2,r2,32
   1b730:	1000081e 	bne	r2,zero,1b754 <OSTaskNameSet+0x180>
   1b734:	e0bff517 	ldw	r2,-44(fp)
   1b738:	e0bffb15 	stw	r2,-20(fp)
   1b73c:	e0bffb17 	ldw	r2,-20(fp)
   1b740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1b744:	e0bfff17 	ldw	r2,-4(fp)
   1b748:	00c01044 	movi	r3,65
   1b74c:	10c00005 	stb	r3,0(r2)
        return;
   1b750:	00000b06 	br	1b780 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1b754:	e0bff617 	ldw	r2,-40(fp)
   1b758:	10801304 	addi	r2,r2,76
   1b75c:	1009883a 	mov	r4,r2
   1b760:	e17ffe17 	ldw	r5,-8(fp)
   1b764:	00156a40 	call	156a4 <OS_StrCopy>
   1b768:	e0bff517 	ldw	r2,-44(fp)
   1b76c:	e0bffc15 	stw	r2,-16(fp)
   1b770:	e0bffc17 	ldw	r2,-16(fp)
   1b774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b778:	e0bfff17 	ldw	r2,-4(fp)
   1b77c:	10000005 	stb	zero,0(r2)
}
   1b780:	e037883a 	mov	sp,fp
   1b784:	dfc00117 	ldw	ra,4(sp)
   1b788:	df000017 	ldw	fp,0(sp)
   1b78c:	dec00204 	addi	sp,sp,8
   1b790:	f800283a 	ret

0001b794 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1b794:	defff404 	addi	sp,sp,-48
   1b798:	dfc00b15 	stw	ra,44(sp)
   1b79c:	df000a15 	stw	fp,40(sp)
   1b7a0:	df000a04 	addi	fp,sp,40
   1b7a4:	2005883a 	mov	r2,r4
   1b7a8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1b7ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1b7b0:	e0bfff03 	ldbu	r2,-4(fp)
   1b7b4:	10800530 	cmpltui	r2,r2,20
   1b7b8:	1000021e 	bne	r2,zero,1b7c4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b7bc:	00800a84 	movi	r2,42
   1b7c0:	00006d06 	br	1b978 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b7c4:	0005303a 	rdctl	r2,status
   1b7c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b7cc:	e0fff817 	ldw	r3,-32(fp)
   1b7d0:	00bfff84 	movi	r2,-2
   1b7d4:	1884703a 	and	r2,r3,r2
   1b7d8:	1001703a 	wrctl	status,r2
  
  return context;
   1b7dc:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b7e0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1b7e4:	e0ffff03 	ldbu	r3,-4(fp)
   1b7e8:	00800174 	movhi	r2,5
   1b7ec:	10a81704 	addi	r2,r2,-24484
   1b7f0:	18c7883a 	add	r3,r3,r3
   1b7f4:	18c7883a 	add	r3,r3,r3
   1b7f8:	10c5883a 	add	r2,r2,r3
   1b7fc:	10800017 	ldw	r2,0(r2)
   1b800:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1b804:	e0bff717 	ldw	r2,-36(fp)
   1b808:	1000061e 	bne	r2,zero,1b824 <OSTaskResume+0x90>
   1b80c:	e0bff617 	ldw	r2,-40(fp)
   1b810:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b814:	e0bff917 	ldw	r2,-28(fp)
   1b818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1b81c:	00801184 	movi	r2,70
   1b820:	00005506 	br	1b978 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1b824:	e0bff717 	ldw	r2,-36(fp)
   1b828:	10800058 	cmpnei	r2,r2,1
   1b82c:	1000061e 	bne	r2,zero,1b848 <OSTaskResume+0xb4>
   1b830:	e0bff617 	ldw	r2,-40(fp)
   1b834:	e0bffa15 	stw	r2,-24(fp)
   1b838:	e0bffa17 	ldw	r2,-24(fp)
   1b83c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1b840:	008010c4 	movi	r2,67
   1b844:	00004c06 	br	1b978 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1b848:	e0bff717 	ldw	r2,-36(fp)
   1b84c:	10800c03 	ldbu	r2,48(r2)
   1b850:	10803fcc 	andi	r2,r2,255
   1b854:	1080020c 	andi	r2,r2,8
   1b858:	10004226 	beq	r2,zero,1b964 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1b85c:	e0bff717 	ldw	r2,-36(fp)
   1b860:	10c00c03 	ldbu	r3,48(r2)
   1b864:	00bffdc4 	movi	r2,-9
   1b868:	1884703a 	and	r2,r3,r2
   1b86c:	1007883a 	mov	r3,r2
   1b870:	e0bff717 	ldw	r2,-36(fp)
   1b874:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1b878:	e0bff717 	ldw	r2,-36(fp)
   1b87c:	10800c03 	ldbu	r2,48(r2)
   1b880:	10803fcc 	andi	r2,r2,255
   1b884:	1000311e 	bne	r2,zero,1b94c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1b888:	e0bff717 	ldw	r2,-36(fp)
   1b88c:	10800b8b 	ldhu	r2,46(r2)
   1b890:	10bfffcc 	andi	r2,r2,65535
   1b894:	1000281e 	bne	r2,zero,1b938 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1b898:	e0bff717 	ldw	r2,-36(fp)
   1b89c:	10c00d83 	ldbu	r3,54(r2)
   1b8a0:	008000b4 	movhi	r2,2
   1b8a4:	10937204 	addi	r2,r2,19912
   1b8a8:	10800003 	ldbu	r2,0(r2)
   1b8ac:	1884b03a 	or	r2,r3,r2
   1b8b0:	1007883a 	mov	r3,r2
   1b8b4:	008000b4 	movhi	r2,2
   1b8b8:	10937204 	addi	r2,r2,19912
   1b8bc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b8c0:	e0bff717 	ldw	r2,-36(fp)
   1b8c4:	10800d03 	ldbu	r2,52(r2)
   1b8c8:	10c03fcc 	andi	r3,r2,255
   1b8cc:	e0bff717 	ldw	r2,-36(fp)
   1b8d0:	10800d03 	ldbu	r2,52(r2)
   1b8d4:	11003fcc 	andi	r4,r2,255
   1b8d8:	008000b4 	movhi	r2,2
   1b8dc:	10937244 	addi	r2,r2,19913
   1b8e0:	1105883a 	add	r2,r2,r4
   1b8e4:	11000003 	ldbu	r4,0(r2)
   1b8e8:	e0bff717 	ldw	r2,-36(fp)
   1b8ec:	10800d43 	ldbu	r2,53(r2)
   1b8f0:	2084b03a 	or	r2,r4,r2
   1b8f4:	1009883a 	mov	r4,r2
   1b8f8:	008000b4 	movhi	r2,2
   1b8fc:	10937244 	addi	r2,r2,19913
   1b900:	10c5883a 	add	r2,r2,r3
   1b904:	11000005 	stb	r4,0(r2)
   1b908:	e0bff617 	ldw	r2,-40(fp)
   1b90c:	e0bffb15 	stw	r2,-20(fp)
   1b910:	e0bffb17 	ldw	r2,-20(fp)
   1b914:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1b918:	008000b4 	movhi	r2,2
   1b91c:	10936644 	addi	r2,r2,19865
   1b920:	10800003 	ldbu	r2,0(r2)
   1b924:	10803fcc 	andi	r2,r2,255
   1b928:	10800058 	cmpnei	r2,r2,1
   1b92c:	10000b1e 	bne	r2,zero,1b95c <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   1b930:	00155680 	call	15568 <OS_Sched>
   1b934:	00000906 	br	1b95c <OSTaskResume+0x1c8>
   1b938:	e0bff617 	ldw	r2,-40(fp)
   1b93c:	e0bffc15 	stw	r2,-16(fp)
   1b940:	e0bffc17 	ldw	r2,-16(fp)
   1b944:	1001703a 	wrctl	status,r2
   1b948:	00000406 	br	1b95c <OSTaskResume+0x1c8>
   1b94c:	e0bff617 	ldw	r2,-40(fp)
   1b950:	e0bffd15 	stw	r2,-12(fp)
   1b954:	e0bffd17 	ldw	r2,-12(fp)
   1b958:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1b95c:	0005883a 	mov	r2,zero
   1b960:	00000506 	br	1b978 <OSTaskResume+0x1e4>
   1b964:	e0bff617 	ldw	r2,-40(fp)
   1b968:	e0bffe15 	stw	r2,-8(fp)
   1b96c:	e0bffe17 	ldw	r2,-8(fp)
   1b970:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1b974:	00801104 	movi	r2,68
}
   1b978:	e037883a 	mov	sp,fp
   1b97c:	dfc00117 	ldw	ra,4(sp)
   1b980:	df000017 	ldw	fp,0(sp)
   1b984:	dec00204 	addi	sp,sp,8
   1b988:	f800283a 	ret

0001b98c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1b98c:	defff304 	addi	sp,sp,-52
   1b990:	df000c15 	stw	fp,48(sp)
   1b994:	df000c04 	addi	fp,sp,48
   1b998:	2005883a 	mov	r2,r4
   1b99c:	e17fff15 	stw	r5,-4(fp)
   1b9a0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1b9a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1b9a8:	e0bffe03 	ldbu	r2,-8(fp)
   1b9ac:	10800570 	cmpltui	r2,r2,21
   1b9b0:	1000051e 	bne	r2,zero,1b9c8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1b9b4:	e0bffe03 	ldbu	r2,-8(fp)
   1b9b8:	10803fe0 	cmpeqi	r2,r2,255
   1b9bc:	1000021e 	bne	r2,zero,1b9c8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1b9c0:	00800a84 	movi	r2,42
   1b9c4:	00005f06 	br	1bb44 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1b9c8:	e0bfff17 	ldw	r2,-4(fp)
   1b9cc:	1000021e 	bne	r2,zero,1b9d8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1b9d0:	00800244 	movi	r2,9
   1b9d4:	00005b06 	br	1bb44 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1b9d8:	e0bfff17 	ldw	r2,-4(fp)
   1b9dc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1b9e0:	e0bfff17 	ldw	r2,-4(fp)
   1b9e4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b9e8:	0005303a 	rdctl	r2,status
   1b9ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b9f0:	e0fff917 	ldw	r3,-28(fp)
   1b9f4:	00bfff84 	movi	r2,-2
   1b9f8:	1884703a 	and	r2,r3,r2
   1b9fc:	1001703a 	wrctl	status,r2
  
  return context;
   1ba00:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1ba04:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1ba08:	e0bffe03 	ldbu	r2,-8(fp)
   1ba0c:	10803fd8 	cmpnei	r2,r2,255
   1ba10:	1000051e 	bne	r2,zero,1ba28 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1ba14:	008000b4 	movhi	r2,2
   1ba18:	10937504 	addi	r2,r2,19924
   1ba1c:	10800017 	ldw	r2,0(r2)
   1ba20:	10800c83 	ldbu	r2,50(r2)
   1ba24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ba28:	e0fffe03 	ldbu	r3,-8(fp)
   1ba2c:	00800174 	movhi	r2,5
   1ba30:	10a81704 	addi	r2,r2,-24484
   1ba34:	18c7883a 	add	r3,r3,r3
   1ba38:	18c7883a 	add	r3,r3,r3
   1ba3c:	10c5883a 	add	r2,r2,r3
   1ba40:	10800017 	ldw	r2,0(r2)
   1ba44:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1ba48:	e0bff717 	ldw	r2,-36(fp)
   1ba4c:	1000061e 	bne	r2,zero,1ba68 <OSTaskStkChk+0xdc>
   1ba50:	e0bff617 	ldw	r2,-40(fp)
   1ba54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba58:	e0bffa17 	ldw	r2,-24(fp)
   1ba5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ba60:	008010c4 	movi	r2,67
   1ba64:	00003706 	br	1bb44 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1ba68:	e0bff717 	ldw	r2,-36(fp)
   1ba6c:	10800058 	cmpnei	r2,r2,1
   1ba70:	1000061e 	bne	r2,zero,1ba8c <OSTaskStkChk+0x100>
   1ba74:	e0bff617 	ldw	r2,-40(fp)
   1ba78:	e0bffb15 	stw	r2,-20(fp)
   1ba7c:	e0bffb17 	ldw	r2,-20(fp)
   1ba80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ba84:	008010c4 	movi	r2,67
   1ba88:	00002e06 	br	1bb44 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1ba8c:	e0bff717 	ldw	r2,-36(fp)
   1ba90:	1080040b 	ldhu	r2,16(r2)
   1ba94:	10bfffcc 	andi	r2,r2,65535
   1ba98:	1080004c 	andi	r2,r2,1
   1ba9c:	1000061e 	bne	r2,zero,1bab8 <OSTaskStkChk+0x12c>
   1baa0:	e0bff617 	ldw	r2,-40(fp)
   1baa4:	e0bffc15 	stw	r2,-16(fp)
   1baa8:	e0bffc17 	ldw	r2,-16(fp)
   1baac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1bab0:	00801144 	movi	r2,69
   1bab4:	00002306 	br	1bb44 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1bab8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1babc:	e0bff717 	ldw	r2,-36(fp)
   1bac0:	10800317 	ldw	r2,12(r2)
   1bac4:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1bac8:	e0bff717 	ldw	r2,-36(fp)
   1bacc:	10800217 	ldw	r2,8(r2)
   1bad0:	e0bff415 	stw	r2,-48(fp)
   1bad4:	e0bff617 	ldw	r2,-40(fp)
   1bad8:	e0bffd15 	stw	r2,-12(fp)
   1badc:	e0bffd17 	ldw	r2,-12(fp)
   1bae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1bae4:	00000306 	br	1baf4 <OSTaskStkChk+0x168>
        nfree++;
   1bae8:	e0bff517 	ldw	r2,-44(fp)
   1baec:	10800044 	addi	r2,r2,1
   1baf0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1baf4:	e0bff417 	ldw	r2,-48(fp)
   1baf8:	10c00104 	addi	r3,r2,4
   1bafc:	e0fff415 	stw	r3,-48(fp)
   1bb00:	10800017 	ldw	r2,0(r2)
   1bb04:	103ff826 	beq	r2,zero,1bae8 <__alt_mem_Flash_flash_data+0xf401bae8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1bb08:	e0bff517 	ldw	r2,-44(fp)
   1bb0c:	1085883a 	add	r2,r2,r2
   1bb10:	1085883a 	add	r2,r2,r2
   1bb14:	1007883a 	mov	r3,r2
   1bb18:	e0bfff17 	ldw	r2,-4(fp)
   1bb1c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1bb20:	e0fff817 	ldw	r3,-32(fp)
   1bb24:	e0bff517 	ldw	r2,-44(fp)
   1bb28:	1885c83a 	sub	r2,r3,r2
   1bb2c:	1085883a 	add	r2,r2,r2
   1bb30:	1085883a 	add	r2,r2,r2
   1bb34:	1007883a 	mov	r3,r2
   1bb38:	e0bfff17 	ldw	r2,-4(fp)
   1bb3c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1bb40:	0005883a 	mov	r2,zero
}
   1bb44:	e037883a 	mov	sp,fp
   1bb48:	df000017 	ldw	fp,0(sp)
   1bb4c:	dec00104 	addi	sp,sp,4
   1bb50:	f800283a 	ret

0001bb54 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1bb54:	defff504 	addi	sp,sp,-44
   1bb58:	dfc00a15 	stw	ra,40(sp)
   1bb5c:	df000915 	stw	fp,36(sp)
   1bb60:	df000904 	addi	fp,sp,36
   1bb64:	2005883a 	mov	r2,r4
   1bb68:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bb6c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1bb70:	e0bfff03 	ldbu	r2,-4(fp)
   1bb74:	10800518 	cmpnei	r2,r2,20
   1bb78:	1000021e 	bne	r2,zero,1bb84 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1bb7c:	008011c4 	movi	r2,71
   1bb80:	00007406 	br	1bd54 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1bb84:	e0bfff03 	ldbu	r2,-4(fp)
   1bb88:	10800530 	cmpltui	r2,r2,20
   1bb8c:	1000051e 	bne	r2,zero,1bba4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1bb90:	e0bfff03 	ldbu	r2,-4(fp)
   1bb94:	10803fe0 	cmpeqi	r2,r2,255
   1bb98:	1000021e 	bne	r2,zero,1bba4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1bb9c:	00800a84 	movi	r2,42
   1bba0:	00006c06 	br	1bd54 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bba4:	0005303a 	rdctl	r2,status
   1bba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bbac:	e0fffb17 	ldw	r3,-20(fp)
   1bbb0:	00bfff84 	movi	r2,-2
   1bbb4:	1884703a 	and	r2,r3,r2
   1bbb8:	1001703a 	wrctl	status,r2
  
  return context;
   1bbbc:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1bbc0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1bbc4:	e0bfff03 	ldbu	r2,-4(fp)
   1bbc8:	10803fd8 	cmpnei	r2,r2,255
   1bbcc:	1000081e 	bne	r2,zero,1bbf0 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1bbd0:	008000b4 	movhi	r2,2
   1bbd4:	10937504 	addi	r2,r2,19924
   1bbd8:	10800017 	ldw	r2,0(r2)
   1bbdc:	10800c83 	ldbu	r2,50(r2)
   1bbe0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1bbe4:	00800044 	movi	r2,1
   1bbe8:	e0bff705 	stb	r2,-36(fp)
   1bbec:	00000b06 	br	1bc1c <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1bbf0:	008000b4 	movhi	r2,2
   1bbf4:	10937504 	addi	r2,r2,19924
   1bbf8:	10800017 	ldw	r2,0(r2)
   1bbfc:	10800c83 	ldbu	r2,50(r2)
   1bc00:	10c03fcc 	andi	r3,r2,255
   1bc04:	e0bfff03 	ldbu	r2,-4(fp)
   1bc08:	1880031e 	bne	r3,r2,1bc18 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   1bc0c:	00800044 	movi	r2,1
   1bc10:	e0bff705 	stb	r2,-36(fp)
   1bc14:	00000106 	br	1bc1c <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1bc18:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bc1c:	e0ffff03 	ldbu	r3,-4(fp)
   1bc20:	00800174 	movhi	r2,5
   1bc24:	10a81704 	addi	r2,r2,-24484
   1bc28:	18c7883a 	add	r3,r3,r3
   1bc2c:	18c7883a 	add	r3,r3,r3
   1bc30:	10c5883a 	add	r2,r2,r3
   1bc34:	10800017 	ldw	r2,0(r2)
   1bc38:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1bc3c:	e0bff917 	ldw	r2,-28(fp)
   1bc40:	1000061e 	bne	r2,zero,1bc5c <OSTaskSuspend+0x108>
   1bc44:	e0bff817 	ldw	r2,-32(fp)
   1bc48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc4c:	e0bffc17 	ldw	r2,-16(fp)
   1bc50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1bc54:	00801204 	movi	r2,72
   1bc58:	00003e06 	br	1bd54 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1bc5c:	e0bff917 	ldw	r2,-28(fp)
   1bc60:	10800058 	cmpnei	r2,r2,1
   1bc64:	1000061e 	bne	r2,zero,1bc80 <OSTaskSuspend+0x12c>
   1bc68:	e0bff817 	ldw	r2,-32(fp)
   1bc6c:	e0bffd15 	stw	r2,-12(fp)
   1bc70:	e0bffd17 	ldw	r2,-12(fp)
   1bc74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1bc78:	008010c4 	movi	r2,67
   1bc7c:	00003506 	br	1bd54 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1bc80:	e0bff917 	ldw	r2,-28(fp)
   1bc84:	10800d03 	ldbu	r2,52(r2)
   1bc88:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1bc8c:	e0fffa03 	ldbu	r3,-24(fp)
   1bc90:	e13ffa03 	ldbu	r4,-24(fp)
   1bc94:	008000b4 	movhi	r2,2
   1bc98:	10937244 	addi	r2,r2,19913
   1bc9c:	1105883a 	add	r2,r2,r4
   1bca0:	10800003 	ldbu	r2,0(r2)
   1bca4:	1009883a 	mov	r4,r2
   1bca8:	e0bff917 	ldw	r2,-28(fp)
   1bcac:	10800d43 	ldbu	r2,53(r2)
   1bcb0:	0084303a 	nor	r2,zero,r2
   1bcb4:	2084703a 	and	r2,r4,r2
   1bcb8:	1009883a 	mov	r4,r2
   1bcbc:	008000b4 	movhi	r2,2
   1bcc0:	10937244 	addi	r2,r2,19913
   1bcc4:	10c5883a 	add	r2,r2,r3
   1bcc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1bccc:	e0fffa03 	ldbu	r3,-24(fp)
   1bcd0:	008000b4 	movhi	r2,2
   1bcd4:	10937244 	addi	r2,r2,19913
   1bcd8:	10c5883a 	add	r2,r2,r3
   1bcdc:	10800003 	ldbu	r2,0(r2)
   1bce0:	10803fcc 	andi	r2,r2,255
   1bce4:	10000c1e 	bne	r2,zero,1bd18 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1bce8:	e0bff917 	ldw	r2,-28(fp)
   1bcec:	10800d83 	ldbu	r2,54(r2)
   1bcf0:	0084303a 	nor	r2,zero,r2
   1bcf4:	1007883a 	mov	r3,r2
   1bcf8:	008000b4 	movhi	r2,2
   1bcfc:	10937204 	addi	r2,r2,19912
   1bd00:	10800003 	ldbu	r2,0(r2)
   1bd04:	1884703a 	and	r2,r3,r2
   1bd08:	1007883a 	mov	r3,r2
   1bd0c:	008000b4 	movhi	r2,2
   1bd10:	10937204 	addi	r2,r2,19912
   1bd14:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1bd18:	e0bff917 	ldw	r2,-28(fp)
   1bd1c:	10800c03 	ldbu	r2,48(r2)
   1bd20:	10800214 	ori	r2,r2,8
   1bd24:	1007883a 	mov	r3,r2
   1bd28:	e0bff917 	ldw	r2,-28(fp)
   1bd2c:	10c00c05 	stb	r3,48(r2)
   1bd30:	e0bff817 	ldw	r2,-32(fp)
   1bd34:	e0bffe15 	stw	r2,-8(fp)
   1bd38:	e0bffe17 	ldw	r2,-8(fp)
   1bd3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1bd40:	e0bff703 	ldbu	r2,-36(fp)
   1bd44:	10800058 	cmpnei	r2,r2,1
   1bd48:	1000011e 	bne	r2,zero,1bd50 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   1bd4c:	00155680 	call	15568 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1bd50:	0005883a 	mov	r2,zero
}
   1bd54:	e037883a 	mov	sp,fp
   1bd58:	dfc00117 	ldw	ra,4(sp)
   1bd5c:	df000017 	ldw	fp,0(sp)
   1bd60:	dec00204 	addi	sp,sp,8
   1bd64:	f800283a 	ret

0001bd68 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1bd68:	defff604 	addi	sp,sp,-40
   1bd6c:	dfc00915 	stw	ra,36(sp)
   1bd70:	df000815 	stw	fp,32(sp)
   1bd74:	df000804 	addi	fp,sp,32
   1bd78:	2005883a 	mov	r2,r4
   1bd7c:	e17fff15 	stw	r5,-4(fp)
   1bd80:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bd84:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1bd88:	e0bffe03 	ldbu	r2,-8(fp)
   1bd8c:	10800570 	cmpltui	r2,r2,21
   1bd90:	1000051e 	bne	r2,zero,1bda8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1bd94:	e0bffe03 	ldbu	r2,-8(fp)
   1bd98:	10803fe0 	cmpeqi	r2,r2,255
   1bd9c:	1000021e 	bne	r2,zero,1bda8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1bda0:	00800a84 	movi	r2,42
   1bda4:	00003606 	br	1be80 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1bda8:	e0bfff17 	ldw	r2,-4(fp)
   1bdac:	1000021e 	bne	r2,zero,1bdb8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1bdb0:	00800244 	movi	r2,9
   1bdb4:	00003206 	br	1be80 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bdb8:	0005303a 	rdctl	r2,status
   1bdbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdc0:	e0fffa17 	ldw	r3,-24(fp)
   1bdc4:	00bfff84 	movi	r2,-2
   1bdc8:	1884703a 	and	r2,r3,r2
   1bdcc:	1001703a 	wrctl	status,r2
  
  return context;
   1bdd0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1bdd4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1bdd8:	e0bffe03 	ldbu	r2,-8(fp)
   1bddc:	10803fd8 	cmpnei	r2,r2,255
   1bde0:	1000051e 	bne	r2,zero,1bdf8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   1bde4:	008000b4 	movhi	r2,2
   1bde8:	10937504 	addi	r2,r2,19924
   1bdec:	10800017 	ldw	r2,0(r2)
   1bdf0:	10800c83 	ldbu	r2,50(r2)
   1bdf4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1bdf8:	e0fffe03 	ldbu	r3,-8(fp)
   1bdfc:	00800174 	movhi	r2,5
   1be00:	10a81704 	addi	r2,r2,-24484
   1be04:	18c7883a 	add	r3,r3,r3
   1be08:	18c7883a 	add	r3,r3,r3
   1be0c:	10c5883a 	add	r2,r2,r3
   1be10:	10800017 	ldw	r2,0(r2)
   1be14:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1be18:	e0bff917 	ldw	r2,-28(fp)
   1be1c:	1000061e 	bne	r2,zero,1be38 <OSTaskQuery+0xd0>
   1be20:	e0bff817 	ldw	r2,-32(fp)
   1be24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be28:	e0bffb17 	ldw	r2,-20(fp)
   1be2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1be30:	00800a44 	movi	r2,41
   1be34:	00001206 	br	1be80 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1be38:	e0bff917 	ldw	r2,-28(fp)
   1be3c:	10800058 	cmpnei	r2,r2,1
   1be40:	1000061e 	bne	r2,zero,1be5c <OSTaskQuery+0xf4>
   1be44:	e0bff817 	ldw	r2,-32(fp)
   1be48:	e0bffc15 	stw	r2,-16(fp)
   1be4c:	e0bffc17 	ldw	r2,-16(fp)
   1be50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1be54:	008010c4 	movi	r2,67
   1be58:	00000906 	br	1be80 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1be5c:	e13fff17 	ldw	r4,-4(fp)
   1be60:	e17ff917 	ldw	r5,-28(fp)
   1be64:	01801b04 	movi	r6,108
   1be68:	00155040 	call	15504 <OS_MemCopy>
   1be6c:	e0bff817 	ldw	r2,-32(fp)
   1be70:	e0bffd15 	stw	r2,-12(fp)
   1be74:	e0bffd17 	ldw	r2,-12(fp)
   1be78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1be7c:	0005883a 	mov	r2,zero
}
   1be80:	e037883a 	mov	sp,fp
   1be84:	dfc00117 	ldw	ra,4(sp)
   1be88:	df000017 	ldw	fp,0(sp)
   1be8c:	dec00204 	addi	sp,sp,8
   1be90:	f800283a 	ret

0001be94 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1be94:	defffc04 	addi	sp,sp,-16
   1be98:	df000315 	stw	fp,12(sp)
   1be9c:	df000304 	addi	fp,sp,12
   1bea0:	e13ffd15 	stw	r4,-12(fp)
   1bea4:	e17ffe15 	stw	r5,-8(fp)
   1bea8:	3005883a 	mov	r2,r6
   1beac:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1beb0:	e0bfff0b 	ldhu	r2,-4(fp)
   1beb4:	1080004c 	andi	r2,r2,1
   1beb8:	10000d26 	beq	r2,zero,1bef0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1bebc:	e0bfff0b 	ldhu	r2,-4(fp)
   1bec0:	1080008c 	andi	r2,r2,2
   1bec4:	10000a26 	beq	r2,zero,1bef0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1bec8:	00000706 	br	1bee8 <OS_TaskStkClr+0x54>
                size--;
   1becc:	e0bffe17 	ldw	r2,-8(fp)
   1bed0:	10bfffc4 	addi	r2,r2,-1
   1bed4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1bed8:	e0bffd17 	ldw	r2,-12(fp)
   1bedc:	10c00104 	addi	r3,r2,4
   1bee0:	e0fffd15 	stw	r3,-12(fp)
   1bee4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1bee8:	e0bffe17 	ldw	r2,-8(fp)
   1beec:	103ff71e 	bne	r2,zero,1becc <__alt_mem_Flash_flash_data+0xf401becc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1bef0:	e037883a 	mov	sp,fp
   1bef4:	df000017 	ldw	fp,0(sp)
   1bef8:	dec00104 	addi	sp,sp,4
   1befc:	f800283a 	ret

0001bf00 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1bf00:	defff904 	addi	sp,sp,-28
   1bf04:	dfc00615 	stw	ra,24(sp)
   1bf08:	df000515 	stw	fp,20(sp)
   1bf0c:	df000504 	addi	fp,sp,20
   1bf10:	2005883a 	mov	r2,r4
   1bf14:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bf18:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bf1c:	008000b4 	movhi	r2,2
   1bf20:	10937404 	addi	r2,r2,19920
   1bf24:	10800003 	ldbu	r2,0(r2)
   1bf28:	10803fcc 	andi	r2,r2,255
   1bf2c:	10000126 	beq	r2,zero,1bf34 <OSTimeDly+0x34>
        return;
   1bf30:	00004006 	br	1c034 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1bf34:	e0bfff0b 	ldhu	r2,-4(fp)
   1bf38:	10003e26 	beq	r2,zero,1c034 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf3c:	0005303a 	rdctl	r2,status
   1bf40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf44:	e0fffd17 	ldw	r3,-12(fp)
   1bf48:	00bfff84 	movi	r2,-2
   1bf4c:	1884703a 	and	r2,r3,r2
   1bf50:	1001703a 	wrctl	status,r2
  
  return context;
   1bf54:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1bf58:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1bf5c:	008000b4 	movhi	r2,2
   1bf60:	10937504 	addi	r2,r2,19924
   1bf64:	10800017 	ldw	r2,0(r2)
   1bf68:	10800d03 	ldbu	r2,52(r2)
   1bf6c:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1bf70:	e0fffc03 	ldbu	r3,-16(fp)
   1bf74:	e13ffc03 	ldbu	r4,-16(fp)
   1bf78:	008000b4 	movhi	r2,2
   1bf7c:	10937244 	addi	r2,r2,19913
   1bf80:	1105883a 	add	r2,r2,r4
   1bf84:	10800003 	ldbu	r2,0(r2)
   1bf88:	1009883a 	mov	r4,r2
   1bf8c:	008000b4 	movhi	r2,2
   1bf90:	10937504 	addi	r2,r2,19924
   1bf94:	10800017 	ldw	r2,0(r2)
   1bf98:	10800d43 	ldbu	r2,53(r2)
   1bf9c:	0084303a 	nor	r2,zero,r2
   1bfa0:	2084703a 	and	r2,r4,r2
   1bfa4:	1009883a 	mov	r4,r2
   1bfa8:	008000b4 	movhi	r2,2
   1bfac:	10937244 	addi	r2,r2,19913
   1bfb0:	10c5883a 	add	r2,r2,r3
   1bfb4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1bfb8:	e0fffc03 	ldbu	r3,-16(fp)
   1bfbc:	008000b4 	movhi	r2,2
   1bfc0:	10937244 	addi	r2,r2,19913
   1bfc4:	10c5883a 	add	r2,r2,r3
   1bfc8:	10800003 	ldbu	r2,0(r2)
   1bfcc:	10803fcc 	andi	r2,r2,255
   1bfd0:	10000e1e 	bne	r2,zero,1c00c <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1bfd4:	008000b4 	movhi	r2,2
   1bfd8:	10937504 	addi	r2,r2,19924
   1bfdc:	10800017 	ldw	r2,0(r2)
   1bfe0:	10800d83 	ldbu	r2,54(r2)
   1bfe4:	0084303a 	nor	r2,zero,r2
   1bfe8:	1007883a 	mov	r3,r2
   1bfec:	008000b4 	movhi	r2,2
   1bff0:	10937204 	addi	r2,r2,19912
   1bff4:	10800003 	ldbu	r2,0(r2)
   1bff8:	1884703a 	and	r2,r3,r2
   1bffc:	1007883a 	mov	r3,r2
   1c000:	008000b4 	movhi	r2,2
   1c004:	10937204 	addi	r2,r2,19912
   1c008:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1c00c:	008000b4 	movhi	r2,2
   1c010:	10937504 	addi	r2,r2,19924
   1c014:	10800017 	ldw	r2,0(r2)
   1c018:	e0ffff0b 	ldhu	r3,-4(fp)
   1c01c:	10c00b8d 	sth	r3,46(r2)
   1c020:	e0bffb17 	ldw	r2,-20(fp)
   1c024:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c028:	e0bffe17 	ldw	r2,-8(fp)
   1c02c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1c030:	00155680 	call	15568 <OS_Sched>
    }
}
   1c034:	e037883a 	mov	sp,fp
   1c038:	dfc00117 	ldw	ra,4(sp)
   1c03c:	df000017 	ldw	fp,0(sp)
   1c040:	dec00204 	addi	sp,sp,8
   1c044:	f800283a 	ret

0001c048 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1c048:	defff804 	addi	sp,sp,-32
   1c04c:	dfc00715 	stw	ra,28(sp)
   1c050:	df000615 	stw	fp,24(sp)
   1c054:	df000604 	addi	fp,sp,24
   1c058:	2015883a 	mov	r10,r4
   1c05c:	2809883a 	mov	r4,r5
   1c060:	3007883a 	mov	r3,r6
   1c064:	3805883a 	mov	r2,r7
   1c068:	e2bffc05 	stb	r10,-16(fp)
   1c06c:	e13ffd05 	stb	r4,-12(fp)
   1c070:	e0fffe05 	stb	r3,-8(fp)
   1c074:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1c078:	008000b4 	movhi	r2,2
   1c07c:	10937404 	addi	r2,r2,19920
   1c080:	10800003 	ldbu	r2,0(r2)
   1c084:	10803fcc 	andi	r2,r2,255
   1c088:	10000226 	beq	r2,zero,1c094 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   1c08c:	00801544 	movi	r2,85
   1c090:	00004206 	br	1c19c <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1c094:	e0bffc03 	ldbu	r2,-16(fp)
   1c098:	1000081e 	bne	r2,zero,1c0bc <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   1c09c:	e0bffd03 	ldbu	r2,-12(fp)
   1c0a0:	1000061e 	bne	r2,zero,1c0bc <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1c0a4:	e0bffe03 	ldbu	r2,-8(fp)
   1c0a8:	1000041e 	bne	r2,zero,1c0bc <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   1c0ac:	e0bfff0b 	ldhu	r2,-4(fp)
   1c0b0:	1000021e 	bne	r2,zero,1c0bc <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1c0b4:	00801504 	movi	r2,84
   1c0b8:	00003806 	br	1c19c <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   1c0bc:	e0bffd03 	ldbu	r2,-12(fp)
   1c0c0:	10800f30 	cmpltui	r2,r2,60
   1c0c4:	1000021e 	bne	r2,zero,1c0d0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1c0c8:	00801444 	movi	r2,81
   1c0cc:	00003306 	br	1c19c <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1c0d0:	e0bffe03 	ldbu	r2,-8(fp)
   1c0d4:	10800f30 	cmpltui	r2,r2,60
   1c0d8:	1000021e 	bne	r2,zero,1c0e4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1c0dc:	00801484 	movi	r2,82
   1c0e0:	00002e06 	br	1c19c <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   1c0e4:	e0bfff0b 	ldhu	r2,-4(fp)
   1c0e8:	1080fa30 	cmpltui	r2,r2,1000
   1c0ec:	1000021e 	bne	r2,zero,1c0f8 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1c0f0:	008014c4 	movi	r2,83
   1c0f4:	00002906 	br	1c19c <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1c0f8:	e0bffc03 	ldbu	r2,-16(fp)
   1c0fc:	10c38424 	muli	r3,r2,3600
   1c100:	e0bffd03 	ldbu	r2,-12(fp)
   1c104:	10800f24 	muli	r2,r2,60
   1c108:	1887883a 	add	r3,r3,r2
   1c10c:	e0bffe03 	ldbu	r2,-8(fp)
   1c110:	1885883a 	add	r2,r3,r2
   1c114:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1c118:	e0bfff0b 	ldhu	r2,-4(fp)
   1c11c:	10800f84 	addi	r2,r2,62
   1c120:	100690fa 	slli	r3,r2,3
   1c124:	008418b4 	movhi	r2,4194
   1c128:	109374c4 	addi	r2,r2,19923
   1c12c:	188a383a 	mulxuu	r5,r3,r2
   1c130:	1885383a 	mul	r2,r3,r2
   1c134:	1011883a 	mov	r8,r2
   1c138:	2813883a 	mov	r9,r5
   1c13c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1c140:	2085883a 	add	r2,r4,r2
   1c144:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1c148:	e0bffb17 	ldw	r2,-20(fp)
   1c14c:	1004d43a 	srli	r2,r2,16
   1c150:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1c154:	e0bffb17 	ldw	r2,-20(fp)
   1c158:	10bfffcc 	andi	r2,r2,65535
   1c15c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1c160:	e0bffb17 	ldw	r2,-20(fp)
   1c164:	10bfffcc 	andi	r2,r2,65535
   1c168:	1009883a 	mov	r4,r2
   1c16c:	001bf000 	call	1bf00 <OSTimeDly>
    while (loops > 0) {
   1c170:	00000706 	br	1c190 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1c174:	01200014 	movui	r4,32768
   1c178:	001bf000 	call	1bf00 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1c17c:	01200014 	movui	r4,32768
   1c180:	001bf000 	call	1bf00 <OSTimeDly>
        loops--;
   1c184:	e0bffa0b 	ldhu	r2,-24(fp)
   1c188:	10bfffc4 	addi	r2,r2,-1
   1c18c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1c190:	e0bffa0b 	ldhu	r2,-24(fp)
   1c194:	103ff71e 	bne	r2,zero,1c174 <__alt_mem_Flash_flash_data+0xf401c174>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1c198:	0005883a 	mov	r2,zero
}
   1c19c:	e037883a 	mov	sp,fp
   1c1a0:	dfc00117 	ldw	ra,4(sp)
   1c1a4:	df000017 	ldw	fp,0(sp)
   1c1a8:	dec00204 	addi	sp,sp,8
   1c1ac:	f800283a 	ret

0001c1b0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1c1b0:	defff504 	addi	sp,sp,-44
   1c1b4:	dfc00a15 	stw	ra,40(sp)
   1c1b8:	df000915 	stw	fp,36(sp)
   1c1bc:	df000904 	addi	fp,sp,36
   1c1c0:	2005883a 	mov	r2,r4
   1c1c4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1c1c8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1c1cc:	e0bfff03 	ldbu	r2,-4(fp)
   1c1d0:	10800530 	cmpltui	r2,r2,20
   1c1d4:	1000021e 	bne	r2,zero,1c1e0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1c1d8:	00800a84 	movi	r2,42
   1c1dc:	00006b06 	br	1c38c <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c1e0:	0005303a 	rdctl	r2,status
   1c1e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c1e8:	e0fff917 	ldw	r3,-28(fp)
   1c1ec:	00bfff84 	movi	r2,-2
   1c1f0:	1884703a 	and	r2,r3,r2
   1c1f4:	1001703a 	wrctl	status,r2
  
  return context;
   1c1f8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1c1fc:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1c200:	e0ffff03 	ldbu	r3,-4(fp)
   1c204:	00800174 	movhi	r2,5
   1c208:	10a81704 	addi	r2,r2,-24484
   1c20c:	18c7883a 	add	r3,r3,r3
   1c210:	18c7883a 	add	r3,r3,r3
   1c214:	10c5883a 	add	r2,r2,r3
   1c218:	10800017 	ldw	r2,0(r2)
   1c21c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1c220:	e0bff817 	ldw	r2,-32(fp)
   1c224:	1000061e 	bne	r2,zero,1c240 <OSTimeDlyResume+0x90>
   1c228:	e0bff717 	ldw	r2,-36(fp)
   1c22c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c230:	e0bffa17 	ldw	r2,-24(fp)
   1c234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1c238:	008010c4 	movi	r2,67
   1c23c:	00005306 	br	1c38c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1c240:	e0bff817 	ldw	r2,-32(fp)
   1c244:	10800058 	cmpnei	r2,r2,1
   1c248:	1000061e 	bne	r2,zero,1c264 <OSTimeDlyResume+0xb4>
   1c24c:	e0bff717 	ldw	r2,-36(fp)
   1c250:	e0bffb15 	stw	r2,-20(fp)
   1c254:	e0bffb17 	ldw	r2,-20(fp)
   1c258:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1c25c:	008010c4 	movi	r2,67
   1c260:	00004a06 	br	1c38c <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1c264:	e0bff817 	ldw	r2,-32(fp)
   1c268:	10800b8b 	ldhu	r2,46(r2)
   1c26c:	10bfffcc 	andi	r2,r2,65535
   1c270:	1000061e 	bne	r2,zero,1c28c <OSTimeDlyResume+0xdc>
   1c274:	e0bff717 	ldw	r2,-36(fp)
   1c278:	e0bffc15 	stw	r2,-16(fp)
   1c27c:	e0bffc17 	ldw	r2,-16(fp)
   1c280:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1c284:	00801404 	movi	r2,80
   1c288:	00004006 	br	1c38c <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1c28c:	e0bff817 	ldw	r2,-32(fp)
   1c290:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1c294:	e0bff817 	ldw	r2,-32(fp)
   1c298:	10800c03 	ldbu	r2,48(r2)
   1c29c:	10803fcc 	andi	r2,r2,255
   1c2a0:	10800dcc 	andi	r2,r2,55
   1c2a4:	10000b26 	beq	r2,zero,1c2d4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1c2a8:	e0bff817 	ldw	r2,-32(fp)
   1c2ac:	10c00c03 	ldbu	r3,48(r2)
   1c2b0:	00bff204 	movi	r2,-56
   1c2b4:	1884703a 	and	r2,r3,r2
   1c2b8:	1007883a 	mov	r3,r2
   1c2bc:	e0bff817 	ldw	r2,-32(fp)
   1c2c0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1c2c4:	e0bff817 	ldw	r2,-32(fp)
   1c2c8:	00c00044 	movi	r3,1
   1c2cc:	10c00c45 	stb	r3,49(r2)
   1c2d0:	00000206 	br	1c2dc <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1c2d4:	e0bff817 	ldw	r2,-32(fp)
   1c2d8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1c2dc:	e0bff817 	ldw	r2,-32(fp)
   1c2e0:	10800c03 	ldbu	r2,48(r2)
   1c2e4:	10803fcc 	andi	r2,r2,255
   1c2e8:	1080020c 	andi	r2,r2,8
   1c2ec:	1000221e 	bne	r2,zero,1c378 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1c2f0:	e0bff817 	ldw	r2,-32(fp)
   1c2f4:	10c00d83 	ldbu	r3,54(r2)
   1c2f8:	008000b4 	movhi	r2,2
   1c2fc:	10937204 	addi	r2,r2,19912
   1c300:	10800003 	ldbu	r2,0(r2)
   1c304:	1884b03a 	or	r2,r3,r2
   1c308:	1007883a 	mov	r3,r2
   1c30c:	008000b4 	movhi	r2,2
   1c310:	10937204 	addi	r2,r2,19912
   1c314:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1c318:	e0bff817 	ldw	r2,-32(fp)
   1c31c:	10800d03 	ldbu	r2,52(r2)
   1c320:	10c03fcc 	andi	r3,r2,255
   1c324:	e0bff817 	ldw	r2,-32(fp)
   1c328:	10800d03 	ldbu	r2,52(r2)
   1c32c:	11003fcc 	andi	r4,r2,255
   1c330:	008000b4 	movhi	r2,2
   1c334:	10937244 	addi	r2,r2,19913
   1c338:	1105883a 	add	r2,r2,r4
   1c33c:	11000003 	ldbu	r4,0(r2)
   1c340:	e0bff817 	ldw	r2,-32(fp)
   1c344:	10800d43 	ldbu	r2,53(r2)
   1c348:	2084b03a 	or	r2,r4,r2
   1c34c:	1009883a 	mov	r4,r2
   1c350:	008000b4 	movhi	r2,2
   1c354:	10937244 	addi	r2,r2,19913
   1c358:	10c5883a 	add	r2,r2,r3
   1c35c:	11000005 	stb	r4,0(r2)
   1c360:	e0bff717 	ldw	r2,-36(fp)
   1c364:	e0bffd15 	stw	r2,-12(fp)
   1c368:	e0bffd17 	ldw	r2,-12(fp)
   1c36c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1c370:	00155680 	call	15568 <OS_Sched>
   1c374:	00000406 	br	1c388 <OSTimeDlyResume+0x1d8>
   1c378:	e0bff717 	ldw	r2,-36(fp)
   1c37c:	e0bffe15 	stw	r2,-8(fp)
   1c380:	e0bffe17 	ldw	r2,-8(fp)
   1c384:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1c388:	0005883a 	mov	r2,zero
}
   1c38c:	e037883a 	mov	sp,fp
   1c390:	dfc00117 	ldw	ra,4(sp)
   1c394:	df000017 	ldw	fp,0(sp)
   1c398:	dec00204 	addi	sp,sp,8
   1c39c:	f800283a 	ret

0001c3a0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1c3a0:	defffb04 	addi	sp,sp,-20
   1c3a4:	df000415 	stw	fp,16(sp)
   1c3a8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c3ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c3b0:	0005303a 	rdctl	r2,status
   1c3b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c3b8:	e0fffe17 	ldw	r3,-8(fp)
   1c3bc:	00bfff84 	movi	r2,-2
   1c3c0:	1884703a 	and	r2,r3,r2
   1c3c4:	1001703a 	wrctl	status,r2
  
  return context;
   1c3c8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1c3cc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1c3d0:	008000b4 	movhi	r2,2
   1c3d4:	10937604 	addi	r2,r2,19928
   1c3d8:	10800017 	ldw	r2,0(r2)
   1c3dc:	e0bffd15 	stw	r2,-12(fp)
   1c3e0:	e0bffc17 	ldw	r2,-16(fp)
   1c3e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c3e8:	e0bfff17 	ldw	r2,-4(fp)
   1c3ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1c3f0:	e0bffd17 	ldw	r2,-12(fp)
}
   1c3f4:	e037883a 	mov	sp,fp
   1c3f8:	df000017 	ldw	fp,0(sp)
   1c3fc:	dec00104 	addi	sp,sp,4
   1c400:	f800283a 	ret

0001c404 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1c404:	defffb04 	addi	sp,sp,-20
   1c408:	df000415 	stw	fp,16(sp)
   1c40c:	df000404 	addi	fp,sp,16
   1c410:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c414:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c418:	0005303a 	rdctl	r2,status
   1c41c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c420:	e0fffd17 	ldw	r3,-12(fp)
   1c424:	00bfff84 	movi	r2,-2
   1c428:	1884703a 	and	r2,r3,r2
   1c42c:	1001703a 	wrctl	status,r2
  
  return context;
   1c430:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1c434:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1c438:	008000b4 	movhi	r2,2
   1c43c:	10937604 	addi	r2,r2,19928
   1c440:	e0ffff17 	ldw	r3,-4(fp)
   1c444:	10c00015 	stw	r3,0(r2)
   1c448:	e0bffc17 	ldw	r2,-16(fp)
   1c44c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c450:	e0bffe17 	ldw	r2,-8(fp)
   1c454:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1c458:	e037883a 	mov	sp,fp
   1c45c:	df000017 	ldw	fp,0(sp)
   1c460:	dec00104 	addi	sp,sp,4
   1c464:	f800283a 	ret

0001c468 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1c468:	defffd04 	addi	sp,sp,-12
   1c46c:	dfc00215 	stw	ra,8(sp)
   1c470:	df000115 	stw	fp,4(sp)
   1c474:	df000104 	addi	fp,sp,4
   1c478:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1c47c:	e13fff17 	ldw	r4,-4(fp)
   1c480:	014000b4 	movhi	r5,2
   1c484:	294b4604 	addi	r5,r5,11544
   1c488:	001ee3c0 	call	1ee3c <alt_dev_llist_insert>
}
   1c48c:	e037883a 	mov	sp,fp
   1c490:	dfc00117 	ldw	ra,4(sp)
   1c494:	df000017 	ldw	fp,0(sp)
   1c498:	dec00204 	addi	sp,sp,8
   1c49c:	f800283a 	ret

0001c4a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1c4a0:	defffd04 	addi	sp,sp,-12
   1c4a4:	dfc00215 	stw	ra,8(sp)
   1c4a8:	df000115 	stw	fp,4(sp)
   1c4ac:	df000104 	addi	fp,sp,4
   1c4b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1c4b4:	001f7500 	call	1f750 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1c4b8:	00800044 	movi	r2,1
   1c4bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1c4c0:	e037883a 	mov	sp,fp
   1c4c4:	dfc00117 	ldw	ra,4(sp)
   1c4c8:	df000017 	ldw	fp,0(sp)
   1c4cc:	dec00204 	addi	sp,sp,8
   1c4d0:	f800283a 	ret

0001c4d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1c4d4:	defffd04 	addi	sp,sp,-12
   1c4d8:	dfc00215 	stw	ra,8(sp)
   1c4dc:	df000115 	stw	fp,4(sp)
   1c4e0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1c4e4:	01040034 	movhi	r4,4096
   1c4e8:	21080004 	addi	r4,r4,8192
   1c4ec:	000b883a 	mov	r5,zero
   1c4f0:	000d883a 	mov	r6,zero
   1c4f4:	01c00204 	movi	r7,8
   1c4f8:	001d6480 	call	1d648 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1c4fc:	010000b4 	movhi	r4,2
   1c500:	21063f04 	addi	r4,r4,6396
   1c504:	000b883a 	mov	r5,zero
   1c508:	01800204 	movi	r6,8
   1c50c:	001ca100 	call	1ca10 <altera_avalon_jtag_uart_init>
   1c510:	010000b4 	movhi	r4,2
   1c514:	21063504 	addi	r4,r4,6356
   1c518:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1c51c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1c520:	010000b4 	movhi	r4,2
   1c524:	210a5004 	addi	r4,r4,10560
   1c528:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1c52c:	010000b4 	movhi	r4,2
   1c530:	210a5c04 	addi	r4,r4,10608
   1c534:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1c538:	010000b4 	movhi	r4,2
   1c53c:	210a6804 	addi	r4,r4,10656
   1c540:	001d7780 	call	1d778 <alt_up_character_lcd_init>
   1c544:	010000b4 	movhi	r4,2
   1c548:	210a6804 	addi	r4,r4,10656
   1c54c:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1c550:	010000b4 	movhi	r4,2
   1c554:	210a7304 	addi	r4,r4,10700
   1c558:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1c55c:	010000b4 	movhi	r4,2
   1c560:	210a7e04 	addi	r4,r4,10744
   1c564:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1c568:	010000b4 	movhi	r4,2
   1c56c:	210a8904 	addi	r4,r4,10788
   1c570:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1c574:	010000b4 	movhi	r4,2
   1c578:	210a9404 	addi	r4,r4,10832
   1c57c:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1c580:	010000b4 	movhi	r4,2
   1c584:	210a9f04 	addi	r4,r4,10876
   1c588:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1c58c:	010000b4 	movhi	r4,2
   1c590:	210aaa04 	addi	r4,r4,10920
   1c594:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1c598:	010000b4 	movhi	r4,2
   1c59c:	210ab504 	addi	r4,r4,10964
   1c5a0:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1c5a4:	010000b4 	movhi	r4,2
   1c5a8:	210ac004 	addi	r4,r4,11008
   1c5ac:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1c5b0:	010000b4 	movhi	r4,2
   1c5b4:	210acb04 	addi	r4,r4,11052
   1c5b8:	001e0900 	call	1e090 <alt_up_ps2_init>
   1c5bc:	010000b4 	movhi	r4,2
   1c5c0:	210acb04 	addi	r4,r4,11052
   1c5c4:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1c5c8:	010000b4 	movhi	r4,2
   1c5cc:	210ad904 	addi	r4,r4,11108
   1c5d0:	001e0900 	call	1e090 <alt_up_ps2_init>
   1c5d4:	010000b4 	movhi	r4,2
   1c5d8:	210ad904 	addi	r4,r4,11108
   1c5dc:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1c5e0:	010000b4 	movhi	r4,2
   1c5e4:	210ae704 	addi	r4,r4,11164
   1c5e8:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1c5ec:	010000b4 	movhi	r4,2
   1c5f0:	210af204 	addi	r4,r4,11208
   1c5f4:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1c5f8:	008000b4 	movhi	r2,2
   1c5fc:	108aff04 	addi	r2,r2,11260
   1c600:	10800a17 	ldw	r2,40(r2)
   1c604:	10800104 	addi	r2,r2,4
   1c608:	10800017 	ldw	r2,0(r2)
   1c60c:	10ffffcc 	andi	r3,r2,65535
   1c610:	008000b4 	movhi	r2,2
   1c614:	108aff04 	addi	r2,r2,11260
   1c618:	10c00c15 	stw	r3,48(r2)
   1c61c:	008000b4 	movhi	r2,2
   1c620:	108aff04 	addi	r2,r2,11260
   1c624:	10800a17 	ldw	r2,40(r2)
   1c628:	10800104 	addi	r2,r2,4
   1c62c:	10800017 	ldw	r2,0(r2)
   1c630:	1006d43a 	srli	r3,r2,16
   1c634:	008000b4 	movhi	r2,2
   1c638:	108aff04 	addi	r2,r2,11260
   1c63c:	10c00d15 	stw	r3,52(r2)
   1c640:	008000b4 	movhi	r2,2
   1c644:	108aff04 	addi	r2,r2,11260
   1c648:	10800c17 	ldw	r2,48(r2)
   1c64c:	10801068 	cmpgeui	r2,r2,65
   1c650:	1000081e 	bne	r2,zero,1c674 <alt_sys_init+0x1a0>
   1c654:	008000b4 	movhi	r2,2
   1c658:	108aff04 	addi	r2,r2,11260
   1c65c:	00c00fc4 	movi	r3,63
   1c660:	10c00f15 	stw	r3,60(r2)
   1c664:	008000b4 	movhi	r2,2
   1c668:	108aff04 	addi	r2,r2,11260
   1c66c:	00c00184 	movi	r3,6
   1c670:	10c01015 	stw	r3,64(r2)
   1c674:	008000b4 	movhi	r2,2
   1c678:	108aff04 	addi	r2,r2,11260
   1c67c:	10800d17 	ldw	r2,52(r2)
   1c680:	10800868 	cmpgeui	r2,r2,33
   1c684:	1000041e 	bne	r2,zero,1c698 <alt_sys_init+0x1c4>
   1c688:	008000b4 	movhi	r2,2
   1c68c:	108aff04 	addi	r2,r2,11260
   1c690:	00c007c4 	movi	r3,31
   1c694:	10c01115 	stw	r3,68(r2)
   1c698:	010000b4 	movhi	r4,2
   1c69c:	210aff04 	addi	r4,r4,11260
   1c6a0:	001e9a80 	call	1e9a8 <alt_up_char_buffer_init>
   1c6a4:	010000b4 	movhi	r4,2
   1c6a8:	210aff04 	addi	r4,r4,11260
   1c6ac:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1c6b0:	008000b4 	movhi	r2,2
   1c6b4:	108b1104 	addi	r2,r2,11332
   1c6b8:	10800a17 	ldw	r2,40(r2)
   1c6bc:	10800017 	ldw	r2,0(r2)
   1c6c0:	1007883a 	mov	r3,r2
   1c6c4:	008000b4 	movhi	r2,2
   1c6c8:	108b1104 	addi	r2,r2,11332
   1c6cc:	10c00b15 	stw	r3,44(r2)
   1c6d0:	008000b4 	movhi	r2,2
   1c6d4:	108b1104 	addi	r2,r2,11332
   1c6d8:	10800a17 	ldw	r2,40(r2)
   1c6dc:	10800104 	addi	r2,r2,4
   1c6e0:	10800017 	ldw	r2,0(r2)
   1c6e4:	1007883a 	mov	r3,r2
   1c6e8:	008000b4 	movhi	r2,2
   1c6ec:	108b1104 	addi	r2,r2,11332
   1c6f0:	10c00c15 	stw	r3,48(r2)
   1c6f4:	008000b4 	movhi	r2,2
   1c6f8:	108b1104 	addi	r2,r2,11332
   1c6fc:	10800a17 	ldw	r2,40(r2)
   1c700:	10800204 	addi	r2,r2,8
   1c704:	10800017 	ldw	r2,0(r2)
   1c708:	10ffffcc 	andi	r3,r2,65535
   1c70c:	008000b4 	movhi	r2,2
   1c710:	108b1104 	addi	r2,r2,11332
   1c714:	10c00f15 	stw	r3,60(r2)
   1c718:	008000b4 	movhi	r2,2
   1c71c:	108b1104 	addi	r2,r2,11332
   1c720:	10800a17 	ldw	r2,40(r2)
   1c724:	10800204 	addi	r2,r2,8
   1c728:	10800017 	ldw	r2,0(r2)
   1c72c:	1006d43a 	srli	r3,r2,16
   1c730:	008000b4 	movhi	r2,2
   1c734:	108b1104 	addi	r2,r2,11332
   1c738:	10c01015 	stw	r3,64(r2)
   1c73c:	008000b4 	movhi	r2,2
   1c740:	108b1104 	addi	r2,r2,11332
   1c744:	10800a17 	ldw	r2,40(r2)
   1c748:	10800304 	addi	r2,r2,12
   1c74c:	10800017 	ldw	r2,0(r2)
   1c750:	1005d07a 	srai	r2,r2,1
   1c754:	10c0004c 	andi	r3,r2,1
   1c758:	008000b4 	movhi	r2,2
   1c75c:	108b1104 	addi	r2,r2,11332
   1c760:	10c00d15 	stw	r3,52(r2)
   1c764:	008000b4 	movhi	r2,2
   1c768:	108b1104 	addi	r2,r2,11332
   1c76c:	10800a17 	ldw	r2,40(r2)
   1c770:	10800304 	addi	r2,r2,12
   1c774:	10800017 	ldw	r2,0(r2)
   1c778:	1005d13a 	srai	r2,r2,4
   1c77c:	10c003cc 	andi	r3,r2,15
   1c780:	008000b4 	movhi	r2,2
   1c784:	108b1104 	addi	r2,r2,11332
   1c788:	10c00e15 	stw	r3,56(r2)
   1c78c:	008000b4 	movhi	r2,2
   1c790:	108b1104 	addi	r2,r2,11332
   1c794:	10800a17 	ldw	r2,40(r2)
   1c798:	10800304 	addi	r2,r2,12
   1c79c:	10800017 	ldw	r2,0(r2)
   1c7a0:	1005d43a 	srai	r2,r2,16
   1c7a4:	e0bfff05 	stb	r2,-4(fp)
   1c7a8:	008000b4 	movhi	r2,2
   1c7ac:	108b1104 	addi	r2,r2,11332
   1c7b0:	10800a17 	ldw	r2,40(r2)
   1c7b4:	10800304 	addi	r2,r2,12
   1c7b8:	10800017 	ldw	r2,0(r2)
   1c7bc:	1004d63a 	srli	r2,r2,24
   1c7c0:	e0bfff45 	stb	r2,-3(fp)
   1c7c4:	008000b4 	movhi	r2,2
   1c7c8:	108b1104 	addi	r2,r2,11332
   1c7cc:	10800e17 	ldw	r2,56(r2)
   1c7d0:	10800058 	cmpnei	r2,r2,1
   1c7d4:	1000041e 	bne	r2,zero,1c7e8 <alt_sys_init+0x314>
   1c7d8:	008000b4 	movhi	r2,2
   1c7dc:	108b1104 	addi	r2,r2,11332
   1c7e0:	10001115 	stw	zero,68(r2)
   1c7e4:	00000e06 	br	1c820 <alt_sys_init+0x34c>
   1c7e8:	008000b4 	movhi	r2,2
   1c7ec:	108b1104 	addi	r2,r2,11332
   1c7f0:	10800e17 	ldw	r2,56(r2)
   1c7f4:	10800098 	cmpnei	r2,r2,2
   1c7f8:	1000051e 	bne	r2,zero,1c810 <alt_sys_init+0x33c>
   1c7fc:	008000b4 	movhi	r2,2
   1c800:	108b1104 	addi	r2,r2,11332
   1c804:	00c00044 	movi	r3,1
   1c808:	10c01115 	stw	r3,68(r2)
   1c80c:	00000406 	br	1c820 <alt_sys_init+0x34c>
   1c810:	008000b4 	movhi	r2,2
   1c814:	108b1104 	addi	r2,r2,11332
   1c818:	00c00084 	movi	r3,2
   1c81c:	10c01115 	stw	r3,68(r2)
   1c820:	e0bfff03 	ldbu	r2,-4(fp)
   1c824:	00c00804 	movi	r3,32
   1c828:	1885c83a 	sub	r2,r3,r2
   1c82c:	00ffffc4 	movi	r3,-1
   1c830:	1886d83a 	srl	r3,r3,r2
   1c834:	008000b4 	movhi	r2,2
   1c838:	108b1104 	addi	r2,r2,11332
   1c83c:	10c01215 	stw	r3,72(r2)
   1c840:	e0ffff03 	ldbu	r3,-4(fp)
   1c844:	008000b4 	movhi	r2,2
   1c848:	108b1104 	addi	r2,r2,11332
   1c84c:	10801117 	ldw	r2,68(r2)
   1c850:	1887883a 	add	r3,r3,r2
   1c854:	008000b4 	movhi	r2,2
   1c858:	108b1104 	addi	r2,r2,11332
   1c85c:	10c01315 	stw	r3,76(r2)
   1c860:	e0bfff43 	ldbu	r2,-3(fp)
   1c864:	00c00804 	movi	r3,32
   1c868:	1885c83a 	sub	r2,r3,r2
   1c86c:	00ffffc4 	movi	r3,-1
   1c870:	1886d83a 	srl	r3,r3,r2
   1c874:	008000b4 	movhi	r2,2
   1c878:	108b1104 	addi	r2,r2,11332
   1c87c:	10c01415 	stw	r3,80(r2)
   1c880:	010000b4 	movhi	r4,2
   1c884:	210b1104 	addi	r4,r4,11332
   1c888:	001c4680 	call	1c468 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1c88c:	010000b4 	movhi	r4,2
   1c890:	210b2604 	addi	r4,r4,11416
   1c894:	001c4680 	call	1c468 <alt_dev_reg>
}
   1c898:	e037883a 	mov	sp,fp
   1c89c:	dfc00117 	ldw	ra,4(sp)
   1c8a0:	df000017 	ldw	fp,0(sp)
   1c8a4:	dec00204 	addi	sp,sp,8
   1c8a8:	f800283a 	ret

0001c8ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c8ac:	defffa04 	addi	sp,sp,-24
   1c8b0:	dfc00515 	stw	ra,20(sp)
   1c8b4:	df000415 	stw	fp,16(sp)
   1c8b8:	df000404 	addi	fp,sp,16
   1c8bc:	e13ffd15 	stw	r4,-12(fp)
   1c8c0:	e17ffe15 	stw	r5,-8(fp)
   1c8c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c8c8:	e0bffd17 	ldw	r2,-12(fp)
   1c8cc:	10800017 	ldw	r2,0(r2)
   1c8d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1c8d4:	e0bffc17 	ldw	r2,-16(fp)
   1c8d8:	10c00a04 	addi	r3,r2,40
   1c8dc:	e0bffd17 	ldw	r2,-12(fp)
   1c8e0:	10800217 	ldw	r2,8(r2)
   1c8e4:	1809883a 	mov	r4,r3
   1c8e8:	e17ffe17 	ldw	r5,-8(fp)
   1c8ec:	e1bfff17 	ldw	r6,-4(fp)
   1c8f0:	100f883a 	mov	r7,r2
   1c8f4:	001d05c0 	call	1d05c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1c8f8:	e037883a 	mov	sp,fp
   1c8fc:	dfc00117 	ldw	ra,4(sp)
   1c900:	df000017 	ldw	fp,0(sp)
   1c904:	dec00204 	addi	sp,sp,8
   1c908:	f800283a 	ret

0001c90c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c90c:	defffa04 	addi	sp,sp,-24
   1c910:	dfc00515 	stw	ra,20(sp)
   1c914:	df000415 	stw	fp,16(sp)
   1c918:	df000404 	addi	fp,sp,16
   1c91c:	e13ffd15 	stw	r4,-12(fp)
   1c920:	e17ffe15 	stw	r5,-8(fp)
   1c924:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c928:	e0bffd17 	ldw	r2,-12(fp)
   1c92c:	10800017 	ldw	r2,0(r2)
   1c930:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1c934:	e0bffc17 	ldw	r2,-16(fp)
   1c938:	10c00a04 	addi	r3,r2,40
   1c93c:	e0bffd17 	ldw	r2,-12(fp)
   1c940:	10800217 	ldw	r2,8(r2)
   1c944:	1809883a 	mov	r4,r3
   1c948:	e17ffe17 	ldw	r5,-8(fp)
   1c94c:	e1bfff17 	ldw	r6,-4(fp)
   1c950:	100f883a 	mov	r7,r2
   1c954:	001d3100 	call	1d310 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1c958:	e037883a 	mov	sp,fp
   1c95c:	dfc00117 	ldw	ra,4(sp)
   1c960:	df000017 	ldw	fp,0(sp)
   1c964:	dec00204 	addi	sp,sp,8
   1c968:	f800283a 	ret

0001c96c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c96c:	defffc04 	addi	sp,sp,-16
   1c970:	dfc00315 	stw	ra,12(sp)
   1c974:	df000215 	stw	fp,8(sp)
   1c978:	df000204 	addi	fp,sp,8
   1c97c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c980:	e0bfff17 	ldw	r2,-4(fp)
   1c984:	10800017 	ldw	r2,0(r2)
   1c988:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c98c:	e0bffe17 	ldw	r2,-8(fp)
   1c990:	10c00a04 	addi	r3,r2,40
   1c994:	e0bfff17 	ldw	r2,-4(fp)
   1c998:	10800217 	ldw	r2,8(r2)
   1c99c:	1809883a 	mov	r4,r3
   1c9a0:	100b883a 	mov	r5,r2
   1c9a4:	001cf080 	call	1cf08 <altera_avalon_jtag_uart_close>
}
   1c9a8:	e037883a 	mov	sp,fp
   1c9ac:	dfc00117 	ldw	ra,4(sp)
   1c9b0:	df000017 	ldw	fp,0(sp)
   1c9b4:	dec00204 	addi	sp,sp,8
   1c9b8:	f800283a 	ret

0001c9bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c9bc:	defffa04 	addi	sp,sp,-24
   1c9c0:	dfc00515 	stw	ra,20(sp)
   1c9c4:	df000415 	stw	fp,16(sp)
   1c9c8:	df000404 	addi	fp,sp,16
   1c9cc:	e13ffd15 	stw	r4,-12(fp)
   1c9d0:	e17ffe15 	stw	r5,-8(fp)
   1c9d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c9d8:	e0bffd17 	ldw	r2,-12(fp)
   1c9dc:	10800017 	ldw	r2,0(r2)
   1c9e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c9e4:	e0bffc17 	ldw	r2,-16(fp)
   1c9e8:	10800a04 	addi	r2,r2,40
   1c9ec:	1009883a 	mov	r4,r2
   1c9f0:	e17ffe17 	ldw	r5,-8(fp)
   1c9f4:	e1bfff17 	ldw	r6,-4(fp)
   1c9f8:	001cf700 	call	1cf70 <altera_avalon_jtag_uart_ioctl>
}
   1c9fc:	e037883a 	mov	sp,fp
   1ca00:	dfc00117 	ldw	ra,4(sp)
   1ca04:	df000017 	ldw	fp,0(sp)
   1ca08:	dec00204 	addi	sp,sp,8
   1ca0c:	f800283a 	ret

0001ca10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ca10:	defff104 	addi	sp,sp,-60
   1ca14:	dfc00e15 	stw	ra,56(sp)
   1ca18:	df000d15 	stw	fp,52(sp)
   1ca1c:	df000d04 	addi	fp,sp,52
   1ca20:	e13ff915 	stw	r4,-28(fp)
   1ca24:	e17ffa15 	stw	r5,-24(fp)
   1ca28:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1ca2c:	e0bff917 	ldw	r2,-28(fp)
   1ca30:	10800c04 	addi	r2,r2,48
   1ca34:	e0bff315 	stw	r2,-52(fp)
   1ca38:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1ca3c:	e0fff40b 	ldhu	r3,-48(fp)
   1ca40:	e0bff884 	addi	r2,fp,-30
   1ca44:	1809883a 	mov	r4,r3
   1ca48:	100b883a 	mov	r5,r2
   1ca4c:	00160d40 	call	160d4 <OSFlagCreate>
   1ca50:	1007883a 	mov	r3,r2
   1ca54:	e0bff317 	ldw	r2,-52(fp)
   1ca58:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1ca5c:	e0bff917 	ldw	r2,-28(fp)
   1ca60:	10800a04 	addi	r2,r2,40
   1ca64:	e0bff515 	stw	r2,-44(fp)
   1ca68:	00800044 	movi	r2,1
   1ca6c:	e0bff60d 	sth	r2,-40(fp)
   1ca70:	e0bff60b 	ldhu	r2,-40(fp)
   1ca74:	1009883a 	mov	r4,r2
   1ca78:	0019bb40 	call	19bb4 <OSSemCreate>
   1ca7c:	1007883a 	mov	r3,r2
   1ca80:	e0bff517 	ldw	r2,-44(fp)
   1ca84:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1ca88:	e0bff917 	ldw	r2,-28(fp)
   1ca8c:	10800b04 	addi	r2,r2,44
   1ca90:	e0bff715 	stw	r2,-36(fp)
   1ca94:	00800044 	movi	r2,1
   1ca98:	e0bff80d 	sth	r2,-32(fp)
   1ca9c:	e0bff80b 	ldhu	r2,-32(fp)
   1caa0:	1009883a 	mov	r4,r2
   1caa4:	0019bb40 	call	19bb4 <OSSemCreate>
   1caa8:	1007883a 	mov	r3,r2
   1caac:	e0bff717 	ldw	r2,-36(fp)
   1cab0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1cab4:	e0bff917 	ldw	r2,-28(fp)
   1cab8:	00c00044 	movi	r3,1
   1cabc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1cac0:	e0bff917 	ldw	r2,-28(fp)
   1cac4:	10800017 	ldw	r2,0(r2)
   1cac8:	10800104 	addi	r2,r2,4
   1cacc:	1007883a 	mov	r3,r2
   1cad0:	e0bff917 	ldw	r2,-28(fp)
   1cad4:	10800817 	ldw	r2,32(r2)
   1cad8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1cadc:	e0bffb17 	ldw	r2,-20(fp)
   1cae0:	1009883a 	mov	r4,r2
   1cae4:	e17ff917 	ldw	r5,-28(fp)
   1cae8:	018000b4 	movhi	r6,2
   1caec:	31b2d404 	addi	r6,r6,-13488
   1caf0:	001f1900 	call	1f190 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1caf4:	e0bff917 	ldw	r2,-28(fp)
   1caf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1cafc:	e0bff917 	ldw	r2,-28(fp)
   1cb00:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1cb04:	008000b4 	movhi	r2,2
   1cb08:	10937b04 	addi	r2,r2,19948
   1cb0c:	10800017 	ldw	r2,0(r2)
   1cb10:	1809883a 	mov	r4,r3
   1cb14:	100b883a 	mov	r5,r2
   1cb18:	018000b4 	movhi	r6,2
   1cb1c:	31b37e04 	addi	r6,r6,-12808
   1cb20:	e1fff917 	ldw	r7,-28(fp)
   1cb24:	001ec900 	call	1ec90 <alt_alarm_start>
   1cb28:	1000040e 	bge	r2,zero,1cb3c <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1cb2c:	e0fff917 	ldw	r3,-28(fp)
   1cb30:	00a00034 	movhi	r2,32768
   1cb34:	10bfffc4 	addi	r2,r2,-1
   1cb38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1cb3c:	e037883a 	mov	sp,fp
   1cb40:	dfc00117 	ldw	ra,4(sp)
   1cb44:	df000017 	ldw	fp,0(sp)
   1cb48:	dec00204 	addi	sp,sp,8
   1cb4c:	f800283a 	ret

0001cb50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1cb50:	defff104 	addi	sp,sp,-60
   1cb54:	dfc00e15 	stw	ra,56(sp)
   1cb58:	df000d15 	stw	fp,52(sp)
   1cb5c:	df000d04 	addi	fp,sp,52
   1cb60:	e13ffe15 	stw	r4,-8(fp)
   1cb64:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1cb68:	e0bffe17 	ldw	r2,-8(fp)
   1cb6c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1cb70:	e0bff517 	ldw	r2,-44(fp)
   1cb74:	10800017 	ldw	r2,0(r2)
   1cb78:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1cb7c:	e0bff617 	ldw	r2,-40(fp)
   1cb80:	10800104 	addi	r2,r2,4
   1cb84:	10800037 	ldwio	r2,0(r2)
   1cb88:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1cb8c:	e0bff717 	ldw	r2,-36(fp)
   1cb90:	1080c00c 	andi	r2,r2,768
   1cb94:	1000011e 	bne	r2,zero,1cb9c <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1cb98:	00009206 	br	1cde4 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1cb9c:	e0bff717 	ldw	r2,-36(fp)
   1cba0:	1080400c 	andi	r2,r2,256
   1cba4:	10004726 	beq	r2,zero,1ccc4 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1cba8:	00800074 	movhi	r2,1
   1cbac:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cbb0:	e0bff517 	ldw	r2,-44(fp)
   1cbb4:	10800d17 	ldw	r2,52(r2)
   1cbb8:	10800044 	addi	r2,r2,1
   1cbbc:	1081ffcc 	andi	r2,r2,2047
   1cbc0:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1cbc4:	e0bff517 	ldw	r2,-44(fp)
   1cbc8:	10c00e17 	ldw	r3,56(r2)
   1cbcc:	e0bff817 	ldw	r2,-32(fp)
   1cbd0:	1880011e 	bne	r3,r2,1cbd8 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1cbd4:	00002906 	br	1cc7c <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1cbd8:	e0bff617 	ldw	r2,-40(fp)
   1cbdc:	10800037 	ldwio	r2,0(r2)
   1cbe0:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1cbe4:	e0bff317 	ldw	r2,-52(fp)
   1cbe8:	10a0000c 	andi	r2,r2,32768
   1cbec:	1000011e 	bne	r2,zero,1cbf4 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1cbf0:	00002206 	br	1cc7c <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1cbf4:	e0bff517 	ldw	r2,-44(fp)
   1cbf8:	10800d17 	ldw	r2,52(r2)
   1cbfc:	e0fff317 	ldw	r3,-52(fp)
   1cc00:	1809883a 	mov	r4,r3
   1cc04:	e0fff517 	ldw	r3,-44(fp)
   1cc08:	1885883a 	add	r2,r3,r2
   1cc0c:	10801104 	addi	r2,r2,68
   1cc10:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cc14:	e0bff517 	ldw	r2,-44(fp)
   1cc18:	10800d17 	ldw	r2,52(r2)
   1cc1c:	10800044 	addi	r2,r2,1
   1cc20:	10c1ffcc 	andi	r3,r2,2047
   1cc24:	e0bff517 	ldw	r2,-44(fp)
   1cc28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1cc2c:	e0bff517 	ldw	r2,-44(fp)
   1cc30:	10800c17 	ldw	r2,48(r2)
   1cc34:	e0bff915 	stw	r2,-28(fp)
   1cc38:	00800044 	movi	r2,1
   1cc3c:	e0bffa0d 	sth	r2,-24(fp)
   1cc40:	00800044 	movi	r2,1
   1cc44:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1cc48:	008000b4 	movhi	r2,2
   1cc4c:	10936644 	addi	r2,r2,19865
   1cc50:	10800003 	ldbu	r2,0(r2)
   1cc54:	10803fcc 	andi	r2,r2,255
   1cc58:	103fd526 	beq	r2,zero,1cbb0 <__alt_mem_Flash_flash_data+0xf401cbb0>
  {
    OSFlagPost (group, flags, opt, &err);
   1cc5c:	e17ffa0b 	ldhu	r5,-24(fp)
   1cc60:	e0fffa83 	ldbu	r3,-22(fp)
   1cc64:	e0bffcc4 	addi	r2,fp,-13
   1cc68:	e13ff917 	ldw	r4,-28(fp)
   1cc6c:	180d883a 	mov	r6,r3
   1cc70:	100f883a 	mov	r7,r2
   1cc74:	0016d440 	call	16d44 <OSFlagPost>
      }
   1cc78:	003fcd06 	br	1cbb0 <__alt_mem_Flash_flash_data+0xf401cbb0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1cc7c:	e0bff317 	ldw	r2,-52(fp)
   1cc80:	10bfffec 	andhi	r2,r2,65535
   1cc84:	10000f26 	beq	r2,zero,1ccc4 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1cc88:	e0bff517 	ldw	r2,-44(fp)
   1cc8c:	10c00817 	ldw	r3,32(r2)
   1cc90:	00bfff84 	movi	r2,-2
   1cc94:	1886703a 	and	r3,r3,r2
   1cc98:	e0bff517 	ldw	r2,-44(fp)
   1cc9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1cca0:	e0bff617 	ldw	r2,-40(fp)
   1cca4:	10800104 	addi	r2,r2,4
   1cca8:	1007883a 	mov	r3,r2
   1ccac:	e0bff517 	ldw	r2,-44(fp)
   1ccb0:	10800817 	ldw	r2,32(r2)
   1ccb4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ccb8:	e0bff617 	ldw	r2,-40(fp)
   1ccbc:	10800104 	addi	r2,r2,4
   1ccc0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1ccc4:	e0bff717 	ldw	r2,-36(fp)
   1ccc8:	1080800c 	andi	r2,r2,512
   1cccc:	10004426 	beq	r2,zero,1cde0 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ccd0:	e0bff717 	ldw	r2,-36(fp)
   1ccd4:	1004d43a 	srli	r2,r2,16
   1ccd8:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ccdc:	00002706 	br	1cd7c <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1cce0:	e0bff617 	ldw	r2,-40(fp)
   1cce4:	e0fff517 	ldw	r3,-44(fp)
   1cce8:	18c01017 	ldw	r3,64(r3)
   1ccec:	e13ff517 	ldw	r4,-44(fp)
   1ccf0:	20c7883a 	add	r3,r4,r3
   1ccf4:	18c21104 	addi	r3,r3,2116
   1ccf8:	18c00003 	ldbu	r3,0(r3)
   1ccfc:	18c03fcc 	andi	r3,r3,255
   1cd00:	18c0201c 	xori	r3,r3,128
   1cd04:	18ffe004 	addi	r3,r3,-128
   1cd08:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cd0c:	e0bff517 	ldw	r2,-44(fp)
   1cd10:	10801017 	ldw	r2,64(r2)
   1cd14:	10800044 	addi	r2,r2,1
   1cd18:	10c1ffcc 	andi	r3,r2,2047
   1cd1c:	e0bff517 	ldw	r2,-44(fp)
   1cd20:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1cd24:	e0bff517 	ldw	r2,-44(fp)
   1cd28:	10800c17 	ldw	r2,48(r2)
   1cd2c:	e0bffb15 	stw	r2,-20(fp)
   1cd30:	00800084 	movi	r2,2
   1cd34:	e0bffc0d 	sth	r2,-16(fp)
   1cd38:	00800044 	movi	r2,1
   1cd3c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1cd40:	008000b4 	movhi	r2,2
   1cd44:	10936644 	addi	r2,r2,19865
   1cd48:	10800003 	ldbu	r2,0(r2)
   1cd4c:	10803fcc 	andi	r2,r2,255
   1cd50:	10000726 	beq	r2,zero,1cd70 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1cd54:	e17ffc0b 	ldhu	r5,-16(fp)
   1cd58:	e0fffc83 	ldbu	r3,-14(fp)
   1cd5c:	e0bffd04 	addi	r2,fp,-12
   1cd60:	e13ffb17 	ldw	r4,-20(fp)
   1cd64:	180d883a 	mov	r6,r3
   1cd68:	100f883a 	mov	r7,r2
   1cd6c:	0016d440 	call	16d44 <OSFlagPost>

        space--;
   1cd70:	e0bff417 	ldw	r2,-48(fp)
   1cd74:	10bfffc4 	addi	r2,r2,-1
   1cd78:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1cd7c:	e0bff417 	ldw	r2,-48(fp)
   1cd80:	10000526 	beq	r2,zero,1cd98 <altera_avalon_jtag_uart_irq+0x248>
   1cd84:	e0bff517 	ldw	r2,-44(fp)
   1cd88:	10c01017 	ldw	r3,64(r2)
   1cd8c:	e0bff517 	ldw	r2,-44(fp)
   1cd90:	10800f17 	ldw	r2,60(r2)
   1cd94:	18bfd21e 	bne	r3,r2,1cce0 <__alt_mem_Flash_flash_data+0xf401cce0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1cd98:	e0bff417 	ldw	r2,-48(fp)
   1cd9c:	10001026 	beq	r2,zero,1cde0 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1cda0:	e0bff517 	ldw	r2,-44(fp)
   1cda4:	10c00817 	ldw	r3,32(r2)
   1cda8:	00bfff44 	movi	r2,-3
   1cdac:	1886703a 	and	r3,r3,r2
   1cdb0:	e0bff517 	ldw	r2,-44(fp)
   1cdb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cdb8:	e0bff517 	ldw	r2,-44(fp)
   1cdbc:	10800017 	ldw	r2,0(r2)
   1cdc0:	10800104 	addi	r2,r2,4
   1cdc4:	1007883a 	mov	r3,r2
   1cdc8:	e0bff517 	ldw	r2,-44(fp)
   1cdcc:	10800817 	ldw	r2,32(r2)
   1cdd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1cdd4:	e0bff617 	ldw	r2,-40(fp)
   1cdd8:	10800104 	addi	r2,r2,4
   1cddc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1cde0:	003f6606 	br	1cb7c <__alt_mem_Flash_flash_data+0xf401cb7c>
}
   1cde4:	e037883a 	mov	sp,fp
   1cde8:	dfc00117 	ldw	ra,4(sp)
   1cdec:	df000017 	ldw	fp,0(sp)
   1cdf0:	dec00204 	addi	sp,sp,8
   1cdf4:	f800283a 	ret

0001cdf8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1cdf8:	defff904 	addi	sp,sp,-28
   1cdfc:	dfc00615 	stw	ra,24(sp)
   1ce00:	df000515 	stw	fp,20(sp)
   1ce04:	df000504 	addi	fp,sp,20
   1ce08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1ce0c:	e0bfff17 	ldw	r2,-4(fp)
   1ce10:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1ce14:	e0bffb17 	ldw	r2,-20(fp)
   1ce18:	10800017 	ldw	r2,0(r2)
   1ce1c:	10800104 	addi	r2,r2,4
   1ce20:	10800037 	ldwio	r2,0(r2)
   1ce24:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1ce28:	e0bffc17 	ldw	r2,-16(fp)
   1ce2c:	1081000c 	andi	r2,r2,1024
   1ce30:	10000b26 	beq	r2,zero,1ce60 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1ce34:	e0bffb17 	ldw	r2,-20(fp)
   1ce38:	10800017 	ldw	r2,0(r2)
   1ce3c:	10800104 	addi	r2,r2,4
   1ce40:	1007883a 	mov	r3,r2
   1ce44:	e0bffb17 	ldw	r2,-20(fp)
   1ce48:	10800817 	ldw	r2,32(r2)
   1ce4c:	10810014 	ori	r2,r2,1024
   1ce50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ce54:	e0bffb17 	ldw	r2,-20(fp)
   1ce58:	10000915 	stw	zero,36(r2)
   1ce5c:	00002206 	br	1cee8 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ce60:	e0bffb17 	ldw	r2,-20(fp)
   1ce64:	10c00917 	ldw	r3,36(r2)
   1ce68:	00a00034 	movhi	r2,32768
   1ce6c:	10bfff04 	addi	r2,r2,-4
   1ce70:	10c01d36 	bltu	r2,r3,1cee8 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1ce74:	e0bffb17 	ldw	r2,-20(fp)
   1ce78:	10800917 	ldw	r2,36(r2)
   1ce7c:	10c00044 	addi	r3,r2,1
   1ce80:	e0bffb17 	ldw	r2,-20(fp)
   1ce84:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1ce88:	e0bffb17 	ldw	r2,-20(fp)
   1ce8c:	10c00917 	ldw	r3,36(r2)
   1ce90:	e0bffb17 	ldw	r2,-20(fp)
   1ce94:	10800117 	ldw	r2,4(r2)
   1ce98:	18801336 	bltu	r3,r2,1cee8 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1ce9c:	e0bffb17 	ldw	r2,-20(fp)
   1cea0:	10800c17 	ldw	r2,48(r2)
   1cea4:	e0bffd15 	stw	r2,-12(fp)
   1cea8:	00800104 	movi	r2,4
   1ceac:	e0bffe0d 	sth	r2,-8(fp)
   1ceb0:	00800044 	movi	r2,1
   1ceb4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1ceb8:	008000b4 	movhi	r2,2
   1cebc:	10936644 	addi	r2,r2,19865
   1cec0:	10800003 	ldbu	r2,0(r2)
   1cec4:	10803fcc 	andi	r2,r2,255
   1cec8:	10000726 	beq	r2,zero,1cee8 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1cecc:	e17ffe0b 	ldhu	r5,-8(fp)
   1ced0:	e0fffe83 	ldbu	r3,-6(fp)
   1ced4:	e0bffec4 	addi	r2,fp,-5
   1ced8:	e13ffd17 	ldw	r4,-12(fp)
   1cedc:	180d883a 	mov	r6,r3
   1cee0:	100f883a 	mov	r7,r2
   1cee4:	0016d440 	call	16d44 <OSFlagPost>
   1cee8:	008000b4 	movhi	r2,2
   1ceec:	10937b04 	addi	r2,r2,19948
   1cef0:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1cef4:	e037883a 	mov	sp,fp
   1cef8:	dfc00117 	ldw	ra,4(sp)
   1cefc:	df000017 	ldw	fp,0(sp)
   1cf00:	dec00204 	addi	sp,sp,8
   1cf04:	f800283a 	ret

0001cf08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1cf08:	defffd04 	addi	sp,sp,-12
   1cf0c:	df000215 	stw	fp,8(sp)
   1cf10:	df000204 	addi	fp,sp,8
   1cf14:	e13ffe15 	stw	r4,-8(fp)
   1cf18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1cf1c:	00000506 	br	1cf34 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1cf20:	e0bfff17 	ldw	r2,-4(fp)
   1cf24:	1090000c 	andi	r2,r2,16384
   1cf28:	10000226 	beq	r2,zero,1cf34 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1cf2c:	00bffd44 	movi	r2,-11
   1cf30:	00000b06 	br	1cf60 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1cf34:	e0bffe17 	ldw	r2,-8(fp)
   1cf38:	10c01017 	ldw	r3,64(r2)
   1cf3c:	e0bffe17 	ldw	r2,-8(fp)
   1cf40:	10800f17 	ldw	r2,60(r2)
   1cf44:	18800526 	beq	r3,r2,1cf5c <altera_avalon_jtag_uart_close+0x54>
   1cf48:	e0bffe17 	ldw	r2,-8(fp)
   1cf4c:	10c00917 	ldw	r3,36(r2)
   1cf50:	e0bffe17 	ldw	r2,-8(fp)
   1cf54:	10800117 	ldw	r2,4(r2)
   1cf58:	18bff136 	bltu	r3,r2,1cf20 <__alt_mem_Flash_flash_data+0xf401cf20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1cf5c:	0005883a 	mov	r2,zero
}
   1cf60:	e037883a 	mov	sp,fp
   1cf64:	df000017 	ldw	fp,0(sp)
   1cf68:	dec00104 	addi	sp,sp,4
   1cf6c:	f800283a 	ret

0001cf70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1cf70:	defffa04 	addi	sp,sp,-24
   1cf74:	df000515 	stw	fp,20(sp)
   1cf78:	df000504 	addi	fp,sp,20
   1cf7c:	e13ffd15 	stw	r4,-12(fp)
   1cf80:	e17ffe15 	stw	r5,-8(fp)
   1cf84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1cf88:	00bff9c4 	movi	r2,-25
   1cf8c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1cf90:	e0bffe17 	ldw	r2,-8(fp)
   1cf94:	10da8060 	cmpeqi	r3,r2,27137
   1cf98:	1800031e 	bne	r3,zero,1cfa8 <altera_avalon_jtag_uart_ioctl+0x38>
   1cf9c:	109a80a0 	cmpeqi	r2,r2,27138
   1cfa0:	1000191e 	bne	r2,zero,1d008 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1cfa4:	00002806 	br	1d048 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1cfa8:	e0bffd17 	ldw	r2,-12(fp)
   1cfac:	10c00117 	ldw	r3,4(r2)
   1cfb0:	00a00034 	movhi	r2,32768
   1cfb4:	10bfffc4 	addi	r2,r2,-1
   1cfb8:	18801226 	beq	r3,r2,1d004 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1cfbc:	e0bfff17 	ldw	r2,-4(fp)
   1cfc0:	10800017 	ldw	r2,0(r2)
   1cfc4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1cfc8:	e0bffc17 	ldw	r2,-16(fp)
   1cfcc:	10800090 	cmplti	r2,r2,2
   1cfd0:	1000061e 	bne	r2,zero,1cfec <altera_avalon_jtag_uart_ioctl+0x7c>
   1cfd4:	e0fffc17 	ldw	r3,-16(fp)
   1cfd8:	00a00034 	movhi	r2,32768
   1cfdc:	10bfffc4 	addi	r2,r2,-1
   1cfe0:	18800226 	beq	r3,r2,1cfec <altera_avalon_jtag_uart_ioctl+0x7c>
   1cfe4:	e0bffc17 	ldw	r2,-16(fp)
   1cfe8:	00000206 	br	1cff4 <altera_avalon_jtag_uart_ioctl+0x84>
   1cfec:	00a00034 	movhi	r2,32768
   1cff0:	10bfff84 	addi	r2,r2,-2
   1cff4:	e0fffd17 	ldw	r3,-12(fp)
   1cff8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1cffc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d000:	00001106 	br	1d048 <altera_avalon_jtag_uart_ioctl+0xd8>
   1d004:	00001006 	br	1d048 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1d008:	e0bffd17 	ldw	r2,-12(fp)
   1d00c:	10c00117 	ldw	r3,4(r2)
   1d010:	00a00034 	movhi	r2,32768
   1d014:	10bfffc4 	addi	r2,r2,-1
   1d018:	18800a26 	beq	r3,r2,1d044 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1d01c:	e0bffd17 	ldw	r2,-12(fp)
   1d020:	10c00917 	ldw	r3,36(r2)
   1d024:	e0bffd17 	ldw	r2,-12(fp)
   1d028:	10800117 	ldw	r2,4(r2)
   1d02c:	1885803a 	cmpltu	r2,r3,r2
   1d030:	10c03fcc 	andi	r3,r2,255
   1d034:	e0bfff17 	ldw	r2,-4(fp)
   1d038:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1d03c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d040:	00000006 	br	1d044 <altera_avalon_jtag_uart_ioctl+0xd4>
   1d044:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1d048:	e0bffb17 	ldw	r2,-20(fp)
}
   1d04c:	e037883a 	mov	sp,fp
   1d050:	df000017 	ldw	fp,0(sp)
   1d054:	dec00104 	addi	sp,sp,4
   1d058:	f800283a 	ret

0001d05c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1d05c:	deffec04 	addi	sp,sp,-80
   1d060:	dfc01315 	stw	ra,76(sp)
   1d064:	df001215 	stw	fp,72(sp)
   1d068:	df001204 	addi	fp,sp,72
   1d06c:	e13ffc15 	stw	r4,-16(fp)
   1d070:	e17ffd15 	stw	r5,-12(fp)
   1d074:	e1bffe15 	stw	r6,-8(fp)
   1d078:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1d07c:	e0bffd17 	ldw	r2,-12(fp)
   1d080:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1d084:	e0bffc17 	ldw	r2,-16(fp)
   1d088:	10800a17 	ldw	r2,40(r2)
   1d08c:	e0bff415 	stw	r2,-48(fp)
   1d090:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1d094:	e0fff50b 	ldhu	r3,-44(fp)
   1d098:	e0bffb04 	addi	r2,fp,-20
   1d09c:	e13ff417 	ldw	r4,-48(fp)
   1d0a0:	180b883a 	mov	r5,r3
   1d0a4:	100d883a 	mov	r6,r2
   1d0a8:	0019f1c0 	call	19f1c <OSSemPend>

  while (space > 0)
   1d0ac:	00006506 	br	1d244 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1d0b0:	e0bffc17 	ldw	r2,-16(fp)
   1d0b4:	10800d17 	ldw	r2,52(r2)
   1d0b8:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1d0bc:	e0bffc17 	ldw	r2,-16(fp)
   1d0c0:	10800e17 	ldw	r2,56(r2)
   1d0c4:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1d0c8:	e0fff117 	ldw	r3,-60(fp)
   1d0cc:	e0bff217 	ldw	r2,-56(fp)
   1d0d0:	18800536 	bltu	r3,r2,1d0e8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1d0d4:	e0fff117 	ldw	r3,-60(fp)
   1d0d8:	e0bff217 	ldw	r2,-56(fp)
   1d0dc:	1885c83a 	sub	r2,r3,r2
   1d0e0:	e0bff015 	stw	r2,-64(fp)
   1d0e4:	00000406 	br	1d0f8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1d0e8:	00c20004 	movi	r3,2048
   1d0ec:	e0bff217 	ldw	r2,-56(fp)
   1d0f0:	1885c83a 	sub	r2,r3,r2
   1d0f4:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1d0f8:	e0bff017 	ldw	r2,-64(fp)
   1d0fc:	1000011e 	bne	r2,zero,1d104 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1d100:	00001d06 	br	1d178 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1d104:	e0fffe17 	ldw	r3,-8(fp)
   1d108:	e0bff017 	ldw	r2,-64(fp)
   1d10c:	1880022e 	bgeu	r3,r2,1d118 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1d110:	e0bffe17 	ldw	r2,-8(fp)
   1d114:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1d118:	e0bff217 	ldw	r2,-56(fp)
   1d11c:	10801104 	addi	r2,r2,68
   1d120:	e0fffc17 	ldw	r3,-16(fp)
   1d124:	1885883a 	add	r2,r3,r2
   1d128:	e13fef17 	ldw	r4,-68(fp)
   1d12c:	100b883a 	mov	r5,r2
   1d130:	e1bff017 	ldw	r6,-64(fp)
   1d134:	000b1e00 	call	b1e0 <memcpy>
      ptr   += n;
   1d138:	e0ffef17 	ldw	r3,-68(fp)
   1d13c:	e0bff017 	ldw	r2,-64(fp)
   1d140:	1885883a 	add	r2,r3,r2
   1d144:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1d148:	e0fffe17 	ldw	r3,-8(fp)
   1d14c:	e0bff017 	ldw	r2,-64(fp)
   1d150:	1885c83a 	sub	r2,r3,r2
   1d154:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d158:	e0fff217 	ldw	r3,-56(fp)
   1d15c:	e0bff017 	ldw	r2,-64(fp)
   1d160:	1885883a 	add	r2,r3,r2
   1d164:	10c1ffcc 	andi	r3,r2,2047
   1d168:	e0bffc17 	ldw	r2,-16(fp)
   1d16c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1d170:	e0bffe17 	ldw	r2,-8(fp)
   1d174:	00bfce16 	blt	zero,r2,1d0b0 <__alt_mem_Flash_flash_data+0xf401d0b0>

    /* If we read any data then return it */
    if (ptr != buffer)
   1d178:	e0ffef17 	ldw	r3,-68(fp)
   1d17c:	e0bffd17 	ldw	r2,-12(fp)
   1d180:	18800126 	beq	r3,r2,1d188 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1d184:	00003106 	br	1d24c <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1d188:	e0bfff17 	ldw	r2,-4(fp)
   1d18c:	1090000c 	andi	r2,r2,16384
   1d190:	10000126 	beq	r2,zero,1d198 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1d194:	00002d06 	br	1d24c <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1d198:	008000b4 	movhi	r2,2
   1d19c:	10936644 	addi	r2,r2,19865
   1d1a0:	10800003 	ldbu	r2,0(r2)
   1d1a4:	10803fcc 	andi	r2,r2,255
   1d1a8:	10800058 	cmpnei	r2,r2,1
   1d1ac:	1000161e 	bne	r2,zero,1d208 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1d1b0:	e0bffc17 	ldw	r2,-16(fp)
   1d1b4:	10800c17 	ldw	r2,48(r2)
   1d1b8:	e0bff615 	stw	r2,-40(fp)
   1d1bc:	00800144 	movi	r2,5
   1d1c0:	e0bff70d 	sth	r2,-36(fp)
   1d1c4:	00bfe0c4 	movi	r2,-125
   1d1c8:	e0bff785 	stb	r2,-34(fp)
   1d1cc:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1d1d0:	008000b4 	movhi	r2,2
   1d1d4:	10936644 	addi	r2,r2,19865
   1d1d8:	10800003 	ldbu	r2,0(r2)
   1d1dc:	10803fcc 	andi	r2,r2,255
   1d1e0:	10001326 	beq	r2,zero,1d230 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1d1e4:	e17ff70b 	ldhu	r5,-36(fp)
   1d1e8:	e1bff783 	ldbu	r6,-34(fp)
   1d1ec:	e0fff80b 	ldhu	r3,-32(fp)
   1d1f0:	e0bffb44 	addi	r2,fp,-19
   1d1f4:	d8800015 	stw	r2,0(sp)
   1d1f8:	e13ff617 	ldw	r4,-40(fp)
   1d1fc:	180f883a 	mov	r7,r3
   1d200:	00166ec0 	call	166ec <OSFlagPend>
   1d204:	00000a06 	br	1d230 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1d208:	0001883a 	nop
   1d20c:	e0bffc17 	ldw	r2,-16(fp)
   1d210:	10c00d17 	ldw	r3,52(r2)
   1d214:	e0bff117 	ldw	r2,-60(fp)
   1d218:	1880051e 	bne	r3,r2,1d230 <altera_avalon_jtag_uart_read+0x1d4>
   1d21c:	e0bffc17 	ldw	r2,-16(fp)
   1d220:	10c00917 	ldw	r3,36(r2)
   1d224:	e0bffc17 	ldw	r2,-16(fp)
   1d228:	10800117 	ldw	r2,4(r2)
   1d22c:	18bff736 	bltu	r3,r2,1d20c <__alt_mem_Flash_flash_data+0xf401d20c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1d230:	e0bffc17 	ldw	r2,-16(fp)
   1d234:	10c00d17 	ldw	r3,52(r2)
   1d238:	e0bff117 	ldw	r2,-60(fp)
   1d23c:	1880011e 	bne	r3,r2,1d244 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1d240:	00000206 	br	1d24c <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1d244:	e0bffe17 	ldw	r2,-8(fp)
   1d248:	00bf9916 	blt	zero,r2,1d0b0 <__alt_mem_Flash_flash_data+0xf401d0b0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1d24c:	e0bffc17 	ldw	r2,-16(fp)
   1d250:	10800a17 	ldw	r2,40(r2)
   1d254:	1009883a 	mov	r4,r2
   1d258:	001a2f00 	call	1a2f0 <OSSemPost>

  if (ptr != buffer)
   1d25c:	e0ffef17 	ldw	r3,-68(fp)
   1d260:	e0bffd17 	ldw	r2,-12(fp)
   1d264:	18801826 	beq	r3,r2,1d2c8 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d268:	0005303a 	rdctl	r2,status
   1d26c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d270:	e0fff917 	ldw	r3,-28(fp)
   1d274:	00bfff84 	movi	r2,-2
   1d278:	1884703a 	and	r2,r3,r2
   1d27c:	1001703a 	wrctl	status,r2
  
  return context;
   1d280:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1d284:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d288:	e0bffc17 	ldw	r2,-16(fp)
   1d28c:	10800817 	ldw	r2,32(r2)
   1d290:	10c00054 	ori	r3,r2,1
   1d294:	e0bffc17 	ldw	r2,-16(fp)
   1d298:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d29c:	e0bffc17 	ldw	r2,-16(fp)
   1d2a0:	10800017 	ldw	r2,0(r2)
   1d2a4:	10800104 	addi	r2,r2,4
   1d2a8:	1007883a 	mov	r3,r2
   1d2ac:	e0bffc17 	ldw	r2,-16(fp)
   1d2b0:	10800817 	ldw	r2,32(r2)
   1d2b4:	18800035 	stwio	r2,0(r3)
   1d2b8:	e0bff317 	ldw	r2,-52(fp)
   1d2bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d2c0:	e0bffa17 	ldw	r2,-24(fp)
   1d2c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1d2c8:	e0ffef17 	ldw	r3,-68(fp)
   1d2cc:	e0bffd17 	ldw	r2,-12(fp)
   1d2d0:	18800426 	beq	r3,r2,1d2e4 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1d2d4:	e0ffef17 	ldw	r3,-68(fp)
   1d2d8:	e0bffd17 	ldw	r2,-12(fp)
   1d2dc:	1885c83a 	sub	r2,r3,r2
   1d2e0:	00000606 	br	1d2fc <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1d2e4:	e0bfff17 	ldw	r2,-4(fp)
   1d2e8:	1090000c 	andi	r2,r2,16384
   1d2ec:	10000226 	beq	r2,zero,1d2f8 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1d2f0:	00bffd44 	movi	r2,-11
   1d2f4:	00000106 	br	1d2fc <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1d2f8:	00bffec4 	movi	r2,-5
}
   1d2fc:	e037883a 	mov	sp,fp
   1d300:	dfc00117 	ldw	ra,4(sp)
   1d304:	df000017 	ldw	fp,0(sp)
   1d308:	dec00204 	addi	sp,sp,8
   1d30c:	f800283a 	ret

0001d310 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1d310:	deffed04 	addi	sp,sp,-76
   1d314:	dfc01215 	stw	ra,72(sp)
   1d318:	df001115 	stw	fp,68(sp)
   1d31c:	df001104 	addi	fp,sp,68
   1d320:	e13ffc15 	stw	r4,-16(fp)
   1d324:	e17ffd15 	stw	r5,-12(fp)
   1d328:	e1bffe15 	stw	r6,-8(fp)
   1d32c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1d330:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1d334:	e0bffd17 	ldw	r2,-12(fp)
   1d338:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1d33c:	e0bffc17 	ldw	r2,-16(fp)
   1d340:	10800b17 	ldw	r2,44(r2)
   1d344:	e0bff515 	stw	r2,-44(fp)
   1d348:	e03ff60d 	sth	zero,-40(fp)
   1d34c:	e0fff60b 	ldhu	r3,-40(fp)
   1d350:	e0bffbc4 	addi	r2,fp,-17
   1d354:	e13ff517 	ldw	r4,-44(fp)
   1d358:	180b883a 	mov	r5,r3
   1d35c:	100d883a 	mov	r6,r2
   1d360:	0019f1c0 	call	19f1c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d364:	00003806 	br	1d448 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1d368:	e0bffc17 	ldw	r2,-16(fp)
   1d36c:	10800f17 	ldw	r2,60(r2)
   1d370:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1d374:	e0bffc17 	ldw	r2,-16(fp)
   1d378:	10801017 	ldw	r2,64(r2)
   1d37c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1d380:	e0fff317 	ldw	r3,-52(fp)
   1d384:	e0bff017 	ldw	r2,-64(fp)
   1d388:	1880062e 	bgeu	r3,r2,1d3a4 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1d38c:	e0fff017 	ldw	r3,-64(fp)
   1d390:	e0bff317 	ldw	r2,-52(fp)
   1d394:	1885c83a 	sub	r2,r3,r2
   1d398:	10bfffc4 	addi	r2,r2,-1
   1d39c:	e0bff115 	stw	r2,-60(fp)
   1d3a0:	00000b06 	br	1d3d0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1d3a4:	e0bff017 	ldw	r2,-64(fp)
   1d3a8:	10000526 	beq	r2,zero,1d3c0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1d3ac:	00c20004 	movi	r3,2048
   1d3b0:	e0bff317 	ldw	r2,-52(fp)
   1d3b4:	1885c83a 	sub	r2,r3,r2
   1d3b8:	e0bff115 	stw	r2,-60(fp)
   1d3bc:	00000406 	br	1d3d0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1d3c0:	00c1ffc4 	movi	r3,2047
   1d3c4:	e0bff317 	ldw	r2,-52(fp)
   1d3c8:	1885c83a 	sub	r2,r3,r2
   1d3cc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1d3d0:	e0bff117 	ldw	r2,-60(fp)
   1d3d4:	1000011e 	bne	r2,zero,1d3dc <altera_avalon_jtag_uart_write+0xcc>
        break;
   1d3d8:	00001d06 	br	1d450 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1d3dc:	e0fffe17 	ldw	r3,-8(fp)
   1d3e0:	e0bff117 	ldw	r2,-60(fp)
   1d3e4:	1880022e 	bgeu	r3,r2,1d3f0 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1d3e8:	e0bffe17 	ldw	r2,-8(fp)
   1d3ec:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1d3f0:	e0bff317 	ldw	r2,-52(fp)
   1d3f4:	10821104 	addi	r2,r2,2116
   1d3f8:	e0fffc17 	ldw	r3,-16(fp)
   1d3fc:	1885883a 	add	r2,r3,r2
   1d400:	1009883a 	mov	r4,r2
   1d404:	e17ffd17 	ldw	r5,-12(fp)
   1d408:	e1bff117 	ldw	r6,-60(fp)
   1d40c:	000b1e00 	call	b1e0 <memcpy>
      ptr   += n;
   1d410:	e0fffd17 	ldw	r3,-12(fp)
   1d414:	e0bff117 	ldw	r2,-60(fp)
   1d418:	1885883a 	add	r2,r3,r2
   1d41c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1d420:	e0fffe17 	ldw	r3,-8(fp)
   1d424:	e0bff117 	ldw	r2,-60(fp)
   1d428:	1885c83a 	sub	r2,r3,r2
   1d42c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d430:	e0fff317 	ldw	r3,-52(fp)
   1d434:	e0bff117 	ldw	r2,-60(fp)
   1d438:	1885883a 	add	r2,r3,r2
   1d43c:	10c1ffcc 	andi	r3,r2,2047
   1d440:	e0bffc17 	ldw	r2,-16(fp)
   1d444:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d448:	e0bffe17 	ldw	r2,-8(fp)
   1d44c:	00bfc616 	blt	zero,r2,1d368 <__alt_mem_Flash_flash_data+0xf401d368>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d450:	0005303a 	rdctl	r2,status
   1d454:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d458:	e0fff717 	ldw	r3,-36(fp)
   1d45c:	00bfff84 	movi	r2,-2
   1d460:	1884703a 	and	r2,r3,r2
   1d464:	1001703a 	wrctl	status,r2
  
  return context;
   1d468:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1d46c:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d470:	e0bffc17 	ldw	r2,-16(fp)
   1d474:	10800817 	ldw	r2,32(r2)
   1d478:	10c00094 	ori	r3,r2,2
   1d47c:	e0bffc17 	ldw	r2,-16(fp)
   1d480:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d484:	e0bffc17 	ldw	r2,-16(fp)
   1d488:	10800017 	ldw	r2,0(r2)
   1d48c:	10800104 	addi	r2,r2,4
   1d490:	1007883a 	mov	r3,r2
   1d494:	e0bffc17 	ldw	r2,-16(fp)
   1d498:	10800817 	ldw	r2,32(r2)
   1d49c:	18800035 	stwio	r2,0(r3)
   1d4a0:	e0bff417 	ldw	r2,-48(fp)
   1d4a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d4a8:	e0bff817 	ldw	r2,-32(fp)
   1d4ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1d4b0:	e0bffe17 	ldw	r2,-8(fp)
   1d4b4:	00802e0e 	bge	zero,r2,1d570 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1d4b8:	e0bfff17 	ldw	r2,-4(fp)
   1d4bc:	1090000c 	andi	r2,r2,16384
   1d4c0:	10000126 	beq	r2,zero,1d4c8 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1d4c4:	00002c06 	br	1d578 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1d4c8:	008000b4 	movhi	r2,2
   1d4cc:	10936644 	addi	r2,r2,19865
   1d4d0:	10800003 	ldbu	r2,0(r2)
   1d4d4:	10803fcc 	andi	r2,r2,255
   1d4d8:	10800058 	cmpnei	r2,r2,1
   1d4dc:	1000161e 	bne	r2,zero,1d538 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1d4e0:	e0bffc17 	ldw	r2,-16(fp)
   1d4e4:	10800c17 	ldw	r2,48(r2)
   1d4e8:	e0bff915 	stw	r2,-28(fp)
   1d4ec:	00800184 	movi	r2,6
   1d4f0:	e0bffa0d 	sth	r2,-24(fp)
   1d4f4:	00bfe0c4 	movi	r2,-125
   1d4f8:	e0bffa85 	stb	r2,-22(fp)
   1d4fc:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1d500:	008000b4 	movhi	r2,2
   1d504:	10936644 	addi	r2,r2,19865
   1d508:	10800003 	ldbu	r2,0(r2)
   1d50c:	10803fcc 	andi	r2,r2,255
   1d510:	10001326 	beq	r2,zero,1d560 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1d514:	e17ffa0b 	ldhu	r5,-24(fp)
   1d518:	e1bffa83 	ldbu	r6,-22(fp)
   1d51c:	e0fffb0b 	ldhu	r3,-20(fp)
   1d520:	e0bffb84 	addi	r2,fp,-18
   1d524:	d8800015 	stw	r2,0(sp)
   1d528:	e13ff917 	ldw	r4,-28(fp)
   1d52c:	180f883a 	mov	r7,r3
   1d530:	00166ec0 	call	166ec <OSFlagPend>
   1d534:	00000a06 	br	1d560 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1d538:	0001883a 	nop
   1d53c:	e0bffc17 	ldw	r2,-16(fp)
   1d540:	10c01017 	ldw	r3,64(r2)
   1d544:	e0bff017 	ldw	r2,-64(fp)
   1d548:	1880051e 	bne	r3,r2,1d560 <altera_avalon_jtag_uart_write+0x250>
   1d54c:	e0bffc17 	ldw	r2,-16(fp)
   1d550:	10c00917 	ldw	r3,36(r2)
   1d554:	e0bffc17 	ldw	r2,-16(fp)
   1d558:	10800117 	ldw	r2,4(r2)
   1d55c:	18bff736 	bltu	r3,r2,1d53c <__alt_mem_Flash_flash_data+0xf401d53c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1d560:	e0bffc17 	ldw	r2,-16(fp)
   1d564:	10800917 	ldw	r2,36(r2)
   1d568:	10000126 	beq	r2,zero,1d570 <altera_avalon_jtag_uart_write+0x260>
         break;
   1d56c:	00000206 	br	1d578 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1d570:	e0bffe17 	ldw	r2,-8(fp)
   1d574:	00bf7b16 	blt	zero,r2,1d364 <__alt_mem_Flash_flash_data+0xf401d364>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1d578:	e0bffc17 	ldw	r2,-16(fp)
   1d57c:	10800b17 	ldw	r2,44(r2)
   1d580:	1009883a 	mov	r4,r2
   1d584:	001a2f00 	call	1a2f0 <OSSemPost>

  if (ptr != start)
   1d588:	e0fffd17 	ldw	r3,-12(fp)
   1d58c:	e0bff217 	ldw	r2,-56(fp)
   1d590:	18800426 	beq	r3,r2,1d5a4 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1d594:	e0fffd17 	ldw	r3,-12(fp)
   1d598:	e0bff217 	ldw	r2,-56(fp)
   1d59c:	1885c83a 	sub	r2,r3,r2
   1d5a0:	00000606 	br	1d5bc <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1d5a4:	e0bfff17 	ldw	r2,-4(fp)
   1d5a8:	1090000c 	andi	r2,r2,16384
   1d5ac:	10000226 	beq	r2,zero,1d5b8 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1d5b0:	00bffd44 	movi	r2,-11
   1d5b4:	00000106 	br	1d5bc <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1d5b8:	00bffec4 	movi	r2,-5
}
   1d5bc:	e037883a 	mov	sp,fp
   1d5c0:	dfc00117 	ldw	ra,4(sp)
   1d5c4:	df000017 	ldw	fp,0(sp)
   1d5c8:	dec00204 	addi	sp,sp,8
   1d5cc:	f800283a 	ret

0001d5d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1d5d0:	defff904 	addi	sp,sp,-28
   1d5d4:	dfc00615 	stw	ra,24(sp)
   1d5d8:	df000515 	stw	fp,20(sp)
   1d5dc:	df000504 	addi	fp,sp,20
   1d5e0:	e13ffe15 	stw	r4,-8(fp)
   1d5e4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1d5e8:	0007883a 	mov	r3,zero
   1d5ec:	e0bffe17 	ldw	r2,-8(fp)
   1d5f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1d5f4:	e0bffe17 	ldw	r2,-8(fp)
   1d5f8:	10800104 	addi	r2,r2,4
   1d5fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d600:	0005303a 	rdctl	r2,status
   1d604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d608:	e0fffc17 	ldw	r3,-16(fp)
   1d60c:	00bfff84 	movi	r2,-2
   1d610:	1884703a 	and	r2,r3,r2
   1d614:	1001703a 	wrctl	status,r2
  
  return context;
   1d618:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1d61c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1d620:	001f64c0 	call	1f64c <alt_tick>
   1d624:	e0bffb17 	ldw	r2,-20(fp)
   1d628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d62c:	e0bffd17 	ldw	r2,-12(fp)
   1d630:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1d634:	e037883a 	mov	sp,fp
   1d638:	dfc00117 	ldw	ra,4(sp)
   1d63c:	df000017 	ldw	fp,0(sp)
   1d640:	dec00204 	addi	sp,sp,8
   1d644:	f800283a 	ret

0001d648 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1d648:	defff904 	addi	sp,sp,-28
   1d64c:	dfc00615 	stw	ra,24(sp)
   1d650:	df000515 	stw	fp,20(sp)
   1d654:	df000504 	addi	fp,sp,20
   1d658:	e13ffc15 	stw	r4,-16(fp)
   1d65c:	e17ffd15 	stw	r5,-12(fp)
   1d660:	e1bffe15 	stw	r6,-8(fp)
   1d664:	e1ffff15 	stw	r7,-4(fp)
   1d668:	e0bfff17 	ldw	r2,-4(fp)
   1d66c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1d670:	008000b4 	movhi	r2,2
   1d674:	10937b04 	addi	r2,r2,19948
   1d678:	10800017 	ldw	r2,0(r2)
   1d67c:	1000041e 	bne	r2,zero,1d690 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1d680:	008000b4 	movhi	r2,2
   1d684:	10937b04 	addi	r2,r2,19948
   1d688:	e0fffb17 	ldw	r3,-20(fp)
   1d68c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1d690:	e0bffc17 	ldw	r2,-16(fp)
   1d694:	10800104 	addi	r2,r2,4
   1d698:	00c001c4 	movi	r3,7
   1d69c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1d6a0:	e13ffe17 	ldw	r4,-8(fp)
   1d6a4:	e17ffc17 	ldw	r5,-16(fp)
   1d6a8:	018000b4 	movhi	r6,2
   1d6ac:	31b57404 	addi	r6,r6,-10800
   1d6b0:	001f1900 	call	1f190 <alt_irq_register>
#endif  
}
   1d6b4:	e037883a 	mov	sp,fp
   1d6b8:	dfc00117 	ldw	ra,4(sp)
   1d6bc:	df000017 	ldw	fp,0(sp)
   1d6c0:	dec00204 	addi	sp,sp,8
   1d6c4:	f800283a 	ret

0001d6c8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1d6c8:	defffc04 	addi	sp,sp,-16
   1d6cc:	df000315 	stw	fp,12(sp)
   1d6d0:	df000304 	addi	fp,sp,12
   1d6d4:	e13ffe15 	stw	r4,-8(fp)
   1d6d8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1d6dc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1d6e0:	e0bfff17 	ldw	r2,-4(fp)
   1d6e4:	1000061e 	bne	r2,zero,1d700 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1d6e8:	e0bffe17 	ldw	r2,-8(fp)
   1d6ec:	1007883a 	mov	r3,r2
   1d6f0:	e0bffd03 	ldbu	r2,-12(fp)
   1d6f4:	1884b03a 	or	r2,r3,r2
   1d6f8:	e0bffd05 	stb	r2,-12(fp)
   1d6fc:	00000806 	br	1d720 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1d700:	e0bffe17 	ldw	r2,-8(fp)
   1d704:	1007883a 	mov	r3,r2
   1d708:	e0bffd03 	ldbu	r2,-12(fp)
   1d70c:	1884b03a 	or	r2,r3,r2
   1d710:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1d714:	e0bffd03 	ldbu	r2,-12(fp)
   1d718:	10801014 	ori	r2,r2,64
   1d71c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1d720:	e0fffd03 	ldbu	r3,-12(fp)
   1d724:	00bfe004 	movi	r2,-128
   1d728:	1884b03a 	or	r2,r3,r2
}
   1d72c:	e037883a 	mov	sp,fp
   1d730:	df000017 	ldw	fp,0(sp)
   1d734:	dec00104 	addi	sp,sp,4
   1d738:	f800283a 	ret

0001d73c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1d73c:	defffd04 	addi	sp,sp,-12
   1d740:	df000215 	stw	fp,8(sp)
   1d744:	df000204 	addi	fp,sp,8
   1d748:	e13ffe15 	stw	r4,-8(fp)
   1d74c:	2805883a 	mov	r2,r5
   1d750:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1d754:	e0bffe17 	ldw	r2,-8(fp)
   1d758:	10800a17 	ldw	r2,40(r2)
   1d75c:	1007883a 	mov	r3,r2
   1d760:	e0bfff03 	ldbu	r2,-4(fp)
   1d764:	18800025 	stbio	r2,0(r3)
}
   1d768:	e037883a 	mov	sp,fp
   1d76c:	df000017 	ldw	fp,0(sp)
   1d770:	dec00104 	addi	sp,sp,4
   1d774:	f800283a 	ret

0001d778 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1d778:	defffe04 	addi	sp,sp,-8
   1d77c:	df000115 	stw	fp,4(sp)
   1d780:	df000104 	addi	fp,sp,4
   1d784:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1d788:	e0bfff17 	ldw	r2,-4(fp)
   1d78c:	10800a17 	ldw	r2,40(r2)
   1d790:	1007883a 	mov	r3,r2
   1d794:	00800044 	movi	r2,1
   1d798:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1d79c:	e037883a 	mov	sp,fp
   1d7a0:	df000017 	ldw	fp,0(sp)
   1d7a4:	dec00104 	addi	sp,sp,4
   1d7a8:	f800283a 	ret

0001d7ac <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1d7ac:	defffc04 	addi	sp,sp,-16
   1d7b0:	dfc00315 	stw	ra,12(sp)
   1d7b4:	df000215 	stw	fp,8(sp)
   1d7b8:	df000204 	addi	fp,sp,8
   1d7bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1d7c0:	e13fff17 	ldw	r4,-4(fp)
   1d7c4:	014000b4 	movhi	r5,2
   1d7c8:	294b4604 	addi	r5,r5,11544
   1d7cc:	001ef980 	call	1ef98 <alt_find_dev>
   1d7d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d7d4:	e0bffe17 	ldw	r2,-8(fp)
}
   1d7d8:	e037883a 	mov	sp,fp
   1d7dc:	dfc00117 	ldw	ra,4(sp)
   1d7e0:	df000017 	ldw	fp,0(sp)
   1d7e4:	dec00204 	addi	sp,sp,8
   1d7e8:	f800283a 	ret

0001d7ec <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1d7ec:	defffb04 	addi	sp,sp,-20
   1d7f0:	df000415 	stw	fp,16(sp)
   1d7f4:	df000404 	addi	fp,sp,16
   1d7f8:	e13ffd15 	stw	r4,-12(fp)
   1d7fc:	e17ffe15 	stw	r5,-8(fp)
   1d800:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1d804:	e03ffc15 	stw	zero,-16(fp)
   1d808:	00000f06 	br	1d848 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1d80c:	e0bffd17 	ldw	r2,-12(fp)
   1d810:	10800a17 	ldw	r2,40(r2)
   1d814:	10800044 	addi	r2,r2,1
   1d818:	1009883a 	mov	r4,r2
   1d81c:	e0fffe17 	ldw	r3,-8(fp)
   1d820:	e0bffc17 	ldw	r2,-16(fp)
   1d824:	1885883a 	add	r2,r3,r2
   1d828:	10800003 	ldbu	r2,0(r2)
   1d82c:	10803fcc 	andi	r2,r2,255
   1d830:	1080201c 	xori	r2,r2,128
   1d834:	10bfe004 	addi	r2,r2,-128
   1d838:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1d83c:	e0bffc17 	ldw	r2,-16(fp)
   1d840:	10800044 	addi	r2,r2,1
   1d844:	e0bffc15 	stw	r2,-16(fp)
   1d848:	e0fffc17 	ldw	r3,-16(fp)
   1d84c:	e0bfff17 	ldw	r2,-4(fp)
   1d850:	18bfee36 	bltu	r3,r2,1d80c <__alt_mem_Flash_flash_data+0xf401d80c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1d854:	e037883a 	mov	sp,fp
   1d858:	df000017 	ldw	fp,0(sp)
   1d85c:	dec00104 	addi	sp,sp,4
   1d860:	f800283a 	ret

0001d864 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1d864:	defffd04 	addi	sp,sp,-12
   1d868:	df000215 	stw	fp,8(sp)
   1d86c:	df000204 	addi	fp,sp,8
   1d870:	e13ffe15 	stw	r4,-8(fp)
   1d874:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1d878:	00000d06 	br	1d8b0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1d87c:	e0bffe17 	ldw	r2,-8(fp)
   1d880:	10800a17 	ldw	r2,40(r2)
   1d884:	10800044 	addi	r2,r2,1
   1d888:	1007883a 	mov	r3,r2
   1d88c:	e0bfff17 	ldw	r2,-4(fp)
   1d890:	10800003 	ldbu	r2,0(r2)
   1d894:	10803fcc 	andi	r2,r2,255
   1d898:	1080201c 	xori	r2,r2,128
   1d89c:	10bfe004 	addi	r2,r2,-128
   1d8a0:	18800025 	stbio	r2,0(r3)
		++ptr;
   1d8a4:	e0bfff17 	ldw	r2,-4(fp)
   1d8a8:	10800044 	addi	r2,r2,1
   1d8ac:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1d8b0:	e0bfff17 	ldw	r2,-4(fp)
   1d8b4:	10800003 	ldbu	r2,0(r2)
   1d8b8:	10803fcc 	andi	r2,r2,255
   1d8bc:	1080201c 	xori	r2,r2,128
   1d8c0:	10bfe004 	addi	r2,r2,-128
   1d8c4:	103fed1e 	bne	r2,zero,1d87c <__alt_mem_Flash_flash_data+0xf401d87c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1d8c8:	e037883a 	mov	sp,fp
   1d8cc:	df000017 	ldw	fp,0(sp)
   1d8d0:	dec00104 	addi	sp,sp,4
   1d8d4:	f800283a 	ret

0001d8d8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1d8d8:	defffb04 	addi	sp,sp,-20
   1d8dc:	dfc00415 	stw	ra,16(sp)
   1d8e0:	df000315 	stw	fp,12(sp)
   1d8e4:	df000304 	addi	fp,sp,12
   1d8e8:	e13ffd15 	stw	r4,-12(fp)
   1d8ec:	e17ffe15 	stw	r5,-8(fp)
   1d8f0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1d8f4:	e0bffd17 	ldw	r2,-12(fp)
   1d8f8:	10c00017 	ldw	r3,0(r2)
   1d8fc:	e0bfff17 	ldw	r2,-4(fp)
   1d900:	1809883a 	mov	r4,r3
   1d904:	e17ffe17 	ldw	r5,-8(fp)
   1d908:	100d883a 	mov	r6,r2
   1d90c:	001d7ec0 	call	1d7ec <alt_up_character_lcd_write>
	return 0;
   1d910:	0005883a 	mov	r2,zero
}
   1d914:	e037883a 	mov	sp,fp
   1d918:	dfc00117 	ldw	ra,4(sp)
   1d91c:	df000017 	ldw	fp,0(sp)
   1d920:	dec00204 	addi	sp,sp,8
   1d924:	f800283a 	ret

0001d928 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1d928:	defffa04 	addi	sp,sp,-24
   1d92c:	dfc00515 	stw	ra,20(sp)
   1d930:	df000415 	stw	fp,16(sp)
   1d934:	df000404 	addi	fp,sp,16
   1d938:	e13ffd15 	stw	r4,-12(fp)
   1d93c:	e17ffe15 	stw	r5,-8(fp)
   1d940:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1d944:	e0bffe17 	ldw	r2,-8(fp)
   1d948:	10800a28 	cmpgeui	r2,r2,40
   1d94c:	1000031e 	bne	r2,zero,1d95c <alt_up_character_lcd_set_cursor_pos+0x34>
   1d950:	e0bfff17 	ldw	r2,-4(fp)
   1d954:	108000b0 	cmpltui	r2,r2,2
   1d958:	1000021e 	bne	r2,zero,1d964 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1d95c:	00bfffc4 	movi	r2,-1
   1d960:	00000906 	br	1d988 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1d964:	e13ffe17 	ldw	r4,-8(fp)
   1d968:	e17fff17 	ldw	r5,-4(fp)
   1d96c:	001d6c80 	call	1d6c8 <get_DDRAM_addr>
   1d970:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1d974:	e0bffc03 	ldbu	r2,-16(fp)
   1d978:	e13ffd17 	ldw	r4,-12(fp)
   1d97c:	100b883a 	mov	r5,r2
   1d980:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
	return 0;
   1d984:	0005883a 	mov	r2,zero
}
   1d988:	e037883a 	mov	sp,fp
   1d98c:	dfc00117 	ldw	ra,4(sp)
   1d990:	df000017 	ldw	fp,0(sp)
   1d994:	dec00204 	addi	sp,sp,8
   1d998:	f800283a 	ret

0001d99c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1d99c:	defffb04 	addi	sp,sp,-20
   1d9a0:	dfc00415 	stw	ra,16(sp)
   1d9a4:	df000315 	stw	fp,12(sp)
   1d9a8:	df000304 	addi	fp,sp,12
   1d9ac:	e13ffe15 	stw	r4,-8(fp)
   1d9b0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1d9b4:	e0bfff17 	ldw	r2,-4(fp)
   1d9b8:	1000011e 	bne	r2,zero,1d9c0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1d9bc:	00001406 	br	1da10 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1d9c0:	e0bfff17 	ldw	r2,-4(fp)
   1d9c4:	0080020e 	bge	zero,r2,1d9d0 <alt_up_character_lcd_shift_cursor+0x34>
   1d9c8:	00800504 	movi	r2,20
   1d9cc:	00000106 	br	1d9d4 <alt_up_character_lcd_shift_cursor+0x38>
   1d9d0:	00800404 	movi	r2,16
   1d9d4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1d9d8:	e0bfff17 	ldw	r2,-4(fp)
   1d9dc:	1000010e 	bge	r2,zero,1d9e4 <alt_up_character_lcd_shift_cursor+0x48>
   1d9e0:	0085c83a 	sub	r2,zero,r2
   1d9e4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d9e8:	00000406 	br	1d9fc <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1d9ec:	e0bffd43 	ldbu	r2,-11(fp)
   1d9f0:	e13ffe17 	ldw	r4,-8(fp)
   1d9f4:	100b883a 	mov	r5,r2
   1d9f8:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1d9fc:	e0bffd03 	ldbu	r2,-12(fp)
   1da00:	10ffffc4 	addi	r3,r2,-1
   1da04:	e0fffd05 	stb	r3,-12(fp)
   1da08:	10803fcc 	andi	r2,r2,255
   1da0c:	103ff71e 	bne	r2,zero,1d9ec <__alt_mem_Flash_flash_data+0xf401d9ec>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1da10:	e037883a 	mov	sp,fp
   1da14:	dfc00117 	ldw	ra,4(sp)
   1da18:	df000017 	ldw	fp,0(sp)
   1da1c:	dec00204 	addi	sp,sp,8
   1da20:	f800283a 	ret

0001da24 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1da24:	defffb04 	addi	sp,sp,-20
   1da28:	dfc00415 	stw	ra,16(sp)
   1da2c:	df000315 	stw	fp,12(sp)
   1da30:	df000304 	addi	fp,sp,12
   1da34:	e13ffe15 	stw	r4,-8(fp)
   1da38:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1da3c:	e0bfff17 	ldw	r2,-4(fp)
   1da40:	1000011e 	bne	r2,zero,1da48 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1da44:	00001406 	br	1da98 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1da48:	e0bfff17 	ldw	r2,-4(fp)
   1da4c:	0080020e 	bge	zero,r2,1da58 <alt_up_character_lcd_shift_display+0x34>
   1da50:	00800704 	movi	r2,28
   1da54:	00000106 	br	1da5c <alt_up_character_lcd_shift_display+0x38>
   1da58:	00800604 	movi	r2,24
   1da5c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1da60:	e0bfff17 	ldw	r2,-4(fp)
   1da64:	1000010e 	bge	r2,zero,1da6c <alt_up_character_lcd_shift_display+0x48>
   1da68:	0085c83a 	sub	r2,zero,r2
   1da6c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1da70:	00000406 	br	1da84 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1da74:	e0bffd43 	ldbu	r2,-11(fp)
   1da78:	e13ffe17 	ldw	r4,-8(fp)
   1da7c:	100b883a 	mov	r5,r2
   1da80:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1da84:	e0bffd03 	ldbu	r2,-12(fp)
   1da88:	10ffffc4 	addi	r3,r2,-1
   1da8c:	e0fffd05 	stb	r3,-12(fp)
   1da90:	10803fcc 	andi	r2,r2,255
   1da94:	103ff71e 	bne	r2,zero,1da74 <__alt_mem_Flash_flash_data+0xf401da74>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1da98:	e037883a 	mov	sp,fp
   1da9c:	dfc00117 	ldw	ra,4(sp)
   1daa0:	df000017 	ldw	fp,0(sp)
   1daa4:	dec00204 	addi	sp,sp,8
   1daa8:	f800283a 	ret

0001daac <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1daac:	defffa04 	addi	sp,sp,-24
   1dab0:	dfc00515 	stw	ra,20(sp)
   1dab4:	df000415 	stw	fp,16(sp)
   1dab8:	df000404 	addi	fp,sp,16
   1dabc:	e13ffd15 	stw	r4,-12(fp)
   1dac0:	e17ffe15 	stw	r5,-8(fp)
   1dac4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1dac8:	e0bffe17 	ldw	r2,-8(fp)
   1dacc:	10800a28 	cmpgeui	r2,r2,40
   1dad0:	1000031e 	bne	r2,zero,1dae0 <alt_up_character_lcd_erase_pos+0x34>
   1dad4:	e0bfff17 	ldw	r2,-4(fp)
   1dad8:	108000b0 	cmpltui	r2,r2,2
   1dadc:	1000021e 	bne	r2,zero,1dae8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1dae0:	00bfffc4 	movi	r2,-1
   1dae4:	00000f06 	br	1db24 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1dae8:	e13ffe17 	ldw	r4,-8(fp)
   1daec:	e17fff17 	ldw	r5,-4(fp)
   1daf0:	001d6c80 	call	1d6c8 <get_DDRAM_addr>
   1daf4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1daf8:	e0bffc03 	ldbu	r2,-16(fp)
   1dafc:	e13ffd17 	ldw	r4,-12(fp)
   1db00:	100b883a 	mov	r5,r2
   1db04:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1db08:	e0bffd17 	ldw	r2,-12(fp)
   1db0c:	10800a17 	ldw	r2,40(r2)
   1db10:	10800044 	addi	r2,r2,1
   1db14:	1007883a 	mov	r3,r2
   1db18:	00800084 	movi	r2,2
   1db1c:	18800025 	stbio	r2,0(r3)
	return 0;
   1db20:	0005883a 	mov	r2,zero
}
   1db24:	e037883a 	mov	sp,fp
   1db28:	dfc00117 	ldw	ra,4(sp)
   1db2c:	df000017 	ldw	fp,0(sp)
   1db30:	dec00204 	addi	sp,sp,8
   1db34:	f800283a 	ret

0001db38 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1db38:	defffd04 	addi	sp,sp,-12
   1db3c:	dfc00215 	stw	ra,8(sp)
   1db40:	df000115 	stw	fp,4(sp)
   1db44:	df000104 	addi	fp,sp,4
   1db48:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1db4c:	e13fff17 	ldw	r4,-4(fp)
   1db50:	01400304 	movi	r5,12
   1db54:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
}
   1db58:	e037883a 	mov	sp,fp
   1db5c:	dfc00117 	ldw	ra,4(sp)
   1db60:	df000017 	ldw	fp,0(sp)
   1db64:	dec00204 	addi	sp,sp,8
   1db68:	f800283a 	ret

0001db6c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1db6c:	defffd04 	addi	sp,sp,-12
   1db70:	dfc00215 	stw	ra,8(sp)
   1db74:	df000115 	stw	fp,4(sp)
   1db78:	df000104 	addi	fp,sp,4
   1db7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1db80:	e13fff17 	ldw	r4,-4(fp)
   1db84:	014003c4 	movi	r5,15
   1db88:	001d73c0 	call	1d73c <alt_up_character_lcd_send_cmd>
}
   1db8c:	e037883a 	mov	sp,fp
   1db90:	dfc00117 	ldw	ra,4(sp)
   1db94:	df000017 	ldw	fp,0(sp)
   1db98:	dec00204 	addi	sp,sp,8
   1db9c:	f800283a 	ret

0001dba0 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1dba0:	defffd04 	addi	sp,sp,-12
   1dba4:	df000215 	stw	fp,8(sp)
   1dba8:	df000204 	addi	fp,sp,8
   1dbac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1dbb0:	e0bfff17 	ldw	r2,-4(fp)
   1dbb4:	10800a17 	ldw	r2,40(r2)
   1dbb8:	10800104 	addi	r2,r2,4
   1dbbc:	10800037 	ldwio	r2,0(r2)
   1dbc0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1dbc4:	e0bffe17 	ldw	r2,-8(fp)
   1dbc8:	10800054 	ori	r2,r2,1
   1dbcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1dbd0:	e0bfff17 	ldw	r2,-4(fp)
   1dbd4:	10800a17 	ldw	r2,40(r2)
   1dbd8:	10800104 	addi	r2,r2,4
   1dbdc:	1007883a 	mov	r3,r2
   1dbe0:	e0bffe17 	ldw	r2,-8(fp)
   1dbe4:	18800035 	stwio	r2,0(r3)
}
   1dbe8:	e037883a 	mov	sp,fp
   1dbec:	df000017 	ldw	fp,0(sp)
   1dbf0:	dec00104 	addi	sp,sp,4
   1dbf4:	f800283a 	ret

0001dbf8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1dbf8:	defffd04 	addi	sp,sp,-12
   1dbfc:	df000215 	stw	fp,8(sp)
   1dc00:	df000204 	addi	fp,sp,8
   1dc04:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1dc08:	e0bfff17 	ldw	r2,-4(fp)
   1dc0c:	10800a17 	ldw	r2,40(r2)
   1dc10:	10800104 	addi	r2,r2,4
   1dc14:	10800037 	ldwio	r2,0(r2)
   1dc18:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1dc1c:	e0fffe17 	ldw	r3,-8(fp)
   1dc20:	00bfff84 	movi	r2,-2
   1dc24:	1884703a 	and	r2,r3,r2
   1dc28:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1dc2c:	e0bfff17 	ldw	r2,-4(fp)
   1dc30:	10800a17 	ldw	r2,40(r2)
   1dc34:	10800104 	addi	r2,r2,4
   1dc38:	1007883a 	mov	r3,r2
   1dc3c:	e0bffe17 	ldw	r2,-8(fp)
   1dc40:	18800035 	stwio	r2,0(r3)
}
   1dc44:	e037883a 	mov	sp,fp
   1dc48:	df000017 	ldw	fp,0(sp)
   1dc4c:	dec00104 	addi	sp,sp,4
   1dc50:	f800283a 	ret

0001dc54 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1dc54:	defffd04 	addi	sp,sp,-12
   1dc58:	df000215 	stw	fp,8(sp)
   1dc5c:	df000204 	addi	fp,sp,8
   1dc60:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1dc64:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1dc68:	e0bfff17 	ldw	r2,-4(fp)
   1dc6c:	10800a17 	ldw	r2,40(r2)
   1dc70:	10800084 	addi	r2,r2,2
   1dc74:	1080002b 	ldhuio	r2,0(r2)
   1dc78:	10bfffcc 	andi	r2,r2,65535
   1dc7c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1dc80:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1dc84:	e037883a 	mov	sp,fp
   1dc88:	df000017 	ldw	fp,0(sp)
   1dc8c:	dec00104 	addi	sp,sp,4
   1dc90:	f800283a 	ret

0001dc94 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1dc94:	defffd04 	addi	sp,sp,-12
   1dc98:	df000215 	stw	fp,8(sp)
   1dc9c:	df000204 	addi	fp,sp,8
   1dca0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1dca4:	e0bfff17 	ldw	r2,-4(fp)
   1dca8:	10800a17 	ldw	r2,40(r2)
   1dcac:	10800104 	addi	r2,r2,4
   1dcb0:	10800037 	ldwio	r2,0(r2)
   1dcb4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1dcb8:	e0bffe17 	ldw	r2,-8(fp)
   1dcbc:	1004d43a 	srli	r2,r2,16
}
   1dcc0:	e037883a 	mov	sp,fp
   1dcc4:	df000017 	ldw	fp,0(sp)
   1dcc8:	dec00104 	addi	sp,sp,4
   1dccc:	f800283a 	ret

0001dcd0 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1dcd0:	defffd04 	addi	sp,sp,-12
   1dcd4:	df000215 	stw	fp,8(sp)
   1dcd8:	df000204 	addi	fp,sp,8
   1dcdc:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1dce0:	e0bfff17 	ldw	r2,-4(fp)
   1dce4:	1080800c 	andi	r2,r2,512
   1dce8:	1004d27a 	srli	r2,r2,9
   1dcec:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1dcf0:	e0bffe17 	ldw	r2,-8(fp)
   1dcf4:	10000226 	beq	r2,zero,1dd00 <alt_up_irda_check_parity+0x30>
   1dcf8:	00bfffc4 	movi	r2,-1
   1dcfc:	00000106 	br	1dd04 <alt_up_irda_check_parity+0x34>
   1dd00:	0005883a 	mov	r2,zero
}
   1dd04:	e037883a 	mov	sp,fp
   1dd08:	df000017 	ldw	fp,0(sp)
   1dd0c:	dec00104 	addi	sp,sp,4
   1dd10:	f800283a 	ret

0001dd14 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1dd14:	defffd04 	addi	sp,sp,-12
   1dd18:	df000215 	stw	fp,8(sp)
   1dd1c:	df000204 	addi	fp,sp,8
   1dd20:	e13ffe15 	stw	r4,-8(fp)
   1dd24:	2805883a 	mov	r2,r5
   1dd28:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1dd2c:	e0bffe17 	ldw	r2,-8(fp)
   1dd30:	10800a17 	ldw	r2,40(r2)
   1dd34:	1007883a 	mov	r3,r2
   1dd38:	e0bfff03 	ldbu	r2,-4(fp)
   1dd3c:	18800035 	stwio	r2,0(r3)
	return 0;
   1dd40:	0005883a 	mov	r2,zero
}
   1dd44:	e037883a 	mov	sp,fp
   1dd48:	df000017 	ldw	fp,0(sp)
   1dd4c:	dec00104 	addi	sp,sp,4
   1dd50:	f800283a 	ret

0001dd54 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1dd54:	defffa04 	addi	sp,sp,-24
   1dd58:	dfc00515 	stw	ra,20(sp)
   1dd5c:	df000415 	stw	fp,16(sp)
   1dd60:	df000404 	addi	fp,sp,16
   1dd64:	e13ffd15 	stw	r4,-12(fp)
   1dd68:	e17ffe15 	stw	r5,-8(fp)
   1dd6c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1dd70:	e0bffd17 	ldw	r2,-12(fp)
   1dd74:	10800a17 	ldw	r2,40(r2)
   1dd78:	10800037 	ldwio	r2,0(r2)
   1dd7c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1dd80:	e0bffc17 	ldw	r2,-16(fp)
   1dd84:	1007883a 	mov	r3,r2
   1dd88:	e0bffe17 	ldw	r2,-8(fp)
   1dd8c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1dd90:	e13ffc17 	ldw	r4,-16(fp)
   1dd94:	001dcd00 	call	1dcd0 <alt_up_irda_check_parity>
   1dd98:	1007883a 	mov	r3,r2
   1dd9c:	e0bfff17 	ldw	r2,-4(fp)
   1dda0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1dda4:	e0bffc17 	ldw	r2,-16(fp)
   1dda8:	10a0000c 	andi	r2,r2,32768
   1ddac:	1004d3fa 	srli	r2,r2,15
   1ddb0:	10bfffc4 	addi	r2,r2,-1
}
   1ddb4:	e037883a 	mov	sp,fp
   1ddb8:	dfc00117 	ldw	ra,4(sp)
   1ddbc:	df000017 	ldw	fp,0(sp)
   1ddc0:	dec00204 	addi	sp,sp,8
   1ddc4:	f800283a 	ret

0001ddc8 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1ddc8:	defff804 	addi	sp,sp,-32
   1ddcc:	dfc00715 	stw	ra,28(sp)
   1ddd0:	df000615 	stw	fp,24(sp)
   1ddd4:	df000604 	addi	fp,sp,24
   1ddd8:	e13ffd15 	stw	r4,-12(fp)
   1dddc:	e17ffe15 	stw	r5,-8(fp)
   1dde0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1dde4:	e0bffd17 	ldw	r2,-12(fp)
   1dde8:	10800017 	ldw	r2,0(r2)
   1ddec:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1ddf0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1ddf4:	00000e06 	br	1de30 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1ddf8:	e0bffe17 	ldw	r2,-8(fp)
   1ddfc:	10c00044 	addi	r3,r2,1
   1de00:	e0fffe15 	stw	r3,-8(fp)
   1de04:	e0fffc04 	addi	r3,fp,-16
   1de08:	e13ffb17 	ldw	r4,-20(fp)
   1de0c:	100b883a 	mov	r5,r2
   1de10:	180d883a 	mov	r6,r3
   1de14:	001dd540 	call	1dd54 <alt_up_irda_read_data>
   1de18:	1000041e 	bne	r2,zero,1de2c <alt_up_irda_read_fd+0x64>
			count++;
   1de1c:	e0bffa17 	ldw	r2,-24(fp)
   1de20:	10800044 	addi	r2,r2,1
   1de24:	e0bffa15 	stw	r2,-24(fp)
   1de28:	00000106 	br	1de30 <alt_up_irda_read_fd+0x68>
		else
			break;
   1de2c:	00000406 	br	1de40 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1de30:	e0bfff17 	ldw	r2,-4(fp)
   1de34:	10ffffc4 	addi	r3,r2,-1
   1de38:	e0ffff15 	stw	r3,-4(fp)
   1de3c:	103fee1e 	bne	r2,zero,1ddf8 <__alt_mem_Flash_flash_data+0xf401ddf8>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1de40:	e0bffa17 	ldw	r2,-24(fp)
}
   1de44:	e037883a 	mov	sp,fp
   1de48:	dfc00117 	ldw	ra,4(sp)
   1de4c:	df000017 	ldw	fp,0(sp)
   1de50:	dec00204 	addi	sp,sp,8
   1de54:	f800283a 	ret

0001de58 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1de58:	defff904 	addi	sp,sp,-28
   1de5c:	dfc00615 	stw	ra,24(sp)
   1de60:	df000515 	stw	fp,20(sp)
   1de64:	df000504 	addi	fp,sp,20
   1de68:	e13ffd15 	stw	r4,-12(fp)
   1de6c:	e17ffe15 	stw	r5,-8(fp)
   1de70:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1de74:	e0bffd17 	ldw	r2,-12(fp)
   1de78:	10800017 	ldw	r2,0(r2)
   1de7c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1de80:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1de84:	00000e06 	br	1dec0 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1de88:	e0bffe17 	ldw	r2,-8(fp)
   1de8c:	10c00044 	addi	r3,r2,1
   1de90:	e0fffe15 	stw	r3,-8(fp)
   1de94:	10800003 	ldbu	r2,0(r2)
   1de98:	10803fcc 	andi	r2,r2,255
   1de9c:	e13ffc17 	ldw	r4,-16(fp)
   1dea0:	100b883a 	mov	r5,r2
   1dea4:	001dd140 	call	1dd14 <alt_up_irda_write_data>
   1dea8:	1000041e 	bne	r2,zero,1debc <alt_up_irda_write_fd+0x64>
			count++;
   1deac:	e0bffb17 	ldw	r2,-20(fp)
   1deb0:	10800044 	addi	r2,r2,1
   1deb4:	e0bffb15 	stw	r2,-20(fp)
   1deb8:	00000106 	br	1dec0 <alt_up_irda_write_fd+0x68>
		else
			break;
   1debc:	00000406 	br	1ded0 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1dec0:	e0bfff17 	ldw	r2,-4(fp)
   1dec4:	10ffffc4 	addi	r3,r2,-1
   1dec8:	e0ffff15 	stw	r3,-4(fp)
   1decc:	103fee1e 	bne	r2,zero,1de88 <__alt_mem_Flash_flash_data+0xf401de88>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1ded0:	e0bffb17 	ldw	r2,-20(fp)
}
   1ded4:	e037883a 	mov	sp,fp
   1ded8:	dfc00117 	ldw	ra,4(sp)
   1dedc:	df000017 	ldw	fp,0(sp)
   1dee0:	dec00204 	addi	sp,sp,8
   1dee4:	f800283a 	ret

0001dee8 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1dee8:	defffc04 	addi	sp,sp,-16
   1deec:	dfc00315 	stw	ra,12(sp)
   1def0:	df000215 	stw	fp,8(sp)
   1def4:	df000204 	addi	fp,sp,8
   1def8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1defc:	e13fff17 	ldw	r4,-4(fp)
   1df00:	014000b4 	movhi	r5,2
   1df04:	294b4604 	addi	r5,r5,11544
   1df08:	001ef980 	call	1ef98 <alt_find_dev>
   1df0c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1df10:	e0bffe17 	ldw	r2,-8(fp)
}
   1df14:	e037883a 	mov	sp,fp
   1df18:	dfc00117 	ldw	ra,4(sp)
   1df1c:	df000017 	ldw	fp,0(sp)
   1df20:	dec00204 	addi	sp,sp,8
   1df24:	f800283a 	ret

0001df28 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1df28:	defffc04 	addi	sp,sp,-16
   1df2c:	dfc00315 	stw	ra,12(sp)
   1df30:	df000215 	stw	fp,8(sp)
   1df34:	df000204 	addi	fp,sp,8
   1df38:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1df3c:	e13fff17 	ldw	r4,-4(fp)
   1df40:	014000b4 	movhi	r5,2
   1df44:	294b4604 	addi	r5,r5,11544
   1df48:	001ef980 	call	1ef98 <alt_find_dev>
   1df4c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1df50:	e0bffe17 	ldw	r2,-8(fp)
}
   1df54:	e037883a 	mov	sp,fp
   1df58:	dfc00117 	ldw	ra,4(sp)
   1df5c:	df000017 	ldw	fp,0(sp)
   1df60:	dec00204 	addi	sp,sp,8
   1df64:	f800283a 	ret

0001df68 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1df68:	defffd04 	addi	sp,sp,-12
   1df6c:	df000215 	stw	fp,8(sp)
   1df70:	df000204 	addi	fp,sp,8
   1df74:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1df78:	e0bfff17 	ldw	r2,-4(fp)
   1df7c:	1080400c 	andi	r2,r2,256
   1df80:	1004d23a 	srli	r2,r2,8
   1df84:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1df88:	e0bffe03 	ldbu	r2,-8(fp)
}
   1df8c:	e037883a 	mov	sp,fp
   1df90:	df000017 	ldw	fp,0(sp)
   1df94:	dec00104 	addi	sp,sp,4
   1df98:	f800283a 	ret

0001df9c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1df9c:	defffd04 	addi	sp,sp,-12
   1dfa0:	df000215 	stw	fp,8(sp)
   1dfa4:	df000204 	addi	fp,sp,8
   1dfa8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1dfac:	e0bfff17 	ldw	r2,-4(fp)
   1dfb0:	1080004c 	andi	r2,r2,1
   1dfb4:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1dfb8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dfbc:	e037883a 	mov	sp,fp
   1dfc0:	df000017 	ldw	fp,0(sp)
   1dfc4:	dec00104 	addi	sp,sp,4
   1dfc8:	f800283a 	ret

0001dfcc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1dfcc:	defffd04 	addi	sp,sp,-12
   1dfd0:	df000215 	stw	fp,8(sp)
   1dfd4:	df000204 	addi	fp,sp,8
   1dfd8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1dfdc:	e0bfff17 	ldw	r2,-4(fp)
   1dfe0:	1081000c 	andi	r2,r2,1024
   1dfe4:	1004d2ba 	srli	r2,r2,10
   1dfe8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1dfec:	e0bffe03 	ldbu	r2,-8(fp)
}
   1dff0:	e037883a 	mov	sp,fp
   1dff4:	df000017 	ldw	fp,0(sp)
   1dff8:	dec00104 	addi	sp,sp,4
   1dffc:	f800283a 	ret

0001e000 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1e000:	defffd04 	addi	sp,sp,-12
   1e004:	df000215 	stw	fp,8(sp)
   1e008:	df000204 	addi	fp,sp,8
   1e00c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1e010:	e0bfff17 	ldw	r2,-4(fp)
   1e014:	1004d43a 	srli	r2,r2,16
   1e018:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1e01c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e020:	e037883a 	mov	sp,fp
   1e024:	df000017 	ldw	fp,0(sp)
   1e028:	dec00104 	addi	sp,sp,4
   1e02c:	f800283a 	ret

0001e030 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1e030:	defffd04 	addi	sp,sp,-12
   1e034:	df000215 	stw	fp,8(sp)
   1e038:	df000204 	addi	fp,sp,8
   1e03c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1e040:	e0bfff17 	ldw	r2,-4(fp)
   1e044:	10a0000c 	andi	r2,r2,32768
   1e048:	1004d3fa 	srli	r2,r2,15
   1e04c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1e050:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e054:	e037883a 	mov	sp,fp
   1e058:	df000017 	ldw	fp,0(sp)
   1e05c:	dec00104 	addi	sp,sp,4
   1e060:	f800283a 	ret

0001e064 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1e064:	defffd04 	addi	sp,sp,-12
   1e068:	df000215 	stw	fp,8(sp)
   1e06c:	df000204 	addi	fp,sp,8
   1e070:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1e074:	e0bfff17 	ldw	r2,-4(fp)
   1e078:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1e07c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e080:	e037883a 	mov	sp,fp
   1e084:	df000017 	ldw	fp,0(sp)
   1e088:	dec00104 	addi	sp,sp,4
   1e08c:	f800283a 	ret

0001e090 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1e090:	defffb04 	addi	sp,sp,-20
   1e094:	dfc00415 	stw	ra,16(sp)
   1e098:	df000315 	stw	fp,12(sp)
   1e09c:	df000304 	addi	fp,sp,12
   1e0a0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1e0a4:	e13fff17 	ldw	r4,-4(fp)
   1e0a8:	01403fc4 	movi	r5,255
   1e0ac:	001e2ec0 	call	1e2ec <alt_up_ps2_write_data_byte_with_ack>
   1e0b0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1e0b4:	e0bffd17 	ldw	r2,-12(fp)
   1e0b8:	1000211e 	bne	r2,zero,1e140 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e0bc:	e0bffe04 	addi	r2,fp,-8
   1e0c0:	e13fff17 	ldw	r4,-4(fp)
   1e0c4:	100b883a 	mov	r5,r2
   1e0c8:	001e3500 	call	1e350 <alt_up_ps2_read_data_byte_timeout>
   1e0cc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1e0d0:	e0bffd17 	ldw	r2,-12(fp)
   1e0d4:	10001a1e 	bne	r2,zero,1e140 <alt_up_ps2_init+0xb0>
   1e0d8:	e0bffe03 	ldbu	r2,-8(fp)
   1e0dc:	10803fcc 	andi	r2,r2,255
   1e0e0:	10802a98 	cmpnei	r2,r2,170
   1e0e4:	1000161e 	bne	r2,zero,1e140 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e0e8:	e0bffe04 	addi	r2,fp,-8
   1e0ec:	e13fff17 	ldw	r4,-4(fp)
   1e0f0:	100b883a 	mov	r5,r2
   1e0f4:	001e3500 	call	1e350 <alt_up_ps2_read_data_byte_timeout>
   1e0f8:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1e0fc:	e0bffd17 	ldw	r2,-12(fp)
   1e100:	10bfe318 	cmpnei	r2,r2,-116
   1e104:	1000041e 	bne	r2,zero,1e118 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1e108:	e0bfff17 	ldw	r2,-4(fp)
   1e10c:	00c00044 	movi	r3,1
   1e110:	10c00d15 	stw	r3,52(r2)
   1e114:	00000a06 	br	1e140 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1e118:	e0bffd17 	ldw	r2,-12(fp)
   1e11c:	1000081e 	bne	r2,zero,1e140 <alt_up_ps2_init+0xb0>
   1e120:	e0bffe03 	ldbu	r2,-8(fp)
   1e124:	10803fcc 	andi	r2,r2,255
   1e128:	1000051e 	bne	r2,zero,1e140 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1e12c:	e0bfff17 	ldw	r2,-4(fp)
   1e130:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1e134:	e13fff17 	ldw	r4,-4(fp)
   1e138:	01403d04 	movi	r5,244
   1e13c:	001e2080 	call	1e208 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1e140:	e037883a 	mov	sp,fp
   1e144:	dfc00117 	ldw	ra,4(sp)
   1e148:	df000017 	ldw	fp,0(sp)
   1e14c:	dec00204 	addi	sp,sp,8
   1e150:	f800283a 	ret

0001e154 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e154:	defffd04 	addi	sp,sp,-12
   1e158:	df000215 	stw	fp,8(sp)
   1e15c:	df000204 	addi	fp,sp,8
   1e160:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e164:	e0bfff17 	ldw	r2,-4(fp)
   1e168:	10800a17 	ldw	r2,40(r2)
   1e16c:	10800104 	addi	r2,r2,4
   1e170:	10800037 	ldwio	r2,0(r2)
   1e174:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e178:	e0bffe17 	ldw	r2,-8(fp)
   1e17c:	10800054 	ori	r2,r2,1
   1e180:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e184:	e0bfff17 	ldw	r2,-4(fp)
   1e188:	10800a17 	ldw	r2,40(r2)
   1e18c:	10800104 	addi	r2,r2,4
   1e190:	1007883a 	mov	r3,r2
   1e194:	e0bffe17 	ldw	r2,-8(fp)
   1e198:	18800035 	stwio	r2,0(r3)
}
   1e19c:	e037883a 	mov	sp,fp
   1e1a0:	df000017 	ldw	fp,0(sp)
   1e1a4:	dec00104 	addi	sp,sp,4
   1e1a8:	f800283a 	ret

0001e1ac <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e1ac:	defffd04 	addi	sp,sp,-12
   1e1b0:	df000215 	stw	fp,8(sp)
   1e1b4:	df000204 	addi	fp,sp,8
   1e1b8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e1bc:	e0bfff17 	ldw	r2,-4(fp)
   1e1c0:	10800a17 	ldw	r2,40(r2)
   1e1c4:	10800104 	addi	r2,r2,4
   1e1c8:	10800037 	ldwio	r2,0(r2)
   1e1cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e1d0:	e0fffe17 	ldw	r3,-8(fp)
   1e1d4:	00bfff84 	movi	r2,-2
   1e1d8:	1884703a 	and	r2,r3,r2
   1e1dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e1e0:	e0bfff17 	ldw	r2,-4(fp)
   1e1e4:	10800a17 	ldw	r2,40(r2)
   1e1e8:	10800104 	addi	r2,r2,4
   1e1ec:	1007883a 	mov	r3,r2
   1e1f0:	e0bffe17 	ldw	r2,-8(fp)
   1e1f4:	18800035 	stwio	r2,0(r3)
}
   1e1f8:	e037883a 	mov	sp,fp
   1e1fc:	df000017 	ldw	fp,0(sp)
   1e200:	dec00104 	addi	sp,sp,4
   1e204:	f800283a 	ret

0001e208 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e208:	defffb04 	addi	sp,sp,-20
   1e20c:	dfc00415 	stw	ra,16(sp)
   1e210:	df000315 	stw	fp,12(sp)
   1e214:	df000304 	addi	fp,sp,12
   1e218:	e13ffe15 	stw	r4,-8(fp)
   1e21c:	2805883a 	mov	r2,r5
   1e220:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1e224:	e0bffe17 	ldw	r2,-8(fp)
   1e228:	10800a17 	ldw	r2,40(r2)
   1e22c:	1007883a 	mov	r3,r2
   1e230:	e0bfff03 	ldbu	r2,-4(fp)
   1e234:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1e238:	e0bffe17 	ldw	r2,-8(fp)
   1e23c:	10800a17 	ldw	r2,40(r2)
   1e240:	10800104 	addi	r2,r2,4
   1e244:	10800037 	ldwio	r2,0(r2)
   1e248:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1e24c:	e13ffd17 	ldw	r4,-12(fp)
   1e250:	001dfcc0 	call	1dfcc <read_CE_bit>
   1e254:	10803fcc 	andi	r2,r2,255
   1e258:	10000226 	beq	r2,zero,1e264 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1e25c:	00bffec4 	movi	r2,-5
   1e260:	00000106 	br	1e268 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1e264:	0005883a 	mov	r2,zero
}
   1e268:	e037883a 	mov	sp,fp
   1e26c:	dfc00117 	ldw	ra,4(sp)
   1e270:	df000017 	ldw	fp,0(sp)
   1e274:	dec00204 	addi	sp,sp,8
   1e278:	f800283a 	ret

0001e27c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1e27c:	defffc04 	addi	sp,sp,-16
   1e280:	dfc00315 	stw	ra,12(sp)
   1e284:	df000215 	stw	fp,8(sp)
   1e288:	df000204 	addi	fp,sp,8
   1e28c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1e290:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1e294:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1e298:	e0bffe44 	addi	r2,fp,-7
   1e29c:	e13fff17 	ldw	r4,-4(fp)
   1e2a0:	100b883a 	mov	r5,r2
   1e2a4:	001e3500 	call	1e350 <alt_up_ps2_read_data_byte_timeout>
   1e2a8:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1e2ac:	e0bffe03 	ldbu	r2,-8(fp)
   1e2b0:	1000061e 	bne	r2,zero,1e2cc <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1e2b4:	e0bffe43 	ldbu	r2,-7(fp)
   1e2b8:	10803fcc 	andi	r2,r2,255
   1e2bc:	10803e98 	cmpnei	r2,r2,250
   1e2c0:	1000041e 	bne	r2,zero,1e2d4 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1e2c4:	0005883a 	mov	r2,zero
   1e2c8:	00000306 	br	1e2d8 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1e2cc:	e0bffe03 	ldbu	r2,-8(fp)
   1e2d0:	00000106 	br	1e2d8 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1e2d4:	003ff006 	br	1e298 <__alt_mem_Flash_flash_data+0xf401e298>
	return -ETIMEDOUT;
}
   1e2d8:	e037883a 	mov	sp,fp
   1e2dc:	dfc00117 	ldw	ra,4(sp)
   1e2e0:	df000017 	ldw	fp,0(sp)
   1e2e4:	dec00204 	addi	sp,sp,8
   1e2e8:	f800283a 	ret

0001e2ec <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e2ec:	defffa04 	addi	sp,sp,-24
   1e2f0:	dfc00515 	stw	ra,20(sp)
   1e2f4:	df000415 	stw	fp,16(sp)
   1e2f8:	df000404 	addi	fp,sp,16
   1e2fc:	e13ffe15 	stw	r4,-8(fp)
   1e300:	2805883a 	mov	r2,r5
   1e304:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1e308:	e0bfff03 	ldbu	r2,-4(fp)
   1e30c:	e13ffe17 	ldw	r4,-8(fp)
   1e310:	100b883a 	mov	r5,r2
   1e314:	001e2080 	call	1e208 <alt_up_ps2_write_data_byte>
   1e318:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1e31c:	e0bffc17 	ldw	r2,-16(fp)
   1e320:	10000226 	beq	r2,zero,1e32c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1e324:	e0bffc17 	ldw	r2,-16(fp)
   1e328:	00000406 	br	1e33c <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1e32c:	e13ffe17 	ldw	r4,-8(fp)
   1e330:	001e27c0 	call	1e27c <alt_up_ps2_wait_for_ack>
   1e334:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1e338:	e0bffd17 	ldw	r2,-12(fp)
}
   1e33c:	e037883a 	mov	sp,fp
   1e340:	dfc00117 	ldw	ra,4(sp)
   1e344:	df000017 	ldw	fp,0(sp)
   1e348:	dec00204 	addi	sp,sp,8
   1e34c:	f800283a 	ret

0001e350 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e350:	defffa04 	addi	sp,sp,-24
   1e354:	dfc00515 	stw	ra,20(sp)
   1e358:	df000415 	stw	fp,16(sp)
   1e35c:	df000404 	addi	fp,sp,16
   1e360:	e13ffe15 	stw	r4,-8(fp)
   1e364:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e368:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1e36c:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1e370:	e0bffc17 	ldw	r2,-16(fp)
   1e374:	10800044 	addi	r2,r2,1
   1e378:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e37c:	e0bffe17 	ldw	r2,-8(fp)
   1e380:	10800a17 	ldw	r2,40(r2)
   1e384:	10800037 	ldwio	r2,0(r2)
   1e388:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1e38c:	e13ffd17 	ldw	r4,-12(fp)
   1e390:	001e0300 	call	1e030 <read_data_valid>
   1e394:	10803fcc 	andi	r2,r2,255
   1e398:	10000726 	beq	r2,zero,1e3b8 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1e39c:	e13ffd17 	ldw	r4,-12(fp)
   1e3a0:	001e0640 	call	1e064 <read_data_byte>
   1e3a4:	1007883a 	mov	r3,r2
   1e3a8:	e0bfff17 	ldw	r2,-4(fp)
   1e3ac:	10c00005 	stb	r3,0(r2)
			return 0;
   1e3b0:	0005883a 	mov	r2,zero
   1e3b4:	00000a06 	br	1e3e0 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1e3b8:	e0bffe17 	ldw	r2,-8(fp)
   1e3bc:	10800c17 	ldw	r2,48(r2)
   1e3c0:	10000626 	beq	r2,zero,1e3dc <alt_up_ps2_read_data_byte_timeout+0x8c>
   1e3c4:	e0bffe17 	ldw	r2,-8(fp)
   1e3c8:	10c00c17 	ldw	r3,48(r2)
   1e3cc:	e0bffc17 	ldw	r2,-16(fp)
   1e3d0:	1880022e 	bgeu	r3,r2,1e3dc <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1e3d4:	00bfe304 	movi	r2,-116
   1e3d8:	00000106 	br	1e3e0 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1e3dc:	003fe406 	br	1e370 <__alt_mem_Flash_flash_data+0xf401e370>
}
   1e3e0:	e037883a 	mov	sp,fp
   1e3e4:	dfc00117 	ldw	ra,4(sp)
   1e3e8:	df000017 	ldw	fp,0(sp)
   1e3ec:	dec00204 	addi	sp,sp,8
   1e3f0:	f800283a 	ret

0001e3f4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e3f4:	defffb04 	addi	sp,sp,-20
   1e3f8:	dfc00415 	stw	ra,16(sp)
   1e3fc:	df000315 	stw	fp,12(sp)
   1e400:	df000304 	addi	fp,sp,12
   1e404:	e13ffe15 	stw	r4,-8(fp)
   1e408:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e40c:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e410:	e0bffe17 	ldw	r2,-8(fp)
   1e414:	10800a17 	ldw	r2,40(r2)
   1e418:	10800037 	ldwio	r2,0(r2)
   1e41c:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1e420:	e13ffd17 	ldw	r4,-12(fp)
   1e424:	001e0300 	call	1e030 <read_data_valid>
   1e428:	10803fcc 	andi	r2,r2,255
   1e42c:	10000726 	beq	r2,zero,1e44c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1e430:	e13ffd17 	ldw	r4,-12(fp)
   1e434:	001e0640 	call	1e064 <read_data_byte>
   1e438:	1007883a 	mov	r3,r2
   1e43c:	e0bfff17 	ldw	r2,-4(fp)
   1e440:	10c00005 	stb	r3,0(r2)
		return 0;
   1e444:	0005883a 	mov	r2,zero
   1e448:	00000106 	br	1e450 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1e44c:	00bfffc4 	movi	r2,-1
}
   1e450:	e037883a 	mov	sp,fp
   1e454:	dfc00117 	ldw	ra,4(sp)
   1e458:	df000017 	ldw	fp,0(sp)
   1e45c:	dec00204 	addi	sp,sp,8
   1e460:	f800283a 	ret

0001e464 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1e464:	defffb04 	addi	sp,sp,-20
   1e468:	dfc00415 	stw	ra,16(sp)
   1e46c:	df000315 	stw	fp,12(sp)
   1e470:	df000304 	addi	fp,sp,12
   1e474:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1e478:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1e47c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e480:	e0bfff17 	ldw	r2,-4(fp)
   1e484:	10800a17 	ldw	r2,40(r2)
   1e488:	10800037 	ldwio	r2,0(r2)
   1e48c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1e490:	e13ffe17 	ldw	r4,-8(fp)
   1e494:	001e0000 	call	1e000 <read_num_bytes_available>
   1e498:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1e49c:	e0bffd0b 	ldhu	r2,-12(fp)
   1e4a0:	103ff71e 	bne	r2,zero,1e480 <__alt_mem_Flash_flash_data+0xf401e480>
}
   1e4a4:	e037883a 	mov	sp,fp
   1e4a8:	dfc00117 	ldw	ra,4(sp)
   1e4ac:	df000017 	ldw	fp,0(sp)
   1e4b0:	dec00204 	addi	sp,sp,8
   1e4b4:	f800283a 	ret

0001e4b8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e4b8:	defff804 	addi	sp,sp,-32
   1e4bc:	dfc00715 	stw	ra,28(sp)
   1e4c0:	df000615 	stw	fp,24(sp)
   1e4c4:	df000604 	addi	fp,sp,24
   1e4c8:	e13ffd15 	stw	r4,-12(fp)
   1e4cc:	e17ffe15 	stw	r5,-8(fp)
   1e4d0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1e4d4:	e0bffd17 	ldw	r2,-12(fp)
   1e4d8:	10800017 	ldw	r2,0(r2)
   1e4dc:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1e4e0:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1e4e4:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1e4e8:	e0fffc17 	ldw	r3,-16(fp)
   1e4ec:	e0bfff17 	ldw	r2,-4(fp)
   1e4f0:	18bffd16 	blt	r3,r2,1e4e8 <__alt_mem_Flash_flash_data+0xf401e4e8>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1e4f4:	e0bffe17 	ldw	r2,-8(fp)
   1e4f8:	10c00044 	addi	r3,r2,1
   1e4fc:	e0fffe15 	stw	r3,-8(fp)
   1e500:	e13ffa17 	ldw	r4,-24(fp)
   1e504:	100b883a 	mov	r5,r2
   1e508:	001e3500 	call	1e350 <alt_up_ps2_read_data_byte_timeout>
   1e50c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1e510:	e0bffb17 	ldw	r2,-20(fp)
   1e514:	10000226 	beq	r2,zero,1e520 <alt_up_ps2_read_fd+0x68>
			return count;
   1e518:	e0bffc17 	ldw	r2,-16(fp)
   1e51c:	00000406 	br	1e530 <alt_up_ps2_read_fd+0x78>
		count++;
   1e520:	e0bffc17 	ldw	r2,-16(fp)
   1e524:	10800044 	addi	r2,r2,1
   1e528:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1e52c:	e0bffc17 	ldw	r2,-16(fp)
}
   1e530:	e037883a 	mov	sp,fp
   1e534:	dfc00117 	ldw	ra,4(sp)
   1e538:	df000017 	ldw	fp,0(sp)
   1e53c:	dec00204 	addi	sp,sp,8
   1e540:	f800283a 	ret

0001e544 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e544:	defff804 	addi	sp,sp,-32
   1e548:	dfc00715 	stw	ra,28(sp)
   1e54c:	df000615 	stw	fp,24(sp)
   1e550:	df000604 	addi	fp,sp,24
   1e554:	e13ffd15 	stw	r4,-12(fp)
   1e558:	e17ffe15 	stw	r5,-8(fp)
   1e55c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1e560:	e0bffd17 	ldw	r2,-12(fp)
   1e564:	10800017 	ldw	r2,0(r2)
   1e568:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1e56c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1e570:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1e574:	00001006 	br	1e5b8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1e578:	e0bffe17 	ldw	r2,-8(fp)
   1e57c:	10c00044 	addi	r3,r2,1
   1e580:	e0fffe15 	stw	r3,-8(fp)
   1e584:	10800003 	ldbu	r2,0(r2)
   1e588:	10803fcc 	andi	r2,r2,255
   1e58c:	e13ffb17 	ldw	r4,-20(fp)
   1e590:	100b883a 	mov	r5,r2
   1e594:	001e2080 	call	1e208 <alt_up_ps2_write_data_byte>
   1e598:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1e59c:	e0bffc17 	ldw	r2,-16(fp)
   1e5a0:	10000226 	beq	r2,zero,1e5ac <alt_up_ps2_write_fd+0x68>
			return count;
   1e5a4:	e0bffa17 	ldw	r2,-24(fp)
   1e5a8:	00000706 	br	1e5c8 <alt_up_ps2_write_fd+0x84>
		count++;
   1e5ac:	e0bffa17 	ldw	r2,-24(fp)
   1e5b0:	10800044 	addi	r2,r2,1
   1e5b4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1e5b8:	e0fffa17 	ldw	r3,-24(fp)
   1e5bc:	e0bfff17 	ldw	r2,-4(fp)
   1e5c0:	18bfed16 	blt	r3,r2,1e578 <__alt_mem_Flash_flash_data+0xf401e578>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1e5c4:	e0bffa17 	ldw	r2,-24(fp)
}
   1e5c8:	e037883a 	mov	sp,fp
   1e5cc:	dfc00117 	ldw	ra,4(sp)
   1e5d0:	df000017 	ldw	fp,0(sp)
   1e5d4:	dec00204 	addi	sp,sp,8
   1e5d8:	f800283a 	ret

0001e5dc <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1e5dc:	defffc04 	addi	sp,sp,-16
   1e5e0:	dfc00315 	stw	ra,12(sp)
   1e5e4:	df000215 	stw	fp,8(sp)
   1e5e8:	df000204 	addi	fp,sp,8
   1e5ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1e5f0:	e13fff17 	ldw	r4,-4(fp)
   1e5f4:	014000b4 	movhi	r5,2
   1e5f8:	294b4604 	addi	r5,r5,11544
   1e5fc:	001ef980 	call	1ef98 <alt_find_dev>
   1e600:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e604:	e0bffe17 	ldw	r2,-8(fp)
}
   1e608:	e037883a 	mov	sp,fp
   1e60c:	dfc00117 	ldw	ra,4(sp)
   1e610:	df000017 	ldw	fp,0(sp)
   1e614:	dec00204 	addi	sp,sp,8
   1e618:	f800283a 	ret

0001e61c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1e61c:	defffd04 	addi	sp,sp,-12
   1e620:	df000215 	stw	fp,8(sp)
   1e624:	df000204 	addi	fp,sp,8
   1e628:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e62c:	e0bfff17 	ldw	r2,-4(fp)
   1e630:	10800a17 	ldw	r2,40(r2)
   1e634:	10800104 	addi	r2,r2,4
   1e638:	10800037 	ldwio	r2,0(r2)
   1e63c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1e640:	e0bffe17 	ldw	r2,-8(fp)
   1e644:	10800054 	ori	r2,r2,1
   1e648:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e64c:	e0bfff17 	ldw	r2,-4(fp)
   1e650:	10800a17 	ldw	r2,40(r2)
   1e654:	10800104 	addi	r2,r2,4
   1e658:	1007883a 	mov	r3,r2
   1e65c:	e0bffe17 	ldw	r2,-8(fp)
   1e660:	18800035 	stwio	r2,0(r3)
}
   1e664:	e037883a 	mov	sp,fp
   1e668:	df000017 	ldw	fp,0(sp)
   1e66c:	dec00104 	addi	sp,sp,4
   1e670:	f800283a 	ret

0001e674 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1e674:	defffd04 	addi	sp,sp,-12
   1e678:	df000215 	stw	fp,8(sp)
   1e67c:	df000204 	addi	fp,sp,8
   1e680:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e684:	e0bfff17 	ldw	r2,-4(fp)
   1e688:	10800a17 	ldw	r2,40(r2)
   1e68c:	10800104 	addi	r2,r2,4
   1e690:	10800037 	ldwio	r2,0(r2)
   1e694:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1e698:	e0fffe17 	ldw	r3,-8(fp)
   1e69c:	00bfff84 	movi	r2,-2
   1e6a0:	1884703a 	and	r2,r3,r2
   1e6a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1e6a8:	e0bfff17 	ldw	r2,-4(fp)
   1e6ac:	10800a17 	ldw	r2,40(r2)
   1e6b0:	10800104 	addi	r2,r2,4
   1e6b4:	1007883a 	mov	r3,r2
   1e6b8:	e0bffe17 	ldw	r2,-8(fp)
   1e6bc:	18800035 	stwio	r2,0(r3)
}
   1e6c0:	e037883a 	mov	sp,fp
   1e6c4:	df000017 	ldw	fp,0(sp)
   1e6c8:	dec00104 	addi	sp,sp,4
   1e6cc:	f800283a 	ret

0001e6d0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1e6d0:	defffd04 	addi	sp,sp,-12
   1e6d4:	df000215 	stw	fp,8(sp)
   1e6d8:	df000204 	addi	fp,sp,8
   1e6dc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e6e0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1e6e4:	e0bfff17 	ldw	r2,-4(fp)
   1e6e8:	10800a17 	ldw	r2,40(r2)
   1e6ec:	10800084 	addi	r2,r2,2
   1e6f0:	1080002b 	ldhuio	r2,0(r2)
   1e6f4:	10bfffcc 	andi	r2,r2,65535
   1e6f8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1e6fc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e700:	e037883a 	mov	sp,fp
   1e704:	df000017 	ldw	fp,0(sp)
   1e708:	dec00104 	addi	sp,sp,4
   1e70c:	f800283a 	ret

0001e710 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1e710:	defffd04 	addi	sp,sp,-12
   1e714:	df000215 	stw	fp,8(sp)
   1e718:	df000204 	addi	fp,sp,8
   1e71c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1e720:	e0bfff17 	ldw	r2,-4(fp)
   1e724:	10800a17 	ldw	r2,40(r2)
   1e728:	10800104 	addi	r2,r2,4
   1e72c:	10800037 	ldwio	r2,0(r2)
   1e730:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1e734:	e0bffe17 	ldw	r2,-8(fp)
   1e738:	1004d43a 	srli	r2,r2,16
}
   1e73c:	e037883a 	mov	sp,fp
   1e740:	df000017 	ldw	fp,0(sp)
   1e744:	dec00104 	addi	sp,sp,4
   1e748:	f800283a 	ret

0001e74c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1e74c:	defffd04 	addi	sp,sp,-12
   1e750:	df000215 	stw	fp,8(sp)
   1e754:	df000204 	addi	fp,sp,8
   1e758:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1e75c:	e0bfff17 	ldw	r2,-4(fp)
   1e760:	1080800c 	andi	r2,r2,512
   1e764:	1004d27a 	srli	r2,r2,9
   1e768:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e76c:	e0bffe17 	ldw	r2,-8(fp)
   1e770:	10000226 	beq	r2,zero,1e77c <alt_up_rs232_check_parity+0x30>
   1e774:	00bfffc4 	movi	r2,-1
   1e778:	00000106 	br	1e780 <alt_up_rs232_check_parity+0x34>
   1e77c:	0005883a 	mov	r2,zero
}
   1e780:	e037883a 	mov	sp,fp
   1e784:	df000017 	ldw	fp,0(sp)
   1e788:	dec00104 	addi	sp,sp,4
   1e78c:	f800283a 	ret

0001e790 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1e790:	defffd04 	addi	sp,sp,-12
   1e794:	df000215 	stw	fp,8(sp)
   1e798:	df000204 	addi	fp,sp,8
   1e79c:	e13ffe15 	stw	r4,-8(fp)
   1e7a0:	2805883a 	mov	r2,r5
   1e7a4:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1e7a8:	e0bffe17 	ldw	r2,-8(fp)
   1e7ac:	10800a17 	ldw	r2,40(r2)
   1e7b0:	1007883a 	mov	r3,r2
   1e7b4:	e0bfff03 	ldbu	r2,-4(fp)
   1e7b8:	18800035 	stwio	r2,0(r3)
	return 0;
   1e7bc:	0005883a 	mov	r2,zero
}
   1e7c0:	e037883a 	mov	sp,fp
   1e7c4:	df000017 	ldw	fp,0(sp)
   1e7c8:	dec00104 	addi	sp,sp,4
   1e7cc:	f800283a 	ret

0001e7d0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1e7d0:	defffa04 	addi	sp,sp,-24
   1e7d4:	dfc00515 	stw	ra,20(sp)
   1e7d8:	df000415 	stw	fp,16(sp)
   1e7dc:	df000404 	addi	fp,sp,16
   1e7e0:	e13ffd15 	stw	r4,-12(fp)
   1e7e4:	e17ffe15 	stw	r5,-8(fp)
   1e7e8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1e7ec:	e0bffd17 	ldw	r2,-12(fp)
   1e7f0:	10800a17 	ldw	r2,40(r2)
   1e7f4:	10800037 	ldwio	r2,0(r2)
   1e7f8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1e7fc:	e0bffc17 	ldw	r2,-16(fp)
   1e800:	1007883a 	mov	r3,r2
   1e804:	e0bffe17 	ldw	r2,-8(fp)
   1e808:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1e80c:	e13ffc17 	ldw	r4,-16(fp)
   1e810:	001e74c0 	call	1e74c <alt_up_rs232_check_parity>
   1e814:	1007883a 	mov	r3,r2
   1e818:	e0bfff17 	ldw	r2,-4(fp)
   1e81c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1e820:	e0bffc17 	ldw	r2,-16(fp)
   1e824:	10a0000c 	andi	r2,r2,32768
   1e828:	1004d3fa 	srli	r2,r2,15
   1e82c:	10bfffc4 	addi	r2,r2,-1
}
   1e830:	e037883a 	mov	sp,fp
   1e834:	dfc00117 	ldw	ra,4(sp)
   1e838:	df000017 	ldw	fp,0(sp)
   1e83c:	dec00204 	addi	sp,sp,8
   1e840:	f800283a 	ret

0001e844 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e844:	defff804 	addi	sp,sp,-32
   1e848:	dfc00715 	stw	ra,28(sp)
   1e84c:	df000615 	stw	fp,24(sp)
   1e850:	df000604 	addi	fp,sp,24
   1e854:	e13ffd15 	stw	r4,-12(fp)
   1e858:	e17ffe15 	stw	r5,-8(fp)
   1e85c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e860:	e0bffd17 	ldw	r2,-12(fp)
   1e864:	10800017 	ldw	r2,0(r2)
   1e868:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e86c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e870:	00000e06 	br	1e8ac <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1e874:	e0bffe17 	ldw	r2,-8(fp)
   1e878:	10c00044 	addi	r3,r2,1
   1e87c:	e0fffe15 	stw	r3,-8(fp)
   1e880:	e0fffc04 	addi	r3,fp,-16
   1e884:	e13ffb17 	ldw	r4,-20(fp)
   1e888:	100b883a 	mov	r5,r2
   1e88c:	180d883a 	mov	r6,r3
   1e890:	001e7d00 	call	1e7d0 <alt_up_rs232_read_data>
   1e894:	1000041e 	bne	r2,zero,1e8a8 <alt_up_rs232_read_fd+0x64>
			count++;
   1e898:	e0bffa17 	ldw	r2,-24(fp)
   1e89c:	10800044 	addi	r2,r2,1
   1e8a0:	e0bffa15 	stw	r2,-24(fp)
   1e8a4:	00000106 	br	1e8ac <alt_up_rs232_read_fd+0x68>
		else
			break;
   1e8a8:	00000406 	br	1e8bc <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e8ac:	e0bfff17 	ldw	r2,-4(fp)
   1e8b0:	10ffffc4 	addi	r3,r2,-1
   1e8b4:	e0ffff15 	stw	r3,-4(fp)
   1e8b8:	103fee1e 	bne	r2,zero,1e874 <__alt_mem_Flash_flash_data+0xf401e874>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e8bc:	e0bffa17 	ldw	r2,-24(fp)
}
   1e8c0:	e037883a 	mov	sp,fp
   1e8c4:	dfc00117 	ldw	ra,4(sp)
   1e8c8:	df000017 	ldw	fp,0(sp)
   1e8cc:	dec00204 	addi	sp,sp,8
   1e8d0:	f800283a 	ret

0001e8d4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e8d4:	defff904 	addi	sp,sp,-28
   1e8d8:	dfc00615 	stw	ra,24(sp)
   1e8dc:	df000515 	stw	fp,20(sp)
   1e8e0:	df000504 	addi	fp,sp,20
   1e8e4:	e13ffd15 	stw	r4,-12(fp)
   1e8e8:	e17ffe15 	stw	r5,-8(fp)
   1e8ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1e8f0:	e0bffd17 	ldw	r2,-12(fp)
   1e8f4:	10800017 	ldw	r2,0(r2)
   1e8f8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e8fc:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e900:	00000f06 	br	1e940 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1e904:	e0bffe17 	ldw	r2,-8(fp)
   1e908:	10800003 	ldbu	r2,0(r2)
   1e90c:	10803fcc 	andi	r2,r2,255
   1e910:	e13ffc17 	ldw	r4,-16(fp)
   1e914:	100b883a 	mov	r5,r2
   1e918:	001e7900 	call	1e790 <alt_up_rs232_write_data>
   1e91c:	1000071e 	bne	r2,zero,1e93c <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1e920:	e0bffb17 	ldw	r2,-20(fp)
   1e924:	10800044 	addi	r2,r2,1
   1e928:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1e92c:	e0bffe17 	ldw	r2,-8(fp)
   1e930:	10800044 	addi	r2,r2,1
   1e934:	e0bffe15 	stw	r2,-8(fp)
   1e938:	00000106 	br	1e940 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1e93c:	00000406 	br	1e950 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1e940:	e0bfff17 	ldw	r2,-4(fp)
   1e944:	10ffffc4 	addi	r3,r2,-1
   1e948:	e0ffff15 	stw	r3,-4(fp)
   1e94c:	103fed1e 	bne	r2,zero,1e904 <__alt_mem_Flash_flash_data+0xf401e904>
			ptr++;
		}
		else
			break;
	}
	return count;
   1e950:	e0bffb17 	ldw	r2,-20(fp)
}
   1e954:	e037883a 	mov	sp,fp
   1e958:	dfc00117 	ldw	ra,4(sp)
   1e95c:	df000017 	ldw	fp,0(sp)
   1e960:	dec00204 	addi	sp,sp,8
   1e964:	f800283a 	ret

0001e968 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1e968:	defffc04 	addi	sp,sp,-16
   1e96c:	dfc00315 	stw	ra,12(sp)
   1e970:	df000215 	stw	fp,8(sp)
   1e974:	df000204 	addi	fp,sp,8
   1e978:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1e97c:	e13fff17 	ldw	r4,-4(fp)
   1e980:	014000b4 	movhi	r5,2
   1e984:	294b4604 	addi	r5,r5,11544
   1e988:	001ef980 	call	1ef98 <alt_find_dev>
   1e98c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e990:	e0bffe17 	ldw	r2,-8(fp)
}
   1e994:	e037883a 	mov	sp,fp
   1e998:	dfc00117 	ldw	ra,4(sp)
   1e99c:	df000017 	ldw	fp,0(sp)
   1e9a0:	dec00204 	addi	sp,sp,8
   1e9a4:	f800283a 	ret

0001e9a8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1e9a8:	defffc04 	addi	sp,sp,-16
   1e9ac:	dfc00315 	stw	ra,12(sp)
   1e9b0:	df000215 	stw	fp,8(sp)
   1e9b4:	df000204 	addi	fp,sp,8
   1e9b8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1e9bc:	e0bfff17 	ldw	r2,-4(fp)
   1e9c0:	10800217 	ldw	r2,8(r2)
   1e9c4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1e9c8:	00000b06 	br	1e9f8 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1e9cc:	e13ffe17 	ldw	r4,-8(fp)
   1e9d0:	014000b4 	movhi	r5,2
   1e9d4:	29439a04 	addi	r5,r5,3688
   1e9d8:	000cca40 	call	cca4 <strcmp>
   1e9dc:	1000031e 	bne	r2,zero,1e9ec <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1e9e0:	e0bffe17 	ldw	r2,-8(fp)
   1e9e4:	10000005 	stb	zero,0(r2)
			break;
   1e9e8:	00000906 	br	1ea10 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1e9ec:	e0bffe17 	ldw	r2,-8(fp)
   1e9f0:	10800044 	addi	r2,r2,1
   1e9f4:	e0bffe15 	stw	r2,-8(fp)
   1e9f8:	e0bffe17 	ldw	r2,-8(fp)
   1e9fc:	10800003 	ldbu	r2,0(r2)
   1ea00:	10803fcc 	andi	r2,r2,255
   1ea04:	1080201c 	xori	r2,r2,128
   1ea08:	10bfe004 	addi	r2,r2,-128
   1ea0c:	103fef1e 	bne	r2,zero,1e9cc <__alt_mem_Flash_flash_data+0xf401e9cc>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1ea10:	0001883a 	nop
}
   1ea14:	e037883a 	mov	sp,fp
   1ea18:	dfc00117 	ldw	ra,4(sp)
   1ea1c:	df000017 	ldw	fp,0(sp)
   1ea20:	dec00204 	addi	sp,sp,8
   1ea24:	f800283a 	ret

0001ea28 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1ea28:	defffc04 	addi	sp,sp,-16
   1ea2c:	dfc00315 	stw	ra,12(sp)
   1ea30:	df000215 	stw	fp,8(sp)
   1ea34:	df000204 	addi	fp,sp,8
   1ea38:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1ea3c:	e13fff17 	ldw	r4,-4(fp)
   1ea40:	014000b4 	movhi	r5,2
   1ea44:	294b4604 	addi	r5,r5,11544
   1ea48:	001ef980 	call	1ef98 <alt_find_dev>
   1ea4c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ea50:	e0bffe17 	ldw	r2,-8(fp)
}
   1ea54:	e037883a 	mov	sp,fp
   1ea58:	dfc00117 	ldw	ra,4(sp)
   1ea5c:	df000017 	ldw	fp,0(sp)
   1ea60:	dec00204 	addi	sp,sp,8
   1ea64:	f800283a 	ret

0001ea68 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1ea68:	defffa04 	addi	sp,sp,-24
   1ea6c:	df000515 	stw	fp,20(sp)
   1ea70:	df000504 	addi	fp,sp,20
   1ea74:	e13ffc15 	stw	r4,-16(fp)
   1ea78:	2805883a 	mov	r2,r5
   1ea7c:	e1bffe15 	stw	r6,-8(fp)
   1ea80:	e1ffff15 	stw	r7,-4(fp)
   1ea84:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1ea88:	e0bffc17 	ldw	r2,-16(fp)
   1ea8c:	10800c17 	ldw	r2,48(r2)
   1ea90:	e0fffe17 	ldw	r3,-8(fp)
   1ea94:	1880042e 	bgeu	r3,r2,1eaa8 <alt_up_char_buffer_draw+0x40>
   1ea98:	e0bffc17 	ldw	r2,-16(fp)
   1ea9c:	10800d17 	ldw	r2,52(r2)
   1eaa0:	e0ffff17 	ldw	r3,-4(fp)
   1eaa4:	18800236 	bltu	r3,r2,1eab0 <alt_up_char_buffer_draw+0x48>
		return -1;
   1eaa8:	00bfffc4 	movi	r2,-1
   1eaac:	00001d06 	br	1eb24 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1eab0:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1eab4:	e0bffc17 	ldw	r2,-16(fp)
   1eab8:	10c00f17 	ldw	r3,60(r2)
   1eabc:	e0bffe17 	ldw	r2,-8(fp)
   1eac0:	1884703a 	and	r2,r3,r2
   1eac4:	e0fffc17 	ldw	r3,-16(fp)
   1eac8:	18c00e17 	ldw	r3,56(r3)
   1eacc:	10c4983a 	sll	r2,r2,r3
   1ead0:	e0fffb17 	ldw	r3,-20(fp)
   1ead4:	1884b03a 	or	r2,r3,r2
   1ead8:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1eadc:	e0bffc17 	ldw	r2,-16(fp)
   1eae0:	10c01117 	ldw	r3,68(r2)
   1eae4:	e0bfff17 	ldw	r2,-4(fp)
   1eae8:	1884703a 	and	r2,r3,r2
   1eaec:	e0fffc17 	ldw	r3,-16(fp)
   1eaf0:	18c01017 	ldw	r3,64(r3)
   1eaf4:	10c4983a 	sll	r2,r2,r3
   1eaf8:	e0fffb17 	ldw	r3,-20(fp)
   1eafc:	1884b03a 	or	r2,r3,r2
   1eb00:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1eb04:	e0bffc17 	ldw	r2,-16(fp)
   1eb08:	10c00b17 	ldw	r3,44(r2)
   1eb0c:	e0bffb17 	ldw	r2,-20(fp)
   1eb10:	1885883a 	add	r2,r3,r2
   1eb14:	1007883a 	mov	r3,r2
   1eb18:	e0bffd03 	ldbu	r2,-12(fp)
   1eb1c:	18800025 	stbio	r2,0(r3)

	return 0;
   1eb20:	0005883a 	mov	r2,zero
}
   1eb24:	e037883a 	mov	sp,fp
   1eb28:	df000017 	ldw	fp,0(sp)
   1eb2c:	dec00104 	addi	sp,sp,4
   1eb30:	f800283a 	ret

0001eb34 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1eb34:	defffa04 	addi	sp,sp,-24
   1eb38:	df000515 	stw	fp,20(sp)
   1eb3c:	df000504 	addi	fp,sp,20
   1eb40:	e13ffc15 	stw	r4,-16(fp)
   1eb44:	e17ffd15 	stw	r5,-12(fp)
   1eb48:	e1bffe15 	stw	r6,-8(fp)
   1eb4c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1eb50:	e0bffc17 	ldw	r2,-16(fp)
   1eb54:	10800c17 	ldw	r2,48(r2)
   1eb58:	e0fffe17 	ldw	r3,-8(fp)
   1eb5c:	1880042e 	bgeu	r3,r2,1eb70 <alt_up_char_buffer_string+0x3c>
   1eb60:	e0bffc17 	ldw	r2,-16(fp)
   1eb64:	10800d17 	ldw	r2,52(r2)
   1eb68:	e0ffff17 	ldw	r3,-4(fp)
   1eb6c:	18800236 	bltu	r3,r2,1eb78 <alt_up_char_buffer_string+0x44>
		return -1;
   1eb70:	00bfffc4 	movi	r2,-1
   1eb74:	00002b06 	br	1ec24 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1eb78:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1eb7c:	e0bffc17 	ldw	r2,-16(fp)
   1eb80:	10801017 	ldw	r2,64(r2)
   1eb84:	1007883a 	mov	r3,r2
   1eb88:	e0bfff17 	ldw	r2,-4(fp)
   1eb8c:	10c6983a 	sll	r3,r2,r3
   1eb90:	e0bffe17 	ldw	r2,-8(fp)
   1eb94:	1885883a 	add	r2,r3,r2
   1eb98:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1eb9c:	00001a06 	br	1ec08 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1eba0:	e0bffc17 	ldw	r2,-16(fp)
   1eba4:	10c00b17 	ldw	r3,44(r2)
   1eba8:	e0bffb17 	ldw	r2,-20(fp)
   1ebac:	1885883a 	add	r2,r3,r2
   1ebb0:	1007883a 	mov	r3,r2
   1ebb4:	e0bffd17 	ldw	r2,-12(fp)
   1ebb8:	10800003 	ldbu	r2,0(r2)
   1ebbc:	10803fcc 	andi	r2,r2,255
   1ebc0:	1080201c 	xori	r2,r2,128
   1ebc4:	10bfe004 	addi	r2,r2,-128
   1ebc8:	18800025 	stbio	r2,0(r3)
		++ptr;
   1ebcc:	e0bffd17 	ldw	r2,-12(fp)
   1ebd0:	10800044 	addi	r2,r2,1
   1ebd4:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1ebd8:	e0bffe17 	ldw	r2,-8(fp)
   1ebdc:	10800044 	addi	r2,r2,1
   1ebe0:	e0bffe15 	stw	r2,-8(fp)
   1ebe4:	e0bffc17 	ldw	r2,-16(fp)
   1ebe8:	10800c17 	ldw	r2,48(r2)
   1ebec:	e0fffe17 	ldw	r3,-8(fp)
   1ebf0:	18800236 	bltu	r3,r2,1ebfc <alt_up_char_buffer_string+0xc8>
			return -1;
   1ebf4:	00bfffc4 	movi	r2,-1
   1ebf8:	00000a06 	br	1ec24 <alt_up_char_buffer_string+0xf0>
		++offset;
   1ebfc:	e0bffb17 	ldw	r2,-20(fp)
   1ec00:	10800044 	addi	r2,r2,1
   1ec04:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1ec08:	e0bffd17 	ldw	r2,-12(fp)
   1ec0c:	10800003 	ldbu	r2,0(r2)
   1ec10:	10803fcc 	andi	r2,r2,255
   1ec14:	1080201c 	xori	r2,r2,128
   1ec18:	10bfe004 	addi	r2,r2,-128
   1ec1c:	103fe01e 	bne	r2,zero,1eba0 <__alt_mem_Flash_flash_data+0xf401eba0>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1ec20:	0005883a 	mov	r2,zero
}
   1ec24:	e037883a 	mov	sp,fp
   1ec28:	df000017 	ldw	fp,0(sp)
   1ec2c:	dec00104 	addi	sp,sp,4
   1ec30:	f800283a 	ret

0001ec34 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1ec34:	defffe04 	addi	sp,sp,-8
   1ec38:	df000115 	stw	fp,4(sp)
   1ec3c:	df000104 	addi	fp,sp,4
   1ec40:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1ec44:	e0bfff17 	ldw	r2,-4(fp)
   1ec48:	10800a17 	ldw	r2,40(r2)
   1ec4c:	10800084 	addi	r2,r2,2
   1ec50:	1007883a 	mov	r3,r2
   1ec54:	00800044 	movi	r2,1
   1ec58:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1ec5c:	0001883a 	nop
   1ec60:	e0bfff17 	ldw	r2,-4(fp)
   1ec64:	10800a17 	ldw	r2,40(r2)
   1ec68:	10800084 	addi	r2,r2,2
   1ec6c:	10800023 	ldbuio	r2,0(r2)
   1ec70:	10803fcc 	andi	r2,r2,255
   1ec74:	1080004c 	andi	r2,r2,1
   1ec78:	103ff91e 	bne	r2,zero,1ec60 <__alt_mem_Flash_flash_data+0xf401ec60>
	return 0;
   1ec7c:	0005883a 	mov	r2,zero
}
   1ec80:	e037883a 	mov	sp,fp
   1ec84:	df000017 	ldw	fp,0(sp)
   1ec88:	dec00104 	addi	sp,sp,4
   1ec8c:	f800283a 	ret

0001ec90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1ec90:	defff504 	addi	sp,sp,-44
   1ec94:	df000a15 	stw	fp,40(sp)
   1ec98:	df000a04 	addi	fp,sp,40
   1ec9c:	e13ffc15 	stw	r4,-16(fp)
   1eca0:	e17ffd15 	stw	r5,-12(fp)
   1eca4:	e1bffe15 	stw	r6,-8(fp)
   1eca8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1ecac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ecb0:	008000b4 	movhi	r2,2
   1ecb4:	10937b04 	addi	r2,r2,19948
   1ecb8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1ecbc:	10003f26 	beq	r2,zero,1edbc <alt_alarm_start+0x12c>
  {
    if (alarm)
   1ecc0:	e0bffc17 	ldw	r2,-16(fp)
   1ecc4:	10003b26 	beq	r2,zero,1edb4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1ecc8:	e0bffc17 	ldw	r2,-16(fp)
   1eccc:	e0fffe17 	ldw	r3,-8(fp)
   1ecd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1ecd4:	e0bffc17 	ldw	r2,-16(fp)
   1ecd8:	e0ffff17 	ldw	r3,-4(fp)
   1ecdc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ece0:	0005303a 	rdctl	r2,status
   1ece4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ece8:	e0fff817 	ldw	r3,-32(fp)
   1ecec:	00bfff84 	movi	r2,-2
   1ecf0:	1884703a 	and	r2,r3,r2
   1ecf4:	1001703a 	wrctl	status,r2
  
  return context;
   1ecf8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1ecfc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1ed00:	008000b4 	movhi	r2,2
   1ed04:	10937c04 	addi	r2,r2,19952
   1ed08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1ed0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1ed10:	e0fffd17 	ldw	r3,-12(fp)
   1ed14:	e0bff617 	ldw	r2,-40(fp)
   1ed18:	1885883a 	add	r2,r3,r2
   1ed1c:	10c00044 	addi	r3,r2,1
   1ed20:	e0bffc17 	ldw	r2,-16(fp)
   1ed24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1ed28:	e0bffc17 	ldw	r2,-16(fp)
   1ed2c:	10c00217 	ldw	r3,8(r2)
   1ed30:	e0bff617 	ldw	r2,-40(fp)
   1ed34:	1880042e 	bgeu	r3,r2,1ed48 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1ed38:	e0bffc17 	ldw	r2,-16(fp)
   1ed3c:	00c00044 	movi	r3,1
   1ed40:	10c00405 	stb	r3,16(r2)
   1ed44:	00000206 	br	1ed50 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1ed48:	e0bffc17 	ldw	r2,-16(fp)
   1ed4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1ed50:	e0fffc17 	ldw	r3,-16(fp)
   1ed54:	008000b4 	movhi	r2,2
   1ed58:	108b6b04 	addi	r2,r2,11692
   1ed5c:	e0bff915 	stw	r2,-28(fp)
   1ed60:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ed64:	e0bffa17 	ldw	r2,-24(fp)
   1ed68:	e0fff917 	ldw	r3,-28(fp)
   1ed6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ed70:	e0bff917 	ldw	r2,-28(fp)
   1ed74:	10c00017 	ldw	r3,0(r2)
   1ed78:	e0bffa17 	ldw	r2,-24(fp)
   1ed7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1ed80:	e0bff917 	ldw	r2,-28(fp)
   1ed84:	10800017 	ldw	r2,0(r2)
   1ed88:	e0fffa17 	ldw	r3,-24(fp)
   1ed8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1ed90:	e0bff917 	ldw	r2,-28(fp)
   1ed94:	e0fffa17 	ldw	r3,-24(fp)
   1ed98:	10c00015 	stw	r3,0(r2)
   1ed9c:	e0bff717 	ldw	r2,-36(fp)
   1eda0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eda4:	e0bffb17 	ldw	r2,-20(fp)
   1eda8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1edac:	0005883a 	mov	r2,zero
   1edb0:	00000306 	br	1edc0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1edb4:	00bffa84 	movi	r2,-22
   1edb8:	00000106 	br	1edc0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1edbc:	00bfde84 	movi	r2,-134
  }
}
   1edc0:	e037883a 	mov	sp,fp
   1edc4:	df000017 	ldw	fp,0(sp)
   1edc8:	dec00104 	addi	sp,sp,4
   1edcc:	f800283a 	ret

0001edd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1edd0:	deffff04 	addi	sp,sp,-4
   1edd4:	df000015 	stw	fp,0(sp)
   1edd8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1eddc:	e037883a 	mov	sp,fp
   1ede0:	df000017 	ldw	fp,0(sp)
   1ede4:	dec00104 	addi	sp,sp,4
   1ede8:	f800283a 	ret

0001edec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1edec:	defffe04 	addi	sp,sp,-8
   1edf0:	dfc00115 	stw	ra,4(sp)
   1edf4:	df000015 	stw	fp,0(sp)
   1edf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1edfc:	008000b4 	movhi	r2,2
   1ee00:	108b4904 	addi	r2,r2,11556
   1ee04:	10800017 	ldw	r2,0(r2)
   1ee08:	10000526 	beq	r2,zero,1ee20 <alt_get_errno+0x34>
   1ee0c:	008000b4 	movhi	r2,2
   1ee10:	108b4904 	addi	r2,r2,11556
   1ee14:	10800017 	ldw	r2,0(r2)
   1ee18:	103ee83a 	callr	r2
   1ee1c:	00000206 	br	1ee28 <alt_get_errno+0x3c>
   1ee20:	008000b4 	movhi	r2,2
   1ee24:	10935d04 	addi	r2,r2,19828
}
   1ee28:	e037883a 	mov	sp,fp
   1ee2c:	dfc00117 	ldw	ra,4(sp)
   1ee30:	df000017 	ldw	fp,0(sp)
   1ee34:	dec00204 	addi	sp,sp,8
   1ee38:	f800283a 	ret

0001ee3c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1ee3c:	defffa04 	addi	sp,sp,-24
   1ee40:	dfc00515 	stw	ra,20(sp)
   1ee44:	df000415 	stw	fp,16(sp)
   1ee48:	df000404 	addi	fp,sp,16
   1ee4c:	e13ffe15 	stw	r4,-8(fp)
   1ee50:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1ee54:	e0bffe17 	ldw	r2,-8(fp)
   1ee58:	10000326 	beq	r2,zero,1ee68 <alt_dev_llist_insert+0x2c>
   1ee5c:	e0bffe17 	ldw	r2,-8(fp)
   1ee60:	10800217 	ldw	r2,8(r2)
   1ee64:	1000061e 	bne	r2,zero,1ee80 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1ee68:	001edec0 	call	1edec <alt_get_errno>
   1ee6c:	1007883a 	mov	r3,r2
   1ee70:	00800584 	movi	r2,22
   1ee74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1ee78:	00bffa84 	movi	r2,-22
   1ee7c:	00001306 	br	1eecc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1ee80:	e0bffe17 	ldw	r2,-8(fp)
   1ee84:	e0ffff17 	ldw	r3,-4(fp)
   1ee88:	e0fffc15 	stw	r3,-16(fp)
   1ee8c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ee90:	e0bffd17 	ldw	r2,-12(fp)
   1ee94:	e0fffc17 	ldw	r3,-16(fp)
   1ee98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ee9c:	e0bffc17 	ldw	r2,-16(fp)
   1eea0:	10c00017 	ldw	r3,0(r2)
   1eea4:	e0bffd17 	ldw	r2,-12(fp)
   1eea8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1eeac:	e0bffc17 	ldw	r2,-16(fp)
   1eeb0:	10800017 	ldw	r2,0(r2)
   1eeb4:	e0fffd17 	ldw	r3,-12(fp)
   1eeb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1eebc:	e0bffc17 	ldw	r2,-16(fp)
   1eec0:	e0fffd17 	ldw	r3,-12(fp)
   1eec4:	10c00015 	stw	r3,0(r2)

  return 0;  
   1eec8:	0005883a 	mov	r2,zero
}
   1eecc:	e037883a 	mov	sp,fp
   1eed0:	dfc00117 	ldw	ra,4(sp)
   1eed4:	df000017 	ldw	fp,0(sp)
   1eed8:	dec00204 	addi	sp,sp,8
   1eedc:	f800283a 	ret

0001eee0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1eee0:	defffd04 	addi	sp,sp,-12
   1eee4:	dfc00215 	stw	ra,8(sp)
   1eee8:	df000115 	stw	fp,4(sp)
   1eeec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1eef0:	008000b4 	movhi	r2,2
   1eef4:	10806104 	addi	r2,r2,388
   1eef8:	e0bfff15 	stw	r2,-4(fp)
   1eefc:	00000606 	br	1ef18 <_do_ctors+0x38>
        (*ctor) (); 
   1ef00:	e0bfff17 	ldw	r2,-4(fp)
   1ef04:	10800017 	ldw	r2,0(r2)
   1ef08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1ef0c:	e0bfff17 	ldw	r2,-4(fp)
   1ef10:	10bfff04 	addi	r2,r2,-4
   1ef14:	e0bfff15 	stw	r2,-4(fp)
   1ef18:	e0ffff17 	ldw	r3,-4(fp)
   1ef1c:	008000b4 	movhi	r2,2
   1ef20:	10806204 	addi	r2,r2,392
   1ef24:	18bff62e 	bgeu	r3,r2,1ef00 <__alt_mem_Flash_flash_data+0xf401ef00>
        (*ctor) (); 
}
   1ef28:	e037883a 	mov	sp,fp
   1ef2c:	dfc00117 	ldw	ra,4(sp)
   1ef30:	df000017 	ldw	fp,0(sp)
   1ef34:	dec00204 	addi	sp,sp,8
   1ef38:	f800283a 	ret

0001ef3c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1ef3c:	defffd04 	addi	sp,sp,-12
   1ef40:	dfc00215 	stw	ra,8(sp)
   1ef44:	df000115 	stw	fp,4(sp)
   1ef48:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1ef4c:	008000b4 	movhi	r2,2
   1ef50:	10806104 	addi	r2,r2,388
   1ef54:	e0bfff15 	stw	r2,-4(fp)
   1ef58:	00000606 	br	1ef74 <_do_dtors+0x38>
        (*dtor) (); 
   1ef5c:	e0bfff17 	ldw	r2,-4(fp)
   1ef60:	10800017 	ldw	r2,0(r2)
   1ef64:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1ef68:	e0bfff17 	ldw	r2,-4(fp)
   1ef6c:	10bfff04 	addi	r2,r2,-4
   1ef70:	e0bfff15 	stw	r2,-4(fp)
   1ef74:	e0ffff17 	ldw	r3,-4(fp)
   1ef78:	008000b4 	movhi	r2,2
   1ef7c:	10806204 	addi	r2,r2,392
   1ef80:	18bff62e 	bgeu	r3,r2,1ef5c <__alt_mem_Flash_flash_data+0xf401ef5c>
        (*dtor) (); 
}
   1ef84:	e037883a 	mov	sp,fp
   1ef88:	dfc00117 	ldw	ra,4(sp)
   1ef8c:	df000017 	ldw	fp,0(sp)
   1ef90:	dec00204 	addi	sp,sp,8
   1ef94:	f800283a 	ret

0001ef98 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1ef98:	defffa04 	addi	sp,sp,-24
   1ef9c:	dfc00515 	stw	ra,20(sp)
   1efa0:	df000415 	stw	fp,16(sp)
   1efa4:	df000404 	addi	fp,sp,16
   1efa8:	e13ffe15 	stw	r4,-8(fp)
   1efac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1efb0:	e0bfff17 	ldw	r2,-4(fp)
   1efb4:	10800017 	ldw	r2,0(r2)
   1efb8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1efbc:	e13ffe17 	ldw	r4,-8(fp)
   1efc0:	0003b540 	call	3b54 <strlen>
   1efc4:	10800044 	addi	r2,r2,1
   1efc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1efcc:	00000d06 	br	1f004 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1efd0:	e0bffc17 	ldw	r2,-16(fp)
   1efd4:	10c00217 	ldw	r3,8(r2)
   1efd8:	e0bffd17 	ldw	r2,-12(fp)
   1efdc:	1809883a 	mov	r4,r3
   1efe0:	e17ffe17 	ldw	r5,-8(fp)
   1efe4:	100d883a 	mov	r6,r2
   1efe8:	001fe280 	call	1fe28 <memcmp>
   1efec:	1000021e 	bne	r2,zero,1eff8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1eff0:	e0bffc17 	ldw	r2,-16(fp)
   1eff4:	00000706 	br	1f014 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1eff8:	e0bffc17 	ldw	r2,-16(fp)
   1effc:	10800017 	ldw	r2,0(r2)
   1f000:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1f004:	e0fffc17 	ldw	r3,-16(fp)
   1f008:	e0bfff17 	ldw	r2,-4(fp)
   1f00c:	18bff01e 	bne	r3,r2,1efd0 <__alt_mem_Flash_flash_data+0xf401efd0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1f010:	0005883a 	mov	r2,zero
}
   1f014:	e037883a 	mov	sp,fp
   1f018:	dfc00117 	ldw	ra,4(sp)
   1f01c:	df000017 	ldw	fp,0(sp)
   1f020:	dec00204 	addi	sp,sp,8
   1f024:	f800283a 	ret

0001f028 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1f028:	defffe04 	addi	sp,sp,-8
   1f02c:	dfc00115 	stw	ra,4(sp)
   1f030:	df000015 	stw	fp,0(sp)
   1f034:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1f038:	0009883a 	mov	r4,zero
   1f03c:	01440004 	movi	r5,4096
   1f040:	001fcb40 	call	1fcb4 <alt_icache_flush>
#endif
}
   1f044:	e037883a 	mov	sp,fp
   1f048:	dfc00117 	ldw	ra,4(sp)
   1f04c:	df000017 	ldw	fp,0(sp)
   1f050:	dec00204 	addi	sp,sp,8
   1f054:	f800283a 	ret

0001f058 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1f058:	defff904 	addi	sp,sp,-28
   1f05c:	dfc00615 	stw	ra,24(sp)
   1f060:	df000515 	stw	fp,20(sp)
   1f064:	df000504 	addi	fp,sp,20
   1f068:	e13ffc15 	stw	r4,-16(fp)
   1f06c:	e17ffd15 	stw	r5,-12(fp)
   1f070:	e1bffe15 	stw	r6,-8(fp)
   1f074:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1f078:	e13ffd17 	ldw	r4,-12(fp)
   1f07c:	e17ffe17 	ldw	r5,-8(fp)
   1f080:	e1bfff17 	ldw	r6,-4(fp)
   1f084:	001f45c0 	call	1f45c <open>
   1f088:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1f08c:	e0bffb17 	ldw	r2,-20(fp)
   1f090:	10001c16 	blt	r2,zero,1f104 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1f094:	008000b4 	movhi	r2,2
   1f098:	1085d504 	addi	r2,r2,5972
   1f09c:	e0fffb17 	ldw	r3,-20(fp)
   1f0a0:	18c00324 	muli	r3,r3,12
   1f0a4:	10c5883a 	add	r2,r2,r3
   1f0a8:	10c00017 	ldw	r3,0(r2)
   1f0ac:	e0bffc17 	ldw	r2,-16(fp)
   1f0b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1f0b4:	008000b4 	movhi	r2,2
   1f0b8:	1085d504 	addi	r2,r2,5972
   1f0bc:	e0fffb17 	ldw	r3,-20(fp)
   1f0c0:	18c00324 	muli	r3,r3,12
   1f0c4:	18c00104 	addi	r3,r3,4
   1f0c8:	10c5883a 	add	r2,r2,r3
   1f0cc:	10c00017 	ldw	r3,0(r2)
   1f0d0:	e0bffc17 	ldw	r2,-16(fp)
   1f0d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1f0d8:	008000b4 	movhi	r2,2
   1f0dc:	1085d504 	addi	r2,r2,5972
   1f0e0:	e0fffb17 	ldw	r3,-20(fp)
   1f0e4:	18c00324 	muli	r3,r3,12
   1f0e8:	18c00204 	addi	r3,r3,8
   1f0ec:	10c5883a 	add	r2,r2,r3
   1f0f0:	10c00017 	ldw	r3,0(r2)
   1f0f4:	e0bffc17 	ldw	r2,-16(fp)
   1f0f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1f0fc:	e13ffb17 	ldw	r4,-20(fp)
   1f100:	00136ec0 	call	136ec <alt_release_fd>
  }
} 
   1f104:	e037883a 	mov	sp,fp
   1f108:	dfc00117 	ldw	ra,4(sp)
   1f10c:	df000017 	ldw	fp,0(sp)
   1f110:	dec00204 	addi	sp,sp,8
   1f114:	f800283a 	ret

0001f118 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1f118:	defffb04 	addi	sp,sp,-20
   1f11c:	dfc00415 	stw	ra,16(sp)
   1f120:	df000315 	stw	fp,12(sp)
   1f124:	df000304 	addi	fp,sp,12
   1f128:	e13ffd15 	stw	r4,-12(fp)
   1f12c:	e17ffe15 	stw	r5,-8(fp)
   1f130:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1f134:	010000b4 	movhi	r4,2
   1f138:	2105d804 	addi	r4,r4,5984
   1f13c:	e17ffd17 	ldw	r5,-12(fp)
   1f140:	01800044 	movi	r6,1
   1f144:	01c07fc4 	movi	r7,511
   1f148:	001f0580 	call	1f058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1f14c:	010000b4 	movhi	r4,2
   1f150:	2105d504 	addi	r4,r4,5972
   1f154:	e17ffe17 	ldw	r5,-8(fp)
   1f158:	000d883a 	mov	r6,zero
   1f15c:	01c07fc4 	movi	r7,511
   1f160:	001f0580 	call	1f058 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1f164:	010000b4 	movhi	r4,2
   1f168:	2105db04 	addi	r4,r4,5996
   1f16c:	e17fff17 	ldw	r5,-4(fp)
   1f170:	01800044 	movi	r6,1
   1f174:	01c07fc4 	movi	r7,511
   1f178:	001f0580 	call	1f058 <alt_open_fd>
}  
   1f17c:	e037883a 	mov	sp,fp
   1f180:	dfc00117 	ldw	ra,4(sp)
   1f184:	df000017 	ldw	fp,0(sp)
   1f188:	dec00204 	addi	sp,sp,8
   1f18c:	f800283a 	ret

0001f190 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1f190:	defff004 	addi	sp,sp,-64
   1f194:	df000f15 	stw	fp,60(sp)
   1f198:	df000f04 	addi	fp,sp,60
   1f19c:	e13ffd15 	stw	r4,-12(fp)
   1f1a0:	e17ffe15 	stw	r5,-8(fp)
   1f1a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1f1a8:	00bffa84 	movi	r2,-22
   1f1ac:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1f1b0:	e0bffd17 	ldw	r2,-12(fp)
   1f1b4:	10800828 	cmpgeui	r2,r2,32
   1f1b8:	10005c1e 	bne	r2,zero,1f32c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f1bc:	0005303a 	rdctl	r2,status
   1f1c0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f1c4:	e0fff317 	ldw	r3,-52(fp)
   1f1c8:	00bfff84 	movi	r2,-2
   1f1cc:	1884703a 	and	r2,r3,r2
   1f1d0:	1001703a 	wrctl	status,r2
  
  return context;
   1f1d4:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1f1d8:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1f1dc:	00800174 	movhi	r2,5
   1f1e0:	10a82c04 	addi	r2,r2,-24400
   1f1e4:	e0fffd17 	ldw	r3,-12(fp)
   1f1e8:	180690fa 	slli	r3,r3,3
   1f1ec:	10c5883a 	add	r2,r2,r3
   1f1f0:	e0ffff17 	ldw	r3,-4(fp)
   1f1f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1f1f8:	00800174 	movhi	r2,5
   1f1fc:	10a82c04 	addi	r2,r2,-24400
   1f200:	e0fffd17 	ldw	r3,-12(fp)
   1f204:	180690fa 	slli	r3,r3,3
   1f208:	18c00104 	addi	r3,r3,4
   1f20c:	10c5883a 	add	r2,r2,r3
   1f210:	e0fffe17 	ldw	r3,-8(fp)
   1f214:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1f218:	e0bfff17 	ldw	r2,-4(fp)
   1f21c:	10001f26 	beq	r2,zero,1f29c <alt_irq_register+0x10c>
   1f220:	e0bffd17 	ldw	r2,-12(fp)
   1f224:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f228:	0005303a 	rdctl	r2,status
   1f22c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f230:	e0fff517 	ldw	r3,-44(fp)
   1f234:	00bfff84 	movi	r2,-2
   1f238:	1884703a 	and	r2,r3,r2
   1f23c:	1001703a 	wrctl	status,r2
  
  return context;
   1f240:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f244:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1f248:	e0bff417 	ldw	r2,-48(fp)
   1f24c:	00c00044 	movi	r3,1
   1f250:	1884983a 	sll	r2,r3,r2
   1f254:	1007883a 	mov	r3,r2
   1f258:	008000b4 	movhi	r2,2
   1f25c:	10937a04 	addi	r2,r2,19944
   1f260:	10800017 	ldw	r2,0(r2)
   1f264:	1886b03a 	or	r3,r3,r2
   1f268:	008000b4 	movhi	r2,2
   1f26c:	10937a04 	addi	r2,r2,19944
   1f270:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f274:	008000b4 	movhi	r2,2
   1f278:	10937a04 	addi	r2,r2,19944
   1f27c:	10800017 	ldw	r2,0(r2)
   1f280:	100170fa 	wrctl	ienable,r2
   1f284:	e0bff617 	ldw	r2,-40(fp)
   1f288:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f28c:	e0bff717 	ldw	r2,-36(fp)
   1f290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f294:	0005883a 	mov	r2,zero
   1f298:	00001f06 	br	1f318 <alt_irq_register+0x188>
   1f29c:	e0bffd17 	ldw	r2,-12(fp)
   1f2a0:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f2a4:	0005303a 	rdctl	r2,status
   1f2a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f2ac:	e0fff917 	ldw	r3,-28(fp)
   1f2b0:	00bfff84 	movi	r2,-2
   1f2b4:	1884703a 	and	r2,r3,r2
   1f2b8:	1001703a 	wrctl	status,r2
  
  return context;
   1f2bc:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f2c0:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1f2c4:	e0bff817 	ldw	r2,-32(fp)
   1f2c8:	00c00044 	movi	r3,1
   1f2cc:	1884983a 	sll	r2,r3,r2
   1f2d0:	0084303a 	nor	r2,zero,r2
   1f2d4:	1007883a 	mov	r3,r2
   1f2d8:	008000b4 	movhi	r2,2
   1f2dc:	10937a04 	addi	r2,r2,19944
   1f2e0:	10800017 	ldw	r2,0(r2)
   1f2e4:	1886703a 	and	r3,r3,r2
   1f2e8:	008000b4 	movhi	r2,2
   1f2ec:	10937a04 	addi	r2,r2,19944
   1f2f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f2f4:	008000b4 	movhi	r2,2
   1f2f8:	10937a04 	addi	r2,r2,19944
   1f2fc:	10800017 	ldw	r2,0(r2)
   1f300:	100170fa 	wrctl	ienable,r2
   1f304:	e0bffa17 	ldw	r2,-24(fp)
   1f308:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f30c:	e0bffb17 	ldw	r2,-20(fp)
   1f310:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f314:	0005883a 	mov	r2,zero
   1f318:	e0bff115 	stw	r2,-60(fp)
   1f31c:	e0bff217 	ldw	r2,-56(fp)
   1f320:	e0bffc15 	stw	r2,-16(fp)
   1f324:	e0bffc17 	ldw	r2,-16(fp)
   1f328:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1f32c:	e0bff117 	ldw	r2,-60(fp)
}
   1f330:	e037883a 	mov	sp,fp
   1f334:	df000017 	ldw	fp,0(sp)
   1f338:	dec00104 	addi	sp,sp,4
   1f33c:	f800283a 	ret

0001f340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f340:	defffe04 	addi	sp,sp,-8
   1f344:	dfc00115 	stw	ra,4(sp)
   1f348:	df000015 	stw	fp,0(sp)
   1f34c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f350:	008000b4 	movhi	r2,2
   1f354:	108b4904 	addi	r2,r2,11556
   1f358:	10800017 	ldw	r2,0(r2)
   1f35c:	10000526 	beq	r2,zero,1f374 <alt_get_errno+0x34>
   1f360:	008000b4 	movhi	r2,2
   1f364:	108b4904 	addi	r2,r2,11556
   1f368:	10800017 	ldw	r2,0(r2)
   1f36c:	103ee83a 	callr	r2
   1f370:	00000206 	br	1f37c <alt_get_errno+0x3c>
   1f374:	008000b4 	movhi	r2,2
   1f378:	10935d04 	addi	r2,r2,19828
}
   1f37c:	e037883a 	mov	sp,fp
   1f380:	dfc00117 	ldw	ra,4(sp)
   1f384:	df000017 	ldw	fp,0(sp)
   1f388:	dec00204 	addi	sp,sp,8
   1f38c:	f800283a 	ret

0001f390 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1f390:	defffd04 	addi	sp,sp,-12
   1f394:	df000215 	stw	fp,8(sp)
   1f398:	df000204 	addi	fp,sp,8
   1f39c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1f3a0:	e0bfff17 	ldw	r2,-4(fp)
   1f3a4:	10800217 	ldw	r2,8(r2)
   1f3a8:	10d00034 	orhi	r3,r2,16384
   1f3ac:	e0bfff17 	ldw	r2,-4(fp)
   1f3b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f3b4:	e03ffe15 	stw	zero,-8(fp)
   1f3b8:	00001d06 	br	1f430 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f3bc:	008000b4 	movhi	r2,2
   1f3c0:	1085d504 	addi	r2,r2,5972
   1f3c4:	e0fffe17 	ldw	r3,-8(fp)
   1f3c8:	18c00324 	muli	r3,r3,12
   1f3cc:	10c5883a 	add	r2,r2,r3
   1f3d0:	10c00017 	ldw	r3,0(r2)
   1f3d4:	e0bfff17 	ldw	r2,-4(fp)
   1f3d8:	10800017 	ldw	r2,0(r2)
   1f3dc:	1880111e 	bne	r3,r2,1f424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f3e0:	008000b4 	movhi	r2,2
   1f3e4:	1085d504 	addi	r2,r2,5972
   1f3e8:	e0fffe17 	ldw	r3,-8(fp)
   1f3ec:	18c00324 	muli	r3,r3,12
   1f3f0:	18c00204 	addi	r3,r3,8
   1f3f4:	10c5883a 	add	r2,r2,r3
   1f3f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f3fc:	1000090e 	bge	r2,zero,1f424 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1f400:	e0bffe17 	ldw	r2,-8(fp)
   1f404:	10c00324 	muli	r3,r2,12
   1f408:	008000b4 	movhi	r2,2
   1f40c:	1085d504 	addi	r2,r2,5972
   1f410:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f414:	e0bfff17 	ldw	r2,-4(fp)
   1f418:	18800226 	beq	r3,r2,1f424 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1f41c:	00bffcc4 	movi	r2,-13
   1f420:	00000a06 	br	1f44c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f424:	e0bffe17 	ldw	r2,-8(fp)
   1f428:	10800044 	addi	r2,r2,1
   1f42c:	e0bffe15 	stw	r2,-8(fp)
   1f430:	008000b4 	movhi	r2,2
   1f434:	108b4804 	addi	r2,r2,11552
   1f438:	10800017 	ldw	r2,0(r2)
   1f43c:	1007883a 	mov	r3,r2
   1f440:	e0bffe17 	ldw	r2,-8(fp)
   1f444:	18bfdd2e 	bgeu	r3,r2,1f3bc <__alt_mem_Flash_flash_data+0xf401f3bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1f448:	0005883a 	mov	r2,zero
}
   1f44c:	e037883a 	mov	sp,fp
   1f450:	df000017 	ldw	fp,0(sp)
   1f454:	dec00104 	addi	sp,sp,4
   1f458:	f800283a 	ret

0001f45c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1f45c:	defff604 	addi	sp,sp,-40
   1f460:	dfc00915 	stw	ra,36(sp)
   1f464:	df000815 	stw	fp,32(sp)
   1f468:	df000804 	addi	fp,sp,32
   1f46c:	e13ffd15 	stw	r4,-12(fp)
   1f470:	e17ffe15 	stw	r5,-8(fp)
   1f474:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1f478:	00bfffc4 	movi	r2,-1
   1f47c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1f480:	00bffb44 	movi	r2,-19
   1f484:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1f488:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1f48c:	e13ffd17 	ldw	r4,-12(fp)
   1f490:	014000b4 	movhi	r5,2
   1f494:	294b4604 	addi	r5,r5,11544
   1f498:	001ef980 	call	1ef98 <alt_find_dev>
   1f49c:	e0bff815 	stw	r2,-32(fp)
   1f4a0:	e0bff817 	ldw	r2,-32(fp)
   1f4a4:	1000051e 	bne	r2,zero,1f4bc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1f4a8:	e13ffd17 	ldw	r4,-12(fp)
   1f4ac:	001faa40 	call	1faa4 <alt_find_file>
   1f4b0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1f4b4:	00800044 	movi	r2,1
   1f4b8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1f4bc:	e0bff817 	ldw	r2,-32(fp)
   1f4c0:	10002926 	beq	r2,zero,1f568 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1f4c4:	e13ff817 	ldw	r4,-32(fp)
   1f4c8:	001fbb80 	call	1fbb8 <alt_get_fd>
   1f4cc:	e0bff915 	stw	r2,-28(fp)
   1f4d0:	e0bff917 	ldw	r2,-28(fp)
   1f4d4:	1000030e 	bge	r2,zero,1f4e4 <open+0x88>
    {
      status = index;
   1f4d8:	e0bff917 	ldw	r2,-28(fp)
   1f4dc:	e0bffa15 	stw	r2,-24(fp)
   1f4e0:	00002306 	br	1f570 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1f4e4:	e0bff917 	ldw	r2,-28(fp)
   1f4e8:	10c00324 	muli	r3,r2,12
   1f4ec:	008000b4 	movhi	r2,2
   1f4f0:	1085d504 	addi	r2,r2,5972
   1f4f4:	1885883a 	add	r2,r3,r2
   1f4f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1f4fc:	e0fffe17 	ldw	r3,-8(fp)
   1f500:	00900034 	movhi	r2,16384
   1f504:	10bfffc4 	addi	r2,r2,-1
   1f508:	1886703a 	and	r3,r3,r2
   1f50c:	e0bffc17 	ldw	r2,-16(fp)
   1f510:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1f514:	e0bffb17 	ldw	r2,-20(fp)
   1f518:	1000051e 	bne	r2,zero,1f530 <open+0xd4>
   1f51c:	e13ffc17 	ldw	r4,-16(fp)
   1f520:	001f3900 	call	1f390 <alt_file_locked>
   1f524:	e0bffa15 	stw	r2,-24(fp)
   1f528:	e0bffa17 	ldw	r2,-24(fp)
   1f52c:	10001016 	blt	r2,zero,1f570 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1f530:	e0bff817 	ldw	r2,-32(fp)
   1f534:	10800317 	ldw	r2,12(r2)
   1f538:	10000826 	beq	r2,zero,1f55c <open+0x100>
   1f53c:	e0bff817 	ldw	r2,-32(fp)
   1f540:	10800317 	ldw	r2,12(r2)
   1f544:	e13ffc17 	ldw	r4,-16(fp)
   1f548:	e17ffd17 	ldw	r5,-12(fp)
   1f54c:	e1bffe17 	ldw	r6,-8(fp)
   1f550:	e1ffff17 	ldw	r7,-4(fp)
   1f554:	103ee83a 	callr	r2
   1f558:	00000106 	br	1f560 <open+0x104>
   1f55c:	0005883a 	mov	r2,zero
   1f560:	e0bffa15 	stw	r2,-24(fp)
   1f564:	00000206 	br	1f570 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1f568:	00bffb44 	movi	r2,-19
   1f56c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1f570:	e0bffa17 	ldw	r2,-24(fp)
   1f574:	1000090e 	bge	r2,zero,1f59c <open+0x140>
  {
    alt_release_fd (index);  
   1f578:	e13ff917 	ldw	r4,-28(fp)
   1f57c:	00136ec0 	call	136ec <alt_release_fd>
    ALT_ERRNO = -status;
   1f580:	001f3400 	call	1f340 <alt_get_errno>
   1f584:	1007883a 	mov	r3,r2
   1f588:	e0bffa17 	ldw	r2,-24(fp)
   1f58c:	0085c83a 	sub	r2,zero,r2
   1f590:	18800015 	stw	r2,0(r3)
    return -1;
   1f594:	00bfffc4 	movi	r2,-1
   1f598:	00000106 	br	1f5a0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1f59c:	e0bff917 	ldw	r2,-28(fp)
}
   1f5a0:	e037883a 	mov	sp,fp
   1f5a4:	dfc00117 	ldw	ra,4(sp)
   1f5a8:	df000017 	ldw	fp,0(sp)
   1f5ac:	dec00204 	addi	sp,sp,8
   1f5b0:	f800283a 	ret

0001f5b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1f5b4:	defffa04 	addi	sp,sp,-24
   1f5b8:	df000515 	stw	fp,20(sp)
   1f5bc:	df000504 	addi	fp,sp,20
   1f5c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f5c4:	0005303a 	rdctl	r2,status
   1f5c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f5cc:	e0fffc17 	ldw	r3,-16(fp)
   1f5d0:	00bfff84 	movi	r2,-2
   1f5d4:	1884703a 	and	r2,r3,r2
   1f5d8:	1001703a 	wrctl	status,r2
  
  return context;
   1f5dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1f5e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1f5e4:	e0bfff17 	ldw	r2,-4(fp)
   1f5e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1f5ec:	e0bffd17 	ldw	r2,-12(fp)
   1f5f0:	10800017 	ldw	r2,0(r2)
   1f5f4:	e0fffd17 	ldw	r3,-12(fp)
   1f5f8:	18c00117 	ldw	r3,4(r3)
   1f5fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1f600:	e0bffd17 	ldw	r2,-12(fp)
   1f604:	10800117 	ldw	r2,4(r2)
   1f608:	e0fffd17 	ldw	r3,-12(fp)
   1f60c:	18c00017 	ldw	r3,0(r3)
   1f610:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1f614:	e0bffd17 	ldw	r2,-12(fp)
   1f618:	e0fffd17 	ldw	r3,-12(fp)
   1f61c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1f620:	e0bffd17 	ldw	r2,-12(fp)
   1f624:	e0fffd17 	ldw	r3,-12(fp)
   1f628:	10c00015 	stw	r3,0(r2)
   1f62c:	e0bffb17 	ldw	r2,-20(fp)
   1f630:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f634:	e0bffe17 	ldw	r2,-8(fp)
   1f638:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1f63c:	e037883a 	mov	sp,fp
   1f640:	df000017 	ldw	fp,0(sp)
   1f644:	dec00104 	addi	sp,sp,4
   1f648:	f800283a 	ret

0001f64c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1f64c:	defffb04 	addi	sp,sp,-20
   1f650:	dfc00415 	stw	ra,16(sp)
   1f654:	df000315 	stw	fp,12(sp)
   1f658:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1f65c:	d0a03a17 	ldw	r2,-32536(gp)
   1f660:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1f664:	d0a84b17 	ldw	r2,-24276(gp)
   1f668:	10800044 	addi	r2,r2,1
   1f66c:	d0a84b15 	stw	r2,-24276(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f670:	00002e06 	br	1f72c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1f674:	e0bffd17 	ldw	r2,-12(fp)
   1f678:	10800017 	ldw	r2,0(r2)
   1f67c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1f680:	e0bffd17 	ldw	r2,-12(fp)
   1f684:	10800403 	ldbu	r2,16(r2)
   1f688:	10803fcc 	andi	r2,r2,255
   1f68c:	10000426 	beq	r2,zero,1f6a0 <alt_tick+0x54>
   1f690:	d0a84b17 	ldw	r2,-24276(gp)
   1f694:	1000021e 	bne	r2,zero,1f6a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1f698:	e0bffd17 	ldw	r2,-12(fp)
   1f69c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1f6a0:	e0bffd17 	ldw	r2,-12(fp)
   1f6a4:	10800217 	ldw	r2,8(r2)
   1f6a8:	d0e84b17 	ldw	r3,-24276(gp)
   1f6ac:	18801d36 	bltu	r3,r2,1f724 <alt_tick+0xd8>
   1f6b0:	e0bffd17 	ldw	r2,-12(fp)
   1f6b4:	10800403 	ldbu	r2,16(r2)
   1f6b8:	10803fcc 	andi	r2,r2,255
   1f6bc:	1000191e 	bne	r2,zero,1f724 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1f6c0:	e0bffd17 	ldw	r2,-12(fp)
   1f6c4:	10800317 	ldw	r2,12(r2)
   1f6c8:	e0fffd17 	ldw	r3,-12(fp)
   1f6cc:	18c00517 	ldw	r3,20(r3)
   1f6d0:	1809883a 	mov	r4,r3
   1f6d4:	103ee83a 	callr	r2
   1f6d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1f6dc:	e0bfff17 	ldw	r2,-4(fp)
   1f6e0:	1000031e 	bne	r2,zero,1f6f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1f6e4:	e13ffd17 	ldw	r4,-12(fp)
   1f6e8:	001f5b40 	call	1f5b4 <alt_alarm_stop>
   1f6ec:	00000d06 	br	1f724 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1f6f0:	e0bffd17 	ldw	r2,-12(fp)
   1f6f4:	10c00217 	ldw	r3,8(r2)
   1f6f8:	e0bfff17 	ldw	r2,-4(fp)
   1f6fc:	1887883a 	add	r3,r3,r2
   1f700:	e0bffd17 	ldw	r2,-12(fp)
   1f704:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1f708:	e0bffd17 	ldw	r2,-12(fp)
   1f70c:	10c00217 	ldw	r3,8(r2)
   1f710:	d0a84b17 	ldw	r2,-24276(gp)
   1f714:	1880032e 	bgeu	r3,r2,1f724 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1f718:	e0bffd17 	ldw	r2,-12(fp)
   1f71c:	00c00044 	movi	r3,1
   1f720:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1f724:	e0bffe17 	ldw	r2,-8(fp)
   1f728:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1f72c:	e0fffd17 	ldw	r3,-12(fp)
   1f730:	d0a03a04 	addi	r2,gp,-32536
   1f734:	18bfcf1e 	bne	r3,r2,1f674 <__alt_mem_Flash_flash_data+0xf401f674>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1f738:	00148f80 	call	148f8 <OSTimeTick>
}
   1f73c:	e037883a 	mov	sp,fp
   1f740:	dfc00117 	ldw	ra,4(sp)
   1f744:	df000017 	ldw	fp,0(sp)
   1f748:	dec00204 	addi	sp,sp,8
   1f74c:	f800283a 	ret

0001f750 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1f750:	deffff04 	addi	sp,sp,-4
   1f754:	df000015 	stw	fp,0(sp)
   1f758:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1f75c:	000170fa 	wrctl	ienable,zero
}
   1f760:	e037883a 	mov	sp,fp
   1f764:	df000017 	ldw	fp,0(sp)
   1f768:	dec00104 	addi	sp,sp,4
   1f76c:	f800283a 	ret

0001f770 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1f770:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1f774:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1f778:	d1284417 	ldw	r4,-24304(gp)

      stw ra,  0(sp)
   1f77c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1f780:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1f784:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1f788:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1f78c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1f790:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1f794:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1f798:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1f79c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1f7a0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1f7a4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1f7a8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f7ac:	001f9dc0 	call	1f9dc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1f7b0:	d1283f17 	ldw	r4,-24324(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1f7b4:	d1683707 	ldb	r5,-24356(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1f7b8:	d1284415 	stw	r4,-24304(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1f7bc:	d1683745 	stb	r5,-24355(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1f7c0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1f7c4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1f7c8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1f7cc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1f7d0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1f7d4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1f7d8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1f7dc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1f7e0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1f7e4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1f7e8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1f7ec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1f7f0:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1f7f4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1f7f8:	f800283a 	ret

0001f7fc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1f7fc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1f800:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1f804:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1f808:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1f80c:	001f9dc0 	call	1f9dc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1f810:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1f814:	d4a83545 	stb	r18,-24363(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1f818:	003fe506 	br	1f7b0 <__alt_mem_Flash_flash_data+0xf401f7b0>

0001f81c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1f81c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1f820:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1f824:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1f828:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1f82c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1f830:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1f834:	dec00204 	addi	sp,sp,8

      callr r2
   1f838:	103ee83a 	callr	r2

      nop
   1f83c:	0001883a 	nop

0001f840 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1f840:	defff704 	addi	sp,sp,-36
   1f844:	dfc00815 	stw	ra,32(sp)
   1f848:	df000715 	stw	fp,28(sp)
   1f84c:	df000704 	addi	fp,sp,28
   1f850:	e13ffc15 	stw	r4,-16(fp)
   1f854:	e17ffd15 	stw	r5,-12(fp)
   1f858:	e1bffe15 	stw	r6,-8(fp)
   1f85c:	3805883a 	mov	r2,r7
   1f860:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1f864:	e0fffe17 	ldw	r3,-8(fp)
   1f868:	00bfff04 	movi	r2,-4
   1f86c:	1884703a 	and	r2,r3,r2
   1f870:	10bef704 	addi	r2,r2,-1060
   1f874:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1f878:	e13ff917 	ldw	r4,-28(fp)
   1f87c:	000b883a 	mov	r5,zero
   1f880:	01810904 	movi	r6,1060
   1f884:	000b4740 	call	b474 <memset>
   1f888:	e0bff917 	ldw	r2,-28(fp)
   1f88c:	10c0bb04 	addi	r3,r2,748
   1f890:	e0bff917 	ldw	r2,-28(fp)
   1f894:	10c00115 	stw	r3,4(r2)
   1f898:	e0bff917 	ldw	r2,-28(fp)
   1f89c:	10c0d504 	addi	r3,r2,852
   1f8a0:	e0bff917 	ldw	r2,-28(fp)
   1f8a4:	10c00215 	stw	r3,8(r2)
   1f8a8:	e0bff917 	ldw	r2,-28(fp)
   1f8ac:	10c0ef04 	addi	r3,r2,956
   1f8b0:	e0bff917 	ldw	r2,-28(fp)
   1f8b4:	10c00315 	stw	r3,12(r2)
   1f8b8:	e0fff917 	ldw	r3,-28(fp)
   1f8bc:	008000b4 	movhi	r2,2
   1f8c0:	1083a104 	addi	r2,r2,3716
   1f8c4:	18800d15 	stw	r2,52(r3)
   1f8c8:	e0bff917 	ldw	r2,-28(fp)
   1f8cc:	00c00044 	movi	r3,1
   1f8d0:	10c02915 	stw	r3,164(r2)
   1f8d4:	10002a15 	stw	zero,168(r2)
   1f8d8:	e0bff917 	ldw	r2,-28(fp)
   1f8dc:	00ccc384 	movi	r3,13070
   1f8e0:	10c02b0d 	sth	r3,172(r2)
   1f8e4:	e0bff917 	ldw	r2,-28(fp)
   1f8e8:	00eaf344 	movi	r3,-21555
   1f8ec:	10c02b8d 	sth	r3,174(r2)
   1f8f0:	e0bff917 	ldw	r2,-28(fp)
   1f8f4:	00c48d04 	movi	r3,4660
   1f8f8:	10c02c0d 	sth	r3,176(r2)
   1f8fc:	e0bff917 	ldw	r2,-28(fp)
   1f900:	00f99b44 	movi	r3,-6547
   1f904:	10c02c8d 	sth	r3,178(r2)
   1f908:	e0bff917 	ldw	r2,-28(fp)
   1f90c:	00f7bb04 	movi	r3,-8468
   1f910:	10c02d0d 	sth	r3,180(r2)
   1f914:	e0bff917 	ldw	r2,-28(fp)
   1f918:	00c00144 	movi	r3,5
   1f91c:	10c02d8d 	sth	r3,182(r2)
   1f920:	e0bff917 	ldw	r2,-28(fp)
   1f924:	00c002c4 	movi	r3,11
   1f928:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1f92c:	e0bff917 	ldw	r2,-28(fp)
   1f930:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1f934:	e0bffa17 	ldw	r2,-24(fp)
   1f938:	10bff304 	addi	r2,r2,-52
   1f93c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1f940:	e0bffb17 	ldw	r2,-20(fp)
   1f944:	10800c04 	addi	r2,r2,48
   1f948:	e0fffc17 	ldw	r3,-16(fp)
   1f94c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1f950:	e0bffb17 	ldw	r2,-20(fp)
   1f954:	10800b04 	addi	r2,r2,44
   1f958:	e0fffd17 	ldw	r3,-12(fp)
   1f95c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1f960:	e0bffb17 	ldw	r2,-20(fp)
   1f964:	10800a04 	addi	r2,r2,40
   1f968:	e0fff917 	ldw	r3,-28(fp)
   1f96c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1f970:	008000b4 	movhi	r2,2
   1f974:	10be0704 	addi	r2,r2,-2020
   1f978:	10c00104 	addi	r3,r2,4
   1f97c:	e0bffb17 	ldw	r2,-20(fp)
   1f980:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1f984:	e0bffb17 	ldw	r2,-20(fp)
}
   1f988:	e037883a 	mov	sp,fp
   1f98c:	dfc00117 	ldw	ra,4(sp)
   1f990:	df000017 	ldw	fp,0(sp)
   1f994:	dec00204 	addi	sp,sp,8
   1f998:	f800283a 	ret

0001f99c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1f99c:	defffe04 	addi	sp,sp,-8
   1f9a0:	df000115 	stw	fp,4(sp)
   1f9a4:	df000104 	addi	fp,sp,4
   1f9a8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1f9ac:	e037883a 	mov	sp,fp
   1f9b0:	df000017 	ldw	fp,0(sp)
   1f9b4:	dec00104 	addi	sp,sp,4
   1f9b8:	f800283a 	ret

0001f9bc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1f9bc:	defffe04 	addi	sp,sp,-8
   1f9c0:	df000115 	stw	fp,4(sp)
   1f9c4:	df000104 	addi	fp,sp,4
   1f9c8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1f9cc:	e037883a 	mov	sp,fp
   1f9d0:	df000017 	ldw	fp,0(sp)
   1f9d4:	dec00104 	addi	sp,sp,4
   1f9d8:	f800283a 	ret

0001f9dc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1f9dc:	deffff04 	addi	sp,sp,-4
   1f9e0:	df000015 	stw	fp,0(sp)
   1f9e4:	d839883a 	mov	fp,sp
}
   1f9e8:	e037883a 	mov	sp,fp
   1f9ec:	df000017 	ldw	fp,0(sp)
   1f9f0:	dec00104 	addi	sp,sp,4
   1f9f4:	f800283a 	ret

0001f9f8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1f9f8:	deffff04 	addi	sp,sp,-4
   1f9fc:	df000015 	stw	fp,0(sp)
   1fa00:	d839883a 	mov	fp,sp
}
   1fa04:	e037883a 	mov	sp,fp
   1fa08:	df000017 	ldw	fp,0(sp)
   1fa0c:	dec00104 	addi	sp,sp,4
   1fa10:	f800283a 	ret

0001fa14 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1fa14:	deffff04 	addi	sp,sp,-4
   1fa18:	df000015 	stw	fp,0(sp)
   1fa1c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1fa20:	e037883a 	mov	sp,fp
   1fa24:	df000017 	ldw	fp,0(sp)
   1fa28:	dec00104 	addi	sp,sp,4
   1fa2c:	f800283a 	ret

0001fa30 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1fa30:	deffff04 	addi	sp,sp,-4
   1fa34:	df000015 	stw	fp,0(sp)
   1fa38:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1fa3c:	e037883a 	mov	sp,fp
   1fa40:	df000017 	ldw	fp,0(sp)
   1fa44:	dec00104 	addi	sp,sp,4
   1fa48:	f800283a 	ret

0001fa4c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1fa4c:	deffff04 	addi	sp,sp,-4
   1fa50:	df000015 	stw	fp,0(sp)
   1fa54:	d839883a 	mov	fp,sp
}
   1fa58:	e037883a 	mov	sp,fp
   1fa5c:	df000017 	ldw	fp,0(sp)
   1fa60:	dec00104 	addi	sp,sp,4
   1fa64:	f800283a 	ret

0001fa68 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1fa68:	deffff04 	addi	sp,sp,-4
   1fa6c:	df000015 	stw	fp,0(sp)
   1fa70:	d839883a 	mov	fp,sp
}
   1fa74:	e037883a 	mov	sp,fp
   1fa78:	df000017 	ldw	fp,0(sp)
   1fa7c:	dec00104 	addi	sp,sp,4
   1fa80:	f800283a 	ret

0001fa84 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1fa84:	defffe04 	addi	sp,sp,-8
   1fa88:	df000115 	stw	fp,4(sp)
   1fa8c:	df000104 	addi	fp,sp,4
   1fa90:	e13fff15 	stw	r4,-4(fp)
}
   1fa94:	e037883a 	mov	sp,fp
   1fa98:	df000017 	ldw	fp,0(sp)
   1fa9c:	dec00104 	addi	sp,sp,4
   1faa0:	f800283a 	ret

0001faa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1faa4:	defffb04 	addi	sp,sp,-20
   1faa8:	dfc00415 	stw	ra,16(sp)
   1faac:	df000315 	stw	fp,12(sp)
   1fab0:	df000304 	addi	fp,sp,12
   1fab4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1fab8:	008000b4 	movhi	r2,2
   1fabc:	108b4404 	addi	r2,r2,11536
   1fac0:	10800017 	ldw	r2,0(r2)
   1fac4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1fac8:	00003106 	br	1fb90 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1facc:	e0bffd17 	ldw	r2,-12(fp)
   1fad0:	10800217 	ldw	r2,8(r2)
   1fad4:	1009883a 	mov	r4,r2
   1fad8:	0003b540 	call	3b54 <strlen>
   1fadc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1fae0:	e0bffd17 	ldw	r2,-12(fp)
   1fae4:	10c00217 	ldw	r3,8(r2)
   1fae8:	e0bffe17 	ldw	r2,-8(fp)
   1faec:	10bfffc4 	addi	r2,r2,-1
   1faf0:	1885883a 	add	r2,r3,r2
   1faf4:	10800003 	ldbu	r2,0(r2)
   1faf8:	10803fcc 	andi	r2,r2,255
   1fafc:	1080201c 	xori	r2,r2,128
   1fb00:	10bfe004 	addi	r2,r2,-128
   1fb04:	10800bd8 	cmpnei	r2,r2,47
   1fb08:	1000031e 	bne	r2,zero,1fb18 <alt_find_file+0x74>
    {
      len -= 1;
   1fb0c:	e0bffe17 	ldw	r2,-8(fp)
   1fb10:	10bfffc4 	addi	r2,r2,-1
   1fb14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1fb18:	e0bffe17 	ldw	r2,-8(fp)
   1fb1c:	e0ffff17 	ldw	r3,-4(fp)
   1fb20:	1885883a 	add	r2,r3,r2
   1fb24:	10800003 	ldbu	r2,0(r2)
   1fb28:	10803fcc 	andi	r2,r2,255
   1fb2c:	1080201c 	xori	r2,r2,128
   1fb30:	10bfe004 	addi	r2,r2,-128
   1fb34:	10800be0 	cmpeqi	r2,r2,47
   1fb38:	1000081e 	bne	r2,zero,1fb5c <alt_find_file+0xb8>
   1fb3c:	e0bffe17 	ldw	r2,-8(fp)
   1fb40:	e0ffff17 	ldw	r3,-4(fp)
   1fb44:	1885883a 	add	r2,r3,r2
   1fb48:	10800003 	ldbu	r2,0(r2)
   1fb4c:	10803fcc 	andi	r2,r2,255
   1fb50:	1080201c 	xori	r2,r2,128
   1fb54:	10bfe004 	addi	r2,r2,-128
   1fb58:	10000a1e 	bne	r2,zero,1fb84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1fb5c:	e0bffd17 	ldw	r2,-12(fp)
   1fb60:	10c00217 	ldw	r3,8(r2)
   1fb64:	e0bffe17 	ldw	r2,-8(fp)
   1fb68:	1809883a 	mov	r4,r3
   1fb6c:	e17fff17 	ldw	r5,-4(fp)
   1fb70:	100d883a 	mov	r6,r2
   1fb74:	001fe280 	call	1fe28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1fb78:	1000021e 	bne	r2,zero,1fb84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1fb7c:	e0bffd17 	ldw	r2,-12(fp)
   1fb80:	00000806 	br	1fba4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1fb84:	e0bffd17 	ldw	r2,-12(fp)
   1fb88:	10800017 	ldw	r2,0(r2)
   1fb8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1fb90:	e0fffd17 	ldw	r3,-12(fp)
   1fb94:	008000b4 	movhi	r2,2
   1fb98:	108b4404 	addi	r2,r2,11536
   1fb9c:	18bfcb1e 	bne	r3,r2,1facc <__alt_mem_Flash_flash_data+0xf401facc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1fba0:	0005883a 	mov	r2,zero
}
   1fba4:	e037883a 	mov	sp,fp
   1fba8:	dfc00117 	ldw	ra,4(sp)
   1fbac:	df000017 	ldw	fp,0(sp)
   1fbb0:	dec00204 	addi	sp,sp,8
   1fbb4:	f800283a 	ret

0001fbb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1fbb8:	defff904 	addi	sp,sp,-28
   1fbbc:	dfc00615 	stw	ra,24(sp)
   1fbc0:	df000515 	stw	fp,20(sp)
   1fbc4:	df000504 	addi	fp,sp,20
   1fbc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1fbcc:	00bffa04 	movi	r2,-24
   1fbd0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1fbd4:	008000b4 	movhi	r2,2
   1fbd8:	10935e04 	addi	r2,r2,19832
   1fbdc:	10800017 	ldw	r2,0(r2)
   1fbe0:	e0bffd15 	stw	r2,-12(fp)
   1fbe4:	e03ffe0d 	sth	zero,-8(fp)
   1fbe8:	e0fffe0b 	ldhu	r3,-8(fp)
   1fbec:	e0bffe84 	addi	r2,fp,-6
   1fbf0:	e13ffd17 	ldw	r4,-12(fp)
   1fbf4:	180b883a 	mov	r5,r3
   1fbf8:	100d883a 	mov	r6,r2
   1fbfc:	0019f1c0 	call	19f1c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1fc00:	e03ffb15 	stw	zero,-20(fp)
   1fc04:	00001d06 	br	1fc7c <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1fc08:	008000b4 	movhi	r2,2
   1fc0c:	1085d504 	addi	r2,r2,5972
   1fc10:	e0fffb17 	ldw	r3,-20(fp)
   1fc14:	18c00324 	muli	r3,r3,12
   1fc18:	10c5883a 	add	r2,r2,r3
   1fc1c:	10800017 	ldw	r2,0(r2)
   1fc20:	1000131e 	bne	r2,zero,1fc70 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1fc24:	008000b4 	movhi	r2,2
   1fc28:	1085d504 	addi	r2,r2,5972
   1fc2c:	e0fffb17 	ldw	r3,-20(fp)
   1fc30:	18c00324 	muli	r3,r3,12
   1fc34:	10c5883a 	add	r2,r2,r3
   1fc38:	e0ffff17 	ldw	r3,-4(fp)
   1fc3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1fc40:	008000b4 	movhi	r2,2
   1fc44:	108b4804 	addi	r2,r2,11552
   1fc48:	10c00017 	ldw	r3,0(r2)
   1fc4c:	e0bffb17 	ldw	r2,-20(fp)
   1fc50:	1880040e 	bge	r3,r2,1fc64 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1fc54:	008000b4 	movhi	r2,2
   1fc58:	108b4804 	addi	r2,r2,11552
   1fc5c:	e0fffb17 	ldw	r3,-20(fp)
   1fc60:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1fc64:	e0bffb17 	ldw	r2,-20(fp)
   1fc68:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1fc6c:	00000606 	br	1fc88 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1fc70:	e0bffb17 	ldw	r2,-20(fp)
   1fc74:	10800044 	addi	r2,r2,1
   1fc78:	e0bffb15 	stw	r2,-20(fp)
   1fc7c:	e0bffb17 	ldw	r2,-20(fp)
   1fc80:	10800810 	cmplti	r2,r2,32
   1fc84:	103fe01e 	bne	r2,zero,1fc08 <__alt_mem_Flash_flash_data+0xf401fc08>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1fc88:	008000b4 	movhi	r2,2
   1fc8c:	10935e04 	addi	r2,r2,19832
   1fc90:	10800017 	ldw	r2,0(r2)
   1fc94:	1009883a 	mov	r4,r2
   1fc98:	001a2f00 	call	1a2f0 <OSSemPost>

  return rc;
   1fc9c:	e0bffc17 	ldw	r2,-16(fp)
}
   1fca0:	e037883a 	mov	sp,fp
   1fca4:	dfc00117 	ldw	ra,4(sp)
   1fca8:	df000017 	ldw	fp,0(sp)
   1fcac:	dec00204 	addi	sp,sp,8
   1fcb0:	f800283a 	ret

0001fcb4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1fcb4:	defffb04 	addi	sp,sp,-20
   1fcb8:	df000415 	stw	fp,16(sp)
   1fcbc:	df000404 	addi	fp,sp,16
   1fcc0:	e13ffe15 	stw	r4,-8(fp)
   1fcc4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1fcc8:	e0bfff17 	ldw	r2,-4(fp)
   1fccc:	10840070 	cmpltui	r2,r2,4097
   1fcd0:	1000021e 	bne	r2,zero,1fcdc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1fcd4:	00840004 	movi	r2,4096
   1fcd8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1fcdc:	e0fffe17 	ldw	r3,-8(fp)
   1fce0:	e0bfff17 	ldw	r2,-4(fp)
   1fce4:	1885883a 	add	r2,r3,r2
   1fce8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1fcec:	e0bffe17 	ldw	r2,-8(fp)
   1fcf0:	e0bffc15 	stw	r2,-16(fp)
   1fcf4:	00000506 	br	1fd0c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1fcf8:	e0bffc17 	ldw	r2,-16(fp)
   1fcfc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1fd00:	e0bffc17 	ldw	r2,-16(fp)
   1fd04:	10800804 	addi	r2,r2,32
   1fd08:	e0bffc15 	stw	r2,-16(fp)
   1fd0c:	e0fffc17 	ldw	r3,-16(fp)
   1fd10:	e0bffd17 	ldw	r2,-12(fp)
   1fd14:	18bff836 	bltu	r3,r2,1fcf8 <__alt_mem_Flash_flash_data+0xf401fcf8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1fd18:	e0bffe17 	ldw	r2,-8(fp)
   1fd1c:	108007cc 	andi	r2,r2,31
   1fd20:	10000226 	beq	r2,zero,1fd2c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1fd24:	e0bffc17 	ldw	r2,-16(fp)
   1fd28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1fd2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1fd30:	e037883a 	mov	sp,fp
   1fd34:	df000017 	ldw	fp,0(sp)
   1fd38:	dec00104 	addi	sp,sp,4
   1fd3c:	f800283a 	ret

0001fd40 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1fd40:	defffe04 	addi	sp,sp,-8
   1fd44:	df000115 	stw	fp,4(sp)
   1fd48:	df000104 	addi	fp,sp,4
   1fd4c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1fd50:	e0bfff17 	ldw	r2,-4(fp)
   1fd54:	10bffe84 	addi	r2,r2,-6
   1fd58:	10c00428 	cmpgeui	r3,r2,16
   1fd5c:	18001a1e 	bne	r3,zero,1fdc8 <alt_exception_cause_generated_bad_addr+0x88>
   1fd60:	100690ba 	slli	r3,r2,2
   1fd64:	008000b4 	movhi	r2,2
   1fd68:	10bf5e04 	addi	r2,r2,-648
   1fd6c:	1885883a 	add	r2,r3,r2
   1fd70:	10800017 	ldw	r2,0(r2)
   1fd74:	1000683a 	jmp	r2
   1fd78:	0001fdb8 	rdprs	zero,zero,2038
   1fd7c:	0001fdb8 	rdprs	zero,zero,2038
   1fd80:	0001fdc8 	cmpgei	zero,zero,2039
   1fd84:	0001fdc8 	cmpgei	zero,zero,2039
   1fd88:	0001fdc8 	cmpgei	zero,zero,2039
   1fd8c:	0001fdb8 	rdprs	zero,zero,2038
   1fd90:	0001fdc0 	call	1fdc <newHighscores+0x348>
   1fd94:	0001fdc8 	cmpgei	zero,zero,2039
   1fd98:	0001fdb8 	rdprs	zero,zero,2038
   1fd9c:	0001fdb8 	rdprs	zero,zero,2038
   1fda0:	0001fdc8 	cmpgei	zero,zero,2039
   1fda4:	0001fdb8 	rdprs	zero,zero,2038
   1fda8:	0001fdc0 	call	1fdc <newHighscores+0x348>
   1fdac:	0001fdc8 	cmpgei	zero,zero,2039
   1fdb0:	0001fdc8 	cmpgei	zero,zero,2039
   1fdb4:	0001fdb8 	rdprs	zero,zero,2038
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1fdb8:	00800044 	movi	r2,1
   1fdbc:	00000306 	br	1fdcc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1fdc0:	0005883a 	mov	r2,zero
   1fdc4:	00000106 	br	1fdcc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1fdc8:	0005883a 	mov	r2,zero
  }
}
   1fdcc:	e037883a 	mov	sp,fp
   1fdd0:	df000017 	ldw	fp,0(sp)
   1fdd4:	dec00104 	addi	sp,sp,4
   1fdd8:	f800283a 	ret

0001fddc <atexit>:
   1fddc:	200b883a 	mov	r5,r4
   1fde0:	000d883a 	mov	r6,zero
   1fde4:	0009883a 	mov	r4,zero
   1fde8:	000f883a 	mov	r7,zero
   1fdec:	001fea41 	jmpi	1fea4 <__register_exitproc>

0001fdf0 <exit>:
   1fdf0:	defffe04 	addi	sp,sp,-8
   1fdf4:	000b883a 	mov	r5,zero
   1fdf8:	dc000015 	stw	r16,0(sp)
   1fdfc:	dfc00115 	stw	ra,4(sp)
   1fe00:	2021883a 	mov	r16,r4
   1fe04:	001ffb80 	call	1ffb8 <__call_exitprocs>
   1fe08:	008000b4 	movhi	r2,2
   1fe0c:	108b3e04 	addi	r2,r2,11512
   1fe10:	11000017 	ldw	r4,0(r2)
   1fe14:	20800f17 	ldw	r2,60(r4)
   1fe18:	10000126 	beq	r2,zero,1fe20 <exit+0x30>
   1fe1c:	103ee83a 	callr	r2
   1fe20:	8009883a 	mov	r4,r16
   1fe24:	002014c0 	call	2014c <_exit>

0001fe28 <memcmp>:
   1fe28:	01c000c4 	movi	r7,3
   1fe2c:	3980192e 	bgeu	r7,r6,1fe94 <memcmp+0x6c>
   1fe30:	2144b03a 	or	r2,r4,r5
   1fe34:	11c4703a 	and	r2,r2,r7
   1fe38:	10000f26 	beq	r2,zero,1fe78 <memcmp+0x50>
   1fe3c:	20800003 	ldbu	r2,0(r4)
   1fe40:	28c00003 	ldbu	r3,0(r5)
   1fe44:	10c0151e 	bne	r2,r3,1fe9c <memcmp+0x74>
   1fe48:	31bfff84 	addi	r6,r6,-2
   1fe4c:	01ffffc4 	movi	r7,-1
   1fe50:	00000406 	br	1fe64 <memcmp+0x3c>
   1fe54:	20800003 	ldbu	r2,0(r4)
   1fe58:	28c00003 	ldbu	r3,0(r5)
   1fe5c:	31bfffc4 	addi	r6,r6,-1
   1fe60:	10c00e1e 	bne	r2,r3,1fe9c <memcmp+0x74>
   1fe64:	21000044 	addi	r4,r4,1
   1fe68:	29400044 	addi	r5,r5,1
   1fe6c:	31fff91e 	bne	r6,r7,1fe54 <__alt_mem_Flash_flash_data+0xf401fe54>
   1fe70:	0005883a 	mov	r2,zero
   1fe74:	f800283a 	ret
   1fe78:	20c00017 	ldw	r3,0(r4)
   1fe7c:	28800017 	ldw	r2,0(r5)
   1fe80:	1880041e 	bne	r3,r2,1fe94 <memcmp+0x6c>
   1fe84:	31bfff04 	addi	r6,r6,-4
   1fe88:	21000104 	addi	r4,r4,4
   1fe8c:	29400104 	addi	r5,r5,4
   1fe90:	39bff936 	bltu	r7,r6,1fe78 <__alt_mem_Flash_flash_data+0xf401fe78>
   1fe94:	303fe91e 	bne	r6,zero,1fe3c <__alt_mem_Flash_flash_data+0xf401fe3c>
   1fe98:	003ff506 	br	1fe70 <__alt_mem_Flash_flash_data+0xf401fe70>
   1fe9c:	10c5c83a 	sub	r2,r2,r3
   1fea0:	f800283a 	ret

0001fea4 <__register_exitproc>:
   1fea4:	008000b4 	movhi	r2,2
   1fea8:	defffa04 	addi	sp,sp,-24
   1feac:	108b3e04 	addi	r2,r2,11512
   1feb0:	dc000315 	stw	r16,12(sp)
   1feb4:	14000017 	ldw	r16,0(r2)
   1feb8:	dc400415 	stw	r17,16(sp)
   1febc:	dfc00515 	stw	ra,20(sp)
   1fec0:	80805217 	ldw	r2,328(r16)
   1fec4:	2023883a 	mov	r17,r4
   1fec8:	10003626 	beq	r2,zero,1ffa4 <__register_exitproc+0x100>
   1fecc:	10c00117 	ldw	r3,4(r2)
   1fed0:	010007c4 	movi	r4,31
   1fed4:	20c00e16 	blt	r4,r3,1ff10 <__register_exitproc+0x6c>
   1fed8:	1a400044 	addi	r9,r3,1
   1fedc:	8800211e 	bne	r17,zero,1ff64 <__register_exitproc+0xc0>
   1fee0:	18c00084 	addi	r3,r3,2
   1fee4:	18c7883a 	add	r3,r3,r3
   1fee8:	18c7883a 	add	r3,r3,r3
   1feec:	12400115 	stw	r9,4(r2)
   1fef0:	10c7883a 	add	r3,r2,r3
   1fef4:	19400015 	stw	r5,0(r3)
   1fef8:	0005883a 	mov	r2,zero
   1fefc:	dfc00517 	ldw	ra,20(sp)
   1ff00:	dc400417 	ldw	r17,16(sp)
   1ff04:	dc000317 	ldw	r16,12(sp)
   1ff08:	dec00604 	addi	sp,sp,24
   1ff0c:	f800283a 	ret
   1ff10:	00800034 	movhi	r2,0
   1ff14:	10800004 	addi	r2,r2,0
   1ff18:	10002526 	beq	r2,zero,1ffb0 <__register_exitproc+0x10c>
   1ff1c:	01006404 	movi	r4,400
   1ff20:	d9400015 	stw	r5,0(sp)
   1ff24:	d9800115 	stw	r6,4(sp)
   1ff28:	d9c00215 	stw	r7,8(sp)
   1ff2c:	00000000 	call	0 <__alt_mem_SDRAM>
   1ff30:	d9400017 	ldw	r5,0(sp)
   1ff34:	d9800117 	ldw	r6,4(sp)
   1ff38:	d9c00217 	ldw	r7,8(sp)
   1ff3c:	10001c26 	beq	r2,zero,1ffb0 <__register_exitproc+0x10c>
   1ff40:	80c05217 	ldw	r3,328(r16)
   1ff44:	10000115 	stw	zero,4(r2)
   1ff48:	02400044 	movi	r9,1
   1ff4c:	10c00015 	stw	r3,0(r2)
   1ff50:	80805215 	stw	r2,328(r16)
   1ff54:	10006215 	stw	zero,392(r2)
   1ff58:	10006315 	stw	zero,396(r2)
   1ff5c:	0007883a 	mov	r3,zero
   1ff60:	883fdf26 	beq	r17,zero,1fee0 <__alt_mem_Flash_flash_data+0xf401fee0>
   1ff64:	18d1883a 	add	r8,r3,r3
   1ff68:	4211883a 	add	r8,r8,r8
   1ff6c:	1211883a 	add	r8,r2,r8
   1ff70:	41802215 	stw	r6,136(r8)
   1ff74:	01000044 	movi	r4,1
   1ff78:	11806217 	ldw	r6,392(r2)
   1ff7c:	20c8983a 	sll	r4,r4,r3
   1ff80:	310cb03a 	or	r6,r6,r4
   1ff84:	11806215 	stw	r6,392(r2)
   1ff88:	41c04215 	stw	r7,264(r8)
   1ff8c:	01800084 	movi	r6,2
   1ff90:	89bfd31e 	bne	r17,r6,1fee0 <__alt_mem_Flash_flash_data+0xf401fee0>
   1ff94:	11806317 	ldw	r6,396(r2)
   1ff98:	3108b03a 	or	r4,r6,r4
   1ff9c:	11006315 	stw	r4,396(r2)
   1ffa0:	003fcf06 	br	1fee0 <__alt_mem_Flash_flash_data+0xf401fee0>
   1ffa4:	80805304 	addi	r2,r16,332
   1ffa8:	80805215 	stw	r2,328(r16)
   1ffac:	003fc706 	br	1fecc <__alt_mem_Flash_flash_data+0xf401fecc>
   1ffb0:	00bfffc4 	movi	r2,-1
   1ffb4:	003fd106 	br	1fefc <__alt_mem_Flash_flash_data+0xf401fefc>

0001ffb8 <__call_exitprocs>:
   1ffb8:	008000b4 	movhi	r2,2
   1ffbc:	108b3e04 	addi	r2,r2,11512
   1ffc0:	10800017 	ldw	r2,0(r2)
   1ffc4:	defff404 	addi	sp,sp,-48
   1ffc8:	dd800815 	stw	r22,32(sp)
   1ffcc:	d8800015 	stw	r2,0(sp)
   1ffd0:	10805204 	addi	r2,r2,328
   1ffd4:	dd000615 	stw	r20,24(sp)
   1ffd8:	dc800415 	stw	r18,16(sp)
   1ffdc:	dfc00b15 	stw	ra,44(sp)
   1ffe0:	df000a15 	stw	fp,40(sp)
   1ffe4:	ddc00915 	stw	r23,36(sp)
   1ffe8:	dd400715 	stw	r21,28(sp)
   1ffec:	dcc00515 	stw	r19,20(sp)
   1fff0:	dc400315 	stw	r17,12(sp)
   1fff4:	dc000215 	stw	r16,8(sp)
   1fff8:	2025883a 	mov	r18,r4
   1fffc:	2829883a 	mov	r20,r5
   20000:	d8800115 	stw	r2,4(sp)
   20004:	05bfffc4 	movi	r22,-1
   20008:	d8800017 	ldw	r2,0(sp)
   2000c:	14c05217 	ldw	r19,328(r2)
   20010:	98001d26 	beq	r19,zero,20088 <__call_exitprocs+0xd0>
   20014:	dd400117 	ldw	r21,4(sp)
   20018:	98800117 	ldw	r2,4(r19)
   2001c:	173fffc4 	addi	fp,r2,-1
   20020:	e0000d16 	blt	fp,zero,20058 <__call_exitprocs+0xa0>
   20024:	14000044 	addi	r16,r2,1
   20028:	8421883a 	add	r16,r16,r16
   2002c:	8421883a 	add	r16,r16,r16
   20030:	84402004 	addi	r17,r16,128
   20034:	9c63883a 	add	r17,r19,r17
   20038:	9c21883a 	add	r16,r19,r16
   2003c:	a0001e26 	beq	r20,zero,200b8 <__call_exitprocs+0x100>
   20040:	80804017 	ldw	r2,256(r16)
   20044:	15001c26 	beq	r2,r20,200b8 <__call_exitprocs+0x100>
   20048:	e73fffc4 	addi	fp,fp,-1
   2004c:	843fff04 	addi	r16,r16,-4
   20050:	8c7fff04 	addi	r17,r17,-4
   20054:	e5bff91e 	bne	fp,r22,2003c <__alt_mem_Flash_flash_data+0xf402003c>
   20058:	00800034 	movhi	r2,0
   2005c:	10800004 	addi	r2,r2,0
   20060:	10000926 	beq	r2,zero,20088 <__call_exitprocs+0xd0>
   20064:	98800117 	ldw	r2,4(r19)
   20068:	1000311e 	bne	r2,zero,20130 <__call_exitprocs+0x178>
   2006c:	98800017 	ldw	r2,0(r19)
   20070:	10003426 	beq	r2,zero,20144 <__call_exitprocs+0x18c>
   20074:	9809883a 	mov	r4,r19
   20078:	a8800015 	stw	r2,0(r21)
   2007c:	00000000 	call	0 <__alt_mem_SDRAM>
   20080:	acc00017 	ldw	r19,0(r21)
   20084:	983fe41e 	bne	r19,zero,20018 <__alt_mem_Flash_flash_data+0xf4020018>
   20088:	dfc00b17 	ldw	ra,44(sp)
   2008c:	df000a17 	ldw	fp,40(sp)
   20090:	ddc00917 	ldw	r23,36(sp)
   20094:	dd800817 	ldw	r22,32(sp)
   20098:	dd400717 	ldw	r21,28(sp)
   2009c:	dd000617 	ldw	r20,24(sp)
   200a0:	dcc00517 	ldw	r19,20(sp)
   200a4:	dc800417 	ldw	r18,16(sp)
   200a8:	dc400317 	ldw	r17,12(sp)
   200ac:	dc000217 	ldw	r16,8(sp)
   200b0:	dec00c04 	addi	sp,sp,48
   200b4:	f800283a 	ret
   200b8:	98800117 	ldw	r2,4(r19)
   200bc:	80c00017 	ldw	r3,0(r16)
   200c0:	10bfffc4 	addi	r2,r2,-1
   200c4:	17001526 	beq	r2,fp,2011c <__call_exitprocs+0x164>
   200c8:	80000015 	stw	zero,0(r16)
   200cc:	183fde26 	beq	r3,zero,20048 <__alt_mem_Flash_flash_data+0xf4020048>
   200d0:	00800044 	movi	r2,1
   200d4:	1708983a 	sll	r4,r2,fp
   200d8:	98806217 	ldw	r2,392(r19)
   200dc:	9dc00117 	ldw	r23,4(r19)
   200e0:	2084703a 	and	r2,r4,r2
   200e4:	1000061e 	bne	r2,zero,20100 <__call_exitprocs+0x148>
   200e8:	183ee83a 	callr	r3
   200ec:	98800117 	ldw	r2,4(r19)
   200f0:	15ffc51e 	bne	r2,r23,20008 <__alt_mem_Flash_flash_data+0xf4020008>
   200f4:	a8800017 	ldw	r2,0(r21)
   200f8:	14ffd326 	beq	r2,r19,20048 <__alt_mem_Flash_flash_data+0xf4020048>
   200fc:	003fc206 	br	20008 <__alt_mem_Flash_flash_data+0xf4020008>
   20100:	98806317 	ldw	r2,396(r19)
   20104:	2084703a 	and	r2,r4,r2
   20108:	1000061e 	bne	r2,zero,20124 <__call_exitprocs+0x16c>
   2010c:	89400017 	ldw	r5,0(r17)
   20110:	9009883a 	mov	r4,r18
   20114:	183ee83a 	callr	r3
   20118:	003ff406 	br	200ec <__alt_mem_Flash_flash_data+0xf40200ec>
   2011c:	9f000115 	stw	fp,4(r19)
   20120:	003fea06 	br	200cc <__alt_mem_Flash_flash_data+0xf40200cc>
   20124:	89000017 	ldw	r4,0(r17)
   20128:	183ee83a 	callr	r3
   2012c:	003fef06 	br	200ec <__alt_mem_Flash_flash_data+0xf40200ec>
   20130:	98800017 	ldw	r2,0(r19)
   20134:	982b883a 	mov	r21,r19
   20138:	1027883a 	mov	r19,r2
   2013c:	983fb61e 	bne	r19,zero,20018 <__alt_mem_Flash_flash_data+0xf4020018>
   20140:	003fd106 	br	20088 <__alt_mem_Flash_flash_data+0xf4020088>
   20144:	0005883a 	mov	r2,zero
   20148:	003ffa06 	br	20134 <__alt_mem_Flash_flash_data+0xf4020134>

0002014c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2014c:	defffd04 	addi	sp,sp,-12
   20150:	df000215 	stw	fp,8(sp)
   20154:	df000204 	addi	fp,sp,8
   20158:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2015c:	008000b4 	movhi	r2,2
   20160:	10936644 	addi	r2,r2,19865
   20164:	10000005 	stb	zero,0(r2)
   20168:	e0bfff17 	ldw	r2,-4(fp)
   2016c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20170:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20174:	10000226 	beq	r2,zero,20180 <_exit+0x34>
    ALT_SIM_FAIL();
   20178:	002af070 	cmpltui	zero,zero,43969
   2017c:	00000106 	br	20184 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   20180:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20184:	003fff06 	br	20184 <__alt_mem_Flash_flash_data+0xf4020184>
